WEBVTT
1
00:00:07.660 --> 00:00:14.650
So guys, now let us discuss the implementation of bitmaps, so in order to implement the bitmap, you

2
00:00:14.650 --> 00:00:18.190
need to create two files the bitmap doxy and Bitmap Crawdads.

3
00:00:18.700 --> 00:00:23.230
So we will going to implement bitmap as a library, a very small library.

4
00:00:23.860 --> 00:00:27.850
So we have already discussed how to represent the bitmap using C structure.

5
00:00:28.720 --> 00:00:33.340
Now we need to write a couple of APIs which will perform operations on a bitmap.

6
00:00:34.990 --> 00:00:38.530
So these are the collection of APIs which we need to implement.

7
00:00:39.100 --> 00:00:45.400
The prototype and declaration of these APIs will go in bitmap, not edge, whereas the implementation

8
00:00:45.400 --> 00:00:46.960
will go in bitmap Dorsey.

9
00:00:47.650 --> 00:00:48.040
All right.

10
00:00:48.790 --> 00:00:55.600
And if you notice, what does each of these API do, then it is quite obvious from their name, the

11
00:00:55.600 --> 00:01:03.040
first API is simply create a bitmap added in which the number of bits was the user can manipulate is

12
00:01:03.040 --> 00:01:05.530
and that is an underscore bits.

13
00:01:05.950 --> 00:01:06.400
All right.

14
00:01:07.210 --> 00:01:12.580
So the input to the bitmap create EPA is the number of beds to be created.

15
00:01:13.540 --> 00:01:17.980
Then the second API must print the individual bits of the bitmap.

16
00:01:18.640 --> 00:01:26.410
So, for example, this is the snapshot of the bitmap, so bitmap print API must print the output one

17
00:01:26.410 --> 00:01:29.380
zero zero one zero zero one zero on the screen.

18
00:01:29.890 --> 00:01:33.970
That is, this API print the contents of the bitmap.

19
00:01:35.620 --> 00:01:42.120
Then Bitmaps said, what is the API, which is used to set a particular bed in the bitmap area?

20
00:01:42.670 --> 00:01:49.150
So for example, if you invoke this API bitmap set bit bossing the pointer to the bitmap and let us

21
00:01:49.150 --> 00:01:51.730
suppose that as an index value, you pass for.

22
00:01:52.390 --> 00:01:52.840
All right.

23
00:01:53.380 --> 00:02:01.840
So in this example, the BRIT at full time location or world index must be set to one, and the same

24
00:02:01.840 --> 00:02:03.970
goes with bitmap unsaid width.

25
00:02:05.610 --> 00:02:12.240
Fifth, FBI bitmap is set returns true or false, depending whether this particular bit at the following

26
00:02:12.240 --> 00:02:15.060
index is one or not.

27
00:02:17.410 --> 00:02:17.830
All right.

28
00:02:18.130 --> 00:02:24.340
So Wall is a derivative, which is defined in SDD bold attacks, so you need to include this high profile

29
00:02:25.360 --> 00:02:33.640
then bitmap clear is an API which will reset all the bits of the bitmap edit and bitmaps at all is an

30
00:02:33.640 --> 00:02:37.360
API which will set all the bits of the bitmap edit.

31
00:02:38.080 --> 00:02:38.500
All right.

32
00:02:39.970 --> 00:02:43.540
Now note that in these two APIs, you need to write an efficient code.

33
00:02:44.140 --> 00:02:51.610
He had an efficient code means how many memory operations are function on program issues in order to

34
00:02:51.610 --> 00:02:54.250
perform bitmap clear or bitmaps at all.

35
00:02:55.660 --> 00:03:03.640
So, for example, if I issue bitmap clear operation on this bitmap adi, then it is suffice to issue

36
00:03:03.640 --> 00:03:10.840
one operation on this bitmap area in order to clear all the bits and how you will going to do that.

37
00:03:12.370 --> 00:03:17.470
So what I was going to do is that that the size of this bitmap is in bits.

38
00:03:18.460 --> 00:03:27.760
So it is suffice for me if I typecast this bitmap area into unsigned integer eight type pointer.

39
00:03:33.890 --> 00:03:37.970
And after typecasting, I will simply write star story equal to zero.

40
00:03:38.510 --> 00:03:45.800
So just buy one memory operation all the bits of this bitmap Eddie will be initialized to zero.

41
00:03:47.040 --> 00:03:47.440
All right.

42
00:03:48.060 --> 00:03:55.950
So if the size of this map, Eddie was 16 bits, then instead of you in 80, I would have taken you

43
00:03:55.950 --> 00:03:56.930
and 16t.

44
00:03:59.000 --> 00:04:07.460
All right, and this line stays same had the size of this bitmap, Eddie was something like 32 bit than

45
00:04:07.460 --> 00:04:13.910
I would have type casted this bitmap Eddie into you and 32 Typekit pointer.

46
00:04:17.060 --> 00:04:23.060
And just by issuing one memory operations, I would have initialized all the bits of this map added

47
00:04:23.060 --> 00:04:23.600
to zero.

48
00:04:24.650 --> 00:04:31.490
Similarly, if the size of the bitmap edit was 64 bits, then I would have used here.

49
00:04:32.950 --> 00:04:36.250
You and 64 did a bike.

50
00:04:40.250 --> 00:04:41.510
And now it is up to you.

51
00:04:41.660 --> 00:04:46.280
The size of this map added, let's say some arbitrary value, one hundred and fifty six.

52
00:04:46.970 --> 00:04:52.580
So now you have to issue minimum number of operations in order to initialize all the bits of the bitmap

53
00:04:52.580 --> 00:04:53.030
any.

54
00:04:54.770 --> 00:04:55.370
Two zero.

55
00:04:56.180 --> 00:04:58.790
So now you have to apply a little bit of automatic.

56
00:04:59.570 --> 00:05:05.990
That is typecasting the first 64 bits of the bitmap Eddie to the U.N. 64 type variable and initialize

57
00:05:05.990 --> 00:05:06.920
and get to zero.

58
00:05:07.400 --> 00:05:15.650
Then again, typecasting the next set of 64 bits of the bitmap added to you in 64 time variable again

59
00:05:15.650 --> 00:05:18.440
and again, initializing the variable to zero.

60
00:05:18.860 --> 00:05:25.120
So this would cover 120 Edwards in two memory operations, and the remaining bits which are left is

61
00:05:25.130 --> 00:05:35.990
28, which this you can do by typecasting it into you and 60 you and 16 type of variable, which which

62
00:05:35.990 --> 00:05:43.110
will need one memory operations to initialize 16 bits to zero and the remaining 12 which are left these

63
00:05:43.130 --> 00:05:45.200
remaining 12, which would be covered by one.

64
00:05:45.200 --> 00:05:50.390
You end it the type of variable, then the remaining four bits are left.

65
00:05:50.900 --> 00:05:59.450
These for which can be initialized to zero by invoking an API bitmap unsaid with four times so total

66
00:05:59.450 --> 00:06:04.250
number of operations required to initialize the bitmap array of 656 bits.

67
00:06:04.250 --> 00:06:06.320
Would we do that?

68
00:06:06.320 --> 00:06:13.910
Is this two plus this one plus this?

69
00:06:14.120 --> 00:06:17.270
You indicate Operation Plus four?

70
00:06:18.290 --> 00:06:26.020
So two three four four eight operations and so you need to write an efficient code for these two areas

71
00:06:26.030 --> 00:06:28.880
that is bitmap clear and bitmap set all.

72
00:06:32.430 --> 00:06:38.580
Now, let me discuss for the sake of an example, how to implement the API, but maps that bit.

73
00:06:40.110 --> 00:06:40.530
All right.

74
00:06:41.070 --> 00:06:50.190
So if I invoke this API with index location, let's say 22 than in this bitmap 80 at index number 22,

75
00:06:50.220 --> 00:06:53.190
the width should be set to one.

76
00:06:54.230 --> 00:06:58.760
So this should be the end result or oppression, which this API is supposed to do.

77
00:06:59.510 --> 00:07:04.730
So here is the pseudocode all you can see an exact program, which would exactly do that.

78
00:07:05.390 --> 00:07:13.160
And I leave it to you to read the code of this API and understand all you need to do is to apply a very

79
00:07:13.160 --> 00:07:20.450
simple high school level, ultimately to compute the exact location of the bit in the bitmap area,

80
00:07:20.870 --> 00:07:22.490
which is to be set to one.

81
00:07:23.090 --> 00:07:25.730
So I hope it is very much clear what needs to be done.

82
00:07:26.960 --> 00:07:33.350
Please do test all these APIs that you write, and you can simply test the implementation of each of

83
00:07:33.350 --> 00:07:36.440
these APIs using our API bitmap print.

84
00:07:37.160 --> 00:07:42.290
You can perform some random operations on your bitmap adi and use this API to print the contents of

85
00:07:42.290 --> 00:07:43.130
the bitmap Eddie.

