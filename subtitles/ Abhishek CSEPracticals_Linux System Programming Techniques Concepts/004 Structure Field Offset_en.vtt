WEBVTT
1
00:00:05.300 --> 00:00:11.840
So, guys, before proceeding further to discuss the design and implementation of deal threads, it

2
00:00:11.840 --> 00:00:17.360
is important that we understand the concept of offset and see structures.

3
00:00:19.130 --> 00:00:24.850
So you may already be familiar with this, so you can simply skim through this lecture.

4
00:00:25.070 --> 00:00:29.780
And if you are not familiar, then this lecture will be very useful to you.

5
00:00:31.100 --> 00:00:37.910
So let us start with the question, right, to see Macroom, which computes the offset of a given field

6
00:00:37.910 --> 00:00:39.380
in a given structure.

7
00:00:40.430 --> 00:00:43.530
So let us discuss this with the help of an example.

8
00:00:44.270 --> 00:00:49.500
For example, suppose you have the following structure which has the following four fields.

9
00:00:50.300 --> 00:00:57.530
Now, if you create an object of this structure using Mallak, then the memory footprint of object of

10
00:00:57.530 --> 00:01:01.360
this structure and the memory would look something like this.

11
00:01:02.360 --> 00:01:09.380
You can see that the name field is 30 bytes long, whereas the cellular field is four bytes long.

12
00:01:10.040 --> 00:01:13.460
So we assume that unsigned int is four bytes.

13
00:01:14.330 --> 00:01:21.580
Similarly, the designation is also 30 bytes long and the employee irony is again for bytes long.

14
00:01:22.460 --> 00:01:29.030
So you can see the following table shows the size of each field as well as the offset of each field

15
00:01:29.840 --> 00:01:31.500
of this structure.

16
00:01:32.150 --> 00:01:38.090
So you can see that the second column represents the size of each field, which I have already shown

17
00:01:38.090 --> 00:01:38.330
you.

18
00:01:38.930 --> 00:01:43.550
The offset of each field is actually the number of whites.

19
00:01:43.550 --> 00:01:47.450
That particular field is away from the start of the object.

20
00:01:48.200 --> 00:01:49.670
For example, suppose.

21
00:01:50.830 --> 00:01:57.100
The second field that is the Selvi field is 30 miles away from the start of this object.

22
00:01:57.790 --> 00:02:03.050
So, for example, suppose the starting address of this object is 1000, right?

23
00:02:03.730 --> 00:02:10.410
So the starting bite of the Sally Field will be 1038 wide, right.

24
00:02:11.170 --> 00:02:14.640
So the offset of the Sally Field is the number of white.

25
00:02:14.650 --> 00:02:18.020
This field is away from the start of the object.

26
00:02:19.060 --> 00:02:22.570
So the offset of the Sally Field is 30 whites.

27
00:02:23.230 --> 00:02:23.650
Right.

28
00:02:24.340 --> 00:02:28.960
And it is obvious that the offset of the first field of the structure is always zero.

29
00:02:30.070 --> 00:02:36.340
Similarly, the offset of the field designation is three, four bytes and the offset of the field and

30
00:02:36.640 --> 00:02:39.220
it will going to be 64 bytes.

31
00:02:40.240 --> 00:02:47.500
Now, the question is that that you need to write a generic macro which computes the offset of a given

32
00:02:47.500 --> 00:02:49.060
field in a C structure.

33
00:02:49.750 --> 00:02:55.260
So now you can post a video here and attempt to write a macro by yourself.

34
00:03:01.980 --> 00:03:04.650
So such a macro can be written as follows.

35
00:03:05.400 --> 00:03:08.340
Right, so let the macro be offset off.

36
00:03:08.850 --> 00:03:15.690
The first argument to the macro is the name of the structure and the second argument to the macro is

37
00:03:15.900 --> 00:03:17.910
one of the field of this is structure.

38
00:03:19.780 --> 00:03:26.560
And the definition of this macro simply computes the offset of a given field in a given a structure.

39
00:03:27.930 --> 00:03:34.080
Now, it is something specific to the language and you need to understand it, that why it computes

40
00:03:34.080 --> 00:03:35.580
the offset of this field.

41
00:03:36.540 --> 00:03:38.640
So how are you going to use this macro?

42
00:03:39.000 --> 00:03:42.850
This macro can be used for any structure and for any field.

43
00:03:43.380 --> 00:03:45.840
So this macro should be used as follows.

44
00:03:46.230 --> 00:03:48.190
Just right off set off.

45
00:03:48.210 --> 00:03:57.260
That is invocation of this macro boss, the structure name, which is employing the Scutti and passed

46
00:03:57.270 --> 00:04:00.130
the name of one of the field of this structure.

47
00:04:00.360 --> 00:04:02.180
So let's say employ idee.

48
00:04:02.760 --> 00:04:11.340
So this macro will actually return the offset of the employee ID field of this, a structure that does

49
00:04:11.340 --> 00:04:15.330
this will going to return value equal to sixty four.

50
00:04:16.680 --> 00:04:23.250
In fact, it is a good interview question that you are asked to write such a macro in C or C++.

51
00:04:24.510 --> 00:04:27.960
So we have a small assignment attached to this lecture.

52
00:04:28.170 --> 00:04:31.170
Kindly do that assignment and then proceed further.

53
00:04:43.250 --> 00:04:50.580
So, guys, in order to practice the concept of offset, we have a small exercise in this lecture.

54
00:04:51.920 --> 00:04:58.070
So in this exercise, we just need to write the implementation of this function that does this function.

55
00:04:58.070 --> 00:05:01.010
Simply ask you to print the employee details.

56
00:05:03.450 --> 00:05:08.490
Now, you can see on the right hand side, I have defined the structure of employing the school team.

57
00:05:09.300 --> 00:05:13.940
You can see that the first four fields of this employer structure are pretty much obvious.

58
00:05:14.550 --> 00:05:20.630
The last field of this structure is actually a field of type team.

59
00:05:21.180 --> 00:05:21.640
Right.

60
00:05:21.900 --> 00:05:26.700
So Geelhoed is simply one of the member of this structure employer.

61
00:05:28.410 --> 00:05:36.030
Now, you can see that in this exercise, we have a pointer to the object of type emploi in the scooty,

62
00:05:36.360 --> 00:05:36.780
right?

63
00:05:37.140 --> 00:05:42.110
So just assume that we have a pointer which points to the object of type apply.

64
00:05:43.860 --> 00:05:51.210
And the second line, we are simply invoking a function which should print the employee details, but

65
00:05:51.210 --> 00:05:58.170
notice that the argument to this function is actually the address of the last member of this employee

66
00:05:58.200 --> 00:05:58.890
structure.

67
00:05:59.280 --> 00:06:06.180
That is the address of this G.A. So you have to provide the implementation of this function, which

68
00:06:06.180 --> 00:06:13.710
actually prints the rest of the four fields of this employee structure that is named Salvy designation

69
00:06:13.890 --> 00:06:15.300
and Employee ID.

70
00:06:16.410 --> 00:06:22.590
The argument to this function is the address of the last field of this structure imply.

71
00:06:23.750 --> 00:06:30.530
So here I am, providing you a hint that if you notice the memory footprint of the object of type,

72
00:06:30.530 --> 00:06:32.580
Emploi would look something like this.

73
00:06:33.230 --> 00:06:41.030
Now, in this function, the argument that is parsed is the address of G.A., which is one of the member

74
00:06:41.030 --> 00:06:44.880
of the structure employed right now.

75
00:06:44.930 --> 00:06:50.320
You need to print name, cell designation and employee ID of this object.

76
00:06:51.020 --> 00:06:57.550
So in order to print these details, what you need is a pointer to the start of the object employment.

77
00:06:58.670 --> 00:07:06.220
So all you need to do here is to somehow get an address which points to the start of the object, implying

78
00:07:06.950 --> 00:07:11.230
that you are given this address and you need to obtain this address.

79
00:07:11.750 --> 00:07:21.770
So simply from this address, you need to subtract the offset of Geelhoed in order to obtain the starting

80
00:07:21.770 --> 00:07:28.790
address of this object, implying once you get the starting address that you can easily print all the

81
00:07:28.790 --> 00:07:30.560
employee details as usual.

82
00:07:31.570 --> 00:07:36.730
I have provided a solution to this exercise as an assignment to this lecture.

