WEBVTT
1
00:00:05.620 --> 00:00:07.270
So, guys, welcome back.

2
00:00:07.600 --> 00:00:13.720
Now we have stepped into the second portion of the section that is we will going to discuss the mechanism

3
00:00:13.720 --> 00:00:20.790
behind the return and we will also discuss the role of these three registrars in case of procedure returns.

4
00:00:21.430 --> 00:00:26.530
So we will continue with the example which we discussed in case of procedure call here.

5
00:00:26.530 --> 00:00:31.750
You can see that we have the same three functions function F one call, function F two and function

6
00:00:31.750 --> 00:00:33.330
F to call, function F3.

7
00:00:33.880 --> 00:00:34.210
Right.

8
00:00:34.960 --> 00:00:42.010
So let us say that function F three has completed its execution and now function after he wants to return.

9
00:00:42.790 --> 00:00:43.170
Right.

10
00:00:43.330 --> 00:00:50.860
So function F three returns that function F two will resume its execution from the instruction where

11
00:00:50.860 --> 00:00:52.180
it left last time.

12
00:00:52.990 --> 00:00:53.320
Right.

13
00:00:53.710 --> 00:00:56.710
So you can see that one function F three returns.

14
00:00:56.980 --> 00:01:03.430
Then the function of two should resume its execution from the very next instruction, followed by a

15
00:01:03.430 --> 00:01:05.060
call to the function of three.

16
00:01:05.860 --> 00:01:13.540
So just assume that in function F two after the function of three call returns, there may or may not

17
00:01:13.540 --> 00:01:17.290
be any instruction for execution in function F two.

18
00:01:18.160 --> 00:01:20.490
But in this case it really doesn't matter.

19
00:01:20.710 --> 00:01:25.600
We will discuss the mechanism that one function F three terminates or returns.

20
00:01:25.900 --> 00:01:30.670
How static memory occupied by function after three is Freebo.

21
00:01:31.620 --> 00:01:38.760
And how function F two, which is the color of function F three, restore, it's a step from where it

22
00:01:38.760 --> 00:01:40.450
can resume its execution.

23
00:01:41.190 --> 00:01:47.280
So at the moment, one function F three returns, the value of base point to register was thirty six.

24
00:01:47.790 --> 00:01:48.170
Right.

25
00:01:48.360 --> 00:01:52.050
So thirty six is the address which was stored in base point to register.

26
00:01:52.920 --> 00:01:53.330
Right.

27
00:01:54.180 --> 00:02:00.870
And the content of IP Register will obviously the address of written instruction in function F three.

28
00:02:01.380 --> 00:02:01.760
Right.

29
00:02:02.820 --> 00:02:09.090
And of course, that stack pointer will store the address, which is the bottommost address of the stack

30
00:02:09.090 --> 00:02:09.530
memory.

31
00:02:09.810 --> 00:02:15.440
So here you can see that stack pointer points to the bottommost address of the stack memory.

32
00:02:15.660 --> 00:02:22.890
In other words, at the top of the stack memory sovern function F three returns that function F two

33
00:02:22.890 --> 00:02:24.660
has to resume its execution.

34
00:02:25.080 --> 00:02:25.490
Right.

35
00:02:25.680 --> 00:02:29.950
So stack frame of function, F3 has to be popped out of the stack.

36
00:02:30.720 --> 00:02:37.800
In other words, we need to destroy that stack frame of the function F three from the stack memory also

37
00:02:37.800 --> 00:02:39.580
value of stack pointer.

38
00:02:39.580 --> 00:02:41.550
Other stuff should be restored to 52.

39
00:02:42.000 --> 00:02:42.360
Right.

40
00:02:42.720 --> 00:02:48.420
So here you can see that when the stack frame of the function F3 will be completely destroyed, the

41
00:02:48.420 --> 00:02:52.430
bottommost address of the stack memory will be Addas 52.

42
00:02:52.860 --> 00:02:59.400
Therefore, the stack pointer register must be updated to store the address 52 before the function F

43
00:02:59.400 --> 00:03:01.440
to resume its execution.

44
00:03:01.980 --> 00:03:06.840
And not only that, the value of best pointer register should be restored to 60.

45
00:03:07.710 --> 00:03:08.100
Right.

46
00:03:08.850 --> 00:03:15.750
And now we know the reason that why the value of best pointer register has to be restored to 60.

47
00:03:16.380 --> 00:03:16.730
Right.

48
00:03:17.130 --> 00:03:23.880
The reason being that one function after to resume its execution function after must be in a state that

49
00:03:23.880 --> 00:03:29.550
it can access all its arguments and local variables using base point to register.

50
00:03:30.550 --> 00:03:36.910
And finally, the value of instruction point to register should be restored to point to the address

51
00:03:36.910 --> 00:03:42.980
which executed last in the function after that is it should restore to two zero zero four.

52
00:03:43.570 --> 00:03:48.190
So let us discuss how to achieve these three goals step by step.

