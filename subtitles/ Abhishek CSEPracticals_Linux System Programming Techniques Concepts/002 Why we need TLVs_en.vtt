WEBVTT
1
00:00:05.610 --> 00:00:11.670
So, guys, continuing where we left, so we were going to discuss two scenarios where the communicating

2
00:00:11.670 --> 00:00:20.250
machines and the network faces problem and unable to exchange messages with each other because of the

3
00:00:20.250 --> 00:00:21.480
following two reasons.

4
00:00:21.960 --> 00:00:25.480
That is when the machines are distinct and incompatible.

5
00:00:26.040 --> 00:00:32.340
That is, they are manufactured by different vendors using different hardware, using different software

6
00:00:32.820 --> 00:00:36.830
or different languages or different compiler, or it could be any reason.

7
00:00:37.830 --> 00:00:45.120
And when selected machines in the network are upgraded to new software version and some machines are

8
00:00:45.120 --> 00:00:52.380
left with their current software version, but some selective machines are upgraded to the new software

9
00:00:52.380 --> 00:00:52.820
version.

10
00:00:53.370 --> 00:01:00.330
So we will discuss the problem the communicating machines faces in exchanging the messages with each

11
00:01:00.330 --> 00:01:03.420
other and the following two scenarios.

12
00:01:05.930 --> 00:01:11.330
So before going forward, let us do some revision of our sea knowledge.

13
00:01:12.800 --> 00:01:22.160
And we will discuss C with respect to a 32 bit system, so 32 bit system means that the size of unsigned

14
00:01:22.160 --> 00:01:26.750
integer data type on this system is four bytes.

15
00:01:30.100 --> 00:01:40.960
So this is the definition of a 32 bit system, so let us see that we have a message X message of this

16
00:01:40.960 --> 00:01:49.090
format and the machines and the network are actually exchanging the messages in this format.

17
00:01:50.680 --> 00:01:55.930
So if we discussed this format in detail, it has six fields.

18
00:01:57.040 --> 00:02:03.550
And because it's a 32 bit machine, therefore size of the unsigned integer data type is four bytes.

19
00:02:04.510 --> 00:02:10.990
And of course, the second member is the daughter name, which is the eddy of character data type.

20
00:02:11.440 --> 00:02:16.150
And the size of data type care is one bite on all machines.

21
00:02:16.690 --> 00:02:25.870
So therefore the name field will be of size 32 bytes and the rest of the fields in this structure are

22
00:02:25.870 --> 00:02:28.780
of size, are of type unsigned int.

23
00:02:29.200 --> 00:02:31.930
Therefore their size are four bytes.

24
00:02:33.340 --> 00:02:41.840
Now, coming to the offset offset means the displacement of a field from the start of a structure.

25
00:02:42.640 --> 00:02:46.870
So, for example, you have a structure X message here.

26
00:02:47.980 --> 00:02:57.970
So the offset all field interface address to will be the number of bytes that this field is away from

27
00:02:57.970 --> 00:03:00.610
that the starting atlas of this structure.

28
00:03:02.120 --> 00:03:05.690
So what will be the opposite of Interface Atlas two?

29
00:03:06.380 --> 00:03:17.260
It will be four plus 32 plus four, so offset off field interface Adrasta will be 40 bytes, right.

30
00:03:18.110 --> 00:03:22.760
So offset means the displacement of that field inside the structure.

31
00:03:24.080 --> 00:03:30.230
So let's say you have a text message, start BTR and let's assume that the period points to a memory

32
00:03:30.230 --> 00:03:35.180
location where the object of Type X message is.

33
00:03:36.320 --> 00:03:44.120
Present and the memory, so the moment you expose any member of this structure, for example, you access

34
00:03:44.150 --> 00:03:54.980
interface address to it means that you are reading or writing for bytes at 48 byte from the starting

35
00:03:54.980 --> 00:03:55.520
address.

36
00:03:57.260 --> 00:03:57.620
Right.

37
00:03:58.160 --> 00:04:06.200
So, for example, let us say that you have this object of Type X message in the memory and let the

38
00:04:06.200 --> 00:04:10.360
starting address is E, which is two thousand.

39
00:04:10.370 --> 00:04:18.500
So let us assume that the starting address of the object of Type X message is two thousand.

40
00:04:20.610 --> 00:04:20.970
Right.

41
00:04:21.839 --> 00:04:30.930
So 2040 will be that starting address of the field interface address, too, because the offset of this

42
00:04:30.930 --> 00:04:32.100
field is 40.

43
00:04:34.290 --> 00:04:42.510
Right, and the size of this field is four, because the data type on this field is unsigned in.

44
00:04:44.440 --> 00:04:52.360
So the moment you write this statement, that is point Arrow interface said, just do it means you are

45
00:04:52.360 --> 00:05:01.000
either reading or writing the four bytes of data at 48 byte from the starting address on this, a structure

46
00:05:01.450 --> 00:05:04.240
that is at my motor location, two thousand forty.

47
00:05:04.600 --> 00:05:13.030
You are either reading or writing for bytes of data from or into this field of the structure.

48
00:05:14.520 --> 00:05:14.890
Right.

49
00:05:15.660 --> 00:05:23.070
So I'm explaining all this because to understand the problem and the incoming slides, you need to be

50
00:05:23.070 --> 00:05:33.420
thorough with the structure layout and see that is how structures and objects are laid out in the memory

51
00:05:33.960 --> 00:05:34.920
of our system.

52
00:05:38.560 --> 00:05:47.980
So going forward now, let us try to see the real problem, let us see you have the machine, which

53
00:05:47.980 --> 00:05:54.000
is 32 bit machine, and let us say you have the machine B, which is 64 bit machine.

54
00:05:55.030 --> 00:06:02.950
So it means that the size of unsign end on the machine E is four bytes, whereas the size of unsigned

55
00:06:02.950 --> 00:06:05.710
end on the machine B is eight bytes.

56
00:06:07.300 --> 00:06:07.780
So not.

57
00:06:08.410 --> 00:06:15.760
So now let us see the X lay out on wire when they are generated by the machine eight and B respectively.

58
00:06:17.140 --> 00:06:26.530
So you can see that when the machine E generates that X message and places the message on the wire that

59
00:06:26.530 --> 00:06:28.150
is here.

60
00:06:28.990 --> 00:06:32.020
So the message lay out that is generated by the machine.

61
00:06:32.020 --> 00:06:33.790
It looks like this.

62
00:06:35.440 --> 00:06:42.790
You can see it's a four byte IP address, then 32 by Troughton name, and then the rest of the fields

63
00:06:42.790 --> 00:06:44.110
are four bytes each.

64
00:06:44.680 --> 00:06:53.560
So this will be the message layout when machine E generates the message of type X message and place

65
00:06:53.560 --> 00:06:54.790
the message on the wire.

66
00:06:55.960 --> 00:07:01.410
Similarly for machine B since machine B is a 64 bit machine.

67
00:07:02.050 --> 00:07:09.580
Therefore you can see that all the fields which are of type unsigned int in a text message will occupy

68
00:07:09.580 --> 00:07:10.450
eight bytes.

69
00:07:12.980 --> 00:07:22.370
Instead of for why it's so, so so this is the message lay out with respect to the machine be so you

70
00:07:22.370 --> 00:07:27.980
can see the difference, the message generated by the machine and the message generated by the machine.

71
00:07:27.980 --> 00:07:28.340
We.

72
00:07:31.680 --> 00:07:41.010
Now, message that is generated by the machine, it is received by the machine beep so let us now see

73
00:07:41.190 --> 00:07:46.800
that how the machine we will going to read the message that is generated by the machine.

74
00:07:48.360 --> 00:07:57.240
So now let us say that when Machine receives the text message from Machine B, it will typecast a message

75
00:07:57.240 --> 00:08:06.660
according to its belief of definition of text message, because machine E and B are running separately

76
00:08:06.760 --> 00:08:16.020
and the definition of a text message will differ on Machine A and B, according to the type of machine,

77
00:08:16.020 --> 00:08:22.910
according to the hardware architecture, all the compiler or the operating system of the machine A and

78
00:08:22.920 --> 00:08:31.580
B, so you can see that it will typecasts a message according to its belief of definition of text message.

79
00:08:32.520 --> 00:08:32.980
Right.

80
00:08:33.000 --> 00:08:34.200
And what does he believe?

81
00:08:34.200 --> 00:08:41.190
He believes that the size of the unsigned integer is four bytes because it is a little bit machine.

82
00:08:42.360 --> 00:08:48.390
So when Machine E receives the X message from the machine B or the network evil type cast the message

83
00:08:48.390 --> 00:08:52.010
according to its own definition of struct X message.

84
00:08:52.590 --> 00:08:59.640
So you can see that the buffer is actually the message that is received from the machine B and now E

85
00:08:59.640 --> 00:09:07.310
in order to read this message, Will typecasts, this machine will typecast this message into X message

86
00:09:07.320 --> 00:09:07.850
format.

87
00:09:08.760 --> 00:09:12.570
And now as usual, in see how you read the feel of the structure.

88
00:09:14.180 --> 00:09:21.890
You read the fields of the structure as follows, so you can see the problem here when machine E try

89
00:09:21.890 --> 00:09:32.150
to read the first member of the structure that is Lubeck IP, it means that the machine is reading only

90
00:09:32.150 --> 00:09:39.530
four bytes because with the machine in perspective, the Lubeck IP field is a four bytes.

91
00:09:40.640 --> 00:09:43.100
So the machine is actually received.

92
00:09:43.100 --> 00:09:48.560
Edomites, but machine is ending up reading only four bytes.

93
00:09:50.100 --> 00:09:52.390
Right, so problem number one.

94
00:09:55.420 --> 00:10:04.240
Then when the machine starts reading the waterline, so you can see that from this perspective, the

95
00:10:04.590 --> 00:10:08.750
name starts at eight pm right from the start of the message.

96
00:10:09.580 --> 00:10:15.130
So from this perspective, you can see the drop the name start at the eight byte from the start of the

97
00:10:15.130 --> 00:10:15.660
message.

98
00:10:16.210 --> 00:10:22.840
But from its perspective, that not only starts from the fourth right from the start of the message.

99
00:10:23.470 --> 00:10:32.380
So this statement, when executed on the machine e it will try to read the message from the fourth byte.

100
00:10:34.260 --> 00:10:40.740
So the actually out of the message in the memory is this one, that is the message that is received,

101
00:10:41.400 --> 00:10:45.610
but it is trying to reading that out name from the fourth bite of the message.

102
00:10:45.630 --> 00:10:49.020
So from here, that is followed by.

103
00:10:51.720 --> 00:10:53.380
So this is another problem.

104
00:10:54.630 --> 00:10:58.860
So the problem here is that the machine has received the message.

105
00:11:03.090 --> 00:11:10.770
From Machine B and the Machine B generates the message of this format, but Machine E is trying to read

106
00:11:10.770 --> 00:11:15.360
the message as PADA as part of this format.

107
00:11:18.090 --> 00:11:18.460
Right.

108
00:11:18.840 --> 00:11:27.930
So we have this format and it's format, so it is as good as like somebody has given has given you a

109
00:11:28.410 --> 00:11:35.490
letter which is written in Spanish, for example, but using English words.

110
00:11:37.590 --> 00:11:37.950
Right.

111
00:11:38.460 --> 00:11:46.770
And you understand English and you are trying to read that letter in English only, but you will not

112
00:11:46.770 --> 00:11:48.450
going to understand anything.

113
00:11:51.100 --> 00:11:51.470
Right.

114
00:11:53.020 --> 00:11:59.750
So this is the problem, so it ends up in a garbage leading to a corruption on E!

115
00:12:00.160 --> 00:12:08.410
It happens because the size of the types on B is different from that of A right size of data type unsigned

116
00:12:08.410 --> 00:12:14.410
and on machine B, is it by its various size auditor type of unsigned end on machine.

117
00:12:14.410 --> 00:12:15.790
It is four bytes.

118
00:12:17.330 --> 00:12:21.530
So the root cause of the problem is this mismatch of.

119
00:12:23.250 --> 00:12:24.180
Data type.

