WEBVTT
1
00:00:05.680 --> 00:00:13.510
So, guys, now let us understand the definition of page front, a page table dictates that a physical

2
00:00:13.510 --> 00:00:20.200
page is not present in a frame that is the rendered invalid, but for this particular physical page

3
00:00:20.200 --> 00:00:21.120
is not set.

4
00:00:21.910 --> 00:00:28.090
Then a special signal is raised to the CPU by the memory management unit called Trappe.

5
00:00:28.690 --> 00:00:32.130
This signal is also called as page fault.

6
00:00:33.400 --> 00:00:39.730
So now let us see the demand paging scheme combined with the page fault in totality with the help of

7
00:00:39.730 --> 00:00:41.940
a diagram somehow.

8
00:00:42.040 --> 00:00:48.970
Let us go through the example which illustrate the concept of demand paging, and for that let us continue

9
00:00:48.970 --> 00:00:56.410
with the same configuration of the system that is watching at the space of the process is 16 bytes virtual

10
00:00:56.410 --> 00:00:58.630
at what size is four bids.

11
00:00:59.050 --> 00:01:01.030
That size is four bytes.

12
00:01:01.330 --> 00:01:09.460
Main memory size is 32 bytes and the virtual address is decomposed into two parts of two bits each.

13
00:01:10.330 --> 00:01:14.200
So number of bits required for the offset is two bits.

14
00:01:14.950 --> 00:01:21.100
So we have taken the same system configuration which we have taken in order to explain the concept of

15
00:01:21.100 --> 00:01:23.470
paging now for demand paging.

16
00:01:23.650 --> 00:01:26.350
We will continue with the same system configuration.

17
00:01:27.880 --> 00:01:34.200
So you can see in this diagram on the left hand side, we have virtual memory pages for a process.

18
00:01:34.900 --> 00:01:40.210
So the process which will address the space is fragmented and before virtual memory pages.

19
00:01:41.630 --> 00:01:44.840
And following is the page table of a process.

20
00:01:46.250 --> 00:01:51.920
But there are other components of the system, such as you have C.P.U, you have a desk and you have

21
00:01:51.920 --> 00:01:52.730
main memory.

22
00:01:53.750 --> 00:02:00.560
Now let us suppose that during the course of execution of a program, the CPU generates a virtual address

23
00:02:00.560 --> 00:02:01.000
nine.

24
00:02:01.790 --> 00:02:08.900
Right now, the first two bits of this virtual address will be used as an indexing into the page table.

25
00:02:10.190 --> 00:02:14.840
So the second index of this page table will be hit, right?

26
00:02:16.810 --> 00:02:22.960
Now, the world champions number two maps to the physical page number two, but it's valid, invalid,

27
00:02:22.960 --> 00:02:24.400
but is not set.

28
00:02:25.090 --> 00:02:32.200
It means that this physical page is not present in the main memory, but it is present on the disk.

29
00:02:33.050 --> 00:02:42.440
It means that in this tape, no TV pitch for signal is raised by the amamou to the CPU when CPU receives

30
00:02:42.440 --> 00:02:46.920
the baseball signal from the main memory unit, the CPU.

31
00:02:46.940 --> 00:02:50.560
Look at the physical page number two on the disk.

32
00:02:51.860 --> 00:03:00.380
And when the CPU locate the physical page, number two on the desk works this physical page from the

33
00:03:00.380 --> 00:03:02.150
disk into the main memory.

34
00:03:03.200 --> 00:03:10.430
Now, which frame in the main memory is choosing to load this particular page depends on the page replacement

35
00:03:10.430 --> 00:03:12.310
algorithm that is being used.

36
00:03:12.860 --> 00:03:18.260
It might be possible that there could be some other physical page which belong to some other process

37
00:03:18.270 --> 00:03:18.790
already.

38
00:03:19.640 --> 00:03:28.550
So that particular physical page could be swept out of main memory and saved on the disk because it

39
00:03:28.550 --> 00:03:35.750
has to vacate the frame number three ofman memory so that a new page which is being bought from the

40
00:03:35.750 --> 00:03:38.370
disk could be loaded in this frame.

41
00:03:38.960 --> 00:03:40.940
So this is called swipe part.

42
00:03:40.940 --> 00:03:47.930
That is taking the page out of the main memory and setting it back on the desk is called stepping out

43
00:03:47.930 --> 00:03:55.270
of a physical page from the main memory, whereas bringing a new page from the disk into the frame of

44
00:03:55.270 --> 00:03:58.100
our main memory is called Swipe In.

45
00:04:00.150 --> 00:04:00.640
Right.

46
00:04:02.000 --> 00:04:06.230
So you can see in step number five, Beachport has been solved.

47
00:04:08.420 --> 00:04:14.990
And since the page has been brought into the main memory, now the staple of this process needs an update

48
00:04:15.860 --> 00:04:19.399
since the physical pain number two now has been loaded in the frame.

49
00:04:19.399 --> 00:04:23.900
Number three of main memory, the peace table will be updated as follows.

50
00:04:24.860 --> 00:04:25.240
Right.

51
00:04:25.700 --> 00:04:32.450
The valid invalid bid will be set from zero to one and the same number will be said to three.

52
00:04:33.500 --> 00:04:41.480
So you can see that after step number six page front has been completed, not the usual paging scheme

53
00:04:41.480 --> 00:04:42.590
will be applied.

54
00:04:42.590 --> 00:04:49.220
And the which will address that is generated by the CPU will be mapped to the physical address, as

55
00:04:49.220 --> 00:04:49.740
usual.

56
00:04:51.680 --> 00:04:53.970
So this is how demand page works.

57
00:04:54.860 --> 00:04:58.100
So let me out with all the steps of the unpegging.

58
00:04:58.310 --> 00:05:04.290
In the first step, Sepehr generates virtual address and the second step we do frame look up in the

59
00:05:04.640 --> 00:05:10.760
table and assuming that the physical page is not present already in the main memory.

60
00:05:11.810 --> 00:05:19.700
Peaceful signal is generated by the memory management unit to the CPU CPU, having received the page

61
00:05:19.970 --> 00:05:25.160
signal in step number for CPU, will look at the physical page on the desk.

62
00:05:25.550 --> 00:05:33.440
And once the physical page on the disk is located using appropriate page replacement algorithm, the

63
00:05:33.440 --> 00:05:38.150
physical page is loaded in a most appropriate frame in the main memory.

64
00:05:40.110 --> 00:05:47.250
And finally, in step number six, peace table is updated to reflect that the physical page has been

65
00:05:47.250 --> 00:05:48.830
brought in the main memory.

66
00:05:49.680 --> 00:05:52.530
So you can see the page is quite easy.

67
00:05:53.130 --> 00:06:01.200
So demand allows that only required physical pages of a process are kept in the main memory because

68
00:06:01.350 --> 00:06:08.670
memory is a scarce resource and need to be utilized intelligently to be shared by all the processes

69
00:06:08.670 --> 00:06:09.750
running on the system.

