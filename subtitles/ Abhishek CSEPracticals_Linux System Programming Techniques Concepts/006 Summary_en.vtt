WEBVTT
1
00:00:05.790 --> 00:00:12.030
So, guys, going forward and let me summarize that, what we have done so far, so, so far, we have

2
00:00:12.030 --> 00:00:18.710
created a very mini library which contains a header file and a source file.

3
00:00:19.590 --> 00:00:26.130
And we have an application tazi file which wishes to organize its internal data structures using the.

4
00:00:27.540 --> 00:00:36.030
So because application dot c file wishes to make use of lists, utility, the functions and definition

5
00:00:36.030 --> 00:00:41.100
of doubly linked list needs to be exposed to application doxie source file.

6
00:00:41.550 --> 00:00:48.540
And therefore it is for this reason that application darsey file needs to include the URL as file.

7
00:00:49.400 --> 00:00:58.640
Right now, after that, we compiled the source files, so here after compiling that file, we got the

8
00:00:58.640 --> 00:01:05.750
object file, little dot o, and after compiling the application doxy file, we obtained application

9
00:01:05.750 --> 00:01:06.350
dot o.

10
00:01:07.490 --> 00:01:14.420
So remember, object files are not human readable file, they actually contains the source code in the

11
00:01:14.420 --> 00:01:17.270
machine instruction form, which you cannot read.

12
00:01:17.660 --> 00:01:23.930
So once you have all the object files for all the source files you have in your project, we then combine

13
00:01:23.930 --> 00:01:27.590
all the object files together to create a final executable.

14
00:01:28.010 --> 00:01:34.420
So remember, final executable is created using all the object files that you have in your project.

15
00:01:34.940 --> 00:01:42.380
But one thing need I mention here is that that is exactly one of the object file must be derived from

16
00:01:42.380 --> 00:01:45.050
the source file, which contains the main function.

17
00:01:46.930 --> 00:01:54.070
So in this case, it is application dot seesaws file, which contains the main function because execution

18
00:01:54.070 --> 00:02:02.140
of our C program starts from mean and therefore to create an executable, it is a requirement that one

19
00:02:02.140 --> 00:02:05.350
of the source file must contain main function.

20
00:02:06.810 --> 00:02:14.430
And we have used the DCC compiler, which is Linux, the standard C compiler, to compile our source

21
00:02:14.430 --> 00:02:19.940
file, as well as to link our object files together to create a final executable.

22
00:02:20.520 --> 00:02:26.850
So the command to compile the source file is this and the command to link all the object files together

23
00:02:26.970 --> 00:02:28.710
to create a final executable.

24
00:02:28.860 --> 00:02:35.700
Is this command we will discuss in more detail in one of our future modules that exactly what happens

25
00:02:35.700 --> 00:02:41.850
when you combine the program and exactly what happens when you link the object files together to create

26
00:02:41.850 --> 00:02:43.140
a final executable.

