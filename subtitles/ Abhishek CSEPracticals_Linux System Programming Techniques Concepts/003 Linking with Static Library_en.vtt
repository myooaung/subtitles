WEBVTT
1
00:00:05.430 --> 00:00:11.850
So, guys, now let us go through the steps regarding how you can integrate your study library with

2
00:00:11.850 --> 00:00:12.700
the application.

3
00:00:13.140 --> 00:00:17.970
Now, it might be possible that you're are already aware of these steps because these steps are too

4
00:00:17.970 --> 00:00:21.510
basic if one has any experience with the libraries.

5
00:00:22.050 --> 00:00:28.710
But in case if it is your first encounter with the library usage, then you will find this lecture video

6
00:00:28.710 --> 00:00:29.670
quite useful.

7
00:00:30.300 --> 00:00:37.260
So now the problem statement is that that suppose some developer who wrote doubly linked list library

8
00:00:37.590 --> 00:00:44.120
and that developer provide you only had a file and the library fine.

9
00:00:44.370 --> 00:00:48.300
That is the static library file right now.

10
00:00:48.300 --> 00:00:55.440
You means that you are an application developer, that as you are writing an application and that application

11
00:00:55.650 --> 00:01:02.040
needs to make use of this library, which is being provided to you by some other developer.

12
00:01:02.490 --> 00:01:02.730
Right.

13
00:01:03.150 --> 00:01:10.470
So the developer of the library is providing you only the header file and that static library file.

14
00:01:10.770 --> 00:01:11.160
Right.

15
00:01:11.550 --> 00:01:18.030
Not that as an application developer, you don't have a direct access to the source code of the list.

16
00:01:18.400 --> 00:01:23.100
So you really do not know the internal implementation of public library.

17
00:01:24.030 --> 00:01:30.090
However, you will know the signature or prototype of all the functions through this file.

18
00:01:30.720 --> 00:01:37.710
So you can see that this had a file act as an interface between an application and the actual implementation

19
00:01:37.710 --> 00:01:38.580
of a library.

20
00:01:39.840 --> 00:01:46.650
So now you have written your application and let us say that a source file application, Dorsey represents

21
00:01:46.650 --> 00:01:54.270
an application and this application needs to make use of the library in order to organize its internal

22
00:01:54.270 --> 00:01:55.140
data structures.

23
00:01:55.890 --> 00:02:01.920
So the problem statement is that how would you create an executable now, provided that you are given

24
00:02:01.920 --> 00:02:03.570
the following two raw materials?

25
00:02:04.110 --> 00:02:10.590
The first raw material is nothing, but it is a library file and it is a static library.

26
00:02:10.949 --> 00:02:16.310
And of course, you need to have source file, which represents your application.

27
00:02:16.710 --> 00:02:23.430
So the end goal is that that we need to create an executable which will finally execute so that the

28
00:02:23.430 --> 00:02:29.310
steps that are involved in order to create this final executable is the following three steps.

29
00:02:29.880 --> 00:02:33.750
And you can see that these steps are pretty much simple and straightforward.

30
00:02:34.230 --> 00:02:38.390
In step one, you just compile your application and create an object file.

31
00:02:39.000 --> 00:02:43.380
In this example, the application is represented by application dot seesaws.

32
00:02:43.390 --> 00:02:49.700
While it might be possible that your application is big enough that it may have multiple source file,

33
00:02:50.340 --> 00:02:56.310
if that is the case, then in step one you need to compile all the source file of your application to

34
00:02:56.310 --> 00:02:59.760
create the corresponding object files for each source file.

35
00:03:01.080 --> 00:03:07.620
Now, having compiled your application in a step one, in step two, actually, you will going to create

36
00:03:07.620 --> 00:03:14.160
an executable so that step two is actually called a linking, right.

37
00:03:14.400 --> 00:03:21.080
So in that step in which you finally create an executable, that particular step is called linking.

38
00:03:21.750 --> 00:03:25.230
So you can see that the linking requires two inputs.

39
00:03:25.530 --> 00:03:32.190
The first input is the object file, which represents your application, and the second input is the

40
00:03:32.190 --> 00:03:33.520
external libraries.

41
00:03:33.870 --> 00:03:38.440
So in this case, the external library is libidinal dot a file.

42
00:03:39.090 --> 00:03:43.400
And of course, the second input is your application object files.

43
00:03:44.310 --> 00:03:50.700
So you can see in the second command, this is the name of the compiler, followed by the list of object

44
00:03:50.700 --> 00:03:52.590
files which represent the application.

45
00:03:52.800 --> 00:03:55.220
So in this case, we have only one object files.

46
00:03:55.230 --> 00:04:02.310
Therefore the specified application got all that minus also, which is used to specify the name of the

47
00:04:02.320 --> 00:04:04.770
executable that we want to create.

48
00:04:05.010 --> 00:04:07.740
So in this case, we are creating an executable.

49
00:04:07.830 --> 00:04:08.390
Exactly.

50
00:04:08.910 --> 00:04:17.100
Right now, your executable that you are going to create is dependent on the external library and this

51
00:04:17.100 --> 00:04:20.640
external library file could be present anywhere in your system.

52
00:04:21.029 --> 00:04:26.960
So minus ELT's, which is used to specify the part where this library is present.

53
00:04:27.330 --> 00:04:30.940
Now, in our case, this library is present in the current directory.

54
00:04:31.200 --> 00:04:38.160
Therefore, minus L followed by DOT here does not represent the current directory in which you are actually

55
00:04:38.160 --> 00:04:39.480
executing the commands.

56
00:04:40.960 --> 00:04:49.930
You can also specify some other part here, like as well, slash home slash, we are in certain part

57
00:04:50.320 --> 00:04:51.790
like this, right?

58
00:04:52.300 --> 00:04:58.150
And now finally, you specify the library with which you want to link your executable.

59
00:05:00.490 --> 00:05:07.840
Now, the convention to specify the library is like minus L and the name of the library, Suhair, of

60
00:05:07.840 --> 00:05:12.040
the name of the library, as you can see, is Island not a right.

61
00:05:12.520 --> 00:05:18.490
So replace this live keyword by just minus L, followed by this deal name.

62
00:05:18.820 --> 00:05:19.180
Right.

63
00:05:19.330 --> 00:05:21.760
So what you get minus LDL.

64
00:05:22.630 --> 00:05:25.330
So this is the convention that you need to follow.

65
00:05:26.610 --> 00:05:33.570
Similarly, if your library name was label, suppose three dot eight, suppose this is the name of the

66
00:05:33.570 --> 00:05:37.440
library, then you would have specified minus L and three.

67
00:05:38.040 --> 00:05:38.790
That's it.

68
00:05:40.170 --> 00:05:45.870
So after the completion of the step two, you will see an executable that has been created and then

69
00:05:45.870 --> 00:05:49.100
you can run this executable and it will just run fine.

70
00:05:51.020 --> 00:05:58.190
So not that creation of Object File is called compilation, whereas creation of executable is called

71
00:05:58.190 --> 00:05:58.820
linking.

72
00:06:00.380 --> 00:06:07.070
And you can see that in linking one of the input includes the external libraries, in this case, the

73
00:06:07.070 --> 00:06:14.090
external library is our link list library, but it might be possible that your application is dependent

74
00:06:14.090 --> 00:06:16.160
on various other external libraries.

75
00:06:16.520 --> 00:06:23.240
For example, your application might be using three stacks cuz or any other data structures which are

76
00:06:23.240 --> 00:06:26.690
provided to you as a compiled static libraries.

77
00:06:28.260 --> 00:06:33.510
So if that was the case, then here you would have to specify all those liabilities on which you are

78
00:06:33.510 --> 00:06:35.150
executable was dependent.

79
00:06:37.440 --> 00:06:44.940
Now, let us see a quick demo regarding how we can create this executable and run this program so you

80
00:06:44.940 --> 00:06:52.010
can see that in this directory, that is library designing, application integration.

81
00:06:52.230 --> 00:07:00.060
And in this directory, I already have the static library file and application dot file, but I do not

82
00:07:00.060 --> 00:07:01.170
have the executable.

83
00:07:03.030 --> 00:07:03.390
Right.

84
00:07:03.570 --> 00:07:09.220
So now I will going to create an executable by following the three steps that I have just discussed.

85
00:07:10.320 --> 00:07:13.890
So the first step is to create an object file for the application.

86
00:07:18.890 --> 00:07:22.490
So here you can create the object file for the application.

87
00:07:22.810 --> 00:07:28.630
The second step is to create the executable and linking with the library.

88
00:07:29.150 --> 00:07:30.590
So, Jinksy.

89
00:07:41.200 --> 00:07:48.580
So you can see that the final executable has been created and you can simply run this executable and

90
00:07:48.580 --> 00:07:49.250
it will run.

91
00:07:50.140 --> 00:07:56.560
So this is how you create a final executable by compiling your executable with the external libraries

92
00:07:56.800 --> 00:07:59.050
on which your executable is dependent.

