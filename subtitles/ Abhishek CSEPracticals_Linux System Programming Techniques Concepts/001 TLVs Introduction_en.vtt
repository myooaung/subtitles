WEBVTT
1
00:00:05.770 --> 00:00:12.280
So welcome back, guys, in this module, we're going to understand the concept of the Alwis that is

2
00:00:12.280 --> 00:00:13.750
type land value.

3
00:00:15.550 --> 00:00:18.640
SLV stands for type land value.

4
00:00:19.340 --> 00:00:26.550
Let us first try to understand the problem, which the results, and then we shall discuss what Dalby's

5
00:00:26.560 --> 00:00:28.580
are and how they are used.

6
00:00:29.740 --> 00:00:35.760
So it is very common scenario in networking that machines often exchange messages with each other,

7
00:00:36.520 --> 00:00:43.270
many Internet routing protocols, Nessel state machines to exchange various messages with each other

8
00:00:43.270 --> 00:00:44.170
periodically.

9
00:00:45.250 --> 00:00:51.400
For example, if you remember Interior Gateway protocol such as all SBF.

10
00:00:52.290 --> 00:00:57.750
Exchange their links to packets with other outlets in the network for their proper functioning.

11
00:00:59.610 --> 00:01:06.450
To understand the problem, let's say machines A, B and C are exchanging the following message with

12
00:01:06.450 --> 00:01:10.410
each other as a part of hypothetical functionality.

13
00:01:10.620 --> 00:01:14.370
B, So we have a network.

14
00:01:14.370 --> 00:01:21.320
And in that network, let's say we have the machines, A, machine B and machine C, right.

15
00:01:21.780 --> 00:01:28.860
And let us say that in order to implement our hypothetical functionality, say B, that is some protocol

16
00:01:28.860 --> 00:01:35.410
B, these machines are required to exchange the messages with each other.

17
00:01:36.060 --> 00:01:42.600
So let us take a simple message example which is defined by this structure on the left hand side, the

18
00:01:42.600 --> 00:01:44.070
struct text message.

19
00:01:45.000 --> 00:01:53.640
So each machine is exchanging with each other the information regarding their Lubeck IP address.

20
00:01:54.030 --> 00:01:59.750
They are routley and you can see that each machine in the topology have two interfaces.

21
00:02:00.270 --> 00:02:08.039
So those interface IP addresses and these links, that is each machine in this topology also has two

22
00:02:08.039 --> 00:02:10.970
links and links, have bandwidths.

23
00:02:11.400 --> 00:02:16.400
So let us say that the machines are also sharing the bandwidth of their links.

24
00:02:18.360 --> 00:02:18.590
Right.

25
00:02:21.270 --> 00:02:29.040
So you can see from the perspective of the machine, A if machine E will share the information in the

26
00:02:29.040 --> 00:02:35.610
format of struct X message than the information shared by the machine, it will look like this.

27
00:02:36.510 --> 00:02:41.050
That is the Lubeck IP addresses 100 or 200 dot one, dot one.

28
00:02:42.330 --> 00:02:50.520
Now, one thing to note here is that Lubeck IP address is of data type unsigned int, but I have a specified

29
00:02:50.520 --> 00:02:54.740
here that idot we don't see the format of the IP address.

30
00:02:55.470 --> 00:03:03.870
I haven't specified this IP address in this format so as so that we can understand because IP address

31
00:03:03.870 --> 00:03:06.150
in this format are more readable.

32
00:03:06.930 --> 00:03:15.690
But I assume that in the structure the IP address is being specified as as an integral value only.

33
00:03:16.170 --> 00:03:18.750
Right for understanding purposes only.

34
00:03:18.750 --> 00:03:26.880
I have specified the IP address in it or we don't see D format but actually assume that when machine

35
00:03:26.880 --> 00:03:27.630
E will.

36
00:03:29.050 --> 00:03:35.610
Prepare this message to this I.P. address has to be specified in its excellent unsigned integer value.

37
00:03:36.550 --> 00:03:36.800
Right.

38
00:03:37.330 --> 00:03:43.000
And the second member in the message is the name itself, which is a string.

39
00:03:43.570 --> 00:03:48.700
And again, the IP addresses are specified in Ajdabiya or C or D format.

40
00:03:49.240 --> 00:03:55.210
So these are interface IP addresses and then you have a link bandwidth.

41
00:03:56.370 --> 00:04:01.560
That's the first link of hundred megabytes and the second link is of 200 megabytes.

42
00:04:02.530 --> 00:04:02.870
Right.

43
00:04:03.190 --> 00:04:08.770
So this is how the text message will look like when it is prepared by the machine.

44
00:04:10.480 --> 00:04:17.380
Similarly, when Machine B will prepare the message, then the contents of the text message will be

45
00:04:17.380 --> 00:04:17.990
the following.

46
00:04:18.970 --> 00:04:26.350
And when Machine C will prepare the text message, then the contents of the text message will be following

47
00:04:26.350 --> 00:04:27.700
with respect to the machine.

48
00:04:27.710 --> 00:04:35.770
See, so you can see that each of the machine, A, B and C are preparing the message of type struct

49
00:04:35.770 --> 00:04:40.570
text message and filling the contents of the message with their own information.

50
00:04:41.200 --> 00:04:48.760
And this and and each machine is sharing this information with the rest of the machines that topology.

51
00:04:50.090 --> 00:04:57.800
So let us say that the machine has transmitted the message prepared by it to the machine B and the machine

52
00:04:57.800 --> 00:05:06.230
C, so when Machine B and C receives the message from machine E over the network B and C can simply

53
00:05:06.230 --> 00:05:09.590
read the contents of the message as follows.

54
00:05:10.400 --> 00:05:16.490
So in C programming language, when you receive a message, you typecast the message into the structure

55
00:05:16.490 --> 00:05:16.850
type.

56
00:05:18.310 --> 00:05:22.450
And then you can easily read the feel of the message.

57
00:05:24.200 --> 00:05:24.580
Right.

58
00:05:25.510 --> 00:05:33.130
So what's the problem, there is no problem machine B and Machine C will going to read the message without

59
00:05:33.130 --> 00:05:34.050
any problems.

60
00:05:35.550 --> 00:05:35.930
Right.

61
00:05:37.120 --> 00:05:46.330
The problem in such exchange of message arises due to heterogeneity of communicating machines, so heterogeneity

62
00:05:46.330 --> 00:05:54.610
reasons could be money, that is, the machines could be manufactured by different vendors, machines,

63
00:05:54.610 --> 00:05:59.040
maybe using different hardware and technologies, machines.

64
00:05:59.050 --> 00:06:04.870
That is, the software running on the machines could be of different compilers, or maybe the software

65
00:06:04.870 --> 00:06:08.590
themselves are implemented in different programming languages.

66
00:06:09.400 --> 00:06:15.820
And there could be many other reasons to to which the machines which are talking in the network actually

67
00:06:15.820 --> 00:06:21.310
differ from each other with respect to the hardware, to the technology and so on.

68
00:06:22.870 --> 00:06:29.200
So we cannot ask all the vendors around the world to manufacture their network equipments that this

69
00:06:29.200 --> 00:06:34.740
machine A, B or C using identical technologies and hardware.

70
00:06:35.020 --> 00:06:40.800
We cannot ask the vendors right to manufacture their machines using identical technologies.

71
00:06:40.810 --> 00:06:43.180
Otherwise we will be the competition.

72
00:06:43.180 --> 00:06:51.400
Then how will companies make profit if they all manufacture the identical machines with identical technologies

73
00:06:51.400 --> 00:06:52.230
and hardware?

74
00:06:54.050 --> 00:07:00.230
So let us try to understand the technical glitches that arises due to heterogeneity of communicating

75
00:07:00.230 --> 00:07:02.190
machines in the network.

76
00:07:03.110 --> 00:07:11.570
So we will discuss two scenarios where machines are distinct and incompatible and when selected machines

77
00:07:11.570 --> 00:07:14.540
in the network have upgraded their software.

78
00:07:15.860 --> 00:07:22.460
So we will discuss these two scenarios that whenever these two scenarios occur, then the communicating

79
00:07:22.460 --> 00:07:28.030
machines faces different problems in communicating or exchanging messages with each other.

