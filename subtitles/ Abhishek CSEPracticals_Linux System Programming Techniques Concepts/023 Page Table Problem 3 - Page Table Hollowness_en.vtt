WEBVTT
1
00:00:05.450 --> 00:00:12.590
So, guys, now let us discuss the problem between what best the problem number three is the horniness

2
00:00:12.590 --> 00:00:18.470
in peace tables, especially for small processors, not small processors.

3
00:00:18.470 --> 00:00:24.530
Are those processors which are not memory intensive or whose memory requirement is low.

4
00:00:25.130 --> 00:00:31.740
Now, given the falling configuration of the system, we already know that the size of pastebin per

5
00:00:31.820 --> 00:00:33.740
process is four megabytes.

6
00:00:34.940 --> 00:00:42.050
So as soon as the processor runs on the system operating system, create a space table of size four

7
00:00:42.050 --> 00:00:44.870
megabytes and load in memory.

8
00:00:45.260 --> 00:00:48.200
Right, it is back to where the process has Mallott.

9
00:00:48.200 --> 00:00:50.540
Any memory are not ripe.

10
00:00:51.410 --> 00:00:54.680
So pastebin of a process is created immediately.

11
00:00:55.160 --> 00:00:58.550
It's a different thing that the pastebin will going to be empty.

12
00:00:58.730 --> 00:01:04.910
But this table will be created by the operating system as soon as the process is loaded in main memory

13
00:01:04.910 --> 00:01:05.840
for execution.

14
00:01:06.970 --> 00:01:13.150
So not all processes running on the system are manually intensive, in fact, most of them are not.

15
00:01:13.810 --> 00:01:20.620
So let us visualize, how does memory look like when you run your favorite Hollowell program, which

16
00:01:20.620 --> 00:01:25.410
consume almost no memory from Heap or Stack segment?

17
00:01:26.740 --> 00:01:30.610
So you can see the diagram on the right hand side should be very familiar to you.

18
00:01:30.640 --> 00:01:37.420
Now, suppose this diagram represents the memory representation of your Hollowell program, which is

19
00:01:37.420 --> 00:01:38.390
an execution.

20
00:01:39.070 --> 00:01:45.790
Now, we already know that every process has mandatories segments called code segment and initialized

21
00:01:45.790 --> 00:01:47.370
and initialize data segment.

22
00:01:48.010 --> 00:01:51.850
So there will be virtual pages corresponding to these segments.

23
00:01:52.240 --> 00:01:52.660
Right.

24
00:01:54.340 --> 00:02:02.050
Similarly, Helliwell program may or may not have some command line arguments, but still it will consume

25
00:02:02.230 --> 00:02:07.950
some STAC memory because main function at the end of the day is a personal call.

26
00:02:08.710 --> 00:02:14.410
So let us suppose that virtual pages from that stack memory are being used by the process.

27
00:02:15.100 --> 00:02:22.210
Now you can see that the total number of virtual pages that this process can create is to restore to

28
00:02:22.210 --> 00:02:24.190
the power 32 minus one.

29
00:02:24.790 --> 00:02:32.710
And out of these many virtual pages, the virtual pages which are actually being used are four plus

30
00:02:32.710 --> 00:02:33.070
two.

31
00:02:33.070 --> 00:02:39.730
That is only six virtual pages are being used and corresponding to these virtual pages which are in

32
00:02:39.730 --> 00:02:43.420
use, physical pages will be created by the operating system.

33
00:02:44.320 --> 00:02:49.210
So the pace of this process in execution will look something like this.

34
00:02:50.020 --> 00:02:53.670
You can see that virtual space number zero, one, two, three.

35
00:02:54.010 --> 00:02:59.990
And to restore the power to the two minus two, that is this virtual page and to restore the power to

36
00:03:00.040 --> 00:03:00.910
two minus one.

37
00:03:01.300 --> 00:03:05.700
That is this virtual page have corresponding physical pages.

38
00:03:06.190 --> 00:03:06.820
So sorry.

39
00:03:06.820 --> 00:03:07.510
This is to.

40
00:03:10.040 --> 00:03:15.910
And these physical pages are loaded in some frame number in the main memory, right?

41
00:03:17.280 --> 00:03:25.170
So you can see that corresponding to these virtual pages, these physical pages are in use, similarly

42
00:03:25.170 --> 00:03:30.990
corresponding to these virtual pages in virtual memory, these physical pages are in use.

43
00:03:31.860 --> 00:03:36.350
So what is the portion of virtual memory of the process which is not being used?

44
00:03:36.900 --> 00:03:42.330
The portion of virtual memory of the process which is not being used is this much.

45
00:03:42.930 --> 00:03:50.460
And this much portion of virtual memory of the process corresponds to this much version of page table,

46
00:03:51.240 --> 00:03:54.200
since there are no physical pages that is being used.

47
00:03:54.330 --> 00:03:59.450
So the entry is corresponding to those virtual pages in this piece table is empty.

48
00:04:00.270 --> 00:04:07.170
So you can see that you have created a piece table entry, but these entries are all empty.

49
00:04:07.650 --> 00:04:12.840
At the end of the day, these empty page table entries will going to consume memory.

50
00:04:14.000 --> 00:04:19.620
Now, I ask you one question, how many entries of this peace table are not being used?

51
00:04:20.089 --> 00:04:24.050
The answer is to restore the power 30 to minus six.

52
00:04:24.680 --> 00:04:25.070
Right.

53
00:04:25.370 --> 00:04:26.980
So this is a very large number.

54
00:04:27.590 --> 00:04:31.460
So you can see that almost the entire peace table is empty.

55
00:04:31.850 --> 00:04:39.110
And because the court segment or initialized an unfinished segment and a stacked memory lies at the

56
00:04:39.110 --> 00:04:41.480
opposite ends of the virtual memory.

57
00:04:41.810 --> 00:04:48.560
Therefore, the corresponding peace table also will have virtual pages which are in use at the opposite

58
00:04:48.560 --> 00:04:50.010
ends of the peace table.

59
00:04:50.510 --> 00:04:58.250
So this leads to the creation of holes in the peace table, which means the entries in the peace table,

60
00:04:58.250 --> 00:04:59.720
which are not in use.

61
00:05:00.260 --> 00:05:07.100
And these unused entries lies in between virtual pages and hydrogel pages.

62
00:05:07.670 --> 00:05:14.090
And these unutilized BASTABLE entries lies between more virtual pages.

63
00:05:14.210 --> 00:05:15.910
So these are virtual pages.

64
00:05:15.920 --> 00:05:16.280
Why?

65
00:05:16.520 --> 00:05:20.210
Because there is no is zero one, two, three, which is low.

66
00:05:20.960 --> 00:05:28.040
And this is high virtual pages because because there lies on the higher side of virtual memory in process,

67
00:05:28.040 --> 00:05:29.240
virtual address in space.

68
00:05:30.380 --> 00:05:34.400
So here at home, reference to unutilized peace table entries.

69
00:05:35.580 --> 00:05:43.470
So thus far, a small process, more than 99 percent of the peace table is wasted and wastage of memory

70
00:05:43.470 --> 00:05:48.370
because at the end of the day, you need to look at the entire peace table into a memory.

71
00:05:49.440 --> 00:05:56.700
So, as I stated earlier, the solution to this problem of homelessness of peace table is nothing but

72
00:05:56.700 --> 00:05:58.020
multi-level purging.

73
00:05:58.380 --> 00:06:04.920
So you can see that multi-level purging is a solution that addresses all the problems that we have discussed

74
00:06:05.100 --> 00:06:06.720
related to peace tables.

75
00:06:07.260 --> 00:06:13.890
So we will dive deep into the concept of multi-level purging and try to understand how multilevel purging

76
00:06:13.890 --> 00:06:16.440
addresses the problems of beds, tables.

