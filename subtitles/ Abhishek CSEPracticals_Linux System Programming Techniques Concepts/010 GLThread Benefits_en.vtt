WEBVTT
1
00:00:05.760 --> 00:00:12.720
Now, let us discuss the same scenario, but let us assume that the application is making use of GM

2
00:00:12.720 --> 00:00:16.670
threads doubly linked list instead of traditional linked list.

3
00:00:17.490 --> 00:00:21.420
So the object impacts would look something like this.

4
00:00:22.350 --> 00:00:30.930
We already have discussed that if an object needs to be inserted into glue based link list, then the

5
00:00:30.930 --> 00:00:38.060
GM notes, which will serve as glues itself, has to be a member of the structure of employment.

6
00:00:38.610 --> 00:00:45.600
So you can see that a structure definition has been modified so that the notes itself becomes the member

7
00:00:45.600 --> 00:00:46.650
of this structure.

8
00:00:47.370 --> 00:00:53.490
Using this Gelhaus, the employee object will going to stick itself into jail.

9
00:00:53.490 --> 00:00:54.090
Trad's.

10
00:00:55.360 --> 00:01:01.560
So you can see that Gaylord's here is represented by and one and two and three, right?

11
00:01:02.500 --> 00:01:05.110
So this is an one and two and three.

12
00:01:05.740 --> 00:01:11.470
Now, suppose you need to insert this implied object into doubly linked list along.

13
00:01:12.100 --> 00:01:15.040
Now, here, linked list is nothing but real threats.

14
00:01:15.940 --> 00:01:23.290
So you just have to plugging the load and one into this giant thread and L1 similarly, you have to

15
00:01:23.290 --> 00:01:28.250
plug in the G.A. and to into jail trapped L2.

16
00:01:28.820 --> 00:01:29.230
Right.

17
00:01:29.800 --> 00:01:37.060
And finally, you just need to plug in the Geelhoed entry into G.L. Thread L3.

18
00:01:38.320 --> 00:01:47.260
Now, I ask you one question, how many more locks are required in order to insert this implied object

19
00:01:47.380 --> 00:01:49.270
into these three jail threads?

20
00:01:49.990 --> 00:01:58.300
The answer is zero locks lie zero my locks because these nodes are not need to be logged.

21
00:01:58.510 --> 00:02:03.360
But in fact, these nodes itself are a part of an object.

22
00:02:03.640 --> 00:02:12.190
And when you log to imply object, these downloads were also logged along with an object because these

23
00:02:12.490 --> 00:02:16.210
nodes itself are a member of this structure.

24
00:02:16.840 --> 00:02:17.230
Right.

25
00:02:17.680 --> 00:02:23.110
So you don't have to explicitly mellark G.L. nodes in this case.

26
00:02:24.040 --> 00:02:31.390
Now, coming to the second situation, Soopers only leaves the company and you need to remove his record

27
00:02:31.570 --> 00:02:32.750
from the list.

28
00:02:33.330 --> 00:02:35.560
Now, what will you do in this case?

29
00:02:36.410 --> 00:02:41.350
You will simply outraged over a list and one, in fact, you need to.

30
00:02:41.350 --> 00:02:47.160
I tripped over one of the list, so let us choose that list as L1.

31
00:02:47.560 --> 00:02:49.990
And when I turned over the list, I'll run.

32
00:02:49.990 --> 00:02:55.030
You locate the node which points to the implied object which you want to delete.

33
00:02:55.570 --> 00:02:55.990
Right.

34
00:02:56.500 --> 00:03:02.020
So the next thing that you will do is to delete this load from the jail thread L1.

35
00:03:02.710 --> 00:03:03.120
Right.

36
00:03:03.430 --> 00:03:09.410
And because you have located the employee object, you already have a pointer to this employee object.

37
00:03:09.970 --> 00:03:15.310
Now you can access all the fields of this object now.

38
00:03:15.400 --> 00:03:22.330
Next, you also have to unreferenced this object from G.L. Thread L2 as well as the real Daltry.

39
00:03:22.930 --> 00:03:23.340
Right.

40
00:03:23.740 --> 00:03:33.250
And to do so you simply has to invoke G.L. to remove API, which will remove nodes and to an entry from

41
00:03:33.260 --> 00:03:36.100
jail TREDWELL to an ultra right.

42
00:03:36.370 --> 00:03:40.510
And we already know that this operation is out of one complexity.

43
00:03:41.350 --> 00:03:50.850
And once the object is unreferenced from all the three threads, then you can invoke free on this object.

44
00:03:51.490 --> 00:04:00.250
So time complexity for deletion of this object is order of M plus order of one plus order of one, which

45
00:04:00.250 --> 00:04:05.380
is much better than what we had in the previous case of traditional link list.

46
00:04:07.210 --> 00:04:13.880
So this example shows you the benefits of using grubbiest libraries over traditional libraries.

47
00:04:14.860 --> 00:04:22.660
So one obvious question that arises is that in what scenario should we use the traditional localist

48
00:04:22.810 --> 00:04:25.690
and in what scenario should you use?

49
00:04:25.690 --> 00:04:27.450
Glub is doubly linked list.

50
00:04:28.090 --> 00:04:35.260
So now you must be in a position to answer this question that whenever in your application an object

51
00:04:35.260 --> 00:04:42.310
needs to be referenced by various multiple data structures, then you should think of using glue based

52
00:04:42.580 --> 00:04:47.590
data structure such as link list R, trees, Arcus or any other.

53
00:04:47.950 --> 00:04:48.370
Right.

