WEBVTT
1
00:00:05.490 --> 00:00:12.150
So going forward, so we need to destroy the stark frame of the function F three from the stark memory,

2
00:00:12.540 --> 00:00:18.930
and we need to restore the old values of Stackpole to register based upon the register and instruction

3
00:00:18.930 --> 00:00:19.830
point to register.

4
00:00:20.340 --> 00:00:21.590
So this is our goal.

5
00:00:22.530 --> 00:00:23.880
So stop number one.

6
00:00:23.910 --> 00:00:28.800
That is, we need to first pop out all the local variables from the stack frame three.

7
00:00:29.950 --> 00:00:36.430
So we will destroy or free the stack mamady, occupied by this local variables, we do this by simply

8
00:00:36.430 --> 00:00:42.160
incrementing the stack pointer register value so you can see that the stack one to register value has

9
00:00:42.160 --> 00:00:47.770
been incremented twice so that the stack mamady, occupied by local variables is now freed.

10
00:00:48.460 --> 00:00:53.550
Actually, nothing is freed because we have increased the value of stack winter.

11
00:00:54.130 --> 00:00:57.580
It means that any memory which is there in the stack.

12
00:00:58.940 --> 00:01:06.800
Will set to be free if it is beyond that stark to register address, so any memory which is below the

13
00:01:06.800 --> 00:01:13.120
stack to register in the stack memory will always be said to be a free memory, right.

14
00:01:13.160 --> 00:01:18.590
So with this, we have pop out all the local variables by simply implementing the stack pointers to

15
00:01:18.590 --> 00:01:26.540
value such that the stack pointer register points to the address where best pointer of the caller stack

16
00:01:26.540 --> 00:01:27.800
frame was safe.

17
00:01:28.820 --> 00:01:34.060
Now in step to copy the caller's best address into SBP Register.

18
00:01:34.340 --> 00:01:34.740
Right.

19
00:01:35.330 --> 00:01:41.240
So we know that the caller's best address is saved in the stack frame of the cauli, right.

20
00:01:41.960 --> 00:01:48.230
So what we will do in step two, that we will copy this value into the best pointer register.

21
00:01:48.770 --> 00:01:56.450
So the content of the base pointer register will be updated from address 36 to address sixty eight means

22
00:01:56.450 --> 00:02:03.020
that base pointer register now points to the memory location of address sixty in the stack memory.

23
00:02:03.500 --> 00:02:10.580
So we have restored the original value of base point to register and after restoring the original value

24
00:02:10.580 --> 00:02:17.270
of base point to register, we can simply free the stack memory by simply incrementing the stack pointer.

25
00:02:17.570 --> 00:02:21.710
So you can see that step two actually involves two steps.

26
00:02:22.280 --> 00:02:24.500
So M.V. hit the stands for Move.

27
00:02:24.980 --> 00:02:30.960
Move means you are copying the contents of second argument into the first argument.

28
00:02:31.610 --> 00:02:37.430
Now at this point of time, the content of stack pointer register is thirty six.

29
00:02:38.430 --> 00:02:45.720
So it means that we are copying the content, which is at at least 36 into the base point to register.

30
00:02:46.620 --> 00:02:55.740
So the content, which is at 36, is 60, so this instruction simply means that we are copying 60 into

31
00:02:55.740 --> 00:02:57.060
base point to register.

32
00:02:58.310 --> 00:03:05.900
And by using the pop operation will free up the stack memory and update the stack pointer to point to

33
00:03:05.900 --> 00:03:07.020
the higher address.

34
00:03:07.760 --> 00:03:13.220
So stack pointer will now be incremented to point to the Atlas 40 in the stack memory.

35
00:03:14.330 --> 00:03:14.690
Right.

36
00:03:15.440 --> 00:03:18.860
So so far, we have restored the value of base pointer register.

37
00:03:19.760 --> 00:03:26.590
Now in step number three, we will restore the caller's lost instruction address in the IP register.

38
00:03:26.960 --> 00:03:27.350
Right.

39
00:03:27.770 --> 00:03:32.060
So the last instruction Atlas was saved in the call is a stark frame.

40
00:03:33.110 --> 00:03:36.950
So what we will do in this step is that we will copy.

41
00:03:38.670 --> 00:03:45.830
The the value of IP register in the Collie's stack frame into the IP register, right?

42
00:03:46.890 --> 00:03:50.940
So the IP register now stores the address of the instruction.

43
00:03:52.820 --> 00:03:57.440
From where the caller function has to resume its execution when he returns.

44
00:04:00.070 --> 00:04:04.220
Now, since that, we have also restored the value of IP register.

45
00:04:04.450 --> 00:04:10.150
We can destroy this Astatke memory as well by simply incrementing that stack pointer register.

46
00:04:11.570 --> 00:04:11.920
Right.

47
00:04:13.040 --> 00:04:20.390
And now, as a final step, we will simply pop out all the arguments popping out, all the arguments

48
00:04:20.390 --> 00:04:24.620
can be simply achieved by simply implementing this checkpoint to register.

49
00:04:24.950 --> 00:04:30.260
So point that Israel will now point to the bottommost address of the stack mummery.

50
00:04:30.560 --> 00:04:36.730
So Stackpole to register now points to the end address of the stack frame or function after.

51
00:04:38.300 --> 00:04:43.040
So you can see that we have restored the value of his checkpoint to register, we have restored the

52
00:04:43.040 --> 00:04:48.230
value of base point to register, and we have restored the value of instruction point to register.

53
00:04:48.500 --> 00:04:53.480
And we have destroyed this track frame of the function free from the stack mummery.

54
00:04:53.960 --> 00:04:54.350
Right.

55
00:04:54.710 --> 00:04:57.630
So Stack frame three is completely destroyed now.

56
00:04:57.840 --> 00:05:05.270
Now, at this point of time, stack frame after two is restored, function after can now resume its

57
00:05:05.270 --> 00:05:06.920
execution as normal.

58
00:05:07.160 --> 00:05:07.510
Right.

59
00:05:07.940 --> 00:05:14.660
So from which instruction will the function after will resume its execution simply add one to the value

60
00:05:14.660 --> 00:05:16.490
of instruction point to register.

61
00:05:16.970 --> 00:05:20.480
We will get the address of the next instruction to be executed.

62
00:05:20.840 --> 00:05:26.870
So you can see that when the function returns, we need to destroy the stack frame of that particular

63
00:05:26.870 --> 00:05:28.610
function from the stack memory.

64
00:05:29.420 --> 00:05:36.620
And we need to restore the value of these three basic registers so that the function can resume its

65
00:05:36.620 --> 00:05:37.400
execution.

66
00:05:38.620 --> 00:05:45.280
Similarly, now I leave it as an exercise to you that whole stack frame of the function after will be

67
00:05:45.280 --> 00:05:53.260
destroyed and what will be the content of IPB and Espina disturbs when the function EF1 will resume

68
00:05:53.260 --> 00:05:56.500
its execution after function after returns.

