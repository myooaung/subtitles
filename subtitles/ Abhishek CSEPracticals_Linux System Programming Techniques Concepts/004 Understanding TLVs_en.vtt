WEBVTT
1
00:00:05.610 --> 00:00:14.700
So, guys, going forward, so next we will discuss the KLP, SLV is an acronym for Type Land Value.

2
00:00:15.960 --> 00:00:24.990
SLV is a mechanism to encode the data in the format that is independent of machine architecture underlying

3
00:00:24.990 --> 00:00:26.040
operating system.

4
00:00:26.070 --> 00:00:32.280
That is whether you are using Linux operating system or Windows operating system or Mac or any other

5
00:00:32.280 --> 00:00:39.680
operating system that it is independent of the compiler or any programming language that you are using.

6
00:00:40.230 --> 00:00:46.590
So the communicating machines are able to receive or exchange the messages with each other using the

7
00:00:46.590 --> 00:00:53.280
concept of PLB without being worrying about any of these factors impacting their communication.

8
00:00:54.960 --> 00:00:57.840
So Elvis has three components.

9
00:00:58.650 --> 00:01:01.700
So you can see it's a typical form of artillery.

10
00:01:02.400 --> 00:01:09.360
The first component of the deal is the PLB type Sutil, which means it is just an integer number.

11
00:01:10.140 --> 00:01:14.280
This integer number varies from zero to two hundred and fifty five.

12
00:01:15.270 --> 00:01:21.050
Now, you must be able to think that why this number is between zero to two hundred and fifty five.

13
00:01:21.600 --> 00:01:26.070
The reason is that the PLB type is assigned only one byte.

14
00:01:26.760 --> 00:01:34.500
So one byte means Edwards and using it, which you can specify a number from zero to two hundred and

15
00:01:34.500 --> 00:01:35.250
fifty five.

16
00:01:35.700 --> 00:01:41.910
So that is the reason that the LV type has to be a number between zero to two hundred and fifty five.

17
00:01:42.540 --> 00:01:51.960
So this is called LV type or the LV in the next byte, and that really is result for data length.

18
00:01:52.650 --> 00:01:57.050
So the actual data is present in the third component of the PLB that is here.

19
00:01:57.270 --> 00:02:03.600
So whatever is the length of this data, that length has to be specified in the second component of

20
00:02:03.600 --> 00:02:04.050
the bill.

21
00:02:04.890 --> 00:02:10.800
And you can see that the second component of the deal is again assigned a one byte space.

22
00:02:11.490 --> 00:02:17.640
So using one byte again, you can specify a number between zero to two hundred and fifty five.

23
00:02:19.420 --> 00:02:24.910
So it means that the length of the actual data that is carried in the people, we cannot exceed more

24
00:02:24.910 --> 00:02:31.870
than two hundred and fifty five bytes because you cannot specify a value more than two hundred and fifty

25
00:02:31.870 --> 00:02:32.290
five.

26
00:02:32.500 --> 00:02:35.960
And the second component of the PLB, that is greater length.

27
00:02:36.820 --> 00:02:41.740
The reason being that data length has been assigned only one bit of space.

28
00:02:43.530 --> 00:02:46.270
So this is the format of the PLB.

29
00:02:46.290 --> 00:02:50.600
It has three components, the type land and value, right?

30
00:02:52.630 --> 00:02:58.930
So TLC type is the PLB unique identifier, and it's a value between zero to two hundred and fifty five

31
00:02:59.260 --> 00:03:03.210
and TLC land is the length of the actual data that is present.

32
00:03:03.220 --> 00:03:05.070
And the third component of the TLC.

33
00:03:07.610 --> 00:03:14.120
So going forward, let us take an example, suppose you have a machine, some machine, or you can see

34
00:03:14.120 --> 00:03:19.880
a router which has four interfaces on each of these four interfaces, you can see the IP address and

35
00:03:19.880 --> 00:03:21.440
the Moscow is configured.

36
00:03:22.790 --> 00:03:29.470
Right, so our problem statement is, suppose the machine is let us suppose that this is a machine,

37
00:03:29.480 --> 00:03:35.090
it wants to send a message to Machine B and machine.

38
00:03:35.090 --> 00:03:42.280
It wants to send the information about all IP addresses, which is configured on all its interface.

39
00:03:43.190 --> 00:03:49.880
So it means that the Machine E wants to send a list of all IP addresses which are configured on all

40
00:03:49.880 --> 00:03:51.680
the interfaces to the machine.

41
00:03:51.730 --> 00:03:54.440
B So let us see.

42
00:03:54.620 --> 00:03:59.020
Using the concept of PLB, how can Machine E achieve this?

43
00:04:00.050 --> 00:04:06.710
So we need to define the three components of the deal that is still with type the LV land and the actual

44
00:04:06.710 --> 00:04:07.080
data.

45
00:04:07.820 --> 00:04:09.980
So let us assume so.

46
00:04:09.980 --> 00:04:15.280
Let us take so we can take any number as we type for example.

47
00:04:15.860 --> 00:04:17.029
So let us take the pill.

48
00:04:17.040 --> 00:04:19.720
Riyadi as 132 now.

49
00:04:19.850 --> 00:04:25.760
Next thing that we need to do is to define the definition of the LV 132.

50
00:04:26.300 --> 00:04:27.790
So what does that mean?

51
00:04:28.630 --> 00:04:35.600
Definition of PLB 132 means the type of the message that we want to try to represent.

52
00:04:36.770 --> 00:04:40.250
So we want to try to represent a four byte integer number.

53
00:04:41.370 --> 00:04:46.200
So remember, an IP address can always be represented as a four by 20 to No.

54
00:04:47.650 --> 00:04:55.150
So PLB 132 is defined as four by integer number, followed by one byte mosque value.

55
00:04:56.350 --> 00:04:59.080
So this is called that the LV definition.

56
00:04:59.470 --> 00:05:04.690
So what we have done so far, we have taken a number 132, which represents the deal with it.

57
00:05:05.500 --> 00:05:10.230
And next, we have defined the definition of PLB 132.

58
00:05:10.600 --> 00:05:14.830
That is, what does the TRV 132 represent.

59
00:05:15.160 --> 00:05:21.130
So tell me what 32 represents a four byte integer number, followed by one by muscularly.

60
00:05:21.670 --> 00:05:23.770
This is called the LV definition.

61
00:05:25.250 --> 00:05:32.060
So any machine in the network which is supposed to process Dahlby 132 when they received this deal with.

62
00:05:33.670 --> 00:05:38.770
Those machines are supposed to be aware of this 12 year definition, right?

63
00:05:39.190 --> 00:05:47.140
So one machine, a sense that they'll be one 32 to machine B, then machine B should be aware of the

64
00:05:47.140 --> 00:05:48.280
PLB definition.

65
00:05:48.850 --> 00:05:52.750
That is, when Machine B receives that, there'll be 132 machine.

66
00:05:52.750 --> 00:06:01.000
We should know that there'll be 132 is all about four byte integer number, followed by a one bite of

67
00:06:01.000 --> 00:06:03.220
mosque value that said.

68
00:06:05.650 --> 00:06:14.650
So you can see here the example of PLB 132, that is how the machine will encode the IP addresses of

69
00:06:14.650 --> 00:06:17.950
all of its interfaces using till we 132.

70
00:06:18.640 --> 00:06:23.270
So you can see this is the first component of the PLB, which is the LV 132.

71
00:06:23.710 --> 00:06:27.550
So we have given an ID as one 32.

72
00:06:28.300 --> 00:06:28.650
Right.

73
00:06:29.050 --> 00:06:34.000
And going by the definition of the LV that the definition is for Python.

74
00:06:34.030 --> 00:06:36.450
These are number followed by one bite mark value.

75
00:06:36.970 --> 00:06:40.720
So it's a four by 20, the number followed by one by Mascheroni.

76
00:06:41.110 --> 00:06:43.030
So this is the deal with definition.

77
00:06:43.990 --> 00:06:44.360
Right.

78
00:06:44.770 --> 00:06:50.170
So you can see that in this message there are four occurrence of Barelvi definition.

79
00:06:51.420 --> 00:06:58.230
Yes, you can have multiple occurrence of the LV definition in a single message, right, and what is

80
00:06:58.230 --> 00:07:00.540
the size of one PLB definition?

81
00:07:00.540 --> 00:07:01.770
That is four plus one.

82
00:07:01.890 --> 00:07:07.740
That is five bytes since the very definition occurs four times, therefore, five plus five plus five

83
00:07:07.740 --> 00:07:10.150
plus five, that is 20 words.

84
00:07:10.350 --> 00:07:14.520
So land of the data that is carried in this Delva is 20 bytes.

85
00:07:16.550 --> 00:07:16.860
Right.

86
00:07:17.150 --> 00:07:26.000
So this is how it is defined, the PLB 132 is now communicating to Machine B, the list of all the IP

87
00:07:26.000 --> 00:07:30.290
addresses that is configured on the interfaces of Machine A.

88
00:07:31.690 --> 00:07:37.080
Now, let us see what will the receiving machine do when they receives this CLV?

89
00:07:39.810 --> 00:07:43.600
So let us say that the Machine B has received this message.

90
00:07:44.520 --> 00:07:52.410
So now let us see that how the Machine B will pass this DMV and read all the values specified in this

91
00:07:52.410 --> 00:07:53.700
CLV, we correctly.

92
00:07:55.190 --> 00:08:01.940
So, as you know that the first component of the deal is only one bite, but will always be a one bite

93
00:08:02.300 --> 00:08:07.820
so that a Syrian machine will just read the first part of the deal by reading the first part of the

94
00:08:07.820 --> 00:08:12.260
deal with the receiving machine, would come to know here that this deal with 132.

95
00:08:13.900 --> 00:08:20.170
Now, as I said, that the receiving machine, which is supposed to process that PLB 132 must be aware

96
00:08:20.170 --> 00:08:23.380
of the definition of people we want to do so.

97
00:08:23.380 --> 00:08:30.740
The moment the machine reads that it is still we want to do that as soon as she knows that it's for

98
00:08:30.850 --> 00:08:34.210
white I.P. address, followed by one byte mosque value.

99
00:08:34.960 --> 00:08:41.830
So the unit data type on this deal, which is followed by an IP address, which is in the digital form,

100
00:08:42.130 --> 00:08:44.530
followed by one bite mark squarely.

101
00:08:45.710 --> 00:08:51.680
Right, and since the receiving machine knows the definition of Dahlby, the receiving machine can calculate

102
00:08:52.070 --> 00:08:59.330
the size of unit data on this Thirlby so the unit data size of the CLB is five bytes.

103
00:08:59.570 --> 00:09:00.800
That is four plus one.

104
00:09:00.800 --> 00:09:01.860
That is five bytes.

105
00:09:02.150 --> 00:09:04.190
So what will the machine do next?

106
00:09:04.670 --> 00:09:05.660
The racing machine.

107
00:09:05.660 --> 00:09:08.180
Then next, read the second byte.

108
00:09:08.180 --> 00:09:11.090
That is the second component of the PLB, which is 20.

109
00:09:12.370 --> 00:09:17.500
So the receiving machine will then divide the sovereignty by the unit to size.

110
00:09:18.870 --> 00:09:26.010
Which is five, so if this machine would know four, so this machine would come to know that there are

111
00:09:26.010 --> 00:09:30.450
four unit data that is being carried by the CLV.

112
00:09:31.410 --> 00:09:35.270
So now the machine knows that it has four appearance of unity.

113
00:09:35.280 --> 00:09:35.770
Right.

114
00:09:35.790 --> 00:09:37.080
So this is occurrence one.

115
00:09:37.470 --> 00:09:41.070
This is occurrence to this occurrence three, and this is occurrence four.

116
00:09:41.700 --> 00:09:47.610
So now the receiving machine can iterate over the rest of the data and read all the units of data without

117
00:09:47.610 --> 00:09:48.330
any problem.

118
00:09:49.750 --> 00:09:59.890
So suppose that I had more interfaces and it could specify more occurrence of the LV 132 unit data types.

119
00:10:01.020 --> 00:10:06.150
So it could have specify more IP address and lost value, more IP address and muscularly the receiving

120
00:10:06.150 --> 00:10:14.160
machine that the receiving machine would be able to pass all of these occurrence of PLB 132 unit units.

121
00:10:17.750 --> 00:10:19.500
Right, without any problem.

122
00:10:20.120 --> 00:10:23.500
So you can see how flexible is this concept of the Elvie?

123
00:10:26.620 --> 00:10:33.460
So many network protocols actually uses this concept of TRV in order to exchange their messages with

124
00:10:33.730 --> 00:10:36.220
other machines that is deployed in the network.

