WEBVTT
1
00:00:05.210 --> 00:00:08.039
So, guys, now let us summarize this section.

2
00:00:08.750 --> 00:00:16.219
We can always program our general-purpose libraries, so general-purpose libraries means link list trees

3
00:00:16.219 --> 00:00:22.580
and others, which is used to organize the application data structures using callbacks, which can provide

4
00:00:22.580 --> 00:00:29.540
intelligence to the library to search an element based on a key or compare the two elements.

5
00:00:30.860 --> 00:00:38.120
Application developer needs to specify key maps and comparison function and register with the library.

6
00:00:38.540 --> 00:00:45.740
So we have already illustrated and discussed this model in detail where application invokes the registration

7
00:00:45.740 --> 00:00:46.370
function.

8
00:00:46.550 --> 00:00:52.910
And the responsibility of this registration function is to provide a function called back to the library

9
00:00:54.320 --> 00:01:00.920
library users, registered application specific callbacks to perform application specific operation

10
00:01:00.920 --> 00:01:08.450
on the application data that it is holding library records stays generic and application agnostic all

11
00:01:08.450 --> 00:01:08.990
the time.

12
00:01:09.890 --> 00:01:17.260
C++ and Java programming language provides the concept called Generex, which is an excellent feature.

13
00:01:17.960 --> 00:01:25.190
So using Generex in C++ and Java, you can design your General-Purpose Library's application agnostic

14
00:01:25.190 --> 00:01:27.710
and perform application specific operations.

15
00:01:28.490 --> 00:01:33.440
But in case of C programming language, we need to make use of function pointers.

