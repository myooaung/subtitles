WEBVTT
1
00:00:05.430 --> 00:00:10.930
So we will going to understand the concept of opaque pointers using linked list as an example.

2
00:00:11.400 --> 00:00:17.820
So first of all, let us try to understand that how usually we write a library as simple as the library

3
00:00:17.820 --> 00:00:18.620
of linked list.

4
00:00:18.990 --> 00:00:24.720
So whenever we write a data structure code, we define our data structure in our high profile.

5
00:00:25.050 --> 00:00:27.610
In our case, it is linked list to attach.

6
00:00:28.020 --> 00:00:32.460
So you can see in this file we define the structure which defines.

7
00:00:34.040 --> 00:00:41.360
The node of a list, right, and then we define the prototype of the functions, which allows us to

8
00:00:41.360 --> 00:00:43.640
perform operation on this data structure.

9
00:00:43.850 --> 00:00:48.920
So in this case, we have provided the prototype of the function linked list underscore insertion,

10
00:00:49.250 --> 00:00:56.080
which is actually a function to insert a new node after the current node in a link list.

11
00:00:56.300 --> 00:00:56.750
Right.

12
00:00:58.720 --> 00:01:06.700
So, for example, we have a link list and this is the current Naude, and we want to insert a new node

13
00:01:06.700 --> 00:01:07.930
into this linked list.

14
00:01:08.170 --> 00:01:13.420
So this function will take the first argument as the current node and the new node, which we need to

15
00:01:13.420 --> 00:01:14.760
insert in this link list.

16
00:01:14.950 --> 00:01:15.240
Right.

17
00:01:15.520 --> 00:01:17.980
So this node will be inserted in between.

18
00:01:18.640 --> 00:01:23.900
So this new node will be inserted in between this node and this not right.

19
00:01:24.910 --> 00:01:30.610
And once we prepared this header file, then we provide the implementation of these public functions

20
00:01:30.940 --> 00:01:33.520
in the source file called link list start seed.

21
00:01:33.730 --> 00:01:34.170
Right.

22
00:01:34.450 --> 00:01:40.240
So you can see that I provided the implementation of linked list underscore in search and function in

23
00:01:40.240 --> 00:01:41.060
the source files.

24
00:01:41.440 --> 00:01:41.860
Right.

25
00:01:43.680 --> 00:01:50.820
So this is the general steps which we usually follow in order to write an elaborate code, that is prepare

26
00:01:50.820 --> 00:01:56.400
a how to file and define all the structures that we need to define and provide the prototype of the

27
00:01:56.400 --> 00:02:00.330
functions which are exposed to the external world for use.

28
00:02:00.900 --> 00:02:06.750
And then in the source, while we provide the implementation of all functions which perform the operations

29
00:02:06.750 --> 00:02:09.460
on the structures which is defined in this high profile.

30
00:02:10.800 --> 00:02:12.480
Now we have an external world.

31
00:02:12.480 --> 00:02:17.860
This external world is nothing but the application file which make use of our limitless library.

32
00:02:18.330 --> 00:02:25.620
So in Application C file, we usually include the header file and then we access all the structures

33
00:02:25.620 --> 00:02:30.180
and members and public APIs, which is provided by this link list library.

34
00:02:30.990 --> 00:02:38.400
So here you can see that we have logged on of the link list and in the subsequent lines we are accessing

35
00:02:38.400 --> 00:02:40.780
the members of a. of a link list.

36
00:02:41.640 --> 00:02:47.430
Also, we can make an end walk of the public API link list, underscore insertion and this application

37
00:02:47.430 --> 00:02:48.180
doxy file.

38
00:02:48.600 --> 00:02:52.440
So these are the general steps of writing a typical library code.

39
00:02:53.010 --> 00:02:55.260
Now the question is, what is the problem here?

40
00:02:55.920 --> 00:03:01.460
So now let us discuss what is the problem here when you design your library in this way?

41
00:03:05.680 --> 00:03:05.880
And.

