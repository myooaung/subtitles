WEBVTT
1
00:00:07.560 --> 00:00:14.340
So, guys, welcome back in this module, we will going to study preprocessing directive's in C and

2
00:00:14.340 --> 00:00:21.150
C++ so we will understand the workings of preprocessing directives by following the following.

3
00:00:21.170 --> 00:00:26.790
But first of all, we will discuss the problem of duplicate inclusion of header files.

4
00:00:27.540 --> 00:00:32.520
Then we will learn that what are preprocessing directives and how do they work?

5
00:00:33.150 --> 00:00:40.110
And then we will try to see that how the solution to duplicate inclusion of how the files could be resolved

6
00:00:40.350 --> 00:00:42.220
using preprocessor directives.

7
00:00:42.930 --> 00:00:50.280
So this will give you a clear insight regarding how preprocessing directives work and when should you

8
00:00:50.280 --> 00:00:52.260
use preprocessing directives.

9
00:00:59.820 --> 00:01:07.950
So going forward, let us try to understand the problem of duplicate inclusion of header file, so most

10
00:01:07.950 --> 00:01:15.510
of the times we end up including the same had to file into the source file multiple times this result

11
00:01:15.510 --> 00:01:17.850
in duplicate text substitution.

12
00:01:18.480 --> 00:01:20.680
So the result is the compilation error.

13
00:01:21.150 --> 00:01:24.710
So let us try to understand this with the help of a scenario.

14
00:01:25.800 --> 00:01:30.730
So, for example, you have to have the files that does not match and we don't match.

15
00:01:31.720 --> 00:01:35.130
Now, you are already familiar with these two header files.

16
00:01:35.940 --> 00:01:42.900
Now suppose application dot C is the source file, which is written by a programmer and this programmer

17
00:01:42.900 --> 00:01:47.400
wishes to use the facilities, which is provided by these two header files.

18
00:01:48.390 --> 00:01:56.850
That is, a programmer wishes to use minimum macro or multiply function, or he wishes to use max macro

19
00:01:57.030 --> 00:02:01.580
or some function which is provided by a dot org header file.

20
00:02:02.370 --> 00:02:04.440
So you can see that in the source file.

21
00:02:04.440 --> 00:02:06.600
A programmer has hash included.

22
00:02:06.600 --> 00:02:12.600
Both the header files and rest of the code in this source file is application specific.

23
00:02:13.710 --> 00:02:19.440
So this is the source file, which is version one and it does this source file, which is actually written

24
00:02:19.440 --> 00:02:20.520
by a programmer.

25
00:02:21.420 --> 00:02:26.280
Now let us try to understand that where is the duplicate inclusion of header file?

26
00:02:29.790 --> 00:02:36.240
So applying the tax substitution on version one, we get the version two of application dot source file.

27
00:02:37.290 --> 00:02:44.600
So version two of source file is obtained by applying the tax substitution of B dot ahead of time.

28
00:02:45.240 --> 00:02:51.380
So you can see that the statement has to include B that is replaced by the content of B, not ahead

29
00:02:51.450 --> 00:02:51.900
of file.

30
00:02:53.370 --> 00:02:58.350
Now you can see that we don't have to file already had the statement has included.

31
00:02:58.640 --> 00:03:07.130
And so this leads to two occurrence of hash include a DOT statement in version two of application or

32
00:03:07.140 --> 00:03:07.680
C file.

33
00:03:08.400 --> 00:03:15.120
Now, if you apply the tech substitution again on this wasn't two of application tazi source file,

34
00:03:15.390 --> 00:03:16.860
you'll get version three.

35
00:03:18.150 --> 00:03:25.800
Now you can see that the content of a DOT ad is repeated twice in one country of application dot seesaws

36
00:03:25.800 --> 00:03:26.130
file.

37
00:03:27.510 --> 00:03:33.300
It is because the text substitution has happened twice for a dot edge header file.

38
00:03:34.470 --> 00:03:40.410
So you can see that there is some duplicates inversion, three of application dot seesaws file.

39
00:03:42.130 --> 00:03:48.670
Now proceeding to the final step of tax substitution phase, just remove all the has defiance from version

40
00:03:48.670 --> 00:03:55.840
three of application dot source file and the final version of source file is actually this application

41
00:03:55.870 --> 00:03:56.950
dot seesaws file.

42
00:03:57.610 --> 00:04:04.240
So you can see that what remains in the final version of the source file contains the duplicate declaration

43
00:04:04.240 --> 00:04:05.620
of some functions.

44
00:04:07.150 --> 00:04:10.610
So this declaration comes from one occurrence of a DOT.

45
00:04:10.610 --> 00:04:16.450
S had a file and this declaration comes from another occurrence of a dot etc file.

46
00:04:16.959 --> 00:04:23.470
So this version of application or C file is the final compilation unit which actually visible to the

47
00:04:23.470 --> 00:04:25.260
compiler for compilation.

48
00:04:26.380 --> 00:04:32.560
So when the compiler compiles this final version of Application Tazi file, the compiler will through

49
00:04:32.560 --> 00:04:39.820
an error and it will say something like duplicate definition detected and it will give you a compilation

50
00:04:39.820 --> 00:04:40.260
error.

51
00:04:42.780 --> 00:04:50.790
Right, so you can see that because the programmer has included both the header files and that's already

52
00:04:50.790 --> 00:04:56.850
contain the statement has to include, therefore it resulted in inclusion of a dot.

53
00:04:56.880 --> 00:04:59.830
Each had to file twice in the source file.

54
00:05:00.420 --> 00:05:02.190
And this leads to this problem.

55
00:05:03.890 --> 00:05:09.590
Now, consider a scenario when you have hundreds of header files in your project, you cannot keep a

56
00:05:09.590 --> 00:05:17.600
track that which had to file has include another had a file already, and you should avoid inclusion

57
00:05:17.600 --> 00:05:20.300
of somehow the files explicitly.

58
00:05:21.120 --> 00:05:28.760
It is very difficult for you to keep track of this and you would not want to invest your energy in only

59
00:05:28.760 --> 00:05:34.070
to decide that whether you should include a particular -- or not.

60
00:05:34.730 --> 00:05:40.730
So this problem of duplicate inclusion of how to file is resolved using pre processing directives.

61
00:05:41.180 --> 00:05:48.320
So now let us try to understand that what is preprocessor directives and how do they work and how preprocessor

62
00:05:48.320 --> 00:05:53.720
directives can help us to resolve the problem of duplicate inclusion of header files.

