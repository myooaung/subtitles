WEBVTT
1
00:00:05.890 --> 00:00:07.160
So welcome back, guys.

2
00:00:07.510 --> 00:00:12.720
Now, let us get familiar with some terminology regarding keep memory segment management.

3
00:00:13.540 --> 00:00:16.920
So there are two kinds of block the block and data block.

4
00:00:17.320 --> 00:00:20.770
So let us try to understand these two blocks with the help of an example.

5
00:00:21.430 --> 00:00:26.320
Suppose your process request memory of 14 bytes from the operating system.

6
00:00:27.260 --> 00:00:33.320
So 14 bytes of block of memory from the Heap segment is assigned to this process.

7
00:00:33.710 --> 00:00:41.030
So you can see that in this diagram, the pink region is a block of memory in which the process can

8
00:00:41.030 --> 00:00:42.860
read or write its data.

9
00:00:43.940 --> 00:00:50.140
So throughout the section of the courts, the Pink Mahmoudi region represents the block of memory into

10
00:00:50.150 --> 00:00:51.770
which you are processed, can read.

11
00:00:51.770 --> 00:00:52.460
All right.

12
00:00:53.180 --> 00:01:00.620
Now, simply this allocation of 14 bytes of memory is done by shifting the breakpoint from this position

13
00:01:00.800 --> 00:01:03.320
to this position in the hip segment.

14
00:01:03.680 --> 00:01:04.120
Right.

15
00:01:05.170 --> 00:01:13.270
So these pink blocks are called data blocks because there is to process data now when the operating

16
00:01:13.270 --> 00:01:17.140
system allocates a data block to a process.

17
00:01:18.200 --> 00:01:25.130
The operating system does one additional thing, the operating system reserves a very small chunk of

18
00:01:25.130 --> 00:01:28.430
memory right at the front of the data block.

19
00:01:29.940 --> 00:01:37.560
So you can see that this block of blue color represents the metal block, why it is called metal block

20
00:01:37.710 --> 00:01:41.850
because it is towards information about the data block.

21
00:01:42.810 --> 00:01:49.150
Now, I ask you one question, which address is stored in the point whether it will be the other one?

22
00:01:49.860 --> 00:01:54.900
The answer is that it is the address of the starting address of the data block.

23
00:01:55.970 --> 00:02:02.930
So it is this adds value, which is returned by standard mallock function so the process can read and

24
00:02:02.930 --> 00:02:09.830
write into this Benkler region, which is called data block, using this point, a variable now coming

25
00:02:09.830 --> 00:02:16.910
back to the meta block, you can see that block is a block, which is the information about the data

26
00:02:16.910 --> 00:02:17.350
block.

27
00:02:18.200 --> 00:02:21.020
So the block stores three kind of information.

28
00:02:21.560 --> 00:02:23.840
First is the size of the data block.

29
00:02:25.330 --> 00:02:32.320
So in this case, the size of the data block is 14 bytes, then this metal block maintains a point of

30
00:02:32.320 --> 00:02:35.290
variable which points to the next metal block.

31
00:02:35.650 --> 00:02:38.320
In this case, there is only one metal block.

32
00:02:38.530 --> 00:02:40.660
Therefore, this pointer variable is null.

33
00:02:42.390 --> 00:02:48.930
And the metal block also maintains a boolean, which says that whether the data block is free or not.

34
00:02:49.770 --> 00:02:55.830
So since this data block has been assigned to the process, therefore it is no more free and therefore

35
00:02:55.830 --> 00:02:57.720
this boolean variable is false.

36
00:02:58.560 --> 00:03:04.950
So now if I ask you to write your own mallock function, how would you have written this Madlock function

37
00:03:05.160 --> 00:03:12.150
so that it creates a data block and returns the starting address of this data block to the process?

38
00:03:13.050 --> 00:03:19.190
In addition to this, it also creates a matter block and installs that information about the data block.

39
00:03:19.860 --> 00:03:23.540
So our enhanced Marlock function would look something like this.

40
00:03:24.450 --> 00:03:29.280
You can see that in this line, you simply caching the value of breakpoints.

41
00:03:30.150 --> 00:03:37.230
In the next line, you are simply expanding the heap memory segment by size, equal to the size that

42
00:03:37.230 --> 00:03:42.810
is requested by the process, plus the size of associated matter block.

43
00:03:43.760 --> 00:03:52.730
So this Esbati call simply expands the heat memory region by size, equal to the size of a block and

44
00:03:52.730 --> 00:03:54.080
size of data block.

45
00:03:55.130 --> 00:04:02.210
And then we are filling up the fields of the block such that metal block stores, that information about

46
00:04:02.210 --> 00:04:07.040
the data block it is associated with and what should be the return value of this function.

47
00:04:08.280 --> 00:04:14.970
You can see that we are returning the starting address of the data block here, that is this Atrous.

48
00:04:16.160 --> 00:04:23.360
Now you can see that the size of a block is fixed, you can assume that the size of the integer is four

49
00:04:23.360 --> 00:04:28.310
bytes and the size of pointer variables is always four bytes on a 32.

50
00:04:28.310 --> 00:04:28.970
Which system?

51
00:04:30.010 --> 00:04:37.240
And let us assume that bullying also take four bites, so the size of the block is constant, which

52
00:04:37.240 --> 00:04:38.430
is 12 bites.

53
00:04:39.130 --> 00:04:46.000
Now, not that operating system inserts additional padding bites at the end to make the total block

54
00:04:46.000 --> 00:04:51.820
size that is the size of a block plus data block and integer multiple of four.

55
00:04:52.390 --> 00:04:54.490
This is called for bite alignment.

56
00:04:54.880 --> 00:05:00.430
So you can see in our example the size of matter block and data block is 28 bytes.

57
00:05:00.940 --> 00:05:07.570
Therefore, operating system inserts an additional two bites so that the total size becomes the size,

58
00:05:07.780 --> 00:05:09.760
which is an integer multiple of four.

59
00:05:10.860 --> 00:05:18.090
This is done by the operating system because the CPU or processor are more comfortable in accessing

60
00:05:18.090 --> 00:05:21.660
the memory when the memory is an integer multiple of four.

61
00:05:24.180 --> 00:05:27.550
So we will not go deep, deep into this for about alignment.

62
00:05:27.720 --> 00:05:35.310
It is not very important either, but be reminded that the process should use only the data block to

63
00:05:35.310 --> 00:05:37.360
read and write its data.

64
00:05:37.560 --> 00:05:44.240
The existence of the matter block all the padding by it is completely hidden from the process.

65
00:05:45.110 --> 00:05:49.590
Process is not aware of any matter block or the padding byte.

66
00:05:50.670 --> 00:05:58.170
But in the heat memory segment, all process more is about the data block, so Handsworth, to simplify

67
00:05:58.170 --> 00:06:03.800
the discussion further, we will ignore the four byte alignment in our future discussions.

68
00:06:05.010 --> 00:06:10.200
We will discuss the concept of byte alignment separately in a different section.

