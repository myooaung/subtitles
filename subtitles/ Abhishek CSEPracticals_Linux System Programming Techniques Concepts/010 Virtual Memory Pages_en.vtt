WEBVTT
1
00:00:05.500 --> 00:00:13.840
So, guys, now let us discuss what memory pages so just like main memory is divided into frames, which

2
00:00:13.840 --> 00:00:21.670
is total physical pages, virtual memory of the process is also fragmented into pages of same size,

3
00:00:21.670 --> 00:00:23.200
which is four kilobits.

4
00:00:23.920 --> 00:00:26.700
These pages are called virtual pages.

5
00:00:27.280 --> 00:00:29.640
So you can see that on the right hand side.

6
00:00:29.950 --> 00:00:36.070
Is that a snapshot of the process which will address the space of the process in execution?

7
00:00:36.640 --> 00:00:44.110
Now, if we divide the entire virtual memory of the process into blocks of equal size, then the virtual

8
00:00:44.110 --> 00:00:47.580
memory is set to be fragmented into virtual pages.

9
00:00:48.250 --> 00:00:54.540
So you can see that starting from the lowest address, we have a page P0, then page B, one that pays

10
00:00:54.560 --> 00:00:56.380
P2 and so on.

11
00:00:56.380 --> 00:00:59.360
Up to page number two is Restore the power 32 minus one.

12
00:01:00.220 --> 00:01:08.280
So each fragment of this virtual memory is called virtual page and each virtual page has a number.

13
00:01:08.440 --> 00:01:11.800
For example, this virtual page has a number P2.

14
00:01:12.070 --> 00:01:14.530
Similarly, this virtual page is Putri.

15
00:01:15.010 --> 00:01:22.240
So if the size of the virtual memory of a process is to restore the power 32 bytes and the size of page

16
00:01:22.240 --> 00:01:30.400
is four zero nine six bytes, then total number of virtual pages into which virtual space of the process

17
00:01:30.400 --> 00:01:34.090
is divided is to restore the power 20 pages.

18
00:01:36.820 --> 00:01:37.340
Right.

19
00:01:37.360 --> 00:01:38.800
It's just simple math.

20
00:01:39.790 --> 00:01:47.780
Now, let me test your ability of permutation and combination, so to identify a page in virtual Atlas

21
00:01:47.800 --> 00:01:52.360
space of a process, we would need 20 bits, right.

22
00:01:52.660 --> 00:01:54.940
Because of the stories, about 20 pages.

23
00:01:55.480 --> 00:02:02.290
So you need Pontypridd in order to uniquely identify a virtual page in a process which will address

24
00:02:02.290 --> 00:02:03.010
the space.

25
00:02:04.440 --> 00:02:12.960
Going further, since size of each virtual page is four zero nine six bytes, right, so trolleybus

26
00:02:12.960 --> 00:02:18.180
are required to uniquely assign an address to abide within a page.

27
00:02:18.870 --> 00:02:21.930
Remember, every byte is supposed to have an address.

28
00:02:23.160 --> 00:02:27.000
So you can see that this diagram is actually a diagram.

29
00:02:27.030 --> 00:02:29.940
This represents a typical virtual memory page.

30
00:02:30.660 --> 00:02:34.470
It means that this virtual page has four zero nine six bytes.

31
00:02:35.190 --> 00:02:37.440
Not every byte has an address.

32
00:02:39.120 --> 00:02:46.980
Therefore, you need to Albats in order to uniquely assign an address to abide within this page.

33
00:02:48.750 --> 00:02:55.200
So remember, 20 books are used to uniquely identify a particular virtual page in a process, virtual

34
00:02:55.200 --> 00:02:56.000
address in space.

35
00:02:56.430 --> 00:03:04.410
And once that particular virtual page is identified, then a unique address within that page is identified

36
00:03:04.560 --> 00:03:05.910
using Talbert's.

37
00:03:08.420 --> 00:03:14.960
Now, we will see in the next slide that where we will get these 20 bags and 12 bits from in order to

38
00:03:14.960 --> 00:03:19.880
make it abide within a process, what the suspect space uniquely.

39
00:03:21.340 --> 00:03:28.210
So if you apply the combination of Pontypridd, followed by Talbert's using these strong debates, you

40
00:03:28.210 --> 00:03:32.860
can uniquely locate a virtual page in a process which will address space.

41
00:03:33.280 --> 00:03:38.350
So, for example, let us say that using these drone tibbits, we look at base number one.

42
00:03:38.350 --> 00:03:39.190
Sixty five.

43
00:03:39.730 --> 00:03:40.150
Right.

44
00:03:40.780 --> 00:03:48.730
And once we locate a page uniquely in process virtual space, we know that there are still four zero

45
00:03:48.730 --> 00:03:51.700
nine six bytes which is present inside the speech.

46
00:03:52.690 --> 00:03:59.290
So using the remaining 12 bits, we can uniquely identify that which byte are actually we are trying

47
00:03:59.290 --> 00:04:00.070
to access.

48
00:04:02.140 --> 00:04:09.850
So until now, we have built up our basic so that we can gracefully conquer the concept of purging in

49
00:04:09.850 --> 00:04:10.990
the coming lecturer's.

