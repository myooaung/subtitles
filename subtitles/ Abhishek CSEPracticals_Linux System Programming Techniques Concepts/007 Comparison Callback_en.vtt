WEBVTT
1
00:00:05.480 --> 00:00:06.810
So welcome back, guys.

2
00:00:07.190 --> 00:00:10.700
Now we will going to study the concept of comparison callback.

3
00:00:11.480 --> 00:00:17.810
Now, this concept of comparison callback is not very different from the callback, which we have studied

4
00:00:17.810 --> 00:00:18.920
in the previous lecture.

5
00:00:19.910 --> 00:00:27.860
So our goal is that the application should be able to insert application data in link list in sorted

6
00:00:27.860 --> 00:00:28.270
order.

7
00:00:28.970 --> 00:00:29.300
Right.

8
00:00:29.930 --> 00:00:35.030
So we shall follow the exact same steps as in case of searching a record.

9
00:00:36.510 --> 00:00:42.710
Now, we already know how application can teach the library to perform application specific function,

10
00:00:44.160 --> 00:00:51.540
so a developer wants that whenever he inserts the data in a linked list, the list itself takes the

11
00:00:51.540 --> 00:00:54.990
responsibility to insert the data in assorted.

12
00:00:56.370 --> 00:01:02.520
So, of course, this requirement needs to compare the data that is being inserted with the data elements,

13
00:01:02.520 --> 00:01:04.739
which is already present in a list.

14
00:01:05.129 --> 00:01:05.519
Right.

15
00:01:05.820 --> 00:01:07.050
So this is very obvious.

16
00:01:07.050 --> 00:01:13.350
When you insert a new element, for example, in an area, you compare that particular element with

17
00:01:13.350 --> 00:01:19.030
the existing element of the ATI in order to locate the correct position of that element in the area.

18
00:01:19.630 --> 00:01:20.040
Right.

19
00:01:20.610 --> 00:01:22.710
So that your elements are sorted.

20
00:01:23.580 --> 00:01:31.650
So this should be intelligent to compare to application specific data, objects of same type being maintained

21
00:01:31.650 --> 00:01:32.850
by a list.

22
00:01:34.290 --> 00:01:37.220
We can achieve this by comparison callbacks.

23
00:01:37.410 --> 00:01:37.780
Right.

24
00:01:38.040 --> 00:01:43.980
So let us do it step by step and note that the step that now we will going to discuss is exactly the

25
00:01:43.980 --> 00:01:47.760
same step that we discussed in case of search callbacks.

26
00:01:48.450 --> 00:01:52.650
So the code directory that now we will going to discuss is the following part.

27
00:01:52.680 --> 00:01:57.420
That is library designing slash programmable lab slash comparison callbacks.

28
00:01:58.380 --> 00:02:04.740
So now let us go through the steps regarding how you can write a comparison callback and register this

29
00:02:04.740 --> 00:02:07.310
comparison callback with the library.

30
00:02:07.890 --> 00:02:16.610
So step one, we need to implement a callback function in application C source file right now.

31
00:02:16.620 --> 00:02:20.280
You can see that following is the prototype of comparison function.

32
00:02:20.820 --> 00:02:22.160
It returns an end.

33
00:02:22.620 --> 00:02:23.010
Right.

34
00:02:23.820 --> 00:02:30.930
And you can see that the argument is of type Y to stop, not that that the function signature is again,

35
00:02:30.930 --> 00:02:31.560
generic.

36
00:02:31.740 --> 00:02:32.160
Right.

37
00:02:33.390 --> 00:02:38.700
So this function takes the responsibility to compare the two application data objects.

38
00:02:38.910 --> 00:02:42.320
And if the data objects are equal than this function, return zero.

39
00:02:42.570 --> 00:02:47.490
If the data object is less than the second data object, then it returns minus one.

40
00:02:47.730 --> 00:02:49.380
Otherwise it returns one.

41
00:02:49.830 --> 00:02:50.220
Right.

42
00:02:51.450 --> 00:02:56.470
So not that the data objects here in this case is an object of type student.

43
00:02:57.180 --> 00:03:03.480
So let us see how this comparison function look like so you can see that I'm in comparison callback

44
00:03:03.480 --> 00:03:08.040
directory and inside this directory, take a look at application dot.

45
00:03:08.040 --> 00:03:09.120
See the source file.

46
00:03:10.520 --> 00:03:17.450
So you can see that I have not modified anything significant in the source file except that I have written

47
00:03:17.450 --> 00:03:21.320
an additional function called student comparison function.

48
00:03:22.010 --> 00:03:22.390
Right.

49
00:03:22.730 --> 00:03:26.770
And we have already discussed the signature opper type of this function.

50
00:03:27.620 --> 00:03:34.400
So you can see that the two arguments that dysfunction is accepting is actually the pointer to the object

51
00:03:34.400 --> 00:03:35.500
of type student.

52
00:03:36.380 --> 00:03:36.760
Right.

53
00:03:37.190 --> 00:03:40.840
And now we compare the two student object against each other.

54
00:03:41.570 --> 00:03:49.010
So you can see that I have written down the criteria which says that one student, one is said to be

55
00:03:49.010 --> 00:03:49.730
less than that.

56
00:03:49.730 --> 00:03:51.400
STUDENT two Right.

57
00:03:51.980 --> 00:03:55.940
So you can see that let us compare the students alphabetically on their names.

58
00:03:55.940 --> 00:04:02.210
First, if the two students have the same name, that younger student should come before the student

59
00:04:02.210 --> 00:04:03.110
in the sorted list.

60
00:04:03.950 --> 00:04:10.190
And if the two students have the same age, then we will break the tie by comparing the weight of the

61
00:04:10.190 --> 00:04:14.410
two student like the student comes before the heavier one.

62
00:04:14.870 --> 00:04:21.690
And if in case that the weight of the student is all the same, then a student with numerically lesser

63
00:04:21.690 --> 00:04:24.650
role number comes before in that list.

64
00:04:25.400 --> 00:04:30.200
So here you can see that we have implemented the logic to compare the two student objects.

65
00:04:30.590 --> 00:04:30.970
Right.

66
00:04:31.280 --> 00:04:37.160
And by following this criteria of comparison, we return the value minus one.

67
00:04:37.160 --> 00:04:41.750
If student one is less than a student, do we return the value one?

68
00:04:41.990 --> 00:04:49.820
If a student two is greater than a student one and we actually assert the program, if the two students

69
00:04:49.820 --> 00:04:56.750
are equal, that is, we are not allowed to insert two equal student objects in the list.

70
00:04:57.410 --> 00:05:04.040
So you can see that all you need to write a comparison function which compare the two application specific

71
00:05:04.040 --> 00:05:05.980
data objects of the same type.

72
00:05:06.320 --> 00:05:08.960
In this case, the object is of type student.

73
00:05:10.430 --> 00:05:13.100
Now, going forward in step two.

74
00:05:14.300 --> 00:05:22.220
We will going to define a callback function pointer in inkless library so we can see that we have defined

75
00:05:22.220 --> 00:05:27.320
a new function point, remember, in the structure which represent localist.

76
00:05:28.100 --> 00:05:31.070
Now, the purpose of this function pointer is same.

77
00:05:31.280 --> 00:05:36.680
That is, it should be able to store the address of comparison function, which we discussed in the

78
00:05:36.680 --> 00:05:37.460
previous step.

79
00:05:38.330 --> 00:05:46.760
So you can see that in this code, in the dot x file, we have list structure and this is structure.

80
00:05:46.770 --> 00:05:50.750
We have specified function pointer as an additional member.

81
00:05:52.130 --> 00:05:59.780
Now, step number three, we need to write comparison, callback, registration function, write this

82
00:05:59.780 --> 00:06:06.980
new function needs to be added to the list library code and we need to provide its implementation in

83
00:06:06.980 --> 00:06:07.730
the source file.

84
00:06:07.910 --> 00:06:09.800
That is the URL doxy.

85
00:06:10.970 --> 00:06:16.850
So you can see that following is the prototype of this registration function and the purpose of this

86
00:06:16.850 --> 00:06:18.960
registration function is same as before.

87
00:06:19.580 --> 00:06:26.020
This function will going to register the application a specific function with the list.

88
00:06:26.900 --> 00:06:34.670
So the application will use this function in order to give intelligence to the library so that the library

89
00:06:34.670 --> 00:06:38.750
can compare the two application specific data objects.

90
00:06:40.420 --> 00:06:41.710
So you can see that.

91
00:06:42.740 --> 00:06:46.050
Here is a registered comparison callback function, right?

92
00:06:46.670 --> 00:06:50.780
So in each file, we will provide the declaration of this function.

93
00:06:51.800 --> 00:07:00.290
And if we open the alleged Nazi file, so this is Daniel Doxy file, we have provided the implementation

94
00:07:00.290 --> 00:07:01.070
of this function.

95
00:07:01.700 --> 00:07:05.400
So you can see that the implementation of this function is quite obvious.

96
00:07:05.960 --> 00:07:11.390
It just registers the comparison function provided by application with the localist.

97
00:07:12.490 --> 00:07:12.900
Right.

98
00:07:14.960 --> 00:07:21.290
And eventually, in step number four, we need to write a generic insert function in the library.

99
00:07:22.660 --> 00:07:30.440
This function can be used to insert the new application data in a linked list in a sorted order, so

100
00:07:30.440 --> 00:07:32.350
following is the prototype of this function.

101
00:07:32.750 --> 00:07:38.740
If this function is able to insert the data successfully in a linked list, then return zero on success.

102
00:07:39.080 --> 00:07:45.450
And if for some reason this function fails to insert data in our linked list, then return minus one

103
00:07:45.450 --> 00:07:46.150
on failure.

104
00:07:47.440 --> 00:07:49.940
So let us discuss the implementation of this function.

105
00:07:50.350 --> 00:07:53.830
Of course, this function needs to be implemented in at least.

106
00:07:55.370 --> 00:08:01.220
So in the dog seesaws file, you can see that this is the implementation of this function.

107
00:08:02.500 --> 00:08:09.730
Now, I have implemented the logic of this function as the insertion sort, so the following logic that

108
00:08:09.730 --> 00:08:13.540
you see in this function is nothing, but it is the insertion sort.

109
00:08:14.610 --> 00:08:20.370
So the argument of dysfunction is a pointer to the application data, which needs to be inserted into

110
00:08:20.370 --> 00:08:22.440
our linked list, right.

111
00:08:23.280 --> 00:08:29.310
So you can see that at various places, I need to invoke the comparison function whenever there is a

112
00:08:29.310 --> 00:08:36.390
need to compare the new application data with the existing application data that is being held by the

113
00:08:36.390 --> 00:08:37.460
Lord of a linked list.

114
00:08:38.070 --> 00:08:42.830
So you don't have to scratch your head in order to go through the implementation of this function.

115
00:08:43.080 --> 00:08:45.300
It is just an insertion sort.

116
00:08:45.720 --> 00:08:51.810
And I expect you that, you know, the insertion sort and you should be able to insert a new data in

117
00:08:51.810 --> 00:08:54.530
a linked list as per the insertion sort.

118
00:08:55.570 --> 00:09:02.420
So you can see that the implementation of this function is, again, application agnostic in this implementation.

119
00:09:02.440 --> 00:09:06.730
I have not written any line of code which is application specific.

120
00:09:07.610 --> 00:09:14.470
I have not used any word structure, such as a student or employee in this piece of code, and therefore

121
00:09:14.480 --> 00:09:21.830
this library code is application independent so you can go through the implementation of dysfunction

122
00:09:22.040 --> 00:09:26.500
by yourself and understand its logic on implementation if you want.

123
00:09:27.110 --> 00:09:33.740
In fact, you are free to implement any other algorithm for inserting an element in the linked list

124
00:09:34.070 --> 00:09:37.140
so that the element is inserted in a certain manner.

125
00:09:38.210 --> 00:09:40.190
So coming back to the slide.

126
00:09:41.670 --> 00:09:48.900
So in the step number five, after creating a doubly linked list in application registered the appropriate

127
00:09:48.900 --> 00:09:56.060
comparison callback function, we're doubly linked list using the API register comparison callback.

128
00:09:56.430 --> 00:09:56.790
Right.

129
00:09:57.060 --> 00:09:58.110
And we are done.

130
00:09:59.550 --> 00:10:06.690
So after following the steps from one to six, you can try to insert the element in a linked list using

131
00:10:06.690 --> 00:10:14.160
the function dial priority, insert data and you can find a link list to verify whether the data that

132
00:10:14.160 --> 00:10:18.710
has been inserted into a linked list is in a sorted order or not.

133
00:10:19.440 --> 00:10:26.550
So the list library code must insert the data into the linked list as part of the comparison function

134
00:10:26.550 --> 00:10:27.150
logic.

135
00:10:27.930 --> 00:10:34.980
So let us take a look at application doxies source file and see that how application is able to organize

136
00:10:34.980 --> 00:10:39.120
its data in a sorted order using comparison callback function.

