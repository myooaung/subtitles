WEBVTT
1
00:00:07.100 --> 00:00:13.430
So, guys, now let us discuss some basics, we will going to discuss some basics regarding mallock

2
00:00:13.430 --> 00:00:14.040
Ippei.

3
00:00:14.900 --> 00:00:20.960
I'm very much sure that you have already must have used my several times in your day to day programming,

4
00:00:21.650 --> 00:00:28.660
and therefore it is obvious that you already have a fair understanding of mallock API and how it works.

5
00:00:29.840 --> 00:00:36.890
But on the other hand, I'm also very sure that there are many things which we are yet to learn regarding

6
00:00:36.890 --> 00:00:44.600
Mallock API, so you must have used Mallock or Kalac in your program to assign Mamoru chunks dynamically

7
00:00:44.600 --> 00:00:45.560
to your process.

8
00:00:46.190 --> 00:00:55.220
So Malac is a standard CE library function that allocates mammaries chunks from process unused, which

9
00:00:55.220 --> 00:00:56.330
will address the space.

10
00:00:56.960 --> 00:01:00.190
Right, and the portion of the virtual address.

11
00:01:00.190 --> 00:01:06.470
The space from which the dynamic memory allocation is done is called Heap Memory segment.

12
00:01:07.460 --> 00:01:14.660
Mallock allocate at least the number of bytes requested, the point of return by mallock points to an

13
00:01:14.660 --> 00:01:22.030
allocated space that is space where a program can read or write its data successfully.

14
00:01:22.880 --> 00:01:30.950
So no other call to mallock will allocate the reserved space or any portion of it unless that space

15
00:01:30.950 --> 00:01:32.150
has been freed before.

16
00:01:32.600 --> 00:01:33.040
Right.

17
00:01:34.190 --> 00:01:42.080
Mallak should also provide resizing and freeing of the memory, so one of the variant of my log like

18
00:01:42.080 --> 00:01:50.630
function is real, OK, and we already know that your log API is used to resize the memory, which has

19
00:01:50.630 --> 00:01:52.640
already claimed by the process.

20
00:01:53.680 --> 00:02:00.160
So in this section, we shall explore the science behind Malac and three, that is, we will going to

21
00:02:00.160 --> 00:02:07.750
discuss that, how the underlying operating system manages the heap memory segment of the process when

22
00:02:07.750 --> 00:02:14.860
the userspace process invokes Mallock and three function calls during the course of its execution.

23
00:02:15.880 --> 00:02:18.140
Now, this diagram must be familiar to you.

24
00:02:18.790 --> 00:02:22.900
This diagram shows the memory layout of a Linux process.

25
00:02:24.490 --> 00:02:31.450
So you can see that white portion is the hip memory segment and it grows upwards, and in this diagram

26
00:02:31.450 --> 00:02:37.480
you can also see that there is a lot of empty antipollution which is sandwiched between the static memory

27
00:02:37.690 --> 00:02:38.830
and the hip memory.

28
00:02:41.190 --> 00:02:48.120
This empty portion is a chunk of virtual address space, which is yet to be used by our process.

29
00:02:49.080 --> 00:02:56.790
So suppose you are process requests, 20 bytes of memory from the operating system by invoking the mallock

30
00:02:56.790 --> 00:03:04.650
function, so period is a pointer type variable and it will restore the starting address of the block

31
00:03:04.650 --> 00:03:08.760
of memory, which is assigned to a process by this mallock function.

32
00:03:09.270 --> 00:03:15.950
So suppose if Pointer points to the address location, for example, the following at this location.

33
00:03:16.140 --> 00:03:16.510
Right.

34
00:03:16.890 --> 00:03:25.110
So let us assume that this mallock function returns this address and it is this address which is being

35
00:03:25.110 --> 00:03:26.930
pointed by this point, a variable.

36
00:03:28.140 --> 00:03:34.630
So it means that this address will be some address in Heap's segment of the process, which will address

37
00:03:34.630 --> 00:03:35.270
the space.

38
00:03:36.000 --> 00:03:43.140
So you can visualize this as follows in this diagram, because you have invoked the mallock API and

39
00:03:43.140 --> 00:03:46.530
requested 20 bytes of memory from the operating system.

40
00:03:46.980 --> 00:03:52.650
The operating system will reserve 20 bytes of memory from the process, which will address the space.

41
00:03:53.190 --> 00:03:58.350
And you can see that the Heap segment has expanded upwards by 20 bytes.

42
00:03:59.960 --> 00:04:05.720
So that starting address of this 20 byte of block of memory is the following address.

43
00:04:06.760 --> 00:04:10.840
So it is this address which is written by the mallock function.

44
00:04:11.680 --> 00:04:18.970
Now let us suppose that you want to write some data into the block of memory, which is 20 bytes, and

45
00:04:18.970 --> 00:04:20.839
is resolved by the mallock function.

46
00:04:21.550 --> 00:04:24.730
So suppose your program executes the following instruction.

47
00:04:25.150 --> 00:04:29.830
That is, you are copying a string high-low into this address.

48
00:04:29.920 --> 00:04:34.750
And we already know that there are five characters in this string.

49
00:04:35.780 --> 00:04:40.750
So now the question is that where will this data go, right?

50
00:04:41.120 --> 00:04:43.230
This data has to be saved somewhere.

51
00:04:43.580 --> 00:04:47.510
So where this is string will actually be stored in the system.

52
00:04:48.490 --> 00:04:56.290
Will this string be destroyed in the process of memory or on the desk or on physical memory or where?

53
00:04:57.220 --> 00:05:03.460
So let us try to understand that whenever your program writes data into the block of memory, where

54
00:05:03.460 --> 00:05:09.640
actually that data goes so you can see that your Madlock return this address.

55
00:05:09.850 --> 00:05:10.220
Right.

56
00:05:10.510 --> 00:05:14.430
So this address is an address in the process which will address the space.

57
00:05:15.250 --> 00:05:19.160
In other words, we say that this is what you will address.

58
00:05:19.840 --> 00:05:28.460
Now, there is something called AMMU Memory Management Unit, whose responsibility is to translate what

59
00:05:28.490 --> 00:05:30.570
you will address to physical address.

60
00:05:30.790 --> 00:05:33.110
And this process is called paging.

61
00:05:34.030 --> 00:05:38.790
So remember, for every virtual address, there exist one physical address.

62
00:05:39.160 --> 00:05:39.490
Right.

63
00:05:39.760 --> 00:05:41.230
So let us suppose that.

64
00:05:42.180 --> 00:05:49.770
After applying the purging this virtual address maps to this physical address, Nevada's physical address,

65
00:05:49.980 --> 00:05:57.030
physical address is the address on the actual physical random access memory which is installed in your

66
00:05:57.030 --> 00:05:57.570
system.

67
00:05:58.640 --> 00:06:06.110
So physical memory means the actual chip which is installed in your system and the physical address

68
00:06:06.110 --> 00:06:09.820
is the address of memory location on your chip.

69
00:06:10.880 --> 00:06:18.820
So not that the actual data always gets written into the physical memory and not in virtual memory.

70
00:06:19.340 --> 00:06:21.500
There is no data in virtual memory.

71
00:06:21.830 --> 00:06:30.110
Virtual memory only have addresses which gets mapped to the corresponding physical address by Amamou.

72
00:06:30.350 --> 00:06:36.720
And it is on that actual physical address where actual data is written or saved.

73
00:06:37.160 --> 00:06:38.210
So I'm sorry.

74
00:06:38.210 --> 00:06:40.900
Here, there's a little mismatch I copied.

75
00:06:40.910 --> 00:06:45.090
Hello, but here I have written Hello World, so just adjust to that.

76
00:06:46.430 --> 00:06:53.230
So actual data or the content is written on physical memory, virtual memory do not contain any data.

77
00:06:53.690 --> 00:06:54.080
Right.

78
00:06:54.770 --> 00:06:55.970
And it makes sense.

79
00:06:55.970 --> 00:06:56.390
Right.

80
00:06:56.750 --> 00:07:03.370
In order to save that data, you need some hardware on which you can write that data persistently.

81
00:07:04.010 --> 00:07:11.150
So that piece of hardware in this case is a physical memory, which is actual chip which is installed

82
00:07:11.270 --> 00:07:12.350
in your system.

83
00:07:13.700 --> 00:07:20.620
But there is a side news here, discoursed do not cover Beijing discourse covers only management of

84
00:07:20.620 --> 00:07:26.260
virtual memory, that is heat memory and STAC memory by Linux like operating system.

85
00:07:26.630 --> 00:07:29.360
So we will not going to discuss Beijing in detail.

86
00:07:29.540 --> 00:07:32.000
It is out of the scope of discourse.

87
00:07:33.180 --> 00:07:38.880
And this is slide, I just wanted to explain to you that the actual data is written on the physical

88
00:07:38.880 --> 00:07:42.020
memory and not in processed virtual memory.

89
00:07:42.360 --> 00:07:48.480
And for every virtual address which belongs to the process, what does the space there exists?

90
00:07:48.480 --> 00:07:55.200
A corresponding physical address, which is the address of memory location on physical chip.

91
00:07:55.650 --> 00:08:00.010
The mapping of virtual address to physical address is done by AMEMIYA.

92
00:08:00.150 --> 00:08:02.430
And this concept is called paging.

93
00:08:03.400 --> 00:08:10.090
So and this instruction, you can see that your program thinks that it is writing data into its virtual

94
00:08:10.090 --> 00:08:10.540
memory.

95
00:08:10.930 --> 00:08:11.350
Right.

96
00:08:11.680 --> 00:08:13.120
But this is the illusion.

97
00:08:14.080 --> 00:08:21.540
The operating system internally maps this virtual memory to physical memory by using Amamou or paging.

98
00:08:22.210 --> 00:08:27.550
So the actual data is written on the physical memory and not virtual memory.

99
00:08:28.420 --> 00:08:31.480
In fact, virtual memory is a conceptual thing.

100
00:08:32.820 --> 00:08:39.510
It is not a physical memory which can store content, and it is for this reason, this memory is called

101
00:08:39.659 --> 00:08:40.409
virtual.

102
00:08:40.710 --> 00:08:43.169
Virtual means something which do not exist.

