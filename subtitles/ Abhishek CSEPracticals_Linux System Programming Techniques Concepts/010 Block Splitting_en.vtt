WEBVTT
1
00:00:05.010 --> 00:00:06.400
So welcome back, guys.

2
00:00:06.780 --> 00:00:09.760
Now let us discuss the concept of block splitting.

3
00:00:10.380 --> 00:00:17.710
Now, let us suppose that the falling figure represents the snapshot of the heap memory segment as above.

4
00:00:18.030 --> 00:00:25.590
Right now, what should happen if Brussels issued a new request to claim another 10 bites of memory

5
00:00:25.590 --> 00:00:26.870
from the operating system?

6
00:00:27.240 --> 00:00:34.500
So our mallock function should search the block from the list, which could satisfy the request of 10

7
00:00:34.500 --> 00:00:35.040
bytes?

8
00:00:35.460 --> 00:00:35.830
Right.

9
00:00:36.240 --> 00:00:44.100
So our Malac function should iterate over this list and find the block which is free and should be able

10
00:00:44.100 --> 00:00:47.010
to satisfy the request of size 10 bytes.

11
00:00:48.060 --> 00:00:53.070
Such a block is a block which is pointed by this pointer, right?

12
00:00:53.850 --> 00:01:00.780
So common sense says that the block, which is pointed by a pointer two, should be used again.

13
00:01:01.900 --> 00:01:04.989
To assign 10 bytes of memory, right?

14
00:01:05.410 --> 00:01:13.450
And why, because this blog is at least as big, which can satisfy the request of 10 bytes and this

15
00:01:13.450 --> 00:01:14.520
block is free.

16
00:01:15.380 --> 00:01:22.070
And after allocating 10 bytes of memory, the remaining 20 bytes should still be maintained as free

17
00:01:22.070 --> 00:01:24.340
block and the block list, right.

18
00:01:25.670 --> 00:01:29.780
So we achieved this by splitting the 30 block into two blocks.

19
00:01:30.440 --> 00:01:32.270
One block will be done by it.

20
00:01:32.270 --> 00:01:39.140
And it is this block of memory which will be returned to the process for use and another block will

21
00:01:39.140 --> 00:01:40.400
be of 20 bytes.

22
00:01:41.240 --> 00:01:49.280
Certain byte block should be marked as false because it is in use by the process and 20 byte block should

23
00:01:49.280 --> 00:01:50.540
be marked as free.

24
00:01:51.970 --> 00:01:52.420
Right.

25
00:01:52.960 --> 00:01:59.950
So let us see that what will be the changes in the snapshot of this memory segment when this 30 byte

26
00:01:59.950 --> 00:02:05.230
of three data block is split into 10 by 10 and 20 by data block?

27
00:02:06.580 --> 00:02:14.890
So going forward, so now let us split this 30 byte of data block, so the heat memory segment after

28
00:02:14.890 --> 00:02:19.110
the split of this 30 byte of data block would look something like this.

29
00:02:19.720 --> 00:02:24.040
So you can just focus on this part of this heat memory segment.

30
00:02:24.940 --> 00:02:31.360
So you can see that this 30 byte of data block is a splintered into this 10 by block.

31
00:02:32.260 --> 00:02:32.670
Right.

32
00:02:33.160 --> 00:02:40.270
And how much memory is remaining, the 20 byte now distant part of memory has to be maintained as free

33
00:02:40.270 --> 00:02:40.760
memory.

34
00:02:41.680 --> 00:02:46.510
So remember, for each block, you also need a memory to maintain a mental block.

35
00:02:47.140 --> 00:02:50.610
And mental block is a fixed size or size 12 bytes.

36
00:02:51.340 --> 00:02:58.360
So out of these 20 bytes of memory, the 12 bytes goes to the mental block and the remaining eight bytes

37
00:02:58.360 --> 00:03:01.240
is maintained as a free data block.

38
00:03:01.570 --> 00:03:01.910
Right.

39
00:03:02.260 --> 00:03:06.730
So this mental block will keep information about this data block.

40
00:03:08.910 --> 00:03:14.820
And you can see that this bullying flag is set to true, whereas this bullying flag is set to once.

41
00:03:16.290 --> 00:03:18.540
So this is how block is splitting is done.

42
00:03:20.140 --> 00:03:27.460
So total number of blocks in the Hebrew memory is increased from five to six in the block list, right.

43
00:03:28.440 --> 00:03:35.020
My log function should be enhanced to split the block large enough to provide the requested memory.

44
00:03:35.500 --> 00:03:35.880
Right.

45
00:03:37.970 --> 00:03:45.860
So Armel function choose to split the study bytes of data blocks, because after splitting, we can

46
00:03:45.860 --> 00:03:49.190
easily satisfy the request of 10 bytes of memory.

47
00:03:50.680 --> 00:03:57.370
So just for simplicity, I am ignoring taking care of for alignment, right?

48
00:03:58.150 --> 00:04:01.390
Let's not discuss the alignment in this discussion.

49
00:04:02.920 --> 00:04:05.500
Now, I ask you one analysis question.

50
00:04:06.520 --> 00:04:17.350
If the process issues too many Mallak request for X where X values are small in small means two, four,

51
00:04:17.350 --> 00:04:20.829
six, eight, three, one and so on.

52
00:04:22.290 --> 00:04:30.810
So you can see that if process issues request for memory of very small sizes, that it will lead to

53
00:04:30.810 --> 00:04:34.830
the creation of too many mental blocks in the memory segment.

54
00:04:35.760 --> 00:04:40.200
We already know that the size of the mental block is of size 12 bytes.

55
00:04:40.680 --> 00:04:46.730
You are using 12 bites of memory to keep track of two bytes of requested data block.

56
00:04:47.790 --> 00:04:48.180
Right.

57
00:04:48.390 --> 00:04:53.850
Similarly, you are again using 12 bytes of memory to keep track of another four parts of this data

58
00:04:53.850 --> 00:04:54.320
block.

59
00:04:55.320 --> 00:04:55.700
Right.

60
00:04:55.770 --> 00:05:02.250
Similarly, you are again using 12 bytes of memory to keep track of the six bytes of data block and

61
00:05:02.250 --> 00:05:02.800
so on.

62
00:05:03.450 --> 00:05:10.740
So it means that in the Heat memory segment, you are using more memory to keep track of a memory which

63
00:05:10.740 --> 00:05:12.240
is assigned to a process.

64
00:05:13.510 --> 00:05:19.180
So you can see that in this example, thirty six bytes of memory.

65
00:05:20.400 --> 00:05:27.960
Is used by the matter blocks, where is only 12 bytes of memory is used by the data block, that is

66
00:05:27.960 --> 00:05:29.820
two plus four plus six.

67
00:05:31.010 --> 00:05:38.870
So this is something which you would not like to do, right, instead of using the heat memory for useful

68
00:05:38.870 --> 00:05:45.320
purpose by the process, we are using most of the portion of the heat memory for keeping track of the

69
00:05:45.320 --> 00:05:47.120
memory which is assigned to the process.

70
00:05:48.140 --> 00:05:53.510
So it is a bad programming practice to issue law calls to the operating system.

71
00:05:54.450 --> 00:06:00.810
For smaller chunks of memory such as these, and now we know the reason behind it.

