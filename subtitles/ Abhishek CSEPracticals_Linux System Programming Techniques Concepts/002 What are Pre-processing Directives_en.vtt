WEBVTT
1
00:00:05.660 --> 00:00:12.860
So, guys, in this lecture video, we will going to discuss the preprocessor directives in C or C++,

2
00:00:13.880 --> 00:00:18.480
both the languages that A, C and C++ supports preprocessing directives.

3
00:00:19.400 --> 00:00:25.490
So before Compiler actually compiles the source files, it performs the text substitution.

4
00:00:25.760 --> 00:00:27.230
Now, we know this already.

5
00:00:27.830 --> 00:00:33.390
The C preprocessor directives are just a simple text substitution tool.

6
00:00:34.010 --> 00:00:37.460
So what are preprocessor directives in a C code?

7
00:00:37.460 --> 00:00:39.050
Any language to start with?

8
00:00:39.050 --> 00:00:46.280
Hash Symbol is a preprocessor directive, and the two most commonly used preprocessor directives are

9
00:00:46.520 --> 00:00:48.450
hash include and has defined.

10
00:00:50.090 --> 00:00:56.930
So remember, text substitution is performed first before the compiler actually starts the compilation

11
00:00:56.930 --> 00:00:58.160
of source files.

12
00:00:59.720 --> 00:01:05.239
Now, this is something very important, and I was going to explain this point more collaboratively

13
00:01:05.239 --> 00:01:12.150
in the coming sleights directives can be written and bought the source files as well as halophiles.

14
00:01:13.040 --> 00:01:19.340
Now, following is a list of most common preprocessor directives, which we use in our day to day coding

15
00:01:19.340 --> 00:01:20.990
in C or C++.

16
00:01:21.830 --> 00:01:28.450
So you can see that there are many preprocessor directives that is has defined hash include hash, undef,

17
00:01:28.640 --> 00:01:35.480
hash of def hash, if not define hash of hash, URLs, hash, alif and hash.

18
00:01:35.480 --> 00:01:42.190
And of course there are a few more preprocessor directives, but their discussion is not relevant here.

19
00:01:42.740 --> 00:01:49.640
So you can see that preprocessor directives always start with the hash symbol and they are called preprocessor

20
00:01:49.640 --> 00:01:57.950
because they are processed before actually the compiler starts compilation of source file rubinow going

21
00:01:57.950 --> 00:02:02.420
to understand that how preprocessor directives are executed.

22
00:02:03.920 --> 00:02:09.680
So please go through these preprocessor directives and try to understand that what is the function of

23
00:02:09.680 --> 00:02:11.590
each of these preprocessing directives?

24
00:02:12.170 --> 00:02:13.780
So now going forward.

25
00:02:15.620 --> 00:02:19.030
Consider the following simple C-code, right.

26
00:02:19.310 --> 00:02:21.710
So let us go through this code line by line.

27
00:02:22.070 --> 00:02:25.580
You can see that using has defined preprocessing directive.

28
00:02:26.120 --> 00:02:29.200
I have defined it as a constant, which is 10.

29
00:02:29.510 --> 00:02:32.840
Similarly, I have defined another constant be as Trumpy.

30
00:02:33.320 --> 00:02:38.370
Now I have defined a macro square X whose definition is X into X.

31
00:02:38.960 --> 00:02:44.360
Now in this line I'm checking whether the symbol E has been defined or not.

32
00:02:44.750 --> 00:02:51.770
Now please remember that the processing of preprocessor directives happens from top towards the bottom

33
00:02:51.770 --> 00:02:52.760
of the source file.

34
00:02:53.630 --> 00:02:59.420
So by the time the compiler reaches this line, the compiler would know that there is something called

35
00:02:59.420 --> 00:03:01.150
A which is already defined.

36
00:03:01.700 --> 00:03:03.400
Therefore this condition will be true.

37
00:03:04.130 --> 00:03:10.780
And because this statement is true, therefore all the statements which is enclosed between hash, if

38
00:03:10.820 --> 00:03:18.890
define and hash and if will be considered as a part of a code, therefore has to include x start at

39
00:03:19.070 --> 00:03:20.060
will be included.

40
00:03:21.110 --> 00:03:26.180
Now here we are simply saying to undefined the symbol A.

41
00:03:27.250 --> 00:03:33.430
Now, at this point of line in the code, the compiler will forget that there is something called a

42
00:03:33.640 --> 00:03:34.570
ever defined.

43
00:03:35.350 --> 00:03:39.250
Now here we are checking whether a symbol has been defined or not.

44
00:03:39.670 --> 00:03:42.370
Now, of course, this condition will going to be false.

45
00:03:42.790 --> 00:03:47.620
Therefore, all the code which is written in between this hash is defined.

46
00:03:47.620 --> 00:03:53.200
And this has and will not be a part of a code and will be completely omitted.

47
00:03:53.830 --> 00:03:56.380
So this line will not be a part of a code.

48
00:03:57.490 --> 00:04:03.050
Now, going forward, here we are checking whether the symbol is not defined.

49
00:04:03.580 --> 00:04:05.820
Now, this condition will going to be true.

50
00:04:05.980 --> 00:04:06.370
Why?

51
00:04:06.550 --> 00:04:11.870
Because here we have already undefined the symbol A so because this condition is true.

52
00:04:12.040 --> 00:04:16.250
Therefore, this code will be considered as a part of a code.

53
00:04:16.720 --> 00:04:19.779
Therefore, this line will be considered for compilation.

54
00:04:20.230 --> 00:04:27.610
And because this line is encapsulated between hash, URLs and hash, and therefore this line will not

55
00:04:27.610 --> 00:04:29.350
be a part of a final code.

56
00:04:30.310 --> 00:04:35.980
So you can see that the preprocessing directives are process from top to bottom of the source file.

57
00:04:37.120 --> 00:04:43.630
So the final source file that you will get after processing all the pre processing directives will be

58
00:04:43.630 --> 00:04:46.260
simply the contents of extorts.

59
00:04:46.330 --> 00:04:48.730
Each had a file and this line.

60
00:04:50.290 --> 00:04:56.890
So this will be the final content of the source file after processing all the pre processing directives,

61
00:04:57.760 --> 00:05:05.200
so the final source file with the compiler takes as an input for final compilation is actually the source

62
00:05:05.200 --> 00:05:07.180
file, which is ABC Nazi.

63
00:05:09.040 --> 00:05:15.640
So remember, this file is obtained after applying the tech substitution that is all the has to fines

64
00:05:15.820 --> 00:05:22.330
have been replaced by their actual definition, and all the hash includes have been replaced by the

65
00:05:22.330 --> 00:05:24.640
corresponding header files, which they include.

66
00:05:25.630 --> 00:05:32.170
So the final code, which make it to the final version of source file, which will be compiled eventually

67
00:05:32.170 --> 00:05:39.070
by the compiler, is this line, and of course has included will be replaced by the contents of extract

68
00:05:39.160 --> 00:05:39.790
as file.

69
00:05:42.260 --> 00:05:45.950
And another line which makes it to the final court is this line.

70
00:05:47.730 --> 00:05:48.130
Right.

71
00:05:48.300 --> 00:05:54.810
So this is the second line, so apart from these two lines, everything will be omitted from the final

72
00:05:54.810 --> 00:06:00.180
source file and this is the final version of the file, which the compiler takes for compilation.

73
00:06:01.630 --> 00:06:08.170
So now going forward now, let us see how preprocessor directives can solve the problem of duplicate

74
00:06:08.170 --> 00:06:09.550
header file inclusion.

