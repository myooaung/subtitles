WEBVTT
1
00:00:05.620 --> 00:00:07.000
So welcome back, guys.

2
00:00:07.330 --> 00:00:13.630
Now let us discuss the memory allocation and the allocation that is, we will going to discuss how operating

3
00:00:13.630 --> 00:00:21.340
system allocates the memory from each segment and they allocate the memory from each segment when the

4
00:00:21.340 --> 00:00:25.660
process issues mallock and three calls to the operating system.

5
00:00:26.590 --> 00:00:28.630
So you can see that in this diagram.

6
00:00:28.810 --> 00:00:36.520
Suppose the process has already issued a request to the operating system to claim 14 bytes of memory.

7
00:00:37.710 --> 00:00:44.850
So after this call, that snapshot of the memory segment would look something like this, needless to

8
00:00:44.850 --> 00:00:48.150
say, the breakpoint, I will point to this location.

9
00:00:49.090 --> 00:00:49.500
Right.

10
00:00:50.600 --> 00:00:55.880
Now, suppose your process issues another mallock request for 16 bytes of memory.

11
00:00:56.540 --> 00:00:57.550
So what will happen?

12
00:00:58.490 --> 00:01:06.050
The operating system will resolve 16 bytes of data block and of course, the operating system will create

13
00:01:06.050 --> 00:01:10.040
an associated matter block to keep track of this data block.

14
00:01:10.790 --> 00:01:15.950
And the operating system returns that starting address of the data block to your process.

15
00:01:16.850 --> 00:01:21.830
Now, if you remember in the mental block, there was one field called next.

16
00:01:23.480 --> 00:01:30.410
Now that the operating system has assigned a second data block to a process, the next field of the

17
00:01:30.410 --> 00:01:33.140
matter block or the previous allocation?

18
00:01:34.190 --> 00:01:40.970
Would point to the starting address of the next block in this segment, so you can see that the next

19
00:01:40.970 --> 00:01:47.360
field of this matter block is updated to point to the starting address of the next block.

20
00:01:47.930 --> 00:01:54.290
Similarly, if we are process issues, request to claim 20 bites of memory from the hip segment, the

21
00:01:54.290 --> 00:01:59.180
operating system will create a new metal block and a corresponding data block.

22
00:01:59.600 --> 00:02:00.040
Right?

23
00:02:01.260 --> 00:02:08.220
And update the next field pointer of the previous matter block so that it points to the starting address

24
00:02:08.220 --> 00:02:14.030
of the next block and the same process goes on, right.

25
00:02:15.270 --> 00:02:21.000
So finally, let us suppose that your process has requested another 20 bites of memory.

26
00:02:21.330 --> 00:02:28.020
And after this call, the breakpoint that would have settled at this position in this memory segment.

27
00:02:28.590 --> 00:02:29.060
Right.

28
00:02:30.420 --> 00:02:35.870
So you can see that your memory is taking the shape of a legalised right.

29
00:02:37.480 --> 00:02:42.870
So this is how memory allocation is done now let us discuss how the allocation is done.

30
00:02:44.680 --> 00:02:46.010
So welcome back, guys.

31
00:02:46.360 --> 00:02:52.720
Now let us discuss how memory allocation is done, so continuing from the point where we left in the

32
00:02:52.720 --> 00:03:00.430
previous slide, let us suppose that this is a snapshot of the memory segment after the process has

33
00:03:00.430 --> 00:03:04.130
issued the following mellark calls to the operating system.

34
00:03:04.960 --> 00:03:11.230
Now, let us suppose that your process wants to free the memory so the process invokes the free call

35
00:03:11.530 --> 00:03:15.730
and passed the address of the memory location which it wants to free.

36
00:03:16.390 --> 00:03:20.590
So here in this case, the process is passing this particular address.

37
00:03:21.560 --> 00:03:27.920
So now the operating system has received the request to free the memory, which is starting at this

38
00:03:27.920 --> 00:03:29.060
particular address.

39
00:03:29.660 --> 00:03:33.680
Now the question is that how will the operating system know that?

40
00:03:33.680 --> 00:03:36.050
How many bytes of memory it has to free?

41
00:03:37.320 --> 00:03:41.540
Now, this information will come from this matter block, right?

42
00:03:42.120 --> 00:03:49.920
So how the process will actually access this matter block from this address, simply subtract the size

43
00:03:49.920 --> 00:03:54.230
of this matter block and you will get this address right.

44
00:03:54.870 --> 00:04:00.690
So operating system will get that starting address of this matter block and hence the operating system

45
00:04:00.690 --> 00:04:03.780
can access all the fields of this matter block.

46
00:04:04.750 --> 00:04:09.730
So the operating system will read the size field of this matter block and the operating system will

47
00:04:09.730 --> 00:04:15.750
know that it has to three 16 bytes of data block, which is associated with this matter block.

48
00:04:16.570 --> 00:04:22.620
So you can see that the boolean flag, which was false in this matter block, is now set to true.

49
00:04:23.200 --> 00:04:30.190
So true means that the data block associated with this matter block is now free and is available to

50
00:04:30.190 --> 00:04:33.940
provide the memory for future calls by the process.

51
00:04:34.480 --> 00:04:41.170
Similarly, if the process wants to free the block of memory, which is pointed by the pointer for that

52
00:04:41.170 --> 00:04:48.400
is BTR for the same process happens and the operating system uses that information is stored in this

53
00:04:48.400 --> 00:04:52.220
matter block to actually mark this data block as free.

54
00:04:52.690 --> 00:04:59.440
So the mystery that is how the operating system knows that, how many bytes it has to free when the

55
00:04:59.440 --> 00:05:04.600
process actually invoked a free call to free the memory is resolved.

56
00:05:06.030 --> 00:05:12.270
This is one of the most part question that is asked in the interviews that how three knows that, how

57
00:05:12.270 --> 00:05:13.850
many boats it has to free.

58
00:05:14.580 --> 00:05:19.350
So now we understand the concept behind it, that whole free function, Volks.

59
00:05:20.310 --> 00:05:25.170
But of course, there are still many things to be discussed regarding heap memory management.

60
00:05:26.260 --> 00:05:28.150
The story is not yet over.

