WEBVTT
1
00:00:05.810 --> 00:00:09.890
So, guys, now we are already familiar that whole procedure called algorithm.

2
00:00:10.790 --> 00:00:18.050
So here I have taken one slide to write down the formal steps regarding our process of call algorithm

3
00:00:18.050 --> 00:00:19.050
is executed.

4
00:00:19.670 --> 00:00:25.880
So when the caller calls the call function, following the steps takes place on most common Linux system

5
00:00:25.880 --> 00:00:26.760
architectures.

6
00:00:27.170 --> 00:00:33.020
So in order to set up a static frame of the calling function into the stack manually, the very first

7
00:00:33.020 --> 00:00:38.480
thing that caller needs to do is to push the arguments of the call function in the reverse order in

8
00:00:38.480 --> 00:00:39.310
the stack mummery.

9
00:00:40.010 --> 00:00:46.520
So you can see that this operation is performed by the function itself, that in the second step the

10
00:00:46.520 --> 00:00:53.080
caller needs to push the orders off next instruction as the return address in the call is a static frame.

11
00:00:53.450 --> 00:00:53.820
Right.

12
00:00:54.260 --> 00:00:58.660
So the current value of the IP register is then pushed into the stack memory.

13
00:00:59.180 --> 00:00:59.590
Right.

14
00:01:00.410 --> 00:01:06.440
And this action is also done by the caller function, the calling function that takes over from the

15
00:01:06.440 --> 00:01:07.120
step three.

16
00:01:07.730 --> 00:01:14.570
So it is the responsibility of the function to push the previous frames based pointer register value

17
00:01:14.750 --> 00:01:19.110
and copy the value of E.S.P to SBP.

18
00:01:19.820 --> 00:01:22.550
So it is SBP, right, not Aebi.

19
00:01:23.960 --> 00:01:30.770
So you can see that the old value of this pointer register is stored into the stack memory of the function,

20
00:01:31.340 --> 00:01:36.540
and then the best pointer to value is updated as part of the stack frame.

21
00:01:37.010 --> 00:01:43.820
So after execution of this instruction, Epirus external stores the address where commerce based point,

22
00:01:43.820 --> 00:01:49.190
the registered value is saved in the stack frame in a stop number four.

23
00:01:49.340 --> 00:01:55.740
It is the college's responsibility to set the program counter here program Countryman's IP Register.

24
00:01:56.150 --> 00:02:02.450
So IP that is updated to store the address of the next instruction and the calling function, which

25
00:02:02.450 --> 00:02:03.560
is to be executed.

26
00:02:04.190 --> 00:02:07.700
So as soon as the value of IP that value is.

27
00:02:08.800 --> 00:02:15.210
Ability to store the address of first instruction of the function, then the execution of the calling

28
00:02:15.280 --> 00:02:22.150
function starts, and now in the final step, it is the responsibility to push the local variables of

29
00:02:22.150 --> 00:02:25.660
quality function that is its own variable into the stock memory.

30
00:02:26.230 --> 00:02:26.610
Right.

31
00:02:26.950 --> 00:02:32.350
And finally, in this type sake's, the call is the stark frame has been completely set up and now it

32
00:02:32.350 --> 00:02:33.750
can execute its logic.

33
00:02:34.240 --> 00:02:41.230
So not that here with every Bush operation, that stack pointer that is ESP is DiClemente DiClemente

34
00:02:41.230 --> 00:02:44.810
means it points to the more noble atrous in the stack mummery.

35
00:02:45.370 --> 00:02:50.500
Right, because we push the data in the stack memory and the stack manually grows downwards.

36
00:02:51.680 --> 00:02:58.370
Similarly, with every pop operation, the stack pointer registers value is incremented, so incremented

37
00:02:58.370 --> 00:03:04.310
here will result in the stack pointer to point to a more higher address in the stack mummery.

38
00:03:04.700 --> 00:03:11.240
In other words, the pop operation frees Stack mamady and make the stack mummery available for further

39
00:03:11.240 --> 00:03:11.750
use.

40
00:03:13.120 --> 00:03:19.600
So these are the six steps that we have discussed in the algorithm, you may want to revisit the algorithm

41
00:03:19.600 --> 00:03:22.540
and apply these six steps in the same sequence.

42
00:03:23.230 --> 00:03:30.580
And this will be crystal clear in your mind regarding how that stack frame of the function is set up

43
00:03:30.760 --> 00:03:33.640
before the quality function actually starts its execution.

44
00:03:34.150 --> 00:03:40.480
Note that the code that I've written and this a slide which is in yellow color, is actually the assembly

45
00:03:40.480 --> 00:03:40.930
code.

46
00:03:41.260 --> 00:03:48.100
So I have written this assembly code here in order to tell you that how actually the called algorithm

47
00:03:48.100 --> 00:03:50.740
looks at assembly code level.

