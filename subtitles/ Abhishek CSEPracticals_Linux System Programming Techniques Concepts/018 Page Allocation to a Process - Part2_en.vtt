WEBVTT
1
00:00:05.500 --> 00:00:13.030
So let us suppose that we have a process B in execution and at any given point of time, let us suppose

2
00:00:13.030 --> 00:00:17.110
that the process has used this month's amount of memory already.

3
00:00:17.770 --> 00:00:21.640
This dotted line represents boundary off of our trial page.

4
00:00:23.160 --> 00:00:30.150
So if the process he has to use more of a virtual memory, it has to use a new virtual page all together.

5
00:00:31.470 --> 00:00:35.210
Now suppose the process issues the request mallock hundred.

6
00:00:35.610 --> 00:00:36.660
That is the process.

7
00:00:36.720 --> 00:00:40.380
He wants to use a hundred more bytes of virtual memory.

8
00:00:41.790 --> 00:00:47.490
So now the Marlock function will check whether it has any virtual page which has a space left.

9
00:00:48.450 --> 00:00:54.510
Now, in this diagram, you can see that process B needs a new virtual page all.

10
00:00:55.800 --> 00:01:03.170
So it means that there is no virtual pace to meet hundred bytes of request from the process.

11
00:01:03.540 --> 00:01:11.340
Therefore, my function interns invoke SB aka system call to request a new virtual page from the operating

12
00:01:11.340 --> 00:01:12.460
system altogether.

13
00:01:13.200 --> 00:01:19.230
So you can see that the huge segment of the process show that just the space expands by a size equal

14
00:01:19.230 --> 00:01:21.060
to the size of a virtual page.

15
00:01:22.300 --> 00:01:26.590
And now this mullock function keeps track of this new virtual page.

16
00:01:28.240 --> 00:01:36.010
Now, the original request that was issued by the process P was one hundred bytes, and the size of

17
00:01:36.010 --> 00:01:39.760
this virtual page we already know is four kilobytes, right?

18
00:01:40.480 --> 00:01:48.610
So log function out of these four kilobytes, we assign only one hundred plus embryo's bytes.

19
00:01:48.880 --> 00:01:53.110
And those hundred plus Ambiens bytes are actually given to the process.

20
00:01:53.110 --> 00:02:00.990
To use my log function will keep track of how much memory is still remaining on this virtual page.

21
00:02:02.760 --> 00:02:05.570
Operating system is not aware that G.

22
00:02:05.580 --> 00:02:08.250
Lipsey is playing this efficient game.

23
00:02:08.580 --> 00:02:09.979
Now what does Gypsys G.

24
00:02:10.020 --> 00:02:15.110
Lipsey is a standard C library in which there is mallock implementation.

25
00:02:15.720 --> 00:02:20.630
So operating system is not aware that Jilib C is playing this efficient game.

26
00:02:21.150 --> 00:02:28.760
All it believes that is all operating system believes that it has assigned four kilobytes of virtual

27
00:02:28.770 --> 00:02:30.840
memory to a requesting process.

28
00:02:32.070 --> 00:02:36.930
So you can see that there are three entities that are involved in this entire mechanism.

29
00:02:37.470 --> 00:02:40.200
The process p, the G.

30
00:02:40.200 --> 00:02:45.260
Lipsey Library, which has MALLAK implementation and the operating system.

31
00:02:46.620 --> 00:02:47.710
You can see that G.

32
00:02:47.770 --> 00:02:51.750
Lipsey interact with the operating system using, as we are called only.

33
00:02:53.040 --> 00:02:53.480
Right.

34
00:02:55.250 --> 00:03:03.980
So the operating system allocates one new brand virtual page to the Mallott function, which is implemented

35
00:03:03.980 --> 00:03:04.330
in G.

36
00:03:04.370 --> 00:03:13.640
Lipsey Library and Mallott function, which is implemented in Jilib celebrity will assign only a portion

37
00:03:13.640 --> 00:03:20.490
of the virtual memory of this virtual page to a process B as part of my request.

38
00:03:21.050 --> 00:03:24.260
So you can see this is the entire picture in totality.

39
00:03:25.160 --> 00:03:31.280
All operating system knows that it has assigned one full virtual page to A Process B.

40
00:03:32.960 --> 00:03:40.280
It doesn't know that Lipsey is actually assigning only a chunk of memory from the virtual page to a

41
00:03:40.280 --> 00:03:47.450
process B, so the Marlock function, which is implemented in Jilib celebrity, acts as a middleman

42
00:03:47.450 --> 00:03:50.060
between operating system and a process B.

43
00:03:51.230 --> 00:03:58.250
So now going forward, I suppose the process, again, issues on the request of 200 bytes.

44
00:03:59.630 --> 00:04:05.510
Now you can see that multi-function function already has a virtual page and this virtual page still

45
00:04:05.510 --> 00:04:08.720
has some virtual memory to be used by the process.

46
00:04:09.200 --> 00:04:16.459
So the Madlock function will use the same virtual page and assign to one hundred plus MBBS bytes of

47
00:04:16.459 --> 00:04:20.750
memory to a process from the cast virtual page.

48
00:04:21.920 --> 00:04:29.210
And now this time, Malot function do not invoke any spark a system call and do not even disturb operating

49
00:04:29.210 --> 00:04:29.690
system.

50
00:04:30.350 --> 00:04:35.000
In fact, the operating system do not know about this mallock call.

51
00:04:36.110 --> 00:04:37.250
By a process.

52
00:04:39.210 --> 00:04:46.500
So now the question is that, right, this apparition came by malac, the simple reason is that to minimize

53
00:04:46.500 --> 00:04:48.960
the number of system call in location.

54
00:04:49.290 --> 00:04:52.310
So Sparkie is a system called right.

55
00:04:52.560 --> 00:04:59.490
And we know that in location of system calls are expensive because the force, the process to preempt

56
00:04:59.490 --> 00:05:04.470
their normal execution and switch from user mode to prevalent mode.

57
00:05:05.100 --> 00:05:09.630
So SBIR is one such system call and it is an expensive call.

58
00:05:10.110 --> 00:05:17.130
So Mellark does this caching of virtual page so as to minimize the number of system calls in vacation

59
00:05:17.340 --> 00:05:20.350
for every memory request by a process.

60
00:05:21.360 --> 00:05:25.140
Suppose the Madlock do not do this caching of virtual page.

61
00:05:25.440 --> 00:05:34.160
Then for every Mallak request that is issued by the process, you would have been end up calling SB

62
00:05:34.170 --> 00:05:39.700
Archey call again and again disturbing the operating system every time.

63
00:05:40.650 --> 00:05:46.710
So this would have impact the performance of a process which are mammone intensive.

