WEBVTT
1
00:00:05.320 --> 00:00:12.490
Suppose Texas Standards provides for basic APIs to monopoly timers on Unix compliance platforms, our

2
00:00:12.490 --> 00:00:16.020
operating system, the first API is to create a timer.

3
00:00:16.030 --> 00:00:19.750
This API does nothing but simply create a timer data structure.

4
00:00:20.140 --> 00:00:27.410
It do not run or fire or trigger the timer or simply create a data structure called timer thrip.

5
00:00:29.340 --> 00:00:35.330
The second actually is used to start and stop the timer, depending on the argument pass to disappear

6
00:00:35.330 --> 00:00:41.790
API, the third API returns the time that is remaining for the timer to fire, and the fourth API is

7
00:00:41.790 --> 00:00:44.790
simply to delete the timer when you are done with the timer.

8
00:00:45.180 --> 00:00:51.230
So you can see that these four APIs are not simple and straightforward and is quite intuitive.

9
00:00:51.780 --> 00:00:57.540
We will use these four APIs as building blocks to build our own custom timer library.

10
00:00:58.030 --> 00:01:03.490
We will going to discuss how to use each of these four APIs in detail in the upcoming lecture videos.

11
00:01:03.930 --> 00:01:09.780
So before going forward, let us get ourselves familiar with some terminology so that we do not confuse

12
00:01:09.780 --> 00:01:11.330
ourselves in our discussion.

13
00:01:12.030 --> 00:01:19.260
So terminologies means what does it mean when I start the timer alarm, the timer fires the timer or

14
00:01:19.260 --> 00:01:20.550
expires the timer?

15
00:01:21.150 --> 00:01:27.390
So suppose your application wants to send a network packet after 10 seconds from now, right?

16
00:01:27.780 --> 00:01:29.460
So at time T is equal to zero.

17
00:01:29.460 --> 00:01:34.370
Your application create timer data structure and actually start the timer.

18
00:01:34.800 --> 00:01:39.180
So we say that we have started the timer or we have alarm the timer.

19
00:01:39.420 --> 00:01:39.870
Right.

20
00:01:40.530 --> 00:01:48.240
And when the ten seconds have elapsed then we see that the timer has fired or the timer has expired

21
00:01:48.510 --> 00:01:51.690
and our application will send out the network packet.

22
00:01:51.840 --> 00:01:52.290
Right.

23
00:01:53.570 --> 00:02:00.050
So not this time, starting the timer or allowing the timer means we have started the countdown of the

24
00:02:00.050 --> 00:02:06.590
timer and when we say fire the timer or expire the timer, then we literally means that the timer has

25
00:02:06.590 --> 00:02:09.620
performed the action, which it is supposed to perform.

