WEBVTT
1
00:00:06.700 --> 00:00:11.350
So, guys, now finally, we will going to discuss the last stage of the competition process, which

2
00:00:11.350 --> 00:00:18.220
is called the linking stage, the input to the linking stage is a set of object files, which is produced

3
00:00:18.220 --> 00:00:19.210
by the assembler.

4
00:00:20.460 --> 00:00:26.580
Now, note that the object files, which is produced by the assembler, are unlinked object files.

5
00:00:28.320 --> 00:00:33.630
So in this case, test dot all is an object file, which is produced by the assembler.

6
00:00:33.930 --> 00:00:37.800
And this does or object file is an unlinked object file.

7
00:00:38.760 --> 00:00:46.380
UNlinked object file means that this object file do not have any access to external global variables

8
00:00:46.740 --> 00:00:50.760
or functions which are present in other object files.

9
00:00:51.330 --> 00:00:53.250
Consider this simple example.

10
00:00:53.460 --> 00:01:01.410
You have castrato object file and in this object file you are invoking the external function for this

11
00:01:01.410 --> 00:01:02.280
external function.

12
00:01:02.280 --> 00:01:05.300
Full is present in other object file.

13
00:01:05.340 --> 00:01:12.200
That is, you can see in food court or sorry, this is food court or sorry, this file is filled out

14
00:01:12.210 --> 00:01:18.730
or so in this object file you can see that there is a function implementation of the function form.

15
00:01:19.080 --> 00:01:23.820
So this function full is an external function with the spot to test or object file.

16
00:01:24.180 --> 00:01:29.100
And you can see intestate or object file there is an invocation of an external function.

17
00:01:29.430 --> 00:01:36.360
Not only that, there is an access to the external global variable which is defined in external object

18
00:01:36.360 --> 00:01:37.490
file footrot.

19
00:01:37.500 --> 00:01:38.700
All right.

20
00:01:40.600 --> 00:01:47.800
So when you compile test C file, it will going to create test or object file, but this test or object

21
00:01:47.800 --> 00:01:54.370
file doesn't know how to invoke the external function or how to access the external global variables.

22
00:01:55.220 --> 00:02:00.640
When I say external, it means the function or global variables which are present in some other object

23
00:02:00.640 --> 00:02:01.030
file.

24
00:02:01.840 --> 00:02:07.210
So without linking test at all, would not know how to invoke external functions such as food.

25
00:02:07.570 --> 00:02:07.960
Right.

26
00:02:08.229 --> 00:02:14.830
And not only that, without linking test or object file cannot even access the external global variable

27
00:02:14.830 --> 00:02:16.440
which is defined somewhere else.

28
00:02:17.170 --> 00:02:23.620
So linking is all about providing and access to external functions and global variables to the object

29
00:02:23.620 --> 00:02:25.090
file which is being linked.

30
00:02:25.720 --> 00:02:31.600
So if so, during the linking process, we will going to link the test struct or object file with food

31
00:02:31.610 --> 00:02:32.930
or object file.

32
00:02:33.940 --> 00:02:40.990
So that does not or object file would know how to invoke the external function or how to access that

33
00:02:40.990 --> 00:02:42.310
external global variable.

34
00:02:42.910 --> 00:02:46.870
So in the linker stage we create an executable.

35
00:02:47.080 --> 00:02:50.560
The final product of the linker is the final executable.

36
00:02:50.740 --> 00:02:51.160
Right.

37
00:02:51.460 --> 00:02:56.470
And because the execution of the executable, it starts from the mean.

38
00:02:56.740 --> 00:03:01.240
Therefore, exactly one object file must have a main function.

39
00:03:01.630 --> 00:03:05.260
Unless the object file doesn't have a main function.

40
00:03:05.560 --> 00:03:07.360
You cannot do linking.

41
00:03:08.620 --> 00:03:10.960
And you can see that in the linker stage.

42
00:03:10.960 --> 00:03:17.310
All the external libraries which distort or object file needs are also included in the linker.

43
00:03:18.070 --> 00:03:23.500
As I said, your test or object file can invoke functions which are present somewhere else.

44
00:03:23.500 --> 00:03:25.800
That is in some other external libraries.

45
00:03:26.290 --> 00:03:26.590
Right.

46
00:03:26.920 --> 00:03:34.180
So Linko is a process to fill up the gaps in the object files and filling up those gaps is nothing but

47
00:03:34.360 --> 00:03:40.200
telling the object file how to invoke the external functions or external global variables.

48
00:03:40.450 --> 00:03:46.960
So the final output of the linker stage is a final executable which can execute on your machine.

49
00:03:49.300 --> 00:03:54.850
So continuing with our example, on the left hand side, we have a test or object file which is produced

50
00:03:54.850 --> 00:04:02.260
by the assembler and on the right hand side, using GCSE compiler, we can now create an executable

51
00:04:02.260 --> 00:04:08.170
call test or to exceed because in our test program there is already a main function.

52
00:04:08.390 --> 00:04:10.840
Therefore we can create an executable.

53
00:04:11.170 --> 00:04:13.140
Now our example is simple.

54
00:04:13.360 --> 00:04:18.000
There is no access to any external function or global variable.

55
00:04:18.279 --> 00:04:22.029
Therefore, linking with the external library is not required.

56
00:04:22.930 --> 00:04:29.380
So once I trigger this command, you can see that we will end up with creating an executable, which

57
00:04:29.380 --> 00:04:30.670
is to start EXI.

58
00:04:31.060 --> 00:04:38.110
Now as I said earlier, that executables and all object files are produced in YALLAH format.

59
00:04:38.830 --> 00:04:47.340
So using Obejas Dump Command, we can analyze the contents of the executable file also.

60
00:04:47.680 --> 00:04:50.290
So let us redirect the output in time.

61
00:04:50.290 --> 00:04:57.150
And if we see the content of the time, you can see that executable format is also in ELR format.

62
00:04:57.790 --> 00:05:03.910
Thus the content of the executable is also organized in terms of sections.

63
00:05:05.080 --> 00:05:10.230
So you can see that the most remote sections that we are aware of is the data section.

64
00:05:10.960 --> 00:05:16.770
So you can see that this is the data section followed by BSR section.

65
00:05:16.930 --> 00:05:17.320
Right.

66
00:05:17.340 --> 00:05:23.540
So when you study program control block, we study that there are sections called Initialised or Unanalyzed

67
00:05:23.680 --> 00:05:24.250
a segment.

68
00:05:24.490 --> 00:05:26.490
And then there is a B as a segment.

69
00:05:26.590 --> 00:05:26.980
Right.

70
00:05:28.270 --> 00:05:35.830
And also, there is a tax section where all the program machine code is present, so you can see there

71
00:05:35.830 --> 00:05:42.450
is a tax section in this executable file and this Astarte represent the start of the main function.

72
00:05:42.730 --> 00:05:45.400
And this is a machine code for the main function.

73
00:05:45.880 --> 00:05:52.210
And you can see if you move down, you can find the machine code of your functions, which is compute

74
00:05:52.210 --> 00:05:54.170
square or compute circulating.

75
00:05:54.490 --> 00:05:54.880
Right.

76
00:05:55.060 --> 00:05:58.570
So we are in the section called text segment.

77
00:05:59.520 --> 00:06:04.100
So in the executable, you can see the text section, data section and, yes, a section.

78
00:06:05.370 --> 00:06:11.460
So guys, with this we have completed all the four stages of the completion process of a C program.

