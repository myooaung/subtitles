WEBVTT
1
00:00:05.670 --> 00:00:06.820
So welcome back, guys.

2
00:00:06.850 --> 00:00:13.920
Now, let us start with the concept of demand, Beijing, so let us consider a following scenario on

3
00:00:13.920 --> 00:00:15.060
a 32 bit system.

4
00:00:15.060 --> 00:00:21.540
Let us suppose that we have a pet size of four bites and let us suppose that the main memory size is

5
00:00:21.540 --> 00:00:22.650
four gigabytes.

6
00:00:24.240 --> 00:00:32.670
So maximum number of physical pages for each process would be equal to the size of the process, which

7
00:00:32.670 --> 00:00:35.070
led to a space divided by its size.

8
00:00:35.820 --> 00:00:41.820
So the total maximum number of physical pages that the process may create will be to restore the power

9
00:00:41.820 --> 00:00:42.390
of 20.

10
00:00:43.140 --> 00:00:49.290
Now we know that main memory is divided into frames of size equal to the size.

11
00:00:50.190 --> 00:00:56.250
So total number of frames in the main memory will be equal to the size of the main memory divided by

12
00:00:56.400 --> 00:01:01.620
its size and therefore total number of frames in the main memory will be tourists with about 20.

13
00:01:02.370 --> 00:01:10.320
So now with this data, you can see that in the worst case, only one process would eat up the entire

14
00:01:10.560 --> 00:01:11.130
memory.

15
00:01:12.150 --> 00:01:20.040
Right, if you just read all the physical page of one process into to restore the power 20 frames,

16
00:01:20.310 --> 00:01:25.230
you can see that the entire physical memory can be used up by just one process.

17
00:01:26.130 --> 00:01:31.170
So if this happens, it is clear that there will be more multitasking.

18
00:01:31.920 --> 00:01:37.620
In fact, operating system itself need some portion of the brain memory to run.

19
00:01:37.980 --> 00:01:38.480
Right.

20
00:01:39.390 --> 00:01:45.990
So you can see that for the process to execute, it is not feasible to load all the physical pages of

21
00:01:45.990 --> 00:01:47.720
a process into main memory.

22
00:01:48.990 --> 00:01:56.460
So not loading all the physical pages of a process into the main memory is achieved by the concept called

23
00:01:56.460 --> 00:01:57.450
demand paging.

24
00:01:57.990 --> 00:02:04.140
So now let's dive deep into the concept of divine paging and understand what actually it is.

25
00:02:05.370 --> 00:02:12.990
So going forward, so demand Beijing objective is that keep only required physical evidence of a process

26
00:02:12.990 --> 00:02:21.090
in memory and swap out the rest of the pages of a process to a secondary story such as disc.

27
00:02:22.460 --> 00:02:29.870
So this is the overall objective or goal of time unpegging, so what are the benefits of the unpegging?

28
00:02:30.620 --> 00:02:37.670
There will be increases in the multitasking because you can keep relevant physical pages that belong

29
00:02:37.670 --> 00:02:42.680
to multiple processes running on the system in different frames of the main memory.

30
00:02:42.680 --> 00:02:50.540
At the same time, there will be less memory consumed by process because you are really not reading

31
00:02:50.750 --> 00:02:54.440
unnecessary physical pages of a process in the main memory.

32
00:02:55.640 --> 00:03:00.110
And the machine can support more number of processes or users.

33
00:03:01.100 --> 00:03:07.940
So in order to implement the concept of the mind Beijing, we need to introduce an additional information

34
00:03:07.940 --> 00:03:09.050
in a page table.

35
00:03:10.580 --> 00:03:18.770
This additional information is called valid and valid bit so invalid, but in a peace table is a bit

36
00:03:18.980 --> 00:03:26.930
which represents whether a physical page is present in a frame or has been swept out of physical memory

37
00:03:27.170 --> 00:03:28.120
to a desk.

38
00:03:28.580 --> 00:03:36.920
So if it is set, it means that physical page is present in a frame and if it is not set, it means

39
00:03:36.920 --> 00:03:39.830
that physical page is not present in the frame.

40
00:03:41.210 --> 00:03:46.760
So you can see, for example, you have a virtual page number three, which maps to the physical page

41
00:03:46.760 --> 00:03:47.630
number three.

42
00:03:47.900 --> 00:03:53.530
And you can see that valid invalid bit for this entry is zero.

43
00:03:54.380 --> 00:03:59.750
It means that for this physical page, the valid invalid bit is not set.

44
00:04:00.260 --> 00:04:03.020
It means that this frame number has no meaning.

45
00:04:03.260 --> 00:04:10.430
And we are sure that this page number has been scrubbed out of physical memory and is present on the

46
00:04:10.430 --> 00:04:11.000
desk.

47
00:04:11.600 --> 00:04:12.000
Right.

48
00:04:12.410 --> 00:04:19.339
So valid, invalid status represents that whether a physical page is present in a main memory or it

49
00:04:19.339 --> 00:04:20.769
is present on the desk.

