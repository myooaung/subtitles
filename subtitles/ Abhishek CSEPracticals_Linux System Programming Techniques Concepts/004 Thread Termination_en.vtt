WEBVTT
1
00:00:05.100 --> 00:00:12.450
So, guys, going forward now, coming to the last section of this topic, that that how does the virtual

2
00:00:12.450 --> 00:00:19.740
memory and peace table of a given process be is managed when thread dominates its execution?

3
00:00:20.400 --> 00:00:26.430
So you can see the diagram on the right hand side represents the virtual memory of A process B and the

4
00:00:26.430 --> 00:00:31.530
peace table of A process B, when the process B has created a new threat.

5
00:00:33.240 --> 00:00:36.850
Now, suppose the same new threat dominates its execution.

6
00:00:37.410 --> 00:00:38.420
So what happens?

7
00:00:38.700 --> 00:00:45.210
The very first thing that happens is that that the virtual pages, which corresponds to the stack memory

8
00:00:45.210 --> 00:00:47.100
of a thread, are freed.

9
00:00:47.910 --> 00:00:55.050
So you can see that virtual page, no petrol and virtual page number 13 are the virtual pages, which

10
00:00:55.050 --> 00:00:57.660
represents the stacked memory of a threat.

11
00:00:58.260 --> 00:01:03.750
So these two virtual pages will be freed, already allocated by the operating system.

12
00:01:04.319 --> 00:01:04.760
Right.

13
00:01:06.240 --> 00:01:13.200
Only physical pages, which corresponds to the stack mummery are freed now since the virtual pages be

14
00:01:13.210 --> 00:01:17.310
12 and 13 have been freed by the operating system.

15
00:01:17.730 --> 00:01:26.250
Obviously, the physical pages to which the virtual page, number 12 and 13 mapped walls will also be

16
00:01:26.250 --> 00:01:28.100
freed by the operating system.

17
00:01:28.620 --> 00:01:35.580
So the frame number in which the physical piece, number 12 and 13 were loaded will also be freed.

18
00:01:35.580 --> 00:01:43.230
And those frames of physical memory will be used to load physical pages that belongs to some other process

19
00:01:43.230 --> 00:01:43.980
or threat.

20
00:01:44.860 --> 00:01:52.050
Speech table is updated to Mark Bestival entries corresponding to virtual pages which are freed up so

21
00:01:52.260 --> 00:01:53.250
as empty.

22
00:01:53.580 --> 00:01:53.970
Right.

23
00:01:54.210 --> 00:02:00.810
So you can see that this base table will be updated so that the entries corresponding to virtual page

24
00:02:00.810 --> 00:02:09.750
number 12 and 13 will be marked as empty because these virtual pages are no more assigned to a process

25
00:02:09.750 --> 00:02:10.650
to be used.

26
00:02:11.310 --> 00:02:19.140
So this is how operating system clean up the virtual memory as well as update the page table of a process

27
00:02:19.320 --> 00:02:21.480
when a thread terminates.

