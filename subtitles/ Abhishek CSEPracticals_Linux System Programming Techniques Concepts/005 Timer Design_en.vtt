WEBVTT
1
00:00:06.880 --> 00:00:12.640
So, guys, now let us try to understand how timer works, that is how operating system implements the

2
00:00:12.640 --> 00:00:13.860
concept of timers.

3
00:00:14.590 --> 00:00:19.930
So Timer works in the context of separate code flow, which could be a separate thread or a separate

4
00:00:19.930 --> 00:00:21.010
process altogether.

5
00:00:21.460 --> 00:00:24.680
So now just try to understand this with the help of this diagram.

6
00:00:25.060 --> 00:00:28.930
Suppose you have written some application B which is running on your machine.

7
00:00:30.710 --> 00:00:36.710
In this application, you have some function fule, which accept some argument, right, and dysfunction

8
00:00:36.710 --> 00:00:43.630
to some piece of work mainly presumes your actual application, which is running and executing its logic.

9
00:00:43.850 --> 00:00:44.280
Right.

10
00:00:44.870 --> 00:00:50.820
Suppose at some point of time here your application launches a new timer.

11
00:00:51.170 --> 00:00:51.570
Right.

12
00:00:51.920 --> 00:00:58.370
So let us suppose that new time, a launch is some hypothetical API with your application uses in order

13
00:00:58.370 --> 00:01:00.100
to start a new timer.

14
00:01:00.420 --> 00:01:00.860
Right.

15
00:01:02.660 --> 00:01:10.070
Now, note that your application starts a timer because your application wants to do some unit of work

16
00:01:10.070 --> 00:01:12.200
when the timer expires, right.

17
00:01:13.190 --> 00:01:22.190
That unit of work, which is done as a result of timer expiration, is represented by this function

18
00:01:22.190 --> 00:01:22.560
for.

19
00:01:22.880 --> 00:01:23.330
Right.

20
00:01:24.500 --> 00:01:30.620
So whenever we create a timer, one of the mandatory argument that we need to pass is the function pointer.

21
00:01:31.010 --> 00:01:37.760
This function pointer represents a function which will be executed when your timer expires.

22
00:01:38.000 --> 00:01:38.390
Right.

23
00:01:38.700 --> 00:01:44.090
And it is obvious that if you are invoking the function, then you need to pass some argument to this

24
00:01:44.090 --> 00:01:44.520
function.

25
00:01:45.200 --> 00:01:48.840
So for each timer, you have to pause at least two things.

26
00:01:49.130 --> 00:01:54.560
The first is the unit of work which the timer will execute when it fires.

27
00:01:55.160 --> 00:01:58.490
That unit of work is represented by this function foo.

28
00:01:58.760 --> 00:02:05.630
And the second argument is the argument, which will be parsed as an argument to this function for right.

29
00:02:07.400 --> 00:02:15.110
So as soon as this API is invoked, your process P would continue to execute the subsequent lines of

30
00:02:15.110 --> 00:02:21.680
code, whereas your operating system will fork out a new thread at this line of code.

31
00:02:22.070 --> 00:02:22.520
Right.

32
00:02:22.670 --> 00:02:28.040
And it will create a separate code flow in the form of a new thread T1.

33
00:02:28.310 --> 00:02:28.730
Right.

34
00:02:29.330 --> 00:02:35.600
So this block represents a new thread, Daewon, all together, which is created by the parent process

35
00:02:35.600 --> 00:02:35.960
B.

36
00:02:37.940 --> 00:02:43.760
Now, let us suppose that this API created a trad. with expiration time equal to five seconds.

37
00:02:44.400 --> 00:02:51.530
So as soon as the process we had forked out this thread, right, in order to create a timer, this

38
00:02:51.530 --> 00:02:55.760
thread will not execute and it will stay blocked.

39
00:02:56.210 --> 00:02:56.680
Right.

40
00:02:57.790 --> 00:03:04.630
The operating system will keep this thread in the blog to state, whereas are Process B can execute

41
00:03:04.630 --> 00:03:09.440
whatever it wants after the API new time Alonzo has returned.

42
00:03:10.660 --> 00:03:12.510
This is how thread -- works, right?

43
00:03:12.520 --> 00:03:15.370
Your parent process continues its execution flow.

44
00:03:17.040 --> 00:03:25.770
Now, since the expiration time of this timer was set to five seconds, it means that after only five

45
00:03:25.770 --> 00:03:34.680
seconds has elapsed, the operating system will then invoke a function fool with the argument energy,

46
00:03:34.680 --> 00:03:41.550
which was specified here right now, function fuq and execute whatever logic it had.

47
00:03:42.390 --> 00:03:44.820
So you can see this is how timer works.

48
00:03:45.090 --> 00:03:51.150
The function fully represents the unit of work, which we need to do when the timer fires.

49
00:03:51.420 --> 00:03:51.890
Right.

50
00:03:52.380 --> 00:03:59.370
So the function will be triggered only after five seconds has elapsed after the API new timer launch

51
00:03:59.370 --> 00:04:00.240
was invoked.

52
00:04:01.230 --> 00:04:07.560
So when Fool has completed its execution in the context of the timer, Trad. timer is turned off.

53
00:04:08.810 --> 00:04:13.780
When I say that the timer is turned off, it means that the timer triad is killed by the colonel or

54
00:04:13.790 --> 00:04:14.680
operating system.

55
00:04:15.260 --> 00:04:22.250
So as soon as this function completes its execution and returns, the timer traps, T1 is automatically

56
00:04:22.250 --> 00:04:28.190
killed by the colonel or operating system because the unit of work which was supposed to be done by

57
00:04:28.190 --> 00:04:29.840
the timer, has completed.

58
00:04:32.570 --> 00:04:39.270
Application B, that is the process B should free all the resources that were occupied by Taimur in

59
00:04:39.280 --> 00:04:41.670
the end of a full function only.

60
00:04:41.930 --> 00:04:50.000
Right now it might be possible that in order to prepare this argument, your application must have Marlock

61
00:04:50.000 --> 00:04:51.230
certain data structures.

62
00:04:51.740 --> 00:04:52.190
Right.

63
00:04:52.340 --> 00:04:58.430
And those data structures were passed as an argument to this dimer function fool.

64
00:04:58.730 --> 00:04:59.180
Right.

65
00:04:59.600 --> 00:05:05.600
So it is your responsibility to free these data structures at the end of this function, right?

66
00:05:06.260 --> 00:05:11.490
Just before the timer function has completed its work, it should free all the resources.

67
00:05:12.200 --> 00:05:14.840
Don't worry, we will going to implement all this logic.

68
00:05:14.840 --> 00:05:18.100
And I will show you with the help of an example how to do that.

69
00:05:18.980 --> 00:05:23.840
So the function fule in technical term is called a timer callback.

70
00:05:24.410 --> 00:05:30.830
The mechanics that we discussed here regarding how timers are implemented by the operating system applies

71
00:05:30.830 --> 00:05:32.060
to all types of Taimur.

72
00:05:32.060 --> 00:05:33.260
That is one short timer.

73
00:05:33.260 --> 00:05:35.900
Periodic timer are exponential backoff timer.

74
00:05:37.530 --> 00:05:44.790
In case of one short timer, once the function fully completes its execution, the kernel or operating

75
00:05:44.790 --> 00:05:47.330
system kills the 31 right.

76
00:05:47.850 --> 00:05:53.410
Whereas in case of periodic timer, once the function fully completes its execution.

77
00:05:54.390 --> 00:05:58.350
The operating system puts the 381 in the block to state again.

78
00:05:58.890 --> 00:05:59.340
Right.

79
00:05:59.610 --> 00:06:02.160
And after again, five seconds has elapsed.

80
00:06:02.400 --> 00:06:07.190
Then again, the function is called and the cycle repeats for forever.

81
00:06:08.940 --> 00:06:17.250
And in case of exponential backoff, timer, once the function foo has completed its execution, the

82
00:06:17.250 --> 00:06:21.840
operating system again put the timer 381 in the block to state, right.

83
00:06:23.240 --> 00:06:29.930
But instead of now waiting for five seconds, we will wait for 10 seconds, right, and only after 10

84
00:06:29.930 --> 00:06:36.440
seconds has elapsed, then only the timer callback is invoked again when the timer callback finishes

85
00:06:36.440 --> 00:06:37.470
its execution.

86
00:06:37.670 --> 00:06:44.980
The operating system will put the timer T1 in the blocked state again, and this time it will wait for

87
00:06:44.990 --> 00:06:45.350
time.

88
00:06:45.350 --> 00:06:47.620
T is equal to 20 seconds, right?

89
00:06:48.080 --> 00:06:51.970
So every time the waiting timer will be doubled of the previous time.

90
00:06:53.000 --> 00:06:58.430
So you can see that the fundamentals for implementing Munchak periodic and exponential backoff timer

91
00:06:58.430 --> 00:06:59.480
are no different.

