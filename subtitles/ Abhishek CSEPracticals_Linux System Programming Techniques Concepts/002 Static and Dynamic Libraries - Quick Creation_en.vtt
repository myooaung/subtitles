WEBVTT
1
00:00:05.710 --> 00:00:12.650
So welcome back, guys, in this module, we will going to create library files for Linux platform.

2
00:00:13.210 --> 00:00:19.940
Until now, you had your double-dealing list library, which consisted of source files and header files.

3
00:00:21.580 --> 00:00:27.700
So in this module, what we will going to learn is that we will going to create one single file and

4
00:00:27.700 --> 00:00:30.520
we call that single file as a library file.

5
00:00:30.910 --> 00:00:36.880
So that particular file is actually the collection of all the compiled source file, which are part

6
00:00:36.880 --> 00:00:37.660
of library.

7
00:00:38.590 --> 00:00:46.030
So C and C++ source files, which represent library, can be compiled to form two flavors of library

8
00:00:46.030 --> 00:00:47.290
for Linux platform.

9
00:00:48.310 --> 00:00:54.820
Libraries are a collection of compiled object files, so remember, libraries are nothing, but these

10
00:00:54.820 --> 00:00:59.910
are just a collection of compiled object files of the corresponding source files.

11
00:01:00.610 --> 00:01:08.170
So Linux, C or C plus libraries can be broadly classified into two categories Astatke libraries and

12
00:01:08.170 --> 00:01:09.370
dynamic libraries.

13
00:01:10.090 --> 00:01:17.850
Static libraries usually have an extension of DOT A, whereas Dynamic Libraries has an extension Dartez

14
00:01:17.860 --> 00:01:21.070
or Sadaat Assoc. times for shared object.

15
00:01:21.790 --> 00:01:27.850
So in this module, we will going to learn the process of creation of two types of libraries that is

16
00:01:27.850 --> 00:01:29.680
static and dynamic libraries.

17
00:01:29.860 --> 00:01:36.010
And we will also discuss that, how these two libraries internally work and what is the difference between

18
00:01:36.010 --> 00:01:37.510
these two types of libraries?

19
00:01:39.680 --> 00:01:48.380
So going forward, so let us discuss the steps regarding how to create static libraries so your library

20
00:01:48.380 --> 00:01:53.920
by now should have to source file, that is JLL Dorsey and Util Dorsey.

21
00:01:54.470 --> 00:01:54.850
Right.

22
00:01:55.550 --> 00:02:01.820
So in order to create a static library, the first step that you need to do is to compile the source

23
00:02:01.820 --> 00:02:08.060
file to create the corresponding object files so that this is see command of the compiler command to

24
00:02:08.060 --> 00:02:12.590
create object files out of the source files are the following.

25
00:02:13.520 --> 00:02:13.910
Right.

26
00:02:15.450 --> 00:02:20.940
So when you execute these two commands on your Linux terminal, you will end up with the two object

27
00:02:20.940 --> 00:02:28.740
files that is developed at all and they'll underscore you that, all right, now you have all the object

28
00:02:28.740 --> 00:02:33.690
files, which actually represents the complete list library.

29
00:02:34.200 --> 00:02:39.840
Now, the next step that you need to do is to bundle all the object files together in order to create

30
00:02:39.840 --> 00:02:42.930
one single file, which is called library file.

31
00:02:43.200 --> 00:02:47.270
So in this case, the name of the library is labial today.

32
00:02:48.900 --> 00:02:55.080
So not that in C or C++, you need to follow the conventions in naming the library, the name of the

33
00:02:55.080 --> 00:03:00.870
library should start with Leyb, followed by library name and followed by the extension.

34
00:03:03.180 --> 00:03:10.650
So this is the conventions that you need to follow in order to create C or C++ libraries so you can

35
00:03:10.650 --> 00:03:14.420
see that the name of our library follows this convention.

36
00:03:15.210 --> 00:03:20.820
And since this library has an extension today, therefore we are creating a static library.

37
00:03:21.450 --> 00:03:21.790
Right.

38
00:03:22.050 --> 00:03:28.350
So once you have all the object files together, the come on to create a static library by bundling

39
00:03:28.350 --> 00:03:30.010
all the object files together.

40
00:03:30.030 --> 00:03:30.810
Is this following?

41
00:03:30.810 --> 00:03:31.260
Come on.

42
00:03:31.920 --> 00:03:38.200
So on your terminal, run this command and you will get the final static library file called Liberty

43
00:03:38.250 --> 00:03:39.170
Island today.

44
00:03:40.020 --> 00:03:46.200
So the syntax of this command is that you need to run archive command, followed by Orris is the flag

45
00:03:46.740 --> 00:03:52.980
followed by the name of the library that you are creating and followed by the list of object files which

46
00:03:52.980 --> 00:03:56.820
needs to be bundled together in order to create this static library.

47
00:03:57.600 --> 00:04:01.580
So let me show you a quick demonstration regarding creating a static library.

48
00:04:01.830 --> 00:04:10.800
You can see in the terminal I have the C file and underscore you see a file, so I will create the object

49
00:04:10.800 --> 00:04:12.590
files out of the source file.

50
00:04:13.020 --> 00:04:17.459
So C minus C, C minus O.

51
00:04:19.100 --> 00:04:20.920
So I've created an object file.

52
00:04:21.269 --> 00:04:26.250
Similarly, I will compile the underscore util dot c.

53
00:04:27.680 --> 00:04:31.210
To create an object file that is under school util dot.

54
00:04:31.220 --> 00:04:35.710
All right, so you can see that I have created the object files.

55
00:04:37.140 --> 00:04:42.610
Right, and now I just have to run this command in order to create a static library.

56
00:04:43.050 --> 00:04:47.640
So come on, there's a R R as the name of the library.

57
00:04:49.090 --> 00:04:53.500
Followed by all the object files, which needs to be packaged as library.

58
00:04:56.550 --> 00:05:02.010
So you can see that this come on outwards, that the library has been created so that us see.

59
00:05:03.100 --> 00:05:11.410
So we have this liability file created, right, so so you can see that how easy it is to create a static

60
00:05:11.410 --> 00:05:13.570
liability in C or C++.

61
00:05:14.140 --> 00:05:16.960
Now let us see how to create a dynamic library.

62
00:05:17.500 --> 00:05:23.590
The steps of creating dynamic library is not very different from the steps of creating static liability.

63
00:05:24.070 --> 00:05:30.310
So in case of dynamic library, you again have to source file that is jealousy and will allow you to

64
00:05:30.580 --> 00:05:30.930
see.

65
00:05:31.450 --> 00:05:35.390
So out of these source file, definitely you will going to create an object file.

66
00:05:35.890 --> 00:05:42.160
So the only difference that you are seeing here is that you need to provide an additional flag in order

67
00:05:42.160 --> 00:05:43.660
to create an object files.

68
00:05:44.080 --> 00:05:50.860
This additional flag is called minus SBIC here, Pakistan's SWAT position, independent code.

69
00:05:53.260 --> 00:05:57.640
So once you run these commands in the terminal, you will have the object files.

70
00:05:57.970 --> 00:06:03.670
Now you need to bundle all these object files together in order to create the final library, which

71
00:06:03.670 --> 00:06:06.220
is libidinal dark soul here.

72
00:06:06.220 --> 00:06:08.560
Also, you need to follow the same naming conventions.

73
00:06:09.480 --> 00:06:15.420
Now, once you have the object file together in order to create a final dynamic library, you need to

74
00:06:15.420 --> 00:06:16.620
run the following command.

75
00:06:18.530 --> 00:06:23.750
That is Dixie, which is the compiler that the name of the object files, which needs to be bundled

76
00:06:23.750 --> 00:06:24.330
together.

77
00:06:24.530 --> 00:06:30.140
And since you are creating a dynamic library, therefore you need to specify the flag minus mindshare

78
00:06:30.590 --> 00:06:32.480
and using minus or switched.

79
00:06:32.480 --> 00:06:38.090
You are actually specifying the name of the dynamic library that you want to create.

80
00:06:38.480 --> 00:06:43.120
So now let me show you a quick demonstration regarding how to create a dynamic library.

81
00:06:46.100 --> 00:06:51.010
So in the same directory, let me delete all the object files, which we created earlier.

82
00:06:54.380 --> 00:06:59.800
And let me delete the static library, which we had created.

83
00:07:00.180 --> 00:07:04.100
Now we were going to create the dynamic library from the source file.

84
00:07:04.940 --> 00:07:14.390
So the command is G, C, C, minus C, minus FPI, C, D, C minus or JLL dot all.

85
00:07:16.780 --> 00:07:17.180
Right.

86
00:07:17.200 --> 00:07:24.880
So the object file that is delayed or is created similarly, if you will create another object file.

87
00:07:30.210 --> 00:07:34.850
Diesel, you to see minus all the land you turned out all.

88
00:07:36.180 --> 00:07:42.480
So we have created what the object finds that is not OK and underscore util dot o.

89
00:07:43.640 --> 00:07:51.720
Now, I will run the third command in order to create a final shared library, so that is DCC, the

90
00:07:51.770 --> 00:07:52.790
little DOT or.

91
00:07:54.160 --> 00:07:56.140
Jalal util or.

92
00:07:57.200 --> 00:08:05.930
Miners, shared miners all and live together taught us all so you can see that the shared liability

93
00:08:05.930 --> 00:08:07.400
file has been created.

94
00:08:08.210 --> 00:08:14.060
So you can see that it is really very easy to create a shared liability or a strict liability for C

95
00:08:14.060 --> 00:08:15.080
or C++.

96
00:08:15.650 --> 00:08:22.820
So one thing to note here is that you need to specify a special flag goldminers, FDIC in order to create

97
00:08:22.820 --> 00:08:27.380
object files, which needs to be bundled together to create a final shared library.

98
00:08:28.280 --> 00:08:32.000
This is a special flag is actually called position independent code.

99
00:08:32.299 --> 00:08:36.230
And the details of this flag is actually out of the context of discourse.

100
00:08:37.169 --> 00:08:43.049
So just remember the name of this flag and there is no need to go into the inner technicalities behind

101
00:08:43.049 --> 00:08:50.010
this flag because you need to know how assembly code works in order to understand how does this flag

102
00:08:50.010 --> 00:08:50.520
works.

