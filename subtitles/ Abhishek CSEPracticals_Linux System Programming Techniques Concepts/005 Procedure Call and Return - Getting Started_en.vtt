WEBVTT
1
00:00:05.180 --> 00:00:06.470
So welcome back, guys.

2
00:00:06.800 --> 00:00:12.410
Now, next, we will going to discuss in detail the mechanism behind procedure, call and return.

3
00:00:13.220 --> 00:00:20.480
So let us understand that whole function call is implemented in Linux operating system using STAC memory

4
00:00:20.480 --> 00:00:21.170
concepts.

5
00:00:22.370 --> 00:00:28.820
So the goal of the section is to understand in detail at a lower level that how the following three.

6
00:00:28.850 --> 00:00:35.500
So the first goal is that when a caller makes a call to the calling function call, it should start

7
00:00:35.510 --> 00:00:43.990
execute from the beginning when Callie finishes or returns caller resume's from the point where it left.

8
00:00:44.930 --> 00:00:51.300
And if there is any written value by the COLLY, then that return value should be available to the caller.

9
00:00:51.950 --> 00:00:56.210
So we will going to see how we implement these three concepts.

10
00:00:56.960 --> 00:01:04.110
So now you can understand that the entire mechanism of function call is implemented using static memory.

11
00:01:04.670 --> 00:01:09.020
So let us understand at a very low level to achieve the above stated goals.

12
00:01:10.070 --> 00:01:13.460
And of course, I am not talking about any rocket science.

13
00:01:13.490 --> 00:01:17.990
All these fundamentals are there in your undergraduate curriculum.

14
00:01:18.140 --> 00:01:22.830
So be ready to be asked question on this in your interviews or otherwise.

15
00:01:23.570 --> 00:01:27.120
So let us get familiar ourselves with some terminologies.

16
00:01:27.800 --> 00:01:30.560
So call the stack is a collection of stack frames.

17
00:01:30.800 --> 00:01:37.580
Each function when called in a program, create a new stack frame in the stack, memory a frame that

18
00:01:37.580 --> 00:01:41.000
is executed as always, the topmost frame of the stack.

19
00:01:41.510 --> 00:01:45.770
So here the top of the stack lies in fact at the bottom of the stack.

20
00:01:46.730 --> 00:01:53.660
So pointer to the topmost frame in the stack is called the frame pointer, or it is also called as base

21
00:01:53.660 --> 00:01:59.680
pointer pointer to the top of the stack is called stack pointer.

22
00:02:00.020 --> 00:02:06.440
So note that here is a difference pointer to the top of the stack is the stack pointer, whereas pointer

23
00:02:06.440 --> 00:02:09.830
to the topmost frame in the stack is called frame pointer.

24
00:02:10.789 --> 00:02:16.280
So in other words, stack point to point to the end of the topmost frame in the stack.

25
00:02:17.510 --> 00:02:24.050
Now let us see in depth how function call happens, how values are returned from the Collee, and how

26
00:02:24.220 --> 00:02:29.330
Korla resume its execution when the call returns program counter.

27
00:02:29.600 --> 00:02:35.780
That is peezy is a pointer which always points to the current instruction which is being executed.

28
00:02:36.350 --> 00:02:40.160
And this program counter is also called the instruction pointer.

29
00:02:40.700 --> 00:02:46.280
In some text, they say that the program counter is a pointer which points to the next instruction that

30
00:02:46.280 --> 00:02:47.120
is executed.

31
00:02:47.780 --> 00:02:50.860
So now this is something that is implementation dependent.

32
00:02:51.140 --> 00:02:54.980
But in either case, the end goal of the program counter is same.

33
00:02:55.310 --> 00:02:59.860
That is to keep a track of the instruction that is currently in execution.

34
00:03:00.710 --> 00:03:07.670
We understand already that stack memory is managed by data structure called stack on was two basic operations

35
00:03:07.670 --> 00:03:08.390
are supported.

36
00:03:08.600 --> 00:03:10.220
That is Bush and Pop.

37
00:03:11.090 --> 00:03:14.600
We use push whenever we need to store new data into the stack memory.

38
00:03:15.110 --> 00:03:23.600
We always increment the stack pointer after the Bush operation and we use pop operation whenever we

39
00:03:23.600 --> 00:03:26.990
need to remove the data from top of the stack memory.

40
00:03:27.560 --> 00:03:27.980
Right.

41
00:03:28.430 --> 00:03:32.020
And we decrement the stack pointer after the pop operation.

42
00:03:32.360 --> 00:03:38.840
So her element means that the stack pointer will further shift upwards in the stack memory towards higher

43
00:03:38.840 --> 00:03:39.440
address.

44
00:03:40.010 --> 00:03:45.470
And here increment the stack pointer means that the stack pointer will shift further downwards in the

45
00:03:45.470 --> 00:03:46.270
stack memory.

46
00:03:47.060 --> 00:03:53.090
So here the operation increment and decrement essentially means opposite with respect to the change

47
00:03:53.090 --> 00:03:56.250
in the value of the stack pointer that this operation does.

48
00:03:56.990 --> 00:03:59.710
So now let us divide our discussion into two parts.

49
00:04:00.410 --> 00:04:03.500
The first, we will going to discuss that whole process.

50
00:04:03.590 --> 00:04:04.580
A call is made.

51
00:04:05.540 --> 00:04:12.260
So a call means that the column function invokes the calling function and the control transfers to the

52
00:04:12.590 --> 00:04:14.170
function for execution.

53
00:04:14.810 --> 00:04:16.790
Then the second is the procedure done.

54
00:04:17.149 --> 00:04:23.210
That is when the function returns are terminated, then the controller then backs to the caller and

55
00:04:23.210 --> 00:04:27.530
resumes from the same point where the caller invoked the calling function.

56
00:04:28.610 --> 00:04:35.090
We will see the mechanism behind each of the above two scenarios in detail, so let's gather some more

57
00:04:35.090 --> 00:04:36.290
basics first.

