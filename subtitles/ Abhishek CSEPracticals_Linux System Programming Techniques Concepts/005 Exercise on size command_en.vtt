WEBVTT
1
00:00:05.410 --> 00:00:11.110
So, guys, in this lecture, we do we will do a short exercise on the right hand side, you can see

2
00:00:11.110 --> 00:00:16.190
that I have written a very short and simplest program that you can ever write under.

3
00:00:16.260 --> 00:00:19.630
The name of the program file is really outdoorsy.

4
00:00:20.110 --> 00:00:20.500
Right.

5
00:00:20.860 --> 00:00:26.100
And on the left hand side, I simply compiled this file and create an executable.

6
00:00:27.040 --> 00:00:36.570
So I have created an executable whose name is Mahmoudi, let out now using CISE command and provide

7
00:00:36.570 --> 00:00:39.990
the executable as an argument to the size command.

8
00:00:40.510 --> 00:00:48.790
It will show you the size of text segment data segment which is initialized and unanalyzed data segment

9
00:00:48.790 --> 00:00:50.590
which we call it as VSS.

10
00:00:51.280 --> 00:00:57.590
So you can see that the size command shows the size of text segments, initialize data segment and unanesthetized

11
00:00:57.610 --> 00:00:57.730
it.

12
00:00:57.730 --> 00:00:58.350
A segment.

13
00:00:59.260 --> 00:01:05.440
The summation of all these three segment is listed in the decimal format as one three one three and

14
00:01:05.440 --> 00:01:06.850
in hexadecimal format.

15
00:01:06.850 --> 00:01:09.940
The summation of all these three segments is 521.

16
00:01:12.050 --> 00:01:16.400
So using Cyber Command, you can actually verify the size of these three segments.

17
00:01:18.320 --> 00:01:26.030
Now we can see that the size is not zero because the compiler inserts a lot of information in the executable

18
00:01:26.030 --> 00:01:32.030
that is created and that information is used by the operating system to actually execute this binary.

19
00:01:32.540 --> 00:01:35.060
So binary here means the executable file.

20
00:01:36.080 --> 00:01:43.610
Now, you can see that on the right hand side, if I insert a global variables into global and it is

21
00:01:43.610 --> 00:01:44.630
not initialized.

22
00:01:45.260 --> 00:01:45.660
Right.

23
00:01:46.010 --> 00:01:47.210
So what do you expect?

24
00:01:47.210 --> 00:01:50.930
What will be the change in these figures that you can see on the left hand side?

25
00:01:51.530 --> 00:01:55.460
So let me compile the program again and create an executable.

26
00:01:55.700 --> 00:02:02.300
And using this command, you can see that the size of initialized data segment has been increased from

27
00:02:02.300 --> 00:02:03.230
four to eight.

28
00:02:04.360 --> 00:02:12.880
Right now, let me initialize this global variable with some value, say five, right?

29
00:02:13.330 --> 00:02:15.790
So I will compile the program again.

30
00:02:15.790 --> 00:02:22.540
And using this command, you can see that the size of an initialized at a segment is restored to fold.

31
00:02:22.840 --> 00:02:30.310
But the size of that segment is now increased by four because we already know that all the initialized

32
00:02:30.310 --> 00:02:33.130
global variables are stored in this data segment.

33
00:02:34.330 --> 00:02:38.740
Similarly, now let me introduce one static variable.

34
00:02:40.810 --> 00:02:49.270
And let's say that and let's say that the name of the static variable is X and initialize this to term.

35
00:02:50.260 --> 00:02:57.300
So again, I create an executable and using sice command, you can see that the size of initialized

36
00:02:57.300 --> 00:02:59.830
data segment is again increased by four.

37
00:03:00.940 --> 00:03:08.560
It means that this variable s has been saved in the initialized data segment of the process which will

38
00:03:08.560 --> 00:03:09.420
address the space.

39
00:03:10.090 --> 00:03:17.480
So using Space Command, you can always inspect the text that initialized data segment and initialized

40
00:03:17.500 --> 00:03:19.930
in a segment of a given executable.

