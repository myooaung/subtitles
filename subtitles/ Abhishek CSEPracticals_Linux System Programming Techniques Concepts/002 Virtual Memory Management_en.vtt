WEBVTT
1
00:00:05.530 --> 00:00:12.490
So let us see that when a process B create a thread, then what are the changes that takes place in

2
00:00:12.490 --> 00:00:14.380
the virtual mammary of a process?

3
00:00:15.010 --> 00:00:16.990
So suppose following is the diagram.

4
00:00:16.990 --> 00:00:23.320
On the left hand side is a virtual little space of a process B, which is in execution.

5
00:00:25.320 --> 00:00:31.140
So you can see that this process has some virtual memory that is being used for heep, some virtual

6
00:00:31.140 --> 00:00:38.310
memory that is being used for initialised and unanesthetized, did a segment and some virtual memory

7
00:00:38.310 --> 00:00:40.290
is being used for a code segment.

8
00:00:41.370 --> 00:00:46.410
And also some portion of the virtual memory is used as a stack memory.

9
00:00:47.310 --> 00:00:53.180
We already know that stack memory is used in order to support processor, recall and return.

10
00:00:54.030 --> 00:00:59.400
So every independent unit of execution needs STAC memory.

11
00:01:00.980 --> 00:01:08.210
Now, let us suppose that process B during the course of its execution create a new threat, so after

12
00:01:08.210 --> 00:01:13.940
the creation of this new threat, what will be the change that will take place in this process which

13
00:01:13.940 --> 00:01:15.740
will address the space of a process?

14
00:01:17.610 --> 00:01:23.610
So you can see the diagram on the right hand side is our virtual address, a space of A process B,

15
00:01:23.940 --> 00:01:25.910
but after threat creation.

16
00:01:26.790 --> 00:01:33.960
So you can see that after the threat creation, there is no separate virtual memory for the newly created

17
00:01:33.960 --> 00:01:34.460
threat.

18
00:01:34.800 --> 00:01:35.220
Right.

19
00:01:35.700 --> 00:01:40.020
All this virtual memory is is still belong to the process.

20
00:01:40.040 --> 00:01:45.510
P But this virtual memory is also shared by a newly created threat.

21
00:01:46.110 --> 00:01:53.280
A newly created threat has an equal access to this virtual memory, to this portion of virtual memory

22
00:01:53.280 --> 00:01:54.200
of a process.

23
00:01:54.990 --> 00:01:59.820
Therefore, all threats shared the same virtual address, a space of a process.

24
00:02:00.750 --> 00:02:06.040
But this segment of virtual memory must be accessible only by threat.

25
00:02:06.690 --> 00:02:12.600
So, as I have already said, that every threat has its own tech memory, right?

26
00:02:12.930 --> 00:02:21.720
So operating system will allocate this portion of virtual memory exclusively only for tragedy because

27
00:02:21.720 --> 00:02:27.540
a threat needs to have a static memory in order to execute attack memory of the process.

28
00:02:27.550 --> 00:02:34.350
Be, on the other hand, is preserved and is being used by the process B for its execution.

29
00:02:35.520 --> 00:02:42.000
So you can see that the entire process, what you was a space starting from here till the bottom of

30
00:02:42.000 --> 00:02:46.920
the process was all that space is shared, but A process B as well as a threat.

31
00:02:48.000 --> 00:02:53.790
So it is for this reason that a threat can also modify a memory of a process.

32
00:02:54.690 --> 00:03:00.570
And those modifications in the heat memory will be visible to other threads or parent process.

33
00:03:02.310 --> 00:03:07.710
So you can see that the only change that happens in the process was a little suspicious of a process,

34
00:03:07.710 --> 00:03:13.540
B is the allocation of new STAC memory when a new threat is created.

35
00:03:14.160 --> 00:03:19.780
Other than that, there is absolutely no change in the process led to space.

36
00:03:20.550 --> 00:03:26.730
So now let us extend this idea to a process B, which creates more than one threat.

37
00:03:27.390 --> 00:03:32.760
So suppose the diagram on the left hand side represents the process which will address the space or

38
00:03:32.760 --> 00:03:34.560
virtual memory of a process b.

39
00:03:36.920 --> 00:03:43.550
And you can see that the topmost portion of this virtual memory is being used as a static memory by

40
00:03:43.550 --> 00:03:44.300
a process.

41
00:03:45.440 --> 00:03:53.180
Now, if a process B create a new thread D one, then operating system, allocate more virtual memory,

42
00:03:53.540 --> 00:03:56.990
which is to be used as a static memory for the new 31.

43
00:03:57.560 --> 00:04:03.830
Similarly, if the process B create another threat data, then operating system will allocate more virtual

44
00:04:03.830 --> 00:04:11.480
memory from process multilateral space as a static memory to be used by the data and same goals when

45
00:04:11.480 --> 00:04:13.630
a process create another tragedy.

46
00:04:13.660 --> 00:04:21.440
Three So you can see that operating system keeps on allocating more of virtual memory from the process,

47
00:04:21.440 --> 00:04:26.770
which will address space to be used as a static memory by respective threads.

48
00:04:27.500 --> 00:04:33.020
And remember, each of these virtual memory is prior to the corresponding Trent.

49
00:04:34.770 --> 00:04:42.130
A tragedy three has no business to access a Astatke memory which belong to the 32 right.

50
00:04:43.020 --> 00:04:49.380
So Turd's have their private STAC memory, the last of the regions of what's left of the space of a

51
00:04:49.380 --> 00:04:52.410
process are shared by all the threats.

52
00:04:52.990 --> 00:04:54.650
So now we have discussed that.

53
00:04:54.660 --> 00:05:00.420
What are the change in the virtual memory of a process that takes place when a process create a new

54
00:05:00.420 --> 00:05:01.000
threat?

55
00:05:01.770 --> 00:05:08.190
Now let us see what change happens in a page tabou of a process when a new threat is created.

