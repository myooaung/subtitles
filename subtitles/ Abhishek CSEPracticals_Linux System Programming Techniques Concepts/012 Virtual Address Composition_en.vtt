WEBVTT
1
00:00:05.950 --> 00:00:07.450
So welcome back, guys.

2
00:00:07.660 --> 00:00:13.930
Now, next, let us discuss the composition of what will address so supporters during the course of

3
00:00:13.930 --> 00:00:19.110
execution of a process C.P.U generates, which will address of 32 bits.

4
00:00:19.720 --> 00:00:24.400
So, for example, let us say that the CPA generates the following, which will address.

5
00:00:26.280 --> 00:00:32.560
Now, if your system is a 32 bit system, then the virtual address is a 32 bit unsigned integer.

6
00:00:32.790 --> 00:00:40.470
If your system is a 64 bit system, then the virtual address that is generated by CPU will be 64 bit

7
00:00:40.470 --> 00:00:41.650
unsigned integer.

8
00:00:42.810 --> 00:00:48.640
So let us suppose that the virtual address that is generated by the CPU is a 32 bit unsigned integer.

9
00:00:49.680 --> 00:00:55.560
So this 32 bit of virtual address can always be split it up into two parts.

10
00:00:56.340 --> 00:01:02.730
The first part is the first 20 bits and the second part is the last 12 bits of what an address.

11
00:01:03.510 --> 00:01:10.020
So the most significant bits represents the virtual page number in the process, which will address

12
00:01:10.020 --> 00:01:10.740
the space.

13
00:01:12.210 --> 00:01:17.910
And the least significant blackbird's represents about number within a page.

14
00:01:18.840 --> 00:01:26.280
Now, we already know that why we have chosen exactly 20 bits and exactly bits in order to split what

15
00:01:26.290 --> 00:01:27.840
will address into two parts.

16
00:01:28.800 --> 00:01:36.120
Twenty bucks means that you'll need 20 bits in order to uniquely identify a virtual page inside a process

17
00:01:36.120 --> 00:01:37.320
which will address the space.

18
00:01:38.310 --> 00:01:45.060
And you need blackbox in order to uniquely identify a particular byte inside a virtual page.

19
00:01:46.610 --> 00:01:53.220
Does the virtual address, which we have taken the following as an example, simply means an address

20
00:01:53.220 --> 00:01:55.500
which is within the page No.

21
00:01:55.920 --> 00:01:58.010
One zero four eight five six zero.

22
00:01:58.050 --> 00:01:58.550
That does.

23
00:01:58.590 --> 00:02:05.430
This is the virtual page number and inside this virtual page at an offset three three two eight from

24
00:02:05.430 --> 00:02:10.979
the beginning of the page, it means that we are trying to access byte number three, three to eight

25
00:02:11.250 --> 00:02:15.150
inside a virtual page, number one zero four eight five six zero.

26
00:02:15.780 --> 00:02:18.600
So let's try to visualize this with the help of a diagram.

27
00:02:19.290 --> 00:02:25.770
So let us suppose that we have a virtual page number and the following diagram and CPU generates the

28
00:02:25.770 --> 00:02:29.490
following, which will address during the course of execution of a program.

29
00:02:30.740 --> 00:02:38.210
So you can see the enlarged view of this Whelchel page number is here and you can see that inside this

30
00:02:38.210 --> 00:02:45.290
virtual page, there are already four zero nine six bytes starting from zero to buy two byte number

31
00:02:45.290 --> 00:02:46.630
four zero nine five.

32
00:02:47.420 --> 00:02:54.800
So this is what's on page number one zero four eight five six zero and add an offset of three three

33
00:02:54.800 --> 00:02:55.640
to eight.

34
00:02:55.860 --> 00:02:59.630
We are trying to access this bite number in this page.

35
00:03:02.350 --> 00:03:10.840
So you can see that Talbert's represents an offset within the page that is Talbert's help us to identify

36
00:03:10.840 --> 00:03:17.170
the exact bite location which the CPU is trying to access within our virtual page.

37
00:03:17.980 --> 00:03:26.590
So this distance is offset does take away from this slide is that that the virtual address can always

38
00:03:26.590 --> 00:03:28.510
be split it up into two parts.

39
00:03:29.020 --> 00:03:34.450
The first part, identify the virtual page number and process which will address the space, and the

40
00:03:34.450 --> 00:03:39.520
second part, help us to find the exact location within a virtual page.

41
00:03:40.810 --> 00:03:48.670
Does the virtual address composition, always composed of two parts, the virtual page number plus offset

42
00:03:48.670 --> 00:03:51.190
within a page, right?

