WEBVTT
1
00:00:05.730 --> 00:00:12.180
So, guys, welcome back in this section of the course, we will going to discuss the concepts on stacked

2
00:00:12.180 --> 00:00:19.170
memory so we already know that in will address the space of a given process, the stacked memory occupies

3
00:00:19.170 --> 00:00:22.560
the top position in the water letrozole space.

4
00:00:22.770 --> 00:00:28.710
By top position, I mean that the stack memory resides on the right side of the process, which will

5
00:00:28.740 --> 00:00:29.670
adjust the space.

6
00:00:30.960 --> 00:00:35.190
So in this section, we will going to discuss the stack memory concepts in detail.

7
00:00:35.790 --> 00:00:42.030
So people are going to focus on what exactly is a static memory, what is the purpose of a static memory,

8
00:00:42.180 --> 00:00:47.400
and how its track memory is organized by the operating system for a running process.

9
00:00:48.810 --> 00:00:56.250
So going forward, region of memory in process, which will address a space where data is added or removed

10
00:00:56.460 --> 00:00:59.550
in, last in, first out manner is the stack memory.

11
00:01:00.120 --> 00:01:07.050
So as we know that stack memory here, the meaning of the stack means that whatever data you add last

12
00:01:07.050 --> 00:01:10.260
is the data which will be removed first.

13
00:01:10.830 --> 00:01:13.950
So stack memory works on the concept of stack.

14
00:01:15.090 --> 00:01:18.880
So STAC memory is basically are stacked data structure.

15
00:01:19.980 --> 00:01:27.090
So a new function call is invoked, some data is added to the stack memory and when a current function

16
00:01:27.090 --> 00:01:30.880
call returns, the data is removed from the stack memory.

17
00:01:31.680 --> 00:01:34.470
This data is actually called a static frame.

18
00:01:35.250 --> 00:01:38.270
Does every function has its stacked frame.

19
00:01:39.060 --> 00:01:40.050
So you can see that.

20
00:01:40.050 --> 00:01:45.810
Suppose, for example, we have a main function which makes a call to the function and function.

21
00:01:45.810 --> 00:01:51.960
It makes a call to the function B and function be makes a call to function C, so each of these function

22
00:01:51.960 --> 00:01:54.750
will have their own respective stack frame.

23
00:01:55.650 --> 00:02:02.370
So suppose when the function e in walks the function B, then that stack frame of function B will be

24
00:02:02.370 --> 00:02:09.479
placed into the stack memory and then the function B executes and it further invokes the function C

25
00:02:09.780 --> 00:02:13.840
then the stack frame of the function C is pushed into the stack.

26
00:02:14.580 --> 00:02:19.600
So any data which is stored in the stack memory is set to be decided on the stack.

27
00:02:20.280 --> 00:02:25.010
So every process has its own fixed configurable stack memory.

28
00:02:25.500 --> 00:02:31.950
So not that the maximum amount of stack memory that is available for a given process is actually fixed.

29
00:02:32.520 --> 00:02:36.570
It neither grows, not it shrinks and it is configurable.

30
00:02:36.570 --> 00:02:43.020
Configurable means that you can change the operating system parameters and configure the maximum amount

31
00:02:43.020 --> 00:02:45.110
of stacked memory on the system.

32
00:02:45.900 --> 00:02:52.680
Thus configured value will be the maximum size of the stack memory for every process that runs on your

33
00:02:52.680 --> 00:02:53.160
machine.

34
00:02:53.640 --> 00:02:58.620
Then process terminates stack memory is reclaimed back by the operating system.

35
00:02:59.550 --> 00:03:06.000
So I will share the command with you using which you can actually check on your system the maximum amount

36
00:03:06.000 --> 00:03:10.180
of stack memory for a process available on your system.

37
00:03:11.340 --> 00:03:17.880
So for the function F to execute its stack, frame should be set up first on the stack memory.

38
00:03:18.390 --> 00:03:18.750
Right.

39
00:03:19.020 --> 00:03:24.910
And setting up the stack frame of a function is a joint effort of the caller and McCallie.

40
00:03:25.890 --> 00:03:27.630
Now what is color suppose.

41
00:03:27.630 --> 00:03:36.390
Function F one invokes function F two then f one function is called caller and f2 function is called

42
00:03:36.390 --> 00:03:36.900
Colly.

43
00:03:38.370 --> 00:03:38.790
Right.

44
00:03:39.990 --> 00:03:47.340
So when function one invokes function F two, it is the callers and the caller's responsibility to set

45
00:03:47.340 --> 00:03:51.180
a static frame for the function F on the stack memory.

46
00:03:52.390 --> 00:03:59.500
Unless the static frame is rightly set up on the static memory function, F2 cannot commence its execution.

47
00:04:00.320 --> 00:04:06.850
So you can see in this example we have a main function which in walks function A function invokes function

48
00:04:06.850 --> 00:04:09.250
B and function B in walks function C..

49
00:04:10.240 --> 00:04:17.050
So this is the static memory that I have shown in this diagram, and each block you can see is actually

50
00:04:17.050 --> 00:04:18.490
called a static frame.

51
00:04:19.060 --> 00:04:22.300
The other name of the stack frame is the activation record.

52
00:04:24.000 --> 00:04:30.090
So every function has its own static frame, and that static frame needs to be pushed into the static

53
00:04:30.090 --> 00:04:32.760
memory for the function to execute.

54
00:04:35.170 --> 00:04:41.590
So you can see that the stack frame are pushed into the stack from hydrous address towards laboratories.

55
00:04:42.490 --> 00:04:48.910
That is a stack frame of the most recent function which has been involved lies at the bottom of the

56
00:04:48.910 --> 00:04:49.720
stack mummery.

57
00:04:50.740 --> 00:04:55.420
And suppose function C completes its execution and returns.

58
00:04:55.900 --> 00:05:02.500
So it's a taxpayers will be removed from the stack memory, so whenever a function returns, its dark

59
00:05:02.500 --> 00:05:08.830
frame is popped out of the stack memory because the stack memory is a stack.

60
00:05:09.160 --> 00:05:13.130
Therefore, we will use the terms which is associated with the stack operation.

61
00:05:13.630 --> 00:05:20.530
So adding the data to the stack memory means that pushing the data in the stack and removing the data

62
00:05:20.530 --> 00:05:23.690
from the stack memory means swapping out the data.

63
00:05:24.460 --> 00:05:30.700
So stack frames are pushed into the stack when function and location is done and when the function returns

64
00:05:30.700 --> 00:05:33.840
than the stack frame is popped out of the stack.

