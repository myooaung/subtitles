WEBVTT
1
00:00:05.580 --> 00:00:12.030
So welcome back, guys, in this section, we will going to discuss hip memory management in Linux operating

2
00:00:12.030 --> 00:00:12.510
system.

3
00:00:13.140 --> 00:00:18.700
So this is one of the topic which is of utmost importance in Linux system programming domain.

4
00:00:19.260 --> 00:00:22.920
So in this section, we will going to cover the following goals.

5
00:00:23.460 --> 00:00:26.850
We will discuss how mallock and free works.

6
00:00:27.480 --> 00:00:32.310
We will discuss internal fragmentation of memory by Linux operating system.

7
00:00:33.090 --> 00:00:39.000
We will try to understand the problem of fragmentation and what are the possible solution to this problem.

8
00:00:39.660 --> 00:00:44.430
We will discuss the system calls which are related to heap memory management.

9
00:00:45.260 --> 00:00:51.080
And of course, we will prepare a technical interview questions, so fasten your seat belts, guys,

10
00:00:51.080 --> 00:00:55.550
for another great drive into the world of Linux system programming.

11
00:00:56.700 --> 00:01:03.480
So going forward, so let us discuss some basics regarding heat memory management, heat memory of the

12
00:01:03.480 --> 00:01:09.900
process is the continuous part of what your address, the space of the process from which a process

13
00:01:09.900 --> 00:01:13.200
claims and reclaims memory during runtime.

14
00:01:13.530 --> 00:01:17.330
And this process is well known as dynamic memory allocation.

15
00:01:18.660 --> 00:01:23.520
So Lipsey appears to harness the functionality of memory management.

16
00:01:23.730 --> 00:01:31.170
Are the following functions or APIs so Gypsie means that the standard library, which is provided by

17
00:01:31.170 --> 00:01:38.310
Linux operating system so this is standard library, provides certain functions and APIs in order to

18
00:01:38.310 --> 00:01:40.720
manipulate heap memory of the process.

19
00:01:41.640 --> 00:01:47.060
So you must be familiar with Marlock function or Kalac function free or relock.

20
00:01:48.000 --> 00:01:54.800
You can see that all of these APIs are concerned with the heap memory management of the process.

21
00:01:55.350 --> 00:02:03.510
So not that Mallock alloc free and real OK are not system calls, but they are standard APIs which is

22
00:02:03.510 --> 00:02:05.850
provided by the standard library.

23
00:02:07.540 --> 00:02:13.850
System calls, on the other hand, which is provided by Linux operating system to manipulate memory

24
00:02:13.870 --> 00:02:17.350
are PRK system call and as Bayaka system call.

25
00:02:18.580 --> 00:02:26.830
This system calls are actually related to the management of heat memory segment of the process, so

26
00:02:26.830 --> 00:02:31.320
unlike Stack memory, now we already have done the diagnostic memory.

27
00:02:31.570 --> 00:02:38.890
So unlike a stack memory, which is reclaimed back up on procedure return automatically in case of heat

28
00:02:38.890 --> 00:02:44.860
memory, it is programmer's responsibility to free the dynamic memory after usage.

29
00:02:45.310 --> 00:02:45.640
Right.

30
00:02:46.150 --> 00:02:51.850
So Mallock and Kolok are the functions or APIs, which is provided by standard library.

31
00:02:52.120 --> 00:02:58.590
And these apps are used to allocate a block of memory from each segment of the process.

32
00:03:00.030 --> 00:03:07.140
Free, on the other hand, is a counterpart to Mallock and Kalac EPWs, Free Appia is also provided

33
00:03:07.140 --> 00:03:14.490
by Standard Library and it is used to release the Mahmudi back to the HEB segment, which was claimed

34
00:03:14.490 --> 00:03:17.510
by Mallock or Kalac like EPIS.

35
00:03:18.210 --> 00:03:26.550
So as a system programmer, you must know how dynamic memory allocation works and mine that this chapter

36
00:03:26.550 --> 00:03:29.580
is one of the most important chapters of your life.

37
00:03:30.120 --> 00:03:37.350
Indeed, it is very common to expect questions and interviews from this chapter or from this topic.

38
00:03:38.250 --> 00:03:41.610
So please pay full attention to the section of the course.

39
00:03:42.450 --> 00:03:48.060
So thank me later for covering deep memory management in such a great detail in this section of the

40
00:03:48.060 --> 00:03:48.630
course.

