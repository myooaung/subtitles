WEBVTT
1
00:00:07.120 --> 00:00:10.210
So, guys, now let me quickly share one trick with you guys.

2
00:00:10.660 --> 00:00:18.280
So here Trick is using enemies as bait flags, so sometimes it makes sense to define enemies in the

3
00:00:18.280 --> 00:00:23.080
power of two so that we can use enemies like constant as usual.

4
00:00:23.650 --> 00:00:29.110
And the second benefit that we were going to have is that we can also use enemies like bits.

5
00:00:30.760 --> 00:00:37.480
So, for example, here we have defined the Enum, which represents different type of colors, so you

6
00:00:37.480 --> 00:00:43.480
can see that I have defined the enum red, green, black, blue, but all these enemies have assigned

7
00:00:43.480 --> 00:00:45.610
the values, which are the power of two.

8
00:00:46.300 --> 00:00:46.740
All right.

9
00:00:48.260 --> 00:00:54.950
So the benefit of assigning the enum values, which is a power of two, is that that you can use Elam's

10
00:00:54.950 --> 00:00:55.970
as bits.

11
00:00:56.750 --> 00:01:03.740
You can see that I have taken an unsigned integer variable, which serves as a flag and this flag I'm

12
00:01:03.740 --> 00:01:09.830
setting zero two bit of the flag, the zero eight, which means the red bit.

13
00:01:10.250 --> 00:01:15.410
Similarly, I'm setting another bit, which represents blue color in the same flag variable.

14
00:01:15.830 --> 00:01:16.280
All right.

15
00:01:17.270 --> 00:01:20.960
Here, blue bit is the third least significant bit.

16
00:01:21.560 --> 00:01:28.550
So further in your program, you can test that flag variable, whether a particular bit is set or not

17
00:01:28.610 --> 00:01:30.170
using logical operators.

18
00:01:31.190 --> 00:01:36.860
How do you define the enum as usual without giving them any special values, which is a power of two?

19
00:01:37.250 --> 00:01:40.400
You wouldn't be able to use these enemies as bits.

20
00:01:40.910 --> 00:01:46.070
However, there is one disadvantage of this technique, and the disadvantage is that that if shall be

21
00:01:46.070 --> 00:01:49.550
memory inefficient to use Enum as index of arrays.

22
00:01:50.210 --> 00:01:50.600
All right.

23
00:01:51.050 --> 00:01:58.370
So if you define an eddy, the index of which represents the Enum, which is a power of two.

24
00:01:58.820 --> 00:02:02.030
So here you only need four colors.

25
00:02:02.330 --> 00:02:07.280
But do you end up defining in any of size?

26
00:02:07.280 --> 00:02:11.570
16 because this color max value is 16.

27
00:02:12.110 --> 00:02:18.470
You will have holes in the array if you tried to use these imams, which is a power of two as indexes

28
00:02:18.470 --> 00:02:19.070
of the ADI.

29
00:02:19.820 --> 00:02:24.440
All right, so take care if you don't have to use these items as an index of an ADI.

30
00:02:24.680 --> 00:02:31.490
And if you have to treat Enum as bit so that you can set multiple enemies in the same flag variable,

31
00:02:31.910 --> 00:02:34.820
then it's what to define imams in the power of two.

32
00:02:35.450 --> 00:02:38.570
So this is just one programming technique that I would like to share with you.

