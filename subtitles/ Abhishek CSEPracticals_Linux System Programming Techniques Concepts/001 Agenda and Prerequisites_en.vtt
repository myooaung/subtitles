WEBVTT
1
00:00:05.270 --> 00:00:06.480
Welcome back, guys.

2
00:00:06.800 --> 00:00:11.820
So in this section of the course, we will going to learn how to work with POSIX timers.

3
00:00:12.320 --> 00:00:17.960
SAPOL six timers are nothing, but these are POSIX compliant timers which are designed to perform a

4
00:00:17.960 --> 00:00:19.840
run on Unix operating systems.

5
00:00:20.360 --> 00:00:25.940
So you need to have a Linux running on your machine in order to do this course conceptual way.

6
00:00:25.940 --> 00:00:33.070
The course is not very specific to Linux because whatever the concepts that you will run regarding timers,

7
00:00:33.080 --> 00:00:35.480
the timers are implemented in that way only.

8
00:00:36.080 --> 00:00:38.030
This is more of a conceptual course.

9
00:00:38.030 --> 00:00:41.990
But all the demonstration that I will show you will be on Linux operating system.

10
00:00:42.500 --> 00:00:46.460
All the codes that we will going to discuss can be downloaded from the CSIRO.

11
00:00:46.670 --> 00:00:53.750
So visit this website or fork out this repository and create a copy of the source code on your local

12
00:00:53.750 --> 00:00:54.190
machine.

13
00:00:54.620 --> 00:00:57.920
We will going to disclose all the source code, which is present in the static tree.

14
00:00:58.760 --> 00:01:04.160
So after this session, you will be able to create update and delete Linux primers.

15
00:01:04.459 --> 00:01:09.430
You will be able to restart Bors resume or reschedule the timer at your will.

16
00:01:09.830 --> 00:01:17.180
We will be able to file a periodic one short or exponential backoff timers and you will be able to create

17
00:01:17.180 --> 00:01:20.660
or design applications which are timers oriented.

18
00:01:21.230 --> 00:01:27.590
Once you get a pretty good hold on the time first and you will be able to implement time arabized algorithms

19
00:01:27.590 --> 00:01:28.690
and straight machines.

20
00:01:29.630 --> 00:01:33.800
So towards the end of the scores, we will going to build our own custom.

21
00:01:33.800 --> 00:01:35.590
Taimur Library, right?

22
00:01:36.080 --> 00:01:41.510
So do it as a mini project and add a mention of this project on your resumÃ© to add a value.

23
00:01:43.270 --> 00:01:47.560
So prerequisite of discourse is that you must have Linux operating system running on your machine,

24
00:01:47.630 --> 00:01:54.370
whether as a virtual machine are native operating system, then you must be familiar with the callback

25
00:01:54.550 --> 00:02:01.360
function pointers because timers are implemented are they are heavily dependent on function pointers

26
00:02:01.510 --> 00:02:03.040
for their implementation.

27
00:02:03.250 --> 00:02:08.139
And of course, as usual, all the demonstrations that I will show you are all the code that we will

28
00:02:08.139 --> 00:02:09.520
discuss will be in seed.

29
00:02:09.880 --> 00:02:13.410
So not that this is more of a conceptual in nature.

30
00:02:14.560 --> 00:02:20.000
Once you understand how time outs are designed and implemented than you can implement the timer, it's

31
00:02:20.020 --> 00:02:24.320
using your own favorite programming language, be it Python, Java or any other.

32
00:02:25.100 --> 00:02:30.430
So not that we are learning programming concepts and not programming language or Linux, right.

33
00:02:32.130 --> 00:02:37.020
So best of luck, guys, and I hope you will enjoy the scores, this course will going to be very much

34
00:02:37.020 --> 00:02:37.710
interesting.

