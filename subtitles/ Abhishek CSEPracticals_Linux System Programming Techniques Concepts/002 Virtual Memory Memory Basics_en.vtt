WEBVTT
1
00:00:05.050 --> 00:00:10.090
So, guys, now let us discuss some prerequisite knowledge, which is essential to understand Linux

2
00:00:10.090 --> 00:00:11.050
memory management.

3
00:00:11.620 --> 00:00:16.420
So to understand the Linux memory management, we need to understand some basics first.

4
00:00:17.290 --> 00:00:19.060
So we shall briefly discuss that.

5
00:00:19.060 --> 00:00:22.450
What is what will address the space and what is what will memory.

6
00:00:22.870 --> 00:00:29.530
And then we will finally discuss memory layout of a process once we understand the concept of what will

7
00:00:29.530 --> 00:00:35.500
address the space and virtual memory together with family out of a process, then we shall be in the

8
00:00:35.500 --> 00:00:42.940
position to dive deep into how stock memory and heap memory management is done by Linux operating system

9
00:00:43.090 --> 00:00:44.180
at a lower level.

10
00:00:45.070 --> 00:00:49.360
So let us start with our discussion with virtual space and virtual memory.

11
00:00:55.040 --> 00:01:01.520
So, guys, now let us try to understand what is Whelchel Mahmoudi and what is watching that does space.

12
00:01:02.450 --> 00:01:07.380
So watch your memory is the total amount of memory your system has for a process.

13
00:01:07.970 --> 00:01:15.170
So remember what your memory is, the total amount of memory your system has for one process, right?

14
00:01:16.760 --> 00:01:22.350
Virtual memory is different from physical memory and is computer architecture dependent?

15
00:01:22.610 --> 00:01:28.020
That is, you cannot reconfigure or change the virtual memory size for a system.

16
00:01:29.030 --> 00:01:36.380
So, for example, for a 32 bit system now, we will discuss later that what do we mean when we say

17
00:01:36.590 --> 00:01:41.030
that our system is 32 bit system or 64 bit system?

18
00:01:41.840 --> 00:01:42.600
For now?

19
00:01:42.620 --> 00:01:50.150
Just assume that for a 32 bit system, total virtual memory is to restore the power of 32 bytes.

20
00:01:50.450 --> 00:01:51.800
And it is fixed.

21
00:01:52.190 --> 00:01:55.040
And always remember that these is restore the power.

22
00:01:55.060 --> 00:02:01.220
32 bytes of virtual memory is available for each process running on the system.

23
00:02:02.150 --> 00:02:07.520
These two restore the power 32 bytes is not for all the process combined together.

24
00:02:08.000 --> 00:02:14.330
Now you must be thinking that if you run 100 processes, then does it mean that each process out of

25
00:02:14.330 --> 00:02:18.800
those 100 process will have to restore the power 32 bytes of virtual memory?

26
00:02:19.130 --> 00:02:21.050
The answer is yes.

27
00:02:21.770 --> 00:02:28.550
That is why virtual memory is called virtual, because it is not actually a piece of actual hardware,

28
00:02:28.760 --> 00:02:31.100
but it is actually a concept.

29
00:02:32.340 --> 00:02:34.010
Would simulate a memory.

30
00:02:35.070 --> 00:02:40.250
So remember what, memory is not an actual memory, which is torse data.

31
00:02:41.110 --> 00:02:48.790
It is a conceptual thing and what your memory makes, the process believes that a process has to rest

32
00:02:48.790 --> 00:02:56.650
with the power party to bytes of memory to store its data, whereas physical memory is an actual memory

33
00:02:56.650 --> 00:03:02.950
and you have to buy a piece of ram chips from the market in order to install physical memory on your

34
00:03:02.950 --> 00:03:03.490
system.

35
00:03:03.880 --> 00:03:08.110
It is this physical memory which actually stores the program data.

36
00:03:08.950 --> 00:03:14.630
So you can see that physical memory is an extendable memory and you can extend it to 4G.

37
00:03:14.630 --> 00:03:22.870
We LGB are 16 GBE or even more, but there is an upper limit to which you can actually extend the size

38
00:03:22.870 --> 00:03:24.010
of physical memory.

39
00:03:24.950 --> 00:03:32.260
This upper limit is decided by the computer architecture, that is by the size of address bars and database

40
00:03:32.270 --> 00:03:33.380
your system has.

41
00:03:35.200 --> 00:03:41.020
Now, if you study computer organization in detail, then you will understand that why you cannot extend

42
00:03:41.020 --> 00:03:43.730
the physical memory beyond a certain limit.

43
00:03:45.220 --> 00:03:51.640
We will going to discuss this in detail in the coming lectures that why physical memory cannot be extended

44
00:03:51.880 --> 00:03:53.410
beyond a certain size.

45
00:03:54.980 --> 00:04:02.630
So for the 32 bit system, we have to restore the power, 32 bytes of virtual memory and every byte

46
00:04:02.630 --> 00:04:03.720
has an address.

47
00:04:04.100 --> 00:04:11.590
So this important point in our memory, every byte has an address when everybody it has an Adlerstein.

48
00:04:11.600 --> 00:04:15.550
That particular memory is called byte addressable memory.

49
00:04:16.370 --> 00:04:18.529
And because everybody, it has an address.

50
00:04:18.529 --> 00:04:23.690
Therefore, there are two layers to the power today, to virtual addresses in a little bit system.

51
00:04:24.440 --> 00:04:31.430
So computer programs Roarke's with virtual memory only means you have program access, only virtual

52
00:04:31.430 --> 00:04:32.210
addresses.

53
00:04:32.640 --> 00:04:37.190
You are programmed, read and write the data to virtual memory locations.

54
00:04:38.000 --> 00:04:41.820
Your program never knows anything about physical memory.

55
00:04:42.200 --> 00:04:48.260
All it knows that it has to restore the power to bytes of virtual memory to store its data.

56
00:04:49.250 --> 00:04:55.430
So you can see that physical memory is completely isolated from the programs that you are running on

57
00:04:55.430 --> 00:04:56.060
the system.

58
00:04:56.960 --> 00:05:02.600
Now, when we shall be discussing the concept of Beijing, we will understand that how physical memory

59
00:05:02.600 --> 00:05:09.710
is isolated from the programs running on the system and how program believes that it has to restore

60
00:05:09.710 --> 00:05:13.560
the power 32 bytes of virtual memory to store its data.

61
00:05:14.540 --> 00:05:19.340
Each process in execution is allotted virtual memory for its usage.

62
00:05:19.670 --> 00:05:27.020
And when the process claims more and more memory during the runtime using mallock or carlot system calls

63
00:05:27.350 --> 00:05:34.370
than the virtual memory, consumption of a process can grow maximum to to restore the power to 32 bytes

64
00:05:34.370 --> 00:05:35.750
on a 32 bit system.

65
00:05:36.680 --> 00:05:41.210
A process cannot claim memory more than this limit.

66
00:05:42.380 --> 00:05:51.020
So to restore the power 32 bytes is actually for GBE, it means that on a 32 bit system, your program

67
00:05:51.020 --> 00:05:55.430
theoretically cannot mallock more than four GB of virtual memory.

68
00:05:56.300 --> 00:05:58.070
So, again, one question.

69
00:05:58.850 --> 00:06:06.740
When in your C program you do dynamic memory allocation using Mallock or Kalac system calls, the amount

70
00:06:06.740 --> 00:06:13.120
of memory that is allotted to your program is actually what's called memory and not a physical memory.

71
00:06:14.230 --> 00:06:18.380
So remember, your program never knows anything about physical memory.

72
00:06:18.790 --> 00:06:26.650
Your program expands its entire lifetime under the illusion that it has to restore the power to do bytes

73
00:06:26.650 --> 00:06:29.870
of memory where it can store its data.

74
00:06:30.340 --> 00:06:35.530
So the virtual memory, which is assigned to a process, is called process, which will address the

75
00:06:35.530 --> 00:06:36.160
space.

76
00:06:36.970 --> 00:06:44.140
Every process running on a 32 bit system can use a maximum of two days to the power to two bites of

77
00:06:44.140 --> 00:06:45.000
virtual memory.

78
00:06:46.740 --> 00:06:54.370
So on a 32 bit system, theoretically, a program cannot use bond to restore the power, 32 bytes of

79
00:06:54.370 --> 00:06:55.090
virtual memory.

