WEBVTT
1
00:00:05.750 --> 00:00:11.660
So, guys, welcome back in this section of the course, we will going to understand the concept of

2
00:00:11.660 --> 00:00:13.010
iterative mackerels.

3
00:00:13.880 --> 00:00:20.120
So I try to macro's are iterators, which are used to iterate over standard data structures such as

4
00:00:20.120 --> 00:00:24.680
link list trees or any other customized data structure.

5
00:00:26.790 --> 00:00:33.570
So I try the macros are used to it with data structures such as limitless trees, etc., We need to

6
00:00:33.570 --> 00:00:38.110
iterate over common data structures in our application many times, right.

7
00:00:39.060 --> 00:00:45.780
So if you have written an application of good enough size, then you must have noticed that many times

8
00:00:45.780 --> 00:00:46.220
you have to.

9
00:00:46.230 --> 00:00:53.970
Repeatedly, I tripped over many data structures such as link list are trees or stacks or cubes so as

10
00:00:53.970 --> 00:00:56.160
to implement the logic of the program.

11
00:00:56.850 --> 00:01:00.490
So I the macros makes iteration of our data structure.

12
00:01:00.490 --> 00:01:02.560
It's very easy and handy.

13
00:01:03.510 --> 00:01:05.160
So let us take an example.

14
00:01:05.160 --> 00:01:11.490
Suppose you want to iterate over our linked list and I'm sure that you must have been using a traditional

15
00:01:11.490 --> 00:01:15.430
approach for iterating over a link list data structure.

16
00:01:16.020 --> 00:01:18.510
So how do you usually I over a link list.

17
00:01:18.930 --> 00:01:21.720
First of all, you get the head of the linked list.

18
00:01:21.720 --> 00:01:24.930
That is the pointer to the first node of the linked list.

19
00:01:25.400 --> 00:01:32.670
And then you trigger while loop or for loop and then you advance the pointer that points to the next

20
00:01:32.670 --> 00:01:34.700
note of the link list and so on.

21
00:01:35.160 --> 00:01:40.040
So you can see that this approach is a traditional approach to iterate over a link list.

22
00:01:40.410 --> 00:01:40.860
Right.

23
00:01:42.330 --> 00:01:48.660
Inside the while loop in this line, you process the current list and you implement whatever logic you

24
00:01:48.660 --> 00:01:50.470
need to implement, right?

25
00:01:50.850 --> 00:01:55.500
And in the next line, you just advance the pointer to point to the next notable linked list.

26
00:01:55.890 --> 00:01:56.270
Right.

27
00:01:57.450 --> 00:01:59.280
So this is the traditional approach.

28
00:01:59.280 --> 00:02:06.640
And I'm sure until now you have been implementing this approach in order to iterate over a linked list.

29
00:02:07.410 --> 00:02:13.890
But mark my word, once you start working professionally and start handling the production code, you

30
00:02:13.890 --> 00:02:19.950
will not be allowed to iterate over the standard data structure, such as linked list using this traditional

31
00:02:19.950 --> 00:02:20.550
approach.

32
00:02:21.520 --> 00:02:29.410
We always have to use macros which allow us to iterate over a standard data structures so we can see

33
00:02:29.410 --> 00:02:36.070
that on the right hand side I have written our macro, which is equivalent to the piece of code which

34
00:02:36.070 --> 00:02:37.390
is on the left hand side.

35
00:02:37.720 --> 00:02:44.710
And this matter will simply facilitate you to iterate over our linked list in the same way as using

36
00:02:44.710 --> 00:02:45.780
traditional approach.

37
00:02:46.780 --> 00:02:49.060
So you can see that I have written a macro.

38
00:02:49.060 --> 00:02:54.340
The name of the macro is it read list begin and it accepts two pointers.

39
00:02:54.340 --> 00:02:56.190
First is appointed to the linked list.

40
00:02:56.560 --> 00:02:59.430
The second is the pointer to the node of a link list.

41
00:02:59.740 --> 00:03:00.150
Right.

42
00:03:00.580 --> 00:03:06.310
So you can see that the approach used on the right hand side that is iterating over a linked list using

43
00:03:06.310 --> 00:03:08.460
macros is more readable.

44
00:03:08.800 --> 00:03:10.870
It is not at all error prone.

45
00:03:11.020 --> 00:03:16.030
You cannot commit any mistake if you use macros to iterate over the data structure.

46
00:03:16.510 --> 00:03:18.940
It is handy and easy, right?

47
00:03:21.070 --> 00:03:27.130
And soon, with complex data structures as the street or graphs, you cannot survive actually without

48
00:03:27.130 --> 00:03:34.120
writing iterative macros, because here we are discussing a very simple example of iterating over a

49
00:03:34.120 --> 00:03:34.770
linked list.

50
00:03:35.110 --> 00:03:43.240
Maybe it could be the case that you may not realize the value of benefits that you will get by iterating

51
00:03:43.240 --> 00:03:48.550
over data structures using iterative macros as compared to the traditional approach.

52
00:03:49.480 --> 00:03:55.570
We will understand that how important it is to write iterative macros, to iterate over the new structures

53
00:03:55.870 --> 00:04:00.490
when we will be discussing at, for example, in this section of the course.

54
00:04:02.760 --> 00:04:08.940
So now let's discuss that, how you can implement iterative macros and first example that people are

55
00:04:08.940 --> 00:04:14.240
going to discuss is the macro, which will facilitate iteration over a linked list.

