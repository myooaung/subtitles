WEBVTT
1
00:00:05.720 --> 00:00:07.190
So welcome back, guys.

2
00:00:07.580 --> 00:00:12.770
Now let us try to understand the One-to-one relationship between a physical page and a virtual page

3
00:00:12.770 --> 00:00:13.740
for a process.

4
00:00:14.600 --> 00:00:20.450
Now, as the name suggests, one on one relationship means that if there exists a virtual page, then

5
00:00:20.450 --> 00:00:22.350
there exists a physical page.

6
00:00:23.330 --> 00:00:31.490
So remember, we equate virtual addresses as keys and physical addresses as lockers, which have some

7
00:00:31.490 --> 00:00:32.390
data in it.

8
00:00:33.440 --> 00:00:37.460
A virtual page is a collection of four 096 keys, right?

9
00:00:37.880 --> 00:00:38.300
Why?

10
00:00:38.690 --> 00:00:44.600
Because we already know that the number of virtual addresses in one virtual page is to restore the power

11
00:00:44.600 --> 00:00:45.140
to one.

12
00:00:46.330 --> 00:00:56.380
Which is for 096, and each of these keys unlocks one bite of data and physical memory, which means

13
00:00:56.380 --> 00:01:04.000
that each virtual address provide an access to one bite of data present at some physical address in

14
00:01:04.000 --> 00:01:04.780
main memory.

15
00:01:06.390 --> 00:01:13.230
So remember, here he is nothing, but it is virtual address and virtual address provide you and access

16
00:01:13.230 --> 00:01:17.980
to exactly one bit of data which is present and physical memory.

17
00:01:19.380 --> 00:01:27.180
So if there is a key means, if there is a virtual address, then there has to be a locker precisely

18
00:01:27.180 --> 00:01:34.860
saying if there is a virtual page, then there exists a corresponding physical page and that physical

19
00:01:34.860 --> 00:01:38.070
page may be on disk or it may be on memory.

20
00:01:39.230 --> 00:01:46.490
So suppose that a process watcher, Labruzzo Space, contains five virtual pages, right, and we already

21
00:01:46.490 --> 00:01:50.180
know that virtual pages are arranged in contiguous manner.

22
00:01:51.260 --> 00:01:59.210
Now, if there are five virtual pages, then there exist five physical pages, which may be stored in

23
00:01:59.210 --> 00:02:02.170
some noncontiguous frames in May memory.

24
00:02:03.530 --> 00:02:09.949
And you can see that there is a one on one relationship between a virtual page and a physical page for

25
00:02:09.949 --> 00:02:13.210
every virtual page directors to physical page.

26
00:02:13.910 --> 00:02:21.160
So you can see that virtual page P three has physical page three, virtual page P two has physical space

27
00:02:21.170 --> 00:02:22.280
pizza and so on.

28
00:02:24.540 --> 00:02:30.090
So remember, these are the physical pages and physical pages are nothing, but they are a snapshot

29
00:02:30.090 --> 00:02:32.610
of the frames of main memory.

30
00:02:34.230 --> 00:02:41.540
So these physical pages may be present in some frames of physical memory or may be present on this.

31
00:02:42.480 --> 00:02:48.300
But one thing is clear that for every virtual page of a process, there exists a physical page.

32
00:02:49.200 --> 00:02:51.600
And it makes sense because you need.

33
00:02:52.930 --> 00:02:59.470
Actual physical memory to store data Whelchel pages are only a collection of virtual addresses, and

34
00:02:59.470 --> 00:03:06.040
they do not support any data corresponding to those virtual addresses that exist of physical page and

35
00:03:06.040 --> 00:03:08.950
on those physical page actually used to data.

36
00:03:09.610 --> 00:03:17.650
So as simple as that, if virtual page is a key, then physical page is like a locker where you kept

37
00:03:17.650 --> 00:03:18.910
your data items.

38
00:03:20.110 --> 00:03:23.380
So a typical virtual page looks something like this.

39
00:03:24.960 --> 00:03:32.490
Once again, I'm stating Rachel Paige is just a collection of virtual addresses, so even to three,

40
00:03:32.530 --> 00:03:40.200
if up to eight are like virtual addresses and actual data is stored on the corresponding physical page,

41
00:03:40.920 --> 00:03:48.360
and you can see that physical page is towards one bite of data corresponding to one virtual address.

42
00:03:49.720 --> 00:03:57.220
So if there are eight virtual addresses in virtual page, then there exist eight data items, each data

43
00:03:57.220 --> 00:04:00.950
item being a data of one byte in physical memory.

44
00:04:01.690 --> 00:04:09.760
So in this example, you can see that using virtual Atlas A3, you can access one bite of this data

45
00:04:09.760 --> 00:04:10.300
item.

46
00:04:12.380 --> 00:04:19.550
Now, going forward, you can see the diagram on the right hand side represents the virtual outer space

47
00:04:19.550 --> 00:04:21.430
of a process in execution.

48
00:04:22.010 --> 00:04:29.660
So physical pages are created or destroyed as process users are freeze corresponding virtual pages during

49
00:04:29.660 --> 00:04:31.230
the course of its execution.

50
00:04:33.530 --> 00:04:41.360
So you can see that this process is an execution then corresponding to virtual pages which are in use

51
00:04:41.510 --> 00:04:44.390
operating system will create physical pages.

52
00:04:45.080 --> 00:04:50.310
So far, virtual page P0, physical page P0 will be created by the operating system.

53
00:04:51.230 --> 00:04:57.920
So it is this physical page which will actually to the machine called instructions of the process,

54
00:04:57.920 --> 00:04:59.240
which is an execution.

55
00:05:00.610 --> 00:05:06.730
Similarly, the process, which will add to space, has a region called, initialised and initialised,

56
00:05:06.730 --> 00:05:13.630
did a segment so corresponding to these virtual pages, physical pages, P1 and P2 will be created by

57
00:05:13.630 --> 00:05:14.740
the operating system.

58
00:05:15.490 --> 00:05:20.980
The actual initialized and initialize data segment will reside on these physical pages.

59
00:05:21.580 --> 00:05:28.930
So in this example, the physical page P0 and P1 and P2 will be created by the operating system as soon

60
00:05:28.930 --> 00:05:31.080
as you execute this program.

61
00:05:32.860 --> 00:05:40.870
The reason being that good segment and initialised and initialised data segment of a process are mandatorily

62
00:05:40.870 --> 00:05:44.350
created as soon as the process starts its execution.

63
00:05:45.400 --> 00:05:46.990
Now, suppose you process.

64
00:05:48.570 --> 00:05:56.040
Request some dynamic memory using mallock so the operating system will create a virtual page and assign

65
00:05:56.040 --> 00:06:03.240
it to your process now corresponding to the virtual page B3 operating system also created a physical

66
00:06:03.240 --> 00:06:05.070
page three, right.

67
00:06:06.630 --> 00:06:12.480
Similarly, if the process request more memory from the operating system, the operating system will

68
00:06:12.480 --> 00:06:19.020
assign the virtual page before to the process and corresponding to the virtual page before the operating

69
00:06:19.020 --> 00:06:19.440
system.

70
00:06:19.450 --> 00:06:24.960
Also create a physical page before and it goes on.

71
00:06:26.760 --> 00:06:33.630
So operating system allocates or release the virtual memory and hence the corresponding physical pages

72
00:06:33.900 --> 00:06:37.740
in units of page size, which is four zero nine six bytes.

73
00:06:39.420 --> 00:06:49.440
So if you request mallock 10, it may not result in creation of new physical or virtual page if topmost

74
00:06:49.440 --> 00:06:52.140
virtual page in Heap's segment of the process.

75
00:06:52.140 --> 00:06:58.810
Virtual address space still has 10 bytes of memory to satisfy the Mallak request.

76
00:06:59.580 --> 00:07:01.530
So it is as simple as that.

