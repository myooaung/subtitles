WEBVTT
1
00:00:05.350 --> 00:00:06.530
So welcome back, guys.

2
00:00:07.090 --> 00:00:13.810
So Lenox, like Operating System, provides two basic system calls which allow us to manipulate heap

3
00:00:13.810 --> 00:00:16.570
memory segment of process which will adjust the space.

4
00:00:17.200 --> 00:00:20.970
So these two system calls are PRK and Sparkie.

5
00:00:21.610 --> 00:00:21.980
Right.

6
00:00:22.510 --> 00:00:26.950
So we will discuss the synopsis and how these two system calls work.

7
00:00:27.280 --> 00:00:29.890
So let us first discuss the PR system call.

8
00:00:30.820 --> 00:00:34.170
So the synopsis of the PRK system is very simple.

9
00:00:34.480 --> 00:00:42.910
You can see that Bierko system call expect some address as an argument and it returns an integer.

10
00:00:43.750 --> 00:00:51.640
So Bierko system can expense the heap memory segment such that the breakpoint are of a process, moves

11
00:00:51.640 --> 00:00:58.060
towards higher memory address and points to the address which is provided as an argument.

12
00:00:58.450 --> 00:00:58.780
Right.

13
00:00:59.140 --> 00:01:05.740
And of course, the address which you have supplied as an argument to PRK system call should be a valid

14
00:01:05.740 --> 00:01:06.340
address.

15
00:01:07.590 --> 00:01:11.560
Is system, call it on zero on success and minus one on failure.

16
00:01:12.690 --> 00:01:20.100
So let us start to understand how the system works with the help of an example, so let us suppose that

17
00:01:20.100 --> 00:01:27.000
your program invokes Bierko system called and it provides the following address as an argument to this

18
00:01:27.000 --> 00:01:28.140
Bierko system call.

19
00:01:29.070 --> 00:01:35.220
So let us suppose that this address is some address, which is higher than the break address in the

20
00:01:35.220 --> 00:01:36.870
process, which will address the space.

21
00:01:37.620 --> 00:01:45.990
So when this Bierko system call executes the heat memory segment of the process will expand such that

22
00:01:45.990 --> 00:01:53.150
the breakpoint will be set to this address, which is parsed as an argument to be arcane system called.

23
00:01:53.790 --> 00:02:01.110
So you can see that PRK system call is used by the process to claim more heat memory from the operating

24
00:02:01.110 --> 00:02:10.289
system because of the heat memory segment expands and now the break pointer points to the higher address

25
00:02:10.289 --> 00:02:12.190
in the process, which will address the space.

26
00:02:12.690 --> 00:02:19.020
So while invoking the PRK system called, the question needs to be taken that the address which you

27
00:02:19.020 --> 00:02:25.230
are supplying as an argument to PRK system call is a valid address which belongs to the process which

28
00:02:25.230 --> 00:02:26.250
will address the space.

29
00:02:27.150 --> 00:02:34.020
It should not happen that you are passing the address, which belongs to the stack memory, if you do

30
00:02:34.020 --> 00:02:39.480
that, then the P.A. system will probably fail and it will return minus one.

31
00:02:40.560 --> 00:02:48.600
Now, next, we will going to discuss SB system call so you can see that synopsis of SB aka system call

32
00:02:48.600 --> 00:02:50.330
is again very simple.

33
00:02:52.230 --> 00:02:56.400
The input to SB aka system call is actually an integer.

34
00:02:56.790 --> 00:02:57.210
Right.

35
00:02:57.480 --> 00:03:01.940
And the return value of as we are system call is some address.

36
00:03:02.730 --> 00:03:10.290
So SB aka system call like Biraki System call expensed the heap memory segment such that the breakpoint

37
00:03:10.290 --> 00:03:17.460
or moves towards higher memory by a number of bytes, which is parsed as an argument to Sparkasse system

38
00:03:17.460 --> 00:03:17.810
call.

39
00:03:18.450 --> 00:03:24.240
And what is the return value of, as we are a system called the SB aka system called returns the old

40
00:03:24.240 --> 00:03:25.860
break pointer address.

41
00:03:26.040 --> 00:03:30.450
If SB aka system called succeeds, otherwise it returns null.

42
00:03:31.590 --> 00:03:37.710
So now let us try to understand how Sparkasse system works with the help of an example.

43
00:03:38.920 --> 00:03:47.800
So suppose your process or program makes a system call Esbati with 10 as an argument parsed to the system

44
00:03:47.800 --> 00:03:48.160
called.

45
00:03:49.570 --> 00:03:56.530
So it means that the process is trying to claim 10 bytes of memory from the heap segment of the process,

46
00:03:56.530 --> 00:03:57.760
which will address the space.

47
00:03:58.850 --> 00:04:05.000
So you can see that in the diagram on the right hand side, as a result of invocation of this Sparkasse

48
00:04:05.000 --> 00:04:10.010
system called the Heat Memory segment will expand by 10 bite's.

49
00:04:11.450 --> 00:04:11.880
Right.

50
00:04:13.040 --> 00:04:21.079
So break dash is actually the new value of the pointer, so if the old value of the breakpoint was 600,

51
00:04:21.260 --> 00:04:24.770
then the new value of the pointer will be one hundred and ten.

52
00:04:25.790 --> 00:04:26.210
Right.

53
00:04:26.600 --> 00:04:31.920
So what will be the return value of this, as we system call it, will return a hundred.

54
00:04:32.750 --> 00:04:37.870
That is as Bierko system call returns the old brick pointer address.

55
00:04:38.210 --> 00:04:38.630
Right.

56
00:04:39.080 --> 00:04:46.940
So do not get confused as Bayaka system call returns the old break pointer value and not the new one.

57
00:04:47.810 --> 00:04:55.550
So here is a special case that if you invoke as Biraki with zero as an argument that SB aka system call

58
00:04:55.550 --> 00:05:02.200
will not expand the heap Mahmoudi region, but it simply returns the current value of break pointer,

59
00:05:02.660 --> 00:05:09.350
or in other words, it returns the topmost address of heap memory segment of process which will address

60
00:05:09.350 --> 00:05:09.950
space.

61
00:05:10.850 --> 00:05:13.270
So that was the synopsis of PRK.

62
00:05:13.280 --> 00:05:20.690
And as we are consistent calls now, having understood the concept of PRK and Sparkie, we will now

63
00:05:20.690 --> 00:05:24.050
going to explore that how mallock works.

64
00:05:24.680 --> 00:05:32.540
Remember, Madlock is an API, which is provided by the Standard C library and this API is actually

65
00:05:32.540 --> 00:05:35.600
a wrapper over SB Arcand system call.

66
00:05:36.590 --> 00:05:41.900
So next we will going to discuss the internal implementation of Mallock API.

