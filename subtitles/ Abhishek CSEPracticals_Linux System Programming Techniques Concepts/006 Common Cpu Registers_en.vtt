WEBVTT
1
00:00:05.150 --> 00:00:12.650
So, guys, now it's time to understand the CPU registers, so we are just one step away from understanding

2
00:00:12.650 --> 00:00:16.100
the mechanism of function, call and function returns.

3
00:00:17.150 --> 00:00:23.620
In order to understand pusses of call and return mechanism, we need to understand the purpose of basic

4
00:00:23.660 --> 00:00:28.770
three registers which are used to implement the mechanism of procedure called undertones.

5
00:00:29.420 --> 00:00:31.190
So we have these three registers.

6
00:00:31.190 --> 00:00:34.120
The first register is called Instruction Point to register.

7
00:00:34.820 --> 00:00:41.540
This register stores the address of very next instruction to be executed in some implementation.

8
00:00:41.550 --> 00:00:47.210
This register can also be used to store the address of current instruction, which is being executed.

9
00:00:48.190 --> 00:00:54.880
If that is the case, we simply add one to the value of this instruction pointer, which gives us the

10
00:00:54.880 --> 00:00:58.150
address of the next instruction, which will execute next.

11
00:00:58.900 --> 00:01:05.140
So the same goal that is knowing the very next instruction to be executed can be achieved by either

12
00:01:05.140 --> 00:01:06.070
of the policies.

13
00:01:06.490 --> 00:01:10.900
Then the second resistor is a stack pointer register, stack pointer register.

14
00:01:10.900 --> 00:01:14.100
Alwis stores the address of top of the stack.

15
00:01:14.920 --> 00:01:15.310
Right.

16
00:01:15.610 --> 00:01:18.220
That is the lowest address of the stack memory.

17
00:01:18.940 --> 00:01:21.010
And the third register is a best pointer.

18
00:01:21.010 --> 00:01:29.260
Register based Pointer Register stauss the starting address in the stack frame where cholos based pointer

19
00:01:29.260 --> 00:01:30.530
value is copied.

20
00:01:31.090 --> 00:01:34.860
So basically based on to register is used to store the history.

21
00:01:35.800 --> 00:01:39.140
So I'm sure you have not yet understood this point to register.

22
00:01:39.310 --> 00:01:45.340
So next we will going to understand the usage of all these three registers with the help of an example.

23
00:01:45.790 --> 00:01:49.240
So just have the definition of these three registers in mind.

24
00:01:49.420 --> 00:01:54.150
We will apply these definitions in the next example that we will going to discuss.

25
00:01:54.730 --> 00:01:59.570
And now let us understand that how these three basic registers are used.

26
00:02:00.190 --> 00:02:04.780
Also, note that there are only one instance of these registers CPU.

27
00:02:05.080 --> 00:02:07.480
These registers are not perforated.

28
00:02:07.930 --> 00:02:14.710
These registers are actual piece of small hardware chips which are embedded on your motherboard.

29
00:02:15.340 --> 00:02:15.730
Right.

30
00:02:17.180 --> 00:02:21.740
So these registers are the same as Mammone, which stores the data.

31
00:02:22.550 --> 00:02:29.780
The only difference is that registers are more quickly accessible to the CPU as compared to the RAM

32
00:02:29.780 --> 00:02:30.330
memory.

33
00:02:30.890 --> 00:02:37.280
So for those operations with CPU needs to perform millions of times per second, those operations is

34
00:02:37.280 --> 00:02:40.410
performed by the CPU with the help of registers.

35
00:02:40.700 --> 00:02:44.600
So these three registers are part CPU and not per frame.

36
00:02:46.680 --> 00:02:54.180
So it means that these are global registers, so now let us discuss the usage of these three registers

37
00:02:54.180 --> 00:02:59.450
and understand that how these three register supports procedure call and procedure written.

