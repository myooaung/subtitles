WEBVTT
1
00:00:05.770 --> 00:00:14.740
So, guys, going forward, how do we solve the problem of machine heterogeneity, so let us suppose

2
00:00:14.740 --> 00:00:22.960
that the machine a sense this dalbavie to machine B and C, and let's say that the machine B is a 32

3
00:00:22.960 --> 00:00:31.890
bit machine, whereas machine C is a sixteen bit machine and machine by itself is also a 32 bit machine.

4
00:00:32.290 --> 00:00:34.350
So machine is 32 bit machine.

5
00:00:34.360 --> 00:00:39.150
Machine B is 32 bit machine and machine C is sixteen bit machine.

6
00:00:40.030 --> 00:00:47.170
So we have introduced here the problem of heterogeneity across machines which are communicating with

7
00:00:47.170 --> 00:00:47.700
each other.

8
00:00:48.370 --> 00:00:54.910
So when this deal we are this message is received by machine B and machine C, let us see how machine

9
00:00:54.910 --> 00:01:00.940
B and C will decode to CLV or whether they will be able to decode it or not.

10
00:01:03.090 --> 00:01:10.770
So let us understand this through good discussion so guys, you can see I have read in court on the

11
00:01:10.770 --> 00:01:13.710
right hand side the good deal we want it to.

12
00:01:14.370 --> 00:01:22.650
And this function is used to decode the entire deal with 132 and read the contents of this deal.

13
00:01:23.940 --> 00:01:29.270
So the argument to dysfunction is a starting point to the deal we want to agree to.

14
00:01:29.280 --> 00:01:34.820
That is the point of which points to the starting address of this entire message.

15
00:01:35.790 --> 00:01:36.040
Right.

16
00:01:36.690 --> 00:01:43.740
So let us go through this function line by line and try to understand how are we able to pass this deal

17
00:01:44.040 --> 00:01:45.960
and read the contents of this deal.

18
00:01:47.070 --> 00:01:50.340
So we will assume that we are.

19
00:01:52.130 --> 00:01:59.990
Running this function on a machine, which is 32 bit machine, that is an odd example, let us say that

20
00:01:59.990 --> 00:02:07.100
we are decoding this Dahlby, when received on the machine B, which is 32 bit machine, that is the

21
00:02:07.490 --> 00:02:12.050
size of the unsigned integer type will be four bytes.

22
00:02:12.800 --> 00:02:18.770
So assuming this, let us try to decode this Dahlby using this function.

23
00:02:21.810 --> 00:02:28.350
So you can see that the we point to is actually a pointer that points to the start of this DLC message.

24
00:02:30.110 --> 00:02:33.130
Right, so clearly point that actually points here.

25
00:02:34.960 --> 00:02:39.290
Now, now, here, your knowledge of sea will be tested.

26
00:02:39.310 --> 00:02:42.010
That is how good you are with pointers.

27
00:02:44.450 --> 00:02:49.840
So you can see that the PLB pointer is actually a pointer which points to the character the today,

28
00:02:50.330 --> 00:02:50.680
right?

29
00:02:51.230 --> 00:02:59.150
So putting the aesthetic against this pointer means that you have read one bite of data.

30
00:03:00.530 --> 00:03:06.320
And you are typecasting that one bit of data into the Intisar variable.

31
00:03:07.260 --> 00:03:07.600
Right.

32
00:03:07.890 --> 00:03:15.180
So basically, the first line reads the first bite of the tail, which is 132 and stole the number 132

33
00:03:15.180 --> 00:03:17.640
in this Intisar deal with Depletable.

34
00:03:18.600 --> 00:03:18.930
Right.

35
00:03:19.260 --> 00:03:27.150
So in this line, we have just read the deal with Aidy, which is 32 now, that the only point that

36
00:03:27.150 --> 00:03:28.470
has been incremented.

37
00:03:28.890 --> 00:03:33.810
So the only pointer now points here because it has been incremented by one bite.

38
00:03:34.900 --> 00:03:42.970
Right now, again, the next one bite is actually represents the length of the actual data that is carried

39
00:03:42.970 --> 00:03:52.780
by this deal, we so similarly we will read the next part of this, be using the same concept that is

40
00:03:52.960 --> 00:03:58.930
read the first part of the data, which is pointed by the pointer and typecasts the data as int and

41
00:03:58.930 --> 00:04:02.830
store the data, which is 20 in the data length.

42
00:04:03.550 --> 00:04:10.930
So in this line we have read that the length of the entire data section of the theory is 20 bytes.

43
00:04:12.380 --> 00:04:12.710
Right.

44
00:04:15.170 --> 00:04:22.880
Now, get unit size is an internal function, which takes an argument as the PLB type, which is 32

45
00:04:23.420 --> 00:04:31.670
again, as I said, that the receiving machine must know that if it is a PLB 132, then what is the

46
00:04:31.670 --> 00:04:34.440
size of unit data for that deal?

47
00:04:35.450 --> 00:04:37.400
So that will be a constant.

48
00:04:37.850 --> 00:04:44.120
So I have not shown the definition of dysfunction, but this function just returned the size of unit

49
00:04:44.130 --> 00:04:46.660
data size, given that the LV type.

50
00:04:47.300 --> 00:04:54.170
So this function would return flyoff, which is the size of unit data of artillery 132.

51
00:04:55.240 --> 00:04:55.580
Right.

52
00:04:56.350 --> 00:05:02.030
So unit PLB size is five right now.

53
00:05:02.050 --> 00:05:04.020
Next, we have incremented the pointer again.

54
00:05:04.120 --> 00:05:07.690
So now the pointer points to the start of the data section.

55
00:05:09.150 --> 00:05:12.270
Right, so now we are switching on the PLB type.

56
00:05:13.680 --> 00:05:18.820
And that deal with type cases one thirty two, because the value of deliberativeness 132.

57
00:05:19.860 --> 00:05:25.330
So here we have calculated that the number of units that is carried in this data.

58
00:05:25.860 --> 00:05:27.240
So what are the number of units?

59
00:05:27.240 --> 00:05:34.320
You can always calculate the number of units by dividing the data land with the unit data size.

60
00:05:34.920 --> 00:05:38.130
So revelant is 20 and the unit data size is five.

61
00:05:38.610 --> 00:05:47.090
So number of units that are scattered in this message is for that is for PLB 132 data units.

62
00:05:48.330 --> 00:05:56.880
Now we will iterate these many number of times to pass all the data units of PNB 130 do not directly

63
00:05:56.880 --> 00:05:57.400
come here.

64
00:05:59.280 --> 00:06:06.090
Now, here, we need some discussion so you can see that our current pointer is actually pointing to

65
00:06:06.090 --> 00:06:09.060
the start of the data section of the tail.

66
00:06:09.960 --> 00:06:16.560
So the next thing that we need to do is to read the four bytes because the next to data is an IP address,

67
00:06:16.560 --> 00:06:17.460
which is four byte.

68
00:06:18.930 --> 00:06:22.770
So here you can see that we have defined an IP address.

69
00:06:24.280 --> 00:06:27.370
As an Eddie, so when you write.

70
00:06:29.130 --> 00:06:36.210
Care IP address and defined it as an array of sites, for it means that you have taken a memory of exactly

71
00:06:36.210 --> 00:06:37.020
four bytes.

72
00:06:38.410 --> 00:06:38.780
Right.

73
00:06:39.190 --> 00:06:45.240
So to read for by offer teacher value, you need four bites of memory to store that value.

74
00:06:46.480 --> 00:06:53.230
So simply do CPI, that is copy for bytes of data.

75
00:06:53.740 --> 00:06:59.590
The starting from the point appointed by this pointer that is still a pointer and copy.

76
00:06:59.590 --> 00:07:01.300
Exactly for bytes of data.

77
00:07:02.800 --> 00:07:03.180
Right.

78
00:07:04.830 --> 00:07:13.770
So in this area, you will actually end up in copying the IP address of four bytes and you have to advance

79
00:07:13.770 --> 00:07:18.860
the PLB pointer to here now by incrementing it by four.

80
00:07:20.040 --> 00:07:20.420
Right.

81
00:07:20.790 --> 00:07:25.170
And then you simply have to extract the mosque value.

82
00:07:25.650 --> 00:07:27.750
So most value is one byte.

83
00:07:27.750 --> 00:07:32.820
So you can always extract the most value directly using asterisk.

84
00:07:34.680 --> 00:07:35.140
Right.

85
00:07:35.160 --> 00:07:44.910
And then again, incremented the point, so to point that is at the start of second unit, right?

86
00:07:47.560 --> 00:07:54.250
And remember, you are inside the loop so far, loop will run again, so you can see that you are able

87
00:07:54.250 --> 00:07:59.430
to decode all the data units of the TRV correctly, right.

88
00:08:01.350 --> 00:08:01.740
No.

89
00:08:03.900 --> 00:08:11.640
In the discussion of discord, heavy assume anything which is specific to the machine architecture.

90
00:08:12.530 --> 00:08:19.630
That is, have we done anything which will break if this machine is not 32 bit, but 16 with.

91
00:08:21.180 --> 00:08:28.110
So let us discuss this court again, but now in the context of sixteen bit machine, that is the size

92
00:08:28.110 --> 00:08:32.520
of the unsigned end is sixteen bit or two bytes.

93
00:08:33.990 --> 00:08:40.860
We have just discussed this court in the context of 32 bit machine, that is the size of unsigned is

94
00:08:40.860 --> 00:08:41.490
for worldwide.

95
00:08:42.000 --> 00:08:50.520
But now we are going to discuss this court again, assuming that the size of unsigned end is to bytes

96
00:08:50.520 --> 00:08:50.820
now.

97
00:08:52.950 --> 00:08:53.280
Right.

98
00:08:53.490 --> 00:08:59.370
So, again, let us go through this code, so let us go through this code by assuming that the size

99
00:08:59.370 --> 00:09:05.760
of end and unsigned end is 16 bits or two bytes.

100
00:09:06.690 --> 00:09:11.560
So you can see so clearly point to, again, points to the start of the PLB.

101
00:09:13.360 --> 00:09:13.770
Right.

102
00:09:15.150 --> 00:09:20.310
And you have correctly that the LV type, which is, again, 132, which is again 132.

103
00:09:21.210 --> 00:09:28.020
Now you have advanced the three pointer to point to the next right in that the Elvie, again, you have

104
00:09:28.020 --> 00:09:31.380
read the next byte and the theory, which is 20.

105
00:09:32.750 --> 00:09:40.730
Right now, again, this function will return the unit size of the PLB, which is, again, five that

106
00:09:40.730 --> 00:09:41.340
is constant.

107
00:09:42.230 --> 00:09:44.390
So Unity Aloysius will be five.

108
00:09:46.320 --> 00:09:51.330
Now we are taking a very evil eye, which is a looping variable, and again, we have a incremented

109
00:09:51.330 --> 00:09:53.430
the pointer by one unit.

110
00:09:53.440 --> 00:09:55.750
So the pointer points to the start of the data section.

111
00:09:56.670 --> 00:10:03.840
Remember whether the machine is a 32 bit machine or 16 with machine or 64 with a machine, the size

112
00:10:03.840 --> 00:10:06.660
of the character type is always one bite.

113
00:10:07.560 --> 00:10:10.560
So again, we are switching on the PLB type.

114
00:10:10.560 --> 00:10:13.530
So case one thirty two will be hit again.

115
00:10:13.530 --> 00:10:17.190
The number of any units will be data length divided by the unit data size.

116
00:10:17.200 --> 00:10:18.780
So any units will be again for.

117
00:10:19.470 --> 00:10:20.880
And again we are iterating.

118
00:10:21.480 --> 00:10:25.460
So come to the section that is we are now doing KPA.

119
00:10:26.190 --> 00:10:29.940
So again the IP addresses an array of four bytes.

120
00:10:32.180 --> 00:10:37.640
Right, and again, we are hoping that there'll be a point at which point to the start of the data section

121
00:10:38.360 --> 00:10:44.350
and we copy exactly for why, it's because we have specified for here that is hard coded value.

122
00:10:45.400 --> 00:10:50.380
And again, we increment that three pointer by four bytes or two point two points to the.

123
00:10:53.380 --> 00:10:54.240
Mosque value.

124
00:10:55.690 --> 00:11:00.870
Right, and again, we need the mosque value as usual, and again, we incrementally deal with, though,

125
00:11:01.270 --> 00:11:08.650
so you can see that this court executed identically on a machine which is 32 bit machine or on a machine

126
00:11:08.650 --> 00:11:12.070
which is 16 with machine or on a machine, which is export machine.

127
00:11:13.000 --> 00:11:16.060
This court is independent of the machine architecture.

128
00:11:16.720 --> 00:11:17.190
Why?

129
00:11:17.560 --> 00:11:27.940
Because while copying the data from the TRV to the internal variables like IP address, we have not

130
00:11:27.940 --> 00:11:39.030
used the unsigned int or integer as a data type have used have used anywhere for this purpose.

131
00:11:39.040 --> 00:11:44.770
That is, for copying the data from dalbavie to the internal local variables of this function.

132
00:11:45.610 --> 00:11:46.780
The answer is no.

133
00:11:50.660 --> 00:11:58.280
So you can see that this man, CPI, is actually a statement which is machine agnostic.

134
00:11:59.090 --> 00:12:06.500
That is, it doesn't matter what type of machine it is, this man CPI function will copy or four bytes

135
00:12:06.500 --> 00:12:11.930
of data pointed by the three pointer into four bytes of IP address.

136
00:12:13.680 --> 00:12:13.980
Right.

137
00:12:14.520 --> 00:12:21.360
So because of this function, you are able to read the data correctly from the PLB while being it while

138
00:12:21.360 --> 00:12:29.250
being architecture independent, not instead of dysfunction, that is marked by how do you used this

139
00:12:29.250 --> 00:12:36.930
line or this statement, then your function or discord would have become platform dependent.

140
00:12:37.740 --> 00:12:44.120
Platform dependent means it will depend whether the size of the unsigned end is four bytes or two bytes.

141
00:12:44.970 --> 00:12:53.520
If the size of the unsigned int was four bytes, then this statement would have copied for bytes of

142
00:12:53.520 --> 00:12:57.000
data into your unsigned and IP address.

143
00:12:57.370 --> 00:12:58.870
That is for bytes of data.

144
00:12:59.580 --> 00:13:06.810
And if this machine was two bytes, then this statement that would have copied only two bytes or data

145
00:13:07.080 --> 00:13:15.900
from the PLB to the IP address because the size of the unsigned end data type will be of two bytes.

146
00:13:17.650 --> 00:13:23.410
So all the magic lies in this line that is MCP y and in this line.

147
00:13:24.190 --> 00:13:31.390
So the first line that you are seeing here is actually the platform dependent line, whereas this line

148
00:13:31.390 --> 00:13:37.510
is a platform independent line, while the first line is a platform dependent line because you are making

149
00:13:37.510 --> 00:13:44.850
use of that data type, which is defined by the machine architecture on a 32 bit machine.

150
00:13:44.860 --> 00:13:52.060
It is for based on our 16 with machine, it is terabyte, whereas in memory CPI, the IP address is

151
00:13:52.060 --> 00:13:56.590
a four by Eddie, so as so on different machine.

152
00:13:56.590 --> 00:14:03.580
The size of the card is always one byte and therefore you are not making use of any data type which

153
00:14:03.580 --> 00:14:05.640
is machine dependent.

154
00:14:06.460 --> 00:14:14.320
And therefore this statement is machine agnostic and you will be able to pass that really successfully.

155
00:14:14.560 --> 00:14:21.250
When you decode that, they'll be using this function and using this line number thirty five to read

156
00:14:21.250 --> 00:14:22.600
that they'll be content.

157
00:14:25.480 --> 00:14:31.570
Now, here it is also, well, that what you need to do in the default section, so default section

158
00:14:31.570 --> 00:14:37.630
will hit the receiving machine, do not recognize that there will be 132 write.

159
00:14:39.490 --> 00:14:44.620
That is, the reality machine is not aware of the 132 definition.

160
00:14:46.210 --> 00:14:52.680
Now it is also worth discussing here, the default section here, the default section is very important,

161
00:14:53.530 --> 00:14:53.890
right?

162
00:14:54.220 --> 00:14:57.640
So you can see in the default section we are simply incrementing.

163
00:14:57.640 --> 00:15:00.610
That will be pointer by data length.

164
00:15:01.840 --> 00:15:02.220
Right.

165
00:15:02.680 --> 00:15:10.080
While we are doing this, the receiving machine, which do not recognize this type, will go into the

166
00:15:10.090 --> 00:15:10.960
default case.

167
00:15:11.920 --> 00:15:12.270
Right.

168
00:15:12.520 --> 00:15:16.390
And since that is, the machine is not aware of the deal with definition.

169
00:15:18.050 --> 00:15:19.520
RTL idee.

170
00:15:20.790 --> 00:15:28.140
It is represented by this variable than that receiving machine simply escapes that entire till we present

171
00:15:28.140 --> 00:15:29.010
in the message.

172
00:15:29.490 --> 00:15:35.430
You can see that nothing breaks on the receiving machine if the receiving machine do not recognize any

173
00:15:35.430 --> 00:15:35.910
particular.

174
00:15:36.690 --> 00:15:38.520
It simply skips reading.

175
00:15:38.520 --> 00:15:41.820
The content of that will be present in the message.

176
00:15:44.660 --> 00:15:45.090
Right.

177
00:15:45.110 --> 00:15:50.470
So that's all about the discussion of decoding that they'll be on the receiving machine.

178
00:15:52.290 --> 00:16:02.340
So going forward, so let us now compare it with another scenario, what would have happened if we send

179
00:16:02.340 --> 00:16:05.610
the data as a simple structure on the wire?

180
00:16:06.390 --> 00:16:08.340
That is the deal with definition.

181
00:16:09.840 --> 00:16:17.030
That is what would have happened if the PLB definition was defined as a simple structure that is unsigned

182
00:16:17.340 --> 00:16:20.810
IP address and followed by the mosque value.

183
00:16:21.690 --> 00:16:29.790
So this is the unit data type of PLB 132 that it would have been a problem for receiving machines if

184
00:16:29.790 --> 00:16:34.020
their hardware architecture differs from the sending machine.

185
00:16:34.470 --> 00:16:40.980
Because here again, you are making use of platform dependent data type that is unsigned int.

186
00:16:42.430 --> 00:16:49.730
Which will be four bytes on set, on 32 bit machine and two bytes on a 60 on a sixteen bit machine.

187
00:16:51.250 --> 00:16:52.780
So far, 32 bit machine.

188
00:16:52.990 --> 00:16:53.820
This is structure.

189
00:16:53.830 --> 00:16:59.350
Size will be five bytes and on a sixteen bit machine, this structure size will be three bytes.

190
00:17:00.010 --> 00:17:05.690
So receiving machines which are not compliant with the sending machine would end up reading garbage.

191
00:17:06.670 --> 00:17:09.730
So if the receiving machine had received this message.

192
00:17:11.510 --> 00:17:18.770
And the received message buffer there than what we normally do, we typecast this message as destructible.

193
00:17:18.800 --> 00:17:21.230
We went out to Star, right?

194
00:17:21.530 --> 00:17:25.290
And we have a point at which points to that buffer.

195
00:17:26.000 --> 00:17:32.600
Now, again, we access the IP address, which is the unsigned and member of this structure.

196
00:17:32.990 --> 00:17:37.240
And the entire problem lies in this statement.

197
00:17:37.910 --> 00:17:44.570
This statement would read for by its on a little bit machine and this statement would read two bytes

198
00:17:44.570 --> 00:17:45.790
on a sixteen bit machine.

199
00:17:46.250 --> 00:17:48.050
So a lot of problem.

200
00:17:49.800 --> 00:17:57.690
So to sum up, the values are all about sending and reading the data bite by bite, and every machine

201
00:17:57.690 --> 00:18:00.300
must know people with type definition.

202
00:18:01.200 --> 00:18:08.670
If any machine which receives Dahlby 132 and is not aware of people we want to talk to definition,

203
00:18:08.940 --> 00:18:16.920
then that machine can simply escape passing that theory without breaking anything or without doing any

204
00:18:16.920 --> 00:18:24.420
data corruption that we have already illustrated in the code walkthrough and the default section, we

205
00:18:24.420 --> 00:18:30.870
saw that any machine which do not recognize that particular PLB would execute in the default section

206
00:18:30.870 --> 00:18:34.900
of the statement and does escape the entire we.

207
00:18:36.990 --> 00:18:42.000
So we have just learned how to resolve the problem of machine heterogeneity.

