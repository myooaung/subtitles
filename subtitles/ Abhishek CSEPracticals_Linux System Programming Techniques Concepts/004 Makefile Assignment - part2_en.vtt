WEBVTT
1
00:00:05.730 --> 00:00:13.200
So guys continuing from the previous slide in Makefile V, right, rules, right and rules have the

2
00:00:13.200 --> 00:00:14.310
following syntax.

3
00:00:14.760 --> 00:00:17.400
So you can see that rules have three parts.

4
00:00:17.880 --> 00:00:20.910
The first part is what we want to prepare.

5
00:00:21.270 --> 00:00:23.540
That is the final dish that we want to prepare.

6
00:00:24.270 --> 00:00:30.210
The second part of the rules is that what are the raw materials you need in order to prepare the final

7
00:00:30.210 --> 00:00:30.580
dish?

8
00:00:31.320 --> 00:00:38.220
And the third part of the rule is the recipe or the steps that you will follow in order to prepare the

9
00:00:38.220 --> 00:00:40.950
final dish from the raw materials that you have.

10
00:00:42.330 --> 00:00:44.910
So the Makefile rule has these three parts.

11
00:00:46.020 --> 00:00:49.820
Now let us take an example regarding how to write a make file rule.

12
00:00:50.520 --> 00:00:57.510
So if you recall the dependency tree in order to prepare Licalsi, not a static library, you can see

13
00:00:57.510 --> 00:01:04.200
that in order to prepare this Licalsi, not a static library, you first need all the object files in

14
00:01:04.200 --> 00:01:04.690
hand.

15
00:01:05.760 --> 00:01:09.900
So let us discuss the rules in order to create each of these object files.

16
00:01:13.530 --> 00:01:19.200
So going forward, so in this case, the final dish will be the object file that we will going to prepare.

17
00:01:19.980 --> 00:01:24.280
And of course, we know that the object files are created out of the source file.

18
00:01:25.680 --> 00:01:28.330
So the raw material will be the source file.

19
00:01:29.040 --> 00:01:32.400
And what is the command to create an object file out of source file?

20
00:01:32.820 --> 00:01:37.750
Now, you already know how to compile our source file to create an object file.

21
00:01:39.090 --> 00:01:45.000
So just write a simple compiler command that is DCC hyphen fancy hyphens.

22
00:01:45.030 --> 00:01:50.400
It stands for completion minus I it is Cappotelli minus.

23
00:01:50.400 --> 00:01:58.060
Our flag is used to specify the directory where all the dependent -- are present.

24
00:01:58.740 --> 00:02:05.040
The compiler will search in this directory to look at all the header files which are included in the

25
00:02:05.050 --> 00:02:05.870
source file.

26
00:02:06.540 --> 00:02:12.210
If the header file, which is included by this source file is present in multiple directories, you

27
00:02:12.210 --> 00:02:17.960
can repeat minus I flag followed by directory multiple times in the same line.

28
00:02:18.630 --> 00:02:20.950
We will see this example in the next slide.

29
00:02:21.420 --> 00:02:24.460
So just remember Hyphen Cappotelli.

30
00:02:24.460 --> 00:02:29.700
A flag is used to specify the directory or location of header files.

31
00:02:30.840 --> 00:02:37.650
Next, just to specify the source file, which you want to compile and using minus or specify the name

32
00:02:37.650 --> 00:02:39.990
of the object file that you want to create.

33
00:02:41.230 --> 00:02:48.430
So you can see that this is the part three of the rule, similarly, you can create other object files

34
00:02:48.430 --> 00:02:49.620
in the similar fashion.

35
00:02:50.230 --> 00:02:56.740
So this is the complex underscore Martha, not all object file, which is which requires complex underscore

36
00:02:56.740 --> 00:03:04.000
math, dot see as a raw material source file and the rule to create a complex of the so-called math

37
00:03:04.000 --> 00:03:04.300
dot.

38
00:03:04.300 --> 00:03:06.100
All object file is the following.

39
00:03:07.710 --> 00:03:14.040
Right, so exactly in the similar manner, you can also create drek underscore my thought all object

40
00:03:14.040 --> 00:03:16.430
file following the same approach.

41
00:03:17.710 --> 00:03:24.580
So as for the dependancy tree, now we have all the Elvan elements ready, which are required to prepare

42
00:03:24.580 --> 00:03:27.310
Licalsi a historic library, right.

43
00:03:28.240 --> 00:03:36.880
So here, 11 elements means that all the object files on which Licalsi, not a static library, is directly

44
00:03:37.120 --> 00:03:37.960
dependent.

45
00:03:39.070 --> 00:03:41.830
So now we have all the object files ready.

46
00:03:42.530 --> 00:03:50.200
We are now in a position to write a rule which will prepare Licalsi, not a static library, as a final

47
00:03:50.200 --> 00:03:50.550
dish.

48
00:03:51.070 --> 00:03:56.080
And we already know that static libraries need object files as raw materials.

49
00:03:56.740 --> 00:04:04.630
So to specify all the object file separated by space and you already know the command to create a static

50
00:04:04.630 --> 00:04:08.380
library out of all the dependent object files.

51
00:04:09.520 --> 00:04:15.860
So after this stuff, we have now created our library, which is Licalsi today, right now.

52
00:04:15.880 --> 00:04:21.019
Next, we also want to create an executable because we have main source file.

53
00:04:21.880 --> 00:04:25.060
So now let us discuss the dependency tree of executable.

54
00:04:26.020 --> 00:04:33.070
So in order to create an executable as a final dish, the data dependent component is an object file

55
00:04:33.310 --> 00:04:36.340
correspond to the source file, which contains main function.

56
00:04:37.060 --> 00:04:39.420
Since Endorsee is such a source file.

57
00:04:39.430 --> 00:04:45.040
Therefore, we need mean that all as an object file in order to prepare this executable.

58
00:04:47.460 --> 00:04:54.570
Also, our executables will make use of the library that we have just prepared, so the external library

59
00:04:54.570 --> 00:05:04.260
on which our executable is dependent is Licalsi today and not that on executable is also dependent on

60
00:05:05.100 --> 00:05:10.560
another external library, which is a standard library called Live With My Thought.

61
00:05:10.600 --> 00:05:17.490
So now the question is that right of our executable is dependent on this external standard library.

62
00:05:18.600 --> 00:05:29.490
So it does because in Flyleaf on the school math doxy, if you open this file, I have included the

63
00:05:29.490 --> 00:05:31.770
standard math, not each header file.

64
00:05:33.650 --> 00:05:38.810
And because I'm using sign and cause functions which are inWorld and celebrity.

65
00:05:40.430 --> 00:05:45.890
These functions are actually coming from Matt s old library.

66
00:05:47.140 --> 00:05:53.740
So as we know that in order to create final executable, we need to include all the external libraries

67
00:05:53.740 --> 00:05:55.870
on which are executable, is dependent.

68
00:05:56.830 --> 00:06:04.450
So little metatarsal is that standard external library, which is already existing in your system.

69
00:06:05.780 --> 00:06:12.290
So, guys, going forward now, we have discussed the dependency tree to create our executable as a

70
00:06:12.290 --> 00:06:13.100
final product.

71
00:06:13.460 --> 00:06:19.850
So now let us discuss the rule that we will going to write in our makefile, which honors this dependency

72
00:06:19.850 --> 00:06:27.980
tree so executable is dependent on, of course, the main object file and the external library, the

73
00:06:27.980 --> 00:06:30.950
standard external library that is lip metadata.

74
00:06:30.980 --> 00:06:34.400
So need not to be specified in the rule.

75
00:06:35.990 --> 00:06:43.370
But while writing a recipe to create a final executable, it is important that we specify all the liabilities

76
00:06:43.370 --> 00:06:45.540
on which are executable is dependent.

77
00:06:46.100 --> 00:06:53.300
So here we have specified the external library, which is prepared by us, and here we have specified

78
00:06:53.600 --> 00:06:56.660
the standard lipoma as all library.

79
00:06:57.200 --> 00:07:04.370
You can see that this standard library can be specified by using simply minus L.M. shorthand.

80
00:07:05.830 --> 00:07:14.050
We already know that the step in which we create a final executable is called linking, right?

81
00:07:16.600 --> 00:07:20.990
And of course, this may not all object file also needs to be prepared.

82
00:07:21.370 --> 00:07:27.210
So we need to write one more rule to prepare men, not all object file as a final product.

83
00:07:27.820 --> 00:07:33.430
And you can see that many object file is dependent on all the header files.

84
00:07:34.660 --> 00:07:40.150
If you open a file may not see, you can see that in this main doxy file.

85
00:07:40.510 --> 00:07:43.240
I have hash included all the header files.

86
00:07:44.080 --> 00:07:44.470
Right.

87
00:07:44.980 --> 00:07:46.750
So it is for this reason.

88
00:07:48.860 --> 00:07:53.780
That you need to specify all the directories using minus I Sorich.

89
00:07:55.110 --> 00:08:00.360
Because these directories contains the header file, which is hash included in the source file.

90
00:08:01.660 --> 00:08:07.030
So we have discussed all the rules that we need to put together in one single make file.

91
00:08:08.270 --> 00:08:16.610
So now let us discuss how can we do that so guys, now next we will going to write Makefile in order

92
00:08:16.610 --> 00:08:18.470
to create this final executable.

93
00:08:19.250 --> 00:08:22.890
So you can see that on this black window on the right hand side.

94
00:08:22.910 --> 00:08:27.200
I have opened the editor and I will call up Makefile.

95
00:08:28.440 --> 00:08:34.320
So the very first thing that is in the very first line of the makefile, you have to specify the final

96
00:08:34.320 --> 00:08:37.860
end product that this makefile is supposed to prepare.

97
00:08:38.820 --> 00:08:45.960
In our case, our end product is the final executable and therefore the syntax to specify the end product

98
00:08:45.960 --> 00:08:47.360
is some variable.

99
00:08:47.670 --> 00:08:49.260
So target is not a keyword.

100
00:08:49.260 --> 00:08:55.080
It is just some variable separated by colon and the name of the final product that you want to prepare

101
00:08:56.190 --> 00:09:02.430
in case you want to prepare multiple and products, then you can specify all those and products separated

102
00:09:02.430 --> 00:09:05.580
by space in this first line of the makefile.

103
00:09:06.860 --> 00:09:14.240
Then after that, we need to specify the rules one after another as per the dependency tree, so you

104
00:09:14.240 --> 00:09:21.880
can see that if we recap, we discussed these set of rules to prepare the object, fine.

105
00:09:22.790 --> 00:09:26.830
So just specify these set of rules as it is.

106
00:09:26.840 --> 00:09:28.910
That is copy paste in this make file.

107
00:09:29.690 --> 00:09:34.940
So you can see that I have simply copy pasted all these rules in this file as it is.

108
00:09:35.930 --> 00:09:38.470
And after that we have three more rules.

109
00:09:38.480 --> 00:09:40.880
That is the rule to prepare Licalsi DOT eight.

110
00:09:41.720 --> 00:09:46.580
So here you can specify the rule Licalsi dot as it is, of course.

111
00:09:46.970 --> 00:09:49.420
And then we had two more rules.

112
00:09:49.850 --> 00:09:54.950
That is the rule to prepare the final executable and the rule to prepare mainboard object file.

113
00:09:55.490 --> 00:09:59.600
So you can specify these two rules as it is in the make file.

114
00:10:00.590 --> 00:10:02.420
So you can see that I have done nothing.

115
00:10:02.420 --> 00:10:06.410
I have simply copy pasted the rules that we have discussed in this file.

116
00:10:07.250 --> 00:10:11.300
Please note that you can specify these rules in any order you want.

117
00:10:12.110 --> 00:10:15.350
The order of the rules in the Makefile do not matter.

118
00:10:16.530 --> 00:10:24.270
And after that, I will specify one special rule whose name is clean and I will discuss about this rule

119
00:10:24.270 --> 00:10:31.260
in detail, basically in this rule will delete everything that was built by this makefile, be it object

120
00:10:31.260 --> 00:10:38.790
files, the static library's shared libraries, executables or any other product which was prepared

121
00:10:38.790 --> 00:10:39.840
by this makefile.

122
00:10:40.620 --> 00:10:44.840
I will discuss about this clean rule in detail in the next lecture.

123
00:10:44.860 --> 00:10:45.300
We do.

124
00:10:46.110 --> 00:10:52.110
So you can see that I have this makefile ready and now we will discuss that, how the execution of this

125
00:10:52.110 --> 00:10:54.690
makefile happens step by step.

126
00:10:55.860 --> 00:11:01.680
Also, please be careful that while writing a makefile, make use of tab.

127
00:11:02.690 --> 00:11:09.920
In the front of a line where you specify the recipe to please you step and do not use spaces.

128
00:11:11.690 --> 00:11:14.960
So let us discuss that, how this makefile actually works.

