WEBVTT
1
00:00:07.250 --> 00:00:13.550
So, guys, now next, we will going to discuss pattern matching, so bit by the matching means that

2
00:00:13.550 --> 00:00:21.470
if I give you a random input binary string that is any sequence of zeros and ones, that is we need

3
00:00:21.470 --> 00:00:26.720
to evaluate whether a given input binary is string matches a particular pattern or not.

4
00:00:27.410 --> 00:00:35.570
So for example, let us suppose that the binary strings on the left hand side is the input binary string

5
00:00:35.600 --> 00:00:36.500
that I give you.

6
00:00:36.860 --> 00:00:39.620
So for example, let's say I give you one one zero one.

7
00:00:40.250 --> 00:00:45.920
And the binary string, which is called as base bit pattern, is a pattern of bets against which you

8
00:00:45.920 --> 00:00:51.200
have to match your input binary string and you have to declare the result.

9
00:00:51.200 --> 00:00:56.330
Whether you are binary input, the string matches with the best with part on a string or not.

10
00:00:57.170 --> 00:01:01.250
So here X represents the don't care condition that is don't care bet.

11
00:01:01.820 --> 00:01:08.660
So it simply means that when you try to match your input binary a string with the best bit pattern string

12
00:01:09.140 --> 00:01:10.790
you don't have to consider.

13
00:01:11.990 --> 00:01:18.950
The beds in the basement pattern, which is represented by this don't care symbol, so it means that

14
00:01:18.950 --> 00:01:26.960
in the input by the string, you don't care whether are middle to bits are one zero zero one or whatever

15
00:01:26.960 --> 00:01:27.380
it is.

16
00:01:28.100 --> 00:01:28.550
All right.

17
00:01:29.030 --> 00:01:38.710
All you care is to match these side binary bits against the side, binary bits at the same position

18
00:01:39.050 --> 00:01:40.400
and the base pattern.

19
00:01:41.380 --> 00:01:41.800
All right.

20
00:01:42.130 --> 00:01:49.720
So in this case, it matches similarly looking at the second example, that is no match because this

21
00:01:49.720 --> 00:01:56.140
binary bid doesn't match with this binary bid and the rest three binary bits and that input the string

22
00:01:56.140 --> 00:01:56.800
matches.

23
00:01:57.730 --> 00:01:58.180
All right.

24
00:01:59.120 --> 00:02:04.610
Because these two are don't care, and this one exactly matches with this one.

25
00:02:05.510 --> 00:02:11.450
Similarly, the third input binary is stringing matches with the base, but pattern and now you know

26
00:02:11.450 --> 00:02:12.920
very well why it matches.

27
00:02:13.580 --> 00:02:18.770
Similarly, this binary input the string matches with this base pattern, whereas this do not match

28
00:02:19.070 --> 00:02:25.220
because this binary digit is different from this binary digit at the same position, whereas we do not

29
00:02:25.220 --> 00:02:28.160
care about this one and zero, whether the match or not.

30
00:02:28.670 --> 00:02:36.680
And this binary bit is same as this binary bit, but because of this mismatch, this input binary string

31
00:02:36.680 --> 00:02:39.080
doesn't match with this base pattern.

32
00:02:39.650 --> 00:02:40.070
All right.

33
00:02:41.000 --> 00:02:44.480
Now you must be thinking, what is the use case of this kind of pattern matching?

34
00:02:44.780 --> 00:02:47.240
So there exist many real world use cases.

35
00:02:47.240 --> 00:02:53.360
For example, you want to block all the traffic, which destination IP address is of the following format.

36
00:02:54.080 --> 00:03:02.090
So as long as your traffic contains destination IP address such as 100 or 200 dot any number from one

37
00:03:02.090 --> 00:03:06.710
to 255 dot any number from one to 255.

38
00:03:07.040 --> 00:03:09.380
You'll want to block all that traffic.

39
00:03:10.220 --> 00:03:10.610
All right.

40
00:03:11.240 --> 00:03:18.260
And there is a data structure called Andrae, which is used a bit pattern matching very heavily.

41
00:03:18.500 --> 00:03:23.450
And such a data structure is used to implement access control list and firewalls.

42
00:03:24.110 --> 00:03:29.210
So if you are not aware of your networking enough, you may miss out at this point that what exactly

43
00:03:29.210 --> 00:03:29.780
that means.

44
00:03:30.230 --> 00:03:36.260
But what I want to convey some real world practical use cases were bit pattern matching is extensively

45
00:03:36.260 --> 00:03:36.560
used.

46
00:03:36.890 --> 00:03:42.620
So in the next lecture we do, I will show you the strategy of the steps that how you can implement

47
00:03:42.620 --> 00:03:48.080
pattern matching in which you also have to accommodate these don't care bits and the base and put panel

48
00:03:48.890 --> 00:03:54.140
and keep this technique in your good books because in the interviews you may asks, you may be asked

49
00:03:54.140 --> 00:03:54.800
this question.

50
00:03:55.790 --> 00:04:00.290
You may be asked some questions, which depends on the matching directly or indirectly.

