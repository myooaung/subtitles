WEBVTT
1
00:00:06.860 --> 00:00:12.980
So, guys, now let me show you our first implementation and demonstration of our Taimur, the source

2
00:00:12.980 --> 00:00:16.270
code that I will going to discuss is present in this part.

3
00:00:16.760 --> 00:00:22.580
So I have already pointed you to the guitar directory in that getup that actually just navigate to this

4
00:00:22.580 --> 00:00:23.150
part.

5
00:00:23.600 --> 00:00:28.010
And the file that I will going to discuss is Taimur example, demo one not see.

6
00:00:28.820 --> 00:00:35.040
I will also assure you that after creating this one short timer, how to convert one short time on into

7
00:00:35.040 --> 00:00:35.890
a periodic timer.

8
00:00:36.200 --> 00:00:36.590
Right.

9
00:00:37.480 --> 00:00:44.170
So now let me implement our first timer, so I'm in the final time, for example, one Tadmore, one

10
00:00:44.170 --> 00:00:50.460
doxy, and you can see that I have already included certain halophiles.

11
00:00:50.950 --> 00:00:56.890
Now, the high profile signal NorTech and timed out at all the required halophiles, and they are mandatory

12
00:00:57.070 --> 00:00:59.140
if you are working with Linux timers.

13
00:00:59.380 --> 00:00:59.800
Right.

14
00:01:00.370 --> 00:01:06.430
Whereas the rest of the hydrofoils you need to include, as you tend to use more functions from the

15
00:01:06.580 --> 00:01:06.850
G.

16
00:01:06.850 --> 00:01:07.790
Lipsey library.

17
00:01:08.060 --> 00:01:08.410
Right.

18
00:01:10.770 --> 00:01:16.960
But mind that these two high profile mandatory to work with timers, so let's proceed.

19
00:01:17.640 --> 00:01:24.690
So the very first thing that I would do is to write a function which will just print the current system

20
00:01:24.690 --> 00:01:25.080
time.

21
00:01:25.560 --> 00:01:25.940
Right.

22
00:01:26.400 --> 00:01:28.740
So this is how you print the current system time.

23
00:01:28.770 --> 00:01:34.440
Just take a variable of type time, underscore T and use the function time.

24
00:01:34.800 --> 00:01:36.390
The function time will.

25
00:01:37.440 --> 00:01:44.130
Put the current system time in the variable t, and then you can simply print the current system time

26
00:01:44.400 --> 00:01:45.810
using your time function.

27
00:01:46.110 --> 00:01:46.510
Right.

28
00:01:46.890 --> 00:01:50.670
In fact, there are many ways to fetch the current system time and print it.

29
00:01:50.680 --> 00:01:52.980
But this is just one of the way, right?

30
00:01:54.100 --> 00:01:59.200
So when our timer fires, we will going to print the current system time on the screen so that we would

31
00:01:59.200 --> 00:02:08.380
know that our timer is firing as per the expiration time we will set right now, let us take some user

32
00:02:08.380 --> 00:02:09.380
defined data structure.

33
00:02:09.400 --> 00:02:10.949
It could be any data structure.

34
00:02:11.290 --> 00:02:16.660
So, for example, I've just taken a data structure, which is a pair of two numbers that is and be

35
00:02:16.690 --> 00:02:17.770
as simple as that.

36
00:02:18.070 --> 00:02:18.410
Right.

37
00:02:18.970 --> 00:02:21.790
I couldn't think of any simpler than that.

38
00:02:22.900 --> 00:02:29.050
And as we discussed while we were discussing the theory that every timer is associated with the callback

39
00:02:29.050 --> 00:02:32.390
function, right, that is timer callback function.

40
00:02:32.770 --> 00:02:36.700
So I will going to implement that timer callback function here.

41
00:02:38.780 --> 00:02:44.090
And you can see that the prototype of this time are called back function is in accordance to what we

42
00:02:44.090 --> 00:02:46.340
discussed in our discussion, right.

43
00:02:48.570 --> 00:02:54.720
The argument to this function is of the type unions sequel, and within this argument is hidden, they

44
00:02:54.720 --> 00:02:56.660
use it to find the right structure, right.

45
00:02:57.620 --> 00:03:03.950
So you can see that I'm simply fetchingly user defined data structure, which was our peer variable,

46
00:03:04.190 --> 00:03:04.660
right.

47
00:03:04.670 --> 00:03:06.020
And it's a global variable.

48
00:03:08.450 --> 00:03:12.590
And in this time, a callback function, I'm simply printing the values of NPR.

49
00:03:13.010 --> 00:03:20.030
So basically you can see that my intention is that that every time the timer fires, this time a callback

50
00:03:20.030 --> 00:03:21.370
function will be triggered.

51
00:03:21.680 --> 00:03:28.970
And from this argument, people are going to fetch the user defined data structures and then I will

52
00:03:28.970 --> 00:03:31.690
going to print those user defined data structures.

53
00:03:31.910 --> 00:03:32.230
Right.

54
00:03:32.960 --> 00:03:38.660
So expectation is that that every time the timer fires, I should see this output on the screen.

55
00:03:38.900 --> 00:03:39.350
Right.

56
00:03:41.090 --> 00:03:45.200
So this was a very, very simple implementation of the timer callback.

57
00:03:47.840 --> 00:03:50.450
Now, let us see how to implement the actual timer.

58
00:03:54.860 --> 00:04:02.810
So, guys, now going forward, so let me start with the main function as usual, so you can see that

59
00:04:02.810 --> 00:04:09.650
I'm writing a function timer, Damul, and it is in this function that is timer demo that I was going

60
00:04:09.650 --> 00:04:13.230
to implement the entire code to create a timer.

61
00:04:13.460 --> 00:04:13.880
Right.

62
00:04:14.480 --> 00:04:21.860
So I will do nothing extra, but only do whatever we discussed in the in our report.

63
00:04:22.100 --> 00:04:22.540
Right.

64
00:04:23.880 --> 00:04:32.040
So to begin with, I will just take a sick event type of vegetable, because this vegetable was used

65
00:04:32.040 --> 00:04:34.530
to set the properties of the timer, right.

66
00:04:36.060 --> 00:04:41.510
And then let me take a timer variable, because it is this timer that we were going to create.

67
00:04:41.760 --> 00:04:42.160
Right.

68
00:04:42.600 --> 00:04:44.760
So I'm taking this time out as a local variable.

69
00:04:44.760 --> 00:04:46.110
But there is no such rule.

70
00:04:46.110 --> 00:04:49.290
You can kalac the memory for this timer, right.

71
00:04:50.070 --> 00:04:51.240
Depending on your need.

72
00:04:52.020 --> 00:04:54.750
So let me initialize this time available to zero.

73
00:04:55.950 --> 00:04:59.280
And so let me initialize the EVP variable.

74
00:04:59.280 --> 00:05:07.860
Also right now, you can see aspart the theory we need to set the three members of this EVP variable

75
00:05:07.860 --> 00:05:10.050
to appropriate values.

76
00:05:10.320 --> 00:05:10.710
Right.

77
00:05:10.950 --> 00:05:13.620
The first one is appointed to the callback function.

78
00:05:13.840 --> 00:05:19.500
The second one is the address of user defined in a structure, and the third one is a constant, which

79
00:05:19.500 --> 00:05:21.630
is S.A.G. with third value.

80
00:05:21.870 --> 00:05:22.270
Right.

81
00:05:23.190 --> 00:05:32.160
So I will do the same thing that I will going to initialize the civil BTR member of this EVP data structure

82
00:05:32.160 --> 00:05:33.930
to the user defined in that structure.

83
00:05:34.380 --> 00:05:34.820
Right.

84
00:05:35.160 --> 00:05:43.350
So was our user defined object whose address I'm assigning to this as I value pointer.

85
00:05:43.620 --> 00:05:44.040
Right.

86
00:05:45.120 --> 00:05:53.330
Similarly, I will also go ahead and assign the way we would like to invoke our callback function,

87
00:05:53.340 --> 00:05:57.600
so I would like to invoke our callback function in the context of a separate thread.

88
00:05:58.080 --> 00:05:58.490
Right.

89
00:05:58.860 --> 00:06:00.660
This also we're discussing Altieri.

90
00:06:01.350 --> 00:06:09.390
And finally, the third member of this SBP variable is the function which we want to be invoked when

91
00:06:09.390 --> 00:06:10.590
the timer expires.

92
00:06:10.830 --> 00:06:11.190
Right.

93
00:06:11.610 --> 00:06:15.960
So this is the address of the time, a callback function, which we have already implemented.

94
00:06:16.230 --> 00:06:16.680
Right.

95
00:06:17.250 --> 00:06:22.030
So you can see that all the three members of this EVP variable has been set.

96
00:06:22.410 --> 00:06:26.800
Right now, it's a time for us to actually create a timer.

97
00:06:27.030 --> 00:06:27.460
Right.

98
00:06:28.050 --> 00:06:32.520
So what I will going to do is that I will invoke an API timer, create.

99
00:06:32.790 --> 00:06:33.240
Right.

100
00:06:34.020 --> 00:06:37.680
And as we discussed that this API accepts three argument.

101
00:06:37.920 --> 00:06:41.210
The first argument is the type of timer that we want to create.

102
00:06:41.700 --> 00:06:42.080
Right.

103
00:06:42.360 --> 00:06:46.830
So the most common type of timer that we use is the clock real time.

104
00:06:47.190 --> 00:06:47.550
Right.

105
00:06:47.970 --> 00:06:53.130
So it's a constant value that you should specify as a first argument to this function timer create.

106
00:06:53.730 --> 00:06:58.410
The second argument is the address of the EVP variable, which we have already initialized.

107
00:06:58.770 --> 00:07:04.410
And the third argument is our address of this timer, which we are creating.

108
00:07:04.590 --> 00:07:05.040
Right.

109
00:07:05.670 --> 00:07:12.470
So as soon as this timer create function returns, it simply means that our timer has been initialized.

110
00:07:12.900 --> 00:07:14.760
It is not yet alarmed.

111
00:07:14.940 --> 00:07:17.190
The timer has not yet begun running.

112
00:07:17.520 --> 00:07:18.090
Right.

113
00:07:20.010 --> 00:07:26.340
So not that the return value of this time create function decides whether the timer has been created

114
00:07:26.340 --> 00:07:32.190
or not, the return value is less than zero if some error has occurred.

115
00:07:32.520 --> 00:07:35.030
Otherwise, it is a positive value.

116
00:07:35.220 --> 00:07:35.620
Right.

117
00:07:35.970 --> 00:07:42.120
And in case the return value is less than zero, then you can always print the error code.

118
00:07:42.450 --> 00:07:42.900
Write.

119
00:07:46.250 --> 00:07:50.840
So now with this, we have successfully created the timer, but this time it is not running.

120
00:07:51.290 --> 00:07:59.650
Now, the next step is that that we need to specify the expiration timer of the timer.

121
00:07:59.840 --> 00:08:04.820
That is, after how many seconds or nanoseconds we want our timer to fire.

122
00:08:06.480 --> 00:08:11.940
So, again, I will do the same thing which were discussing the theory, I will simply take the item

123
00:08:11.940 --> 00:08:13.470
or aspect type of variable.

124
00:08:13.830 --> 00:08:14.320
Right.

125
00:08:14.880 --> 00:08:21.840
And as we discussed in the theory, I will simply say that it value member of this item was packed in

126
00:08:21.840 --> 00:08:26.250
a structure to five seconds and zero nanosecond.

127
00:08:26.460 --> 00:08:26.840
Right.

128
00:08:27.630 --> 00:08:35.640
So it simply means that our timer would fire after five seconds and zero nanoseconds after the timer

129
00:08:35.640 --> 00:08:36.510
has started.

130
00:08:36.780 --> 00:08:43.340
Right now, in our theory discussion, we skipped out the discussion of this interval member.

131
00:08:43.740 --> 00:08:45.990
So let it initialized to zero for now.

132
00:08:45.990 --> 00:08:47.730
I will come back to it shortly.

133
00:08:48.180 --> 00:08:49.800
And now everything is set up.

134
00:08:49.800 --> 00:08:53.070
So it's a time to actually start the timer, right.

135
00:08:53.880 --> 00:08:58.320
So starting off the timer is done by using the API timer set time.

136
00:08:58.710 --> 00:08:59.160
Right.

137
00:08:59.700 --> 00:09:04.020
And you can see that I'm simply passing the timer type of variable here.

138
00:09:04.350 --> 00:09:10.020
Not that you don't have to pass the address of the timer, but actually the value of the timer that

139
00:09:10.020 --> 00:09:11.130
is passed by value.

140
00:09:11.370 --> 00:09:14.910
And you also need to pass the address of the item.

141
00:09:14.910 --> 00:09:17.790
I respected a structure in which we have set the time.

142
00:09:18.210 --> 00:09:18.620
Right.

143
00:09:19.890 --> 00:09:27.150
So as soon as this call returns, it means that your timer countdown has started right again, this

144
00:09:27.150 --> 00:09:31.350
function returns negative value if error has occurred for some reason.

145
00:09:32.400 --> 00:09:40.200
So, again, you can simply test the return value of this API and print the message in case you want

146
00:09:40.200 --> 00:09:42.430
to know that what type of error has occurred.

147
00:09:42.630 --> 00:09:43.040
Right.

148
00:09:43.320 --> 00:09:46.290
Otherwise, our timer has successfully alarmed.

149
00:09:46.590 --> 00:09:49.440
Alarm means our timer has successfully started.

150
00:09:49.920 --> 00:09:50.310
Right.

151
00:09:51.150 --> 00:09:57.260
So all this logic I have implemented the function timer Damul and I will invoke this function timer

152
00:09:57.260 --> 00:10:03.200
Jammal from the main function and also note that you would not want your process to.

153
00:10:03.210 --> 00:10:08.560
And so you should put a pause function here to use a pause function.

154
00:10:08.580 --> 00:10:10.200
You must include the header file.

155
00:10:10.200 --> 00:10:12.600
You need to do not atch, right?

156
00:10:13.900 --> 00:10:21.150
So you can see that we have covered all the three steps of creation of the timer and running the timer

157
00:10:21.150 --> 00:10:24.140
after setting the properties of the timer.

158
00:10:24.420 --> 00:10:24.810
Right.

159
00:10:26.520 --> 00:10:32.100
So guys from the time are director, you can simply compile the program using this command.

160
00:10:33.270 --> 00:10:36.150
Right, and.

161
00:10:37.860 --> 00:10:44.430
So this is the compilation and you can create an executable using the following come on now, note that

162
00:10:44.430 --> 00:10:50.450
in order to create an executable Vueling, you need to link the program with the art library.

163
00:10:50.730 --> 00:10:51.150
Right.

164
00:10:51.420 --> 00:10:55.410
So you need to open minus Alata option.

165
00:10:56.970 --> 00:10:59.490
While creating an executable, right?

166
00:11:01.160 --> 00:11:04.010
And now simply you can execute that executable.

167
00:11:07.820 --> 00:11:11.030
So you can see as soon as I run the executable.

168
00:11:12.770 --> 00:11:19.160
You can see that exactly after five seconds, the timer fires and it prints are global variable that

169
00:11:19.160 --> 00:11:20.840
despair 10 20, right.

170
00:11:22.160 --> 00:11:24.950
And since this time, there was only one short timer.

171
00:11:25.990 --> 00:11:33.820
Therefore, it fired only once at this point of time, your program is called on our POS system gone.

172
00:11:34.270 --> 00:11:41.260
Right, and the timer has already executed and the timer callback, which was invoked, has done has

173
00:11:41.260 --> 00:11:42.180
done its job.

174
00:11:42.790 --> 00:11:44.710
So currently it's no fun.

175
00:11:44.710 --> 00:11:45.090
Right.

176
00:11:45.100 --> 00:11:47.310
So let us do something else with our timer.

177
00:11:48.040 --> 00:11:56.600
So remember that we limit the discussion of this EITE interval member of this time back.

178
00:11:56.860 --> 00:11:57.250
Right.

179
00:11:58.030 --> 00:12:01.530
So now let us discuss what is the use of this EITE interval member?

180
00:12:01.930 --> 00:12:06.360
This member is also used to specify some time interval in second, a nanosecond.

181
00:12:06.520 --> 00:12:06.940
Right.

182
00:12:07.480 --> 00:12:15.270
So not that it interval is used to convert your timer from one shot to periodic.

183
00:12:15.940 --> 00:12:23.440
So here, if I only specify five, it simply means that for the first time your timer will expire as

184
00:12:23.440 --> 00:12:33.250
per the value of its value member and after first expiration, your timer will fire periodically as

185
00:12:33.250 --> 00:12:36.210
per the value set in the interval number.

186
00:12:36.580 --> 00:12:36.930
Right.

187
00:12:37.420 --> 00:12:43.180
So first expedition will take five seconds, whereas second, third, fourth and so on.

188
00:12:43.180 --> 00:12:47.170
Exploration's will again trigger after every five seconds.

189
00:12:47.770 --> 00:12:50.790
This will you need not be same as to its value.

190
00:12:51.370 --> 00:12:53.080
These values can be different.

191
00:12:53.080 --> 00:12:57.100
For example, let's say I mentioned here some aggressive value, which is three.

192
00:12:57.640 --> 00:12:58.060
Right.

193
00:12:58.510 --> 00:13:05.650
So it means that your timer will take five seconds to fire from the time when timer set time API was

194
00:13:05.650 --> 00:13:14.030
invoked and thereafter every invocation or expiration of the timer will trigger after every three seconds.

195
00:13:14.710 --> 00:13:19.150
So again, let us compile and run the program.

196
00:13:23.360 --> 00:13:32.240
So you can see the first explanation, I expect to happen at thirty eight second and after that, after

197
00:13:32.240 --> 00:13:37.880
every three seconds, the timer will continue to fire and it will fire forever.

198
00:13:38.360 --> 00:13:38.710
Right?

199
00:13:39.020 --> 00:13:40.340
There is no limit.

200
00:13:41.940 --> 00:13:48.830
So simple things that that it intervale, if you specified what the second set nanosecond as zero,

201
00:13:49.020 --> 00:13:53.130
it simply means that your timer is one shot and it will fire only once.

202
00:13:53.470 --> 00:14:00.960
But if you specify the value of any of these parameters to non-zero, then your timer becomes periodic.

203
00:14:01.400 --> 00:14:01.710
Right.

204
00:14:03.450 --> 00:14:09.480
So now in the next couple of lecture videos, we will explore more what we can do with this timer.

205
00:14:09.690 --> 00:14:10.080
Right.

206
00:14:10.590 --> 00:14:14.220
There is still a lot of things we can do with this timer.

