WEBVTT
1
00:00:05.580 --> 00:00:12.250
So, guys, going forward, I expect you that you have written to fires, that is diesel dot ads and

2
00:00:12.250 --> 00:00:18.430
Diesel D'Arcy and provide the implementation of at least these two functions, which we have discussed.

3
00:00:19.020 --> 00:00:22.900
Now it is time to see our small library in action.

4
00:00:23.580 --> 00:00:27.580
So for that purpose, go to the directory application integration.

5
00:00:28.650 --> 00:00:36.870
Now, if you go to this directory application integration, you will see application dot C file in addition

6
00:00:36.870 --> 00:00:39.580
to the dot C and the dot as file.

7
00:00:40.200 --> 00:00:46.920
So application dot see file is a file which actually represents our application, which make use of

8
00:00:46.920 --> 00:00:49.770
doubly linked list library that we have just written.

9
00:00:52.550 --> 00:00:59.120
So if you see the implementation of application grazi file, it's fairly, very simple file, you can

10
00:00:59.120 --> 00:01:03.460
see that in this main function we are actually creating certain objects.

11
00:01:03.770 --> 00:01:10.010
In this example, we have taken person underscore T as an application, the specific data structure.

12
00:01:10.520 --> 00:01:14.100
So it has three fields, which is name IDs and weight.

13
00:01:14.690 --> 00:01:21.320
So remember, it is application specific data structure and we want to create objects of this structure

14
00:01:21.320 --> 00:01:29.600
using mallock or Kellock system call, and then we make our link list library to hold these objects.

15
00:01:29.960 --> 00:01:35.900
So you can see that after creating three objects in the main function, that this person, one person

16
00:01:35.900 --> 00:01:41.600
to and person three, I'm actually now creating the list.

17
00:01:41.930 --> 00:01:49.130
And after creating a linked list, I am actually adding these three objects to our linked list.

18
00:01:49.460 --> 00:01:55.910
So you should now verify that our linked list is actually capable to hold the application of specific

19
00:01:55.910 --> 00:01:56.390
data.

20
00:01:56.840 --> 00:02:01.190
So for that purpose, I have written a function print person database.

21
00:02:01.760 --> 00:02:08.780
So Person DB is nothing, but it is a name of a linked list which holds the record of type person data

22
00:02:08.780 --> 00:02:09.320
type.

23
00:02:11.210 --> 00:02:18.860
So bring person database does nothing, it simply outraged over the entire doubly linked list and for

24
00:02:18.860 --> 00:02:25.150
each note offered doubly linked list, it actually prints the data, which is held by the Lord of Linked

25
00:02:25.220 --> 00:02:25.600
list.

26
00:02:26.570 --> 00:02:26.870
Right.

27
00:02:27.200 --> 00:02:28.310
So fairly easy.

28
00:02:28.310 --> 00:02:29.430
Simple example.

29
00:02:30.530 --> 00:02:39.410
Also, one thing to note here is that that application got seesaws file must include the dot at file

30
00:02:39.860 --> 00:02:46.910
because in this source file we are actually using the functions which have been declared in this dot

31
00:02:47.310 --> 00:02:47.870
or file.

32
00:02:48.830 --> 00:02:49.210
Right.

33
00:02:51.810 --> 00:02:57.330
Now, in the next step, let us see how to compile the program and run it on Linux platform.

34
00:02:59.560 --> 00:03:06.060
So you can see in this slide, you should always be able to compile our source file independently,

35
00:03:06.550 --> 00:03:12.430
so in our case, we have to source files that is application Nazi and the Nazi.

36
00:03:13.300 --> 00:03:18.210
So here is the command that is written in order to compile the source file.

37
00:03:18.670 --> 00:03:23.590
Just type out these commands on the terminal and you should be able to compile the source file.

38
00:03:25.260 --> 00:03:31.290
So this is the here is the name of the compiler, minus G is a flag, which we will discuss later,

39
00:03:31.590 --> 00:03:40.080
minus C is actually used to specify that you want to compile our source file and minus all flag is used

40
00:03:40.080 --> 00:03:45.800
to actually indicate the name of the output file, which will be produced after compilation.

41
00:03:46.470 --> 00:03:53.280
So probably it is very basic thing for you, but I'm assuming that not all the students have ever worked

42
00:03:53.280 --> 00:03:58.220
on Linux platform and therefore I have to explain these things in a little bit detail.

43
00:03:58.890 --> 00:04:04.980
So if you already have a background that how to run and compile see programs on Linux platform, you

44
00:04:04.980 --> 00:04:07.720
can actually fast forward this particular lecture.

45
00:04:08.580 --> 00:04:14.550
So I expect you to try out these commands in the terminal and see that you should be able to compile

46
00:04:14.730 --> 00:04:17.630
application tazi and be able to see the source file.

47
00:04:18.209 --> 00:04:24.720
So after completion you will have the two object files that is application dot org and the dot org.

48
00:04:26.020 --> 00:04:33.670
Now, the third step is the step where you will actually create a final executable, so final executable

49
00:04:33.670 --> 00:04:37.480
is what you will finally execute and see the output of a program.

50
00:04:37.900 --> 00:04:45.040
In order to create an executable, you need to run this command that is Dixy minus G and specify the

51
00:04:45.040 --> 00:04:47.050
name of all the object files.

52
00:04:47.230 --> 00:04:51.860
So in this case, we have two object files and minus all XY.

53
00:04:51.880 --> 00:04:56.950
So X is our executable, which will be which will be produced.

54
00:04:58.650 --> 00:05:05.700
So easy is our executable, which will be produced by this command, and once you have ETECSA simply

55
00:05:05.700 --> 00:05:14.480
run the executable by using EXI so you can see that the first two steps are called completion steps.

56
00:05:14.490 --> 00:05:19.800
That is, you are actually compiling the source file to create an object file in the third step.

57
00:05:20.220 --> 00:05:22.740
The third step is called the linking stamp.

58
00:05:23.130 --> 00:05:28.440
That is, you are using all the object files together to create a final executable.

59
00:05:28.890 --> 00:05:33.300
And the final step is the stuff where you actually run the executable.

60
00:05:34.620 --> 00:05:40.470
In another module of this course, we will see in detail that what happens when you actually compile

61
00:05:40.680 --> 00:05:47.250
a source file and what happens when you actually link all the object files together in order to create

62
00:05:47.250 --> 00:05:48.510
a final executable.

63
00:05:50.830 --> 00:05:56.770
So compilation and linking are actually two separate process, and we will going to study these two

64
00:05:56.770 --> 00:05:58.560
separate process in detail.

