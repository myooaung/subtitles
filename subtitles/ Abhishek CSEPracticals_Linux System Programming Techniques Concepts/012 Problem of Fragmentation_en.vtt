WEBVTT
1
00:00:05.340 --> 00:00:06.630
So welcome back, guys.

2
00:00:07.320 --> 00:00:10.260
So now let us discuss the problem of fragmentation.

3
00:00:11.680 --> 00:00:15.650
So consider a snapshot of the memory segment as shown above.

4
00:00:16.079 --> 00:00:21.580
Right, you can see that the breakpoint that points to the top of each memory segment.

5
00:00:22.180 --> 00:00:26.530
Now suppose the process issues the request for additional terabytes of memory.

6
00:00:27.100 --> 00:00:31.840
So now you can see that there are two or three data blocks of 16 bytes each.

7
00:00:32.229 --> 00:00:32.650
Right.

8
00:00:34.260 --> 00:00:39.230
So together they can satisfy the new Mallak request of CISE 20 bite's.

9
00:00:40.200 --> 00:00:47.640
But since they are not consecutive blocks in that Heap memory segment, these blocks together cannot

10
00:00:47.640 --> 00:00:51.070
be used to provide 20 bytes of requested memory.

11
00:00:52.200 --> 00:00:56.700
So this problem is called the problem of memory fragmentation.

12
00:00:57.540 --> 00:01:06.000
So in general, memory fragmentation is a problem which arises when, despite having enough memory already

13
00:01:06.510 --> 00:01:13.550
operating system, you still need to extend the hip region further to satisfy the new memory request.

14
00:01:14.850 --> 00:01:22.500
So you can see in this example, the operating system has to extend the hip and further by pushing the

15
00:01:22.500 --> 00:01:29.750
big pointer towards higher address in order to satisfy the request of 20 bytes of additional memory.

16
00:01:30.710 --> 00:01:39.410
Despite the fact that thirty two bites of free memory was already present in the memory segment, but

17
00:01:39.410 --> 00:01:47.360
this 32 bytes of memory could not be used to satisfy the request for 20 bites of memory because these

18
00:01:47.360 --> 00:01:52.260
32 bites of memory was not contiguous in the memory segment.

19
00:01:52.700 --> 00:02:00.860
So now the fragmentation can be categorized into two types the internal fragmentation and external fragmentation.

20
00:02:01.340 --> 00:02:05.240
So now let us discuss what is internal and external fragmentation.

21
00:02:07.150 --> 00:02:14.320
So now let us discuss the internal fragmentation so considered a snapshot of deep memory segment as

22
00:02:14.320 --> 00:02:21.450
shown in the diagram, suppose the process issues the request of 10 bytes of additional memory, right.

23
00:02:22.690 --> 00:02:27.340
So you can see that 30 bytes of free data block will undergo a split.

24
00:02:27.790 --> 00:02:28.230
Right.

25
00:02:30.000 --> 00:02:38.100
So after a split, this is the snapshot of his memory segment, so you can see that it has created a

26
00:02:38.100 --> 00:02:43.860
small town by its off three day to block this eight byte of data block.

27
00:02:43.860 --> 00:02:51.510
In the second diagram, which results from the block splitting is unusable memory for all mallock request,

28
00:02:52.260 --> 00:02:54.210
whose size is greater than eight bytes.

29
00:02:55.260 --> 00:03:01.540
In other words, a bolt of memory is internally fragmented, which results from block splitting.

30
00:03:02.250 --> 00:03:10.020
So we say that this memory is internally fragmented memory now coming to the external fragmentation

31
00:03:10.800 --> 00:03:13.710
as a snapshot of the memory segment in the diagram.

32
00:03:14.610 --> 00:03:19.310
Now suppose process issues are requests for 20 bytes of additional memory.

33
00:03:20.250 --> 00:03:28.800
So you can see that we have two, three, 16 bytes of data blocks and these two 16 bytes of data blocks

34
00:03:28.800 --> 00:03:32.160
are suffice to satisfy the request of 20 bytes.

35
00:03:32.640 --> 00:03:39.660
But still, we cannot allocate this request because 16 bytes are noncontiguous in the heat memory segment.

36
00:03:40.610 --> 00:03:48.140
And hence cannot be Mosed, so these three blocks are set to be externally fragmented memory, which

37
00:03:48.140 --> 00:03:52.200
is unusable by virtue of being noncontiguous.

38
00:03:52.820 --> 00:03:58.810
So in a nutshell, Ahepe, memory management suffers from the problem of fragmentation.

39
00:03:59.240 --> 00:04:06.110
So internal fragmentation happens because of block splitting, whereas external fragmentation happens

40
00:04:06.350 --> 00:04:11.720
by virtue of three data blocks being not contiguous in the heat memory segment.

