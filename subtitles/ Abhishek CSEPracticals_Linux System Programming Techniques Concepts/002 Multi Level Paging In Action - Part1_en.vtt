WEBVTT
1
00:00:05.650 --> 00:00:11.770
So, guys, now let us discuss the configuration of the system with respect to which we will going to

2
00:00:11.770 --> 00:00:15.170
discuss the example of multi-level purging.

3
00:00:15.850 --> 00:00:19.430
So let us say that our system has the following configuration.

4
00:00:20.170 --> 00:00:25.420
Suppose the virtual addresses that is generated by the CPU is it which long?

5
00:00:27.310 --> 00:00:31.140
And let us suppose that the size of page is four byte.

6
00:00:31.660 --> 00:00:37.570
So it also means that the size of frame of a physical memory is also four bytes.

7
00:00:38.870 --> 00:00:43.650
Let's say that the total main memory that our system has is sixty four bytes.

8
00:00:44.320 --> 00:00:52.180
So how many frames into which this main memory is divided into simply six to four divided by four is

9
00:00:52.180 --> 00:00:53.830
equal to sixteen frames.

10
00:00:54.340 --> 00:00:54.740
Right.

11
00:00:55.540 --> 00:01:01.600
And let us assume that the size of each page table entry is just one byte.

12
00:01:03.620 --> 00:01:08.090
So this is the configuration that our system has now.

13
00:01:08.120 --> 00:01:13.130
We can calculate certain parameters based on the configuration of a system.

14
00:01:14.090 --> 00:01:20.630
For example, the size of total which will address the space of a process, is two hundred and fifty

15
00:01:20.630 --> 00:01:21.500
six bytes.

16
00:01:21.920 --> 00:01:22.400
Right.

17
00:01:23.720 --> 00:01:31.550
And frame size is equal to the size, which is four bytes, which will address composition, will going

18
00:01:31.550 --> 00:01:33.110
to be six plus two bits.

19
00:01:33.740 --> 00:01:35.210
Now why it is like that.

20
00:01:36.290 --> 00:01:39.170
Because the frame size is four bytes.

21
00:01:39.680 --> 00:01:44.870
It means that in one frame of mind memory there are four physical addresses.

22
00:01:45.860 --> 00:01:54.210
Therefore you need to in order to uniquely identify a physical address within a frame of a main memory.

23
00:01:54.860 --> 00:02:01.610
Therefore, what religious composition needs to be exploited as six plus two bits because two is an

24
00:02:01.610 --> 00:02:03.060
offset within a frame.

25
00:02:04.460 --> 00:02:11.150
Now, in multilevel packaging, the size of the base table has to be equal to the size of a page, which

26
00:02:11.150 --> 00:02:12.170
is four bytes.

27
00:02:12.890 --> 00:02:19.190
So it is compulsory that in multilevel paging scheme, the size of the peace table has been reduced

28
00:02:19.190 --> 00:02:23.690
and has been made fixed of the size of a page, which is four bytes.

29
00:02:24.710 --> 00:02:32.240
Now, number of entries in a page table was going to be for Y because size of each entry of the table

30
00:02:32.240 --> 00:02:36.130
is one byte and the size of a page table is four bytes.

31
00:02:36.530 --> 00:02:40.490
So clearly the number of entries in a page table will going to be four.

32
00:02:40.490 --> 00:02:42.520
Divided by one is equal to four.

33
00:02:43.640 --> 00:02:49.610
Now a number of books required to index into a single page table will going to be two, right?

34
00:02:49.880 --> 00:02:52.130
Because there are four entries on the page table.

35
00:02:52.140 --> 00:02:57.620
So you need two bits in order to index an entry into a page table.

36
00:02:59.960 --> 00:03:08.600
Now that you need to as an index into the page table, the six bits, that is these six words, these

37
00:03:08.600 --> 00:03:12.650
six words are divided into three levels of indexing.

38
00:03:13.190 --> 00:03:17.330
The first two is used to index into the first level of being stable.

39
00:03:19.020 --> 00:03:26.790
But next, toolbox is used to index into second level table and the next two bits are used to index

40
00:03:26.790 --> 00:03:28.350
into third level page table.

41
00:03:30.700 --> 00:03:37.630
And physical addresses is six bits, right, to six births, because we have taken the size of the main

42
00:03:37.660 --> 00:03:39.640
mammary as 60 four bites.

43
00:03:40.300 --> 00:03:41.500
So to restore the power.

44
00:03:41.530 --> 00:03:44.260
Six is equal to 64.

45
00:03:45.490 --> 00:03:47.410
So does in our example.

46
00:03:47.410 --> 00:03:50.770
We need to map it with the virtual address to six.

47
00:03:50.800 --> 00:03:52.280
But physical address.

48
00:03:52.900 --> 00:03:58.060
So now let us see the above configuration pictorially and the next slide.

49
00:03:59.530 --> 00:04:03.030
So you can see in this diagram, a lot of things are going on.

50
00:04:04.000 --> 00:04:10.600
So you can see that a CPU generates an eight, but which will address and you can see that the last

51
00:04:10.600 --> 00:04:17.170
two bits of this virtual address are dedicated to be used as an offset, whereas the first six words

52
00:04:17.200 --> 00:04:20.230
are used as an indexing to the page tables.

53
00:04:21.100 --> 00:04:28.240
The first six bits of these tables, in turn, is divided into three sets of two bits each.

54
00:04:29.110 --> 00:04:36.340
We shall discuss that, how each of these set of foubert each is used as an indexing into multilevel

55
00:04:36.340 --> 00:04:36.820
paging.

56
00:04:38.230 --> 00:04:42.510
Now you can see that on this slide you can see seven panes tables.

57
00:04:43.390 --> 00:04:49.930
This is a top level page table and you can see that the number of entries in each of these pages table

58
00:04:49.930 --> 00:04:50.680
is four.

59
00:04:52.510 --> 00:04:59.540
Now you can see that there is a number which is written against each page table in this slide, right?

60
00:05:00.100 --> 00:05:06.270
So this is actually the physical address in the main memory at which this table is loaded.

61
00:05:06.940 --> 00:05:13.700
So you can see that this table p0 is loaded at physical address party in the main memory.

62
00:05:14.440 --> 00:05:20.140
So in the main memory, you can assume that in this frame, 10 top level pays No.

63
00:05:20.140 --> 00:05:21.460
Zero is loaded.

64
00:05:22.560 --> 00:05:31.080
Similarly, Piers, no one thought one is loaded at physical address aid in main memory, so here is

65
00:05:31.080 --> 00:05:34.030
no one, but one is loaded in frame number two.

66
00:05:35.670 --> 00:05:42.300
So since there are seven paid stable's in use, you can see that the frames of the physical memory which

67
00:05:42.300 --> 00:05:47.740
are in yellow color, are those frames which are loaded with plates table.

68
00:05:48.930 --> 00:05:56.430
So our very first objective that is is split a large piece table into smaller pieces table has been

69
00:05:56.430 --> 00:06:04.650
achieved and you can see that beds, tables can be loaded in any available frame number in memory.

70
00:06:05.460 --> 00:06:10.620
So you can see that beds, tables are actually scattered throughout the main memory.

71
00:06:12.210 --> 00:06:18.180
There is no need to reserve one big chunk of physical memory in order to load.

72
00:06:19.170 --> 00:06:20.910
All the peace tables together.

73
00:06:22.540 --> 00:06:30.360
Now, coming to the page table entry, you can see that second column of the peace table actually shows

74
00:06:30.400 --> 00:06:37.420
the physical address, that is the address in the main memory at which the next level peace table is

75
00:06:37.420 --> 00:06:38.020
installed.

76
00:06:38.860 --> 00:06:46.780
So in this example, you can see that because we have an entry number eight in this column of page table,

77
00:06:46.990 --> 00:06:53.890
it means that the next level peace table, which is P1 dot one, is loaded at physical address aid in

78
00:06:53.890 --> 00:06:54.820
physical memory.

79
00:06:56.030 --> 00:07:02.720
Similarly, Penn State will be one Dautry is lauded as physical address 24 in main memory.

80
00:07:04.020 --> 00:07:09.660
Because top level pasodoble has an entry 24 in its second index.

81
00:07:11.780 --> 00:07:18.800
Similarly, coming to the number one doctor, you can see that at physical at the trial, in the main

82
00:07:18.800 --> 00:07:24.680
memory, the next level, that is the second level, stable people two is loaded.

83
00:07:26.820 --> 00:07:33.270
Now, the final level of this hierarchy is actually the second level of beds, tables, now, these

84
00:07:33.600 --> 00:07:40.530
tables actually stools the frame number into which the data of our interest is located.

85
00:07:41.740 --> 00:07:44.950
Now, let us see how multilabel page is done.

