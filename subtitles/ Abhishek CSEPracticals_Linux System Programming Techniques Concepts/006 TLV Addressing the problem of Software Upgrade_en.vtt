WEBVTT
1
00:00:06.260 --> 00:00:11.780
So, guys, next we will going to discuss how to really solve the problem of software upgrade.

2
00:00:13.130 --> 00:00:19.460
So let us say that we have three daughters and the quality and all the three daughters are aware of

3
00:00:19.460 --> 00:00:28.640
PLB 132 definition, that is Dahlby 132 message is being prepared by the Routley and it is being received

4
00:00:28.640 --> 00:00:31.640
by the Dr. B and C without any problem.

5
00:00:33.330 --> 00:00:33.640
Right.

6
00:00:33.960 --> 00:00:41.840
And let us also assume that all the doubters that is ABC are of the same architecture, right?

7
00:00:42.210 --> 00:00:44.510
That is, they are identical machines.

8
00:00:46.230 --> 00:00:53.820
Now, what will happen if the routley belongs to a vendor, let's say Cisco and Oracle, B and C belongs

9
00:00:53.820 --> 00:00:56.550
to the vendor, C, Juniper.

10
00:00:58.840 --> 00:00:59.170
Right.

11
00:00:59.560 --> 00:01:06.490
So let us assume that Cisco has upgraded its software and as a result of upgrading the software.

12
00:01:08.160 --> 00:01:12.450
And the Cisco has added a new PLB to the protocol.

13
00:01:15.210 --> 00:01:23.490
So you can see that the message on the machine it is now has to deal with statistically 132 and the

14
00:01:23.850 --> 00:01:30.000
be two hundred and twenty two so that the LV definition of PLB be two to two is nothing.

15
00:01:30.000 --> 00:01:30.830
It's simple.

16
00:01:30.840 --> 00:01:35.220
That is six bytes, which is actually represents the Mac address.

17
00:01:36.180 --> 00:01:36.520
Right.

18
00:01:36.810 --> 00:01:40.470
So it contains two units of PLB.

19
00:01:40.500 --> 00:01:41.970
Two hundred and twenty two.

20
00:01:43.850 --> 00:01:52.140
Right now, when the machine prepares this entire message, which contains the 132 and PLB two to two,

21
00:01:52.520 --> 00:01:54.920
what will happen to the machine beat and machine?

22
00:01:54.920 --> 00:01:55.350
See?

23
00:01:56.750 --> 00:02:04.530
So let's assume that the software running on the machine has been upgraded and that software now recognizes

24
00:02:04.550 --> 00:02:06.140
the with two to two.

25
00:02:07.370 --> 00:02:14.240
And similarly, the software running on the machine C has been upgraded and it also recognizes that

26
00:02:14.240 --> 00:02:16.040
there'll be two hundred and twenty two.

27
00:02:17.420 --> 00:02:24.120
But the software running on the machine B has not been upgraded and it does not recognizes that the

28
00:02:24.120 --> 00:02:25.390
PLB two to two.

29
00:02:26.990 --> 00:02:27.270
Right.

30
00:02:27.980 --> 00:02:34.880
That was in the sort of statement there is a there will not be a case two to two like this.

31
00:02:35.120 --> 00:02:41.530
There will be no case like this because Machine B is not aware of the V two hundred and twenty two.

32
00:02:41.900 --> 00:02:50.870
So the deal with the code function will execute in the default section event whenever it receives Article

33
00:02:50.870 --> 00:02:52.270
V, two hundred and twenty two.

34
00:02:52.790 --> 00:02:55.790
So we can see that the machine has been upgraded.

35
00:02:56.480 --> 00:03:04.040
Machine B has been upgraded, but the machine C is not upgraded because it still do not recognize the

36
00:03:04.040 --> 00:03:04.550
PLB.

37
00:03:04.550 --> 00:03:05.960
Two hundred and twenty two.

38
00:03:08.660 --> 00:03:15.410
So when the Machine B will receive this entire message, you can refer to the political function that

39
00:03:15.410 --> 00:03:23.990
we had just discussed and you will see that it will that the machine B will able to read that there'll

40
00:03:23.990 --> 00:03:25.660
be 132 successfully.

41
00:03:25.970 --> 00:03:31.100
But when it comes to that, there'll be two hundred and twenty to the machine.

42
00:03:31.100 --> 00:03:35.210
BPL with decoder function will hit the default.

43
00:03:38.190 --> 00:03:41.230
Case and in default, guess what we do?

44
00:03:41.250 --> 00:03:44.220
We simply skips the entire Elvie.

45
00:03:46.100 --> 00:03:46.440
Right.

46
00:03:46.880 --> 00:03:54.110
So the end result is that that even if the software is upgraded on machine and machine C, but not upgraded

47
00:03:54.110 --> 00:04:00.830
on machine B, the machine B will continue to function like before, when all the machines A, B and

48
00:04:00.830 --> 00:04:02.930
C were not upgraded.

49
00:04:05.700 --> 00:04:06.120
Right.

50
00:04:06.990 --> 00:04:16.740
So the existing functionality continues to run between machines A, B and C, however, machine and

51
00:04:16.740 --> 00:04:18.300
C can now participate

52
00:04:21.320 --> 00:04:28.500
in new functionality that is implemented by the deal with two hundred and twenty two, because both

53
00:04:28.500 --> 00:04:32.670
the machine and C recognize that they'll be two hundred and twenty two.

54
00:04:35.160 --> 00:04:43.650
But the machine will not be able to will not be able to be a part of that new functionality, but we

55
00:04:43.650 --> 00:04:50.220
have achieved the purpose of we hear that as a part of upgrading the software on certain notice and

56
00:04:50.220 --> 00:04:58.590
the topology that alters the rotors, which are not operated in the topology, continue to function

57
00:04:58.590 --> 00:04:59.440
as before.

58
00:05:00.630 --> 00:05:06.210
That is, the old behavior or the old functionality is not broken.

59
00:05:07.410 --> 00:05:12.930
So we have just learned how to Elvie solves the problem of software upgrade also.

60
00:05:14.220 --> 00:05:20.080
So this is all about tell these guys maybe you will have a short assignment on PLB.

61
00:05:20.580 --> 00:05:21.150
Thank you.

