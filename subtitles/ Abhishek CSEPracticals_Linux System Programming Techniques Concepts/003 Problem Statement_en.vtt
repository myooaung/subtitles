WEBVTT
1
00:00:05.240 --> 00:00:10.640
So, guys, now continuing from the previous lecture we do now, let us discuss what is the problem

2
00:00:10.880 --> 00:00:16.760
you can face if you design your library in this way so you can see your application doxies the source

3
00:00:16.760 --> 00:00:18.560
Wildwoods is trying to access.

4
00:00:18.770 --> 00:00:25.550
So in your application doxie file, what if somebody tries to reinvent the wheel and try to write his

5
00:00:25.550 --> 00:00:29.480
own note in session called in his application, which could be buggy?

6
00:00:29.840 --> 00:00:37.610
It simply means that in your application doxy file, a developer could attempt to write his own version

7
00:00:37.610 --> 00:00:39.550
of lintels note in social function.

8
00:00:40.400 --> 00:00:45.680
So in the first place, why is he reinventing the wheel when Linklaters and such function is already

9
00:00:45.680 --> 00:00:46.300
provided?

10
00:00:46.610 --> 00:00:50.930
And the second problem is that that the linked list and social function that the developer is going

11
00:00:50.930 --> 00:00:55.240
to write in his application dot seesaws file could be buggy.

12
00:00:55.550 --> 00:00:56.900
It may not work well.

13
00:00:58.010 --> 00:01:02.720
So you have developer was able to introduce a bug because he was a spoiled child.

14
00:01:02.720 --> 00:01:02.990
Why?

15
00:01:02.990 --> 00:01:08.570
He was a spoiled child because he was trying to write a code in his application doxies was wild, which

16
00:01:08.570 --> 00:01:10.150
he is not supposed to write.

17
00:01:10.700 --> 00:01:13.950
He had the privileges to all the worlds of the library.

18
00:01:14.150 --> 00:01:15.440
Now, what is the world here?

19
00:01:15.650 --> 00:01:20.330
The world here is that internal members of the linked list, not data structure.

20
00:01:20.720 --> 00:01:21.140
Right.

21
00:01:21.350 --> 00:01:27.320
That is Nords member and he exploded them because he did not know how to use this wealth wisely.

22
00:01:27.650 --> 00:01:34.370
We assume that the developer had introduced a bug while writing his own version of Linklaters insertion

23
00:01:34.370 --> 00:01:37.100
code in his application, Doxie Sourcefire.

24
00:01:37.460 --> 00:01:44.180
And he was able to introduce the bug because he had all the access to the internal members of the node

25
00:01:44.180 --> 00:01:45.620
of a link listed a structure.

26
00:01:46.840 --> 00:01:54.640
So to prevent this problem, if we take the access of all the wealth from this spoiled developer, the

27
00:01:54.640 --> 00:01:57.970
developer will not be able to misuse of the wealth.

28
00:01:58.030 --> 00:02:04.030
Why he would not be able to make the misuse of this wealth because he do not have an access to the wealth

29
00:02:04.030 --> 00:02:04.900
in the first place.

30
00:02:05.200 --> 00:02:09.990
Now, let me translate this analogy to the problem that we are discussing here.

31
00:02:10.479 --> 00:02:17.830
If we restrict the access of the North's internal members in application DOT Seesaws file, that nobody

32
00:02:17.830 --> 00:02:23.340
shall be able to write any new code which requires access to the Nords internal members.

33
00:02:23.710 --> 00:02:24.080
Right.

34
00:02:25.390 --> 00:02:31.150
It means that in application doxie source file, if you try to access the internal members of the new

35
00:02:31.170 --> 00:02:37.120
data structure, you will get the compilation error if you try to compile application tazi source file.

36
00:02:37.950 --> 00:02:45.180
Right, not only that, you cannot even use size of operator on the load data structure, sorry, this

37
00:02:45.180 --> 00:02:49.140
is this data structure that is linked list, not under scooty.

38
00:02:49.470 --> 00:02:56.040
So not only not having access to the internal members of the Lord of a linked list, you cannot even

39
00:02:56.040 --> 00:03:01.680
call the size of operator to know the size of the Lord of the linked list.

40
00:03:02.870 --> 00:03:08.930
The only thing that the developer is allowed to do is to make use of the public APIs, which is provided

41
00:03:08.930 --> 00:03:10.030
by this high profile.

42
00:03:10.790 --> 00:03:16.910
Other than that, we are taking away all the privileges from the developer, from having any direct

43
00:03:16.910 --> 00:03:21.450
access to any internal members of our data structures.

44
00:03:21.680 --> 00:03:25.730
In this case, our data structure is nothing, but it is a node of a link list.

45
00:03:26.450 --> 00:03:32.150
If we take away access to all the internal members of our data structure, the developer will never

46
00:03:32.150 --> 00:03:37.940
be in a position to write any new code in his application doxie source file.

47
00:03:39.820 --> 00:03:45.700
So now the question is how to achieve it, how to prevent the developer from having access to the Internet.

48
00:03:45.750 --> 00:03:51.070
Members of our data structures, but at the same time, the developer should be able to create a node

49
00:03:51.070 --> 00:03:57.280
of a linked list and perform the operations on these more of a linked list using public APIs exposed

50
00:03:57.280 --> 00:03:58.400
by this header file.

51
00:03:59.470 --> 00:04:03.100
So the solution is we achieve it using opaque pointers.

