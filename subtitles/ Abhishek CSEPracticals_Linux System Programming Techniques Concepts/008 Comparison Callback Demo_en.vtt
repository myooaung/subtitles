WEBVTT
1
00:00:05.480 --> 00:00:11.600
So, guys, now let us see that how our application can make use of this comparison function, call

2
00:00:11.600 --> 00:00:20.100
back so that the application can program the list to store and organize the data in the sorted order.

3
00:00:21.170 --> 00:00:21.400
Right.

4
00:00:21.950 --> 00:00:28.970
So you can see that I am opening the file application DOT see, which represents our application.

5
00:00:30.110 --> 00:00:34.570
And we have already discussed the implementation of this student comparison function.

6
00:00:35.030 --> 00:00:41.060
So let us instead of a jump to the main function, so its main function, what we are doing, we are

7
00:00:41.060 --> 00:00:43.550
simply creating student records.

8
00:00:44.190 --> 00:00:50.300
Now this time we have created for student records and then we have created a list, just all these phone

9
00:00:50.300 --> 00:00:50.870
records.

10
00:00:52.460 --> 00:00:58.460
Now you can see that in this line, the application is doing the registration of comparison function

11
00:00:58.730 --> 00:01:00.530
with the library.

12
00:01:02.080 --> 00:01:08.680
So in other words, the application is teaching or giving the intelligence to the library to how to

13
00:01:08.680 --> 00:01:11.500
compare the two objects of type student.

14
00:01:12.250 --> 00:01:18.510
And after that, the application is now inserting student objects in a list.

15
00:01:20.340 --> 00:01:26.930
Now, you can see that in order to insert the data, we are invoking the function dial priority insert

16
00:01:26.940 --> 00:01:27.430
data.

17
00:01:27.990 --> 00:01:35.580
So this function will take the responsibility to insert the object in a linked list at appropriate position

18
00:01:35.730 --> 00:01:40.080
so that the linked list builds up in the sorted order.

19
00:01:40.770 --> 00:01:47.400
So you can see that this is the implementation of this function and this function, make use of this

20
00:01:47.400 --> 00:01:54.720
comparison function callback, which is provided by the application in order to compare the object that

21
00:01:54.720 --> 00:01:59.180
is being inserted with the object that is held by the Lord of the list.

22
00:01:59.490 --> 00:02:01.140
So that I see the demonstration.

23
00:02:01.770 --> 00:02:07.800
So you can see that I'm compiling the program using make and simply run the executable.

24
00:02:08.789 --> 00:02:16.350
So you can see that the records are added in the linked list library in the sorted order as per our

25
00:02:16.350 --> 00:02:17.210
criteria.

26
00:02:17.670 --> 00:02:18.060
Right.

27
00:02:18.450 --> 00:02:25.080
You can compare the records in which they are displayed here with the sequence in which the records

28
00:02:25.080 --> 00:02:27.210
were inserted into the list.

29
00:02:28.230 --> 00:02:35.070
So you can see that whenever there is a tie on the basis of name, then the record with the lesser its

30
00:02:35.070 --> 00:02:37.550
value would appear first in the linked list.

31
00:02:38.310 --> 00:02:43.530
Right, because we have written our comparison function with this logic.

32
00:02:44.710 --> 00:02:50.350
So the takeaway is that we can register the companies and function in order to build our data structure,

33
00:02:50.360 --> 00:02:53.590
such as link list trees in the sort of manner.

