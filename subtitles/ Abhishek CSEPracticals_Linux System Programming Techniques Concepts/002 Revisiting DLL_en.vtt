WEBVTT
1
00:00:05.920 --> 00:00:12.730
So, guys, going forward, I suppose your application uses a link list to maintain the records of the

2
00:00:12.730 --> 00:00:13.370
students.

3
00:00:14.200 --> 00:00:20.840
Now you want details of a student who is rule number is eight zero zero four zero zero.

4
00:00:21.520 --> 00:00:26.710
So obviously, you will iterate over this list and return the matching result.

5
00:00:27.130 --> 00:00:27.520
Right.

6
00:00:28.690 --> 00:00:33.550
So the rule number of a student is a property which uniquely identifies the student.

7
00:00:34.030 --> 00:00:36.520
So rule number is a key, right?

8
00:00:37.090 --> 00:00:42.940
So in order to search a student in this linked list, you will obviously I tripped over all the nodes

9
00:00:42.940 --> 00:00:44.140
of a link list.

10
00:00:44.740 --> 00:00:48.550
So you would have written application function such as the one below.

11
00:00:49.180 --> 00:00:54.410
So, for example, you are maintaining a link list which holds the records of a student.

12
00:00:54.940 --> 00:00:58.510
So let us say that such a list is called student.

13
00:00:59.410 --> 00:00:59.810
Right.

14
00:01:00.220 --> 00:01:06.060
And the second parameter that we are passing to this function is rule number, which is a certain key.

15
00:01:06.640 --> 00:01:06.960
Right.

16
00:01:07.390 --> 00:01:13.720
So you will definitely going to write this function that is such a student by rule number in your application.

17
00:01:15.540 --> 00:01:21.210
So this function will outrage over a linked list and return the matching result.

18
00:01:21.450 --> 00:01:26.340
And, of course, the return result will be off by a student, right.

19
00:01:27.150 --> 00:01:33.990
Similarly, how do you use the list to maintain the records of employees keyed by employee I.D.?

20
00:01:34.140 --> 00:01:37.820
Such function would have been something like this, right.

21
00:01:38.760 --> 00:01:40.680
So this is just another example.

22
00:01:41.520 --> 00:01:47.310
So you would have to write as many search functions as you are using doubly linked list to maintain

23
00:01:47.310 --> 00:01:48.960
records of different type.

24
00:01:49.380 --> 00:01:49.740
Right.

25
00:01:50.070 --> 00:01:56.670
So in this example, you are using linked list to store the records of students as well as to store

26
00:01:56.670 --> 00:01:58.130
the records of employees.

27
00:01:58.680 --> 00:02:04.080
So your application is using two different linked lists and therefore your application needs to write

28
00:02:04.260 --> 00:02:05.800
two different search functions.

29
00:02:06.600 --> 00:02:09.150
So let us discuss the code in the following part.

30
00:02:09.150 --> 00:02:13.560
That is library designing slash programmable lab slash application doxy.

31
00:02:14.960 --> 00:02:19.680
So here is the code and let us discuss this code.

32
00:02:20.480 --> 00:02:22.100
So as you can see that.

33
00:02:24.170 --> 00:02:30.140
The file that I am discussing is Application Darkseid, so it means that I am discussing the application,

34
00:02:30.410 --> 00:02:35.050
which is using doubly linked list in order to organize and store its data.

35
00:02:36.170 --> 00:02:41.440
So in this case, the application is using two data types, the first data type, that is a student

36
00:02:41.440 --> 00:02:48.440
who represents the student information, which includes the name of the student age and weight and rule

37
00:02:48.440 --> 00:02:49.460
number of the student.

38
00:02:50.030 --> 00:02:55.880
Then we have a function which simply takes an argument, the pointer to the student record, and it

39
00:02:55.880 --> 00:02:58.400
simply print all the fields of the student.

40
00:02:58.970 --> 00:03:02.730
So we will use this function whenever we need to print the details of the student.

41
00:03:03.590 --> 00:03:09.980
Then we have another functions which outraged over at doubly linked list, which is holding the record

42
00:03:09.980 --> 00:03:11.500
of data type student.

43
00:03:12.470 --> 00:03:12.870
Right.

44
00:03:13.430 --> 00:03:20.930
And in this function, we I tripped over this linked list and we print the details of each student record

45
00:03:20.930 --> 00:03:24.410
that is held by each node of this list.

46
00:03:25.190 --> 00:03:25.420
Right.

47
00:03:25.760 --> 00:03:28.120
So things are pretty much simple and straightforward.

48
00:03:29.240 --> 00:03:36.260
Similarly, as the second example, our application also maintains another type of data called employee

49
00:03:36.740 --> 00:03:40.220
and following are the fields of employee data structure.

50
00:03:40.880 --> 00:03:47.000
Right in the same way, we have written a function which is used to print the employee details, and

51
00:03:47.000 --> 00:03:53.030
we have another function which will iterate over a doubly linked list, which is holding the records

52
00:03:53.030 --> 00:03:54.440
of data type employer.

53
00:03:55.130 --> 00:04:01.310
Now, as we discussed that, whenever you need to search in a linked list in order to find a particular

54
00:04:01.310 --> 00:04:05.540
record based on a key, you will write the search functions, right?

55
00:04:05.990 --> 00:04:10.610
So this is the implementation of the two search functions, right?

56
00:04:11.210 --> 00:04:12.820
You will write to search functions.

57
00:04:12.830 --> 00:04:15.830
One is for a student and another one is for the employer.

58
00:04:16.700 --> 00:04:22.660
And you can see the implementation of these two functions is pretty simple and straightforward.

59
00:04:23.390 --> 00:04:30.530
You simply iterate over a linked list and you examine the data that is held by each node of a linked

60
00:04:30.530 --> 00:04:35.210
list, and you compare the rule number with the rule number, which is parsed as an argument.

61
00:04:35.990 --> 00:04:36.440
Right.

62
00:04:36.620 --> 00:04:42.770
And if the match occurs, then you return the data pointer, that is the data held by that particular

63
00:04:42.770 --> 00:04:44.350
node of a link list.

64
00:04:44.930 --> 00:04:48.810
So basically you are returning a matching record out of these functions.

65
00:04:50.030 --> 00:04:52.020
So let us discuss the main function now.

66
00:04:52.760 --> 00:04:56.600
So in main function, we are actually creating the student record here.

67
00:04:56.600 --> 00:05:02.330
You can see and we are simply filling the fields of the student in this record.

68
00:05:02.690 --> 00:05:04.460
So we are creating three records.

69
00:05:04.460 --> 00:05:12.200
That is a student one, student two and student three, right after creating these three student.

70
00:05:12.200 --> 00:05:14.390
Then we create a link list.

71
00:05:15.590 --> 00:05:16.000
Right.

72
00:05:16.220 --> 00:05:18.920
And let us go on this list as student.

73
00:05:19.880 --> 00:05:22.370
Now we have a link list.

74
00:05:22.650 --> 00:05:29.840
Now we will add all these three students, one after the another, to this list by calling the function

75
00:05:30.110 --> 00:05:31.840
add data to deal.

76
00:05:32.540 --> 00:05:36.260
We have already implemented this function in the beginning of the scores.

77
00:05:36.920 --> 00:05:41.900
So basically at this point of time, you have a linked list which is holding three student records.

78
00:05:42.710 --> 00:05:50.240
Right now I'm calling the function such a student by Rollerball and you are passing the pointer to the

79
00:05:50.540 --> 00:05:52.860
link list and you are passing the key.

80
00:05:53.780 --> 00:05:59.270
So this function will simply return the student with the rule number eight 00, four 00.

81
00:05:59.870 --> 00:06:00.290
Right.

82
00:06:00.890 --> 00:06:08.300
And we are simply printing the details of that particular student, the exact same exercise we have

83
00:06:08.300 --> 00:06:09.930
done for employee structure.

84
00:06:09.950 --> 00:06:12.680
Also, we have created three employee records.

85
00:06:12.680 --> 00:06:15.730
That is employer one, employee two and three.

86
00:06:16.220 --> 00:06:20.950
We have created a linked list and we have inserted three employee records.

87
00:06:21.470 --> 00:06:28.630
Now, next, we search the employee record in a linked list whose employee is one zero zero two sorry,

88
00:06:28.640 --> 00:06:30.380
one triple zero two.

89
00:06:31.160 --> 00:06:36.740
And once we locate such a record, then we simply put in the details of that record in this list.

90
00:06:37.640 --> 00:06:42.920
So it looks like we are discussing very obvious thing and therefore I will not spend much time on this.

91
00:06:42.920 --> 00:06:46.340
And let's go forward and let's proceed further.

92
00:06:47.770 --> 00:06:55.750
We will now make modifications to this list library and to this application doxy code in order to understand

93
00:06:55.750 --> 00:07:00.400
that how we can program our library and make use of it.

