1
00:00:03,840 --> 00:00:06,000
[Autogenerated] So how do we bring this together?

2
00:00:06,000 --> 00:00:07,540
Well,

3
00:00:07,540 --> 00:00:09,900
there are a couple of things we have to do to plug

4
00:00:09,900 --> 00:00:12,640
spring security into the Web application.

5
00:00:12,640 --> 00:00:15,040
To make sure we get the password and code it set up

6
00:00:15,040 --> 00:00:19,740
correctly For the web application configuration,

7
00:00:19,740 --> 00:00:21,740
we have to add another method.

8
00:00:21,740 --> 00:00:24,540
So we have a method called Configure Global.

9
00:00:24,540 --> 00:00:29,540
The prime it has passed this method are passed in automatically by spring.

10
00:00:29,540 --> 00:00:32,840
Here we're passing in authentication manager builder.

11
00:00:32,840 --> 00:00:35,650
I use a detailed service and a password encoder.

12
00:00:35,650 --> 00:00:38,950
We take the authentication manager builder and tell it

13
00:00:38,950 --> 00:00:41,040
what use the detail service to use.

14
00:00:41,040 --> 00:00:44,840
And that's going to be an implementation off our user details services.

15
00:00:44,840 --> 00:00:48,190
And we also tell it what password encoded to use by calling

16
00:00:48,190 --> 00:00:51,330
Docker password encoder on Use the detail service.

17
00:00:51,330 --> 00:00:53,990
This will configure the web to use whatever use a

18
00:00:53,990 --> 00:00:56,100
detail service has been set up for it,

19
00:00:56,100 --> 00:00:58,640
so they use a detail services configured here.

20
00:00:58,640 --> 00:01:02,240
This is our user repository user detail service on its market.

21
00:01:02,240 --> 00:01:04,770
The service again, that's something we've seen before.

22
00:01:04,770 --> 00:01:06,410
So this is a named instantiate,

23
00:01:06,410 --> 00:01:09,380
the IOC container that's managed by spring and that will

24
00:01:09,380 --> 00:01:11,690
be injected as it implements jacket.

25
00:01:11,690 --> 00:01:15,360
User service on jacket users services extends user details

26
00:01:15,360 --> 00:01:18,410
services that we plugged into our configure global.

27
00:01:18,410 --> 00:01:21,440
The authentication manager builder comes from spring.

28
00:01:21,440 --> 00:01:23,640
So what about the password in coda?

29
00:01:23,640 --> 00:01:27,200
We need to specify the past winning code A we'd like to use when

30
00:01:27,200 --> 00:01:29,940
we do that by configuring spring security.

31
00:01:29,940 --> 00:01:32,590
So I go back to my jacket security project.

32
00:01:32,590 --> 00:01:34,550
I'm going to add a new package here.

33
00:01:34,550 --> 00:01:39,150
This would be my security config package ID into here.

34
00:01:39,150 --> 00:01:41,120
I'm going to create a new class on.

35
00:01:41,120 --> 00:01:44,040
This will be my security configuration class.

36
00:01:44,040 --> 00:01:47,980
We'll use this class to configure our password encoder to notice.

37
00:01:47,980 --> 00:01:53,300
Here we say as a configuration class, we want to enable auto configuration again.

38
00:01:53,300 --> 00:01:54,960
I'm scanning the packages.

39
00:01:54,960 --> 00:02:00,840
I'm scanning the com dot Pluralsight dot jacket dot security packages here.

40
00:02:00,840 --> 00:02:03,570
The key thing here is we provide a bean,

41
00:02:03,570 --> 00:02:07,120
which is a type of password encoder for that bean.

42
00:02:07,120 --> 00:02:10,840
We returning a newbie crypt Password encoder.

43
00:02:10,840 --> 00:02:15,940
So it uses be crypt to hash the password to place into the database for us.

44
00:02:15,940 --> 00:02:21,640
It also uses be crypt to compare hashes when the user authenticates.

45
00:02:21,640 --> 00:02:23,240
So what will this look like?

46
00:02:23,240 --> 00:02:25,030
Well, if I run the application.

47
00:02:25,030 --> 00:02:30,640
If I now browse to local host 80 81 it will now ask me to authenticate.

48
00:02:30,640 --> 00:02:33,340
Now I can't get to the main URL.

49
00:02:33,340 --> 00:02:36,600
I've set up the configuration to say everything other than log in,

50
00:02:36,600 --> 00:02:40,440
log out and register must be authenticated.

51
00:02:40,440 --> 00:02:42,600
Notice is still bringing back my HTML.

52
00:02:42,600 --> 00:02:45,040
Still bringing back my CSS.

53
00:02:45,040 --> 00:02:47,650
We've used matches to say I don't need to

54
00:02:47,650 --> 00:02:50,640
authenticate when I access those things.

55
00:02:50,640 --> 00:02:52,340
If I go to the register link,

56
00:02:52,340 --> 00:02:57,910
I get my register page I can Fill this in so Kevin Acknowledge Spike Com,

57
00:02:57,910 --> 00:03:01,830
then Kevin Jones and then enter a password and click on

58
00:03:01,830 --> 00:03:04,550
register and a get taken to the main page.

59
00:03:04,550 --> 00:03:06,250
There are no articles on the page.

60
00:03:06,250 --> 00:03:09,310
We deleted the articles when we moved to this part of the course.

61
00:03:09,310 --> 00:03:10,050
We'll have some more.

62
00:03:10,050 --> 00:03:10,660
In a moment.

63
00:03:10,660 --> 00:03:14,840
We'll see how that all works, However, following inside my SQL.

64
00:03:14,840 --> 00:03:17,570
Look at jacket DB users you can see.

65
00:03:17,570 --> 00:03:20,740
Indeed, I've got username Jones.

66
00:03:20,740 --> 00:03:23,940
The email Kevin acknowledge bike dot com But notice the

67
00:03:23,940 --> 00:03:27,340
password That password field is encoded.

68
00:03:27,340 --> 00:03:31,940
That password field is encoded in a way that decrypt understands.

69
00:03:31,940 --> 00:03:33,100
So I tried to log in.

70
00:03:33,100 --> 00:03:38,050
I type in my password be crypt will again hash the password I type in and

71
00:03:38,050 --> 00:03:41,740
compare the hash it create with this value in the password field.

72
00:03:41,740 --> 00:03:45,740
If those two values match, then I'll be able to Log it TIFF.

73
00:03:45,740 --> 00:03:49,540
I log out the application and go back to local host 80 81.

74
00:03:49,540 --> 00:03:53,920
I should be able to log in so I type in my username type in my password,

75
00:03:53,920 --> 00:04:01,000
Click on Logging on. Sure enough, we get back to the same place in the application.

