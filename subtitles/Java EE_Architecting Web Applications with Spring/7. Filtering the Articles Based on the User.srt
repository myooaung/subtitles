1
00:00:03,040 --> 00:00:05,760
[Autogenerated] So now that we have all these pieces in place,

2
00:00:05,760 --> 00:00:08,140
once the user is authenticated,

3
00:00:08,140 --> 00:00:11,100
we'd like to be able to use that user and a only get back the

4
00:00:11,100 --> 00:00:14,840
articles for that user we can do that in the controller.

5
00:00:14,840 --> 00:00:16,590
So currently, in the controller,

6
00:00:16,590 --> 00:00:20,520
we have a mapping for slash article from which we call our index method,

7
00:00:20,520 --> 00:00:21,540
which is here.

8
00:00:21,540 --> 00:00:25,100
What we'd like to do here is to say I want to map the currently

9
00:00:25,100 --> 00:00:28,940
authenticated user to a parameter of this method,

10
00:00:28,940 --> 00:00:33,340
then use that user to go and get the articles associated with them.

11
00:00:33,340 --> 00:00:35,940
So what I could do is that a parameter here on market

12
00:00:35,940 --> 00:00:41,040
with the act authentication principle, which is a spring security annotation,

13
00:00:41,040 --> 00:00:45,740
make this parameter of type authenticated user and call it user.

14
00:00:45,740 --> 00:00:48,800
The problem with this approach is that authentication principle

15
00:00:48,800 --> 00:00:52,940
comes from spring security ID like to isil it my use of spring

16
00:00:52,940 --> 00:00:55,440
security into the security project.

17
00:00:55,440 --> 00:00:58,350
I don't really want spring security to be directly

18
00:00:58,350 --> 00:01:01,640
used inside my web application.

19
00:01:01,640 --> 00:01:03,580
So instead of using that annotation,

20
00:01:03,580 --> 00:01:06,480
what we can do is to create our own annotation

21
00:01:06,480 --> 00:01:09,240
something called a meta annotation.

22
00:01:09,240 --> 00:01:11,330
So back in the spring security project,

23
00:01:11,330 --> 00:01:16,040
if I create a new package that I'm going to call security annotations

24
00:01:16,040 --> 00:01:19,540
and in here we're going to create a new annotation.

25
00:01:19,540 --> 00:01:21,540
So if I do new annotation,

26
00:01:21,540 --> 00:01:26,240
the annotations good to be called current user and annotation Looks like this.

27
00:01:26,240 --> 00:01:30,360
These key thing here is that this annotation is itself annotated

28
00:01:30,360 --> 00:01:33,140
with the authentication principal annotation.

29
00:01:33,140 --> 00:01:37,840
So this is a met annotation that we can then use elsewhere in our code.

30
00:01:37,840 --> 00:01:41,340
This sanitation is specific to our application domain.

31
00:01:41,340 --> 00:01:43,840
We can use this elsewhere in our code.

32
00:01:43,840 --> 00:01:48,140
Our code is now only indirectly related to the spring security.

33
00:01:48,140 --> 00:01:51,940
If we decided to take out spring security and do something else we can do

34
00:01:51,940 --> 00:01:56,240
that without changing the annotations in our own code.

35
00:01:56,240 --> 00:01:58,180
So to use this inside the controller,

36
00:01:58,180 --> 00:02:03,540
I add the annotation AD CS current user authenticated user user

37
00:02:03,540 --> 00:02:07,540
So user is a type off authenticated user.

38
00:02:07,540 --> 00:02:08,150
Then when I call,

39
00:02:08,150 --> 00:02:14,140
get all articles I can pass in the user IDE So I say username get IDE

40
00:02:14,140 --> 00:02:20,200
So we need to change get all articles so it takes an ID Then we have a

41
00:02:20,200 --> 00:02:25,510
method on the article services caught find by user ID which uses that

42
00:02:25,510 --> 00:02:28,270
ID This method will pass back.

43
00:02:28,270 --> 00:02:32,490
All the articles associated with that ID will then pass those articles

44
00:02:32,490 --> 00:02:36,340
back to the HTML to be displayed inside the browser.

45
00:02:36,340 --> 00:02:39,540
So I can now go to the browser and try this out.

46
00:02:39,540 --> 00:02:43,740
So now I've added some articles and I've added to users.

47
00:02:43,740 --> 00:02:46,750
So if I go in and log in as the first user is my

48
00:02:46,750 --> 00:02:51,040
knowledge spike address type in my password,

49
00:02:51,040 --> 00:02:53,840
we get three articles under that user.

50
00:02:53,840 --> 00:02:54,740
If I log out of that,

51
00:02:54,740 --> 00:02:59,340
use their and then log in with my rock solid knowledge dress.

52
00:02:59,340 --> 00:03:02,090
We get one article without user we can.

53
00:03:02,090 --> 00:03:12,000
See how we use this authenticated principal inside our code to deliver the user information to the application that we need.

