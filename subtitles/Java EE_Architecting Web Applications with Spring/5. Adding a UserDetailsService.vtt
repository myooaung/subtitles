WEBVTT
1
00:00:02.440 --> 00:00:04.510
[Autogenerated] so to use spring security,

2
00:00:04.510 --> 00:00:09.940
we need to create service that derives from a built in spring security service.

3
00:00:09.940 --> 00:00:12.640
So let's take this step by step.

4
00:00:12.640 --> 00:00:15.470
I'm going to add a new interface called Jacket Use.

5
00:00:15.470 --> 00:00:19.650
The service on this is going to extend spring security interface.

6
00:00:19.650 --> 00:00:23.940
That spring security interface is called User Details services.

7
00:00:23.940 --> 00:00:24.690
If I look at user,

8
00:00:24.690 --> 00:00:30.740
detailed service will see it has one method called load user I username.

9
00:00:30.740 --> 00:00:35.140
This is an interface we have to implement to become part of spring security.

10
00:00:35.140 --> 00:00:38.140
Spring security asks us to Low to user.

11
00:00:38.140 --> 00:00:39.490
Gives us a username.

12
00:00:39.490 --> 00:00:44.040
We load that user on pass that use of back to spring security.

13
00:00:44.040 --> 00:00:47.000
It's then going to do things like check the authentication,

14
00:00:47.000 --> 00:00:51.740
check the password for that user, and we'll see how it does that in a moment.

15
00:00:51.740 --> 00:00:55.430
We can also put our own methods on this interface I can Google to

16
00:00:55.430 --> 00:00:58.640
add one here called Registered new user account.

17
00:00:58.640 --> 00:00:59.530
And a do this.

18
00:00:59.530 --> 00:01:03.500
We go to pass into this a jacket user that's going to contain

19
00:01:03.500 --> 00:01:05.710
details of the user you want to register,

20
00:01:05.710 --> 00:01:08.440
such as the use name and the password.

21
00:01:08.440 --> 00:01:12.440
We're going to return back from this something called authenticated user.

22
00:01:12.440 --> 00:01:17.340
So to extend this interface, we need to create both of those types now.

23
00:01:17.340 --> 00:01:18.980
So I'll create a new package.

24
00:01:18.980 --> 00:01:21.540
This Libya was service models package.

25
00:01:21.540 --> 00:01:24.400
And into here, we'll place our jacket user type,

26
00:01:24.400 --> 00:01:29.840
which will have email first name, last name password on repeat password.

27
00:01:29.840 --> 00:01:31.620
As this is being used for registration,

28
00:01:31.620 --> 00:01:35.930
we want to check the password and repeat password are the same on.

29
00:01:35.930 --> 00:01:38.670
Then we have unauthenticated user type on.

30
00:01:38.670 --> 00:01:43.040
This returns back the name email and password and IDE.

31
00:01:43.040 --> 00:01:44.010
At this point,

32
00:01:44.010 --> 00:01:47.680
we would have inserted this user into the database and user

33
00:01:47.680 --> 00:01:50.140
will have an IDE associated with them.

34
00:01:50.140 --> 00:01:51.880
We want to use that IDE later on.

35
00:01:51.880 --> 00:01:54.840
So we return the ID back to the caller along with the

36
00:01:54.840 --> 00:01:56.840
rest of the details that we have.

37
00:01:56.840 --> 00:01:59.140
So now we need to implement the interface.

38
00:01:59.140 --> 00:02:00.630
We're going to create a new class.

39
00:02:00.630 --> 00:02:05.680
We're going to call this use a repository user details services again.

40
00:02:05.680 --> 00:02:09.490
So use a detail services using a repository on inside.

41
00:02:09.490 --> 00:02:14.440
This service will provide currently empty implementations of these methods

42
00:02:14.440 --> 00:02:18.440
to load by username and then registered user account.

43
00:02:18.440 --> 00:02:21.220
Now, this services going to use a repository.

44
00:02:21.220 --> 00:02:23.540
So we need to implement that repository.

45
00:02:23.540 --> 00:02:26.940
We'll create something called usually depository to do that.

46
00:02:26.940 --> 00:02:31.500
So again, I create a new package to store our repository on this will be jacket.

47
00:02:31.500 --> 00:02:38.240
Security repository inside here will create a new class called Users Repository.

48
00:02:38.240 --> 00:02:40.030
This is nothing we haven't seen before.

49
00:02:40.030 --> 00:02:44.790
So this class will extend credit repository at a method called find by email,

50
00:02:44.790 --> 00:02:47.110
which will make use off in our service.

51
00:02:47.110 --> 00:02:51.200
So we can now see how to implement these user details services.

52
00:02:51.200 --> 00:02:52.930
Quite a lot to see and to understand.

53
00:02:52.930 --> 00:02:54.020
Here and again,

54
00:02:54.020 --> 00:02:57.230
we're not going to go over this in detail just to give you some

55
00:02:57.230 --> 00:03:01.140
idea of how you implement this in your own code.

56
00:03:01.140 --> 00:03:03.820
So the constructor takes two parameters,

57
00:03:03.820 --> 00:03:06.630
One of which is the repository we just created on one is

58
00:03:06.630 --> 00:03:08.760
something called password encoder.

59
00:03:08.760 --> 00:03:11.840
We'll see how to use that encode a in a moment.

60
00:03:11.840 --> 00:03:16.240
The key thing with this is that we can't store passwords in plain text.

61
00:03:16.240 --> 00:03:18.140
They must be hashed in some way.

62
00:03:18.140 --> 00:03:21.840
I will use a password encoder to do that.

63
00:03:21.840 --> 00:03:24.340
There are essentially two methods on here.

64
00:03:24.340 --> 00:03:26.440
There's registered new account.

65
00:03:26.440 --> 00:03:29.730
The first thing this does it say if the account already exists

66
00:03:29.730 --> 00:03:33.450
or the email already exists and throw an exception so we can't

67
00:03:33.450 --> 00:03:36.240
reregister with the same email.

68
00:03:36.240 --> 00:03:37.990
If the account doesn't exist,

69
00:03:37.990 --> 00:03:41.590
we create a new user object and then we set the password on that

70
00:03:41.590 --> 00:03:44.940
user object by encoding the incoming password.

71
00:03:44.940 --> 00:03:47.250
So we get the password from the incoming user as plain

72
00:03:47.250 --> 00:03:50.640
text and encoded using the encoder.

73
00:03:50.640 --> 00:03:51.920
Then save the email.

74
00:03:51.920 --> 00:03:53.090
We save the first name.

75
00:03:53.090 --> 00:03:57.640
We save the last name and then save this user into the database.

76
00:03:57.640 --> 00:04:02.340
If it's safe correctly, we create something called unauthenticated user.

77
00:04:02.340 --> 00:04:06.040
We returned that authenticated user back to the caller.

78
00:04:06.040 --> 00:04:08.440
We also create a token.

79
00:04:08.440 --> 00:04:11.740
So we've got this username, password authentication token.

80
00:04:11.740 --> 00:04:14.480
I will use spring security to set that token.

81
00:04:14.480 --> 00:04:18.160
So everything downstream of us knows that this user is

82
00:04:18.160 --> 00:04:23.000
authenticated for the load by username method.

83
00:04:23.000 --> 00:04:24.670
We simply take the username.

84
00:04:24.670 --> 00:04:28.240
Look in the repository on, see if that username exists.

85
00:04:28.240 --> 00:04:32.180
But if it does return on authenticated user object back

86
00:04:32.180 --> 00:04:34.820
to spring security in spring security,

87
00:04:34.820 --> 00:04:39.640
then deals with things like setting the authentication properties for us.

88
00:04:39.640 --> 00:04:43.040
So another key thing here is this authenticated user,

89
00:04:43.040 --> 00:04:48.640
so authenticated user implements a spring in face called user Details.

90
00:04:48.640 --> 00:04:52.320
User details is the interface used by spring so it can find

91
00:04:52.320 --> 00:04:55.040
out the information it needs on this user.

92
00:04:55.040 --> 00:04:58.150
So, for example, user details as they get username,

93
00:04:58.150 --> 00:05:00.540
method and a get password method,

94
00:05:00.540 --> 00:05:03.630
and spring security will use these to ensure that our

95
00:05:03.630 --> 00:05:06.540
user is properly authenticated.

96
00:05:06.540 --> 00:05:08.500
So to make use of spring security,

97
00:05:08.500 --> 00:05:11.900
we override the load by using a method and return

98
00:05:11.900 --> 00:05:14.440
something that implements user details.

99
00:05:14.440 --> 00:05:18.140
That's something in our case, is an authenticated user,

100
00:05:18.140 --> 00:05:22.440
and in here we override the get password and a get using their methods.

101
00:05:22.440 --> 00:05:29.000
Spring security would call these methods to check that our user is authenticated.

