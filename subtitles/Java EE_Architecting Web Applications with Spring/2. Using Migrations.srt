1
00:00:01,940 --> 00:00:03,540
[Autogenerated] so to manage our database.

2
00:00:03,540 --> 00:00:06,580
On in particular, to manage this schema of the database,

3
00:00:06,580 --> 00:00:09,540
we're going to use something called migrations.

4
00:00:09,540 --> 00:00:10,950
Migrations are snippets.

5
00:00:10,950 --> 00:00:13,740
The change the database schemer we can use the snippets to

6
00:00:13,740 --> 00:00:16,440
create tables and a to altar tables.

7
00:00:16,440 --> 00:00:18,690
Snippets are often written in SQL.

8
00:00:18,690 --> 00:00:21,440
However, they could be written in some of the language.

9
00:00:21,440 --> 00:00:24,740
So depending on the tool you use snippet, you right.

10
00:00:24,740 --> 00:00:27,480
Could be a snippet of SQL that we apply to the database.

11
00:00:27,480 --> 00:00:29,500
Or we could write the snip in some other language.

12
00:00:29,500 --> 00:00:33,460
Maybe Java an API groovy on depending on the language you're using,

13
00:00:33,460 --> 00:00:36,360
we could write a snippet in the language that you're more familiar with,

14
00:00:36,360 --> 00:00:40,140
and that might give you more flexibility in the things you want to do.

15
00:00:40,140 --> 00:00:43,340
It might also make this snippet database independent.

16
00:00:43,340 --> 00:00:46,420
One of the issues you might have a SQL is you might

17
00:00:46,420 --> 00:00:48,520
need to write database specific SQL.

18
00:00:48,520 --> 00:00:50,570
And if you try to support multiple databases,

19
00:00:50,570 --> 00:00:53,270
using some other language for the snippet could help you write the database.

20
00:00:53,270 --> 00:00:59,540
Independent snippets Migrations originally came from the ruby world

21
00:00:59,540 --> 00:01:02,650
in Ruby on Rails pattern called active record.

22
00:01:02,650 --> 00:01:05,410
One of the ways I'm probably the most common way of creating a

23
00:01:05,410 --> 00:01:08,800
managing or database schemers was to use Ruby on Rails,

24
00:01:08,800 --> 00:01:11,480
so other languages were inspired by this on.

25
00:01:11,480 --> 00:01:13,170
Now we have migrations in, for example,

26
00:01:13,170 --> 00:01:17,340
Microsoft .NET environment and certainly have migrations in Java.

27
00:01:17,340 --> 00:01:19,980
And a many tools to do this on the one we're going to

28
00:01:19,980 --> 00:01:23,140
use is something called Flyway.

29
00:01:23,140 --> 00:01:27,840
So here we have a migration and see the at the Migration is written in SQL.

30
00:01:27,840 --> 00:01:32,120
On this migration is going to create a table the tables called articles.

31
00:01:32,120 --> 00:01:35,030
We want to apply that migration to this database.

32
00:01:35,030 --> 00:01:37,300
So when we apply the migration to the database,

33
00:01:37,300 --> 00:01:40,140
we create the table within the database.

34
00:01:40,140 --> 00:01:41,270
So now we have a table.

35
00:01:41,270 --> 00:01:44,410
It's got some columns these columns of types on.

36
00:01:44,410 --> 00:01:48,420
Then we decide the latest stage that this table isn't quite right.

37
00:01:48,420 --> 00:01:52,150
We want to add something else so we can create another migration.

38
00:01:52,150 --> 00:01:55,940
In this case, we're going to alter the table So we can see the at our migrations,

39
00:01:55,940 --> 00:01:57,700
concrete's tables and a schema.

40
00:01:57,700 --> 00:02:01,440
They can alter the schema and can also delete things from the schemer.

41
00:02:01,440 --> 00:02:04,140
We can also add data to the schemer.

42
00:02:04,140 --> 00:02:04,840
Essentially,

43
00:02:04,840 --> 00:02:08,640
anything we can do in SQL we can do us part of our migration

44
00:02:08,640 --> 00:02:10,560
when we add the migration to the database.

45
00:02:10,560 --> 00:02:12,040
Then we update the table.

46
00:02:12,040 --> 00:02:15,490
So now we have another column in the table called Title on the Tables now,

47
00:02:15,490 --> 00:02:19,990
in a state that we'd like it to be so migrations

48
00:02:19,990 --> 00:02:23,230
have pros and cons with migrations.

49
00:02:23,230 --> 00:02:25,840
It's easy to manage database changes.

50
00:02:25,840 --> 00:02:30,240
We write another snippet, we can, then use that snippet to update the database.

51
00:02:30,240 --> 00:02:33,440
It's easy to recreate the database we can simply take all of our

52
00:02:33,440 --> 00:02:37,370
migrations and rerun them against any database that would recreate

53
00:02:37,370 --> 00:02:39,940
the database to the state it should be in.

54
00:02:39,940 --> 00:02:43,570
One great thing about migrations is that they're under source control.

55
00:02:43,570 --> 00:02:45,270
So all of our migration is going to the source

56
00:02:45,270 --> 00:02:47,690
control system and easily versioning.

57
00:02:47,690 --> 00:02:49,630
You can easily pull them out of the source control

58
00:02:49,630 --> 00:02:52,440
and update them when we need to.

59
00:02:52,440 --> 00:02:54,330
They're not managed by DBS.

60
00:02:54,330 --> 00:02:57,740
We don't have a third person involved here to manage our database.

61
00:02:57,740 --> 00:03:00,910
There's no need to go to someone else and say, Can you do this for me?

62
00:03:00,910 --> 00:03:03,740
This is all managed by the team.

63
00:03:03,740 --> 00:03:07,100
We can run multiple independent upgrades of a database,

64
00:03:07,100 --> 00:03:08,360
so we can right snippet to,

65
00:03:08,360 --> 00:03:10,950
uh played small parts of the schemer and then run the

66
00:03:10,950 --> 00:03:13,840
snippets where and when we need to.

67
00:03:13,840 --> 00:03:15,740
In general, these things work across.

68
00:03:15,740 --> 00:03:20,830
Database is so a migration URL library will provide a mechanism so we can apply.

69
00:03:20,830 --> 00:03:23,740
This scheme is too many different types of database.

70
00:03:23,740 --> 00:03:27,020
We don't necessarily need to write SQL for that specific flavor database,

71
00:03:27,020 --> 00:03:28,500
such as my SQL post rows,

72
00:03:28,500 --> 00:03:32,940
SQL SQL Server or whatever it might be now for the cons.

73
00:03:32,940 --> 00:03:35,040
Well, they're not managed by a d B a.

74
00:03:35,040 --> 00:03:36,450
So this could be a good thing.

75
00:03:36,450 --> 00:03:39,620
It can also be a bad thing because the DB A knows all about

76
00:03:39,620 --> 00:03:43,370
database is the diva is a person that knows the best way to

77
00:03:43,370 --> 00:03:45,850
create a database until layout the database.

78
00:03:45,850 --> 00:03:52,240
So leaving this in the hand of a developer might not always be a good thing.

79
00:03:52,240 --> 00:03:54,410
Database is could be difficult diversion as well.

80
00:03:54,410 --> 00:03:56,780
So while the actual snippets are in source control,

81
00:03:56,780 --> 00:04:01,640
the actual state of a database at a given point of time can be harder to manage.

82
00:04:01,640 --> 00:04:04,790
You also often end up with many small files,

83
00:04:04,790 --> 00:04:06,950
so you tend to want to apply small migrations.

84
00:04:06,950 --> 00:04:11,040
To a schemer on this means you have lots and lots of small migration files.

85
00:04:11,040 --> 00:04:14,540
What some places do is after a certain amount of time,

86
00:04:14,540 --> 00:04:18,300
take the migrations and actually put them into a single migration script.

87
00:04:18,300 --> 00:04:21,640
On inside that script, they normalize the migration.

88
00:04:21,640 --> 00:04:22,960
So in our previous example,

89
00:04:22,960 --> 00:04:25,530
where we had to create table followed by an altar table,

90
00:04:25,530 --> 00:04:29,600
what you would do is simply take this to migrations movement to one file,

91
00:04:29,600 --> 00:04:32,490
which would be a single create table with the altar table.

92
00:04:32,490 --> 00:04:34,460
Change may part of this migration,

93
00:04:34,460 --> 00:04:37,540
and you might want to do that at a well known part of the project.

94
00:04:37,540 --> 00:04:39,500
And even though we said these things work across,

95
00:04:39,500 --> 00:04:42,270
database is, this isn't always true,

96
00:04:42,270 --> 00:04:44,590
so that are gonna be occasions where you need to

97
00:04:44,590 --> 00:04:46,380
write database specific migrations.

98
00:04:46,380 --> 00:04:55,000
If you work with more than one database and a again, depending on your organization, this may or may not be an issue for you.

