WEBVTT
1
00:00:02.140 --> 00:00:04.290
[Autogenerated] so we don't want our web TLS coding

2
00:00:04.290 --> 00:00:06.340
against the repository directly.

3
00:00:06.340 --> 00:00:10.540
We want it using an API that the article service will offer to it

4
00:00:10.540 --> 00:00:13.500
the article services going to obstruct away through positive

5
00:00:13.500 --> 00:00:18.040
y-axis its data access behind this API.

6
00:00:18.040 --> 00:00:20.480
So to do that inside the articles project,

7
00:00:20.480 --> 00:00:23.340
we're going to write a service to the articles component.

8
00:00:23.340 --> 00:00:26.040
That service will live in its own package.

9
00:00:26.040 --> 00:00:32.340
So again, if I do new package, it will live in the article service package.

10
00:00:32.340 --> 00:00:35.280
The service will have an interface that would be the type

11
00:00:35.280 --> 00:00:41.640
that is injected into the web here on, then an implementation off that interface.

12
00:00:41.640 --> 00:00:42.530
So if I do,

13
00:00:42.530 --> 00:00:47.640
a new interface here will create an interface called Jacket Article services.

14
00:00:47.640 --> 00:00:47.880
Now,

15
00:00:47.880 --> 00:00:50.730
Jacket Article Service will have methods that the web to is

16
00:00:50.730 --> 00:00:53.920
going to call and will only have a couple of methods that

17
00:00:53.920 --> 00:00:55.840
we care about at the moment.

18
00:00:55.840 --> 00:00:59.070
It's going to have a method called get all articles on.

19
00:00:59.070 --> 00:01:02.130
This will return a list of something I'm going to explain.

20
00:01:02.130 --> 00:01:05.540
What get jacket article is in a moment.

21
00:01:05.540 --> 00:01:09.740
We'll also have a get article image method that returns an image,

22
00:01:09.740 --> 00:01:13.040
and this is the image that will be displayed inside the web page.

23
00:01:13.040 --> 00:01:15.430
This will just be a Java .NET w 2D image.

24
00:01:15.430 --> 00:01:18.840
Just the binary data that the web can do is play.

25
00:01:18.840 --> 00:01:21.930
The service provides the API the jacket articles

26
00:01:21.930 --> 00:01:24.840
component wants exposed the outside world.

27
00:01:24.840 --> 00:01:26.860
So there may be other methods on here as well.

28
00:01:26.860 --> 00:01:29.660
So, for example, we could have methods such as get article,

29
00:01:29.660 --> 00:01:31.780
art, article, update article.

30
00:01:31.780 --> 00:01:34.540
They call me part of the service.

31
00:01:34.540 --> 00:01:35.830
Now, what about these types?

32
00:01:35.830 --> 00:01:38.470
We have a get jacket article type on.

33
00:01:38.470 --> 00:01:41.040
We have an ad jacket, article type.

34
00:01:41.040 --> 00:01:45.460
So for the service, we want the service to return specific data.

35
00:01:45.460 --> 00:01:48.840
We don't want the service to reach into the repository,

36
00:01:48.840 --> 00:01:53.340
pull out all the fields repository on, return them all back to the caller.

37
00:01:53.340 --> 00:01:57.650
If we do that, we end up exposing our database scheme at the outside world.

38
00:01:57.650 --> 00:01:59.940
I mean, really don't want to do that.

39
00:01:59.940 --> 00:02:02.650
We want to encapsulate that we want to expose the

40
00:02:02.650 --> 00:02:05.640
smallest footprint that we can for our data.

41
00:02:05.640 --> 00:02:06.580
So get jacket.

42
00:02:06.580 --> 00:02:10.220
Article a type will only contain the data that the web

43
00:02:10.220 --> 00:02:13.040
application need to display the article.

44
00:02:13.040 --> 00:02:16.110
These AD DS jacket article method will only contain the data

45
00:02:16.110 --> 00:02:19.840
needed by the service to add a new article.

46
00:02:19.840 --> 00:02:22.320
So those types will live in another package called service

47
00:02:22.320 --> 00:02:25.740
models jacket dot article dot services models.

48
00:02:25.740 --> 00:02:30.120
So inside here we'll create a new type called AD DS Jacket article.

49
00:02:30.120 --> 00:02:35.440
I will also create a new class called get Jacket article.

50
00:02:35.440 --> 00:02:38.680
AD DS jacket article will just be a Java bean.

51
00:02:38.680 --> 00:02:41.170
We'll just have the set is and get us on the properties.

52
00:02:41.170 --> 00:02:45.090
We need to allow us to add a new article to our database.

53
00:02:45.090 --> 00:02:48.570
And similarly get jacket article will also be a Java bean

54
00:02:48.570 --> 00:02:52.010
and a geun Jest retrieving back data that we need from the

55
00:02:52.010 --> 00:02:56.140
database to whoever uses this thing.

56
00:02:56.140 --> 00:02:58.500
So now that we have the repository and we have the

57
00:02:58.500 --> 00:03:00.280
interface for the service and a,

58
00:03:00.280 --> 00:03:02.300
we have the types that are used by the interface.

59
00:03:02.300 --> 00:03:05.760
We now need to provide an implementation off this service.

60
00:03:05.760 --> 00:03:07.940
So let's see how we do that.

61
00:03:07.940 --> 00:03:10.950
So we have the interface we have the repository on.

62
00:03:10.950 --> 00:03:12.590
We have the classes were going to use.

63
00:03:12.590 --> 00:03:15.070
We don't have the implementation now.

64
00:03:15.070 --> 00:03:19.810
It seems sort of standard in the Java space to call interface implementation,

65
00:03:19.810 --> 00:03:22.540
something, something, something import.

66
00:03:22.540 --> 00:03:24.550
I don't like that naming convention,

67
00:03:24.550 --> 00:03:28.340
so we're going to try and find a more suitable name here.

68
00:03:28.340 --> 00:03:32.350
So within our article service, we're going to create a new class.

69
00:03:32.350 --> 00:03:37.340
I'm going to call this article detailed service on article repository.

70
00:03:37.340 --> 00:03:39.540
So it tells us more about what's happening,

71
00:03:39.540 --> 00:03:43.220
so we know that we have a jacket article service interface on.

72
00:03:43.220 --> 00:03:45.710
We know we're going to call this through a repository

73
00:03:45.710 --> 00:03:47.610
rather than through some other mechanism,

74
00:03:47.610 --> 00:03:50.240
like a message code to get the data.

75
00:03:50.240 --> 00:03:53.340
So this seems like a more meaningful name that just stick it in.

76
00:03:53.340 --> 00:03:55.740
Put on the end of the interface,

77
00:03:55.740 --> 00:03:59.540
our service will implement jacket article services.

78
00:03:59.540 --> 00:04:02.960
So we need to implement all of the methods off the service on will

79
00:04:02.960 --> 00:04:07.040
implement those methods in terms off the repository.

80
00:04:07.040 --> 00:04:09.220
So the first thing we have to do is to inject the articles

81
00:04:09.220 --> 00:04:12.140
repository as the services now going to use that.

82
00:04:12.140 --> 00:04:15.760
So here we've added a new constructor on into that constructor

83
00:04:15.760 --> 00:04:18.820
were injecting on article repository and a lager.

84
00:04:18.820 --> 00:04:22.040
We're just going to save those away in private variables.

85
00:04:22.040 --> 00:04:23.240
Once we have that,

86
00:04:23.240 --> 00:04:26.600
we can then implement the methods to here we see the implement in

87
00:04:26.600 --> 00:04:29.720
methods we've got our get all articles method,

88
00:04:29.720 --> 00:04:32.290
which mirrors what we saw from the controller earlier.

89
00:04:32.290 --> 00:04:36.050
Except we now returning a set of get jacket article objects for the

90
00:04:36.050 --> 00:04:39.620
controller to use some methods we haven't implemented.

91
00:04:39.620 --> 00:04:42.940
So update article on an article.

92
00:04:42.940 --> 00:04:45.820
We have a get article method that we implement in terms of a

93
00:04:45.820 --> 00:04:48.370
fine by ID method from the repository.

94
00:04:48.370 --> 00:04:52.640
Again, this is a pre implemented proxy method on the repository,

95
00:04:52.640 --> 00:04:53.340
and then finally,

96
00:04:53.340 --> 00:04:57.280
we have a get article image method that we need to endpoint at some point,

97
00:04:57.280 --> 00:05:00.340
I will see how to do that a little later.

98
00:05:00.340 --> 00:05:00.660
Also,

99
00:05:00.660 --> 00:05:04.340
notice that I've added a jacket services exception here

100
00:05:04.340 --> 00:05:07.740
because we like our exceptions to be meaningful.

101
00:05:07.740 --> 00:05:10.860
We don't want to expose exceptions, say, from the database.

102
00:05:10.860 --> 00:05:14.250
We'd like to be able to manage those exceptions and logged in ourselves

103
00:05:14.250 --> 00:05:16.600
and then tell the things using us what's happened.

104
00:05:16.600 --> 00:05:18.540
Maybe through this exception.

105
00:05:18.540 --> 00:05:20.860
So I've added this jacket services exception.

106
00:05:20.860 --> 00:05:24.440
The Jest exposes any exceptions that this service encounters

107
00:05:24.440 --> 00:05:27.640
that it doesn't know how to handle itself.

108
00:05:27.640 --> 00:05:29.460
So now that we have this service in place,

109
00:05:29.460 --> 00:05:37.000
we need to get the controller in the web to to use this on. We'll see how to do that now

