WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.750
that's implement together Another AP I called find user by i d.

00:00:04.750 --> 00:00:16.420
So under user service will create a method that would return on optional off user called

00:00:16.420 --> 00:00:17.650
find by D.

00:00:17.650 --> 00:00:30.810
So this return on optional with an user so that we can prevent any no point or exception in

00:00:30.810 --> 00:00:35.710
case the user is not found We go now to use our service.

00:00:35.710 --> 00:00:47.200
I am peel and we can implement the business logic for find by demented so we can use

00:00:47.200 --> 00:00:54.240
optional off user is the opt users least Ah,

00:00:54.240 --> 00:00:55.640
we can do here.

00:00:55.640 --> 00:00:56.700
Ah stream.

00:00:56.700 --> 00:01:08.280
Since I want to navigate under this list and we can filter the list using something like

00:01:08.280 --> 00:01:20.710
user that yet I d equals with the I d provided us perimeter and find the first user that

00:01:20.710 --> 00:01:21.650
matches this.

00:01:21.650 --> 00:01:28.770
You see that we have some issues over here.

00:01:28.770 --> 00:01:34.800
This happens due to the fact that we set up a long s perimeter.

00:01:34.800 --> 00:01:38.350
But our user has ah integer.

00:01:38.350 --> 00:01:46.750
So we'll just change the integer from our user model to use the long update The getter and

00:01:46.750 --> 00:01:48.050
setter methods.

00:01:48.050 --> 00:01:50.350
Okay,

00:01:50.350 --> 00:01:59.950
does go back to our user service time peel and you can see at the top here that we used

00:01:59.950 --> 00:02:02.390
when integer for our counter.

00:02:02.390 --> 00:02:04.050
Let's fix this.

00:02:04.050 --> 00:02:09.610
We set up as long and it works now.

00:02:09.610 --> 00:02:11.510
Good.

00:02:11.510 --> 00:02:19.850
So let's check if we were able to extract on optional with the value inside it.

00:02:19.850 --> 00:02:26.550
So user hoped this present Okay.

00:02:26.550 --> 00:02:28.150
If so,

00:02:28.150 --> 00:02:32.350
we returned the user optional,

00:02:32.350 --> 00:02:37.190
if not by default,

00:02:37.190 --> 00:02:38.400
were returning.

00:02:38.400 --> 00:02:40.020
Am Theo option.

00:02:40.020 --> 00:02:55.250
So now we can go on there are user controller and implement a new method to find user by d

00:02:55.250 --> 00:03:14.670
public usar find by a d was set The parliamentary us longer I d and well involved a user

00:03:14.670 --> 00:03:21.290
service find by D optional user is there optional.

00:03:21.290 --> 00:03:34.500
Let involved the use or service find by the with the idea provided us perimeter now it is

00:03:34.500 --> 00:03:35.750
are optional.

00:03:35.750 --> 00:03:37.950
It's present.

00:03:37.950 --> 00:03:41.540
We were returned.

00:03:41.540 --> 00:03:41.850
Ah,

00:03:41.850 --> 00:03:44.290
user.

00:03:44.290 --> 00:03:47.420
Okay,

00:03:47.420 --> 00:03:49.620
we can do something like return.

00:03:49.620 --> 00:03:58.150
Use the optional that get to extract the user from the optional and eternal.

00:03:58.150 --> 00:04:00.100
In this case,

00:04:00.100 --> 00:04:06.430
if we were not able to extract a new user also,

00:04:06.430 --> 00:04:18.950
it is important to set up the mapping and add the path variable to match the mapping as I d

00:04:18.950 --> 00:04:18.950
.

00:04:18.950 --> 00:04:21.550
Okay,

00:04:21.550 --> 00:04:22.150
good.

00:04:22.150 --> 00:04:33.850
I think we can do some refractory ization over here since by default we can return the user

00:04:33.850 --> 00:04:34.950
optional.

00:04:34.950 --> 00:04:36.350
Okay,

00:04:36.350 --> 00:04:42.650
from from this method.

00:04:42.650 --> 00:04:44.050
And in fact,

00:04:44.050 --> 00:04:55.760
let's do something like return user optional extracted from the users list and go back to

00:04:55.760 --> 00:04:57.250
the user controller.

00:04:57.250 --> 00:05:05.130
And over here we have this this validation we remain.

00:05:05.130 --> 00:05:10.500
Now let's start the application.

00:05:10.500 --> 00:05:22.560
So if we're able toe return on user optional or not will create Ah,

00:05:22.560 --> 00:05:29.050
this request find user by the let's call it fine by a D.

00:05:29.050 --> 00:05:35.080
Okay,

00:05:35.080 --> 00:05:47.880
And over here was the local host 80 80 slash user STE.

00:05:47.880 --> 00:05:55.750
P I users slash I don or let's type free over here.

00:05:55.750 --> 00:06:00.950
And you know that we have four users,

00:06:00.950 --> 00:06:07.680
and basically this will extract the furred from this list.

00:06:07.680 --> 00:06:09.550
Okay,

00:06:09.550 --> 00:06:15.690
So since we have this,

00:06:15.690 --> 00:06:17.050
um,

00:06:17.050 --> 00:06:28.090
this collection that is basically related to users bless rightto edit this request as find

00:06:28.090 --> 00:06:31.950
all and also added Eric with the collection.

00:06:31.950 --> 00:06:38.470
So something more something more appropriate.

00:06:38.470 --> 00:06:39.900
The users collection,

00:06:39.900 --> 00:06:43.460
such as users collection.

00:06:43.460 --> 00:06:47.990
So all requests are later toe users.

00:06:47.990 --> 00:06:59.220
So once again find all works and also fined by the works.

00:06:59.220 --> 00:07:05.650
Now we set up to that will extract the second user.

00:07:05.650 --> 00:07:08.800
If we sit up,

00:07:08.800 --> 00:07:13.400
then it will not show anything

