WEBVTT

00:02.150 --> 00:07.480
So we want to be able to get posts let's say. In our angular app,

00:07.490 --> 00:14.600
we got the post list component and there right now we're getting posts here but this is a useless operation

00:14.600 --> 00:20.410
because in our posts service, we start with no posts and that is what we're fetching with get posts.

00:20.660 --> 00:26.510
Well now I actually want to reach out to our node backend here and fetch posts, dummy posts for now

00:26.510 --> 00:30.030
because we have no database but I want to fetch posts from there.

00:30.350 --> 00:37.370
So let's go to our backend and we'll add all the other code now to our express app because this is the

00:37.550 --> 00:41.260
tool we want to use for creating routes that makes it so much easier

00:41.750 --> 00:47.750
and in there, we will now register a so-called path because I want to fetch posts

00:47.840 --> 00:52.100
if we send a get request to /path. Now to do that

00:52.160 --> 00:54.830
I'll first of all get rid of that redundant middleware here

00:55.310 --> 01:03.470
but then here on my app we use middleware down there, I will add another argument, you can add a lot of or as

01:03.470 --> 01:04.910
many arguments as you want.

01:04.910 --> 01:08.000
The last one is your function which handles the request,

01:08.000 --> 01:11.510
the other arguments are filters or other middleware you apply,

01:11.630 --> 01:16.960
like the first argument here I pass is the path for which I want to filter down.

01:17.030 --> 01:24.850
So if I add /posts here, it means only requests targeting localhost 3000/posts

01:24.860 --> 01:31.100
will reach this middleware, all other requests will actually go into the void because we have no default

01:31.130 --> 01:32.930
error handler right now.

01:32.930 --> 01:39.540
Now I will actually name this /APIposts simply to make it really clear that this is a rest API

01:39.560 --> 01:40.780
but this is optional,

01:40.790 --> 01:46.790
the important part is now we have to target this path to reach this code and in here,

01:46.910 --> 01:50.140
I now want to return some json data.

01:50.240 --> 01:53.000
So instead of calling send like this,

01:53.390 --> 01:55.250
there actually is another method,

01:55.280 --> 02:00.240
the json method and this will, well return data in the json format.

02:00.310 --> 02:08.240
I'll set up my posts dummy data here, an array, a normal javascript array and I will follow the format

02:08.270 --> 02:14.030
of posts in the frontend though with one extra field, in the frontend our post thread right now

02:14.030 --> 02:15.700
have a title and content,

02:15.740 --> 02:17.820
now I will also introduce an ID

02:17.840 --> 02:23.030
because typically if we had fetched these posts from a database, they would have an ID.

02:23.030 --> 02:28.640
Important for you to understand, the backend code and the structure of our data

02:28.640 --> 02:34.540
there is totally decoupled of the frontend model we have here in the post model file.

02:34.580 --> 02:42.170
It can be the same and in many cases, it probably will be the same but you can also have data where you

02:42.170 --> 02:46.850
work with different fields and properties on the server than you do on the client,

02:46.850 --> 02:49.820
an example would be the user model, on the backend

02:49.880 --> 02:55.550
you might store some extra information which you don't want to pass on to the client for example because

02:55.550 --> 02:56.960
you don't need it there,

02:57.020 --> 03:02.270
things like the hashed password, you don't typically send that back to the client because you don't need

03:02.270 --> 03:06.820
it there and it would even be suboptimal from a security perspective.

03:07.100 --> 03:07.820
Now for the post

03:07.820 --> 03:13.670
as I said, a post here is not defined as a model because we're not using typescript here as you can tell,

03:13.670 --> 03:21.140
theoretically it would be possible but the de-facto standard language for node is sticking to vanilla javascript,

03:21.140 --> 03:23.010
so this is what we will do here too.

03:23.270 --> 03:25.850
And therefore I will just create it like this,

03:25.970 --> 03:29.220
add an ID which is some random unique string,

03:29.390 --> 03:34.280
then add a title field where I say first server side

03:34.340 --> 03:46.340
post, whoops, post and add our content field where I say this is coming from the server. Now I'll restructure this

03:46.340 --> 03:49.430
a bit to simply make this easier to read,

03:49.520 --> 03:53.440
put this into multiple lines and one post is boring,

03:53.450 --> 03:54.930
let's add a second one,

03:55.040 --> 04:01.810
let's roll our fingers over the keyboard again for the unique ID and creative as I am, I'll name this

04:01.820 --> 04:06.230
second server side post and add an exclamation marks to the content.

04:06.470 --> 04:08.900
Now we got two dummy posts, later

04:08.900 --> 04:11.420
these will be coming from a database of course.

04:11.420 --> 04:15.680
Now to return them here with our response,

04:15.740 --> 04:17.590
we could just send them like this,

04:17.590 --> 04:23.450
we could just pass them to json and array is have valid object we could turn into json but we could

04:23.480 --> 04:31.100
also send back a more complex object where we maybe have a message like posts fetched successfully

04:31.300 --> 04:37.010
and this really depends on how you want to structure your API and which data you want to use on the

04:37.010 --> 04:37.770
client.

04:37.780 --> 04:42.140
Here I just want to demonstrate that you can send more complex objects too,

04:42.170 --> 04:49.730
so here I have my message property and then my posts property which actually holds the posts array.

04:49.760 --> 04:52.190
Now we're sending this object as json,

04:52.190 --> 04:57.530
now one little extra piece of information I want to add to the response by chaining another method

04:57.530 --> 04:59.410
prior to json is

04:59.420 --> 05:02.340
I will set a status code with the status method

05:02.630 --> 05:06.470
and here I will set it to 200 for success.

05:06.470 --> 05:12.800
Now you don't need to return the response because it's the last statement in this use function anyways, so

05:12.800 --> 05:14.460
it will return.

05:14.480 --> 05:18.960
You shouldn't call next because there is no next middleware we want to execute,

05:19.010 --> 05:25.270
we really want to finish with sending that response and therefore we're all set to try this out.

05:25.280 --> 05:30.920
Now let's save this and the server should restart automatically and let's try it in the browser first

05:31.010 --> 05:37.800
by copying that path, going to the browser and adding localhost 3000 and then this copied path

05:38.420 --> 05:41.910
and you should see your json data as text here.

05:41.930 --> 05:45.090
Now it's cool, we can read this as humans too

05:45.170 --> 05:51.500
but of course it's also highly machine readable and that is what we will now take advantage of by connecting

05:51.500 --> 05:55.700
our angular app to it by using the angular http client.
