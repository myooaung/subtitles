WEBVTT

00:02.640 --> 00:09.080
So with the paginator added, in order for it to do something, I need to go to the back-end and there

00:09.090 --> 00:11.820
in my app.js file or in the post.js

00:11.850 --> 00:18.840
file I mean, where we have the route for fetching all posts, this route here, there we now need to implement

00:18.840 --> 00:19.870
pagination

00:20.250 --> 00:23.990
and I will do this with the help of so-called query parameters.

00:24.090 --> 00:31.620
These are optional parameters, pieces of information you can add to your URL. You add them at

00:31.620 --> 00:39.300
the end of the URL separated from your domain and path by a question mark and you can easily retrieve

00:39.300 --> 00:46.130
them on the back-end in your Express app by accessing request and there, the query object,

00:46.140 --> 00:49.800
this will hold the parsed query parameter information.

00:49.800 --> 00:51.870
I can show you how this works.

00:51.900 --> 00:55.440
Let's console log request query to see what's inside there,

00:55.560 --> 00:58.350
let's save that and our back-end will restart

00:58.370 --> 01:06.390
therefore and let's open new tab and there, I will enter http://www.localhost:3000/api/posts which

01:06.420 --> 01:15.190
is our posts route and then question mark and then here for example page size equals two and page equals

01:15.220 --> 01:16.170
one.

01:16.330 --> 01:17.980
And this is now totally up to you,

01:17.980 --> 01:24.340
you could also have pages here, any names you want or add another parameter, something equals cool, whatever

01:24.340 --> 01:25.470
you want.

01:25.480 --> 01:33.400
You separate them, all the query parameters from the path with this question mark and then the individual

01:33.400 --> 01:37.330
query parameter pairs where you have a name and a value,

01:37.330 --> 01:38.920
separated by equal,

01:38.920 --> 01:43.510
these pairs are then separated by an & sign, by an ampersand.

01:43.660 --> 01:44.110
If I now hit

01:44.110 --> 01:44.800
enter,

01:44.860 --> 01:47.080
we actually retrieve all posts,

01:47.200 --> 01:50.600
so we still reach that route and it works as before

01:50.800 --> 01:55.200
but in the log of our server, we actually see this object here,

01:55.360 --> 01:56.350
page size two,

01:56.350 --> 01:58.690
page one, something cool.

01:59.050 --> 02:05.820
So this is the data we now retrieved because we send a request with these query parameters added.

02:05.890 --> 02:13.030
So they're conveniently parsed for us and this of course allows us to use them to change our Mongoose query

02:13.150 --> 02:17.710
to narrow down which amount of posts we fetch

02:18.130 --> 02:19.960
and this can be done very easily.

02:19.960 --> 02:23.560
First of all, let's retrieve that data from the query object.

02:23.680 --> 02:28.780
So we get the page size and we can get it from request, query.pagesize,

02:28.790 --> 02:31.900
all lowercase though that of course is up to you,

02:31.990 --> 02:36.060
you define which kind of query parameters you accept in your API.

02:37.450 --> 02:43.880
Another feature or value I want to extract is the current page and I get this from request

02:43.880 --> 02:44.930
query page,

02:44.960 --> 02:48.390
again these names here at the end are totally up to you,

02:48.500 --> 02:54.770
you define what you want to extract and I'm simply creating an API which is able to work with these query

02:54.770 --> 02:56.540
parameters

02:56.860 --> 03:05.550
and now again we want to adjust our Mongoose query. The cool thing is if we don't pass page size and

03:05.550 --> 03:13.080
page, then page size and current page will simply be undefined. So we can check whether page size and

03:13.080 --> 03:15.520
current page are not undefined,

03:15.660 --> 03:19.730
so we'll only make it into this if block if they are both set,

03:19.770 --> 03:26.550
if they both contain values, to be precise if they contain valid values because if page size or current

03:26.550 --> 03:27.910
page would be 0,

03:27.960 --> 03:29.940
it would also be treated as invalid

03:30.000 --> 03:33.260
but that is actually the behavior I want.

03:33.270 --> 03:39.930
So now we can construct two different queries, this one to fetch all posts and then an adjusted one to

03:39.930 --> 03:44.470
only fetch a selected slice of posts for a given page.

03:44.870 --> 03:52.350
For this, I'll create a new constant and I'll name it postQuery because the cool thing about Mongoose is you can actually

03:52.350 --> 04:00.960
structure queries by chaining multiple query methods which will narrow down your query and by default,

04:00.960 --> 04:08.550
my post query is post find, so this query down there. It will not get executed immediately,

04:08.550 --> 04:15.210
it will only get executed as soon as we call then and therefore, this will not execute it. So we can now

04:15.210 --> 04:23.030
use post query down there to then execute it but we actually want to manipulate it here in case we get

04:23.030 --> 04:31.380
a page size and a current page and there, we can use two useful methods provided by Mongoose. The first

04:31.380 --> 04:34.260
one is the skip method and

04:34.260 --> 04:43.410
this means we will not retrieve all elements we find, not all posts but we will skip the first n posts.

04:44.100 --> 04:49.720
So you add page size times current page here

04:50.220 --> 04:51.420
or to be precise,

04:51.570 --> 04:53.070
current page

04:53.070 --> 04:53.950
plus one

04:54.090 --> 05:02.490
because if you are on page two, then you want to skip all items that were displayed on page one, right and

05:02.490 --> 05:06.500
the items displayed on page one are the page size.

05:06.540 --> 05:12.110
So if you are displaying 10 items per page, you want to skip 10 items because you are on page two,

05:12.240 --> 05:22.950
so you want to display page size 10 times current page two, whoops, minus 1, so 2 - 1 is 1 of course, 10

05:22.980 --> 05:25.890
* 1 would be 10, so we would skip 10 items.

05:26.130 --> 05:30.150
If we are on page three, then we want to skip 20 items,

05:30.150 --> 05:33.570
the items of the first two pages. So if the page size is 10,

05:33.570 --> 05:37.500
we have 10 * 3 - 1 is 20.

05:37.500 --> 05:41.010
Now that's giving us or that's skipping the previous pages,

05:41.040 --> 05:45.720
we also want to narrow down the amount of documents we retrieve

05:45.730 --> 05:51.250
for the current page and we do that by chaining another method, the limit method.

05:51.270 --> 05:54.450
This limits the amount of documents we return

05:54.810 --> 06:00.780
and here, we simply pass page size because if we got 10 items per page, then we want to limit the query

06:00.780 --> 06:03.130
to only return 10 items.

06:03.330 --> 06:09.260
Now important, this will still execute a query on all elements in the database,

06:09.250 --> 06:10.490
this is how it works,

06:10.740 --> 06:17.220
so for very large data sets, this could be inefficient and a link with a detailed discussion and some

06:17.220 --> 06:21.270
possible work-arounds can be found in the last lecture of this module.

06:21.270 --> 06:26.940
This is a great approach for many use cases though and you will need to have an extremely large database

06:27.090 --> 06:29.120
to run into any issues here.

06:29.430 --> 06:33.120
So this is definitely a fine approach and the approach we will use in this course

06:33.180 --> 06:35.490
but I want to make you aware of this alternative,

06:35.550 --> 06:40.200
again which you find in the last lecture of this module.

06:40.220 --> 06:45.000
So now we get the adjusted post query and then we again execute it.

06:45.020 --> 06:50.870
Now with this set up, let's save this and therefore update or restart our server

06:51.110 --> 07:00.230
and now here with page size set to and page set to one, let's rerun this query and if I do that, I actually

07:00.230 --> 07:02.100
get an error here.

07:02.180 --> 07:09.910
Now that error is thrown because we're using an invalid type, limit field must be numeric.

07:10.200 --> 07:15.480
Now by default and that's important, if you're extracting something from these query parameters, it will

07:15.480 --> 07:21.210
always be a string because it's coming from the URL, it's treated as text.

07:21.210 --> 07:27.510
We need to work with numbers here though and to convert these to numbers, we can simply add a plus in front

07:27.510 --> 07:28.990
of both these,

07:29.310 --> 07:36.780
well statements here. With that if we restart the server, now we can rerun that query and you see indeed,

07:36.900 --> 07:38.540
we got less posts here

07:38.760 --> 07:46.410
and if I bump my current page up to 2 now, whoops 2, then we only got one post because we are fetching two posts

07:46.410 --> 07:49.100
per page and we are on page two.

07:49.320 --> 07:54.270
If we have three posts in total, that means on page two is only one post because

07:54.300 --> 07:56.610
the first two posts were on page 1.

07:57.150 --> 08:03.450
So that's the back-end logic, the next step is to connect Angular to that and to use these query parameters

08:03.630 --> 08:06.400
to only fetch the data we need on the front-end.
