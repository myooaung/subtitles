WEBVTT

00:02.200 --> 00:06.590
Now that we worked on our code in the last lecture,

00:06.640 --> 00:07.490
let's now add

00:07.510 --> 00:13.990
express, so a framework for nodejs to make nodejs development easier. For this I'll quit my nodejs

00:14.080 --> 00:21.790
server here and I will install express with npm by running npm install --save to store an entry

00:21.790 --> 00:25.310
in the package.json file express,

00:25.370 --> 00:31.720
that is the name of the package, the express package. Let's hit enter and this will now download express

00:31.720 --> 00:34.450
and add it to our project.

00:34.450 --> 00:40.450
Now I will add the express app and all the files that belong to it in the backend folder now and we'll

00:40.450 --> 00:45.100
start real simple by adding an app.js file.

00:45.100 --> 00:52.000
Now this app.js file will hold the express app which is still a nodejs server side app, just

00:52.040 --> 00:55.900
well taking advantage of these express features. To take advantage,

00:55.900 --> 00:59.410
we first of all need to import express and you know how that works,

00:59.410 --> 01:01.600
feel free to do it on your own,

01:01.630 --> 01:08.470
we create a new constant, name it express for example and then use require and then express, so the

01:08.470 --> 01:09.430
name of the package,

01:09.550 --> 01:15.470
this now is not a package shipping with node but the package we just installed with npm.

01:15.610 --> 01:17.450
So now we got express installed,

01:17.770 --> 01:25.320
we want to use express of course and one way of using it is to for example quickly add one such route

01:25.360 --> 01:26.140
as it is called,

01:26.200 --> 01:33.790
so handling a request for a single special path only. We do this by first of all creating express app,

01:34.180 --> 01:39.010
I'll name this app and storing it as a constant because I won't change it

01:39.280 --> 01:44.710
and then we just execute that express package basically or whatever we imported from there,

01:44.740 --> 01:49.080
we execute this as a function and it will return us an express app.

01:49.090 --> 01:55.000
This app can now be used and the important thing about an express app is it actually is just a big chain

01:55.060 --> 01:55.990
of middlewares

01:56.050 --> 01:57.930
we apply to the incoming requests,

01:58.030 --> 02:04.750
so like a funnel through which we send that express and every part of that funnel or in that funnel we have

02:04.750 --> 02:11.560
different parts and every part can do something with the request, manipulate it, read values from it or

02:11.620 --> 02:14.540
do something with the response like send a response.

02:14.710 --> 02:21.970
So we will add such a middleware here with app and then the use keyword, this simply well uses a new

02:22.030 --> 02:29.440
middleware on our app and on the incoming request. The middleware function, the use function here in its

02:29.440 --> 02:36.160
simplest form takes a function which is executed for an incoming request and that function takes three

02:36.160 --> 02:39.790
arguments, request and response just like nodejs did

02:39.870 --> 02:44.320
but also a next function. This next function has one important purpose,

02:44.320 --> 02:50.250
if you execute it in here like this, then the request will actually continue its journey, so if I copy this

02:50.260 --> 02:56.890
for example and I add one other middleware after the first one, then we could console log something

02:56.890 --> 02:59.090
here like first middleware

02:59.650 --> 03:05.030
and in the second middleware, we could do something with the response, so the first one of course is useless,

03:05.290 --> 03:07.880
just showing the middleware concept.

03:07.900 --> 03:14.800
So in that second middleware, I'm not calling next which means after this middleware, the request won't

03:14.800 --> 03:21.400
continue traveling down that file and reaching other middlewares and the only thing I want to do here to

03:21.400 --> 03:27.310
not let's it go into the void and therefore time out is I will send back a response because the client

03:27.310 --> 03:31.350
which sent the request is of course waiting for such a response.

03:31.360 --> 03:34.260
We do that with the response object here

03:34.420 --> 03:36.420
but this now actually is a different object

03:36.420 --> 03:38.740
than in nodejs, it's more powerful,

03:38.740 --> 03:46.540
for example it has a send method and this allows us to send back a response easily like hello from

03:46.690 --> 03:53.380
express. This will also implicitly end the response writing stream and will simply just well return

03:53.380 --> 03:55.500
that response and set the right headers,

03:55.510 --> 03:57.250
so everything for us.

03:57.460 --> 04:04.270
So it sends back this response for an incoming request and the only thing we now need to do is we need

04:04.270 --> 04:10.600
to wire up this very simple express app with our server here where we of course are listening to

04:10.600 --> 04:11.860
incoming requests,

04:11.950 --> 04:17.250
se want to use that app as a listener so to say. Now to export this app,

04:17.260 --> 04:20.300
we don't use the export keyword like this,

04:20.420 --> 04:23.820
instead just like imports that work a bit differently,

04:24.070 --> 04:26.080
exports work also different.

04:26.080 --> 04:33.190
We have the module object which has an exports object and we register what we want to export

04:33.310 --> 04:36.410
in this exports object as a value so to say.

04:36.520 --> 04:39.490
So here I want to export the entire express app,

04:39.550 --> 04:44.880
this one here and this will not just export this constant but also all the middlewares we attach

04:44.920 --> 04:45.430
to it.

04:45.520 --> 04:49.990
By the way in case you're wondering, this is a constant because we never override the values stored in

04:49.990 --> 04:50.340
app,

04:50.350 --> 04:54.950
it's always this express app but we can then use this express app to register new middlewares,

04:55.060 --> 04:57.440
this is not changing the value of this constant,

04:57.460 --> 05:01.110
this is why we can use a constant here. Then we're exporting the app,

05:01.180 --> 05:07.480
now we just need to import it in server.js and there, I will add a new constant, app,

05:07.560 --> 05:10.180
the name is up to you and I will require

05:10.180 --> 05:12.750
and now it has to be a path to our app.js

05:12.770 --> 05:19.450
file, a relative path, so it's ./backend app like this.

05:19.450 --> 05:25.660
Now I want to use that app as a listener for incoming requests and all that has to be done for that

05:25.930 --> 05:29.290
is I pass it to create server,

05:29.410 --> 05:31.940
so there I simply pass app.

05:32.050 --> 05:40.860
Now one other thing is important, before I do that, I will tell express on which port we're working,

05:41.020 --> 05:47.710
so I will call app set to set a configuration for my express environment and I want to set the configuration

05:47.710 --> 05:50.800
for the port key, a reserved key

05:50.800 --> 05:58.270
express knows basically and there I will set this port, now to not reuse the code, I'll simply

05:58.300 --> 06:04.760
add a new constant, port here, store that code in there and then use that port constant here

06:04.810 --> 06:13.090
and also down there in the listener which we still need to start. With that, I got my express app set

06:13.090 --> 06:15.830
up and connected and what we should see is that

06:15.840 --> 06:24.390
now if I restart my node server, we actually see hello from express and this log here in this console

06:24.390 --> 06:29.050
log, if we go back to localhost 3000 and reload

06:29.400 --> 06:32.660
and indeed, here we see hello from express

06:33.090 --> 06:36.910
and in the log we see first middleware and this proves

06:36.930 --> 06:42.520
well the fact that both middleware is executed and if you want, you can comment out this next call in

06:42.520 --> 06:47.430
the first middleware, restart the node server by quitting it and then re-running it,

06:47.430 --> 06:50.330
that's important because we change the server side code

06:50.640 --> 06:52.110
and then if I reload,

06:52.650 --> 06:56.120
well we actually see it's loading infinitely here,

06:56.160 --> 07:01.410
it will actually timeout after a few seconds or after a minute because we're not returning a response.

07:01.500 --> 07:06.220
We get first middleware here but then it's stuck because we're not calling next,

07:06.270 --> 07:08.620
hence the request is not allowed to continue,

07:08.640 --> 07:10.370
it's not reaching this middleware

07:10.500 --> 07:12.660
but we're also not sending a response here

07:12.780 --> 07:15.810
and therefore it will timeout at some point of time.

07:15.810 --> 07:20.280
Now I will simply quit the server to cancel this but this is why it's important to call next

07:20.370 --> 07:29.310
if you're not sending a response. Now with that, our express app is added, now let's do some refinements

07:29.310 --> 07:34.890
to our server before we actually start adding some logic which we can target from within our angular

07:34.920 --> 07:35.290
app.
