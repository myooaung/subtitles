WEBVTT

00:02.620 --> 00:10.070
So let's connect users and posts and it starts on our back-end, in our model to be precise.

00:10.330 --> 00:18.270
I want to store the information about which user created which post in my database

00:18.270 --> 00:28.900
and now we could either store a list of posts in our user object or we store a list of users or one

00:28.900 --> 00:34.960
user to be precise on our posts because each post will only be created by one user.

00:35.290 --> 00:42.340
And that seems like the more reasonable approach since we will be interested in finding out if the user

00:42.340 --> 00:48.710
ID of the user who is sending the request matches the user ID of a post.

00:48.730 --> 00:52.330
So let's go to our post model and edit it.

00:52.420 --> 00:55.480
Thus far, we store no user information here,

00:55.530 --> 00:57.640
now this is going to change.

00:57.790 --> 01:04.540
I'll add a new field here which I'll name creator because this is going to be information about who

01:04.600 --> 01:06.640
created this post.

01:06.640 --> 01:11.760
Now the type of this field is not going to be a string,

01:11.800 --> 01:19.600
it's going to be a Mongoose object ID object because it's going to be an ID. This under the hood will

01:19.600 --> 01:21.600
be a string stored in MongoDB

01:21.670 --> 01:29.380
but Mongoose manages it as a separate type. We can access this type on Mongoose and there, we find the

01:29.380 --> 01:36.140
schema object which has a static types object where we then have object ID.

01:36.160 --> 01:41.660
So this is essentially what an ID will be treated as in Mongoose.

01:41.700 --> 01:46.110
We also want to require this, so required is set to true

01:46.230 --> 01:49.430
and now I want to add one extra piece of information.

01:49.710 --> 01:56.700
Thus far we're telling Mongoose that we're going to store an ID here but I want to even tell Mongoose

01:57.060 --> 02:03.240
to which model this ID will relate and therefore, I will add an extra property here,

02:03.240 --> 02:11.280
the ref property. The ref property allows us to define to which model this ID we are going to store

02:11.280 --> 02:18.410
here will belong and that of course will be our user model because we're going to store a user ID here,

02:18.690 --> 02:23.260
an ID belonging to a user which is stored in our database.

02:23.280 --> 02:27.810
So this is the ID here, we're going to add this extra piece of information

02:27.990 --> 02:30.430
and this will of course be added automatically,

02:30.480 --> 02:35.310
the user is not going to enter this into the form where he creates the post,

02:35.320 --> 02:42.140
instead this is going to be inferred from that token which we pass with requests reaching our backend.

02:43.050 --> 02:44.360
So let's save this

02:44.550 --> 02:48.870
and now I quickly want to go back and first of all delete all the posts I have here.

02:49.020 --> 02:50.970
So let's quickly login

02:54.320 --> 02:55.340
and clear them all

02:55.340 --> 03:00.950
so that we have an empty database because I want to ensure that now that we're changing the type of

03:00.950 --> 03:04.860
data we're saving, all the data has the same format.

03:04.900 --> 03:11.050
This is technically not required by MongoDB but I want to have a clean database for this application.

03:11.420 --> 03:18.650
So now with that, we are prepared. We cleared our database and we added this creator key to our data

03:18.650 --> 03:19.640
schema.

03:19.640 --> 03:26.210
Now in the next lecture, we can actually use that and store that information whenever a new post is created.
