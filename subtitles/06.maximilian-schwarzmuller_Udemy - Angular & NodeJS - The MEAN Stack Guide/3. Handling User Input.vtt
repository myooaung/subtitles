WEBVTT

00:02.080 --> 00:08.890
So adding the visual representation of our login is nice, we got the input fields but of course I want

00:08.890 --> 00:10.570
to be able to handle the user input,

00:10.720 --> 00:15.620
to store it and to finally then also submit it to the server eventually

00:15.730 --> 00:19.450
and as I mentioned, for that we'll use the template driven approach.

00:19.450 --> 00:21.520
Now you already learned how that works,

00:21.580 --> 00:30.340
we can still listen to the submit event and for example call onLogin but there we need to manually

00:30.430 --> 00:38.740
submit a reference to the form object managed by Angular and this can be done by adding a local reference,

00:39.640 --> 00:43.780
login form for example and setting this equal to ngForm,

00:43.870 --> 00:50.710
you remember Angular gives us access to the underlying object and then we can pass login form to the

00:50.710 --> 00:51.930
submit method, excuse me,

00:52.010 --> 00:54.720
to the onLogin method.

00:54.760 --> 01:02.600
We also want to add local references to our inputs, like e-mail input so that we can use these in ngIf.

01:02.680 --> 01:05.130
However there, we also need to assign a value

01:05.200 --> 01:06.970
and that was ngModel

01:07.210 --> 01:14.090
and for that to work, we needed to add a name attribute and ngModel to the input in the first place.

01:14.200 --> 01:22.270
So name would be let's say e-mail and then we would add ngModel to register this as an input. Now e-mail

01:22.270 --> 01:27.930
input also is able to get access to the underlying object controlled by Angular and we can use it in

01:27.950 --> 01:37.480
ngIf to check whether e-mail input is valid and only if it is, excuse me, is invalid and if it is invalid,

01:37.600 --> 01:39.420
then I want to show the error.

01:39.940 --> 01:43.960
Now that of course also means we should add some validators and here,

01:44.020 --> 01:52.740
I will simply add the required validator and the e-mail validator, a validator provided by Angular. This

01:52.750 --> 01:59.270
will do what the name sounds like, it will validate whether this holds a valid e-mail address or not.

01:59.400 --> 02:02.060
With that added, let's also do the same for the password.

02:02.250 --> 02:04.310
Let's add a name here,

02:04.380 --> 02:08.850
the name would be password for example, let's add ngModel

02:08.910 --> 02:16.320
and let's also add a local reference, password input equal to ngModel to get access to the underlying

02:16.320 --> 02:17.100
object

02:17.250 --> 02:22.620
and then I'll add the required validator here. And then I will use password input, the name of the

02:22.620 --> 02:30.340
local reference here in ngIf to check whether this is invalid, in which case I want to show the error.

02:31.190 --> 02:35.970
With that if I save that, I can actually see

02:35.970 --> 02:41.880
validators have been attached and if I enter something like test, we enter a valid e-mail address, so it

02:41.880 --> 02:46.510
has to be something like test@test.com to, well fulfill this requirement

02:46.590 --> 02:48.630
and here we have to enter anything.

02:49.020 --> 02:50.240
Well hitting login,

02:50.310 --> 02:55.790
well then submits the form because right now we don't have the onLogin method, so we're not doing anything.

02:56.040 --> 03:03.730
If we add that in the login component, onLogin, we know we get the form object which is of type ngForm,

03:03.750 --> 03:10.020
we saw that earlier in the course, you need to import ngForm from @angular/forms and then in here,

03:10.140 --> 03:17.520
you can console log form value for example to output the values entered by the user.

03:17.520 --> 03:25.150
So now if my re-enter, whoops, re-enter test@test.com and don't accidentally hit enter,

03:25.410 --> 03:31.710
well then we see our values here before each time I accidentally did hit enter.

03:31.710 --> 03:35.840
So now we're fetching these values, in order to be able to login,

03:35.850 --> 03:37.790
we also need a sign-up screen though.

03:37.860 --> 03:39.950
So let's work on this in the next step.
