WEBVTT

00:02.070 --> 00:05.390
So we get our token configured and created here,

00:05.550 --> 00:08.090
now of course we want to return it.

00:08.430 --> 00:11.140
And for that, I'll actually create a new response,

00:11.160 --> 00:16.420
I don't need to return this one now because there is no code after this code which is going to run.

00:16.470 --> 00:17.880
It's just bad to

00:17.970 --> 00:24.150
omit the return statement here for example, then make it into that block and the execution will continue

00:24.270 --> 00:27.960
and therefore you would send a second response which would cause an error.

00:27.960 --> 00:31.910
That is why you should return here to prevent the execution of this code.

00:31.920 --> 00:33.470
Here we got no other code,

00:33.510 --> 00:35.790
so no need for the return statement

00:36.000 --> 00:39.350
and then here, I will set the status code to 200

00:39.360 --> 00:45.990
because here we did successfully authenticate and I will send a JSON response where you can of course

00:45.990 --> 00:50.630
send a message but most importantly, where I will set my token.

00:50.670 --> 00:53.780
So there I will return the token which we're generating here.

00:54.720 --> 00:56.510
Now the back-end is finished,

00:56.520 --> 01:04.250
now let me move on to the front-end. In the auth service, I'll create a new method, loginUser or just login,

01:04.250 --> 01:05.860
whatever you like.

01:05.880 --> 01:12.060
There we definitely need an e-mail and a password right because, well that's the data we need to send to the

01:12.220 --> 01:14.410
back-end

01:14.640 --> 01:21.210
and then here I'll again send a post request and I will send a post request to that same

01:21.210 --> 01:21.880
URL,

01:21.940 --> 01:29.190
well almost, the end will be /login to target that newly created route but I will also create my

01:29.190 --> 01:31.850
auth data just like for signing up

01:31.980 --> 01:39.190
and of course I will append my auth data to the request and then here we can subscribe and simply for now,

01:39.630 --> 01:42.660
log the response to see what's inside of it.

01:42.660 --> 01:45.880
We should see the token there for a valid credentials.

01:45.960 --> 01:51.830
Now of course we need to connect that newly created service method to the login component and for

01:51.830 --> 01:54.140
that, in the login component, I'll

01:54.150 --> 02:03.510
first of all again inject my auth service of type auth service and you need to add the import to that at the

02:03.510 --> 02:04.050
top

02:05.670 --> 02:12.690
and with that added here in onLogin, I first of all check whenever my form is invalid, in which case

02:12.690 --> 02:20.880
I will just return and otherwise, I will send that request by calling this auth service login and sending

02:20.880 --> 02:27.020
my form value e-mail value and form value

02:27.240 --> 02:28.170
password.

02:29.930 --> 02:31.730
And now we should have everything we need,

02:31.730 --> 02:33.910
make sure you save all files,

02:34.040 --> 02:42.750
go back to your app, go to login and test that credential combination you used for creating a user.

02:42.750 --> 02:46.760
Now here I get an unauthorised my password might be wrong though, so

02:46.980 --> 02:55.990
let me quickly create a new user where I'm sure I didn't mistype. So that's a user created,

02:56.240 --> 02:58.610
let's now also login with that user

03:01.280 --> 03:03.150
and that doesn't work,

03:03.170 --> 03:04.900
I'm pretty sure I didn't mistype

03:04.930 --> 03:06.730
now, so let's see where this is

03:06.730 --> 03:08.800
failing. To find out,

03:08.960 --> 03:15.230
I'll go to my back-end and first of all, let's console log the user we're retrieving here when we're

03:15.230 --> 03:24.930
looking for the existence of the user. With that added, let's simply submit that presumably valid authentication

03:24.930 --> 03:29.430
information again and I do see, I did retrieve a user there.

03:29.470 --> 03:30.530
So that's looking good,

03:30.670 --> 03:35.200
I should make it past this check therefore.

03:35.370 --> 03:38.780
I also do have a password field and I should be able to compare this.

03:38.820 --> 03:41.940
So let's next console log

03:42.070 --> 03:47.180
the result we're getting here from that comparison. If I save this

03:47.400 --> 03:50.750
and I send the request again back on the server,

03:50.760 --> 03:51.350
we do get

03:51.360 --> 03:52.070
true.

03:52.080 --> 03:53.360
So that's looking good too,

03:53.550 --> 03:57.310
we should make it to the token here.

03:57.410 --> 04:00.740
So let's console log our token then,

04:04.160 --> 04:05.470
that is not happening,

04:05.510 --> 04:12.140
so something is failing when we actually sign this and therefore, we reach this catch block which actually

04:12.140 --> 04:15.020
catches any errors happening prior to it.

04:15.870 --> 04:17.660
The error then becomes clear

04:17.880 --> 04:24.030
if you add another console log here in the catch block where you log the error object.

04:24.030 --> 04:29.650
With that, if you now login again, you'll see user is not defined

04:30.030 --> 04:32.240
and that makes a lot of sense.

04:32.310 --> 04:36.810
I'm trying to access user e-mail and user ID here but I'm in a new

04:36.810 --> 04:44.090
then block. The user object only exists in that first then block, not the second one.

04:44.100 --> 04:46.730
So in order to access the user down there

04:46.730 --> 04:52.440
too, I of course need to get it down into that second then block

04:52.650 --> 04:56.650
and the easiest way to do that is to simply create a new variable,

04:56.700 --> 05:02.140
let fetchedUser and store that value here

05:02.150 --> 05:09.500
if we got a user, so fetchedUser is equal to user and now we can use fetchedUser anywhere where we

05:09.500 --> 05:15.740
want to access user data, like here user e-mail, that's fetchedUser e-mail, user ID, that's fetchedUser

05:15.740 --> 05:16.670
ID.

05:16.850 --> 05:23.640
Now with that and all console log statements removed, we can go back to our app and now let me clear

05:23.640 --> 05:24.300
the console,

05:24.300 --> 05:25.690
you don't need to reload.

05:25.980 --> 05:33.190
If I now hit login, now I get back an object with that JSON Web Token and the next goal will be to store

05:33.190 --> 05:39.620
that in our front-end code and then use it to authenticate for future requests

05:39.690 --> 05:41.170
going to protected routes.
