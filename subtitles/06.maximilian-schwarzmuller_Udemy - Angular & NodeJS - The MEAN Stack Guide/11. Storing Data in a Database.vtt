WEBVTT

00:02.260 --> 00:09.160
So with our app connected to mongodb, let's now use that post model to not just log it but to actually

00:09.160 --> 00:11.170
save that data to the database

00:11.410 --> 00:13.580
and for that we can do one cool thing,

00:13.600 --> 00:23.020
we can just say post save. The save method is provided by the mongoose package for every model created

00:23.020 --> 00:23.550
with it

00:23.740 --> 00:29.260
and that's the advantage of this model and why we create our object with that model and not just a normal

00:29.260 --> 00:30.560
javascript object.

00:30.850 --> 00:32.010
So now we can save that

00:32.110 --> 00:39.100
and what mongoose will do behind the scenes is that it automatically creates the right query for our

00:39.100 --> 00:46.600
database to insert a new entry with that data and that automatically generated ID into the database,

00:46.810 --> 00:49.440
so that is what save will do.

00:49.440 --> 00:55.600
Now one thing, which database is the question? We got our database connection here but actually, this will

00:55.600 --> 01:02.050
write to a so-called test database because what we have here is a connection to our cluster. Test is the

01:02.050 --> 01:05.050
name of the database we're then storing the data in,

01:05.050 --> 01:08.820
so you can override this and name it node angular for example,

01:08.830 --> 01:14.590
so now it will automatically on the fly create that node angular database the first time you try to

01:14.590 --> 01:20.350
write to it and it will create a new post entry or document as it's called.

01:20.350 --> 01:25.390
Now if you remember, I said that documents are stored in collections though,

01:25.540 --> 01:33.580
so what will be the name of the collection? That will always be the plural form of your model name,

01:33.580 --> 01:40.520
so if your name is post then your collection name will be all lowercase posts.

01:40.690 --> 01:46.180
So that's a collection which will be created automatically for you in the automatically created database

01:46.420 --> 01:50.620
and there, mongoose will automatically save your post as a new document,

01:50.800 --> 01:51.360
awesome,

01:51.370 --> 01:53.510
so much automation.

01:53.560 --> 02:00.570
So with that added here, let's see if that works, let's save that

02:00.970 --> 02:10.720
and let's now go back to our application and let's try adding another post with a little bit of rolling

02:10.720 --> 02:12.320
over the keyboard content

02:14.110 --> 02:16.190
and here how can we tell if it worked,

02:16.210 --> 02:20.520
we don't get a message here, right? Now unfortunately, in the free tier

02:20.520 --> 02:23.040
we also can't look into our database here

02:23.320 --> 02:24.740
so we can't really see this.

02:24.850 --> 02:30.700
Now regarding the operations, that always has a little lag so we can't see it here either,

02:30.700 --> 02:32.770
we don't see live updating here.

02:33.130 --> 02:38.110
So in order to look into our database, we can connect from another source,

02:38.260 --> 02:43.350
let's click on connect again on the cluster and connect with the mongo shell.

02:43.420 --> 02:50.580
Now here choose your operating system and then you'll get instructions on how to install that mongo shell

02:50.860 --> 02:57.490
and you can either use the download link or well that link to, well fetch it from there

02:57.670 --> 03:02.710
and once you got it downloaded, you can use instructions, you're probably using the latest version of that

03:02.710 --> 03:04.140
shell if you use that link

03:04.240 --> 03:08.050
so you can click on the instructions here to find out how to connect.

03:08.050 --> 03:13.420
Now let me show you how it works for Mac, it pretty much works the same for Windows.

03:13.450 --> 03:18.850
So I'll first of all download that shell and once the download finished, I'll execute it, now on Windows

03:18.850 --> 03:24.210
this should give you a little installer, on Mac

03:24.240 --> 03:28.660
it will simply unzip this into a file which looks like this

03:28.770 --> 03:35.800
and you can then just drag and drop that into a folder anywhere on your machine,

03:35.810 --> 03:41.240
so a folder of your choice, I'll actually delete the old content and replace it with the newly downloaded

03:41.240 --> 03:41.730
one,

03:41.780 --> 03:47.600
just drag and drop it over there and then you open your normal operating system terminal or command

03:47.630 --> 03:51.480
prompt where you then navigate into your folder,

03:52.170 --> 03:59.080
into that bin folder and then you can simply run a certain command there which again you see here on

03:59.080 --> 04:01.900
the instructions but it's essentially the same command.

04:02.110 --> 04:04.980
So you can run this command which you see here,

04:05.380 --> 04:07.050
copy it and hit execute

04:07.120 --> 04:14.250
and on Mac and Linux, you will probably add a dot in front of that, dot slash, excuse me

04:14.500 --> 04:20.980
and now this will run that shell and now you're connected to your database and what you can do now is

04:21.160 --> 04:22.710
you can run certain commands.

04:22.720 --> 04:28.480
First of all, you need to add your password though and that's the same password as you have here,

04:28.720 --> 04:33.530
so just copy that password, paste it in

04:33.770 --> 04:40.970
and now once you're connected, you can interact with your database from that, well interface here through the

04:40.970 --> 04:44.150
terminal. Now which commands can you run?

04:44.180 --> 04:45.620
First of all let's,

04:45.650 --> 04:46.620
we're on the cluster,

04:46.640 --> 04:48.510
let's switch to our database,

04:48.620 --> 04:55.790
so to the database which is created on the fly here, node angular in my case. We do this by running use

04:55.940 --> 05:01.950
node angular and you should see that it switched to the db node angular.

05:01.970 --> 05:06.940
Now here, you can run help to see an overview over the commands you can execute and

05:07.070 --> 05:12.050
for example what we can do is we can run show collections to see all collections that were created in

05:12.050 --> 05:16.000
that database and you should see a posts collection there

05:16.370 --> 05:26.840
and then you can also have a look into that collection by running db.posts.find and this will

05:26.840 --> 05:32.450
list all the entries in this collection and you should see one document here which has this automatically

05:32.450 --> 05:35.680
generated ID which has this object ID type

05:35.870 --> 05:37.830
and then your title and your content.

05:37.880 --> 05:39.810
And if you are seeing this, then it worked

05:39.830 --> 05:43.340
and this really is in your database.

05:43.340 --> 05:44.980
Now with that, let's go back to our app,

05:45.110 --> 05:47.340
we can see that the data was stored there,

05:47.390 --> 05:49.260
how can we now fetch it?
