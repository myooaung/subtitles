WEBVTT

00:02.240 --> 00:08.160
With the back-end optimized, let's have a look at the front-end. There we got a nice folder structure already

00:08.390 --> 00:11.360
but there still are a couple of things I want to change.

00:11.360 --> 00:14.720
Let's start by working on the app module.

00:14.720 --> 00:18.140
It's a pretty big file with a lot of declarations and imports,

00:18.140 --> 00:23.450
there's nothing wrong with that but we can optimize this both from a coding perspective, as well as from

00:23.450 --> 00:25.540
a performance perspective.

00:25.550 --> 00:27.920
It's a bit hard to read that file,

00:27.980 --> 00:34.730
for example we got a lot of material related imports here and that makes it a bit harder to see our

00:34.810 --> 00:35.920
other imports.

00:36.320 --> 00:41.420
So it is considered a good practice to put all these material imports into their own app module or into

00:41.420 --> 00:42.680
their own ngModule

00:42.680 --> 00:47.690
I should say and then just import that ngModule into the app module.

00:47.690 --> 00:50.570
This will not yield any performance difference,

00:50.570 --> 00:53.500
it simply makes our code easier to read.

00:53.660 --> 01:00.560
We then will also split our app into different sub-modules though and I mean modules for the different

01:00.560 --> 01:02.250
features of our app.

01:02.450 --> 01:06.810
For example we could create a separate module for logging in and signing up,

01:06.830 --> 01:12.110
so for the authentication related things and we can also put our post related things into their

01:12.110 --> 01:13.250
own module.

01:13.430 --> 01:18.800
For an app of the size we have here, this always is something you can argue about but it is something which

01:18.800 --> 01:24.140
is a good practice for bigger apps especially and which also makes sense for a lot of smaller apps though.

01:24.500 --> 01:30.590
So let's implement this step-by-step and let's start with the Angular module, the @angular/material module.

01:30.590 --> 01:33.320
I will add it here on the root level,

01:33.560 --> 01:41.750
I will add the angular-material.module.ts file and in there, I will export a class which I'll name

01:41.840 --> 01:43.490
AngularMaterialModule

01:43.610 --> 01:50.740
and I will decorate it with @ngModule,

01:51.070 --> 01:53.680
this turns it into an Angular module.

01:53.680 --> 01:55.940
Now this module will only do one thing,

01:56.170 --> 02:01.740
import things from the Angular material package and export them again.

02:01.750 --> 02:09.310
So let's go to the app module and let's use that import from @angular/material and cut it from there.

02:09.670 --> 02:13.630
Let's go to the Angular material module now and let's add it here.

02:13.630 --> 02:16.260
So now we're importing everything for Typescript,

02:16.330 --> 02:24.700
now we need to add it to ngModule and there, we can go back to the app modules too, grab all these now

02:24.700 --> 02:32.910
marked imports here in the imports array and cut them and go to the Angular material module and add that

02:32.940 --> 02:34.640
imports array here.

02:34.650 --> 02:40.980
So let's add imports like this and put all our imports into it.

02:41.040 --> 02:47.520
Now we want to import that Angular material component into the app module and get access to all these

02:47.520 --> 02:49.380
imports. Now by default,

02:49.410 --> 02:52.110
they're not exposed to any other model.

02:52.200 --> 02:57.390
So to make them usable in another module, we have to add another key here,

02:57.390 --> 02:59.040
the exports key

02:59.390 --> 03:02.310
and we simply add the same modules a second time.

03:02.310 --> 03:05.450
This will now import them and then re-export them

03:05.490 --> 03:11.700
and this is really just a structuring thing so that we can now go to the app module and there, we'll

03:11.700 --> 03:19.550
just add our own Angular material module we just created. This module needs to be imported,

03:19.590 --> 03:25.030
so I'll go to import Angular material module from

03:25.210 --> 03:32.330
and now the path is in the same folder, the Angular material module we just created. With that we can

03:32.330 --> 03:33.680
save that file

03:33.680 --> 03:37.520
and if we go back to our application, it should work as before.

03:37.550 --> 03:46.220
We still have the material components here but now we are actually using the slightly restructured approach

03:46.400 --> 03:52.970
which makes it easier to read. And you can even optimize this Angular material module, this duplication is

03:53.030 --> 03:54.410
really redundant,

03:54.580 --> 04:00.780
a feature Angularr offers is that you can remove the imports array and just export them and the importing

04:00.800 --> 04:03.230
will be done automatically by Angular.

04:03.230 --> 04:05.030
So with that, if we reload

04:05.030 --> 04:06.080
it still works

04:06.230 --> 04:13.320
but now our Angular material module is a bit shorter. Now that's the first part, in the next lectures,

04:13.340 --> 04:18.350
I also want to put my posts and authentication related things into separate modules.
