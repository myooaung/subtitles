WEBVTT

00:02.270 --> 00:06.940
Now one thing I noticed is that I accidentally removed my margin here at the top because I set margin

00:06.940 --> 00:07.930
to auto,

00:08.260 --> 00:14.110
well of course you can fix that by adding 1rem here on the margin, to top and bottom actually and

00:14.110 --> 00:15.710
then auto to left and right.

00:15.760 --> 00:18.830
That's a quick thing and that's not the main thing I want to focus on here,

00:18.940 --> 00:25.990
instead what I want to focus on is how we get new posts from the post create component to the post list

00:25.990 --> 00:26.820
component here.

00:27.010 --> 00:30.460
Right now, we get this chain of property and event binding,

00:30.460 --> 00:35.440
we're emitting a new post here and we're passing it to the parent component and then we're passing it

00:35.470 --> 00:37.360
down to the post list component

00:37.360 --> 00:43.990
and this clearly works but I guess you can imagine that in bigger and bigger applications, this becomes

00:43.990 --> 00:49.450
more and more cumbersome because you've got longer and longer chains of property and event binding to

00:49.450 --> 00:53.310
get an element from component A to B to C to D to E

00:53.470 --> 00:56.400
and that's not really what you want to build typically.

00:56.410 --> 01:00.740
So it would be nice if we had an easier way of passing data around

01:00.760 --> 01:02.380
or an alternative at least

01:02.740 --> 01:09.070
and such an alternative which we will use quite a bit throughout the course for other things too is a service.

01:09.070 --> 01:17.560
A service is a class which you add to your angular application, which you let inject by angular into components,

01:17.610 --> 01:24.100
I'll come back to what inject means and which is able to centralize some tasks and provide easy access

01:24.100 --> 01:29.060
to data from within different components without property and event binding.

01:29.230 --> 01:38.170
I will create a posts service in the posts folder by creating a new file posts.service.ts and

01:38.170 --> 01:39.300
that name is up to you

01:39.310 --> 01:41.630
but the convention is to name it .service.ts.

01:41.690 --> 01:49.820
Now a service is just a typescript class, so I export a class posts service, just like that.

01:49.930 --> 01:58.230
Now in there, I want to store a list of posts so I'll add posts and set the type to post array.

01:58.370 --> 02:09.960
Now for this I need to import my post model, so I import post from ./post model like that and this array

02:09.960 --> 02:11.820
initially is empty, let's say,

02:12.060 --> 02:15.750
you could also set it to undefined but I'll set it to empty.

02:15.810 --> 02:22.290
Now here, I actually want to turn this into a private property which means you can't edit it from outside,

02:22.290 --> 02:25.220
I do this by adding private in front of posts.

02:25.470 --> 02:29.740
Now this posts service if we add it to another file can't access posts,

02:29.820 --> 02:32.000
instead I will create a new method,

02:32.280 --> 02:38.010
get posts which allows someone who's interested to retrieve the posts.

02:38.460 --> 02:44.940
So in here, I will return this post, I can do this because now I'm accessing the post from inside but

02:44.940 --> 02:51.480
I actually don't want to return the original array because as you might know, arrays and objects in javascript

02:51.570 --> 02:57.030
and also in typescript are reference types and if you don't know what reference types and primitives

02:57.030 --> 03:02.190
are, an article and a video I created can be found in the last lecture of this module, it's really useful

03:02.190 --> 03:09.240
for understanding this, essentially a reference type is a type where if you copy it you don't really

03:09.240 --> 03:10.300
copy it,

03:10.350 --> 03:12.950
the object in memory will stay the same,

03:13.050 --> 03:17.810
you just copied the address, so the pointer pointing at that object.

03:17.970 --> 03:26.790
So to make a true copy of the posts, I will use a typescript and next gen javascript feature called the spread

03:26.850 --> 03:27.850
operator,

03:28.110 --> 03:34.350
I add square brackets to create a new array and then three dots to take all the elements of another

03:34.350 --> 03:34.850
array,

03:34.860 --> 03:39.770
the posts array here, pull them out of that array and add them to this new array.

03:39.960 --> 03:46.370
So I'm creating a new array with the old objects and therefore this array has been copied. Important,

03:46.590 --> 03:47.910
not the objects,

03:47.940 --> 03:51.450
these are still the old objects but at least the array is copied,

03:51.540 --> 03:58.080
so if I now edit this array, if I add new elements or remove elements from within another component,

03:58.470 --> 04:00.150
this will not work,

04:00.150 --> 04:03.760
this will not affect my original array here.

04:03.880 --> 04:09.690
But that's a little bonus, you don't have to do that but it's a good practice to do that, to try to be immutable,

04:09.690 --> 04:14.290
be clear about the fact that you don't want people to directly edit this post array

04:14.460 --> 04:19.980
and with that we get a get posts method. Getting posts is nice but posting them would also be nice,

04:19.980 --> 04:20.580
right,

04:20.820 --> 04:26.620
so I will also add an add post method where I expect to get a post as an argument.

04:26.640 --> 04:35.350
You could also just get a title and some content and then construct the post here, whatever you prefer,

04:35.780 --> 04:41.120
I will do the latter so I will create a new post here. The post is of type post and it's a javascript

04:41.120 --> 04:47.390
object which has to have you know, a title because that's defined in our post model and I will store

04:47.400 --> 04:52.380
the title there and a content property into which I will store the content argument

04:52.580 --> 04:59.210
and now we can reach out to our post here or to our posts array and push that new post into it. Now

04:59.270 --> 05:06.850
if we do that, we added this post and now we get methods for getting all posts and for adding a new post.

05:07.100 --> 05:12.530
Now we could use that from both the post list component and the post create component without having

05:12.530 --> 05:16.130
to pass data around with property and event binding. For this

05:16.130 --> 05:22.070
we just need to get this service into these components and this is done with a feature called

05:22.070 --> 05:24.620
dependency injection.

05:24.620 --> 05:28.170
Now this means that you simply go to the component where you want to use that,

05:28.220 --> 05:32.600
let's say to the post list component and you add a constructor.

05:32.960 --> 05:37.490
You do this with the constructor keyword, constructor is simply as a function which is called whenever

05:37.580 --> 05:40.460
angular creates a new instance of this component

05:40.460 --> 05:46.100
and here you can expect arguments but since angular is the one creating new instances of the component,

05:46.490 --> 05:52.940
angular has to give you these arguments and angular has a complex dependency injection system which

05:52.940 --> 05:57.010
is able to actually find out what you wanted and indeed give you that.

05:57.350 --> 06:05.270
So here what you do is you define the service you want to have and I simply add an argument with any

06:05.270 --> 06:05.900
name you want,

06:05.900 --> 06:09.380
I'll name it posts service though because that is what I want to have

06:09.680 --> 06:15.710
and now you have to define the type here to give angular a hint about what it actually should

06:15.710 --> 06:16.440
give you.

06:16.700 --> 06:21.310
So here I'll set the type to posts service and I need to import this,

06:21.470 --> 06:35.830
so I'll go up there and import posts service from posts.service, like that. Now this will actually tell

06:35.870 --> 06:41.920
angular hey I want to have a posts service instance because you set the type and angular will try its best

06:41.920 --> 06:44.560
to give you an instance of this service.

06:44.570 --> 06:53.450
However I also want to store this in a property of my class here, so I can add a new property here which

06:53.450 --> 06:58.860
I can also name posts service which is of type posts

06:58.860 --> 07:05.470
service and is empty at the beginning and then here, we can set this posts service equal to the posts service instance

07:05.470 --> 07:12.200
I'm getting here. Now this is a bit of a cumbersome, typescript offers a shortcut for this, we

07:12.200 --> 07:20.600
can omit all that code and actually get the exact same result by adding a keyword in front of posts service,

07:20.750 --> 07:27.830
the public keyword will automatically create a new property in this component and store the incoming

07:27.830 --> 07:29.950
value in that property.

07:30.380 --> 07:36.440
Now that's all nice and angular will try to fulfill this requirement but actually, it won't be aware of

07:36.440 --> 07:42.920
the posts service because it doesn't scan all your files. So you have to make angular aware and there

07:42.920 --> 07:44.220
are two ways of doing that,

07:44.330 --> 07:50.960
you can go to app module and add the posts service there, not in declarations and not in imports but

07:50.960 --> 07:54.590
in the providers array, providers are for services.

07:54.990 --> 08:01.010
There you could simply add posts service and also add the import pointing to that file

08:01.640 --> 08:06.980
and then this would allow angular to find that that service. Now that's option number one

08:06.980 --> 08:08.840
and there's nothing wrong with it, 

08:08.930 --> 08:16.580
you can also take an even easier route and go to the posts service and add an argument to it, @injectable

08:17.150 --> 08:22.230
which is imported from @angular/core,

08:22.260 --> 08:24.260
don't forget the parentheses and there

08:24.300 --> 08:32.420
you don't have to but you can pass a javascript object to configure this and you can then set provided

08:32.490 --> 08:38.320
in and set this to a string named root or with the content of root and make sure to not mistype,

08:38.320 --> 08:39.590
root is important

08:39.690 --> 08:41.070
and this simply will do the same,

08:41.070 --> 08:45.930
it provides this on the root level and this not only means that angular finds this,

08:46.140 --> 08:51.810
this also means and the same was true if you added it to providers that angular doesn't only find it but

08:51.810 --> 08:55.700
that it will only create one instance of the service for the entire app.

08:55.740 --> 09:00.990
So wherever you inject this, you're going to use the same instance and this is really important because

09:00.990 --> 09:06.180
since we manage our posts array in the service, having multiple instances would be bad because we would

09:06.180 --> 09:09.820
have multiple copies with different arrays in there.

09:09.870 --> 09:16.260
Now we have one and the same instance and we got it injected into post list and there we got our posts

09:16.320 --> 09:17.270
service,

09:17.280 --> 09:23.970
now all we need to do is call get posts. Let's do that and wire up the rest in the next lectures.
