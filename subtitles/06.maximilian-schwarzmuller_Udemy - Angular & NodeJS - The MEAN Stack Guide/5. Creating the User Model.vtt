WEBVTT

00:02.230 --> 00:06.010
We added our front-end code for signing up and logging in,

00:06.100 --> 00:08.730
let's now work on the back-end, so on

00:08.740 --> 00:15.040
NodeJS side. There we got routes for creating posts, updating posts,

00:15.040 --> 00:19.470
now we want to create routes for creating users or logging users in.

00:19.660 --> 00:25.420
Let's start with creating users and since we have posts.js file in the routes folder for working with

00:25.420 --> 00:32.740
posts, it makes sense to also add an auth.js file or a user.js file here.

00:32.930 --> 00:34.480
You can choose whichever name you want,

00:34.480 --> 00:42.810
I'll go with user.js. So this is the part where I want to implement login and sign-up routes.

00:43.000 --> 00:49.260
So this is the user.js file and we can copy the part to the top of posts.js,

00:49.280 --> 00:51.190
not multer,

00:51.220 --> 00:56.830
we don't need to handle image upload, just Express and then also create the Express router.

00:56.910 --> 01:01.930
So let's copy all of that but remove the post model import and the multer import,

01:02.080 --> 01:08.020
we just want to create the Express router and at the very bottom, we want to export it, so module exports

01:08.140 --> 01:10.480
is our router. In-between,

01:10.480 --> 01:17.260
we can then register the routes and there, I want to have two routes for now, two post routes to be precise.

01:17.260 --> 01:27.140
The first one is handling all requests going to let's say api/users or user/signup

01:28.000 --> 01:32.380
and to make sure that we have api/user in front of this,

01:32.530 --> 01:40.330
I will of course go to app.js where I already import my post routes and there, I will also implement my

01:40.420 --> 01:50.300
user routes by requiring ./routes/user. So this will import my user routes

01:50.560 --> 01:55.800
and now here at the bottom where I set up my post routes and forward requests

01:55.840 --> 02:00.120
aiming at /api/posts slash something to post routes,

02:00.280 --> 02:07.120
I will do the same for requests targeting api/user slash something and I will forward them to

02:07.120 --> 02:08.580
the user routes.

02:08.590 --> 02:14.350
So now any requests where the paths starts with that will go into my user.js file and anything which

02:14.350 --> 02:17.890
has then a /signup thereafter will reach this route

02:18.040 --> 02:24.160
and here we have the well-known function with request, response and next where we can handle the incoming

02:24.160 --> 02:25.630
requests.

02:25.630 --> 02:29.080
Now the question is, what do I want to do in this function?

02:29.230 --> 02:36.370
And the answer is of course, I want to create a new user and store it in the database. For that, I need

02:36.370 --> 02:40.510
a new Mongoose model because we got a new type of data now.

02:40.750 --> 02:46.590
So in there, I will add my user.js file and just like in the post.js file,

02:46.660 --> 02:53.350
I will first of all require Mongoose and then create a new schema. For that,

02:53.380 --> 02:59.350
I will use Mongoose schema and export that, so I'll actually copy the entire code from the post model,

03:00.330 --> 03:03.750
rename this here however to user schema

03:03.990 --> 03:06.950
and of course also rename it here at the bottom.

03:06.990 --> 03:11.830
I will also name my model here user and not post

03:12.060 --> 03:15.430
and of course my schema will look a bit differently.

03:15.470 --> 03:18.850
Here I will not have a title, content and image path,

03:18.960 --> 03:26.410
instead my user will have an e-mail which will be of type string in the end which is also required, 

03:28.050 --> 03:36.080
so required is true just like I had it in the posts and I will also add another field here, unique and

03:36.080 --> 03:37.260
set this to true.

03:37.430 --> 03:39.200
Now that's something important though,

03:39.200 --> 03:43.100
unique does not act as a validator.

03:43.100 --> 03:49.670
So this means it does not automatically throw an error if we try to add a new entry with an e-mail

03:49.670 --> 03:56.030
address that does already exist, well it will eventually lead to problems but we can't rely on this

03:56.030 --> 03:58.460
validating data when we try to save it,

03:58.640 --> 04:00.510
we'll have to do this differently.

04:00.680 --> 04:07.580
Unique instead allows Mongoose and MongoDB to do some internal optimizations from a performance perspective

04:07.730 --> 04:09.590
since it knows that this will be unique,

04:09.770 --> 04:14.590
it's not there to validate input, unlike required which would throw an error

04:14.660 --> 04:21.170
if you don't provide an e-mail. So with that, we got the e-mail configured, we'll also have a password which will

04:21.170 --> 04:25.370
be of type string and which is also required.

04:25.370 --> 04:30.440
This is my user schema for now and I'm using this to create a user model which we then can use in other

04:30.440 --> 04:31.670
files.

04:31.670 --> 04:35.900
Now I mention that we can't use unique here as a validator,

04:36.080 --> 04:43.600
however I want to make sure that I don't save user data or a user with the same user ID twice

04:43.670 --> 04:50.570
and thankfully, there is a package we can use. For that, I'll stop my back-end server or any process, doesn't

04:50.570 --> 04:51.290
matter

04:51.470 --> 04:59.360
and I will run npm install --save mongoose-unique-validator,

04:59.480 --> 05:04.780
that's a third party package which will add this validation logic for us.

05:04.790 --> 05:11.390
It will not add it automatically though, we have to connect it to our schema which we want to validate.

05:11.390 --> 05:18.840
So in the user.js file, I will add a new import, unique validator or any name you like and I will require

05:18.840 --> 05:23.320
the Mongoose unique validator package we just installed.

05:23.330 --> 05:25.560
Now we have to use this as a plugin,

05:25.640 --> 05:27.390
that's a feature provided by Mongoose,

05:27.530 --> 05:33.690
we can add plugins to schema, that's basically extra functionality which Mongoose will run on the schema

05:33.920 --> 05:39.740
and then it depends on whatever this plugin does, well how it will influence the schema. Unique

05:39.740 --> 05:45.250
validator is a plugin that will simply add an extra hook that checks your data before it saves it

05:45.290 --> 05:46.840
to the database.

05:46.880 --> 05:53.000
We add such a plugin by taking our schema, the user schema here and calling the plugin method, a method

05:53.000 --> 05:54.380
provided by Mongoose

05:54.620 --> 05:59.330
and here we simply pass the unique validator. With that, we validate this

05:59.330 --> 06:05.970
and now we will get an error if we try to save a user with an e-mail that does already exist.

06:05.990 --> 06:11.250
So now we get that validation in place and now we can restart our server logic there,

06:11.300 --> 06:18.850
now the next step is to save our users whenever we get a request sent to our new route here.

06:18.920 --> 06:21.070
Let's work on this in the next lecture.
