WEBVTT

00:02.150 --> 00:06.570
In our project, we've got of course two ends, two parts

00:06.580 --> 00:14.620
so to say, the back-end and the front-end. Now I want to start with optimizing the back-end. There, we right

00:14.620 --> 00:17.740
now have a lot of logic in our routes files,

00:17.830 --> 00:24.940
so in the routes folder, posts and users. Now for our app here, this is probably fine but it would also be

00:24.940 --> 00:31.530
nice if we could see which routes we have and which middleware they take a bit quicker.

00:31.720 --> 00:38.250
Right now, we have to scroll through the entire posts.js file and it's easy to overlook a route or misread

00:38.350 --> 00:39.310
it,

00:39.310 --> 00:42.850
therefore I will add a new folder on the back-end here,

00:43.020 --> 00:48.200
the controller, controllers folder. In that folder,

00:48.270 --> 00:54.720
I will add new files which will actually contain the logic for the routes and I will simply forward

00:54.810 --> 01:00.320
requests to my controller actions then from within the routes files,

01:00.600 --> 01:08.130
let's start with the user.js file here. In that file, I want to handle the user related logic and for

01:08.130 --> 01:13.980
that, I will simply add my logic from the user.js file to that controller,

01:14.100 --> 01:16.440
however not the routing logic,

01:16.650 --> 01:22.290
instead I simply just want to put my methods in there. So for signing up for example, I'm talking about

01:22.650 --> 01:24.890
this method we are executing,

01:24.990 --> 01:27.080
so our own middleware here.

01:27.350 --> 01:33.540
I want to pull it out of the route file so that there, I really only listen to a certain verb and

01:33.540 --> 01:42.150
define a path and then I want to export that logic, that method inside of my user.js controller and for

01:42.150 --> 01:49.950
that, I will use another export syntax, exports and then the name of the function on which you want to export

01:49.950 --> 01:50.620
this, like

01:50.670 --> 01:53.340
for example createuser.

01:53.340 --> 02:01.440
Then you assign a value to that exported object so to say, to this exported property and that value

02:01.530 --> 02:03.960
simply is the function I want to use,

02:04.110 --> 02:11.290
so in my case the function I just cut out of the routes file, this middleware function we defined there.

02:11.350 --> 02:15.430
Now this function uses things like bcrypt and the user model,

02:15.520 --> 02:18.070
so for it to work, we need to import that.

02:18.310 --> 02:23.950
We don't need Express because that's only needed for the router but we need bcrypt, we need the

02:23.950 --> 02:27.700
token eventually and we'll also need the user model,

02:27.700 --> 02:34.030
we can cut all of that from the user.js file in the routes folder and add it to the user.js file in

02:34.030 --> 02:36.040
the controllers folder. There

02:36.100 --> 02:44.130
at the very top, I will add these imports. Now important, here we don't need to adjust the path

02:44.160 --> 02:45.340
pointing to the model

02:45.440 --> 02:49.010
because if we go up from level to controllers, we still reach it

02:49.160 --> 02:54.800
but if you were to add the controller folder somewhere else in a nested place, maybe nest it into routes,

02:55.160 --> 03:00.670
then make sure to update this path to correctly reach that user model file again.

03:00.740 --> 03:02.600
So this is the first step,

03:02.630 --> 03:08.130
of course we don't just have that create user route here,

03:08.270 --> 03:10.310
we also have the login route,

03:10.430 --> 03:17.990
so let's also grab this function here and cut it out of our code here in the user.js file in the routes

03:17.990 --> 03:22.080
folder and export it here instead, in the controller, there

03:22.090 --> 03:25.110
I export, important it's exports,

03:25.160 --> 03:33.110
I export my user login function let's say, this now again is just my middleware function which I cut

03:33.140 --> 03:33.720
out

03:33.860 --> 03:36.760
and now we get all the logic in the controller.

03:36.770 --> 03:44.120
The next step is to connect our functions to the controllers and for that, we need to import our functions

03:44.120 --> 03:45.520
into the routes file.

03:45.800 --> 03:53.460
So here, I will simply add a new constant and I'll name it userController,

03:53.660 --> 03:55.290
you can name it however you want,

03:55.430 --> 04:01.400
I'll name it like this because I want to kind of indicate that this is an object which groups

04:01.460 --> 04:09.050
several things and I'll import it by using the normal require syntax and then I go to the controllers folder

04:09.170 --> 04:11.090
and there, to the user file.

04:11.370 --> 04:14.680
And now I can use user control here on the sign-up route,

04:14.750 --> 04:20.420
still as a second argument and there I access my create user function.

04:20.420 --> 04:24.960
I'm not executing it by adding parentheses, I'm instead just passing a reference

04:25.040 --> 04:30.310
and Express will therefore register this and execute it whenever a request reaches this route.

04:31.010 --> 04:33.380
And for login, I do basically the same,

04:33.380 --> 04:40.370
I use user controller user login and now everything should work as before but now with controllers in

04:40.370 --> 04:41.310
place.

04:41.360 --> 04:48.490
If we now go back to our application, we can test this by logging in with valid credentials,

04:48.520 --> 04:51.350
this is looking good. So our back-end still works

04:51.410 --> 04:54.470
but now with controllers for our user routes.

04:54.800 --> 04:59.630
Now I will do the same for the posts and definitely feel free to pause the video here and try this on

04:59.630 --> 05:00.070
your own,

05:00.110 --> 05:01.010
that's a good practice

05:03.500 --> 05:11.420
and I'm assuming you were successful but let's now also do it together in case you have a tiny error somewhere.

05:11.720 --> 05:19.130
I will add a posts.js file in the controllers folder and now I will just grab all my middleware functions

05:19.310 --> 05:25.190
from the posts.js file here and put it into my controllers folder.

05:25.190 --> 05:28.520
Now for that, let's go to the first route we have here.

05:28.640 --> 05:31.830
Let's leave the multer and the checkAuth middleware as it is

05:32.000 --> 05:40.250
and let's simply grab that last function here, cut it and move over to the posts.js file and here I will

05:40.280 --> 05:47.840
export a new property which I'll name createPost and assign my function as a value.

05:47.930 --> 05:49.010
Now important,

05:49.190 --> 05:52.000
we of course have some dependencies we need here too,

05:52.250 --> 05:55.530
so we will need the post model to be precise.

05:55.700 --> 05:58.490
Let's cut it out of the posts file

05:58.490 --> 06:04.580
in the routes folder therefore and let's add it to the posts file in the controllers folder.

06:04.760 --> 06:08.170
So here I will add my import to the post model.

06:08.750 --> 06:11.240
Now that is the route for creating posts,

06:11.240 --> 06:19.740
we of course have other routes too, like for updating a post, let's fetch our function here too, cut it,

06:19.910 --> 06:28.430
go to the posts.js file in the controllers folder and export updatePost here, again by assigning our

06:28.430 --> 06:30.370
function as a value,

06:30.620 --> 06:38.000
then let's go back to the posts.js file and let's do the same for getting all posts. Cut this function,

06:38.030 --> 06:43.830
go to the controller, create a new exported function with the exports keyword,

06:44.090 --> 06:45.170
getPosts

06:45.170 --> 06:48.900
seems like a fitting name and add our function here,

06:49.160 --> 06:50.590
go back to the routes.

06:50.930 --> 06:54.500
Repeat the same for fetching a single post,

06:54.670 --> 06:59.480
cut this, go to the controller and add exports

06:59.570 --> 07:09.270
getPost here, assign the function, go back to the posts route and repeat one last time for deleting

07:09.270 --> 07:10.170
a post.

07:10.320 --> 07:12.900
Let's cut it, let's go back to the controller,

07:13.080 --> 07:18.450
let's export this, deletePost and assign a function.

07:18.450 --> 07:21.080
Now we got it all in the controllers file,

07:21.180 --> 07:29.190
let's now import that into the posts.js route file by adding an import up there, post controller is

07:29.190 --> 07:35.370
imported by using require and then going to the controllers folder and there importing the posts file.

07:36.030 --> 07:37.860
And now we can use that post controller

07:37.920 --> 07:46.170
in all our routes as the last argument. For the post route here, it's createPost and again, don't execute

07:46.170 --> 07:46.390
it,

07:46.470 --> 07:58.290
just pass a reference, for putting it's of course updatePost, for getting it's getPosts and

07:58.290 --> 08:00.240
for getting a single post, it's of course

08:00.330 --> 08:06.020
getPost and then here in delete, it's deletePosts,

08:06.030 --> 08:07.830
simple as that.

08:07.830 --> 08:10.540
Now we get a cleaned up routes file,

08:10.710 --> 08:13.740
let's see what else we can do on the back-end in the next lecture.
