WEBVTT

00:02.590 --> 00:06.080
So let's continue implementing pagination on the front-end.

00:06.430 --> 00:11.800
So we got a couple of things I want to improve and one thing I actually want to improve first is I want

00:11.800 --> 00:12.890
to show a spinner

00:12.890 --> 00:19.060
whenever we are changing the page. We already got the isLoading property which we are using in a template

00:19.180 --> 00:20.560
to display a spinner,

00:20.770 --> 00:26.420
so I'll just reuse that. In post list component, whenever we are changing the page,

00:26.440 --> 00:33.190
I will set loading to true and we're setting it back to false automatically once we get updated posts.

00:33.200 --> 00:35.060
So this is now showing a spinner,

00:35.270 --> 00:41.330
I also want to make sure that the paginator is only shown if we show the accordion because if we

00:41.330 --> 00:46.610
got no posts, then there is no reason to show the paginator.

00:46.760 --> 00:54.530
I also want to show it whilst we are loading though, so I'll copy the entire ngIf clause but then I

00:54.530 --> 00:55.650
will add it here,

00:55.970 --> 01:02.540
I will remove that isLoading condition because I want to show it all the time, I want to update it though

01:02.540 --> 01:07.430
to only show it if we got more than zero posts but also whilst we are loading.

01:07.760 --> 01:12.870
So with that in place if we go back, we can see that in action, we get the spinner here,

01:12.890 --> 01:15.450
now it's time to work on these other issues

01:15.530 --> 01:20.570
and one of them of course is that I also want to know how many posts we have in total.

01:20.870 --> 01:26.760
Now that is something we can find out on the back-end, here where we are fetching all the posts,

01:26.780 --> 01:30.540
we also can find out which posts or how many posts we have

01:30.890 --> 01:34.340
and for that, we can combine multiple different queries.

01:34.400 --> 01:37.770
Thus far we have one query which we narrowed down,

01:37.880 --> 01:42.860
now here where we got documents, I don't want to create a response yet,

01:42.920 --> 01:47.530
instead I will return another query which will be executed.

01:47.600 --> 01:52.740
I will return post count where find finds

01:52.790 --> 01:55.110
all results, count

01:55.130 --> 02:01.930
will just count them and return that number and we don't need to chain then here, if we return it in

02:01.950 --> 02:09.080
a then block, it will basically create a new promise and listen to its result automatically

02:09.380 --> 02:16.980
and we can simply chain then here therefore and now we're chaining multiple then calls on the query.

02:17.000 --> 02:21.770
And here I know I will get my count and here, I then want to create my response.

02:21.770 --> 02:27.710
So first I'm fetching all the posts and then I'm issuing another query where I get the count and then

02:27.710 --> 02:29.930
here I have the count.

02:30.040 --> 02:38.040
Now one thing, the documents cannot be used in this then block because they're an argument in this function

02:38.050 --> 02:42.880
passed to the first then block. To still use them in the second,

02:43.030 --> 02:46.490
I will store them in a variable, so at the beginning

02:46.540 --> 02:51.290
above all my then blocks, I'll create a new variable, posts

02:51.310 --> 02:54.080
or maybe fetchedPosts,

02:54.220 --> 03:00.790
it's undefined initially and I'll assign documents as a value here in the first block,

03:00.940 --> 03:04.560
we can then use fetchedPosts down there.

03:04.780 --> 03:10.530
So now we're returning the fetch posts but now I also want to return a new piece of information,

03:10.570 --> 03:16.840
my maxPosts, you can name this however you want of course which is my count, so the number of posts we

03:16.840 --> 03:25.020
have in the database in total. With that, we're returning this new piece of information to the front-end,

03:25.110 --> 03:26.850
there we now have to use it

03:27.010 --> 03:30.170
and in the posts service where we get all the posts,

03:30.240 --> 03:34.310
this means we have to update the type of data we get back from the back-end.

03:34.410 --> 03:36.670
We don't just have a message in posts,

03:36.690 --> 03:42.180
we also have that new maxPosts property and that will be of type number.

03:42.210 --> 03:44.110
So now we got that too,

03:44.430 --> 03:49.440
now of course this means we have to adjust our logic here where we transform the posts.

03:49.560 --> 03:54.890
We don't just want to pass on the transformed post array,

03:55.110 --> 04:01.530
instead we want to pass on an object which contains both the updated post array where all the posts have

04:01.530 --> 04:06.040
an ID without an underscore and the maximum amount of posts.

04:06.060 --> 04:11.560
So here in map, I will actually return a Javascript object which has a post property,

04:11.790 --> 04:13.840
let's also close the object down there

04:14.160 --> 04:21.180
but besides that post property, it also has a maxPosts property which simply takes the data from post

04:21.240 --> 04:21.570
data

04:21.570 --> 04:23.160
max posts.

04:23.160 --> 04:27.850
So now we're returning this object with the posts and the max posts,

04:27.930 --> 04:35.820
all data from our database and from our back-end therefore. Now here in the subscribe method,

04:35.940 --> 04:41.870
we therefore no longer get the transformed posts but the transformed post data you could say

04:42.150 --> 04:49.350
and that object will have a post property which holds the posts but it will also hold some information

04:49.620 --> 04:57.730
about our maximum amount of posts and I want to use that too of course. Here where I emit data, 

04:57.840 --> 05:05.430
I no longer just want to pass on an array of posts, so I will change the generic type of my subject because

05:05.430 --> 05:12.090
it should now be a Javascript object which has a posts property which is an array of posts but I also

05:12.090 --> 05:17.010
want to have a second property which is let's say post count which is a number.

05:17.010 --> 05:19.180
So I just updated the type of data

05:19.290 --> 05:26.650
our subject yields. For our subject to yield that updated data,

05:26.920 --> 05:33.610
I need to go down there where I call next and instead of just passing a copy of the array, I will pass

05:33.610 --> 05:41.320
a Javascript object which has a posts property which holds this copy of posts and it will have a post

05:41.320 --> 05:49.930
count property which holds my transformed post data max posts value.

05:50.060 --> 05:55.880
So now this is the object I'm emitting, this is now holding both the posts and the post count and we

05:55.880 --> 05:57.980
can use this in Angular.

05:57.980 --> 06:00.710
Now we get a couple of errors to fix in this file

06:00.710 --> 06:07.440
therefore and let's do that and all the connecting Angular to this logic stuff in the next lectures.
