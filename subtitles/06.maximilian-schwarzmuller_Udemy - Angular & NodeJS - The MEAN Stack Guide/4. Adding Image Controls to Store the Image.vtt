WEBVTT

00:02.390 --> 00:09.200
So I now want to make sure that we can click the pick image button, select an image and then actually store

00:09.230 --> 00:13.850
this as an input, as a value in our form.

00:13.900 --> 00:17.890
Now we already connected the button here to the image picker,

00:17.930 --> 00:21.140
the next step is to do something whenever an image was picked,

00:21.140 --> 00:26.300
right now we just proxy that click but we don't handle the case that the user then picks an image

00:27.110 --> 00:29.320
Now to handle that case too,

00:29.450 --> 00:32.100
we can register any event on the image picker,

00:32.120 --> 00:38.650
so on the file picker here, the change event. This will fire whenever the user changes the selected file,

00:38.720 --> 00:45.930
so if he changes from no files selected to here is a file or if he changes the file thereafter.

00:46.160 --> 00:53.300
So there I want to execute an event or a method I should say and that method is onImagePicked, the name

00:53.300 --> 00:54.700
is of course up to you.

00:54.830 --> 01:01.400
Now I will call that and I will actually forward the native DOM event we're getting here and I can access

01:01.400 --> 01:08.000
this with $event, that's this special variable Angular gives me to access to event object an

01:08.000 --> 01:11.910
event, well had. And this change event has an event object,

01:12.020 --> 01:17.750
I can access it with $event and therefore, I can forward it to onImagePicked by passing it

01:17.750 --> 01:20.070
as an argument. With that,

01:20.090 --> 01:23.070
let's go to the Typescript code and add this method.

01:23.260 --> 01:31.540
There I'll add onImagePicked and I do expect to get an event object here, the type will be event and

01:31.540 --> 01:34.740
that is a default type which you don't have to import,

01:34.750 --> 01:40.780
it's provided by Typescript out of the box because it's a default Javascript type.

01:40.840 --> 01:48.220
So we got our event object here and now, I want to extract the file which was added. So I'll create a new

01:48.220 --> 01:49.570
constant, file

01:49.750 --> 01:58.360
and I can access this by accessing event target which is the, well target on which we clicked and then

01:58.420 --> 02:00.530
the file's property.

02:00.580 --> 02:08.440
The problem just is Typescript doesn't know that our event target actually is an input, a file input and therefore

02:08.510 --> 02:12.010
it doesn't know that this file's property exists.

02:12.010 --> 02:19.690
Now we can solve this by converting this or by explicit telling Typescript that this will be of type

02:20.050 --> 02:29.770
HTML input element. For that, we can simply wrap event target with parentheses and then add as HTML

02:29.950 --> 02:37.090
input element, this does a so-called type conversion and it clearly tells Typescript that this entire

02:37.090 --> 02:43.440
expression here will be an HTML input element which happens to have a files property.

02:43.720 --> 02:45.520
Now files is an array of files

02:45.580 --> 02:50.590
but we will only select one, so we can simply take the first element from that array which is the file

02:50.650 --> 02:52.200
the user selected.

02:52.750 --> 02:55.340
So now we got that and that's great,

02:55.360 --> 03:00.790
the next step is of course that we want to store this in a form control.

03:00.790 --> 03:05.620
Right now, our form only has two controls, title and content,

03:05.620 --> 03:09.540
I now want to change this and actually add a new control.

03:09.850 --> 03:13.910
So let's add a third control here and I'll name this image,

03:13.960 --> 03:15.850
the name is totally up to you.

03:16.280 --> 03:18.800
I'll simply create a new form control here

03:18.910 --> 03:26.370
as before and in this form control, I initially will set a value of null, we'll later change this or

03:26.430 --> 03:29.990
update this down here to also set a value if we got a post

03:30.000 --> 03:32.150
but for now let's go with null here.

03:32.730 --> 03:36.990
So we've got the null value here for a new post,

03:37.020 --> 03:39.320
I will add a validator,

03:39.480 --> 03:45.330
so I will add my configuration with validators and I will add the required validator because I want

03:45.330 --> 03:48.180
to ensure that this is not empty.

03:48.180 --> 03:54.690
Now one thing I'm not doing here is I won't bind this to any HTML element.

03:54.990 --> 04:00.510
You could think that I bind it to this input, to the file picker but I actually won't do that because

04:00.930 --> 04:04.860
we don't see that anyways and I don't want to display anything there,

04:04.860 --> 04:10.760
I also don't want to display an error here on that, at least not like this.

04:10.860 --> 04:13.850
So I will not synchronize this

04:13.890 --> 04:18.480
to HTML and that's the cool thing about the reactive approach.

04:18.660 --> 04:21.070
We don't have to synchronize this,

04:21.270 --> 04:25.980
instead we can totally manage a value behind the scenes in Typescript only.

04:25.980 --> 04:32.320
So this is now a control of the form and we can control the value it has manually with Typescript,

04:32.340 --> 04:35.440
therefore when we submit it, we can access the value,

04:35.550 --> 04:40.810
we don't have to synchronize it to HTML if we don't have a fitting element there.

04:41.040 --> 04:44.580
So we get that image control now and in onImagePicked,

04:44.580 --> 04:52.620
I can now do that well type or that value assignment I was referring to. I can reach out to my form because

04:52.620 --> 04:56.460
it's controlled in Typescript and then I can call patch value.

04:56.460 --> 05:04.110
Now set value is something you already saw, there you would set the values of all inputs or all controls

05:04.130 --> 05:10.530
on your form, patch value allows you to target a single control and that's exactly what I want to

05:10.530 --> 05:11.420
do here.

05:11.790 --> 05:16.970
So we pass an object there too, then the name of the control which is image in my case

05:17.310 --> 05:19.800
and then the value and that is the file.

05:19.800 --> 05:24.150
Please note, the entire file which is a file object in Javascript,

05:24.150 --> 05:27.120
so this is no text, this is a file object,

05:27.270 --> 05:30.520
you are not limited to storing text in your form,

05:30.540 --> 05:33.470
that's another cool thing about that reactive approach.

05:33.870 --> 05:36.400
So now we're storing the file object here,

05:36.780 --> 05:44.190
now one thing I need to do is I need to reach out to my form, get access to my image here and call update

05:44.220 --> 05:46.040
value and validity.

05:46.050 --> 05:53.250
This basically informs Angular that I changed the value and it should re-evaluate that, store that value

05:53.250 --> 05:57.740
internally and also check whether the value I did patch is valid

05:57.900 --> 06:03.870
and that will run the validator on this input even though the user never directly typed in there.

06:03.870 --> 06:05.150
So that's really really cool.

06:06.010 --> 06:15.970
Now with that, let's do something let's console log our file here and let's console log our form here when

06:15.970 --> 06:18.510
we pick an image to see if that works.

06:18.520 --> 06:21.060
So now if I go back and create a new post,

06:21.310 --> 06:22.980
let's pick an image,

06:23.020 --> 06:29.390
my spring.jpg file and we do see the file here, we do see the form group here

06:29.760 --> 06:36.810
and if we inspect the value there, we can see that indeed for the value, that file was assigned and is

06:36.870 --> 06:37.650
stored here

06:37.680 --> 06:41.700
and that's the file object as managed by Javascript.

06:41.700 --> 06:43.720
Now that's a first important step,

06:43.860 --> 06:46.110
we can store that in our form,

06:46.140 --> 06:47.850
of course we're not submitting it yet,

06:47.850 --> 06:49.430
we're not uploading it yet

06:49.440 --> 06:54.470
and before we even do that, it would also be nice to see a preview of that image, I guess.

06:54.490 --> 06:56.700
So let's work on that preview thing next.
