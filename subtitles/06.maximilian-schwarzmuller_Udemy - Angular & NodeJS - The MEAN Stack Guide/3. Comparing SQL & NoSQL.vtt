WEBVTT

00:02.260 --> 00:06.910
So NoSQL versus SQL, what's the difference,

00:06.910 --> 00:15.140
how do these database systems and concepts differ and why are we using mongodb here?

00:15.220 --> 00:16.390
So what's the difference?

00:16.390 --> 00:19.570
We got NoSQL and SQL databases, for NoSQL

00:19.570 --> 00:25.390
examples would be mongodb which we will use in this course but also couchdb for example

00:25.450 --> 00:29.890
and for SQL, we would have MySQ,  Microsoft SQL,

00:29.890 --> 00:31.450
these are just some examples,

00:31.480 --> 00:38.490
there are more solutions of course. Now NoSQL databases enforce no data schema,

00:38.680 --> 00:44.290
so in one collection you can have records with different structures.

00:44.290 --> 00:50.020
They might have a common trunk but then may be one entry has an additional field which another entry

00:50.020 --> 00:55.630
does not have for example. One advantage of that is for example if your application changes and

00:55.630 --> 01:02.470
now you want to store the old information but additional fields, you can do that in the same table or

01:02.560 --> 01:04.000
collection as it's called here

01:04.180 --> 01:08.540
as before and some older records will simply not have the new fields

01:08.560 --> 01:09.860
whilst your new record

01:09.880 --> 01:16.690
will have it. Now in SQL databases, you typically have a more strict data schema and all records

01:16.750 --> 01:26.140
in a table have to have the same look and the same schema. A NoSQL database also is less focused on

01:26.140 --> 01:27.090
relations,

01:27.130 --> 01:35.530
you can still create relations by storing the ID of one document as it's actually called, of one document

01:35.560 --> 01:37.300
in another document

01:37.300 --> 01:40.320
but they play less of a role than they do in SQL.

01:40.370 --> 01:47.650
In SQL, it's all about having these normalized data tables where one table stores the users, the

01:47.650 --> 01:50.000
next table stores the orders,

01:50.040 --> 01:56.530
that's not bad and that's actually also something you can build with NoSQL but NoSQL puts less

01:56.530 --> 01:59.110
of a focus on that.

01:59.140 --> 02:06.520
We also have independent documents whereas the SQL records tend to be more related and that really is

02:06.550 --> 02:11.260
just a summary of that data schema and relations thing I already mentioned.

02:11.290 --> 02:14.700
So documents simply are more on their own,

02:14.740 --> 02:19.510
they can be related but they don't have to, they can follow a certain schema but they don't have

02:19.510 --> 02:27.250
to. And NoSQL is therefore great for data where the structure might vary, where you have a lot of

02:27.340 --> 02:34.660
throughput because it's very fast to query because you have less relations where you need to do complex

02:34.660 --> 02:40.600
queries, instead you typically query for one collection, just a bunch of documents without creating

02:40.600 --> 02:45.430
all these queries and these joins, there are no such joins in NoSQL.

02:45.640 --> 02:50.380
So therefore it's great for things like logs, orders, chat messages,

02:50.660 --> 02:57.370
SQL on the other hand tends to be great for shopping carts, contacts and in general complex social

02:57.370 --> 03:00.070
networks, these kinds of things.

03:00.070 --> 03:05.070
Now one thing that's really important though, there is no hard restriction for either of that,

03:05.110 --> 03:11.210
so you can absolutely build a social network with NoSQL databases and the other way around.

03:11.380 --> 03:16.110
Additionally in bigger apps you often have multiple database systems getting used,

03:16.210 --> 03:22.480
so you might have a NoSQL database for one type of data your app generates and a SQL database

03:22.510 --> 03:24.070
for a different part,

03:24.250 --> 03:26.980
so you can mix and match them. In this course

03:26.980 --> 03:35.830
I use mongodb simply because that mean stack turns out to work together really well, it's fun to query

03:35.980 --> 03:41.980
NoSQL data with javascript and with angular therefore because it happens to be stored in a structure

03:41.980 --> 03:46.370
that looks and feels like json, that's very easy to work with.

03:46.390 --> 03:55.630
Additionally a lot of mean stack apps are apps where you might end up with a lot of read actions, so often a

03:55.930 --> 03:58.620
NoSQL database is a great solution there

03:58.660 --> 04:06.040
but overall you could swap it for an app of the size we build it in this course, it will not matter

04:06.040 --> 04:07.490
that much to be honest

04:07.540 --> 04:14.410
but since mean overall is a thing and a skill or a set of skills which is in high demand, we will use

04:14.550 --> 04:15.600
mongodb

04:15.880 --> 04:21.190
and the way you connect it to node and therefore also to angular is of course something that

04:21.190 --> 04:24.280
doesn't change that much when you use a SQL solution.
