WEBVTT

00:02.660 --> 00:09.530
So let's make sure we can also edit images and to not just view them one time or upload them one time. For

00:09.530 --> 00:09.780
that,

00:09.780 --> 00:13.630
we of course need to work on the post create component. There

00:13.690 --> 00:18.340
we right now have nothing in place to edit existing images.

00:18.480 --> 00:24.420
Now the first thing I want to do there is when we create a new form for the image, we always have null

00:24.450 --> 00:26.490
as a starting value right now,

00:26.520 --> 00:31.830
now when we add an image, I actually want to also use my image path.

00:32.010 --> 00:42.690
So when we set a value here, I'll set a value for image and that value will be this post image path. Now

00:42.780 --> 00:46.940
that's a string but we can still assign this here as a value for this input,

00:47.010 --> 00:50.640
we're not limited to adding a file here.

00:50.750 --> 00:54.800
Now with that, we're already prepared to handle that in the form

00:55.010 --> 01:03.270
and if I now reload this, maybe save that file before I do so, now it works without errors.

01:03.530 --> 01:11.000
Now if we submit this, we of course execute a method in our posts service, we execute update post.

01:11.060 --> 01:14.920
Now there of course, we have to differ between two cases,

01:14.930 --> 01:16.850
do we have a string image or not?

01:16.850 --> 01:23.360
Because if we got a string image, well then I just want to send a JSON request, if we got an object,

01:23.360 --> 01:28.430
so if we got a file, well then I of course want to upload this

01:28.440 --> 01:32.700
as form data. It'll be a put request nonetheless

01:32.870 --> 01:35.470
but the payload simply differs.

01:35.930 --> 01:38.430
So here we're reconstructing a new post

01:38.540 --> 01:46.130
and first of all, I'm expecting my image here and this will actually be of type any or we can be more

01:46.130 --> 01:46.880
precise,

01:46.970 --> 01:50.920
it will be a file or with the pipe operator, a string,

01:50.930 --> 01:52.620
so it can be either.

01:52.910 --> 01:58.290
Now let's remove the posts here and let's now check what it is.

01:58.310 --> 02:04.510
Now first of all, let's go back to post create component and maybe pass it, here when we do save the post,

02:04.550 --> 02:09.080
let's pass this form value and then image,

02:09.080 --> 02:13.470
so let's pass this extra value to update post

02:13.490 --> 02:18.540
but now back in the post service, here I want to check what we have.

02:18.560 --> 02:30.570
So if the typeof, it's a built-in function, if the typeof image is equal to object, we can check for

02:30.590 --> 02:31.300
file here

02:31.320 --> 02:33.940
but a file will be an object, a string will not.

02:34.180 --> 02:39.630
So if that is equal to object, then we want to create a form data object,

02:39.630 --> 02:47.300
else I know that I have a string here as an image and therefore, I want to send normal JSON data.

02:47.610 --> 02:55.380
So if we have an object, I'll create my new post data here with a new form data object and as we did

02:55.380 --> 03:04.020
it for, well posting that for the first time, we'll then call append here and append the title which

03:04.020 --> 03:06.970
will be the title we get as an argument here,

03:07.410 --> 03:13.720
then of course do the same for the content and then add our file.

03:13.800 --> 03:22.590
So here, I then append my image which is the image I'm getting here and where the title will be the filename,

03:22.590 --> 03:25.970
so this is the relevant thing if we're uploading a new post.

03:27.190 --> 03:38.540
Else here, I want to create new post data which is of type post which is simply a Javascript object where

03:38.540 --> 03:46.430
I will have an ID which is the ID I got here, where I have my title, where I have my content and where

03:46.460 --> 03:51.590
I have my image path which is the image I'm getting, which in this case would be a string.

03:52.040 --> 03:53.110
So either way,

03:53.150 --> 03:54.930
post data is what I want to send,

03:54.950 --> 03:57.720
so let's send it here. Now

03:58.840 --> 04:00.500
Typescript doesn't understand that

04:00.500 --> 04:02.900
post data will always exist,

04:02.950 --> 04:10.930
so let's initialize it here as a variable and not as constants here in the else block,

04:13.770 --> 04:20.610
like that. Post data therefore will be of type post or it will be a form data object

04:20.840 --> 04:25.620
and now we can safely send posts data here. Now down there,

04:25.670 --> 04:29.640
we simply refer to the ID we got as an argument anyways

04:29.870 --> 04:36.210
and the post which we want to store as an updated post is a post I have to create here,

04:36.500 --> 04:46.070
so that will then be a post, type post which simply is an object constructed as we are constructing

04:46.070 --> 04:47.050
it here.

04:47.090 --> 04:54.920
One important difference though, we of course get back the image path from the server because if we uploaded

04:54.920 --> 04:57.400
a new image, that will have changed.

04:57.590 --> 05:03.890
So I will actually expect to get back a response where I somehow can access my image,

05:03.890 --> 05:10.610
for now let's say image path will probably have to revisit this, as you can see or as you can tell by

05:10.610 --> 05:12.070
the error here.

05:12.110 --> 05:15.900
So we got the first steps in place,

05:16.010 --> 05:20.780
we're not done yet but we should be able to send data to this endpoint,

05:20.930 --> 05:25.850
of course some work needs to be done on that endpoint too.

05:25.920 --> 05:30.320
So let's move over back to the server and let's work on that

05:30.330 --> 05:31.870
put endpoint.

05:32.050 --> 05:34.070
Now I also want to use multer there, so

05:34.090 --> 05:42.430
I can just copy the logic from the post endpoint and add it here too to extract files there too,

05:42.500 --> 05:43.420
here we are.

05:43.730 --> 05:47.860
So now I'm also extracting an image there before I run my function

05:48.410 --> 05:56.320
and now in my function, I of course want to store my my uploaded file but that depends on whether we're

05:56.330 --> 06:02.570
getting a new file or if I'm just getting a string.

06:02.640 --> 06:10.550
Now that's relatively easy to do, let's simply output console log request file, to see what we get in

06:10.550 --> 06:15.650
the case where we do replace the file and where we don't. Now for this, we need to fix our front-end

06:15.650 --> 06:17.660
code which right now won't work,

06:17.750 --> 06:22.440
I'll simply comment out the line which is throwing the error, that doesn't work either,

06:22.520 --> 06:24.750
so I'll simply set this to an empty path here.

06:24.980 --> 06:25.610
That's all right,

06:25.610 --> 06:27.170
we'll fix this later.

06:27.170 --> 06:31.450
So let's now go back where we added this and let's hit save post.

06:31.500 --> 06:37.760
Now I've failed to really submit this because this check in the post create component actually detects

06:37.760 --> 06:42.890
that of course the image path we assigned is not a valid file,

06:42.890 --> 06:43.250
right,

06:43.310 --> 06:48.050
it's a string, it's not a file, it's not making it through our mime-type check.

06:48.560 --> 06:55.010
Well to handle that case, I can go to my mime-type.validator and at the very beginning, I'll add a check where

06:55.010 --> 07:08.240
I see if control value, if the type of that is equal to string. If it is, then that's ok but then I immediately

07:08.240 --> 07:10.020
want to return an observable.

07:10.310 --> 07:13.340
So I'll add a new import from rxjs

07:13.610 --> 07:20.810
of, of is a quick and easy way of adding or creating an observable which will emit data immediately.

07:20.830 --> 07:28.960
Here I will simply return of, returnable therefore make sure that the other code doesn't run, of null.

07:29.180 --> 07:30.740
So this will now simply return

07:30.740 --> 07:31.240
that this is

07:31.240 --> 07:33.940
valid. With this,

07:33.970 --> 07:38.110
if I go back and I hit save, still doesn't work.

07:38.170 --> 07:40.270
The reason for that is that

07:40.270 --> 07:47.770
when I initialize the post on this page in ngOnInit, I'm actually reaching out to getPost in my

07:47.770 --> 07:51.690
service, right and in getPost

07:51.760 --> 07:57.960
if we take a closer look, I'm sending a get request to this

07:57.990 --> 08:00.830
URL here for a given post

08:01.950 --> 08:04.310
but I'm not getting the image path here,

08:04.320 --> 08:06.400
I'm not expecting it either.

08:06.420 --> 08:15.890
So instead I should manipulate this and expect the image path here to be of type string, also separated by colons

08:15.950 --> 08:17.320
not by semi-colons

08:17.840 --> 08:24.710
and I need to work on the back-end of course, on my get request for that single post here because it

08:24.710 --> 08:28.040
will actually contain my image path I'm fetching from the database.

08:28.070 --> 08:34.390
So the image path will be part of the response but I then return it here in the post service and I'm

08:34.390 --> 08:41.600
not handling it here in a post create component. There where I get the post, image path, I set it to null.

08:41.830 --> 08:46.740
Well now I should set it to image path now that I edited the type and the post service.

08:46.960 --> 08:51.050
So now if this loads, I can submit this.

08:51.160 --> 08:58.360
Now let's go to our server and there, we see undefined is logged and that makes sense because I wanted

08:58.360 --> 09:06.790
to see what gets logged if we try to put data and we get no file and we have no file here because what

09:06.790 --> 09:09.990
we submit is the default image path which is a string.

09:10.000 --> 09:10.650
So that's great,

09:10.660 --> 09:13.130
that means that request file is undefined

09:13.210 --> 09:19.080
if we're submitting a string. So I can simply check if requests file, if it's there and if it's there,

09:19.090 --> 09:25.230
I know a new file was uploaded. Then we can use the logic from the post route here, where we construct

09:25.230 --> 09:31.580
a URL and where we then store this URL together with the new file name in the image path.

09:31.660 --> 09:33.580
So I get my URL here,

09:36.400 --> 09:46.470
I'll add my image path variable here and I'll then set image path here equal to URL plus and now really

09:46.470 --> 09:48.040
just the logic we have up here,

09:48.090 --> 09:51.030
URL plus images plus the filename,

09:51.030 --> 09:56.500
this happens if we got a file. Otherwise and that will be my default value for image path,

09:56.640 --> 10:02.070
I try to get it from the body, image path. It should be part of the body then

10:02.220 --> 10:09.750
because in my posts service where I put my data, so where I send that put request, I do add post data

10:10.020 --> 10:12.780
which in a case that we're not uploading a file,

10:12.780 --> 10:18.960
so in this case, which will have an image path property which will be the image which will be the string.

10:19.350 --> 10:23.350
So now it should really save that to the database as an image.

10:23.350 --> 10:30.580
Now if I edit this again here, let's try that,

10:30.580 --> 10:32.690
let's save this

10:32.880 --> 10:35.190
and we got no error here.

10:35.190 --> 10:42.690
We can also confirm that this is all working correctly by going back to the server and before updating,

10:42.720 --> 10:46.420
let me console log my post here.

10:46.440 --> 10:49.300
By the way of course, I should use image path too,

10:49.410 --> 10:53.620
so here I will actually set image path equal to image path.

10:54.030 --> 10:55.860
That image path now is either the path

10:55.860 --> 10:59.640
we already had or the path of the newly uploaded image.

10:59.640 --> 11:03.860
So now again, let's save that, restart, let's edit this,

11:03.880 --> 11:05.400
hit save posts here

11:05.670 --> 11:12.140
and if we go back, we see that there in the post which gets logged, we have that old image link.

11:12.150 --> 11:19.320
Now let's try uploading a new one for that image, so I'll choose pick image here, pick the same image

11:19.350 --> 11:22.430
actually but still we've replaced the path with a file,

11:22.470 --> 11:31.770
so this will cause a new upload. Let's hit save and something seems to fail on the back-end here.

11:34.000 --> 11:40.240
We can see here, we can tell by the output that actually a new image was stored because that name is

11:40.240 --> 11:44.160
different because the timestamp here is different

11:44.410 --> 11:46.030
but we then still got an error,

11:46.150 --> 11:48.990
well that we tried to edit the ID.

11:49.270 --> 11:51.070
Well we did fix that before,

11:51.070 --> 11:52.110
let's quickly have a look,

11:52.180 --> 11:58.940
what broke it? Well yes, if you upload a new file here, we're not passing an ID and therefore it would

11:59.210 --> 12:00.290
generate a new one,

12:00.290 --> 12:03.760
so what we have to do is we have to append posts data,

12:03.890 --> 12:08.740
we have to append that ID of course, otherwise we get no ID on the server,

12:08.750 --> 12:12.810
we tried to generate a new one, we tried to save that and it breaks.

12:12.830 --> 12:19.470
So with that changed, let's try this again, save this,

12:19.490 --> 12:21.350
now this looks much better

12:21.440 --> 12:24.690
and now we inspect this, we got the updated file there too.

12:24.710 --> 12:28.370
Now you can see that we keep on adding files here,

12:28.430 --> 12:34.670
this is something I actually will not care about here because for once, not that untypical to keep files

12:35.000 --> 12:36.950
even if users upload new ones.

12:37.190 --> 12:40.940
You might want to use them for machine learning, anything like that.

12:41.300 --> 12:47.060
If you want to clean them up, you would typically not do that when the user uploads a new file because

12:47.120 --> 12:51.410
that would require unnecessary processing power during the request,

12:51.410 --> 12:59.180
instead you would probably use some worker process which runs every night, every x hours which basically

12:59.180 --> 13:03.230
checks which files are not mentioned in your database anymore

13:03.320 --> 13:05.210
and it would then delete the files.

13:05.210 --> 13:07.710
Now that is definitely beyond the scope of this course,

13:07.790 --> 13:09.380
so I will leave it like this

13:09.380 --> 13:14.000
and again keep in mind, this is not just some reason I'm coming up with,

13:14.090 --> 13:16.770
you do often keep such files around.

13:16.820 --> 13:18.850
So we'll do the same here in this course.
