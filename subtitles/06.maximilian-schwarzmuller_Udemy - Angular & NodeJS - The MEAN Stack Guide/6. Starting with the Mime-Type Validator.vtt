
00:02.270 --> 00:08.270
So with the image preview being displayed, let's work on validating that, we are validating that we

00:08.270 --> 00:09.030
got an image.

00:09.050 --> 00:16.690
Well that's nice but of course it would be nicer if we could also validate that we have a valid image,

00:16.690 --> 00:24.320
so if we have a jpeg or png file let's say and there is no built-in validator that would help us

00:24.320 --> 00:24.970
with that,

00:25.010 --> 00:27.290
so let's write our own one.

00:27.650 --> 00:31.800
I will write it in a separate file here and I'll name it

00:31.850 --> 00:37.460
mime-type.validator.ts, you can name the file however you want,

00:37.460 --> 00:42.510
I just want to make sure that it's clear that this is a validator and I will validate the mime type

00:42.680 --> 00:43.970
of a file here.

00:44.390 --> 00:51.410
Now the mime type validator will have the task of getting the value of a control, which will be a file

00:51.410 --> 01:01.880
of course, then read that using that file reader again and then checking for the mime type of that file.

01:02.150 --> 01:04.660
And we will write the logic for this together,

01:04.670 --> 01:08.300
it's a little bit more complex, a little bit more advanced Javascript

01:08.300 --> 01:09.820
but we'll get there.

01:09.860 --> 01:13.410
So to read this file or to create such a validator,

01:13.460 --> 01:14.670
let's start with that,

01:15.110 --> 01:25.010
I will first of all export a constant because this validator will actually just be a function. All validators

01:25.100 --> 01:33.050
are just functions which read in the control value and return the information whether that is valid or not. I'll name

01:33.070 --> 01:36.410
that mimetype and the name is totally up to you.

01:36.440 --> 01:37.910
Now again, I said it's a function,

01:37.910 --> 01:41.110
so it's an arrow function which looks something like this

01:41.210 --> 01:48.680
and now the question of course is what's the argument? The argument is to control which is of type abstract

01:48.800 --> 01:53.220
control, something you import from @angular/forms.

01:53.340 --> 01:56.490
So we get this control as an argument,

01:56.490 --> 02:02.370
we also have to return something and this will actually be an asynchronous validator because reading

02:02.370 --> 02:07.640
in that file with the file reader is an asynchronous task as you saw there,

02:07.710 --> 02:12.470
we have to register some events which the reader will fire when it's done reading this

02:12.510 --> 02:15.130
in because parsing such a file takes a bit longer

02:15.240 --> 02:20.330
and to not block the Javascript execution, this is handled asynchronously.

02:20.760 --> 02:28.170
Since it's an asynchronous validator, something Angular does support, I have to define a special return

02:28.170 --> 02:35.610
type for this validator function. A normal synchronous validator would simply return a Javascript object

02:36.060 --> 02:44.580
where you have a key value pair with your own error code and then a value for that error code or null.

02:44.820 --> 02:46.010
If a validator returns

02:46.020 --> 02:48.540
null, the value is treated to be valid,

02:48.540 --> 02:49.280
that's important.

02:49.290 --> 02:55.510
Null means valid if you return an object with that error code and that value for the error code,

02:55.620 --> 02:57.780
then this would mean it failed.

02:57.930 --> 03:05.370
Now for an async validator, it's almost the same but that Javascript object with the error code is actually

03:05.370 --> 03:08.350
wrapped by a promise or an observable.

03:08.730 --> 03:17.180
So we either return a promise here or we return an observable here.

03:17.270 --> 03:20.300
Now these are both generic types actually

03:20.390 --> 03:23.480
and the observable is something I need to import first anyways.

03:23.810 --> 03:26.690
So let's import observable from rxjs,

03:26.720 --> 03:32.410
that's that third party package which provides the observable. The promise is a default Javascript type

03:32.510 --> 03:38.960
but as I said, both are generics which means we can be clear about which value they will eventually yield

03:39.800 --> 03:45.470
and for the promise, that will simply be that Javascript object I mentioned and now here comes a strange

03:45.470 --> 03:53.120
notation, where we have any property, so we don't care about the name, we just want to say it should

03:53.270 --> 04:00.080
have a property and we do that with square brackets key of type string.

04:00.080 --> 04:05.480
This just means, hey this will have a property which can be interpreted as a string and we don't care

04:05.480 --> 04:08.870
about the name, the square brackets here don't indicate an array,

04:08.870 --> 04:13.910
they just indicate that this is really dynamic, a dynamic property name.

04:15.030 --> 04:21.630
And then the value of that property will be anything, we can pass any value we want for that error code

04:22.260 --> 04:25.250
and this will become clearer once we do return a value.

04:25.670 --> 04:28.210
And it's the same generic type for the observable,

04:28.230 --> 04:30.440
so let's add it there too.

04:30.610 --> 04:32.860
Now this is our function definition,

04:32.860 --> 04:36.280
we of course get an error because right now we're not fulfilling it,

04:36.310 --> 04:38.980
we aren't returning a promise or an observable,

04:38.980 --> 04:41.020
so let's work on that function body now.

04:41.380 --> 04:43.830
First of all let's extract the file,

04:43.930 --> 04:48.950
so I'll create my file constant and access my control value.

04:49.030 --> 04:54.640
Now I need to tell Typescript that this is a file because it could be anything, we can store anything as

04:54.640 --> 04:55.360
a value,

04:55.570 --> 05:01.090
so now we tell Typescript that this will be a file and then we can use that file reader again.

05:01.090 --> 05:09.170
So file reader is new file reader, we instantiated that a second ago in the last lecture. Now that file

05:09.170 --> 05:14.120
reader can be used to read in that value of the file.

05:14.150 --> 05:17.010
Now I will use a different syntax,

05:17.030 --> 05:22.160
previously what we did is we added file reader and then onLoad.

05:22.160 --> 05:27.800
Now first of all we now need onloadend but still this approach now wouldn't really work

05:27.800 --> 05:34.060
because keep in mind, in this function here, I need to return a promise or an observable.

05:34.070 --> 05:35.200
Now this is neither,

05:35.330 --> 05:40.250
this is synchronous code which just registers a function.

05:40.250 --> 05:47.340
Thankfully, rxjs gives us something which allows us to convert this into an observable,

05:47.450 --> 05:52.070
we can simply create our own observable. To do that,

05:52.070 --> 05:54.900
I will create a new constant and I'll name it

05:56.520 --> 06:04.070
frObs for file reader observable and I will create my own observable by calling observable and there, the

06:04.200 --> 06:06.930
static create method.

06:07.080 --> 06:10.140
With that we can create our own observable from scratch.

06:10.420 --> 06:17.860
Now such an observable takes a function as an argument, that function then again automatically gets

06:17.920 --> 06:22.880
an observer, that's passed in by rxjs and it's of type observer,

06:23.050 --> 06:31.000
you import that from rxjs too. Now that observer simply is a tool you use to control when this

06:31.000 --> 06:34.150
observable emits new data.

06:34.180 --> 06:41.870
So in here in that observable, I can now take my file reader and add an event listener.

06:42.060 --> 06:52.590
There we can listen to the loadend event, that's an equivalent to file reader onloadend. So I'm

06:52.620 --> 06:54.390
creating a listener like this

06:54.510 --> 06:59.680
and here I have another function which will eventually get executed once this is done.

06:59.730 --> 07:05.790
Now we also get that error on the observer because this actually turns out to be a generic type and the

07:05.790 --> 07:09.300
type here actually is exactly the same Javascript object

07:09.340 --> 07:11.540
our whole validator will eventually emit,

07:11.580 --> 07:13.850
so let's add this here as a generic type.

07:14.130 --> 07:19.680
Now back to the event listener, we know that we're done reading in the file here and the difference between

07:19.680 --> 07:25.550
loadend and load really just is that for loadend, it has more information about the file you could say.

07:25.920 --> 07:33.120
So now we have that event listener here and in here, we then basically want to emit a new value with

07:33.120 --> 07:37.190
the information whether we know that this is a valid file or not

07:37.190 --> 07:43.040
and we know it inside this event listener because of that extra information I just mentioned.

07:43.110 --> 07:50.850
Now before we implement this, let's go in the line after add event listener and here, we want to start that

07:50.850 --> 07:55.320
process by using our file reader to actually read in the file

07:55.380 --> 07:59.520
but now not as data URL but as array buffer,

07:59.880 --> 08:05.130
this will then allow us to access the mime type. So now we pass the file there, we read it in as an array

08:05.190 --> 08:08.140
buffer, when it's done add event listener loadend

08:08.160 --> 08:10.660
will actually call this function

08:10.710 --> 08:14.420
and now in this function, we can do the mime type validation.

08:14.850 --> 08:17.670
Let's implement this logic in the next lecture.
