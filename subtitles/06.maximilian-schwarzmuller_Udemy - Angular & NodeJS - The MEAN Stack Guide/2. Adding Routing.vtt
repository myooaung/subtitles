WEBVTT

00:02.260 --> 00:05.290
So here is our app in its current state

00:05.290 --> 00:11.860
and as I mentioned, I want to have multiple pages up here, different parts in the app between which I can

00:11.860 --> 00:19.690
switch, for example I want to have the main page which simply lists the posts but that part, that page

00:19.780 --> 00:23.240
where we actually add a new post, so this card here,

00:23.410 --> 00:30.460
I want to outsource this to a different page and I also then want to enable editing of the posts so

00:30.460 --> 00:34.640
that we can connect this edit button to do something useful.

00:34.990 --> 00:36.190
So step by step,

00:36.280 --> 00:43.300
let's start by adding multiple pages here, as I said, we'll have the starting page with posts here and I

00:43.300 --> 00:47.520
will add one other page where we can create and edit posts.

00:47.710 --> 00:54.090
For that, we need the angular router, right now we got our posts area with the post create in

00:54.100 --> 00:55.980
the post list component,

00:56.170 --> 01:01.180
now we could load these components on seperate pages. To do that,

01:01.180 --> 01:07.840
I'll add a new module on the root level of my angular application, next to the app module,

01:07.840 --> 01:11.610
I will create a new file and I will name this file

01:11.710 --> 01:15.220
app-routing.module.ts.

01:15.220 --> 01:21.820
Now theoretically, that name is up to you but it is a convention to name that file which manages the angular

01:21.820 --> 01:23.070
routes like this,

01:23.080 --> 01:29.950
so the top level file which does that, so the app routing module and in there, we will create and export

01:30.010 --> 01:31.040
a normal class,

01:31.090 --> 01:35.110
so normal class which is named app routing module.

01:35.110 --> 01:37.960
Now this will become an angular module

01:38.080 --> 01:46.630
and in case you don't know, angular modules are basically building blocks angular analyzes to find out

01:46.630 --> 01:48.850
which features your app uses

01:48.940 --> 01:53.980
and we could absolutely define our routes in the normal app module.

01:53.980 --> 02:00.520
It's just a good practice to not put everything into this file but to split our logic across multiple

02:00.520 --> 02:06.760
files and to for example put all the routes setup, the route config into a separate file which we then

02:06.790 --> 02:10.880
import into our main app module.

02:11.110 --> 02:18.780
So in the app routing module, I will decorate this class with the ngModule decorator because it is an angular

02:18.790 --> 02:21.550
module which we're creating here and there,

02:21.550 --> 02:28.130
I want to use another feature of the angular package and that other feature will be the router module.

02:28.200 --> 02:36.370
The router module is imported from @angular/router and as the name suggests, this module helps us with

02:36.370 --> 02:43.390
routing, it actually enables the angular router and it's able to handle a route configuration and

02:43.390 --> 02:47.720
therefore let the angler router do its job. Without that module,

02:47.740 --> 02:50.030
we can't use the angular router.

02:50.400 --> 02:57.670
Now what is the angular router? I'll come back to that and I'll come back to how angular routes connect

02:57.700 --> 03:00.370
or don't connect to our backend routes,

03:00.610 --> 03:05.110
for now let's continue with creating some routes and what are routes to begin with?

03:05.350 --> 03:11.340
Well routes are simply javascript objects here where we define for which url,

03:11.380 --> 03:14.340
which part of our app should be presented.

03:14.710 --> 03:21.640
We therefore create a new constant, may be named routes, that name is up to you though which is of type

03:21.700 --> 03:27.850
routes and that type is also imported from the angular router package.

03:27.850 --> 03:34.570
Now this constant actually simply holds an array, an array of javascript objects and each object

03:34.570 --> 03:37.570
has to have a certain structure,

03:37.570 --> 03:46.990
it needs to have a path property. This defines for which part after our domain we want to load a certain

03:46.990 --> 03:52.770
page and if the path is empty as it is here, this simply means the main page,

03:52.810 --> 03:54.820
the root page, the starting page,

03:54.820 --> 03:56.590
so our domain slash

03:56.590 --> 04:00.790
nothing, so in our local setting, localhost 4200

04:00.850 --> 04:01.420
slash

04:01.420 --> 04:02.100
nothing,

04:02.110 --> 04:04.420
this will load this route.

04:04.420 --> 04:05.930
That's our path here,

04:06.130 --> 04:08.870
we then have to define what should get loaded

04:09.070 --> 04:14.770
and here I want to load a component which I do with the component property and then we pass the type

04:15.070 --> 04:16.210
of the component

04:16.270 --> 04:17.700
we want to load.

04:17.740 --> 04:19.680
This means that we need to import it here.

04:19.690 --> 04:27.610
So for example if I want to load my post list component here, my IDE helps me by automatically importing

04:27.610 --> 04:33.070
the post list component from the posts folder and there the post list folder and then from the post

04:33.070 --> 04:37.410
list component file without the extension but make sure that you add

04:37.470 --> 04:38.200
this import.

04:38.590 --> 04:41.200
Now we get this first route defined,

04:41.470 --> 04:51.250
we can now also add a second route here, path and this route could now be the create route,

04:51.370 --> 04:56.670
so maybe we want to create new posts with the /create path.

04:56.810 --> 04:57.570
Now important,

04:57.640 --> 05:04.450
you don't add /create here, you just add create and now this what become active whenever we visit

05:04.510 --> 05:05.310
our domain,

05:05.380 --> 05:09.180
so in our case localhost4200/create.

05:09.400 --> 05:12.190
Then this route would get active

05:12.280 --> 05:20.700
and here we can simply say that we want to load the post create component and also import that of course.

05:20.700 --> 05:22.890
Now this is our very simple route config,

05:22.910 --> 05:23.940
we've got two routes,

05:24.030 --> 05:30.230
the root route which loads our list of components, list of posts and the create route which well loads

05:30.230 --> 05:32.120
that create component.

05:32.460 --> 05:38.160
Now we just need to inform the angular route here module about our routes and we do that by first of all

05:38.190 --> 05:45.450
importing with the imports statement in the module, by importing the router module into this angular module.

05:45.660 --> 05:55.060
So we add imports router module and now here we have to call a method this module provides for root.

05:55.230 --> 06:02.940
This takes our root route config, so the routes constant we define here here. Now the angular router

06:02.970 --> 06:04.380
is aware of our routes,

06:04.530 --> 06:12.090
now to be able to add it to our app module which is the main module of our app and the module with which

06:12.120 --> 06:19.590
our app gets started, we have to export this configured router module. So we add the exports array here

06:19.800 --> 06:26.140
and then router module and now we can use this router module with our router configuration

06:26.190 --> 06:33.510
outside of this angular module here. And we do that in the app module, here we simply add our router

06:33.510 --> 06:37.330
module, maybe below the browser module,

06:37.540 --> 06:40.960
here add the app routing module.

06:41.190 --> 06:48.330
Now my IDE again automatically added an import here so make sure to add this import too, pointing at the

06:48.570 --> 06:50.250
app routing module file

06:50.760 --> 06:59.220
and with that added, we can now use the angular router with our configuration here and we do so by marking

06:59.220 --> 07:06.030
a place where angular should load the active routes and for that, I'll go into my app component template

07:06.280 --> 07:06.820
and here,

07:06.840 --> 07:11.670
right now we always include the create and the list component above each other.

07:11.670 --> 07:16.840
Now I want to have neither, instead either of the two should be loaded through the angular router.

07:16.980 --> 07:23.040
So I will delete the two selectors here and instead we need to provide a hook for the angular router

07:23.310 --> 07:31.050
where it can render its content and this hook is created with the router outlet directive which is provided

07:31.230 --> 07:39.480
by the angular router package and we can use it since we have the router module imported into our angular

07:39.480 --> 07:43.380
module, indirectly through the app routing module.

07:43.380 --> 07:45.130
So now this is enabled,

07:45.300 --> 07:47.260
if we now save this

07:47.310 --> 07:55.240
the app should reload, hopefully without errors, here it is and now it reloads here too and we are on

07:55.240 --> 08:02.380
the route list page. Now to access the part where we can create routes, we have to access localhost4200

08:02.380 --> 08:03.020
.

08:03.070 --> 08:08.590
/create and now we still have the toolbar because that is shared,

08:08.620 --> 08:08.880
right,

08:08.890 --> 08:10.720
it's here, part of the app component,

08:10.840 --> 08:13.450
the routing hook is then inside of the main block.

08:13.540 --> 08:21.400
So we always have the toolbar but we swap the list of posts and our, well post create area.

08:21.400 --> 08:24.670
Now we are missing links to access these routes though

08:24.730 --> 08:27.780
because right now we can manually hardcode

08:27.790 --> 08:28.430
the url

08:28.450 --> 08:31.270
but that's not really how we want to navigate around,

08:31.270 --> 08:34.730
instead it would be nicer if we had links in our header

08:34.810 --> 08:39.320
and of course we can add such links here. In our header component,

08:39.460 --> 08:46.400
we can wrap my messages here with a span like this

08:47.570 --> 08:56.690
and then we can add another span where we handle or an unordered list where we handle our toolbar items.

08:56.720 --> 09:04.910
So here we can add an unordered list with our list items and in that list item here I will have an anchor

09:04.910 --> 09:11.620
tag which will not use the normal reference but instead the angular router link directive.

09:11.630 --> 09:17.930
Now this is used by the angular router to turn this into a normal link where clicks are captured by the

09:17.990 --> 09:24.480
angular router so that it can actually, well stop the default behavior of sending an http request

09:24.710 --> 09:27.790
and actually just re-render the page for the page

09:27.800 --> 09:35.630
we tried to visit. And here we could have a link to /create which we simply, well want to use to

09:35.900 --> 09:38.000
add a new post.

09:38.000 --> 09:43.440
Now the styling will be awful but we should be able to see that at least, here it is.

09:43.540 --> 09:47.360
Now as I said, the styling is awful and my messages is not connected

09:47.450 --> 09:53.720
so we should actually go back and also wrap this in an anchor tag with router link that leads to just

09:53.720 --> 09:57.450
/nothing to load the root page

09:57.680 --> 10:01.580
and then we can connect this too. Now if we go back,

10:01.590 --> 10:04.890
well both looks awful but we can switch between these

10:05.100 --> 10:07.910
but of course, well we need to work on that styling.

10:07.920 --> 10:09.910
Let's do that in the next lecture.
