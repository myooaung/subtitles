WEBVTT

00:02.090 --> 00:06.190
So let's get user input and there actually are two ways of doing that,

00:06.200 --> 00:10.250
the first one is another feature which is called local reference.

00:10.250 --> 00:15.350
We can add a marker, a variable to any html element we want,

00:15.380 --> 00:22.550
we do that by adding a hashtag and then any name you want, like post input, like that.

00:22.550 --> 00:28.190
Now this marks this or it creates a reference to that element which you can use and which you can use and

00:28.190 --> 00:34.940
that's important in that template. So you can use it for example here to pass data to on add post,

00:34.970 --> 00:41.600
you could refer to post input like this without the hashtag now and then pass this entire thing,

00:41.900 --> 00:47.190
so this will now just be a reference to the underlying javascript object. In on add post,

00:47.190 --> 00:51.340
we can take a look at it by expecting it as an argument,

00:51.440 --> 00:58.420
so there we get the post input and this will actually be an html input,

00:58.420 --> 01:04.030
we can clearly tell typescript the type by adding a colon then html text area element,

01:04.040 --> 01:05.740
that is exactly what it is.

01:05.750 --> 01:08.120
Now this just informs typescript about the type here,

01:08.120 --> 01:13.730
this is great because now we get better auto-completion because the IDE knows which kind of type that

01:13.730 --> 01:14.720
is

01:14.720 --> 01:17.090
but it also helps us write cleaner code

01:17.330 --> 01:19.480
but I of course only want to do one thing here,

01:19.580 --> 01:26.210
I want to output the post input like this. If we save that and let it reload and have two developer tools

01:26.240 --> 01:27.140
open,

01:27.140 --> 01:28.820
we see that upon saving,

01:28.820 --> 01:30.710
I get this output.

01:30.920 --> 01:36.890
Now we can't really see what's in there, we can't really see the javascript object, we can look into that with console

01:36.890 --> 01:39.310
dir instead of console log,

01:39.320 --> 01:45.680
now if we press save content, we get that textarea object and here you see all the properties this specific

01:45.680 --> 01:53.030
javascript knows, quite a lot as you can see, there also is the value property we bound before.

01:53.240 --> 01:58.310
Now of course we cannot just bind the value property, since we got access to it here

01:58.460 --> 02:05.750
we can also just use it to extract the content and set the content we entered as a value for new post.

02:06.230 --> 02:10.890
So we can say post-input.value to access that value property

02:11.000 --> 02:18.350
and now if we save that, what we can see is that if we enter something here and I hit save post, we see

02:18.350 --> 02:24.500
something down there. Now that really is amazing and this allows us to fetch the user input and output

02:24.500 --> 02:24.810
it,

02:24.860 --> 02:27.250
it's only one way of getting that user input

02:27.260 --> 02:33.950
though. This is a way which of course allows us to do anything with that element, not just get the value

02:34.190 --> 02:37.750
but then get the value if that is what we want to do upon a click.

02:38.570 --> 02:44.870
Now another feature angular offers is a feature called two-way binding, rather then manually setting

02:44.870 --> 02:52.040
the value of the text area and then also getting a reference to it and so on, we can get rid of both

02:52.520 --> 02:59.170
and actually add a new feature which combines the setting and reading of a value.

02:59.180 --> 03:04.550
It's called two-way binding because it has just two directional flow and you add it with square brackets

03:04.580 --> 03:11.200
and parentheses and then ngModel in-between, ngModel is an angular feature,

03:11.210 --> 03:19.220
it's a so-called directive. A directive is basically an instruction you place on an html element and angular

03:19.220 --> 03:23.800
or you can also create your own one so that the relative knows what to do on that element then.

03:23.810 --> 03:31.220
ngModel is a directive that actually will listen to user input and emit that data to us and also store

03:31.340 --> 03:34.920
new data in that text area or output it there.

03:35.120 --> 03:43.790
We need to bind it to a property and I will use a new property for that because I don't want to update

03:43.830 --> 03:45.400
new post with every keystroke,

03:46.620 --> 03:51.980
I'll add entered value here, it's an empty string initially and entered value,

03:51.990 --> 03:58.790
this new property is what I bind to ngModel. Now important, ngModel by default won't work,

03:58.830 --> 04:05.190
it's a feature which is not included in the core angular package here, it's not included in the browser

04:05.190 --> 04:06.990
module which we already added,

04:07.170 --> 04:10.190
it's included in a different module which we need to add,

04:10.640 --> 04:17.160
it's included in the so-called forms module because it's related to forms inputs and this is part

04:17.160 --> 04:18.390
of @angular/forms,

04:18.520 --> 04:22.810
so that's still part of the core framework but of a different part of the framework.

04:23.190 --> 04:26.140
So importing it here allows typescript to find it,

04:26.320 --> 04:28.800
angular isn't aware of it yet though, it is aware

04:28.830 --> 04:32.720
once we add it to the imports array in our app module,

04:32.820 --> 04:38.050
now we're unlocking some forms features and ngModel is one of them.

04:38.070 --> 04:43.870
So now we can use ngModel here and it will automatically update

04:44.000 --> 04:44.710
enter value

04:44.890 --> 04:51.630
or entered value here with every keystroke and therefore in this new post, we no longer receive the

04:51.630 --> 04:53.640
post input here

04:53.640 --> 04:58.660
instead we simply set new post equal to entered value,

04:58.800 --> 05:02.350
this entered value. Back in the template,

05:02.420 --> 05:09.110
this also means we get rid of post input as an argument here and now if we save that and we go back

05:09.110 --> 05:13.120
to our application, you see we don't start with no content anymore,

05:13.190 --> 05:16.960
I can enter something and if I hit save post, we see that here too

05:17.090 --> 05:22.700
but now we're using that two-way binding feature which can also be very handy.

05:22.700 --> 05:29.180
These are the core template binding features angular has, event binding, string interpolation, property

05:29.180 --> 05:34.260
binding which you saw that before with square brackets value and two-way binding.

05:34.320 --> 05:39.770
With that we get a lot of tools that allow us to manipulate our components and the output we have and

05:39.800 --> 05:41.970
also to react to user events

05:42.470 --> 05:49.010
and now with that it's time to leave that world of ugly applications and actually turns into a pretty one

05:49.010 --> 05:54.710
and dive deeper into really building a mean stack project because this is of course no angular basics

05:54.710 --> 06:00.080
course but knowing all these basics and refreshing them is really important so that you don't get lost

06:00.200 --> 06:01.450
throughout the rest of the course.
