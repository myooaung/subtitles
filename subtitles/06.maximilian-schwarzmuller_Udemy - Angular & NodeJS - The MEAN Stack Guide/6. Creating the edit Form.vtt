WEBVTT

00:02.400 --> 00:08.250
Now with that theory part out of the way, now that we know that there at least is some difference between

00:08.290 --> 00:10.110
server side and client side routing,

00:10.510 --> 00:14.510
let's actually go back to the client side and make our posts editable.

00:14.860 --> 00:18.850
Now right now, I can of course still create new posts like here,

00:18.880 --> 00:23.080
new post, this is a new post like that

00:23.080 --> 00:27.930
and if I save that, I can go back to my messages and here we got new post, now

00:27.930 --> 00:30.920
clicking edit doesn't do anything though,

00:30.940 --> 00:33.190
now we want to change that. When we click edit,

00:33.190 --> 00:36.820
I simply want to go back to the new post page

00:36.820 --> 00:40.200
but of course it shouldn't be the new post page, it

00:40.210 --> 00:42.700
should just be, well the same form

00:42.700 --> 00:44.530
I see there I'd say. So I'll

00:44.530 --> 00:49.750
will first of all create a new route for that, that new route with also load the post create component

00:50.100 --> 00:55.380
but I will access it through edit and then I need to know which post to edit

00:55.600 --> 00:57.970
and that should be information that's encoded

00:57.970 --> 00:59.550
in the url,

00:59.890 --> 01:03.250
so I will add a dynamic segment to that path.

01:03.430 --> 01:09.690
So edit is one part of the path but then I'll have another part separated by a slash which is dynamic

01:09.880 --> 01:16.060
and that is indicated to the angular router by adding a colon and then you can name this however you

01:16.060 --> 01:16.360
want,

01:16.360 --> 01:18.940
like for example post ID.

01:19.160 --> 01:25.420
You'll later be able to extract that dynamic information by that parameter but you'll see how that works

01:25.420 --> 01:26.450
in a second.

01:26.800 --> 01:30.900
So now we're loading the post create component for this path too

01:31.030 --> 01:34.080
but actually we'll then do something different.

01:34.360 --> 01:40.540
Now the post create component is of course this component which holds our form and we can actually

01:40.540 --> 01:41.860
reuse that form,

01:41.860 --> 01:48.250
that will probably be all right but we have to make sure that when we hit save post and therefore when

01:48.250 --> 01:54.880
we submit this and call on add post, that we actually differentiate between are we adding a new post or

01:54.910 --> 01:56.750
editing an existing one

01:57.070 --> 02:02.800
but step by step we now know that the post create component will be loaded for two different paths and

02:03.130 --> 02:06.660
we will need to make sure that we actually handle these different cases.

02:06.940 --> 02:14.080
Thankfully the angular router gives us a little help with that, we can inject something into the component

02:14.140 --> 02:21.670
which is loaded through the router which helps us identify some route information, like for example the exact

02:21.670 --> 02:24.010
path through which this route was loaded

02:24.310 --> 02:29.980
and this will become important because we will know that when we can extract the posts ID, that we are

02:29.980 --> 02:34.370
in edit mode whilst in the other case that we can't extract this,

02:34.450 --> 02:36.360
we are in the create mode.

02:36.610 --> 02:44.430
So in the post create component, I'll inject something and I'll bind it to a public property and the

02:44.430 --> 02:44.530
injected

02:44.530 --> 02:51.100
thing is the active route, excuse me, the activated route, the activated route which is

02:51.100 --> 02:53.430
imported from @angular/router.

02:53.860 --> 02:59.200
So this router package gives us this activated route object and this hold some important information

02:59.200 --> 03:01.420
about the route we're currently on.

03:01.420 --> 03:06.760
Now I want to use that information when the component is created and it's a good practice to not do this

03:06.760 --> 03:12.430
in the constructor, to basically keep the constructor lean but to instead use ngOnInit.

03:12.430 --> 03:14.670
So I will implement onInIt here,

03:14.770 --> 03:21.270
make sure to also import that from @angular/core and therefore I'll then add my ngOnInit method

03:21.520 --> 03:28.660
and in here, we can now try to find out whether we have a post ID parameter or not.

03:28.660 --> 03:35.770
We can extract this by accessing this route, so our injected activated route and there we have

03:35.800 --> 03:39.120
the param map object or property.

03:39.370 --> 03:43.300
Now the param map is actually a subscription, an observable excuse me,

03:43.300 --> 03:45.610
it's an observable to which we can subscribe

03:45.670 --> 03:49.180
and as for all built-in observables, we never need to unsubscribe

03:49.180 --> 03:57.520
by the way. Now it is an observable because the parameter in the url could change whilst we're on the page because

03:57.520 --> 04:02.650
we could have some link which we can click to essentially load the same angular component but for a

04:02.650 --> 04:08.830
different post ID let's say, so only the ID in the url would change, the component is the same

04:09.250 --> 04:14.590
but obviously the data we display on that component would need to change too and that is why we get

04:14.590 --> 04:15.620
this observable.

04:15.700 --> 04:21.370
With that, we can listen to changes in the route url or in the parameters to be precise and we can

04:21.370 --> 04:24.600
therefore react to that and update our UI

04:24.670 --> 04:30.880
but angular avoids the unnecessary re-rendering of the entire component which is, well

04:30.880 --> 04:34.080
which really doesn't make a lot of sense because it's still the same component,

04:34.090 --> 04:36.730
we just need to know about the change.

04:36.730 --> 04:42.620
So in that subscription here, we get a so-called param map object in our first callback here,

04:42.730 --> 04:46.800
so this will be executed whenever the parameters change.

04:46.810 --> 04:49.510
There we get our param map which is of type

04:49.510 --> 04:51.990
param map

04:52.230 --> 04:57.810
and now we can look into that param map and see if a certain parameter exists. So we can check if param

04:57.870 --> 05:03.500
map has the post ID parameter.

05:03.500 --> 05:10.210
Now why post ID? Because that is the identifier we defined in our app routing file, here

05:10.250 --> 05:13.840
post ID, this one. Because we have that name here,

05:13.860 --> 05:18.090
we have to look for that name here. If we have that post ID,

05:18.210 --> 05:24.150
we can try extracting it and using it and if we don't have it, well then we know we are in create mode

05:24.750 --> 05:27.360
so we should probably store that information.

05:27.570 --> 05:36.450
I'll add a private property here and I'll name this mode and the mode by default let's say is create.

05:36.450 --> 05:43.860
Now we could set this here in our if check, there we could set mode equal to edit because if we have

05:43.860 --> 05:47.890
a post ID, then we are in edit mode and otherwise

05:48.000 --> 05:50.830
else we can set it to create,

05:50.910 --> 05:55.490
of course you could also use a number or an enum to control this.

05:55.500 --> 05:58.870
Now with that, we also need to extract that post ID,

05:59.040 --> 06:07.050
so I will add another property here, post ID which will be of type string and initially it's undefined.

06:07.380 --> 06:17.670
Here however in the edit mode, I can set this post ID equal to param map get post ID and this will be

06:17.730 --> 06:27.240
a string. Now in the create mode, I'll set it to null again because here we have no post ID to edit,

06:27.280 --> 06:29.640
we are in create mode after all.

06:29.950 --> 06:32.090
So now we have that extra information,

06:32.140 --> 06:33.830
now what else do we need to do?

06:34.150 --> 06:39.850
Well we probably want to fetch the information about the post we're editing when we are editing it

06:40.390 --> 06:43.200
and we can get it from our post service of course,

06:43.270 --> 06:46.300
we could also get it from our backend though.

06:46.480 --> 06:47.080
It depends,

06:47.080 --> 06:53.140
do we want to get it from the post service where we of course only have the latest snapshot or do we

06:53.140 --> 06:56.430
want to have a brand new version of it from our server?

06:56.800 --> 07:02.730
Now we can go either way but here theoretically we have no way of fetching an old version

07:02.770 --> 07:07.720
if we take it from the post service so I will go with that approach right now.

07:07.720 --> 07:14.760
So therefore, we just need to be able to fetch a single post from our list of posts here

07:14.950 --> 07:22.310
and for that I'll add a new method to the posts service get post and there I'll expect to get the ID,

07:22.360 --> 07:28.840
which is a string of the post I want to fetch and then I simply return a new object here because

07:28.840 --> 07:35.890
I want to create a clone of the object I'm returning and I'll use the spread operator for this to pull

07:35.890 --> 07:43.030
out all the properties of an object and add them to a new object so that we again don't accidentally

07:43.030 --> 07:45.020
manipulate the original object

07:45.040 --> 07:46.130
in the array

07:46.570 --> 07:53.470
and now I will just fetch that object from the post array in the posts service with the help of the

07:53.470 --> 07:55.460
find method.

07:55.610 --> 07:59.480
There, a function will be executed on every post in the array

07:59.620 --> 08:03.990
and if it returns true, then this is the post object it will return.

08:04.300 --> 08:07.240
So here I want to check if the post we're looking at,

08:07.330 --> 08:11.920
if that ID is equal to the ID we're passing as an argument here.

08:12.070 --> 08:17.230
So such a post would then be returned, then we would pull out all the properties and we would add them

08:17.230 --> 08:22.260
to a new javascript object and that object is then returned.

08:22.290 --> 08:29.120
So now we have get post, in post create in that component, we already inject the post service,

08:29.130 --> 08:34.510
so now here we can just load that post and we probably want to store that too,

08:34.620 --> 08:40.780
so here we can add a new private property post which will be of type post,

08:40.800 --> 08:48.710
we will need to import that posts type from our post model, so make sure to add this import path and

08:48.840 --> 09:00.780
with that added, we can go down and here, say this post is equal to this posts service get post and pass

09:00.780 --> 09:04.190
on the post ID we just extracted from our

09:04.200 --> 09:04.790
url

09:04.820 --> 09:09.550
And now we're taking that post, we're storing it,

09:09.600 --> 09:17.430
now the only thing that's left to do is that we actually fill our form with that post data and then

09:17.430 --> 09:19.130
handle the submission.

09:19.140 --> 09:25.380
Now in order to see if that works, we just need to make sure that we can actually load this page and

09:25.380 --> 09:28.280
for that, I'll go to my post list component

09:28.410 --> 09:31.080
and here we have that edit button.

09:31.080 --> 09:37.910
Now that should actually not be a button but instead it should be an anchor tag and it should have a

09:37.910 --> 09:38.690
link,

09:38.720 --> 09:48.110
so with the help of router link again, which actually leads to /edit and then our dynamic parameter,

09:48.120 --> 09:50.370
so the ID of the post.

09:50.390 --> 09:55.910
Now for that we'll use a different syntax, we'll bind to a property of router link which is also

09:55.910 --> 09:59.580
called router link so we just wrap that with square brackets

09:59.930 --> 10:07.520
and now we don't pass a string here but we pass square brackets as a value where we describe the individual

10:07.520 --> 10:10.460
segments of the path we want to load

10:10.790 --> 10:12.910
and these segments are now strings.

10:12.920 --> 10:18.800
The first one is /edit because in the app routing configuration, we have /edit as a first

10:18.800 --> 10:24.920
segment but the next segment after the slash is actually post ID.

10:25.160 --> 10:27.870
So there in our posts list,

10:28.130 --> 10:34.610
I will add a comma, a new element and simply pass post.id referring to the post we're looping through

10:34.790 --> 10:36.580
and then accessing the ID there.
