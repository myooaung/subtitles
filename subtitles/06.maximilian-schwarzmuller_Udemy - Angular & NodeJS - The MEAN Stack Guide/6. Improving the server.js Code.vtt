WEBVTT

00:02.180 --> 00:05.180
Now we get the basic node and the express app set up,

00:05.180 --> 00:08.160
it's not very powerful yet but we'll get there.

00:08.540 --> 00:14.450
I want to improve the server.js file, simply to add some error handling and better output and attached

00:14.450 --> 00:17.000
to this video, you'll find a file with the content

00:17.000 --> 00:23.520
I'm about to paste in and I'll replace the entire content in the server.js file with that code,

00:24.490 --> 00:26.720
it's a bit more but I will walk you through it.

00:26.740 --> 00:30.610
Now I'm still importing app and my http package,

00:30.610 --> 00:33.830
so make sure that path to your app file is correct

00:33.850 --> 00:40.870
by the way as you see and as you saw in the last lecture if you omit .js. And then I got this normalized

00:40.870 --> 00:41.920
port function,

00:41.920 --> 00:48.760
a bit of a more elaborate function that simply makes sure that when we try to set up a port and especially

00:48.760 --> 00:53.790
when we receive it through an environment variable, we actually make sure it's a valid number

00:53.860 --> 00:58.320
if we want to use it. Then I got an onError function here which

00:58.370 --> 01:04.330
will simply check which type of error occurred and well, log something different and exit gracefully

01:04.330 --> 01:07.660
from our nodejs server. We've got onListening,

01:07.700 --> 01:10.270
another function which is stored in this constant,

01:10.450 --> 01:17.800
an arrow function just like onError where we essentially just output or where we log that we are now

01:17.830 --> 01:20.140
listening to incoming requests.

01:20.140 --> 01:25.030
Then here I'm setting up the port, calling that normalized port function from up there and then still

01:25.030 --> 01:29.860
accessing process env port or setting 3000 as a value, here as a string,

01:29.860 --> 01:34.840
you could pass a number too but I'm using a string here because the value we receive here typically would

01:34.840 --> 01:36.400
be a string.

01:36.420 --> 01:38.140
I'm setting this on my express app,

01:38.230 --> 01:45.520
we set up that node server and then I register it to listeners, one for errors that might occur where we will

01:45.520 --> 01:50.540
use the error handler here and one for whenever we start listening,

01:50.650 --> 01:57.040
well then I will simply call onListening and these are simply executed to tell us if something went

01:57.040 --> 02:00.360
wrong with starting a server or if everything went smooth

02:00.550 --> 02:02.620
and then I do start the server.

02:02.740 --> 02:08.950
Now that's one improvement and what we needed to do if we hadn't quit the server already, we would need

02:08.950 --> 02:15.370
to quit and restart to see that in action. Now constantly being required to quit the server and restart

02:15.370 --> 02:17.150
it will become annoying,

02:17.290 --> 02:23.020
so I will install an extra package which we can use during development which makes it a bit easier.

02:23.590 --> 02:31.160
So we'll use npm to install that package, npm install --save -dev actually because it's

02:31.150 --> 02:36.230
a development only dependency and it's called nodemon for node monitoring.

02:36.280 --> 02:43.690
It's a powerful tool which simply watch this our nodejs file or our javascript files in general and

02:43.690 --> 02:46.810
if we change one of them, it will automatically restart

02:46.810 --> 02:48.760
the node server for us.

02:48.760 --> 02:52.770
Now with it installed, we just have to use it to run our node server,

02:52.780 --> 02:56.090
we won't use node and then the server name anymore,

02:56.470 --> 03:01.480
instead it will be nodemon but since we haven't installed it globally on our machine, this command is

03:01.480 --> 03:02.900
actually not available

03:03.220 --> 03:05.920
but it is available inside of this project scope.

03:05.920 --> 03:12.550
So all we can do is we can go to the package.json file and there, we find a scripts section and we

03:12.550 --> 03:18.350
can just register a new script here, like start:server,

03:18.370 --> 03:19.650
the name is up to you

03:19.840 --> 03:24.730
and then between the quotation marks on the right, you entered the command you want to use

03:24.850 --> 03:32.670
and here you can use nodemon because it's a local dependency of this project and then server.js.

03:32.980 --> 03:40.140
And now we can run this script with npm run and then start server or whatever your name is

03:40.390 --> 03:44.810
and this will now use nodemon to spin up that server and we get an error

03:44.830 --> 03:47.770
but in general, it's working and

03:47.850 --> 03:50.990
there's one thing missing in the attached file,

03:50.990 --> 04:00.700
yes sorry, you need to import another package, debug, require the debug package and pass any identifier

04:00.700 --> 04:02.450
you want here like node angular,

04:02.500 --> 04:03.680
that is up to you,

04:03.940 --> 04:08.050
save this and now we at least saw the restart in action,

04:08.080 --> 04:09.610
so now it started the server.

04:09.610 --> 04:13.450
This by the way is also a package shipping with node so you don't need to install it

04:13.450 --> 04:20.230
and now we got a setup where we can change our server side code and for example if I add an extra blank line here and

04:20.230 --> 04:23.630
if we save, it will automatically restart the server.

04:23.950 --> 04:27.930
So with that, we got a nice development environment, a nice setup,

04:27.940 --> 04:36.520
let's now finally make our app more useful and provide a route from which we can fetch some initial

04:36.580 --> 04:37.120
posts.

04:37.120 --> 04:38.280
Wouldn't that be great?
