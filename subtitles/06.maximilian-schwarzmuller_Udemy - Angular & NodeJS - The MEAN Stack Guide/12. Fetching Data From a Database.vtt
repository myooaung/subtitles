WEBVTT

00:02.290 --> 00:07.390
With the data being stored, it's of course interesting to see how we can fetch it and for that, let's

00:07.390 --> 00:13.930
go to our get request where we are fetching posts and thus far, we always return that dummy data back

00:13.930 --> 00:14.980
to our client.

00:15.240 --> 00:20.890
Now that's not really the data I want to return, from now on we can of course return real data.

00:20.890 --> 00:25.110
So what do we want to do here is we want to fetch data from the posts collection.

00:25.330 --> 00:30.550
Now creating a post could be done with the help of our post model which we simply instantiated here with

00:30.550 --> 00:32.050
the new keyword,

00:32.050 --> 00:37.390
now for fetching data we can use the post model again but this time without the keyword. We use

00:37.390 --> 00:41.500
a static method on it instead which is also provided by mongoose,

00:41.530 --> 00:47.710
so here that model method returns us a constructor function which also has some static methods and

00:47.710 --> 00:57.280
here, the method I want to use is find. Now find just as in the shell will simply return all entries.

00:57.280 --> 01:05.240
Now to be very precise, find also can be configured to narrow down the results you get

01:05.710 --> 01:11.770
but for now, let's use that approach where we get all results. As a side note if you want to dive much

01:11.770 --> 01:12.520
deeper,

01:12.520 --> 01:18.490
definitely check out the official docs and here under queries, you'll find all the information on how

01:18.490 --> 01:21.280
to find just one element for example,

01:21.390 --> 01:27.560
narrowed down like this or as we are doing it, for finding a lot of things,

01:27.570 --> 01:28.470
multiple entries

01:28.510 --> 01:35.020
but then also possibly narrowed down by passing a javascript object where you pass field values and

01:35.020 --> 01:39.540
then the value they should hold or more complex queries.

01:39.550 --> 01:45.180
That however is a topic for a course dedicated on mongodb or node and mongodb.

01:45.460 --> 01:50.970
So we'll just use a very basic find operation in there which returns all results

01:51.070 --> 01:57.100
and the thing just is how do we now get that result or these results and use them? Find like this

01:57.100 --> 02:04.700
can be used in two ways, we can pass a function to find and that will be executed once it's done

02:04.960 --> 02:10.620
and this callback will actually get two arguments, either an error or the result,

02:10.630 --> 02:16.150
so the documents it fetched. Now we can use that callback but I don't want to use a callback,

02:16.180 --> 02:18.620
we can quickly end up in callback hell,

02:18.760 --> 02:25.890
so instead we can also chain a then block which is, well working like this on a promise, find doesn't

02:25.900 --> 02:31.950
really return a promise, just well something, an object which has a then block that behaves similarly,

02:32.110 --> 02:38.920
so we can basically use it in the same way and this then block will then, well hold our results.

02:41.180 --> 02:47.510
So here we will get back all the documents and we can use them in here and for now, let's simply console

02:47.690 --> 02:50.680
log these documents to see what we got.

02:50.690 --> 02:56.480
Of course we can also add a catch block to handle the case that something went wrong but that's something

02:56.480 --> 02:58.340
I'll come back to later in the course,

02:58.340 --> 02:59.510
error handling.

02:59.630 --> 03:01.190
So for now let's save that

03:01.190 --> 03:04.340
and let's go back to the app and reload our angular frontend,

03:04.460 --> 03:08.960
this will send a new get request and we get an error here.

03:09.910 --> 03:17.810
We get an error because on the backend of course, we now no longer have posts which we send back because

03:17.840 --> 03:19.480
we deleted that posts array.

03:19.790 --> 03:24.680
Doesn't matter though, the interesting thing is that we have an output here on the backend which looks

03:24.680 --> 03:31.400
exactly what we were looking for, an array of posts which clearly is coming from our database and we

03:31.400 --> 03:33.220
can work with that.

03:33.230 --> 03:39.050
So now we have this then block and in there we get these documents which clearly is our database data

03:39.740 --> 03:43.100
and we see the title and content here.

03:43.160 --> 03:45.060
Now we can return that,

03:45.110 --> 03:49.460
so we put our response code into that then block now

03:49.610 --> 03:50.720
and that's important,

03:50.810 --> 03:57.470
we must execute it inside this then block because fetching that data is an asynchronous task so we need

03:57.470 --> 04:07.040
to wait for these documents to have arrived, if we execute our response code here, then node and javascript

04:07.250 --> 04:13.130
will simply execute this line but not wait for it to finish and immediately jump to this line where

04:13.130 --> 04:16.290
we would then try to access something we haven't received yet.

04:16.400 --> 04:21.940
If we put our response into that callback here in then block however, well then we're safe

04:22.010 --> 04:29.660
and now we can rely on the documents being there. So posts now can really just be our documents because

04:29.960 --> 04:35.090
these documents will be javascript objects which have a title and content field, exactly what we're using

04:35.090 --> 04:35.830
on the frontend,

04:35.840 --> 04:36.550
right?

04:36.890 --> 04:44.810
Well almost, on the frontend we expect to get an ID field but on the backend it's named

04:44.810 --> 04:45.650
_id.

04:45.950 --> 04:47.360
Now we can fix this,

04:47.360 --> 04:50.480
we can fix this by renaming it on the server,

04:50.480 --> 04:58.070
so when we get our data, we could not directly assign documents here but call documents map, a default

04:58.100 --> 05:04.790
javascript function and convert every document to have a structure where we have ID without an underscore

05:05.180 --> 05:06.870
but I don't want to do that here,

05:06.890 --> 05:08.890
I want to send that raw data back.

05:08.930 --> 05:11.050
So I'll take care about this in a second,

05:11.270 --> 05:18.230
for now let's save that and let's see what happens if we reload our angular app. And hey this doesn't

05:18.230 --> 05:19.200
look too bad, 

05:19.280 --> 05:24.470
the ID doesn't matter yet because we're not using it on the frontend and this certainly looks great.

05:24.470 --> 05:29.400
We loaded our post here and that's the data coming from our database,

05:29.420 --> 05:32.330
so let's next worry about converting that ID thing.
