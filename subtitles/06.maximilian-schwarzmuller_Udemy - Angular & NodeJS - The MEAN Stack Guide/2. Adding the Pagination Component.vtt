WEBVTT

00:02.270 --> 00:08.180
So here's our application as it looks like right now. We got all the posts on the first page and of course

00:08.180 --> 00:11.030
that's no problem for three posts,

00:11.020 --> 00:16.880
I would still already implement pagination because I can also demonstrate it with three posts, it will

00:16.880 --> 00:19.930
work the same no matter how many posts we have

00:20.200 --> 00:23.820
but we will of course typically use that with more posts, though

00:23.890 --> 00:30.710
the way we implement pagination will give the user the flexibility to decide how many posts he wants

00:30.710 --> 00:38.540
to display on a given page and for that, I will actually use a special component provided by Angular

00:39.170 --> 00:44.300
material. If we visit material.angular.com under components at the very bottom,

00:44.420 --> 00:52.520
we find that paginator. It's a part of that data table set but it's actually usable without the data table.

00:52.640 --> 00:54.590
The paginator looks like this,

00:54.650 --> 01:00.230
we will be able to choose how many items we want to display on a given page and we can then switch between

01:00.230 --> 01:01.200
these pages, 

01:01.220 --> 01:05.000
so now we are viewing the items 11 to 20 for example.

01:05.000 --> 01:12.710
Now we can use that component in our Angular application and we'll actually emit an event whenever we

01:12.710 --> 01:20.330
switch the page or the amount of items on a page and we can listen to that event which it emits and then

01:20.390 --> 01:23.620
update the posts we display on the page.

01:23.630 --> 01:28.240
So let's do that, let's add this component to our Angular application.

01:28.600 --> 01:36.250
For that I first of all will go to my app module and there, we need to import it from @angular/material.

01:36.420 --> 01:45.300
There I will add the mat paginator module. After adding it here, I'll take this item or this class

01:45.510 --> 01:50.940
and go down to the imports array in that same module and there, I will also add it.

01:51.090 --> 01:57.600
Now we're unlocking it and now we can use that paginator in our Angular app and I want to use it

01:57.600 --> 01:59.910
in my post list component of course.

02:00.070 --> 02:03.170
There below the mat-accordion, we can now add

02:03.210 --> 02:06.010
mat-paginator, like this,

02:06.420 --> 02:08.420
opening and closing tag.

02:08.520 --> 02:14.670
Now that mat-paginator needs some configuration because if I just add it like this and I go back

02:14.670 --> 02:15.810
to my app,

02:16.020 --> 02:18.770
well then we see it here with some default settings.

02:18.870 --> 02:24.780
I want to be able to customize the amount of pages or items we fetch per page and also define on which

02:24.780 --> 02:27.220
page we currently are and so on.

02:27.600 --> 02:31.160
So what I'll do is I will set a couple of properties,

02:31.230 --> 02:38.010
the first property for example is the length property. Length simply allows you to define how many items

02:38.010 --> 02:43.230
we have in total and later, we will of course dynamically fetch this from the back-end.

02:43.320 --> 02:49.290
For now we will go to the post list component and add a new property, a public property which I'll name

02:49.530 --> 02:56.000
totalPosts and I'll set this to a value of ten for now, a dummy value of course.

02:56.130 --> 03:02.250
So these are the or this is the total amount of posts I have and I will bind length to it by wrapping

03:02.250 --> 03:07.500
it in square brackets and binding it to totalPosts, like that.

03:07.500 --> 03:10.070
Now with that if we save that and we go back,

03:10.110 --> 03:13.770
we already see we now got 10 posts registered here.

03:13.830 --> 03:15.540
Of course that's just a dummy value

03:15.540 --> 03:17.240
but this is how this will work.

03:18.350 --> 03:21.230
We can also set up which page we're currently on

03:21.470 --> 03:30.570
by binding the page size property. Now page size also has to be bound to a number, so I will add a new public

03:30.570 --> 03:37.290
property which I'll name postsPerPage because that is the page size,

03:37.320 --> 03:42.590
how many items do we want to have on a given page and I'll set this to five by default

03:42.630 --> 03:45.450
or let's say two maybe because we only have three.

03:45.750 --> 03:52.370
So now I pass that value as a value we bind to here with page size.

03:52.380 --> 03:58.540
I also want to add the dropdown where the user can choose how many items he wants to see on a given page.

03:58.560 --> 04:03.560
For that, we add another public property, page size options

04:03.570 --> 04:07.580
maybe, the name is up to you and this should be an array of the options,

04:07.590 --> 04:11.070
so of numbers, like 1, 2, 5 and 10.

04:11.100 --> 04:16.410
Now the user would be able to choose between 1 to 5 and 10 items per page.

04:16.410 --> 04:22.440
We bind that to another property on mat-paginator, pageSizeOptions.

04:22.460 --> 04:29.730
There we pass our page size options property defined in our component. With that saved, if we go back,

04:29.940 --> 04:33.490
our dummy paginator has all these features,

04:33.570 --> 04:35.980
of course using it doesn't do anything yet.

04:36.450 --> 04:42.630
For that we need to listen to an event and that event is emitted whenever we change the amount of items

04:42.630 --> 04:49.060
per page or the current page and that event is the page event.

04:49.320 --> 04:56.610
Here I want to call a method which I'll call onChangedPage and I'll forward the event object,

04:56.790 --> 05:03.540
this @angular/material paginator gives me. I can access it with $event as always and this

05:03.540 --> 05:04.970
will now call this method

05:05.040 --> 05:11.990
whenever we switch the page and it will give me some information about that page event. So with that, let's

05:11.990 --> 05:19.250
go to the post list component and there, I will add this onChangedPage method and there I know I get

05:19.250 --> 05:28.610
some page data which will be of type page event and page event is a type which needs to be imported

05:28.790 --> 05:36.580
from @angular/material, so make sure to add this import at the top. Page event is just an object holding

05:36.580 --> 05:42.180
some data about the current page and we can simply log it to the console to see what's inside of it.

05:42.880 --> 05:48.850
With that if we save that one more time, if I switch the page, we get an object with information about

05:48.850 --> 05:55.570
the current max number of items known by our paginator, we get information about the current page

05:55.600 --> 05:58.240
index and this starts at zero,

05:58.270 --> 06:06.640
so for page two, this is one. We get information about the current page size selected in that dropdown and

06:06.640 --> 06:08.950
we get the last pages index

06:08.950 --> 06:15.700
and since we are on page two and we start at an index of zero, the last page is page one with an index of

06:15.700 --> 06:23.930
zero. This is the data we get, also for the case that we changed the selected page size and now we can use

06:23.930 --> 06:30.700
that data to narrow down the amount of items we retrieve from the back-end.

06:31.120 --> 06:35.490
This of course means we have to do some work on the back-end, before I do that though,

06:35.560 --> 06:41.170
I want to add some spacing between the paginator and my accordion so that we have this drop shadow

06:41.170 --> 06:49.050
at the bottom again and I will simply do that by taking my paginator selector, mat-paginator

06:49.090 --> 06:56.560
here and going to the CSS file and there, I will simply add mat-paginator as a CSS selector and

06:56.560 --> 07:02.070
add a margin-top of let's say 1rem which by default should be 16px.

07:02.090 --> 07:06.520
So with that out of the way, this error here should also disappear,

07:06.600 --> 07:07.580
yes, now it's gone.

07:07.680 --> 07:13.820
So now with that out of the way, we can move forward and have a look at the back-end and see what

07:13.830 --> 07:16.350
we need to adjust there to add pagination.
