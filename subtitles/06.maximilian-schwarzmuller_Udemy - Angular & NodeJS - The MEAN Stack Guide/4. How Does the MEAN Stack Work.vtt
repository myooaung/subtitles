
0
00:02.340 --> 00:04.350
With that, let's have a look at the big picture.

1
00:04.350 --> 00:10.570
How does the entire MEAN stack look like in this course or in general, not just in this course? We have

2
00:10.570 --> 00:15.070
the client-side and the server-side, that's important. The client-side is what the user sees, the webpage

3
00:15.100 --> 00:21.310
as it runs in the browser, server-side is somewhere on a server we deploy where we run our business

4
00:21.310 --> 00:25.320
logic and which the user only indirectly accesses,

5
00:25.330 --> 00:27.580
we'll see how that access works in a second.

6
00:27.580 --> 00:34.900
So on the client, we use Angular which is a JavaScript framework so we also use JavaScript implicitly and

7
00:34.960 --> 00:39.160
we use it to build that user interface. On the server-side,

8
00:39.160 --> 00:45.920
we use Node, Express and MongoDB, Node/Express for the logic and MongoDB for the database,

9
00:45.940 --> 00:53.020
as I said, you don't want to connect directly to it from Angular. Now the client-side Angular is responsible

10
00:53.020 --> 00:55.900
for the user interface, so for the presentation.

11
00:55.900 --> 00:57.620
It's a Single Page Application

12
00:57.640 --> 01:04.620
as I explained in the last lectures and that Single Page Application can be rendered by our Node backend,

13
01:04.660 --> 01:10.480
so we could have one route which essentially returns that single HTML page but we can also be totally

14
01:10.480 --> 01:17.740
decoupled from that and be served from a totally different host, some static host like AWS S3 for

15
01:17.740 --> 01:19.160
example.

16
01:19.210 --> 01:25.030
Now on the Node application, we have our core business logic, especially the logic that should not be

17
01:25.030 --> 01:29.960
exposed to the client due to security reasons or performance reasons.

18
01:30.130 --> 01:37.560
We have our persistent data storage, so that database and we also put our authentication logic there,

19
01:37.600 --> 01:40.520
for example, it's of course part of our business logic,

20
01:40.540 --> 01:46.980
I just want to really emphasize that here, the logic where we decide whether an email or password is valid

21
01:46.980 --> 01:51.940
happens on the server because it can easily be fiddled with on the client,

22
01:51.940 --> 01:54.130
not so much on the server.

23
01:54.130 --> 01:56.500
How do we connect the two pieces then?

24
01:56.500 --> 02:04.300
Well we exchange requests and responses and these requests and responses are sent behind the scenes, so-called

25
02:04.390 --> 02:05.630
Ajax requests,

26
02:05.650 --> 02:10.410
you might have heard of this before and we use exactly the same pattern in Angular.

27
02:10.420 --> 02:15.760
These are requests which can be sent without us needing to reload the page which is of course exactly

28
02:15.760 --> 02:20.480
what we want. Therefore the type of data we exchange is not HTML

29
02:20.560 --> 02:26.660
because we never want HTML code, we do all that presentation and re-rendering logic with Angular.

30
02:26.860 --> 02:33.190
Instead what we get is so-called JSON data, that's a data format that's really efficient for encoding

31
02:33.580 --> 02:38.490
data like a list of posts and you will see how it looks like in this course.

32
02:38.590 --> 02:39.590
This is the big picture,

33
02:39.610 --> 02:41.030
this is how the MEAN stack works

34
02:41.080 --> 02:44.150
and this is exactly what we will implement in this course.

35
02:44.290 --> 02:51.370
So with that, I'd say enough of the words, let's get started and let's start setting up the base development

36
02:51.370 --> 02:51.810
environment

37
02:51.820 --> 02:53.190
we'll work with in this course

38
02:53.330 --> 02:56.950
and let's start building our MEAN stack application.