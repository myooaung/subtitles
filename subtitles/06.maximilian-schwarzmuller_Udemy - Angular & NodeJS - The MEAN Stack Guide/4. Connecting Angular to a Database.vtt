WEBVTT

00:02.210 --> 00:08.310
Now before we finally dive into the code, there is one thing I get asked quite a bit and it can be an

00:08.310 --> 00:09.940
obvious thing to think about,

00:10.170 --> 00:17.290
why don't we connect angular to the database directly without sending a http request to node

00:17.310 --> 00:23.520
which then does the database connection thing? We could have our angular app and our mongo database on

00:23.520 --> 00:31.470
a server and we could directly send queries to the database from our angular app and surpass our

00:31.560 --> 00:33.230
node express application,

00:33.240 --> 00:35.010
technically that would be possible.

00:35.800 --> 00:37.870
Is that a good thing to do though?

00:37.900 --> 00:41.680
No, the answer is no it's highly insecure

00:41.920 --> 00:43.350
and why is that?

00:43.570 --> 00:47.230
Because secure authentication is not really possible.

00:47.230 --> 00:51.890
We have to log into, we have to authenticate to the database

00:52.180 --> 00:58.140
and that is done through credentials which we would have to store in angular's code.

00:58.150 --> 01:04.180
Now that code is compiled to javascript in the end and it's loaded into the browser and in the browser,

01:04.420 --> 01:09.450
everyone can view it, every user of our webpage can access our javascript code

01:09.490 --> 01:16.270
hence we shouldn't store important information or especially not credentials in there and we would have

01:16.270 --> 01:18.780
no way of storing these securely.

01:18.820 --> 01:21.000
So that is a huge issue,

01:21.040 --> 01:28.930
we would expose credentials which then allow way more than we want it to allow and therefore our full

01:28.930 --> 01:35.710
databases would be exposed, so users can probably then do more than we want them to do and therefore

01:36.010 --> 01:43.450
directly connecting angular to mongodb is not a good idea, not something you should ever do and not

01:43.450 --> 01:45.430
something we will do in this course.

01:45.460 --> 01:53.470
We will instead send an http request to node where users can't send a different one because node only accepts

01:53.470 --> 01:54.540
the requests

01:54.550 --> 02:01.720
we define it to accept and then node has all the credentials but the nodejs code can't be read by our

02:01.720 --> 02:05.010
users because it resides on a server.
