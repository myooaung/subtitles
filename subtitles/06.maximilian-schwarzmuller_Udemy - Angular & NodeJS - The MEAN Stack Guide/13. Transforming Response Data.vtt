WEBVTT

00:02.200 --> 00:04.610
So fetching the data from the database is working

00:04.660 --> 00:05.890
and that's great

00:05.980 --> 00:11.080
but even though we're not using the ID on the frontend yet, we'll eventually have a problem because

00:11.080 --> 00:14.700
on the frontend, we expect to have an ID with an underscore

00:14.860 --> 00:19.590
but what we actually store and what typescript doesn't know when the code gets compiled

00:19.660 --> 00:27.270
hence we don't get an error is that our backend data actually does have an underscore, right,

00:27.280 --> 00:28.390
you can see it here,

00:28.480 --> 00:31.670
it's _id what we're getting from the database.

00:31.750 --> 00:35.010
So this is of course not ideal,

00:35.050 --> 00:40.580
we want to have a set up where we well have the right data stored on the frontend.

00:40.780 --> 00:46.060
Now we could of course simply rename that to _id on the frontend and be fine

00:46.210 --> 00:54.130
but I want to stick to ID and therefore in get posts, we can simply convert the data we get back

00:54.130 --> 01:01.630
from the server before we use it in subscribe, since the http client of angular uses observables,

01:01.630 --> 01:06.210
we also got access to the many great operators observables offer.

01:06.430 --> 01:10.330
Operators are basically functions, actions

01:10.390 --> 01:17.670
we can apply to the observable streams or to be precise, to the data we get through these streams before the

01:17.670 --> 01:20.860
data is ultimately handled in the subscription.

01:20.860 --> 01:26.330
So we play something before subscribe but still chained to that observable chain

01:26.620 --> 01:29.400
and that something is the pipe method.

01:29.680 --> 01:37.300
Now pipe simply allows us to add in such an operator and we can actually pipe multiple operators,

01:37.480 --> 01:40.820
so pipe is a method that accepts multiple operators

01:40.840 --> 01:45.100
we can add. Now to use an operator, we need to import it,

01:45.400 --> 01:55.100
so we import an operator from rxjs/operators and the operator I want to use here is called

01:55.120 --> 01:56.750
the map operator.

01:56.750 --> 02:02.580
Now if you worked with javascript a bit, you probably know the map method you can use on arrays,

02:02.630 --> 02:08.570
this method allows you to transform every element of an array into a new element and store them all

02:08.570 --> 02:10.440
back into a new array

02:10.880 --> 02:17.420
and it's essentially the same what map does here, we use it like this and it will get executed on our observable

02:17.420 --> 02:24.980
stream and the map function your expects an argument. It expects an argument, a function which should

02:25.040 --> 02:29.690
execute on every data that makes it through that observable stream,

02:29.690 --> 02:36.660
so in the case of an http request, our response or since we use the http client, the already extracted

02:36.660 --> 02:38.420
response body here.

02:38.750 --> 02:47.660
So what we get here is our post data and then we can do something with it here in the body of that function

02:47.720 --> 02:49.770
we passed to map.

02:49.780 --> 02:58.880
Now that post data will actually not be this data object here anymore, it will not hold a valid post because

02:58.880 --> 03:00.020
the ID is wrong,

03:00.200 --> 03:06.680
so instead posts is of type any. Now we know the exact type and we could define it as such but let's

03:06.680 --> 03:09.670
say we want to save time, it's type any,

03:09.890 --> 03:11.980
you could of course be more clear about the type.

03:12.200 --> 03:20.620
So here we want to return the array of posts and we do that by accessing post data posts let's say and

03:20.680 --> 03:26.780
this will automatically be wrapped into an observable by rxjs so that subscribe still subscribes

03:26.780 --> 03:28.300
to an observable

03:28.580 --> 03:30.680
and this now would give us the posts,

03:30.710 --> 03:36.040
so we already stripped out the message but of course we want to convert every post and we'll do this

03:36.050 --> 03:40.520
with the normal javascript map method which we can add to any array

03:40.580 --> 03:42.880
and this is just an array

03:43.400 --> 03:51.130
and in that array, we want to replace every post with a new javascript object,

03:51.130 --> 04:00.070
so here we return a new javascript object for every post which has a title which is post title, which

04:00.070 --> 04:07.660
has a content that is post content but which also has an ID which has post_id because that

04:07.660 --> 04:09.820
is what we're getting back from the backend.

04:10.030 --> 04:15.430
So now every element in the array will be converted to such an object and it will be put back into a

04:15.430 --> 04:21.460
new array which we then return here and then this will be wrapped by an observable and be passed on to

04:21.460 --> 04:23.230
the subscription.

04:23.230 --> 04:27.870
Now with that, we also have to update our code down there where we subscribe,

04:28.030 --> 04:36.100
this should now simply just post, we just get back the posts here or since I have the name here already,

04:36.100 --> 04:46.310
let's name this transformed posts, any name you like because this is now the result of our map operation.

04:46.310 --> 04:53.960
Now if we save that and angular reloads, well we fetch data again but this time we will have the correct

04:53.970 --> 04:58.370
ID and I can prove that to you in the next lectures

04:58.460 --> 05:05.210
when we'll also add a functionality to delete a post, to make that delete button work.
