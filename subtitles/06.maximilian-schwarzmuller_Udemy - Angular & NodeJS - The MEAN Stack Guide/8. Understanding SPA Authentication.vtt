WEBVTT

00:02.460 --> 00:04.420
So we're able to create users,

00:04.440 --> 00:08.530
now the question is, what does logging a user actually mean,

00:08.550 --> 00:14.850
how do we store that information and how do we then use it to allow a user to create a post or forbid

00:14.850 --> 00:16.270
it?

00:16.290 --> 00:22.890
This actually works differently for Single Page Applications than it works for normal full-stack applications.

00:23.360 --> 00:26.400
In Single Page Applications like our Angular app,

00:26.460 --> 00:29.960
we have our back-end with some routes, products, product,

00:30.030 --> 00:33.720
that's not our app here, that's any app you might be building.

00:34.020 --> 00:37.820
Now you typically send requests through the HTTP client as you learned.

00:37.920 --> 00:42.930
Now some of these routes might be protected, for example you might be able to get a list of products

00:42.960 --> 00:47.320
but you can't create a new product, at least not if you're not authenticated.

00:47.390 --> 00:52.120
Now in a traditional full-stack app, you would have used a session for this.

00:52.140 --> 00:56.980
So if a user logs in with his credentials, you would create a session on the server,

00:57.090 --> 01:01.840
return the session ID in a cookie to the client, so to the browser, store it there

01:01.920 --> 01:07.950
and for every future request, you would automatically send that cookie and validate it on the server and

01:07.950 --> 01:12.200
grant access if the cookie ID matches a valid session on your server,

01:12.270 --> 01:14.210
that's how it works in a nutshell.

01:14.580 --> 01:20.880
For a Single Page Application, this does not work because the Single Page Application back-ends, our API

01:20.890 --> 01:22.710
here is stateless,

01:22.830 --> 01:26.990
so it's not connected to the front-end app, it doesn't care about that app.

01:27.030 --> 01:28.940
That is why we have two separate servers right,

01:28.950 --> 01:35.010
we have a Node and our Angular server and we manage them in the same project but they actually are totally

01:35.010 --> 01:37.650
separated from a logical perspective.

01:37.650 --> 01:45.810
We could connect any app to our rest API, we could connect a mobile app. So the Angular app is decoupled

01:45.900 --> 01:52.440
from our Node back-end when it comes to this, it just sends requests to these URLs but our server

01:52.530 --> 01:58.970
doesn't store any information about the app and therefore, the server also doesn't store any sessions.

01:59.100 --> 02:04.530
So we have to find a different way of storing that authentication information and we do typically do

02:04.530 --> 02:08.910
that with a token, a so-called JSON Web Token.

02:08.910 --> 02:14.850
Now that is a token, like a package of information you could say, which is hashed into one long string,

02:15.180 --> 02:22.080
which is generated on the server upon a successful login. That token is sent back to the browser where

02:22.080 --> 02:28.280
you can store it in your angular app, in a cookie or in the local storage, an API you can access through

02:28.280 --> 02:36.140
your browser. And this token is then attached to all future requests as part of the URL or as a header

02:36.720 --> 02:39.150
and that token can't be faked,

02:39.150 --> 02:42.180
it's hashed in a way that's impossible to break

02:42.180 --> 02:47.940
basically. You can unhash it, you can look into it that's fine but if you edit one character in the

02:47.940 --> 02:52.150
data that is part of the token, the entire hash will change.

02:52.380 --> 02:59.460
So you can't fake that, you can't change it and you also can't guess it. Only the server can validate

02:59.580 --> 03:06.930
that this token is valid because the server was who created that token, only the server knows the exact

03:07.020 --> 03:08.130
algorithm.

03:08.490 --> 03:15.030
So we send that token with any future request and that then actually gives you access because the server

03:15.030 --> 03:22.650
can validate that token and only requests that have a valid token are allowed access, other requests are

03:22.800 --> 03:24.400
rejected.

03:24.450 --> 03:29.430
This is how you typically handle authentication in Single Page Applications and this is how we will

03:29.430 --> 03:31.250
handle it in this course

03:31.250 --> 03:33.990
and if that's way too theoretic for you, no worries,

03:33.990 --> 03:37.040
we'll dive into the practical implementation right now.
