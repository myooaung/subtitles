WEBVTT

00:02.090 --> 00:06.740
So back to angular, let's connect to angular and fetch the post from there and

00:06.770 --> 00:13.700
I want to do that in the posts service here in get posts. In get posts, I want to reach out to my

00:13.700 --> 00:21.830
backend, fetch the posts, store them in posts here and then fire my update listener to inform everyone interested

00:21.830 --> 00:28.100
in my app, for now the post list component that we got new posts. So I kick this off in post list component

00:28.310 --> 00:33.320
and I handle the response but actually in two separate parts which makes sense because fetching the posts

00:33.500 --> 00:37.860
is an asynchronous task, it will take a couple of seconds or milliseconds.

00:38.240 --> 00:43.290
So in get post, I want to send an http request and sending http requests

00:43.370 --> 00:50.260
thankfully is very easy with angular because it has a built-in http client. To use that client,

00:50.270 --> 00:56.600
we need to unlock it first and we do unlock things in the app module, there we need to import something

00:56.660 --> 01:06.290
from the angular package, I'll import my http client from @angular/common/http,

01:06.290 --> 01:09.960
that is the package path we want to use.

01:10.060 --> 01:14.890
Now actually we have to import the http client module here, excuse me.

01:14.890 --> 01:21.700
So with the http client module imported in the app module, we have to add it to the imports array to

01:21.700 --> 01:23.910
really unlock this feature

01:24.190 --> 01:29.210
and now we can use that http client in our components or services

01:29.680 --> 01:36.490
and yes, we could use it directly here in that component but I want to centralize this task in my service,

01:36.490 --> 01:41.780
it's not directly related to the template or to the UI of that specific component,

01:41.830 --> 01:44.600
we maybe want to use it in other parts of the app too,

01:44.710 --> 01:52.940
so centralizing such http calls in services makes a lot of sense. Now to use this in this posts service,

01:52.990 --> 01:58.480
we need to inject the angular http client into the service and that's important to know.

01:58.540 --> 02:06.160
You can inject things into services too, not just in components and you inject by using the constructor

02:06.160 --> 02:06.590
here too

02:06.610 --> 02:12.650
because it is a normal class after all and we want to inject that http client,

02:12.670 --> 02:14.480
so we need to import it first,

02:14.740 --> 02:28.720
so let's add an import statement and import http client from @angular/common/http, like this. Now

02:28.720 --> 02:29.840
we're importing that,

02:29.950 --> 02:35.830
now we can inject it and I will already and automatically bind it to a private property by adding the

02:35.830 --> 02:41.470
private keyword. I'll name it http but you could name it http client, whatever you want.

02:41.470 --> 02:47.420
Important is the type, this allows angular to find out what we want as an argument here and the type is the

02:47.460 --> 02:49.650
http client we just imported,

02:49.720 --> 02:54.480
now we can use it in get posts and I will remove the return statement for now.

02:54.490 --> 03:01.320
Here I will use this local http property, this http and as you can see, we got a couple of methods

03:01.320 --> 03:04.780
there, for sending a get request, a post request,

03:04.780 --> 03:07.030
now here we want to use a get request.

03:07.100 --> 03:14.070
By the way on our express backend, we haven't specified that we only handle get requests here,

03:14.080 --> 03:19.810
this is something we'll add later but get request does reach this route as you could verify in the

03:19.810 --> 03:25.480
browser because we send get requests by default if we enter a url there and therefore let's send a

03:25.480 --> 03:33.970
get request from the angular app too with the get method. Now this get method expects a path to our

03:34.240 --> 03:35.770
backend, to our server,

03:36.040 --> 03:43.990
so here we simply enter http/localhost 3000 and I will show you how to easily replace this with

03:43.990 --> 03:52.180
a more dynamic solution later in the course /api/posts, so exactly the path we're targeting

03:52.180 --> 03:53.320
here in the browser,

03:53.320 --> 03:57.240
you can of course also copy it from there and simply enter it here.

03:58.660 --> 04:01.040
Now this alone won't do anything though,

04:01.150 --> 04:03.090
the angular http client

04:03.160 --> 04:04.550
uses observables.

04:04.630 --> 04:10.810
You remember you learned about them in the last course module and it especially uses an observable which

04:10.810 --> 04:14.640
won't do anything and it won't even send the request which it wraps

04:14.800 --> 04:20.830
if you don't listen to it because if you're not interested in the response, why would it send the request?

04:20.840 --> 04:22.350
Now to listen, you need to

04:22.420 --> 04:29.140
well subscribe and now here's one other piece of information, you don't need to store that subscription

04:29.260 --> 04:32.260
and unsubscribe from it in ngOnDestroy,

04:32.440 --> 04:34.930
this would be available on services too by the way

04:35.080 --> 04:41.440
but you don't need to do that because for observables connected to features built into angular like

04:41.440 --> 04:46.800
the http client, this unsubscription will be handled for you by angular.

04:46.810 --> 04:50.420
So here we subscribe and we can pass three arguments here,

04:50.430 --> 04:52.700
the first one for new data,

04:52.840 --> 04:57.070
the second one for errors and the third one when it completes.

04:57.070 --> 05:03.390
Now we're interested in new data which will be the response and we probably also want to add error handling,

05:03.430 --> 05:05.290
though we will do that later in the course,

05:05.290 --> 05:07.540
for now let's focus on the positive case.

05:07.840 --> 05:14.810
Let's add a function that gets executed whenever we get a response and in this function,

05:15.130 --> 05:19.950
we will actually get back the body of this response already.

05:19.990 --> 05:24.680
The angular http client will give us access to this body immediately,

05:24.850 --> 05:30.700
if you want a different behavior, you can change this and you can learn more about the in-depth features

05:30.790 --> 05:32.270
of that http client

05:32.320 --> 05:38.940
in my complete guide for example. Now the get request or the get method here is a generic method actually

05:39.130 --> 05:46.090
and we can clearly specify which type of value we will get back, for example and post array, though

05:46.150 --> 05:53.050
that would be wrong because if you take a closer look at your backend, the body of the response will

05:53.050 --> 05:54.430
be this object.

05:54.460 --> 06:00.010
So actually we will get back an object which has a message property which is of type string and which

06:00.010 --> 06:03.180
has a post property which is of type posts

06:03.320 --> 06:11.770
array, we can specify that here too. We'll get back an object with a message property that has a string value

06:11.980 --> 06:15.260
and a post property that is a list of posts.

06:15.310 --> 06:16.860
Just one important addition,

06:16.900 --> 06:21.490
the posts definition, the model changed a bit, on the backend

06:21.520 --> 06:26.860
our posts also have an ID so maybe we should also add this to our frontend model,

06:26.860 --> 06:31.000
there I now add an ID field like that.

06:31.000 --> 06:35.080
This means that when we're creating a new post down there, we're missing this,

06:35.080 --> 06:40.630
I'll simply fix this by setting ID null there because we have no ID, it wasn't generated on the server

06:40.660 --> 06:41.270
yet,

06:41.290 --> 06:45.980
I will therefore just add an empty ID but we'll come back to posting

06:46.020 --> 06:47.580
post later,

06:47.650 --> 06:52.180
back to getting posts. Now we defined which format our data will have

06:52.180 --> 07:00.160
and this helps us because now here where we get our posts data, we actually get typescript support and

07:00.220 --> 07:06.780
IDE support and for example my IDE knows that we have a message in a posts property on the response data.

07:06.920 --> 07:12.970
I'm interested in the posts and I actually want to store them in my posts variable here, so we can say

07:13.000 --> 07:17.470
this posts equal to the posts we're fetching from the post data.

07:17.470 --> 07:20.780
No need to duplicate this by the way, it's coming from the server,

07:20.830 --> 07:23.150
we can't accidentally change it on the server,

07:23.170 --> 07:24.750
there is no such connection,

07:24.760 --> 07:27.510
it was part of a http response.

07:27.670 --> 07:31.020
So now we're setting the posts to the posts coming from the server,

07:31.180 --> 07:35.970
we can do this because we know that they will have the exact same format and structure.

07:35.980 --> 07:41.200
Now if you we're wondering what happens with the json thing, it was json format,

07:41.200 --> 07:43.770
don't we need to change that back to javascript.

07:44.020 --> 07:49.570
Well this is done for us by the get method already, so it extracts and formats the data and we can now

07:49.570 --> 07:51.210
just assign it like this.

07:51.210 --> 07:52.940
Now there is one thing we need to do,

07:53.200 --> 07:59.070
we need to inform our app and the other parts of our app about this update, so I will call this posts

07:59.090 --> 08:06.570
updated next and here, I will pass a copy of this post for the same reasons as before so that we can't

08:06.700 --> 08:09.340
edit our posts in the service.

08:09.490 --> 08:13.360
Now we should have an app that actually works,

08:13.360 --> 08:19.870
the one problem we have is that we see it down there, get posts now doesn't return anything

08:20.080 --> 08:26.530
but in the past in posts list, we actually expected to get back posts, well we can simply change

08:26.530 --> 08:34.300
this now. We weren't getting back posts anyways and now we simply just trigger that http request whenever

08:34.390 --> 08:39.940
post list component is loaded and that of course means that for now, we can only fetch new posts if we

08:40.030 --> 08:45.820
reload the page but we'll also change this later but we'll trigger this http request and since we

08:45.820 --> 08:50.080
have the subscription, we should also be able to render the posts once they're there.

08:50.320 --> 08:52.830
So now let's save this again and recompile

08:52.960 --> 08:56.020
and now let's try this out by visiting our angular app again,

08:56.110 --> 09:01.430
so now not localhost 3000 but localhost 4200.

09:01.500 --> 09:05.860
Here we don't actually see anything, now

09:06.180 --> 09:08.500
this actually is related to an error

09:08.520 --> 09:14.910
we can see if we open the developer tools, no access control allow origin header is present on the

09:14.910 --> 09:16.530
requested resource.

09:16.530 --> 09:18.420
Now what's that all about?
