WEBVTT

0
00:02.230 --> 00:07.410
So for this course, we will need a couple of tools and we'll install and add them step-by-step,

1
00:07.420 --> 00:10.790
for example MongoDB will be added a bit later,

2
00:11.150 --> 00:16.530
what we'll definitely need is NodeJS. For one because we will write and run

3
00:16.530 --> 00:17.980
NodeJS code, our server-side logic but also because

4
00:17.980 --> 00:22.150
even Angular needs it,

5
00:22.180 --> 00:29.500
even if we were not to create our own Node app, not because Angular uses NodeJS language features

6
00:29.950 --> 00:35.800
but because Angular actually is a framework that has a more complex build workflow,

7
00:35.800 --> 00:41.590
so the part where we take our source code as we write it as a developer and transform it into code that

8
00:41.590 --> 00:43.370
runs fine in the browser.

9
00:43.390 --> 00:50.580
That's is a bit more complex with Angular, because Angular for one uses Typescript, a superset to JavaScript, so

10
00:50.780 --> 00:55.060
a different language that's heavily based on JavaScript and, that's important,

11
00:55.060 --> 00:57.440
that does not run in the browser and

12
00:57.610 --> 01:01.750
to make it run, we need to compile it and that will be done for us, no worries

13
01:01.930 --> 01:07.870
but that task runner doing the compilation in the end is NodeJS, for example.

14
01:07.870 --> 01:11.050
So this will run all throughout the development process,

15
01:11.050 --> 01:16.300
we won't need to write any code for that but this is some stuff that happens behind the scenes and not

16
01:16.300 --> 01:23.230
just the Typescript to JavaScript compilation, the Angular code itself needs to be bundled and optimized and

17
01:23.260 --> 01:25.810
we need to reduce the code size

18
01:25.810 --> 01:32.350
by stripping out unused code and minifying it and all these are tasks handled by NodeJS on our

19
01:32.350 --> 01:39.000
machine whilst we are developing the application or when we are finishing it up basically and NodeJS

20
01:39.010 --> 01:40.320
will be used for that too.

21
01:40.420 --> 01:43.200
So we need it for these two reasons. For the NodeJS code that

22
01:43.210 --> 01:49.140
we write for our back-end and for the Angular build workflow and to learn more about Angular and the Angular

23
01:49.230 --> 01:51.330
workflow and how it works,

24
01:51.340 --> 01:56.950
definitely check out a course dedicated to Angular, because whilst I will cover some Angular basics

25
01:56.950 --> 01:57.810
in this course,

26
01:57.820 --> 02:01.330
in general, I do expect you to know the very basics about Angular.

27
02:01.330 --> 02:02.790
This is not a course for you

28
02:02.830 --> 02:06.660
if you've never touched Angular before. So with that out of the way,

29
02:06.770 --> 02:12.910
download NodeJS from nodejs.org and there pick the latest version, 10.1

30
02:12.910 --> 02:19.180
in my case. If you are facing issues with that, fall back to the older version but in general, it's recommended

31
02:19.180 --> 02:23.020
to use 10.1 or whatever the latest version is when you're viewing this.

32
02:23.110 --> 02:26.790
Simply click on this and it will download an installer through which you can walk,

33
02:26.890 --> 02:32.560
it's available for both Mac OS and Windows and also Linux and it should automatically give you the right

34
02:32.620 --> 02:38.890
download there. Once you've successfully installed it through the installer, we can think about setting

35
02:38.980 --> 02:43.670
up an Angular application because this is actually what we'll start with in this course.

36
02:43.730 --> 02:48.250
For that, we'll use another tool and that's the Angular CLI,

37
02:48.250 --> 02:53.700
CLI stands for Command Line Interface and it's the de-facto way of creating Angular apps

38
02:53.740 --> 03:00.460
because of the more complex build workflow I mentioned, we need a lot of tools that compile our code,

39
03:00.640 --> 03:06.370
optimize it and setting all of that up on our own is pretty cumbersome and error-prone,

40
03:06.380 --> 03:12.010
the CLI gives us a project setup where all of that is taken care of and where we can focus on writing

41
03:12.100 --> 03:14.670
our Angular code, our logic.

42
03:14.900 --> 03:18.370
The CLI is installed like this and it uses NPM,

43
03:18.370 --> 03:23.300
the Node Package Manager, to install the CLI tool globally on our machine

44
03:23.350 --> 03:30.300
with this first command here. NPM, the Node Package Manager, is installed together with NodeJS automatically,

45
03:30.310 --> 03:33.630
so if you installed NodeJS, you will have NPM.

46
03:33.880 --> 03:36.460
Now let's therefore now install the CLI,

47
03:36.640 --> 03:42.280
I've already got NodeJS installed, so I can just fast-forward to this step and to install the CLI,

48
03:42.300 --> 03:48.510
you should open your terminal or command prompt on your machine and then run npm,

49
03:48.550 --> 03:52.390
this Node Package Manager which is available with NodeJS,

50
03:52.510 --> 04:00.100
install -g for globally because we want to install that Angular CLI globally on our machine so that

51
04:00.130 --> 04:02.520
we can use it from anywhere on our machine

52
04:02.770 --> 04:08.000
and then the name of that CLI package is @angular/cli and

53
04:08.140 --> 04:11.260
make sure not to mistype this, the naming is important.

54
04:11.260 --> 04:18.550
You can add an @latest to absolutely fetch the latest version, but it should give you that by default

55
04:18.910 --> 04:22.910
give you that version. Now on Windows, this command should be fine like this. On Mac and Linux,

56
04:22.930 --> 04:27.760
you might need to add a sudo in front of this to get the right permissions to execute this command.

57
04:27.790 --> 04:30.390
Hit enter thereafter and enter your password

58
04:30.400 --> 04:37.870
if you are prompted for it and thereafter it will then download the CLI package from NPM's repository and

59
04:37.900 --> 04:39.440
install it on your machine,

60
04:39.450 --> 04:44.650
this can take a couple of seconds up to minutes and I'll be back once it's done. So it's done installing

61
04:44.710 --> 04:51.430
and in my case, I've got some errors in between but that's no problem as long as it finishes with some output

62
04:51.430 --> 04:57.670
where it mentions the package name and version and says updated or added 8 or the number can actually differ,

63
04:57.670 --> 04:59.210
packages.

64
04:59.230 --> 05:04.460
So if you see something like that, it succeeded, you may ignore any errors that happened in between,

65
05:04.490 --> 05:06.760
it was able to recover from these.

66
05:06.950 --> 05:14.180
Now once this is installed, we can create a new Angular project with the CLI and we'll add Node and Mongo

67
05:14.210 --> 05:19.490
and Express to that project setup throughout the course but let's start with the front-end because that is

68
05:19.490 --> 05:22.020
how we can quickly see something on the screen.

69
05:22.130 --> 05:27.230
So let's create a new project and for that, navigate into the folder where you want to create the project.

70
05:27.620 --> 05:33.380
Once you're in that folder and you can get there with the cd command on your machine, create a new project

71
05:33.380 --> 05:35.930
with ngNew, that is a command now available

72
05:35.930 --> 05:41.870
due to that CLI package, ng is basically a command made available by that

73
05:42.350 --> 05:47.210
and then the name of the project and I will name it mean-course but of course you can pick any name

74
05:47.210 --> 05:47.850
you want.

75
05:47.990 --> 05:53.690
Just make sure it's not starting with a number and it's not named test, that is forbidden but anything

76
05:53.690 --> 05:54.610
else is fine,

77
05:54.610 --> 05:56.270
mean-course should work and

78
05:56.270 --> 05:59.300
once you hit enter, it will set up that project.

79
05:59.300 --> 06:01.170
It will create a lot of files in there,

80
06:01.220 --> 06:03.920
most of them are configuration files for that workflow,

81
06:03.920 --> 06:09.200
we don't need to worry about them and it will also give us a little dummy app with which we can start.

82
06:09.200 --> 06:14.480
It will also install all the dependencies, like the Angular framework and other dependencies

83
06:14.480 --> 06:22.160
that framework depends on but also a couple of build or workflow dependencies, so dependencies that compile

84
06:22.160 --> 06:27.350
the Typescript code, dependencies that optimize the code, things like that.

85
06:27.470 --> 06:30.180
So this can take a while and I'll be back once it's done.

86
06:30.470 --> 06:36.260
Now once it is done, you can navigate into that newly-created folder with cd and then the name of that

87
06:36.260 --> 06:39.920
folder and in there, simply run ngServe

88
06:40.040 --> 06:46.150
to bring up a development-only server and this is not a server you will use to deploy it,

89
06:46.160 --> 06:49.520
I will show you how to deploy that app towards the end of the course.

90
06:49.530 --> 06:53.790
This is a development-only server that allows you to preview your application.

91
06:53.850 --> 06:59.090
Double-clicking on the index.html file won't work because that will use the file protocol and not

92
06:59.090 --> 07:03.140
the HTTP protocol and therefore many features we need are not enabled and

93
07:03.380 --> 07:08.860
this gives us a real web server running on our machine at this address you see here,

94
07:08.920 --> 07:17.780
http://localhost:4200 by default and you can then go to a browser and simply visit localhost:4200

95
07:18.410 --> 07:21.460
And on that URL, you should see something like this,

96
07:21.500 --> 07:25.490
some dummy starting page the CLI gives you by default.

97
07:25.490 --> 07:33.740
Now with that set up, we of course want to work on our code and for that, we need some IDE or some advanced

98
07:33.770 --> 07:36.140
text editor that makes that easier.

99
07:36.230 --> 07:38.000
Now you can use any IDE you want, like

100
07:38.000 --> 07:42.320
Sublime, Atom, WebStorm, in this course

101
07:42.350 --> 07:44.340
I will use Visual Studio Code.

102
07:44.360 --> 07:48.130
Now let's set it up and open our project in the next lecture.