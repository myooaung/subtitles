WEBVTT

00:02.360 --> 00:05.100
So we're handling the user ID now,

00:05.120 --> 00:07.760
now let's use it in the post list component.

00:07.760 --> 00:11.070
There we are already setting the user ID,

00:11.120 --> 00:16.220
now we can use it in conjunction with the creator information we have on every post.

00:16.220 --> 00:22.220
Keep in mind in the posts service, we are extracting that creator from the response we're getting back

00:22.220 --> 00:27.400
from the server and we're storing it in the posts which we handle in the post service,

00:27.440 --> 00:28.760
so this should work.

00:28.860 --> 00:34.550
Therefore in the post list component, every post which we render onto the screen should have that creator

00:34.820 --> 00:35.820
ID in it

00:36.110 --> 00:38.580
and we also get the user ID,

00:38.780 --> 00:44.770
so now if we go to the template, we should be able to add an extra condition to this ngIf statement.

00:44.990 --> 00:52.010
I want to show these buttons if the user is authenticated and if my user ID,

00:52.010 --> 01:02.420
keep in mind that is this property here, if my user ID is equal to the post creator field, whoops, creator

01:02.490 --> 01:10.280
written like that. Now it's creator because in my post service, I'm adding this field here.

01:10.290 --> 01:16.200
You see that we get an error in the template though and that error is stemming from the case that our

01:16.200 --> 01:20.360
post model which we're using doesn't have that creator field,

01:20.550 --> 01:21.820
so let's add it here.

01:22.020 --> 01:24.920
I'll add this creator field which also is a string.

01:24.960 --> 01:26.630
I guess it's a pretty boring model,

01:26.640 --> 01:28.040
everything is a string

01:28.140 --> 01:31.050
but it's not that uncommon actually.

01:31.050 --> 01:36.690
So now we have the creator field here too, in the post service, we now have an error down there

01:37.080 --> 01:42.260
where we actually update a post because there, we're not sending that creator ID

01:42.450 --> 01:48.110
and that's important of course. When we update a post, we want to keep that creator ID.

01:48.420 --> 01:53.730
Now actually I will just set creator here to null.

01:53.910 --> 01:59.340
Now we could definitely take the ID of the user who is currently logged in but that would open the

01:59.340 --> 02:01.970
window for the user to manipulate that

02:02.170 --> 02:04.490
and I don't want that,

02:04.530 --> 02:08.460
so instead I want to handle this on the server.

02:08.460 --> 02:17.820
If we go back to the server to my posts.js routes, when we update a post here in the put route, I of

02:17.820 --> 02:24.440
course want to add the creator field again

02:24.620 --> 02:30.590
but I will take that from the user data we have in the request and there, from the user ID, just as we

02:30.590 --> 02:33.820
do it when we create a post up there.

02:35.080 --> 02:40.490
So I want to handle this on the server side so that this can't be faked on the client side.

02:40.570 --> 02:46.660
We're still now fulfilling all the post model requirements in the post service and in the post list

02:46.660 --> 02:47.580
component,

02:47.590 --> 02:50.720
this means that the error now is gone.

02:50.740 --> 02:53.200
So now we're checking for that equality,

02:53.200 --> 02:56.950
I'm getting an error here though in the post create component,

02:59.700 --> 03:07.500
there we indeed have of course a post which we are trying to load when we are editing a post and there,

03:07.530 --> 03:10.050
we are simply missing that creator field.

03:10.130 --> 03:11.940
So let's add a creator here,

03:12.030 --> 03:21.810
post data creator. This is failing because in my post service where we are getting that single post here

03:22.290 --> 03:28.740
with get posts, I'm not adding it or I'm not specifying that extra field which will be returned by the

03:28.740 --> 03:29.520
server.

03:29.520 --> 03:30.790
So let's add it here,

03:30.930 --> 03:36.570
creator which is a string will now also be part of that response object we're getting

03:36.600 --> 03:41.940
and now with that, we got that creator field added here because we know it will be part of the response

03:41.940 --> 03:44.450
we're getting back when fetching a post

03:44.700 --> 03:46.760
and with that, our app should be working.

03:46.860 --> 03:51.180
Now if we go back and I'm logged in and I create a new post,

03:53.960 --> 04:00.670
I can hit save post of course and I should be able to see edit and delete here and I'm not.

04:00.680 --> 04:03.280
Now let's switch user real quick,

04:03.560 --> 04:07.640
if I login with a different user, then I also don't see it,

04:07.640 --> 04:09.000
well that's correct at least

04:09.050 --> 04:13.580
but of course we should see it if we login with the creator of that post.

04:13.580 --> 04:15.670
Now I see it but I didn't see it

04:15.680 --> 04:17.720
right after I created a post.

04:17.720 --> 04:22.490
Let's check this again. If I try this again,

04:22.510 --> 04:25.390
create another new post,

04:25.480 --> 04:28.150
here we got it and here we got it too, so

04:28.150 --> 04:31.510
it might have just been a reload problem. Again

04:31.510 --> 04:37.220
let's switch the account to the user who did not create that post.

04:37.370 --> 04:39.890
There the edit and delete buttons are missing

04:40.090 --> 04:47.200
but if we create a new post here, let's see if we see the edit and delete button for that then in the next

04:47.200 --> 04:48.490
page.

04:48.560 --> 04:52.540
There we have them, edit and delete, if I go back to the previous page,

04:52.540 --> 04:53.690
there they are missing,

04:53.860 --> 05:00.640
so now our front-end check is working too. Always keep in mind, this is not really a security mechanism,

05:00.640 --> 05:07.530
this is really just to provide a better user experience and protect the user from running into errors

05:07.680 --> 05:09.150
where we know they would happen.
