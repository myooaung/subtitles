WEBVTT

00:01.980 --> 00:08.380
So time to guard some routes, we don't want to be able to access the new post or edit posts routes

00:08.500 --> 00:16.030
if we are not logged in. For that, we can use so-called route guards, a feature provided by the Angular

00:16.120 --> 00:17.850
router. For this I'll

00:17.860 --> 00:26.130
first of all create such a guard in my auth folder and I'll name the file auth.guard.ts. A guard is

00:26.150 --> 00:27.440
just a service in the end,

00:27.520 --> 00:33.250
it's a class which we export which should be named auth guard, here since this is what it'll do

00:33.580 --> 00:37.550
and now what does guard mean? Angular

00:37.660 --> 00:44.320
add some interfaces your classes can implement which forces the classes to add certain methods which

00:44.320 --> 00:51.640
the @angular/router can execute before it loads a route to check whether it should proceed or do something

00:51.640 --> 00:52.360
else

00:52.720 --> 00:59.200
and one such interface which helps us with protecting routes is the CanActivate interface which you

00:59.200 --> 01:02.340
import from @angular/router.

01:02.350 --> 01:08.800
Now this CanActivate interface actually is implemented in the following way, in Visual Studio Code,

01:08.830 --> 01:12.550
I can automatically implement it by clicking on the red squiggly lines,

01:12.760 --> 01:17.830
then on that light bulb here and then clicking implement interface.

01:17.830 --> 01:23.890
So if you're not using that IDE, you have to add a method called canActivate with a lowercase c at

01:23.890 --> 01:27.100
the beginning which receives two arguments,

01:27.100 --> 01:33.010
the route you are trying to load which is of type activated route snapshot which you need to import

01:33.700 --> 01:40.780
from the @angular/router package and the getState which is a snapshot of the entire router state,

01:40.780 --> 01:49.090
you also need to import that type. And then canActivate has to return either a boolean or since it can also

01:49.150 --> 01:55.660
run asynchronously, an observable or a promise which eventually yields a boolean.

01:55.660 --> 01:59.650
Now we also need to import that observable type to be able to use it here,

01:59.830 --> 02:06.170
so let's import observable from rxjs and now we get our auth guard set up

02:06.250 --> 02:09.540
and this will always throw an error which is of course not what we want,

02:09.580 --> 02:10.920
so let's delete that,

02:11.020 --> 02:13.350
let's instead return such a boolean.

02:13.840 --> 02:21.940
If we return true here or a promise or an observable which eventually yields true, then the router will

02:21.940 --> 02:28.420
know that the route which we were protecting is accessible, so that the user may access this. If you

02:28.420 --> 02:29.650
return false,

02:29.680 --> 02:31.830
the router will deny to go there.

02:32.020 --> 02:37.270
Well before returning false, you should also navigate the user away therefore and redirect,

02:37.270 --> 02:42.520
otherwise you'll just block the loading of the page but not provide an alternative.

02:42.520 --> 02:44.560
Now of course we don't want to hardcode

02:44.590 --> 02:47.040
true or false into that file,

02:47.110 --> 02:52.180
we want to get that information from the auth service which is where we store the information whether the user

02:52.210 --> 02:54.380
is authenticated or not.

02:54.430 --> 03:00.150
So let's go to that service by injecting it and for injecting something into that

03:00.160 --> 03:03.690
auth guard since this essentially is also just a service,

03:03.700 --> 03:06.430
we have to add @injectable

03:06.460 --> 03:12.520
because remember, if you want to inject services into services, you have to add this annotation and you

03:12.520 --> 03:16.170
also have to import injectable from @angular/core.

03:16.990 --> 03:24.120
With that we can go to the constructor and inject our auth service which is of type auth service

03:24.250 --> 03:31.120
and that of course again means that you should also import auth service from your auth service file,

03:31.120 --> 03:37.800
so make sure to import this path here. With it injected, we can use it here in

03:37.940 --> 03:48.200
canActivate. We can get a new constant, isAuth and simply reach out to this auth service, getIsAuth because

03:48.200 --> 03:52.010
that holds the information whether the user is authenticated or not

03:52.010 --> 03:57.640
and this is updated if we login or logout, so we can rely on this being current.

03:57.680 --> 04:06.290
So now we can simply use that, here in an if check and if we are authenticated, then I want to return true

04:06.650 --> 04:12.920
but actually I want to do something if we are not authenticated. Then I want to navigate away and we

04:12.920 --> 04:16.830
can do this by injecting the router.

04:16.860 --> 04:23.910
So here I will inject the router which is of type router and which is imported from the @angular/router

04:23.940 --> 04:24.520
package,

04:24.570 --> 04:27.390
so make sure to add this import

04:27.700 --> 04:36.320
and then here, I call this router navigate and I will navigate to the root page.

04:36.340 --> 04:42.150
You could also navigate to /login for example, to tell the user hey you need to login first,

04:42.160 --> 04:43.350
let's maybe do that.

04:43.690 --> 04:44.440
That's all,

04:44.440 --> 04:48.170
we just continue and here at the end, I will return isAuth,

04:48.190 --> 04:52.670
so this will be true if we are authenticated and false otherwise.

04:52.720 --> 05:00.190
Now we just need to add this guard and we do add it in the app routing module. Since it is a service, we need

05:00.190 --> 05:07.660
to provide it and whilst you should rarely provide services in that special module, guards are perfectly fine

05:07.660 --> 05:09.100
to be provided there,

05:09.160 --> 05:16.040
so let's add the providers array and let's add the auth guard type which you need to import of course,

05:16.060 --> 05:22.810
so make sure to add an import statement where you import auth guard from your auth guard file path.

05:22.970 --> 05:28.470
With that it's made available, now you just need to attach it to the routes you want to protect

05:28.720 --> 05:36.940
and that would be these two routes. We can add it by adding another property, canActivate which takes

05:36.940 --> 05:38.190
an array of guards

05:38.230 --> 05:44.080
we want to run on these routes whenever the router tries to load them, tries to activate them, you could

05:44.080 --> 05:44.980
say.

05:44.980 --> 05:51.490
So here I will point at auth guard and I will do the very same for the edit route.

05:51.490 --> 05:58.210
So now these two routes are protected and that means that if we now reload and I manually enter

05:58.210 --> 05:59.780
/create,

05:59.800 --> 06:01.820
keep in mind I'm not authenticated now, 

06:02.950 --> 06:09.420
I am indeed forwarded to the login page. And that of course is exactly the behavior we want,

06:09.430 --> 06:15.160
now we're protecting these routes on the front-end against unauthenticated access.

06:15.270 --> 06:20.580
Now important to keep in mind, this is just a user interface, a user experience thing,

06:20.770 --> 06:24.040
we were protecting our back-end before already,

06:24.190 --> 06:30.760
you could never create posts, that would always have failed but now, we're also preventing situations

06:30.760 --> 06:37.510
where the user might do something which is doomed to fail and which would therefore provide a bad user

06:37.510 --> 06:38.470
experience.

06:38.470 --> 06:45.240
We can now avoid this because now, the user can't get into a situation where he tries to do something

06:45.280 --> 06:46.420
he's not allowed to do.
