WEBVTT

00:02.220 --> 00:09.540
In the last video, we deployed our restful API, our back-end. Now we want to deploy the Angular application,

00:09.610 --> 00:10.510
the front-end

00:10.740 --> 00:13.350
and for that we'll use the CLI to build it.

00:13.410 --> 00:19.650
Building it means taking all the Typescript code and the Angular code and compiling that to a bunch

00:19.650 --> 00:21.760
of Javascript and HTML files, 

00:21.810 --> 00:27.450
Well one HTML file and a bunch of Javascript files that make up the application because everything

00:27.450 --> 00:29.210
about Angular happens in the browser,

00:29.250 --> 00:29.520
right.

00:29.520 --> 00:30.770
It's a client-side,

00:30.810 --> 00:32.370
it's a browser framework,

00:32.370 --> 00:35.610
it re-renders the page we're seeing in the browser.

00:35.610 --> 00:39.450
We can build it with Angular CLI, in the project folder,

00:39.570 --> 00:46.320
simply run ng build and then --prod to set all the settings to production which puts the most

00:46.320 --> 00:47.990
optimisations into place.

00:48.510 --> 00:52.380
So this will now build your project, it can take a couple of seconds

00:53.490 --> 00:57.780
and once it is done, it will give you a new folder.

00:57.780 --> 01:02.330
Now here, we get an error that apiUrl does not exist

01:02.430 --> 01:08.520
and the reason for this and that's really important is that for building for production, it doesn't use

01:08.520 --> 01:14.490
your environment file here where you have that apiUrl but it takes the environment prod file

01:14.670 --> 01:19.410
which makes sense because that gives you the advantage of using different settings for production and

01:19.410 --> 01:20.200
development

01:20.430 --> 01:27.900
and we actually need these different settings here because our development URL of http://www.localhost:3000

01:28.230 --> 01:30.040
certainly is wrong now.

01:30.210 --> 01:35.490
So let's add the apiUrl to the environment.prod file which is the file getting used when

01:35.490 --> 01:37.200
you're building for production

01:37.320 --> 01:42.360
but let's set the URL to the URL we have here on our dashboard,

01:42.570 --> 01:44.820
so this URL we're visiting here.

01:44.970 --> 01:46.430
You can copy that, 

01:46.770 --> 01:49.100
this is the URL of our running API,

01:49.530 --> 01:50.430
store it here

01:50.450 --> 01:53.500
and don't forget to add /api after it

01:53.580 --> 02:00.720
just as you did it here for production, for development. With that, let's rerun ng build prod and now we

02:00.720 --> 02:07.860
should be able to build this and will take this new API or this new URL and it will be included in

02:07.860 --> 02:12.540
our code automatically due to our set up we chose in this course.

02:12.660 --> 02:15.120
So let's wait for this to finish

02:15.940 --> 02:22.190
and once it is finished, we will have a new folder, the dist folder

02:22.440 --> 02:28.890
and now you need to deploy the content of that dist folder or to be precise, of the mean-course folder

02:28.980 --> 02:30.090
in the dist folder.

02:30.090 --> 02:37.780
So all these files, these are the files you want to deploy to your static front-end host.

02:37.900 --> 02:39.110
So let's do that

02:39.280 --> 02:45.850
and AWS also got a service for that, Elastic Beanstalk which we're using here is a host for dynamic

02:45.850 --> 02:46.480
content,

02:46.570 --> 02:57.840
so for PHP or NodeJS as we are using it. AWS also has the S3 service which is their static cloud storage

02:57.840 --> 03:01.330
in general but which can also be used as a static host.

03:01.740 --> 03:08.190
You create a new website here by creating a new bucket and you can choose any name you want,

03:08.190 --> 03:15.990
though bucket names are unique globally, so you can take the name I'm using here and I will use

03:16.440 --> 03:25.620
mean-angular-node you can use any name you want of course and simply click create, the default

03:25.620 --> 03:27.090
settings should be fine.

03:29.140 --> 03:32.000
This should give you the mean-angular-node bucket here,

03:32.170 --> 03:38.890
now you can click upload and drag these files which you have in that dist mean-course folder in here

03:39.190 --> 03:48.110
or manually select them of course. So you can also click add files, then select that dist folder and in there,

03:48.110 --> 03:50.940
in the mean-course folder, all the files in there,

03:50.990 --> 03:55.970
open them, click upload and now this will add them to the bucket.

03:56.000 --> 04:02.480
Now the bucket is just a file storage and by default, it's not accessible by other people. To make it

04:02.480 --> 04:03.170
accessible,

04:03.170 --> 04:05.270
you need to do two more things.

04:05.300 --> 04:11.030
First of all you need to change the permissions by setting a so-called bucket policy. Here

04:11.150 --> 04:18.330
you can click on documentation to see some examples because we will need one specific example, you can

04:18.330 --> 04:20.400
click on bucket policy examples here,

04:20.610 --> 04:26.280
we need the granting read-only permissions to an anonymous user bucket policy because visitors of our

04:26.340 --> 04:30.530
website will be anonymous and this should give them read access.

04:30.560 --> 04:34.080
You can now copy that permission statement here,

04:34.080 --> 04:40.620
go back and add this here to this field and replace example bucket with your bucket name,

04:40.620 --> 04:46.470
so in my case with mean-angular-node and that of course are settings which are really only required

04:46.470 --> 04:53.250
for AWS S3, other static hosting providers typically don't have that, S3 has it because it is

04:53.250 --> 04:56.440
also a file storage, not just a hosting provider.

04:56.760 --> 05:00.100
So with that added, you can click save

05:00.320 --> 05:03.540
and now we have public access on the bucket which is correct

05:03.740 --> 05:09.770
and now you can click on properties and enable static website hosting by clicking on that card and

05:09.770 --> 05:12.640
simply check use this bucket to host the website

05:12.650 --> 05:20.210
and now important, choose index.html as an index document and also and that's really important, as

05:20.210 --> 05:22.110
an error document.

05:22.190 --> 05:29.540
This second part is required for your Angular routes to work because if the user enters something, like

05:29.750 --> 05:36.260
yourdomain/auth/login, that would by default be first parsed by your server.

05:36.410 --> 05:38.840
The server doesn't know that route though

05:38.870 --> 05:42.090
and there also is no sub-folder named auth or login,

05:42.200 --> 05:47.960
so it would throw an error. By adding index.html as an error document,

05:47.990 --> 05:53.740
it will then forward that error to the index.html file and will execute that file

05:53.840 --> 06:00.440
and since that file contains your Angular app which knows its routes, the Angular router can then parse

06:00.620 --> 06:06.530
the URL and the Angular router will understand it and render the correct component.

06:06.650 --> 06:11.790
So this is absolutely required to ensure that your routes keep on working.

06:12.170 --> 06:16.930
So hit save then and now the static website hosting is enabled,

06:16.940 --> 06:23.420
now you can visit your website by going to static website hosting again and clicking that

06:23.420 --> 06:23.910
URL

06:24.260 --> 06:26.690
and now this should load your Angular app.

06:27.080 --> 06:28.210
And here it is

06:28.370 --> 06:30.810
and what's already good,

06:30.830 --> 06:32.150
we're not finding the file,

06:32.180 --> 06:36.920
the image which makes sense because we deleted it but what's good is that we can see the post except

06:36.920 --> 06:37.970
for the image.

06:37.970 --> 06:39.700
Now let's try logging in,

06:40.010 --> 06:44.020
let's try selecting the right user here

06:45.790 --> 06:50.950
and that was not the user who created the post but let's simply create a new post and let's see if that

06:50.950 --> 06:52.580
file upload is working.

06:54.000 --> 06:58.350
Let's pick an image, like spring and click save

06:58.350 --> 07:02.270
post and now here, we're getting an error,

07:02.270 --> 07:08.650
an internal server error, it fails to store that file on our server.

07:09.040 --> 07:14.330
And the problem is we can see it if we inspect the error here in the network tab and then click on

07:14.330 --> 07:15.340
response that

07:15.360 --> 07:23.210
there's no such file or directory, backend/images and that is something we overlooked.

07:23.210 --> 07:29.030
We have to adjust our back-end code a bit more to make sure that the image is stored correctly because

07:29.090 --> 07:34.370
that back-end folder is now incorrect because I move that server.js file into that back-end folder

07:34.760 --> 07:37.900
and we have to see that relative from the server.js file,

07:37.940 --> 07:43.470
so this should now just be images, here in our multer middleware.

07:43.520 --> 07:46.570
This should just be images just because this is where we are storing the images

07:46.580 --> 07:53.330
now, this also has an implication for the app.js file. There were serving images statically by

07:53.360 --> 07:55.580
also looking at back-end images.

07:55.580 --> 07:59.640
Now this is just images now, just the images folder.

08:00.050 --> 08:07.100
So if we save that we have to redeploy our back-end which is no problem of course, we can simply delete

08:07.190 --> 08:08.370
the old archive,

08:08.480 --> 08:17.080
select all back-end files and folders again and recompress them and go back to our Elastic Beanstalk

08:17.500 --> 08:23.840
console here and let's redeploy that version, click on your app, upload and deploy, choose a new version

08:23.900 --> 08:29.120
label, choose that new archive tag where we choose that new archive,

08:29.500 --> 08:36.840
that new zip file where we did update the code to not look for the back-end sub-folder and let's wait

08:36.840 --> 08:45.040
for this to update our environment and thereafter, let's again try to add a new image or add a new post.

08:45.180 --> 08:49.980
So it's done redeploying, let's reload our MEAN application

08:51.860 --> 08:54.970
and let's again try to upload a post here.

08:57.080 --> 08:59.090
Now this is looking better,

08:59.120 --> 09:00.580
there is our image,

09:00.590 --> 09:04.240
now let's also try editing this and let's pick a different image,

09:04.280 --> 09:05.200
the spring image

09:05.220 --> 09:09.380
and let's update the title.

09:09.430 --> 09:11.080
This also works, that error,

09:11.080 --> 09:15.660
that first error is always coming from that first post which doesn't have an image because we created

09:15.670 --> 09:19.410
that post locally and I cleared all images before deploying.

09:19.810 --> 09:24.630
Let's now try deleting that and this also works, so this all seems to work.

09:24.640 --> 09:30.480
Now let's switch the user to the user who hopefully created that other post

09:30.640 --> 09:32.150
and now let's clear that too

09:32.410 --> 09:36.270
and now we got a clear app again and we get no errors here.

09:36.280 --> 09:43.080
So now this is working and now we successfully deployed our application to a real server.

09:43.150 --> 09:48.820
We deployed it by deploying two different apps, the rest API and the Angular app.
