WEBVTT

00:02.640 --> 00:09.330
Back to the front-end then, to the posts service to be precise. When adding a post, we'll now have to upload

00:09.390 --> 00:16.150
our file or to be precise, we want to send a request that includes both, our normal data and the file.

00:16.590 --> 00:22.070
Previously what we did is we used post method and we simply attached the post,

00:22.320 --> 00:27.440
well object here as a body and that would automatically send it as JSON to the back-end.

00:27.720 --> 00:35.100
Now JSON can't include a file, so I will now edit this. Instead of sending JSON,

00:35.250 --> 00:37.920
I will now send form data.

00:38.010 --> 00:41.660
So let's create a new constant and name it postData,

00:41.660 --> 00:42.670
the name is up to you

00:42.810 --> 00:45.600
and this will be a new form data object.

00:45.600 --> 00:51.840
This is an object provided by Javascript and formData is basically a data format which allows us to combine

00:52.080 --> 00:53.970
text values and blurb,

00:54.000 --> 00:56.400
so file values.

00:56.820 --> 01:06.900
We use it by now accessing post data and we append fields to it, like title, title is one field and the

01:06.900 --> 01:10.640
value for that would be the title we get as an argument.

01:10.650 --> 01:15.110
Now as you might be able to guess, we do the same for content of course.

01:15.180 --> 01:19.710
Now it gets more interesting for the file but also not that interesting,

01:19.710 --> 01:24.300
we append again and we give this a name of image. Now important,

01:24.300 --> 01:29.170
this is the property we're trying to access on the back-end here,

01:29.360 --> 01:31.460
so make sure that you've got that right

01:32.850 --> 01:37.350
and the interesting thing here is of course I now need to add my image here,

01:37.380 --> 01:43.020
we're not getting it as an argument yet so let's change this, here I'll get my image which will simply

01:43.020 --> 01:44.200
be of type file.

01:45.180 --> 01:51.300
So now I can pass my image here and I pass an extra argument which will be the file name I provide to the

01:51.300 --> 01:52.060
back-end

01:52.260 --> 01:57.120
and here I want to use the title the user entered for the post and keep in mind, this will be part of

01:57.120 --> 01:59.390
the file name as it is saved on the back-end,

01:59.400 --> 02:01.550
so this is not unimportant.

02:02.390 --> 02:05.460
So now I'm passing the image and this title for the image

02:05.570 --> 02:09.100
and this is my readily configured post data.

02:09.110 --> 02:15.830
Now the cool thing about the Angular HTTP client is we can simply pass post data and it will automatically

02:15.830 --> 02:19.400
set the right headers, detect that we got a,

02:19.430 --> 02:25.160
well non-JSON data or data which can't be sent as JSON and all that will be handled by the Angular

02:25.180 --> 02:28.090
HTTP client. Now on the subscription,

02:28.130 --> 02:37.370
I just need to make sure that we still save a post and for that, I'll create my post here, post which is

02:37.370 --> 02:43.670
of type post of course, assign my ID here which is response

02:46.040 --> 02:55.190
data post ID, assign my title here which is the title I get as an argument and assign my content. I'll

02:55.210 --> 02:59.810
also need to store the image of course but we don't get this back yet,

02:59.910 --> 03:03.730
so let's do this later.

03:03.730 --> 03:05.950
So now that's updated here in the subscription,

03:05.950 --> 03:08.070
now we get our logic in place.

03:08.080 --> 03:14.080
Now one thing that's missing is we're not passing the image to add post. So in the post create component

03:14.170 --> 03:21.320
where we are calling this, I should of course forward this by accessing this form value image

03:21.460 --> 03:26.380
and now we're extracting the image which is a control of this form and we're extracting the value and

03:26.380 --> 03:28.830
we're passing this to add post.

03:28.840 --> 03:32.660
Now we should indeed be able to upload a file,

03:32.740 --> 03:34.480
so let's give this a try.

03:34.720 --> 03:37.560
Let's enter file upload

03:37.570 --> 03:44.550
test1 with some content and let's check or choose the spring.jpg file.

03:44.590 --> 03:49.970
Let's hit save post, takes a while which is a good sign because uploading obviously takes a bit

03:49.970 --> 03:50.810
longer

03:51.160 --> 03:52.610
and now let's have a look,

03:52.660 --> 03:55.930
we got the images folder but it's empty.

03:56.260 --> 03:59.420
So let's check the server side log, there

03:59.440 --> 04:01.540
I don't see any problems,

04:01.900 --> 04:04.630
so what could be going wrong here?

04:05.040 --> 04:05.460
Yes

04:05.620 --> 04:08.360
I know what's wrong in our server-side-posts.js

04:08.370 --> 04:14.340
file. When I set up multer here, passing storage like this is incorrect,

04:14.440 --> 04:21.160
I need to pass a Javascript object which has a storage property which then should get my storage configuration.

04:21.280 --> 04:28.110
So that was a mistake, so let's save this, let's delete the file, upload test and let's test it again.

04:28.130 --> 04:32.700
So file upload test2 I guess,

04:32.960 --> 04:35.840
let's pick our image again here,

04:36.010 --> 04:39.600
let's hit save post and see if that worked.

04:39.630 --> 04:46.430
Now looks better, in the images folder, there is our file.

04:46.470 --> 04:48.560
So indeed, we were successful,

04:48.570 --> 04:50.100
we did upload it.

04:50.130 --> 04:52.020
Now of course we're missing a couple of things,

04:52.080 --> 04:54.380
we're not telling the client where this is stored,

04:54.390 --> 04:55.630
we need to return this

04:55.770 --> 05:00.510
and I also want to check whether we're able to upload invalid data.

05:00.540 --> 05:07.020
So let's go back and let's temporarily disable our front-end validation, so that we can actually submit

05:07.080 --> 05:11.490
any file that we ignore the result of our mime type validation.

05:11.910 --> 05:16.590
Let's enter some dummy value here, pick an image and let's pick that video file, you can of course pick

05:16.590 --> 05:21.050
any PDF, anything which is not an image, hit open and click save.

05:21.060 --> 05:22.460
Now that's a big

05:23.980 --> 05:25.780
and I get an error already.

05:28.340 --> 05:30.110
If I expand this terminal,

05:32.750 --> 05:35.130
I get my invalid mime type error.

05:35.300 --> 05:36.760
So this validation is working,

05:36.770 --> 05:39.810
we're not handling the error gracefully on the client,

05:39.830 --> 05:41.380
we'll do this later.

05:41.390 --> 05:44.170
For now let's comment in the validation on the client

05:44.240 --> 05:50.120
but this shows that the validation is working on the server, on the client and that we're able to upload

05:50.120 --> 05:50.920
files.

05:51.200 --> 05:57.440
So with that, let's continue, let's make sure we also pass back that file information to the client

05:57.440 --> 06:00.800
so that we can use it there, that we store it in the database

06:00.800 --> 06:03.590
and of course also that we later can update files.
