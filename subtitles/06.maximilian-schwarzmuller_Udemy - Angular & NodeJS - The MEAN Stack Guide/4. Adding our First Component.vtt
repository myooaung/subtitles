WEBVTT

00:01.930 --> 00:08.050
In this course we'll build an application where users can create posts, can read the posts of other users,

00:08.250 --> 00:10.810
edit their old ones and so on.

00:10.810 --> 00:12.210
So let's start working on that

00:12.280 --> 00:17.230
and we certainly don't want to handle all that logic in one component only because that would quickly

00:17.230 --> 00:18.760
explode in size,

00:18.910 --> 00:21.760
theoretically it would be possible though, that's important

00:21.760 --> 00:27.340
to understand but I want to create more than one component and we can simply create a new component by going

00:27.340 --> 00:28.510
to the app folder,

00:28.510 --> 00:34.750
this is where you manage your angular app and the parts that make up that app and by adding a new subfolder

00:34.750 --> 00:42.650
there, you typically put new components or blocks of components into sub-folders to keep your code organized.

00:42.660 --> 00:48.730
Now in there, I'll create a new component for creating a new post because that sounds like a good start

00:48.740 --> 00:50.030
if we want to work with posts

00:50.050 --> 00:53.960
we need to be able to create them, otherwise reading them will be hard.

00:54.310 --> 01:01.720
So I will create a new posts subfolder here which should hold all my post related components

01:01.990 --> 01:08.080
and since each component typically is made up of more than one file, we got a template for the html code

01:08.380 --> 01:12.920
and a css file for the styling as well as the typescript file for the logic,

01:13.180 --> 01:17.980
I'll create yet another subfolder in there to organize the files of a single component in there.

01:18.010 --> 01:18.850
Now this is up to you,

01:18.850 --> 01:25.360
you could also use a flatter folder structure or you don't use that many folders, I'll go with the subfolder way

01:25.360 --> 01:25.990
here.

01:26.370 --> 01:33.240
So in here, I want to be able to create a new post and I'll name this post-create because I'll

01:33.250 --> 01:36.060
create the post create component in there.

01:36.370 --> 01:42.430
The file which I create in there is the post-create.component.ts file and now the file name

01:42.430 --> 01:43.720
theoretically is up to you

01:43.720 --> 01:51.490
but it's a convention in angular to include .component in component files or in general include a description

01:51.490 --> 01:53.360
of what's in the file in the file name

01:53.380 --> 01:59.110
with this dot notation as we do here, .ts is an extension because we use typescript and the part in

01:59.110 --> 01:59.980
front of that,

02:00.030 --> 02:07.740
there you typically use the kebab case, so dash separated words for describing which kind of component

02:07.820 --> 02:08.860
this is.

02:08.860 --> 02:15.040
Now I got that post create component in there but a component as I said typically is more than just

02:15.340 --> 02:17.950
the logic, it at least needs a template.

02:17.950 --> 02:23.030
Now theoretically you can also define that html template in this typescript file

02:23.140 --> 02:28.990
but since we have a bit of a more complex template and in general, it's a good practice to create a separate

02:28.990 --> 02:33.410
file. So that will be the post-create.component.html

02:33.490 --> 02:40.030
file now, so that's the html file belonging to that component and with these two files, we can work

02:40.030 --> 02:40.800
with that.

02:40.870 --> 02:45.400
Now in the typescript file, we create a component by simply creating a new class,

02:45.460 --> 02:47.390
a class is a typescript feature,

02:47.590 --> 02:53.080
it's also available in the latest javascript versions, it essentially allows us to create a blueprint

02:53.140 --> 02:54.270
for an object

02:54.340 --> 02:57.980
though we will never create that component object on our own,

02:58.030 --> 03:03.670
we just give it to angular and angular will instantiate it and create it and use it,

03:03.790 --> 03:09.910
we just define how such a component would look like and that includes a name for it.

03:09.920 --> 03:12.740
There the convention is to use basically your file name

03:12.760 --> 03:19.280
but now in that notation here, post create component, so the individual words that's starting with capital

03:19.290 --> 03:25.120
characters and component at the end and we actually as I said create a class here, so don't forget the

03:25.120 --> 03:31.570
class keyword and now we get a new class which essentially is just a typescript class,

03:31.630 --> 03:37.930
we turn it into a component angular understands by adding a so-called decorator to it.

03:37.940 --> 03:41.170
Decorator is a typescript feature, you add an @

03:41.230 --> 03:46.830
and then the name of the decorator and angular ships with a component decorator, to use it in that file,

03:46.840 --> 03:48.300
you need to import that though,

03:48.520 --> 03:53.460
so import a component from @angular/core.

03:53.470 --> 03:57.510
Now this is one of the packages the angular framework is comprised of

03:57.940 --> 04:04.000
and this package includes these core features like that component decorator which you attach to a class

04:04.330 --> 04:12.040
to mark it as a component which angular then scans for certain features and uses as a component.

04:12.040 --> 04:18.160
Now the component decorator takes some configuration in the form of a javascript object which we pass

04:18.160 --> 04:22.750
to it, in that object we need to define things like the template.

04:22.870 --> 04:29.710
So we define a template and if we just use template, you could pass a string in here to write some html

04:29.710 --> 04:30.490
code here

04:30.700 --> 04:34.220
but for a longer template, this is not really something you want to do,

04:34.250 --> 04:36.480
define a template url instead

04:36.610 --> 04:40.280
and then add a relative path to your template file,

04:40.300 --> 04:44.190
so in my case it's post-create.component.html

04:44.230 --> 04:49.420
So this is then the file angular will look for, the template and then parse.

04:49.420 --> 04:52.860
So now this is pointing at that html file,

04:52.930 --> 04:55.540
now with that we also need to add more,

04:55.780 --> 04:58.070
we want to add a selector,

04:58.160 --> 05:02.760
let's actually add that first. A selector which allows us to use that component,

05:02.900 --> 05:10.580
so to use it by that selector which serve as our own html tag. The convention is to start with app-

05:10.910 --> 05:17.750
to avoid clashes with normal html elements which name you might take otherwise accidentally and

05:17.750 --> 05:18.730
then any name you want

05:18.730 --> 05:24.820
but typically you also use the well file name or the component name for this, so app posts create,

05:25.040 --> 05:26.300
don't forget the comma.

05:26.510 --> 05:32.780
Now this defines a basic component, you need a template and you typically also need a selector

05:32.900 --> 05:34.770
so that you able to include it.

05:35.180 --> 05:37.350
You don't need to add anything in the typescript code

05:37.350 --> 05:41.510
here, we want to add something in the template so that we can see it,

05:41.630 --> 05:48.360
maybe a h2 tag, the posts create component and now what?

05:48.420 --> 05:51.830
Now we could use it, we could go to the app component.html

05:51.900 --> 05:52.750
file

05:52.770 --> 05:59.310
because remember all components other than the app component are added to other angular components, not

05:59.340 --> 06:03.410
the index.html file and in the app component html file,

06:03.450 --> 06:06.720
we could add app post create like that.

06:06.720 --> 06:10.900
This is now our own html tag, our own component being used.

06:10.980 --> 06:13.620
You see my IDE already isn't liking this

06:13.980 --> 06:19.000
and if we save that and we go back to the application, we see a blank screen.

06:19.020 --> 06:25.310
If we now open the developer tools here in the browser, we see that we got an error message that app

06:25.340 --> 06:31.950
post create is not a known element and the reason for that is that it isn't a known element, angular has

06:31.950 --> 06:39.180
no way of knowing this because by default, angular and also not the build process, it doesn't scan all

06:39.180 --> 06:45.910
files in our app folder and try to evaluate if it should be aware of that, if that is a component.

06:46.230 --> 06:52.230
Instead we explicitly have to register a component if we want to use it and we do that in an angular

06:52.230 --> 06:53.140
module, in

06:53.180 --> 06:59.050
the only module we get thus far in the app module. There we added two declarations

06:59.050 --> 07:01.420
and for that we first of all need to import it.

07:01.440 --> 07:03.040
That's a typescript requirement,

07:03.120 --> 07:08.840
if you use something in another file, you need to tell typescript where the code behind it can be found.

07:08.880 --> 07:15.840
So we want to import something from posts/post-create/post-create.component and you omit

07:15.920 --> 07:19.550
the extension, so you don't add .ts here.

07:19.740 --> 07:26.340
Now the something we want to import is the post create component class, so a reference to that class to

07:26.340 --> 07:27.300
be precise and

07:27.590 --> 07:33.870
we store that in the declarations array here so that now angular is aware of this and that is all we

07:33.870 --> 07:34.730
need to do.

07:34.770 --> 07:41.880
Now if we save that, you see the post create component here and the errors in the IDE will also go away as

07:41.880 --> 07:46.810
soon as you change something in the respective files and then save again.

07:46.810 --> 07:48.960
So now we get our first component added,

07:48.970 --> 07:50.440
that's nice,

07:50.470 --> 07:52.030
it's not that useful though,

07:52.150 --> 07:58.480
would be nice if we could use that component to really, well create new posts. So let's do that in the

07:58.480 --> 07:59.390
next lecture.
