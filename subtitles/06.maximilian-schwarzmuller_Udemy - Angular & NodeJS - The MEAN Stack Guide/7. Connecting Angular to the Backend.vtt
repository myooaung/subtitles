WEBVTT

00:02.520 --> 00:05.620
So we get the sign-up logic added on the back-end,

00:05.730 --> 00:10.180
let's go back to the front-end an add it there too. For that,

00:10.200 --> 00:16.170
I'll go to my sign-up component and by the way, these errors here seem just to be a bug of the Angular's CLI, it's

00:16.170 --> 00:18.190
a display bug, nothing's wrong.

00:18.390 --> 00:21.510
So let's go back to the sign-up component and in on sign-up,

00:21.510 --> 00:27.460
I now want to send a request to the back-end to create a new user. Now that screams for a new service,

00:27.480 --> 00:36.740
so directly in the auth folder, I'll add my auth.service.ts file and there, I'll export a class, AuthService

00:37.680 --> 00:46.610
and I will add @injectable here, which I have to import from the Angular package,

00:46.620 --> 00:56.340
so import injectable from @angular/core like this and I will then add curly braces here

00:57.040 --> 01:02.290
and just as in my posts service, I will set providedIn to root,

01:02.350 --> 01:05.620
so I'll just copy that line and add it here.

01:05.620 --> 01:10.840
Now in the AuthService, I want to do a couple of things but I want to start simple and simply send the

01:10.840 --> 01:13.300
request to create a new user.

01:13.300 --> 01:16.900
So here I will call or I will add a new method,

01:16.920 --> 01:27.600
createUser and this method will accept an e-mail which is a string and a password which is a string

01:27.640 --> 01:30.590
and here, I then want to send a HTTP request.

01:30.610 --> 01:36.700
Now you'll know what this means, we need to inject something, so I will add a constructor and the something I want

01:36.700 --> 01:39.190
to inject is my HTTP client,

01:39.370 --> 01:43.140
so I'll bind it to a private property, HTTP client

01:43.180 --> 01:49.720
and again, just like in the post service where I also did this, I need to import that from @angular/common/http

01:49.730 --> 01:50.700
.

01:50.860 --> 01:58.180
So we can also copy that link here, that import, add it at the top too, import the HTTP client and then use it

01:59.300 --> 02:02.170
and that should be @angular/core.

02:02.300 --> 02:08.010
So now we get the HTTP client successfully injected and imported, now here in create user,

02:08.180 --> 02:09.580
we want to send the request.

02:09.710 --> 02:16.160
So we will use the client to send a post request because what we created here on the back-end accepts

02:16.310 --> 02:17.990
post requests here

02:18.560 --> 02:28.390
and that request should go to our local domain /api/user and then /signup.

02:28.410 --> 02:37.860
So back in the auth service, post is going to our URL here, http://www.localhost:3000/api

02:37.920 --> 02:41.340
so let's just copy that and then /user/signup.

02:41.340 --> 02:43.590
Now for signing up,

02:43.590 --> 02:49.090
I of course also need to append some data to that request and for that, I'll actually create a new model,

02:49.140 --> 02:56.970
my auth-data.model. There I will export an interface to define how my authentication data should look like

02:57.210 --> 03:03.390
and I'll name it AuthData and my AuthData will be an e-mail which is a string and a password which is

03:03.390 --> 03:04.470
a string.

03:04.470 --> 03:09.930
Now we could also create a user model here but a user actually should not all the time have the password

03:09.930 --> 03:11.510
attached to it on the front-end,

03:11.520 --> 03:15.170
I don't want to store the password on the front-end anywhere for too long,

03:15.450 --> 03:19.880
therefore I will use that AuthData for submitting the data to the back-end

03:19.980 --> 03:24.550
and if we later need a user which we do, then I will add a separate model.

03:24.840 --> 03:31.980
So for the AuthService, I can now create a new object based on that AuthData model. So I'll create a new

03:31.980 --> 03:36.240
constant, authData which will be of type AuthData

03:36.300 --> 03:43.800
and of course that means I need to import that type, that interface in the same folder from AuthData

03:44.010 --> 03:44.730
model,

03:44.730 --> 03:46.560
that's the file name.

03:46.560 --> 03:52.110
Now that I have that imported, I can create a new object and that object needs to have an e-mail which

03:52.110 --> 03:55.530
is the e-mail I'm getting as an argument and it needs to have a password

03:55.590 --> 03:58.210
which of course is the password I'm getting as an argument,

03:58.230 --> 03:59.900
simple as that.

03:59.910 --> 04:03.270
Now it's that authData which I append to the request

04:03.870 --> 04:06.090
and now we can subscribe to it.

04:06.240 --> 04:12.450
We'll get back to the result or the response and for now, let's simply log it so that we can have

04:12.450 --> 04:16.440
a look inside of it so that we can see what we're getting back.

04:16.530 --> 04:17.580
That was a lot of work,

04:17.640 --> 04:22.320
now the last thing is of course to connect that auth service to our sign-up component.

04:22.410 --> 04:27.800
We're already providing it on a root level, so all that's left to be done is we need to inject that here.

04:28.050 --> 04:30.630
So let's add a constructor to the sign-up component,

04:30.810 --> 04:41.060
bind it to a public property, auth service of type auth service which needs to be imported from your auth

04:41.060 --> 04:47.110
service file, so make sure to add this import at the top and then here in on sign-up,

04:47.270 --> 04:48.390
I will actually,

04:48.440 --> 04:50.010
well send that request.

04:50.060 --> 04:56.630
First of all I want to make sure that we got an e-mail and a password, so we'll check whether form is invalid

04:56.900 --> 05:00.900
in which case I will just return here

05:01.160 --> 05:03.400
but otherwise if it's not invalid,

05:03.620 --> 05:10.670
well then I will simply run this auth service createUser and send form

05:10.670 --> 05:18.070
value e-mail as an e-mail value and form value password, well as the password

05:18.080 --> 05:24.470
and with that all saved, let's go back. Now submitting the empty form doesn't work and let's enter some

05:24.470 --> 05:33.450
data here like test2@test.com with a password of your choice and get back a result here which

05:33.450 --> 05:34.980
looks good. In that result,

05:34.980 --> 05:36.760
we also see the hashed password,

05:36.790 --> 05:37.920
now we'll strip that out to

05:37.950 --> 05:40.730
not always return it but for now, it's fine.

05:40.770 --> 05:45.960
We see the e-mail which was saved and that the user received an ID, now if I tried to send that request

05:45.960 --> 05:46.620
again,

05:46.650 --> 05:49.570
keep in mind the e-mail address is now already taken,

05:49.590 --> 05:56.300
I get an error correctly and there, we get an error with an error object,

05:56.340 --> 06:02.490
that's our response and there with a message, user validation failed, e-mail error, expected e-mail to

06:02.490 --> 06:03.000
be unique.

06:03.090 --> 06:10.280
So we get an error here which indicates, well that it went wrong and that of course is what we want

06:10.470 --> 06:16.100
because this prevents us from accidentally saving the same user twice.

06:16.200 --> 06:20.450
So now we've got a way of creating new users,

06:20.670 --> 06:27.420
the next step of course is to take advantage of this and being able to log users in and then also kind

06:27.420 --> 06:34.230
of take that knowledge that they are logged in and enable them to create posts and on the other hand,

06:34.230 --> 06:36.300
we want to make sure they can't if they're not.
