WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] The feign project takes a different approach

2
00:00:03.000 --> 00:00:04.006
to making API calls.

3
00:00:04.006 --> 00:00:06.002
That makes it much easier.

4
00:00:06.002 --> 00:00:09.007
Instead of building API requests with the builder,

5
00:00:09.007 --> 00:00:12.009
open feign allows us to build interfaces

6
00:00:12.009 --> 00:00:15.005
that define the API call.

7
00:00:15.005 --> 00:00:16.007
Let me show you what I mean.

8
00:00:16.007 --> 00:00:18.008
I think you're really going to like this.

9
00:00:18.008 --> 00:00:23.000
So to get started, we need to add two dependencies

10
00:00:23.000 --> 00:00:25.004
to our Palm dot XML file.

11
00:00:25.004 --> 00:00:28.005
So here you'll see that I've added feign core

12
00:00:28.005 --> 00:00:30.007
and feign Jackson.

13
00:00:30.007 --> 00:00:33.003
With those dependencies in place,

14
00:00:33.003 --> 00:00:36.006
we can start out by creating a new interface

15
00:00:36.006 --> 00:00:42.000
within our calm dot LinkedIn dot API dot Twilio package.

16
00:00:42.000 --> 00:00:46.006
So I'll open the dialogue and just build an interface

17
00:00:46.006 --> 00:00:51.002
and I'm going to name it Azure sentiments clients.

18
00:00:51.002 --> 00:00:55.000
So you might be asking why are we working with Azure?

19
00:00:55.000 --> 00:00:56.005
Well, I wanted to make sure

20
00:00:56.005 --> 00:01:00.008
that you got the experience working with feign and Jason.

21
00:01:00.008 --> 00:01:04.009
And since Twilio's API isn't using Jason,

22
00:01:04.009 --> 00:01:06.002
we're going to circle back

23
00:01:06.002 --> 00:01:08.008
and recreate one of our Azure calls

24
00:01:08.008 --> 00:01:11.009
to the text analytics API.

25
00:01:11.009 --> 00:01:14.005
So once you have the name in place for the interface,

26
00:01:14.005 --> 00:01:19.005
go ahead and hit finish, and the interface will be created.

27
00:01:19.005 --> 00:01:21.003
Now, the first thing that we need to do

28
00:01:21.003 --> 00:01:25.001
is create a new method on this interface

29
00:01:25.001 --> 00:01:26.009
and it's going to return a type

30
00:01:26.009 --> 00:01:29.004
of sentiment analysis response.

31
00:01:29.004 --> 00:01:31.000
Now, this is important.

32
00:01:31.000 --> 00:01:37.004
The return type of the method will determine the type

33
00:01:37.004 --> 00:01:42.006
that feign will de-serialize the response body too.

34
00:01:42.006 --> 00:01:46.002
So if the API returns Jason,

35
00:01:46.002 --> 00:01:49.009
feign will take that Jason and de-serialize it

36
00:01:49.009 --> 00:01:54.003
to an object of type sentiment analysis response.

37
00:01:54.003 --> 00:01:55.006
Now, that's important.

38
00:01:55.006 --> 00:01:57.008
And there are some other things we'll have to talk about

39
00:01:57.008 --> 00:02:00.009
but I'm just going to go ahead and name this method

40
00:02:00.009 --> 00:02:05.004
analyze and not add any parameters yet.

41
00:02:05.004 --> 00:02:07.001
The next thing we're going to do

42
00:02:07.001 --> 00:02:10.007
is add the request line annotation.

43
00:02:10.007 --> 00:02:13.007
So this is an annotation that feign provides

44
00:02:13.007 --> 00:02:19.003
that allows us to describe the HTTP request

45
00:02:19.003 --> 00:02:22.000
that will be used to make the API call.

46
00:02:22.000 --> 00:02:26.007
So here, we're going to say, we'll use an HTTP post

47
00:02:26.007 --> 00:02:31.006
and we're going to perform that post to the text analytics

48
00:02:31.006 --> 00:02:34.009
V3.O sentiment path.

49
00:02:34.009 --> 00:02:37.002
So here we specify the path

50
00:02:37.002 --> 00:02:42.000
to the sentiment service within Azure cognitive services.

51
00:02:42.000 --> 00:02:45.006
Now notice I haven't specified the domain here.

52
00:02:45.006 --> 00:02:48.000
We'll get to that later.

53
00:02:48.000 --> 00:02:51.004
You'll also remember that when we called Azure,

54
00:02:51.004 --> 00:02:54.000
we needed to provide some headers.

55
00:02:54.000 --> 00:02:57.002
So we can use the headers annotation

56
00:02:57.002 --> 00:03:01.001
and it's going to accept an array of strings

57
00:03:01.001 --> 00:03:03.005
that contain our headers.

58
00:03:03.005 --> 00:03:05.006
The first header we'll need to provide

59
00:03:05.006 --> 00:03:08.005
is the content type header

60
00:03:08.005 --> 00:03:13.003
which declares the mime type of our requests body.

61
00:03:13.003 --> 00:03:15.001
So I'll go ahead and add that.

62
00:03:15.001 --> 00:03:18.007
And that's a pretty easy one because it's static.

63
00:03:18.007 --> 00:03:21.008
Sometimes headers will have dynamic data.

64
00:03:21.008 --> 00:03:23.000
You'll remember

65
00:03:23.000 --> 00:03:27.004
that we had to pass our API key over to Azure.

66
00:03:27.004 --> 00:03:32.004
So there's the header name for that API key and this value,

67
00:03:32.004 --> 00:03:34.002
we're not going to make it static.

68
00:03:34.002 --> 00:03:38.001
It's going to be dynamic and to help us with that,

69
00:03:38.001 --> 00:03:42.004
we can use a template within this header.

70
00:03:42.004 --> 00:03:43.009
So to create the template,

71
00:03:43.009 --> 00:03:49.005
I just put the template name within curly braces.

72
00:03:49.005 --> 00:03:53.003
And then what we can do is in the signature of the method,

73
00:03:53.003 --> 00:03:56.005
we can declare a parameter of type string.

74
00:03:56.005 --> 00:03:58.009
I'm going to name it API key.

75
00:03:58.009 --> 00:04:02.007
And then we apply the Param annotation

76
00:04:02.007 --> 00:04:06.005
and we provide the name of the template

77
00:04:06.005 --> 00:04:08.000
that it should be used for.

78
00:04:08.000 --> 00:04:12.000
So essentially, when we call this analyze method,

79
00:04:12.000 --> 00:04:14.005
the first argument, the API key,

80
00:04:14.005 --> 00:04:20.002
it's value will be used as the value for this header.

81
00:04:20.002 --> 00:04:23.004
Now, let's talk about one more parameter here.

82
00:04:23.004 --> 00:04:27.008
This is going to be the text analytics request parameter.

83
00:04:27.008 --> 00:04:30.004
I'm just going to name it request.

84
00:04:30.004 --> 00:04:34.003
And this, if you remember, is the type that we use

85
00:04:34.003 --> 00:04:39.001
to pass over the text document and the other information

86
00:04:39.001 --> 00:04:43.000
to Azure cognitive services for analysis.

87
00:04:43.000 --> 00:04:47.000
So it models the Jason that we need to send

88
00:04:47.000 --> 00:04:51.007
in the request body to the text analytics API.

89
00:04:51.007 --> 00:04:56.001
And what feign will do with this is it will take this object

90
00:04:56.001 --> 00:04:58.009
and it will serialize it to Jason

91
00:04:58.009 --> 00:05:03.000
and then pass it in the request body over to Azure.

92
00:05:03.000 --> 00:05:05.006
So you can see that using feign,

93
00:05:05.006 --> 00:05:08.004
we can define all the different parts

94
00:05:08.004 --> 00:05:14.000
of an API call or an HTTP request using either annotations

95
00:05:14.000 --> 00:05:18.004
or information provided in the method signature.

96
00:05:18.004 --> 00:05:20.006
Okay. With that part complete,

97
00:05:20.006 --> 00:05:22.008
we can head over to our unit test

98
00:05:22.008 --> 00:05:25.003
where we're going to use our new client.

99
00:05:25.003 --> 00:05:27.005
Let me point out a couple of things here.

100
00:05:27.005 --> 00:05:30.005
We are injecting the API key for Azure.

101
00:05:30.005 --> 00:05:33.002
So make sure you have your environment variable stood up.

102
00:05:33.002 --> 00:05:37.005
And then also, we need to have a constant

103
00:05:37.005 --> 00:05:42.006
that specifies the endpoint to your specific resource

104
00:05:42.006 --> 00:05:43.005
in Azure.

105
00:05:43.005 --> 00:05:46.001
Yours could look different than mine.

106
00:05:46.001 --> 00:05:48.001
All right. So inside of this test,

107
00:05:48.001 --> 00:05:50.003
I've already created the text document

108
00:05:50.003 --> 00:05:52.007
and the text analytics request.

109
00:05:52.007 --> 00:05:54.003
You know, I've added the content here

110
00:05:54.003 --> 00:05:57.002
that we want to analyze for sentiment.

111
00:05:57.002 --> 00:05:59.006
And then I've added assertions too,

112
00:05:59.006 --> 00:06:02.009
to make sure everything is going to pass.

113
00:06:02.009 --> 00:06:05.003
The content should be positive

114
00:06:05.003 --> 00:06:08.001
and we do check that in line 36.

115
00:06:08.001 --> 00:06:10.007
So we're just going to fill in the gaps here

116
00:06:10.007 --> 00:06:14.000
by first creating a client.

117
00:06:14.000 --> 00:06:16.001
So we have our Azure sediment client.

118
00:06:16.001 --> 00:06:18.009
This is the interface we just worked on.

119
00:06:18.009 --> 00:06:20.009
To create an instance of it,

120
00:06:20.009 --> 00:06:25.006
we use the feign class and on that class, we find a builder.

121
00:06:25.006 --> 00:06:29.001
Now, the first thing we'll need to specify is a decoder.

122
00:06:29.001 --> 00:06:34.005
And we can use an object of type JacksonDecoder.

123
00:06:34.005 --> 00:06:38.000
The decoder is going to be responsible

124
00:06:38.000 --> 00:06:40.006
for taking the response body

125
00:06:40.006 --> 00:06:45.003
from the API and de-serializing it.

126
00:06:45.003 --> 00:06:50.002
And we can do that with Jackson since we're using Jason.

127
00:06:50.002 --> 00:06:53.007
Now, the other thing we need to specify is an encoder

128
00:06:53.007 --> 00:06:55.004
and this is kind of the reverse.

129
00:06:55.004 --> 00:06:59.001
However, we can still use Jackson here.

130
00:06:59.001 --> 00:07:01.008
The Jackson encoder will be responsible

131
00:07:01.008 --> 00:07:06.002
for serializing any objects and placing that content

132
00:07:06.002 --> 00:07:10.005
into the request body that we're sending to the API.

133
00:07:10.005 --> 00:07:13.001
So you can see how we handle serialization

134
00:07:13.001 --> 00:07:15.004
and de-serialization there.

135
00:07:15.004 --> 00:07:17.004
Now, the final thing is pretty important.

136
00:07:17.004 --> 00:07:20.004
We need to call the target method.

137
00:07:20.004 --> 00:07:21.009
And in this method,

138
00:07:21.009 --> 00:07:25.008
the first thing that we supply is the class of the client

139
00:07:25.008 --> 00:07:27.006
that we would like to create.

140
00:07:27.006 --> 00:07:30.009
So this is the interface that we just worked on.

141
00:07:30.009 --> 00:07:32.005
So we provide that class.

142
00:07:32.005 --> 00:07:35.008
And then the next thing we need to provide as an argument

143
00:07:35.008 --> 00:07:38.004
is the domain of the API.

144
00:07:38.004 --> 00:07:42.002
So I'm going to pass in the end point

145
00:07:42.002 --> 00:07:45.005
to my specific resource in Azure.

146
00:07:45.005 --> 00:07:46.004
Okay.

147
00:07:46.004 --> 00:07:47.006
Now let's go ahead

148
00:07:47.006 --> 00:07:50.006
and we're going to use our client to make the call.

149
00:07:50.006 --> 00:07:52.002
And this is the beautiful part.

150
00:07:52.002 --> 00:07:54.003
We just call the method.

151
00:07:54.003 --> 00:07:57.003
So you'll notice we pass in our API key

152
00:07:57.003 --> 00:08:02.002
that will be provided as the template in our header.

153
00:08:02.002 --> 00:08:07.004
Then we pass in our text analytics request object

154
00:08:07.004 --> 00:08:09.000
that will be serialized

155
00:08:09.000 --> 00:08:11.002
and sent in the request body.

156
00:08:11.002 --> 00:08:14.004
And then you can see that we get a response back

157
00:08:14.004 --> 00:08:17.002
of type sentiment analysis response

158
00:08:17.002 --> 00:08:20.004
and that's going to be the de-serialized Jason

159
00:08:20.004 --> 00:08:22.000
that the API sent.

160
00:08:22.000 --> 00:08:23.009
So everything's in place here.

161
00:08:23.009 --> 00:08:24.007
Let's go ahead,

162
00:08:24.007 --> 00:08:27.003
we'll save this, go to run as

163
00:08:27.003 --> 00:08:31.008
and then J unit test and we can see this in action.

164
00:08:31.008 --> 00:08:36.003
Okay. So our tests pass and that's good.

165
00:08:36.003 --> 00:08:38.006
You can really see through this example

166
00:08:38.006 --> 00:08:41.001
just the benefits of working with feign.

167
00:08:41.001 --> 00:08:42.007
If you're familiar with spring data,

168
00:08:42.007 --> 00:08:46.000
you might recognize this approach because it's very similar

169
00:08:46.000 --> 00:08:48.009
to how we work with repositories.

170
00:08:48.009 --> 00:08:52.006
Using the interface and annotation based approach

171
00:08:52.006 --> 00:08:54.002
that feign provides,

172
00:08:54.002 --> 00:08:59.000
it's much easier for us as a Java developer to call an API.

