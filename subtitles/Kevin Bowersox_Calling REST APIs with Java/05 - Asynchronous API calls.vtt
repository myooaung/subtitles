WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] In our previous examples,

2
00:00:02.001 --> 00:00:06.000
the requests that we sent to Azure Cognitive Services

3
00:00:06.000 --> 00:00:08.001
were sent synchronously.

4
00:00:08.001 --> 00:00:10.009
That means that the API call

5
00:00:10.009 --> 00:00:14.004
blocked the execution of our code.

6
00:00:14.004 --> 00:00:17.001
So here in line 69,

7
00:00:17.001 --> 00:00:22.001
once we sent the request over to the text analytics API,

8
00:00:22.001 --> 00:00:24.008
our code did not continue execution,

9
00:00:24.008 --> 00:00:27.006
it sat here and waited for that response

10
00:00:27.006 --> 00:00:30.003
to come back from the API.

11
00:00:30.003 --> 00:00:34.004
Now, we have other options in how we make this call.

12
00:00:34.004 --> 00:00:37.004
We can make the call asynchronous

13
00:00:37.004 --> 00:00:40.001
and when we make an asynchronous call,

14
00:00:40.001 --> 00:00:44.000
it's going to allow our code to continue executing

15
00:00:44.000 --> 00:00:48.000
while we wait on the response from the API

16
00:00:48.000 --> 00:00:53.000
and we can do this with the new Java 11 HTTP client.

17
00:00:53.000 --> 00:00:55.004
Let's take a look at this in action.

18
00:00:55.004 --> 00:00:57.007
So the first thing that we'll need to do

19
00:00:57.007 --> 00:01:03.001
is change from using the send method on the HTTP client

20
00:01:03.001 --> 00:01:06.005
to using the sendAsync method,

21
00:01:06.005 --> 00:01:08.005
and the mechanics of this method work

22
00:01:08.005 --> 00:01:10.004
a little bit differently.

23
00:01:10.004 --> 00:01:15.001
We're no longer going to return the HttpResponse,

24
00:01:15.001 --> 00:01:19.000
so I'm going to go ahead and remove that,

25
00:01:19.000 --> 00:01:21.005
and the sendAsync method

26
00:01:21.005 --> 00:01:25.000
actually returns a completable future,

27
00:01:25.000 --> 00:01:29.004
so this allows us to handle the response

28
00:01:29.004 --> 00:01:31.008
from the API when it's received,

29
00:01:31.008 --> 00:01:34.006
similar to working with a callback.

30
00:01:34.006 --> 00:01:37.008
So we can specify these different stages

31
00:01:37.008 --> 00:01:40.003
when we work with that response.

32
00:01:40.003 --> 00:01:45.001
So to do that, you can use the thenApply method,

33
00:01:45.001 --> 00:01:47.009
and this is going to allow us

34
00:01:47.009 --> 00:01:52.001
to extract a value from the response.

35
00:01:52.001 --> 00:01:56.009
I'm going to go ahead and pull out the body of the response,

36
00:01:56.009 --> 00:01:59.002
so this is going to be a string,

37
00:01:59.002 --> 00:02:02.008
and then that value is just going to get passed

38
00:02:02.008 --> 00:02:05.006
to our final completion stage,

39
00:02:05.006 --> 00:02:10.000
which we can specify using the thenAccept method,

40
00:02:10.000 --> 00:02:12.006
and this is also going to require us to

41
00:02:12.006 --> 00:02:14.006
provide a Lambda function,

42
00:02:14.006 --> 00:02:17.008
that Lambda function is going to receive

43
00:02:17.008 --> 00:02:20.009
the response body as an argument,

44
00:02:20.009 --> 00:02:23.005
and then I'm going to go ahead and set up a block

45
00:02:23.005 --> 00:02:26.005
where we're going to put some logic.

46
00:02:26.005 --> 00:02:29.007
Okay, so let's talk about this a little bit.

47
00:02:29.007 --> 00:02:31.005
Within this block,

48
00:02:31.005 --> 00:02:36.005
we're going to create an object of type JsonNode,

49
00:02:36.005 --> 00:02:38.002
and this is an object that makes it

50
00:02:38.002 --> 00:02:43.004
a little bit easier to work with Json as an object.

51
00:02:43.004 --> 00:02:47.003
We're going to use the ObjectMapper from Jackson

52
00:02:47.003 --> 00:02:50.009
in order to read the body string,

53
00:02:50.009 --> 00:02:54.000
you'll remember, that contains the Json

54
00:02:54.000 --> 00:02:56.006
that was found in the response body,

55
00:02:56.006 --> 00:02:58.009
and then we're going to map this

56
00:02:58.009 --> 00:03:02.003
to an object of type JsonNode,

57
00:03:02.003 --> 00:03:05.000
so we'll specify that class.

58
00:03:05.000 --> 00:03:07.000
Okay, so we have our Json node,

59
00:03:07.000 --> 00:03:08.004
let's go ahead,

60
00:03:08.004 --> 00:03:10.008
we'll import those types,

61
00:03:10.008 --> 00:03:15.005
and now I'm going to extract the first key phrase

62
00:03:15.005 --> 00:03:17.001
from the Json.

63
00:03:17.001 --> 00:03:18.006
So to do that,

64
00:03:18.006 --> 00:03:22.009
the first thing we'll do is get the documents property,

65
00:03:22.009 --> 00:03:25.008
and you see we just provide the key,

66
00:03:25.008 --> 00:03:29.007
then we're going to get the first item

67
00:03:29.007 --> 00:03:32.002
in the documents array,

68
00:03:32.002 --> 00:03:36.009
then we're going to get the keyPhrases property,

69
00:03:36.009 --> 00:03:38.004
that's also an array,

70
00:03:38.004 --> 00:03:41.002
so we're going to get the first key phrase

71
00:03:41.002 --> 00:03:43.002
within that array,

72
00:03:43.002 --> 00:03:45.009
and then I'm going to turn it to a string.

73
00:03:45.009 --> 00:03:48.009
Okays so we got the first key phrase,

74
00:03:48.009 --> 00:03:51.006
let's go ahead and print that out to the console.

75
00:03:51.006 --> 00:03:57.002
We'll say the first key phrase is,

76
00:03:57.002 --> 00:04:02.008
and then we'll concatenate our key phrase there.

77
00:04:02.008 --> 00:04:08.000
And now what going to do is add some additional output

78
00:04:08.000 --> 00:04:10.004
outside of our call,

79
00:04:10.004 --> 00:04:11.006
and I'm going to do this

80
00:04:11.006 --> 00:04:14.009
to illustrate the asynchronous nature of the call.

81
00:04:14.009 --> 00:04:18.004
So I'm just going to put some console output,

82
00:04:18.004 --> 00:04:21.003
I'm just going to say, this will be called first

83
00:04:21.003 --> 00:04:26.008
because our call is async.

84
00:04:26.008 --> 00:04:30.001
Okay, and the other I'm going to have to do

85
00:04:30.001 --> 00:04:34.004
is sleep the thread for roughly 5,000 seconds,

86
00:04:34.004 --> 00:04:37.003
and that's because I don't want our unit tests

87
00:04:37.003 --> 00:04:43.000
to complete prior to the response being returned by the API.

88
00:04:43.000 --> 00:04:45.000
Okay, one last thing to do,

89
00:04:45.000 --> 00:04:47.004
we have to handle some exceptions.

90
00:04:47.004 --> 00:04:53.007
I'm going to go ahead and put a try catch block in there,

91
00:04:53.007 --> 00:04:57.006
and then we'll surround our code with that block.

92
00:04:57.006 --> 00:05:00.004
Okay, so we're set up the test this,

93
00:05:00.004 --> 00:05:03.004
but let's talk through what's going to happen.

94
00:05:03.004 --> 00:05:07.003
When we hit line 70, we're going to send a request

95
00:05:07.003 --> 00:05:12.006
to the text analytics API in Azure Cognitive Services.

96
00:05:12.006 --> 00:05:16.002
Now, our code is going to continue to execute,

97
00:05:16.002 --> 00:05:21.001
so actually line 95 will print to the console.

98
00:05:21.001 --> 00:05:25.000
At sometime after we execute line 95,

99
00:05:25.000 --> 00:05:29.006
the text analytics API is going to return a response.

100
00:05:29.006 --> 00:05:31.008
We're going to take that response,

101
00:05:31.008 --> 00:05:36.004
extract the response body, which is a string,

102
00:05:36.004 --> 00:05:40.007
and then we'll pass that to the thenAccept method

103
00:05:40.007 --> 00:05:43.006
where we handle that Json string

104
00:05:43.006 --> 00:05:47.002
by converting it to a JsonNode,

105
00:05:47.002 --> 00:05:50.007
and then we extract a key phrase and print it,

106
00:05:50.007 --> 00:05:52.003
and the key point here

107
00:05:52.003 --> 00:05:57.003
is that line 85 will print after line 95.

108
00:05:57.003 --> 00:05:59.009
All right, let's go ahead, we'll save this

109
00:05:59.009 --> 00:06:07.004
and take a look at it in action.

110
00:06:07.004 --> 00:06:11.000
Okay, so you can see this will be called first

111
00:06:11.000 --> 00:06:13.001
because our call is async,

112
00:06:13.001 --> 00:06:16.000
that was the line we expected first,

113
00:06:16.000 --> 00:06:19.007
and then we got the first key phrase.

114
00:06:19.007 --> 00:06:21.009
So in this lesson, we took a look

115
00:06:21.009 --> 00:06:26.006
at a different type of API call, an asynchronous call.

116
00:06:26.006 --> 00:06:28.009
This is different from a synchronous call

117
00:06:28.009 --> 00:06:30.008
that's going to block.

118
00:06:30.008 --> 00:06:33.000
It can be used in situations

119
00:06:33.000 --> 00:06:37.004
where you do not need the response from the API immediately

120
00:06:37.004 --> 00:06:40.006
to continue your processing.

121
00:06:40.006 --> 00:06:42.000
In those situations,

122
00:06:42.000 --> 00:06:45.007
it can be much more efficient to use an async call,

123
00:06:45.007 --> 00:06:48.002
but make sure you do some deliberation

124
00:06:48.002 --> 00:06:50.000
before selecting one or the other.

