WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] Version two of the Twitter API

2
00:00:02.005 --> 00:00:06.003
includes a filtered stream endpoint that pushes tweets

3
00:00:06.003 --> 00:00:11.000
with certain content to a developer's client application.

4
00:00:11.000 --> 00:00:13.000
Interaction with the streaming endpoint

5
00:00:13.000 --> 00:00:16.003
is slightly different than your typical synchronous call.

6
00:00:16.003 --> 00:00:18.000
So let's take a high level look

7
00:00:18.000 --> 00:00:20.008
at how the integration occurs.

8
00:00:20.008 --> 00:00:23.007
The interaction starts by the client registering

9
00:00:23.007 --> 00:00:27.000
up to 25 filters that specify queries

10
00:00:27.000 --> 00:00:30.000
that will be used to match tweets.

11
00:00:30.000 --> 00:00:33.002
These filters are established by sending a post

12
00:00:33.002 --> 00:00:36.008
to the rules endpoint on the Twitter API.

13
00:00:36.008 --> 00:00:39.008
The rules are specified in the JSON requests body

14
00:00:39.008 --> 00:00:42.000
and can be as simple as a key word

15
00:00:42.000 --> 00:00:44.008
or can use a complex set of operators

16
00:00:44.008 --> 00:00:47.004
found in the documentation.

17
00:00:47.004 --> 00:00:51.002
In addition to creating new filters, the API also allows us

18
00:00:51.002 --> 00:00:54.008
to delete filters we're no longer using.

19
00:00:54.008 --> 00:00:57.007
After a client registers their filters,

20
00:00:57.007 --> 00:01:02.008
they make a connection to the API's stream endpoint.

21
00:01:02.008 --> 00:01:05.001
Now, when a user makes a tweet,

22
00:01:05.001 --> 00:01:08.007
Twitter determines if the tweet matches the client's rule.

23
00:01:08.007 --> 00:01:11.008
And, if it does, it's passed on to the client

24
00:01:11.008 --> 00:01:13.006
via their stream.

25
00:01:13.006 --> 00:01:16.007
If the rule doesn't match, it's not passed.

26
00:01:16.007 --> 00:01:19.001
This will continue until the connection

27
00:01:19.001 --> 00:01:22.002
between the API and the client is severed.

28
00:01:22.002 --> 00:01:24.005
Until that point, the client will receive

29
00:01:24.005 --> 00:01:27.000
a stream of tweets from the platform

30
00:01:27.000 --> 00:01:30.008
with content that matches their registered rules.

31
00:01:30.008 --> 00:01:32.006
In our next lesson, we're going to see

32
00:01:32.006 --> 00:01:35.009
how Spring's web client can be used to interact

33
00:01:35.009 --> 00:01:39.000
with the Twitter API's streaming endpoint.

