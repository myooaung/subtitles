WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Narrator] When making an API call,

2
00:00:02.004 --> 00:00:04.004
REST is something you should be aware of

3
00:00:04.004 --> 00:00:06.005
regardless of the language you're using

4
00:00:06.005 --> 00:00:09.001
or what API you're calling.

5
00:00:09.001 --> 00:00:11.004
The whole point of REST is to describe

6
00:00:11.004 --> 00:00:14.004
an informal set of rules that influence

7
00:00:14.004 --> 00:00:17.006
how resources are exposed over the web

8
00:00:17.006 --> 00:00:20.004
and how clients access them.

9
00:00:20.004 --> 00:00:24.007
These guidelines, which are loosely followed in API design,

10
00:00:24.007 --> 00:00:28.003
center around the concept of a resource.

11
00:00:28.003 --> 00:00:31.006
A resource is any object or concept

12
00:00:31.006 --> 00:00:34.004
a client might be interested in working with,

13
00:00:34.004 --> 00:00:37.004
so it's a little bit abstract.

14
00:00:37.004 --> 00:00:39.001
When working with resources,

15
00:00:39.001 --> 00:00:42.002
you'll encounter them organized individually,

16
00:00:42.002 --> 00:00:46.003
in a collection, or nested within other resources

17
00:00:46.003 --> 00:00:48.006
as a sub collection.

18
00:00:48.006 --> 00:00:51.009
How resources are organized is important

19
00:00:51.009 --> 00:00:54.009
because it influences an API design

20
00:00:54.009 --> 00:01:00.001
and, ultimately, how your client will call that API.

21
00:01:00.001 --> 00:01:02.008
Roy Fielding, the creator of REST,

22
00:01:02.008 --> 00:01:06.004
described its key principles in a dissertation.

23
00:01:06.004 --> 00:01:09.000
Those principles have guided the design

24
00:01:09.000 --> 00:01:10.009
of many popular APIs,

25
00:01:10.009 --> 00:01:13.007
like those we'll be working with.

26
00:01:13.007 --> 00:01:15.008
I won't cover each of these in detail,

27
00:01:15.008 --> 00:01:20.002
but we will dive deeper on the uniform interface principle.

28
00:01:20.002 --> 00:01:23.006
The uniform interface principle has a big impact

29
00:01:23.006 --> 00:01:27.000
on how clients call an API.

30
00:01:27.000 --> 00:01:31.001
It specifies that REST APIs will use an identifier

31
00:01:31.001 --> 00:01:33.007
to locate each resource.

32
00:01:33.007 --> 00:01:36.001
So when calling a REST API,

33
00:01:36.001 --> 00:01:38.008
clients must use a URI to identify

34
00:01:38.008 --> 00:01:42.005
the exact resource they're going to interact with.

35
00:01:42.005 --> 00:01:46.006
REST APIs use collections and resource IDs

36
00:01:46.006 --> 00:01:50.004
to structure the format of the URI path.

37
00:01:50.004 --> 00:01:52.009
This strategy requires the path

38
00:01:52.009 --> 00:01:55.004
to include variable segments

39
00:01:55.004 --> 00:01:59.007
where the specific resource ID is provided.

40
00:01:59.007 --> 00:02:04.001
Another important concept is resource representations.

41
00:02:04.001 --> 00:02:05.008
A resource can be thought of

42
00:02:05.008 --> 00:02:09.001
as a variation of some stored entity.

43
00:02:09.001 --> 00:02:13.004
So for example, a record storing information about a pet.

44
00:02:13.004 --> 00:02:17.006
The resource depicts that entity's data elements,

45
00:02:17.006 --> 00:02:22.007
but it doesn't need to be exactly the same as the entity.

46
00:02:22.007 --> 00:02:28.001
The resource is then interacted with using a representation.

47
00:02:28.001 --> 00:02:31.001
The representation depicts the resource

48
00:02:31.001 --> 00:02:35.004
in a specific format, like JSON or XML.

49
00:02:35.004 --> 00:02:38.001
When performing actions on a REST API,

50
00:02:38.001 --> 00:02:41.000
like creating or retrieving a resource,

51
00:02:41.000 --> 00:02:43.005
clients work with representations

52
00:02:43.005 --> 00:02:48.002
instead of directly handling the resource itself.

53
00:02:48.002 --> 00:02:50.008
REST also stipulates that messages

54
00:02:50.008 --> 00:02:53.002
should be self descriptive.

55
00:02:53.002 --> 00:02:55.005
This means if you receive a message,

56
00:02:55.005 --> 00:02:57.006
it will contain all of the information

57
00:02:57.006 --> 00:03:01.001
that you need to process it as a client.

58
00:03:01.001 --> 00:03:05.006
This is what makes REST and HTTP a perfect pair.

59
00:03:05.006 --> 00:03:08.004
When using HTTP messages,

60
00:03:08.004 --> 00:03:11.007
you can use the HTTP method to describe

61
00:03:11.007 --> 00:03:13.004
the type of operation,

62
00:03:13.004 --> 00:03:16.004
the URL to identify the resource,

63
00:03:16.004 --> 00:03:19.004
and headers to indicate additional information,

64
00:03:19.004 --> 00:03:22.007
like media types the client accepts.

65
00:03:22.007 --> 00:03:27.002
In the HTTP response, the REST API is able to communicate

66
00:03:27.002 --> 00:03:31.003
the results of an operation using the status code,

67
00:03:31.003 --> 00:03:34.004
information regarding caching via headers,

68
00:03:34.004 --> 00:03:39.000
and the resource representation in the response body.

69
00:03:39.000 --> 00:03:41.003
When we overlay these principles

70
00:03:41.003 --> 00:03:44.009
on top of an HTTP request and response,

71
00:03:44.009 --> 00:03:47.006
we can see the aspects a REST client

72
00:03:47.006 --> 00:03:49.008
must programmatically handle

73
00:03:49.008 --> 00:03:53.003
when making a call to a REST API.

74
00:03:53.003 --> 00:03:56.007
An HTTP request that targets the operation

75
00:03:56.007 --> 00:03:59.005
to be performed on the API resource

76
00:03:59.005 --> 00:04:03.006
must be constructed with any necessary headers.

77
00:04:03.006 --> 00:04:06.009
If the operation requires a request body,

78
00:04:06.009 --> 00:04:10.003
the representation must be constructed and provided

79
00:04:10.003 --> 00:04:12.006
in the appropriate format.

80
00:04:12.006 --> 00:04:14.008
After the client makes the call,

81
00:04:14.008 --> 00:04:18.000
the status code of the response must be analyzed

82
00:04:18.000 --> 00:04:20.007
to determine if it was successful,

83
00:04:20.007 --> 00:04:23.003
and then any resource representations

84
00:04:23.003 --> 00:04:25.009
that were returned in the response body

85
00:04:25.009 --> 00:04:28.009
must be parsed by the client.

86
00:04:28.009 --> 00:04:32.007
Security is another consideration for API clients

87
00:04:32.007 --> 00:04:36.000
because most APIs protect their resources.

88
00:04:36.000 --> 00:04:38.007
They're only going to allow authorized clients

89
00:04:38.007 --> 00:04:40.006
to access them.

90
00:04:40.006 --> 00:04:43.009
So typically you'll encounter three approaches:

91
00:04:43.009 --> 00:04:48.001
basic auth, API keys, and OAuth 2.

92
00:04:48.001 --> 00:04:50.003
Basic auth is pretty simple.

93
00:04:50.003 --> 00:04:52.006
The user's going to send their credentials

94
00:04:52.006 --> 00:04:54.007
with each request.

95
00:04:54.007 --> 00:04:58.002
An API key provides somewhat better security

96
00:04:58.002 --> 00:05:03.002
because it uses a unique value assigned to the API client.

97
00:05:03.002 --> 00:05:05.006
This value is typically passed

98
00:05:05.006 --> 00:05:09.008
as a header in each HTTP request.

99
00:05:09.008 --> 00:05:13.003
OAuth 2 is the most complex of the three.

100
00:05:13.003 --> 00:05:16.000
It features an entire playbook that defines

101
00:05:16.000 --> 00:05:19.005
how token-based access can be used.

102
00:05:19.005 --> 00:05:21.006
This includes scenarios for things

103
00:05:21.006 --> 00:05:23.009
like machine-to-machine communication

104
00:05:23.009 --> 00:05:27.006
and delegated access scenarios.

105
00:05:27.006 --> 00:05:29.007
When building an API client,

106
00:05:29.007 --> 00:05:32.001
you must prepare the call in the way

107
00:05:32.001 --> 00:05:34.009
that it is understood by the API

108
00:05:34.009 --> 00:05:38.000
in order to perform an operation on it.

109
00:05:38.000 --> 00:05:40.009
The client must also understand the response

110
00:05:40.009 --> 00:05:43.006
that is sent back from the API

111
00:05:43.006 --> 00:05:47.002
in order to use the returned resources.

112
00:05:47.002 --> 00:05:50.008
Understanding core REST principles and security schemes

113
00:05:50.008 --> 00:05:54.005
will allow you to successfully construct REST API calls

114
00:05:54.005 --> 00:05:57.000
and handle their responses.

