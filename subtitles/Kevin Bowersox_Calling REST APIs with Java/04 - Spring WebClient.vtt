WEBVTT
1
00:00:00.005 --> 00:00:03.001
- To start working with Springs web client,

2
00:00:03.001 --> 00:00:05.009
we'll need to update one of the dependencies

3
00:00:05.009 --> 00:00:08.004
within our Palm.XML file.

4
00:00:08.004 --> 00:00:10.003
So here on line 22,

5
00:00:10.003 --> 00:00:13.002
I'm going to switch over to the spring boot starter

6
00:00:13.002 --> 00:00:15.004
web flux artifact.

7
00:00:15.004 --> 00:00:18.008
And this will cause spring to include its support

8
00:00:18.008 --> 00:00:21.006
for reactive web applications.

9
00:00:21.006 --> 00:00:23.002
Now, to work with the web client,

10
00:00:23.002 --> 00:00:27.002
we'll navigate to the Twitter search tests class.

11
00:00:27.002 --> 00:00:31.006
And here we have some unit tests that we can work with.

12
00:00:31.006 --> 00:00:35.001
I do want to point out a few things before we get started.

13
00:00:35.001 --> 00:00:38.004
You'll notice that I've used spring to inject

14
00:00:38.004 --> 00:00:40.004
my Twitter bearer token

15
00:00:40.004 --> 00:00:42.006
from an environment variable named

16
00:00:42.006 --> 00:00:46.002
TWITTER_BEARER_TOKEN.

17
00:00:46.002 --> 00:00:49.008
You need to establish this same environment variable

18
00:00:49.008 --> 00:00:51.006
on your workstation,

19
00:00:51.006 --> 00:00:54.009
and then add your Twitter bearer token

20
00:00:54.009 --> 00:00:57.003
as the value for that variable.

21
00:00:57.003 --> 00:01:02.003
This is exactly what we did with Azure cognitive services.

22
00:01:02.003 --> 00:01:05.001
You'll also notice that I've set up a constant

23
00:01:05.001 --> 00:01:07.007
for the Twitter API domain.

24
00:01:07.007 --> 00:01:12.003
And the path to the tweets search recent endpoint.

25
00:01:12.003 --> 00:01:16.005
So, what we're going to do is rewrite this unit test.

26
00:01:16.005 --> 00:01:19.008
You'll notice it uses the rest template.

27
00:01:19.008 --> 00:01:23.007
And we're going to within the body of the skeleton

28
00:01:23.007 --> 00:01:28.005
rewrite the call to use the web client.

29
00:01:28.005 --> 00:01:32.007
The first thing we'll need to do is create an instance

30
00:01:32.007 --> 00:01:34.007
of a web client.

31
00:01:34.007 --> 00:01:36.004
And to help us with that,

32
00:01:36.004 --> 00:01:42.000
there is the static create method on the web client class.

33
00:01:42.000 --> 00:01:46.008
It just asks that we provide the domain of the API

34
00:01:46.008 --> 00:01:49.002
we're calling.

35
00:01:49.002 --> 00:01:53.000
From there we're going to take a look at an object

36
00:01:53.000 --> 00:01:54.003
known as a Mono.

37
00:01:54.003 --> 00:01:58.007
So this is a type within project reactor.

38
00:01:58.007 --> 00:02:02.003
And project reactor is a special type of async

39
00:02:02.003 --> 00:02:04.007
known as reactive.

40
00:02:04.007 --> 00:02:08.001
That means it's fully non-blocking.

41
00:02:08.001 --> 00:02:11.001
The Monotype within that project

42
00:02:11.001 --> 00:02:15.003
represents a container that is going to publish

43
00:02:15.003 --> 00:02:18.009
or emit a single item in the future.

44
00:02:18.009 --> 00:02:22.007
And when that item's emitted, we can work with it.

45
00:02:22.007 --> 00:02:27.002
So we need to specify a generic type parameter

46
00:02:27.002 --> 00:02:31.006
that indicates what that container's going to hold.

47
00:02:31.006 --> 00:02:35.008
In our case, it's going to be a response entity

48
00:02:35.008 --> 00:02:41.005
that holds a string containing the response from the API.

49
00:02:41.005 --> 00:02:44.003
So we've declared our mono.

50
00:02:44.003 --> 00:02:49.009
Now let's use our client to send a get request.

51
00:02:49.009 --> 00:02:53.004
And we'll need to complete the URI that we would like

52
00:02:53.004 --> 00:02:55.008
to send the get requests to.

53
00:02:55.008 --> 00:02:59.006
So we're going to use the path

54
00:02:59.006 --> 00:03:03.000
to the end point to search for tweets.

55
00:03:03.000 --> 00:03:05.009
And you'll recall that we needed to provide

56
00:03:05.009 --> 00:03:09.008
a query parameter on that URI.

57
00:03:09.008 --> 00:03:11.003
So I'm going to go ahead

58
00:03:11.003 --> 00:03:15.000
and create a query parameter named query.

59
00:03:15.000 --> 00:03:21.006
And then we can use a template to provide that value

60
00:03:21.006 --> 00:03:23.004
for that parameter.

61
00:03:23.004 --> 00:03:27.006
So you'll notice I put the template in curly braces.

62
00:03:27.006 --> 00:03:30.006
And then the second argument to this method

63
00:03:30.006 --> 00:03:32.009
is just whatever we'd like to search for.

64
00:03:32.009 --> 00:03:35.004
I'm going to search for LinkedIn Learning.

65
00:03:35.004 --> 00:03:36.009
And then from here,

66
00:03:36.009 --> 00:03:41.005
we can go ahead and add the security to the call.

67
00:03:41.005 --> 00:03:43.006
So when using OAuth,

68
00:03:43.006 --> 00:03:47.009
you need to specify in authorization header.

69
00:03:47.009 --> 00:03:51.002
And then you include the word bearer

70
00:03:51.002 --> 00:03:53.004
in the value for that header.

71
00:03:53.004 --> 00:03:57.004
And then after bearer, you provide your actual bearer token.

72
00:03:57.004 --> 00:04:01.005
So it's kind of like bearer space, space is important.

73
00:04:01.005 --> 00:04:04.009
Then the value for your token.

74
00:04:04.009 --> 00:04:05.007
Okay.

75
00:04:05.007 --> 00:04:07.005
The next thing we'll do is specify.

76
00:04:07.005 --> 00:04:11.009
We'd like to retrieve the response.

77
00:04:11.009 --> 00:04:15.003
That means we're now handling the response a little bit.

78
00:04:15.003 --> 00:04:18.006
And we'll specify that we want this response

79
00:04:18.006 --> 00:04:23.006
to be an entity that contains a response body

80
00:04:23.006 --> 00:04:25.009
of type string.

81
00:04:25.009 --> 00:04:27.001
Okay.

82
00:04:27.001 --> 00:04:29.007
So we have our mono setup.

83
00:04:29.007 --> 00:04:33.005
And then what we can do with that mono

84
00:04:33.005 --> 00:04:37.008
is pull out the response entity.

85
00:04:37.008 --> 00:04:40.007
And I'm actually going to do this in a blocking

86
00:04:40.007 --> 00:04:43.006
fashion first so you can see that.

87
00:04:43.006 --> 00:04:46.009
If you need to use the web client and a mono

88
00:04:46.009 --> 00:04:48.005
to block,

89
00:04:48.005 --> 00:04:51.003
meaning you have to wait for the response

90
00:04:51.003 --> 00:04:53.008
from the API before proceeding.

91
00:04:53.008 --> 00:04:55.005
You can use the block methods.

92
00:04:55.005 --> 00:04:58.006
So the code will stop execution

93
00:04:58.006 --> 00:05:01.007
and wait for the API response here.

94
00:05:01.007 --> 00:05:03.002
And then what we can do

95
00:05:03.002 --> 00:05:07.005
is once we get the response back from the API,

96
00:05:07.005 --> 00:05:10.005
we can print the body out to the console

97
00:05:10.005 --> 00:05:15.001
and then I'll put an assertion here to make sure

98
00:05:15.001 --> 00:05:20.001
that we get a 200 and it was successful.

99
00:05:20.001 --> 00:05:20.009
Okay.

100
00:05:20.009 --> 00:05:25.008
So, this is a blocking call with spring's web client.

101
00:05:25.008 --> 00:05:26.006
Let's go ahead.

102
00:05:26.006 --> 00:05:31.008
We'll kick it off in the unit test.

103
00:05:31.008 --> 00:05:35.002
There we can see that our unit tests passed.

104
00:05:35.002 --> 00:05:37.006
Let's do one more thing now.

105
00:05:37.006 --> 00:05:40.007
We're going to go ahead and switch this call

106
00:05:40.007 --> 00:05:44.000
over to an asynchronous call.

107
00:05:44.000 --> 00:05:47.003
So, we're no longer going to block.

108
00:05:47.003 --> 00:05:52.000
And instead we're going to subscribe a consumer

109
00:05:52.000 --> 00:05:53.000
to this mono.

110
00:05:53.000 --> 00:05:55.009
So, when the mono gets the response back

111
00:05:55.009 --> 00:05:58.002
and it emits that event,

112
00:05:58.002 --> 00:06:00.001
we can listen to it.

113
00:06:00.001 --> 00:06:04.008
So I'm going to provide a lambda function

114
00:06:04.008 --> 00:06:09.003
that is going to print the response to the console

115
00:06:09.003 --> 00:06:11.005
just like we did before.

116
00:06:11.005 --> 00:06:14.009
We can even put our assertion there.

117
00:06:14.009 --> 00:06:17.006
And then I'm going to do two other things.

118
00:06:17.006 --> 00:06:19.003
I'll just print some output here.

119
00:06:19.003 --> 00:06:23.005
I'll say this should print first

120
00:06:23.005 --> 00:06:26.007
because it's async.

121
00:06:26.007 --> 00:06:30.007
And then I'm also going to sleep our thread

122
00:06:30.007 --> 00:06:34.009
so that the unit test doesn't finish execution.

123
00:06:34.009 --> 00:06:37.002
You will not need to do this part

124
00:06:37.002 --> 00:06:39.006
in a real production scenario.

125
00:06:39.006 --> 00:06:40.004
Okay.

126
00:06:40.004 --> 00:06:43.006
So, we have the call switched over to async.

127
00:06:43.006 --> 00:06:47.009
We're no longer going to block on line 58.

128
00:06:47.009 --> 00:06:50.004
And, we're going to handle that response

129
00:06:50.004 --> 00:06:53.006
once it's emitted from the mono.

130
00:06:53.006 --> 00:06:59.009
Let's run the test.

131
00:06:59.009 --> 00:07:00.007
Okay.

132
00:07:00.007 --> 00:07:03.005
We can see our tests have finished.

133
00:07:03.005 --> 00:07:06.006
If we take a look at our console output,

134
00:07:06.006 --> 00:07:10.002
we do see that we got that first line.

135
00:07:10.002 --> 00:07:14.003
And then we had the response come in through the mono

136
00:07:14.003 --> 00:07:17.000
and we log that to the console.

137
00:07:17.000 --> 00:07:21.005
And there, you can see the actual tweet that we retrieved.

138
00:07:21.005 --> 00:07:22.003
All right.

139
00:07:22.003 --> 00:07:23.009
So that's our first exposure

140
00:07:23.009 --> 00:07:26.006
to spring's web client programmatically.

141
00:07:26.006 --> 00:07:29.007
And we were able to use it to make an API call.

142
00:07:29.007 --> 00:07:33.004
We saw how to make a synchronous call using block

143
00:07:33.004 --> 00:07:37.006
and how to make an asynchronous call using subscribe.

144
00:07:37.006 --> 00:07:38.007
In the upcoming lessons,

145
00:07:38.007 --> 00:07:41.007
we're going to take a look at another form of interaction

146
00:07:41.007 --> 00:07:44.000
using the streaming API.

