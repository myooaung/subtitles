WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] Most Java developers love

2
00:00:02.005 --> 00:00:03.009
the Spring framework.

3
00:00:03.009 --> 00:00:06.000
And it provides a few components

4
00:00:06.000 --> 00:00:08.008
for interacting with APIs.

5
00:00:08.008 --> 00:00:11.001
Here's an example of some code

6
00:00:11.001 --> 00:00:14.007
that uses one of those components, the RestTemplate.

7
00:00:14.007 --> 00:00:19.008
The RestTemplate was used for years to make calls to APIs,

8
00:00:19.008 --> 00:00:21.004
so you might encounter it

9
00:00:21.004 --> 00:00:24.006
in preexisting code that uses Spring.

10
00:00:24.006 --> 00:00:28.001
However, in Spring 5, the framework developers

11
00:00:28.001 --> 00:00:31.000
placed the RestTemplate into maintenance mode

12
00:00:31.000 --> 00:00:34.001
and they recommended that we use a new class

13
00:00:34.001 --> 00:00:37.005
called the WebClient going forward.

14
00:00:37.005 --> 00:00:40.006
Working with the WebClient gives us a major advantage

15
00:00:40.006 --> 00:00:46.001
because it supports several interaction styles with APIs.

16
00:00:46.001 --> 00:00:48.007
It supports synchronous, asynchronous,

17
00:00:48.007 --> 00:00:51.006
and streaming interactions.

18
00:00:51.006 --> 00:00:54.008
It's most common to encounter synchronous calls

19
00:00:54.008 --> 00:00:57.005
that block the execution of a thread

20
00:00:57.005 --> 00:00:59.009
while the client waits for a response

21
00:00:59.009 --> 00:01:03.001
after making an API call.

22
00:01:03.001 --> 00:01:04.009
In the asynchronous approach,

23
00:01:04.009 --> 00:01:08.001
the thread is able to execute other code

24
00:01:08.001 --> 00:01:11.007
while waiting for a response from the API.

25
00:01:11.007 --> 00:01:14.000
We saw this in action when we were working

26
00:01:14.000 --> 00:01:17.002
with Azure Cognitive Services.

27
00:01:17.002 --> 00:01:19.003
When using the streaming approach,

28
00:01:19.003 --> 00:01:23.000
the client makes the initial request to the API,

29
00:01:23.000 --> 00:01:28.002
which is followed by multiple responses from the API.

30
00:01:28.002 --> 00:01:30.005
This technique is frequently used

31
00:01:30.005 --> 00:01:34.004
to stream real-time data like stock market quotes

32
00:01:34.004 --> 00:01:37.005
or posts from a social media platform.

33
00:01:37.005 --> 00:01:39.008
That's why Twitter's streaming API

34
00:01:39.008 --> 00:01:42.008
is perfect for our course project.

35
00:01:42.008 --> 00:01:45.002
The new WebClient is built to support

36
00:01:45.002 --> 00:01:48.001
each of these approaches and to make better use

37
00:01:48.001 --> 00:01:51.000
of resources like threads.

38
00:01:51.000 --> 00:01:53.009
As Spring recommends, you should only be using

39
00:01:53.009 --> 00:01:55.009
the WebClient going forward

40
00:01:55.009 --> 00:01:58.008
and not using the RestTemplate.

41
00:01:58.008 --> 00:02:00.006
So that's a high-level look

42
00:02:00.006 --> 00:02:03.003
at how we call APIs with Spring

43
00:02:03.003 --> 00:02:06.009
and a little bit deeper of a dive on the WebClient.

44
00:02:06.009 --> 00:02:08.006
Next, we're going to take a look

45
00:02:08.006 --> 00:02:10.004
at how to use the WebClient

46
00:02:10.004 --> 00:02:15.000
for each of these interaction styles for calling APIs.

