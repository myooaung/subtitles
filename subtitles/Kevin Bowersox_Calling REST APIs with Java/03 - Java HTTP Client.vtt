WEBVTT
1
00:00:00.005 --> 00:00:04.005
- Java 11 introduced a new HTTP client that makes it

2
00:00:04.005 --> 00:00:08.000
much easier to call an API with Java.

3
00:00:08.000 --> 00:00:10.005
Here's an example of an API request

4
00:00:10.005 --> 00:00:13.008
to Azure Cognitive Services that was written prior

5
00:00:13.008 --> 00:00:15.006
to Java 11.

6
00:00:15.006 --> 00:00:17.005
You can see there's quite a bit of code

7
00:00:17.005 --> 00:00:19.006
and it required us to do things

8
00:00:19.006 --> 00:00:24.004
like handle the IO for a request or a response body.

9
00:00:24.004 --> 00:00:27.009
This often led to errors where we would forget to close

10
00:00:27.009 --> 00:00:29.008
our resources.

11
00:00:29.008 --> 00:00:35.000
Luckily the HTTP client makes it much simpler in Java 11.

12
00:00:35.000 --> 00:00:37.007
It also supports HTTP/2,

13
00:00:37.007 --> 00:00:41.002
so you can benefit from the performance enhancements

14
00:00:41.002 --> 00:00:45.005
delivered by that new version of the protocol.

15
00:00:45.005 --> 00:00:47.008
To see how it works, let's build a call

16
00:00:47.008 --> 00:00:52.004
to another API within Azure Cognitive Services.

17
00:00:52.004 --> 00:00:55.002
Within the Azure entities test class,

18
00:00:55.002 --> 00:00:57.003
we'll create a unit test that calls

19
00:00:57.003 --> 00:01:00.004
the named entities recognition endpoint

20
00:01:00.004 --> 00:01:03.005
on the text analytics API.

21
00:01:03.005 --> 00:01:07.007
This endpoint can extract people, places, and organizations

22
00:01:07.007 --> 00:01:10.003
from the texts that we provide.

23
00:01:10.003 --> 00:01:13.000
To help us out, I've added a number of constants

24
00:01:13.000 --> 00:01:14.008
to the top of the class.

25
00:01:14.008 --> 00:01:18.006
So you'll see the resource to my end point within Azure,

26
00:01:18.006 --> 00:01:22.007
which you'll need to replace with your resource endpoint.

27
00:01:22.007 --> 00:01:24.001
I've also added the path

28
00:01:24.001 --> 00:01:26.008
to the named entity recognition endpoint,

29
00:01:26.008 --> 00:01:30.004
as well as the name of the API Key and Content Type.

30
00:01:30.004 --> 00:01:33.009
And I've included the application JSON MIME type.

31
00:01:33.009 --> 00:01:38.006
Also, there's a string containing an example JSON document

32
00:01:38.006 --> 00:01:43.007
that will pass to the API.

33
00:01:43.007 --> 00:01:46.005
To make a call using the HTTP client,

34
00:01:46.005 --> 00:01:48.005
we need to do four things.

35
00:01:48.005 --> 00:01:54.001
First, we need to instantiate an HTTP client object.

36
00:01:54.001 --> 00:01:57.007
So I'm going to go ahead and build a client,

37
00:01:57.007 --> 00:02:01.005
and to do that we can use a static factory method

38
00:02:01.005 --> 00:02:04.002
on the HTTP client class.

39
00:02:04.002 --> 00:02:07.009
So you'll see the new HTTP client method.

40
00:02:07.009 --> 00:02:10.004
Let's go ahead, we'll invoke that.

41
00:02:10.004 --> 00:02:15.007
And now we're going to start building out an HTTP request.

42
00:02:15.007 --> 00:02:19.003
To create the request, we can use a builder

43
00:02:19.003 --> 00:02:22.008
found on the HTTP request class.

44
00:02:22.008 --> 00:02:25.004
So here you see the new Builder method.

45
00:02:25.004 --> 00:02:26.008
Let's call that.

46
00:02:26.008 --> 00:02:30.000
And from here, we can start to construct the object

47
00:02:30.000 --> 00:02:32.001
using the builder pattern.

48
00:02:32.001 --> 00:02:35.003
The first thing we'll do is specify a URI.

49
00:02:35.003 --> 00:02:38.000
So this is going to be the end point

50
00:02:38.000 --> 00:02:40.006
that we would like to hit on Azure.

51
00:02:40.006 --> 00:02:44.006
And to create that I'm going to use the create method

52
00:02:44.006 --> 00:02:46.003
on URI class.

53
00:02:46.003 --> 00:02:51.003
And then I'm going to pass in our Azure endpoint

54
00:02:51.003 --> 00:02:55.003
and I'll concatenate that with the path

55
00:02:55.003 --> 00:02:59.000
to the named entity recognition endpoint.

56
00:02:59.000 --> 00:03:01.005
Okay, with all that in place,

57
00:03:01.005 --> 00:03:03.007
we just invoke the build method

58
00:03:03.007 --> 00:03:07.006
and that's going to create our HTTP request.

59
00:03:07.006 --> 00:03:09.006
Now, once you have a request,

60
00:03:09.006 --> 00:03:13.002
you want to use the client to send that to the API,

61
00:03:13.002 --> 00:03:16.005
and then you're going to get a response back.

62
00:03:16.005 --> 00:03:19.007
And the response contains a generic type

63
00:03:19.007 --> 00:03:23.001
that indicates the type of the response body.

64
00:03:23.001 --> 00:03:27.004
In this case, we're just going to convert it to a string.

65
00:03:27.004 --> 00:03:28.006
To send the request,

66
00:03:28.006 --> 00:03:30.000
we'll use the client.

67
00:03:30.000 --> 00:03:33.003
And it has a send method, so that's pretty simple.

68
00:03:33.003 --> 00:03:36.001
The first argument is the request.

69
00:03:36.001 --> 00:03:41.000
And then the second argument is known as a body handler.

70
00:03:41.000 --> 00:03:43.005
Let's talk about this for a second.

71
00:03:43.005 --> 00:03:45.005
A body handler

72
00:03:45.005 --> 00:03:48.004
will take the incoming bytes

73
00:03:48.004 --> 00:03:54.003
from the response body and convert those bytes to an object.

74
00:03:54.003 --> 00:03:59.006
And you'll see, within the body handlers available to us,

75
00:03:59.006 --> 00:04:02.008
we can convert those bytes to various things.

76
00:04:02.008 --> 00:04:06.007
In our case, we're just going to convert them to a string.

77
00:04:06.007 --> 00:04:10.009
And there we have the response handled,

78
00:04:10.009 --> 00:04:14.008
when we send the request over to the client.

79
00:04:14.008 --> 00:04:17.000
Okay, the final thing that we'll do,

80
00:04:17.000 --> 00:04:20.001
is actually work with that response.

81
00:04:20.001 --> 00:04:23.003
In our case it's going to be pretty simple.

82
00:04:23.003 --> 00:04:26.004
I'm going to go ahead and add an assertion,

83
00:04:26.004 --> 00:04:30.000
to our unit test, that will check

84
00:04:30.000 --> 00:04:33.008
if the status code on the response is 200,

85
00:04:33.008 --> 00:04:36.009
which would indicate that it's successful.

86
00:04:36.009 --> 00:04:40.002
And then just so we can see the response

87
00:04:40.002 --> 00:04:44.006
I'm going to go ahead and send the body to the console.

88
00:04:44.006 --> 00:04:45.005
Okay.

89
00:04:45.005 --> 00:04:49.009
So that is the skeleton of how we make a request

90
00:04:49.009 --> 00:04:52.004
with the HTTP client.

91
00:04:52.004 --> 00:04:56.009
Now there's a couple things, that we need to add for Azure.

92
00:04:56.009 --> 00:04:59.003
So the first thing we'll take a look at,

93
00:04:59.003 --> 00:05:03.001
is the actual HTTP method used.

94
00:05:03.001 --> 00:05:08.008
By default, it's going to be a get sent to the API.

95
00:05:08.008 --> 00:05:13.009
The builder on the HTTP request allows us to send a put,

96
00:05:13.009 --> 00:05:17.007
we can send a delete, or we can send a post.

97
00:05:17.007 --> 00:05:20.009
So we can choose any HTTP method,

98
00:05:20.009 --> 00:05:25.000
the Azure APIs require us to send a post.

99
00:05:25.000 --> 00:05:28.001
So we're going to go ahead and use the post method.

100
00:05:28.001 --> 00:05:30.002
And you can see that it's looking for us

101
00:05:30.002 --> 00:05:33.005
to provide a body publisher.

102
00:05:33.005 --> 00:05:36.002
Now, a body publisher is sort of the inverse

103
00:05:36.002 --> 00:05:38.003
of a body handler.

104
00:05:38.003 --> 00:05:42.008
It's going to take a Java object, and convert it to bytes

105
00:05:42.008 --> 00:05:48.006
to be sent over the wire in the request body to the API.

106
00:05:48.006 --> 00:05:53.004
So in our case, we're going to take a string

107
00:05:53.004 --> 00:05:55.004
and turn that string to bytes,

108
00:05:55.004 --> 00:05:58.002
to supply as the request body.

109
00:05:58.002 --> 00:06:02.006
And you remember, that I had the example JSON document,

110
00:06:02.006 --> 00:06:05.006
specified as a constant within our class.

111
00:06:05.006 --> 00:06:08.002
So we'll just pass in that JSON,

112
00:06:08.002 --> 00:06:13.002
that will be sent over to the named entity recognition API.

113
00:06:13.002 --> 00:06:15.003
Okay, few more things.

114
00:06:15.003 --> 00:06:18.003
We're going to add a header and to do that,

115
00:06:18.003 --> 00:06:22.004
we invoke the header method on the builder.

116
00:06:22.004 --> 00:06:25.004
And the first argument is the name of the header.

117
00:06:25.004 --> 00:06:28.008
So in this case, it's going to be the content type header.

118
00:06:28.008 --> 00:06:31.008
And then we're going to specify the value

119
00:06:31.008 --> 00:06:34.006
of that header in the second argument.

120
00:06:34.006 --> 00:06:37.009
In this case it's going to be the MIME type for JSON.

121
00:06:37.009 --> 00:06:40.003
Okay, one more header to add,

122
00:06:40.003 --> 00:06:44.002
and this is actually going to be the API key.

123
00:06:44.002 --> 00:06:48.003
So we'll specify the name of the API key header,

124
00:06:48.003 --> 00:06:52.006
and then you'll see that we have the Azure API key.

125
00:06:52.006 --> 00:06:55.003
Let's talk about that a little bit.

126
00:06:55.003 --> 00:07:00.006
That value is injected into our class as a string.

127
00:07:00.006 --> 00:07:03.006
So here you can see it on line 21,

128
00:07:03.006 --> 00:07:07.004
and I'm using the spring framework to do that injection.

129
00:07:07.004 --> 00:07:10.007
It's reading an environment variable,

130
00:07:10.007 --> 00:07:16.007
that I've specified on my system named Azure_API_key.

131
00:07:16.007 --> 00:07:20.001
So, you'll have to set that up for this test to work.

132
00:07:20.001 --> 00:07:24.004
So, just hit the window key, and then type environment

133
00:07:24.004 --> 00:07:29.002
and select the first option that you see.

134
00:07:29.002 --> 00:07:33.006
You'll be presented with the dialog that looks like this,

135
00:07:33.006 --> 00:07:35.002
and you'll want to select

136
00:07:35.002 --> 00:07:38.006
the environment variables button here.

137
00:07:38.006 --> 00:07:41.000
And you can see that I've already established

138
00:07:41.000 --> 00:07:46.004
the AZURE_API_KEY environment variable.

139
00:07:46.004 --> 00:07:48.009
For you to set one up, just click on new

140
00:07:48.009 --> 00:07:53.007
and then type in the name of the environment variable,

141
00:07:53.007 --> 00:07:57.003
which will be AZURE_API_KEY.

142
00:07:57.003 --> 00:08:03.003
And then here take your API key value from the Azure portal,

143
00:08:03.003 --> 00:08:07.008
and place it into the variable value text box.

144
00:08:07.008 --> 00:08:10.003
Once you have that set up, go ahead and hit okay.

145
00:08:10.003 --> 00:08:14.000
I'm going to hit cancel because mine's already established.

146
00:08:14.000 --> 00:08:16.000
And then the next thing you'll need to do,

147
00:08:16.000 --> 00:08:18.006
is restart Eclipse so it loads that

148
00:08:18.006 --> 00:08:21.002
environment variable into memory.

149
00:08:21.002 --> 00:08:22.009
I've already done that.

150
00:08:22.009 --> 00:08:26.002
So at this point my test is all set up to run.

151
00:08:26.002 --> 00:08:28.009
I'm going to go ahead and make sure my test is saved,

152
00:08:28.009 --> 00:08:34.000
then I just right click, run as J unit test.

153
00:08:34.000 --> 00:08:37.009
And that will kick off our API call.

154
00:08:37.009 --> 00:08:39.008
If we take a look at the console,

155
00:08:39.008 --> 00:08:43.001
we can see that the call was made,

156
00:08:43.001 --> 00:08:47.001
to the named entity recognition end point.

157
00:08:47.001 --> 00:08:51.004
It picked out the Landon hotel as an entity.

158
00:08:51.004 --> 00:08:53.003
And if we scroll to the right,

159
00:08:53.003 --> 00:08:57.006
you'll also see it picked out the date 1952,

160
00:08:57.006 --> 00:09:02.009
and then we'll also see the city of London was highlighted.

161
00:09:02.009 --> 00:09:05.000
If we take a look at our J unit tests,

162
00:09:05.000 --> 00:09:07.007
we can see that everything passed,

163
00:09:07.007 --> 00:09:10.006
and that was our first successful API call,

164
00:09:10.006 --> 00:09:13.007
to Azure cognitive services.

165
00:09:13.007 --> 00:09:16.004
So in this lesson we covered many features

166
00:09:16.004 --> 00:09:18.009
of Java's HTTP client.

167
00:09:18.009 --> 00:09:21.000
And we're going to take a look at more of these,

168
00:09:21.000 --> 00:09:25.002
as we expand and look at more of the end points

169
00:09:25.002 --> 00:09:29.000
available on the text analytics API.

