WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] The next iteration of our course project

2
00:00:03.000 --> 00:00:05.008
builds integration with Twitter's REST API

3
00:00:05.008 --> 00:00:09.004
to listen for tweets made about specific topics.

4
00:00:09.004 --> 00:00:11.008
The Twitter API is one of the most popular

5
00:00:11.008 --> 00:00:13.008
public APIs available.

6
00:00:13.008 --> 00:00:15.001
It has a long history

7
00:00:15.001 --> 00:00:18.008
that dates back to its release in 2006.

8
00:00:18.008 --> 00:00:21.005
Today, the Twitter API is just part

9
00:00:21.005 --> 00:00:23.009
of the Twitter developer platform.

10
00:00:23.009 --> 00:00:27.000
This platform features an ads API,

11
00:00:27.000 --> 00:00:29.008
tools for embedding content into websites

12
00:00:29.008 --> 00:00:32.007
and an experimental lab.

13
00:00:32.007 --> 00:00:35.002
What draws developers to the Twitter API

14
00:00:35.002 --> 00:00:38.002
is the sheer volume of data that can be analyzed

15
00:00:38.002 --> 00:00:41.000
and listened to for specific events.

16
00:00:41.000 --> 00:00:43.003
The Twitter platform has an estimated

17
00:00:43.003 --> 00:00:48.001
330 million active users per month.

18
00:00:48.001 --> 00:00:52.007
People across the world make 200 billion tweets per year.

19
00:00:52.007 --> 00:00:57.009
That means roughly every second, there are 6,000 tweets.

20
00:00:57.009 --> 00:01:00.005
Think about all those tweets that just occurred.

21
00:01:00.005 --> 00:01:03.005
Those tweets tap into the hearts and minds

22
00:01:03.005 --> 00:01:07.003
of people around the world, creating a stream of information

23
00:01:07.003 --> 00:01:11.000
that researchers, scientists, businesses and governments

24
00:01:11.000 --> 00:01:14.008
can analyze for a variety of purposes.

25
00:01:14.008 --> 00:01:17.007
The Twitter API is the gateway for developers

26
00:01:17.007 --> 00:01:20.008
who want to unlock that stream of information

27
00:01:20.008 --> 00:01:25.000
to build new applications and capabilities.

28
00:01:25.000 --> 00:01:27.004
There are two versions of the API

29
00:01:27.004 --> 00:01:29.008
and three different access tiers.

30
00:01:29.008 --> 00:01:32.005
We'll be working with Twitter, API V2

31
00:01:32.005 --> 00:01:35.009
which is currently available for early access.

32
00:01:35.009 --> 00:01:38.003
At the moment the version two API

33
00:01:38.003 --> 00:01:42.000
is limited to information regarding tweets and users.

34
00:01:42.000 --> 00:01:44.009
However, the product roadmap targets capabilities

35
00:01:44.009 --> 00:01:49.005
like trends and time series metrics for future delivery.

36
00:01:49.005 --> 00:01:52.007
Let's just do a quick pass within the documentation

37
00:01:52.007 --> 00:01:54.002
to learn more about the API.

38
00:01:54.002 --> 00:01:57.007
So from the developer platform, head into the Docs

39
00:01:57.007 --> 00:02:00.001
and then dive into the Twitter API.

40
00:02:00.001 --> 00:02:02.000
And then on the left-hand sidebar

41
00:02:02.000 --> 00:02:04.008
you're going to see the two objects that are available.

42
00:02:04.008 --> 00:02:06.009
One is Tweets, one's Users.

43
00:02:06.009 --> 00:02:11.002
Expand Tweets and head into the Search Tweets section.

44
00:02:11.002 --> 00:02:14.005
Now in the Docs, most of the important information for us

45
00:02:14.005 --> 00:02:16.006
is within the API reference.

46
00:02:16.006 --> 00:02:18.002
So let's go there

47
00:02:18.002 --> 00:02:22.003
and then I'm going to dive into the recent search endpoint.

48
00:02:22.003 --> 00:02:24.005
Now, we're not going to talk about recent search,

49
00:02:24.005 --> 00:02:27.008
we're more going to focus on some global aspects

50
00:02:27.008 --> 00:02:29.009
of the Twitter API.

51
00:02:29.009 --> 00:02:33.003
So, first you'll see the domain for the API,

52
00:02:33.003 --> 00:02:36.000
it's api.twitter.com

53
00:02:36.000 --> 00:02:39.005
and you can see they specify the version in the path

54
00:02:39.005 --> 00:02:40.009
to an endpoint.

55
00:02:40.009 --> 00:02:42.003
And then they just finish off

56
00:02:42.003 --> 00:02:44.004
with the remainder of the path.

57
00:02:44.004 --> 00:02:47.005
The API is protected using OAuth two,

58
00:02:47.005 --> 00:02:49.003
so that's the security scheme,

59
00:02:49.003 --> 00:02:52.008
and that's going to require us to provide a bearer token

60
00:02:52.008 --> 00:02:54.007
in our requests.

61
00:02:54.007 --> 00:02:57.007
Another thing I want to highlight is the rate limiting.

62
00:02:57.007 --> 00:03:02.002
So providers of APIs will often limit clients

63
00:03:02.002 --> 00:03:05.006
to a number of requests over a specific window.

64
00:03:05.006 --> 00:03:08.009
Here they've chosen to allow 450 requests

65
00:03:08.009 --> 00:03:11.006
within a 15-minute window.

66
00:03:11.006 --> 00:03:14.008
They do this to prevent an abusive client

67
00:03:14.008 --> 00:03:18.008
from making the API unavailable to other clients.

68
00:03:18.008 --> 00:03:21.007
So, our client isn't going to have that problem

69
00:03:21.007 --> 00:03:23.005
because of the number of calls we'll make.

70
00:03:23.005 --> 00:03:25.006
But if you have a different usage scenario

71
00:03:25.006 --> 00:03:28.000
just be aware of this.

72
00:03:28.000 --> 00:03:29.007
Alright, another thing I want to point out,

73
00:03:29.007 --> 00:03:31.009
if we look at the query parameters

74
00:03:31.009 --> 00:03:35.006
you'll see several that have this field suffix,

75
00:03:35.006 --> 00:03:37.006
you can see two here.

76
00:03:37.006 --> 00:03:39.006
And this field suffix is really neat

77
00:03:39.006 --> 00:03:43.003
because it allows us to shape the response

78
00:03:43.003 --> 00:03:46.002
that gets sent back to our client.

79
00:03:46.002 --> 00:03:50.002
Let's scroll down to talk a little bit more about this.

80
00:03:50.002 --> 00:03:52.006
So here's an example response

81
00:03:52.006 --> 00:03:55.008
and it's the base tweet object,

82
00:03:55.008 --> 00:03:58.001
and it only contains two properties,

83
00:03:58.001 --> 00:04:01.003
id and the text of the tweet.

84
00:04:01.003 --> 00:04:06.006
Now, we can use those parameters that have the field suffix

85
00:04:06.006 --> 00:04:09.005
to mold what that JSON looks like.

86
00:04:09.005 --> 00:04:12.004
So here in the optional fields tab

87
00:04:12.004 --> 00:04:14.008
you can see that we're able to add

88
00:04:14.008 --> 00:04:17.003
additional properties to the tweet.

89
00:04:17.003 --> 00:04:19.004
So it's really flexible in that

90
00:04:19.004 --> 00:04:23.004
you control what data gets sent back to you in the JSON

91
00:04:23.004 --> 00:04:25.007
in the response body.

92
00:04:25.007 --> 00:04:28.003
Alright, let's go take a look at one more thing.

93
00:04:28.003 --> 00:04:31.007
So over on the sidebar, click on filtered stream

94
00:04:31.007 --> 00:04:34.000
and we're going to talk about the filtered stream

95
00:04:34.000 --> 00:04:35.007
here at a high level.

96
00:04:35.007 --> 00:04:37.006
The filtered stream capability

97
00:04:37.006 --> 00:04:39.001
works a little bit differently

98
00:04:39.001 --> 00:04:41.008
than your typical request and response scenario

99
00:04:41.008 --> 00:04:44.000
with most API calls.

100
00:04:44.000 --> 00:04:47.000
Instead of making a request and receiving a response,

101
00:04:47.000 --> 00:04:50.007
the stream endpoint is event-based.

102
00:04:50.007 --> 00:04:53.007
It pushes specific tweets to a client

103
00:04:53.007 --> 00:04:56.005
based upon a set of roles that are established

104
00:04:56.005 --> 00:05:00.001
for the client through a roles endpoint.

105
00:05:00.001 --> 00:05:02.003
So, you can see that here.

106
00:05:02.003 --> 00:05:06.004
This endpoint is used to establish or delete a role.

107
00:05:06.004 --> 00:05:10.006
All the client's roles are managed through this endpoint

108
00:05:10.006 --> 00:05:13.004
and you essentially establish key words

109
00:05:13.004 --> 00:05:16.007
or different query-like predicates

110
00:05:16.007 --> 00:05:20.008
that determine what tweets get sent in your stream.

111
00:05:20.008 --> 00:05:24.003
Once a client has established these roles,

112
00:05:24.003 --> 00:05:28.004
they can then connect to the stream using this endpoint

113
00:05:28.004 --> 00:05:30.007
and sending an HTTP GET.

114
00:05:30.007 --> 00:05:34.005
At that point, Twitter is going to start pushing tweets

115
00:05:34.005 --> 00:05:37.007
into their stream, it's pretty neat.

116
00:05:37.007 --> 00:05:40.008
Twitter's API is very popular amongst developers

117
00:05:40.008 --> 00:05:43.007
because of the amount of activity on the platform

118
00:05:43.007 --> 00:05:48.001
that can be accessed and analyzed for many purposes.

119
00:05:48.001 --> 00:05:52.004
We'll get hands-on with these APIs in upcoming lessons

120
00:05:52.004 --> 00:05:56.000
so you can experience the power of the Twitter API.

