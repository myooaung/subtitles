WEBVTT
1
00:00:00.005 --> 00:00:02.007
- [Instructor] We're going to use another unit test

2
00:00:02.007 --> 00:00:06.007
to practice some calls to the Twitter streaming API.

3
00:00:06.007 --> 00:00:10.002
Now, a couple things about this demonstration.

4
00:00:10.002 --> 00:00:15.000
You'll notice that we have injected the TWITTER_BEARER_TOKEN

5
00:00:15.000 --> 00:00:16.005
from an environment variable,

6
00:00:16.005 --> 00:00:19.009
so you want to make sure that's configured on your system.

7
00:00:19.009 --> 00:00:22.000
And then you'll see these three constants:

8
00:00:22.000 --> 00:00:25.004
the Twitter API domain, the stream endpoint,

9
00:00:25.004 --> 00:00:28.006
and the stream rules endpoint.

10
00:00:28.006 --> 00:00:31.003
We're also going to be doing things a little bit different

11
00:00:31.003 --> 00:00:33.001
with our WebClient.

12
00:00:33.001 --> 00:00:37.001
You'll notice that I've autowired in a builder

13
00:00:37.001 --> 00:00:39.006
for the WebClient from Spring.

14
00:00:39.006 --> 00:00:41.003
And the reason we're doing this

15
00:00:41.003 --> 00:00:45.004
is because when you inject the builder from Spring,

16
00:00:45.004 --> 00:00:47.007
you get some preconfigured codeX

17
00:00:47.007 --> 00:00:51.000
and other configurations by default

18
00:00:51.000 --> 00:00:54.002
that make it easier to work with the builder.

19
00:00:54.002 --> 00:00:56.007
Okay, so all that's in place,

20
00:00:56.007 --> 00:01:00.001
let's start building out our call.

21
00:01:00.001 --> 00:01:04.001
The first thing we'll need is an instance of the WebClient,

22
00:01:04.001 --> 00:01:07.001
so we're going to use the builder.

23
00:01:07.001 --> 00:01:09.004
And on the baseUrl method,

24
00:01:09.004 --> 00:01:14.004
we're going to pass in the domain for the Twitter API.

25
00:01:14.004 --> 00:01:16.009
Now, we need to satisfy the security,

26
00:01:16.009 --> 00:01:20.005
so we'll call the defaultHeaders method,

27
00:01:20.005 --> 00:01:24.002
and I'm actually going to use a consumer here.

28
00:01:24.002 --> 00:01:26.006
So with the headers consumer,

29
00:01:26.006 --> 00:01:29.009
we get this nice convenience method here

30
00:01:29.009 --> 00:01:33.000
that allows us to set our bearerToken.

31
00:01:33.000 --> 00:01:36.007
We don't need to specify the authorization header name

32
00:01:36.007 --> 00:01:39.000
or put bearer in front of our token.

33
00:01:39.000 --> 00:01:42.000
We just pass in our bearerToken.

34
00:01:42.000 --> 00:01:45.005
With that in place, we'll go ahead and build the client,

35
00:01:45.005 --> 00:01:49.005
and now we can start building the information

36
00:01:49.005 --> 00:01:53.009
that we would like to pass to the rules endpoint

37
00:01:53.009 --> 00:01:57.003
that will establish the rule for our client.

38
00:01:57.003 --> 00:01:59.000
So to help us there,

39
00:01:59.000 --> 00:02:05.001
I've created a StreamRuleRequest object,

40
00:02:05.001 --> 00:02:09.002
and I'm going to declare an object of the type,

41
00:02:09.002 --> 00:02:10.004
and then what I can do

42
00:02:10.004 --> 00:02:13.008
is use the new operator and the constructor

43
00:02:13.008 --> 00:02:16.005
in order to instantiate that object.

44
00:02:16.005 --> 00:02:19.001
Let's take a deeper look here.

45
00:02:19.001 --> 00:02:24.000
This object is going to mimic that JSON we looked at

46
00:02:24.000 --> 00:02:29.001
that is necessary to establish a rule for the client.

47
00:02:29.001 --> 00:02:31.008
So here you can see a list of rules.

48
00:02:31.008 --> 00:02:34.008
And then within that list of rules,

49
00:02:34.008 --> 00:02:37.007
we have a StreamRule object

50
00:02:37.007 --> 00:02:42.000
that has a value property and a tag property.

51
00:02:42.000 --> 00:02:44.004
And the value property just provides

52
00:02:44.004 --> 00:02:49.002
our keyword or our filter that will tell the streaming API

53
00:02:49.002 --> 00:02:51.002
when to send us a tweet,

54
00:02:51.002 --> 00:02:56.003
and a tag is just a nice way to name that rule.

55
00:02:56.003 --> 00:03:01.008
So back over in our test, we have our ruleRequest object,

56
00:03:01.008 --> 00:03:05.003
let's go ahead and set up the rule.

57
00:03:05.003 --> 00:03:07.001
So the way I've created this,

58
00:03:07.001 --> 00:03:11.000
you just need to provide the keyword.

59
00:03:11.000 --> 00:03:15.001
In our case, we're interested in tweets about LinkedIn.

60
00:03:15.001 --> 00:03:20.008
And then I'm just going to tag this the LinkedIn Tag,

61
00:03:20.008 --> 00:03:23.005
and that will be the name for my tag.

62
00:03:23.005 --> 00:03:27.001
Now, we can start working on sending the call.

63
00:03:27.001 --> 00:03:30.000
You'll remember that in order to establish a rule,

64
00:03:30.000 --> 00:03:31.009
we have to make a post,

65
00:03:31.009 --> 00:03:35.008
so I will set up a post on the client.

66
00:03:35.008 --> 00:03:39.003
And then we need to specify the path

67
00:03:39.003 --> 00:03:44.002
to the stream rules endpoint,

68
00:03:44.002 --> 00:03:47.008
and I've added that as a constant, so we'll use that,

69
00:03:47.008 --> 00:03:49.000
and then check this out.

70
00:03:49.000 --> 00:03:52.001
This is the bodyValue method.

71
00:03:52.001 --> 00:03:57.001
And we can just pass in our ruleRequest object

72
00:03:57.001 --> 00:03:58.005
to this method,

73
00:03:58.005 --> 00:04:03.003
and it will cause the object to be serialized to JSON

74
00:04:03.003 --> 00:04:05.006
and sent in the request body.

75
00:04:05.006 --> 00:04:08.006
So we don't even have to do all that work with Jackson

76
00:04:08.006 --> 00:04:10.003
when we use Spring.

77
00:04:10.003 --> 00:04:14.003
Okay, then we're going to flip over to handling the response.

78
00:04:14.003 --> 00:04:17.006
And we're not really interested in the body here.

79
00:04:17.006 --> 00:04:20.002
We just want to make sure it was successful.

80
00:04:20.002 --> 00:04:23.003
And then we're going to go ahead and subscribe

81
00:04:23.003 --> 00:04:27.007
to listen for when the request has completed.

82
00:04:27.007 --> 00:04:30.001
And when we do get that response back

83
00:04:30.001 --> 00:04:32.002
after the rule is created,

84
00:04:32.002 --> 00:04:34.002
we're going to do some additional work

85
00:04:34.002 --> 00:04:36.003
within this lambda function.

86
00:04:36.003 --> 00:04:38.004
Specifically, we're going to go ahead

87
00:04:38.004 --> 00:04:43.001
and connect to the stream to start receiving tweets.

88
00:04:43.001 --> 00:04:46.003
So the easiest way to set up that next call

89
00:04:46.003 --> 00:04:48.009
is just to copy our first call,

90
00:04:48.009 --> 00:04:51.001
and that will get us ahead a little bit.

91
00:04:51.001 --> 00:04:53.000
So go ahead, copy the call,

92
00:04:53.000 --> 00:04:57.000
and then paste it inside the body of the lambda function.

93
00:04:57.000 --> 00:04:59.009
Now, when we connect to the stream,

94
00:04:59.009 --> 00:05:03.003
it's going to be a get instead of a post.

95
00:05:03.003 --> 00:05:07.002
And then we're also going to have to change the endpoint

96
00:05:07.002 --> 00:05:09.001
that we're connecting to.

97
00:05:09.001 --> 00:05:11.008
We'll just take out the rules segment

98
00:05:11.008 --> 00:05:13.008
of that constant's name,

99
00:05:13.008 --> 00:05:17.006
and here we're pointing to the stream path.

100
00:05:17.006 --> 00:05:21.000
Now, we're no longer going to be sending any information

101
00:05:21.000 --> 00:05:22.002
in the body of the request,

102
00:05:22.002 --> 00:05:27.000
so I can go ahead and remove that piece of our call.

103
00:05:27.000 --> 00:05:30.007
And instead of just ignoring the body,

104
00:05:30.007 --> 00:05:33.000
we're going to do something different.

105
00:05:33.000 --> 00:05:36.001
We're going to use bodyToFlux,

106
00:05:36.001 --> 00:05:37.006
and then we're going to say

107
00:05:37.006 --> 00:05:41.002
that our flux will contain a string.

108
00:05:41.002 --> 00:05:43.009
So let's talk about this a little bit.

109
00:05:43.009 --> 00:05:47.006
You'll remember the Mono type from Project Reactor.

110
00:05:47.006 --> 00:05:51.000
It was used to emit a single value.

111
00:05:51.000 --> 00:05:54.008
The flux is used to emit multiple values,

112
00:05:54.008 --> 00:05:57.006
one to end, we're not sure how many.

113
00:05:57.006 --> 00:06:01.000
But we do have to specify the type of value

114
00:06:01.000 --> 00:06:03.002
the flux is going to emit.

115
00:06:03.002 --> 00:06:06.004
In this case, it's going to be a string,

116
00:06:06.004 --> 00:06:10.002
and it's going to be the response body that we get back.

117
00:06:10.002 --> 00:06:12.009
Now, one of the things we're going to do

118
00:06:12.009 --> 00:06:15.004
is we're going to set up a filter.

119
00:06:15.004 --> 00:06:20.009
We don't want to receive any empty response bodies.

120
00:06:20.009 --> 00:06:23.003
So I'm going to go ahead and check

121
00:06:23.003 --> 00:06:26.003
that the response body is not blank.

122
00:06:26.003 --> 00:06:30.007
If it is, we're not going to call our next lambda function,

123
00:06:30.007 --> 00:06:34.008
which is the subscriber or the consumer of the flux.

124
00:06:34.008 --> 00:06:36.004
Okay, let's go ahead,

125
00:06:36.004 --> 00:06:39.004
we'll change this over from response to json,

126
00:06:39.004 --> 00:06:41.006
and this is just a name for the parameter

127
00:06:41.006 --> 00:06:45.003
being passed into our lambda function.

128
00:06:45.003 --> 00:06:47.006
And then at this point, let's go ahead,

129
00:06:47.006 --> 00:06:49.005
we'll print out the json.

130
00:06:49.005 --> 00:06:55.006
I'll tidy this up a tad.

131
00:06:55.006 --> 00:06:58.005
And now we have our two calls built.

132
00:06:58.005 --> 00:07:03.001
We have our call to establish the rule for our client,

133
00:07:03.001 --> 00:07:05.001
then we have our call

134
00:07:05.001 --> 00:07:08.002
to start receiving tweets from the stream.

135
00:07:08.002 --> 00:07:11.004
Now, I need to do one final thing

136
00:07:11.004 --> 00:07:14.000
in order to close out this work.

137
00:07:14.000 --> 00:07:18.001
And this is simply for our testing purposes.

138
00:07:18.001 --> 00:07:19.006
I'm going to go ahead

139
00:07:19.006 --> 00:07:22.009
and tell it to read input from the console.

140
00:07:22.009 --> 00:07:25.008
And this is really just for our unit test to block

141
00:07:25.008 --> 00:07:27.008
while we read the tweets coming in.

142
00:07:27.008 --> 00:07:30.007
You won't need this in a production environment.

143
00:07:30.007 --> 00:07:34.005
Okay, let me go ahead, we'll run our unit test,

144
00:07:34.005 --> 00:07:37.000
and let's take a look at some tweets

145
00:07:37.000 --> 00:07:39.008
that are coming in about LinkedIn.

146
00:07:39.008 --> 00:07:43.003
Okay, so you can see them come in there.

147
00:07:43.003 --> 00:07:46.009
We have connected successfully to the stream

148
00:07:46.009 --> 00:07:50.005
with our client.

149
00:07:50.005 --> 00:07:53.006
I'm going to go ahead, I'll shut down the stream.

150
00:07:53.006 --> 00:07:57.009
Okay, so that's going to conclude our work for this lesson

151
00:07:57.009 --> 00:08:02.002
where we took a look at the Twitter streaming API,

152
00:08:02.002 --> 00:08:05.005
and we also had some great technologies in our stack

153
00:08:05.005 --> 00:08:08.005
like the WebClient and Project Reactor.

154
00:08:08.005 --> 00:08:11.008
These technologies both have robust environments

155
00:08:11.008 --> 00:08:13.008
that you can explore further.

156
00:08:13.008 --> 00:08:16.003
And you can see from our simple example,

157
00:08:16.003 --> 00:08:18.003
they were both able to handle

158
00:08:18.003 --> 00:08:21.000
quite a bit of complexity for us.

