WEBVTT
1
00:00:00.001 --> 00:00:05.003
(upbeat music)

2
00:00:05.003 --> 00:00:06.003
- [Instructor] How did it go?

3
00:00:06.003 --> 00:00:08.009
Were you able to find a working solution?

4
00:00:08.009 --> 00:00:12.002
Let's take a look at how I chose to solve the problem.

5
00:00:12.002 --> 00:00:15.004
Now don't worry if your code doesn't match mine exactly,

6
00:00:15.004 --> 00:00:18.003
it's more about getting experience calling an API

7
00:00:18.003 --> 00:00:21.003
and working with Azure Cognitive Services.

8
00:00:21.003 --> 00:00:25.002
I've also added some bells and whistles in my example

9
00:00:25.002 --> 00:00:30.001
so that you can see more of the HTTP client interface.

10
00:00:30.001 --> 00:00:35.006
Okay, so I started off by building a TextDocument object

11
00:00:35.006 --> 00:00:38.006
and a TextAnalyticsRequest object.

12
00:00:38.006 --> 00:00:42.002
These are going to store the information

13
00:00:42.002 --> 00:00:45.002
that we're going to pass in the request body

14
00:00:45.002 --> 00:00:50.005
of the HTTP request, to the text analytics API.

15
00:00:50.005 --> 00:00:52.008
Now after I built those objects,

16
00:00:52.008 --> 00:00:55.001
I created the URI

17
00:00:55.001 --> 00:00:59.008
to the Azure Cognitive Services Sentiment endpoint.

18
00:00:59.008 --> 00:01:03.001
To do that, I concatenated the path

19
00:01:03.001 --> 00:01:06.000
to Version 3 of the endpoint,

20
00:01:06.000 --> 00:01:10.007
with the domain specific to my resource

21
00:01:10.007 --> 00:01:13.003
in Azure Cognitive Services.

22
00:01:13.003 --> 00:01:17.000
You can see that as a constant in the top of the class.

23
00:01:17.000 --> 00:01:20.001
Remember, yours might look a little bit different

24
00:01:20.001 --> 00:01:24.009
because you should have a unique endpoint.

25
00:01:24.009 --> 00:01:27.003
After that, I started to create my client,

26
00:01:27.003 --> 00:01:28.009
and here's where my solution

27
00:01:28.009 --> 00:01:31.006
might look a little bit different than yours.

28
00:01:31.006 --> 00:01:35.003
I used a builder to instantiate my client,

29
00:01:35.003 --> 00:01:40.001
and this allowed me to set the version of the HTTP protocol

30
00:01:40.001 --> 00:01:43.009
to specify a proxy and to set a timeout.

31
00:01:43.009 --> 00:01:47.007
Timeouts are really important when calling an API.

32
00:01:47.007 --> 00:01:50.004
If you send multiple calls

33
00:01:50.004 --> 00:01:53.006
to an API that's down, it's possible

34
00:01:53.006 --> 00:01:56.002
that you're going to back up a lot of connections

35
00:01:56.002 --> 00:01:57.002
in your code.

36
00:01:57.002 --> 00:01:59.006
So you always want to set a timeout

37
00:01:59.006 --> 00:02:02.006
when making a call to an API.

38
00:02:02.006 --> 00:02:04.000
After I created my client,

39
00:02:04.000 --> 00:02:06.007
I started to build my request using the builder

40
00:02:06.007 --> 00:02:08.007
like we've seen in the past.

41
00:02:08.007 --> 00:02:11.008
I set the endpoint that I would like to call.

42
00:02:11.008 --> 00:02:15.000
I add the headers to satisfy the security scheme.

43
00:02:15.000 --> 00:02:19.001
And then you see that I create the JSON string

44
00:02:19.001 --> 00:02:25.002
for the request body, using the Jackson ObjectMapper

45
00:02:25.002 --> 00:02:29.005
and our TextAnalyticsRequest object.

46
00:02:29.005 --> 00:02:33.007
Once again, in line 57, I set a timeout on the request.

47
00:02:33.007 --> 00:02:36.009
You can set it on the request or the client,

48
00:02:36.009 --> 00:02:39.009
I just showed you both examples here.

49
00:02:39.009 --> 00:02:43.003
Okay, so now I have a client, I have a request.

50
00:02:43.003 --> 00:02:45.008
Let's go ahead and send that request

51
00:02:45.008 --> 00:02:48.004
over to Azure Cognitive Services.

52
00:02:48.004 --> 00:02:50.008
That's what I'm doing in line 60.

53
00:02:50.008 --> 00:02:54.005
And we get the response back from the synchronous call,

54
00:02:54.005 --> 00:02:57.001
so I'm in a block here on line 60.

55
00:02:57.001 --> 00:02:58.008
And then I do something a little different

56
00:02:58.008 --> 00:03:00.002
than you might've done.

57
00:03:00.002 --> 00:03:04.007
I checked that we have a 200 HTTP status code,

58
00:03:04.007 --> 00:03:06.003
and that's because I want to make sure

59
00:03:06.003 --> 00:03:08.004
the request is successful.

60
00:03:08.004 --> 00:03:11.004
If it's not, I do a little bit of error handling here.

61
00:03:11.004 --> 00:03:13.007
So you always want to check to make sure

62
00:03:13.007 --> 00:03:16.000
your call was successful

63
00:03:16.000 --> 00:03:19.005
before continuing on with your processing.

64
00:03:19.005 --> 00:03:25.006
After I've done that check, I can then take the request body

65
00:03:25.006 --> 00:03:30.007
and pass it into the ObjectMapper's readValue method.

66
00:03:30.007 --> 00:03:35.005
And this de-serializes the JSON string

67
00:03:35.005 --> 00:03:38.008
in the request body to adjacent node.

68
00:03:38.008 --> 00:03:40.005
And that's going to allow me

69
00:03:40.005 --> 00:03:44.006
to more easily work with the JSON.

70
00:03:44.006 --> 00:03:47.009
So you can see I traverse into that object

71
00:03:47.009 --> 00:03:50.003
and extract the sentiment property.

72
00:03:50.003 --> 00:03:52.009
So this is going to be positive or negative.

73
00:03:52.009 --> 00:03:58.002
And I assign that value to the sentiment value string

74
00:03:58.002 --> 00:04:01.004
that's declared in line 67.

75
00:04:01.004 --> 00:04:04.007
I then take that string along with our text document

76
00:04:04.007 --> 00:04:06.004
that we sent for analysis,

77
00:04:06.004 --> 00:04:11.001
and I pass those into the SentimentAnalysis constructor

78
00:04:11.001 --> 00:04:14.000
to build a sentiment analysis object

79
00:04:14.000 --> 00:04:17.008
that we return on line 76.

80
00:04:17.008 --> 00:04:19.009
So, that's my solution.

81
00:04:19.009 --> 00:04:22.006
We can go ahead and see it in action

82
00:04:22.006 --> 00:04:26.006
by heading over to the AzureSentimentServiceTest.

83
00:04:26.006 --> 00:04:33.000
And I'll just go ahead and kick off this unit test.

84
00:04:33.000 --> 00:04:36.009
You can see it just passed, so things are looking good.

85
00:04:36.009 --> 00:04:39.001
That's going to conclude our work

86
00:04:39.001 --> 00:04:44.001
with the Azure Cognitive Services and the HTTP client.

87
00:04:44.001 --> 00:04:46.009
We were also able to get the first iteration

88
00:04:46.009 --> 00:04:49.006
of our course project done, so that's a plus,

89
00:04:49.006 --> 00:04:54.000
and we're ready to move on to work with our next API.

