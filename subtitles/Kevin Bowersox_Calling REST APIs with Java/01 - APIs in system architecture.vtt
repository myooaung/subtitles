WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] As the design of information systems

2
00:00:02.006 --> 00:00:05.003
has evolved, their architectures have included

3
00:00:05.003 --> 00:00:08.003
more interconnectivity between systems.

4
00:00:08.003 --> 00:00:09.006
We see it all the time.

5
00:00:09.006 --> 00:00:14.005
One website will access your data from another platform.

6
00:00:14.005 --> 00:00:17.006
Throughout this evolution, various integration strategies

7
00:00:17.006 --> 00:00:21.001
have emerged that allow systems to exchange data

8
00:00:21.001 --> 00:00:23.004
and share capabilities.

9
00:00:23.004 --> 00:00:27.004
These approaches include techniques such as file transfers,

10
00:00:27.004 --> 00:00:31.005
ETL, shared databases, and messaging.

11
00:00:31.005 --> 00:00:34.008
Sharing data with these techniques requires a lot of work,

12
00:00:34.008 --> 00:00:37.008
and each type of integration has some drawbacks,

13
00:00:37.008 --> 00:00:40.008
whether that's inconsistent data, tight coupling,

14
00:00:40.008 --> 00:00:44.006
poor security, or duplicate copies of data.

15
00:00:44.006 --> 00:00:46.005
These drawbacks and the need

16
00:00:46.005 --> 00:00:49.006
for a more lightweight technique drove engineers

17
00:00:49.006 --> 00:00:53.007
towards APIs when designing new systems.

18
00:00:53.007 --> 00:00:57.008
Let's clarify a few key points concerning APIs.

19
00:00:57.008 --> 00:01:01.000
An API is an interface that is exposed

20
00:01:01.000 --> 00:01:04.007
by one piece of software to allow other software

21
00:01:04.007 --> 00:01:07.007
to communicate with it programmatically.

22
00:01:07.007 --> 00:01:11.000
The API is typically divided into two parts,

23
00:01:11.000 --> 00:01:14.006
the interface and the implementation.

24
00:01:14.006 --> 00:01:20.004
The interface exposes operations the API can perform.

25
00:01:20.004 --> 00:01:23.009
When called, those operations are executed

26
00:01:23.009 --> 00:01:26.001
by the underlying source code

27
00:01:26.001 --> 00:01:31.004
that serves as the implementation of the API.

28
00:01:31.004 --> 00:01:35.003
The software that communicates with or calls the API

29
00:01:35.003 --> 00:01:39.006
to invoke these operations is known as the client.

30
00:01:39.006 --> 00:01:42.008
Now here's the beautiful thing about an API.

31
00:01:42.008 --> 00:01:45.001
It shields the client from changes

32
00:01:45.001 --> 00:01:47.008
to the underlying implementation.

33
00:01:47.008 --> 00:01:52.002
That's because clients only interact with the interface.

34
00:01:52.002 --> 00:01:55.004
If you watch closely, you'll notice that the boundary

35
00:01:55.004 --> 00:01:59.001
between the client and the interface doesn't break

36
00:01:59.001 --> 00:02:02.002
as we change the implementation of the API

37
00:02:02.002 --> 00:02:04.003
in the background.

38
00:02:04.003 --> 00:02:07.001
The concept of an API isn't new,

39
00:02:07.001 --> 00:02:10.003
they've been around since the early days of computing.

40
00:02:10.003 --> 00:02:13.008
Now, I like to classify them into two major categories,

41
00:02:13.008 --> 00:02:15.009
local and remote.

42
00:02:15.009 --> 00:02:18.003
Now the key difference between the two

43
00:02:18.003 --> 00:02:22.009
is that a local API call takes place on a single computer.

44
00:02:22.009 --> 00:02:27.001
A remote API call allows a client on one computer

45
00:02:27.001 --> 00:02:30.006
to execute an operation on another computer.

46
00:02:30.006 --> 00:02:34.006
When we use a remote API call from one computer to another,

47
00:02:34.006 --> 00:02:38.007
it's sent over a network using a protocol.

48
00:02:38.007 --> 00:02:40.008
There are many other types of APIs

49
00:02:40.008 --> 00:02:44.004
that are found under these two broad categories.

50
00:02:44.004 --> 00:02:48.001
We'll focus on how to consume RESTful APIs,

51
00:02:48.001 --> 00:02:50.006
which are part of a class of a web APIs

52
00:02:50.006 --> 00:02:54.001
that sit on top of the HTTP protocol.

53
00:02:54.001 --> 00:02:57.004
Specifically, we'll learn how to build Java clients

54
00:02:57.004 --> 00:02:59.007
that call popular RESTful APIs,

55
00:02:59.007 --> 00:03:02.008
like Twitter's, using Java libraries

56
00:03:02.008 --> 00:03:06.004
that do most of the low level work for us.

57
00:03:06.004 --> 00:03:07.009
Armed with this knowledge,

58
00:03:07.009 --> 00:03:11.004
you can quickly build applications with features

59
00:03:11.004 --> 00:03:14.004
that are delivered through the data and capabilities

60
00:03:14.004 --> 00:03:18.000
of APIs built by other developers.

