WEBVTT
1
00:00:00.001 --> 00:00:05.002
(upbeat music)

2
00:00:05.002 --> 00:00:06.003
- [Instructor] Now it's your turn

3
00:00:06.003 --> 00:00:08.004
to tackle a programming challenge

4
00:00:08.004 --> 00:00:12.006
using spring's web client and the Twitter streaming API.

5
00:00:12.006 --> 00:00:13.006
In this challenge,

6
00:00:13.006 --> 00:00:16.001
you will be asked to establish a connection

7
00:00:16.001 --> 00:00:18.007
to Twitter's filtered stream endpoint

8
00:00:18.007 --> 00:00:21.000
using the spring web client.

9
00:00:21.000 --> 00:00:23.006
Once you've connected to the stream,

10
00:00:23.006 --> 00:00:26.005
you'll send tweets mentioning the Landon Hotel

11
00:00:26.005 --> 00:00:31.005
to Azure cognitive services for sentiment analysis.

12
00:00:31.005 --> 00:00:32.008
In the working files,

13
00:00:32.008 --> 00:00:36.001
you'll find the Twitter streaming service class.

14
00:00:36.001 --> 00:00:40.004
This class contains a method named stream.

15
00:00:40.004 --> 00:00:44.006
Within this method, you're going to build a web client,

16
00:00:44.006 --> 00:00:47.000
make the connection to the stream

17
00:00:47.000 --> 00:00:52.001
and then return a flux that emits the tweets as a string.

18
00:00:52.001 --> 00:00:54.000
You can see that within the class,

19
00:00:54.000 --> 00:00:58.004
I've injected the bearer token for the Twitter API.

20
00:00:58.004 --> 00:01:00.000
You'll need to make sure

21
00:01:00.000 --> 00:01:03.005
that you have this environment variable established

22
00:01:03.005 --> 00:01:06.007
on your workstation.

23
00:01:06.007 --> 00:01:08.002
You'll also need to keep in mind

24
00:01:08.002 --> 00:01:12.002
that we've already registered roles with the streaming API

25
00:01:12.002 --> 00:01:13.007
for this client.

26
00:01:13.007 --> 00:01:16.002
So you'll need to delete those roles

27
00:01:16.002 --> 00:01:20.001
and then create a new role for the Landon Hotel.

28
00:01:20.001 --> 00:01:22.000
I recommend using postman for this

29
00:01:22.000 --> 00:01:24.006
because it's kind of a one-time thing.

30
00:01:24.006 --> 00:01:27.005
If you need the details for those end points

31
00:01:27.005 --> 00:01:31.001
take another look at the Twitter API documentation.

32
00:01:31.001 --> 00:01:33.008
You'll find them in there.

33
00:01:33.008 --> 00:01:35.006
Once you've finished your work

34
00:01:35.006 --> 00:01:37.008
in the Twitter streaming service,

35
00:01:37.008 --> 00:01:40.002
you'll need to integrate the service

36
00:01:40.002 --> 00:01:43.009
with our Azure cognitive service service.

37
00:01:43.009 --> 00:01:44.009
You'll do that work

38
00:01:44.009 --> 00:01:48.009
within the Landon monitor application class.

39
00:01:48.009 --> 00:01:52.002
The class starts our monitoring application

40
00:01:52.002 --> 00:01:55.005
by executing the code found in the run method

41
00:01:55.005 --> 00:01:57.003
when it starts up.

42
00:01:57.003 --> 00:02:00.005
This is where you're going to perform the integration

43
00:02:00.005 --> 00:02:03.000
between the Twitter streaming service

44
00:02:03.000 --> 00:02:05.008
and the Azure sentiment service.

45
00:02:05.008 --> 00:02:09.004
You'll notice that both services are auto wired

46
00:02:09.004 --> 00:02:11.007
into the class using spring,

47
00:02:11.007 --> 00:02:15.006
so you have them there to work with.

48
00:02:15.006 --> 00:02:17.000
Within the run method,

49
00:02:17.000 --> 00:02:19.008
you'll need to use the stream method

50
00:02:19.008 --> 00:02:23.001
on the Twitter streaming service that we just saw.

51
00:02:23.001 --> 00:02:25.008
It's going to return a flux that emits tweets

52
00:02:25.008 --> 00:02:29.009
and you'll need to subscribe a consumer to that flux

53
00:02:29.009 --> 00:02:33.000
that sends the tweets to Azure.

54
00:02:33.000 --> 00:02:37.005
The consumer will receive the tweets as adjacent string.

55
00:02:37.005 --> 00:02:40.009
So you'll notice that we have an object mapper

56
00:02:40.009 --> 00:02:43.001
injected into the class.

57
00:02:43.001 --> 00:02:47.004
You can use this to de serialize the Jason string

58
00:02:47.004 --> 00:02:50.006
into a stream response object.

59
00:02:50.006 --> 00:02:53.004
I've provided the stream response object

60
00:02:53.004 --> 00:02:56.009
to model the tweet coming back from Twitter.

61
00:02:56.009 --> 00:03:00.007
It's going to make it much easier to work that data.

62
00:03:00.007 --> 00:03:02.008
Now, once you finished your code,

63
00:03:02.008 --> 00:03:05.003
head over to Twitter and make a tweet

64
00:03:05.003 --> 00:03:09.006
mentioning the Landon Hotel to test out the application.

65
00:03:09.006 --> 00:03:12.000
It can be helpful for testing purposes

66
00:03:12.000 --> 00:03:15.009
to output the tweet and the sentiment to the console.

67
00:03:15.009 --> 00:03:17.009
So go ahead, give it a shot.

68
00:03:17.009 --> 00:03:19.004
You got this.

69
00:03:19.004 --> 00:03:20.005
Then once you're ready

70
00:03:20.005 --> 00:03:22.000
you can take a look at my solution.

