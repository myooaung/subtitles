WEBVTT
1
00:00:00.000 --> 00:00:05.003
(upbeat music)

2
00:00:05.003 --> 00:00:08.003
- [Narrator] So, how did the challenge go, did you enjoy it?

3
00:00:08.003 --> 00:00:11.008
Let's take a look at one way to solve the problem.

4
00:00:11.008 --> 00:00:15.007
I started my work within the Twilio client interface.

5
00:00:15.007 --> 00:00:20.006
And here, I created a new method named sendTextMessage.

6
00:00:20.006 --> 00:00:22.009
On top of this method, I annotated it

7
00:00:22.009 --> 00:00:27.003
with the headers annotation and the request line annotation.

8
00:00:27.003 --> 00:00:29.002
Inside of the headers annotation

9
00:00:29.002 --> 00:00:32.001
I specified the content type header

10
00:00:32.001 --> 00:00:37.007
and used the mime type to specify we were sending form data.

11
00:00:37.007 --> 00:00:40.004
Inside of the request line annotation,

12
00:00:40.004 --> 00:00:43.009
I indicated I would be sending an HTTP post

13
00:00:43.009 --> 00:00:47.005
and then added the path to the messages resource.

14
00:00:47.005 --> 00:00:51.004
Now, inside of this path, there is a template expression

15
00:00:51.004 --> 00:00:53.009
that I had to provide a value for.

16
00:00:53.009 --> 00:00:58.001
So, to do that, I used the param annotation

17
00:00:58.001 --> 00:01:02.008
and put that on the first parameter in the method signature.

18
00:01:02.008 --> 00:01:06.004
Now, I also needed to send additional information like

19
00:01:06.004 --> 00:01:11.000
to, from, and body over to Twilio to send the text message.

20
00:01:11.000 --> 00:01:13.004
I added parameters for those as well

21
00:01:13.004 --> 00:01:15.001
within the method signature,

22
00:01:15.001 --> 00:01:18.007
and then added the param annotation.

23
00:01:18.007 --> 00:01:22.007
After constructing the new method on the Twilio client,

24
00:01:22.007 --> 00:01:24.004
I went over to the land

25
00:01:24.004 --> 00:01:28.002
and monitor application to continue my work.

26
00:01:28.002 --> 00:01:30.001
Inside of the class, I benefited

27
00:01:30.001 --> 00:01:32.009
from the environment variables that I had established

28
00:01:32.009 --> 00:01:37.003
by injecting them into these fields on the class

29
00:01:37.003 --> 00:01:41.007
for my Twilio SID, my auth token, and my to number.

30
00:01:41.007 --> 00:01:45.003
Now, I will call out the from number constant.

31
00:01:45.003 --> 00:01:48.004
It contains my Twilio phone number.

32
00:01:48.004 --> 00:01:50.000
If you're using this example,

33
00:01:50.000 --> 00:01:53.007
make sure you switch this over to your Twilio phone number.

34
00:01:53.007 --> 00:01:58.000
It's really important you use your own Twilio phone number.

35
00:01:58.000 --> 00:02:01.000
Okay, proceeding in the class, you'll see

36
00:02:01.000 --> 00:02:06.005
that I established my Twilio client as a bean within spring.

37
00:02:06.005 --> 00:02:09.008
So, I just added the bean annotation to this method

38
00:02:09.008 --> 00:02:14.001
that's going to instantiate the Twilio client.

39
00:02:14.001 --> 00:02:17.005
Here, I created the basic auth request interceptor

40
00:02:17.005 --> 00:02:21.001
to satisfy the security scheme of Twilio.

41
00:02:21.001 --> 00:02:24.008
And then, I started to construct the Twilio client

42
00:02:24.008 --> 00:02:27.005
using the builder on the Feign class.

43
00:02:27.005 --> 00:02:30.002
This allowed me to register the interceptor

44
00:02:30.002 --> 00:02:33.006
and the form encoder to handle

45
00:02:33.006 --> 00:02:36.009
the form data that we needed to send.

46
00:02:36.009 --> 00:02:39.006
Then, it was just a call to the target method

47
00:02:39.006 --> 00:02:43.000
where I passed in the Twilio client class

48
00:02:43.000 --> 00:02:46.004
and the Twilio API domain.

49
00:02:46.004 --> 00:02:49.004
Once I had instantiated the Twilio client,

50
00:02:49.004 --> 00:02:52.009
I just returned it from the method and that creates a bean

51
00:02:52.009 --> 00:02:58.000
in the spring IOC container that I can inject anywhere.

52
00:02:58.000 --> 00:03:01.001
After that, I just needed to use the client

53
00:03:01.001 --> 00:03:03.006
to send the text message containing

54
00:03:03.006 --> 00:03:05.006
the sentiment of the tweet.

55
00:03:05.006 --> 00:03:08.004
So, we already had the sentiment derived

56
00:03:08.004 --> 00:03:11.006
in this string named message.

57
00:03:11.006 --> 00:03:14.006
So, using the Twilio client, I called

58
00:03:14.006 --> 00:03:18.006
its send text message method that we just created,

59
00:03:18.006 --> 00:03:21.007
passed in the Twilio SID, the to number,

60
00:03:21.007 --> 00:03:24.001
the from number, and the message.

61
00:03:24.001 --> 00:03:27.009
And I was able to send the text over to my phone.

62
00:03:27.009 --> 00:03:30.003
All right, let's see this in action.

63
00:03:30.003 --> 00:03:34.009
I'm going to go ahead and I will run the Java application.

64
00:03:34.009 --> 00:03:39.005
And that's going to cause it to start listening for tweets.

65
00:03:39.005 --> 00:03:41.004
So, let's go to Twitter now,

66
00:03:41.004 --> 00:03:43.008
and we're going to make two tweets.

67
00:03:43.008 --> 00:03:47.008
The first one will say, "I had the best night ever

68
00:03:47.008 --> 00:03:53.004
"at the Landon Hotel," so there's some positive sentiment.

69
00:03:53.004 --> 00:03:57.009
Now, let's have some negative sentiment in a tweet.

70
00:03:57.009 --> 00:04:03.000
"The Landon Hotel is the worst ever," that should do it.

71
00:04:03.000 --> 00:04:05.003
We'll go ahead and tweet that.

72
00:04:05.003 --> 00:04:07.009
All right, now let's inspect our console.

73
00:04:07.009 --> 00:04:11.005
You can see that we received the first tweet

74
00:04:11.005 --> 00:04:16.004
and the AI accurately identified it as positive.

75
00:04:16.004 --> 00:04:18.003
Here comes the second tweet we got

76
00:04:18.003 --> 00:04:21.001
from the Twitter streaming API.

77
00:04:21.001 --> 00:04:24.000
We were able to pass that over to Azure

78
00:04:24.000 --> 00:04:26.000
and it accurately determined

79
00:04:26.000 --> 00:04:29.002
the sentiment using its AI capabilities.

80
00:04:29.002 --> 00:04:31.009
The final thing we need to do is check our phones

81
00:04:31.009 --> 00:04:35.001
to see if we got a text message from Twilio.

82
00:04:35.001 --> 00:04:37.008
Ah, there they are, they came in.

83
00:04:37.008 --> 00:04:40.003
So that's it, that was the final challenge

84
00:04:40.003 --> 00:04:42.006
and it wraps up our course project.

85
00:04:42.006 --> 00:04:44.006
It's pretty amazing when you think about it.

86
00:04:44.006 --> 00:04:48.008
We tapped into social media, used AI, and were able

87
00:04:48.008 --> 00:04:52.005
to send text messages with a small amount of Java code.

88
00:04:52.005 --> 00:04:57.000
And that's all a testament to the power of APIs.

