WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] The text analytics API

2
00:00:02.004 --> 00:00:04.002
has a key phrase endpoint

3
00:00:04.002 --> 00:00:06.005
that can extract important information

4
00:00:06.005 --> 00:00:08.003
from a string of text.

5
00:00:08.003 --> 00:00:10.004
Let's get a closer look at the API

6
00:00:10.004 --> 00:00:15.000
and make some calls that work a little bit better with JSON.

7
00:00:15.000 --> 00:00:17.002
To get started, you'll want to navigate

8
00:00:17.002 --> 00:00:21.005
to the Azure key phrase test in the working files.

9
00:00:21.005 --> 00:00:24.006
You'll notice this test is very similar

10
00:00:24.006 --> 00:00:28.003
to our previous unit test with one key difference.

11
00:00:28.003 --> 00:00:32.003
Instead of calling the named entity recognition endpoint,

12
00:00:32.003 --> 00:00:35.004
we're now calling the key phrases endpoint

13
00:00:35.004 --> 00:00:38.002
so that we can extract those important points

14
00:00:38.002 --> 00:00:40.005
in a string of text.

15
00:00:40.005 --> 00:00:45.003
Now, if we take a look at the actual test itself

16
00:00:45.003 --> 00:00:49.008
it's functional, but it can definitely be improved.

17
00:00:49.008 --> 00:00:50.007
You'll notice

18
00:00:50.007 --> 00:00:54.009
that we are passing the example, JSON constant

19
00:00:54.009 --> 00:00:59.005
and that's just a hard-coded JSON string within our class.

20
00:00:59.005 --> 00:01:04.002
Now it's much better to work with objects in Java

21
00:01:04.002 --> 00:01:07.007
and if we take a look at the documentation

22
00:01:07.007 --> 00:01:10.004
for the text analytics API,

23
00:01:10.004 --> 00:01:14.001
we can see for the key phrases endpoint,

24
00:01:14.001 --> 00:01:18.008
we're expected to send a JSON object

25
00:01:18.008 --> 00:01:22.001
that contains an array of documents

26
00:01:22.001 --> 00:01:23.002
and within that array

27
00:01:23.002 --> 00:01:27.002
we have objects that contain a language, an id,

28
00:01:27.002 --> 00:01:29.006
and a text property.

29
00:01:29.006 --> 00:01:34.003
The text is where the key phrases will be extracted from.

30
00:01:34.003 --> 00:01:36.007
So whatever we send in that property

31
00:01:36.007 --> 00:01:40.003
is where the AI algorithm will be applied.

32
00:01:40.003 --> 00:01:44.000
So, let's talk about what that means for us in Java.

33
00:01:44.000 --> 00:01:48.007
If we navigate to the text analytics request class,

34
00:01:48.007 --> 00:01:50.004
you'll see that this class

35
00:01:50.004 --> 00:01:54.008
has essentially modeled that JSON request body

36
00:01:54.008 --> 00:01:59.006
that is expected by the Azure cognitive services API.

37
00:01:59.006 --> 00:02:05.006
So it has a list of text documents named Documents

38
00:02:05.006 --> 00:02:09.004
and then if we look at the TextDocument object,

39
00:02:09.004 --> 00:02:15.000
you'll see it has three fields language, id and text,

40
00:02:15.000 --> 00:02:18.001
and these are POJO so we have getters and setters

41
00:02:18.001 --> 00:02:20.003
for each of them.

42
00:02:20.003 --> 00:02:22.005
So this is not uncommon.

43
00:02:22.005 --> 00:02:24.009
When working with APIs,

44
00:02:24.009 --> 00:02:27.009
you will very frequently be going back and forth

45
00:02:27.009 --> 00:02:30.009
between JSON and a Java object.

46
00:02:30.009 --> 00:02:32.008
And it happens so frequently.

47
00:02:32.008 --> 00:02:36.002
There's a number of libraries out there that help us.

48
00:02:36.002 --> 00:02:42.005
So, I've included the Jackson dependency within our palm

49
00:02:42.005 --> 00:02:46.007
and Jackson is a library that can help with serialization

50
00:02:46.007 --> 00:02:51.004
and de serialization of JSON within Java.

51
00:02:51.004 --> 00:02:54.009
And we're going to learn what that means in a minute.

52
00:02:54.009 --> 00:02:57.002
If we want to use Jackson,

53
00:02:57.002 --> 00:03:00.005
we need to work with an object mapper.

54
00:03:00.005 --> 00:03:02.009
And typically in a spring application

55
00:03:02.009 --> 00:03:07.000
that is declared as a bean within your application.

56
00:03:07.000 --> 00:03:10.004
So you'll notice within our main application class

57
00:03:10.004 --> 00:03:14.004
I've created a bean of type object mapper

58
00:03:14.004 --> 00:03:16.004
and named it mapper.

59
00:03:16.004 --> 00:03:20.002
And the mapper is what we use to serialize.

60
00:03:20.002 --> 00:03:22.008
So it can take an object

61
00:03:22.008 --> 00:03:26.007
and it can convert it into a JSON string.

62
00:03:26.007 --> 00:03:31.004
It can also de serialize, so it can take adjacent string

63
00:03:31.004 --> 00:03:34.004
and convert it into a Java object.

64
00:03:34.004 --> 00:03:36.007
So it helps us with that back and forth

65
00:03:36.007 --> 00:03:39.005
between Java and JSON.

66
00:03:39.005 --> 00:03:41.004
Let's see it in action.

67
00:03:41.004 --> 00:03:46.002
If we head back over to our key phrases test,

68
00:03:46.002 --> 00:03:50.000
I'm just going to go ahead and use spring

69
00:03:50.000 --> 00:03:53.002
and it's auto wired annotation

70
00:03:53.002 --> 00:03:57.006
to inject the object mapper into this test.

71
00:03:57.006 --> 00:04:02.003
So I created a field of type object mapper, named mapper

72
00:04:02.003 --> 00:04:05.002
and then added the auto wired annotation

73
00:04:05.002 --> 00:04:07.003
and that will cause our object mapper

74
00:04:07.003 --> 00:04:11.009
to be injected into this test for our use.

75
00:04:11.009 --> 00:04:16.003
And then we just need to go ahead and build our objects.

76
00:04:16.003 --> 00:04:20.001
You'll remember we had the TextDocument,

77
00:04:20.001 --> 00:04:26.000
so let's create a new TextDocument

78
00:04:26.000 --> 00:04:30.003
and here we need to provide some values in the constructor

79
00:04:30.003 --> 00:04:32.007
the first argument is an id,

80
00:04:32.007 --> 00:04:36.001
the second is the texts that we would like to analyze,

81
00:04:36.001 --> 00:04:39.006
just use the text for analysis variable there

82
00:04:39.006 --> 00:04:41.009
and then we have to pass a language.

83
00:04:41.009 --> 00:04:45.002
So I'm going to send in "en" for English.

84
00:04:45.002 --> 00:04:49.001
If you take a look at the text for analysis variable,

85
00:04:49.001 --> 00:04:52.005
you'll see that this text just contains a blurb

86
00:04:52.005 --> 00:04:57.005
about the rain forest that we're going to send for analysis

87
00:04:57.005 --> 00:05:01.002
over to Azure cognitive services.

88
00:05:01.002 --> 00:05:05.004
Now let's build out the text analytics request.

89
00:05:05.004 --> 00:05:08.009
I'm going to name that request Body

90
00:05:08.009 --> 00:05:11.002
and that's also created

91
00:05:11.002 --> 00:05:15.007
with the new operator and the constructor.

92
00:05:15.007 --> 00:05:19.005
And then it's as simple as grabbing the documents

93
00:05:19.005 --> 00:05:24.009
on that request and inserting our newly created document

94
00:05:24.009 --> 00:05:27.005
into that list.

95
00:05:27.005 --> 00:05:28.009
One final thing,

96
00:05:28.009 --> 00:05:33.007
we need to take our hard-coded JSON string and replace it.

97
00:05:33.007 --> 00:05:36.001
So instead of just passing that string

98
00:05:36.001 --> 00:05:37.008
right into the body publisher,

99
00:05:37.008 --> 00:05:40.003
we're now going to use the mapper

100
00:05:40.003 --> 00:05:42.009
and it has a method on it.

101
00:05:42.009 --> 00:05:45.001
Value as string.

102
00:05:45.001 --> 00:05:47.006
And essentially we pass in an object

103
00:05:47.006 --> 00:05:51.005
and this method will convert it to that JSON string.

104
00:05:51.005 --> 00:05:54.004
So it's performing the serialization

105
00:05:54.004 --> 00:05:58.008
in order to turn a Java object into a JSON string

106
00:05:58.008 --> 00:06:00.005
and then that will be sent in

107
00:06:00.005 --> 00:06:05.007
as the request body on our Http request.

108
00:06:05.007 --> 00:06:09.001
So let's go ahead, we'll pass in the request body object

109
00:06:09.001 --> 00:06:11.007
that we want to serialize.

110
00:06:11.007 --> 00:06:14.003
And at this point, everything is set up.

111
00:06:14.003 --> 00:06:19.009
So let's go ahead, we can kick off the test

112
00:06:19.009 --> 00:06:22.006
and we'll just take a look at our console output.

113
00:06:22.006 --> 00:06:25.002
You can see that the AI algorithm

114
00:06:25.002 --> 00:06:28.005
extracted some key phrases.

115
00:06:28.005 --> 00:06:30.002
It's talking about the rain forest,

116
00:06:30.002 --> 00:06:33.003
a little bit of climate change there, the Amazon.

117
00:06:33.003 --> 00:06:38.000
So it was able to pick up the key points in that blurb.

118
00:06:38.000 --> 00:06:40.007
So we got a little bit broader look

119
00:06:40.007 --> 00:06:42.008
at Azure cognitive services,

120
00:06:42.008 --> 00:06:45.005
saw the new key phrase end point,

121
00:06:45.005 --> 00:06:49.000
and then also saw some techniques in Java

122
00:06:49.000 --> 00:06:53.003
for working with JSON and using the Jackson library

123
00:06:53.003 --> 00:06:55.003
to make that much easier.

124
00:06:55.003 --> 00:06:57.008
And you're going to see that conversion

125
00:06:57.008 --> 00:07:00.003
back and forth from Java to JSON,

126
00:07:00.003 --> 00:07:03.004
occur with the other clients that we use as well.

127
00:07:03.004 --> 00:07:06.000
So that's an important thing to keep in mind

128
00:07:06.000 --> 00:07:09.000
when working with APIs in Java.

