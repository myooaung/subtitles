WEBVTT
1
00:00:00.001 --> 00:00:04.007
(upbeat music)

2
00:00:04.007 --> 00:00:05.009
- [Instructor] Okay,

3
00:00:05.009 --> 00:00:07.009
I'll show you my solution to the challenge

4
00:00:07.009 --> 00:00:11.008
but keep in mind, you can solve this in many different ways.

5
00:00:11.008 --> 00:00:15.005
I started my work inside of the stream method

6
00:00:15.005 --> 00:00:18.005
within the Twitter streaming service class

7
00:00:18.005 --> 00:00:22.000
here I instantiated a client using the builder

8
00:00:22.000 --> 00:00:26.001
that was injected into the class by spring.

9
00:00:26.001 --> 00:00:28.004
The first thing I needed to do to create the client

10
00:00:28.004 --> 00:00:34.003
was specified the base URL, which is the Twitter API domain.

11
00:00:34.003 --> 00:00:37.002
I then added a default header

12
00:00:37.002 --> 00:00:42.004
to satisfy the OAuth two security scheme on the Twitter API.

13
00:00:42.004 --> 00:00:44.008
By specifying a default header

14
00:00:44.008 --> 00:00:48.008
that provided our bearer token on the client.

15
00:00:48.008 --> 00:00:53.007
It causes the bearer token to be sent with every request.

16
00:00:53.007 --> 00:00:56.000
Once I had this security in place

17
00:00:56.000 --> 00:00:59.009
I then called the build method to instantiate the client.

18
00:00:59.009 --> 00:01:02.008
Next, it was on to making the call

19
00:01:02.008 --> 00:01:07.002
that would connect our client to the stream

20
00:01:07.002 --> 00:01:11.002
that's provided by the Twitter streaming API.

21
00:01:11.002 --> 00:01:12.009
To make that connection.

22
00:01:12.009 --> 00:01:16.008
I needed to use the fluent API of the client

23
00:01:16.008 --> 00:01:21.003
to construct a get request that would be sent

24
00:01:21.003 --> 00:01:25.004
to the stream connection endpoint.

25
00:01:25.004 --> 00:01:29.007
And you can see, I specified that using the URI method.

26
00:01:29.007 --> 00:01:32.004
Once we had the connection to the stream

27
00:01:32.004 --> 00:01:34.008
and we were going to start receiving tweets

28
00:01:34.008 --> 00:01:37.002
I use the retrieve method to flip over

29
00:01:37.002 --> 00:01:39.004
to handling the response.

30
00:01:39.004 --> 00:01:43.000
Knowing we were going to receive multiple tweets

31
00:01:43.000 --> 00:01:44.006
in from the stream.

32
00:01:44.006 --> 00:01:47.004
I decided to take the response body

33
00:01:47.004 --> 00:01:50.004
to a flux of type string.

34
00:01:50.004 --> 00:01:54.004
Remember a flux is used when we expect multiple objects

35
00:01:54.004 --> 00:01:57.002
to be admitted from a publisher in the future.

36
00:01:57.002 --> 00:02:00.000
It's part of project reactor.

37
00:02:00.000 --> 00:02:02.004
One of the operators we have available

38
00:02:02.004 --> 00:02:05.002
on the flux is the filter operator.

39
00:02:05.002 --> 00:02:08.003
It allows us to specify a criteria

40
00:02:08.003 --> 00:02:12.004
that elements must meet to be emitted from the flux.

41
00:02:12.004 --> 00:02:14.008
So essentially here on line 35

42
00:02:14.008 --> 00:02:20.001
I'm not going to emit any blank tweets from our flux.

43
00:02:20.001 --> 00:02:23.000
Now, one of the things I did a little bit differently

44
00:02:23.000 --> 00:02:27.005
is I returned the flux from the stream method.

45
00:02:27.005 --> 00:02:29.006
And this essentially allows any code.

46
00:02:29.006 --> 00:02:32.002
That's using our Twitter streaming service

47
00:02:32.002 --> 00:02:35.005
to subscribe as a consumer to the flux

48
00:02:35.005 --> 00:02:37.009
and then they can handle the tweets

49
00:02:37.009 --> 00:02:42.006
as they're emitted from it in how ever they would please.

50
00:02:42.006 --> 00:02:44.009
Now the one thing I have to point out

51
00:02:44.009 --> 00:02:47.005
is we had to clean up some of our roles

52
00:02:47.005 --> 00:02:50.005
and establish a new role for our clients

53
00:02:50.005 --> 00:02:53.001
on the Twitter streaming API.

54
00:02:53.001 --> 00:02:56.004
So here you can see the call to add a role

55
00:02:56.004 --> 00:03:00.008
that will route tweets containing the Landon Hotel

56
00:03:00.008 --> 00:03:03.007
to the stream for my client.

57
00:03:03.007 --> 00:03:06.006
And you can see the roles that were established

58
00:03:06.006 --> 00:03:08.003
for my client here.

59
00:03:08.003 --> 00:03:10.004
Now, I no longer wanted our role

60
00:03:10.004 --> 00:03:12.001
that we established for LinkedIn.

61
00:03:12.001 --> 00:03:15.008
So I grabbed the ID for that role

62
00:03:15.008 --> 00:03:18.005
and then constructed another call

63
00:03:18.005 --> 00:03:20.007
that will delete that role.

64
00:03:20.007 --> 00:03:24.002
So after all this work, I had my stream

65
00:03:24.002 --> 00:03:29.000
paired down to tweets, only mentioning the Landon Hotel.

66
00:03:29.000 --> 00:03:32.004
At that point, it was time to do some integration

67
00:03:32.004 --> 00:03:35.001
between Azure and Twitter.

68
00:03:35.001 --> 00:03:36.003
And I did all that work

69
00:03:36.003 --> 00:03:40.005
within the Landon monitor application class

70
00:03:40.005 --> 00:03:43.001
and specifically the run method.

71
00:03:43.001 --> 00:03:46.004
You can see that we have injected the two services.

72
00:03:46.004 --> 00:03:49.009
It was all about mashing them up within this method.

73
00:03:49.009 --> 00:03:54.000
So to do that, I invoked the stream method

74
00:03:54.000 --> 00:03:56.004
on our Twitter streaming service.

75
00:03:56.004 --> 00:04:00.009
And this allowed me to subscribe a consumer to the flux.

76
00:04:00.009 --> 00:04:04.005
That's going to receive the tweets coming in.

77
00:04:04.005 --> 00:04:08.008
Now the tweet parameter passed into this Lambda

78
00:04:08.008 --> 00:04:11.009
is going to have adjacent string

79
00:04:11.009 --> 00:04:14.004
containing the data of the tweet.

80
00:04:14.004 --> 00:04:17.007
I spit this out to the console in line 46

81
00:04:17.007 --> 00:04:21.005
just so I can see what tweets are coming in

82
00:04:21.005 --> 00:04:25.008
but ultimately I want to get that JSON over to an object.

83
00:04:25.008 --> 00:04:29.003
So I used the Jackson object mapper

84
00:04:29.003 --> 00:04:33.003
and its read value method to de serialize

85
00:04:33.003 --> 00:04:38.004
that JSON into an object of type stream response.

86
00:04:38.004 --> 00:04:41.009
Once I had the tweet in an object

87
00:04:41.009 --> 00:04:46.001
I was then able to extract that tweet

88
00:04:46.001 --> 00:04:48.004
and pass it over

89
00:04:48.004 --> 00:04:51.005
to the Azure cognitive services,

90
00:04:51.005 --> 00:04:53.008
text analytics API

91
00:04:53.008 --> 00:04:57.002
for the sentiment analysis to be performed.

92
00:04:57.002 --> 00:05:01.001
So you'll remember that we built the Azure sentiment service

93
00:05:01.001 --> 00:05:02.007
in the last challenge.

94
00:05:02.007 --> 00:05:06.007
And specifically this requests, sentiment analysis method

95
00:05:06.007 --> 00:05:09.000
all I'm doing is passing the tweet

96
00:05:09.000 --> 00:05:11.006
to Azure to get the sentiment.

97
00:05:11.006 --> 00:05:13.009
And we get that sentiment back

98
00:05:13.009 --> 00:05:18.002
in an object of type sentiment analysis.

99
00:05:18.002 --> 00:05:20.006
And from here, I can just check whether or not

100
00:05:20.006 --> 00:05:23.001
the sentiment was positive or negative,

101
00:05:23.001 --> 00:05:25.005
and you can see I construct this message

102
00:05:25.005 --> 00:05:27.006
depending upon the results

103
00:05:27.006 --> 00:05:31.004
and that message ultimately gets printed to the console.

104
00:05:31.004 --> 00:05:33.009
So that was how I solved it.

105
00:05:33.009 --> 00:05:35.008
Let's take a look at this in action.

106
00:05:35.008 --> 00:05:39.008
I'm going to go ahead and launch the application.

107
00:05:39.008 --> 00:05:41.004
We can see it fire up there.

108
00:05:41.004 --> 00:05:43.005
There's our console.

109
00:05:43.005 --> 00:05:46.006
And then let's head over to Twitter

110
00:05:46.006 --> 00:05:50.007
and we're going to make some tweets about the Landon Hotel.

111
00:05:50.007 --> 00:05:55.008
So I had the best night of my life

112
00:05:55.008 --> 00:06:00.000
at the Landon Hotel.

113
00:06:00.000 --> 00:06:03.001
So there's one tweet with positive sentiment.

114
00:06:03.001 --> 00:06:08.005
Let's say I had the worst night ever at the Landon Hotel.

115
00:06:08.005 --> 00:06:11.007
Some negative sentiment will tweet that.

116
00:06:11.007 --> 00:06:15.001
Now let's head back over, check our console.

117
00:06:15.001 --> 00:06:19.002
There we can see the positive tweet came in from the stream

118
00:06:19.002 --> 00:06:20.009
and the AI

119
00:06:20.009 --> 00:06:24.001
on the text analytics API

120
00:06:24.001 --> 00:06:26.008
was able to pick that up as positive.

121
00:06:26.008 --> 00:06:29.003
We just got the negative tweet in

122
00:06:29.003 --> 00:06:33.000
and you can see the AI was able to distinguish

123
00:06:33.000 --> 00:06:34.005
between the two.

124
00:06:34.005 --> 00:06:40.003
So using the sentiment service on that text analytics API

125
00:06:40.003 --> 00:06:43.000
we're able to garner the sentiment

126
00:06:43.000 --> 00:06:46.009
from this content that is appearing on Twitter.

127
00:06:46.009 --> 00:06:49.000
Okay, so that's how I approached it.

128
00:06:49.000 --> 00:06:51.001
Your solution might look a little bit different.

129
00:06:51.001 --> 00:06:52.007
That is fine.

130
00:06:52.007 --> 00:06:55.005
Just make sure you're monitoring application

131
00:06:55.005 --> 00:06:58.002
for Landon Hotel is receiving tweets

132
00:06:58.002 --> 00:07:00.005
and it's analyzing them per sentiment.

133
00:07:00.005 --> 00:07:02.008
We'll need this functionality in place

134
00:07:02.008 --> 00:07:06.000
for the final piece of the course project.

