WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.650 --> 00:00:03.360
To make this project now come to life,

00:00:03.360 --> 00:00:07.980
we need to add a script and also discover how we can draw to the canvas.

00:00:07.980 --> 00:00:11.220
At the bottom of our index or html,

00:00:11.220 --> 00:00:13.545
just above the clause and body,

00:00:13.545 --> 00:00:23.280
let's add our script with the source of script.js.

00:00:23.280 --> 00:00:27.250
Over to the sidebar, we can now create this script.js.

00:00:31.460 --> 00:00:35.620
Now we've got a canvas elements inside of our html,

00:00:35.620 --> 00:00:38.365
and this also has the ID of canvas.

00:00:38.365 --> 00:00:41.555
But how do we actually go about drawing to this canvas?

00:00:41.555 --> 00:00:46.990
Well, the first thing we want to do is to create a constant called canvas.

00:00:46.990 --> 00:00:51.600
Inside here, we're going to select this canvas by the ID,

00:00:51.600 --> 00:00:56.100
so getElementByID and the ID was canvas.

00:00:56.100 --> 00:01:00.340
This is now giving us our reference to our html element.

00:01:00.340 --> 00:01:04.264
We then need to access what is called the rendering context.

00:01:04.264 --> 00:01:07.490
This will allow us to access a range of drawing functions,

00:01:07.490 --> 00:01:10.210
so we can manipulate what is on the canvas.

00:01:10.210 --> 00:01:15.005
The way we can do this is by accessing our canvas elements,

00:01:15.005 --> 00:01:17.045
which we restored above.

00:01:17.045 --> 00:01:22.835
We can access the context by using a method called getContext.

00:01:22.835 --> 00:01:26.245
We're only going to be accessing the 2D features,

00:01:26.245 --> 00:01:27.715
so we pass in 2D.

00:01:27.715 --> 00:01:31.820
Then we're going to store this in a constant called ctx.

00:01:31.820 --> 00:01:36.460
The ctx references is used each time we want to draw to the canvas.

00:01:36.460 --> 00:01:42.745
For example, this context has a fillText method to draw a text onto our canvas.

00:01:42.745 --> 00:01:44.800
Let's access our context,

00:01:44.800 --> 00:01:48.565
and then we can make use of one of these drawing functions which we mentioned,

00:01:48.565 --> 00:01:51.100
which is going to be called fillText.

00:01:51.100 --> 00:01:53.245
Inside here as a string,

00:01:53.245 --> 00:01:57.785
we're going to pass in some text which we want to display onto the canvas.

00:01:57.785 --> 00:02:00.705
Add anything inside here.

00:02:00.705 --> 00:02:02.930
We can then add two more values,

00:02:02.930 --> 00:02:05.090
which is the width and also the height.

00:02:05.090 --> 00:02:09.515
Let's go for 100 pixels and 50 pixels.

00:02:09.515 --> 00:02:15.630
Then let's see this over in the browser. Take this down.

00:02:15.630 --> 00:02:18.560
The darker text color doesn't stand out too much,

00:02:18.560 --> 00:02:21.245
but this is now our text on the canvas.

00:02:21.245 --> 00:02:24.745
We can also create shapes such as a rectangle,

00:02:24.745 --> 00:02:27.560
and we can also either use the stroke,

00:02:27.560 --> 00:02:30.305
which is the outline of the rectangle or the shape,

00:02:30.305 --> 00:02:34.585
or we can use a fill which is going to create a filled shape.

00:02:34.585 --> 00:02:38.840
Let's take a look at how we can create a rectangle in the canvas.

00:02:38.840 --> 00:02:41.915
We, again, access the context.

00:02:41.915 --> 00:02:45.730
We can then fill a rectangle with fillRect.

00:02:45.730 --> 00:02:48.260
We're then going to pass in all different values.

00:02:48.260 --> 00:02:50.630
The first two, easy x and y

00:02:50.630 --> 00:02:55.000
coordinates of the canvas where we would like to start this rectangle.

00:02:55.000 --> 00:02:59.390
If we entered a x value is zero and the y value is zero,

00:02:59.390 --> 00:03:04.075
this replace our rectangle on the top left corner of the canvas.

00:03:04.075 --> 00:03:08.960
A third and fourth values are going to be the size of the rectangle.

00:03:08.960 --> 00:03:12.820
If want this to be 50 by 100,

00:03:12.820 --> 00:03:16.380
this is now 50 pixels wide and 100 tall.

00:03:16.380 --> 00:03:19.490
If we didn't want this solid color and we just wanted an outline,

00:03:19.490 --> 00:03:22.440
we could change this to the strokeRect.

00:03:22.640 --> 00:03:27.710
This stroke and this fill can also apply when we create different shapes too.

00:03:27.710 --> 00:03:31.370
Rather than specifying a fixed size just like this,

00:03:31.370 --> 00:03:38.325
we can also access our canvas object and pass this in as a variable.

00:03:38.325 --> 00:03:46.230
We can set the canvas width and also the canvas, the height.

00:03:46.230 --> 00:03:52.075
This is now going to give us a rectangle which is the height and the width of the canvas.

00:03:52.075 --> 00:03:54.590
We can also use different colored objects too.

00:03:54.590 --> 00:04:02.310
The way we can change the color is by accessing the context and then using the fillStyle.

00:04:02.960 --> 00:04:08.950
I want to set this next rectangles be equal to the x value of 42e9f5.

00:04:09.680 --> 00:04:13.025
Let's now move this up above our rectangle.

00:04:13.025 --> 00:04:19.725
We can change this to be a filledRectangle and also make this a little smaller.

00:04:19.725 --> 00:04:25.645
Let's change this to be 50 by 50 to give us a square.

00:04:25.645 --> 00:04:28.700
Another example of what we can do with the canvas is to draw

00:04:28.700 --> 00:04:32.105
some lines to create some more complex shapes.

00:04:32.105 --> 00:04:35.660
For example, if we wanted to create something like a triangle,

00:04:35.660 --> 00:04:39.685
we can then create a series of lines to create the shape.

00:04:39.685 --> 00:04:44.820
We're going to begin our shape with ctx.beginPath.

00:04:44.820 --> 00:04:50.990
BeginPath will start or reset any existing paths which we created above.

00:04:50.990 --> 00:04:54.965
After this, we're going to declare exactly whereabout on the canvas,

00:04:54.965 --> 00:04:57.125
we want to begin our join.

00:04:57.125 --> 00:05:02.195
For example, if we wanted to start this at the very center of the canvas,

00:05:02.195 --> 00:05:03.995
we will do ctx.moveTo.

00:05:03.995 --> 00:05:08.000
MoveTo is going to move

00:05:08.000 --> 00:05:14.320
our reference points to any place on the canvas without actually drawing any lines.

00:05:14.320 --> 00:05:20.594
The way we can place this into the center is by setting the canvas.width,

00:05:20.594 --> 00:05:24.225
and then divide it by 2 to place this into the center.

00:05:24.225 --> 00:05:30.195
Then we can do the same for the canvas.height by dividing this by 2.

00:05:30.195 --> 00:05:33.950
Right now, we should be in a position where we're ready to

00:05:33.950 --> 00:05:38.120
draw some straight lines from the center of our canvas.

00:05:38.120 --> 00:05:43.105
We access our context and then lineTo.

00:05:43.105 --> 00:05:47.210
If you wanted to draw a line to the top right-hand corner,

00:05:47.210 --> 00:05:51.250
the coordinates we need at the moment are 300 and zero.

00:05:51.250 --> 00:05:55.960
So 300 for the x value and zero for the y value.

00:05:55.960 --> 00:05:59.285
Why do we need these two exact values?

00:05:59.285 --> 00:06:01.655
Well, this is because by default,

00:06:01.655 --> 00:06:07.945
the canvas is 300 pixels wide by 150 pixels tall.

00:06:07.945 --> 00:06:11.390
If this position in the top-left is zero, zero,

00:06:11.390 --> 00:06:13.265
the first value of 300,

00:06:13.265 --> 00:06:15.775
we'll place this right at the very end.

00:06:15.775 --> 00:06:19.955
We then use the zero value to stay at the very top of the canvas.

00:06:19.955 --> 00:06:22.730
If we added any other values inside of here,

00:06:22.730 --> 00:06:25.195
this will then push this further down.

00:06:25.195 --> 00:06:29.135
We've actually created our first line with the series on the canvas.

00:06:29.135 --> 00:06:31.220
We also need to use ctx.stroke.

00:06:31.220 --> 00:06:38.215
Then all we need to do from here is to create a series of lines.

00:06:38.215 --> 00:06:43.355
The next one, if we want to make this from the top right down to the bottom right,

00:06:43.355 --> 00:06:46.325
we start by keeping the x value as 300,

00:06:46.325 --> 00:06:48.050
which is right at the very end.

00:06:48.050 --> 00:06:52.390
As we described the canvas height by default is going to be 150,

00:06:52.390 --> 00:06:56.570
but this leaves us a line from the top right to the bottom right.

00:06:56.570 --> 00:06:59.705
If we wanted to enjoin this back into the center,

00:06:59.705 --> 00:07:01.955
we then have two options.

00:07:01.955 --> 00:07:05.150
We could go ahead and create a new line just like we

00:07:05.150 --> 00:07:08.310
did with these two lines of code, or instead,

00:07:08.310 --> 00:07:09.980
we can move back to the beginning,

00:07:09.980 --> 00:07:16.020
which is the center of the canvas by using ctx.closePath.

00:07:17.770 --> 00:07:20.685
I will now have a triangle.

00:07:20.685 --> 00:07:23.695
If we wanted to fill this with a solid color,

00:07:23.695 --> 00:07:26.575
we could replace the stroke with fill.

00:07:26.575 --> 00:07:30.995
This is now a basic introduction to join on the canvas.

00:07:30.995 --> 00:07:34.660
This is all great, but we don't need any of this for our project.

00:07:34.660 --> 00:07:38.275
Instead, we need to draw a image onto this canvas.

00:07:38.275 --> 00:07:40.855
Instead, we're going to remove this section,

00:07:40.855 --> 00:07:43.460
and we can create a new image elements.

00:07:43.460 --> 00:07:47.770
We can create a new image elements with new image.

00:07:47.770 --> 00:07:50.680
This new image constructor is going to create

00:07:50.680 --> 00:07:56.525
a new image elements just like we did when we use documents.CreateElements.

00:07:56.525 --> 00:07:59.950
Throw this in a constant called img.

00:08:00.350 --> 00:08:03.960
Next, we need to set a image source.

00:08:03.960 --> 00:08:07.900
We need to grab our image and set the source

00:08:07.900 --> 00:08:13.370
attribute to be equal to our image, which is bridge.jpg.

00:08:15.530 --> 00:08:20.765
Remember to change this image source if you have used a different image.

00:08:20.765 --> 00:08:24.280
We now have a new image elements and we've set the source.

00:08:24.280 --> 00:08:27.250
Now we need to position this on the canvas.

00:08:27.250 --> 00:08:28.720
But just before we do this,

00:08:28.720 --> 00:08:31.600
we need to actually make sure that this image has been

00:08:31.600 --> 00:08:35.035
created before we tried to draw this on the canvas.

00:08:35.035 --> 00:08:37.734
The way we can do with this is by using onload,

00:08:37.734 --> 00:08:42.145
which is going to run a function once our image has been created.

00:08:42.145 --> 00:08:47.090
Inside this function, we're going to draw our new image to the canvas.

00:08:47.090 --> 00:08:49.755
As ever, we select our context,

00:08:49.755 --> 00:08:53.140
and then we have access to drawImage.

00:08:53.960 --> 00:08:56.870
The first thing we need to add in is the image,

00:08:56.870 --> 00:09:00.305
which you want to draw, and this is our image variable.

00:09:00.305 --> 00:09:05.315
Then we set the position on the canvas where we want this image to be displayed.

00:09:05.315 --> 00:09:07.715
If we set this to be zero and zero,

00:09:07.715 --> 00:09:10.855
this will be displayed from the top left-hand corner.

00:09:10.855 --> 00:09:13.010
We now see an image on the screen,

00:09:13.010 --> 00:09:16.325
but the image is far too big for the canvas.

00:09:16.325 --> 00:09:19.629
Another thing we can do is to add two more values,

00:09:19.629 --> 00:09:22.795
and this is to set the image width and height.

00:09:22.795 --> 00:09:29.120
If we set this to be 300 with the height and at 150 for the width,

00:09:29.120 --> 00:09:33.670
this will now make sure our image is now the same size as the canvas.

00:09:33.670 --> 00:09:36.200
Even though we now see this image on the screen,

00:09:36.200 --> 00:09:38.570
it doesn't look too high-quality.

00:09:38.570 --> 00:09:44.570
Now, this is because the image has now been stretched to be the same size as a canvas.

00:09:44.570 --> 00:09:47.400
However, we can switch it around and make sure that

00:09:47.400 --> 00:09:51.640
the canvas is then expanded to be the same size as the image.

00:09:51.640 --> 00:09:54.755
Let's do this just above where we draw our image.

00:09:54.755 --> 00:09:57.140
We can set the width of our canvas with

00:09:57.140 --> 00:10:01.780
canvas.width to be equal to the width of our image.

00:10:01.780 --> 00:10:05.615
Just below, exactly the same for our height,

00:10:05.615 --> 00:10:09.870
we set the canvas height to be equal to our image height.

00:10:11.180 --> 00:10:16.520
We can move the last two values where we set our image size inside the drawImage.

00:10:16.520 --> 00:10:18.920
This will now give us a clear image since

00:10:18.920 --> 00:10:22.655
the canvas is now stretched to be the same size as the image.

00:10:22.655 --> 00:10:26.655
This is a basic overview of some of the things we can deal with the canvas.

00:10:26.655 --> 00:10:31.804
But we only going to be using this to add images and manipulate the pixels.

00:10:31.804 --> 00:10:35.105
Next, we want to make use of our file uploader,

00:10:35.105 --> 00:10:37.760
which we added at the top of this sidebar.

00:10:37.760 --> 00:10:40.790
This is going to allow the user to select an image of

00:10:40.790 --> 00:10:45.600
their computer rather than using this hard-coded value just here.
