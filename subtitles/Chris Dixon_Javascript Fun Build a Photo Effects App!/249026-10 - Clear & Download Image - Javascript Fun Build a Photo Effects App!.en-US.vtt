WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.170 --> 00:00:03.270
The final steps for this project is to add

00:00:03.270 --> 00:00:06.900
the functionality to clear any effects from the original image,

00:00:06.900 --> 00:00:10.185
and also to set up this Download button too.

00:00:10.185 --> 00:00:13.440
We'll start with the Clear button which is going to remove any of

00:00:13.440 --> 00:00:17.370
the applied effects and reinstate the original image.

00:00:17.370 --> 00:00:20.100
Applying this is pretty straightforward.

00:00:20.100 --> 00:00:22.740
All we're going to do is to write a function which

00:00:22.740 --> 00:00:25.710
will be triggered when the Clear button is pressed.

00:00:25.710 --> 00:00:29.700
This will then access the file reader's original results,

00:00:29.700 --> 00:00:32.760
and then we can set it to be the image source.

00:00:32.760 --> 00:00:41.950
Let's go back over to our script and let's create a new function called clearChanges.

00:00:42.950 --> 00:00:47.164
First of all, let's do a console log for our FileReader,

00:00:47.164 --> 00:00:50.450
and then we can call our function from our Clear button,

00:00:50.450 --> 00:00:53.340
which is index number 7.

00:00:55.610 --> 00:00:58.890
Let's try this out. Over in the browser we can go into

00:00:58.890 --> 00:01:02.550
the Developer tools, into the Console.

00:01:02.550 --> 00:01:07.000
If we click on the Clear, we now have access to our FileReader.

00:01:07.000 --> 00:01:09.290
Just like earlier before we set an image,

00:01:09.290 --> 00:01:11.570
we see the result is set to null.

00:01:11.570 --> 00:01:18.610
But if we were to upload any image and then click on Clear,

00:01:18.610 --> 00:01:23.765
we then get a new FileReader results with the results of our image.

00:01:23.765 --> 00:01:26.990
We can now access this FileReader.result,

00:01:26.990 --> 00:01:29.845
and then set the image source.

00:01:29.845 --> 00:01:32.460
Let's remove the console log.

00:01:32.460 --> 00:01:35.290
We can then access our image variable,

00:01:35.290 --> 00:01:42.790
and set the source to be equal to the reader.result. Let's try this out.

00:01:45.020 --> 00:01:50.315
The first thing we need to do is to apply any effect such as invert.

00:01:50.315 --> 00:01:54.955
Clear this, and we now have access to the original image.

00:01:54.955 --> 00:01:57.170
Finally, we also have the Download button,

00:01:57.170 --> 00:02:02.390
which is going to allow the user to download the image after they've placed any effects.

00:02:02.390 --> 00:02:04.955
Over to our script,

00:02:04.955 --> 00:02:09.300
we can create this as a function called download.

00:02:09.620 --> 00:02:14.540
Then inside here we're going to create a constant to store our image.

00:02:14.540 --> 00:02:18.110
We crop the image which you want from the canvas,

00:02:18.110 --> 00:02:22.655
and then use a method called toDataURL.

00:02:22.655 --> 00:02:30.875
ToDataURL will return the URL of our canvas image in a default PNG image format.

00:02:30.875 --> 00:02:33.695
If we wanted this in a different format,

00:02:33.695 --> 00:02:37.345
we could change this to be image.jpeg.

00:02:37.345 --> 00:02:39.120
If browser support allows,

00:02:39.120 --> 00:02:41.580
we can also use WebP2.

00:02:41.580 --> 00:02:45.344
I'm just going to consider this as the default PNG,

00:02:45.344 --> 00:02:46.785
and as mentioned before,

00:02:46.785 --> 00:02:51.030
this toDataURL will return the image URL.

00:02:51.030 --> 00:02:54.745
How do we actually go about downloading this image?

00:02:54.745 --> 00:02:58.670
Well, we can download an image URL with a link.

00:02:58.670 --> 00:03:01.415
We can create a link using the a element,

00:03:01.415 --> 00:03:05.950
and the way we do this is document.createElement,

00:03:05.950 --> 00:03:08.760
which will create a link for us,

00:03:08.760 --> 00:03:10.980
and we can create our link inside here,

00:03:10.980 --> 00:03:12.990
which is a a element.

00:03:12.990 --> 00:03:16.275
Store this inside of a constant called link.

00:03:16.275 --> 00:03:19.685
Just like any regular HTML link,

00:03:19.685 --> 00:03:21.500
we can also access this,

00:03:21.500 --> 00:03:23.770
and set the href.

00:03:23.770 --> 00:03:27.250
The href is the URL which we're going to link to,

00:03:27.250 --> 00:03:32.785
and we already have our URL just above stored inside of this image variable.

00:03:32.785 --> 00:03:35.600
Next, we're also going to access our link,

00:03:35.600 --> 00:03:38.139
and add the download attribute,

00:03:38.139 --> 00:03:42.585
setting this to equal to be image.png.

00:03:42.585 --> 00:03:47.210
This download attributes which we just added to our link will specify

00:03:47.210 --> 00:03:51.820
that the target will be downloaded when the user clicks on this link.

00:03:51.820 --> 00:03:54.890
This means when a user clicks on this link,

00:03:54.890 --> 00:03:58.385
it will download whatever is set to the href,

00:03:58.385 --> 00:04:00.550
which is our image.

00:04:00.550 --> 00:04:05.725
What we've effectively done now is created a fake HTML link element,

00:04:05.725 --> 00:04:08.025
which we've not displayed in the browser.

00:04:08.025 --> 00:04:11.480
This means because the link is not displaying in the browser,

00:04:11.480 --> 00:04:15.730
we can't click on it in the usual way to download this image.

00:04:15.730 --> 00:04:21.440
Instead, we can simulate a mouse click on an element by using the click method.

00:04:21.440 --> 00:04:24.130
To access our will link elements,

00:04:24.130 --> 00:04:26.385
call the click method,

00:04:26.385 --> 00:04:30.220
and let's link this download function with our button.

00:04:30.220 --> 00:04:33.550
This is button number 8,

00:04:36.080 --> 00:04:41.940
which will trigger our download method and we can select the image to test this out.

00:04:42.890 --> 00:04:47.835
Choose any of these effects, click on Download.

00:04:47.835 --> 00:04:51.570
There seems to be an issue, so let's go into the console,

00:04:51.570 --> 00:04:54.280
we can right-click and inspect.

00:04:54.580 --> 00:04:59.525
We'll see canvas.toDataURL is not a function,

00:04:59.525 --> 00:05:02.195
so let's go to our download function.

00:05:02.195 --> 00:05:08.925
I think we just need changes to be capital letters for URL. Let's try this.

00:05:08.925 --> 00:05:16.365
Choose a file. Click on the Download,

00:05:16.365 --> 00:05:18.600
and our image is now downloaded.

00:05:18.600 --> 00:05:22.340
This now leaves us with a working Clear and Download button.

00:05:22.340 --> 00:05:23.810
Thank you for taking this project,

00:05:23.810 --> 00:05:26.280
and I will see you in the next one.
