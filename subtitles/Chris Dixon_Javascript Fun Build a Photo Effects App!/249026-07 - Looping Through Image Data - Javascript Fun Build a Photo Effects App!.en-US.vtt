WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.550 --> 00:00:06.134
Now we know that everything which is on the canvas or all of our pixels,

00:00:06.134 --> 00:00:09.210
are now stored in this constant called imageData.

00:00:09.210 --> 00:00:13.215
We can now use this to loop through all of our data,

00:00:13.215 --> 00:00:14.655
which is stored inside,

00:00:14.655 --> 00:00:18.030
and then we can play around with the pixel values.

00:00:18.030 --> 00:00:20.715
To do this, we're going to create a function,

00:00:20.715 --> 00:00:25.905
where we can grab this pixel data and have a little play around with each of the values.

00:00:25.905 --> 00:00:31.360
So I function, and I what to call this change.

00:00:32.240 --> 00:00:35.845
We can also remove our console log from above.

00:00:35.845 --> 00:00:40.290
We can grab this line of code just here.

00:00:40.290 --> 00:00:44.565
Put this out and paste this inside of our change function.

00:00:44.565 --> 00:00:50.000
All of our pixel data inside this variable is stored in this data property.

00:00:50.000 --> 00:00:54.140
So we can access this and create new constant called data,

00:00:54.140 --> 00:00:57.540
and set this equal to imageData.data,

00:00:59.360 --> 00:01:05.785
and this will give us access to all of the pixel values inside of this data property.

00:01:05.785 --> 00:01:08.240
So we know there is hundreds, thousands,

00:01:08.240 --> 00:01:12.035
or even millions of pieces of data inside of this property.

00:01:12.035 --> 00:01:16.760
So the best thing we can do is to loop through each one of these in batches of four.

00:01:16.760 --> 00:01:19.730
If we loop through this in batches of four,

00:01:19.730 --> 00:01:24.135
we know that the first value in each loop is always going to be the red value.

00:01:24.135 --> 00:01:26.815
The second value is always going to be the green,

00:01:26.815 --> 00:01:30.835
and the third value is always going to be the blue value.

00:01:30.835 --> 00:01:35.960
So to do this inside of our change function we're going to create a for-loop.

00:01:36.060 --> 00:01:40.195
Once the loop runs, we'll create a new variable called i,

00:01:40.195 --> 00:01:42.980
and initially set this to be 0.

00:01:42.980 --> 00:01:45.960
We want this for-loop to keep running as long as

00:01:45.960 --> 00:01:48.885
there's values stored inside of our data.

00:01:48.885 --> 00:01:54.830
So we'll keep this going as long as i is less than data.length.

00:01:55.130 --> 00:02:00.145
So data is all of our image data and length is the number of items,

00:02:00.145 --> 00:02:04.840
so our loop will keep running as long as there's pixel data to loop through.

00:02:04.840 --> 00:02:10.840
The third statement we're going to say i plus equals 4.

00:02:11.000 --> 00:02:13.050
So on the very first loop,

00:02:13.050 --> 00:02:15.980
we'll set the variable of i to be equal to 0,

00:02:15.980 --> 00:02:20.200
and then for each loop after we'll increment this value by four.

00:02:20.200 --> 00:02:22.745
We do this because as we already know,

00:02:22.745 --> 00:02:25.235
each pixel has four values.

00:02:25.235 --> 00:02:31.570
So increasing this by four on each loop will be the beginning of each set of pixel data.

00:02:31.570 --> 00:02:35.870
On the very first loop we'll grab the first four pixel values.

00:02:35.870 --> 00:02:38.290
This will be these ones just here.

00:02:38.290 --> 00:02:40.770
We can access these with data,

00:02:40.770 --> 00:02:42.350
and just like an array,

00:02:42.350 --> 00:02:44.030
we can access the very first one,

00:02:44.030 --> 00:02:45.485
which is the red value,

00:02:45.485 --> 00:02:47.185
we did data i.

00:02:47.185 --> 00:02:48.795
Remember at the very beginning,

00:02:48.795 --> 00:02:50.465
i is equal to 0,

00:02:50.465 --> 00:02:53.530
so this will be exactly the same as data 0.

00:02:53.530 --> 00:02:56.705
If we duplicate this two more times,

00:02:56.705 --> 00:03:01.305
we can get the second value with the index number of one.

00:03:01.305 --> 00:03:02.875
This is the value of green,

00:03:02.875 --> 00:03:05.875
and the blue value with the number of two.

00:03:05.875 --> 00:03:10.865
If we wanted to, we could also grab the Alpha or the transparency value,

00:03:10.865 --> 00:03:13.490
but we don't need this for this example.

00:03:13.490 --> 00:03:16.895
This is the first batch or the first four values.

00:03:16.895 --> 00:03:18.665
Once this loop has run,

00:03:18.665 --> 00:03:20.950
the value of i will be incremented by four,

00:03:20.950 --> 00:03:24.940
and then this will move on to the next set of four values,

00:03:24.940 --> 00:03:27.015
leaving i to be equal to 4,

00:03:27.015 --> 00:03:28.545
5, 6, and 7.

00:03:28.545 --> 00:03:31.010
Therefore, rather than having these hardcoded values,

00:03:31.010 --> 00:03:33.125
we can set this to be equal to i,

00:03:33.125 --> 00:03:36.170
which is the first of each set of four,

00:03:36.170 --> 00:03:40.290
and i plus 1, and then i plus 2.

00:03:40.290 --> 00:03:43.970
This first line here is always going to be equal to a red value.

00:03:43.970 --> 00:03:46.760
This is always going to be equal to our green values,

00:03:46.760 --> 00:03:50.015
and this is always going to be equal to our blue values.

00:03:50.015 --> 00:03:53.240
So if we want to play around with these colors,

00:03:53.240 --> 00:03:58.715
an RGB value goes from zero right through to 255.

00:03:58.715 --> 00:04:03.500
So for example, we could set the red value to be equal to 255.

00:04:03.500 --> 00:04:08.870
To see these changes, we now need to apply these pixels back onto the canvas.

00:04:08.870 --> 00:04:12.865
To do this, we can use a method called putImageData.

00:04:12.865 --> 00:04:15.205
So just after our for-loop,

00:04:15.205 --> 00:04:17.210
we can again access our context,

00:04:17.210 --> 00:04:20.700
and then the method called putImageData.

00:04:20.700 --> 00:04:26.250
The data we want to put back onto the canvas is this imageData.

00:04:28.150 --> 00:04:34.525
I'm going to apply this at the very top left to the canvas with the position of 0, 0.

00:04:34.525 --> 00:04:37.170
Then finally, lets call this change function,

00:04:37.170 --> 00:04:40.565
we need to add a click handler to our first button.

00:04:40.565 --> 00:04:42.574
Inside of our index,

00:04:42.574 --> 00:04:44.510
we'll start with the greyscale button,

00:04:44.510 --> 00:04:48.420
which is the first button in this effect section.

00:04:49.010 --> 00:04:55.240
Let's grab this Word documents and this time we'll use querySelectorAll.

00:04:55.240 --> 00:04:58.805
This is going to grab all of the elements on our page,

00:04:58.805 --> 00:05:01.210
which has the type of button.

00:05:01.210 --> 00:05:03.660
Because we have multiple buttons,

00:05:03.660 --> 00:05:08.885
we then need to select our first button with the index position of zero.

00:05:08.885 --> 00:05:14.164
Using addEventListener, we can then listen out for any click events,

00:05:14.164 --> 00:05:17.600
which are then going to run our change function.

00:05:17.600 --> 00:05:21.160
Let's try this out over in the browser.

00:05:21.160 --> 00:05:29.560
Lets restart our live server, choose new image.

00:05:31.460 --> 00:05:33.810
Then if we click on our first button,

00:05:33.810 --> 00:05:35.139
which is the greyscale,

00:05:35.139 --> 00:05:37.610
we then set all of the red values inside of

00:05:37.610 --> 00:05:42.505
our image data to be a strong red value of 255.

00:05:42.505 --> 00:05:44.895
Let's now update our for-loop,

00:05:44.895 --> 00:05:49.055
and we'll reinstate our red colors to be exactly how they are in the image.

00:05:49.055 --> 00:05:51.245
Go down to our green section,

00:05:51.245 --> 00:05:54.770
where we'll instead set the green to be 255.

00:05:54.770 --> 00:06:02.245
Upload this image, click on our function and we now see the green color take an effect.

00:06:02.245 --> 00:06:05.990
We could also do the same to the third or the blue value too.

00:06:05.990 --> 00:06:09.650
This is all we need to do to apply effects to our images.

00:06:09.650 --> 00:06:12.560
Now it's just the case of adjusting the color values of

00:06:12.560 --> 00:06:16.525
our pixels depending on which effects we want to apply,

00:06:16.525 --> 00:06:21.420
and this is what we're going to begin to do next when we apply a greyscale effect.
