WEBVTT
1
00:00:00.630 --> 00:00:02.880
Welcome to the next section of this course.

2
00:00:03.840 --> 00:00:07.410
So in this section, we'll be taking a look at dramatization.

3
00:00:07.800 --> 00:00:12.810
And this lecture is an introduction to explain what we're going to cover and what we're going to try

4
00:00:12.810 --> 00:00:13.530
and implement.

5
00:00:15.130 --> 00:00:21.280
So the problems we have with our current code is that much of what we have written so far is hard coded.

6
00:00:22.370 --> 00:00:24.260
A lot of our code is repetitive.

7
00:00:24.530 --> 00:00:28.190
For example, initiating the driver in each test class.

8
00:00:29.630 --> 00:00:36.260
Our code is also difficult to maintain and if we wanted to change the browser type or go to a different

9
00:00:36.270 --> 00:00:40.400
URL, then we would need to update each class each time.

10
00:00:42.010 --> 00:00:45.400
Luckily there is a better way to make our code more maintainable.

11
00:00:45.910 --> 00:00:48.370
And this section of the course explains how.

12
00:00:50.980 --> 00:00:53.380
So problems with the code are shown below.

13
00:00:53.980 --> 00:01:00.760
So you can see that in each class we set the system properties and we also initiate the driver.

14
00:01:01.720 --> 00:01:05.500
And in the test itself, or we might do this in the before test.

15
00:01:05.500 --> 00:01:09.970
The notation is that we use driver don't get to visit AOL.

16
00:01:11.690 --> 00:01:12.830
So improvement idea.

17
00:01:12.830 --> 00:01:18.650
One is to create global variables in a separate file that we then pass to our tests.

18
00:01:19.670 --> 00:01:23.570
This means our test will observe the value from the external file.

19
00:01:24.920 --> 00:01:30.980
If we change the global variable value, then all tests observed in this variable will be updated with

20
00:01:30.980 --> 00:01:32.600
the new value at execution.

21
00:01:34.180 --> 00:01:38.860
This makes our code more maintainable and follows the observer design pattern.

22
00:01:41.210 --> 00:01:47.240
Improvement Idea two is to make it easier for us to switch between browser types.

23
00:01:48.500 --> 00:01:54.320
Currently, if you want to change your browser from Chrome to Firefox or Edge, then we need to amend

24
00:01:54.320 --> 00:01:57.140
the code in each individual Java class.

25
00:01:58.510 --> 00:02:05.770
A better idea would be to use a properties file to set a browser value that we then pass into our tests.

26
00:02:07.080 --> 00:02:13.680
This way we can create our code in our class to logically determine which browser to initialize.

27
00:02:15.660 --> 00:02:22.290
For example, if I set browser equals chrome, then I expect our test to run using the Chrome browser.

28
00:02:24.990 --> 00:02:25.930
Improvement idea.

29
00:02:25.950 --> 00:02:31.410
Free is to think about place in all reusable code into a separate file.

30
00:02:32.810 --> 00:02:40.640
I intend to create a base class which was store reusable methods that we can use in all our Java classes.

31
00:02:42.070 --> 00:02:48.430
We can achieve this by making use of the extended keyword to gain access to the methods in the base

32
00:02:48.430 --> 00:02:49.030
class.

33
00:02:50.700 --> 00:02:57.450
For example, initiating the browser is common amongst all our tests, so it might make sense to write

34
00:02:57.450 --> 00:03:00.120
this method once and instead we use it.

35
00:03:01.630 --> 00:03:04.600
So I hope this provided a good overview of this section.

36
00:03:04.810 --> 00:03:09.940
And in the next few lectures will explore how we can implement these changes into our project.

