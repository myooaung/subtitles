WEBVTT
1
00:00:00.670 --> 00:00:03.830
In this lecture, we start to learn about test energy.

2
00:00:05.090 --> 00:00:06.380
So what is testing?

3
00:00:07.670 --> 00:00:14.930
Testing is a testing framework for the Java programming language created by Cedric Buist and is inspired

4
00:00:14.930 --> 00:00:16.820
by J Unit an n unit.

5
00:00:18.080 --> 00:00:24.680
N.G. stands the next generation and test engines designed to make end to end test in easy.

6
00:00:25.040 --> 00:00:28.370
And it achieves this by providing a number of useful features.

7
00:00:29.840 --> 00:00:34.130
One example is the use of annotations, and these are like commands.

8
00:00:34.370 --> 00:00:39.800
For example, we can use the test annotation to set a code block to be a test case.

9
00:00:41.520 --> 00:00:48.820
Another example is reported and how testing can easily show us how many test cases passed, failed or

10
00:00:48.820 --> 00:00:49.410
were skipped.

11
00:00:51.740 --> 00:00:56.570
Say we had ten test cases that we ran to test the web page using Chrome browser.

12
00:00:57.950 --> 00:00:59.810
Eight has passed without problem.

13
00:01:00.990 --> 00:01:03.630
To test foward because the elements were not visible.

14
00:01:05.300 --> 00:01:09.380
As we already passed eight tests, it would make sense to run them again.

15
00:01:10.220 --> 00:01:12.980
Instead, we can run just the two tests that failed.

16
00:01:13.250 --> 00:01:15.130
Thanks to the feature of the test in G.

17
00:01:16.800 --> 00:01:19.500
There is multiple ways we can do this in testing.

18
00:01:20.100 --> 00:01:25.530
And testing even generates a special file that we can use to run all our test cases.

19
00:01:28.260 --> 00:01:33.600
It's important to know that testing is not a framework specific to Selenium Web driver.

20
00:01:34.660 --> 00:01:38.440
Test energy can be used for many other Java related projects.

21
00:01:39.690 --> 00:01:45.690
Our purpose is to use test and J to bring flexibility and useful features to our Selenium web driver

22
00:01:45.690 --> 00:01:46.230
tests.

23
00:01:47.550 --> 00:01:52.710
This will allow us to declare tests, prioritize them, and choose which tests to run.

24
00:01:55.760 --> 00:01:58.520
Testing also comes with its own assertions.

25
00:01:59.480 --> 00:02:04.580
If we think back to when we covered assertions earlier in the course, we were actually using a J unit

26
00:02:04.580 --> 00:02:05.750
class called Assert.

27
00:02:06.970 --> 00:02:10.610
The assertions allows us to test for expected values in our tests.

28
00:02:11.080 --> 00:02:16.020
And testing has its own version of the asset class, which has some additional features.

29
00:02:17.370 --> 00:02:23.570
This helps us construct useful tests to ensure web applications are producing the results we expect.

30
00:02:25.940 --> 00:02:28.490
Test and g also come to its own reports.

31
00:02:29.520 --> 00:02:33.030
These are reports that we can use to assess how our tests performed.

32
00:02:34.230 --> 00:02:36.990
We clearly see which tests have passed or failed.

33
00:02:37.710 --> 00:02:40.620
We can even assess which methods even passed or failed.

34
00:02:41.850 --> 00:02:47.670
Reports are useful to summarise key events that took place, especially for managers and non-technical

35
00:02:47.670 --> 00:02:51.540
people that don't understand the technical details of our tests.

36
00:02:53.970 --> 00:02:54.570
For now.

37
00:02:54.780 --> 00:03:02.100
Just remember, testing provides us with annotations which allows us to control how our testing code

38
00:03:02.100 --> 00:03:02.640
runs.

39
00:03:03.540 --> 00:03:06.960
Assertions that are useful to test behaviour and values.

40
00:03:07.980 --> 00:03:14.400
The ability to prioritize our tests reports to see what tests have passed, failed or were skipped.

41
00:03:15.540 --> 00:03:19.080
And an easy way to configure and control our tests.

42
00:03:20.550 --> 00:03:24.600
All the above will be covered in far more detail in the upcoming lectures.

43
00:03:25.900 --> 00:03:26.860
Thank you for watching.

