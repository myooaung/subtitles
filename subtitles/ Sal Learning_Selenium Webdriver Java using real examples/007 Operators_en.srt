1
00:00:00,670 --> 00:00:03,940
In this lecture we take a look at Java operators.

2
00:00:05,240 --> 00:00:07,280
So what our job operators.

3
00:00:08,270 --> 00:00:13,640
Operators are special characters that carry out operations, variables and values.

4
00:00:14,740 --> 00:00:17,320
For example, the plus symbol.

5
00:00:17,320 --> 00:00:18,790
The notes to form in addition.

6
00:00:20,190 --> 00:00:22,950
The minus symbol denotes the form of subtraction.

7
00:00:24,240 --> 00:00:28,350
The Asterix symbol denotes to perform a multiplication and so on.

8
00:00:29,530 --> 00:00:36,100
There are different types of operators, such as assignment operators, arithmetic operators, air quality

9
00:00:36,100 --> 00:00:39,850
and relational operators, logical operators and more.

10
00:00:41,790 --> 00:00:42,270
Simon.

11
00:00:42,300 --> 00:00:45,120
Operators are used to assign a value to a variable.

12
00:00:46,410 --> 00:00:47,760
So if we look at this example.

13
00:00:49,300 --> 00:00:56,440
Here we have created a invariable call total and assign a value of two using the assignment operator

14
00:00:56,440 --> 00:00:57,130
equals.

15
00:00:59,730 --> 00:01:07,050
Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication

16
00:01:07,050 --> 00:01:07,710
and division.

17
00:01:09,310 --> 00:01:10,660
So if we look at the example.

18
00:01:12,360 --> 00:01:12,780
Here we are.

19
00:01:12,780 --> 00:01:20,610
Perform an addition by adding two together, number one and number two and assigning the outcome total.

20
00:01:21,560 --> 00:01:27,230
So here total equals number one, which contains a value of five plus.

21
00:01:27,650 --> 00:01:30,470
Number two, which contains the number of ten.

22
00:01:31,100 --> 00:01:33,770
So total in this example will equal 15.

23
00:01:36,530 --> 00:01:42,290
Equality in relation operators, the former type of check, but determining if something is true or

24
00:01:42,290 --> 00:01:42,860
false.

25
00:01:44,240 --> 00:01:47,810
For example, is two equal to free.

26
00:01:48,620 --> 00:01:49,700
The answer would be no.

27
00:01:50,930 --> 00:01:52,730
Is ten greater than five.

28
00:01:53,240 --> 00:01:54,890
The answer to that would be yes.

29
00:01:55,370 --> 00:01:55,910
So on.

30
00:01:57,000 --> 00:02:06,390
There are a number of these type of operators, such as it is less than is more than equal to not equal

31
00:02:06,390 --> 00:02:08,910
to more than or equal to.

32
00:02:09,270 --> 00:02:10,680
Or less than or equal to.

33
00:02:13,570 --> 00:02:17,080
Logical operators operate on Boolean expressions.

34
00:02:18,500 --> 00:02:21,230
Too frequently used logical operators are.

35
00:02:22,190 --> 00:02:30,110
And which stands for and so the and symbols two of them are used the declare an and operation.

36
00:02:31,490 --> 00:02:33,980
And two pipes which stand for all.

37
00:02:35,470 --> 00:02:38,950
For example if we look at line for.

38
00:02:39,910 --> 00:02:46,510
If two is less than free and five is more than two, then it would execute the code.

39
00:02:47,890 --> 00:02:49,210
In the second example.

40
00:02:49,210 --> 00:02:50,170
So annoying.

41
00:02:50,680 --> 00:02:57,340
If two is less than three or five is less than two, then execute the code.

42
00:03:00,200 --> 00:03:01,580
Let's see some examples.

43
00:03:03,270 --> 00:03:10,170
So in Eclipse I'm going to copy and paste the class in the last lecture and I'm going to call this l0

44
00:03:10,170 --> 00:03:16,920
seventh lecture seven and I'm going to give it a name of Java operators.

45
00:03:17,740 --> 00:03:18,210
Then click.

46
00:03:18,210 --> 00:03:18,750
Okay.

47
00:03:20,100 --> 00:03:24,600
So I'm a double click and open that class and I'm going to remove this code.

48
00:03:26,570 --> 00:03:31,370
So what I'm going to do here is create a number of methods and I'm going to demonstrate the different

49
00:03:31,370 --> 00:03:36,110
type of operators so that you can refer back to in the future if you wanted to.

50
00:03:37,400 --> 00:03:40,100
So I'm going to create a method called public.

51
00:03:42,040 --> 00:03:43,970
Static void.

52
00:03:45,310 --> 00:03:47,290
Assign ment.

53
00:03:47,770 --> 00:03:48,520
Operator.

54
00:03:53,850 --> 00:03:54,540
Like so.

55
00:03:55,960 --> 00:04:02,500
So inside this I'm going to declare an end to variable and I'm going to call it NBER one.

56
00:04:05,030 --> 00:04:07,970
So I am now going to assign a value to that variable.

57
00:04:08,270 --> 00:04:12,490
So NPR one equals five.

58
00:04:14,410 --> 00:04:20,649
So you've seen in previous lectures that I've actually assigned this were available like this on the

59
00:04:20,649 --> 00:04:21,399
same line.

60
00:04:21,760 --> 00:04:26,590
So it is possible to do something similar like so it's acceptable.

61
00:04:28,660 --> 00:04:31,930
But in this example I'm doing, I'm going to do an alternative way.

62
00:04:33,760 --> 00:04:36,100
So all I'm going to do now is use system.

63
00:04:37,570 --> 00:04:39,400
That's out of print.

64
00:04:39,700 --> 00:04:40,120
When?

65
00:04:42,270 --> 00:04:45,630
And I am going to copy that variable.

66
00:04:46,530 --> 00:04:47,220
Like so.

67
00:04:47,640 --> 00:04:49,620
So this will be printed out to console.

68
00:04:51,890 --> 00:04:55,580
So the next example that I'm going to show is an arithmetic operator.

69
00:04:56,270 --> 00:05:00,200
So again, I'm going to write public static void.

70
00:05:03,740 --> 00:05:04,070
If.

71
00:05:05,530 --> 00:05:07,210
Tech operator.

72
00:05:08,550 --> 00:05:09,210
Like so.

73
00:05:11,530 --> 00:05:13,330
And I'm going to write in this one.

74
00:05:13,390 --> 00:05:15,400
I'm going to declare free into variables.

75
00:05:15,730 --> 00:05:16,300
So it.

76
00:05:17,860 --> 00:05:18,790
In one.

77
00:05:20,850 --> 00:05:22,110
And it's going to equal two.

78
00:05:23,610 --> 00:05:25,620
INT int two.

79
00:05:26,920 --> 00:05:28,330
A.K.A. equal for.

80
00:05:30,550 --> 00:05:32,410
An end result.

81
00:05:33,910 --> 00:05:35,920
And that is going to equal zero.

82
00:05:38,930 --> 00:05:40,910
So now I'm going to write results.

83
00:05:41,970 --> 00:05:44,280
Equals int one.

84
00:05:45,210 --> 00:05:47,700
Plus int two.

85
00:05:49,100 --> 00:05:50,540
And again I'm going to use system.

86
00:05:51,200 --> 00:05:53,420
Throw out the print out and.

87
00:05:54,840 --> 00:05:57,210
And I am going to pre-print site.

88
00:05:58,630 --> 00:06:02,320
I'm going to print the result variable.

89
00:06:04,200 --> 00:06:10,920
So what I'm doing here is up in this result variable is going to equal into one, which is two.

90
00:06:11,950 --> 00:06:15,040
Plus two equals four.

91
00:06:15,700 --> 00:06:20,620
So I'm expecting a result of six and that should be printed in console.

92
00:06:23,030 --> 00:06:28,400
So the next example is I'm going to create a method for a relational operator.

93
00:06:29,310 --> 00:06:30,840
So I'm going to call it public.

94
00:06:31,990 --> 00:06:33,910
Static void.

95
00:06:35,700 --> 00:06:37,560
Rail operator.

96
00:06:40,440 --> 00:06:41,100
Like so.

97
00:06:43,140 --> 00:06:46,590
So in here I'm going to create two ints variables int.

98
00:06:48,040 --> 00:06:49,510
Number one.

99
00:06:50,980 --> 00:06:52,450
And that's going to a ten.

100
00:06:53,970 --> 00:06:56,250
And in number two.

101
00:06:57,890 --> 00:06:59,990
And that's going to equal value of five.

102
00:07:01,860 --> 00:07:04,230
So here I'm going to use an if statement.

103
00:07:04,530 --> 00:07:10,140
So don't worry about understanding if statements because we go I'll go through it in more detail in

104
00:07:10,140 --> 00:07:11,040
a later lecture.

105
00:07:11,730 --> 00:07:13,470
But for now, just follow along.

106
00:08:01,860 --> 00:08:03,510
So here, what I'm doing is.

107
00:08:03,510 --> 00:08:04,890
Well, sign number one.

108
00:08:04,890 --> 00:08:05,820
A value of ten.

109
00:08:06,030 --> 00:08:07,650
A number two, a value of five.

110
00:08:08,280 --> 00:08:13,800
Here, I'm using an if statement to check to see if number one is greater than number two.

111
00:08:14,810 --> 00:08:18,920
If that's true, then this line here will output to console.

112
00:08:19,670 --> 00:08:23,500
If it's not true, then this line will output the console.

113
00:08:25,300 --> 00:08:28,990
So I'd run this in a moment and hopefully make more sense to you.

114
00:08:31,180 --> 00:08:39,460
So the next thing I'm going to do is go down further is I'm going to demonstrate use of a logical operator.

115
00:08:40,890 --> 00:08:42,240
So I'm going to write.

116
00:08:43,820 --> 00:08:46,280
Public void.

117
00:08:49,280 --> 00:08:52,400
So public static void.

118
00:08:53,860 --> 00:08:54,520
Logical.

119
00:08:55,670 --> 00:08:56,300
Like so.

120
00:08:58,240 --> 00:09:01,750
So I am going to make some rabbit meat movies down.

121
00:09:03,230 --> 00:09:09,530
So I'm going to create free into variables so I equals to.

122
00:09:11,490 --> 00:09:14,970
And B equals for.

123
00:09:16,350 --> 00:09:17,820
And it see.

124
00:09:20,240 --> 00:09:21,380
Equals ten.

125
00:09:22,960 --> 00:09:26,200
I'm then going to create two boolean variables.

126
00:09:27,460 --> 00:09:30,040
Some are called S one result one.

127
00:09:31,880 --> 00:09:35,240
And this one I'm going to call result two.

128
00:09:36,730 --> 00:09:37,360
Like so.

129
00:09:40,630 --> 00:09:44,530
So the first thing I'm going to do is use an awe operation.

130
00:09:45,430 --> 00:09:45,910
So.

131
00:09:47,010 --> 00:09:48,780
Result one.

132
00:09:50,490 --> 00:09:51,210
Equals.

133
00:09:53,270 --> 00:09:53,660
I.

134
00:09:54,870 --> 00:09:56,220
Right up be.

135
00:10:00,510 --> 00:10:03,570
Or which is declared by two pipes.

136
00:10:05,800 --> 00:10:06,280
See.

137
00:10:07,380 --> 00:10:09,540
Is greater than a.

138
00:10:12,200 --> 00:10:14,300
And I'm simply going to use a system.

139
00:10:15,760 --> 00:10:18,280
Thoughts about the print when.

140
00:10:19,970 --> 00:10:25,190
And I'm going to output the result of results one.

141
00:10:27,040 --> 00:10:28,630
So let me explain what I'm doing here.

142
00:10:29,120 --> 00:10:33,250
So I've created free variables A, B and C, which contain different values.

143
00:10:33,850 --> 00:10:39,190
And I've got a Boolean variable called Result one and a boolean called Result two.

144
00:10:40,150 --> 00:10:44,200
So in this first logical test, result one.

145
00:10:44,440 --> 00:10:47,860
So because it's Boolean, the default value of a boolean is false.

146
00:10:49,140 --> 00:10:53,340
And what this is doing is, is check in using a logical operator.

147
00:10:53,970 --> 00:10:58,830
If I say if two is greater than B, which is four.

148
00:10:59,830 --> 00:11:04,630
Or C which is ten is greater than.

149
00:11:05,800 --> 00:11:07,000
I.e. which is to.

150
00:11:08,290 --> 00:11:09,910
So one of those true.

151
00:11:11,510 --> 00:11:17,270
This one here is because C is ten and it's more than eight, which is two.

152
00:11:17,960 --> 00:11:24,760
And because I've used the all operator here, it means because one of these is true, this boolean will

153
00:11:24,770 --> 00:11:26,810
be turned from false to true.

154
00:11:27,530 --> 00:11:31,550
So I expect the result of true in this particular test.

155
00:11:37,120 --> 00:11:39,550
So let's try an example of an and operator.

156
00:11:40,420 --> 00:11:42,730
So for result two.

157
00:11:44,010 --> 00:11:44,730
Equals.

158
00:11:48,480 --> 00:11:50,490
I is greater than be.

159
00:11:52,500 --> 00:11:53,070
And.

160
00:11:55,780 --> 00:11:59,590
If C is greater than I.

161
00:12:02,470 --> 00:12:04,240
Then system got out of print line.

162
00:12:04,240 --> 00:12:05,380
So I'm just going to copy that.

163
00:12:06,460 --> 00:12:09,220
But instead of result one, I want to output the result.

164
00:12:09,490 --> 00:12:09,880
So.

165
00:12:10,260 --> 00:12:10,550
So.

166
00:12:10,570 --> 00:12:11,320
Two like.

167
00:12:11,320 --> 00:12:11,710
So.

168
00:12:13,600 --> 00:12:18,010
So what I'd expect here is where we use in and in this example.

169
00:12:18,890 --> 00:12:24,770
We're checking to see if A is greater than B, so is to greater than four, which is not.

170
00:12:25,460 --> 00:12:29,540
And because we use in and out statements have to be true.

171
00:12:30,560 --> 00:12:34,880
So we know this one here is false, but C is greater than eight.

172
00:12:34,910 --> 00:12:38,000
A ten is great and two this side is true.

173
00:12:38,750 --> 00:12:44,180
But where we use and operator both at East Sides need to be true results.

174
00:12:45,080 --> 00:12:52,220
So result two I expect to return false because this site here is not true.

175
00:12:55,420 --> 00:12:57,370
So let's try running these methods.

176
00:12:57,940 --> 00:13:03,490
So before I run this test, I need to declare why I need to trigger these methods to run.

177
00:13:04,360 --> 00:13:07,060
And I can do this in the main method.

178
00:13:07,930 --> 00:13:10,210
So here I'm simply going to copy.

179
00:13:11,440 --> 00:13:16,630
The method names and place it within mine like side semicolon.

180
00:13:17,720 --> 00:13:19,250
And I'm going to do that for each one.

181
00:13:33,920 --> 00:13:36,020
So if you remember to a previous lecture.

182
00:13:37,030 --> 00:13:42,040
I've I've explained that the main method is a starting point of a Java program.

183
00:13:42,820 --> 00:13:46,030
So we have placed the method names in main.

184
00:13:46,570 --> 00:13:52,750
When I run this this class, it will then trigger each one of those methods to run.

185
00:13:54,040 --> 00:13:55,090
So I'm going to save it.

186
00:13:55,770 --> 00:13:58,420
I'm going to right click and run.

187
00:13:58,780 --> 00:13:59,800
Job application.

188
00:14:00,960 --> 00:14:02,490
And here we had the results.

189
00:14:03,580 --> 00:14:09,640
So if we look at this first method, so I have assigned INT number one a value of five.

190
00:14:10,760 --> 00:14:15,460
And I'm printing out that results of that variable and we can see five in the console.

191
00:14:17,790 --> 00:14:24,600
In the arithmetic operator, I've declared free integer variables in one equals two.

192
00:14:25,690 --> 00:14:32,190
In two equals four and result equals zero and a result equals in one.

193
00:14:32,200 --> 00:14:35,590
So the value of two plus into which the value of four.

194
00:14:36,190 --> 00:14:42,010
So then two added together is placed in the result variable and equals six, which is correct.

195
00:14:44,540 --> 00:14:47,960
In this further example, I've declared two integers.

196
00:14:48,140 --> 00:14:52,730
It's a number one equals ten and int and into number two equals five.

197
00:14:53,570 --> 00:15:00,590
So I'm use an if statement to check to see if number one, which equals ten is greater than number two,

198
00:15:00,590 --> 00:15:01,400
which is five.

199
00:15:02,290 --> 00:15:03,670
And because that's true.

200
00:15:04,480 --> 00:15:11,050
This line here has been printed so we can say number one is greater than number two, which is what

201
00:15:11,050 --> 00:15:11,920
we were expecting.

202
00:15:13,980 --> 00:15:15,560
So in the final example.

203
00:15:15,570 --> 00:15:23,340
So in this logical method, I've declared free integers A, B and C of values two, four and ten and

204
00:15:23,340 --> 00:15:26,370
of create two booleans result one, result two.

205
00:15:27,210 --> 00:15:35,070
So result one equals and it checks to see if i.e. which is equal to two is greater than B which is four.

206
00:15:35,430 --> 00:15:36,450
So that's false.

207
00:15:37,440 --> 00:15:43,050
But because we use in an operator, it means only one of these has to be true.

208
00:15:43,920 --> 00:15:50,850
So in the second test, we're checking the safe value of C, which is ten is greater than eight, which

209
00:15:50,850 --> 00:15:51,600
equals two.

210
00:15:52,110 --> 00:15:53,430
And that side is true.

211
00:15:54,620 --> 00:15:58,220
So because we use a newer operator and only one of these has to be true.

212
00:15:58,820 --> 00:16:01,970
This is why true has been outputted in console.

213
00:16:03,380 --> 00:16:11,090
If we look at the second example, so result two equals i.e. greater than B, which we know is false

214
00:16:11,090 --> 00:16:15,140
because A's two and is less than B, which is four.

215
00:16:16,040 --> 00:16:19,310
But the important difference here is we use in the and operator.

216
00:16:20,890 --> 00:16:25,000
And the end operator requires both arguments to be true.

217
00:16:25,990 --> 00:16:28,540
In order for a true result to be outputted.

218
00:16:29,600 --> 00:16:35,450
So although this is false and this one here is true, we need both sides to be true in order to get

219
00:16:35,450 --> 00:16:36,410
a true result.

220
00:16:37,160 --> 00:16:39,650
And that's why force has been outwitted here.

221
00:16:42,420 --> 00:16:47,370
So I hope this lecture has been useful and I appreciate it quite a bit to take in.

222
00:16:48,410 --> 00:16:52,910
But you'll gain more experience in this as we progress through this course.

223
00:16:53,600 --> 00:16:59,030
The hopefully is at least giving you some insight to how we can use different operators in Java.

224
00:17:00,250 --> 00:17:01,150
Thank you for watching.

