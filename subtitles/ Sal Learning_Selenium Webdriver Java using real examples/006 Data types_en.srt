1
00:00:00,560 --> 00:00:03,770
In this lecture, we take a look at Java data types.

2
00:00:05,040 --> 00:00:09,180
So in Java you have primitive and non primitive data types.

3
00:00:10,200 --> 00:00:11,550
A primitive dating site.

4
00:00:11,700 --> 00:00:14,820
Specify the size and type of variable values.

5
00:00:16,010 --> 00:00:17,750
It has no additional methods.

6
00:00:18,780 --> 00:00:28,320
There are eight permitted data types in Java and these are byte short int long float, double boolean

7
00:00:28,320 --> 00:00:29,040
and char.

8
00:00:31,290 --> 00:00:36,240
Known primitive data types are called reference types because they refer to objects.

9
00:00:37,310 --> 00:00:40,370
The default value of any reference variable is no.

10
00:00:42,440 --> 00:00:48,020
Whenever you pass a non primitive data type to a method, you are actually passing an address to the

11
00:00:48,020 --> 00:00:49,790
object where the data is stored.

12
00:00:51,210 --> 00:00:56,280
Examples of known primitive data types on string classes and arrays.

13
00:00:57,340 --> 00:00:59,410
Now, if you think back to the last lecture.

14
00:01:00,460 --> 00:01:05,110
I declared a string variable dog breed and assigned a value of poodle.

15
00:01:06,800 --> 00:01:15,980
That value of poodle is actually stored in memory and Java references the memory location to get that

16
00:01:15,980 --> 00:01:16,460
value.

17
00:01:19,920 --> 00:01:26,100
So for primitive data types, this table demonstrates the data type, the size and the description.

18
00:01:26,790 --> 00:01:33,870
So if we look at byte, it has a size of one by it and it can store whole numbers for minus one two

19
00:01:33,870 --> 00:01:36,120
eight 227.

20
00:01:37,500 --> 00:01:42,030
So I'm not going to go through all of these, but take notes of float.

21
00:01:42,720 --> 00:01:50,250
So Float is for bonus and it stores fractional numbers and is sufficient store in 6 to 7 decimal digits.

22
00:01:51,340 --> 00:01:58,420
If we look at double to double was similar to float, but it's actually double the size of float.

23
00:01:58,810 --> 00:02:03,130
Eight bullets and double also stores fractional numbers.

24
00:02:03,880 --> 00:02:10,330
Bear has a higher range of precision, so sufficient to store up to 15 decimal digits.

25
00:02:13,160 --> 00:02:15,440
So let's try out the different data types.

26
00:02:16,870 --> 00:02:21,130
So in Eclipse, I'm simply going to copy and paste the class in the last lecture.

27
00:02:22,010 --> 00:02:27,400
I'm going to call this l06 for lecture six, and I want to give it a name of theta.

28
00:02:28,740 --> 00:02:29,310
Types.

29
00:02:29,790 --> 00:02:30,720
Mexico, okay.

30
00:02:31,860 --> 00:02:33,480
So if I double click that class.

31
00:02:34,350 --> 00:02:40,020
So I have already declared a string value and as I've demonstrated that already, I'm going to keep

32
00:02:40,020 --> 00:02:40,200
it.

33
00:02:41,280 --> 00:02:48,240
So the next data type home gets demonstrated is indeed and I'm going to call this event variable number.

34
00:02:49,400 --> 00:02:50,930
And I'm going to assign a value.

35
00:02:51,980 --> 00:02:52,640
Of ten.

36
00:02:54,130 --> 00:02:55,570
And you see that's accepted.

37
00:02:56,470 --> 00:03:02,050
So where you're seeing yellow lines under these variables is simply because we're not using the variables.

38
00:03:03,130 --> 00:03:05,680
Where it states local variable number is not used.

39
00:03:06,520 --> 00:03:07,990
So we can ignore those there is.

40
00:03:09,320 --> 00:03:15,350
If I changed that number value to point one, you will see it as an error.

41
00:03:16,600 --> 00:03:22,480
And the reason for that, as demonstrated in the slides, is that ends can only store whole numbers

42
00:03:22,600 --> 00:03:24,190
between a specific range.

43
00:03:26,260 --> 00:03:29,320
So the next one I want to demonstrate to you is Boolean.

44
00:03:31,280 --> 00:03:32,900
Now I'm going to call this flag.

45
00:03:33,990 --> 00:03:36,930
So a boolean can only store a true.

46
00:03:38,950 --> 00:03:40,750
Or a false value.

47
00:03:42,530 --> 00:03:46,000
It can't store anything else, so I can't buy it.

48
00:03:46,010 --> 00:03:47,420
For example, ABC.

49
00:03:48,530 --> 00:03:51,860
As it won't be accepted if we go over the error.

50
00:03:51,920 --> 00:03:55,370
It says type mismatch cannot convert stream to boolean.

51
00:04:01,250 --> 00:04:06,380
So the next one I want to demonstrate is Char and I'm going to call this variable letter.

52
00:04:08,000 --> 00:04:10,430
And it's going to equal I.

53
00:04:12,030 --> 00:04:13,590
But you can see it as an error.

54
00:04:14,690 --> 00:04:23,030
And if we hover over it, Java thinks that this value is a string and the reason for that is char values

55
00:04:23,030 --> 00:04:25,370
need to be surrounded by single quotes.

56
00:04:26,840 --> 00:04:29,060
And when I do that, you'll see that it's accepted.

57
00:04:31,120 --> 00:04:33,730
The next one I want to demonstrate is float.

58
00:04:35,330 --> 00:04:37,790
And I'm going to call this sample.

59
00:04:39,110 --> 00:04:42,950
And it's going to equal 1.1 to 3.

60
00:04:45,260 --> 00:04:46,490
You're seen as a never there.

61
00:04:46,970 --> 00:04:51,350
And if we hover over it, we've got an option to add cost float.

62
00:04:51,920 --> 00:04:58,310
Or alternatively, what we can do is add an F at the end of that line and that will tell job at this

63
00:04:58,310 --> 00:05:00,140
value is a float value.

64
00:05:02,000 --> 00:05:02,410
Foster.

65
00:05:02,410 --> 00:05:03,230
Remove the F.

66
00:05:04,020 --> 00:05:06,330
And instead choose the cost option.

67
00:05:07,890 --> 00:05:14,340
You see eclipse will place float there and that's telling Java as well that its example variable is

68
00:05:14,340 --> 00:05:16,080
a float value.

69
00:05:18,370 --> 00:05:21,220
The final one I'd like to demonstrate is double.

70
00:05:23,200 --> 00:05:26,770
And I'm going to call it the example.

71
00:05:28,090 --> 00:05:35,560
And it's going to equal 1.231, two, three, four with a semicolon.

72
00:05:36,520 --> 00:05:42,670
So with doubles, we don't need to declare a character value at the end of it or at any cost in.

73
00:05:43,810 --> 00:05:51,640
But as explained in the slides, Dubbo has a higher rate of precision and can contain accuracy of higher

74
00:05:52,000 --> 00:05:53,500
or more decimal places.

75
00:05:54,310 --> 00:05:58,390
But the downside is that it takes it requires more memory.

76
00:06:00,740 --> 00:06:04,760
So I hope this is a good lecture to introduce you to the different types of data.

77
00:06:05,800 --> 00:06:08,830
And we'll be using these as we progress through the course.

78
00:06:09,430 --> 00:06:10,540
Thank you for watching.

