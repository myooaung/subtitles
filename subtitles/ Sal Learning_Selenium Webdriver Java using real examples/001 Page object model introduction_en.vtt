WEBVTT
1
00:00:00.610 --> 00:00:02.950
Welcome to the next section of this course.

2
00:00:03.430 --> 00:00:09.220
In this section, we'll be focusing on the page object model, which is a design pattern.

3
00:00:10.970 --> 00:00:12.980
So what is the page object model?

4
00:00:13.730 --> 00:00:20.060
So page object model is a design pattern to create object repositories for web UI elements.

5
00:00:21.410 --> 00:00:25.340
Under this model, we are to separate our tests into two parts.

6
00:00:26.420 --> 00:00:33.230
For example, if you were tested a home page of a website, we would split our code into two classes.

7
00:00:34.450 --> 00:00:40.450
The first would be a test class which contains instructions like to click a button on a home page.

8
00:00:41.730 --> 00:00:48.660
The second part would be an object class, which stores the locator and methods to access those locators.

9
00:00:50.510 --> 00:00:52.730
So let's look at his visual explanation.

10
00:00:53.600 --> 00:01:01.730
So I have two classes, the home page test, which contains my test code and homepage objects, which

11
00:01:01.730 --> 00:01:03.980
stores the locators of the home page.

12
00:01:04.910 --> 00:01:11.900
We then combine these two classes where we use the new web driver and that will allow us to carry out

13
00:01:11.900 --> 00:01:12.590
our test.

14
00:01:14.930 --> 00:01:16.280
So why do we do this?

15
00:01:17.270 --> 00:01:24.320
Say we had a number of tests that use the home page, a log in, test my access to sign in page by clicking

16
00:01:24.320 --> 00:01:26.180
the sign in button on the home page.

17
00:01:27.020 --> 00:01:31.910
Another add products to basket test might click on a product from the home page.

18
00:01:33.210 --> 00:01:38.850
What happens if a developer changes the layout of the home page and the locator values change?

19
00:01:40.560 --> 00:01:46.680
In the old bundle, we would have to go through each test class and update the locators individually.

20
00:01:48.160 --> 00:01:55.060
Under the page object model, we would only have to update the locators in the home page objects class.

21
00:01:56.520 --> 00:02:00.630
All tests, then observe and inherit the new locator values.

22
00:02:02.830 --> 00:02:05.260
So this is a visual explanation.

23
00:02:06.530 --> 00:02:14.060
Said Home page test classes retrieved the home page locator values from the object's class, meaning

24
00:02:14.060 --> 00:02:20.480
if the locators were to change, we'd only have to update the locators in one class, which is home

25
00:02:20.480 --> 00:02:21.560
page objects.

26
00:02:22.610 --> 00:02:29.330
So you can see here I have four different test classes and they are all use in objects from the home

27
00:02:29.330 --> 00:02:30.830
page objects class.

28
00:02:31.940 --> 00:02:38.930
So instead of the locators being in in each one of these individual classes, it now inherits locators

29
00:02:39.050 --> 00:02:41.540
from the single homepage objects class.

30
00:02:42.750 --> 00:02:49.650
So this means that if I ever update those locator values, all my classes who inherit that new change.

31
00:02:52.260 --> 00:02:54.360
So we'll see additional advantages.

32
00:02:55.050 --> 00:02:59.250
So our test classes are simplified as they will contain less code.

33
00:03:00.550 --> 00:03:02.680
This makes our code easier to read.

34
00:03:03.870 --> 00:03:06.420
Our code also becomes easier to maintain.

35
00:03:07.800 --> 00:03:15.180
And the same objects, e.g. those created in the home object Java class in this example can be used

36
00:03:15.180 --> 00:03:19.290
by multiple test cases, meaning less repetitiveness.

37
00:03:21.050 --> 00:03:27.170
So I hope this has made it easier to understand why we use the page object model and in the next few

38
00:03:27.170 --> 00:03:29.420
lectures I'll be showing you how to do it.

39
00:03:30.170 --> 00:03:30.950
Thanks for watching.

