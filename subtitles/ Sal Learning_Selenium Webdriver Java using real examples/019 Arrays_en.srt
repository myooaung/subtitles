1
00:00:00,490 --> 00:00:03,700
In this lecture, we take a look at Java arrays.

2
00:00:05,110 --> 00:00:06,370
So what is an array?

3
00:00:07,320 --> 00:00:08,910
An array is a collection.

4
00:00:10,440 --> 00:00:16,500
Think of it as a basket which can hold a number of eggs, but instead of eggs it can hold strings or

5
00:00:16,500 --> 00:00:18,530
ints or any other data type.

6
00:00:19,900 --> 00:00:24,940
An array is easy to declare but is fixed in size based on what you set.

7
00:00:27,420 --> 00:00:32,250
The below code is creating a string of right and assigning four string values.

8
00:00:33,200 --> 00:00:35,690
The array has been called names.

9
00:00:36,700 --> 00:00:43,360
And if we look at this code I've written string followed by followed by square brackets, which implies

10
00:00:43,360 --> 00:00:46,630
I'm creating an array and I've called it names.

11
00:00:47,770 --> 00:00:51,530
And nines equals new string with square brackets.

12
00:00:51,550 --> 00:00:53,590
So it's creating a new string array.

13
00:00:54,400 --> 00:01:00,970
And in braces, I am providing values that I want to store in this array called names.

14
00:01:01,720 --> 00:01:08,530
So in the first table quotes, I provided the name Steve, followed by comma and double quotes.

15
00:01:08,560 --> 00:01:08,980
Emma.

16
00:01:09,580 --> 00:01:10,480
Comma, John.

17
00:01:10,660 --> 00:01:11,080
Comma.

18
00:01:11,080 --> 00:01:11,590
Amy.

19
00:01:12,310 --> 00:01:19,480
So these four string values are going to be stored in this array of strings, and the array is called

20
00:01:19,480 --> 00:01:20,110
names.

21
00:01:21,550 --> 00:01:27,850
So an important thing to remember is that index is in Java starter index position zero.

22
00:01:28,390 --> 00:01:34,870
So I expected Steve in the first value will be placed in an index position of zero in the names of right

23
00:01:35,500 --> 00:01:38,680
followed by Emma, who would be in position one and so on.

24
00:01:41,060 --> 00:01:42,380
So let's see an example.

25
00:01:43,480 --> 00:01:49,090
So before we begin, you may notice that I've added a new class here from the last lecture.

26
00:01:49,390 --> 00:01:56,920
So although we use Blue J I.D., I've also created the same class in Eclipse just so that we maintain

27
00:01:56,920 --> 00:01:58,180
our lecture ordering in.

28
00:01:59,090 --> 00:02:03,310
So if you if I show you this, it contains pretty much identical codes.

29
00:02:03,330 --> 00:02:11,210
What we wrote in Blue Jay, but in Eclipse, we don't have the functionality to create a new object

30
00:02:11,210 --> 00:02:12,590
in the way we did in Blue Jay.

31
00:02:13,100 --> 00:02:20,510
Hence why in the static void main method of declared a new object and also printed out the values of

32
00:02:20,510 --> 00:02:21,080
the fields.

33
00:02:23,040 --> 00:02:25,350
So following on from that.

34
00:02:25,590 --> 00:02:30,420
So for this lecture, let's create a new class called Lecture 17.

35
00:02:31,590 --> 00:02:33,120
And I'm going to give it a name of.

36
00:02:34,380 --> 00:02:36,090
Arise like so.

37
00:02:37,460 --> 00:02:38,960
And then open up that class.

38
00:02:40,150 --> 00:02:43,600
If I delete all the code from the previous lecture.

39
00:02:46,640 --> 00:02:49,520
Just leaving the static void main method.

40
00:02:50,930 --> 00:02:57,290
So what I'm going to do here is I am going to declare an array and I'm going to do so by writing string

41
00:02:58,040 --> 00:03:04,730
and in square brackets and call it names equals new string.

42
00:03:05,890 --> 00:03:06,880
Square brackets.

43
00:03:07,940 --> 00:03:08,300
And then.

44
00:03:09,280 --> 00:03:12,700
After that, I'm gonna add open and close embraces.

45
00:03:13,690 --> 00:03:17,140
And in these braces, I'm going to provide string values.

46
00:03:17,710 --> 00:03:21,220
So in double quotes, I'm going to add the name State.

47
00:03:23,330 --> 00:03:26,210
And then after that double quote comma.

48
00:03:27,270 --> 00:03:29,130
And another set double quotes for Emma.

49
00:03:31,410 --> 00:03:33,450
And the same again for John.

50
00:03:36,240 --> 00:03:38,880
And a final one for the name Amy.

51
00:03:39,950 --> 00:03:42,140
And then a semicolon ended that line.

52
00:03:43,950 --> 00:03:49,800
So now I am going to print the values of that array and I'm going to do this by the system.

53
00:03:50,670 --> 00:03:52,470
Draw out, not print.

54
00:03:52,500 --> 00:03:53,100
Out end.

55
00:03:56,220 --> 00:04:00,420
And inside the brackets, I'm going to call the name of the race.

56
00:04:00,570 --> 00:04:03,180
So names and in square brackets.

57
00:04:03,960 --> 00:04:07,290
And I'm going to enter an index value of that array.

58
00:04:08,900 --> 00:04:12,650
So I am going to simply copy and paste that.

59
00:04:14,050 --> 00:04:15,100
Three more times.

60
00:04:15,970 --> 00:04:18,610
But I'm going to change the index value for each one.

61
00:04:19,769 --> 00:04:21,240
By incrementing it by one.

62
00:04:22,890 --> 00:04:30,270
So I expect that this first line where it's using the names array, Ray, it's going to retrieve the

63
00:04:30,270 --> 00:04:32,730
index value of zero.

64
00:04:33,330 --> 00:04:39,210
And because Steve is the first value to provide it, I expect Steve to be in position zero.

65
00:04:39,780 --> 00:04:41,070
Emma Position one.

66
00:04:41,280 --> 00:04:44,430
John Position two and Amy in position free.

67
00:04:45,540 --> 00:04:48,450
So if I save this class and then try running it.

68
00:04:49,680 --> 00:04:50,760
Let's see what's output.

69
00:04:53,030 --> 00:04:57,980
So you can see there, Steve, John and Amy has been placed in console.

70
00:04:58,910 --> 00:05:00,170
So that's what correctly.

71
00:05:01,470 --> 00:05:09,360
So the key thing to remember about an array is that an array is static in size, so the length is fixed

72
00:05:09,450 --> 00:05:12,000
based on the object of the array that we create.

73
00:05:12,810 --> 00:05:20,460
So if we wanted to add new values such as a additional value at the end of Amy after the object has

74
00:05:20,460 --> 00:05:28,110
been created, we can't do that within our code, but we can use alternative collections such as an

75
00:05:28,110 --> 00:05:33,390
array list, which is more dynamic, and it's something we're going to explore in the next lecture.

76
00:05:34,620 --> 00:05:41,970
So the array is the most basic form of the collection in Java and there are a number of other differences

77
00:05:41,970 --> 00:05:43,290
between other collections.

78
00:05:43,560 --> 00:05:49,470
But that is the main reason is that the size cannot be changed once the object of the array has been

79
00:05:49,470 --> 00:05:50,070
created.

80
00:05:51,390 --> 00:05:54,330
So I hope this lecture has been a good introduction to race.

81
00:05:54,660 --> 00:05:56,250
Let's move on to the next lecture.

