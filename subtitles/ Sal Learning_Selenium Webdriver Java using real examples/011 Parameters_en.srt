1
00:00:00,500 --> 00:00:04,070
In this lecture, we take a look at test energy parameters.

2
00:00:05,990 --> 00:00:08,240
So what is testing g parameters?

3
00:00:09,110 --> 00:00:13,790
Testing g parameters are the arguments that we pass to our test methods.

4
00:00:15,060 --> 00:00:22,920
There are two ways we can pass parameter values, and this is by using parameters or data providers.

5
00:00:24,240 --> 00:00:29,790
This lecture focuses on parameters and we look at data providers in the next lecture.

6
00:00:31,330 --> 00:00:37,030
So test entry parameters are used to pass data into our tests at execution.

7
00:00:38,200 --> 00:00:44,950
For example, we can send a U, r l address or an email address or username or various other pieces

8
00:00:44,950 --> 00:00:45,580
of data.

9
00:00:47,360 --> 00:00:50,210
So this slide provides a visual explanation.

10
00:00:50,930 --> 00:00:58,070
And if you look to your left hand side here, I have a test in XML file and inside that test injects

11
00:00:58,070 --> 00:00:58,760
HTML file.

12
00:00:59,060 --> 00:01:07,400
I have a parameter set and the parameter is called you are L and the equals a value to a website address.

13
00:01:08,830 --> 00:01:15,130
On the right hand side, I have a class called log in test and saw inside my test case.

14
00:01:15,520 --> 00:01:20,140
I am expecting a u r l value to be provided from the parameter.

15
00:01:21,270 --> 00:01:25,950
So the test testing XML file is going to send the parameter value.

16
00:01:26,310 --> 00:01:28,320
So you are well equals web address.

17
00:01:28,770 --> 00:01:34,110
So that web address will then be sent to the log in test class.

18
00:01:34,470 --> 00:01:37,350
Well, expect in a URL to be provided.

19
00:01:39,250 --> 00:01:40,540
So let's see an example.

20
00:01:41,980 --> 00:01:45,040
So before I begin, let me just walk you through the test.

21
00:01:45,730 --> 00:01:53,380
So I'm going to be using the test store website and I'm going to be using the sign in page where we

22
00:01:53,380 --> 00:01:55,750
need to provide an email address and password.

23
00:01:56,530 --> 00:01:59,620
So traditionally I've been using send keys.

24
00:01:59,980 --> 00:02:03,520
I've been sending a hard coded value that I provide.

25
00:02:04,810 --> 00:02:11,770
So this time I'm going to use test energy parameters to provide or pass the value of the email address

26
00:02:11,770 --> 00:02:12,640
and password.

27
00:02:14,400 --> 00:02:19,200
So if I go back to Eclipse, we've already done something similar in our lecture.

28
00:02:19,200 --> 00:02:27,930
Nine Annotations Part two So I'm going to copy and paste class and call this new 111 for lecture 11

29
00:02:28,590 --> 00:02:32,460
and I'm going to give it a name of parameters like so.

30
00:02:34,470 --> 00:02:39,480
So in this class I've used before method and after method.

31
00:02:41,130 --> 00:02:43,960
And the reform effort was handling the signing in.

32
00:02:44,940 --> 00:02:49,380
So instead of the before method, I am going to change changes to test.

33
00:02:50,470 --> 00:02:52,480
So that becomes a test case.

34
00:02:53,410 --> 00:02:59,230
And I do not require this one, as if simply locks out the user and the after method.

35
00:03:00,940 --> 00:03:01,330
Sorry.

36
00:03:01,330 --> 00:03:07,690
The previous one actually clicked on the close link and the after method signs the user out.

37
00:03:08,080 --> 00:03:08,650
Soneva.

38
00:03:08,650 --> 00:03:09,790
Those are required.

39
00:03:10,840 --> 00:03:11,600
So in this.

40
00:03:11,620 --> 00:03:16,510
All I'm doing is setting up a new Chrome browser and it's going to expand the window.

41
00:03:16,930 --> 00:03:20,260
And this test now is going to handle the signing in.

42
00:03:20,590 --> 00:03:22,750
So it's going to go to the test or home page.

43
00:03:23,260 --> 00:03:28,960
It's going to click on the sign in button and it's going to provide an email address and password.

44
00:03:29,260 --> 00:03:32,080
And then it's going to click the submit log in button.

45
00:03:33,220 --> 00:03:38,860
So as you can see at the moment for the email address, I'm using the same keys and I'm providing a

46
00:03:38,860 --> 00:03:42,070
value for which I'm providing in double quotes.

47
00:03:42,850 --> 00:03:44,380
And the same for the password.

48
00:03:44,380 --> 00:03:48,460
I'm using same keys and providing a hardcoded value.

49
00:03:50,050 --> 00:03:54,970
So this time I want to use test n g parameters to pass these values here.

50
00:03:56,190 --> 00:03:59,610
And I can do this by first opening my tests.

51
00:03:59,610 --> 00:04:00,750
Inject small file.

52
00:04:02,290 --> 00:04:06,300
And so from the last lecture, I had to group some and remove the group's tags.

53
00:04:07,920 --> 00:04:14,140
And I am going to remove one of these class lines because I only want to focus on that one new class.

54
00:04:14,940 --> 00:04:19,230
And so I am going to simply update the name of this two points in a new class.

55
00:04:19,890 --> 00:04:20,880
So l11.

56
00:04:22,130 --> 00:04:24,380
On the school premises.

57
00:04:26,000 --> 00:04:28,280
So this now points to this class.

58
00:04:29,740 --> 00:04:37,750
So at the top of this test in g xml file, I am going to use parameters and I can do this by using a

59
00:04:37,750 --> 00:04:39,210
parameter tag.

60
00:04:40,830 --> 00:04:42,810
And then I need to provide a name.

61
00:04:43,200 --> 00:04:48,360
So this is the name of the parameter and I'm going to call this first one email.

62
00:04:50,370 --> 00:04:53,670
They're not going to add a space and I need to provide a value.

63
00:04:53,850 --> 00:04:55,860
So I'm going to use the value keyword.

64
00:04:57,270 --> 00:05:00,390
Equals and in the value of the email address.

65
00:05:01,020 --> 00:05:03,510
So this is going to be test at.

66
00:05:04,540 --> 00:05:05,140
Test.

67
00:05:07,180 --> 00:05:13,150
And at the end of that line, outside of the double quotes, I'm going to use a forward slash and a

68
00:05:13,150 --> 00:05:14,080
closing bracket.

69
00:05:16,050 --> 00:05:18,270
Then I'm simply going to copy that again.

70
00:05:19,860 --> 00:05:24,810
And I am going to paste it below and I'm going to change the name for the second parameter.

71
00:05:25,440 --> 00:05:30,060
It's a password and the password value that I'm going to send.

72
00:05:31,010 --> 00:05:33,140
Is Test one two free.

73
00:05:34,680 --> 00:05:36,840
So that's what I need to do in the test engine.

74
00:05:36,940 --> 00:05:37,680
Small file.

75
00:05:38,130 --> 00:05:39,390
So I'm going to save it.

76
00:05:40,350 --> 00:05:41,610
And then I'm going to close it.

77
00:05:43,190 --> 00:05:47,810
So in the actual parameters class, I need to make a few changes.

78
00:05:48,740 --> 00:05:58,610
So the first thing I need to do above the ACT test notation is use an ACT parameters annotation.

79
00:05:59,990 --> 00:06:03,010
And inside of this, I'm going to stay outside of this.

80
00:06:03,020 --> 00:06:04,340
I'm going to use brackets.

81
00:06:04,940 --> 00:06:08,270
And inside those brackets, I'm going to use braces.

82
00:06:08,570 --> 00:06:10,460
So an opening and close embrace.

83
00:06:11,520 --> 00:06:18,060
And I am going to provide, in double quotes the name of the first parameter, and this was email.

84
00:06:19,340 --> 00:06:24,470
And then outside of the double quotes, I'm going to use a comma and I'm going to provide the second

85
00:06:24,470 --> 00:06:27,350
parameter name, which was password.

86
00:06:28,790 --> 00:06:31,400
So you can see it as an error underneath parameters.

87
00:06:31,730 --> 00:06:35,270
And if I hover over it, you'll see I'm given options to import it.

88
00:06:36,220 --> 00:06:42,310
So make sure you import the one from test n g, which is the top on my screen.

89
00:06:43,180 --> 00:06:44,710
So these can be a different order.

90
00:06:45,010 --> 00:06:46,960
So make sure to select the test.

91
00:06:46,960 --> 00:06:47,110
N.

92
00:06:47,110 --> 00:06:47,590
G one.

93
00:06:48,920 --> 00:06:50,540
And that era would then go away.

94
00:06:51,470 --> 00:06:56,570
So this email address matches the parameter from test in g file.

95
00:06:58,180 --> 00:07:04,030
And the second parameter passwords matches the second parameter from one test in G file.

96
00:07:06,080 --> 00:07:10,610
So once I've done that, I then need to amend the method.

97
00:07:11,030 --> 00:07:15,530
So I need to provide parameters in the actual method name itself.

98
00:07:16,250 --> 00:07:18,950
So when I've got sign in, I've got brackets.

99
00:07:19,340 --> 00:07:22,490
And inside those brackets I need to provide values.

100
00:07:23,270 --> 00:07:27,530
So the first one is going to be string and I'm curious email.

101
00:07:29,230 --> 00:07:36,250
And then I'm going to use a comma and provide another string and call this one password.

102
00:07:38,280 --> 00:07:44,940
So now when I'm sending keys and providing a hardcoded value in double quotes, I'm now going to remove

103
00:07:44,940 --> 00:07:45,210
that.

104
00:07:45,930 --> 00:07:48,330
And instead I am going to use email.

105
00:07:49,560 --> 00:07:50,700
Which match is this?

106
00:07:51,790 --> 00:07:53,260
And for the password.

107
00:07:55,060 --> 00:07:57,430
I am going to use password lights like so.

108
00:08:00,260 --> 00:08:03,110
So now I'm ready to try and run this.

109
00:08:03,710 --> 00:08:05,150
So let's see what happens.

110
00:08:06,810 --> 00:08:08,340
So I'm going to run it from the test.

111
00:08:08,340 --> 00:08:09,420
Inject small file.

112
00:08:12,250 --> 00:08:14,320
Unless see how this test proceeds.

113
00:08:20,040 --> 00:08:23,400
So you can see that it provided values there.

114
00:08:24,210 --> 00:08:25,350
And if I run it again.

115
00:08:25,710 --> 00:08:30,690
So I'm going to slow this down so that you can see exactly those values being entered.

116
00:08:31,560 --> 00:08:34,799
So I'm just going to add another friend dot sleep here.

117
00:08:36,100 --> 00:08:37,929
Unless I had one of 5 seconds.

118
00:08:39,770 --> 00:08:43,640
And I am going to add another one after the password has been entered.

119
00:08:44,420 --> 00:08:46,550
So I'm going to save this and try running it again.

120
00:08:55,400 --> 00:08:58,910
So it's gone to the sign in page and it's provided a email address.

121
00:09:01,300 --> 00:09:03,330
And it's provided a password.

122
00:09:06,560 --> 00:09:07,760
And then it signs me in.

123
00:09:09,940 --> 00:09:11,110
So those values.

124
00:09:11,410 --> 00:09:13,030
Email address and password.

125
00:09:13,970 --> 00:09:14,250
Ah.

126
00:09:14,270 --> 00:09:17,720
From the parameters here in the method name.

127
00:09:18,640 --> 00:09:26,780
But these are populated by using this parameters annotation and these parameters annotation will go

128
00:09:26,780 --> 00:09:29,770
and fetch the data from the test.

129
00:09:29,770 --> 00:09:37,480
In example, parameters that have a match in name and the values are these which get provided and sent

130
00:09:37,480 --> 00:09:38,260
to the test.

131
00:09:39,880 --> 00:09:44,110
So to prove this works, let me change the email address to.

132
00:09:47,330 --> 00:09:47,870
Hello.

133
00:09:49,390 --> 00:09:51,430
At test dot com.

134
00:09:52,650 --> 00:09:55,140
So if I say this test injects ammo file.

135
00:09:56,340 --> 00:09:57,540
And try running again.

136
00:09:58,410 --> 00:10:00,810
Let's see if that value now gets sent across.

137
00:10:07,310 --> 00:10:13,250
And you can see halo at test dot com was provided in the email textbox.

138
00:10:14,420 --> 00:10:21,470
And so this user won't be able to sign in because the email address and password is not a correct or

139
00:10:21,470 --> 00:10:30,500
valid combination, so that there has proven that we can send values from our test engine Excel file

140
00:10:30,980 --> 00:10:40,880
to our test and we're able to do that by adding parameters tags into our test injects email file where

141
00:10:40,880 --> 00:10:43,820
we provide a name of the parameter and the value.

142
00:10:45,150 --> 00:10:55,680
And in the actual class itself, we may need to set a at parameters annotation above the test annotation,

143
00:10:56,490 --> 00:11:02,700
and then we need to provide the value of the board, the name of the parameters which match that from

144
00:11:02,700 --> 00:11:03,150
the tests.

145
00:11:03,150 --> 00:11:04,380
Inject small file.

146
00:11:05,900 --> 00:11:09,080
We then need to amend the method to use parameters.

147
00:11:09,770 --> 00:11:16,910
And so I have created a string parameter of email and password and these will get populated with the

148
00:11:16,910 --> 00:11:22,280
data that's been pulled through from the test, injects a nail file at execution.

149
00:11:24,060 --> 00:11:31,440
I then use these parameters in must send case command so that email address is matching the value of

150
00:11:31,440 --> 00:11:34,560
that parameter and is the same for the password.

151
00:11:36,090 --> 00:11:44,130
So this means we can amend the testing parameters as we please and they will be sent to the test that

152
00:11:44,130 --> 00:11:45,600
are used in those parameters.

153
00:11:47,170 --> 00:11:52,000
So why would we use this instead of using hardcoded values in send keys?

154
00:11:53,430 --> 00:12:00,270
Well, think about in the real world where you might have tens or hundreds of different test methods,

155
00:12:01,170 --> 00:12:05,970
you might be use in an email address and password in all of those tests.

156
00:12:06,810 --> 00:12:13,050
And if you've hardcoded those values, it means that if you ever wanted to change the username or email

157
00:12:13,050 --> 00:12:19,140
address and password combination, you would have to go through every single one of those methods and

158
00:12:19,140 --> 00:12:20,340
update them manually.

159
00:12:21,810 --> 00:12:30,420
But by using parameters, it means that I can set the value of these parameters once, and then I can

160
00:12:30,420 --> 00:12:35,130
reuse these parameters in as many methods as I need.

161
00:12:37,800 --> 00:12:44,570
So from a maintainability point of view, I would only have to update the parameters in my test in G

162
00:12:44,580 --> 00:12:50,970
file instead of going through all new methods and updating each of the same keys manually.

163
00:12:52,390 --> 00:12:58,810
So that is the big advantage of using test g parameters and I hope he found this lecture interest and

164
00:12:58,810 --> 00:12:59,440
useful.

165
00:12:59,890 --> 00:13:01,840
And once again, thank you for watching.

