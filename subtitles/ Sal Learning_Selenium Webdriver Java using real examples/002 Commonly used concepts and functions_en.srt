1
00:00:00,530 --> 00:00:05,060
In this lecture, we take a look at some common concepts and functions.

2
00:00:06,750 --> 00:00:09,000
So first off, do not worry.

3
00:00:10,010 --> 00:00:13,730
The following slides may seem fairly scary or won't make sense.

4
00:00:14,920 --> 00:00:17,320
This is expected at this stage.

5
00:00:18,580 --> 00:00:24,340
What I explain here will be repeated and demonstrated time and time again throughout this course.

6
00:00:25,580 --> 00:00:29,480
By the end, you will confidently understand the concepts very well.

7
00:00:30,750 --> 00:00:35,670
For now, all I'm doing is introducing you to the common features and functions.

8
00:00:37,930 --> 00:00:40,570
So let's take a look at some browser set up code.

9
00:00:41,410 --> 00:00:43,750
So the below code is commonly used.

10
00:00:44,790 --> 00:00:49,650
In basic terms, this setup code allows us to write instructions to the browser.

11
00:00:50,190 --> 00:00:53,010
For example, to go to a particular website.

12
00:00:54,500 --> 00:01:00,830
The example below uses the Chrome browser, but I'll show you later how we can tweak the set up code

13
00:01:01,220 --> 00:01:03,140
for both Firefox and Edge.

14
00:01:04,269 --> 00:01:10,510
For now, just scan over the below code and I'll explain it in more detail in the next few slides.

15
00:01:14,420 --> 00:01:17,090
So first we have systems that set property.

16
00:01:18,160 --> 00:01:24,340
The set property method of Java assistant class sets the property of the system use in a key.

17
00:01:25,740 --> 00:01:33,390
When using Chrome, we use this property using the key web driver doc chrome driver and pointed to the

18
00:01:33,390 --> 00:01:35,940
chrome driver key which is the driver.

19
00:01:37,860 --> 00:01:42,060
What we are doing here is telling the system where to find the chrome driver.

20
00:01:43,800 --> 00:01:49,320
Chrome will look for the driver using the value of the web driver, not chrome driver key.

21
00:01:50,450 --> 00:01:56,690
So if we look at the below code in the first double quotes, we're providing the key web driver, dot

22
00:01:56,690 --> 00:01:57,890
chrome, dot driver.

23
00:01:58,920 --> 00:02:04,500
And in the second quotes, we are providing the path to where the chrome driver resides.

24
00:02:07,080 --> 00:02:09,690
So let's look at implementing in a driver object.

25
00:02:10,880 --> 00:02:20,630
So examine the below code and for now know that web driver is an interface driver is a reference variable.

26
00:02:21,830 --> 00:02:23,810
Chrome driver is a constructor.

27
00:02:24,950 --> 00:02:26,600
New is a key word.

28
00:02:27,820 --> 00:02:31,360
And New Chrome driver initiates an object.

29
00:02:34,930 --> 00:02:41,110
Web driver is an interface, and all methods which are declared in the web driver interface are implemented

30
00:02:41,320 --> 00:02:43,180
by the respective driver class.

31
00:02:43,780 --> 00:02:46,060
This is Chrome driver in our case.

32
00:02:47,480 --> 00:02:54,080
Basically we are creating an instance of the web driver interface and casting it to the chrome driver

33
00:02:54,080 --> 00:02:54,680
class.

34
00:02:56,230 --> 00:03:00,130
We could then access methods by using the object name driver.

35
00:03:02,190 --> 00:03:09,420
We can perform various tasks such as opening a browser window, expand the driver window, visit web

36
00:03:09,420 --> 00:03:13,110
page, interact with elements, and then close the browser.

37
00:03:15,050 --> 00:03:17,360
Alternatively, we could write.

38
00:03:17,510 --> 00:03:23,030
So if we look at his image here, here we are creating an instance of the chrome driver class.

39
00:03:24,180 --> 00:03:29,640
The problem with this approach is that this would mean we are limited to using Chrome Driver, which

40
00:03:29,640 --> 00:03:32,490
is no good for cross browser compatibility.

41
00:03:33,790 --> 00:03:38,440
We need a flexible concept that allows us to switch to other browsers.

42
00:03:39,750 --> 00:03:45,960
The reason we use the Web driver interface is so that we can switch to other browser objects by simply

43
00:03:45,960 --> 00:03:49,800
changing the constructor such as web.

44
00:03:49,830 --> 00:03:56,940
Driver driver equals new Firefox driver or web driver driver equals new edge driver.

45
00:03:58,730 --> 00:04:02,750
We also have driver don't manage that window, not maximize.

46
00:04:03,530 --> 00:04:04,190
So here we are.

47
00:04:04,250 --> 00:04:06,890
Access in methods using the driver object.

48
00:04:08,210 --> 00:04:14,990
Driver dot manage returns an instance of the underline implementation of options interface where you

49
00:04:14,990 --> 00:04:16,790
can access the browser's menu.

50
00:04:18,120 --> 00:04:23,450
Driver dot managed dot window which further return interface for managing the browser window.

51
00:04:25,110 --> 00:04:31,780
The window interface has a method called maximize which can be used like driver dot manage dot window

52
00:04:31,780 --> 00:04:34,950
to maximize to maximize the driver window.

53
00:04:36,590 --> 00:04:42,950
So this lecture has given you an introduction to some of the most common concepts that we use when using

54
00:04:42,950 --> 00:04:44,090
Selenium Web driver.

55
00:04:45,050 --> 00:04:48,110
Again, do not worry if you find it is hard to follow.

56
00:04:49,120 --> 00:04:54,460
I'll be using similar codes several times throughout this course, and by the end of it you'll be very

57
00:04:54,460 --> 00:04:57,270
familiar how to set it up and why we use it.

