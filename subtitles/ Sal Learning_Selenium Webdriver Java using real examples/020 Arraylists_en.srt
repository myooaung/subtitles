1
00:00:00,630 --> 00:00:03,900
In this lecture, we take a look at Java lists.

2
00:00:04,830 --> 00:00:06,360
So what is an ArrayList?

3
00:00:07,110 --> 00:00:09,060
And ArrayList is like an array.

4
00:00:09,510 --> 00:00:13,680
Well, one of the key differences is that the ArrayList can be resized.

5
00:00:15,040 --> 00:00:20,290
The ArrayList size will automatically expand if there isn't enough room when adding new elements into

6
00:00:20,290 --> 00:00:21,010
the collection.

7
00:00:22,460 --> 00:00:25,700
ArrayList can be found in the Java util package.

8
00:00:26,600 --> 00:00:30,020
We add the values to an ArrayList using the dot add method.

9
00:00:30,920 --> 00:00:34,430
We remove values from the ArrayList using the dot remove method.

10
00:00:35,610 --> 00:00:39,660
We can retrieve a value from an ArrayList using the dot get method.

11
00:00:41,330 --> 00:00:42,620
So let's see an example.

12
00:00:44,130 --> 00:00:48,300
So in Eclipse, I'm just going to copy and paste the class in the last lecture.

13
00:00:49,340 --> 00:00:55,610
Calling this new one L.A. teen for Lecture 18, and I'm going to give it a name of ArrayList like so.

14
00:00:57,250 --> 00:00:57,640
Lincoln.

15
00:00:57,640 --> 00:01:01,930
Open up that glass and remove the content in the main method.

16
00:01:03,060 --> 00:01:03,990
To look like so.

17
00:01:05,250 --> 00:01:09,810
So the first thing I'm going to do is type A, right?

18
00:01:11,000 --> 00:01:18,110
List and in pointy he brackets the need to define the type of data that I'm going to store in this ArrayList.

19
00:01:19,150 --> 00:01:21,550
So ArrayList with pointy brackets of string.

20
00:01:22,360 --> 00:01:24,840
Then I need to provide a ArrayList name.

21
00:01:24,850 --> 00:01:34,210
So I'm going to call this animals and scans equal new write list points brackets to define the type

22
00:01:34,210 --> 00:01:37,150
again and in round brackets in a semicolon.

23
00:01:38,940 --> 00:01:42,510
So if I hover over a list, you'll see I'm given an option to import it.

24
00:01:43,450 --> 00:01:44,440
And on doing so.

25
00:01:44,680 --> 00:01:45,700
The errors go away.

26
00:01:46,950 --> 00:01:52,530
So the next thing I'm going to do is start adding strings to the animals array list.

27
00:01:53,070 --> 00:01:56,880
And to do this first I need to use the name of the ArrayList.

28
00:01:58,080 --> 00:02:03,330
And then when I pressed dots here, you'll see that I'm given access to a number of methods, and the

29
00:02:03,330 --> 00:02:05,070
method I'm going to use is ADD.

30
00:02:06,210 --> 00:02:09,389
And I'm going to provide a string value within these brackets.

31
00:02:10,350 --> 00:02:12,690
So the first value I'm going to set is Cat.

32
00:02:14,750 --> 00:02:17,570
Then I'm going to do the same for Second Valley.

33
00:02:18,850 --> 00:02:20,860
And this second value is going to be dog.

34
00:02:22,400 --> 00:02:23,840
And I'm going to add one more.

35
00:02:26,330 --> 00:02:28,820
And this is going to be a stilted.

36
00:02:30,760 --> 00:02:31,360
Like so.

37
00:02:33,280 --> 00:02:41,920
So at this point I have created a new animal was an object which is of type ArrayList and the values

38
00:02:41,920 --> 00:02:44,290
we are going to store in this ArrayList is strings.

39
00:02:45,580 --> 00:02:47,270
I've then used animals.

40
00:02:47,340 --> 00:02:54,130
I've called the ArrayList name Dot Add, so adds a method that belongs to ArrayList and by using ADD,

41
00:02:54,130 --> 00:02:56,350
I can add values to the ArrayList.

42
00:02:56,410 --> 00:03:01,270
So I've added free string values cat, dog and lizard to the animals array list.

43
00:03:02,410 --> 00:03:05,170
So the next thing I need to do is print out the values.

44
00:03:05,620 --> 00:03:11,770
So rather than using like an index value added last lecture, I'm going to get some practice use in

45
00:03:11,770 --> 00:03:12,370
a for loop.

46
00:03:13,240 --> 00:03:17,020
So I am going to write for an end in brackets.

47
00:03:17,740 --> 00:03:21,460
I'm going to use int I equals zero.

48
00:03:23,510 --> 00:03:24,320
Semicolon.

49
00:03:26,220 --> 00:03:29,670
AI is less than animals thought science.

50
00:03:33,630 --> 00:03:34,500
Semicolon.

51
00:03:36,010 --> 00:03:40,720
I plus plus and in open and close embraces at the end of that.

52
00:03:41,560 --> 00:03:47,290
So that for loop as we've seen previously I've set an interval and and it's got a value of zero.

53
00:03:48,580 --> 00:03:51,340
The condition, though, is to check to see if I.

54
00:03:51,580 --> 00:03:54,220
So what the value of this i.

55
00:03:55,530 --> 00:03:59,070
It's less than animals the size.

56
00:04:00,270 --> 00:04:03,060
So Animals is the name of the ArrayList collection.

57
00:04:04,240 --> 00:04:11,320
And this dot sized method checks to see how many values has had been added to the animals array list.

58
00:04:12,890 --> 00:04:17,750
So I expect this to be free because we've added free values in sweat.

59
00:04:18,930 --> 00:04:25,860
So it's a way that we can it's right through the values within ArrayList by using an approach like this.

60
00:04:26,950 --> 00:04:34,500
Then we have a semicolon and then we have a simple line plus plus which will increment after each iteration

61
00:04:34,500 --> 00:04:35,220
of the for loop.

62
00:04:37,360 --> 00:04:43,950
So once I have done that, I am going to use system dots out dot prints and.

63
00:04:45,020 --> 00:04:46,600
And inside this.

64
00:04:47,620 --> 00:04:48,820
I am going to use.

65
00:04:50,880 --> 00:04:52,980
Animals, which is the name of the ArrayList.

66
00:04:54,170 --> 00:05:01,730
And then I'm going to use a method called get and you can see get takes a parameter of INT, which refers

67
00:05:01,730 --> 00:05:03,110
to the index value.

68
00:05:07,110 --> 00:05:07,890
So you can see.

69
00:05:07,890 --> 00:05:10,050
Well, I'm using I already in this for loop.

70
00:05:10,470 --> 00:05:13,530
I can simply pass that as the index.

71
00:05:14,100 --> 00:05:21,030
So if you think about this on the first run, if I zero and I is less than animals, I get added to

72
00:05:21,030 --> 00:05:21,720
plus one.

73
00:05:22,530 --> 00:05:28,650
When this code executes this I value is going to change every time the four loop loops around.

74
00:05:30,970 --> 00:05:32,800
So that's all I need to write now.

75
00:05:33,220 --> 00:05:38,440
So I'm going to save this class and try running it and see what the output is.

76
00:05:40,910 --> 00:05:45,680
And you can see Cat, Dog and lizard has been printed to console.

77
00:05:46,400 --> 00:05:47,300
So that's worked.

78
00:05:48,800 --> 00:05:51,140
So say I wanted to add another value now.

79
00:05:53,270 --> 00:05:55,340
Say if I wanted the animal to add.

80
00:05:57,290 --> 00:05:58,880
And I provide the value of horse.

81
00:06:00,140 --> 00:06:02,870
If I save the class again and try running it.

82
00:06:05,500 --> 00:06:06,670
You'll see that for Lupe.

83
00:06:06,700 --> 00:06:07,450
Take care.

84
00:06:07,510 --> 00:06:09,160
Takes care of the additional value.

85
00:06:10,280 --> 00:06:14,960
And the reason for that is the size of the ArrayList has increased by me adding one.

86
00:06:16,260 --> 00:06:18,900
So if I wanted to remove a value from the ArrayList.

87
00:06:19,820 --> 00:06:23,330
I could do animals thought to remove.

88
00:06:28,680 --> 00:06:30,330
And then it takes an index value.

89
00:06:31,390 --> 00:06:34,960
So if I wanted to remove index value zero, for example.

90
00:06:36,780 --> 00:06:37,890
Let's see what happens.

91
00:06:38,340 --> 00:06:39,390
So if I say this.

92
00:06:40,890 --> 00:06:41,460
And run it.

93
00:06:44,300 --> 00:06:48,650
You'll see cat has been removed because Cat.

94
00:06:49,810 --> 00:06:52,120
Is Index zero on creation.

95
00:06:52,840 --> 00:07:03,280
Dog Phobia Index one lizard phobia index to horse will be index free and because removing index zero

96
00:07:03,280 --> 00:07:06,310
value cat and gets taken away.

97
00:07:07,430 --> 00:07:09,860
That's why only free values have been outputted.

98
00:07:11,960 --> 00:07:16,100
So I hope this has been a good introduction into a real ES for you.

99
00:07:17,160 --> 00:07:26,880
And the key point to remember is an ArrayList can expand as we need, whereas an array, once the array

100
00:07:26,880 --> 00:07:30,030
object has been created, cannot be expanded.

101
00:07:31,370 --> 00:07:32,300
Thank you for watching.

