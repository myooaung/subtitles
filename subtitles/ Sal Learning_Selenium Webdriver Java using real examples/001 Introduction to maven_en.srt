1
00:00:00,450 --> 00:00:02,820
Welcome to the next section of this course.

2
00:00:03,420 --> 00:00:09,540
This section is dedicated to Maven and this lecture provides an overview and explains how we should

3
00:00:09,540 --> 00:00:10,290
use Maven.

4
00:00:11,540 --> 00:00:12,740
So what is Maven?

5
00:00:13,550 --> 00:00:16,400
Maven is a powerful build management tool.

6
00:00:17,210 --> 00:00:20,150
It is the most common build management tool for Java.

7
00:00:21,320 --> 00:00:26,120
It uses a concept called POM, which stands for Project Object Model.

8
00:00:27,350 --> 00:00:29,840
May even makes our life much easier.

9
00:00:30,260 --> 00:00:37,670
And this is because it can take care of the framework structure can retrieve dependencies for us, remove

10
00:00:37,670 --> 00:00:40,070
in the need for us to retrieve jars ourselves.

11
00:00:41,040 --> 00:00:43,410
And it comes with many useful plugins.

12
00:00:45,090 --> 00:00:52,470
So here is a sample maven project structure and you can see that at the highest level is the project

13
00:00:53,100 --> 00:00:59,550
followed by a pond, for example, where we store our dependencies and then it has a source folder which

14
00:00:59,550 --> 00:01:01,380
contains mine and test.

15
00:01:01,950 --> 00:01:05,010
And I'll explain this in more detail in later lectures.

16
00:01:07,010 --> 00:01:12,470
So the main purpose of the POM file is to list all dependencies we need in our project.

17
00:01:13,830 --> 00:01:16,470
Maven will then retrieve the dependencies for us.

18
00:01:17,900 --> 00:01:21,500
So do you remember back when we imported the Selenium Jar file?

19
00:01:22,650 --> 00:01:27,960
Well, now we can add a reference to the Selenium jar and version number in the file.

20
00:01:28,500 --> 00:01:34,380
A maven will go and find, download and install the Selenium jar into our project for us.

21
00:01:36,540 --> 00:01:38,670
So how do we find dependencies?

22
00:01:39,580 --> 00:01:43,960
We can find dependencies by using a website called MV N Repository.

23
00:01:45,240 --> 00:01:48,510
This is a library of all dependencies that were available.

24
00:01:49,650 --> 00:01:53,010
And in the example I have search for selenium Java.

25
00:01:56,220 --> 00:02:01,470
So this is what you'd often see when you click on a dependency on VM repository.

26
00:02:02,370 --> 00:02:09,090
So if you look on the left hand side, these are the version numbers of this particular dependency and

27
00:02:09,090 --> 00:02:14,940
those marked as red are not officially released versions, so they're still in an alpha state.

28
00:02:15,660 --> 00:02:18,510
But below that, we have stable versions.

29
00:02:19,290 --> 00:02:22,230
And if you look to the right hand side, you'll see usages.

30
00:02:22,470 --> 00:02:26,250
And this is how often the version has been used by another dependency.

31
00:02:28,440 --> 00:02:33,150
So if we look on this slide, this is when I have clicked on a particular version.

32
00:02:33,660 --> 00:02:36,180
So I have clicked on Selenium Java version.

33
00:02:36,180 --> 00:02:38,700
3.141.59.

34
00:02:39,710 --> 00:02:44,990
And you can see that there is a tab for Maven and that lists a dependency.

35
00:02:45,740 --> 00:02:53,990
So what I can do is take that dependency code and place it into my POM file and then eclipse using maven

36
00:02:53,990 --> 00:03:00,260
will download that dependency for me, which is similar to as if I downloaded and installed an external

37
00:03:00,260 --> 00:03:00,980
jar file.

38
00:03:03,730 --> 00:03:06,430
So inserting dependencies into our palm.

39
00:03:07,410 --> 00:03:13,440
So this is an example or a screenshot of a POM file that I have used in a previous project.

40
00:03:14,280 --> 00:03:16,560
And you can see that there's two dependencies here.

41
00:03:17,220 --> 00:03:20,670
One for Selenium Java and one for Test and G.

42
00:03:21,620 --> 00:03:25,940
So we can add a number of different dependencies into our project.

43
00:03:26,360 --> 00:03:31,610
And Maven will take care of the downloading and installing of that dependency for us.

44
00:03:33,830 --> 00:03:38,540
So the steps that we have ahead are to download and install Maven.

45
00:03:39,750 --> 00:03:42,030
Crater may even project into Eclipse.

46
00:03:43,200 --> 00:03:45,420
Review the structure of the MAVEN project.

47
00:03:46,650 --> 00:03:50,340
Demonstrates how we can easily import dependencies into our project.

48
00:03:51,540 --> 00:03:56,700
Run a simple end to end test using some of what we have learned so far in this course.

49
00:03:58,350 --> 00:04:04,080
So I hope this has given you a good overview of Maven and in the forthcoming lectures would explore

50
00:04:04,080 --> 00:04:05,010
it in more detail.

