WEBVTT
1
00:00:00.460 --> 00:00:07.270
In this lecture, we're going to look at the extent reports architecture and go over some more key information.

2
00:00:09.310 --> 00:00:16.390
So as I mentioned in the last lecture, I will be creating a new class and this class will be responsible

3
00:00:16.660 --> 00:00:21.220
for stored all the set up code we need in order to use extent reports.

4
00:00:22.370 --> 00:00:23.990
So here is a sneak preview.

5
00:00:25.930 --> 00:00:28.360
And this is continued on this second slide.

6
00:00:29.950 --> 00:00:35.170
So don't worry if you don't understand this code, as I explain it when we come to writing it in the

7
00:00:35.170 --> 00:00:36.220
next few lectures.

8
00:00:39.380 --> 00:00:45.680
We will also be amending our listeners class to make use of event methods to carry out various extent

9
00:00:45.680 --> 00:00:46.820
report tasks.

10
00:00:48.600 --> 00:00:56.340
For example, we can use the on start event and we can use this to get the reports and to create a test.

11
00:00:58.270 --> 00:01:03.280
We can use the unfinished finish event, which we used to call the dot flush method.

12
00:01:05.410 --> 00:01:10.030
We have already seen on a test result which describes the result of a test.

13
00:01:11.450 --> 00:01:19.340
I will also introduce ISIS context, which is a class that defines a tense context, which contains

14
00:01:19.340 --> 00:01:22.100
all the information for a given test run.

15
00:01:23.270 --> 00:01:26.930
And his diagram below shows you the difference between the two.

16
00:01:27.560 --> 00:01:34.310
So on the on start method, I'm going to use in a test context, whereas on test starts and all the

17
00:01:34.310 --> 00:01:37.820
other methods in the list in this class, I use my test result.

18
00:01:41.210 --> 00:01:47.090
In a multithreaded environment, a race condition occurs when two or more threads attempt to update

19
00:01:47.090 --> 00:01:49.190
shared data at the same time.

20
00:01:51.140 --> 00:01:58.280
Java offers a mechanism to avoid race conditions by synchronizing free access to shared data.

21
00:01:59.290 --> 00:02:01.480
So think of this as a coherent system.

22
00:02:03.570 --> 00:02:10.680
A piece of logic marked with the synchronized keyword becomes a synchronized block, allowing only one

23
00:02:10.680 --> 00:02:13.350
phrase to execute any given time.

24
00:02:15.690 --> 00:02:22.770
You will find that I use a synchronized keyword in the extent manager and listeners class, and this

25
00:02:22.770 --> 00:02:28.230
is to prevent racing conditions, for example, friends becoming confused with each other.

26
00:02:32.180 --> 00:02:36.920
So our test will be amended to start using the extent report functionality.

27
00:02:37.580 --> 00:02:40.640
So at the moment we have two test classes.

28
00:02:42.650 --> 00:02:43.700
So for example.

29
00:02:44.740 --> 00:02:48.850
You can see here on display in ad remove item basket test.

30
00:02:50.070 --> 00:02:56.010
And here you can see extent logs, which will be displayed in a report that I've demonstrated in the

31
00:02:56.010 --> 00:02:56.970
previous lecture.

32
00:02:58.180 --> 00:03:01.120
These will be triggered when the code reaches these points.

33
00:03:03.720 --> 00:03:07.380
So this slide gives you an overview of the design architecture.

34
00:03:07.800 --> 00:03:13.170
So we have a base page that we're familiar with, but we'll be making a minor change to the code for

35
00:03:13.170 --> 00:03:14.970
the screenshot functionality.

36
00:03:17.880 --> 00:03:24.270
We also are going to create an extent manager and its extent manager class would extend the base page.

37
00:03:25.870 --> 00:03:30.400
The extent manager class itself will contain only extent set up code.

38
00:03:33.350 --> 00:03:40.100
We also have a Hook's class, which also extends the base page, but there's also no changes required

39
00:03:40.130 --> 00:03:41.360
to the Hook's class.

40
00:03:44.100 --> 00:03:49.830
Then we're going to have our listeners class where we're going to amend this to use trigger events to

41
00:03:49.830 --> 00:03:52.470
do some actions linked to extended reports.

42
00:03:55.000 --> 00:04:01.510
We are then going to amend our tests so that we include some log codes which will be reported in the

43
00:04:01.510 --> 00:04:02.500
extent reports.

44
00:04:04.860 --> 00:04:09.090
And then finally, our tests extends the Hook's class.

45
00:04:10.930 --> 00:04:18.279
So this provides a high level overview of the architectural design of how we can implement extent reports

46
00:04:18.279 --> 00:04:19.420
into our framework.

47
00:04:20.740 --> 00:04:23.890
If this seems confusing, honestly, do not worry.

48
00:04:24.580 --> 00:04:28.720
We'll go through each of these changes in detail in the following lectures.

49
00:04:29.350 --> 00:04:30.270
Thank you for watching.

