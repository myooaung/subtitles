WEBVTT
1
00:00:00.490 --> 00:00:03.730
In this lecture, we're going to create the test class.

2
00:00:04.390 --> 00:00:08.170
The test class is going to use the objects class that we created.

3
00:00:08.170 --> 00:00:09.010
Last lecture.

4
00:00:11.230 --> 00:00:17.380
So we are going to create a test class that is to test the functionality of logging into the test or

5
00:00:17.380 --> 00:00:18.370
log in page.

6
00:00:19.700 --> 00:00:22.580
We will create a new package means test cases.

7
00:00:23.930 --> 00:00:26.660
We will then create a new Java class named store.

8
00:00:26.660 --> 00:00:32.090
Log in test within the test cases, package the store, log in.

9
00:00:32.090 --> 00:00:39.560
Test class would then use the objects from the page objects test or log in page class to help construct

10
00:00:39.560 --> 00:00:40.520
the log in test.

11
00:00:43.020 --> 00:00:49.110
So the test class, which is going to be called stor log in test will use the objects from the objects

12
00:00:49.110 --> 00:00:52.980
class to retrieve the locators using the public methods.

13
00:00:54.610 --> 00:00:55.930
In the demonstration.

14
00:00:56.170 --> 00:00:59.950
Notice how I gain access and use the objects methods.

15
00:01:01.080 --> 00:01:07.020
I do this by creating an object of the test or log in page class within the store.

16
00:01:07.020 --> 00:01:08.340
Log in test class.

17
00:01:09.720 --> 00:01:16.650
I then use this object to call methods like email or get passwords to retrieve the locator values for

18
00:01:16.650 --> 00:01:17.970
the elements of interest.

19
00:01:19.560 --> 00:01:27.180
I then perform actions against them e.g. part in data uses sing keys or perform a click using dot click.

20
00:01:29.420 --> 00:01:30.500
So let's try this out.

21
00:01:32.090 --> 00:01:38.480
So in Eclipse I had the Maven project open and the first thing I need to do is create a new package

22
00:01:38.660 --> 00:01:40.550
to store our test classes.

23
00:01:41.390 --> 00:01:44.960
So I'm going to create this under source test Java.

24
00:01:45.710 --> 00:01:48.980
So if I expand that, you'll see that we have a default package here.

25
00:01:49.790 --> 00:01:56.000
But I'm going to create a new package by right click in source, set Java, select in New and then select

26
00:01:56.000 --> 00:01:56.690
in package.

27
00:01:57.530 --> 00:02:03.860
And this package is going to be called test cases and then click Finish.

28
00:02:04.550 --> 00:02:09.320
And now I'm going to right click that package, select new and then select class.

29
00:02:10.280 --> 00:02:17.270
So the class name that I'm going to use is store log in test and then click finish.

30
00:02:18.560 --> 00:02:19.820
That class would then open.

31
00:02:21.320 --> 00:02:26.960
So the first thing I'm going to do in this class is create a new method, and it's going to be called

32
00:02:27.410 --> 00:02:29.780
public void.

33
00:02:31.560 --> 00:02:35.310
Log in and then open and close embraces.

34
00:02:37.070 --> 00:02:43.580
So the next thing I need to do is set up the driver instance, and we've done this many times before.

35
00:02:43.700 --> 00:02:50.030
So instead of writing it manually, I'm just going to go to my intro package and under the source folder,

36
00:02:50.510 --> 00:02:54.830
under the default package folder, I have a class called Chrome Demo.

37
00:02:55.790 --> 00:03:00.770
So I'm going to double click it, open it, and I'm just going to copy these lines of code.

38
00:03:02.950 --> 00:03:06.760
I'm then going to go back to my new class and I'm going to paste it here.

39
00:03:08.260 --> 00:03:13.900
So this is as we've seen in the past, we're pointing to the Chrome driver system property.

40
00:03:14.470 --> 00:03:17.920
We created a new chrome driver object called driver.

41
00:03:18.580 --> 00:03:22.060
It's expanding the window and it's going to go to a Web page.

42
00:03:23.220 --> 00:03:29.610
So the next thing I need to do is update this address to point to the log in page of the test or website.

43
00:03:30.750 --> 00:03:35.700
So I am going to go to the test store by clicking on the test store link here.

44
00:03:37.600 --> 00:03:42.340
And I'm going to click on the sign in page and I'm going to simply copy this address.

45
00:03:43.510 --> 00:03:44.920
And replace the existing one.

46
00:03:48.390 --> 00:03:50.760
So that is our core setup code.

47
00:03:51.720 --> 00:03:58.560
Now, the next thing I need to do is I'm going to create an object of the test store, log in, page

48
00:03:58.560 --> 00:03:59.190
class.

49
00:04:00.120 --> 00:04:06.210
To do this, all I need to do is write the name of the class, which is test.

50
00:04:07.790 --> 00:04:08.390
Store.

51
00:04:09.440 --> 00:04:11.390
Log in page.

52
00:04:12.230 --> 00:04:16.760
I need to give an object name, so I'm going to call this log page.

53
00:04:17.990 --> 00:04:20.660
Equals new test.

54
00:04:21.950 --> 00:04:22.520
Store.

55
00:04:23.090 --> 00:04:27.770
Log in page with brackets at the end and a semicolon.

56
00:04:29.030 --> 00:04:32.540
So you can see that there is an error on the test or log in page.

57
00:04:33.080 --> 00:04:36.830
If I hover over it, you'll see that I've got the option to import it.

58
00:04:38.110 --> 00:04:41.260
And if I do that, that ever goes away.

59
00:04:42.010 --> 00:04:44.800
But there's an error on this second part.

60
00:04:45.190 --> 00:04:49.600
And if I hover over it, it says the constructor is undefined.

61
00:04:50.870 --> 00:04:57.110
So the reason for that is I need to provide a value here and I'm going to write Driver.

62
00:04:58.440 --> 00:05:06.180
So this driver instance inside this inside these parameters is the driver is defined here.

63
00:05:06.840 --> 00:05:08.550
So it's a new chrome driver.

64
00:05:09.750 --> 00:05:18.450
So what's happening here is that when I'm creating a new object of a test or log in page, if I open

65
00:05:18.450 --> 00:05:22.620
up that class, you remember that in the constructor here.

66
00:05:23.770 --> 00:05:26.950
I'm expecting a Webb driver object to be passed.

67
00:05:28.190 --> 00:05:35.360
So when I'm creating this object, I'm providing a driver instance and that driver instance has been

68
00:05:35.360 --> 00:05:35.960
set up.

69
00:05:36.170 --> 00:05:37.640
It needs three lines of code.

70
00:05:39.940 --> 00:05:48.220
So the next thing that I need to do is use those methods from the object's class and we have gets email,

71
00:05:48.850 --> 00:05:51.100
get password and get log in button.

72
00:05:52.760 --> 00:06:01.100
So the first thing I'm going to do is send an email value to the email text filled on the website.

73
00:06:02.100 --> 00:06:07.740
To do this, I'm simply going to use the log page object that I've just created in the line above.

74
00:06:09.120 --> 00:06:09.630
Dot.

75
00:06:10.700 --> 00:06:12.140
Get email.

76
00:06:14.410 --> 00:06:18.880
And that email is very simply using this method.

77
00:06:20.050 --> 00:06:24.010
And its returning driver find element email.

78
00:06:24.160 --> 00:06:26.770
And the email consists of this here.

79
00:06:27.920 --> 00:06:32.030
So it's pointing to the locator for their email textbox.

80
00:06:34.470 --> 00:06:37.050
So I've used the object to call that method.

81
00:06:37.830 --> 00:06:42.570
And by calling that method and getting that locator, I can then perform an action.

82
00:06:43.260 --> 00:06:53.370
So if I write dots here, send keys, I can now send the value and I'm going to send test at test dot

83
00:06:53.400 --> 00:06:53.760
com.

84
00:06:56.670 --> 00:07:02.430
So I am now going to use the object again, but this time I'm going to get password.

85
00:07:03.150 --> 00:07:08.970
And again I'm getting the same keys and the password that I'm going to send is test.

86
00:07:08.970 --> 00:07:09.990
One, two, three.

87
00:07:12.140 --> 00:07:19.370
Finally, I'm going to use that object one more time and it's going to get the log in button locator.

88
00:07:20.210 --> 00:07:25.820
And instead of sending keys and as this is a button, I'm going to use dot click.

89
00:07:29.270 --> 00:07:33.620
So let's try running this test to see what happens.

90
00:07:34.130 --> 00:07:35.510
So I'm going to save this.

91
00:07:36.750 --> 00:07:44.100
And I am going to right click the store, log in, test class, select a run, and you can see that

92
00:07:44.100 --> 00:07:46.200
I don't have an option to run the test.

93
00:07:48.120 --> 00:07:49.530
Have a think why that is.

94
00:07:52.370 --> 00:07:57.200
The reason for that is I haven't declared the test annotation.

95
00:07:59.460 --> 00:08:00.750
And I need to import that.

96
00:08:01.790 --> 00:08:03.200
From Test and J.

97
00:08:04.720 --> 00:08:08.980
And by doing so, testing knows that this is a test.

98
00:08:10.170 --> 00:08:14.610
So if I say this class again and now try running it one more time.

99
00:08:15.760 --> 00:08:17.610
You see, I have the option of test.

100
00:08:17.620 --> 00:08:18.700
N g test.

101
00:08:20.080 --> 00:08:22.540
So if I run it, let's see what happens.

102
00:08:25.100 --> 00:08:26.450
So I opened up the browser.

103
00:08:26.810 --> 00:08:29.960
It's gone to log in page and it's logged me in.

104
00:08:31.400 --> 00:08:43.010
So I managed to do that by reference in an object of the object's class and that object's class stores

105
00:08:43.760 --> 00:08:47.690
methods which retrieves the locator values.

106
00:08:48.760 --> 00:08:52.840
So imagine I had a number, a test class here.

107
00:08:53.830 --> 00:08:55.840
And it used the same locators.

108
00:08:56.710 --> 00:09:00.940
If a developer changed the layouts of this log in page.

109
00:09:02.790 --> 00:09:06.750
And for example, change the locator values as part of the redesign.

110
00:09:07.440 --> 00:09:16.650
Then all it requires me to do is update the locators in the test store, log in page which saw the locator

111
00:09:16.650 --> 00:09:17.370
values.

112
00:09:18.900 --> 00:09:22.890
So all I'd have to do, for example, is update this locator.

113
00:09:24.090 --> 00:09:24.990
Or these ones.

114
00:09:26.430 --> 00:09:33.150
But because we're using the locators in a centralized location, that means all other classes that uses

115
00:09:33.150 --> 00:09:38.670
that page objects class will also be updated with the new locator values.

116
00:09:39.210 --> 00:09:43.620
Because we creating a object of that object's class.

117
00:09:44.650 --> 00:09:49.510
And we get in the locators by calling methods from within that class.

118
00:09:50.650 --> 00:09:55.060
So that's why we construct our tests in this way.

119
00:09:56.000 --> 00:10:03.080
It's for improved maintainability, and it's so that we don't have to update each individual test class.

120
00:10:04.660 --> 00:10:07.240
I hope this concept has been useful to you.

121
00:10:07.990 --> 00:10:13.930
And when we do the live project from the next section, we'll start making use of this concept.

122
00:10:14.740 --> 00:10:15.700
Thank you for watching.

