WEBVTT
1
00:00:00.580 --> 00:00:03.820
In this lecture, we take a look at Java syntax.

2
00:00:05.560 --> 00:00:09.550
Every line of code that runs in Java must be inside a class.

3
00:00:10.900 --> 00:00:11.550
A class.

4
00:00:11.560 --> 00:00:14.320
It always starts with an uppercase first letter.

5
00:00:15.940 --> 00:00:21.970
Java is K sensitive and the name of the job of file must match the class name.

6
00:00:23.530 --> 00:00:27.520
Java Phi always uses the dot java extension in the file name.

7
00:00:29.530 --> 00:00:33.610
So the main method is essential and will be found in every Java program.

8
00:00:34.690 --> 00:00:37.780
Any code inside the main method will be executed.

9
00:00:39.070 --> 00:00:46.210
It is the starting point of where our code will run whenever a Java program is submitted to the job

10
00:00:46.210 --> 00:00:47.230
of virtual machine.

11
00:00:47.680 --> 00:00:50.080
It looks for the main method and invokes it.

12
00:00:52.250 --> 00:00:53.360
So let's try this out.

13
00:00:54.930 --> 00:00:57.740
So the first thing I'm going to do is open up the clips.

14
00:00:58.380 --> 00:01:04.709
And as we're in a new section, I'm going to right click the source folder, go to new and click package,

15
00:01:05.250 --> 00:01:11.040
and I'm going to call this package section zero seven and then click Finish.

16
00:01:12.560 --> 00:01:19.490
So under that new section I'm that's right click new and class to create a new class and I'm going to

17
00:01:19.490 --> 00:01:29.330
call this L for lecture zero free because this is the third lecture under section seven underscore syntax.

18
00:01:29.990 --> 00:01:30.350
So.

19
00:01:31.210 --> 00:01:36.580
And this time I am not going to select public static void and I'm going to click Finish.

20
00:01:38.250 --> 00:01:39.600
So that class should open.

21
00:01:40.440 --> 00:01:43.350
So if I try and run this class, let's see what happens.

22
00:01:44.390 --> 00:01:46.760
So you see that I have no option to run it.

23
00:01:47.720 --> 00:01:52.240
And the reason for that is because I do not have an entry point in this class.

24
00:01:53.720 --> 00:02:05.850
An entry point will be declared by using public static void main and then inside brackets.

25
00:02:06.080 --> 00:02:08.150
I'll be right in string.

26
00:02:10.169 --> 00:02:15.000
Open and close in square brackets and then args like so.

27
00:02:16.260 --> 00:02:23.400
And at the end of that line, I'm going to have an open and close in braces like so.

28
00:02:24.850 --> 00:02:28.930
So this is now the entry points of where the code will execute.

29
00:02:29.620 --> 00:02:31.360
So if I save this class now.

30
00:02:32.390 --> 00:02:33.560
And right click and run.

31
00:02:34.520 --> 00:02:35.150
You'll see that.

32
00:02:35.150 --> 00:02:37.430
Now I've got the option of Java application.

33
00:02:39.250 --> 00:02:43.330
So inside this inside this static void main.

34
00:02:43.630 --> 00:02:51.490
I'm going to simply use system dots out the print end and I'm going to type out.

35
00:02:51.580 --> 00:02:52.150
Hello?

36
00:02:52.960 --> 00:02:55.450
Well, the semicolon.

37
00:02:56.840 --> 00:03:00.050
So if I say this class and I try to monetize.

38
00:03:02.490 --> 00:03:05.670
You'll see in the console is outputs it hello world.

39
00:03:07.380 --> 00:03:14.820
So to briefly explain public static void, main public means that the method is visible and can be called

40
00:03:14.820 --> 00:03:16.770
from other objects of other types.

41
00:03:18.160 --> 00:03:24.940
Static means that the method is associated with the class, not a specific instance, i.e. object of

42
00:03:24.940 --> 00:03:25.600
that class.

43
00:03:26.320 --> 00:03:30.730
This means that you can call a static method without creating an object of the class.

44
00:03:32.110 --> 00:03:34.870
Void means that the method has no return value.

45
00:03:35.350 --> 00:03:42.850
If the method returned int for example, you would write int instead of void and main is the main method

46
00:03:42.850 --> 00:03:43.270
name.

47
00:03:43.540 --> 00:03:50.680
So this is the name of the method that Java looks for as the initiation or start in point three executes

48
00:03:50.680 --> 00:03:51.730
a Java program.

49
00:03:53.200 --> 00:04:01.060
So string args is a parameter and this is often to provide arguments as a string when executes in a

50
00:04:01.060 --> 00:04:03.250
Java program via command line.

51
00:04:05.080 --> 00:04:11.500
So that's the key points of why we use public static void main and I hope that it's made it more clearer

52
00:04:11.500 --> 00:04:12.660
as to why we use it.

53
00:04:14.220 --> 00:04:16.350
So let's move on to the next subject.

