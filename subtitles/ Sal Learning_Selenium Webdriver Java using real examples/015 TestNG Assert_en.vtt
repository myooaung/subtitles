WEBVTT
1
00:00:00.570 --> 00:00:04.290
In this lecture, we take a look at Test G, a third class.

2
00:00:06.300 --> 00:00:10.990
So the test, Angie asserts, are the most frequently used methods in Test n g.

3
00:00:12.120 --> 00:00:18.060
Test and G asserts are used to decide whether the test was successful or not, along with the exceptions.

4
00:00:19.490 --> 00:00:24.920
So far we have seen j unit asserts and tests in G asserts are very similar.

5
00:00:25.340 --> 00:00:30.110
But there are a few reasons we use test in G and I explain the reasons on the next slide.

6
00:00:31.290 --> 00:00:36.630
The key thing to understand at this point is that testing has its own research tools.

7
00:00:38.530 --> 00:00:41.800
On this slide, we look at G unit versus test n g.

8
00:00:42.880 --> 00:00:45.760
So both frameworks have parameter wise tests.

9
00:00:46.060 --> 00:00:51.610
Timeout features an exception tests, and both frameworks have several similarities.

10
00:00:52.950 --> 00:00:59.790
But testing has some more advanced features, and it's possible to do more than just unit testing.

11
00:01:01.630 --> 00:01:04.300
So this table explains some of the key differences.

12
00:01:05.080 --> 00:01:12.040
So J units is often installed by default in your I.D., whereas test in G must be installed by the user.

13
00:01:13.290 --> 00:01:13.590
J.

14
00:01:13.590 --> 00:01:22.080
Unit configuration is done only from the job of test classes where Test N G has access to the test in

15
00:01:22.560 --> 00:01:25.470
small file which can store the configuration.

16
00:01:26.630 --> 00:01:33.200
J units has no group functionality where testing allows you to create groups of tests that belong to

17
00:01:33.200 --> 00:01:36.620
different classes through the use of the test inject smell.

18
00:01:37.850 --> 00:01:44.480
J unit has no dependency functionality, but test and G has dependency tests and we can use commands

19
00:01:44.480 --> 00:01:45.800
like we've seen using.

20
00:01:45.800 --> 00:01:48.260
Depends on method j.

21
00:01:48.260 --> 00:01:53.960
Unit needs to install a reporting tool where test then g has by default.

22
00:01:53.960 --> 00:01:58.130
H html reports are generated when the tests are executed.

23
00:01:59.150 --> 00:02:06.530
J unit has a limited list but still useful list of annotations where tests and G has a more extensive

24
00:02:06.530 --> 00:02:08.389
list of usable annotations.

25
00:02:10.710 --> 00:02:17.730
So the key thing to remember is that we are using tests, testing frameworks going forward and will

26
00:02:17.730 --> 00:02:22.170
be used in the test g assert tools instead of the j unit search tools.

27
00:02:23.400 --> 00:02:25.290
They work in a very similar way.

28
00:02:26.260 --> 00:02:30.520
Its main purpose is to determine if a test step has passed or failed.

29
00:02:31.390 --> 00:02:36.310
And when we import, this class will be using the one from the test engine library.

30
00:02:38.110 --> 00:02:39.460
So let's see an example.

31
00:02:40.510 --> 00:02:41.350
In Eclipse.

32
00:02:41.350 --> 00:02:45.550
I am going to simply copy the class in the last lecture and paste it.

33
00:02:46.480 --> 00:02:56.110
Given the name of this new class of L15 for lecture 15 and I'm going to call it test energy assert and

34
00:02:56.110 --> 00:02:56.440
then click.

35
00:02:56.440 --> 00:02:56.950
Okay.

36
00:02:58.570 --> 00:03:04.480
Lingard's opened that class, and the first thing I'm going to do is simply remove this enabled equals

37
00:03:04.480 --> 00:03:07.060
false from the last lecture.

38
00:03:08.720 --> 00:03:14.450
So all I'm going to do in this lecture is show you the use of the test n g asset class.

39
00:03:15.020 --> 00:03:19.430
And my plan is to simply force fail this particular test.

40
00:03:20.680 --> 00:03:27.670
And I can do this by making some room here and writing assert with a capital A and in dot.

41
00:03:28.720 --> 00:03:31.750
And you'll see that I've got a list of usable methods.

42
00:03:32.340 --> 00:03:38.610
But if we scroll to our right, we can see that these belong to J Unit and I want to use the assert

43
00:03:38.620 --> 00:03:39.610
and test n g.

44
00:03:40.920 --> 00:03:48.480
So if I hover over the word assert, you'll see that I'm given an option to import it from org dot test

45
00:03:48.480 --> 00:03:49.020
n g.

46
00:03:49.590 --> 00:03:51.570
So this is the one I want to use.

47
00:03:52.470 --> 00:03:58.200
So it's important that you might that you make sure to select the assert from the test in G.

48
00:03:59.870 --> 00:04:00.800
By doing so.

49
00:04:01.550 --> 00:04:07.880
If I go back and write Dot again, you'll see that I'm given access to a number of methods, but I don't

50
00:04:07.880 --> 00:04:09.140
belong to J Unit.

51
00:04:09.920 --> 00:04:14.780
These are assert methods that belong to test in G.

52
00:04:16.470 --> 00:04:19.440
Now do not be put off by a number of methods here.

53
00:04:20.490 --> 00:04:27.060
We are going to use very few of these and we'll start using these more often as we start developing

54
00:04:27.060 --> 00:04:27.900
our framework.

55
00:04:28.710 --> 00:04:36.030
But for this particular lecture, all I want to do is force this test and I can do that by selecting

56
00:04:36.030 --> 00:04:36.480
fail.

57
00:04:37.490 --> 00:04:39.170
So assert fail.

58
00:04:40.600 --> 00:04:45.130
Now, if I run this test by saving it and then right click in to run it.

59
00:04:46.610 --> 00:04:47.720
Let's see what happens.

60
00:04:54.290 --> 00:04:58.430
So it's gone to the login page on the store and it's entered a password.

61
00:04:59.300 --> 00:05:00.890
And if I go back to Eclipse.

62
00:05:01.950 --> 00:05:04.950
You'll see that one test has passed and one has failed.

63
00:05:06.240 --> 00:05:09.900
So this one has passed, but this one here has failed.

64
00:05:10.770 --> 00:05:12.840
And if I look at the console.

65
00:05:13.840 --> 00:05:19.870
You'll find the reason it failed was because test and assert fail has been output.

66
00:05:20.380 --> 00:05:24.520
And the reason for that is that this method will fail the test.

67
00:05:26.680 --> 00:05:34.120
So the key thing to remember from this lecture is that we're using the test engine assert class, and

68
00:05:34.120 --> 00:05:40.630
I can confirm that by going to the top of this class and expanding the import window and you'll see

69
00:05:40.630 --> 00:05:43.150
that test energy assert is listed.

70
00:05:44.870 --> 00:05:47.880
So we'll be using tests, N.G. asserts.

71
00:05:48.020 --> 00:05:49.430
Going forward, the next course.

72
00:05:50.920 --> 00:05:51.900
Thank you for watching.

