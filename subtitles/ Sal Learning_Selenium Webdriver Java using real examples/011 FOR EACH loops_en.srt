1
00:00:00,760 --> 00:00:03,820
In this lecture, we take a look at four H loops.

2
00:00:05,150 --> 00:00:06,980
So what is it for each loop?

3
00:00:07,790 --> 00:00:11,300
It starts with a keyword for like a normal for loop.

4
00:00:12,350 --> 00:00:18,140
But instead of declaring an initialize in a loop counter variable like the int equals oh, in our last

5
00:00:18,140 --> 00:00:24,830
example you declare a variable that is assigned same type as the base type of the array, followed by

6
00:00:24,830 --> 00:00:27,680
a colon, which is then followed by the array name.

7
00:00:29,510 --> 00:00:35,360
Is commonly used its rate over an array or collections class, for example, whenever you list.

8
00:00:37,340 --> 00:00:39,320
So this might not make sense at the moment.

9
00:00:40,320 --> 00:00:41,610
But let's see an example.

10
00:00:44,210 --> 00:00:44,960
In Eclipse.

11
00:00:44,960 --> 00:00:52,630
I'm going to simply copy and paste the class in the last lecture, call in S1 l 11 for lecture 11 and

12
00:00:52,640 --> 00:00:55,100
I'm going to give it a name of for each loop.

13
00:00:55,790 --> 00:00:57,380
Like so click.

14
00:00:57,380 --> 00:00:57,890
Okay.

15
00:00:58,550 --> 00:01:00,170
And then I'm going to double click and open it.

16
00:01:01,070 --> 00:01:04,519
So I am going to remove the for loop from last lecture.

17
00:01:06,370 --> 00:01:11,200
And the first thing I'm going to do here is I'm going to create an integer, right?

18
00:01:11,830 --> 00:01:16,270
And you do this by right in in T and then square brackets.

19
00:01:17,340 --> 00:01:20,070
And then I need to give the array a name.

20
00:01:20,430 --> 00:01:21,870
So I'm going to call it numbers.

21
00:01:23,520 --> 00:01:25,860
So an array is a collection.

22
00:01:26,490 --> 00:01:34,380
And so what this means is I can store a number of number values in this integer array called numbers.

23
00:01:35,410 --> 00:01:40,930
And I can do this by write in equals and then open and close embraces.

24
00:01:41,990 --> 00:01:45,680
And then I'm going to add two, comma four.

25
00:01:46,660 --> 00:01:48,280
Coma six.

26
00:01:48,940 --> 00:01:49,990
Coma and eight.

27
00:01:49,990 --> 00:01:50,680
Like so.

28
00:01:50,980 --> 00:01:53,710
And at the end of that line, I'm at a semicolon.

29
00:01:54,890 --> 00:02:02,300
So what this means is that this array called numbers is going to store four integer numbers two, four,

30
00:02:02,300 --> 00:02:03,220
six and eight.

31
00:02:05,010 --> 00:02:07,950
The next thing I'm going to do is use the keyword for.

32
00:02:09,020 --> 00:02:14,450
And then in brackets I'm going to write int number.

33
00:02:15,710 --> 00:02:20,410
Then the colon and then the name of the array, which is numbers.

34
00:02:22,780 --> 00:02:29,470
At the end of that line, I'm going to create new braces and inside the foil for each loop.

35
00:02:29,890 --> 00:02:39,130
I'm going to write system dots out dot print n and the value that I want to print is number.

36
00:02:41,920 --> 00:02:42,730
So very simply.

37
00:02:42,730 --> 00:02:50,860
Again, I've created a int array called numbers and I'm storing four integers in that array.

38
00:02:51,670 --> 00:02:58,750
I'm then using a for each loop and in the first part the brackets I've declared an int called number.

39
00:02:59,650 --> 00:03:01,000
And then I've used a colon.

40
00:03:01,450 --> 00:03:07,390
And then as a second part of that bracket, I've added the name of the collection, which is called

41
00:03:07,390 --> 00:03:08,020
Numbers.

42
00:03:09,070 --> 00:03:14,440
And then what's going to happen is it's going to go through each one of those values in this collection

43
00:03:15,220 --> 00:03:20,080
and print out line and provide the number value.

44
00:03:20,770 --> 00:03:26,350
So that number is going to change after every iteration based on these values here.

45
00:03:28,230 --> 00:03:30,120
So let me say this and try running it.

46
00:03:34,080 --> 00:03:37,290
And you can see their every single value has printed.

47
00:03:38,240 --> 00:03:39,770
So it's iterated through.

48
00:03:40,850 --> 00:03:45,050
Each one of those values in the numbers collection and printed out.

49
00:03:46,890 --> 00:03:50,760
So what is the key difference between a for each loop and a follow?

50
00:03:51,940 --> 00:03:58,360
So you may remember from the last lecture when declaring a fallout, you have to declare how many times

51
00:03:58,360 --> 00:03:59,590
you want the loop to run.

52
00:04:00,600 --> 00:04:03,750
Whereas with a for each loop I can add to it.

53
00:04:03,990 --> 00:04:07,920
For example, if I had ten, 12 and 14.

54
00:04:08,760 --> 00:04:13,680
I don't have to make any changes to the for each loop because if I run this again now.

55
00:04:16,829 --> 00:04:19,740
You'll see that those additional values have been accounted for.

56
00:04:22,430 --> 00:04:24,710
So I hope you found this lecture useful.

57
00:04:25,400 --> 00:04:26,660
And thank you for watching.

