WEBVTT
1
00:00:00.760 --> 00:00:03.969
In this lecture, we take a look at Java parameters.

2
00:00:05.410 --> 00:00:06.970
So what is a parameter?

3
00:00:07.939 --> 00:00:11.360
A parameter is a value that you can pass to a method.

4
00:00:12.700 --> 00:00:14.890
You are not limited to a single parameter.

5
00:00:15.970 --> 00:00:19.720
You can pass more than one parameter if that is what the method is expecting.

6
00:00:21.170 --> 00:00:27.200
We set the parameter data type when we create the method e.g. the parameter might be a string or an

7
00:00:27.200 --> 00:00:27.560
end.

8
00:00:29.310 --> 00:00:30.530
Let's see an example.

9
00:00:31.680 --> 00:00:36.550
So in Eclipse, I'm going to simply copy and paste the class in the last lecture hall.

10
00:00:36.580 --> 00:00:46.350
Less L13 for lecture 13 and I'm going to call this parameters like so and I'm going to open up that

11
00:00:46.350 --> 00:00:47.190
new class.

12
00:00:47.940 --> 00:00:54.540
So I'm going to remove the code from the last lecture and I'm going to remove a few white spaces to.

13
00:00:56.050 --> 00:01:02.080
So I am going to create a new method and I'm going to call this public static.

14
00:01:03.090 --> 00:01:03.660
Void.

15
00:01:05.160 --> 00:01:12.210
Get name and in brackets and then the usual braces like so.

16
00:01:13.520 --> 00:01:19.010
But this time inside the brackets, I am going to provide two parameters.

17
00:01:19.670 --> 00:01:22.040
So the first one is going to be a type string.

18
00:01:24.090 --> 00:01:28.850
And I'm going to call it first name.

19
00:01:30.620 --> 00:01:34.130
Then I'm going to add a comma and add a second string parameter.

20
00:01:35.200 --> 00:01:38.020
Cold last night like so.

21
00:01:40.150 --> 00:01:45.640
And inside the method I'm going to write sys dots out the print.

22
00:01:45.640 --> 00:01:45.910
L.

23
00:01:45.910 --> 00:01:46.240
N.

24
00:01:49.510 --> 00:01:53.470
And inside those brackets, I am going to write in double quotes.

25
00:01:54.010 --> 00:01:54.490
Hello.

26
00:01:55.450 --> 00:01:58.870
My name is.

27
00:02:00.380 --> 00:02:07.510
Then using the plus signs, I'm going to pass the first parameter value to first name.

28
00:02:08.560 --> 00:02:09.160
Plus.

29
00:02:10.979 --> 00:02:15.240
I'm going to do another double quote just to add a space in between the two values.

30
00:02:17.200 --> 00:02:20.440
And then I'm going to provide last name like so.

31
00:02:23.280 --> 00:02:25.710
So that's the method completed.

32
00:02:26.280 --> 00:02:28.920
So I am going to now use in the main method.

33
00:02:30.070 --> 00:02:32.260
I am going to call that method name.

34
00:02:32.410 --> 00:02:33.850
So get a name.

35
00:02:35.230 --> 00:02:37.300
But inside the brackets of get name.

36
00:02:38.790 --> 00:02:39.180
Sorry.

37
00:02:43.450 --> 00:02:47.740
So inside the brackets of get name, I'm going to pass two values.

38
00:02:48.100 --> 00:02:49.390
So I'm going to call the first one.

39
00:02:50.140 --> 00:02:50.560
John.

40
00:02:52.500 --> 00:02:54.450
And the second one, Smith.

41
00:02:57.550 --> 00:02:58.930
So if I say this now.

42
00:03:00.400 --> 00:03:02.110
What do you think is going to happen there?

43
00:03:09.990 --> 00:03:11.760
So in the console it's printed.

44
00:03:11.790 --> 00:03:12.360
Hello.

45
00:03:12.360 --> 00:03:14.250
My name is John Smith.

46
00:03:16.470 --> 00:03:23.580
So what we did in in public static void main is that we called to get in a method which is this method

47
00:03:23.580 --> 00:03:23.880
here.

48
00:03:24.780 --> 00:03:31.230
And this method takes two parameters a string called first name and a string called last name.

49
00:03:32.550 --> 00:03:35.100
And inside that method we're simply printing out.

50
00:03:35.130 --> 00:03:41.310
Hello, my name is and pass in that first name parameter and then that last name parameter.

51
00:03:43.010 --> 00:03:47.720
But when we called a method in in the main method up here.

52
00:03:48.900 --> 00:03:52.530
When we call in get name we actually pass in the values.

53
00:03:53.600 --> 00:03:56.320
Which will then be passed into these parameters.

54
00:03:58.860 --> 00:03:59.750
So that's why.

55
00:04:01.200 --> 00:04:03.420
John Smith has been printed in console.

56
00:04:05.350 --> 00:04:08.380
So what would happen if I added another parameter here?

57
00:04:08.860 --> 00:04:10.930
Such as Jones.

58
00:04:13.080 --> 00:04:14.130
You'll see it as an error.

59
00:04:14.640 --> 00:04:18.660
And if a hover over error, says the method, get name into it.

60
00:04:18.660 --> 00:04:20.820
L13 is not applicable to the argument.

61
00:04:20.829 --> 00:04:21.269
String.

62
00:04:21.269 --> 00:04:21.660
String.

63
00:04:21.660 --> 00:04:22.140
String.

64
00:04:23.160 --> 00:04:28.710
So this method is not expect in free parameters because only two have been defined.

65
00:04:33.340 --> 00:04:35.350
So if I was to swap those two values around.

66
00:04:35.500 --> 00:04:36.940
So if I called this Smith.

67
00:04:39.530 --> 00:04:40.400
And this one, John.

68
00:04:41.650 --> 00:04:44.140
And save them and rerun it again.

69
00:04:46.900 --> 00:04:48.640
You'll see the names have been switched around.

70
00:04:49.770 --> 00:04:55.170
Because the the order for which you pass these parameters matter.

71
00:04:56.100 --> 00:05:03.030
So the first parameter value would be with declaring in the method will be passed to the first parameter

72
00:05:03.750 --> 00:05:06.570
and the second parameter will be passed to the second.

73
00:05:08.180 --> 00:05:09.800
So I hope that's my sense.

74
00:05:09.800 --> 00:05:11.870
And now you understand how parameters work.

75
00:05:12.350 --> 00:05:13.160
Thanks for watching.

