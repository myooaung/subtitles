1
00:00:00,680 --> 00:00:03,740
In this lecture, we take a look at Java Fruits.

2
00:00:05,620 --> 00:00:11,560
So Multi-Threaded is when two or more tasks execute concurrently within a single program.

3
00:00:12,990 --> 00:00:16,710
A freight is an independent path of execution within a program.

4
00:00:18,210 --> 00:00:20,670
Many friends can run at the same time.

5
00:00:21,950 --> 00:00:27,730
And every Friday in Java is created and controlled by the Java Lang DOP Fred class.

6
00:00:30,150 --> 00:00:32,220
So how to create a frat in Java?

7
00:00:33,000 --> 00:00:34,140
There are two ways.

8
00:00:35,120 --> 00:00:41,870
We can extend the fret class and override the run method, or we can implement the vulnerable interface.

9
00:00:42,890 --> 00:00:49,430
So if you look at a diagram on the top example, I'm extending the friend class.

10
00:00:50,390 --> 00:00:55,040
In the second example, I'm implementing the run table interface.

11
00:00:59,420 --> 00:01:01,700
If the class extends to class.

12
00:01:02,880 --> 00:01:06,090
The freight can be run by crates in an instance of the cross.

13
00:01:07,690 --> 00:01:09,520
We didn't call the start method.

14
00:01:10,510 --> 00:01:12,910
So in this example, I extend Fred.

15
00:01:14,100 --> 00:01:17,070
I create a new object of this class I'm in.

16
00:01:18,260 --> 00:01:21,170
Then I use Fred Dot's slate dot starts.

17
00:01:22,650 --> 00:01:25,290
And then that starts the execution of the friends.

18
00:01:28,610 --> 00:01:35,900
If the class implements the vulnerable interface, the thread can be run by a pass in an instance of

19
00:01:35,900 --> 00:01:41,990
the class to a Fred's object constructor, then call in the Fred Start method.

20
00:01:43,500 --> 00:01:46,890
So in this example, I implement the vulnerable interface.

21
00:01:47,670 --> 00:01:49,770
I create a new object of the class.

22
00:01:50,580 --> 00:01:53,220
I then use Fred Fred's object.

23
00:01:53,220 --> 00:01:55,050
So it creates a new object of Fred.

24
00:01:55,680 --> 00:02:02,700
And then I pass the object of the class I'm in as parameters to the Fred object.

25
00:02:04,020 --> 00:02:08,370
I then use the friend object start method to start the execution.

26
00:02:12,230 --> 00:02:17,900
Just because friends are starting in sequence, it doesn't mean they'll be executed sequentially.

27
00:02:19,330 --> 00:02:22,780
Friends execute in parallel, not sequentially.

28
00:02:24,040 --> 00:02:29,380
The order in is determined by the job, a virtual machine and or the operating system.

29
00:02:30,730 --> 00:02:34,900
So in this particular example, I'm extending the thread class.

30
00:02:36,300 --> 00:02:40,980
And I'm using a phone loop to run several times.

31
00:02:41,960 --> 00:02:52,130
And I'm executing a friend each time for loop runs, which outputs a number which is determined by the

32
00:02:52,130 --> 00:02:53,660
value of ion for loop.

33
00:02:54,980 --> 00:03:02,420
Each time this execution runs, I will change to one, two, three, four, five, etc. and so I expect

34
00:03:02,420 --> 00:03:05,480
the output to be placed in console.

35
00:03:07,040 --> 00:03:15,580
But you'd think because a four loop runs in sequential order, so on a increments by one each time that

36
00:03:15,590 --> 00:03:23,450
because the threads are executed in parallel, you can see the output is not actually in the order we

37
00:03:23,450 --> 00:03:24,260
would expect.

38
00:03:25,380 --> 00:03:30,930
So instead of 1 to 5, we have 012435.

39
00:03:31,830 --> 00:03:38,100
So the execution of Fred for actually executing completed before Fred three.

40
00:03:41,650 --> 00:03:42,930
So let's see an example.

41
00:03:45,400 --> 00:03:50,290
So I'm actually going to demonstrate three different examples to you in this lecture.

42
00:03:51,190 --> 00:03:55,480
So for the first example, I'm going to extend the class.

43
00:03:56,140 --> 00:04:03,790
So I am going to create a copy and paste the class in the last lecture calling this one l.

44
00:04:03,790 --> 00:04:05,200
21 i.

45
00:04:06,510 --> 00:04:08,860
And I'm going to give it a name of Fred.

46
00:04:09,810 --> 00:04:10,620
Extend.

47
00:04:12,450 --> 00:04:12,840
And click.

48
00:04:12,840 --> 00:04:13,350
Okay.

49
00:04:14,770 --> 00:04:20,860
So I'm going to double click to open that class and I'm actually going to remove everything apart from

50
00:04:21,010 --> 00:04:22,420
the void main method.

51
00:04:23,760 --> 00:04:26,730
There you can see that there's a yellow line and icons here.

52
00:04:26,730 --> 00:04:29,580
And this is because we're not actually using these classes.

53
00:04:30,680 --> 00:04:34,610
So I am going to remove those like so and that will get rid of the error.

54
00:04:36,220 --> 00:04:41,500
So the first thing I'm going to do is I'm going to create a new object based on this class.

55
00:04:41,950 --> 00:04:49,480
So I'm going to copy the class name and paste it here, and I'm going to give the object the name of

56
00:04:49,480 --> 00:04:49,930
Fred.

57
00:04:50,860 --> 00:04:56,140
And it's going to equal a new instance of this class like so.

58
00:04:58,690 --> 00:05:02,080
And then going to use that, Fred, that object called Fred.

59
00:05:04,490 --> 00:05:07,040
And I'm going to call a method called Start.

60
00:05:10,010 --> 00:05:10,850
I've made an error.

61
00:05:11,690 --> 00:05:14,360
So the first thing I haven't done here is extends.

62
00:05:16,270 --> 00:05:16,750
Fred.

63
00:05:19,190 --> 00:05:20,600
So once I do that.

64
00:05:21,910 --> 00:05:23,380
If I use a thought.

65
00:05:23,380 --> 00:05:26,410
Now, you see, I've got a method called Start.

66
00:05:29,680 --> 00:05:33,790
So then I'm going to use a simple system thought out.

67
00:05:34,870 --> 00:05:36,100
Not print end.

68
00:05:38,970 --> 00:05:41,940
And I am going to print here outside.

69
00:05:43,100 --> 00:05:44,420
Of a friend.

70
00:05:45,620 --> 00:05:46,580
We were semi-colon.

71
00:05:48,810 --> 00:05:52,170
I'm then outside this this brace.

72
00:05:53,260 --> 00:05:57,820
I am going to write to public void.

73
00:05:59,100 --> 00:05:59,600
Run.

74
00:06:01,590 --> 00:06:03,120
Open and close embraces.

75
00:06:04,160 --> 00:06:09,110
They're not going to simply copy that system, outline and paste it within the method.

76
00:06:09,920 --> 00:06:13,760
And I'm going to change outside to inside like so.

77
00:06:16,190 --> 00:06:22,370
So to quickly explain what I've done here, I have created a new class which extends to Fred.

78
00:06:23,330 --> 00:06:24,560
Fred Superclass.

79
00:06:26,220 --> 00:06:31,800
Of them created a new object, which is an instance of this particular class I've created.

80
00:06:32,870 --> 00:06:40,130
Then I use that object to code, the START method, and that start method belongs to the Fred class.

81
00:06:41,450 --> 00:06:44,570
I then output a message sign outside of the friend.

82
00:06:45,840 --> 00:06:51,780
Now because we extend in the friend class, we need to override the run method.

83
00:06:52,710 --> 00:06:56,430
So that's why I've created a new method here called Public Void Run.

84
00:06:57,440 --> 00:07:02,360
And what I've done here is outputs a message to console, say, an inside of a friend.

85
00:07:03,840 --> 00:07:11,760
So what we need to do or what happens is that we are overriding a method that belongs to different class.

86
00:07:12,910 --> 00:07:17,620
And this is what actually will execute use in friends to console.

87
00:07:19,360 --> 00:07:20,800
So if I save this class.

88
00:07:22,370 --> 00:07:23,240
And try running it.

89
00:07:26,330 --> 00:07:26,960
You'll see them.

90
00:07:26,960 --> 00:07:28,670
Both messages have appeared.

91
00:07:29,600 --> 00:07:36,200
But it's actually the public void run which is used in the FRED functionality.

92
00:07:38,490 --> 00:07:39,880
So this could be quite tricky.

93
00:07:39,900 --> 00:07:42,870
So hopefully the next couple of examples will make it clearer.

94
00:07:44,370 --> 00:07:49,920
So the next example is I'm going to show you how to implement the vulnerable interface.

95
00:07:50,920 --> 00:07:54,910
So I'm going to close this class and I'm going to simply copy and paste it.

96
00:07:55,970 --> 00:07:58,370
And I'm going to call this 121 P.

97
00:07:59,720 --> 00:08:03,070
And it's going to be Fred implements.

98
00:08:04,160 --> 00:08:05,240
I'm like, okay.

99
00:08:07,350 --> 00:08:12,280
And then going to open up that class and I'm going to clear the console by pressing this button here

100
00:08:12,280 --> 00:08:12,880
in Eclipse.

101
00:08:14,280 --> 00:08:20,910
And instead of extends I'm going to change this to implements and instead of Fred.

102
00:08:22,020 --> 00:08:23,910
I'm going to change that to run up all.

103
00:08:27,130 --> 00:08:31,960
Now, the first thing that I need to change here is I'm going to get rid of this line for now.

104
00:08:34,010 --> 00:08:36,559
So I am going to use Fred.

105
00:08:38,890 --> 00:08:43,360
And I'm going to call this friend object equals.

106
00:08:44,690 --> 00:08:46,100
New right.

107
00:08:47,580 --> 00:08:57,150
And inside the brackets, I'm going to pass this object instance of the class so I'm in.

108
00:09:00,260 --> 00:09:03,980
I'm then going to use that object thread object.

109
00:09:05,510 --> 00:09:09,890
And if I do a dot here, I'd have access to the start method.

110
00:09:12,800 --> 00:09:16,130
So that's all I need to write in this particular class.

111
00:09:16,580 --> 00:09:20,600
So this is just an example of using the implements vulnerable interface.

112
00:09:21,500 --> 00:09:24,110
So if I now save this class and try running it.

113
00:09:27,630 --> 00:09:32,760
You'll see a similar result to the last class we demonstrate demonstrated.

114
00:09:34,110 --> 00:09:38,010
So this is how we can use the implement run label interface.

115
00:09:39,660 --> 00:09:41,370
So if I close this class now.

116
00:09:42,530 --> 00:09:47,070
And I'm going to create a third class, so I'm going to copy and paste the one we just created.

117
00:09:47,990 --> 00:09:55,370
And I'm going to call this new one L 21 C And instead of fried implements, I'm going to call this fried

118
00:09:56,240 --> 00:09:56,810
ordering.

119
00:09:57,640 --> 00:09:57,980
So.

120
00:10:00,880 --> 00:10:03,460
So I am actually going to remove all the code.

121
00:10:04,210 --> 00:10:10,780
Apart from the void main method and I'm going to change implements fundable to extends.

122
00:10:14,850 --> 00:10:16,110
Fred like so.

123
00:10:17,870 --> 00:10:22,400
So in the main method, I'm actually going to use a four loop, so I'm going to write four.

124
00:10:24,470 --> 00:10:26,870
INT I equals zero.

125
00:10:27,320 --> 00:10:30,320
Semicolon aia is less than six.

126
00:10:30,740 --> 00:10:32,870
Semicolon I plus.

127
00:10:32,870 --> 00:10:33,320
Plus.

128
00:10:34,640 --> 00:10:36,320
Then open and close embraces.

129
00:10:37,760 --> 00:10:42,020
So inside this loop, I'm going to write New Fried.

130
00:10:44,110 --> 00:10:49,090
And inside brackets among the price of empty double quotes.

131
00:10:51,270 --> 00:10:54,570
Plus, I like so.

132
00:10:56,400 --> 00:11:01,710
And at the end of that line, instead of a semicolon, I'm going to add some new braces.

133
00:11:04,010 --> 00:11:10,640
So inside of this, I'm going to create a new method called public void.

134
00:11:12,280 --> 00:11:16,630
Run and then open and close embraces at the end of that line.

135
00:11:18,130 --> 00:11:21,160
And inside this method, I'm going to use system.

136
00:11:22,670 --> 00:11:25,640
Dot out the print lend.

137
00:11:27,330 --> 00:11:30,660
And inside the brackets, I'm going to use double quotes.

138
00:11:31,940 --> 00:11:32,450
Fred.

139
00:11:34,760 --> 00:11:37,970
In a space outside of the last double quote.

140
00:11:39,480 --> 00:11:40,050
Plus.

141
00:11:41,980 --> 00:11:43,060
Get a name.

142
00:11:46,070 --> 00:11:49,730
Plus double quotes add a spicier.

143
00:11:52,470 --> 00:11:55,980
And ends up running a semicolon at the end.

144
00:11:58,160 --> 00:12:06,110
So then if I go to not the first closing price, what about after the second closing price?

145
00:12:06,680 --> 00:12:08,480
I'm gonna use dot starts.

146
00:12:09,950 --> 00:12:10,640
Like so.

147
00:12:13,430 --> 00:12:21,080
So to explain what I'm doing here in this class, I'm extending the friend superclass and in my method.

148
00:12:21,770 --> 00:12:28,790
At the time this class executes, I'm using the for loop, which will run five times.

149
00:12:30,210 --> 00:12:35,460
And each time the for loop runs, it creates a new fried object.

150
00:12:37,280 --> 00:12:40,220
And then I override the run method.

151
00:12:41,490 --> 00:12:46,260
And the run method will output a line or Fred to get name.

152
00:12:47,390 --> 00:12:58,490
So get name gets the name of the friend instance and it says plus running then outside of the fried

153
00:12:59,120 --> 00:12:59,810
braces.

154
00:13:01,870 --> 00:13:07,600
I call the stop method, which is the method that starts the execution of the friends.

155
00:13:09,960 --> 00:13:15,330
So I'm going to say this now and I'm going to try running it and let's see what happens.

156
00:13:18,910 --> 00:13:23,710
So you can see in this example the phrase executed.

157
00:13:25,040 --> 00:13:26,900
And it's run in order.

158
00:13:27,050 --> 00:13:29,630
Zero one, two, three, four, five.

159
00:13:30,880 --> 00:13:32,320
So let me try running it again.

160
00:13:35,580 --> 00:13:36,930
And again, it's run in order.

161
00:13:37,650 --> 00:13:39,300
But let me keep trying until it doesn't.

162
00:13:49,690 --> 00:13:55,330
And you can see in this example that the order in output was not sequential.

163
00:13:56,750 --> 00:14:05,150
So what that proves to us is that the friends are running in parallel, not sequentially.

164
00:14:06,130 --> 00:14:09,010
Because if we look at our code, we use an A for loop.

165
00:14:09,670 --> 00:14:11,680
So oil is only incrementing by one.

166
00:14:12,660 --> 00:14:14,670
After each pass through the loop.

167
00:14:17,180 --> 00:14:23,360
So where I equals one, for example, you would expect one to output and then you'd expect the loop

168
00:14:23,360 --> 00:14:24,020
to run again.

169
00:14:24,020 --> 00:14:27,710
Where I would equal to nine, you'd expect two to be output in order.

170
00:14:28,970 --> 00:14:34,670
But because we use in friends, the execution happens in parallel.

171
00:14:36,250 --> 00:14:39,460
So these are all executing at similar times.

172
00:14:40,270 --> 00:14:44,320
That's why the ordering is not sequential, as you would expect.

173
00:14:46,560 --> 00:14:54,690
So this is quite a tricky subject to explain, but I hope that from this lecture you've at least gained

174
00:14:54,690 --> 00:14:57,630
a basic understanding of how friends operate.

175
00:14:58,940 --> 00:15:06,080
The key thing to remember is that friends allows us to execute processes in parallel.

176
00:15:07,260 --> 00:15:11,790
This is often used to speed up the execution of a program.

177
00:15:13,790 --> 00:15:18,590
So I'd like to thank you once again for watching, and I shall speak to you in the next lecture.

