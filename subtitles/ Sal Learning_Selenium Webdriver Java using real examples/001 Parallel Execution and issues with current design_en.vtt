WEBVTT
1
00:00:00.570 --> 00:00:02.910
Welcome to the next section of this course.

2
00:00:03.750 --> 00:00:07.320
In this section will be taking a look at parallel execution.

3
00:00:08.420 --> 00:00:08.930
On doing.

4
00:00:08.930 --> 00:00:12.740
So we discover some issues with our current framework design.

5
00:00:13.460 --> 00:00:19.330
And so in this section, we also look at ways to resolve those issues and how to improve our current

6
00:00:19.430 --> 00:00:20.120
framework.

7
00:00:22.150 --> 00:00:24.400
So what is Pabillo execution?

8
00:00:25.390 --> 00:00:29.800
It means to run our tests in parallel, i.e. at the same time.

9
00:00:31.350 --> 00:00:38.670
We would do this to run tests at a faster pace so we no longer have to wait until the first test finishes

10
00:00:38.880 --> 00:00:41.100
before the next one starts executing.

11
00:00:42.890 --> 00:00:48.110
We can achieve parallel execution by amending the test XML file.

12
00:00:49.430 --> 00:00:53.210
We had some very simple configuration to our suite takes.

13
00:00:55.650 --> 00:01:01.200
So on this slide, I provide you an example of an amended test simple file.

14
00:01:02.160 --> 00:01:05.820
So you'll see properties where I've added parallel equals methods.

15
00:01:06.120 --> 00:01:07.770
I'm afraid count equals two.

16
00:01:08.850 --> 00:01:16.290
So parallel can equal methods and this will run all methods listed in the test in small file.

17
00:01:17.220 --> 00:01:25.050
It can equal tests, but to run all tests listed in the test in g a XML file or it can equal classes

18
00:01:25.350 --> 00:01:29.190
which will run all classes listed in the test in g sml file.

19
00:01:30.730 --> 00:01:37.870
I also have a friend count and this property simply indicates the maximum number of methods test or

20
00:01:37.870 --> 00:01:40.420
classes to run at the same time.

21
00:01:43.710 --> 00:01:46.230
So what are the problems with our current design?

22
00:01:47.590 --> 00:01:50.500
As will use in public static web driver.

23
00:01:51.040 --> 00:01:55.630
Our tests become confused when we try to run more than one test at the same time.

24
00:01:57.220 --> 00:02:00.790
This is because the test will fight for the same driver object.

25
00:02:02.400 --> 00:02:08.100
We need to produce a way so to our tests understand to use our own driver object.

26
00:02:09.400 --> 00:02:16.090
We are going to also use this opportunity to improve our overall framework design to really supercharge

27
00:02:16.090 --> 00:02:18.820
in our page object model framework.

28
00:02:20.680 --> 00:02:22.960
So let's see an example of the problem.

29
00:02:24.420 --> 00:02:31.050
So before we add parallel execution, let's just confirm that our test run when we run it from the test

30
00:02:31.050 --> 00:02:32.340
injection file.

31
00:02:38.160 --> 00:02:41.400
So you can see that the first test has started executed.

32
00:02:47.560 --> 00:02:50.740
And when that's finished, the second test starts.

33
00:03:05.080 --> 00:03:08.560
So we know our tests run fine without any issues.

34
00:03:10.560 --> 00:03:13.770
So I'm now going to open up the test, inject small file.

35
00:03:14.910 --> 00:03:17.480
And I need to locate the sweet tag.

36
00:03:19.310 --> 00:03:24.740
So the first property I'm going to add is parallel equals.

37
00:03:26.940 --> 00:03:29.840
And I'm going to write tests in double quotes.

38
00:03:31.740 --> 00:03:33.270
And then glance at the space.

39
00:03:34.260 --> 00:03:35.040
Right, Fred.

40
00:03:35.850 --> 00:03:39.300
Counts equals and in double quotes to.

41
00:03:41.230 --> 00:03:46.780
So parallel equals tests means that I want these tests to run.

42
00:03:48.410 --> 00:03:54.620
And Frank count equals two means that I only want to test two run at the same time.

43
00:03:55.790 --> 00:03:59.300
So if you imagine that I had more than two tests in this file.

44
00:04:00.480 --> 00:04:03.810
Two test will still only run based on this set in.

45
00:04:06.040 --> 00:04:10.450
So if I save my tests, inject small file and try running again.

46
00:04:11.170 --> 00:04:12.280
Let's see what happens.

47
00:04:17.290 --> 00:04:20.079
So you can see two Chrome browsers opened.

48
00:04:20.680 --> 00:04:24.340
One test is running and this second one is blank.

49
00:04:26.100 --> 00:04:29.730
And if I look at clips, you'll see that there's an error here.

50
00:04:30.270 --> 00:04:34.490
And if I scroll up, it's also complaining about the base page.

51
00:04:34.500 --> 00:04:35.970
Take snapshot method.

52
00:04:37.010 --> 00:04:39.170
Same as a no pointer exception.

53
00:04:41.240 --> 00:04:47.960
If we look at the summary here, we can see two tests of run, but both of them have failed and there's

54
00:04:47.960 --> 00:04:50.240
also a configuration failure.

55
00:04:51.920 --> 00:04:57.650
So we know that when we run our tests in parallel, there are issues that we need to fix.

56
00:04:58.770 --> 00:05:06.030
So this section is going to focus on fixing those issues and to improve our overall framework design.

57
00:05:06.780 --> 00:05:07.890
Thank you for watching.

