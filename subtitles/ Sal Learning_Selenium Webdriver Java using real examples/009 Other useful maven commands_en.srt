1
00:00:00,850 --> 00:00:06,310
In this lecture we go over some other useful maven CMO commands.

2
00:00:08,000 --> 00:00:10,400
So we've already seen MVA in test.

3
00:00:10,850 --> 00:00:14,780
But just to recap, it runs all the tests classes.

4
00:00:16,390 --> 00:00:25,360
We then have the option to run a single test class and we can do this by using MVNO hyphen capitalized

5
00:00:25,360 --> 00:00:34,300
D which stands for define and then I use a keyword could test and the equals the class is name.

6
00:00:35,320 --> 00:00:39,550
I then use the test keywords at the end which would then trigger it.

7
00:00:41,940 --> 00:00:45,780
We also have the option to run multiple tank test classes.

8
00:00:46,350 --> 00:00:55,500
So this is exactly the same except for after the class name demo test one I use a comma and in OP avoid

9
00:00:55,620 --> 00:00:57,900
another name of the next class.

10
00:01:01,490 --> 00:01:06,590
We also have the option to run a single test method from a test class.

11
00:01:07,520 --> 00:01:16,880
So to do this, we again use margin hyphen D and use the test key word equals the name of a class.

12
00:01:17,630 --> 00:01:22,220
But this time we use hash and then we provide the method name.

13
00:01:23,150 --> 00:01:25,820
And then again we just use tests that the end of that line.

14
00:01:26,900 --> 00:01:31,400
So this will trigger a particular method inside a class.

15
00:01:34,260 --> 00:01:42,030
We then have the option to run all test methods that match a pattern such as test checkout with an asterix

16
00:01:42,390 --> 00:01:44,310
which acts as a wild card.

17
00:01:45,530 --> 00:01:54,290
So if we look at the command, Marvin Hyphen day test equals demo test two, which is the class name.

18
00:01:55,790 --> 00:01:57,370
Harsh taste.

19
00:01:57,380 --> 00:01:59,360
Check out you've been Asterix.

20
00:02:00,230 --> 00:02:07,070
So what this will do is that it would look at the demo text to class, and then it would try and identify

21
00:02:07,070 --> 00:02:14,270
methods that have test checkouts in the name and any other following characters.

22
00:02:17,890 --> 00:02:25,120
The final example is to run all test methods that match a pattern of test checkout and test play.

23
00:02:25,630 --> 00:02:27,910
From the demo test one class.

24
00:02:29,090 --> 00:02:37,550
So in this example we use a very similar command to MVNO and the test equals demo test one which is

25
00:02:37,550 --> 00:02:41,810
a class name, hash test, check out Asterix.

26
00:02:42,320 --> 00:02:45,500
So it's looking for methods that start with test.

27
00:02:45,560 --> 00:02:46,340
Check out.

28
00:02:47,510 --> 00:02:48,620
With a plus sign.

29
00:02:49,840 --> 00:02:51,580
Test pilot airstrikes.

30
00:02:52,540 --> 00:02:59,950
So this command is going to look for methods to have test checkout in the name or test pilot in the

31
00:02:59,950 --> 00:03:00,280
name.

32
00:03:03,300 --> 00:03:05,270
So let's try a few of these out.

33
00:03:06,650 --> 00:03:12,560
So on my screen I have command prompt open and I'm already in my project directory.

34
00:03:13,650 --> 00:03:18,570
So the first come on, I'd like to show you is to run a particular class.

35
00:03:19,410 --> 00:03:23,130
So I'm going to run the l08 profile class.

36
00:03:24,080 --> 00:03:27,290
And to do this, all I need to use is NBN.

37
00:03:28,470 --> 00:03:32,430
Hyphen and day and then test.

38
00:03:33,490 --> 00:03:40,870
Equals and then provide the class name to our zero eight underscore profile.

39
00:03:41,650 --> 00:03:46,780
And at the end of that line, I'm going to enter spice and use the test keyword.

40
00:03:48,000 --> 00:03:50,970
So if I press enter now, let's see what happens.

41
00:03:53,780 --> 00:04:00,980
And you can see that one test has run and it has run the l0 eight profile class.

42
00:04:03,300 --> 00:04:03,720
The next.

43
00:04:03,720 --> 00:04:04,090
Come on.

44
00:04:04,140 --> 00:04:08,640
I'd like to show you is to run multiple classes at the same time.

45
00:04:09,570 --> 00:04:11,790
So this is the exact same command.

46
00:04:13,090 --> 00:04:15,790
Except for after the first class name.

47
00:04:16,180 --> 00:04:23,620
I'm going to enter a comma and without a space I am going to provide the name of the second class.

48
00:04:24,370 --> 00:04:27,160
So l07 underscore.

49
00:04:27,310 --> 00:04:27,820
Sure.

50
00:04:28,090 --> 00:04:28,570
Fire.

51
00:04:30,800 --> 00:04:32,840
And then with the test key word at the end.

52
00:04:33,560 --> 00:04:37,040
So if I press enter now, let's see what happens.

53
00:04:39,780 --> 00:04:42,420
And you can see that two tests have run.

54
00:04:43,510 --> 00:04:48,640
So it's run both of those classes and each of those classes contain one test each.

55
00:04:50,840 --> 00:04:58,310
So the next example, I am going to show you how we can run a particular method inside a test.

56
00:04:59,320 --> 00:05:04,780
So before I do this, I'm going to open up the l0 eight profile class.

57
00:05:06,430 --> 00:05:14,580
And in this existing method, I'm going to remove this line and I'm going to enter system dot out but

58
00:05:14,590 --> 00:05:15,730
print out end.

59
00:05:17,710 --> 00:05:25,270
And I'm going to output a message saying this is from the test entry method.

60
00:05:30,120 --> 00:05:36,150
I'm also going to copy this and paste it below so that I have a second test.

61
00:05:36,150 --> 00:05:36,990
The method here.

62
00:05:38,050 --> 00:05:41,410
And I'm going to call this second method example.

63
00:05:42,440 --> 00:05:49,100
And I'm just going to update the message to replace test and G with example like so.

64
00:05:50,870 --> 00:05:53,060
So I'm now going to save this class.

65
00:05:54,170 --> 00:05:56,900
And enclose it and go back to command prompt.

66
00:05:59,010 --> 00:06:05,790
So the command that I'm going to use here is M.P. N, F and Capital D.

67
00:06:07,030 --> 00:06:13,480
Test equals l08 underscore profile.

68
00:06:14,470 --> 00:06:21,670
But to call a particular method, I'm going to use hash and I'm going to provide the name of the first

69
00:06:21,670 --> 00:06:24,840
method, which was test energy.

70
00:06:27,070 --> 00:06:28,600
And then going to use space.

71
00:06:29,050 --> 00:06:30,690
And then use the test keyword.

72
00:06:31,810 --> 00:06:34,870
So if I press enter here, let's see what happens.

73
00:06:37,590 --> 00:06:44,310
And you can see one test has run and you can see it as a message has been outputs here and it says this

74
00:06:44,310 --> 00:06:46,770
is from the test energy method.

75
00:06:47,580 --> 00:06:48,900
So that's how we know.

76
00:06:50,430 --> 00:06:52,890
That this method here was targeted.

77
00:06:55,240 --> 00:07:01,750
So now if I wanted to do the same, but for the other method, all I need to do is the exact same command

78
00:07:02,320 --> 00:07:07,390
but replace test and g with the other method name which was called example.

79
00:07:08,850 --> 00:07:09,920
If I press enter.

80
00:07:12,000 --> 00:07:13,050
Let's see what's output.

81
00:07:14,910 --> 00:07:21,150
And again, one test is run and he's got a message of this is from the example method.

82
00:07:22,060 --> 00:07:26,710
So that's how we can target a particular method in a class.

83
00:07:28,830 --> 00:07:34,230
So the final come on, I'd like to show you is the use of the wild card character.

84
00:07:35,730 --> 00:07:43,590
So I am going to use the exact same command, but instead of provided the whole example method name,

85
00:07:44,310 --> 00:07:47,640
I'm just going to provide aid with an asterix.

86
00:07:49,300 --> 00:07:50,680
So what is this going to do?

87
00:07:50,980 --> 00:07:57,940
It's going to look at the zero eight profile class and it's going to look for method that begins with

88
00:07:57,940 --> 00:08:02,020
age and has any other characters following it.

89
00:08:03,610 --> 00:08:08,320
So as this method here starts with a, I would expect this one to run.

90
00:08:09,500 --> 00:08:14,000
As this method starts with t, I would expect it to be excluded.

91
00:08:15,220 --> 00:08:18,880
So let me try running this to see what happens.

92
00:08:24,100 --> 00:08:31,810
And you can see that the expected method has run successfully and this is proven from the output message.

93
00:08:33,700 --> 00:08:35,799
So I hope you found this useful.

94
00:08:36,250 --> 00:08:39,640
And this is the end of the Maven section.

95
00:08:40,240 --> 00:08:45,550
So we've covered quite a bit, but our hope from the end of these lectures, you've now gained a good

96
00:08:45,550 --> 00:08:50,980
understanding of how we use Maven and more importantly, why we use Maven.

97
00:08:52,270 --> 00:08:54,550
So I'll speak to you in the next section.

98
00:08:54,790 --> 00:08:55,600
Thanks for watching.

