1
00:00:01,130 --> 00:00:05,240
So now what I need to do is if I go back to the website.

2
00:00:07,190 --> 00:00:08,480
If I type in London.

3
00:00:09,670 --> 00:00:11,020
And the results now appear.

4
00:00:11,710 --> 00:00:13,810
So we're still in all these results in the list.

5
00:00:14,680 --> 00:00:22,360
So what I want to be able to do is look at each of the results to find one that contains Luton in the

6
00:00:22,360 --> 00:00:22,780
name.

7
00:00:23,850 --> 00:00:26,640
And when one is found I want to select it.

8
00:00:26,880 --> 00:00:29,130
So it appears in the from textbox.

9
00:00:30,890 --> 00:00:34,550
So if I go back to the code, we've already done the hard work.

10
00:00:35,180 --> 00:00:39,020
We've created a list called Origins, which stores all the results.

11
00:00:39,830 --> 00:00:45,560
We then use A for each loop to iterate through each value in that collection.

12
00:00:46,160 --> 00:00:50,480
And at the moment, we're printing out the result or the text of each iteration.

13
00:00:52,410 --> 00:00:55,680
So what I'm going to do here instead is remove this line.

14
00:00:56,890 --> 00:00:58,720
And I'm going to use an if statement.

15
00:00:59,670 --> 00:01:01,230
So I'm going to write if.

16
00:01:03,940 --> 00:01:04,510
Origin.

17
00:01:06,550 --> 00:01:08,800
Dot get text.

18
00:01:10,790 --> 00:01:12,380
DOT contains.

19
00:01:14,410 --> 00:01:19,060
The value of Luton in opening close embraces.

20
00:01:20,780 --> 00:01:21,560
Origin.

21
00:01:21,560 --> 00:01:23,000
Dot click.

22
00:01:24,690 --> 00:01:29,050
So what this is doing is that the for each loop is going for each single.

23
00:01:29,070 --> 00:01:31,110
Each one of these values in this list.

24
00:01:31,890 --> 00:01:38,760
And each time is going to check to see if the origin so the value of that particular iteration.

25
00:01:39,810 --> 00:01:42,390
If the text contains the value of gluten.

26
00:01:43,500 --> 00:01:45,510
And if it does, it will kick it.

27
00:01:47,230 --> 00:01:49,030
So if I explain it from the website.

28
00:01:50,130 --> 00:01:56,940
So if I search London, that loop is going to search each one of these results.

29
00:01:57,120 --> 00:02:00,150
And each time it's going to check to see if luton's in name.

30
00:02:00,720 --> 00:02:01,960
So it's not in this one.

31
00:02:01,980 --> 00:02:04,110
So I expect it to move to the next one.

32
00:02:04,890 --> 00:02:06,650
So luton's not within this one.

33
00:02:06,660 --> 00:02:07,800
You'll move to the next.

34
00:02:08,430 --> 00:02:10,139
This one here contains Luton.

35
00:02:10,620 --> 00:02:12,120
So I expect it to click it.

36
00:02:14,940 --> 00:02:16,800
So let me try saving this.

37
00:02:17,990 --> 00:02:19,220
And let's see if it works.

38
00:02:30,410 --> 00:02:33,980
And you can see that Luton was selected.

39
00:02:35,660 --> 00:02:37,940
So if I try change in our code.

40
00:02:40,600 --> 00:02:43,270
To look for Southend instead.

41
00:02:44,670 --> 00:02:52,650
So if I go back here and change this to South Southend and now save my code and try running it once

42
00:02:52,650 --> 00:02:53,010
more.

43
00:02:54,110 --> 00:02:55,070
Let's see if it works.

44
00:03:02,990 --> 00:03:06,740
And you can see that London Southend was selected this time.

45
00:03:09,330 --> 00:03:12,540
So this code is very powerful.

46
00:03:13,710 --> 00:03:20,070
It's dynamic and it's been designed in a way that it can handle any value that you provide to check

47
00:03:20,070 --> 00:03:22,830
against all those values or results in that list.

48
00:03:24,160 --> 00:03:32,530
So but code in this way, it allows you flexibility and it means that your code is more easier to maintain

49
00:03:33,130 --> 00:03:39,130
and it can actually provide better functionality in terms of what you're trying to test.

50
00:03:40,910 --> 00:03:44,720
So I am going to change it back to Luton for now and I'm going to save it.

51
00:03:47,590 --> 00:03:55,060
So one thing I did notice when I wrote this code before I recorded the lectures is that sometimes you'll

52
00:03:55,060 --> 00:03:58,510
find that the web page does not load the results in time.

53
00:03:59,500 --> 00:04:04,870
So if I go back to the Web page, so when London is typed here.

54
00:04:06,150 --> 00:04:09,900
Depending on the website performance or your network connection.

55
00:04:10,940 --> 00:04:13,760
There can be a slight delay before those results appear.

56
00:04:15,440 --> 00:04:19,040
And to avoid that messing up our test.

57
00:04:19,640 --> 00:04:22,930
What we can use is a weight in selenium.

58
00:04:24,150 --> 00:04:28,860
So this is a perfect example of when we can use an explicit white.

59
00:04:30,640 --> 00:04:34,720
So to do that, I'm going to make a slight amendment to our code.

60
00:04:36,570 --> 00:04:41,430
So at the moment I have list origins equals drive a dot find elements by it.

61
00:04:42,510 --> 00:04:50,130
So I am going to change this and I'm going to make a slight adjustment by using a explicit weight.

62
00:04:50,880 --> 00:04:52,680
So I'm going to write equals.

63
00:04:53,810 --> 00:04:57,710
New Web driver, white.

64
00:04:59,710 --> 00:05:01,330
And then I'm going to write.

65
00:05:02,400 --> 00:05:03,980
Or open and close in brackets.

66
00:05:03,990 --> 00:05:09,750
I'm going to pass the driver instance, then a comma, then the amount of time that I want the whites

67
00:05:09,750 --> 00:05:11,400
to wait up to in seconds.

68
00:05:13,170 --> 00:05:16,020
Then I'm going to do a stop, a full stop at the end of it.

69
00:05:17,220 --> 00:05:21,480
So you can see where Driver Waits has an error, and that's because I need to import it.

70
00:05:22,230 --> 00:05:25,530
So if a hover over, you've got an option to import it from selenium.

71
00:05:26,810 --> 00:05:29,090
And on doing so that ever goes away.

72
00:05:30,480 --> 00:05:36,660
So if I remove that dot again and retype it, you'll see I now have access to a number of methods and

73
00:05:36,660 --> 00:05:39,510
I'm going to use the until method like so.

74
00:05:41,100 --> 00:05:46,440
So inside the brackets, I'm going to use expected conditions.

75
00:05:50,320 --> 00:05:55,480
Dot visibility and make sure to select the correct one here.

76
00:05:56,540 --> 00:06:01,190
So I need visibility of all elements located by.

77
00:06:02,540 --> 00:06:04,160
So if I'm present on that one.

78
00:06:05,470 --> 00:06:06,820
You'll see it's now displayed.

79
00:06:07,690 --> 00:06:12,480
And so what I need to pass within these brackets is the bonus.

80
00:06:12,490 --> 00:06:12,760
Yes.

81
00:06:12,760 --> 00:06:14,320
A selector and the value.

82
00:06:15,610 --> 00:06:21,370
So what I'm going to do here is if I put a carriage return here, you should be able to see it a little

83
00:06:21,370 --> 00:06:22,330
bit easier.

84
00:06:23,360 --> 00:06:25,280
And I'm simply going to copy.

85
00:06:26,580 --> 00:06:28,020
All this so up to.

86
00:06:28,450 --> 00:06:33,150
Starting from boy and up to the first close in bracket.

87
00:06:33,630 --> 00:06:34,710
I'm going to cut it.

88
00:06:35,800 --> 00:06:37,870
And replace the null value like so.

89
00:06:38,590 --> 00:06:41,530
And at the end of this line, add a semicolon.

90
00:06:42,630 --> 00:06:45,510
And you can see the errors go away and it's been accepted.

91
00:06:47,040 --> 00:06:49,320
So now I'm going to delete this line here.

92
00:06:50,940 --> 00:06:51,250
Okay.

93
00:06:51,300 --> 00:06:52,440
Some of the white space.

94
00:06:54,470 --> 00:06:57,380
So now our code is ready to go.

95
00:06:58,280 --> 00:07:00,530
So I am going to save this.

96
00:07:01,880 --> 00:07:03,200
And try running it again.

97
00:07:18,600 --> 00:07:19,950
And we can see no errors.

98
00:07:21,550 --> 00:07:28,120
So this here, this white will handle if the results are ever delayed.

99
00:07:29,250 --> 00:07:31,620
So the test won't complain about an error.

100
00:07:32,250 --> 00:07:36,960
It will wait up to 20 seconds for those results to display.

101
00:07:37,680 --> 00:07:44,910
And what that means is your tests will not be affected by any delay of the page loading or any network

102
00:07:44,910 --> 00:07:46,320
issues you may experience.

103
00:07:48,150 --> 00:07:51,540
So we have covered quite a bit in these lectures.

104
00:07:52,170 --> 00:07:59,910
I hope it's given you some good practice and experience of understanding how we can formulate test when

105
00:07:59,910 --> 00:08:02,400
we're dealing with quite complicated conditions.

106
00:08:03,600 --> 00:08:07,200
So I hope you enjoyed this, and I'll speak to you in the next lecture.

