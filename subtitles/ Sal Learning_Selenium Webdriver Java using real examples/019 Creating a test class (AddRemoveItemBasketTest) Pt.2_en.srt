1
00:00:00,450 --> 00:00:05,700
So in this lecture, we're going to add an assertion to check the total amount to make sure it's the

2
00:00:05,700 --> 00:00:07,050
value that we're expected.

3
00:00:08,039 --> 00:00:10,170
So to use an assertion is very simple.

4
00:00:11,100 --> 00:00:17,430
We just use the asset class and I'm going to use a method called assert equals.

5
00:00:18,550 --> 00:00:25,420
But a very important point is to make sure that you select the method that belongs to testing and not

6
00:00:25,420 --> 00:00:27,280
the one that belongs to G-Unit.

7
00:00:28,240 --> 00:00:30,490
So if I double click this test in G one.

8
00:00:31,610 --> 00:00:39,320
And if I scroll up and look at my imports, you'll see that the test energy asset class has been imported.

9
00:00:40,190 --> 00:00:42,920
So that's how you know you selected the correct method.

10
00:00:44,640 --> 00:00:47,910
So this method assert equals expects two values.

11
00:00:48,600 --> 00:00:52,770
This is the actual value and this will be the expected value.

12
00:00:54,000 --> 00:00:59,070
So the actual value is going to be the value of the tanks as retrieved from the locator.

13
00:01:00,150 --> 00:01:06,450
So I'm going to simply just use the cart object where we get in the total amount and we get in the text

14
00:01:06,450 --> 00:01:07,170
of that element.

15
00:01:08,590 --> 00:01:11,200
So I'm going to copy that and paste that here.

16
00:01:12,680 --> 00:01:17,690
In the second argument, we need to pass the amount that we're expected.

17
00:01:18,560 --> 00:01:22,250
So we know on the website we're expecting 4524.

18
00:01:23,000 --> 00:01:29,030
So in double quotes, I'm going to write dollar 45, got 24.

19
00:01:31,030 --> 00:01:33,250
So I am now going to save this class.

20
00:01:34,320 --> 00:01:36,870
And I'm going to try running it to see what happens.

21
00:01:49,620 --> 00:01:51,720
And you can see that my test has passed.

22
00:01:52,700 --> 00:02:00,110
And if I scroll up the amount that's been outputs, it's a console is 4524, which is expected amount.

23
00:02:01,700 --> 00:02:08,030
So now if I change $0.24 to $0.23 and try to save it and run in this class again.

24
00:02:09,889 --> 00:02:10,910
Let's see what happens.

25
00:02:23,090 --> 00:02:23,840
A notice.

26
00:02:23,840 --> 00:02:26,510
This time, a failure has been output.

27
00:02:27,710 --> 00:02:36,110
And the reason for that is and if we scroll up to see what the error says, it says expected 4523,

28
00:02:36,680 --> 00:02:39,110
but found 4524.

29
00:02:40,560 --> 00:02:47,520
So the actual value which he got from the website, the web page is 4524.

30
00:02:48,630 --> 00:02:54,930
But for the expected value, I wrote 4523 and because these two didn't match.

31
00:02:55,440 --> 00:02:58,020
That's why the assertion submitted a failure.

32
00:02:59,800 --> 00:03:02,290
So I'm going to change this back to 24.

33
00:03:04,660 --> 00:03:06,820
So this is the end of this test.

34
00:03:07,570 --> 00:03:14,800
And so what we've done in this test is that we've mimicked a user added items to a cart, and then on

35
00:03:14,800 --> 00:03:17,740
the cart page delete in one of those items.

36
00:03:18,610 --> 00:03:24,670
And we've also check to make sure the amount is the amount that we expecting after that deletion has

37
00:03:24,670 --> 00:03:25,630
taken place.

38
00:03:27,200 --> 00:03:32,450
So if you wanted to practice and write your own tests, I highly recommend it as it would be really

39
00:03:32,450 --> 00:03:33,530
good practice for you.

40
00:03:34,370 --> 00:03:40,040
But in the next lecture we look at the test, injects a small file to see how we can execute both our

41
00:03:40,040 --> 00:03:41,780
tests at the same time.

42
00:03:42,200 --> 00:03:43,010
Thanks for watching.

