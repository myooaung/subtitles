1
00:00:00,800 --> 00:00:04,570
This lecture is an introduction to object orientated programming.

2
00:00:06,000 --> 00:00:07,650
So what is Opie?

3
00:00:08,660 --> 00:00:14,060
Object orientated programming is a method of computer programming that uses objects.

4
00:00:15,290 --> 00:00:21,470
An object is a piece of code that lets you create many similar pieces of code without actually rewriting

5
00:00:21,470 --> 00:00:22,580
the code each time.

6
00:00:24,240 --> 00:00:29,700
This is achieved by first writing in a class which is essentially a blueprint of the object.

7
00:00:30,420 --> 00:00:35,910
Then you can easily create an instance of the object, which is basically just one particular version

8
00:00:35,910 --> 00:00:38,780
of the object built from the class blueprint.

9
00:00:41,360 --> 00:00:42,950
So say we had a dog class.

10
00:00:43,580 --> 00:00:45,080
Think of this as a blueprint.

11
00:00:46,270 --> 00:00:50,080
The class contains two fields dog name and dog breed.

12
00:00:51,480 --> 00:00:56,970
We now create an object for the dog class and provide values for the dog name and dog breed fields.

13
00:00:57,960 --> 00:01:02,940
We set the dog name to equal buster and dog breeds equal Yorkshire Terrier.

14
00:01:04,330 --> 00:01:07,240
We then create another object using the adult class.

15
00:01:07,960 --> 00:01:11,890
This time we set a dog named to Charlie, and the dog breeds a poodle.

16
00:01:13,430 --> 00:01:13,880
We met.

17
00:01:13,880 --> 00:01:19,100
We now have two objects with different properties based on the same dog class blueprint.

18
00:01:22,060 --> 00:01:24,280
So if you look at the diagram below.

19
00:01:25,250 --> 00:01:26,030
At the top.

20
00:01:26,030 --> 00:01:32,390
I have a dog class and the two boxes below are objects of that class.

21
00:01:32,990 --> 00:01:37,220
So an object is an instance of a class, an object one.

22
00:01:37,670 --> 00:01:41,120
We had Buster and Yorkshire Terrier in object to.

23
00:01:41,390 --> 00:01:42,470
We have Charlie.

24
00:01:42,470 --> 00:01:43,310
That's a poodle.

25
00:01:44,030 --> 00:01:46,850
And these are both based on the dog class.

26
00:01:49,940 --> 00:01:58,400
The four principles of object orientated programming are encapsulation, abstraction, inheritance and

27
00:01:58,400 --> 00:01:59,270
polymorphism.

28
00:02:00,630 --> 00:02:03,510
So first, let's have a look at encapsulation.

29
00:02:04,230 --> 00:02:07,080
So what does the word encapsulation even mean?

30
00:02:08,060 --> 00:02:12,830
It's the action of enclosing something in or as if in a capsule.

31
00:02:14,480 --> 00:02:20,150
Pretend we have a program that has a few logically different objects which communicate with each other.

32
00:02:21,050 --> 00:02:23,600
This is based on the rules defined in the program.

33
00:02:25,190 --> 00:02:30,890
Encapsulation is achieved when each object keeps its state private inside a class.

34
00:02:32,360 --> 00:02:35,840
Other objects don't have direct access to the state.

35
00:02:37,440 --> 00:02:40,940
Instead, they can only call a list of public functions.

36
00:02:40,950 --> 00:02:42,840
For example, public methods.

37
00:02:46,320 --> 00:02:52,680
So if we look at the code on the right hand side here, I have two objects object one and object two

38
00:02:53,160 --> 00:02:56,570
and they are both an instance of the class two.

39
00:02:56,580 --> 00:03:00,330
Object one has two fields, dog name and dog breed.

40
00:03:00,810 --> 00:03:01,980
And here are the values.

41
00:03:02,640 --> 00:03:06,030
An object two has the same fields and different values.

42
00:03:06,870 --> 00:03:09,960
Each one of these objects has methods.

43
00:03:11,220 --> 00:03:15,150
So I want you to imagine these fields as private fields.

44
00:03:15,570 --> 00:03:18,240
But the methods are set as public methods.

45
00:03:19,840 --> 00:03:24,790
So object one cannot directly change the value of object to lose fields.

46
00:03:25,240 --> 00:03:30,790
So object one can't change the dog name or dog breed directly in object to.

47
00:03:32,360 --> 00:03:36,740
This is because we almost always set fields in a class as private.

48
00:03:38,770 --> 00:03:44,980
Instead, we create getter and setter methods that can retrieve or manipulate the values of the object

49
00:03:44,980 --> 00:03:45,580
fields.

50
00:03:47,220 --> 00:03:53,760
So object one might call the method set dog name and provide a parameter to change the name.

51
00:03:54,390 --> 00:03:57,090
This is a scheme in how we designed that code to work.

52
00:03:59,760 --> 00:04:04,770
So objet one could have access to the public methods of object two.

53
00:04:05,610 --> 00:04:12,390
And so if object one was to change the name of object to an object one might set.

54
00:04:13,510 --> 00:04:16,570
Corner method, set dog name and provide a value.

55
00:04:17,950 --> 00:04:24,220
And because this method is public, it name is coded to update the field value of object to.

56
00:04:27,890 --> 00:04:29,480
So next we have abstraction.

57
00:04:30,450 --> 00:04:34,530
Abstraction hides the internal implementation details of a program.

58
00:04:35,800 --> 00:04:43,030
Abstraction shows only the essential attributes such as public methods that can be called and hides

59
00:04:43,030 --> 00:04:47,860
and necessary information, such as the actual code of how the method works.

60
00:04:49,560 --> 00:04:55,980
It helps reduce programming, complexity and effort and is one of the most important concepts of OPI.

61
00:04:57,800 --> 00:04:59,180
Think of your mobile phone.

62
00:05:00,140 --> 00:05:04,280
It's a very complex device in terms of the technical details of how it works.

63
00:05:04,700 --> 00:05:07,880
But from a user's perspective, it's fairly easy to use.

64
00:05:08,600 --> 00:05:12,860
For example, if you wanted to increase the volume, you just click a button.

65
00:05:13,490 --> 00:05:19,640
But internally, software interprets that input a main increase voltage to a speaker.

66
00:05:23,270 --> 00:05:24,620
Next is inheritance.

67
00:05:25,190 --> 00:05:29,270
So some objects can be very similar, but often they're not entirely the same.

68
00:05:30,750 --> 00:05:37,320
It would make sense to use common lot logic, so it only has to be written once but can be used by other

69
00:05:37,320 --> 00:05:40,140
classes so that it can inherit the logic.

70
00:05:41,930 --> 00:05:44,270
This is where inheritance plays a key role.

71
00:05:45,720 --> 00:05:52,080
Attributes and methods that are common between two objects can be written in a superclass where a superclass

72
00:05:52,080 --> 00:05:55,950
inherits these properties but a subclass inherit these properties.

73
00:05:58,050 --> 00:05:58,740
This way.

74
00:05:58,740 --> 00:06:03,690
We only need to write a common code once in the parent class as it can be reused.

75
00:06:05,880 --> 00:06:10,650
The word extends is used where subclass extends superclass.

76
00:06:12,900 --> 00:06:18,330
So if we take a look at this code at the top, I've created a class called Vehicle.

77
00:06:19,240 --> 00:06:21,250
So vehicle is a super class.

78
00:06:22,240 --> 00:06:29,890
It has a string field called Mike, which has been assigned the value of BMW and it has a public method

79
00:06:29,890 --> 00:06:33,830
called Ref which simply prints out a string value of one.

80
00:06:35,600 --> 00:06:38,240
Of then created a second class called Car.

81
00:06:39,370 --> 00:06:46,180
And core is a subclass and extends the vehicle superclass.

82
00:06:47,890 --> 00:06:54,310
So the car cross has a Philco model which has been assigned the value of free series.

83
00:06:55,710 --> 00:07:01,800
Carr also has a method called Get model which simply returns the value of the model filled.

84
00:07:03,440 --> 00:07:07,430
Now, in this first class, I create a core object.

85
00:07:08,690 --> 00:07:14,080
So object is the name of the object and it's based on the cost car subclass.

86
00:07:15,760 --> 00:07:17,530
Now use in that car object.

87
00:07:18,370 --> 00:07:21,220
I tried to call the rev method.

88
00:07:22,540 --> 00:07:26,350
Which belongs to the superclass vehicle here.

89
00:07:28,160 --> 00:07:32,120
I then use system to print mine and use in that car object.

90
00:07:32,540 --> 00:07:37,750
I return the mike by calling the make field from the vehicle superclass.

91
00:07:38,820 --> 00:07:46,200
And using the call object again, I call the get model method which belongs to the car class.

92
00:07:48,030 --> 00:07:51,840
So because the car subclass extends vehicle.

93
00:07:53,060 --> 00:08:01,400
The car class or any objects based on the car class will have access to all public available fields

94
00:08:01,400 --> 00:08:03,050
and methods in the vehicle.

95
00:08:03,050 --> 00:08:03,980
Superclass.

96
00:08:04,960 --> 00:08:09,340
And that's why if I run this test class, it produces the results.

97
00:08:09,340 --> 00:08:09,760
Vroom.

98
00:08:11,160 --> 00:08:14,730
Which is from the rev method in the superclass.

99
00:08:15,780 --> 00:08:24,870
BMW, which is from the make field from the super class and free series, which is from the car method

100
00:08:24,870 --> 00:08:29,430
get model which returns the model filled value which is free series.

101
00:08:31,730 --> 00:08:38,570
Now, that may seem quite complicated, but I assure you during this course, you would learn exactly

102
00:08:38,570 --> 00:08:39,380
what this is.

103
00:08:42,000 --> 00:08:43,679
Next we look at polymorphism.

104
00:08:44,720 --> 00:08:48,650
The polymorphism is derived from a Greek word, which means many shapes.

105
00:08:50,450 --> 00:08:54,800
This is closely related to inheritance, but has a few key differences.

106
00:08:55,800 --> 00:09:02,790
Inheritance is a concept related to code reuse, whereas polymorphism is approach to expressing common

107
00:09:02,790 --> 00:09:06,420
behavior between types of objects that have similar traits.

108
00:09:08,000 --> 00:09:14,750
Subclasses, also known as child classes, can define their own unique behavior and yet share some of

109
00:09:14,750 --> 00:09:19,250
the same functionality of the superclass, also known as a parent class.

110
00:09:21,170 --> 00:09:26,390
Imagine we have an animal superclass and two subclasses dog and cat.

111
00:09:28,030 --> 00:09:31,780
What might be common property properties between a dog and a cat.

112
00:09:32,970 --> 00:09:34,770
They might both make sounds.

113
00:09:36,060 --> 00:09:38,520
But does a dog meow or does a cat woof?

114
00:09:39,210 --> 00:09:40,230
The answer is no.

115
00:09:40,680 --> 00:09:41,760
At least I hope not.

116
00:09:43,350 --> 00:09:48,300
So although both animals can make a sound, we need to account for the differences.

117
00:09:48,300 --> 00:09:50,790
But the two between the two types of animals.

118
00:09:53,450 --> 00:09:59,900
So if we look at this code, I'm going to basically explain it, but we will see an example of this

119
00:09:59,900 --> 00:10:01,040
when we come to code in.

120
00:10:02,120 --> 00:10:08,090
But I want you to take into account is that there is a class called Animal and this is a superclass

121
00:10:08,960 --> 00:10:13,610
and it's got a public method called make sound, which makes a sound by.

122
00:10:15,270 --> 00:10:15,810
Next.

123
00:10:15,810 --> 00:10:20,670
We have a class called Dog which extends the animal superclass.

124
00:10:21,330 --> 00:10:24,600
But the dog class has its own method called make sound.

125
00:10:25,640 --> 00:10:27,530
And it prints out a value of wolf.

126
00:10:30,170 --> 00:10:34,010
So finally, I have another class called Test.

127
00:10:34,790 --> 00:10:40,280
And in test, I am defining a object name called Benji.

128
00:10:41,560 --> 00:10:43,690
So this is based on class animal.

129
00:10:44,290 --> 00:10:48,460
It's called Benji by equals a new dog class.

130
00:10:49,240 --> 00:10:51,580
So although Benji is of type animal.

131
00:10:52,800 --> 00:10:56,310
It actually is quite an object of type dog.

132
00:10:57,970 --> 00:11:03,870
Now if I use the Benji object and call the make sound method, it prints out woof.

133
00:11:04,390 --> 00:11:07,960
And that's from the subclass dog as shown here.

134
00:11:09,410 --> 00:11:12,440
But if I change Benjy to equal new animal.

135
00:11:13,370 --> 00:11:16,490
So the object is now based on the animal superclass.

136
00:11:17,580 --> 00:11:20,010
If I call Benjy, don't make sound.

137
00:11:21,000 --> 00:11:24,300
This time it prints out back from the animal class.

138
00:11:26,210 --> 00:11:26,690
So what?

139
00:11:26,690 --> 00:11:31,040
That showing is that we can change the form of the object.

140
00:11:32,370 --> 00:11:37,320
So here equals a dog object, behave equals an animal object.

141
00:11:38,220 --> 00:11:46,350
And each time we call make sound, it's actually printing out different values based on the form the

142
00:11:46,350 --> 00:11:49,140
object is or what class it's based upon.

143
00:11:53,890 --> 00:11:57,370
So what is the difference between inheritance and polymorphism?

144
00:11:58,700 --> 00:12:06,560
So inheritance refers to using the structure and behaviors of a superclass in a subclass, whereas polymorphism

145
00:12:06,680 --> 00:12:11,030
refers to change in the behavior of a superclass in the subclass.

146
00:12:13,620 --> 00:12:19,980
So we've covered a lot of content in this lecture, and I wouldn't be surprised if many of you are confused

147
00:12:19,980 --> 00:12:22,380
or still unsure about what we've covered here.

148
00:12:23,600 --> 00:12:30,410
But the key thing I want you to take away from this lecture is the four principles of object orientated

149
00:12:30,410 --> 00:12:31,040
programming.

150
00:12:32,280 --> 00:12:37,680
If you're still confused or unsure about what we just covered, that's fine and expected.

151
00:12:38,430 --> 00:12:43,710
But as we progress to the next few lectures, hopefully things will start to make more sense when we

152
00:12:43,710 --> 00:12:45,030
use code examples.

