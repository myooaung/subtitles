1
00:00:00,580 --> 00:00:04,720
In this lecture, we take a look at selenium web driver architecture.

2
00:00:07,150 --> 00:00:14,800
So the following diagram provides an overview of how we can use Selenium Web driver to communicate to

3
00:00:14,800 --> 00:00:19,420
a browser driver for which communicates to an actual web browser.

4
00:00:20,720 --> 00:00:25,730
So if we look to the left hand side, we can see selenium language bindings.

5
00:00:26,480 --> 00:00:31,550
And these are programming languages that we can use to develop our test scripts.

6
00:00:33,070 --> 00:00:39,220
Once those test scripts are developed, we then need a means to communicate those test scripts to a

7
00:00:39,220 --> 00:00:40,090
browser driver.

8
00:00:40,940 --> 00:00:43,450
And this was achieved by using a protocol.

9
00:00:45,050 --> 00:00:49,930
The browser drivers themselves is what controls the actual web browser.

10
00:00:51,180 --> 00:00:59,670
So for example, Google provide chrome driver and chrome driver is an executable file that can be used

11
00:00:59,850 --> 00:01:02,160
to control the Chrome browser.

12
00:01:03,190 --> 00:01:08,260
And this is achieved by using HTP over CTP server.

13
00:01:12,800 --> 00:01:18,830
So when run in a Selenium test, web driver needs to establish communication with the browser.

14
00:01:20,220 --> 00:01:27,480
To do this, the browser and web driver have to use a set of rules that they both must share and respect.

15
00:01:29,320 --> 00:01:31,870
Imagine two people having a conversation.

16
00:01:32,800 --> 00:01:33,880
It's fundamental.

17
00:01:33,890 --> 00:01:36,760
They both know and understand same language.

18
00:01:38,580 --> 00:01:40,290
It's the same in automation.

19
00:01:41,070 --> 00:01:43,320
So automation needs a common language.

20
00:01:43,950 --> 00:01:46,830
In this case, the language is called a protocol.

21
00:01:49,130 --> 00:01:55,730
Each browser has its own driver that knows the protocol and makes the communication between web driver

22
00:01:56,000 --> 00:01:57,590
and the browser possible.

23
00:02:01,320 --> 00:02:06,840
The protocol that Web driver has been running for a long time is called the Jason Wire protocol.

24
00:02:08,250 --> 00:02:13,680
However, starting with selenium for this protocol will no longer be supported.

25
00:02:15,220 --> 00:02:21,400
Although there will be some scenarios where selenium still provides mechanisms for people to use the

26
00:02:21,400 --> 00:02:22,420
former protocol.

27
00:02:24,190 --> 00:02:31,090
This legacy support provides backward compatibility to organizations that can't run their cases using

28
00:02:31,090 --> 00:02:32,050
the new protocol.

29
00:02:35,540 --> 00:02:39,200
The new protocol is called Web Driver W3C.

30
00:02:40,760 --> 00:02:47,360
It has received the endorsement of the World Wide Web Consortium, who are an international community

31
00:02:47,630 --> 00:02:49,880
that works to develop Web standards.

32
00:02:51,440 --> 00:02:56,630
The creation of this protocol started a long time ago and has finally become a standard.

33
00:02:58,120 --> 00:03:01,540
W3C is fractionally different from the original protocol.

34
00:03:02,520 --> 00:03:08,850
The major differences are around how you can create a new session and how you can do element interactions

35
00:03:09,090 --> 00:03:10,770
using the actions API.

36
00:03:14,180 --> 00:03:22,220
Since Selenium version 3.8, we have been hearing about both the Jason Wire protocol and the W3C protocol.

37
00:03:23,620 --> 00:03:30,760
The main change is that in Selenium version four, only support for the W3C protocol will be provided.

38
00:03:32,400 --> 00:03:38,760
However, there should be little to no impact on developers since those modifications are at the wire

39
00:03:38,760 --> 00:03:41,820
protocol level and not at the API level.

40
00:03:43,600 --> 00:03:49,930
The Wave driver API will remain stable and constant and is actually expected to enrich the API going

41
00:03:49,930 --> 00:03:50,440
forward.

42
00:03:52,310 --> 00:03:58,850
Since Chrome Driver version 75, Chrome has been using the W3C protocol by default.

43
00:03:59,510 --> 00:04:04,940
So if you've written any tests in the past, chances are you already use the new protocol.

44
00:04:08,450 --> 00:04:15,680
So the developers of different browsers have agreed to adopt the W3C implementation, which would result

45
00:04:15,680 --> 00:04:20,959
in consistency between different browsers devices and also provide stability.

46
00:04:22,570 --> 00:04:25,870
The protocol has been developed with stability at the core.

47
00:04:27,280 --> 00:04:31,840
It's expected test cases written in selenium will be much more stable.

48
00:04:33,240 --> 00:04:37,530
The command API has been improved, offering a new variety of actions.

49
00:04:38,780 --> 00:04:45,110
As a response to the modernization of browsers and devices means you can do things like multitouch,

50
00:04:45,560 --> 00:04:50,720
press two keys at the same time, zoom and various other human like behaviors.

51
00:04:53,660 --> 00:05:00,650
So to conclude this lecture, the implementation of the W3C protocol should not generate major problems.

52
00:05:02,130 --> 00:05:08,490
The new principal is expected to give great benefits in terms of consistency and stability of the tests

53
00:05:08,490 --> 00:05:09,510
in different browsers.

54
00:05:11,350 --> 00:05:15,790
The Web driver API will be updated, adding modern actions.

55
00:05:17,100 --> 00:05:21,030
So I hope this has given you a good overview of the Selenium architecture.

56
00:05:21,540 --> 00:05:23,280
Let's move on to the next lecture.

