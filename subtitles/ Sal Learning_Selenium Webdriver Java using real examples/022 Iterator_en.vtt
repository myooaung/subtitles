WEBVTT
1
00:00:00.530 --> 00:00:03.830
In this lecture, we take a look at the Java Iterator.

2
00:00:05.410 --> 00:00:07.450
So what is an iterator object?

3
00:00:08.410 --> 00:00:12.370
An iterator is an object that could be used to iterate for a collection.

4
00:00:13.590 --> 00:00:16.290
Iterate means to perform repeatedly.

5
00:00:17.710 --> 00:00:23.440
We can iterate through a collection such as a list, arrays, array, lists and more.

6
00:00:24.510 --> 00:00:28.170
And we must import iterator from the java util package.

7
00:00:29.940 --> 00:00:36.090
The iterator object has access to a number of useful methods, and I explain some of these in the next

8
00:00:36.090 --> 00:00:36.930
few slides.

9
00:00:38.860 --> 00:00:40.720
So let's review the below code.

10
00:00:41.200 --> 00:00:45.670
So this is code similar to the ones that we've used in the previous two lectures.

11
00:00:46.720 --> 00:00:49.870
But I want you to take note of lines 17 and 18.

12
00:00:50.380 --> 00:00:58.090
So on line 18, I'm using the iterator interface and I'm creating an object called it an equal, the

13
00:00:58.090 --> 00:01:01.480
collection name and then it uses dot iterator.

14
00:01:02.630 --> 00:01:11.030
So by using iterator I can then use this its object to access methods such as next, which will go through

15
00:01:11.030 --> 00:01:12.890
the collection to the next value.

16
00:01:14.450 --> 00:01:15.860
So I'd explain this when I give it.

17
00:01:15.860 --> 00:01:17.900
Demonstrate in a moment.

18
00:01:18.650 --> 00:01:23.930
But for now you might be ask, asking why use iterator instead of a loop?

19
00:01:24.860 --> 00:01:29.300
It's a good question, but an iterator has the following advantages.

20
00:01:30.410 --> 00:01:33.290
It has the ability to remove elements from collections.

21
00:01:34.320 --> 00:01:37.500
It has the ability to move forward using the next method.

22
00:01:38.680 --> 00:01:43.660
And it has the ability to check if there are more elements are not by using the has next command.

23
00:01:45.980 --> 00:01:53.030
I'd also argue that its writers are generally safer as there is no risk of access in an index that isn't

24
00:01:53.030 --> 00:01:53.390
now.

25
00:01:55.700 --> 00:01:57.050
So let's see an example.

26
00:01:59.320 --> 00:02:03.610
So in the clips, I'm going to simply copy and paste the class in the last lecture.

27
00:02:04.870 --> 00:02:07.630
Calling this new one l 24 lecture 20.

28
00:02:09.570 --> 00:02:11.100
And given a name of iterator.

29
00:02:13.020 --> 00:02:19.190
Lincoln, open up that class and I'm going to remove the for loop from the last lecture and also animal

30
00:02:19.190 --> 00:02:19.980
will start remove.

31
00:02:21.920 --> 00:02:26.960
So the first thing I'm going to do is is right it's writer with the capital I.

32
00:02:29.920 --> 00:02:33.700
And I am going to define the data type.

33
00:02:33.850 --> 00:02:42.790
So it's going to be using in strings and I'm going to give it a name of it which equals the collection

34
00:02:42.790 --> 00:02:44.650
name, which is animals.

35
00:02:45.550 --> 00:02:51.220
And then if I use the dots here, you'll see I'll be given access to a number of methods and I'm going

36
00:02:51.220 --> 00:02:52.990
to use one called dot iterator.

37
00:02:53.910 --> 00:02:55.800
And place a semicolon at the end.

38
00:02:57.180 --> 00:02:59.280
So you can see it as an error on the iterator.

39
00:02:59.640 --> 00:03:01.920
And the reason for that is we need to import it.

40
00:03:02.760 --> 00:03:05.910
So make sure to import the one from java util.

41
00:03:07.590 --> 00:03:08.880
And that area will go away.

42
00:03:10.500 --> 00:03:13.740
So what I'm going to do here is use a simple system.

43
00:03:14.490 --> 00:03:17.400
Dots out dot prints on.

44
00:03:18.560 --> 00:03:24.140
And I'm going to use the IT object and then use the method next like so.

45
00:03:26.930 --> 00:03:34.280
So why expect this it's object to do is to look at the collection and its collection of list is stored

46
00:03:34.280 --> 00:03:35.390
in these strings.

47
00:03:36.410 --> 00:03:44.420
And then when I use it next, I expect the object to then look at the first string value in the collection.

48
00:03:46.370 --> 00:03:51.320
So if I use this line again, if I copy and paste it below.

49
00:03:52.420 --> 00:03:57.400
Then once this first line has executed, it will be looking at Cat.

50
00:03:58.120 --> 00:04:05.020
But when I execute this line after, it's going to go from this string value to the next string value

51
00:04:05.020 --> 00:04:05.770
in the collection.

52
00:04:07.710 --> 00:04:10.020
So let me say this and try running it.

53
00:04:15.180 --> 00:04:19.050
And you can see the values cat and dog have been printed.

54
00:04:20.130 --> 00:04:22.590
And if I was to add another line of thought next.

55
00:04:25.920 --> 00:04:27.660
I may add another nother line as well.

56
00:04:27.930 --> 00:04:30.030
So I've got four now and save it.

57
00:04:30.570 --> 00:04:31.620
Let's see what happens.

58
00:04:35.560 --> 00:04:41.050
So you can see that it's not it printed every single value in that collection because it's moved to

59
00:04:41.050 --> 00:04:45.490
the next and the next and the next value based on these four lines.

60
00:04:46.490 --> 00:04:48.650
So what happens if I add one more line here?

61
00:04:51.880 --> 00:04:52.860
Let's see what happens.

62
00:04:59.950 --> 00:05:01.210
You can see it as an area.

63
00:05:02.200 --> 00:05:04.660
They say no such elements exception.

64
00:05:05.470 --> 00:05:12.640
And the reason for that is once it's got to this stage and then this line here tries to execute because

65
00:05:12.640 --> 00:05:17.620
there isn't another value in the collection, outputs an error.

66
00:05:19.570 --> 00:05:22.570
So how about if I tried using instead dot next year?

67
00:05:25.410 --> 00:05:27.480
I used the method has next.

68
00:05:29.900 --> 00:05:34.580
So this is a boolean method, so it would return true or false?

69
00:05:35.540 --> 00:05:38.570
Now, what do you think will happen here when I execute this code?

70
00:05:40.840 --> 00:05:41.680
Let's take a look.

71
00:05:42.130 --> 00:05:44.440
So I'm going to say this class and run it once more.

72
00:05:48.230 --> 00:05:51.830
And you can see that the value of force has been outputted.

73
00:05:53.630 --> 00:06:00.020
But if I was to change the position of this line and place it here before the last value.

74
00:06:02.570 --> 00:06:04.670
Let me try running it again and see what happens.

75
00:06:07.210 --> 00:06:08.950
And you can see the value is true.

76
00:06:10.230 --> 00:06:11.490
So the dog has.

77
00:06:11.490 --> 00:06:18.540
Next method is a boolean method which choose to return a true or false value depending if there is a

78
00:06:18.540 --> 00:06:24.930
next value in the collection based on the position of where the object is in the collection.

79
00:06:27.120 --> 00:06:33.390
So I hope this has been a good introduction to the iterator interface in Java and I'll speak to you

80
00:06:33.390 --> 00:06:34.230
in the next lecture.

