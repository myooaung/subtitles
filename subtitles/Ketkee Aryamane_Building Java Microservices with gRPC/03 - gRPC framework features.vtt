WEBVTT
1
00:00:00.007 --> 00:00:02.007
- [Woman] Let's take a look at the features

2
00:00:02.007 --> 00:00:04.007
of the GRPC framework.

3
00:00:04.007 --> 00:00:07.001
Firstly, as we said, it is more efficient

4
00:00:07.001 --> 00:00:09.009
for interprocess or interservice communication.

5
00:00:09.009 --> 00:00:12.008
Why? That has got two main reasons.

6
00:00:12.008 --> 00:00:16.007
The first one, it uses HTTP/2 protocol.

7
00:00:16.007 --> 00:00:18.007
Now this is a binary protocol.

8
00:00:18.007 --> 00:00:22.003
So as opposed to HTTP/1, which is tech spaced,

9
00:00:22.003 --> 00:00:25.001
the data that is transmitted in HTTP/2,

10
00:00:25.001 --> 00:00:27.003
is always in a binary format.

11
00:00:27.003 --> 00:00:30.002
Which means the conversion and reconversion

12
00:00:30.002 --> 00:00:32.006
from binary to text and text to binary

13
00:00:32.006 --> 00:00:35.009
that we spoke of earlier is no longer needed.

14
00:00:35.009 --> 00:00:39.002
Secondly, it implements protocol buffers.

15
00:00:39.002 --> 00:00:41.009
Protocol buffers or proto buffs,

16
00:00:41.009 --> 00:00:43.008
as they're commonly known as,

17
00:00:43.008 --> 00:00:48.001
is the interface definition language in GRPC.

18
00:00:48.001 --> 00:00:52.001
Proto buffs make it even faster to transmit messages

19
00:00:52.001 --> 00:00:55.005
between GRPC clients and servers.

20
00:00:55.005 --> 00:00:59.009
Next is GRPC has strictly defined interfaces.

21
00:00:59.009 --> 00:01:02.008
It promotes contract first approach,

22
00:01:02.008 --> 00:01:06.002
which means that you define the service contract first,

23
00:01:06.002 --> 00:01:09.003
before you work on any implementation details

24
00:01:09.003 --> 00:01:10.007
of the service.

25
00:01:10.007 --> 00:01:13.006
This makes it a consistent, robust

26
00:01:13.006 --> 00:01:16.003
and reliable implementation.

27
00:01:16.003 --> 00:01:17.009
All the types for the messages

28
00:01:17.009 --> 00:01:21.008
defined in the service contract are strongly typed,

29
00:01:21.008 --> 00:01:25.005
which means there will never be incompatibility

30
00:01:25.005 --> 00:01:30.000
or interoperability issues for parsing data on client

31
00:01:30.000 --> 00:01:33.009
or server site in distributed applications.

32
00:01:33.009 --> 00:01:37.002
GRPC helps you build polyglot services,

33
00:01:37.002 --> 00:01:39.005
which means if you define the service contract

34
00:01:39.005 --> 00:01:42.003
in proto buffers in the IDL,

35
00:01:42.003 --> 00:01:45.001
after that, you can pick a language of your choice

36
00:01:45.001 --> 00:01:47.007
to generate the client and the server stubs,

37
00:01:47.007 --> 00:01:51.000
which are required for GRPC communication.

38
00:01:51.000 --> 00:01:54.003
GRPC supports a wide variety of programming languages

39
00:01:54.003 --> 00:01:55.004
that we have,

40
00:01:55.004 --> 00:01:57.009
and you can pick up one from that list.

41
00:01:57.009 --> 00:02:00.009
GRPC supports bidirectional streaming.

42
00:02:00.009 --> 00:02:03.006
Means the client and the server both

43
00:02:03.006 --> 00:02:07.003
can send and receive a stream of messages.

44
00:02:07.003 --> 00:02:10.001
Additionally, the building capability

45
00:02:10.001 --> 00:02:12.000
for cross-cutting concerns,

46
00:02:12.000 --> 00:02:14.006
that any microservices requires today,

47
00:02:14.006 --> 00:02:17.003
like authentication, error handling

48
00:02:17.003 --> 00:02:20.003
comes bundled with the GRPC framework.

49
00:02:20.003 --> 00:02:24.002
It integrates very well with cloud-native platforms.

50
00:02:24.002 --> 00:02:27.008
So metrics and monitoring that we employ for cloud platforms

51
00:02:27.008 --> 00:02:30.009
supported by most of the tools like Prometheus,

52
00:02:30.009 --> 00:02:35.001
gladly access GRPC as their communication protocol.

53
00:02:35.001 --> 00:02:38.002
Owing to these advantages, it is widely accepted

54
00:02:38.002 --> 00:02:40.008
and adopted by a number of large enterprises

55
00:02:40.008 --> 00:02:44.009
like Cisco, Docker, Netflix, et cetera.

56
00:02:44.009 --> 00:02:48.001
Let's also take a look at the disadvantages of GRPC.

57
00:02:48.001 --> 00:02:50.008
As of today, there is a limited capability

58
00:02:50.008 --> 00:02:54.009
inside the browser to call a GRPC service.

59
00:02:54.009 --> 00:02:57.000
It is specifically designed to make

60
00:02:57.000 --> 00:03:01.008
back-end services interact with each other more efficiently.

61
00:03:01.008 --> 00:03:04.004
Secondly, the request and response data,

62
00:03:04.004 --> 00:03:09.005
since it's binary is not going to be human readable anymore

63
00:03:09.005 --> 00:03:11.006
but this is by design.

64
00:03:11.006 --> 00:03:15.004
So even if it is viewed as a disadvantage, it is not

65
00:03:15.004 --> 00:03:18.006
because it's much faster and efficient.

66
00:03:18.006 --> 00:03:20.007
Service definition changes

67
00:03:20.007 --> 00:03:23.003
could pose a problem in development.

68
00:03:23.003 --> 00:03:25.009
When you change your IDL definition,

69
00:03:25.009 --> 00:03:28.003
that is the proto buffers file,

70
00:03:28.003 --> 00:03:32.003
that could be a need or there most probably is a need

71
00:03:32.003 --> 00:03:35.005
to regenerate the client and the server stubs.

72
00:03:35.005 --> 00:03:37.009
But then this is something that we are used to

73
00:03:37.009 --> 00:03:41.001
because when we try to work with SOAP specification

74
00:03:41.001 --> 00:03:45.000
we had WSDL, which had a similar setup.

