WEBVTT
1
00:00:00.007 --> 00:00:02.008
- [Instructor] Let us now understand protocol buffers,

2
00:00:02.008 --> 00:00:05.001
which is the second most important foundation block

3
00:00:05.001 --> 00:00:07.000
in the gRPC framework.

4
00:00:07.000 --> 00:00:09.004
Let's say you have an object called employee.

5
00:00:09.004 --> 00:00:14.000
It has three fields: an ID, a name and a designation,

6
00:00:14.000 --> 00:00:16.004
and you want to transport this employee object

7
00:00:16.004 --> 00:00:17.007
over a network.

8
00:00:17.007 --> 00:00:19.002
What are your options?

9
00:00:19.002 --> 00:00:20.003
Serialization?

10
00:00:20.003 --> 00:00:23.003
But that leads to performance and memory issues.

11
00:00:23.003 --> 00:00:27.009
You can also use XML, but XML is strict to deal with.

12
00:00:27.009 --> 00:00:30.002
It is difficult to navigate an XML

13
00:00:30.002 --> 00:00:31.009
and the XML payload transmitted

14
00:00:31.009 --> 00:00:34.003
between client and server is very heavy,

15
00:00:34.003 --> 00:00:37.003
which eventually leads to performance problems again.

16
00:00:37.003 --> 00:00:40.006
Protocol buffers is a project owned by Google,

17
00:00:40.006 --> 00:00:44.006
and this provides you a way to serialize structured data

18
00:00:44.006 --> 00:00:46.007
more efficiently.

19
00:00:46.007 --> 00:00:49.001
They are platform and language neutral,

20
00:00:49.001 --> 00:00:50.008
so you really don't have to bother

21
00:00:50.008 --> 00:00:52.002
on what language are you trying

22
00:00:52.002 --> 00:00:54.005
to implement your service.

23
00:00:54.005 --> 00:00:56.000
Protocol buffers is used

24
00:00:56.000 --> 00:00:58.005
as the interface definition language,

25
00:00:58.005 --> 00:01:02.007
or as we say, IDL, in the gRPC framework

26
00:01:02.007 --> 00:01:05.003
to write your service contract.

27
00:01:05.003 --> 00:01:08.005
If you have worked with SOAP based web services earlier

28
00:01:08.005 --> 00:01:10.009
you would know what an IDL is.

29
00:01:10.009 --> 00:01:13.006
An IDL is an interface definition language

30
00:01:13.006 --> 00:01:17.001
which is used to write a service contract.

31
00:01:17.001 --> 00:01:18.008
In SOAP based web services,

32
00:01:18.008 --> 00:01:23.000
we used WSDL, or WSDL, to define a service.

33
00:01:23.000 --> 00:01:27.002
Protocol buffers are more commonly known as protobufs.

34
00:01:27.002 --> 00:01:30.002
And please note that they are not the only way

35
00:01:30.002 --> 00:01:32.003
to define your service in gRPC.

36
00:01:32.003 --> 00:01:35.004
You can also use other formats like JSON,

37
00:01:35.004 --> 00:01:38.007
but Google promotes this as a standard.

38
00:01:38.007 --> 00:01:41.003
Once the service definition has been completed

39
00:01:41.003 --> 00:01:43.001
using protocol buffers,

40
00:01:43.001 --> 00:01:47.001
then you can generate stubs out of that service definition.

41
00:01:47.001 --> 00:01:48.009
These stubs can be generated

42
00:01:48.009 --> 00:01:51.005
in a language which is available in the list

43
00:01:51.005 --> 00:01:54.008
of supported languages by the protocol buffers project.

44
00:01:54.008 --> 00:01:58.000
Those languages have been listed on the slide.

