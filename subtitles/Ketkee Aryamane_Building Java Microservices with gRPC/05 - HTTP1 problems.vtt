WEBVTT
1
00:00:00.007 --> 00:00:03.001
- [Instructor] In order to understand the working mechanism

2
00:00:03.001 --> 00:00:05.001
of the HTTP/2 protocol.

3
00:00:05.001 --> 00:00:08.002
Let us first do a quick recap of HTTP/1.

4
00:00:08.002 --> 00:00:10.009
We all know that it is a text-based protocol.

5
00:00:10.009 --> 00:00:12.006
The messages that get transmitted

6
00:00:12.006 --> 00:00:16.001
between the client and server are in human readable format.

7
00:00:16.001 --> 00:00:18.001
A sample of the request and response

8
00:00:18.001 --> 00:00:21.004
as shown on the slide, the request contains method,

9
00:00:21.004 --> 00:00:24.008
version of the protocol, URL, headers

10
00:00:24.008 --> 00:00:28.000
and a separate body in case it is a post request.

11
00:00:28.000 --> 00:00:30.007
The response in turn will contain the state discord,

12
00:00:30.007 --> 00:00:33.007
message, version of protocol, headers,

13
00:00:33.007 --> 00:00:35.006
and then the body of data.

14
00:00:35.006 --> 00:00:38.002
HTTP/1 has no pipelining.

15
00:00:38.002 --> 00:00:41.007
What this means is every time you want to make a request

16
00:00:41.007 --> 00:00:43.004
from the client to the server

17
00:00:43.004 --> 00:00:46.005
you spawn a new TCP connection.

18
00:00:46.005 --> 00:00:48.005
If you want to make multiple requests

19
00:00:48.005 --> 00:00:52.001
then you end up spawning multiple TCP connections

20
00:00:52.001 --> 00:00:55.003
and this is highly inefficient.

21
00:00:55.003 --> 00:00:58.001
An incremental version of HTTP

22
00:00:58.001 --> 00:01:00.004
that is 1.1 was introduced,

23
00:01:00.004 --> 00:01:03.002
web pipelining came into existence.

24
00:01:03.002 --> 00:01:06.004
Pipelining leads to persistent connections.

25
00:01:06.004 --> 00:01:07.004
What is it?

26
00:01:07.004 --> 00:01:10.009
It means that one TCP connection alone

27
00:01:10.009 --> 00:01:13.009
can handle multiple requests.

28
00:01:13.009 --> 00:01:17.006
There is no need to wait for another connection.

29
00:01:17.006 --> 00:01:20.003
Requests can be sent one after the other

30
00:01:20.003 --> 00:01:23.004
so that the server starts their processing.

31
00:01:23.004 --> 00:01:26.005
This means that if you want to run a lot of requests

32
00:01:26.005 --> 00:01:30.007
in parallel, you end up spawning multiple TCP connections.

33
00:01:30.007 --> 00:01:33.005
However, note that there is a limit to the number

34
00:01:33.005 --> 00:01:36.006
of TCP connections that the client wants to set up.

35
00:01:36.006 --> 00:01:41.002
But even if that happens, the responses still must come in

36
00:01:41.002 --> 00:01:44.003
the same order as the request sent.

37
00:01:44.003 --> 00:01:46.007
This means that if the response

38
00:01:46.007 --> 00:01:49.005
of a particular request is delayed, for example

39
00:01:49.005 --> 00:01:52.005
the request was held up for a database connection

40
00:01:52.005 --> 00:01:54.002
or some other resource

41
00:01:54.002 --> 00:01:57.000
than all the other responses are blocked

42
00:01:57.000 --> 00:01:59.006
and cannot be sent back to the client.

43
00:01:59.006 --> 00:02:01.001
This results in a big issue

44
00:02:01.001 --> 00:02:05.003
which is called head of line blocking, HOL.

45
00:02:05.003 --> 00:02:09.000
But this is an unintended side effect.

46
00:02:09.000 --> 00:02:10.008
In the next video we'll see,

47
00:02:10.008 --> 00:02:13.002
how are these problems going to be solved

48
00:02:13.002 --> 00:02:16.000
by the HTTP/2 protocol.

