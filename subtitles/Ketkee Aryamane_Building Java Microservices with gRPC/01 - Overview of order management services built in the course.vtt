WEBVTT
1
00:00:00.007 --> 00:00:02.006
- [Instructor] This module will focus on building

2
00:00:02.006 --> 00:00:05.008
the user service in Java using gRPC.

3
00:00:05.008 --> 00:00:09.002
Let's first take a look at the overview of the services

4
00:00:09.002 --> 00:00:12.008
that we will be developing as a part of this course.

5
00:00:12.008 --> 00:00:15.003
We'll first code a user service

6
00:00:15.003 --> 00:00:18.003
that takes in user name as an input

7
00:00:18.003 --> 00:00:22.001
and the service will try to retrieve the user details,

8
00:00:22.001 --> 00:00:28.001
which are User ID, Username, Name, Age, and Gender.

9
00:00:28.001 --> 00:00:30.008
We will then develop an order service,

10
00:00:30.008 --> 00:00:33.000
which takes in a user ID

11
00:00:33.000 --> 00:00:36.000
and gets us the orders for that user ID.

12
00:00:36.000 --> 00:00:39.000
The details of the order could be Order ID,

13
00:00:39.000 --> 00:00:42.002
the User ID to which the order belongs to,

14
00:00:42.002 --> 00:00:45.000
the Amount, the No. of items in the order,

15
00:00:45.000 --> 00:00:46.008
and the Date of the Order.

16
00:00:46.008 --> 00:00:50.007
We will then connect the user and the order service

17
00:00:50.007 --> 00:00:53.001
by means of a gRPC call.

18
00:00:53.001 --> 00:00:54.001
How do we do that?

19
00:00:54.001 --> 00:00:58.000
The User ID that we got from the user details will be fed

20
00:00:58.000 --> 00:01:01.002
to the order service using a gRPC call,

21
00:01:01.002 --> 00:01:02.009
and then subsequently the order service

22
00:01:02.009 --> 00:01:05.005
will get us the orders of the user.

23
00:01:05.005 --> 00:01:08.001
Both of these services, that is the user service

24
00:01:08.001 --> 00:01:10.003
and the order service are going to communicate

25
00:01:10.003 --> 00:01:14.006
with an in-memory H2 database for all the data.

26
00:01:14.006 --> 00:01:17.005
Let's also take a brief look at the database setup.

27
00:01:17.005 --> 00:01:20.000
We're going to use H2 database,

28
00:01:20.000 --> 00:01:21.009
this is an in-memory database

29
00:01:21.009 --> 00:01:25.004
that is quickly set up and ready to use.

30
00:01:25.004 --> 00:01:29.007
However, you can use a database of your own choice.

31
00:01:29.007 --> 00:01:33.001
Also, if you think you're not very fluent with databases,

32
00:01:33.001 --> 00:01:37.002
you can always just hardcore data in your database classes

33
00:01:37.002 --> 00:01:40.002
so that they are available for your services.

34
00:01:40.002 --> 00:01:43.006
This H2 database will use two tables.

35
00:01:43.006 --> 00:01:47.003
One, is the user table that contains the user details.

36
00:01:47.003 --> 00:01:50.005
And there's another orders table that will contain orders

37
00:01:50.005 --> 00:01:52.005
for every user.

38
00:01:52.005 --> 00:01:55.005
There's an Initialize.sql file that contains

39
00:01:55.005 --> 00:01:59.000
the create and insert scripts for both of these tables.

40
00:01:59.000 --> 00:02:01.002
This file will be available to you

41
00:02:01.002 --> 00:02:04.004
in the resources folder of your exercise files.

42
00:02:04.004 --> 00:02:08.000
You can just pick it up and use it in your project.

43
00:02:08.000 --> 00:02:11.003
Let us also see what classes we will write

44
00:02:11.003 --> 00:02:13.002
and how the code will flow

45
00:02:13.002 --> 00:02:15.003
to get the user service up and running

46
00:02:15.003 --> 00:02:17.004
at the end of this module.

47
00:02:17.004 --> 00:02:20.003
The first step will be to write the .proto file

48
00:02:20.003 --> 00:02:22.007
which is your service definition.

49
00:02:22.007 --> 00:02:24.009
This will contain the RPC method,

50
00:02:24.009 --> 00:02:28.004
and the messages that you use as a part of the service.

51
00:02:28.004 --> 00:02:31.002
Out of this proto file, we will generate the client

52
00:02:31.002 --> 00:02:34.007
and the service stubs using the Protoc compiler.

53
00:02:34.007 --> 00:02:38.002
Once this is done, we will write another class.

54
00:02:38.002 --> 00:02:42.001
This is the one which will access the H2 database

55
00:02:42.001 --> 00:02:45.004
and retrieve specific details for the user.

56
00:02:45.004 --> 00:02:46.004
Now we are going to implement

57
00:02:46.004 --> 00:02:48.007
the data access object design pattern,

58
00:02:48.007 --> 00:02:51.005
which means it is a Dao class inside which all

59
00:02:51.005 --> 00:02:55.000
the code to connect the database and access data from it

60
00:02:55.000 --> 00:02:56.005
will sit in.

61
00:02:56.005 --> 00:02:59.002
We are going to use plain JDBC,

62
00:02:59.002 --> 00:03:03.006
which is Java Database Connectivity API to do this.

63
00:03:03.006 --> 00:03:07.006
However, you are free to use any other API of your choice,

64
00:03:07.006 --> 00:03:11.000
like Hibernate, Spring Data, et cetera.

65
00:03:11.000 --> 00:03:13.008
All the data that is retrieved from the H2 database

66
00:03:13.008 --> 00:03:15.000
in the Dao class,

67
00:03:15.000 --> 00:03:17.008
will sit inside a domain objects

68
00:03:17.008 --> 00:03:20.003
which are again, plain old Java objects.

69
00:03:20.003 --> 00:03:22.006
The next step will be to write a class

70
00:03:22.006 --> 00:03:25.006
which will implement the server stub.

71
00:03:25.006 --> 00:03:28.004
This is your server implementation

72
00:03:28.004 --> 00:03:31.008
which can hold any other business logic as well.

73
00:03:31.008 --> 00:03:33.006
We will then connect the Dao

74
00:03:33.006 --> 00:03:36.000
and the service implementation class.

75
00:03:36.000 --> 00:03:39.007
So we will transform the data from the domain objects

76
00:03:39.007 --> 00:03:43.006
to the proto objects inside the Serviceimpl class.

77
00:03:43.006 --> 00:03:45.004
Once the transformation of the data

78
00:03:45.004 --> 00:03:47.006
and other business logic gets completed

79
00:03:47.006 --> 00:03:52.001
in the service implementation, we will host this locally

80
00:03:52.001 --> 00:03:55.003
on this machine on which I'm writing the code right now.

81
00:03:55.003 --> 00:04:00.006
The service will be exposed on a port, 50051.

82
00:04:00.006 --> 00:04:03.009
So the server when gets started will be available at a URL

83
00:04:03.009 --> 00:04:08.004
which is localhost:50051.

84
00:04:08.004 --> 00:04:10.006
Then the last step will be to test out

85
00:04:10.006 --> 00:04:13.002
the service implementation methods.

86
00:04:13.002 --> 00:04:17.003
We can either use a GUI client like bloom RPC,

87
00:04:17.003 --> 00:04:20.009
or we can of course, implement the client stub

88
00:04:20.009 --> 00:04:23.005
in order to write a gRPC Java client

89
00:04:23.005 --> 00:04:25.004
to test all the service.

90
00:04:25.004 --> 00:04:29.004
We will do both of the things, we will use bloom RPC,

91
00:04:29.004 --> 00:04:33.009
and for the order service, we will use a gRPC Java client.

92
00:04:33.009 --> 00:04:37.005
This flow of the code is going to remain the same

93
00:04:37.005 --> 00:04:41.009
when we implement both the user and the order services.

94
00:04:41.009 --> 00:04:43.006
There will be a couple of other steps

95
00:04:43.006 --> 00:04:46.006
that we need to execute when we implement the order service,

96
00:04:46.006 --> 00:04:48.006
but we will explain that to ourselves

97
00:04:48.006 --> 00:04:51.000
when we get to that stage.

