WEBVTT
1
00:00:00.000 --> 00:00:01.006
- [Instructor] Now that we've written

2
00:00:01.006 --> 00:00:03.004
the user service implementation

3
00:00:03.004 --> 00:00:05.002
which implements the server stub,

4
00:00:05.002 --> 00:00:08.003
let's go ahead and host that implementation

5
00:00:08.003 --> 00:00:09.003
on a server.

6
00:00:09.003 --> 00:00:12.008
For that we'll write a class UserServer.

7
00:00:12.008 --> 00:00:13.008
Let's go back to the IDE.

8
00:00:13.008 --> 00:00:18.000
I'll add a package here,

9
00:00:18.000 --> 00:00:21.009
which is for the server.

10
00:00:21.009 --> 00:00:22.007
And under this,

11
00:00:22.007 --> 00:00:24.009
I will create a class

12
00:00:24.009 --> 00:00:27.008
which is called UserServer.

13
00:00:27.008 --> 00:00:30.001
So this class is basically going to host

14
00:00:30.001 --> 00:00:33.005
the user service impl for us.

15
00:00:33.005 --> 00:00:34.007
Let's come under that.

16
00:00:34.007 --> 00:00:40.002
And first grab the logger in case we want to log anything.

17
00:00:40.002 --> 00:00:43.000
So I'll say, private static final logger.

18
00:00:43.000 --> 00:00:48.009
This is java.util.logging.

19
00:00:48.009 --> 00:00:49.008
getLogger

20
00:00:49.008 --> 00:00:56.007
and you just have to pass the name of the class.

21
00:00:56.007 --> 00:00:58.000
There we go.

22
00:00:58.000 --> 00:00:58.008
In addition to that,

23
00:00:58.008 --> 00:01:05.006
let's also grab the server from the io.grpc package.

24
00:01:05.006 --> 00:01:09.000
Let's grab a variable for that.

25
00:01:09.000 --> 00:01:11.002
Now we are going to write certain methods

26
00:01:11.002 --> 00:01:12.006
inside this UserServer class.

27
00:01:12.006 --> 00:01:18.002
The first one will be startServer.

28
00:01:18.002 --> 00:01:20.003
What is this method going to do for us?

29
00:01:20.003 --> 00:01:24.006
It is going to ensure that the user service impl class

30
00:01:24.006 --> 00:01:28.003
is hosted on a specified port.

31
00:01:28.003 --> 00:01:29.007
That's all that we're going to do.

32
00:01:29.007 --> 00:01:30.007
How do we do that?

33
00:01:30.007 --> 00:01:31.009
Let's find out.

34
00:01:31.009 --> 00:01:33.009
First we declare a port.

35
00:01:33.009 --> 00:01:39.000
It's typically 50051.

36
00:01:39.000 --> 00:01:42.003
And then we're going to grab that server variable.

37
00:01:42.003 --> 00:01:44.000
And we're going to use the server builder

38
00:01:44.000 --> 00:01:45.005
to build that object.

39
00:01:45.005 --> 00:01:49.002
So ServerBuilder.

40
00:01:49.002 --> 00:01:51.005
This has a method called forPort.

41
00:01:51.005 --> 00:01:55.008
So we specify the port that we declared on line 14.

42
00:01:55.008 --> 00:01:56.008
Next,

43
00:01:56.008 --> 00:01:59.006
we have to ensure that we specify the service class

44
00:01:59.006 --> 00:02:01.006
that needs to be hosted.

45
00:02:01.006 --> 00:02:04.004
So for that, there is a method called addService.

46
00:02:04.004 --> 00:02:06.001
And we just have to feed an instance

47
00:02:06.001 --> 00:02:08.008
of the UserServiceImpl class.

48
00:02:08.008 --> 00:02:11.007
This is the one that we want to host.

49
00:02:11.007 --> 00:02:14.002
After we do this, we build this.

50
00:02:14.002 --> 00:02:19.002
And then we call this start method.

51
00:02:19.002 --> 00:02:21.009
This will return the server object for us.

52
00:02:21.009 --> 00:02:24.000
This will ensure that the server get started.

53
00:02:24.000 --> 00:02:26.000
There's an error on line 19.

54
00:02:26.000 --> 00:02:29.003
This is asking us to basically handle the I/O exception.

55
00:02:29.003 --> 00:02:31.007
So I'm going to add a try/catch.

56
00:02:31.007 --> 00:02:36.000
And instead of the exception.printStackTrace on line 23,

57
00:02:36.000 --> 00:02:38.000
I will add a logger statement.

58
00:02:38.000 --> 00:02:41.009
So say, logger.log.

59
00:02:41.009 --> 00:02:46.005
Let the level be severe.

60
00:02:46.005 --> 00:02:47.006
Let's put a simple message,

61
00:02:47.006 --> 00:02:50.002
server did not start,

62
00:02:50.002 --> 00:02:52.006
along with the exception object.

63
00:02:52.006 --> 00:02:54.007
That is all.

64
00:02:54.007 --> 00:02:58.002
So there we have the basic start server method.

65
00:02:58.002 --> 00:02:59.002
In addition to this,

66
00:02:59.002 --> 00:03:01.008
we're going to add a couple of more methods.

67
00:03:01.008 --> 00:03:04.003
Let's go to line 28,

68
00:03:04.003 --> 00:03:06.002
and add one more method called

69
00:03:06.002 --> 00:03:09.002
stop server.

70
00:03:09.002 --> 00:03:10.000
What are we going to do in this?

71
00:03:10.000 --> 00:03:11.007
We are going to quickly check

72
00:03:11.007 --> 00:03:16.003
if the server object is not null,

73
00:03:16.003 --> 00:03:18.000
and if it is indeed not null,

74
00:03:18.000 --> 00:03:20.003
then we are going to call the shutdown method.

75
00:03:20.003 --> 00:03:23.003
The shutdown method is going to issue a command

76
00:03:23.003 --> 00:03:25.001
to stop the server

77
00:03:25.001 --> 00:03:29.008
so that no new calls will be accepted after this.

78
00:03:29.008 --> 00:03:31.000
In addition to that,

79
00:03:31.000 --> 00:03:33.000
I'm also going to call one more method,

80
00:03:33.000 --> 00:03:35.007
which is await termination.

81
00:03:35.007 --> 00:03:38.004
And this one takes two arguments.

82
00:03:38.004 --> 00:03:40.009
One is the timeout period.

83
00:03:40.009 --> 00:03:42.006
We're going to say 30.

84
00:03:42.006 --> 00:03:45.005
And this 30 is basically going to be seconds.

85
00:03:45.005 --> 00:03:49.002
So let me specify that time period like that.

86
00:03:49.002 --> 00:03:51.007
So this await termination is going to ensure

87
00:03:51.007 --> 00:03:54.003
that all the currently executing calls

88
00:03:54.003 --> 00:03:57.004
get a time of 30 seconds to complete.

89
00:03:57.004 --> 00:03:59.006
Once that timeout is reached,

90
00:03:59.006 --> 00:04:02.009
the server is going to shut down anyway.

91
00:04:02.009 --> 00:04:04.000
That is what we are going to do

92
00:04:04.000 --> 00:04:07.001
as a part of the stop server method.

93
00:04:07.001 --> 00:04:08.009
This is asking me to

94
00:04:08.009 --> 00:04:11.001
basically handle the interrupted exceptions.

95
00:04:11.001 --> 00:04:15.003
So let's go ahead and add it to the method signature.

96
00:04:15.003 --> 00:04:18.000
Easy.

97
00:04:18.000 --> 00:04:19.006
We add one more method,

98
00:04:19.006 --> 00:04:21.001
which is,

99
00:04:21.001 --> 00:04:28.003
public void blockUntilShutdown.

100
00:04:28.003 --> 00:04:29.003
What is this going to do?

101
00:04:29.003 --> 00:04:31.009
It's going to pretty much check the same thing.

102
00:04:31.009 --> 00:04:35.002
Server, not null.

103
00:04:35.002 --> 00:04:36.009
And if the server is not null,

104
00:04:36.009 --> 00:04:38.004
we just say,

105
00:04:38.004 --> 00:04:41.002
server.awaitTermination.

106
00:04:41.002 --> 00:04:44.000
This time we are going to call the overloaded method

107
00:04:44.000 --> 00:04:47.005
which does not take any arguments.

108
00:04:47.005 --> 00:04:51.000
So the await termination method on line 31

109
00:04:51.000 --> 00:04:55.007
ensures that it waits for a period of 30 seconds

110
00:04:55.007 --> 00:04:56.008
to terminate.

111
00:04:56.008 --> 00:05:01.002
But the await termination overloaded call on line 37,

112
00:05:01.002 --> 00:05:04.000
ensures that there is no such time period.

113
00:05:04.000 --> 00:05:07.008
It is just going to keep waiting for the termination.

114
00:05:07.008 --> 00:05:10.004
In a minute, I'll tell you why we have defined

115
00:05:10.004 --> 00:05:13.004
the blockUntilShutdown method.

116
00:05:13.004 --> 00:05:16.009
The last part of this is write the main method.

117
00:05:16.009 --> 00:05:19.001
So this main method is going to help us run this class

118
00:05:19.001 --> 00:05:23.004
and it eventually start the server on port 50051.

119
00:05:23.004 --> 00:05:28.003
So for this, we just grab the server instance.

120
00:05:28.003 --> 00:05:33.000
Let's create that.

121
00:05:33.000 --> 00:05:39.005
Once done, we can call the start server method

122
00:05:39.005 --> 00:05:41.000
and after this,

123
00:05:41.000 --> 00:05:45.006
we're going to call the blockUntilShutdown method.

124
00:05:45.006 --> 00:05:49.002
Before this, let's quickly also add that exception

125
00:05:49.002 --> 00:05:51.002
of interrupted exception to the method signature

126
00:05:51.002 --> 00:05:53.004
of the previous method, right?

127
00:05:53.004 --> 00:05:56.004
And let's add it on line 44 as well.

128
00:05:56.004 --> 00:05:57.003
So.

129
00:05:57.003 --> 00:05:59.000
The significance of this method is,

130
00:05:59.000 --> 00:06:02.000
we know that whenever the execution of the main method

131
00:06:02.000 --> 00:06:05.001
gets completed, the main thread is killed.

132
00:06:05.001 --> 00:06:08.004
We do not want to abruptly stop the server.

133
00:06:08.004 --> 00:06:10.006
We want to keep the server running,

134
00:06:10.006 --> 00:06:14.002
which is why we are calling blockUntilShutdown.

135
00:06:14.002 --> 00:06:15.005
That in turn,

136
00:06:15.005 --> 00:06:17.005
internally invokes await termination

137
00:06:17.005 --> 00:06:19.001
as we see on line 37,

138
00:06:19.001 --> 00:06:22.003
which means the server is going to just keep running

139
00:06:22.003 --> 00:06:23.006
without termination.

140
00:06:23.006 --> 00:06:26.003
That's why we have this method in place.

141
00:06:26.003 --> 00:06:28.009
The last thing that we have to do is,

142
00:06:28.009 --> 00:06:31.002
on the start server method,

143
00:06:31.002 --> 00:06:34.008
we are going to quickly add a shutdown hook.

144
00:06:34.008 --> 00:06:38.002
So let me see what we can do.

145
00:06:38.002 --> 00:06:41.004
Let's come back here on line 25.

146
00:06:41.004 --> 00:06:45.009
And I'm going to grab the Java runtime.

147
00:06:45.009 --> 00:06:47.004
Like that.

148
00:06:47.004 --> 00:06:49.007
And I'm going to add a shutdown hook.

149
00:06:49.007 --> 00:06:53.007
And the shutdown hook is going to take a thread

150
00:06:53.007 --> 00:06:57.008
which is basically now an inner class.

151
00:06:57.008 --> 00:06:59.005
And we have to provide the implementation

152
00:06:59.005 --> 00:07:01.003
for the run method.

153
00:07:01.003 --> 00:07:03.004
And what are we going to do in this run?

154
00:07:03.004 --> 00:07:05.005
We're just going to say,

155
00:07:05.005 --> 00:07:12.008
UserServer.this.stopServer.

156
00:07:12.008 --> 00:07:16.001
Let's make sure that we surround this

157
00:07:16.001 --> 00:07:17.009
with try/catch.

158
00:07:17.009 --> 00:07:19.005
And let's add a logger here.

159
00:07:19.005 --> 00:07:22.006
So I'm going to grab line 36.

160
00:07:22.006 --> 00:07:25.000
Copy this.

161
00:07:25.000 --> 00:07:30.005
And instead of doing exception.printStackTrace on line 31,

162
00:07:30.005 --> 00:07:32.009
I'm going to add that logger line.

163
00:07:32.009 --> 00:07:34.003
And you can just say,

164
00:07:34.003 --> 00:07:38.004
server

165
00:07:38.004 --> 00:07:39.005
shut down.

166
00:07:39.005 --> 00:07:42.004
Let's also do one more thing

167
00:07:42.004 --> 00:07:45.008
before we have this implementation inside run.

168
00:07:45.008 --> 00:07:49.004
We just add one more logger statement here.

169
00:07:49.004 --> 00:07:52.002
This is an info statement that I want to add.

170
00:07:52.002 --> 00:07:56.001
And that is ensuring this,

171
00:07:56.001 --> 00:08:00.002
that there's a clean server shut down

172
00:08:00.002 --> 00:08:05.004
in case JVM was shut down.

173
00:08:05.004 --> 00:08:06.003
All right.

174
00:08:06.003 --> 00:08:08.004
So what we did is we added a shutdown hook

175
00:08:08.004 --> 00:08:12.002
from lines 25 to lines 35.

176
00:08:12.002 --> 00:08:13.008
And what is this about?

177
00:08:13.008 --> 00:08:15.007
Let's say your server is started.

178
00:08:15.007 --> 00:08:18.000
And then you kill the JVM.

179
00:08:18.000 --> 00:08:19.004
In case you kill the JVM,

180
00:08:19.004 --> 00:08:24.002
you also want that the server has a clean shutdown.

181
00:08:24.002 --> 00:08:26.009
That is why we are adding this hook.

182
00:08:26.009 --> 00:08:29.005
This hook has a thread that is running

183
00:08:29.005 --> 00:08:33.000
and that thread will ensure that the server is stopped.

184
00:08:33.000 --> 00:08:36.004
So we are invoking the stop server method

185
00:08:36.004 --> 00:08:38.002
that we have written in this class.

186
00:08:38.002 --> 00:08:40.008
So this will ensure that when the JVM is killed,

187
00:08:40.008 --> 00:08:45.005
your user server will also have a clean server shutdown.

188
00:08:45.005 --> 00:08:47.004
That is why we want to add that.

189
00:08:47.004 --> 00:08:48.002
Okay.

190
00:08:48.002 --> 00:08:50.003
So we are ready with the user server.

191
00:08:50.003 --> 00:08:52.008
The last step of this in our demo will be

192
00:08:52.008 --> 00:08:55.000
to test this out with a client.

