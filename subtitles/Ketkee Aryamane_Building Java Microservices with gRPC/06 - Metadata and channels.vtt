WEBVTT
1
00:00:00.007 --> 00:00:02.004
- [Instructor] Let's look at few other concepts

2
00:00:02.004 --> 00:00:03.009
in the gRPC framework.

3
00:00:03.009 --> 00:00:06.002
The first one is metadata.

4
00:00:06.002 --> 00:00:11.000
Metadata is the information about a particular RPC call.

5
00:00:11.000 --> 00:00:13.005
For example, authentication details

6
00:00:13.005 --> 00:00:15.007
where you have auto tokens exchanged

7
00:00:15.007 --> 00:00:17.006
between the client and the server.

8
00:00:17.006 --> 00:00:20.004
Metadata could have many names, depending

9
00:00:20.004 --> 00:00:22.003
on what point it is exchanged

10
00:00:22.003 --> 00:00:24.004
between the client and the server.

11
00:00:24.004 --> 00:00:27.004
For example, when the client sends out a request

12
00:00:27.004 --> 00:00:29.007
it will send out request metadata.

13
00:00:29.007 --> 00:00:31.007
When the request reaches the server site,

14
00:00:31.007 --> 00:00:35.007
the server will send out initial metadata if there is any.

15
00:00:35.007 --> 00:00:38.003
And when the server finally readies the response,

16
00:00:38.003 --> 00:00:40.006
it'll send the response back to the client

17
00:00:40.006 --> 00:00:43.005
along with the trailing metadata.

18
00:00:43.005 --> 00:00:46.000
Metadata is information which is usually

19
00:00:46.000 --> 00:00:48.008
in the form of key and value pairs.

20
00:00:48.008 --> 00:00:53.000
The keys are strengths and the values could be strengths

21
00:00:53.000 --> 00:00:56.001
but they could even be binary data.

22
00:00:56.001 --> 00:00:58.008
Now, how you get access to the metadata will depend

23
00:00:58.008 --> 00:01:00.006
on the language that you're trying to use

24
00:01:00.006 --> 00:01:03.003
while implementing the gRPC service.

25
00:01:03.003 --> 00:01:04.008
Channel on the other hand,

26
00:01:04.008 --> 00:01:07.009
signifies the connection end point to the server

27
00:01:07.009 --> 00:01:11.001
which is an HTTP two connection.

28
00:01:11.001 --> 00:01:14.006
Behind the scenes, an HTTP two connection is established

29
00:01:14.006 --> 00:01:18.005
with the server and this channel will then remain open

30
00:01:18.005 --> 00:01:21.006
so that the client can make subsequent remote calls

31
00:01:21.006 --> 00:01:23.005
to the server site.

32
00:01:23.005 --> 00:01:27.006
A gRPC channel provides a connection to a gRPC server

33
00:01:27.006 --> 00:01:31.001
on a specified host and abort.

34
00:01:31.001 --> 00:01:32.007
Channels have states.

35
00:01:32.007 --> 00:01:35.000
For example, a channel could be connected

36
00:01:35.000 --> 00:01:36.006
or it could be idle.

37
00:01:36.006 --> 00:01:38.003
And you have a host of arguments

38
00:01:38.003 --> 00:01:40.006
that you can define on the channel

39
00:01:40.006 --> 00:01:45.002
in order to alter the default behavior of gRPC.

40
00:01:45.002 --> 00:01:47.003
Again, how you try to deal

41
00:01:47.003 --> 00:01:50.000
with the channel will be dependent on the language.

42
00:01:50.000 --> 00:01:53.005
Some languages allow you to query the state

43
00:01:53.005 --> 00:01:55.000
of the journal as well.

