WEBVTT
1
00:00:00.005 --> 00:00:03.009
- [Instructor] Now that we know what protocol buffers are,

2
00:00:03.009 --> 00:00:06.003
let us see how to use them.

3
00:00:06.003 --> 00:00:09.000
We will begin by writing a text file

4
00:00:09.000 --> 00:00:11.005
with a .proto extension.

5
00:00:11.005 --> 00:00:14.008
This will signify that it is a protobuffs file,

6
00:00:14.008 --> 00:00:19.005
and this file will contain your entire service definition.

7
00:00:19.005 --> 00:00:23.001
Let us see, in a gist, how it will look like.

8
00:00:23.001 --> 00:00:26.003
This line will specify the name of the service.

9
00:00:26.003 --> 00:00:30.006
So EmployeeService is the service class for your file.

10
00:00:30.006 --> 00:00:35.003
Inside this, we will define a method called getEmployee.

11
00:00:35.003 --> 00:00:37.001
It is an RPC method.

12
00:00:37.001 --> 00:00:41.006
The input for this is a message called EmployeeRequest,

13
00:00:41.006 --> 00:00:44.005
and this method returns another message

14
00:00:44.005 --> 00:00:46.008
called EmployeeResponse.

15
00:00:46.008 --> 00:00:49.009
This line denotes the remote service method

16
00:00:49.009 --> 00:00:51.008
for your service.

17
00:00:51.008 --> 00:00:53.001
In addition to this,

18
00:00:53.001 --> 00:00:56.003
you also need to define the EmployeeRequest

19
00:00:56.003 --> 00:00:59.001
and EmployeeResponse messages.

20
00:00:59.001 --> 00:01:01.000
This is how we do it.

21
00:01:01.000 --> 00:01:04.006
The EmployeeResponse message contains four fields:

22
00:01:04.006 --> 00:01:09.006
an ID, a username, a name, and a designation.

23
00:01:09.006 --> 00:01:13.003
Each of these fields has a number assigned to them.

24
00:01:13.003 --> 00:01:18.004
This number is used as a tag to identify the field

25
00:01:18.004 --> 00:01:21.009
in the binary message format that gets transported

26
00:01:21.009 --> 00:01:24.007
over the HTTP/2 protocol.

27
00:01:24.007 --> 00:01:27.007
Similarly, we've also defined EmployeeRequest

28
00:01:27.007 --> 00:01:31.000
that contains just a single field called ID.

29
00:01:31.000 --> 00:01:33.005
Please note that this is just a gist

30
00:01:33.005 --> 00:01:35.008
of what your file will look like.

31
00:01:35.008 --> 00:01:38.001
You have loads of other options

32
00:01:38.001 --> 00:01:41.008
that you can specify in your protobuffers file.

33
00:01:41.008 --> 00:01:44.001
Once you complete your service definition,

34
00:01:44.001 --> 00:01:47.005
the next step will be to use the protoc compiler

35
00:01:47.005 --> 00:01:49.002
to generate stubs,

36
00:01:49.002 --> 00:01:53.001
and these stubs can be generated according to a language.

37
00:01:53.001 --> 00:01:56.009
The protoc compiler is going to generate objects

38
00:01:56.009 --> 00:01:59.009
for the corresponding message types that you've defined

39
00:01:59.009 --> 00:02:02.000
in your service file.

40
00:02:02.000 --> 00:02:05.008
These auto-generated classes will implement

41
00:02:05.008 --> 00:02:08.004
automatic encoding and parsing

42
00:02:08.004 --> 00:02:13.003
of the protocol buffer data in an efficient binary format.

43
00:02:13.003 --> 00:02:16.006
These classes will contain getters and setters

44
00:02:16.006 --> 00:02:18.007
for each of the fields that you've defined

45
00:02:18.007 --> 00:02:20.002
in your message types.

46
00:02:20.002 --> 00:02:23.001
These classes will then, in turn, help you to retrieve

47
00:02:23.001 --> 00:02:26.008
or set protocol buffered employee messages.

48
00:02:26.008 --> 00:02:29.002
We will do a quick demo of this

49
00:02:29.002 --> 00:02:33.000
on the Windows operating system in our next video.

