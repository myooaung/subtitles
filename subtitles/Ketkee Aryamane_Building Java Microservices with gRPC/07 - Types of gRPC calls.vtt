WEBVTT
1
00:00:00.008 --> 00:00:03.000
- gRPC supports both the blocking

2
00:00:03.000 --> 00:00:04.009
and asynchronous calls

3
00:00:04.009 --> 00:00:06.000
but further to that

4
00:00:06.000 --> 00:00:08.005
there are four types of gRPC calls

5
00:00:08.005 --> 00:00:09.009
that you can work with

6
00:00:09.009 --> 00:00:11.006
when you use this framework.

7
00:00:11.006 --> 00:00:14.004
The first one is Unary RPC.

8
00:00:14.004 --> 00:00:15.002
In this case,

9
00:00:15.002 --> 00:00:17.004
the client sends out a single request

10
00:00:17.004 --> 00:00:20.004
and the server comes back with a single response.

11
00:00:20.004 --> 00:00:22.004
Let us quickly see how this works.

12
00:00:22.004 --> 00:00:24.007
Let's say you have a Go gRPC client.

13
00:00:24.007 --> 00:00:27.005
The client first makes an RPC call to the server

14
00:00:27.005 --> 00:00:29.005
with the necessary request metadata

15
00:00:29.005 --> 00:00:31.005
like authentication details.

16
00:00:31.005 --> 00:00:33.005
The server gets notified of the call

17
00:00:33.005 --> 00:00:34.007
and if everything is okay,

18
00:00:34.007 --> 00:00:36.009
the connection is set up.

19
00:00:36.009 --> 00:00:38.003
Once a connection is established

20
00:00:38.003 --> 00:00:39.005
the client sends out

21
00:00:39.005 --> 00:00:41.000
the request to the server.

22
00:00:41.000 --> 00:00:42.007
The server receives it,

23
00:00:42.007 --> 00:00:43.008
processes it

24
00:00:43.008 --> 00:00:46.000
and prepares a response.

25
00:00:46.000 --> 00:00:48.000
If the status of the response is okay

26
00:00:48.000 --> 00:00:49.007
then the client receives it.

27
00:00:49.007 --> 00:00:52.003
And the call thus gets completed.

28
00:00:52.003 --> 00:00:55.001
A simple example of a Unary RPC call

29
00:00:55.001 --> 00:00:57.003
is when you log into your shopping website

30
00:00:57.003 --> 00:00:59.003
and try to view your profile.

31
00:00:59.003 --> 00:01:01.006
When you click on the view profile button

32
00:01:01.006 --> 00:01:03.008
the client can send out a single request

33
00:01:03.008 --> 00:01:05.003
containing the username

34
00:01:05.003 --> 00:01:06.002
and the server

35
00:01:06.002 --> 00:01:08.001
can come back with a single response

36
00:01:08.001 --> 00:01:09.005
containing the user details

37
00:01:09.005 --> 00:01:11.004
corresponding to the username.

38
00:01:11.004 --> 00:01:13.003
The second type of call that you can make

39
00:01:13.003 --> 00:01:16.005
is a client streaming RPC call.

40
00:01:16.005 --> 00:01:18.005
This works very similar to Unary,

41
00:01:18.005 --> 00:01:20.000
except that in this

42
00:01:20.000 --> 00:01:23.007
the client can stream a sequence of messages

43
00:01:23.007 --> 00:01:25.003
rather than a single message

44
00:01:25.003 --> 00:01:26.007
to the server site.

45
00:01:26.007 --> 00:01:30.000
The client can also send an end of stream flag

46
00:01:30.000 --> 00:01:32.003
to mark the end of all the messages

47
00:01:32.003 --> 00:01:33.007
that it sends out.

48
00:01:33.007 --> 00:01:35.002
The server in the meantime

49
00:01:35.002 --> 00:01:36.005
will read all the messages

50
00:01:36.005 --> 00:01:37.005
from the client.

51
00:01:37.005 --> 00:01:38.008
Will process them

52
00:01:38.008 --> 00:01:39.008
and respond

53
00:01:39.008 --> 00:01:41.004
in a single response.

54
00:01:41.004 --> 00:01:43.007
Along with the trailing metadata.

55
00:01:43.007 --> 00:01:44.008
An example of this is

56
00:01:44.008 --> 00:01:47.007
when the client wants to send huge amounts of data,

57
00:01:47.007 --> 00:01:49.008
like in case of website tracking

58
00:01:49.008 --> 00:01:51.005
or uploading huge files.

59
00:01:51.005 --> 00:01:53.009
So the client can send out those huge files

60
00:01:53.009 --> 00:01:55.005
in a sequence of messages.

61
00:01:55.005 --> 00:01:57.009
And the server can finally come back with a response

62
00:01:57.009 --> 00:01:59.009
saying that it has received the file,

63
00:01:59.009 --> 00:02:02.005
and that will be a single response.

64
00:02:02.005 --> 00:02:03.008
The third type of a call

65
00:02:03.008 --> 00:02:06.004
is the Server Streaming RPC.

66
00:02:06.004 --> 00:02:07.007
Now as the word suggest

67
00:02:07.007 --> 00:02:10.008
this will involve the server streaming

68
00:02:10.008 --> 00:02:12.004
a sequence of messages.

69
00:02:12.004 --> 00:02:14.007
So the client sends out a single request

70
00:02:14.007 --> 00:02:18.004
but the server will send out a stream of messages.

71
00:02:18.004 --> 00:02:20.001
The communication will end

72
00:02:20.001 --> 00:02:22.007
when the server sends out the trailing metadata.

73
00:02:22.007 --> 00:02:24.008
And example of this is

74
00:02:24.008 --> 00:02:27.008
when a user on a shopping website

75
00:02:27.008 --> 00:02:29.004
is trying to search for products

76
00:02:29.004 --> 00:02:31.002
by entering a keyword.

77
00:02:31.002 --> 00:02:33.004
When the user clicks on the search button,

78
00:02:33.004 --> 00:02:36.003
the server can then send a stream of results

79
00:02:36.003 --> 00:02:38.007
matching the search criteria.

80
00:02:38.007 --> 00:02:40.002
The fourth type of call

81
00:02:40.002 --> 00:02:43.003
is the Bidirectional streaming RPC call.

82
00:02:43.003 --> 00:02:44.004
In this case,

83
00:02:44.004 --> 00:02:47.006
both the client and the server

84
00:02:47.006 --> 00:02:50.008
can send a stream of messages between them.

85
00:02:50.008 --> 00:02:53.005
The client sends an end of stream flag

86
00:02:53.005 --> 00:02:56.000
to mark the end of messages that it sends out.

87
00:02:56.000 --> 00:02:58.001
And the server completes the streaming

88
00:02:58.001 --> 00:03:00.006
by sending trailing metadata.

89
00:03:00.006 --> 00:03:02.002
An example of this could be

90
00:03:02.002 --> 00:03:04.004
incremental searches for products

91
00:03:04.004 --> 00:03:06.009
where the client sends a stream of messages

92
00:03:06.009 --> 00:03:08.005
for every set of characters

93
00:03:08.005 --> 00:03:10.000
that the user is typing.

94
00:03:10.000 --> 00:03:12.004
And the server sends a stream of messages

95
00:03:12.004 --> 00:03:14.007
for all the search results.

96
00:03:14.007 --> 00:03:16.001
As a part of this course.

97
00:03:16.001 --> 00:03:17.004
We're only going to play around

98
00:03:17.004 --> 00:03:19.003
with the Unary RPC call.

99
00:03:19.003 --> 00:03:21.002
When we develop the services,

100
00:03:21.002 --> 00:03:24.000
we using the Java programming language.

