WEBVTT
1
00:00:00.007 --> 00:00:02.001
- [Instructor] Our demo is complete,

2
00:00:02.001 --> 00:00:03.008
but we still need to take a look

3
00:00:03.008 --> 00:00:05.004
through the generated classes

4
00:00:05.004 --> 00:00:07.004
in order to understand them better.

5
00:00:07.004 --> 00:00:10.009
So firstly, all the classes got generated in a package,

6
00:00:10.009 --> 00:00:14.007
which is com.example.services.

7
00:00:14.007 --> 00:00:15.009
And that is because,

8
00:00:15.009 --> 00:00:19.005
if you recollect, under the employee proto file

9
00:00:19.005 --> 00:00:23.007
we explicitly mentioned the Java_ package

10
00:00:23.007 --> 00:00:25.000
on number five.

11
00:00:25.000 --> 00:00:26.002
Had we not done this,

12
00:00:26.002 --> 00:00:27.006
then all the classes would have sat

13
00:00:27.006 --> 00:00:30.004
in a package which is called example.

14
00:00:30.004 --> 00:00:32.007
Now the most important class to look

15
00:00:32.007 --> 00:00:35.002
in this is the employee service GRPC.

16
00:00:35.002 --> 00:00:38.006
I will open this with my editor.

17
00:00:38.006 --> 00:00:42.004
So if you look through this, this has got the client

18
00:00:42.004 --> 00:00:44.003
and the silver stubs boat.

19
00:00:44.003 --> 00:00:46.006
Which you will use to implement the server

20
00:00:46.006 --> 00:00:49.000
and the client later.

21
00:00:49.000 --> 00:00:52.001
So it has got to get employee method, the RPC method,

22
00:00:52.001 --> 00:00:54.008
which you see on line 20 and 21.

23
00:00:54.008 --> 00:00:57.007
Additionally, it has got a list of methods,

24
00:00:57.007 --> 00:01:00.005
which provide the client a step

25
00:01:00.005 --> 00:01:05.002
in order to make a call to the service remote method.

26
00:01:05.002 --> 00:01:09.001
Now the client can make either an asynchronous call

27
00:01:09.001 --> 00:01:10.008
or a blocking call.

28
00:01:10.008 --> 00:01:12.003
And there are different steps

29
00:01:12.003 --> 00:01:14.003
for each of these types of calls.

30
00:01:14.003 --> 00:01:16.006
For example, on line 51,

31
00:01:16.006 --> 00:01:18.008
there's a method called new stub.

32
00:01:18.008 --> 00:01:21.004
This is the one that the client will grab

33
00:01:21.004 --> 00:01:26.000
in order to make an asynchronous call to the service method.

34
00:01:26.000 --> 00:01:28.003
Additionally, on line 65,

35
00:01:28.003 --> 00:01:32.002
there is a new blocking step that the client can get hold of

36
00:01:32.002 --> 00:01:34.000
in order to make a blocking call.

37
00:01:34.000 --> 00:01:36.000
So those are the client and the service steps

38
00:01:36.000 --> 00:01:38.009
that are available in this service class.

39
00:01:38.009 --> 00:01:43.000
Let's also see employee request and employee response.

40
00:01:43.000 --> 00:01:46.001
These are the objects that were generated corresponding

41
00:01:46.001 --> 00:01:50.009
to the message types that we define in our proto file.

42
00:01:50.009 --> 00:01:54.003
Additionally, GRPC uses the builder design pattern

43
00:01:54.003 --> 00:01:57.009
in order to help you retrieve or set values to each

44
00:01:57.009 --> 00:02:02.003
of the fields in the employee request and employee response.

45
00:02:02.003 --> 00:02:05.005
And that is why you see these builder classes,

46
00:02:05.005 --> 00:02:09.004
employee request or builder, employee response or builder.

47
00:02:09.004 --> 00:02:11.007
Lastly, employee or Java is a class

48
00:02:11.007 --> 00:02:13.001
which is going to give you the description

49
00:02:13.001 --> 00:02:15.009
of all the other classes that got generated.

50
00:02:15.009 --> 00:02:20.007
Just to note, we never make any changes to these classes.

51
00:02:20.007 --> 00:02:22.005
We just needed to look

52
00:02:22.005 --> 00:02:25.008
into them so that we know what got generated

53
00:02:25.008 --> 00:02:29.001
and we know what to use when.

54
00:02:29.001 --> 00:02:31.003
So that is all as a part of this demo.

55
00:02:31.003 --> 00:02:34.005
Please note this demo was done to demonstrate

56
00:02:34.005 --> 00:02:36.008
how you can use Protobuf

57
00:02:36.008 --> 00:02:38.008
in order to write a service file,

58
00:02:38.008 --> 00:02:40.005
generate stubs out of it.

59
00:02:40.005 --> 00:02:43.005
And then go ahead with your service implementation.

60
00:02:43.005 --> 00:02:48.004
This is just scratching the surface of protocol buffers.

61
00:02:48.004 --> 00:02:50.001
If you would like to learn more

62
00:02:50.001 --> 00:02:52.005
there is a link to the comprehensive guide

63
00:02:52.005 --> 00:02:54.003
which is the official documentation

64
00:02:54.003 --> 00:02:58.002
on developers.google.com explicitly explaining

65
00:02:58.002 --> 00:03:01.001
you protocol buffers in greater detail.

66
00:03:01.001 --> 00:03:04.000
Please take a look at it in order to study further.

