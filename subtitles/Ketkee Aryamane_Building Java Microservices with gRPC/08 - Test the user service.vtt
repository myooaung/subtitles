WEBVTT
1
00:00:00.007 --> 00:00:02.001
- [Instructor] The last part of this demo

2
00:00:02.001 --> 00:00:05.007
is now, to test that user service.

3
00:00:05.007 --> 00:00:10.001
For this, we're going to use a tool called BloomRPC.

4
00:00:10.001 --> 00:00:11.008
It's a GUI tool.

5
00:00:11.008 --> 00:00:13.009
The link has been provided on the slide.

6
00:00:13.009 --> 00:00:15.006
You can download it as an app

7
00:00:15.006 --> 00:00:18.002
and then get started for using it.

8
00:00:18.002 --> 00:00:20.005
So let's go to the IDE.

9
00:00:20.005 --> 00:00:23.006
Let's do a couple of more things.

10
00:00:23.006 --> 00:00:25.004
We are going to quickly put one

11
00:00:25.004 --> 00:00:29.001
info statement that the server did start.

12
00:00:29.001 --> 00:00:31.005
So that we can do here.

13
00:00:31.005 --> 00:00:35.001
And we'll look on line 24.

14
00:00:35.001 --> 00:00:39.000
And say logger.info.

15
00:00:39.000 --> 00:00:47.002
And say server started on port five, 5-0-0-5-1.

16
00:00:47.002 --> 00:00:51.006
Let's also modify the exception message on line 33.

17
00:00:51.006 --> 00:00:53.004
I was not very happy with it.

18
00:00:53.004 --> 00:00:57.001
So I'm just going to say server shut down interrupted

19
00:00:57.001 --> 00:01:01.002
because that was the exception that we got.

20
00:01:01.002 --> 00:01:03.006
Okay, so now let's go ahead

21
00:01:03.006 --> 00:01:08.006
and run this class so that the server gets started.

22
00:01:08.006 --> 00:01:10.006
So I'm going to run this.

23
00:01:10.006 --> 00:01:13.005
And once it runs, it should spring up saying

24
00:01:13.005 --> 00:01:20.004
that the server did get started on port 5-0-0-5-1.

25
00:01:20.004 --> 00:01:21.002
There we go.

26
00:01:21.002 --> 00:01:22.003
So now we have the server started,

27
00:01:22.003 --> 00:01:24.009
the user server on this port.

28
00:01:24.009 --> 00:01:27.005
Let's open up BloomRPC.

29
00:01:27.005 --> 00:01:29.009
I've already downloaded it on my machine.

30
00:01:29.009 --> 00:01:35.002
I am going to choose the proto file.

31
00:01:35.002 --> 00:01:38.009
So the proto file has to be picked up from your project.

32
00:01:38.009 --> 00:01:42.003
So once you use that, it will automatically set

33
00:01:42.003 --> 00:01:45.006
up the service class along with the method.

34
00:01:45.006 --> 00:01:47.005
So you see that it automatically created

35
00:01:47.005 --> 00:01:50.004
a client for the user server,

36
00:01:50.004 --> 00:01:54.002
which is running on local host 5-0-0-5-1.

37
00:01:54.002 --> 00:01:57.000
So now BloomRPC, GUI, or GUI

38
00:01:57.000 --> 00:01:59.008
becomes a client to test the service.

39
00:01:59.008 --> 00:02:02.006
So now let's go ahead and put a username.

40
00:02:02.006 --> 00:02:06.002
Let's first see the records that we have in the database.

41
00:02:06.002 --> 00:02:08.002
Let's look at our script.

42
00:02:08.002 --> 00:02:11.004
Let's go to resources and initialize.

43
00:02:11.004 --> 00:02:13.006
So we have a number of user records.

44
00:02:13.006 --> 00:02:15.006
You can pick any one of these to test out.

45
00:02:15.006 --> 00:02:17.007
I'm going to pick up Chandler Bing's record.

46
00:02:17.007 --> 00:02:22.002
Let's go back and feed the username Chandler.

47
00:02:22.002 --> 00:02:24.001
And if you've done it, all right

48
00:02:24.001 --> 00:02:26.000
this hit should give us a response.

49
00:02:26.000 --> 00:02:27.005
Let's see.

50
00:02:27.005 --> 00:02:30.005
Yes, so we didn't get the user response back.

51
00:02:30.005 --> 00:02:33.002
So we have been able to successfully test

52
00:02:33.002 --> 00:02:35.000
the user service with a client.

53
00:02:35.000 --> 00:02:38.008
The client in this case is the BloomRPC Client.

54
00:02:38.008 --> 00:02:39.007
So there we go.

55
00:02:39.007 --> 00:02:43.004
We've completed the build of the user service.

56
00:02:43.004 --> 00:02:45.007
What we did is we first retrieved the user data

57
00:02:45.007 --> 00:02:46.008
from the database.

58
00:02:46.008 --> 00:02:50.003
Then we wrote the service stub implementation.

59
00:02:50.003 --> 00:02:53.005
Then we hosted the implementation using the server.

60
00:02:53.005 --> 00:02:55.006
And then the server was tested

61
00:02:55.006 --> 00:02:59.001
by creating a client through BloomRPC.

62
00:02:59.001 --> 00:03:02.002
There is one additional note that I would like to add here.

63
00:03:02.002 --> 00:03:05.006
We just tested the user service using BloomRPC Client.

64
00:03:05.006 --> 00:03:07.005
And the server of the user service

65
00:03:07.005 --> 00:03:09.005
was run through a main method.

66
00:03:09.005 --> 00:03:12.002
So you may think that you can actually start

67
00:03:12.002 --> 00:03:16.001
the user server using the Java minus jar command.

68
00:03:16.001 --> 00:03:17.003
Something like this.

69
00:03:17.003 --> 00:03:20.002
So let me come down and write the command here.

70
00:03:20.002 --> 00:03:23.000
So we can always execute the Java minus jar command

71
00:03:23.000 --> 00:03:26.007
and feed this command part of the jar file.

72
00:03:26.007 --> 00:03:28.006
This jar is basically this one,

73
00:03:28.006 --> 00:03:31.000
the shopping services 1.2 snapshot jar

74
00:03:31.000 --> 00:03:32.007
present in your target folder.

75
00:03:32.007 --> 00:03:34.005
So you may think that you can start

76
00:03:34.005 --> 00:03:36.003
the user server using this command,

77
00:03:36.003 --> 00:03:40.003
but please note it is not possible in the current setup.

78
00:03:40.003 --> 00:03:42.001
You would have to do a certain amount

79
00:03:42.001 --> 00:03:44.001
of things in order to achieve this.

80
00:03:44.001 --> 00:03:46.001
So what are those changes?

81
00:03:46.001 --> 00:03:50.004
Those changes are entirely in the POM XML file.

82
00:03:50.004 --> 00:03:55.002
The first thing is, you will have to add a plug-in

83
00:03:55.002 --> 00:03:59.009
in the Maven POM XML to create a fat jar.

84
00:03:59.009 --> 00:04:02.006
A fat jar will ensure that all the dependencies

85
00:04:02.006 --> 00:04:05.006
of the GRPC framework and any other dependencies

86
00:04:05.006 --> 00:04:06.004
that you may add.

87
00:04:06.004 --> 00:04:07.009
Like, for example, H2 database,

88
00:04:07.009 --> 00:04:09.003
the Protobuf Java users.

89
00:04:09.003 --> 00:04:12.007
Everything is included in the jar file.

90
00:04:12.007 --> 00:04:17.000
So that the jar can run as a standalone application.

91
00:04:17.000 --> 00:04:22.008
Secondly, you will have to add the main method class

92
00:04:22.008 --> 00:04:24.002
in the POM file.

93
00:04:24.002 --> 00:04:26.006
You will have to mention that user server is

94
00:04:26.006 --> 00:04:29.008
the class inside, which the mean method sits.

95
00:04:29.008 --> 00:04:31.008
Thirdly, you also have to ensure

96
00:04:31.008 --> 00:04:38.002
that you add the resources folder to your Java.

97
00:04:38.002 --> 00:04:40.001
Why do we need the resources folder?

98
00:04:40.001 --> 00:04:41.004
That is because we have

99
00:04:41.004 --> 00:04:45.001
that initialized SQL database script that we want to run

100
00:04:45.001 --> 00:04:46.003
as a part of this setup.

101
00:04:46.003 --> 00:04:49.005
If this file is not included in the jar

102
00:04:49.005 --> 00:04:51.001
then the database will not be created

103
00:04:51.001 --> 00:04:52.008
and the application will not run.

104
00:04:52.008 --> 00:04:55.006
So these are the changes that you need to do

105
00:04:55.006 --> 00:04:58.000
to POM XML in order to make sure

106
00:04:58.000 --> 00:05:01.005
that you're able to run the Java minus jar command.

107
00:05:01.005 --> 00:05:05.001
The second part to this entire explanation is

108
00:05:05.001 --> 00:05:07.009
that when we start building the order service

109
00:05:07.009 --> 00:05:10.009
all the classes of the order service will sit

110
00:05:10.009 --> 00:05:16.003
inside the same project, which is shopping services.

111
00:05:16.003 --> 00:05:20.001
When that happens the way you will have created user server,

112
00:05:20.001 --> 00:05:22.007
we will end up creating an order server.

113
00:05:22.007 --> 00:05:26.004
In that case, we will have two main methods.

114
00:05:26.004 --> 00:05:29.007
Each of these main methods will start servers

115
00:05:29.007 --> 00:05:31.009
on different ports.

116
00:05:31.009 --> 00:05:36.001
And if one project has two entry points for the main method

117
00:05:36.001 --> 00:05:40.002
your Java minus jar command setup is not going to work.

118
00:05:40.002 --> 00:05:42.002
Even if you do all the changes

119
00:05:42.002 --> 00:05:45.009
that I mentioned from line 59 to 61.

120
00:05:45.009 --> 00:05:48.002
In a typical industry project,

121
00:05:48.002 --> 00:05:50.007
the user and the order services

122
00:05:50.007 --> 00:05:54.004
always sit in different repositories.

123
00:05:54.004 --> 00:05:57.005
In that case, when you make these changes

124
00:05:57.005 --> 00:06:00.006
Java minus jar is good to run.

125
00:06:00.006 --> 00:06:04.000
But that's not going to be possible in the current setup.

126
00:06:04.000 --> 00:06:06.009
This is just so that you're aware of this

127
00:06:06.009 --> 00:06:10.003
and not try to run this using Java minus jar

128
00:06:10.003 --> 00:06:13.000
in the current setup of our course.

