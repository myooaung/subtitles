WEBVTT
1
00:00:00.006 --> 00:00:02.003
- [Instructor] The next step will be to invoke

2
00:00:02.003 --> 00:00:04.007
that order client that we just created

3
00:00:04.007 --> 00:00:07.004
in the user service implementation.

4
00:00:07.004 --> 00:00:09.006
So let's head back to the IDE.

5
00:00:09.006 --> 00:00:12.002
And in the UserServiceImpl class,

6
00:00:12.002 --> 00:00:15.001
let's put a comment here,

7
00:00:15.001 --> 00:00:18.008
that we are getting orders

8
00:00:18.008 --> 00:00:25.003
by invoking the order client.

9
00:00:25.003 --> 00:00:26.001
Okay.

10
00:00:26.001 --> 00:00:27.009
So what do we need to do for this?

11
00:00:27.009 --> 00:00:31.000
The first step is to create that channel.

12
00:00:31.000 --> 00:00:32.008
Let's establish an endpoint connection

13
00:00:32.008 --> 00:00:35.005
with the order service.

14
00:00:35.005 --> 00:00:40.008
That will be represented by an API called ManagedChannel.

15
00:00:40.008 --> 00:00:42.003
And how do we create this?

16
00:00:42.003 --> 00:00:45.004
There's a builder for it

17
00:00:45.004 --> 00:00:48.007
which has a method called forTarget on it.

18
00:00:48.007 --> 00:00:51.005
So we're creating an HTTP/2 connection

19
00:00:51.005 --> 00:00:53.003
for the order service,

20
00:00:53.003 --> 00:00:55.003
and the target URL for the order service,|

21
00:00:55.003 --> 00:00:56.007
we already know,

22
00:00:56.007 --> 00:01:01.009
is localhost 50052.

23
00:01:01.009 --> 00:01:05.008
So that is what we will feed to that forTarget method.

24
00:01:05.008 --> 00:01:07.000
In addition to this,

25
00:01:07.000 --> 00:01:09.004
let us just use a plain text

26
00:01:09.004 --> 00:01:10.007
for this channel.

27
00:01:10.007 --> 00:01:14.003
And then build this object.

28
00:01:14.003 --> 00:01:19.008
Once we do this, let's instantiate that order client.

29
00:01:19.008 --> 00:01:22.008
And that one takes the channel as an argument.

30
00:01:22.008 --> 00:01:24.004
So I'm just going to pass that channel object

31
00:01:24.004 --> 00:01:29.009
that we created on line 35, on line 37.

32
00:01:29.009 --> 00:01:30.009
So just to recap.

33
00:01:30.009 --> 00:01:32.005
If you go to the order client,

34
00:01:32.005 --> 00:01:35.005
the order client constructor takes channel,

35
00:01:35.005 --> 00:01:36.004
on line 17,

36
00:01:36.004 --> 00:01:37.007
as a parameter.

37
00:01:37.007 --> 00:01:38.009
And using that channel,

38
00:01:38.009 --> 00:01:42.000
it'll help us grab the stub object.

39
00:01:42.000 --> 00:01:45.001
So that is essentially how you tie that channel

40
00:01:45.001 --> 00:01:47.001
in order to get the stub.

41
00:01:47.001 --> 00:01:49.002
So the channel is instantiated

42
00:01:49.002 --> 00:01:53.004
at the place where you're invoking the client.

43
00:01:53.004 --> 00:01:55.008
Let's go back to the user service now.

44
00:01:55.008 --> 00:01:58.004
Once we do this, the last thing that we have to do is,

45
00:01:58.004 --> 00:02:00.003
call the service method from the client.

46
00:02:00.003 --> 00:02:02.003
So list of,

47
00:02:02.003 --> 00:02:05.005
this will be the order stubs that is the gRPC stub,

48
00:02:05.005 --> 00:02:07.002
this one.

49
00:02:07.002 --> 00:02:10.003
And we can say, orders,

50
00:02:10.003 --> 00:02:13.002
grab that client,

51
00:02:13.002 --> 00:02:16.001
and call the getOrders method.

52
00:02:16.001 --> 00:02:18.004
This will take a user ID as an argument,

53
00:02:18.004 --> 00:02:21.002
so that we can pick from the user response

54
00:02:21.002 --> 00:02:24.005
builder object from line 26.

55
00:02:24.005 --> 00:02:25.009
It's already present there.

56
00:02:25.009 --> 00:02:28.003
So I'm just going to take that same variable.

57
00:02:28.003 --> 00:02:29.009
And say getId.

58
00:02:29.009 --> 00:02:32.006
There we go.

59
00:02:32.006 --> 00:02:34.009
That is all, so you created a channel.

60
00:02:34.009 --> 00:02:36.006
You fed that to the client

61
00:02:36.006 --> 00:02:38.003
which will get you the stub.

62
00:02:38.003 --> 00:02:40.007
And then the client is going to call the service

63
00:02:40.007 --> 00:02:42.007
by using that stub.

64
00:02:42.007 --> 00:02:46.003
There is one additional thing that we need to do here.

65
00:02:46.003 --> 00:02:47.002
What we'll do is,

66
00:02:47.002 --> 00:02:49.005
we will extract the number of orders

67
00:02:49.005 --> 00:02:52.001
from that list on line 38.

68
00:02:52.001 --> 00:02:57.002
And put that as an extra parameter inside the user response.

69
00:02:57.002 --> 00:03:00.000
But the user response we know is a proto object,

70
00:03:00.000 --> 00:03:02.006
which means if you want to add a new field,

71
00:03:02.006 --> 00:03:06.002
you will have to change the user proto file.

72
00:03:06.002 --> 00:03:07.008
So let's do that.

73
00:03:07.008 --> 00:03:09.009
Let's open the user proto.

74
00:03:09.009 --> 00:03:11.005
And under this message,

75
00:03:11.005 --> 00:03:13.008
UserResponse that we have on line 14,

76
00:03:13.008 --> 00:03:15.004
I will add one more field,

77
00:03:15.004 --> 00:03:17.009
which is a simple int field

78
00:03:17.009 --> 00:03:22.000
for number of orders.

79
00:03:22.000 --> 00:03:24.002
Let's tag it with six.

80
00:03:24.002 --> 00:03:27.006
And now I have to build this project again,

81
00:03:27.006 --> 00:03:30.005
so that the changes that I did to the user proto file

82
00:03:30.005 --> 00:03:32.009
get reflected in the generated stubs.

83
00:03:32.009 --> 00:03:35.000
So basically we are regenerating stubs.

84
00:03:35.000 --> 00:03:38.000
So let's go ahead and click on the Clean and Install

85
00:03:38.000 --> 00:03:39.007
goals of Maven.

86
00:03:39.007 --> 00:03:40.008
This should take a while,

87
00:03:40.008 --> 00:03:42.006
but when it builds completely,

88
00:03:42.006 --> 00:03:45.006
then we should be able to get the new field

89
00:03:45.006 --> 00:03:47.008
in the user response,

90
00:03:47.008 --> 00:03:51.002
which is called number of orders.

91
00:03:51.002 --> 00:03:52.000
Okay.

92
00:03:52.000 --> 00:03:54.003
So the build was a success.

93
00:03:54.003 --> 00:03:56.007
Let's go back to UserServiceImpl.

94
00:03:56.007 --> 00:03:59.003
Let's minimize this Maven tab.

95
00:03:59.003 --> 00:04:04.002
And now what we're going to do is,

96
00:04:04.002 --> 00:04:08.005
we're just going to grab that user response builder

97
00:04:08.005 --> 00:04:10.002
and set the number of orders.

98
00:04:10.002 --> 00:04:12.007
So now we have this method,

99
00:04:12.007 --> 00:04:14.004
set number of orders available,

100
00:04:14.004 --> 00:04:16.004
because we just regenerated stubs.

101
00:04:16.004 --> 00:04:18.004
Please do not forget to regenerate stubs.

102
00:04:18.004 --> 00:04:21.005
Otherwise you wouldn't be able to see this new method.

103
00:04:21.005 --> 00:04:24.009
So the number of orders will be just grab the orders object

104
00:04:24.009 --> 00:04:26.007
on line 38,

105
00:04:26.007 --> 00:04:28.002
and invoke the size.

106
00:04:28.002 --> 00:04:29.008
That is all.

107
00:04:29.008 --> 00:04:34.000
So what we did is we extracted the list, orders,

108
00:04:34.000 --> 00:04:36.000
and we got the size of those orders.

109
00:04:36.000 --> 00:04:38.009
And we embedded that into the user response.

110
00:04:38.009 --> 00:04:42.000
Now this is just for the convenience of this course,

111
00:04:42.000 --> 00:04:43.005
convenience of this demo.

112
00:04:43.005 --> 00:04:45.007
You can, however, grab any other data

113
00:04:45.007 --> 00:04:49.005
from the orders objects and put it in the user response.

114
00:04:49.005 --> 00:04:53.000
This will completely depend on what your requirements are.

115
00:04:53.000 --> 00:04:55.006
The last thing that we have to do here is,

116
00:04:55.006 --> 00:04:57.009
which is quite important,

117
00:04:57.009 --> 00:05:01.007
the managed channel object that we created on line 35,

118
00:05:01.007 --> 00:05:03.002
that is a resource.

119
00:05:03.002 --> 00:05:06.000
And it, additionally uses resources like threads,

120
00:05:06.000 --> 00:05:08.001
TCP connections, et cetera.

121
00:05:08.001 --> 00:05:09.002
So,

122
00:05:09.002 --> 00:05:11.006
if you want to make multiple calls

123
00:05:11.006 --> 00:05:14.000
after you did that call on line 38,

124
00:05:14.000 --> 00:05:16.005
then you can keep that channel open.

125
00:05:16.005 --> 00:05:19.009
However, if you do not have multiple calls being made,

126
00:05:19.009 --> 00:05:21.009
then it will be your responsibility

127
00:05:21.009 --> 00:05:24.004
to shut that channel completely.

128
00:05:24.004 --> 00:05:27.004
This is cleanup that we have to do in order to make sure

129
00:05:27.004 --> 00:05:30.001
that these resources are not leaked out.

130
00:05:30.001 --> 00:05:31.002
So let's do that.

131
00:05:31.002 --> 00:05:33.008
We just have to grab that channel variable

132
00:05:33.008 --> 00:05:36.008
that we created on line 35,

133
00:05:36.008 --> 00:05:39.002
and call the shutdown method.

134
00:05:39.002 --> 00:05:40.005
And this is pretty much going to follow

135
00:05:40.005 --> 00:05:42.007
the same cycle that we have.

136
00:05:42.007 --> 00:05:45.001
We shut down so that no calls are accepted

137
00:05:45.001 --> 00:05:49.002
and await termination for maybe five seconds,

138
00:05:49.002 --> 00:05:52.003
and then shut it.

139
00:05:52.003 --> 00:05:53.004
This will, of course,

140
00:05:53.004 --> 00:05:57.003
ask you to do the handling via a try/catch.

141
00:05:57.003 --> 00:05:59.006
So we added the try/catch block.

142
00:05:59.006 --> 00:06:01.001
And I'm not too happy

143
00:06:01.001 --> 00:06:04.008
with the printStackTrace line on line number 43.

144
00:06:04.008 --> 00:06:08.000
So I go right at the top,

145
00:06:08.000 --> 00:06:09.006
and add a logger.

146
00:06:09.006 --> 00:06:11.002
We have a logger on line 21.

147
00:06:11.002 --> 00:06:14.004
So we'll just grab that logger.

148
00:06:14.004 --> 00:06:18.003
And log the exception using the logger,

149
00:06:18.003 --> 00:06:20.001
on line 43.

150
00:06:20.001 --> 00:06:25.007
So let's say, logger.log,

151
00:06:25.007 --> 00:06:28.008
level will be severe.

152
00:06:28.008 --> 00:06:34.003
Exceptions, so say channel did not shut down,

153
00:06:34.003 --> 00:06:37.003
and feed the exception object.

154
00:06:37.003 --> 00:06:39.003
So log the exception properly.

155
00:06:39.003 --> 00:06:41.007
And then we're done.

156
00:06:41.007 --> 00:06:43.008
So remember, you will have to do this,

157
00:06:43.008 --> 00:06:45.006
lines 40 to 44.

158
00:06:45.006 --> 00:06:47.004
This code is essential when you know that

159
00:06:47.004 --> 00:06:48.008
you have normal calls to do

160
00:06:48.008 --> 00:06:50.005
which is why you need to shut down the channel.

161
00:06:50.005 --> 00:06:54.001
However, I iterate that if you have multiple calls

162
00:06:54.001 --> 00:06:55.002
that you want to do,

163
00:06:55.002 --> 00:06:58.002
then you can keep that channel open.

164
00:06:58.002 --> 00:07:00.009
The last bit in this is,

165
00:07:00.009 --> 00:07:02.007
we will just go ahead

166
00:07:02.007 --> 00:07:07.000
and take lines 34 to 44,

167
00:07:07.000 --> 00:07:09.005
and extract this into another method

168
00:07:09.005 --> 00:07:11.004
so that the code looks a little cleaner.

169
00:07:11.004 --> 00:07:15.004
So refactor and extract method.

170
00:07:15.004 --> 00:07:17.002
There we go.

171
00:07:17.002 --> 00:07:19.000
So now we have the get orders method

172
00:07:19.000 --> 00:07:23.000
that was extracted from line 43 to 57.

173
00:07:23.000 --> 00:07:24.004
That takes a channel,

174
00:07:24.004 --> 00:07:25.009
instantiate the client,

175
00:07:25.009 --> 00:07:27.001
calls the service,

176
00:07:27.001 --> 00:07:29.000
and gets us the list of orders.

177
00:07:29.000 --> 00:07:33.000
We come back on line 34 after the call gets completed

178
00:07:33.000 --> 00:07:34.005
and the number of orders

179
00:07:34.005 --> 00:07:37.008
will be set to the user response object.

180
00:07:37.008 --> 00:07:40.005
After that the user response will be finally built

181
00:07:40.005 --> 00:07:44.000
and sent back to the client to complete the RPC call.

