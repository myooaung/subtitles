WEBVTT
1
00:00:00.007 --> 00:00:02.001
- [Instructor] Let us do a recap

2
00:00:02.001 --> 00:00:04.007
of inter-service communication.

3
00:00:04.007 --> 00:00:07.008
Modern software applications no longer reside

4
00:00:07.008 --> 00:00:09.005
in a monolith today.

5
00:00:09.005 --> 00:00:12.003
This big block of code, which is the monolith,

6
00:00:12.003 --> 00:00:14.003
is divided into smaller units,

7
00:00:14.003 --> 00:00:17.002
which are independent and autonomous.

8
00:00:17.002 --> 00:00:19.005
They can be efficiently maintained

9
00:00:19.005 --> 00:00:21.009
and they are highly scalable.

10
00:00:21.009 --> 00:00:25.002
Let us take a look at a typical micro-services system.

11
00:00:25.002 --> 00:00:29.003
A user service, an order service, and a payment service.

12
00:00:29.003 --> 00:00:32.001
These three services manage the shopping orders

13
00:00:32.001 --> 00:00:33.008
for their customers.

14
00:00:33.008 --> 00:00:37.002
When a request comes into the system via a client,

15
00:00:37.002 --> 00:00:40.007
let's say a web browser or a mobile app,

16
00:00:40.007 --> 00:00:43.008
the entire process starts with user service.

17
00:00:43.008 --> 00:00:45.004
The user can log in

18
00:00:45.004 --> 00:00:49.002
and then can either retrieve orders or create new orders.

19
00:00:49.002 --> 00:00:53.003
For this, the user service will talk to the order service.

20
00:00:53.003 --> 00:00:55.004
When an order needs to be checked out,

21
00:00:55.004 --> 00:00:58.001
the order service will talk to the payment service

22
00:00:58.001 --> 00:01:01.002
to facilitate the payment of the checkout.

23
00:01:01.002 --> 00:01:03.008
The payment service can then in turn talk

24
00:01:03.008 --> 00:01:05.001
to the user service

25
00:01:05.001 --> 00:01:08.000
to retrieve any user specific information

26
00:01:08.000 --> 00:01:10.001
to complete the payment.

27
00:01:10.001 --> 00:01:11.009
These three services can talk

28
00:01:11.009 --> 00:01:14.005
to a data store, like a database,

29
00:01:14.005 --> 00:01:18.001
or can even communicate with an external service

30
00:01:18.001 --> 00:01:20.004
for any other cross-cutting concern

31
00:01:20.004 --> 00:01:23.000
that the entire system requires.

32
00:01:23.000 --> 00:01:26.006
So essentially, these three services will collaborate

33
00:01:26.006 --> 00:01:30.007
with each other by passing messages between them.

34
00:01:30.007 --> 00:01:32.005
These messages can be passed

35
00:01:32.005 --> 00:01:36.004
in a synchronous or in an asynchronous fashion.

36
00:01:36.004 --> 00:01:39.009
Asynchronous message passing is when you place messages

37
00:01:39.009 --> 00:01:43.007
in logical cues so that the services can pick them up

38
00:01:43.007 --> 00:01:45.007
in the background and carry on

39
00:01:45.007 --> 00:01:47.007
with their further processing.

40
00:01:47.007 --> 00:01:50.005
Let us see how the inter-service communication

41
00:01:50.005 --> 00:01:53.008
has evolved over the last few years.

42
00:01:53.008 --> 00:01:58.001
We started with RPC, Remote Procedural Call.

43
00:01:58.001 --> 00:02:00.009
In this, the client invokes a procedure

44
00:02:00.009 --> 00:02:04.006
on the server site in a different address space.

45
00:02:04.006 --> 00:02:08.009
As if the client was trying to call the function locally.

46
00:02:08.009 --> 00:02:09.008
RPC

47
00:02:09.008 --> 00:02:11.009
uses TCP protocol

48
00:02:11.009 --> 00:02:14.007
which hinders inter operability.

49
00:02:14.007 --> 00:02:18.007
RPCs are overwhelmingly complex to implement.

50
00:02:18.007 --> 00:02:21.008
It induces a certain amount of vulnerability

51
00:02:21.008 --> 00:02:23.003
because you're trying to connect

52
00:02:23.003 --> 00:02:26.005
to a different system in a different address space.

53
00:02:26.005 --> 00:02:29.009
And hence also incurs a lot of costs.

54
00:02:29.009 --> 00:02:32.001
Popular implementations of RPC

55
00:02:32.001 --> 00:02:35.005
are Java RMI, CORBA, etcetera.

56
00:02:35.005 --> 00:02:37.008
Owing to limitations of RPC,

57
00:02:37.008 --> 00:02:40.008
we switched to a new standard, SOAP,

58
00:02:40.008 --> 00:02:43.007
Simple Object Access Protocol.

59
00:02:43.007 --> 00:02:46.009
This specification was designed and promoted

60
00:02:46.009 --> 00:02:49.002
by a number of big enterprises.

61
00:02:49.002 --> 00:02:52.006
SOAP is based on the services oriented architecture,

62
00:02:52.006 --> 00:02:55.001
or as we say, the SOA principle.

63
00:02:55.001 --> 00:02:56.002
In this,

64
00:02:56.002 --> 00:03:00.006
the client and the server exchange data in the form of XML.

65
00:03:00.006 --> 00:03:04.003
And since it is XML, it can be implemented across platforms

66
00:03:04.003 --> 00:03:08.004
and systems, which are completely different from each other.

67
00:03:08.004 --> 00:03:13.000
SOAP works over both DCP and HTTP protocol.

68
00:03:13.000 --> 00:03:16.004
SOAP is prevalent in a lot of legacy services today

69
00:03:16.004 --> 00:03:18.004
because there are a few limitations.

70
00:03:18.004 --> 00:03:20.009
XML is difficult to deal with.

71
00:03:20.009 --> 00:03:22.006
It has a strict set of rules

72
00:03:22.006 --> 00:03:24.009
that you need to know to work with it.

73
00:03:24.009 --> 00:03:28.004
Which means even the smallest string message transmitted

74
00:03:28.004 --> 00:03:32.005
between the client and the server amounts to a heavy payload

75
00:03:32.005 --> 00:03:36.000
which eventually leads to performance issues.

76
00:03:36.000 --> 00:03:38.008
Agility of distributed applications are a problem

77
00:03:38.008 --> 00:03:41.007
to implement with the SOAP specification.

78
00:03:41.007 --> 00:03:44.004
Hence, we moved on to REST.

79
00:03:44.004 --> 00:03:47.003
REST is a specification in which you define

80
00:03:47.003 --> 00:03:48.006
the methods of a service.

81
00:03:48.006 --> 00:03:52.003
And a service then is a bunch of resources,

82
00:03:52.003 --> 00:03:55.009
each with a unique identifier, URL.

83
00:03:55.009 --> 00:03:59.003
REST works only with HTTP protocol.

84
00:03:59.003 --> 00:04:01.004
REST is the de facto standard

85
00:04:01.004 --> 00:04:04.004
for implementing microservices today.

86
00:04:04.004 --> 00:04:08.008
However, it also comes in with a few limitations.

87
00:04:08.008 --> 00:04:12.007
Firstly, REST has text-based message calls.

88
00:04:12.007 --> 00:04:16.005
The client always produces data in a binary format.

89
00:04:16.005 --> 00:04:18.005
It has to be converted to text

90
00:04:18.005 --> 00:04:21.009
to get transmitted over the HTTP protocol.

91
00:04:21.009 --> 00:04:24.007
That is because HTTP understands only text.

92
00:04:24.007 --> 00:04:27.004
When the response is received on the server side,

93
00:04:27.004 --> 00:04:30.002
the server has to convert that message

94
00:04:30.002 --> 00:04:32.008
from text again to binary.

95
00:04:32.008 --> 00:04:36.000
So this conversion from binary to text

96
00:04:36.000 --> 00:04:39.008
and text to binary amounts to performance overhead.

97
00:04:39.008 --> 00:04:42.002
REST only exposes CRUD,

98
00:04:42.002 --> 00:04:45.003
or CRUD behaviors, create, read,

99
00:04:45.003 --> 00:04:47.003
update, delete.

100
00:04:47.003 --> 00:04:50.009
And these behaviors has got a set name of methods

101
00:04:50.009 --> 00:04:53.008
that you need to define in your service

102
00:04:53.008 --> 00:04:57.004
The names of those methods are, get ghost, put

103
00:04:57.004 --> 00:04:59.007
delete, patch, etcetera.

104
00:04:59.007 --> 00:05:00.009
Which means if you need

105
00:05:00.009 --> 00:05:03.006
to give a custom name to your method,

106
00:05:03.006 --> 00:05:06.006
you will always have to work around these set names

107
00:05:06.006 --> 00:05:09.002
in order to expose your specific API.

108
00:05:09.002 --> 00:05:12.006
This becomes a little cumbersome in the long run.

109
00:05:12.006 --> 00:05:15.008
REST does not define strict interface types.

110
00:05:15.008 --> 00:05:19.006
Even when you have open API or swagger specifications,

111
00:05:19.006 --> 00:05:23.001
it is not tightly bound with the underlying architecture

112
00:05:23.001 --> 00:05:25.001
or the message in protocol.

113
00:05:25.001 --> 00:05:27.005
The service and the type definitions

114
00:05:27.005 --> 00:05:30.002
are sometimes not even written completely before

115
00:05:30.002 --> 00:05:32.006
the implementation gets started.

116
00:05:32.006 --> 00:05:36.001
At times, the developers even just look over the wire

117
00:05:36.001 --> 00:05:40.000
for the data format and code the functionality accordingly.

118
00:05:40.000 --> 00:05:44.002
This results in incompatibility, inconsistency

119
00:05:44.002 --> 00:05:47.006
and a lot of runtime problems when the calls are made.

120
00:05:47.006 --> 00:05:49.000
So then what do you do

121
00:05:49.000 --> 00:05:51.009
in order to overcome these limitations of REST?

122
00:05:51.009 --> 00:05:55.002
The answer to that question is,

123
00:05:55.002 --> 00:05:57.000
let's switch to the gRPC framework.

