WEBVTT
1
00:00:00.007 --> 00:00:01.005
- [Instructor] Now that we have

2
00:00:01.005 --> 00:00:03.006
the database connection code set up

3
00:00:03.006 --> 00:00:05.008
the database script is ready with us

4
00:00:05.008 --> 00:00:08.000
and all that initial set up is done,

5
00:00:08.000 --> 00:00:11.008
the next step will be to add a data access object class

6
00:00:11.008 --> 00:00:13.005
for the user table.

7
00:00:13.005 --> 00:00:17.003
So we're going to add a class which queries the user table,

8
00:00:17.003 --> 00:00:20.008
gets the details of the user for us throughout the database.

9
00:00:20.008 --> 00:00:26.004
So let's go back to the IDE and add a class here,

10
00:00:26.004 --> 00:00:33.002
let's called that UserDao, which is data access object.

11
00:00:33.002 --> 00:00:37.007
And the data that we're going to query from the database

12
00:00:37.007 --> 00:00:40.007
should sit in some domain object.

13
00:00:40.007 --> 00:00:42.006
So let us create a domain object for that.

14
00:00:42.006 --> 00:00:45.003
I will go on the same package,

15
00:00:45.003 --> 00:00:49.006
create another class called let's say just the User.

16
00:00:49.006 --> 00:00:51.008
So this user class will have few fields,

17
00:00:51.008 --> 00:00:55.007
which correspond to the columns of the user table.

18
00:00:55.007 --> 00:00:57.003
So let's call those quickly.

19
00:00:57.003 --> 00:01:03.008
There will be an ID, there will be a String_username.

20
00:01:03.008 --> 00:01:08.007
They will be another String_name,

21
00:01:08.007 --> 00:01:11.006
another one for age which is integer

22
00:01:11.006 --> 00:01:16.008
and then let's take a String for gender.

23
00:01:16.008 --> 00:01:21.006
Let's also generate the get set us for this,

24
00:01:21.006 --> 00:01:24.009
select all fields and say, OK.

25
00:01:24.009 --> 00:01:26.004
So we have a symbol domain object

26
00:01:26.004 --> 00:01:29.002
which is going to hold all the content

27
00:01:29.002 --> 00:01:32.004
from the database table that we will query.

28
00:01:32.004 --> 00:01:34.003
So let's go back to the UserDao

29
00:01:34.003 --> 00:01:38.005
and here let's first create a logger

30
00:01:38.005 --> 00:01:41.002
in case we need to log anything.

31
00:01:41.002 --> 00:01:52.004
So you want to use Java.user.Logger,

32
00:01:52.004 --> 00:01:54.003
and you just have to provide the name of the class.

33
00:01:54.003 --> 00:02:01.005
So until you UserDao.class.getName.

34
00:02:01.005 --> 00:02:03.007
Log instance is ready with us.

35
00:02:03.007 --> 00:02:07.009
Let's now go ahead and add a method

36
00:02:07.009 --> 00:02:09.002
which will look something like this,

37
00:02:09.002 --> 00:02:13.003
public it should return a User domain object

38
00:02:13.003 --> 00:02:17.002
and let's call the method as getDetails.

39
00:02:17.002 --> 00:02:20.004
The input for this method will be a string

40
00:02:20.004 --> 00:02:21.007
which is a username.

41
00:02:21.007 --> 00:02:25.004
So this is the method where you could write JDBC code

42
00:02:25.004 --> 00:02:27.006
to query the user table,

43
00:02:27.006 --> 00:02:31.006
to get the user details corresponding to a user name.

44
00:02:31.006 --> 00:02:32.004
Let's go ahead

45
00:02:32.004 --> 00:02:35.007
and create an instance of the domain object first

46
00:02:35.007 --> 00:02:39.001
so that it will be ready for us to fill in with the data

47
00:02:39.001 --> 00:02:42.007
that's coming from the database table.

48
00:02:42.007 --> 00:02:45.001
The next thing will be let's put a try-catch block

49
00:02:45.001 --> 00:02:48.002
which is dealing with the database code now.

50
00:02:48.002 --> 00:02:52.008
The first step is to get a connection.

51
00:02:52.008 --> 00:02:57.000
So I'm simply going to use the H2DatabaseConnection class

52
00:02:57.000 --> 00:03:00.006
and just call the getConnection database method.

53
00:03:00.006 --> 00:03:01.005
That is all.

54
00:03:01.005 --> 00:03:04.004
So this method will get us the connection object.

55
00:03:04.004 --> 00:03:07.008
And when the H2DatabaseConnection class gets loaded,

56
00:03:07.008 --> 00:03:09.005
our script will run as well

57
00:03:09.005 --> 00:03:11.007
which will set up the database for us.

58
00:03:11.007 --> 00:03:13.002
So we are good.

59
00:03:13.002 --> 00:03:18.006
The next line will be to get a prepareStatement

60
00:03:18.006 --> 00:03:21.002
on the connection object

61
00:03:21.002 --> 00:03:22.009
by the method prepareStatement

62
00:03:22.009 --> 00:03:24.002
and let's write the query.

63
00:03:24.002 --> 00:03:29.002
Simple query "select * from user,

64
00:03:29.002 --> 00:03:33.002
that's the name of the table.

65
00:03:33.002 --> 00:03:35.006
Let me just stick this on the next line

66
00:03:35.006 --> 00:03:39.000
so that it is easy for us to view

67
00:03:39.000 --> 00:03:42.003
and we'll save a username =?"

68
00:03:42.003 --> 00:03:43.009
So this is a dynamic parameter

69
00:03:43.009 --> 00:03:46.002
that we're going to pass during runway

70
00:03:46.002 --> 00:03:49.008
and that's exactly why we are taking a prepareStatement.

71
00:03:49.008 --> 00:03:53.004
Next is let's make sure that the username value

72
00:03:53.004 --> 00:03:56.001
is set correctly on the prepareStatement.

73
00:03:56.001 --> 00:04:00.000
So I'm going to say prepareStatement.setString

74
00:04:00.000 --> 00:04:02.009
since it is a string type of a parameter

75
00:04:02.009 --> 00:04:06.009
and parameter indexes generally start with one

76
00:04:06.009 --> 00:04:08.007
and the value will be the one

77
00:04:08.007 --> 00:04:12.001
that's coming from the method parameter.

78
00:04:12.001 --> 00:04:14.003
This is the same value that we are grabbing

79
00:04:14.003 --> 00:04:18.007
from the method signature on line number 10.

80
00:04:18.007 --> 00:04:21.004
And now if you see you have got certain errors

81
00:04:21.004 --> 00:04:24.009
because the demand that you create a catch class for them.

82
00:04:24.009 --> 00:04:29.007
So I'm going to just add the catch class quickly

83
00:04:29.007 --> 00:04:33.005
and instead of doing a princeStackTrace, let's log it.

84
00:04:33.005 --> 00:04:35.008
So we're going to use that logger

85
00:04:35.008 --> 00:04:43.007
and say log, this is SEVERE Level,

86
00:04:43.007 --> 00:04:46.003
so you could not execute query.

87
00:04:46.003 --> 00:04:47.007
This is a message of your choice.

88
00:04:47.007 --> 00:04:50.004
I'm just trying to make it simple right now.

89
00:04:50.004 --> 00:04:51.004
There it is.

90
00:04:51.004 --> 00:04:56.003
So we have the prepareStatement that has a parameter

91
00:04:56.003 --> 00:04:58.001
that's username that is set on it.

92
00:04:58.001 --> 00:05:04.004
And then we need the ResultSet object

93
00:05:04.004 --> 00:05:07.005
Which is going to hold the output

94
00:05:07.005 --> 00:05:11.007
of the execute query method.

95
00:05:11.007 --> 00:05:13.006
So the prepareStatement will execute the query

96
00:05:13.006 --> 00:05:16.005
that we have written here on line 19,

97
00:05:16.005 --> 00:05:18.006
and it'll give us the ResultSet.

98
00:05:18.006 --> 00:05:23.008
We'll quickly iterate through that ResultSet

99
00:05:23.008 --> 00:05:27.007
and fill in all the information on the user domain object.

100
00:05:27.007 --> 00:05:31.000
So we'll just say set Id,

101
00:05:31.000 --> 00:05:35.005
and that will come from the resultsSet parameter of Int

102
00:05:35.005 --> 00:05:37.009
and that column is id.

103
00:05:37.009 --> 00:05:42.006
Similarly, we'll do the rest of the fields as well.

104
00:05:42.006 --> 00:05:47.004
ResultSet.getString because the column username in the table

105
00:05:47.004 --> 00:05:51.001
is a string type.

106
00:05:51.001 --> 00:05:57.000
Let's also do the same thing for the name field

107
00:05:57.000 --> 00:05:59.000
that will be gotten from the column,

108
00:05:59.000 --> 00:06:00.009
which is a string type again

109
00:06:00.009 --> 00:06:05.008
and that column is name.

110
00:06:05.008 --> 00:06:11.003
Let's do that for the Age field.

111
00:06:11.003 --> 00:06:17.004
Now age is Int in the database and the column name is 'age"

112
00:06:17.004 --> 00:06:21.003
and lastly, we have the gender.

113
00:06:21.003 --> 00:06:26.001
You can say resultSet.getString

114
00:06:26.001 --> 00:06:30.000
because gender is still a string in the database column.

115
00:06:30.000 --> 00:06:32.009
So there we are.

116
00:06:32.009 --> 00:06:41.005
We need coats for it.

117
00:06:41.005 --> 00:06:42.007
So we have basically queried

118
00:06:42.007 --> 00:06:45.007
the database table user on line 19,

119
00:06:45.007 --> 00:06:47.007
we have made use of a prepared statement.

120
00:06:47.007 --> 00:06:50.008
This is the conventional code that we use in JDBC

121
00:06:50.008 --> 00:06:53.009
to create a statement and to execute a query.

122
00:06:53.009 --> 00:06:55.007
So once that prepared statement is ready,

123
00:06:55.007 --> 00:06:58.008
we set a parameter to it dynamically on line 20,

124
00:06:58.008 --> 00:07:00.007
and we execute the query,

125
00:07:00.007 --> 00:07:02.006
that query will return as a resultSet.

126
00:07:02.006 --> 00:07:04.006
We are iterating through the resultSet,

127
00:07:04.006 --> 00:07:08.003
we are fetching each value of the respective column

128
00:07:08.003 --> 00:07:11.003
and setting it to the user domain object.

129
00:07:11.003 --> 00:07:12.004
Once all of this is done,

130
00:07:12.004 --> 00:07:15.007
let's come right at the end on line 32

131
00:07:15.007 --> 00:07:22.001
and just let's return this user domain object.

132
00:07:22.001 --> 00:07:23.005
That is all.

133
00:07:23.005 --> 00:07:27.009
So UserDao class was primarily to query the user table,

134
00:07:27.009 --> 00:07:31.000
fill in data in an object and make it ready

135
00:07:31.000 --> 00:07:34.003
so that it can be used by the subsequent service class

136
00:07:34.003 --> 00:07:37.000
that we will implement next.

