WEBVTT
1
00:00:00.006 --> 00:00:02.002
- [Instructor] The last bit of this demo

2
00:00:02.002 --> 00:00:04.003
will be to test the entire flow.

3
00:00:04.003 --> 00:00:07.007
So we will start the user and the order servers

4
00:00:07.007 --> 00:00:10.005
on ports five, zero, zero, five, one,

5
00:00:10.005 --> 00:00:13.005
and five, zero, zero, five two respectively.

6
00:00:13.005 --> 00:00:16.003
Thereafter, we will call the user service

7
00:00:16.003 --> 00:00:18.007
using the BloomRPC client.

8
00:00:18.007 --> 00:00:20.009
And when the user service gets invoked,

9
00:00:20.009 --> 00:00:23.005
it'll internally call the order service

10
00:00:23.005 --> 00:00:26.007
through that order client that we created.

11
00:00:26.007 --> 00:00:30.003
Once the call gets completed, then the user response

12
00:00:30.003 --> 00:00:34.002
should show us that additional field of number of orders,

13
00:00:34.002 --> 00:00:36.009
along with the other user details.

14
00:00:36.009 --> 00:00:38.005
Before we do that,

15
00:00:38.005 --> 00:00:42.005
let's add few log statements in all our classes

16
00:00:42.005 --> 00:00:47.000
so we can trace the flow of the request and the response.

17
00:00:47.000 --> 00:00:48.002
So to begin with,

18
00:00:48.002 --> 00:00:51.000
we are already in the UserServiceImpl class.

19
00:00:51.000 --> 00:00:55.000
So let's go down and the extracted method

20
00:00:55.000 --> 00:00:58.006
that we have out of the refactoring that we did.

21
00:00:58.006 --> 00:01:01.006
Inside that let us add one log statement.

22
00:01:01.006 --> 00:01:03.009
We'll say log.info.

23
00:01:03.009 --> 00:01:06.000
And what are we trying to do here?

24
00:01:06.000 --> 00:01:14.005
Creating a channel and calling the order client.

25
00:01:14.005 --> 00:01:15.008
So one log statement here,

26
00:01:15.008 --> 00:01:19.003
which will give us that information.

27
00:01:19.003 --> 00:01:24.007
Next is we need to do logging on the OrderServiceImpl.

28
00:01:24.007 --> 00:01:29.003
So let's go there and let's first grab the logger variable.

29
00:01:29.003 --> 00:01:30.007
We don't have that in the class.

30
00:01:30.007 --> 00:01:41.000
So on line 15, I'll just add the logger,

31
00:01:41.000 --> 00:01:42.002
and this is the same thing.

32
00:01:42.002 --> 00:01:50.000
So OrderServiceImpl.class.getName.

33
00:01:50.000 --> 00:01:53.007
So we have the logger and let's come down inside the method.

34
00:01:53.007 --> 00:01:58.008
And on line 22, I will add a log statement.

35
00:01:58.008 --> 00:02:03.002
So I'll say logger.log.

36
00:02:03.002 --> 00:02:08.009
Let's not say log, we'll call it info.

37
00:02:08.009 --> 00:02:15.003
A short message saying, got orders from Order Dao

38
00:02:15.003 --> 00:02:22.004
and converting to

39
00:02:22.004 --> 00:02:28.002
OrderResponse proto objects.

40
00:02:28.002 --> 00:02:30.007
So one information message there.

41
00:02:30.007 --> 00:02:35.001
Let's then come to the order client

42
00:02:35.001 --> 00:02:37.004
and let's grab the logger here too.

43
00:02:37.004 --> 00:02:45.008
So I'll say private logger

44
00:02:45.008 --> 00:02:48.001
logger.getlogger,

45
00:02:48.001 --> 00:02:54.000
and this will be OrderClient.class.getName.

46
00:02:54.000 --> 00:02:55.009
So we have a logger ready.

47
00:02:55.009 --> 00:03:00.004
Let's come inside the get orders method on line 23,

48
00:03:00.004 --> 00:03:03.006
and online 24 I'll add a log statement.

49
00:03:03.006 --> 00:03:06.006
So I'll say logger.log, sorry

50
00:03:06.006 --> 00:03:12.000
that will be logger.info, and short message,

51
00:03:12.000 --> 00:03:20.004
Order client calling the Order Service method.

52
00:03:20.004 --> 00:03:22.004
These messages, the framing of them,

53
00:03:22.004 --> 00:03:25.002
everything is totally your choice.

54
00:03:25.002 --> 00:03:29.003
Absolutely no restriction there.

55
00:03:29.003 --> 00:03:32.009
Right, so we have a logger in the order client.

56
00:03:32.009 --> 00:03:34.009
Let's double check we have a logger

57
00:03:34.009 --> 00:03:38.006
in the userServiceImpl, line 45.

58
00:03:38.006 --> 00:03:44.008
We have another logger on the OrderServiceImpl on line 22.

59
00:03:44.008 --> 00:03:46.005
So we are set.

60
00:03:46.005 --> 00:03:50.001
So let's go ahead and start both the servers now.

61
00:03:50.001 --> 00:03:53.006
Start the user servers first.

62
00:03:53.006 --> 00:03:57.005
So the server started on five, zero, zero, five, one.

63
00:03:57.005 --> 00:04:01.009
Let's go to the order server and start this as well.

64
00:04:01.009 --> 00:04:04.006
Yeah, so the order server also got started

65
00:04:04.006 --> 00:04:06.006
on five, zero, zero, five, two.

66
00:04:06.006 --> 00:04:10.002
Let's come back to the BloomRPC client that we have

67
00:04:10.002 --> 00:04:14.002
and click on the getUserDetails

68
00:04:14.002 --> 00:04:17.007
because we are going to invoke the user service.

69
00:04:17.007 --> 00:04:24.003
And let's input our username and let's see the output.

70
00:04:24.003 --> 00:04:25.001
There we go.

71
00:04:25.001 --> 00:04:26.009
We have the number of orders field

72
00:04:26.009 --> 00:04:31.008
that has now come in along with the other user details.

73
00:04:31.008 --> 00:04:33.003
Let's go back to the IDE

74
00:04:33.003 --> 00:04:38.002
and trace everything starting from the user server.

75
00:04:38.002 --> 00:04:41.000
So here we have the server was started

76
00:04:41.000 --> 00:04:43.000
on five, zero, zero, five, one.

77
00:04:43.000 --> 00:04:45.007
The H2DatabaseConnection class was called

78
00:04:45.007 --> 00:04:47.006
and we got a connection.

79
00:04:47.006 --> 00:04:51.005
And then we have this creating a channel

80
00:04:51.005 --> 00:04:53.005
and calling the order client.

81
00:04:53.005 --> 00:04:55.004
So basically the user server invoked

82
00:04:55.004 --> 00:04:59.001
the user service Impl, which is this.

83
00:04:59.001 --> 00:05:01.006
And it was successfully able to log that statement

84
00:05:01.006 --> 00:05:03.004
when it started creating the channel

85
00:05:03.004 --> 00:05:06.000
and calling the order client.

86
00:05:06.000 --> 00:05:07.009
The next one is order client calling

87
00:05:07.009 --> 00:05:09.003
the order service method.

88
00:05:09.003 --> 00:05:12.007
This is again coming in from the order client,

89
00:05:12.007 --> 00:05:16.000
which is this, the message on line 24.

90
00:05:16.000 --> 00:05:19.004
And then let's check the order server logs.

91
00:05:19.004 --> 00:05:22.000
So as usual the H2DatabaseConnection was gotten.

92
00:05:22.000 --> 00:05:26.003
And from there, the getOrdersforUser was called.

93
00:05:26.003 --> 00:05:28.003
So that's the log statement.

94
00:05:28.003 --> 00:05:30.009
Got orders from OrderDao and converting

95
00:05:30.009 --> 00:05:33.001
to OrderResponse proto objects.

96
00:05:33.001 --> 00:05:36.004
That line is coming from the Order Service Impl.

97
00:05:36.004 --> 00:05:39.008
This is line 22 where we had that message.

98
00:05:39.008 --> 00:05:43.006
So we saw the complete trace of the request

99
00:05:43.006 --> 00:05:46.004
that flows in from the user server,

100
00:05:46.004 --> 00:05:48.005
then goes to user service.

101
00:05:48.005 --> 00:05:50.008
From there it goes to order client,

102
00:05:50.008 --> 00:05:54.003
order service, and completes the RPC call

103
00:05:54.003 --> 00:05:57.000
and gives us this extra field

104
00:05:57.000 --> 00:06:00.002
in the response of the user service.

105
00:06:00.002 --> 00:06:02.003
So this is how you end up connecting

106
00:06:02.003 --> 00:06:04.009
both the services using the gRPC call.

107
00:06:04.009 --> 00:06:09.001
And as I said before, number of orders field

108
00:06:09.001 --> 00:06:11.006
that we added in the user response is just one

109
00:06:11.006 --> 00:06:14.004
of the fields that you can extract from the order data.

110
00:06:14.004 --> 00:06:16.000
According to your requirements,

111
00:06:16.000 --> 00:06:17.008
you can stuff a lot of other data

112
00:06:17.008 --> 00:06:21.004
from the order service inside the user response.

113
00:06:21.004 --> 00:06:24.000
Also a small thing to note here

114
00:06:24.000 --> 00:06:25.007
in case you hit your call

115
00:06:25.007 --> 00:06:28.000
using BloomRPC on the user service,

116
00:06:28.000 --> 00:06:29.009
and you think you're not getting this,

117
00:06:29.009 --> 00:06:33.000
do you see the logs occurring correctly?

118
00:06:33.000 --> 00:06:36.001
Just make sure that you reimport this proto file.

119
00:06:36.001 --> 00:06:38.007
Sometimes the changes don't get reflected.

120
00:06:38.007 --> 00:06:40.000
So just reimport this file

121
00:06:40.000 --> 00:06:43.000
and the call should get you the desired response.

