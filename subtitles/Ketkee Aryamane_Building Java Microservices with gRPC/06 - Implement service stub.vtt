WEBVTT
1
00:00:00.007 --> 00:00:03.003
- [Instructor] Now that we have the entire database

2
00:00:03.003 --> 00:00:07.000
code set up, the connection, the query, everything,

3
00:00:07.000 --> 00:00:10.004
let's move on to the service implementation.

4
00:00:10.004 --> 00:00:12.003
So let's go to the IDE.

5
00:00:12.003 --> 00:00:14.004
So this was our DB code.

6
00:00:14.004 --> 00:00:18.001
Now let's recollect that we have generated the stubs

7
00:00:18.001 --> 00:00:21.001
and those stubs sit in the target folder.

8
00:00:21.001 --> 00:00:24.000
And under that, we have the service class

9
00:00:24.000 --> 00:00:27.000
which is UserServiceGrpc.

10
00:00:27.000 --> 00:00:30.009
That is the class now that we want to extend

11
00:00:30.009 --> 00:00:35.001
and implement the method of get user details.

12
00:00:35.001 --> 00:00:36.004
So let's do that next.

13
00:00:36.004 --> 00:00:37.007
Let's close this

14
00:00:37.007 --> 00:00:40.006
and let's basically close all of these files.

15
00:00:40.006 --> 00:00:43.008
Let's add a package here.

16
00:00:43.008 --> 00:00:48.005
This will be com.shopping.service

17
00:00:48.005 --> 00:00:55.001
and let's add a class which is UserService

18
00:00:55.001 --> 00:00:57.003
and since it is the implementation of the stub,

19
00:00:57.003 --> 00:01:01.004
I'll call it, impl.

20
00:01:01.004 --> 00:01:05.003
Now this class should basically extend

21
00:01:05.003 --> 00:01:10.003
the User service grpc.

22
00:01:10.003 --> 00:01:11.003
This is the wrong import.

23
00:01:11.003 --> 00:01:13.000
In case you're not able to see that class,

24
00:01:13.000 --> 00:01:15.009
you just have to go to the Maven tab,

25
00:01:15.009 --> 00:01:18.003
refresh the project once more

26
00:01:18.003 --> 00:01:21.007
to make sure that it gets reflected.

27
00:01:21.007 --> 00:01:22.006
There we go.

28
00:01:22.006 --> 00:01:24.009
So you have UserServiceGrpc

29
00:01:24.009 --> 00:01:27.002
and to that there is an inner class

30
00:01:27.002 --> 00:01:30.002
called UserServiceImplBase.

31
00:01:30.002 --> 00:01:32.000
That is the one that we need to grab

32
00:01:32.000 --> 00:01:36.005
in order to implement our RPC service method.

33
00:01:36.005 --> 00:01:38.007
So let's go to the next slide.

34
00:01:38.007 --> 00:01:41.000
What is a method that we want to implement?

35
00:01:41.000 --> 00:01:44.004
The method that we defined in our proto file,

36
00:01:44.004 --> 00:01:45.006
it's already available to us,

37
00:01:45.006 --> 00:01:49.008
so I'm just going to say Ctrl + Enter, and there we go.

38
00:01:49.008 --> 00:01:52.006
We have the getUserDetails method.

39
00:01:52.006 --> 00:01:55.002
This is the service implementation

40
00:01:55.002 --> 00:01:57.000
that we are going to write

41
00:01:57.000 --> 00:02:00.006
which is basically coming from the service step.

42
00:02:00.006 --> 00:02:03.007
That is the UserServiceGrpc class.

43
00:02:03.007 --> 00:02:05.007
It has got two method parameters.

44
00:02:05.007 --> 00:02:09.006
It takes in a user request that should contain the username

45
00:02:09.006 --> 00:02:13.006
if you recollect, and there is a stream observer.

46
00:02:13.006 --> 00:02:15.005
So before we get into the parameters

47
00:02:15.005 --> 00:02:18.004
I'm just going to quickly open the proto file once more

48
00:02:18.004 --> 00:02:20.002
so that we refresh our memory.

49
00:02:20.002 --> 00:02:22.004
We have a method called getUserDetails

50
00:02:22.004 --> 00:02:24.004
that takes in a user request message

51
00:02:24.004 --> 00:02:26.003
and returns a userResponse.

52
00:02:26.003 --> 00:02:29.009
So this implementer is going to do the same thing for us.

53
00:02:29.009 --> 00:02:32.006
That's the method, which takes the request

54
00:02:32.006 --> 00:02:37.001
and additionally, it has got a stream observer parameter.

55
00:02:37.001 --> 00:02:40.009
This is a special interface that the server is going to use

56
00:02:40.009 --> 00:02:44.000
to call with it ready response.

57
00:02:44.000 --> 00:02:45.005
That is the one that we're going to use

58
00:02:45.005 --> 00:02:48.003
in the subsequent implementation of this method

59
00:02:48.003 --> 00:02:51.004
to send the response back to the client.

60
00:02:51.004 --> 00:02:53.004
Let's go ahead with implementation.

61
00:02:53.004 --> 00:02:55.004
I'm going to eliminate the call off super,

62
00:02:55.004 --> 00:02:57.004
we don't need that on line 11,

63
00:02:57.004 --> 00:03:01.000
instead, I'll first the UserDao class

64
00:03:01.000 --> 00:03:03.004
so that I'm able to grab all the data

65
00:03:03.004 --> 00:03:05.003
from the database call.

66
00:03:05.003 --> 00:03:11.009
So I say UserDao and let's create an instance.

67
00:03:11.009 --> 00:03:13.004
Once we do this,

68
00:03:13.004 --> 00:03:16.005
the data can be collected in the domain object.

69
00:03:16.005 --> 00:03:22.001
Let's import this shopping DB

70
00:03:22.001 --> 00:03:23.006
and on the UserDao,

71
00:03:23.006 --> 00:03:26.007
I am just going to quickly call the getDetails method.

72
00:03:26.007 --> 00:03:28.009
And this will take the username.

73
00:03:28.009 --> 00:03:33.004
The username sits inside our user request

74
00:03:33.004 --> 00:03:36.008
that is available as a parameter on line number 12.

75
00:03:36.008 --> 00:03:42.008
So let's just retrieve that, there we go, simple.

76
00:03:42.008 --> 00:03:47.001
So we made a call to the database layer to get the details.

77
00:03:47.001 --> 00:03:52.006
Now, we have to transform that user domain object on line 14

78
00:03:52.006 --> 00:03:57.007
to the response object after proto.

79
00:03:57.007 --> 00:03:59.004
So, how do we do that?

80
00:03:59.004 --> 00:04:01.000
We've already discussed before

81
00:04:01.000 --> 00:04:03.006
that whenever you want to play around with the objects

82
00:04:03.006 --> 00:04:05.006
that correspond to your message types,

83
00:04:05.006 --> 00:04:09.004
you have the builder design pattern that gRPC uses.

84
00:04:09.004 --> 00:04:11.001
So if you see on your left pane,

85
00:04:11.001 --> 00:04:12.005
there is a UserRequestBuilder,

86
00:04:12.005 --> 00:04:14.001
there's a UserResponseBuilder.

87
00:04:14.001 --> 00:04:16.003
These are the classes that we're going to use

88
00:04:16.003 --> 00:04:18.006
in order to construct the objects

89
00:04:18.006 --> 00:04:21.007
corresponding to the message types in our proto file.

90
00:04:21.007 --> 00:04:26.009
So now, to construct a response object, let's use a builder.

91
00:04:26.009 --> 00:04:34.000
What we will do is let's say UserResponse.Builder

92
00:04:34.000 --> 00:04:44.000
give it a name.

93
00:04:44.000 --> 00:04:48.002
Let me correct the spelling that will be response

94
00:04:48.002 --> 00:04:49.008
and how will you do this?

95
00:04:49.008 --> 00:04:53.001
Let's call UserResponse,

96
00:04:53.001 --> 00:04:56.003
there's a method called newBuilder.

97
00:04:56.003 --> 00:05:00.007
And on that, I'm going to say setId

98
00:05:00.007 --> 00:05:03.004
and to set the Id, I'm going to retrieve the value basically

99
00:05:03.004 --> 00:05:06.003
from the domain object, which is on line 14.

100
00:05:06.003 --> 00:05:09.006
So I'm transferring the data from the database layer

101
00:05:09.006 --> 00:05:10.007
to the proto objects.

102
00:05:10.007 --> 00:05:12.005
That's what I'm doing.

103
00:05:12.005 --> 00:05:17.006
So let's do that one by one, similarly set the other fields

104
00:05:17.006 --> 00:05:24.004
setUsername,

105
00:05:24.004 --> 00:05:31.003
set the Name,

106
00:05:31.003 --> 00:05:37.005
setAge

107
00:05:37.005 --> 00:05:39.008
and setGender.

108
00:05:39.008 --> 00:05:45.003
Now, if you recollect gender in our proto file was an enum.

109
00:05:45.003 --> 00:05:48.003
So I'm going to convert the string value

110
00:05:48.003 --> 00:05:50.000
that we got from the database

111
00:05:50.000 --> 00:05:53.008
into the corresponding enum value inside the proto object.

112
00:05:53.008 --> 00:05:58.006
Simple, what you can do is use the gender enum

113
00:05:58.006 --> 00:06:00.008
and call the valueOf method.

114
00:06:00.008 --> 00:06:02.000
And to this valueOf method,

115
00:06:02.000 --> 00:06:06.003
we can quickly pass in the string.

116
00:06:06.003 --> 00:06:07.002
There it is.

117
00:06:07.002 --> 00:06:12.007
So we have transformed all the database layer properties

118
00:06:12.007 --> 00:06:14.006
to our proto objects.

119
00:06:14.006 --> 00:06:16.005
The final thing that we will do is,

120
00:06:16.005 --> 00:06:18.001
we will build this object.

121
00:06:18.001 --> 00:06:22.003
So I'm just going to say, UserResponse.

122
00:06:22.003 --> 00:06:26.001
That is a proto object that we have,

123
00:06:26.001 --> 00:06:33.009
and that we will get from the build method of the builder.

124
00:06:33.009 --> 00:06:36.009
So we first created a builder on line 17

125
00:06:36.009 --> 00:06:40.000
and then we set the properties

126
00:06:40.000 --> 00:06:42.006
to all the fields using that builder,

127
00:06:42.006 --> 00:06:46.003
and then on line 24, we're just calling the build method

128
00:06:46.003 --> 00:06:47.004
which will finally build

129
00:06:47.004 --> 00:06:51.000
that entire user response object for us.

130
00:06:51.000 --> 00:06:54.000
The last of the steps that we need to do here is

131
00:06:54.000 --> 00:06:58.000
that we need to grab that response observer

132
00:06:58.000 --> 00:07:02.006
and on that we have a method called onNext.

133
00:07:02.006 --> 00:07:04.007
So this is the method which will be used

134
00:07:04.007 --> 00:07:08.005
to return that user response back to the client.

135
00:07:08.005 --> 00:07:11.004
Additionally, on the response observer,

136
00:07:11.004 --> 00:07:16.005
you also have to call onCompleted.

137
00:07:16.005 --> 00:07:18.009
This method is going to ensure

138
00:07:18.009 --> 00:07:22.009
that the RPC call gets completed, simple.

139
00:07:22.009 --> 00:07:26.001
So debiejava userService implementation

140
00:07:26.001 --> 00:07:30.000
which is going to implement the methods of your server step.

