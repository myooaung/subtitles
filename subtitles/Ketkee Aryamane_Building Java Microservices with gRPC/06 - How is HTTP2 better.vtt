WEBVTT
1
00:00:00.007 --> 00:00:02.003
- [Instructor] Now that we know the limitations

2
00:00:02.003 --> 00:00:07.005
of HTTP/1 protocol, let us see how HTTP/2 works.

3
00:00:07.005 --> 00:00:10.001
We know by now that it is a binary protocol

4
00:00:10.001 --> 00:00:13.009
and the data transmitted over it is in a binary format.

5
00:00:13.009 --> 00:00:17.001
In order to understand the working mechanism of HTTP/2,

6
00:00:17.001 --> 00:00:19.004
we need to know three key terms:

7
00:00:19.004 --> 00:00:22.008
a stream, a message and a frame.

8
00:00:22.008 --> 00:00:25.005
A stream is a bidirectional flow of data

9
00:00:25.005 --> 00:00:27.008
between the client and the server.

10
00:00:27.008 --> 00:00:30.009
It consists of a set of messages,

11
00:00:30.009 --> 00:00:35.008
and each stream is uniquely identified by a stream ID.

12
00:00:35.008 --> 00:00:38.002
The next term is a message.

13
00:00:38.002 --> 00:00:41.003
A message is a sequence of frames that correspond

14
00:00:41.003 --> 00:00:44.009
to your HTTP request or the response.

15
00:00:44.009 --> 00:00:46.005
And then we have a frame.

16
00:00:46.005 --> 00:00:49.000
A frame is the smallest unit of data

17
00:00:49.000 --> 00:00:52.000
that contains very specific type of information.

18
00:00:52.000 --> 00:00:54.002
It has a header and a body.

19
00:00:54.002 --> 00:00:57.009
The frame header contains the stream ID to determine

20
00:00:57.009 --> 00:01:00.007
which stream the frame belongs to.

21
00:01:00.007 --> 00:01:04.004
The body, in turn, can contain the HTTP header

22
00:01:04.004 --> 00:01:07.002
and the actual payload, which is the data.

23
00:01:07.002 --> 00:01:09.004
So between the client and server,

24
00:01:09.004 --> 00:01:13.006
over HTTP/2 protocol, streams flow back and forth,

25
00:01:13.006 --> 00:01:16.009
consisting of your HTTP data and headers.

26
00:01:16.009 --> 00:01:20.006
So essentially HTTP/2 breaks down all your data

27
00:01:20.006 --> 00:01:23.002
into small chunks, called frames.

28
00:01:23.002 --> 00:01:26.004
One or more frames constitute a message.

29
00:01:26.004 --> 00:01:29.004
One or more messages constitute a stream.

30
00:01:29.004 --> 00:01:33.000
These frames are interleaved, or they are mixed,

31
00:01:33.000 --> 00:01:36.005
when they get transported over the HTTP/2 protocol,

32
00:01:36.005 --> 00:01:39.002
and they will be reassembled at the other end

33
00:01:39.002 --> 00:01:41.008
using the stream ID that is contained

34
00:01:41.008 --> 00:01:44.004
inside the frame header.

35
00:01:44.004 --> 00:01:47.002
These streams are fully multiplexed

36
00:01:47.002 --> 00:01:49.008
over a single TCP connection

37
00:01:49.008 --> 00:01:52.005
between the client and the server.

38
00:01:52.005 --> 00:01:54.007
So how is HTTP/2 better?

39
00:01:54.007 --> 00:01:57.008
Firstly, it supports complete, or full,

40
00:01:57.008 --> 00:02:00.002
request and response multiplexing.

41
00:02:00.002 --> 00:02:01.009
You can send many requests

42
00:02:01.009 --> 00:02:05.002
from the client without having to block on anyone.

43
00:02:05.002 --> 00:02:07.009
You can send multiple responses from the server

44
00:02:07.009 --> 00:02:10.005
without any of them getting blocked.

45
00:02:10.005 --> 00:02:13.000
And as we said, this is done using frames.

46
00:02:13.000 --> 00:02:15.004
They are anyway mixed when they travel

47
00:02:15.004 --> 00:02:17.003
and going to be reassembled at the other end

48
00:02:17.003 --> 00:02:19.003
using the stream ID.

49
00:02:19.003 --> 00:02:21.008
So the head-of-line blocking problem

50
00:02:21.008 --> 00:02:26.005
that we talked about in HTTP/1 is completely solved.

51
00:02:26.005 --> 00:02:30.005
Additionally, HTTP/2 supports data streaming capabilities.

52
00:02:30.005 --> 00:02:34.000
So instead of a client sending a single request,

53
00:02:34.000 --> 00:02:37.003
or the server emitting a single response,

54
00:02:37.003 --> 00:02:40.008
you can have the client and server both

55
00:02:40.008 --> 00:02:44.006
trying to emit a stream of messages amongst each other.

56
00:02:44.006 --> 00:02:46.009
So bidirectional streaming capability

57
00:02:46.009 --> 00:02:49.008
is possible with HTTP/2.

58
00:02:49.008 --> 00:02:53.009
HTTP/2 also compresses your HTTP headers,

59
00:02:53.009 --> 00:02:58.001
which means reduced overhead and increased performance.

60
00:02:58.001 --> 00:03:02.003
So overall, HTTP/2 is a protocol which is faster,

61
00:03:02.003 --> 00:03:03.007
more efficient,

62
00:03:03.007 --> 00:03:08.000
it reduces latency, and increases the throughput.

