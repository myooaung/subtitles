WEBVTT
1
00:00:00.007 --> 00:00:03.000
- [Instructor] So now we know HTTP/2,

2
00:00:03.000 --> 00:00:04.008
we know Protocol Buffers.

3
00:00:04.008 --> 00:00:07.005
So as a developer, what do you need to do

4
00:00:07.005 --> 00:00:10.006
in order to develop a gRPC service?

5
00:00:10.006 --> 00:00:11.008
Let's find that out.

6
00:00:11.008 --> 00:00:15.009
Firstly, you write the service definition, using an IDL,

7
00:00:15.009 --> 00:00:18.007
The IDL that we will use throughout this course

8
00:00:18.007 --> 00:00:21.000
is going to be Protocol Buffers.

9
00:00:21.000 --> 00:00:24.001
Once you write out the service contract using Protobufs

10
00:00:24.001 --> 00:00:27.001
then you can generate stubs from that file.

11
00:00:27.001 --> 00:00:30.003
These stubs, as we said earlier can be generated

12
00:00:30.003 --> 00:00:32.002
in a language which is supported

13
00:00:32.002 --> 00:00:34.005
by the Protocol Buffers project.

14
00:00:34.005 --> 00:00:38.004
Out of this stub, you can then implement the server methods.

15
00:00:38.004 --> 00:00:40.002
And once you're done with the business logic

16
00:00:40.002 --> 00:00:43.004
then you can run and start the gRPC server.

17
00:00:43.004 --> 00:00:46.009
Let's say that you did all of this in the Java language.

18
00:00:46.009 --> 00:00:50.000
So now you have a gRPC Java service.

19
00:00:50.000 --> 00:00:52.007
Next, you need to write a client,

20
00:00:52.007 --> 00:00:54.009
that client can also be written with the help of the stubs

21
00:00:54.009 --> 00:00:56.006
that you got generated.

22
00:00:56.006 --> 00:00:59.003
Let's say you did that with the Go language,

23
00:00:59.003 --> 00:01:04.008
so now you have a Go gRPC client and a Java gRPC server.

24
00:01:04.008 --> 00:01:08.009
The client is going to send a protocol buffered request

25
00:01:08.009 --> 00:01:11.008
and the gRPC server in Java is going to respond

26
00:01:11.008 --> 00:01:14.000
with a Protocol Buffer response,

27
00:01:14.000 --> 00:01:17.001
all of this over the HTTP/2 protocol.

28
00:01:17.001 --> 00:01:19.006
You're going to see how to exactly do this

29
00:01:19.006 --> 00:01:22.000
in our subsequent modules.

