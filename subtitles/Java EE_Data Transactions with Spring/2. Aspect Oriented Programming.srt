1
00:00:00,412 --> 00:00:03,323
Aspect-oriented programming is a programming paradigm that

2
00:00:03,323 --> 00:00:06,607
breaks programming logic into distinct parts.

3
00:00:06,607 --> 00:00:12,660
Spring uses this paradigm when implementing transaction management.

4
00:00:12,660 --> 00:00:15,933
Transaction management in Spring is enabled via proxies.

5
00:00:15,933 --> 00:00:20,682
But, first, let's talk about how it works when you're not using a proxy.

6
00:00:20,682 --> 00:00:24,195
When you call code, you invoke a method on an object reference.

7
00:00:24,195 --> 00:00:30,059
The method is invoked directly on that object reference.

8
00:00:30,059 --> 00:00:30,433
However,

9
00:00:30,433 --> 00:00:35,340
when a proxy is used and you invoke a method directly on an object reference,

10
00:00:35,340 --> 00:00:40,206
the method is no longer invoked directly on that object reference,

11
00:00:40,206 --> 00:00:42,949
but instead on a reference to the proxy.

12
00:00:42,949 --> 00:00:43,938
And, as such,

13
00:00:43,938 --> 00:00:46,672
the proxy delegates to all of the interceptors

14
00:00:46,672 --> 00:00:50,297
relevant to that particular method call.

15
00:00:50,297 --> 00:00:53,348
Specifically, the proxy uses a transaction interceptor,

16
00:00:53,348 --> 00:00:56,947
which intercepts method calls or indication of lifecycle

17
00:00:56,947 --> 00:01:00,419
events on the associated target class.

18
00:01:00,419 --> 00:01:03,570
This occurs in conjunction with an appropriate platform

19
00:01:03,570 --> 00:01:07,484
transaction manager to handle transactions.

20
00:01:07,484 --> 00:01:08,474
Here's a tip.

21
00:01:08,474 --> 00:01:19,000
The default advice mode for processing @Transactional annotations is proxy, which allows for interception of calls through the proxy only.

