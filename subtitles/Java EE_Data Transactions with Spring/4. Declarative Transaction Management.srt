1
00:00:02,259 --> 00:00:04,525
Also in your research of Springs transaction management,

2
00:00:04,525 --> 00:00:08,897
I'm sure you've come across the @Transactional annotation.

3
00:00:08,897 --> 00:00:13,053
This annotation is an example of declarative transaction management and

4
00:00:13,053 --> 00:00:16,660
allows us to easily work with database transactions.

5
00:00:16,660 --> 00:00:20,419
The @Transactional annotation is convenient because

6
00:00:20,419 --> 00:00:23,333
developers don't need to think about direct transaction

7
00:00:23,333 --> 00:00:25,079
management and exception handling.

8
00:00:25,079 --> 00:00:30,344
All of this is done automatically in a proxy class that Spring

9
00:00:30,344 --> 00:00:33,487
creates to hold the transaction management code.

10
00:00:33,487 --> 00:00:37,939
The @Transactional annotation can either be used at the class,

11
00:00:37,939 --> 00:00:39,676
interface, or method level.

12
00:00:39,676 --> 00:00:42,017
When placed on the class or interface,

13
00:00:42,017 --> 00:00:45,135
all methods within it become transactional.

14
00:00:45,135 --> 00:00:46,834
By using @Transactional,

15
00:00:46,834 --> 00:00:50,072
many important aspects such as transaction

16
00:00:50,072 --> 00:00:52,541
propagation are handled automatically.

17
00:00:52,541 --> 00:00:59,000
There are specific attributes that you can set that will determine propagation behavior.

