WEBVTT
1
00:00:00.465 --> 00:00:06.208
Transaction management ensures data consistency and integrity.

2
00:00:06.208 --> 00:00:10.514
The ability to properly manage transactions is essential to

3
00:00:10.514 --> 00:00:14.908
enterprise application development because most enterprise apps

4
00:00:14.908 --> 00:00:18.194
almost always persist data to a database.

5
00:00:18.194 --> 00:00:20.025
Without transaction management,

6
00:00:20.025 --> 00:00:26.080
data could end up in an inconsistent state and become corrupted.

7
00:00:26.080 --> 00:00:28.598
To understand the importance of the transaction,

8
00:00:28.598 --> 00:00:34.343
think of a common example, buying an airline ticket online using a credit card.

9
00:00:34.343 --> 00:00:37.138
In an online airline ticket booking system,

10
00:00:37.138 --> 00:00:40.419
a booking may consist of two separate actions that

11
00:00:40.419 --> 00:00:42.758
together form a single transaction,

12
00:00:42.758 --> 00:00:47.837
paying for the seat and then reserving a seat,

13
00:00:47.837 --> 00:00:53.446
and removing it from inventory for the customer that just paid.

14
00:00:53.446 --> 00:00:57.249
Now think of the situation where the amount is charged to the

15
00:00:57.249 --> 00:01:01.372
credit card but a seat is never reserved nor confirmed for the

16
00:01:01.372 --> 00:01:03.959
passenger due to a system error.

17
00:01:03.959 --> 00:01:08.037
The data is left in an inconsistent state.

18
00:01:08.037 --> 00:01:12.155
The booking transaction should use transaction management so that both

19
00:01:12.155 --> 00:01:16.837
steps are performed as a single unit of work and all complete entirely as

20
00:01:16.837 --> 00:01:21.053
a group or fail as a group and are rolled back.

21
00:01:21.053 --> 00:01:22.282
In this scenario,

22
00:01:22.282 --> 00:01:26.908
setting the correct boundaries for the transaction is important.

23
00:01:26.908 --> 00:01:29.380
When should a transactions start?

24
00:01:29.380 --> 00:01:31.507
When should a transaction end?

25
00:01:31.507 --> 00:01:34.739
When should the transaction be committed to the database?

26
00:01:34.739 --> 00:01:39.762
And when should data be rolled back in the case of exception?

27
00:01:39.762 --> 00:01:44.847
Without transaction management, your data would be left in an inconsistent state.

28
00:01:44.847 --> 00:01:49.426
We are lucky that Spring provides transaction management support.

29
00:01:49.426 --> 00:01:55.003
In a typical environment, there are two types of transactions, global and local.

30
00:01:55.003 --> 00:01:58.984
Global transactions are used when multiple resources manage the

31
00:01:58.984 --> 00:02:02.921
transactions and are typically managed by the application server,

32
00:02:02.921 --> 00:02:07.223
allowing for access to multiple resources like message queues,

33
00:02:07.223 --> 00:02:09.909
relational databases, etc.

34
00:02:09.909 --> 00:02:14.433
Local transactions are typically associated with a specific resource like,

35
00:02:14.433 --> 00:02:24.000
say, a JDBC connection, and this resource manages the transaction. Local transactions don't typically run in a global environment.

