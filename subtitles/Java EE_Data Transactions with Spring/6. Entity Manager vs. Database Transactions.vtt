WEBVTT
1
00:00:02.130 --> 00:00:06.919
When you review the project code, you will see the use of an entity manager.

2
00:00:06.919 --> 00:00:10.894
So how does the entity manager fit in with the database transaction?

3
00:00:10.894 --> 00:00:15.913
In an ideal scenario, we will fully gain the benefit of Spring Data JPA,

4
00:00:15.913 --> 00:00:17.781
which we will do later,

5
00:00:17.781 --> 00:00:22.396
and remove the DAO completely and leave only the DAO interface.

6
00:00:22.396 --> 00:00:24.782
But I need to talk through the persistence context

7
00:00:24.782 --> 00:00:30.859
versus a database transaction, and the code as is helps to solidify this concept.

8
00:00:30.859 --> 00:00:33.048
There are two separate concepts to consider,

9
00:00:33.048 --> 00:00:36.331
the database transaction and the persistence context.

10
00:00:36.331 --> 00:00:40.122
Each has its own lifecycle and scope.

11
00:00:40.122 --> 00:00:43.130
When the @Transactional annotation is used,

12
00:00:43.130 --> 00:00:47.444
it is only defining the scope of a single database transaction.

13
00:00:47.444 --> 00:00:53.158
Now the database transaction happens inside the scope of a persistence context.

14
00:00:53.158 --> 00:00:57.795
The persistence context comes from JPA, as does the entity manager,

15
00:00:57.795 --> 00:01:07.000
and is implemented internally using a Hibernate session when, of course, you are using Hibernate as your persistence provider.

