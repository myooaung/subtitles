WEBVTT
1
00:00:00.566 --> 00:00:01.576
For our case study,

2
00:00:01.576 --> 00:00:05.659
there are four components that make declarative transaction management work.

3
00:00:05.659 --> 00:00:10.401
The persistence context proxy, the entity manager proxy,

4
00:00:10.401 --> 00:00:15.146
the transactional aspect, and the platform transaction manager.

5
00:00:15.146 --> 00:00:20.358
Let's go over each one and see how they interact with each other.

6
00:00:20.358 --> 00:00:23.742
Entities are objects that live in a database and are

7
00:00:23.742 --> 00:00:25.948
managed by the entity manager.

8
00:00:25.948 --> 00:00:29.440
The entity manager defines the methods that are used to

9
00:00:29.440 --> 00:00:31.532
interact with the persistence context.

10
00:00:31.532 --> 00:00:34.536
So what is a persistence context?

11
00:00:34.536 --> 00:00:40.352
The database transaction happens inside the scope of a persistence context.

12
00:00:40.352 --> 00:00:44.428
Each entity manager instance is associated with a persistence context,

13
00:00:44.428 --> 00:00:49.753
a set of manage entity instances that exist in a particular data store,

14
00:00:49.753 --> 00:00:51.922
in our case H2.

15
00:00:51.922 --> 00:00:55.555
A persistence context defines the scope under which

16
00:00:55.555 --> 00:00:58.089
particular entity instances are created,

17
00:00:58.089 --> 00:00:59.909
persisted, and removed.

18
00:00:59.909 --> 00:01:05.504
The transaction aspect manages transactions for any methods with the

19
00:01:05.504 --> 00:01:08.948
@Transactional annotation and uses a transaction interceptor,

20
00:01:08.948 --> 00:01:13.716
which intercepts method calls for an associated target class.

21
00:01:13.716 --> 00:01:18.043
It's important to note that the interceptor is called both before and

22
00:01:18.043 --> 00:01:22.039
after the method is invoked on the object reference.

23
00:01:22.039 --> 00:01:25.720
The transactional aspect has two main responsibilities.

24
00:01:25.720 --> 00:01:27.785
One, at the before moment,

25
00:01:27.785 --> 00:01:31.630
it determines if the business method about to be called should run

26
00:01:31.630 --> 00:01:33.851
in the scope of an ongoing database transaction,

27
00:01:33.851 --> 00:01:37.680
or if a new transaction should be started.

28
00:01:37.680 --> 00:01:43.294
Second, at the after moment, it decides if the transaction should be committed,

29
00:01:43.294 --> 00:01:45.823
rolled back, or left running.

30
00:01:45.823 --> 00:01:49.251
The transaction manager abstraction, in this case,

31
00:01:49.251 --> 00:01:52.505
is Spring's platform transaction manager interface,

32
00:01:52.505 --> 00:01:56.573
and JPA transaction manager is the only implementation of

33
00:01:56.573 --> 00:01:58.727
that interface that understands JPA.

34
00:01:58.727 --> 00:02:01.933
So that's what we'll use in this course.

35
00:02:01.933 --> 00:02:06.410
During the course, you may hear me say transaction manager.

36
00:02:06.410 --> 00:02:11.198
No, I'm specifically referring to the JPA transaction manager.

37
00:02:11.198 --> 00:02:15.061
The transaction manager is responsible for providing essential methods for

38
00:02:15.061 --> 00:02:23.000
controlling transaction operations at runtime like begin, commit, and rollback.

