WEBVTT
1
00:00:01.978 --> 00:00:05.714
The @Transactional annotation has several transactional parameters,

2
00:00:05.714 --> 00:00:09.201
also called the transaction advice.

3
00:00:09.201 --> 00:00:12.442
Let's talk about these.

4
00:00:12.442 --> 00:00:17.427
The propagation parameter defines how transactions relate to each other.

5
00:00:17.427 --> 00:00:21.553
The most common options are REQUIRED.

6
00:00:21.553 --> 00:00:25.711
Code will always run in a transaction or it creates a new

7
00:00:25.711 --> 00:00:28.410
transaction or reuses one if available.

8
00:00:28.410 --> 00:00:30.737
This is the default.

9
00:00:30.737 --> 00:00:31.216
REQUIRES_NEW.

10
00:00:31.216 --> 00:00:35.971
Code will always run in a new transaction suspending the

11
00:00:35.971 --> 00:00:40.022
current transaction if one exists.

12
00:00:40.022 --> 00:00:40.479
NEVER.

13
00:00:40.479 --> 00:00:45.827
This means a method shouldn't be run within a transaction.

14
00:00:45.827 --> 00:00:50.162
The isolation level of a transaction defines how data within

15
00:00:50.162 --> 00:00:53.560
transactions are available to other processes,

16
00:00:53.560 --> 00:00:55.372
users, and systems.

17
00:00:55.372 --> 00:00:56.145
READ_UNCOMMITTED.

18
00:00:56.145 --> 00:00:59.235
This allows dirty reads,

19
00:00:59.235 --> 00:01:02.879
which allows the transaction to read data written but not

20
00:01:02.879 --> 00:01:05.364
yet committed by other transactions.

21
00:01:05.364 --> 00:01:06.005
READ_COMMITTED.

22
00:01:06.005 --> 00:01:09.849
This does not allow dirty reads.

23
00:01:09.849 --> 00:01:10.214
REPEATABLE_READ.

24
00:01:10.214 --> 00:01:13.919
If a row is read twice in the same transaction,

25
00:01:13.919 --> 00:01:18.335
the result will always be the same.

26
00:01:18.335 --> 00:01:19.151
SERIALIZABLE.

27
00:01:19.151 --> 00:01:22.490
This performs all transactions in a sequence.

28
00:01:22.490 --> 00:01:24.356
The different levels have different performance

29
00:01:24.356 --> 00:01:27.835
characteristics in a multithreaded application.

30
00:01:27.835 --> 00:01:31.597
There is also a default option that uses the transaction isolation

31
00:01:31.597 --> 00:01:35.444
level provided by the underlying implementation.

32
00:01:35.444 --> 00:01:40.677
A timeout represents a timeout for the operation wrapped by the transaction.

33
00:01:40.677 --> 00:01:45.027
The transaction timeout defaults to the default timeout of the underlying

34
00:01:45.027 --> 00:01:50.293
transaction system or to none if timeouts are not supported.

35
00:01:50.293 --> 00:01:52.044
The readOnly flag.

36
00:01:52.044 --> 00:01:57.505
You set this to true when transactions don't need to write back to the database.

37
00:01:57.505 --> 00:02:00.088
The default for this is false.

38
00:02:00.088 --> 00:02:03.612
Setting the flag to true allows the underlying

39
00:02:03.612 --> 00:02:08.362
implementation to possibly optimize data access.

40
00:02:08.362 --> 00:02:13.134
When using JPA, this flag is only a hint for the persistence provider,

41
00:02:13.134 --> 00:02:18.205
and it will not necessarily cause failure of write access attempts.

42
00:02:18.205 --> 00:02:21.865
Its behavior is vendor dependent.

43
00:02:21.865 --> 00:02:25.210
The readOnly flag is only relevant inside of a transaction.

44
00:02:25.210 --> 00:02:29.206
If an operation occurs outside of a transactional context,

45
00:02:29.206 --> 00:02:31.812
the flag is simply ignored.

46
00:02:31.812 --> 00:02:34.906
Now let's look at the rollback rules for a transaction.

47
00:02:34.906 --> 00:02:39.895
By default, rollback happens for runtime unchecked exceptions only.

48
00:02:39.895 --> 00:02:44.615
The checked exception does not trigger a rollback of the transaction.

49
00:02:44.615 --> 00:02:46.918
There's the rollbackFor option.

50
00:02:46.918 --> 00:02:51.277
This defines one or more exceptions that you want to trigger a rollback for.

51
00:02:51.277 --> 00:02:54.679
So if you throw an exception or a subclass of it,

52
00:02:54.679 --> 00:02:58.355
always use this parameter to tell Spring to roll back

53
00:02:58.355 --> 00:03:01.414
transactions if a checked exception occurs.

54
00:03:01.414 --> 00:03:03.300
RollbackForClassName.

55
00:03:03.300 --> 00:03:07.106
This defines one or more exceptions that you want to trigger a rollback for.

56
00:03:07.106 --> 00:03:10.335
You include the specific class name.

57
00:03:10.335 --> 00:03:13.814
The rollbackForClassName attribute actually provides a little

58
00:03:13.814 --> 00:03:17.788
more flexibility than the rollbackFor parameter.

59
00:03:17.788 --> 00:03:24.000
noRollbackFor. This specifies the class name where rollback should not occur.

