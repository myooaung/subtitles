WEBVTT
1
00:00:05.470 --> 00:00:10.360
Welcome back everyone to part two of our lecture series on timestamps and extract where we focus on

2
00:00:10.360 --> 00:00:16.740
extracting time and date information as well as formatting it so we're going to be exploring how to

3
00:00:16.740 --> 00:00:24.300
extract information from time based data types using the extract function as well as using the H function.

4
00:00:24.360 --> 00:00:30.600
And then we'll also learn about formatting time information using the to care or two character functionality

5
00:00:32.070 --> 00:00:38.070
so let's start with extract which allows you to extract or obtain a sub component of a date value and

6
00:00:38.070 --> 00:00:41.400
you're allowed to extract the year month day week and quarter.

7
00:00:41.430 --> 00:00:44.610
You can always check out the sequel documentation for more information on this.

8
00:00:44.640 --> 00:00:50.760
But basically what this does is if you have a full timestamp and you only want the year component of

9
00:00:50.760 --> 00:00:53.410
it you can extract just the year.

10
00:00:53.610 --> 00:00:55.300
So the usage would look something like this.

11
00:00:55.320 --> 00:01:01.020
You would say extract and then in parentheses you pass into the extract function the subcomponents you

12
00:01:01.020 --> 00:01:05.610
want to extract and we put it in all caps just so it's clear to whoever is reading this that we are

13
00:01:05.880 --> 00:01:11.400
extracting the year and then we'll say from and then whatever date column we're trying to extract this

14
00:01:11.400 --> 00:01:19.050
from the H function calculates and returns the current age given a timestamp.

15
00:01:19.080 --> 00:01:24.750
So you simply just passin some timestamp column into the H function and they'll return something that

16
00:01:24.750 --> 00:01:27.630
looks like this thirteen years one month five days.

17
00:01:27.630 --> 00:01:32.570
And if you also have time information it'll include our minutes and seconds et cetera.

18
00:01:32.640 --> 00:01:38.550
So what that's doing is it's just taking the current date that you are querying and then calculating

19
00:01:38.550 --> 00:01:42.950
how old the timestamp in the actual database is.

20
00:01:42.960 --> 00:01:49.620
So if something if let's say the year was 20 20 and you had a timestamp from the year 2000 then it would

21
00:01:49.620 --> 00:01:51.110
return back 20 years.

22
00:01:51.120 --> 00:01:56.340
So just calculating how old is that particular timestamp given when you're actually querying it.

23
00:01:56.340 --> 00:02:03.970
So just it's age and then finally this to care or to character functionality is just a general function

24
00:02:03.970 --> 00:02:09.650
to convert data types to text and it's actually not explicitly used just for timestamps.

25
00:02:09.670 --> 00:02:14.990
You can use this on lots of different use cases but it's very useful for timestamp formatting in particular.

26
00:02:15.220 --> 00:02:18.790
And we're gonna go and explore the documentation a little further when we actually work through some

27
00:02:18.790 --> 00:02:19.660
examples.

28
00:02:19.660 --> 00:02:26.200
But basically the usage of this is you say to underscore care and then inside this two character function

29
00:02:26.260 --> 00:02:32.620
you're going to type in as a first parameter the date column name and then comma and then as a string

30
00:02:32.620 --> 00:02:35.140
parameter the text formatting you want.

31
00:02:35.140 --> 00:02:40.030
And notice there's going to be specialized codes as far as how you actually want to format the month

32
00:02:40.060 --> 00:02:41.410
days years et cetera.

33
00:02:41.410 --> 00:02:46.600
And we're going to be exploring the documentation to see a full table of the different template formatting

34
00:02:46.600 --> 00:02:51.040
for that so all these functions are really best understood through example.

35
00:02:51.040 --> 00:02:55.870
So let's jump straight to PS Yasmin and work with these functions as well as explore documentation for

36
00:02:55.870 --> 00:02:58.910
translating a timestamp to a character string.

37
00:02:58.930 --> 00:03:04.600
All right here I am at my query editor but I'm going to do is I'm going to select everything from the

38
00:03:04.630 --> 00:03:10.120
payment table just so we can explore it once again and notice that all the way at the end we had this

39
00:03:10.120 --> 00:03:16.380
payment date which is a timestamp without a time zone let's start going through a couple of functions

40
00:03:16.390 --> 00:03:20.520
we just learned about the first one being the extract function.

41
00:03:20.620 --> 00:03:24.610
So the way this works is we'll separate the two lines.

42
00:03:24.610 --> 00:03:29.830
We say select and then we extract parentheses.

43
00:03:29.920 --> 00:03:33.620
And here we get to decide what we actually want to extract.

44
00:03:33.640 --> 00:03:40.220
So if we wanted to extract just a year from that payment they will say a year from and then we type

45
00:03:40.220 --> 00:03:47.000
in that timestamp column name and those what we get back we're getting back a certain part of that date

46
00:03:47.390 --> 00:03:53.180
and then we get back 2007 and it's really useful to use this along with the alias in order to say something

47
00:03:53.180 --> 00:04:01.430
like as and you can call this like my year run this and then you get my year so you could also say year

48
00:04:01.820 --> 00:04:03.310
run that and you get back here.

49
00:04:03.350 --> 00:04:09.530
Notice that year is highlighted here because it is technically a specialized keyword of sequel because

50
00:04:09.770 --> 00:04:13.370
it can be used as a sub component to extract from a date.

51
00:04:13.370 --> 00:04:19.280
So here again typically you're going to select extract select something to extract such as the month

52
00:04:19.310 --> 00:04:24.680
from payment dates and then call it let's say pay month or whatever you want to actually call this column

53
00:04:25.800 --> 00:04:27.000
and then you see pay month.

54
00:04:27.120 --> 00:04:28.140
And here's the second month.

55
00:04:28.170 --> 00:04:30.280
So these all happened in February et cetera.

56
00:04:30.360 --> 00:04:34.320
You can do it for all the ones you mentioned such as quarter as well.

57
00:04:34.320 --> 00:04:36.980
Start typing these on multiple lines run this.

58
00:04:36.990 --> 00:04:41.130
And so this happens in the first quarter of the year because it was February the first quarters January

59
00:04:41.130 --> 00:04:42.120
February and March.

60
00:04:42.150 --> 00:04:45.330
So we can see here this payment happened in the first quarter.

61
00:04:45.360 --> 00:04:47.780
Very useful for things like business.

62
00:04:47.840 --> 00:04:48.510
Okay.

63
00:04:48.570 --> 00:04:51.430
So we have the extract functionality in place.

64
00:04:51.510 --> 00:04:57.030
Let's say you wanted to figure out how old a particular time stamp date was in regards to our current

65
00:04:57.030 --> 00:04:57.960
dates.

66
00:04:57.960 --> 00:05:02.860
To do that we simply say select and if we say payment date.

67
00:05:03.200 --> 00:05:05.570
Notice here we have that time stamp again.

68
00:05:05.570 --> 00:05:12.980
The H function if we take a look at it it's going to allow us to calculate how old this particular timestamp

69
00:05:13.010 --> 00:05:13.460
is.

70
00:05:13.460 --> 00:05:19.550
So for example if something or someone was born on this particular date timestamp How old will it be

71
00:05:19.610 --> 00:05:20.320
right now.

72
00:05:20.360 --> 00:05:24.640
And obviously you'll get different results because you won't run this at the exact same time I will.

73
00:05:24.650 --> 00:05:31.520
So if I run this here I get to see the age and it's 13 years one month five days and then hours minutes

74
00:05:31.610 --> 00:05:33.600
seconds and then sub seconds.

75
00:05:33.650 --> 00:05:34.430
All right.

76
00:05:34.430 --> 00:05:36.530
So that is the age functionality.

77
00:05:36.530 --> 00:05:40.240
And then finally the one I want to show you in a little more detail is to character.

78
00:05:40.310 --> 00:05:47.510
It's the way this works is we say to underscore character then we decide on the timestamp column we're

79
00:05:47.510 --> 00:05:50.080
going to be working with we say comma.

80
00:05:50.330 --> 00:05:53.870
And then as a string code you get to decide on the formatting.

81
00:05:53.870 --> 00:05:59.720
And as I mentioned to character is it's a generalized function for converting from one data type into

82
00:05:59.720 --> 00:06:01.460
a text data type.

83
00:06:01.460 --> 00:06:07.310
And if we take a look at the documentation for this which is under data type formatting functions or

84
00:06:07.310 --> 00:06:13.190
if you just google search to underscore c h a r you'll get used to this page and a zoom interest a little

85
00:06:13.190 --> 00:06:14.810
more so we can read this.

86
00:06:14.960 --> 00:06:22.190
And basically what this allows us to do is as a function grab some data type and then convert it to

87
00:06:22.370 --> 00:06:23.600
a text data type.

88
00:06:23.630 --> 00:06:28.340
So typically you can see the first one here is you graph and timestamp and you convert it to a string

89
00:06:29.060 --> 00:06:32.390
and there's gonna be specialized template formatting codes.

90
00:06:32.390 --> 00:06:38.100
So if you scroll down here notice there's different patterns you can use in essentially these are the

91
00:06:38.100 --> 00:06:39.000
specialized patterns.

92
00:06:39.010 --> 00:06:45.750
You can combine in any way you want in order to organize the text however you see fit.

93
00:06:45.780 --> 00:06:51.630
So notice if you just say one single y that's the last digit of the year to capitalize is the last two

94
00:06:51.630 --> 00:06:59.370
digits 3 and then 4 etc. You can also do things like have capitalized month which is the full uppercase

95
00:06:59.430 --> 00:07:06.210
month name or if you just say all lowercase M O and it's the abbreviated lowercase so three characters

96
00:07:06.210 --> 00:07:12.100
in English funding if you're on a localized version of your language it may vary etc. But notice there's

97
00:07:12.240 --> 00:07:14.310
lots of different ways you can ask for the month.

98
00:07:14.330 --> 00:07:16.770
So let's go ahead and play around with this.

99
00:07:16.950 --> 00:07:19.050
So we see here that we have a timestamp.

100
00:07:19.410 --> 00:07:27.680
Let's go ahead and format it to be month dash y y y y.

101
00:07:28.480 --> 00:07:36.040
So we run this and because we have month in full caps it's going to report back February.

102
00:07:36.050 --> 00:07:39.740
This dash is just the dash that I decided to use there.

103
00:07:40.160 --> 00:07:46.340
So if I remove that Dash and just have a bunch of spaces run this again then the string code is just

104
00:07:46.340 --> 00:07:51.700
gonna have some spaces between month and these four capitalize.

105
00:07:51.710 --> 00:07:52.470
So keep in mind.

106
00:07:52.490 --> 00:07:59.540
Now I can add in whatever string text or characters I want in order to format my date as I so choose.

107
00:07:59.540 --> 00:08:05.360
So let's imagine that you are running something from United States and somebody asks you for a report

108
00:08:05.720 --> 00:08:10.880
on this payment date organized let's say by month then day then year.

109
00:08:10.880 --> 00:08:14.570
So what you can do here is let's take a look at the documentation here.

110
00:08:14.570 --> 00:08:22.970
We're gonna go ahead and use let's say all lowercase m o n so say all lowercase m o n forward slash

111
00:08:23.390 --> 00:08:29.050
and then if you take a look at the table you can get the dates just as two numbers with lowercase d

112
00:08:29.450 --> 00:08:32.040
and then we'll go ahead and just have why is there.

113
00:08:32.060 --> 00:08:37.730
So we run this and we get back February 15th 2007 and then on second thought you think look kind of

114
00:08:37.730 --> 00:08:43.850
weird to have the three letters so you come back in the documentation you see here M M is a month number

115
00:08:43.970 --> 00:08:45.240
which probably makes more sense.

116
00:08:45.260 --> 00:08:49.980
So we'll come back here and replace this with m m run them.

117
00:08:50.090 --> 00:08:58.920
And now I see 0 to 15 2007 and these forward slash dashes are just forward slashes that I got to decide

118
00:08:58.940 --> 00:09:05.050
on if I wanted to I could have made these just normal dashes run this and know how my string is going

119
00:09:05.050 --> 00:09:05.940
to keep getting edited.

120
00:09:06.410 --> 00:09:11.620
Now let's imagine we're running this query from a European standpoint and we actually want to have the

121
00:09:11.620 --> 00:09:18.940
formatting be correct for European standards in which case I would have the day first and then come

122
00:09:18.940 --> 00:09:24.900
in with the month another dash and then have the year and notice how that starts get flipped around.

123
00:09:24.960 --> 00:09:25.180
OK.

124
00:09:25.180 --> 00:09:31.240
So a lot of this is just looking up here in this large table exactly the template pattern for your date

125
00:09:31.240 --> 00:09:32.350
time formatting.

126
00:09:32.440 --> 00:09:37.090
Again it's a large table but you should be able to find whatever you're looking for and then you can

127
00:09:37.090 --> 00:09:41.420
add in your own strings or own characters in order to format it.

128
00:09:41.530 --> 00:09:42.540
However you see fit.

129
00:09:42.640 --> 00:09:44.860
So that is the two character function.

130
00:09:45.040 --> 00:09:51.190
And as I mentioned later on we'll see that it's actually able to format not just timestamps but a variety

131
00:09:51.610 --> 00:09:52.440
of different things.

132
00:09:52.450 --> 00:09:56.050
So you can format an integer to be a string.

133
00:09:56.050 --> 00:10:00.850
So converting it to a string and then maybe only show certain precision levels.

134
00:10:00.850 --> 00:10:05.590
OK so that's it for this lecture I will see you at the next one.
