1
00:00:05,380 --> 00:00:06,490
Welcome back everyone.

2
00:00:06,490 --> 00:00:13,340
Before we discuss grouped by operations we should understand aggregate functions in general sequel provides

3
00:00:13,340 --> 00:00:18,530
a variety of aggregate functions and post gross equals no exception to that and all the functions we

4
00:00:18,530 --> 00:00:21,870
see here are available in any major sequel engine.

5
00:00:21,920 --> 00:00:27,890
The main idea behind an aggregate function is to take multiple inputs and return a single output.

6
00:00:28,010 --> 00:00:32,360
Now postscript sequel overrides many many different types of aggregate functions and you can check out

7
00:00:32,360 --> 00:00:36,170
the link in this slide in order to go to the official documentation page.

8
00:00:36,170 --> 00:00:41,600
But we're just going to discuss the most common aggregation functions in this particular lecture.

9
00:00:41,620 --> 00:00:47,140
The most common aggregate functions are average which returns the average value or mean value there

10
00:00:47,140 --> 00:00:52,090
is count which will actually already familiar with returns the number of values or rows returned.

11
00:00:52,090 --> 00:00:55,480
Then there's Max Inman which return maximum minimum respectively.

12
00:00:55,480 --> 00:00:58,310
And then there are some which returns the sum of all the values.

13
00:00:58,330 --> 00:01:02,330
So it adds everything up in that particular column.

14
00:01:02,380 --> 00:01:07,780
Keep in mind the aggregate function calls happen only in the select clause or the having clause.

15
00:01:07,870 --> 00:01:11,980
We don't know about the having clause quite yet but we're going to learn about it later on in this section

16
00:01:13,860 --> 00:01:19,890
some special notes to keep in mind for certain particular aggregate functions is the average call returns

17
00:01:20,010 --> 00:01:21,230
a floating point value.

18
00:01:21,240 --> 00:01:22,670
Many decimal places long.

19
00:01:23,010 --> 00:01:29,130
So for example could be something like two point 3 4 2 4 1 8 etc. and you can use the round function

20
00:01:29,190 --> 00:01:32,440
on top of average to specify precision after the decimal.

21
00:01:32,520 --> 00:01:34,970
So we'll see that in this particular lecture.

22
00:01:35,160 --> 00:01:40,320
And keep in mind that count simply returns number of rows which means by convention we could just use

23
00:01:40,320 --> 00:01:43,640
count asterisk in order to see the number of rows.

24
00:01:43,680 --> 00:01:48,750
You can either pass in a specific column or just an asterisk since it's essentially the same thing but

25
00:01:48,750 --> 00:01:50,980
we've already discussed that before.

26
00:01:51,110 --> 00:01:56,000
Let's go ahead and see some examples of aggregate functions in our own database going to head over to

27
00:01:56,000 --> 00:01:58,410
PGA admin now.

28
00:01:58,580 --> 00:02:02,180
All right let's begin by exploring the film tables since we'll be using that.

29
00:02:02,760 --> 00:02:06,060
So we'll say select everything from film.

30
00:02:06,060 --> 00:02:11,700
And if we run this we can see we have a film by the title description and then release here language

31
00:02:11,700 --> 00:02:15,750
I.D. And we also have this replacement cost those we have several values here.

32
00:02:16,200 --> 00:02:20,340
Let's imagine right off the bat I wanted to know what the minimum replacement cost was.

33
00:02:20,760 --> 00:02:25,380
Well what I could do is call my aggregate function and then I'm going to call parentheses since this

34
00:02:25,380 --> 00:02:28,470
is a function call and I call it on that column.

35
00:02:28,470 --> 00:02:31,020
Replacement cost.

36
00:02:31,020 --> 00:02:34,830
And when I run this it's going to return back the minimum replacement cost.

37
00:02:34,860 --> 00:02:40,070
So at a minimum we're going to have to spend nine ninety nine to replace a certain film.

38
00:02:40,110 --> 00:02:45,480
Now that also means certain films are more expensive so maybe we have a budgeting question asking what's

39
00:02:45,480 --> 00:02:49,170
the most we can expect to pay to replace a film.

40
00:02:49,170 --> 00:02:53,560
In that case we can just call Max and figure out the max on a replacement cost.

41
00:02:54,150 --> 00:02:58,530
So the max on replacement costs now report it back is twenty nine ninety nine.

42
00:02:58,530 --> 00:03:04,320
So that is the men and max function pretty self-explanatory and you can call them just on any column

43
00:03:04,320 --> 00:03:05,400
here.

44
00:03:05,430 --> 00:03:10,380
Keep in mind if we were to try to call something else like let's say I also wanted to call a film might

45
00:03:10,380 --> 00:03:13,680
be column for some reason that doesn't really make sense.

46
00:03:13,710 --> 00:03:19,620
And the reason for that is we're just actually calling an aggregate function on a column which means

47
00:03:19,920 --> 00:03:26,610
Max replacement cost just returns a single value so it doesn't really make sense to call another column

48
00:03:26,610 --> 00:03:28,930
with this in order to call other columns.

49
00:03:28,940 --> 00:03:32,040
We'll have to learn about the group by statement which is coming up next.

50
00:03:32,070 --> 00:03:37,020
So keep that in mind we are doing just simple calls or queries like this where we want to figure out

51
00:03:37,020 --> 00:03:42,240
the men or max it doesn't really make sense to call other columns there since we're aggregating a bunch

52
00:03:42,240 --> 00:03:49,350
of values to just a single value which you could do something like Min replacement cost

53
00:03:52,840 --> 00:03:55,690
from film now we run this and that works.

54
00:03:55,690 --> 00:04:02,050
And the reason this works is because that function maximum and this function minimum are both returning

55
00:04:02,110 --> 00:04:03,010
a singular value.

56
00:04:03,070 --> 00:04:06,370
So this will be the max and min for your replacement costs.

57
00:04:06,370 --> 00:04:10,360
So keep in mind because those rows happen to match up that sort of query makes sense.

58
00:04:10,960 --> 00:04:15,790
OK let's explore the other aggregate functions we talked about.

59
00:04:15,790 --> 00:04:20,410
We're already familiar with count which essentially is counting the number of rows returned so we can

60
00:04:20,410 --> 00:04:25,410
say select count in asterisk run that never turns back.

61
00:04:25,410 --> 00:04:27,620
How many roads we have so we have 1000 films.

62
00:04:27,690 --> 00:04:29,820
And keep in mind this works on any column.

63
00:04:29,820 --> 00:04:35,520
So we could also say fill my D and that's essentially the same thing since that's the case by convention.

64
00:04:35,520 --> 00:04:41,010
We typically just write an asterisk there and we're already familiar with count.

65
00:04:41,010 --> 00:04:45,210
Let's imagine we wanted to know the average replacement cost what I could do is say average

66
00:04:47,670 --> 00:04:53,670
replacement cost run that and that's going to grab the mean or average from the film table.

67
00:04:53,700 --> 00:04:58,770
However you probably notice it looks a little strange here in this because by default this average call

68
00:04:59,160 --> 00:05:01,430
gives you a lot of significant digits.

69
00:05:01,440 --> 00:05:06,780
So if we expand this column there's time stretching it out here we can see that it's actually nineteen

70
00:05:06,930 --> 00:05:09,990
point nine eight four and then a bunch of zeros.

71
00:05:09,990 --> 00:05:15,600
So realistically you probably don't want all these significant digits past the decimal point.

72
00:05:15,600 --> 00:05:23,910
So we can do is wrap this around with a round function and the round function actually takes in two

73
00:05:23,910 --> 00:05:24,600
parameters.

74
00:05:24,600 --> 00:05:29,700
One is the value you actually want around and then we're gonna put a comma here.

75
00:05:29,700 --> 00:05:32,470
And how many decimal places want to round it too.

76
00:05:32,580 --> 00:05:37,680
So we'll say to two decimal places and it's essentially a mathematical call on this result.

77
00:05:37,680 --> 00:05:41,770
So it's going to take this result and then round it to just two places pass a decimal.

78
00:05:41,850 --> 00:05:47,280
And then when I run this notice I get back nineteen dollars and ninety eight cents as the average replacement

79
00:05:47,280 --> 00:05:48,730
cost from the film.

80
00:05:48,870 --> 00:05:53,310
And we can always edit this if for some reason we wanted three decimal places.

81
00:05:53,610 --> 00:05:55,620
We can run that and it keeps going.

82
00:05:55,710 --> 00:05:59,580
If I said for as you may have guessed we'll start including the zero.

83
00:05:59,700 --> 00:06:04,470
So you can either stretch out this column to see all the results if you don't have that rounding call

84
00:06:04,830 --> 00:06:08,920
or realistically you're probably going to want to round this to some degree.

85
00:06:09,180 --> 00:06:15,720
Again notice how round uses parentheses in order to organize its parameters or its inputs.

86
00:06:15,720 --> 00:06:18,210
Here we have the input that we're trying to round.

87
00:06:18,310 --> 00:06:26,340
And then the second parameter is how many decimal places so we discuss average count Max and men.

88
00:06:26,420 --> 00:06:31,100
And then we finally have some which is going to sum all the values in a column.

89
00:06:31,160 --> 00:06:32,770
So what does that actually mean.

90
00:06:33,110 --> 00:06:38,300
If we take a look at our table again select everything from film let's imagine for some reason we had

91
00:06:38,300 --> 00:06:40,420
to replace every single film.

92
00:06:40,910 --> 00:06:46,820
So we were opening a duplicate store and had to replace every single film.

93
00:06:46,820 --> 00:06:53,250
So we needed to figure out the total sum of the replacement cost column what we can do is say some replacement

94
00:06:53,250 --> 00:07:01,100
cost we run this and it would cost us nineteen thousand nine hundred eighty four dollars to replace

95
00:07:01,190 --> 00:07:02,420
all those movies.

96
00:07:02,420 --> 00:07:05,920
And if we think about this value for a second it actually makes perfect sense.

97
00:07:05,960 --> 00:07:11,830
Recall that we were taking the average replacement cost it was nineteen point ninety eight four.

98
00:07:11,990 --> 00:07:16,640
And here we're replacing 1000 movies with the average replacement costs.

99
00:07:16,670 --> 00:07:22,430
So which means the sum of the replacement cost should equal the average times the actual amount of movies

100
00:07:22,430 --> 00:07:22,880
we have.

101
00:07:22,880 --> 00:07:28,490
So that's essentially nineteen point nine eight four times a thousand movies which means again the total

102
00:07:28,490 --> 00:07:33,640
cost to replace all the films would be nineteen thousand nine hundred and eighty four dollars.

103
00:07:33,650 --> 00:07:34,370
All right.

104
00:07:34,370 --> 00:07:40,280
So those are the aggregate functions by themselves that's average count max min and some you can hit

105
00:07:40,280 --> 00:07:43,770
the slides and check out the link for more complex aggregate functions.

106
00:07:43,880 --> 00:07:46,580
Some of them which we will go over in later lectures.

107
00:07:46,730 --> 00:07:48,520
Right now these are really the most common ones.

108
00:07:48,560 --> 00:07:53,810
You should know right off the bat and coming up next we're going to see how we can use this in conjunction

109
00:07:53,810 --> 00:07:57,200
with group buy to create very powerful queries.

110
00:07:57,200 --> 00:07:58,220
I'll see you at the next lecture.
