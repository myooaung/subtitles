WEBVTT
1
00:00:05.750 --> 00:00:10.290
Welcome everyone to this lecture on the INNER JOIN.

2
00:00:10.300 --> 00:00:14.620
There are several types of joints and in this lecture we're going to go through what I think is the

3
00:00:14.620 --> 00:00:17.230
simplest joint type which is an INNER JOIN.

4
00:00:17.230 --> 00:00:21.400
And typically when students are learning about joints and sequel they always start off with the inner

5
00:00:21.400 --> 00:00:23.500
join because it's the easiest to understand.

6
00:00:24.990 --> 00:00:28.620
First off what actually is a joint operation.

7
00:00:28.650 --> 00:00:33.100
Put simply joins allow us to combine multiple tables together.

8
00:00:33.150 --> 00:00:38.670
Now the main reason for the different joint types is decide how to deal if information only present

9
00:00:38.760 --> 00:00:46.260
in one of the join the tables so let's begin by imagining a very simple example let's say our company

10
00:00:46.260 --> 00:00:50.130
is holding a conference for people in the movie rental industry.

11
00:00:50.310 --> 00:00:55.410
So before the conference actually starts we're going to have people register online beforehand and the

12
00:00:55.410 --> 00:01:00.720
registration is simply just providing their name and we'll keep track of people as they register and

13
00:01:00.720 --> 00:01:02.700
then the actual day of the conference.

14
00:01:02.700 --> 00:01:07.590
They're going to come in and log in through an iPad with their name.

15
00:01:07.820 --> 00:01:10.680
So after the conference we end up having these tables.

16
00:01:10.850 --> 00:01:18.110
So we have a registrations table as well as a log ins table the respective I.D. columns indicate well

17
00:01:18.160 --> 00:01:23.950
over the registered or logged in on site so we can see the registrations column we have Andrew who registered

18
00:01:23.950 --> 00:01:31.150
first then Bob and Charlie then David and then we have Loggins fix Xavier Andrew Yolanda and Bob for

19
00:01:31.150 --> 00:01:35.890
the sake of simplicity we're going to assume that in this little small universe all the first names

20
00:01:35.920 --> 00:01:36.420
are unique.

21
00:01:36.430 --> 00:01:43.180
So there are not two ANDREWS There's not two Bobs every person has a unique name to help me keep track

22
00:01:43.300 --> 00:01:47.300
of the different joints since we're going to be using this example tables throughout this section of

23
00:01:47.300 --> 00:01:48.070
the course.

24
00:01:48.070 --> 00:01:53.920
Keep in mind that the registration names first letters go A B C D and if you take a look at Loggins

25
00:01:54.190 --> 00:01:59.770
The two outstanding ones that are not in the registrations are exact here and Yolanda basically implying

26
00:01:59.770 --> 00:02:04.410
that they forgot to register but still showed up the day of the conference.

27
00:02:04.490 --> 00:02:11.870
So what is an INNER JOIN DO AN INNER JOIN will result with the set of records that match in both tables.

28
00:02:11.870 --> 00:02:18.920
So the situation we have right now is in the registrations we had Andrew Bob and Charlie and David register

29
00:02:18.920 --> 00:02:20.070
for the conference.

30
00:02:20.090 --> 00:02:25.010
However the actual day of the conference when people were logging in we only had Andrew and Bob show

31
00:02:25.010 --> 00:02:30.950
up that actually registered and then Xavier and Yolanda who forgot to register they came in on site

32
00:02:31.010 --> 00:02:36.170
and then logged in and keep in mind here that it looks like Charlie and David registered but didn't

33
00:02:36.200 --> 00:02:38.180
end up showing up to the conference to log in.

34
00:02:38.480 --> 00:02:40.820
So we have that discrepancy there.

35
00:02:40.820 --> 00:02:48.290
Xavier and Yolanda in Loggins table and then Charlie and David in the registrations table so where do

36
00:02:48.290 --> 00:02:50.120
we actually have a match in both tables.

37
00:02:50.120 --> 00:02:55.160
Well we have Andrew and Bob Andrew and Bob are the only ones that both registered and logged in the

38
00:02:55.160 --> 00:02:56.450
day of the conference.

39
00:02:56.510 --> 00:03:03.440
So an inner join is going to able to join these tables together for records that are a match in both

40
00:03:03.440 --> 00:03:04.140
tables.

41
00:03:04.160 --> 00:03:08.990
So when we're talking about an inner join we're only looking for the set of records to happen to be

42
00:03:09.020 --> 00:03:10.570
in both tables.

43
00:03:10.560 --> 00:03:14.260
And in this case that would only be Andrew and Bob.

44
00:03:14.330 --> 00:03:16.130
So what's the actual syntax for this.

45
00:03:16.550 --> 00:03:21.260
Well we can say select and then whatever columns you want but in this case we'll keep things simple

46
00:03:21.260 --> 00:03:27.350
by selecting all columns and we say select all the columns from table A and then inner join with Table

47
00:03:27.350 --> 00:03:30.690
B and then we provide what we're actually matching on.

48
00:03:30.740 --> 00:03:36.110
So match on table a column is equal to Table B column match.

49
00:03:36.170 --> 00:03:42.810
So what does that actually look like in practice so if we color code this and think of the tables as

50
00:03:42.870 --> 00:03:48.150
Venn diagrams and if you look up sequel joins on google image search you'll see a ton of Venn diagram.

51
00:03:48.150 --> 00:03:53.850
So a lot of people like to think of it this way if we see here that we're selecting from table A enter

52
00:03:53.910 --> 00:04:00.240
joint on table B where A table a column match is equal to table B that column match.

53
00:04:00.240 --> 00:04:05.390
So we're essentially saying grab table a and then grab table B.

54
00:04:05.490 --> 00:04:11.690
And because it's an inner join only grab the rows that happen to be in both table a and table B.

55
00:04:11.940 --> 00:04:16.740
And we have to actually join these tables on a particular column such as the named column that we saw

56
00:04:17.070 --> 00:04:23.840
in registrations and Loggins because we know the names are unique over the small universe of people.

57
00:04:23.860 --> 00:04:26.130
There's only one Andrew only one Bob etc..

58
00:04:26.430 --> 00:04:31.650
Now something to keep in mind especially if it inner join is notice that this Venn diagram essentially

59
00:04:31.650 --> 00:04:37.260
is only filled in in the crossover middle essentially stuff that can be found in both of these circles

60
00:04:37.260 --> 00:04:44.490
table a and Table B because of that inner join is essentially symmetrical which means if you switched

61
00:04:45.060 --> 00:04:51.090
select from table A and then inner join table B to look like this select from table B inner join on

62
00:04:51.090 --> 00:04:54.000
table a you would get the same result.

63
00:04:54.090 --> 00:04:59.730
So getting from table A and then joining on table B is the same as getting from Table B and then inner

64
00:04:59.730 --> 00:05:01.120
joining on table eight.

65
00:05:01.140 --> 00:05:05.540
Keep in mind this is only true for an inner join in this particular case.

66
00:05:05.580 --> 00:05:10.290
So switching around the orders here even switching around the column match order doesn't really matter

67
00:05:10.290 --> 00:05:18.160
for an inner join because it's the same regardless because this is a symmetrical Venn diagram so it's

68
00:05:18.160 --> 00:05:19.470
actually work through this.

69
00:05:19.600 --> 00:05:24.050
And what would actually happen in a more realistic situation with the example tables here we're going

70
00:05:24.050 --> 00:05:30.630
to say select all the columns from registrations inner join Loggins.

71
00:05:30.670 --> 00:05:36.700
So that's essentially saying take registrations table and then perform an inner join with Loggins seeing

72
00:05:37.060 --> 00:05:42.700
the rows that happen to be in both registrations and Loggins and then we have to decide what column

73
00:05:42.700 --> 00:05:45.720
we're actually looking at in order to perform this inner join.

74
00:05:45.820 --> 00:05:47.260
In this case we'll do it on the name.

75
00:05:47.260 --> 00:05:49.890
We'll say on registrations dot name.

76
00:05:49.930 --> 00:05:51.810
So it's the table name dot.

77
00:05:51.850 --> 00:05:57.250
And then the column name is equal to the table name dot column name so log and start name.

78
00:05:57.250 --> 00:06:02.470
And keep in mind you could swap any of these orders around because it's an inner join it's symmetrical.

79
00:06:02.620 --> 00:06:07.810
It doesn't really matter for saying select from registrations inner join in Loggins or select from Loggins

80
00:06:08.140 --> 00:06:13.900
inner join on registrations and you can also swap around that on equals sign to be something like on

81
00:06:13.900 --> 00:06:16.210
log ins that name equals registrations.

82
00:06:16.570 --> 00:06:22.650
OK so here we're just generally showing the syntax and we're looking at that name column.

83
00:06:22.650 --> 00:06:26.520
So then we look at well where do we have a match in both tables.

84
00:06:26.520 --> 00:06:29.160
And that happens to be Andrew and Bob.

85
00:06:29.160 --> 00:06:32.460
And so we said select all the columns from these.

86
00:06:32.460 --> 00:06:37.140
So that includes the registration I.D. column as well as the log in I.D. column.

87
00:06:37.590 --> 00:06:43.290
So we have these four columns we have the matches and we join them together to see this result.

88
00:06:43.290 --> 00:06:50.400
So this is selecting all the columns from the resulting of registration inner joined with Loggins on

89
00:06:50.400 --> 00:06:51.400
the name column.

90
00:06:51.660 --> 00:06:52.630
OK and that's it.

91
00:06:52.650 --> 00:06:58.840
That's an inner join again an inner join is looking for matches that exist within both tables and here

92
00:06:58.840 --> 00:07:05.250
we are saying select all the columns notice because we said select all the columns the name column happens

93
00:07:05.250 --> 00:07:10.230
to be duplicated or repeated twice because there's both a name and the registrations and the name in

94
00:07:10.230 --> 00:07:17.560
the Loggins if you wanted to get rid of this duplication what you can do is actually specify what columns

95
00:07:17.560 --> 00:07:18.520
you want.

96
00:07:18.520 --> 00:07:25.090
So here I'm saying select registration I.D. Loggins not name then log in I.D. from registrations inner

97
00:07:25.090 --> 00:07:32.200
join Loggins on registrations dot name equals Loggins not name so you might be wondering why do I have

98
00:07:32.200 --> 00:07:37.490
to specify Loggins dot name instead of just saying name.

99
00:07:37.630 --> 00:07:41.530
Well the reason for that is because name existed in both tables.

100
00:07:41.710 --> 00:07:48.490
So we had both tables share a column name which means if I'm selecting something after a join I should

101
00:07:48.490 --> 00:07:54.880
specify what table I'm referring to in regards to the named column and in this case it doesn't really

102
00:07:54.880 --> 00:07:55.440
matter.

103
00:07:55.480 --> 00:08:00.850
I could have said registrations that name or Loggins that name but I should be specifying because there's

104
00:08:00.910 --> 00:08:06.820
a duplicate name column in my circle query I should be specifying what actual column I'm looking at

105
00:08:07.180 --> 00:08:13.380
because recall here we had both the name column from registrations and the name column from Loggins.

106
00:08:13.510 --> 00:08:19.360
So if I only want one of those because it's duplicated I'll specify that I'm looking at Loggins not

107
00:08:19.360 --> 00:08:25.590
name column remember again that table order won't matter in an inner join.

108
00:08:25.590 --> 00:08:31.980
And also if you see just join without the inner postcard circle will treat it as an inner join.

109
00:08:32.130 --> 00:08:38.040
Now I'd highly recommend that you always type out the full inner join but some people as they get really

110
00:08:38.040 --> 00:08:43.740
used to post equal just use the shorthand of join with C's which defaults to inner join.

111
00:08:44.490 --> 00:08:51.440
OK let's go ahead and jump the PGA Amman and work through a couple of examples OK here we are in PGA

112
00:08:51.440 --> 00:08:52.170
admin.

113
00:08:52.440 --> 00:08:58.650
Now if we come over here to schemas under public under tables we can see the various columns that are

114
00:08:58.710 --> 00:09:04.830
in the tables so if we take a look at for example the customer table we can expand the columns and we

115
00:09:04.830 --> 00:09:10.350
can see we have the customer I.D. and then the associated information is that such as store I.D. First

116
00:09:10.350 --> 00:09:16.980
Name Last Name Email et cetera and we can see in the payment table we have the payments as well as a

117
00:09:17.190 --> 00:09:20.310
specific payment I.D. and then the customer I.D..

118
00:09:20.400 --> 00:09:25.830
So what I want to begin exploring is if there was a way I could join the payment table with the customer

119
00:09:25.830 --> 00:09:31.760
table in order to get maybe the customer email associated or face specific payment.

120
00:09:31.770 --> 00:09:39.660
So for example I can say select everything from payments we'll go ahead and run that.

121
00:09:39.750 --> 00:09:45.580
Let's put this on two lines together just for readability.

122
00:09:45.580 --> 00:09:51.370
So I run this and I can say I have a payment I.D. and then a customer I.D. staff by the rental the amount

123
00:09:51.620 --> 00:09:52.750
et cetera.

124
00:09:52.780 --> 00:09:55.000
Let's go ahead and do the following.

125
00:09:55.330 --> 00:10:05.350
We'll say select everything from payment and we'll perform an inner join with the customer table.

126
00:10:05.350 --> 00:10:10.120
So this is essentially table a enter joined with Table B.

127
00:10:10.330 --> 00:10:16.390
And since I'm doing an inner join I'm only going to get back results where that particular customer

128
00:10:16.390 --> 00:10:19.830
happens to be both in the payment table and in the customer table.

129
00:10:20.050 --> 00:10:23.590
And that I have to decide what I'm actually going to join them on.

130
00:10:23.650 --> 00:10:29.410
So I have to join them on a column that is associated with both the payment table the customer table

131
00:10:29.800 --> 00:10:35.490
and I can say I have this customer I.D. column which essentially uniquely identifies every single customer.

132
00:10:35.680 --> 00:10:46.390
So go ahead and join it on and then we'll say payment Dot's customer underscore I.D. equal to the customer

133
00:10:46.390 --> 00:10:46.880
table.

134
00:10:46.880 --> 00:10:55.040
That customer I.D. And if we run this we should get back a lot of columns so we run this and we can

135
00:10:55.040 --> 00:10:56.390
expand on this.

136
00:10:56.390 --> 00:11:00.830
And now you'll see I have the payment I.D. customer I.D. essentially all the information from the original

137
00:11:00.830 --> 00:11:01.730
payment table.

138
00:11:02.090 --> 00:11:08.030
But if I keep going further now I see the repeated information based off customer I.D. but now it's

139
00:11:08.030 --> 00:11:09.290
on the customer table.

140
00:11:09.290 --> 00:11:14.830
So I see the story the first name last name email address etc..

141
00:11:14.920 --> 00:11:19.970
All right now let's see how we can select certain columns from each table.

142
00:11:20.110 --> 00:11:25.360
If I'm referring to a column that can only be found in one of the tables then I don't need to specify

143
00:11:25.360 --> 00:11:26.960
what table it should come from.

144
00:11:27.280 --> 00:11:32.230
Luckily Postgres sequel is smart enough to understand that if I refer to something such as select the

145
00:11:32.260 --> 00:11:38.170
payments I.D. column since that's only found in the payment table I don't need to actually clarify what

146
00:11:38.170 --> 00:11:39.610
table it should come from.

147
00:11:39.610 --> 00:11:44.560
However if I'm referring to something like customer underscore I.D. that can be found in both tables

148
00:11:44.740 --> 00:11:49.630
so I should clarify what table I'm actually asking the customer I.D. from and since I'm asking for payment

149
00:11:49.630 --> 00:11:54.100
I.D. I should probably link it to the customer I.D. from the payment table.

150
00:11:54.100 --> 00:12:01.810
So I do this by saying payments dot and then I ask for the customer I.D. And then finally let's go ahead

151
00:12:01.810 --> 00:12:07.980
and choose some column that is unique to the customer table for example their first name.

152
00:12:08.140 --> 00:12:14.100
So we'll simply say something like first underscore name and let's go ahead and try that out.

153
00:12:14.110 --> 00:12:16.480
I'll put this from on a new line here.

154
00:12:16.480 --> 00:12:22.780
So I'm selecting the payment I.D. which is unique to the payment table payment the customer I.D. customer

155
00:12:22.830 --> 00:12:25.000
idea is not unique to either table.

156
00:12:25.000 --> 00:12:30.730
So I clarify what table I'm actually referring to for that column and then we select first name first

157
00:12:30.730 --> 00:12:36.220
name was unique to the customer table so I don't need to say customer dot first name optionally you

158
00:12:36.220 --> 00:12:41.470
can't say customer dot first name and nothing will happen or nothing will change but it's just easier

159
00:12:41.470 --> 00:12:43.060
to say just first name.

160
00:12:43.060 --> 00:12:46.390
So it's going to run this and see the results notice now.

161
00:12:46.410 --> 00:12:50.880
I could see payment I.D. customer I.D. and first name.

162
00:12:50.880 --> 00:12:54.360
So this the general syntax that we're using for inner join.

163
00:12:54.360 --> 00:13:02.130
Notice how the inner join is only going to join customers that are found in both payment and the customer

164
00:13:02.130 --> 00:13:03.180
table.

165
00:13:03.210 --> 00:13:09.330
Essentially what that means is by providing this inner join I'm not going to see customers that have

166
00:13:09.330 --> 00:13:15.930
never created any sort of payment because I'm only looking for customer I.D. that are found in both

167
00:13:15.930 --> 00:13:18.410
the payment table and the customer table.

168
00:13:18.570 --> 00:13:20.880
Because of this inner join.

169
00:13:20.990 --> 00:13:30.200
So again General syntax I select columns from a table let's say table a inner join on table B and then

170
00:13:30.320 --> 00:13:36.680
on payment box might be equal to customer that customer I.D. So table a the identifying column equal

171
00:13:36.680 --> 00:13:42.170
to table B and the same identifying column keep in mind this column could be called something else in

172
00:13:42.170 --> 00:13:43.370
the customer table.

173
00:13:43.370 --> 00:13:48.590
It could be maybe shortened to just C underscore I.D. but as long as they're referring to the same thing

174
00:13:48.620 --> 00:13:50.500
the customer I.D. That's OK.

175
00:13:50.660 --> 00:13:56.240
Typically in a well-designed database these should have the same column name but keep in mind sometimes

176
00:13:56.240 --> 00:13:59.210
the column name will be slightly different in one table than the other.

177
00:13:59.210 --> 00:14:04.040
So it's up to you as the sequel query developer to just make sure and double check that it's referring

178
00:14:04.040 --> 00:14:05.270
to the same thing.

179
00:14:05.360 --> 00:14:10.070
And as I mentioned before for an inner join technically these orders don't really matter.

180
00:14:10.070 --> 00:14:19.490
I could say from customer inner join with payment and if I run this actually get back the exact same

181
00:14:19.490 --> 00:14:23.840
results and depending on what version of sequel you're running or post postcard sequel they may be in

182
00:14:23.840 --> 00:14:25.120
a slightly different order.

183
00:14:25.130 --> 00:14:30.080
However keep in mind those results should be exactly the same because we're only looking at the intersection

184
00:14:30.440 --> 00:14:34.270
of that Venn Diagram stuff that's both in table and table B.

185
00:14:34.280 --> 00:14:39.780
So it didn't really matter what order you're looking at it because that Venn diagram is symmetrical.

186
00:14:40.070 --> 00:14:41.820
OK that's it for the inner join.

187
00:14:41.840 --> 00:14:44.060
Again this is pretty much the simplest joint possible.

188
00:14:44.120 --> 00:14:46.930
Just looking at rows that happen to be in both tables.

189
00:14:47.060 --> 00:14:48.560
Thanks and I'll see you at the next lecture.
