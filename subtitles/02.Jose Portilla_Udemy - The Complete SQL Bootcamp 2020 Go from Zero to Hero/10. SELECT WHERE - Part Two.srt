1
00:00:05,430 --> 00:00:10,680
Welcome back everyone to the Select where Part 2 lecture where we're going to head straight to P.G.

2
00:00:10,680 --> 00:00:15,540
Adelman and coat along with a couple of examples just to give you an idea of the different use cases

3
00:00:15,540 --> 00:00:20,890
for select where as well as comparison operators and logical operators.

4
00:00:20,890 --> 00:00:24,160
All right let's begin by exploring the customer table.

5
00:00:24,310 --> 00:00:29,170
I'm going to just select everything from the customer table so we can explore it quickly we'll say select

6
00:00:29,650 --> 00:00:34,010
and then Asterix from customer semicolon.

7
00:00:34,090 --> 00:00:40,210
Go ahead and run this and I can see there is a customer I.D. column a store I.D. first name last name

8
00:00:40,270 --> 00:00:46,780
email and address I.D. some active bullying whether or not that customer is active or not so true or

9
00:00:46,780 --> 00:00:48,840
false the date they were created.

10
00:00:48,840 --> 00:00:54,120
Last update and then also an integer corresponding to the active boolean so ones and zeros for the Choose

11
00:00:54,130 --> 00:00:55,460
and false is here.

12
00:00:55,470 --> 00:00:56,130
Okay.

13
00:00:56,290 --> 00:01:00,130
So what can we do here to start filtering out customer information.

14
00:01:00,130 --> 00:01:05,210
Well maybe something I want to know is who has the first name Jared.

15
00:01:05,230 --> 00:01:08,350
Maybe someone comes to the store and asks me.

16
00:01:08,350 --> 00:01:13,810
I'm looking for some customer named Jared so I can say select all the columns from customer we'll go

17
00:01:13,810 --> 00:01:19,490
ahead and delete that semicolon and then we'll say where and this is where we have a condition.

18
00:01:19,570 --> 00:01:24,700
So we have to say the column name in our case its first name so we'll scroll over here you can see we

19
00:01:24,700 --> 00:01:26,600
have first underscore a name.

20
00:01:26,740 --> 00:01:27,830
So we'll say where.

21
00:01:28,060 --> 00:01:35,160
First underscore name is equal to and then single quote capital J.

22
00:01:35,270 --> 00:01:40,840
And then Jared note how the single quotes are essentially automatically ended for you in post Chris

23
00:01:40,840 --> 00:01:44,720
Eagle and P.J. Hedman semicolon optional if you want to end this or not.

24
00:01:44,720 --> 00:01:50,890
We'll go ahead and run this and I can see I have that information for Jared.

25
00:01:50,960 --> 00:01:57,830
Now let's go ahead and explore the film table to see how we can combine conditions with logical operators

26
00:01:58,200 --> 00:02:05,270
we'll say select everything from film run that and it looks like I have different film ideas that are

27
00:02:05,270 --> 00:02:12,650
unique to each film title for each film a description a release here a language I.D. rental duration

28
00:02:12,680 --> 00:02:15,670
rental rate length etc..

29
00:02:15,680 --> 00:02:16,870
So let's start playing around this.

30
00:02:16,880 --> 00:02:23,150
Let's go ahead and find maybe all the rental rates that are higher than four dollars.

31
00:02:23,150 --> 00:02:27,620
Recall that when we use distinct there's usually only three rental rates ninety nine cents to ninety

32
00:02:27,620 --> 00:02:29,370
nine and four ninety nine.

33
00:02:29,420 --> 00:02:39,900
So I can say select everything from film where the rental rates is greater than let's just say for some

34
00:02:39,890 --> 00:02:46,710
I call and go ahead and run that and I can see all the results that are back here are now for ninety

35
00:02:46,700 --> 00:02:47,930
nine forty nine et cetera.

36
00:02:47,930 --> 00:02:52,760
So they're all greater than four dollars and let's go ahead and add a another condition on this so we

37
00:02:52,760 --> 00:02:54,380
can do this for logical operator.

38
00:02:54,530 --> 00:02:59,550
Let's go ahead and choose ones that are expensive to replace those we also have a replacement cost.

39
00:02:59,690 --> 00:03:04,550
Let's go ahead and choose the ones that have a replacement costs greater than or equal to nineteen ninety

40
00:03:04,550 --> 00:03:05,180
nine.

41
00:03:05,370 --> 00:03:10,870
So say and and notice I don't need to rewrite where again.

42
00:03:10,950 --> 00:03:15,750
So the where just applies to all these conditions that I can keep linking together with logical operators

43
00:03:15,750 --> 00:03:26,400
so will rental rate is greater than 4 and let's say replacement cost is greater than or equal to nineteen

44
00:03:27,000 --> 00:03:34,160
ninety nine and because these are numeric types I can directly compare them to these numbers know how

45
00:03:34,160 --> 00:03:37,190
Postgres sequel it's you know what data type it is.

46
00:03:37,190 --> 00:03:43,330
So there's different colors depending if I'm working the strings whether these are keywords in post

47
00:03:43,390 --> 00:03:47,030
sequel or whether they're new metrics we'll go ahead and run this.

48
00:03:47,300 --> 00:03:55,350
And now I can see here that we have 499 and then the more expensive moves to replace 1989 when 8 9 9

49
00:03:55,580 --> 00:04:01,430
et cetera and I can keep tacking on more and more so maybe I want only certain readings maybe I only

50
00:04:01,430 --> 00:04:07,780
want the r movies so you can always move that semicolon and continue on another line where we say and

51
00:04:08,400 --> 00:04:15,270
and then maybe rating is equal to and in single quotes are go ahead and run that.

52
00:04:15,440 --> 00:04:18,560
And now we keep filtering more and more on this etc..

53
00:04:18,710 --> 00:04:23,070
And recall that here we're just asking for all the columns but can always just ask for only certain

54
00:04:23,070 --> 00:04:28,410
columns so I can say select the title from film and then we run this and essentially I get a list of

55
00:04:28,410 --> 00:04:33,690
all the titles where these three conditions happen to be true where the rental rates more than for the

56
00:04:33,690 --> 00:04:38,170
replacement cost is greater than equal to 1989 and the rating is equal to R.

57
00:04:38,400 --> 00:04:43,810
Let's imagine want to answer the question of how many titles there are where these conditions all happen

58
00:04:43,810 --> 00:04:44,910
to be true.

59
00:04:44,910 --> 00:04:53,590
Well what I can do is simply add in a count so I can either count title which is essentially counting

60
00:04:53,590 --> 00:04:55,430
how many rows are returned here.

61
00:04:55,480 --> 00:05:00,220
So if I run this it gives me back that there's thirty four movies where all these conditions happen

62
00:05:00,220 --> 00:05:00,910
to be true.

63
00:05:01,450 --> 00:05:08,260
But if you remember from the Count's lecture I can really pass in any column to this or in fact I can

64
00:05:08,260 --> 00:05:12,820
just write an asterix here which since we just count the number of rows that are returned from the film

65
00:05:12,820 --> 00:05:15,000
table that satisfy these conditions.

66
00:05:15,010 --> 00:05:17,590
And if I run this always get back the same number.

67
00:05:17,590 --> 00:05:19,440
So recall from that count lecture.

68
00:05:19,440 --> 00:05:24,790
It doesn't really matter what actual column I apply here because I'm really just asking the question

69
00:05:24,970 --> 00:05:25,520
here.

70
00:05:25,630 --> 00:05:32,190
How many arrows are return that satisfy these particular conditions.

71
00:05:32,260 --> 00:05:36,190
Let's go ahead and explore a quick example of the or logical operator.

72
00:05:36,340 --> 00:05:41,830
Maybe I only want movies that have an R rating or a P.G. 13 rating.

73
00:05:41,830 --> 00:05:52,710
Well what I can do for that is I can say where rating is equal to R or make sure we spelled this right.

74
00:05:52,710 --> 00:05:58,740
Rating is equal to P.G. 13.

75
00:05:58,770 --> 00:06:01,830
Notice here I'm still counting the number of movies returned here.

76
00:06:01,830 --> 00:06:08,690
I run this and there's four hundred and eighteen movies that satisfy either the R condition or P.G.

77
00:06:08,730 --> 00:06:11,480
13.

78
00:06:11,490 --> 00:06:17,580
Now remember we also have the not equal to operator in case I want everything that is in our movie.

79
00:06:17,580 --> 00:06:24,440
For example I could say something like the following I could say where the rating is not equal to R.

80
00:06:24,480 --> 00:06:28,510
Let's just go ahead and grab all the columns here so we can see the results.

81
00:06:28,620 --> 00:06:34,410
We'll go ahead and run this and if I scroll over to the right you'll notice on the rating that everything

82
00:06:34,410 --> 00:06:40,240
here is everything that's not ours that's G P G P G thirteen NC 17 etc..

83
00:06:40,490 --> 00:06:46,930
So we have all the ratings here but none of these are actually going to then be r All right.

84
00:06:47,000 --> 00:06:49,180
So that's it for this code along examples.

85
00:06:49,250 --> 00:06:53,870
Coming up next we're going to check your understanding by giving you a couple of challenges with these

86
00:06:53,870 --> 00:06:56,650
select where statements hopefully can already tell.

87
00:06:56,650 --> 00:07:01,730
This is a very powerful tool and something you'll be using quite often when it comes to your sequel

88
00:07:01,730 --> 00:07:02,780
queries.

89
00:07:02,780 --> 00:07:03,890
I'll see you in the next lecture.
