WEBVTT
1
00:00:05.520 --> 00:00:10.640
Welcome everyone to this lecture on this sub query in this lecture.

2
00:00:10.650 --> 00:00:15.960
We're going to be discussing how to perform a sub query as well as how to use the exist function in

3
00:00:15.960 --> 00:00:23.550
conjunction of a sub query a sub query allows you to construct more complex queries essentially performing

4
00:00:23.850 --> 00:00:28.730
a query on the results of another query or using the results of another query.

5
00:00:28.860 --> 00:00:35.590
The syntax is relatively straightforward and involves the use of to select statements let's imagine

6
00:00:35.590 --> 00:00:41.240
some hypothetical table that consists of the student names and their resulting test scores.

7
00:00:41.260 --> 00:00:46.420
So it's very simple table of just two columns which means a standard query on this table if you wanted

8
00:00:46.420 --> 00:00:51.940
to grab everything would look like the following we say select the student column comma great column

9
00:00:51.970 --> 00:00:58.000
from test scores and this will return back to columns a student's name such as A and then the grade.

10
00:00:58.060 --> 00:01:05.290
Let's say ninety five percent let's imagine you wanted to grab the average grade across the entire class.

11
00:01:05.390 --> 00:01:10.060
Then you would just say select average grade from test scores.

12
00:01:10.100 --> 00:01:15.590
So we already know how to cram all the information from the table as well as the average score or average

13
00:01:15.590 --> 00:01:21.930
grade from all the students relative as you wanted to answer this question.

14
00:01:22.080 --> 00:01:30.020
How can we get a list of students who scored better than the average grade given what we already know

15
00:01:30.020 --> 00:01:33.890
so far it looks like we need to actually do this in two steps.

16
00:01:33.920 --> 00:01:38.630
First we would have to get the average grade and then write that down somewhere and then compare that

17
00:01:38.630 --> 00:01:42.960
to the rest of the table against it to filter out the students.

18
00:01:42.980 --> 00:01:49.210
This is where we can actually as a sub query so this is worries so query can help us get the results

19
00:01:49.330 --> 00:01:52.230
in a quote unquote single query request.

20
00:01:52.270 --> 00:01:55.340
Essentially just need to type out everything one time.

21
00:01:55.390 --> 00:01:57.620
So the way we do this is the following.

22
00:01:57.850 --> 00:02:06.450
We would say select student grade from test scores where grade is greater then and here in parentheses.

23
00:02:06.460 --> 00:02:12.090
We have our sub query where we're going to have select average grade from test scores.

24
00:02:12.220 --> 00:02:13.620
So notice what we're doing here.

25
00:02:13.690 --> 00:02:16.930
We're first going to run the code that's inside the parentheses.

26
00:02:16.930 --> 00:02:22.090
The sub query that's going to return back the average grade across the table then we're gonna be able

27
00:02:22.090 --> 00:02:27.980
to use that result in order to select students who have grades greater than the average.

28
00:02:28.030 --> 00:02:32.950
So we're call that inside the parentheses since this is gonna be run first.

29
00:02:32.950 --> 00:02:38.890
This is going to yield some sort of result such as 70 and then once that sub query is done and returns

30
00:02:38.890 --> 00:02:45.190
its results sequels then going to run this other query outside of the sub query so you'll end up getting

31
00:02:45.220 --> 00:02:50.740
a list of students and the grades where they happen to be above 70 or whatever the average happens to

32
00:02:50.740 --> 00:02:51.670
be.

33
00:02:51.670 --> 00:02:57.040
So this allows us to simply type this out instead of having to do two separate queries writing the results

34
00:02:57.040 --> 00:02:59.210
out of one and then using it in another.

35
00:02:59.290 --> 00:03:04.840
And this is now going to be flexible to any changes within the table.

36
00:03:04.840 --> 00:03:08.720
The sub query is performed first since inside the parentheses.

37
00:03:08.860 --> 00:03:14.290
Keep in mind we can also use the in operator in conjunction of a so query to check against multiple

38
00:03:14.290 --> 00:03:16.570
results returned.

39
00:03:16.670 --> 00:03:22.370
For example let's imagine we wanted a sub query that operated using a separate table.

40
00:03:22.460 --> 00:03:27.920
So we wanted to grab the students in grades from the test scores table where the student student happened

41
00:03:27.920 --> 00:03:31.870
to be present inside another table so we could do this if a join.

42
00:03:31.870 --> 00:03:37.820
Possibly but the other way we could do it is with a sub query so we could in our sub query say select

43
00:03:37.820 --> 00:03:43.400
the student name from the honor roll table and then that will yield back some results of the student

44
00:03:43.400 --> 00:03:44.260
names.

45
00:03:44.300 --> 00:03:49.550
For example let's say Zac Chris and Carissa are the students in the honor roll and then after that some

46
00:03:49.550 --> 00:03:54.920
queries and executing we can say select a student and their grade from test scores where a student is

47
00:03:54.920 --> 00:03:57.120
in this list of students.

48
00:03:57.200 --> 00:04:02.570
So note here this seems to follow along very similar to a join but sometimes especially for complex

49
00:04:02.570 --> 00:04:06.720
queries it's easier to think of them as a sub query.

50
00:04:06.770 --> 00:04:11.980
Now the exists operator is used to test for the existence of rows in a sub query.

51
00:04:12.560 --> 00:04:17.930
Typically a sub query is passed in the existing function to check whether or not any rows are returned

52
00:04:17.930 --> 00:04:22.450
with a sub query so the typical syntax would look like this.

53
00:04:22.480 --> 00:04:29.260
We say select some column name from some table name where exists and then the actual sub query so select

54
00:04:29.260 --> 00:04:34.300
column name from table name where we have some sort of condition and then that's going to return true

55
00:04:34.300 --> 00:04:40.340
or false depending on whether or not there were any rows returned so some queries and exists are really

56
00:04:40.340 --> 00:04:42.080
best learned through example.

57
00:04:42.140 --> 00:04:46.850
So let's go ahead and jump the PGI admin and work through some examples of using a sub query as well

58
00:04:46.850 --> 00:04:49.870
as the exist function within PGI admin.

59
00:04:49.920 --> 00:04:51.880
Okay here I am inside PGI admin.

60
00:04:51.980 --> 00:04:58.250
Let's go ahead and work through an example similar to what we saw in the slides of a sub query so to

61
00:04:58.250 --> 00:05:03.770
do this I'm going to first select everything from the film tables so we can remind ourselves what the

62
00:05:03.770 --> 00:05:10.730
format is it looks like the film table has film the title description etc. and it also has a rental

63
00:05:10.730 --> 00:05:11.400
rate.

64
00:05:11.660 --> 00:05:18.200
Let's go ahead and calculate or return back the films that have a rental rate that is higher than the

65
00:05:18.320 --> 00:05:23.240
average rental rate for all the films similar to the test score example.

66
00:05:23.240 --> 00:05:28.520
So the way we do that is we start off by it depending on how you want to work this from the inside out

67
00:05:28.520 --> 00:05:29.480
for the outside in.

68
00:05:29.810 --> 00:05:35.150
Let's go ahead and start with the sub query so the sub create should be first calculating that average

69
00:05:35.510 --> 00:05:42.840
rental rate so the average rental rate of all the films we expand on this can go ahead and see it's

70
00:05:42.840 --> 00:05:45.210
two dollars and ninety eight cents.

71
00:05:45.210 --> 00:05:50.400
So this is going to be our sub query instead of having to use the scratch pad and write down this number.

72
00:05:50.400 --> 00:05:53.010
Let's go ahead and have this be more dynamic.

73
00:05:53.010 --> 00:05:54.150
Wrap this in parentheses.

74
00:05:54.150 --> 00:06:02.100
So now it's a sub query and then we're going to do is say select go ahead and select the title column

75
00:06:02.790 --> 00:06:13.460
and the rental rate column from the film table where and he were going to say rental rate is greater

76
00:06:13.460 --> 00:06:18.500
than it's going to be greater than the results of this sub create which is two dollars and 98 cents

77
00:06:18.860 --> 00:06:24.100
which means when I run this I should see back all the rental rates here for another nine to ninety nine

78
00:06:24.110 --> 00:06:24.800
et cetera.

79
00:06:24.890 --> 00:06:28.680
These are all greater than two dollars and 98 cents.

80
00:06:28.720 --> 00:06:29.230
Okay.

81
00:06:29.390 --> 00:06:34.370
So notice here that the sub query in parentheses will get executed first in order to calculate that

82
00:06:34.370 --> 00:06:39.430
average and then it becomes part of this larger query.

83
00:06:39.440 --> 00:06:46.080
The other thing that's important to notice is this particular sub query returns back just a single value.

84
00:06:46.190 --> 00:06:51.860
The average rental rate which means it's OK to use comparison operator against such as is equal to is

85
00:06:51.860 --> 00:06:58.580
greater than is less than if you're sub query however returns back multiple values then you need to

86
00:06:58.580 --> 00:07:00.840
use the in operator on it.

87
00:07:00.890 --> 00:07:06.860
So let's work through a more complex example where we're going to actually use a join a long face sub

88
00:07:06.860 --> 00:07:09.890
query to some queries can actually have a joint in it.

89
00:07:09.890 --> 00:07:13.270
So first let's explore a couple of tables that we haven't seen in a while.

90
00:07:13.280 --> 00:07:15.540
So I just wanna make sure we remember them.

91
00:07:15.680 --> 00:07:21.640
I'm going to select everything from the rental table.

92
00:07:21.740 --> 00:07:28.670
So if we run this expand this back out again we have a rental i.e. the rental date inventory I.D. customer

93
00:07:28.670 --> 00:07:33.830
I.D. and then we have a return date which is we're going to be focusing on and then a staff I.D. and

94
00:07:33.920 --> 00:07:36.100
a lab or at last update.

95
00:07:36.230 --> 00:07:43.560
We also have inventory so let's check our inventory table run that this has an entire inventory I.D..

96
00:07:43.580 --> 00:07:44.690
Fill my the story.

97
00:07:44.740 --> 00:07:51.970
And then alas update there so let's imagine we have a situation where I want to actually grab the film

98
00:07:51.970 --> 00:07:57.010
titles that have been returned between a certain set of dates.

99
00:07:57.160 --> 00:08:05.200
So if we go back to select everything from rental we have this rental date let's go ahead and grab all

100
00:08:05.200 --> 00:08:11.500
the films that have been returned between let's say May twenty ninth of 2005 and May 30th of 2005.

101
00:08:12.100 --> 00:08:19.480
So that would be select in this case everything from rental and then we're gonna do here is say where

102
00:08:20.380 --> 00:08:26.900
this return date if we come back here we have the return date is between

103
00:08:29.060 --> 00:08:40.910
2005 and let's say May 29 and 2005 May 30th.

104
00:08:41.600 --> 00:08:47.630
So you run this and now these everything here has been returned basically on May 20 9th.

105
00:08:48.170 --> 00:08:58.390
OK so notice here that in the actual rental table I do not have the film I.D. So if I want to film I.D.

106
00:08:58.480 --> 00:09:06.310
I'm going to need to return to join this rental table with inventory which actually connects the inventory

107
00:09:06.310 --> 00:09:12.310
I.D. because those here I have an inventory I.D. so I can use that in conjunction of the inventory table

108
00:09:12.640 --> 00:09:14.390
to then grab the film I.D..

109
00:09:14.530 --> 00:09:21.400
So I have a specialized primary key for each rental and then I have the inventory I.D. so I'm going

110
00:09:21.400 --> 00:09:21.970
to use that.

111
00:09:22.750 --> 00:09:34.480
So let's say instead of select everything from rental we're going to say select inventory the film I.D.

112
00:09:35.320 --> 00:09:39.430
from rental and let's perform at joint on this.

113
00:09:39.430 --> 00:09:44.050
So we'll say inner join on inventory

114
00:09:46.810 --> 00:09:55.390
on inventory the inventory I.D. equal to rental inventory.

115
00:09:55.590 --> 00:09:59.510
Make sure we spelled this right inventory underscore I.D..

116
00:09:59.640 --> 00:10:01.350
Let me zoom out just a tad.

117
00:10:01.360 --> 00:10:03.060
We can see this whole thing.

118
00:10:03.090 --> 00:10:09.570
So what I'm doing here is I'm going to grab the film I.D. from the inventory table because it's not

119
00:10:09.570 --> 00:10:12.090
available to me on the rental table.

120
00:10:12.300 --> 00:10:18.810
And then I can use the inventory I.D. column that happens to be in both inventory and rental table in

121
00:10:18.810 --> 00:10:24.240
order to join these together and then I'm filtering based off the return date.

122
00:10:24.240 --> 00:10:28.620
And if you want you can specify the return date being part of the rental table but it's only found in

123
00:10:28.620 --> 00:10:35.910
the rental table so you can either do where rental that return date or just return date because it's

124
00:10:35.910 --> 00:10:38.030
exclusive to just one of the tables.

125
00:10:38.040 --> 00:10:41.850
So you don't need specify what actual table we're looking at.

126
00:10:41.880 --> 00:10:49.380
So let's go ahead and run this and now I get back this list of film I.D. So this is a list of all the

127
00:10:49.380 --> 00:10:53.930
film I.D. that happened to be returned between these two dates.

128
00:10:53.940 --> 00:10:56.520
Now let's imagine I wanted the title of these.

129
00:10:56.610 --> 00:11:05.450
Well what I could do is I could use this as my sub query and I have this list of results which means

130
00:11:05.450 --> 00:11:07.680
I can use the N operator again.

131
00:11:07.700 --> 00:11:12.770
Note this sub query is returning back multiple results so I can use the in operator and I can just say

132
00:11:12.770 --> 00:11:27.340
select fill my d comma title from film where the film I.D. is in and then we have this list of film

133
00:11:27.340 --> 00:11:28.130
I.D..

134
00:11:28.360 --> 00:11:34.100
So I run this and now I get back the film might be as well as the title.

135
00:11:34.200 --> 00:11:39.230
Keep in mind postcard sequel is going to operate this as efficiently as possible.

136
00:11:39.330 --> 00:11:43.260
So the order is not going to be maintained if you do want to do some sort of ordering.

137
00:11:43.380 --> 00:11:49.410
You would do that at the very end after this last parentheses because technically this so query happens

138
00:11:49.410 --> 00:11:49.850
first.

139
00:11:49.860 --> 00:11:54.660
It gives you back that list then you organize everything here and then at the very bottom on the last

140
00:11:54.660 --> 00:12:00.570
line make sure it's outside the princes of the subgroup you can say order by something like title and

141
00:12:00.570 --> 00:12:04.960
it will order by title or alternatively you can order by the film.

142
00:12:05.760 --> 00:12:14.080
OK so that is a sub query using the in operator because a sub query returns back multiple results and

143
00:12:14.080 --> 00:12:18.220
finally let's walk through an example of using the exists operator.

144
00:12:18.490 --> 00:12:23.530
Let's imagine we wanted to find customers who have at least one payment whose amount is greater than

145
00:12:23.590 --> 00:12:29.320
11 and we actually want to grab the first name and last name of those customers the way we can do this

146
00:12:29.320 --> 00:12:39.700
using the exists operator is the following we'll say select the first name and last name from the customer

147
00:12:39.700 --> 00:12:47.270
table and we'll go ahead and say customer as C where and this is where we're going to use the exists

148
00:12:47.550 --> 00:12:48.480
operator.

149
00:12:48.700 --> 00:12:55.640
So recall that the existing operator basically just checks to see if Rose exists in the actual returns

150
00:12:55.640 --> 00:12:56.320
sub query.

151
00:12:57.020 --> 00:12:59.380
So that means we're gonna do this.

152
00:12:59.390 --> 00:13:07.600
We're going to say exists in the subcommittee will say select what's going to select everything from

153
00:13:07.990 --> 00:13:17.920
and we'll say payment as P where let's put this on multiple lines it's a bit easier to read.

154
00:13:18.160 --> 00:13:28.210
We'll say where p the customer I.D. is equal to C which is the original customer table thought customer

155
00:13:29.200 --> 00:13:36.340
I.D. and amount is greater than 11.

156
00:13:36.360 --> 00:13:41.280
So now all we're doing here we're going to say select the first name and last name from the customer

157
00:13:41.280 --> 00:13:49.710
table where and then the exists operator is checked to see if any rows a return based off this sub query

158
00:13:50.130 --> 00:13:56.190
where we're saying select everything from the payment table where the payment customer I.D. matches

159
00:13:56.190 --> 00:14:02.370
the customer I.D. and the amount they paid which comes from the payment table if you want.

160
00:14:02.370 --> 00:14:06.320
You could say P the amount but amount is exclusive to the payment table.

161
00:14:06.390 --> 00:14:09.300
So we don't need to clarify further is greater than 11.

162
00:14:09.330 --> 00:14:14.670
So if we run this we get back the names of.

163
00:14:14.670 --> 00:14:17.730
In this case if I expand on this these eight people.

164
00:14:17.820 --> 00:14:25.620
So it's the first and last names of people who happen to have at least one payment whose amount is greater

165
00:14:25.620 --> 00:14:32.630
than eleven dollars so in this example what's happening is for each customer in the customer table the

166
00:14:32.630 --> 00:14:39.110
sub query checks the payment table to find if that customer made at least one payment.

167
00:14:39.110 --> 00:14:46.430
So if that particular customer made at least one payment using this matching criteria and that the amount

168
00:14:46.880 --> 00:14:53.060
is greater than 11 if you wanted to do the opposite of this essentially check for customers that have

169
00:14:53.060 --> 00:14:58.910
not made any payment greater than eleven dollars you could add a not operator in front of exists there

170
00:14:59.390 --> 00:15:05.120
run this and then you would get back basically any customer that wasn't happened that did not happen

171
00:15:05.120 --> 00:15:07.390
to be one of those eight customers.

172
00:15:07.430 --> 00:15:08.890
Okay that's it.

173
00:15:08.960 --> 00:15:10.160
And I'll see you at the next lecture.
