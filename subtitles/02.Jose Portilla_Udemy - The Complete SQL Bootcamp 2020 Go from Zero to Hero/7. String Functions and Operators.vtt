WEBVTT
1
00:00:05.450 --> 00:00:06.560
Welcome back everyone.

2
00:00:06.590 --> 00:00:12.200
In this lecture we're going to be discussing string functions and operations luckily Postgres sequel

3
00:00:12.200 --> 00:00:17.510
provides us a variety of string functions and operators that let us do things like edit combine and

4
00:00:17.570 --> 00:00:19.310
alter text data columns.

5
00:00:19.880 --> 00:00:24.830
Let's jump to the documentation as well as P.G. admin to see what's available to us and also work through

6
00:00:24.830 --> 00:00:26.750
some typical examples.

7
00:00:26.750 --> 00:00:26.990
All right.

8
00:00:26.990 --> 00:00:28.700
Here I am inside my browser.

9
00:00:28.700 --> 00:00:30.040
I have PGI admin open.

10
00:00:30.050 --> 00:00:36.310
But before we explore it I want to just show you the documentation page for string functions and operators.

11
00:00:36.410 --> 00:00:42.140
So if you go to this page and documentation its postwar sequel dot org slash Doc slash current slash

12
00:00:42.140 --> 00:00:47.320
functions dash string or you just look up string functions and operators plus postcard sequel.

13
00:00:47.450 --> 00:00:52.430
You'll notice that very similar to the mathematical functions page it gives you a list of functions

14
00:00:52.580 --> 00:00:59.240
the return data type descriptions examples and then results so you can take a look at the different

15
00:00:59.240 --> 00:01:03.890
types of functions you can do things like strength and coordination so you can concatenate two strings

16
00:01:03.890 --> 00:01:06.170
together in order to get some sort of results.

17
00:01:06.170 --> 00:01:10.470
You can also do things like check the length of strings lowercase strings etc..

18
00:01:10.580 --> 00:01:16.070
So lots of different things searching for sub strings within a certain pattern as well as pattern and

19
00:01:16.070 --> 00:01:17.350
regular expression matching.

20
00:01:17.390 --> 00:01:22.900
You can check out Section nine point seven in the documentation for more details on that case.

21
00:01:22.910 --> 00:01:26.920
Regular expressions and pattern matching is something you're already quite familiar with.

22
00:01:26.990 --> 00:01:32.660
Recall that we also have like an I like as operators that can be used with things like wild cards.

23
00:01:32.660 --> 00:01:40.220
There's other string functions as well things like converting from string to some sort of encoding depending

24
00:01:40.220 --> 00:01:42.580
on what language you're using et cetera.

25
00:01:42.620 --> 00:01:44.650
So lots and lots of different options here.

26
00:01:44.720 --> 00:01:49.460
We definitely don't have time nor do we need to really go through all these since a lot of them you

27
00:01:49.460 --> 00:01:54.620
won't really experience yourself in a typical query but we will go over some really common use cases

28
00:01:54.710 --> 00:02:00.650
especially with this string concatenation often you want to assemble some sort of string or text data

29
00:02:01.010 --> 00:02:02.410
based off other columns.

30
00:02:02.450 --> 00:02:07.860
So let's jump to Pete Chapman for here an explorer just a few typical examples.

31
00:02:07.910 --> 00:02:12.500
We're gonna be dealing with the customer table so quickly show you what's in the customer table in case

32
00:02:13.160 --> 00:02:14.120
you have forgotten.

33
00:02:15.020 --> 00:02:16.310
So let's run this.

34
00:02:16.310 --> 00:02:22.310
We can see the customer I.D. store I.D. and we're gonna be working with here is the first name and last

35
00:02:22.310 --> 00:02:22.610
name.

36
00:02:23.090 --> 00:02:28.190
So notice that these customers already have an email later on we're gonna be showing you how to possibly

37
00:02:28.190 --> 00:02:33.140
construct an example email through a sequel query in case you had to do that.

38
00:02:33.140 --> 00:02:39.560
But first let's show you how you can perform a very simple function call that operates on tax data.

39
00:02:39.770 --> 00:02:44.630
For example let's say you wanted to grab the length the first name of somebody to do that.

40
00:02:44.660 --> 00:02:50.030
We would simply look up in the documentation how you would actually grab the length and if you start

41
00:02:50.030 --> 00:02:52.580
searching here for things like length.

42
00:02:52.580 --> 00:02:57.320
Eventually you would find by scrolling down and kind of exploring this that there's actually a length

43
00:02:57.320 --> 00:03:00.380
function so you'd follow the example here.

44
00:03:00.380 --> 00:03:02.400
Here are all the examples are shown effectual strings.

45
00:03:02.420 --> 00:03:10.670
We can just pass in a text data column and then so we'll say select and you can put this in all caps

46
00:03:10.670 --> 00:03:18.180
if you want just reformatting purposes select length from first name or from customer here we run this.

47
00:03:18.230 --> 00:03:20.390
Now we have the length of that first name.

48
00:03:20.610 --> 00:03:23.840
So maybe you wanted to use that as some sort of identifier.

49
00:03:23.840 --> 00:03:26.410
OK now let's show you how to perform concatenation.

50
00:03:26.430 --> 00:03:30.990
In fact if you go to documentation it's one of the very first things they talk about string concatenation

51
00:03:31.470 --> 00:03:36.330
and what they do is they use these two pipe operators in a row usually on your keyboard that's right

52
00:03:36.330 --> 00:03:43.970
above the backslash so let's go ahead and concatenate first name along with last name.

53
00:03:44.020 --> 00:03:48.340
So if we say first name space two pipe operators.

54
00:03:48.340 --> 00:03:57.250
And then last name from customer we run that couple of things to note here is there is no space currently

55
00:03:57.340 --> 00:04:00.280
between the first name and the last name in the results.

56
00:04:00.340 --> 00:04:02.410
Also this column doesn't have a name.

57
00:04:02.950 --> 00:04:04.960
Let's go ahead and fix these.

58
00:04:05.050 --> 00:04:08.640
Let's start off with fixing the fact that there is no space there.

59
00:04:08.680 --> 00:04:13.870
So we just hold post Chris equal to take the first name and immediately concatenate it with the last

60
00:04:13.870 --> 00:04:14.420
name.

61
00:04:14.650 --> 00:04:21.640
If we want we can add in another concatenation of just a space string.

62
00:04:21.640 --> 00:04:26.020
So note what I'm doing here I'm saying first name concatenated with this empty space.

63
00:04:26.170 --> 00:04:30.580
So notice there is a space here between these two single quotes and then concatenate that again with

64
00:04:30.580 --> 00:04:31.630
the last name.

65
00:04:31.630 --> 00:04:35.770
So now when I run this I get the spacing between the first name and the last name.

66
00:04:36.190 --> 00:04:38.460
And you could replace this with whatever you want.

67
00:04:38.530 --> 00:04:40.920
So if you wanted to put two dashes there.

68
00:04:40.990 --> 00:04:43.460
Notice now there's two dashes there.

69
00:04:43.510 --> 00:04:46.390
So we'll keep it as just a space.

70
00:04:46.390 --> 00:04:50.740
And then the other thing we wanted to fix here was the fact that we just have this kind of weird question

71
00:04:50.740 --> 00:04:51.930
mark column question mark.

72
00:04:52.150 --> 00:04:58.090
So we can use the alias to work with this will say select first name last name as and let's just go

73
00:04:58.090 --> 00:04:59.980
ahead and type this as full name.

74
00:04:59.980 --> 00:05:03.850
We run this and now we see we've been able to change that they'd output to a full name.

75
00:05:03.850 --> 00:05:08.070
So a very typical query here for using string concatenation.

76
00:05:08.350 --> 00:05:14.640
You can always put in other functions as well onto these columns and concatenate at the same time.

77
00:05:14.710 --> 00:05:21.130
For instance we could uppercase these by using upper and pass those columns into this so we can say

78
00:05:21.160 --> 00:05:27.610
upper here as well and now when we run this notice that the full name is now in full uppercase.

79
00:05:27.610 --> 00:05:33.580
You can always expand this column width to see the full results and I'll show you one last kind of more

80
00:05:33.580 --> 00:05:39.850
complex example to reiterate and select everything from the customer table.

81
00:05:39.850 --> 00:05:44.740
Let's imagine that for some reason we don't already have an e-mail for these customers or maybe even

82
00:05:44.740 --> 00:05:48.940
for some employees and we wanted to create an email for them.

83
00:05:48.940 --> 00:05:53.650
Well often if you work at a company you may realize this but there's an e-mail method where you just

84
00:05:53.650 --> 00:05:58.630
take the first letter of the first name and then add in their last name and then add in something like

85
00:05:58.630 --> 00:06:01.180
at whatever your company named dot com is.

86
00:06:01.270 --> 00:06:07.790
Let's see if we can follow that simple process using sequel so what I'm going to do here is do this

87
00:06:07.790 --> 00:06:08.900
in a couple of steps.

88
00:06:08.930 --> 00:06:14.390
First we know we need to concatenate the first name or first letter of the first name.

89
00:06:14.420 --> 00:06:19.590
Then the last name and then list is to use at gmail dot com for our example purposes.

90
00:06:19.640 --> 00:06:20.540
So I'm going to do the following.

91
00:06:20.540 --> 00:06:29.170
We'll say first name concatenated with last name connected with.

92
00:06:29.210 --> 00:06:31.490
And then as a string will you say at gmail dot com.

93
00:06:32.360 --> 00:06:33.680
So we run this.

94
00:06:33.680 --> 00:06:36.980
And so far we have a couple of things here.

95
00:06:36.990 --> 00:06:42.560
No I say we want just to use the first letter of the first name and also something that maybe isn't

96
00:06:42.560 --> 00:06:46.850
exactly a problem but we do want to fix this in our examples here for practice.

97
00:06:46.850 --> 00:06:52.010
Is the fact that we have both the first name and last name still capitalized.

98
00:06:52.010 --> 00:06:57.650
So let's go ahead and fix the issue first of instead of grabbing the whole first name.

99
00:06:57.650 --> 00:06:59.430
I just want to grab the first letter.

100
00:06:59.630 --> 00:07:04.310
Now if you're exploring the documentation or you do a quick google search on this you would eventually

101
00:07:04.310 --> 00:07:10.610
figure out that there is a function called Left which returns the first end characters in the string

102
00:07:10.930 --> 00:07:17.090
and the giving example here if you call left on ABC the E and then two as the second parameter it returns

103
00:07:17.090 --> 00:07:23.120
back a B which are the first two letters which means we can use left on the first name column along

104
00:07:23.120 --> 00:07:30.840
with a one to grab that first letter so let's go ahead and run that will say left on first name come

105
00:07:30.840 --> 00:07:35.410
a one in order just to grab that first letter.

106
00:07:35.410 --> 00:07:38.900
So now we have J M P et cetera.

107
00:07:38.950 --> 00:07:44.110
Ellie Smith Johnson so we're able to grab just that first letter and now let's go ahead and lowercase

108
00:07:44.110 --> 00:07:48.180
everything we'll call lower on these results.

109
00:07:48.370 --> 00:07:50.320
So we'll do lower on last name as well.

110
00:07:52.270 --> 00:07:55.990
Run this and we have the expected e-mail addresses.

111
00:07:55.990 --> 00:08:02.770
And if we want we can always say something as our custom email that we created run that.

112
00:08:02.920 --> 00:08:08.950
And this is a very typical example of using string functions and string operators in order to basically

113
00:08:08.950 --> 00:08:15.830
create a new column that is useful for a certain situations such as creating customer email addresses.

114
00:08:15.850 --> 00:08:16.550
OK.

115
00:08:16.720 --> 00:08:21.870
So definitely a big part of this is exploring the documentation and feeling comfortable with it.

116
00:08:21.880 --> 00:08:22.350
Thanks.

117
00:08:22.390 --> 00:08:23.500
And I'll see you at the next lecture.
