1
00:00:05,350 --> 00:00:06,540
Welcome back everyone.

2
00:00:06,550 --> 00:00:13,590
In this lecture we're going to discuss the HAVING clause the HAVING clause allows us to filter after

3
00:00:13,860 --> 00:00:15,780
an aggregation has already taken place.

4
00:00:15,810 --> 00:00:18,190
So it comes after a group by call.

5
00:00:18,210 --> 00:00:24,290
Let's take a look back at one of our previous examples let's imagine this very simple query where we're

6
00:00:24,290 --> 00:00:29,780
selecting some sort of company column and then taking the sum of the sales column from some financial

7
00:00:29,780 --> 00:00:30,580
table.

8
00:00:30,620 --> 00:00:36,120
Regroup by company so we're aggregating sales per company.

9
00:00:36,130 --> 00:00:40,970
Now we've already seen we can filter before executing the group by FOR WHERE statement.

10
00:00:41,140 --> 00:00:47,230
For example here I could put aware right before my group buy and say we're company not equal to Google

11
00:00:47,260 --> 00:00:50,560
because maybe I don't want to include Google in my final results.

12
00:00:50,560 --> 00:00:54,760
So that's OK because the company isn't being aggregated in any sort of way.

13
00:00:54,850 --> 00:01:00,310
It is in the group by statement however it's not having an aggregate function being called on it.

14
00:01:00,640 --> 00:01:08,500
So it can use where but what if we actually wanted to filter based off the some sales so keep in mind

15
00:01:08,890 --> 00:01:15,700
that since we're calling some on sales that's not going to happen until after that group by statements

16
00:01:15,730 --> 00:01:22,030
executed all the way at the bottom which means we cannot use where to filter based off aggregate results

17
00:01:22,120 --> 00:01:26,720
because those happen after the actual where statement is executed.

18
00:01:26,740 --> 00:01:34,150
So if after performing the group by and calculating the sum of sales per company I wanted to then perform

19
00:01:34,210 --> 00:01:40,650
an additional filter on that result based off the sum of sales I could add the having clause.

20
00:01:40,780 --> 00:01:47,290
So having allows us to use the aggregate result as a filter along with a group buy so you can essentially

21
00:01:47,290 --> 00:01:52,090
think of this as a where statement but only for something that is being aggregated through the group

22
00:01:52,090 --> 00:01:55,590
by and hopefully can see that connection quite clearly here.

23
00:01:55,600 --> 00:02:03,090
So again here I'm able to now filter based off the aggregate result of some of sales in my having clause.

24
00:02:03,100 --> 00:02:05,910
So here I'm saying do the filter of the where.

25
00:02:05,950 --> 00:02:11,650
And then after you group buy go ahead and do another filtering where we're having the sum of sales greater

26
00:02:11,650 --> 00:02:19,390
than some number like a thousand dollars so you would end up of a query that looks something like this.

27
00:02:19,420 --> 00:02:24,400
All right let's explore some examples of having in our own database and then jumped the PGA admin now

28
00:02:25,440 --> 00:02:30,410
all right here in the PGA admin I'm going to work through a very similar example that we just made up.

29
00:02:30,490 --> 00:02:34,730
Let's first check out our payment table so select select everything from payment.

30
00:02:34,750 --> 00:02:35,950
Go ahead and run this.

31
00:02:36,160 --> 00:02:39,940
And we're already familiar this we have the customer I.D. staff I.D. et cetera.

32
00:02:39,970 --> 00:02:44,180
Let's go ahead and take the total sum amounts for a customer.

33
00:02:44,200 --> 00:02:53,910
So we'll say select the customer I.D. and then take the sum amount from payment and we will group this

34
00:02:54,120 --> 00:03:00,230
by customer I.D. so we can run this and this all works out fine.

35
00:03:00,250 --> 00:03:05,230
I already know that if I for some reason wanted to filter out certain customers I could say something

36
00:03:05,230 --> 00:03:11,860
like this where customer I.D. maybe I wanted to say not equal to or I could say something like not in

37
00:03:11,860 --> 00:03:18,200
some list of I.D. like let's go ahead and remove one eighty four eighty seven and four seventy seven

38
00:03:18,670 --> 00:03:21,070
we run this again and no problem we saw that.

39
00:03:21,070 --> 00:03:24,490
Now those no longer exist here in the results.

40
00:03:24,490 --> 00:03:31,930
Now what I cannot do is filter with a where statement on some amount because the sum of the amount is

41
00:03:31,960 --> 00:03:34,920
not going to happen until after I called the group by.

42
00:03:34,960 --> 00:03:38,990
So what I'm going to do then it's go to remove this where example to simplify things.

43
00:03:39,100 --> 00:03:49,250
I can say after the group by having some amount and let's just say greater than 100.

44
00:03:49,970 --> 00:03:54,590
So we go ahead and run this and we can check out the results here and now you'll notice everything's

45
00:03:54,590 --> 00:03:58,280
been filtered so all the sums are now greater than 100.

46
00:03:58,280 --> 00:04:02,870
You should also notice just like when we were using order by with an aggregate function on a column

47
00:04:03,230 --> 00:04:05,750
we have to actually specify some amount.

48
00:04:05,750 --> 00:04:15,030
We don't just take amount let's explore using having with a count call instead of just as some call.

49
00:04:15,030 --> 00:04:20,280
We can do this by maybe exploring the customer table just to remind you will select everything from

50
00:04:20,280 --> 00:04:21,590
customer table.

51
00:04:21,630 --> 00:04:29,220
So this is the customer I.D. a store I.D. first name last name their email address I.D. et cetera.

52
00:04:29,250 --> 00:04:34,450
So what we can do here is let's imagine we wanted to know the number of customers per store.

53
00:04:34,740 --> 00:04:41,910
What I could do is if we scroll over here grab the store I.D. and the account number of customer I.D.

54
00:04:41,930 --> 00:04:44,650
associate if them after a group by store right.

55
00:04:45,480 --> 00:04:59,340
So we're going to say store I.D. and then count customer I.D. from customer after a group by store I.D.

56
00:05:00,210 --> 00:05:04,710
we run this and I can see the total count of customers per store.

57
00:05:04,710 --> 00:05:09,570
Keep in mind I don't have to actually pass on customer I.D. because this is just saying how many rows

58
00:05:09,660 --> 00:05:15,780
are there per store I.D. so I could put an asterix here run this again and you'll notice I get back

59
00:05:15,810 --> 00:05:17,820
the exact same results.

60
00:05:17,820 --> 00:05:22,740
Now let's imagine I wanted to select only stores that had more than 300 customers.

61
00:05:22,740 --> 00:05:28,380
Well in this case I'd have to filter based off something it's already been aggregated so I can't do

62
00:05:28,380 --> 00:05:39,940
that where I can't do it with having so I can say having a count Asterix greater than let's say 300.

63
00:05:40,050 --> 00:05:43,110
And that's essentially performing the filter after the group by.

64
00:05:43,460 --> 00:05:46,520
And keep in mind depending on how you want to think about this.

65
00:05:46,670 --> 00:05:55,400
You can switch out an asterisk there for customer I.D. and it will perform the exact same.

66
00:05:55,460 --> 00:05:57,460
So customer and the customer I.T. run this.

67
00:05:57,460 --> 00:05:59,280
We get back the exact same results.

68
00:05:59,320 --> 00:06:01,670
It's up to you which one's easier to read here.

69
00:06:01,690 --> 00:06:08,320
If you come back to this this quite clearly reads as number of customers group by store where the number

70
00:06:08,320 --> 00:06:10,220
of customers is more than 300.

71
00:06:10,270 --> 00:06:15,460
If we just left an asterisk there then we'd have to remember that the customer table represents all

72
00:06:15,460 --> 00:06:17,490
the customers per store there.

73
00:06:17,500 --> 00:06:22,760
OK so let's go ahead and test your skills in the next lecture we'll give you some challenges with the

74
00:06:22,780 --> 00:06:23,850
having class.

75
00:06:23,920 --> 00:06:24,430
I'll see you there.
