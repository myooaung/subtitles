WEBVTT
1
00:00:05.410 --> 00:00:13.370
Welcome back everyone to part one of our lecture series of group by group by allows us to aggregate

2
00:00:13.370 --> 00:00:15.840
columns per some category.

3
00:00:15.920 --> 00:00:22.310
Let's first explore this idea of a simple example and then we'll go over the sequel syntax let's imagine

4
00:00:22.310 --> 00:00:28.580
we have the following table we have some sort of category column here we have A's B's and C's and then

5
00:00:28.580 --> 00:00:32.810
some data value associated with them such as 10 5 2 etc..

6
00:00:33.110 --> 00:00:39.020
We can imagine that maybe the category here stands for some sort of company and the data value is how

7
00:00:39.020 --> 00:00:40.890
much we sold to that company.

8
00:00:40.940 --> 00:00:43.730
So we had one deal of ten dollars for Company A.

9
00:00:43.730 --> 00:00:49.330
Later on we had a five dollar deal for Company A then a two dollar deal for Company B and so on.

10
00:00:49.340 --> 00:00:54.140
So when we actually performing a group buy there's a couple of key things to consider.

11
00:00:54.140 --> 00:00:56.160
The first is this category column.

12
00:00:56.390 --> 00:01:02.480
We need to choose a categorical column to perform the group buy on that is to say categorical columns

13
00:01:02.600 --> 00:01:07.940
are not continuous or at least we're treating them as not continuous for the sake of the group.

14
00:01:07.950 --> 00:01:13.550
By now something to keep in mind is these can actually still be numerical such as cabin class categories

15
00:01:13.550 --> 00:01:14.170
on a ship.

16
00:01:14.330 --> 00:01:21.170
Class 1 2 3 and so on and you should also keep in mind that they actually may appear continuous but

17
00:01:21.230 --> 00:01:23.330
you could treat them as a category.

18
00:01:23.420 --> 00:01:29.480
For example if you recall to our DVD rental database we have different rental rates available such as

19
00:01:29.480 --> 00:01:37.160
99 cents one ninety nine to ninety nine etc. We could treat each of those rental rates as its own separate

20
00:01:37.160 --> 00:01:39.270
class or own separate category.

21
00:01:39.320 --> 00:01:44.990
So just because something is being treated as categorical doesn't necessarily mean it's not numeric.

22
00:01:44.990 --> 00:01:49.820
And we're going to see different examples of that in the next lecture when we actually program out in

23
00:01:49.820 --> 00:01:56.090
sequel some group by statements bullets first go through the idea of what a group buy actually does

24
00:01:56.360 --> 00:01:59.640
and how it relates to aggregate function calls.

25
00:01:59.840 --> 00:02:05.720
So the way a group buy operates is the following We have already chosen our categorical column then

26
00:02:05.720 --> 00:02:10.980
we're going to do is essentially split this table up on a per category basis.

27
00:02:11.150 --> 00:02:16.730
So we have everything that went with Category A then B then C and then we have the corresponding data

28
00:02:16.730 --> 00:02:17.540
values.

29
00:02:17.720 --> 00:02:24.050
Recall that an aggregate function takes in multiple values and reduces them back down to one single

30
00:02:24.080 --> 00:02:32.180
value such as the sum function can take in all these values per category or grouped by category and

31
00:02:32.180 --> 00:02:33.610
then return back there some.

32
00:02:33.710 --> 00:02:40.160
So the total sum of sales to category eight was 15 6 to B and an 18 to C and we could do this with any

33
00:02:40.160 --> 00:02:42.620
of the aggregate functions that we just learned about.

34
00:02:42.770 --> 00:02:48.480
For example we could take the average data value per category seven point five three and nine.

35
00:02:48.650 --> 00:02:51.410
We can even do something like a count per category.

36
00:02:51.560 --> 00:02:53.500
In this case there was two rows per category.

37
00:02:53.510 --> 00:03:00.330
So they're all the same 2 2 and 2 so it's actually explore the general syntax.

38
00:03:00.420 --> 00:03:02.990
So the most basic group I call looks like this.

39
00:03:03.000 --> 00:03:09.240
We select some sort of category column or something we've deemed to be categorical and then we choose

40
00:03:09.240 --> 00:03:12.710
to perform some aggregate function on the data column.

41
00:03:12.720 --> 00:03:18.040
So A.G. here is just some place holder for some aggregate function on some data column.

42
00:03:18.210 --> 00:03:23.630
We select it from the table and then immediately after that we call grouped by that category.

43
00:03:23.630 --> 00:03:31.420
Column so the group by clause must appear right after a frum statement or right after a where statement

44
00:03:33.050 --> 00:03:39.200
so if you want before you do the group by you can filter things out using a where statement.

45
00:03:39.200 --> 00:03:43.020
So here we see just grouping everything together by the category.

46
00:03:43.940 --> 00:03:49.550
But if we wanted to before we actually execute that group by we could have done a where statement essentially

47
00:03:49.550 --> 00:03:55.940
saying something like where category column is not equal to a essentially ignoring all the eight categories

48
00:03:56.240 --> 00:03:58.490
before we went ahead and did the group by.

49
00:03:58.910 --> 00:04:04.010
So the thing keep in mind is the group by either has come directly after a frum statement or directly

50
00:04:04.010 --> 00:04:06.020
after a where statement.

51
00:04:06.020 --> 00:04:10.820
Now one of the most important things to realize when learning about group by is the following in the

52
00:04:10.820 --> 00:04:18.200
actual select statement columns must either have an aggregate function call on them or be themselves

53
00:04:18.320 --> 00:04:19.780
in the group by call.

54
00:04:19.790 --> 00:04:21.280
So what does that actually mean.

55
00:04:21.290 --> 00:04:25.790
This is where beginners often get tripped up in learning about group by so pay close attention to this

56
00:04:25.790 --> 00:04:33.500
one so if we're using a group by statement then if we're selecting that particular column just by itself

57
00:04:33.890 --> 00:04:36.990
it must be included in the group by statement.

58
00:04:37.010 --> 00:04:40.430
So notice here I've decided to select the category column.

59
00:04:40.430 --> 00:04:44.530
Then that particular column must also appear in the group by statement.

60
00:04:44.600 --> 00:04:51.170
The only exception to this is if I'm calling some sort of aggregate function on the column itself.

61
00:04:51.170 --> 00:04:56.240
So in this case because I'm aggregating something on the data column it does not need to be included

62
00:04:56.600 --> 00:05:03.460
in the group by statement so let's imagine a different example we can have something like select company

63
00:05:03.470 --> 00:05:09.130
division and then some of sales so you can imagine we had three columns in this table one were different

64
00:05:09.130 --> 00:05:14.670
companies and then the divisions within that company and then different sales per division per company.

65
00:05:14.680 --> 00:05:20.470
So what we're doing here is again notice that if I'm selecting a column such as company and division

66
00:05:20.730 --> 00:05:23.600
then they must also appear in the group by statement.

67
00:05:23.620 --> 00:05:28.450
So that means we can grouped by multiple columns and we essentially just decide the order to group buy

68
00:05:28.860 --> 00:05:30.670
in a very similar fashion that we decided.

69
00:05:30.670 --> 00:05:35.780
The ordering of different columns when we learned about the order by statement.

70
00:05:35.830 --> 00:05:40.360
So again here I'm selecting column and division since they don't have an aggregate function.

71
00:05:40.360 --> 00:05:47.400
They must appear in the group by CLOs notice again the sales doesn't appear in the group by statement

72
00:05:47.550 --> 00:05:50.960
which means it must have an aggregate function associated with it.

73
00:05:50.970 --> 00:05:58.900
So essentially what this is returning is the total sum of sales per division per company.

74
00:05:59.040 --> 00:06:03.720
And keep in mind that the where statements should not refer to the aggregation result.

75
00:06:03.720 --> 00:06:09.420
So you shouldn't be trying to do any filtering using a where statement on some of sales in this case.

76
00:06:09.570 --> 00:06:14.220
Later on we are going to learn how to do that using the having statement to filter on those results.

77
00:06:14.240 --> 00:06:20.130
But for right now if you are using a where statement in conjunction with a group buy that we're statement

78
00:06:20.160 --> 00:06:25.470
shouldn't make a reference to what is being aggregated such as sum of sales that is what the having

79
00:06:25.470 --> 00:06:28.200
statements for that we're going to learn about later.

80
00:06:28.230 --> 00:06:34.140
So that is what we're doing here is we're saying select company division some of sales from finance

81
00:06:34.140 --> 00:06:40.200
table where a division is in marketing and transport essentially filtering out the divisions before

82
00:06:40.200 --> 00:06:43.650
we actually perform the group buy on the company end division.

83
00:06:43.740 --> 00:06:49.380
And again notice here company in division appear in the group by sales is not because it has the aggregate

84
00:06:49.380 --> 00:06:56.390
function associated with it Here's another example that if you want to sort the results based on the

85
00:06:56.450 --> 00:06:59.890
aggregate you have to make sure to reference the entire function.

86
00:06:59.930 --> 00:07:05.750
So in a simpler example here let's say we were wanted to sum the sales total sales per company then

87
00:07:05.750 --> 00:07:11.360
we could select company some of those sales from the table we would group by company and then the other

88
00:07:11.360 --> 00:07:16.280
thing to notice here is if I actually wanted to order by the sum of sales I don't just say ordered by

89
00:07:16.280 --> 00:07:19.770
sales I have to say order by the sum of sales.

90
00:07:19.790 --> 00:07:25.670
So notice that whatever I'm ordering by that total statement should exist somewhere in that select CLOs

91
00:07:27.630 --> 00:07:31.980
and then you can add something like limit 5 which would essentially show you kind of the top 5 sales

92
00:07:31.980 --> 00:07:36.880
or bottom 5 sales depending if you did ascending or descending order per company.

93
00:07:36.930 --> 00:07:37.650
All right.

94
00:07:37.650 --> 00:07:41.220
So I know we just went over a lot of this and it's best learned through practice.

95
00:07:41.340 --> 00:07:46.980
So I'll see you in part two in the next lecture where we actually practice on our own DVD rental database.

96
00:07:46.980 --> 00:07:47.550
I'll see you there.
