WEBVTT
1
00:00:05.590 --> 00:00:06.660
Welcome back everyone.

2
00:00:06.670 --> 00:00:11.950
In this lecture we're going to be discussing primary and foreign keys fundamental concepts necessary

3
00:00:11.950 --> 00:00:19.290
to understand in order to create tables and sequel let's start with a primary key a Primary Key is a

4
00:00:19.290 --> 00:00:26.640
column or a group of columns used to identify a row uniquely in a table for example in our DVD rental

5
00:00:26.640 --> 00:00:27.260
database.

6
00:00:27.270 --> 00:00:34.170
We saw customers how do unique nominal customer I.D. column as a primary key unique means has to be

7
00:00:34.170 --> 00:00:42.250
distinct for every row and Nono means there must be an entry there for the primary key primary keys

8
00:00:42.340 --> 00:00:47.710
are also important since they allow us to easily discern what columns should be used for joining tables

9
00:00:47.710 --> 00:00:52.300
together so let's see an example of a primary key.

10
00:00:52.390 --> 00:00:58.000
Here's a subset of a screenshot where we selected everything from a customer.

11
00:00:58.200 --> 00:01:04.680
Notice that we have this customer IP column and PGI admin when you grab table information.

12
00:01:04.680 --> 00:01:11.490
It will actually tell you if a column is a primary key for that table by specifying P.K. or primary

13
00:01:11.490 --> 00:01:12.360
key.

14
00:01:12.360 --> 00:01:18.480
And so notice this is a unique integer and it's also non NULL which essentially means that every row

15
00:01:18.720 --> 00:01:21.570
must have an entry here for customer I.D..

16
00:01:21.600 --> 00:01:26.160
So this is a customer at the integer that uniquely identifies each customer.

17
00:01:26.250 --> 00:01:31.500
You wouldn't want to use something like the first name as a primary key because people can share the

18
00:01:31.500 --> 00:01:32.770
same first name.

19
00:01:32.790 --> 00:01:37.950
However they cannot share this unique integer the.

20
00:01:38.140 --> 00:01:45.250
So again it's integer based and unique later on we're going to be learning about the serial data type

21
00:01:45.580 --> 00:01:52.510
which is actually a way of automatically creating these unique integers for us as we enter more data

22
00:01:52.630 --> 00:01:55.270
into a table.

23
00:01:55.270 --> 00:02:02.020
Now let's discuss a foreign key a foreign key is a field or group of fields and a table that uniquely

24
00:02:02.020 --> 00:02:08.920
identifies a row in another table a foreign key is defined in a table that references to the primary

25
00:02:08.920 --> 00:02:16.290
key of the other table the table that contains the foreign key is called referencing table or child

26
00:02:16.290 --> 00:02:23.730
table the table to which the foreign key references is called reference table or a parent table a table

27
00:02:23.730 --> 00:02:30.540
can have multiple foreign keys depending on its relationships with other tables so for example recall

28
00:02:30.540 --> 00:02:36.510
in the DVD rental database payment table each payment row had its unique payment I.D. which was a primary

29
00:02:36.510 --> 00:02:38.050
key for the payment table.

30
00:02:38.250 --> 00:02:44.640
And it also identified the customer that made the payment through the customer i.e. the customer I.D.

31
00:02:44.820 --> 00:02:52.050
within the payment table is a foreign key since it references the customer tables primary key.

32
00:02:52.130 --> 00:02:56.630
So for example let's check out and grab a subset here from the payment table.

33
00:02:56.780 --> 00:03:03.400
So technically grabbing all the Collins but the screenshot only shows a subset notice that for the payment

34
00:03:03.400 --> 00:03:09.880
table we have this payment I.D. and PGI I mean lets you know that it's a primary key because it has

35
00:03:09.880 --> 00:03:10.650
P.K. there.

36
00:03:10.900 --> 00:03:16.130
So we have this payment I.D. which is a unique identifier for every single payment row.

37
00:03:16.180 --> 00:03:22.870
However you'll also notice that we have other I.D. these other ideas are foreign key references.

38
00:03:22.870 --> 00:03:28.660
Now P.J. Batman won't directly tell you through a simple query call whether or not a column is a foreign

39
00:03:28.660 --> 00:03:29.180
key.

40
00:03:29.230 --> 00:03:33.970
We'll discuss how to figure that out in just a little bit but here we can see we have these customer

41
00:03:33.970 --> 00:03:40.390
I.D. staff I.D. and rental I.D. notice that within the payment table it's OK if they're repeated because

42
00:03:40.390 --> 00:03:43.360
the same customer may have made multiple payments.

43
00:03:43.420 --> 00:03:48.820
So these foreign keys the reason they're foreign keys is there a reference to a primary key in another

44
00:03:48.820 --> 00:03:49.630
table.

45
00:03:49.720 --> 00:03:55.470
So a customer I.D. is a foreign QF in payment because it's a primary key in the customer table.

46
00:03:55.510 --> 00:04:01.120
Same with staff I.D. it's foreign often payment because it's a primary within the staff table.

47
00:04:01.120 --> 00:04:08.420
Same with rental and again I mean won't allow you to alert you directly in a simple query call whether

48
00:04:08.420 --> 00:04:09.740
or not this is a foreign key.

49
00:04:09.740 --> 00:04:13.070
They'll only do that for the primary key.

50
00:04:13.120 --> 00:04:18.670
Now you may have already realized that a primary key and a foreign key typically make good column choices

51
00:04:18.670 --> 00:04:25.940
for joining together two or more tables when creating tables and defining columns we can use constraints

52
00:04:26.090 --> 00:04:32.910
to define columns as being a primary key or attaching a foreign key relationship to another table.

53
00:04:33.110 --> 00:04:37.700
And we'll discuss this in more detail when we actually go over the create commands.

54
00:04:37.700 --> 00:04:44.060
However I mentioned that in a simple query call PGE Ataman only directly alert you to something being

55
00:04:44.090 --> 00:04:46.730
a primary key and not a foreign key.

56
00:04:46.730 --> 00:04:51.800
I want to quickly explore the table properties that are available to us and PGA Iman in order to get

57
00:04:51.800 --> 00:04:55.970
information on primary and foreign keys through the properties window.

58
00:04:55.970 --> 00:05:00.950
Since we can't really see them directly through just a simple query call let's jump the PGA airman and

59
00:05:00.950 --> 00:05:05.110
show you how to understand the foreign keys that are present within a table.

60
00:05:05.290 --> 00:05:05.560
Okay.

61
00:05:05.570 --> 00:05:07.550
Here I am in PGA admin.

62
00:05:07.550 --> 00:05:13.100
Recall that we had this example query SELECT everything from payment and I can see here that every single

63
00:05:13.100 --> 00:05:18.710
payment has a unique payment I.D. as a primary key But also notice that we have customer I.D. staff

64
00:05:18.710 --> 00:05:20.040
I.D. and rental.

65
00:05:20.510 --> 00:05:25.680
And just from this query we can't be 100 percent sure that it's a direct foreign key.

66
00:05:25.700 --> 00:05:30.710
Now given how much we work with this DVD rental database we do understand and we're pretty familiar

67
00:05:30.710 --> 00:05:35.330
if the tables enough to understand that this customer I.D. theft and rental like these are foreign keys

68
00:05:35.500 --> 00:05:38.060
but how do we actually understand that officially.

69
00:05:38.060 --> 00:05:40.100
How can we see the dependencies.

70
00:05:40.100 --> 00:05:47.600
Well if you take a look at DVD rental you can go ahead and expand schemas Here give that a little time

71
00:05:47.600 --> 00:05:55.100
to load and as it's expanding what we're going to see is the public relationships and then we have tables.

72
00:05:55.190 --> 00:06:00.470
So expand on tables and then we have scroll down let's go ahead and look at the table we're looking

73
00:06:00.470 --> 00:06:07.660
at right now which is the payment table and then we can expand on this and we can view the columns here.

74
00:06:07.700 --> 00:06:16.730
So if payment I.D. customer I.D. RFID etc. Now if something is a foreign key that is technically a constraint

75
00:06:17.030 --> 00:06:18.550
on that particular column.

76
00:06:18.660 --> 00:06:22.070
Now we're gonna be discussing constraints in more detail in the next lecture.

77
00:06:22.070 --> 00:06:24.110
So let's expand constraints.

78
00:06:24.410 --> 00:06:28.280
And notice here we have certain keys.

79
00:06:28.280 --> 00:06:34.880
So there's actually a little key symbol the golden key symbol is the primary keys is the payment PRIMARY

80
00:06:34.880 --> 00:06:39.800
KEY SO payment underscore P key for primary key.

81
00:06:39.830 --> 00:06:46.580
And notice it shows you that customer I.D. rental I.T. and stuff I.T. are F keys or foreign keys shown

82
00:06:46.580 --> 00:06:49.250
off another little kind of dual key symbol.

83
00:06:49.250 --> 00:06:56.900
So the constraints here will actually alert you to the fact that they are foreign keys within this table.

84
00:06:56.920 --> 00:07:01.720
Now there are a few more ways to actually review this information officially if you want.

85
00:07:01.720 --> 00:07:06.130
You can actually select one of these foreign keys and notice that it's highlighted and once you select

86
00:07:06.130 --> 00:07:08.820
that foreign key over here on your tabs.

87
00:07:08.830 --> 00:07:15.070
Right now we're just on the actual query Ed tab go over to dependencies click on that and it will show

88
00:07:15.070 --> 00:07:21.220
you the dependencies for that particular column and alert you to what tables it's referencing.

89
00:07:21.220 --> 00:07:27.640
So that is here we have this customer I.D. which is a foreign key within this payment table and it's

90
00:07:27.640 --> 00:07:34.210
referencing notice here the customer that customer I.D. essentially telling you that under public schema

91
00:07:34.300 --> 00:07:39.490
we have the customer table and the customer I.D. is that primary key referencing.

92
00:07:39.640 --> 00:07:45.730
So you can view that under dependencies one other way to do this is if you right click on this so right

93
00:07:45.730 --> 00:07:50.920
click on that constraint and select properties it'll actually show you the properties and then you can

94
00:07:50.920 --> 00:07:59.350
expand on this to view columns and it will tell you that it's referencing customer I.D. So it's referencing

95
00:07:59.350 --> 00:08:02.410
that from the public Doc customer table.

96
00:08:02.410 --> 00:08:08.290
So it's just yet another way to actually view what actual primary key it's referencing as a foreign

97
00:08:08.290 --> 00:08:09.760
key if in the payment table.

98
00:08:09.760 --> 00:08:13.630
So lots of different ways you can review this information if you're dealing with a database instead

99
00:08:13.630 --> 00:08:16.360
of tables that you're not 100 percent familiar with.

100
00:08:16.360 --> 00:08:19.450
So again let's imagine we just ran our query.

101
00:08:19.450 --> 00:08:23.750
We see these I.D. columns and we're not 100 percent sure whether or not they're foreign keys.

102
00:08:23.860 --> 00:08:30.430
We simply underneath this little browser icon we go ahead view that table view the constraints right

103
00:08:30.430 --> 00:08:30.700
away.

104
00:08:30.700 --> 00:08:35.920
This will tell you if they're foreign keys if you want more details as far as what this actual foreign

105
00:08:35.920 --> 00:08:43.570
key is referencing you right click go to properties go to columns they'll tell you the schema dot table

106
00:08:43.570 --> 00:08:48.620
that it's referencing and then the column it's referencing within that table.

107
00:08:48.670 --> 00:08:54.100
OK so that's they can figure out more information based off what's available to you in PGA admin for

108
00:08:54.100 --> 00:08:55.840
foreign keys primary keys.

109
00:08:55.840 --> 00:09:02.060
It's a little easier because any query should let you know if it's stated as a primary key constraint.

110
00:09:02.110 --> 00:09:03.820
Thanks and I'll see you at the next lecture.
