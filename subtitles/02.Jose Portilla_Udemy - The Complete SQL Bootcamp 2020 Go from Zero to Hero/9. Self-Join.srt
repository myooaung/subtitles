1
00:00:05,580 --> 00:00:12,960
Welcome back everyone to this lecture on self join a self join is a query in which a table is joined

2
00:00:13,020 --> 00:00:20,100
to itself self joins are useful for comparing values and a column of rows within the same table.

3
00:00:20,160 --> 00:00:25,350
So the reason we talk about this as ADVANCE EQUAL commands instead of in the joint section is because

4
00:00:25,440 --> 00:00:30,420
this sort of use case is more dependent on your table structure and the actual question and trying to

5
00:00:30,420 --> 00:00:30,800
solve.

6
00:00:31,140 --> 00:00:34,770
So it's not as common as just a normal inner join for example.

7
00:00:34,770 --> 00:00:40,950
So let's discuss self join in a little more detail the self join can really be viewed as just the join

8
00:00:41,010 --> 00:00:43,640
of two copies of the same table.

9
00:00:43,680 --> 00:00:48,660
Keep in mind the tables are not actually copied internally but sequel performs the command as though

10
00:00:48,660 --> 00:00:54,210
it were and the other thing keep in mind is there is no special keyword for a self join.

11
00:00:54,210 --> 00:01:00,720
It looks just the same as a simple standard join in it carries the same syntax with the same table happen

12
00:01:00,750 --> 00:01:08,410
to happening to be in both parts however when you are using a self join because you're using the same

13
00:01:08,410 --> 00:01:11,950
table it is necessary to use an alias for the table.

14
00:01:11,950 --> 00:01:15,430
Otherwise the table names would be ambiguous within the self join.

15
00:01:15,430 --> 00:01:21,160
So let's see a syntax example of this in order to see what I'm talking about when I mean the same tables

16
00:01:21,160 --> 00:01:24,160
being joined as well as those table aliases.

17
00:01:24,160 --> 00:01:30,400
So here we can see the syntax for a self join I'm saying select table a thought column comma.

18
00:01:30,400 --> 00:01:38,980
Table B that column from table as table a join table as table B on table a thought some column matching

19
00:01:38,980 --> 00:01:41,200
to Table B that some other column.

20
00:01:41,380 --> 00:01:43,000
So what's actually happening here.

21
00:01:43,000 --> 00:01:46,320
Well the main thing to focus on are these table names.

22
00:01:46,330 --> 00:01:54,160
Notice in green here we're saying from table as table a join table as table B which is me assigning

23
00:01:54,670 --> 00:01:57,530
two different aliases to the same table.

24
00:01:57,580 --> 00:02:00,790
This is what allows me to perform the self join.

25
00:02:01,270 --> 00:02:06,400
The main thing to keep in mind is that even though you see representations of table a table B and just

26
00:02:06,400 --> 00:02:10,830
table here all of these are actually referring to the same table.

27
00:02:11,110 --> 00:02:16,680
We're just using the aliases in order to organize this okay.

28
00:02:16,900 --> 00:02:19,960
So I think it's the best explained through an example.

29
00:02:19,960 --> 00:02:25,830
So I want to show you a more realistic situation of when you would want to actually use this let's imagine

30
00:02:25,830 --> 00:02:31,530
that we have a company and we have some employees in this company and employees have to send reports

31
00:02:31,530 --> 00:02:32,880
to other employees.

32
00:02:32,880 --> 00:02:39,420
So I have this table of employees with their primary key employee I.D. which is just a unique identifier

33
00:02:39,420 --> 00:02:42,740
per employee than the name of that particular employee.

34
00:02:42,930 --> 00:02:50,540
And then the I.D. of the person they need to send the report to so each employee sends reports to another

35
00:02:50,540 --> 00:02:51,450
employee.

36
00:02:51,680 --> 00:02:54,080
For example here I can see that.

37
00:02:54,080 --> 00:02:54,620
Andrew.

38
00:02:54,620 --> 00:03:00,980
Employee Number One sends a report to employee I.D. number three which happens to be Charlie.

39
00:03:01,040 --> 00:03:05,190
So Andrew's sending reports that Charlie Bob's also sending reports to Charlie.

40
00:03:05,270 --> 00:03:08,640
Charlie is sending reports to employee I.D. number four.

41
00:03:08,720 --> 00:03:09,450
So that's David.

42
00:03:09,440 --> 00:03:10,280
So Charlie reports.

43
00:03:10,280 --> 00:03:10,690
David.

44
00:03:10,790 --> 00:03:16,230
And then David sends reports to employee number one which is Andrew.

45
00:03:16,450 --> 00:03:24,340
Now let's imagine I wanted to show the results of the employee name and their reports recipient name.

46
00:03:24,490 --> 00:03:29,590
So I want to go from this employee's table to something that looks like this on the right where I have

47
00:03:29,590 --> 00:03:34,810
the name and then the person they're reporting to instead of just the report I.D. which is the employee

48
00:03:34,810 --> 00:03:42,410
I.D. of the person reporting to technically all this information is in this one singular table.

49
00:03:42,580 --> 00:03:49,480
So I can use a self join to essentially make a copy join it together in order to match the employer

50
00:03:50,110 --> 00:03:54,670
name or employee name with the report idea along with the employee I.D..

51
00:03:54,850 --> 00:04:00,310
So let's break this down here again we have the generalized syntax and let's start swapping out the

52
00:04:00,310 --> 00:04:03,310
components given but we want to accomplish here.

53
00:04:03,400 --> 00:04:08,630
Going from this employees to just the name of the person they report to.

54
00:04:08,930 --> 00:04:13,890
So what I'm going to do is first focus on the tables because that's really what we're doing here.

55
00:04:13,900 --> 00:04:16,790
First things first is we have the main table.

56
00:04:16,870 --> 00:04:19,780
So we already know the name of that table it's just employees.

57
00:04:19,780 --> 00:04:23,680
So if I take a look at my employees table that's just the name of the table I'm working with.

58
00:04:23,680 --> 00:04:31,030
So I'm going to replace that with employees and now it's time to select the first alias which is table

59
00:04:31,060 --> 00:04:31,850
a.

60
00:04:31,900 --> 00:04:38,880
So what I want for my first column is the employee name so I want to think of this as referring to the

61
00:04:38,880 --> 00:04:41,310
employee name based off the employee I.D..

62
00:04:41,340 --> 00:04:49,190
So I'm just gonna refer to that as ENP for employee then the second thing I want to do is focus on the

63
00:04:49,190 --> 00:04:50,700
person they report to.

64
00:04:50,870 --> 00:04:58,460
So for Table B alias I'll go ahead and label that thinking of it as based off the report I.D. so I'll

65
00:04:58,460 --> 00:05:06,210
label that as report that I need to decide what column am I going to join this on or recall that the

66
00:05:06,210 --> 00:05:12,930
employee underscore I.D. column corresponds with the report idea column the report I.D. column was just

67
00:05:12,930 --> 00:05:20,950
representing the employee I.D. number and then the column we actually want to select happens to be the

68
00:05:20,950 --> 00:05:29,290
name for both this theoretical employee's table and this theoretical report table and this is the final

69
00:05:29,290 --> 00:05:30,490
syntax.

70
00:05:30,490 --> 00:05:36,850
So this will take our singular employees table and return back the results of one column of employees

71
00:05:37,240 --> 00:05:39,450
and then the second column of those same employees.

72
00:05:39,460 --> 00:05:46,400
But the person they happen to be receiving reports from in in order to make sure you don't get two columns

73
00:05:46,430 --> 00:05:47,720
with name.

74
00:05:47,900 --> 00:05:50,630
We can always say that second column should be as Rep..

75
00:05:51,290 --> 00:05:56,000
So essentially an alias for that second column that we would on C name name.

76
00:05:56,000 --> 00:05:58,850
Instead we see name rep as shown here.

77
00:05:58,850 --> 00:06:04,370
So we want results showing the employee name and the reports recipient name and again make sure you

78
00:06:04,370 --> 00:06:08,810
kind of pause and make sure you understand the syntax and how we were essentially just swapping out

79
00:06:08,810 --> 00:06:16,040
the tables and swapping out the aliases let's explore a quick example on our own DVD rental database

80
00:06:17,630 --> 00:06:17,940
OK.

81
00:06:17,950 --> 00:06:20,070
Here we are in P.G. admin.

82
00:06:20,140 --> 00:06:26,290
Let's imagine that I wanted to answer the question find all the pairs of films that have the same length.

83
00:06:27,130 --> 00:06:35,020
If we take a look at the film table so select everything from the film table we have the title of the

84
00:06:35,020 --> 00:06:40,910
film and then if I scroll over I also have this length column so what I'm going to be doing is just

85
00:06:40,910 --> 00:06:46,850
focusing on that title column and this length column and I essentially want to figure out what other

86
00:06:46,880 --> 00:06:52,150
films happen to match up together as pairs that have the same length.

87
00:06:52,190 --> 00:06:57,500
So if we take a look at chamber Italian for example which is the first one that I got notice here it's

88
00:06:57,570 --> 00:06:59,300
one hundred seventeen minutes.

89
00:06:59,300 --> 00:07:10,140
So if I say select title length from film where length is equal to a hundred and seventeen minutes and

90
00:07:10,140 --> 00:07:11,250
run this.

91
00:07:11,250 --> 00:07:16,730
Notice that there's besides chamber Italian for other movies a fair prejudice.

92
00:07:16,750 --> 00:07:21,820
Graffiti love magic Moretz and resurrection Silverado that share the same length.

93
00:07:22,200 --> 00:07:28,430
But my final result the way I wanted to look is to have two sets of titles and then their matching length.

94
00:07:28,950 --> 00:07:34,350
So essentially I want to have these paired off chamber Italian for a fair prejudice then chamber Italian

95
00:07:34,350 --> 00:07:39,690
again of graffiti love chamber Italian magic rats and then chamber Italian again finally with resurrection

96
00:07:39,810 --> 00:07:42,030
resurrection Silverado.

97
00:07:42,270 --> 00:07:43,990
So how can we actually do this.

98
00:07:44,070 --> 00:07:47,310
Well to do this I would essentially need two copies at the same table.

99
00:07:47,310 --> 00:07:50,010
So this is perfect for a self join.

100
00:07:50,010 --> 00:07:55,290
So what we're gonna do here is forget about this where for a second and I'm just gonna run this.

101
00:07:55,290 --> 00:08:02,520
So we have select title length from film First let's decide how we actually want to format this.

102
00:08:02,520 --> 00:08:11,400
I'm going to pretend that I have two tables film one and film 2 or EF 1 EF 2 so I'll say F 1 title comma

103
00:08:12,030 --> 00:08:16,990
f 2 title and then I decide to grab the length from one of the tables.

104
00:08:17,100 --> 00:08:19,410
So we'll do it from f 1.

105
00:08:19,410 --> 00:08:25,410
That way I can get something that looks like chamber Italian the mall rat 1 or whatever that film happened

106
00:08:25,410 --> 00:08:29,790
to be called and then or a resurrection Silverado and then hundred and seventeen minutes.

107
00:08:29,850 --> 00:08:34,980
So it's going to do this for all possible pairs of films that have the same length at least with the

108
00:08:34,980 --> 00:08:39,610
ones that for the first instance it found it in the title of the column.

109
00:08:39,690 --> 00:08:56,010
So then we're going to say from film as f 1 and then we're going to do an inner join on film as f 2

110
00:08:56,940 --> 00:09:00,180
and this is where we have to decide what we're actually going to be joining on.

111
00:09:00,660 --> 00:09:14,390
So I'm going to say join film as F two on and I'm going to say grab film I.D. from f 1 and I actually

112
00:09:14,390 --> 00:09:20,180
don't want to set it equal to f to film my D.

113
00:09:20,340 --> 00:09:25,740
Instead I want to say not equals 2 but in order for this to make sense of why we're doing and not equals

114
00:09:25,740 --> 00:09:26,240
here.

115
00:09:26,430 --> 00:09:29,960
And first actually going to do it incorrectly with an equal sign.

116
00:09:29,970 --> 00:09:41,070
So if my f one film D is equal to my F two film I.D. And then I say and F one length is equal to F two

117
00:09:41,070 --> 00:09:42,340
length.

118
00:09:42,360 --> 00:09:47,520
Notice what I'm asking here for I'm basically just gonna match up for example chamber Italian with chamber

119
00:09:47,520 --> 00:09:53,910
Italian again in the next table or its copy so far to run this I'm just basically matching each movie

120
00:09:54,120 --> 00:09:55,200
with itself.

121
00:09:55,200 --> 00:10:01,500
So what I actually want to do is make sure that for example chamber Italians film I d doesn't actually

122
00:10:01,500 --> 00:10:07,630
match with any other film like these on the table but does happen to match with the same lengths.

123
00:10:07,740 --> 00:10:09,870
So I'm gonna say not equal to here.

124
00:10:09,880 --> 00:10:11,540
That's the kind of fundamental difference.

125
00:10:11,700 --> 00:10:13,730
In order to answer this question.

126
00:10:13,800 --> 00:10:16,880
So now when I run this that is what happens I get back.

127
00:10:17,040 --> 00:10:24,110
Chamber Italians matched up with the other titles that happened to share the same length in runtime.

128
00:10:24,120 --> 00:10:32,400
So what I'm doing is I select film 1 title film 2 title film 1 length from film as EF 1 inner join film

129
00:10:32,400 --> 00:10:33,060
as EF 2.

130
00:10:33,060 --> 00:10:38,820
So these are the aliases necessary in order to perform the self join and then on in his particular case

131
00:10:38,910 --> 00:10:44,610
in order to answer the query I had to say not equals to the film D but I did want to make sure that

132
00:10:44,610 --> 00:10:51,090
their lengths matched up and that's an example of a self join using that DVD rental database that we've

133
00:10:51,090 --> 00:10:52,050
been playing around with.

134
00:10:52,640 --> 00:10:55,050
OK thanks and I'll see you at the next lecture.
