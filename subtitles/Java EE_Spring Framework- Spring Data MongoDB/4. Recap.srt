1
00:00:00,680 --> 00:00:01,700
[Autogenerated] in his module.

2
00:00:01,700 --> 00:00:05,320
You saw that that immigration's are a normal part off.

3
00:00:05,320 --> 00:00:10,630
Every software application that goes into production should try toe

4
00:00:10,630 --> 00:00:13,850
automate the migration process as much as possible.

5
00:00:13,850 --> 00:00:18,450
Don't rely on manual scripting because in the long run they won't work,

6
00:00:18,450 --> 00:00:21,710
and they will only give you headaches and pain.

7
00:00:21,710 --> 00:00:25,080
You have the option to either create your own component or

8
00:00:25,080 --> 00:00:27,740
to use an existing migration framework.

9
00:00:27,740 --> 00:00:30,440
If you opt for the letter approach than Mongo.

10
00:00:30,440 --> 00:00:35,470
B is a migration tool that integrates nicely with spring and mom will be.

11
00:00:35,470 --> 00:00:36,230
At this point,

12
00:00:36,230 --> 00:00:39,080
you might be asking yourself if you should use an existing

13
00:00:39,080 --> 00:00:42,280
framework or create your own migration tolling,

14
00:00:42,280 --> 00:00:45,340
and the answer is, it depends.

15
00:00:45,340 --> 00:00:47,570
If you create your own migration components,

16
00:00:47,570 --> 00:00:51,100
then you have complete control over the functionality.

17
00:00:51,100 --> 00:00:55,260
You can meet every aspect of your migration requirements.

18
00:00:55,260 --> 00:00:58,210
However, you do need more time to develop it,

19
00:00:58,210 --> 00:01:00,390
and you saw that it's not very trivial.

20
00:01:00,390 --> 00:01:03,270
If you just interesting framework will save time.

21
00:01:03,270 --> 00:01:07,510
You focus on the business logic instead of infrastructure code.

22
00:01:07,510 --> 00:01:11,320
But some applications might need more features than

23
00:01:11,320 --> 00:01:13,410
any given framework can offer,

24
00:01:13,410 --> 00:01:18,420
so we have limited control on the migration process itself.

25
00:01:18,420 --> 00:01:20,740
In the end, it's your choice.

26
00:01:20,740 --> 00:01:24,220
Either option works fine for certain scenarios,

27
00:01:24,220 --> 00:01:25,660
and you don't have to use Mongol.

28
00:01:25,660 --> 00:01:26,760
Be as a framework.

29
00:01:26,760 --> 00:01:30,390
You can research and find other frameworks that might be better

30
00:01:30,390 --> 00:01:34,110
suited for your own particular needs have just among Kobe because

31
00:01:34,110 --> 00:01:36,490
I've used it in some production applications,

32
00:01:36,490 --> 00:01:39,040
and I was happy with the outcome.

33
00:01:39,040 --> 00:01:40,700
Now we'll go for migrations.

34
00:01:40,700 --> 00:01:43,900
Toe Aristotle, who said that quality is not an act.

35
00:01:43,900 --> 00:01:45,340
It's a habit.

36
00:01:45,340 --> 00:01:48,160
Every application that you ship the production

37
00:01:48,160 --> 00:01:52,090
needs an extensive set off testing.

38
00:01:52,090 --> 00:01:56,590
You should always try to test the persistence layer off your spring application.

39
00:01:56,590 --> 00:02:00,880
And luckily for us, it's not very difficult to create integration.

40
00:02:00,880 --> 00:02:10,000
Testing for spring applications that use Mom will be as a persistent store, and we learn how to do this effectively in the next module.

