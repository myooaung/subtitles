1
00:00:01,020 --> 00:00:03,700
[Autogenerated] it's time to get our hands dirty and write some code.

2
00:00:03,700 --> 00:00:04,380
In his demo,

3
00:00:04,380 --> 00:00:07,800
we're start by creating a simple spring with application and connected

4
00:00:07,800 --> 00:00:11,510
to a mongo database for import the new dependencies.

5
00:00:11,510 --> 00:00:12,580
Then we'll have the connection.

6
00:00:12,580 --> 00:00:16,000
Parameters will apply the annotations that we just learned,

7
00:00:16,000 --> 00:00:20,840
and hopefully our application should connect to an existing Manco server.

8
00:00:20,840 --> 00:00:22,740
Let's write some coat.

9
00:00:22,740 --> 00:00:23,560
Where do we go?

10
00:00:23,560 --> 00:00:27,330
We want to create a brand new spring application well,

11
00:00:27,330 --> 00:00:32,730
to start that spring that I'll I selected a maid from project our languages.

12
00:00:32,730 --> 00:00:33,600
Javon.

13
00:00:33,600 --> 00:00:37,940
The spring with version is 2 to 1 of which is the latest version up until today,

14
00:00:37,940 --> 00:00:39,600
and I want to create a project.

15
00:00:39,600 --> 00:00:41,230
The group would be pro site,

16
00:00:41,230 --> 00:00:47,030
and the artifact will be airport management actually generate and we'll have ah,

17
00:00:47,030 --> 00:00:52,300
brand new empty spring with application that can start to work against.

18
00:00:52,300 --> 00:00:55,790
I took a generated project, and I've opened it in intelligent.

19
00:00:55,790 --> 00:00:59,980
As you can see right here, we just have the bare minimum dependencies.

20
00:00:59,980 --> 00:01:04,190
Basically, we have a dependency on spring starter and spring with starter test.

21
00:01:04,190 --> 00:01:07,860
I also took the Liberty to create a couple of classes to speed things up a

22
00:01:07,860 --> 00:01:11,040
little bit the airport management application class,

23
00:01:11,040 --> 00:01:15,200
his annotated with US promote application and is the spring application and two

24
00:01:15,200 --> 00:01:20,040
point it read around the spring application around method.

25
00:01:20,040 --> 00:01:22,820
I've also created this class called Application Runner,

26
00:01:22,820 --> 00:01:25,680
which implements the command line runner interface.

27
00:01:25,680 --> 00:01:28,880
This exposes the run method his spring.

28
00:01:28,880 --> 00:01:31,190
Every class that implements the command Liar,

29
00:01:31,190 --> 00:01:34,240
honor interface will get executed automatically

30
00:01:34,240 --> 00:01:36,470
after the application bootstraps.

31
00:01:36,470 --> 00:01:41,130
And I want to use this kind of concept to write our use cases.

32
00:01:41,130 --> 00:01:45,090
Then we have our domain and you want to manage flight information.

33
00:01:45,090 --> 00:01:46,560
So I've created a couple of classes.

34
00:01:46,560 --> 00:01:48,440
The 1st 1 is aircraft in.

35
00:01:48,440 --> 00:01:50,380
This class has two properties Ah,

36
00:01:50,380 --> 00:01:53,910
model and number of seats along with some Gethers.

37
00:01:53,910 --> 00:01:56,760
Then we have flight type, which is an imam,

38
00:01:56,760 --> 00:02:00,390
internal or international, And then we have our main entity,

39
00:02:00,390 --> 00:02:02,240
which is flight information.

40
00:02:02,240 --> 00:02:02,390
Now,

41
00:02:02,390 --> 00:02:05,370
flight information contains various properties that are of

42
00:02:05,370 --> 00:02:08,040
interest for people working in airport management.

43
00:02:08,040 --> 00:02:09,170
We have an idea.

44
00:02:09,170 --> 00:02:12,270
We have departure and destination the flight type.

45
00:02:12,270 --> 00:02:15,240
If the flight is delayed, the duration of the flight,

46
00:02:15,240 --> 00:02:16,550
the departure date,

47
00:02:16,550 --> 00:02:22,130
the aircraft and we also have some or did information here created at so

48
00:02:22,130 --> 00:02:25,310
when this flight information was created in our system,

49
00:02:25,310 --> 00:02:29,530
Then we have a stomach constructor and a bunch of getters and centers.

50
00:02:29,530 --> 00:02:31,800
So pretty standard stuff.

51
00:02:31,800 --> 00:02:34,760
We are now ready to connect its application to a mongo

52
00:02:34,760 --> 00:02:38,260
server on Let's Apply the principles in the steps that we

53
00:02:38,260 --> 00:02:41,310
discussed earlier on in his module.

54
00:02:41,310 --> 00:02:43,320
The first thing that you need to do is you two other

55
00:02:43,320 --> 00:02:46,100
dependency for spring daytime.

56
00:02:46,100 --> 00:02:51,170
I'm gonna be so go ahead, opened upon not xml file.

57
00:02:51,170 --> 00:02:54,260
And we're adding a brand new dependency,

58
00:02:54,260 --> 00:02:57,390
a dependency on spring boots, starter data,

59
00:02:57,390 --> 00:02:59,040
manga TV.

60
00:02:59,040 --> 00:03:00,240
We'll kick save.

61
00:03:00,240 --> 00:03:04,240
And now we have all the dependencies needed toe work with mongo to be.

62
00:03:04,240 --> 00:03:07,130
The next step is to add the appropriate annotations

63
00:03:07,130 --> 00:03:09,280
to the flight information class.

64
00:03:09,280 --> 00:03:10,540
Let's do that.

65
00:03:10,540 --> 00:03:15,360
Flight information is our main entity and wantto persisted as a monk a document.

66
00:03:15,360 --> 00:03:18,960
Therefore, we annotate this class with a document.

67
00:03:18,960 --> 00:03:21,390
I also want to change the name of the collection.

68
00:03:21,390 --> 00:03:25,990
I want to save all flight information in a collection called Fights.

69
00:03:25,990 --> 00:03:30,270
Then I have marked the idea property as the I D field off

70
00:03:30,270 --> 00:03:34,140
this flight information class departure city and this nation

71
00:03:34,140 --> 00:03:35,990
city have also been modified.

72
00:03:35,990 --> 00:03:38,710
I think their property names are a bit along.

73
00:03:38,710 --> 00:03:40,990
Therefore, I have renamed them to departure,

74
00:03:40,990 --> 00:03:43,690
and destination was in the at field annotation.

75
00:03:43,690 --> 00:03:47,620
I also an update them with at Indexed because we'll probably do a

76
00:03:47,620 --> 00:03:50,830
lot of filtering around departure and destination.

77
00:03:50,830 --> 00:03:51,740
And finally,

78
00:03:51,740 --> 00:03:55,330
I have marked the created at field with a transient

79
00:03:55,330 --> 00:03:57,840
created that is an audit information.

80
00:03:57,840 --> 00:04:01,750
We need it in our program, but you do not want to persist it in Mongo.

81
00:04:01,750 --> 00:04:05,580
This object is not ready to be saved in a mongo that always

82
00:04:05,580 --> 00:04:07,850
I just opened up Mongo Debbie Campus,

83
00:04:07,850 --> 00:04:11,620
a free graphical interface that helps you to navigate Mongo dippy

84
00:04:11,620 --> 00:04:13,900
databases and execute queries against them.

85
00:04:13,900 --> 00:04:18,010
My Mongol instance isn't star locally on local host Port

86
00:04:18,010 --> 00:04:22,230
27017 That's where we need to connect.

87
00:04:22,230 --> 00:04:25,280
The server is not protected by credentials because it wants on.

88
00:04:25,280 --> 00:04:26,590
My local developed machine.

89
00:04:26,590 --> 00:04:29,580
Lets out this information in the Application Properties file.

90
00:04:29,580 --> 00:04:32,300
The Application Properties file is located here.

91
00:04:32,300 --> 00:04:34,040
Under the resource is Father.

92
00:04:34,040 --> 00:04:37,200
Let's write the necessary properties needs to connect to

93
00:04:37,200 --> 00:04:40,630
Mongo to be we have local host as the server.

94
00:04:40,630 --> 00:04:44,840
Port 27017 which is the default port and the database,

95
00:04:44,840 --> 00:04:47,340
which is airport management.

96
00:04:47,340 --> 00:04:49,740
We don't have any security on his database,

97
00:04:49,740 --> 00:04:52,340
so we don't need to pass in credentials.

98
00:04:52,340 --> 00:04:56,350
We can also use the shorthand version and get rid of the properties above.

99
00:04:56,350 --> 00:05:03,140
We can use spring data Mongol de Bure I and embed everything over here.

100
00:05:03,140 --> 00:05:04,840
So let's go ahead and start.

101
00:05:04,840 --> 00:05:08,170
Its application application is running and I want

102
00:05:08,170 --> 00:05:10,140
to highlight his line over here.

103
00:05:10,140 --> 00:05:15,460
Opened connection to local host Pour 27017 This is a

104
00:05:15,460 --> 00:05:18,930
success message telling us that we have established a

105
00:05:18,930 --> 00:05:21,840
connection toe among were to be severed.

106
00:05:21,840 --> 00:05:23,860
At this point, I could have entered the demo.

107
00:05:23,860 --> 00:05:24,680
However,

108
00:05:24,680 --> 00:05:29,270
I can help myself from wanting to write something in this mango database,

109
00:05:29,270 --> 00:05:30,410
So let's do that.

110
00:05:30,410 --> 00:05:33,740
I opened up the application runner class and I want to

111
00:05:33,740 --> 00:05:36,190
modify it to insert something in Margo.

112
00:05:36,190 --> 00:05:38,170
I want to insert an empty flight.

113
00:05:38,170 --> 00:05:42,720
I replaced the content, and now our application runner looks like this.

114
00:05:42,720 --> 00:05:45,790
We want to inject Margo template in the application.

115
00:05:45,790 --> 00:05:46,060
Rather,

116
00:05:46,060 --> 00:05:49,410
constructor mogul template is like the main class that

117
00:05:49,410 --> 00:05:52,020
executes query against databases.

118
00:05:52,020 --> 00:05:56,010
More on that in the upcoming modules, then in the run method.

119
00:05:56,010 --> 00:05:57,660
I created an empty flight,

120
00:05:57,660 --> 00:06:02,550
and I used the safe method on the Mogul template to persist it.

121
00:06:02,550 --> 00:06:05,930
Let's go ahead, start the application and welcome.

122
00:06:05,930 --> 00:06:09,510
Going back to Mongo Compass, we can see that a new database has been created.

123
00:06:09,510 --> 00:06:15,340
Airport management Airport management contains the collection in flights,

124
00:06:15,340 --> 00:06:20,480
and his collection most likely has the document that we just inserted.

125
00:06:20,480 --> 00:06:22,070
And here it is.

126
00:06:22,070 --> 00:06:27,090
You have this document with an auto generated I D and some basic information.

127
00:06:27,090 --> 00:06:28,450
So what just happened?

128
00:06:28,450 --> 00:06:32,810
Well behind the seas, when we used Margaret Template and the safe method,

129
00:06:32,810 --> 00:06:35,840
it automatic generated a database for us,

130
00:06:35,840 --> 00:06:41,520
the fight collection, and then it inserted that empty flight into the database.

131
00:06:41,520 --> 00:06:45,070
If you already had an existing database or collection,

132
00:06:45,070 --> 00:06:46,300
those would have been used.

133
00:06:46,300 --> 00:06:47,680
Instead, however,

134
00:06:47,680 --> 00:06:57,000
you can see the power and all the things that the Spring Data Mongo Debbie library Thus for us, I think it's pretty amazing

