WEBVTT
1
00:00:01.230 --> 00:00:02.800
[Autogenerated] Now that you've discussed about the

2
00:00:02.800 --> 00:00:06.480
concept behind the dot immigration strategy,

3
00:00:06.480 --> 00:00:09.790
let's look at how we can implement it in a spring application.

4
00:00:09.790 --> 00:00:14.160
Since manual migrations are not an option, we're left with two choices.

5
00:00:14.160 --> 00:00:18.610
We can either create our own migration framework or components horn.

6
00:00:18.610 --> 00:00:21.290
We can use an existing framework.

7
00:00:21.290 --> 00:00:24.340
They both have frozen cause, so let's explore them.

8
00:00:24.340 --> 00:00:25.330
I heard it in the demo.

9
00:00:25.330 --> 00:00:29.030
I have used the command line runners as a way to see data.

10
00:00:29.030 --> 00:00:32.250
I call this the poor man's migration component.

11
00:00:32.250 --> 00:00:35.300
I created the class I injected a mongo template and

12
00:00:35.300 --> 00:00:38.140
implemented a commander runner interface.

13
00:00:38.140 --> 00:00:41.850
This ensure me that each time this spring application began,

14
00:00:41.850 --> 00:00:47.520
then this run method here would execute before the application started.

15
00:00:47.520 --> 00:00:49.390
This approach got the job done,

16
00:00:49.390 --> 00:00:53.710
but it's a pretty simplistic migration to because it

17
00:00:53.710 --> 00:00:56.140
leaves us with a lot of questions.

18
00:00:56.140 --> 00:00:57.540
For example,

19
00:00:57.540 --> 00:01:02.270
Hyung's our migration component going to skill when we have to do plenty of

20
00:01:02.270 --> 00:01:06.150
changes when you have ah lot of changes accumulated over time,

21
00:01:06.150 --> 00:01:12.130
then how will we execute on Lee the needed migrations based on the difference

22
00:01:12.130 --> 00:01:15.440
between the application version and the database version?

23
00:01:15.440 --> 00:01:16.220
Even more,

24
00:01:16.220 --> 00:01:19.260
how are we going to keep track off the application that

25
00:01:19.260 --> 00:01:21.500
Abbas versions in the first place?

26
00:01:21.500 --> 00:01:24.110
These are all questions that you need to think about when

27
00:01:24.110 --> 00:01:26.740
you're building your own migration component.

28
00:01:26.740 --> 00:01:29.130
Now I'm not saying you should not do this.

29
00:01:29.130 --> 00:01:33.570
There are plenty of scenarios when creating your own tooling is beneficial.

30
00:01:33.570 --> 00:01:38.170
But keep in mind that implementing a migration framework is not trivial.

31
00:01:38.170 --> 00:01:41.260
So take your time and do it right together.

32
00:01:41.260 --> 00:01:43.520
Approach is to use a framework.

33
00:01:43.520 --> 00:01:47.230
When you's a framework, you save a lot of time, which is a good thing.

34
00:01:47.230 --> 00:01:51.280
He also increase focus on your application domain, which is another good thing.

35
00:01:51.280 --> 00:01:56.830
However, it's not under your control, so you might lose some flexibility now,

36
00:01:56.830 --> 00:01:59.110
depending on your application requirements,

37
00:01:59.110 --> 00:02:02.140
you can go with either one off these approaches.

38
00:02:02.140 --> 00:02:06.510
However, for the rest of his model, I'm going to be using a library called Mongo.

39
00:02:06.510 --> 00:02:10.550
Being this is a tool which helps you to manage changes your mongo

40
00:02:10.550 --> 00:02:13.320
database and to synchronize them with your application.

41
00:02:13.320 --> 00:02:15.720
If you come from motivational background and you

42
00:02:15.720 --> 00:02:19.530
used the liquid base or fly away, that Monk Obey will feel very,

43
00:02:19.530 --> 00:02:21.020
very familiar.

44
00:02:21.020 --> 00:02:25.140
Let's find out how to use his library in a spring application.

45
00:02:25.140 --> 00:02:29.010
We have to goto upon the XML file and declare it as a dependency.

46
00:02:29.010 --> 00:02:31.380
The artifact ideas Mongol be the group.

47
00:02:31.380 --> 00:02:36.530
Ideas come down, Give her abdomen, Gabi and the current version is 0.13.

48
00:02:36.530 --> 00:02:40.940
Step number two is configuring the Mongol B B.

49
00:02:40.940 --> 00:02:45.330
We can do that by creating a method annotating get with the ad bean

50
00:02:45.330 --> 00:02:48.610
annotation and placing it in a configuration class.

51
00:02:48.610 --> 00:02:52.880
We create a new Mongol be runner, and we pass in the Mongol your eye.

52
00:02:52.880 --> 00:02:54.580
That's the first step.

53
00:02:54.580 --> 00:02:59.510
Then we can set some additional properties on Armando Be Runner, for example.

54
00:02:59.510 --> 00:03:02.780
We can enable it using the set enabled method.

55
00:03:02.780 --> 00:03:06.120
Then we can change the packages in which Manco be

56
00:03:06.120 --> 00:03:08.630
will scan for that immigrations.

57
00:03:08.630 --> 00:03:15.070
His case is going to scan for all the classes in the Pearl site package.

58
00:03:15.070 --> 00:03:17.360
Then we can set the mongo template.

59
00:03:17.360 --> 00:03:20.480
This will make the Monkey Temple available in the migration

60
00:03:20.480 --> 00:03:24.630
classes and finally returned rather and less banal is we can

61
00:03:24.630 --> 00:03:26.770
create a data migration class.

62
00:03:26.770 --> 00:03:29.390
The Mongol bit terminology is that it will be different.

63
00:03:29.390 --> 00:03:33.440
Mongo be has changed logs and change sets.

64
00:03:33.440 --> 00:03:36.810
A cheese log is a class which contains a bunch off

65
00:03:36.810 --> 00:03:39.480
migration operations called Jane Sets.

66
00:03:39.480 --> 00:03:42.630
So we have a change log and then a change that can

67
00:03:42.630 --> 00:03:44.840
contain one or more change sets.

68
00:03:44.840 --> 00:03:47.590
Change logs and chain sets are both order.

69
00:03:47.590 --> 00:03:48.640
In this example,

70
00:03:48.640 --> 00:03:52.060
we're creating a new class called the D B Change Log 001

71
00:03:52.060 --> 00:03:54.710
This glasses annotated with at change lock,

72
00:03:54.710 --> 00:03:58.200
and he has the order of 001 So it's the first change lock

73
00:03:58.200 --> 00:04:01.010
that's going to get executive by the framework.

74
00:04:01.010 --> 00:04:03.890
Then we have a method called seed crew members,

75
00:04:03.890 --> 00:04:06.700
which receives Mongo template as a parameter.

76
00:04:06.700 --> 00:04:09.630
Remember that Toby included Mongo template,

77
00:04:09.630 --> 00:04:13.330
and we made it available when reconfigured a Mangal brother.

78
00:04:13.330 --> 00:04:16.100
This method is annotated with that chain set,

79
00:04:16.100 --> 00:04:21.740
The order of this chain said, is 001 We can also passing an I D and offer off.

80
00:04:21.740 --> 00:04:26.070
This chain said this class can contain many more chances.

81
00:04:26.070 --> 00:04:29.120
You can specify the order using the chance of sanitation and,

82
00:04:29.120 --> 00:04:31.100
of course, can create an additional change log.

83
00:04:31.100 --> 00:04:31.720
In this case,

84
00:04:31.720 --> 00:04:35.590
this change lock will have another of 002 and it has a single change,

85
00:04:35.590 --> 00:04:39.480
said called Update National Ideas for All of our crew members.

86
00:04:39.480 --> 00:04:43.060
This is going to be executed after the first change log.

87
00:04:43.060 --> 00:04:47.380
This is happening because of the order property on the cheap ____ annotation.

88
00:04:47.380 --> 00:04:50.220
I think it's worth mentioning that Mongo be supports

89
00:04:50.220 --> 00:04:54.120
automatic database version detection,

90
00:04:54.120 --> 00:04:57.730
which means that if your application is granted version 10 and your

91
00:04:57.730 --> 00:05:00.810
database at version five release example over here,

92
00:05:00.810 --> 00:05:06.410
then the framework is goingto execute migrations from 6 to 10 automatically.

93
00:05:06.410 --> 00:05:09.090
It won't exactly migrations for a month of five,

94
00:05:09.090 --> 00:05:16.000
because the frame of knows it doesn't have to, and this is a pretty cool feature have in any migration framework.

