1
00:00:00,840 --> 00:00:03,150
[Autogenerated] I think it's time to put the slides down

2
00:00:03,150 --> 00:00:06,270
and start to write some coat in his demo.

3
00:00:06,270 --> 00:00:08,760
We're going to implement the monk Oh operations.

4
00:00:08,760 --> 00:00:11,050
But this time, using report stories,

5
00:00:11,050 --> 00:00:14,530
we're going to look at queries using the query methods,

6
00:00:14,530 --> 00:00:15,510
he asserts.

7
00:00:15,510 --> 00:00:19,020
Updates and it's let's get to it.

8
00:00:19,020 --> 00:00:22,370
In order to implement Mongo operations using report stories,

9
00:00:22,370 --> 00:00:23,640
you first need to create one.

10
00:00:23,640 --> 00:00:26,630
I created the flight information depository under

11
00:00:26,630 --> 00:00:28,750
the parasite Airport Management.

12
00:00:28,750 --> 00:00:32,500
That D be package off course is an interface,

13
00:00:32,500 --> 00:00:36,840
and it extends Mongol report story off flight information and string.

14
00:00:36,840 --> 00:00:37,330
Remember,

15
00:00:37,330 --> 00:00:38,980
flight information is the document that you're

16
00:00:38,980 --> 00:00:41,090
persisting in our among with database.

17
00:00:41,090 --> 00:00:45,310
I also added the ad repositories rotation to make spring aware of _______

18
00:00:45,310 --> 00:00:48,490
do notice that I did not provide any query methods.

19
00:00:48,490 --> 00:00:51,830
I want to leverage the building functionality off the Mongol report

20
00:00:51,830 --> 00:00:55,570
story to perform most of the manga operations.

21
00:00:55,570 --> 00:00:59,790
The first thing that I want implement is the database Cedar Runner.

22
00:00:59,790 --> 00:01:02,190
This time, it doesn't use mongo template.

23
00:01:02,190 --> 00:01:04,730
It uses the flight information repositories.

24
00:01:04,730 --> 00:01:07,690
We declare it is a private field and we're injecting it.

25
00:01:07,690 --> 00:01:09,040
The other constructor,

26
00:01:09,040 --> 00:01:13,380
the seat method creates the data that you want to insert in our database.

27
00:01:13,380 --> 00:01:17,880
More specifically, we're creating six instances off flight information.

28
00:01:17,880 --> 00:01:21,060
Now I want to insert them into the database,

29
00:01:21,060 --> 00:01:24,970
come them and print them on a screen.

30
00:01:24,970 --> 00:01:27,420
The coaches will look like this.

31
00:01:27,420 --> 00:01:30,930
Were first grouping all the flights into a list.

32
00:01:30,930 --> 00:01:32,950
Then you know what we serve them.

33
00:01:32,950 --> 00:01:36,040
We can call the insert method on the report story,

34
00:01:36,040 --> 00:01:38,890
and passing the flights is will execute a batch,

35
00:01:38,890 --> 00:01:41,390
insert toe counter documents in the collection,

36
00:01:41,390 --> 00:01:44,640
the King's the Count method on this depository,

37
00:01:44,640 --> 00:01:50,220
and to print them, we can use the final method on the report story interface.

38
00:01:50,220 --> 00:01:52,830
And we can pass in a sort of definition,

39
00:01:52,830 --> 00:01:56,510
in this case, around to sort by the Partridge City in ascending order.

40
00:01:56,510 --> 00:02:00,470
And then we print the flights we are inserting, we're counting on.

41
00:02:00,470 --> 00:02:04,110
We're printing all the flight information documents without

42
00:02:04,110 --> 00:02:07,120
writing a single line of code in our flight information

43
00:02:07,120 --> 00:02:09,220
repositories To finish the cedar,

44
00:02:09,220 --> 00:02:13,600
we also need to implement the empty method to make sure that all the

45
00:02:13,600 --> 00:02:17,030
prison documents are deleted when the application starts.

46
00:02:17,030 --> 00:02:21,060
Of course, this is a very simple called to the little method under reported.

47
00:02:21,060 --> 00:02:26,640
For instance, now you're ready to fire up the application and see this outcome.

48
00:02:26,640 --> 00:02:29,290
The application finished him against the output on the screen.

49
00:02:29,290 --> 00:02:32,400
We have six flights known database and down below.

50
00:02:32,400 --> 00:02:36,340
We can see them ordered by the departure city.

51
00:02:36,340 --> 00:02:36,880
Great.

52
00:02:36,880 --> 00:02:38,710
Now let's switch to the application.

53
00:02:38,710 --> 00:02:43,130
Rather, the application runner also implements Commander around the interface.

54
00:02:43,130 --> 00:02:45,540
It is said to execute after the cedar.

55
00:02:45,540 --> 00:02:48,390
Hence we have at order set it too.

56
00:02:48,390 --> 00:02:50,790
Then we have to inject the flight information,

57
00:02:50,790 --> 00:02:52,690
re poised to refuel the constructor.

58
00:02:52,690 --> 00:02:53,770
And we're good to go.

59
00:02:53,770 --> 00:02:55,890
The features that you need to implement our the following.

60
00:02:55,890 --> 00:02:58,370
We need to find the flight by Deion printed.

61
00:02:58,370 --> 00:03:03,410
We need to find a flight by D and delayed by 30 minutes.

62
00:03:03,410 --> 00:03:05,560
We need to remove a five biting.

63
00:03:05,560 --> 00:03:09,160
We need to find all the flights by departure and destination.

64
00:03:09,160 --> 00:03:12,820
And we need to print all the flights for the minimum number of Cities 200.

65
00:03:12,820 --> 00:03:18,460
Let's go ahead and implement these methods in order to find imprint of five i d.

66
00:03:18,460 --> 00:03:22,250
We can use the fun buddy method on our flight information boy

67
00:03:22,250 --> 00:03:24,930
story find by a deed eaters and optional.

68
00:03:24,930 --> 00:03:28,170
So, in order to actually get our fight information in tow.

69
00:03:28,170 --> 00:03:32,420
Call the get method and then we can pass it for flight printer,

70
00:03:32,420 --> 00:03:34,450
utility class to delay.

71
00:03:34,450 --> 00:03:37,970
Fly better two minutes when you to update the duration property.

72
00:03:37,970 --> 00:03:40,110
So we need to find the flight.

73
00:03:40,110 --> 00:03:42,640
And again, we're losing the fine by de method.

74
00:03:42,640 --> 00:03:45,750
Then we need to I've dated the values in our case,

75
00:03:45,750 --> 00:03:47,070
the duration men,

76
00:03:47,070 --> 00:03:51,250
and we increase it by 30 and then you can call the same matter on the report

77
00:03:51,250 --> 00:03:55,650
story by passing in the updated flight toe identify body.

78
00:03:55,650 --> 00:04:00,740
We simply call the report story did by the method and passing the appropriate i.

79
00:04:00,740 --> 00:04:01,620
D.

80
00:04:01,620 --> 00:04:05,130
All of this was done using the built in functionality

81
00:04:05,130 --> 00:04:07,640
off the base report story interfaces.

82
00:04:07,640 --> 00:04:10,510
Now, in order to find all the flights body parts,

83
00:04:10,510 --> 00:04:13,950
gin destination or or the flights where the minimal number of seats of

84
00:04:13,950 --> 00:04:17,040
the aircraft is greater than a particular value,

85
00:04:17,040 --> 00:04:19,190
we need to modify our flight information

86
00:04:19,190 --> 00:04:22,150
repositories and adding some query methods.

87
00:04:22,150 --> 00:04:25,340
We need to add two new methods to enable the fitters,

88
00:04:25,340 --> 00:04:29,210
so find all flights by Departure city In Destination city,

89
00:04:29,210 --> 00:04:32,100
we can use the query method conventions.

90
00:04:32,100 --> 00:04:34,210
So we're returning Callisto flights.

91
00:04:34,210 --> 00:04:36,240
We have to find their perfect.

92
00:04:36,240 --> 00:04:40,880
Then we are filtering by departure city and destination city,

93
00:04:40,880 --> 00:04:44,410
and we're using exact value for departure and destination,

94
00:04:44,410 --> 00:04:45,130
then tow.

95
00:04:45,130 --> 00:04:49,020
Find all the flights where the minimum aircraft number of

96
00:04:49,020 --> 00:04:51,740
seats is greater than a provider value.

97
00:04:51,740 --> 00:04:54,870
We have to dig into a sub document now.

98
00:04:54,870 --> 00:04:58,620
A good way to do this is to use the ___ query annotation and filter

99
00:04:58,620 --> 00:05:02,170
the number of seats property off the aircraft field.

100
00:05:02,170 --> 00:05:04,960
Then we can pass in the dollar GT Pfister,

101
00:05:04,960 --> 00:05:07,040
which stands for greater than or equal,

102
00:05:07,040 --> 00:05:11,040
and we have to configure it to take the minimal number of seats as an argument.

103
00:05:11,040 --> 00:05:15,770
That's what dollar sign zero stands for before we tell these

104
00:05:15,770 --> 00:05:17,730
methods in the application on a component.

105
00:05:17,730 --> 00:05:21,760
I want to give you a tip in working with Mongo queries because

106
00:05:21,760 --> 00:05:25,300
you have to write them in a mongo query Syntax.

107
00:05:25,300 --> 00:05:31,030
The best way to do it is to test them first in an I D or in the Mongol council,

108
00:05:31,030 --> 00:05:32,400
and that's what I do.

109
00:05:32,400 --> 00:05:36,330
So I've taken the exact model query that I've written in the depository.

110
00:05:36,330 --> 00:05:38,840
I've pasted it in Mongol Compass,

111
00:05:38,840 --> 00:05:42,740
and we can replace the dollar sign zero with an actual value in this case,

112
00:05:42,740 --> 00:05:43,850
200.

113
00:05:43,850 --> 00:05:48,440
We can then click on find, and we can see that our filter is working.

114
00:05:48,440 --> 00:05:51,720
Now I can copy paste it back into a depository because you know,

115
00:05:51,720 --> 00:05:56,780
it's perfectly fine in order to finish the application honor who

116
00:05:56,780 --> 00:05:59,590
need to call the methods that we just added to our flight

117
00:05:59,590 --> 00:06:02,180
information report story After we called them,

118
00:06:02,180 --> 00:06:03,990
We pretty are put on the screen.

119
00:06:03,990 --> 00:06:07,590
And now I think we're good to test the outcome off our

120
00:06:07,590 --> 00:06:10,670
entire application and we can sit.

121
00:06:10,670 --> 00:06:13,100
Y'all come over here after receiver has finished,

122
00:06:13,100 --> 00:06:14,780
we're grabbing a fight by its i.

123
00:06:14,780 --> 00:06:15,360
D.

124
00:06:15,360 --> 00:06:18,850
We're updating a flight were deleting the same flight.

125
00:06:18,850 --> 00:06:23,000
And then we're printing the flash somebody to Barcelona and then all the

126
00:06:23,000 --> 00:06:26,940
flights by the minimum number of seats greater than 200.

127
00:06:26,940 --> 00:06:28,570
And the filters appear to be working.

128
00:06:28,570 --> 00:06:32,690
So Arquit methods are doing the correct job.

129
00:06:32,690 --> 00:06:33,740
Awesome.

130
00:06:33,740 --> 00:06:34,600
Before I finish is,

131
00:06:34,600 --> 00:06:38,850
the more I want to point out how easy it is to use repositories.

132
00:06:38,850 --> 00:06:43,490
We've written seven lines of code in the repository interface,

133
00:06:43,490 --> 00:06:46,740
and we get so much functionality out of it,

134
00:06:46,740 --> 00:06:52,000
I highly encourage you to use them because they're a great solution. In most cases,

