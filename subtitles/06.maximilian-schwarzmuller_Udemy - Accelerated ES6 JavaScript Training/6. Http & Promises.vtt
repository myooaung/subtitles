WEBVTT

00:00:00.410 --> 00:00:01.670
Of course that's all great.

00:00:01.680 --> 00:00:08.940
But now we also need to take a city name and go to some kind of web service where we can actually then

00:00:09.300 --> 00:00:18.160
well check it or basically get our data for this Tauriel for this course.

00:00:18.170 --> 00:00:24.170
I do use open a weather map that org which is a free service you can use.

00:00:24.240 --> 00:00:32.000
You have to sign up to gate get your AP key which you need to make calls to your to this API.

00:00:32.310 --> 00:00:38.820
But once you've got this key and you will find it in your dashboard once you signed in you can go to

00:00:38.820 --> 00:00:40.170
the API documentation.

00:00:40.170 --> 00:00:42.720
We're going to use the current web or data API.

00:00:42.900 --> 00:00:45.880
But of course feel free to play around with that.

00:00:46.020 --> 00:00:49.070
And here in the API docs you'll learn how to make requests.

00:00:49.080 --> 00:00:54.360
Now we're going to make a very basic request there and chest queried their server and pass a city name

00:00:54.360 --> 00:00:56.430
to get the weather for the city name.

00:00:56.640 --> 00:01:03.810
And as it's just said you will also have to pass the app ideas so your API key which again you'll find

00:01:03.810 --> 00:01:09.630
in your dashboard if you sign in order here to sign up depending on whether you have account an account

00:01:09.650 --> 00:01:10.770
already or not.

00:01:10.770 --> 00:01:12.920
And just as I said it's free to use.

00:01:13.260 --> 00:01:15.650
So it is always a service I'll be using.

00:01:15.910 --> 00:01:23.460
And for this of course I also want to well make a request to the service that could do this in this

00:01:23.630 --> 00:01:24.690
final year.

00:01:24.870 --> 00:01:27.320
But hey we're using much a lot of code here.

00:01:27.330 --> 00:01:34.470
So let's create a new fall and I'll name it HTP chase it does fall I'll trade to logic to make just

00:01:34.470 --> 00:01:36.620
request and handle the response.

00:01:36.750 --> 00:01:40.860
I want to create a class here and I'll name it HTP.

00:01:40.860 --> 00:01:46.650
So if this new class keyword does a class should have a static method because I don't want to instantiate

00:01:46.650 --> 00:01:53.430
this class and I'll name this method fetch data but this will just be a helper class with this helper

00:01:53.430 --> 00:01:54.290
method.

00:01:54.750 --> 00:02:00.150
Now fetch data should get the euro should you or else should use.

00:02:00.150 --> 00:02:04.290
Because we need to pass as well because this will contain or a city name.

00:02:04.290 --> 00:02:09.240
Of course we could all just pass the city name and construct to you are all in here depending on how

00:02:09.240 --> 00:02:11.820
you want to write to us.

00:02:12.030 --> 00:02:20.460
Now in this static method what I want to do is I want to use promises or a promise because of course

00:02:20.460 --> 00:02:24.150
the fetching of the data is an asynchronous task.

00:02:24.150 --> 00:02:25.940
We're not getting it back immediately.

00:02:25.950 --> 00:02:30.370
It will be pretty fast but it's not synchronous.

00:02:30.420 --> 00:02:36.570
So for asynchronous tasks as you'll learn in this Course promises are great to be use and therefore

00:02:36.600 --> 00:02:45.820
here I will simply return and you promise and this new promise as we learned here will also use effect

00:02:45.840 --> 00:02:53.220
aero function takes two inputs two arguments to resolve and they reject method and again using a Fed

00:02:53.390 --> 00:02:53.910
function.

00:02:53.960 --> 00:03:00.660
You're here is to code what I want to do when I well create this promise which I of course do all the

00:03:00.660 --> 00:03:03.000
time here is since I'm returning it.

00:03:03.630 --> 00:03:11.580
Well I want to create a new constant HTP which should be my Exham Al HTP request.

00:03:11.580 --> 00:03:19.890
So this is just built in SML HTP request object which allows me to create such an A-check such an asynchronous

00:03:19.920 --> 00:03:22.220
HTP request.

00:03:22.350 --> 00:03:26.580
I'll then open this request and I'll open with like get my foot.

00:03:26.700 --> 00:03:29.210
Since for always getting data here.

00:03:29.220 --> 00:03:31.420
I'm not passing this as a variable.

00:03:31.440 --> 00:03:37.260
Of course you could write a much more generic HTP service here but I'm going to stick with get that

00:03:37.290 --> 00:03:40.810
I'm passing to you well to which I want to open this request.

00:03:41.430 --> 00:03:47.310
So if the request being opened it's not sent yet and we're not handling any response that we're getting

00:03:47.310 --> 00:03:48.210
.

00:03:48.210 --> 00:03:57.510
So therefore I need to add my own ready state change event handler and here all use a normal function

00:03:57.940 --> 00:03:59.420
.

00:03:59.490 --> 00:04:10.810
BLOCK So and then I want to check if my ready state Buchwald's Exham Oh HTP request done.

00:04:11.190 --> 00:04:16.250
And that's just normal javascript HTP such.

00:04:16.260 --> 00:04:26.220
I'd say the ready state of DHP or of the ex-MIL HTP request object is a number and they can also check

00:04:26.220 --> 00:04:30.150
that against the number here like 0 0 0 or something like that.

00:04:30.510 --> 00:04:37.140
But Exham alleged Shippey request done and so on are just some variables basically saving those numbers

00:04:37.140 --> 00:04:41.470
so that we have a more explicit way of using this or more readable way.

00:04:41.810 --> 00:04:45.190
Basically what I'm doing here is I'm just checking if the request is done.

00:04:45.210 --> 00:04:52.410
So if we've got a response and then if we do have response if the status quo is 200 which would mean

00:04:52.470 --> 00:04:58.440
everything is OK and that is the case that everything was successful.

00:04:58.620 --> 00:05:05.430
Also handle the fact or the case that at the snarfed not successful also only to check if my ready state

00:05:05.520 --> 00:05:17.280
is well done because otherwise I don't want to handle the error or which isn't an error just because

00:05:17.280 --> 00:05:18.460
it's not done yet.

00:05:18.480 --> 00:05:20.580
So I have to check if it's done.

00:05:20.840 --> 00:05:23.760
And in this case I want to do something else.

00:05:23.790 --> 00:05:29.420
So let's start the good case here first we're getting back the response and everything is fine.

00:05:29.670 --> 00:05:33.000
In this case I got my response data.

00:05:34.440 --> 00:05:40.230
And this will just be some date I get back and I will use the both and Chaisson object to parse that

00:05:40.290 --> 00:05:47.360
data and to basically extract the doctor couldn't word to date I get back into a chalice object.

00:05:47.370 --> 00:05:53.960
So hearable X is my response text and response text like do you ready state and so on that are all just

00:05:54.000 --> 00:06:00.340
properties under X amount HDP request object on this both in object of course.

00:06:00.390 --> 00:06:03.060
Now why am I using Jason Parus here.

00:06:03.480 --> 00:06:10.220
If you have a look at the API documentation you'll see how the API will respond.

00:06:10.320 --> 00:06:14.150
And that will send us back Jason by default and we'll get back.

00:06:14.230 --> 00:06:16.620
Does Jason strain.

00:06:16.950 --> 00:06:22.530
So of course chastens a string but of course we want to use both a javascript object and top of the

00:06:22.530 --> 00:06:29.100
string and with checks and Parus we can basically take as Stream which almost looks like a shallow script

00:06:29.130 --> 00:06:36.420
object anyways right to Jason and can convert it into a real challenge object with which we then can

00:06:36.420 --> 00:06:39.070
work but we can access properties and so on.

00:06:39.270 --> 00:06:40.340
So that's what I'm doing here.

00:06:40.350 --> 00:06:45.340
I'm taking the Jason string and I'm creating a channel strip object off it.

00:06:45.960 --> 00:06:51.450
So nomics to have my extract the response data which will be a channel strip object at the end and then

00:06:51.450 --> 00:06:58.230
I call my always solf method because remember we're inside the promise so I'm resoldering because we

00:06:58.230 --> 00:07:02.820
were successful and I want to pass my response data with that.

00:07:03.030 --> 00:07:04.590
Well resoldering here.

00:07:05.160 --> 00:07:11.760
If we reject it or if we are not successful then I'm rejecting this promise here and call the reject

00:07:11.760 --> 00:07:16.100
method and I'll just pass something went wrong.

00:07:17.090 --> 00:07:17.410
So here.

00:07:17.430 --> 00:07:23.670
But using both resolve and rechecks to handle well the success and the Aurora case and with that I'm

00:07:23.760 --> 00:07:24.740
almost done.

00:07:24.750 --> 00:07:28.170
But of course I want to expose this class to other modules.

00:07:28.170 --> 00:07:36.540
Therefore I will use the export keyword of course and to make sure that this will work later on.

00:07:36.540 --> 00:07:43.980
We also have to call HTP send here to actually send the request because right now we're only opening

00:07:43.980 --> 00:07:45.960
it and we're listening to any changes.

00:07:45.990 --> 00:07:47.730
But we're not sending it.

00:07:47.730 --> 00:07:49.560
So that's definitely important to include