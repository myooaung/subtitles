WEBVTT

00:00:01.380 --> 00:00:04.660
So why is this iterator thing useful here.

00:00:04.980 --> 00:00:08.810
Well for two reasons at least I can think of right now.

00:00:09.030 --> 00:00:16.740
One is of course you can make any object iterable all they have to do is implement this symbol here

00:00:16.890 --> 00:00:22.060
and then you are able to loop through that which will allow you to loop through your own objects.

00:00:22.060 --> 00:00:24.290
Now I will show you this later.

00:00:24.580 --> 00:00:31.300
Another reason why this is very cool is you could also overwrite the behavior for example here for the

00:00:31.350 --> 00:00:31.710
array.

00:00:31.710 --> 00:00:41.370
We get back this iterator symbol and behind the scenes as we already learned does it thing here if we

00:00:41.370 --> 00:00:44.080
don't execute it does it thing.

00:00:44.100 --> 00:00:48.510
Here is an object we get back from this function.

00:00:48.870 --> 00:00:56.620
So what we could do is we could also x' aere a symbol which of course is a function.

00:00:57.270 --> 00:01:06.270
And we know that this function will return an object and we know that this object we get also needs

00:01:06.270 --> 00:01:11.280
to have a function called next right because we can execute next.

00:01:11.280 --> 00:01:14.070
So that's what we know about iterator.

00:01:14.100 --> 00:01:19.240
Now what we can do here is in this function we get back here again.

00:01:19.260 --> 00:01:24.140
Also we saw that getback an object law of return statements here.

00:01:24.150 --> 00:01:26.320
But I think you understand my point.

00:01:26.330 --> 00:01:31.740
You get the object with the next function recall here and then when we call it we get back a number

00:01:31.740 --> 00:01:34.060
of check which has this done property.

00:01:34.120 --> 00:01:40.680
Forth for example and the value 10 say we say 10.

00:01:40.680 --> 00:01:44.280
Now let's see what happens if I run my code here.

00:01:45.420 --> 00:01:48.000
Well now you see we totally changed the behavior.

00:01:48.000 --> 00:01:51.450
We now get 10 10 10 and done is always false.

00:01:51.450 --> 00:01:58.440
Now let's change it a bit more and let's say in our function here we have our next value which should

00:01:58.440 --> 00:02:05.910
be 10 at the beginning and then we increment this value whenever we call next.

00:02:05.910 --> 00:02:12.560
So we set next equal to well the incremented by one.

00:02:13.210 --> 00:02:18.420
Then we return done which is false and a turn next value.

00:02:18.870 --> 00:02:24.020
However we will return done as being true.

00:02:24.390 --> 00:02:29.850
If let's say in next value is greater than 15 then this should be true.

00:02:29.850 --> 00:02:34.980
Otherwise this is false just to turn it into ternary operation here.

00:02:35.090 --> 00:02:41.170
Now I am not using my iterator here but instead I'll treat a four off loop.

00:02:41.550 --> 00:02:52.820
So all true Yates is element of aere loop pure and I lock the curved element and of course here that

00:02:52.840 --> 00:02:53.980
should be next value.

00:02:54.090 --> 00:03:01.900
So what do you think will happen if I have to run now get 11 12 13 14 15.

00:03:01.920 --> 00:03:08.490
So of course what I do find here we start at 10 with increment that before we return it for the first

00:03:08.490 --> 00:03:11.580
time which is why the first one was actually 11.

00:03:11.580 --> 00:03:19.510
Then we return done as being false as long as an x value is smaller or equal to 15.

00:03:19.890 --> 00:03:21.570
And thereafter this done.

00:03:21.810 --> 00:03:26.610
Now the for loop will simply loop through the array until done is true.

00:03:26.730 --> 00:03:30.610
So until we have an x value greater then 15.

00:03:30.770 --> 00:03:34.230
And with that we totally changed the way we loop through this array.

00:03:34.350 --> 00:03:35.850
There's still a built in Aerie.

00:03:35.880 --> 00:03:42.360
This a still a built in for a loop but with our overwriting here we changed the behavior of course we

00:03:42.360 --> 00:03:48.780
could also have left the default behavior instead of just double everything or whatever.

00:03:49.050 --> 00:03:55.210
And that is one big advantage or one cool thing about iterators and iterable object.

00:03:55.380 --> 00:04:01.440
You can change the way they work including bold ones like the array like you see here and what you're

00:04:01.440 --> 00:04:04.440
seeing here is function.

00:04:04.740 --> 00:04:14.430
That's the core of each iterator that makes object and iterator it has this function which returns is

00:04:14.430 --> 00:04:21.630
an object which again has this next function which finally returns as an object with done and value

00:04:21.650 --> 00:04:21.760
.

00:04:21.870 --> 00:04:25.290
That's what makes up an iterator and that's how you create your own ones.

00:04:25.350 --> 00:04:28.420
And that's what I'm going to do in the next video.