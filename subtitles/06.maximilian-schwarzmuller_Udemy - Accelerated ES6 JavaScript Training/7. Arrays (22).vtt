WEBVTT

00:00:02.050 --> 00:00:10.530
This new function I want to share on my array I can use the copy with the method here and copy with

00:00:10.530 --> 00:00:14.810
it and allows me to copy a value inside of that array.

00:00:14.820 --> 00:00:16.550
So within that array.

00:00:16.830 --> 00:00:22.820
Now let's say I wanted to copy the Free to a position where Currently I have to.

00:00:22.860 --> 00:00:28.800
So that new array is when free free copy with and allows me to do this so it allows me to copy a value

00:00:28.830 --> 00:00:36.720
inside of this array and I can do this by as a first argument providing the target where I do want to

00:00:36.720 --> 00:00:37.500
copy.

00:00:37.710 --> 00:00:41.420
So one for example of course here is specifying the index.

00:00:41.550 --> 00:00:46.770
So the place where I want to copy the number two of course has to index one since I want to copy it

00:00:46.770 --> 00:00:53.330
here and we have index Yaro index one and then the second argument I specify.

00:00:53.550 --> 00:01:00.780
Well what I do want to copy there and of course here is specify index to to refer to the free here which

00:01:00.780 --> 00:01:07.100
has index 2 since I want to copy the free to the place where currently Toolis.

00:01:07.260 --> 00:01:10.150
So for now I'd run we see one.

00:01:10.320 --> 00:01:14.130
So we get back an array where we copied that item.

00:01:14.130 --> 00:01:18.710
Now if you print out your initial array do you think that has changed too.

00:01:18.800 --> 00:01:21.660
So what you think I'll see if and how it run.

00:01:22.920 --> 00:01:30.000
Yes that changed because all those methods which I execute directly on my array object are not on the

00:01:30.000 --> 00:01:37.290
bolt in global every object but on the array I created will alter or dead ary will not create a new

00:01:37.290 --> 00:01:42.320
one but instead will alter its existing one like here for example.

00:01:42.330 --> 00:01:44.800
So that's of course important to keep in mind.

00:01:45.360 --> 00:01:50.700
Copy elements also takes a number argument optionally of course.

00:01:50.700 --> 00:01:55.430
I can copy if I change this to.

00:01:55.680 --> 00:01:56.610
Index 0.

00:01:56.620 --> 00:02:02.770
So once you start copying at index 0 and over run this of course now I copy to 1.

00:02:02.850 --> 00:02:06.480
But if I add another argument let's say two.

00:02:06.690 --> 00:02:12.360
This will be the end of the place I want to copy.

00:02:12.360 --> 00:02:16.200
So what you think and I'll get if I to run.

00:02:17.220 --> 00:02:19.210
Now I get one when 2.

00:02:19.440 --> 00:02:26.220
Because what this does is it basically wraps all that since I started in the 0 and ended it next to

00:02:27.200 --> 00:02:31.700
I would copy all that to the position I specify as the first argument.

00:02:31.770 --> 00:02:33.340
So to index one.

00:02:33.720 --> 00:02:39.560
So basically it will take this and paste it into here.

00:02:39.570 --> 00:02:44.210
Now that would make the array longer than it is and the function won't do that.

00:02:44.220 --> 00:02:49.740
So it cuts off the excess part and that is how we get this one one too.

00:02:50.070 --> 00:02:57.180
So copy within something you have to think about when using baaed can be really useful if you do have

00:02:57.180 --> 00:03:02.430
a use case where you want to copy things around within an array and then it makes that really easy.

00:03:02.880 --> 00:03:08.550
So I'll turn this array back in to conclude this section on areas here but I want to do is I want to

00:03:08.550 --> 00:03:13.560
show the last method for now that I thought it would be interesting.

00:03:13.800 --> 00:03:21.650
It's the entries Mefford What could you imagine happens if I run this function year.

00:03:23.520 --> 00:03:28.890
I get an object which seems to be an iterator.

00:03:28.890 --> 00:03:39.120
Interesting no since it is an iterator and why don't we simply sign it to a variable and loop through

00:03:39.120 --> 00:03:39.730
it.

00:03:40.080 --> 00:03:48.030
So shelfs loop from my iterator here of course I can do data as you are aware Armond

00:03:50.970 --> 00:03:54.330
and if an hour run what do you think we'll see.

00:03:54.450 --> 00:04:01.050
I get free arrays and each array basically it just describes the position of the individual elements

00:04:01.050 --> 00:04:03.110
of that top array here.

00:04:03.480 --> 00:04:12.840
So the first entry which we extracted with the entry method here has a first element of 0 and a second

00:04:12.840 --> 00:04:14.340
one of one.

00:04:14.340 --> 00:04:20.750
And basically what this means is index zero value 1 which of course is true for the first element in

00:04:20.760 --> 00:04:23.710
this array index of 0 values 1.

00:04:23.730 --> 00:04:27.710
The second one has index one value to this value.

00:04:27.710 --> 00:04:35.790
Here some of the entries Mefford I can get a description of the entries in my array and the description

00:04:35.790 --> 00:04:38.060
is basically an iterator.

00:04:38.130 --> 00:04:44.910
And when I loop frood it iterator a get Peris of index and value which I might use in my code to do

00:04:44.910 --> 00:04:47.330
that and whatever I want to do with it.