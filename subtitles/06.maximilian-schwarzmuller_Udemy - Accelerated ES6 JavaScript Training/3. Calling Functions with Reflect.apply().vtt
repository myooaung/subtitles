WEBVTT

00:00:01.770 --> 00:00:06.690
So we have to look at how we could create an object with refl. construct.

00:00:06.680 --> 00:00:13.110
Now I want to have a look at how we can call methods on our objects and the older you have bind up lie

00:00:13.110 --> 00:00:19.590
and call if you remember that which kind of allow us to control what this will be referring to when

00:00:19.590 --> 00:00:25.890
calling those methods and through the API just offers us a different way again move in the refl. AP

00:00:25.900 --> 00:00:26.030
.

00:00:26.070 --> 00:00:30.230
I asked is central all gathering's repository.

00:00:30.570 --> 00:00:36.360
So in order to demonstrate this I'll start by creating a new class I'll stick to my present class here

00:00:36.370 --> 00:00:36.590
.

00:00:36.990 --> 00:00:44.520
And what I want to do here is I will give it a constructor where I will receive a name and let's say

00:00:45.120 --> 00:00:46.150
an H.

00:00:46.170 --> 00:00:48.860
And of course all set those fields here.

00:00:48.900 --> 00:00:51.370
This age equals eight.

00:00:51.450 --> 00:00:54.820
Then I want to have a dream function like so.

00:00:55.110 --> 00:01:04.890
And here I simply want to printing print Hello I am and then this name example I'll leave out the h

00:01:04.890 --> 00:01:10.770
here because one property is enough to show what I want to show him and then that would create this

00:01:10.770 --> 00:01:16.940
person and that's used to reflect construct Meffert to stay in the refl. world Paris.

00:01:17.010 --> 00:01:23.000
And then I'll pass Max as the first argument the name and then my age 27 as the second argument.

00:01:23.190 --> 00:01:26.850
So with that I created my personal object like before.

00:01:27.030 --> 00:01:33.680
And as I already explained an alternative to a dad would have been to use new person pass Max and the

00:01:33.720 --> 00:01:39.860
age and that's perfectly fine or even shorter I just want to stay in the refl. world here.

00:01:41.010 --> 00:01:42.720
So I'm creating that.

00:01:42.860 --> 00:01:51.990
And once you execute secret method of course I can call Paris and greet and reflect also gives me a

00:01:51.990 --> 00:02:01.890
way to do this I can pull refl. apply here and then I pass the method I want to call person greet without

00:02:01.890 --> 00:02:02.670
parentheses.

00:02:02.700 --> 00:02:10.170
So just as a reference to this method and then the second argument is the important one and why this

00:02:10.190 --> 00:02:11.450
is useful.

00:02:11.460 --> 00:02:16.150
This allows me to specify what this this key forward should refer to.

00:02:16.230 --> 00:02:21.430
And that's of course something important as you probably do know because this is not when you just no

00:02:21.440 --> 00:02:23.790
longer wait to write the function call.

00:02:23.790 --> 00:02:28.380
It's a way to fundamentally change how this behaves in Javascript.

00:02:28.440 --> 00:02:34.740
And as I said you already did have apply or coal to do that but now it's bundled into the refl. API

00:02:34.750 --> 00:02:35.050
.

00:02:35.360 --> 00:02:40.340
So here a concept to what this should refer to and it can't set it equal to prison.

00:02:40.710 --> 00:02:41.900
And that is a forward argument.

00:02:41.910 --> 00:02:46.980
I specify any arguments dysfunction might take of course dysfunction doesn't take any arguments therefore

00:02:46.980 --> 00:02:48.730
I pass an empty array.

00:02:49.170 --> 00:02:57.060
So if I now run this what do you expect to see in the console while you see how I am Max because I'm

00:02:57.120 --> 00:03:05.010
executed person greet and this inside of my class you're also referred to this person objects and so

00:03:05.010 --> 00:03:13.550
I pass this as my this link kind of orlop as I tell it to use this.

00:03:13.590 --> 00:03:17.040
As for this key word got that's complicated.

00:03:17.220 --> 00:03:21.630
I'll show you how it could change just to make clear that this is important.

00:03:22.020 --> 00:03:27.660
If I pass an empty object here what do you think we'll now see.

00:03:28.770 --> 00:03:35.010
Well now my name is undefined because now this year is not referring to this name.

00:03:35.010 --> 00:03:39.630
Instead isn't this keyword will refer to just empty object.

00:03:39.630 --> 00:03:41.820
And this doesn't have a name property.

00:03:42.210 --> 00:03:43.710
It could of course give it one.

00:03:43.740 --> 00:03:51.930
I could say it you name to Anna and they are for now if I run this I see Hello I am Anna and that is

00:03:51.930 --> 00:03:55.900
of course a very important thing with this refl. apply method.

00:03:55.930 --> 00:04:00.740
You're like with the old apply a method which already existed.

00:04:01.080 --> 00:04:06.110
I can't control what this should refer to.

00:04:06.300 --> 00:04:12.120
And that's something you'll often need in your code to achieve certain behaviors or to make sure that

00:04:12.150 --> 00:04:15.210
this is actually referring to the right object.

00:04:15.420 --> 00:04:23.040
So again just in case you were wondering why you would actually use refl. apply instead of the old apply

00:04:23.040 --> 00:04:25.100
or call method simply.

00:04:25.170 --> 00:04:27.150
It's a central repository.

00:04:27.180 --> 00:04:36.510
This refl. object and I think it's a good practice to use refl. instead of the other scattered out places

00:04:36.510 --> 00:04:37.880
which will still work.

00:04:37.890 --> 00:04:43.260
The other functions you know this will still work and you will see in a lot of code and that's no problem

00:04:43.260 --> 00:04:50.500
per se but it certainly is also a good idea to start getting used to reflect and also again to link

00:04:50.490 --> 00:04:53.210
to the next Marchal the proxy API.

00:04:53.490 --> 00:04:59.970
There you will see why they reflect API is really useful in conjunction with it to finish this refl.

00:05:00.000 --> 00:05:01.600
apply section here.

00:05:01.770 --> 00:05:11.490
If I pass something like let's say a prefix which gets Well surprisingly prefix to this string here

00:05:12.270 --> 00:05:15.080
then I would just pass it like though.

00:05:15.090 --> 00:05:17.130
Just as an element in disarray.

00:05:17.160 --> 00:05:20.890
And now if I had run see the three dots at the beginning.

00:05:20.910 --> 00:05:25.520
So that's simply cestus for it argument to pass some arguments to that function call.

00:05:25.560 --> 00:05:28.080
We're executing here.