WEBVTT

00:00:01.460 --> 00:00:09.660
Let's look how a promise looks in the first place all create a new prominence here with the new keyword

00:00:09.660 --> 00:00:11.720
and then the promise object.

00:00:12.000 --> 00:00:21.060
Now does promise object expects a function as an input does function again expect to parameters resolve

00:00:21.150 --> 00:00:22.750
and recheck.

00:00:23.670 --> 00:00:26.070
And I'll come back soon.

00:00:26.520 --> 00:00:32.880
So inside this function body now can write what ever I want to do is in which ever asynchronous task

00:00:32.910 --> 00:00:34.520
I want to execute.

00:00:34.530 --> 00:00:41.290
For example let's say to simulate something which takes some time and then to set a timer either or

00:00:41.310 --> 00:00:44.850
set it to one and a half seconds.

00:00:44.850 --> 00:00:50.120
And once the timer is finished I of course want to do something.

00:00:50.920 --> 00:00:58.530
Now I'm not writing my to be executed code which I'd update my you or I or whatever inside of this time

00:00:58.530 --> 00:01:02.110
or function because that's what I'm using a promise for.

00:01:02.130 --> 00:01:07.550
I want to handle this asynchronous task in a lean and nice way.

00:01:08.070 --> 00:01:14.670
So instead of doing whatever I want to do inside of this code and therefore writing tons of code inside

00:01:14.670 --> 00:01:23.430
this callback here all Eustice resoled parameter which was passed which actually is a function where

00:01:23.430 --> 00:01:30.540
I can pass an argument which I want to pass back out of the promise once it has been resolved just to

00:01:30.540 --> 00:01:32.640
case what ever every call resolve.

00:01:32.670 --> 00:01:39.060
On the other hand and I will give an example for that to reject of course is also a function which basically

00:01:39.060 --> 00:01:45.080
means the operation failed because imagine you reaching out to some kind of server to fetch data.

00:01:45.300 --> 00:01:49.680
Well that might also failed so therefore it needed to be able to handle both cases.

00:01:49.980 --> 00:01:51.750
But here I'm calling resolve.

00:01:52.100 --> 00:02:00.500
And with that I'm creating my promise and then I can actually use my promise that then function now

00:02:00.570 --> 00:02:08.740
then basically means once this promise is resolved do that do whatever I specify in here.

00:02:08.880 --> 00:02:14.460
So of course you're able to pass a function which should get executed once this promise has been resolved

00:02:14.470 --> 00:02:15.060
.

00:02:15.630 --> 00:02:22.650
So here I simply want to log something and do something I want to log something I get passed into my

00:02:22.650 --> 00:02:23.610
function.

00:02:23.880 --> 00:02:30.430
The value of the resolving of this promise this of course will be de-value which I pass here with the

00:02:30.420 --> 00:02:32.160
result function.

00:02:32.160 --> 00:02:33.620
So I'm printing that here.

00:02:33.660 --> 00:02:37.690
So what do you think we'll have that for now it run.

00:02:39.870 --> 00:02:42.060
I get done after one and a half seconds.

00:02:42.270 --> 00:02:46.810
So what happens is I use my promise which is set up here.

00:02:47.220 --> 00:02:56.910
And this promise will then as I call then go ahead and execute it my time or here or run my timer and

00:02:56.910 --> 00:03:02.300
after one and half seconds and would call the resolve function which gets passed into year in the U

00:03:02.550 --> 00:03:10.590
function I pass to my promise and you resolve function executed in your past has me done with just the

00:03:10.590 --> 00:03:16.460
value I will receive that my then Colback and dysfunction here and there for I can handle it in here

00:03:16.490 --> 00:03:16.770
.

00:03:17.060 --> 00:03:22.170
And I think it's easy to imagine that if you would not have a timeout here but instead would reach out

00:03:22.170 --> 00:03:23.260
to a server.

00:03:23.400 --> 00:03:30.240
And then when we get back that data we would resolve our promise and send the data we could back with

00:03:30.240 --> 00:03:37.250
this problem as resolving and then with then function somewhere else no code that could handle this

00:03:37.250 --> 00:03:42.640
data we got back without having to nest this code inside of this time.

00:03:42.650 --> 00:03:49.440
And I imagine we have a number of callbacks so we would then change all our cold decks but with promises

00:03:49.770 --> 00:03:55.290
we have this very convenient approach and all we need to write is this in order to do something with

00:03:55.290 --> 00:03:57.870
the value we get we'll eventually get back