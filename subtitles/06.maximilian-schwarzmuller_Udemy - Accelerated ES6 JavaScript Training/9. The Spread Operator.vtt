WEBVTT

00:00:01.340 --> 00:00:03.540
That kind of the opposite of the rest.

00:00:03.540 --> 00:00:06.060
Operator Is the spread operator.

00:00:06.180 --> 00:00:11.160
Actually it looks exactly the same but you use it in different places.

00:00:11.250 --> 00:00:12.600
Where do you use it.

00:00:12.600 --> 00:00:14.490
Let me show you all.

00:00:14.490 --> 00:00:20.530
First create a variable wearable numberous which is again array of numbers.

00:00:20.880 --> 00:00:25.760
But this time I want to get the maximum.

00:00:25.980 --> 00:00:32.760
Now I was already mentioning that you already have the max function on the Moff object.

00:00:32.910 --> 00:00:39.830
But if you try to pass numbers here what do you think will get hit run.

00:00:40.140 --> 00:00:48.480
Not a number because this Max method here actually expect to get a list all arguments a list of numbers

00:00:48.690 --> 00:00:50.400
and not an array.

00:00:50.400 --> 00:00:52.790
Now that's bad because we only have an array.

00:00:52.950 --> 00:00:59.190
And in the past you would have to manually split it up somehow and make sure that you make a list of

00:00:59.190 --> 00:01:00.820
arguments out of that.

00:01:00.840 --> 00:01:07.140
Now with the spread operator I add by free thoughts again and remember the difference before we had

00:01:07.140 --> 00:01:10.010
in our own function in the argument list.

00:01:10.020 --> 00:01:17.880
Now we have it in a function call in the well list where we pass parameters to the function so the exact

00:01:17.940 --> 00:01:19.710
opposite place.

00:01:19.710 --> 00:01:27.420
Now here with the free dots if I now which run it works and why does it work well let's have a look

00:01:27.420 --> 00:01:29.850
what happens behind the scenes.

00:01:29.850 --> 00:01:38.910
If I print out numbers with the spread operator in front of them and I had run we see that it's actually

00:01:38.940 --> 00:01:45.090
kind of loops through to say array and prints all these numbers so it takes the array and splits it

00:01:45.090 --> 00:01:46.650
up into individual values.

00:01:46.650 --> 00:01:50.610
Tell us what the spread operator does and therefore it's the opposite of the rest.

00:01:50.610 --> 00:01:54.410
Operator which takes a list of values and creates an array off it.

00:01:54.420 --> 00:01:59.130
So rest and spread look exactly the same that differ by the place where you used them.

00:01:59.260 --> 00:02:07.260
Rest is use if you write your own function in the list of arguments or function expects and spread is

00:02:07.260 --> 00:02:15.370
used in your rubrum code to basically split up an array into a list of values.