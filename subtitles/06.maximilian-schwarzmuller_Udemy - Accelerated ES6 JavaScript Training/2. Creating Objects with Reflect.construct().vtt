WEBVTT

00:00:01.360 --> 00:00:07.770
The one of the most important things first if you google for E-6 reflect you'll find an article in the

00:00:07.770 --> 00:00:13.080
end the end of the Mozilla Web Developer Network and here you'll get a reference of all the methods

00:00:13.170 --> 00:00:15.480
it offers and how it works.

00:00:15.480 --> 00:00:18.080
That being said are covered that in this module.

00:00:18.090 --> 00:00:23.390
But if you want to look something up or have some additional examples just go through that page and

00:00:23.400 --> 00:00:27.710
then you may have a look at the individual methods how they work and so on.

00:00:27.720 --> 00:00:34.170
I'll start with the creation of new objects and you already know a lot of methods to create objects

00:00:34.170 --> 00:00:37.260
in Chalis script with the literal notation.

00:00:37.260 --> 00:00:41.570
The new key word and object are to create.

00:00:41.610 --> 00:00:43.470
Now we get it number one.

00:00:43.560 --> 00:00:50.640
And as explained For one it's because we now have it bundled all into the refl. API and it works well

00:00:50.640 --> 00:00:52.620
together with the proxy API.

00:00:53.010 --> 00:00:56.660
And as a second argument why this might be useful.

00:00:56.730 --> 00:01:00.800
It offers us some additional utility and I'll show you which.

00:01:00.810 --> 00:01:04.840
So in order to create a new object frood you reflect API.

00:01:05.070 --> 00:01:08.420
It's as simple as the following sample shows.

00:01:08.550 --> 00:01:15.330
You need a constructor function for this or a class like person for example.

00:01:15.330 --> 00:01:19.910
And with that and as a static constructor function like this would have also worked.

00:01:19.920 --> 00:01:26.220
But with that you can create a new person assign it to a variable like this with the reflect object

00:01:26.250 --> 00:01:27.810
and you don't use new here.

00:01:27.830 --> 00:01:33.100
You act sisters object directly and all those methods on this object are static methods.

00:01:33.390 --> 00:01:36.620
You have the construct method available.

00:01:36.660 --> 00:01:42.450
Now construct takes up two free arguments where the first two arguments are required and the last one

00:01:42.450 --> 00:01:43.570
is optional.

00:01:43.590 --> 00:01:48.790
The first argument is the constructor function is should use Orji class here.

00:01:48.810 --> 00:01:55.890
So person the second argument are is an array which specifies the arguments which get passed to the

00:01:55.890 --> 00:01:57.060
constructor.

00:01:57.060 --> 00:02:04.650
So if we add our person here to give it a constructor function where we take a name for example and

00:02:04.650 --> 00:02:07.170
then we set this name equal to name.

00:02:07.440 --> 00:02:13.500
Well then we could pass Max here as the first element and this array to be assigned to the first argument

00:02:13.500 --> 00:02:15.170
that its constructor function.

00:02:15.480 --> 00:02:18.560
All come back to the optional third argument later.

00:02:18.900 --> 00:02:25.050
So with that we probably created a new person so let's log it to the console and check what we see there

00:02:25.050 --> 00:02:27.120
.

00:02:27.270 --> 00:02:30.950
Indeed we created a new option where each name is Max.

00:02:31.200 --> 00:02:34.910
And if I check if it is an instance of person

00:02:38.910 --> 00:02:39.980
I should get true.

00:02:39.990 --> 00:02:42.290
Let's see if this is true.

00:02:42.930 --> 00:02:43.630
Yes.

00:02:43.650 --> 00:02:50.930
So we created a new person and this is exactly the same as if we would have used the new keywords to

00:02:50.930 --> 00:02:53.330
a new person.

00:02:53.940 --> 00:02:57.200
That would be the same with the same code.

00:02:57.220 --> 00:03:05.640
So like that but we didn't we used to reflect the API is that that will come back to the first argument

00:03:05.640 --> 00:03:11.850
here and to demonstrate what this argument does all first create a constructor function.

00:03:11.850 --> 00:03:13.600
And it could create a class here too.

00:03:13.920 --> 00:03:27.910
And I will name it top object and its constructor function will assign age or will treat age property

00:03:29.390 --> 00:03:37.680
which it sets equal to 27 let's say then you can assign this constructor function here as a forward

00:03:37.710 --> 00:03:38.540
argument.

00:03:38.760 --> 00:03:45.990
What this will do is it will override the prototype of this prison object which is created by evil of

00:03:45.990 --> 00:03:51.950
course the prototype would be poor isn't that a prototype so desperate sundog prototype.

00:03:52.290 --> 00:03:54.960
But with that I'm writing this.

00:03:55.140 --> 00:04:03.840
So let's check that by checking if person produ is equal to person dot prototype.

00:04:03.960 --> 00:04:05.750
As I said it shouldn't be.

00:04:05.850 --> 00:04:06.900
We should see false.

00:04:06.900 --> 00:04:10.110
Let's see if that is the case.

00:04:10.110 --> 00:04:11.560
Indeed it is false.

00:04:11.730 --> 00:04:15.030
So we overwrote the prototype in chess to prove the opposite.

00:04:15.030 --> 00:04:19.760
If I get rid of this argument we do get true so we overrode it.

00:04:19.770 --> 00:04:24.630
And the question is what's now the prototype is it top object.

00:04:24.630 --> 00:04:29.530
So if I check if top object is the prototype with a P.

00:04:29.910 --> 00:04:34.380
Let's see if that is true what do you think we'll see in the console.

00:04:34.620 --> 00:04:35.750
It's false.

00:04:35.790 --> 00:04:41.260
That's not the prototype but you probably guessed it of course that's the prototype.

00:04:41.370 --> 00:04:49.420
So if I now had run we see true so with that we changed the prototype of our object like we can do it

00:04:49.420 --> 00:04:57.180
with objects that create the difference of course being that you're we can in one step create our object

00:04:57.480 --> 00:05:03.900
assigned the constructor arguments or the argument you want to pass the constructor and override our

00:05:04.290 --> 00:05:09.670
prototype all stored in the refl. API as a central repository.

00:05:10.020 --> 00:05:13.350
And that's just another powerful tool in our pocket.

00:05:13.380 --> 00:05:19.700
If we actually want to create an object that assigned a different prototype to it for some reason