WEBVTT

00:00:01.320 --> 00:00:07.050
As you saw before we not only had to map Optik being added but also the set.

00:00:07.050 --> 00:00:13.340
Now what is a set a set list of just Values know key value pairs.

00:00:13.410 --> 00:00:15.830
And I would say OK that's great right.

00:00:16.260 --> 00:00:23.580
Well there was an array might have the same value multiple times therefore positioning is important

00:00:23.580 --> 00:00:24.610
inside an array.

00:00:24.870 --> 00:00:27.460
You might have an array which looks like this.

00:00:27.530 --> 00:00:34.000
Then you've get the array which is 1 1 1 1 3 times 1.

00:00:34.080 --> 00:00:36.850
And this would be not bill either.

00:00:36.870 --> 00:00:38.400
It would hold three ones.

00:00:38.520 --> 00:00:45.440
But if you want to access specifically the second one well then you have to identify by position now

00:00:45.470 --> 00:00:46.040
a set.

00:00:46.050 --> 00:00:55.650
On the other hand is created with the new set of checked with the new operator and it holds unique values

00:00:55.660 --> 00:00:56.060
.

00:00:56.460 --> 00:01:02.850
So if you add to that say disarrayed 1 1 1 and this is how you can initialize a set just by passing

00:01:02.850 --> 00:01:04.460
the array of values.

00:01:04.950 --> 00:01:06.560
Well then what you said.

00:01:06.640 --> 00:01:15.630
Think of get in my loop for myself which I can of course do with the form of loop here.

00:01:15.630 --> 00:01:24.660
So if I then print out my elements What do you think we'll see if I now had run just one because it

00:01:24.660 --> 00:01:26.240
only holds 1 1.

00:01:26.340 --> 00:01:31.430
The average You were kind of omitted because again it's Dorice unique values.

00:01:31.580 --> 00:01:38.220
Therefore d ordering inside the set doesn't really matter because if you want to get an item from the

00:01:38.220 --> 00:01:44.210
set Well there will be only one of it anyways so it doesn't matter WHERE it in the set of beliefs.

00:01:44.610 --> 00:01:49.250
So a set is kind of like an array but unique Well use.

00:01:49.260 --> 00:01:56.370
So each value can only appear once with this newly created set here of course I can also add a value

00:01:56.370 --> 00:02:01.590
in that here I have the method not the set method because set would not be an appropriate name because

00:02:01.590 --> 00:02:03.330
I'm not setting a value.

00:02:03.330 --> 00:02:05.710
I would say that adding a value to you just set.

00:02:05.820 --> 00:02:12.120
But of course if I add a value which is already in the set I'm not technically or writing it it's just

00:02:12.240 --> 00:02:12.760
not done.

00:02:12.780 --> 00:02:13.760
It's just a minute.

00:02:13.770 --> 00:02:15.800
This operation is not executed kind of.

00:02:15.900 --> 00:02:20.340
Because again all all the once each one has all old sort only once.

00:02:20.400 --> 00:02:24.930
So if I add a two to the set and I hit run again.

00:02:25.830 --> 00:02:30.970
Well of course we see 1 2 because 2 wasn't in the set yet so it was successful yet.

00:02:31.110 --> 00:02:37.320
But here again just for completeness sake if I add two two times and hit run again we only see well

00:02:37.360 --> 00:02:39.950
it being at once because of the uniqueness