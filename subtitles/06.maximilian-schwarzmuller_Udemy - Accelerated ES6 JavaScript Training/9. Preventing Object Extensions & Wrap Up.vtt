WEBVTT

00:00:01.560 --> 00:00:06.410
So we're oldest fruit module but there are two methods on the web like the API.

00:00:06.490 --> 00:00:08.620
And I want to talk about those two.

00:00:08.670 --> 00:00:15.030
They have to do with the extension of objects so with the addition of new methods or with new fields

00:00:15.050 --> 00:00:15.380
.

00:00:15.720 --> 00:00:22.170
So by default of course you can add new properties to your objects but you can prevent this from happening

00:00:22.180 --> 00:00:22.660
.

00:00:23.130 --> 00:00:29.120
Let's check this by printing out hobby's here again and getting rid of this delete operation and off

00:00:29.130 --> 00:00:31.440
the resetting of hobby's here.

00:00:31.440 --> 00:00:34.670
So if I this of course we see the hobbies.

00:00:34.740 --> 00:00:42.330
Now let's see if you want to make sure that no part of our code is able to actually add properties to

00:00:42.330 --> 00:00:49.530
our object because for example in our application we're at a point at a certain state where in the past

00:00:49.530 --> 00:00:50.690
we wanted to allow this.

00:00:50.690 --> 00:00:55.920
So that's why we wrote the code in the first place to find properties but that something happened and

00:00:55.920 --> 00:00:57.230
we no longer want to allow it.

00:00:57.270 --> 00:01:03.420
So we want to kind of turn a switch and lock the object so that it can longer be extended.

00:01:03.780 --> 00:01:05.820
Well it's really simple to do.

00:01:05.820 --> 00:01:14.640
We may simply call reflect present extensions and pass the object for which we do want to prevent this

00:01:14.640 --> 00:01:15.550
.

00:01:15.600 --> 00:01:22.620
What do you think will happen if I now had run I get on the find because the property definition here

00:01:22.620 --> 00:01:29.220
now fails because we're preventing it from being extended to this object and that exactly is what this

00:01:29.220 --> 00:01:30.050
method is for.

00:01:30.060 --> 00:01:35.100
We are locking it because as I explained something might have happened and we no longer want to allow

00:01:35.100 --> 00:01:35.750
that.

00:01:35.910 --> 00:01:40.630
Therefore we can prevent the object from being extended with that.

00:01:40.630 --> 00:01:46.820
Now also in our code you might be in a point where we don't know if we are able to extend the Optik

00:01:46.830 --> 00:01:52.350
because we know we wrote the code that this depends on some Abril condition which might be true or false

00:01:52.350 --> 00:01:52.800
.

00:01:52.890 --> 00:01:57.200
So we want to check if this object is currently locked or not.

00:01:57.210 --> 00:02:03.180
So in order to check this we can access the following reflect Meffert.

00:02:03.210 --> 00:02:04.830
I'm going to log it out.

00:02:04.920 --> 00:02:10.890
Refl. is extensible and then passed you opt to give back.

00:02:10.890 --> 00:02:17.310
True or False indicating if while the object is extensible or not and I'm inserting this console lock

00:02:17.310 --> 00:02:22.380
before and after locking you object with pre-event extensions.

00:02:22.860 --> 00:02:27.810
Now I'm not going to bore you with the question what we'll see in the console but what will we see in

00:02:27.810 --> 00:02:30.620
the console.

00:02:30.810 --> 00:02:38.970
True False and undefined true here of course comes from this statement where it's still was extensible

00:02:38.970 --> 00:02:40.760
because we didn't lock it yet.

00:02:41.130 --> 00:02:42.260
Then we lock it.

00:02:42.420 --> 00:02:49.800
So the next console lock you're froze faults were Prince outfalls and the undefined comes from the last

00:02:49.800 --> 00:02:57.780
console log where we tried to access a property which wasn't added because the object was locked.

00:02:58.230 --> 00:03:00.040
So that has been the refl. API.

00:03:00.120 --> 00:03:06.780
I hope you were able to see why it makes sense to have this central place for all these object related

00:03:07.050 --> 00:03:13.410
methods which allow us to manage our objects to change their behavior depending on the state of our

00:03:13.410 --> 00:03:14.280
code.

00:03:14.470 --> 00:03:16.520
That's metaprogramming again.

00:03:16.860 --> 00:03:20.730
And also how they sometimes duplicate existing efforts.

00:03:20.820 --> 00:03:26.670
But it still makes sense to have that A E in essentiable place and be with some extensions in some places

00:03:26.670 --> 00:03:27.680
at least.

00:03:27.720 --> 00:03:31.470
Now with that I'll have a look at the proxy API in the next lecture.

00:03:31.560 --> 00:03:38.040
And there you will see the refl. API again and you will see why it's even greater to have to reflect

00:03:38.040 --> 00:03:39.530
the API in the first place.

00:03:39.540 --> 00:03:41.860
See you there.