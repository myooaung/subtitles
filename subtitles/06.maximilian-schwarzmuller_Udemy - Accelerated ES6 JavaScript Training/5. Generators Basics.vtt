WEBVTT

00:00:01.410 --> 00:00:07.910
So we had a detailed look at Raiders and why they are useful why allow us to loop through our own objects

00:00:07.930 --> 00:00:11.130
or change to behavior if the loop for a natural object.

00:00:11.130 --> 00:00:16.740
Also keep in mind you not only may access them with the four off loop but also with the very first half

00:00:16.800 --> 00:00:22.780
you solve by simply extracting the iterator with the iterator symbol.

00:00:22.880 --> 00:00:30.210
Now generators are closely tied to that concept and I'll again start by simply showing what a generator

00:00:30.210 --> 00:00:31.290
is.

00:00:31.620 --> 00:00:34.900
A generator looks like a normal function.

00:00:35.160 --> 00:00:39.720
Let's name a select like this.

00:00:39.720 --> 00:00:46.280
The first important thing to make it a generator is to add a star an asterisk.

00:00:46.290 --> 00:00:49.830
Now you may add this directly in front of the function name.

00:00:49.830 --> 00:00:55.090
You may add it in between with white spaces around or directly after function.

00:00:55.150 --> 00:01:00.990
While you will see all three syntaxes I'm going to go with the star in front of the name so that makes

00:01:00.990 --> 00:01:02.960
it a generator.

00:01:02.960 --> 00:01:09.510
No still this generator wouldn't do much because the important thing to really make it a generator and

00:01:09.510 --> 00:01:13.470
to do something is to add the yield keyword.

00:01:13.500 --> 00:01:19.690
Now here I could yield let's say house and then yield.

00:01:20.020 --> 00:01:25.330
Garage now you all to ask you always see the worst kind of return.

00:01:25.340 --> 00:01:27.070
Kind of like return.

00:01:27.120 --> 00:01:30.930
It seems to return this but we have to return statements.

00:01:30.930 --> 00:01:35.080
If we were to treated equally like we're ass retort.

00:01:35.400 --> 00:01:37.930
So let's not talk about it.

00:01:38.040 --> 00:01:44.840
Let's see what actually happens if I run this function what do you think we'll see.

00:01:45.150 --> 00:01:46.500
Nothing.

00:01:46.500 --> 00:01:47.770
The reason for it is this.

00:01:47.770 --> 00:01:55.170
And here comes the connection to iterators that by running a generator we actually get back an iterator

00:01:55.540 --> 00:01:58.560
we get back an object for which we can loop.

00:01:58.800 --> 00:02:03.360
So I'll assign a to it as function call.

00:02:03.690 --> 00:02:12.340
And now if I print it next say I print it three times.

00:02:12.360 --> 00:02:16.850
What do you think I'll see if I now have to run.

00:02:16.860 --> 00:02:22.800
I get my typical object which I always get back from an iterator with done being set to false and the

00:02:22.800 --> 00:02:24.210
value of house.

00:02:24.420 --> 00:02:28.710
Then evaluate garage crash and then find but doneness no true.

00:02:29.250 --> 00:02:35.980
So I am looping through those yielded values and that's what a generator is stay up for and where it

00:02:35.980 --> 00:02:37.470
is powerful.

00:02:37.500 --> 00:02:46.380
It allows us to create a logic state and a function to yield different values and that we can use an

00:02:46.380 --> 00:02:52.830
iterator or we can use the iterator it will turn to loop through or to jump through those values.

00:02:52.840 --> 00:02:54.510
The generator gives us