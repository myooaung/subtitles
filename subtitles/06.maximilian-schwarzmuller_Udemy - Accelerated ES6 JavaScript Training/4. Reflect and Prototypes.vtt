WEBVTT

00:00:01.550 --> 00:00:08.650
The refl. API I also offer some nice methods to work with prototypes to find out what the prototype

00:00:08.880 --> 00:00:11.230
object is or to change it.

00:00:11.670 --> 00:00:17.620
Especially the first one it wasn't that easy in the positive you know that we had this donder produce

00:00:17.720 --> 00:00:21.640
this underscore underscore produ underscore and the square thing.

00:00:21.810 --> 00:00:27.180
But that was really supported by all browsers and it wasn't even a part of the general specification

00:00:27.180 --> 00:00:27.660
.

00:00:27.660 --> 00:00:33.900
Now it's added the search in year 6 but the refl. get prototype off method is a much better way to find

00:00:33.900 --> 00:00:34.490
it out.

00:00:34.620 --> 00:00:42.840
So let's have a look at that for the showed us all trade a class person or a constructor to create a

00:00:42.840 --> 00:00:44.480
name property here.

00:00:44.880 --> 00:00:47.920
And also just to max directly your.

00:00:48.210 --> 00:00:50.350
Then I'll create a new person with the new keyword.

00:00:50.370 --> 00:00:53.060
You don't have to use refl. construct all over the place.

00:00:53.060 --> 00:00:54.770
There is nothing wrong with you.

00:00:54.960 --> 00:00:58.270
It's simply a shorter way so why not use it.

00:00:58.380 --> 00:01:02.880
And then I want to lock something to the console.

00:01:02.880 --> 00:01:09.840
I want to use the refl. get prototype off method to find out what the prototype of prison is.

00:01:09.840 --> 00:01:16.500
Of course we all know it's present dot prototype but it's nice to have a method to actually see that

00:01:16.500 --> 00:01:16.950
.

00:01:16.950 --> 00:01:18.310
So let's run it.

00:01:18.310 --> 00:01:25.230
That was the object object and that's not really helpful but if we open up the developer tools here

00:01:25.230 --> 00:01:30.540
in Chrome for example and run it again we also see the object here but we can expand it.

00:01:30.540 --> 00:01:34.020
Have a look at the constructor and there we would say.

00:01:34.350 --> 00:01:42.030
And then we would see that it is actually our Person objects of this person prototype of course we can

00:01:42.090 --> 00:01:50.240
also still compare this prototype to person to prototype your view.

00:01:50.340 --> 00:01:57.190
Well what will we see if I had run to see true of course because person A prototype is a prototype.

00:01:57.400 --> 00:02:06.990
So it basically is the same as this syntax here at Dunder prorogue so double underscore produ double

00:02:06.990 --> 00:02:13.980
underscore it wasn't an official part of the specification therefore not safe to use and easy 5.

00:02:14.010 --> 00:02:15.720
Now with iOS 6 it was added.

00:02:15.720 --> 00:02:19.090
But it's still kind of an ugly way to access the prototype.

00:02:19.290 --> 00:02:26.220
So using your refl. get prototype of is the preferred way to work with prototypes and find out what

00:02:26.220 --> 00:02:30.780
the prototype of a certain object actually is.

00:02:30.780 --> 00:02:42.150
Of course if I were to oh you're an X is my prison prototype and let's say at age feel to it.

00:02:42.180 --> 00:02:44.880
So that equals you 27.

00:02:44.940 --> 00:02:48.120
And now I print just the prototype.

00:02:48.300 --> 00:02:50.250
I would also see that H field here.

00:02:50.250 --> 00:02:54.990
So now we don't have that empty prototype or just empty object but just not telling us anything.

00:02:54.990 --> 00:03:00.730
Now we clearly see that this is the prototype but again this is a safe way and you recommend that the

00:03:00.730 --> 00:03:05.000
way to access the prototype of your object.

00:03:05.010 --> 00:03:12.090
Now sometimes you don't only want to see it but you might want to change the prototype off your well

00:03:12.450 --> 00:03:14.750
object of the person here.

00:03:14.910 --> 00:03:16.310
You can do this too.

00:03:16.650 --> 00:03:26.850
I can simply use reflect that produ prototype or then change the prototype of my object to do this I

00:03:26.850 --> 00:03:33.570
will create a new object which I want to use as prototype and not just name and pro-homo this will just

00:03:33.570 --> 00:03:40.470
be an object in literal notation and it will have the age of 30 so that we have a distinct part here

00:03:40.490 --> 00:03:40.900
.

00:03:41.640 --> 00:03:48.900
And then I will first enter as a first argument the object of which I want to set the prototype and

00:03:48.900 --> 00:03:55.260
then as the second argument of that function what I do want to set as a prototype Subroto in this case

00:03:55.260 --> 00:03:59.510
this newly created object here what do we expect to see in a console.

00:03:59.510 --> 00:04:06.310
For now run while we see object object but with the age of 30.

00:04:06.310 --> 00:04:11.510
So this prototype here does object here it's not a prototype as you can see because we're checking what

00:04:11.520 --> 00:04:15.000
the prototype is and reprinting the prototype to the console.

00:04:15.030 --> 00:04:20.100
And since we changed it it's produ and no longer a person to prototype.

00:04:20.220 --> 00:04:26.010
So that's a cool way to work with prototypes and to change them in your code.

00:04:26.090 --> 00:04:31.650
And of course the object object itself also has to set a prototype method.

00:04:32.010 --> 00:04:36.290
But again refl. is the central place which handles all of that together.

00:04:36.300 --> 00:04:38.060
So you may as well use it there