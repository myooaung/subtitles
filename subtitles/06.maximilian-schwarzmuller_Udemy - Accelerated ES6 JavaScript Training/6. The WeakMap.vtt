WEBVTT

00:00:01.350 --> 00:00:03.660
Now there's not only the map object.

00:00:03.680 --> 00:00:06.350
There's also the week map object.

00:00:06.760 --> 00:00:15.550
And we created simply by using the map object so I just append prepend weight to my map here and.

00:00:16.020 --> 00:00:21.350
Well let's see if it works this saves or it leaves the rest of the code and changed.

00:00:21.360 --> 00:00:24.980
I set my values and then loop through my map here.

00:00:25.050 --> 00:00:27.660
What do you think we'll see if I had run.

00:00:27.660 --> 00:00:29.420
You see you would get an error.

00:00:29.670 --> 00:00:35.400
And that's certainly strange because the only thing I changed is I added this week thing here but it

00:00:35.400 --> 00:00:39.960
seems to tell me that I use an invalid key.

00:00:39.990 --> 00:00:47.930
Now the reason for this error is that in a weak map your key may only be a javascript object.

00:00:47.970 --> 00:00:52.100
It may not be a primitive like a string like we're using it here.

00:00:52.140 --> 00:00:54.830
So a string is a key doesn't work.

00:00:55.110 --> 00:00:59.040
Of course that's certainly strange to why wouldn't you be able to use that.

00:00:59.040 --> 00:01:00.750
Why does it have to be an object.

00:01:00.780 --> 00:01:04.380
Not adopting a bit strange to be used as a key.

00:01:04.430 --> 00:01:11.850
The reason for this behavior is a weak map is called weak map not pe cause it's the weak dumb word you

00:01:11.850 --> 00:01:19.920
know which can't use strings but because it holds weak references tudy entries in the map.

00:01:19.920 --> 00:01:28.580
This in turn means that Ada is able to get rid of those entries if they're not used anymore.

00:01:28.580 --> 00:01:35.060
For your code so they can be garbage collected for dead behavior however it needs to have reference

00:01:35.070 --> 00:01:35.550
types.

00:01:35.550 --> 00:01:42.180
ASCII is because those reference types are to one getting garbage collected and by the way are of course

00:01:42.180 --> 00:01:45.040
the ones which would take up more memory probably.

00:01:45.420 --> 00:01:51.760
So garbage collection on the apprehension to quick note on this point here is the fact that Chubb's

00:01:51.760 --> 00:01:54.780
script or the browser running Javascript.

00:01:54.780 --> 00:02:00.990
So the environment executing child script will go over from your code and when it's cold runs when your

00:02:00.990 --> 00:02:06.300
application is running then it will identify which object your code aren't used anymore.

00:02:06.360 --> 00:02:09.230
In order to get rid of them in the memory of course.

00:02:09.470 --> 00:02:13.200
So to free up some space in the memory that's garbage collection.

00:02:13.200 --> 00:02:21.000
Now if you store it and object in let's say an array or in a map here then this theoretically is not

00:02:21.000 --> 00:02:27.720
available to be cleaned up because it's still stored and it doesn't really know if you're accessing

00:02:27.720 --> 00:02:37.390
it again or it can't really really said and therefore the map allows to do just that by using objects

00:02:37.400 --> 00:02:38.510
as keys.

00:02:38.550 --> 00:02:44.970
It makes sure that a team can keep track of those keys of those objects of if those objects are used

00:02:45.000 --> 00:02:46.430
any more in your code.

00:02:46.560 --> 00:02:53.190
If you're trying to let's say get an item by key by this object key somewhere in the code.

00:02:53.190 --> 00:02:54.890
In this case it would leave it be.

00:02:55.020 --> 00:02:57.980
But if you're not using this key anymore this object.

00:02:58.170 --> 00:03:03.510
Well then if there is you're probably not fetching this anymore because you're not using it and therefore

00:03:03.510 --> 00:03:07.230
it's able to just delete this entry from the map.

00:03:07.230 --> 00:03:11.570
So on its own it kind of alters your map.

00:03:11.670 --> 00:03:19.070
And while this sounds dangerous it of course is handled by javascript and probably handled well.

00:03:19.170 --> 00:03:21.850
And of course it frees up memory.

00:03:21.900 --> 00:03:26.760
It improves the performance of your application and takes off some work.

00:03:26.760 --> 00:03:33.220
You are wise should do we're managing the resource is something you would have to do otherwise.

00:03:33.600 --> 00:03:37.920
So that's the advantage of map performance increase garbage collection.

00:03:37.920 --> 00:03:44.280
The discipline of course is we have to use objects as keys and it's also not enumerable which means

00:03:44.280 --> 00:03:45.500
we can't loop through it.

00:03:45.510 --> 00:03:48.740
The reason for it is of course is that we don't know the size of it.

00:03:48.750 --> 00:03:54.310
Javascript itself doesn't know the size because it doesn't know how it will look like at a certain stage

00:03:54.330 --> 00:03:59.150
during code execution because some items might have been deleted.

00:03:59.420 --> 00:04:02.250
Therefore looping is not possible.

00:04:02.490 --> 00:04:10.290
But of course it is possible to get items with a key as or with an object like you because you can be

00:04:10.290 --> 00:04:14.050
sure that this object won't have been deleted or garbage collected.

00:04:14.100 --> 00:04:19.290
Since you're using it right now and that is what javascript is looking out for are you using this object

00:04:19.290 --> 00:04:20.420
someplace in your code.

00:04:20.550 --> 00:04:25.000
If you were doing so well then it's safe to use it because it wouldn't get to lead by a script.

00:04:25.040 --> 00:04:28.150
So kind of this circular thing to think about.

00:04:28.980 --> 00:04:31.160
Love talking so let's have a look.

00:04:31.620 --> 00:04:40.460
I'll just create two key objects here real quick key one will just be an object where a map to one and

00:04:40.470 --> 00:04:46.600
then we have key one execute excuse me where we have B to something like that.

00:04:46.980 --> 00:04:49.330
And then of course here I use q one.

00:04:49.770 --> 00:04:53.330
And here I use two and then.

00:04:53.370 --> 00:04:59.220
Well if I run this it will still get an error of course because I said we can't loop through it because

00:04:59.220 --> 00:05:03.490
it doesn't have this iterator symbol because it is not writable.

00:05:03.900 --> 00:05:13.730
But if I get rid of this and instead I print this console log deck get be one.

00:05:13.740 --> 00:05:14.300
What do you think.

00:05:14.310 --> 00:05:17.040
I'll now get if I hit run.

00:05:18.240 --> 00:05:20.920
Well I get my OB checked because that's what I explained.

00:05:20.970 --> 00:05:25.700
The Optik will still be there because I'm using it here so it's not getting garbage collected.

00:05:25.890 --> 00:05:32.730
But I can't use the size property or the for off loop because it's not able to look through it because

00:05:32.790 --> 00:05:39.920
it might have changed since you started your application last week map and why you might want to use

00:05:39.930 --> 00:05:40.830
Week by week.

00:05:40.830 --> 00:05:41.240
Map