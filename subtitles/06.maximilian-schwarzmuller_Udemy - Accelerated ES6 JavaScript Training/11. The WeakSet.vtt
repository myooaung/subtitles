WEBVTT

00:00:01.140 --> 00:00:10.630
But very not done yet as with the map and the week map the south also got a weak set and we can do it

00:00:10.710 --> 00:00:11.820
like this.

00:00:11.820 --> 00:00:15.230
Now all first going to blow everything up by hitting run.

00:00:15.300 --> 00:00:16.790
And of course you get an error.

00:00:16.950 --> 00:00:19.430
The reason is we're using an invalid value.

00:00:19.950 --> 00:00:27.480
And here's the reason it's the same as with the weak map the weak set may only store objects.

00:00:27.480 --> 00:00:31.280
Now if we're in a weak map of course only the key had to be an object.

00:00:31.470 --> 00:00:35.720
But since in the weak set we only have values no key values.

00:00:35.820 --> 00:00:42.710
Well then in this case the value has to be an object for the same reason as with the map only for objects

00:00:42.720 --> 00:00:48.540
is javascript able to well garbage collect them and to determine if they still in use.

00:00:48.540 --> 00:00:55.650
Therefore if we have a set which we would anyways only populate with objects then we might think about

00:00:55.650 --> 00:01:02.640
using a weak set because this would allow javascript to clean up unused objects and again you have this

00:01:02.640 --> 00:01:03.580
protection.

00:01:03.720 --> 00:01:08.860
If you're using an object somewhere in your code well then you can be sure it won't be deleted.

00:01:08.940 --> 00:01:13.830
So this will only happen if you're not using it anymore in which case you shouldn't care.

00:01:14.490 --> 00:01:20.690
So I will quickly show to us by just adding block objects in my set.

00:01:20.720 --> 00:01:31.260
You're all add two and then just to complete the say to show that all objects aren't added multiple

00:01:31.260 --> 00:01:35.500
times and also add the the two object object two times.

00:01:35.650 --> 00:01:45.630
Or let's see what happens if I now hit run while we still get an error of course because like the weak

00:01:45.630 --> 00:01:48.250
map the weak set is numerable.

00:01:48.270 --> 00:01:54.150
This of course means that while we don't know the length of it we don't know how many items that will

00:01:54.150 --> 00:01:59.850
hold because javascript will clean it up by it's on its own will delete certain values from the set

00:01:59.930 --> 00:02:00.260
.

00:02:00.270 --> 00:02:08.090
Therefore a recount loop proved like with the me we map what we can of course do is we still got d Hass

00:02:08.100 --> 00:02:10.470
method so we can log.

00:02:10.940 --> 00:02:17.250
If you said Pass or B to object.

00:02:17.250 --> 00:02:24.660
So what does I'm checking if this object in there and if I had to run we see false.

00:02:24.660 --> 00:02:25.950
Now that's certainly strange.

00:02:25.950 --> 00:02:27.540
And why do we get that.

00:02:27.990 --> 00:02:35.790
Well the reason is remember that for objects we only store pointers to to place in memory where they

00:02:35.790 --> 00:02:37.180
actually live.

00:02:37.380 --> 00:02:42.060
Therefore are four of us also kind of tricking you this week set at the point you created will have

00:02:42.120 --> 00:02:46.670
free values because the second and the third object aren't the same.

00:02:46.710 --> 00:02:52.100
These are different objects that friend values because we created a new object.

00:02:52.230 --> 00:02:57.610
And now you are creating a new object again for this specific object we're checking your.

00:02:57.780 --> 00:03:00.220
It's not inside the set of course.

00:03:00.330 --> 00:03:07.010
As it looks exactly the same like here but technically a new object is created a new place in memory

00:03:07.310 --> 00:03:10.360
and you get a new pointer to that object.

00:03:10.380 --> 00:03:15.920
So in order to really well see if a specific object is in the set.

00:03:16.030 --> 00:03:18.250
Of course I have to create it here like.

00:03:18.390 --> 00:03:22.070
Like so object one would be a one.

00:03:22.170 --> 00:03:28.200
And then let's say object to which would be BE2.

00:03:28.500 --> 00:03:35.420
And now if I go to my array here and I just add object one object to object to.

00:03:35.580 --> 00:03:40.200
Well in this case only the first two would get added because now the second and the fluid object or

00:03:40.230 --> 00:03:44.880
element here are exactly the same value because we only create a two tier once.

00:03:45.120 --> 00:03:53.250
And now if I try to retrieve objects you get true because now I'm always referring to the very same

00:03:53.250 --> 00:03:56.580
value to the very same object and created here.

00:03:57.270 --> 00:03:59.100
So that's the weak set.

00:03:59.250 --> 00:04:08.220
And besides it has a method here of course I also got my add method to try to add object 1 again.

00:04:08.220 --> 00:04:12.250
Of course it's already in there but I can add any object again.

00:04:12.570 --> 00:04:16.320
And of course I also got my set.

00:04:16.320 --> 00:04:19.430
The leap method to get rid of object too.

00:04:19.650 --> 00:04:26.430
So now I've hit run get false because now it's no longer included in the set because I'm deleting it

00:04:26.430 --> 00:04:26.990
here.

00:04:27.270 --> 00:04:35.760
So has delete an ad like with me map where we had get set and all the Delete the week said does have

00:04:35.760 --> 00:04:41.790
the same methods it doesn't have a clear method or anything else which is related to the overall size

00:04:41.790 --> 00:04:42.420
of the set.

00:04:42.420 --> 00:04:47.140
Because that is unknown it doesn't have a size property to for that reason.

00:04:47.160 --> 00:04:53.690
Because again we don't know how many items will be in there because javascript will clean this set up

00:04:54.090 --> 00:04:58.950
but we can safely use the lead acid at the cost of all those methods.

00:04:59.070 --> 00:05:03.180
We passed the Optik we want the access and therefore we were using it.

00:05:03.210 --> 00:05:05.930
And if we're using it it's not getting deleted.

00:05:06.120 --> 00:05:14.520
So as we map we access certainly it's a great use if you are only holding objects and you want to increase

00:05:14.520 --> 00:05:17.360
her performance and then you might want to think about using that