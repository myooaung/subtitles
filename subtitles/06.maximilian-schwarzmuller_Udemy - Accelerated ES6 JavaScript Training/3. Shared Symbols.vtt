WEBVTT

00:00:01.560 --> 00:00:07.800
Now sometimes you also want to have a unique ID but you want to use the same idea more than once so

00:00:07.800 --> 00:00:13.470
you might have the case where you want to some balls which actually share the same ID.

00:00:13.800 --> 00:00:15.630
And that is possible too.

00:00:15.660 --> 00:00:18.940
There's another way to create a symbol which I'll show you here.

00:00:19.200 --> 00:00:28.920
So if I create simple one here I can use the symbol for method on the Symbol object.

00:00:28.920 --> 00:00:33.610
And then here again I assign a key.

00:00:33.690 --> 00:00:35.250
So let's say age.

00:00:35.280 --> 00:00:43.390
Now that's not just a debugging string that's the key with which I'll be able to create multiple s'mores

00:00:43.410 --> 00:00:50.250
which shared the same ID so that if I copy this and I'll create the numbers symbol with for the same

00:00:50.250 --> 00:00:51.970
key all to for H.

00:00:52.440 --> 00:01:02.210
And now if I print symbol one equals symbol 2 What do you think I'll get.

00:01:02.400 --> 00:01:10.450
I get true because now they are actually same it's ID it's an ID but it's not unique to variables use

00:01:10.470 --> 00:01:15.940
the same ID know rightfully you would ask when do I need a unique ID.

00:01:15.960 --> 00:01:17.950
And when do I want to share ideas.

00:01:18.090 --> 00:01:22.630
And the answer unfortunately is it depends it depends on your needs.

00:01:22.770 --> 00:01:29.310
If you stick with the example of my first with Eunice Wachtel if you have at say a function which gets

00:01:29.310 --> 00:01:36.720
an object as an argument and then adds a symbol property to it then probably you might want to have

00:01:37.470 --> 00:01:44.480
certain key like this years so that it is not completely unique but that it is instead read and the

00:01:44.490 --> 00:01:46.660
Colonial registry of your app.

00:01:46.890 --> 00:01:53.730
So the outside of this function you'll also have a chance of accessing the symbol in the natural place

00:01:53.730 --> 00:01:54.240
of your app.

00:01:54.240 --> 00:01:59.570
So let's say you have a function where you add the time stamp symbol to your object and in a natural

00:01:59.580 --> 00:02:02.100
place you want to retrieve this timestep.

00:02:02.250 --> 00:02:07.110
Well of course you need the symbol to be able to retrieve it and therefore you need to assign it like

00:02:07.140 --> 00:02:09.910
this year so that you're able to do that.

00:02:09.990 --> 00:02:16.490
In other cases of course you might want a unique ID because you'll use it in one place and therefore

00:02:16.500 --> 00:02:20.980
you don't need to have access to it in different pieces or places in Europe.

00:02:20.980 --> 00:02:22.820
So let me showcase that to you.

00:02:23.130 --> 00:02:27.160
We are creating this age symbol here and now all through it.

00:02:27.180 --> 00:02:36.460
And you very well your poorest you all give the name Max again.

00:02:36.630 --> 00:02:41.060
Now then I have my function name and make H.

00:02:41.190 --> 00:02:44.350
And it takes a person as an input as an argument.

00:02:44.430 --> 00:02:52.250
And what this function will do is it will create a new age symbol here.

00:02:52.290 --> 00:03:04.020
Also for is age key and then it takes my person and adds a new property with this syntax here age symbol

00:03:04.020 --> 00:03:08.030
for example and sets this to 27.

00:03:08.070 --> 00:03:12.050
Now outside of my function I'd enlight one too.

00:03:12.050 --> 00:03:20.870
So first of all call my function here pass my person and then outside of this function I want to log

00:03:20.880 --> 00:03:26.700
out the age no age symbol is contained in this function so I don't have access to it which would be

00:03:26.700 --> 00:03:32.060
a problem but fortunately I also got symbol 1 and 2 which point to the same key.

00:03:32.310 --> 00:03:39.670
So now I'm able to use person symbol one to access my age.

00:03:39.780 --> 00:03:46.380
Therefore what do you think will happen if I now Heidrun run I see 27 for the very reason that I was

00:03:46.380 --> 00:03:47.790
just explaining.

00:03:47.790 --> 00:03:54.090
Even though the age symbol here is not accessible outside of the function it refers to the same key

00:03:54.090 --> 00:03:59.960
as symbol 1 and 2 and therefore I am able to use symbol 1 or 2 to access this age.

00:04:00.240 --> 00:04:05.310
And now this of course would change if I only would have let's say some more here and this would be

00:04:05.310 --> 00:04:06.740
without the four key word.

00:04:06.750 --> 00:04:09.170
That's just a debugging string than your.

00:04:09.330 --> 00:04:11.040
And the same here.

00:04:11.400 --> 00:04:19.140
What do you think will now happen if I had run I get that and you find because now that's an age symbol

00:04:19.290 --> 00:04:20.760
are two different IDs.

00:04:20.760 --> 00:04:22.280
It's not the same idea anymore.

00:04:22.290 --> 00:04:24.150
So they don't have access.

00:04:24.150 --> 00:04:30.330
That's the key difference here to take away and to understand and why both might be useful unique IDs

00:04:30.420 --> 00:04:33.170
or reused IDs.