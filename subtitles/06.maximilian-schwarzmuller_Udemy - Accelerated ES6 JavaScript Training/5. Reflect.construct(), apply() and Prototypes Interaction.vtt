WEBVTT

00:00:01.470 --> 00:00:09.740
You know to combine that all we can all is a gift or a prototype here let's say agreed method.

00:00:10.610 --> 00:00:15.870
But the new syntax we can do it like this if you remember this from the very first much of this course

00:00:15.880 --> 00:00:16.280
.

00:00:16.590 --> 00:00:28.860
And here I just want to print out hello and then I can simply use refl. ply use my prison

00:00:32.070 --> 00:00:39.990
and access the week method which it should have since the prototype has passed the person so that this

00:00:39.990 --> 00:00:40.600
is set to it.

00:00:40.600 --> 00:00:44.270
But you may also pass null as that doesn't really matter here.

00:00:44.910 --> 00:00:48.620
And then pass an MTA raise since we're not passing any arguments.

00:00:48.690 --> 00:00:51.630
What do you expect to see if and how it run.

00:00:52.710 --> 00:00:53.440
Hello.

00:00:53.550 --> 00:01:00.630
Because person that treat can be called because a person doesn't have discrete method but it's prototype

00:01:00.890 --> 00:01:08.850
produ Yes and since we set the prototype to produ here we actually do have produ as a prototype we have

00:01:08.850 --> 00:01:12.010
access to the create method and therefore we can use it.

00:01:12.060 --> 00:01:16.920
The fact that this is SEPTA now doesn't really matter because we're not using this anywhere in this

00:01:16.920 --> 00:01:17.620
method.

00:01:17.700 --> 00:01:24.210
So that's fine and we see the conjunction of all the refl. methods.

00:01:24.240 --> 00:01:27.970
We learned until now and again as I have said.

00:01:28.100 --> 00:01:29.880
But I can't stress that enough.

00:01:29.880 --> 00:01:31.470
Some of them are duplicate.

00:01:31.470 --> 00:01:37.290
We have some of them in different places and Javascript but refl. really is that central repository

00:01:37.290 --> 00:01:38.600
holding all of that.

00:01:38.730 --> 00:01:45.180
And as it can see you can really do a lot by just using different refl. methods and that at the end

00:01:45.180 --> 00:01:47.040
is what metaprogramming is about.

00:01:47.040 --> 00:01:54.030
Here are some things like getting the prototype changing it you're changing the way your code behaves

00:01:54.420 --> 00:01:57.790
and that's in the end what metaprogramming means.

00:01:57.920 --> 00:02:03.840
Now we're not at the end of refl. we're just at the end with the construct and the prototype and the

00:02:03.840 --> 00:02:05.440
applied functions.

00:02:05.490 --> 00:02:09.700
I look at some methods on the refl. object in my sleeve