WEBVTT

00:00:01.850 --> 00:00:07.970
Of course you could also say that Dagens is greater than two.

00:00:08.250 --> 00:00:09.880
Let's say then we were to.

00:00:09.900 --> 00:00:22.890
We want to reject this promise and return reject it and only in the average case do we want to continue

00:00:22.890 --> 00:00:26.980
here with our time like this.

00:00:27.450 --> 00:00:32.700
And in order to handle all of this I'll add a way to handle rejections.

00:00:32.700 --> 00:00:36.080
I'll use the catch method which catches any errors.

00:00:36.480 --> 00:00:39.530
And here are all simply again.

00:00:39.660 --> 00:00:47.250
Log out my error or the error I might have purchased indenting this.

00:00:47.250 --> 00:00:50.970
What do you think we'll now see if I had run.

00:00:53.010 --> 00:00:58.200
We still get to because of all I'm checking if seconds is greater than 2 which is never reached.

00:00:58.380 --> 00:01:04.450
But if I pass free here as an initial value what do I now think will get.

00:01:04.470 --> 00:01:10.340
I get rejected immediately so does catch block now comes in and catchiest is rechecked Meacher rejection

00:01:10.380 --> 00:01:12.640
here because seconds is too big.

00:01:13.020 --> 00:01:16.140
I could also pass one which initially is not too small.

00:01:16.170 --> 00:01:23.210
It run and notice would work because seconds is no never bigger than 2.

00:01:23.400 --> 00:01:26.280
However if any of you for example.

00:01:26.340 --> 00:01:27.390
Now I hate run

00:01:30.240 --> 00:01:33.350
you see it takes a little time one second to be precise.

00:01:33.360 --> 00:01:38.520
But then we get to check that because the first time we reached this clock seconds he was so it's not

00:01:38.520 --> 00:01:39.350
bigger than 2.

00:01:39.360 --> 00:01:43.160
So we get two or time out but now we incremented.

00:01:43.230 --> 00:01:51.310
Now it's free and we pass free which is the value we pass into the promise in this then Plock here.

00:01:51.630 --> 00:01:58.260
And so then we actually check the promise we reached at this catch block so this not only shows how

00:01:58.260 --> 00:02:05.670
to change your promise calls but also it shows you that the catch block at the end will always get executed

00:02:05.940 --> 00:02:12.540
once the promise is checked that at any point of time no matter if the then blocks in front of it have

00:02:12.540 --> 00:02:15.450
been worked for successfully or not.

00:02:15.450 --> 00:02:22.530
That's the reason we have this catch method to come in and catch any errors right away no matter when

00:02:22.530 --> 00:02:24.370
they happen.