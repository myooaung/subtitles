WEBVTT

00:00:01.380 --> 00:00:05.600
So we have to look at lap and Konst and we also had a look at functions.

00:00:05.610 --> 00:00:12.850
We also had some nice additions or changes to object literals Wireless-N object literal.

00:00:12.960 --> 00:00:15.120
Well I'll give you a brief refresher.

00:00:15.120 --> 00:00:18.060
We have an object and this is an object literal.

00:00:18.060 --> 00:00:23.670
If it created like this with quali braces we might have a name inside of it which is set up like this

00:00:24.030 --> 00:00:26.030
and we might have an age.

00:00:26.190 --> 00:00:29.850
And of course we can print our object like that.

00:00:30.150 --> 00:00:32.930
And if I run we see the object great.

00:00:32.940 --> 00:00:36.970
So that is what we know and how we know it.

00:00:36.990 --> 00:00:40.950
However chump's crypt where iOS 6 added some additions.

00:00:40.950 --> 00:00:45.040
For example we might have a variable and.

00:00:45.900 --> 00:00:51.420
And also the variable age which is set to let's say 25.

00:00:52.170 --> 00:00:56.580
And now what do you think will happen if I remove that.

00:00:56.760 --> 00:01:00.400
So I'm not assigning any values in here.

00:01:00.420 --> 00:01:03.160
What do you think will happen if I had run.

00:01:04.350 --> 00:01:09.840
Well actually the object will take the values from the surrounding variables.

00:01:10.050 --> 00:01:15.900
So if we're not specifying values in year to initialize this object with it will automatically look

00:01:15.900 --> 00:01:23.190
if it has variables declared before the declaration of this object year which match the property names

00:01:23.310 --> 00:01:29.040
are so named a name and age and age and it will automatically take those values.

00:01:29.130 --> 00:01:35.880
So that is a good way to quickly initialiser an object with the values of some variables you already

00:01:35.880 --> 00:01:37.700
have in your code.

00:01:37.890 --> 00:01:44.950
Of course you can still overwrite this and I could still set name to max if and now had run.

00:01:45.360 --> 00:01:47.510
We see that age is still 25.

00:01:47.790 --> 00:01:51.140
But the name was overridden so this still works it's just a shortcut.

00:01:51.150 --> 00:01:57.920
You may use you may not only define properties this way you can also define methods or functions.

00:01:58.110 --> 00:02:06.560
So why for example you could specify grittier and priorly you would do it like this function.

00:02:06.570 --> 00:02:08.500
And then your function code.

00:02:08.500 --> 00:02:12.980
Now you may simply add parentheses here and then the function body right away.

00:02:13.230 --> 00:02:20.790
And then here you can print out this starred name for example and then

00:02:23.370 --> 00:02:25.170
Estada H.

00:02:25.230 --> 00:02:34.470
Now if I call object dog greet What do you think we'll see.

00:02:34.650 --> 00:02:36.610
You got max 25.

00:02:36.990 --> 00:02:44.640
And so this name refers to the name and here and this age refers to our age wiste which is set with

00:02:44.640 --> 00:02:47.650
the variable outside of this code.

00:02:47.670 --> 00:02:53.970
There have also been some other additions for example you already knew that you could create property

00:02:53.970 --> 00:02:56.130
names as a string as well.

00:02:56.130 --> 00:02:58.600
You can also do this for methods.

00:02:58.710 --> 00:03:02.510
So I can read Greek in quotation marks here.

00:03:02.790 --> 00:03:07.740
And of course the parentheses have to stay out that outside of them as they are not part of the name

00:03:07.740 --> 00:03:07.760
.

00:03:07.770 --> 00:03:12.670
But instead they indicate that this is a method and know I want to call this function.

00:03:12.670 --> 00:03:20.550
Though I have to use square brackets to access this property name your greet since it now is a string

00:03:20.570 --> 00:03:20.900
.

00:03:21.210 --> 00:03:29.100
So if I now run this still works does of course also allows you to use names you would not be able to

00:03:29.100 --> 00:03:36.210
use without quotation marks like greet me with the white space in between if I now run.

00:03:36.960 --> 00:03:42.720
Yes he does Hauritz and of course this would not work if I were not to have my quotation marks years

00:03:42.720 --> 00:03:46.490
since this is not a valid property name as well.

00:03:46.520 --> 00:03:53.700
I may not have a whitespace in there as you can see we get an error number cool addition are dynamic

00:03:53.700 --> 00:03:54.990
fields.

00:03:55.410 --> 00:04:02.970
So I'm going to switch this back to B string lets say here like this.

00:04:02.970 --> 00:04:06.240
Get rid of the dot so that this runs again.

00:04:06.240 --> 00:04:09.850
And now dynamic fields are an interesting thing too.

00:04:10.040 --> 00:04:19.890
Let's say I have a variable here and I named this age field and this should be a string H.

00:04:19.950 --> 00:04:26.410
Now I can go into my object then with square brackets that's important that's the syntax here.

00:04:26.760 --> 00:04:28.450
I can revert to H.

00:04:28.450 --> 00:04:37.140
FIELD And now what this does is it does not create a property name square brackets H field.

00:04:37.290 --> 00:04:44.350
But instead it will look for does age variable and Eustice the string here as a property name.

00:04:44.640 --> 00:04:51.300
And I can show this by printing the object out to the console.

00:04:51.300 --> 00:04:53.130
Now what do you think we'll see if I had run

00:04:56.160 --> 00:04:57.050
we get an error.

00:04:57.060 --> 00:05:03.300
And the reason for this is now it's not able to automatically take this value.

00:05:03.360 --> 00:05:09.430
And of course it isn't because string age is not the same as this variable name age.

00:05:09.600 --> 00:05:15.240
So in order to get rid of this error I will have to manually assign a value here again.

00:05:15.240 --> 00:05:22.630
So now if I had run you see we now print out this object and then Max 28 year.

00:05:22.770 --> 00:05:29.950
So we are able to dynamically at a property name H as you can see here and don't be confused that you

00:05:29.950 --> 00:05:31.970
are not seeing the quotation marks here.

00:05:32.160 --> 00:05:38.310
You are still accessing those values why are quotation marks like you see here with the function call

00:05:38.330 --> 00:05:38.690
.

00:05:38.970 --> 00:05:43.900
But as I said it's not able to automatically infer this value here anymore.

00:05:44.020 --> 00:05:48.440
Sains well in quotation marks is not the same as this.

00:05:48.480 --> 00:05:54.930
So this is how you can dynamically assign certain property values and of course you can also access

00:05:54.930 --> 00:05:56.040
those values.

00:05:56.040 --> 00:06:02.130
So let's see what happens if I print the age of my object here and I'll get rid of the greeting for

00:06:02.130 --> 00:06:02.800
now.

00:06:03.060 --> 00:06:05.330
So for now it's run.

00:06:05.730 --> 00:06:10.830
This still works and you also saw how that worked because here is my function call I'm still accessing

00:06:10.830 --> 00:06:19.320
this age so I can't still use dot notation for this field name since it doesn't have any invalid characters

00:06:19.350 --> 00:06:19.620
in it.

00:06:19.620 --> 00:06:28.590
It's not like the greet me function here so I can still access it with Dot H that doesn't work and that's

00:06:28.590 --> 00:06:30.650
important to understand.

00:06:30.690 --> 00:06:36.120
Now of course you can also access it at this age field.

00:06:36.240 --> 00:06:43.830
The variable which holds the property name if I now indrawn you also see 28 and that is one of the important

00:06:43.830 --> 00:06:44.640
things here.

00:06:44.760 --> 00:06:51.030
You can create properties dynamically with the names stored in variables and then you can reuse those

00:06:51.030 --> 00:06:53.170
variables to access Tila's properties.

00:06:53.220 --> 00:07:00.690
Probably a use case you will have in your apps if you work with that kind of property creation that

00:07:00.750 --> 00:07:04.590
you want to access your property names in the variable later on too.

00:07:04.860 --> 00:07:12.150
And you can do this you can pass it to this square brackets notation to access your fields in this object

00:07:12.970 --> 00:07:17.860
so that we're some additions to the way you work with object literals.

00:07:17.910 --> 00:07:24.230
The fact that you have these shortcuts to initialize the fields or to set up functions.

00:07:24.270 --> 00:07:30.240
Yes you can put your field names here into quotation marks.

00:07:30.240 --> 00:07:35.990
Your function field names that you also have those dynamic fields like the age fields here.

00:07:36.150 --> 00:07:42.240
So a lot of little additions which might come in handy when you were actually writing your applications