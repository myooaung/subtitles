WEBVTT

00:00:01.170 --> 00:00:05.430
Know on our iterator here we can also use to our methods.

00:00:05.430 --> 00:00:10.790
And next you can use the Frue method like that.

00:00:11.250 --> 00:00:19.440
And let's see what happens if for now run we get the first object with a value of zero and then we get

00:00:19.500 --> 00:00:20.180
error.

00:00:20.220 --> 00:00:22.400
And while our.

00:00:22.410 --> 00:00:29.850
Exception I can also pass a message here and error occurred.

00:00:29.850 --> 00:00:33.320
And what do you think we'll now see if I had run.

00:00:33.570 --> 00:00:36.440
So show us the error because we're not handling that.

00:00:36.630 --> 00:00:39.240
But in our iterator we could do the following.

00:00:39.240 --> 00:00:42.370
We could add a try catch block here.

00:00:42.630 --> 00:00:45.450
And each time we're there we're trying

00:00:48.450 --> 00:00:53.800
to yield but if we get an error we catch that error or.

00:00:54.270 --> 00:00:57.740
And then we simply bend it to the console.

00:00:57.900 --> 00:01:06.390
So what do you think will now happen if I run we get our object with the value of 0 and then we get

00:01:06.450 --> 00:01:13.430
an error occurred and then we just continue with the loop because it only failt is one time here.

00:01:13.470 --> 00:01:18.560
But then we may just go on and have no problem with that.

00:01:18.570 --> 00:01:22.040
So you see the generator as you're managing the state for us.

00:01:22.140 --> 00:01:27.480
And if we actually handle the error like we're now doing you'll see it's continuing Just like if nothing

00:01:27.480 --> 00:01:29.130
happened after that.

00:01:29.130 --> 00:01:36.930
With the next next call before when we did not handle it you saw it just finished so it basically set

00:01:37.320 --> 00:01:41.150
done to true and just didn't continue.

00:01:41.370 --> 00:01:42.880
And that's why you can't control it.

00:01:43.080 --> 00:01:46.880
And that's how the generator works with you or works for you.

00:01:46.880 --> 00:01:50.130
Mencius restate besides frue.

00:01:50.130 --> 00:01:58.080
We also have return but currently that is only supported in Firefox but I'm sure our browsers will also

00:01:58.080 --> 00:01:59.920
add support in the future.

00:02:00.050 --> 00:02:04.940
Therefore here for now we run we see it work.

00:02:04.950 --> 00:02:09.990
But keep in mind even though I'm using Chrome you're does this just because I mean Jayde spinning your

00:02:10.440 --> 00:02:14.930
or at the time you watch this video it might be added to other browsers involved as well.

00:02:14.940 --> 00:02:21.510
Check out the incompatibility chart they showed in the first muchall but in general be careful in using

00:02:21.510 --> 00:02:23.220
this feature right now.

00:02:23.520 --> 00:02:27.210
But you talk about what it does as it can see.

00:02:27.210 --> 00:02:34.170
We get the value of your all with for his next call but with free turn we're overwriting you value and

00:02:34.170 --> 00:02:38.330
we're actually returning whatever we pass as an argument.

00:02:38.430 --> 00:02:44.640
We're not repeating the value we skipped with the next step we're already done so we just left out one

00:02:44.670 --> 00:02:47.340
instead return the number value.

00:02:47.340 --> 00:02:53.880
So that's just another way you have to interact with your iterator from outside of it like throw four

00:02:53.880 --> 00:02:58.200
states to get an error or return forces it to overwrite a volume