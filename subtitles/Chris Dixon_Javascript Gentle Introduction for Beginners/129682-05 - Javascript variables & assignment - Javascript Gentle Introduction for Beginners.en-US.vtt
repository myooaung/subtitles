WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.120 --> 00:00:06.765
Welcome back to this new section called JavaScript basics.

00:00:06.765 --> 00:00:11.265
I'm going to get started by creating a new folder in our JavaScript section,

00:00:11.265 --> 00:00:15.390
I'm going to call this folder javascript-basics.

00:00:15.390 --> 00:00:21.975
You can save all the parts of the section inside there.

00:00:21.975 --> 00:00:24.705
So disables a lot of typing.

00:00:24.705 --> 00:00:27.405
If we go back to the last video that we done in

00:00:27.405 --> 00:00:32.130
understanding-javascript and then copy the comments and display in

00:00:32.130 --> 00:00:39.980
JavaScript folder and then paste that in the JavaScript basic section and rename it.

00:00:39.980 --> 00:00:44.070
I want to keep mine in order by doing number 1,

00:00:44.070 --> 00:00:49.870
I call this variables and assignments.

00:00:50.240 --> 00:00:59.280
Then put this into brackets. There we go.

00:00:59.280 --> 00:01:03.410
Now we've got the index page from the last video.

00:01:03.410 --> 00:01:06.725
I'm just going to get rid of these comments for now,

00:01:06.725 --> 00:01:12.420
but keep the code in place and then change

00:01:12.420 --> 00:01:22.630
the page title to variables and assignments.

00:01:24.890 --> 00:01:28.680
We can reuse the code that we done in the last video.

00:01:28.680 --> 00:01:30.905
This section of JavaScript,

00:01:30.905 --> 00:01:37.020
it takes the empty level 1 heading and replaces it with some text.

00:01:38.480 --> 00:01:41.525
In this video, we're going to take a look at

00:01:41.525 --> 00:01:45.050
variables and how we can use them in JavaScript.

00:01:45.050 --> 00:01:48.560
A variable is a container for

00:01:48.560 --> 00:01:53.975
information that we can give a name to and the contents of that variable,

00:01:53.975 --> 00:01:56.835
as the name suggests, can change.

00:01:56.835 --> 00:01:59.975
Let's take a look at how we can use variables.

00:01:59.975 --> 00:02:02.900
We declare a variable by using

00:02:02.900 --> 00:02:07.550
the var keyword and then we put in the name of the variable next.

00:02:07.550 --> 00:02:08.840
I want to call

00:02:08.840 --> 00:02:13.530
my variable pageTitle and

00:02:13.530 --> 00:02:18.830
then the equal sign and then between quotations we set the contents of the variable.

00:02:18.830 --> 00:02:21.680
I'm going to reuse this text.

00:02:21.680 --> 00:02:24.110
Cut that text there,

00:02:24.110 --> 00:02:30.675
and then if we paste it inside the variable and the semicolon at the end,

00:02:30.675 --> 00:02:36.305
so we're assigning the text over to a variable called pageTitle.

00:02:36.305 --> 00:02:43.010
Now we can go back over to our innerHTML and rather than set that equal to the text,

00:02:43.010 --> 00:02:45.965
we can put in place the variable name,

00:02:45.965 --> 00:02:49.980
which is pageTitle, and save that.

00:02:49.980 --> 00:02:53.630
Now when we go back over to the browser and refresh,

00:02:53.630 --> 00:02:55.820
we should get the same message.

00:02:55.820 --> 00:02:58.160
But this time the message is stored into

00:02:58.160 --> 00:03:03.005
a variable and you can change this to be anything that you want.

00:03:03.005 --> 00:03:10.900
We change it to variables and then take a look and when we refresh, there's a change.

00:03:10.900 --> 00:03:14.070
Let's take a look at some more examples.

00:03:14.070 --> 00:03:16.920
I'm just going to comment this section.

00:03:16.920 --> 00:03:19.800
In brackets you can press command on forward

00:03:19.800 --> 00:03:22.965
slash and it will comment on all the section.

00:03:22.965 --> 00:03:28.370
We looked at creating variables with text or strings.

00:03:28.370 --> 00:03:32.900
We can also create variables with different data types, such as numbers.

00:03:32.900 --> 00:03:42.235
Let's create a variable with a name of number1 and set this to a number such as 10.

00:03:42.235 --> 00:03:46.070
You know when we're dealing with numbers as opposed to strings,

00:03:46.070 --> 00:03:49.010
we don't need to put any quotations around the value.

00:03:49.010 --> 00:03:55.900
We can just leave it as it is and a second variable called number2,

00:03:55.900 --> 00:03:59.040
and the value this time of 20,

00:03:59.040 --> 00:04:02.075
and as well as certain values to variables.

00:04:02.075 --> 00:04:08.045
We can also create a variable which is made up of variables added together.

00:04:08.045 --> 00:04:13.415
In this case, we can create a total and set that total to be

00:04:13.415 --> 00:04:22.255
the sum of variable number1 plus variable number2,

00:04:22.255 --> 00:04:27.480
and the semicolon at the end and then to check if those are all working okay,

00:04:27.480 --> 00:04:35.080
we can create a alert and then we can simply alert the total.

00:04:37.790 --> 00:04:40.920
Let's see, that's working with the refresh.

00:04:40.920 --> 00:04:44.165
Great. We got the total 30 appear in there,

00:04:44.165 --> 00:04:47.570
which is the sum of the two variables added together.

00:04:48.170 --> 00:04:51.905
As we mentioned before and as the name suggests,

00:04:51.905 --> 00:04:55.300
a value of a variable can change.

00:04:55.300 --> 00:04:58.790
Once we've declared a variable with the var keyword,

00:04:58.790 --> 00:05:03.125
we don't need to use the var keyword again to change the value.

00:05:03.125 --> 00:05:06.860
If we wanted to change the value of number1,

00:05:06.860 --> 00:05:09.760
this time we just type number1,

00:05:09.760 --> 00:05:14.540
and we can change its value to be something such as five.

00:05:14.540 --> 00:05:18.800
Now number1 is equal to five and number2 is 20.

00:05:18.800 --> 00:05:22.590
We should now get the results of 25.

00:05:23.420 --> 00:05:26.050
When we're creating variables,

00:05:26.050 --> 00:05:31.520
we can actually declare the variable first without setting a initial value to it.

00:05:31.520 --> 00:05:36.120
If we just set the variable and give it a name,

00:05:38.200 --> 00:05:41.360
it doesn't have to have a initial value.

00:05:41.360 --> 00:05:43.505
Then a bit later on in the code,

00:05:43.505 --> 00:05:47.030
we can then assign a value to

00:05:47.030 --> 00:05:53.025
that variable just like that and this will still work just as before.

00:05:53.025 --> 00:05:56.265
We've now got number1 five and number2 set to 10.

00:05:56.265 --> 00:05:59.370
We should get the total of 15,

00:05:59.370 --> 00:06:02.770
and we get 15, that's good.

00:06:03.500 --> 00:06:07.235
Let's just go back to the original example.

00:06:07.235 --> 00:06:09.140
When we're creating variables,

00:06:09.140 --> 00:06:14.170
there's certain rules that we need to follow when creating a variable names.

00:06:14.170 --> 00:06:18.785
When we naming a variable, it needs to start with a letter, an underscore,

00:06:18.785 --> 00:06:20.390
or a dollar sign,

00:06:20.390 --> 00:06:23.600
and variable names are also case-sensitive.

00:06:23.600 --> 00:06:26.840
We had a variable with the name of

00:06:26.840 --> 00:06:32.975
number1 and then we had a variable with the name of Number1,

00:06:32.975 --> 00:06:35.620
to start with a capital.

00:06:35.620 --> 00:06:38.985
These are treated as different variables.

00:06:38.985 --> 00:06:43.455
We'll just change the example, start it with a capital,

00:06:43.455 --> 00:06:49.965
we should still get the sum of 5 plus 10. There we go.

00:06:49.965 --> 00:06:55.220
The last thing I wanted to talk about in this video is the assignment operator,

00:06:55.220 --> 00:06:58.285
which is this equals symbol.

00:06:58.285 --> 00:07:02.420
In JavaScript, the symbol assigns a value to

00:07:02.420 --> 00:07:06.935
the variable name and it doesn't actually check if it's equal to.

00:07:06.935 --> 00:07:11.000
In JavaScript if we want to check if something is equal,

00:07:11.000 --> 00:07:13.175
we use a double equals.

00:07:13.175 --> 00:07:21.000
For example, five is equal to five and this means equal to,

00:07:21.830 --> 00:07:25.875
and we can also use the three equal symbols.

00:07:25.875 --> 00:07:30.440
If five and three symbols equal to five,

00:07:30.440 --> 00:07:38.250
this way checks if the values are equal value and equal type.

00:07:38.960 --> 00:07:44.545
In this case, the five is equal to five in value and the type,

00:07:44.545 --> 00:07:46.660
because they're both numbers.

00:07:46.660 --> 00:07:52.985
But five, the three equal symbols and then the five in quotations.

00:07:52.985 --> 00:07:57.370
This should be false because they're equal value but they're not equal type,

00:07:57.370 --> 00:08:01.855
because the five on the left is a number and the five on the right,

00:08:01.855 --> 00:08:03.445
because it's in quotations,

00:08:03.445 --> 00:08:07.790
is a string and it's considered to be a text.

00:08:07.790 --> 00:08:10.390
We'll look at a lot more examples to these as we go

00:08:10.390 --> 00:08:12.790
through the course, but that's it for now.

00:08:12.790 --> 00:08:16.520
Thank you for listening, and will see you in the next video.
