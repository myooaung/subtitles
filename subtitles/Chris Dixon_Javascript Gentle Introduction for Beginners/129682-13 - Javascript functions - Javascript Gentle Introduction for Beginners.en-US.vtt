WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.620 --> 00:00:05.190
Welcome back guys. This video is all about JavaScript functions.

00:00:05.190 --> 00:00:08.355
So let's get started in usual way.

00:00:08.355 --> 00:00:11.100
So create a Functions folder,

00:00:11.100 --> 00:00:13.840
which is number 9.

00:00:14.120 --> 00:00:20.560
Then open up the Functions folder inside your text editor.

00:00:23.030 --> 00:00:26.950
Then change the title to functions,

00:00:30.590 --> 00:00:34.000
and then, just delete the sample code there.

00:00:37.690 --> 00:00:43.940
A function is basically a block of code which we can call when required.

00:00:43.940 --> 00:00:47.735
So rather than repeating the same code more than ones,

00:00:47.735 --> 00:00:51.185
we can write it once and place it inside a function.

00:00:51.185 --> 00:00:54.595
Then we can call a function by its name to run it.

00:00:54.595 --> 00:00:58.040
So a function looks a little bit like this.

00:00:58.040 --> 00:01:01.500
So use the function keyword,

00:01:02.050 --> 00:01:05.225
and then, give the function a name.

00:01:05.225 --> 00:01:08.350
I'm going to call it my function.

00:01:08.350 --> 00:01:11.910
Then we need to use the curly brackets afterwards.

00:01:11.910 --> 00:01:15.000
Then the code that we're going to put inside the function,

00:01:15.000 --> 00:01:18.060
goes between curly braces just like that.

00:01:18.060 --> 00:01:22.590
I'm going to start with a simple alert.

00:01:22.590 --> 00:01:28.690
So I'm just going to alert some text, function is working.

00:01:30.040 --> 00:01:33.005
So once we've created a function,

00:01:33.005 --> 00:01:35.225
we then need to invoke it,

00:01:35.225 --> 00:01:38.285
or call it by its function name.

00:01:38.285 --> 00:01:40.665
So in our case, it's myFunction.

00:01:40.665 --> 00:01:44.805
I'm going to need to write to the brackets afterwards, and a semicolon.

00:01:44.805 --> 00:01:50.260
Save that. So there's our function working.

00:01:51.410 --> 00:01:55.795
Pretty much any code we want between the curly braces,

00:01:55.795 --> 00:01:57.635
and it will run every time it's called.

00:01:57.635 --> 00:02:01.040
So if we create a couple of variables,

00:02:01.040 --> 00:02:06.590
so variable A can perform some calculations inside the function.

00:02:06.590 --> 00:02:10.985
Then variable B, and set that to 10.

00:02:10.985 --> 00:02:15.040
Then, we can access these variables inside the function.

00:02:15.040 --> 00:02:18.510
We're going to create a variable C,

00:02:18.510 --> 00:02:22.560
and that's going to be the sum of A, multiplied by B.

00:02:22.560 --> 00:02:26.415
So A, and then a star and B.

00:02:26.415 --> 00:02:30.550
Then display the value of C with a document.write.

00:02:34.400 --> 00:02:37.840
So now, every time we call myFunction,

00:02:37.840 --> 00:02:40.640
we should get the calculation being performed,

00:02:40.640 --> 00:02:44.885
and then the result of the calculation being printed to the screen.

00:02:44.885 --> 00:02:47.405
So save and refresh,

00:02:47.405 --> 00:02:50.640
and then we get the value appearing on the screen.

00:02:51.800 --> 00:02:56.885
So to help you understand functions a little bit better and exactly what they do,

00:02:56.885 --> 00:03:02.420
let's create a real life example of how we could use a function in a game.

00:03:02.420 --> 00:03:09.265
So we've had a game and we had a variable which sets the score.

00:03:09.265 --> 00:03:13.685
Then the variable called Lives,

00:03:13.685 --> 00:03:17.300
which sets the number of lives the player has,

00:03:17.300 --> 00:03:21.640
and then the variable of gameOver.

00:03:21.640 --> 00:03:24.500
This is set to a build on value,

00:03:24.500 --> 00:03:26.390
which is true or false.

00:03:26.390 --> 00:03:27.980
So while the game is running,

00:03:27.980 --> 00:03:30.995
want that to be false to start with.

00:03:30.995 --> 00:03:34.670
So in this case, a good use of a function may be

00:03:34.670 --> 00:03:38.420
to reduce the number of lives that the player has.

00:03:38.420 --> 00:03:41.615
So rather than write that code out every time the player lost a life,

00:03:41.615 --> 00:03:43.955
we could simply call the function.

00:03:43.955 --> 00:03:50.340
So create function, and we'll call this lifeLost.

00:03:51.300 --> 00:03:54.550
So every time the player loses a life,

00:03:54.550 --> 00:03:58.670
we would then reset the score back to zero.

00:03:58.710 --> 00:04:03.830
We'll could also decrement the number of lives by one.

00:04:03.830 --> 00:04:10.110
We would also set gameOver to be equal to true.

00:04:10.110 --> 00:04:11.590
Then once the game is over,

00:04:11.590 --> 00:04:14.710
we maybe want to send a message on the screen.

00:04:14.710 --> 00:04:17.570
So document.write.

00:04:20.210 --> 00:04:23.400
We'll put this between level 2 headings.

00:04:23.400 --> 00:04:25.960
So game over.

00:04:28.090 --> 00:04:32.480
Then we'll tell the user how many lives they have left.

00:04:35.200 --> 00:04:38.240
Then we'll display the number of lives.

00:04:38.240 --> 00:04:40.495
[inaudible] that sidebar to get them more room.

00:04:40.495 --> 00:04:42.340
So to print the number lives,

00:04:42.340 --> 00:04:45.785
we can add the lives variable.

00:04:45.785 --> 00:04:49.650
So after the number, we'll add the string,

00:04:49.650 --> 00:04:53.760
lives left, and then,

00:04:53.760 --> 00:04:56.445
close off the level 2 heading.

00:04:56.445 --> 00:04:58.935
I'll need to space that actually.

00:04:58.935 --> 00:05:01.350
So let's save that,

00:05:01.350 --> 00:05:05.805
then we'll call the function, lifeLost.

00:05:05.805 --> 00:05:11.115
Let's take a look. Great. So now we've got the message appearing,

00:05:11.115 --> 00:05:16.915
and the 10 lives that we started off with has now been reduced down to nine.

00:05:16.915 --> 00:05:23.035
We can do that again. It should reduce by one every time.

00:05:23.035 --> 00:05:28.570
Hope that example has given you a better idea of how we can use functions in JavaScript.

00:05:28.570 --> 00:05:33.450
In the next video, we'll continue on by taking a look at function parameters.
