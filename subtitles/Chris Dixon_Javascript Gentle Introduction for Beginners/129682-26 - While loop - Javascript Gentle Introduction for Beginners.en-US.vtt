WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.820 --> 00:00:05.940
Loops are really popular in lots of programmer languages,

00:00:05.940 --> 00:00:08.355
and JavaScript is no exception.

00:00:08.355 --> 00:00:10.035
In these next few videos,

00:00:10.035 --> 00:00:12.375
we'll be looking at For loops,

00:00:12.375 --> 00:00:15.555
While loops, and Do While loops.

00:00:15.555 --> 00:00:18.600
Don't worry if this is unfamiliar.

00:00:18.600 --> 00:00:21.825
We'll take a look at exactly how each one works,

00:00:21.825 --> 00:00:24.735
starting with the While loop in this video.

00:00:24.735 --> 00:00:30.495
Loops can be really useful and it can save us a lot of repetitive typing.

00:00:30.495 --> 00:00:34.005
Let's get started with its own folder,

00:00:34.005 --> 00:00:36.120
and this is number 7.

00:00:36.120 --> 00:00:39.100
I will call this one, while loops.

00:00:40.730 --> 00:00:46.050
Let's open it up in brackets and drag it

00:00:46.050 --> 00:00:53.440
in and rename these While loops.

00:00:54.680 --> 00:00:58.870
Let me get rid of all these from the last video,

00:01:00.140 --> 00:01:03.850
and also all the HTML below.

00:01:06.710 --> 00:01:10.665
Let's start with a basic While loop.

00:01:10.665 --> 00:01:13.425
We use the while keyword,

00:01:13.425 --> 00:01:15.820
and then the brackets,

00:01:15.820 --> 00:01:18.880
and then the curly braces.

00:01:18.880 --> 00:01:21.640
This might start to look a bit familiar to you.

00:01:21.640 --> 00:01:24.680
This is basically the same layout as

00:01:24.680 --> 00:01:29.540
the switch statements and the if/else statements that we looked at previously.

00:01:29.540 --> 00:01:32.454
Hopefully, it shouldn't be too unfamiliar.

00:01:32.454 --> 00:01:36.140
The brackets afterwards also work in the same way as

00:01:36.140 --> 00:01:40.175
if-statements as in we pass a condition into the brackets,

00:01:40.175 --> 00:01:42.725
and while this condition is true,

00:01:42.725 --> 00:01:45.530
and then we run some code in between,

00:01:45.530 --> 00:01:51.350
and this code keeps looping or repeating until this condition is no longer met.

00:01:51.350 --> 00:01:53.825
While this is true,

00:01:53.825 --> 00:01:58.415
we need to do this or whatever is in between the braces.

00:01:58.415 --> 00:02:03.500
Let's put a basic example inside this While loop and begin.

00:02:03.500 --> 00:02:06.480
We're going to need to create a variable.

00:02:07.700 --> 00:02:10.745
This variable, I'm going to call i,

00:02:10.745 --> 00:02:14.555
which is a pretty common variable name for using with the loop.

00:02:14.555 --> 00:02:16.640
But you can call it anything you want.

00:02:16.640 --> 00:02:21.710
I'm going to set the initial value of i to be equal to one.

00:02:21.710 --> 00:02:27.700
While i is less than 10,

00:02:27.700 --> 00:02:30.990
we want to do something inside the braces.

00:02:30.990 --> 00:02:34.990
Let's just keep it simple with a document write.

00:02:38.140 --> 00:02:44.380
We want to write to the browser the value of i every time we loop,

00:02:44.380 --> 00:02:47.645
and then just so the value of i appears on its own line,

00:02:47.645 --> 00:02:52.800
I'm going to put a break tag inside there, and then i++.

00:02:53.870 --> 00:02:58.065
This might look a little bit strange but what were you doing?

00:02:58.065 --> 00:03:01.360
Is we're setting the value of i to be one,

00:03:01.360 --> 00:03:06.200
and then while i is less than the value of 10,

00:03:06.200 --> 00:03:08.150
which it currently is,

00:03:08.150 --> 00:03:13.695
we're then going to print to the screen the value of i.

00:03:13.695 --> 00:03:17.780
To begin with, number 1 will be printed and then every

00:03:17.780 --> 00:03:22.550
time we loop through this code, it will be i++.

00:03:22.550 --> 00:03:26.015
The next time the loop goes round,

00:03:26.015 --> 00:03:28.415
because we're doing a i++,

00:03:28.415 --> 00:03:34.270
i will be then set to two and then we'll loop round again and print two.

00:03:34.270 --> 00:03:37.730
Then this will be incremented again to three

00:03:37.730 --> 00:03:41.960
and this will keep happening until i is less than 10,

00:03:41.960 --> 00:03:44.225
or in our case we'll get number 9.

00:03:44.225 --> 00:03:49.180
So we should see on the screen printed number 1 through to number 9.

00:03:49.180 --> 00:03:52.390
Let's take a look in the browser.

00:03:53.180 --> 00:03:57.100
Okay, there we go. We got the value of 1-9,

00:03:57.100 --> 00:03:59.555
and because it will break target line as well,

00:03:59.555 --> 00:04:02.570
each one of these values is on their own line.

00:04:02.570 --> 00:04:05.900
But just one little word of warning when using While loops,

00:04:05.900 --> 00:04:10.925
is it can be quite easy to crash the browser if we don't do them correctly.

00:04:10.925 --> 00:04:15.165
If we take the i++ out of there,

00:04:15.165 --> 00:04:17.795
so every time this While loop runs,

00:04:17.795 --> 00:04:20.375
the value of i will always be one.

00:04:20.375 --> 00:04:25.085
So then we'll create a infinite loop which will never end because i will

00:04:25.085 --> 00:04:29.810
always be less than 10 and this will cause the browser or your program to crash.

00:04:29.810 --> 00:04:34.755
Be really careful that we increment on each loop.

00:04:34.755 --> 00:04:38.780
Another popular way of using loops is to loop

00:04:38.780 --> 00:04:43.135
through an array and then print all the values of the array.

00:04:43.135 --> 00:04:45.945
Let's show an example of that now.

00:04:45.945 --> 00:04:55.310
Create a array called foods and we'll set that in the literal way.

00:04:55.310 --> 00:05:00.485
Just add some foods inside the array, separated by commas,

00:05:00.485 --> 00:05:07.675
so pasta, pizza, and fish.

00:05:07.675 --> 00:05:12.790
Because the index of arrays starts at position zero,

00:05:12.790 --> 00:05:17.155
I'm just going to change the variable of i to be zero.

00:05:17.155 --> 00:05:20.435
If you remember from the array section,

00:05:20.435 --> 00:05:23.390
we can print the array's value.

00:05:23.390 --> 00:05:31.375
Let's do a quick document write and then we pass in the name of the array.

00:05:31.375 --> 00:05:37.040
If we wanted to print an individual item inside the array,

00:05:37.040 --> 00:05:39.920
we could select the number bytes index.

00:05:39.920 --> 00:05:42.550
If we wanted to print pasta,

00:05:42.550 --> 00:05:44.730
that is index zero.

00:05:44.730 --> 00:05:49.455
I will just comment this out and then print.

00:05:49.455 --> 00:05:51.915
That's how we get the value of an array.

00:05:51.915 --> 00:05:57.570
But if we wanted to print all the values of the array onto the screen,

00:05:59.750 --> 00:06:02.820
let's just uncomment this for now.

00:06:02.820 --> 00:06:05.045
Because we're using a loop,

00:06:05.045 --> 00:06:09.095
we want to pass into the loop the index number,

00:06:09.095 --> 00:06:12.115
so let's just take that out of there.

00:06:12.115 --> 00:06:15.030
Paste that in the brackets.

00:06:15.030 --> 00:06:17.990
We don't just want to select position zero,

00:06:17.990 --> 00:06:20.150
we want to set that to be i,

00:06:20.150 --> 00:06:25.820
because we want to loop through and increase this by one every pass of the loop.

00:06:25.820 --> 00:06:28.895
Instead of printing the value of i,

00:06:28.895 --> 00:06:31.940
we want to print the contents of the array.

00:06:31.940 --> 00:06:38.235
We want to print the foods and the foods number is the value of i.

00:06:38.235 --> 00:06:42.030
What will happen there is the loop will be run

00:06:42.030 --> 00:06:47.975
and the loop will begin with the value of zero, which is pasta.

00:06:47.975 --> 00:06:56.005
Then we'll print to the screen the value of pasta and then i will be incremented to one,

00:06:56.005 --> 00:06:57.940
so that changes to one,

00:06:57.940 --> 00:06:59.935
which is the second index,

00:06:59.935 --> 00:07:01.960
so that's the value of pizza.

00:07:01.960 --> 00:07:07.230
Then pizza will be printed to the screen and that will loop around again,

00:07:07.230 --> 00:07:12.730
and i will be incremented to number 2 which is fish,

00:07:12.730 --> 00:07:17.850
so 0, 1, 2 and then fish will be printed to the screen.

00:07:17.850 --> 00:07:21.730
Then the loop will end because that's all the values of the array.

00:07:21.730 --> 00:07:24.160
Let's start again with zero,

00:07:24.160 --> 00:07:27.620
save that, and refresh the browser.

00:07:27.620 --> 00:07:31.035
There we go, so there's our free values of the array,

00:07:31.035 --> 00:07:33.585
and that's how a While loop works.

00:07:33.585 --> 00:07:36.710
Thanks for watching, and we'll move on now to the next video.

00:07:36.710 --> 00:07:40.040
We'll take a look at a slight variant of the While loop,

00:07:40.040 --> 00:07:43.380
and this is called the Do While loop.
