WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.830 --> 00:00:05.850
Welcome back guys. This video is all about the JavaScript for loop,

00:00:05.850 --> 00:00:11.100
and this is the third and final type of loop which we'll be looking at in this section.

00:00:11.100 --> 00:00:14.010
If you understood how the while loop works

00:00:14.010 --> 00:00:17.220
and the do while loop works from previous videos,

00:00:17.220 --> 00:00:21.510
you shouldn't have any problems understanding how a for loop works.

00:00:21.510 --> 00:00:26.895
Let's begin with its own folder in the Control Flow section,

00:00:26.895 --> 00:00:31.690
and this is video number 9: for loops,

00:00:32.480 --> 00:00:36.460
and then let's open it up in Brackets,

00:00:40.760 --> 00:00:50.640
and then change the title to For loops and we can leave this loop for a reference.

00:00:50.640 --> 00:00:56.150
For loops are useful when we know how many times we want to repeat that loop.

00:00:56.150 --> 00:00:57.725
Whereas a while loop,

00:00:57.725 --> 00:01:00.530
will run until a condition is no longer true.

00:01:00.530 --> 00:01:04.155
In a for loop, we need to say how many times it will run.

00:01:04.155 --> 00:01:08.265
We'll begin a for loop with the for keyword,

00:01:08.265 --> 00:01:12.230
and then initial look fairly familiar from the rest of the videos.

00:01:12.230 --> 00:01:15.980
We use the brackets and then a set of curly braces.

00:01:15.980 --> 00:01:19.700
In a while loop or a do while loop,

00:01:19.700 --> 00:01:24.335
we set the variable and this is set outside of the loop.

00:01:24.335 --> 00:01:26.210
While using a for loop,

00:01:26.210 --> 00:01:30.265
we need to put in three different values in between the brackets.

00:01:30.265 --> 00:01:35.105
The first one is the initial value of the variable.

00:01:35.105 --> 00:01:41.390
I want to use, i once more and the three values need to be separated with a semicolon.

00:01:41.390 --> 00:01:46.055
The second value is a condition we want to test against.

00:01:46.055 --> 00:01:52.960
As an example, we want to run the loop while i is less than 10,

00:01:52.960 --> 00:01:56.120
and then a semicolon, and just like previous loops,

00:01:56.120 --> 00:01:58.775
we can use pretty much what's in here,

00:01:58.775 --> 00:02:02.510
we can use equals or any of the operators.

00:02:02.510 --> 00:02:06.415
The third value is going to be our incrementer.

00:02:06.415 --> 00:02:12.565
Again, I'm going to use i plus plus to increment the value by one in every loop.

00:02:12.565 --> 00:02:16.535
We can also use the same document write from the last video.

00:02:16.535 --> 00:02:21.185
So put that inside the curly braces. we can just delete this for now.

00:02:21.185 --> 00:02:23.780
That's how a for loop looks.

00:02:23.780 --> 00:02:29.045
We initially set the value to be one and the loop will keep running

00:02:29.045 --> 00:02:35.135
while the value of i is less than 10 and with every possible loop,

00:02:35.135 --> 00:02:37.510
i is incremented by one.

00:02:37.510 --> 00:02:41.330
So we should get the values of one right through to nine

00:02:41.330 --> 00:02:45.740
printed when we open this up in the browser. There we go.

00:02:45.740 --> 00:02:47.165
We've got one through to nine,

00:02:47.165 --> 00:02:49.680
such are working correctly.

00:02:49.820 --> 00:02:53.130
So just like while loops, we can also use a for

00:02:53.130 --> 00:02:56.625
loop to loop through the values of an array.

00:02:56.625 --> 00:03:00.410
Let's take a look at how we can do that in a for loop.

00:03:00.410 --> 00:03:05.265
Let's use our foods example that we looked that in the while loop.

00:03:05.265 --> 00:03:08.260
Again, I'm going to put in pasta,

00:03:08.690 --> 00:03:14.770
pizza and then fish,

00:03:14.990 --> 00:03:19.450
and then create the for loop just like we used above.

00:03:20.120 --> 00:03:23.700
Let's declare the value of i initially,

00:03:23.700 --> 00:03:30.500
so i is set to zero because the index of zero is the first value of an array.

00:03:30.500 --> 00:03:33.140
So once that starts at zero,

00:03:33.140 --> 00:03:35.920
and then the number of times we want to loop through

00:03:35.920 --> 00:03:40.570
is equal to the number of values inside the array.

00:03:40.570 --> 00:03:45.220
So while i is less than foods.length,

00:03:46.730 --> 00:03:49.990
and you may be wondering why we're using less than

00:03:49.990 --> 00:03:53.005
rather than equal to the length of the array,

00:03:53.005 --> 00:03:59.820
well that simply because the length property begins at one rather than zero,

00:03:59.820 --> 00:04:02.265
so that's why we need to do that,

00:04:02.265 --> 00:04:06.995
and then a semicolon and the third value is our incrementer,

00:04:06.995 --> 00:04:12.480
so i plus plus and then let's set document

00:04:12.480 --> 00:04:19.355
write and then we want to print out the value of the foods array,

00:04:19.355 --> 00:04:23.215
and then inside the square brackets one pass in i.

00:04:23.215 --> 00:04:25.600
Initially i is set to zero,

00:04:25.600 --> 00:04:27.605
which is the value of pasta,

00:04:27.605 --> 00:04:32.990
and then we'll loop through and i will be incremented and then be the value of one,

00:04:32.990 --> 00:04:36.590
which is pizza, and then the third and final loop,

00:04:36.590 --> 00:04:38.090
i will be set to two,

00:04:38.090 --> 00:04:40.710
which is the third value of fish.

00:04:40.710 --> 00:04:43.520
Let's just run that now with the break tag,

00:04:43.520 --> 00:04:45.905
so they're all on separate lines.

00:04:45.905 --> 00:04:50.870
Break tag in there and then let's refresh that in the browser,

00:04:50.870 --> 00:04:55.360
and there's our three values of pasta, pizza, and fish.

00:04:55.360 --> 00:04:59.205
There you go. That's how a for loop works in JavaScript.

00:04:59.205 --> 00:05:04.500
In the next video, we'll be taking a look at using these in a mini challenge.
