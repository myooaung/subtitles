WEBVTT
1
00:00:05.310 --> 00:00:10.900
In this video, we are going to go through and create the controller for our jokes app, you can see

2
00:00:10.900 --> 00:00:15.010
here that I have issue number four open to create the joke controller.

3
00:00:15.010 --> 00:00:17.750
So I will commit to GitHub under this issue.

4
00:00:17.770 --> 00:00:24.910
So when I come over to Intelligent now and we'll go ahead and do the implementation some over an anthology.

5
00:00:25.150 --> 00:00:28.180
And what I like to do is do a logical layout.

6
00:00:28.180 --> 00:00:31.670
So we'll go ahead and create a package for our controller.

7
00:00:31.690 --> 00:00:36.340
So if this project were to grow, we'd keep our code organized into packages.

8
00:00:36.340 --> 00:00:40.840
So find things easier and I'm just going to call those controllers like so.

9
00:00:42.250 --> 00:00:45.520
And now I'm going to come up here, create a new job, a class.

10
00:00:46.750 --> 00:00:49.930
Some say Joe controller and attempt to get.

11
00:00:50.950 --> 00:00:52.650
I'm going to come up here and say.

12
00:00:54.940 --> 00:00:56.290
Market as a controller.

13
00:00:57.870 --> 00:01:03.840
Now, let's go ahead and implement the controller itself, and we want to do is we do want to bring

14
00:01:03.840 --> 00:01:04.960
in the choke service.

15
00:01:04.980 --> 00:01:07.410
I'm going to do private final.

16
00:01:08.800 --> 00:01:10.600
Joke service, so.

17
00:01:12.310 --> 00:01:19.210
You can see that's not happy, so I do command and I'm going to generate the constructor using ontology

18
00:01:19.720 --> 00:01:28.200
and initialize the joke service like so and here if we mark this is all the wired spring is going to

19
00:01:28.210 --> 00:01:29.350
automatically inject that.

20
00:01:29.560 --> 00:01:36.180
Now, one thing that we can do here is we can actually omit that because we have a single constructor

21
00:01:36.190 --> 00:01:36.850
on the class.

22
00:01:37.090 --> 00:01:40.450
Spring will automatically do dependency injection for us.

23
00:01:40.480 --> 00:01:41.320
So that was a change.

24
00:01:41.320 --> 00:01:45.520
I think it was in spring for two that they provide that functionality.

25
00:01:46.390 --> 00:01:48.430
So it collapses in ports here.

26
00:01:48.460 --> 00:01:49.540
And let's go ahead.

27
00:01:49.540 --> 00:01:54.720
And now what we want to do is implement the controller method itself.

28
00:01:55.030 --> 00:01:57.160
So here we'll do public.

29
00:01:57.380 --> 00:02:02.230
It's going to return back a string for the view name and we'll say show Joe.

30
00:02:03.550 --> 00:02:05.280
This is going to take on the model.

31
00:02:10.400 --> 00:02:17.810
And here, what we can do is say on that model, it gets brought in, we will add an attribute and attribute

32
00:02:18.320 --> 00:02:23.330
and here what we want to do is add in joke as a joke property.

33
00:02:24.380 --> 00:02:26.330
And then we want to take our jobs service.

34
00:02:27.860 --> 00:02:29.090
Get joke for that method.

35
00:02:29.420 --> 00:02:34.970
Remember, the model's effectively a map implementation, so we are adding in a property with the string

36
00:02:34.970 --> 00:02:39.770
of joke and then the joke string so that then we'll be able to reference that from our view.

37
00:02:40.290 --> 00:02:42.290
Now, it's pretty simple controller implementation.

38
00:02:42.770 --> 00:02:44.990
And what we want to do is return back.

39
00:02:45.320 --> 00:02:47.260
We'll just call it index like so.

40
00:02:47.710 --> 00:02:50.270
And then finally, we need to set up the mapping.

41
00:02:50.450 --> 00:02:52.820
So here we want to annotate it.

42
00:02:53.840 --> 00:02:56.510
Do request mapping.

43
00:02:58.620 --> 00:03:01.580
And this year will give Ray.

44
00:03:05.930 --> 00:03:14.360
And empty string, so so that's going to give us the path, so if we have a trailing, there are nothing

45
00:03:14.540 --> 00:03:20.180
we could even do index and index on GOMO, but this is good enough for our purposes.

46
00:03:20.210 --> 00:03:25.730
So a request come to it going to the root of the context that is running the application context.

47
00:03:25.740 --> 00:03:26.800
I want to come in to the root.

48
00:03:26.840 --> 00:03:30.620
We are going to invoke this method for the request to be processed.

49
00:03:30.630 --> 00:03:32.630
So this is going to go on through spring.

50
00:03:32.630 --> 00:03:36.050
MVC will go through set that joke property.

51
00:03:36.270 --> 00:03:39.720
That model is going to get returned back to our timely few.

52
00:03:39.980 --> 00:03:41.180
So a quick recap.

53
00:03:41.570 --> 00:03:45.170
What I did in this video is we went and created the controllers package.

54
00:03:45.170 --> 00:03:47.870
I added in a Java class called Joke Controller.

55
00:03:48.320 --> 00:03:51.560
I annotated it with the spring stereotype of controller.

56
00:03:51.680 --> 00:03:58.040
And then I set up a final property for the joke service, created a constructor, which you initialize

57
00:03:58.040 --> 00:04:02.900
the joke servicio, remember best practices to code to an interface for dependency injection.

58
00:04:03.140 --> 00:04:08.450
And then in this we are declaring that variable is final so we can construct the class.

59
00:04:08.450 --> 00:04:13.460
And then with the constructor we are initializing the joke service and by having it final can never

60
00:04:13.460 --> 00:04:15.440
be changed by something else in the class.

61
00:04:16.250 --> 00:04:20.780
And finally, on line 22 there we are doing the show joke.

62
00:04:20.810 --> 00:04:25.730
This is a method that's going to get invoked when we come into the context that we have to request mapping.

63
00:04:26.180 --> 00:04:29.970
You can see the two properties that we set there on an empty string.

64
00:04:29.990 --> 00:04:31.850
So this is going to go in for the root.

65
00:04:32.000 --> 00:04:33.770
And then very simple.

66
00:04:33.770 --> 00:04:38.630
All we are doing is we're adding in an attribute to the model with the property a joke, and then we'll

67
00:04:38.630 --> 00:04:45.220
add the joke string from the joke service and then we return back the string index and that's going

68
00:04:45.220 --> 00:04:47.540
to spring MVC that we want to do the index.

69
00:04:47.540 --> 00:04:50.930
Few will implement the index view in the next video.
