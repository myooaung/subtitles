WEBVTT
0
1
00:00:05.099 --> 00:00:05.932
All right in this video
1

2
00:00:05.932 --> 00:00:10.057
we are gonna go in and refactor the ImageService
2

3
00:00:10.057 --> 00:00:11.146
to utilize reactive types
3

4
00:00:11.146 --> 00:00:13.907
and be reactive all the way up to this Controller.
4

5
00:00:13.907 --> 00:00:15.646
Now one thing that we're gonna have to deal with
5

6
00:00:15.646 --> 00:00:17.887
at a future point, when we switch over
6

7
00:00:17.887 --> 00:00:20.898
to using a more reactive type controller.
7

8
00:00:20.898 --> 00:00:21.776
I wanna show you this.
8

9
00:00:21.776 --> 00:00:25.177
I'm gonna come in here to the MultipartFile.
9

10
00:00:25.177 --> 00:00:27.597
In this Multipartfile, you can see that
10

11
00:00:27.597 --> 00:00:31.764
this is actually in part of the HttpServletRequest,
11

12
00:00:33.080 --> 00:00:35.353
so this guy is probably gonna change
12

13
00:00:35.353 --> 00:00:37.554
when we get into dealing with the view later
13

14
00:00:37.554 --> 00:00:41.567
and getting into a non-blocking web container
14

15
00:00:41.567 --> 00:00:43.716
because we are still using the ServletRequest
15

16
00:00:43.716 --> 00:00:46.346
and this is a component that's tied to the ServletRequest,
16

17
00:00:46.346 --> 00:00:48.334
so this is probably gonna change coming up
17

18
00:00:48.334 --> 00:00:50.028
but I wanted to alert you to that,
18

19
00:00:50.028 --> 00:00:52.771
because we will be seeing that in the whole next section
19

20
00:00:52.771 --> 00:00:54.754
of this course, but for right now,
20

21
00:00:54.754 --> 00:00:58.047
we are going to try to get non-blocking up to here,
21

22
00:00:58.047 --> 00:01:02.246
So what we need to do is come in to the ImageService,
22

23
00:01:02.246 --> 00:01:03.534
and we already did the RecipeService,
23

24
00:01:03.534 --> 00:01:05.880
so we're gonna go into the ImageService,
24

25
00:01:05.880 --> 00:01:09.502
and let's go ahead and take a look at making this reactive.
25

26
00:01:09.502 --> 00:01:11.537
So what we wanna do is
26

27
00:01:11.537 --> 00:01:13.188
obviously get rid of that transactional
27

28
00:01:13.188 --> 00:01:15.644
because MongoDB is not transactional,
28

29
00:01:15.644 --> 00:01:18.518
so we no longer, definitely no longer need that,
29

30
00:01:18.518 --> 00:01:20.683
and here we wanna change this
30

31
00:01:20.683 --> 00:01:23.433
to using the ReactiveRespository.
31

32
00:01:25.021 --> 00:01:29.021
So I'm gonna refactor that, and we'll grab this.
32

33
00:01:30.612 --> 00:01:34.384
Got to do a poor man's refactoring here.
33

34
00:01:34.384 --> 00:01:36.110
Tried IntelliJ's, it's refactoring for this
34

35
00:01:36.110 --> 00:01:38.162
isn't all that great.
35

36
00:01:38.162 --> 00:01:40.544
So now we've converted the types over,
36

37
00:01:40.544 --> 00:01:42.408
so this will be happy,
37

38
00:01:42.408 --> 00:01:43.790
and clean this up a little bit,
38

39
00:01:43.790 --> 00:01:46.169
we can get rid of that space.
39

40
00:01:46.169 --> 00:01:47.869
So now we're gonna save an ImageFile,
40

41
00:01:47.869 --> 00:01:52.036
and we actually wanna return back a Mono void on this.
41

42
00:01:54.584 --> 00:01:57.352
So that is a reactive type that we wanna return,
42

43
00:01:57.352 --> 00:01:59.647
back, so you can see that it's coming back
43

44
00:01:59.647 --> 00:02:03.156
in that publisher Mono, which is exactly what we want.
44

45
00:02:03.156 --> 00:02:06.445
So now, we have the wrong type here,
45

46
00:02:06.445 --> 00:02:09.483
so we wanna change that, and that is going to,
46

47
00:02:09.483 --> 00:02:12.536
you can see that IntelliJ refactored,
47

48
00:02:12.536 --> 00:02:14.989
the interface to return back that void.
48

49
00:02:14.989 --> 00:02:17.072
So, now we got that done,
49

50
00:02:18.545 --> 00:02:21.300
and let's take a quick look at this,
50

51
00:02:21.300 --> 00:02:23.930
and I'm gonna pause this because I think we can refactor it.
51

52
00:02:23.930 --> 00:02:25.234
So let me pause this,
52

53
00:02:25.234 --> 00:02:27.018
and I'm gonna refactor this whole section of code here
53

54
00:02:27.018 --> 00:02:28.997
and make it all reactive.
54

55
00:02:28.997 --> 00:02:31.797
Okay, I refactored things to be a little more reactive,
55

56
00:02:31.797 --> 00:02:34.664
and to utilize the streaming there, and you can see
56

57
00:02:34.664 --> 00:02:37.424
on line 30, I took the reactiveRepository,
57

58
00:02:37.424 --> 00:02:40.396
I'm doing a findById, and then I map,
58

59
00:02:40.396 --> 00:02:42.214
I'm using the map function there,
59

60
00:02:42.214 --> 00:02:43.905
and effectively what we're doing is,
60

61
00:02:43.905 --> 00:02:45.613
we're gonna pull that out
61

62
00:02:45.613 --> 00:02:48.242
and ask it to save a new byte array
62

63
00:02:48.242 --> 00:02:50.578
and we're basically taking that recipe object out
63

64
00:02:50.578 --> 00:02:53.579
of the database and we're enhancing it
64

65
00:02:53.579 --> 00:02:56.353
with the ImageFile that has been pushed in.
65

66
00:02:56.353 --> 00:02:58.521
So here we're doing the same byte array stuff.
66

67
00:02:58.521 --> 00:03:01.031
You can see in the commented code that I have below,
67

68
00:03:01.031 --> 00:03:03.039
that we take the byte array and we update it,
68

69
00:03:03.039 --> 00:03:04.921
and then we wanna save it back,
69

70
00:03:04.921 --> 00:03:08.539
and at this point, you can see there on line 50,
70

71
00:03:08.539 --> 00:03:10.713
now we're doing all the same stuff above it,
71

72
00:03:10.713 --> 00:03:14.457
but about on line 50 is where I take the recipeMono
72

73
00:03:14.457 --> 00:03:18.297
and this is just trying a few things out here with it.
73

74
00:03:18.297 --> 00:03:21.183
So we're doing a findById, that's gonna return back
74

75
00:03:21.183 --> 00:03:22.490
a recipeMono.
75

76
00:03:22.490 --> 00:03:25.775
We bring it down here, but then we do a publish.
76

77
00:03:25.775 --> 00:03:29.148
So that publishes out that recipeMono, goes into here,
77

78
00:03:29.148 --> 00:03:32.595
and now we're gonna take that, and we're gonna block on it,
78

79
00:03:32.595 --> 00:03:35.925
and send it to the save, and our option here
79

80
00:03:35.925 --> 00:03:39.897
is that we changed the return type to use a Mono void,
80

81
00:03:39.897 --> 00:03:41.681
and then we do the same thing here,
81

82
00:03:41.681 --> 00:03:44.229
that returns back a Mono void for us.
82

83
00:03:44.229 --> 00:03:46.947
So that's that method there,
83

84
00:03:46.947 --> 00:03:50.056
I am gonna get rid of this code here
84

85
00:03:50.056 --> 00:03:53.709
so we don't have that, get rid of that,
85

86
00:03:53.709 --> 00:03:55.472
then one more delete,
86

87
00:03:55.472 --> 00:03:59.695
then I'm doing Opt + Cmd + L, that does a reformat,
87

88
00:03:59.695 --> 00:04:02.671
cleans things up a little bit, and let's go ahead
88

89
00:04:02.671 --> 00:04:06.765
and run our test, and then we're gonna explode
89

90
00:04:06.765 --> 00:04:08.699
on a couple things.
90

91
00:04:08.699 --> 00:04:09.612
So actually we can take a look
91

92
00:04:09.612 --> 00:04:12.362
at the ImageController right now.
92

93
00:04:13.912 --> 00:04:17.329
Yeah, the recipeService, findCommandById,
93

94
00:04:18.975 --> 00:04:22.725
and that of course, we wanna do a block,
94

95
00:04:23.886 --> 00:04:26.528
and now we have a reactive type there.
95

96
00:04:26.528 --> 00:04:28.826
Let's see here, recipeService again here,
96

97
00:04:28.826 --> 00:04:31.478
we're already doing the block there, so we are good,
97

98
00:04:31.478 --> 00:04:34.771
saveImagefile, so this doesn't check
98

99
00:04:34.771 --> 00:04:38.132
so now we're returning back that, but again,
99

100
00:04:38.132 --> 00:04:41.832
we probably wanna do a block on that.
100

101
00:04:41.832 --> 00:04:44.498
So just in case that, so you remember, until you do a,
101

102
00:04:44.498 --> 00:04:47.556
some type of blocking operation or something to trigger
102

103
00:04:47.556 --> 00:04:50.099
that somethings looking for the result,
103

104
00:04:50.099 --> 00:04:51.723
that publisher isn't going to react
104

105
00:04:51.723 --> 00:04:54.398
until there's a subscriber asking for it.
105

106
00:04:54.398 --> 00:04:55.972
So that's a really core point
106

107
00:04:55.972 --> 00:04:58.201
inside of reactive programming.
107

108
00:04:58.201 --> 00:04:59.300
So I've done the changes there.
108

109
00:04:59.300 --> 00:05:01.967
Let's go ahead and run our test,
109

110
00:05:03.363 --> 00:05:04.538
and of course, I'm expecting
110

111
00:05:04.538 --> 00:05:05.950
a few incompatible types though,
111

112
00:05:05.950 --> 00:05:10.033
we are coming in here, so we need to change this.
112

113
00:05:14.396 --> 00:05:16.979
Change a name there, also here,
113

114
00:05:20.347 --> 00:05:24.313
and now we're no longer doing that Optional.
114

115
00:05:24.313 --> 00:05:28.480
We're gonna do a Mono.just(recipe), just like the others.
115

116
00:05:31.270 --> 00:05:33.603
Change that, ArgumentCaptor,
116

117
00:05:37.605 --> 00:05:39.022
that should work.
117

118
00:05:41.484 --> 00:05:45.067
Let's try that one more time, run our test,
118

119
00:05:49.259 --> 00:05:51.751
and we did have one fail there, and actually two,
119

120
00:05:51.751 --> 00:05:53.751
so, get image from post.
120

121
00:05:56.918 --> 00:06:00.418
So we have a NullPointerException there,
121

122
00:06:03.877 --> 00:06:06.486
and what's happening here is that we're doing the saveImage
122

123
00:06:06.486 --> 00:06:10.321
but our controller test now is not doing that,
123

124
00:06:10.321 --> 00:06:14.609
so what I need to do is, above this,
124

125
00:06:14.609 --> 00:06:17.526
we'll do a when, double-check that,
125

126
00:06:21.087 --> 00:06:24.004
we're doing a save, saveImagefile,
126

127
00:06:27.354 --> 00:06:29.604
and that's on your service.
127

128
00:06:38.403 --> 00:06:40.059
Remember, it's returning a Mono.empty there,
128

129
00:06:40.059 --> 00:06:42.419
so we'll go ahead and do that,
129

130
00:06:42.419 --> 00:06:46.586
and that should fix that one, and there's one more.
130

131
00:06:51.063 --> 00:06:54.563
So we're asking it argumentCaptor.capture.
131

132
00:06:56.247 --> 00:06:58.044
Okay, took a little closer look there
132

133
00:06:58.044 --> 00:06:59.907
and dug into it a little further,
133

134
00:06:59.907 --> 00:07:02.901
and one problem we had is we're doing the save function
134

135
00:07:02.901 --> 00:07:05.704
and we are not returning the publisher
135

136
00:07:05.704 --> 00:07:07.431
after the save method.
136

137
00:07:07.431 --> 00:07:11.598
So remember, the reactiveRespository's will return back
137

138
00:07:12.703 --> 00:07:15.696
a publisher so that would return back a Mono Publisher 
138

139
00:07:15.696 --> 00:07:18.495
on the save method, and the other thing was,
139

140
00:07:18.495 --> 00:07:20.366
I refactored this just a little bit.
140

141
00:07:20.366 --> 00:07:23.276
I had this extending out of publisher and then doing this,
141

142
00:07:23.276 --> 00:07:26.521
but now, what I'm doing is I'm getting this recipeMono,
142

143
00:07:26.521 --> 00:07:29.618
I'm saying block here, and then block again
143

144
00:07:29.618 --> 00:07:30.788
to trigger the save method.
144

145
00:07:30.788 --> 00:07:33.628
It's not the cleanest implementation I'd like
145

146
00:07:33.628 --> 00:07:37.785
but I think, when we get into testing this further,
146

147
00:07:37.785 --> 00:07:40.622
we are going to completely refactor this
147

148
00:07:40.622 --> 00:07:44.276
in an upcoming video, so this type is gonna go away,
148

149
00:07:44.276 --> 00:07:45.714
so we'll get more into reactive,
149

150
00:07:45.714 --> 00:07:47.457
but just kind of dabbling with this,
150

151
00:07:47.457 --> 00:07:49.113
showing you some different examples,
151

152
00:07:49.113 --> 00:07:51.848
of how we can utilize this reactive programming.
152

153
00:07:51.848 --> 00:07:54.109
So now let's go ahead and run all our tests now,
153

154
00:07:54.109 --> 00:07:57.276
I think I should have 'em all passing.
154

155
00:07:58.633 --> 00:08:02.572
See all the tests are going okay, so that is looking good.
155

156
00:08:02.572 --> 00:08:05.433
So let's go ahead and start the application;
156

157
00:08:05.433 --> 00:08:07.933
make sure that is still happy,
157

158
00:08:10.591 --> 00:08:12.966
and that is up and running, so let's go ahead
158

159
00:08:12.966 --> 00:08:15.633
and take a look at it in Chrome.
159

160
00:08:18.478 --> 00:08:22.316
There's my recipe, so let's go ahead and view it.
160

161
00:08:22.316 --> 00:08:25.566
You can do a Change Image, Choose File,
161

162
00:08:27.353 --> 00:08:30.520
and let's see here, gonna Submit that,
162

163
00:08:33.774 --> 00:08:35.604
and we can see that's a meme I just used
163

164
00:08:35.604 --> 00:08:39.163
on the recent video, the slide deck for this,
164

165
00:08:39.163 --> 00:08:42.755
so the image persistence is still working correctly.
165

166
00:08:42.755 --> 00:08:46.153
That is getting up into MongoDB as a byte array,
166

167
00:08:46.153 --> 00:08:47.529
as we expected.
167

168
00:08:47.529 --> 00:08:49.897
So our little refactoring here is complete,
168

169
00:08:49.897 --> 00:08:51.257
and again, just wanna reiterate,
169

170
00:08:51.257 --> 00:08:52.857
going into the service here,
170

171
00:08:52.857 --> 00:08:55.547
this whole section we are probably gonna revamp that
171

172
00:08:55.547 --> 00:08:58.380
because again, this Multipartfile,
172

173
00:09:00.489 --> 00:09:04.631
that is a blocking file out of the Servlet library,
173

174
00:09:04.631 --> 00:09:07.203
so that has a dependency on there, so when we switch over
174

175
00:09:07.203 --> 00:09:10.433
to the web reactive stuff, this is going to change
175

176
00:09:10.433 --> 00:09:11.435
and we'll refactor that
176

177
00:09:11.435 --> 00:09:14.852
and make this look a little cleaner then.
