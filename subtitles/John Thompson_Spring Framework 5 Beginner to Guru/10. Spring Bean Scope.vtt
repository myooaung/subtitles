WEBVTT
0
1
00:00:04.790 --> 00:00:10.769
Alright, let's talk about Spring Bean
Scopes. So there's actually seven of them
1

2
00:00:10.769 --> 00:00:15.929
that we have to work with and so far
we've been looking at Singleton, and this
2

3
00:00:15.929 --> 00:00:20.369
is the default Bean Scope and in this
case only one instance of the bean is
3

4
00:00:20.369 --> 00:00:25.619
going to be created in Spring's IoC
container. Now Prototype is another
4

5
00:00:25.619 --> 00:00:29.910
scope and in this case, you're going to
get new instance of that bean created
5

6
00:00:29.910 --> 00:00:34.200
every time it's requested. So anytime
there's a dependent object requesting
6

7
00:00:34.200 --> 00:00:39.660
that, a new instance of that bean will be
created. Now next is a Request scope,
7

8
00:00:39.660 --> 00:00:44.940
pretty obvious that's going to be within
an HTTP request and of course we need to
8

9
00:00:44.940 --> 00:00:50.010
have a web-aware Spring ApplicationContext up and running and then Session
9

10
00:00:50.010 --> 00:00:56.789
is also tied to the HTTP session. So for
a particular session you'll have a bean
10

11
00:00:56.789 --> 00:01:00.870
available within that scope and again
you're going to need the web-aware
11

12
00:01:00.870 --> 00:01:08.010
Spring ApplicationContext. Next we have
a Global-session and this is typically
12

13
00:01:08.010 --> 00:01:13.590
used with a Portlet context and I don't
see too many people using this. This is kind
13

14
00:01:13.590 --> 00:01:19.920
of a hold over from Java many many moons
ago. So you might run into some legacy
14

15
00:01:19.920 --> 00:01:23.700
code that's still using Portlets.
I just don't see people using Portlets
15

16
00:01:23.700 --> 00:01:28.020
much anymore. And then the Application, this is
a fairly recent addition to the Spring
16

17
00:01:28.020 --> 00:01:32.579
Framework. This is going to be scoped to
a lifecycle of a ServletContext. So I
17

18
00:01:32.579 --> 00:01:38.729
think as we got to the more modern
servlets having this capability to be
18

19
00:01:38.729 --> 00:01:44.100
used within the ApplicationContext and
again this needs a web aware context. And
19

20
00:01:44.100 --> 00:01:49.200
then WebSockets, this is going to be
within the lifecycle of a WebSocket and
20

21
00:01:49.200 --> 00:01:52.229
that's something I hope to explore later
in the course. Doing some work with
21

22
00:01:52.229 --> 00:01:57.659
WebSockets. That's a some pre neat stuff
right there. Now you also have the option
22

23
00:01:57.659 --> 00:02:03.270
or the capability of using a Custom
Scope and the Spring Scopes are
23

24
00:02:03.270 --> 00:02:07.020
extensible or you can roll your own
by implementing Spring's 'Scope" interface.
24

25
00:02:07.020 --> 00:02:11.310
I'm not going to get into that. If you
have that need, you can see the Spring's
25

26
00:02:11.310 --> 00:02:16.879
Java docs for details. It's kind of a unique
need to be honest and in over a
26

27
00:02:16.879 --> 00:02:20.989
decade that have been working with
Spring, I've never had the need to work
27

28
00:02:20.989 --> 00:02:26.299
with a Custom Scope but you may have use
case for that so I'm going to just leave
28

29
00:02:26.299 --> 00:02:29.930
that there right now. So if you do need
that it's well documented within the
29

30
00:02:29.930 --> 00:02:34.760
Spring  Java documentation. Now you cannot
override the built-in Singleton and
30

31
00:02:34.760 --> 00:02:39.440
Prototype Scopes of the framework, Spring
is going to prevent you from that. Now
31

32
00:02:39.440 --> 00:02:44.150
the two most common scopes that you are
going to be using is the Singleton scope
32

33
00:02:44.150 --> 00:02:49.250
and this is right out of the Spring
documentation. There's such a documentation
33

34
00:02:49.250 --> 00:02:53.030
for Spring Framework. I'm shamelessly
stealing this image from them but it
34

35
00:02:53.030 --> 00:02:58.010
does a good job explaining what's
happening there. So if you have multiple
35

36
00:02:58.010 --> 00:03:03.590
beans, so they're showing three beans on
the left-hand side there and it has a
36

37
00:03:03.590 --> 00:03:10.069
dependency on the accountDao bean, only
one instance is going to get created and
37

38
00:03:10.069 --> 00:03:13.310
this is something that you definitely
need to be aware of. I've seen people
38

39
00:03:13.310 --> 00:03:18.500
have problems with this. Just recently in
the last six months or so I was working
39

40
00:03:18.500 --> 00:03:23.389
with a company using Spring integration
and they had multiple Spring integration
40

41
00:03:23.389 --> 00:03:29.840
flows but they only had beans defined as
Session Scope and they had a common
41

42
00:03:29.840 --> 00:03:35.239
bean shared amongst most multiple flows
and this one bean in Session Scope was
42

43
00:03:35.239 --> 00:03:39.949
tied to all this and effectively what
happened was in the different flows I
43

44
00:03:39.949 --> 00:03:43.970
got kind of unpredictable results
because messages of bean routed through
44

45
00:03:43.970 --> 00:03:48.949
these flows and it's going through a
common object and that common object may
45

46
00:03:48.949 --> 00:03:52.430
or may not respond to the right flow. So
it caused some interesting stuff. So you
46

47
00:03:52.430 --> 00:03:57.109
definitely need to be aware of this
when you are sharing multiple components
47

48
00:03:57.109 --> 00:04:00.859
and how they get wired up. You can get
yourself in trouble but
48

49
00:04:00.859 --> 00:04:03.620
generally speaking, the Singleton Scope
works pretty well.
49

50
00:04:03.620 --> 00:04:10.370
Now the next one, the next most common
one is Prototype Scope and that Spring
50

51
00:04:10.370 --> 00:04:14.150
integration example. This is what they
needed to do, is to create a brand new
51

52
00:04:14.150 --> 00:04:18.829
bean instance each time rather than
sharing it and so that it gets spread
52

53
00:04:18.829 --> 00:04:24.110
out and shared which was not good but in
this case you're going to be creating a
53

54
00:04:24.110 --> 00:04:27.710
new bean instance for each object. So
again on the left-hand side
54

55
00:04:27.710 --> 00:04:30.860
there we have three different bean
definitions and they all want the
55

56
00:04:30.860 --> 00:04:36.349
accountDao and when we do the scope
Prototype then you can see the example in
56

57
00:04:36.349 --> 00:04:41.150
the XML dot definition there, so saying
scope Prototype, Spring is going to
57

58
00:04:41.150 --> 00:04:46.970
create a brand new instance each time. Now declaring the Bean Scope, you don't
58

59
00:04:46.970 --> 00:04:51.800
need to declare for Singleton scope that
is the default and in Java configuration
59

60
00:04:51.800 --> 00:04:56.090
you can use the @Scope annotation and
give it the scope name. That will work
60

61
00:04:56.090 --> 00:05:01.990
against either the Stereotype annotations. So Controller, Service
61

62
00:05:01.990 --> 00:05:07.820
Repository, Component, you can use the
Scope annotation with those or if you're
62

63
00:05:07.820 --> 00:05:13.280
using a Spring Java configuration class
then use the @Bean annotation. You can
63

64
00:05:13.280 --> 00:05:17.810
use the Scope annotation in conjunction
with that. You can see also the XML
64

65
00:05:17.810 --> 00:05:21.500
configuration. We just saw an example of
that on the previous slide where we did
65

66
00:05:21.500 --> 00:05:27.099
have that so you can set the Bean scope
in inside of XML as well.
