WEBVTT
0
1
00:00:02.730 --> 00:00:08.709
Okay we'd like to do a quick code review
on my Spring Boot MongoDB example
1

2
00:00:08.709 --> 00:00:14.200
application so this is up on GitHub and
you can find it under my repository
2

3
00:00:14.200 --> 00:00:21.430
springframeworkguru /spring-boot-mongodb pretty creative name there.
3

4
00:00:21.430 --> 00:00:26.289
This is an example Spring Boot
application connect to MongoDB, not
4

5
00:00:26.289 --> 00:00:31.029
necessarily running in Docker but it can connect to any MongoDB
5

6
00:00:31.029 --> 00:00:37.150
database so let's take a quick look at
the code in it, do a quick code review so I
6

7
00:00:37.150 --> 00:00:42.479
already have it loaded up and IntelliJ
so let's start up from the domain up and
7

8
00:00:42.479 --> 00:00:47.790
what I have is a Product and this is a
standard mapping class for Spring
8

9
00:00:47.790 --> 00:00:53.799
mapping out to a Mongo document. So no
big mystery there we just have a
9

10
00:00:53.799 --> 00:01:00.489
Product class with an id, description, price and imageUrl. I said nothing
10

11
00:01:00.489 --> 00:01:06.060
terribly exciting there, now I do have a
couple converters so I am using a form,
11

12
00:01:06.060 --> 00:01:11.290
command form some people call it, or
command object to back it so this
12

13
00:01:11.290 --> 00:01:16.870
converts it back and forth so here's my
ProductForm, it's a command so really
13

14
00:01:16.870 --> 00:01:21.070
the biggest difference there is that we
are treating the ID as a String because
14

15
00:01:21.070 --> 00:01:25.930
the Mongo database type does not really
transfer over to the web here very well.
15

16
00:01:25.930 --> 00:01:31.800
So we do need to convert that back and
forth so next thing to look at is our
16

17
00:01:31.800 --> 00:01:38.140
standard Spring MVC controller, so this
is a controller that's going to be facing
17

18
00:01:38.140 --> 00:01:44.020
out to the web and handling web requests
for us. It did jump up a little bit and
18

19
00:01:44.020 --> 00:01:48.900
if you're following along this pattern
that's going to look very very familiar.
19

20
00:01:48.900 --> 00:01:55.020
So I have a service layer that interacts
with my controller layer so there's my
20

21
00:01:55.020 --> 00:02:01.120
interface for the service and then
there's my implementation of it and I am
21

22
00:02:01.120 --> 00:02:08.140
using Spring Data repositories for this
and almost also wiring in my convertor
22

23
00:02:08.140 --> 00:02:13.569
so I wire in the two dependencies. One is
the ProductRepository which is
23

24
00:02:13.569 --> 00:02:20.019
provided by Spring Data and this is the
Mongo implementation that I am using
24

25
00:02:20.019 --> 00:02:26.819
and everything's wired up and then
finally we have a couple Thymeleaf
25

26
00:02:26.819 --> 00:02:31.060
templates here that we use to show the
data so I'm not going to get into all
26

27
00:02:31.060 --> 00:02:36.250
the details here but you can see what's
going on here so nothing too terribly
27

28
00:02:36.250 --> 00:02:41.349
creative here. Kind of a quick and dirty
to get this working it is not production
28

29
00:02:41.349 --> 00:02:47.919
grade by any means and then let's take a
quick look at the dependencies so you
29

30
00:02:47.919 --> 00:02:55.719
can see they're in line 17, I am in fact
running Spring Boot 1.5.1 and that
30

31
00:02:55.719 --> 00:03:01.540
is the most current release of Spring
Boot at the time of writing or at the
31

32
00:03:01.540 --> 00:03:05.739
time of recording I should say and
bringing in a couple of dependencies
32

33
00:03:05.739 --> 00:03:10.480
and these are important so I'm bringing
the Spring Boot Starter Data for MongoDB
33

34
00:03:10.480 --> 00:03:16.840
as well as Thymeleaf, web and then of course
the test and this POM is fairly
34

35
00:03:16.840 --> 00:03:23.200
untouched since I pulled it off of Josh
Long's favorite web site, spring.start.io
35

36
00:03:23.200 --> 00:03:27.790
Oh I'm sorry, start.spring.io
Messed up that URL. So you can go down
36

37
00:03:27.790 --> 00:03:32.439
and grab this at any time. So let's go
ahead and take this for a spin, then what I'm
37

38
00:03:32.439 --> 00:03:40.900
going to do so I have a command line
ready over here and I have docker where
38

39
00:03:40.900 --> 00:03:46.120
you got there so that's a standard run
command for Docker. So docker run map out
39

40
00:03:46.120 --> 00:03:53.319
the ports for the latest image of Mongo
and the -d parameter tells it to run it
40

41
00:03:53.319 --> 00:04:01.169
in the background so that's now running,
I can do docker ps see that is running
41

42
00:04:01.169 --> 00:04:13.299
and let's do docker logs -f. I'm going
to give it the image name here and paste
42

43
00:04:13.299 --> 00:04:19.829
that in. Now we can see that that is running. Now
43

44
00:04:19.829 --> 00:04:24.900
let's bounce over to IntelliJ and I am
going to start up my Spring Boot
44

45
00:04:24.900 --> 00:04:31.620
application, you can see that Spring Boot
is initializing and pretty light project
45

46
00:04:31.620 --> 00:04:36.210
so it's going to come up pretty quick
and it is running on Tomcat now if I look
46

47
00:04:36.210 --> 00:04:40.950
at the window you can see that I have a
new connection established to Docker
47

48
00:04:40.950 --> 00:04:44.490
I don't have the log level turned up on
this so it won't see any database
48

49
00:04:44.490 --> 00:04:51.900
activity and let's come over here and
localhost 8080 and that's going to do a
49

50
00:04:51.900 --> 00:04:57.169
redirect to the product list and I did
not initialize any data in the database
50

51
00:04:57.169 --> 00:05:08.460
so but I can't come in, create a new
product. New product, $22 and URL
51

52
00:05:08.460 --> 00:05:13.139
it's not doing any data type
checkings there so it will show me
52

53
00:05:13.139 --> 00:05:18.900
that this is created, this is the Mongo
ID that was created so now if I come
53

54
00:05:18.900 --> 00:05:27.979
back over here I can see that it is
listed and should I want to edit it and
54

55
00:05:27.979 --> 00:05:36.570
let's say to do new product 222 and I am going to submit it and we
55

56
00:05:36.570 --> 00:05:44.370
can see that has been updated and
if I come back to the index, again it
56

57
00:05:44.370 --> 00:05:48.840
redirects to product/list but since I
don't have too much interesting here and
57

58
00:05:48.840 --> 00:05:53.940
it shows that that update has been
persisted in that is getting pulled out
58

59
00:05:53.940 --> 00:05:56.630
of the Mongo database.
