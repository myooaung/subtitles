WEBVTT
0
1
00:00:01.329 --> 00:00:07.569
Okay! In this video, we are going to take a
look at data types inside of MySQL. Kind
1

2
00:00:07.569 --> 00:00:11.590
of important discussion to have. We've
been seeing them in use already but I
2

3
00:00:11.590 --> 00:00:15.760
haven't purposely did not dive into them
too deep because I felt it'd be a little
3

4
00:00:15.760 --> 00:00:18.909
too confusing. But it's getting to the
point in the course where we do need to
4

5
00:00:18.909 --> 00:00:23.310
start talking about these different data
types available inside of MySQL. MySQL
5

6
00:00:23.310 --> 00:00:29.140
does do a very good job of supporting
the ANSI SQL standard data types.
6

7
00:00:29.140 --> 00:00:34.269
Just to recap, a data type is going to
define what a column is inside the
7

8
00:00:34.269 --> 00:00:38.410
database, whether it is text, a number, a
date. There's a number of
8

9
00:00:38.410 --> 00:00:41.260
different types in there. They all
have different properties and to those
9

10
00:00:41.260 --> 00:00:45.039
types and there's times that you want to
use one over another. So in this video
10

11
00:00:45.039 --> 00:00:49.989
we're going to go and explain exactly what
those data types are. We can break
11

12
00:00:49.989 --> 00:00:54.129
them down to about five categories there.
We have Numeric Data Type, it's dealing
12

13
00:00:54.129 --> 00:00:58.870
with numbers. Date and Time Data Types
that's going to be temporal data. String,
13

14
00:00:58.870 --> 00:01:03.579
that's going to be simple text. Spatial
Data Types, this deals with the
14

15
00:01:03.579 --> 00:01:08.140
places and things like that. So I'll
slide specifically on Spatial Data Types.
15

16
00:01:08.140 --> 00:01:11.710
And then finally, we have in JSON Data
Types. We're going to go through
16

17
00:01:11.710 --> 00:01:16.420
and look at each one of these closer in
this video. So first up, we have the
17

18
00:01:16.420 --> 00:01:22.000
Numeric data types. You can see here on
the left column. I have the actual data
18

19
00:01:22.000 --> 00:01:26.140
type. This is what you're going to be
using in SQL, whether it's an Integer or
19

20
00:01:26.140 --> 00:01:30.160
INT. That's kind of like an alias. Now
this is going to take up four bytes
20

21
00:01:30.160 --> 00:01:33.910
inside the database, so I'm going to explain
that in just a minute if you don't 
21

22
00:01:33.910 --> 00:01:37.930
understand with a byte is. Integer is going
to be a simple integer, a number without
22

23
00:01:37.930 --> 00:01:42.400
decimals. You can see over here, I
have a min and max value. This is an
23

24
00:01:42.400 --> 00:01:49.150
ANSI datatype. Finally, we have TINYINT,
SMALLINT, MEDIUMINT. You can see these are
24

25
00:01:49.150 --> 00:01:54.130
different specifications of a number
without any decimals but it affects the
25

26
00:01:54.130 --> 00:01:59.320
maximum size. When dealing with
integers and the data base restrictions,
26

27
00:01:59.320 --> 00:02:03.820
one thing you need to keep in mind is if
you try to put in integer that's too big,
27

28
00:02:03.820 --> 00:02:09.250
the database often will just truncate
it and not tell you. So not exactly
28

29
00:02:09.250 --> 00:02:13.660
desired behavior. It gotcha. That can
happen. Then we
29

30
00:02:13.660 --> 00:02:18.280
have a BIGINT. This is for a very
big number. You can see there the min and max
30

31
00:02:18.280 --> 00:02:23.680
is that with the scientific notation,
there. That means big number. And then we
31

32
00:02:23.680 --> 00:02:29.080
have FLOATS and DOUBLES. These are
floating points. What's important
32

33
00:02:29.080 --> 00:02:33.520
here, it's kind of how computers work, if
you're doing highly complex math and
33

34
00:02:33.520 --> 00:02:37.720
doing a lot of highly complex calculations.
Floating points, when you start getting
34

35
00:02:37.720 --> 00:02:42.550
into a lot of decimal places, it's not
going to be exact ,so you can get some
35

36
00:02:42.550 --> 00:02:46.840
variations there. A very small variations
but that is important to understand. It's
36

37
00:02:46.840 --> 00:02:52.120
kind of funny how computers work that
way. But then, we also have decimal and
37

38
00:02:52.120 --> 00:02:57.610
numeric. These are actually stored as a
String inside the database. This 
38

39
00:02:57.610 --> 00:03:02.560
gives you a fixed decimal point
and also this is where you're going to
39

40
00:03:02.560 --> 00:03:06.070
be doing like calculations with money.
That's where you want to be using a
40

41
00:03:06.070 --> 00:03:10.780
decimal datatype. Oherwise, you could run
into unpredictable errors. This isn't
41

42
00:03:10.780 --> 00:03:15.730
just a MySQL feature programming
languages such as Java also run into
42

43
00:03:15.730 --> 00:03:19.810
this. Inexperienced people, when they
start doing calculations with these
43

44
00:03:19.810 --> 00:03:24.670
values, you can start getting very small
errors and not be able to trace back why
44

45
00:03:24.670 --> 00:03:29.530
and it's because of this. So important to
know. There's a rule thumb, if you have
45

46
00:03:29.530 --> 00:03:35.350
a number and you want pick out the
integer tiny small or medium or big int
46

47
00:03:35.350 --> 00:03:39.670
depending on how much room you need for
that number, you don't want to grab a
47

48
00:03:39.670 --> 00:03:42.780
type that's too big for a number. That's
never going to get that big because
48

49
00:03:42.780 --> 00:03:46.959
effectively you're just going to be
wasting space in your database. So
49

50
00:03:46.959 --> 00:03:50.020
try to do as small as possible but also
be aware of the consequences of not
50

51
00:03:50.020 --> 00:03:54.959
doing it. Like I said, if you're
dealing with financial calculations,
51

52
00:03:54.959 --> 00:03:59.370
definitely be using a DECIMAL or NUMERIC data type.
52

53
00:03:59.370 --> 00:04:04.349
Next up, we have Date and Time Data Types
or temporal data types. These are
53

54
00:04:04.349 --> 00:04:08.190
pretty straightforward. So we have a DATE
that is just a date value. No time
54

55
00:04:08.190 --> 00:04:13.890
component. This is an ANSI value. Then
we have DATETIME. As far as I know,
55

56
00:04:13.890 --> 00:04:18.900
this is now an ANSI data type. But you
can see, when we go from DATE to 
56

57
00:04:18.900 --> 00:04:24.990
DATETIME, we get a large jump in the number
of bytes that are consumed to store that
57

58
00:04:24.990 --> 00:04:32.130
value. Now TIMESTAMP, the trick here this
also stores date and time but it gets
58

59
00:04:32.130 --> 00:04:37.110
converted to UTC, so Universal time. So
basically, the timezone gets lopped off.
59

60
00:04:37.110 --> 00:04:43.080
What's going to happen underneath the
covers is your database session is going
60

61
00:04:43.080 --> 00:04:47.790
to have a time zone so it's going to get
stored in UTC and then pulled out of the
61

62
00:04:47.790 --> 00:04:51.930
database and convert it to your local
time zone. So it's something to be aware
62

63
00:04:51.930 --> 00:04:56.850
of because if you're working with
another system with a different time
63

64
00:04:56.850 --> 00:05:00.090
zone that's being registered with a
database you can get two different times
64

65
00:05:00.090 --> 00:05:03.960
out of the database but that's because
it's going to be converted to your
65

66
00:05:03.960 --> 00:05:10.860
sessions time zone. Next up, we have TIME.
This is a special value so this can be
66

67
00:05:10.860 --> 00:05:18.780
time of day or an elapsed period of time.
This is also an ANSI data type. AND then
67

68
00:05:18.780 --> 00:05:25.380
a year here is pretty self-explanatory.
MySQL can hail from 1901 to 2155.
68

69
00:05:25.380 --> 00:05:30.330
I'm not quite sure why they did that
but that's from the MySQL documentation.
69

70
00:05:30.330 --> 00:05:36.840
I have a footnote here that MySQL 5.6.4
 or greater can also store
70

71
00:05:36.840 --> 00:05:43.139
fractional seconds. This is going
to be on time, datetime, and timestamp.
71

72
00:05:43.139 --> 00:05:48.330
This is an optional configuration on.
And you have to be on that level of
72

73
00:05:48.330 --> 00:05:53.490
database our newer for this. Just be
aware that if you do start turning
73

74
00:05:53.490 --> 00:05:58.770
fractional seconds, it is going to
increase the storage requirements from 0
74

75
00:05:58.770 --> 00:06:02.850
to 3 bytes depending on the precision
that you specify in the column
75

76
00:06:02.850 --> 00:06:06.990
definition.
Now, we've been talking about bytes. I
76

77
00:06:06.990 --> 00:06:11.370
also need to talk about character sets.
So, a quick recap here, I don't know your
77

78
00:06:11.370 --> 00:06:16.380
level of familiarity with computers in
general and how things are driven. But
78

79
00:06:16.380 --> 00:06:20.130
computers really drive off of binary
information so everything inside the
79

80
00:06:20.130 --> 00:06:27.720
computer is going to be a 1 or a 0, so on
or off. A bit is a binary value of 1
80

81
00:06:27.720 --> 00:06:33.599
or 0, and then, a byte is going to be a
collection of 8 bits. So very important
81

82
00:06:33.599 --> 00:06:38.280
to recognize this. You saw how I was
talking about the storage requirements
82

83
00:06:38.280 --> 00:06:41.909
and bytes of these data values and
that's how much space is going to take
83

84
00:06:41.909 --> 00:06:47.430
up on your hard drive or in memory for
this to be stored. So important to
84

85
00:06:47.430 --> 00:06:51.509
understand, if you're dealing with a lot
of data, your storage optimization
85

86
00:06:51.509 --> 00:06:56.340
becomes very very important. I've seen a
lot change in the last 20 years with
86

87
00:06:56.340 --> 00:07:02.009
computers and we do have storage is very
cheap now compared to what it was at one
87

88
00:07:02.009 --> 00:07:05.970
point in time now. Now, we can get a lot
of space but it's still a concern on
88

89
00:07:05.970 --> 00:07:10.949
getting very large data sets in the
database. You do still want to be optimal
89

90
00:07:10.949 --> 00:07:14.729
when you're storing things and be aware
of what's going on underneath the covers.
90

91
00:07:14.729 --> 00:07:19.919
I started the slide talking about
character sets. This is how these
91

92
00:07:19.919 --> 00:07:24.150
bits become bytes and how those bytes
become something like a letter.
92

93
00:07:24.150 --> 00:07:32.550
So the original character set was ASCII
some people say ASCII two but I've
93

94
00:07:32.550 --> 00:07:36.960
always called it ASCII which stands for
American Standard Code for Information
94

95
00:07:36.960 --> 00:07:41.099
Exchange. This is like one of the first
character sets out there. It was limited
95

96
00:07:41.099 --> 00:07:46.169
to 128 characters mostly letters, numbers,
and common punctuation.
96

97
00:07:46.169 --> 00:07:50.430
The problem with ASCII is that it was
only 128 characters, so it just did not
97

98
00:07:50.430 --> 00:07:55.229
work for international languages. Things
where you have special characters like
98

99
00:07:55.229 --> 00:07:59.550
the Russian language, which has a lot of
crazy characters in it compared to what
99

100
00:07:59.550 --> 00:08:04.680
this is in English. So, we started coming
up with different character sets. There's
100

101
00:08:04.680 --> 00:08:08.219
a lot of different character sets out
there. This is a very complex and
101

102
00:08:08.219 --> 00:08:14.520
confusing topic but the most popular one
out there is probably UTF-8. This is
102

103
00:08:14.520 --> 00:08:17.710
used for email and also the web. It's a
number one character 
103

104
00:08:17.710 --> 00:08:22.780
set used on the web. Depending on the
character, it is one to four bytes long
104

105
00:08:22.780 --> 00:08:27.340
and it gives us a 1,112,064 characters,
so a
105

106
00:08:27.340 --> 00:08:32.560
very large characters. A very robust
character set. This handles all
106

107
00:08:32.560 --> 00:08:36.190
the international requirements. If you
remember, when people start texting if
107

108
00:08:36.190 --> 00:08:39.400
you had an iPhone and you're texting
with somebody with an Android, they
108

109
00:08:39.400 --> 00:08:43.420
sent you a little emoji character.
Sometimes they'd come up as a question
109

110
00:08:43.420 --> 00:08:46.960
mark or blank or something like that.
That's because the two phones are using
110

111
00:08:46.960 --> 00:08:52.090
different character sets and those little
emojis are not always translated between
111

112
00:08:52.090 --> 00:08:56.560
the two. So just an example where things
can go wrong on character sets. Now I
112

113
00:08:56.560 --> 00:08:59.920
bring that up. Got into character sets
because when you talk to them about when
113

114
00:08:59.920 --> 00:09:07.660
we're doing storing String data types. So
first up is character CHAR. This is
114

115
00:09:07.660 --> 00:09:11.050
going to be stored in the database so
you're going to declare a character. They
115

116
00:09:11.050 --> 00:09:15.400
had to type of like char (5) there in my
example. What's important to remember
116

117
00:09:15.400 --> 00:09:19.420
is if you do that and you store a
three-letter word like foo into that,
117

118
00:09:19.420 --> 00:09:25.480
what's going to happen is MySQL is
going to store foo space space in  the
118

119
00:09:25.480 --> 00:09:28.630
database, and then when it 
retrieves it out of the database, it's
119

120
00:09:28.630 --> 00:09:35.320
going to lop off the trailing spaces. Now
VARCHAR is similar but the key
120

121
00:09:35.320 --> 00:09:38.650
characteristics of varchar is that
it's going to be a variable length
121

122
00:09:38.650 --> 00:09:42.280
string that you can store in the
database. So you can store a word or
122

123
00:09:42.280 --> 00:09:46.390
group of words into the database and a
VARCHAR is not restricted to that.
123

124
00:09:46.390 --> 00:09:50.170
While you get a little storage
optimization there because you do have
124

125
00:09:50.170 --> 00:09:54.040
the length of the the varchar that
you're put in there. But then, you get
125

126
00:09:54.040 --> 00:09:58.930
a plus one. This is good for where you
have varying length stuff. VARCHAR
126

127
00:09:58.930 --> 00:10:05.710
is a very very common to use. Now we have
BINARY and VARBINARY. These are
127

128
00:10:05.710 --> 00:10:11.710
like CHAR and VARCHAR but one is
fixed length and one is variable length.
128

129
00:10:11.710 --> 00:10:17.320
The key to the binary values, as these
are going to be stored as a binary
129

130
00:10:17.320 --> 00:10:21.910
character set. So when we set up the
database, the database is going to have a
130

131
00:10:21.910 --> 00:10:26.020
default character set. We have not had to
do that so far in the course because
131

132
00:10:26.020 --> 00:10:30.200
there are default setup for that but
we can override those.
132

133
00:10:30.200 --> 00:10:33.380
Sometimes you need to sometimes you
don't. But what's important to remember
133

134
00:10:33.380 --> 00:10:37.100
here is the difference between the char
and the varchar. These are going to
134

135
00:10:37.100 --> 00:10:41.269
be stored with a character set
information where the binary stuff is
135

136
00:10:41.269 --> 00:10:44.360
going to be stored without character set.
It's going to be stored with a character
136

137
00:10:44.360 --> 00:10:50.510
set of binary. Next up is we have a BLOB.
This is a binary large object.
137

138
00:10:50.510 --> 00:10:54.560
So again, this is going to be stored as
binary. You can store text in there. You
138

139
00:10:54.560 --> 00:10:58.490
can I also use this to store images
inside the database. So if I have a web
139

140
00:10:58.490 --> 00:11:03.860
application, you can store in the binary
encoding of an image file into the
140

141
00:11:03.860 --> 00:11:09.560
database. TEXT is like a BLOB, but this is
a non binary String. This is going to
141

142
00:11:09.560 --> 00:11:14.570
be similar to a CHAR or VARCHAR and
probably closer to a VARCHAR because
142

143
00:11:14.570 --> 00:11:21.260
this is for a very large text operation.
Next up is we have an ENUM or an
143

144
00:11:21.260 --> 00:11:27.889
enumeration. This is going to be a
collection of String literals. I got
144

145
00:11:27.889 --> 00:11:33.380
an example here. You would literally have
red, blue, and green. Then in that
145

146
00:11:33.380 --> 00:11:37.540
column, that database column, would be
restricted to one of those values. Now
146

147
00:11:37.540 --> 00:11:42.620
a SET, the very last one that we have here
to talk about. This is very simpler
147

148
00:11:42.620 --> 00:11:48.649
to ENUM but it is String values but
that column can have one or more values on
148

149
00:11:48.649 --> 00:11:55.130
that. So an ENUM is one and only one from
those defined values, where I can have
149

150
00:11:55.130 --> 00:11:59.810
more than one. So I personally have never
used a SET. I've never had a need for it.
150

151
00:11:59.810 --> 00:12:04.370
But enumerations are very handy. So these
are very very handy things to have
151

152
00:12:04.370 --> 00:12:10.010
inside the database to set up a list of
values that you want. Next, we have
152

153
00:12:10.010 --> 00:12:14.199
Spatial Data Types. This first bullet
point is right out of the MySQL
153

154
00:12:14.199 --> 00:12:19.550
documentation. The Open Geospatial
Consortium is an international consortium
154

155
00:12:19.550 --> 00:12:25.279
of more than 250 companies, agencies, and
universities participating in the public
155

156
00:12:25.279 --> 00:12:28.610
development available conceptional
solutions that can be useful with all
156

157
00:12:28.610 --> 00:12:32.300
kinds of applications that manage
spatial data . So that's kind of a
157

158
00:12:32.300 --> 00:12:37.730
mouthful there. Basically, the spatial
data is going to be defining points on a
158

159
00:12:37.730 --> 00:12:43.950
map. It is a good way to think of it. So
if you remember basic navigation
159

160
00:12:43.950 --> 00:12:48.180
we have longitude and
latitude and different things so this is
160

161
00:12:48.180 --> 00:12:53.940
a very complex piece of information here.
What it can be used for is doing
161

162
00:12:53.940 --> 00:12:58.529
searches inside the database. If you have
like postal codes and you want to find a
162

163
00:12:58.529 --> 00:13:03.720
store near you, you can run queries
using geospatial features. This is pretty
163

164
00:13:03.720 --> 00:13:09.209
niche, not widely used with MySQL. So, at
this time, I'm not going to be covering
164

165
00:13:09.209 --> 00:13:13.230
this inside the course but I want you to
be aware of the spatial data types. But I
165

166
00:13:13.230 --> 00:13:17.269
honestly I know what's out there I just
don't know a lot of people using them.
166

167
00:13:17.269 --> 00:13:23.250
Next up, we have any JSON Data Type.
JSON stands for JavaScript object
167

168
00:13:23.250 --> 00:13:28.500
notation. This is a complex structured
document which contains properties and
168

169
00:13:28.500 --> 00:13:33.060
values. I do have an example to show
you on the next slide here. The
169

170
00:13:33.060 --> 00:13:37.410
storage of a JSON document is going to
be very similar to a blob or text data
170

171
00:13:37.410 --> 00:13:41.040
type as far as how much is it going to
be consumed inside the database. What's
171

172
00:13:41.040 --> 00:13:44.190
important to remember is that MySQL
is going to take the JSON that
172

173
00:13:44.190 --> 00:13:48.449
you're giving it and convert it to an
internal format that's internal to MySQL
173

174
00:13:48.449 --> 00:13:52.470
but this can be optimized for storage
and searching and in a operation so the
174

175
00:13:52.470 --> 00:13:57.240
database has to do on it. But because
it gets converted and then brought back
175

176
00:13:57.240 --> 00:14:01.829
out, some of the formatting if you have
spacing in the JSON document that
176

177
00:14:01.829 --> 00:14:06.060
could change. The ordering of properties
could change and that is something
177

178
00:14:06.060 --> 00:14:09.690
that you really shouldn't be depending
on having property so specific order
178

179
00:14:09.690 --> 00:14:13.500
won't when working with JSON anyways.
But something to be aware of when you're
179

180
00:14:13.500 --> 00:14:19.019
dealing with JSON. And then, MySQL
also supports searching of JSON document
180

181
00:14:19.019 --> 00:14:24.029
properties so you can go in and search
the database for a specific field. You
181

182
00:14:24.029 --> 00:14:28.920
know JSON document and then 
 MySQL also allows you to
182

183
00:14:28.920 --> 00:14:33.269
update a portion of JSON document so
you can go in and update a JSON
183

184
00:14:33.269 --> 00:14:37.680
property without having to replace the
entire JSON document. So a nice feature
184

185
00:14:37.680 --> 00:14:42.360
of this. At this point in time, I'm
not planning on covering the JSON
185

186
00:14:42.360 --> 00:14:46.529
Data Type inside of MySQL in the course.
If there's demand for it, I will. I know
186

187
00:14:46.529 --> 00:14:51.149
it's a capability of MySQL but I
personally have never used it. I work
187

188
00:14:51.149 --> 00:14:55.920
with JSON all the time, but usually in
my programming when I'm programming in
188

189
00:14:55.920 --> 00:15:01.140
Java, I'm going to breed in the Java Script
or the JSON object, read it into Java, I
189

190
00:15:01.140 --> 00:15:04.230
get the properties I want, and store
those into the database. So it's pretty
190

191
00:15:04.230 --> 00:15:08.519
rare that I would store an actual
JSON document into the database. But
191

192
00:15:08.519 --> 00:15:12.449
that's just the use cases that I've had.
If there's demand in the course file, I
192

193
00:15:12.449 --> 00:15:17.699
may add that in a future date.
Now here's the JSON example. This is
193

194
00:15:17.699 --> 00:15:22.290
just a literally googled JSON example.
This is one of the examples that I
194

195
00:15:22.290 --> 00:15:26.399
found. This is a well structured JSON
document. You can see there, we have a
195

196
00:15:26.399 --> 00:15:32.699
widget at the top line colon, and then we
have widget objects. We have debug on
196

197
00:15:32.699 --> 00:15:37.620
window. And then, another property would
be image. You can see the properties
197

198
00:15:37.620 --> 00:15:43.110
of the image object inside the JSON
object. So this is just a structure.
198

199
00:15:43.110 --> 00:15:47.160
This is a very... there's a syntax to it
and this is what MySQL will store in the
199

200
00:15:47.160 --> 00:15:52.170
database and you can go in and sort
search on. You could do give me all
200

201
00:15:52.170 --> 00:15:58.339
the documents inside the database that
have a widget.image.name of someone.
201

202
00:15:58.339 --> 00:16:02.310
So, you could do something like that
and request all documents where it has
202

203
00:16:02.310 --> 00:16:06.329
that image property of name set to
someone. So these are some of the
203

204
00:16:06.329 --> 00:16:11.100
capabilities that you can do inside of
MySQL. Again, I'm not going. I think
204

205
00:16:11.100 --> 00:16:15.300
this is still fairly niche with MySQL.
I'm not going to get into JSON
205

206
00:16:15.300 --> 00:16:19.350
too much but I wanted you to be aware of
it. If you do have a need for it,
206

207
00:16:19.350 --> 00:16:23.519
definitely let me know and I may expand
upon the JSON content for the MySQL
207

208
00:16:23.519 --> 00:16:26.149
course.
