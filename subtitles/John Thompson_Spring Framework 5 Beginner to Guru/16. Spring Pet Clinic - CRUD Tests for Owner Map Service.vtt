WEBVTT
0
1
00:00:04.040 --> 00:00:08.010
Alright! In this video, we are going to start
implementing some tests so the first one
1

2
00:00:08.010 --> 00:00:12.929
I wanna do is down here,
number 49, to write CRUD test for the
2

3
00:00:12.929 --> 00:00:17.190
Owner Map Service. So remember, we have
that map service. I'm gonna go ahead and
3

4
00:00:17.190 --> 00:00:24.240
assign this to myself and we will get
started on issue number 49. What
4

5
00:00:24.240 --> 00:00:30.630
we wanna do is write some CRUD, that's
Create Read Update Delete for our map
5

6
00:00:30.630 --> 00:00:33.960
service, the map implementations. I'm
gonnao jump over to IntelliJ now.
6

7
00:00:33.960 --> 00:00:40.340
If you remember, that was back in pet-clinic-data under services and in the
7

8
00:00:40.340 --> 00:00:46.829
map package and the class that we're
gonna test is this OwnerMapService.
8

9
00:00:46.829 --> 00:00:50.910
So we can see that this is a default
service. It's very simple HashMap
9

10
00:00:50.910 --> 00:00:55.559
implementation. What we wanna do is
go ahead and implement a test for this.
10

11
00:00:55.559 --> 00:01:01.859
So what we can do is come up here.
I'm gonna hit option enter. That's on the
11

12
00:01:01.859 --> 00:01:07.500
Mac. We are going to come in and
create a test. You can see here, we
12

13
00:01:07.500 --> 00:01:12.600
got JUnit 5, so that's what we want to
do. I'm going to select all the methods
13

14
00:01:12.600 --> 00:01:18.150
here. This is a handy way to quickly
generate the test this through IntelliJ.
14

15
00:01:18.150 --> 00:01:24.630
I'm also gonna do a 
setUp class, so we wanna set things up
15

16
00:01:24.630 --> 00:01:30.840
for this. I'm gonna say go ahead and okay
on that, and now I have this. One
16

17
00:01:30.840 --> 00:01:35.790
thing when I'm writing tests in IntelliJ,
I like to come up here and do a split
17

18
00:01:35.790 --> 00:01:42.450
horizontally. And now, what I can do is I
can close that guy out. Now I have the
18

19
00:01:42.450 --> 00:01:48.479
class under test up here so I can see it
as I refer to it. And then, down in the
19

20
00:01:48.479 --> 00:01:53.360
bottom panel I have the test that
I'm writing.
20

21
00:01:53.360 --> 00:01:59.510
What I wanna do is come up here. We
are gonna need a PetService. So I'm
21

22
00:01:59.510 --> 00:02:02.560
gonna come in here and say...
22

23
00:02:02.670 --> 00:02:07.290
Actually, I don't even need to do that. I
only need the OwnerMapService. So
23

24
00:02:07.290 --> 00:02:13.530
coming in here,
like so. I started to do that and
24

25
00:02:13.530 --> 00:02:19.470
that is out of habit. In this case, we
have HashMap implementations and
25

26
00:02:19.470 --> 00:02:24.480
normally, for actual implementation, I
would be using Mockito but I'm gonna
26

27
00:02:24.480 --> 00:02:28.620
show you that in a future video. This is
a very simple HashMap service so there's
27

28
00:02:28.620 --> 00:02:33.870
no reason I can't use the actual
implementations of those. In here, I'm
28

29
00:02:33.870 --> 00:02:41.940
defining this and let's come in and say
ownerMapService equals new and now I
29

30
00:02:41.940 --> 00:02:46.700
got to get provided an implementation of
PetTypeService.
30

31
00:02:46.700 --> 00:02:50.900
I'm gonna do the concrete. 
You can see that we have the interface.
31

32
00:02:50.900 --> 00:02:55.069
So I've coded to the interface of PetTypeService. Now I'm gonna give it an
32

33
00:02:55.069 --> 00:03:00.500
implementation of PetTypeMapService.
Now I can do the same here for the pet
33

34
00:03:00.500 --> 00:03:02.980
service.
34

35
00:03:03.580 --> 00:03:09.070
Effectively, what I'm doing here is I'm
mimicking what Spring is going to do for
35

36
00:03:09.070 --> 00:03:15.070
us in the Spring Context, Spring is going
to do this wiring for us so I am in the
36

37
00:03:15.070 --> 00:03:21.550
before the setup. I am basically doing
the dependency injection for this. I
37

38
00:03:21.550 --> 00:03:27.940
can also see that map with some data so
I can say ownerMapService.save() and
38

39
00:03:27.940 --> 00:03:33.140
I could say Owner.builder. I don't need a
39

40
00:03:33.140 --> 00:03:39.680
lot of properties here. I'm just gonna do
1L to build like that.
40

41
00:03:39.680 --> 00:03:45.520
What this is going to do is save the
owner like so. So now again,
41

42
00:03:45.520 --> 00:03:51.320
basically, this initializes my OwnerMapService and puts one Owner object into
42

43
00:03:51.320 --> 00:03:56.980
it. So now, I can do some interesting
stuff like, let's see here, ownerMapService.findAll()
43

44
00:03:56.980 --> 00:04:03.850
and that's gonna provide a
Set. So let's come in and do
44

45
00:04:12.890 --> 00:04:18.850
like so. I can come in and do that. So
I'm gonna run that.
45

46
00:04:20.600 --> 00:04:28.100
We can see here that that does
work. A good habit here, this 1L
46

47
00:04:28.100 --> 00:04:31.000
I'm gonna do
47

48
00:04:34.309 --> 00:04:43.640
so I'm gonna do that ownerId.
What I can do is replace this so now I can
48

49
00:04:45.160 --> 00:04:50.280
come down here and say Owner
49

50
00:04:59.669 --> 00:05:05.180
like so. Now I can test this up.
50

51
00:05:07.069 --> 00:05:11.169
We already saw the save method
working but what if I want to actually
51

52
00:05:11.169 --> 00:05:18.939
do a save here. Let's do 
Owner owner2.
52

53
00:05:34.210 --> 00:05:39.970
Remember in the map service here, we
are actually testing to see if it does
53

54
00:05:39.970 --> 00:05:44.699
actually set that ID.
There's a couple things that we wanna
54

55
00:05:44.699 --> 00:05:50.780
be testing here to see whether or not
it sets that ID, so I'm gonna say this
55

56
00:05:50.780 --> 00:05:54.410
existing ID and I'm gonna refactor that,
56

57
00:05:59.690 --> 00:06:03.190
Extract a variable, like so.
57

58
00:06:05.350 --> 00:06:12.720
Let's call that ID, that's good. Now I can say assertEquals
58

59
00:06:17.910 --> 00:06:26.130
and it wasn't happy there because of the
autoboxing. So saveExistingId().
59

60
00:06:27.910 --> 00:06:33.240
I'm gonna do command N, create a test
method.
60

61
00:06:33.430 --> 00:06:42.210
So saveNoId(), we're expecting it to
establish an ID. So I can say Owner 
61

62
00:06:55.100 --> 00:06:58.760
saved so I can run a couple assertions on
there to make sure that functionality is
62

63
00:06:58.760 --> 00:07:04.720
working, so let's run this guy. I'm sure
he's happy.
63

64
00:07:05.050 --> 00:07:09.090
That passed.
Also, we'll make sure that this guy is
64

65
00:07:09.090 --> 00:07:11.780
happy as well. Now what we can do is
65

66
00:07:16.080 --> 00:07:22.110
map service delete.
Let's see here. We didn't actually do
66

67
00:07:22.110 --> 00:07:25.010
that so we can do
67

68
00:07:29.850 --> 00:07:33.140
and we could say 
68

69
00:07:34.100 --> 00:07:37.100
assertEquals(0).
69

70
00:07:37.260 --> 00:07:41.689
Let's do
70

71
00:07:41.689 --> 00:07:46.839
ownerMapService.findAll().size() because remember what's gonna
71

72
00:07:46.839 --> 00:07:53.769
happen here is the Before method is gonna run. This is gonna run before each
72

73
00:07:53.769 --> 00:07:58.389
method and I wanna make sure that I'm
basically gonna delete the one that I
73

74
00:07:58.389 --> 00:08:04.449
added. So I'm gonna say findById() and
then delete that one so that should
74

75
00:08:04.449 --> 00:08:08.199
return back a zero because there's only
gonna be one in there. You can see
75

76
00:08:08.199 --> 00:08:11.099
that does in fact work.
76

77
00:08:11.360 --> 00:08:21.580
Let's see here. You can do also ownerMapService.deleteById(ownerId).
77

78
00:08:24.060 --> 00:08:29.870
We can do that same assertion here.
The difference being, in the first one,
78

79
00:08:29.870 --> 00:08:33.800
I'm using the map service to return back
the object so I'm deleting by the object,
79

80
00:08:33.800 --> 00:08:39.860
and in the second one, I'm deleting by
the ID. So subtle but important
80

81
00:08:39.860 --> 00:08:45.520
difference.
And now, we have findByLastName().
81

82
00:08:45.520 --> 00:08:48.810
Let's come up here and do...
82

83
00:08:54.050 --> 00:09:00.920
So now what we wanna do set Smith.
Of course, we need to add that in.
83

84
00:09:01.960 --> 00:09:05.770
Again I'm using these constants here
so I don't wanna be redefining those
84

85
00:09:05.770 --> 00:09:13.089
all over the place so I'm gonna add
those constants into the test. I can
85

86
00:09:13.089 --> 00:09:17.640
come down here and say Owner
86

87
00:09:19.310 --> 00:09:23.800
findByLastName() and lastName
87

88
00:09:24.950 --> 00:09:32.680
and my Smith should not be null and assertEquals
88

89
00:09:32.680 --> 00:09:37.920
ownerId. That should be ID of one, right?
89

90
00:09:39.660 --> 00:09:44.900
Like so. So now, I can come in and run this.
90

91
00:09:46.380 --> 00:09:52.520
We can see that this expected not
null. Let's take a closer at this.
91

92
00:09:56.529 --> 00:10:01.119
So we ran into a problem there so it's
expecting a not null but apparently it
92

93
00:10:01.119 --> 00:10:06.539
was null, so let's run this in debug to make
sure that is the case.
93

94
00:10:16.220 --> 00:10:19.760
You can see I set the breakpoint there.
So I'm gonna come in. You can see
94

95
00:10:19.760 --> 00:10:25.690
that Smith is indeed null. So let's take
a closer look at that.
95

96
00:10:26.860 --> 00:10:33.060
So I'm saying lastName Smith and that is
not working.
96

97
00:10:34.520 --> 00:10:39.450
Let's take a closer look at that and that is because that's
not implemented, so our tests did find a
97

98
00:10:39.450 --> 00:10:45.390
problem. So that is a bad thing. Let's
come and implement that. I'm gonna
98

99
00:10:45.390 --> 00:10:51.090
pause this a second and implement this.
Okay, I jumped ahead a little bit and we
99

100
00:10:51.090 --> 00:10:56.070
got a little stream goodness going on
here. Just to step through those. We're
100

101
00:10:56.070 --> 00:11:00.510
using Java 8 streams. I'm going to
this.findAll(). That's gonna give me a Set
101

102
00:11:00.510 --> 00:11:03.380
from the underlying implementation which
is gonna be the map implementation.
102

103
00:11:03.380 --> 00:11:09.330
I'm gonna say stream and then I'm gonna do a filter. I'm gonna filter the
103

104
00:11:09.330 --> 00:11:14.360
results based on lastName equalsIgnoreCase(), so just a safety feature there.
104

105
00:11:14.360 --> 00:11:19.050
Shouldn't need to do that for the test,
but for a String comparison, I'd
105

106
00:11:19.050 --> 00:11:21.840
like to use ignore case especially on
something like the lastName. That'll
106

107
00:11:21.840 --> 00:11:27.690
filter out any typos or inconsistent
case, and then I'm doing findFirst().
107

108
00:11:27.690 --> 00:11:33.840
This here, that findFirst(), that's gonna return back an Optional. The
108

109
00:11:33.840 --> 00:11:37.170
method wants an owner and we're not
doing an option on there so I'm gonna
109

110
00:11:37.170 --> 00:11:44.769
say or else null.
Let's do Id. Correct a little typo there.
110

111
00:11:45.730 --> 00:11:49.049
Now we can come in here
111

112
00:11:51.279 --> 00:11:58.180
and say that. We can see that is
actually there. I'm gonna copy this
112

113
00:11:58.180 --> 00:12:03.750
test here and come in.
113

114
00:12:04.090 --> 00:12:11.290
We wanna make sure this behaves
okay. I say foo and that is not gonna
114

115
00:12:11.290 --> 00:12:17.730
be there. And now I'm gonna change
this to a assertNull.
115

116
00:12:17.730 --> 00:12:25.379
I'm expecting the Owner smith to be
not fouling. I'm expecting the method to
116

117
00:12:25.379 --> 00:12:29.040
return back a null here. So I'm gonna say
go ahead and do that.
117

118
00:12:29.040 --> 00:12:32.549
Even though nulls are evil, we're
gonna do that. We're just gonna set up
118

119
00:12:32.549 --> 00:12:36.899
these tests. So now, I've come in and I'm
gonna run all the tests here.
119

120
00:12:36.899 --> 00:12:42.430
Expand this out a little bit.
We can see that in just a few
120

121
00:12:42.430 --> 00:12:46.720
minutes I wrote test to completely test
the different CRUD operations of our
121

122
00:12:46.720 --> 00:12:52.300
map service. Now I am not going to go in
and implement tests for each one of the
122

123
00:12:52.300 --> 00:12:56.980
map services. If you want and it has not
been implemented, go ahead and write a
123

124
00:12:56.980 --> 00:13:00.640
test and submit a pull request and I
will pull it into the project. But I
124

125
00:13:00.640 --> 00:13:05.170
think it'd be a little redundant to do
every type here. I think it kind of get the
125

126
00:13:05.170 --> 00:13:11.410
gist of using JUnit 5 and testing the
map service, and here, I could have. I'm
126

127
00:13:11.410 --> 00:13:16.690
not testing interactions with either the
pet type service or the PetMapService.
127

128
00:13:16.690 --> 00:13:22.030
I am going to test that with Mockito in
a future test. I could write specific
128

129
00:13:22.030 --> 00:13:25.120
tests for those. Again, if that's
something that you want to see, go ahead
129

130
00:13:25.120 --> 00:13:29.440
and modify this and send me a pull
request and I will include it in a,
130

131
00:13:29.440 --> 00:13:33.520
into the source code and
possibly a future video. And the last step
131

132
00:13:33.520 --> 00:13:39.010
I have to do is go ahead and commit this.
I say Git Commit Directory and if I
132

133
00:13:39.010 --> 00:13:44.550
remember that was number 49. Yep, number 49.
133

134
00:13:45.910 --> 00:13:50.089
I'll go ahead and close out
that issue and I will push it up to
134

135
00:13:50.089 --> 00:13:54.730
GitHub and it'll be there for you.
