WEBVTT
0
1
00:00:02.300 --> 00:00:06.870
Okay in this video I'm going to step you
through an example, a working example of
1

2
00:00:06.870 --> 00:00:12.299
using Spring Boot and Neo4j which is a
graph database. Actually pretty cool
2

3
00:00:12.299 --> 00:00:17.280
stuff there, the source code for this
example is available on GitHub and you
3

4
00:00:17.280 --> 00:00:23.250
can go out to springframeworkguru my
little area on GitHub and go to the
4

5
00:00:23.250 --> 00:00:30.269
repository spring-boot-neo4j-example and you'll get the source code
5

6
00:00:30.269 --> 00:00:35.070
I'm about to walk you through here in
this video example of Spring Boot. So I'm
6

7
00:00:35.070 --> 00:00:42.180
going to toggle over to IntelliJ now and
first thing let's take a look at the
7

8
00:00:42.180 --> 00:00:47.609
POM. This is a pretty simple Spring Boot
POM I am using the latest release of
8

9
00:00:47.609 --> 00:00:52.320
Spring Boot at the time recording which
is 1.5.2, a lot of good stuff coming out
9

10
00:00:52.320 --> 00:00:59.730
of the Spring guys right now
and what we want here on line 29 to 31
10

11
00:00:59.730 --> 00:01:05.220
is to bring in the Spring Data
dependency for Neo4j
11

12
00:01:05.220 --> 00:01:13.229
and this will enable Spring Data JPA for
Neo4j to bring everything up and it
12

13
00:01:13.229 --> 00:01:19.110
includes everything that we're going to
need to connect to Neo4j and then you
13

14
00:01:19.110 --> 00:01:22.710
can see there also
I'm bringing in the Spring Boot Starter
14

15
00:01:22.710 --> 00:01:28.619
for good old Thymeleaf on the Spring
Boot Starter for web components and then
15

16
00:01:28.619 --> 00:01:33.509
finally the test which I don't have a
test which is very bad of me. But this is
16

17
00:01:33.509 --> 00:01:40.500
just a little working example to look at
connecting to Neo4j so I only have one
17

18
00:01:40.500 --> 00:01:48.869
domain class here and that is the
Product class and simple POJO just like
18

19
00:01:48.869 --> 00:01:55.799
if we were working with JPA but we're
not but it is a simple POJO and you can
19

20
00:01:55.799 --> 00:02:00.750
see the annotation there on line 11 NodeEntity and this kind of works like the
20

21
00:02:00.750 --> 00:02:08.220
JPA Entity tag but specific to Neo4j. No unique list there and then on line
21

22
00:02:08.220 --> 00:02:14.540
14 the other important thing is the
GraphId so this is what the idea that object
22

23
00:02:14.540 --> 00:02:22.099
that's going to get persisted into Neo4j. So that is going to get picked up by a
23

24
00:02:22.099 --> 00:02:28.780
Spring Data repository so under
repositories I have the Product
24

25
00:02:28.780 --> 00:02:33.920
Repository and you can see this is a
special flavor, it is the Graph
25

26
00:02:33.920 --> 00:02:41.689
Repository and this is going to give us
basic CRUD operations so it looks a lot
26

27
00:02:41.689 --> 00:02:47.450
like the CrudRepository out of
regular Spring Data so a little bit
27

28
00:02:47.450 --> 00:02:52.430
different but looks pretty much the same
to me to be honest but the important
28

29
00:02:52.430 --> 00:02:57.099
part here to remember is when you're
dealing with Spring Data we are going to
29

30
00:02:57.099 --> 00:03:03.530
provide the interface so we are
providing the interface of Product
30

31
00:03:03.530 --> 00:03:10.069
Repository and using Java generics to
pass on Product and what Spring Data
31

32
00:03:10.069 --> 00:03:14.989
for Neo4j it is going to do is provide
us an implementation of that repository
32

33
00:03:14.989 --> 00:03:20.569
at runtime. So makes our lives as
developers a lot easier because we don't
33

34
00:03:20.569 --> 00:03:25.900
have to write all that boilerplate code
to get stuff in and out of Neo4j. Now
34

35
00:03:25.900 --> 00:03:33.049
you'll also notice that an application.properties to connect to Neo4j, I've
35

36
00:03:33.049 --> 00:03:38.510
got some basic connection information
there to set up the username, password and
36

37
00:03:38.510 --> 00:03:44.419
this is all to my local Neo4j instance
which just happens to be running in a
37

38
00:03:44.419 --> 00:03:49.040
Docker container which is real cool
stuff but that is the configuration for
38

39
00:03:49.040 --> 00:03:56.239
my Neo4j database running locally the
port 7474 is kind of standard stuff for
39

40
00:03:56.239 --> 00:04:02.299
Neo4j so the next thing i want to look
at is we have a ProductRepository and
40

41
00:04:02.299 --> 00:04:07.729
then I've set up a ProductService and
this is a simple interface giving me
41

42
00:04:07.729 --> 00:04:13.129
CRUD type operations over Product. I'm
going to set off my controller and then
42

43
00:04:13.129 --> 00:04:18.919
here's my implementation and we can see
that I'm wiring in the Product
43

44
00:04:18.919 --> 00:04:25.889
Repository. See that's declared on line
19 and then on line 23 to
44

45
00:04:25.889 --> 00:04:30.990
25 you can see that I have specified a
constructor so we are doing dependency
45

46
00:04:30.990 --> 00:04:35.520
injection by constructor there and we
are going to wire in the Product
46

47
00:04:35.520 --> 00:04:41.219
Repository and then I also do have a
type converter so that is taking in the
47

48
00:04:41.219 --> 00:04:45.479
ProductForm, show you that real quick
you can see that this looks a lot like
48

49
00:04:45.479 --> 00:04:51.990
the Product domain class but this is
essentially a command object or some
49

50
00:04:51.990 --> 00:04:56.310
people like to call it a backing bean to
the the form for when we're adding
50

51
00:04:56.310 --> 00:05:03.060
products. And all this gets wired into my
ProductController so this is a Spring
51

52
00:05:03.060 --> 00:05:10.020
MVC controller, kind of standard stuff
here for Spring MVC, and into the
52

53
00:05:10.020 --> 00:05:14.009
controller
he gets injected in my ProductService
53

54
00:05:14.009 --> 00:05:22.139
and also a convertor
for ProductForm. So in this example here
54

55
00:05:22.139 --> 00:05:26.370
on the controller i am using setter
based dependency injection just to
55

56
00:05:26.370 --> 00:05:30.919
showing you two different examples of
their technically constructor based
56

57
00:05:30.919 --> 00:05:35.460
injection. It is probably preferred but in
the world of Spring you can do either
57

58
00:05:35.460 --> 00:05:43.169
and then finally between line 41 down
to 81 you can see I have the different
58

59
00:05:43.169 --> 00:05:49.469
methods mapped out for my Spring MVC
controller. Now this is all backed up
59

60
00:05:49.469 --> 00:05:57.240
with Thymeleaf templates so my default view
is going to be the list view so it's
60

61
00:05:57.240 --> 00:06:01.620
going to expect a list of products and
then it's also going to have a link
61

62
00:06:01.620 --> 00:06:06.810
displayed for new products. I'm not going
to get into all the Thymeleaf particulars
62

63
00:06:06.810 --> 00:06:11.279
in this demonstration. I do have a whole
course on Thymeleaf if you want really
63

64
00:06:11.279 --> 00:06:15.029
to take a deep dive on utilizing Thymeleaf, it's a pretty cool template link
64

65
00:06:15.029 --> 00:06:19.440
technology. Now here's ProductForm you'll be seeing
65

66
00:06:19.440 --> 00:06:25.259
some demonstrations of this and then the
show template as well, so these are going
66

67
00:06:25.259 --> 00:06:30.479
to be used to show the data. So like I
said I do have a Neo4j running inside a
67

68
00:06:30.479 --> 00:06:34.529
Docker container, I am going to start the
application right now. I'm just going to
68

69
00:06:34.529 --> 00:06:40.900
run over in IntelliJ and we will see Spring Boot
does start up pretty quick, not a lot in
69

70
00:06:40.900 --> 00:06:47.909
this and it is running on 8080. So I'm
going to toggle over to Chrome now and
70

71
00:06:47.909 --> 00:06:55.210
do a quick refresh and I'm not
initializing the database at all so I
71

72
00:06:55.210 --> 00:07:05.020
can just bring in a simple product here
and say some URL, I'm not doing any data
72

73
00:07:05.020 --> 00:07:12.279
validation, this is just a really really
simple example and we can see that it
73

74
00:07:12.279 --> 00:07:20.229
did take it now if I come back here I
can see that the product has been listed
74

75
00:07:20.229 --> 00:07:34.089
I can do another product, let's just do asdf, you can see that I now have
75

76
00:07:34.089 --> 00:07:38.409
Product ID too and I can go back to list and we can
76

77
00:07:38.409 --> 00:07:46.020
see that I have two products in there, I
can also go in and edit them so I'll do
77

78
00:07:46.020 --> 00:07:54.310
www there, just on the URL and we can see that
that data has persisted. Now one thing
78

79
00:07:54.310 --> 00:07:59.199
that's neat about Neo4j, at least in
the Docker image you do get a neat
79

80
00:07:59.199 --> 00:08:04.270
little web application so you come out
here to take a look at the database and you
80

81
00:08:04.270 --> 00:08:11.169
can see that I now have a Product and you
can see here's my two little nodes, no
81

82
00:08:11.169 --> 00:08:16.839
relationship between them but I do have
two objects persisted out in Neo4j. So
82

83
00:08:16.839 --> 00:08:22.620
this is a kind of a cool little console,
the graphing stuff is quite
83

84
00:08:22.620 --> 00:08:27.639
significantly different from relational
database but Neo4j is definitely a cool
84

85
00:08:27.639 --> 00:08:32.979
technology and just as a reminder, if you
want to have the complete source code
85

86
00:08:32.979 --> 00:08:37.700
just again it's out on GitHub springframeworkguru
86

87
00:08:37.700 --> 00:08:41.000
/spring-boot-neo4j-example
