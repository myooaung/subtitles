WEBVTT
0
1
00:00:04.370 --> 00:00:08.189
Alright, in this video we are going to
take a look displaying a recipe on
1

2
00:00:08.189 --> 00:00:12.509
the webpage. So we need to set up a few
things there. First off we're going to
2

3
00:00:12.509 --> 00:00:16.770
need to pass in the ID value that we
want to see. So we're going to use a URL
3

4
00:00:16.770 --> 00:00:20.699
parameter on that, so we'll take that
right out of URL mapping to get that
4

5
00:00:20.699 --> 00:00:24.750
ID value then we're going to ask the
database to give us that recipe back and
5

6
00:00:24.750 --> 00:00:29.970
then we have to configure Thymeleaf, a new Thymeleaf template to display that recipe. So
6

7
00:00:29.970 --> 00:00:33.960
a lot of content in this. One I'm going
to jump over to IntelliJ and we'll step
7

8
00:00:33.960 --> 00:00:37.380
through it. We are going to be following
test-driven development so I already got
8

9
00:00:37.380 --> 00:00:41.160
the test written. I got the HTML written
for the Thymeleaf templates but then
9

10
00:00:41.160 --> 00:00:45.360
we're going to jump over into Spring,
implement everything. Finally test it and
10

11
00:00:45.360 --> 00:00:50.340
development. So I'll show you the
tests that are failing and then we'll go
11

12
00:00:50.340 --> 00:00:53.640
and implement the code and we'll have
running tests and everything be in the
12

13
00:00:53.640 --> 00:00:57.899
green and we'll jump over to the web
page, bring it up and we will see the
13

14
00:00:57.899 --> 00:01:02.280
recipes display on the page. Alright in
this video we want to take a look at a
14

15
00:01:02.280 --> 00:01:06.810
little deeper into Spring MVC. And what
we want to do is set up our recipe
15

16
00:01:06.810 --> 00:01:13.140
application to view individual recipes. And to do so, what we need to do is add
16

17
00:01:13.140 --> 00:01:18.509
in a view link and sometimes I do it by
ID but I'm going to add in a link here.
17

18
00:01:18.509 --> 00:01:23.040
And I've modified the page here. I'm
viewing the page off the disk in the
18

19
00:01:23.040 --> 00:01:27.150
browser and we just have a slight
modification here to add in a view link.
19

20
00:01:27.150 --> 00:01:34.979
And I'll show you the modified page. So come
over here to index.html. Now I did clean
20

21
00:01:34.979 --> 00:01:39.329
this up a little bit. I had some cut and
paste damage in there that I got rid of
21

22
00:01:39.329 --> 00:01:46.049
and now we've added in this href and
down here on line 53, you can see that
22

23
00:01:46.049 --> 00:01:50.850
I'm using another Thymeleaf tag there th:href and it's going to replace in that
23

24
00:01:50.850 --> 00:01:56.100
and what we're going to do is send it to
URL of it's a relative URL of recipe
24

25
00:01:56.100 --> 00:02:03.000
slash show and pass it in the recipe ID. And then make sure I don't want the text
25

26
00:02:03.000 --> 00:02:10.190
there let's. Get rid of that. We'll just
have the link say view.
26

27
00:02:12.090 --> 00:02:20.019
There we go. So also on line 50,
notice I'm showing you a hint there. This
27

28
00:02:20.019 --> 00:02:25.599
is where Thymeleaf in IntelliJ. So the
recipe is telling IntelliJ the
28

29
00:02:25.599 --> 00:02:31.480
type of it so it can detect what the
variable type is and do autocomplete or
29

30
00:02:31.480 --> 00:02:35.379
intellisense for you. So that's going to
be a nice little feature for you guys to
30

31
00:02:35.379 --> 00:02:42.310
be using. Now let me come in here and go
to Git and we'll compare against it. So
31

32
00:02:42.310 --> 00:02:46.720
you can see the exact changes here. You
can see on 36 I added in table header
32

33
00:02:46.720 --> 00:02:51.700
view and I cleaned up. I had these Thymeleaf tags. Those shouldn't have been in
33

34
00:02:51.700 --> 00:02:55.569
there. That was a cut-and-paste mistake
so go get rid of that cleaned it up and
34

35
00:02:55.569 --> 00:03:02.470
now you can see that I also added in the
recipe hint for the type and added in
35

36
00:03:02.470 --> 00:03:07.810
the href of that. Now the next thing I
want to show you guys is I'm adding in a
36

37
00:03:07.810 --> 00:03:15.069
show.html and it's going to be under
templates, recipe and show and we'll map
37

38
00:03:15.069 --> 00:03:20.319
it out that way. And this is what I'm
using to display recipe. A lot of
38

39
00:03:20.319 --> 00:03:24.790
bootstrap CSS formatting in there and
I'll toggle over to Chrome and show you
39

40
00:03:24.790 --> 00:03:29.769
the preview of that. So here's a sample
recipe again. This is displaying in the
40

41
00:03:29.769 --> 00:03:34.180
browsers, not going through Thymeleaf
just yet. But we're just taking
41

42
00:03:34.180 --> 00:03:39.099
advantage of the Thymeleaf
natural templating engine here and so we
42

43
00:03:39.099 --> 00:03:41.799
got a couple things that we want to be
doing here. We'll have to loop over the
43

44
00:03:41.799 --> 00:03:45.609
categories display those and then set up
these properties. The
44

45
00:03:45.609 --> 00:03:49.629
ingredients display those and then our
directions and notes are just simple
45

46
00:03:49.629 --> 00:03:57.760
text fields I won't need to display. Now
here's the HTML for that show page. See
46

47
00:03:57.760 --> 00:04:02.980
I'm using the div class panel body,
declare a roll and we're doing columns
47

48
00:04:02.980 --> 00:04:08.099
3 &amp; 9 for the categories and then
similar format for that and then
48

49
00:04:08.099 --> 00:04:13.660
ingredients and directions both get
their own panel. So this HTML here
49

50
00:04:13.660 --> 00:04:18.700
is declaring a HTML panel. So I'm going
to go over the bootstrap stuff a little
50

51
00:04:18.700 --> 00:04:22.990
quick because this course really isn't
specifically on bootstrap.
51

52
00:04:22.990 --> 00:04:26.979
But you can see I'm using the classes, 
bootstrap CSS classes there to declare
52

53
00:04:26.979 --> 00:04:31.919
that. Now to get this data,
we're going to set up a couple things. So
53

54
00:04:31.919 --> 00:04:39.039
following test-driven development,
I've done in and added a test so we're
54

55
00:04:39.039 --> 00:04:43.750
we're going to modify our recipe service
to return back. We want to get a findBy
55

56
00:04:43.750 --> 00:04:48.009
Id out of our recipeService which is
going to go to the recipe
56

57
00:04:48.009 --> 00:04:52.870
Repository and do a findById(). So that
that's going to be provided by Spring
57

58
00:04:52.870 --> 00:04:58.810
Data but we still need to modify
our recipe service. And long in that
58

59
00:04:58.810 --> 00:05:02.169
spirits if I run this, this is going to
fail right now because I have not
59

60
00:05:02.169 --> 00:05:07.030
implemented that. So we can see that I
have a failing test there as well. And
60

61
00:05:07.030 --> 00:05:15.340
then also in our controller, I'm adding
in a new recipe controller and I've
61

62
00:05:15.340 --> 00:05:19.870
created a get recipe for that. So what we
want to be able to do is go to an ID
62

63
00:05:19.870 --> 00:05:24.880
value and we should get back view on
that. So we're going to make sure that that
63

64
00:05:24.880 --> 00:05:33.340
does return back ok and if I run this
right now, we can see that this is also
64

65
00:05:33.340 --> 00:05:38.409
going to be failing so I am going to go
back and test or implement these now. So
65

66
00:05:38.409 --> 00:05:41.979
the scan is following test-driven
development. So if I come into the recipe
66

67
00:05:41.979 --> 00:05:47.590
service implementation, you can see that
I stubbed that out and what we want to
67

68
00:05:47.590 --> 00:05:53.040
do, we are going to get an Optional back
68

69
00:05:53.040 --> 00:06:13.470
from Spring Data. And here,
we're going to add in a little bit of
69

70
00:06:13.470 --> 00:06:18.240
error check. So we're saying if the recipe
70

71
00:06:18.240 --> 00:06:30.920
isn't present we're going to throw a new
RuntimeException. So we get an error there
71

72
00:06:30.920 --> 00:06:39.030
and then we can say down here, this will be optional. So we're just going to return back the
72

73
00:06:39.030 --> 00:06:43.410
optional. So if we come in there and it's
not present you're going to to fail and
73

74
00:06:43.410 --> 00:06:50.190
that should satisfy our test. So let's go
take a look at our test now and we'll
74

75
00:06:50.190 --> 00:06:56.970
rerun the test and you can see that now
I have a passing test. Now I want to jump
75

76
00:06:56.970 --> 00:07:02.970
over to the controller and we'll
implement him. So I already created the
76

77
00:07:02.970 --> 00:07:08.040
stub of the controller but right now,
it's a simple class. All it has the
77

78
00:07:08.040 --> 00:07:11.670
RecipeService and it's not even getting
autowired yet. So I need to make this a
78

79
00:07:11.670 --> 00:07:14.150
Controller
79

80
00:07:15.530 --> 00:07:28.590
and maybe we want to turn back a String
and we'll just call it showById. Now
80

81
00:07:28.590 --> 00:07:34.130
there's a couple things that we want to
do here. One is to do a RequestMapping
81

82
00:07:35.010 --> 00:07:44.670
and this time we want to do slash
recipe show. Now we we want to pick up
82

83
00:07:44.670 --> 00:07:50.280
the ID value out of the URL and the way
we do this is do a squiggly line and
83

84
00:07:50.280 --> 00:07:55.800
give it a variable name and then another
squiggly line. So just like
84

85
00:07:55.800 --> 00:08:01.530
that. So now we want to get that passed in so
85

86
00:08:01.530 --> 00:08:06.690
we're going to use annotation PathVariable and we'll take it in as a String
86

87
00:08:06.690 --> 00:08:11.160
but we'll convert it to Long for our
service call. We also want you to handle
87

88
00:08:11.160 --> 00:08:13.670
on the Model.
88

89
00:08:16.910 --> 00:08:25.550
Now you can say model addAttribute. Now the recipeService.
89

90
00:08:25.550 --> 00:08:34.130
findById and that will go
out and get that. Now we need to return
90

91
00:08:34.130 --> 00:08:37.820
back the view name and the way the view
name is going to work is going to be
91

92
00:08:37.820 --> 00:08:48.140
slash recipe slash show. And that's going
to tell the Thymeleaf templating engine
92

93
00:08:48.140 --> 00:08:53.270
to use our new show HTML template. So
let's go ahead and run this now. Wait a
93

94
00:08:53.270 --> 00:08:59.240
second, let's run our test first so
as we are doing test-driven development.
94

95
00:08:59.240 --> 00:09:09.770
So now in theory this should pass and it
did not so recipe show. So I had a
95

96
00:09:09.770 --> 00:09:17.600
problem in my test. I put in the wrong
URL in the test. So now I have a passing
96

97
00:09:17.600 --> 00:09:27.680
unit test. Let's double check, make sure
that all our tests are passing. We got
97

98
00:09:27.680 --> 00:09:31.430
that one integration test that takes a
little bit longer to come up and we can see
98

99
00:09:31.430 --> 00:09:35.120
that we are green across the board on
our test. So now let's go ahead and run
99

100
00:09:35.120 --> 00:09:42.110
our application and we'll make sure that
our our template is in fact working
100

101
00:09:42.110 --> 00:09:48.470
properly because our unit tests only
tested out the Spring MVC mapping. So
101

102
00:09:48.470 --> 00:09:56.110
come over here to localhost and we can
do a refresh on him. So now we have that.
102

103
00:09:56.110 --> 00:10:02.480
And we can see that we have a recipe
description which is wrong so let's go
103

104
00:10:02.480 --> 00:10:09.820
fix that.So right now the only property
I'm setting is the recipe description.
104

105
00:10:11.800 --> 00:10:23.680
And what I did wrong here is I did not
close those and I spelled description wrong.
105

106
00:10:24.490 --> 00:10:31.940
Now let's take a look at that. Perfect
Guacamole. So now our template is working.
106

107
00:10:31.940 --> 00:10:35.240
In the next video we are going to have
assignment to fill out the rest of the
107

108
00:10:35.240 --> 00:10:39.610
properties here. So right now the only
thing that's coming back from that is
108

109
00:10:39.610 --> 00:10:44.240
Perfect Guacamole so that's getting
bound from the data model. So just to
109

110
00:10:44.240 --> 00:10:50.210
recap here what's going on. We will start
at the repository so we will work
110

111
00:10:50.210 --> 00:10:55.970
backwards. So we have our RecipeRepository, this is
111

112
00:10:55.970 --> 00:10:58.580
CrudRepository implemented through
Spring Data JPA
112

113
00:10:58.580 --> 00:11:04.370
which gives us findById method,
which turns back an Optional. So we get
113

114
00:11:04.370 --> 00:11:10.190
a handle on that, we get that optional
back on line 37 there, we are checking to
114

115
00:11:10.190 --> 00:11:14.540
make sure that we get a value back. So
we're doing the isPresent test so this
115

116
00:11:14.540 --> 00:11:19.010
would throw an exception if the recipe
is not found. Then we return back the
116

117
00:11:19.010 --> 00:11:24.800
recipe from the Optional. That goes to
our RecipeController which is mapped to
117

118
00:11:24.800 --> 00:11:31.220
the URL slash recipe slash show slash id
and we are getting the ID value as a
118

119
00:11:31.220 --> 00:11:37.930
path variable. So this little squiggly
line, ID squiggly line, that is a URL
119

120
00:11:37.930 --> 00:11:42.770
variable and then our path variable
and then we are taking annotation Path
120

121
00:11:42.770 --> 00:11:48.170
Variable. And it is important to point
out that it's a convention to use in the id
121

122
00:11:48.170 --> 00:11:53.029
id so that way, Spring will know which you can actually
122

123
00:11:53.029 --> 00:11:57.370
have multiple tasks variables fully
supported. No problem at all. But by
123

124
00:11:57.370 --> 00:12:02.150
following that convention, Spring will
know which path variable you're talking
124

125
00:12:02.150 --> 00:12:08.420
about. And then on line 24, we are adding
in a Model attribute called recipe and
125

126
00:12:08.420 --> 00:12:14.470
we are asking the RecipeService to get
that by ID.
