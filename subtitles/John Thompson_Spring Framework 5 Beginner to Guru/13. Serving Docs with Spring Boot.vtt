WEBVTT
1
00:00:03.100 --> 00:00:08.280
Again this video we're going to be taking a look at actually publishing the rest documentation with

2
00:00:08.280 --> 00:00:15.420
spring boots so no Spring Boot will publish things from the static directory automatically so I'll make

3
00:00:15.420 --> 00:00:19.050
those static resources available when it's deployed as a web application.

4
00:00:19.050 --> 00:00:26.830
So give you a little insight hint here what we have as we have our generator DOCSIS indexation GMO and

5
00:00:26.820 --> 00:00:28.290
in the classes directory.

6
00:00:28.290 --> 00:00:35.280
So this is effectively what is going to jarred up as our application in a nutshell.

7
00:00:35.320 --> 00:00:43.020
So but what we want to do is get this into a static directory up here in this classes directory so we

8
00:00:43.020 --> 00:00:48.990
can do that through maven configuration so I'm just going to open up that main palm here and what we

9
00:00:48.990 --> 00:00:56.540
need to do is add in a little maven configuration and I am going to copy that on over and I'm pretty

10
00:00:56.540 --> 00:00:59.350
sure nobody wants to watch me type everything in here.

11
00:00:59.360 --> 00:01:01.790
But we will do a code review.

12
00:01:01.790 --> 00:01:10.220
So here I am on line 155 I'm adding in configuration for the Maven resources plug in and then under

13
00:01:10.220 --> 00:01:16.400
executions I'm giving an execution I.D. of copy resources in the phase as prepare package so that as

14
00:01:16.400 --> 00:01:23.210
a maven lifecycle phase and we are going to run the goal of this plug in to copy resources and then

15
00:01:23.210 --> 00:01:29.090
down on line 164 you can see the sort where the configuration block starts and what we are saying is

16
00:01:29.090 --> 00:01:35.400
that we are going to target the project build output directory static docs.

17
00:01:35.480 --> 00:01:37.640
So we are going to put it into the docs folder.

18
00:01:37.640 --> 00:01:44.270
So again Spring Boot by default is going to serve out resources from any thing that's under slash static.

19
00:01:44.270 --> 00:01:47.250
That is a little bit of Spring Boot goodness.

20
00:01:47.510 --> 00:01:54.590
And what we want to do is copy the contents of generated docs to static docs so that's what this configuration

21
00:01:54.590 --> 00:02:01.850
does and this is pretty much a cut and paste from the spring rest docs documentation so that this is

22
00:02:01.850 --> 00:02:08.930
exactly how they say to prepare a Spring Boot to serve us so the end effect of this will be as well

23
00:02:09.170 --> 00:02:11.430
when you're Spring Boot applications deployed.

24
00:02:11.570 --> 00:02:14.960
You'll be able go to static slash docs and see the contents of that.

25
00:02:14.960 --> 00:02:20.000
So in this case it's named index H2 AML so it automatically come up in the browser.

26
00:02:20.000 --> 00:02:26.150
So now let's go ahead I'm going to do a clean and we'll do a package and then we'll go ahead and review

27
00:02:26.690 --> 00:02:33.810
what actually gets generated here and then again maven resources plug in this is a standard plug in

28
00:02:33.810 --> 00:02:39.810
from maven pretty stable been around for a long time and it's pretty common to use this to customize

29
00:02:39.810 --> 00:02:43.210
your your build packaging very handy in.

30
00:02:43.210 --> 00:02:45.810
So let's go and take a look at the target directory.

31
00:02:45.810 --> 00:02:53.460
Again we have generated docs so we have this index HDMI out and we want this to be copied and you can

32
00:02:53.460 --> 00:02:56.750
see here a copy statics docs HMO.

33
00:02:56.850 --> 00:03:01.980
So exactly what we wanted to have copied again this directory was not there.

34
00:03:01.980 --> 00:03:05.140
We have copied it with the configuration of this plugin.

35
00:03:05.190 --> 00:03:12.120
And now if we were to open up the jar and inspect the char I assure you that the new we would find a

36
00:03:12.120 --> 00:03:15.780
directory of static docs indexed HMO.

37
00:03:15.780 --> 00:03:22.530
And when we run the Spring Boot application from the jar we will have documentation served up there.

38
00:03:22.710 --> 00:03:28.740
So some people want to do this some people don't to have API documentation it is a nice feature.

39
00:03:28.740 --> 00:03:30.990
Your organization may not want to do this.

40
00:03:31.000 --> 00:03:36.330
There's a lot of different strategies of deploying API documentation.

41
00:03:36.330 --> 00:03:38.180
This is just one example.

42
00:03:38.610 --> 00:03:44.400
I think in a smaller company that's probably going to be more likely something that you'll do in a large

43
00:03:44.400 --> 00:03:45.620
organization.

44
00:03:45.630 --> 00:03:49.290
I expect that there will be a different process put in place.

45
00:03:49.290 --> 00:03:51.410
So this is more of a f y.

46
00:03:51.450 --> 00:03:53.820
So if you have the capability do it great.

47
00:03:53.910 --> 00:03:59.430
But once you get into the enterprise do not be surprised if they have a an alternative way of deploying

48
00:03:59.460 --> 00:04:00.660
API documentation.
