WEBVTT
0
1
00:00:04.279 --> 00:00:08.189
Okay, just like Spring MVC, we have a
testing framework  We're gonna go
1

2
00:00:08.189 --> 00:00:12.120
through in this video and show you how
to use that. So, I have the 
2

3
00:00:12.120 --> 00:00:15.660
CategoryController that I created in the last
video, and what I wanna do is come in
3

4
00:00:15.660 --> 00:00:20.970
and create a test. So, I just did a alt
enter there. Create Test.
4

5
00:00:20.970 --> 00:00:27.900
And let's test both of these. We will
run a setUp method. Let's go ahead and
5

6
00:00:27.900 --> 00:00:33.270
you can see that selecting JUnit4. I
have not started using JUnit5 yet. That
6

7
00:00:33.270 --> 00:00:37.290
it's just start coming out on the market,
and I think, I'm gonna add a whole
7

8
00:00:37.290 --> 00:00:41.190
section on JUnit 5 to the course
because that is gonna become the new
8

9
00:00:41.190 --> 00:00:45.690
de facto standard. So, I am going to add
that to Git. So now, this is the stub that
9

10
00:00:45.690 --> 00:00:50.790
IntelliJ created. I'm gonna add a couple
properties to it. First thing would be
10

11
00:00:50.790 --> 00:00:53.750
the WebTestClient.
11

12
00:00:56.030 --> 00:00:59.410
And we'll have CategoryRepository.
12

13
00:00:59.780 --> 00:01:04.190
And of course, CategoryController. So, those are gonna be the things that we need. Now, we
13

14
00:01:04.190 --> 00:01:11.770
wanna set this up. First thing we need
to do is the categoryRepository.
14

15
00:01:12.750 --> 00:01:20.360
This is a another way of creating a Mock.
I can just call the class.
15

16
00:01:20.670 --> 00:01:24.270
So, there's actually
several different ways to initialize Mocks.
16

17
00:01:24.270 --> 00:01:28.180
And it helps to figure out the right
property there. That's why that was
17

18
00:01:28.180 --> 00:01:30.780
unhappy.
18

19
00:01:34.790 --> 00:01:39.770
So, that's injecting our mock object into
the CategoryController. Now, we wanna
19

20
00:01:39.770 --> 00:01:42.820
set up our WebTestClient.
20

21
00:01:46.840 --> 00:01:50.829
This is gonna build an instance
of the WebTestClient, that we can use for
21

22
00:01:50.829 --> 00:01:53.729
our testing.
22

23
00:01:54.110 --> 00:01:59.030
Let's come over here, write our list test.
I'm gonna... not sure if I showed you
23

24
00:01:59.030 --> 00:02:01.570
guys this before.
24

25
00:02:01.770 --> 00:02:05.479
We're gonna say one findAll occurs.
25

26
00:02:08.110 --> 00:02:13.990
Because I have Flux.just. Now, this is where
it's handy, that we added in our builder
26

27
00:02:13.990 --> 00:02:16.380
methods.
27

28
00:02:23.630 --> 00:02:27.340
I'm gonna set up two of these.
28

29
00:02:28.349 --> 00:02:31.640
So, it's building up to Category
objects.
29

30
00:02:31.640 --> 00:02:38.270
So, that's a behavior-driven Mockito. So,
we're gonna say given findAll, when the
30

31
00:02:38.270 --> 00:02:42.410
categoryRepository, findAll method is
invoked. We're gonna return back a
31

32
00:02:42.410 --> 00:02:46.230
Flux.
That's the reactive type. We're gonna
32

33
00:02:46.230 --> 00:02:50.940
return back that Flux, just like the
repository would. So, that sets up our
33

34
00:02:50.940 --> 00:02:56.150
mock for the controller. So now, let's go
ahead and invoke that.
34

35
00:03:01.630 --> 00:03:05.800
add where the v1 in there.
35

36
00:03:06.030 --> 00:03:09.320
v1/categories.
36

37
00:03:16.260 --> 00:03:20.920
We're just gonna expect back a list.
So pretty simple test here. So, we're
37

38
00:03:20.920 --> 00:03:31.380
gonna say to run a get against the uri
/api/v1/categories and exchange the list.
38

39
00:03:31.380 --> 00:03:38.500
And that should run
okay. Let's go ahead and run that now.
39

40
00:03:40.890 --> 00:03:46.710
You can see that as happy, and just, I
don't trust things when they pass on the
40

41
00:03:46.710 --> 00:03:50.500
first time. So, let's make sure that its
actually working.
41

42
00:03:50.500 --> 00:03:54.990
You'll force a failure there.
42

43
00:03:56.730 --> 00:04:00.810
So, that is in fact working.
Now, let's do the same thing for the 
43

44
00:04:00.810 --> 00:04:03.890
getById method.
44

45
00:04:18.280 --> 00:04:21.959
And this time, we're gonna do a Mono.
45

46
00:04:38.170 --> 00:04:43.560
I think I made mistake there with
manage. Let's try just a String.
46

47
00:04:47.600 --> 00:04:53.160
So, I'm setting up the Mockito to return
back by id. I'm just gonna say
47

48
00:04:53.160 --> 00:04:59.210
some id, and I'm gonna just copy this guy
here.
48

49
00:05:02.090 --> 00:05:08.830
I'm gonna say some id, exchange, expectBody. I think we just get rid of the
49

50
00:05:08.830 --> 00:05:11.099
list.
50

51
00:05:13.410 --> 00:05:20.590
Don't have to worry about that.
So, I'll go ahead and run this.
51

52
00:05:22.160 --> 00:05:25.850
So now, we have two tests that are now
passing. We'll go ahead and run the whole
52

53
00:05:25.850 --> 00:05:31.120
class, just to double-check.
Now, we can see that, we do have passing
53

54
00:05:31.120 --> 00:05:35.680
unit tests over the controller. So, our
controller is now completely tested. I'll
54

55
00:05:35.680 --> 00:05:39.430
show you one other thing here, a run
option. I don't think I've shown you this
55

56
00:05:39.430 --> 00:05:45.120
yet in the course. A run option here is
you can run with coverage,
56

57
00:05:45.120 --> 00:05:50.040
and this is gonna generate test
coverage for us. So now, you can see that
57

58
00:05:50.040 --> 00:05:55.530
IntelliJ pops up with test coverage, and
if I come over here to my controller,
58

59
00:05:55.530 --> 00:05:59.280
I'll check on that, so you can see, it
gets highlighted here. So, these are
59

60
00:05:59.280 --> 00:06:03.390
the things that are tested. If I didn't
have test coverage on it, you'd see a
60

61
00:06:03.390 --> 00:06:07.110
little red there. That's
actually, it should be like green
61

62
00:06:07.110 --> 00:06:11.100
greenish a little bar there. Meaning that,
we do have tests covered. So,
62

63
00:06:11.100 --> 00:06:15.600
that's all good stuff here. In the
following sections, we are gonna build
63

64
00:06:15.600 --> 00:06:19.050
out the controller to add in the
additional functions that we need for
64

65
00:06:19.050 --> 00:06:22.860
creating categories and updating
categories and deleting categories.
65

66
00:06:22.860 --> 00:06:26.610
Anyway, we'll continue to build out our
unit tests, as we progress through the
66

67
00:06:26.610 --> 00:06:28.640
course.
