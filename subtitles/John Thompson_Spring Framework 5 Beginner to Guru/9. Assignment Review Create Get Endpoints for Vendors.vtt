WEBVTT
0
1
00:00:04.069 --> 00:00:07.859
Alright! In this video, we are gonna go
through and work through the assignment
1

2
00:00:07.859 --> 00:00:13.380
and that's basically to take what we did
for categories and do that for vendors.
2

3
00:00:13.380 --> 00:00:17.220
So, the first thing I need to do is come
over here and create the class for our
3

4
00:00:17.220 --> 00:00:22.349
VendorController. I'm gonna right
click there, Class.
4

5
00:00:22.349 --> 00:00:27.210
We'll create that new class in there.
We see that, we're gonna go
5

6
00:00:27.210 --> 00:00:31.439
ahead and add that to git, and I'm gonna
show you a little trick here. I'm gonna
6

7
00:00:31.439 --> 00:00:36.900
come in here and do a Split
Horizontally. I can close him on the
7

8
00:00:36.900 --> 00:00:41.580
top. Now, we have our CategoryController
at the top. So, this is like a template
8

9
00:00:41.580 --> 00:00:45.780
for exactly what we wanna code this
time. So, we can take this step by step
9

10
00:00:45.780 --> 00:00:50.890
and code this up.
@RestController
10

11
00:00:51.950 --> 00:00:56.620
This time, we want the VendoRepository.
11

12
00:00:57.090 --> 00:01:01.800
We do it. I'm on a Mac, so I'm gonna do a
command N to generate constructor, and
12

13
00:01:01.800 --> 00:01:05.700
because we have that constructor, Spring
is gonna automatically autowire that
13

14
00:01:05.700 --> 00:01:08.580
for us.
And now here, let's go ahead and
14

15
00:01:08.580 --> 00:01:13.110
implement the list method. So, we are
going to do return back a flux of
15

16
00:01:13.110 --> 00:01:18.510
vendors. So remember, the flux is the
reactive type for one or for zero or
16

17
00:01:18.510 --> 00:01:26.600
many elements, opposed to mono, which is
zero or one element. Once you say.
17

18
00:01:27.530 --> 00:01:33.410
And this is gonna return back the
vendorRepository, and we'll do it findAll().
18

19
00:01:33.410 --> 00:01:38.600
Now, we need to decorate with this with
annotations. This is going to do a 
19

20
00:01:38.600 --> 00:01:45.030
@GetMapping,
and the URL is gonna be our api/v1.
20

21
00:01:45.030 --> 00:01:50.820
This is just a million versions
of the API, so pretty common. You'll do
21

22
00:01:50.820 --> 00:01:56.520
like a v1/api, and then, you might do it
v2, as things evolve but you wanna
22

23
00:01:56.520 --> 00:02:01.479
keep the v1/api available for clients
that are using that.
23

24
00:02:01.479 --> 00:02:07.150
So, we're gonna do v1/vendors. 
Let's go ahead and implement the 
24

25
00:02:07.150 --> 00:02:12.840
getById as well. Now, this guy is gonna
return back a mono.
25

26
00:02:13.390 --> 00:02:18.540
I'm on Category. And we'll  import
that class.
26

27
00:02:18.540 --> 00:02:26.329
Call them getById again. And this is
gonna take in a string id value.
27

28
00:02:28.230 --> 00:02:34.849
Do findById and passing the ID
value. So, that sets up our method. But,
28

29
00:02:34.849 --> 00:02:39.180
what's not happy there. Oh vendorRepository.
29

30
00:02:39.180 --> 00:02:45.909
oh my bad. Copying over code from above.
So,
30

31
00:02:45.909 --> 00:02:50.800
my mistake there.
Now, here again, we're getting used to 
31

32
00:02:50.800 --> 00:02:56.480
GetMapping.
But this time, we're gonna set up the URL.
32

33
00:02:58.420 --> 00:03:05.460
Do a little squiggly line their, id. So,
that's gonna be a URL parameter. And
33

34
00:03:05.460 --> 00:03:11.880
then, finally, we need to add in that @PathVariable annotation.
34

35
00:03:12.520 --> 00:03:16.810
And again, that's going to basically map
by the name so it's gonna do some
35

36
00:03:16.810 --> 00:03:22.780
reflection to set things up. So, because I
set this property name to id, it's gonna
36

37
00:03:22.780 --> 00:03:26.610
look for a property there of id to
bind to. So, that's how the @PathVariable
37

38
00:03:26.610 --> 00:03:31.540
annotation's gonna work. Okay, so that
sets up my controller, but we also wanna
38

39
00:03:31.540 --> 00:03:37.570
set up our test. So, I can come in here
and do it. If you're on OS X, I can do
39

40
00:03:37.570 --> 00:03:42.220
option enter and say Create Test, and we
wanna set these up, and let's also
40

41
00:03:42.220 --> 00:03:48.150
create a setUp.
So, you can see IntelliJ creative stub
41

42
00:03:48.150 --> 00:03:52.380
with the test here. I'm gonna click up
in this window and it will open up the
42

43
00:03:52.380 --> 00:03:56.910
category test so it we're gonna do the
exact same thing here. Let's go ahead and
43

44
00:03:56.910 --> 00:03:59.690
add these in.
44

45
00:04:01.800 --> 00:04:06.050
And here, we're gonna do the VendorRepository,
45

46
00:04:10.069 --> 00:04:15.709
and sometimes, especially in tests,
your VendorController as far
46

47
00:04:15.709 --> 00:04:19.039
as property names I'll go. I'll personally
go back and forth. I probably should be
47

48
00:04:19.039 --> 00:04:23.930
consistent on it. But to be honest with
you, I am not. So that is potentially a
48

49
00:04:23.930 --> 00:04:28.699
bad habit. But for tests, I think it's
okay, because a lot of times tests, you're
49

50
00:04:28.699 --> 00:04:31.669
gonna be testing a specific
controller. So, whether you call a 
50

51
00:04:31.669 --> 00:04:36.650
VendorController or controller, I don't think
it's that much or that important for
51

52
00:04:36.650 --> 00:04:43.460
a test specifically. So here, we wanna
set up our vendorRepository. We're
52

53
00:04:43.460 --> 00:04:46.660
gonna say equals Mockito.
53

54
00:04:50.250 --> 00:04:55.160
So, that's just another way of
initializing those mocks.
54

55
00:04:56.830 --> 00:05:02.289
And again, here, just so you realize
what's going on, when this runs
55

56
00:05:02.289 --> 00:05:08.129
inside a Spring, Spring is gonna magic
creation those objects. It can inject in a
56

57
00:05:08.129 --> 00:05:12.789
VendorRepository instance for us. So,
here in the test, we are creating that
57

58
00:05:12.789 --> 00:05:18.009
objects so we are taking control of the
dependency injection here. So, we're doing
58

59
00:05:18.009 --> 00:05:21.099
that so we don't have to bring up the
Spring Context. So, we are manually doing
59

60
00:05:21.099 --> 00:05:26.020
the dependency injection. But in this
case, we are injecting in an instance of
60

61
00:05:26.020 --> 00:05:33.449
a mocked VendorRepository. So, let's go
ahead and build our webTestClient now.
61

62
00:05:39.270 --> 00:05:45.340
So, this is a setup code that we need to
do to set up our webTestClient. So now,
62

63
00:05:45.340 --> 00:05:50.140
we can see here, for our list, let's go
ahead and do that. So, we are going to
63

64
00:05:50.140 --> 00:05:57.430
return back. You can see our in line 29 of
the category test, I'm setting up a test
64

65
00:05:57.430 --> 00:06:02.170
that says, using the behavior driven
development testing features of Mockito.
65

66
00:06:02.170 --> 00:06:07.360
We are saying given findAll action. I'm
gonna return back a new flux over a
66

67
00:06:07.360 --> 00:06:13.150
cup of category. So, let's do the exact
same thing with vendors here. So, the
67

68
00:06:13.150 --> 00:06:18.150
first thing that we're gonna have to
do is set up how our mock is gonna behave.
68

69
00:06:21.949 --> 00:06:25.939
So, I got in here, we're saying give and
findAll. I'm going to say that's going to
69

70
00:06:25.939 --> 00:06:31.210
return
flux of just.
70

71
00:06:42.290 --> 00:06:46.010
So, you can see how these builders are
kind of nice to use when you're setting
71

72
00:06:46.010 --> 00:06:48.760
a test like this.
72

73
00:06:58.810 --> 00:07:04.270
So, that code sets up the flux. So,
we're gonna say a flux of just to new
73

74
00:07:04.270 --> 00:07:10.900
Vendor objects. So, this code here,
sets up our Mockito mock for the 
74

75
00:07:10.900 --> 00:07:15.040
VendorRepository. So when findAll is called,
it's gonna return back a flux with two
75

76
00:07:15.040 --> 00:07:18.690
new Vendor objects in it.
76

77
00:07:20.010 --> 00:07:22.910
Now, let's say get.
77

78
00:07:24.500 --> 00:07:29.870
And again, let's take a look at this URI
here. So, we have the v1/vendor, so I'm
78

79
00:07:29.870 --> 00:07:33.800
gonna copy that over. Now, if I was
doing this in a production environment,
79

80
00:07:33.800 --> 00:07:39.620
I'd probably make that a final string
that could be shared or a externalized
80

81
00:07:39.620 --> 00:07:44.620
property. It's also very common to do.
81

82
00:07:47.620 --> 00:07:51.450
I'll just say expectBodyList.
82

83
00:07:55.069 --> 00:08:00.539
So, just like in the above example here,
we are going to go out to the list and
83

84
00:08:00.539 --> 00:08:04.650
we are giving it two elements on that
list, to new vendors on that list, and now,
84

85
00:08:04.650 --> 00:08:08.970
we're just gonna say that we are going to do
it GET action against the vendors API.
85

86
00:08:08.970 --> 00:08:14.909
Run the exchange. So, invoke the API, and
now, we're gonna expect back a body, a
86

87
00:08:14.909 --> 00:08:19.289
list of vendors, and we're gonna
assert that it has a size of two. So,
87

88
00:08:19.289 --> 00:08:22.280
let's go ahead and run that.
88

89
00:08:28.130 --> 00:08:32.410
And you can see, that runs happily. Now let's put this
89

90
00:08:34.070 --> 00:08:37.430
down.
And now, we wanna do the exact same
90

91
00:08:37.430 --> 00:08:40.630
thing for getById.
91

92
00:09:10.760 --> 00:09:16.450
So now, it's there. webTestClient.get.
92

93
00:09:16.980 --> 00:09:21.690
And now, here we're saying vendors, but I also
knew that you'd put in the strings some
93

94
00:09:21.690 --> 00:09:25.970
id. So, that's gonna do a match or
function there on that.
94

95
00:09:25.970 --> 00:09:29.589
Let's say exchange.
95

96
00:09:34.240 --> 00:09:38.350
So, let's go ahead and run this. So you
can see, it's a similar functionality so
96

97
00:09:38.350 --> 00:09:43.240
we're telling the webtestClient to do
a GET action against this URI. That's our
97

98
00:09:43.240 --> 00:09:47.290
parameter value that we're gonna inject
into the controller. And so, Spring is
98

99
00:09:47.290 --> 00:09:50.980
gonna parse that. Get some ID and
check that into controller. Then,
99

100
00:09:50.980 --> 00:09:55.269
we're can expect it to return back a
Vendor class so let's go ahead and run
100

101
00:09:55.269 --> 00:09:57.540
that. You can see that now our
101

102
00:10:00.270 --> 00:10:04.980
test are running. So, let's go ahead and
double check this. I'll run all of them.
102

103
00:10:04.980 --> 00:10:08.510
Make sure everything runs happily
together.
103

104
00:10:09.530 --> 00:10:14.300
And we see everything is up and running
happily. So, I am gonna check this in
104

105
00:10:14.300 --> 00:10:19.910
now for you. So, that is completing the
assignment of vendors, to set up vendor
105

106
00:10:19.910 --> 00:10:23.750
like two get endpoints. So now, we have
this up and running, and I'm confident
106

107
00:10:23.750 --> 00:10:29.600
that this is going to work from the web
aspect, when we bring this up. Just to do
107

108
00:10:29.600 --> 00:10:33.860
a sanity check, I'm going to start the
application. I'm not gonna invoke the
108

109
00:10:33.860 --> 00:10:37.280
endpoints but we'll start it. Make
sure that the Spring Context isn't
109

110
00:10:37.280 --> 00:10:42.800
unhappy for some expected or unexpected
reason. And we can see that, it did start
110

111
00:10:42.800 --> 00:10:47.360
up normally. So, everything is happy with
the Spring Context so I am gonna call
111

112
00:10:47.360 --> 00:10:50.380
this assignment done.
