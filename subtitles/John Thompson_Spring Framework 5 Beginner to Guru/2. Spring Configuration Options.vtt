WEBVTT
0
1
00:00:04.609 --> 00:00:08.940
Okay, in this section of the course we
are going to talk about Spring
1

2
00:00:08.940 --> 00:00:14.639
configuration options and there is a
plethora of them. Plethora meaning many
2

3
00:00:14.639 --> 00:00:18.720
many to choose from. Now the first one that  we want to talk
3

4
00:00:18.720 --> 00:00:22.830
about is XML based configuration. This
was introduced in Spring Framework
4

5
00:00:22.830 --> 00:00:27.869
version 2 and you will see that out in
the field quite a bit. It's very common
5

6
00:00:27.869 --> 00:00:32.489
in legacy Spring applications and it's
still supported in Spring Framework
6

7
00:00:32.489 --> 00:00:38.070
version 5. The XML configuration is a
very mature option. I honestly don't see
7

8
00:00:38.070 --> 00:00:42.149
it going anywhere just because of the
footprint that it has in the industry.
8

9
00:00:42.149 --> 00:00:49.020
I've used XML configuration for a long
time. It is very mature and modern IDE's
9

10
00:00:49.020 --> 00:00:53.309
do make it a lot easier to work with
because they are sensitive to the XML
10

11
00:00:53.309 --> 00:00:58.739
schema. So you will bring in an XML
schema, your IDE will pick it up and
11

12
00:00:58.739 --> 00:01:03.989
you're able to do the configuration
properly so that XML schema is very
12

13
00:01:03.989 --> 00:01:09.869
important to the XML based configuration. Then we have Annotation Based
13

14
00:01:09.869 --> 00:01:14.820
Configuration. Now this was introduced in
Spring Framework version 3 and we've
14

15
00:01:14.820 --> 00:01:18.869
been seeing that quite a bit in the course
so far. So Spring Beans are picked up via
15

16
00:01:18.869 --> 00:01:23.850
'Component Scans' and this refers to the
class level annotations and we've seen
16

17
00:01:23.850 --> 00:01:29.670
most of these in action already and
what's not readily apparent is we've
17

18
00:01:29.670 --> 00:01:34.829
been using Spring Boot and it will do a
Component Scan. So wherever that Spring
18

19
00:01:34.829 --> 00:01:39.780
Boot class is, that's annotated as a
SpringBootApplication. It looks in that
19

20
00:01:39.780 --> 00:01:43.920
package and down so that this is
something that will commonly trip up
20

21
00:01:43.920 --> 00:01:49.380
people because they'll move a component
outside of that package hierarchy and
21

22
00:01:49.380 --> 00:01:53.189
also in their stuff breaks and they're
not seeing it. So something to be aware
22

23
00:01:53.189 --> 00:01:57.869
of when you're working with Spring Boot
and Annotation Based Configurations
23

24
00:01:57.869 --> 00:02:03.509
because you do have to tell Spring what
packages to scan for components .Now next
24

25
00:02:03.509 --> 00:02:08.700
up is the Java Based Configuration. This
also was introduced in Spring
25

26
00:02:08.700 --> 00:02:13.910
Framework 3.0 and this uses Java classes
to define Spring Beans.
26

27
00:02:13.910 --> 00:02:18.560
So you're able to programmatically
declare the Spring Beans and your
27

28
00:02:18.560 --> 00:02:23.890
configuration classes are defined with
an @Configuration annotation and
28

29
00:02:23.890 --> 00:02:30.080
within the classes, you define methods
that are regular Java public methods and
29

30
00:02:30.080 --> 00:02:38.390
on those, you'd use an @Bean annotation. So this allows the Spring framework to
30

31
00:02:38.390 --> 00:02:43.430
scan that as sees a configuration class
and then methods that are declared with
31

32
00:02:43.430 --> 00:02:51.590
the Bean annotation are used to bring
Spring components into the context. Then
32

33
00:02:51.590 --> 00:02:58.100
next up in Spring framework 4.0, we have
a Groovy Bean Definition DSL and DSL
33

34
00:02:58.100 --> 00:03:05.630
being domain-specific language. So this
is a style of Groovy language that
34

35
00:03:05.630 --> 00:03:10.370
allows you to declare Spring Beans and
this was a borrowed from the Grails team.
35

36
00:03:10.370 --> 00:03:14.210
So this is brought into Spring Framework 4.0
and it gives you a pretty versatile
36

37
00:03:14.210 --> 00:03:19.640
option. I honestly don't see it used too
much by the Spring community itself. It
37

38
00:03:19.640 --> 00:03:25.760
is the go-to method of declaring Spring
Beans in the Grails community and Grails
38

39
00:03:25.760 --> 00:03:30.800
is effectively a Groovy wrapper around
the Spring framework. So the traditional
39

40
00:03:30.800 --> 00:03:34.760
Spring guys just don't use it very much
to my knowledge but the Grails community
40

41
00:03:34.760 --> 00:03:40.520
sure does. Now you might be wondering
which to use. You actually can use all
41

42
00:03:40.520 --> 00:03:45.770
the above. No matter how you declare the
Spring Bean, they work seamlessly
42

43
00:03:45.770 --> 00:03:51.320
together to bring beans into the Spring
Context and right now the industry trend
43

44
00:03:51.320 --> 00:03:56.120
is definitely to favour Java Based
Configuration. All modern Spring
44

45
00:03:56.120 --> 00:04:00.020
development is being done with the Java
Based Configuration. I don't see people
45

46
00:04:00.020 --> 00:04:06.590
using the XML configuration and even
though the Java Based Configuration was
46

47
00:04:06.590 --> 00:04:11.540
introduced in Spring Framework 3.0, it
wasn't quite fully featured. It didn't
47

48
00:04:11.540 --> 00:04:16.850
have a lot of the options that were
mature in the XML configuration. However
48

49
00:04:16.850 --> 00:04:22.880
that trend, as more and more releases
came out in the Spring 3 series and most
49

50
00:04:22.880 --> 00:04:27.730
definitely the Spring 4 series, that gap
is now pretty much no longer
50

51
00:04:27.730 --> 00:04:33.790
existent and all those sub Spring
projects are now moving to Java Based
51

52
00:04:33.790 --> 00:04:37.630
Configuration. There were some holdouts services
still doing XML but for the
52

53
00:04:37.630 --> 00:04:42.340
most part, all the Spring projects are
now on Java Based Configuration. So I
53

54
00:04:42.340 --> 00:04:47.500
would think at some point they might
phase out the XML but I don't foresee
54

55
00:04:47.500 --> 00:04:52.900
that happening because it is so popular
with legacy application. So the Spring
55

56
00:04:52.900 --> 00:04:56.950
community will probably not be too happy about
that if the XML went away just because
56

57
00:04:56.950 --> 00:05:03.520
of the amount of code that is out there
in the field that is using XML. But for
57

58
00:05:03.520 --> 00:05:07.690
us developing new applications, the trend
is definitely towards Java Based
58

59
00:05:07.690 --> 00:05:10.560
Configuration.
