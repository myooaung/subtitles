WEBVTT
0
1
00:00:04.190 --> 00:00:08.130
Alright, in this section we are going
to take a look at an external property
1

2
00:00:08.130 --> 00:00:11.670
source configure and this is a
configuration bean that allows us to
2

3
00:00:11.670 --> 00:00:16.949
specify a specific properties file that
we want pull property values from and
3

4
00:00:16.949 --> 00:00:21.029
bring that into our Spring Bean. So what
we're going to do is I'm going to create
4

5
00:00:21.029 --> 00:00:26.580
a little fake data source bean with
several properties on it and we're going
5

6
00:00:26.580 --> 00:00:31.800
to set up the Spring configuration to
pull in the properties from an external
6

7
00:00:31.800 --> 00:00:35.280
properties file. So the properties file
is going to be in a resources folder and
7

8
00:00:35.280 --> 00:00:39.600
we're going to tell Spring to look on
the class path to bring that in and then
8

9
00:00:39.600 --> 00:00:44.760
wire up those properties using a Spring
expression and the @Value annotation.
9

10
00:00:44.760 --> 00:00:48.840
We'll get our properties loaded up and this  is just an example. I'm using a
10

11
00:00:48.840 --> 00:00:51.890
fake data source bean just to give us
something realistic to work with here.
11

12
00:00:51.890 --> 00:00:56.039
Alright in this example we're going to
take a look at using external properties
12

13
00:00:56.039 --> 00:01:00.809
and specifically using the property
source method to get a hold of values
13

14
00:01:00.809 --> 00:01:05.189
outside from a properties file. So what
we want to do is, the first thing I'm
14

15
00:01:05.189 --> 00:01:07.710
going to come in here is going to get
rid of some of these system out
15

16
00:01:07.710 --> 00:01:12.330
statements that we've been using for
previous lessons, delete that. So we're
16

17
00:01:12.330 --> 00:01:17.549
not going to have that chatter from them
anymore and I'm going to create a new
17

18
00:01:17.549 --> 00:01:25.860
property file. So I'm just going to come
in here, New File. So I'm calling it 
18

19
00:01:25.860 --> 00:01:32.729
datasource.properties and I'm going to
use this to create some fake, like a fake
19

20
00:01:32.729 --> 00:01:36.689
data source, just something realistic
that we can work with and set up an
20

21
00:01:36.689 --> 00:01:41.070
example of like we're wiring up a MySQL
data source. Just trying to mimic
21

22
00:01:41.070 --> 00:01:47.720
something realistic here. So I'm doing
guru and we'll call it username and
22

23
00:01:47.720 --> 00:01:52.009
let's do guru.password
23

24
00:01:54.130 --> 00:02:02.409
and we'll give it a url. So the strings
really don't matter. I just want to have
24

25
00:02:02.409 --> 00:02:07.780
something wiring in there. So we have
John, somepass and just a random string
25

26
00:02:07.780 --> 00:02:14.650
for our mock data url. Now I've
created a Bean ahead of time. So it's a
26

27
00:02:14.650 --> 00:02:20.620
fake data, it's got user, password and a
url and then just getters and setters. So
27

28
00:02:20.620 --> 00:02:24.340
nothing, just a plain old POJO that we're
going to be using for our examples here.
28

29
00:02:24.340 --> 00:02:30.670
So to get everything wired up and to be
loading this from property sources, we
29

30
00:02:30.670 --> 00:02:34.180
need to add in a little Java
configuration. I'm going to create a new
30

31
00:02:34.180 --> 00:02:43.030
configuration class and I'm just calling
it PropertyConfig. Add that in to Git. So
31

32
00:02:43.030 --> 00:02:48.060
you guys have this as a working
example and of course I'm going to do a
32

33
00:02:48.060 --> 00:02:53.920
Configuration for that and the first
thing that we need to do is come in and
33

34
00:02:53.920 --> 00:03:00.120
we want to add in a new bean for the
PropertySourcesPlaceholderConfigure.
34

35
00:03:05.920 --> 00:03:11.890
And what we're going to do is add in a
configuration here for it.
35

36
00:03:18.970 --> 00:03:23.360
So that just returns a
simple Bean for us and of course
36

37
00:03:23.360 --> 00:03:29.330
we want to annotate this with the Bean annotation. Now that's the easy part
37

38
00:03:29.330 --> 00:03:34.610
and this is what's going to allow us to
wire up by value. So we want to add in
38

39
00:03:34.610 --> 00:03:45.830
some properties now. So this is going to
match our three properties from our Bean
39

40
00:03:45.830 --> 00:03:56.390
and we're going to use the @Value
annotation and the @Value is, when we
40

41
00:03:56.390 --> 00:04:00.500
use the @Value, the property sources
placeholder configure that's going to be
41

42
00:04:00.500 --> 00:04:07.270
matching up the values for us. So that
Bean that we created below is important
42

43
00:04:07.270 --> 00:04:12.800
and I made a mistake here. It's actually
going to be a Spring expression language
43

44
00:04:12.800 --> 00:04:19.850
here. So I need to do a dollar signs
quickly. So this is going to have that,
44

45
00:04:19.850 --> 00:04:24.770
get evaluated as an expression and we're
going to go into the Spring Context and
45

46
00:04:24.770 --> 00:04:45.950
get that value out of the context as an
externalised property. So now, this is
46

47
00:04:45.950 --> 00:04:51.020
all going to get wired up by that. I'm
going to double check, make sure that we
47

48
00:04:51.020 --> 00:04:58.370
have dburl, username, password. Just
double checking my property names. That
48

49
00:04:58.370 --> 00:05:07.450
looks correct and now we want to also
return back a Bean for that.
49

50
00:05:32.330 --> 00:05:37.550
S0 this just goes through and
sets up the properties on our FakeDataSource
50

51
00:05:37.550 --> 00:05:41.720
Bean and what's happening here
is we're asking the configuration to use
51

52
00:05:41.720 --> 00:05:45.710
a Spring expression language statement
to get that value from the externalised
52

53
00:05:45.710 --> 00:05:50.540
properties. Now the last thing that we
need to do is indicate that we want that
53

54
00:05:50.540 --> 00:05:55.880
datasource.properties file to be used. So I'm going to go ahead and add in one
54

55
00:05:55.880 --> 00:06:08.450
more annotation. Let me see that the
IntelliJ intellisense brought it up. Now
55

56
00:06:08.450 --> 00:06:13.990
just to recap what's going on here
is we have on line 13, @Configuration
56

57
00:06:13.990 --> 00:06:17.810
annotation. We'll bring in the PropertySource annotation saying that we want to
57

58
00:06:17.810 --> 00:06:24.020
use the set of properties and it's going
to look inside of that datasource.properties
58

59
00:06:24.020 --> 00:06:29.090
file to resolve these string values. So we'll get user, password
59

60
00:06:29.090 --> 00:06:34.520
and url out of our properties file and
then you want to return back this Bean.
60

61
00:06:34.520 --> 00:06:39.380
Almost made a mistake there. Because we do want to annotate that as a Bean to
61

62
00:06:39.380 --> 00:06:44.810
return back our FakeDataSource, so
let's go ahead and get a handle on that.
62

63
00:06:44.810 --> 00:06:49.100
That's all the configuration there and
just as a reminder the 
63

64
00:06:49.100 --> 00:06:53.180
PropertySourcePlaceholderConfigure, that is what it's
going to be reading the file for us. So
64

65
00:06:53.180 --> 00:06:58.280
that goes out and we'll scan for
property files and enable us to use the
65

66
00:06:58.280 --> 00:07:15.350
Value annotation like we are. Now you can
see I'm using a different technique
66

67
00:07:15.350 --> 00:07:19.400
there on line 20. I'm using the context
getBean but now I'm passing it into the
67

68
00:07:19.400 --> 00:07:24.110
class. So it's going to get a type of
that Bean. So I'm going to do a little
68

69
00:07:24.110 --> 00:07:30.740
system out here and just ask it for the
username and let's go ahead and run this
69

70
00:07:30.740 --> 00:07:32.640
and see if we got everything working
correctly.
70

71
00:07:36.600 --> 00:07:37.700
And we did run into an
71

72
00:07:37.770 --> 00:07:43.800
error there. So it's saying, Could not
resolve a placeholder and I
72

73
00:07:43.800 --> 00:07:49.280
have user not username. So let's go
ahead and fix that.
73

74
00:07:49.909 --> 00:07:55.319
Here's a mistake to make. See if we can run
this now and you can see that Spring
74

75
00:07:55.319 --> 00:07:58.560
created an error there because it wasn't
able to find that property. So if you
75

76
00:07:58.560 --> 00:08:02.729
call for a property that Spring is
expecting but doesn't find it, that context
76

77
00:08:02.729 --> 00:08:07.889
is going to fail to start. So we did get
the proper output there and everything
77

78
00:08:07.889 --> 00:08:11.069
is working nicely. So we can do
additional outputs on the password and
78

79
00:08:11.069 --> 00:08:15.360
url but I'm pretty sure that those got set up fine. Alright you saw how easy it
79

80
00:08:15.360 --> 00:08:19.380
was to externalise properties to dot
properties file. A couple steps that you do
80

81
00:08:19.380 --> 00:08:23.130
have to go through there, one is create
the configuration, do the Value
81

82
00:08:23.130 --> 00:08:26.819
annotations and then the property source
to figure bean. We need to get that on the
82

83
00:08:26.819 --> 00:08:31.800
class path as well to get that created into
the Spring Context. So Spring will wire
83

84
00:08:31.800 --> 00:08:36.770
that up for us and give us those
external properties.
