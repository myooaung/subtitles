WEBVTT
0
1
00:00:05.250 --> 00:00:10.350
So remember I was talking about the object model and the relational model having a little leakage coming
1

2
00:00:10.350 --> 00:00:10.780
up.
2

3
00:00:10.800 --> 00:00:15.300
So one of the things that we need to do because we have a little bit of leakage here is implement an
3

4
00:00:15.330 --> 00:00:16.950
equals and hash code method.
4

5
00:00:16.950 --> 00:00:23.550
So this kind of important because these standard equals and hash code methods that we get by default
5

6
00:00:23.610 --> 00:00:27.720
with Java or Java objects isn't going to suffice for our needs.
6

7
00:00:27.720 --> 00:00:35.190
What we want to do is base equality on the ID of the objects. So that ID property that we added,
7

8
00:00:35.580 --> 00:00:39.110
that effectively identifies it to a database record.
8

9
00:00:39.120 --> 00:00:47.100
So we want to go in and modify these methods or actually overwrite the methods to provide logic around
9

10
00:00:47.100 --> 00:00:53.700
the ID property so that if two objects have the same ID, Hibernate and things like sets are going
10

11
00:00:53.700 --> 00:00:55.750
to consider them the same object.
11

12
00:00:55.800 --> 00:01:00.870
So I'm going to jump over to IntelliJ and show you how easy it is to implement these methods inside
12

13
00:01:00.870 --> 00:01:01.610
of IntelliJ.
13

14
00:01:01.620 --> 00:01:07.860
If you're not using IntelliJ, I don't know how other IDEs behave. I'm sure there's a calling for something
14

15
00:01:07.860 --> 00:01:09.110
like Eclipse.
15

16
00:01:09.210 --> 00:01:14.700
Worst case, look at the source code that I am implementing here for these methods and just duplicate
16

17
00:01:14.700 --> 00:01:15.290
that.
17

18
00:01:15.330 --> 00:01:17.370
Go ahead and implement the equals method here.
18

19
00:01:17.400 --> 00:01:24.110
So I'm gonna grab the author class and scroll down to the bottom of the class. I'm going to use IntelliJ to
19

20
00:01:24.680 --> 00:01:33.000
do the initial implementation so I'm just going to command N. You can see the equals and hash code method
20

21
00:01:33.010 --> 00:01:40.120
towards the bottom of the screen. I'm going to... IntelliJ  actually has several different
21

22
00:01:40.120 --> 00:01:47.340
templates and I'm just going to go in and take the default, not select any of the options here.
22

23
00:01:47.350 --> 00:01:54.310
So that's gonna be just fine for our purposes. And I just want to do this.
23

24
00:01:54.340 --> 00:01:59.950
So just do the ID field and I'm not going to do the other properties because again we're going to
24

25
00:01:59.950 --> 00:02:07.370
be setting that up for the ID property. A determined object equality. And then we're just going to do
25

26
00:02:07.370 --> 00:02:08.940
the same for the hash code.
26

27
00:02:09.080 --> 00:02:10.040
Say next.
27

28
00:02:11.730 --> 00:02:14.900
And that is not a non null field because that could be in
28

29
00:02:15.160 --> 00:02:15.550
a Null.
29

30
00:02:15.880 --> 00:02:22.680
And I will say finish. And we can see that sets up the equals and hash code function so that sets that
30

31
00:02:22.680 --> 00:02:25.700
up for the author class.
31

32
00:02:25.720 --> 00:02:28.680
So now let's come in here and do the same for the book class.
32

33
00:02:32.840 --> 00:02:39.520
And just command N, equals and hash code, IntelliJ a default. Next.
33

34
00:02:39.540 --> 00:02:44.580
And I just want the ID property like so. Say Next.
34

35
00:02:44.600 --> 00:02:45.380
Next for that.
35

36
00:02:48.290 --> 00:02:54.500
Finish that. And now we can see that the equals and hash code functions have been implemented which
36

37
00:02:54.500 --> 00:02:59.470
is exactly what we need for our use case here with Hibernate.
37

38
00:02:59.470 --> 00:03:03.460
Now one other thing I want to show you how to do is implemented toString method.
38

39
00:03:03.460 --> 00:03:06.970
Now by default we do have a toString method on it.
39

40
00:03:06.970 --> 00:03:12.760
And if memory serves me right we're just going to get the class and object I.D. which is for debugging
40

41
00:03:12.760 --> 00:03:14.950
purposes. Pretty much useless.
41

42
00:03:15.220 --> 00:03:17.500
So it doesn't give you all that much information.
42

43
00:03:17.500 --> 00:03:22.030
What we're going to do here is I'm going to show you how IntelliJ will implement a toString method
43

44
00:03:22.030 --> 00:03:25.120
for us that will display the properties of the object.
44

45
00:03:25.150 --> 00:03:27.580
So it does nice job for this.
45

46
00:03:27.580 --> 00:03:34.360
And then if we do need to do toString on one of these objects, we'll actually have useful information
46

47
00:03:34.480 --> 00:03:40.070
in our logger council. So this is a nice little tips and tricks that I like to use with IntelliJ.
47

48
00:03:40.120 --> 00:03:43.540
I imagine Eclipse probably does have something similar to this. I'm really not sure.
48

49
00:03:43.550 --> 00:03:48.460
Been a long time since I used Eclipse. But let me jump over to IntelliJ now and show you how easy
49

50
00:03:48.460 --> 00:03:53.500
it is to implement a toString method that is actually functional.
50

51
00:03:53.550 --> 00:03:57.470
Let's go ahead and implement that toString method. You can see here.
51

52
00:03:57.540 --> 00:04:04.680
I've got the author up. I'm going to put this above the equals method. And again I'm just going to take command
52

53
00:04:04.760 --> 00:04:11.850
N. Again this is on a Mac. I want to come down here and say toString and I'm just saying enter and
53

54
00:04:11.850 --> 00:04:14.800
you can see I'm just going to take all the properties there.
54

55
00:04:14.830 --> 00:04:21.360
Now if I was doing a project there that was something sensitive like a password or a bank account information
55

56
00:04:21.390 --> 00:04:23.060
I could diselect that pretty easily here.
56

57
00:04:23.070 --> 00:04:25.950
But here this is just demonstration.
57

58
00:04:25.950 --> 00:04:30.730
We'll go ahead and say select all there and say OK.
58

59
00:04:31.020 --> 00:04:38.040
And here we can see that we are getting this toString method implemented and we'll get a Jason like
59

60
00:04:39.030 --> 00:04:43.380
output for the values for the author.
60

61
00:04:43.380 --> 00:04:49.180
Now let's go ahead and do the same thing for the book implementation. We'll come over here.
61

62
00:04:49.350 --> 00:04:51.370
That's just command N.
62

63
00:04:52.170 --> 00:04:56.550
We're going to come down to toString and implement it like that.
63

64
00:04:56.580 --> 00:05:03.060
So now we have a nice functional toString method that will show us the properties of the object if
64

65
00:05:03.060 --> 00:05:04.020
we have to do a toString on it.
