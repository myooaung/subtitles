WEBVTT
0
1
00:00:00.550 --> 00:00:03.550
(soft guitar music)
1

2
00:00:04.737 --> 00:00:06.502
Now in this video we are going to
2

3
00:00:06.502 --> 00:00:09.900
introduce you to something called Router function.
3

4
00:00:09.900 --> 00:00:11.920
So this is a new functional programming paradigm
4

5
00:00:11.920 --> 00:00:14.162
that's available inside of Spring 5.
5

6
00:00:14.162 --> 00:00:16.313
It's primarily gained toward microservices
6

7
00:00:16.313 --> 00:00:19.015
and providing RESTful endpoints,
7

8
00:00:19.015 --> 00:00:21.681
and what we wanna do in this video,
8

9
00:00:21.681 --> 00:00:23.564
we just wanna get our feet wet with it,
9

10
00:00:23.564 --> 00:00:25.564
get an idea of using it.
10

11
00:00:26.418 --> 00:00:29.205
And I am going to expose a JSON response
11

12
00:00:29.205 --> 00:00:32.076
for listing out the recipes.
12

13
00:00:32.076 --> 00:00:33.884
So pretty simple thing.
13

14
00:00:33.884 --> 00:00:36.793
And let's go ahead and configure this now,
14

15
00:00:36.793 --> 00:00:38.398
I'm gonna live code it because it's really
15

16
00:00:38.398 --> 00:00:40.888
not that much code, it's like crazy simple to
16

17
00:00:40.888 --> 00:00:42.647
stand up a rest endpoint.
17

18
00:00:42.647 --> 00:00:46.063
So I'm gonna create a New Package.
18

19
00:00:46.063 --> 00:00:47.313
Call it config.
19

20
00:00:49.087 --> 00:00:53.855
And let's go ahead and, let's call this WebConfig.
20

21
00:00:53.855 --> 00:00:55.068
Going to add that into Git.
21

22
00:00:55.068 --> 00:00:57.237
And this does need to be at configuration class
22

23
00:00:57.237 --> 00:00:58.711
and just by convention I usually like
23

24
00:00:58.711 --> 00:01:01.684
to put my configuration classes in a config folder
24

25
00:01:01.684 --> 00:01:03.256
or a config package.
25

26
00:01:03.256 --> 00:01:06.166
You don't have to do this but it is my
26

27
00:01:06.166 --> 00:01:08.130
personal preference.
27

28
00:01:08.130 --> 00:01:11.402
Now i know it is kind of my go-to spot
28

29
00:01:11.402 --> 00:01:14.139
for looking for configuration classes.
29

30
00:01:14.139 --> 00:01:18.139
So we are going to create a new RouterFunction.
30

31
00:01:19.491 --> 00:01:20.908
Going to say routes.
31

32
00:01:21.806 --> 00:01:23.269
And let's go ahead and do this.
32

33
00:01:23.269 --> 00:01:25.519
What we wanna do is return.
33

34
00:01:28.204 --> 00:01:30.979
We're gonna build a route.
34

35
00:01:30.979 --> 00:01:33.482
And let's do GET, we're gonna have to do
35

36
00:01:33.482 --> 00:01:35.667
a static import here.
36

37
00:01:35.667 --> 00:01:37.781
And we are going to do, let's call it
37

38
00:01:37.781 --> 00:01:39.698
api/recipes.
38

39
00:01:41.724 --> 00:01:44.033
So we'll do a GET function on that
39

40
00:01:44.033 --> 00:01:46.413
and we're gonna come over here
40

41
00:01:46.413 --> 00:01:48.681
IntelliJ highlighting that in red.
41

42
00:01:48.681 --> 00:01:50.728
So I'm gonna do an alt enter on that
42

43
00:01:50.728 --> 00:01:53.012
and we wanna import the static method here
43

44
00:01:53.012 --> 00:01:57.179
so this is going to be from the web reactive package.
44

45
00:01:58.021 --> 00:01:59.771
So now that is happy.
45

46
00:02:00.989 --> 00:02:02.656
We wanna do a comma.
46

47
00:02:06.733 --> 00:02:10.874
We're gonna pass in a serverRequest, ServerResponse.
47

48
00:02:10.874 --> 00:02:12.707
And we want to say .ok.
48

49
00:02:15.306 --> 00:02:17.889
Going to tab that in a little bit.
49

50
00:02:19.836 --> 00:02:23.086
And this is a functional paradigm here.
50

51
00:02:24.745 --> 00:02:28.328
contentType, we want to do APPLICATION_JSON.
51

52
00:02:31.988 --> 00:02:34.849
And we are going to return a body.
52

53
00:02:34.849 --> 00:02:38.635
So see how it takes in a publisher and a class.
53

54
00:02:38.635 --> 00:02:41.959
And what we wanna do is we wanna pass in this,
54

55
00:02:41.959 --> 00:02:45.717
take in our recipeService.
55

56
00:02:45.717 --> 00:02:49.336
And by marking this as a @Bean, this now becomes
56

57
00:02:49.336 --> 00:02:51.844
a Spring managed component.
57

58
00:02:51.844 --> 00:02:53.686
And we will get an instance of the
58

59
00:02:53.686 --> 00:02:56.905
RecipeService injected for us.
59

60
00:02:56.905 --> 00:02:59.155
And we can say getRecipes().
60

61
00:03:03.536 --> 00:03:06.886
Then finally we can say, let's see here
61

62
00:03:06.886 --> 00:03:09.286
I've got one little mistake.
62

63
00:03:09.286 --> 00:03:10.953
That's closing that.
63

64
00:03:15.801 --> 00:03:17.526
Cut something off here, the syntax gets
64

65
00:03:17.526 --> 00:03:21.693
a little funny to work with if you're not used to it.
65

66
00:03:28.414 --> 00:03:31.665
Had one param off there, so now what this is
66

67
00:03:31.665 --> 00:03:34.588
setting up is called a RouterFunction,
67

68
00:03:34.588 --> 00:03:36.702
and now that I have it all complete
68

69
00:03:36.702 --> 00:03:40.602
you can see I am saying route GET or the HTTP method GET,
69

70
00:03:40.602 --> 00:03:43.408
so when I go to api/recipes we are gonna
70

71
00:03:43.408 --> 00:03:47.339
provide a ServerResponse with an ok status,
71

72
00:03:47.339 --> 00:03:49.707
contentType with APPLICATION_JSON
72

73
00:03:49.707 --> 00:03:52.477
and we are gonna call out to the recipeService
73

74
00:03:52.477 --> 00:03:54.501
and get a Flux of the recipes
74

75
00:03:54.501 --> 00:03:56.348
and we're gonna pass back, we are saying
75

76
00:03:56.348 --> 00:03:59.906
that it's a type of Recipe class.
76

77
00:03:59.906 --> 00:04:03.604
And now let's go ahead and start this up.
77

78
00:04:03.604 --> 00:04:05.354
And we will run this.
78

79
00:04:09.105 --> 00:04:10.351
Okay so we are up and running,
79

80
00:04:10.351 --> 00:04:14.518
let's toggle over to Chrome, add the api/recipes here.
80

81
00:04:16.581 --> 00:04:19.164
Make sure I spelled that right.
81

82
00:04:25.547 --> 00:04:29.050
I see the mistake I made, need a slash here.
82

83
00:04:29.050 --> 00:04:31.967
So let's go ahead and restart this.
83

84
00:04:34.558 --> 00:04:36.299
Now this mapping should work out a little bit better.
84

85
00:04:36.299 --> 00:04:38.145
Let's go ahead and do a refresh.
85

86
00:04:38.145 --> 00:04:39.680
Now there's the recipes.
86

87
00:04:39.680 --> 00:04:41.766
And this is actually kind of ugly on the eye.
87

88
00:04:41.766 --> 00:04:43.263
I'm gonna show you a little trick here
88

89
00:04:43.263 --> 00:04:44.532
that we can use.
89

90
00:04:44.532 --> 00:04:46.831
And this is just to make it a little bit
90

91
00:04:46.831 --> 00:04:49.273
more pleasant for you, you can come in here
91

92
00:04:49.273 --> 00:04:51.619
and you can do a spring.jackson.serialization.indent_output=true,
92

93
00:04:51.619 --> 00:04:54.099
that essentially gives us
93

94
00:04:54.099 --> 00:04:57.900
a pretty print for the Jackson output.
94

95
00:04:57.900 --> 00:05:01.835
So let's go, we need to do a quick restart here.
95

96
00:05:01.835 --> 00:05:04.252
Get this back up and running.
96

97
00:05:05.157 --> 00:05:08.021
There we are, let's go ahead and refresh this now.
97

98
00:05:08.021 --> 00:05:11.061
Now we can see that our JSON is nicely indented
98

99
00:05:11.061 --> 00:05:12.905
and a lot more legible than it is
99

100
00:05:12.905 --> 00:05:15.739
when it's all gathered together.
100

101
00:05:15.739 --> 00:05:18.630
Just to recap that, we added in a new
101

102
00:05:18.630 --> 00:05:21.485
Configuration bean that's returning back
102

103
00:05:21.485 --> 00:05:23.328
a RouterFunction that gets it into the
103

104
00:05:23.328 --> 00:05:26.576
reactive, the WebFlux context as a route.
104

105
00:05:26.576 --> 00:05:28.765
And basically we're saying whenever we do
105

106
00:05:28.765 --> 00:05:31.607
a GET against api/recipes we are going to
106

107
00:05:31.607 --> 00:05:35.005
manage a ServerResponse with an ok status,
107

108
00:05:35.005 --> 00:05:37.657
contentType of APPLICATION_JSON.
108

109
00:05:37.657 --> 00:05:39.834
And for the body we are going to call out
109

110
00:05:39.834 --> 00:05:43.276
to the recipeService and get a Flux of recipes.
110

111
00:05:43.276 --> 00:05:45.680
And we also have to tell the body function
111

112
00:05:45.680 --> 00:05:49.043
that we are sending it the class recipes.
112

113
00:05:49.043 --> 00:05:51.481
And then it's going to go ahead and render that.
113

114
00:05:51.481 --> 00:05:52.850
So this is just a little preview,
114

115
00:05:52.850 --> 00:05:55.827
we will be using this more in the course going forward.
115

116
00:05:55.827 --> 00:05:59.319
But this is specific to the Spring WebFlux stuff.
116

117
00:05:59.319 --> 00:06:02.160
And the WebFlux stuff is really, really slick.
117

118
00:06:02.160 --> 00:06:03.915
So you can see how quickly you can
118

119
00:06:03.915 --> 00:06:05.836
spool up a very simple microservice
119

120
00:06:05.836 --> 00:06:08.409
using this functional programming paradigm
120

121
00:06:08.409 --> 00:06:12.576
that is now available inside of Spring Framework 5.
