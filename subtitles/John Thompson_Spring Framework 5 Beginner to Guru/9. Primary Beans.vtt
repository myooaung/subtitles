WEBVTT
0
1
00:00:05.260 --> 00:00:10.720
So through the use of qualifiers you can see how we can have a lot of control over how the Spring Framework
1

2
00:00:11.080 --> 00:00:16.050
will select one bean over a different bean for Dependency Injection scenario.
2

3
00:00:16.060 --> 00:00:20.510
Now there is another way that we can control this and this is with the Primary Bean annotation.
3

4
00:00:20.510 --> 00:00:27.370
So this is where we could have one or more beans of the same type and we want it. We just want to say
4

5
00:00:27.400 --> 00:00:33.340
well when in doubt just go ahead and use this one as the primary bean. So you can have so several beans
5

6
00:00:33.340 --> 00:00:39.850
of the same type as we do now and we can designate one of them as a primary and then the candidates
6

7
00:00:39.850 --> 00:00:44.550
for that, that are having their dependency injected into them.
7

8
00:00:44.590 --> 00:00:49.840
We don't need to do anything special there because if we have multiple and one of them is primary and
8

9
00:00:49.840 --> 00:00:55.750
the others are not, then the Spring Framework will say basically when in doubt use this one that
9

10
00:00:55.750 --> 00:00:57.160
is marked as the primary.
10

11
00:00:57.190 --> 00:01:02.260
If you have not done anything as a qualifier on the candidate object that is having that dependency
11

12
00:01:02.260 --> 00:01:03.420
injected into it.
12

13
00:01:03.460 --> 00:01:09.520
So now I'm gonna jump over to IntelliJ and show you an example of this in action. We'll wire up a little
13

14
00:01:09.520 --> 00:01:11.490
primary bean example for you to see.
14

15
00:01:12.210 --> 00:01:12.470
OK.
15

16
00:01:12.550 --> 00:01:16.970
What we'll do is let's go ahead and set up a primary greeting service.
16

17
00:01:17.000 --> 00:01:20.350
So when I come under here service and we'll create a new class
17

18
00:01:24.240 --> 00:01:30.950
so it just say primary greeting service. We'll add that in. This is going to implement the greeting service.
18

19
00:01:33.590 --> 00:01:40.480
We'll implement that method and let's return back hello world.
19

20
00:01:43.350 --> 00:01:49.450
so I'm gonna say hello world from the primary bean and of course I want this to be a service.
20

21
00:01:49.560 --> 00:01:54.390
And now what we'll do is we'll say that this is primary like so.
21

22
00:01:54.420 --> 00:02:01.320
So that sets that up as the primary bean. The qualifier will take precedence over primary. But when
22

23
00:02:01.320 --> 00:02:07.260
there isn't any situation where there is no qualifier, this is the situation that we want to control
23

24
00:02:07.260 --> 00:02:07.850
for.
24

25
00:02:08.010 --> 00:02:13.760
So let's go ahead and refactor my controller, the original controller that we are working with. 
25

26
00:02:13.930 --> 00:02:16.170
Let's refactor him to actually use that.
26

27
00:02:16.170 --> 00:02:23.010
So follow the best practice so we'll do private final greeting service.
27

28
00:02:23.170 --> 00:02:24.940
We'll set up a greeting service like this.
28

29
00:02:27.920 --> 00:02:30.030
We'll add in a constructor.
29

30
00:02:30.030 --> 00:02:35.490
And remember we don't need to have the autowire there. Let's get rid of the system out.
30

31
00:02:36.330 --> 00:02:43.520
Output and we'll set this up to use the greeting service provide the greeting the greeting service that
31

32
00:02:43.520 --> 00:02:52.030
gets injected into this. So that refactors that. Let's come in here to the application. We'll get rid of
32

33
00:02:52.120 --> 00:03:04.650
this but we'll take this original one and we'll say my controller say a hello. We'll do a system out
33

34
00:03:09.270 --> 00:03:16.070
and we'll say the primary bean there. Now let's go ahead and run the application and we should see that
34

35
00:03:16.070 --> 00:03:21.890
my controller gets wired up because that is the primary bean. We'll see the primary bean output.
35

36
00:03:21.920 --> 00:03:27.270
So now you can see the primary bean. We are in fact getting the hello world from the primary bean.
36

37
00:03:27.380 --> 00:03:35.390
So just to quickly recap what what we did in this. We provided another instance of the greeting service
37

38
00:03:35.770 --> 00:03:40.490
that implements the greeting service interface, annotated it as a Spring service so that brings that
38

39
00:03:40.490 --> 00:03:44.150
up as a Spring component and then we marked it as primary.
39

40
00:03:44.150 --> 00:03:49.790
Now in my controller you can see that we've just added in the property for the greeting service. Added
40

41
00:03:49.790 --> 00:03:50.960
on the constructor.
41

42
00:03:51.080 --> 00:03:56.120
No need for the autowire and also no need for the qualifier.
42

43
00:03:56.120 --> 00:04:01.490
So remember on the constructor injected controller we added in this qualifier.
43

44
00:04:01.530 --> 00:04:08.930
Now if I take this away I delete that and I run this again you'll see that we'll get the primary bean
44

45
00:04:09.050 --> 00:04:14.230
injected into the constructor injected controller as well.
45

46
00:04:14.260 --> 00:04:18.940
So now you can see that now once again in the primary bean but  I don't want to do that.
46

47
00:04:18.940 --> 00:04:24.710
I'm going to just hit control Z and undo that and leave that in there.
47

48
00:04:24.750 --> 00:04:31.650
So that's some that you can experiment with if you want to see how primary and qualifier can work together
48

49
00:04:32.040 --> 00:04:37.230
in controlling how classes get injected into your Spring managed components.
