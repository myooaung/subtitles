WEBVTT
0
1
00:00:02.170 --> 00:00:06.550
Okay in this video I'm going to go
through a code review of a Spring Boot
1

2
00:00:06.550 --> 00:00:11.980
application I've written for Postgress
the Postgress database, and I have it up
2

3
00:00:11.980 --> 00:00:16.420
on GitHub and you can see on my screen
I'm at the project repository on
3

4
00:00:16.420 --> 00:00:21.640
GitHub. So if you go to my ID on
GitHub which is springframeworkguru
4

5
00:00:21.640 --> 00:00:30.489
and the repository is /spring-boot-postgress-example and you'll
5

6
00:00:30.489 --> 00:00:34.719
get the complete source code for
what I'm about to show you here so I'm
6

7
00:00:34.719 --> 00:00:39.579
going to switch over to IntelliJ where I
have the project up and step you through
7

8
00:00:39.579 --> 00:00:45.489
this little Spring Boot application I've
written for Postgress. Now the first thing
8

9
00:00:45.489 --> 00:00:50.170
that we see, we're going to take a look
at the JPA class and this is a typical JPA
9

10
00:00:50.170 --> 00:00:55.870
mapping and I've set up an id,
description, price and an imageUrl so
10

11
00:00:55.870 --> 00:01:01.539
just a sample product. So a basic POJO no
big mystery here if you're familiar with
11

12
00:01:01.539 --> 00:01:06.130
JPA, did the mapping we're doing
GenerationType of IDENTITY for this so
12

13
00:01:06.130 --> 00:01:12.360
auto generation now the next thing I
want to take a look at is the repository
13

14
00:01:12.360 --> 00:01:18.159
now I've set up a ProductRepository and this extends out the Crud
14

15
00:01:18.159 --> 00:01:23.280
Repository from Spring Data JPA. Now if
you're not familiar with Spring Data JPA,
15

16
00:01:23.280 --> 00:01:28.710
Spring Data JPA will provide an
implementation of this interface for us
16

17
00:01:28.710 --> 00:01:34.060
so then it will implement the repository
pattern and what we're going to do is
17

18
00:01:34.060 --> 00:01:38.710
leverage this so we don't have to do
much with as far as working with Entity
18

19
00:01:38.710 --> 00:01:42.100
Manager and whatnot that will all be
managed by Spring Data JPA, it's actually
19

20
00:01:42.100 --> 00:01:48.570
a really nice project from the folks
over at Spring. Now I like to use a
20

21
00:01:48.570 --> 00:01:53.380
service and the service is going to get
injected into the controller so this
21

22
00:01:53.380 --> 00:01:58.990
will obscure the repository pattern from
the controller and allow us to do
22

23
00:01:58.990 --> 00:02:03.240
anything that we need to do between the
controller and the Spring Data
23

24
00:02:03.240 --> 00:02:07.960
repository. Now you could do this inside
the controller not something that I like
24

25
00:02:07.960 --> 00:02:11.769
to do, like to keep all the business
logic and a service layer and keep my
25

26
00:02:11.769 --> 00:02:15.520
controllers fairly light. Now this is my
implementation of the
26

27
00:02:15.520 --> 00:02:21.460
service and we can see that up on line
16 there, I've annotated the class as a
27

28
00:02:21.460 --> 00:02:26.620
Service so when Spring Boot does its
components scan it will go through and
28

29
00:02:26.620 --> 00:02:32.710
wire up this class and now this
class does have two dependencies, one as
29

30
00:02:32.710 --> 00:02:37.840
the ProductRepository with which we
just looked at, the next is ProductForm
30

31
00:02:37.840 --> 00:02:43.360
ToProduct and that as a converter class
so I'm following a command object design
31

32
00:02:43.360 --> 00:02:49.390
pattern here and I'm binding the form
properties to an object called Product
32

33
00:02:49.390 --> 00:02:56.410
Form and this ProductFormToProduct as
a converter to switch it over to the
33

34
00:02:56.410 --> 00:03:02.350
JPA class of Product. Now you can see my
implementations for CRUD operations here
34

35
00:03:02.350 --> 00:03:06.370
I have a listAll, that would give us all of them, I get
35

36
00:03:06.370 --> 00:03:12.760
ById, to pass an ID value, saveOrUpdate
and which will do exactly what is says, save
36

37
00:03:12.760 --> 00:03:21.040
the object and then delete option
and then I also have one on line 54, a
37

38
00:03:21.040 --> 00:03:26.380
saveOrUpdate from the ProductForm where
we will convert it over from the Product
38

39
00:03:26.380 --> 00:03:30.910
Form. So just a little helper method
there so let's take a look at the
39

40
00:03:30.910 --> 00:03:40.030
controller and here's the ProductController and you can see there on line
40

41
00:03:40.030 --> 00:03:48.640
27 I am auto wiring in the ProductForm
and that is the converter and also
41

42
00:03:48.640 --> 00:03:53.500
on line 32,
I am auto wiring in the ProductService
42

43
00:03:53.500 --> 00:03:59.980
so I am using setter based dependency
injection there. And line 36 we can see
43

44
00:03:59.980 --> 00:04:05.650
that I am doing a RequestMapping of the
root directory and I just simply
44

45
00:04:05.650 --> 00:04:10.959
redirect that over to the product/list
and so when we go to the root of the web
45

46
00:04:10.959 --> 00:04:15.250
application we'll get redirected to a
list and you can see I've got other
46

47
00:04:15.250 --> 00:04:22.419
options there for show edit creating a
new product and then down there on
47

48
00:04:22.419 --> 00:04:26.270
line 68 is where I will take in the
saveOrUpdate from the form
48

49
00:04:26.270 --> 00:04:31.220
and then finally on line 18 I've got a
mapping to go in and delete a product
49

50
00:04:31.220 --> 00:04:37.639
and all these here correlate to Thymeleaf templates which are in the template
50

51
00:04:37.639 --> 00:04:43.069
directory so quickly take a look at the
list and here's the Thymeleaf
51

52
00:04:43.069 --> 00:04:48.530
template for the list operation. We have
other templates out there for Product
52

53
00:04:48.530 --> 00:04:53.180
Form and show and if you're new to Thymeleaf I do have a complete course on
53

54
00:04:53.180 --> 00:04:56.990
Thymeleaf called mastering Thymeleaf. Be sure to check that out if you want to
54

55
00:04:56.990 --> 00:05:00.650
learn more about Thymeleaf and let's
take a quick look at application.
55

56
00:05:00.650 --> 00:05:05.330
properties and this is where we're going
to get into some important stuff line 5
56

57
00:05:05.330 --> 00:05:10.190
is the data source URL and this is
what's going to tell JDBC where to find
57

58
00:05:10.190 --> 00:05:14.930
the database at so I am saying for
Postgress that I want to go to localhost
58

59
00:05:14.930 --> 00:05:21.259
port 5432 which is the default port
for Postgress and then to the database
59

60
00:05:21.259 --> 00:05:26.360
springbootdb and as that's important
to have your database map there so
60

61
00:05:26.360 --> 00:05:29.870
you're going to change those based on
whatever database you are connecting to
61

62
00:05:29.870 --> 00:05:36.169
and in my case i have a username of postgress, postgress@123 for the
62

63
00:05:36.169 --> 00:05:40.250
password and those two values of course
you are going to be setting to your
63

64
00:05:40.250 --> 00:05:47.270
specific values. Now on line 8 there's
the Postgress driver we need to set that
64

65
00:05:47.270 --> 00:05:53.500
as well and 10 and 11 these are things
to keep the data source alive
65

66
00:05:53.500 --> 00:05:57.560
so if you have an application and not
doing a lot of activity to the database
66

67
00:05:57.560 --> 00:06:03.710
your connection can get smacked down and
what this does is go out and do a select
67

68
00:06:03.710 --> 00:06:08.840
from the database to keep that socket
connection up and alive and a handy
68

69
00:06:08.840 --> 00:06:14.900
thing that we can do here on line 16 is
to show the SQL so we can get to see the
69

70
00:06:14.900 --> 00:06:21.830
SQL logged out to the console and this
is handy for our debugging. Line 19 for
70

71
00:06:21.830 --> 00:06:26.300
Hibernate we are doing a create-drop and
this is going to recreate the database
71

72
00:06:26.300 --> 00:06:29.870
each time so this is fine for
development, definitely not something
72

73
00:06:29.870 --> 00:06:34.009
that you would want to do in a
production database. I typically run
73

74
00:06:34.009 --> 00:06:39.020
validate with the production database
which is going to validate the database
74

75
00:06:39.020 --> 00:06:42.410
schema
in production against my JPA mappings
75

76
00:06:42.410 --> 00:06:47.780
and if something's wrong the application
will fail to start. Then we are using the
76

77
00:06:47.780 --> 00:06:53.960
most recent version of Spring Boot which
is the 1.5 series and in Spring
77

78
00:06:53.960 --> 00:07:00.230
Boot 1.4 and are 1.4 or higher,
we are using Hibernate 5 and we got
78

79
00:07:00.230 --> 00:07:08.390
some new naming strategies and on lines
22 and 23, these affect out how Hibernate
79

80
00:07:08.390 --> 00:07:14.360
names tables
and columns based on our JPA mappings
80

81
00:07:14.360 --> 00:07:19.820
and then finally we want to set the
Hibernate dialect for Postgress SQL and
81

82
00:07:19.820 --> 00:07:24.850
that is done on line 26 now let's go
ahead and take a look at running this
82

83
00:07:24.850 --> 00:07:29.870
you see here I've got the Spring Boot
Postgres application. I'm just going to
83

84
00:07:29.870 --> 00:07:37.160
click run here and this will start up, it
does start up pretty quickly and see
84

85
00:07:37.160 --> 00:07:42.230
that Spring Boot is running and we did
get a little bit of SQL logged out
85

86
00:07:42.230 --> 00:07:48.350
here. So we can see the SQL generated by
Hibernate to generate our table and now
86

87
00:07:48.350 --> 00:07:55.550
I'm going to toggle over to Chrome again
and let's do a refresh and I shouldn't
87

88
00:07:55.550 --> 00:07:59.450
have any data there so brand new
database. Now if I come in here to create
88

89
00:07:59.450 --> 00:08:12.920
new product, some description, 12, some URL
and submit that and we can see that this
89

90
00:08:12.920 --> 00:08:18.860
has been persisted to the database. I
come over here go back to the list now
90

91
00:08:18.860 --> 00:08:25.010
we can see that and let's edit and let's
do a 333 on the description just to
91

92
00:08:25.010 --> 00:08:29.780
change it, submit it and we can see that
that changed on the show screen let's
92

93
00:08:29.780 --> 00:08:37.970
double check the list and we see that
the 333 there is present so that has
93

94
00:08:37.970 --> 00:08:45.260
been persisted to my Postgress database
and just as a quick reminder, if you do
94

95
00:08:45.260 --> 00:08:54.500
want to get this project on GitHub go
springframeworkguru/spring-boot-postgress-example
