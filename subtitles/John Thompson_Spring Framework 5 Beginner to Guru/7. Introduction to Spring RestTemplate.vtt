WEBVTT
0
1
00:00:04.220 --> 00:00:09.870
Okay, let's go through and actually
create a RestTemplate. And what we wanna
1

2
00:00:09.870 --> 00:00:14.219
do here is see how my application is.
I got the main class here. It's in the
2

3
00:00:14.219 --> 00:00:19.560
springrestclientexamples package. So
under that, I am going to come in and
3

4
00:00:19.560 --> 00:00:25.859
create a New Package, config and you
don't have to do it this way.
4

5
00:00:25.859 --> 00:00:30.900
But this just makes it kind of a handy way here. And I'm gonna add in a
5

6
00:00:30.900 --> 00:00:37.860
new class the RestTemplateConfig. We're
gonna use the Builder for this. And I can
6

7
00:00:37.860 --> 00:00:43.590
come up here and say @, we're creating a
Java Configuration class for Spring
7

8
00:00:43.590 --> 00:00:53.760
Framework. And I wanna add in a new
Bean and call him public RestTemplate and
8

9
00:00:53.760 --> 00:01:00.539
this is going to take in a RestTemplateBuilder. So this is a builder class it's
9

10
00:01:00.539 --> 00:01:05.070
kind of like a factory that we're gonna
request a RestTemplate from, from the
10

11
00:01:05.070 --> 00:01:08.490
Spring Framework. So this component the
RestTemplateBuilder that is gonna be
11

12
00:01:08.490 --> 00:01:12.810
auto configured by Spring Boot for us.
Well we wanna say, return here
12

13
00:01:12.810 --> 00:01:19.290
builder.build(). And this builder actually
takes in a lot of different options. So
13

14
00:01:19.290 --> 00:01:21.830
if we had to do some type an
authentication we could do that here.
14

15
00:01:21.830 --> 00:01:25.680
Hopefully I'll get in. I'll find a spot,
where we can get into that and the
15

16
00:01:25.680 --> 00:01:29.030
future of the course but right now I'm
just going through a very simple example
16

17
00:01:29.030 --> 00:01:35.970
that we wanna utilize here. So that
gives us that. And let's come in here and
17

18
00:01:35.970 --> 00:01:39.710
also create a package for service.
18

19
00:01:44.960 --> 00:01:52.190
And here, what I wanna do is get this
REST service, and let's get a list of
19

20
00:01:52.190 --> 00:02:11.450
User objects. You know what just be an
interface. Let's go ahead. Well so add
20

21
00:02:11.450 --> 00:02:15.010
in an implementation of that.
21

22
00:02:23.900 --> 00:02:36.420
And in, we'll implement the methods.
And now, also I wanna do is also Command + N
22

23
00:02:36.420 --> 00:02:45.870
for a constructor. And again since we
are gonna make this a Service, he doesn't
23

24
00:02:45.870 --> 00:02:51.810
need to start up or I'm sorry because we
have a constructor there Spring will
24

25
00:02:51.810 --> 00:02:56.250
automatically autowire in a RestTemplate for us. So now, what we wanna
25

26
00:02:56.250 --> 00:03:02.250
do is go ahead and implement in that
REST service. And actually before we
26

27
00:03:02.250 --> 00:03:05.610
do that, there's one thing I forgot I
have to implement. So let's take a look
27

28
00:03:05.610 --> 00:03:11.489
at this postman again and come in here
and take a look at this. I made one
28

29
00:03:11.489 --> 00:03:17.310
mistake there. So I thought this was a
list. And actually, this is actually an
29

30
00:03:17.310 --> 00:03:20.820
outer object there that we don't
implement or at least I did not
30

31
00:03:20.820 --> 00:03:25.110
implement in the exercise review. So
let's go take care of that right now.
31

32
00:03:25.110 --> 00:03:37.910
And in my domain, I'm gonna call that
UserData. And this is gonna be a List.
32

33
00:03:40.760 --> 00:03:48.390
And by convention, what we wanna do is
make this data that property data so
33

34
00:03:48.390 --> 00:03:53.700
that way the binding will work properly.
So we're gonna call this data. And just
34

35
00:03:53.700 --> 00:03:58.530
do this getter and setters. And of
course I could use Project Lombok
35

36
00:03:58.530 --> 00:04:03.420
here to provide that. Just kind of old
habit there to do that. So now let's come
36

37
00:04:03.420 --> 00:04:09.470
over here. Back to our service
implementation.
37

38
00:04:11.300 --> 00:04:18.560
I say restTemplate, and we're gonna
use the method. There's actually a number
38

39
00:04:18.560 --> 00:04:22.520
of different options here as far as
methods that we want. And we are gonna
39

40
00:04:22.520 --> 00:04:30.020
say getForObject and come back here to
postman. And we are gonna take this right
40

41
00:04:30.020 --> 00:04:40.220
here. That URL out there. So I'm just
gonna limit 3. Now, I did bring in a
41

42
00:04:40.220 --> 00:04:46.250
limit so it could ideally concatenate
that in. Actually let's go ahead and do
42

43
00:04:46.250 --> 00:04:55.220
that. I'll show you a more elegant
way of doing this in the near future.
43

44
00:04:55.220 --> 00:05:04.670
We also want to say, so now this tells
that what class where the data type that
44

45
00:05:04.670 --> 00:05:09.730
we want it to bind to. And in this case,
what do I do?
45

46
00:05:10.420 --> 00:05:15.890
So now, that's gonna return that and come
up here. And I want to write my test for
46

47
00:05:15.890 --> 00:05:23.950
it. So I'm gonna write a test for this.
47

48
00:05:27.310 --> 00:05:41.450
SpringRunner.class. And we also want to
do the... so we're gonna autowire that
48

49
00:05:41.450 --> 00:05:47.080
instance in. Let's go ahead and create a
test class for that.
49

50
00:06:08.240 --> 00:06:13.080
And this should be a size of 3. So
let's go ahead and test that and run
50

51
00:06:13.080 --> 00:06:21.050
that right now. You can see that we got a
failure and I actually came back
51

52
00:06:21.050 --> 00:06:32.100
expected 3 but we got 4. That's
interesting. Double check that. And it's
52

53
00:06:32.100 --> 00:06:35.490
curious so let's go ahead and what I'm
gonna do right now is run this in the
53

54
00:06:35.490 --> 00:06:41.880
debugger. Before it gets there, let's go
ahead and set a breakpoint and let's
54

55
00:06:41.880 --> 00:06:49.740
debug that. See what's actually
coming back. So we did get four users and
55

56
00:06:49.740 --> 00:06:55.260
let's take a look at that. So we have a
complete User object there. We can see
56

57
00:06:55.260 --> 00:06:59.880
that how the data binding is working and
we didn't really set any annotation so
57

58
00:06:59.880 --> 00:07:04.889
Jackson is doing all this for us. We're
getting that data there. And we are
58

59
00:07:04.889 --> 00:07:11.849
getting valid users coming back. So that
we can see that the API did in fact
59

60
00:07:11.849 --> 00:07:17.639
return back four different User objects
so that's a interesting behavior of the
60

61
00:07:17.639 --> 00:07:24.840
API. So let's go ahead and set this to
4 so we have a passing test. And we're
61

62
00:07:24.840 --> 00:07:30.570
gonna stop that. Now let's come back over
here to the run dialog, and let's go
62

63
00:07:30.570 --> 00:07:34.680
ahead and rerun this. So that's kind of a
weird behavior. I wasn't expecting API to
63

64
00:07:34.680 --> 00:07:40.680
have a limit of three and returned back
four. But in this case that API is doing
64

65
00:07:40.680 --> 00:07:44.849
that. So kind of it invalid test. And
let's go ahead and review this a little
65

66
00:07:44.849 --> 00:07:50.550
bit. So I just want in this video, my goal
was to get you introduced to a Spring
66

67
00:07:50.550 --> 00:07:54.539
RestTemplate and we're just doing a
simple GET request. There's a lot more
67

68
00:07:54.539 --> 00:07:59.190
capabilities of RestTemplate and I will
be exploring those coming up in future
68

69
00:07:59.190 --> 00:08:03.000
videos. This is just get your feet wet
with it. Well you can see how easy it was.
69

70
00:08:03.000 --> 00:08:06.720
So created the configuration class we're
injecting a instance
70

71
00:08:06.720 --> 00:08:11.340
for RestTemplate in and we're using the
method getForObject or passing in a
71

72
00:08:11.340 --> 00:08:16.920
URL in production for something like
this. I would externalize this into a
72

73
00:08:16.920 --> 00:08:22.410
properties file. And then, there's ways to
build up the request parameters there. So
73

74
00:08:22.410 --> 00:08:27.240
we will also get into that in a future
video. But here, we are giving it the URI
74

75
00:08:27.240 --> 00:08:34.650
that we want to pull the data from. See
in the limit and user data. You can see
75

76
00:08:34.650 --> 00:08:40.380
here we are passing in a limit of three
so that is getting bound to our
76

77
00:08:40.380 --> 00:08:45.000
implementation here. So that would
be a limit of three that comes in. For
77

78
00:08:45.000 --> 00:08:49.380
some reason it's returning four but I
see that we are getting valid data
78

79
00:08:49.380 --> 00:08:54.660
back there. I went into the debugger so
you can see how we just set up POJOs and
79

80
00:08:54.660 --> 00:08:59.850
that the binding is happening based on
the name of the property. So Jackson is
80

81
00:08:59.850 --> 00:09:03.240
doing that automatically. There are
annotations, there's actually a number
81

82
00:09:03.240 --> 00:09:07.740
annotations for Jackson, where we have a
lot of control over the data binding. But
82

83
00:09:07.740 --> 00:09:12.300
in this case, we are leveraging the
automatic default data bindings by the
83

84
00:09:12.300 --> 00:09:17.280
property name. So kind of a really slick
feature of Jackson and so you can see
84

85
00:09:17.280 --> 00:09:24.030
how easy it was to create our data model
and then bind that JSON object from a
85

86
00:09:24.030 --> 00:09:28.100
GET request using Spring RestTemplate.
