WEBVTT
0
1
00:00:04.160 --> 00:00:10.019
Okay, I said before that we want to use
this XML schema to generate Java classes.
1

2
00:00:10.019 --> 00:00:15.990
To do that, we're going to use a very
mature Java feature or library called
2

3
00:00:15.990 --> 00:00:22.560
XJC. I'm going to toggle over to
Chrome here. Now, there's a Maven plugin
3

4
00:00:22.560 --> 00:00:29.939
from Mojo for Java generation using the
XJC binding compiler from the JAXB
4

5
00:00:29.939 --> 00:00:34.710
distribution. So, we need to go ahead and
install this plugin. So I am going to
5

6
00:00:34.710 --> 00:00:38.950
steal this configuration here and then
I'll show you how to configure it.
6

7
00:00:38.950 --> 00:00:41.920
So, like getting good developer, I'm
going ahead and doing a cut-and-paste
7

8
00:00:41.920 --> 00:00:50.260
here. Let's come over to IntelliJ, and now,
I want to come into the POM of the rest
8

9
00:00:50.260 --> 00:00:53.949
model, so this is where I'm going to
configure this. Because we only need to
9

10
00:00:53.949 --> 00:00:59.879
set it up in this POM because my mvc-rest-app doesn't need the XJC
10

11
00:00:59.879 --> 00:01:05.100
compiler. Now, this goes into the build
tag. Inside of
11

12
00:01:06.190 --> 00:01:09.480
build, we have plugins.
12

13
00:01:09.940 --> 00:01:14.260
I just do a paste here. Now, the one thing
that they did is they set up a project
13

14
00:01:14.260 --> 00:01:19.420
version as a variable. I did have to look
this up because I definitely don't have
14

15
00:01:19.420 --> 00:01:26.260
this memorized but it is 2.3.1 is
the latest release, at the time of
15

16
00:01:26.260 --> 00:01:32.020
recording, and chances are isn't going to be
there for some time. I didn't look at the
16

17
00:01:32.020 --> 00:01:37.990
age on it, but the stuff is pretty mature
so if it's from like 2015 or whatever
17

18
00:01:37.990 --> 00:01:42.160
that release was don't worry. It's a
mature product. They're just so mature
18

19
00:01:42.160 --> 00:01:47.190
that they're not doing any development
with it right now.
19

20
00:01:47.600 --> 00:01:51.410
So, I'm going to put in a package
called guru.springframework.
20

21
00:01:51.410 --> 00:01:56.750
model. Now, that the last thing that we
have to configure, try to see if there's
21

22
00:01:56.750 --> 00:02:03.110
an example here. Here we are. So, where it
should find it. So, we need to put in the
22

23
00:02:03.110 --> 00:02:09.440
tag and the configuration tags.
I need sources and source. This does
23

24
00:02:09.440 --> 00:02:17.030
come from the root directory. So, that was
kind of poorly documented. But here, we
24

25
00:02:17.030 --> 00:02:19.450
need to do. Are we are going to say
25

26
00:02:23.000 --> 00:02:33.040
src/main/resources and then also xsd. So that is
26

27
00:02:33.900 --> 00:02:39.090
the configuration for the plugin. Now, I
do want to show you here on the webpage,
27

28
00:02:39.090 --> 00:02:44.549
they are showing a lot of times happening
in the compiler. I don't believe that is
28

29
00:02:44.549 --> 00:02:50.360
necessary. So, I'm going to do a clean
here.
29

30
00:02:50.700 --> 00:02:55.290
Cleaned it and now I'm going to run the
package goal, so this is important. It
30

31
00:02:55.290 --> 00:02:59.220
goes off the package goal, which also
gets run with the install phase, as well.
31

32
00:02:59.220 --> 00:03:02.099
So, we're going to go ahead and run
package.
32

33
00:03:02.099 --> 00:03:06.480
There's no Java to compile. There's no
tests to run, so this will run pretty
33

34
00:03:06.480 --> 00:03:11.370
quick. We can see that it's gone through
there. Did a build success. Now, let's
34

35
00:03:11.370 --> 00:03:16.470
examine the build artifacts, that it did
generate. You can see that we have some
35

36
00:03:16.470 --> 00:03:19.950
chatter here. We don't need to look into
everything, but we did get the rest-model
36

37
00:03:19.950 --> 00:03:26.010
jar. But, let's take a closer look at
that generated sources. So, it's actually
37

38
00:03:26.010 --> 00:03:32.579
generating Java source code for us. 
Now, we can see that we have Customer
38

39
00:03:32.579 --> 00:03:38.610
ListDTOType and CustomersType. So,
let's come in here and take a closer
39

40
00:03:38.610 --> 00:03:45.299
look at what it was generated. We'll
go in and adjust our XSD. So, we really
40

41
00:03:45.299 --> 00:03:50.670
don't want to name DTOType. That's kind
of silly. So, let's come over here in
41

42
00:03:50.670 --> 00:03:58.069
elementname. Yeah, I'm pretty sure that
we can just omit that type.
42

43
00:03:59.930 --> 00:04:03.780
We'll the name CustomerListDTO. CustomersType but I don't need the
43

44
00:04:05.360 --> 00:04:08.230
type there either. Get rid of that.
44

45
00:04:15.280 --> 00:04:19.310
It's double-checking things here and
then we just want to
45

46
00:04:19.310 --> 00:04:21.820
make this
46

47
00:04:23.120 --> 00:04:28.449
like that. So now, let's go ahead and do a
clean
47

48
00:04:28.879 --> 00:04:32.229
and a package.
48

49
00:04:34.180 --> 00:04:37.330
Now, let's examine the classes that are
generated. See if we like those a little
49

50
00:04:37.330 --> 00:04:41.880
bit better. Sources. So we have CustomerListDTO,
50

51
00:04:44.389 --> 00:04:46.990
Customers.
51

52
00:04:48.120 --> 00:04:53.250
We can see that we have firstname, lastname
customers. So, not really not quite
52

53
00:04:53.250 --> 00:04:57.150
what we wanted. So, it's pretty close but
we didn't want these properties. We just
53

54
00:04:57.150 --> 00:05:03.530
want that on. We don't need a list of
customers there. CustomerListDTO.
54

55
00:05:06.750 --> 00:05:11.430
I'm going to pause this and we have
some errors in that XSD. I'm going to
55

56
00:05:11.430 --> 00:05:15.780
pause that and rework that real quick.
Okay, I skipped ahead. I want to take a
56

57
00:05:15.780 --> 00:05:21.360
moment to look at that generated XSD
a little closer and I made a couple
57

58
00:05:21.360 --> 00:05:26.940
small tweaks to it. Let's see if I can do
this. Would do get compared with same
58

59
00:05:26.940 --> 00:05:32.460
repository version and the changes that
I've made are highlighted here. We can
59

60
00:05:32.460 --> 00:05:38.880
see this is the original, and what I had
to do is I got rid of this line here on
60

61
00:05:38.880 --> 00:05:42.419
the customersType. Not quite sure why
that was getting included. You can see
61

62
00:05:42.419 --> 00:05:46.740
the renaming are highlighted. Then,
the next important thing here is on the
62

63
00:05:46.740 --> 00:05:52.620
CustomerListDTO. See how we had this
max occurs unbounded min occurs zero?
63

64
00:05:52.620 --> 00:06:00.290
That means in XSD that it is a list
a home at and it can have zero or
64

65
00:06:00.290 --> 00:06:06.150
unlimited many. So, it's saying unbounded
so there can be an infinite number of
65

66
00:06:06.150 --> 00:06:10.350
entries there. So that is a list.
Obviously, not infinite at some point.
66

67
00:06:10.350 --> 00:06:15.350
We'd blow up the memory but or run into
some physical limitation of hardware. But
67

68
00:06:15.350 --> 00:06:21.570
here, you can see the changes here. So, I
now have a customers type so that
68

69
00:06:21.570 --> 00:06:27.180
gets generated as a customers type. The
CustomerListDTO has one property
69

70
00:06:27.180 --> 00:06:33.470
customers. Customers. I'd actually like
close this. I want to make one last
70

71
00:06:33.470 --> 00:06:39.350
change here. Let's make that Customers. So,
that's
71

72
00:06:39.350 --> 00:06:44.380
singular. This should be.
72

73
00:06:44.870 --> 00:06:50.830
So now, we have a proper object name of
Customer. It's going to have a property of
73

74
00:06:50.830 --> 00:06:56.800
customers, which makes sense. So, let's go
ahead and run clean, and I will repackage
74

75
00:06:56.800 --> 00:07:03.860
this, when that is done. Then, we'll
take a closer look at the generated code.
75

76
00:07:03.860 --> 00:07:06.580
Target it.
76

77
00:07:06.720 --> 00:07:11.739
jaxb, guru, springframework, model and let's first
77

78
00:07:11.739 --> 00:07:15.489
look at that. So, we got two types here -
Customer and CustomerListDTO, which is
78

79
00:07:15.489 --> 00:07:21.999
exactly what we wanted. Now, we got
CustomerListDTO List of customers. So, that all
79

80
00:07:21.999 --> 00:07:25.869
looks good. Let's take a closer look at
Customer, and we can see that now we have
80

81
00:07:25.869 --> 00:07:29.800
the camelcase customerUrl rather than
and the annotation with the underscore,
81

82
00:07:29.800 --> 00:07:34.809
which is what we did not want. So, this
all looking a lot better. We can see that
82

83
00:07:34.809 --> 00:07:41.710
the JAXB annotated class has
generated the classes with
83

84
00:07:41.710 --> 00:07:47.620
and the annotations required for JAXB.
So, this all looks pretty good to me, and
84

85
00:07:47.620 --> 00:07:54.490
also, the one thing that JAXB does do or
XJC does to create this object Factory.
85

86
00:07:54.490 --> 00:07:59.410
This is used for JAXB marshalling
and unmarshalling of this class. This
86

87
00:07:59.410 --> 00:08:03.850
is a handy utility class for us to use.
So, if we were to get further down the
87

88
00:08:03.850 --> 00:08:08.320
road into marshalling and unmarshalling
XML. So, that's the three course
88

89
00:08:08.320 --> 00:08:13.139
classes, that were kicked out. Now, let's
just review the POM configuration again.
89

90
00:08:13.139 --> 00:08:20.060
So, we're using the codehaus-mojo
plugin for JAXB2 Maven plugin 2.3.1
90

91
00:08:20.060 --> 00:08:23.949
is the latest version. This is
standard execution, so we are going to
91

92
00:08:23.949 --> 00:08:28.840
execute with the XJC and this is going
to get picked up by default with the
92

93
00:08:28.840 --> 00:08:33.779
package goal inside a Maven. We did
two configurations. So, we're saying
93

94
00:08:33.779 --> 00:08:38.200
package telling XJC to create the
classes in the package
94

95
00:08:38.200 --> 00:08:44.080
guru.springframework.model and we are
giving it the source. The way it's
95

96
00:08:44.080 --> 00:08:51.459
going to work by default is to process
all XSD files within this directory. So,
96

97
00:08:51.459 --> 00:08:55.779
if I had more there, it would pick up
those, as well. So, that is the
97

98
00:08:55.779 --> 00:08:59.980
configuration for the plugin. You
can see that it does to the generation.
98

99
00:08:59.980 --> 00:09:05.380
It does create the Java sources, which
are then compiled Java classes, and
99

100
00:09:05.380 --> 00:09:09.670
ultimately, we can see the jar
artifact there. Now, what we're going to
100

101
00:09:09.670 --> 00:09:15.310
want to do is create a dependency in our
rest-app, and I will do that in the next
101

102
00:09:15.310 --> 00:09:20.110
video. We will refactor to use this
new data type, that is generated from an
102

103
00:09:20.110 --> 00:09:22.770
XSD.
