WEBVTT
0
1
00:00:03.258 --> 00:00:06.296
Now, on selecting a base image to work with
1

2
00:00:06.296 --> 00:00:08.451
for your Docker project, that's actually
2

3
00:00:08.451 --> 00:00:10.343
a pretty important thing to do.
3

4
00:00:10.343 --> 00:00:11.975
And there's a lot of religious wars
4

5
00:00:11.975 --> 00:00:14.997
out there about what's best base image.
5

6
00:00:14.997 --> 00:00:17.012
There's some very lightweight images to use
6

7
00:00:17.012 --> 00:00:19.201
and I think those are an excellent idea.
7

8
00:00:19.201 --> 00:00:22.460
But, the companies that you are going into,
8

9
00:00:22.460 --> 00:00:25.460
this is a very new and evolving area,
9

10
00:00:25.460 --> 00:00:29.165
and you may want a more fully-featured
10

11
00:00:29.165 --> 00:00:32.237
Linux distribution to work with inside your containers.
11

12
00:00:32.237 --> 00:00:36.404
Such as Red Hat Enterprise Linux or CentOS.
12

13
00:00:36.537 --> 00:00:38.531
That in the Enterprise, that's probably
13

14
00:00:38.531 --> 00:00:40.710
going to be your two leading candidates.
14

15
00:00:40.710 --> 00:00:44.877
So, I've decided to use CentOS for our base purposes here.
15

16
00:00:46.047 --> 00:00:49.156
And I'm doing so because CentOS is
16

17
00:00:49.156 --> 00:00:51.766
essentially the same as Red Hat.
17

18
00:00:51.766 --> 00:00:53.651
Except it's not supported by Red Hat.
18

19
00:00:53.651 --> 00:00:57.411
So, as far as teaching you anything compatibility,
19

20
00:00:57.411 --> 00:01:00.530
once you're in a bash shell, it's going to be
20

21
00:01:00.530 --> 00:01:02.190
pretty much the same.
21

22
00:01:02.190 --> 00:01:04.640
If you're in an Enterprise, they might want you
22

23
00:01:04.640 --> 00:01:08.206
to be using Red Hat approved images for Red Hat support.
23

24
00:01:08.206 --> 00:01:09.881
So, that's actually failry likely
24

25
00:01:09.881 --> 00:01:11.827
if you're in a big company.
25

26
00:01:11.827 --> 00:01:14.758
So, I am going to be using CentOS here,
26

27
00:01:14.758 --> 00:01:17.533
and in this part of the course,
27

28
00:01:17.533 --> 00:01:21.700
what I want to do is bring down a CentOS image.
28

29
00:01:22.065 --> 00:01:25.634
And by default, CentOS and Red Hat
29

30
00:01:25.634 --> 00:01:26.929
do not have Java installed.
30

31
00:01:26.929 --> 00:01:28.591
So, we need to go in and install Java
31

32
00:01:28.591 --> 00:01:31.073
and I'm going to show you exactly how we do that
32

33
00:01:31.073 --> 00:01:34.823
and install Java on a base image for our use.
33

34
00:01:36.358 --> 00:01:38.028
Because obviously, if we're going to be deploying
34

35
00:01:38.028 --> 00:01:40.415
Java applications, as you know,
35

36
00:01:40.415 --> 00:01:43.644
we need the Java Runtime Environment installed on an image
36

37
00:01:43.644 --> 00:01:47.811
so that the JVM is there and can execute the Java bytecode.
37

38
00:01:48.038 --> 00:01:50.187
So, I'm going to jump over to the screen now
38

39
00:01:50.187 --> 00:01:52.107
and show you exactly how to go through these steps.
39

40
00:01:52.107 --> 00:01:55.109
We'll download a CentOS image,
40

41
00:01:55.109 --> 00:01:58.306
we'll connect to it and then we'll install Java.
41

42
00:01:58.306 --> 00:01:59.822
Okay, I have the command line here.
42

43
00:01:59.822 --> 00:02:02.545
And what we want to do is run a CentOS image.
43

44
00:02:02.545 --> 00:02:06.628
So, If I just do docker run -d centos, like this,
44

45
00:02:11.406 --> 00:02:14.262
you see the image started up normally.
45

46
00:02:14.262 --> 00:02:18.416
And if I do docker ps, we didn't get anything.
46

47
00:02:18.416 --> 00:02:22.583
So, docker logs and I can paste it in the image name.
47

48
00:02:28.426 --> 00:02:31.352
And we see that we got a random code here.
48

49
00:02:31.352 --> 00:02:33.162
Which really doesn't mean anything.
49

50
00:02:33.162 --> 00:02:36.495
And what's happening is the CentOS image
50

51
00:02:37.337 --> 00:02:39.254
doesn't have a command.
51

52
00:02:40.379 --> 00:02:41.300
So the way docker containers run is that they'll run
52

53
00:02:41.300 --> 00:02:44.383
until that last command is completed.
53

54
00:02:46.358 --> 00:02:49.682
So, a lot of times you get a container up and running
54

55
00:02:49.682 --> 00:02:50.642
and you want to give it a command
55

56
00:02:50.642 --> 00:02:52.782
that's going to keep on running.
56

57
00:02:52.782 --> 00:02:54.225
So, that's a pretty common thing
57

58
00:02:54.225 --> 00:02:55.426
to do with Docker containers.
58

59
00:02:55.426 --> 00:02:57.002
So, if you're new to Docker, something like this
59

60
00:02:57.002 --> 00:02:58.058
can trip you up.
60

61
00:02:58.058 --> 00:03:01.558
So, I want to show you a couple tricks here.
61

62
00:03:02.725 --> 00:03:05.225
We can do docker run -d centos
62

63
00:03:09.061 --> 00:03:13.228
and then if we do a tail -f /dev/null,
63

64
00:03:15.441 --> 00:03:17.232
what this is doing is it's giving a command
64

65
00:03:17.232 --> 00:03:18.276
that's never going to end.
65

66
00:03:18.276 --> 00:03:21.232
So, it's going to tail and follow /dev/null.
66

67
00:03:21.232 --> 00:03:24.033
So, that's never going to end.
67

68
00:03:24.033 --> 00:03:26.845
So, if I come in here and now,
68

69
00:03:26.845 --> 00:03:29.724
if I do a docker ps, I can see that
69

70
00:03:29.724 --> 00:03:33.838
the CentOS image is up and running. Which is what we want.
70

71
00:03:33.838 --> 00:03:35.769
Now, if I want to shell into that,
71

72
00:03:35.769 --> 00:03:38.212
I want to show you a technique to shell in.
72

73
00:03:38.212 --> 00:03:40.629
I can do a docker exec -it...
73

74
00:03:43.132 --> 00:03:45.261
and it is for interactive mode.
74

75
00:03:45.261 --> 00:03:47.678
And if I take this naughty...
75

76
00:03:50.477 --> 00:03:54.171
whatever that is, that is the container names.
76

77
00:03:54.171 --> 00:03:56.941
And now, if I do bash, what this is saying
77

78
00:03:56.941 --> 00:04:00.035
is docker execute interactively
78

79
00:04:00.035 --> 00:04:03.585
against the container naughty and bash command.
79

80
00:04:03.585 --> 00:04:07.668
So, if I hit that now, you can see that I'm root.
80

81
00:04:11.754 --> 00:04:14.504
And I am inside the CentOS image.
81

82
00:04:16.031 --> 00:04:20.198
So, if I do a ps -ef, these are the things that are running
82

83
00:04:20.323 --> 00:04:22.365
and we can see that command there.
83

84
00:04:22.365 --> 00:04:25.571
So, if I go in, let's see if I can kill this.
84

85
00:04:25.571 --> 00:04:27.454
I should be committing suicide.
85

86
00:04:27.454 --> 00:04:31.621
Let's do kill -9 1, and this should bounce me right out.
86

87
00:04:32.796 --> 00:04:33.629
Nope.
87

88
00:04:40.427 --> 00:04:42.737
So, for some reason, that process didn't die.
88

89
00:04:42.737 --> 00:04:46.133
So, I thought a kill-9 and a PID 1
89

90
00:04:46.133 --> 00:04:48.439
would do it, but obviously not.
90

91
00:04:48.439 --> 00:04:50.043
So, that's hoping to commit suicide
91

92
00:04:50.043 --> 00:04:52.367
in that container but that did not work out.
92

93
00:04:52.367 --> 00:04:55.784
But, what we want to do here is clear this.
93

94
00:04:57.323 --> 00:04:59.318
Now, the one thing we want to do is
94

95
00:04:59.318 --> 00:05:01.818
see if there's Java installed.
95

96
00:05:03.379 --> 00:05:05.345
And there's no Java version.
96

97
00:05:05.345 --> 00:05:08.867
So, what we can do, since I am root,
97

98
00:05:08.867 --> 00:05:11.200
I can do a yum install java.
98

99
00:05:15.242 --> 00:05:17.154
And what this is going to do, it's going to go
99

100
00:05:17.154 --> 00:05:20.655
out to the Yum repositories and tell it
100

101
00:05:20.655 --> 00:05:23.072
to download and install Java.
101

102
00:05:24.966 --> 00:05:26.360
Now we can see it, it's downloading
102

103
00:05:26.360 --> 00:05:28.138
a bunch of stuff that's needed for Java.
103

104
00:05:28.138 --> 00:05:31.888
It's going to prepare the CentOS image for Java.
104

105
00:05:34.694 --> 00:05:37.277
It's going to ask is this ok, yes.
105

106
00:05:39.485 --> 00:05:41.367
Bring down a few rpm's that we need.
106

107
00:05:41.367 --> 00:05:45.534
And we are using OpenJDK, this is actually pretty good now.
107

108
00:05:45.953 --> 00:05:48.037
I remember a time that the OpenJDK was
108

109
00:05:48.037 --> 00:05:50.407
a little flaky and I didn't quite trust it.
109

110
00:05:50.407 --> 00:05:53.657
But, with 1.7 and 1.8, it is definitely
110

111
00:05:54.535 --> 00:05:56.216
the reference implementation.
111

112
00:05:56.216 --> 00:05:59.376
So, Oracle has taken the OpenJDK
112

113
00:05:59.376 --> 00:06:01.952
under its wing and nowadays, I think it's
113

114
00:06:01.952 --> 00:06:06.068
just as good as the official Oracle version.
114

115
00:06:06.068 --> 00:06:07.865
Now, if you're doing something high-peformance,
115

116
00:06:07.865 --> 00:06:10.750
the OracleJDK is going to have
116

117
00:06:10.750 --> 00:06:12.718
some advanced features in it.
117

118
00:06:12.718 --> 00:06:15.029
And if you are paying attention,
118

119
00:06:15.029 --> 00:06:19.132
we are bringing down the JDK and not the JRE.
119

120
00:06:19.132 --> 00:06:21.993
And we probably could get away with the JRE
120

121
00:06:21.993 --> 00:06:26.160
but for our purposes, having the JDK is not going to hurt.
121

122
00:06:27.255 --> 00:06:31.422
And we can see that we're bringing down 1.8.121,
122

123
00:06:31.521 --> 00:06:34.362
which is the latest release at the time of recording.
123

124
00:06:34.362 --> 00:06:36.573
Now, by installing through Yum,
124

125
00:06:36.573 --> 00:06:40.722
Java gets all set up and now I can do a...
125

126
00:06:40.722 --> 00:06:44.889
We can see that I have the OpenJDK version 1.8 release 121.
126

127
00:06:47.400 --> 00:06:48.931
Which is, at the time of recording,
127

128
00:06:48.931 --> 00:06:50.403
the most current release.
128

129
00:06:50.403 --> 00:06:53.795
So, this has prepared the CentOS image
129

130
00:06:53.795 --> 00:06:56.295
for running Java applications.
130

131
00:06:57.170 --> 00:06:59.208
You can see how easy it was to bring down
131

132
00:06:59.208 --> 00:07:02.974
a CentOS image, connect to it and install Java.
132

133
00:07:02.974 --> 00:07:06.356
This image would now be ready but,
133

134
00:07:06.356 --> 00:07:07.903
what I didn't tell you at the beginning of this course
134

135
00:07:07.903 --> 00:07:09.988
is there's really no way to save that.
135

136
00:07:09.988 --> 00:07:11.453
We're going to have to repeat these steps.
136

137
00:07:11.453 --> 00:07:12.861
So, we went through an exercise.
137

138
00:07:12.861 --> 00:07:14.939
I wanted to get you into an image
138

139
00:07:14.939 --> 00:07:17.540
by shelling in and manipulating that image
139

140
00:07:17.540 --> 00:07:20.584
to see how it's like working with an actual Linux instance.
140

141
00:07:20.584 --> 00:07:22.497
Now, what we're going to need to do coming up
141

142
00:07:22.497 --> 00:07:24.577
is we'll create our own Docker file
142

143
00:07:24.577 --> 00:07:28.268
that runs the commands that we did to install Java
143

144
00:07:28.268 --> 00:07:30.611
and get that set up on this image for our use.
144

145
00:07:30.611 --> 00:07:32.699
That would go into the Docker file
145

146
00:07:32.699 --> 00:07:34.950
and when we run that command, another layer's
146

147
00:07:34.950 --> 00:07:36.361
going to get created.
147

148
00:07:36.361 --> 00:07:37.620
And then once that layer's created,
148

149
00:07:37.620 --> 00:07:39.630
we'll have Java and installed our image,
149

150
00:07:39.630 --> 00:07:41.292
and then that image will be ready for
150

151
00:07:41.292 --> 00:07:44.783
A Spring Boot application or a Java application.
151

152
00:07:44.783 --> 00:07:46.478
And we can run the necessary commands
152

153
00:07:46.478 --> 00:07:49.248
to bring in our jar file and run
153

154
00:07:49.248 --> 00:07:52.167
that jar file using the Java executable.
154

155
00:07:52.167 --> 00:07:55.093
So, it becomes pretty easy to do
155

156
00:07:55.093 --> 00:07:56.752
and we can do all that on the Docker file.
156

157
00:07:56.752 --> 00:08:00.639
But I wanted you to see what's going on under the covers
157

158
00:08:00.639 --> 00:08:03.107
because when you run it from a Docker file,
158

159
00:08:03.107 --> 00:08:04.835
it becomes a little dark magic
159

160
00:08:04.835 --> 00:08:06.221
and you don't see what's happening.
160

161
00:08:06.221 --> 00:08:08.879
So, here you saw us installing Java
161

162
00:08:08.879 --> 00:08:10.882
and we are going to be running these commands
162

163
00:08:10.882 --> 00:08:13.656
from a Docker file to build our own custom image
163

164
00:08:13.656 --> 00:08:16.811
that will run from the Docker command line.
164

165
00:08:16.811 --> 00:08:19.728
(electronic music)
