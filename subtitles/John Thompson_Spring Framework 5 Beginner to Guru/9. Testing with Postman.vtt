WEBVTT
0
1
00:00:04.100 --> 00:00:08.309
Alright. At this point, we've
implemented two methods and what I
1

2
00:00:08.309 --> 00:00:13.380
thought I'd do is take a quick look at
these. So this is the Swagger document of
2

3
00:00:13.380 --> 00:00:19.350
what we're going against. So we have the
GET categories and also GET by id. So one
3

4
00:00:19.350 --> 00:00:23.490
does List, one does by id. Let's go
ahead and start our application. So we
4

5
00:00:23.490 --> 00:00:29.070
ran our unit test against it, which is
great. But it's also good to go out and
5

6
00:00:29.070 --> 00:00:32.910
do a functional test. And for right now,
I'm just gonna demonstrate this using
6

7
00:00:32.910 --> 00:00:39.210
postman. So we have our application
started up. Let's come over here and I
7

8
00:00:39.210 --> 00:00:44.640
actually pasted that in. So we're just
gonna go ahead and send that. And we can
8

9
00:00:44.640 --> 00:00:49.020
see that we did in fact get our
categories back from the database. And
9

10
00:00:49.020 --> 00:00:55.590
just to recap there, this is going
against this getallCategories() method
10

11
00:00:55.590 --> 00:00:59.640
and it's returning that right out of our
database. So just to refresh, we are
11

12
00:00:59.640 --> 00:01:05.010
running a H2 in-memory database. Loading
that up with Spring Data JPA. And now, we
12

13
00:01:05.010 --> 00:01:08.610
are getting fetching that data right
from the database. If you remember, we did
13

14
00:01:08.610 --> 00:01:13.590
configure it. Configured this Bootstrap
class that gives us these categories. So
14

15
00:01:13.590 --> 00:01:18.840
we are getting a REST response round
trip from the database. And now, we can
15

16
00:01:18.840 --> 00:01:26.009
come up here and change this. Let's do
fresh. You can see that we are
16

17
00:01:26.009 --> 00:01:31.020
getting the id value back. So a little
bit different here. I'm got to move this out
17

18
00:01:31.020 --> 00:01:38.909
of the way. Go back over here to Chrome.
And what they've done here is they are
18

19
00:01:38.909 --> 00:01:42.630
giving us some additional metadata on
this and that's something that we can look
19

20
00:01:42.630 --> 00:01:47.970
at implementing in the future for a paging
limit information. That is a nice
20

21
00:01:47.970 --> 00:01:52.649
touch. I hope that we can implement that
in the future video. And then,
21

22
00:01:52.649 --> 00:01:56.460
the other thing here is that they're
giving us a nice reference there. If
22

23
00:01:56.460 --> 00:02:01.890
you remember, I said there's really no
standards yet for that metadata and when
23

24
00:02:01.890 --> 00:02:07.649
we get to using Spring Data JPA.
We'll take a closer look at that. There
24

25
00:02:07.649 --> 00:02:13.349
is a way to easily implement hateos or
HATEOS. Some people say to get us these
25

26
00:02:13.349 --> 00:02:16.220
URI's.
I'm going to demonstrate that in a future
26

27
00:02:16.220 --> 00:02:20.540
video. But for right now, I think what
we're doing is pretty good. I'm pretty
27

28
00:02:20.540 --> 00:02:26.990
happy with this little REST API. So we
can come out and change that, and right
28

29
00:02:26.990 --> 00:02:30.860
now, it only supports JSON, but we'll get
into multiple media types in the future
29

30
00:02:30.860 --> 00:02:36.580
video. But I'm pretty happy at the
little API is working now.
