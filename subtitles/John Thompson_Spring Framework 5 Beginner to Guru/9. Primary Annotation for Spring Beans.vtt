WEBVTT
0
1
00:00:04.609 --> 00:00:09.870
Now another tool that we have in our
toolbox is the @Primary annotation.
1

2
00:00:09.870 --> 00:00:14.610
This is a technique you can use when you
have multiple beans of the same type and
2

3
00:00:14.610 --> 00:00:19.380
you want one of them to go in by default
so in our case I think we have four
3

4
00:00:19.380 --> 00:00:23.279
beans now all the same type that all
implement the same interface so if we're
4

5
00:00:23.279 --> 00:00:27.930
going to be Autowiring by type in that
case any one of these beans technically
5

6
00:00:27.930 --> 00:00:33.660
is available to be Autowired into the
class so the @Primary annotation
6

7
00:00:33.660 --> 00:00:38.790
gives us a way to specify exactly which
one bean we want to be used when there
7

8
00:00:38.790 --> 00:00:43.829
is more than one qualifying bean in the
Spring context so I'm going to go in and
8

9
00:00:43.829 --> 00:00:46.649
what we'll do is we'll take that
original controller we start this little
9

10
00:00:46.649 --> 00:00:51.809
project off with and we're going to
refactor it to add in an implementation
10

11
00:00:51.809 --> 00:00:55.920
and this way by the end of the module
you'll be able to see how all these are
11

12
00:00:55.920 --> 00:00:58.649
working together wired in different
beans so we're going to have all four
12

13
00:00:58.649 --> 00:01:05.000
different instances of that GreetingService implemented into our controllers.
13

14
00:01:05.000 --> 00:01:11.340
Okay in this example what we want to do
is wire in a primary GreetingService so
14

15
00:01:11.340 --> 00:01:15.409
I'm going to come in and create one now
15

16
00:01:16.430 --> 00:01:24.780
and this will definitely be added to Git
for you and implements GreetingService
16

17
00:01:24.780 --> 00:01:31.320
now if you're using IntelliJ you can
come down and hit command N and we'll do
17

18
00:01:31.320 --> 00:01:39.780
Implement Methods sayGreetings and what
I want to do is return a greeting Hello
18

19
00:01:39.780 --> 00:01:44.509
and we'll say from the Primary Greeting service
19

20
00:01:46.640 --> 00:01:56.660
and of course I need to implement him as
a Service and this is going to tell the
20

21
00:01:56.660 --> 00:02:01.790
Spring context to bring that in as I
Spring Bean now let's make this a
21

22
00:02:01.790 --> 00:02:07.490
little more interesting and we will,
let's refactor this controller here this
22

23
00:02:07.490 --> 00:02:11.480
is the one that we started this whole
project with MyController and if you
23

24
00:02:11.480 --> 00:02:20.060
remember I'm running this, this is a
guy that's saying "Hello!!! " here so he's
24

25
00:02:20.060 --> 00:02:24.830
just doing a System.out.println("Hello!!! ")
so that's why we're getting that one
25

26
00:02:24.830 --> 00:02:34.310
so let's refactor this to take in a
GreetingService. So that there's
26

27
00:02:34.310 --> 00:02:40.910
property for the GreetingService, if I
do command n in IntelliJ and this is
27

28
00:02:40.910 --> 00:02:47.000
on a Mac too and I'm going to say
Generate Constructor, say GreetingService
28

29
00:02:47.000 --> 00:02:53.420
and now let's say I just don't
don't want to do anything here as far as
29

30
00:02:53.420 --> 00:02:59.930
annotating this class further, if I come
in and run this now it's going to blow
30

31
00:02:59.930 --> 00:03:04.430
up because MyController needs a single
bean but now there's 4 of them we've
31

32
00:03:04.430 --> 00:03:09.920
got 4 different beans defined so now
if I come back over here and mark this
32

33
00:03:09.920 --> 00:03:19.190
as @Primary I expect everything's
still going to run so now the only
33

34
00:03:19.190 --> 00:03:23.330
differences that we've marked it on line
10 they're using the @Primary
34

35
00:03:23.330 --> 00:03:28.700
annotation saying that if there is more
than one bean, I want to use this one so
35

36
00:03:28.700 --> 00:03:36.410
let's go ahead and run that and we can
see that I got a Hello!!! there and
36

37
00:03:36.410 --> 00:03:43.030
actually let's let's modify this here
37

38
00:03:45.040 --> 00:03:54.050
and we're getting that Hello!!! but we also
actually get that output so what we want
38

39
00:03:54.050 --> 00:04:11.569
to do, now that's what I failed to do. We
need a greetingService that returns
39

40
00:04:11.569 --> 00:04:22.850
sayGreeting() and then let's come down to our
application and you can do a shortcut
40

41
00:04:22.850 --> 00:04:29.720
sout I could do that and we are already
getting that bean so we can says
41

42
00:04:29.720 --> 00:04:34.610
controller.hello(). It's a little bit
different than let's say hello from
42

43
00:04:34.610 --> 00:04:38.900
other controllers. Now when we
run that we'll get that printed out to
43

44
00:04:38.900 --> 00:04:49.130
the console. Now we have two Primary
Greeting services, so the property
44

45
00:04:49.130 --> 00:04:53.539
injected controller is still getting the
Primary Greeting service so if I come here to
45

46
00:04:53.539 --> 00:04:58.280
come back into this, I have to come back to
the PropertyInjectedController, I'm
46

47
00:04:58.280 --> 00:05:04.880
sorry and this is just taking in the
primary bean now if I do a Qualifier on
47

48
00:05:04.880 --> 00:05:14.120
this, so now we're going to say a
Qualifier("GreetingServiceImpl"), let's
48

49
00:05:14.120 --> 00:05:20.000
run this one more time we should see all
the differences here. So yeah we got the
49

50
00:05:20.000 --> 00:05:24.100
Primary, the Hello Gurus!!!! from the
original which is our GreetingService,
50

51
00:05:24.100 --> 00:05:30.639
our GreetingServiceImpl and make that
a little clearer.
51

52
00:05:34.699 --> 00:05:40.620
So now we can see how we got the
original there and we're getting the
52

53
00:05:40.620 --> 00:05:44.580
different outputs. We got two hellos
there and I'm just going to clean that
53

54
00:05:44.580 --> 00:05:49.169
up so we're calling the controller hello
method twice, I'm going to just get rid
54

55
00:05:49.169 --> 00:05:56.520
of that. So we have the controller method
saying Hello!!!, that's a System out and then
55

56
00:05:56.520 --> 00:06:00.539
we're taking the input from the
various services that we've created in
56

57
00:06:00.539 --> 00:06:05.129
different implementations. Now you can
see how the Primary annotation is taking
57

58
00:06:05.129 --> 00:06:09.330
where there's not one specified and then
we're using Qualifiers to pick up the
58

59
00:06:09.330 --> 00:06:16.139
other ones by the class name. Now one
nuance I want to point out to you is how
59

60
00:06:16.139 --> 00:06:21.509
that primary bean is working with the
reflection so if we look at the 
60

61
00:06:21.509 --> 00:06:25.740
PropertyInjectedController, you saw that I went
in and added in the Qualifier. Now if I
61

62
00:06:25.740 --> 00:06:31.080
take that Qualifier out, let's watch what
happens as actually on the second line
62

63
00:06:31.080 --> 00:06:38.340
where we're getting the original so I go
ahead and run this again now, now you can
63

64
00:06:38.340 --> 00:06:43.199
see that the Primary is getting injected
because without that Qualifier even
64

65
00:06:43.199 --> 00:06:48.029
though I have the bean name as the
property name the primary bean is
65

66
00:06:48.029 --> 00:06:54.630
overriding that, so it's going to
override that and be what spring
66

67
00:06:54.630 --> 00:07:01.620
does the dependency injection on. Now if
I put this back in and the Qualifier
67

68
00:07:01.620 --> 00:07:06.870
there and and run it again we will get
the proper implementation because we
68

69
00:07:06.870 --> 00:07:10.020
want the original injected end the same
that we're doing property based
69

70
00:07:10.020 --> 00:07:14.430
injection. You can see how things are
kind of misbehaving there and like I
70

71
00:07:14.430 --> 00:07:18.750
gave you the warning before to caution
you about wiring up by the property name
71

72
00:07:18.750 --> 00:07:23.580
when you do something that overrides it
like a Primary obviously that could
72

73
00:07:23.580 --> 00:07:28.560
cause you unintended consequences down
the road. So that is a shortcut you
73

74
00:07:28.560 --> 00:07:33.240
can get away with but specifying the
Qualifier really is a best practice
74

75
00:07:33.240 --> 00:07:37.770
because you are going to see what the
intent was and people behind you are
75

76
00:07:37.770 --> 00:07:41.819
going to see what your intent was so
it's always important to express to your
76

77
00:07:41.819 --> 00:07:46.409
fellow developers. Okay you can see how
the Primary annotation is a very handy
77

78
00:07:46.409 --> 00:07:49.150
annotation. You do run into cases where you want to
78

79
00:07:49.150 --> 00:07:54.100
have one bean marked as a primary over
another and what this gives you a chance
79

80
00:07:54.100 --> 00:07:59.800
to do is you can rather than specifying
every class that is dependent upon that
80

81
00:07:59.800 --> 00:08:05.380
bean, you can go in to that specific
bean and indicate that it is the
81

82
00:08:05.380 --> 00:08:10.020
Primary and that's a very
convenient thing to do so remember the
82

83
00:08:10.020 --> 00:08:14.680
whole don't repeat yourself principle
the Primary annotation allows you to do
83

84
00:08:14.680 --> 00:08:17.950
that so it's a really nice feature with
in the Spring and it's another tool in
84

85
00:08:17.950 --> 00:08:21.400
your tool belt as you are wiring it
because as you get into more and more
85

86
00:08:21.400 --> 00:08:26.530
complex Enterprise projects, trust me as
your career and spring goes up you
86

87
00:08:26.530 --> 00:08:31.150
will get into bigger projects you are
going to need tools like this to specify
87

88
00:08:31.150 --> 00:08:36.720
which bean you want is the Primary one
and it's a very handy thing to have.
