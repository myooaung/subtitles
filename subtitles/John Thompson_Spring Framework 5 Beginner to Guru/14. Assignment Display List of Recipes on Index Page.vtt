WEBVTT
0
1
00:00:04.580 --> 00:00:08.700
Okay in this assignment what we're going
to do is load up a couple realistic
1

2
00:00:08.700 --> 00:00:14.400
recipes. And I'm using a website called
simply recipes and we have two recipes
2

3
00:00:14.400 --> 00:00:18.660
that we're going to select from them. Perfect guacamole and spicy grilled
3

4
00:00:18.660 --> 00:00:23.580
chicken tacos and we want to try to load
up our Recipe data model as much as
4

5
00:00:23.580 --> 00:00:28.500
possible with realistic data using these
sites. So we can see that we have a
5

6
00:00:28.500 --> 00:00:37.620
couple of challenges here. So we have
teaspoons, tablespoons, peaches. So we do
6

7
00:00:37.620 --> 00:00:42.270
need to add in at least one more
unit of measure. I don't remember if I
7

8
00:00:42.270 --> 00:00:48.570
added a dash or not but take these
ingredients as much as possible and
8

9
00:00:48.570 --> 00:00:56.360
we'll add those in to our recipes and
then we can add in the directions also
9

10
00:00:56.360 --> 00:01:02.910
into a large text field. So we are going
to go ahead and evolve that and then we
10

11
00:01:02.910 --> 00:01:08.580
also have the spicy grilled chicken
tacos. That one's a little more complex
11

12
00:01:08.580 --> 00:01:12.630
because we do have four chicken and to
serve. Let's go ahead and combine those
12

13
00:01:12.630 --> 00:01:18.270
together into just all one list of
ingredients. We didn't accommodate that
13

14
00:01:18.270 --> 00:01:23.820
in our data model. But we'll try to make
this as realistic as possible. I'm going
14

15
00:01:23.820 --> 00:01:30.960
to toggle over to keynote. Let's go ahead
and play this and so I have the
15

16
00:01:30.960 --> 00:01:34.860
assignment to display a list of recipes. So it's going to emulate quite a bit
16

17
00:01:34.860 --> 00:01:39.930
what we did in early on in the course. What we want to do is take these two
17

18
00:01:39.930 --> 00:01:45.869
recipes, the perfect guacamole and spicy
grilled chicken tacos from
18

19
00:01:45.869 --> 00:01:51.930
simplyrecipes.com for source data and then any
needed unit of measures, we'll add into
19

20
00:01:51.930 --> 00:01:57.899
data.sql. We will use a Bootstrap class
like we did earlier to create the
20

21
00:01:57.899 --> 00:02:04.320
recipes on startup and then we'll create
a service to return the recipe list to a
21

22
00:02:04.320 --> 00:02:09.479
controller and pass that list a Thymeleaf view. Now when you're in the Bootstrap
22

23
00:02:09.479 --> 00:02:16.860
class, I added in those query methods. So
you can get a hold of the
23

24
00:02:16.860 --> 00:02:21.300
categories and unit of measure. So
you'll be able to look those up from the
24

25
00:02:21.300 --> 00:02:26.489
database. So you need to take that
Bootstrap class and inject in an
25

26
00:02:26.489 --> 00:02:33.090
instance of the Spring Data JPA
repositories to get a hold of the
26

27
00:02:33.090 --> 00:02:39.390
objects for unit of measures and
categories. To get a hold of those
27

28
00:02:39.390 --> 00:02:43.650
objects then we will assign those to the
recipe. So try to make that recipe object
28

29
00:02:43.650 --> 00:02:47.519
as complete as possible and if you have
any questions if you run into any
29

30
00:02:47.519 --> 00:02:52.319
roadblocks, try to complete the project
as much as you can and in the next video
30

31
00:02:52.319 --> 00:02:56.880
I will step you through everything that
you need to get this implemented and
31

32
00:02:56.880 --> 00:03:03.799
have realistic recipes displaying on our
index page.
