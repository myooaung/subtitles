WEBVTT
1
00:00:05.140 --> 00:00:05.450
OK.

2
00:00:05.460 --> 00:00:10.110
Didn't wanna get into a discussion about dependency injection without first talking about the SOLID

3
00:00:10.110 --> 00:00:15.210
principles of outrage or hand programming not dependency injection is a very important concept but the

4
00:00:15.210 --> 00:00:22.170
sell it o heap principles really dovetails with it very nicely and both of these are tools to help you

5
00:00:22.170 --> 00:00:23.400
write better code.

6
00:00:23.430 --> 00:00:29.100
When I first started spring framework Google when the first things I documented was Java examples around

7
00:00:29.460 --> 00:00:32.510
solid principles of object oriented programming.

8
00:00:32.520 --> 00:00:38.610
Now these principles do lead you to much better code and you're going to see as I go through this course

9
00:00:38.610 --> 00:00:42.610
I will harp on especially single responsibility principle.

10
00:00:42.610 --> 00:00:45.150
That's the first one in the US of solid.

11
00:00:45.240 --> 00:00:46.510
We will get into that in depth.

12
00:00:46.530 --> 00:00:53.700
But as one of the ones I see Junior level developers violating probably the most and I'll give you some

13
00:00:53.700 --> 00:01:00.450
live examples of my experiences and legacy code bases and why these are bad and why you want to be utilizing

14
00:01:00.450 --> 00:01:02.000
them in your software development.

15
00:01:02.340 --> 00:01:07.410
And as we get into the Dependency Injection keep these in the back in your mind because you'll start

16
00:01:07.410 --> 00:01:12.930
to see how all this dovetails together and will lead you to producing better code.

17
00:01:12.930 --> 00:01:15.340
Further down the road using the spring framework.

18
00:01:15.440 --> 00:01:15.710
All right.

19
00:01:15.720 --> 00:01:22.200
In this presentation we are going to talk about the solid principles of object oriented programming.

20
00:01:22.260 --> 00:01:29.610
Now these principles go back to around March of 1995 when Robert also known as Uncle Bob Martin started

21
00:01:29.610 --> 00:01:31.050
writing about it.

22
00:01:31.430 --> 00:01:37.370
He started off in writing in several software journals and ultimately these principles got worked into.

23
00:01:37.500 --> 00:01:44.550
Very popular book called agile software development principles patterns and practices and initially

24
00:01:44.550 --> 00:01:47.480
he did not call them solid principles.

25
00:01:47.490 --> 00:01:52.100
MICHAEL feathers is actually a credited with coming up with a solid acronym for these.

26
00:01:52.260 --> 00:01:57.090
Now why do you want to use these solid principles of object oriented programming.

27
00:01:57.090 --> 00:01:59.720
Oh he is a very very powerful concept.

28
00:01:59.730 --> 00:02:07.440
It's a great paradigm when it comes to writing software but it is not the magic path to high quality

29
00:02:07.440 --> 00:02:08.410
software.

30
00:02:08.400 --> 00:02:15.270
Overall these five principles will focus on dependency management and Uncle Bob points out that poor

31
00:02:15.270 --> 00:02:21.730
dependency management is often the path to code that is brittle fragile and very hard to change.

32
00:02:21.810 --> 00:02:28.560
Now on the other hand when you have proper dependency management the quality of the code that you get

33
00:02:28.560 --> 00:02:31.350
is much better and it becomes much easier to maintain.

34
00:02:31.350 --> 00:02:38.280
So Bob being a thought leader in the agile space where you want quality software that's easy to maintain

35
00:02:38.400 --> 00:02:40.630
and things that you can develop quickly.

36
00:02:40.650 --> 00:02:43.040
Obviously this is something very important to him.

37
00:02:43.110 --> 00:02:47.610
So and when you do violate these principles you do get yourself in trouble.

38
00:02:47.610 --> 00:02:53.320
Quickly I've seen plenty of examples out there where you just have code that is very hard hard to maintain.

39
00:02:53.950 --> 00:03:00.580
No the first one up is we have the Single Responsibility Principle and get a little graphic here.

40
00:03:00.750 --> 00:03:03.000
Just because you can doesn't mean you should.

41
00:03:03.060 --> 00:03:08.040
And I see a lot of legacy code that is just awful like this.

42
00:03:08.040 --> 00:03:11.780
So let's take a little closer look at the Single Responsibility Principle.

43
00:03:11.860 --> 00:03:15.200
It states that every class should have a single responsibility.

44
00:03:15.420 --> 00:03:19.440
There should never be more than one reason for a class to change.

45
00:03:19.500 --> 00:03:24.660
In general your classes should be small no more than a screen full of code is a good rule of thumb.

46
00:03:24.660 --> 00:03:28.910
That's actually like one of Uncle Bob's out of a I believe as he wrote it in clean code.

47
00:03:28.980 --> 00:03:30.750
Definitely avoid God classes.

48
00:03:30.840 --> 00:03:36.480
And then if you had to have a big class look for ways to split it into smaller classes and this is a

49
00:03:36.690 --> 00:03:45.630
principal and I see this violated frequently and legacy code bases I've seen child classes running inside

50
00:03:45.630 --> 00:03:51.450
a production where you had a class and a single method in that class that was almost two thousand lines

51
00:03:51.570 --> 00:03:52.020
long.

52
00:03:52.020 --> 00:03:59.070
So you can imagine having a 2009 method with all the business logic and all the statements stuff like

53
00:03:59.070 --> 00:04:01.770
that is absolutely impossible to test properly.

54
00:04:02.180 --> 00:04:03.630
You have too many variance.

55
00:04:03.630 --> 00:04:08.910
No way that you're going to get proper test coverage out of it so you don't want to be doing too much

56
00:04:09.300 --> 00:04:11.690
and you'll hear me going forward in the class.

57
00:04:11.710 --> 00:04:20.220
Legal responsibility is a very big one and it is frequently violated by new developers where they don't

58
00:04:20.220 --> 00:04:22.790
want to be using additional classes.

59
00:04:22.920 --> 00:04:26.730
They feel it's too much overhead to create another class and trust me.

60
00:04:26.730 --> 00:04:33.300
Object creation in Java is very cheap relatively speaking so not something to be worried about your

61
00:04:33.300 --> 00:04:35.980
code quality and your code maintain ability.

62
00:04:36.030 --> 00:04:37.910
That's far more important.

63
00:04:37.940 --> 00:04:42.340
So the next principle we want to look at is the open closed principle.

64
00:04:42.390 --> 00:04:47.190
So that's that's kind of funny where the captain there says open chest surgery is not needed when you're

65
00:04:47.190 --> 00:04:48.440
just putting on a coat.

66
00:04:48.480 --> 00:04:53.520
So this is a one that can often get in trouble and easily confused.

67
00:04:53.640 --> 00:05:01.600
So Uncle Bob says that your classes should be open for extension but also closer modification so you

68
00:05:01.600 --> 00:05:06.290
should be able to extend the classes for behavior but you don't want to be modifying it.

69
00:05:06.340 --> 00:05:12.460
So what this means is that you your class should have private variables with getters and setters and

70
00:05:12.910 --> 00:05:16.480
the specification there is only when you need them.

71
00:05:16.540 --> 00:05:21.310
So you shouldn't be exposing every property through a getter and setter only the ones that you need

72
00:05:21.310 --> 00:05:21.520
to.

73
00:05:21.520 --> 00:05:27.130
So you'll see in the code that we did like the Entity class that was a po.

74
00:05:27.130 --> 00:05:30.930
So that was a very simple example where we did have just getters and setters.

75
00:05:30.940 --> 00:05:37.810
But if you remember like the controller that we created we had a property and therefore a repository

76
00:05:38.380 --> 00:05:39.910
and we put a constructor there.

77
00:05:39.930 --> 00:05:41.380
But we didn't expose that.

78
00:05:41.380 --> 00:05:48.160
Would they get her and set her another good practice to use where you have a common base classes to

79
00:05:48.160 --> 00:05:49.570
make it an abstract class.

80
00:05:50.050 --> 00:05:54.120
And then also specify using abstract methods which you expect to be implemented.

81
00:05:54.130 --> 00:06:01.400
But then you can encapsulate the common code inside that abstract base class the next one we have to

82
00:06:01.400 --> 00:06:07.250
look at what's called the substitution principle and the little caption there says that looks like a

83
00:06:07.250 --> 00:06:09.950
duck quacks like a duck but needs battery.

84
00:06:10.010 --> 00:06:11.790
You probably got the wrong abstraction.

85
00:06:11.840 --> 00:06:18.330
And I've seen this a lot too this was founded by Barbara Lipscomb back in 1998.

86
00:06:18.330 --> 00:06:19.680
So not a new idea.

87
00:06:19.800 --> 00:06:23.640
So we're talking back with C++ and smalltalk.

88
00:06:24.210 --> 00:06:29.940
So I'm just saying programs should be replaceable with instances of their subtypes without altering

89
00:06:29.940 --> 00:06:32.640
the correctness of the program.

90
00:06:32.730 --> 00:06:39.680
And a quick rule of thumb on this violations will also fail the is a test though the basic object in

91
00:06:39.680 --> 00:06:48.660
a program test is is it so like Square is a rectangle however a rectangle is not a square.

92
00:06:48.660 --> 00:06:56.370
So if you're going to be doing calculations like a circle is a shape but a shape it's not a circle.

93
00:06:56.370 --> 00:07:02.210
So if you're doing calculations on this obviously some of those methods would have to change that.

94
00:07:02.280 --> 00:07:07.620
Their logic and you would get different results because you're failing that is a test.

95
00:07:07.620 --> 00:07:13.080
So it's important that as you extend out your classes you're you're not introducing different behavior

96
00:07:14.920 --> 00:07:18.090
Next up is interface segregation principle.

97
00:07:18.180 --> 00:07:26.270
A LITTLE JOKE THERE YOU WANT ME TO PLUG THIS IN WHERE so interface segregation principle says makes

98
00:07:26.420 --> 00:07:34.310
fine grained interfaces that are client specific using many client specific interfaces better than one

99
00:07:34.310 --> 00:07:36.050
general purpose interface.

100
00:07:36.110 --> 00:07:40.190
You want to keep your components focused and minimize the dependencies between them.

101
00:07:40.790 --> 00:07:46.430
And one thing that you want look at this is how it relates to the Single Responsibility Principle.

102
00:07:46.460 --> 00:07:48.620
So I got and I avoid.

103
00:07:48.630 --> 00:07:49.640
God interfaces.

104
00:07:49.820 --> 00:07:56.240
So sometimes people will try to make the interfaces just too generic and they'll start overloading methods

105
00:07:56.240 --> 00:08:03.920
or just really making the API overly complex when ideally there should be more than one interface there.

106
00:08:03.920 --> 00:08:10.340
So this is saying make them more specific to your use case and avoid those big general purpose ones

107
00:08:10.640 --> 00:08:14.600
because once you start doing that it becomes a very slippery slope.

108
00:08:15.970 --> 00:08:23.500
Next up is dependency inversion principle and a caption there is why would you solar a lamp directly

109
00:08:23.500 --> 00:08:26.650
to the wall rather than using a plug.

110
00:08:26.650 --> 00:08:29.360
So this is an important one as well.

111
00:08:29.770 --> 00:08:34.690
And it takes you a little bit to fully grasp what's going on here.

112
00:08:34.690 --> 00:08:41.010
So the dependency inversion principle says abstractions should not depend upon the details and the details

113
00:08:41.010 --> 00:08:43.230
should depend upon the abstractions.

114
00:08:43.240 --> 00:08:49.420
So this is trying to make a distinction between the higher level and lower level objects and they're

115
00:08:49.420 --> 00:08:56.050
going to depend on the same abstract interaction so the mission share dependency.

116
00:08:56.050 --> 00:09:01.750
So this about keeping them independent but having a clearly defined API between them.

117
00:09:02.680 --> 00:09:07.250
And this is easy to easily confused with dependency injection.

118
00:09:07.540 --> 00:09:11.660
And that is actually how one object will get a reference to another object.

119
00:09:11.890 --> 00:09:14.200
So it's not how they're composed.

120
00:09:14.830 --> 00:09:18.350
So the very important distinction there.

121
00:09:18.370 --> 00:09:23.470
Now in summary the solid principles of O P will lead you to better quality code.

122
00:09:23.620 --> 00:09:28.630
Your code will become more testable and it's going to be easier to maintain and if he knows the key

123
00:09:28.660 --> 00:09:35.140
things are these slides and these principles is to avoid tight coupling in your code so avoid these

124
00:09:35.140 --> 00:09:42.280
big massive classes of these overly complex God classes and God interfaces and keep things very concise

125
00:09:42.400 --> 00:09:49.310
and targeted and use the tools of 0 for you yourself to produce better quality code.
