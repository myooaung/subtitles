WEBVTT
0
1
00:00:04.190 --> 00:00:08.910
Now in this video we're going to take a
look at using Spring's feature of
1

2
00:00:08.910 --> 00:00:12.840
Component Scans and Component Scan is a way
for Spring to look at your directory
2

3
00:00:12.840 --> 00:00:17.850
structure or your package structure, I
should say and determine and find Spring
3

4
00:00:17.850 --> 00:00:20.789
Beans in that. So it's going to be
looking for classes that have been annotated
4

5
00:00:20.789 --> 00:00:25.859
with Spring annotations that to declare
them either as a Configuration, a Java
5

6
00:00:25.859 --> 00:00:29.460
Configuration or in our case, what we're
going to be looking at is Spring Beans
6

7
00:00:29.460 --> 00:00:33.420
that we declared through the annotations
for Services and Controllers and
7

8
00:00:33.420 --> 00:00:38.010
Repositories and what not. So Spring is
going to look at specific packages for
8

9
00:00:38.010 --> 00:00:44.700
that and a very beginner mistake that I
see happen a lot is Spring Boot does by
9

10
00:00:44.700 --> 00:00:49.559
default, it looks at its own package and
does a component scan down but it
10

11
00:00:49.559 --> 00:00:55.020
doesn't scan the world and it's on
purpose for that because if you have a
11

12
00:00:55.020 --> 00:00:59.989
large project and you brought in a lot
of stuff to scan tens of thousands of
12

13
00:00:59.989 --> 00:01:04.409
classes it's going to take some time. So
you do want to be very specific and
13

14
00:01:04.409 --> 00:01:07.680
targeted where you're telling Spring
scan. So I'm going to switch over to
14

15
00:01:07.680 --> 00:01:12.570
IntelliJ now. We're going to take our
Dependency Injection project that we've
15

16
00:01:12.570 --> 00:01:16.380
been working out and we're going to
refactor it to show you some component
16

17
00:01:16.380 --> 00:01:20.729
scanning. Alright in this section I'm
going to show you a demonstration of
17

18
00:01:20.729 --> 00:01:25.830
setting up the Component scanning. So I'm
back in our little project that we've
18

19
00:01:25.830 --> 00:01:31.290
been using for demonstrating Dgonnaependency
Injection with Spring and if you look at
19

20
00:01:31.290 --> 00:01:36.119
how we have the project laid out. We
have the SpringBootapplication. This is
20

21
00:01:36.119 --> 00:01:41.520
running the Spring and this main class
and this annotation here, the Spring Boot
21

22
00:01:41.520 --> 00:01:47.880
annotation, what he is saying is, I'm
going to do a Component Scan from
22

23
00:01:47.880 --> 00:01:53.579
this package and down. So he's going to
see everything in guru.springframework
23

24
00:01:53.579 --> 00:01:58.619
and then any package is
declared under that and this is
24

25
00:01:58.619 --> 00:02:03.719
something I've seen people have a lot of
trouble understanding. So if I come over
25

26
00:02:03.719 --> 00:02:10.140
here and if I refactor things and I move
the services down under guru. So I'm just
26

27
00:02:10.140 --> 00:02:12.800
going to do this.
27

28
00:02:13.140 --> 00:02:21.489
Refactor that. So now if we look at the
Spring Context, the way things are
28

29
00:02:21.489 --> 00:02:24.099
set up,
everything's been moved to guru.services.
29

30
00:02:24.099 --> 00:02:32.560
Not exactly what I wanted to do
IntelliJ. That looks right I'm sorry that
30

31
00:02:32.560 --> 00:02:37.120
is exactly what I want to do. It just
looked funny for a second. So a little screen
31

32
00:02:37.120 --> 00:02:44.739
refresh. So now if I go to run it, so
let's go ahead and run this and I'll
32

33
00:02:44.739 --> 00:02:52.510
show you how everything is not found. So
now we're getting errors saying that
33

34
00:02:52.510 --> 00:02:56.049
the GreetingService can't be found and
this is exactly what happens if you
34

35
00:02:56.049 --> 00:03:00.430
declare something outside that Spring
Boot structure. Now to fix this I'm going
35

36
00:03:00.430 --> 00:03:03.900
to show you exactly how we can fix this.
36

37
00:03:04.470 --> 00:03:10.840
Now what we want, we want to include the
services package. So I come up here and
37

38
00:03:10.840 --> 00:03:18.909
use annotation, @ComponentScan and this
will take in, actually has several
38

39
00:03:18.909 --> 00:03:23.199
options when it comes up here and it
shows us base packages or base classes.
39

40
00:03:23.199 --> 00:03:27.220
You can actually declare a class in here
and we'll do Component Scan on that
40

41
00:03:27.220 --> 00:03:32.590
class and the package is down from that
class. So everything is important to
41

42
00:03:32.590 --> 00:03:37.510
remember when we're doing the Component
Scan, it is going to work on the whole
42

43
00:03:37.510 --> 00:03:41.889
package tree. So it's not just that
package but any packages below it. So
43

44
00:03:41.889 --> 00:03:47.019
what I'm going to do is I'm going to use
basePackages here and we'll look at
44

45
00:03:47.019 --> 00:03:52.090
that and we'll add in that guru.services package and I'll show you how
45

46
00:03:52.090 --> 00:03:55.829
to do that. We're going to do an array
46

47
00:03:56.400 --> 00:04:07.599
basePackages, now we'll take an array of
strings. So now we have this clear
47

48
00:04:07.599 --> 00:04:11.620
like that,
so now Spring is going to see that and IntelliJ
48

49
00:04:11.620 --> 00:04:17.650
is not happy about that. Oh basically so
I mistakenly took basePackage Casses
49

50
00:04:17.650 --> 00:04:21.030
and we want basePackages.
50

51
00:04:22.789 --> 00:04:30.060
So a good catch by IntelliJ there. Now if
I run this, our Spring Configuration is
51

52
00:04:30.060 --> 00:04:37.440
going to be happy again because it's
going to see those classes. And I ran into
52

53
00:04:37.440 --> 00:04:44.699
an error here. So no myController. So
let's go ahead and add in the other
53

54
00:04:44.699 --> 00:04:59.430
package. So in doing that, when I declared
the basePackages, I overrode the default
54

55
00:04:59.430 --> 00:05:05.820
behavior of Spring Boot and in doing
that, Spring Boot was no longer looking
55

56
00:05:05.820 --> 00:05:11.220
in Spring or in guru.springframework. It was only looking in guru.services
56

57
00:05:11.220 --> 00:05:15.930
that's why I got that error
there. So that's why I had and the guru.springframeword
57

58
00:05:15.930 --> 00:05:21.210
dand that this is a
pretty handy way to declare where Spring
58

59
00:05:21.210 --> 00:05:26.849
wants to go and do a package scan and
just to clarify. Now anything, if I have
59

60
00:05:26.849 --> 00:05:31.979
you can see that it did pick up the
controllers. I'm sorry it did pick up the
60

61
00:05:31.979 --> 00:05:37.110
controller. So you can see how it's going
down into the package tree. So very
61

62
00:05:37.110 --> 00:05:42.090
important to remember that this is
a base and it's going to search from
62

63
00:05:42.090 --> 00:05:47.400
that package and down. Right so you
get an idea of how Components Scanning can
63

64
00:05:47.400 --> 00:05:52.250
work now. So you saw me make the mistake
with basePackages instead of base classes and
64

65
00:05:52.250 --> 00:05:57.330
IntelliJ caught that. I didn't catch on
screen at first but using classes is
65

66
00:05:57.330 --> 00:06:02.310
another alternative that we could use. What do I do in the field, I will go back
66

67
00:06:02.310 --> 00:06:07.080
and forth. I am settled on one or the
other, some developers prefer one, some
67

68
00:06:07.080 --> 00:06:12.630
don't. if somebody's using one already
I will follow suit and use that general
68

69
00:06:12.630 --> 00:06:16.949
rule of thumb but you can actually mix them. So I've seen that done too.
69

70
00:06:16.949 --> 00:06:22.050
So you have the option to use
either the package name as a string or
70

71
00:06:22.050 --> 00:06:26.759
pick a class and declare that class in
there. I don't think it really
71

72
00:06:26.759 --> 00:06:29.570
matters what you use.
