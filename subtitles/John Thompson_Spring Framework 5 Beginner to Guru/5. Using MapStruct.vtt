WEBVTT
0
1
00:00:04.640 --> 00:00:08.639
Alright. In this video, we are gonna look
at setting up the MapStruct library
1

2
00:00:08.639 --> 00:00:14.130
for our project, so we can start using
MapStruct. And what we need to do is we
2

3
00:00:14.130 --> 00:00:18.960
need to include in this new dependency
the mapstruct-jdk8.
3

4
00:00:18.960 --> 00:00:23.490
So I'm doing everything on Java 8 and
above. And that's gonna work in
4

5
00:00:23.490 --> 00:00:28.410
conjunction with Project Lombok as well.
And we have a little more configuration
5

6
00:00:28.410 --> 00:00:34.079
here. Now, it does generate classes for us,
kind of like Project Lombok will
6

7
00:00:34.079 --> 00:00:37.559
enhance the classes. This is actually
gonna generate classes based on the
7

8
00:00:37.559 --> 00:00:42.840
interface that we did. Now I saw examples
out on the the web of setting this up
8

9
00:00:42.840 --> 00:00:47.579
with Project Lombok, where I'm just gonna highlight, this is like taking right
9

10
00:00:47.579 --> 00:00:51.809
from the MapStruct project, where they're
using Project Lombok. I was not able to
10

11
00:00:51.809 --> 00:00:58.230
get this working. But here, we do have to
set up the compiler plugin. And with the
11

12
00:00:58.230 --> 00:01:03.149
annotation processors, you do need to add
both of them. So the way the compiler
12

13
00:01:03.149 --> 00:01:07.229
plugin works, if you don't specify any,
it's gonna take everything that it
13

14
00:01:07.229 --> 00:01:12.210
finds on it. The classpath, allegedly, but
I couldn't get it working without it. But
14

15
00:01:12.210 --> 00:01:16.259
if you just specify MapStruct, then
Project Lombok does not get picked up
15

16
00:01:16.259 --> 00:01:20.250
because you didn't specify it explicitly.
So I did have to go ahead and say that.
16

17
00:01:20.250 --> 00:01:26.939
In this project Lombok version, I think
I can click through to it, comes out of
17

18
00:01:26.939 --> 00:01:31.079
this Spring Boot dependencies parent
POM. So that this is gonna get inherited
18

19
00:01:31.079 --> 00:01:35.790
from Spring Boot. So, as we upgrade our
Spring Boot versions, we'll keep that
19

20
00:01:35.790 --> 00:01:40.470
inherited version but the MapStruct is
not a managed dependency by Spring Boot
20

21
00:01:40.470 --> 00:01:45.060
at this time. So this sets it up. And then,
I'm gonna show you here, the default
21

22
00:01:45.060 --> 00:01:49.259
component model is none and I'm setting
it to Spring. So we'll get a Spring
22

23
00:01:49.259 --> 00:01:53.310
component, and let's go ahead and take a
look at the CategoryMapper that I've
23

24
00:01:53.310 --> 00:01:57.060
created. So this is the Mapper and we
actually do not need this annotation
24

25
00:01:57.060 --> 00:02:01.409
here. I'm just gonna delete that for
confusion. The Mapping source and target
25

26
00:02:01.409 --> 00:02:06.689
is a way to have property names that are
different. And actually, I'm gonna show
26

27
00:02:06.689 --> 00:02:12.000
you a mistake that I made setting this
up. So here's the CategoryDTO and I had
27

28
00:02:12.000 --> 00:02:16.540
forgotten to add in a
Lombok annotation. So let's go into Maven.
28

29
00:02:16.540 --> 00:02:22.240
I'm gonna do a clean, and then, just a
compile. The compile is gonna
29

30
00:02:22.240 --> 00:02:27.430
trigger the generation in the class. And
I ran into some prompts here. So we're
30

31
00:02:27.430 --> 00:02:30.990
gonna take a look at the target. We
wanna look at generated sources. And
31

32
00:02:30.990 --> 00:02:35.260
this is a code, that's been generated by
the MapStruct plugin. And you can see
32

33
00:02:35.260 --> 00:02:40.240
this is now sending any properties therein.
I troubleshot those for every single
33

34
00:02:40.240 --> 00:02:45.130
amount of time before I realized that I
had forgotten to add in that annotation.
34

35
00:02:45.130 --> 00:02:50.530
So it was working properly because my
class wasn't getting enhanced by Project
35

36
00:02:50.530 --> 00:02:58.090
Lombok. So now, if I come in, do another
clean, and let's do another compile, you
36

37
00:02:58.090 --> 00:03:02.080
can see that that does get built
properly. And let's go inspect that
37

38
00:03:02.080 --> 00:03:08.350
generate class again. Now we can see the
code doe is generated because once I add
38

39
00:03:08.350 --> 00:03:13.360
back that annotation for Project Lombok,
it does set up the getters and setters
39

40
00:03:13.360 --> 00:03:18.700
on the DTO. And you can see how MapStuct
is automatically matching up the
40

41
00:03:18.700 --> 00:03:22.960
property names and generating this code
for us. So as long as your property names
41

42
00:03:22.960 --> 00:03:27.310
match, you really don't have much to do.
It's actually kind of a cool part, and
42

43
00:03:27.310 --> 00:03:33.880
then also, I wanna point out that I did
pass in this compiler argument for
43

44
00:03:33.880 --> 00:03:38.920
Spring here and there's several MapStuct
compiler arguments that we can utilize.
44

45
00:03:38.920 --> 00:03:44.050
This is the most interesting one for
us as Spring developers because that is
45

46
00:03:44.050 --> 00:03:48.610
gonna add this in as a Component. So now,
this Mapper is gonna get picked up as a
46

47
00:03:48.610 --> 00:03:53.170
Spring Component, a Spring Bean get
mapped into our Spring Context for us
47

48
00:03:53.170 --> 00:03:56.260
so we can utilize it, just like a
regular Spring Bean. It's actually a
48

49
00:03:56.260 --> 00:04:02.410
really nice feature of Project Lombok.
And then of course, I did write a unit
49

50
00:04:02.410 --> 00:04:08.350
test for this, and let's go ahead and run
that unit test, and will verify that
50

51
00:04:08.350 --> 00:04:14.410
things are running, and this is gonna
be utilizing the instance of that. So we
51

52
00:04:14.410 --> 00:04:18.489
can see that the test does pass and that
this is just a little helper here and
52

53
00:04:18.489 --> 00:04:23.890
you write that on your interface. You say
INSTANCE Mappers, getMapper, and then,
53

54
00:04:23.890 --> 00:04:28.250
pass it in
the class file in the interface and it
54

55
00:04:28.250 --> 00:04:32.630
will automatically generate that class
and give you an instance of it. In
55

56
00:04:32.630 --> 00:04:38.210
the unit tests, note that I did not bring
in the Spring Context so that I'm just
56

57
00:04:38.210 --> 00:04:44.420
getting a hold on this. So this is keeping it
as a pure unit test. And I wanna show
57

58
00:04:44.420 --> 00:04:49.430
you one refactoring here. So one thing I
did, I did this on purpose because I
58

59
00:04:49.430 --> 00:04:55.840
wanna show you this. So I wanna come
in here and do a Refactor and Extract.
59

60
00:04:55.840 --> 00:05:05.480
And let's make that a constant. And we'll
just call it name. And I did not pick it up
60

61
00:05:05.480 --> 00:05:16.820
there. So I'll replace that name also. And
let's also do this with that. There we are.
61

62
00:05:16.820 --> 00:05:21.320
That's what I should have done
before. I replace all occurrences. Now
62

63
00:05:21.320 --> 00:05:25.610
I'll do both of those. And this is a good
habit to get into when you're setting
63

64
00:05:25.610 --> 00:05:30.350
properties that you wanna make sure
that or equal use. Use variables, do
64

65
00:05:30.350 --> 00:05:34.820
public static final on them, so they
can't change, and now, we are making sure
65

66
00:05:34.820 --> 00:05:38.060
that these values do equal. So that's
just good habit to get into when you're
66

67
00:05:38.060 --> 00:05:40.960
writing your unit test.
