WEBVTT
0
1
00:00:04.100 --> 00:00:08.370
Alright! Now, in this video, we are going
to take a look at updating a category
1

2
00:00:08.370 --> 00:00:13.019
and setting up the controller actions to
do that. This is going to look a lot
2

3
00:00:13.019 --> 00:00:19.050
like the regular Spring MVC stuff. So,
let's go ahead and implement the mapping
3

4
00:00:19.050 --> 00:00:24.660
for that. Now, we want to return back a
mono of the updated category. So, that's
4

5
00:00:24.660 --> 00:00:29.970
going to be our return type. We'll just be
really creative and call this update for
5

6
00:00:29.970 --> 00:00:35.880
the controller method. And now, what we
want to do is take in a String ID and
6

7
00:00:35.880 --> 00:00:40.680
also then the Category, and we'll
decorate this with the annotations for
7

8
00:00:40.680 --> 00:00:44.309
WebFlux here
in just a second. And in this case, we are
8

9
00:00:44.309 --> 00:00:50.520
going to take in the category and set
the ID and the ID value passed in.
9

10
00:00:50.520 --> 00:00:54.260
Then, we will return back.
10

11
00:00:55.430 --> 00:01:02.960
We're going to save that entity.
I'm going to hover over this and we can
11

12
00:01:02.960 --> 00:01:08.660
see that the Spring Data Reactive
Repository for MongoDB is going to
12

13
00:01:08.660 --> 00:01:12.920
return back a Mono of the Category, so
that's what we want to be returning back
13

14
00:01:12.920 --> 00:01:18.440
here. So now, let's go ahead and decorate
this, or working with a Spring WebFlux.
14

15
00:01:18.440 --> 00:01:23.710
So, we're going to do it PutMapping, and
in this case, we'll go ahead and just.
15

16
00:01:23.710 --> 00:01:30.860
It's going to be the exact same URL, that
we are dealing with for gets. But now, we
16

17
00:01:30.860 --> 00:01:35.900
are going to do a PUT. So,api/v1/categories
and we are going to extract out the ID
17

18
00:01:35.900 --> 00:01:41.210
value. And just like the get, we are going
to say...
18

19
00:01:41.210 --> 00:01:47.140
In here, we want to tell WebFlux that
that's going to be in the body,
19

20
00:01:47.140 --> 00:01:52.460
using their RequestBody annotation. So,
you can see right here, this here really
20

21
00:01:52.460 --> 00:01:57.049
isn't utilizing reactive types, and to be
honest, I don't know how reactive that is
21

22
00:01:57.049 --> 00:02:01.549
underneath the covers within the 
WebFlux framework. So, I need to research
22

23
00:02:01.549 --> 00:02:07.700
that personally. And this is something
here is really being done to
23

24
00:02:07.700 --> 00:02:12.530
maintain compatibility with the Spring
MVC API. Know that, the Spring team is
24

25
00:02:12.530 --> 00:02:16.160
definitely paying attention to that. I'm
using these annotations and trying to
25

26
00:02:16.160 --> 00:02:21.440
make this as much as possible work just
like Spring MVC, so people can have an
26

27
00:02:21.440 --> 00:02:26.840
easier time adopting it. So, I would
not be surprised if we see some changes
27

28
00:02:26.840 --> 00:02:30.980
here, some enhanced capabilities to get a
leverage to those reactive types and
28

29
00:02:30.980 --> 00:02:34.160
functional programming a little bit more.
That could change in the future. But
29

30
00:02:34.160 --> 00:02:41.209
as right now, at the time of
recording, it is December 2017 and Spring
30

31
00:02:41.209 --> 00:02:45.680
Boot M.7 is just out. So, Spring 5 is
still pretty new, The reactive types is
31

32
00:02:45.680 --> 00:02:50.090
still pretty new. So, this could very much
change. Now, with that said, let's go ahead
32

33
00:02:50.090 --> 00:02:56.040
and write our unit tests for those. So,
I'm going to come over here to my test,
33

34
00:02:56.040 --> 00:03:02.220
and we'll create a new test method, and
we'll call that test createAndUpdate,
34

35
00:03:02.220 --> 00:03:09.380
and we are going to say given categoryRepository.save. And we're going to say
35

36
00:03:11.180 --> 00:03:14.170
Category.class.
36

37
00:03:17.480 --> 00:03:23.050
And this time, we say Mono. Just create
and
37

38
00:03:23.050 --> 00:03:26.500
so we're really not testing the
properties there, so we just return
38

39
00:03:26.500 --> 00:03:29.580
back an empty object.
39

40
00:03:31.540 --> 00:03:37.420
Oh it should be just.
There. Now, we're happy.
40

41
00:03:37.420 --> 00:03:42.180
I'm going to steal this right here, just
to expedite things a little bit. So,
41

42
00:03:42.180 --> 00:03:47.220
that's what we want to update. Got that
42

43
00:03:48.760 --> 00:03:56.970
update. Now, let's go ahead and setup her.
So now this time, we want to do a put. So
43

44
00:03:56.970 --> 00:04:01.980
remember, we are testing the put action
for the update.
44

45
00:04:01.980 --> 00:04:06.740
So, let's go and copy that URI value.
45

46
00:04:19.959 --> 00:04:24.460
So here, we have a little bit different
pattern than we did with the post. So we
46

47
00:04:24.460 --> 00:04:29.229
are doing a put against the same URI. And
this time, we want to actually put in a
47

48
00:04:29.229 --> 00:04:35.680
value here. So, just some ID value is fine.
We're really not testing that, but we do
48

49
00:04:35.680 --> 00:04:38.979
pass in the category to update. Now, I get
a little typo there. Let's go ahead and
49

50
00:04:38.979 --> 00:04:41.250
fix that.
50

51
00:04:42.100 --> 00:04:46.030
Then, we do the exchange and we're just
saying expect status there. So, the web
51

52
00:04:46.030 --> 00:04:49.690
TestClient does have some pretty robust
capabilities. I'm not getting into a lot
52

53
00:04:49.690 --> 00:04:54.520
of those right now, but we are just
saying, I want to do a put with a
53

54
00:04:54.520 --> 00:04:59.650
category to update, and we are expecting
back a status of okay. And this is in
54

55
00:04:59.650 --> 00:05:06.120
contrast is created. So, let's go ahead
and run that.
55

56
00:05:07.760 --> 00:05:12.500
Okay, so our test is successfully passing.
So, just to recap, what's going on here
56

57
00:05:12.500 --> 00:05:18.260
for your your benefit, we are doing a PutMapping against api/v1/categories and
57

58
00:05:18.260 --> 00:05:24.460
that ID value, and we have a Mono being
returned back by the update method, and
58

59
00:05:24.460 --> 00:05:31.430
that method is going to try to parse in
a PathVariable off the URL, for the ID
59

60
00:05:31.430 --> 00:05:37.790
value, and then also, the RequestBody of
the Category, and we are going to take
60

61
00:05:37.790 --> 00:05:42.740
that Category that gets passed in set
the ID value of it, and then, we are going
61

62
00:05:42.740 --> 00:05:48.800
to save that so that this is processing
an update. And then, in our tests, we have
62

63
00:05:48.800 --> 00:05:54.370
a fairly simple test here. So, on line 57,
you can see that we are setting up the
63

64
00:05:54.370 --> 00:06:00.240
Mockito Mock, the saveAll, and actually,
that should be...
64

65
00:06:00.240 --> 00:06:05.729
That's actually on the wrong line. I'm
sorry. On line 71 72, we are setting up
65

66
00:06:05.729 --> 00:06:10.680
the Mockito Mock for a save. Supposed to
saveAll. So, we are saying save any
66

67
00:06:10.680 --> 00:06:14.190
Category, so we are taking any Category
cuts and they were not doing any
67

68
00:06:14.190 --> 00:06:19.889
validation of what's being passed in, and
we are going to return back a Mono ,and
68

69
00:06:19.889 --> 00:06:24.360
we're not testing the Mono being
returned back in this particular test.
69

70
00:06:24.360 --> 00:06:29.460
So, we can just returned back an empty
object to keep everything happy. And then,
70

71
00:06:29.460 --> 00:06:34.560
on line 75, we're setting up the object
that we're going to pass in. Now, the web
71

72
00:06:34.560 --> 00:06:39.570
TestClient is going to take this object
and parse it into JSON, and then, exercise
72

73
00:06:39.570 --> 00:06:44.880
our API. Make sure that all the
bindings are working properly for us. So,
73

74
00:06:44.880 --> 00:06:50.190
it works a lot like the MockMvc client.
So, nice little utility here for testing
74

75
00:06:50.190 --> 00:06:55.139
because it is exercising a lot of the
HTTP stuff for us. So then, we do take
75

76
00:06:55.139 --> 00:06:59.610
that object, it gets converted. We run the
exchange using the controller methods
76

77
00:06:59.610 --> 00:07:04.349
and we're just doing simple assertions
here to expect back the status. Make sure
77

78
00:07:04.349 --> 00:07:09.750
that it passes back and okay. So, let's go
ahead, and I always like to run all the
78

79
00:07:09.750 --> 00:07:13.380
tests after it creates something like
this. So, make sure that our whole our
79

80
00:07:13.380 --> 00:07:18.090
unit tests are passing. So everything is
happy now. So I'm going to commit this
80

81
00:07:18.090 --> 00:07:21.889
into GitHub for your reference.
