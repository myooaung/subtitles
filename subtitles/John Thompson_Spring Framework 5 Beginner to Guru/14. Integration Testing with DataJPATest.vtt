WEBVTT
0
1
00:00:04.009 --> 00:00:08.820
Alright. In this video, we are going to take
a look at a integration testing a little
1

2
00:00:08.820 --> 00:00:14.099
closer. And we're preparing to run a
patch customer and like close this
2

3
00:00:14.099 --> 00:00:20.160
window here. What we wanna do is down
here at the bottom of the screen, is a
3

4
00:00:20.160 --> 00:00:24.300
patch operation works a little
differently from an update, where when we
4

5
00:00:24.300 --> 00:00:28.800
do the patch, we are only going to update
the values that are passed in. So in our
5

6
00:00:28.800 --> 00:00:32.130
example, if we just pass in the firstname, we are gonna update the firstname
6

7
00:00:32.130 --> 00:00:36.540
but lead the lastname alone. And that
means that when you have to go in and
7

8
00:00:36.540 --> 00:00:42.120
implement that logic. So you can see here,
I've got my implementation here. And we
8

9
00:00:42.120 --> 00:00:46.559
go out we lookup by id, and then, we got
a couple of "if" statements here. So not
9

10
00:00:46.559 --> 00:00:49.950
prettiest code in the world. But we do
have to check each properties. See if
10

11
00:00:49.950 --> 00:00:54.059
it's not null. If the client has set 
a value there and then we're gonna accept
11

12
00:00:54.059 --> 00:00:57.180
that. And now, there's several different
ways to implement patch logic. So this is
12

13
00:00:57.180 --> 00:01:01.000
just one way of doing that. But what I
wanna do is set up a test for that.
13

14
00:01:01.000 --> 00:01:05.339
In doing this with mocks, it could get a
little bit ugly. I wanted to do it with
14

15
00:01:05.339 --> 00:01:09.689
the database. I thought it'd be a
good opportunity to show you the data
15

16
00:01:09.689 --> 00:01:14.580
JPA slice. So here, I've set up an
integration test. I've named a
16

17
00:01:14.580 --> 00:01:18.420
CustomerServiceImplIT for
integration test because this is gonna
17

18
00:01:18.420 --> 00:01:23.280
be bringing up the Spring Context, and
we have the annotation @RunWith(SpringRunner.class)
18

19
00:01:23.280 --> 00:01:28.500
and then a @DataJpaTest.
Now this brings up a small subset of the
19

20
00:01:28.500 --> 00:01:33.240
Spring Context, where it only brings up
the repositories. So the CustomerService
20

21
00:01:33.240 --> 00:01:36.240
doesn't get created. The controllers
don't get created. So it just brings up
21

22
00:01:36.240 --> 00:01:40.770
that data layer and we can set that up.
And I also wanted to set up some test
22

23
00:01:40.770 --> 00:01:45.090
data for us to use in the testing. So I'm
getting a handle on the Bootstrap class.
23

24
00:01:45.090 --> 00:01:48.869
I'm creating a new bootstrap class
so we have that same class that loads up
24

25
00:01:48.869 --> 00:01:53.040
the data for us, and I'm gonna pass in
the repository instance of it. And then,
25

26
00:01:53.040 --> 00:01:59.790
ask it to run so that you can see on
line 44 to 46 there is where I'm running
26

27
00:01:59.790 --> 00:02:04.890
that Bootstrap class. I get an object and
then I run it. And that actually creates
27

28
00:02:04.890 --> 00:02:11.060
the data. Now Spring Boot, by default, is
gonna run all these in transactions.
28

29
00:02:11.060 --> 00:02:16.130
And the problem that I had when I'm
setting this up is the database gets
29

30
00:02:16.130 --> 00:02:20.450
cleared every time. So every time we run
that remember the now of the way that
30

31
00:02:20.450 --> 00:02:25.760
JUnit works. The setUp method is gonna
run before each test method. Now what
31

32
00:02:25.760 --> 00:02:30.500
was happening was, I had to go out and
get the id values. And remember, the id is
32

33
00:02:30.500 --> 00:02:34.819
gonna be off a database index. So we
insert them and we'll get one and two
33

34
00:02:34.819 --> 00:02:39.200
and then that rolls back. But that index
doesn't change. That counter doesn't
34

35
00:02:39.200 --> 00:02:43.730
change inside the database. So the next
time we insert data into that auto
35

36
00:02:43.730 --> 00:02:47.690
populating id, it's going to be three and
four. So that's gonna increment with
36

37
00:02:47.690 --> 00:02:52.640
each test run. So you can see there on
line 100, I have an implementation of a
37

38
00:02:52.640 --> 00:02:56.420
get id. It's pretty simple logic.
It's gonna go out do a find all, get
38

39
00:02:56.420 --> 00:02:59.870
a list of it, and just return back the
first one it finds, which is fine for our
39

40
00:02:59.870 --> 00:03:04.819
test. Let me show you the test that
we set up here. So I have a patch
40

41
00:03:04.819 --> 00:03:09.530
CustomerUpdatedFirstName and we go
through we set the firstname to updated
41

42
00:03:09.530 --> 00:03:13.130
name. And then, we go through and also
using a couple new things I don't think
42

43
00:03:13.130 --> 00:03:17.750
I've shown in the class before. We're
using a assertThat and not. So
43

44
00:03:17.750 --> 00:03:23.299
this was introduced not too long ago
in the JUnit community. I say about
44

45
00:03:23.299 --> 00:03:27.260
a year ago, that assertThat was
introduced. Some people prefer to use it.
45

46
00:03:27.260 --> 00:03:31.040
I'll go back and forth depending on the
use case that I have here. So a nice
46

47
00:03:31.040 --> 00:03:36.950
little introduction to using that. And
then, we also have to do just the lastname.
47

48
00:03:36.950 --> 00:03:41.269
So in my test, I'm making sure that
the name, whether it's the firstname
48

49
00:03:41.269 --> 00:03:44.239
that I'm updating or the lastname that
I'm updating, I wanna make sure
49

50
00:03:44.239 --> 00:03:48.109
that that name value of the other one
does not get touched but it's still
50

51
00:03:48.109 --> 00:03:52.370
there so that's what my tests are
verifying. So now, let's go ahead and run
51

52
00:03:52.370 --> 00:03:58.389
all these together. You know I wanna
show you some of the output on this.
52

53
00:03:59.920 --> 00:04:03.940
You can see that the test does take
a little bit longer to run, as far as
53

54
00:04:03.940 --> 00:04:10.569
starting up. And you can see here it
takes almost half a second to start up
54

55
00:04:10.569 --> 00:04:15.370
that first time because it's initializing
the Spring Context. Now the
55

56
00:04:15.370 --> 00:04:18.820
second test runs a lot faster because
the Spring Context is already up and
56

57
00:04:18.820 --> 00:04:24.030
running. So we can see it. Now we have a
lot more data here. We can see how
57

58
00:04:24.030 --> 00:04:30.610
Hibernate is running each time. So we are
logging the output of Hibernate. And for
58

59
00:04:30.610 --> 00:04:34.480
each test, let's take a look at update
lastname. So you can see, that's our
59

60
00:04:34.480 --> 00:04:38.950
Bootstrap running there and that's going
through. And we can see that I'm
60

61
00:04:38.950 --> 00:04:42.160
verifying that I have some output there
as far as the Customer is getting loaded.
61

62
00:04:42.160 --> 00:04:47.230
And when I look at the other test, we can
see that again the Hibernate statements
62

63
00:04:47.230 --> 00:04:52.450
are being run. But again, you can see how
how these tests are running a lot faster.
63

64
00:04:52.450 --> 00:04:56.500
So once you bring up that Spring Context,
your test will run a lot quicker. But
64

65
00:04:56.500 --> 00:05:00.400
I have been giving a lot of strong
preference using unit tests throughout
65

66
00:05:00.400 --> 00:05:05.169
the course because I do like unit tests
they do run a lot faster. Here, we are
66

67
00:05:05.169 --> 00:05:09.040
bringing up a small part of the Spring
Context. But you can see how much
67

68
00:05:09.040 --> 00:05:13.630
longer it takes to run that test. So
that test takes almost a half a second
68

69
00:05:13.630 --> 00:05:17.169
just to start and if you have a lot of
test classes like this that's gonna
69

70
00:05:17.169 --> 00:05:21.520
really drag down the performance of your
overall test suite if you're running a
70

71
00:05:21.520 --> 00:05:25.350
large testing and using integration
tests where you could actually be using
71

72
00:05:25.350 --> 00:05:30.130
unit tests. So again, I just wanna
reiterate you do have several testing
72

73
00:05:30.130 --> 00:05:35.320
options here within Spring Boot. The @DataJpaTest is a real nice annotation to
73

74
00:05:35.320 --> 00:05:38.919
use. It brings up a smaller set of the
Spring Boot Context, where it essentially
74

75
00:05:38.919 --> 00:05:43.750
sets up the data layer. So you're getting
an in-memory database through H2. You are
75

76
00:05:43.750 --> 00:05:47.380
getting the Spring Data Repository cells
do become Spring Manage components. But
76

77
00:05:47.380 --> 00:05:51.130
everything outside of that is not
brought into the context. So you do have
77

78
00:05:51.130 --> 00:05:54.850
to set up your services manually your
controllers, if you're using a controller.
78

79
00:05:54.850 --> 00:05:58.930
At any other Spring Bean, you would need
to set that up manually because it's not
79

80
00:05:58.930 --> 00:06:02.500
gonna get loaded into the Spring
Context. You can see here, in the @Before
80

81
00:06:02.500 --> 00:06:06.100
method, that's exactly what I'm doing. In
the next video, we're gonna take a
81

82
00:06:06.100 --> 00:06:12.510
look at implementing the front end of
this for the patch controller action.
