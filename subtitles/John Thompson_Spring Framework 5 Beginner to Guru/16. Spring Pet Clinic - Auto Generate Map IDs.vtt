WEBVTT
0
1
00:00:04.040 --> 00:00:08.160
In this video, we're going to do a little
bit of refactoring. One thing that's been
1

2
00:00:08.160 --> 00:00:12.900
bothering me a little bit, notice on my
to-do list here, is we are trying to set
2

3
00:00:12.900 --> 00:00:18.199
things up to emulate what's going to
happen in Hibernate and Spring data.
3

4
00:00:18.199 --> 00:00:23.880
Underneath the covers, the id property is
going to be managed for us, and right now
4

5
00:00:23.880 --> 00:00:28.800
our Map implementation, we have to manage
the id property, so not the optimal thing
5

6
00:00:28.800 --> 00:00:32.610
that we want to be doing. I'm trying
to set this up so that we mimic that as
6

7
00:00:32.610 --> 00:00:38.670
much as possible. We can see here on
line 23, the setting of the id property
7

8
00:00:38.670 --> 00:00:44.489
is externalized. Basically, the caller
of this needs to know what id
8

9
00:00:44.489 --> 00:00:49.350
to set. We want to allow the
persistence layer. In this case, it's
9

10
00:00:49.350 --> 00:00:54.300
going to be a HashMap to allow it to
manage that. Obviously, a HashMap
10

11
00:00:54.300 --> 00:01:00.090
can't handle its own ID settings strategy
but we can provide an implementation of
11

12
00:01:00.090 --> 00:01:03.840
that. That's what we're going to do in
this video. I'm going to jump over to
12

13
00:01:03.840 --> 00:01:08.970
Chrome and we can see here on my task, I
don't have that. I'm going to create a
13

14
00:01:08.970 --> 00:01:13.300
New Issue for that.
What do we want to call this? Let's
14

15
00:01:13.300 --> 00:01:15.810
call it...
15

16
00:01:19.320 --> 00:01:24.420
So just update the Map implementation to
manage the setting of the ID property.
16

17
00:01:24.420 --> 00:01:27.660
I'll go ahead and assign that to
myself to indicate that I'm working on
17

18
00:01:27.660 --> 00:01:30.570
it.
Let's jump back over here to
18

19
00:01:30.570 --> 00:01:34.980
IntelliJ. The implementation is
actually pretty simple.
19

20
00:01:34.980 --> 00:01:41.480
What we can do is when I come in here
and say private
20

21
00:01:41.690 --> 00:01:46.120
Long because we are using a Long for our
id.
21

22
00:01:46.619 --> 00:01:50.490
We actually don't need anything here. We
can do this all within the class.
22

23
00:01:50.490 --> 00:01:53.990
What we can do is return
23

24
00:01:54.000 --> 00:02:02.310
Collections. That has a max function.
We can use the map. Get the keySet.
24

25
00:02:02.310 --> 00:02:08.190
We're again saying give us the max of
that. Now we're going to say + 1 like
25

26
00:02:08.190 --> 00:02:15.209
so. Okay, you can see that IntelliJ is not
happy here about this type. Java
26

27
00:02:15.209 --> 00:02:18.959
being a strongly typed language, we have
some tricks that we can use to indicate
27

28
00:02:18.959 --> 00:02:22.110
that because we're doing an abstract
class here. This can get a little bit
28

29
00:02:22.110 --> 00:02:27.450
tricky, as far as how Java is handling
the types. What we can do is come up
29

30
00:02:27.450 --> 00:02:33.480
here and subset about this ID value.
We can come in here and say extends,
30

31
00:02:33.480 --> 00:02:41.040
the ID extends Long. So now
we're really unhappy. But what we can do
31

32
00:02:41.040 --> 00:02:45.270
here is for our Map implementation, rather
than using generic,
32

33
00:02:45.270 --> 00:02:50.640
we can say that that is going to take a
Long. So anytime we extend out this class,
33

34
00:02:50.640 --> 00:02:55.860
as long as a Long or something that
extends it, it's specified for this, this
34

35
00:02:55.860 --> 00:02:59.340
is going to work happily. Now, what we
want to do is come over here and
35

36
00:02:59.340 --> 00:03:04.680
refactor the save method. What we want to
see here,
36

37
00:03:04.680 --> 00:03:10.250
if the object being passed is not equal
to null,
37

38
00:03:10.250 --> 00:03:16.980
we want to do some things on it.
What we want to say is if we don't
38

39
00:03:16.980 --> 00:03:20.810
have an ID on that, so if we say...
39

40
00:03:22.569 --> 00:03:28.450
You can see we don't have the getId value
here. Again, what we can do is since
40

41
00:03:28.450 --> 00:03:34.480
we've refactored to have that Base
Entity so everything in our Model is
41

42
00:03:34.480 --> 00:03:38.620
extending out from this Base Entity now.
What we can do is come over here and do
42

43
00:03:38.620 --> 00:03:45.150
the same thing. The type that's
coming in has to extend Base Entity.
43

44
00:03:45.150 --> 00:03:52.720
It's a nice little refactoring here.
So now, I can say if object.getId() == null,
44

45
00:03:52.720 --> 00:04:05.290
like so. Now, we can say object.setId(getNextId()) so that will set
45

46
00:04:05.290 --> 00:04:15.140
that NextId value on there.
Now, what we can do is take the Map, 
46

47
00:04:15.140 --> 00:04:21.540
I'd say put,
getId
47

48
00:04:23.360 --> 00:04:30.550
like so. This goes away.
So now, basically, what we're doing in
48

49
00:04:30.550 --> 00:04:34.720
this little block here say making sure
that the object is not equal to null. As
49

50
00:04:34.720 --> 00:04:38.740
long as it's not equal to null, we're
going to go and try to get the Id. But if
50

51
00:04:38.740 --> 00:04:43.600
that is null, we are going to grab the next
Id so we have this little function down
51

52
00:04:43.600 --> 00:04:47.350
on the bottom here that's going to set
the Id to the next value, so if our
52

53
00:04:47.350 --> 00:04:51.790
maximum value in there is three, it
gets set to four. So pretty pretty simple
53

54
00:04:51.790 --> 00:04:56.140
logic. Nothing too mysterious there.
We can implement a little defensive
54

55
00:04:56.140 --> 00:05:05.780
coding here and say else, so if that
object is null,
55

56
00:05:05.780 --> 00:05:12.370
I'll say throw new RuntimeExcemption.
So we go
56

57
00:05:14.550 --> 00:05:21.000
KABOOOM. If we tried to pass a null
object in here. Now, you can see here.
57

58
00:05:21.000 --> 00:05:25.140
Now let's take a look at the other
implementations. Everything's happy now
58

59
00:05:25.140 --> 00:05:29.820
because of the generics that were using.
I said at least IntelliJ thinks
59

60
00:05:29.820 --> 00:05:33.780
everything's happy. IntelliJ is
usually pretty good there. We can see
60

61
00:05:33.780 --> 00:05:38.100
everything's happy now so let's come
back over to the Abstract service. You
61

62
00:05:38.100 --> 00:05:41.900
can see IntelliJ is saying that ID value is
never used, so let's just get rid of that.
62

63
00:05:41.900 --> 00:05:46.800
Now our save method is going to be
more in line with what Spring
63

64
00:05:46.800 --> 00:05:50.910
Data JPA provides us, which is
exactly what I wanted to do in this
64

65
00:05:50.910 --> 00:05:55.890
refactoring. So now, what we're going to have
to do is come over here. We'll just
65

66
00:05:55.890 --> 00:05:58.670
get rid of this.
66

67
00:06:00.550 --> 00:06:05.070
We can see he's not happy, so we get rid of
that.
67

68
00:06:05.620 --> 00:06:12.880
The same here and this guy here in
our bootstrap. That's going to have some
68

69
00:06:12.880 --> 00:06:15.390
unhappiness.
69

70
00:06:16.660 --> 00:06:22.000
Let's see here, this is actually going
through setting that Id's and now we can
70

71
00:06:22.000 --> 00:06:25.850
actually remove these values. I'm
going to get rid of that.
71

72
00:06:25.850 --> 00:06:31.560
We're not going to allow, just got to
go in and set the Id values,
72

73
00:06:31.560 --> 00:06:37.260
like so. That should work. So now, let's go
ahead and try to run the application.
73

74
00:06:37.260 --> 00:06:41.310
Again, we haven't implemented unit
testing yet. That is coming up in a
74

75
00:06:41.310 --> 00:06:44.910
couple sections in the course so we'd
definitely be adding tests here. I'm
75

76
00:06:44.910 --> 00:06:48.060
kind of doing it though an old-fashioned
way and make sure that the compiler does
76

77
00:06:48.060 --> 00:06:53.880
bring things up. We can see here that
we did blow up. No such element. Let's
77

78
00:06:53.880 --> 00:06:56.660
take a look at that.
78

79
00:06:59.260 --> 00:07:04.840
Okay, we are getting an exception here
that this is exploding because there's
79

80
00:07:04.840 --> 00:07:11.440
no value there yet. What we can do
here is I know this is the same.
80

81
00:07:11.440 --> 00:07:17.110
Basically, that Map doesn't have anything
in there, so we are going kaboom there.
81

82
00:07:17.110 --> 00:07:23.010
Let's come in here. I'm going to refactor
this on the fly.
82

83
00:07:31.360 --> 00:07:37.440
I can actually say nextId, actually, I'm going to
do this.
83

84
00:07:51.749 --> 00:07:57.649
I am refactoring this to say put that
into a try block.
84

85
00:08:05.210 --> 00:08:10.020
So now, basically, I'm coming in saying
nextId equals to null. I'm initialising
85

86
00:08:10.020 --> 00:08:15.120
it to null and then I'm going to try that
and if I get a NoSuchElementException
86

87
00:08:15.120 --> 00:08:22.170
as I did here. We'll go ahead
and add or make that 1L, one Long.
87

88
00:08:22.170 --> 00:08:28.110
I say in my head 1L, so let's go ahead
and try starting the application. Now we
88

89
00:08:28.110 --> 00:08:31.650
can see that the Spring Context failed
to start up because of that
89

90
00:08:31.650 --> 00:08:35.399
error.
So now, we could see that we started
90

91
00:08:35.399 --> 00:08:40.559
up. I'm going to come over to Chrome. So
here's my Vets. Let's make sure that is
91

92
00:08:40.559 --> 00:08:46.049
working now. We can see that our Id
values are getting populated. So now
92

93
00:08:46.049 --> 00:08:51.089
we've abstracted the Id generation. 
Just to quickly recap everything that's
93

94
00:08:51.089 --> 00:08:57.839
going on here, we did cover quite a
bit. This is a summary. Let me minimize
94

95
00:08:57.839 --> 00:09:04.350
the Spring Boot window at runtime. Up
here top line on line 10, we're using
95

96
00:09:04.350 --> 00:09:09.509
Java generics. We're saying that
types come in so our entity type now
96

97
00:09:09.509 --> 00:09:13.319
must extend BaseEntity. That allows
us to make some assumptions about it,
97

98
00:09:13.319 --> 00:09:19.739
like it has an id property, as well as,
the id value must extend Long. We're
98

99
00:09:19.739 --> 00:09:24.660
saying that has to be a Long or an
extension of the Long class. On line 12,
99

100
00:09:24.660 --> 00:09:28.619
the Map implementation, I'm saying that
the map, the key on the map, is going to
100

101
00:09:28.619 --> 00:09:34.350
be a Long, and then whatever that T
generic is going to be. By saying that
101

102
00:09:34.350 --> 00:09:40.769
space entity there, on line 24, you can
see there I'm saying if the object
102

103
00:09:40.769 --> 00:09:46.589
is null, we'll throw an exception. If
not, now because I know that object
103

104
00:09:46.589 --> 00:09:51.839
that's coming in is going to be an
implementation of BaseEntity so I can
104

105
00:09:51.839 --> 00:09:56.579
make the assumption that it's going to
have the getId method available. I'm
105

106
00:09:56.579 --> 00:10:02.339
going to look to see if it does have an
Id. If not, I've created a method, a new
106

107
00:10:02.339 --> 00:10:05.939
private method called getNextId hat is going to go out and get the next
107

108
00:10:05.939 --> 00:10:10.169
Id value available. That's just going to
increment it up. You saw there that
108

109
00:10:10.169 --> 00:10:15.569
it did throw an exception. We can see
down a line 51 there, I'm catching that.
109

110
00:10:15.569 --> 00:10:20.610
Basically, if that map is empty and
has not been initialised, we're going to get
110

111
00:10:20.610 --> 00:10:25.049
an exception tossed which is okay. 
We're gonna going to the exception and
111

112
00:10:25.049 --> 00:10:29.579
just return back one. We're going to
start off at id 1 if the map is empty.
112

113
00:10:29.579 --> 00:10:33.239
Pretty simple logic there. If there is
something in there, we'll increment it so
113

114
00:10:33.239 --> 00:10:40.250
we'll take it plus 1. Anything that
goes up plus 1, and then here,
114

115
00:10:40.250 --> 00:10:45.460
let's see here. I try to expand this out.
115

116
00:10:45.770 --> 00:10:50.420
Trying to get to actually change to
show. Ah, there we are. We can see it. Kind
116

117
00:10:50.420 --> 00:10:56.000
of hard to see, but we can say return super.
We refactored the save method to
117

118
00:10:56.000 --> 00:11:01.250
drop the Id value. So now, we don't care
about the Id setting, just like in JPA.
118

119
00:11:01.250 --> 00:11:06.020
Using Spring Data JPA, we're not
going to care about how the Id value gets
119

120
00:11:06.020 --> 00:11:10.580
generated. We are allowing our
persistence layer to do it, which is
120

121
00:11:10.580 --> 00:11:14.260
exactly what we've done in our Map
implementation. We wrote this getNextId,
121

122
00:11:14.260 --> 00:11:19.310
simple logic. But again, we're trying to
refactor things to make things look and
122

123
00:11:19.310 --> 00:11:24.350
behave like Hibernate. Coming up, we
will be implementing those methods as
123

124
00:11:24.350 --> 00:11:30.100
well. Let's see here. That was
#23. I'm going to go ahead and
124

125
00:11:30.100 --> 00:11:34.270
Commit this code into GitHub.
125

126
00:11:39.810 --> 00:11:44.250
Just double-check that. Closes
#23. Yep, I am going to Commit and
126

127
00:11:44.250 --> 00:11:46.340
Push.
Again, let's see here.
127

128
00:11:47.360 --> 00:11:51.370
Just go to closed here in a second,
maybe. There I
128

129
00:11:52.260 --> 00:11:56.460
had to click refresh. I know GitHub
sometimes it will pick it up, but if the
129

130
00:11:56.460 --> 00:11:59.580
tab has been open for a while and
there's been no activity, it's not
130

131
00:11:59.580 --> 00:12:03.030
going to be getting the changes quite as
quick if it's been open for a little bit.
131

132
00:12:03.030 --> 00:12:07.400
So that closes out that issue for us.
