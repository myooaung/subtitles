WEBVTT
0
1
00:00:04.580 --> 00:00:08.670
Now one thing that's always been
difficult in enterprise to Java
1

2
00:00:08.670 --> 00:00:13.769
development is getting data in and out
of a database. The old days when you define dial
2

3
00:00:13.769 --> 00:00:19.770
patterns and just straight up JDBC
became very very resource intensive it's
3

4
00:00:19.770 --> 00:00:22.710
a lot of code that you had to write a
lot of SQL so we're going to talk about
4

5
00:00:22.710 --> 00:00:28.260
spring data JPA. Now you might be
wondering what is spring data JPA. The
5

6
00:00:28.260 --> 00:00:32.489
first thing we need to talk about is
spring data repositories. This provides
6

7
00:00:32.489 --> 00:00:37.590
us an implementation of the repository
pattern. Now this concept is originally
7

8
00:00:37.590 --> 00:00:42.960
from Eric Evans' book Domain Driven
Design now he says repository has
8

9
00:00:42.960 --> 00:00:46.559
methods for retrieving domain objects
should delegate to a specialized
9

10
00:00:46.559 --> 00:00:52.140
Repository object such that alternative storage
implementations may be interchanged. Now
10

11
00:00:52.140 --> 00:00:56.730
this concept is very important because
it allows us to easily substitute the
11

12
00:00:56.730 --> 00:01:01.710
persistence layer like what if we're on
a SQL database we going to go to a No
12

13
00:01:01.710 --> 00:01:06.479
SQL database so it really abstracts out
that persistence layer. Now Spring Data
13

14
00:01:06.479 --> 00:01:12.840
JPA is a subset of a larger family of
Spring Data projects. Spring Data JPA
14

15
00:01:12.840 --> 00:01:15.600
uses Hibernate for persistence to
support it
15

16
00:01:15.600 --> 00:01:19.710
relational database systems and really
just about any major relational database
16

17
00:01:19.710 --> 00:01:23.820
is going to work with this. Now to use
bring data JPA you extend out a Java
17

18
00:01:23.820 --> 00:01:28.409
Repository Interface and Spring Data JPA
is gonna provide the implementation at
18

19
00:01:28.409 --> 00:01:31.740
runtime. The cool part is there's No SQL as
required
19

20
00:01:31.740 --> 00:01:37.680
that's something that I really like
because I am very comfortable using SQL.
20

21
00:01:37.680 --> 00:01:42.720
I kind of cut my teeth on the Oracle
database and SQL was like a second
21

22
00:01:42.720 --> 00:01:49.020
language to me. I knew it far longer before
Java but SQL when you're doing Java
22

23
00:01:49.020 --> 00:01:54.780
development is kind of burdensome
it can be very database specific too
23

24
00:01:54.780 --> 00:01:58.409
depending on that, so depending on what
you're using and how you're writing it
24

25
00:01:58.409 --> 00:02:02.009
if you use an ANSI SQL great me not so
much.
25

26
00:02:02.009 --> 00:02:08.459
Guilty. But what we're going to do is
look at using spring data JPA and we're
26

27
00:02:08.459 --> 00:02:12.480
not going to write any SQL at all I'm
not going to write any doubts
27

28
00:02:12.480 --> 00:02:17.970
no transaction management, no database
connections, that's all gonna be managed
28

29
00:02:17.970 --> 00:02:23.519
for us by the Spring Sramework. Really
all we need to do is take a Spring Data
29

30
00:02:23.519 --> 00:02:29.760
JPA Repository Interface and extend it
and there's actually a ready-made one
30

31
00:02:29.760 --> 00:02:36.150
for CRUD operations and CRUD is create,
update and delete so standard CRUD
31

32
00:02:36.150 --> 00:02:45.000
operations and it gives us methods to
find an object, to save an object, to
32

33
00:02:45.000 --> 00:02:49.049
search for an object so it get all
objects so that there's a number of
33

34
00:02:49.049 --> 00:02:54.959
ready-made methods there on that
interface and all we need to do is
34

35
00:02:54.959 --> 00:02:59.370
extend it and give it our entity type
and then what's going to happen is at
35

36
00:02:59.370 --> 00:03:04.410
runtime, Spring Data JPA
is going to give us an implementation of
36

37
00:03:04.410 --> 00:03:08.879
that, inject it into whatever class we
ask it to that were doing persistent
37

38
00:03:08.879 --> 00:03:12.629
operations with whether we're storing
something or fetching it out of the
38

39
00:03:12.629 --> 00:03:17.489
database and it will handle all
the heavy lifting for us it will work
39

40
00:03:17.489 --> 00:03:22.440
with hibernate it will do transaction
management get that database connection
40

41
00:03:22.440 --> 00:03:26.370
so all that is going to be taken care of
for us all we need to do is write this
41

42
00:03:26.370 --> 00:03:30.120
interface and use it so I'm going to
jump over to IntelliJ now and show you
42

43
00:03:30.120 --> 00:03:35.130
exactly how to do that. Okay I'm back in
our project here and just as a recap we
43

44
00:03:35.130 --> 00:03:40.709
only have the two entities here Author
and Book so pretty standard stuff here
44

45
00:03:40.709 --> 00:03:46.230
and they're just plain POJO's but they're
marked as JPA entities so these are all
45

46
00:03:46.230 --> 00:03:51.750
set up to be persisted with Hibernate
now by convention what you normally see
46

47
00:03:51.750 --> 00:03:59.519
people do is create a New Package and
for repositories so not mandatory you do
47

48
00:03:59.519 --> 00:04:05.010
this but it is a commonly accepted to do
so and what we're going to do is create
48

49
00:04:05.010 --> 00:04:10.260
a New Java Class and we want to say it's
an Interface and we're going to call it
49

50
00:04:10.260 --> 00:04:13.549
the AuthorRepository.
50

51
00:04:16.459 --> 00:04:25.490
and we are going to make him extend the
Spring data CrudRepository so you can
51

52
00:04:25.490 --> 00:04:29.449
see right there I have the Spring data
CrudRepository and it's going to use
52

53
00:04:29.449 --> 00:04:34.430
Java Generics taken the type and the ID
and that's exactly what we're going to
53

54
00:04:34.430 --> 00:04:44.750
do. So say the type is Author and now for
the ID just to show you we used Long
54

55
00:04:44.750 --> 00:04:52.009
for the ID so that's exactly what we
want to do now. Optionally we could have
55

56
00:04:52.009 --> 00:04:58.639
used a String or an Integer or some
other value and I mean there's
56

57
00:04:58.639 --> 00:05:01.880
several different keys that we could use
for the database but in this case we
57

58
00:05:01.880 --> 00:05:06.500
are using a Long data type now just to
show you what's going to happen under
58

59
00:05:06.500 --> 00:05:11.979
the covers here, I'm going to drill into
that and this is what's going to get
59

60
00:05:11.979 --> 00:05:16.820
implemented for us so this is a CrudRepository and earlier in the video I
60

61
00:05:16.820 --> 00:05:21.860
said create, update, delete, it's actually
create, read, update and delete so I often
61

62
00:05:21.860 --> 00:05:28.280
forget the R as being a read so I
think create notes CR but it's great
62

63
00:05:28.280 --> 00:05:35.570
read update and delete so we get a
method there to save an object or we can
63

64
00:05:35.570 --> 00:05:41.210
save a list of objects an iterable list
so we can save many at once. We can find
64

65
00:05:41.210 --> 00:05:47.930
by ID we can check to see if it exists
and then we also have findAll or 
65

66
00:05:47.930 --> 00:05:53.240
findAllById where we can take in a list of
IDs and then we have several options
66

67
00:05:53.240 --> 00:05:58.759
here to get a count and then three
different variants of deleting the
67

68
00:05:58.759 --> 00:06:03.830
object so this is a list of standard CRUD
operations and the last thing we need to
68

69
00:06:03.830 --> 00:06:10.750
do is also implement our BookRepository.
69

70
00:06:14.170 --> 00:06:28.670
I'm going to say that's an interface and
this time it's gonna be Book and we
70

71
00:06:28.670 --> 00:06:36.800
also did a Long value for that, make sure
we get the right one and that's all we
71

72
00:06:36.800 --> 00:06:42.230
need to do so now Spring Data is going
to see these and wire them into our
72

73
00:06:42.230 --> 00:06:45.910
Spring context for us and they will be
available for our use.
73

74
00:06:45.910 --> 00:06:50.390
Now if you've done Java development and
access databases before and use like a
74

75
00:06:50.390 --> 00:06:55.970
DAO pattern or maybe straight up JDBC
hope we didn't use JDBC that can be
75

76
00:06:55.970 --> 00:07:02.270
awful at times but if you have, you know
how burdensome that is and how
76

77
00:07:02.270 --> 00:07:06.650
time-consuming it is. Now I just created
two interfaces and I have complete CRUD
77

78
00:07:06.650 --> 00:07:10.760
operations for two different entities in
my database now if I was doing that by
78

79
00:07:10.760 --> 00:07:15.950
hand with a JDBC or a DAO pattern it
probably cost me all afternoon to wire
79

80
00:07:15.950 --> 00:07:21.190
up those two entities so you can see
it's like a force multiplier
80

81
00:07:21.190 --> 00:07:26.230
practically you get so much productivity
out of using tools like Spring Data JPA
81

82
00:07:26.230 --> 00:07:30.950
it really is great for doing simple CRUD
operations and even more complex
82

83
00:07:30.950 --> 00:07:35.150
operations because we didn't really get
into some of the more in-depth stuff
83

84
00:07:35.150 --> 00:07:37.790
that you can do with Spring Data JPA
right now we're just doing an
84

85
00:07:37.790 --> 00:07:41.990
introduction to get your feet level is
using Spring Data JPA, we'll
85

86
00:07:41.990 --> 00:07:46.310
definitely get into some more advanced example later on in the course but
86

87
00:07:46.310 --> 00:07:52.390
I hope you can appreciate what a
time-saver Spring Data JPA is for us.
