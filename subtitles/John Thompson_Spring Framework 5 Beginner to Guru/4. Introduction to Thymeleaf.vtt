WEBVTT
0
1
00:00:04.040 --> 00:00:11.099
In this video, we are going to introduce
you to Thymeleaf. Thyme happens to be
1

2
00:00:11.099 --> 00:00:17.699
aromanic perennial evergreen herb with
culinary medical and ornamental uses.
2

3
00:00:17.699 --> 00:00:22.500
This is right from Wikipedia. Interestingly,
Egyptians used Thyme for embalming
3

4
00:00:22.500 --> 00:00:27.779
and the Greeks believed that time was a
source of courage. But why Thyme made it
4

5
00:00:27.779 --> 00:00:32.460
into the name Thymeleaf, I have no idea. I
couldn't find out why that was chosen
5

6
00:00:32.460 --> 00:00:38.250
for Thymeleaf, which is a Java Templating
Engine. Now this came out onto the scene
6

7
00:00:38.250 --> 00:00:44.430
in 2011. It was originally created by
Daniel Fernandez from Spain. He created
7

8
00:00:44.430 --> 00:00:47.309
the Thymeleaf project and as far as I
know, he's still involved with that. The
8

9
00:00:47.309 --> 00:00:51.840
team has grown a little bit. It has grown
rapidly in popularity. a lot of people
9

10
00:00:51.840 --> 00:00:56.190
really like Thymeleaf. It has been really
embraced by the Spring community. It
10

11
00:00:56.190 --> 00:01:01.140
seems to be the template engine of
choice right now. So if you see any of
11

12
00:01:01.140 --> 00:01:05.090
the Spring guys developing stuff, they're
usually turning to Thymeleaf as they're
12

13
00:01:05.090 --> 00:01:11.580
templating engine of choice. It is
pronounced as time or taim depending on
13

14
00:01:11.580 --> 00:01:15.810
your accent. I was making a mistake if
you look at some of my early YouTube
14

15
00:01:15.810 --> 00:01:19.380
videos, you'll hear me saying Thiem leaf
so I got in my head that was Thymeleaf.
15

16
00:01:19.380 --> 00:01:24.150
It is actually Thymeleaf, so that was
actually my mistake there. If you go
16

17
00:01:24.150 --> 00:01:27.920
back in time and look at some of my
early work on YouTube, you'll see me
17

18
00:01:27.920 --> 00:01:33.900
mispronouncing this. Some of the features
of Thymeleaf, it is a Java template
18

19
00:01:33.900 --> 00:01:39.990
engine. It's going to produce XML, XHTML
and HTML5. In this course, we are going to
19

20
00:01:39.990 --> 00:01:44.070
be looking towards HTML5. That is the
primary use that we're going to be using
20

21
00:01:44.070 --> 00:01:49.050
the Thymeleaf templating engine for. Now
Thymeleaf is a natural replacement for
21

22
00:01:49.050 --> 00:01:54.270
JSPs also known as Java Server Pages.
That is the Java Enterprise Edition
22

23
00:01:54.270 --> 00:02:00.330
reference standard for a template engine.
Thymeleaf is a 'Natural' Template Engine
23

24
00:02:00.330 --> 00:02:05.190
meaning that the templates are viewable
in a web browser. That's a very important
24

25
00:02:05.190 --> 00:02:09.959
feature which we'll talk to in a moment.
I do want to point out that is not tied
25

26
00:02:09.959 --> 00:02:15.120
to a web environment so at runtime, you
don't need the servlet engine or any
26

27
00:02:15.120 --> 00:02:20.040
type of web environment, that can be used
completely externally to it.
27

28
00:02:20.040 --> 00:02:24.450
There are use cases where you will use
it to produce this HTML, like for putting
28

29
00:02:24.450 --> 00:02:29.220
into an email. People do get confused
that Thymeleaf is a web framework. It
29

30
00:02:29.220 --> 00:02:34.860
absolutely is not a web framework. It has
one purpose in life. That is to take a a
30

31
00:02:34.860 --> 00:02:40.920
template and convert it to HTML, so that
is it in a nutshell. It is not a
31

32
00:02:40.920 --> 00:02:44.910
full-blown web framework. It works very
nicely in conjunction with Spring MVC
32

33
00:02:44.910 --> 00:02:50.340
and other Java technologies. It's not
tied to Spring specifically. Any Java
33

34
00:02:50.340 --> 00:02:54.360
technology can utilize it but its
function in life as strictly to produce
34

35
00:02:54.360 --> 00:03:01.050
HTML. Now some of the differences between
Thymeleaf and JSPs, the Thymeleaf
35

36
00:03:01.050 --> 00:03:05.010
templates are actually valid HTML
documents that you can view right in the
36

37
00:03:05.010 --> 00:03:10.950
browser and this is what we mean by a
Natural templating engine. The Thymeleaf
37

38
00:03:10.950 --> 00:03:15.959
syntax actually extends out the
namespace. I'll show you that here at
38

39
00:03:15.959 --> 00:03:20.340
the end of the presentation so that the
HTML is actually valid. You specify a
39

40
00:03:20.340 --> 00:03:26.220
Thymeleaf namespace so you're using
standard tags that comply with HTML.
40

41
00:03:26.220 --> 00:03:30.420
In the browser, it's done in a way that
the browser actually ignores that stuff,
41

42
00:03:30.420 --> 00:03:34.799
ignores the chatter for the templating
engine so that everything looks normal.
42

43
00:03:34.799 --> 00:03:40.079
Now JSP files on the other hand, they're
not valid HTML. You have a lot of
43

44
00:03:40.079 --> 00:03:43.650
tags and what not scattered through. If
you try to view one in a browser, it
44

45
00:03:43.650 --> 00:03:46.020
actually looks pretty awful
because the browser is seeing a lot of
45

46
00:03:46.020 --> 00:03:50.400
stuff in there. It doesn't know what to
do with. Now, by a Natural templating
46

47
00:03:50.400 --> 00:03:54.600
ability, this means that you can see in
development. It really does speed things
47

48
00:03:54.600 --> 00:03:58.680
up for you because you can open
up a browser and work on that and just
48

49
00:03:58.680 --> 00:04:03.570
refresh without having tomcat 
running or without having to restart
49

50
00:04:03.570 --> 00:04:07.080
tom to get or anything like that. It
really does to save you development time
50

51
00:04:07.080 --> 00:04:11.910
because you're essentially just editing
an HTML file and then you sprinkle in
51

52
00:04:11.910 --> 00:04:16.320
Thymeleaf tags and everything works, so
you can do small tweaks to update
52

53
00:04:16.320 --> 00:04:20.880
the HTML structure and view that without
running anything else. It really does
53

54
00:04:20.880 --> 00:04:25.740
save you a lot of time. Now I want to
talk about Thymeleaf Performance. I've seen
54

55
00:04:25.740 --> 00:04:29.850
a lot of benchmarks out there. It does
benchmark slower than other template
55

56
00:04:29.850 --> 00:04:34.860
engines such as JSP, Freemarkers, and
Velocity. Velocity has been around for a
56

57
00:04:34.860 --> 00:04:39.960
very long time, but Spring 5 is no longer
supporting with Velocity. I think, it's
57

58
00:04:39.960 --> 00:04:43.980
not a specific reason. It looked like
Velocity kind of died on the leaf but
58

59
00:04:43.980 --> 00:04:47.550
they just came out with a second release
and I think the Spring guys are saying
59

60
00:04:47.550 --> 00:04:50.760
Hey, you guys can write the extensions
into Spring for Velocity if you want.
60

61
00:04:50.760 --> 00:04:55.080
We're not going to do it. So a little bit
going back and forth there. But right now,
61

62
00:04:55.080 --> 00:05:01.470
as at the time of recording of this
which is end of July 2018, Spring 5 is
62

63
00:05:01.470 --> 00:05:05.220
not supporting Velocity. It's an
important note there. They do seem to
63

64
00:05:05.220 --> 00:05:09.180
really like Thymeleaf though, so I think
they'll be around for sometime.
64

65
00:05:09.180 --> 00:05:14.040
Just recently, Thymeleaf 3.0 came out and
this did have some very significant
65

66
00:05:14.040 --> 00:05:18.390
performance and improvements. I've looked
at the benchmarks. iStill not quite
66

67
00:05:18.390 --> 00:05:23.070
where they are. It has definitely improved.
So if you're talking about Thymeleaf tip,
67

68
00:05:23.070 --> 00:05:27.690
beware of old benchmark data. The
early versions of Thymeleaf are very slow.
68

69
00:05:27.690 --> 00:05:34.350
It has spread up significantly. I don't think
it's on powerr with JSPs or Freemarker, but
69

70
00:05:34.350 --> 00:05:39.960
you want to pass along. This here, we have
a saving in the states that your mileage
70

71
00:05:39.960 --> 00:05:44.850
may vary. So with any benchmark, be aware
that your mileage actually may
71

72
00:05:44.850 --> 00:05:50.240
vary. It is hard under production
conditions to completely replicate a
72

73
00:05:50.240 --> 00:05:54.419
benchmark. So take benchmarks with a
grain of salt because there's a lot of
73

74
00:05:54.419 --> 00:05:56.639
things that go into benchmarks and
performance.
74

75
00:05:56.639 --> 00:06:00.629
There's a lot of variables in those
so like. I said, your mileage may vary
75

76
00:06:00.629 --> 00:06:04.860
with benchmarks specifically. Now let's
take a look at an actual Thymeleaf
76

77
00:06:04.860 --> 00:06:09.569
template. Here's an example. You will
be seeing this coming up in the course.
77

78
00:06:09.569 --> 00:06:13.740
We will explain everything in here but I
just wanted you see this is a standard
78

79
00:06:13.740 --> 00:06:18.930
HTML document. You can see right at the
top DOCTYPE html. The second line there,
79

80
00:06:18.930 --> 00:06:23.909
you can see that we are declaring an XML
namespace for Thymeleaf. That is
80

81
00:06:23.909 --> 00:06:30.719
an XML schema there. If we look down,
let's see here. You can see midway down after
81

82
00:06:30.719 --> 00:06:35.669
the web jar is coming in for bootstrap,
you can see the th:href. That
82

83
00:06:35.669 --> 00:06:40.740
is a Thymeleaf tag in there and that is
saying when the browser is going to go
83

84
00:06:40.740 --> 00:06:46.439
ahead and show the bootstrap CSS from
that bootstrapcdn.com. It's going to
84

85
00:06:46.439 --> 00:06:50.849
show it there when you view it directly
in the browser. But when you run this in
85

86
00:06:50.849 --> 00:06:55.650
Spring Boot through the Thymeleaf engine.
It's going to replace that tag with a
86

87
00:06:55.650 --> 00:07:00.449
reference to the web jar, so you can see
that th:href there, that as a
87

88
00:07:00.449 --> 00:07:04.229
replacement. We are definitely going
to be getting into a lot more of the
88

89
00:07:04.229 --> 00:07:07.020
Thymeleaf commands as we progress to
through the course. So don't worry about
89

90
00:07:07.020 --> 00:07:10.289
that too much right now. Just want to
give you an example here, so this is a
90

91
00:07:10.289 --> 00:07:16.560
Thymeleaf template. Here, we can see the
th colon stuff scattered in there. Those
91

92
00:07:16.560 --> 00:07:19.229
are actual Thymeleaf templating
commands that we are going to be
92

93
00:07:19.229 --> 00:07:22.289
leveraging coming up in the course. But
don't worry, we will definitely
93

94
00:07:22.289 --> 00:07:25.639
explain those going forward.
