WEBVTT
0
1
00:00:05.117 --> 00:00:06.568
Okay, what we wanna do in this video
1

2
00:00:06.568 --> 00:00:09.263
is complete the coding assignment,
2

3
00:00:09.263 --> 00:00:12.796
and we are going to refactor our IngredientService
3

4
00:00:12.796 --> 00:00:15.146
to return back reactive types,
4

5
00:00:15.146 --> 00:00:16.875
and show ya some tricks here.
5

6
00:00:16.875 --> 00:00:17.954
So let's go in to it
6

7
00:00:17.954 --> 00:00:21.196
and take a look at the implementation of this.
7

8
00:00:21.196 --> 00:00:23.928
Now if I come back here, here's the implementation,
8

9
00:00:23.928 --> 00:00:26.761
the findByRecipeIdAndIngredientId.
9

10
00:00:28.200 --> 00:00:30.239
So if I come into this,
10

11
00:00:30.239 --> 00:00:33.739
do a Mono.just, and that's gonna create a,
11

12
00:00:35.223 --> 00:00:36.427
it's a little helper method
12

13
00:00:36.427 --> 00:00:38.327
to return back a Mono.
13

14
00:00:38.327 --> 00:00:40.940
So now, IntelliJ is giving us a warning
14

15
00:00:40.940 --> 00:00:43.095
that we have type mismatch there,
15

16
00:00:43.095 --> 00:00:47.060
so I come in and do an Alt + Enter on it,
16

17
00:00:47.060 --> 00:00:48.924
and we can do a Cast, or we can say,
17

18
00:00:48.924 --> 00:00:50.795
make that return.
18

19
00:00:50.795 --> 00:00:54.924
So I'm gonna hit that and now we can see that it changed
19

20
00:00:54.924 --> 00:00:57.270
and also, IntelliJ is smart enough
20

21
00:00:57.270 --> 00:00:59.618
to change the interface as well.
21

22
00:00:59.618 --> 00:01:03.785
So we're gonna do that for this next one here too,
22

23
00:01:09.243 --> 00:01:12.140
again hitting Opt + Enter, and if you're on Windows,
23

24
00:01:12.140 --> 00:01:15.723
I'm pretty sure it's a different keystroke,
24

25
00:01:17.249 --> 00:01:19.166
and here we wanna do,
25

26
00:01:23.756 --> 00:01:26.785
and again, we want to do that,
26

27
00:01:26.785 --> 00:01:30.952
and now we can take a look here, and that is correct,
27

28
00:01:34.260 --> 00:01:38.730
and down here, what we wanna do is return a void,
28

29
00:01:38.730 --> 00:01:41.731
and in this case, we just wanna add on the return statement,
29

30
00:01:41.731 --> 00:01:45.174
and the void is kind of a placeholder for the generics
30

31
00:01:45.174 --> 00:01:49.447
and we're just gonna be returning null from a statement.
31

32
00:01:49.447 --> 00:01:53.596
So now we have that, and it's still unhappy about something,
32

33
00:01:53.596 --> 00:01:55.346
oop, missed this one.
33

34
00:02:00.124 --> 00:02:02.983
So now we've updated the return types in our service
34

35
00:02:02.983 --> 00:02:03.816
to go through everything, and I'm sure
35

36
00:02:03.816 --> 00:02:08.309
the corresponding unit tests are now broken,
36

37
00:02:08.309 --> 00:02:11.892
so let's go ahead and take a look at those,
37

38
00:02:16.468 --> 00:02:20.635
and as expected, and we've got some incompatible types here.
38

39
00:02:28.695 --> 00:02:31.684
So by calling the block, that gets the value out
39

40
00:02:31.684 --> 00:02:32.684
of the Mono.
40

41
00:02:33.910 --> 00:02:35.601
Oh, I'm sorry, we actually jumped to the Controller,
41

42
00:02:35.601 --> 00:02:38.298
so to get the compile going, so, let's go ahead
42

43
00:02:38.298 --> 00:02:40.134
and try this again.
43

44
00:02:40.134 --> 00:02:41.634
Missed that there.
44

45
00:02:49.020 --> 00:02:53.187
So I can see the refactoring here is fairly simple,
45

46
00:03:08.893 --> 00:03:10.040
and I got to run the compile again
46

47
00:03:10.040 --> 00:03:12.290
to see what else we missed.
47

48
00:03:20.483 --> 00:03:23.019
Again, using the block, it's going to trigger it
48

49
00:03:23.019 --> 00:03:27.379
as a subscriber to pull that value from the publisher
49

50
00:03:27.379 --> 00:03:30.212
and remember, Mono is a publisher.
50

51
00:03:31.662 --> 00:03:35.829
That is happy, so let's go ahead and run our tests.
51

52
00:03:40.403 --> 00:03:41.770
You can see that all the tests passed;
52

53
00:03:41.770 --> 00:03:45.770
let's make sure the whole test sweep is passing.
53

54
00:03:50.428 --> 00:03:52.205
All right, we are good to go.
54

55
00:03:52.205 --> 00:03:53.657
I'm going to bring up the application.
55

56
00:03:53.657 --> 00:03:55.990
Make sure nothing is broken.
56

57
00:04:01.836 --> 00:04:05.169
So we are up and this IngredientService,
57

58
00:04:07.379 --> 00:04:11.546
and let's come back over here, and get to the root.
58

59
00:04:12.445 --> 00:04:16.112
Make sure that we are still functional here,
59

60
00:04:17.196 --> 00:04:21.562
and it looks like we are, oop, nope, we blew up.
60

61
00:04:21.562 --> 00:04:25.395
So let's take a look, see what happened there.
61

62
00:04:28.383 --> 00:04:30.038
So we are passing a Mono back.
62

63
00:04:30.038 --> 00:04:32.421
So what's happening here is that we are passing a Mono,
63

64
00:04:32.421 --> 00:04:36.861
so let's take a closer look at the Controller,
64

65
00:04:36.861 --> 00:04:39.527
and the problem is that we passed that reactive type
65

66
00:04:39.527 --> 00:04:42.516
so we do need some more tests here
66

67
00:04:42.516 --> 00:04:44.193
so that that value is coming down,
67

68
00:04:44.193 --> 00:04:45.337
and we're not getting the right value
68

69
00:04:45.337 --> 00:04:47.955
so the recipe find by service,
69

70
00:04:47.955 --> 00:04:50.288
now we have to come in here,
70

71
00:04:52.774 --> 00:04:56.607
and that's the IngredientService is, I'm sorry,
71

72
00:05:03.001 --> 00:05:05.485
So you can see here, and as I'm going through this
72

73
00:05:05.485 --> 00:05:08.873
at everywhere, so we just change that one for the command,
73

74
00:05:08.873 --> 00:05:10.631
so that was storing the type.
74

75
00:05:10.631 --> 00:05:14.042
The problem with the compiler didn't pick this up for us
75

76
00:05:14.042 --> 00:05:15.096
it's because we're adding in
76

77
00:05:15.096 --> 00:05:17.836
and we're not adding a specific type into the map,
77

78
00:05:17.836 --> 00:05:21.003
so we're just doing that addAttribute,
78

79
00:05:22.442 --> 00:05:25.204
and also here on the delete,
79

80
00:05:25.204 --> 00:05:26.915
we're gonna need to do a block to trigger it.
80

81
00:05:26.915 --> 00:05:29.162
So now our Controller is now working
81

82
00:05:29.162 --> 00:05:31.165
with the reactive types.
82

83
00:05:31.165 --> 00:05:34.082
So let's go ahead and restart this.
83

84
00:05:35.301 --> 00:05:36.687
Get a clean restart on Spring Boot;
84

85
00:05:36.687 --> 00:05:40.498
make sure that it is up and running properly.
85

86
00:05:40.498 --> 00:05:41.564
We are live.
86

87
00:05:41.564 --> 00:05:44.952
Let's come back here and I can't just do a refresh here
87

88
00:05:44.952 --> 00:05:49.119
because our id'se are gonna change every time, oop.
88

89
00:05:50.585 --> 00:05:54.672
So let's go ahead and view, make sure we can Delete,
89

90
00:05:54.672 --> 00:05:57.505
oop, no we blew up on that delete,
90

91
00:06:02.543 --> 00:06:04.707
and I realize what I did wrong here,
91

92
00:06:04.707 --> 00:06:07.936
is I'm blocking but in this method,
92

93
00:06:07.936 --> 00:06:10.482
what I'm doing is I'm returning back a null,
93

94
00:06:10.482 --> 00:06:14.649
and what I wanna actually do is Mono.empty(),
94

95
00:06:17.091 --> 00:06:20.567
so that is going to return back a Mono void.
95

96
00:06:20.567 --> 00:06:22.035
So now we'll actually get an object,
96

97
00:06:22.035 --> 00:06:25.134
so it's returning back null, that was a mistake on my part.
97

98
00:06:25.134 --> 00:06:28.798
So let's go ahead and restart this,
98

99
00:06:28.798 --> 00:06:29.631
and make sure that we do have
99

100
00:06:29.631 --> 00:06:32.881
all the Ingredient functionality again.
100

101
00:06:37.939 --> 00:06:40.150
So we'll go in, do a View,
101

102
00:06:40.150 --> 00:06:42.767
and a View over here to the Ingredients.
102

103
00:06:42.767 --> 00:06:44.612
Let's go ahead and try to Delete one.
103

104
00:06:44.612 --> 00:06:46.078
That is working.
104

105
00:06:46.078 --> 00:06:49.745
Do a quick update, we'll just change the UOM,
105

106
00:06:49.745 --> 00:06:50.662
so that is working.
106

107
00:06:50.662 --> 00:06:52.382
So now our IngredientController,
107

108
00:06:52.382 --> 00:06:55.217
we went through the various functionality for the View,
108

109
00:06:55.217 --> 00:06:57.187
Update, and Delete, so that is all working,
109

110
00:06:57.187 --> 00:06:58.990
we know we're not blowing up anywhere.
110

111
00:06:58.990 --> 00:07:01.141
You did see me run into a couple problems
111

112
00:07:01.141 --> 00:07:02.547
as I was going through this.
112

113
00:07:02.547 --> 00:07:04.842
To be honest, the reactive stuff is fairly new
113

114
00:07:04.842 --> 00:07:06.254
to the marketplace.
114

115
00:07:06.254 --> 00:07:08.512
I'm a little bit green working with it myself,
115

116
00:07:08.512 --> 00:07:10.830
haven't been working with it for over a decade,
116

117
00:07:10.830 --> 00:07:12.676
so this stuff is new to me too,
117

118
00:07:12.676 --> 00:07:15.959
so I know you guys are gonna be having some trouble with it.
118

119
00:07:15.959 --> 00:07:17.653
If I'm having a little trouble, I'm sure you guys will,
119

120
00:07:17.653 --> 00:07:20.675
so don't be embarrassed by it, don't feel bad about it,
120

121
00:07:20.675 --> 00:07:23.295
it's a very, very new technology but,
121

122
00:07:23.295 --> 00:07:25.124
so it's gonna take, it's a definitely
122

123
00:07:25.124 --> 00:07:26.996
a different programming paradigm,
123

124
00:07:26.996 --> 00:07:28.689
so it's gonna take a little bit of getting used to
124

125
00:07:28.689 --> 00:07:31.910
but I'm sure we will definitely get used to it here
125

126
00:07:31.910 --> 00:07:34.209
and move forward, because this reactive stuff
126

127
00:07:34.209 --> 00:07:35.802
is actually really cool.
127

128
00:07:35.802 --> 00:07:38.366
I like working with it so far.
128

129
00:07:38.366 --> 00:07:39.787
Okay, we have one more thing to do,
129

130
00:07:39.787 --> 00:07:43.502
and that is to refactor to the active repositories
130

131
00:07:43.502 --> 00:07:44.877
in our IngredientService.
131

132
00:07:44.877 --> 00:07:46.480
So I almost forgot to do that
132

133
00:07:46.480 --> 00:07:49.001
but realized that we still need to do that,
133

134
00:07:49.001 --> 00:07:50.512
so I'm gonna jump over to IntelliJ
134

135
00:07:50.512 --> 00:07:52.679
and do that refactoring now.
135

136
00:07:52.679 --> 00:07:53.991
So, let's see here.
136

137
00:07:53.991 --> 00:07:55.532
We got a couple of repositories here,
137

138
00:07:55.532 --> 00:07:59.449
so let's take all these to active repositories,
138

139
00:08:03.805 --> 00:08:07.722
and of course this is gonna break a few things.
139

140
00:08:21.237 --> 00:08:23.870
Now we can see that we refactored the build here,
140

141
00:08:23.870 --> 00:08:25.315
so we do have a couple things here
141

142
00:08:25.315 --> 00:08:26.148
that we need to look at.
142

143
00:08:26.148 --> 00:08:29.065
So we're gonna do an Optional here.
143

144
00:08:31.868 --> 00:08:33.245
Okay, I'm looking over the code
144

145
00:08:33.245 --> 00:08:35.315
and there's some significant refactoring
145

146
00:08:35.315 --> 00:08:36.148
that we wanna do.
146

147
00:08:36.148 --> 00:08:37.519
What I'm gonna do here is
147

148
00:08:37.519 --> 00:08:39.349
I'm gonna pause the video for a moment.
148

149
00:08:39.349 --> 00:08:40.788
I'm gonna do the refactoring,
149

150
00:08:40.788 --> 00:08:43.217
so we don't have to stumble through this live,
150

151
00:08:43.217 --> 00:08:45.674
and then we'll go through exactly what I refactored,
151

152
00:08:45.674 --> 00:08:48.460
because right now, we're setup more in a blocking sense,
152

153
00:08:48.460 --> 00:08:52.248
and we need to set this up to leverage the stream.
153

154
00:08:52.248 --> 00:08:54.641
So I'm gonna do that right now, pause the video,
154

155
00:08:54.641 --> 00:08:56.990
and I will be right back.
155

156
00:08:56.990 --> 00:09:01.688
Okay, I've gone ahead and refactored for a reactive model
156

157
00:09:01.688 --> 00:09:03.629
and actually learned a little bit along the way.
157

158
00:09:03.629 --> 00:09:07.897
So, probably the most significant reactive refactoring
158

159
00:09:07.897 --> 00:09:11.902
is where we're able to find the recipe or the ingredient
159

160
00:09:11.902 --> 00:09:14.120
by the recipe Ingredient Id.
160

161
00:09:14.120 --> 00:09:17.988
This is a little tricky here but this is all reactive here.
161

162
00:09:17.988 --> 00:09:19.591
It's on line 50.
162

163
00:09:19.591 --> 00:09:22.727
We go to the reactive repository and we do a findById,
163

164
00:09:22.727 --> 00:09:26.394
and it's actually kind of interesting here so.
164

165
00:09:28.237 --> 00:09:31.289
So that's gonna return back a Mono of the Recipe,
165

166
00:09:31.289 --> 00:09:32.691
but we don't want the Recipe,
166

167
00:09:32.691 --> 00:09:35.680
we wanna find an Ingredient which is in a Set
167

168
00:09:35.680 --> 00:09:37.145
on the Recipe object.
168

169
00:09:37.145 --> 00:09:40.196
So, the next thing that we're gonna do here
169

170
00:09:40.196 --> 00:09:43.363
is on line's 51 to 54, we are gonna go
170

171
00:09:46.362 --> 00:09:49.297
and look at the ingredients and go through there
171

172
00:09:49.297 --> 00:09:52.478
and filter it based on that ingredientId.
172

173
00:09:52.478 --> 00:09:56.888
Then we have a filter and Optional::isPresent,
173

174
00:09:56.888 --> 00:10:00.544
there on line 55, so that is saying if we get a hit,
174

175
00:10:00.544 --> 00:10:03.294
continue on, and then at line 56,
175

176
00:10:04.728 --> 00:10:07.574
we are going to map that Ingredient.
176

177
00:10:07.574 --> 00:10:10.405
A map is basically a transform operation,
177

178
00:10:10.405 --> 00:10:14.556
and remember we had to enhance it with the recipeId,
178

179
00:10:14.556 --> 00:10:17.830
before so, now we're gonna return back that command,
179

180
00:10:17.830 --> 00:10:20.755
and you can see we have this reactive code there
180

181
00:10:20.755 --> 00:10:23.672
on 50 to 60, and on lines 50 to 60,
181

182
00:10:24.993 --> 00:10:29.437
and all the code down below it is what that is replacing.
182

183
00:10:29.437 --> 00:10:34.388
So that is the ingredient (mumbles) find.
183

184
00:10:34.388 --> 00:10:37.796
Now the updates, the save and delete,
184

185
00:10:37.796 --> 00:10:40.147
I wanna show you something with the delete here.
185

186
00:10:40.147 --> 00:10:42.518
So this is actually kind of a interesting behavior,
186

187
00:10:42.518 --> 00:10:45.332
and you'll see that I have both in here,
187

188
00:10:45.332 --> 00:10:47.880
because what I wanna do is I wanna to run this
188

189
00:10:47.880 --> 00:10:49.547
inside the debugger.
189

190
00:10:51.106 --> 00:10:53.766
Go ahead and restart it,
190

191
00:10:53.766 --> 00:10:56.465
and found a interesting behavior,
191

192
00:10:56.465 --> 00:11:00.629
I'm gonna show you what's happening.
192

193
00:11:00.629 --> 00:11:01.879
Come over here,
193

194
00:11:05.945 --> 00:11:08.222
and I actually need to stop this,
194

195
00:11:08.222 --> 00:11:10.485
and run it inside the debugger.
195

196
00:11:10.485 --> 00:11:13.632
So we're gonna bring it up in the debugger now,
196

197
00:11:13.632 --> 00:11:16.454
and what I wanna show you
197

198
00:11:16.454 --> 00:11:20.157
is what happens when we come out of the reactive repository
198

199
00:11:20.157 --> 00:11:22.549
versus the blocking repository.
199

200
00:11:22.549 --> 00:11:25.177
So I'm going to come over here, and do a refresh,
200

201
00:11:25.177 --> 00:11:27.177
oop, get that URL right,
201

202
00:11:29.237 --> 00:11:32.135
and let's go in here, View, to View,
202

203
00:11:32.135 --> 00:11:35.717
and if I come in and go to Delete an ingredient,
203

204
00:11:35.717 --> 00:11:40.308
I get to the breakpoint, and the recipeReactive,
204

205
00:11:40.308 --> 00:11:42.405
let's first look at the recipe.
205

206
00:11:42.405 --> 00:11:45.100
Remember, we have the ingredients, and on the ingredient
206

207
00:11:45.100 --> 00:11:49.337
is a reference, a DB reference to the UnitOfMeasure,
207

208
00:11:49.337 --> 00:11:52.935
and we can see that we have the id and description there.
208

209
00:11:52.935 --> 00:11:57.102
Problem is, on the reactive version, we go into ingredients,
209

210
00:12:00.909 --> 00:12:03.175
the id and description are null,
210

211
00:12:03.175 --> 00:12:05.227
so it's kind of a strange behavior,
211

212
00:12:05.227 --> 00:12:07.839
because we are getting a list of,
212

213
00:12:07.839 --> 00:12:09.618
uom property there,
213

214
00:12:09.618 --> 00:12:13.035
but, nothing's there, so what's happening
214

215
00:12:14.093 --> 00:12:17.244
is I had to do a little research on this,
215

216
00:12:17.244 --> 00:12:21.411
and it turns out that the reactive driver for MongoDB
216

217
00:12:22.628 --> 00:12:24.628
does not support DBRefs.
217

218
00:12:25.793 --> 00:12:28.986
So you could see there's a issue here
218

219
00:12:28.986 --> 00:12:33.354
and Mark Paluch here says that the ReactiveStreams driver
219

220
00:12:33.354 --> 00:12:35.271
does not support DBRef.
220

221
00:12:36.298 --> 00:12:39.766
So, and then, Oliver, Oliver's a rockstar
221

222
00:12:39.766 --> 00:12:41.275
when it comes to Spring Data,
222

223
00:12:41.275 --> 00:12:43.674
he's saying that DBRefs are not recommended
223

224
00:12:43.674 --> 00:12:45.889
by the Mongo guys themselves,
224

225
00:12:45.889 --> 00:12:49.209
so the suggested alternatives to store IDs
225

226
00:12:49.209 --> 00:12:51.658
and then load the related data on that,
226

227
00:12:51.658 --> 00:12:54.915
and in hindsight, that probably would work for our model.
227

228
00:12:54.915 --> 00:12:57.689
I was trying to keep it close to a JPA like model
228

229
00:12:57.689 --> 00:12:59.507
as we would transition through it,
229

230
00:12:59.507 --> 00:13:01.243
but that's probably a little bit better
230

231
00:13:01.243 --> 00:13:03.404
because we're just using those references,
231

232
00:13:03.404 --> 00:13:05.475
so we probably could easily do that,
232

233
00:13:05.475 --> 00:13:07.836
and I think I'm gonna refactor the project for that
233

234
00:13:07.836 --> 00:13:09.287
in a future video,
234

235
00:13:09.287 --> 00:13:11.156
but for now, that's what's happening here,
235

236
00:13:11.156 --> 00:13:12.985
is that we have this,
236

237
00:13:12.985 --> 00:13:14.272
and I'm going to go ahead and delete
237

238
00:13:14.272 --> 00:13:16.811
the reactive reference here
238

239
00:13:16.811 --> 00:13:17.796
before I check in the code,
239

240
00:13:17.796 --> 00:13:19.921
but I wanted you to understand what was going on there.
240

241
00:13:19.921 --> 00:13:23.065
So we still have to block on the delete,
241

242
00:13:23.065 --> 00:13:24.460
because we're doing some logic there.
242

243
00:13:24.460 --> 00:13:26.926
So not a lot of refactoring there,
243

244
00:13:26.926 --> 00:13:29.093
and then also on the save,
244

245
00:13:30.557 --> 00:13:32.680
we are also doing some blocking operations there
245

246
00:13:32.680 --> 00:13:35.022
just because of the logic that we had to put in there.
246

247
00:13:35.022 --> 00:13:37.172
So, you can see that there's a few things
247

248
00:13:37.172 --> 00:13:39.089
that we have to work on there.
248

249
00:13:39.089 --> 00:13:42.483
So I'm gonna refactor some of this, going forward,
249

250
00:13:42.483 --> 00:13:44.337
so we'll get a little cleaner model,
250

251
00:13:44.337 --> 00:13:47.214
and just as reference, what's going on there
251

252
00:13:47.214 --> 00:13:51.222
is we have the Ingredient as this @DBRef,
252

253
00:13:51.222 --> 00:13:53.572
so what we'll do is we'll change this,
253

254
00:13:53.572 --> 00:13:57.228
we'll refactor the data model, not via a DBRef,
254

255
00:13:57.228 --> 00:14:01.077
but to actually be that object with the ID in it.
255

256
00:14:01.077 --> 00:14:04.216
So we'll store the whole thing without a DBRef,
256

257
00:14:04.216 --> 00:14:07.065
and that's what's breaking the reactive driver.
257

258
00:14:07.065 --> 00:14:09.639
So like I said, in a future video,
258

259
00:14:09.639 --> 00:14:13.202
we will go ahead and refactor the database, the data model,
259

260
00:14:13.202 --> 00:14:16.561
so that we can leverage that without using a DBRef
260

261
00:14:16.561 --> 00:14:19.557
and work with the ReactiveMongo
261

262
00:14:19.557 --> 00:14:22.057
database driver more smoothly.
