WEBVTT
1
00:00:05.260 --> 00:00:09.940
In this video, we are going to be working against issue number three, and that is to go ahead and

2
00:00:09.940 --> 00:00:11.350
create our joke service.

3
00:00:11.680 --> 00:00:15.450
So I'm going to toggle over to intelligence and work on that now.

4
00:00:16.950 --> 00:00:22.920
So, um, up until, gee, we don't need this guy opened, what I want to do is let's take a quick look

5
00:00:23.100 --> 00:00:28.800
and hear some opening up external libraries and I want to go down to my dependency.

6
00:00:28.800 --> 00:00:35.850
So this is the jar that we pulled in from my Mavin are my in central artifact can see and hear that

7
00:00:35.850 --> 00:00:37.320
it just has two classes.

8
00:00:37.320 --> 00:00:39.900
The one that we want, it's Chuck Norris quotes.

9
00:00:40.830 --> 00:00:44.670
So you can see it's not a terribly complex implementation.

10
00:00:44.670 --> 00:00:47.670
So we just have a list of quotes.

11
00:00:47.670 --> 00:00:54.510
And you can see here, these are all the quotes are jokes, I should say, and all we do is say get

12
00:00:54.510 --> 00:00:55.430
a random quote.

13
00:00:55.650 --> 00:01:05.250
So it looks out at that list and grabs a random integer and grabs basically a random string off that

14
00:01:05.250 --> 00:01:06.170
list and returns it.

15
00:01:06.180 --> 00:01:08.430
So not exactly rocket science here.

16
00:01:08.430 --> 00:01:09.240
So pretty simple.

17
00:01:09.240 --> 00:01:11.630
Just a little fun implementation here.

18
00:01:11.640 --> 00:01:14.310
So let me lapse this and close that.

19
00:01:14.700 --> 00:01:17.820
And what we want to do is go ahead and implement the service.

20
00:01:18.360 --> 00:01:20.580
So I'm going to come up here and create a new package.

21
00:01:21.430 --> 00:01:26.830
My convention conventionality put my services in a package of services and my controllers and package

22
00:01:26.830 --> 00:01:30.270
of controllers, it just makes the code a little more neat and organized.

23
00:01:30.370 --> 00:01:32.070
So let's do services.

24
00:01:32.350 --> 00:01:37.840
So pretending that this would one day become a much larger project, even though we're just demonstrating

25
00:01:37.840 --> 00:01:39.780
some pretty simple functionality here.

26
00:01:40.300 --> 00:01:47.050
And again, when we're working with the spring framework, doing dependency injection best practices

27
00:01:47.050 --> 00:01:50.320
to code against an interface and then utilize that interface.

28
00:01:50.350 --> 00:01:51.850
Let's go ahead and come in here.

29
00:01:51.850 --> 00:01:53.680
I'm going to create a new Java class.

30
00:01:54.190 --> 00:01:55.540
We'll call it an interface.

31
00:01:57.320 --> 00:01:59.180
So go ahead, search service.

32
00:02:02.910 --> 00:02:04.650
And what I can do here.

33
00:02:07.080 --> 00:02:14.790
So just do string get joke, and we don't need to pass it in any parameter, so that's our interface.

34
00:02:15.000 --> 00:02:22.290
So very, very straight, straightforward, and what I can do here in ontology is just on the Maxxam

35
00:02:22.290 --> 00:02:23.010
do an option.

36
00:02:23.010 --> 00:02:29.310
Enter, brings up a dialogue here, implement interface, just hit enter on that.

37
00:02:29.770 --> 00:02:32.580
You know, the keys and windows are going to be a little bit different.

38
00:02:33.120 --> 00:02:38.880
But you can see here it's coming up with a default of joke service mple and address this in the course

39
00:02:38.880 --> 00:02:39.150
somewhere.

40
00:02:39.150 --> 00:02:46.530
As far as INTERFET naming conventions here, for this purposes, I'm only going to have one implementation.

41
00:02:46.890 --> 00:02:51.990
If you get into a situation where you have multiple amputation, that's where it's best to stray away

42
00:02:51.990 --> 00:02:52.950
from empl.

43
00:02:53.070 --> 00:02:56.010
You don't want to do something like empl one and two and three.

44
00:02:56.010 --> 00:02:57.320
That would make no sense at all.

45
00:02:57.350 --> 00:03:02.550
You'd want to do some type of description, but here, for our purposes, we only are going to have

46
00:03:02.550 --> 00:03:04.260
one implementation of that interface.

47
00:03:04.260 --> 00:03:06.960
So go ahead and create that like so.

48
00:03:09.500 --> 00:03:15.110
And we're going to go ahead and add that to get can see here that it's provided an implementation of

49
00:03:15.110 --> 00:03:15.410
that.

50
00:03:15.680 --> 00:03:22.520
So here I'm going to annotate this as a service using the spring stereotype to say that this is a service

51
00:03:22.550 --> 00:03:28.370
and now I'm talking spring, that this is a spring component and spring boot is going to pick it up

52
00:03:28.370 --> 00:03:32.270
because here we have the spring boot application.

53
00:03:32.660 --> 00:03:34.130
Expand this out a little bit.

54
00:03:34.430 --> 00:03:36.610
I can see that it is in this package.

55
00:03:36.980 --> 00:03:43.460
So by default, spring boot is going to look for annotated components in this package, the Goober's

56
00:03:43.460 --> 00:03:48.350
Spring Framework, Spring five jokes, the two and then anything down beneath that.

57
00:03:48.350 --> 00:03:50.240
So I don't need any further configuration.

58
00:03:51.050 --> 00:03:58.940
Now, what I can also do best practice is to declare private final, and we want that.

59
00:04:00.680 --> 00:04:01.850
Chuck Norris quotes.

60
00:04:03.780 --> 00:04:10.050
Like, so you can see that that is not happy, so I'm going to come in and create a constructor for

61
00:04:10.050 --> 00:04:10.350
that.

62
00:04:11.780 --> 00:04:19.790
So, like none and here just doing a no args construct around this and say this Chuck Norris quotes

63
00:04:20.360 --> 00:04:22.280
equals new.

64
00:04:24.330 --> 00:04:30.780
And then you might be going, whoa, wait a second, this is not friendly for dependency injection and

65
00:04:30.930 --> 00:04:32.880
and yes, that is absolutely correct.

66
00:04:33.040 --> 00:04:38.040
If we were a little further along as far as using utilizing spring configuration, I would declare this

67
00:04:38.040 --> 00:04:38.790
as a being.

68
00:04:39.370 --> 00:04:40.890
But that is coming up in the course.

69
00:04:40.890 --> 00:04:43.550
So we won't be doing that at this particular time.

70
00:04:43.560 --> 00:04:46.060
So here we are hard coating it.

71
00:04:46.070 --> 00:04:49.980
And so this gets wired up using the Java constructor.

72
00:04:50.220 --> 00:04:56.070
So when spring creates an instance of this, we automatically get that built inside of the constructor.

73
00:04:56.190 --> 00:05:01.680
Further out on the course, I'll be showing you how to declare spring components, not using the annotation,

74
00:05:01.680 --> 00:05:06.390
because here I think I've shown you how to use these spring stereotypes.

75
00:05:06.660 --> 00:05:12.120
We have got into spring configuration now how I can take a third party dependency, declare that.

76
00:05:12.120 --> 00:05:14.250
But that is going to be coming up in the course.

77
00:05:14.850 --> 00:05:21.440
And then, of course, what we want to do is come in here, say Chuck Norris quotes, get random quotes.

78
00:05:21.450 --> 00:05:23.990
So we'll go ahead and return back a random string.

79
00:05:24.450 --> 00:05:30.890
So just to recap what we implemented here, we added in the interface for a joke service, single methadone

80
00:05:30.900 --> 00:05:31.980
to get a joke.

81
00:05:32.370 --> 00:05:40.180
And then again here, what we did is we implemented a hardcoded that implementation to provide back

82
00:05:40.200 --> 00:05:41.610
that random, quote, value.

83
00:05:42.000 --> 00:05:48.540
And coming up, we will create a controller and utilize this spring managed component within the controller.

84
00:05:48.540 --> 00:05:49.830
But we'll do that a different video.

85
00:05:50.130 --> 00:05:56.670
And at this point, I'll go ahead and commit this code into GitHub against that issue and on the branch

86
00:05:56.940 --> 00:06:01.080
create joke service so you can see everything that was changed in this lesson.
