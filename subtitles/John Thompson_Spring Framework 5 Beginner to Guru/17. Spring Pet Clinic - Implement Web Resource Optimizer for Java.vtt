WEBVTT
0
1
00:00:03.950 --> 00:00:09.960
Alright! In the previous video, you saw that
I made mention to a resource that wasn't
1

2
00:00:09.960 --> 00:00:14.549
there. There's a CSS file, custom CSS file,
that is available. There are reference
2

3
00:00:14.549 --> 00:00:18.270
inside the templates but we didn't see
it in the resources. You can see here,
3

4
00:00:18.270 --> 00:00:24.660
I have the static resources up. And we
have fonts, we have images, but we don't
4

5
00:00:24.660 --> 00:00:30.210
have any CSS files. And if we come back
here and look at source, or come up to
5

6
00:00:30.210 --> 00:00:35.880
the top. I'm sorry, under main, you can see that we have less
6

7
00:00:35.880 --> 00:00:41.640
resources. These are CSS stubs that
you get processed. Pretty common thing to
7

8
00:00:41.640 --> 00:00:46.230
do but we don't have Spring Boot, natively, it does not support the processing
8

9
00:00:46.230 --> 00:00:51.539
of less resources so these are going to
be compiled. These are all website
9

10
00:00:51.539 --> 00:00:56.190
resources. Taking a closer look at
what's going on here inside of Spring Pet
10

11
00:00:56.190 --> 00:01:03.050
Clinic, I'm going to show you the secret
sauce. If we come down here,
11

12
00:01:03.210 --> 00:01:08.580
you can see that we're using this WRO4J
Maven plugin. So if I come out
12

13
00:01:08.580 --> 00:01:13.979
here and just google that, we can say
this brings up a whole plugin, web
13

14
00:01:13.979 --> 00:01:18.299
source resource optimizer for
Java. I've personally never used
14

15
00:01:18.299 --> 00:01:22.890
this before. It does look like a
pretty solid plugin. If you are doing a
15

16
00:01:22.890 --> 00:01:27.000
lot of web development, it does open up
some interesting possibilities if we
16

17
00:01:27.000 --> 00:01:31.020
want to get into that. And taking a look
at what they've done here, we can see
17

18
00:01:31.020 --> 00:01:35.040
that the configuration is pretty
straightforward. There's a few
18

19
00:01:35.040 --> 00:01:39.270
things that we need to implement there.
You can see that we have a dependency on
19

20
00:01:39.270 --> 00:01:43.800
web jars. I do talked about using
web jars in the course. The web jars are
20

21
00:01:43.800 --> 00:01:48.360
basically a jar file with web resources
in it. You can see here, we are calling
21

22
00:01:48.360 --> 00:01:53.520
on a dependency for web jars. This
does all the build configuration for
22

23
00:01:53.520 --> 00:01:58.619
this plugin. What I want to do in this
video is implement that. And just going
23

24
00:01:58.619 --> 00:02:07.220
along with our habit, we want to enter
implement the WRO4J.
24

25
00:02:15.090 --> 00:02:19.100
I'm saying that we want to implement
that.
25

26
00:02:19.420 --> 00:02:23.710
We'll implement that Maven plugin in
the Spring Pet Clinic resources. I'm
26

27
00:02:23.710 --> 00:02:28.450
going to go ahead and create that issue
and assign that to myself. We are
27

28
00:02:28.450 --> 00:02:32.020
just going to take exactly what they're
doing in the Spring Pet Clinic Project
28

29
00:02:32.020 --> 00:02:37.480
and bring that over to us so we can
learn a lot from this. The first thing
29

30
00:02:37.480 --> 00:02:43.290
is this does reference some jars. You can
see here, we have a section and here of
30

31
00:02:43.290 --> 00:02:49.360
web jars. I'm going to just grab this
and bring it right on over to our Maven.
31

32
00:02:49.360 --> 00:02:53.290
I'm going to come over here to
IntelliJ. This is going to be
32

33
00:02:53.290 --> 00:03:01.740
applicable to the web project. I come
in here and I'll put it right under here.
33

34
00:03:01.740 --> 00:03:07.260
I'm just doing a paste in there. You
can see that it is asking for the web
34

35
00:03:07.260 --> 00:03:13.350
jars, bootstrap and jQuery version so
let's come back over here. We see
35

36
00:03:13.350 --> 00:03:18.570
here, I'm going to grab these web dependency
versions, so we'll just grab those.
36

37
00:03:18.570 --> 00:03:24.390
I'm just stealing this shamelessly right
from the Spring Pet Clinic reference
37

38
00:03:24.390 --> 00:03:26.930
project.
38

39
00:03:31.730 --> 00:03:37.280
Go ahead and define those properties. Now
we can see that this is happy. Next thing
39

40
00:03:37.280 --> 00:03:44.650
we want to do is grab this build plugin.
There's WRO4J, this website
40

41
00:03:44.650 --> 00:03:51.130
resources plugin. We'll just grab that
plugin and the associated configuration
41

42
00:03:51.130 --> 00:03:57.040
of it. And remember, the plugins go under
build plugins and we don't have that
42

43
00:03:57.040 --> 00:04:03.670
defined in our Maven POM yet. We can
say build plugins like so. I'll just
43

44
00:04:03.670 --> 00:04:08.239
paste that right in.
We can see that we have a plugin
44

45
00:04:08.239 --> 00:04:13.670
manager. We have project directory,
classes, static resources, CSS, and that's
45

46
00:04:13.670 --> 00:04:17.750
a CSS destination folder, so that is
going to get generated by the plugin.
46

47
00:04:17.750 --> 00:04:25.550
It's referencing a WRO files
that's under source main WRO. So that is
47

48
00:04:25.550 --> 00:04:30.889
going to be here. Let's minimize
resources. We can see that we have
48

49
00:04:30.889 --> 00:04:36.169
this WRO folder that is right under
there. I'm going to copy that right on
49

50
00:04:36.169 --> 00:04:42.639
over, and now this is going to go under
the main directory.
50

51
00:04:46.080 --> 00:04:49.460
I'm going to go ahead and close that.
51

52
00:04:49.500 --> 00:04:52.770
You can see these two files have been
added. I'm just going to collapse the
52

53
00:04:52.770 --> 00:04:58.140
templates. So now, we can see under the
main directory, we do have the WRO
53

54
00:04:58.140 --> 00:05:04.320
folder, or directory, if you should prefer
that has properties in it. You can
54

55
00:05:04.320 --> 00:05:08.940
see preprocessors and postprocessors.
This is all configuration for that
55

56
00:05:08.940 --> 00:05:13.999
WRO plugin of how it processes web
resources.
56

57
00:05:13.999 --> 00:05:20.389
Now we can also say, let's come back
over to the configuration here. That
57

58
00:05:20.389 --> 00:05:27.049
takes care of this. But now, we also have
a context folder for source main less
58

59
00:05:27.049 --> 00:05:32.829
and that's the less resources. Let's
go ahead and grab that.
59

60
00:05:34.409 --> 00:05:41.309
Copy that and come on back over here and
that again goes under main. I'll go
60

61
00:05:41.309 --> 00:05:46.040
ahead and paste that.
You can see that IntelliJ
61

62
00:05:46.040 --> 00:05:49.670
automatically opens up one of the files.
These are less files that need to get
62

63
00:05:49.670 --> 00:05:53.120
pre-process. I'll go ahead and close
these too. Let's go ahead and kick the
63

64
00:05:53.120 --> 00:05:56.090
tires on this a little bit. I'm going
to go ahead and start up the Spring Boot
64

65
00:05:56.090 --> 00:05:59.390
application. We're going to make sure that
we're not getting any errors at this
65

66
00:05:59.390 --> 00:06:04.070
point. I haven't done a lot of
looking into exactly how this plugin
66

67
00:06:04.070 --> 00:06:07.790
works but it has a Maven plugin so
it's going to be doing stuff. I don't
67

68
00:06:07.790 --> 00:06:14.360
think it's going to do much here. We
can see, I didn't see any chatter in here.
68

69
00:06:14.360 --> 00:06:19.370
It is expected because this is a
Maven plugin. Just running a Spring Boot
69

70
00:06:19.370 --> 00:06:24.680
application doesn't execute a Maven
plugin. But it did come up without
70

71
00:06:24.680 --> 00:06:29.600
errors, so I'm going to go ahead and stop
that. Let's just minimize this window
71

72
00:06:29.600 --> 00:06:36.340
here. Need to stop. But now if I come
over here under Spring Pet Clinic,
72

73
00:06:36.340 --> 00:06:45.009
let's go ahead, I'm going to do a clean.
Let's do a package.
73

74
00:06:46.229 --> 00:06:51.930
We can see this is now going out and
building. Right here is the WRO4J
74

75
00:06:51.930 --> 00:06:57.870
plugin. We can see that he did execute.
We see that we did get a warning here.
75

76
00:06:57.870 --> 00:07:01.319
Let's go ahead and take a look at
what it built. It did build up some
76

77
00:07:01.319 --> 00:07:07.080
resources for us. If we come out here
and take a look at classes, you can see
77

78
00:07:07.080 --> 00:07:10.249
static resources,
78

79
00:07:10.520 --> 00:07:17.810
CSS. So apparently, it did build a CSS file
for us.
79

80
00:07:18.599 --> 00:07:25.110
I'm not sure exactly what that means.
It did generate a less file for us. We
80

81
00:07:25.110 --> 00:07:29.759
can see that it also generated a
JavaScript file possibly for us. I'm not
81

82
00:07:29.759 --> 00:07:35.009
seeing the JavaScript generated anywhere
but we did get some things configured.
82

83
00:07:35.009 --> 00:07:39.629
We'll kick the tires more on this
in the upcoming videos. But we see that we
83

84
00:07:39.629 --> 00:07:45.330
did get a number of CSS files generated
or a CSS file generate, so this is our
84

85
00:07:45.330 --> 00:07:52.709
custom CSS generated for the application.
That is behaving as we expected. We
85

86
00:07:52.709 --> 00:07:57.509
are getting these resources generated now.
Remember I looked at this closer
86

87
00:07:57.509 --> 00:08:03.930
because I saw references to CSS pet
clinic. Just to recap, what we are
87

88
00:08:03.930 --> 00:08:09.779
doing is we're actually using this WRO4J
 plugin, which is going to be
88

89
00:08:09.779 --> 00:08:14.969
generating resources from less files and
combining those so it's also saying that
89

90
00:08:14.969 --> 00:08:20.369
hey I need this web jar called bootstrap
involved. That is gonna give us a
90

91
00:08:20.369 --> 00:08:24.990
bootstrap on the class path. Because
the way this is running, it is dependent
91

92
00:08:24.990 --> 00:08:30.330
upon Maven to generate these resources.
We will have to run either the jar or
92

93
00:08:30.330 --> 00:08:37.979
probably from the Spring command of Spring
Boot. Remember, you have a Spring Boot run
93

94
00:08:37.979 --> 00:08:42.569
where we can run it from the Spring
Boot plugin. I'm pretty sure that
94

95
00:08:42.569 --> 00:08:46.709
this is going to go ahead and generate
the resources for us, so we'll experiment
95

96
00:08:46.709 --> 00:08:51.120
with that in an upcoming video. This
one's getting a little bit long. Just
96

97
00:08:51.120 --> 00:08:56.250
to continue with working from issues,
I've implemented this. Again, we are
97

98
00:08:56.250 --> 00:09:01.980
following a iterative development cycle.
We got this implemented. I'm going to
98

99
00:09:01.980 --> 00:09:06.780
go ahead and close this. That was
number 24.
99

100
00:09:06.780 --> 00:09:10.919
I'll go ahead and do a Git commit.
100

101
00:09:19.580 --> 00:09:23.830
Go ahead and commit and push that.
101

102
00:09:24.850 --> 00:09:28.960
Again, as this is pushing, we are
going through iterative development. This
102

103
00:09:28.960 --> 00:09:33.790
is just an initial phase. We got
everything up and running. It looks like
103

104
00:09:33.790 --> 00:09:37.750
it's happy and compiling what it should
and we will definitely be experimenting
104

105
00:09:37.750 --> 00:09:40.720
with this in the future. But first, we
have to implement a lot of the other
105

106
00:09:40.720 --> 00:09:47.010
resource processing to affect how this
page is going to be displaying.
