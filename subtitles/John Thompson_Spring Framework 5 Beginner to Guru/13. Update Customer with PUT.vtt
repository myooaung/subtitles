WEBVTT
0
1
00:00:04.370 --> 00:00:08.940
Alright. In this video, we are going to
implement the update function and we are
1

2
00:00:08.940 --> 00:00:14.940
gonna do this through using HTTP PUT.
You can see here, I've got the API spec
2

3
00:00:14.940 --> 00:00:18.660
up from the API that we've been working
with, and we're gonna do a put against
3

4
00:00:18.660 --> 00:00:23.609
customers/{id} value. And
it's expecting that JSON object with
4

5
00:00:23.609 --> 00:00:28.949
firstname, lastname in it.
So let's toggle over to IntelliJ now.
5

6
00:00:28.949 --> 00:00:33.000
What I've done is I've gone through and
implemented the backend code of it. So
6

7
00:00:33.000 --> 00:00:37.829
So, on CustomerService, I added in a new
method to save customer. I'm not gonna
7

8
00:00:37.829 --> 00:00:41.910
go into this too much detail, because I'm
really focused on the Controller layer.
8

9
00:00:41.910 --> 00:00:46.649
But I'm just making you aware that, of
what I did there. The create and save
9

10
00:00:46.649 --> 00:00:52.860
we're pretty similar. So I extracted that
out into a common method
10

11
00:00:52.860 --> 00:00:57.059
here. To do that common coding, so we're
not duplicating code. Because effectively,
11

12
00:00:57.059 --> 00:01:01.710
we take in the DTO, convert it, and the
only difference here, when we're doing a
12

13
00:01:01.710 --> 00:01:06.090
save for the PUT operation is that we're
gonna have the id value. So we need to
13

14
00:01:06.090 --> 00:01:12.510
set that id value, which we cannot do in
the DTO converter. So pretty similar
14

15
00:01:12.510 --> 00:01:17.909
functionality that is there. And then, you
can see that I did write a unit test for
15

16
00:01:17.909 --> 00:01:23.340
that. We'll go ahead and run that. Verify
that. And that is all still happy. Let's
16

17
00:01:23.340 --> 00:01:28.200
see that my test is passing. Now, I also
wrote a CustomerControllerTest. So
17

18
00:01:28.200 --> 00:01:32.520
let's take a look at that now and we
expect that this is going to fail
18

19
00:01:32.520 --> 00:01:36.659
because we are following test-driven
development here. And we can see that I
19

20
00:01:36.659 --> 00:01:41.939
am getting a 405 error. So we
are not happy there. So request method
20

21
00:01:41.939 --> 00:01:46.470
PUT is not supported. So we're going to go
ahead and implement that now. Let's come
21

22
00:01:46.470 --> 00:01:58.229
over here to our CustomerController. And
I'm just going to steal this. And I wanna
22

23
00:01:58.229 --> 00:02:07.920
do is update. Call this updateCustomer. Close that out. And this time, we
23

24
00:02:07.920 --> 00:02:10.970
want to use @PutMapping.
24

25
00:02:13.230 --> 00:02:20.530
And just like the id, we wanna do the
same thing here. So I am evilly doing cut
25

26
00:02:20.530 --> 00:02:24.580
and paste. That's not something you wanna be doing. And we also want the 
26

27
00:02:24.580 --> 00:02:33.129
@PathVariable just like they GET. So the same
things. And now, here, when I get rid of
27

28
00:02:33.129 --> 00:02:43.140
that, we wanna implement that. And we
also want to take this to an OK.
28

29
00:02:43.140 --> 00:02:51.299
Don't return back in HTTP status of okay.
Let's go ahead and run our test now.
29

30
00:02:52.019 --> 00:03:03.940
Verify that is up and running. And we're
expecting a 200, so let's see here. There was
30

31
00:03:03.940 --> 00:03:08.650
a mistake in my test. We actually want
the test to be verifying OK. So that
31

32
00:03:08.650 --> 00:03:12.519
was my mistake. I'm writing the test
there. And I should be OK now.
32

33
00:03:12.519 --> 00:03:17.950
So that is passing, and let's go ahead
over to postman. First, we need to
33

34
00:03:17.950 --> 00:03:29.380
start this. Let's take a look at this
running in postman, and we should be able
34

35
00:03:29.380 --> 00:03:43.079
to just steal this junk at JSON and use
that in postman. See I have a few here.
35

36
00:03:43.079 --> 00:03:55.840
And this time, we won't do a put. Raw
body. Paste that. And then, let's send that. Up and
36

37
00:03:55.840 --> 00:04:09.910
that's because I forgot to do the id
value. And one more problem here. And we
37

38
00:04:09.910 --> 00:04:12.280
can see that once
I got my postman set up properly,
38

39
00:04:12.280 --> 00:04:17.229
with using Content-Type application/json, we can see that Freddy
39

40
00:04:17.229 --> 00:04:22.780
Meyers was accepted by our little API. So
that is now saved in. Let's see if we
40

41
00:04:22.780 --> 00:04:31.030
can do a I can GET. Just double check
this. And we are not getting the URL back.
41

42
00:04:31.030 --> 00:04:35.770
So I'll get a little bug there to work
out. But other than that, I'm gonna call
42

43
00:04:35.770 --> 00:04:39.460
this lesson good. I'm gonna fix that url
before I check in the code or your
43

44
00:04:39.460 --> 00:04:41.880
example.
