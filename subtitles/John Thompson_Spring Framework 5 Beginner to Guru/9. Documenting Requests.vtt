WEBVTT
1
00:00:04.950 --> 00:00:11.940
So far we've been looking at documenting a GET request and we haven't had a chance to look at a request

2
00:00:11.970 --> 00:00:12.470
object.

3
00:00:12.470 --> 00:00:17.580
So what we're going to do is start working on the safe beer operation so we can take a look at how we

4
00:00:17.580 --> 00:00:19.710
document a request object.

5
00:00:19.710 --> 00:00:23.870
So say beer that's going to be taking in a beer detail.

6
00:00:23.880 --> 00:00:27.310
So the method is going to be very very similar.

7
00:00:27.890 --> 00:00:37.240
So if you come in here we come in and say and do like so again we're going to say document and let's

8
00:00:37.240 --> 00:00:39.210
make sure that we pass in the same string.

9
00:00:39.210 --> 00:00:42.830
So we want the same string value because we're describing the single API.

10
00:00:43.750 --> 00:00:48.310
So we'll go ahead and pass that so.

11
00:00:48.390 --> 00:00:58.140
And now what we want to do is we're gonna start expressing the request fields so I can see that's bringing

12
00:00:58.140 --> 00:00:59.870
in the payload documentation.

13
00:01:00.030 --> 00:01:02.340
And this is going to work very very somewhere.

14
00:01:02.340 --> 00:01:05.280
So it's a field with path.

15
00:01:05.310 --> 00:01:13.390
And let's say your name not description so say name of the beer.

16
00:01:13.390 --> 00:01:15.080
So let's go ahead and run this now.

17
00:01:15.400 --> 00:01:21.440
And as we can expect this is going to fail because we're not documenting all the fields all the requests

18
00:01:21.440 --> 00:01:23.080
fields that it's going to be picking up

19
00:01:25.960 --> 00:01:27.960
so we can see that this does come up.

20
00:01:28.360 --> 00:01:34.030
And here you can see is complaining about I.D. version Create Date last date.

21
00:01:34.030 --> 00:01:38.080
Now these are all properties that can be managed by the persistence layer.

22
00:01:38.080 --> 00:01:44.320
So somebody creating this request should not be sending these and very easy way to do that.

23
00:01:44.350 --> 00:01:52.740
So what we can do is come in here and say field with path again and let's say I.D. and we'd say is ignored

24
00:01:52.890 --> 00:01:57.810
like that and now that is going to drop off.

25
00:01:58.080 --> 00:02:04.520
Got a syntax error there told you this really really easy do some guy pause for a second and figure

26
00:02:04.520 --> 00:02:08.150
this out and let's see what I did wrong here.

27
00:02:08.310 --> 00:02:15.940
This is a little tricky so I put in is ignored and it should actually just be ignored as a property

28
00:02:16.810 --> 00:02:20.580
because it is ignore it's returning back a boolean which is not what we want.

29
00:02:20.580 --> 00:02:27.070
We want this that is going to be returned back a field descriptor so very easy mistake to make.

30
00:02:27.220 --> 00:02:30.030
Like I said the syntax can get a little tricky here.

31
00:02:30.040 --> 00:02:34.870
So what I'm going to do now is I'm going to go ahead and implement these remaining fields.

32
00:02:35.110 --> 00:02:39.580
I'm going to pause them recording implement them and then we'll come back and do a quick code review

33
00:02:39.580 --> 00:02:39.910
on that.

34
00:02:40.870 --> 00:02:46.510
So fast forward ahead and edit in the additional documentation points so I added these I have not run

35
00:02:46.510 --> 00:02:46.810
it yet.

36
00:02:46.810 --> 00:02:52.360
So let's go ahead and run that make sure that our test is back in the green should be I think I got

37
00:02:52.360 --> 00:02:55.420
everything and just to recap what I did.

38
00:02:55.960 --> 00:02:59.860
So we have the ideas property version Create Date last modified date.

39
00:02:59.860 --> 00:03:03.190
Those are all set to ignored because we're not documenting those.

40
00:03:03.190 --> 00:03:05.910
The API users should never send those.

41
00:03:05.980 --> 00:03:11.890
And then also quantity on hand that should not be sent in the request as well because that's all stuff

42
00:03:11.920 --> 00:03:15.050
that's going to be maintained by the API the backend system API.

43
00:03:15.080 --> 00:03:21.580
But as far as things like beer price UPC style and name of the beer those are all modifiable properties

44
00:03:21.580 --> 00:03:22.220
for the API.

45
00:03:22.240 --> 00:03:29.740
So we have that set up properly and you can see here if anything's missing from that object we will

46
00:03:29.740 --> 00:03:30.280
get an error.

47
00:03:30.280 --> 00:03:36.240
So that's a nice example here that we have to work with and again this is a safe new beer.

48
00:03:36.280 --> 00:03:39.630
One problem you might be noticing a collapse.

49
00:03:39.630 --> 00:03:48.820
Out now you're seeing we have the get and we have the Post both methods and can see that we're getting

50
00:03:48.820 --> 00:03:50.720
a lot of code duplication.

51
00:03:50.860 --> 00:03:55.540
So that that is unfortunately a side effect of using spring rest stocks.

52
00:03:55.540 --> 00:04:00.880
There is a little bit of duplication there and I don't know of a way round there might be a way but

53
00:04:01.240 --> 00:04:08.890
I actually do not know a way around to reduce the both of verbosity and also the duplication of effort

54
00:04:08.890 --> 00:04:09.120
here.
