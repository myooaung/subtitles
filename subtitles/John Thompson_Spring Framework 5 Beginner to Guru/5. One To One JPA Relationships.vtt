WEBVTT
0
1
00:00:04.670 --> 00:00:10.230
Okay I have our entity relationships
back up here in JHipster Studio and
1

2
00:00:10.230 --> 00:00:15.289
what we're going to focus on in this
video is one-to-one relationships. And
2

3
00:00:15.289 --> 00:00:21.779
I'm going to look at the relationship
between Recipe and Notes. So we've got a
3

4
00:00:21.779 --> 00:00:25.289
couple of interesting things to work
through here and I'm going to toggle
4

5
00:00:25.289 --> 00:00:29.460
over to IntelliJ now. I just wanted to
refresh your memory on looking at the
5

6
00:00:29.460 --> 00:00:35.670
Recipe and Notes and let's get back over
to IntelliJ. And I've created a class,
6

7
00:00:35.670 --> 00:00:42.270
public class Recipe and that is in the
package domain and that's a pretty
7

8
00:00:42.270 --> 00:00:45.840
common convention. It is to put your
entities either in a package called
8

9
00:00:45.840 --> 00:00:51.930
domain or some people prefer to use
model. Neither one is incorrect nor right.
9

10
00:00:51.930 --> 00:00:57.449
It is just a informal convention that is
generally followed. You may want to call
10

11
00:00:57.449 --> 00:01:01.320
it something completely different. That
is totally up to you or the developers
11

12
00:01:01.320 --> 00:01:06.600
you work with. The Recipe is a kind of
interesting. Pretty much unchanged from
12

13
00:01:06.600 --> 00:01:12.479
what we looked at. One thing I want to one point
out is the byte array for image. So
13

14
00:01:12.479 --> 00:01:16.560
that's going to give us some interesting
things to work with in terms of JPA
14

15
00:01:16.560 --> 00:01:22.380
mappings and now I did add in a
placeholder for the difficulty. That's
15

16
00:01:22.380 --> 00:01:28.350
going to be enumeration. That we will
add in a future video. So this is Recipe
16

17
00:01:28.350 --> 00:01:33.720
and he's got relationship to Notes and
I'm just adding Notes on that. So let's
17

18
00:01:33.720 --> 00:01:36.380
do that right now.
18

19
00:01:39.860 --> 00:01:43.700
So I added in a property of that and
that's going to be our one-to-one
19

20
00:01:43.700 --> 00:01:50.450
property and let's take a quick look at
Notes also. Notes has one property for
20

21
00:01:50.450 --> 00:01:55.370
the recipe and then recipeNotes. So
nothing too exciting there.
21

22
00:01:55.370 --> 00:02:01.070
So let's come back over to Recipe and
what we want to do is add in our getters
22

23
00:02:01.070 --> 00:02:04.010
and setters because these are all
private fields. This is it just going to make
23

24
00:02:04.010 --> 00:02:09.590
this a standard POJO and I'm doing
IntelliJ for Mac its command and bring
24

25
00:02:09.590 --> 00:02:13.880
this dialog up and I'm going to use
IntelliJ to generate the getters and
25

26
00:02:13.880 --> 00:02:19.700
setters. Typical ceremonial code that we
have to do with Java. So we have that now.
26

27
00:02:19.700 --> 00:02:24.800
Now what we want to do is create that
relationship. So I'm going to come down
27

28
00:02:24.800 --> 00:02:31.430
to this field here and add in the
one-to-one mapping. So that is going to
28

29
00:02:31.430 --> 00:02:36.740
create the relationship for the
one-to-one mapping and I also want to
29

30
00:02:36.740 --> 00:02:43.820
set up a cascade. So you can make the
recipe the owner of that and we're going
30

31
00:02:43.820 --> 00:02:48.739
to do cascade all. So that defines the
relationship. But this is not an entity
31

32
00:02:48.739 --> 00:02:52.850
yet. So we want to set that up as well. So
we're going to come in and annotate the
32

33
00:02:52.850 --> 00:03:02.239
class as an Entity. So this is now
creating this class as an Entity but
33

34
00:03:02.239 --> 00:03:08.239
we're not done yet because we've set up
the object world but now we also need to
34

35
00:03:08.239 --> 00:03:12.230
deal with the relational world and
there's a little bit of leakage here in
35

36
00:03:12.230 --> 00:03:18.200
this model because we need to give it an
ID value. So under the covers, objects are
36

37
00:03:18.200 --> 00:03:22.519
going to get their own ID value within
the JVM but we're persisting it down to
37

38
00:03:22.519 --> 00:03:28.010
a relational database which it really
doesn't have a concept of an ID. So I'm
38

39
00:03:28.010 --> 00:03:32.650
going to add in a property for the ID
value.
39

40
00:03:35.780 --> 00:03:41.020
So that creates that and we're going to
annotate that with the @Id annotation
40

41
00:03:41.020 --> 00:03:47.120
and that is a standard javax persistence. Now we want to say how to
41

42
00:03:47.120 --> 00:03:52.940
generate it and in this case we are
going to rely on an auto generating
42

43
00:03:52.940 --> 00:04:01.130
field. So we're going to give it a
strategy and we're going to say IDENTITY
43

44
00:04:01.130 --> 00:04:07.400
and that is going to leverage the
underlying persistence framework to
44

45
00:04:07.400 --> 00:04:13.040
generate an ID value for us. Now I do
want to point out that in using the
45

46
00:04:13.040 --> 00:04:19.519
generation type of IDENTITY, that is a
special type to relational databases
46

47
00:04:19.519 --> 00:04:25.580
that will support the automatic
generation of a sequence. So MySQL
47

48
00:04:25.580 --> 00:04:31.220
does have an auto-generated primary key
property that we can use as well as
48

49
00:04:31.220 --> 00:04:36.889
several other databases do. If you're
using Oracle, Oracle 12 did add this in
49

50
00:04:36.889 --> 00:04:44.060
twelve and I have not seen that used
too much with JPA. I did try it a while
50

51
00:04:44.060 --> 00:04:48.140
back with an initial release of
Hibernate five and it was problematic
51

52
00:04:48.140 --> 00:04:53.000
for me. Hopefully that is now working
where you can leverage this feature. So
52

53
00:04:53.000 --> 00:04:56.840
you will see documentation out there
saying that it is not supported by
53

54
00:04:56.840 --> 00:05:01.880
Oracle. That is changing, that as a new
feature in Oracle 12 that has been added
54

55
00:05:01.880 --> 00:05:07.310
to the Oracle relational database but
the last time I tried it, Hibernate had
55

56
00:05:07.310 --> 00:05:11.530
not caught up to leverage that
capability.
56

57
00:05:11.530 --> 00:05:18.979
Now we also want to set a setters and
getters for our ID property.
57

58
00:05:18.979 --> 00:05:27.080
So again command N. Now that is going to
make that happy and we need to do the
58

59
00:05:27.080 --> 00:05:37.460
same over on a Notes class. So make him
an Entity and we also want to set up an
59

60
00:05:37.460 --> 00:05:39.610
ID
60

61
00:05:40.520 --> 00:05:49.490
and it's just pretty common to use a Long
data type for the ID value. You can use
61

62
00:05:49.490 --> 00:05:55.159
integer but you limit the number of ID
values that you get that way. So you
62

63
00:05:55.159 --> 00:06:05.360
can run out surprisingly quick on a busy
database. So now I have the properties
63

64
00:06:05.360 --> 00:06:12.560
there, one to one relationship and in
this case, we don't need to specify a
64

65
00:06:12.560 --> 00:06:21.460
cascade because this instance we are
going to allow the Recipe to own this. So
65

66
00:06:21.460 --> 00:06:28.069
we would not want, in our use case, we
don't want if we delete the Notes object
66

67
00:06:28.069 --> 00:06:32.690
we don't want to go back and delete the
Recipe object. So we don't want cascade
67

68
00:06:32.690 --> 00:06:38.360
operations happening but the inverse, if
we want to delete a Recipe, of course
68

69
00:06:38.360 --> 00:06:44.599
we want to delete the recipeNotes. So
I'm going to add in the getter and
69

70
00:06:44.599 --> 00:06:53.599
setters. Now there is a special use case
that we want to look at and we have two
70

71
00:06:53.599 --> 00:06:59.060
of them there and we have an annotation
called @Lob. I've not talked about this
71

72
00:06:59.060 --> 00:07:06.469
before but this is for large objects and
we, in a relational database you can use
72

73
00:07:06.469 --> 00:07:12.919
CLOBS for character large objects or
BLOBS for binary large objects. So in
73

74
00:07:12.919 --> 00:07:18.830
this case by default a String in Java
can be crazy large, I forget the exact
74

75
00:07:18.830 --> 00:07:23.060
limitation of it off the top of my head
but a lot larger than the default of
75

76
00:07:23.060 --> 00:07:29.750
hibernate and JPA which is going to be
255 characters. So we want to allow our
76

77
00:07:29.750 --> 00:07:35.150
users to put in a lot more than 250
characters or 255 characters on the
77

78
00:07:35.150 --> 00:07:43.039
Notes field. So what we are going to do
to use the Lob annotation. And by doing
78

79
00:07:43.039 --> 00:07:49.940
this against a String, JPA is going to
expect a distort in a CLOB field in
79

80
00:07:49.940 --> 00:07:54.260
the database. Now we also have one more
opportunity for this
80

81
00:07:54.260 --> 00:08:00.110
within recipe and this is on the byte
array field that we're going to store
81

82
00:08:00.110 --> 00:08:05.060
the Image in. So later in the course we'll
get into loading up an image and we want
82

83
00:08:05.060 --> 00:08:12.080
to put it into the database in a byte
array field. And if we also do the Lob
83

84
00:08:12.080 --> 00:08:18.650
annotation here, that will get created as
a binary large objects field or a blob
84

85
00:08:18.650 --> 00:08:23.830
field inside the database. You know the
only thing we need to do here yet is
85

86
00:08:23.830 --> 00:08:28.670
difficulty and that is an enumeration
and I am going to get into that in a
86

87
00:08:28.670 --> 00:08:34.750
future video. So just to recap here, we
have two entities that we created
87

88
00:08:34.750 --> 00:08:41.330
coming from the Recipe here and the
Notes here. These these two objects are
88

89
00:08:41.330 --> 00:08:46.400
now represented as POJOs in the
database and they've been annotated for
89

90
00:08:46.400 --> 00:08:50.600
JPA. So we have the entity, the ID specifying
90

91
00:08:50.600 --> 00:08:56.810
the strategy to get the ID from the
database upon persistence. We are also
91

92
00:08:56.810 --> 00:09:03.380
using a lob for a large object storage
and then we specified a one-to-one
92

93
00:09:03.380 --> 00:09:08.800
relationship for Notes and Recipe is
going to be the owner of this and
93

94
00:09:08.800 --> 00:09:13.610
persistent. So if we delete a Recipe that
is going to persist down and delete
94

95
00:09:13.610 --> 00:09:21.590
Notes. Whereas on the Notes object or the
Notes entity, we are annotating it as an
95

96
00:09:21.590 --> 00:09:27.830
entity same ID strategy, also one-to-one
but we are not specifying a cascade
96

97
00:09:27.830 --> 00:09:34.760
operation there. So if we delete the
Notes object, the Recipe will remain
97

98
00:09:34.760 --> 00:09:42.380
inside the database. And then finally on
line 18 there, we are specifying a lob, a
98

99
00:09:42.380 --> 00:09:47.060
large object for the recipeNotes that
will get a clob field inside the
99

100
00:09:47.060 --> 00:09:49.850
database to persist the Notes and
without having to worry about
100

101
00:09:49.850 --> 00:09:54.190
limitations on the size of that String.
