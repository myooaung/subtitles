WEBVTT
1

00:00:04.279  -->  00:00:07.560
Alright. In this video, we are going to
take a closer look at using REST

2

00:00:07.560  -->  00:00:12.420
template. And what I have on the screen
here right now, swagger documentation and

3

00:00:12.420  -->  00:00:17.960
this is a public API used for testing. So
you can see that's an educational API

4

00:00:17.960  -->  00:00:25.500
that we can exercise our use against and
test out using the rest template. So this

5

00:00:25.500  -->  00:00:30.150
is real slick documentation. What I like
about is you can come in here and you

6

00:00:30.150  -->  00:00:34.590
can interact with it and it tells you
exactly how to work with it. So you can

7

00:00:34.590  -->  00:00:39.300
do a little try it out. It gives you a
curl command and also shows you the

8

00:00:39.300  -->  00:00:44.219
response body there. And what we are
going to do is I've got a bunch of tests

9

00:00:44.219  -->  00:00:48.539
set up inside of IntelliJ, so I'm going
to toggle over to that, so we just did

10

00:00:48.539  -->  00:00:54.210
the test get categories. And here, I'm
gonna go ahead and run this one right

11

00:00:54.210  -->  00:00:59.609
now. You can see that's going out and
getting the categories, so it did

12

00:00:59.609  -->  00:01:05.100
exercise that and we can see that we got
back the same fruits, the same Json

13

00:01:05.100  -->  00:01:12.420
object here, as we did here. So did pretty
print there but this is good enough for

14

00:01:12.420  -->  00:01:17.369
our case because we didn't pretty print
the output. But essentially the same

15

00:01:17.369  -->  00:01:22.860
Json objects that got back from that
test method. So we can also do a test of

16

00:01:22.860  -->  00:01:29.189
get customers. And what I've done here,
you can see it at the top line 22, I've

17

00:01:29.189  -->  00:01:34.829
set up the base URL and then I am
appending in the method that we are

18

00:01:34.829  -->  00:01:42.299
gonna be using. So if I go ahead and run
this guy, I see that he went out there

19

00:01:42.299  -->  00:01:48.390
and it did go out and get the actual
customers. And just like here, if I come

20

00:01:48.390  -->  00:01:58.409
out so I can do a get a customers, say
try it out here, you can see that it does

21

00:01:58.409  -->  00:02:04.439
output a variety of customers for us. Now
we're not just limited to using get

22

00:02:04.439  -->  00:02:08.580
methods. We can also do it create a
customer. So let's take a quick look at

23

00:02:08.580  -->  00:02:13.349
the documentation for the create. And in
this case, if we want to create a customer,

24

00:02:13.349  -->  00:02:17.999
we want to do a post. And it shows that
we're gonna do a post with first name

25

00:02:17.999  -->  00:02:23.819
last name. Now if I come over here
back to IntelliJ, if I come into credit

26

00:02:23.819  -->  00:02:28.920
customer, what I'm doing here is I'm
going to use the API root plus the path

27

00:02:28.920  -->  00:02:34.200
of customers, and I'm creating that rest
template there, and then next on line 55,

28

00:02:34.200  -->  00:02:39.180
I'm creating a map object. So I'm saying
that I'm gonna have strings as my keys

29

00:02:39.180  -->  00:02:44.249
and the map is contained objects. And this
gives me a quick handy way to create a

30

00:02:44.249  -->  00:02:51.150
simple Java object that I can tell
Jackson to parse and to into JSON. So I'm

31

00:02:51.150  -->  00:02:56.099
gonna pass that in. And on line 59, you
can see that I'm using the rest template.

32

00:02:56.099  -->  00:03:00.959
I'm doing a post for an object and that
method of rest template is going to go

33

00:03:00.959  -->  00:03:06.840
out exercise the URL and get back
the JSON that is responding

34

00:03:06.840  -->  00:03:13.079
list. Now I could strongly type that to
an actual Java object, but here, I'm using

35

00:03:13.079  -->  00:03:19.019
JSON node. And this is an object that
represents structured JSON within the

36

00:03:19.019  -->  00:03:23.970
Jackson library. So if I come in here, you
can see that this is right out Jackson,

37

00:03:23.970  -->  00:03:27.299
out of the Jackson data binding
libraries and this gives me a way to

38

00:03:27.299  -->  00:03:31.620
represent JSON object that's been
responded back from the API. So I'm not

39

00:03:31.620  -->  00:03:35.669
going to be working with it anyway.
But this is just a handy way to get am

40

00:03:35.669  -->  00:03:40.409
I'm taking generic JSON. Now you saw
before where we set up the actual

41

00:03:40.409  -->  00:03:44.519
objects to bind to here I'm kind of
skipping over this step I'm using a

42

00:03:44.519  -->  00:03:51.540
generic one. So let's go ahead and create
a customer, and we can see that it runs

43

00:03:51.540  -->  00:03:58.379
and I went in credit Joe Buck and it got
an ID of 367 there. So we can see that,

44

00:03:58.379  -->  00:04:05.219
that did work for us. I see if we can
actually see that here. I come in and do

45

00:04:05.219  -->  00:04:12.810
get customers. Try it out, and it looks
like we're getting limited there, for

46

00:04:12.810  -->  00:04:18.229
some reason. But if...let's see here. I
have a get.

47

00:04:18.229  -->  00:04:27.150
We did to do a get of 367 right? So I
come here and try it out. We'll see that

48

00:04:27.150  -->  00:04:35.160
is the customer that I just created
via the API. So now we can also update a

49

00:04:35.160  -->  00:04:41.610
customer. So in this case here, again, I'm
using the REST template. I still have the

50

00:04:41.610  -->  00:04:47.370
same JSON map. And I go out and create
it. In this time, you can see here on

51

00:04:47.370  -->  00:04:54.150
line 85, see how it responds back with a
customer URL. We are gonna parse out the

52

00:04:54.150  -->  00:04:58.860
we're basically gonna split the string
on the slashes and parse out the third

53

00:04:58.860  -->  00:05:05.070
value, which gives me the ID value. In
this case, I'm gonna go back and do

54

00:05:05.070  -->  00:05:10.590
another put. I'm doing a put against that
API, and again, I'm doing that same map

55

00:05:10.590  -->  00:05:14.789
object. But this time now, I'm doing
Michael Weston, with a space 2 after it

56

00:05:14.789  -->  00:05:24.800
so we can see that. Go ahead and run this
next. Let me expand this up a little bit

57

00:05:24.800  -->  00:05:30.570
so we can see that we did go out. We
created a new customer. And we can see

58

00:05:30.570  -->  00:05:36.570
here, I'll highlight this. Here, we can see
that we did get created a customer of

59

00:05:36.570  -->  00:05:43.440
368, just Michael Westen.
Now after my update, you can see up here,

60

00:05:43.440  -->  00:05:49.830
I did the put. Right here I did the put
request and then we put the space 2

61

00:05:49.830  -->  00:05:55.260
after. So we might have Michael space 2
Weston space 2. So the update did in

62

00:05:55.260  -->  00:06:01.979
fact take a place against the server. Now
they also have and this is kind of an

63

00:06:01.979  -->  00:06:07.050
unusual, they also have a patch method.
And that this is a valid way of updating

64

00:06:07.050  -->  00:06:12.030
data, where you can do a patch and post
data or put data against the server to

65

00:06:12.030  -->  00:06:17.099
update a resource perfectly valid. I
don't see that used too often. Usually

66

00:06:17.099  -->  00:06:21.449
just have put or post and that's
perfectly valid. But in this case, they

67

00:06:21.449  -->  00:06:26.210
did provide the patch method. And I want
to show you something here, because I

68

00:06:26.210  -->  00:06:32.650
learned a little bit setting this up.
So if I run this right here, I'm gonna go

69

00:06:32.650  -->  00:06:42.449
ahead and run that. And that's gonna
pass by I'm gonna toss an exception. Nope.

70

00:06:42.449  -->  00:06:48.580
Let's see here and get that.
I'll see that actual exception did

71

00:06:48.580  -->  00:06:57.009
get thrown. So now, we can see that we're
getting an IO error. What's

72

00:06:57.009  -->  00:07:01.270
happening, I did a little research on
this in this underlying library for the

73

00:07:01.270  -->  00:07:07.659
HTTP connection that son is providing.
This was probably pretty old stuff. It

74

00:07:07.659  -->  00:07:12.669
doesn't support the patch method. So
after a little bit of research, what I

75

00:07:12.669  -->  00:07:18.789
had to do is come in, I'll show you the
dependency I added, I had in this HTG

76

00:07:18.789  -->  00:07:23.889
components or HTTP client from Apache,
that does support it. And I'll show you

77

00:07:23.889  -->  00:07:29.590
how we wire up the example here. So it
claps this guy, and this is the one that

78

00:07:29.590  -->  00:07:37.090
is fixed. And here, we have this HTTP
components request factory and we wire

79

00:07:37.090  -->  00:07:41.229
that right into the rest template. So
there's actually probably a half

80

00:07:41.229  -->  00:07:45.699
dozen different HTTP client libraries
that we can select from in the Java

81

00:07:45.699  -->  00:07:49.750
world the Pachi one is pretty solid. And
there's other ones I'm not going to get

82

00:07:49.750  -->  00:07:54.729
into a debate about which one's better
and what not. But the point here is,

83

00:07:54.729  -->  00:07:59.860
I'm actually going to leave you a issue
request. If you want to look up this

84

00:07:59.860  -->  00:08:04.509
issue further you can go to this URL. But
here, I am taking the REST template

85

00:08:04.509  -->  00:08:11.770
I'm wiring in that library. And this will
work as expected. So this is gonna use

86

00:08:11.770  -->  00:08:19.779
the HTTP patch method to update the
client. So we can see, we had a variety of

87

00:08:19.779  -->  00:08:25.750
chatter coming out of those but we did
get Sam axe from Burn Notice. We can see

88

00:08:25.750  -->  00:08:30.550
here down at the bottom of the screen, he
has in fact been updated. Now the last

89

00:08:30.550  -->  00:08:34.750
thing that we want to take a look at is
to delete a customer.

90

00:08:34.750  -->  00:08:40.240
So we are going to take Les Claypool,
famous bass player from Primus, and we're

91

00:08:40.240  -->  00:08:45.850
gonna add them and delete him. So let's
go ahead and run this. And let me step

92

00:08:45.850  -->  00:08:51.730
you through this here on 182, I'm saying
I want a client exception and that's

93

00:08:51.730  -->  00:08:57.610
because here on 211, I'm gonna go back
and get that by ID and I'm expecting

94

00:08:57.610  -->  00:09:02.709
that to toss a 404 error. So let's go
ahead and run this. So we're gonna create

95

00:09:02.709  -->  00:09:07.089
Les Claypool, then we're gonna go delete
Les Claypool, and then we'll read him

96

00:09:07.089  -->  00:09:12.639
again and expect that to fail. So you can
see here, that we did get them created on

97

00:09:12.639  -->  00:09:21.189
372, and then we want to go back and read
372. And we can see that, we got a 404

98

00:09:21.189  -->  00:09:26.199
error. So right here, you can see that we
went to go get the data for 372

99

00:09:26.199  -->  00:09:31.149
and that resulted in a 404 error. So
that in fact shows that we exercised API

100

00:09:31.149  -->  00:09:35.500
three times there. We created them, we
deleted them, and then we asked to read

101

00:09:35.500  -->  00:09:39.879
them again, and that did in fact fail. So
these are a variety of different use

102

00:09:39.879  -->  00:09:46.420
cases with the REST template. I do
want you to look over this here because

103

00:09:46.420  -->  00:09:51.160
coming up in the course, we are going to
actually I think I'm going to just

104

00:09:51.160  -->  00:09:57.100
recreate this so we can start modeling
our own REST API. So in this part of

105

00:09:57.100  -->  00:10:00.819
course, I want to get you comfortable
consuming REST API. It feels a little

106

00:10:00.819  -->  00:10:05.680
easier to consume them, and then when you
create them, you're able to use them.

107

00:10:05.680  -->  00:10:09.970
And coming up in the course, we are
definitely going to get into Swagger.

108

00:10:09.970  -->  00:10:14.230
We'll set all this up and we'll show you
a lot of different things using REST APIs.

109

00:10:14.230  -->  00:10:16.470
