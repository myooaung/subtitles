WEBVTT
0
1
00:00:05.320 --> 00:00:11.910
If you look at our controller right now our high folks that greeting as kind of static in this context.
1

2
00:00:11.910 --> 00:00:18.070
So what if we wanted to set things up so that we could say a greeting in different languages.
2

3
00:00:18.090 --> 00:00:25.200
So what we could do is come in here and I'm going to come in here and say create a new package. We'll
3

4
00:00:25.200 --> 00:00:37.220
say services like so and I am going to create a new interface. We'll call it greeting service.
4

5
00:00:37.230 --> 00:00:45.800
Make that an interface like so and this will just have one property and that's going to be one that
5

6
00:00:45.820 --> 00:00:53.830
return back a string. We'll just have it say say greeting like so. Now I can come up here and say
6

7
00:00:53.890 --> 00:01:00.250
implement the interface. I just did option enter. I'm just going to call it greeting service implementation
7

8
00:01:02.640 --> 00:01:03.600
We'll add that into Git 
8

9
00:01:03.600 --> 00:01:04.170
of course.
9

10
00:01:06.900 --> 00:01:11.790
So I'm just going to say hello world there and this would be my English implementation. We'll look at other
10

11
00:01:11.820 --> 00:01:12.870
implementations coming up.
11

12
00:01:13.230 --> 00:01:18.270
So that sets that up and let's show a couple different techniques here so I'm going to come up here
12

13
00:01:18.270 --> 00:01:19.860
and say new class.
13

14
00:01:23.140 --> 00:01:28.440
So there's a property injector controller and this is going to have a greeting service
14

15
00:01:33.980 --> 00:01:36.200
and then we'll implement a method here.
15

16
00:01:42.270 --> 00:01:49.030
All this method is going to do is return back the greeting from the greeting service. So I just
16

17
00:01:49.030 --> 00:01:51.700
want to say return like so.
17

18
00:01:51.700 --> 00:01:54.530
So very very simple implementation.
18

19
00:01:54.540 --> 00:01:56.880
Now let's go ahead and write a test for that.
19

20
00:01:57.330 --> 00:02:00.700
So I'm going to say create test and we going to use 
20

21
00:02:00.710 --> 00:02:07.870
JUnit 5 and create that test.
21

22
00:02:07.900 --> 00:02:10.210
Now what we want is the properties controller
22

23
00:02:12.970 --> 00:02:19.710
and here what we need to do is configure this so I create a setup method so that beforeEach so I'm
23

24
00:02:19.840 --> 00:02:20.510
in a 
24

25
00:02:20.510 --> 00:02:28.060
JUnit test and I'm setting up the test conditions. I want to say controller equals new property injected
25

26
00:02:28.060 --> 00:02:34.030
controller. So I am mimicking what the Spring Framework would be doing. I'm actually creating the object
26

27
00:02:34.060 --> 00:02:44.320
there and then that controller greeting service equals new greeting service implementation. And here I'm
27

28
00:02:44.440 --> 00:02:50.470
not going to be a very elegant test but I want to say get the greeting so I'm going to say get controller get greeting
28

29
00:02:50.470 --> 00:02:51.370
so I want that to run.
29

30
00:02:51.370 --> 00:02:53.380
So let's go ahead and run this test for that.
30

31
00:02:56.840 --> 00:02:59.220
You can see that I'm getting hello world down there.
31

32
00:02:59.270 --> 00:03:03.220
So that is one example of doing manual property injection.
32

33
00:03:03.410 --> 00:03:09.290
But in this case I am doing it by properties and this is not the way that we want to be doing it.
33

34
00:03:09.860 --> 00:03:16.550
Let's also create a setter based controller.
34

35
00:03:16.660 --> 00:03:20.860
I'm going to say a setter injected controller. In here,
35

36
00:03:21.040 --> 00:03:28.450
let's do private greeting service. In here
36

37
00:03:28.470 --> 00:03:35.580
I am going to provide a setter for that. And I'm just going to steal this.
37

38
00:03:38.300 --> 00:03:43.460
So we're gonna get the take the same method and put that on the setter injected controller. So that's
38

39
00:03:43.460 --> 00:03:44.780
also gonna be working like that.
39

40
00:03:44.780 --> 00:03:50.810
So now in this case I have the greeting service and it's going to be set by the setter so it's a private
40

41
00:03:50.810 --> 00:03:53.120
property but I'm providing a setter to set that.
41

42
00:03:53.480 --> 00:03:54.620
So let's come over here.
42

43
00:03:54.620 --> 00:03:56.560
I'm gonna create a test for that now.
43

44
00:03:56.740 --> 00:04:03.200
And here I want to say we want to get the greeting and I'm also going to click this setup method because
44

45
00:04:03.200 --> 00:04:05.420
I know I'm going need to work with that.
45

46
00:04:09.670 --> 00:04:15.390
So here I want to set my setter injected controller controller
46

47
00:04:18.160 --> 00:04:25.480
and now here the controller I want to set that up. So in the setup put my test I'm going to create a new
47

48
00:04:26.010 --> 00:04:36.650
setter injected controller and then I'm gonna get the setter. I'm just going to say new greeting service.
48

49
00:04:36.890 --> 00:04:46.420
So here again I'm using the setter to inject that service implementation and now my controller test
49

50
00:04:46.580 --> 00:04:48.620
I'm just going to say get greeting.
50

51
00:04:48.630 --> 00:04:58.650
So let's go ahead and run this and we'll see that execute.
51

52
00:04:58.760 --> 00:05:02.400
My mistake. Forgot to output it.
52

53
00:05:02.420 --> 00:05:03.550
That's why we're not seeing anything.
53

54
00:05:04.770 --> 00:05:06.090
So let's go ahead and run this again
54

55
00:05:12.130 --> 00:05:15.870
and we can see that we are getting hello world from from the service.
55

56
00:05:15.900 --> 00:05:20.490
And then finally the most preferred method is to use constructor.
56

57
00:05:21.010 --> 00:05:23.080
So I'm going to create a constructor injected controller.
57

58
00:05:26.220 --> 00:05:32.300
Again this is going to take in. It's gonna have a private final greeting service.
58

59
00:05:32.910 --> 00:05:39.420
And now I want to constructor so I'm going to do command N constructor and set that up.
59

60
00:05:39.450 --> 00:05:41.160
I think I still have that on the clipboard.
60

61
00:05:41.340 --> 00:05:41.570
Yes.
61

62
00:05:41.580 --> 00:05:46.760
So I'm gonna use that same get greeting from the greeting service and output that.
62

63
00:05:47.070 --> 00:05:49.420
So I'm going to come up here.
63

64
00:05:49.560 --> 00:05:56.970
Do an option enter, create a test here, I want setup and also get greeting to test that.
64

65
00:05:59.840 --> 00:06:07.310
Now let me go ahead and create the property so I'm gonna do a constructor injected controller like
65

66
00:06:07.340 --> 00:06:15.430
so and here I want say controller equals new constructor injected controller.
66

67
00:06:15.420 --> 00:06:23.120
And this is going to take on a new greeting service. So here I am mimicking what the Spring Framework
67

68
00:06:23.120 --> 00:06:27.790
would be doing by instantiating this object.
68

69
00:06:27.880 --> 00:06:37.420
Let's go ahead and test this one out. So controller get greeting and run that.
69

70
00:06:37.570 --> 00:06:41.020
So now I'm getting my hello world output to the council.
70

71
00:06:41.050 --> 00:06:46.240
So here we are demonstrating how to use JUnit and then the JUnit setup
71

72
00:06:46.240 --> 00:06:48.150
We are taking control.
72

73
00:06:48.250 --> 00:06:52.870
We are kind of acting as the inversion control in the setup methods of 
73

74
00:06:52.880 --> 00:06:56.650
JUnit. So just to recap here exactly what we did.
74

75
00:06:56.650 --> 00:07:05.450
So let's open up the test folder and take a look at these three different tests that we set up and let's
75

76
00:07:05.450 --> 00:07:11.300
take a look at the property injected controller. So properties are the least preferred method.
76

77
00:07:11.390 --> 00:07:18.200
So here you can see my setup method. I am creating a new property injected controller object. I'm assigning
77

78
00:07:18.200 --> 00:07:24.400
that to the variable controller and then I am setting that property directly by accessing that properties
78

79
00:07:24.590 --> 00:07:32.260
directly with the new greeting service implementation.  Then in the setter injected controller, again I'm
79

80
00:07:32.890 --> 00:07:39.310
instantiating the controller object and on line 16 there you can see that I'm using the setter to inject
80

81
00:07:39.310 --> 00:07:42.170
that greeting service implementation.
81

82
00:07:42.280 --> 00:07:48.060
And finally the most preferred method is going to be through the constructor and you see this code is
82

83
00:07:48.160 --> 00:07:55.720
actually just for the simplistic example here. On line 15 you see I'm creating a new constructor injected
83

84
00:07:55.720 --> 00:07:59.410
a controller and also at the same time I'm creating that greeting service.
84

85
00:07:59.480 --> 00:08:01.930
So think of the three implementations we have here.
85

86
00:08:01.930 --> 00:08:07.210
This is probably the most clean one. Let me come back over to the implementation of the constructor.
86

87
00:08:08.170 --> 00:08:13.180
Again best practice, use private final and then provide the constructor.
87

88
00:08:13.270 --> 00:08:17.980
That way I can't change the object once I'm inside the object code.
