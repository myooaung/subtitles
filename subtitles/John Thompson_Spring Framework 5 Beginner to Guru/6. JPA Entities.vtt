WEBVTT
0
1
00:00:05.030 --> 00:00:12.220
In this lesson we are going to be setting up the JPA model. Now JPA is Java persistence API and basically
1

2
00:00:12.220 --> 00:00:19.210
JPA is what Hibernate has written to so that's as the API specification that Hibernate has written to.
2

3
00:00:19.480 --> 00:00:20.230
Underneath the covers,
3

4
00:00:20.230 --> 00:00:23.860
we will be using Hibernate. Now the mapping and stuff,
4

5
00:00:23.860 --> 00:00:26.560
I have a whole section in the course on mapping.
5

6
00:00:26.560 --> 00:00:32.500
We're going to go through this fairly quick as far as setting up the JPA entities that we will be using
6

7
00:00:32.590 --> 00:00:33.610
in this section of the course.
7

8
00:00:33.610 --> 00:00:40.090
But keep in mind that there's like entire courses on Hibernate and JPA. We are gonna go
8

9
00:00:40.090 --> 00:00:42.280
through it and just show you the facts.
9

10
00:00:42.340 --> 00:00:49.480
Now underneath we are going to be setting up to POJOs, Plain Old Java Objects. Just objects with properties
10

11
00:00:49.480 --> 00:00:52.420
getters and setters. 
So no big mystery there at all.
11

12
00:00:52.420 --> 00:00:57.260
And let me show you the data model. We are going to use a very simple model.
12

13
00:00:57.290 --> 00:01:02.500
I'm going to jump over it and show you what's called an entity relationship diagram. Going to be using
13

14
00:01:02.680 --> 00:01:07.020
GPL studio. Kind of neat little tool for mapping things out.
14

15
00:01:07.110 --> 00:01:12.040
And I'm just going to do a demonstration so you can start to envision the data model we are building
15

16
00:01:12.040 --> 00:01:15.770
in this section of the course. Okay, up on the screen here.
16

17
00:01:15.850 --> 00:01:19.060
I have what's called JDL studio. So this is from the 
17

18
00:01:19.060 --> 00:01:19.830
JHipster project.
18

19
00:01:19.840 --> 00:01:22.210
Actually a pretty cool project.
19

20
00:01:22.350 --> 00:01:22.680
J.
20

21
00:01:22.680 --> 00:01:28.840
JHipster is way beyond the scope of the discourse but I do have a course that utilizes 
21

22
00:01:28.840 --> 00:01:34.570
JHipster. Here what we're doing is just using it for the modelings. I want to demonstrate what we are
22

23
00:01:34.570 --> 00:01:35.970
going to be building going forward.
23

24
00:01:35.980 --> 00:01:41.380
So we're gonna have to POJOs that we're going to work with. One is author and it's going to have a first
24

25
00:01:41.380 --> 00:01:46.600
name and a last name, and the other is book and that's just gonna have a title and ISBN. An  
25

26
00:01:46.600 --> 00:01:52.780
ISBN is the universal identifier for books that are published. A number that they get like a UPC
26

27
00:01:52.780 --> 00:01:56.570
code. You can see there right above book.
27

28
00:01:56.590 --> 00:02:02.580
There's the asterisk underscore asterisk that means this is a Many to Many relationship.
28

29
00:02:02.650 --> 00:02:07.070
So a book is gonna have many authors and the author can have many books.
29

30
00:02:07.090 --> 00:02:08.170
So that's all.
30

31
00:02:08.170 --> 00:02:14.560
All that means. So we will be setting this up as a many to many relationship within JPA and we'll be completing
31

32
00:02:14.560 --> 00:02:15.240
this mapping.
32

33
00:02:15.280 --> 00:02:19.230
But first we need to actually create these as POJOs. Okay.
33

34
00:02:19.260 --> 00:02:19.880
Book author.
34

35
00:02:19.880 --> 00:02:26.800
This is a classic diagramming example as far as working through any relationship mappings.
35

36
00:02:27.020 --> 00:02:32.060
What we're going to do now is jump over to IntelliJ and I'm going to implement these POJOs for
36

37
00:02:32.060 --> 00:02:32.740
us.
37

38
00:02:32.870 --> 00:02:38.270
What we want to do here is go ahead and set up our two  POJOs. So I can see on screen here. We readjust this
38

39
00:02:38.290 --> 00:02:47.000
a little bit. I'm going to come in here and I'm going to create a new package.
39

40
00:02:47.070 --> 00:02:48.380
I'll Just call this domain.
40

41
00:02:48.570 --> 00:02:56.070
Usually the JPA entities you need to put them in a package called domain or model. Either is acceptable. Then
41

42
00:02:56.160 --> 00:03:01.660
your organization may have a different standard that is just something that I see roughly in the industry
42

43
00:03:01.680 --> 00:03:11.070
quite often. So let's come in here and we'll create a new Java class. Say author. And this is gonna have
43

44
00:03:14.090 --> 00:03:14.950
say string
44

45
00:03:19.670 --> 00:03:22.240
So I have a last name.
45

46
00:03:22.280 --> 00:03:28.260
And then also we'll do a set and we want to do
46

47
00:03:31.500 --> 00:03:34.410
you can see the books does not exist yet.
47

48
00:03:34.660 --> 00:03:40.430
We definitely don't want that auto import. Let me do this.
48

49
00:03:40.500 --> 00:03:44.440
So I've got IntelliJ set up to automatically managed my imports.
49

50
00:03:44.670 --> 00:03:46.770
And in this case it's misbehaving on me.
50

51
00:03:46.920 --> 00:03:47.870
So let's come in here.
51

52
00:03:47.880 --> 00:03:58.770
I'm going to created new Java class book. Add that. I can come back over here and get rid of this guy. Now our book that
52

53
00:03:58.770 --> 00:04:02.770
is going to have a title.
53

54
00:04:08.900 --> 00:04:10.460
So that sets up our POJOs.
54

55
00:04:10.460 --> 00:04:12.120
Now it's come in here.
55

56
00:04:12.470 --> 00:04:23.260
We want to add in a constructor for this and let's do all properties and JPA does require a zero args
56

57
00:04:23.530 --> 00:04:24.180
constructor.
57

58
00:04:24.190 --> 00:04:27.030
So select none.
58

59
00:04:27.040 --> 00:04:33.580
And then also we was set up getters and setters and IntelliJ  can automatically generate this.
59

60
00:04:33.580 --> 00:04:40.720
So what I've been doing is to bring up this menu and just do command N and now I'm just going to say
60

61
00:04:40.720 --> 00:04:44.100
getters and setters and we want all those.
61

62
00:04:44.320 --> 00:04:50.200
And now we can see that IntelliJ created all this code for us and let's go in and do the same
62

63
00:04:50.200 --> 00:04:51.190
thing for book.
63

64
00:04:54.610 --> 00:04:57.510
and take all the properties.
64

65
00:04:58.280 --> 00:05:02.130
I almost forgot to add an author's to this.
65

66
00:05:02.170 --> 00:05:07.360
So it's come back up here.
66

67
00:05:07.650 --> 00:05:09.380
That's going to be a set. My mistake.
67

68
00:05:12.390 --> 00:05:17.810
Book can I have more than one author. Now the command N
68

69
00:05:20.790 --> 00:05:31.460
do all the properties and also no argsconstructor. In here say select none and then come down here and
69

70
00:05:31.460 --> 00:05:37.960
I'm also going to go in and add in getters and setters and we want to do all the properties like so.
70

71
00:05:38.060 --> 00:05:42.190
You can see that we've generated the codes for all the getters and setters.
71

72
00:05:42.200 --> 00:05:49.010
So that is our two POJOs. Very simple setup and these are the objects that we will be persisting
72

73
00:05:49.070 --> 00:05:51.690
into the database with JPA.
73

74
00:05:52.070 --> 00:05:57.050
You can see we have a very simple implementation of a couple POJOs. No big mystery there if you're not
74

75
00:05:57.050 --> 00:05:59.030
familiar with Java programming language.
75

76
00:05:59.030 --> 00:06:01.850
Now what we need to do is give these ID values.
76

77
00:06:01.870 --> 00:06:09.950
So we are going to make these into JPA entities here in this section. And this is the one thing about
77

78
00:06:10.740 --> 00:06:18.410
JPA. It is ORM, Object Relational Mapping tool. And always, when you get into some type of mapping, typically
78

79
00:06:18.410 --> 00:06:20.800
you're going to see what's called leakage.
79

80
00:06:20.810 --> 00:06:28.730
So here we need to give JPA an identity value that is assigned to these classes so it knows how to store these
80

81
00:06:28.730 --> 00:06:30.850
into the database and retrieve them from the database.
81

82
00:06:30.850 --> 00:06:36.570
So this is typically what we call it as a leakage because now we have our pure object model.
82

83
00:06:36.660 --> 00:06:44.380
Now the identity value that is going to be leaking up into our object model. But just making you aware of
83

84
00:06:44.390 --> 00:06:46.130
some of the terminology around here.
84

85
00:06:46.220 --> 00:06:52.270
This is necessary stuff that we need to go through as far as configuring the JPA entities to make them entities.
85

86
00:06:52.350 --> 00:06:58.640
So I'm going to jump over to IntelliJ now and show you how to make these POJOs into official
86

87
00:06:58.730 --> 00:07:05.090
fully fledged JPA entities that can be persisted by Hibernate to a database.
87

88
00:07:05.090 --> 00:07:11.600
So we want to do in this video is go ahead and make our POJOs into actual official JPA entities.
88

89
00:07:11.610 --> 00:07:18.380
So the first thing they will do is annotate the class with the entity annotation. You can see that
89

90
00:07:18.380 --> 00:07:23.460
is coming out of the Javax persistence package.
90

91
00:07:23.470 --> 00:07:30.760
So now this tells Hibernate that this is an entity and we can see that this is upset because we don't
91

92
00:07:30.760 --> 00:07:32.590
have a primary key.
92

93
00:07:32.590 --> 00:07:34.570
So we want to do is come in here.
93

94
00:07:34.750 --> 00:07:37.340
Well had a new private property long.
94

95
00:07:37.360 --> 00:07:42.640
Now the key properties can be several different data types and we'll talk more about that later in the
95

96
00:07:42.640 --> 00:07:43.770
course.
96

97
00:07:43.780 --> 00:07:50.430
Now what we want to do is annotate this as the ID That's how the Javax persistence package.
97

98
00:07:50.770 --> 00:07:55.660
And we need to tell Hibernate how it is getting generated.
98

99
00:07:55.660 --> 00:08:00.410
So we have the same strategy generation type auto.
99

100
00:08:00.410 --> 00:08:06.250
And what this means is that the underlying database is going to be providing the generation of this.
100

101
00:08:06.250 --> 00:08:12.200
So if you're familiar with databases like MySQL, it has an automatic ID generation so that's
101

102
00:08:12.200 --> 00:08:17.850
what we're saying is that the property is going to be managed by the database the database will be assigning
102

103
00:08:17.870 --> 00:08:19.260
that ID.
103

104
00:08:19.440 --> 00:08:22.020
Now of course this is a private property.
104

105
00:08:22.020 --> 00:08:23.160
No way to access it.
105

106
00:08:23.160 --> 00:08:29.080
So let's come down here and also add in getters and setters for the ID property.
106

107
00:08:29.100 --> 00:08:32.040
And that completes the author class.
107

108
00:08:32.040 --> 00:08:33.890
Now we need to do the same thing for book.
108

109
00:08:33.900 --> 00:08:39.420
So let's come in here. Entity.
109

110
00:08:43.070 --> 00:08:44.610
And annotate that with the ID.
110

111
00:08:47.550 --> 00:08:56.730
Generated value and then strategy, generation type auto, and then we also have to come up here.
111

112
00:08:56.940 --> 00:09:05.480
Let's get them to the other constructor there. And we will add in the getters and setters for the ID property.
112

113
00:09:05.590 --> 00:09:14.100
So that completes the annotations that are needed to set this up as an official JPA entity.
113

114
00:09:14.110 --> 00:09:20.980
Now what we need to do is assign relationships. So obviously our author can have many books and books
114

115
00:09:20.980 --> 00:09:22.180
can have more than one author.
115

116
00:09:22.180 --> 00:09:25.780
So we are going to be used what's called a Many to Many relationship.
116

117
00:09:25.810 --> 00:09:28.300
This does get a little tricky to setup.
117

118
00:09:28.480 --> 00:09:31.340
Don't worry if you don't understand everything.
118

119
00:09:31.630 --> 00:09:37.130
I have entire section doing mapping coming up in the course so we will be exploring mappings
119

120
00:09:37.180 --> 00:09:43.960
much more coming up in the course. But here what we want to do is just establish the basic mappings. We'll
120

121
00:09:43.960 --> 00:09:51.150
step through this and show you how to establish a Many to Many relationship between authors and books.
121

122
00:09:51.190 --> 00:09:58.030
In this video what we want to do is go ahead and define the relationships between books and authors and we
122

123
00:09:58.030 --> 00:10:00.790
are going to do a Many to Many relationship.
123

124
00:10:00.820 --> 00:10:07.990
So let's come over here to author and what we want to do is on the books property we are going to say
124

125
00:10:08.140 --> 00:10:17.110
this is a Many to Many relationship and we are going to say it's mapped by authors like so. We can see
125

126
00:10:17.110 --> 00:10:23.770
that this is not. It's giving us a warning here that that is not completed and we have to complete the other
126

127
00:10:23.770 --> 00:10:24.400
side of it.
127

128
00:10:24.640 --> 00:10:30.340
So let's come back over to book and this time it's going to be a little bit more complicated.
128

129
00:10:30.610 --> 00:10:39.060
What we will do is say at many to many and now what we're going to do is set up what's called a join
129

130
00:10:39.060 --> 00:10:46.500
table. This gets a little complicated and I do cover this more in an upcoming lesson.
130

131
00:10:46.680 --> 00:10:48.180
So we want to say @JoinTable
131

132
00:10:53.500 --> 00:10:59.130
So underneath in the database so we can envision, we're going to have a table for author and table
132

133
00:10:59.130 --> 00:11:05.460
for book and we are going to use a join table called author book that is going to hold the relationship
133

134
00:11:05.460 --> 00:11:10.750
between records and the author table and records and the book table.
134

135
00:11:10.800 --> 00:11:15.820
So that's what we are setting up here. @JoinColumns is here.
135

136
00:11:26.520 --> 00:11:32.700
And inverseJoinColumn. I know mapping is probably a little confusing.
136

137
00:11:32.870 --> 00:11:43.080
This probably one of the hardest ones to map is this Many to Many relationship.
137

138
00:11:43.330 --> 00:11:48.070
And what thiss mapping is doing this is setting up the properties within the JoinTable.
138

139
00:11:51.590 --> 00:11:58.400
And we can see IntelliJ is saying can't find column author I.D. so you can see below that assigned data
139

140
00:11:58.400 --> 00:12:03.740
sources. What IntelliJ can do is inspect the database and I don't have a setup for that.
140

141
00:12:03.860 --> 00:12:05.350
So that's why that is complaining.
141

142
00:12:05.960 --> 00:12:08.890
So let's just do a quick recap on this.
142

143
00:12:09.020 --> 00:12:18.110
So here on the author POJO, I am saying that it has a many to many relationship to books and it is going
143

144
00:12:18.110 --> 00:12:20.230
to be mapped by authors.
144

145
00:12:20.300 --> 00:12:27.290
So here I'm saying map by authors. In the book object, I have that property authors.
145

146
00:12:27.290 --> 00:12:31.650
So that is the set and I also have a many to many relationship here.
146

147
00:12:31.760 --> 00:12:39.820
But now here I am saying join table. This configure set join table. So I know we covered a lot
147

148
00:12:39.830 --> 00:12:42.980
in this video here as far as the mapping.
148

149
00:12:42.980 --> 00:12:48.710
Again I have an entire section on setting up these mappings and hopefully make that a little more clear
149

150
00:12:48.710 --> 00:12:55.160
here but this is setting up the relationships between author and book. And now we'll be able to move forward
150

151
00:12:55.190 --> 00:12:58.100
and start working with these objects within JPA.
