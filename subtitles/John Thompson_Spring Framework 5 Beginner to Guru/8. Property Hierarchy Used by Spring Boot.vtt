WEBVTT
0
1
00:00:04.460 --> 00:00:09.139
Okay, up on the screen, I have the
official Spring Boot documentation for
1

2
00:00:09.139 --> 00:00:12.809
Externalized Configuration. That's really
what we've been looking at with the
2

3
00:00:12.809 --> 00:00:17.699
different properties and how we have
been setting the properties and this
3

4
00:00:17.699 --> 00:00:24.570
shows you a hierarchy of the properties
and how they get sourced into your
4

5
00:00:24.570 --> 00:00:29.820
Spring Boot Application. So number 17
down there, Default properties using
5

6
00:00:29.820 --> 00:00:34.829
Spring application set default
properties, that is the lowest one on the
6

7
00:00:34.829 --> 00:00:38.940
list of how things get picked up. So that
that's going to get overridden by
7

8
00:00:38.940 --> 00:00:44.219
everything else. So if you look at number
1, that's going to take precedence over
8

9
00:00:44.219 --> 00:00:48.750
everything while number 17 gets
overridden by everything. So important
9

10
00:00:48.750 --> 00:00:51.930
distinction to make and you do have a
number of options when we're setting
10

11
00:00:51.930 --> 00:00:57.719
properties within the Spring environment, the external properties. And we saw there
11

12
00:00:57.719 --> 00:01:01.530
we started off with number 16 using
PropertySource. I was pretty low on the
12

13
00:01:01.530 --> 00:01:08.130
pole and then we can have things
property set inside of our our jar or
13

14
00:01:08.130 --> 00:01:14.369
outside of our jar so number 15 is
properties packaged inside of our jar
14

15
00:01:14.369 --> 00:01:19.439
and that's going to be looking at dot
properties and yaml variants. So it's
15

16
00:01:19.439 --> 00:01:23.100
important to realize as we move up and
down the hierarchy when we have the
16

17
00:01:23.100 --> 00:01:30.299
option of dot properties or that yml for
yaml that they are treated equally. So
17

18
00:01:30.299 --> 00:01:36.869
you are able to set properties outside
your package jar in a directory. I forget
18

19
00:01:36.869 --> 00:01:41.420
that exact directory at the time, but that's
something that's inside the Spring
19

20
00:01:41.420 --> 00:01:47.670
documentation here and then on 12
and 13, you can see how it's
20

21
00:01:47.670 --> 00:01:51.509
working along the line .So things
packaged inside your jar with the dash
21

22
00:01:51.509 --> 00:01:55.140
profile is going to override that. We
just saw that in action a little bit ago
22

23
00:01:55.140 --> 00:02:01.350
where the profile specific properties
were becoming preferred over the other
23

24
00:02:01.350 --> 00:02:06.570
ones. And then if you look at 9 and
10 that's where your environment
24

25
00:02:06.570 --> 00:02:11.520
variables are going to come into play
and then going up further the
25

26
00:02:11.520 --> 00:02:13.940
servlet contacts is going to get
brought in
26

27
00:02:13.940 --> 00:02:20.390
play. I didn't show you, you can pass in a
Spring application JSON and this is
27

28
00:02:20.390 --> 00:02:26.540
pretty high up on the list to override
specific properties. And then finally
28

29
00:02:26.540 --> 00:02:31.370
number 4 there, Command line arguments. So when you start up the application, if you
29

30
00:02:31.370 --> 00:02:36.770
pass in a property via the command line,
that is going to be pretty high up the
30

31
00:02:36.770 --> 00:02:43.190
list. And then higher up but 2 and
3, these are going to be, actually 1,
31

32
00:02:43.190 --> 00:02:47.480
2 and 3. These all evolve around
testing. So your tests are going to
32

33
00:02:47.480 --> 00:02:53.090
override when you're doing unit testing. They will override any of your baseline
33

34
00:02:53.090 --> 00:02:56.630
properties. So it's important to
understand how this hierarchy works. I
34

35
00:02:56.630 --> 00:03:01.640
will include a link to this
documentation inside the course notes
35

36
00:03:01.640 --> 00:03:07.280
for this lecture but what I want
you to think about here is how these
36

37
00:03:07.280 --> 00:03:11.660
come into play. This gives you a very
very versatile tool set. I've used a lot
37

38
00:03:11.660 --> 00:03:15.800
of these in different situations as you
migrate through different environments.
38

39
00:03:15.800 --> 00:03:21.650
This becomes very very handy. Typically
what you'll see is your baseline,
39

40
00:03:21.650 --> 00:03:26.630
your development stuff is going to
probably be inside your jar. I don't see
40

41
00:03:26.630 --> 00:03:31.280
a lot of stuff outside your jar but
there are Operating environments where
41

42
00:03:31.280 --> 00:03:37.640
you do package things, your property
files outside the jar. And then the most
42

43
00:03:37.640 --> 00:03:43.100
frequently I see is using Operating
system environment variables. That is a
43

44
00:03:43.100 --> 00:03:48.800
very, very handy way to override your
property files when you are migrating
44

45
00:03:48.800 --> 00:03:54.230
from development to QA and then on to
production. So the environment variables
45

46
00:03:54.230 --> 00:04:00.110
is very, very common used in production. The Spring application JSON, I
46

47
00:04:00.110 --> 00:04:03.530
don't see much use of that. I'm sure it's
used out there quite a bit but I don't
47

48
00:04:03.530 --> 00:04:08.150
see a lot of that and then the top three
there for testing, we're going to have a
48

49
00:04:08.150 --> 00:04:12.019
whole section the course on testing and
we will definitely be looking at that.
49

50
00:04:12.019 --> 00:04:16.850
But the main takeaway, I want you to have
from this to understand as I work
50

51
00:04:16.850 --> 00:04:21.260
through this whole section on properties,
we saw a lot of this in action. This is
51

52
00:04:21.260 --> 00:04:27.040
the official documentation from Spring
as to who overrides what and
52

53
00:04:27.040 --> 00:04:31.840
it's important to realize that there is
a hierarchy here and how properties get
53

54
00:04:31.840 --> 00:04:34.410
overridden.
