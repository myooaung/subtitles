WEBVTT
0
1
00:00:00.160 --> 00:00:02.743
(upbeat music)
1

2
00:00:04.901 --> 00:00:06.529
Alright, in this video,
2

3
00:00:06.529 --> 00:00:08.998
we are gonna be talking about Reactive Streams
3

4
00:00:08.998 --> 00:00:11.732
and how they relate to Spring Framework 5.
4

5
00:00:11.732 --> 00:00:15.318
Now, the Reactive Streams API, the goal was to create
5

6
00:00:15.318 --> 00:00:19.077
a standard asynchronous stream processing
6

7
00:00:19.077 --> 00:00:20.948
with non-blocking back pressure.
7

8
00:00:20.948 --> 00:00:23.235
So, all the reactive stuff that we've been talking about.
8

9
00:00:23.235 --> 00:00:25.861
The initiative was started in 2013
9

10
00:00:25.861 --> 00:00:29.080
by engineers from Netflix, Pivotal, and Lightbend
10

11
00:00:29.080 --> 00:00:31.433
and Lightbend is formely Typesafe.
11

12
00:00:31.433 --> 00:00:33.285
And just as an interesting tidbit,
12

13
00:00:33.285 --> 00:00:36.505
Rod Johnson, the founder of Spring Framework,
13

14
00:00:36.505 --> 00:00:39.811
actually worked on the Board of Directors for Typesafe.
14

15
00:00:39.811 --> 00:00:41.936
I think at this point in time, he's moved on,
15

16
00:00:41.936 --> 00:00:44.561
I'm not 100% sure on that, but I think he is pursuing
16

17
00:00:44.561 --> 00:00:46.321
other things at this point in time,
17

18
00:00:46.321 --> 00:00:47.801
but he was with Typesafe.
18

19
00:00:47.801 --> 00:00:49.013
And Lightbend is now the company
19

20
00:00:49.013 --> 00:00:52.876
that has been VC funded and they are supporting
20

21
00:00:52.876 --> 00:00:56.852
the Scala language and Scala is some cool stuff.
21

22
00:00:56.852 --> 00:00:58.761
And then the Reactive Streams API
22

23
00:00:58.761 --> 00:01:00.805
is actually just a set of four interfaces
23

24
00:01:00.805 --> 00:01:03.295
which define the API and then there's actually
24

25
00:01:03.295 --> 00:01:05.357
a specification about the behavior we expect
25

26
00:01:05.357 --> 00:01:07.705
and the implementation of those interfaces
26

27
00:01:07.705 --> 00:01:09.928
but I'm not going to get into that.
27

28
00:01:09.928 --> 00:01:12.928
And the 1.0 release was done in 2015
28

29
00:01:14.749 --> 00:01:17.749
and what's notable is under JEP-266,
29

30
00:01:20.021 --> 00:01:23.775
Reactive Streams is now gonna be part of the Java 9 JDK.
30

31
00:01:23.775 --> 00:01:28.029
So, that will be a fully recognized feature inside of Java 9
31

32
00:01:28.029 --> 00:01:31.705
and so that is going to be there in the future.
32

33
00:01:31.705 --> 00:01:32.851
Now, there's a number of adoptions
33

34
00:01:32.851 --> 00:01:36.325
and the landscape right now is changing quickly
34

35
00:01:36.325 --> 00:01:38.674
because there's always new stuff coming out
35

36
00:01:38.674 --> 00:01:42.038
and the Reactive community is becoming more and more active.
36

37
00:01:42.038 --> 00:01:45.613
so we have Akka Streams and that's Scala, MongoDB,
37

38
00:01:45.613 --> 00:01:48.102
Ratpack, Reactive Rabbit, which I have not
38

39
00:01:48.102 --> 00:01:49.811
played with yet but I hope to.
39

40
00:01:49.811 --> 00:01:53.211
Project Reactor, that's the Spring implementation.
40

41
00:01:53.211 --> 00:01:55.362
RxJava, if I remember right,
41

42
00:01:55.362 --> 00:01:58.815
that is from the folks at Netflix.
42

43
00:01:58.815 --> 00:02:02.532
And all these support the Reactive Streams API,
43

44
00:02:02.532 --> 00:02:07.386
so these different adaptions should, at least in theory,
44

45
00:02:07.386 --> 00:02:11.296
play nicely together and work nicely together.
45

46
00:02:11.296 --> 00:02:12.595
Now, like I said a moment ago,
46

47
00:02:12.595 --> 00:02:15.428
the 1.0.0 release was done in 2015
47

48
00:02:17.232 --> 00:02:20.982
and I am recording this in August 15th, 2017,
48

49
00:02:22.353 --> 00:02:26.520
so not even the following week that the 1.0.1 release was done.
49

50
00:02:28.118 --> 00:02:31.899
Now, in the that release, that's a minor release in the API,
50

51
00:02:31.899 --> 00:02:34.465
the interface classes did not change at all.
51

52
00:02:34.465 --> 00:02:37.538
It was more of a specification change of how they behave.
52

53
00:02:37.538 --> 00:02:38.907
I think they clarified some things in there
53

54
00:02:38.907 --> 00:02:42.407
but the interfaces have remained the same.
54

55
00:02:44.686 --> 00:02:46.949
So, let's take a quick look at some of the interfaces.
55

56
00:02:46.949 --> 00:02:50.641
We have a Publisher and this is gonna provide
56

57
00:02:50.641 --> 00:02:54.808
a unbounded number of elements, so, that's our data stream.
57

58
00:02:56.203 --> 00:02:58.207
And then we have a Subscriber, so this is going to consume
58

59
00:02:58.207 --> 00:03:00.540
from a publisher, obviously.
59

60
00:03:02.696 --> 00:03:04.531
Subscription, you can see that these interfaces
60

61
00:03:04.531 --> 00:03:07.604
are pretty simple to use and a lot of times
61

62
00:03:07.604 --> 00:03:10.656
our abstraction's gonna be really, really simple to use
62

63
00:03:10.656 --> 00:03:14.551
and we'll be definitely looking at examples of these.
63

64
00:03:14.551 --> 00:03:17.195
And then finally, processor, to give you an idea
64

65
00:03:17.195 --> 00:03:18.870
on how all these fit together
65

66
00:03:18.870 --> 00:03:21.047
and this is how the streams are processing.
66

67
00:03:21.047 --> 00:03:23.925
So, publisher is going to be publishing events
67

68
00:03:23.925 --> 00:03:26.590
which are gonna get consumed by a subscriber
68

69
00:03:26.590 --> 00:03:28.503
and a subscriber is going to have
69

70
00:03:28.503 --> 00:03:30.456
a subscription to a publisher.
70

71
00:03:30.456 --> 00:03:32.391
And through that subscription,
71

72
00:03:32.391 --> 00:03:36.558
the subscriber can give feedback on demand or backpressure.
72

73
00:03:37.918 --> 00:03:40.092
So, hope you can start envisioning how this works.
73

74
00:03:40.092 --> 00:03:41.586
We're gonna be definitely looking at
74

75
00:03:41.586 --> 00:03:44.330
some live examples in the coding of this.
75

76
00:03:44.330 --> 00:03:46.803
But this is how these interfaces fit together.
76

77
00:03:46.803 --> 00:03:50.575
Now, in Spring MVC and Spring WebFLux,
77

78
00:03:50.575 --> 00:03:53.039
the Reactive stuff is going to be
78

79
00:03:53.039 --> 00:03:56.378
under the right hand side of the spring-webflux.
79

80
00:03:56.378 --> 00:04:00.527
And what has happened inside the Spring Framework
80

81
00:04:00.527 --> 00:04:03.218
is the Servlet Container, the Servlet API,
81

82
00:04:03.218 --> 00:04:06.179
is not reactive, it is blocking.
82

83
00:04:06.179 --> 00:04:09.214
So, Spring Framework guys created a whole new stack,
83

84
00:04:09.214 --> 00:04:10.884
a whole new web framework,
84

85
00:04:10.884 --> 00:04:14.151
with inside of Spring called spring-webflux.
85

86
00:04:14.151 --> 00:04:17.155
Now, top of these, we're still gonna be using
86

87
00:04:17.155 --> 00:04:19.477
the @Controller and @RequestMapping annotations
87

88
00:04:19.477 --> 00:04:24.209
or a whole new functional API called Router Functions.
88

89
00:04:24.209 --> 00:04:25.827
You can use either one of these
89

90
00:04:25.827 --> 00:04:28.660
with spring-mvc or spring-webflux.
90

91
00:04:29.572 --> 00:04:31.343
So, this is all handled by the framework.
91

92
00:04:31.343 --> 00:04:34.006
You can use either stack whether you wanna be Reactive
92

93
00:04:34.006 --> 00:04:36.581
or use traditional Servlet and there's really
93

94
00:04:36.581 --> 00:04:38.601
nothing wrong with traditional Servlet.
94

95
00:04:38.601 --> 00:04:41.586
It still works, I mean, it's still a very robust
95

96
00:04:41.586 --> 00:04:43.879
programming API that we have to
96

97
00:04:43.879 --> 00:04:46.480
deal with the web environment.
97

98
00:04:46.480 --> 00:04:48.044
So, it's still inside of Spring Framework.
98

99
00:04:48.044 --> 00:04:50.230
It's not mandatory to use, it's not bad to use
99

100
00:04:50.230 --> 00:04:52.769
but for the Reactive functionality
100

101
00:04:52.769 --> 00:04:56.269
when you are in these high volume streaming environments,
101

102
00:04:56.269 --> 00:04:58.280
we do have this whole new Reactive Framework
102

103
00:04:58.280 --> 00:05:00.272
with Spring WebFlux and we'll be
103

104
00:05:00.272 --> 00:05:02.680
looking at that a lot closer.
104

105
00:05:02.680 --> 00:05:06.507
Now, the Spring web MVC stuff does still support
105

106
00:05:06.507 --> 00:05:08.456
the traditional Servlet container
106

107
00:05:08.456 --> 00:05:12.372
but the WebFlux, we now have to option
107

108
00:05:12.372 --> 00:05:15.455
of Tomcat, Jetty, Netty, or Undertow.
108

109
00:05:16.345 --> 00:05:19.315
And these are different Reactive implementations
109

110
00:05:19.315 --> 00:05:20.808
that we can work with.
110

111
00:05:20.808 --> 00:05:24.091
Netty is probably the most robust option
111

112
00:05:24.091 --> 00:05:26.728
but Tomcat is a little bit simpler
112

113
00:05:26.728 --> 00:05:28.940
and widely, widely used.
113

114
00:05:28.940 --> 00:05:31.961
So, your implementation to your needs can vary
114

115
00:05:31.961 --> 00:05:33.529
but you do have options there.
115

116
00:05:33.529 --> 00:05:36.366
And the Spring Framework will work with any of those.
116

117
00:05:36.366 --> 00:05:37.581
Now, the next thing we need to talk about
117

118
00:05:37.581 --> 00:05:41.810
inside the Spring Framework is the Spring Reactive Types.
118

119
00:05:41.810 --> 00:05:43.592
So, there's two new reactive types
119

120
00:05:43.592 --> 00:05:45.776
introduced with Spring Framework 5.
120

121
00:05:45.776 --> 00:05:49.908
'Mono' is a publisher with zero or one elements in the
121

122
00:05:49.908 --> 00:05:53.291
data stream and this is important to understand zero or one.
122

123
00:05:53.291 --> 00:05:56.429
And then 'Flux' is zero or many
123

124
00:05:56.429 --> 00:05:58.143
elements inside the data stream.
124

125
00:05:58.143 --> 00:06:01.253
And I wanna point out that both of these types
125

126
00:06:01.253 --> 00:06:04.590
implement the Reactive Streams Publisher interface.
126

127
00:06:04.590 --> 00:06:07.802
And I expect that you can probably work with
127

128
00:06:07.802 --> 00:06:10.126
just about any Publisher inside of
128

129
00:06:10.126 --> 00:06:12.959
the Spring Framework web APIs but we are gonna be
129

130
00:06:12.959 --> 00:06:16.142
focusing on using the Mono and Fluxes and using
130

131
00:06:16.142 --> 00:06:20.239
these data types and setting up our Spring controllers now.
131

132
00:06:20.239 --> 00:06:22.763
Now, what you're gonna see going forward in the class is
132

133
00:06:22.763 --> 00:06:26.419
because of the way Spring, let me back up one slide.
133

134
00:06:26.419 --> 00:06:27.928
Because of the way Spring set up things,
134

135
00:06:27.928 --> 00:06:31.427
our Controller and RequestMapping, still there,
135

136
00:06:31.427 --> 00:06:33.758
we still setup our controllers the same way,
136

137
00:06:33.758 --> 00:06:37.831
but now we are gonna be working with these return types.
137

138
00:06:37.831 --> 00:06:42.177
If we have a reactive data store like we do with Mongo
138

139
00:06:42.177 --> 00:06:44.362
that reactive call will go through full stack
139

140
00:06:44.362 --> 00:06:45.917
and that is our goal to get here.
140

141
00:06:45.917 --> 00:06:50.128
But we need to define this terminology first.
141

142
00:06:50.128 --> 00:06:52.472
In the next, upcoming videos we're gonna be
142

143
00:06:52.472 --> 00:06:55.370
looking at examples of converting over the controllers
143

144
00:06:55.370 --> 00:06:57.844
that we've been working with to start
144

145
00:06:57.844 --> 00:07:00.511
leveraging these reactive types.
