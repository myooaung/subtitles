WEBVTT
0
1
00:00:03.920 --> 00:00:10.440
Now, in this video, what we want to do is
refactor our project to use those
1

2
00:00:10.440 --> 00:00:16.160
JAXB generated classes. So, what we
want to do is come in here to the rest
2

3
00:00:16.160 --> 00:00:22.800
application. So remember, we named this guy.
We just might grab this guy's name
3

4
00:00:22.800 --> 00:00:28.130
here. So, the artifactId is rest-model. So
now, what we want to do is come over to
4

5
00:00:28.130 --> 00:00:34.410
this POM here. We'll go up to
dependencies. Now, you don't have to do
5

6
00:00:34.410 --> 00:00:38.670
this. This just kind of a convention that
I generally follow and I see a lot of
6

7
00:00:38.670 --> 00:00:42.750
others do. Kind of group up the Spring
stuff, and then, the test stuff at the
7

8
00:00:42.750 --> 00:00:47.610
bottom. And then, for internally generated
artifacts, I'd like to put them at the
8

9
00:00:47.610 --> 00:00:51.750
top. This is just my personal
convention. It kind of makes sense to me.
9

10
00:00:51.750 --> 00:00:56.230
It is a handy convention. You don't have
to do it.
10

11
00:00:56.230 --> 00:01:00.700
You can see that it brought in the
the version like that. Now, we could
11

12
00:01:00.700 --> 00:01:04.480
specify that as a property but we do
need that set ups. And now, we're
12

13
00:01:04.480 --> 00:01:10.450
including that as a dependency. Let's
just go and make sure that Maven did
13

14
00:01:10.450 --> 00:01:16.000
refresh on this. Now, what we can do is
come over to our controllers and
14

15
00:01:16.000 --> 00:01:21.010
collapse him.
Actually, we need to refactor this
15

16
00:01:21.010 --> 00:01:23.460
quite a bit.
16

17
00:01:25.590 --> 00:01:28.880
Yes, here.
17

18
00:01:35.939 --> 00:01:43.620
So now, we have that coming out of the v1 api.
You're going to get rid of that.
18

19
00:01:44.420 --> 00:01:49.079
Remember, we put it models
so we want to be using that one. Now,
19

20
00:01:49.079 --> 00:01:55.250
we can see that this is going to cause
some additional problems.
20

21
00:01:55.409 --> 00:02:01.579
So, get rid of the package, and then, we'll
import the other one.
21

22
00:02:01.689 --> 00:02:05.530
You can see the type conversion.
There's not, I don't know of a good way
22

23
00:02:05.530 --> 00:02:11.349
to do this  in IntelliJ to automatically
change the package on all that, so I'm
23

24
00:02:11.349 --> 00:02:15.730
going to pause the video of this. I could take me
a few minutes to go through and refactor
24

25
00:02:15.730 --> 00:02:19.660
all this. So, I'm going to go ahead and
refactor that type, and then, we'll go
25

26
00:02:19.660 --> 00:02:23.560
through the the code changes. So, I'm
going to pause the video right now. I'll be
26

27
00:02:23.560 --> 00:02:27.129
right back.
Okay, I fast forwarded and went ahead
27

28
00:02:27.129 --> 00:02:32.560
and made the changes. I think there's two
changes I really want to point out. One
28

29
00:02:32.560 --> 00:02:36.549
is here.
We had a constructor on this. So, let me see
29

30
00:02:36.549 --> 00:02:40.629
if I can bring up the change code. You
can see here, we were just returning a new
30

31
00:02:40.629 --> 00:02:45.250
and we're passing in the list of DTOs.
So, we had a custom constructor there or
31

32
00:02:45.250 --> 00:02:49.720
convenience constructor for that, which
is not on the JAXB generated class.
32

33
00:02:49.720 --> 00:02:56.349
So, what we need to do here is create a
new DTO object, and then getCustomers,
33

34
00:02:56.349 --> 00:03:00.940
and then we can use the addAll method
on that list, and then return back that
34

35
00:03:00.940 --> 00:03:06.480
DTO. So, let's see here. Then, the other
significant changes on the XSD itself,
35

36
00:03:06.480 --> 00:03:10.239
we renamed it Customer and when I got in
there realized that we're dealing with
36

37
00:03:10.239 --> 00:03:17.620
the DTO objects, so I refactored that to
be CustomerDTO to be consistent with
37

38
00:03:17.620 --> 00:03:22.030
what we were doing previously. I do
want to point out that the largest
38

39
00:03:22.030 --> 00:03:29.380
change was coming through in changing
the packages from the api.v1.model to
39

40
00:03:29.380 --> 00:03:35.440
the DTO. Now, I could have done,
I could have formatted the XJC compiler,
40

41
00:03:35.440 --> 00:03:41.380
the configuration output to that package.
For convenience, for consistency, I chose
41

42
00:03:41.380 --> 00:03:45.819
not to. I've decided to leave it as is,
just so you could see the contrast. Now,
42

43
00:03:45.819 --> 00:03:49.480
if I was doing this for an Enterprise
client. I probably would have done that
43

44
00:03:49.480 --> 00:03:55.810
and retired those DTOs because this
is a nice nice approach. I can't
44

45
00:03:55.810 --> 00:03:59.919
remember, I pointed this out. But, a real
nice thing that we can do now is, for
45

46
00:03:59.919 --> 00:04:05.680
people consuming this API, we can share
this XSD with them. What's nice
46

47
00:04:05.680 --> 00:04:10.570
is if they're using Ruby or .Net or
like C sharp or something, all these
47

48
00:04:10.570 --> 00:04:15.030
other popular languages do have tools to
do code generator
48

49
00:04:15.030 --> 00:04:21.750
from XSD. So, this XSD now becomes a
contract that your clients can use, and
49

50
00:04:21.750 --> 00:04:27.300
this is what's nice about working with
XML. Now JSON, they are working on JSON 
50

51
00:04:27.300 --> 00:04:32.910
schema, as I talked about, if you watch
the stuff on Swagger, we spoke about JSON
51

52
00:04:32.910 --> 00:04:37.919
Schema. That is also coming out, but has
now been approved. So, it's in the final
52

53
00:04:37.919 --> 00:04:44.669
stages of the 1.0 approval process.
Hopefully, in 2018, the JSON Schema will
53

54
00:04:44.669 --> 00:04:48.330
be approved. But at the time of recording
this video, JSON Schema is not
54

55
00:04:48.330 --> 00:04:54.720
approve. XML schema has been approved.
I don't know when. Well, probably decades
55

56
00:04:54.720 --> 00:05:02.550
ago. So, we can see here right at the top
at 2001. So, like I said, the XML stuff has
56

57
00:05:02.550 --> 00:05:08.430
been so mature. It's boring, so it's very
very old school. It's been out there for
57

58
00:05:08.430 --> 00:05:13.380
a long time and very mature. The
libraries aren't changing, but some
58

59
00:05:13.380 --> 00:05:18.650
people are starting to ignore XML. It's
still a very good technology, that our
59

60
00:05:18.650 --> 00:05:24.390
advantage is because as you can see XML
really gives you strong typing. Unlike
60

61
00:05:24.390 --> 00:05:30.060
JSON, it doesn't really have any typing,so to speak, not compared to XML. But you
61

62
00:05:30.060 --> 00:05:34.530
do get the strongly type. Now, you can
share the schema as a contract. You
62

63
00:05:34.530 --> 00:05:38.760
can see I would generate the Java
classes from this, and now, I've
63

64
00:05:38.760 --> 00:05:44.010
refactored this project. Let's come
up here to version control. I'm just
64

65
00:05:44.010 --> 00:05:49.740
going to expand this out. So, you can see
that, that type change. It did impact just
65

66
00:05:49.740 --> 00:05:55.890
about every Customer class so we our
controler, controller tests, the Mapstruct
66

67
00:05:55.890 --> 00:06:00.479
Mappers that we did, the service
interface, the service implementation,
67

68
00:06:00.479 --> 00:06:04.500
then the related tests, as well. So,
this did have some pretty wide-ranging
68

69
00:06:04.500 --> 00:06:09.900
changes because of the type changes.
That type was very commonly used in our
69

70
00:06:09.900 --> 00:06:13.710
project. But now that was an exercise.
That's why, I paused the video. I
70

71
00:06:13.710 --> 00:06:17.460
was going through that. I couldn't think
of a good way to go and search and
71

72
00:06:17.460 --> 00:06:21.990
replace and do all that. I have a manual
process, make sure I didn't miss anything.
72

73
00:06:21.990 --> 00:06:28.990
But now, just to recap what's
happening, so we have our customer.xsd.
73

74
00:06:28.990 --> 00:06:35.169
We are using XJC through the Maven
compiler, that we configured in the last
74

75
00:06:35.169 --> 00:06:43.180
video. This will create a jar. So,
this is rest-model jar. And because we
75

76
00:06:43.180 --> 00:06:48.580
included in our Maven POM in this video,
we are saying that as a dependency. So
76

77
00:06:48.580 --> 00:06:54.400
now, this project has a dependency on the
other module inside of Maven. Now that
77

78
00:06:54.400 --> 00:07:01.360
Java type is available for our use,
we'll refactored to use that XJC generated
78

79
00:07:01.360 --> 00:07:08.260
Java type. Okay, I did want to add one
little addendum to this section. If you
79

80
00:07:08.260 --> 00:07:13.900
are following along doing the builds on
CircleCI, you may see a failure. I've
80

81
00:07:13.900 --> 00:07:19.360
got the failure up here. What's
happening is, Maven, the way CircleCI, it
81

82
00:07:19.360 --> 00:07:26.560
does a offline build. Basically, it's
looking out in repositories for these
82

83
00:07:26.560 --> 00:07:32.169
components, and this is going to fail.
This guy's going to fail here because it's
83

84
00:07:32.169 --> 00:07:37.690
not being found in any of the available
repositories. So, it's not. Can't see it.
84

85
00:07:37.690 --> 00:07:42.760
I did a little bit of research on it.
It's just the way CircleCI is, the
85

86
00:07:42.760 --> 00:07:49.000
CircleCI environment behaves. So, the
work around, I've got it here in line 34
86

87
00:07:49.000 --> 00:07:55.389
is to do a run on Maven install, and then
skip test. This is going to skip all the
87

88
00:07:55.389 --> 00:08:00.370
tests, but it's going to compile. So, as
long as the compile passes, it's going to
88

89
00:08:00.370 --> 00:08:06.250
create that jar for the dependency of
the Maven project and install it in the
89

90
00:08:06.250 --> 00:08:12.310
local Maven repository. So, remember, Maven
does hold repository under your home
90

91
00:08:12.310 --> 00:08:16.840
directory under .m2. It's going to
cache things there, so you're going to have
91

92
00:08:16.840 --> 00:08:20.620
like a mini repository there, so that
what the install command says is
92

93
00:08:20.620 --> 00:08:24.880
generate this jar and install it there.
And then, when we get to our tests,
93

94
00:08:24.880 --> 00:08:32.740
they're on line 36, things will
progress normally. So, that at least,
94

95
00:08:32.740 --> 00:08:35.740
that's what I expect here. So, I'm going to
go ahead and commit this.
95

96
00:08:35.740 --> 00:08:39.010
As long as it runs, I won't have to
record anything else around this topic.
96

97
00:08:39.010 --> 00:08:42.130
So, just in case, if you're not using
CircleCI, don't worry about this. You
97

98
00:08:42.130 --> 00:08:44.760
don't have to do this.
