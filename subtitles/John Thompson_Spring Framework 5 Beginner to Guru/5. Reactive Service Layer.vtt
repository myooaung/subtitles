WEBVTT
0
1
00:00:05.002 --> 00:00:06.018
Alright, in the video
1

2
00:00:06.018 --> 00:00:09.369
we want to start refactoring our service layer
2

3
00:00:09.369 --> 00:00:11.903
and we have a couple of interesting opportunities here.
3

4
00:00:11.903 --> 00:00:14.436
I'm gonna take a very small one first
4

5
00:00:14.436 --> 00:00:16.847
and refactor that so what I have here
5

6
00:00:16.847 --> 00:00:18.778
is our UnitOfMeasureService
6

7
00:00:18.778 --> 00:00:19.821
and this is what we're using to
7

8
00:00:19.821 --> 00:00:21.290
build a list of unit of measures
8

9
00:00:21.290 --> 00:00:23.450
when we're dealing with ingredients
9

10
00:00:23.450 --> 00:00:25.642
so let's go ahead and before we were
10

11
00:00:25.642 --> 00:00:29.050
returning back a Set and a UnitOfMeasureComand
11

12
00:00:29.050 --> 00:00:31.817
to listAllUoms, now I've refactored
12

13
00:00:31.817 --> 00:00:33.962
this return back a Flux.
13

14
00:00:33.962 --> 00:00:36.599
Now remember the flux is the reactive type
14

15
00:00:36.599 --> 00:00:41.049
that represents many so this is gonna be a publisher
15

16
00:00:41.049 --> 00:00:43.491
and we're gonna can we have a little fun here.
16

17
00:00:43.491 --> 00:00:45.916
So I'll show you the implementation of it.
17

18
00:00:45.916 --> 00:00:49.584
Now on line 35, this is our previous implementation
18

19
00:00:49.584 --> 00:00:52.688
so we're using Java 8 StreamSupport there
19

20
00:00:52.688 --> 00:00:55.779
and what we have is something very similar
20

21
00:00:55.779 --> 00:00:57.821
and we are going to go in and
21

22
00:00:57.821 --> 00:01:01.047
I've refactored this to use the 
22

23
00:01:01.047 --> 00:01:02.970
UnitOfMeasureReactiveRepository so now
23

24
00:01:02.970 --> 00:01:05.166
we're using the reactive repository here.
24

25
00:01:05.166 --> 00:01:08.920
This has been refactored and over here
25

26
00:01:08.920 --> 00:01:11.541
we're going to do a findAll and
26

27
00:01:11.541 --> 00:01:12.612
now we're gonna map it so
27

28
00:01:12.612 --> 00:01:15.503
we're still using that same converter.
28

29
00:01:15.503 --> 00:01:18.517
We're mapping it but notice that we're not doing
29

30
00:01:18.517 --> 00:01:20.040
a block on this or anything so
30

31
00:01:20.040 --> 00:01:22.128
we're just continuing to use this so
31

32
00:01:22.128 --> 00:01:23.887
this reactive type is gonna come in here
32

33
00:01:23.887 --> 00:01:26.941
and go out of here without this code executing
33

34
00:01:26.941 --> 00:01:30.979
at this point in time and we can see that in action
34

35
00:01:30.979 --> 00:01:33.479
with the test so that impacted
35

36
00:01:37.772 --> 00:01:40.855
the UnitOfMeasureTest so we've got
36

37
00:01:42.476 --> 00:01:44.169
a few changes in our unit test
37

38
00:01:44.169 --> 00:01:45.669
that were changed.
38

39
00:01:46.693 --> 00:01:50.544
Let's look at the actual unit implementation here.
39

40
00:01:50.544 --> 00:01:53.711
So we can see here in my Mockito Mock,
40

41
00:01:54.765 --> 00:01:57.179
now I'm returning a Flux and
41

42
00:01:57.179 --> 00:01:59.429
Flux has a method of just 
42

43
00:01:59.429 --> 00:02:01.660
so that's gonna create a publisher
43

44
00:02:01.660 --> 00:02:03.380
of these two UnitOfMeasures and
44

45
00:02:03.380 --> 00:02:06.047
that gets our test working again
45

46
00:02:07.674 --> 00:02:09.626
and our IngredientController
46

47
00:02:09.626 --> 00:02:12.003
had a couple of changes too so
47

48
00:02:12.003 --> 00:02:16.059
we're just doing a Flux of just new command.
48

49
00:02:16.059 --> 00:02:17.852
I think that's the only thing
49

50
00:02:17.852 --> 00:02:20.789
we have to change here in our IngredientControllerTest.
50

51
00:02:20.789 --> 00:02:25.529
All that is now working and the next thing we want to do
51

52
00:02:25.529 --> 00:02:27.916
was handle it in our IngredientController so
52

53
00:02:27.916 --> 00:02:30.585
remember that service is getting injected in there
53

54
00:02:30.585 --> 00:02:32.093
so we didn't have to change that so
54

55
00:02:32.093 --> 00:02:34.131
our service implementation is good but
55

56
00:02:34.131 --> 00:02:38.214
the signature changed and now what we change here
56

57
00:02:39.509 --> 00:02:42.813
and remember we're just doing a list of all Uoms
57

58
00:02:42.813 --> 00:02:44.598
but here we're just doing the same thing
58

59
00:02:44.598 --> 00:02:47.055
but now it's reactive and we are going to
59

60
00:02:47.055 --> 00:02:51.126
collect that as a list and then block on that
60

61
00:02:51.126 --> 00:02:52.913
so that block triggers that because
61

62
00:02:52.913 --> 00:02:54.701
right now we haven't implemented
62

63
00:02:54.701 --> 00:02:57.847
the Thymeleaf stuff for the web front end
63

64
00:02:57.847 --> 00:02:59.054
so we still need to
64

65
00:02:59.054 --> 00:03:03.081
we're like reactive from the controllers up in this case
65

66
00:03:03.081 --> 00:03:06.096
and let me actually show you this working.
66

67
00:03:06.096 --> 00:03:10.096
I'm gonna go ahead and start up Spring Boot.
67

68
00:03:14.145 --> 00:03:15.895
Drag over Chrome here
68

69
00:03:17.787 --> 00:03:19.537
and let's refresh it.
69

70
00:03:20.380 --> 00:03:21.479
It's a little off center but
70

71
00:03:21.479 --> 00:03:24.127
now you can see that I have the two applications there
71

72
00:03:24.127 --> 00:03:26.219
so I can come in and View
72

73
00:03:26.219 --> 00:03:30.167
and I go to ingredients and say New Ingredient
73

74
00:03:30.167 --> 00:03:32.959
now that's the list of the UOMs that are coming
74

75
00:03:32.959 --> 00:03:35.926
out of MangoDB so I just want to reiterate
75

76
00:03:35.926 --> 00:03:37.469
what's going on here.
76

77
00:03:37.469 --> 00:03:40.297
I'll show you this in depth inside of IntelliJ
77

78
00:03:40.297 --> 00:03:43.797
so what we have is the reactive repository
78

79
00:03:45.806 --> 00:03:47.719
so we're actually gonna do a findAll
79

80
00:03:47.719 --> 00:03:50.611
so that's based on somewhere in here
80

81
00:03:50.611 --> 00:03:52.611
we have a findAll, there we are.
81

82
00:03:52.611 --> 00:03:56.111
findAll and that's gonna return back a Flux
82

83
00:03:56.111 --> 00:03:57.264
so that's all the Spring Data so
83

84
00:03:57.264 --> 00:03:59.203
the Spring Data is gonna provide us
84

85
00:03:59.203 --> 00:04:01.536
the implementation for this.
85

86
00:04:02.762 --> 00:04:05.821
So that repository, the repository gets injected
86

87
00:04:05.821 --> 00:04:09.988
into our service, actually the implementation of our service
87

88
00:04:12.455 --> 00:04:13.372
Wrong spot.
88

89
00:04:14.921 --> 00:04:16.921
UnitOfMeasureService.
89

90
00:04:18.123 --> 00:04:21.873
Now that gives the unit of measure repository
90

91
00:04:23.310 --> 00:04:26.977
returning back a publisher, a Flux publisher
91

92
00:04:27.838 --> 00:04:30.843
and we are also gonna return back a Flux publisher
92

93
00:04:30.843 --> 00:04:33.297
but this time instead of UnitOfMeasures,
93

94
00:04:33.297 --> 00:04:36.365
we're gonna turn up Flux publisher of
94

95
00:04:36.365 --> 00:04:39.615
UnitOfMeasureComand and to do that
95

96
00:04:40.677 --> 00:04:44.032
we go in and we take the unitOfMeasure repository,
96

97
00:04:44.032 --> 00:04:46.151
do the findAll, you can see that's
97

98
00:04:46.151 --> 00:04:49.068
returning back a Flux of UnitOfMeasure.
98

99
00:04:49.068 --> 00:04:52.704
Now we do a map function and a map is a way to
99

100
00:04:52.704 --> 00:04:55.314
say convert this from type A to type B
100

101
00:04:55.314 --> 00:04:57.940
which is exactly what we're doing with the converter
101

102
00:04:57.940 --> 00:05:01.727
but because it's reactive it doesn't run right here
102

103
00:05:01.727 --> 00:05:05.561
it actually happens inside our IngredientController
103

104
00:05:05.561 --> 00:05:09.394
so right here we get the service listAllUoms
104

105
00:05:10.310 --> 00:05:12.835
and right now it's just like a pointer.
105

106
00:05:12.835 --> 00:05:14.835
Now we say collectList.
106

107
00:05:16.041 --> 00:05:19.413
Okay, that's request and now when we do the block
107

108
00:05:19.413 --> 00:05:23.076
that is when the request goes out to MangoDB,
108

109
00:05:23.076 --> 00:05:25.077
comes back, goes through the converter,
109

110
00:05:25.077 --> 00:05:28.641
gets converted and then gets collected as a list
110

111
00:05:28.641 --> 00:05:31.372
and then it's passed back into our view layer
111

112
00:05:31.372 --> 00:05:33.568
so dealing with these reactive types
112

113
00:05:33.568 --> 00:05:35.838
it's kind of a little tricky to get your head around it
113

114
00:05:35.838 --> 00:05:38.243
what's happening when but understand
114

115
00:05:38.243 --> 00:05:42.928
nothing happens until this little block command here
115

116
00:05:42.928 --> 00:05:47.169
says block now you're going to be bubbling this up
116

117
00:05:47.169 --> 00:05:49.182
in the Thymeleaf view layer and
117

118
00:05:49.182 --> 00:05:52.057
then take it a step further then we'll be reactive
118

119
00:05:52.057 --> 00:05:54.160
but we've got a bit of work to do first
119

120
00:05:54.160 --> 00:05:56.924
because we want to get our whole back end reactive
120

121
00:05:56.924 --> 00:05:59.280
and then we're gonna worry about the web here
121

122
00:05:59.280 --> 00:06:02.530
in coming up in videos in this course.
