WEBVTT
0
1
00:00:04.640 --> 00:00:10.410
Okay, we're going to do a little code review
of our recipe application. Now if you've
1

2
00:00:10.410 --> 00:00:14.400
been following the course in a linear
fashion like step by step from the
2

3
00:00:14.400 --> 00:00:18.359
beginning to end and got to this point, I
want you to alert you that in this
3

4
00:00:18.359 --> 00:00:22.560
section of the course we are moving the
recipe app to a new repository that will
4

5
00:00:22.560 --> 00:00:26.939
be in the course resources for sure,
where you'll be able to find the URL to
5

6
00:00:26.939 --> 00:00:31.859
GitHub for this. The reason I'm doing
that is that the repository to date the
6

7
00:00:31.859 --> 00:00:34.290
one that we've been working with today
was getting a little long in the tooth
7

8
00:00:34.290 --> 00:00:37.950
as far as a number of branches. I think
we're up to 40-something branches there.
8

9
00:00:37.950 --> 00:00:42.840
So that's quite a bit, and another reason
to do it is because there are people I
9

10
00:00:42.840 --> 00:00:45.690
will take the course in a nonlinear
fashion, where they'll want to jump right
10

11
00:00:45.690 --> 00:00:50.430
in here. Learn about doing a Spring Boot
application with MySQL and that's why
11

12
00:00:50.430 --> 00:00:54.719
I'm doing that, and a third reason I'm
doing this is because I've been running
12

13
00:00:54.719 --> 00:01:01.140
CI bills using CircleCI, and unknown to
me somewhere around 25 branch as it
13

14
00:01:01.140 --> 00:01:05.250
stops automatically building all the
branches. So that was a interesting
14

15
00:01:05.250 --> 00:01:10.170
discovery on with CircleCI, so I want to
keep my CI builds going. So I'm going to
15

16
00:01:10.170 --> 00:01:14.700
start a new one here and also do that
for just work people I just want a
16

17
00:01:14.700 --> 00:01:21.330
good MySQL example, what spring boot so
alerted you to that. Now if you have been
17

18
00:01:21.330 --> 00:01:24.450
following this in a linear fashion the
rest of this video, I'm going to do a little
18

19
00:01:24.450 --> 00:01:28.710
code review of the recipe application
and step through it real quick. Just to
19

20
00:01:28.710 --> 00:01:32.850
bring up anybody who's not taking the
course in a linear fashion. So if you've
20

21
00:01:32.850 --> 00:01:37.470
been following right along and you want
to skip ahead to the next video, please
21

22
00:01:37.470 --> 00:01:41.549
do so now. But if you want to see a code
review of the recipe application that's
22

23
00:01:41.549 --> 00:01:46.110
going to be the remainder of this video,
stay on board please. Okay, so what we
23

24
00:01:46.110 --> 00:01:51.149
have is a basic Spring Boot Application
here. It's a, I'm doing it as a CRUD
24

25
00:01:51.149 --> 00:01:55.200
Spring MVC app. And let's go ahead and
run it right now, so I'm going to start
25

26
00:01:55.200 --> 00:01:59.610
it up and show you the application, then
we'll start going through it. So
26

27
00:01:59.610 --> 00:02:05.009
underneath the covers we are using
Spring Data JPA, Hibernate and Thymeleaf
27

28
00:02:05.009 --> 00:02:10.410
for the different technologies involved.
Oops! I accidentally ran my test again. We
28

29
00:02:10.410 --> 00:02:13.620
actually want to run the application
here so that that is going to be
29

30
00:02:13.620 --> 00:02:18.150
much better demo of the application if I
start up the Spring Boot Application
30

31
00:02:18.150 --> 00:02:21.840
rather than running all the unit tests.
So we can see that it does come up on
31

32
00:02:21.840 --> 00:02:26.159
port 80 pretty quickly or 8080 I should
say. I'm going to come over here
32

33
00:02:26.159 --> 00:02:35.579
clear this URL, and we can see that we do
load data on initial startup, and we have
33

34
00:02:35.579 --> 00:02:40.620
our spicy grilled chicken taco, perfect
guacamole. We can come in and view a
34

35
00:02:40.620 --> 00:02:46.140
recipe. Come in and also see the
ingredients. Then we have links for
35

36
00:02:46.140 --> 00:02:53.310
basic CRUD Operation. So if I want to
come in and update these limes. You can see limes
36

37
00:02:53.310 --> 00:02:57.780
there, and submit it, we can see that it
does update in the show the ingredient.
37

38
00:02:57.780 --> 00:03:02.340
And I did a more complex object model
here, so you can see the nuances of
38

39
00:03:02.340 --> 00:03:08.280
working with multiple IDs. So we just
come back what do we call that show, so a
39

40
00:03:08.280 --> 00:03:12.959
recipe to show. We are not pre-
loading the images but you can go and
40

41
00:03:12.959 --> 00:03:19.200
upload an image into the database for us.
What else can we do? Also show you an
41

42
00:03:19.200 --> 00:03:27.840
edit of the recipe itself. So we can come
in and update the recipe and say it
42

43
00:03:27.840 --> 00:03:35.090
takes 15 minutes for a cook time and
submit that, and we can see that our
43

44
00:03:35.090 --> 00:03:40.019
initial data is not passing their
validations on our command object. So
44

45
00:03:40.019 --> 00:03:45.690
that is a little hole in our logic but
we could easily patch that if we wanted
45

46
00:03:45.690 --> 00:03:49.019
to. Again it's just a little demo app, so
I'm showing the functionality of the
46

47
00:03:49.019 --> 00:03:52.859
application. It lists out recipes and
their ingredient, so it gives us a nice
47

48
00:03:52.859 --> 00:03:56.879
robust data model to work with.
Now let's go ahead and step through the
48

49
00:03:56.879 --> 00:04:02.510
code base behind it. So we have we're
using Spring Boot and all Spring Boot
49

50
00:04:02.510 --> 00:04:08.370
dependencies. So first one on line 30 there we'll bring in the Spring Boot Starter Data
50

51
00:04:08.370 --> 00:04:12.840
JPA and that's going to bring in a
Spring Data JPA and Hibernate. Then
51

52
00:04:12.840 --> 00:04:17.880
next on 34, we have Spring Boot
Starter Thymeleaf that gives us the
52

53
00:04:17.880 --> 00:04:23.219
Thymeleaf template engine, and then on line 38
Spring Boot Starter Web that gives us
53

54
00:04:23.219 --> 00:04:27.690
the embedded Tomcat instance,
then dev tools that gives us the auto
54

55
00:04:27.690 --> 00:04:33.720
reload, and then finally on 48, we have
the H2 database, and right now we have
55

56
00:04:33.720 --> 00:04:37.139
brought it introduced MySQL yet, so
that's what we're doing in this section
56

57
00:04:37.139 --> 00:04:41.970
and course is introducing it. Then the
two dependencies that we added in the
57

58
00:04:41.970 --> 00:04:46.440
previous section of the course are:
Project Lombok, they're in line 54 and
58

59
00:04:46.440 --> 00:04:50.750
then WebJars for Bootstrap. The
Bootstrap actually has a dependency on
59

60
00:04:50.750 --> 00:04:57.410
JUnit. So we also we get the Bootstrap
CSS jars and also the related jQuery.
60

61
00:04:57.410 --> 00:05:02.669
Down there on line 64, Spring Boot
Starter Tests, that's what brings in
61

62
00:05:02.669 --> 00:05:09.690
JUnit for tests. And we did demo the
test. Might go ahead and show you that
62

63
00:05:09.690 --> 00:05:13.620
now
so I can come in here and in development
63

64
00:05:13.620 --> 00:05:17.039
of this we were following test-driven
development. We have, I forget what we
64

65
00:05:17.039 --> 00:05:20.669
have like 50 tests or so. We'll see you
in a minute. But we do have pretty good
65

66
00:05:20.669 --> 00:05:24.690
instrumentation of the test. I were up to 70 test now. Awesome. So we have and
66

67
00:05:24.690 --> 00:05:28.800
we've been following trying to do true
unit tests whenever possible. So we do
67

68
00:05:28.800 --> 00:05:34.229
have a pretty good coverage of unit test
with Mockito. So we can take a quick look
68

69
00:05:34.229 --> 00:05:39.690
at that. So you can see we're setting up
my mocks with a RecipeService and we
69

70
00:05:39.690 --> 00:05:44.729
are using MockMvc to test our
controller actions so I'm not going to
70

71
00:05:44.729 --> 00:05:49.050
go through and step through all the
tests at this point. We are using Thymeleaf.
71

72
00:05:49.050 --> 00:05:55.020
The Thymeleaf templates are found
here in the templates directory. So this
72

73
00:05:55.020 --> 00:06:01.229
is just a simple template, and let's go
ahead. One nice thing about Thymeleaf,
73

74
00:06:01.229 --> 00:06:06.660
this is the template being displayed in
the browser, so we're not going through
74

75
00:06:06.660 --> 00:06:10.380
the I mentioned so we can go ahead and
make changes here that's a real great
75

76
00:06:10.380 --> 00:06:16.229
feature Thymeleaf. Now the form objects
we are following command pattern here so
76

77
00:06:16.229 --> 00:06:20.610
all the forms, like when we made an
update to the ingredient. This is the
77

78
00:06:20.610 --> 00:06:24.990
command object and we are using Project
Lombok to set the getters and setters of
78

79
00:06:24.990 --> 00:06:30.210
this. And we get a no args constructor
that means we can get a set of a
79

80
00:06:30.210 --> 00:06:35.310
constructor with no arguments, and that's
all done through Project Lombok, and this
80

81
00:06:35.310 --> 00:06:38.669
is the command. So what happens here with
Spring MVC are
81

82
00:06:38.669 --> 00:06:42.960
form will bind properties to this and
then that gets passed into our
82

83
00:06:42.960 --> 00:06:48.840
Controller. Let's take a look at the
IngredientController real quick. So this
83

84
00:06:48.840 --> 00:06:52.560
are pretty standard Spring MVC
Controller. It gets autowired with
84

85
00:06:52.560 --> 00:06:57.330
several services. So we are following
a service layer. We are not injecting the
85

86
00:06:57.330 --> 00:07:00.659
data layer directly in this. We have that
wrapped in a service layer which is I
86

87
00:07:00.659 --> 00:07:04.979
believe is a best practice. So let's go
ahead and take a look at the Ingredient
87

88
00:07:04.979 --> 00:07:10.020
Service. You can see that it's pretty
simple interface we don't have a lot of
88

89
00:07:10.020 --> 00:07:15.210
complex operations here but we are
coding to an interface which is also a
89

90
00:07:15.210 --> 00:07:19.529
best practice because you saw the tests
that we had, so all we got to do is
90

91
00:07:19.529 --> 00:07:24.419
create a mock of the interface and
provide that implementation to our class
91

92
00:07:24.419 --> 00:07:27.810
well it's under tests. A very very handy
way to do that.
92

93
00:07:27.810 --> 00:07:31.680
Let's go ahead and take a look at the
implementation of it. So here's a
93

94
00:07:31.680 --> 00:07:36.839
actual implementation. This stands as
a middle service between the Controller
94

95
00:07:36.839 --> 00:07:43.500
and the Spring Data JPA Repositories. So
we can see that we have this is where we
95

96
00:07:43.500 --> 00:07:47.789
are going in, getting data out, doing
validations, and then returning the
96

97
00:07:47.789 --> 00:07:51.960
corporate data. So I'm not going to go
through everything line by line here.
97

98
00:07:51.960 --> 00:07:57.899
Then we are also using the Spring
Data JPA Repositories. So let's go ahead
98

99
00:07:57.899 --> 00:08:01.830
and take a look at that. So we get the
RecipeRepository that's going to be what
99

100
00:08:01.830 --> 00:08:06.169
we wanted. So we can see this extends out
the Spring Data JPA
100

101
00:08:06.169 --> 00:08:12.330
CrudRepository and this gives us a
number of operations. Just as a
101

102
00:08:12.330 --> 00:08:16.529
reminder Spring Data JPA,
it's going to provide us in the
102

103
00:08:16.529 --> 00:08:22.349
implementation at runtime, so we define
the interface and Spring Data JPA is
103

104
00:08:22.349 --> 00:08:27.120
going to use Java reflection to build up
and actual implementation at runtime
104

105
00:08:27.120 --> 00:08:32.159
for us. Now we accidentally saw the
converters, so I am following this for
105

106
00:08:32.159 --> 00:08:36.930
data type conversion, so this is a
Spring standard. This is a standard
106

107
00:08:36.930 --> 00:08:41.579
interface. It was spring to convert one
type to another, so this is another thing
107

108
00:08:41.579 --> 00:08:45.779
that I'd like to do and this is wired up
as a Spring component. And then we are
108

109
00:08:45.779 --> 00:08:51.880
loading data at startup. So I did show
two techniques in the course. One is Data
109

110
00:08:51.880 --> 00:08:58.529
SQL. So Spring Boot will look in resources
for a file called data.sql, which is
110

111
00:08:58.529 --> 00:09:03.690
optional. Now we can change that name if
we want to, but the default is that.
111

112
00:09:03.690 --> 00:09:08.110
We can see that's a series of insert
statements. So this is going to run every
112

113
00:09:08.110 --> 00:09:12.970
time on startup. We'll probably want
to change this in this course because we
113

114
00:09:12.970 --> 00:09:17.139
don't want that to run on our MySQL
database, so we will change the
114

115
00:09:17.139 --> 00:09:20.920
initialization of the database and I use
that because we want to initialize the
115

116
00:09:20.920 --> 00:09:26.350
database with different data based on
condition. Remember right now, today
116

117
00:09:26.350 --> 00:09:30.850
we've been using a MySQL I'm sorry H2
database and that goes away every time.
117

118
00:09:30.850 --> 00:09:34.420
So that we're initializing it every time
we start up, and then it's just one way
118

119
00:09:34.420 --> 00:09:42.600
that we are initializing the database.
The next one is going to be in bootstrap.
119

120
00:09:42.600 --> 00:09:50.470
So what we have here is a class that
implements ApplicationListener and it's
120

121
00:09:50.470 --> 00:09:57.550
listening for a ContextRefreshEvent. So
that's a specific event that gets thrown when the
121

122
00:09:57.550 --> 00:10:01.720
Spring Context starts up. So that says,
we're all started up and everything's
122

123
00:10:01.720 --> 00:10:09.189
ready to go, and then this gets called,
and onApplicationEvent, we call this we
123

124
00:10:09.189 --> 00:10:14.319
call this method, getRecipes(), which
passes back a list of recipes and we
124

125
00:10:14.319 --> 00:10:18.670
save that to the RecipeRepository. And
that's what loads up our initial recipes
125

126
00:10:18.670 --> 00:10:26.230
for startup. Then finally I did add in a
directory here called scripts. So this is
126

127
00:10:26.230 --> 00:10:30.819
a scripts directory. And in this part of
the course we will be adding MySQL arms
127

128
00:10:30.819 --> 00:10:35.709
I'm sorry. Not MySQL, But there will be
SQL scripts, that we will be using to
128

129
00:10:35.709 --> 00:10:39.959
initialize MySQL database.
