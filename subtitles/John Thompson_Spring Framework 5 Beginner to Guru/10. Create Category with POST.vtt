WEBVTT
0
1
00:00:04.190 --> 00:00:08.040
Alright! In this video, we are going to
look at creating a new category with a
1

2
00:00:08.040 --> 00:00:13.860
POST action against our API. And in doing
this, we wanna do it all reactively. So,
2

3
00:00:13.860 --> 00:00:16.680
there's a couple of different ways to
skin those cat. I'm gonna show you a
3

4
00:00:16.680 --> 00:00:21.390
very specific way that will take
reactive streams to handle this.
4

5
00:00:21.390 --> 00:00:26.820
So, let's go ahead and setup the method,
then, we'll decorate it for the WebFlux
5

6
00:00:26.820 --> 00:00:31.320
annotations. So, the first thing we wanna do is we are going to return back a
6

7
00:00:31.320 --> 00:00:36.360
Mono<Void>. So, remember, in a create action,
we're not going to turn it back any type
7

8
00:00:36.360 --> 00:00:40.800
of body, but we do want to return back a
return status of 201, saying that the
8

9
00:00:40.800 --> 00:00:45.670
resource was created.
And in this case, we are going to take in
9

10
00:00:45.670 --> 00:00:48.780
a Publisher.
10

11
00:00:52.110 --> 00:00:57.780
I'm gonna call the stream, just so we
remember that, this is going could be a
11

12
00:00:57.780 --> 00:01:02.550
stream of one or more objects in this
case and let's go ahead. And remember,
12

13
00:01:02.550 --> 00:01:08.670
Publisher is out of the reactive streams
API specification. So remember, both Monos
13

14
00:01:08.670 --> 00:01:14.700
and Fluxes implement our implementations
of Publisher, so we're seeing any class
14

15
00:01:14.700 --> 00:01:18.600
that implements a Publisher can be
passed into this method here. So, any
15

16
00:01:18.600 --> 00:01:22.710
class implementing that, so Monos or Fluxes
could, in theory, come into this. So now,
16

17
00:01:22.710 --> 00:01:28.020
we're gonna return back from the
categoryRepository. What we wanna do
17

18
00:01:28.020 --> 00:01:33.170
is to saveAll. The save all takes in a
Publisher.
18

19
00:01:33.650 --> 00:01:39.980
So, that's gonna be taking that stream.
they're just gonna say then, which turns
19

20
00:01:39.980 --> 00:01:44.540
back a void. So, that sets up our
controller method. That's going to
20

21
00:01:44.540 --> 00:01:49.310
take in a stream of Category, so this is
being done reactively so it could be one
21

22
00:01:49.310 --> 00:01:53.570
or more. In our purposes, it's got just
gonna be one. But it'll take in a
22

23
00:01:53.570 --> 00:01:58.880
stream of those, and then, save those to
MongoDB and it's gonna be doing that
23

24
00:01:58.880 --> 00:02:04.180
all reactively. So, let's go ahead and
decorate this a little bit.
24

25
00:02:05.180 --> 00:02:13.090
And we see, what we wanna do is take
the same API value. But now,
25

26
00:02:14.830 --> 00:02:19.690
make sure I copied the right value there. So,
I'd probably externalize this into
26

27
00:02:19.690 --> 00:02:23.320
property, but for here, this is good enough
for our learning purposes here. So, we're
27

28
00:02:23.320 --> 00:02:29.020
using the same URL value, and mapping
GET is here and HTTP POST
28

29
00:02:29.020 --> 00:02:33.820
this. So, let's go ahead and set up our
test now. And that, this is gonna have
29

30
00:02:33.820 --> 00:02:37.120
an error, but I'm leaving that error
there on purpose because I wanna
30

31
00:02:37.120 --> 00:02:43.489
demonstrate something to you.
Let's go ahead and set up our test now.
31

32
00:03:04.450 --> 00:03:10.739
So, I'm saying your categoryRepository
saveAll any Publisher.ooooo..
32

33
00:03:19.870 --> 00:03:23.980
In this case, I'm not going out
building up the properties of the
33

34
00:03:23.980 --> 00:03:27.860
Category. So, we really don't need it at
this point.
34

35
00:03:27.860 --> 00:03:33.350
But we do need to pass in a Category
into our class. So, what we want to do is
35

36
00:03:33.350 --> 00:03:36.550
create a Mono here.
36

37
00:03:50.830 --> 00:03:55.120
So, this sets up the Category that we
want to save. Now, what we want to do is
37

38
00:03:55.120 --> 00:03:58.620
go ahead and invoke that API.
38

39
00:04:00.630 --> 00:04:05.180
This time, we're doing a post action to
create it.
39

40
00:04:06.360 --> 00:04:10.410
So, I still have that on my clipboard so
I just paste it in the URL value.
40

41
00:04:10.410 --> 00:04:17.329
This time, we want to say the body is
going to be that catToSaveMono,
41

42
00:04:17.329 --> 00:04:23.829
and the API wants the class to declare
it as well.
42

43
00:04:28.479 --> 00:04:32.770
So, just run through what's going on here.
We're posting against the api/v1/
43

44
00:04:32.770 --> 00:04:37.930
categories. We are that catToSaveMono
that we created. On line 60, we are passing
44

45
00:04:37.930 --> 00:04:42.999
that object in to the body method, and
now, we're going to run the exchange, and
45

46
00:04:42.999 --> 00:04:50.580
we are expecting a status of created. So,
let's go ahead and run that right now.
46

47
00:04:53.970 --> 00:04:59.430
And we've got a 500 error. So
should not have seen that, as now there
47

48
00:04:59.430 --> 00:05:02.510
are expecting.
48

49
00:05:04.740 --> 00:05:10.740
So, I ran into a little bit of problem
here. And really, what's going on here,
49

50
00:05:10.740 --> 00:05:14.850
looking at a little bit closer, I
realized what I did. So, I'm getting this
50

51
00:05:14.850 --> 00:05:22.200
and this really doesn't make any sense.
But, what I forgot to do is annotate this
51

52
00:05:22.200 --> 00:05:26.690
with the @RequestBody annotation.
52

53
00:05:27.050 --> 00:05:32.030
So, I forgot to tell WebFlux to go ahead and
bind the body into it. So, it really didn't
53

54
00:05:32.030 --> 00:05:35.629
know what to do with it, so I believe
that's it. So, let's go ahead and run this
54

55
00:05:35.629 --> 00:05:37.900
now. So that
55

56
00:05:38.680 --> 00:05:44.350
was a mapping error. And now, this is the
error that I was expecting. What's going on
56

57
00:05:44.350 --> 00:05:50.680
here is we are getting back at 200 okay
and that's the default property. Now,
57

58
00:05:50.680 --> 00:05:55.090
there's two different ways that we can
address this. One is to return back the
58

59
00:05:55.090 --> 00:06:00.070
ResponseBody. But another, which I think
is a little bit cleaner, you'll see a lot
59

60
00:06:00.070 --> 00:06:02.620
of it, if you've research this on the
internet, you're going to see everybody
60

61
00:06:02.620 --> 00:06:06.759
return back ResponseBody. But what you
can do is a little bit cleaner, in my
61

62
00:06:06.759 --> 00:06:13.860
opinion, is just come up here and
annotate it with ResponseStatus.
62

63
00:06:14.810 --> 00:06:19.610
We want to do a create in here. So now,
we're not going to dirty that up, so let's
63

64
00:06:19.610 --> 00:06:23.750
go ahead and run this again, and we
should get back at 201 status versus a
64

65
00:06:23.750 --> 00:06:29.120
to 200 status. So now, we can see that
it's working. So, we didn't have to really
65

66
00:06:29.120 --> 00:06:33.380
dirty things up and and start messing
with the ResponseBody, and we were able
66

67
00:06:33.380 --> 00:06:37.790
to just return back simple reactive
types and keep our method fairly clean
67

68
00:06:37.790 --> 00:06:41.840
there. So, I do like this approach over
other approaches that you will see
68

69
00:06:41.840 --> 00:06:46.100
advertised on the internet. So, pretty
pretty simple here. So now, we do have a
69

70
00:06:46.100 --> 00:06:50.600
successful creation method for
categories. And just to recap, what's
70

71
00:06:50.600 --> 00:06:55.400
happening here, when the reactive type
comes in, so we're going to say, we wanted to
71

72
00:06:55.400 --> 00:06:59.300
a create action, we are going to get a
publisher, which is going to be a stream
72

73
00:06:59.300 --> 00:07:04.550
of categories, and we are going to return
that, and we are passing that into
73

74
00:07:04.550 --> 00:07:10.010
categories using the saveAll function,
and using the then method to return back
74

75
00:07:10.010 --> 00:07:14.630
the void. So, when this completes, it's
going to return back a Mono or void to
75

76
00:07:14.630 --> 00:07:20.120
the calling Entity. And in this case, it's
going to be a web request, and we are
76

77
00:07:20.120 --> 00:07:25.550
mapping post to it, and we are expecting
a body with a Category in it, and we were
77

78
00:07:25.550 --> 00:07:34.580
going to return back a status of 201. And
just to recap our test, we are using the
78

79
00:07:34.580 --> 00:07:42.169
BDD Mockito, and we're saying given. So,
given, when our CategoryRepository Mock,
79

80
00:07:42.169 --> 00:07:47.479
we have to saveAll method and vote for
any Publisher, and we are going to return
80

81
00:07:47.479 --> 00:07:55.450
back a Flux with just one object in it.
And here on line 60, we are creating the
81

82
00:07:55.450 --> 00:08:01.729
Mono, that we are going to pass in to our
WebTestClient. So, we are going to come
82

83
00:08:01.729 --> 00:08:05.990
down here. This is object that we are
creating to post against the WebTest
83

84
00:08:05.990 --> 00:08:11.840
Client. So, we are doing a post action
against this URL. We are passing it in
84

85
00:08:11.840 --> 00:08:16.520
the body. We are passing in
the catToSave, the category to save Mono,
85

86
00:08:16.520 --> 00:08:23.360
and specifying the class running an
exchange, and we are expecting back 201
86

87
00:08:23.360 --> 00:08:28.200
status. So, it is created. So, our test run
happy. Let's go ahead and verify
87

88
00:08:28.200 --> 00:08:33.919
all our tests still run happily.
And assuming that I do, which they do. I
88

89
00:08:33.919 --> 00:08:38.620
am going to commit this into GitHub for
your review.
