WEBVTT
0
1
00:00:04.190 --> 00:00:09.510
Alright! At the time of recording this
video, there's about 15,000 students
1

2
00:00:09.510 --> 00:00:13.860
enrolled in this course, making it one of
the most popular courses on Spring
2

3
00:00:13.860 --> 00:00:18.060
Framework. Actually, probably close to
16,000. So, this has been a very popular
3

4
00:00:18.060 --> 00:00:22.170
course and I've been getting a lot of
feedback. I do take student feedback very
4

5
00:00:22.170 --> 00:00:28.019
very seriously and use it to improve the
course. I had an idea to recreate the
5

6
00:00:28.019 --> 00:00:31.590
Spring Pet Clinic. The Spring Pet
Clinic is a reference application
6

7
00:00:31.590 --> 00:00:36.510
developed in the Spring Framework. I
sent out an email surveying students of
7

8
00:00:36.510 --> 00:00:40.730
the course and I've got that result up
here on the screen. You can see
8

9
00:00:40.730 --> 00:00:44.670
94% of you said yes, this
would be an awesome idea to add to the
9

10
00:00:44.670 --> 00:00:49.079
course. So that's what we were doing here.
In this video, I want to introduce
10

11
00:00:49.079 --> 00:00:54.989
you to the Spring Pet Clinic. Okay, this
is a presentation. I did not produce this
11

12
00:00:54.989 --> 00:00:58.230
presentation but I want to go through it.
It's been updated. There is some
12

13
00:00:58.230 --> 00:01:02.609
outdated stuff on this. Spring Pet Clinic,
like I said, it's a reference application
13

14
00:01:02.609 --> 00:01:07.320
to use the Spring Framework. It's been
around for some time. There's a lot of
14

15
00:01:07.320 --> 00:01:11.790
old stuff out there. I look through the
documentation and there's a lot of
15

16
00:01:11.790 --> 00:01:15.840
old baggage out there. Some of it is
misleading or just plain incorrect. and
16

17
00:01:15.840 --> 00:01:19.830
really no longer the way that we develop
Spring Applications. Going back to
17

18
00:01:19.830 --> 00:01:25.110
version 2, version 3, when this Pet Clinic
came out, things have evolved quite a bit.
18

19
00:01:25.110 --> 00:01:28.619
If you look at it with new eyes,
there's a lot of outdated stuff out
19

20
00:01:28.619 --> 00:01:32.369
there. If you're new to the Spring
Framework, I can see how you get very
20

21
00:01:32.369 --> 00:01:38.189
very confused as to what to use when and
where. That's partly due to the
21

22
00:01:38.189 --> 00:01:42.210
success of the framework because it's
been so popular, and also how its evolved
22

23
00:01:42.210 --> 00:01:45.450
over time, because there's a lot of
examples out there and a lot of
23

24
00:01:45.450 --> 00:01:50.399
evolution behind the framework. My
goal here in the course is to teach you
24

25
00:01:50.399 --> 00:01:56.159
how to use the framework to its most in
modern technology using Spring Framework 5
25

26
00:01:56.159 --> 00:02:00.869
and all the goodness that goes along
with Spring Framework 5 to show you how
26

27
00:02:00.869 --> 00:02:04.020
to be a modern Spring Framework
developer. So I want to go through the
27

28
00:02:04.020 --> 00:02:08.819
slide deck and talk about a few things.
Like I said, Spring Pet Clinic is a
28

29
00:02:08.819 --> 00:02:12.500
sample application to show how the
Spring Framework can be
29

30
00:02:12.500 --> 00:02:17.750
used to build simple database-orient
applications. So we are going to be using
30

31
00:02:17.750 --> 00:02:24.200
JavaBeans to configure things. We will
use a Spring MVC for the presentation
31

32
00:02:24.200 --> 00:02:28.850
layer. JDBC, of course, will setup a
database, Application Monitoring based on
32

33
00:02:28.850 --> 00:02:34.250
JMX. AOP, we'll get in there. Data
Validation. So we'll do a lot of things
33

34
00:02:34.250 --> 00:02:37.820
in this. You can see the last bullet
point there. There's a lot of Forks of
34

35
00:02:37.820 --> 00:02:40.160
this and I'll show you some of those
Forks.
35

36
00:02:40.160 --> 00:02:45.040
I will provide the github link so you
can see. This is just a simple Petclinic
36

37
00:02:45.040 --> 00:02:48.890
application allowing owners and
veterinarians to schedule appointments
37

38
00:02:48.890 --> 00:02:52.250
for their pets, basically. So, a couple
screenshots there. We're not gonna
38

39
00:02:52.250 --> 00:02:56.900
recreate those exactly, but talking about
the software layers that we're gonna be
39

40
00:02:56.900 --> 00:03:01.700
utilizing, we will use Spring Data JPA
at the bottom. There you can see the
40

41
00:03:01.700 --> 00:03:06.830
different profiles to implement JPA or
JDBC. We may get into that as well.
41

42
00:03:06.830 --> 00:03:10.430
Transactional and cashable, that's
something that I will be adding to the
42

43
00:03:10.430 --> 00:03:14.360
course at the time of recording. So, we'll
get to see how to configure caching. And
43

44
00:03:14.360 --> 00:03:20.709
then Spring MVC, how that works with it.
Here, they're talking about JSPs.
44

45
00:03:20.709 --> 00:03:25.580
JSPs are still very much out there in
the industry. One of the things that's
45

46
00:03:25.580 --> 00:03:30.560
very popular to use is Thymeleaf. That's
where all the industry is going right
46

47
00:03:30.560 --> 00:03:35.840
now is to use Thymeleaf for creating HTML
and you do see me use that in the course.
47

48
00:03:35.840 --> 00:03:40.310
Thymeleaf is my preferred. Looking at
the download metrics right now, Thymeleaf
48

49
00:03:40.310 --> 00:03:46.070
is very much the number one thing in
Java for developing web applications. Now,
49

50
00:03:46.070 --> 00:03:50.600
this is the domain model. You can see
that we have an owner, we have a pet, we
50

51
00:03:50.600 --> 00:03:56.390
have a visit person, and then the
veterinary and specialties. So we will go
51

52
00:03:56.390 --> 00:04:00.620
ahead and create this data model as we
go forward and get that working. We're
52

53
00:04:00.620 --> 00:04:04.100
talking about data access here using a
repository, so we will follow the
53

54
00:04:04.100 --> 00:04:10.070
repository paradigm in developing those
for data access. Here's some stuff
54

55
00:04:10.070 --> 00:04:13.790
that's a little bit off. We are going to
be using the H2 database, and I'll show
55

56
00:04:13.790 --> 00:04:17.329
you how to set up MySQL. We won't be
doing Postgres on this unless there's a
56

57
00:04:17.329 --> 00:04:22.070
request for it. We will get into using
different profiles and we will get into
57

58
00:04:22.070 --> 00:04:25.880
that further in the course. Caching is a
very important thing that
58

59
00:04:25.880 --> 00:04:30.080
we will be setting up and configuring.
Maybe not exactly like this because not
59

60
00:04:30.080 --> 00:04:34.010
too much XML is used anymore for
configuration. Transaction management,
60

61
00:04:34.010 --> 00:04:37.640
that is also a very important topic
which we will cover. Exception handling
61

62
00:04:37.640 --> 00:04:42.770
we will definitely cover. AOP, that
will be covered as well. Continuing here,
62

63
00:04:42.770 --> 00:04:48.320
View Resolver is an important topic as
well. This here is showing some HTML /
63

64
00:04:48.320 --> 00:04:53.930
JSP. We will be using Thymeleaf in place
of this. Again, I'm not using JSP but
64

65
00:04:53.930 --> 00:04:59.630
Thymeleaf. Validation, of course, we will get
into. Web Jars is huge. We will definitely
65

66
00:04:59.630 --> 00:05:05.960
be using those. I am not going to address
LESS using that but you can see examples
66

67
00:05:05.960 --> 00:05:10.640
in this. Java based configuration, we will
definitely be doing that. Unit Testing,
67

68
00:05:10.640 --> 00:05:16.070
I'm going to take the opportunity to use
JUnit 5. So when I develop this course,
68

69
00:05:16.070 --> 00:05:19.730
JUnit 4 was out, so I have a large JUnit
4 test code out there.
69

70
00:05:19.730 --> 00:05:24.650
JUnit 5 has been released and I want
to get you solid experience. You go
70

71
00:05:24.650 --> 00:05:30.380
entering the industry right now, there is
a ton of JUnit 4 out there. So JUnit 4
71

72
00:05:30.380 --> 00:05:35.210
is not going anywhere. It's been stable.
It's widely accepted, but J unit 5 is out
72

73
00:05:35.210 --> 00:05:41.480
there coming and we will leverage JUnit
5 in this project. Now, there's a couple
73

74
00:05:41.480 --> 00:05:45.110
different things here. There's actually
two stacks out there. I'll review
74

75
00:05:45.110 --> 00:05:50.120
this. There is the Spring Framework Petclinic. You can see there in the center
75

76
00:05:50.120 --> 00:05:55.640
column. This is plain old Spring
Framework without Spring Boot and we
76

77
00:05:55.640 --> 00:05:58.520
have the Spring Boot version. There's
two different versions that are being
77

78
00:05:58.520 --> 00:06:02.450
supported right now by the Spring team.
You can review that source code. I am
78

79
00:06:02.450 --> 00:06:06.470
going to focus on using the Spring Boot
because that's really where the industry
79

80
00:06:06.470 --> 00:06:12.230
is going right now. And then, here's some
other versions and some references here.
80

81
00:06:12.230 --> 00:06:17.700
So if you want to dig into it there's more. So
let me toggle over to github right now.
81

82
00:06:17.700 --> 00:06:23.670
Here is the reference application.
I will include these URLs in the
82

83
00:06:23.670 --> 00:06:29.730
course. So this is a Petclinic
application. This is the Spring Boot
83

84
00:06:29.730 --> 00:06:33.480
version. You can see it up a
presentation here, that's what I just
84

85
00:06:33.480 --> 00:06:39.360
went through, and then also under a
different github organization, Spring Pet
85

86
00:06:39.360 --> 00:06:44.610
Clinic, there's this whole collection of
different versions of Petclinic. So we
86

87
00:06:44.610 --> 00:06:49.350
have AngularJS, ReactJS, one 
developed in micro-services. One developed
87

88
00:06:49.350 --> 00:06:53.850
in Kotlin. So a number of different
versions here that we can leverage and
88

89
00:06:53.850 --> 00:06:58.560
you can go in and learn from. But I am
going to start my own version and we are
89

90
00:06:58.560 --> 00:07:02.640
going to go in and develop it step by
step as we go through the course. So it
90

91
00:07:02.640 --> 00:07:06.210
will be my own version but I want to
make you aware this is not my work. This
91

92
00:07:06.210 --> 00:07:11.070
is a very, I mean, this has been massively
forked a lot by the Spring community and
92

93
00:07:11.070 --> 00:07:14.490
Spring Developers. We're going to start a
brand new application and we are going
93

94
00:07:14.490 --> 00:07:18.510
to go through it step by step so you can
understand how to build a Spring
94

95
00:07:18.510 --> 00:07:21.350
Framework project.
