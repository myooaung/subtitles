WEBVTT
0
1
00:00:04.339 --> 00:00:10.170
Alright we are going to talk about
HTTP and that stands for Hypertext
1

2
00:00:10.170 --> 00:00:17.970
Transfer Protocol. So a little bit of
history behind HTTP. The development was
2

3
00:00:17.970 --> 00:00:23.490
started by Tim Berners-Lee over at CERN
in 1989. So we are going back a little bit.
3

4
00:00:23.490 --> 00:00:29.160
So the whole HTTP thing kind of existed
before the internet. So the original
4

5
00:00:29.160 --> 00:00:36.270
version was HTTP/0.9 and from what I can
tell that was kind of like Tim
5

6
00:00:36.270 --> 00:00:41.700
Berners-Lee's entire thing. So that was
like his his initial creation of it and
6

7
00:00:41.700 --> 00:00:46.410
this started as a telnet friendly
protocol and you got to remember back in
7

8
00:00:46.410 --> 00:00:51.629
1989 there, telnet was the primary
protocol that you used to talk to
8

9
00:00:51.629 --> 00:00:56.070
computers as a Simple text protocol. So
pretty simple. A lot of computers still
9

10
00:00:56.070 --> 00:01:03.660
have it installed probably in the last
let's say 10-15 years, telnet has been
10

11
00:01:03.660 --> 00:01:10.140
frowned upon to use because it is a free
text protocol and today a few familiar
11

12
00:01:10.140 --> 00:01:15.810
with Linux systems, SSH has definitely
shut telnet to the side. A lot of security
12

13
00:01:15.810 --> 00:01:19.830
organizations now in enterprises
won't let you use telnet because it
13

14
00:01:19.830 --> 00:01:25.560
literally sends out everything you type
free text across the network wire. So bad
14

15
00:01:25.560 --> 00:01:29.820
thing to use in the enterprise but going
back to 1989, it's the tools that they
15

16
00:01:29.820 --> 00:01:38.040
had. So this is an example of a
telnet command and you can actually go
16

17
00:01:38.040 --> 00:01:42.960
in telnet and you tell the hostname
in the port and it's going to go back to that are 
17

18
00:01:42.960 --> 00:01:49.560
connected to IP address and the
original initial version of
18

19
00:01:49.560 --> 00:01:56.250
HTTP, you could say GET and give it a url
and then it would return back that
19

20
00:01:56.250 --> 00:02:00.540
resource to you and then close
connection. So this is like very easy. You
20

21
00:02:00.540 --> 00:02:06.810
could do it from a command line. If you
like something fun to do, you can go out
21

22
00:02:06.810 --> 00:02:11.730
to the internet and Google the website
is down. This is something that came out
22

23
00:02:11.730 --> 00:02:15.540
least a decade ago but it's hilarious
about an IT guy and a sales guy.
23

24
00:02:15.540 --> 00:02:20.370
Definitely not safe for work but it is a
hilarious video. But in this video, you
24

25
00:02:20.370 --> 00:02:25.500
can see the IT guy saying the website
isn't down. He takes telnet and jumps
25

26
00:02:25.500 --> 00:02:29.250
over to it and goes in and telnet
into the port and I thought that was
26

27
00:02:29.250 --> 00:02:32.790
kind of cool at the time because only true
geeks really know that you can telnet
27

28
00:02:32.790 --> 00:02:44.340
into a web server like that. So we had
version 1 from 1991 to 1995 and this
28

29
00:02:44.340 --> 00:02:51.630
is a time when HTTP and both HTML, both
specifications were developing rapidly
29

30
00:02:51.630 --> 00:02:57.030
and maturing rapidly and this is a time
we had a really cool new segment in the
30

31
00:02:57.030 --> 00:03:03.450
industry of tools called web browsers. And that was like when Netscape was
31

32
00:03:03.450 --> 00:03:08.580
in their heyday. So Netscape was like
one of the early browsers and widely
32

33
00:03:08.580 --> 00:03:16.800
accepted. Now the standards for HTTP at
this point with the version 1.1 or 1.0,
33

34
00:03:16.800 --> 00:03:22.100
I'm sorry, there's two groups that
jointly worked on them. One was the IETF,
34

35
00:03:22.100 --> 00:03:28.830
Internet Engineering Task Force and then
the other was W3C, The World Wide Web
35

36
00:03:28.830 --> 00:03:33.510
Consortium. And these guys got together
and they came up with a very detailed
36

37
00:03:33.510 --> 00:03:39.270
specification as to how web servers had
to behave and how browsers had to behave
37

38
00:03:39.270 --> 00:03:44.250
more. So it's kind of like a joint option
there. So as these different products
38

39
00:03:44.250 --> 00:03:48.209
came out, this was like the standards
authority. They wrote the definitive
39

40
00:03:48.209 --> 00:03:55.620
guide as to how these things had to
behave. Now jumping to 1.0, we can see again
40

41
00:03:55.620 --> 00:04:02.520
that's still supporting telnet but now
you can see there where one is,
41

42
00:04:02.520 --> 00:04:09.030
we are now including the HTTP version and
we are able to set some information
42

43
00:04:09.030 --> 00:04:16.020
about our user agent Accept and then now
we are also getting back a status code. So
43

44
00:04:16.020 --> 00:04:21.540
that 200 OK is an HTTP status
code there by the red 2. You can see that
44

45
00:04:21.540 --> 00:04:26.340
with the header on the response has
also been enhanced as to what it
45

46
00:04:26.340 --> 00:04:28.789
provides us
and this is all important for stuff for
46

47
00:04:28.789 --> 00:04:36.380
the browser that it works with. Now HTTP/1.1 accidentally said that a couple
47

48
00:04:36.380 --> 00:04:41.780
times. But it's been out since 1997 and
this is what we are actually still using
48

49
00:04:41.780 --> 00:04:47.509
today. It solved a lot of ambiguities and
I hate that word, from early versions. So
49

50
00:04:47.509 --> 00:04:50.300
there's a lot of things that weren't
clear in the specification and those
50

51
00:04:50.300 --> 00:04:55.460
were clarified. So when something isn't
clear in a specification, it's left up to
51

52
00:04:55.460 --> 00:05:00.560
the people implementing it to come up with
what they're going to define. So a lot of
52

53
00:05:00.560 --> 00:05:04.370
times that doesn't work out when you
have people defining one thing and other
53

54
00:05:04.370 --> 00:05:08.599
things to find another. Microsoft was
very good for those. They'd come up with
54

55
00:05:08.599 --> 00:05:11.780
their own standards. So you had what the rest
of the world was doing, then what
55

56
00:05:11.780 --> 00:05:16.460
Microsoft was doing and that's probably
why Internet explorer had such a bad
56

57
00:05:16.460 --> 00:05:22.430
reputation of working with it. And in 1.1
of HTTP, we picked up support for
57

58
00:05:22.430 --> 00:05:26.900
keep alive connections, chunked encoding
transfers and that. That was a big one.
58

59
00:05:26.900 --> 00:05:32.330
That was very important and
then transferring coding was also an
59

60
00:05:32.330 --> 00:05:41.090
important pick up in the 1.1 release. Now
this has of vow times, RFC is a
60

61
00:05:41.090 --> 00:05:49.520
request for comments and it was HTT/1.1 that
was updated in 1999 and then again, just
61

62
00:05:49.520 --> 00:05:55.219
not too long ago in 2014. And this is
still in use today.
62

63
00:05:55.219 --> 00:06:01.580
1.1 is probably the most popular flavor
of HTTP out on the internet right now.
63

64
00:06:01.580 --> 00:06:09.289
And in 1.1, we could see that encoding,
character set and cookies were added and
64

65
00:06:09.289 --> 00:06:13.669
this is the header of a get request. So you can see we have more stuff going
65

66
00:06:13.669 --> 00:06:17.449
on there. The Accept encoding, now we we can
66

67
00:06:17.449 --> 00:06:22.729
specify things like gzip. So gzip can be
used to compress the content as it's
67

68
00:06:22.729 --> 00:06:27.259
going across the wire. We are also saying
Accept languages and character sets that
68

69
00:06:27.259 --> 00:06:35.180
we accept and then the dreaded cookies
were also enabled. Now this is an example
69

70
00:06:35.180 --> 00:06:40.650
response under 1.1. You can see we get
some additional information here
70

71
00:06:40.650 --> 00:06:46.080
and then where the red circle 3 and red
circle 4 are, this is actually
71

72
00:06:46.080 --> 00:06:51.150
information about the payload. So before
in 1.0, the payload was kind of
72

73
00:06:51.150 --> 00:06:56.280
free-formed and you just kind of got
what you got. Now you know, you have,
73

74
00:06:56.280 --> 00:07:00.960
this is what I'm expecting to give you
on three and then the four is a
74

75
00:07:00.960 --> 00:07:10.470
termination character. Now HTTP/2.0 is out
there. This was standardised in 2015 and
75

76
00:07:10.470 --> 00:07:15.570
by the end of 2015, most servers, most of
the popular servers and popular browsers
76

77
00:07:15.570 --> 00:07:24.060
did support HTTP/2.0 but I'm recording
this in May of 2017. Only about 13% of
77

78
00:07:24.060 --> 00:07:28.169
the top 10 million websites are
supporting HTTP/2.0. So it's being slowly
78

79
00:07:28.169 --> 00:07:34.289
adopted. So it's not out there
and it's important, the architects of
79

80
00:07:34.289 --> 00:07:42.539
HTTP/2.0 to want to make it very
compatible with HTTP/1.1. Now in the 2.0
80

81
00:07:42.539 --> 00:07:48.780
release a lot of it was focused on
transport performance. We want to improve
81

82
00:07:48.780 --> 00:07:55.349
page load speed by having lower latency
and high throughput. So a lot of what's
82

83
00:07:55.349 --> 00:08:01.050
going on in the 2.0 specification is
down at the network layer. So this is how
83

84
00:08:01.050 --> 00:08:06.180
your web browser is going to be talking
across a network to the web server. The
84

85
00:08:06.180 --> 00:08:12.349
semantics of what we are using as
developers is largely the same. So
85

86
00:08:12.349 --> 00:08:16.620
for the most part, I don't think you're
going to have a lot of changes in how
86

87
00:08:16.620 --> 00:08:21.810
you functionally use it. A lot of it it's
how it's been implemented. Like I said
87

88
00:08:21.810 --> 00:08:26.849
it's all focused on improving
performance of your page load speeds and
88

89
00:08:26.849 --> 00:08:31.410
performing and improving your
performance going across a network. That
89

90
00:08:31.410 --> 00:08:38.640
concludes our talk about the history of
HTTP. It's kind of interesting how HTTP
90

91
00:08:38.640 --> 00:08:43.529
conformed in the 90s there in
conjunction with HTML and egg time where
91

92
00:08:43.529 --> 00:08:47.370
the whole world wide web was born and
how these standards about and got to
92

93
00:08:47.370 --> 00:08:54.350
this point. So the 1.1 standard is pretty
mature now and for web developers,
93

94
00:08:54.350 --> 00:08:58.880
that's effectively the API that we are
using to work within the web now. In the
94

95
00:08:58.880 --> 00:09:02.630
next video, we are going to take a look at
the request methods that we have to work
95

96
00:09:02.630 --> 00:09:07.280
with within the HTTP/2.0 standard and that,
for us as web developers, those are a lot
96

97
00:09:07.280 --> 00:09:11.150
more relevant because those are
actually the verbs and the actions that
97

98
00:09:11.150 --> 00:09:16.250
we are going to be using as we go across
the wire between the client
98

99
00:09:16.250 --> 00:09:21.680
on the web browser or it could be a
restful api on another server to the the
99

100
00:09:21.680 --> 00:09:27.310
back-end server that we are working
where our Spring application is running.
