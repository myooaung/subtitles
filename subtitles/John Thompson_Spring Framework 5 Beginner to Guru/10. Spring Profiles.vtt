WEBVTT
0
1
00:00:04.550 --> 00:00:09.250
Now profiles are probably one of the most powerful features of the Spring Framework.
1

2
00:00:09.270 --> 00:00:15.090
What profiles will allow you to do is to have beans in your configuration that will take on different
2

3
00:00:15.090 --> 00:00:16.370
characteristics.
3

4
00:00:16.380 --> 00:00:23.550
We've talked about like data sources so by default when you have an H2 In-memory database on your class
4

5
00:00:23.550 --> 00:00:25.560
paths, Spring Boot automatically configures that.
5

6
00:00:25.590 --> 00:00:32.520
But what if you wanted to have MySQL capabilities as well so you might want to run a profile
6

7
00:00:32.520 --> 00:00:38.840
for MySQL. In your development environment, you're using H2. In your production environment,
7

8
00:00:38.840 --> 00:00:40.100
you are using MySQL.
8

9
00:00:40.130 --> 00:00:45.860
But you are controlling the MySQL specific beans with a profile.
9

10
00:00:45.870 --> 00:00:52.290
So the profiles are very very powerful thing and probably one of the most commonly used features of
10

11
00:00:52.290 --> 00:00:54.580
Dependency Injection inside the Spring Framework.
11

12
00:00:54.690 --> 00:01:00.900
Because these profiles allow you to control your Spring application in different runtime environments.
12

13
00:01:00.900 --> 00:01:03.330
So very very very powerful stuff here.
13

14
00:01:03.360 --> 00:01:05.550
I'm going to show you a very simple example.
14

15
00:01:05.550 --> 00:01:11.880
Just get our feet wet with profiles, we will be seeing profiles used a lot more as we get deeper into
15

16
00:01:11.880 --> 00:01:12.610
the course.
16

17
00:01:12.690 --> 00:01:15.500
But here we are just going to do a very simple example.
17

18
00:01:15.660 --> 00:01:23.550
Just so you can understand effectively how profiles allow your Spring project to behave differently.
18

19
00:01:23.550 --> 00:01:30.090
So remember going back to that whole inversion control that the Spring container gives us that inversion
19

20
00:01:30.090 --> 00:01:36.390
control is now going to have the capability of a profile and you can set a profile and then using inversion
20

21
00:01:36.390 --> 00:01:42.480
control container and Spring Framework it's going to wire up your application differently depending
21

22
00:01:42.540 --> 00:01:43.780
on the active profiles.
22

23
00:01:44.070 --> 00:01:49.980
Let's go over to IntelliJ and we'll take a look at an example of a profile. Okay. I'm gonna set up a new
23

24
00:01:49.980 --> 00:01:54.590
controller to show you this. I come in here and create a new controller.
24

25
00:01:54.750 --> 00:02:03.740
And I'm going to call this i18N controller. So i18N is a common abbreviation for internationalization.
25

26
00:02:03.750 --> 00:02:09.210
So internationalization begins with an I ends with N and 18 characters long.
26

27
00:02:09.210 --> 00:02:11.460
So that's how we come up with that.
27

28
00:02:11.460 --> 00:02:15.540
And I'm going to go ahead and use this just as an example.
28

29
00:02:15.610 --> 00:02:20.640
We'll have the controller return back two different languages depending on the profile that we have
29

30
00:02:21.090 --> 00:02:21.600
active.
30

31
00:02:22.140 --> 00:02:25.850
So what we want to do is have this take in a greeting service.
31

32
00:02:25.950 --> 00:02:31.400
So let's have this guy take in a greeting service. So we'll do a private final
32

33
00:02:34.160 --> 00:02:35.030
greeting service like
33

34
00:02:37.650 --> 00:02:39.930
so. Then we'll add in a constructor.
34

35
00:02:39.930 --> 00:02:49.450
So Spring will wire this up and then let's do a little set greeting so we'll do public string
35

36
00:02:52.830 --> 00:02:58.760
and we'll take that greeting service.
36

37
00:02:59.020 --> 00:03:00.530
I'll make that say hello.
37

38
00:03:00.650 --> 00:03:05.070
So there are different. Then where you have to annotate this as a controller
38

39
00:03:05.070 --> 00:03:06.920
like so.
39

40
00:03:07.030 --> 00:03:12.160
So now it's such as a little service up for a Spring to be a Spring managed component.
40

41
00:03:12.160 --> 00:03:16.520
And it's going to be expecting to greet have a greeting service injected in.
41

42
00:03:16.660 --> 00:03:19.840
So let's come up here and I'm going to create a new Java class
42

43
00:03:22.510 --> 00:03:30.070
called i18N English service. Say greeting service just to be consistent.
43

44
00:03:39.440 --> 00:03:42.710
That sets that guy up and then let's do one for Spanish as well.
44

45
00:03:54.200 --> 00:03:56.000
And for English, we want to say 
45

46
00:04:02.950 --> 00:04:07.330
In Spanish I believe its Hola Mundo.
46

47
00:04:07.520 --> 00:04:14.570
I have that right. I could be wrong my Spanish is nearly nonexistent. So my apologies if I have that wrong 
47

48
00:04:14.570 --> 00:04:15.700
and you are a Spanish speaker.
48

49
00:04:16.100 --> 00:04:23.140
So what we want to do is say this is a service. Now I'm going to give this qualifier.
49

50
00:04:27.300 --> 00:04:31.600
Gonna call it i18N service. We're going to do the
50

51
00:04:31.600 --> 00:04:34.250
same for this.
51

52
00:04:34.280 --> 00:04:37.290
This one too. So that i18N service now.
52

53
00:04:37.380 --> 00:04:38.920
That's going to be the name of that.
53

54
00:04:39.090 --> 00:04:42.370
And then in my controller here
54

55
00:04:42.370 --> 00:04:43.720
I want to say a qualifier.
55

56
00:04:47.210 --> 00:04:49.330
I just want to make sure I grab that right.
56

57
00:04:49.340 --> 00:04:50.660
i18N service.
57

58
00:04:53.340 --> 00:04:57.950
So now I run this, Spring's not gonna know which one we need to inject there.
58

59
00:04:57.960 --> 00:05:03.050
So there's gonna be some question on that because there's two of them there. I got mistake in that.
59

60
00:05:03.120 --> 00:05:10.550
So we want to see a return. Let's come down there and I'll show you the mistake right now. We'll come
60

61
00:05:10.550 --> 00:05:28.710
up here and we'll add this towards the top.
61

62
00:05:28.720 --> 00:05:33.200
So now if I run this, Spring is not gonna know which one to autowire in.
62

63
00:05:33.220 --> 00:05:42.100
Because we have two of them to defined, both of them are at that name. We can see that we have
63

64
00:05:42.100 --> 00:05:43.000
a conflict there.
64

65
00:05:43.000 --> 00:05:44.810
So not compatible.
65

66
00:05:44.890 --> 00:05:51.730
So we have two two beans of the same name and Spring's not too happy about that because they are both
66

67
00:05:51.730 --> 00:05:53.550
available within this context.
67

68
00:05:54.040 --> 00:05:57.370
So what we can do here is come up here and say
68

69
00:06:01.010 --> 00:06:06.100
we'll do profile EN and this one we'll give profile
69

70
00:06:09.680 --> 00:06:11.270
ES.
70

71
00:06:11.470 --> 00:06:19.180
Now we do need to change one additional thing. I'm going to come into resources application.properties bring
71

72
00:06:19.210 --> 00:06:23.860
profiles active and can see IntelliJ is smart enough to see that we've already declared EN and
72

73
00:06:23.910 --> 00:06:24.240
ES.
73

74
00:06:24.250 --> 00:06:27.200
So let's first look at EN.
74

75
00:06:27.480 --> 00:06:31.890
Now let's go ahead and run this. Because we have an active profile,
75

76
00:06:31.950 --> 00:06:38.490
what's going to happen is that because ES is not available we're not going to get that other bean
76

77
00:06:38.490 --> 00:06:40.460
loaded into this context.
77

78
00:06:40.650 --> 00:06:47.070
So you can see that it wired up hello world EN. You can see that right at the top of our output.
78

79
00:06:47.100 --> 00:06:52.320
Now if I changes this to ES and run it again,
79

80
00:06:56.140 --> 00:07:00.610
we can see that the Spanish flavor of the Bean was wired up.
80

81
00:07:00.610 --> 00:07:05.920
So when I don't have an active profile, we can see that Spring is not happy about that because it doesn't
81

82
00:07:05.920 --> 00:07:13.450
know which one we want. But as long as I set a profile active of EN or ES now Spring is able to determine
82

83
00:07:13.840 --> 00:07:21.610
which bean to load into the context and because the other bean the one that isn't active that is a
83

84
00:07:21.610 --> 00:07:24.100
name created into the context so there is no conflict.
84

85
00:07:24.520 --> 00:07:30.100
So Spring will if the profile is not active, Spring will completely ignore those beans and not load them into
85

86
00:07:30.100 --> 00:07:31.510
the context.
86

87
00:07:31.510 --> 00:07:38.470
So just to recap what we did in this video I added in our internationalization controller which takes
87

88
00:07:38.470 --> 00:07:44.760
a greeting service like everybody else does but when I have it having it take in a qualifier of a 
88

89
00:07:44.790 --> 00:07:51.910
i18N service. I added in two services with that and with the service annotation I'm naming it in the
89

90
00:07:51.910 --> 00:08:00.760
i18 service and then one I set up a profile of EN and the other has profile of ES and then using
90

91
00:08:00.820 --> 00:08:02.350
Spring active profiles.
91

92
00:08:02.350 --> 00:08:07.570
That's how I'm controlling the Spring Context as to which one of these two beans gets loaded into
92

93
00:08:07.570 --> 00:08:08.710
the context that runtime.
