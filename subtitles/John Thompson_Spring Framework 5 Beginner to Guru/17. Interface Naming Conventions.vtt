WEBVTT
0
1
00:00:01.200 --> 00:00:05.490
Alright! In this video, I want to talk
about Interface Naming Conventions, the
1

2
00:00:05.490 --> 00:00:10.710
best practices around naming because I
get a lot of questions as we get into
2

3
00:00:10.710 --> 00:00:13.709
the Dependency Injection.
How should I name my interfaces? How
3

4
00:00:13.709 --> 00:00:18.270
should I name the implementation of the
interfaces? So I want to give you some
4

5
00:00:18.270 --> 00:00:22.740
general rules of thumb. The interface
should be a good object name. For example,
5

6
00:00:22.740 --> 00:00:26.760
if you look at Java's List interface,
there's literally dozens of
6

7
00:00:26.760 --> 00:00:30.750
implementations of the list interface
like ArrayList, LinkedList,
7

8
00:00:30.750 --> 00:00:34.620
CheckedList, SingletonList. I mean, there's
stuff out there have never even heard of.
8

9
00:00:34.620 --> 00:00:40.079
I'm not sure what they do, to be honest.
These are all good names for it.
9

10
00:00:40.079 --> 00:00:44.550
The list, when you implement the list, you
really don't care what it is. You're just
10

11
00:00:44.550 --> 00:00:48.810
asking for a list object and an
implementation of it so you don't get
11

12
00:00:48.810 --> 00:00:52.980
down to the nitty-gritty details of the
difference between an ArrayList and a
12

13
00:00:52.980 --> 00:00:56.460
LinkedList. You don't care when you're
using the list interface as it should be.
13

14
00:00:56.460 --> 00:01:01.500
Some people like to start their
interfaces with the letter 'I' and I'm
14

15
00:01:01.500 --> 00:01:05.009
saying NO IList. I think this is a dot
in that community thing where they
15

16
00:01:05.009 --> 00:01:09.600
prefix the interface name with an 'I' so
you know that it's an interface, so it
16

17
00:01:09.600 --> 00:01:14.159
gives you a visual data interface. The
Java folks really don't like that and we
17

18
00:01:14.159 --> 00:01:18.600
don't like to see that 'I' in front of 
interface name. So when you name the
18

19
00:01:18.600 --> 00:01:22.319
interface, go ahead and make a good
object name. That's something that
19

20
00:01:22.319 --> 00:01:25.819
you're going to be utilizing. Now let's
talk about the implementation of that.
20

21
00:01:25.819 --> 00:01:31.350
When there is just one implementation,
it's generally acceptable to use that
21

22
00:01:31.350 --> 00:01:36.060
Interface and then Impl. Going back
to lists, you could use the list Impl,
22

23
00:01:36.060 --> 00:01:42.389
Impl for implementation. This is very
accepted within the Java community. I've
23

24
00:01:42.389 --> 00:01:46.499
had students come back and say hey
you're using Impl rather than something
24

25
00:01:46.499 --> 00:01:50.429
that makes sense.
Generally, if you only have one, it's okay
25

26
00:01:50.429 --> 00:01:55.979
to use Impl, so if you don't see a need
for one error to make a distinction
26

27
00:01:55.979 --> 00:02:01.799
there, perfectly fine to use just Impl.
Largely accepted within the community.
27

28
00:02:01.799 --> 00:02:06.929
However, if you're going to have multiple
implementations of that interface,
28

29
00:02:06.929 --> 00:02:12.239
then, that name should indicate the
difference of that. So this is very
29

30
00:02:12.239 --> 00:02:15.060
important. Impl, if you're only going
to have one,
30

31
00:02:15.060 --> 00:02:19.470
very common within Spring to just have
one implementation of an interface and
31

32
00:02:19.470 --> 00:02:23.100
then when you get to testing, you're
gonna be using that interface to
32

33
00:02:23.100 --> 00:02:26.790
generate mocks or stubs and things like
that for your test framework, then
33

34
00:02:26.790 --> 00:02:30.570
maybe you want to give those
implementations a name or just happen to
34

35
00:02:30.570 --> 00:02:34.170
use a Mock and where you really don't
name it, that's perfectly fine. But
35

36
00:02:34.170 --> 00:02:38.670
the key point is, where you just have one,
Impl is fine. If you have more than
36

37
00:02:38.670 --> 00:02:43.290
one, then give something in the name of
it to indicate the difference. I'm
37

38
00:02:43.290 --> 00:02:50.190
gonna jump over to IntelliJ now and show
you an example of this in action. Okay, I
38

39
00:02:50.190 --> 00:02:54.270
have the pet clinic app. I am not going
to save what I'm showing here to source
39

40
00:02:54.270 --> 00:02:59.750
code but what I want to do is create a
Java Class. Let's say SomeController
40

41
00:02:59.750 --> 00:03:06.240
like so. We're gonna go ahead and add
that so I'm gonna have... I don't want to
41

42
00:03:06.240 --> 00:03:12.000
do that. I'm gonna be deleting these so I
have SomeController and then let's
42

43
00:03:12.000 --> 00:03:15.170
create Java Jlass. I'm going to 
make this an
43

44
00:03:17.030 --> 00:03:24.090
interface like
so. Oops I added that out of a
44

45
00:03:24.090 --> 00:03:28.079
habit. This is not going into Git. I'm
just doing this for demonstration
45

46
00:03:28.079 --> 00:03:39.629
purposes. So I might say private final 
MyService myService like so. I'm just going to
46

47
00:03:39.629 --> 00:03:44.700
hit that and add in a constructor
parameter so that's automatically going to
47

48
00:03:44.700 --> 00:03:49.650
populate that. So now, what my controller
my controller name SomeControllers
48

49
00:03:49.650 --> 00:03:55.379
asking for a class that implements 
MyService. So now, if I come over to
49

50
00:03:55.379 --> 00:04:01.919
MyService and I'm gonna hit alt
enter to Implement the Interface, now I
50

51
00:04:01.919 --> 00:04:07.620
could do an implementation like this.
I'm perfectly valid where I'm doing the
51

52
00:04:07.620 --> 00:04:12.240
Impl. But what I'm going to be showing
you coming up in the pet clinic, if I
52

53
00:04:12.240 --> 00:04:18.859
wanted to do this, what I might want to
do is let's Refactor this.
53

54
00:04:19.299 --> 00:04:21.690
Rename
54

55
00:04:26.220 --> 00:04:32.270
See if I can generate two of these.
55

56
00:04:34.759 --> 00:04:39.449
So it's coming up to MyServiceImpl
and let's say
56

57
00:04:39.900 --> 00:04:42.860
Jpa.
57

58
00:04:43.510 --> 00:04:50.140
In the naming, I'm doing JpaImpl just
for illustrative purposes. So what I'm
58

59
00:04:50.140 --> 00:04:54.340
going to be doing coming up in the pet
clinic application, I'm going to implement
59

60
00:04:54.340 --> 00:04:59.350
services where we can get objects from a
hashmap at runtime and then later we're
60

61
00:04:59.350 --> 00:05:04.240
going to start using a database. I want
to use Spring Profiles because what I
61

62
00:05:04.240 --> 00:05:09.100
want to be able to do is use Spring
Profiles as to how this controller gets
62

63
00:05:09.100 --> 00:05:13.900
wired either with an implementation of
using a hashmap for the objects that
63

64
00:05:13.900 --> 00:05:19.330
are being returned from the service or I
want to be using Jpa to return objects
64

65
00:05:19.330 --> 00:05:22.870
from a database so these are two
implementations but just to get your
65

66
00:05:22.870 --> 00:05:26.680
head around how this is being worked,
I've created three four different
66

67
00:05:26.680 --> 00:05:31.870
objects here. I have my controller that
wants an implementation of MyService,
67

68
00:05:31.870 --> 00:05:37.810
so MyService is the interface and now I'm
going to allow Spring to wire in either
68

69
00:05:37.810 --> 00:05:44.140
annotation of the hashmap implementation
or the JPA implementation. I've used
69

70
00:05:44.140 --> 00:05:50.650
Impl, some people would say just use
Jpa and hashmap. I'm not going to get down
70

71
00:05:50.650 --> 00:05:54.180
to that nitty-gritty here. I'm using
these as illustrative purposes
71

72
00:05:54.180 --> 00:06:00.700
because now if I look at the concrete
classes of MyService hashmap Impl, I
72

73
00:06:00.700 --> 00:06:04.960
know that this is going to be related to
the implementing that service using a
73

74
00:06:04.960 --> 00:06:10.240
hashmap. Likewise with Jpa, I know that's
going to be implementing a service with
74

75
00:06:10.240 --> 00:06:14.830
Jpa. But the way I like to think about it
is when I'm working with the controller,
75

76
00:06:14.830 --> 00:06:20.200
I don't want to care how that service is
implemented. All I wanna do is ask the
76

77
00:06:20.200 --> 00:06:25.750
Framework, Springs Inversion of Control
container, IOC container to implement or
77

78
00:06:25.750 --> 00:06:29.620
inject an implementation of that.
We're going to use Spring Configuration as
78

79
00:06:29.620 --> 00:06:35.080
to how to inject that, so that this gives
us a lot of versatility but from a
79

80
00:06:35.080 --> 00:06:39.940
standpoint of developing and where I
care about things, I don't care about the
80

81
00:06:39.940 --> 00:06:45.040
implementation of MyService. I'm going to
ask Spring to determine that. Now you
81

82
00:06:45.040 --> 00:06:48.160
could say I have two implementations
there. It's clear from their naming. I
82

83
00:06:48.160 --> 00:06:52.570
hope this clears this up. There's a lot
of opinions on this. I'm giving you my
83

84
00:06:52.570 --> 00:06:57.050
opinion. It may count or others, but I do
see this generally
84

85
00:06:57.050 --> 00:07:01.220
accepted in the industry, so just to
recap, what we're talking about for
85

86
00:07:01.220 --> 00:07:06.800
naming interfaces and implementations, if
it's the interface, use a valid object
86

87
00:07:06.800 --> 00:07:10.639
name so you can see here I'm
implementing MyService so that's a
87

88
00:07:10.639 --> 00:07:15.800
valid object name. That is very common.
Just find a good object naming conventions
88

89
00:07:15.800 --> 00:07:21.020
there and then for the implementation, if
there's just one, perfectly acceptable to
89

90
00:07:21.020 --> 00:07:26.599
use Impl. If there's more than one, use
something in the name of it to indicate
90

91
00:07:26.599 --> 00:07:31.490
the difference of the functionality so
that you know well. In this example, one
91

92
00:07:31.490 --> 00:07:36.169
is a hashmap implementation and the
other is a Jpa implementation so give
92

93
00:07:36.169 --> 00:07:40.280
people something to go off of in your
naming convention. So always remember when
93

94
00:07:40.280 --> 00:07:46.400
you are coding, code as read by others a
lot more than it is written, so there's a
94

95
00:07:46.400 --> 00:07:50.539
lot more time studying and reading what
code it does, so when you're on a team,
95

96
00:07:50.539 --> 00:07:55.520
help out your team members by naming
stuff that makes sense in ways that make
96

97
00:07:55.520 --> 00:07:58.659
sense in this intuitive.
