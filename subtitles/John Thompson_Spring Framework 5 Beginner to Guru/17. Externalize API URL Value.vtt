WEBVTT
0
1
00:00:04.549 --> 00:00:10.500
Alright. One thing that's been bugging me
is I've set up the URL for our REST
1

2
00:00:10.500 --> 00:00:15.030
controllers here and sometimes you wanna externalize that. But the url value is
2

3
00:00:15.030 --> 00:00:19.020
actually something pretty static. It's
not gonna be changing that much. But
3

4
00:00:19.020 --> 00:00:22.199
it's also something that you need to
reference quite a bit. So there's two
4

5
00:00:22.199 --> 00:00:25.859
ways that we could do this. We could set
it in properties file. I'll show you
5

6
00:00:25.859 --> 00:00:32.009
we could copy this real quick, and we
could have done a Spring expression
6

7
00:00:32.009 --> 00:00:40.860
language from a properties and just come
in here and setting that in like for
7

8
00:00:40.860 --> 00:00:44.550
value some url.value. So we could set
that up in a properties file and
8

9
00:00:44.550 --> 00:00:48.989
externalize that. But you really don't
need to have that much control over it.
9

10
00:00:48.989 --> 00:00:52.500
It's not something that you're gonna
be setting at run time. It's something that's
10

11
00:00:52.500 --> 00:00:55.590
gonna be pretty static, it's that URL
value. So it's not gonna change a lot but
11

12
00:00:55.590 --> 00:00:59.940
you are gonna be referencing in a lot
of different spots. So we had one typo
12

13
00:00:59.940 --> 00:01:05.460
error there. So if I did this, the Spring
context would load it out of the
13

14
00:01:05.460 --> 00:01:09.560
properties file, but if we do this, then
all our tests are gonna change from
14

15
00:01:09.560 --> 00:01:14.220
real nice way unit tests to
integration tests because we will have
15

16
00:01:14.220 --> 00:01:18.270
to bring up the Spring Context to go out
and get that. So I chose to come over
16

17
00:01:18.270 --> 00:01:24.479
here and just create a static final
String for the BASE_URL. Now, I'm
17

18
00:01:24.479 --> 00:01:30.299
referencing that. And that does have some
advantages here for us, especially coming
18

19
00:01:30.299 --> 00:01:35.189
over here to our CustomerServiceImpl. Now when I come in here, I
19

20
00:01:35.189 --> 00:01:40.320
refactor this quite a bit. I have a
common function now, a common method, I
20

21
00:01:40.320 --> 00:01:47.159
should say, to get the URL. And now, I have
that BASE_URL defined in one spot. Rather
21

22
00:01:47.159 --> 00:01:54.750
than before, see if I can do a compare
here, so you can see all the changes here.
22

23
00:01:54.750 --> 00:01:59.670
We had that URL value all over the place
so that that string was repeated
23

24
00:01:59.670 --> 00:02:04.579
numerous times. So if we ever did change
that, that definitely give us a problem
24

25
00:02:04.579 --> 00:02:09.300
because that String is defined all over
the place. So this was
25

26
00:02:09.300 --> 00:02:12.660
something that was bad. It was a code
smell that did not like it, so I
26

27
00:02:12.660 --> 00:02:15.420
refactored it.
So now, we have a much much cleaner
27

28
00:02:15.420 --> 00:02:21.030
implementation for that url value.
Its defined in one spot and work it. So
28

29
00:02:21.030 --> 00:02:26.250
if it ever changes, we only have one spot
to change it in. So, I'm pretty happy with
29

30
00:02:26.250 --> 00:02:31.349
this and we can see that our tests
are now using that String
30

31
00:02:31.349 --> 00:02:37.890
value. We're using that base URL out of
there, and obviously, our customer test is
31

32
00:02:37.890 --> 00:02:42.870
also using it. So now, we have a
single spot that touch URL values to
32

33
00:02:42.870 --> 00:02:46.739
find it, and so that's like the place of
truth. So I'm pretty happy with this
33

34
00:02:46.739 --> 00:02:50.459
refactoring. Let's go ahead and I'll show
you that what can run all our tests.
34

35
00:02:50.459 --> 00:02:56.730
They will still run positively. So you
can see that the tests are passing.
35

36
00:02:56.730 --> 00:03:00.540
This is a good habit because this was
definitely a code smell that I was
36

37
00:03:00.540 --> 00:03:04.920
showing you throughout the course on the
REST interfaces. So defining that into a
37

38
00:03:04.920 --> 00:03:09.030
static final variable, something that's
gonna be defined in one spot
38

39
00:03:09.030 --> 00:03:14.239
and not gonna change very often. So
it's a good use case for that.
