WEBVTT
0
1
00:00:04.220 --> 00:00:10.230
Okay, one little problem with our test on
the controller right now, is we are
1

2
00:00:10.230 --> 00:00:15.210
testing that it does provide an
attribute of recipes and it does get a
2

3
00:00:15.210 --> 00:00:20.070
set there. But we're not actually doing
any verification of that set. So what we
3

4
00:00:20.070 --> 00:00:25.230
wanna do here, or what we can do I
should say is an argument capture. So
4

5
00:00:25.230 --> 00:00:33.170
let's set up our test a little bit more
here. And we'll say given,
5

6
00:00:43.870 --> 00:00:48.150
and we're gonna create a new HashSet here.
6

7
00:00:59.030 --> 00:01:18.180
Let's add in two recipes. Let's make this
a little more interesting. Now we wanna
7

8
00:01:18.180 --> 00:01:20.720
say when().
8

9
00:01:29.090 --> 00:01:35.760
We'll see the syntax here. I need to cheat
sometimes, when recipeService
9

10
00:01:35.760 --> 00:01:47.420
getRecipes(). Okay then return our recipes Set
10

11
00:01:58.790 --> 00:02:04.410
and this is a standard syntax of a
behavior driven test. So we're
11

12
00:02:04.410 --> 00:02:18.540
saying given when then. So we wanna
create an argument matcher as well, so do
12

13
00:02:18.540 --> 00:02:20.870
that up here.
13

14
00:02:56.220 --> 00:03:03.030
So line here on line 47 creates an
ArgumentCaptor for the class Set. And
14

15
00:03:03.030 --> 00:03:17.680
missing equals there. So now we wanna
come down to the verify line and rather
15

16
00:03:17.680 --> 00:03:23.830
than anySet(), we're gonna replace
that with the argumentCaptor and
16

17
00:03:23.830 --> 00:03:33.360
against a capture() what is passed into
that. Now we can come down and say Set,
17

18
00:03:50.050 --> 00:03:56.490
say argumentCaptor.getvalue()
18

19
00:03:56.640 --> 00:04:12.310
and let's do assertEquals, and we'll say
setInController.size(). So we just
19

20
00:04:12.310 --> 00:04:16.690
verify the size of that Set. We wanna make sure that we get back a Set with
20

21
00:04:16.690 --> 00:04:20.709
two items in it. So let's go ahead
and run this now and we'll verify that
21

22
00:04:20.709 --> 00:04:31.270
it runs properly and we only got one, so
not what we expected. So let's take a
22

23
00:04:31.270 --> 00:04:37.930
little closer look at this and what I am
going to do is come in here and I'm
23

24
00:04:37.930 --> 00:04:45.480
gonna put a debug on that and let's
take a peek at the debugger on this. And
24

25
00:04:45.480 --> 00:04:52.480
we can see that our recipes is actually
only one because I added in two recipes
25

26
00:04:52.480 --> 00:04:57.370
and we have the equals function on there. They're actually technically equal so
26

27
00:04:57.370 --> 00:05:02.020
being the second object essentially was not merged into
27

28
00:05:02.020 --> 00:05:11.910
the Set. So we can easily fix that. That's
a problem in our model here
28

29
00:05:50.510 --> 00:06:01.640
and IntelliJ is having a problem with
the getters and setters on this. And that
29

30
00:06:01.640 --> 00:06:08.050
this is a problem without using Project
Lombok sometimes. So this should run
30

31
00:06:22.509 --> 00:06:29.150
and now we can see that it's passing
correctly. So when you run into a problem
31

32
00:06:29.150 --> 00:06:35.449
like this, because right now in IntelliJ,
this is a problem with Project Lombok.
32

33
00:06:35.449 --> 00:06:39.830
The method is actually there but
IntelliJ thinks that it is not and
33

34
00:06:39.830 --> 00:06:44.870
you'll see this occasionally
and what I need to do is come up here
34

35
00:06:44.870 --> 00:06:51.409
and probably do a Invalidate Caches / Restart and then we'll get that re-index
35

36
00:06:51.409 --> 00:06:54.949
properly. Actually there's a setting. I
can double check right now because you
36

37
00:06:54.949 --> 00:07:00.969
may have to do this at home. In the
compiler.
37

38
00:07:13.780 --> 00:07:19.500
Under the compiler, we're gonna go to
Annotation Processors and Enable
38

39
00:07:19.500 --> 00:07:27.790
Annotation processing. Apply, say OK and
that now should clear that up. So I'll
39

40
00:07:27.790 --> 00:07:38.860
rebuild the project. Okay, IntelliJ is still
not picking that up. So if you do see
40

41
00:07:38.860 --> 00:07:43.360
this you do have to come over here and
do an Invalidate Caches / Restart and then
41

42
00:07:43.360 --> 00:07:49.900
that should be happy. But you can see how
IntelliJ isn't properly saying that 
42

43
00:07:49.900 --> 00:07:54.460
setId() isn't there but it is there on the
compiled class because
43

44
00:07:54.460 --> 00:08:00.190
our test is now passing. Because we did
say expected 2 and on the second
44

45
00:08:00.190 --> 00:08:05.650
object, we are setting an ID value. So now
we'll run it in debug so you can see
45

46
00:08:05.650 --> 00:08:15.730
this again. I'm coming here, debug and now
we can see that the recipes object
46

47
00:08:15.730 --> 00:08:20.530
actually has two because now we have two
different objects and now our Set is
47

48
00:08:20.530 --> 00:08:26.160
proper and our assert will work properly.
