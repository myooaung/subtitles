WEBVTT
0
1
00:00:02.190 --> 00:00:06.250
Okay in this video we are going to take
a look at setting up Spring Boot with
1

2
00:00:06.250 --> 00:00:09.490
Cassandra. So Cassandra is a very popular in memory
2

3
00:00:09.490 --> 00:00:15.599
database that is blazing fast and so
pretty common to use Spring with it and
3

4
00:00:15.599 --> 00:00:19.779
in this we're going to take a look at
setting up a pretty simple Spring Boot
4

5
00:00:19.779 --> 00:00:23.679
application. All the source code that
you're going to see in this video is
5

6
00:00:23.679 --> 00:00:27.060
available on GitHub out of my repository
GitHub
6

7
00:00:27.060 --> 00:00:29.600
springframeworkguru and the repository is
7

8
00:00:29.600 --> 00:00:35.019
/spring-boot-cassandra-example just like I have on
8

9
00:00:35.019 --> 00:00:38.109
the screen there so let's talk over to IntelliJ and start stepping
9

10
00:00:38.109 --> 00:00:44.019
through this example. You can see here
I've set up a few properties for
10

11
00:00:44.019 --> 00:00:48.200
Cassandra. Cassandra does work on off a
key space, it's kind of sort of like a
11

12
00:00:48.579 --> 00:00:53.410
schema if you're coming from a
relational database. So I am calling my
12

13
00:00:53.410 --> 00:01:01.089
keyspace guru_keyspace, localhost and port 9042 is fairly
13

14
00:01:01.089 --> 00:01:08.650
standard and this line 8 the default
action create does not exist I was not
14

15
00:01:08.650 --> 00:01:12.940
able to get that working properly but
I'll show you exactly how I did get it
15

16
00:01:12.940 --> 00:01:17.260
working here in the Cassandra
configuration so this is a important
16

17
00:01:17.260 --> 00:01:23.230
thing of getting things set up here for
us. So I am setting up a final key String
17

18
00:01:23.230 --> 00:01:30.760
here and it was here on line 24 that I
got that CREATE_IF_NOT_EXISTS for us to
18

19
00:01:30.760 --> 00:01:37.570
work for the schema objects. Now on line
29 this is where I actually create the
19

20
00:01:37.570 --> 00:01:43.390
keyspace and I'm using Spring to do
this and on line 37 I'm also dropping
20

21
00:01:43.390 --> 00:01:49.030
the keyspace when Spring stops and this
is a optional behavior you do not have
21

22
00:01:49.030 --> 00:01:54.430
to create it or drop it but if we are
using more of a
22

23
00:01:54.430 --> 00:01:58.240
permanent installation of Cassandra you
probably wouldn't need to do this at all
23

24
00:01:58.240 --> 00:02:04.030
but I am doing it for testing, so I am
going to create a keyspace and also
24

25
00:02:04.030 --> 00:02:09.069
create my domain objects on the fly
using this so but if you had a permanent
25

26
00:02:09.069 --> 00:02:13.330
installation of Cassandra you might not
be doing this at all, but this is the
26

27
00:02:13.330 --> 00:02:18.280
configuration for Cassandra and you can see also down on line 47 that's
27

28
00:02:18.280 --> 00:02:23.019
another important one. I'm telling it
where the base packages are for the
28

29
00:02:23.019 --> 00:02:29.470
entities so let's take a look at the
Entity so looks a lot like JPA. I am
29

30
00:02:29.470 --> 00:02:35.769
giving it a table name of products and
pretty simple entity that we are working
30

31
00:02:35.769 --> 00:02:42.190
with so it gets a UUID, a true UUID
object for the primary key that's going
31

32
00:02:42.190 --> 00:02:47.319
to be registered inside of Cassandra and
then we have description, price and image
32

33
00:02:47.319 --> 00:02:54.160
Url. Just a couple simple String and
then a BigDecimal for the price. Now
33

34
00:02:54.160 --> 00:02:59.530
this is kind of a domain driven design
very simple CRUD operation that we are
34

35
00:02:59.530 --> 00:03:06.239
talking about and to work with this I've
set up a CrudRepository
35

36
00:03:06.239 --> 00:03:11.859
using Product and UUID and this is
right out of Spring data so I am using
36

37
00:03:11.859 --> 00:03:19.569
Spring Data for Cassandra and by doing
that I only have to provide the Product
37

38
00:03:19.569 --> 00:03:25.030
Repository interface and at runtime
Spring Data is going to provide the
38

39
00:03:25.030 --> 00:03:29.799
runtime implementation of this for us so we
don't have to write all that code Spring
39

40
00:03:29.799 --> 00:03:34.690
Data is going to be handling all the
repository functions and for us we just
40

41
00:03:34.690 --> 00:03:40.540
need basic CRUD functions on this. Now in
my application I like to wrap that up in
41

42
00:03:40.540 --> 00:03:45.010
a ProductService so I have a basic CRUD
interface so I'm going to be using with
42

43
00:03:45.010 --> 00:03:49.269
my controllers remember if you're doing
Spring and dependency injection, always a
43

44
00:03:49.269 --> 00:03:53.949
good habit to be coding to an interface
and we can come over take a look at the
44

45
00:03:53.949 --> 00:03:59.949
ProductService implementation. You can
see there on line 20 I have declared the
45

46
00:03:59.949 --> 00:04:05.470
ProductRepository and I am using
constructor based dependency injection
46

47
00:04:05.470 --> 00:04:12.730
there on line 24 so I am taking in the
Spring Data provided instance of the
47

48
00:04:12.730 --> 00:04:18.459
ProductRepository and then I also have
a type converter of ProductFormTo
48

49
00:04:18.459 --> 00:04:23.260
Product. So I have a ProductForm in this
project which is a command object or
49

50
00:04:23.260 --> 00:04:28.510
some people like to call it a backing
bean. So I've got that being injected to
50

51
00:04:28.510 --> 00:04:31.660
do some simple
type conversions for us and you can see
51

52
00:04:31.660 --> 00:04:35.140
I'm not going to step through each one
of these but like we have a Product
52

53
00:04:35.140 --> 00:04:38.710
Repository delete method and so all
these are implemented to give us basic
53

54
00:04:38.710 --> 00:04:44.770
CRUD operations for products. Now this
this service implementation gets
54

55
00:04:44.770 --> 00:04:50.740
injected into a Spring MVC Controller,
normal Spring MVC Controller no big
55

56
00:04:50.740 --> 00:04:55.000
mystery here at all using pretty
standard stuff as far as Request
56

57
00:04:55.000 --> 00:05:00.520
Mapping and how I'm doing that the
posts and saves this is using Thymeleaf
57

58
00:05:00.520 --> 00:05:05.470
so I am using Thymeleaf here so bringing
up an example here now I do have a whole
58

59
00:05:05.470 --> 00:05:09.640
course on Thymeleaf and Spring so I'm
not going to dive into this too much I
59

60
00:05:09.640 --> 00:05:13.390
also have some free content up on my
youtube channel around Thymeleaf and
60

61
00:05:13.390 --> 00:05:19.750
Spring but this is a Thymeleaf template
that we're going to utilize. Now I am
61

62
00:05:19.750 --> 00:05:26.200
going to go ahead and start this, so I'm
going to run this application and what
62

63
00:05:26.200 --> 00:05:33.910
Spring is starting up I am running
Cassandra in Docker and so I've run up
63

64
00:05:33.910 --> 00:05:38.380
right to the console, not running in the
background and you can see here we have
64

65
00:05:38.380 --> 00:05:43.780
some chatter here about initializing the
keyspace, guru_ keyspace and products so
65

66
00:05:43.780 --> 00:05:47.650
we're going to get some chatter out of
this let's take a look at the web
66

67
00:05:47.650 --> 00:05:53.350
application, do a quick refresh here
there is no product to view. Let's go
67

68
00:05:53.350 --> 00:06:01.780
ahead and create one and we'll just give
it a simple URL so there's no validation
68

69
00:06:01.780 --> 00:06:10.180
going on here it's going to take it and
I got an error. Okay I've gone
69

70
00:06:10.180 --> 00:06:15.010
ahead and did a little research on what
was going on here and the problem was is
70

71
00:06:15.010 --> 00:06:20.020
that Cassandra does a time-based UUID.
So it kind of tell me right there ML
71

72
00:06:20.020 --> 00:06:25.990
version and by default Spring Data is
going to be using a randomly generated
72

73
00:06:25.990 --> 00:06:31.270
UUID which fails a validation of a
time based UUID so quick search on that
73

74
00:06:31.270 --> 00:06:36.460
I'm setting it to a regular UUID here
for the Cassandra driver and that should
74

75
00:06:36.460 --> 00:06:40.280
get us up and going again. I'm going to
restart things so
75

76
00:06:40.280 --> 00:06:48.440
you know, stop Spring application come
over here, I'm stopping Cassandra and I
76

77
00:06:48.440 --> 00:06:53.660
am running it via Docker in a container
so I'm going to bring that back up so if
77

78
00:06:53.660 --> 00:06:57.260
you're not playing with Docker yet you
should be and I do have a class coming
78

79
00:06:57.260 --> 00:07:01.310
out specifically on Docker. So a lot of
new stuff you can do with Docker so
79

80
00:07:01.310 --> 00:07:09.230
Cassandra is almost back up and he is up
80

81
00:07:09.230 --> 00:07:14.350
now so let's come back over to IntelliJ
and try this one more time go ahead
81

82
00:07:14.350 --> 00:07:20.540
start the Spring Boot application and
that's going to come up pretty quick so
82

83
00:07:20.540 --> 00:07:24.530
we can see that that is back up, now
let's go ahead and see if we can.
83

84
00:07:24.530 --> 00:07:32.870
I'll do it refresh here, cancel that, I
don't want to repost so no products in
84

85
00:07:32.870 --> 00:07:41.600
the database. Let's see if we go ahead
and create one now and there that was
85

86
00:07:41.600 --> 00:07:46.250
the problem so we are able to get
products, let's go ahead and step through
86

87
00:07:46.250 --> 00:07:56.600
this here's a list of products let's
edit him, just prove that we can edit and
87

88
00:07:56.600 --> 00:08:02.330
we see that the values there are infact
changing. So not too much on the web
88

89
00:08:02.330 --> 00:08:07.310
front-end here, pretty simple web
application but again to just a recap
89

90
00:08:07.310 --> 00:08:14.930
what I changed there, was this Cassandra
type so there's a time based UUID and a
90

91
00:08:14.930 --> 00:08:20.840
regular system-generated UUID. So
Cassandra is a little sensitive on that
91

92
00:08:20.840 --> 00:08:25.160
I'm not going to get into the theory of
generating random UUIDs, obviously the
92

93
00:08:25.160 --> 00:08:30.050
time-based one is probably going to be a
little bit more finite but I'm not
93

94
00:08:30.050 --> 00:08:35.060
going to get into that, the biggest thing
was to set it up and regular you with the
94

95
00:08:35.060 --> 00:08:40.580
time which is the default of
Cassandra so just as a quick recap of
95

96
00:08:40.580 --> 00:08:45.440
the Cassandra configuration, a few
properties here, Spring Boot is going to
96

97
00:08:45.440 --> 00:08:50.240
provide you a variety of properties but
you do want to set up your keyspace
97

98
00:08:50.240 --> 00:08:56.530
your localhost port 9042
on line 8, and schema actually was not
98

99
00:08:56.530 --> 00:09:01.900
getting to work until I got into the
Cassandra configuration and explicitly
99

100
00:09:01.900 --> 00:09:07.690
set that on line 24 as a scheming action
to create if not exist and what this is
100

101
00:09:07.690 --> 00:09:12.070
going to do just to recap, is if the
product table doesn't exist inside of
101

102
00:09:12.070 --> 00:09:16.450
Cassandra, Spring Data is going to go
ahead and create it but in this way
102

103
00:09:16.450 --> 00:09:22.600
we have Cassandra running in a Docker
container. Vanilla Alda box Cassandra no
103

104
00:09:22.600 --> 00:09:28.540
configuration done to it. And Spring Boot
is or Spring Boot/ Spring Data JPA is
104

105
00:09:28.540 --> 00:09:33.070
giving us everything that we need to
connect to Cassandra create our keyspace
105

106
00:09:33.070 --> 00:09:38.380
and create our tables inside
Cassandra very much like it would do
106

107
00:09:38.380 --> 00:09:45.640
with Hibernate. So pretty nice
setup here and again I'm here on line 38
107

108
00:09:45.640 --> 00:09:49.540
just as a reminder this is dropping the
whole keyspace so something you
108

109
00:09:49.540 --> 00:09:51.850
probably don't want in a production
system.
109

110
00:09:51.850 --> 00:09:56.980
I imagine bad things could happen from
that but again this is just a plane test
110

111
00:09:56.980 --> 00:10:02.320
and I am by no means an expert on
Cassandra but it is a very neat
111

112
00:10:02.320 --> 00:10:06.640
technology and you can see how easy it
is to get Spring Data and Spring Boot
112

113
00:10:06.640 --> 00:10:10.710
talking to Cassandra.
