WEBVTT
0
1
00:00:04.460 --> 00:00:11.340
Alright, let's recap the assignment just
quickly. We want to assign our great two
1

2
00:00:11.340 --> 00:00:15.780
new recipes. Perfect guacamole and spicy
grilled chicken tacos from simply
2

3
00:00:15.780 --> 00:00:20.279
recipes.com. We're going to use that as
an example for our source code, our
3

4
00:00:20.279 --> 00:00:24.900
source of data. So we want recreate those
recipes in our little Recipe application
4

5
00:00:24.900 --> 00:00:32.219
and to do so, we are going to have to add
in unit of measures to the data.sql. We
5

6
00:00:32.219 --> 00:00:36.930
want to use the Bootstrap class like we
did in the beginning of the course to
6

7
00:00:36.930 --> 00:00:42.510
create the recipes on startup. Then we're
going to add in a service layer to
7

8
00:00:42.510 --> 00:00:47.070
return the recipe list to the controller
and then we'll pass in that list to Thymeleaf
8

9
00:00:47.070 --> 00:00:51.539
view and we want to display that
on the index page. So we're going to go
9

10
00:00:51.539 --> 00:00:56.969
in and I'm going to switch over to
IntelliJ and start coding that. Now what
10

11
00:00:56.969 --> 00:01:02.190
I've done is I did create the
RecipeBootstrap class and I have a
11

12
00:01:02.190 --> 00:01:06.450
private method in there to get recipes
and it's going to return back a list of
12

13
00:01:06.450 --> 00:01:11.490
recipes and that's ones that we want to
return on startup. And I didn't want to
13

14
00:01:11.490 --> 00:01:15.659
spend time coding all this, so you can
see there's quite a bit here that's
14

15
00:01:15.659 --> 00:01:20.520
going on and the one thing that I did on
each of the unit of the measures looks
15

16
00:01:20.520 --> 00:01:25.979
like we got about six or seven of them
there that we're dealing with, is we need
16

17
00:01:25.979 --> 00:01:28.439
to make sure that we're grabbing the
right ones.
17

18
00:01:28.439 --> 00:01:34.530
So I just saw a mistake there. So we want
to grab cup here. That's my reference so
18

19
00:01:34.530 --> 00:01:41.369
I'm going to go back in here. So I made a
mistake and I cut-and-paste error. So cut
19

20
00:01:41.369 --> 00:01:45.600
and paste is going to get every
developer at one point or another. So I
20

21
00:01:45.600 --> 00:01:50.280
go through here at the beginning, this is
actually a pretty ugly code but we're
21

22
00:01:50.280 --> 00:01:55.079
doing a lot as far as creating the
initial seed data here. So we go through,
22

23
00:01:55.079 --> 00:01:59.579
we create a list of recipes that's going
to be our return object for the method.
23

24
00:01:59.579 --> 00:02:03.810
We go through and get all the UOM's
and because we're returning the optional
24

25
00:02:03.810 --> 00:02:08.610
we're going to make sure that we
actually get the expected UOM. So if any
25

26
00:02:08.610 --> 00:02:12.940
of these values are not found in the
database, we'll will throw up
26

27
00:02:12.940 --> 00:02:18.370
an exception and bomb to startup and
we'll be able to see that right away. Now
27

28
00:02:18.370 --> 00:02:24.010
we do similar thing with the Category. So I'm grabbing to both of these meals
28

29
00:02:24.010 --> 00:02:29.530
are kind of a Mexican or tex-mex as they say here in the US. So I already had an
29

30
00:02:29.530 --> 00:02:36.220
American and that's another typo. So
we'll fix that on the fly here, we want
30

31
00:02:36.220 --> 00:02:42.520
to do Mexican. So replace that and I'll
be checking this in to GitHub so you
31

32
00:02:42.520 --> 00:02:47.080
guys will have the final version here. So
we get the categories American-Mexican
32

33
00:02:47.080 --> 00:02:53.920
category. And then we go in and create
our recipe for some yummy guac and we
33

34
00:02:53.920 --> 00:02:59.140
give it the title of perfect guacamole. Set the prep and cook time, difficulty
34

35
00:02:59.140 --> 00:03:04.140
and that's where we're using the enum. We
have directions which are quite lengthy
35

36
00:03:04.140 --> 00:03:09.490
and we're going to modify our domain
objects as well to support this and I'll
36

37
00:03:09.490 --> 00:03:16.510
show you that in one second. Then we set
the ingredients and I did add a helper
37

38
00:03:16.510 --> 00:03:22.630
constructor to Ingredient that will take
in a description. The quantity is a big
38

39
00:03:22.630 --> 00:03:31.180
decimal and then a UnitOfMeasure. And
then we have categories, and I did have
39

40
00:03:31.180 --> 00:03:36.400
to make a quick tweak there as well on
the categories. We were not initializing
40

41
00:03:36.400 --> 00:03:41.680
the Set and if you initialize the Set,
and with a default empty Set, then you
41

42
00:03:41.680 --> 00:03:45.850
won't have to create one. And this is
just something from experience. If you
42

43
00:03:45.850 --> 00:03:51.340
just have a POJO with a List or Set
property and you go to add something to
43

44
00:03:51.340 --> 00:03:54.760
it, you will get a null pointer unless
you've initialized it with something
44

45
00:03:54.760 --> 00:04:03.730
first. Then we continue on here to the
tacosRecipe on line 38 or 138. We add
45

46
00:04:03.730 --> 00:04:09.280
the guacRecipe to the recipes list to
return that in. Then we do some other
46

47
00:04:09.280 --> 00:04:14.920
thing with the taco and we didn't add
categories or tacos. I'm going to do that
47

48
00:04:14.920 --> 00:04:17.370
real quick.
48

49
00:04:20.639 --> 00:04:31.740
And we want to get the categories, and
we'll add in American category because
49

50
00:04:31.740 --> 00:04:36.569
it needs both of these. It will fall under
both categories so we're going to go
50

51
00:04:36.569 --> 00:04:44.520
ahead and get the right variable
categories and we'll add in the Mexican
51

52
00:04:44.520 --> 00:04:50.009
category as well. So we're creating that
whole object graph here and it's a
52

53
00:04:50.009 --> 00:04:55.050
pretty lengthy object graph
there's. So a lot going on here at least as
53

54
00:04:55.050 --> 00:05:00.569
far as the data goes in there our
recipes. So this mimics pretty well what
54

55
00:05:00.569 --> 00:05:05.750
we had on the website for those two
recipes and you can see here, I also
55

56
00:05:05.750 --> 00:05:11.639
included the URL. So that's actually
cut and paste off the website. They had a
56

57
00:05:11.639 --> 00:05:15.870
little JavaScript to capture their URL
and I left it in there just in case you
57

58
00:05:15.870 --> 00:05:21.090
needed a direct URL to it. Now we want to
make this a actual class. It's going to
58

59
00:05:21.090 --> 00:05:27.839
bootstrap for us so what we want to do
is come and make this a Component. And
59

60
00:05:27.839 --> 00:05:33.240
now we want to tap into application
events. Implements Application
60

61
00:05:33.240 --> 00:05:44.550
Listener and we want him to take in the
ContextRefreshedEvent. And now I have the
61

62
00:05:44.550 --> 00:05:51.750
repositories set up here, and what we
want to do is create an implementation
62

63
00:05:51.750 --> 00:05:56.430
here. So I'm going to come down here
above that private method I added for
63

64
00:05:56.430 --> 00:06:01.500
getting the recipes and we'll come down
here. I just did a command and we
64

65
00:06:01.500 --> 00:06:07.259
want to implement methods. So we have the
one onApplicationEvent() and I really
65

66
00:06:07.259 --> 00:06:15.629
don't need that but with the recipeRepository, you can do a save and it will
66

67
00:06:15.629 --> 00:06:22.039
take in an iterable and List is an
iterable. So it's go in that.
67

68
00:06:23.590 --> 00:06:28.210
So that's all we have to do for with
that. That will save everything
68

69
00:06:28.210 --> 00:06:35.410
coming out of the repositories and see
if everything works on that. I am doing
69

70
00:06:35.410 --> 00:06:43.480
this live code and next thing we want
to do, so that this will actually run on
70

71
00:06:43.480 --> 00:06:51.400
startup. Let's see. But before we do that,
let's look at the Ingredient. So we did
71

72
00:06:51.400 --> 00:06:56.350
that in a no argument constructor and
then a constructor for description,
72

73
00:06:56.350 --> 00:07:02.650
amount and UnitOfMeasure. That's the only
changes I made to Ingredient. And then on
73

74
00:07:02.650 --> 00:07:08.980
Recipe, there's actually a couple changes
we need to go over on line 28, I'm
74

75
00:07:08.980 --> 00:07:13.750
initializing ingredients to a new HashSet. And then also on line 43, I'm doing
75

76
00:07:13.750 --> 00:07:16.240
the same thing for categories. So that's
all I was talking about that little
76

77
00:07:16.240 --> 00:07:22.090
trick to avoid having a null pointer
error if you forget to set it. Now on
77

78
00:07:22.090 --> 00:07:27.160
directions, we just had that as a String
property. We did not use the large object
78

79
00:07:27.160 --> 00:07:32.950
annotation. So Hibernate would have
created a default field of 255
79

80
00:07:32.950 --> 00:07:38.320
characters and we definitely need more
than 255 characters for our directions.
80

81
00:07:38.320 --> 00:07:44.160
So I modified that. I'm going to go in
and run this and see if anything
81

82
00:07:44.160 --> 00:07:51.340
complaints. See that started up. Okay I'm
going to toggle over to Chrome and see
82

83
00:07:51.340 --> 00:07:57.190
if we actually have data. So I've got the
database Explorer up. The H2 console,
83

84
00:07:57.190 --> 00:08:02.590
let's connect to that and let's take a
look at RECIPE, run that and we can see
84

85
00:08:02.590 --> 00:08:08.290
that we do have a bunch of stuff in
there. I forgot to include a
85

86
00:08:08.290 --> 00:08:12.160
couple properties there like URL and
source. So we can go back and add that at
86

87
00:08:12.160 --> 00:08:21.130
a later time. Let's clear that and let's
take a look at NOTES. So we did get notes
87

88
00:08:21.130 --> 00:08:26.500
in there as well. So it looks like our
data has updated correctly.
88

89
00:08:26.500 --> 00:08:32.210
Let's check INGREDIENT. So we can see our ingredients as well
89

90
00:08:32.210 --> 00:08:39.080
have been loaded up and you can see that
we have a null recipe id on the
90

91
00:08:39.080 --> 00:08:43.729
ingredients. So we're not setting up a
that property going back. So that is one
91

92
00:08:43.729 --> 00:08:47.950
thing we are going to need to change
because we're not persisting that.
92

93
00:08:47.950 --> 00:08:52.580
Okay I sped things up a little bit. I didn't want to waste your time on setting some
93

94
00:08:52.580 --> 00:08:57.950
data property here. So I've
gone in and fixed the recipe and I'll
94

95
00:08:57.950 --> 00:09:03.290
toggle over to IntelliJ real quick and
show you what I did. I added in recipe
95

96
00:09:03.290 --> 00:09:08.750
to the constructor of ingredient and fix
the bootstrap to pass in the recipe
96

97
00:09:08.750 --> 00:09:13.760
object. So that is now getting built
correctly and we can see now that the
97

98
00:09:13.760 --> 00:09:24.190
recipe id is populated. Double check
NOTES and we did the same thing on
98

99
00:09:24.190 --> 00:09:29.990
recipe notes. So let's go and fix that
real quick. We only got two to fix. Come
99

100
00:09:29.990 --> 00:09:32.620
over here.
100

101
00:09:44.010 --> 00:09:52.230
I'm just going to move that up then we
want to do the same thing for the guac
101

102
00:09:52.230 --> 00:09:54.800
Recipe.
102

103
00:10:01.670 --> 00:10:14.570
So now we're going to get that property
set both ways. Yeah, so it had the wrong
103

104
00:10:14.570 --> 00:10:19.990
method there and we can see that Spring
Boot is restarting. That has started.
104

105
00:10:19.990 --> 00:10:31.460
Let's come back over here and double
check this. Take a look at the NOTES and
105

106
00:10:31.460 --> 00:10:38.390
now we can see the NOTES has the proper
recipe id populated. So that's good. Now
106

107
00:10:38.390 --> 00:10:41.770
we want to set up our service layer.
107

108
00:10:51.420 --> 00:10:55.830
And we want this to return back a List
and I'm going to stop Spring Boot while
108

109
00:10:55.830 --> 00:10:58.760
we're doing all this.
109

110
00:11:05.939 --> 00:11:10.970
Just one method on the interface is on
our RecipeService to get all recipes
110

111
00:11:10.970 --> 00:11:26.249
and I do want to create a package for
that. Well now refactor that into the
111

112
00:11:26.249 --> 00:11:33.859
package. Now let's create the
implementation for it.
112

113
00:11:44.410 --> 00:11:56.740
And do when you're using constructor,
you do want to use a final property and I added
113

114
00:11:56.740 --> 00:12:05.140
in a constructor for that. It helps if I
give it a name. Now let's do a
114

115
00:12:05.140 --> 00:12:16.270
constructor. We'll implement
the methods and in this case we want to
115

116
00:12:16.270 --> 00:12:20.980
return back a Set from the repository. So
what we need to do here is create a new
116

117
00:12:20.980 --> 00:12:34.590
HashSet and then take the repository.
117

118
00:12:37.860 --> 00:12:47.110
Get an iterator on it
and then say recipeSet when we're using
118

119
00:12:47.110 --> 00:12:50.700
a method reference here,
119

120
00:12:54.820 --> 00:13:03.050
and then return back that Set. Nice
concise Java 8 syntax there and what
120

121
00:13:03.050 --> 00:13:07.520
we want to do is pass in the recipe service implementation to the controller.
121

122
00:13:07.520 --> 00:13:14.030
So we'll come over to him and I am going
to get rid of these repositories. We're
122

123
00:13:14.030 --> 00:13:33.740
just using that four. So we don't need him,
don't need that anymore and we're going
123

124
00:13:33.740 --> 00:13:36.730
to need to pass in the model.
124

125
00:13:42.490 --> 00:13:49.070
It'll pass back that set to Thymeleaf
and I am going to fast forward while we
125

126
00:13:49.070 --> 00:13:54.230
do the HTML. It's getting a little long
and I jumped ahead just a little bit and
126

127
00:13:54.230 --> 00:13:59.990
I created the HTML. So I'm adding in a
table so we got ID takes the recipe and
127

128
00:13:59.990 --> 00:14:05.089
we get an iterator over it. So I have
tasty goodness there for my recipe
128

129
00:14:05.089 --> 00:14:11.810
description for the natural time filling. Let's go ahead and start this and we can
129

130
00:14:11.810 --> 00:14:14.959
see that RecipeService could not be
found.
130

131
00:14:14.959 --> 00:14:22.640
Take a look at this and I've missed
adding the Service. Let's see if it works
131

132
00:14:22.640 --> 00:14:32.690
now and we are up and running on port
8080. Let's come over here to localhost.
132

133
00:14:32.690 --> 00:14:38.570
So I already have it on my recipes. See
if we get recipes and boom, there's our
133

134
00:14:38.570 --> 00:14:45.560
recipes. So just a real quick quick recap
here. So we've created the Bootstrap
134

135
00:14:45.560 --> 00:14:50.269
class, a lot of stuff in there as far as
setting up the object graph. We return
135

136
00:14:50.269 --> 00:14:59.240
back to the repository, we save a list of
recipes to the recipeRepository, then we
136

137
00:14:59.240 --> 00:15:04.990
take that same repository and then we
created a RecipeServiceImpl.
137

138
00:15:04.990 --> 00:15:09.199
That RecipeRepository gets injected
into this guy as well through a
138

139
00:15:09.199 --> 00:15:16.970
constructor. We convert the 
iterable to a Set, a HashSet. We return
139

140
00:15:16.970 --> 00:15:22.040
that back to the IndexController and
assign it to a property on the view
140

141
00:15:22.040 --> 00:15:29.690
model of recipes and then finally that
recipes gets displayed via the Thymeleaf
141

142
00:15:29.690 --> 00:15:33.890
template with this iterator going over
recipes and that's what we saw on the
142

143
00:15:33.890 --> 00:15:39.260
screen. Now definitely a lot happened in
this little code review here and live
143

144
00:15:39.260 --> 00:15:44.000
coding exercise. I will have everything
checked into GitHub for you and you'll
144

145
00:15:44.000 --> 00:15:48.920
find a complete link to everything that
changed and the course resources
145

146
00:15:48.920 --> 00:15:52.029
attached to this module.
