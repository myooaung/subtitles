WEBVTT
0
1
00:00:05.060 --> 00:00:09.120
Okay! In this video, we are gonna go
ahead and set up our controller.
1

2
00:00:09.120 --> 00:00:13.469
We're gonna follow the traditional
annotation based method of creating the
2

3
00:00:13.469 --> 00:00:18.500
controller. So, I'm gonna come in here
now and create a New Package.
3

4
00:00:19.650 --> 00:00:23.730
And this is where we'll put our
controllers, and I'm gonna create a
4

5
00:00:23.730 --> 00:00:26.690
new class here.
5

6
00:00:28.330 --> 00:00:31.410
We'll call that CategoryController.
6

7
00:00:31.480 --> 00:00:37.890
Of course, we'll add this. First thing
we wanna do is annotate this
7

8
00:00:38.050 --> 00:00:43.030
and assess it up as a RestController. So
just like regular Spring MVC here, a lot
8

9
00:00:43.030 --> 00:00:49.030
of compatibility with the annotations. So,
the first thing we wanna do is bring
9

10
00:00:49.030 --> 00:00:52.710
in the repository.
10

11
00:00:53.289 --> 00:00:58.079
And I do like to get in the habit of
marking these final.
11

12
00:01:00.480 --> 00:01:04.920
So, that sets up the repository to get
injected into our controller bean. Now,
12

13
00:01:04.920 --> 00:01:10.680
let's do a GetMapping. So, just a recap,
so the reactive types, we have Flux and
13

14
00:01:10.680 --> 00:01:18.000
Mono. So, Mono is zero or one elements, and
a Flux is zero or many elements. So, we're
14

15
00:01:18.000 --> 00:01:21.930
gonna, first thing, we'll set up is the
listing function. So when we do a GET
15

16
00:01:21.930 --> 00:01:28.200
against the URL, we will set it up so
that we turn back a list of Category so
16

17
00:01:28.200 --> 00:01:33.140
we'll wanna turn back a Flux of
categories.
17

18
00:01:43.350 --> 00:01:48.300
So let's set that up. And then, just like
in Spring MVC, we're gonna do a 
18

19
00:01:48.300 --> 00:01:50.720
@GetMapping.
19

20
00:01:53.990 --> 00:01:58.000
So, that'll list out the categories.
20

21
00:01:58.770 --> 00:02:01.250
And also, let's set up a Mono.
21

22
00:02:15.630 --> 00:02:20.040
So you can see that, that's pretty pretty
simple, and here, again, we're gonna do
22

23
00:02:20.040 --> 00:02:23.360
the @GetMapping.
23

24
00:02:24.819 --> 00:02:33.980
We wanna do the same value.
Just like in Spring MVC, we're into a 
24

25
00:02:33.980 --> 00:02:42.560
/{id} and that sets it
up to pool. So, this is setting up a api/v1/categories
25

26
00:02:42.560 --> 00:02:47.220
as the URL. Then, we're
doing a @PathVariable of id and that
26

27
00:02:47.220 --> 00:02:53.099
will get automatically injected into our
method here. So, we set up two methods.
27

28
00:02:53.099 --> 00:02:57.510
And you can see that we are using the
exact same syntax that we did with
28

29
00:02:57.510 --> 00:03:04.620
Spring MVC, but in this case, we're now
returning back the reactive types. So, the
29

30
00:03:04.620 --> 00:03:09.900
Framework is gonna handle that for us. Here
is unused import here. Now, let's go ahead
30

31
00:03:09.900 --> 00:03:12.769
and start this up.
31

32
00:03:17.629 --> 00:03:23.450
Okay, gonna jump over and and see if we
can run a curl command. I had to paste it
32

33
00:03:23.450 --> 00:03:28.180
to my clipboard, so I am doing a curl -X GET
--header 'Accept: application/json'
33

34
00:03:28.180 --> 00:03:34.040
'http://localhost:8080/api/vi/categories. So, I
should get something. And we can see that
34

35
00:03:34.040 --> 00:03:43.900
it did respond back. Now, if I do that
again and let's cut and paste the id,
35

36
00:03:46.400 --> 00:03:51.650
we can see that it did in fact
returned back, So, you can see the curl. So I
36

37
00:03:51.650 --> 00:03:56.930
did a GET without the id than I did a GET
by id. You can see that it returns back a
37

38
00:03:56.930 --> 00:04:03.459
single fruit. Or if I do the whole thing,
38

39
00:04:04.910 --> 00:04:08.900
you can see that it returns back a list. So, our
controller is up and working and
39

40
00:04:08.900 --> 00:04:13.370
functioning. In the next video, I'm gonna show you how we set up a test to test
40

41
00:04:13.370 --> 00:04:16.360
this controller.
