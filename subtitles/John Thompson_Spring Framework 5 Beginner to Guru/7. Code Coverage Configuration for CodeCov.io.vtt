WEBVTT
0
1
00:00:01.748 --> 00:00:03.915
(beeping)
1

2
00:00:05.074 --> 00:00:06.363
<v Narrator>So this week I was</v>
2

3
00:00:06.363 --> 00:00:07.988
taking a look an announcement from the
3

4
00:00:07.988 --> 00:00:09.747
Spring-Cloud dataflow guys.
4

5
00:00:09.747 --> 00:00:12.301
They're doing some pretty curious stuff there.
5

6
00:00:12.301 --> 00:00:14.350
So I'm checking that out, and I'm looking at their
6

7
00:00:14.350 --> 00:00:17.399
GitHub repository, I notice this codecov percentage.
7

8
00:00:17.399 --> 00:00:20.782
So I was like, that's a interesting little badge.
8

9
00:00:20.782 --> 00:00:22.013
I did a little digging.
9

10
00:00:22.013 --> 00:00:25.734
It actually brought up the source of the README document
10

11
00:00:25.734 --> 00:00:30.151
and found the URL, and it is from these guys here:
11

12
00:00:30.151 --> 00:00:32.439
code coverage done right, or codecov.
12

13
00:00:32.439 --> 00:00:36.125
Took a look at it, and it is actually free for developers.
13

14
00:00:36.125 --> 00:00:38.447
So this is something that you can use to get your
14

15
00:00:38.447 --> 00:00:42.150
code covered, and it's easy to set up.
15

16
00:00:42.150 --> 00:00:45.401
It's free, you can get started going along.
16

17
00:00:45.401 --> 00:00:47.822
They do have some restrictions on it,
17

18
00:00:47.822 --> 00:00:49.772
so if you have private repositories
18

19
00:00:49.772 --> 00:00:51.636
you can only do one private, but the rest,
19

20
00:00:51.636 --> 00:00:53.644
if you have public repositories,
20

21
00:00:53.644 --> 00:00:55.792
you can do unlimited public repositories.
21

22
00:00:55.792 --> 00:00:59.072
I'm going to start using this in the course going forward,
22

23
00:00:59.072 --> 00:01:01.626
and it's pretty easy to set up,
23

24
00:01:01.626 --> 00:01:04.145
so let's take a quick look at that right now.
24

25
00:01:04.145 --> 00:01:07.042
If I come over to IntelliJ,
25

26
00:01:07.042 --> 00:01:08.801
the main thing that we need to do is
26

27
00:01:08.801 --> 00:01:12.603
set up this build plug-in for cobertura.
27

28
00:01:12.603 --> 00:01:15.668
I think that's how you say it right, cobertura.
28

29
00:01:15.668 --> 00:01:17.329
This is a code coverage plug-in
29

30
00:01:17.329 --> 00:01:20.138
that is going to generate coverage, your test coverage,
30

31
00:01:20.138 --> 00:01:22.878
of your unit test, so this is a fairly
31

32
00:01:22.878 --> 00:01:26.297
automated thing that we can set up, very easy to use,
32

33
00:01:26.297 --> 00:01:29.571
and it hooks right into Maven.
33

34
00:01:29.571 --> 00:01:32.329
Now the next thing that we need to set up
34

35
00:01:32.329 --> 00:01:36.920
is to come in here to our CircleCI configuration,
35

36
00:01:36.920 --> 00:01:39.318
and right now we're running an integration test phase,
36

37
00:01:39.318 --> 00:01:42.975
and we also want to run the cobertura goal
37

38
00:01:42.975 --> 00:01:44.920
to kick off those tests.
38

39
00:01:44.920 --> 00:01:48.588
So that's basically what's going to initialize
39

40
00:01:48.588 --> 00:01:51.677
the test coverage, the reports of that,
40

41
00:01:51.677 --> 00:01:54.427
and then finally here on line 46,
41

42
00:01:55.369 --> 00:01:58.643
this a hook to send it into codecov.
42

43
00:01:58.643 --> 00:02:00.851
So, a simple bash, and it calls a curl command
43

44
00:02:00.851 --> 00:02:04.680
to hit this URL, and basically it's going to ping back
44

45
00:02:04.680 --> 00:02:06.680
and find that directory.
45

46
00:02:07.960 --> 00:02:11.448
So, this is kinda like a poor man's webhooks,
46

47
00:02:11.448 --> 00:02:13.364
and when the build runs, it gives us a command,
47

48
00:02:13.364 --> 00:02:16.104
it pings out to codecov, and codecov is going to come back
48

49
00:02:16.104 --> 00:02:19.825
and look for our test results, our test coverage
49

50
00:02:19.825 --> 00:02:22.780
that is generated by this command here.
50

51
00:02:22.780 --> 00:02:25.530
So let's jump on over to codecov.
51

52
00:02:26.890 --> 00:02:28.390
And you can login.
52

53
00:02:29.261 --> 00:02:30.849
It's like crazy easy.
53

54
00:02:30.849 --> 00:02:32.143
I'm going to log right in with my GitHub account.
54

55
00:02:32.143 --> 00:02:33.705
It just takes a second.
55

56
00:02:33.705 --> 00:02:35.382
And let's take a look at this.
56

57
00:02:35.382 --> 00:02:37.008
So I got a couple projects going in there
57

58
00:02:37.008 --> 00:02:40.096
getting a little bit ahead to the mockup project.
58

59
00:02:40.096 --> 00:02:43.405
But now we can see, we get our test coverage,
59

60
00:02:43.405 --> 00:02:45.831
there's a number of different things
60

61
00:02:45.831 --> 00:02:47.027
that you can look at.
61

62
00:02:47.027 --> 00:02:49.599
What's most interesting is to come in here
62

63
00:02:49.599 --> 00:02:52.960
and then we can see my packages are coverage
63

64
00:02:52.960 --> 00:02:54.562
so a little bit low here,
64

65
00:02:54.562 --> 00:02:57.673
so obviously our application isn't going to get coverage
65

66
00:02:57.673 --> 00:03:01.840
but in here we can see more specifics as we drill in.
66

67
00:03:02.857 --> 00:03:04.657
And this is actually a fairly nice view
67

68
00:03:04.657 --> 00:03:07.449
so obviously everything green is covered
68

69
00:03:07.449 --> 00:03:10.798
and now so you get some funny things like this
69

70
00:03:10.798 --> 00:03:13.922
so we're not, don't have any coverage on
70

71
00:03:13.922 --> 00:03:16.226
a logging of an error but we would
71

72
00:03:16.226 --> 00:03:17.944
want to to be adding in some error handling
72

73
00:03:17.944 --> 00:03:20.928
and then add in test for that.
73

74
00:03:20.928 --> 00:03:23.099
So like here's something that we have
74

75
00:03:23.099 --> 00:03:24.272
completely no coverage on.
75

76
00:03:24.272 --> 00:03:25.857
So this is a really handy tool
76

77
00:03:25.857 --> 00:03:29.641
to see where your coverage is and where it is not
77

78
00:03:29.641 --> 00:03:33.322
so it is a very good tool to be using
78

79
00:03:33.322 --> 00:03:37.130
and keeping an eye on your code coverage metrics.
79

80
00:03:37.130 --> 00:03:40.119
I do like to say right now we are pretty good
80

81
00:03:40.119 --> 00:03:41.942
on a project standpoint.
81

82
00:03:41.942 --> 00:03:45.123
I like to see somewhere in the 70 to 90ish percent
82

83
00:03:45.123 --> 00:03:46.993
so when you do get up to 100
83

84
00:03:46.993 --> 00:03:49.889
sometimes that just becomes a little too much
84

85
00:03:49.889 --> 00:03:53.059
to try to achieve 100% and then you're just
85

86
00:03:53.059 --> 00:03:55.746
writing really non value added tests
86

87
00:03:55.746 --> 00:03:57.726
so you want to be sure that you're spending
87

88
00:03:57.726 --> 00:03:59.851
your time properly and creating your test coverage,
88

89
00:03:59.851 --> 00:04:01.656
but some people can take it overboard
89

90
00:04:01.656 --> 00:04:03.862
and try to strive for that 100%.
90

91
00:04:03.862 --> 00:04:05.586
Sometimes it doesn't make always sense
91

92
00:04:05.586 --> 00:04:07.089
to get all the way to 100%,
92

93
00:04:07.089 --> 00:04:10.178
you can actually be doing non value added activity.
93

94
00:04:10.178 --> 00:04:12.424
But this is a really great tool,
94

95
00:04:12.424 --> 00:04:14.798
I encourage you to set it up with your own projects
95

96
00:04:14.798 --> 00:04:16.743
and then one last thing I want
96

97
00:04:16.743 --> 00:04:19.321
to show you there is that badge.
97

98
00:04:19.321 --> 00:04:23.622
So if I come in here and then go to Settings,
98

99
00:04:23.622 --> 00:04:27.059
now I can come to badge and copy the markdown
99

100
00:04:27.059 --> 00:04:29.559
and jump back over to IntelliJ
100

101
00:04:30.936 --> 00:04:34.135
and the ReadMe, and this line 5
101

102
00:04:34.135 --> 00:04:36.794
that is the code cov badge,
102

103
00:04:36.794 --> 00:04:39.824
just a simple code coverage badge
103

104
00:04:39.824 --> 00:04:41.780
and it will give you that right there
104

105
00:04:41.780 --> 00:04:43.951
and you can display that on the homepage
105

106
00:04:43.951 --> 00:04:46.118
of your GitHub repository.
