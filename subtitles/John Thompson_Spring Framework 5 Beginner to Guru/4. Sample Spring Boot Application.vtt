WEBVTT
0
1
00:00:03.036 --> 00:00:04.865
Now of course when we're building our image
1

2
00:00:04.865 --> 00:00:07.442
we're going to need to inject a JAR file
2

3
00:00:07.442 --> 00:00:09.335
that's been created by Spring Boot
3

4
00:00:09.335 --> 00:00:10.281
and the nice thing about Spring Boot
4

5
00:00:10.281 --> 00:00:13.474
it does give us an executable JAR to execute.
5

6
00:00:13.474 --> 00:00:16.167
And I have a very simple web application,
6

7
00:00:16.167 --> 00:00:19.337
it has a simple H2 in-memory database
7

8
00:00:19.337 --> 00:00:20.811
so nothing sexy here.
8

9
00:00:20.811 --> 00:00:24.184
I wanted to give you a quick code review
9

10
00:00:24.184 --> 00:00:25.978
of this and we'll run the application
10

11
00:00:25.978 --> 00:00:28.334
just to see it running inside the IDE
11

12
00:00:28.334 --> 00:00:30.482
and get the build process and I'll show
12

13
00:00:30.482 --> 00:00:32.160
the build artifact that we want to deploy
13

14
00:00:32.160 --> 00:00:35.144
into our Docker container.
14

15
00:00:35.144 --> 00:00:38.008
So it's a very common process I wanted
15

16
00:00:38.008 --> 00:00:41.065
to give you a quick overview of what
16

17
00:00:41.065 --> 00:00:42.377
we're going to be running inside
17

18
00:00:42.377 --> 00:00:43.979
the Docker container first.
18

19
00:00:43.979 --> 00:00:46.823
Okay I have a sample Spring Boot application here.
19

20
00:00:46.823 --> 00:00:50.376
It is running the 1.4.2 release of Spring Boot,
20

21
00:00:50.376 --> 00:00:52.802
1.5 is out actually right now
21

22
00:00:52.802 --> 00:00:56.175
but this is going to be just fine for our purposes.
22

23
00:00:56.175 --> 00:00:57.615
We just want something that's going
23

24
00:00:57.615 --> 00:00:59.739
to go out and start up for us
24

25
00:00:59.739 --> 00:01:03.906
and run a little Tomcat application in an executable JAR.
25

26
00:01:04.360 --> 00:01:07.147
So I'll give you a quick tour of what's going on here.
26

27
00:01:07.147 --> 00:01:10.601
Now if you want to know more about this application,
27

28
00:01:10.601 --> 00:01:13.770
like I said it is a Spring Boot application,
28

29
00:01:13.770 --> 00:01:16.464
if you go out to my website, springframework.guru,
29

30
00:01:16.464 --> 00:01:19.447
I have a whole tutorial series on creating
30

31
00:01:19.447 --> 00:01:21.752
a Spring Boot web application
31

32
00:01:21.752 --> 00:01:25.200
and this is the source code from that.
32

33
00:01:25.200 --> 00:01:27.905
So it's a six part blog post with a lot
33

34
00:01:27.905 --> 00:01:30.134
of information on using Spring Boot
34

35
00:01:30.134 --> 00:01:32.596
and setting up Spring Security and Thymeleaf
35

36
00:01:32.596 --> 00:01:34.651
and all that good stuff so I step you
36

37
00:01:34.651 --> 00:01:36.096
through everything but I want to give
37

38
00:01:36.096 --> 00:01:38.474
you a quick overview of what's going on here.
38

39
00:01:38.474 --> 00:01:41.390
So this is Spring Boot application,
39

40
00:01:41.390 --> 00:01:45.280
it is running embedded Tomcat and I do have
40

41
00:01:45.280 --> 00:01:46.771
a simple controller here.
41

42
00:01:46.771 --> 00:01:50.318
I have two controllers, an IndexController,
42

43
00:01:50.318 --> 00:01:52.861
returns back the Thymeleaf view of index.
43

44
00:01:52.861 --> 00:01:56.222
A ProductController that shows some products,
44

45
00:01:56.222 --> 00:02:00.389
I do have a simple domain class called Product,
45

46
00:02:00.605 --> 00:02:02.607
using JPA mappings.
46

47
00:02:02.607 --> 00:02:04.668
Now this is going to be backed by an H2
47

48
00:02:04.668 --> 00:02:07.211
in memory database and to access data
48

49
00:02:07.211 --> 00:02:10.211
we are going through Spring Data JPA,
49

50
00:02:11.204 --> 00:02:15.238
using a CrudRepository and the one secret sauce
50

51
00:02:15.238 --> 00:02:19.360
here is I have a ProductLoader to on start up
51

52
00:02:19.360 --> 00:02:22.007
ContextRefreshedEvent looks for that
52

53
00:02:22.007 --> 00:02:24.503
and we add in a couple of products
53

54
00:02:24.503 --> 00:02:28.670
so we get some data preloaded in our H2 in memory database.
54

55
00:02:29.246 --> 00:02:33.152
And we want to see a little Spring Security
55

56
00:02:33.152 --> 00:02:34.993
so we even have Spring Security set up,
56

57
00:02:34.993 --> 00:02:36.630
we're using an in memory authentication,
57

58
00:02:36.630 --> 00:02:38.547
admin ADMIN, user USER.
58

59
00:02:40.670 --> 00:02:42.795
Trying to remember what I had in the web configuration
59

60
00:02:42.795 --> 00:02:46.795
so all this sets up for the H2 database console.
60

61
00:02:47.740 --> 00:02:49.323
And let's see here.
61

62
00:02:52.321 --> 00:02:55.472
No big deal here we have Thymeleaf templates,
62

63
00:02:55.472 --> 00:02:58.375
using fragments to do a header
63

64
00:02:58.375 --> 00:03:01.330
and we have a little product form
64

65
00:03:01.330 --> 00:03:03.872
where we can actually add stuff into the database.
65

66
00:03:03.872 --> 00:03:06.525
Everything is running.
66

67
00:03:06.525 --> 00:03:08.470
So I'm looking at application properties,
67

68
00:03:08.470 --> 00:03:11.703
everything is running defaults.
68

69
00:03:11.703 --> 00:03:15.291
And let's take a look at the pom one more time.
69

70
00:03:15.291 --> 00:03:17.532
And so the dependencies that we bring
70

71
00:03:17.532 --> 00:03:20.237
in spring-boot-starter-data-jpa,
71

72
00:03:20.237 --> 00:03:24.404
security, thymeleaf, thymeleaf security extras,
72

73
00:03:24.701 --> 00:03:26.849
and then Spring Boot web.
73

74
00:03:26.849 --> 00:03:29.760
Spring Boot web is what gives us the Tomcat
74

75
00:03:29.760 --> 00:03:33.343
and we have Bootstrap and JQuery coming in
75

76
00:03:34.889 --> 00:03:38.586
by web jars and then the H2 in memory database.
76

77
00:03:38.586 --> 00:03:41.303
And I am going to go ahead and start it up,
77

78
00:03:41.303 --> 00:03:43.683
but restart it here I already had it running.
78

79
00:03:43.683 --> 00:03:45.250
So we can see Spring Boot is initializing
79

80
00:03:45.250 --> 00:03:49.024
and it's going to start up pretty quick
80

81
00:03:49.024 --> 00:03:52.344
so Hibernate builds our schema,
81

82
00:03:52.344 --> 00:03:56.175
the ContextRefreshedEvent populates the schema,
82

83
00:03:56.175 --> 00:03:59.002
now I'm going to toggle over to Chrome where I have it up,
83

84
00:03:59.002 --> 00:04:01.335
and I can do a refresh here.
84

85
00:04:02.584 --> 00:04:06.751
And if I wanted to see products I can see products there.
85

86
00:04:07.896 --> 00:04:09.463
I want to sign in.
86

87
00:04:09.463 --> 00:04:11.296
I think we said admin.
87

88
00:04:14.519 --> 00:04:16.922
Admin admin, so now we're welcome admin.
88

89
00:04:16.922 --> 00:04:19.215
So nothing too complex,
89

90
00:04:19.215 --> 00:04:20.295
this I a pretty simple web application
90

91
00:04:20.295 --> 00:04:21.659
but it's perfect for our needs,
91

92
00:04:21.659 --> 00:04:24.434
we want to be able to deploy an executable JAR
92

93
00:04:24.434 --> 00:04:27.894
which is exactly what this will give us for our project.
93

94
00:04:27.894 --> 00:04:30.477
(upbeat music)
