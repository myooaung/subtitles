WEBVTT
0
1
00:00:04.339 --> 00:00:09.480
Alright! In this video, we are going to
go through and implement the assignment,
1

2
00:00:09.480 --> 00:00:15.660
and that is to add in a create action
for the Vendor object. You can see it
2

3
00:00:15.660 --> 00:00:19.890
here on the screen, I have the unit test
already highlighted for the create category
3

4
00:00:19.890 --> 00:00:25.080
controller test, and let's go ahead and
open up the vendor. And what I'm going to
4

5
00:00:25.080 --> 00:00:29.070
do is I like to do a split screen
because we are doing some pretty similar
5

6
00:00:29.070 --> 00:00:32.279
stuff here. So, I'm going to split this,
and I'm going to work out at the bottom
6

7
00:00:32.279 --> 00:00:38.280
screen here, and effectively, we are going
to implement this createCategory. So,
7

8
00:00:38.280 --> 00:00:43.290
let's come down here, and I'm going to do
a command N for new. Create a new test
8

9
00:00:43.290 --> 00:00:48.950
method. Let's call that testCreateVendor.
9

10
00:00:49.770 --> 00:00:54.240
And the first thing that we want to do
is the BDDMockito, and we are going to
10

11
00:00:54.240 --> 00:00:59.480
set up a given for our vendorRepository,
11

12
00:01:00.379 --> 00:01:03.730
and we're going to say any Publisher because
12

13
00:01:03.970 --> 00:01:07.660
remember, we're going to use that
Publisher object. And again, that is all
13

14
00:01:07.660 --> 00:01:13.540
the streams. So, we can see that's the
reactive streams. And right now, this is a
14

15
00:01:13.540 --> 00:01:18.850
separate dependency in Java 8. When we
get to java 9, this interface is now
15

16
00:01:18.850 --> 00:01:25.439
part of the Java 9 API,
and do a little import static method
16

17
00:01:25.439 --> 00:01:32.270
there, and this one, we want the Mockito
matcher,
17

18
00:01:32.899 --> 00:01:36.909
and we're going to say willReturn. We're going to
18

19
00:01:37.580 --> 00:01:42.380
turn back a Flux and use the just
option. And this time, we're going to do a
19

20
00:01:42.380 --> 00:01:47.450
Vendor. We're not going to be paying
attention to the results. I'm not going to
20

21
00:01:47.450 --> 00:01:51.770
create the object, like I did above, or
add any properties there. You can
21

22
00:01:51.770 --> 00:01:57.190
optionally, that's fine. Now, we want to do
the build method on this.
22

23
00:01:58.570 --> 00:02:03.350
Sometimes, you get messed up with a
number of parens.
23

24
00:02:03.350 --> 00:02:08.630
And now, we want to create the actual
object that we're going to be posting to
24

25
00:02:08.630 --> 00:02:13.330
the API.
So, let's come in here and do a Mono.
25

26
00:02:13.330 --> 00:02:16.560
Then, we'll do the Vendor.
26

27
00:02:19.910 --> 00:02:23.910
So, you're going to do a Mono with a just
option.
27

28
00:02:23.910 --> 00:02:31.500
And this time, we'll use vendor
builder. Let's go ahead and
28

29
00:02:31.500 --> 00:02:35.930
add firstName.
29

30
00:02:43.920 --> 00:02:50.030
So, that's going to set up my Mono for us.
Let's scroll that up a little bit.
30

31
00:02:51.250 --> 00:02:56.230
So now, we've set up our test. Now, we want
to actually take that WebTestClient
31

32
00:02:56.230 --> 00:03:00.000
and set up the post action.
32

33
00:03:04.990 --> 00:03:08.300
And we want to go against 
URI. So, here, we're just going to use  this URI
33

34
00:03:08.300 --> 00:03:11.650
the API vendors, like we've been
34

35
00:03:11.650 --> 00:03:16.810
doing consistently. So, I'm going to cut
and paste that in. And now, we're going to
35

36
00:03:16.810 --> 00:03:21.370
set the body, and what we want to do is
set that body with the Publisher.
36

37
00:03:21.370 --> 00:03:25.810
And remember, our Mono is an
implementation of Publisher. So, we're
37

38
00:03:25.810 --> 00:03:32.210
going to take that Mono there.
Let's correct that. I'm going to come in
38

39
00:03:32.210 --> 00:03:35.500
here. Refactor. Rename.
39

40
00:03:36.690 --> 00:03:42.840
And the body inserted, that's going to
also want the class, like we did above. So,
40

41
00:03:42.840 --> 00:03:45.920
we're going to do a Vendor here.
41

42
00:03:47.190 --> 00:03:56.160
we'll say exchange, expect status is
created. So, we want that created status.
42

43
00:03:56.160 --> 00:03:59.270
So, that sets up
my test now. This is going to fail. Let's go
43

44
00:03:59.270 --> 00:04:02.950
ahead and run it and we'll get a failing
test.
44

45
00:04:03.349 --> 00:04:07.519
So, you can see our tests did in fact
fail. So, we're going to have four or five.
45

46
00:04:07.519 --> 00:04:10.280
Not a lot. But that's because we
haven't implemented the controller
46

47
00:04:10.280 --> 00:04:14.329
action yet. So, let's go ahead and
implement that now. So, I'm going to come
47

48
00:04:14.329 --> 00:04:20.389
over here and open up the VendorController. And up here in the top window,
48

49
00:04:20.389 --> 00:04:25.460
remember, we have the implementation so we
want to set up this create action. So,
49

50
00:04:25.460 --> 00:04:29.169
let's go ahead and step that through
that right now.
50

51
00:04:29.430 --> 00:04:34.599
Remember, on the create, we're going to turn
back a Mono void. That means nothing's
51

52
00:04:34.599 --> 00:04:39.480
coming back from it. I will set up the
method right now.
52

53
00:04:39.480 --> 00:04:45.289
And remember it, we are going to be
taking an Publisher
53

54
00:04:45.289 --> 00:04:47.949
of a Vendor.
54

55
00:04:48.260 --> 00:04:52.130
I'm calling it vendorStream
because I want you to remember this is a
55

56
00:04:52.130 --> 00:04:58.040
Publisher of a stream of objects. And now,
we're going to set up return vendor
56

57
00:04:58.040 --> 00:05:01.850
Repository and saveAll from that
Publisher, so we're going to be taking
57

58
00:05:01.850 --> 00:05:06.190
that.
And now, we're going to say
58

59
00:05:06.190 --> 00:05:11.250
a vendorStream,
and this is where we're going to use the then.
59

60
00:05:11.250 --> 00:05:16.230
So, when it completes, we're going to
return back a Mono Void. So, we can see it.
60

61
00:05:16.230 --> 00:05:20.310
That's going to return back a Mono Void,
which is exactly what we want to do. So
61

62
00:05:20.310 --> 00:05:25.150
now, let's go ahead and decorate this. So,
we want to do
62

63
00:05:25.150 --> 00:05:29.250
PostMapping. And I
should still have that on clipboard yet.
63

64
00:05:29.250 --> 00:05:34.500
So I still have the URL on the clipboard
so I was able to paste that. And now,
64

65
00:05:34.500 --> 00:05:38.580
don't forget, this is important. I did got
caught by this in the one of the dump
65

66
00:05:38.580 --> 00:05:42.860
videos before. I forgot to annotate this.
66

67
00:05:44.750 --> 00:05:49.040
And then, finally, we need to set this
ResponseStatus to created. So, I'm just
67

68
00:05:49.040 --> 00:05:52.300
going to cut and paste this over. So that
68

69
00:05:53.470 --> 00:05:57.940
sets up our controller method. So we've
decorated it with the annotations for
69

70
00:05:57.940 --> 00:06:02.410
the actions that we wanted supported by
Spring WebFlux, so it gets all the setups.
70

71
00:06:02.410 --> 00:06:07.800
And now, let's go ahead and run our tests,
and we should get a passing test at this
71

72
00:06:07.800 --> 00:06:11.310
point. We can see that we are now green.
So we file test-driven development here
72

73
00:06:11.310 --> 00:06:17.310
by writing the test first, and then, doing
the implementation. So now, we have good
73

74
00:06:17.310 --> 00:06:20.610
test coverage on our newly-created
method in our controller.
74

75
00:06:20.610 --> 00:06:26.909
Just to recap there, let's go ahead and
take a look at the test. So, in our tests
75

76
00:06:26.909 --> 00:06:32.340
on line 56 there, I'm setting up the
Mockito Mock for the vendorRepository
76

77
00:06:32.340 --> 00:06:37.949
to take in on the save all from a
Publisher, so any Publisher class. We are
77

78
00:06:37.949 --> 00:06:41.789
going to return back a Flux with just a
Vendor in it, and that's really
78

79
00:06:41.789 --> 00:06:46.740
dissatisfied the inner workings of
everything. So, we do need to return back
79

80
00:06:46.740 --> 00:06:50.279
something. Actually, we probably can get
away with not returning anything as long
80

81
00:06:50.279 --> 00:06:55.229
as that Flux execute properly. But, we're
trying to mimic the actual functionality
81

82
00:06:55.229 --> 00:06:59.849
there. And then, on line 59, I'm creating the
object that we're going to pass into the
82

83
00:06:59.849 --> 00:07:05.430
controller method. And then, on line 62,
this is where we actually run the test.
83

84
00:07:05.430 --> 00:07:14.159
So, we perform a post against the api/v1/vendors URL and we take the body and we
84

85
00:07:14.159 --> 00:07:18.509
set the body to the Mono, that we created
up on line 59, specifying that it is a
85

86
00:07:18.509 --> 00:07:23.789
Vendor. We tell the WebTestClient to
perform the exchange, and then, we are
86

87
00:07:23.789 --> 00:07:28.529
asserting that we're expecting a Status
of 201 to come back from it. And then, the
87

88
00:07:28.529 --> 00:07:34.229
VendorController, we added a new method
on line 36 there returns back a Mono
88

89
00:07:34.229 --> 00:07:39.500
void, and the create method, we're going to
take in a RequestBody from a Publisher
89

90
00:07:39.500 --> 00:07:44.279
vendorStream. So, we're expecting a
Publisher that's going to have vendors
90

91
00:07:44.279 --> 00:07:50.789
in it, and then, we are going to persist
that using the the Mono DB saveAll and
91

92
00:07:50.789 --> 00:07:54.659
pass in the stream of that. And when that
stream completes, we are going to return
92

93
00:07:54.659 --> 00:07:59.759
back a Mono Void, completing the loop. And
then, the other important thing, we are
93

94
00:07:59.759 --> 00:08:04.110
using the @PostMapping annotation,
which is only going to map that URL to
94

95
00:08:04.110 --> 00:08:11.849
post, and then, we are explicitly saying
to use on line 34 to return back an HTTP
95

96
00:08:11.849 --> 00:08:17.219
status created which is a 201 status
code that we want to use for our RESTful
96

97
00:08:17.219 --> 00:08:19.550
API.
