WEBVTT
0
1
00:00:04.339 --> 00:00:08.880
Alright. In this video, we are gonna
take a look at using postman and you can
1

2
00:00:08.880 --> 00:00:14.549
see that I have postman up on my screen
here. Now if you go out to the URL of get
2

3
00:00:14.549 --> 00:00:20.039
postman.com, it is available for most
popular operating systems and that would
3

4
00:00:20.039 --> 00:00:25.410
be Mac OS, of course. But also, if you are
happen to be using Windows or Linux, it
4

5
00:00:25.410 --> 00:00:29.490
is also available for those operating
systems as well. And we are gonna step
5

6
00:00:29.490 --> 00:00:33.870
through and take a look at this. And I'm
gonna slide this off to the corner of
6

7
00:00:33.870 --> 00:00:37.829
the screen here. Because I do have a dual
monitor setup. And I'm gonna be using a
7

8
00:00:37.829 --> 00:00:42.930
website here called apifaketory. So it's
a fake API. And it's gonna give us a
8

9
00:00:42.930 --> 00:00:48.360
chance to work with a GET request. And
over here, I have a list of users.
9

10
00:00:48.360 --> 00:00:54.750
This is gonna require a limit. And we
do have to specify a number here. Let's
10

11
00:00:54.750 --> 00:00:59.160
go ahead and I'm gonna click try here.
And it gives us a chance to try it. And
11

12
00:00:59.160 --> 00:01:03.239
do know you do have to provide a number.
So I'm gonna put 12 there. I'm
12

13
00:01:03.239 --> 00:01:07.260
gonna say Call Resource and we're gonna
see that this website is going out there.
13

14
00:01:07.260 --> 00:01:12.119
It's making a request from that. And
we can see, here's the response. So it
14

15
00:01:12.119 --> 00:01:16.439
comes back with this generic
data set. So this is a JSON response in
15

16
00:01:16.439 --> 00:01:20.909
the body. So we can see the JSON format.
It's got a data and a list of objects
16

17
00:01:20.909 --> 00:01:25.890
there. And let's go ahead and take a look
at this in postman. And we're gonna copy
17

18
00:01:25.890 --> 00:01:32.430
this URL here. So we have this, and I want
to show you how to use this inside of
18

19
00:01:32.430 --> 00:01:37.799
postman. I'm gonna slide postman back
over here. And I'm gonna say paste that.
19

20
00:01:37.799 --> 00:01:46.439
And now, we can also go in and say Params
and take a look here. So that it was
20

21
00:01:46.439 --> 00:01:55.020
called the limit. I'm just gonna do 10
this time. And if we click on Send, that's
21

22
00:01:55.020 --> 00:01:59.310
gonna go out and send the request. 
Now we can see that we have a different
22

23
00:01:59.310 --> 00:02:03.930
data set. So see that we do have some
different names there but it does go out
23

24
00:02:03.930 --> 00:02:10.950
and give us 10 user objects ,10 different
users for our purposes.
24

25
00:02:10.950 --> 00:02:15.090
We can see that, this is a pretty
nice little data model that we have to
25

26
00:02:15.090 --> 00:02:18.569
work with. So this JSON is gonna come
back to us and the some that we can
26

27
00:02:18.569 --> 00:02:23.730
ingest from the the web service. And we
could see that it took about a second to
27

28
00:02:23.730 --> 00:02:28.709
run. We got a status of 200 saying OK
and a couple other things that we can
28

29
00:02:28.709 --> 00:02:34.590
see inside of this. No cookies for us. We
did have a set of headers here. So
29

30
00:02:34.590 --> 00:02:38.519
these are headers that we sent and don't
have any tests available. I've really implied
30

31
00:02:38.519 --> 00:02:42.690
with tests inside a postman.
But you do get to see some interesting
31

32
00:02:42.690 --> 00:02:49.290
stuff. As far as what was sent in it.
And do remember that this is going
32

33
00:02:49.290 --> 00:02:54.569
over the HTTP protocol. And if we wanted
to, we can run this through some type of
33

34
00:02:54.569 --> 00:03:00.540
proxy and see the exact exactly what was
sent. But in this case, we do not need to.
34

35
00:03:00.540 --> 00:03:07.769
I'm gonna show you here. If we
change this to just 2 and you can see
35

36
00:03:07.769 --> 00:03:12.000
how that dynamically changed. So it's
actually kind of a nice feature there.
36

37
00:03:12.000 --> 00:03:16.859
You can edit at either spot but doing it
this way, it's gonna create that URL
37

38
00:03:16.859 --> 00:03:21.480
query string for us automatically when
we set these up. And then, I can toggle
38

39
00:03:21.480 --> 00:03:27.239
that on and off also. Kind of a nice
little feature a postman. And now, let's
39

40
00:03:27.239 --> 00:03:30.690
take a look at the body and we can see
that now we have less data. So we only
40

41
00:03:30.690 --> 00:03:38.459
get two user objects. So we have a male
with a Ms. Kiera. So that's kind of
41

42
00:03:38.459 --> 00:03:42.359
interesting. So this is what happens when
you use randomized data coming back. Now
42

43
00:03:42.359 --> 00:03:48.840
postman is a tool that I often use to
test and exercise RESTful API. It's a
43

44
00:03:48.840 --> 00:03:54.239
really nice tool. If you are being a
client of a REST API, I highly checked
44

45
00:03:54.239 --> 00:03:58.859
to just checking out this tool. It's
a really one of my go-to tool. So it's
45

46
00:03:58.859 --> 00:04:01.620
something that I really enjoy working
with. Now of course the Spring Framework
46

47
00:04:01.620 --> 00:04:05.970
does have a couple different methods for
us to exercise REST APIs. I wanted to
47

48
00:04:05.970 --> 00:04:11.459
show you how to exercise this API
program or through postman first. And
48

49
00:04:11.459 --> 00:04:14.160
then in the rest of the section we're
actually gonna be playing around with
49

50
00:04:14.160 --> 00:04:17.549
its API. So, to work with it more but
we're gonna start doing it
50

51
00:04:17.549 --> 00:04:21.000
programmatically using the tools
with inside the Spring framework. So
51

52
00:04:21.000 --> 00:04:23.200
we've got some really cool stuff coming
up.
52

53
00:04:23.200 --> 00:04:27.430
Next few videos here that I wanna show
you about using the Spring Framework to
53

54
00:04:27.430 --> 00:04:32.490
use and start utilizing data from this
RESTful API.
