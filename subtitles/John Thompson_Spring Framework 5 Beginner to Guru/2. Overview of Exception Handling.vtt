WEBVTT
0
1
00:00:04.640 --> 00:00:08.880
Alright in this video we are going to
talk about exception handling inside a
1

2
00:00:08.880 --> 00:00:13.679
Spring MVC. So we do have a number of
different options we can work with. First
2

3
00:00:13.679 --> 00:00:19.949
I want to talk about the HTTP status
codes. Now we have the 500 series of the
3

4
00:00:19.949 --> 00:00:23.880
status codes and those indicate a server
error and generally these are going to
4

5
00:00:23.880 --> 00:00:27.240
be some type of unhandled exception. So
it's something that went wrong that we
5

6
00:00:27.240 --> 00:00:31.590
weren't expecting to see. So this is
going to be a 500 error. There's actually
6

7
00:00:31.590 --> 00:00:38.520
about two dozen of them and a lot of them are server-side events that deals a lot with
7

8
00:00:38.520 --> 00:00:43.290
like networking and communicating with
other things. The 500 is that's going to
8

9
00:00:43.290 --> 00:00:47.550
be our unhandled exception and that's
primarily the one that we're going to be
9

10
00:00:47.550 --> 00:00:52.170
throwing. So this is where something goes wrong. We weren't expecting an NPE
10

11
00:00:52.170 --> 00:00:56.039
somewhere or something like that. Something that some edge case or
11

12
00:00:56.039 --> 00:00:59.730
something that you weren't expecting to
happen could be like a loss of database
12

13
00:00:59.730 --> 00:01:04.320
connectivity. So something bad, some type
of runtime exception. That's where you're
13

14
00:01:04.320 --> 00:01:09.810
going to be throwing the 500 error code. Now for Spring MVC, the much more
14

15
00:01:09.810 --> 00:01:15.869
interesting one for us is going to be
the 400 series of codes. So these are
15

16
00:01:15.869 --> 00:01:19.590
client-side errors. So the client gave us
something that we weren't expecting.
16

17
00:01:19.590 --> 00:01:25.290
Something went wrong. So the
first one we should talk about is a 400
17

18
00:01:25.290 --> 00:01:29.790
bad request. We got something malformed on that we weren't able to process it
18

19
00:01:29.790 --> 00:01:34.259
and it's like we we got it and we're
saying yeah we can't work with this. 401
19

20
00:01:34.259 --> 00:01:37.140
pretty clear that's an unauthorized
error. You need some type of
20

21
00:01:37.140 --> 00:01:42.840
authentication. 404 is going to be a very
common one where the client requested a
21

22
00:01:42.840 --> 00:01:47.070
resource but we're not finding it. It
could be like a database record so we've
22

23
00:01:47.070 --> 00:01:51.899
been using the recipe example so if they
gave us a recipe ID that we're not
23

24
00:01:51.899 --> 00:01:56.820
expecting. So we'd want to throw out a
404 error to let them know. Our little
24

25
00:01:56.820 --> 00:02:00.750
application right now is not doing that
and we definitely will be changing it to
25

26
00:02:00.750 --> 00:02:06.479
do that. 405 is a method not allowed error. We might have a URL that's mapped and we
26

27
00:02:06.479 --> 00:02:11.370
could have set a constraint on that. So
that only get is allowed and if you did
27

28
00:02:11.370 --> 00:02:14.580
a post or delete to it,
you'd want to be throwing a 405
28

29
00:02:14.580 --> 00:02:20.220
error and that's going to be more common
maybe in web development but more common
29

30
00:02:20.220 --> 00:02:23.940
if we're doing RESTful interfaces. A
couple of other ones that we want to be
30

31
00:02:23.940 --> 00:02:28.520
working with, 409 conflict. I have not
got into this but we can track
31

32
00:02:28.520 --> 00:02:33.900
simultaneous updates. So Hibernate has
the capability to do a version number
32

33
00:02:33.900 --> 00:02:38.370
and if you have two different version
numbers out there and one gets back
33

34
00:02:38.370 --> 00:02:44.280
before the other, you have the capability
of throwing a 409 conflict there. And
34

35
00:02:44.280 --> 00:02:49.980
then 417, I've seen this used a few times
with RESTful interfaces. Some type of
35

36
00:02:49.980 --> 00:02:55.260
expectation so if you are posting back
a JSON object or something and there's a
36

37
00:02:55.260 --> 00:03:00.090
property missing, or something like that,
you might want throw 417 and detail that
37

38
00:03:00.090 --> 00:03:03.800
out. I've seen some people use it that
way and then I just wanted to highlight
38

39
00:03:03.800 --> 00:03:09.960
418. I'm a teapot and literally that is
in the spec. It's an April Fool's joke
39

40
00:03:09.960 --> 00:03:16.020
from the IETF Iternet Engineering Task
Force. I threw that in there in 1988. So I
40

41
00:03:16.020 --> 00:03:20.520
thought that was a little amusing. Now
the one of the most common ones that
41

42
00:03:20.520 --> 00:03:25.140
we're going to be using is ResponseStatus. It allows us to annotate a custom
42

43
00:03:25.140 --> 00:03:29.850
exception class with the HTTP status
that we want returned and this is going
43

44
00:03:29.850 --> 00:03:34.410
to be global to the application. So we
could do like a not found exception and
44

45
00:03:34.410 --> 00:03:38.280
use that throughout our exception or throughout our
45

46
00:03:38.280 --> 00:03:46.410
application and to throw a 404 error. Next up is an ExceptionHandler. This is
46

47
00:03:46.410 --> 00:03:50.280
going to work primarily at the
Controller level and you can define some
47

48
00:03:50.280 --> 00:03:54.900
method within your Controller for an
exception handler for specific exception type.
48

49
00:03:54.900 --> 00:04:00.000
And this gives you a little more control
so you can use it in conjunction with
49

50
00:04:00.000 --> 00:04:06.480
ResponseStatus to set an HTTP status but
you can also return a specific view. So
50

51
00:04:06.480 --> 00:04:10.709
you can get a lot more control here. You
might want to create a view and return
51

52
00:04:10.709 --> 00:04:14.670
back details about the error to view so
that you can see that on the screen.
52

53
00:04:14.670 --> 00:04:19.680
There's a couple schools of thought here
as far as how you're going to do it and
53

54
00:04:19.680 --> 00:04:23.640
it's going to be depending on how you
want to implement it. You might want to
54

55
00:04:23.640 --> 00:04:26.730
return back a clean error page, you might
want to do something like hiding
55

56
00:04:26.730 --> 00:04:30.840
error details and comments on the HTML so you can view that. You might want to make
56

57
00:04:30.840 --> 00:04:34.410
a model based on the profile that
you're doing. So if you're running in
57

58
00:04:34.410 --> 00:04:40.350
like dev or QA you can return back
a lot more details about the error. But if
58

59
00:04:40.350 --> 00:04:44.370
you're running production, you display a
very clean generic error string. So
59

60
00:04:44.370 --> 00:04:48.150
a couple different things that you do
but the ExceptionHandler is what's
60

61
00:04:48.150 --> 00:04:53.510
going to give you access to that control. Next up we have the HandlerException
61

62
00:04:53.510 --> 00:04:59.700
Resolver. So this is an interface within
the Spring MVC framework. It's used
62

63
00:04:59.700 --> 00:05:05.220
primarily internally by Spring MVC and
what's notable about this is that Model
63

64
00:05:05.220 --> 00:05:09.840
is not passed into it and I have the
interface implementation down there at
64

65
00:05:09.840 --> 00:05:15.000
the bottom. And you can see that it takes
in the request response, the handler and
65

66
00:05:15.000 --> 00:05:20.370
the exception. So that this is a part of
the Spring Framework and because the
66

67
00:05:20.370 --> 00:05:24.960
model is not there, we can return back a
Model and View from it. Obviously it is
67

68
00:05:24.960 --> 00:05:28.860
returning back a Model View. But the
working model is not there so that does
68

69
00:05:28.860 --> 00:05:33.450
want to choose what you can do a
little bit. And internal to Spring MVC,
69

70
00:05:33.450 --> 00:05:39.210
there's three implementations of that
interface. The ExceptionHandler
70

71
00:05:39.210 --> 00:05:45.930
ExceptionResolver that matches uncaught
exceptions to the exception handler. So
71

72
00:05:45.930 --> 00:05:48.750
that's how that's implemented underneath
the cover so when you annotate something
72

73
00:05:48.750 --> 00:05:53.730
with the ExceptionHandler, that resolver
is going to be invoked. Then we have the
73

74
00:05:53.730 --> 00:05:57.990
ResponseStatusExceptionResolver. Works
similar but this is going to be looking
74

75
00:05:57.990 --> 00:06:02.250
for things that are uncaught exceptions
matching the ResponseStatus. And then
75

76
00:06:02.250 --> 00:06:07.140
finally we have the DefaultHandlerExceptionResolver. It is going to be a
76

77
00:06:07.140 --> 00:06:13.200
mouthful. This converts standard Spring
exceptions to HTTP status codes and this
77

78
00:06:13.200 --> 00:06:17.040
one's going to be primarily internal to
Spring. So Spring MVC is going to be
78

79
00:06:17.040 --> 00:06:21.470
watching for things and it will throw
errors and then the DefaultHandler
79

80
00:06:21.470 --> 00:06:27.450
ExceptionResolver is going to return
those. Now you can provide as I said
80

81
00:06:27.450 --> 00:06:30.960
before you can provide your own
implementation of the HandlerException
81

82
00:06:30.960 --> 00:06:35.940
Resolver, which is the interface that's
being used internally to Spring MVC. And
82

83
00:06:35.940 --> 00:06:39.770
you want to typically implement this with
Springs ordered
83

84
00:06:39.770 --> 00:06:43.009
interface so that will give you control as to
how the handlers are run or what
84

85
00:06:43.009 --> 00:06:48.169
sequence they run in. I don't see this
implemented too often. Actually I can't
85

86
00:06:48.169 --> 00:06:51.470
remember if I actually implemented it.
I'm sure I probably ran across it at
86

87
00:06:51.470 --> 00:06:55.970
some point but the exception handling
you have within Spring MVC is pretty
87

88
00:06:55.970 --> 00:07:00.139
robust. So you usually don't need to get
down to this level but it is there in
88

89
00:07:00.139 --> 00:07:06.199
case you need to do that. We also have a
simple mapping exception resolver. This
89

90
00:07:06.199 --> 00:07:11.870
is a Spring bean you can define to map
exceptions to specific views. Now you
90

91
00:07:11.870 --> 00:07:14.780
only need to define the exception class
name. You don't need to add in the
91

92
00:07:14.780 --> 00:07:20.150
package and then the view name and you
can also define a default. So this is
92

93
00:07:20.150 --> 00:07:24.919
a handy way if you have some type
of exception that you want to throw and
93

94
00:07:24.919 --> 00:07:29.180
then redirect the user to a specific
view. This is where you implement that so
94

95
00:07:29.180 --> 00:07:33.800
it does give you some nice versatility
and it has no frills. It's going to be a
95

96
00:07:33.800 --> 00:07:37.849
static page and that as far as I know if
I remember right. You can't pass data to
96

97
00:07:37.849 --> 00:07:43.129
it but this is going to be a handy way
to redirect a user to specific
97

98
00:07:43.129 --> 00:07:48.169
informational page if there's an error or a
specific exception. Now you're
98

99
00:07:48.169 --> 00:07:53.360
probably looking at these wandering
which one do I want to use when and the
99

100
00:07:53.360 --> 00:07:57.830
first bullet point is, the answer is
going to be depends. If you're just
100

101
00:07:57.830 --> 00:08:01.699
sending an HTTP status and that is
pretty common, especially if you're doing
101

102
00:08:01.699 --> 00:08:05.060
RESTful type interfaces,
that's when you want to want to use the
102

103
00:08:05.060 --> 00:08:09.169
ResponseStatus. If you need to remap to
View, that's where you're going to use
103

104
00:08:09.169 --> 00:08:12.949
the SimpleMappingExceptionResolver
but if you need something more robust,
104

105
00:08:12.949 --> 00:08:17.270
I'd consider using the ExceptionHandler
on the Controller. That's going to give
105

106
00:08:17.270 --> 00:08:21.680
you the most granular control over all. So
which one you want to be using, it's
106

107
00:08:21.680 --> 00:08:25.250
going to depend on your use case and how
you want to handle that exception. So
107

108
00:08:25.250 --> 00:08:27.139
there's a lot of different ways you can
handle that.
108

109
00:08:27.139 --> 00:08:32.149
But overall Spring MVC as you can see
does have some pretty robust tools and
109

110
00:08:32.149 --> 00:08:36.800
we'll get into a number of examples in
using these exception resolvers coming
110

111
00:08:36.800 --> 00:08:41.240
up in the course. So you can see real
world-ish implementations of
111

112
00:08:41.240 --> 00:08:46.060
these and we'll talk through them in
more detail then.
