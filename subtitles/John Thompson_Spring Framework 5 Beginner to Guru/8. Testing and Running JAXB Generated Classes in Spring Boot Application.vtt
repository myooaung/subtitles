WEBVTT
0
1
00:00:04.670 --> 00:00:09.889
Okay, in this video, we are going to take
a look at testing and running with the
1

2
00:00:09.889 --> 00:00:16.859
JAXB generated classes. I do
run into a couple of nuances here with
2

3
00:00:16.859 --> 00:00:23.430
the testing of these classes. Run into a
couple minor problems. It really has
3

4
00:00:23.430 --> 00:00:27.810
to do with how a multi module maven
build is behaving and some of the
4

5
00:00:27.810 --> 00:00:33.350
refreshing happening under the covers. And
then, I do hit an unexpected problem with
5

6
00:00:33.350 --> 00:00:37.610
Mockito. So, I kind of left the
troubleshooting in for your benefit.
6

7
00:00:37.610 --> 00:00:44.340
I'm going to jump over to the video now and
show you going through in generating
7

8
00:00:44.340 --> 00:00:49.410
the tests. Now, before I get going further,
what I want to do is just double check.
8

9
00:00:49.410 --> 00:00:54.120
We did a pretty major refactoring here,
so let's go ahead and run our tests.
9

10
00:00:54.120 --> 00:00:58.380
So, we're going to run those. Want to make
sure that the test run, then I want to
10

11
00:00:58.380 --> 00:01:03.060
demonstrate running this application
actually with the JAXB generated
11

12
00:01:03.060 --> 00:01:05.820
classes. So, make sure that everything's
still happy.
12

13
00:01:05.820 --> 00:01:11.970
So, our Spring MVC tests are running. It
looks like our Customer did pass. So,
13

14
00:01:11.970 --> 00:01:15.810
as soon as that is done, I'm going to go
ahead and start Spring Boot. So all our
14

15
00:01:15.810 --> 00:01:22.640
tests pass.
Yay! So now, let's come up here
15

16
00:01:23.159 --> 00:01:28.320
and we'll go ahead.
He was already running.
16

17
00:01:28.820 --> 00:01:33.790
Just like this was. So,
let's go ahead. That was my mistake.
17

18
00:01:33.790 --> 00:01:37.920
He's probably not happy. Let's go ahead
and run him again. IntelliJ is lost.
18

19
00:01:38.500 --> 00:01:44.000
Lost its configuration. So, let's close
this. So, Spring Boot was running while I
19

20
00:01:44.000 --> 00:01:47.840
refactor this, so probably not happy
about that at all. So, let's go ahead and
20

21
00:01:47.840 --> 00:01:55.119
close this, and see if we can give
IntelliJ to run him. So, what's happening is, see a little
21

22
00:01:58.100 --> 00:02:03.409
red X there? IntelliJ is looking for it at the
previous project location so should
22

23
00:02:03.409 --> 00:02:08.690
run him from the new location pretty
painlessly, I hope. So, there we go. We are
23

24
00:02:08.690 --> 00:02:12.880
in fact starting up Spring Boot. So that is starting up
24

25
00:02:14.470 --> 00:02:18.630
normally. Let's come over to Postman now.
25

26
00:02:18.680 --> 00:02:24.409
We are going against few. We're still
going to be at api/v1customer, so let's
26

27
00:02:24.409 --> 00:02:30.890
go see. See that run, and now, we can see
there. There's our XML customers
27

28
00:02:30.890 --> 00:02:37.680
customers. So, I don't like that. I wanted
that to be customer.
28

29
00:02:37.680 --> 00:02:42.930
Let's go take a closer look at that. See
if we can fix that real quick. So, that
29

30
00:02:42.930 --> 00:02:47.900
looks okay to me. Double-check here.
30

31
00:02:47.930 --> 00:02:51.250
Generated class here.
31

32
00:02:54.300 --> 00:02:59.550
Okay, so this is getting called customers
and that's getting called customers. So,
32

33
00:02:59.550 --> 00:03:04.090
that's the problem there. That's my
to do list.
33

34
00:03:04.090 --> 00:03:09.459
I'm going to pause this. Look a little
closer. Okay, I realized what happened. I'd
34

35
00:03:09.459 --> 00:03:14.860
taken a little closer look. The XSD was
actually right, but I was working between
35

36
00:03:14.860 --> 00:03:20.709
the two modules and I didn't do a clean
package on the parent. So effectively,
36

37
00:03:20.709 --> 00:03:25.810
what was happening is I was getting a
stale dependency being brought in, so I
37

38
00:03:25.810 --> 00:03:30.910
wasn't getting those changes, and when I
applied those changes, the customer URL
38

39
00:03:30.910 --> 00:03:35.560
was still the underscore. So, if I come
over to Postman, you can see that also. So,
39

40
00:03:35.560 --> 00:03:40.329
the changes that we applied were not
getting picked up. So now, if I come in, I
40

41
00:03:40.329 --> 00:03:45.610
just ran the test so let's go ahead make
sure our tests pass using that new type.
41

42
00:03:45.610 --> 00:03:51.299
Now, know that we are still not. We're
still getting a failure there.
42

43
00:03:54.130 --> 00:03:57.510
firstname should be there.
43

44
00:04:01.060 --> 00:04:05.890
So now, we're getting a null
empty. That's still
44

45
00:04:07.050 --> 00:04:12.150
the customerUrl. Why are you looking for
customerUrl? I'm going to pause this and I
45

46
00:04:12.150 --> 00:04:18.239
get these passing again. Hold on one
second. Okay, I dug in a little bit closer
46

47
00:04:18.239 --> 00:04:23.220
and hit a little weirdness going on. You
may encounter this. I didn't have to do
47

48
00:04:23.220 --> 00:04:29.190
any code changes except for this
customerUrl here. What I did have to do
48

49
00:04:29.190 --> 00:04:34.950
is go and do a clean package. So, I was
getting an error around firstname on
49

50
00:04:34.950 --> 00:04:40.920
one of the tests, and I'm not quite sure
what happened but a clean rebuild redid
50

51
00:04:40.920 --> 00:04:45.990
it or fixed it. I think it was a problem
with the IntelliJ indexing, possibly with
51

52
00:04:45.990 --> 00:04:52.710
some of the changes in the generated code.
But things weren't happy there. But one
52

53
00:04:52.710 --> 00:04:57.990
rule of thumb is if things are failing
and then inside the IDE, being IntelliJ
53

54
00:04:57.990 --> 00:05:02.550
in this case, if things are failing and
it doesn't seem like they should be,
54

55
00:05:02.550 --> 00:05:09.240
always go over to Maven. Do a clean, and
just as a refresher, if you're not
55

56
00:05:09.240 --> 00:05:15.090
familiar with Maven, that clean action is
going to clean out, and you can see
56

57
00:05:15.090 --> 00:05:19.710
everything went red because that clean
deleted those generated classes. Now, I'm
57

58
00:05:19.710 --> 00:05:25.050
going to go ahead and say do a
package. Actually, if I run and
58

59
00:05:25.050 --> 00:05:31.110
install, that will install the jars into
my local Maven repository. It went red like
59

60
00:05:31.110 --> 00:05:34.950
that because I don't have that jar
installed in my repository, so IntelliJ
60

61
00:05:34.950 --> 00:05:40.320
can't locate it. That's why everything's
red. Once this build completes, we
61

62
00:05:40.320 --> 00:05:47.250
will see that everything does pass again.
So, the problems I'm running into are
62

63
00:05:47.250 --> 00:05:53.970
not consistent. So, this here is coming up
and it's saying no. That's happening
63

64
00:05:53.970 --> 00:05:58.410
because a Mockito is returning back a
null value. This matcher isn't working
64

65
00:05:58.410 --> 00:06:04.280
with the JAXB. So, let's go ahead and
run this test again.
65

66
00:06:04.610 --> 00:06:11.090
this should run from Maven properly. This
is kind of a unexpected issue. This Java
66

67
00:06:11.090 --> 00:06:15.159
development sometimes, this is the way
things go. It should work pretty
67

68
00:06:15.159 --> 00:06:20.889
consistently, but we are not getting that. So, I'm going to change
68

69
00:06:22.980 --> 00:06:31.580
this to any.
Now, any, that matcher isn't working. So,
69

70
00:06:31.590 --> 00:06:34.460
run this one more time.
70

71
00:06:37.949 --> 00:06:41.629
Okay, so that is working. I'm going to 
run this one more time than talk while
71

72
00:06:41.629 --> 00:06:47.059
it's going through. So, let's make sure
everything's happening. So, that JAXB
72

73
00:06:47.059 --> 00:06:53.300
annotated class or generated class, for
some reason, Mockito is not happy with
73

74
00:06:53.300 --> 00:06:58.669
that in the matcher. So, I was
matching on the object type and I
74

75
00:06:58.669 --> 00:07:03.919
honestly would expect that to continue
working properly. But it did not in the
75

76
00:07:03.919 --> 00:07:08.300
test. So, that is kind of 
interesting. I'm not sure why Mockito
76

77
00:07:08.300 --> 00:07:12.979
would not be matching that like any
other Java class. I did change it to any
77

78
00:07:12.979 --> 00:07:16.039
matcher. So, I'm going to check it in that
way. I'm really not sure what happened
78

79
00:07:16.039 --> 00:07:22.460
there. Why it's not happy using a matcher
 that way. But now the problem why
79

80
00:07:22.460 --> 00:07:26.629
this was failing is that matcher was
failing. And so, it was returning back a
80

81
00:07:26.629 --> 00:07:31.430
null, which was failing the test. So, when
you got down here to jsonPath, it was
81

82
00:07:31.430 --> 00:07:36.620
looking for firstname on a null object
because of this ultimately failed. But
82

83
00:07:36.620 --> 00:07:40.279
you can see here, I just run the test a
couple times. Hopefully, this doesn't
83

84
00:07:40.279 --> 00:07:44.959
cause you problems. But, the one
update that I did make is changing the
84

85
00:07:44.959 --> 00:07:52.219
matcher here on the Mockito Mock to any.
That's, I honestly, I mean, I've got a lot
85

86
00:07:52.219 --> 00:07:56.959
of experience with Java and I honestly
would not expect that to have caused a
86

87
00:07:56.959 --> 00:08:02.629
problem, just because we are now using a
type from a jar rather than the local
87

88
00:08:02.629 --> 00:08:06.919
project. It should work either way. So,
that's kind of interesting that he was
88

89
00:08:06.919 --> 00:08:11.809
unhappy about that.
So, some nuance with Mockito. But I am
89

90
00:08:11.809 --> 00:08:16.279
going to check in the code. Hope you found
this in value and I do like to leave
90

91
00:08:16.279 --> 00:08:20.509
some of debugging in here, because I know
some instructors like to show you happy
91

92
00:08:20.509 --> 00:08:23.330
path all the time.
I don't always believe in doing that
92

93
00:08:23.330 --> 00:08:27.949
because sometimes errors happen, and I
think there's a learning opportunity to
93

94
00:08:27.949 --> 00:08:31.729
work through errors like this. So, I thank
you for your patience and hope you found
94

95
00:08:31.729 --> 00:08:35.539
value in this. So, one last thing that we
want to do is go ahead and run this
95

96
00:08:35.539 --> 00:08:41.360
application. So, I'm going to come up here
and go down to the rest application
96

97
00:08:41.360 --> 00:08:45.889
and we will run this. So, we'll get it
running within the Spring Boot Context.
97

98
00:08:45.889 --> 00:08:49.550
Again, you can see that this is starting
up and I want to go over to the rest
98

99
00:08:49.550 --> 00:08:53.970
endpoint and
test the output of that. So, we can see
99

100
00:08:53.970 --> 00:09:01.020
that it's now back up. Let's come over to
Postman and we'll do a send there. So, we
100

101
00:09:01.020 --> 00:09:05.220
are still getting a CustomerListDTO 
customers customers. Didn't get
101

102
00:09:05.220 --> 00:09:10.290
that resolved, but we do have the proper
customerUrl being displayed now. So,
102

103
00:09:10.290 --> 00:09:13.980
that's interesting. I'm not sure why that
is happening out. I'll take a look see if
103

104
00:09:13.980 --> 00:09:21.350
I can figure that out. But we can also
now come in and change this to JSON.
104

105
00:09:21.350 --> 00:09:26.170
Let's verify that the JSON view does
work. So now, we can see
105

106
00:09:27.120 --> 00:09:33.770
that we are getting this back from the
JAXB generated class.
