WEBVTT
0
1
00:00:04.490 --> 00:00:09.269
Alright. In this video, we wanna set up
our CategoryService and this is gonna
1

2
00:00:09.269 --> 00:00:13.349
be a service that's gonna work with the
repositories to convert our categories
2

3
00:00:13.349 --> 00:00:18.750
from a Category domain object to our DTO
object. And we're gonna utilize the MapStruct
3

4
00:00:18.750 --> 00:00:22.439
converter that we set up or
Mapper, I should say in the previous
4

5
00:00:22.439 --> 00:00:26.070
videos. Now, what I've done here is I've
created the Interface CategoryService.
5

6
00:00:26.070 --> 00:00:29.160
We're gonna have two methods here that
we're gonna utilize inside of our
6

7
00:00:29.160 --> 00:00:32.730
controller. One we want getAllCategories and then we want to 
7

8
00:00:32.730 --> 00:00:38.010
getCategoryByName. So just as a refresh
here, what we're gonna be implementing is
8

9
00:00:38.010 --> 00:00:43.410
the categories. So we wanna be able to
get all categories, a list of them, and
9

10
00:00:43.410 --> 00:00:50.820
then also, we wanna be able to get them
by the id value. And in this case, the id
10

11
00:00:50.820 --> 00:00:55.770
value there, they're running it by the
String value so by the name value. So
11

12
00:00:55.770 --> 00:00:59.070
we'll show you how to set that up. We've
got a couple interesting things that we
12

13
00:00:59.070 --> 00:01:03.329
need to do to support that look. So we're
trying to create this API just like this
13

14
00:01:03.329 --> 00:01:10.260
one here for the example. So let's
come back over here to IntelliJ, and I've
14

15
00:01:10.260 --> 00:01:14.460
created a test so you can see this. We
got a couple things that we're gonna
15

16
00:01:14.460 --> 00:01:17.580
have to do. We don't have an
implementation of the CategoryService
16

17
00:01:17.580 --> 00:01:27.680
yet. So let's come back over here and
can I do that implement interface. And
17

18
00:01:27.680 --> 00:01:40.259
just going through IntelliJ, so that's
giving us this. Now... so we're gonna use
18

19
00:01:40.259 --> 00:01:48.509
that Mapper and command + N, and let's create a
constructor. Say Ok. So I'll set that up
19

20
00:01:48.509 --> 00:01:56.729
and I'd like to make these final so that
property cannot change. And now, what we
20

21
00:01:56.729 --> 00:02:01.040
need to do is change that in our test.
21

22
00:02:07.119 --> 00:02:11.000
And we can implement it just like that.
So that will set up our Mapper.
22

23
00:02:11.000 --> 00:02:18.560
Now, we also need a findByName here. And I
think I can do this right inside of
23

24
00:02:18.560 --> 00:02:23.959
IntelliJ. We're gonna s
ay create that
method. Now we can see that, that does
24

25
00:02:23.959 --> 00:02:30.230
return that, and we actually want it to
return back a Category. So now, that it's
25

26
00:02:30.230 --> 00:02:35.690
happy, that's created that. In this here,
I don't think we covered it in Spring
26

27
00:02:35.690 --> 00:02:40.000
Data JPA. But we can do Finders like
this. So we're going to do a findByName,
27

28
00:02:40.000 --> 00:02:45.800
and actually, let's make this a little
more friendly. So that makes it the
28

29
00:02:45.800 --> 00:02:51.739
intention of that a little more clear. So
now that is working and let's go ahead
29

30
00:02:51.739 --> 00:02:58.370
and I think our tests will actually run
now. They should both fail because we
30

31
00:02:58.370 --> 00:03:01.940
haven't done any implementations there.
So again, I'm showing you tester and
31

32
00:03:01.940 --> 00:03:10.370
development. So we're getting a null
pointer there. Kind of makes sense. I know
32

33
00:03:10.370 --> 00:03:16.930
what it did wrong. We need to also have.
33

34
00:03:19.299 --> 00:03:26.900
So that was my mistake there. So we wanna wire both of those in. Know that I'll
34

35
00:03:26.900 --> 00:03:36.890
be happy. Our test should not toss an NPE
but they should fail on exceptions. Null
35

36
00:03:36.890 --> 00:03:41.600
pointer again, and really should be
getting a null pointer there. So let's
36

37
00:03:41.600 --> 00:03:47.840
take a look at this by name. He's blown
up right there. So let's take a closer
37

38
00:03:47.840 --> 00:03:52.340
look at this. I'm gonna run this inside
the debugger. Take a closer look, see what
38

39
00:03:52.340 --> 00:03:58.549
I have wrong. And the categoryRepository
is null.
39

40
00:03:58.549 --> 00:04:06.049
So it's not gonna set up. There's my
mistake. Should not have done that. One knocks
40

41
00:04:06.049 --> 00:04:12.680
on this object. Let's do a refresh there.
Rerun it.
41

42
00:04:12.680 --> 00:04:18.780
Now, we can see that I do have a mock
injected for the categoryRepository and
42

43
00:04:18.780 --> 00:04:25.620
finish this. And now, we're getting a
NullPointerException, as we expect it so.
43

44
00:04:25.620 --> 00:04:30.930
But that's on the object, the DTO
object coming back. So that is a good
44

45
00:04:30.930 --> 00:04:36.900
test failure. So let's go ahead and
implement these. So here, we're gonna get
45

46
00:04:36.900 --> 00:04:42.750
a list. So let's do this with Java 8
streams. So let's do the 
46

47
00:04:42.750 --> 00:04:52.590
categoryRepository, findAll. Stream it. We're gonna
use the map function and what we can do
47

48
00:04:52.590 --> 00:05:01.349
is take the categoryMapper. Now we wanna do a collectToList, so that's a nice
48

49
00:05:01.349 --> 00:05:07.880
clean way to implement that, and then,
let's also implement this guy here,
49

50
00:05:07.880 --> 00:05:16.800
categoryMapper CategoryDTO, so that
should implement that closed down the
50

51
00:05:16.800 --> 00:05:24.080
debug window here. Go back to the test
run and see if our tests are passing now.
51

52
00:05:24.080 --> 00:05:28.349
So now, we have two tests that are in the
green and our service layer has been
52

53
00:05:28.349 --> 00:05:33.659
implemented. And in the next video, we'll
set up the controller to consume the
53

54
00:05:33.659 --> 00:05:37.050
service and finally get to the point
where we're returning data to our REST
54

55
00:05:37.050 --> 00:05:40.550
API for those functions.
