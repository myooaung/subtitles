WEBVTT
0
1
00:00:03.710 --> 00:00:09.990
In this video, we are going to go ahead
and tackle number 43 here to implement
1

2
00:00:09.990 --> 00:00:14.820
the Spring Data JPA Pet Service so I'm
going to toggle over to IntelliJ and
2

3
00:00:14.820 --> 00:00:21.449
knock this one out. Just as a reminder,
we have these other services here. We are
3

4
00:00:21.449 --> 00:00:25.410
going to be doing the pet service. This
is a map service. I'm going to split this
4

5
00:00:25.410 --> 00:00:30.300
so we can have some visibility here. I'll
do a split screen as I've been doing for
5

6
00:00:30.300 --> 00:00:36.239
the other ones. We have the pet type
service, and again, what we want to do is
6

7
00:00:36.239 --> 00:00:41.610
be marking our implementations with
service and the profile of Spring Data
7

8
00:00:41.610 --> 00:00:44.910
JPA.
I'm going to go ahead and create the
8

9
00:00:44.910 --> 00:00:49.370
new Java class for this.
We have followed same name
9

10
00:00:49.370 --> 00:00:58.500
convention so I'm going to say PetSD
for Spring Data JpaService, like so.
10

11
00:00:58.500 --> 00:01:02.870
I'm going to paste in those annotations.
11

12
00:01:02.950 --> 00:01:11.850
This is going to need in the PetRepository. Do private final.
12

13
00:01:12.439 --> 00:01:18.170
I'm just saying command N to bring up the
constructor, add that in, and now, we want to
13

14
00:01:18.170 --> 00:01:26.810
say this is going to implement PetService, just like above. We want to
14

15
00:01:26.810 --> 00:01:30.770
implement service now. We're not
extending out our AbstractMapService
15

16
00:01:30.770 --> 00:01:35.869
obviously because we are relying on
Spring Data JPA. If I do option enter
16

17
00:01:35.869 --> 00:01:43.619
implement methods, I can see that brings
that up, and now let's say
17

18
00:01:43.619 --> 00:01:48.799
Set and this is going to be Pet
18

19
00:01:49.100 --> 00:01:51.909
pets
19

20
00:01:55.600 --> 00:02:01.790
and be a new HashSet.
Now what we can do is say our pet
20

21
00:02:01.790 --> 00:02:09.450
Repository, like so. Dot findAll and then
say forEach
21

22
00:02:09.450 --> 00:02:18.660
pets. Add using the method reference, our
nice little Java 8 syntax.
22

23
00:02:18.660 --> 00:02:24.410
Then we want to return back pets, like so.
23

24
00:02:24.660 --> 00:02:31.100
Now I also have a findById, so we will say petRepository
24

25
00:02:31.100 --> 00:02:35.080
findById that Long,
25

26
00:02:35.920 --> 00:02:41.700
and that's going to be aLong.
If we do just get, that's going to
26

27
00:02:41.700 --> 00:02:45.930
return to a Pet but we'll say or else. So
if it's not present, we're going to return
27

28
00:02:45.930 --> 00:02:52.530
back a null, like so.
Save is really easy to implement so
28

29
00:02:52.530 --> 00:02:57.290
we'll say save and that's going to
take in the object.
29

30
00:02:57.730 --> 00:03:04.269
Here, we are going to say petRepository delete and that's going to
30

31
00:03:04.269 --> 00:03:08.230
take in the object so it's going to
delete where that is equal. Then
31

32
00:03:08.230 --> 00:03:15.160
finally, a petRepository will also have
a deleteById. It's going to take in the
32

33
00:03:15.160 --> 00:03:21.310
Long value, the ID property. So that is
the implementation for our Spring Data JPA
33

34
00:03:21.310 --> 00:03:27.700
service for our PetService. Key note
is the profile so we don't get duplicate
34

35
00:03:27.700 --> 00:03:31.870
objects being loaded into the Spring
Context. I showed you earlier in a video
35

36
00:03:31.870 --> 00:03:35.890
that Spring is not too happy when I
can't figure out which one to wire up. So
36

37
00:03:35.890 --> 00:03:40.090
again, this was issue number 43 so I'm
going to go ahead and close that out and
37

38
00:03:40.090 --> 00:03:44.099
we will move on to the next task.
