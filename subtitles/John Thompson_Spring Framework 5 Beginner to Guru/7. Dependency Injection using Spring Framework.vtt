WEBVTT
0
1
00:00:05.310 --> 00:00:10.060
So you just saw how Dependency Injection can be manually performed through a JUnit test.
1

2
00:00:10.090 --> 00:00:16.630
We will be setting up those classes constructing classes and doing the Dependency Injection ourselves via
2

3
00:00:16.630 --> 00:00:18.800
the setup step inside of a test.
3

4
00:00:18.810 --> 00:00:22.710
What I want to do now is start showing you how the Spring Framework is going to do it and I'm going
4

5
00:00:22.710 --> 00:00:28.140
to go through a series of steps here. I want to show you some common error, some common gotchas that
5

6
00:00:28.140 --> 00:00:34.260
you're going to see. Very easy to make mistakes. When you start working with the Spring Framework
6

7
00:00:34.260 --> 00:00:37.800
for a long time correcting this becomes second nature.
7

8
00:00:37.800 --> 00:00:43.020
So I want to show you some very common problems that you're going to encounter when you're performing
8

9
00:00:43.020 --> 00:00:48.480
Dependency Injection because if you do have a dependency and the Spring Framework can not find it it's
9

10
00:00:48.500 --> 00:00:51.750
going to throw an error and stop the program from starting up.
10

11
00:00:51.750 --> 00:00:57.780
So I'm going to step through that inside of IntelliJ and just show you some common errors, some common
11

12
00:00:57.780 --> 00:01:04.050
themes that beginners run into when they first start working with Dependency Injection with inside the
12

13
00:01:04.050 --> 00:01:09.600
Spring Framework. So I'm going to jump over to IntelliJ now and show you how Spring does Dependency
13

14
00:01:09.600 --> 00:01:10.470
Injection.
14

15
00:01:10.470 --> 00:01:15.930
So we're going to go ahead and ask the context for an instance of each one of these controllers.
15

16
00:01:16.040 --> 00:01:19.610
So I'm going to go through this step by step and show you some common error.
16

17
00:01:19.620 --> 00:01:32.170
So if I just come in here and then a system out and say property. And here I'm going to do the property
17

18
00:01:32.170 --> 00:01:33.220
based controller.
18

19
00:01:35.940 --> 00:01:43.580
And here now I do the cast just like we did before. Context get bean and the Bean name is going to
19

20
00:01:43.580 --> 00:01:51.330
be the same as this. So I'm just gonna steal that. Go like this and we are actually going to see a couple
20

21
00:01:51.330 --> 00:01:52.560
of different problems here.
21

22
00:01:52.580 --> 00:01:54.260
When we asked for that.
22

23
00:01:54.260 --> 00:01:59.760
So we want to do a system out from the property and get the greeting out of that property based controller.
23

24
00:01:59.770 --> 00:02:02.630
So now I'm going to go ahead and run this.
24

25
00:02:06.110 --> 00:02:13.730
You can see that Spring did start up and we can see no bean named property injected controller.
25

26
00:02:13.730 --> 00:02:17.690
That's because I have not gone over here and created that.
26

27
00:02:18.110 --> 00:02:21.280
So Spring doesn't know that this is a managed component.
27

28
00:02:21.350 --> 00:02:26.780
So if I come up here and annotate it with the controller annotation we are going to get a different
28

29
00:02:26.840 --> 00:02:27.660
error.
29

30
00:02:27.890 --> 00:02:35.010
So let's go ahead and run that. Now we can see that we are getting a null pointer, null pointer
30

31
00:02:35.010 --> 00:02:35.430
exception.
31

32
00:02:35.430 --> 00:02:42.620
This is something that's really easy to do. Happens to the best of us actually. I'm gonna toggle a breakpoint
32

33
00:02:42.630 --> 00:02:44.630
here and show you what's going on inside the debugger.
33

34
00:02:44.620 --> 00:02:49.800
So now if I just come up here and click on the debugger. We've got a breakpoint toggle there. We're going
34

35
00:02:49.800 --> 00:02:55.100
to stop this in the debugger and we can see that the greeting service is null.
35

36
00:02:55.100 --> 00:03:00.770
So right now Spring doesn't know that it's supposed to be injecting that greeting service.
36

37
00:03:00.860 --> 00:03:06.110
So now if I come up here and I use the autowired annotation.
37

38
00:03:06.380 --> 00:03:11.480
So this tells Spring that I want it to go ahead and inject an instance of the greeting service.
38

39
00:03:12.080 --> 00:03:17.990
We can see that IntelliJ is giving me a warning saying that there's no beans of that type.
39

40
00:03:17.990 --> 00:03:24.860
And if we come back to the run dialog and run it we're going to see that Spring will fail to start.
40

41
00:03:25.440 --> 00:03:31.790
I can say it says that we are trying to autowire something but there's no incidents of that greeting
41

42
00:03:31.790 --> 00:03:37.310
service. That's because we haven't told Spring that the screening service is a Spring managed components.
42

43
00:03:37.310 --> 00:03:44.980
If I come up here and say this is a service. We'll cover the different end stereotypes that we can
43

44
00:03:44.980 --> 00:03:47.240
use inside of Spring further into the course.
44

45
00:03:47.380 --> 00:03:53.620
But effectively there's no effective functional difference between them. Between a service and a controller
45

46
00:03:53.740 --> 00:03:54.820
and a component.
46

47
00:03:54.860 --> 00:03:59.500
These are just different Spring stereotypes that says this is a Spring managed component. It's really
47

48
00:03:59.500 --> 00:04:02.880
just for you to show your intention of how that it's going to be utilized.
48

49
00:04:02.900 --> 00:04:06.650
The framework really doesn't make much of a distinction between these.
49

50
00:04:06.820 --> 00:04:13.470
So now by annotating that as a service, Spring knows to bring an instance of this into its context.
50

51
00:04:13.780 --> 00:04:19.000
And when I run this again, Spring is going to be able to find an instance of the greeting service and
51

52
00:04:19.030 --> 00:04:24.580
execute properly so  you see that I have the property and working the whole hello world out of that.
52

53
00:04:24.660 --> 00:04:32.150
Now I come back to the main class and let's do the same for the setter based setter injected controller
53

54
00:04:40.210 --> 00:04:44.680
So it sets up the setter controller. Lets do this sort of system
54

55
00:04:44.750 --> 00:04:44.960
out.
55

56
00:04:52.560 --> 00:04:57.700
Now when I run this, this is also gonna fail because we haven't set everything up properly yet.
56

57
00:04:57.710 --> 00:05:04.080
We'll step through that. We can see that no bean named setter injected controller is found. So let's come over
57

58
00:05:04.080 --> 00:05:08.070
here and we'll add that as a controller.
58

59
00:05:08.070 --> 00:05:12.110
So now we are telling that this is a controller, a Spring managed controller.
59

60
00:05:12.270 --> 00:05:17.790
Then also what we need to do here is on the setter, we need to add in that autowired. In this autowired
60

61
00:05:17.840 --> 00:05:23.300
annotation is going to tell the Spring Framework that we want a greeting service injected into this bean.
61

62
00:05:23.340 --> 00:05:29.920
So now when I run this we'll see that we get a different result. We can see that the 
62

63
00:05:29.920 --> 00:05:31.310
setter is now working.
63

64
00:05:31.390 --> 00:05:39.390
So let's go complete the constructor injected controller so let's come back over to the application. System
64

65
00:05:39.430 --> 00:05:39.680
out.
65

66
00:05:45.010 --> 00:05:54.010
So that sets up the constructor. Let's scroll was up a little bit. That's where constructor injected controller. 
66

67
00:05:54.060 --> 00:05:54.750
Do cast.
67

68
00:05:59.150 --> 00:06:01.300
I'm just stealing that to save a little bit typing.
68

69
00:06:05.720 --> 00:06:10.610
And of course if I run this, this is going to fail because we haven't told Spring that this is a Spring
69

70
00:06:10.610 --> 00:06:18.320
managed component. Let's just say controller. And here this is a little bit different than the others.
70

71
00:06:18.530 --> 00:06:22.610
The autowired annotation on the constructor that is optional.
71

72
00:06:22.610 --> 00:06:27.500
I think it was in Spring 4.2 that became optional and actually still see a lot of Spring developers
72

73
00:06:27.500 --> 00:06:28.950
have been using the framework for a long time.
73

74
00:06:29.000 --> 00:06:29.750
But not aware of that.
74

75
00:06:29.810 --> 00:06:37.450
Out of habit they keep adding in the autowired annotation but that is no longer required on constructors.
75

76
00:06:37.460 --> 00:06:41.970
So what we can do is save ourselves a little bit of typing and not add in that autowired.
76

77
00:06:42.080 --> 00:06:49.160
And if I run this, you'll see that Spring will automatically detect it and inject in an instance of the
77

78
00:06:49.160 --> 00:06:54.960
greeting service into our constructor without having to specify an autowired annotation there.
78

79
00:06:55.050 --> 00:07:00.830
Let's quickly recap what we changed in this video. On the greeting server itself,
79

80
00:07:00.830 --> 00:07:06.410
we added in the service annotation which tells Spring that this is a Spring managed component and to
80

81
00:07:06.410 --> 00:07:08.110
bring it into the Spring Context.
81

82
00:07:08.120 --> 00:07:13.130
Now we are never actually asking for that, for an instance of that in our main class.
82

83
00:07:13.160 --> 00:07:18.410
So come back to our main class. But we added in to where we're calling on the context to give us a bean
83

84
00:07:18.830 --> 00:07:23.960
of property injected controller, the setter injected controller and the constructor injected controller.
84

85
00:07:24.480 --> 00:07:30.380
Remember on the property injected controller, we have to tell Spring explicitly that we want Spring to
85

86
00:07:30.380 --> 00:07:35.030
go ahead and manage the injection of a greeting service.
86

87
00:07:35.030 --> 00:07:37.190
Same with the setter injected.
87

88
00:07:37.190 --> 00:07:43.190
We have to tell Spring explicitly that we want the setter to be used for that dependency.
88

89
00:07:43.190 --> 00:07:48.650
And then finally on the constructor, since that constructor is only way to instantiate this, we don't
89

90
00:07:48.650 --> 00:07:55.700
have to tell Spring explicitly to utilize the constructor. Here it's automatically going to autowire.
90

91
00:07:55.730 --> 00:07:58.690
So we don't have to provide the autowire annotation.
91

92
00:07:58.900 --> 00:08:05.780
And then when we run our application now we have effectively four different Spring beans being brought
92

93
00:08:05.780 --> 00:08:12.560
into the context so we have the greeting service itself that implantation. Spring is instantiating that.
93

94
00:08:13.180 --> 00:08:17.920
And then it's also scanning and seeing that we have the three four four different controls.
94

95
00:08:17.920 --> 00:08:24.260
I'm sorry that need to be brought into the context and it sees that our property injected controller
95

96
00:08:24.260 --> 00:08:30.350
Setter injected controlling, constructor injected controller, all have a dependency on the greeting service.
96

97
00:08:30.380 --> 00:08:34.820
And when it constructs those beans, it automatically wires those up with that greeting service.
