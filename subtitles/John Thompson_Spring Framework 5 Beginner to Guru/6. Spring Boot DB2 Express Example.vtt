WEBVTT
0
1
00:00:02.149 --> 00:00:08.660
Okay this is a Spring Boot application
for IBM's DB2. So I'm going to show you
1

2
00:00:08.660 --> 00:00:15.230
how to set that up and walk through it
now the DB2 database driver, you need a
2

3
00:00:15.230 --> 00:00:19.790
repository for that if you want to use
the public repo and you can see on line
3

4
00:00:19.790 --> 00:00:27.230
28 there on my Maven POM I've added in the
repository from IBM. So we can go out and
4

5
00:00:27.230 --> 00:00:33.320
get that DB2 jar file which is quite
nice to be able to get it from a public
5

6
00:00:33.320 --> 00:00:37.460
repository node. It's not Maven Central we do have to set up a separate repository
6

7
00:00:37.460 --> 00:00:42.019
for that, now if you're in an Enterprise
setting you might I want to add this in to your
7

8
00:00:42.019 --> 00:00:47.300
own internal Maven repository but for a
public repository you will need to add
8

9
00:00:47.300 --> 00:00:54.289
in this repository as I've done on line
28 to 33 there and then we are able to
9

10
00:00:54.289 --> 00:01:01.420
pick up that dependency on line 36 and
this is for the DB2 database driver and
10

11
00:01:01.420 --> 00:01:07.700
the rest is pretty straightforward for
Spring Boot. Line 43 we're bringing in
11

12
00:01:07.700 --> 00:01:14.000
the starter for Spring Data JPA so we're
going to be leveraging that. Line 47 we
12

13
00:01:14.000 --> 00:01:20.600
have Thymeleaf and then line 51 we have
the starter web so pretty simple
13

14
00:01:20.600 --> 00:01:27.380
web application here that we are dealing
with for Db2. Now to give you a quick tour
14

15
00:01:27.380 --> 00:01:33.140
of the application itself we have a
single Entity. Nothing too complicated
15

16
00:01:33.140 --> 00:01:39.920
here we are just as a Product Entity has an id value , description, price and
16

17
00:01:39.920 --> 00:01:47.540
imageUrl. So not a lot of brains to this
now we are using Spring Data JPA so we
17

18
00:01:47.540 --> 00:01:53.840
set up a CrudRepository for Product and
it's just a simple CRUD repository in
18

19
00:01:53.840 --> 00:01:58.130
case you're not familiar with Spring
Data JPA by extending this out it gives
19

20
00:01:58.130 --> 00:02:04.250
us basic repository commands where we
can save, find, check if something exists
20

21
00:02:04.250 --> 00:02:10.310
get a count or delete an object and this
is all provided by Spring Data JPA so by
21

22
00:02:10.310 --> 00:02:15.849
creating that interface at runtime
bring data JPA is going to give us that
22

23
00:02:15.849 --> 00:02:20.689
implementation of the the repository
which we'll be able to work with. Now
23

24
00:02:20.689 --> 00:02:26.540
just going up from there I've coded a
ProductService which gives us the basic
24

25
00:02:26.540 --> 00:02:31.989
CRUD operations that we're going to be
utilizing within the web application and
25

26
00:02:31.989 --> 00:02:37.370
good habit to always code to an
interface especially when you're writing
26

27
00:02:37.370 --> 00:02:43.730
Spring stuff and here is the
ProductService implementation and you
27

28
00:02:43.730 --> 00:02:48.709
can see that it's taking in the
repository bean and again this is the
28

29
00:02:48.709 --> 00:02:52.639
ProductRepository that's going to
be provided by Spring Data JPA
29

30
00:02:52.639 --> 00:02:58.040
and this is kind of a simple facade over
working with the repositories and the
30

31
00:02:58.040 --> 00:03:03.739
service we are going to wire him into
our controller so I have a Product
31

32
00:03:03.739 --> 00:03:10.099
Controller here and the ProductService
gets wired into the controller and then
32

33
00:03:10.099 --> 00:03:19.000
we're also using a ProductForm so
this is a converter there on line 24
33

34
00:03:19.000 --> 00:03:25.579
so I am using a command object pattern
and this is a simple converter so if
34

35
00:03:25.579 --> 00:03:29.180
you're not familiar with Spring they do
have a converter interface which allows
35

36
00:03:29.180 --> 00:03:35.389
us to do type conversion so we're going
to convert from a ProductForm. Or from
36

37
00:03:35.389 --> 00:03:40.729
a Product to a ProductForm and we'll be
utilizing that in our display on the
37

38
00:03:40.729 --> 00:03:46.639
web application then finally here's the
actual ProductForm so this is what's
38

39
00:03:46.639 --> 00:03:51.109
going to get bound to our web
application of the forms so we'll use
39

40
00:03:51.109 --> 00:03:56.500
this as a backing bean, some people
would call that. Now let's here take a
40

41
00:03:56.500 --> 00:04:04.280
quick look at the template and if you're
not familiar with Thymeleaf this is a
41

42
00:04:04.280 --> 00:04:10.120
basic Thymeleaf template so this is the
list and I do have an entire course on
42

43
00:04:10.120 --> 00:04:14.629
Thymeleaf and the templating language
and what you can do a Thymeleaf so
43

44
00:04:14.629 --> 00:04:18.650
pretty simple stuff here. We're going to list and it'll iterate
44

45
00:04:18.650 --> 00:04:23.750
over a list of products so this is
what's going to come up initially, here's
45

46
00:04:23.750 --> 00:04:27.110
the ProductForm we can see the Thymeleaf commands
46

47
00:04:27.110 --> 00:04:31.819
there as well to see what's going on and
this will display the the form that
47

48
00:04:31.819 --> 00:04:37.009
we'll be working with and then finally a
show screen to show an individual
48

49
00:04:37.009 --> 00:04:42.289
Product. So nothing too
complicated here the next thing we will
49

50
00:04:42.289 --> 00:04:48.500
get before running it is application.properties and point out a couple things
50

51
00:04:48.500 --> 00:04:54.050
here on line 5 is the datasource url of course you want to make this DB2
51

52
00:04:54.050 --> 00:05:02.870
specific localhost and DB2 by default
will run on port 50000 and I am using a
52

53
00:05:02.870 --> 00:05:08.779
database of example so you need to set
that example text to whatever DB2
53

54
00:05:08.779 --> 00:05:14.539
database name you're working with and
then 6 and 7 are passwords, user ID
54

55
00:05:14.539 --> 00:05:20.689
and password and then finally the DB2
driver and a couple niceties here
55

56
00:05:20.689 --> 00:05:25.819
that we're going to have on line 16 we'll
log out the SQL that's being utilized
56

57
00:05:25.819 --> 00:05:31.250
and then the Hibernate setting so we are
doing a create and drop so we'll create and
57

58
00:05:31.250 --> 00:05:37.039
drop the database every time we run,
Hibernate dialect here so I am going to
58

59
00:05:37.039 --> 00:05:41.180
go ahead and run it so the the biggest
thing that you're going to be setting
59

60
00:05:41.180 --> 00:05:46.479
are probably these three lines here as
far as your particular settings for DB2.
60

61
00:05:46.479 --> 00:05:51.409
Now let's go ahead and run this I'm just
going to run the application and we'll
61

62
00:05:51.409 --> 00:05:57.650
we'll go through a little demonstration,
so fairly light Spring application so it
62

63
00:05:57.650 --> 00:06:04.370
does come up pretty quickly we can see
that we did get a SQL error back but it
63

64
00:06:04.370 --> 00:06:10.879
looks like it was just a warning and the database table was created. So let's
64

65
00:06:10.879 --> 00:06:17.839
jog over to the application now I have
it running in Chrome. So I just refresh
65

66
00:06:17.839 --> 00:06:25.969
this so there's no products list so I
can come up with a new product, give them
66

67
00:06:25.969 --> 00:06:34.819
a price of $22, image URL, so there's no no
validations on this at all, it's
67

68
00:06:34.819 --> 00:06:40.729
pretty simple so you can see that that
does get created we'll get a product ID
68

69
00:06:40.729 --> 00:06:46.099
listed, I can come back to the list
screen and we can see that that new
69

70
00:06:46.099 --> 00:06:52.270
product is there I can come in and edit
that and let's say new product 3333 and
70

71
00:06:52.270 --> 00:06:58.249
I'm going to do 7777 there on the URL
just to see a change we can see that did
71

72
00:06:58.249 --> 00:07:02.990
change in fact now I'll come back to the
list screen and we can see that the
72

73
00:07:02.990 --> 00:07:09.020
changes did a occur and I can even
come in and do a delete operation and
73

74
00:07:09.020 --> 00:07:14.270
since there's no products to list we
don't list out the table but we still
74

75
00:07:14.270 --> 00:07:18.229
have the link to create a product so
pretty simple little web
75

76
00:07:18.229 --> 00:07:24.939
application using IBM's DB2 on the
backend via Spring Boot.
