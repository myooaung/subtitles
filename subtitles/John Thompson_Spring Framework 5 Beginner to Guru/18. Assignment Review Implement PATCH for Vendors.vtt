WEBVTT
0
1
00:00:03.950 --> 00:00:07.859
Alright! In this video, we are going to
take a look at implementing the Patch
1

2
00:00:07.859 --> 00:00:12.840
Mapping, but this time, for vendors. And so,
it's going to follow along the same
2

3
00:00:12.840 --> 00:00:17.100
template, that we set up for categories,
but this time, we're going to go ahead
3

4
00:00:17.100 --> 00:00:20.550
and do the implementation for a vendors.
I'm going to step you through that. So,
4

5
00:00:20.550 --> 00:00:25.410
first thing we want to do is write our
test. I'm going to bring this up and I'm
5

6
00:00:25.410 --> 00:00:29.400
going to go to a split screen on this again,
so I'm going to split it horizontally and
6

7
00:00:29.400 --> 00:00:35.670
bring up our category patch test up here.
So here, remember, we had testPatchWith
7

8
00:00:35.670 --> 00:00:40.260
Changes and testPatchNoChanges. So,
let's go ahead and we'll get those
8

9
00:00:40.260 --> 00:00:45.120
implemented for this. And remember, it's
very similar to the update method. So, I'm
9

10
00:00:45.120 --> 00:00:47.960
going to copy that over
10

11
00:00:49.440 --> 00:00:56.480
and let's do a testPachVendor, and we will say with changes.
11

12
00:00:56.480 --> 00:01:02.510
I'm going to hold off on
implementing the other methods right now
12

13
00:01:02.510 --> 00:01:07.370
because I don't want to see it fail.
We'll go ahead and do that. So, let's
13

14
00:01:07.370 --> 00:01:12.560
change this to patch. We are going to
do a patch by some ID. And of course, this
14

15
00:01:12.560 --> 00:01:16.820
will fail right now because we don't
have the VendorController implemented.
15

16
00:01:16.820 --> 00:01:22.640
So, let's go ahead and implement that
method inside the VendorController. I'm
16

17
00:01:22.640 --> 00:01:25.610
going to bring up the CategoryController, as well. So we can see here, I
17

18
00:01:25.610 --> 00:01:31.479
have the PatchMapping. Let's grab
this and we will cut and paste. And
18

19
00:01:31.479 --> 00:01:37.520
remember, cut and paste as evil. It really
can get you in a lot of trouble but I am
19

20
00:01:37.520 --> 00:01:42.250
just expediting things here a little bit.
20

21
00:01:42.810 --> 00:01:46.220
Let's do a patch here. So exactly
21

22
00:01:46.470 --> 00:01:51.180
the same method signature, so
we're going to take in the String id, Vendor.
22

23
00:01:51.180 --> 00:02:00.380
And now, here, let's go ahead and say
vendor foundVendor
23

24
00:02:03.540 --> 00:02:08.340
and here again, we are as reactive so we
need to a block on that. So, we're going
24

25
00:02:08.340 --> 00:02:14.490
to go in and tell it to block, which will
give us the Vendor object. Let's
25

26
00:02:14.490 --> 00:02:18.500
simple a little bit of logic here.
26

27
00:02:22.580 --> 00:02:25.550
Now here, we're saying that the first
names are different. We're going to go
27

28
00:02:25.550 --> 00:02:31.390
ahead and patch it. So here, we want to
say foundVendor.
28

29
00:02:33.849 --> 00:02:37.870
So, we're going to set it into the Vendor
object, that was passed in. I'm not going to
29

30
00:02:37.870 --> 00:02:42.040
go through and implement conditional
logic on each property here. Primarily, I
30

31
00:02:42.040 --> 00:02:46.120
want to show you how to set up the patch
method so the business logic would be
31

32
00:02:46.120 --> 00:02:49.599
variable by the object that we're
dealing with. So, I'm not going to
32

33
00:02:49.599 --> 00:02:53.680
implement every property on the Vendor
object at this point in time. If you want
33

34
00:02:53.680 --> 00:02:58.569
to do that, go right ahead.
Could be a fun coding exercise. Now here,
34

35
00:02:58.569 --> 00:03:01.469
we're going to say return.
35

36
00:03:05.900 --> 00:03:11.150
So remember, we are going to save it, and
the save option is going to return
36

37
00:03:11.150 --> 00:03:16.610
back a Mono of that. So now here, if we
fall through our conditional logic on
37

38
00:03:16.610 --> 00:03:23.520
the patch, what we want to do is just
simply return back a new Mono
38

39
00:03:23.520 --> 00:03:28.530
of the foundVendor.
So, that's going to say, basically, if our
39

40
00:03:28.530 --> 00:03:31.080
conditional logic, if I implemented
everything for all the different
40

41
00:03:31.080 --> 00:03:35.310
properties on the Vendor object, and we
didn't do any changes, we just want to
41

42
00:03:35.310 --> 00:03:39.390
return back the foundVendor because
you patched something and there's no
42

43
00:03:39.390 --> 00:03:42.480
changes that needed to occur. We're just
going to return back what we already
43

44
00:03:42.480 --> 00:03:46.230
have in the database. So, that's perfectly
fine to do because we didn't make any
44

45
00:03:46.230 --> 00:03:52.260
changes. But here, on line 54, if we do
make changes, we want to return back the
45

46
00:03:52.260 --> 00:03:57.360
saved object that has been updated with
the patch to values. So, that works
46

47
00:03:57.360 --> 00:04:02.480
there. So, let's go take a closer look at
our test. And this guy is going to fail.
47

48
00:04:02.480 --> 00:04:08.310
And we know why already. Because we
are going to get a null object coming back
48

49
00:04:08.310 --> 00:04:13.560
out of that. So, we can see that we have a
500 internal server error, and that is
49

50
00:04:13.560 --> 00:04:19.260
because we are getting a null property
coming back. So, what happened is on the
50

51
00:04:19.260 --> 00:04:24.240
vendorRepository findById, that's
returning back in null because we didn't
51

52
00:04:24.240 --> 00:04:29.040
implement that in Mockito yet, so that's
a null object. Right here on the block,
52

53
00:04:29.040 --> 00:04:33.030
that's why we're tossing that
NPE. So, let's go ahead and implement that
53

54
00:04:33.030 --> 00:04:35.240
now.
54

55
00:04:37.550 --> 00:04:43.690
And also, a part of the assignment
was to bring these into static imports.
55

56
00:04:43.690 --> 00:04:48.850
So, that definitely is going to make our
code nice and clean.
56

57
00:04:48.850 --> 00:04:52.230
So now, I would just say given.
57

58
00:04:52.500 --> 00:04:57.650
findById will. We'll say anyString.
58

59
00:04:58.690 --> 00:05:02.370
It's going to return back.
59

60
00:05:06.120 --> 00:05:11.340
So, it's going to return back an empty
Vendor object.
60

61
00:05:11.340 --> 00:05:20.300
In here, we are testing with changes. So, what
we want to say here, has changed this,
61

62
00:05:22.250 --> 00:05:26.210
and actually, with this Mono, let's
change this so it would make it a little
62

63
00:05:26.210 --> 00:05:30.790
more clear. Say firstName.
63

64
00:05:31.080 --> 00:05:36.360
So the vendorRepository is going to return
back a Mono of Vendor with the firstName
64

65
00:05:36.360 --> 00:05:42.300
of Jimmy, and the Mono that we're going
to pass in to update is going to have a
65

66
00:05:42.300 --> 00:05:47.190
firstName of Jim, which is going to
cause us to update. Now, we also want to
66

67
00:05:47.190 --> 00:05:52.979
verify that. So, remember here, we're
saying verify. We don't want to save that.
67

68
00:05:52.979 --> 00:05:57.330
But here, we do want to verify the
save action has occurred. So, let's go
68

69
00:05:57.330 --> 00:06:02.539
ahead and make sure that our method
returns back a save.
69

70
00:06:06.510 --> 00:06:11.610
And any is going to work with. We could
do more explicit testing on that. So,
70

71
00:06:11.610 --> 00:06:16.010
let's go ahead and run this now. Make
sure that runs,
71

72
00:06:17.020 --> 00:06:23.650
and that did pass. So now, let's go ahead
and copy this. Modify that to make
72

73
00:06:23.650 --> 00:06:29.080
sure that it behaves properly when
there's no changes. So, we'll change this
73

74
00:06:29.080 --> 00:06:34.300
to without changes. And here, let's make
this Jimmy.
74

75
00:06:34.300 --> 00:06:40.300
So now, we're going to pass, just to
recap here, we have a given vendor
75

76
00:06:40.300 --> 00:06:44.830
Repository, findById. It's going to return
back a Vendor object with the firstName
76

77
00:06:44.830 --> 00:06:50.290
of Jimmy, and we're going to pass in a
Vendor object to update, but he's also
77

78
00:06:50.290 --> 00:06:54.790
going to have the firstName of Jimmy. So, no
update should occur. So, we are going to
78

79
00:06:54.790 --> 00:06:57.780
say here
79

80
00:07:00.090 --> 00:07:05.220
to make sure that that never occurs. So,
that save method is never going to occur
80

81
00:07:05.220 --> 00:07:08.720
on this. Let's go ahead and run that.
81

82
00:07:13.780 --> 00:07:18.090
And this did run. That looks like.
82

83
00:07:21.330 --> 00:07:25.770
So, that actually did run. So, let's
take a closer look at this. So, I'm going to
83

84
00:07:25.770 --> 00:07:30.599
set a breakpoint here. Let's go ahead and
run that now. I'm going to run it in the
84

85
00:07:30.599 --> 00:07:35.699
debugger and take a closer look. That
foundVendor get firstName, vendor
85

86
00:07:35.699 --> 00:07:41.290
get firstName.
So, we are
86

87
00:07:42.030 --> 00:07:46.290
in the debugger this time. That was my
mistake. I clicked on the rerun failed
87

88
00:07:46.290 --> 00:07:51.810
test rather than right rerun in
debugger. So now, I'm at the breakpoint so
88

89
00:07:51.810 --> 00:07:57.440
I have foundVendor get firstName. So,
firstName is Jimmy. The vendor
89

90
00:07:58.070 --> 00:08:01.030
is also Jimmy.
90

91
00:08:02.050 --> 00:08:06.720
So, let's change this implementation here.
91

92
00:08:07.550 --> 00:08:13.069
Maybe that equals. Implementation is not
behaving the way we want it.
92

93
00:08:13.069 --> 00:08:16.809
Let's rerun this.
93

94
00:08:18.279 --> 00:08:22.719
Okay. So, that not equals was not happy
there. So I changed it to the actual
94

95
00:08:22.719 --> 00:08:28.089
equals, we're going to test the String
equality there. So now, they're
95

96
00:08:28.089 --> 00:08:31.569
functioning properly. So, that was my
mistake. That was a kind of a rookie move
96

97
00:08:31.569 --> 00:08:37.209
there, so should not caught that. So now,
let's go ahead. Go back here. Actually,
97

98
00:08:37.209 --> 00:08:40.379
let's run all our tests. Make sure all
98

99
00:08:41.969 --> 00:08:45.199
our tests are now passing.
99

100
00:08:46.290 --> 00:08:51.209
Let's go ahead and just recap this real
quick here. Okay. So, down here, on
100

101
00:08:51.209 --> 00:08:57.180
line 46, we implemented a PatchMapping
going against that api/v1/vendors ID
101

102
00:08:57.180 --> 00:09:02.009
value. We're going to strip out the ID
value and bring that ID int and we're
102

103
00:09:02.009 --> 00:09:07.500
going to look for an existing vendor based
on the ID value. Then, on 51, that's
103

104
00:09:07.500 --> 00:09:12.240
where I'm going to implement my logic to
see if those properties have changed in
104

105
00:09:12.240 --> 00:09:16.769
the vendor statement. And this section of
logic here, normally, I would extract that
105

106
00:09:16.769 --> 00:09:21.089
out into a service layer and handle all
this interaction with the repository and
106

107
00:09:21.089 --> 00:09:25.199
stuff into a service layer. But for this
example here, this is perfectly fine
107

108
00:09:25.199 --> 00:09:30.329
to do in this example. But if I was
writing this for real code, just not for
108

109
00:09:30.329 --> 00:09:33.389
demonstration code, I would move this
into a service layer because that is a
109

110
00:09:33.389 --> 00:09:39.000
much better practice to be doing. Here,
this is my logic. Obviously, Vendor has
110

111
00:09:39.000 --> 00:09:42.269
more properties in it. I'm not
implementing those in this
111

112
00:09:42.269 --> 00:09:48.240
demonstration. You can, if you want. Add
in some more enhanced logic. So, if we do
112

113
00:09:48.240 --> 00:09:52.860
the update, we are going to return back
the updated logic. If we fall through our
113

114
00:09:52.860 --> 00:09:56.370
logic, we're just going to return back
the object that we found from the
114

115
00:09:56.370 --> 00:10:02.639
database. So, in this case, it's
MongoDB. And then, in the test, we
115

116
00:10:02.639 --> 00:10:08.339
implement two test here. You can see one
is with changes, and here, we're verifying
116

117
00:10:08.339 --> 00:10:13.019
that vendorRepository save is called so
that we do save it. And then, we're also
117

118
00:10:13.019 --> 00:10:17.670
testing the logic path without changes
and we are making sure that the vendor
118

119
00:10:17.670 --> 00:10:21.510
Repository save method is not called
because we should not be persisting it,
119

120
00:10:21.510 --> 00:10:25.980
so it's making sure that our logic, and
you saw there, as I was recording the
120

121
00:10:25.980 --> 00:10:31.019
video, my logic was bad on equals method.
So, that unit test did catch that error
121

122
00:10:31.019 --> 00:10:35.730
in my programming. So, a nice example
there of how that unit test actually
122

123
00:10:35.730 --> 00:10:40.279
enhanced the quality of the code that
I'm writing.
