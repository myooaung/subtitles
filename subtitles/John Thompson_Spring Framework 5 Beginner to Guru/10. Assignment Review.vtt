WEBVTT
0
1
00:00:09.320 --> 00:00:15.990
Okay. Our assignment was to stand up a
RabbitMQ instance using Docker. And what
1

2
00:00:15.990 --> 00:00:19.859
I have up on the screen here, is the
official repository for RabbitMQ from
2

3
00:00:19.859 --> 00:00:23.730
Docker Hub. We want to take a look at
a couple things. So I'm going to come
3

4
00:00:23.730 --> 00:00:29.000
over here, and there's several tags that
we want to use, and if we just use
4

5
00:00:29.000 --> 00:00:33.600
RabbitMQ, we are going to get the base
Rabbit image, without the management
5

6
00:00:33.600 --> 00:00:38.850
console. The assignment was to set
do the management console, so we
6

7
00:00:38.850 --> 00:00:42.059
definitely want to get that management
console in there, so we can work with
7

8
00:00:42.059 --> 00:00:47.190
that. And if I come over here... if I
come over here, I'm going to look at the
8

9
00:00:47.190 --> 00:00:52.890
base image. I have that up in
the first tab here. So you can see this
9

10
00:00:52.890 --> 00:00:58.489
is a much more robust Docker file, than
what we've seen in the past.
10

11
00:00:58.489 --> 00:01:02.550
There's a number of things here
that I want to point out. So you can see
11

12
00:01:02.550 --> 00:01:08.340
that we're doing a run set -x, and then
the slash, and this is a trick, I don't
12

13
00:01:08.340 --> 00:01:11.100
know if I explained it before, but this
is a trick where you run multiple
13

14
00:01:11.100 --> 00:01:17.040
commands as one command. This will
create a single layer within that Docker
14

15
00:01:17.040 --> 00:01:21.180
image. So that's an important trick
as we build out Docker images. So if we
15

16
00:01:21.180 --> 00:01:25.710
can lump up commands like, that this is
actually pretty beneficial to do. I'm
16

17
00:01:25.710 --> 00:01:28.140
not going to go through everything
because with this isn't a how to
17

18
00:01:28.140 --> 00:01:32.610
install RabbitMQ. But this is all the
stuff that they're doing to get that
18

19
00:01:32.610 --> 00:01:39.810
Rabbit image ready. We can see
down on line 92, that's something I want
19

20
00:01:39.810 --> 00:01:44.579
to point out too, to you. These are the
port's that RabbitMQ is going to expose.
20

21
00:01:44.579 --> 00:01:49.799
I'm not a RabbitMQ expert, but when
we're connecting to the queues, we are
21

22
00:01:49.799 --> 00:01:56.189
going to be using 5671 and 5672. So
those are our very key things that we
22

23
00:01:56.189 --> 00:02:00.630
are interested in, as Spring Developers,
and then Java developers is bail talk to
23

24
00:02:00.630 --> 00:02:05.100
this over those ports. That's what our
code will be connecting to. So, those two
24

25
00:02:05.100 --> 00:02:11.300
ports will need to be exposed, when we
run this. Now this did not include the
25

26
00:02:11.300 --> 00:02:16.190
Rabbit management
console. In this, we need to specify the
26

27
00:02:16.190 --> 00:02:24.650
tag. So the 3.6.6 is the latest version
right now. So that...this is a, I am recording
27

28
00:02:24.650 --> 00:02:28.610
this in February 2017, so imagine you're
going to be watching it well into the
28

29
00:02:28.610 --> 00:02:32.209
future, so you want to take a look and
make make sure that you're grabbing the
29

30
00:02:32.209 --> 00:02:36.470
latest sort. This version should work
just fine for you too. But this is a
30

31
00:02:36.470 --> 00:02:45.230
specific tag. And now, I'm pulling up the
Docker file for the MQ, like toggle
31

32
00:02:45.230 --> 00:02:50.900
back over there. So this management tag
here, I'm pulling it up in this tab here
32

33
00:02:50.900 --> 00:02:57.530
on Chrome. And now, we can see that this
Docker file is saying from RabbitMQ, so
33

34
00:02:57.530 --> 00:03:03.110
that previous Docker file, that is going
to build upon that on a Docker file and
34

35
00:03:03.110 --> 00:03:09.170
now it's going to add in the Rabbit
management console and exposed to more
35

36
00:03:09.170 --> 00:03:15.200
ports 15671 15672. Now these two
36

37
00:03:15.200 --> 00:03:20.600
are important ports to expose. This is
what opens up the console. If I come back
37

38
00:03:20.600 --> 00:03:25.100
over here, to the official documentation,
I can scroll down and it talks about the
38

39
00:03:25.100 --> 00:03:30.170
management plugin, which is exactly what
we want and it says that we can access
39

40
00:03:30.170 --> 00:03:37.700
it on 15672. Now, one
thing that's common, our Java stuff
40

41
00:03:37.700 --> 00:03:43.010
usually runs on port 8080, and you can
see right here, they're saying to do a
41

42
00:03:43.010 --> 00:03:51.170
port mapping. So that minus p will take
the localhost 8080, whatever your
42

43
00:03:51.170 --> 00:03:58.579
localhost is, your dev machine, and
join that to the container port of
43

44
00:03:58.579 --> 00:04:02.690
15672. So that's a nice
little trick. So you can see there, it's
44

45
00:04:02.690 --> 00:04:07.340
saying now, you can go to localhost or
the host IP of 8080 and your browser and
45

46
00:04:07.340 --> 00:04:11.269
get to the management console. So that's
a quick overview of what we need to do
46

47
00:04:11.269 --> 00:04:18.260
for this assignment. Now, let's come over
here and I've cheated and I have the
47

48
00:04:18.260 --> 00:04:21.950
command here. I want to go
through this command. So to reiterate
48

49
00:04:21.950 --> 00:04:25.810
some of the things here. So we have docker run
49

50
00:04:25.810 --> 00:04:31.900
so we can run it, - d says to run it in the
background. Now a hostname, that gives
50

51
00:04:31.900 --> 00:04:37.870
the container a host name of guru-rabbit, and I'm going to also do a name some
51

52
00:04:37.870 --> 00:04:43.780
rabbit. Now that the important part is
the port mapping. So the - p 8080:15672
52

53
00:04:43.780 --> 00:04:47.680
that maps out the Management
Console and then remember I said there's
53

54
00:04:47.680 --> 00:04:52.810
two other ports, the 5671 and 5672, that we are going
54

55
00:04:52.810 --> 00:04:59.169
to use be talking to RabbitMQ. And now, I'm
specifying a tag there. So I have
55

56
00:04:59.169 --> 00:05:05.590
RabbitMQ management:3-management. So that's going to bring in the
56

57
00:05:05.590 --> 00:05:11.290
Docker image. So just to reiterate, come
over here, it is going to pull down this
57

58
00:05:11.290 --> 00:05:16.210
Docker image from Docker Hub. So this is
tagged with that. So let's go back up
58

59
00:05:16.210 --> 00:05:21.610
here to the top and it's telling us that
these are the tags that are available.
59

60
00:05:21.610 --> 00:05:26.290
So, if we didn't specify any tag, we'd get
the latest without the management
60

61
00:05:26.290 --> 00:05:32.530
console but we want the the management
console. So come back over here, and we'll
61

62
00:05:32.530 --> 00:05:39.520
run those, click outside of that. Now I'm
going to hit enter, and we could see that
62

63
00:05:39.520 --> 00:05:43.510
saying it's unable to find that
image locally. Now it's going up to
63

64
00:05:43.510 --> 00:05:49.570
Docker hub and downloading the layers,
that make up that image. You can see
64

65
00:05:49.570 --> 00:05:54.190
it's going down pulling them. It's just
going to take a minute or two and this
65

66
00:05:54.190 --> 00:05:58.090
is only going to happen at the first time that
we run it. Now let me demonstrate that
66

67
00:05:58.090 --> 00:06:04.870
for you here in a second. So see that
things are downloading just fine. We're
67

68
00:06:04.870 --> 00:06:13.560
almost done. Now, as I downloaded it
and it is running the image, now if I do
68

69
00:06:13.560 --> 00:06:19.539
docker ps to see running images, you
see I have two images running right now.
69

70
00:06:19.539 --> 00:06:24.880
One of them is the RabbitMQ and I want
to point out here, remember we're talking
70

71
00:06:24.880 --> 00:06:30.789
about the the naming of containers,
here's this long guy here, the 3
71

72
00:06:30.789 --> 00:06:36.940
8e1a, and we can see that this here
is now the container ID. I'm going to
72

73
00:06:36.940 --> 00:06:43.099
copy that.
Now if I do a docker kill, I'm going to shut
73

74
00:06:43.099 --> 00:06:49.069
down that. Now that's gone away. And if I
come back here, I'm just sitting up arrow
74

75
00:06:49.069 --> 00:06:53.900
if you're not familiar with UNIX or
Linux. Now we can see, I got the command
75

76
00:06:53.900 --> 00:07:01.280
back up. I'm going to hit this again. Oop..
sorry, kind of flipped, so I need to.. I'm
76

77
00:07:01.280 --> 00:07:04.639
going to give it a quick new name because I
didn't, I didn't remove that other
77

78
00:07:04.639 --> 00:07:12.110
container and let's call it some-rabbit2. Now we're going to create a new
78

79
00:07:12.110 --> 00:07:16.729
container and we see that I have a new
hash value here. I know that container
79

80
00:07:16.729 --> 00:07:24.860
running. I do the docker ps, you can see I
now have a new RabbitMQ container
80

81
00:07:24.860 --> 00:07:29.240
running. Okay, you can see how easy it was
to get RabbitMQ up and running
81

82
00:07:29.240 --> 00:07:33.440
out of Docker container. Now I picked out
Rabbit specifically so we could have a
82

83
00:07:33.440 --> 00:07:37.099
little bit more of a challenging use
case and mapping out the different ports
83

84
00:07:37.099 --> 00:07:42.050
and a specific tag. So now you can see
how you can pull down different tags and
84

85
00:07:42.050 --> 00:07:46.190
how things are inherited and you can set
up multiple port mappings. Now we could
85

86
00:07:46.190 --> 00:07:49.879
get a little bit more robust with Rabbit
and set up some local storage. So I'm
86

87
00:07:49.879 --> 00:07:55.029
going to give you that opportunity in a
future assignment.
