WEBVTT
0
1
00:00:04.100 --> 00:00:09.269
In this video, we are going to tackle
number 41 here, implementing the Spring
1

2
00:00:09.269 --> 00:00:15.660
Data JPA service for vets. This is issue
number 41. Assign that to myself and let's
2

3
00:00:15.660 --> 00:00:19.670
jump over to IntelliJ and get started on
this.
3

4
00:00:19.720 --> 00:00:26.140
What we're going to do is implement
the Spring Data JPA equivalent of this
4

5
00:00:26.140 --> 00:00:30.910
guy here, so I'm going to go ahead and
split this. It's going to be a little
5

6
00:00:30.910 --> 00:00:36.040
bit easier to follow and then the owners.
It's a simpler. I'm going to come in
6

7
00:00:36.040 --> 00:00:44.350
here and come down here. Say new class
and we will say Vet. Follow the same
7

8
00:00:44.350 --> 00:00:50.190
naming SD JPA service
like
8

9
00:00:50.640 --> 00:00:56.340
so. We will annotate this as a
Service, so that's a Spring stereotype.
9

10
00:00:56.340 --> 00:01:01.500
Then just like here, we're going to
also add in that profile so this is
10

11
00:01:01.500 --> 00:01:07.100
only got to run with the Spring Data JPA
profile active. I'm going to copy that
11

12
00:01:07.100 --> 00:01:14.030
like so and this is going to implement
the VetService.
12

13
00:01:15.350 --> 00:01:23.620
Let me expand that out a little bit.
Come down here and say implement methods.
13

14
00:01:23.620 --> 00:01:33.640
IntelliJ will provide a stubs for all
that. Here, we want the VetRepository
14

15
00:01:37.290 --> 00:01:43.850
like so. I'm going to try to get away
implementing this service repository so
15

16
00:01:43.850 --> 00:01:48.650
I'm not quite sure if we have unsaved
services. I'm not 100% sure how things
16

17
00:01:48.650 --> 00:01:53.930
will behave or if we actually need 
that, so I'm going to leave it as is for
17

18
00:01:53.930 --> 00:01:59.960
right now. We may have to revisit
this and set up the constructor there. So
18

19
00:01:59.960 --> 00:02:06.100
now, we'll inject that and now we want to
return back a Set.
19

20
00:02:06.420 --> 00:02:12.690
So remember here, we basically created a
new HashSet to find all and then
20

21
00:02:12.690 --> 00:02:16.959
iterated over it so we can follow that
same pattern here.
21

22
00:02:16.959 --> 00:02:20.310
We're going to say
22

23
00:02:21.080 --> 00:02:24.010
Set
23

24
00:02:28.640 --> 00:02:35.100
new HashSet.
Now, we can save that vetRepository find
24

25
00:02:35.100 --> 00:02:46.020
All forEach and now we can say that's
calling colon colon ad like so, and then we just
25

26
00:02:46.020 --> 00:02:50.650
return back the vets. That is
our Set. So pretty simple
26

27
00:02:50.650 --> 00:02:58.750
implementation of that. Now, we have the findById(). Remember here, the findById(), we
27

28
00:02:58.750 --> 00:03:02.740
are returning back an optional, so that
is a Spring Data thing. We are going
28

29
00:03:02.740 --> 00:03:10.390
to do that. So now, we can say vetRepository.findById(), pass in that
29

30
00:03:10.390 --> 00:03:12.690
aLong,
30

31
00:03:12.819 --> 00:03:20.629
and now, we could say or or else
return back a null. This kind of
31

32
00:03:20.629 --> 00:03:24.200
breaks the functional model doing it
like this but this is kind of how I want
32

33
00:03:24.200 --> 00:03:27.980
this application would behave at this
time. We could do something a little more
33

34
00:03:27.980 --> 00:03:32.599
elegant in there further down the road,
maybe. So now here, we want to implement
34

35
00:03:32.599 --> 00:03:37.489
the save method, so we're going to say vetRepository save that takes in the
35

36
00:03:37.489 --> 00:03:43.190
object, which is a Vet and the save
method also returns back the saved vet. So
36

37
00:03:43.190 --> 00:03:49.090
exactly what we want there, and again,
that this here, if we have unsaved
37

38
00:03:49.090 --> 00:03:55.370
specialties on it, we may hit a snag. So
if we do, we will address that at some
38

39
00:03:55.370 --> 00:03:59.209
point in the future. Then we have
that vetRepository.delete. This is
39

40
00:03:59.209 --> 00:04:03.680
going to take in the object. The
final method that we need to implement
40

41
00:04:03.680 --> 00:04:11.060
here is vetRepository delete but by ID.
It's going to take in a Long value.
41

42
00:04:11.060 --> 00:04:16.280
That completes the implementation,
pretty simple implementation, fairly
42

43
00:04:16.280 --> 00:04:21.320
cookie-cutter of the owner JPA service.
The important thing here is that we
43

44
00:04:21.320 --> 00:04:25.789
are setting a profile of Spring Data JPA
so when the Spring context comes up we're
44

45
00:04:25.789 --> 00:04:29.380
not loading two of them in.
