WEBVTT
0
1
00:00:04.580 --> 00:00:09.240
Alright so in this video we are going to
look at displaying an image from the
1

2
00:00:09.240 --> 00:00:14.400
database. So last time we spoke,
we put the image there and now we're
2

3
00:00:14.400 --> 00:00:18.779
going to do the exact opposite and get
the image back out of the database. And
3

4
00:00:18.779 --> 00:00:22.859
we do have to do a couple things here. We
get a little more cozy with the response
4

5
00:00:22.859 --> 00:00:28.740
object in this case and up on the screen
right now, I have the unit test that I
5

6
00:00:28.740 --> 00:00:34.170
wrote for this change to our little
project here. And you can see on line 76,
6

7
00:00:34.170 --> 00:00:40.590
I create the RecipeCommand and then
82-87 I created just a small Byte
7

8
00:00:40.590 --> 00:00:46.110
array on that and I do have to do the
conversion from primitive to the boxed
8

9
00:00:46.110 --> 00:00:51.960
byte for the command object. And so I'm
just using text there and it just needs
9

10
00:00:51.960 --> 00:00:54.930
to be a Byte array. We're going to
compare the length at the end there so I
10

11
00:00:54.930 --> 00:00:59.129
could have slipped in an image file for
this but that's just a little bit easier
11

12
00:00:59.129 --> 00:01:05.670
for our testing purposes. And we can see
on line 91, I am using a Mockito mock
12

13
00:01:05.670 --> 00:01:11.700
there to mimic the service activity and
I'm not even bothering to make sure that
13

14
00:01:11.700 --> 00:01:16.080
runs. I'm more interested in the actual
response and I will get that down on
14

15
00:01:16.080 --> 00:01:20.490
the bottom. Now in this case it's the
first time that we're seeing this. We've
15

16
00:01:20.490 --> 00:01:24.720
done the expect. I'm expecting a status
of okay but this time we want to look at
16

17
00:01:24.720 --> 00:01:30.060
the servlet response itself. And you can
see on line 94 I'm showing you
17

18
00:01:30.060 --> 00:01:34.920
how to use a return and there's a couple
options for return but I'm going to get
18

19
00:01:34.920 --> 00:01:41.340
the actual response object and just to
reiterate the mockMvc stuff we will use a
19

20
00:01:41.340 --> 00:01:46.380
mock servlet response. So that's
what we're emulating there on that line.
20

21
00:01:46.380 --> 00:01:53.670
And now we're on line 98, we are going to get
the response content as a Byte array and
21

22
00:01:53.670 --> 00:01:58.700
then finally on line 100, we verify that. So let's go ahead and run this guy and
22

23
00:01:58.700 --> 00:02:04.440
we'll see it run under
in IntelliJ here and that this
23

24
00:02:04.440 --> 00:02:09.539
tells us that we went into the
controller to that URL and got back the
24

25
00:02:09.539 --> 00:02:14.580
expected response. So we provided it Byte
array and we got a Byte array back out.
25

26
00:02:14.580 --> 00:02:20.970
So let's go ahead and take a look at the
implementation of the controller now. So
26

27
00:02:20.970 --> 00:02:26.310
on line 50, this is the method that I
added and we are going to map it out to
27

28
00:02:26.310 --> 00:02:30.720
recipeId and recipe image. I could call
it something like JPEG or something like
28

29
00:02:30.720 --> 00:02:36.720
that but this is fine for our purposes
and you can see what's unique about this
29

30
00:02:36.720 --> 00:02:44.640
is now we are asking Spring MVC to give
us the HttpServletResponse. And that's
30

31
00:02:44.640 --> 00:02:47.820
important because we want to get a hold
of that. We're just going to be returning
31

32
00:02:47.820 --> 00:02:53.610
back a raw image. And then line 51 we go
out to the repository get our
32

33
00:02:53.610 --> 00:02:58.170
service and get the RecipeCommand which
will have the byte array on it. And it
33

34
00:02:58.170 --> 00:03:02.310
did have to add the Byte array to the
RecipeCommand. It can change one
34

35
00:03:02.310 --> 00:03:05.850
converter to add that. We didn't have
that before on the command object. So
35

36
00:03:05.850 --> 00:03:14.720
that is there now and line 53 to 59 is
where I'm doing from the byteArray
36

37
00:03:14.720 --> 00:03:20.549
boxed type to the primitive which is
what we need to be work there. And you can
37

38
00:03:20.549 --> 00:03:27.600
see they're in line 58 I put in a little
auto unboxing. So then finally on line
38

39
00:03:27.600 --> 00:03:33.630
61 we set the content type to be an
image JPEG. We create an InputStream and
39

40
00:03:33.630 --> 00:03:39.480
then the IOUtils is going to copy from
the byte array input stream to the
40

41
00:03:39.480 --> 00:03:44.519
response output stream. So that's a
little utility. I believe that's from Tomcat.
41

42
00:03:44.519 --> 00:03:50.310
Yeah, so that's from the Apache
Tomcat. That's a little utility class that it
42

43
00:03:50.310 --> 00:03:54.180
provides for us to convert the InputStream to an OutputStream. So it's a
43

44
00:03:54.180 --> 00:03:59.610
little bit tricky, we're kind of getting
cozy with streams there but this is how
44

45
00:03:59.610 --> 00:04:05.130
you get a hold of the response and
provide it the bytes of an image. So
45

46
00:04:05.130 --> 00:04:09.569
we're doing pretty low-level stuff here
as far as working with the images. Let's
46

47
00:04:09.569 --> 00:04:14.900
take a look at the RecipeCommand. I did
have to add in line 46 there
47

48
00:04:14.900 --> 00:04:20.510
our converter to convert over. I'm not
doing a two-way so I'm only going from
48

49
00:04:20.510 --> 00:04:26.389
the Recipe object to RecipeCommand. So
right now we don't have a use case to
49

50
00:04:26.389 --> 00:04:30.740
support a command object having a byte
array on it already. So I'm not bothering
50

51
00:04:30.740 --> 00:04:36.919
to add that. Just a recap here I
did add in that Byte array property for
51

52
00:04:36.919 --> 00:04:43.820
the image to the RecipeCommand object. Let's go ahead and now run this. I
52

53
00:04:43.820 --> 00:04:47.870
have it running, double check.
I'm sorry I actually do have it running.
53

54
00:04:47.870 --> 00:04:55.850
So they're going to restart this. Okay we
are up and running. Let's go ahead and
54

55
00:04:55.850 --> 00:05:01.520
take a look at that inside the browser.
I'm going to refresh this and when I
55

56
00:05:01.520 --> 00:05:07.039
come in and view, you can see that the image is
broken. This is an app that we're going to
56

57
00:05:07.039 --> 00:05:10.220
be developing. I'd say we'll probably do
some type of default there so I don't
57

58
00:05:10.220 --> 00:05:15.430
get this broken image. Now we can come in
and do a change and choose a file,
58

59
00:05:15.430 --> 00:05:23.000
navigate over to the images of the
static resources there. So let's go ahead.
59

60
00:05:23.000 --> 00:05:28.700
Which one were we on. I actually forget
which one we're on. We are on the
60

61
00:05:28.700 --> 00:05:36.250
spicy grilled chicken tacos. So we want
to do the taco image. There's our tacos.
61

62
00:05:36.250 --> 00:05:40.849
You can submit that and you can see that
now we're getting the image displayed
62

63
00:05:40.849 --> 00:05:48.139
from from the database. And actually we've got
a stack trace there and we've got a
63

64
00:05:48.139 --> 00:05:52.729
null pointer exception. Okay so that's not what we want for the
64

65
00:05:52.729 --> 00:05:57.910
image. So that's a hidden error so we
need to double check that because we got
65

66
00:05:57.910 --> 00:06:02.870
the image was not found. There's nothing
there and now we're getting an NPE. So I
66

67
00:06:02.870 --> 00:06:06.050
will fix that in the code before
checking that in. I don't think I need
67

68
00:06:06.050 --> 00:06:11.389
to show you guys how to check that. So
this guy right here, we got the NPE
68

69
00:06:11.389 --> 00:06:16.910
on. So we now got the image which is
a byte array and we called length on
69

70
00:06:16.910 --> 00:06:22.550
that byte array and that's what caused the NPE. So before I check this in, I'll
70

71
00:06:22.550 --> 00:06:25.870
add in a check to make sure that it was
not the
71

72
00:06:25.870 --> 00:06:34.810
case. Let's take a quick look at this. So
back up, and let's also update the
72

73
00:06:34.810 --> 00:06:42.970
perfect guacamole. Put that in the view
screen, change image, choose file. Now
73

74
00:06:42.970 --> 00:06:48.430
we can do the guacamole, upload that,
submit it. And now we can see that we
74

75
00:06:48.430 --> 00:06:53.200
have the two different images for both our
recipes. So if I can go to this, change
75

76
00:06:53.200 --> 00:07:00.490
them to two. You see that the image changes. Let's
refresh this database console and take a
76

77
00:07:00.490 --> 00:07:08.140
quick look at that and look at recipe
and now we can see that we have bytes
77

78
00:07:08.140 --> 00:07:12.760
and both images. So exactly what we want
there. Much smaller than what I was
78

79
00:07:12.760 --> 00:07:16.570
uploading before but that's the byte
array for for the images stored in the
79

80
00:07:16.570 --> 00:07:18.840
database.
