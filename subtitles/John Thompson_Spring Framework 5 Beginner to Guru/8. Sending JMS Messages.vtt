WEBVTT
0
1
00:00:03.950 --> 00:00:08.280
In this video, we're gonna go ahead and
set up a component that's gonna send
1

2
00:00:08.280 --> 00:00:12.540
out messages. And, the first thing I wanna do is actually set the queue name. So,
2

3
00:00:12.540 --> 00:00:18.270
the queue name is gonna be a common
string value. And like always, it's a good
3

4
00:00:18.270 --> 00:00:23.160
idea not to repeat yourself. So, I'm gonna
come to the JmsConfig class and say
4

5
00:00:23.160 --> 00:00:23.660
public String. We'll call it MY_QUEUE. And
these can actually be just about any
5

6
00:00:31.140 --> 00:00:36.649
value I want. So, I'm just gonna say hello-world.
6

7
00:00:40.020 --> 00:00:44.460
And, we'll make that a static constant. So,
I'm setting up on JmsConfig. We'll
7

8
00:00:44.460 --> 00:00:48.660
have a static final property of MY_QUEUE
and it's just gonna have the string
8

9
00:00:48.660 --> 00:00:53.730
value of hello-world. So now, I'm gonna
come over here. I'm gonna create a
9

10
00:00:53.730 --> 00:00:59.540
new Java Class or it actually I'll
create a Package.
10

11
00:00:59.770 --> 00:01:05.199
I'm gonna call this sender like so.
This is optional. I'm just organizing
11

12
00:01:05.199 --> 00:01:11.220
my code into packages. And, I'm gonna
say Java Class
12

13
00:01:11.220 --> 00:01:16.270
HelloSender like so.
We'll go ahead and
13

14
00:01:16.270 --> 00:01:19.440
add that into Git for you.
14

15
00:01:19.440 --> 00:01:24.240
Now what we wanna do is say public
15

16
00:01:25.160 --> 00:01:31.880
so this is just gonna be a method without any arguments to send a message. And, what I wanna do here is,
16

17
00:01:31.890 --> 00:01:36.990
remember I said I wanted to have this
schedule periodically. So, what I can do
17

18
00:01:36.990 --> 00:01:41.418
is I can come up here and say @Scheduled.
18

19
00:01:41.418 --> 00:01:44.850
and we'll do a fixedRate and
19

20
00:01:44.850 --> 00:01:51.540
let's just do 2,000. So, that's 2,000
milliseconds. And, let's come up here. Use
20

21
00:01:51.540 --> 00:02:00.600
System.out say "I'm Sending a message"
like so. So now, if everything's working
21

22
00:02:00.600 --> 00:02:06.240
right. Before I do that, we need to mark
this as a @Component.
22

23
00:02:06.240 --> 00:02:11.130
So, everything's working right. I
come in here and run the application in
23

24
00:02:11.130 --> 00:02:18.050
the console. Every two seconds, I should
see the message, "I'm sending a message".
24

25
00:02:18.230 --> 00:02:21.830
And, you can see that that is in fact
happening. I'm getting out "I'm sending a
25

26
00:02:21.830 --> 00:02:27.080
message". I had a little bit of chatter
there. But that's what we saw before so
26

27
00:02:27.080 --> 00:02:31.220
that it's okay. So, I'm gonna go ahead and
stop this and let's shrink down the
27

28
00:02:31.220 --> 00:02:38.360
console. Now, for this to work what we
need to do is get a hold of JMS
28

29
00:02:38.360 --> 00:02:40.810
template.
29

30
00:02:42.830 --> 00:02:48.950
JmsTemplate like so. And I'm gonna 
take advantage of Lombok and we'll say
30

31
00:02:52.620 --> 00:02:54.980
@RecquiredArgsConstructor. So, that will
set up a constructor for that. And here,
31

32
00:02:54.980 --> 00:03:00.040
what I wanna do is create a HelloWorldMessage.
32

33
00:03:00.319 --> 00:03:04.579
Let's reformat
this a little bit.
33

34
00:03:09.090 --> 00:03:12.560
We want our message
34

35
00:03:14.629 --> 00:03:21.290
like so. So, that sets up the message object of what we wanna send. Now, what
35

36
00:03:21.290 --> 00:03:26.389
I wanna do is I wanna use the jmsTemplate like so. I wanna do
36

37
00:03:26.389 --> 00:03:31.129
convertAndSend. You can see that this is
overloaded so there's actually number
37

38
00:03:31.129 --> 00:03:36.349
options that you can use. What we wanna
use is destination and the object. So,
38

39
00:03:36.349 --> 00:03:42.500
it's gonna be this implementation
here. Remember, the JmsConfig. I'll
39

40
00:03:42.500 --> 00:03:49.669
use MY_QUEUE and then the message like so.
So, that sets that up. I come up
40

41
00:03:49.669 --> 00:03:53.160
here. Let's do a System.out.
41

42
00:03:53.860 --> 00:03:58.200
So, let's go ahead and make sure that that is doing. So, I'm just gonna demonstrate sending the
42

43
00:03:58.210 --> 00:04:04.840
message here. So, let's go ahead and start
up Spring Boot. And, we'll see a little
43

44
00:04:04.840 --> 00:04:09.460
bit of chatter there in the log. And then,
once this get started every two seconds,
44

45
00:04:09.460 --> 00:04:13.690
you can see that we're getting the
sending message, message shut. So, that
45

46
00:04:13.690 --> 00:04:18.250
that is going to go ahead and send that
messages. So right now, we're not getting
46

47
00:04:18.250 --> 00:04:22.690
any errors, no exceptions are being
thrown. So, I am going to go under the
47

48
00:04:22.690 --> 00:04:28.450
assumption that this message is actually
getting to a queue in ActiveMQ. So, in the
48

49
00:04:28.450 --> 00:04:33.160
next video, we are gonna go ahead and
start reading from that queue. But here,
49

50
00:04:33.160 --> 00:04:38.837
you can see when I stop this and just
recap what we did the important stuff. So,
50

51
00:04:38.837 --> 00:04:44.160
I created a new component my HelloSender. I am injecting JmsTemplate. So,
51

52
00:04:44.160 --> 00:04:49.860
JmsTemplate is going to be a
pre-configured JMS template. Much like
52

53
00:04:49.870 --> 00:04:54.900
Spring has a JDBC template. Here, this is
a JmsTemplate already pre-configured to
53

54
00:04:54.910 --> 00:05:00.190
talk to our ActiveMQ instance. So that
now is pre-configured it with all the
54

55
00:05:00.190 --> 00:05:05.290
credentials for the ActiveMQ server. And
here, what we're doing is we're using the
55

56
00:05:05.290 --> 00:05:09.190
convertAndSend method. That is going to
use that message converter that we
56

57
00:05:09.190 --> 00:05:12.940
provided and send it to the queue name
that we set. So, pretty straightforward
57

58
00:05:12.940 --> 00:05:18.730
implementation. The only nuance there is
on line 21. We have that @Scheduled
58

59
00:05:18.730 --> 00:05:23.110
annotation. Remember, we set up the task
config. That is what's telling our task
59

60
00:05:23.110 --> 00:05:28.180
configuration to go ahead, get a hold of
this bean and execute that send message
60

61
00:05:28.180 --> 00:05:33.550
every two seconds. So, the fixedRate is
saying do this every two seconds of the
61

62
00:05:33.550 --> 00:05:41.430
2000 is in milliseconds. So, that is what is
automating our sending of messages.
