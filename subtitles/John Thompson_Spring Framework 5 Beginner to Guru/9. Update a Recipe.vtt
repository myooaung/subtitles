WEBVTT
0
1
00:00:04.310 --> 00:00:09.719
Alright we're going to look at doing
an update of a recipe. But first I
1

2
00:00:09.719 --> 00:00:13.740
started looking at the URL mapping that
we had here and decided to make a little
2

3
00:00:13.740 --> 00:00:20.279
refactoring. If you look at line 24 I'm
changing it to be recipe /id/show.
3

4
00:00:20.279 --> 00:00:24.269
So we're going to extract out the ID
value that way. So making this a little
4

5
00:00:24.269 --> 00:00:29.789
more rest like just to follow a rest
like concept where we're going to have
5

6
00:00:29.789 --> 00:00:34.380
an entity called Recipe and then we'll
access the ID value and then we'll have
6

7
00:00:34.380 --> 00:00:38.700
some type of verb after that. So even
though we're limited to get here we're
7

8
00:00:38.700 --> 00:00:43.920
going to go ahead and make that
refactoring and then that does drive one
8

9
00:00:43.920 --> 00:00:52.350
HTML change here on our index page. I
did refactor 20 and 21 to include the hints
9

10
00:00:52.350 --> 00:00:59.640
for the types and then down on line 53, I
need to change how the URL is formatted
10

11
00:00:59.640 --> 00:01:05.129
to implant that recipe ID there for the
View link. And one thing it didn't show
11

12
00:01:05.129 --> 00:01:12.600
in the last video, I do have unit test for the new actions that we did out have
12

13
00:01:12.600 --> 00:01:18.119
on the controller. So you can see we do
have a little more complexity here. I
13

14
00:01:18.119 --> 00:01:25.259
want to take an opportunity to view test
on line 66, the post method. So now we do
14

15
00:01:25.259 --> 00:01:30.900
have another Mockito mock going on on line 70 and then on 72, we're using
15

16
00:01:30.900 --> 00:01:36.119
the mockMvc. And this time we're going
to pass in the post method and
16

17
00:01:36.119 --> 00:01:40.920
we're going to say a URL content type of
application form URL encoded. So
17

18
00:01:40.920 --> 00:01:45.210
that's going to mimic a form post and
we're going to set a parameter of ID to an
18

19
00:01:45.210 --> 00:01:49.829
empty String like we expect. And we're also going to set a description of some
19

20
00:01:49.829 --> 00:01:58.140
String and then we are going to expect
back a URL, a status of a 300 and I think
20

21
00:01:58.140 --> 00:02:01.560
it's a 302 if I remember right, a
redirection. And we're going to expect
21

22
00:02:01.560 --> 00:02:08.039
back the name of a view to be redirect:/recipe/show number 2 and then 2 is
22

23
00:02:08.039 --> 00:02:13.270
going to be coming from the mock that we
passed in on line 68 there
23

24
00:02:13.270 --> 00:02:18.160
where we set it to a Long of two. And then
on line 17 we're setting up the Mockito
24

25
00:02:18.160 --> 00:02:25.300
to return that back. So on line, 49 our
test at the get recipe, the URL value
25

26
00:02:25.300 --> 00:02:31.180
does have to change and then for this exercise I've created a new get the
26

27
00:02:31.180 --> 00:02:35.920
update view because we're going to
expect to the MVC controller to return
27

28
00:02:35.920 --> 00:02:44.160
back a populated object. So I now have
this implemented there in 82 to 91. And
28

29
00:02:44.160 --> 00:02:48.460
here we we have a command object. We pass
that in and then we tell the Recipe
29

30
00:02:48.460 --> 00:02:53.020
Service to return that back. We take in
anyLong then return back the command
30

31
00:02:53.020 --> 00:02:59.620
object. And here we're expecting when we
go to the URL recipe/1/update that
31

32
00:02:59.620 --> 00:03:04.810
we are going to get an ok status back. The view of recipe form and the model
32

33
00:03:04.810 --> 00:03:09.790
should have an attribute existing of
recipe. So we'll have that RecipeCommand
33

34
00:03:09.790 --> 00:03:13.740
object there. So we're checking all that. So let's take a quick look at the
34

35
00:03:13.740 --> 00:03:23.980
implementation on the RecipeController. So 39 to 43 there, lines 39 to 43, you can
35

36
00:03:23.980 --> 00:03:31.990
see that I had the new RequestMapping. So recipe/id/update and here we're
36

37
00:03:31.990 --> 00:03:36.520
extracting PathVariable out the String
of id and passing in the Model from
37

38
00:03:36.520 --> 00:03:42.550
Spring MVC. And we are adding an
attribute recipe from the RecipeService
38

39
00:03:42.550 --> 00:03:47.650
and I added a new method there because I
do like to keep my controllers clean, not
39

40
00:03:47.650 --> 00:03:52.810
a lot code in them. So we're going to
allow our service method to
40

41
00:03:52.810 --> 00:03:57.010
convert it over to a command object for
us. So let's go and take a quick look at
41

42
00:03:57.010 --> 00:04:00.190
that. And you see we've modified the interface
42

43
00:04:00.190 --> 00:04:05.230
to just do a findCommandById. We
take a quick look at the implementation
43

44
00:04:05.230 --> 00:04:11.920
here. Pretty simple method here. I
did make it transactional because we are
44

45
00:04:11.920 --> 00:04:16.090
doing a conversion outside the scope. So
if we hit any lazy loaded
45

46
00:04:16.090 --> 00:04:21.700
properties it would go kaboom. So we are
expanding out the transactional scope to
46

47
00:04:21.700 --> 00:04:26.500
this method and then we just
returned back a converted object so we
47

48
00:04:26.500 --> 00:04:29.350
take in
and we're reusing that method. So find
48

49
00:04:29.350 --> 00:04:33.700
ById, so we're going to ask it to find by ID convert it and send it back. So
49

50
00:04:33.700 --> 00:04:40.950
let's go ahead and run this. Actually I'll
demo all the tests first.
50

51
00:04:40.950 --> 00:04:47.530
Verify that we are all green on the
tests and these are going to take a
51

52
00:04:47.530 --> 00:04:51.940
little bit longer. As we've run them but
we still have the context test
52

53
00:04:51.940 --> 00:04:56.170
coming up. So you can see the Spring
context took the longest to load as we
53

54
00:04:56.170 --> 00:05:00.670
brought that up then the rest of our tests went by pretty darn quick. So
54

55
00:05:00.670 --> 00:05:08.440
let's go ahead and actually run the
application now. So we're up and running
55

56
00:05:08.440 --> 00:05:21.940
on port 8080. Come on over and I have the
last one up. So with this I could take a look
56

57
00:05:21.940 --> 00:05:31.750
at the perfect Guacamole. I'm going to
say update for a verb and we are running
57

58
00:05:31.750 --> 00:05:42.160
into an error. So let's take a look at
that. So property uom cannot be
58

59
00:05:42.160 --> 00:05:53.140
found. Okay I know what this is. I'm going
to pause this one second and fix it for
59

60
00:05:53.140 --> 00:05:58.500
us. Alright I paused it and took a
closer look to see what was going on and I'll
60

61
00:05:58.500 --> 00:06:05.680
show you what happened here. In the show
method, we were accessing a property
61

62
00:06:05.680 --> 00:06:11.740
ingredient called uom. It's shorthand
for unit of measure and our model for
62

63
00:06:11.740 --> 00:06:17.080
the ingredient command spelled out unit
of measure rather than the abbreviation
63

64
00:06:17.080 --> 00:06:20.890
of unit of measure. So I thought I had
all the properties consistent but we did
64

65
00:06:20.890 --> 00:06:25.800
not. We had a change or Delta there so
the same code did not run for
65

66
00:06:25.800 --> 00:06:31.570
consistency. I changed the IngredientCommand. I refactored that to use uom
66

67
00:06:31.570 --> 00:06:37.570
rather than unit of measure and that is
now working now. So I will check in those
67

68
00:06:37.570 --> 00:06:40.560
changes along with this commit for this
module.
68

69
00:06:40.560 --> 00:06:44.940
Just to demonstrate we are upfront and
running and I also took the opportunity.
69

70
00:06:44.940 --> 00:06:49.830
I forgot to add in a little update link
here so I did add that to the index page
70

71
00:06:49.830 --> 00:06:55.650
as well. So now you can see that it'll go
in and do an update and these are laid
71

72
00:06:55.650 --> 00:07:00.300
out a little bit differently. So I can
change the cook time to 20 and you can
72

73
00:07:00.300 --> 00:07:05.910
see now we do have the ingredients
getting loaded up and now I can come
73

74
00:07:05.910 --> 00:07:12.210
down here and click on submit. And we can
see that the time did get updated to 20.
74

75
00:07:12.210 --> 00:07:17.850
So just a nice little touch
there. The format is a little different
75

76
00:07:17.850 --> 00:07:23.340
between the forms and the view. If I have
time I'll go back and refactor that to
76

77
00:07:23.340 --> 00:07:30.650
make them a little more consistent but
that is updates. So just a recap quickly.
77

78
00:07:32.300 --> 00:07:38.850
In the RecipeController, we added in a
new method to recipe id update and we
78

79
00:07:38.850 --> 00:07:45.479
also refactor the show to be by recipe
id show. So we're getting closer to like
79

80
00:07:45.479 --> 00:07:52.560
a rest type style API mapping and the
RecipeService has a new command and to
80

81
00:07:52.560 --> 00:08:02.460
findCommandById, so we implemented that. And that simply, that
81

82
00:08:02.460 --> 00:08:06.840
goes to the database. That's a find by ID and converts it to
82

83
00:08:06.840 --> 00:08:11.039
the command object, returns a back to our
view layer for display on the recipe
83

84
00:08:11.039 --> 00:08:18.600
form. And then the recipe form, we're
reusing that same exact form and here on
84

85
00:08:18.600 --> 00:08:23.580
line 24, it does get the object and
populates the form fields with the
85

86
00:08:23.580 --> 00:08:27.810
recipe object pass back from the
controller. And then this Thymeleaf th
86

87
00:08:27.810 --> 00:08:35.370
action tells Thymeleaf to generate an HTML
tag to post it. To do a form post against
87

88
00:08:35.370 --> 00:08:42.630
the URL recipe and that goes against the
same post mapping that we defined for
88

89
00:08:42.630 --> 00:08:48.690
the save of a new recipe. So Spring
is smart enough know if it's a brand new
89

90
00:08:48.690 --> 00:08:53.250
recipe or an existing recipe and that is
a function of having that ID value
90

91
00:08:53.250 --> 00:08:56.490
populated or
not. So an existing one will have the ID
91

92
00:08:56.490 --> 00:09:03.600
value populated from that hidden
parameter for ID. A new one will not have
92

93
00:09:03.600 --> 00:09:07.220
a ID. It will be an empty String.
