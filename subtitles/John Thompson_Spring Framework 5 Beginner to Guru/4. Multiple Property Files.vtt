WEBVTT
0
1
00:00:04.279 --> 00:00:09.000
Now the Spring framework will naturally
support multiple property files and
1

2
00:00:09.000 --> 00:00:13.830
thought we'd set up a little example of
that. And what I've done is I created a
2

3
00:00:13.830 --> 00:00:18.000
little fake Jms Broker class, just a
different type for us to work with. Again
3

4
00:00:18.000 --> 00:00:21.800
we just have username, password and url
that we're going to configure on it. I'm
4

5
00:00:21.800 --> 00:00:27.240
mimicking a JMS broker that we're going
to be setting up. And what we want to do
5

6
00:00:27.240 --> 00:00:34.230
is set up second properties file for them
and I've got that added and the same
6

7
00:00:34.230 --> 00:00:39.090
following the convention of guru.jms.username. So you do need to have unique
7

8
00:00:39.090 --> 00:00:44.850
properties across everything with inside
Spring because that they will overwrite
8

9
00:00:44.850 --> 00:00:49.920
each other and sometimes without
complaining. So it kind of depends on
9

10
00:00:49.920 --> 00:00:54.120
where they fall in the hierarchy and so
you do want to use unique names for
10

11
00:00:54.120 --> 00:00:57.449
different components where you need them
to be unique and that's what I've done
11

12
00:00:57.449 --> 00:01:05.700
here with the guru.jms. And I've gone in
our PropertyConfig and I
12

13
00:01:05.700 --> 00:01:10.380
also set up new values. I'm just using
the values so you can see that I have
13

14
00:01:10.380 --> 00:01:18.330
the Value annotations there, 32 to 39
and then on 51, I'm creating a Bean of
14

15
00:01:18.330 --> 00:01:27.360
that FakeJmsBroker and let's go over
to the application and we'll grab a
15

16
00:01:27.360 --> 00:01:30.890
instance of that as well.
16

17
00:01:39.960 --> 00:01:45.180
And we want to do a system
out just do ask out and I'll bring up a
17

18
00:01:45.180 --> 00:01:52.710
shortcut there in IntelliJ and it will
up with the Username for that. Now if I
18

19
00:01:52.710 --> 00:01:59.369
run this now it's going to fail because
we're not bringing in that property. So
19

20
00:01:59.369 --> 00:02:03.780
we can see that we're not getting that
jms.username in there. So what we need to
20

21
00:02:03.780 --> 00:02:07.440
do is come over to our PropertyConfig because that is in a
21

22
00:02:07.440 --> 00:02:11.580
different properties file but we haven't
sourced it in. And the PropertySource
22

23
00:02:11.580 --> 00:02:21.020
annotation can actually take in a list
of values. We're going to expand that out
23

24
00:02:23.900 --> 00:02:29.610
and this time, I'm going to say jms.properties and this should work now.
24

25
00:02:29.610 --> 00:02:37.230
Let's take a look at that and now we see
that I'm getting the the jms.username
25

26
00:02:37.230 --> 00:02:41.250
there which is exactly what we want and
still showing the override value from
26

27
00:02:41.250 --> 00:02:45.480
before. Now there is one other that we
can use. I'm going to comment this out
27

28
00:02:45.480 --> 00:02:52.769
and this is an annotation that was added
in spring 4. You use the PropertySource
28

29
00:02:52.769 --> 00:03:00.299
annotation and then add in
multiple property sources. I'm sorry the
29

30
00:03:00.299 --> 00:03:09.530
PropertySources annotation. And then add
in multiple PropertySource.
30

31
00:03:14.590 --> 00:03:25.120
And this will taking a list of these
annotated values. You can see I'm doing a
31

32
00:03:25.120 --> 00:03:28.909
command space to bring up the
intellisense there in IntelliJ and it's
32

33
00:03:28.909 --> 00:03:34.430
bringing up the property files for us
and now we can see this is a
33

34
00:03:34.430 --> 00:03:38.780
little bit better. So on line 18 is the
previous value that I had using PropertySource
34

35
00:03:38.780 --> 00:03:46.250
and now in line 1, I'm using the
PropertySources and if you have a lot
35

36
00:03:46.250 --> 00:03:49.670
of property files, I think this is
probably a little more pleasing on the
36

37
00:03:49.670 --> 00:03:53.569
eye than try and do a list in Property
Sources. It really doesn't matter which
37

38
00:03:53.569 --> 00:03:57.500
one you use. It's really up to you. I'm going to run
this and show you that it does work.
38

39
00:03:57.500 --> 00:04:03.530
Either one is acceptable but there's a
lot. I'm going to prefer to use PropertySources.
39

40
00:04:03.530 --> 00:04:07.310
It just seems to be a little
cleaner to me, cleaner on the eye. I've
40

41
00:04:07.310 --> 00:04:10.970
been on Enterprise projects where you
have literally dozens of property files
41

42
00:04:10.970 --> 00:04:15.139
that you're wiring together and it can
get to be a little unwieldy at times
42

43
00:04:15.139 --> 00:04:19.430
because a lot of times you're taking
these property files and organizing them
43

44
00:04:19.430 --> 00:04:24.560
by some type of function like I've done
here where I have one for a data source.
44

45
00:04:24.560 --> 00:04:29.360
I recommend a representative database
and then I have another one for the jms
45

46
00:04:29.360 --> 00:04:32.780
properties. So that's pretty common
that you're going to be doing that and
46

47
00:04:32.780 --> 00:04:37.430
then you'll be using your configurations
to bring in combinations of the
47

48
00:04:37.430 --> 00:04:41.650
properties that you need for specific
environments.
