WEBVTT
0
1
00:00:04.370 --> 00:00:08.730
Okay, I had a student suggest a
refactoring here and I am actually going
1

2
00:00:08.730 --> 00:00:13.290
to implement it because it's actually a
rather good idea. Because what I'm doing
2

3
00:00:13.290 --> 00:00:21.660
here on line 44 to 54 is mixing the
reactive stuff out of reactive streams
3

4
00:00:21.660 --> 00:00:27.960
and also Java 8 streaming stuff. So you
suggested can't we just do this all
4

5
00:00:27.960 --> 00:00:32.669
natively with other reactive stream
stuff, so like I'm probably good and he
5

6
00:00:32.669 --> 00:00:35.790
suggested refactoring. I actually looked
up pretty good. So I'm gonna go ahead and
6

7
00:00:35.790 --> 00:00:46.260
implement that now. So let's see you will
still do still do a findById. And this
7

8
00:00:46.260 --> 00:00:50.210
time we're gonna use flatMapIterable.
8

9
00:00:51.320 --> 00:00:55.850
I'm gonna do a getIngredients on that.
9

10
00:00:58.100 --> 00:01:04.320
You can see it's like the same filter
statement here, but now we're gonna be
10

11
00:01:04.320 --> 00:01:11.030
using the functional method outs from
the reactive library of Spring Framework.
11

12
00:01:11.030 --> 00:01:20.160
I'm just gonna replace this. .single
will reduce it down to a Mono and then
12

13
00:01:20.160 --> 00:01:29.310
we essentially have the same map here.
And that goes away. Comment that out. So
13

14
00:01:29.310 --> 00:01:35.250
quite a bit cleaner than what we had.
yeah we know I need that so I definitely
14

15
00:01:35.250 --> 00:01:40.140
like this refactoring. It's a very good
suggestion. Let's go ahead and run our
15

16
00:01:40.140 --> 00:01:51.149
unit test. Make sure that this does run
in fact. So I do appreciate suggestions
16

17
00:01:51.149 --> 00:01:56.160
like that. So I think this is definitely
a cleaner implementation and the student
17

18
00:01:56.160 --> 00:01:59.280
did a nice job on the refactoring. When I
saw it, I was like, yeah I'm gonna add
18

19
00:01:59.280 --> 00:02:02.520
this to the course. I think it
definitely improves the readability of
19

20
00:02:02.520 --> 00:02:07.500
this. So you can see now, it's more of a
functional and if you look at what we
20

21
00:02:07.500 --> 00:02:19.920
had, you know let's try this, so you can
see here, this is a lot cleaner. I
21

22
00:02:19.920 --> 00:02:24.480
feel it's more readable. Makes more sense.
We're not jumping in and out of the
22

23
00:02:24.480 --> 00:02:28.830
reactive libraries and into Java 8
streams and then back. We are utilizing
23

24
00:02:28.830 --> 00:02:34.410
this pretty well now and it's a fine
point but I think it's a nice
24

25
00:02:34.410 --> 00:02:36.870
refactoring. So I'm pretty happy with
that.
25

26
00:02:36.870 --> 00:02:41.760
The suggestion is actually a really good
suggestion. Let's go ahead and close this.
26

27
00:02:41.760 --> 00:02:47.190
And I am gonna get rid of this code
here but I am gonna leave the other
27

28
00:02:47.190 --> 00:02:52.400
commented code just for our reference as we
refactored through this.
