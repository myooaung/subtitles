WEBVTT
0
1
00:00:02.050 --> 00:00:07.600
In this video, I'm going to go ahead and
configure a task executor for Spring. And,
1

2
00:00:07.600 --> 00:00:11.350
what I'm gonna be doing is I'm gonna be sending out a message periodically.
2

3
00:00:11.350 --> 00:00:16.270
And to do this, we are going to enable
scheduling so we can send that out at a
3

4
00:00:16.270 --> 00:00:20.950
fixed rate. So, we need to do a little bit
of configuration with Spring to get this
4

5
00:00:20.950 --> 00:00:28.830
set up. So, let me come in here to IntelliJ and
let me create a new package.
5

6
00:00:29.490 --> 00:00:32.610
And I want to use a package called
6

7
00:00:32.610 --> 00:00:37.610
config for configuration classes. And now,
I'm gonna create a new Java class and
7

8
00:00:37.610 --> 00:00:42.020
I'll just call this TaskConfig
8

9
00:00:42.140 --> 00:00:47.220
like so. So, that will be added to Github and I'll
be putting this in a check in branch for
9

10
00:00:47.230 --> 00:00:52.719
you guys. And, this is gonna be a
configuration class. And, the two things I
10

11
00:00:52.719 --> 00:00:58.190
wanna do here primarily is the @EnableScheduling.
11

12
00:00:58.190 --> 00:01:02.510
This is gonna enable the task
scheduler. And then also, I wanna do
12

13
00:01:02.510 --> 00:01:09.140
@EnableAsync. So, this combination of
annotations sets up Spring Boot to go
13

14
00:01:09.140 --> 00:01:13.580
ahead and perform tasks out of a task
pool so which is exactly what we wanna
14

15
00:01:13.580 --> 00:01:19.500
do. And now, what I wanna do is have a
TaskExecutor,
15

16
00:01:19.500 --> 00:01:27.920
find this bean like so. And here, we can
just say new
16

17
00:01:27.920 --> 00:01:33.920
SimpleAsyncTaskExecutor. So, this is a
really really simple thing to set up. Or
17

18
00:01:33.920 --> 00:01:38.990
just go ahead and return that. And then,
we also want to do @Bean. So, we set this
18

19
00:01:38.990 --> 00:01:43.580
up. And, what this configuration is doing,
it's gonna be setting up a bean
19

20
00:01:43.580 --> 00:01:48.140
called Task Executor. We are using a
SimpleAsyncTaskExecutor. This is a
20

21
00:01:48.140 --> 00:01:52.549
standard part of Spring Framework. Very
simple implementation. So, what this is
21

22
00:01:52.549 --> 00:01:58.850
going to do is give us the ability to
run async task. And also then, the @EnableScheduling.
22

23
00:01:58.850 --> 00:02:03.470
What is gonna enable to do is
is it's gonna tell Spring to go ahead
23

24
00:02:03.470 --> 00:02:09.380
and expect classes for scheduled tasks.
And in upcoming video, what we'll do is
24

25
00:02:09.380 --> 00:02:14.630
we'll go ahead and set up a schedule
task to send out a message at a periodic
25

26
00:02:14.630 --> 00:02:20.120
basis. But this here, this is a very
important stuff here to enable this. This just
26

27
00:02:20.120 --> 00:02:23.930
sets up everything to enable that
 task scheduling. And then, the task
27

28
00:02:23.930 --> 00:02:28.970
pull to actually go out and execute that
task of sending a message. So, just to
28

29
00:02:28.970 --> 00:02:34.130
recap, what I did in this video is I
created a new class called TaskConfig
29

30
00:02:34.130 --> 00:02:38.390
in the package called config. It's
important to use the @EnableScheduling
30

31
00:02:38.390 --> 00:02:43.010
and @EnableAsync. And then, finally, the
configuration that is what is going to
31

32
00:02:43.010 --> 00:02:47.709
tell Spring to pick this up as a
Configuration class and scan it for
32

33
00:02:47.709 --> 00:02:53.239
methods that are annotated with the @Bean
annotation. So, we are gonna get a 
33

34
00:02:53.239 --> 00:02:58.160
TaskExecutor bean injected into the Spring
Context. And then, Spring is gonna use
34

35
00:02:58.160 --> 00:03:03.109
this to go ahead and execute tasks for
us. So, in an upcoming video, I will go
35

36
00:03:03.109 --> 00:03:07.850
ahead and setup a JMS bean to go out and
send messages. But this is what's going
36

37
00:03:07.850 --> 00:03:12.519
to be executing those tasks for us.
