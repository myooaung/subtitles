WEBVTT
1

00:00:05.690  -->  00:00:12.630
Okay so what is JPA, JPA stands for
Java persistence API now this is the

2

00:00:12.630  -->  00:00:18.779
official API for working with
relational data and Java. JPA, is only a

3

00:00:18.779  -->  00:00:23.039
specification is not a concrete
implementation meaning that it is an API

4

00:00:23.039  -->  00:00:26.460
specification and there's other vendors
to choose from. There's different

5

00:00:26.460  -->  00:00:32.880
implementations to choose
from for JPA, so what does JP a do? It is

6

00:00:32.880  -->  00:00:37.200
a bridge from Java's object world to
how data is stored in relational

7

00:00:37.200  -->  00:00:41.730
databases. There's a different paradigm
there, so it's known as an ORM tool, object

8

00:00:41.730  -->  00:00:46.399
relational mapping and what JPA offers
us Java developers, is database

9

00:00:46.399  -->  00:00:52.050
independence. One API will support many
different relational databases so if you

10

00:00:52.050  -->  00:00:57.480
stick to the API you should be able to
hit just about any relational database.

11

00:00:57.480  -->  00:01:03.000
Now JPA 2.0 came out under JSR
317 and this was approved in

12

00:01:03.000  -->  00:01:07.799
December 2009. It added support for
embedded objects and ordered list also

13

00:01:07.799  -->  00:01:12.270
criteria query which is a really cool
feature and SQL hints is very

14

00:01:12.270  -->  00:01:18.720
important for larger data sets and
validation and JPA 2.1 came out under

15

00:01:18.720  -->  00:01:24.689
JSR 338 and this was approved in
December 2013 now this had a very

16

00:01:24.689  -->  00:01:29.820
important feature for custom type
converters and also criteria for update

17

00:01:29.820  -->  00:01:34.770
and delete of bulk data in the database
so this is a pretty important feature to

18

00:01:34.770  -->  00:01:39.030
do these bulk operations. Also gave us a
standard way to do schema generation and

19

00:01:39.030  -->  00:01:44.360
run queries against stored procedures now
for the JPA 2.1 implementations

20

00:01:44.360  -->  00:01:49.530
hibernate has 72 percent of the market
share while eclipse link has 13 percent

21

00:01:49.530  -->  00:01:53.100
which is actually the reference
implementation for the API and then open

22

00:01:53.100  -->  00:01:58.740
JPA has just 2% of the market share
now some of the databases support by

23

00:01:58.740  -->  00:02:02.610
hibernate. Obviously would be a little
Oracle 11g, the granddaddy of all

24

00:02:02.610  -->  00:02:09.629
databases, db2, sequel server, Sybase, mySQL, Postgres and then there's a lot

25

00:02:09.629  -->  00:02:12.750
of smaller ones out there like Apache
Derby, Informix,

26

00:02:12.750  -->  00:02:19.140
even Microsoft Access, I hate Access. But we will be using h2 in here in this course

27

00:02:19.140  -->  00:02:24.360
as well now hibernate 5 came out in
September 2015

28

00:02:24.360  -->  00:02:27.810
Commercial support for hibernate is
available through

29

00:02:27.810  -->  00:02:34.110
Red Hat which makes it very popular with
enterprises. Spring Framework adopted it

30

00:02:34.110  -->  00:02:41.910
in version 4.2 and then spring boot came
up in version 1.4 so you can see that

31

00:02:41.910  -->  00:02:45.750
there's a little bit of a lag from
Spring Framework adopting it to spring

32

00:02:45.750  -->  00:02:48.920
Boot adapting it
so in this course we will be using

33

00:02:48.920  -->  00:02:55.200
hibernate version 5 and higher and we'll
also be using Spring Framework 5 and

34

00:02:55.200  -->  00:03:00.450
spring boot 2 so these are all
using hibernate 5 and we will be using

35

00:03:00.450  -->  00:03:04.640
that which is a reference. They're not
the reference implementation, it is a

36

00:03:04.640  -->  00:03:10.350
implementation of JPA 2.1. Now I want to
point out that hibernate does have its

37

00:03:10.350  -->  00:03:15.930
own extension there's hibernate specific
things that we can get into and as much

38

00:03:15.930  -->  00:03:20.550
as possible I am going to avoid those
because I want us to the JPA specification

39

00:03:20.550  -->  00:03:24.510
which is pretty feature-rich so we'll be
sticking to just trying to stick to

40

00:03:24.510  -->  00:03:30.269
plain old vanilla and JPA so if in the
future we ever wanted to switch our JPA

41

00:03:30.269  -->  00:03:35.040
implementation we should be able to to
do so. So just like in this course what

42

00:03:35.040  -->  00:03:39.000
you're going to see us do is develop
against relational database we'll start

43

00:03:39.000  -->  00:03:43.769
off with h2 but somewhere down the path
we will go against MySQL and you'll

44

00:03:43.769  -->  00:03:48.570
see how seamless that will be, how easy
it is because we are using hibernate

45

00:03:48.570  -->  00:03:54.320
which gives us the data base and
independence. Alright I jumped over to

46

00:03:54.320  -->  00:04:00.570
IntelliJ and I've created two pojos so
just plain old Java objects and the

47

00:04:00.570  -->  00:04:06.570
first class is author and author
has a first name and last name and he

48

00:04:06.570  -->  00:04:15.450
also has a set of books. So let's take a
quick look at book, so a book has a title

49

00:04:15.450  -->  00:04:19.590
and Isbin and a publisher, I'm not sure
what isbin stands for that's an

50

00:04:19.590  -->  00:04:24.180
industry standard for identifying books
and book also has a set of authors

51

00:04:24.180  -->  00:04:29.510
because obviously
a book can have more than one author and

52

00:04:29.510  -->  00:04:35.270
likewise an author can have more than
one book. So pretty, pretty simple

53

00:04:35.270  -->  00:04:40.010
relationship here and right now this is
pure object-oriented programming is just

54

00:04:40.010  -->  00:04:45.200
two Pojos that are related to each other
and because they share a common set so

55

00:04:45.200  -->  00:04:50.330
author has a set of books and book has a
set of authors so nothing to earth

56

00:04:50.330  -->  00:04:54.320
shattering here and what we're going to
do is convert these into JPA

57

00:04:54.320  -->  00:04:59.750
entities now the first thing that we
need to do is annotate the classes as an

58

00:04:59.750  -->  00:05:07.100
entity. We do that with the entity and we
can see that two annotations are coming

59

00:05:07.100  -->  00:05:11.000
up there and intellisense
and we want the Java X persistence and

60

00:05:11.000  -->  00:05:16.490
that is the official JPA API that we are
using so we definitely want to be

61

00:05:16.490  -->  00:05:20.990
using that, not the hibernate specific
ones and I'm going to do the same thing

62

00:05:20.990  -->  00:05:27.890
for book you can see IntelliJ is trying
to bring up the hibernate one which we

63

00:05:27.890  -->  00:05:32.510
do not want and it looks like it's been
deprecated anyways so now we've

64

00:05:32.510  -->  00:05:36.470
marked both of those as entities and so
these are going to show up as JPA

65

00:05:36.470  -->  00:05:41.810
entities but we're not quite done yet. One thing right now the problem is we

66

00:05:41.810  -->  00:05:46.460
don't have a unique way to identify
these in terms of persistence so first

67

00:05:46.460  -->  00:05:49.640
name last name you could have more than
one author with the first name last name

68

00:05:49.640  -->  00:05:54.050
so we need to add in some type of unique
identifier so what I'm going to do is

69

00:05:54.050  -->  00:06:02.540
add in a new property, a long property
and now no need to use long I'm

70

00:06:02.540  -->  00:06:07.520
just going to call it ID and I'll go
down here and add in a good net setter

71

00:06:07.520  -->  00:06:15.320
for it and I'm just doing command new on
the OS X at least and so now I have a

72

00:06:15.320  -->  00:06:21.680
getter and setter for that property and
this is what's known as leakage from the

73

00:06:21.680  -->  00:06:27.440
ORM from the relational database up into
the object layer because truly in a

74

00:06:27.440  -->  00:06:32.270
OO world we don't care about an ID
value but here when we persist it we

75

00:06:32.270  -->  00:06:35.390
need to have some type of unique
identifier there so this a little bit

76

00:06:35.390  -->  00:06:41.870
of leakage between relational
and the object-oriented paradigm now

77

00:06:41.870  -->  00:06:48.320
what we need to do is tell JPA that this
is an ID, again we are using the Java X

78

00:06:48.320  -->  00:06:55.520
persistence ID and we are also going to
tell it how to generate it so we're

79

00:06:55.520  -->  00:07:01.630
going to say it's a generative value and
in this case we are going to do strategy

80

00:07:01.630  -->  00:07:11.000
and generation Auto and this would be
both, h2 supports this and MySQL

81

00:07:11.000  -->  00:07:15.590
supports it. I did try this in
Oracle 12 it wasn't quite working but

82

00:07:15.590  -->  00:07:18.920
this is some time ago they might got the
kinks worked out of it so I don't think

83

00:07:18.920  -->  00:07:23.480
the hibernate implementation was quite
ready when I tried it. So I'm going to

84

00:07:23.480  -->  00:07:28.720
come over here and I am doing a cut and
paste just to expedite things

85

00:07:28.720  -->  00:07:32.240
remember cut and paste is evil and you
should not try that at home

86

00:07:32.240  -->  00:07:40.340
and now I need to add in the ID as well,
the getters and setters for it so now I

87

00:07:40.340  -->  00:07:45.110
have that all set up and now that the
last thing that we need to do is we've

88

00:07:45.110  -->  00:07:52.220
told it that we have a set and what
we want to do is tell JPA that we are

89

00:07:52.220  -->  00:07:56.000
going to have a many-to-many
relationship here so we're going to have

90

00:07:56.000  -->  00:08:06.770
many to many authors to books and also many to many for books to authors so

91

00:08:06.770  -->  00:08:10.370
this is going to define that
relationship allowing that to get

92

00:08:10.370  -->  00:08:14.600
created in the database. Now hibernate is
going to make some guesses for us and

93

00:08:14.600  -->  00:08:18.910
what I'm going to do is I'm going to
start up spring boot right now.

94

00:08:18.910  -->  00:08:24.020
So I've gone into IntelliJ I'm running
spring booth same thing as if I gone to

95

00:08:24.020  -->  00:08:29.840
maven and done spring boot run so we can
see that it did come up pretty pretty

96

00:08:29.840  -->  00:08:35.840
quick and you can see some hibernate
chatter here saying that it has done an

97

00:08:35.840  -->  00:08:43.010
import and it's actually gone in and
created on the fly for us and there's an

98

00:08:43.010  -->  00:08:50.540
h2 database counsel available and we are
getting this error page because it used

99

00:08:50.540  -->  00:08:54.350
to be enabled by default but
is not so what we need to do is come

100

00:08:54.350  -->  00:09:03.290
over here, I left that in so you can see
it and I'm gonna use IntelliJ h23 intellisense and

101

00:09:03.290  -->  00:09:08.420
we can see that the spring dot h2
council navel is false. I'm going to

102

00:09:08.420  -->  00:09:15.260
change that to true and we'll restart
things so we can get that database

103

00:09:15.260  -->  00:09:19.610
Council because what I want to do is
show you the in-memory database so in

104

00:09:19.610  -->  00:09:24.500
the background spring has  started up an h2
database for us. Let's come back over

105

00:09:24.500  -->  00:09:29.510
here and test that, now the one
thing when you're doing this is

106

00:09:29.510  -->  00:09:36.560
keep an eye on your JDBC URL so you
definitely want JDBC h2 mem test DB if

107

00:09:36.560  -->  00:09:40.760
you have something else in there and I
think it's cached for me I've had others

108

00:09:40.760  -->  00:09:44.870
get in trouble with this I believe
this is cached for some reason on my

109

00:09:44.870  -->  00:09:51.620
browser I can go in and connect but
watch that URL and now we can see

110

00:09:51.620  -->  00:09:58.490
what hibernate is created inside of h2
for us so we have author, author books,

111

00:09:58.490  -->  00:10:03.320
books and book authors so this is going
to set up the relationships and we

112

00:10:03.320  -->  00:10:07.010
probably want to tweak this because I'm
not too happy with how this turned

113

00:10:07.010  -->  00:10:10.370
out. This is not a good database schema for

114

00:10:10.370  -->  00:10:15.710
us but this is just using the default
mappings and we are going to definitely

115

00:10:15.710  -->  00:10:21.050
tweak that so that we have a better
relationship and specify the join tables

116

00:10:21.050  -->  00:10:25.850
but this is hibernate's first guy found a
very minimal JPA mapping for us so I'm

117

00:10:25.850  -->  00:10:29.720
going to switch over now and correct
that little problem that we have so what

118

00:10:29.720  -->  00:10:33.050
we want to do is get rid of author books
and book authors these are auto

119

00:10:33.050  -->  00:10:37.310
generated by hibernate and we don't want
that behavior so I'm going to toggle

120

00:10:37.310  -->  00:10:43.520
over here to IntelliJ and the first
thing I need to do is check author and

121

00:10:43.520  -->  00:10:52.550
say that he's mapped by and saying he's
mapped by authors so this is going to be

122

00:10:52.550  -->  00:10:57.440
the target side, so we're creating a
relationship to books for him and the

123

00:10:57.440  -->  00:11:00.680
next thing we need to do, this is a little
bit more complex

124

00:11:00.680  -->  00:11:05.869
because we only want one joint table not
two because we didn't specify information

125

00:11:05.869  -->  00:11:10.009
so hibernate's trying to fulfill both
ways of the direction and we want to

126

00:11:10.009  -->  00:11:14.749
actually have a single table to define
that relationship so what we need to do

127

00:11:14.749  -->  00:11:24.790
is add in what's called a joined table and
in this case we're going to say a name

128

00:11:24.970  -->  00:11:30.290
so we're doing an author book so we're gonna
toggle over to chrome real quick and you

129

00:11:30.290  -->  00:11:34.369
can see that it created author books and
book authors which is not what we want

130

00:11:34.369  -->  00:11:41.949
so we're going to override that and now we
also need to tell it about joint columns

131

00:11:42.369  -->  00:11:46.569
I'm going to say that joint column.

132

00:11:50.950  -->  00:11:55.360
and what this is going to do if we
take a quick look over here the way the

133

00:11:55.360  -->  00:12:02.440
default mapping and hibernate work is
it's creating authors ID and books ID so

134

00:12:02.440  -->  00:12:06.190
we want a singular ID value there so
that's what's going to change that

135

00:12:06.190  -->  00:12:17.010
behavior and then finally we need to
specify inverse join columns

136

00:12:23.509  -->  00:12:28.949
so now I've got the column specified so
it were saying book ID and author ID

137

00:12:28.949  -->  00:12:33.899
to get those columns singular and let's
take a quick peek back over here once

138

00:12:33.899  -->  00:12:38.509
more so we can see I have the two joint
column so I'm specifying with these

139

00:12:38.509  -->  00:12:43.919
annotations I want a single table so
let's go ahead and restart this now and

140

00:12:43.919  -->  00:12:48.359
what's going to happen is hibernate is
going to restart and generate the schema

141

00:12:48.359  -->  00:12:53.419
DDL for us in the background based on
our JPA mappings. They'll come up pretty quick

142

00:12:53.419  -->  00:12:59.069
see that it's back up and we are going
to do a refresh here see our database

143

00:12:59.069  -->  00:13:08.789
has changed and now we can see that we
have author book and author book and we

144

00:13:08.789  -->  00:13:12.509
have a single book ID and a singular
author ID so now we have a single

145

00:13:12.509  -->  00:13:17.759
relational table to define that
many-to-many relationship for us.

146

00:13:17.759  -->  00:13:21.209
Alright that is a great introduction to
JPA in case you didn't know anything

147

00:13:21.209  -->  00:13:26.009
about JPA before I hope this gave you a
good solid over here now clearly we only

148

00:13:26.009  -->  00:13:29.959
covered the very basics of JPA I'm
trying to give you a very standard

149

00:13:29.959  -->  00:13:33.929
object relational model to work with and
we're going to work with this going

150

00:13:33.929  -->  00:13:37.439
forward and get this data,
well actually put data in the database

151

00:13:37.439  -->  00:13:41.129
ultimately, at the end of the section of
the course we're going to get that

152

00:13:41.129  -->  00:13:45.749
displaying on a web page but this is
like the basics further down the course

153

00:13:45.749  -->  00:13:49.529
we are going to get a lot more into JPA
and show you some more advanced features

154

00:13:49.529  -->  00:13:54.899
of using JPA mappings. But right now
we're just getting going so I didn't

155

00:13:54.899  -->  00:13:58.199
want to get too far down that rabbit
hole we got a lot more to cover in this

156

00:13:58.199  -->  00:14:02.099
section of the course as far as getting
data into the database and through a

157

00:14:02.099  -->  00:14:07.579
spring MVC controller and onto a web
page for us.
