WEBVTT
0
1
00:00:04.130 --> 00:00:09.900
In this video, we are gonna go ahead and
implement our Spring MVC Test. It's
1

2
00:00:09.900 --> 00:00:14.280
gonna be a little bit different from
what we did previously. We will keep
2

3
00:00:14.280 --> 00:00:18.000
these lightweight as well. We're gonna be we're going to ask you number 52 here
3

4
00:00:18.000 --> 00:00:22.800
to write Spring MVC Test for the Owner
Controller. I'll assign this to me
4

5
00:00:22.800 --> 00:00:28.019
saying that I am working on it and let's
toggle over to IntelliJ and get started.
5

6
00:00:28.019 --> 00:00:32.399
Let's bring up the OwnerController
and take a look at what we're gonna
6

7
00:00:32.399 --> 00:00:35.239
be testing here.
7

8
00:00:35.680 --> 00:00:39.820
We are looking at just the OwnerController and we have two methods here.
8

9
00:00:39.820 --> 00:00:45.250
We're gonna go /owners. We
have a couple of different request mappings
9

10
00:00:45.250 --> 00:00:50.140
here to bring this up. So if we go to the
index we are gonna return back a
10

11
00:00:50.140 --> 00:00:58.380
Model of owners and say to return back
the view owners/index, which maps to
11

12
00:00:58.610 --> 00:01:05.300
templates/owners/index.html, so okay. 
That's what we wanna test here.
12

13
00:01:05.300 --> 00:01:11.729
Let's take a look at the Maven POM real
quick. You can see here that I don't have
13

14
00:01:11.729 --> 00:01:15.180
Mockito and we definitely gonna need
Mockito here. So I am going to come over
14

15
00:01:15.180 --> 00:01:23.729
here to the data project and shamelessly
cut and paste this on over to this
15

16
00:01:23.729 --> 00:01:28.170
project because we are definitely gonna need that. That brings in the
16

17
00:01:28.170 --> 00:01:33.810
Mockito Dependency for JUnit 5
specifically to get that cooking for us.
17

18
00:01:33.810 --> 00:01:39.300
And now what I wanna do is generate
the test class so I'm gonna come up
18

19
00:01:39.300 --> 00:01:46.380
here and option enter on that and say
Create Test. I want to do these two
19

20
00:01:46.380 --> 00:01:52.500
and we'll add in a setUp method. I
don't need a teardown. IntelliJ is
20

21
00:01:52.500 --> 00:01:57.960
giving us the name of OwnerControllerTest, which is just fine. Again I like to
21

22
00:01:57.960 --> 00:02:01.500
go split-screen on this. I'm gonna split this and it will close the top
22

23
00:02:01.500 --> 00:02:07.439
one so now I have my class under test at
top and a test down on the bottom here.
23

24
00:02:07.439 --> 00:02:13.640
Now we wanna set up Mockito on this. 
We will do the JUnit @ExtendWith
24

25
00:02:13.640 --> 00:02:17.320
MockitoExtension.
25

26
00:02:17.709 --> 00:02:22.359
So that initializes that. Now our OwnerController is gonna need the 
26

27
00:02:22.359 --> 00:02:28.500
OwnerService. So we're gonna set him up.
27

28
00:02:30.250 --> 00:02:33.810
We'll call him a Mock.
28

29
00:02:36.819 --> 00:02:40.260
Then of course we're gonna need an OwnerController.
29

30
00:02:42.100 --> 00:02:49.600
Let's call him controller. We'll run InjectMocks
on him. There's a command in Mockito to init
30

31
00:02:49.600 --> 00:02:53.200
mocks that you run in the setUp
method and t he @ExtendWith effectively
31

32
00:02:53.200 --> 00:02:58.810
does the same thing for us. So let's see
here. We are going to allow a list of
32

33
00:02:58.810 --> 00:03:06.660
owners. For the owners, let's make
sure that's a Set of owners.
33

34
00:03:15.400 --> 00:03:21.049
Actually, I am going to not do that
there. I'm gonna do that inside the or
34

35
00:03:21.049 --> 00:03:23.860
the setUp(). I'm sorry.
35

36
00:03:28.920 --> 00:03:35.240
Let's do owners.add()
36

37
00:03:41.690 --> 00:03:46.370
I'm just doing this here to add in a
couple owners to the Set that I want to
37

38
00:03:46.370 --> 00:03:50.060
do that. I'm setting it up this way in
case I have more than one test. We're
38

39
00:03:50.060 --> 00:03:54.710
probably not gonna do that here. But,
this does give me an object that gets it
39

40
00:03:54.710 --> 00:03:57.920
reinitialize that I can use for
additional tests if I wanna test out
40

41
00:03:57.920 --> 00:04:04.090
different scenarios. Now what I need to
do is initialize the Spring MVC
41

42
00:04:08.819 --> 00:04:13.610
and this sets up to the
controller for testing. The Mock MVC
42

43
00:04:13.610 --> 00:04:17.330
is a really nice Spring project.
Controllers can be really tricky, a little
43

44
00:04:17.330 --> 00:04:21.950
beasts to test. So this really sets
things up nicely for us for testing so
44

45
00:04:21.950 --> 00:04:25.270
I'm gonna set up mockMvc.
45

46
00:04:29.100 --> 00:04:32.460
There's a couple different options
here. I like the standalone setup because
46

47
00:04:32.460 --> 00:04:36.630
this is a very lightweight of doing it
so I'm gonna do standaloneSetup.
47

48
00:04:36.630 --> 00:04:40.040
We are gonna say our controller dot
48

49
00:04:40.240 --> 00:04:43.990
build(). There are different options
here. There's a lot of things that you
49

50
00:04:43.990 --> 00:04:49.000
can do with the standaloneSetup. As
far as configuration, a number of
50

51
00:04:49.000 --> 00:04:52.449
different options. I'm not getting into
right now. We have a very very simple
51

52
00:04:52.449 --> 00:04:57.190
scenario that we wanna be testing. 
But what this does is for each test
52

53
00:04:57.190 --> 00:05:02.949
method, it initializes a mock environment
for your controller so you can test a
53

54
00:05:02.949 --> 00:05:07.870
lot of different interactions with it. So
now, it's to listOwners. You can see
54

55
00:05:07.870 --> 00:05:13.139
here this is gonna return back Model.
It's expecting a Model to come in.
55

56
00:05:13.139 --> 00:05:19.240
We are going to add an attribute called
owners and the ownerService.findAll() is
56

57
00:05:19.240 --> 00:05:24.180
gonna be invoked. So first thing, we
wanna do is say
57

58
00:05:24.180 --> 00:05:32.490
when ownerService.findAll(). You can see
there it's say IntelliJ got that little
58

59
00:05:32.490 --> 00:05:37.260
bubble up there asking me if I wanna
do a new import of the Mockito.when. I'm
59

60
00:05:37.260 --> 00:05:41.660
gonna hit option enter, to say yes I do.
60

61
00:05:41.889 --> 00:05:45.150
Then return. So that sets up
61

62
00:05:46.150 --> 00:05:54.759
Mock Interaction.
Now you can say 
62

63
00:05:55.830 --> 00:05:58.370
mockMvc.perform(get)
63

64
00:05:59.630 --> 00:06:03.460
and we are bringing up the world here.
64

65
00:06:06.750 --> 00:06:10.289
I did not know there'd be so many
static imports
65

66
00:06:10.289 --> 00:06:14.300
of gets here. I probably scrolled right
by it.
66

67
00:06:28.860 --> 00:06:33.569
You can see there that is complaining about
complaining about an exception so I
67

68
00:06:33.569 --> 00:06:41.000
added that to the method signature.
Now I can say andExpect(status()).
68

69
00:06:42.240 --> 00:06:46.979
These static imports can be a little
tricky. I want the 
69

70
00:06:46.979 --> 00:06:52.460
MockMvcResultMatchers. It's exactly what
I want.
70

71
00:06:54.680 --> 00:07:00.220
So I set up a very very basic test so
let's go ahead and run that.
71

72
00:07:05.860 --> 00:07:12.699
You can see that that was not found.
Oh okay. So I made a mistake there so I'm
72

73
00:07:12.699 --> 00:07:15.539
gonna do owners
73

74
00:07:16.710 --> 00:07:21.810
like so. I bet this work better. I
made a mistake there. I was just looking
74

75
00:07:21.810 --> 00:07:26.759
at the RequestMapping but it
actually builds off of that. So now, this
75

76
00:07:26.759 --> 00:07:31.320
is actually working a little bit more
better so to speak because I did get the
76

77
00:07:31.320 --> 00:07:35.550
200 status rather than 400. Now there's a
couple things that we can refactor here.
77

78
00:07:35.550 --> 00:07:40.650
Rather than status is, we can do. Now you
can see that IntelliJ brought up a
78

79
00:07:40.650 --> 00:07:46.770
number of options. I can say it's any 
200 or I can do isOk. So I'm gonna
79

80
00:07:46.770 --> 00:07:50.460
go to those ok. That kind of makes a
little more sense to me. So that's a
80

81
00:07:50.460 --> 00:07:56.010
matcher there. I'm saying status isOk. That's testing back. Again, this
81

82
00:07:56.010 --> 00:08:00.449
is on the HTTP status. And now, there's a
few more assertions that I can make on
82

83
00:08:00.449 --> 00:08:06.289
this so let's add those andExpect
83

84
00:08:06.550 --> 00:08:11.460
so I'm gonna say view(), this is another
static import.
84

85
00:08:13.439 --> 00:08:17.699
It's gonna return back a 
view name. I wanna make sure this is
85

86
00:08:17.699 --> 00:08:21.499
returning back owners/index.
86

87
00:08:24.130 --> 00:08:28.830
We can add in one more here
87

88
00:08:29.100 --> 00:08:32.480
andExpect() model.
88

89
00:08:32.650 --> 00:08:39.110
So model right, attribute and I should have owners on
89

90
00:08:39.110 --> 00:08:42.389
there.
90

91
00:08:47.240 --> 00:08:53.520
So we got a couple methods here.
I'm pretty sure we'll take in this matchers has size
91

92
00:08:53.520 --> 00:08:58.980
so let's make sure that's it. Just to
reiterate, what we're doing here is we're
92

93
00:08:58.980 --> 00:09:03.690
setting up a test. We wanna make sure
that this list owners is gonna get a
93

94
00:09:03.690 --> 00:09:09.210
Model because remember our mock is
returning back a Set that has two
94

95
00:09:09.210 --> 00:09:13.350
elements on it. So I'm gonna make sure
that I have an attribute called owners
95

96
00:09:13.350 --> 00:09:18.870
which has a size of two and that the
view name of owners/index returns. Let's
96

97
00:09:18.870 --> 00:09:23.059
go ahead and run that to make sure that he
runs happily.
97

98
00:09:23.059 --> 00:09:28.759
You can see that is now happy and just to to
show you it if I said four there, this
98

99
00:09:28.759 --> 00:09:34.519
test would fail. Just to show you that it
is in fact looking at the list owners
99

100
00:09:34.519 --> 00:09:39.019
and you can see that he went kaboom
because the collection size was two and
100

101
00:09:39.019 --> 00:09:45.589
not four. So fix that. That
gives us test coverage on this. If I
101

102
00:09:45.589 --> 00:09:51.139
wanted to, I could also, let's see you
here. I'll show you real quick. We can
102

103
00:09:51.139 --> 00:09:57.060
just copy this
and say...
103

104
00:09:57.550 --> 00:10:05.020
so I could test a different path. So I
say index and it should return the same.
104

105
00:10:05.020 --> 00:10:09.400
So all the same conditions there but I
wanna test that other path so I'm
105

106
00:10:09.400 --> 00:10:12.910
showing you how to test an alternate
path to make sure that my mapping is
106

107
00:10:12.910 --> 00:10:18.180
correct. You can see that it does run
pretty quick and that is in fact correct.
107

108
00:10:18.180 --> 00:10:25.750
And now there's one final one. Here is
our find method says not implemented. So
108

109
00:10:25.750 --> 00:10:33.390
now, what I can come down here is add in
a very simple one, mockMvc.perform().
109

110
00:10:33.460 --> 00:10:38.100
I get and this is gonna be 
110

111
00:10:38.570 --> 00:10:41.170
/owners
111

112
00:10:44.320 --> 00:10:48.589
and we can say .andExpect().
112

113
00:10:51.580 --> 00:10:55.860
We can say view()name().
113

114
00:10:56.040 --> 00:10:59.839
I'm just gonna copy that.
114

115
00:11:03.390 --> 00:11:08.029
You can see here that we got a little red squiggly
there, Unhandled exception. I'm gonna
115

116
00:11:08.029 --> 00:11:13.160
hit alt+enter and add exception to the
method signature, and now we have our
116

117
00:11:13.160 --> 00:11:17.569
test there. This gives us coverage
for everything. Let's go ahead and run
117

118
00:11:17.569 --> 00:11:23.689
that to make sure that this other one
here is in fact working properly.
118

119
00:11:23.689 --> 00:11:28.730
I do plan to implement this so this test
will have to change. Now one other thing
119

120
00:11:28.730 --> 00:11:37.009
that we can do here is show you another
thing. We can do verifyZeroInteractions()
120

121
00:11:37.009 --> 00:11:44.239
with the ownerService mock because this
findOwners() should not be interacting
121

122
00:11:44.239 --> 00:11:48.619
with the OwnerService. If it did, right
now Mockito would not squawk but at this
122

123
00:11:48.619 --> 00:11:52.100
point we don't want it to, so let's go to
make sure that that in fact did not
123

124
00:11:52.100 --> 00:11:54.549
happen.
You can see
124

125
00:11:56.400 --> 00:12:00.960
there that test runs. Now I'm gonna come up here just make sure that all
125

126
00:12:00.960 --> 00:12:03.680
my test run.
126

127
00:12:03.980 --> 00:12:10.080
You can see here that all the tests are
running, so our controller tests are
127

128
00:12:10.080 --> 00:12:15.300
running. So now we have test coverage on
that. Just to cover quickly what we
128

129
00:12:15.300 --> 00:12:19.110
did again. We are using JUnit 5
here. We are extending it out with
129

130
00:12:19.110 --> 00:12:21.600
MockitoExtension which will initialize the
130

131
00:12:21.600 --> 00:12:27.000
mocks for us. We only have one mock
here on the OwnerService. We are using
131

132
00:12:27.000 --> 00:12:31.050
the Mockito @InjectMocks which will set
up the controller with the mocks
132

133
00:12:31.050 --> 00:12:37.290
injected into it, and then in our setUp
method, we are initializing an owners
133

134
00:12:37.290 --> 00:12:42.120
object which we'll use for the return
value from the controllers. And then on
134

135
00:12:42.120 --> 00:12:47.040
line 46, we're using the MockMvcBuilders, a standaloneSetup, which is
135

136
00:12:47.040 --> 00:12:52.680
very lightweight to set up a environment
for Spring Controller to run in. It's all
136

137
00:12:52.680 --> 00:12:56.820
Mock environment. It doesn't actually
pull up a server which is really quite
137

138
00:12:56.820 --> 00:13:01.080
nice. I tested Spring applications before
this and it was awful. So that this is
138

139
00:13:01.080 --> 00:13:05.700
very lightweight. It allows you to test
the interactions with it and then we are
139

140
00:13:05.700 --> 00:13:14.300
testing list owners so we are going to
the URL /owners. And then we are
140

141
00:13:14.300 --> 00:13:20.100
RequestMapping also has index. I wrote a
second test there to listOwnersByIndex(),
141

142
00:13:20.100 --> 00:13:25.470
so that's the URLs owners/index. It should invoke the same handler
142

143
00:13:25.470 --> 00:13:31.950
method. In both cases, we are doing
form GET. We're using HTTP GET verb.
143

144
00:13:31.950 --> 00:13:38.430
We are expecting a status of ok which is
an HTTP status of 200. And then we are
144

145
00:13:38.430 --> 00:13:42.420
expecting the view name to be returned
back for owners/index which
145

146
00:13:42.420 --> 00:13:47.130
is a Thymeleaf View. We are expecting the
model to have an attribute called owners
146

147
00:13:47.130 --> 00:13:53.430
with the size of two. And then finally, our
findOwners() does not implement it but we
147

148
00:13:53.430 --> 00:13:59.700
are expecting that to return back a
status of 200 and the view name of 
148

149
00:13:59.700 --> 00:14:04.350
notimplemented. So we actually have an HTML
page called notimplemented. And then
149

150
00:14:04.350 --> 00:14:09.810
finally in line 78 there, we are making
sure that we have zero interactions with
150

151
00:14:09.810 --> 00:14:15.040
the Mock ownerService. So that completes
that test.
151

152
00:14:15.040 --> 00:14:21.240
That was number 52. I am gonna go ahead
and commit this to GitHub.
152

153
00:14:32.600 --> 00:14:37.390
I'm gonna commit and push it and
close out the task.
