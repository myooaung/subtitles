WEBVTT
0
1
00:00:09.349 --> 00:00:13.889
Alright, what we want to do here, is
assign storage on the host, for the
1

2
00:00:13.889 --> 00:00:17.699
container to use. Now we saw, in the last
section, there where it did not persist.
2

3
00:00:17.699 --> 00:00:22.500
Because what's happening is, when we
establish a container, that container
3

4
00:00:22.500 --> 00:00:27.539
does get a layer to work with, where it
can persist. All the other layers that
4

5
00:00:27.539 --> 00:00:30.810
can't write out but it does get a
working directory, for like temporary
5

6
00:00:30.810 --> 00:00:34.829
files and stuff like that, that it can
use. If you don't give it, if you
6

7
00:00:34.829 --> 00:00:39.899
don't map to the host, that is lost when
we shut down the container, it restarts.
7

8
00:00:39.899 --> 00:00:45.239
So what we want to do here is tell it,
and we're going to go through, and we'll
8

9
00:00:45.239 --> 00:00:52.800
tell a rabbit or teller Mongo
instance to map to a specific directory
9

10
00:00:52.800 --> 00:00:57.480
on the host machine. So when it starts
back up, it will bring the database up,
10

11
00:00:57.480 --> 00:01:01.379
just like how it's running on localhost, if
it wasn't running inside of a container,
11

12
00:01:01.379 --> 00:01:05.070
it would come back up and see its
persistent data. So we're going to toggle
12

13
00:01:05.070 --> 00:01:07.890
over now. There's some important
stuff that I'm going to point out here
13

14
00:01:07.890 --> 00:01:14.820
about mapping directories and different
operating systems with using Docker. Okay.
14

15
00:01:14.820 --> 00:01:19.350
We're going to go over to the Mongo page,
for the Mongo instance that we're
15

16
00:01:19.350 --> 00:01:22.020
working with. And I want to point out
something here. It's very important,
16

17
00:01:22.020 --> 00:01:26.790
scrolling down here and it talks about
where to store data. And right here at
17

18
00:01:26.790 --> 00:01:32.990
the top, big warning here, Windows and OS X. Now, this is applicable to using
18

19
00:01:32.990 --> 00:01:39.420
VirtualBox. Okay. Now, the OS X client at
the time of this, let's say I'm
19

20
00:01:39.420 --> 00:01:46.040
recording this early February 2017 and
the native installation of Docker,
20

21
00:01:46.040 --> 00:01:49.590
probably, I'm not quite sure what came
out to be honest, but it hasn't been out
21

22
00:01:49.590 --> 00:01:55.500
very long. Within the last six to nine
months. So like six nine months ago you
22

23
00:01:55.500 --> 00:02:01.939
had run VirtualBox on OS X as well. So
there wasn't a native installation.
23

24
00:02:01.939 --> 00:02:08.009
The same went for Windows. So Windows 10
now well it does some hypervisor stuff,
24

25
00:02:08.009 --> 00:02:12.220
where you can run Docker natively and VMs
using that. So,
25

26
00:02:12.220 --> 00:02:17.500
this whole space, I want to point out,
this is very rapidly approaching. So if
26

27
00:02:17.500 --> 00:02:21.760
you're not running out of flavor of
Linux, some of these caveats might get
27

28
00:02:21.760 --> 00:02:27.910
you. Now I'm running the latest OS X
Sierra. It's been pretty good. If
28

29
00:02:27.910 --> 00:02:34.900
you're not running OS X Sierra, or not
running Windows 10, you may run into some
29

30
00:02:34.900 --> 00:02:38.470
gotchas around assigning storage here, as it's pointing out here how the Mongo
30

31
00:02:38.470 --> 00:02:43.750
page. So but to move forward, because this is an important section, because we want
31

32
00:02:43.750 --> 00:02:47.650
to get persistent storage going with
Mongo, I'm going to move forward with
32

33
00:02:47.650 --> 00:02:55.930
this. And so we can see right here, what
we want to do is specify this string here.
33

34
00:02:55.930 --> 00:03:02.920
So that string there the - v parameter
says "map this host directory to this
34

35
00:03:02.920 --> 00:03:05.890
container directory". That's what's
going to setup the persistent storage
35

36
00:03:05.890 --> 00:03:12.910
for Mongo. So, I'm going to toggle over here to the command line. And if I do wrong
36

37
00:03:12.910 --> 00:03:21.670
command window, history, and it's a quick
way to see what I've been running
37

38
00:03:21.670 --> 00:03:28.480
against Mongo, and on line 540 that is
the command that I used to start off
38

39
00:03:28.480 --> 00:03:34.840
Mongo. You can see I did not have a slash v
there. You can see in line 58, this
39

40
00:03:34.840 --> 00:03:41.230
this is where I made a directory. So out
of my home directory, now I am I'm still
40

41
00:03:41.230 --> 00:03:47.880
here though end-user /jt
I've created a dockerdata/mongo
41

42
00:03:47.880 --> 00:03:54.220
directory. So now, if I I'm going to clear
those so we can stay at the top, doing
42

43
00:03:54.220 --> 00:03:59.140
docker ps, that tells me Mongo is still
running. What I want to do is docker
43

44
00:03:59.140 --> 00:04:04.769
stop, and I'm going to give it the container
name,
44

45
00:04:06.000 --> 00:04:12.630
paste that in, and that's going to stop
the Docker instance, and I've got the
45

46
00:04:12.630 --> 00:04:21.750
command prepared over here. Actually, I'm going to cd into that. So, you do see
46

47
00:04:21.750 --> 00:04:27.900
nothing's there right now. So, that's
where I'm at. I'm on users/jt/dockerdata/
47

48
00:04:27.900 --> 00:04:32.700
mongo. Now I'm going to run this command,
so I just want to recap what's going on
48

49
00:04:32.700 --> 00:04:35.610
here.
I'm telling Docker. I'm telling it to run
49

50
00:04:35.610 --> 00:04:40.200
and I'm passing it in a minus p, and
that's going to do the port mapping. So I
50

51
00:04:40.200 --> 00:04:48.600
was going to map my host port of 27017
to the container port of 27017. I am
51

52
00:04:48.600 --> 00:04:54.060
saying to run with the d flag is a
daemon in the background the Mongo
52

53
00:04:54.060 --> 00:05:00.840
container and I'm also passing it in the
v parameter. Actually, I need to... made
53

54
00:05:00.840 --> 00:05:11.970
one mistake here, so I need to call in
was it /data/db, so I need, like so.
54

55
00:05:11.970 --> 00:05:15.630
I had a little mistake there in the
command I prepared. So now that's going to
55

56
00:05:15.630 --> 00:05:22.860
map the directory on my machine in OS X
users/jt/dockerdata/mongo to the
56

57
00:05:22.860 --> 00:05:29.550
container directory of data/db. So
let's go ahead and execute that, and
57

58
00:05:29.550 --> 00:05:35.040
we'll get some feedback. Now let's
clear this and do docker ps to see
58

59
00:05:35.040 --> 00:05:45.560
what's running, and nothing ran. So let's
do docker ps - a and let's do docker logs
59

60
00:05:45.560 --> 00:05:49.370
in this container.
60

61
00:05:53.580 --> 00:06:05.770
Ah...bad control value, so I think I have the
command wrong. Let's clear this. Rather
61

62
00:06:05.770 --> 00:06:17.580
than that, I'm a switching stuff around
here on notepad. So I changed the order
62

63
00:06:17.580 --> 00:06:22.630
so that, that v parameter, that was my
mistake. I changed that order around .So
63

64
00:06:22.630 --> 00:06:27.850
now, you can see. What happened was, as
this was getting passed in as a
64

65
00:06:27.850 --> 00:06:33.160
parameter to the module container, not
what I want so the /d assuming it has to be
65

66
00:06:33.160 --> 00:06:40.600
the last one. So let's take a look and see
how that runs. Now we are running. So this
66

67
00:06:40.600 --> 00:06:46.480
is looking much better.
Make sure it's still up. So he is up. So
67

68
00:06:46.480 --> 00:06:53.470
let's jog over and take a look at our
Spring Boot. We can see that, he was not
68

69
00:06:53.470 --> 00:06:58.210
happy there while it was down. I'm going to
restart this real quick. Take a look at
69

70
00:06:58.210 --> 00:07:06.910
that. So Spring Boot is starting up. We
are running. Let's come over here to my
70

71
00:07:06.910 --> 00:07:13.860
tutorial and it is happy. So let's come in
71

72
00:07:16.610 --> 00:07:24.080
and we are adding a product test me. Okay?
So now, in theory, I should be, I'll come
72

73
00:07:24.080 --> 00:07:34.939
over here and say docker stop this
container. I'm still in the Mango
73

74
00:07:34.939 --> 00:07:38.990
directory. Let's do the ls. So now we
can see that there's some stuff going on
74

75
00:07:38.990 --> 00:07:43.939
in here. Before it was empty.
I'm going to show you a trick, so I can
75

76
00:07:43.939 --> 00:07:53.659
do a history, grep mongo. This brings up
my command, so I want that one I'm 575 so
76

77
00:07:53.659 --> 00:08:00.889
if I do bang 575, and that's slang for
exclamation point. So if I just do that,
77

78
00:08:00.889 --> 00:08:07.719
over on that same command, we can see
that Mango is up and running again.
78

79
00:08:07.719 --> 00:08:15.500
Now I'll even bounce Spring
Boot here, just to make sure. So yeah... he
79

80
00:08:15.500 --> 00:08:19.789
timed out and he restarted. I'm going to
pause again just to prove that
80

81
00:08:19.789 --> 00:08:23.029
we're not caching anything in Spring
Boot. So we're going to do fresh start
81

82
00:08:23.029 --> 00:08:29.090
of that. So he is up and running out.
Let's toggle back over and take a look
82

83
00:08:29.090 --> 00:08:36.620
at this. I'm going to go to the list
view right off, and boom! There's my
83

84
00:08:36.620 --> 00:08:42.949
product. So it is now persisting to the
database. You can see I ran into a couple
84

85
00:08:42.949 --> 00:08:46.970
minor problems there in mapping the
storage there. I had the order of the
85

86
00:08:46.970 --> 00:08:52.190
parameters in the incorrect
order. That was my mistake but I chose
86

87
00:08:52.190 --> 00:08:56.209
to leave that in there, because I'm sure
one of you might do that in the
87

88
00:08:56.209 --> 00:08:59.660
future. So I do try to leave my mistakes
in there and use them as learning
88

89
00:08:59.660 --> 00:09:05.300
activities because I'm not always
perfect. But you can see here, by mapping
89

90
00:09:05.300 --> 00:09:10.790
out that storage, we did get the
container to go to the host system and
90

91
00:09:10.790 --> 00:09:14.390
gave it the permissions to write out to
those system. I did the... I've listed a
91

92
00:09:14.390 --> 00:09:17.600
directory of that previous empty
directory. We saw the different files
92

93
00:09:17.600 --> 00:09:21.050
that the Mongo database created, and then
we shut everything down,
93

94
00:09:21.050 --> 00:09:25.279
brought it back up and we can see how
the Mongo database had persisted data
94

95
00:09:25.279 --> 00:09:29.350
now to the host system.
