WEBVTT
0
1
00:00:04.160 --> 00:00:09.059
Now, in this video what we want to do is
we want to add in a simple Index Page. So
1

2
00:00:09.059 --> 00:00:12.269
we're going to need to create a
controller to return back to the index
2

3
00:00:12.269 --> 00:00:16.109
page and we're going to set up a Thymeleaf template for the index page as well.
3

4
00:00:16.109 --> 00:00:19.920
And the reason I'm doing this now is
going forward, we're going to be looking
4

5
00:00:19.920 --> 00:00:25.680
at how this page gets rendered in Spring
MVC from a client perspective. So we're
5

6
00:00:25.680 --> 00:00:28.650
going to be looking at some of the
development tools and running against it.
6

7
00:00:28.650 --> 00:00:33.600
So right now as the project comes out, if
we ran it, there's no templates or
7

8
00:00:33.600 --> 00:00:37.079
anything to run again. So there's really
nothing for us to serve so we're going
8

9
00:00:37.079 --> 00:00:41.129
to have to create it here. So I'm going to
step through and do exactly that now. So
9

10
00:00:41.129 --> 00:00:48.989
I'm going to come in and create a New
Package and call it controllers and add
10

11
00:00:48.989 --> 00:00:54.410
in a Java class called IndexController.
11

12
00:00:55.399 --> 00:01:02.370
And I'm going to add that into GitHub for you guys and the Controller
12

13
00:01:02.370 --> 00:01:10.110
annotation makes this a Spring Bean now. So
by adding that in, because the Spring
13

14
00:01:10.110 --> 00:01:15.810
Boot application is here and it's going by default to do a package scan of any
14

15
00:01:15.810 --> 00:01:19.950
package underneath it. So that will get
picked up by the default Spring Boot
15

16
00:01:19.950 --> 00:01:22.700
package scan.
16

17
00:01:29.540 --> 00:01:34.020
Okay so we are going to return back a
string called index and that's going to
17

18
00:01:34.020 --> 00:01:39.510
resolve to a Thymeleaf template which we
have not created yet but we also want to
18

19
00:01:39.510 --> 00:01:53.460
set up the RequestMapping here. So in
the RequestMapping, I'm giving it three
19

20
00:01:53.460 --> 00:01:58.170
values there so we'll be able to hit
this either blank or with the slash or
20

21
00:01:58.170 --> 00:02:05.790
going to /index. May or may not need
them. I'm not quite sure, we might
21

22
00:02:05.790 --> 00:02:10.160
test that out. So this is our basic
controller that we've set up here. So
22

23
00:02:10.160 --> 00:02:14.760
it's called IndexController. It's
annotated with the @Controller making
23

24
00:02:14.760 --> 00:02:18.620
it a Spring component and then the
Request Mapping sets up the Spring MVC
24

25
00:02:18.620 --> 00:02:24.240
Request mapping to find this to indicate
that when we go to one of these URL
25

26
00:02:24.240 --> 00:02:29.580
values that we want the get index page
called and it's going to return back a
26

27
00:02:29.580 --> 00:02:35.640
string value for index which is going to
go against a Thymeleaf template. So let's
27

28
00:02:35.640 --> 00:02:44.280
go ahead and create the template now and say New HTML File and I just need to
28

29
00:02:44.280 --> 00:02:49.739
call this index and it's important that
this index value, that string value of
29

30
00:02:49.739 --> 00:02:54.450
the HTML file name, matches the string
that's returning this. So that's
30

31
00:02:54.450 --> 00:02:58.830
how Thymeleaf for work. So it's going to
find and match things that way. I'm going
31

32
00:02:58.830 --> 00:03:04.739
to add that in to Git. Okay so we have a
basic page and what we want to do is we
32

33
00:03:04.739 --> 00:03:09.840
want to make this a Thymeleaf template. So
we're going to go in and add in the XML
33

34
00:03:09.840 --> 00:03:14.130
namespace. So boom now it's officially a Thymeleaf template. So now a lot to change
34

35
00:03:14.130 --> 00:03:18.560
there and let's add in a heading for
this.
35

36
00:03:22.010 --> 00:03:27.650
I'm just going to say My Recipes. Now if you
remember, Thymeleaf is an agile
36

37
00:03:27.650 --> 00:03:32.510
templating engine. So let's take a quick
peek at this in Chrome and we can see
37

38
00:03:32.510 --> 00:03:37.970
that My Recipes! is displayed as we want. So that's good. So let's go ahead and run
38

39
00:03:37.970 --> 00:03:43.159
this and verify that works. So I'm going
to come in here and on the Spring Boot
39

40
00:03:43.159 --> 00:03:48.859
application, I can right click on it and
say Run. So you can see we're doing a
40

41
00:03:48.859 --> 00:03:57.049
quick build there, parsing. And now we're
going to get started up and let's go
41

42
00:03:57.049 --> 00:04:00.609
over to localhost and take a look at it.
42

43
00:04:04.000 --> 00:04:16.729
And we got an error. So let's take a look and see what
it's saying and we're having a problem
43

44
00:04:16.729 --> 00:04:27.770
with html. Oh I see what it did. I had
made a mistake here. So that was actually
44

45
00:04:27.770 --> 00:04:34.039
supposed to be there. So that's pasting
in. So I didn't make a Thymeleaf template.
45

46
00:04:34.039 --> 00:04:41.960
I've made an error. So let's go ahead
and reload this and I saw an error. If
46

47
00:04:41.960 --> 00:04:46.039
you see I'm on Spring 1.5. So that's
definitely a mistake. I'm going to fix
47

48
00:04:46.039 --> 00:04:50.320
that too. Let's take a look at this now.
48

49
00:04:51.400 --> 00:04:58.690
Another error, what's wrong? Ah the meta tag.
49

50
00:04:58.840 --> 00:05:05.930
So Thymeleaf wants everything properly
escaped. So that HTML tag was not
50

51
00:05:05.930 --> 00:05:11.120
properly closed in an XML sense, Html's a little bit more forgiving but
51

52
00:05:11.120 --> 00:05:16.630
Thymeleaf does do strict matching so let's
restart this again.
52

53
00:05:20.430 --> 00:05:26.410
Alright My Recipes! is displayed.
So now yes I saw that I made one more
53

54
00:05:26.410 --> 00:05:30.970
mistake and I brought in the wrong
version of Spring. So this is going to bring in
54

55
00:05:30.970 --> 00:05:34.630
Spring 4 and I want to be working
with Spring 5. So it's definitely a
55

56
00:05:34.630 --> 00:05:39.840
mistake on my part. So I am going to
cheat and come over here to our Joke app
56

57
00:05:39.840 --> 00:05:44.919
where I did not make that mistake and of
course my Joke app is on the wrong
57

58
00:05:44.919 --> 00:05:54.580
screen. I would come over here and the
current release is Spring Boot M1. So that's
58

59
00:05:54.580 --> 00:06:06.310
milestone one. I'll go ahead and update
that. I can see IntelliJ is asking me
59

60
00:06:06.310 --> 00:06:11.500
to Import Changes. You can do an Auto
Import there. I do like having
60

61
00:06:11.500 --> 00:06:14.979
the manual import. It does let me know
when things are changing. So I can see
61

62
00:06:14.979 --> 00:06:19.660
that and sometimes when you're working
on a really really large project, Auto
62

63
00:06:19.660 --> 00:06:23.710
Import can be rather sluggish and that's
just from experience and I'm talking of a
63

64
00:06:23.710 --> 00:06:28.060
pretty big enterprise project. So I'm
restarting it, make sure that we're
64

65
00:06:28.060 --> 00:06:35.520
getting the proper Spring Boot version
but we did not. So let's stop this again.
65

66
00:06:35.520 --> 00:06:41.680
I'm going to close this and we're going
to make sure that we get to get the
66

67
00:06:41.680 --> 00:06:47.950
refresh of the dependencies. Now I'm
going to go ahead and start up again and
67

68
00:06:47.950 --> 00:06:54.060
make sure that we still are not getting
the proper version.
68

69
00:06:57.240 --> 00:07:02.880
Okay I paused it there and took a quick
look at the pom from our Joke app and
69

70
00:07:02.880 --> 00:07:09.180
what I didn't do is I forgot to include
these repositories. So these are a couple
70

71
00:07:09.180 --> 00:07:13.990
repositories that are used for SNAPSHOT
versions. So I'm recording that's pretty
71

72
00:07:13.990 --> 00:07:19.020
early. So I am using a SNAPSHOT or a
Milestone release actually so there's a
72

73
00:07:19.020 --> 00:07:24.460
special Spring repository for Snapshots
and for Milestones both for the
73

74
00:07:24.460 --> 00:07:30.280
repositories and the plugin. So I'm
actually kind of surprised when I changed
74

75
00:07:30.280 --> 00:07:35.230
that version that it worked at all. So
but sometimes I even still get surprised
75

76
00:07:35.230 --> 00:07:41.290
by things. So I'm going to come in and
add these and now let's go ahead and
76

77
00:07:41.290 --> 00:07:46.840
import those changes. I think IntelliJ
did something as far as keeping the
77

78
00:07:46.840 --> 00:07:50.830
class path right because I was running
from IntelliJ and not in Maven. So
78

79
00:07:50.830 --> 00:07:55.660
imagine mMven probably would have been
unhappy about not having those
79

80
00:07:55.660 --> 00:08:00.550
repositories and calling for an
unmatched version of Spring Boot. So now
80

81
00:08:00.550 --> 00:08:04.090
I'm going to go ahead and run this again
and I expect that we'll get the proper
81

82
00:08:04.090 --> 00:08:12.880
Spring Boot version come up. And it's
taken a second longer because IntelliJ
82

83
00:08:12.880 --> 00:08:17.020
is going back and working with maven to
download the dependencies and also index
83

84
00:08:17.020 --> 00:08:22.690
the new dependencies. So now you can see
that we are, let's go by a little bit fast,
84

85
00:08:22.690 --> 00:08:27.430
but you can see that we are in fact on
Spring Boot v2 Milestone one
85

86
00:08:27.430 --> 00:08:31.330
which is exactly what we want.  At
the time of recording, that is the latest
86

87
00:08:31.330 --> 00:08:34.560
release of Spring Boot.
