WEBVTT
0
1
00:00:03.740 --> 00:00:10.469
In this video, what we are going to do is
tackle listing the Owners on the Index
1

2
00:00:10.469 --> 00:00:14.190
Page so I'm going to click over here and
bring up this task so we are going to
2

3
00:00:14.190 --> 00:00:18.390
complete task #16 on this page and
we're going to do a couple things in
3

4
00:00:18.390 --> 00:00:23.490
this. One, we want to get the Owners
control or running returning back Owners
4

5
00:00:23.490 --> 00:00:28.619
from the OwnerService, just a list of
Owners, and then, we also want to create
5

6
00:00:28.619 --> 00:00:32.399
the Index Page. Actually, I think we 
already created the Index Page.
6

7
00:00:32.399 --> 00:00:37.320
We just need to add commands for Thymeleaf
to display the elements. So let's go
7

8
00:00:37.320 --> 00:00:42.900
ahead and implement that now.
I'm going to toggle over here to
8

9
00:00:42.900 --> 00:00:47.870
IntelliJ. The first thing that we
want to do is on the Owners Controller,
9

10
00:00:47.870 --> 00:00:54.390
what we need to do is get a handle
on that OwnerService. So I come in
10

11
00:00:54.390 --> 00:01:02.070
here and do private final OwnerService
like so, you can see that IntelliJ is
11

12
00:01:02.070 --> 00:01:06.510
giving me a little red arrow there. If I
come in here, I can say Add in a
12

13
00:01:06.510 --> 00:01:10.560
Constructor Parameter and IntelliJ will
automatically create that for us.
13

14
00:01:10.560 --> 00:01:16.410
Again, doing Constructor Injection is
the preferred way working with injected
14

15
00:01:16.410 --> 00:01:20.220
properties. That's really the
best practice, so I'm doing it. I'm
15

16
00:01:20.220 --> 00:01:24.420
declaring it final so that that object
can never be changed. Spring Framework
16

17
00:01:24.420 --> 00:01:27.570
will inject it through the
constructor so when this Controller
17

18
00:01:27.570 --> 00:01:31.530
class gets instantiated, there's only one
way to instantiate it and that is with
18

19
00:01:31.530 --> 00:01:37.080
an instance of the OwnerService. So now
what we want to do here is we are going
19

20
00:01:37.080 --> 00:01:40.670
to bring in a Model
20

21
00:01:41.130 --> 00:01:47.759
like so and by declaring that, Spring MVC
is automatically going to add a Model
21

22
00:01:47.759 --> 00:01:53.520
when it calls this method to list. 
What we want to do here is a model.addAttribute.
22

23
00:01:53.520 --> 00:01:59.340
We want this 
implementation here,
23

24
00:01:59.340 --> 00:02:06.150
owners, so that will be the name of the
property inside the model. Not right here.
24

25
00:02:06.150 --> 00:02:12.930
Now what we want to say is 
ownerService.findAll like so. That is
25

26
00:02:12.930 --> 00:02:18.270
going to give us a set that will be able
to iterate over. It's very simple.
26

27
00:02:18.270 --> 00:02:23.670
When this gets called by Spring MVC,
Spring MVC is going to inject the model
27

28
00:02:23.670 --> 00:02:29.970
into it, and when it runs, it's going to
add in an attribute called owners which
28

29
00:02:29.970 --> 00:02:34.500
will be all Owners from the final method
of the OwnerService, and then we're
29

30
00:02:34.500 --> 00:02:38.459
going to return back the Owners
Index Page. Now, we gotta come over here
30

31
00:02:38.459 --> 00:02:43.680
to the Index Page. We don't have anything
coming in here, so what we can do is
31

32
00:02:43.680 --> 00:02:49.019
actually I'm going to pause the video
here while I write out the HTML. I
32

33
00:02:49.019 --> 00:02:52.290
think that might be a little boring for
you guys to watch so I'm going to pause
33

34
00:02:52.290 --> 00:03:02.030
the video and be right back.
Celine, that was amazing! That was the
34

35
00:03:02.030 --> 00:03:07.280
most beautiful performance ever seen
in my life. Thank you so much. Thank you. No,
35

36
00:03:07.280 --> 00:03:12.130
thank you.
We need to do it again.
36

37
00:03:12.130 --> 00:03:20.750
Okay. Why? Well, it's too good. Yeah, this is
this is Deadpool 2, not Titanic. All right,
37

38
00:03:20.750 --> 00:03:25.220
you're like an 11. We need to get you
down to a five five and a half tops, just
38

39
00:03:25.220 --> 00:03:33.050
phone it in. Listen. This thing only goes
to 11, so beat it Spiderman. God, I should
39

40
00:03:33.050 --> 00:03:38.900
have asked in sick. Okay, I jumped ahead a
little bit so you didn't have to watch
40

41
00:03:38.900 --> 00:03:44.090
me fumble through coding all this HTML
because coding HTML one of my favuorite
41

42
00:03:44.090 --> 00:03:49.490
things to do. That's a little sarcasm
there. What I've done here is I added
42

43
00:03:49.490 --> 00:03:54.980
in a table element, so we have id, firstName, lastName, our properties.
43

44
00:03:54.980 --> 00:04:02.330
Just as a recap on our Owner, object
extends out Person. Person has firstName,
44

45
00:04:02.330 --> 00:04:07.940
lastName and that also extends out BaseEntity. I'll jump over to that and that
45

46
00:04:07.940 --> 00:04:12.350
has an id property, so our Owner object
basically has firstName, lastName, and
46

47
00:04:12.350 --> 00:04:16.130
id. Not a very robust object but good
enough for our purposes.
47

48
00:04:16.130 --> 00:04:21.770
What's going to happen here is the
Model is going to have the element
48

49
00:04:21.770 --> 00:04:26.740
Owners. Remember here in the OwnerController, we are setting a property
49

50
00:04:26.740 --> 00:04:32.510
attribute called Owners. That's going
to Map to this property that Thymeleaf
50

51
00:04:32.510 --> 00:04:35.870
is going to be looking for. We're
going to iterate over it, so we're using the
51

52
00:04:35.870 --> 00:04:40.220
th:each iterator. That is going to
iterate and that's going to create a
52

53
00:04:40.220 --> 00:04:46.460
table row for each owner in owners. 
For that, we are going to create the
53

54
00:04:46.460 --> 00:04:52.640
table elements for id, firstName, and
lastName. I'm going to go ahead and
54

55
00:04:52.640 --> 00:04:58.000
format this. There we go. Not  you. 
I ran
55

56
00:04:59.660 --> 00:05:03.770
the formatter on that. I did an auto
format to adjust the formatting on this.
56

57
00:05:03.770 --> 00:05:09.830
One other thing up here, you can
see I'm using this thymesVar, this HTML
57

58
00:05:09.830 --> 00:05:15.350
comment. This tells Thymeleaf slash,
I should say, it tells IntelliJ that
58

59
00:05:15.350 --> 00:05:20.000
for owner, it is of the type of this
Owner, so I'll give it the full package
59

60
00:05:20.000 --> 00:05:24.320
name then the model Owner so that's
how IntelliJ knows though. I'm
60

61
00:05:24.320 --> 00:05:27.980
still getting a little flag there. 
We'll see if I made a mistake there now
61

62
00:05:27.980 --> 00:05:31.790
because I have not run this. I'm trying
to do as much live coding as possible
62

63
00:05:31.790 --> 00:05:38.270
here. So let's go ahead and actually run
this now. I'll bring that up. Click
63

64
00:05:38.270 --> 00:05:42.500
down, you can see that's building and
parsing down below. We are starting
64

65
00:05:42.500 --> 00:05:47.990
up. Again, we are running as Map
implementation. You can see that we are up. Let's
65

66
00:05:47.990 --> 00:05:55.340
come over here to Chrome. I still had a
List of Owners up here. Let's refresh
66

67
00:05:55.340 --> 00:06:01.190
that. We can see that we have Fiona
and Michael there, so this is working
67

68
00:06:01.190 --> 00:06:04.190
properly.
Right now, this is just kind of a
68

69
00:06:04.190 --> 00:06:08.510
random sort. We're not specifying any
sort in the Map implementation. This
69

70
00:06:08.510 --> 00:06:14.060
is going to just kind of be how it comes
out of the map for us.
70

71
00:06:14.060 --> 00:06:18.770
Actually it should stay pretty
consistent once we were started, but it
71

72
00:06:18.770 --> 00:06:25.520
might change, might not. So just to recap,
what we did there. We modified the OwnerController
72

73
00:06:25.520 --> 00:06:30.230
to inject the OwnerService.
We're doing Constructor Injection. We
73

74
00:06:30.230 --> 00:06:34.010
don't need to specifically call out an
Autowired on it, that gets on it
74

75
00:06:34.010 --> 00:06:39.620
automatically Autowired by Spring
Framework and then we modified the listOwners
75

76
00:06:39.620 --> 00:06:44.450
to accept a Model attribute.
That object is now getting injected
76

77
00:06:44.450 --> 00:06:50.960
by Spring MVC. On line 24 there, we are
adding the attribute of owners to that.
77

78
00:06:50.960 --> 00:06:56.150
That gets returned back to 
Thymeleaf so the Model is
78

79
00:06:56.150 --> 00:06:59.180
returned back to Thymeleaf. It's going to
have an attribute called owners and then
79

80
00:06:59.180 --> 00:07:04.280
we're telling it to use owners/index in
that template and we modified that
80

81
00:07:04.280 --> 00:07:10.580
template to have a table element in it
and to display the properties of id,
81

82
00:07:10.580 --> 00:07:14.009
firstName, lastName.
Right now, we're not doing any
82

83
00:07:14.009 --> 00:07:17.550
formatting yet so we're just kind of
letting it do its thing. Actually, I'd
83

84
00:07:17.550 --> 00:07:21.870
get rid of this because this should
never. I don't think we need the null safe
84

85
00:07:21.870 --> 00:07:26.880
operator there. I could be wrong. But on
second thought, I don't think we actually
85

86
00:07:26.880 --> 00:07:29.910
need the null safe operator there
because I'm not transversing anything
86

87
00:07:29.910 --> 00:07:34.919
unless we should never have a null owner
object, so we don't need that null safe
87

88
00:07:34.919 --> 00:07:39.690
operator. Just a refresh, we'll come
back over here. Refresh that. That is
88

89
00:07:39.690 --> 00:07:46.890
still up and happening. Let's see here.
We were working on #16, so I'm
89

90
00:07:46.890 --> 00:07:51.890
going to commit that code. I guess #16
like so.
90

91
00:07:58.890 --> 00:08:04.890
Let's say that Closes #16 and
we will Commit and Push this.
91

92
00:08:05.520 --> 00:08:09.590
We can see that's up to close.
