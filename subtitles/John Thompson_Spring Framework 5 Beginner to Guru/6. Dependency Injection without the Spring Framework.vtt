WEBVTT
0
1
00:00:04.190 --> 00:00:08.309
Alright! In this video we are going to
take a look at dependency injection. We
1

2
00:00:08.309 --> 00:00:11.309
are going to do it manually and what I'm
going to do is step you through some
2

3
00:00:11.309 --> 00:00:15.660
examples. Giving some realistic example
where we have controllers. We're
3

4
00:00:15.660 --> 00:00:18.420
gonna inject a service into those
controllers. It's simple Hello World
4

5
00:00:18.420 --> 00:00:22.859
service but we're going to do dependency
injection on it and we're going to mimic
5

6
00:00:22.859 --> 00:00:25.859
what Spring does in the 
background. I want you to see some
6

7
00:00:25.859 --> 00:00:31.230
hands-on stuff. By doing this, we're going to
use JUnit which is when you start
7

8
00:00:31.230 --> 00:00:34.290
developing Spring applications it's
actually kind of common to do because
8

9
00:00:34.290 --> 00:00:38.969
you will be using JUnit to write your
unit tests in and then we'll also be
9

10
00:00:38.969 --> 00:00:43.920
using those same classes and allowing
Spring to manage them. So I'm going kind of
10

11
00:00:43.920 --> 00:00:47.850
mimic what you do in real-world spring
development here but the focus of this
11

12
00:00:47.850 --> 00:00:52.110
is to get your hands on and have you
start understanding the dependency 
12

13
00:00:52.110 --> 00:00:55.440
injection . We're focusing purely on
dependency injection and we're going to
13

14
00:00:55.440 --> 00:01:00.180
use JUnit for our runtime so we are
going to kind of behave like the Spring
14

15
00:01:00.180 --> 00:01:03.480
Framework and do the dependency
injection ourself. We're going to
15

16
00:01:03.480 --> 00:01:09.869
look at property based dependency
injection, also setter based dependency
16

17
00:01:09.869 --> 00:01:13.920
injection, and then finally constructor
based dependency injection. We will
17

18
00:01:13.920 --> 00:01:17.310
follow for the most part using
interfaces which is really a best
18

19
00:01:17.310 --> 00:01:22.439
practice for dependency injection. Okay,
I've created some code here to
19

20
00:01:22.439 --> 00:01:28.110
help us step through manual dependency
injection and later will convert this
20

21
00:01:28.110 --> 00:01:31.320
over and let's Spring manage it. But for
now, we're going to just walk through the
21

22
00:01:31.320 --> 00:01:35.850
example I've created. It's pretty simple
stuff. What I have here on the screen
22

23
00:01:35.850 --> 00:01:41.100
right now is a you can see on line 10
their property injected controller. So
23

24
00:01:41.100 --> 00:01:44.340
this is an example. I'm doing everything
wrong in this one. We definitely don't
24

25
00:01:44.340 --> 00:01:49.829
want to be doing property injection. But
I have a public property called greeting
25

26
00:01:49.829 --> 00:01:53.790
service implementation. Let me take a
quick look at the greeting service
26

27
00:01:53.790 --> 00:01:58.680
implementation. You can see that this is
a service that I marked with the Spring
27

28
00:01:58.680 --> 00:02:02.490
Framework Service annotation saying that
it's a component but we're not going to
28

29
00:02:02.490 --> 00:02:07.140
be running Spring right now. It does
implement the greeting service. You see
29

30
00:02:07.140 --> 00:02:10.149
I've got a static string. This as Hello
Gurus.
30

31
00:02:10.149 --> 00:02:13.989
It just returns that string. So not a
lot of brains in this guy but it's
31

32
00:02:13.989 --> 00:02:18.519
perfect for our demonstration purposes.
And then I had the greeting service
32

33
00:02:18.519 --> 00:02:25.750
interface so the server impl
implements the interface. Now, the
33

34
00:02:25.750 --> 00:02:29.440
property injected controller, I'm using
this as an example of everything not to
34

35
00:02:29.440 --> 00:02:35.470
do. I do have a public greeting service
Impl. I am doing the hard class
35

36
00:02:35.470 --> 00:02:41.049
name or the concrete class name, some
people say. So that is not the interface
36

37
00:02:41.049 --> 00:02:46.930
but this will still get wired up
properly and when we call the
37

38
00:02:46.930 --> 00:02:52.239
greeting service which I only need. I'm
going to nuke that getter there. We don't
38

39
00:02:52.239 --> 00:02:56.549
even need that. So let's get rid of him.
39

40
00:02:56.550 --> 00:03:01.500
I was doing this in it. I think IntelliJ
refactored it on me. Because it doesn't like you
40

41
00:03:01.500 --> 00:03:06.390
doing bad things like this.
41

42
00:03:09.810 --> 00:03:12.739
I just had to
42

43
00:03:13.550 --> 00:03:17.920
do that. Nope. C'mon IntelliJ.
43

44
00:03:18.550 --> 00:03:24.880
There. So I just need to do that property
there. I got rid of the getter, so. Now I
44

45
00:03:24.880 --> 00:03:29.950
have no getters or setters. This is a
case study of everything not to
45

46
00:03:29.950 --> 00:03:34.780
do. So the next one I have is the getter
injected controller and let's take a
46

47
00:03:34.780 --> 00:03:40.120
look. Hey, guys quick call out here. I made
a mistake when I was recording this
47

48
00:03:40.120 --> 00:03:44.710
video and I called it a getter injected
controller. It should have been setter
48

49
00:03:44.710 --> 00:03:49.240
injected controller. So that was a typo of mine here. I have updated the source code
49

50
00:03:49.240 --> 00:03:53.710
inside a github but the video is still
reflecting a getter injected controller
50

51
00:03:53.710 --> 00:03:57.850
that should be setter injected
controller. So sorry about the confusion
51

52
00:03:57.850 --> 00:04:03.370
but the source code is updated. If you
look inside a github, you will not find a
52

53
00:04:03.370 --> 00:04:07.420
getter injected controller but you will
find a setter injected controller. So
53

54
00:04:07.420 --> 00:04:12.730
sorry about the typo there but I have
updated the source code for you. Look at
54

55
00:04:12.730 --> 00:04:18.100
that one, almost the same. But now I have
a private property for the greeting
55

56
00:04:18.100 --> 00:04:24.700
server Impl. That's still bad to do
the implementation of that. So what I'm
56

57
00:04:24.700 --> 00:04:28.900
going to do. So if your not familiar with
IntelliJ, you can come in here and do a
57

58
00:04:28.900 --> 00:04:36.570
refactor and do a type migration. All
I want to do is get rid of that Impl.
58

59
00:04:36.570 --> 00:04:42.060
So now this is better because we're
using the interface so any class
59

60
00:04:42.060 --> 00:04:45.889
that implements that interface will now
be injected there.
60

61
00:04:45.889 --> 00:04:51.370
This here actually should also be
that.
61

62
00:04:51.510 --> 00:04:56.169
So now that the setter will accept that.
The property is that. So everything's
62

63
00:04:56.169 --> 00:05:02.260
happy now and again this will get. We can
create the class and then set the
63

64
00:05:02.260 --> 00:05:06.669
greeting service and when
we say hello, the greeting service
64

65
00:05:06.669 --> 00:05:11.770
will get invoked. And then finally, we
have the constructor injected. Now let's
65

66
00:05:11.770 --> 00:05:18.510
take a quick look at that. Same problem
here. Let's refactor that.
66

67
00:05:21.919 --> 00:05:26.979
We want the constructor take in the
interface.
67

68
00:05:26.990 --> 00:05:33.380
So if you can see now this has
a public constructor. I'll take that
68

69
00:05:33.380 --> 00:05:40.310
in and then we have the method sayHello
again to say that out. So let's take a
69

70
00:05:40.310 --> 00:05:43.460
look at these under unit tests. So what
we're going to do in this is we're going
70

71
00:05:43.460 --> 00:05:51.440
to use JUnit to test these. So I have a
JUnit class here and I have a private
71

72
00:05:51.440 --> 00:05:55.759
property for the property injected
controller. So remember this is the one
72

73
00:05:55.759 --> 00:06:00.500
that we're doing everything bad with. And
here we have the setup method inside of
73

74
00:06:00.500 --> 00:06:07.039
JUnit. On line 18 there, now we
create a new property controller then on
74

75
00:06:07.039 --> 00:06:12.680
line 19 we instantiate a new greeting
service implementation. And when I run
75

76
00:06:12.680 --> 00:06:19.199
this we can see that it runs just fine.
So that you can see down at the bottom
76

77
00:06:19.199 --> 00:06:25.680
there that that did pass. Now let's take
a look at the getter and getter one. So
77

78
00:06:25.680 --> 00:06:30.990
in this case again, very similar. You
can see there on the before method on
78

79
00:06:30.990 --> 00:06:37.500
16 to 20. On line 18 there,
we do a new instance of the controller
79

80
00:06:37.500 --> 00:06:41.430
and then we use the setter to set it so
that's what we mean by setter based
80

81
00:06:41.430 --> 00:06:45.180
dependency injections. We're acting
like a Spring Framework right now and
81

82
00:06:45.180 --> 00:06:49.740
injecting it manually inside of our test.
You can see that I have the test
82

83
00:06:49.740 --> 00:06:53.120
here so let's go ahead and run that.
83

84
00:06:56.150 --> 00:07:01.700
That's all green. And then finally, this
is the constructor based. What we have
84

85
00:07:01.700 --> 00:07:06.200
here again is a private property and
then you can see our setup method does
85

86
00:07:06.200 --> 00:07:11.150
change because what we're doing is we
have our constructor injected controller.
86

87
00:07:11.150 --> 00:07:16.250
We create a new instance of it and this
time we have a constructor that we have
87

88
00:07:16.250 --> 00:07:21.170
to give it the greeting service. So I'm
just doing a new there in line to create
88

89
00:07:21.170 --> 00:07:25.420
that greeting service implementation. I
am using the implementation there.
89

90
00:07:25.420 --> 00:07:30.380
You can see this by using the
constructor based injection, there's
90

91
00:07:30.380 --> 00:07:35.690
no way I can create that class without
having providing it the proper or I
91

92
00:07:35.690 --> 00:07:41.180
should say a proper a implementation of
a greeting service. So that's why
92

93
00:07:41.180 --> 00:07:46.400
people prefer constructor based
injection so I can't create that up and
93

94
00:07:46.400 --> 00:07:52.400
mess it up, contrast that with the getter.
In theory, what happens there on line 18,
94

95
00:07:52.400 --> 00:07:58.400
I've created that object. That object
is now instantiated and if I comment
95

96
00:07:58.400 --> 00:08:06.020
this out, it's going to comment that out.
Now if I run this, I should get an NPE
96

97
00:08:06.020 --> 00:08:10.789
or a Null Pointer Error.
This is exactly what will happen. So
97

98
00:08:10.789 --> 00:08:15.770
if you have an unsatisfied dependency. So
the dependency injection didn't happen.
98

99
00:08:15.770 --> 00:08:21.949
Now you're getting a null pointer error.
So we'll comment this back. Uncomment
99

100
00:08:21.949 --> 00:08:27.130
that and we'll run it again. Get back in
the green.
100

101
00:08:27.630 --> 00:08:33.720
And now you can see here on line 17
there's no way that I can create that
101

102
00:08:33.720 --> 00:08:38.010
controller without providing it the
dependency so that null pointer that we
102

103
00:08:38.010 --> 00:08:43.589
just saw is an impossible situation.
103

104
00:08:44.630 --> 00:08:49.779
You can see that all my tests are
green. And my impossible situation there.
104

105
00:08:49.779 --> 00:08:54.709
Some people argue that the framework
itself so if you have a dependency that
105

106
00:08:54.709 --> 00:08:59.839
you've told Spring to inject, you will
get a runtime error. So by using
106

107
00:08:59.839 --> 00:09:03.769
constructor base, you're ensuring it
through object-oriented principles.
107

108
00:09:03.769 --> 00:09:08.329
Some people argue for method based
because the framework is managing all
108

109
00:09:08.329 --> 00:09:13.310
the objects and if for some reason an
object is not available to be injected,
109

110
00:09:13.310 --> 00:09:17.810
the framework will fail at runtime. So
you kind of get the same effect so
110

111
00:09:17.810 --> 00:09:21.319
that's why that there's a lot of
debate in the community about which to
111

112
00:09:21.319 --> 00:09:26.420
use. But current trends, constructor based
is definitely preferred. Alright, you
112

113
00:09:26.420 --> 00:09:31.519
can see how dependency injection works
now how we alleviated those dependencies
113

114
00:09:31.519 --> 00:09:37.459
out of the controller classes and we
used an external program to inject those
114

115
00:09:37.459 --> 00:09:41.630
dependencies so that external program is
determining the dependencies to inject
115

116
00:09:41.630 --> 00:09:45.620
into our classes and then we are running
unit tests on those to get back the
116

117
00:09:45.620 --> 00:09:49.009
right results. So we can see that
actually working. I went through
117

118
00:09:49.009 --> 00:09:53.689
there and I showed you why setter based
dependency injection is not always
118

119
00:09:53.689 --> 00:09:58.670
preferred because I was able to mimic
out where we didn't set that dependency
119

120
00:09:58.670 --> 00:10:02.870
and we went to run our class and we've
got a NullPointerException and this is
120

121
00:10:02.870 --> 00:10:06.620
exactly what's going to happen. You will
see this sometimes when you're running
121

122
00:10:06.620 --> 00:10:11.899
Spring and doing things with Spring,
you'll forget to annotate a class or set
122

123
00:10:11.899 --> 00:10:17.180
a dependency as far as the configuration
goes and then you go to run it and
123

124
00:10:17.180 --> 00:10:20.870
you'll get a null pointer here. So
something that you'll definitely see as
124

125
00:10:20.870 --> 00:10:23.660
you get further down the road with
Spring. So it's not. Doesn't prevent you
125

126
00:10:23.660 --> 00:10:28.160
from doing stupid things, but it's a
pretty pretty simple thing to recover
126

127
00:10:28.160 --> 00:10:33.589
from. As you can see, I got the NPE. Went
in. Dependency is missing so I need to
127

128
00:10:33.589 --> 00:10:36.920
provide that dependency. So that pops out
pretty quickly especially when you're
128

129
00:10:36.920 --> 00:10:41.199
doing setter based dependency injection.
