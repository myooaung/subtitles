WEBVTT
0
1
00:00:03.170 --> 00:00:08.069
Okay, I'm going to troubleshoot something
here from one of my students. He's
1

2
00:00:08.069 --> 00:00:12.389
complaining or saying not complaining.
He's saying that the H2 database is
2

3
00:00:12.389 --> 00:00:19.199
hanging after an insert. So I cloned his
or forked to his GitHub repo and got a
3

4
00:00:19.199 --> 00:00:24.330
project opened up in IntelliJ. And I have
not looked at this at all yet. So we're
4

5
00:00:24.330 --> 00:00:28.019
going to go through it. Go through this
live. I'm just going to take a look and
5

6
00:00:28.019 --> 00:00:32.430
see what we have here. And so we are
running...
6

7
00:00:32.430 --> 00:00:40.050
Okay, so we're running into Spring Boot 2.
So it's some of the latest stuff here.
7

8
00:00:40.050 --> 00:00:46.190
I'm just going through seeing what
we have in the dependencies. So nothing
8

9
00:00:46.190 --> 00:00:51.440
earth-shattering there.
Everything looks pretty straightforward.
9

10
00:00:51.440 --> 00:00:58.500
Yeah so we got the H2 database there.
I am going to run this and see if
10

11
00:00:58.500 --> 00:01:04.730
we can duplicate what he's seeing.
11

12
00:01:10.980 --> 00:01:17.100
So we're starting up there in Hibernate or
Hibernate Spring Boot. Tomcat got this up on
12

13
00:01:17.100 --> 00:01:21.960
8080. I'm going to toggle over to Chrome. I
13

14
00:01:30.120 --> 00:01:35.440
believe it was a change at customer. So
he's following along with my data set. So
14

15
00:01:35.440 --> 00:01:47.410
I'm a big Burn Notice fan. So let's edit
this. Okay, we do look like we've hung up
15

16
00:01:47.410 --> 00:02:00.370
there. And he also told me that on the H2
database, you could see the changes. So
16

17
00:02:00.370 --> 00:02:09.990
let's do that. Got to take a quick look
at the H2 database.
17

18
00:02:15.000 --> 00:02:19.660
Okay so my quick update did not go
through yet. So the change I made to
18

19
00:02:19.660 --> 00:02:26.830
Michael Westen, his name is not persisted.
Yeah it looks like we are okay so we did
19

20
00:02:26.830 --> 00:02:30.520
timeout. Unable to acquire a JDBC
connection. So let's take a closer look
20

21
00:02:30.520 --> 00:02:41.380
to see what's going on here. I'm going to
refresh that. So our update
21

22
00:02:41.380 --> 00:02:49.920
definitely did not go through. What he is
getting data, the database is working.
22

23
00:02:53.040 --> 00:03:04.000
Okay, so it got the active profile of
jpadao. Take a look at services. Look at
23

24
00:03:04.000 --> 00:03:11.670
the CustomerServiceJpaDaoImpl. So
this will get invoked with that profile.
24

25
00:03:18.540 --> 00:03:24.490
Everything looks pretty accurate. I don't
see anything jumping out at me. So I'm
25

26
00:03:24.490 --> 00:03:28.870
going to set a breakpoint here. This
should be the safer update action that
26

27
00:03:28.870 --> 00:03:38.280
he's getting to. And I am going to stop
this and rerun it in the debugger.
27

28
00:03:43.950 --> 00:03:48.210
Oddly, the stop has taken a while to
28

29
00:04:02.200 --> 00:04:07.970
kill that process. Let's bring
it up in the debug. That's out to see it,
29

30
00:04:07.970 --> 00:04:20.720
that a pausing like that. So that
works. That's interesting. The
30

31
00:04:20.720 --> 00:04:28.070
bootstrap is working. So everything
went through okay there. So let's try this
31

32
00:04:28.070 --> 00:04:30.130
again.
32

33
00:04:35.860 --> 00:04:42.680
Okay, he's in there. We have an energy
matter factory that looks okay. So we'll
33

34
00:04:42.680 --> 00:04:49.030
just step over that. Get the transaction.
34

35
00:04:49.030 --> 00:05:03.639
Commit. Returns it. That all looks okay.
35

36
00:05:04.570 --> 00:05:13.100
That time, it worked. That is... I'd see it
working in the debugger. So let's try
36

37
00:05:13.100 --> 00:05:24.460
going back. Refresh this. I'll make sure
that it did in fact persist. So reconnect.
37

38
00:05:27.970 --> 00:05:36.340
So my update did happen. I added the
22 there. Let's change that again.
38

39
00:05:42.170 --> 00:05:53.730
Sit back in the debugger. I'm just going to
go ahead and set play. And now, we're
39

40
00:05:53.730 --> 00:05:57.020
seeing the same problem again.
40

41
00:06:28.330 --> 00:06:33.879
So we got a timeout there. When we're
trying to get the commit transaction, and
41

42
00:06:33.879 --> 00:06:38.620
that looks like pretty standard stuff
there. I'm going to pause this and reset.
42

43
00:06:38.620 --> 00:06:47.530
Research it real quick. Okay, did a little
research there and looked into this a
43

44
00:06:47.530 --> 00:06:55.180
little bit closer. I think I figured
out what is going on here. So we have I'm
44

45
00:06:55.180 --> 00:06:59.379
a little bit rusty at this because I
almost never use EntityManager anymore.
45

46
00:06:59.379 --> 00:07:04.300
But we have the em and what we are not
doing is we're not closing that
46

47
00:07:04.300 --> 00:07:09.129
connection. So I believe what was
happening is that, we were running out of
47

48
00:07:09.129 --> 00:07:14.590
database connection. So under the covers,
Spring Boot is going to be using a pool
48

49
00:07:14.590 --> 00:07:19.719
of database connections. And we got up
and got okay and we're not explicitly
49

50
00:07:19.719 --> 00:07:23.770
closing that connection so they're
staying open and we're essentially
50

51
00:07:23.770 --> 00:07:29.199
running out of database connection. So
I put in on line 45 here to close out
51

52
00:07:29.199 --> 00:07:35.050
our EntityManager to explicitly close
it and this is why we like to use
52

53
00:07:35.050 --> 00:07:38.469
frameworks for this stuff because you
get into the raw stuff a little close
53

54
00:07:38.469 --> 00:07:42.699
and personal. It's easy to forget
stuff like this and cause leaks like
54

55
00:07:42.699 --> 00:07:46.719
that, where you're not properly releasing
the database connection. So I'm going to
55

56
00:07:46.719 --> 00:07:59.560
bring this back up. Let's take a look
at it. Know what's the bad there. So
56

57
00:07:59.560 --> 00:08:08.830
let's go ahead and edit Mr. Weston. Add a 2. Can see that went through right away. Let's
57

58
00:08:08.830 --> 00:08:14.759
go back to customers. We'll edit him
again.
58

59
00:08:18.210 --> 00:08:28.420
And now we are running into the same
problem. So I tested this before resuming
59

60
00:08:28.420 --> 00:08:37.840
and it worked. And now we are not working
again. So I am going to pause this and
60

61
00:08:37.840 --> 00:08:42.300
look at it a little bit closer. I thought
that was the solution.
61

62
00:08:44.040 --> 00:08:49.660
Okay, did a little more research there
and looked at this closer. And what was
62

63
00:08:49.660 --> 00:08:55.300
happening, I believe, as I went in and
added close statements to the others, so
63

64
00:08:55.300 --> 00:09:00.820
we were leaving that EntityManager open
and it's consuming all the connections
64

65
00:09:00.820 --> 00:09:05.410
in our database pool. That's why it's
timing out. While I took care of the
65

66
00:09:05.410 --> 00:09:11.650
one doing the update, we had the others
on the list and get functions as well
66

67
00:09:11.650 --> 00:09:17.770
that we're also leaving open connections.
So we had go in and close those. Now I'm
67

68
00:09:17.770 --> 00:09:22.300
going to toggle back over. I have up and
running with these close statements and
68

69
00:09:22.300 --> 00:09:29.530
and I can come in at Mr. Weston. I'll
just make a couple changes to him.
69

70
00:09:29.530 --> 00:09:40.660
Let's go back here. Let's edit Fiona.
So that that's working now. We can
70

71
00:09:40.660 --> 00:09:45.670
see that I'm able to to refresh and
everything's working normally. If I come
71

72
00:09:45.670 --> 00:09:50.440
in and continue doing edits, we can see
that we're not exhausting the connection
72

73
00:09:50.440 --> 00:09:56.260
pool anymore. So I believe it was going
in and adding in these close statements
73

74
00:09:56.260 --> 00:10:01.090
to release the database connection. So
we're basically, I can't remember the
74

75
00:10:01.090 --> 00:10:06.190
exact default, I think it's around 20, 20
or 25 connections in that pool. And as
75

76
00:10:06.190 --> 00:10:10.120
we're running through this, the EntityManager wasn't getting released and
76

77
00:10:10.120 --> 00:10:15.400
those connections are still being left
in use. So when we hit that 20 or 25 mark
77

78
00:10:15.400 --> 00:10:20.470
of open connections to the database, the
next one when we're doing that update
78

79
00:10:20.470 --> 00:10:26.970
couldn't get a connection. And basically
what happens is in the pulling situation
79

80
00:10:26.970 --> 00:10:32.860
we're going to be going - hey give me a
database connection from the pool and it
80

81
00:10:32.860 --> 00:10:38.199
waits I think the default was three
seconds, and it's like Oh can't get one,
81

82
00:10:38.199 --> 00:10:44.740
and then it tosses in an error. So this is just a leak in the database connections.
82

83
00:10:44.740 --> 00:10:50.829
This is why I prefer using something
like Spring Data JPA over doing this. I do
83

84
00:10:50.829 --> 00:10:54.069
teach it in my older courses and I'm
probably going to add it into my Spring 5
84

85
00:10:54.069 --> 00:10:58.899
course because there is a lot of
legacy stuff where you're down close to
85

86
00:10:58.899 --> 00:11:02.800
the database connection. So this is
important stuff to use. But when you
86

87
00:11:02.800 --> 00:11:06.910
are using something like Spring Data JPA,
all this is abstracted by the Spring
87

88
00:11:06.910 --> 00:11:12.550
Framework for you. So you don't get that
net cozy. So you have tool set is going
88

89
00:11:12.550 --> 00:11:15.939
to be managing the connections for you.
You don't have to worry about
89

90
00:11:15.939 --> 00:11:20.050
releasing him like you do here. And
obviously, this is a situation where you
90

91
00:11:20.050 --> 00:11:23.589
could pretty easily shoot yourself in
the foot by forgetting to close
91

92
00:11:23.589 --> 00:11:28.029
connection. I've seen this in
production systems where you do
92

93
00:11:28.029 --> 00:11:32.170
introduce code and you forget to release
a connection and it definitely does
93

94
00:11:32.170 --> 00:11:38.470
caused you some headaches. So I am going
to go ahead and commit this into GitHub
94

95
00:11:38.470 --> 00:11:44.110
so my student can get the example and
move along. So I think that's a pretty
95

96
00:11:44.110 --> 00:11:47.889
interesting problem. I didn't
know I was getting into when we opened
96

97
00:11:47.889 --> 00:11:51.670
up this project, but everything looks
pretty good. Except for not having these
97

98
00:11:51.670 --> 00:11:56.139
close statements. I need to review my
my tutorial make sure that I do infact
98

99
00:11:56.139 --> 00:12:00.120
put the closed statements in there.
