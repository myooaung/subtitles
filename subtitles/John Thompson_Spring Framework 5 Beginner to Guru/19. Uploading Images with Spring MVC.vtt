WEBVTT
0
1
00:00:04.220 --> 00:00:08.670
Alright in this video we are going to take
a look at uploading an image. Now we're
1

2
00:00:08.670 --> 00:00:12.300
just going to look at the controller, all
the front-end code and the controller
2

3
00:00:12.300 --> 00:00:17.820
stuff. The actual persistence is not done
in this video. So I'm just going to look
3

4
00:00:17.820 --> 00:00:22.920
at setting up the UI components on the
web front-end as far as Thymeleaf goes
4

5
00:00:22.920 --> 00:00:29.490
and then the controller methods to both
display the form to upload the image and
5

6
00:00:29.490 --> 00:00:35.520
also to process a Multipart upload. So
it's a few nuances that we have to work
6

7
00:00:35.520 --> 00:00:41.820
through. So the first thing we're going
to do is modify the show HTML and this
7

8
00:00:41.820 --> 00:00:46.200
is for the recipe show. So let's take a
look at that and I've gone in and I put
8

9
00:00:46.200 --> 00:00:49.860
an image here with the white X on it. So
that's our static display image and
9

10
00:00:49.860 --> 00:00:56.789
right now this is rendering from Spring Boot resources. And by default, toggle
10

11
00:00:56.789 --> 00:01:00.180
over here,
show exactly what it's coming from. I've
11

12
00:01:00.180 --> 00:01:06.330
added in the images to resources static. I need to actually add those in to
12

13
00:01:06.330 --> 00:01:12.720
Git so you will have those images
available here. So I've got images for
13

14
00:01:12.720 --> 00:01:16.740
both recipes here and then I have this
from one that's appended with X and
14

15
00:01:16.740 --> 00:01:21.240
that's this image right here and that's the
one that we're going to replace with. So
15

16
00:01:21.240 --> 00:01:24.840
in a future video, we're going to
modify this to display the image from
16

17
00:01:24.840 --> 00:01:28.259
the database but we're not doing that
just yet. So it's like a static
17

18
00:01:28.259 --> 00:01:32.130
placeholder for us and we'll also see
that the image that we load to the
18

19
00:01:32.130 --> 00:01:35.790
database does not have it. So
what I want to do is implement
19

20
00:01:35.790 --> 00:01:39.840
functionality to put a button here to
change image and that's going to take us
20

21
00:01:39.840 --> 00:01:45.570
to the simple upload form here. So we
will be able to choose a file and upload
21

22
00:01:45.570 --> 00:01:50.280
that image and then click on submit. So
let's step through the stuff that we
22

23
00:01:50.280 --> 00:01:56.100
have to do for Spring MVC on this. So
come back over here to IntelliJ. So and
23

24
00:01:56.100 --> 00:02:02.280
here's the images under static, resources,
static images and we've modified the
24

25
00:02:02.280 --> 00:02:08.160
show HTML document to add the button. Then we have this brand new image form.
25

26
00:02:08.160 --> 00:02:13.200
Nothing too interesting here. It's going
to expect back a recipe property to get
26

27
00:02:13.200 --> 00:02:16.470
the ID
value because we need that to build
27

28
00:02:16.470 --> 00:02:21.450
the URL that we are going to post this to and
pretty simple form action. What
28

29
00:02:21.450 --> 00:02:26.340
is very important here is the encoding
type. So we do this multipart form-data.
29

30
00:02:26.340 --> 00:02:30.600
So that's how we upload an image via
HTML and of course, we're going to do
30

31
00:02:30.600 --> 00:02:36.660
post. And let's take a look at our ImageControllerTest. Again test-driven
31

32
00:02:36.660 --> 00:02:42.090
development and this time here we have
two mocks. We're going to need the Image
32

33
00:02:42.090 --> 00:02:47.130
Service and the RecipeService and those
will get injected into the controller. We
33

34
00:02:47.130 --> 00:02:53.459
do that manually because we are running
true unit tests and we have this form
34

35
00:02:53.459 --> 00:03:04.410
get. So getFormGet, not a very good
name. I just want to rename it to get. Try to
35

36
00:03:04.410 --> 00:03:10.320
have some things that make sense here. And on this one we've seen this a few
36

37
00:03:10.320 --> 00:03:14.760
times already in the course, we're going
to create a RecipeCommand. Set the ID to
37

38
00:03:14.760 --> 00:03:21.390
a long of 1 and on line 45, they were
telling Mockito. So when we do a find by
38

39
00:03:21.390 --> 00:03:26.880
ID, anyLong value return back that
command. And down here on line 48, this is
39

40
00:03:26.880 --> 00:03:30.600
where we're going to test out Spring MVC. We're going to perform a get action
40

41
00:03:30.600 --> 00:03:35.700
against recipe number one for the ID
value image for the action that we want.
41

42
00:03:35.700 --> 00:03:39.989
And we're performing a get and we're
going to say status okay and we're going
42

43
00:03:39.989 --> 00:03:45.380
to verify that on line 50 there that the
model attribute does exist. And then on
43

44
00:03:45.380 --> 00:03:50.550
line 57 this is where we're going to
test, actually uploading the image file.
44

45
00:03:50.550 --> 00:03:54.540
So the something that we have not seen
before on line 58. We create a Mock
45

46
00:03:54.540 --> 00:03:58.920
MultipartFile. So this is going to mock
out the file that's going to get posted
46

47
00:03:58.920 --> 00:04:03.630
by the web browser and we are giving it
a name of image files. That's important.
47

48
00:04:03.630 --> 00:04:08.670
We're going to be looking for something
called image file and we will do a post
48

49
00:04:08.670 --> 00:04:13.680
on that. So we actually have a multipart
option that we're going to be utilizing.
49

50
00:04:13.680 --> 00:04:20.100
That's a static method within the
MockMvc testing framework. So that's
50

51
00:04:20.100 --> 00:04:24.150
going to mimic a multipart upload and
we're going to expect back a redirection.
51

52
00:04:24.150 --> 00:04:29.430
So the way I want this to work is
we upload the image file, we'll store it
52

53
00:04:29.430 --> 00:04:34.770
and then we'll redirect back to the
the recipe show page. So that's why we
53

54
00:04:34.770 --> 00:04:41.759
are expecting the header location tab
recipe/1/show. And then finally on line
54

55
00:04:41.759 --> 00:04:47.189
66 our imageService, now right now is
returning a void, so it doesn't return
55

56
00:04:47.189 --> 00:04:51.090
anything. So there's no mock action to
establish for it but we do want to make
56

57
00:04:51.090 --> 00:04:57.360
sure that got called one time. So let's
go ahead and run our test here and we'll
57

58
00:04:57.360 --> 00:05:05.009
verify that these two tests do in fact
run properly and they do. And now let's
58

59
00:05:05.009 --> 00:05:11.430
take a look at the ImageController and
we have the two methods there. I am using
59

60
00:05:11.430 --> 00:05:16.289
GetMapping recipe ID and you can see
that the URLs are the same but once
60

61
00:05:16.289 --> 00:05:20.430
that GetMapping, which is going to
return back the form for the recipe ID
61

62
00:05:20.430 --> 00:05:25.289
that's passed in, that's where we're
invoking the RecipeService. And again
62

63
00:05:25.289 --> 00:05:29.819
it's going to do recipe image form and
that's going to equate to right here.
63

64
00:05:29.819 --> 00:05:35.819
Recipe image. I'll call it imageuploadform. So that's how those two tied
64

65
00:05:35.819 --> 00:05:42.000
together. So it's a new Thymeleaf template
that we're adding. And then on line 34
65

66
00:05:42.000 --> 00:05:46.349
this is going to handle the upload of
the image and this is pretty simple also.
66

67
00:05:46.349 --> 00:05:52.139
So it takes strips in the ID from
the path variable and then we get
67

68
00:05:52.139 --> 00:05:56.039
the request parameter image file. So
that's going to be passed up by the form
68

69
00:05:56.039 --> 00:06:02.099
on the post. Then we call our imageService saveImageFile. Let's double
69

70
00:06:02.099 --> 00:06:09.089
check that. I'm just doing it on a Mac. You can do command click, I think on a PC
70

71
00:06:09.089 --> 00:06:14.599
it's ctrl+click and then over here, I can
click on the little implementation there.
71

72
00:06:14.599 --> 00:06:19.259
Nothing here to see really. It's just a
stub we're going to implement the actual
72

73
00:06:19.259 --> 00:06:23.909
persistence of the database in the
next video in the course. But for now
73

74
00:06:23.909 --> 00:06:27.779
we're just going to focus on the front
and make sure that's flowing. So let's go
74

75
00:06:27.779 --> 00:06:32.360
in and I'm going to double check all my
test run. Make sure that those run. I
75

76
00:06:32.360 --> 00:06:38.820
think we're up to 62 unit tests here
which is pretty decent
76

77
00:06:38.820 --> 00:06:44.580
and you can see how quickly these tests
actually run as unit test. And now
77

78
00:06:44.580 --> 00:06:53.850
let's go ahead and start our Spring Boot
application and we'll test this out. So
78

79
00:06:53.850 --> 00:06:59.610
we are up and running. Let's come over
here in localhost:8080,
79

80
00:06:59.610 --> 00:07:10.700
refresh that. And let's view it and we
can do a change image and choose a file.
80

81
00:07:10.700 --> 00:07:17.220
You can see reactive is coming with my
graphics and then say submit and you can
81

82
00:07:17.220 --> 00:07:22.050
see down here in the log, the very last
line as I received a file. So that is
82

83
00:07:22.050 --> 00:07:26.880
our log statement so we know that the
controller action did accept the image
83

84
00:07:26.880 --> 00:07:30.570
and post it up. At least we've got
something through there. In theory it
84

85
00:07:30.570 --> 00:07:34.890
should be the image file. So in the next
video we are going to extend out this
85

86
00:07:34.890 --> 00:07:41.790
and actually change it into a byte array
and store it within the database. So we
86

87
00:07:41.790 --> 00:07:47.430
can then in the following video get the
image out of the database and as a side
87

88
00:07:47.430 --> 00:07:52.620
note, some of you might be
thinking why not just store the image to
88

89
00:07:52.620 --> 00:07:56.550
the file system. And this is a habit that
you really don't want to get into
89

90
00:07:56.550 --> 00:08:00.120
especially in Java development because
you don't want to be writing images into the
90

91
00:08:00.120 --> 00:08:04.890
file system. I know the PHP guys love to
do this but we want to keep our
91

92
00:08:04.890 --> 00:08:10.590
application portable. So we can spool it
out to different application servers, let
92

93
00:08:10.590 --> 00:08:15.330
it run in a cluster and if you start
storing your file, your image files to
93

94
00:08:15.330 --> 00:08:20.070
the local file system, you start to
play the game of which file system did
94

95
00:08:20.070 --> 00:08:24.360
you persist that image to. So in doing
something like that you want to store it
95

96
00:08:24.360 --> 00:08:28.320
either in the database and I'm not a
huge fan of that, storing images in the
96

97
00:08:28.320 --> 00:08:33.060
database but it does get the job done. It
gives you a central location. Another
97

98
00:08:33.060 --> 00:08:37.919
good alternative would be to store those
files up in Amazon s3 and then set up a
98

99
00:08:37.919 --> 00:08:42.810
services, serve those from s3. So a couple
couple different alternatives there that
99

100
00:08:42.810 --> 00:08:46.860
you can do but for this purpose here,
we're going to be storing the images in
100

101
00:08:46.860 --> 00:08:50.460
the database and we will you get into
persisting those images into the
101

102
00:08:50.460 --> 00:08:53.630
database in the next video.
