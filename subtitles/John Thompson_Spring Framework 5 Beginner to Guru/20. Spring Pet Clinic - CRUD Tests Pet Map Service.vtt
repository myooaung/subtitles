WEBVTT
0
1
00:00:03.950 --> 00:00:08.670
In this video we have another
contribution to take a look at and here
1

2
00:00:08.670 --> 00:00:13.080
their contributor opened up an issue
inside of GitHub to write CRUD tests for
2

3
00:00:13.080 --> 00:00:19.350
the pet map service issue number 92 and
also provided a pull request. Let's take
3

4
00:00:19.350 --> 00:00:25.410
a look at the pull request here. Go
and look at this closer. Earlier a
4

5
00:00:25.410 --> 00:00:30.480
couple videos ago, you saw me setting up
the CircleCI checks and this is an
5

6
00:00:30.480 --> 00:00:34.739
example where this is working. So if I do
show all tests, we can see that this
6

7
00:00:34.739 --> 00:00:38.640
actually ran on CircleCI so this is
a check.
7

8
00:00:38.640 --> 00:00:43.200
We know that the build is now passing. We
can see disintegrated right and to GitHub.
8

9
00:00:43.200 --> 00:00:46.800
So we're real nice feature that we
have set up with the CircleCI
9

10
00:00:46.800 --> 00:00:52.590
integration. You can see there's
several commits against this. So let's
10

11
00:00:52.590 --> 00:00:56.520
come in here. I'm going to take a look at
the files changed inside of this pull
11

12
00:00:56.520 --> 00:01:00.390
request.
The first one is config.yml. Just
12

13
00:01:00.390 --> 00:01:05.519
a simple white whitespace change and
then the PetMapServiceTest. This is a
13

14
00:01:05.519 --> 00:01:10.860
brand new file, new test class. So this
doesn't exist before. Couple of
14

15
00:01:10.860 --> 00:01:15.900
things that the author did very nice
here. So we are using a final Long for
15

16
00:01:15.900 --> 00:01:22.200
the petId. That's a good habit of
declaring that. You can see that we
16

17
00:01:22.200 --> 00:01:27.600
created a PetMapService and then we
build a Pet with that final petId and
17

18
00:01:27.600 --> 00:01:32.070
then we go through a number of different
tests. These all look fairly good. Nice
18

19
00:01:32.070 --> 00:01:37.710
work on the test. So looks like we have
full test coverage and testing out a
19

20
00:01:37.710 --> 00:01:44.700
number of different test scenarios like
deleteByCorrectId,  wrongId so we can
20

21
00:01:44.700 --> 00:01:50.159
see that we do have a number of
different assertions. So nice job on the
21

22
00:01:50.159 --> 00:01:57.360
test. I am going to go ahead and
merge this in. You can see here he's
22

23
00:01:57.360 --> 00:02:03.960
referencing closes number 92. so go ahead
and merge that in.
23

24
00:02:03.960 --> 00:02:10.289
This will probably kick off a build
in my CircleCI. You can see that I
24

25
00:02:10.289 --> 00:02:15.959
was running because I have kicked off or
completed that merge and then we can
25

26
00:02:15.959 --> 00:02:22.140
also see that that issue went to close.
So we are closing out issue. So guys are
26

27
00:02:22.140 --> 00:02:26.700
doing a great job of creating issues
inside of GitHub and then writing pull
27

28
00:02:26.700 --> 00:02:32.580
requests against them. So nice work there. Let's come down here and jump over to
28

29
00:02:32.580 --> 00:02:37.650
IntelliJ and it will pull down that
latest change. Now remember if you're not
29

30
00:02:37.650 --> 00:02:43.980
familiar with GitHub, what I have to do
is I did that on GitHub. So that has been
30

31
00:02:43.980 --> 00:02:48.420
completed on GitHub but it has not been
completed locally and remember we saw
31

32
00:02:48.420 --> 00:02:55.019
the white space changed to config config.yml and then the new tests
32

33
00:02:55.019 --> 00:03:00.660
as well. So now I have this test class
locally and we can see the contributors
33

34
00:03:00.660 --> 00:03:05.850
tag right up here. That's awesome. And the
variety of tests. I'll run this
34

35
00:03:05.850 --> 00:03:10.560
locally just make sure that I run run
okay locally. And while that's running,
35

36
00:03:10.560 --> 00:03:14.600
I'm going to jump back over here to
Chrome.
36

37
00:03:15.050 --> 00:03:19.010
and we can see that tests are still
running. That's interesting. Those have
37

38
00:03:19.010 --> 00:03:24.769
been done by now.
But we can see that the test did execute
38

39
00:03:24.769 --> 00:03:30.670
properly. Double-check this. Let's take a
look at that
39

40
00:03:33.960 --> 00:03:40.110
and it just completed. So we are back to
green. So everything is green. That it's
40

41
00:03:40.110 --> 00:03:45.030
all looking good. So again thank you for
the contribution. We are improving our
41

42
00:03:45.030 --> 00:03:49.200
test coverage as we go along inside of
this project and if anybody sees a
42

43
00:03:49.200 --> 00:03:56.400
problem go ahead and create an issue and
issue a pull request and you just never
43

44
00:03:56.400 --> 00:04:00.980
know I might include it in an upcoming
video. Thanks!
