WEBVTT
1

00:00:02.649  -->  00:00:06.009
Hey folks! John Thompson Spring Framework
Guru here. So today, I'm going to

2

00:00:06.009  -->  00:00:10.630
interview James Labocki from Red Hat. So
James is a friend of mine. He works with

3

00:00:10.630  -->  00:00:14.559
Red Hat and he's actually one of the
product engineers over the OpenShift

4

00:00:14.559  -->  00:00:19.360
product. So OpenShift is a container
orchestration platform. So it sits on top

5

00:00:19.360  -->  00:00:24.279
of Kubernetes, which manages docker
containers. I'm pretty excited today

6

00:00:24.279  -->  00:00:28.529
to have the time with James to talk
about docker. Even though in the course,

7

00:00:28.529  -->  00:00:33.000
we're looking at just using docker
containers. It's kind of introductory to

8

00:00:33.000  -->  00:00:37.660
using docker containers. This is going to
give you some insight how docker

9

00:00:37.660  -->  00:00:41.620
containers are used in the enterprise,
why enterprises are going with docker

10

00:00:41.620  -->  00:00:45.789
containers, what makes it so powerful. And
James has some great insights. Not only

11

00:00:45.789  -->  00:00:51.190
into how Docker is being utilized but how
tools around docker and how companies

12

00:00:51.190  -->  00:00:55.600
and enterprises are using docker
everyday for their mission critical

13

00:00:55.600  -->  00:01:00.010
application. So without further ado, I'm
going to introduce James Labocki.

14

00:01:00.010  -->  00:01:03.760
We're gonna switch over to the interview
I just did with them and a lot of great

15

00:01:03.760  -->  00:01:06.809
content coming up for you.

16

00:01:08.409  -->  00:01:12.580
Alright folks!
Thompson here Spring Framework Guru. I

17

00:01:12.580  -->  00:01:16.479
have James Labocki from Red Hat with me.
So James, can you tell me about your role

18

00:01:16.479  -->  00:01:21.850
at Red Hat? What you do there? Yeah. So I'm
the senior manager of product management

19

00:01:21.850  -->  00:01:25.540
in the integrated solutions business
unit so I work on basically the

20

00:01:25.540  -->  00:01:29.070
combination of our technologies from
open shift our container platform to

21

00:01:29.070  -->  00:01:32.680
OpenStack team structure service and
cloud management technologies like cloud

22

00:01:32.680  -->  00:01:39.100
forms and ansible. Okay, it's a quite the
scope there. So the course I'm teaching

23

00:01:39.100  -->  00:01:45.369
is on Docker and it's really for
beginner level type people. And just

24

00:01:45.369  -->  00:01:49.660
getting them up to speed on Docker. So
what are you seeing in the marketplace

25

00:01:49.660  -->  00:01:55.090
as far as adoption of docker containers?
Yeah, so certainly there's a lot of

26

00:01:55.090  -->  00:01:58.960
hype. If you go look out
there about containers, you know

27

00:01:58.960  -->  00:02:03.369
everybody wants to start containerizing
their applications. So we're seeing

28

00:02:03.369  -->  00:02:07.539
pretty good option now. So we have our
commercial offering for containers at

29

00:02:07.539  -->  00:02:10.060
Red Hat, that's called Open Shift. So
that's basically what people would buy

30

00:02:10.060  -->  00:02:14.080
from us, when they're looking to run
their containers. And we're seeing very

31

00:02:14.080  -->  00:02:17.980
good traction in a number of industries.
Whether its financial services,

32

00:02:17.980  -->  00:02:21.910
healthcare and a bunch of other
verticals. We're seeing quite a bit of

33

00:02:21.910  -->  00:02:26.890
take. I mean I'm starting smaller
to how you would imagine from you know

34

00:02:26.890  -->  00:02:30.280
the unix/linux move or you know any kind
of technology adoption curve so you're

35

00:02:30.280  -->  00:02:32.709
seeing it move into development where
people are kicking the tires

36

00:02:32.709  -->  00:02:36.549
understanding what they want to do and
now it's eventually making its way into

37

00:02:36.549  -->  00:02:40.510
production right now many of our
customers. Okay so one of the problems

38

00:02:40.510  -->  00:02:45.100
I think Java folks are gonna have is
they're looking at this docker container

39

00:02:45.100  -->  00:02:49.299
kind of being like a VM and why do I
wanna run a JVM inside of a container

40

00:02:49.299  -->  00:02:53.500
and deploy stuff that way. So why are
companies going that direction? Why

41

00:02:53.500  -->  00:02:58.120
containerize a JVM and run that out
there. Yes, I think you know when you look

42

00:02:58.120  -->  00:03:01.660
at traditional virtualization, what it
did was, it abstracted the operating

43

00:03:01.660  -->  00:03:05.260
system away from the hardware. So
traditional virtualization really helps

44

00:03:05.260  -->  00:03:09.549
operations teams because they could
separate the lifecycle of their hardware

45

00:03:09.549  -->  00:03:13.480
from their operating systems. So I could
take maybe if let's say I'm running

46

00:03:13.480  -->  00:03:16.480
Red Hat Enterprise Linux, I could then take
one version of Red Hat Enterprise Linux

47

00:03:16.480  -->  00:03:21.340
6 and I could run it on whether it's
VMware or RMKDM based virtualization or

48

00:03:21.340  -->  00:03:25.020
hyper-v. I could
separate the OS from the hardware. So if

49

00:03:25.020  -->  00:03:28.140
I could refresh my hardware faster and I
don't necessarily need to refresh my

50

00:03:28.140  -->  00:03:31.200
operating system. So my applications
don't need to change and it creates a

51

00:03:31.200  -->  00:03:34.800
nice separation. What containers are
providing is similar functionality but

52

00:03:34.800  -->  00:03:38.520
at the application layer. So now, my
applications can be kind of almost

53

00:03:38.520  -->  00:03:42.959
decoupled and have their own life cycles
away from my operating system. This

54

00:03:42.959  -->  00:03:47.160
doesn't mean that the certification of a
running container to the operating

55

00:03:47.160  -->  00:03:49.860
system is important still because
they're still you know some ABI that

56

00:03:49.860  -->  00:03:53.459
needs to be maintained between things
running in the container to the

57

00:03:53.459  -->  00:03:56.519
operating system running on below. And
you know, you need that tested and

58

00:03:56.519  -->  00:04:01.140
certified. But it does certainly mean
that you'll be able to it's basically

59

00:04:01.140  -->  00:04:04.230
allowing the developer in the operations
teams to have a common format, that they

60

00:04:04.230  -->  00:04:08.010
can pass between each other and not have
to worry about the versions of the

61

00:04:08.010  -->  00:04:13.019
underlying operating system potentially.
Okay, any security leaks in containers

62

00:04:13.019  -->  00:04:17.250
that we need to be worried about? Yeah so
definitely, I think you know there's a

63

00:04:17.250  -->  00:04:21.540
there are a lot of you know
security ramifications of leveraging

64

00:04:21.540  -->  00:04:25.410
containers. One of the things that we're
doing, so if you look at the history of

65

00:04:25.410  -->  00:04:28.890
containers, they're nothing new, right.
They've been around since you know the

66

00:04:28.890  -->  00:04:30.930
late seventies. I think with tru in
Unix.

67

00:04:30.930  -->  00:04:34.890
So what docker really brought to the
table was it provided a common package

68

00:04:34.890  -->  00:04:39.840
format. So you can actually have an
archive that everyone can

69

00:04:39.840  -->  00:04:42.930
understand and then they also put API's
around it to basically make it easily to

70

00:04:42.930  -->  00:04:47.669
start/stop these archives basically of
your application. Plus, it's basically

71

00:04:47.669  -->  00:04:51.630
used as like a Union file system, right,
so it kind of layers a bunch of file

72

00:04:51.630  -->  00:04:54.539
system changes when you do a build. And
then it pact as your binaries and

73

00:04:54.539  -->  00:04:58.380
libraries in there. So yeah, absolutely
they're one of the things you can

74

00:04:58.380  -->  00:05:04.139
imagine is if you could have dozens of
VMs running on a physical host, you

75

00:05:04.139  -->  00:05:09.030
could have hundreds of containers
running on you know a VM now. So that

76

00:05:09.030  -->  00:05:14.160
what that does is basically you have a
propagation of potentially libraries and

77

00:05:14.160  -->  00:05:18.210
binaries and securities across those
environments. So that's where our tools

78

00:05:18.210  -->  00:05:23.280
that we have, where you can actually scan
containers to container scanning both

79

00:05:23.280  -->  00:05:26.400
during the build process, as well as all
the way out to production when they're

80

00:05:26.400  -->  00:05:28.680
running and make sure that you're not
you don't have you know something with

81

00:05:28.680  -->  00:05:32.130
heartbleed or you know another
vulnerability in it running in production.

82

00:05:32.130  -->  00:05:36.940
Okay, so how does it work? I mean, it
seems kind of bizarre that you can run a

83

00:05:36.940  -->  00:05:41.680
few dozen VMs on a Chuck Hardware versus
hundreds of containers. I mean, why

84

00:05:41.680  -->  00:05:46.199
is that? What is it ... Yeah, so
basically, if you look at it,

85

00:05:46.199  -->  00:05:51.430
typically, the way you split up a VM is
that the lowest amount of CPU you could

86

00:05:51.430  -->  00:05:55.960
give a virtual machine as a core, 
what's great is with Linux names with

87

00:05:55.960  -->  00:05:59.319
namespaces in the Linux kernel and with
technologies like cgroups

88

00:05:59.319  -->  00:06:04.000
which is control groups, it provides fine
great resource control of your hardware

89

00:06:04.000  -->  00:06:07.810
even in a more granular fashion. So I
could divvy up my might and do time

90

00:06:07.810  -->  00:06:12.310
sharing. It's split my CPU into a
thousand shares, and then give you know

91

00:06:12.310  -->  00:06:16.389
we know take one course put it up into a
thousand shares in hand a hundred shares

92

00:06:16.389  -->  00:06:20.380
to one container and fifty to another
and thirty to another and that's all.

93

00:06:20.380  -->  00:06:24.009
Linux namespaces and C groups taking
care of that quality of service at the

94

00:06:24.009  -->  00:06:27.669
kernel level. So that's kernel will
actually do this and split this up into

95

00:06:27.669  -->  00:06:30.849
there. Sounds like it's gonna be
challenging to troubleshoot performance

96

00:06:30.849  -->  00:06:34.060
stuff on this. I've never remember the
days and he just made vmstat and you're

97

00:06:34.060  -->  00:06:36.970
good to go.
Yeah, that is absolutely the other thing

98

00:06:36.970  -->  00:06:41.610
that we're working on pretty heavily is
instrumenting the kernel with the proper

99

00:06:41.610  -->  00:06:49.240
instrumentation and then ultimately it 
will help you do that. Okay, so with the shared space and the shared

100

00:06:49.240  -->  00:06:54.310
memory, how does that work with the JVM?
If I have a JVM running in two different

101

00:06:54.310  -->  00:06:58.060
containers, so I have two JVMs running, 
are they're sharing memory at all? For

102

00:06:58.060  -->  00:07:04.090
those two execution of that? So yeah
so on. There's multiple levels of memory

103

00:07:04.090  -->  00:07:08.050
sharing that could be happening. But
primarily at this point, they may be

104

00:07:08.050  -->  00:07:12.180
sharing memory at the VM layer. So for
example, if I have multiple copies of

105

00:07:12.180  -->  00:07:15.520
you know there's something called a for
example in a VM there's something called

106

00:07:15.520  -->  00:07:19.300
kernel same page merging, it would
basically take multiple copies of memory

107

00:07:19.300  -->  00:07:22.750
that are the same and you duplicate them
in a memory to save a memory footprint

108

00:07:22.750  -->  00:07:27.130
and that would happen based on whatever
you however you set up the virtual

109

00:07:27.130  -->  00:07:31.389
machine and the hypervisor configuration
in your virtualization. The container

110

00:07:31.389  -->  00:07:37.409
layer, I don't believe we're doing that
yet or purging memory. Okay, all right cool because

111

00:07:37.409  -->  00:07:42.039
spring applications are as many things
but a memory efficient is not one of

112

00:07:42.039  -->  00:07:44.850
them.
Yeah absolutely. Let's chew up some

113

00:07:44.850  -->  00:07:48.510
memory when you're running it in VMs.
We'll get your class

114

00:07:48.510  -->  00:07:55.260
to learn some notes. Maybe not reactive in
spring 5. Alright alright. That's right.

115

00:07:55.260  -->  00:08:01.440
I have to note. So in the course,
I'm going to be teaching them to

116

00:08:01.440  -->  00:08:05.010
fabricate plug-in and in my opinion
fabricate seems to be the most capable

117

00:08:05.010  -->  00:08:10.170
plug-in out there. There's a number of
flavors out there, but as far as what I

118

00:08:10.170  -->  00:08:16.500
want to be doing in a Java life cycle, as
far as like building projects and being

119

00:08:16.500  -->  00:08:20.280
able to use docker containers. Not only
build them and publish them. But I also

120

00:08:20.280  -->  00:08:25.680
want to use them in an integration test.
Are there any other maven or Gradle

121

00:08:25.680  -->  00:08:30.510
plugins, I should be looking at? Or is
forever great, like the one right now?

122

00:08:30.510  -->  00:08:33.840
Yeah so the fabricate certainly, so for
those of you that don't know, so

123

00:08:33.840  -->  00:08:37.590
fabricate is basically an upstream
community that is actually run and

124

00:08:37.590  -->  00:08:41.430
sponsored by Red Hat. And there's a
couple of engineers that were from the

125

00:08:41.430  -->  00:08:45.720
fuze team, that are actually working
there now. And so yeah, that's basically a

126

00:08:45.720  -->  00:08:49.110
microservices. Their goal is to build
kind of an open source micro-services platform.

127

00:08:49.110  -->  00:08:53.339
A lot of that work ends up going into
open shift. So you're actually going to

128

00:08:53.339  -->  00:08:56.190
see a lot of those
technologies, basically running directly

129

00:08:56.190  -->  00:08:59.400
on open shift through the commercial
platform. That's primarily where our

130

00:08:59.400  -->  00:09:02.400
investments are in there. I'm not aware
of any others in the community side for

131

00:09:02.400  -->  00:09:06.210
Java developers. Not safe if there aren't
true. You know Google's of the world and

132

00:09:06.210  -->  00:09:09.450
others might be developing things as
well. But the one I'm aware of is

133

00:09:09.450  -->  00:09:13.380
definitely our great site. Okay yeah. That
definitely seem to be the most robust

134

00:09:13.380  -->  00:09:17.400
out there. There are several options. I
didn't even look at the Gradle ones, but

135

00:09:17.400  -->  00:09:24.420
I mean maven is the deal workhorse for
Java builds in fabricate and seem to

136

00:09:24.420  -->  00:09:31.110
have a clear lead in the space. So you
mentioned open shift. And so help us make

137

00:09:31.110  -->  00:09:36.600
the leap here, from running a little web
server and a docker container out Linux

138

00:09:36.600  -->  00:09:43.310
OS to what is this thing called open shift.
Yeah so essentially, open shift is our

139

00:09:43.310  -->  00:09:47.220
container platform. So when you want to
start running containers at scale,

140

00:09:47.220  -->  00:09:51.150
it's pretty simple to run. You know, build
a docker file on your machine locally

141

00:09:51.150  -->  00:09:55.550
and run it. But when you actually want to
start scaling that to you know

142

00:09:55.550  -->  00:10:00.110
multicontainer applications, and then
scaling them globally, that's where

143

00:10:00.110  -->  00:10:06.560
open shift comes in. And so which of just based
on, it provides both price Linux the

144

00:10:06.560  -->  00:10:10.190
docker runtime and also provides
kubernetes. So kubernetes is a project

145

00:10:10.190  -->  00:10:15.470
that was initially started by Google. So
the folks behind you know, if you don't

146

00:10:15.470  -->  00:10:18.470
know, every time you log into Gmail for
example, that's actually running in a

147

00:10:18.470  -->  00:10:21.920
container. So Google stops and starts
billions of containers a day.They're

148

00:10:21.920  -->  00:10:26.330
probably the largest scale container
deployment that we know of. And so, when

149

00:10:26.330  -->  00:10:31.340
they started a container orchestration
project, we definitely doll in and

150

00:10:31.340  -->  00:10:36.050
partnered with them on that. And so
basically, what open shift provides you

151

00:10:36.050  -->  00:10:39.020
is the kubernetes platform, which allows
you orchestrate container deployments. So

152

00:10:39.020  -->  00:10:42.650
if you want to deploy, it basically has a
concept of something called a pod. And

153

00:10:42.650  -->  00:10:47.530
then that services and routes. So you
can actually expose around externally

154

00:10:47.530  -->  00:10:51.830
about you know both a container
application to the world. You can do

155

00:10:51.830  -->  00:10:54.230
things like you know upgrade your
containers and they have a life cycle

156

00:10:54.230  -->  00:10:57.380
around them so that when they move into
production you can do rolling upgrades

157

00:10:57.380  -->  00:11:02.270
and all those pieces as well as a bunch
of capabilities around taking your

158

00:11:02.270  -->  00:11:05.360
source source code and actually building
an image automatically through there.

159

00:11:05.360  -->  00:11:09.170
Whether that's plugging into an existing
pipeline or leveraging our own source

160

00:11:09.170  -->  00:11:12.800
damage capabilities in their build edges.
Tell me a little bit more about the

161

00:11:12.800  -->  00:11:17.270
source image. I was going to work with
the Java. Yeah so there's a

162

00:11:17.270  -->  00:11:20.690
number different patterns. So one of the
containers that so when you deploy

163

00:11:20.690  -->  00:11:23.240
openshift you have a number of
applications. You could launch out of the

164

00:11:23.240  -->  00:11:28.310
bag, right out of the box. And one of them
is a Jenkins image. You can actually

165

00:11:28.310  -->  00:11:32.810
deploy Jenkins inside there and leverage
that. There's another basically we

166

00:11:32.810  -->  00:11:36.110
provide a number of pre-built images in
a registry so that our source image

167

00:11:36.110  -->  00:11:40.880
ready. So you can literally put your
github repo in, when you're launching

168

00:11:40.880  -->  00:11:44.540
your new application provider via that
repo. And we will take the source code

169

00:11:44.540  -->  00:11:48.740
from that github repo. We will run a
basically a docker build and build that

170

00:11:48.740  -->  00:11:52.460
image and put it in the registry and
then also launch it for you. And you can

171

00:11:52.460  -->  00:11:55.610
go directly to your running application
and every commit you make to your

172

00:11:55.610  -->  00:11:59.480
registry, you can actually build a hook
to actually go ahead and kick off the

173

00:11:59.480  -->  00:12:04.490
new build every time. So sweet. So I can
just check in and then they'll go

174

00:12:04.490  -->  00:12:08.950
through and automatically deploy new
docker containers to my target environment?

175

00:12:08.950  -->  00:12:12.860
Exactly and we actually have a container
development kit. So there's a bunch of

176

00:12:12.860  -->  00:12:15.590
flavors of open shift. One of them is
OpenShift online. So you can learn I

177

00:12:15.590  -->  00:12:19.520
could like open shift out redhat.com.
That's a hosted service that we run and

178

00:12:19.520  -->  00:12:22.400
you can go launch a couple of containers
for free on there. A couple of apps for

179

00:12:22.400  -->  00:12:25.580
free. I forget what the limit is. And
get started. If you want to actually run

180

00:12:25.580  -->  00:12:31.100
it on your workstation, you can download
our container development kit, CDK. Just

181

00:12:31.100  -->  00:12:36.170
look up at that container, CDK and
it'll give you a prebuilt VM with

182

00:12:36.170  -->  00:12:42.110
openshift on it and ready to go out of
box. Okay cool cool. I am running out of

183

00:12:42.110  -->  00:12:46.370
questions. So is there any other things
that you can think about that be

184

00:12:46.370  -->  00:12:52.970
interested a job developer in the docker
world or even OpenShift? Yeah. Just one

185

00:12:52.970  -->  00:12:55.730
one last thing to note is one of the
things that we're seeing a big uptake on

186

00:12:55.730  -->  00:12:59.870
is the ansible from the automation
standpoint. So a lot of people, a lot of

187

00:12:59.870  -->  00:13:04.250
our end users are not wanting to buy
into a single way of doing things or

188

00:13:04.250  -->  00:13:07.790
they want an automation language that's
familiar between both development and

189

00:13:07.790  -->  00:13:11.150
operations. We're seeing a big uptake
there. And the ansible container as a

190

00:13:11.150  -->  00:13:13.640
product that we have, that allows you to
if you're familiar with ansible

191

00:13:13.640  -->  00:13:17.150
playbooks, I'm not sure reading the your
audience would be, but if they are

192

00:13:17.150  -->  00:13:20.150
familiar with it, they could literally
take their same skills of

193

00:13:20.150  -->  00:13:23.510
authoring ansible playbooks and those
can generate docker images for them and

194

00:13:23.510  -->  00:13:28.670
that isn't a clean path to running in
kubernetes as well. Okay, so the ansible

195

00:13:28.670  -->  00:13:31.730
container, is that the same thing as a
docker container or is that that different?

196

00:13:31.730  -->  00:13:35.840
The ansible container is basically just a
way of taking ansible playbooks and

197

00:13:35.840  -->  00:13:39.440
creating docker containers from those
ansible playbooks in a structured

198

00:13:39.440  -->  00:13:43.250
fashion. Okay okay so it's not a
competing image format or anything like

199

00:13:43.250  -->  00:13:49.310
that. All right cool. Yeah, all right James,
I'd like to thank you for your time

200

00:13:49.310  -->  00:13:53.390
today. Definitely appreciate you take the
time to talk about docker and all the

201

00:13:53.390  -->  00:13:58.160
offerings of Red Hat around it. So a lot
of exciting stuff going on.  Yeah cool!

202

00:13:58.160  -->  00:14:01.550
Thanks for the time and uh best of luck
to your class. All right thanks James!

203

00:14:01.550  -->  00:14:05.690
Cheers! Okay, that was an awesome little
interview that we did with James there.

204

00:14:05.690  -->  00:14:08.840
Definitely a wealth of
knowledge. It gave us a lot of insight. I

205

00:14:08.840  -->  00:14:12.440
found some of the stuff very interesting.
Especially like with fabricate and how

206

00:14:12.440  -->  00:14:16.970
Red Hat is contributed fabricate, in the
fabricate plug in. So it's really

207

00:14:16.970  -->  00:14:21.830
becoming critical to how we utilize our
build processes with docker. Now if

208

00:14:21.830  -->  00:14:24.260
you're interested in
learning more about docker as a Java

209

00:14:24.260  -->  00:14:27.740
developer and why you want to be able to
use this technology, I am producing a

210

00:14:27.740  -->  00:14:31.459
course on it. I did this interview with
James for the course. And if you want to

211

00:14:31.459  -->  00:14:36.589
learn more about the course, go over to
my website springframework.guru and you

212

00:14:36.589  -->  00:14:39.830
can learn more about the course there.
And in the course that we're doing, a lot

213

00:14:39.830  -->  00:14:44.360
of fun stuff. We not only start through
the basis of a docker to the spool of

214

00:14:44.360  -->  00:14:48.770
containers and how to build your own
images and containers and docker. But we

215

00:14:48.770  -->  00:14:53.690
show you how as a Java developer you can
actually start utilizing this technology.

216

00:14:53.690  -->  00:14:58.190
So we're gonna do some fun stuff in the
course. Like bring up a web service like

217

00:14:58.190  -->  00:15:02.600
a web application and have a report to a
micro service over RabbitMQ and

218

00:15:02.600  -->  00:15:07.490
ultimately write a transaction down to a
MySQL database. Now I'm going to show you

219

00:15:07.490  -->  00:15:12.350
how to use maven and docker containers
to bring up containers for all that

220

00:15:12.350  -->  00:15:16.520
infrastructure and run integration tests
constant. So imagine me I'll do that from

221

00:15:16.520  -->  00:15:23.810
an Jenkins build server to bring up a
rabbitmq container, a MySQL container, a

222

00:15:23.810  -->  00:15:27.380
micro service, that's completely
independent of the project that you're

223

00:15:27.380  -->  00:15:30.860
working on but you want to run a
full-blown integration test. So these are

224

00:15:30.860  -->  00:15:34.910
some of the fun exciting things that you
can do with docker. Just as a developer

225

00:15:34.910  -->  00:15:40.610
not as a DevOps guy or as an Operations
guy. So for us as developers docker does

226

00:15:40.610  -->  00:15:44.570
open up a lot of great opportunities. And
in the course that I'm teaching, I show

227

00:15:44.570  -->  00:15:49.100
you exactly how to use docker to
leverage some best practices such as

228

00:15:49.100  -->  00:15:53.149
integration tests. So again my website is
SpringFramework.guru. You can

229

00:15:53.149  -->  00:15:56.230
learn more about the course there.

230

00:15:59.089  -->  00:16:03.829
