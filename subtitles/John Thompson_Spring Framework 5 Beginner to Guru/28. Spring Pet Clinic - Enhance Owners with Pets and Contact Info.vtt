WEBVTT
0
1
00:00:04.580 --> 00:00:09.330
Alright! In this video, we are going to go
ahead and tackle the enhance owners with
1

2
00:00:09.330 --> 00:00:12.750
contact info and pets. This is going
to be a little more challenging than
2

3
00:00:12.750 --> 00:00:17.430
what you might initially think. So let's
go ahead and take a look at this. The
3

4
00:00:17.430 --> 00:00:20.820
contact infos is not going to be bad. 
Let's tack that out right away.
4

5
00:00:20.820 --> 00:00:28.080
So come over here. Again, we're going to
want look at our data loader. We have two
5

6
00:00:28.080 --> 00:00:32.099
owners that we are bringing in. Owner one,
Michael Weston.
6

7
00:00:32.099 --> 00:00:38.040
It's always the owner one. Set address.
I try to remember I spell it.
7

8
00:00:38.040 --> 00:00:45.510
This was a street in Miami and I know I
am totally butchering that. It's
8

9
00:00:45.510 --> 00:00:54.050
Brickerel. I know I'm misspelling that
big-time. owner1.setCity()
9

10
00:00:55.840 --> 00:01:01.680
Let's also do owner1... I think we had
telephone.
10

11
00:01:03.300 --> 00:01:09.720
That should be a string there.
Again, I'm going to risk the evils of cut
11

12
00:01:09.720 --> 00:01:12.050
and paste.
12

13
00:01:12.340 --> 00:01:19.090
Go down here to owner2 and let's just
say Michael and Fiona happen to be
13

14
00:01:19.090 --> 00:01:23.650
getting along in this episode and they
are living together. So they'll have the
14

15
00:01:23.650 --> 00:01:28.690
same address and phone number in our
system. You can see that now I've had
15

16
00:01:28.690 --> 00:01:33.190
it in those additional contact
properties. Now the problem of when we
16

17
00:01:33.190 --> 00:01:38.350
want to add in a pet to one of the
owners, what we need to do is persist
17

18
00:01:38.350 --> 00:01:43.390
that pet. But if we take a look at the
owner service, a couple questions that
18

19
00:01:43.390 --> 00:01:48.640
come to rise is if that pet has been
established and saved in the system has
19

20
00:01:48.640 --> 00:01:54.160
an ID and if the pet type has an ID or
not. If not, we want persist those and
20

21
00:01:54.160 --> 00:01:58.660
we're going to mimic at what Hibernate does
for us. It's when it persists things to the
21

22
00:01:58.660 --> 00:02:02.560
database, it's taking ownership of that
ID property, so we're going to take a
22

23
00:02:02.560 --> 00:02:06.700
ownership with that ID property and
set it and create it if it doesn't exist.
23

24
00:02:06.700 --> 00:02:13.360
We're trying to mimic what JPA is
doing, but also stay out of the way of
24

25
00:02:13.360 --> 00:02:17.769
our object model. If we're working
with objects, we just want to say, hey I'm
25

26
00:02:17.769 --> 00:02:21.850
creating a pet and assigning it to this
owner and this pet has a PetType. But
26

27
00:02:21.850 --> 00:02:26.049
I'm not going to worry about the IDs
which is a persistence entity. What
27

28
00:02:26.049 --> 00:02:31.020
we're going to do is we're going to add in
logic to the OwnerService here.
28

29
00:02:31.020 --> 00:02:41.460
Let's create private final PetTypeServe
like so, private final
29

30
00:02:41.460 --> 00:02:47.430
PetService, like so. We can see that we
have a culprit squigglies there. I'll
30

31
00:02:47.430 --> 00:02:52.860
create a constructor and add in those
parameters like so, and now, Spring went
31

32
00:02:52.860 --> 00:02:56.780
wires up this component. It's going to
add those in.
32

33
00:02:56.780 --> 00:03:01.930
So now, in our save operation, that gets a
little more interesting.
33

34
00:03:01.930 --> 00:03:07.079
What we can say is if...
Make sure that's not
34

35
00:03:08.910 --> 00:03:17.430
null.
And actually, it's not null. Let's do...
35

36
00:03:18.830 --> 00:03:25.130
like so. Actually, I don't even
think I need to do that. We'll just come
36

37
00:03:25.130 --> 00:03:27.700
up here.
37

38
00:03:29.360 --> 00:03:34.730
So now, we're just making a tweak here. 
If we try to save in a null
38

39
00:03:34.730 --> 00:03:42.050
object will return null so that that is
okay. So if that is not null, what we want
39

40
00:03:42.050 --> 00:03:50.630
to do is come in and say if
that pets not equal null
40

41
00:03:51.010 --> 00:03:58.420
now what we want to do is walk the pet
and look at them. So object.getPets()
41

42
00:03:58.420 --> 00:04:01.650
forEach().
42

43
00:04:04.180 --> 00:04:07.840
So now, what we're doing is setting up.
We're going to iterate each pet.
43

44
00:04:07.840 --> 00:04:11.099
So if...
44

45
00:04:14.670 --> 00:04:21.030
We're saying if getPetType() not equal to
null, and what we can say, let's say I go
45

46
00:04:21.030 --> 00:04:24.410
ahead and require a pet type.
46

47
00:04:30.490 --> 00:04:37.690
I'm going to say pet type is required,
but if our pet type is not equal to null,
47

48
00:04:42.730 --> 00:04:49.670
what we want to do there is so if
we're saying the ID is null, we
48

49
00:04:49.670 --> 00:04:58.280
need to save that PetType. So PetType.
Make sure we can just consolidate those
49

50
00:04:58.280 --> 00:05:04.750
so we can say pet.setPetType
50

51
00:05:04.949 --> 00:05:09.409
petTypeService.save().
51

52
00:05:11.400 --> 00:05:17.580
Just to recap what I'm doing here, so
I'm coming in and if the pet type get
52

53
00:05:17.580 --> 00:05:22.169
pet ID is null so that pet type has not
been saved to our map yet, we're going to
53

54
00:05:22.169 --> 00:05:27.120
say take the pet and set the PetType so
to the save pet type which is a term
54

55
00:05:27.120 --> 00:05:31.860
from the pet service, we're going to save it
and get that pet type from the pet.
55

56
00:05:31.860 --> 00:05:35.760
It's a little confusing, a little
recursive there. But basically, we're
56

57
00:05:35.760 --> 00:05:39.990
going to take the pet type that's been
assigned and save it so we can get the
57

58
00:05:39.990 --> 00:05:45.419
ID assigned to the map object. So that is
all good. Just double checking our
58

59
00:05:45.419 --> 00:05:50.190
logic here. We come in. We walk the
pets so we can have more than one pet.
59

60
00:05:50.190 --> 00:05:55.110
For each PetType on there, we're going to
check to see if the pet type ID is null.
60

61
00:05:55.110 --> 00:06:00.780
If it is, we are going to persist that
PetType to our PetTypeService. Now
61

62
00:06:00.780 --> 00:06:09.740
what we want to do is come in here and
do a similar check. So if dot getId().
62

63
00:06:10.560 --> 00:06:15.780
So now, we're going to say has that Pet been
saved. Now what we want to do is let's
63

64
00:06:15.780 --> 00:06:20.300
see here.
I do savedPet
64

65
00:06:22.169 --> 00:06:26.570
Oops... this time, I want to say petService
save.
65

66
00:06:26.570 --> 00:06:31.520
This is in the iterator. I'm just
making sure. I probably could get away
66

67
00:06:31.520 --> 00:06:37.430
with not doing this, but I'm making sure
that I'm explicitly saying that. Now
67

68
00:06:37.430 --> 00:06:45.100
what I want to do is say pet.setId()
equal to savedPet.
68

69
00:06:45.780 --> 00:06:50.100
This would work out okay. I'm not going to
run a unit test to make sure but because
69

70
00:06:50.100 --> 00:06:54.360
I'm passing on that object, the ID would
get updated, I'm just like explicitly
70

71
00:06:54.360 --> 00:06:58.680
saying that I am going to make sure that
I get the save pet and set the ID on pet.
71

72
00:06:58.680 --> 00:07:03.270
So now, this is going to come true.
We take care of the pet type. We take
72

73
00:07:03.270 --> 00:07:07.980
care of the pet ID, so we're handling two
different IDs here. I'm going to clean that
73

74
00:07:07.980 --> 00:07:15.419
up. So now, we come in. If the object is not
null, we walk the pets. Take care of the
74

75
00:07:15.419 --> 00:07:20.580
IDs on the pet types, and the IDs on the
pets. That is all set on our object.
75

76
00:07:20.580 --> 00:07:24.510
Now we can go in and save that object.
This a little confusing because we
76

77
00:07:24.510 --> 00:07:29.240
are working with a hashmap in
the background and we have a hashmap on
77

78
00:07:29.240 --> 00:07:35.430
owners, pets and pet types. All those
objects are keeping their own IDs and
78

79
00:07:35.430 --> 00:07:39.660
what we're trying to do is keep all
those IDs in sync here. So that's all
79

80
00:07:39.660 --> 00:07:45.000
happy now. I very well could have a
bug in here. I'd like to have some unit
80

81
00:07:45.000 --> 00:07:48.030
tests on the coverage but we're not
there yet,
81

82
00:07:48.030 --> 00:07:53.550
so I am going to take a leap of faith
and say this code is good. The other
82

83
00:07:53.550 --> 00:07:57.150
thing that we want to do is come in here
to our data loader and let's add a
83

84
00:07:57.150 --> 00:08:04.219
couple of dogs.
So now, we can say pet equals
84

85
00:08:09.529 --> 00:08:12.849
I'll say setPetType.
85

86
00:08:21.840 --> 00:08:27.389
I'm surprised our pet doesn't have a
name. That could be a problem. So let's
86

87
00:08:27.389 --> 00:08:30.230
take a double check that. Let's go to base entity
87

88
00:08:32.289 --> 00:08:36.400
and let's check the reference segmentation. I
thought our pets should have a name.
88

89
00:08:36.400 --> 00:08:44.970
That could be a mistake here.
The owner has pets. Yes, pets extends
89

90
00:08:44.970 --> 00:08:51.810
named entity. Named entity in this... just
show you here. We're going to put that
90

91
00:08:51.810 --> 00:08:59.130
system model NamedEntity. So NamedEntitiy is kind of
like an intermittent. It just extends
91

92
00:08:59.130 --> 00:09:05.690
BaseEntity with a string name. So we'll
add that to our pet object,
92

93
00:09:11.300 --> 00:09:16.380
like so.
That updates that. Now, we can come
93

94
00:09:16.380 --> 00:09:19.370
over here, Mike's pet.
94

95
00:09:28.750 --> 00:09:32.160
We're just saying birthdate to
local date now.
95

96
00:09:32.160 --> 00:09:39.630
And then mikesPet setName(). What's a
good name for Mike's pet?
96

97
00:09:39.630 --> 00:09:42.530
How about Rosco?
97

98
00:09:43.000 --> 00:09:46.970
So we've
created association to owner here on the
98

99
00:09:46.970 --> 00:09:53.080
pet object but we did not do it on the
way back, so we need say owner1
99

100
00:09:54.700 --> 00:10:00.380
getPets().add(mikesPet).
Now let's take a quick look at
100

101
00:10:00.870 --> 00:10:06.330
this. I'm going to double-check something.
This could be a bug. Click on that. We
101

102
00:10:06.330 --> 00:10:11.339
see here, we have not initialized this so
if we did this right now, we'd get a null
102

103
00:10:11.339 --> 00:10:15.960
pointer because pets has never been
initialized. But what we can do... this a
103

104
00:10:15.960 --> 00:10:20.330
little trick and say new. We're
104

105
00:10:20.830 --> 00:10:24.610
just initialize that with a default
value, so we're going to set that to a new
105

106
00:10:24.610 --> 00:10:28.240
hash set, so when we go in and add in a
new pet, that'll automatically get added
106

107
00:10:28.240 --> 00:10:33.310
for us so that's exactly what we want to
happen there. Actually, while I'm here,
107

108
00:10:33.310 --> 00:10:39.510
let's double check Vet. We'll initialize
specialties there.
108

109
00:10:41.470 --> 00:10:45.820
Try to think. I think that's the only places
that we had set so far, so it's a good
109

110
00:10:45.820 --> 00:10:50.350
good habit to initialize those with
either. Sometimes you'll be using sets,
110

111
00:10:50.350 --> 00:10:56.200
sometimes be using lists, but if you
don't do that, it's going to go kaboom on
111

112
00:10:56.200 --> 00:11:01.080
you. So that's set up. Let's double
check our data loader. We
112

113
00:11:01.080 --> 00:11:07.650
wanted to do all this for Fiona as well.
Let's give Fiona a cat.
113

114
00:11:15.440 --> 00:11:19.630
It'll be a lowercase there. My mistake.
114

115
00:11:23.009 --> 00:11:30.509
We'll call our cat "Just Cat". Fiona's
cat. It's going to belong to owner2.
115

116
00:11:30.509 --> 00:11:35.970
fionasCat.setBirthDate().
116

117
00:11:35.970 --> 00:11:39.660
Local date now. So both pets would be
born
117

118
00:11:39.660 --> 00:11:42.350
whenever this runs.
118

119
00:11:43.160 --> 00:11:46.940
Now we need to set a pet type, and that
is going to be saved
119

120
00:11:46.940 --> 00:11:49.240
cat.
120

121
00:11:49.730 --> 00:11:56.899
We want to say owner2 getPets().add().
We're going to add in fionasCat. So now,
121

122
00:11:56.899 --> 00:12:00.709
when this falls down to the ownerService, owner2 will save that, so I
122

123
00:12:00.709 --> 00:12:04.519
think we got everything here. Let's go
ahead and run this. Make sure that we
123

124
00:12:04.519 --> 00:12:09.800
don't blow up and I am going to trust that
things do load up normally. We may have a
124

125
00:12:09.800 --> 00:12:14.449
hidden error here again. Again, this is stuff
that I'd like to have some unit test
125

126
00:12:14.449 --> 00:12:28.399
coverage for so... 
We did now blow up, so that is good sign.
126

127
00:12:28.399 --> 00:12:32.779
No exceptions there. I'm going to go
under the assumption that everything is
127

128
00:12:32.779 --> 00:12:37.130
loading properly. Like I said, we're
not running any tests here. I normally
128

129
00:12:37.130 --> 00:12:40.790
put in some tests to make sure that this
is running properly. Again that is coming
129

130
00:12:40.790 --> 00:12:44.930
on the upcoming video. We will be adding
additional stuff for that. But for now,
130

131
00:12:44.930 --> 00:12:50.449
I'm going to call this good and this
assignment or this issue complete.
131

132
00:12:50.449 --> 00:12:55.240
This is a little more interesting than I
thought it would be. That was number 33.
132

133
00:12:55.240 --> 00:13:00.519
I'll come in here and commit this code.
133

134
00:13:11.560 --> 00:13:16.260
We'll go ahead and commit that code and
get it pushed up to GitHub.
