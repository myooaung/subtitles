WEBVTT
0
1
00:00:09.290 --> 00:00:15.900
Alright! In this video, our job is to
stand up a Mongo database in a Docker
1

2
00:00:15.900 --> 00:00:20.039
container. So we just want to stand up
Mongo in a Docker container. We're gonna
2

3
00:00:20.039 --> 00:00:24.810
run a command. What's gonna happen is,
on your machine, you probably don't have
3

4
00:00:24.810 --> 00:00:28.320
a Docker image downloaded for Mongo. So we're gonna issue this command.
4

5
00:00:28.320 --> 00:00:32.850
What's gonna happen is, the Docker
Daemon is gonna go out to the public
5

6
00:00:32.850 --> 00:00:38.610
Docker Repository, and download the
Docker image for Mongo. And then,
6

7
00:00:38.610 --> 00:00:43.890
it's gonna start it up for us. We'll have a running container on our
7

8
00:00:43.890 --> 00:00:48.450
local system with a Mongo database in it.
I'll show you how we can
8

9
00:00:48.450 --> 00:00:52.410
look at that, verify that's running,
and see all that real time, and what's
9

10
00:00:52.410 --> 00:00:55.469
going on there. So I'm gonna toggle over to my computer now and
10

11
00:00:55.469 --> 00:00:59.550
show you exactly how we did this. Okay, so, what we wanna do is run the Docker
11

12
00:00:59.550 --> 00:01:04.530
image. Right now, on the screen, I have
the official Docker repository. So this
12

13
00:01:04.530 --> 00:01:09.360
is Docker Hub, and this gives us a
description of Docker images that are
13

14
00:01:09.360 --> 00:01:14.549
available for us to pull down from the
Docker hub. This is the Mongo page.
14

15
00:01:14.549 --> 00:01:18.180
You can get to this if you want
follow along, just go out to Google in
15

16
00:01:18.180 --> 00:01:22.850
search of Mongo and Docker, and it'll
probably take you right to this page.
16

17
00:01:22.850 --> 00:01:27.659
Every container that is up there is
gonna have a descriptive page, like this.
17

18
00:01:27.659 --> 00:01:33.720
This tells us a little bit about
Mongo blah blah blah blah and it also
18

19
00:01:33.720 --> 00:01:40.020
tells us how to start a Docker image on
Mongo Instance, and this is important.
19

20
00:01:40.020 --> 00:01:43.950
I'm pointing this out because every
instance is a little bit different.
20

21
00:01:43.950 --> 00:01:48.930
This has its own directions and it also
tells us that it exposes a port for us.
21

22
00:01:48.930 --> 00:01:55.560
So what I'm gonna do, is go and test that,
and what this command is, it says docker
22

23
00:01:55.560 --> 00:02:02.250
run and gives us a name and then it also
with - -name it gives us some-mongo and
23

24
00:02:02.250 --> 00:02:09.720
then - d tells it to run it in the
background, and then mongo tells it
24

25
00:02:09.720 --> 00:02:12.630
that's the image that the last command has
image.
25

26
00:02:12.630 --> 00:02:17.460
We don't actually need all of that. I
also wanna point out, there's another
26

27
00:02:17.460 --> 00:02:23.730
command up here, on the page, to pull the
Docker image, and so I'm using the command
27

28
00:02:23.730 --> 00:02:28.370
docker pull, we'll pull down that image.
Now I've gone over to my machine, and
28

29
00:02:28.370 --> 00:02:38.490
cleaned it up so I'm not running in any
images. So clear here, and if I do to
29

30
00:02:38.490 --> 00:02:43.050
docker ps, that tells me any running
images right now. I don't have any images
30

31
00:02:43.050 --> 00:02:49.080
running. I do have some containers, if I
do a ps -a, that was everything. And
31

32
00:02:49.080 --> 00:02:53.640
right now, I do have a Postgres database
and MySQL database. So I'm gonna clear
32

33
00:02:53.640 --> 00:03:02.280
that again. Now if I do a docker run
mongo, you can see there a... I can't
33

34
00:03:02.280 --> 00:03:09.840
find it, the latest image locally.
This is important, see the :latest there. It's
34

35
00:03:09.840 --> 00:03:13.740
telling it to go get the latest image.
Let's switch back over to Chrome
35

36
00:03:13.740 --> 00:03:20.550
here, and we can see that there's tags
here. So I could do a specific tag here
36

37
00:03:20.550 --> 00:03:28.980
to bring down 3.0, 3.2, 3.4.1 so these are all different tags that
37

38
00:03:28.980 --> 00:03:33.480
we could pull down. But I'm just saying, I
want the latest one. Let's go back.
38

39
00:03:33.480 --> 00:03:37.470
What this down doing here, this is kind
of important. It's pulling down these
39

40
00:03:37.470 --> 00:03:42.900
different sections of it. We'll get into
that later. Now, we can see that Mongo
40

41
00:03:42.900 --> 00:03:52.320
has started up but it's waiting for
connections on port 2707. And now, this is
41

42
00:03:52.320 --> 00:03:57.240
a problem because, not really a problem,
but I am running an interactive session.
42

43
00:03:57.240 --> 00:04:00.240
So if I close this window, Mongo will go
away.
43

44
00:04:00.240 --> 00:04:06.690
Do let me do a command, I think command T,
gives me another tab. Yeah... so if I do a
44

45
00:04:06.690 --> 00:04:11.430
docker now at OS X, I just did a command T and
45

46
00:04:11.430 --> 00:04:18.540
that gave me another terminal window. Now, we can see that that's running. So I have
46

47
00:04:18.540 --> 00:04:24.740
two tabs here and this is the original
one. So now, if I close this out,
47

48
00:04:24.740 --> 00:04:34.699
so we're going to do a graceful. So I did a
control C, and if I exit that, now, my
48

49
00:04:34.699 --> 00:04:39.349
Ridge, my second tab, is open. I closed
that out. I did an exit. So now, if I do
49

50
00:04:39.349 --> 00:04:43.460
docker ps, I can see that it don't have
any more Docker images running. So this
50

51
00:04:43.460 --> 00:04:50.419
is important.
docker ps -a. Now, we can see that
51

52
00:04:50.419 --> 00:04:58.430
container is there. So now, I do it clear,
and goes back here, so I would do a
52

53
00:04:58.430 --> 00:05:09.580
docker run mongo -d. Op...Okay, made it quick mistake in that, It is actually docker
53

54
00:05:09.580 --> 00:05:20.720
run -d mongo. So I had those little backwards moment there. Now, we can
54

55
00:05:20.720 --> 00:05:24.069
see that's running. Now, if I do a docker ps,
55

56
00:05:24.069 --> 00:05:30.710
now we can see that it is up, and it is
listening on port 27017, which is the
56

57
00:05:30.710 --> 00:05:37.550
standard Docker port for this. A couple
things not quite ready here, and the way
57

58
00:05:37.550 --> 00:05:43.820
the Docker documentation was listed over
here, if we look at this, I said to start
58

59
00:05:43.820 --> 00:05:51.830
a Mongo instance. The statement here
says, the image includes an expose 27017
59

60
00:05:51.830 --> 00:05:57.949
and that's the default Mongo port.
And yes, it does expose that, but what's
60

61
00:05:57.949 --> 00:06:02.120
easily misconstrued here or
misunderstood, I should say to be a
61

62
00:06:02.120 --> 00:06:07.070
little more clear is that it does not
expose it to your application. It will
62

63
00:06:07.070 --> 00:06:12.680
allow you to link to it. So, the Docker
will do links, which will create like
63

64
00:06:12.680 --> 00:06:17.300
virtual host names on your system, that
allows two containers to talk to each
64

65
00:06:17.300 --> 00:06:22.130
other through the networking of your own
container. But, if you try to run an
65

66
00:06:22.130 --> 00:06:27.650
application going against 27017, it's
not going to work for us. So what we need
66

67
00:06:27.650 --> 00:06:34.279
to do is a couple of minor things here. So
we need to stop that image. So let's go
67

68
00:06:34.279 --> 00:06:37.210
ahead and stop him.
68

69
00:06:37.770 --> 00:06:45.070
Now I'm gonna give it a container name,
so docker stop, just go and paste them in.
69

70
00:06:45.070 --> 00:06:54.540
Now I can see that nothing's running.
70

71
00:06:54.870 --> 00:07:01.960
This time, what I wanna do is, I'm
gonna, I'm hitting the up arrow so
71

72
00:07:01.960 --> 00:07:07.480
it's docker run -d mongo. This tells
us to run the Docker Mongo image but it
72

73
00:07:07.480 --> 00:07:11.620
doesn't tell us to do a port mapping, so
what we need to do is come up here, after
73

74
00:07:11.620 --> 00:07:24.220
the run command. Also give it a
parameter of  -p 27017:27017.
74

75
00:07:24.220 --> 00:07:30.060
What this is going to do is expose at
27071. Oops...
75

76
00:07:30.060 --> 00:07:38.200
Actually, I'm totally backwards today. 17.
So now, that's gonna expose it to our
76

77
00:07:38.200 --> 00:07:43.090
host port and 27017 and our
applications will be able to go to
77

78
00:07:43.090 --> 00:07:48.880
without getting a link to the Docker
container, and if we want to run our
78

79
00:07:48.880 --> 00:07:52.630
machine as a Mongo database server,
somebody else could connect us
79

80
00:07:52.630 --> 00:07:59.050
externally as well. So now, I'm gonna start
this. You can see that I started back up,
80

81
00:07:59.050 --> 00:08:09.430
and if I do a docker ps, now we can see,
that the ports are mapped and we can see
81

82
00:08:09.430 --> 00:08:19.720
that it got a further name there. So
0.0.0.0:27017 means that has been
82

83
00:08:19.720 --> 00:08:24.070
mapped as an external port that we can
hit on this machine. So when we go to run
83

84
00:08:24.070 --> 00:08:28.180
our Spring Boot Application later, I will
be happy and we can connect it directly
84

85
00:08:28.180 --> 00:08:34.150
to it. Okay, you can see exactly how easy it
was to create a Mongo database using
85

86
00:08:34.150 --> 00:08:37.690
Docker. This is one of the reasons why I
really love working with Docker, because
86

87
00:08:37.690 --> 00:08:42.310
it makes things so simple for us to
do. So here, I have a use case, where I
87

88
00:08:42.310 --> 00:08:47.050
need a Mongo database running on my
machine. Now if you go out on the
88

89
00:08:47.050 --> 00:08:51.320
internet, and search around
about installing Mongo, it does have run
89

90
00:08:51.320 --> 00:08:55.520
into some nuances, depending upon what
operating system you're on, and the
90

91
00:08:55.520 --> 00:08:59.720
different install packages. It's actually
not too bad and some of the package
91

92
00:08:59.720 --> 00:09:04.160
installers, but if you had to build that
from scratch, It will be quite a bit work
92

93
00:09:04.160 --> 00:09:08.510
work to be done. Also, if you install
it on your own local development
93

94
00:09:08.510 --> 00:09:12.470
environment. Now you're living with that
Mongo database, so every time you make
94

95
00:09:12.470 --> 00:09:16.399
changes you're gonna be coming up in
basically a polluted State. That's one
95

96
00:09:16.399 --> 00:09:21.649
of the problems of working with
databases that persist data to your
96

97
00:09:21.649 --> 00:09:24.170
local development environment. Because
you're always working with them and
97

98
00:09:24.170 --> 00:09:27.620
you're doing things. Now if you're doing
a development scenario that your data
98

99
00:09:27.620 --> 00:09:31.279
changes underneath you, or you have some
old garbage yet and there you can cause
99

100
00:09:31.279 --> 00:09:35.029
yourself a lot of headaches. This is
one of the nice things, where I'm gonna
100

101
00:09:35.029 --> 00:09:39.500
go out, and say, I'm gonna spool up a Mongo
database. It's gonna be a brand new
101

102
00:09:39.500 --> 00:09:42.920
database. Nothing in it. And then, I can do
my development on it. That's fantastic!
102

103
00:09:42.920 --> 00:09:48.140
That's like, after doing years and years
of development against persistent data
103

104
00:09:48.140 --> 00:09:53.990
source, that saves stuff. It does shoot
you in the foot quite often. So next,
104

105
00:09:53.990 --> 00:09:59.890
we're gonna have an assignment to
actually connect to the Mongo database.
