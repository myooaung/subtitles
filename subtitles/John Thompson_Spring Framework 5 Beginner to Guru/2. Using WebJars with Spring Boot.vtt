WEBVTT
0
1
00:00:03.920 --> 00:00:08.849
Alight, one nice feature of Spring
Boot is it gives us the capability to
1

2
00:00:08.849 --> 00:00:14.160
use WebJars. So this is a default
functionality of Spring Boot to bring
2

3
00:00:14.160 --> 00:00:18.390
WebJars to the table. So what WebJars
are, they're jar files that are available
3

4
00:00:18.390 --> 00:00:22.650
in Maven repositories of popular web
components. So I'm going to toggle over to
4

5
00:00:22.650 --> 00:00:30.810
the WebJars site now and we can see that
here's webjars.org and you can see
5

6
00:00:30.810 --> 00:00:35.579
there's a variety of things there. And
right away we got the popular Web
6

7
00:00:35.579 --> 00:00:40.410
Jars and what we want to do is grab
bootstrap now. At the time of writing,
7

8
00:00:40.410 --> 00:00:46.410
3.3.7 is the most recent. We will grab the
3.3.7-1. It looks like a very small change
8

9
00:00:46.410 --> 00:00:54.449
there. I can come over here to Maven and
grab that. Grab in that dependency. I'm
9

10
00:00:54.449 --> 00:00:58.260
going to copy that. This command+c, toggle back over to
10

11
00:00:58.260 --> 00:01:05.519
IntelliJ and we are going to drop that
into here and we also want to grab
11

12
00:01:05.519 --> 00:01:12.659
jQuery which happens to be right above
it. Take this, so we'll get the 3.2.1
12

13
00:01:12.659 --> 00:01:23.040
release of jQuery and it's going
to tell it to import the changes. Now
13

14
00:01:23.040 --> 00:01:27.689
what we want to do is come over to our
index file and we want to start using
14

15
00:01:27.689 --> 00:01:33.960
those WebJars in there and we are using
the CDN. I'll close this window here. But we're
15

16
00:01:33.960 --> 00:01:38.670
going to tell Thymeleaf to use the WebJars. So we want to do now is go in and
16

17
00:01:38.670 --> 00:01:44.040
add the Thymeleaf tags for the run time
and I've cheated a little bit in my
17

18
00:01:44.040 --> 00:01:48.930
preparation. I've gone in and copied them
over so I have these prepared so you
18

19
00:01:48.930 --> 00:01:54.960
don't see me try to remember and type
all that out. And what this is going to
19

20
00:01:54.960 --> 00:02:01.710
do is tell Thymeleaf to substitute that
in and I did catch one other mistake
20

21
00:02:01.710 --> 00:02:06.840
here that I made before. We didn't
include jQuery. So I'm also going to
21

22
00:02:06.840 --> 00:02:11.209
include that now and just as a reminder
we've got to include these in sequence.
22

23
00:02:11.209 --> 00:02:15.750
So now we'll get the jQuery
brought in as well as the bootstrap
23

24
00:02:15.750 --> 00:02:21.240
JS file so we'll get the animations there. So let's go ahead and
24

25
00:02:21.240 --> 00:02:28.110
run this now. Just as a recap there on
line 10, I'm using a Thymeleaf th:href to
25

26
00:02:28.110 --> 00:02:34.260
replace this href here for the CDN. So
people get confused on this because when
26

27
00:02:34.260 --> 00:02:39.830
I run this as a natural template, if I
come up here and say run in Chrome,
27

28
00:02:39.830 --> 00:02:46.320
which of course opens up in my other
window, but then this is actually running
28

29
00:02:46.320 --> 00:02:53.070
from the filesystem right in the browser. But when I run it under Spring Boot,
29

30
00:02:53.070 --> 00:02:57.120
I'm going to start the Spring Boot
application, Thymeleaf is running and
30

31
00:02:57.120 --> 00:03:01.560
it's going to substitute that URL for
the href at runtime.
31

32
00:03:01.560 --> 00:03:06.420
And this one is running through
the application. So close those guide,
32

33
00:03:06.420 --> 00:03:11.850
here's our Recipe home.  Let's go ahead and
now we can see that that is in fact
33

34
00:03:11.850 --> 00:03:17.040
running from that. So if I come in here
and do a view page source we can see
34

35
00:03:17.040 --> 00:03:22.350
that the href has been replaced and I
can click on that and now that's being
35

36
00:03:22.350 --> 00:03:29.209
served by a Spring Boot via Tomcat. And
just make sure these others are working.
36

37
00:03:29.209 --> 00:03:34.410
jQuery is not working. Oh I need update
the version there. So let's go and do
37

38
00:03:34.410 --> 00:03:41.459
that real quick. So I just want to point
out also my testing. The bootstrap jar
38

39
00:03:41.459 --> 00:03:48.630
actually has a dependency on 1.11.1
of jQuery. So let's go ahead and I think
39

40
00:03:48.630 --> 00:03:53.910
it's probably better if we get rid of.
I think it would be better if we don't
40

41
00:03:53.910 --> 00:03:58.620
use the other version. So it will go
ahead and depend on the curated
41

42
00:03:58.620 --> 00:04:03.420
dependencies. Now and we'll see things
restart here.
42

43
00:04:03.420 --> 00:04:11.130
I should, so yeah there it goes.
Our Spring Boot DevTools kicking in.
43

44
00:04:11.130 --> 00:04:15.840
So now let's come in and do a refresh
here and double-check that dependency.
44

45
00:04:15.840 --> 00:04:23.130
Again I'm just going with the curated
dependencies of the WebJars. So now here's
45

46
00:04:23.130 --> 00:04:34.410
jQuery and we're still not seeing him. Let's double check that. 1.11.1 and pause
46

47
00:04:34.410 --> 00:04:39.780
this for a second. Okay I did a little
troubleshooting there and actually what
47

48
00:04:39.780 --> 00:04:45.210
happened was I had to manually do a
restart on Spring Boot because I changed
48

49
00:04:45.210 --> 00:04:49.860
the Maven dependency so libraries were
not correct. That older version of jQuery
49

50
00:04:49.860 --> 00:04:55.050
was not getting picked up so when I did
a restart, I can come back over, do a
50

51
00:04:55.050 --> 00:05:03.150
view page source and we could see that
jQuery is in fact resolving properly and
51

52
00:05:03.150 --> 00:05:07.560
also let's double-check the bootstrap. So
all our web resources are now
52

53
00:05:07.560 --> 00:05:10.760
resolving properly.
