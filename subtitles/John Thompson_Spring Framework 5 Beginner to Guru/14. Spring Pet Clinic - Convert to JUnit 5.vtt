WEBVTT
0
1
00:00:03.980 --> 00:00:09.000
In this video, we are gonna convert
1

2
00:00:06.240 --> 00:00:10.679
our project from JUnit 4 to JUnit 5. So
2

3
00:00:09.000 --> 00:00:12.570
there's a few steps that we have to do
3

4
00:00:10.679 --> 00:00:14.580
because right now, we started off the
4

5
00:00:12.570 --> 00:00:16.650
project from Spring Initializr and
5

6
00:00:14.580 --> 00:00:20.460
using all the Spring Boot goodness in
6

7
00:00:16.650 --> 00:00:23.340
here. So right now, if I come in here and
7

8
00:00:20.460 --> 00:00:26.039
hover over this, I'm holding down command
8

9
00:00:23.340 --> 00:00:28.590
key on Apple to bring this up. We can see
9

10
00:00:26.039 --> 00:00:32.640
that we are coming out of the Maven
10

11
00:00:28.590 --> 00:00:34.649
artifact of JUnit 4. That is not
11

12
00:00:32.640 --> 00:00:37.110
what we want. We wanna be coming out of
12

13
00:00:34.649 --> 00:00:39.420
JUnit 5. So to do this, we're gonna have
13

14
00:00:37.110 --> 00:00:42.719
to go through a few steps to convert
14

15
00:00:39.420 --> 00:00:45.000
things over. Let's take a look
15

16
00:00:42.719 --> 00:00:47.489
at the Maven POM. I'm gonna modify
16

17
00:00:45.000 --> 00:00:49.890
both the data and web. The first
17

18
00:00:47.489 --> 00:00:52.920
thing that we wanna do is come up here
18

19
00:00:49.890 --> 00:00:56.449
to the spring-boot-starter-test and
19

20
00:00:52.920 --> 00:00:56.449
we're gonna add in an exclusion.
20

21
00:00:58.510 --> 00:01:03.850
This is setting up an exclusion for
21

22
00:01:00.850 --> 00:01:06.280
JUnit. So if we wanna do the group as
22

23
00:01:03.850 --> 00:01:08.830
well as the artifact
23

24
00:01:06.280 --> 00:01:12.220
and it is conveniently named junit
24

25
00:01:08.830 --> 00:01:14.500
junit. This tells, because the
25

26
00:01:12.220 --> 00:01:16.450
spring-boot-starter-test right now is
26

27
00:01:14.500 --> 00:01:19.470
still providing us the JUnit 4
27

28
00:01:16.450 --> 00:01:22.450
implementation. So right now, August
28

29
00:01:19.470 --> 00:01:25.060
2018, the Spring hasn't even moved over
29

30
00:01:22.450 --> 00:01:27.729
to JUnit 5 yet. So that's why we have to
30

31
00:01:25.060 --> 00:01:30.190
do this. At some point, Spring is going to
31

32
00:01:27.729 --> 00:01:31.810
move to JUnit 5. When that happens,
32

33
00:01:30.190 --> 00:01:33.430
this step won't be necessary. Actually,
33

34
00:01:31.810 --> 00:01:35.800
the next couple of steps won't be necessary.
34

35
00:01:33.430 --> 00:01:39.790
Here, we are setting up the dependencies
35

36
00:01:35.800 --> 00:01:42.899
that we want to include. So that excludes
36

37
00:01:39.790 --> 00:01:47.080
out JUnit. If I come over here a bit,
37

38
00:01:42.899 --> 00:01:50.020
did we sync yet? Oops, we need to do the
38

39
00:01:47.080 --> 00:01:52.960
same thing here. So that was data. I need
39

40
00:01:50.020 --> 00:01:57.520
to do web. I'm just gonna come over
40

41
00:01:52.960 --> 00:02:00.750
here and just do a cut and paste into
41

42
00:01:57.520 --> 00:02:00.750
the web,
42

43
00:02:02.000 --> 00:02:09.650
like so. When this comes in, did we
43

44
00:02:06.590 --> 00:02:11.090
automatically update? So now, you can see
44

45
00:02:09.650 --> 00:02:12.730
that these have gone red because we
45

46
00:02:11.090 --> 00:02:15.530
don't have the @RunWith anymore.
46

47
00:02:12.730 --> 00:02:18.320
So those JUnit 4 dependencies
47

48
00:02:15.530 --> 00:02:21.710
are now removed from the application. And
48

49
00:02:18.320 --> 00:02:23.750
now, let's go in and add in the
49

50
00:02:21.710 --> 00:02:25.910
dependencies that we need for JUnit and
50

51
00:02:23.750 --> 00:02:28.460
then we'll also update our test class
51

52
00:02:25.910 --> 00:02:32.540
here a little bit. So the first
52

53
00:02:28.460 --> 00:02:35.420
dependency, we want is a junit. We
53

54
00:02:32.540 --> 00:02:37.450
want the jupiter-api-dependency. So this is
54

55
00:02:35.420 --> 00:02:39.800
for JUnit 5. We can see that
55

56
00:02:37.450 --> 00:02:44.960
IntelliJ is smart enough to autofill
56

57
00:02:39.800 --> 00:02:48.650
that in. We are going to do a scope of
57

58
00:02:44.960 --> 00:02:51.410
test. So that brings it and that just in
58

59
00:02:48.650 --> 00:02:55.140
for the unit test. Then the next one
59

60
00:02:51.410 --> 00:02:58.370
we wanna do is also
60

61
00:02:55.140 --> 00:02:58.370
junit, the 
61

62
00:03:00.730 --> 00:03:06.670
jupiter-engine. What this is for, this is a
62

63
00:03:04.209 --> 00:03:09.819
Maven Dependency to allow the Maven
63

64
00:03:06.670 --> 00:03:11.590
Surefire plugin to operate properly and
64

65
00:03:09.819 --> 00:03:15.540
we're also getting to give him the scope
65

66
00:03:11.590 --> 00:03:19.459
of the test dependency.
66

67
00:03:15.540 --> 00:03:21.019
I'm gonna bring this into both.
67

68
00:03:19.459 --> 00:03:22.700
You might be able to get away with
68

69
00:03:21.019 --> 00:03:25.040
putting this in the parent POM. But
69

70
00:03:22.700 --> 00:03:27.670
just out of experience, I think we're
70

71
00:03:25.040 --> 00:03:30.130
gonna need to do it here.
71

72
00:03:27.670 --> 00:03:31.600
We could experiment with using a parent
72

73
00:03:30.130 --> 00:03:34.380
POM but I'm pretty sure each module is
73

74
00:03:31.600 --> 00:03:37.270
kinda need it. We can see right now,
74

75
00:03:34.380 --> 00:03:39.610
notice that these are resolving without
75

76
00:03:37.270 --> 00:03:43.600
a version and that is because the Spring
76

77
00:03:39.610 --> 00:03:46.660
Boot parent POM, remember over here in
77

78
00:03:43.600 --> 00:03:49.720
the parent, we are coming off the 
78

79
00:03:46.660 --> 00:03:51.940
spring-boot-starter-parent. This has JUnit
79

80
00:03:49.720 --> 00:03:54.730
dependencies in it and that's where we
80

81
00:03:51.940 --> 00:03:56.740
inherit the version so we will actually
81

82
00:03:54.730 --> 00:03:59.200
bring in the version information from
82

83
00:03:56.740 --> 00:04:03.610
that. So like I said, Spring at this point
83

84
00:03:59.200 --> 00:04:05.920
time is including JUnit 4 but the
84

85
00:04:03.610 --> 00:04:07.360
JUnit 5 dependencies are in the parent
85

86
00:04:05.920 --> 00:04:11.140
POM so therefore we don't need to
86

87
00:04:07.360 --> 00:04:13.090
specify the release ID specifically or
87

88
00:04:11.140 --> 00:04:15.910
the version specifically. So the next
88

89
00:04:13.090 --> 00:04:19.209
thing we need to do is set up the Maven
89

90
00:04:15.910 --> 00:04:22.180
Surefire plugin. I'm gonna come
90

91
00:04:19.209 --> 00:04:24.870
down here. Now let's just collapse
91

92
00:04:22.180 --> 00:04:24.870
these plugins
92

93
00:04:25.430 --> 00:04:31.500
and I'm gonna say
93

94
00:04:28.660 --> 00:04:31.500
plugin
94

95
00:04:35.560 --> 00:04:39.450
so we had the maven-surefire-plugin.
95

96
00:04:40.160 --> 00:04:43.290
Right now, that's not
96

97
00:04:41.610 --> 00:04:45.210
gonna hear from the Spring parent
97

98
00:04:43.290 --> 00:04:49.050
POM so we do need to specify the
98

99
00:04:45.210 --> 00:04:51.650
dependency and dot 22 is actually the
99

100
00:04:49.050 --> 00:04:54.000
current release. You can see that
100

101
00:04:51.650 --> 00:04:55.770
IntelliJ offered versions and I think
101

102
00:04:54.000 --> 00:04:59.030
that's because it's not in my
102

103
00:04:55.770 --> 00:04:59.030
local Maven cache yet.
103

104
00:04:59.950 --> 00:05:04.170
Now we need to add in a dependency
104

105
00:05:04.999 --> 00:05:08.110
like so.
105

106
00:05:10.910 --> 00:05:15.490
We want junit-platform-surefire-provider
106

107
00:05:12.890 --> 00:05:15.490
And here,
107

108
00:05:17.270 --> 00:05:23.669
what we can actually do is, take that away
108

109
00:05:20.999 --> 00:05:26.309
and we can work with the Spring Boot
109

110
00:05:23.669 --> 00:05:30.299
Parent POM. We wanna use the
110

111
00:05:26.309 --> 00:05:32.849
juit-platform-version so that this is
111

112
00:05:30.299 --> 00:05:35.519
a variable that's gonna be resolved from
112

113
00:05:32.849 --> 00:05:38.069
the Spring Boot Parent POM. Actually,
113

114
00:05:35.519 --> 00:05:40.649
if I come in, we can see here, I just did
114

115
00:05:38.069 --> 00:05:43.949
a command click on that. You can see the
115

116
00:05:40.649 --> 00:05:46.679
Spring Boot dependencies. This is the
116

117
00:05:43.949 --> 00:05:49.409
JUnit platform version so we're going
117

118
00:05:46.679 --> 00:05:51.779
to be bringing the 1.1.0 release and you
118

119
00:05:49.409 --> 00:05:54.869
can see that the JUnit Jupiter version is
119

120
00:05:51.779 --> 00:05:57.389
5.1.1. I'm pretty sure 
120

121
00:05:54.869 --> 00:05:59.759
5.2.0 is out so there they are a minor
121

122
00:05:57.389 --> 00:06:01.589
release behind right now. But this is
122

123
00:05:59.759 --> 00:06:04.079
good enough for our purposes. So I'm
123

124
00:06:01.589 --> 00:06:07.079
gonna close that out just to show
124

125
00:06:04.079 --> 00:06:10.559
you how we can see this objects being
125

126
00:06:07.079 --> 00:06:13.259
sourced in. Now, the last thing that we
126

127
00:06:10.559 --> 00:06:17.610
wanna do is definitely wanna get rid
127

128
00:06:13.259 --> 00:06:22.249
of that. Now @RunWith, it's your call
128

129
00:06:17.610 --> 00:06:24.759
that is no longer there. We want to do 
129

130
00:06:22.249 --> 00:06:28.150
@ExtendWith
130

131
00:06:24.759 --> 00:06:33.309
and in this case we are going to use the
131

132
00:06:28.150 --> 00:06:35.350
SpringExtension.class. So now, this sets
132

133
00:06:33.309 --> 00:06:37.030
up our test.
133

134
00:06:35.350 --> 00:06:39.700
And then, the next thing is we need to
134

135
00:06:37.030 --> 00:06:43.660
bring back in that @Test annotation
135

136
00:06:39.700 --> 00:06:46.420
so we'll import that. You can see I
136

137
00:06:43.660 --> 00:06:49.480
no longer need the SpringRunner. That
137

138
00:06:46.420 --> 00:06:52.030
goes away. And now, I do a command hover,
138

139
00:06:49.480 --> 00:06:55.360
we can see that now we are depending on
139

140
00:06:52.030 --> 00:06:56.860
JUnit 5 here. If I come in, let's
140

141
00:06:55.360 --> 00:06:59.400
go ahead and run those to make sure that it
141

142
00:06:56.860 --> 00:06:59.400
runs properly.
142

143
00:06:59.590 --> 00:07:05.169
See I'm getting some warnings but the
143

144
00:07:02.050 --> 00:07:07.980
test is actually executing. Got our
144

145
00:07:05.169 --> 00:07:07.980
little vizsla there.
145

146
00:07:09.610 --> 00:07:12.639
You can see this is actually
146

147
00:07:11.139 --> 00:07:14.800
bringing up the Spring Context so
147

148
00:07:12.639 --> 00:07:16.659
whenever you bring up the Spring Context
148

149
00:07:14.800 --> 00:07:18.300
like this, it does get heavy so it can
149

150
00:07:16.659 --> 00:07:20.469
take a little bit longer that's why I
150

151
00:07:18.300 --> 00:07:22.629
try to write the majority of my
151

152
00:07:20.469 --> 00:07:24.819
test as true unit tests. But this is
152

153
00:07:22.629 --> 00:07:26.199
actually an integration test. This
153

154
00:07:24.819 --> 00:07:29.439
is just verifying that the Spring
154

155
00:07:26.199 --> 00:07:33.180
Context does in fact load. So let's see
155

156
00:07:29.439 --> 00:07:33.180
here. I did that.
156

157
00:07:35.880 --> 00:07:40.680
You saw that just run
157

158
00:07:37.470 --> 00:07:42.720
out of the web. To be honest, I've had
158

159
00:07:40.680 --> 00:07:44.940
test run without this but the JUnit
159

160
00:07:42.720 --> 00:07:48.440
team says that it's needed. I am gonna
160

161
00:07:44.940 --> 00:07:48.440
provide it in both projects.
161

162
00:07:49.590 --> 00:07:55.750
Test may run without this but I
162

163
00:07:53.199 --> 00:07:58.900
expect that when you're in a pure, at
163

164
00:07:55.750 --> 00:08:01.270
this, I ran the test from IntelliJ so
164

165
00:07:58.900 --> 00:08:04.030
IntelliJ is running. IntelliJ
165

166
00:08:01.270 --> 00:08:06.910
has excellent JUnit 5 support so that's
166

167
00:08:04.030 --> 00:08:09.789
probably why I ran properly. Without this
167

168
00:08:06.910 --> 00:08:11.680
plugin, when you're running from Maven, I
168

169
00:08:09.789 --> 00:08:14.410
expect that you'd have problems. So
169

170
00:08:11.680 --> 00:08:17.979
inside of IntelliJ, we're unhappy without
170

171
00:08:14.410 --> 00:08:19.270
this plugin running from Maven Context.
171

172
00:08:17.979 --> 00:08:22.030
I think you're gonna have problems
172

173
00:08:19.270 --> 00:08:23.680
with executing the test. This plugin, the
173

174
00:08:22.030 --> 00:08:25.659
Surefire is what runs your unit
174

175
00:08:23.680 --> 00:08:28.409
test inside of Maven. So that's
175

176
00:08:25.659 --> 00:08:31.319
definitely gonna needed.
176

177
00:08:28.409 --> 00:08:34.759
Just to recap everything there, let's
177

178
00:08:31.319 --> 00:08:38.310
take a look at the changes we made. So
178

179
00:08:34.759 --> 00:08:40.709
let me position this up. For the 
179

180
00:08:38.310 --> 00:08:44.310
spring-boot-starter-test, we are excluding the
180

181
00:08:40.709 --> 00:08:46.050
dependency for junit. And then on line
181

182
00:08:44.310 --> 00:08:48.720
86 there, you can see we're bringing in
182

183
00:08:46.050 --> 00:08:51.420
the junit-jupiter-api, as well as the
183

184
00:08:48.720 --> 00:08:55.199
Jupiter engine, which is needed for the
184

185
00:08:51.420 --> 00:08:58.379
Surefire plugin, and then we added in a
185

186
00:08:55.199 --> 00:09:01.019
plug in, the maven-surefire-plugin. You
186

187
00:08:58.379 --> 00:09:03.180
get that out of the box with Maven.
187

188
00:09:01.019 --> 00:09:04.410
That is already there. That's one of the
188

189
00:09:03.180 --> 00:09:06.089
things that it inherits one of the
189

190
00:09:04.410 --> 00:09:08.040
standard plugins of Maven so
190

191
00:09:06.089 --> 00:09:10.620
that's already there for you. We had to
191

192
00:09:08.040 --> 00:09:13.620
add in the Surefire plugin to give it
192

193
00:09:10.620 --> 00:09:18.839
the dependency for the 
193

194
00:09:13.620 --> 00:09:21.810
junit-platform-surefire-provider. So this, just to be clear,
194

195
00:09:18.839 --> 00:09:24.660
this is already included with Maven but
195

196
00:09:21.810 --> 00:09:26.790
we had to explicitly add it so we could
196

197
00:09:24.660 --> 00:09:28.110
provide this dependency in its
197

198
00:09:26.790 --> 00:09:30.660
configuration for the plugin
198

199
00:09:28.110 --> 00:09:32.939
configuration so it'll run the JUnit 5
199

200
00:09:30.660 --> 00:09:36.660
tests happily. And then, the last thing we
200

201
00:09:32.939 --> 00:09:39.420
had to do. See if this comes up. You can
201

202
00:09:36.660 --> 00:09:42.810
see that we formerly had @RunWith Spring
202

203
00:09:39.420 --> 00:09:46.680
Boot SpringRunner. Now, we are doing the
203

204
00:09:42.810 --> 00:09:49.079
@ExtendWith the JUnit 5 syntax or 
204

205
00:09:46.680 --> 00:09:50.910
JUnit 5 annotation, I should say, using
205

206
00:09:49.079 --> 00:09:52.529
the SpringExtension class so that will
206

207
00:09:50.910 --> 00:09:55.410
set up the SpringRunner for and that
207

208
00:09:52.529 --> 00:09:57.180
configures the SpringContext to
208

209
00:09:55.410 --> 00:09:59.009
allow the SpringContext to execute.
209

210
00:09:57.180 --> 00:10:00.899
Then we have a simple test here. That is
210

211
00:09:59.009 --> 00:10:02.819
just gonna make sure that the test
211

212
00:10:00.899 --> 00:10:04.019
actually comes up. You can see all
212

213
00:10:02.819 --> 00:10:06.029
the chatter that we brought up the
213

214
00:10:04.019 --> 00:10:08.310
Spring Context. Test doesn't do anything
214

215
00:10:06.029 --> 00:10:09.750
but the main purpose of this test that
215

216
00:10:08.310 --> 00:10:11.610
you get out-of-the-box from the Spring
216

217
00:10:09.750 --> 00:10:13.649
Initializr is to make sure that your
217

218
00:10:11.610 --> 00:10:15.899
Spring Context loads, which we have
218

219
00:10:13.649 --> 00:10:18.600
proved. So now, going forward in the
219

220
00:10:15.899 --> 00:10:22.709
project, we'll build to use JUnit 5 test
220

221
00:10:18.600 --> 00:10:25.139
and JUnit 4 is excluded. One thing I did
221

222
00:10:22.709 --> 00:10:28.379
not include. If I wanted to maintain
222

223
00:10:25.139 --> 00:10:30.870
my JUnit 4 test, I would have to
223

224
00:10:28.379 --> 00:10:33.209
include the JUnit Vintage
224

225
00:10:30.870 --> 00:10:35.819
Dependency, which I have not done here. So
225

226
00:10:33.209 --> 00:10:37.730
this project will be pure JUnit 5 so I have
226

227
00:10:35.819 --> 00:10:40.380
no need to include the JUnit 4 Vintage
227

228
00:10:37.730 --> 00:10:41.430
dependency here. So the last thing we
228

229
00:10:40.380 --> 00:10:43.980
wanna do is
229

230
00:10:41.430 --> 00:10:46.740
commit this in to GitHub. Remember, we
230

231
00:10:43.980 --> 00:10:49.290
were working against issues and way back
231

232
00:10:46.740 --> 00:10:52.710
on July 12th, over a month and a half ago,
232

233
00:10:49.290 --> 00:10:54.240
we had this upgrade to JUnit 5. This
233

234
00:10:52.710 --> 00:10:56.580
is issue number four, so one of the
234

235
00:10:54.240 --> 00:10:58.080
original issues. Planned to get to it for
235

236
00:10:56.580 --> 00:10:59.850
a long time but now we are at the point
236

237
00:10:58.080 --> 00:11:01.680
in the course where we can do this. So
237

238
00:10:59.850 --> 00:11:04.080
I'm gonna go ahead and commit these
238

239
00:11:01.680 --> 00:11:08.420
files and close this. Let's come back up
239

240
00:11:04.080 --> 00:11:08.420
here. I come up here, right click.
240

241
00:11:15.960 --> 00:11:19.340
So it closes number 4 and then when I
241

242
00:11:18.960 --> 00:11:21.380
push
242

243
00:11:19.340 --> 00:11:24.070
this, GitHub will automatically close out
243

244
00:11:21.380 --> 00:11:24.070
that issue for us.
244

245
00:11:24.780 --> 00:11:28.770
You can see that switched to
245

246
00:11:26.560 --> 00:11:28.770
close.
