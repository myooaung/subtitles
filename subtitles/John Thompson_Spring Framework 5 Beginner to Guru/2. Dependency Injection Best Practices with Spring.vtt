WEBVTT
0
1
00:00:05.440 --> 00:00:09.220
One of the core tenants of the Spring Framework is dependency injection.
1

2
00:00:09.250 --> 00:00:15.940
So this is kind of like from the early days of Spring where it really got its roots that dependancy
2

3
00:00:15.940 --> 00:00:21.130
injection is right up the middle the Spring Framework. Spring Framework is much much bigger much more
3

4
00:00:21.130 --> 00:00:23.490
robust than just dependency injection.
4

5
00:00:23.650 --> 00:00:29.500
But if you're new to Spring Framework dependency injection having such a robust toolset around performing
5

6
00:00:29.500 --> 00:00:34.150
dependency injection is really a game changer in how you develop applications. Gives you a tremendous
6

7
00:00:34.150 --> 00:00:40.690
amount more flexibility as to how you can compose your applications and have the framework make a lot
7

8
00:00:40.690 --> 00:00:44.440
of decisions for you at runtime and gives your capabilities.
8

9
00:00:44.610 --> 00:00:48.610
Now I've seen people do dependency injection very poorly.
9

10
00:00:48.610 --> 00:00:55.480
They make lot of choices and the tool does give you a lot of versatility but you can't shoot yourself
10

11
00:00:55.480 --> 00:01:00.490
in the foot with it. Just because you do have these options doesn't mean that you should use these options
11

12
00:01:00.490 --> 00:01:06.790
just like anything else. It is a tool that you have options and the the framework doesn't always prevent
12

13
00:01:06.790 --> 00:01:08.560
you from making bad choices.
13

14
00:01:08.560 --> 00:01:15.310
So when we talk about dependency injection and object oriented programming there there are three primary
14

15
00:01:15.310 --> 00:01:22.590
ways that you can do Dependency Injection. One you can wear a dependency through a property set so that
15

16
00:01:22.610 --> 00:01:29.500
up right on our property then we can go to traditional POJO where we have getters and setters and then
16

17
00:01:30.550 --> 00:01:36.580
do Dependency Injection against a setter and allow the setter to set that properties and set the property
17

18
00:01:36.580 --> 00:01:39.460
through a set or also a perfectly valid approach.
18

19
00:01:39.520 --> 00:01:46.810
And then finally being that Java is Object Oriented Language, we can take that dependency and provide
19

20
00:01:46.810 --> 00:01:51.350
a constructor for it and build that object at runtime when we construct that object.
20

21
00:01:51.370 --> 00:01:53.920
Use the constructors to set the dependency.
21

22
00:01:53.920 --> 00:01:59.710
So now that there are good things and bad things about all these different approaches but ultimately
22

23
00:01:59.710 --> 00:02:03.970
there are some best practices that you do want to be utilizing in this video.
23

24
00:02:03.960 --> 00:02:08.880
I am going to go through these different types of dependency injection show you examples of each.
24

25
00:02:08.980 --> 00:02:14.860
And we're going to evolve from probably a very poor practice to what I consider and most of the Spring
25

26
00:02:14.860 --> 00:02:20.010
community considers best practices around dependency injection.
26

27
00:02:20.050 --> 00:02:26.710
So this is a short video but I hope you find a lot of information about how you can write quality Spring
27

28
00:02:26.710 --> 00:02:29.380
Framework code in your own applications.
28

29
00:02:30.310 --> 00:02:35.570
Alright in this video I want to talk about dependency injection and some of the best practices within Spring
29

30
00:02:35.570 --> 00:02:40.730
Framework. And there's a couple different things that we can go through as far as dependency injection
30

31
00:02:40.730 --> 00:02:41.300
goes.
31

32
00:02:41.480 --> 00:02:47.260
And I've seen a lot of very very bad practices in use with dependency injection.
32

33
00:02:47.330 --> 00:02:52.220
So I've set up a little demo for us to work with here and it's going to be a little live wide coding here
33

34
00:02:52.220 --> 00:02:57.900
as I go through the different examples but what I have here is I'm emulating a controller.
34

35
00:02:58.130 --> 00:03:05.690
And with what we have as a CustomerController and he hard wires and a CustomerService and I'm using
35

36
00:03:05.690 --> 00:03:12.080
that as a pseudo database object that just kind of pretending here that it's a database object and that
36

37
00:03:12.080 --> 00:03:16.820
CustomerService takes in a database URL, a username and password.
37

38
00:03:16.820 --> 00:03:22.190
And to be honest I've actually seen this in production databases where they have things hard coded like
38

39
00:03:22.190 --> 00:03:22.430
this.
39

40
00:03:22.460 --> 00:03:24.700
And it is awful to work with.
40

41
00:03:24.710 --> 00:03:29.330
So this is a very very bad practice that I'm showing you here as part of a demonstration. We are going to
41

42
00:03:29.330 --> 00:03:32.610
refactor of this to make our lives a little bit better.
42

43
00:03:32.780 --> 00:03:41.840
So let's go ahead and I am going to come in here and do an alt + enter and we're going to create a test for our controller
43

44
00:03:42.890 --> 00:03:47.510
and we want to test customer method and do a setUp method as well.
44

45
00:03:48.720 --> 00:03:50.430
And we're just going to use JUnit 4,
45

46
00:03:54.230 --> 00:04:00.460
and we're going to bring in the SpringRunner and call it a SpringBootTest and this is going to bring
46

47
00:04:00.460 --> 00:04:02.970
up the full context.
47

48
00:04:04.820 --> 00:04:12.310
So Spring of the full context and here let's go inject and say CustomerController.
48

49
00:04:15.720 --> 00:04:16.780
Let's run this test
49

50
00:04:21.340 --> 00:04:22.510
and thats actually.
50

51
00:04:29.170 --> 00:04:30.880
Actually use the wrapper type there.
51

52
00:04:34.320 --> 00:04:39.390
It's a pretty simple test here we're not really going to test anything this more exercise the Spring
52

53
00:04:39.390 --> 00:04:45.450
context. So I want to bring in bring up this Spring context so let's go and make sure this does run and what
53

54
00:04:45.450 --> 00:04:51.540
I'm expecting to do is Spring, the Spring context is going to come up and it is going to pick up that
54

55
00:04:51.540 --> 00:04:57.180
bean, the CustomerController and we can see here that I did get the Customer from database. So just
55

56
00:04:57.180 --> 00:05:00.120
to show you the implementation my CustomerService.
56

57
00:05:00.120 --> 00:05:06.140
So I have a print line there getting the customer from the database which is showing down here again
57

58
00:05:06.150 --> 00:05:08.910
customer from database so that did run.
58

59
00:05:08.910 --> 00:05:13.830
So that's going to be our test to make sure that the class runs as we go through these different options
59

60
00:05:13.830 --> 00:05:17.030
for autowiring this up.
60

61
00:05:17.420 --> 00:05:20.550
Let's come back to our CustomerController.
61

62
00:05:20.550 --> 00:05:26.210
Now as you may know there's different types of dependency injection.
62

63
00:05:26.210 --> 00:05:29.900
The simplest would be to do
63

64
00:05:34.780 --> 00:05:42.960
and do it that way and let's go ahead and what I'm going to say now that we've refactored this Customer
64

65
00:05:42.960 --> 00:05:48.210
Service to managed objects. So we're going to manage our CustomerService manage object using the Spring
65

66
00:05:48.210 --> 00:05:48.570
Framework.
66

67
00:05:48.570 --> 00:05:51.620
So this goes away.
67

68
00:05:51.740 --> 00:05:57.130
Now I can say autowire this and here CustomerService.
68

69
00:06:00.500 --> 00:06:01.280
Now.
69

70
00:06:01.670 --> 00:06:03.240
There are ways to manage this inside of
70

71
00:06:03.260 --> 00:06:08.420
Spring I'm not going to get into that so let's pretend that Spring is going to take over
71

72
00:06:08.420 --> 00:06:09.630
the management of this component.
72

73
00:06:09.710 --> 00:06:14.240
So Spring is going to provide us a CustomerService so I don't have to do all that configuration.
73

74
00:06:14.240 --> 00:06:19.670
So this is a good practice because we're getting away from setting the database URL and passwords here.
74

75
00:06:19.670 --> 00:06:25.190
So that has now gone from our projects I'm just going to delete that altogether and we're going to pretend
75

76
00:06:25.190 --> 00:06:31.370
that the object is being managed by the Spring context because now I've set this up as this as a Component
76

77
00:06:31.780 --> 00:06:34.950
actually let's call it a Service make a little more sense here.
77

78
00:06:36.590 --> 00:06:39.240
And these annotations here.
78

79
00:06:39.620 --> 00:06:46.070
Controller, Component and Service those are Spring stereotypes and those stereotypes behave the same.
79

80
00:06:46.070 --> 00:06:49.250
So people ask what are the differences for these three.
80

81
00:06:49.250 --> 00:06:54.830
There is no underlying difference to the Spring Framework. They function the same. They are more to express the
81

82
00:06:54.830 --> 00:06:56.450
intent so I'm calling this a Service.
82

83
00:06:56.450 --> 00:06:58.480
The other thing I'm calling Controller.
83

84
00:06:58.490 --> 00:07:04.250
The core thing to remember Sprint pretty much treats the same underneath the covers but they are Spring
84

85
00:07:04.250 --> 00:07:07.830
managed components now. So they get brought into the Spring context.
85

86
00:07:07.960 --> 00:07:11.340
So now I've declared that as a Service.
86

87
00:07:11.360 --> 00:07:13.640
Now let's take a look at the CustomerController.
87

88
00:07:13.640 --> 00:07:19.430
So the Controller is a Spring component and we are autowiring it by a public property this time.
88

89
00:07:19.430 --> 00:07:23.930
So we are going to go ahead and autowire that so let's go ahead and run our test.
89

90
00:07:24.140 --> 00:07:25.520
Make sure that runs.
90

91
00:07:28.140 --> 00:07:29.940
So that still runs.
91

92
00:07:29.940 --> 00:07:35.910
Now that is a public property and what you'll see sometimes is people do this.
92

93
00:07:36.240 --> 00:07:39.750
And so I don't have a constructor but now I have private property.
93

94
00:07:39.750 --> 00:07:41.630
Now do you think this is going to run.
94

95
00:07:41.820 --> 00:07:42.930
Let's take a look.
95

96
00:07:45.020 --> 00:07:49.430
So this does infact run this runs properly.
96

97
00:07:49.700 --> 00:07:56.840
And the problem here is and I've seen some very experienced people do this and actually on production
97

98
00:07:56.840 --> 00:08:03.050
type code and actually got on a conversation with somebody that actually has a fairly good bit of Spring
98

99
00:08:03.050 --> 00:08:04.060
knowledge.
99

100
00:08:04.250 --> 00:08:10.340
And we talked about this and like that's a pretty poor practice because basically what you're saying
100

101
00:08:10.340 --> 00:08:15.350
is that you don't want to be able run a unit test against this class while you could but it take a lot
101

102
00:08:15.350 --> 00:08:20.520
of hacking and underneath the covers with the Spring Framework is doing as it is using Reflection is
102

103
00:08:20.540 --> 00:08:25.610
probably going in and adding a constructor for that property to the class at runtime. So it's going to
103

104
00:08:25.610 --> 00:08:32.690
use Reflection for you to go ahead and modify that class at runtime or write a constructor for it and
104

105
00:08:32.690 --> 00:08:37.490
inject that property for it because it is private property so it can't be accessed from the outside
105

106
00:08:37.490 --> 00:08:42.590
world without doing something like that. For you as a developer you're not going to go through all that
106

107
00:08:42.590 --> 00:08:45.370
rigmarole of handling that.
107

108
00:08:45.500 --> 00:08:48.880
And that becomes a real headache to do.
108

109
00:08:49.010 --> 00:08:50.250
If you want to unit test.
109

110
00:08:50.270 --> 00:08:56.240
So when I see somebody auto wiring private properties like this directly I think that is a very bad
110

111
00:08:56.240 --> 00:09:01.130
practice something you definitely do not want to be doing. Because you're effectively saying I don't want to 
111

112
00:09:01.130 --> 00:09:02.350
unit test this class.
112

113
00:09:02.360 --> 00:09:09.140
So this to test in this class is going to be managed by a Spring Framework always. If I want to test
113

114
00:09:09.140 --> 00:09:14.210
it I'm going to have to do it inside an integration test like we are here because just a quick reminder
114

115
00:09:14.210 --> 00:09:20.030
when I bring up the ControllerTest. Once I add this this is now an integration test because we are bringing
115

116
00:09:20.030 --> 00:09:24.320
up the Spring context is no longer technically a unit test.
116

117
00:09:24.320 --> 00:09:29.390
So now it's an integration test because we are bring up the Spring context and you can see even though
117

118
00:09:29.390 --> 00:09:36.090
I have a very very light project and I am on a practically brand new Mac Book Pro and it's a screamer
118

119
00:09:36.130 --> 00:09:39.440
it still takes 44 milliseconds to run that one test.
119

120
00:09:39.440 --> 00:09:42.610
Now if you had hundreds of tests this would be very slow.
120

121
00:09:42.620 --> 00:09:47.690
Something that we don't want on our test unit test should be light and fast.
121

122
00:09:47.780 --> 00:09:49.760
So that's the important contrast here.
122

123
00:09:49.940 --> 00:09:59.710
So what we could do here is one thing we can do is make this come back here and we can come in and add
123

124
00:09:59.710 --> 00:10:03.690
in a setter for this.
124

125
00:10:03.820 --> 00:10:08.030
And now we will be down there.
125

126
00:10:08.560 --> 00:10:10.570
We move Autowired to this the setter.
126

127
00:10:10.660 --> 00:10:15.520
Let's go out and run this and this is an example of autowiring by a setter.
127

128
00:10:15.520 --> 00:10:20.950
So this is setter based dependency injection and this isn't a bad bad habit.
128

129
00:10:20.950 --> 00:10:25.090
I used to prefer using setter based dependency injection.
129

130
00:10:25.090 --> 00:10:30.580
And actually the older real real older versions of Spring used to be a little bit buggy with constructor
130

131
00:10:30.580 --> 00:10:35.200
based dependency injection and it is not necessarily a bad thing.
131

132
00:10:35.200 --> 00:10:40.780
That was just the nature of Spring at the time but now the constructor based dependency injection is
132

133
00:10:40.780 --> 00:10:41.990
really rock solid.
133

134
00:10:42.260 --> 00:10:46.590
I'm talking like in version 2.5 Spring so has a long long time ago.
134

135
00:10:46.590 --> 00:10:51.890
I hope nobody listening in this video is actually using version 2.5 of Spring still but I digress.
135

136
00:10:52.120 --> 00:10:57.370
The important part here is that you do have the option to use setter based dependency injection and
136

137
00:10:57.370 --> 00:11:02.470
this is a much better scenario than autowiring the private property directly.
137

138
00:11:02.470 --> 00:11:04.690
Now we've created a setter for it.
138

139
00:11:04.750 --> 00:11:05.990
We don't have a getter.
139

140
00:11:06.010 --> 00:11:13.950
So the setter in theory, the class at runtime could be modified so that is the one downside.
140

141
00:11:14.080 --> 00:11:17.750
We can also create the class without that dependency injected.
141

142
00:11:17.950 --> 00:11:20.290
So that is another downside of that.
142

143
00:11:20.330 --> 00:11:22.610
So how how do you get around that.
143

144
00:11:22.660 --> 00:11:25.180
What we can do is get rid of this
144

145
00:11:30.180 --> 00:11:31.710
and come up with the constructor
145

146
00:11:36.680 --> 00:11:43.200
and now we can autowire by the constructor so this is an example constructor based dependency injection.
146

147
00:11:43.200 --> 00:11:49.360
So let's go ahead and run that and we can see that runs properly.
147

148
00:11:49.360 --> 00:11:56.950
So now now this is a better scenario because we are running the constructor and we can not instantiate
148

149
00:11:56.950 --> 00:11:58.090
this class.
149

150
00:11:58.090 --> 00:12:05.510
Now one argument for the setter based dependency injection is by default.
150

151
00:12:05.700 --> 00:12:09.610
The framework will throw an exception if you do not set that a dependency.
151

152
00:12:09.610 --> 00:12:15.890
Now we are enforcing that dependency to be injected through the principles of object oriented design.
152

153
00:12:15.910 --> 00:12:25.810
So this is a much better scenario but something in that, a downside of this here is this could be modified
153

154
00:12:25.810 --> 00:12:31.240
somehow at runtime so it is good to make this a final.
154

155
00:12:31.380 --> 00:12:37.980
So now we have a final property. So lets go and make sure that still runs. And what final says is that
155

156
00:12:38.340 --> 00:12:42.870
just as a reminder inside of Java says, that once I set this  that cannot be changed.
156

157
00:12:43.170 --> 00:12:46.290
So this is a final variable.
157

158
00:12:46.350 --> 00:12:48.840
You get set inside the constructor and it can never be changed.
158

159
00:12:48.840 --> 00:12:52.290
So if I try to set it, make sure if this..
159

160
00:12:56.110 --> 00:13:03.430
So now we can say that this is squawking inside the compiler and the Java compiler actually complains
160

161
00:13:04.050 --> 00:13:09.850
so that until it is yelling at me and so is a Java compiler so I can't go ahead and break that.
161

162
00:13:09.880 --> 00:13:13.470
So you know there are ways around that.
162

163
00:13:13.540 --> 00:13:19.930
So but ultimately Java will smack you down and say no you can't do that so that that is a good
163

164
00:13:19.930 --> 00:13:21.700
habit to get into.
164

165
00:13:21.720 --> 00:13:25.060
Now there's one other thing here that I'm not too happy about.
165

166
00:13:25.060 --> 00:13:27.790
We are going against a concrete type.
166

167
00:13:28.030 --> 00:13:36.400
So this CustomerService here is a class of this is a concrete type we are not going against an interface.
167

168
00:13:36.730 --> 00:13:39.490
So interfaces are something good to code against.
168

169
00:13:39.640 --> 00:13:44.290
Generally especially in dependency injection because right now with the dependency injection we are
169

170
00:13:44.290 --> 00:13:48.360
expecting an instance of that class, that type to be injected.
170

171
00:13:48.520 --> 00:13:50.990
But now it's going and change.
171

172
00:13:50.990 --> 00:13:55.590
So I'm going to come in here do a right click on that and come to refactor
172

173
00:13:58.470 --> 00:14:03.570
Abstract to interface and I want to name it Customer Service, so I want
173

174
00:14:03.570 --> 00:14:08.590
rename the original class. So do CustomerService
174

175
00:14:08.600 --> 00:14:10.170
Impl. Rename that.
175

176
00:14:10.390 --> 00:14:14.840
And we want to bring that member in.
176

177
00:14:14.870 --> 00:14:20.420
So now we can see that IntelliJ did the refactoring for us. So our implementation of that has been named
177

178
00:14:20.420 --> 00:14:22.060
CustomerServiceImpl.
178

179
00:14:22.160 --> 00:14:29.940
We implement the CustomerService interface. CustomerService interface has that one method getCustomer
179

180
00:14:29.940 --> 00:14:32.000
fromDB.
180

181
00:14:32.040 --> 00:14:37.350
Now lets take a look at CustomerController and you can see the nice job IntelliJ.
181

182
00:14:37.540 --> 00:14:41.250
We are still using the interface here inside the CustomerController.
182

183
00:14:41.280 --> 00:14:45.350
But now we are doing dependency injection of CustomerService
183

184
00:14:45.510 --> 00:14:52.660
inside the controller. So lets go ahead and make sure that it still runs.
184

185
00:14:52.840 --> 00:14:55.110
And now we can see that is in fact running.
185

186
00:14:55.140 --> 00:14:55.830
OK.
186

187
00:14:56.040 --> 00:15:02.280
So now one thing that we can do here is drop the Autowired annotation. So I think it was in Spring
187

188
00:15:02.330 --> 00:15:05.560
4.3 that became optional.
188

189
00:15:05.700 --> 00:15:11.470
Now that we have a constructor and it doesn't matter if it's a hard type or an interface with this buzz.
189

190
00:15:11.760 --> 00:15:16.740
As long as you have one constructor and the properties of the constructor can be resolved by the Spring
190

191
00:15:16.740 --> 00:15:17.750
Framework,
191

192
00:15:17.790 --> 00:15:19.920
it will do the dependency injection for us.
192

193
00:15:19.930 --> 00:15:26.880
Let's go ahead and run that. So now we can see that it does in fact run.
193

194
00:15:26.890 --> 00:15:27.560
OK.
194

195
00:15:27.610 --> 00:15:33.010
So for the reasons that I've outlined here you can see now that we are doing Dependency Injection against
195

196
00:15:33.020 --> 00:15:40.360
an interface through a constructor. So this gives us the most flexibility and is the best in terms of
196

197
00:15:40.840 --> 00:15:45.790
hearing two object oriented principles because we are injecting against the interface so if I want to
197

198
00:15:45.790 --> 00:15:52.630
test this class outside of that hard implementation type I could easily create a Mock up that I could
198

199
00:15:52.630 --> 00:15:58.860
create a test instance of that when I am running that CustomerService implementation.
199

200
00:15:58.900 --> 00:16:01.820
I set it up to be act as a Mock database.
200

201
00:16:02.020 --> 00:16:04.750
It could go against a web service, it could go against a message queue.
201

202
00:16:04.750 --> 00:16:11.380
So we could have scenarios while we are injecting multiple implementations for different use cases
202

203
00:16:11.380 --> 00:16:17.590
within our organization. So it gives us a lot of versatility both at runtime in our production environments.
203

204
00:16:17.590 --> 00:16:25.090
And as the application evolves and for testing it also gives us a lot of versatility and testing because
204

205
00:16:25.090 --> 00:16:31.060
now if I'm testing that CustomerController that's pretty simple if I'm using a JUnit or Mockito. I can
205

206
00:16:31.060 --> 00:16:35.140
easily create a Mock and inject that into test time.
206

207
00:16:35.210 --> 00:16:40.810
And I don't need a full blown integration test or if I'm using Spark I'm a big fan of Spark also that
207

208
00:16:40.810 --> 00:16:42.330
has a very nice mocking framework.
208

209
00:16:42.340 --> 00:16:47.660
I could do that or I could even write my own implementation for a test.
209

210
00:16:47.710 --> 00:16:50.960
So there's a lot of versatility having that interface there.
210

211
00:16:51.220 --> 00:16:56.700
And this here and what I'm showing you here is where you have a private final variable and that's you
211

212
00:16:56.700 --> 00:17:02.810
using an interface and a constructor that is setting that property inside for your dependency injection.
212

213
00:17:03.160 --> 00:17:10.240
That is generally accepted as a best practice when you are doing dependency injection both with Java
213

214
00:17:10.240 --> 00:17:12.690
in general and the Spring Framework.
214

215
00:17:12.700 --> 00:17:17.730
This wraps up my video on dependency injection and the best practices around a dependency injection using the
215

216
00:17:17.740 --> 00:17:20.410
Spring Framework. As you can see
216

217
00:17:20.410 --> 00:17:27.460
my preference is to take a final property, set that up and use a constructor to set that property so
217

218
00:17:27.460 --> 00:17:34.060
you cannot create that object without injecting the dependency and that dependency once it is set it
218

219
00:17:34.060 --> 00:17:34.990
cannot be changed.
219

220
00:17:34.990 --> 00:17:42.460
So this is considered best practice a little maybe a little overly paranoid for some it does lose some
220

221
00:17:42.460 --> 00:17:43.510
flexibility.
221

222
00:17:43.510 --> 00:17:46.630
I've had people ask well where do a constructor.
222

223
00:17:46.660 --> 00:17:49.080
And we are injecting a lot of dependencies.
223

224
00:17:49.200 --> 00:17:52.210
And that's a lot of parameters to inject into the constructor.
224

225
00:17:52.480 --> 00:17:53.370
Yes it is.
225

226
00:17:53.410 --> 00:18:00.010
And if you do have that case and that is a specific use case where you are injecting a number of classes
226

227
00:18:00.400 --> 00:18:04.810
into your class through dependency injection and like wow you have a lot of stuff to inject in your constructor
227

228
00:18:05.170 --> 00:18:06.940
you might want to take a step back though.
228

229
00:18:07.300 --> 00:18:13.030
Maybe this class is doing too much and maybe need to refactor your code because having a lot of properties
229

230
00:18:13.120 --> 00:18:18.700
in a constructor is a code smell because chances are that object is doing more than one thing.
230

231
00:18:18.700 --> 00:18:25.050
So remember a single responsibility principle where your classes should have one function only.
231

232
00:18:25.270 --> 00:18:31.510
If you have a half dozen dependencies being injected into a constructor or setters something doesn't
232

233
00:18:31.510 --> 00:18:34.290
smell right with your code so you should step back and take a look at them.
233

234
00:18:34.510 --> 00:18:40.960
But generally inside the Spring community, the generally accepted principle right now is to use what
234

235
00:18:40.960 --> 00:18:46.540
I showed you to use dependency injection against an interface have that as a final property and inject
235

236
00:18:46.540 --> 00:18:48.360
it through a constructor.
