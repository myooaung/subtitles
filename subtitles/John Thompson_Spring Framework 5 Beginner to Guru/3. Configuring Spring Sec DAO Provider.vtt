WEBVTT
0
1
00:00:04.279 --> 00:00:08.849
Hey folks! John Thompson Spring Framework
Guru. So as my students go through the
1

2
00:00:08.849 --> 00:00:12.269
course, a lot of times, they run into
problems. Something that they did and
2

3
00:00:12.269 --> 00:00:16.289
don't understand and can't find a way
around, then they reach out to me and ask
3

4
00:00:16.289 --> 00:00:22.529
me for help. And I have a student that
ran into a problem today and gave me a
4

5
00:00:22.529 --> 00:00:26.490
the error message but not enough detail
for me to figure out what's going on. So
5

6
00:00:26.490 --> 00:00:31.019
I asked him to upload his project to
GitHub and let me take a look at that
6

7
00:00:31.019 --> 00:00:34.530
way so I can see the complete picture
and troubleshoot this. So what I'm going
7

8
00:00:34.530 --> 00:00:38.460
to step you through today is
troubleshooting this. He's taking my
8

9
00:00:38.460 --> 00:00:42.680
Spring Core course. He's working through
things and he's having problems with
9

10
00:00:42.680 --> 00:00:47.789
beans getting wired up and I'm not sure
why. I have not looked at the
10

11
00:00:47.789 --> 00:00:54.600
code yet. He's just shared the repository
with me. And in this video, we're going to go
11

12
00:00:54.600 --> 00:00:57.980
onto GitHub.
I'll fork it into to my GitHub account,
12

13
00:00:57.980 --> 00:01:03.019
download it, we'll open it up in IntelliJ,
take it, take a look at it,
13

14
00:01:03.019 --> 00:01:07.560
reproduce the error and troubleshoot it
from there. So I I honestly have no idea
14

15
00:01:07.560 --> 00:01:11.159
what's going on. I have not looked at
this code at all. He is following a
15

16
00:01:11.159 --> 00:01:16.350
project in my course, that's on the
Spring Framework, where we build an
16

17
00:01:16.350 --> 00:01:21.439
e-commerce like site, and I'm not sure
where he's at in the course right now.
17

18
00:01:21.439 --> 00:01:27.840
There's a lot of variables at play of
what could be wrong. But then, load it up
18

19
00:01:27.840 --> 00:01:34.049
and take a look and see if we can figure
out what's going on with this. And PS, I
19

20
00:01:34.049 --> 00:01:39.869
want to add to this. What you're about to
see is completely uncensored unedited me
20

21
00:01:39.869 --> 00:01:44.610
fumbling through code toggling back and
forth on different things and I'm
21

22
00:01:44.610 --> 00:01:49.710
showing you my troubleshooting process
so I do get into some evils like cut and
22

23
00:01:49.710 --> 00:01:54.240
paste and cheating from off my own
project to see what I implemented so
23

24
00:01:54.240 --> 00:01:59.070
don't judge and enjoy this raw
uncensored look at me troubleshooting a
24

25
00:01:59.070 --> 00:02:02.119
student's project.
25

26
00:02:02.580 --> 00:02:07.659
Okay so I've asked the student to upload
this project to GitHub. And the first
26

27
00:02:07.659 --> 00:02:12.150
thing I'm going to do is I'm going to go
in and fork it to my own repository. And
27

28
00:02:12.150 --> 00:02:17.410
this gives me a chance to come in and
clone it. I'm going to go ahead and clone
28

29
00:02:17.410 --> 00:02:36.100
this. Copy that over and come over here,
git clone, paste in that URL, so that is
29

30
00:02:36.100 --> 00:02:40.620
there now. Let's take a quick look at it.
30

31
00:02:40.950 --> 00:02:45.310
So the projects down there. So what I
want to do now is jump over to IntelliJ
31

32
00:02:45.310 --> 00:02:51.220
and get that project into IntelliJ and
we'll start taking a look at it. So I'm
32

33
00:02:51.220 --> 00:02:58.510
going to come up here and say new
project from existing sources. And this
33

34
00:02:58.510 --> 00:03:04.140
is the guy that we want. So I'm going to
click OK. It's a Maven project. Click Next
34

35
00:03:04.140 --> 00:03:09.370
and leave all the defaults here. I'm not
too worried about that. And I'm doing
35

36
00:03:09.370 --> 00:03:15.840
some testing with artifactory for my
DevOps course. I do not want that active.
36

37
00:03:16.440 --> 00:03:25.150
So that's going to come through. I need
to select a JDK. I'm running the -40 JDK.
37

38
00:03:25.150 --> 00:03:30.010
I'm out of date. They're up to - one one
one right now so I need to get that
38

39
00:03:30.010 --> 00:03:37.720
fixed up. My own oversight on my
personal system. So now the projects
39

40
00:03:37.720 --> 00:03:43.709
coming up.
IntelliJ is telling me about... that went away.
40

41
00:03:43.709 --> 00:03:48.610
So IntelliJ was complaining about the
VCS not being there. Version control
41

42
00:03:48.610 --> 00:03:55.720
system being git. And let's go in and
run this and see what's going on. So I'm
42

43
00:03:55.720 --> 00:03:59.920
just going to right click. And IntelliJ
say run him. It's going to run the Spring
43

44
00:03:59.920 --> 00:04:05.700
Boot application and let's take a look
see what he's unhappy about.
44

45
00:04:12.730 --> 00:04:20.989
Alright, we blew up. So I'm trying to find this daoAuthentication
45

46
00:04:20.989 --> 00:04:37.130
Provider. It cannot. So a qualifier daoAuthenticationProvider not being found
46

47
00:04:37.130 --> 00:04:47.150
for some reason. So what is that supposed
to be? It's triggering down here. And this
47

48
00:04:47.150 --> 00:04:58.699
guy is failing to get wired up. Take a
little closer at this. And sometimes the
48

49
00:04:58.699 --> 00:05:07.759
errors cascade. Let's scroll over and they
affectionately call it blowing it up
49

50
00:05:07.759 --> 00:05:13.880
because when Java pops like this, there's
quite a bit going on. So ultimately, I
50

51
00:05:13.880 --> 00:05:17.419
can't find UserDetailService. So that
that's core problem. So we're
51

52
00:05:17.419 --> 00:05:23.030
going to take a look here at services. So
this is the service. This is the
52

53
00:05:23.030 --> 00:05:30.740
interface that implements. This looks
like his implementation and he's doing a
53

54
00:05:30.740 --> 00:05:39.919
service. And let's see here, I'm going to
springdatajpa. Let's double check that.
54

55
00:05:39.919 --> 00:05:46.490
I didn't even look at the active profile
so I can use setting that active and to
55

56
00:05:46.490 --> 00:05:52.090
double, just a double check, let's take a
look at the top of stack trace here.
56

57
00:05:53.530 --> 00:05:58.759
Somewhere in the chatter, we can see the
active profiles. You should be able to
57

58
00:05:58.759 --> 00:06:05.690
see them. Oh there we are. Overlooked it.
So that is infact being set. So that's
58

59
00:06:05.690 --> 00:06:10.520
good.
And I am going to guess. Let's take a
59

60
00:06:10.520 --> 00:06:13.780
quick look at this.
60

61
00:06:18.550 --> 00:06:28.460
These are detailsService. So that
should get wired up by type so, for some
61

62
00:06:28.460 --> 00:06:46.430
reason, he's not finding that. Copy
this and see if this makes a difference. So
62

63
00:06:46.430 --> 00:06:52.730
what's happening is this bean is going to
get a name of UserServiceImpl and I
63

64
00:06:52.730 --> 00:06:54.890
would expect it to get wired up by typo.
64

65
00:06:54.890 --> 00:06:58.780
That doesn't seem happening. So I'm going to
give an explicit name of userService.
65

66
00:06:58.780 --> 00:07:03.310
And see if that gets it going.
66

67
00:07:12.970 --> 00:07:29.390
Still not happy here. No qualifying typo. UserDetailsService. So I was
67

68
00:07:29.390 --> 00:07:32.330
looking at userService. So that was
mistaken my part. So let's go back and
68

69
00:07:32.330 --> 00:07:42.370
look at this closer. UserDetailsService.
Click in on this. Where do you live?
69

70
00:07:43.360 --> 00:07:53.870
ahahaha... So that's the problem. So UserDetailsService that is a interface
70

71
00:07:53.870 --> 00:08:01.190
within where we have Spring Security
Core. Now I can't remember what I did
71

72
00:08:01.190 --> 00:08:06.200
in the course for this, to be honest.
Let's take a look at what we're doing
72

73
00:08:06.200 --> 00:08:15.970
here. So that makes sense now. The UserDetailsService is not being wired up.
73

74
00:08:35.560 --> 00:08:43.039
I'm going to cheat and look see what I did
in this project. So I have the source
74

75
00:08:43.039 --> 00:08:48.610
code that the problem is I wrote this
months ago.
75

76
00:08:53.600 --> 00:09:24.870
So UserDetailsService. Taking a look through here. Trying to see how I implemented
76

77
00:09:24.870 --> 00:09:33.450
that. So this UserDetailsService and
copy that and see where I implemented
77

78
00:09:33.450 --> 00:09:35.660
that.
78

79
00:09:51.360 --> 00:09:56.250
So I provided this implementation of him.
79

80
00:09:59.250 --> 00:10:09.670
Where did I put you? Under security.
So this is what he needs to implement and
80

81
00:10:09.670 --> 00:10:16.300
it looks like he missed that. So services
security. Let's take a look at that. I'm going to
81

82
00:10:16.300 --> 00:10:31.210
copy this guy over. Guessing you did not
implement it. Take a quick look here.
82

83
00:10:33.570 --> 00:10:37.720
Nobody did not implement that. So
that's the problem. We're missing that
83

84
00:10:37.720 --> 00:10:41.260
service implementation and that that's
easy enough to add. I'm just going to be
84

85
00:10:41.260 --> 00:10:48.070
consistent with what I did in the course.
And I put him in services security. So
85

86
00:10:48.070 --> 00:10:56.460
let's jump over here. Package.
86

87
00:11:17.850 --> 00:11:23.380
And I am totally cheating here. Assuming
that we can cut and paste everything and
87

88
00:11:23.380 --> 00:11:26.070
life will be good.
88

89
00:11:49.690 --> 00:12:01.280
And as userService is not implementing the
find user by name, so that's important, so
89

90
00:12:01.280 --> 00:12:10.460
I'm going to steal shamelessly for my
other project. Just double check that. In
90

91
00:12:10.460 --> 00:12:25.370
this little Spring Data JPA stuff so we
just need to implement that guy. Now that
91

92
00:12:25.370 --> 00:12:33.800
should work. So he's happy now
and the last thing I need to do is come
92

93
00:12:33.800 --> 00:12:42.920
back over here. And it's important to
name this userDetailsService so that
93

94
00:12:42.920 --> 00:12:57.230
gets picked up. And let's try running
this now. Now that we have an
94

95
00:12:57.230 --> 00:13:01.330
implementation of it, life should be
happy.
95

96
00:13:06.639 --> 00:13:14.620
And what I do rather should implement
UserDetailsService.
96

97
00:13:42.800 --> 00:13:57.380
Change the interface. My mistake here. I forget what I'm doing here. So come in
97

98
00:14:15.830 --> 00:14:19.460
maybe, I just want to do.
98

99
00:14:25.370 --> 00:14:39.650
Alright, double-check this. So user repository. You need to modify this as
99

100
00:14:39.650 --> 00:14:46.550
well. So to add in the findByUserName and that this is a Spring Data
100

101
00:14:46.550 --> 00:14:56.390
JPA,
allows you to dynamically add those. And
101

102
00:14:56.390 --> 00:15:11.260
I come into the repository. What am i
doing?
102

103
00:15:35.780 --> 00:15:53.660
Where would we add on this? Spring Data JPA.
103

104
00:16:11.440 --> 00:16:16.210
That's a guy. Where did I put this guy in?
104

105
00:16:17.170 --> 00:16:22.670
My mistake, looking at the wrong package.
So repo, repositories. Let's see what
105

106
00:16:22.670 --> 00:16:55.400
he's got going on here. There's my
mistake here again. Double check that.
106

107
00:16:55.400 --> 00:17:20.900
UserRepository extends CrudRepository.
Exactly what we want. Okay so
107

108
00:17:20.900 --> 00:17:25.370
we have toUserServiceImpl implements gets all the userRepository returns by
108

109
00:17:25.370 --> 00:17:29.470
back, findByUserName.
109

110
00:17:37.860 --> 00:17:42.060
Now let's see if we can run this guy.
110

111
00:17:53.520 --> 00:17:59.100
Converter. Where were you?
111

112
00:18:11.000 --> 00:18:29.940
So we need to implement this Converter
one more problem. And this is an
112

113
00:18:29.940 --> 00:18:33.510
important Converter because we're
converting over to the Spring Data or
113

114
00:18:33.510 --> 00:18:50.840
Spring Security User. Make sure that's
the right one. userToUserDetails.
114

115
00:18:57.940 --> 00:19:14.600
We don't have a converters class or
package so I'm going to add that. What did I
115

116
00:19:14.600 --> 00:19:18.590
call that class? I just want to be
consistent with what I did in that. So I
116

117
00:19:18.590 --> 00:19:26.620
usually name the class object to target
object.
117

118
00:19:42.059 --> 00:19:47.950
It's going to grab this little guy here.
Shamelessly cut and paste. Do not try
118

119
00:19:47.950 --> 00:20:26.890
this at home. Cut and paste will get you
in trouble. Just a couple things here. Put
119

120
00:20:26.890 --> 00:20:29.940
this into security.
120

121
00:20:56.499 --> 00:21:06.710
So this is another interfaces utilized by
Spring Security and we need to
121

122
00:21:06.710 --> 00:21:10.179
provide an implementation of it.
122

123
00:21:29.609 --> 00:21:34.019
Yeah get him imported.
123

124
00:21:39.220 --> 00:21:50.580
So our user object is wrong also. Aren't
you happy there.
124

125
00:22:00.649 --> 00:22:05.299
I'm going to grab the.. import the wrong user.
125

126
00:22:18.670 --> 00:22:36.230
It's got a couple naming conventions
different there for me, so it's missing a
126

127
00:22:36.230 --> 00:22:48.370
label. So I am going to go steal my
definition.
127

128
00:22:57.570 --> 00:23:05.260
So my User is a little bit different
than his. So I'm going to implement that
128

129
00:23:05.260 --> 00:23:13.990
for for him completely. I am again
stealing shamelessly from the project I
129

130
00:23:13.990 --> 00:23:49.600
already did. His User is here, so we want
to replace this. getEnabled and role
130

131
00:23:49.600 --> 00:24:05.020
is a little bit different. So let's see
what he did there. There's a role. We got
131

132
00:24:05.020 --> 00:24:11.799
a couple other domain objects not there.
And that the problem is he's working
132

133
00:24:11.799 --> 00:24:15.850
out of branch. I'm not quite sure where
he's at and in the course, so I have some
133

134
00:24:15.850 --> 00:24:20.289
objects that are created later in the
course that aren't there yet. But let's
134

135
00:24:20.289 --> 00:24:23.700
go ahead and implement these also.
135

136
00:24:33.799 --> 00:24:37.370
We need this class.
136

137
00:25:42.330 --> 00:25:49.629
We're missing Cart also and I know I'm
positive he adds that later. So I'm going
137

138
00:25:49.629 --> 00:25:53.159
to comment that out for now.
138

139
00:26:04.240 --> 00:26:07.780
Not the prettiest thing I'm doing here
but I'm just trying to get this through
139

140
00:26:07.780 --> 00:26:41.200
this form. Let's see if this runs now. No
property found userName user. So this is
140

141
00:26:41.200 --> 00:26:59.140
getting thrown out by the UserRepository. findByUserName. So what did
141

142
00:26:59.140 --> 00:27:10.330
we change here? So it's saying, it's not
finding a property userName. I have user
142

143
00:27:10.330 --> 00:27:12.930
name here.
143

144
00:27:25.990 --> 00:27:31.550
Okay so it's case difference. username
versus userName. So let's take a closer
144

145
00:27:31.550 --> 00:27:41.780
look at this. There was the problem. So
his implementation is username all
145

146
00:27:41.780 --> 00:27:50.420
lowercase, and we're going to need to to
fix it here. So that's why that was
146

147
00:27:50.420 --> 00:28:05.120
unhappy. So minor differences between
what he implemented and what I had
147

148
00:28:05.120 --> 00:28:14.300
implemented. Let's take a see if we can
run happily now. Of course, we blew up
148

149
00:28:14.300 --> 00:28:22.000
something there. That's dependent. Try it one more time.
149

150
00:28:24.940 --> 00:28:29.000
Luckily Java strongly typed and the
compiler caught that little error for
150

151
00:28:29.000 --> 00:28:38.750
us. It looks like we are up and running
now. So a couple things that were wrong
151

152
00:28:38.750 --> 00:28:43.520
from what we saw and let me recap what
was going on there. I moved around quite
152

153
00:28:43.520 --> 00:28:49.660
a bit and wrongly cut and paste code
from the project I had already
153

154
00:28:49.660 --> 00:28:56.390
established. So that's my bad. Don't do
that at home. So do not cut and paste. You
154

155
00:28:56.390 --> 00:28:59.960
know am a hypocrite for saying that. So
what was going on is we were
155

156
00:28:59.960 --> 00:29:05.330
implementing Spring Security in the
course, and kind of where's this
156

157
00:29:05.330 --> 00:29:11.450
configuration or this all-star about fit.
So the SpringSecConfig is going
157

158
00:29:11.450 --> 00:29:16.730
to be looking for UserDetailsService.
And the UserDetailsService is a Spring
158

159
00:29:16.730 --> 00:29:20.630
Security interface that we need to
implement. So we had to provide an
159

160
00:29:20.630 --> 00:29:26.390
implementation of that UserDetailsService. So here's my implementation of
160

161
00:29:26.390 --> 00:29:36.020
that. Providing that and UserDetailsImpl. That actually ran though.
161

162
00:29:36.020 --> 00:29:43.450
I thought, double check my Impl of it
because I thought UserDetailsImpl
162

163
00:29:43.450 --> 00:29:53.929
would need to be a component. Double
check that, as I go through this. Okay, must
163

164
00:29:53.929 --> 00:30:06.580
be declaring that elsewhere. So that's
got to be declared in the configuration.
164

165
00:30:06.580 --> 00:30:13.970
You guys seen. So this gets wired in and
that's an interface and that was
165

166
00:30:13.970 --> 00:30:19.130
the problem you know this interface
was not implemented. So when you're
166

167
00:30:19.130 --> 00:30:23.750
providing a daoAuthenticationProvider for Spring Security, you're
167

168
00:30:23.750 --> 00:30:27.020
expected to provide an implementation of
the UserDetailsService, which
168

169
00:30:27.020 --> 00:30:32.390
implements that, and then, the next
interface you need to implement is also
169

170
00:30:32.390 --> 00:30:37.940
UserDetails. And what this does is a
couple common interfaces that you can
170

171
00:30:37.940 --> 00:30:47.419
implement. We had to add a converter to
go from our User JPA type to the User
171

172
00:30:47.419 --> 00:30:52.700
Details type that Spring Security wants.
So it allows us to do the custom mapping
172

173
00:30:52.700 --> 00:30:58.600
which happens in that map converter
object that we added. So what this does,
173

174
00:30:58.600 --> 00:31:06.679
it takes our User, which is a our JPA
object domain object and converts it
174

175
00:31:06.679 --> 00:31:13.940
over to a UserDetails object. And this object again implements an
175

176
00:31:13.940 --> 00:31:21.830
interface provided by Spring Security so
that we can map our JPA hard type
176

177
00:31:21.830 --> 00:31:27.980
to this type and then Spring Security
happily works with that. Okay, I've made
177

178
00:31:27.980 --> 00:31:32.419
all the changes and the last thing I
want to do is come in and get these
178

179
00:31:32.419 --> 00:31:40.549
committed up to GitHub. So what I'm going
to do is come in here Git, commit
179

180
00:31:40.549 --> 00:32:01.080
directory,
and provided... commit and push.  I'm
180

181
00:32:01.080 --> 00:32:06.000
going to go ahead and ignore the warning
from IntelliJ. And we are pushing up
181

182
00:32:06.000 --> 00:32:11.930
there. So you need to give it my password.
182

183
00:32:13.310 --> 00:32:26.490
That is successful and I'm going to jump over
here, so that is done there. And what
183

184
00:32:26.490 --> 00:32:34.610
I want to do is let him know about it. So
I'll give him a pull request.
184

185
00:32:46.640 --> 00:32:51.290
And I'm going to email him what's going on,
185

186
00:32:52.040 --> 00:33:01.380
after I record this video. And that is
done. So now, he's going to get a pull
186

187
00:33:01.380 --> 00:33:05.400
request and see my code changes of what
I implemented. And that's my dog chickens
187

188
00:33:05.400 --> 00:33:11.070
said, Thank You Jake. He'll be able to see
a working copy. Okay, so what happened
188

189
00:33:11.070 --> 00:33:15.450
there I can see how he messed up what
was happening. The UserService and User
189

190
00:33:15.450 --> 00:33:19.860
DetailsService very very similar naming
conventions and I overlooked it
190

191
00:33:19.860 --> 00:33:22.920
initially when I was looking at you
could see that in in the preceding video
191

192
00:33:22.920 --> 00:33:27.510
until I went oh UserDetailsServices. So
I came into this code and because I
192

193
00:33:27.510 --> 00:33:32.100
wrote this over a year ago, this for the
software for this course so I forgot
193

194
00:33:32.100 --> 00:33:38.520
what I'd done and went in and found that
what he had not implemented was the User
194

195
00:33:38.520 --> 00:33:42.380
DetailsService and it's how Spring
Security works when we're setting up a
195

196
00:33:42.380 --> 00:33:47.970
DaoAuthenticationProvider for Spring
Security. Spring Security provides a
196

197
00:33:47.970 --> 00:33:51.810
couple of interfaces that we have to
provide implementations for, that allows
197

198
00:33:51.810 --> 00:33:56.490
us to use a DaoAuthenticationProvider and go out and get the data and
198

199
00:33:56.490 --> 00:34:00.270
then map it backend Spring Security
yet. I actually like the way the guy in
199

200
00:34:00.270 --> 00:34:05.280
implemented. It's pretty slick and very
versatile to use, but when you're working
200

201
00:34:05.280 --> 00:34:07.820
with Spring Security in the Spring
Framework you have to provide those
201

202
00:34:07.820 --> 00:34:12.390
implementations which was not provided
here and that's why things were blowing
202

203
00:34:12.390 --> 00:34:16.740
up because he was starting up and we
were asking for the UserDetails
203

204
00:34:16.740 --> 00:34:21.360
Service. And there wasn't one provided.
And that's what we essentially did is to
204

205
00:34:21.360 --> 00:34:26.270
provide that implementation so Spring
Security could start working.
