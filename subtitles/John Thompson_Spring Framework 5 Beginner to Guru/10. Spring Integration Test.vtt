WEBVTT
0
1
00:00:04.370 --> 00:00:09.179
Alright, in this video we are gonna
take a look at Spring Integration Test.
1

2
00:00:09.179 --> 00:00:13.710
So far we've been looking at pure unit
tests which run very fast. In this
2

3
00:00:13.710 --> 00:00:16.949
example we are going to bring up the
Spring Context. Actually we'll bring up
3

4
00:00:16.949 --> 00:00:21.570
the context and the embedded database for
our application and we are going to
4

5
00:00:21.570 --> 00:00:26.490
create an integration test. And what I
wanna do is we created that dynamic
5

6
00:00:26.490 --> 00:00:31.470
finder defined by description in Spring
Data and let's test that and make sure that
6

7
00:00:31.470 --> 00:00:35.489
it's working correctly. So I have the
class up there and what I wanna do is
7

8
00:00:35.489 --> 00:00:41.610
come over here and I'm gonna do an
alt+enter and we will say Create Test.
8

9
00:00:41.610 --> 00:00:48.719
And by convention, we want to name a IT
for integration test and we'll go ahead
9

10
00:00:48.719 --> 00:00:54.899
and let in a setUp and we wanna test
this findByDescription(). So well let
10

11
00:00:54.899 --> 00:01:00.539
IntelliJ create that for us. Say OK and yes we wanna add that to
11

12
00:01:00.539 --> 00:01:06.510
Git. Now what we need to do here is we
want to annotate the class with @RunWith
12

13
00:01:06.510 --> 00:01:14.180
and we are gonna use the SpringRunner. You can say dot class there and
13

14
00:01:14.180 --> 00:01:20.310
we could do the @SpringBootTest but
we're gonna use the slice and we'll
14

15
00:01:20.310 --> 00:01:26.310
do the @DataJpaTest and that will bring
up an embedded database and it's also
15

16
00:01:26.310 --> 00:01:34.290
gonna configure Spring Data JPA for
us. And so now can come in. We're gonna
16

17
00:01:34.290 --> 00:01:38.430
take the UnitOfMeasureRepository
and we're gonna tell Spring to autowire
17

18
00:01:38.430 --> 00:01:45.090
it. So now Spring is gonna do
dependency injection on our integration
18

19
00:01:45.090 --> 00:01:49.079
test here. So the Spring Context will
start up and we will get an instance of
19

20
00:01:49.079 --> 00:01:56.700
the UnitOfMeasureRepository, inject it
into this. Now remember that it returns an
20

21
00:01:56.700 --> 00:02:03.079
Optional of UnitOfMeasure.
21

22
00:02:05.060 --> 00:02:11.600
And let's take a look at the data.sql.
Let's get a teaspoon, make sure that we're getting
22

23
00:02:11.600 --> 00:02:21.640
a teaspoon loaded. So I'm going to copy that
value over and we'll say by that
23

24
00:02:21.640 --> 00:02:28.420
and we want to assertEquals. I'll say teaspoon,
24

25
00:02:28.540 --> 00:02:36.890
and we'll say get and now we want to get
the description. So pretty simple test
25

26
00:02:36.890 --> 00:02:41.810
here. We're gonna ask the repository
to look up by teaspoon and we're gonna
26

27
00:02:41.810 --> 00:02:46.340
take the optional. We had kind of run
the get and we can see that IntelliJ is
27

28
00:02:46.340 --> 00:02:50.870
running this and if I was writing
this in a class, I'd definitely put more
28

29
00:02:50.870 --> 00:02:54.830
safety around manipulating an optional. But here if I don't get the value the
29

30
00:02:54.830 --> 00:03:00.560
test is gonna fail either way. So
let's go ahead and run this now. And now
30

31
00:03:00.560 --> 00:03:04.400
you can see we get a lot of chatter in
the window there because the Spring
31

32
00:03:04.400 --> 00:03:09.650
Context is coming up. And you can see
that we do have a passing test. And we
32

33
00:03:09.650 --> 00:03:14.120
can see right here we have a Hibernate
select statement where we did run
33

34
00:03:14.120 --> 00:03:18.790
against the database. So if I were to
change this, I'm gonna say teaspoons
34

35
00:03:18.790 --> 00:03:26.780
and we'll run it again and you can see
again the whole Spring context is
35

36
00:03:26.780 --> 00:03:33.560
coming up and now our test is failing. But I do wanna show you one additional
36

37
00:03:33.560 --> 00:03:43.730
feature here. Let's just go ahead and
copy this, and let's change that to Cup
37

38
00:03:43.730 --> 00:03:50.359
and I wanna make sure we just had a
singular Cup with the capital C. So now come
38

39
00:03:50.359 --> 00:03:59.120
over here. So now, the first one is gonna test for Teaspoon, Teaspoon then Cup
39

40
00:03:59.120 --> 00:04:04.910
and Cup. So we're just gonna test to
make sure Cup is there and what I wnna
40

41
00:04:04.910 --> 00:04:09.350
do is I'm gonna come up here to
the top now and say run all the tests
41

42
00:04:09.350 --> 00:04:15.050
within this class. And now the Spring
Context is gonna come up once and you
42

43
00:04:15.050 --> 00:04:19.370
can see over here in the bottom
left-hand side,
43

44
00:04:19.370 --> 00:04:24.860
the findByDescription() took 315
milliseconds to start up while 
44

45
00:04:24.860 --> 00:04:30.770
find by Cup only took seven milliseconds. And
that's because the Spring Context was
45

46
00:04:30.770 --> 00:04:35.300
still available and we didn't have to
reload it for that second test method.
46

47
00:04:35.300 --> 00:04:39.320
Now I do wanna point out, let's say
that I had some type of bad operation
47

48
00:04:39.320 --> 00:04:45.020
here, and I was doing something that
changed the data and I don't want to
48

49
00:04:45.020 --> 00:04:50.120
contaminate my other test. So now I'm
gonna mark that as @DirtiesContext and
49

50
00:04:50.120 --> 00:04:53.650
let's go ahead and run out again here.
I'm gonna show you what happens
50

51
00:04:53.650 --> 00:04:58.280
because now we've got the Spring Context
starting up once, and now see it's
51

52
00:04:58.280 --> 00:05:02.780
starting up a second time. So
actually the context is up but it did a
52

53
00:05:02.780 --> 00:05:07.340
reload there and because of that @DirtiesContext and you can see it took a little
53

54
00:05:07.340 --> 00:05:13.880
bit longer but still pretty quick. And I'm gonna get rid of that because
54

55
00:05:13.880 --> 00:05:18.550
we really don't need that and I'm gonna check it in just like this for you.
