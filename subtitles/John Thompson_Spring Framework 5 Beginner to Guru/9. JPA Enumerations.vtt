WEBVTT
0
1
00:00:04.580 --> 00:00:09.030
Alright, in this example we are going
to look at setting up the enumeration
1

2
00:00:09.030 --> 00:00:13.799
and you can see in our little data model,
I have a difficulty rating for the
2

3
00:00:13.799 --> 00:00:18.930
Recipe and we just said easy, moderate or
hard and I defined it right over here in
3

4
00:00:18.930 --> 00:00:25.980
the JPL language. I'm going to copy that
to my clipboard and toggle over to
4

5
00:00:25.980 --> 00:00:29.910
IntelliJ and we're going to set up that
enumeration. So we want Recipe to have a
5

6
00:00:29.910 --> 00:00:36.059
property of difficulty from that
enumeration. So let's jump over to
6

7
00:00:36.059 --> 00:00:41.640
IntelliJ and I am going to go in and I'm
going to use the domain. Some people like
7

8
00:00:41.640 --> 00:00:47.250
to do a separate package for enums. In
this case I think it's okay. Some people
8

9
00:00:47.250 --> 00:00:56.610
might argue with me that. So I'm going to
call the enum Difficulty and we are
9

10
00:00:56.610 --> 00:01:01.890
going to add that to Git for you guys. So
nothing too complex here. We have three
10

11
00:01:01.890 --> 00:01:07.650
different values for Difficulty and next
we need to come over to our Recipe class
11

12
00:01:07.650 --> 00:01:18.689
and add that in. Let's do that under
image and we'll go in and add in a
12

13
00:01:18.689 --> 00:01:25.549
getter and setter. And that's just my
personal style. It is when I'm adding in new
13

14
00:01:25.549 --> 00:01:30.840
properties and I just like to add them
in into the class at the bottom of
14

15
00:01:30.840 --> 00:01:35.130
whatever was existing and then do the
same with the getters and setters. From
15

16
00:01:35.130 --> 00:01:41.280
my own experience, it seems as you evolve
your data model and POJOs like this, that
16

17
00:01:41.280 --> 00:01:46.500
seems to keep the code cleanest and
least confusing but that's my personal
17

18
00:01:46.500 --> 00:01:51.570
opinion. I don't know if there's an official
specification on that or not. So now we
18

19
00:01:51.570 --> 00:01:59.460
have the enum there and what we need to do
is set up an annotation on that and you can
19

20
00:01:59.460 --> 00:02:04.080
see that IntelliJ is bringing up Enumerated from javax persistence
20

21
00:02:04.080 --> 00:02:15.440
and let's take a look here. And let's get
this filtered down a little bit more and
21

22
00:02:15.440 --> 00:02:21.360
we can see in javax persistence, we have
ORDINAL or STRING. Now this is very
22

23
00:02:21.360 --> 00:02:26.120
important because we do have the two
types. Let's see if I can get that filter down.
23

24
00:02:26.120 --> 00:02:32.160
There we go. That's better. We can set the
enum type to ORDINAL or STRING and this
24

25
00:02:32.160 --> 00:02:34.880
is important about how it gets persisted
in the database.
25

26
00:02:34.880 --> 00:02:40.830
ORDINAL is the default and that's
going to get, if you don't specify
26

27
00:02:40.830 --> 00:02:45.390
anything there that is what gets
taken and what's going to happen in the
27

28
00:02:45.390 --> 00:02:50.550
database if we do use ORDINAL. Let's
bring up difficulty again. It will get
28

29
00:02:50.550 --> 00:02:57.360
persisted as one two and three and that
is the default behavior. Now if we use
29

30
00:02:57.360 --> 00:03:01.800
STRING, it's going to get that String
value of the enum and persisted as a
30

31
00:03:01.800 --> 00:03:07.590
String. And this is important because you
can come in and change this and you want
31

32
00:03:07.590 --> 00:03:15.890
to do something like say kind of hard. Now if you did that on the fly like that,
32

33
00:03:15.890 --> 00:03:21.300
we'll make it look a little bit better
with underscores. If you did it on the fly like,
33

34
00:03:21.300 --> 00:03:26.760
that let's say you had an existing
database. Now anything that you had in
34

35
00:03:26.760 --> 00:03:34.530
there and the hard value just changed
from three to four. So that's a not
35

36
00:03:34.530 --> 00:03:39.239
a behavior that we want. So trick is, if
you can go in and use the String value
36

37
00:03:39.239 --> 00:03:44.370
because the String values are going to
survive. So it you know if we're using
37

38
00:03:44.370 --> 00:03:48.780
the String obviously hard isn't going to
change but if we're persisting the
38

39
00:03:48.780 --> 00:03:53.790
number, and we insert a value into the
enum like I just did there, now any
39

40
00:03:53.790 --> 00:03:57.360
existing data that we have is messed up
and it's going to need to be addressed.
40

41
00:03:57.360 --> 00:04:02.730
And because the enum ordinal position
just change. So let's come back over here
41

42
00:04:02.730 --> 00:04:09.450
and I am going to specify STRING. So
specify a  String value and that is
42

43
00:04:09.450 --> 00:04:16.169
overriding the default behavior of
enumerations. So just a quick recap of
43

44
00:04:16.169 --> 00:04:19.919
what we did here. As I went in and I created a new enum
44

45
00:04:19.919 --> 00:04:25.409
for difficulty. It's got four properties
on it. EASY, MODERATE, KIND_OF_HARD and
45

46
00:04:25.409 --> 00:04:32.099
HARD and then on Recipe, I added in a new
property and also added in getters and
46

47
00:04:32.099 --> 00:04:37.830
setters for it and I'm using the
Enumerated type from javax persistence,
47

48
00:04:37.830 --> 00:04:43.650
that annotation and overriding the
default to use an EnumType of STRING
48

49
00:04:43.650 --> 00:04:49.789
which is going to store the String value
of the enum in the database.
