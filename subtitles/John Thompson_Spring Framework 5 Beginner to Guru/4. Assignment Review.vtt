WEBVTT
0
1
00:00:09.530 --> 00:00:15.599
Okay, so let's go ahead and step through
the assignment. In the notes for the
1

2
00:00:15.599 --> 00:00:21.090
course, you'll have a link to my GitHub
repository. The repository is 
2

3
00:00:21.090 --> 00:00:26.900
spring-boot-mongodb, so nothing to carefully
creative here. It's a pretty fairly generic
3

4
00:00:26.900 --> 00:00:32.189
MongoDB application, using Spring Boot.
And you should have gone check that out.
4

5
00:00:32.189 --> 00:00:37.050
Now, I already have, I don't think I need
to show you how to use GitHub. So here's
5

6
00:00:37.050 --> 00:00:40.739
the project running inside of IntelliJ,
so I already have it mounted up on
6

7
00:00:40.739 --> 00:00:45.300
IntelliJ. Let's go ahead and start
this guy up. Before we do that, I'm gonna
7

8
00:00:45.300 --> 00:00:53.280
jump over the command window, and I am gonna clear
this... so another command, handy command,
8

9
00:00:53.280 --> 00:00:58.340
is to see Docker logs.
docker logs will show you information
9

10
00:00:58.340 --> 00:01:03.570
output to the console. So anything that
goes standard out. We'll do come to docker
10

11
00:01:03.570 --> 00:01:10.799
logs. And let me show you one other
things, so if I do docker ps, so I already
11

12
00:01:10.799 --> 00:01:15.540
have my Mongo instance running, just like
I showed you in the last section there.
12

13
00:01:15.540 --> 00:01:22.080
So it is forwarding port on the
localhost 27017 to the container
13

14
00:01:22.080 --> 00:01:27.960
port of 27017, so this is up. It's
running. Everything's happy with that. So
14

15
00:01:27.960 --> 00:01:36.270
now, if I come up to docker logs, and the
-f is follow. So it's easy for me to
15

16
00:01:36.270 --> 00:01:40.110
remember, when I'm like using a Linux
command, if I want tail log, so I can do
16

17
00:01:40.110 --> 00:01:45.869
the tail command -f. This works just
like that, so I'm gonna do Docker logs
17

18
00:01:45.869 --> 00:01:53.070
and the -f and then I'm using the
names, so you can see that bbd39
18

19
00:01:53.070 --> 00:01:58.290
matches up to the name, so I'll
highlight that here, so this value here,
19

20
00:01:58.290 --> 00:02:02.909
actually matches up to that value, so
that's the container ID, so I could also
20

21
00:02:02.909 --> 00:02:07.829
use this compassionate_ritchie, which is
the container name. So if you don't
21

22
00:02:07.829 --> 00:02:12.960
specify a name, Docker will make one up
and actually comes up with some
22

23
00:02:12.960 --> 00:02:18.000
I am using ones at times, so apparently, our
Mongo database container is
23

24
00:02:18.000 --> 00:02:23.880
compassionate_ritchie. So I'm gonna go and
start tailing those logs. I'm just
24

25
00:02:23.880 --> 00:02:27.570
gonna hit under a few times. It says
that there's one connection open. I'm not
25

26
00:02:27.570 --> 00:02:31.880
quite sure what it's become a crumb be
honest. So, let's jump over here to
26

27
00:02:31.880 --> 00:02:39.480
IntelliJ. Now I can go to the terminal
window in IntelliJ, and just in case
27

28
00:02:39.480 --> 00:02:48.560
that you're not familiar with IntelliJ,
I'm gonna go mvn spring-boot:run
28

29
00:02:48.560 --> 00:02:52.950
and this will run the Spring Boot
application through Maven. So if you
29

30
00:02:52.950 --> 00:02:57.150
don't have IntelliJ and you do have
Maven installed, and have brought in this
30

31
00:02:57.150 --> 00:03:02.160
application, you'll be able to run that.
So now, we can see down there at the
31

32
00:03:02.160 --> 00:03:07.680
bottom of screen, the Tomcat has started.
Its on port 8080, and now if I come back
32

33
00:03:07.680 --> 00:03:13.530
over here to the console, we can see that
I do in fact, have an another database
33

34
00:03:13.530 --> 00:03:24.330
connection to Mongo. So let's come over
here and go into Chrome. I have this
34

35
00:03:24.330 --> 00:03:30.180
here and I was doing some testing, so
it's already up, so new product, so I can
35

36
00:03:30.180 --> 00:03:42.150
click on that, My New Product. I get a
dollar, some url, and now I'm gonna
36

37
00:03:42.150 --> 00:03:49.940
click on Submit. And we can see that it's
come back and it's got a product Id.
37

38
00:03:49.940 --> 00:03:57.840
I'm gonna go back to this. If I go to
that, now I can see that product is
38

39
00:03:57.840 --> 00:04:10.560
there. I can come in and edit this. Will say
a new Product 33, submit, so now if I come
39

40
00:04:10.560 --> 00:04:18.210
back, I'll also see that on the listing.
So new Product 33. So that is displaying
40

41
00:04:18.210 --> 00:04:22.540
and working okay. I just wanna point
out,
41

42
00:04:22.540 --> 00:04:26.770
jumping back over here to IntelliJ, this
is a kind of a quick and dirty
42

43
00:04:26.770 --> 00:04:32.200
application. Just meant to do some CRUD
operations with MongoDB. Definitely not
43

44
00:04:32.200 --> 00:04:38.470
the definitive resource on MongoDB, but
it is a working example. Now I wanna
44

45
00:04:38.470 --> 00:04:44.050
point out the way that Spring Boot is
working, so if you notice, I don't, I'm not
45

46
00:04:44.050 --> 00:04:50.110
overriding any properties at all. So I am
purely using the Spring Boot defaults. If
46

47
00:04:50.110 --> 00:04:56.290
I come in here, so then InteliJ's 
intellisense
47

48
00:04:56.290 --> 00:05:00.790
shows us a number of things that we can
override. So if I need to override any of
48

49
00:05:00.790 --> 00:05:06.580
those, I could do so here, with these
property settings in IntelliJ. So number
49

50
00:05:06.580 --> 00:05:12.250
of things that we can do, I am not using
the embedded MongoDB. I am using peer
50

51
00:05:12.250 --> 00:05:18.820
MongoDB, so these are kicking in. And
again, we're using the sensible defaults.
51

52
00:05:18.820 --> 00:05:24.070
So, if for some reason, I had multiple
Mongo instances running on my system, I
52

53
00:05:24.070 --> 00:05:28.810
could actually add in, like a different
port mapping to go to the other port of
53

54
00:05:28.810 --> 00:05:33.250
Mongo. So again, this is pretty handy how
Spring Boot works. Knowing that, the
54

55
00:05:33.250 --> 00:05:38.140
standard defaults of MongoDB its already
pre-wired for that, so I didn't have to
55

56
00:05:38.140 --> 00:05:42.430
do anything. It was actually a bit more
work creating this little MongoDB
56

57
00:05:42.430 --> 00:05:48.040
application, than it was to get it
actually connect to Mongo DB running
57

58
00:05:48.040 --> 00:05:52.230
inside the Docker container on my
localhost.
