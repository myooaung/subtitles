WEBVTT
0
1
00:00:04.250 --> 00:00:09.480
Alright. In this video, we are gonna
introduce you to MapStruct and that's
1

2
00:00:09.480 --> 00:00:13.679
one of my favorite little libraries.
Essentially, what MapStruct is, it's a
2

3
00:00:13.679 --> 00:00:18.150
code generator for Java and it's gonna
help you map beans. It's gonna help
3

4
00:00:18.150 --> 00:00:21.840
reduce a lot of the coding for type
conversions and it makes it really
4

5
00:00:21.840 --> 00:00:26.310
really easy. So effectively, you just
declare interface, and through that
5

6
00:00:26.310 --> 00:00:29.699
interface, you can configure that mapping
between two different types or two
6

7
00:00:29.699 --> 00:00:34.710
different Java beans. And now that we're
in the section on REST Services, a real
7

8
00:00:34.710 --> 00:00:40.050
common use case is to take your domain
objects and expose that data using  DTOs
8

9
00:00:40.050 --> 00:00:46.379
or Data Transfer Objects. You can expose
the domain object directly over the
9

10
00:00:46.379 --> 00:00:51.030
RESTful interface. But from experience,
usually this net will work out for small
10

11
00:00:51.030 --> 00:00:54.899
projects. But as you get into the larger
enterprise type projects, you're
11

12
00:00:54.899 --> 00:00:59.760
getting probably transition to DTOs at
some point. I've seen it time and time
12

13
00:00:59.760 --> 00:01:04.049
again, where you think you can cut down a
little code and expose that POJO from
13

14
00:01:04.049 --> 00:01:10.170
Hibernate directly on the interface. But
chances are, your projects can get
14

15
00:01:10.170 --> 00:01:13.619
a little more complicated and you're no
longer gonna expose that data type
15

16
00:01:13.619 --> 00:01:20.640
directly on your REST interface. So MapStruct
was released in June of 2013.
16

17
00:01:20.640 --> 00:01:26.610
A guy named Gunnar Morling is the founder.
He's been really driving it. He's also a
17

18
00:01:26.610 --> 00:01:31.200
Red Hat Engineer works on the Hibernate
Validator project and he's also getting
18

19
00:01:31.200 --> 00:01:36.689
involved, they have them listed as a Spec
Lead of the Bean Validation 2.0 project.
19

20
00:01:36.689 --> 00:01:43.140
That's a new project coming out in
helping us do validations. So, that is not
20

21
00:01:43.140 --> 00:01:45.960
released yet but they are doing some
interesting stuff over there.
21

22
00:01:45.960 --> 00:01:50.880
A lot like Project Lombok, we've already
seen in the course MapStruct is gonna
22

23
00:01:50.880 --> 00:01:57.390
be an annotation based processor so it
hooks into the Java compiler for us. And
23

24
00:01:57.390 --> 00:02:02.759
effectively what we do is we'll declare
interfaces for MapStruct and then
24

25
00:02:02.759 --> 00:02:09.060
MapStruct is gonna use that data to
build classes at runtime for us. So we
25

26
00:02:09.060 --> 00:02:14.010
declare the interface MapStruct will
produce the Java code for us.
26

27
00:02:14.010 --> 00:02:19.300
Now, there's a number of different
mappers out there and this is a little
27

28
00:02:19.300 --> 00:02:24.190
benchmark that we can look at. So
obviously, the fastest way is gonna
28

29
00:02:24.190 --> 00:02:28.450
be manual and we already looked at doing
manual type conversions before in this
29

30
00:02:28.450 --> 00:02:32.650
course. But Selma and MapStruct, they're
pretty close in terms of performance.
30

31
00:02:32.650 --> 00:02:38.650
There's not a huge difference there. 
JMapper is pretty good as well. And these
31

32
00:02:38.650 --> 00:02:42.790
are different options and probably the
one that's been around the longest is
32

33
00:02:42.790 --> 00:02:47.380
Dozer. But you can see that it's got a
relatively poor performance compared to
33

34
00:02:47.380 --> 00:02:52.480
the others. So, I haven't used a lot of
the others. I've used Dozer in the past,
34

35
00:02:52.480 --> 00:02:57.100
but it's been a long time that projects
and I think they have really done a
35

36
00:02:57.100 --> 00:03:01.840
release in probably four years, if I
remember. It's project is kind of a dead
36

37
00:03:01.840 --> 00:03:05.620
project. But you'll still see it out
there in legacy code. I have not
37

38
00:03:05.620 --> 00:03:10.030
personally used Selma. I've heard good things
about it. I do like MapStruct because it
38

39
00:03:10.030 --> 00:03:14.050
is rather feature work rich and it works
pretty well. So from a performance
39

40
00:03:14.050 --> 00:03:17.590
standpoint, there's really not a huge
reason to go one direction or the other.
40

41
00:03:17.590 --> 00:03:22.930
If you really need that raw performance,
you do wanna do a manual process
41

42
00:03:22.930 --> 00:03:26.590
that's where you can really tweak the
performance rather than using something
42

43
00:03:26.590 --> 00:03:31.690
that's gonna generate code for you.
Now let's take a look at an example. So
43

44
00:03:31.690 --> 00:03:35.770
this is right off the MapStruct
website and we have two classes. We have
44

45
00:03:35.770 --> 00:03:44.500
a Car class and a CarDto. And really, we
wanna map between these. And here, you
45

46
00:03:44.500 --> 00:03:48.760
can see that down on the bottom there
that interface so that's gonna be the
46

47
00:03:48.760 --> 00:03:53.890
mapper that we declare. And you can see
there on the bottom line, we have
47

48
00:03:53.890 --> 00:03:59.290
the mapping source numberOfSeats and
seatCount. So that's how we map up the
48

49
00:03:59.290 --> 00:04:06.220
two. And notice that they're not doing
make and or type. So we're gonna get some
49

50
00:04:06.220 --> 00:04:11.620
when the names do match. It's gonna try to do that type conversion for us,
50

51
00:04:11.620 --> 00:04:16.750
based on the matching the names. But here,
we have a numberOfSeats on one class and
51

52
00:04:16.750 --> 00:04:21.400
seatCount on the other, and we wanna
make that mapping manually. So when the
52

53
00:04:21.400 --> 00:04:26.189
property names are different, that's when
we definitely have to go out and declare.
53

54
00:04:26.189 --> 00:04:33.430
Now to take a look at how this is used,
you can see here we have a unit test. I
54

55
00:04:33.430 --> 00:04:37.750
put the interface above there for
reference but the unit test. We create a
55

56
00:04:37.750 --> 00:04:44.379
new Car, then we wanna create or get a CarDto. And from the convenience method, we
56

57
00:04:44.379 --> 00:04:48.490
can do a CarMapper get an instance. And
that's gonna declare an instance for
57

58
00:04:48.490 --> 00:04:52.300
us and do the type conversion for us. So
its kind of a nice nice little
58

59
00:04:52.300 --> 00:04:56.620
convenience method there, that they're
using in the when clause of the unit test.
59

60
00:04:56.620 --> 00:05:03.370
And then, you can see that they had the
standard assertions after that. Now a few
60

61
00:05:03.370 --> 00:05:08.110
common questions. Can we use MapStruct
with Project Lombok? Yes, but you need to
61

62
00:05:08.110 --> 00:05:16.180
be using MapStruct 1.2 or higher, and
then, also project Lombok 1.16.14 or
62

63
00:05:16.180 --> 00:05:23.590
higher. And I just peaked and we are on 
1.16.17 or 16 right now, so we are beyond
63

64
00:05:23.590 --> 00:05:27.310
that. We're using a Spring Boot project
that we are in this course. So we are
64

65
00:05:27.310 --> 00:05:32.259
good to go there and we just need to add
in to our project the dependency for MapStruct.
65

66
00:05:32.259 --> 00:05:38.409
Then, is it compatible with IntelliJ
and Eclipse? Yes, it is. You don't need it,
66

67
00:05:38.409 --> 00:05:42.190
but you there are plugins for both IDEs
that does give you some nice
67

68
00:05:42.190 --> 00:05:46.779
functionality and I'll probably install
the plug-in for myself. The one for
68

69
00:05:46.779 --> 00:05:52.300
Eclipse has been out for some time, but
the one for IntelliJ just came out.
69

70
00:05:52.300 --> 00:05:57.699
I'm recording this in September of 2017
so that I think it was just released in
70

71
00:05:57.699 --> 00:06:02.710
August. But barely a month old. Java 8 Streams are they supported?
71

72
00:06:02.710 --> 00:06:12.219
Yes, this is a new feature in MapStruct
1.2 so or higher. You know, just a quick
72

73
00:06:12.219 --> 00:06:18.000
note about MapStruct 1.2, we are
currently on a candidate release to
73

74
00:06:18.000 --> 00:06:26.889
1.2.0.CR2 was released on August 28th
2017. This is supposed to be the last one.
74

75
00:06:26.889 --> 00:06:32.289
And the chatter in the project right now
is that, that's gonna go GA any time
75

76
00:06:32.289 --> 00:06:35.889
now. So, as soon as it does, I'll be
updating the source code. But CR2
76

77
00:06:35.889 --> 00:06:39.180
releases are pretty darn stable. I've
used it
77

78
00:06:39.180 --> 00:06:46.020
passed. That's a probably production
quality at this point, so I wouldn't be
78

79
00:06:46.020 --> 00:06:49.650
afraid to use it for a major project at
this point. Like I said, the official
79

80
00:06:49.650 --> 00:06:55.110
release and the final release should be
any day now. It might even be released
80

81
00:06:55.110 --> 00:06:58.970
before I have a chance to publish this
video.
