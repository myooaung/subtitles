WEBVTT
1

00:00:00.000  -->  00:00:04.110
In this video we are gonna be taking a
look at Project Lombok. We've already

2

00:00:04.110  -->  00:00:07.290
looked at it a little bit in the course.
We're gonna get into a little more in

3

00:00:07.290  -->  00:00:13.170
depth in this section and as I was
researching this video I discovered the

4

00:00:13.170  -->  00:00:18.180
island of Java. That's what Java, the
programming language, is actually named

5

00:00:18.180  -->  00:00:23.340
after. So Java is an island in Indonesia.
Looks absolutely beautiful there. I've

6

00:00:23.340  -->  00:00:27.630
never been there personally. The closest
I've come as Guam. So this is a beautiful

7

00:00:27.630  -->  00:00:35.760
island and just to the east of it is the
island of Lombok. So they are very close

8

00:00:35.760  -->  00:00:41.430
to each other. Here's a little map that
you can see the island of Java and then

9

00:00:41.430  -->  00:00:49.020
the little red dot that is actually the
island of Lombok. So Lombok the project

10

00:00:49.020  -->  00:00:54.780
was started sometimes slightly before
2009. I said Lombok is a name of a

11

00:00:54.780  -->  00:01:00.809
island in Indonesia and Lombok also is
Indonesian for chilli I guess and if you

12

00:01:00.809  -->  00:01:04.680
look at the Project Lombok website
you'll see that they have a little tag

13

00:01:04.680  -->  00:01:08.729
line that says spicing up your Java. So
interesting how they worked everything

14

00:01:08.729  -->  00:01:15.810
together there. Now Lombok itself what it
is doing it hooks into a annotation

15

00:01:15.810  -->  00:01:23.040
process or API. So this allows... so I'll
hook into the java compiler process that takes the

16

00:01:23.040  -->  00:01:28.740
raw source code, passes it to Lombok
which will actually perform code

17

00:01:28.740  -->  00:01:33.329
generation for us.
So it allows these Lombok and the

18

00:01:33.329  -->  00:01:39.000
workings to enhance Java code so at the
end it produces a completely compiled

19

00:01:39.000  -->  00:01:44.399
Java class. You can see under target
classes, you can go in there you can see

20

00:01:44.399  -->  00:01:48.720
any compiled class and if you're using
IntelliJ IntelliJ it does come with a

21

00:01:48.720  -->  00:01:54.689
decompiler which will show you the source
code and you can see what Lombok did for

22

00:01:54.689  -->  00:02:00.140
your class. So Lombok is a real time-saver.
It brings you a lot of

23

00:02:00.140  -->  00:02:07.560
functionality. The source code compiled
does change and some IDs will get

24

00:02:07.560  -->  00:02:13.810
confused by this. So this is probably
more of an issue for older IDEs. Modern IDEs

25

00:02:13.810  -->  00:02:19.629
IntelliJ, Eclipse, Netbeans do support
Project Lombok. I personally do not use

26

00:02:19.629  -->  00:02:24.670
Eclipse or NetBeans so I cannot speak to
their functionality. You might need to

27

00:02:24.670  -->  00:02:29.290
install a plug-in for it. The newer
versions of IntelliJ are very good and

28

00:02:29.290  -->  00:02:36.010
there's very nice support for Lombok. The
one nuance with IntelliJ is that you do

29

00:02:36.010  -->  00:02:39.910
have to go to your compiler settings and
make sure that you've enabled annotation

30

00:02:39.910  -->  00:02:43.900
processing so that's going to help
IntelliJ process those annotations from

31

00:02:43.900  -->  00:02:47.829
Lombok and do that code development.
Without it, you'll probably see

32

00:02:47.829  -->  00:02:51.340
things that aren't working properly
inside of your IDE. Your code will

33

00:02:51.340  -->  00:02:56.200
compile and work as expected but the IDE
will say you're missing getters and

34

00:02:56.200  -->  00:03:00.760
setters and stuff like that so that's
one symptomatic of where your annotation

35

00:03:00.760  -->  00:03:08.650
processing has not been enabled. Now
right now we are on version 1.18.8

36

00:03:08.650  -->  00:03:14.560
and this was just released on May 7th
2019. That's actually about a week ago

37

00:03:14.560  -->  00:03:20.859
from when I'm recording this. Lombok
is evolving. There's stuff that's in

38

00:03:20.859  -->  00:03:25.090
the pipeline. They are evolving the
projects. I know this videos can be

39

00:03:25.090  -->  00:03:28.660
live for some time so I highly recommend
you take a look at the official

40

00:03:28.660  -->  00:03:34.030
documentation. I'm giving you overview of
Lombok in this presentation. The

41

00:03:34.030  -->  00:03:36.880
official documentation has a lot more
details than what I'm going to present

42

00:03:36.880  -->  00:03:42.669
here. So let's talk about some of the
features. You get val and var. This allows

43

00:03:42.669  -->  00:03:47.500
you to declare local variables or
mutable local variables. So pretty handy

44

00:03:47.500  -->  00:03:53.769
very similar to features and other JVM
languages. So pretty handy to use here.

45

00:03:53.769  -->  00:04:00.489
Now we can set up a @NonNull. This is
form like method parameters. This is

46

00:04:00.489  -->  00:04:04.810
gonna make sure that they are not null. So
 very handy and convenient if you

47

00:04:04.810  -->  00:04:08.349
want make sure that an object that
you're passing into a method is not null.

48

00:04:08.349  -->  00:04:13.599
Now @Cleanup - this is a handy utility
when you're using resources where you

49

00:04:13.599  -->  00:04:17.889
have to close a connection. This will
generate a finally block and call a

50

00:04:17.889  -->  00:04:23.229
closed on that method. So pretty pretty
nifty tool to use there. Then we have

51

00:04:23.229  -->  00:04:26.380
getters and setters. These are pretty pretty
self-explanatory.

52

00:04:26.380  -->  00:04:30.220
Allows you to define properties and then
Lombok it's gonna take care of that

53

00:04:30.220  -->  00:04:34.570
boilerplate code of creating the getters
and setters for you. @ToString - this is a

54

00:04:34.570  -->  00:04:40.630
very nice one to have. This is going to
generate a very nice ToString for your

55

00:04:40.630  -->  00:04:44.710
class so it's going to generate the
class name and then the field names. So

56

00:04:44.710  -->  00:04:49.180
this is real nice to have. And then
you do have optional parameter include

57

00:04:49.180  -->  00:04:55.300
field names and also a call to the super
method if you've extended class.

58

00:04:55.300  -->  00:05:00.100
@EqualsAndHashCode - this can be a thorn on our
sides of generating this code. There's a

59

00:05:00.100  -->  00:05:05.020
lot of third-party implementations to
prevent hand rolling of it. Lombok will

60

00:05:05.020  -->  00:05:09.310
help alleviate some of the pain points
from that. So I suggest you read the

61

00:05:09.310  -->  00:05:12.610
documentation about exactly what it's
doing but these are pretty handy and you

62

00:05:12.610  -->  00:05:17.650
do have some capabilities where you can
exclude specific properties. Now we also

63

00:05:17.650  -->  00:05:21.610
have constructor helpers. 
@NoArgsConstructor - that's going to generate

64

00:05:21.610  -->  00:05:26.350
obviously a no args constructor. If
there are final fields that will cause a

65

00:05:26.350  -->  00:05:30.040
compiler error but you can force that
through. I'm not sure why you'd want to

66

00:05:30.040  -->  00:05:35.170
but you can do that. @RequiredArgsConstructor -
 so this is going to create a

67

00:05:35.170  -->  00:05:38.170
constructor for things that are just
required. There could be additional

68

00:05:38.170  -->  00:05:42.730
properties which are not final or not
marked non null, that would not be

69

00:05:42.730  -->  00:05:46.960
included. And then finally there's the
@AllArgsConstructor - so it gives you a

70

00:05:46.960  -->  00:05:51.730
lot of capabilities as far as generating
constructors. And then the data

71

00:05:51.730  -->  00:05:58.210
annotation. This is going to the scale
like a helper so this is going to

72

00:05:58.210  -->  00:06:03.700
include @Getters, @Setters, @ToString,
@EqualsAndHashcode, and @RequiredArgsConstrutor

73

00:06:03.700  -->  00:06:07.360
so very handy. You get those
five annotations rolled up in a simple

74

00:06:07.360  -->  00:06:15.100
data annotation. Now we have @value. That's
a immutable variant of data. So all

75

00:06:15.100  -->  00:06:19.480
fields are made private and final so
it's a nice handy one to use. And then

76

00:06:19.480  -->  00:06:26.890
@NonNull, so if you pass in a parameter
that is null, you'll get a null pointer

77

00:06:26.890  -->  00:06:31.060
exception thrown if you use that. @Builder,
this is like one of my favorite

78

00:06:31.060  -->  00:06:34.630
annotations out of Project Lombok.
I've always liked using the builder

79

00:06:34.630  -->  00:06:38.050
pattern. The Builder pattern is really
nothing new. It's been around for very

80

00:06:38.050  -->  00:06:41.290
long
time. The problem that I've had with the

81

00:06:41.290  -->  00:06:46.600
Builder Pattern is it is annoying to
actually implement. I've been around long

82

00:06:46.600  -->  00:06:50.380
enough where you actually had to go and
hand code that Builder Pattern, so once

83

00:06:50.380  -->  00:06:53.620
it was coded, it was really nice. It was
great to have. But there was a lot of

84

00:06:53.620  -->  00:06:58.300
coding to implement a builder pattern so
that is a welcome feature of Project

85

00:06:58.300  -->  00:07:02.920
Lombok. I used the Builder Pattern quite
frequently in my coding. @SneakyThrows

86

00:07:02.920  -->  00:07:08.200
this will throw checked exceptions
without declaring them. @Synchronized  -so

87

00:07:08.200  -->  00:07:12.880
this is a safer implementation of the
Java synchronized command. If you want to

88

00:07:12.880  -->  00:07:15.910
get into the details of that I suggest
reading the documentation that's kind of

89

00:07:15.910  -->  00:07:21.580
interesting what they're doing there and
why now. The @Getter annotation does have

90

00:07:21.580  -->  00:07:26.650
a option to say lazy true. So if you have
some type of expensive operation that's

91

00:07:26.650  -->  00:07:31.960
going to calculate a value for getter,
what lazy true is going to do, it'll

92

00:07:31.960  -->  00:07:36.430
create a small cache and it'll go
through that expensive operation the

93

00:07:36.430  -->  00:07:39.910
first time and populate the cache and
then if you call it again it's gonna

94

00:07:39.910  -->  00:07:44.380
read from the cache. So, it could give you
a situation where it does help your

95

00:07:44.380  -->  00:07:50.680
performance. @Log - this annotiation uses
Java util logger. You can see there I

96

00:07:50.680  -->  00:07:54.760
have on the screen Java util loggers
are awful. I'm not a fan of that logging

97

00:07:54.760  -->  00:07:58.180
framework.
I personally link towards @Slf4j. This

98

00:07:58.180  -->  00:08:03.070
is the simple logging facade or facade.
Some people like to say for logging I

99

00:08:03.070  -->  00:08:08.320
prefer using @Slf4j because
through this it abstracts the underlying

100

00:08:08.320  -->  00:08:13.660
logging framework. Spring Boot by default
is going to use log back. You might want

101

00:08:13.660  -->  00:08:18.610
to use log4j or some type of other
logging implementation but SLF4J

102

00:08:18.610  -->  00:08:23.620
will allow you to swap out different
logging framework. So that is my

103

00:08:23.620  -->  00:08:28.120
preferences to use SLF4J which
abstracts your logging framework. So if

104

00:08:28.120  -->  00:08:31.420
at some point in the future you want
change you just change the configuration

105

00:08:31.420  -->  00:08:36.370
rather than your source code. Now Project
Lombok does have a number of

106

00:08:36.370  -->  00:08:39.460
experimental features. These are kind
of interesting what the project team is

107

00:08:39.460  -->  00:08:44.320
doing. I say use these at your own risk.
I do not recommend using experimental

108

00:08:44.320  -->  00:08:49.180
features in production. These are fun to
experiment with. The problem is these

109

00:08:49.180  -->  00:08:52.840
might not be stable. They might be buggy
and the API

110

00:08:52.840  -->  00:08:57.940
is likely to change. So when you upgrade
Lombok you could be breaking things in

111

00:08:57.940  -->  00:09:01.750
the future. These are kept in a package
has marked experimental and if you know

112

00:09:01.750  -->  00:09:05.500
the Project Lombok website, they have a
whole section on the experimental

113

00:09:05.500  -->  00:09:09.310
features. So again, there's some pretty
interesting stuff with the experimental

114

00:09:09.310  -->  00:09:13.210
features but don't use that in anything
that you can be using in production. It's

115

00:09:13.210  -->  00:09:19.180
fine to experiment with, try them out, see
how they're working. Just be aware that I

116

00:09:19.180  -->  00:09:24.010
wouldn't say put this into production
type code with the experimental features

117

00:09:24.010  -->  00:09:29.260
because they could be buggy and the API
is likely to change and break things to

118

00:09:29.260  -->  00:09:31.920
further down the road.
