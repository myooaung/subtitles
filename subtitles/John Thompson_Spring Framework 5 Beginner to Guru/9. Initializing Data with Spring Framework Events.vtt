WEBVTT
0
1
00:00:05.060 --> 00:00:10.380
Now I'm big fan of the Grails framework as well so if you're not familiar with Grails it is basically
1

2
00:00:10.380 --> 00:00:12.440
a Groovy wrapper around the Spring Framework.
2

3
00:00:12.450 --> 00:00:18.440
And they did some extensions and they pretty much stole shamelessly from the Ruby on Rails guys but
3

4
00:00:18.440 --> 00:00:20.900
extend out a lot of concepts that they did there.
4

5
00:00:20.910 --> 00:00:25.860
Now one of the things that they do a nice job is they have a Bootstrap initialisation Class inside of
5

6
00:00:25.860 --> 00:00:26.550
Grails.
6

7
00:00:26.660 --> 00:00:31.200
And I'm really kind of taking this from there because now we have a lot of the foundation laid we have
7

8
00:00:31.200 --> 00:00:34.070
an H2 database and in-memory database ourselves.
8

9
00:00:34.110 --> 00:00:39.760
So a real common use case is for us to initialize data in the database.
9

10
00:00:39.870 --> 00:00:43.980
So we are going to use Spring to do this we'll write a  Bootstrap Class here.
10

11
00:00:44.130 --> 00:00:48.180
And what we're going to do is in Spring the Spring Framework has inventing Framework.
11

12
00:00:48.300 --> 00:00:51.330
And one of those events is when the context is up and ready.
12

13
00:00:51.480 --> 00:00:59.270
So we're going to tap into that event and use that to populate our database when we bring it up.
13

14
00:00:59.550 --> 00:01:06.030
We'll run run some code to populate our database so we have a known set of data that we can work with
14

15
00:01:06.030 --> 00:01:07.700
going forward in this course.
15

16
00:01:07.800 --> 00:01:11.550
I'm going to show you exactly how to do that I'm going to jump over an Intellij well write a little
16

17
00:01:11.550 --> 00:01:16.030
bootstrap class to populate data into our author and books table.
17

18
00:01:16.680 --> 00:01:17.550
OK.
18

19
00:01:17.550 --> 00:01:22.980
So what I've done is I've gone ahead and created a Dev Bootstrap Class and I like to put these in a
19

20
00:01:22.980 --> 00:01:28.380
package called bootstrap and I'm going to show you how to configure everything for Spring to get this
20

21
00:01:28.380 --> 00:01:29.070
wired up.
21

22
00:01:29.070 --> 00:01:36.320
Now the first thing that we want to do is have a implement an ApplicationListener
22

23
00:01:41.440 --> 00:01:45.150
and the event that we want as a ContextRefreshEvent
23

24
00:01:51.950 --> 00:01:53.570
event.
24

25
00:01:53.570 --> 00:02:01.890
Now to implement this just add command and implement methods.
25

26
00:02:01.890 --> 00:02:07.890
So we're going to onApplicationEvent and you can see there on line 18.
26

27
00:02:07.890 --> 00:02:16.220
I have initData method so that's what we want to call and so that we'll get called on that.
27

28
00:02:16.350 --> 00:02:22.940
But this only creates two or actually four objects so it creates a a an author called Eric,
28

29
00:02:23.010 --> 00:02:28.890
Eric Evans we saw him with the Domain Driven Design earlier and we also create a book for Domain Driven
29

30
00:02:28.890 --> 00:02:32.240
Design and then we create the associations between the two.
30

31
00:02:32.640 --> 00:02:39.330
And then we also create a an Author called Rod Johnson who's accredited as being the founder
31

32
00:02:39.330 --> 00:02:45.100
of the Spring Framework he wrote a pivotal book called J2EE development without EJB.
32

33
00:02:45.160 --> 00:02:45.630
Remember this.
33

34
00:02:45.630 --> 00:02:51.160
Back when J2EE was just awful and it was really bad to work with.
34

35
00:02:51.210 --> 00:02:55.740
So that's kind of what born in the Spring Primer many many moons ago
35

36
00:02:56.100 --> 00:03:01.350
so honoring Rod our code and what we wanna do is save this.
36

37
00:03:01.590 --> 00:03:03.820
So we need to do a couple things.
37

38
00:03:03.840 --> 00:03:07.830
One is we need to add this as a Spring Component.
38

39
00:03:08.040 --> 00:03:09.170
So I'm going to add it to the
39

40
00:03:12.080 --> 00:03:14.360
so that now makes this a Spring Bean.
40

41
00:03:14.360 --> 00:03:17.910
So now this will get wired up by the Spring Context.
41

42
00:03:18.090 --> 00:03:20.120
You know we need to do two more things.
42

43
00:03:21.510 --> 00:03:25.050
One is to add in our AuthorRepository
43

44
00:03:30.300 --> 00:03:31.870
in our BookRepository
44

45
00:03:40.890 --> 00:03:47.310
now that these are there but no Autowiring is happening so as we know or maybe don't know that Spring
45

46
00:03:47.310 --> 00:03:54.270
does dependency injection so i'm gonna declare a constructor to have these both get injected.
46

47
00:03:54.570 --> 00:03:59.580
So now we're going to use constructor auto injection through its Spring Framework so at runtime what's
47

48
00:03:59.580 --> 00:04:04.300
going to happen is this class will get created and managed by the Spring Framework.
48

49
00:04:04.530 --> 00:04:11.010
And the author and book repository which we're going to get an implementation of from Spring Data JPA
49

50
00:04:11.460 --> 00:04:14.190
those are gonna get autowired into here.
50

51
00:04:14.220 --> 00:04:21.360
So what we need to do is come down here and do author.save eric
51

52
00:04:27.220 --> 00:04:32.270
book.save ddd for Domain Driven Design.
52

53
00:04:32.450 --> 00:04:34.030
And we need to do same for rod
53

54
00:04:48.000 --> 00:04:49.710
and that should be all that we need to do.
54

55
00:04:49.750 --> 00:04:51.500
So let's go out and run this now.
55

56
00:04:55.870 --> 00:04:56.980
I'm actually rerunning it.
56

57
00:05:05.520 --> 00:05:12.720
See things started up now I should be able to go to over to the H-2 database console. In Chrome we've looked
57

58
00:05:12.900 --> 00:05:15.870
before, do a refresh here.
58

59
00:05:18.350 --> 00:05:21.500
Now we need to reconnect to it so i'm connecting now.
59

60
00:05:21.540 --> 00:05:23.520
So let's take a look at that.
60

61
00:05:23.530 --> 00:05:30.450
We'll run that and we can see that we now have two records populated for Eric Evans and Ron Johnson.
61

62
00:05:30.460 --> 00:05:35.460
Let's take a look at this because you got to clear it.
62

63
00:05:35.880 --> 00:05:42.460
Now we can do that say we're select it and now we can see that we also have the IDs of the books populate
63

64
00:05:42.460 --> 00:05:45.330
it so everything worked OK.
64

65
00:05:45.370 --> 00:05:50.100
You can see how easy it was to do while we did had to do is implement that one class.
65

66
00:05:50.200 --> 00:05:55.780
And now that class is because it is managed as a spring being in the Spring context it's going to get
66

67
00:05:55.780 --> 00:05:56.810
wired up for us.
67

68
00:05:56.950 --> 00:06:03.940
And then when that event gets thrown that context the event gets thrown our repository interface is
68

69
00:06:03.940 --> 00:06:09.760
going to catch those transactions and actually populate out of the database and hibernate for us and
69

70
00:06:09.760 --> 00:06:15.580
be a hibernate and into the H-2 database so kind of a very handy feature I use isn't a developmental
70

71
00:06:15.580 --> 00:06:21.670
lot because what I want is when I'm developing a Web Application I want to have a set of known data
71

72
00:06:22.000 --> 00:06:25.630
so I don't have to go and search products all the time and stuff like that I want to have something
72

73
00:06:25.720 --> 00:06:27.660
that I can bring up and display tables and stuff.
73

74
00:06:27.660 --> 00:06:30.700
So this is a real handy little trick.
74

75
00:06:30.700 --> 00:06:33.370
Now of course you're protected some further down the road.
75

76
00:06:33.370 --> 00:06:36.240
You don't want to be inserting data into production that would be a no no.
76

77
00:06:36.460 --> 00:06:38.480
And I'll show you mechanism's how to do that.
77

78
00:06:38.500 --> 00:06:42.300
But for your local development this is just a really awesome tool to have.
