WEBVTT
0
1
00:00:04.190 --> 00:00:10.380
Okay, today we're going to take a look at a
problem student's having with his Mockito
1

2
00:00:10.380 --> 00:00:15.059
test. Its tossing a null pointer and
doesn't see why. And he's gone ahead and
2

3
00:00:15.059 --> 00:00:19.260
provided me his project up inside of
GitHub. I forked it to my repo and now
3

4
00:00:19.260 --> 00:00:24.180
I'm going to go in and open it. So I have
IntelliJ up. So this is a directory here.
4

5
00:00:24.180 --> 00:00:27.539
So he's looks like he's doing a Gradle
build. So I'm going to go ahead and open
5

6
00:00:27.539 --> 00:00:35.700
this. And tell IntelliJ to import the
project and finish that. And take a
6

7
00:00:35.700 --> 00:00:45.149
second for IntelliJ to start up. And he
was also on a branch. And he's on the error
7

8
00:00:45.149 --> 00:00:51.899
branch so I need to check that out and
see if we can recreate this error for
8

9
00:00:51.899 --> 00:00:57.570
him. It's going to take a second for
IntelliJ to scan everything. Now, he did
9

10
00:00:57.570 --> 00:01:02.010
post the source code up on the forums.
I took a look. It didn't quite pop
10

11
00:01:02.010 --> 00:01:05.850
out at me right away. A lot of times, it's
easier for me to get things inside of
11

12
00:01:05.850 --> 00:01:10.710
IntelliJ. That way I have the full
project. It can be hard to troubleshoot
12

13
00:01:10.710 --> 00:01:13.650
when you just get a snippet of code
there's too many variables.
13

14
00:01:13.650 --> 00:01:17.310
Don't know what version you're on and it
could be something completely unrelated.
14

15
00:01:17.310 --> 00:01:21.869
It could be something not on the screen.
So when I do run into something that I'm
15

16
00:01:21.869 --> 00:01:26.280
not quite sure on, I do ask people to go
ahead. And just go ahead and put it
16

17
00:01:26.280 --> 00:01:29.460
up in GitHub. Get me a link to it. That
way, I can bring it up like I am right
17

18
00:01:29.460 --> 00:01:34.259
now and get the full picture rather than
just seeing a small piece of the picture.
18

19
00:01:34.259 --> 00:01:38.280
So looks like IntelliJ is done. Let's go
ahead and run the test and see what we
19

20
00:01:38.280 --> 00:01:40.850
get here.
20

21
00:01:45.950 --> 00:01:50.680
And this is in the RecipeServiceTest.
21

22
00:01:55.149 --> 00:01:59.830
I'm running into a couple problems here.
22

23
00:02:03.880 --> 00:02:10.340
I'm going to pause this and resolve these
compile errors really quick. We ran off
23

24
00:02:10.340 --> 00:02:14.600
pause and I'd see what's going on. We're
using Project Lombok. And I need to come
24

25
00:02:14.600 --> 00:02:25.150
in and set up Project Lombok. Make sure
that we have the Java compiler,
25

26
00:02:26.560 --> 00:02:35.569
Annotation processors, enable annotation processing.
That's the problem. It's
26

27
00:02:35.569 --> 00:02:39.080
one thing with Project Lombok. You do
need to enable the annotation processing
27

28
00:02:39.080 --> 00:02:42.590
so that it does pick everything up
properly. It looks like it did now. So
28

29
00:02:42.590 --> 00:02:48.440
let's go ahead and try running this
again. And boom that's the error that he's
29

30
00:02:48.440 --> 00:02:56.390
seeing. He's getting a null pointer error.
So it's get recipes all recipes. So this
30

31
00:02:56.390 --> 00:03:00.950
is inside the class under
test. So he's testing this recipe service
31

32
00:03:00.950 --> 00:03:08.329
implementation and the RecipeRepo.
I'm going to guess that it's not getting
32

33
00:03:08.329 --> 00:03:15.350
set let's go ahead and prove that. I'm
going to set a breakpoint there. And let's
33

34
00:03:15.350 --> 00:03:26.170
debug that recipeRepo, so that actually
is getting set. So that's interesting. So
34

35
00:03:26.680 --> 00:03:33.069
recipes supposed to be HashSet, zero.
35

36
00:03:37.200 --> 00:03:40.440
Stepping through that. We're into Mockito code, so I'm just going through the
36

37
00:03:40.440 --> 00:03:46.350
debugger. Trying to see where you're
getting us to pop because I thought he
37

38
00:03:46.350 --> 00:03:51.980
initially I thought that the recipeRepo
was not getting set. But apparently, it is
38

39
00:03:51.980 --> 00:04:01.980
receipeRepos. Okay, let's take a look at
the recipe object. So that is a HashSet
39

40
00:04:01.980 --> 00:04:09.930
so that's good. Let's take a closer look
at the test here. I want to go out and
40

41
00:04:09.930 --> 00:04:12.650
continue this.
41

42
00:04:19.580 --> 00:04:26.910
Okay I see what's going on here. So he's
doing a recipeRepo, findAll but what
42

43
00:04:26.910 --> 00:04:32.460
we've done is we have not set up the
Mockito Mock action. So take a look at the
43

44
00:04:32.460 --> 00:04:39.030
test here. So it initializes the Mocks
but we have not implemented the return
44

45
00:04:39.030 --> 00:04:43.680
value on that. So default behavior of a
Mockito Mock, so the Mock is initiated.
45

46
00:04:43.680 --> 00:04:51.270
But what's happening, might close some of
these out here, in the recipe service,
46

47
00:04:51.270 --> 00:04:58.350
he's going to findAll method
is returning back a null and that is
47

48
00:04:58.350 --> 00:05:02.490
failing. So let me pause this. I'm going to
refactor the code real quick. Okay, just
48

49
00:05:02.490 --> 00:05:06.120
resumed it here and refactored the code
a little bit. So before we had all this
49

50
00:05:06.120 --> 00:05:10.230
on one line and I've put the result
coming back from the RecipeRepo, so you
50

51
00:05:10.230 --> 00:05:16.410
can see this a little easier. So now, I'm
going to move my debug point down here. And
51

52
00:05:16.410 --> 00:05:22.950
let's rerun the test. Hopefully, actually
run around the debugger. The debug will
52

53
00:05:22.950 --> 00:05:28.410
work a lot better that way. So now we're
at that break point. And now it's
53

54
00:05:28.410 --> 00:05:32.730
easier to see that foundRecipes is infact null. So that's what's coming back
54

55
00:05:32.730 --> 00:05:38.490
from the Mockito Mock there. So to findAll method is failing and it's a little
55

56
00:05:38.490 --> 00:05:40.560
hidden there the way the code was
formatted.
56

57
00:05:40.560 --> 00:05:46.170
I just reformat that, so you could see it
easier. I'm actually going to revert
57

58
00:05:46.170 --> 00:05:52.140
that change. So this is the way it was
originally. We'll stop that and while
58

59
00:05:52.140 --> 00:05:57.480
those pause there, I went in and added
under the lines that we need for my
59

60
00:05:57.480 --> 00:06:03.060
Mockito. So I'm going to create a empty
ArrayList for the recipes, to give a
60

61
00:06:03.060 --> 00:06:09.180
return value. So in here, you want to use
my Mockito to set up that Mock and so it
61

62
00:06:09.180 --> 00:06:14.280
he was doing things right. So we had the
RecipeRepo marked as a Mock and we were
62

63
00:06:14.280 --> 00:06:18.180
using the Mockito annotations to
initialize the Mock. So that will
63

64
00:06:18.180 --> 00:06:22.680
set up the Mock but we weren't setting a
mock action on it. So now we're going to set
64

65
00:06:22.680 --> 00:06:27.420
up a variable called recipeList. And
we're going to say when findAll is invoked
65

66
00:06:27.420 --> 00:06:31.139
and then we're going to return that recipeList. And
66

67
00:06:31.139 --> 00:06:38.789
just as a reminder, you'll need to
import the static import when. So we got
67

68
00:06:38.789 --> 00:06:42.840
a couple other things that are no longer
being used here. But I'll clean. Actually
68

69
00:06:42.840 --> 00:06:50.789
let's just clean it up right now. And go
in IntelliJ. Optimize imports boom. Now
69

70
00:06:50.789 --> 00:06:55.710
let's go ahead and run this again. And we
can see that it is now passing. So that
70

71
00:06:55.710 --> 00:06:59.999
that setup Mockito to return back a
value. So that null pointer was happening
71

72
00:06:59.999 --> 00:07:05.009
because Mockito's default behavior, when
you don't tell it any type of action,
72

73
00:07:05.009 --> 00:07:10.020
it's going to return back a null value. And
that method wasn't null safe. So it went
73

74
00:07:10.020 --> 00:07:17.360
kaboom with the dreaded NPE. And
just to reiterate, if we get rid of that,
74

75
00:07:17.360 --> 00:07:24.240
it's going to return back a null and
then go kaboom. So I am going to go ahead
75

76
00:07:24.240 --> 00:07:29.969
commit this into GitHub and pass it back
to the student. So it can do a pull
76

77
00:07:29.969 --> 00:07:34.439
request and see my exact changes here.
And I'll have this video up to share
77

78
00:07:34.439 --> 00:07:37.789
with everybody else here in a little bit.
