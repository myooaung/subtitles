WEBVTT
0
1
00:00:03.980 --> 00:00:08.250
Alright, in this video we are going to
take a look at getting properties out of
1

2
00:00:08.250 --> 00:00:11.400
the Operating system environment. So
there's a couple different ways we can
2

3
00:00:11.400 --> 00:00:13.950
do this in Spring and there's actually a
little bit of a hierarchy. I'm going to
3

4
00:00:13.950 --> 00:00:17.760
give you a quick demo with that. Now this
is something very common to do. All
4

5
00:00:17.760 --> 00:00:21.410
Operating systems are going to support
this whether you're on Windows or Linux
5

6
00:00:21.410 --> 00:00:26.670
or UNIX. Anything that running is Java is
going to have Operating system
6

7
00:00:26.670 --> 00:00:30.269
environment properties. There's a number
of different ways that you can set those.
7

8
00:00:30.269 --> 00:00:34.500
I'm not going to get into the Operating
system specific ways of setting
8

9
00:00:34.500 --> 00:00:38.579
environment properties but we are going
to get into how we can access on with
9

10
00:00:38.579 --> 00:00:42.450
Spring and we can see how the hierarchy
is going to work. So I'm going to jump
10

11
00:00:42.450 --> 00:00:47.730
over to IntelliJ and get into a demo
there and inside of IntelliJ you do have
11

12
00:00:47.730 --> 00:00:52.260
a Run dialog where you can set up
Operating system properties that we can
12

13
00:00:52.260 --> 00:00:55.530
access. I'm going to give you a quick
demo there and take a look at the
13

14
00:00:55.530 --> 00:00:59.730
capabilities within Spring. Okay now Spring gives us a couple different
14

15
00:00:59.730 --> 00:01:03.809
ways that we can access environment
properties and by environment properties
15

16
00:01:03.809 --> 00:01:07.439
I'm talking about OS level properties
that we've set in the Operating
16

17
00:01:07.439 --> 00:01:12.000
system environment. So Java is fully
capable of accessing those properties
17

18
00:01:12.000 --> 00:01:16.909
and Spring gives us a couple of different
ways that we can do that and one way is
18

19
00:01:16.909 --> 00:01:22.619
through a convention where we can
override property files. So there's an
19

20
00:01:22.619 --> 00:01:26.580
actual whole convention or a whole
hierarchy within the Spring framework of
20

21
00:01:26.580 --> 00:01:31.200
where properties are going to be
determined from. So inside of IntelliJ if
21

22
00:01:31.200 --> 00:01:36.990
I were to come in here and go to Edit
Configurations and to Environment
22

23
00:01:36.990 --> 00:01:41.280
variables, I can add in a new Environment
variable and I'm going to call that 
23

24
00:01:41.280 --> 00:01:48.899
GURU_USERNAME and using all caps. And this is going to tell Spring to
24

25
00:01:48.899 --> 00:01:56.430
override that property and I'm
overriding the value with my override. So
25

26
00:01:56.430 --> 00:02:00.719
we can see that clearly in the log and the convention is going to be where
26

27
00:02:00.719 --> 00:02:04.640
we have something dot something. It's
going to be all caps underscore. I think
27

28
00:02:04.640 --> 00:02:10.170
lowercase will work as well and it
should work with the dot notation as
28

29
00:02:10.170 --> 00:02:13.890
well. But generally when you're setting
up environment variables
29

30
00:02:13.890 --> 00:02:19.680
like this, pretty common conventions use
uppercase and underscores. So let's go in.
30

31
00:02:19.680 --> 00:02:25.200
I'm going to say OK and if you were in
Linux, you could export this in bash as
31

32
00:02:25.200 --> 00:02:29.130
an environment property or under windows,
you could also set it as an environment
32

33
00:02:29.130 --> 00:02:34.320
variable. This is, I'm using IntelliJ but this
is going in as a System environment
33

34
00:02:34.320 --> 00:02:39.780
variable. So I'm going to go ahead and
say OK there and say OK again. We'll go
34

35
00:02:39.780 --> 00:02:45.030
ahead and run this and we can see that
the MyOVERIDE!!! value is being displayed
35

36
00:02:45.030 --> 00:02:48.900
there on the bottom of the screen. But
let's just say that we're running in an
36

37
00:02:48.900 --> 00:02:55.790
environment. I'm going to come back in
here and edit the configurations again and
37

38
00:02:55.790 --> 00:03:00.510
let's say for whatever reason, we're
deploying it to production but the Ops
38

39
00:03:00.510 --> 00:03:07.350
guys can only do
USERNAME. Okay, so they're going to say
39

40
00:03:07.350 --> 00:03:11.940
USERNAME and now when we run it, we're
still going to be getting the property
40

41
00:03:11.940 --> 00:03:17.519
file value. So what we can do
here to override it in a situation like
41

42
00:03:17.519 --> 00:03:22.829
that, I'm just showing a capability here, not very good use case but we can wire
42

43
00:03:22.829 --> 00:03:33.420
in the environment. I'm just going to
call it env for short and now instead of
43

44
00:03:33.420 --> 00:03:44.640
the user property I can ask it for, so
now I'm asking the Spring Environment
44

45
00:03:44.640 --> 00:03:50.610
Bean to give me the system property
USERNAME. Let's take a look at that in
45

46
00:03:50.610 --> 00:03:57.090
action and we see that the override is
now working properly. So that's two
46

47
00:03:57.090 --> 00:04:01.380
different ways there. If we don't have
that set, so the environment parameters
47

48
00:04:01.380 --> 00:04:06.390
can override the property file
parameters and this is something pretty
48

49
00:04:06.390 --> 00:04:11.850
common to do. So you set up defaults and
then you may override those as you are
49

50
00:04:11.850 --> 00:04:16.320
deploying the application into different
environments through using environment
50

51
00:04:16.320 --> 00:04:20.489
variables. And this is often pretty handy
views for things like passwords where
51

52
00:04:20.489 --> 00:04:23.430
you don't want those stored in a file. You can set those through the
52

53
00:04:23.430 --> 00:04:27.040
environment parameters and then the
Spring application
53

54
00:04:27.040 --> 00:04:31.540
will pull that data right out of
the system, the Operating system
54

55
00:04:31.540 --> 00:04:35.740
environment. So a pretty handy tool
here and I just gave you a quick demo
55

56
00:04:35.740 --> 00:04:40.300
of how there's a hierarchy to how the
Spring property is working. In a future
56

57
00:04:40.300 --> 00:04:44.800
video I'll get into more detail about
that exact hierarchy and how you can
57

58
00:04:44.800 --> 00:04:50.320
externalise properties. Now it's very
common that I showed you this a couple
58

59
00:04:50.320 --> 00:04:54.880
use cases here. It's very common when
you're moving Spring applications from
59

60
00:04:54.880 --> 00:05:00.130
different environments where you'll have
properties file inside the jar that's
60

61
00:05:00.130 --> 00:05:05.680
deployed and that's going to be like the
lowest man on the totem pole of where
61

62
00:05:05.680 --> 00:05:10.210
that property gets defined. And you can
define additional properties inside the
62

63
00:05:10.210 --> 00:05:13.780
environment that's going to override
that. So it's a real handy way as you're
63

64
00:05:13.780 --> 00:05:17.080
moving your Spring stuff through
different environments. You can take that
64

65
00:05:17.080 --> 00:05:21.550
jar, that artifact that's going to run in
let's say your local machine or your
65

66
00:05:21.550 --> 00:05:25.060
development environment where you set up
those properties and you'll deploy it
66

67
00:05:25.060 --> 00:05:29.700
into QA or production and the operations
guys are going to set environment
67

68
00:05:29.700 --> 00:05:35.740
properties to override your values. Now
if you're in the Enterprise as an
68

69
00:05:35.740 --> 00:05:39.850
Enterprise Developer, due to security
constraints especially in organisations
69

70
00:05:39.850 --> 00:05:43.270
that are going to be running with
financial services where they're dealing
70

71
00:05:43.270 --> 00:05:47.620
things like PCI compliance and Sox
compliance like that, chances are you are
71

72
00:05:47.620 --> 00:05:52.060
not going to have access to production. Sometimes you won't even have access to
72

73
00:05:52.060 --> 00:05:56.020
a test or QA. These are different
environments. So another team is going to be
73

74
00:05:56.020 --> 00:05:59.650
handing that off and that other team is
going to be the keepers of the knowledge
74

75
00:05:59.650 --> 00:06:05.020
of things like passwords and url's and
server names that are running in the
75

76
00:06:05.020 --> 00:06:09.400
production environment. So a pretty common
thing that you're going to see in the
76

77
00:06:09.400 --> 00:06:13.990
enterprise. So just be aware that this is
a tool and one of the things that really
77

78
00:06:13.990 --> 00:06:18.940
makes Spring powerful and why it's so
popular in enterprises is because you do
78

79
00:06:18.940 --> 00:06:24.370
have this flexibility to easily override
things like data source names and things
79

80
00:06:24.370 --> 00:06:31.200
like that and environment properties is
a very common way to do that.
