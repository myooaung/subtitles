WEBVTT
0
1
00:00:04.759 --> 00:00:10.889
Alright! In this video, we are gonna take
a look at what exactly is Swagger. So if
1

2
00:00:10.889 --> 00:00:15.719
you look it up in the dictionary, Swagger
is a verb. It means to walk very
2

3
00:00:15.719 --> 00:00:20.250
confidently typically in an arrogant
manner aggressive way, or it can be a
3

4
00:00:20.250 --> 00:00:25.769
noun to be very confident. And again,
typically, a arrogant or aggressive gait
4

5
00:00:25.769 --> 00:00:29.970
or manner. So, if you wanna talk about
Swagger, let's take a look at this guy,
5

6
00:00:29.970 --> 00:00:37.710
Conor McGregor. So, one of the toughest
championships in the world, a MMA fighter,
6

7
00:00:37.710 --> 00:00:42.660
multiple championships, and that is one
heck of Swagger he's got. If I had his
7

8
00:00:42.660 --> 00:00:47.460
money and his ability to pummel people,
I'd probably Swagger like that myself.
8

9
00:00:47.460 --> 00:00:53.309
So, but this type of Swagger that we are
looking at is not gonna be have anything
9

10
00:00:53.309 --> 00:00:56.280
to do with Conor McGregor. Let's just
keep you guys paying attention a little
10

11
00:00:56.280 --> 00:01:03.629
bit. We are gonna be talking about the
Swagger API. So, Wikipedia calls Swagger
11

12
00:01:03.629 --> 00:01:08.070
an open source software framework
backed by a large ecosystem of tools
12

13
00:01:08.070 --> 00:01:13.080
that helps developers design, build, document and consume RESTful Web
13

14
00:01:13.080 --> 00:01:17.880
services. Now, we've already seen Swagger
in action. That's the API document that we're
14

15
00:01:17.880 --> 00:01:23.610
looking at when we got into the REST
APIs. An important goal of Swagger is to
15

16
00:01:23.610 --> 00:01:29.729
define a standard a language-agnostic
interface to REST APIs, which allows
16

17
00:01:29.729 --> 00:01:33.780
both humans and computers to discover
and understand the capabilities of the
17

18
00:01:33.780 --> 00:01:38.100
service without access to source code
documentation or through a network
18

19
00:01:38.100 --> 00:01:41.909
traffic inspection. So, this is all very
important. So it's trying to create
19

20
00:01:41.909 --> 00:01:47.520
something portable. And I like how they
say language-agnostic because REST API
20

21
00:01:47.520 --> 00:01:52.890
is even though we're dealing in the Java
and Spring world in this course, the REST
21

22
00:01:52.890 --> 00:01:57.869
APIs are definitely language-agnostic.
You could be using PHP, you could be
22

23
00:01:57.869 --> 00:02:02.219
using JavaScript. So they do open up a
significant bandwidth to different
23

24
00:02:02.219 --> 00:02:09.360
technologies. Okay, now in the REST world,
it is kind of loose. Prior to the RESTful
24

25
00:02:09.360 --> 00:02:13.330
APIs,
SOAP web services were highly popular.
25

26
00:02:13.330 --> 00:02:18.370
And one of the things that is really
nice about SOAP is the
26

27
00:02:18.370 --> 00:02:23.410
WSDL. So, WSDL stands for Web Services
Description Language. Now, the WSDL is
27

28
00:02:23.410 --> 00:02:28.480
an XML document, which is highly
structured so it it actually conforms to
28

29
00:02:28.480 --> 00:02:33.370
an XML schema. An important aspect is
that you can think of that WSDL as a
29

30
00:02:33.370 --> 00:02:37.900
contract, because you can literally take
that WSDL, and there's code generators
30

31
00:02:37.900 --> 00:02:44.260
for a lot of popular languages to build
all your API software from a WSDL. So,
31

32
00:02:44.260 --> 00:02:47.920
you can build a client pretty easily
once you get a hold of WSDL. And that,
32

33
00:02:47.920 --> 00:02:54.310
this is an important thing. Now, with REST,
there is no WSDL equivalent right now.
33

34
00:02:54.310 --> 00:03:00.100
That is kind of what we are going with
Swagger, but it's not a formal
34

35
00:03:00.100 --> 00:03:05.980
standard unlike SOAP. SOAP is a formal
standard that has a WSDL. REST does not
35

36
00:03:05.980 --> 00:03:12.100
have a formal standard, but Swagger is
kind of bringing that up. So, I wanna
36

37
00:03:12.100 --> 00:03:16.209
point out, when you ask, what is Swagger?
It is more than just documentation. It's
37

38
00:03:16.209 --> 00:03:21.610
a specification, and they use JSON for
mate metadata. which is data about the
38

39
00:03:21.610 --> 00:03:27.550
API. They use JSON for the API definition
about what the API is going to do. And
39

40
00:03:27.550 --> 00:03:33.820
then, JSON also for the Schema and Model
specification. The Swagger specification
40

41
00:03:33.820 --> 00:03:38.050
is also machine readable. It is language-
agnostic. Meaning, that's not just for
41

42
00:03:38.050 --> 00:03:42.280
Java and Spring.
Swagger is also supportive for a lot of
42

43
00:03:42.280 --> 00:03:46.840
popular server-side and client-side
languages, and you'll see that here, as we
43

44
00:03:46.840 --> 00:03:49.750
get further into the section of the
course.
44

45
00:03:49.750 --> 00:03:56.200
Now, the swagger ecosystem, there's a
couple major segments of Swagger. Swagger UI,
45

46
00:03:56.200 --> 00:04:01.780
now this is HTML Javascript and CSS
that is going to generate documentation
46

47
00:04:01.780 --> 00:04:06.610
from the Swagger specification. And we've
already seen this in the course. Maybe when
47

48
00:04:06.610 --> 00:04:11.230
we started generating the API spec, when
we went to that website, where we saw
48

49
00:04:11.230 --> 00:04:16.180
that documentation, that was Swagger
Documentation. Now, there's another really
49

50
00:04:16.180 --> 00:04:22.150
cool tool called Swagger Editor. You can
go in and edit YAML, or I think, you can
50

51
00:04:22.150 --> 00:04:28.120
do JSON too. I think YAML is preferred
for Swagger Editor but you can see that
51

52
00:04:28.120 --> 00:04:32.080
documentation get generated in real time.
Your changes happen in real time.
52

53
00:04:32.080 --> 00:04:36.100
I am going to record a video on that and
show you a demonstration of that.
53

54
00:04:36.100 --> 00:04:41.590
Then finally, Swagger Codegen. You can
build client libraries and server side
54

55
00:04:41.590 --> 00:04:46.870
stubs from a Swagger definition. And this
works not only just for Java and Spring,
55

56
00:04:46.870 --> 00:04:51.850
but a lot of the other popular
programming languages out there like PHP
56

57
00:04:51.850 --> 00:04:55.900
and C sharp, and actually, even writing C.
I don't know if I'll does C or not, but a
57

58
00:04:55.900 --> 00:05:01.380
lot of the very popular languages out
there does have Swagger code generation
58

59
00:05:01.380 --> 00:05:06.430
capabilities. I'm gonna show you the
Spring generated Swagger Generated
59

60
00:05:06.430 --> 00:05:12.310
Code, in an upcoming video. Now, the
Swagger Specification. Now, that can
60

61
00:05:12.310 --> 00:05:16.000
be JSON or YML. All the field names are
gonna be case sensitive. The data
61

62
00:05:16.000 --> 00:05:21.520
types are gonna be based on JSON
Schema and the models are described also
62

63
00:05:21.520 --> 00:05:29.560
using the Schema Object from JSON Schema.
Now, Swagger 2 uses JSON Schema draft 4.
63

64
00:05:29.560 --> 00:05:34.570
So, JSON schema is still an evolving
standard. It is not officially released.
64

65
00:05:34.570 --> 00:05:39.220
So, these are official, like milestone
releases of the schema. This is something
65

66
00:05:39.220 --> 00:05:44.950
that is evolving right now. But, unlike
XML, there's not a formal approved
66

67
00:05:44.950 --> 00:05:49.840
cut and stone standard. This is something
that's still evolving in the community
67

68
00:05:49.840 --> 00:05:55.330
right now. Now, here's an example of
Swagger specification. So, you can see
68

69
00:05:55.330 --> 00:05:59.740
here, we have the Swagger version number.
This is just good old YAML, and it
69

70
00:05:59.740 --> 00:06:03.409
describes the API. You can see, we have a
path, a list, and
70

71
00:06:03.409 --> 00:06:07.159
you can look at this and get a pretty
good idea of what this API is going to
71

72
00:06:07.159 --> 00:06:10.909
do, just from reading the YAML. And
there's a whole specification on what
72

73
00:06:10.909 --> 00:06:15.679
the specification does. Now, the Swagger
Specification is also known as Swagger
73

74
00:06:15.679 --> 00:06:20.569
RESTful API Documentation Specification.
So, that's a full name of it. But, we are
74

75
00:06:20.569 --> 00:06:26.479
now in the Swagger 2.0 world, and that
became officially known as the OpenAPI
75

76
00:06:26.479 --> 00:06:32.209
Specification. So, you still see, a lot of
people call it Swagger Specification. But
76

77
00:06:32.209 --> 00:06:37.489
there has been a name change to OpenAPI
Specification. A lot of people still
77

78
00:06:37.489 --> 00:06:43.999
called Java Enterprise J2EE, when it that
was dropped over a decade ago. And now
78

79
00:06:43.999 --> 00:06:47.479
it's JEE.
So, two different things. But I think the
79

80
00:06:47.479 --> 00:06:52.669
community is gonna start adopting the
OpenAPI Specification and that is in
80

81
00:06:52.669 --> 00:06:59.119
Swagger 3.0, and the ecosystem and
tooling is still adapting to Swagger 3.0.
81

82
00:06:59.119 --> 00:07:04.789
That is not out in the wild yet, or
Swagger 3.0 is. But what I'm gonna be
82

83
00:07:04.789 --> 00:07:08.179
showing you in the course, the tools
working with Spring, it's gonna be around
83

84
00:07:08.179 --> 00:07:14.569
2.0 because Swagger 3.0 July 2017,
that was just about five months ago at
84

85
00:07:14.569 --> 00:07:19.309
the time of recording, so a lot of the
tooling and ecosystem are catching up to
85

86
00:07:19.309 --> 00:07:23.029
the 3.0 release. So, everything I'm
actually showing you in this course
86

87
00:07:23.029 --> 00:07:26.990
right now is gonna be on the 2.0 
specification. Okay, now coming up in
87

88
00:07:26.990 --> 00:07:30.379
the course, we are gonna be using a
library called Spring Fox, and that's
88

89
00:07:30.379 --> 00:07:34.789
gonna allow us to generate Swagger
Documentation right out of Spring MVC. So,
89

90
00:07:34.789 --> 00:07:39.800
the REST API is that we've set up, we are
gonna use Spring Fox to generate Swagger
90

91
00:07:39.800 --> 00:07:43.189
Documentation. It's actually really cool.
You'll be able to see that generated
91

92
00:07:43.189 --> 00:07:46.369
right online. We'll be able to go to
endpoint and see that. And then, I'm gonna
92

93
00:07:46.369 --> 00:07:50.029
show you how to customize that, how you
can set some different settings in it,
93

94
00:07:50.029 --> 00:07:55.729
and also enhance it for your specific
use case. Then, we're gonna take a look
94

95
00:07:55.729 --> 00:08:00.110
at the Swagger Editor and show you how
we can use that online tool. And then,
95

96
00:08:00.110 --> 00:08:03.979
also, there's a the Swagger Pet Store and
we're gonna take a look at the
96

97
00:08:03.979 --> 00:08:08.569
generated code, the Spring Framework code,
so we can generate Spring Framework code
97

98
00:08:08.569 --> 00:08:12.469
from that. I'm not gonna get too down
the rabbit hole on that but I wanna
98

99
00:08:12.469 --> 00:08:16.009
show you some of these different tools
that you can use on Swagger and
99

100
00:08:16.009 --> 00:08:21.919
using Swagger to generate your
documentation. Also, to generate actual
100

101
00:08:21.919 --> 00:08:24.949
API. So, it's actually a lot of cool stuff
that we're gonna be getting into
101

102
00:08:24.949 --> 00:08:27.999
coming up in this course.
