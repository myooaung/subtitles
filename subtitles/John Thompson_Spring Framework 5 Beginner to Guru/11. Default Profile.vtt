WEBVTT
0
1
00:00:05.400 --> 00:00:12.030
Previously, when I didn't have an Active Profile, the English bean and the Spanish bean they conflicted it
1

2
00:00:12.030 --> 00:00:14.570
and Spring didn't know which bean to wire in.
2

3
00:00:14.700 --> 00:00:20.220
Now there is a profile that is available and that's called the default profile
3

4
00:00:20.340 --> 00:00:27.250
within the Spring Framework and this profile is considered active if no active profiles meant set.
4

5
00:00:27.330 --> 00:00:35.050
So this is a way that we can use to say that the beans belongs to a default profile.
5

6
00:00:35.130 --> 00:00:42.960
So if there are no active profiles set, the default profile beans that are annotated that way will be
6

7
00:00:42.960 --> 00:00:44.480
wired into the context.
7

8
00:00:44.550 --> 00:00:49.380
So what is this going to allow us to do this to run the application without a profile set and we'll
8

9
00:00:49.380 --> 00:00:56.190
be able to take one of those beans set a default profile on it and allow Spring to bring that up. So
9

10
00:00:56.520 --> 00:01:03.090
we can jump over to IntelliJ and show you how to utilize Spring Frameworks default profile so we can set
10

11
00:01:03.090 --> 00:01:07.650
this up so we don't always have to specify an active profile for our application.
11

12
00:01:07.650 --> 00:01:12.060
Let's go ahead and configure this to have a default profile.
12

13
00:01:12.120 --> 00:01:19.080
So what I want to do is let's say we want to have the Spanish greeting service be the default if there's
13

14
00:01:19.080 --> 00:01:20.490
no active profile set.
14

15
00:01:20.520 --> 00:01:28.500
So what we can do is come up here and change this and what we want to do is just provide a list of values.
15

16
00:01:28.500 --> 00:01:33.410
You can have more than one active profile for a bean.
16

17
00:01:33.420 --> 00:01:40.730
So we're just going to modify this and then say default like so.
17

18
00:01:40.730 --> 00:01:48.280
And if I come in here to the active profiles and I'm just going to comment that out like so.
18

19
00:01:48.290 --> 00:01:51.700
So now that is no longer being set.
19

20
00:01:51.860 --> 00:01:57.500
And if I run this I'm going to go ahead and just run the application again and we will see that the
20

21
00:01:58.400 --> 00:02:00.820
Spanish version is being injected.
21

22
00:02:03.310 --> 00:02:12.620
You can see right here at the top we have hello world in Spanish and if I come back here and have the
22

23
00:02:12.620 --> 00:02:16.920
Spanish profile active we'll see that this still does in fact get picked up.
23

24
00:02:20.580 --> 00:02:26.430
And you could see that that is their. Lets change it back to English to verify that. It's actually still
24

25
00:02:26.430 --> 00:02:26.870
working.
25

26
00:02:29.360 --> 00:02:30.810
And now it's there.
26

27
00:02:30.840 --> 00:02:37.620
And if I come in comment this out, rather than the English bean getting wired up, we'll get the Spanish
27

28
00:02:37.620 --> 00:02:38.460
greeting service
28

29
00:02:38.850 --> 00:02:40.750
added in since there's no active profile.
29

30
00:02:40.740 --> 00:02:44.350
So again we can see there it is in Spanish.
30

31
00:02:44.460 --> 00:02:52.010
Just as a quick reminder, let me comment this out. Actually I'm just going to revert it real
31

32
00:02:52.020 --> 00:03:03.050
quick. So if I only have that if I'm not doing this default, right now I have a profile of ES and a profile of
32

33
00:03:03.080 --> 00:03:04.040
EN.
33

34
00:03:04.160 --> 00:03:10.870
And this is where because we don't have a default and we are asking for that version of the bean, we
34

35
00:03:10.880 --> 00:03:11.810
are gonna get that error.
35

36
00:03:11.810 --> 00:03:14.300
So that's where we need to actually provide the default.
36

37
00:03:14.330 --> 00:03:20.710
So if there is not a profile set we want this be picked up. So let me undo that change.
37

38
00:03:21.580 --> 00:03:24.730
And we'll re add that default to the profile. You can see
38

39
00:03:24.730 --> 00:03:29.380
now we will get that bean injected properly.
39

40
00:03:29.520 --> 00:03:35.880
So that is how you use the default profile. You just specify that Spring component is part of the default
40

41
00:03:35.880 --> 00:03:41.940
profile. When there is no active profile set, that bean will get picked up and used by the Spring
41

42
00:03:41.940 --> 00:03:43.100
context.
42

43
00:03:43.380 --> 00:03:49.200
Like I said at the beginning of this section, one of the core powers of the Spring Framework is Dependency
43

44
00:03:49.200 --> 00:03:49.650
Injection.
44

45
00:03:49.650 --> 00:03:54.510
So we've gone through and taken a look at a lot of the different options that we have for controlling
45

46
00:03:54.510 --> 00:03:55.440
Dependency Injection.
46

47
00:03:55.440 --> 00:04:01.090
So we have a number of implementations of our greeting service now and we are using features of Springs
47

48
00:04:01.170 --> 00:04:07.570
Dependency Injection to control exactly which implementations we want injected in which controller classes.
48

49
00:04:07.600 --> 00:04:15.420
You can see this is a very very powerful tool set and as you develop more utilizing Dependency Injection
49

50
00:04:15.750 --> 00:04:23.280
you'll get into more and more realistic use cases. For example, very common use case for the Spring Framework
50

51
00:04:23.280 --> 00:04:25.600
is to do some type of messaging.
51

52
00:04:25.740 --> 00:04:30.450
It might be JMS messaging, it might be with IBM MQ series.
52

53
00:04:30.450 --> 00:04:34.800
It might be was Kafka. Through dependency injection,
53

54
00:04:34.800 --> 00:04:40.490
you can actually set things up utilizing the Spring Framework to where that messaging layers abstracted.
54

55
00:04:40.490 --> 00:04:47.790
You might have JMS in one deployment of your application. You might have Kafka in a different
55

56
00:04:47.790 --> 00:04:53.190
deployment of your application and now through Dependency Injection and these tools that have shown you
56

57
00:04:53.310 --> 00:04:59.820
so far around Dependency Injection you have full control out of how the Spring inversion control container
57

58
00:05:00.210 --> 00:05:02.700
goes about composing your application.
58

59
00:05:02.700 --> 00:05:09.540
So this is very very powerful concept because your classes are going to have dependencies and the Spring
59

60
00:05:09.540 --> 00:05:15.060
framework through Inversion Controller is going to be determining how to inject those classes so you can
60

61
00:05:15.060 --> 00:05:21.660
see now through these different tool sets that we have in controlling how beans are injected and which
61

62
00:05:21.660 --> 00:05:27.180
beans are injected. It gives you a lot of control over the runtime of your application as it goes through
62

63
00:05:27.210 --> 00:05:28.740
different deployment environments.
