WEBVTT
0
1
00:00:00.060 --> 00:00:05.910
In this video, we are gonna be taking
a look, an introductory look at JMS. So,
1

2
00:00:05.910 --> 00:00:11.309
JMS stands for Java Messaging
Service. And, JMS is actually a Java
2

3
00:00:11.309 --> 00:00:16.890
API as part of standard Java libraries
and it allows Java applications to send
3

4
00:00:16.890 --> 00:00:21.210
messages to other applications. Now,
generally, the other application is
4

5
00:00:21.210 --> 00:00:25.980
considered to be a Java application but
not always. Since its inception, it's been
5

6
00:00:25.980 --> 00:00:30.240
extended out to other languages. It allows
other clients to actually consume JMS
6

7
00:00:30.240 --> 00:00:36.480
messages. Now, it is a standard part Java
as proper, but kind of like what JPA is,
7

8
00:00:36.480 --> 00:00:41.489
where JPA sets up the API standard
essentially a collection of interfaces.
8

9
00:00:41.489 --> 00:00:46.500
And then, you need an implementation to
work with. Here, example is Hibernate.
9

10
00:00:46.500 --> 00:00:51.690
That is an implementation of JPA where JMS
also needs implementation for it to
10

11
00:00:51.690 --> 00:00:57.270
work. The key thing about JMS is highly
scalable, very crazy scalable and it
11

12
00:00:57.270 --> 00:01:00.480
allows you to loosely couple
applications using asynchronous
12

13
00:01:00.480 --> 00:01:04.530
messaging. So, it's very important concept
being able to send these messages
13

14
00:01:04.530 --> 00:01:10.590
asynchronously. Now, JMS has many many
implementations to work with. Amazon SQS,
14

15
00:01:10.590 --> 00:01:16.290
a very popular one is ApacheMQ. Then, you
have some paid ones like IBM and Oracle.
15

16
00:01:16.290 --> 00:01:20.460
They both have major implementations.
RabbitMQ. It's a very competitive field.
16

17
00:01:20.460 --> 00:01:24.479
So, there's a lot to choose from. So,
in this course, we will be looking at
17

18
00:01:24.479 --> 00:01:29.400
Apache ActiveMQ. That's very stable and
very popular, so that's what we'll be
18

19
00:01:29.400 --> 00:01:32.820
using in this course. It's not an
endorsement. All these providers have
19

20
00:01:32.820 --> 00:01:36.180
different features and different
capabilities and there's a lot of
20

21
00:01:36.180 --> 00:01:39.750
discussion about which one's better.
They all have their own particular
21

22
00:01:39.750 --> 00:01:43.170
merits.
Now, you might be wondering why we use
22

23
00:01:43.170 --> 00:01:47.790
JMS over REST. JMS is a true messaging
service. You can simulate the
23

24
00:01:47.790 --> 00:01:52.920
functionality using RESTful services but
it is a true messaging service. It is
24

25
00:01:52.920 --> 00:01:58.080
asynchronous, basically send and
forget. You do get greater throughput
25

26
00:01:58.080 --> 00:02:05.009
with JMS. The HTTP protocol is rather
slow compared to the protocols that are
26

27
00:02:05.009 --> 00:02:09.300
available with JMS. So, big thing about
JMS is it's very very performant. You get
27

28
00:02:09.300 --> 00:02:14.430
crazy through puts on it. You also get a
lot of flexibility in a message delivery.
28

29
00:02:14.430 --> 00:02:19.019
There's a number of things that you can
do within the JMS provider. As far as
29

30
00:02:19.019 --> 00:02:24.840
delivery to one or many consumers.
Security is also a nice feature in JMS.
30

31
00:02:24.840 --> 00:02:29.700
It's very robust. A lot of capabilities
there. It's awesome and highly reliable. So, it
31

32
00:02:29.700 --> 00:02:33.060
can guarantee message delivery. So, a lot
of interesting things that you can do
32

33
00:02:33.060 --> 00:02:37.709
around that as well. Now there's a couple
types of messaging that we need to look
33

34
00:02:37.709 --> 00:02:43.049
at. One is, Point to Point, a message is
queued and delivered to one consumer.
34

35
00:02:43.049 --> 00:02:47.250
It's a very important concept. There can
be multiple consumers but the message is
35

36
00:02:47.250 --> 00:02:51.930
only delivered once. And then, the
consumers basically connect to what is
36

37
00:02:51.930 --> 00:02:57.150
called a queue. Then, the other type of
messaging is publish and subscribe.
37

38
00:02:57.150 --> 00:03:02.760
You deliver a message to one or more
subscribers. So, you'll have a publisher,
38

39
00:03:02.760 --> 00:03:07.620
it publish the message and then
numerous subscribers can subscribe to a
39

40
00:03:07.620 --> 00:03:12.720
topic and then get a copy of a message,
all messages that are sent to that topic.
40

41
00:03:12.720 --> 00:03:18.920
So, the key difference here is in both
cases, the message is being published
41

42
00:03:18.920 --> 00:03:24.180
point to point. It goes to a what is
termed a queue. Publishing / subscribe goes
42

43
00:03:24.180 --> 00:03:28.889
to a topic. So, let's take a look closer
to look at these Point to point.
43

44
00:03:28.889 --> 00:03:34.739
So, the message gets delivered to a queue
and then that consumer listens on that
44

45
00:03:34.739 --> 00:03:39.450
queue. And, a key point here is you can
have many consumers listening. You could
45

46
00:03:39.450 --> 00:03:43.680
have a dozen consumers listen. And so,
they're gonna have be receiving work
46

47
00:03:43.680 --> 00:03:48.590
with that message theoretically, so you
could have a dozen consumers. But only
47

48
00:03:48.590 --> 00:03:53.470
the message is guaranteed delivered to
exactly one consumer.
48

49
00:03:53.470 --> 00:03:57.370
It works a lot like a database where the
message gets delivered. And, the
49

50
00:03:57.370 --> 00:04:01.480
consumer actually needs to confirm and
commit that it's received that message
50

51
00:04:01.480 --> 00:04:06.010
properly. So, if it errors out, it effect
could be rolls back in that consumer or
51

52
00:04:06.010 --> 00:04:11.320
another consumer now can get that
message. The other scenarios, the
52

53
00:04:11.320 --> 00:04:16.570
Publish/Subscribe. So, a message gets
put to a topic this time. And then
53

54
00:04:16.570 --> 00:04:20.680
basically, the consumer say I want to
listen to this topic and get all
54

55
00:04:20.680 --> 00:04:24.850
messages sent to that. So, here one
message goes to the topic and I'm
55

56
00:04:24.850 --> 00:04:29.800
showing that it goes to three different
subscribers. Now, let's get in some key
56

57
00:04:29.800 --> 00:04:33.670
terms here.
JMS Provider, that is the JMS
57

58
00:04:33.670 --> 00:04:38.590
Implementation. Remember, JMS is an API
part of Java. Then, you need a specific
58

59
00:04:38.590 --> 00:04:43.030
implementation. You have the JMS Client,
that is an application that is going to
59

60
00:04:43.030 --> 00:04:48.910
be sending or receiving messages from
the JMS Provider. Then, you have a JMS
60

61
00:04:48.910 --> 00:04:54.150
Producer or Publisher, obviously, sends
messages. The JMS Consumer or Subscriber
61

62
00:04:54.150 --> 00:04:59.440
receives messages. And then of course, a
JMS Message, that is an entity of
62

63
00:04:59.440 --> 00:05:02.980
data sent and we'll be getting into a
lot more details on that coming up. And
63

64
00:05:02.980 --> 00:05:10.330
then, JMS Queue, again, for point-to-point
messages. Typically, this is consider FIFO
64

65
00:05:10.330 --> 00:05:14.200
first-in first-out.
That's how queues typically work. Some
65

66
00:05:14.200 --> 00:05:19.390
providers do not guarantee that. So can
be provider specific. But not always.
66

67
00:05:19.390 --> 00:05:25.240
Let's see here. Then, we have a JMS Topic.
Again, similar to a queue but this is a
67

68
00:05:25.240 --> 00:05:31.600
publish and subscribe scenario. Now, JMS
Message itself is going to have three
68

69
00:05:31.600 --> 00:05:36.070
parts. A header that is gonna contain
a metadata about the message and then
69

70
00:05:36.070 --> 00:05:39.840
properties. There are three different types
of properties within a JMS application.
70

71
00:05:39.840 --> 00:05:45.250
These are things that the client can set
on the message provider. These are
71

72
00:05:45.250 --> 00:05:49.419
provider specific. So, depending on what
provider you're using, there might be
72

73
00:05:49.419 --> 00:05:53.290
none, there might be many. So, again it's a
very competitive field and there's
73

74
00:05:53.290 --> 00:05:57.850
quite a bit of diversity there in
the providers. And then, standard
74

75
00:05:57.850 --> 00:06:03.460
properties. The JMS API actually sets up
standard properties and some of these
75

76
00:06:03.460 --> 00:06:07.420
might not be supported by the provider.
And then finally, the last part of
76

77
00:06:07.420 --> 00:06:11.490
message of course is the payload and
that is going to be the message itself.
77

78
00:06:11.490 --> 00:06:16.900
Now, some of the standard JMS header
properties are that the JMSCorrelationID.
78

79
00:06:16.900 --> 00:06:21.250
This is typically a string value.
It's typically a UUID and the
79

80
00:06:21.250 --> 00:06:26.800
application can set that. So, this is
often used if you have a message that's
80

81
00:06:26.800 --> 00:06:29.020
gonna have multiple hops, multiple
consumers.
81

82
00:06:29.020 --> 00:06:33.700
You'll set this correlation ID so you
can see that message travel along
82

83
00:06:33.700 --> 00:06:39.280
through through the system. And then,
JMSExpires. So, this is one of those things
83

84
00:06:39.280 --> 00:06:43.330
where we can set an expiry on the
message. So, if the message isn't consumed
84

85
00:06:43.330 --> 00:06:48.220
in X amount of time, the provider can
delete it. See then, the JMSMessageId again.
85

86
00:06:48.220 --> 00:06:53.500
This is a string value typically set by
the each JMS provider. JMSPriority, I think
86

87
00:06:53.500 --> 00:06:56.950
it's one through nine if I remember
right up going off the top of my head
87

88
00:06:56.950 --> 00:07:01.900
there. Not something you use that much
but there are use cases for that. JMSTimestamp,
88

89
00:07:01.900 --> 00:07:07.330
that is one the message was
set. And then, the JMSType that is a
89

90
00:07:07.330 --> 00:07:11.250
string and that's a type of message. And,
we'll cover that in an upcoming slide.
90

91
00:07:11.250 --> 00:07:16.540
JMSReplyTo and this is where you can say
I'm sending a message to a queue or
91

92
00:07:16.540 --> 00:07:21.190
topic but I'm gonna be listening for a
reply in a specific queue. So, that's a
92

93
00:07:21.190 --> 00:07:26.830
specific address to listen to for
message is coming back. Then, JMSRedelivery,
93

94
00:07:26.830 --> 00:07:32.080
JMSRedelivery. Again, you could add error
out so a client could be processing the
94

95
00:07:32.080 --> 00:07:37.660
message fail for whatever reason and
then the message would go back and be
95

96
00:07:37.660 --> 00:07:41.770
retried. JMSDeliveryMode, this is a little
confusing if you read the specification
96

97
00:07:41.770 --> 00:07:45.760
on this. It's a little nebulous on how
they define it. This is gonna be
97

98
00:07:45.760 --> 00:07:51.670
persistent or non persistent. And, here
Persistent is the default and this says
98

99
00:07:51.670 --> 00:07:55.780
the JMS provider should make best effort
to deliver the message. Non-Persistent
99

100
00:07:55.780 --> 00:08:00.220
occasional message lost is acceptable
which it's kind of a weird term I like.
100

101
00:08:00.220 --> 00:08:04.690
You can occasionally you lose messages.
And, it kind of indicates that the
101

102
00:08:04.690 --> 00:08:09.520
provider should make its best effort to
deliver messages by default. But you can
102

103
00:08:09.520 --> 00:08:14.140
say these type of messages are not that
important. So, you can occasionally lose
103

104
00:08:14.140 --> 00:08:17.860
them if there's some type of condition
like the provider is an encountering like
104

105
00:08:17.860 --> 00:08:23.300
load disk space or something like that.
Continuing with JMS message properties,
105

106
00:08:23.300 --> 00:08:29.060
these are standard properties defined by
the JMS specification. So, we have JSMXUserID,
106

107
00:08:29.060 --> 00:08:34.400
that's pretty self-explanatory. JMSXAppID,
yeah, this is set by the provider so when
107

108
00:08:34.400 --> 00:08:37.610
you connect, it's gonna assign your
application ID. JMSDeliveryCount,
108

109
00:08:37.610 --> 00:08:40.820
Remember, we were talking about three tries
there. JMSXGroupID and JMSXGroupSeq, this
109

110
00:08:40.820 --> 00:08:45.140
is something that you can use with the
client and to create a group of messages.
110

111
00:08:45.140 --> 00:08:49.550
The JMSProduceTDIX, this is the transaction ID  when the message was
111

112
00:08:49.550 --> 00:08:55.790
produced. The converse of that is the
JMSXConsumerTXID. So, the
112

113
00:08:55.790 --> 00:08:59.630
transaction ID of when the message was
consumed togethe set by the provider. And,
113

114
00:08:59.630 --> 00:09:05.030
the JMSXRcTimestamp last when the
consumer actually consumed it. And then,
114

115
00:09:05.030 --> 00:09:09.500
there's a property for JMSXState. This is
kind of internal workings of the JMS
115

116
00:09:09.500 --> 00:09:14.860
provider but there's a standard on in
standard states to deal with.
116

117
00:09:14.860 --> 00:09:19.450
Then, we get into JMS custom properties.
This is where you'll typically work to
117

118
00:09:19.450 --> 00:09:23.260
some type of metadata about the message
that you wanna work with. There's a
118

119
00:09:23.260 --> 00:09:27.580
number of use cases for that once you
get into messaging. So, these are set as
119

120
00:09:27.580 --> 00:09:33.250
key value pairs. The key is a string and
the values must be one of just about any
120

121
00:09:33.250 --> 00:09:38.890
Java common property. So your step string
bullying double float and short long or
121

122
00:09:38.890 --> 00:09:44.320
objects. So, a lot of flexibility there as to how you can set custom properties
122

123
00:09:44.320 --> 00:09:50.140
on a JMS message. And then, JMS provider
properties. These again are provider
123

124
00:09:50.140 --> 00:09:54.430
specific and these are set on the
message as JMS_<provider name>
124

125
00:09:54.430 --> 00:09:58.810
The provider can set these
specific properties, usually, for some
125

126
00:09:58.810 --> 00:10:03.700
type of provider specific feature. So,
that you're gonna have to go to your
126

127
00:10:03.700 --> 00:10:06.850
provider documentation to find out what
these are, depending on what instance
127

128
00:10:06.850 --> 00:10:13.750
that you picked up. Now, JMS message types.
The first one is just a Message. You
128

129
00:10:13.750 --> 00:10:17.890
don't have a payload there. So, you're
gonna be using properties to notify
129

130
00:10:17.890 --> 00:10:22.570
some type of event. Then, you have a BytesMessage, a TextMessage, a StreamMessage
130

131
00:10:22.570 --> 00:10:26.620
which is sequence of Java to primitives
which kind of interesting, MapMessage
131

132
00:10:26.620 --> 00:10:30.220
and ObjectMessage. So, these are
different things. And, most of these
132

133
00:10:30.220 --> 00:10:34.990
you're gonna have to be ensure that the
other side you're using a actual and
133

134
00:10:34.990 --> 00:10:39.580
Java client. Now, you might be wondering
which message type to use. I wanna
134

135
00:10:39.580 --> 00:10:45.970
point out that JMS is very old. It's
from 1998. So, it's fairly old, fairly
135

136
00:10:45.970 --> 00:10:49.600
mature, very mature. I think we're on to
something. I'm forgetting what exactly
136

137
00:10:49.600 --> 00:10:54.630
when the JMS released. But it's good old
and mature. It's been around forever.
137

138
00:10:54.630 --> 00:11:00.010
Originally, it was focused on Java to
Java messaging but technology has grown
138

139
00:11:00.010 --> 00:11:05.950
and evolved. And right now, the current
what's considered a air quotes best
139

140
00:11:05.950 --> 00:11:12.430
practice, it's gonna be using JMS TextMessages but have a JSON or XML payload
140

141
00:11:12.430 --> 00:11:17.470
in there. So, if you were to use a map or
a serialized object, you're guaranteeing
141

142
00:11:17.470 --> 00:11:24.100
that you cannot use have a non-Java
client on the other side of it. So, this
142

143
00:11:24.100 --> 00:11:27.850
allows you to decouple from the Java
technology because it's very common to
143

144
00:11:27.850 --> 00:11:30.620
use JMS then
bridge to some type of other messaging
144

145
00:11:30.620 --> 00:11:37.100
service for non Java providers. And also,
if you're using JSON or XML payloads and a
145

146
00:11:37.100 --> 00:11:42.980
text message, if you decide to migrate to
a non-JMS provider, it will make your
146

147
00:11:42.980 --> 00:11:47.990
life less painful. Because I mean
right now, messaging is becoming more and
147

148
00:11:47.990 --> 00:11:50.780
more abstracted. One thing we're not
gonna be covering in the course is
148

149
00:11:50.780 --> 00:11:54.650
tools like Spring Integration and really
really starts abstracting the messaging
149

150
00:11:54.650 --> 00:11:59.660
layer. You're just sending a message and
you as a Developer, you're completely
150

151
00:11:59.660 --> 00:12:03.920
unaware of what the messaging
infrastructure is. It really abstract it
151

152
00:12:03.920 --> 00:12:09.500
out. So, your same code through Spring
configuration you'd be talking to JMS
152

153
00:12:09.500 --> 00:12:14.390
system, RabbitMQ, Kafka. So, there's a
number of different things that you'd be
153

154
00:12:14.390 --> 00:12:18.380
using under the covers which be really
completely abstracted. So, if you're
154

155
00:12:18.380 --> 00:12:22.730
sticking with a JSON / XML payload and
that sticks with the abstraction. So,
155

156
00:12:22.730 --> 00:12:26.690
that's really kind of where the industry
is at right now. It's using text messages
156

157
00:12:26.690 --> 00:12:30.730
with JSON or XML payloads.
