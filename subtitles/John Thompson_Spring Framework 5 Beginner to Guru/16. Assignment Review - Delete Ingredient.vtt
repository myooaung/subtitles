WEBVTT
0
1
00:00:04.310 --> 00:00:08.880
Alright we want to review the
assignment to set up the delete of an
1

2
00:00:08.880 --> 00:00:13.230
ingredient. So the first thing I got up
here, let's see here. Let's go to the
2

3
00:00:13.230 --> 00:00:18.119
controller test and I want to test the
controller action and let's bring up the
3

4
00:00:18.119 --> 00:00:23.730
IngredientController. So I'm doing a
split screen here. On the top, I have the
4

5
00:00:23.730 --> 00:00:27.840
controller and down below I have the
tests. So looking at the tests we're
5

6
00:00:27.840 --> 00:00:35.100
going to perform a get on the URL of
recipe number two and ingredient number
6

7
00:00:35.100 --> 00:00:41.399
three is the URL and we are going to
pass that through. Actually we don't
7

8
00:00:41.399 --> 00:00:50.520
need this. We don't need that there. So I
don't need to do the form post we just
8

9
00:00:50.520 --> 00:00:57.149
need to do that get. And then we'll go
ahead and test that, and you'll see that
9

10
00:00:57.149 --> 00:01:03.660
it's going against the controller and
that is passing as well. So we can
10

11
00:01:03.660 --> 00:01:07.080
see that it comes into the controller
and we are mocking out the Ingredient
11

12
00:01:07.080 --> 00:01:12.600
Service and because our delete option
doesn't return anything, it returns a
12

13
00:01:12.600 --> 00:01:17.729
void. It's really not much for us to
test. We probably could add in verify
13

14
00:01:17.729 --> 00:01:25.140
mock. Let's do that. So our IngredientService is mocked in this case. Let me
14

15
00:01:25.140 --> 00:01:34.020
say times once and we want to make sure
that the deleteById was called and
15

16
00:01:34.020 --> 00:01:40.020
we'll see anyLong and now
let's verify that. So we're going to
16

17
00:01:40.020 --> 00:01:45.960
verify that mock actually run so let's
go ahead and run this again and make
17

18
00:01:45.960 --> 00:01:51.479
sure that our mock does get invoked. Which it does. So next thing is let's
18

19
00:01:51.479 --> 00:01:56.820
take a look at the service. So this
one's a little more involved so let's
19

20
00:01:56.820 --> 00:02:02.070
take a look at the implementation here
on the IngredientService. So I'll hide this
20

21
00:02:02.070 --> 00:02:07.530
so it can get better visibility here. So we
have deleteById and we're going to go
21

22
00:02:07.530 --> 00:02:11.970
out to the repository get back an
Optional and then if that Optional is
22

23
00:02:11.970 --> 00:02:15.480
present, we're going
fall in and look for the ingredient
23

24
00:02:15.480 --> 00:02:21.040
assigned to that. We'll use Java eight
streaming to slurp that out of there
24

25
00:02:21.040 --> 00:02:26.380
and slurp is a technical term. And then
if that Optional is present, we're going
25

26
00:02:26.380 --> 00:02:33.510
to go in and delete it. So we'll delete
it from the recipe and also set the
26

27
00:02:33.510 --> 00:02:38.040
recipe to null on it. So we'll null out that
relationship and this will cause
27

28
00:02:38.040 --> 00:02:43.420
Hibernate to delete it from the database
which is what we want. So here, we're
28

29
00:02:43.420 --> 00:02:47.880
going to set up our mock object in the
given and then we'll set up the Mock
29

30
00:02:47.880 --> 00:02:54.010
implication there on line 122 in the
bottom window to delete that. So we want
30

31
00:02:54.010 --> 00:02:59.739
to do a findById and return back that
Optional which will fulfill this line up
31

32
00:02:59.739 --> 00:03:05.860
here. And then we'll go through and do
the deleteById so we'll call the
32

33
00:03:05.860 --> 00:03:09.640
service, and now we'll invoke the mocks
and then we're going to make sure that
33

34
00:03:09.640 --> 00:03:16.000
we call the RecipeRepository one time
findById and then we want to also make
34

35
00:03:16.000 --> 00:03:20.610
sure, this is important that our logic is
right, to fall through to this guy and
35

36
00:03:20.610 --> 00:03:27.549
save the class. So that's going to verify
line 138 here. So those two lines will
36

37
00:03:27.549 --> 00:03:33.190
work in conjunction. So now we have a
pretty good test coverage here and I'm
37

38
00:03:33.190 --> 00:03:38.680
not implementing any logic here, throwing
error for a delete. So we'll get into
38

39
00:03:38.680 --> 00:03:43.150
exception handling in the future in the
course but right now, we're just going to
39

40
00:03:43.150 --> 00:03:48.100
log out. So I like to put in a log
message and then say the ID value. A lot
40

41
00:03:48.100 --> 00:03:52.000
of people leave off that
little piece and if you're
41

42
00:03:52.000 --> 00:03:56.709
troubleshooting an app later, you see
okay it wasn't found. But what came
42

43
00:03:56.709 --> 00:04:00.010
in? What was the data value that wasn't
found? So that's important
43

44
00:04:00.010 --> 00:04:05.079
piece. So let's go ahead and run all the
tests now. Double check that this runs.
44

45
00:04:05.079 --> 00:04:12.640
I want to verify that then we'll run all the tests. So you can see that runs quickly. Now
45

46
00:04:12.640 --> 00:04:16.470
we'll run up all our tests.
46

47
00:04:17.620 --> 00:04:21.160
And you can see through this exercise,
our collection of tests has been growing.
47

48
00:04:21.160 --> 00:04:26.800
I think when we got into the ingredient
stuff, we had 50 tests and now we're at
48

49
00:04:26.800 --> 00:04:31.540
61. So going through the last few videos
we added in another 11 tests for our
49

50
00:04:31.540 --> 00:04:36.970
coverage. Now let's come up to the
application. We will run that and take a
50

51
00:04:36.970 --> 00:04:44.889
look at it in the browser. Spring Boot is almost up. There we go. Come
51

52
00:04:44.889 --> 00:04:55.419
on over here and let's go back to the
list. So let's pick on guacamole. Let's
52

53
00:04:55.419 --> 00:05:01.270
view that. Now we can come in here and we
already had the delete link there,
53

54
00:05:01.270 --> 00:05:05.770
so we can go ahead and click delete. We
can see that it is going through
54

55
00:05:05.770 --> 00:05:11.350
deleting those and let's double check and
take a look at the template as well just
55

56
00:05:11.350 --> 00:05:18.550
to show you that guy's that. I did have it
on previous. So we're ingredient and we
56

57
00:05:18.550 --> 00:05:25.770
want the list view and let me close out
this bottom window and hide that.
57

58
00:05:25.770 --> 00:05:32.050
So we can see down here on the delete
action, we are using Thymeleaf and the @
58

59
00:05:32.050 --> 00:05:38.470
sand, at is used for URL. So Thymeleaf will generate the URL for
59

60
00:05:38.470 --> 00:05:44.200
us and we are telling it a URL path of
recipe, the recipe ID slash ingredient,
60

61
00:05:44.200 --> 00:05:49.090
the ingredient ID and then that gives us
the delete action. So we're kind of
61

62
00:05:49.090 --> 00:05:54.190
mimicking out a RESTful verb there. And
so when we click on that,
62

63
00:05:54.190 --> 00:06:00.130
this line here is what
provides us the URL to delete a recipe's
63

64
00:06:00.130 --> 00:06:02.729
ingredient.
