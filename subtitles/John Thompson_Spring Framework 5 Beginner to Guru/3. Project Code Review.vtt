WEBVTT
1
00:00:04.890 --> 00:00:08.070
In this video we're going to go through and do a code review of the project.

2
00:00:08.070 --> 00:00:11.390
We're going to be using to set up for using spring rest stock.

3
00:00:11.400 --> 00:00:15.140
So let's go in and start taking a look at some of what this project does.

4
00:00:15.180 --> 00:00:20.280
And if you're in my micro services course this is essentially the beer service that we're doing the

5
00:00:20.280 --> 00:00:21.120
live coating on.

6
00:00:21.120 --> 00:00:27.380
So it's really just a snap of that project but this section of the course is going to be reused a couple

7
00:00:27.380 --> 00:00:28.500
of different spots.

8
00:00:28.500 --> 00:00:33.330
So if you're not doing that live coding assignment and not in the micro services course please pay attention

9
00:00:33.330 --> 00:00:34.530
here we'll go through this.

10
00:00:34.620 --> 00:00:38.160
But if you've been doing live coding you might want to go ahead and skip because this would be very

11
00:00:38.160 --> 00:00:39.500
very familiar to you.

12
00:00:39.510 --> 00:00:46.740
So what we have here is a new project and we are on Java eleven in this project and the Spring Boot

13
00:00:46.740 --> 00:00:49.180
2 1 5 that is the latest release.

14
00:00:49.470 --> 00:00:51.090
We should have Spring Boot to that too.

15
00:00:51.090 --> 00:00:52.920
Coming up very soon.

16
00:00:52.920 --> 00:00:55.590
And in this it's a pretty simple project.

17
00:00:55.590 --> 00:01:01.370
We have spring good starter web JPA and we're just using H2 right now.

18
00:01:01.620 --> 00:01:06.400
The X mill buying stuff that is needed for Java lemons since that is no longer included.

19
00:01:06.450 --> 00:01:11.970
We have project Lombok in this project and then we also have map stroke to help us out with the mappings.

20
00:01:11.970 --> 00:01:19.560
And down here on line sixty seven and C1 bring in the Spring Boot starter test and I'm excluding explicitly

21
00:01:20.010 --> 00:01:24.070
J Unit 4 and I'm bringing in June 5.

22
00:01:24.090 --> 00:01:29.190
So I think Spring Boot to that too is going to be moving a J at 5 I know they had some things that were

23
00:01:29.190 --> 00:01:35.130
stopping them but hopefully the next couple months I get that all worked out and we'll be on at 5 going

24
00:01:35.130 --> 00:01:36.630
forward with Spring Boot.

25
00:01:36.630 --> 00:01:38.490
But here I'm explicitly go into J.

26
00:01:38.490 --> 00:01:41.500
Unit 5 in this project.

27
00:01:41.760 --> 00:01:47.610
And then finally here what's going on here is we have the standard Spring Boot maven plug in and then

28
00:01:47.610 --> 00:01:52.020
the compiler plug in because I'm using map struck and project Lombok together.

29
00:01:52.110 --> 00:01:57.210
This is the configuration to get these two working together because they're they both provide us code

30
00:01:57.500 --> 00:02:00.510
and that code is generated through annotation processing.

31
00:02:00.510 --> 00:02:05.310
So this is a configuration get these two projects working together and they actually work together quite

32
00:02:05.310 --> 00:02:06.140
nicely.

33
00:02:06.180 --> 00:02:11.460
So let's go in and start taking a look at the source code for this I mean open up the Java and we will

34
00:02:11.460 --> 00:02:13.220
go from the bottom up.

35
00:02:13.230 --> 00:02:17.610
So we have a domain class very simple we're dealing with a Beer's here.

36
00:02:17.640 --> 00:02:26.200
So we have a UID for it a version timestamps beer name beer style UPC price minimum on hand and quiet

37
00:02:26.200 --> 00:02:29.040
as Bruce just mentioned attributes about that.

38
00:02:29.070 --> 00:02:36.360
And then you can see this is set up for JPA so we are persisting to a relational database on this.

39
00:02:36.600 --> 00:02:43.470
We are using spring data JPA so I have a paging and sorting repository setup and then the implementation

40
00:02:43.470 --> 00:02:48.330
of this is going to be generated by spring data JPA for us.

41
00:02:48.600 --> 00:02:52.590
And then one thing that we are doing is we're going to initialize the database.

42
00:02:52.590 --> 00:03:00.030
So we have our bootstrap package and I'm calling it a beer loader that implements the command line runner.

43
00:03:00.260 --> 00:03:02.540
And that's going to take on a beer repository.

44
00:03:02.760 --> 00:03:07.920
And this is just going to load up two beers and these are a couple of beers from a microbrewery near

45
00:03:07.920 --> 00:03:08.820
me.

46
00:03:08.820 --> 00:03:12.860
Don't drink mango Bob's very much but I do enjoy glass.

47
00:03:12.900 --> 00:03:18.070
That is one of my favorite microbrewery beers from here in St. Petersburg Florida.

48
00:03:18.180 --> 00:03:22.770
Now coming up from this we are going to have a beer model.

49
00:03:22.770 --> 00:03:27.830
This is the the data that is gonna be shared with the API clients.

50
00:03:27.990 --> 00:03:34.740
So we have a data transfer object you can see this is annotated with Project Lombok and a variety of

51
00:03:34.740 --> 00:03:36.870
constraints are set up on it.

52
00:03:36.930 --> 00:03:38.640
We have a page list.

53
00:03:38.790 --> 00:03:43.710
So this is going to implement standard spring framework paging mechanisms.

54
00:03:43.710 --> 00:03:48.480
Then we have an enumeration for the different types of beers that are going to be flowing through us

55
00:03:49.690 --> 00:03:52.510
and here we have our mappings.

56
00:03:52.510 --> 00:03:55.840
So this is a standard map struct mapper.

57
00:03:55.840 --> 00:04:01.530
So this is going to declare that the map structure is going to provide the implementation for this.

58
00:04:01.600 --> 00:04:09.640
And then finally we have a date mapper because in the database we are using Java Java ask l timestamps

59
00:04:09.760 --> 00:04:12.910
and then on the one tier we're using an offset date in time.

60
00:04:12.910 --> 00:04:17.650
So we have to convert between these and this is the class that does that conversion and it works in

61
00:04:17.650 --> 00:04:19.430
conjunction with map start.

62
00:04:19.750 --> 00:04:26.490
So let's go in and take a look at the controller now so that we have a beer controller and press implementation

63
00:04:26.490 --> 00:04:28.020
of the controller.

64
00:04:28.050 --> 00:04:31.410
Now in this case a lot of people ask if you really need a service layer here.

65
00:04:31.410 --> 00:04:35.460
I'm now using a service I'm utilizing the repository directly.

66
00:04:35.460 --> 00:04:39.930
Typically I do implement a service layer but this is a really really simple example.

67
00:04:39.930 --> 00:04:43.920
Primarily this project is for demonstrating documentation.

68
00:04:43.920 --> 00:04:46.800
So we're going to be setting up the rest docs in this documentation.

69
00:04:46.800 --> 00:04:50.430
So this is perfectly fine for our needs.

70
00:04:50.430 --> 00:04:59.480
So this is our controller and then let's go into the test and we can see that we have a spring web MVC

71
00:04:59.480 --> 00:05:03.900
test in that we are auto wiring in mock NBC.

72
00:05:04.100 --> 00:05:10.390
We're doing a component scan to bring in the maps and then we are marking the beer repository because

73
00:05:10.650 --> 00:05:15.590
in this test we don't wanna be bringing up the database layer when this just bring up the Web layer.

74
00:05:15.590 --> 00:05:18.650
So that's perfectly good for our needs.

75
00:05:18.680 --> 00:05:24.620
And you could see that we have three test here and what we are going to do is will enhance these test

76
00:05:24.860 --> 00:05:29.780
with the documentation capabilities of spring rust back but that's going to be coming up in the course

77
00:05:30.100 --> 00:05:35.450
so coming up in the course what we're going to need to do is obviously add in the dependencies for spring

78
00:05:35.450 --> 00:05:35.880
Rostock.

79
00:05:35.930 --> 00:05:40.670
Then we'll have to configure maven to support spring Rostock setup some of the infrastructure for it

80
00:05:40.670 --> 00:05:47.010
and whatnot and then we can enhance our test to start generating spring rest the documentation that

81
00:05:47.050 --> 00:05:51.790
going forward this is the project that we will be using to do all that with spring rust out.
