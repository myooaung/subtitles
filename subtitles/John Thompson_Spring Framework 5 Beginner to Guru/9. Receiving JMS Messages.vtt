WEBVTT
0
1
00:00:04.040 --> 00:00:09.240
All right! In the previous video, I showed
you how we could go ahead and send out
1

2
00:00:09.240 --> 00:00:13.590
messages to a JMS queue. What we wanna
do here is start receiving those
2

3
00:00:13.590 --> 00:00:17.820
messages. So, I'm gonna set up a
message listener and it's really really
3

4
00:00:17.820 --> 00:00:21.930
easy to do inside of Spring. So, I'm gonna come over here and I'm gonna
4

5
00:00:21.930 --> 00:00:29.750
create a new Package want to say
listener like so.
5

6
00:00:30.300 --> 00:00:34.580
And, let me create a new Java Class.
6

7
00:00:35.940 --> 00:00:40.020
I'm just gonna call that HelloMessageListener. And really could call this
7

8
00:00:40.020 --> 00:00:46.520
whatever we wanted. And of course, this is
gonna be a Spring @Component.
8

9
00:00:47.809 --> 00:00:53.719
Now, what I wanna do here is I'm gonna set up a special method and I'm gonna
9

10
00:00:53.719 --> 00:00:58.890
say public.
I'm just gonna call that listen like
10

11
00:00:58.890 --> 00:01:05.280
so. And now, what I can do is I can ask
that for a few things. So, remember, we're
11

12
00:01:05.280 --> 00:01:14.180
expecting a helloWorldMessage and I
can also ask it for MessageHeaders.
12

13
00:01:14.360 --> 00:01:20.530
I'm just gonna call that headers and
then also Message.
13

14
00:01:22.070 --> 00:01:29.120
In here, I'm gonna show you, remember I
previously used the JMS flavor. Here, I'm
14

15
00:01:29.120 --> 00:01:34.400
gonna use the Spring message flavor. Just
to show you how Spring can actually
15

16
00:01:34.400 --> 00:01:38.270
abstract the implementation that we're
working with. So, here I have three
16

17
00:01:38.270 --> 00:01:42.170
properties here. Now, there's couple
annotations that we wanna be working
17

18
00:01:42.170 --> 00:01:49.280
with. Now, this is gonna be 
@Payload. So, this @Payload annotation is
18

19
00:01:49.280 --> 00:01:53.479
gonna tell Spring Framework to go
ahead and deserialize up component. The
19

20
00:01:53.479 --> 00:01:58.460
payload of that JMS message, it says, I'm
expecting you to get a message,
20

21
00:01:58.460 --> 00:02:05.119
a HelloWorldMessage from this queue. In here, I
can also do headers. This headers
21

22
00:02:05.119 --> 00:02:08.750
annotation is gonna tell Spring
Framework to go ahead and get the
22

23
00:02:08.750 --> 00:02:12.410
MessageHeaders. And in this case, it's
gonna be equivalent to the JMS
23

24
00:02:12.410 --> 00:02:16.220
message properties and the header
properties. And, we will take a closer
24

25
00:02:16.220 --> 00:02:23.600
look at that. Now, what I can do here
is I wanna setup a JMS listener and
25

26
00:02:23.600 --> 00:02:27.410
you can see a there's a listener or
listeners. I'm gonna be taking a
26

27
00:02:27.410 --> 00:02:33.980
listener specifically. And the
destination again. The same, it's gonna
27

28
00:02:33.980 --> 00:02:41.700
be the JmsConfig and we wanna do MY_QUEUE like so. In here,
28

29
00:02:41.700 --> 00:02:46.020
use System.out
say
29

30
00:02:46.920 --> 00:02:51.220
I'm just gonna do a System.out saying "I Got A Message!!!!".
30

31
00:02:51.220 --> 00:02:54.840
And also, System.out and let's see here, we
31

32
00:02:54.840 --> 00:03:01.260
wanna do that helloWorldMessage. And,
I came out annotated us with the
32

33
00:03:01.270 --> 00:03:07.320
@Data. So, yes, I do have that with @Data. So,
we'll get a nice hello world message via
33

34
00:03:07.320 --> 00:03:11.320
Project Lombok. So, when it gets despecialized it will have that functionality
34

35
00:03:11.320 --> 00:03:16.330
there. So, that's really all we need to
set up. I am marking this as a Spring
35

36
00:03:16.330 --> 00:03:20.920
Framework component and then I'm
annotating this method with @JmsListener
36

37
00:03:20.920 --> 00:03:25.240
and this is telling Spring, 'Hey, listen to
this queue name and when there's a
37

38
00:03:25.240 --> 00:03:31.420
message on that queue, send the message
to this method'. So, let's go ahead and run
38

39
00:03:31.420 --> 00:03:36.090
this. I'm gonna start this up now.
39

40
00:03:37.870 --> 00:03:42.160
You can see here that I am in fact
getting a message it. So, I can see
40

41
00:03:42.160 --> 00:03:46.840
Message Sent!!. I got a message and you can
see it's nearly instantaneous. So, JMS
41

42
00:03:46.840 --> 00:03:50.349
is very fast. When a message gets on the
queue, it could solve the queue in a
42

43
00:03:50.349 --> 00:03:55.269
hurry. So, you can see I can't see a delay
from when it's sent to when it's
43

44
00:03:55.269 --> 00:04:01.090
received. So, I'm gonna go ahead and stop
this. And what I wanna do now is I wanna
44

45
00:04:01.090 --> 00:04:05.440
bring this up in the debugger and
show you some properties here. So, let's
45

46
00:04:05.440 --> 00:04:11.920
go ahead and I'm adding a debug in this.
And rather than click on this one, I'm
46

47
00:04:11.920 --> 00:04:17.620
gonna run it with a little bug icon and
it should stop at that break point for
47

48
00:04:17.620 --> 00:04:21.959
us. So, we can inspect what's going on
there a little bit closer.
48

49
00:04:22.669 --> 00:04:29.430
You can see here came up
in the debugger. And you can see, I resize
49

50
00:04:29.430 --> 00:04:33.000
this just a little bit. That's a little
bit better. So, you can see here I'm on a
50

51
00:04:33.000 --> 00:04:38.250
breakpoint on line 26. I'm on that system
outline and you can see here's the class,
51

52
00:04:38.250 --> 00:04:44.789
here's the helloWorldMessage. So, this is
the Java object that Spring Framework
52

53
00:04:44.789 --> 00:04:49.830
bound. So, it went through the de-serialization process. And now, if I take a
53

54
00:04:49.830 --> 00:04:56.460
look at the second property, the headers,
the message headers, we can see here.
54

55
00:04:56.460 --> 00:05:02.340
Remember, when we start talking originally about JMS,
these are a variety of the JMS property.
55

56
00:05:02.340 --> 00:05:08.099
So, you can see the JMS delivery mode.
The JMS redelivery, the destination, the
56

57
00:05:08.099 --> 00:05:12.630
timestamp, expiration. So, a number of
different properties and then remember
57

58
00:05:12.630 --> 00:05:17.729
here, we set that type property in our
configuration. Remember, when we set up
58

59
00:05:17.729 --> 00:05:23.340
the message converter, we set that type.
So, here we set _type and you
59

60
00:05:23.340 --> 00:05:27.840
can see the value. So, that is the fully
qualified class name of the HelloWorldMessage.
60

61
00:05:27.840 --> 00:05:33.630
So now, we know how to queue that.
Then let me collapse down the other
61

62
00:05:33.630 --> 00:05:40.469
properties and the headers. Let's take a
closer look at the message. And here, this
62

63
00:05:40.469 --> 00:05:46.289
is the actual JMS message. So, you can see
that as a ActiveMQ text message. So, that
63

64
00:05:46.289 --> 00:05:53.520
is the actual implementation of a JMS
text message. And here, we can see that it
64

65
00:05:53.520 --> 00:05:57.750
is a text message and there's a JSON
payload. So, that message does not
65

66
00:05:57.750 --> 00:06:02.130
actually have a serialized object or a
Java object on it. Actually, it has a string
66

67
00:06:02.130 --> 00:06:08.969
of JSON that is attached to it. So, what
Spring is doing is it is deserializing
67

68
00:06:08.969 --> 00:06:12.690
that into a Java object for us. But
because I've bound the message there, we
68

69
00:06:12.690 --> 00:06:17.370
can see the full properties of that
message. And here, we can see a number of
69

70
00:06:17.370 --> 00:06:21.570
different properties. Some of the stuff
is not set as far as how things are
70

71
00:06:21.570 --> 00:06:25.860
being set and that could be a type
conversion within Spring as it's going
71

72
00:06:25.860 --> 00:06:31.320
from JMS to the Spring message format. So,
I will let you guys look at some of this
72

73
00:06:31.320 --> 00:06:35.190
on your own as far as if you want to
investigate the properties. But stuff
73

74
00:06:35.190 --> 00:06:40.260
like this, when you get a chance things
like this, it's a really good to go in
74

75
00:06:40.260 --> 00:06:44.370
and get things in a debugger. See what's
going on to satisfy your curiosity.
75

76
00:06:44.370 --> 00:06:48.900
Hopefully, bringing this up in the
debugger, you can see how things all tied
76

77
00:06:48.900 --> 00:06:51.960
together. Everything that we've been
talking about as far as sending the
77

78
00:06:51.960 --> 00:06:55.790
message. It's actually going to a queue.
It's getting converted to JSON and
78

79
00:06:55.790 --> 00:07:01.820
converted back from JSON. So, let me go
ahead and stop this
79

80
00:07:02.590 --> 00:07:09.610
and minimize this. Just wanna recap as
far as the Spring configuration. You can see
80

81
00:07:09.610 --> 00:07:13.690
there on line 16 we are marking it as a
@Component. So, this gets brought up as a
81

82
00:07:13.690 --> 00:07:19.870
Spring Bean. That JmsListener tells the
Spring context to register this as a
82

83
00:07:19.870 --> 00:07:26.650
bean and to listen to that queue. And
technically, what we could have done here
83

84
00:07:26.650 --> 00:07:30.730
if we weren't interested in all the
other stuff. All we needed to do is that
84

85
00:07:30.730 --> 00:07:35.440
@Payload and the HelloWorldMessage,
we could have emitted the headers and
85

86
00:07:35.440 --> 00:07:39.100
the message. I actually put those in
there to demonstrate this functionality
86

87
00:07:39.100 --> 00:07:43.240
of what we could get from the message.
Because sometimes you might wanna put
87

88
00:07:43.240 --> 00:07:46.270
custom properties in the headers. You
might want to put a correlation ID in
88

89
00:07:46.270 --> 00:07:50.050
there. Fairly common to put in a
correlation ID and then do that for
89

90
00:07:50.050 --> 00:07:54.850
logging. Here, I'm not running any logging.
I'm just using System.out because this
90

91
00:07:54.850 --> 00:07:59.740
is an entire project. It's just a little
hello world experiment to show you the
91

92
00:07:59.740 --> 00:08:09.010
functionality. But now, in summary we have
a message sender. So, this message sender
92

93
00:08:09.010 --> 00:08:13.690
is gonna wake up every two seconds. We
have this System.out saying, "I'm Sending
93

94
00:08:13.690 --> 00:08:18.220
a message", a message is sent. It's
actually taking that HelloWorldMessage
94

95
00:08:18.220 --> 00:08:23.590
and Spring is converting that to JSON.
Putting it on the queue. It's going
95

96
00:08:23.590 --> 00:08:26.950
to an embedded server. And remember, we're
using an embedded server right now. And
96

97
00:08:26.950 --> 00:08:33.039
then, our HelloMessageListener that is
listening on that queue. So, the moment we
97

98
00:08:33.039 --> 00:08:37.030
put it on the queue in this it becomes
available for a client which is what
98

99
00:08:37.030 --> 00:08:41.380
this is. If there's a client listening on that
queue and it gets that message delivered
99

100
00:08:41.380 --> 00:08:46.870
exactly one time. Now, if I were to do an
exception. Actually, let's demonstrate
100

101
00:08:46.870 --> 00:08:51.620
that. Let me do this.
101

102
00:08:54.340 --> 00:08:59.700
So, I'm just gonna do a  throw a new RuntimeException here. And now, if I run this,
102

103
00:08:59.700 --> 00:09:04.980
let's go ahead and run this. Again, I'm
gonna run this in debug
103

104
00:09:06.880 --> 00:09:12.720
Let's go ahead and I'm just gonna pass by a
couple of times.
104

105
00:09:13.949 --> 00:09:17.900
And now if I look at the 
console, you can see that I am
105

106
00:09:17.900 --> 00:09:22.400
throwing the exception there. So, we
are getting some exceptions in there. And,
106

107
00:09:22.400 --> 00:09:27.910
what's happening is we should be able to
see this here.
107

108
00:09:29.839 --> 00:09:33.129
Let's see here.
108

109
00:09:34.690 --> 00:09:39.639
jms_redelivered. So, as has been read on
delivered and you can see here that the
109

110
00:09:39.639 --> 00:09:44.529
delivery count, this message has been
delivered nine times as I skipped ahead
110

111
00:09:44.529 --> 00:09:49.540
there. What's happening is just to
reiterate JMS queue is very much
111

112
00:09:49.540 --> 00:09:54.639
transactional just like a database. So,
when I de-queue that message, I'm actually
112

113
00:09:54.639 --> 00:09:59.439
getting older message. But here, I'm
throwing an exception so that
113

114
00:09:59.439 --> 00:10:04.509
transaction doesn't complete. So, ActiveMQ is
saying, 'Hey, this client and process a
114

115
00:10:04.509 --> 00:10:09.129
message redeliver it'. So, it's gonna
redeliver until it gets a proper
115

116
00:10:09.129 --> 00:10:12.730
confirmation from the client and not
throwing that message. So, very very
116

117
00:10:12.730 --> 00:10:16.449
important distinction there. Something
a really nice feature about JMS where it
117

118
00:10:16.449 --> 00:10:20.829
is transactional like that. So, if your
messaging client throws an exception and
118

119
00:10:20.829 --> 00:10:26.050
does not confirm taking that message, 
that message will get re-queued and re
119

120
00:10:26.050 --> 00:10:30.430
delivered. So, very important to remember.
A very very nice feature about JMS.
120

121
00:10:30.430 --> 00:10:35.529
That's why JMS is widely used and then
it is really not only fast but
121

122
00:10:35.529 --> 00:10:40.680
rock-solid. So, hopefully you found this
little impromptu demonstration of
122

123
00:10:40.680 --> 00:10:47.139
throwing the exception here helpful. And,
I will comment this out and I'll leave a
123

124
00:10:47.139 --> 00:10:51.339
comment in there about that. So, obviously,
I don't wanna check it in in that state
124

125
00:10:51.339 --> 00:10:55.720
where I'm tossing a runtime exception.
But I will leave that commented and allow
125

126
00:10:55.720 --> 00:11:00.689
you guys to check out this code and
experiment with it as well.
