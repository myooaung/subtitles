WEBVTT
0
1
00:00:04.520 --> 00:00:09.290
Alright, in this video what we want to
do is look at editing an existing
1

2
00:00:09.290 --> 00:00:13.259
ingredient. Now the problem that we have in
ingredients are the challenge that we
2

3
00:00:13.259 --> 00:00:18.390
have to look at is the ingredients have
a nested unit of measure property. So just to
3

4
00:00:18.390 --> 00:00:24.150
refresh you on the model here. So if we
look at the commands, so we'll have a
4

5
00:00:24.150 --> 00:00:29.010
UnitOfMeasureCommand. That's going to
be related to the Ingredient same as far
5

6
00:00:29.010 --> 00:00:34.890
as our domain model. So we have a nested
object there and it's a one-to-one
6

7
00:00:34.890 --> 00:00:39.540
relationship and we set it up so that we
could select from it. So we can go into
7

8
00:00:39.540 --> 00:00:43.710
the database at a future date and add in
different unit of measures but we want
8

9
00:00:43.710 --> 00:00:47.640
to be able to pick out which one we want. So we're going to use a drop-down
9

10
00:00:47.640 --> 00:00:53.039
selector for that and show you real
quick here, we'll pop that open. And you
10

11
00:00:53.039 --> 00:00:57.870
can see that this is basically what we want
to do. This have description and the unit
11

12
00:00:57.870 --> 00:01:03.210
of measure on that and so we all have
those properties there. Actually I just
12

13
00:01:03.210 --> 00:01:08.610
saw that we actually want to have
quantity too or amount. So let's add that
13

14
00:01:08.610 --> 00:01:20.310
in real quick. So I'll call that amount
and we'll give it a number and we'll bind
14

15
00:01:20.310 --> 00:01:28.950
it now to a field amount. So now that will
work out nicely for us. But the area
15

16
00:01:28.950 --> 00:01:34.770
that we really want to look at is on line
47 there. 47 to 51. So this is
16

17
00:01:34.770 --> 00:01:40.560
going to set up our option drop down in
the HTML form and this is Thymeleaf from
17

18
00:01:40.560 --> 00:01:47.430
what it's saying is we want to pass back
a uom list to that and for each unit of
18

19
00:01:47.430 --> 00:01:51.180
measure, we're going to give you the
value of the ID so that we know which
19

20
00:01:51.180 --> 00:01:58.320
one to get back to. But then there on
line 58 we're doing an equals. So uomEach
20

21
00:01:58.320 --> 00:02:04.530
equals and we're going to say equal to
the ingredient uom. So as long as those
21

22
00:02:04.530 --> 00:02:08.670
two are equal, we're going to be happy. And then we'll display it as the
22

23
00:02:08.670 --> 00:02:14.640
description of the unit of measure. So what we need to do now is we've been
23

24
00:02:14.640 --> 00:02:19.709
passing back the property of any
IngredientCommand. Over the
24

25
00:02:19.709 --> 00:02:26.489
second list, so neck the second
property value assigned to our model
25

26
00:02:26.489 --> 00:02:30.690
coming back. So I'll show you that in the
IngredientController where we've
26

27
00:02:30.690 --> 00:02:36.510
implemented this. So when we do an update
we're going to have a property called uom
27

28
00:02:36.510 --> 00:02:42.299
List and now we've implemented a unit of
measure service to go out and list all
28

29
00:02:42.299 --> 00:02:47.819
uom's. So let's take a quick look at
that implementation. So this is something
29

30
00:02:47.819 --> 00:02:52.980
I just added for this so we have a new
that can return back a Set of the unit
30

31
00:02:52.980 --> 00:02:57.959
measure commands and we've list all UOM's. So we'll go into this. It's a pretty
31

32
00:02:57.959 --> 00:03:04.560
simple of operation. We go to go
out, we get a UnitOfMeasureRepository
32

33
00:03:04.560 --> 00:03:09.959
injected for us by Spring and also a
UnitOfMeasureToUnitOfMeasureCommand
33

34
00:03:09.959 --> 00:03:15.569
converter injected for us and we
returned back recent stream
34

35
00:03:15.569 --> 00:03:20.250
support. So it's a convenient way to swap
a iterator to something that we can
35

36
00:03:20.250 --> 00:03:25.349
stream against so we're going to say
findAll and this is going to
36

37
00:03:25.349 --> 00:03:30.120
spliterator, I'm not sure who came up
with that word, but spliterator
37

38
00:03:30.120 --> 00:03:34.889
which will give us a Java stream, a Java
eight stream and then we're going to use
38

39
00:03:34.889 --> 00:03:40.859
a map function to convert our domain
objects to our command objects and we'll
39

40
00:03:40.859 --> 00:03:45.209
collect them into a set and return that. So let's go ahead and look at the unit
40

41
00:03:45.209 --> 00:03:51.209
test that we wrote for this and we can
see that I set up a pretty simple test.
41

42
00:03:51.209 --> 00:03:55.980
I'm going to go out and list all uom so I
create the UOMs as our
42

43
00:03:55.980 --> 00:04:00.329
domain object. I can say I'm setting up a set of those in
43

44
00:04:00.329 --> 00:04:07.440
the given block from 35 to 43. And then I
set up the Mockito mock to return them
44

45
00:04:07.440 --> 00:04:13.290
back and now we go out and we get our
list of command objects and pretty
45

46
00:04:13.290 --> 00:04:16.440
simple test here. I'm going to go ahead
and run it. So you can see it run without
46

47
00:04:16.440 --> 00:04:24.419
going kaboom which is always a plus. So our unit test does run in fact. Let's
47

48
00:04:24.419 --> 00:04:31.219
go ahead and take a closer look at
the controller implementation. This is where our
48

49
00:04:31.219 --> 00:04:36.960
controller implementation and also,
this is the same method that we had
49

50
00:04:36.960 --> 00:04:42.389
before the findByRecipeIdAndIngredientId. So that's
50

51
00:04:42.389 --> 00:04:51.960
the same. No changes there. See now the
one thing that we do need to look at is
51

52
00:04:51.960 --> 00:04:58.650
this save method. So this is a little
more involved. So we just looked at the
52

53
00:04:58.650 --> 00:05:03.210
controller method that is going to
display the form. So now we need to
53

54
00:05:03.210 --> 00:05:07.110
save that back so I'm in the service
layer looking at the service method
54

55
00:05:07.110 --> 00:05:11.340
that's going to be used to take that
ingredient form, that command object back
55

56
00:05:11.340 --> 00:05:16.289
from the controller and then persist it. So this gets a little tricky because
56

57
00:05:16.289 --> 00:05:23.430
what we're dealing with as far as having
a detached entity. So I got to
57

58
00:05:23.430 --> 00:05:28.169
be a little careful with that and let's
see. I'll step through this that would go
58

59
00:05:28.169 --> 00:05:36.120
through. We get a recipe Optional there
on line 64 and now we can have logic in
59

60
00:05:36.120 --> 00:05:46.229
there in line 66 to 68 to log of warning
and we return back a recipe not found. So
60

61
00:05:46.229 --> 00:05:51.389
we log that. So this this is happy
path. So if we don't find that ID this is
61

62
00:05:51.389 --> 00:05:54.810
just going to blow right through there. So we'll be addressing this in
62

63
00:05:54.810 --> 00:06:03.750
the future. I shall even put that in
there. So I definitely want to blow up if
63

64
00:06:03.750 --> 00:06:06.480
if we're trying to
do an update on something that does not
64

65
00:06:06.480 --> 00:06:12.300
exist. Now we're going to go out and get the recipe there. So on line 72 we start
65

66
00:06:12.300 --> 00:06:16.080
with the path where the Optional does
have a value. Now we're going to go out
66

67
00:06:16.080 --> 00:06:20.280
and look for that ingredient value
that's already been assigned because
67

68
00:06:20.280 --> 00:06:24.960
remember this is a save or update
operation. We don't necessarily know
68

69
00:06:24.960 --> 00:06:28.070
which one's coming through
here. So we might be creating a new
69

70
00:06:28.070 --> 00:06:35.060
ingredient or we might not be. So now in
line 80, we say is that ingredient
70

71
00:06:35.060 --> 00:06:41.760
optional there? And then we we go in and
we update it and actually need to update
71

72
00:06:41.760 --> 00:06:52.740
the quantity too. So I missed a property
there and now we're going to go also
72

73
00:06:52.740 --> 00:06:58.050
out and set up the uom. So we're going to
go back and set the uom based on the ID
73

74
00:06:58.050 --> 00:07:06.660
value and right now, we don't have very
elegant handling in there. So that's
74

75
00:07:06.660 --> 00:07:11.010
another spot that we'd want to do
something a little more elegant. Again
75

76
00:07:11.010 --> 00:07:15.330
we're just doing happy path right now so
this is kind of fragile code but we're
76

77
00:07:15.330 --> 00:07:19.920
just trying to learn things right now
and get something that's functional. So
77

78
00:07:19.920 --> 00:07:27.540
we go through there and it becomes a lot
easier if we're adding a new recipe. So
78

79
00:07:27.540 --> 00:07:32.520
you can see there on line 87, this is
our new ingredient. I have a spoken, this is
79

80
00:07:32.520 --> 00:07:41.970
our new ingredient, not recipe. So that's
going to go in and add in that
80

81
00:07:41.970 --> 00:07:46.320
ingredient and then we'll go ahead and
save the recipe object that will persist
81

82
00:07:46.320 --> 00:07:52.170
it with Hibernate. And now we want to
return back that command. So we'll return
82

83
00:07:52.170 --> 00:07:55.770
back the command object. So let's go
ahead and take a look at the test for
83

84
00:07:55.770 --> 00:08:04.290
this now. Scroll down to that and you can
see in here. I grabbed the wrong one. You can see
84

85
00:08:04.290 --> 00:08:08.550
I have a test save recipe command. Again,
this goes out. I'm following the behavior
85

86
00:08:08.550 --> 00:08:13.470
driven development pattern. I've given one
then. So I set up my data and a little
86

87
00:08:13.470 --> 00:08:16.290
given comment block and also set up
Mockito.
87

88
00:08:16.290 --> 00:08:21.210
Some people like to set up Mockito
in the when block. It's kind of a gray area
88

89
00:08:21.210 --> 00:08:26.310
technically because you are setting up
the mock actions to react to the when of
89

90
00:08:26.310 --> 00:08:32.330
the test action or the action under test. So in this scenario I do have
90

91
00:08:32.330 --> 00:08:37.950
line 103. That is the action that I'm
testing of when I go and save that
91

92
00:08:37.950 --> 00:08:43.500
IngredientCommand and then 105 is the
actual events that I expect to verify from
92

93
00:08:43.500 --> 00:08:48.540
that test. So go ahead and run this test. Make sure that is happy so that is
93

94
00:08:48.540 --> 00:08:52.860
up and good. Let's go ahead and take a
look at the controller test. We do have
94

95
00:08:52.860 --> 00:08:57.690
two new tests there. Just as a reminder,
we have the first one there in line 79
95

96
00:08:57.690 --> 00:09:01.650
where we're going to be doing a get for
the form. You can see that we're doing a
96

97
00:09:01.650 --> 00:09:06.240
get out there in line 88 against that
URL and then we're expecting these
97

98
00:09:06.240 --> 00:09:10.380
interactions to happen based on the
Model from the controller. And then again,
98

99
00:09:10.380 --> 00:09:16.740
on, I'll actually run this one right
now. While that's running we'll talk
99

100
00:09:16.740 --> 00:09:21.990
about the other one. We have the testSaveOrUpdate. Similar function but now we
100

101
00:09:21.990 --> 00:09:27.540
can see that we are doing a post and
again, these are just pure unit tests. We
101

102
00:09:27.540 --> 00:09:31.260
are not bringing up the Spring contest. So that's why it runs so quickly for us.
102

103
00:09:31.260 --> 00:09:36.510
So let's go ahead and run all our tests
now make sure that we are still in the
103

104
00:09:36.510 --> 00:09:46.980
green across the board. You can see that
our test suite is steadily growing as we
104

105
00:09:46.980 --> 00:09:52.830
add functionality, we're adding tests and
mostly unit tests. So let's go ahead and
105

106
00:09:52.830 --> 00:09:59.970
bring up the Spring Boot application and
take a look at this in the browser. So
106

107
00:09:59.970 --> 00:10:06.810
Spring Boot is up and running. We'll
refresh this.
107

108
00:10:06.810 --> 00:10:12.660
You can see here that we have the
Perfect Guacamole. And go for some
108

109
00:10:12.660 --> 00:10:16.500
guacamole, I'm hungry.
So now we have our list and
109

110
00:10:16.500 --> 00:10:24.390
let's take a look at the avocados and
we'll edit those and we'll just say yum
110

111
00:10:24.390 --> 00:10:32.220
there and let's make this each and you would see that we have two of them but
111

112
00:10:32.220 --> 00:10:36.870
everything else. Nevermind, that's good. So now we have two each
112

113
00:10:36.870 --> 00:10:51.450
avocados yum. And if we go back here to
ingredients, now we can see two each
113

114
00:10:51.450 --> 00:10:56.580
avocados yum and we are getting a show
there. That looks like some problem with our
114

115
00:10:56.580 --> 00:11:03.600
form. I'm going to pause this and look at it real
quick. Yup, we can see the problem
115

116
00:11:03.600 --> 00:11:06.030
right here. That little String should not be there
116

117
00:11:06.030 --> 00:11:12.780
so that was an accidental addition when I was
coding this up. Now it should be like so. So
117

118
00:11:12.780 --> 00:11:18.210
this whole thing here the Thymeleaf was
getting evaluated as an expression and I
118

119
00:11:18.210 --> 00:11:23.040
was actually tagging on it. I'll put that show
in the wrong spot. I think that's when
119

120
00:11:23.040 --> 00:11:33.800
I'm staring it too much HTML so let's
take a look at that. It did not go yet.
120

121
00:11:33.800 --> 00:11:39.080
Sometimes if we go build a project that
will force the reload of the template
121

122
00:11:39.080 --> 00:11:47.700
and now we can see that that slash show
is now gone. I'll just do it. Let's see if we can update
122

123
00:11:47.700 --> 00:11:53.880
this to three yummy
avocados and it looks like that each may
123

124
00:11:53.880 --> 00:11:56.360
not have taken.
124

125
00:11:58.740 --> 00:12:08.230
That is good. So we are getting each but
when we do an update, that is not working
125

126
00:12:08.230 --> 00:12:16.210
properly. View page source, see what's
happening here. I'm not getting the
126

127
00:12:16.210 --> 00:12:21.160
selected value. I think and know exactly
what that is. So let's take a quick look
127

128
00:12:21.160 --> 00:12:36.220
at that. So on the form,
you know on each dot. So now we're going
128

129
00:12:36.220 --> 00:12:40.210
to specify the ID value in here. I think
it's because we're doing against the
129

130
00:12:40.210 --> 00:12:47.190
two uom's that was not happy. I'm going to
go ahead and build this and let's take..
130

131
00:12:47.190 --> 00:12:51.880
So now we are getting each there. Let's
double check the page source.
131

132
00:12:51.880 --> 00:12:59.080
I should have a selected value and yes,
this is exactly what we wanted because
132

133
00:12:59.080 --> 00:13:04.360
that select was not working, that equal
evaluation was not working, that selected
133

134
00:13:04.360 --> 00:13:09.100
value was not working on the HTML that
is being generated by Thymeleaf. So just a
134

135
00:13:09.100 --> 00:13:13.810
recap on that in case you got confused. Right here I had a mistake in the
135

136
00:13:13.810 --> 00:13:19.600
evaluation that was not comparing against
the ID values. So the equality
136

137
00:13:19.600 --> 00:13:24.010
comparison was failing and we were
failing to get the selected attribute. So
137

138
00:13:24.010 --> 00:13:28.650
it was a problem of the form and not our
persistence.
