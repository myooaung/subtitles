WEBVTT
0
1
00:00:04.130 --> 00:00:09.300
In this video, we are gonna take a look
at writing tests for the Owner Spring
1

2
00:00:09.300 --> 00:00:15.269
Data JPA service and this is actually
issue number 50 down here. I'm gonna
2

3
00:00:15.269 --> 00:00:19.830
go ahead and assign this to myself to say
that I am actually working on it inside
3

4
00:00:19.830 --> 00:00:23.939
of GitHub. We're gonna do this a
little bit different from what we did
4

5
00:00:23.939 --> 00:00:27.510
before. There's actually a couple
different ways to do this. Let me toggle
5

6
00:00:27.510 --> 00:00:33.540
over to IntelliJ and we'll bring up that
service so we're going to do the OwnerSD
6

7
00:00:33.540 --> 00:00:39.660
for Spring Data JPA. You can see this
brings into a couple of things. We're not
7

8
00:00:39.660 --> 00:00:46.530
using the repositories fully. You can see
that that's being highlighted and that
8

9
00:00:46.530 --> 00:00:51.000
there's two different ways that we could
do this. One is light and that's the way
9

10
00:00:51.000 --> 00:00:53.370
I prefer to do it and that's using
Mockito.
10

11
00:00:53.370 --> 00:00:59.550
The other way is to use a Spring
profile to bring up an H2 database and
11

12
00:00:59.550 --> 00:01:03.870
there's actually a couple different ways
that you can do that. The downside is
12

13
00:01:03.870 --> 00:01:08.040
if you bring up the Spring context in
the database, your test run a lot longer.
13

14
00:01:08.040 --> 00:01:12.180
But, the benefit is you're gonna be
testing your persistence layer quite
14

15
00:01:12.180 --> 00:01:17.070
often with an H2 database. So, depends on
your particular use case, I tend to favor
15

16
00:01:17.070 --> 00:01:22.140
white weight test. If I need to test
something in persistence layer, I will do
16

17
00:01:22.140 --> 00:01:26.580
so. I will write tests for that. If
there's an explicit need for that and it
17

18
00:01:26.580 --> 00:01:30.509
is good to have it. It's not forbidden to
have. I generally like to have my
18

19
00:01:30.509 --> 00:01:35.310
test lighter. In this example, I'm
gonna show you how to set up Mockito
19

20
00:01:35.310 --> 00:01:41.130
for this. So we'll come over here, option
enter on the class name, you can see
20

21
00:01:41.130 --> 00:01:48.290
that's asking me to create a test and
I'm going to do all these guys.
21

22
00:01:49.740 --> 00:01:54.299
We'll go ahead and throw in a setUp method.
You can see that it's asking us for
22

23
00:01:54.299 --> 00:02:00.780
JUnit 5 which I am going to take there.
I'm going to say OK. Let's go
23

24
00:02:00.780 --> 00:02:04.470
ahead, and just like before, I'm gonna
split this horizontally. We'll close
24

25
00:02:04.470 --> 00:02:09.390
out the top one. So now, I have my class
under test on the top half of the screen
25

26
00:02:09.390 --> 00:02:14.880
and the test at the bottom of the screen.
Of course, what we want to do is you
26

27
00:02:14.880 --> 00:02:19.220
can see that I have some repositories
here. I'm just gonna copy these
27

28
00:02:19.220 --> 00:02:27.110
down to here.
I do get a little looser on
28

29
00:02:27.110 --> 00:02:32.630
restrictions on test classes so I'm just
gonna give her these like so. So now,
29

30
00:02:32.630 --> 00:02:37.850
those are the repositories I'm gonna
be working with, and also we want to have
30

31
00:02:37.850 --> 00:02:45.440
a Owner. We'll just call him
service. So that kind of sets things up.
31

32
00:02:45.440 --> 00:02:53.600
Now what we wanna do here is in 
JUnit 4, we had test runners and JUnit 5
32

33
00:02:53.600 --> 00:03:03.470
their extensions. So we're gonna do @ExtendWith Mockito. MockitoExtension,
33

34
00:03:03.470 --> 00:03:09.210
where are you?
I am missing a dependency. I'm gonna
34

35
00:03:09.210 --> 00:03:17.990
pause this real quick and resolve that.
It's boring. Okay, I jumped ahead a little bit.
35

36
00:03:17.990 --> 00:03:22.080
What happened is I'm missing a
dependency for Mockito there that's why
36

37
00:03:22.080 --> 00:03:26.940
that annotation is not coming up. I
looked at the POM and sure enough I was
37

38
00:03:26.940 --> 00:03:30.900
missing it. I'm gonna go ahead and
add it. I had to look it up because I
38

39
00:03:30.900 --> 00:03:36.990
don't have everything memorized, believe
it or not. Got it up here. Mockito
39

40
00:03:36.990 --> 00:03:42.330
JUnit Jupiter is the one that we want.
I'm over in Maven central. You can see
40

41
00:03:42.330 --> 00:03:45.750
here conveniently copies that to the
clipboard.
41

42
00:03:45.750 --> 00:03:51.930
Thank you best buy for the ad. We'll
come back over here. Let's go ahead
42

43
00:03:51.930 --> 00:03:58.800
and paste this in, like so. I'm not
sure if that's in the parent POM or not
43

44
00:03:58.800 --> 00:04:02.580
so I'm gonna go ahead and do that
see if it resolves. You can see down at
44

45
00:04:02.580 --> 00:04:06.770
the bottom of the screen, I'm getting
resolving dependencies.
45

46
00:04:07.000 --> 00:04:11.490
It looks like it might be doing it.
46

47
00:04:12.670 --> 00:04:16.850
Reemployment projects. You can see 
IntelliJ in the background. What it's going
47

48
00:04:16.850 --> 00:04:22.100
to do is download that for us and I
don't think it resolved it. We can tell for
48

49
00:04:22.100 --> 00:04:30.529
sure. I want to do the pet-clinic-data. Get the root.
49

50
00:04:30.529 --> 00:04:39.339
Come up here and let's do a compile. I
should I wanna do a test. Stop you.
50

51
00:04:39.920 --> 00:04:45.770
I want to see if I can and we see that
the version is missing so that tells me
51

52
00:04:45.770 --> 00:04:50.630
there that this artifact is not in the
parent POM so I do need to include the
52

53
00:04:50.630 --> 00:04:54.410
version information, so I'm grabbing the
latest. Now we'll go ahead and do that.
53

54
00:04:54.410 --> 00:05:00.470
Let's run our test and we'll see. You
should see that download of IntelliJ
54

55
00:05:00.470 --> 00:05:03.190
didn't beat us to it.
55

56
00:05:04.819 --> 00:05:09.259
We see that my test does have an
error because I'm half-written that so
56

57
00:05:09.259 --> 00:05:14.330
that is to be expected so let's go ahead
and close that. We now have the Maven
57

58
00:05:14.330 --> 00:05:21.999
Dependency there. I don't need the URL
for Maven Central but clean that up.
58

59
00:05:24.240 --> 00:05:29.280
And now MockitoExtension should show up. So
now, you can see that IntelliJ sees
59

60
00:05:29.280 --> 00:05:34.169
MockitoExtension because I now have that
on the classpath with that dependency.
60

61
00:05:34.169 --> 00:05:39.840
I'm telling this to ExtendWith 
MockitoExtension. This sets up the
61

62
00:05:39.840 --> 00:05:45.979
JUnit 5 environment for Mockito. Now
we can do some annotation goodness or
62

63
00:05:45.979 --> 00:05:50.080
some people might call it annotation
hell.
63

64
00:05:50.080 --> 00:05:54.090
I'm gonna Mock out the repository. I'm setting up
64

65
00:05:56.340 --> 00:05:59.449
these two as Mocks.
65

66
00:06:00.540 --> 00:06:07.860
I'd say that's sets up. And now, we have
this single constructor. So now, what I
66

67
00:06:07.860 --> 00:06:13.530
can do here, IntelliJ
should be smart or I should say
67

68
00:06:13.530 --> 00:06:17.220
Mockito should be smart enough to inject
Mocks for that. So that's gonna set up a
68

69
00:06:17.220 --> 00:06:22.510
service for us and I'm not sure if we're
gonna need that setUp method or not.
69

70
00:06:22.510 --> 00:06:26.610
So now what I can do is
70

71
00:06:27.230 --> 00:06:30.400
let's say Owner
71

72
00:06:32.169 --> 00:06:37.169
service.findByLastName().
72

73
00:06:38.630 --> 00:06:42.490
I'm just gonna run this to make sure,
73

74
00:06:43.889 --> 00:06:50.419
that it does in fact execute. See down, I'm doing a build down
the bottom of the screen there. IntelliJ
74

75
00:06:50.419 --> 00:06:54.199
is building everything. I just wanna make
sure that all the inject mocks run.
75

76
00:06:54.199 --> 00:06:59.509
Even though this is a very simple test,
what this is telling me because it's did
76

77
00:06:59.509 --> 00:07:03.500
execute properly and I got a green
testing though I'm not doing anything,
77

78
00:07:03.500 --> 00:07:10.909
this is telling me that these mocks did
get injected and our service did get
78

79
00:07:10.909 --> 00:07:16.460
created because if I did that, if the
service was not instantiated by Mockito,
79

80
00:07:16.460 --> 00:07:20.689
I would have got a null pointer error in
there. So I show you that. If I
80

81
00:07:20.689 --> 00:07:25.430
just get rid of that and if I run out
like now, I should get an NPE because
81

82
00:07:25.430 --> 00:07:30.560
that property has not been initiated, so 
see there's null pointer. So that tells me
82

83
00:07:30.560 --> 00:07:37.610
that Mockito is running properly. So
now, let's go ahead and set up some tests
83

84
00:07:37.610 --> 00:07:41.529
here. Things get a little bit more
interesting with Mockito.
84

85
00:07:41.529 --> 00:07:45.550
We can do Owner.
85

86
00:07:56.180 --> 00:08:04.310
So now, we're setting up a returnOwner
like so and I'm doing a that's the
86

87
00:08:04.310 --> 00:08:10.480
return object that I wanna return back.
Now I can say when.
87

88
00:08:12.500 --> 00:08:16.430
You can see here IntelliJ is trying to
give us some hints and this can be a
88

89
00:08:16.430 --> 00:08:23.960
little tricky here. Go ahead and
enter those and say
89

90
00:08:23.960 --> 00:08:28.750
thenReturn(returnOwner)
90

91
00:08:28.880 --> 00:08:35.690
like so. I kind of went through this
a little fast so now we have when and
91

92
00:08:35.690 --> 00:08:39.800
any. These are methods. This will trip
you up especially if you're probably
92

93
00:08:39.800 --> 00:08:44.210
using something like an Eclipse which
isn't smart enough to and inject these
93

94
00:08:44.210 --> 00:08:47.600
possibly. It's been a long time since I
use Eclipse. IntelliJ is pretty good at
94

95
00:08:47.600 --> 00:08:52.040
this. But to bring in these static imports,
if you don't know about these static
95

96
00:08:52.040 --> 00:08:56.540
imports of when and any, that can really
trip you up. So that's an important thing
96

97
00:08:56.540 --> 00:09:02.600
that IntelliJ just did for us as far as
managing the imports. So let's come back
97

98
00:09:02.600 --> 00:09:09.290
down to our test. I just told the
mock, so when service.findByLastName()
98

99
00:09:09.290 --> 00:09:16.730
and actually that should be... It's my bad
because we are doing findByLastName()
99

100
00:09:16.730 --> 00:09:21.700
and actually want the ownerRepository.
100

101
00:09:21.830 --> 00:09:27.649
An easy mistake to make. So I wanna
say when ownerRepository.findByLastName()
101

102
00:09:27.649 --> 00:09:32.990
is called, I want to return back
that returnOwner because we are going
102

103
00:09:32.990 --> 00:09:39.910
to test this up here on line 33 to get
back that Owner.
103

104
00:09:40.500 --> 00:09:42.770
And let's say assertEquals
104

105
00:09:51.010 --> 00:09:57.769
like so. You can see here, I set the
lastName Smith three times. So let's
105

106
00:09:57.769 --> 00:10:01.389
come in here. I'm going to refactor. Extract
106

107
00:10:02.279 --> 00:10:05.959
to Constant.
107

108
00:10:08.019 --> 00:10:11.340
I will call that 
LAST_NAME.
108

109
00:10:11.340 --> 00:10:17.740
We can see that now that we have
that, we injected a constant of LAST_NAME.
109

110
00:10:17.740 --> 00:10:22.149
We can see you said consistently
110

111
00:10:23.930 --> 00:10:33.290
like so. So now, we're gonna set ID to
one, last name lastName LAST_NAME. So
111

112
00:10:33.290 --> 00:10:38.020
let's go ahead and run those make sure
that it runs now. Just one additional test
112

113
00:10:41.070 --> 00:10:47.960
I can put in there and that is verify.
113

114
00:10:51.589 --> 00:10:54.949
This is a little bit redundant but I
just wanna show you how to do the
114

115
00:10:54.949 --> 00:10:58.910
verify because I'm pretty sure my
Mockito will pop if this does not get
115

116
00:10:58.910 --> 00:11:03.490
called at any time, but I'm showing you
how to do a verify of a mock interaction.
116

117
00:11:03.490 --> 00:11:07.569
Now let's go ahead and run that.
117

118
00:11:08.960 --> 00:11:12.230
And that is
running. This video is getting a little
118

119
00:11:12.230 --> 00:11:15.499
long. I'm gonna implement the other
methods and then we'll come back and do
119

120
00:11:15.499 --> 00:11:19.809
a code review on those. I'm gonna
pause this video, implement these other
120

121
00:11:19.809 --> 00:11:26.209
we'll get five methods here and I'll
review using Mockito to provide a full
121

122
00:11:26.209 --> 00:11:29.629
implementation though. Let me pause this.
I'll be right back.
122

123
00:11:29.629 --> 00:11:33.470
If I wish to ask references, can I count
on you to say nice things about me?
123

124
00:11:33.470 --> 00:11:38.990
Be honest. Do you want to be honest or nice?
Okay, I've jumped ahead a little bit and
124

125
00:11:38.990 --> 00:11:42.499
we were getting a little long in this
video but I wanted to go through and
125

126
00:11:42.499 --> 00:11:49.220
implement the remaining methods for our
test for the Spring Data JPA service, and
126

127
00:11:49.220 --> 00:11:52.600
again, we're using Mockito there.
You can see that I've gone ahead and
127

128
00:11:52.600 --> 00:11:58.129
implemented them and I'm gonna bring up
the screen here a little bit. I made a
128

129
00:11:58.129 --> 00:12:04.639
couple changes here. The returnOwner,
what I did here is I moved it up to a
129

130
00:12:04.639 --> 00:12:10.939
class variable. Now, I am setting that
with it BeforeEach method. What this
130

131
00:12:10.939 --> 00:12:15.110
is going to do it's gonna reset that
BeforeEach test method is called. So for
131

132
00:12:15.110 --> 00:12:19.249
everything that I've annotated with a
@Test, this BeforeEach method is gonna
132

133
00:12:19.249 --> 00:12:23.629
get called and reset that. I'm doing
that. I really didn't have a need to do
133

134
00:12:23.629 --> 00:12:27.379
that. I could have just initialized it and
been done with it and probably use that
134

135
00:12:27.379 --> 00:12:32.120
same object for every test. Really, a
just-in-case type thing
135

136
00:12:32.120 --> 00:12:35.839
I'm going through and going to
reinitialize that. So if I did change
136

137
00:12:35.839 --> 00:12:40.189
that object at any point in a test, the
next test would get a fresh object
137

138
00:12:40.189 --> 00:12:44.420
configured the way it should have been at
green field. So, important thing to do
138

139
00:12:44.420 --> 00:12:48.350
there. Just a kind of safety thing. Even
though I didn't have a specific need in
139

140
00:12:48.350 --> 00:12:51.259
the set of tests, just a good habit to
get into
140

141
00:12:51.259 --> 00:12:57.559
to make sure that each test does get the
object expected. We went through 
141

142
00:12:57.559 --> 00:13:05.149
findByLastName(). Let's see here. I'm gonna get
up here to findAll(), and on line 60 there,
142

143
00:13:05.149 --> 00:13:10.610
I am defining a variable called returnOwnersSet. That's a HashSet I added to
143

144
00:13:10.610 --> 00:13:17.059
owners and then on line 64 I am using
Mockito when to say when findAll() is
144

145
00:13:17.059 --> 00:13:20.630
called, I want to return back that owner
set.
145

146
00:13:20.630 --> 00:13:25.330
So now, that ownerRepository, that
is a mock being managed by Mockito.
146

147
00:13:25.330 --> 00:13:31.670
On line 66 is when I actually called a
server signification of findAll(). That
147

148
00:13:31.670 --> 00:13:35.600
is gonna invoke the mock so I should
get back a set of owners from that.
148

149
00:13:35.600 --> 00:13:41.120
On line 68, I am doing assertNotNull
and that I'm expecting a list size of two.
149

150
00:13:41.120 --> 00:13:47.630
So now, let's take a look at line 73 for
findById(). Here you can see again, I'm
150

151
00:13:47.630 --> 00:13:52.970
working with the ownerRepository mock.
I'm saying findById() and I have a
151

152
00:13:52.970 --> 00:13:57.020
match or there of anyLong(). So anyLong()
value can go in there and then I'm gonna
152

153
00:13:57.020 --> 00:14:02.240
return back an Optional off returnOwner.
So let's take a quick look at this. I
153

154
00:14:02.240 --> 00:14:07.550
want to take a look at the actual
implementation. So again, I got the
154

155
00:14:07.550 --> 00:14:13.370
test there. I wanna return back the
Optional owner and this is findById(). So
155

156
00:14:13.370 --> 00:14:19.220
if I come back to findById(), what's
happening here is I'm collapsing out
156

157
00:14:19.220 --> 00:14:24.530
that optional to return back an Owner
object or null. So I'm gonna say orElse(null).
157

158
00:14:24.530 --> 00:14:32.480
So if it's not found. Actually I
can write another test here because I'm
158

159
00:14:32.480 --> 00:14:37.880
testing for just test make sure that I
return back a value. But let's make
159

160
00:14:37.880 --> 00:14:45.040
another test.
I'm just gonna copy and paste him.
160

161
00:14:46.840 --> 00:14:54.150
Call him not found. And now, rather turn
back an Optional of owner, I'm gonna return back
161

162
00:14:54.910 --> 00:15:00.670
an Optional.empty(). My test condition
says stays the same so I'm gonna call
162

163
00:15:00.670 --> 00:15:07.290
up by ID, and now, I wanna make sure that
that Owner object is null.
163

164
00:15:07.290 --> 00:15:13.800
Nice spelling it found their John. Like
that. Not found. So now, my 
164

165
00:15:13.800 --> 00:15:20.190
findById() I'm testing to pass because I do
have that findById() orElse(). So one the
165

166
00:15:20.190 --> 00:15:23.640
first test is gonna make sure that I
returned back a value that  gets
166

167
00:15:23.640 --> 00:15:29.040
found by the repository or no orElse()
I'm gonna say the repository didn't find
167

168
00:15:29.040 --> 00:15:34.590
anything. So doing two branches there.
Let's take a look at the save option
168

169
00:15:34.590 --> 00:15:39.900
there. I'm scrolling up a little bit. 
You can see here I created an ownerToSave
169

170
00:15:39.900 --> 00:15:46.980
on line 93 and then I go in and save
that on line 97 but I set up the mock
170

171
00:15:46.980 --> 00:15:52.920
on line 95. So when the ownerRepository
save method is called, I'm gonna say
171

172
00:15:52.920 --> 00:15:58.500
any object there. I'm gonna return back
my returnOwner object. In this case,
172

173
00:15:58.500 --> 00:16:02.940
I just wanna make sure that the save
method was called. I could even do
173

174
00:16:02.940 --> 00:16:10.070
I could add in a verify(ownerRepository).
174

175
00:16:10.510 --> 00:16:14.320
I can put in an
assertion there just to make doubly sure.
175

176
00:16:14.320 --> 00:16:18.519
I'm pretty sure Mockito
if the save method does not get called
176

177
00:16:18.519 --> 00:16:22.690
I'm having that set up and it will
squawk about that. This is kind of
177

178
00:16:22.690 --> 00:16:27.009
optional to do that. I'm just showing you
how to use the verify method here to
178

179
00:16:27.009 --> 00:16:31.810
make sure that a mock interaction did
occur. You can see here this is will
179

180
00:16:31.810 --> 00:16:40.060
run. Bring up a little bit. Now the delete
methods, you can see up here, the two
180

181
00:16:40.060 --> 00:16:45.819
delete methods, these both return a void
so we are calling a method and that
181

182
00:16:45.819 --> 00:16:51.310
method is going to interact with an
object, the injected ownerRepository.
182

183
00:16:51.310 --> 00:16:56.230
We're gonna interact with delete() and
deleteById() but we don't return a value.
183

184
00:16:56.230 --> 00:17:01.149
This is a really good example of
using the verify because here on line
184

185
00:17:01.149 --> 00:17:07.480
185 in the lower half of the screen, I'm
doing service.delete() and I'm passing in
185

186
00:17:07.480 --> 00:17:13.630
an owner object. In here, I'm saying
verify the ownerRepository delete
186

187
00:17:13.630 --> 00:17:18.689
method is called one time and verify
187

188
00:17:19.190 --> 00:17:25.220
there's a bit. Oh there. Okay. Verify
mock times. Been a while since I use that.
188

189
00:17:25.220 --> 00:17:28.300
So you can do verify.
189

190
00:17:32.790 --> 00:17:38.450
You could write it like that. I'm
gonna put it in a comment here.
190

191
00:17:38.910 --> 00:17:42.330
You don't have to do the times there
if it's just getting implemented
191

192
00:17:42.330 --> 00:17:45.720
once. That's why I didn't quite remember
the syntax off the top of my head there.
192

193
00:17:45.720 --> 00:17:51.180
So you can to verify the mock and number
times. If I was expecting this
193

194
00:17:51.180 --> 00:17:57.330
condition to get hit more than once, I
could specify it like that. Down on
194

195
00:17:57.330 --> 00:18:03.990
line 117, that's more concise syntax
where the verify option assumes by
195

196
00:18:03.990 --> 00:18:09.330
default one interaction so if it's gonna
get interacted with multiple times,
196

197
00:18:09.330 --> 00:18:13.590
we could specify that. But in this case,
we only have to verify one. You can
197

198
00:18:13.590 --> 00:18:19.410
see the contrast between line 110 and
117. Let's go ahead and run all the
198

199
00:18:19.410 --> 00:18:24.990
tests here. It will make sure that all
the tests for the Spring Data Owner JPA
199

200
00:18:24.990 --> 00:18:29.550
Service does run. We can see that all
the tests are green so I'm gonna close
200

201
00:18:29.550 --> 00:18:33.300
this out. This video is definitely
getting a little long, but we covered
201

202
00:18:33.300 --> 00:18:35.130
quite a bit of ground here with Mockito
202

203
00:18:35.130 --> 00:18:39.990
giving you some guys really good
examples of using Mockito with JUnit 5.
203

204
00:18:39.990 --> 00:18:44.400
This is by no means meant to be
a comprehensive guide on Mockito because
204

205
00:18:44.400 --> 00:18:48.090
we are really just scratching
the surface of it. So we are going to
205

206
00:18:48.090 --> 00:18:55.010
call this test good and we'll close
this out.
206

207
00:19:02.990 --> 00:19:08.230
That closes out number 50 and I will commit
that and adding in that closes number 50
207

208
00:19:08.230 --> 00:19:11.970
We will close the issue in GitHub.
