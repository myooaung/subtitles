WEBVTT
0
1
00:00:02.100 --> 00:00:08.820
Okay this is a code review of my Spring
Boot application for MariaDB. This is a
1

2
00:00:08.820 --> 00:00:13.320
working application going against the
MariaDB database now if you're not
2

3
00:00:13.320 --> 00:00:21.529
familiar with MariaDB what it is, is
effectively a branch of MySQL and when
3

4
00:00:21.529 --> 00:00:26.310
MySQL got acquired by Oracle
Corporation there was concern in the
4

5
00:00:26.310 --> 00:00:30.689
community about what Oracle would do
with a free relational database like
5

6
00:00:30.689 --> 00:00:38.989
MySQL so the Stewart of MySQL created
the branch and created MariaDB to
6

7
00:00:38.989 --> 00:00:44.760
guarantee that the MySQL database would
always remain free and open source so
7

8
00:00:44.760 --> 00:00:49.260
that's what MariaDB is and it is a
very close mirror and it does have a lot
8

9
00:00:49.260 --> 00:00:52.649
of backward. I think it's supposed
supposed to be fully compatible with
9

10
00:00:52.649 --> 00:00:59.969
MySQL. So the configuration for MariaDB
is very similar to MySQL but this is a
10

11
00:00:59.969 --> 00:01:05.820
MariaDB specific application so I'm
using all the MariaDB database drivers
11

12
00:01:05.820 --> 00:01:10.799
and properties in this example and I am
running against MariaDB running in a
12

13
00:01:10.799 --> 00:01:15.030
Docker container on my local machine. So
let's take a look at the source code for
13

14
00:01:15.030 --> 00:01:23.549
this and what we have here on line 10 is
the Entity annotation. So this is a standard
14

15
00:01:23.549 --> 00:01:30.240
JPA class emulating a Product so we have an id value, a description, a price and
15

16
00:01:30.240 --> 00:01:36.810
an imageUrl and saying that the id is a
generated value and just standard JPA
16

17
00:01:36.810 --> 00:01:42.630
mapping stuff here and I am leveraging
Spring Data JPA which is going to be
17

18
00:01:42.630 --> 00:01:47.130
using Hibernate 5 actually in
the background for this since I am
18

19
00:01:47.130 --> 00:01:53.850
running Spring Boot version 1.5. Spring
Boot 1.4, we got upgraded to the latest
19

20
00:01:53.850 --> 00:01:58.619
release of Hibernate and that is
Hibernate 5 so this is my Product
20

21
00:01:58.619 --> 00:02:03.149
Repository it's implementing a CrudRepository and this is a Spring Data JPA
21

22
00:02:03.149 --> 00:02:08.460
standard component for CrudRepository
and if you're not familiar with Spring
22

23
00:02:08.460 --> 00:02:12.690
Data JPA
at runtime Spring Data JPA is going to
23

24
00:02:12.690 --> 00:02:15.090
provide us an implementation of this
class.
24

25
00:02:15.090 --> 00:02:21.000
I should say of this interface. So I do
like to do all my business logic in a
25

26
00:02:21.000 --> 00:02:25.860
service layer so I've created a
interface for that and we just have a
26

27
00:02:25.860 --> 00:02:31.500
few things here we have a list method,
getById, saveOrUpdate, delete or saveOr
27

28
00:02:31.500 --> 00:02:35.489
Update by a ProductForm so I am
following a command pattern so I'm going
28

29
00:02:35.489 --> 00:02:41.519
to bind my form to a command object and
bring that in so let's take a quick look
29

30
00:02:41.519 --> 00:02:46.799
at the implementation of this now this
is my implementation it is annotated on
30

31
00:02:46.799 --> 00:02:53.880
line 16 there as a Service and here I am
using constructor based dependency
31

32
00:02:53.880 --> 00:02:58.079
injection to bring in the ProductRepository which will be provided by
32

33
00:02:58.079 --> 00:03:02.670
Spring Data JPA
and then my ProductFormToProduct that
33

34
00:03:02.670 --> 00:03:07.620
is a convertor, just a simple type
converter but it's also been set up as a
34

35
00:03:07.620 --> 00:03:12.510
Spring manage component so the Spring
Framework is going to inject these into
35

36
00:03:12.510 --> 00:03:18.480
my service class when it is
initialized and then you can see I've
36

37
00:03:18.480 --> 00:03:23.819
provided an implementation for each one
of the methods of the ProductService
37

38
00:03:23.819 --> 00:03:30.000
interface and we are leveraging the
Spring Data JPA repository for all these.
38

39
00:03:30.000 --> 00:03:34.730
So now you can go ahead and review this
no big mysteries here, I don't think and
39

40
00:03:34.730 --> 00:03:41.819
let's go ahead and take a look at the
controller class. So this has been
40

41
00:03:41.819 --> 00:03:47.790
annotated as a Controller which tells
Spring to wire it up as a component
41

42
00:03:47.790 --> 00:03:52.650
within the Spring context and the
RequestMapping controller mappings. Now
42

43
00:03:52.650 --> 00:03:56.840
unlike the previous example I am using
setter based
43

44
00:03:56.840 --> 00:04:02.190
dependency injection here or the ProductForm converter as well as the Product
44

45
00:04:02.190 --> 00:04:07.169
Service, my implementation to ProductService. And you can see I've set up Request
45

46
00:04:07.169 --> 00:04:13.859
Mapping on line 36. I take the root and
redirect it to product/list and that
46

47
00:04:13.859 --> 00:04:17.760
gives me a list of products out of the
database I'm not doing any paging there
47

48
00:04:17.760 --> 00:04:23.490
so nothing too overly complex
here and you can see on line 41 this is
48

49
00:04:23.490 --> 00:04:28.380
going to return back a list of products
so I'll take in the Model and to
49

50
00:04:28.380 --> 00:04:33.330
the products property I'm going to
attach a list from the ProductService
50

51
00:04:33.330 --> 00:04:40.200
of products now let's take a quick look
at Thymeleaf, these are the Thymeleaf
51

52
00:04:40.200 --> 00:04:46.110
templates and actually here's the
list since we are talking about that so this
52

53
00:04:46.110 --> 00:04:50.880
is a standard list it gets a list of
products and iterates over it if you're
53

54
00:04:50.880 --> 00:04:55.290
new to Thymeleaf I do have a course
specifically on Thymeleaf for you. I take a
54

55
00:04:55.290 --> 00:05:00.660
deep dive, I'm using Thymeleaf and Bootstrap to do a little application and
55

56
00:05:00.660 --> 00:05:04.350
we get into a lot of the meaning behind
the Thymeleaf tags and explore how to
56

57
00:05:04.350 --> 00:05:09.030
use Thymeleaf in that course. So let's
see the next thing we want to take a
57

58
00:05:09.030 --> 00:05:13.170
look at is the application.properties file this is where a lot of
58

59
00:05:13.170 --> 00:05:20.750
important stuff is happening for the
MaraiaDB. Line 5 there is saying the
59

60
00:05:20.750 --> 00:05:26.370
jdbc mariadb running on localhost
and it goes against port 3306
60

61
00:05:26.370 --> 00:05:32.640
which is the same default port
as MySQL and then I'm going against the
61

62
00:05:32.640 --> 00:05:38.420
database here spring boot_mariadb and in this case I am setting my
62

63
00:05:38.420 --> 00:05:43.170
datasource username and password both to
root. Obviously is not something you
63

64
00:05:43.170 --> 00:05:47.250
want to do in production you definitely
want to change those and probably not
64

65
00:05:47.250 --> 00:05:51.420
have a super user account for your
application anyways that's a bad habit.
65

66
00:05:51.420 --> 00:05:57.360
Now, line 8 there I am
specifying the MariaDB, JDBC driver and
66

67
00:05:57.360 --> 00:06:02.760
then 10 and 11 what's going on
there is we are going to keep the data
67

68
00:06:02.760 --> 00:06:06.660
source connection alive so if your
application doesn't have a lot of
68

69
00:06:06.660 --> 00:06:10.770
activity on it, what can happen is the
socket connection to the database can
69

70
00:06:10.770 --> 00:06:15.420
timeout get smacked down and cause you
problems and what this does is it keeps
70

71
00:06:15.420 --> 00:06:20.040
it alive and keeps that socket
connection live there. Then line 16 this
71

72
00:06:20.040 --> 00:06:24.900
is very handy especially in development,
is to show-sql and that will write out
72

73
00:06:24.900 --> 00:06:30.930
the Hibernate SQL right to your console
and we'll be able to see that and then on
73

74
00:06:30.930 --> 00:06:38.190
line 19 I am using the ddl-auto create to
automatically create and then drop the
74

75
00:06:38.190 --> 00:06:42.090
database tables. So this is something
great for development, it's going to
75

76
00:06:42.090 --> 00:06:48.449
generate the database tables right based on your JPA mapping but
76

77
00:06:48.449 --> 00:06:51.120
definitely not something you'd want to
be doing in production, that would be
77

78
00:06:51.120 --> 00:06:56.040
very bad because you'll be dropping your
your database tables. In production there
78

79
00:06:56.040 --> 00:07:02.130
is an option to run and validate so you
can set that to a validate mode and it's
79

80
00:07:02.130 --> 00:07:08.630
going to make sure that your production
database tables do infact match the JPA
80

81
00:07:08.630 --> 00:07:12.810
mappings that your setup otherwise if
you don't do that and you have an error
81

82
00:07:12.810 --> 00:07:19.700
and you would get runtime errors rather
than start up now. Line 21 and 22 with
82

83
00:07:19.700 --> 00:07:26.639
Hibernate 5 we got some differences in
how mapping is handling, how tables and
83

84
00:07:26.639 --> 00:07:31.620
columns are named and this is just
setting those to the Spring way of doing
84

85
00:07:31.620 --> 00:07:40.710
things and then on line 24 we are using
the MySQL 5 and ODB dialect for Hibernate
85

86
00:07:40.710 --> 00:07:44.880
so there's supposed to be
100% capability between or
86

87
00:07:44.880 --> 00:07:51.560
compatibility between MariaDB and
MySQL so this dialect is going to tell
87

88
00:07:51.560 --> 00:07:58.050
Hibernate any nuances of the SQL for the
underlying relational database instance
88

89
00:07:58.050 --> 00:08:02.580
so in this case we are using MySQL to
maintain compatibility between Hibernate
89

90
00:08:02.580 --> 00:08:11.070
and the MariaDB so let's go ahead and
run this now, starting it up and my dog
90

91
00:08:11.070 --> 00:08:15.180
is snoring softly in the background I
apologize if this mic is picking that up
91

92
00:08:15.180 --> 00:08:20.970
hopefully not and if so I apologize for
the distraction and we are up and
92

93
00:08:20.970 --> 00:08:26.520
running now. I'm going to come come over
and let's go to this. I'm going to
93

94
00:08:26.520 --> 00:08:30.570
refresh this we shouldn't have any
products so there's no products there
94

95
00:08:30.570 --> 00:08:42.089
let's go and create one and some URL, so
I'm not doing any data validation here
95

96
00:08:42.089 --> 00:08:47.370
this is just a real simple example. I'm going to
submit that, now we can see that that is
96

97
00:08:47.370 --> 00:08:53.400
there. Let's go back and so we can see
how this is available in the database I
97

98
00:08:53.400 --> 00:08:59.680
can go in
edit it and let's do 555 and we
98

99
00:08:59.680 --> 00:09:03.190
see that this is updated and just double
check we'll go back to list make sure that
99

100
00:09:03.190 --> 00:09:09.520
is there so we can see that 555 has persisted to the database now
100

101
00:09:09.520 --> 00:09:13.510
just as a reminder all the source code
that I showed you for this whole project
101

102
00:09:13.510 --> 00:09:19.360
is available on GitHub my account is
springframeworkguru and you can find
102

103
00:09:19.360 --> 00:09:29.700
this repository at springframeworkguru/spring-boot-mariadb-example
