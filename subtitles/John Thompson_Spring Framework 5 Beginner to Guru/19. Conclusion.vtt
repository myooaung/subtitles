WEBVTT
0
1
00:00:04.819 --> 00:00:09.150
Alright! This concludes a section of
the course on developing RESTful APIs
1

2
00:00:09.150 --> 00:00:13.920
using Spring WebFlux. So, we've got a
good solid foundation here of developing
2

3
00:00:13.920 --> 00:00:19.109
those APIs, and like I said, in this section
of the course, we wanted to focus on the
3

4
00:00:19.109 --> 00:00:23.910
API built around or the compatibility
with Spring MVC. So, we're using a lot
4

5
00:00:23.910 --> 00:00:28.920
of the same annotations, that we did
in Spring MVC. But, rather than having
5

6
00:00:28.920 --> 00:00:34.590
Spring MVC, we use the WebFlux client
and all reactive. So, Spring MVC is not
6

7
00:00:34.590 --> 00:00:37.980
under the covers. Even though we are
using these same annotations, it's just a
7

8
00:00:37.980 --> 00:00:42.719
compatibility layer, and it gives us a
lot of similarity in the APIs. Now, at
8

9
00:00:42.719 --> 00:00:47.039
some point in the future, I am going to
record another section of the course on
9

10
00:00:47.039 --> 00:00:51.960
WebFlux, but we are going to focus on
the functional API, which is really cool.
10

11
00:00:51.960 --> 00:00:56.489
We are going to get into that, and we'll
set up RESTful APIs using the functional
11

12
00:00:56.489 --> 00:01:02.570
APIs, which is much different and not
supported over in Spring MVC right now.
12

13
00:01:02.570 --> 00:01:06.960
As far as I know, it was not supported
yet. But, with a future release of Spring
13

14
00:01:06.960 --> 00:01:10.590
5, that could very well come to play. But
I hope you enjoyed this section of the
14

15
00:01:10.590 --> 00:01:15.780
course. You can see the capabilities here
and the similarity. So, if you're coming
15

16
00:01:15.780 --> 00:01:20.030
from traditional Spring MVC and want to
try out the WebFlux Client in
16

17
00:01:20.030 --> 00:01:25.439
developing the traditional controller
and the annotations that we've become
17

18
00:01:25.439 --> 00:01:29.400
accustomed to, you got a lot of
compatibility there between the two APIs.
18

19
00:01:29.400 --> 00:01:33.630
So, it's a really nice approach that the
Spring guys did in enabling this new
19

20
00:01:33.630 --> 00:01:37.310
web stack called Spring WebFlux.
