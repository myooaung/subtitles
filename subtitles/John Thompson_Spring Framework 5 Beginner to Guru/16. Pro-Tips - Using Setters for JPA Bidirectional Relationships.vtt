WEBVTT
0
1
00:00:04.130 --> 00:00:08.340
Alright, I want to take a moment to
refactor a couple things in our data
1

2
00:00:08.340 --> 00:00:12.210
model with the JPA entities that we
created. Now we went through that code
2

3
00:00:12.210 --> 00:00:15.660
review and saw a couple rough spots in
there. I'm going to show you some stuff
3

4
00:00:15.660 --> 00:00:20.580
from experience where we can modify the
getters and setters and add a couple
4

5
00:00:20.580 --> 00:00:24.480
convenience methods for our use to make
the initial working with these entities
5

6
00:00:24.480 --> 00:00:28.019
a little bit easier. Because what we
don't want to be doing is relying on
6

7
00:00:28.019 --> 00:00:34.370
people to make sure that we have the
entities related in that bi-directional
7

8
00:00:34.370 --> 00:00:39.120
relationship. So I had to add in
both sides of. That's something we can
8

9
00:00:39.120 --> 00:00:45.210
easily go in and have so when we add
like a recipe note to the recipe,
9

10
00:00:45.210 --> 00:00:48.570
we can automatically have that getter
and setter or the setter I should
10

11
00:00:48.570 --> 00:00:52.770
say, update that property for us. So we
already doing this so we're just going
11

12
00:00:52.770 --> 00:00:57.140
to do it programmatically. And this
refactors the code so we have that
12

13
00:00:57.140 --> 00:01:01.050
centralized because we might be working
with these entities all over the place.
13

14
00:01:01.050 --> 00:01:05.129
Think about it outside of that and we
want to have one spot in the code that
14

15
00:01:05.129 --> 00:01:08.430
manages that relationship rather than
having it in multiple spots because when
15

16
00:01:08.430 --> 00:01:11.400
you have it in multiple spots, you're
going to be relying on people to
16

17
00:01:11.400 --> 00:01:16.470
remember to do that. Now further down in
the course we are going to show you how
17

18
00:01:16.470 --> 00:01:21.060
to set up constraints on the JPA
entities and that's a little bit
18

19
00:01:21.060 --> 00:01:24.330
more advanced topic. We're just getting
our feet wet right now. So I'm going to
19

20
00:01:24.330 --> 00:01:29.220
go over to IntelliJ now and show you how
how to refactor. So I'm going to show you
20

21
00:01:29.220 --> 00:01:32.579
the problems that we have and then we'll
go ahead and refactor it and review that
21

22
00:01:32.579 --> 00:01:37.979
refactoring. Okay so I've got the source
code back up here for our class that
22

23
00:01:37.979 --> 00:01:43.590
does the bootstrap and in case you
skipped over the code review from the
23

24
00:01:43.590 --> 00:01:48.479
last assignment, that's what I created
and you'll have a link to this. the
24

25
00:01:48.479 --> 00:01:52.619
source code. So a little lengthy here as
far as creating a couple recipes. We're
25

26
00:01:52.619 --> 00:01:58.469
going and we get the unit of measures
and the categories. So really not much of a
26

27
00:01:58.469 --> 00:02:03.780
way around this but the one area that I
wanted to highlight is in creating the
27

28
00:02:03.780 --> 00:02:09.090
actual Recipe objects. There's a couple
things here and I just dropped a
28

29
00:02:09.090 --> 00:02:15.020
couple comments in. So here on the guacNotes we need to go
29

30
00:02:15.020 --> 00:02:20.720
in and set the recipe on guacNotes but
also inversely, on the guac
30

31
00:02:20.720 --> 00:02:24.200
Recipe, we need to set the notes object
there and that's going to establish the
31

32
00:02:24.200 --> 00:02:29.120
ID value and that bi-directional
relationship. And what we can do on the
32

33
00:02:29.120 --> 00:02:35.240
recipe object is add in some logic to
the setter there. So when we pass in a
33

34
00:02:35.240 --> 00:02:40.490
notes object we'll set the ID on that
notes object. So just a little bit of
34

35
00:02:40.490 --> 00:02:44.540
coding that we can save and it makes it
nice because if you're doing this
35

36
00:02:44.540 --> 00:02:48.110
somewhere else, you always have to
maintain that relationship. So what we'll
36

37
00:02:48.110 --> 00:02:54.290
do is we'll refactor this and get the
code into one spot. Then on line 135 here,
37

38
00:02:54.290 --> 00:02:59.780
this here is just very lengthy code and
we could definitely make it a lot
38

39
00:02:59.780 --> 00:03:07.100
lighter and a little bit easier to use
and I added in a constructor and
39

40
00:03:07.100 --> 00:03:09.680
ingredient to make this a little bit
easier to work with.
40

41
00:03:09.680 --> 00:03:15.560
But still, quite lengthy because we have
to go in to take the guacRecipe object
41

42
00:03:15.560 --> 00:03:20.000
and get the ingredients which will give
us the Set and then we can call the add
42

43
00:03:20.000 --> 00:03:25.520
method on it and we have to be sure that
we pass in an ingredient that has a guac
43

44
00:03:25.520 --> 00:03:30.290
Recipe associated with it. So we need to
have that association already built but
44

45
00:03:30.290 --> 00:03:36.560
we could provide a helper method to add
to the ingredients to go ahead and
45

46
00:03:36.560 --> 00:03:41.330
update that relationship for us. So I'm
going to go and refactor the code. I'm
46

47
00:03:41.330 --> 00:03:44.330
going to pause this want to do the
refactoring and then come back and
47

48
00:03:44.330 --> 00:03:48.950
review with you to show you how we could
refactor this to make it a lot easier.
48

49
00:03:48.950 --> 00:03:52.310
And a lot will lead to a lot better
quality code because we'll have the
49

50
00:03:52.310 --> 00:03:57.040
logic in one spot rather than repeat it
in multiple spots.
50

51
00:03:57.040 --> 00:04:01.910
Alright I've done the refactoring, fast
forward ahead a little bit and let's
51

52
00:04:01.910 --> 00:04:06.080
step through what I changed here. So I'm
going to go and just do a compare on the
52

53
00:04:06.080 --> 00:04:09.590
classes. So I'm going to come
up here and let's first take a look
53

54
00:04:09.590 --> 00:04:16.580
at Recipe. So that's our entity and do a
quick show diff here and we can see that
54

55
00:04:16.580 --> 00:04:21.680
I added into the setNotes() and we're
going to pass in a Notes object and of
55

56
00:04:21.680 --> 00:04:27.660
course, regularly we do this, notes
equal notes and now on line 123
56

57
00:04:27.660 --> 00:04:31.440
there, that is where we set the recipe. So
that's where we build that association.
57

58
00:04:31.440 --> 00:04:35.580
So we don't have to do it outside of the class. It encapsulates
58

59
00:04:35.580 --> 00:04:41.990
the logic which is exactly what we want
and then here unless we refactor that,
59

60
00:04:41.990 --> 00:04:47.610
should be a capital I on addIngredient. So I'll refractor that in the class then
60

61
00:04:47.610 --> 00:04:51.870
we go in and build the association for
the bi-directional association there as
61

62
00:04:51.870 --> 00:04:57.690
well. So it's a handy class and typically
having a remove ingredient is going to
62

63
00:04:57.690 --> 00:05:02.550
be a nice touch too. So that's something
that you may want to add. So this just is
63

64
00:05:02.550 --> 00:05:06.530
a convenience method but it also
encapsulate syou're logic in one spot.
64

65
00:05:06.530 --> 00:05:14.250
I'm going to fix that method name real
quick and in IntelliJ you can go refactor.
65

66
00:05:14.250 --> 00:05:22.410
So I'm going to right click on it and
come up to refactor, rename and I want
66

67
00:05:22.410 --> 00:05:29.280
that to be a capital "I". I just hit enter
and that that's going to update that
67

68
00:05:29.280 --> 00:05:33.360
method and any references to that method. So that's why I wanted to use the
68

69
00:05:33.360 --> 00:05:38.910
refactor so that's going to be a little
nice touch. Now I come over here and let's
69

70
00:05:38.910 --> 00:05:45.630
take a quick look at the Ingredient. I
did make one change here, the diff and I
70

71
00:05:45.630 --> 00:05:51.810
did have a constructor that took in all
four properties. I dropped the recipe
71

72
00:05:51.810 --> 00:05:57.240
from that so we'll use the overloaded
method there to add in and we can see
72

73
00:05:57.240 --> 00:06:02.039
that this is what's going to build that
bi-directional method there on 126-127.
73

74
00:06:02.039 --> 00:06:10.500
So we don't have to pass in the Recipe
to the constructor here and let's take a
74

75
00:06:10.500 --> 00:06:15.950
quick look. So this is our Bbootstrap
class. We'll take a quick look at him and
75

76
00:06:15.950 --> 00:06:19.940
show you the diff on him.
76

77
00:06:21.030 --> 00:06:27.420
And we can see here on 129 we were
able to drop that additional method call
77

78
00:06:27.420 --> 00:06:34.740
now and then on let's take a look
at 132-133. You can see we don't have
78

79
00:06:34.740 --> 00:06:39.210
the multiple chaining of method calls. So
we're not going out getting ingredients
79

80
00:06:39.210 --> 00:06:42.930
and then doing the add method on. We're
just calling that helper method that we
80

81
00:06:42.930 --> 00:06:48.960
wrote and we can see that we were able
to drop passing in the guacRecipe each
81

82
00:06:48.960 --> 00:06:53.940
time. So definitely saves a little coding
and probably more reliable in the in the
82

83
00:06:53.940 --> 00:06:58.740
long term. Alright so you can see how much nicer
this is to have these little convenience
83

84
00:06:58.740 --> 00:07:03.330
methods fleshed out a little bit on our
entities. Make the setters a little bit
84

85
00:07:03.330 --> 00:07:06.930
smarter so when we're bringing in these
additional objects, it also add in
85

86
00:07:06.930 --> 00:07:10.110
convenience methods for ourselves. It's a
pretty common design pattern when you're
86

87
00:07:10.110 --> 00:07:14.520
working with JPA entities. It does help
us out as far as code quality goes
87

88
00:07:14.520 --> 00:07:17.610
because if we don't have constraints,
which we haven't got to in the course
88

89
00:07:17.610 --> 00:07:21.480
yet, but we will, if you don't have those
constraints in place it's really really
89

90
00:07:21.480 --> 00:07:25.530
easy to forget to set these when you're
managing both sides of that
90

91
00:07:25.530 --> 00:07:29.370
bi-directional relationship. So by adding
in the convenience methods, it's
91

92
00:07:29.370 --> 00:07:31.560
something that's going to keep your code
centralized
92

93
00:07:31.560 --> 00:07:36.140
and you don't have to worry about
somebody forgetting to do that.
