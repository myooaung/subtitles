WEBVTT
0
1
00:00:04.220 --> 00:00:08.670
Alright let's take a look at using
YAML with Spring Boot. So we have our
1

2
00:00:08.670 --> 00:00:13.200
application.properties file up
there and what I want to do is let's
2

3
00:00:13.200 --> 00:00:19.080
take out the jms settings into a YAML file. So I'm going to go in here and
3

4
00:00:19.080 --> 00:00:26.970
create a New File and need to point out
that Spring Boot is going to look for
4

5
00:00:26.970 --> 00:00:31.619
YAML files starting with application
and then dot yml. As far as I know
5

6
00:00:31.619 --> 00:00:34.920
yml is the file extension that you
need to use.
6

7
00:00:34.920 --> 00:00:40.140
I don't think yaml spelled out is going
to work as far as I know it is not going
7

8
00:00:40.140 --> 00:00:44.579
to work. But the convention that you see
typically with Spring Boot is to use yml
8

9
00:00:44.579 --> 00:00:49.649
and Spring Boot will
definitely pick up that then. So I'm
9

10
00:00:49.649 --> 00:00:57.600
going to go over here and say OK, will
create that file and we are going to add
10

11
00:00:57.600 --> 00:01:01.620
this to GitHub for you guys. I'm going to
come in here and split this file
11

12
00:01:01.620 --> 00:01:08.520
horizontally. So we have application.properties up at the top and let's come
12

13
00:01:08.520 --> 00:01:15.150
in here and we're going to recreate that. So there's guru, now I want to take at
13

14
00:01:15.150 --> 00:01:27.119
least two spaces, say jms. Now I want to
do two more spaces and we can add in
14

15
00:01:27.119 --> 00:01:37.320
password and we'll add in the url. So now
we have the exact same file
15

16
00:01:37.320 --> 00:01:41.729
structure here and it's important to
note the spacing here because if you
16

17
00:01:41.729 --> 00:01:46.560
came in and we're off on the space, if
you did something like this, it's not
17

18
00:01:46.560 --> 00:01:50.549
going to like it. It's going to be upset
with you about that. So this is setting
18

19
00:01:50.549 --> 00:01:55.290
up the structure of the object that's
going to get parsed in YAML and I
19

20
00:01:55.290 --> 00:02:01.979
am going to come in here and delete the
jms settings and let's go ahead and run
20

21
00:02:01.979 --> 00:02:08.129
it. And you can see that it's still
picking up from the YAML and I want you
21

22
00:02:08.129 --> 00:02:13.970
to note that I've gone in and mixed this. So now I have an application.properties
22

23
00:02:13.970 --> 00:02:18.530
and I have property set and application.properties. I also have application.yml
23

24
00:02:18.530 --> 00:02:22.880
down at the bottom. So you can see
these are both available in the
24

25
00:02:22.880 --> 00:02:28.670
resources directory and Spring Boot is
going to parse both those files and
25

26
00:02:28.670 --> 00:02:33.530
bring them into the context for us. So a very handy feature. You are more
26

27
00:02:33.530 --> 00:02:38.720
than welcome to mix and match properties
because ultimately, what's happening
27

28
00:02:38.720 --> 00:02:45.290
under covers is Spring and Spring Boot
are going out and reading all the
28

29
00:02:45.290 --> 00:02:48.740
properties files and bringing them into
the Spring context as available
29

30
00:02:48.740 --> 00:02:52.550
properties and there is a hierarchy
that's happening. But right now, all
30

31
00:02:52.550 --> 00:02:58.850
things are equal, application.properties and application.yaml or
31

32
00:02:58.850 --> 00:03:03.820
dot yml are on equal footing so we'll
load properties from both of those
32

33
00:03:03.820 --> 00:03:08.470
equally. Neither's going to override the
other.
