WEBVTT
0
1
00:00:04.130 --> 00:00:07.799
Alright in the section of course we
are going to take a look at Spring boot
1

2
00:00:07.799 --> 00:00:12.450
developer tools. Now this is a huge
addition to the Spring tool set. I
2

3
00:00:12.450 --> 00:00:15.929
remember years ago I used to be a big
Grails developer. I still like the Grails
3

4
00:00:15.929 --> 00:00:20.369
framework. It's a basically groovy
wrapper around Spring framework and a
4

5
00:00:20.369 --> 00:00:25.199
couple of years ago this doesn't exist and
the grails guys had those technology to
5

6
00:00:25.199 --> 00:00:29.880
automatically recompile everything and
allow you to see your changes both on
6

7
00:00:29.880 --> 00:00:34.579
the Java side or groovy in the Grails
case and your template changes.
7

8
00:00:34.579 --> 00:00:37.410
Anything that you're doing for web
development. So this made your
8

9
00:00:37.410 --> 00:00:43.079
development a lot lot faster and
having it now in regular Spring, as part
9

10
00:00:43.079 --> 00:00:46.800
of the Spring boot developer tools, it's a
huge addition. It's a huge productivity
10

11
00:00:46.800 --> 00:00:51.600
saver. I'm going to go through to tell you
more about the developer tools and then
11

12
00:00:51.600 --> 00:00:55.770
we'll get into a live demo and we'll
take a look and see the stuff happen in
12

13
00:00:55.770 --> 00:01:01.109
action. In this video, we're going to take
a look at Spring boot developer tools. So
13

14
00:01:01.109 --> 00:01:05.670
we we add in the developer tools to the
project using the artifact Spring boot
14

15
00:01:05.670 --> 00:01:10.920
developer dev tools. You can add this in
Maven or through Gradle and then
15

16
00:01:10.920 --> 00:01:14.130
developer tools are automatically
disabled when you're running a packaged
16

17
00:01:14.130 --> 00:01:19.500
application. I have for example running
Java -jar or a war or something like
17

18
00:01:19.500 --> 00:01:24.689
that. So this allows that to be disabled
when you deploy to production. So the dev
18

19
00:01:24.689 --> 00:01:28.020
tools are not something you want running
when you have your application deployed
19

20
00:01:28.020 --> 00:01:31.650
in production. But for running on your
developer console that's something you
20

21
00:01:31.650 --> 00:01:35.869
definitely want running. And by default
when we're running the Spring boot
21

22
00:01:35.869 --> 00:01:41.729
plugins and it does the repackaging, it
will not include the developer tools jar
22

23
00:01:41.729 --> 00:01:46.409
and the repackage which are archived. Now
one of the things that it gives us is an
23

24
00:01:46.409 --> 00:01:50.520
automatic restart and this is actually
really cool. I like this quite a bit. What
24

25
00:01:50.520 --> 00:01:54.180
it's going to do is trigger restart of
the Spring context when classes change
25

26
00:01:54.180 --> 00:01:58.530
and the slick part of what they're doing
here is they're using two different
26

27
00:01:58.530 --> 00:02:03.509
class loaders. One class loader is going
to be here your application and the
27

28
00:02:03.509 --> 00:02:07.259
other class loader is going to be for
your project jar dependencies. So if
28

29
00:02:07.259 --> 00:02:09.959
you think about your jar dependencies
are going to be static, those aren't
29

30
00:02:09.959 --> 00:02:13.510
changing. So they get loaded into its own
class loader and
30

31
00:02:13.510 --> 00:02:17.319
then you get a second class loader for
stuff that does change. And this makes
31

32
00:02:17.319 --> 00:02:20.950
your restarts very fast because what's
going to happen is you're not bringing
32

33
00:02:20.950 --> 00:02:26.799
up the entire world. The jars from
Spring and all the Spring's dependencies
33

34
00:02:26.799 --> 00:02:30.610
in whatever your project needs, that's
already loaded into the class loader. So
34

35
00:02:30.610 --> 00:02:35.560
you don't have to re-read all
that and the Spring is just restarting
35

36
00:02:35.560 --> 00:02:41.010
the context with fresh classes from your
project. So it does happen pretty rapidly.
36

37
00:02:41.010 --> 00:02:45.640
Now the way this is going to work in
Eclipse is it's going to get triggered with a
37

38
00:02:45.640 --> 00:02:52.840
save action and in Eclipse, by default
it's going to compile the class. And that
38

39
00:02:52.840 --> 00:02:56.290
when class object changes, that's
what's triggering to restart in the
39

40
00:02:56.290 --> 00:03:01.150
developer tools. Now IntelliJ by default,
you're going to have to do a build
40

41
00:03:01.150 --> 00:03:04.599
go to the menu build and make
project and that's what's going to
41

42
00:03:04.599 --> 00:03:10.450
trigger it. IntelliJ does have an option
to automatically recompile the files but
42

43
00:03:10.450 --> 00:03:16.599
for some reason it gets disabled when
you have an application running. Not
43

44
00:03:16.599 --> 00:03:20.620
something I necessarily agree with and
in a future video, I'm going to show you
44

45
00:03:20.620 --> 00:03:23.919
how to override this inside of IntelliJ. There's an advanced setting that you can
45

46
00:03:23.919 --> 00:03:29.199
override that property and get IntelliJ
to work like Eclipse or when you save
46

47
00:03:29.199 --> 00:03:33.400
the file and IntelliJ does automatic
saves, it's going to trigger a restart
47

48
00:03:33.400 --> 00:03:38.620
for you. Now one thing that happens is by
default templates are going to be cached
48

49
00:03:38.620 --> 00:03:42.489
when the application is running and this
is done for performance. So obviously you
49

50
00:03:42.489 --> 00:03:47.169
don't want to be reading your
templates over and over. But the downside
50

51
00:03:47.169 --> 00:03:51.190
of this is to see changes when you're
making a change to a template, you're
51

52
00:03:51.190 --> 00:03:56.049
going to have to restart the container. Now developer tools by default is
52

53
00:03:56.049 --> 00:04:01.449
going to disable template caching. So you
can see your changes right away. Now real
53

54
00:04:01.449 --> 00:04:06.609
nice technology that's included with
developer tools is LiveReload. LiveReload
54

55
00:04:06.609 --> 00:04:09.340
is a technology that's
automatically going to trigger a browser
55

56
00:04:09.340 --> 00:04:14.500
refresh and the way this works is you
need a LiveReload server running and
56

57
00:04:14.500 --> 00:04:18.519
Spring boot and developer tools is going
to include this. And then you can get a
57

58
00:04:18.519 --> 00:04:24.190
plug-in for your browser of choice over
at livereload.com and most all the major
58

59
00:04:24.190 --> 00:04:25.850
browsers are supported and it works
pretty
59

60
00:04:25.850 --> 00:04:30.380
well. I've used it a lot on Chrome and
Firefox. I generally don't develop in
60

61
00:04:30.380 --> 00:04:34.190
Safari but there is a plug-in available
for Safari as well if that is your
61

62
00:04:34.190 --> 00:04:40.400
browser of choice. Now I'm going to jump
over to IntelliJ and give you a
62

63
00:04:40.400 --> 00:04:45.890
demonstration of this. Now what I have is
I've got the windows resized. I have the
63

64
00:04:45.890 --> 00:04:50.780
application running in the background. This little wheel here, that is a LiveReload 
64

65
00:04:50.780 --> 00:04:55.520
server saying that the browser is
connected and I do have this up and
65

66
00:04:55.520 --> 00:05:00.860
running. So the first thing I want to
show you is I have a system outline here
66

67
00:05:00.860 --> 00:05:06.590
and I'm going to change that to say
something. We'll just say 1 2 3 4 and
67

68
00:05:06.590 --> 00:05:12.740
when I come up to build project,
we can see down here it's going to
68

69
00:05:12.740 --> 00:05:16.730
trigger a start. So you see the Spring
context restarted and that
69

70
00:05:16.730 --> 00:05:23.510
happened pretty darn quick. So
whenever I do a class change, I'm going
70

71
00:05:23.510 --> 00:05:29.450
to just do it a simple change there
again and come in and build and you can
71

72
00:05:29.450 --> 00:05:33.380
see that it's going to get picked up
here and the Spring context reloads
72

73
00:05:33.380 --> 00:05:37.010
really quick and we're back up
and running. So you see how when you're
73

74
00:05:37.010 --> 00:05:41.270
making changes in Spring context how
fast or how much faster you're going to
74

75
00:05:41.270 --> 00:05:45.650
be in your production because you're not
going in and restarting
75

76
00:05:45.650 --> 00:05:50.390
things. Now the next thing is let's take a
look at the index page and I'm going to
76

77
00:05:50.390 --> 00:05:56.540
change the text of my recipes.
I'll just add some random text there. Now
77

78
00:05:56.540 --> 00:06:01.550
it's a good habit to click save because
IntelliJ does do an automatic save. Eclipse,
78

79
00:06:01.550 --> 00:06:06.290
you're always clicking save but IntelliJ
does do an automatic save for you. But
79

80
00:06:06.290 --> 00:06:11.270
this was now saved but it's not deployed.
So what we need to do is a build here
80

81
00:06:11.270 --> 00:06:16.250
and we're going to build the project and
that you can see no class has changed
81

82
00:06:16.250 --> 00:06:22.610
but we automatically reloaded. So do
another change here so you can see just
82

83
00:06:22.610 --> 00:06:25.480
how fast that happens.
83

84
00:06:25.870 --> 00:06:34.789
Make sure I saved it first. So there's a
compile and you can see how quick that's
84

85
00:06:34.789 --> 00:06:39.289
happening. So if you're on a dual monitor
setup you can see how quickly your
85

86
00:06:39.289 --> 00:06:43.820
changes are going to be applied. This is
a pretty convenient thing to be having
86

87
00:06:43.820 --> 00:06:48.350
so you can work within the Java space
and your HTML templates or your Thymeleaf
87

88
00:06:48.350 --> 00:06:52.850
templates and see your changes right
away. That's a huge productivity saver
88

89
00:06:52.850 --> 00:06:56.690
for you to have. Alright so let us Spring
boot developer tools. Real cool
89

90
00:06:56.690 --> 00:07:01.190
technology. I hope you can see how that's
really going to change your development.
90

91
00:07:01.190 --> 00:07:05.030
I use it all the time. From experience it works pretty good.
91

92
00:07:05.030 --> 00:07:09.860
Sometimes with the refresh, something goes
wrong, so you do have to do a restart. So
92

93
00:07:09.860 --> 00:07:14.600
just be aware of that. So as you're using
it if something funny happens just
93

94
00:07:14.600 --> 00:07:18.620
restart the container and you're usually
fine but most of the time you can sit
94

95
00:07:18.620 --> 00:07:21.590
there and do your development and
restart, restart, restart and it works
95

96
00:07:21.590 --> 00:07:24.530
just fine. But every now and then if
something goes wrong and you actually
96

97
00:07:24.530 --> 00:07:28.490
have to bounce a container and bring it
back up. But other than that, they are
97

98
00:07:28.490 --> 00:07:33.650
a huge time saver. I highly recommend you
get in the habit of utilizing the
98

99
00:07:33.650 --> 00:07:38.199
developer tools to speed up your
application development.
