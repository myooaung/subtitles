WEBVTT
0
1
00:00:09.260 --> 00:00:15.269
Okay, so I got the page up for the MySQL
Docker image and this is official
1

2
00:00:15.269 --> 00:00:21.510
documentation on it. We want to work
with the version 5.7 of MySQL, which is
2

3
00:00:21.510 --> 00:00:25.289
fine. That's currently the latest at the
time recording of this, which is just
3

4
00:00:25.289 --> 00:00:29.400
fine for us. Let's take a quick look
at the documentation. I want to point out
4

5
00:00:29.400 --> 00:00:33.989
a couple things here. So now one thing we
have not talked about here is linking
5

6
00:00:33.989 --> 00:00:39.030
containers, and this is a quick tip here - 
if you need to link to containers and
6

7
00:00:39.030 --> 00:00:45.899
this would be another application, giving
it the name of that MySQL container. So
7

8
00:00:45.899 --> 00:00:49.289
this is a handy way to wire up two of
them. We're not going to get into that,
8

9
00:00:49.289 --> 00:00:54.719
at this point in time. We will get that in
the future. But what I mainly wanted to
9

10
00:00:54.719 --> 00:01:00.000
do is point out how to use environment
variables. Now this MySQL instance does
10

11
00:01:00.000 --> 00:01:04.019
have several environment variables.
The one that we wanted to look at was to
11

12
00:01:04.019 --> 00:01:08.340
allow an empty password, so we're going
to allow an empty root password, even
12

13
00:01:08.340 --> 00:01:13.500
though we shouldn't, which is a bad
habit. This is a development sandbox and
13

14
00:01:13.500 --> 00:01:20.220
for the longest time MySQL has used a
null password for root. So not a good
14

15
00:01:20.220 --> 00:01:24.210
habit if we're running in production, but
for development sandbox, it's just fine.
15

16
00:01:24.210 --> 00:01:29.549
You're not going to really break anything.
Now the other caveat is, I am going to
16

17
00:01:29.549 --> 00:01:35.610
use a minus v in this this demonstration,
for my own, specify my own data directory.
17

18
00:01:35.610 --> 00:01:39.119
We'll get into that once I go to run
that. Now I jump over and take a quick
18

19
00:01:39.119 --> 00:01:44.820
look at the Docker file, just so you guys
can see some of those. So it is hosted up
19

20
00:01:44.820 --> 00:01:49.560
on GitHub, obviously. We can see that
it is from a Debian instance, with the
20

21
00:01:49.560 --> 00:01:54.149
tag of jessie, and this is all the stuff
that they did to prepare that Docker
21

22
00:01:54.149 --> 00:02:00.420
image for MySQL. We can see that's
exposing port 3306.
22

23
00:02:00.420 --> 00:02:07.320
So what I want to do now is let's jump
over to the command line, and let me show
23

24
00:02:07.320 --> 00:02:11.849
you exactly where I'm at here. So I am
sitting in the users directory under my
24

25
00:02:11.849 --> 00:02:17.019
home account
of jt, that's my username. I've
25

26
00:02:17.019 --> 00:02:21.790
created a directory called tmp. And
that's where we want to use to put our
26

27
00:02:21.790 --> 00:02:25.749
data at. So if I do an ls, you can see
there's nothing in there. So I'm going to
27

28
00:02:25.749 --> 00:02:33.909
clear this. And now let's go ahead and
paste in a command. I cheated and
28

29
00:02:33.909 --> 00:02:37.599
prepared ahead of time. I just want to
go through this. I can understand
29

30
00:02:37.599 --> 00:02:42.280
everything. We have docker run. That's
going to run an image, and we are giving the
30

31
00:02:42.280 --> 00:02:48.459
container name of guru-mysql. Now the
important part here is we have the minus
31

32
00:02:48.459 --> 00:02:53.560
e parammeter. We have MySQL_ALLOW_EMPTY_PASSWORD equal yes, that's going to
32

33
00:02:53.560 --> 00:02:59.590
allow us to have an empty root password.
Now the next one is the user. I can
33

34
00:02:59.590 --> 00:03:04.000
see I have a mistake in my command here,
so I'm going to scroll over to that. We
34

35
00:03:04.000 --> 00:03:11.260
just definitely do not want this - there.
So now we can see - v for volume and
35

36
00:03:11.260 --> 00:03:15.849
I'm going to map the directory. I'm
currently in that /Users/jt
36

37
00:03:15.849 --> 00:03:22.720
/temp to var/lib/mysql. That is the
the directory that MySQL is going
37

38
00:03:22.720 --> 00:03:28.120
to be writing data out into. The next
thing is that we want to map the local
38

39
00:03:28.120 --> 00:03:36.400
host of 3306 to the container port of
3306. We're going to give it a - d to run
39

40
00:03:36.400 --> 00:03:40.299
it back in the background, as a Daemon
process. And then we're going to say mysql.
40

41
00:03:40.299 --> 00:03:46.389
And just to remind you, that the MySQL, by
default, that image tag is going to
41

42
00:03:46.389 --> 00:03:51.340
go up to Docker hub. Pull down the image
MySQL from Docker hub with the tag of
42

43
00:03:51.340 --> 00:03:56.409
the latest because I'm omitting the tag.
So let's go ahead and hit enter now.
43

44
00:03:56.409 --> 00:04:00.639
We can see that simply started, and we
didn't see anything come down. That's
44

45
00:04:00.639 --> 00:04:05.590
because I've been running MySQL on this
machine, so my MySQL images are already
45

46
00:04:05.590 --> 00:04:12.519
there, and if I do a docker ps, you can
see that MySQL is running. Now I'm going to
46

47
00:04:12.519 --> 00:04:18.969
come over here to MySQL utility. I'm
sending here connecting to the default
47

48
00:04:18.969 --> 00:04:26.210
of 3306 with root. Say if I can connect.
And I am connected to the database.
48

49
00:04:26.210 --> 00:04:30.199
So we can see that I've successfully
connected to the database running on
49

50
00:04:30.199 --> 00:04:34.729
localhost inside of Docker container. Now
there's one last part, that I wanted to
50

51
00:04:34.729 --> 00:04:40.070
show you. If I toggle back over here to
the command line, where we can see our
51

52
00:04:40.070 --> 00:04:46.070
MySQL images running. Remember we
allocated storage to it, and I set it to
52

53
00:04:46.070 --> 00:04:51.169
use this volume. So we are still in that
temp directory, where I mounted the
53

54
00:04:51.169 --> 00:04:59.570
volume point at. If I do an ls here,
or even ls minus tlr, now we can see
54

55
00:04:59.570 --> 00:05:05.360
the file system that was set up by MySQL.
So this is all the stuff that MySQL is
55

56
00:05:05.360 --> 00:05:09.979
going to utilize to store data in for our
persistent database. So this will stay
56

57
00:05:09.979 --> 00:05:15.050
there on the system. If we recycle the
container and bring up a different MySQL
57

58
00:05:15.050 --> 00:05:19.669
instance and pointed at this, these are
the data files that MySQL needs. Our
58

59
00:05:19.669 --> 00:05:23.120
data will be persisted and we can
restart containers and bring up a
59

60
00:05:23.120 --> 00:05:26.570
different container and everything
should be happy. Okay I'm sure a lot of
60

61
00:05:26.570 --> 00:05:30.560
times you've used MySQL in the past and
used on your local machine in
61

62
00:05:30.560 --> 00:05:34.669
development mode. Now you're kind of
locked into having that single MySQL
62

63
00:05:34.669 --> 00:05:39.199
instance installed on your machine. Now
I've been using a Docker container for
63

64
00:05:39.199 --> 00:05:43.789
MySQL for the last couple months. I really
like it. It's pretty handy to
64

65
00:05:43.789 --> 00:05:49.310
use. The only problem I've seen in doing
it this way, obviously, you need to have
65

66
00:05:49.310 --> 00:05:56.270
your image up and running because sometimes
running OS X, if I close down and come
66

67
00:05:56.270 --> 00:05:59.780
back up in a Power Save mode,
occasionally, I'll have to balance the
67

68
00:05:59.780 --> 00:06:04.639
Docker Daemon. Not a big deal.
Things just don't recognize for
68

69
00:06:04.639 --> 00:06:09.710
somewhere, so it's kind of a
weird thing to OS X. But as a developer,
69

70
00:06:09.710 --> 00:06:14.509
I'm really liking this because I have my
own MySQL configuration for this
70

71
00:06:14.509 --> 00:06:18.860
database. I'm working on this client here,
works out great and shut him down,
71

72
00:06:18.860 --> 00:06:22.789
bring up a different data directory and
bring him up for a whole different
72

73
00:06:22.789 --> 00:06:26.690
project, not a problem. Just using
different Docker containers and
73

74
00:06:26.690 --> 00:06:31.699
different configurations. Something has
been more difficult having a permanently
74

75
00:06:31.699 --> 00:06:37.550
installed MySQL instance running on my
local host, where I can't toggle over to
75

76
00:06:37.550 --> 00:06:41.300
different data environments
that easily. So having Docker is a
76

77
00:06:41.300 --> 00:06:46.249
definitely a very cool thing that I'd
like. I've been using for MySQL. So this
77

78
00:06:46.249 --> 00:06:51.589
little setup I've shown you here, they'll
give you a local MySQL installation. You
78

79
00:06:51.589 --> 00:06:56.180
can use it with Java or PHP or anything
that's going to be connecting to MySQL.
79

80
00:06:56.180 --> 00:06:59.809
You saw it connected with a client. I
could easily ran Spring Boot against
80

81
00:06:59.809 --> 00:07:04.879
that, could run against any MySQL client
against this Docker container running
81

82
00:07:04.879 --> 00:07:07.699
out
MySQL running a Docker container on
82

83
00:07:07.699 --> 00:07:10.419
localhost here.
