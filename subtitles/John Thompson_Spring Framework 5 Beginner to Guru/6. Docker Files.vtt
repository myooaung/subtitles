WEBVTT
0
1
00:00:09.290 --> 00:00:14.400
Okay, we're going to take a closer look
at Docker Files. We've been working
1

2
00:00:14.400 --> 00:00:17.910
with the Mongo image, so I'm going to go
ahead and take a look at that. We're
2

3
00:00:17.910 --> 00:00:23.279
going to look at how that Mongo image was
built, and get into the nitty-gritty of
3

4
00:00:23.279 --> 00:00:27.480
the Docker File. The contents of that. Now,
I'm not going to dive too deep into the
4

5
00:00:27.480 --> 00:00:30.510
commands on the Docker File. This is
something that we're going to be working
5

6
00:00:30.510 --> 00:00:34.320
with a lot. We're going to be writing our
own Docker Files coming up. The purpose
6

7
00:00:34.320 --> 00:00:38.129
of this video is just get your feet wet
and see how, we're going to examine how a
7

8
00:00:38.129 --> 00:00:43.410
very popular Docker image has been
created. How those image layers are
8

9
00:00:43.410 --> 00:00:47.940
going to work together in this video. Okay,
so we want to talk about Docker Files.
9

10
00:00:47.940 --> 00:00:52.980
Docker Files are a very important thing.
Up here, in the screen, I have the
10

11
00:00:52.980 --> 00:01:00.300
official repository for the Mongo Docker
Image, and over here, I've already clicked
11

12
00:01:00.300 --> 00:01:04.470
through it, but if we click on this link,
here it go into the Docker File. What this
12

13
00:01:04.470 --> 00:01:09.240
is going to do, is show us the Docker
File behind it. So, this is showing Docker
13

14
00:01:09.240 --> 00:01:15.509
library/mongo, and we just want to
start getting into an introduction on
14

15
00:01:15.509 --> 00:01:18.990
what's going on behind the scenes,
because we are going to get further into
15

16
00:01:18.990 --> 00:01:23.189
Docker Files in this course. But at this
point, I just want to give you an idea of
16

17
00:01:23.189 --> 00:01:28.229
what's going on and how the Docker Files
relate to an image. So Docker File is
17

18
00:01:28.229 --> 00:01:33.930
really a recipe for the image. We're
saying, right at the top there, on line
18

19
00:01:33.930 --> 00:01:40.860
one, we're saying from debian : wheezy so
we're asking for a specific image of the
19

20
00:01:40.860 --> 00:01:46.320
Debian image, out of the Docker
repository for the tag of wheezy. So
20

21
00:01:46.320 --> 00:01:51.329
we're asking for very specific image
there by using the tag name. Docker
21

22
00:01:51.329 --> 00:01:58.320
hub or the docker repository is inferred
from that tag. Now, we're going through a
22

23
00:01:58.320 --> 00:02:04.350
series of commands here, and what we're
doing, is we are adding in a number of
23

24
00:02:04.350 --> 00:02:07.000
things. We're preparing that image. So
like on line 4,
24

25
00:02:07.000 --> 00:02:12.850
we're adding in a new user for the Mongo
database. That's a service account for
25

26
00:02:12.850 --> 00:02:19.930
the database. Now on line 6 to line 9, we
are running a command and see the
26

27
00:02:19.930 --> 00:02:25.720
slashes there? Effectively, what's
happening is, each group of commands is
27

28
00:02:25.720 --> 00:02:30.910
going to create an image layer. So every
command that you run in the Docker File
28

29
00:02:30.910 --> 00:02:36.310
will create a new image layer, that
makes up the image as a whole. So, see if
29

30
00:02:36.310 --> 00:02:42.540
I can highlight this. So, this will create
a layer, and this will create a layer,
30

31
00:02:42.540 --> 00:02:49.840
this is going to create a layer. So
that's why, we had multiple layers making
31

32
00:02:49.840 --> 00:02:56.440
up our Mongo image. Now another thing I
want to point out, is we did say that we
32

33
00:02:56.440 --> 00:03:03.540
are inheriting from Debian. Now, I'm
going to come over here, and this is the
33

34
00:03:03.540 --> 00:03:10.240
Debian wheezy Docker file, and you can
see here, it's basically loading up a
34

35
00:03:10.240 --> 00:03:16.390
tarball and then running command. So this it's going
35

36
00:03:16.390 --> 00:03:21.250
to say from scratch. And from scratch is
a special Docker Image. It's really
36

37
00:03:21.250 --> 00:03:28.090
like the base of base images. The
add command is adding in effectively a
37

38
00:03:28.090 --> 00:03:34.060
tarball for the Debian operating system.
So this could easily have a Red Hat
38

39
00:03:34.060 --> 00:03:37.750
instance. It could have a CentOS
instance. So it could have been a number
39

40
00:03:37.750 --> 00:03:43.120
different Linux instances, but the Mongo
team chose to use Debian, for whatever
40

41
00:03:43.120 --> 00:03:48.610
their particular reasons are. So a key
takeaway, that I want you to have from
41

42
00:03:48.610 --> 00:03:56.019
this is, is how Docker images can inherit
from each other. So our Mongo inherited
42

43
00:03:56.019 --> 00:04:03.310
from the Debian image. So that was
the starting image. Then we did, we said
43

44
00:04:03.310 --> 00:04:08.680
from that, so now I could write my own
Docker File, if I wanted to extend out
44

45
00:04:08.680 --> 00:04:13.989
the Mongo image, if I want to add in some
type of tool, or some type of monitoring
45

46
00:04:13.989 --> 00:04:17.590
tool or whatever it happens to be. If
there's something here, that it wasn't
46

47
00:04:17.590 --> 00:04:21.100
there for me and
particular application, I could make my
47

48
00:04:21.100 --> 00:04:28.390
own Docker File. Say from Mongo, which
would my file would inherit from Mongo,
48

49
00:04:28.390 --> 00:04:34.120
which inherited from the Debian image. So,
we could easily extend that out and it's
49

50
00:04:34.120 --> 00:04:38.710
quite frequent to do that inside the
Docker community. When you start
50

51
00:04:38.710 --> 00:04:42.810
getting into enterprise applications, you
are going to be doing stuff like this.
51

52
00:04:42.810 --> 00:04:48.010
Now, the fact that they share image
layers, that's very important, so I want
52

53
00:04:48.010 --> 00:04:52.360
to point out something to you there. Okay,
to help visualize things, we were to take
53

54
00:04:52.360 --> 00:05:04.410
the Mongo image here. Call this guy
Mongo. And then, also the Debian image.
54

55
00:05:04.410 --> 00:05:10.390
The Debian image is going to have layers.
It could be made up of a few different layers.
55

56
00:05:10.390 --> 00:05:18.790
Mongo is also going to have layers. I
will see more of them because we saw in
56

57
00:05:18.790 --> 00:05:23.980
the Docker files, there's more commands.
Now, the debian is probably one or two
57

58
00:05:23.980 --> 00:05:28.360
layers, not as many as Mongo. I'm just
doing this for illustrative purposes. Now,
58

59
00:05:28.360 --> 00:05:34.530
these are going to be the same. These are
the same file, so it can be come down.
59

60
00:05:34.530 --> 00:05:43.990
They are going to share these on your
host system. So if you had other images
60

61
00:05:43.990 --> 00:05:51.670
that were dependent upon the same Debian
instance, these files here, those would be
61

62
00:05:51.670 --> 00:05:55.960
shared amongst those images. So this is a
very important concept to understand
62

63
00:05:55.960 --> 00:06:03.130
where your images are made up of
different layers. Those layers do have a
63

64
00:06:03.130 --> 00:06:10.720
hash value. And if you have inherited
from the same base image, you will share
64

65
00:06:10.720 --> 00:06:15.850
those same image files. So if you think
if you're running dozens of containers
65

66
00:06:15.850 --> 00:06:21.250
on a shared server, this comes into play,
because it affects how much disk space
66

67
00:06:21.250 --> 00:06:25.270
and resources you're going to be
utilizing. It sounds a little weird at
67

68
00:06:25.270 --> 00:06:29.580
first, but this is actually a very
efficient way of sharing multiple
68

69
00:06:29.580 --> 00:06:35.320
containers and images running on the
same host hardware. Alright, so I hope you
69

70
00:06:35.320 --> 00:06:38.440
have a lot better understanding of how
things are coming together. How an image
70

71
00:06:38.440 --> 00:06:43.360
works and how a Docker file defines that
image. We get those image layers as
71

72
00:06:43.360 --> 00:06:47.560
individual image layers, which are
effectively files, not on the operating
72

73
00:06:47.560 --> 00:06:51.750
system that contain files and
directories that get a short value
73

74
00:06:51.750 --> 00:06:57.730
hash value and how those are some are
assembled to make an image. And then the
74

75
00:06:57.730 --> 00:07:02.230
Docker Daemon is going to make a container out
75

76
00:07:02.230 --> 00:07:07.570
of that image. So this is very
important concept of how these are going
76

77
00:07:07.570 --> 00:07:11.830
to be pulled down. We'll have groups of
image, just being pulled down. So now, if I,
77

78
00:07:11.830 --> 00:07:19.090
in this example, I alluded to the
video, so we have a debian base image. Now
78

79
00:07:19.090 --> 00:07:23.500
if I had three other things running
Debian and I was bringing down
79

80
00:07:23.500 --> 00:07:27.970
Mongo for the first time, those images,
shared at the debian unit image, it
80

81
00:07:27.970 --> 00:07:31.270
wouldn't pull those down. It's just going to
pull down the ones that they need
81

82
00:07:31.270 --> 00:07:36.760
from the Docker repository. So very
important concept. When you're
82

83
00:07:36.760 --> 00:07:39.940
dealing with containers, you got to start
thinking not about running just your
83

84
00:07:39.940 --> 00:07:44.770
container. You're going to be running many
different containers and so we're going to
84

85
00:07:44.770 --> 00:07:48.520
get into that later down, in the course.
But this is a very important concept. I
85

86
00:07:48.520 --> 00:07:52.270
want you to start getting your head
around how these layers are used to
86

87
00:07:52.270 --> 00:07:56.669
build up a Docker image and how these
layers are actually shared across
87

88
00:07:56.669 --> 00:08:00.450
multiple Docker Images.
