WEBVTT
0
1
00:00:04.310 --> 00:00:08.040
Alright, in this video we're going to
take a look at setting properties with
1

2
00:00:08.040 --> 00:00:13.679
profiles. Spring boot has a very very
powerful and versatile tool set. It
2

3
00:00:13.679 --> 00:00:17.369
allows you to work in the profile name
into the file name where there's dot
3

4
00:00:17.369 --> 00:00:21.900
properties file or yaml file and you
also have a little neat extension inside
4

5
00:00:21.900 --> 00:00:26.310
of yaml files where you can set the
profile inside the yaml file. And what's
5

6
00:00:26.310 --> 00:00:29.789
important to remember is, you might have
your properties spread across multiple
6

7
00:00:29.789 --> 00:00:35.100
files and now you're bringing in active
profiles and the hierarchy of the
7

8
00:00:35.100 --> 00:00:38.190
properties is going to override some
stuff for you. So when you set up profile
8

9
00:00:38.190 --> 00:00:44.250
that's active, that will override the
baseline, the base application.profile
9

10
00:00:44.250 --> 00:00:50.640
or application.properties or the application.yml file.
10

11
00:00:50.640 --> 00:00:56.460
So nead properties for profiles will
take precedence over properties that
11

12
00:00:56.460 --> 00:01:00.120
don't have a profile associated with
them. So this gives you a very very
12

13
00:01:00.120 --> 00:01:03.300
powerful tool set when you're
configuring and managing multiple
13

14
00:01:03.300 --> 00:01:08.430
environments with Spring Boot and this
is a Spring Boot specific feature. It is
14

15
00:01:08.430 --> 00:01:12.030
a feature of Spring Boot for the Spring
framework and how Spring Boot manages a
15

16
00:01:12.030 --> 00:01:16.770
property file. So I'm going to go in to
IntelliJ now and show you some examples
16

17
00:01:16.770 --> 00:01:22.500
of how we can work with
Spring Active Profiles and the Spring
17

18
00:01:22.500 --> 00:01:27.689
Boot configuration files. Okay Spring Boot gives us some interesting capabilities when
18

19
00:01:27.689 --> 00:01:32.759
we're dealing with profiles and property
files. This is a real handy thing to have
19

20
00:01:32.759 --> 00:01:36.750
and I'm going to show you an example
right here. So right now we have the
20

21
00:01:36.750 --> 00:01:41.189
spring profile active for de. If you
remember we were doing German languages
21

22
00:01:41.189 --> 00:01:47.040
and use de for our active profile. We've
been playing with that so far. So I'm
22

23
00:01:47.040 --> 00:01:51.270
going to continue with that and what we
can do is we can come in and we'll
23

24
00:01:51.270 --> 00:02:00.630
create a New File and now I'm calling it
application-de.properties. I'm
24

25
00:02:00.630 --> 00:02:07.439
going to go ahead and add that file. You
add that to Git. Okay so I have
25

26
00:02:07.439 --> 00:02:12.360
application.properties and I'm just
going to grab the guru.username for our
26

27
00:02:12.360 --> 00:02:21.989
fake DataSource
Bean. I'm going to copy him over. I'm
27

28
00:02:21.989 --> 00:02:28.050
going to say John and a couple asterisks there in German and what's going to happen
28

29
00:02:28.050 --> 00:02:34.470
when we run this, is because I've done
the application dash profile name, that
29

30
00:02:34.470 --> 00:02:40.590
property is going to override the
application properties. So I can come in
30

31
00:02:40.590 --> 00:02:45.810
here and run our little sample
application and we're going to see that
31

32
00:02:45.810 --> 00:02:52.650
first output line. So now that's
German because I've set the profile
32

33
00:02:52.650 --> 00:03:00.840
active and the application for that
profile dot properties is overriding the
33

34
00:03:00.840 --> 00:03:06.269
setting that we have for the other one. Now you can do the exact same thing with
34

35
00:03:06.269 --> 00:03:13.709
yaml. So I can create a yaml file
application-de for yaml and do that
35

36
00:03:13.709 --> 00:03:19.560
but, yaml gives us a unique
capability where we can come in and do
36

37
00:03:19.560 --> 00:03:28.230
multiple files. So I'm going to come in
and modify this and if I do three
37

38
00:03:28.230 --> 00:03:35.070
dashes, that indicates a file separator
inside the yaml file and I can do the
38

39
00:03:35.070 --> 00:03:47.519
Spring profiles and say de here and
let's grab one of the settings
39

40
00:03:47.519 --> 00:03:55.790
for the jms. I'm just going to grab the
username, copy that over,
40

41
00:03:59.450 --> 00:04:05.540
and we'll call this, I have some dollar
signs there so we know that's in German.
41

42
00:04:05.540 --> 00:04:10.860
So we'll see that output. So now I'm
going to run this. I'm showing you a
42

43
00:04:10.860 --> 00:04:14.970
different way to set a Profile specific
property and you can see that that is
43

44
00:04:14.970 --> 00:04:20.340
getting picked up. So what's happening
inside the yaml file i, I don't have a
44

45
00:04:20.340 --> 00:04:26.010
property here at the beginning and it's
picking up these properties by default
45

46
00:04:26.010 --> 00:04:30.900
but now I have a file separator in there
that's three dashes of a file separator
46

47
00:04:30.900 --> 00:04:36.870
for yaml and I've specified a Spring
Profile. So the Spring Profile is going
47

48
00:04:36.870 --> 00:04:42.539
to override. There on lines 10 through
12 because that's part of that Profile
48

49
00:04:42.539 --> 00:04:47.960
that overrides the other one. So two
different ways here just to recap,
49

50
00:04:47.960 --> 00:04:51.990
application dash and then whether its properties or
50

51
00:04:51.990 --> 00:04:58.289
yaml that will take precedence over
a file that does not have the Profile
51

52
00:04:58.289 --> 00:05:04.380
information in it and then it again,
within a single yaml file you can set up
52

53
00:05:04.380 --> 00:05:09.030
a specific Profile and override
properties for that Profile when it's
53

54
00:05:09.030 --> 00:05:13.080
active. Alright so you can see that
it's pretty versatile tool set there.
54

55
00:05:13.080 --> 00:05:18.570
I've had some pretty complex
configurations contained in Spring Boot
55

56
00:05:18.570 --> 00:05:24.770
property files like this and it's not
terribly uncommon to use a mix of
56

57
00:05:24.770 --> 00:05:29.490
property files and yaml files. Maybe not
the best habit. Some people like to
57

58
00:05:29.490 --> 00:05:34.979
use one or the other. When I am coding on
a spring application, it really kind of
58

59
00:05:34.979 --> 00:05:41.610
depends on the project team. I do like to
keep it either in dot property files or dot
59

60
00:05:41.610 --> 00:05:45.419
yml files. I just think it's a little
bit cleaner to do that at that way but
60

61
00:05:45.419 --> 00:05:50.010
that's my opinion. You can see here that
I was able to mix and match things at
61

62
00:05:50.010 --> 00:05:54.180
will with no problem at all because what
Spring is going to do under covers with
62

63
00:05:54.180 --> 00:05:57.720
the help of Spring Boot, is bring
everything up into the Spring Context
63

64
00:05:57.720 --> 00:06:01.440
and those properties are going to get
wired into the Spring Context using that
64

65
00:06:01.440 --> 00:06:05.460
property hierarchy for us where we will
override different stuff and get that in
65

66
00:06:05.460 --> 00:06:09.780
and so it gives us a real versatile tool
set that we can utilize and when we're
66

67
00:06:09.780 --> 00:06:13.749
configuring our Spring Spplications.
