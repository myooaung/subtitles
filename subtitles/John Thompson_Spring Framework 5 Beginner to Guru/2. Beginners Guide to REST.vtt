WEBVTT
0
1
00:00:04.700 --> 00:00:08.639
Alright. In this video, we are gonna be
taking a look at what I'm calling a
1

2
00:00:08.639 --> 00:00:12.960
Beginner's Guide to REST and we're gonna
take a look to see what REST is, what
2

3
00:00:12.960 --> 00:00:17.520
RESTful services are and some of the
common terminology and concepts behind
3

4
00:00:17.520 --> 00:00:22.529
it. So that's gonna be important guide
to getting started with our RESTful web
4

5
00:00:22.529 --> 00:00:27.180
services. And I wanna point out because
of the simplicity and versatility of
5

6
00:00:27.180 --> 00:00:31.130
RESTful Web Services, that kind of
become a de facto standard for
6

7
00:00:31.130 --> 00:00:36.540
exchanging and interacting with
different systems on the internet and
7

8
00:00:36.540 --> 00:00:40.860
also within the enterprise. They're
pretty widely used. When I started with
8

9
00:00:40.860 --> 00:00:43.350
web services SOAP was kind of like the
king of the hill.
9

10
00:00:43.350 --> 00:00:48.210
But now, the RESTful web services opens
up to so many different
10

11
00:00:48.210 --> 00:00:53.250
clients. They kind of become a de facto
standard for building web services on
11

12
00:00:53.250 --> 00:00:58.399
the Internet to consume by multiple
clients. Now that what REST stands for, is
12

13
00:00:58.399 --> 00:01:04.860
Representational State Transfer. Now the
representation and modern-era is
13

14
00:01:04.860 --> 00:01:09.510
typically JSON or XML. It could be a
different format. The state transfer we
14

15
00:01:09.510 --> 00:01:15.960
typically see is HTTP. And the
concept of REST was established by Roy
15

16
00:01:15.960 --> 00:01:20.520
Fielding in his 2000 doctoral
dissertation. And I wanna point out
16

17
00:01:20.520 --> 00:01:25.229
that the dissertation that he did was
kind of technology neutral. So he didn't
17

18
00:01:25.229 --> 00:01:30.799
call out for us to be using HTTP or JSON
or XML, at that time. He kind of left the
18

19
00:01:30.799 --> 00:01:36.180
concepts of REST and it was focused on
concepts. But things have definitely
19

20
00:01:36.180 --> 00:01:42.780
evolved in the last time recording 17
years. And primarily, we're gonna see REST
20

21
00:01:42.780 --> 00:01:50.430
using the verbs of HTTP and then JSON or
XML as the payload, Although we can get
21

22
00:01:50.430 --> 00:01:54.030
into different things. And I wanna talk
about some terminology. You just heard me
22

23
00:01:54.030 --> 00:02:01.710
mention verbs And we use REST with HTTP
methods. If you remember, we looked at GET,
23

24
00:02:01.710 --> 00:02:07.049
POST, PUT and DELETE, Messages,
It's gonna be dealing with messages
24

25
00:02:07.049 --> 00:02:11.960
and typically we are gonna be dealing
with JSON and XML. Although they are other
25

26
00:02:11.960 --> 00:02:17.660
payloads we could use, in a given
circumstance, but the majority of the
26

27
00:02:17.660 --> 00:02:22.400
time we're gonna be dealing with JSON
and XML. I'd have to say probably 98% of
27

28
00:02:22.400 --> 00:02:26.270
the time. If I had to take a wild guess.
And another concept we need to talk
28

29
00:02:26.270 --> 00:02:33.380
about is URI. And URI stands for
Uniform Resource Identifier. So this is a
29

30
00:02:33.380 --> 00:02:37.340
unique string identifying a resource.
Something that you're gonna get off a
30

31
00:02:37.340 --> 00:02:45.320
server like a file in Amazon S3, that
would have a URI. Now URI and
31

32
00:02:45.320 --> 00:02:52.670
URL, with a URL, which is a Uniform
Resource Locator is basically a URL as a
32

33
00:02:52.670 --> 00:03:04.800
URI with network information. So here, I
have an example of  http://www.example.com
33

34
00:03:04.800 --> 00:03:08.570
HTTP is the
network information. And that prefix
34

35
00:03:08.570 --> 00:03:16.130
there, could be HTTPS or it can be FTP. So
that's defining the protocol. So that's
35

36
00:03:16.130 --> 00:03:20.720
network information. So that whole string
is considered a URI but with the network
36

37
00:03:20.720 --> 00:03:26.750
information that's also a URL. Another
important concept is this funky word
37

38
00:03:26.750 --> 00:03:32.300
here Idempotence. You know probably
mispronouncing that. It's a kind of a
38

39
00:03:32.300 --> 00:03:38.690
funky word to say. But in Wikipedia, it
defines Idempotence is the property of
39

40
00:03:38.690 --> 00:03:42.470
certain operations in mathematics and
computer science that they can be
40

41
00:03:42.470 --> 00:03:45.830
applied multiple times without changing
the result beyond the initial
41

42
00:03:45.830 --> 00:03:50.840
application. So basically, in other words,
you can exercise the operation in
42

43
00:03:50.840 --> 00:03:54.940
multiple times without changing the
final result. So a good example would be
43

44
00:03:54.940 --> 00:04:01.130
doing a get request to get the get a
page from a web server that action is
44

45
00:04:01.130 --> 00:04:04.220
not gonna change anything on the
server side. So you can sit there,
45

46
00:04:04.220 --> 00:04:09.860
envoke the get request all day long and
it's not going to continue. It's not
46

47
00:04:09.860 --> 00:04:12.140
gonna update it
anything on the server side. At least
47

48
00:04:12.140 --> 00:04:16.580
nothing that matters to you. Obviously
this is gonna like effect if you're
48

49
00:04:16.580 --> 00:04:20.359
doing like a page count or something
like that on the server. But for purposes
49

50
00:04:20.359 --> 00:04:23.139
of the resource that you're working with,
it's
50

51
00:04:23.139 --> 00:04:27.639
not gonna be changing anything.
REST services are also stateless. And
51

52
00:04:27.639 --> 00:04:33.310
this is very important because they do
not maintain any client state. HTTP
52

53
00:04:33.310 --> 00:04:39.129
itself is also stateless. But with
sessions, we have established state for
53

54
00:04:39.129 --> 00:04:43.810
web applications. But for REST
applications, they do not maintain any
54

55
00:04:43.810 --> 00:04:47.409
type of client states. So that was an
important concept. Once you start messing
55

56
00:04:47.409 --> 00:04:52.270
with state, state your mess up we're
scalability effectively. Another concept
56

57
00:04:52.270 --> 00:04:57.490
that we need to talk about is HATEOAS or
[hate - tos]. Some people call it Hyper media
57

58
00:04:57.490 --> 00:05:02.319
as The Engine of Application State. So
Wikipedia talks about a REST client
58

59
00:05:02.319 --> 00:05:06.939
should then be able to use server-
provided links dynamically discover all
59

60
00:05:06.939 --> 00:05:11.770
the available actions that it needs. As
access proceeds, the server responds with
60

61
00:05:11.770 --> 00:05:15.759
text that includes hyperlinks to other
actions that are currently available. So
61

62
00:05:15.759 --> 00:05:20.639
when you invoke a RESTful Web Service,
that web service can provide you links
62

63
00:05:20.639 --> 00:05:27.099
with actions that you can take on that
resource. So this is a way to develop
63

64
00:05:27.099 --> 00:05:31.629
your services so that they are more
friendly for your clients that are gonna
64

65
00:05:31.629 --> 00:05:35.500
be using their services. Now let's
take a look at some of the verbs.
65

66
00:05:35.500 --> 00:05:41.139
HTTP - GET this is gonna be used to read
data from a resource. I want to point out
66

67
00:05:41.139 --> 00:05:46.270
it is read-only. It is idempotent. There's
that funky word again. And it is
67

68
00:05:46.270 --> 00:05:51.310
considered a safe operation that does
not change any state information of the
68

69
00:05:51.310 --> 00:05:57.669
resource that you're working with. Next
up is gonna be HTTP - PUT. Now this is
69

70
00:05:57.669 --> 00:06:01.839
gonna be used. This is kind of a dual
action. So we're gonna put a resource
70

71
00:06:01.839 --> 00:06:06.310
to the server that we're working with.
And it's gonna cause an insert if their
71

72
00:06:06.310 --> 00:06:11.560
resources not found. Or if it is found,
it's going to update that. This is also
72

73
00:06:11.560 --> 00:06:15.639
considered to be idempotent.
Multiple puts is not gonna change the
73

74
00:06:15.639 --> 00:06:20.710
results. So if we save a file for the
first time, that file would get
74

75
00:06:20.710 --> 00:06:24.669
established on the hard drive. And then
when we save it again, if we haven't
75

76
00:06:24.669 --> 00:06:29.469
changed anything, nothing's going to
change on that resource. So that's how
76

77
00:06:29.469 --> 00:06:35.349
put is gonna work. So we'll save up a
an object to the server and if we save
77

78
00:06:35.349 --> 00:06:39.090
that same object again,
and that object state has not changed,
78

79
00:06:39.090 --> 00:06:43.810
nothing is gonna change on the server
side. Now this would considered not safe or
79

80
00:06:43.810 --> 00:06:48.370
non safe operation because it does
change the state of a resource on the
80

81
00:06:48.370 --> 00:06:57.729
server side. Next up is HTTP - POST and
this is very similar to put but this is
81

82
00:06:57.729 --> 00:07:03.699
going to always do an insert. So this is
important. Now this is non idempotent. So
82

83
00:07:03.699 --> 00:07:10.389
multiple post is expected upon to create
multiple objects. Now this is not a 100%
83

84
00:07:10.389 --> 00:07:16.360
certainty. Now if you're passing in the
ID of a value, it's probably not going to
84

85
00:07:16.360 --> 00:07:20.439
or of a resource, I should say. if you
pass in that idea of a resource it may
85

86
00:07:20.439 --> 00:07:27.370
not create a new one. But typically, if
you do multiple posts, it is going to
86

87
00:07:27.370 --> 00:07:32.770
create new resources. So this is saying
it's going to create something new. This
87

88
00:07:32.770 --> 00:07:37.240
is also not a safe operation because it
does change the state of a resource. And
88

89
00:07:37.240 --> 00:07:45.279
wanna point out that this is the only
Non-Idempotent,  Non-Safe HTTP verb. And
89

90
00:07:45.279 --> 00:07:50.830
finally, we need to talk about HTTP - 
DELETE. So this is going to be used to
90

91
00:07:50.830 --> 00:07:55.449
delete an object or resource on the
server side. And this is also considered
91

92
00:07:55.449 --> 00:08:00.610
idempotent because if you try to delete
the same thing multiple times, the first
92

93
00:08:00.610 --> 00:08:03.969
delete is gonna delete it. And if you
say delete it again the server is
93

94
00:08:03.969 --> 00:08:08.919
expected to do the same result. So it's
already gone. So nothing else is gonna
94

95
00:08:08.919 --> 00:08:14.349
happen. And then this is also not a safe
operation because it does change the
95

96
00:08:14.349 --> 00:08:19.089
state of the resource by deleting it. So
this is a quick overview of some of the
96

97
00:08:19.089 --> 00:08:23.979
important concepts behind REST API's and
some of the concepts that we're gonna
97

98
00:08:23.979 --> 00:08:26.259
be working with. We're gonna be seeing
a lot of this going forward in the
98

99
00:08:26.259 --> 00:08:31.029
course. I want you to keep this in the
back your mind of how the REST resources
99

100
00:08:31.029 --> 00:08:35.349
are intended to be working. And this is
an important context because we are
100

101
00:08:35.349 --> 00:08:41.140
gonna be working with the resources
and HTTP verbs. We're gonna see how
101

102
00:08:41.140 --> 00:08:47.670
those work in conjunction with URIs
and to build a RESTful interface.
