WEBVTT
0
1
00:00:04.220 --> 00:00:08.330
Okay, early in the course we saw an
example of using Spring Data
1

2
00:00:08.330 --> 00:00:12.030
repositories and we're going to go
through and set those up right now. And I
2

3
00:00:12.030 --> 00:00:16.619
want to talk a little bit about our data
model and what we've done in setting up
3

4
00:00:16.619 --> 00:00:22.949
our JPA data model. Now we set up Recipe
to cascade down to Notes and Ingredient.
4

5
00:00:22.949 --> 00:00:29.550
So all operations between Recipe, so if
we do any updates on Recipe and anything
5

6
00:00:29.550 --> 00:00:34.680
on the child objects of
notes and ingredients of Recipe, those
6

7
00:00:34.680 --> 00:00:39.090
will get persisted down through the JPA
mapping because, I'll show you over here
7

8
00:00:39.090 --> 00:00:45.260
just as a reminder. We went in and put
this cascade all on those relationships.
8

9
00:00:45.260 --> 00:00:54.210
So for ingredients and notes, we are
using a CascadeType of ALL. So for that,
9

10
00:00:54.210 --> 00:00:59.760
we set that up because that Recipe is
going to be our primary object and we'd
10

11
00:00:59.760 --> 00:01:04.710
probably won't be working with
ingredients independently or notes
11

12
00:01:04.710 --> 00:01:08.549
independently. So I don't see a use case
there in our little recipe application.
12

13
00:01:08.549 --> 00:01:17.460
So with that in mind, going back to our
model, I don't see a need to set up
13

14
00:01:17.460 --> 00:01:22.170
Spring Data repository for notes or
ingredients. Now Category, that is
14

15
00:01:22.170 --> 00:01:26.280
something is going to be maintained
independent of Recipe as well as UnitOf
15

16
00:01:26.280 --> 00:01:30.509
Measure. We're using that as a reference
table. So I don't see a need to set up
16

17
00:01:30.509 --> 00:01:35.750
you know to measure either. So what we
can do is just set up Spring Data
17

18
00:01:35.750 --> 00:01:40.259
repositories for Recipe, Category and
UnitOfMeasure. So I'm going to go over
18

19
00:01:40.259 --> 00:01:44.850
and live code that now and step you
through that. So I'm going to come back
19

20
00:01:44.850 --> 00:01:52.229
to IntelliJ and again, I like to set up
my repositories in a package called
20

21
00:01:52.229 --> 00:02:02.299
repositories and let's start off with
setting up a Java class called Recipe
21

22
00:02:02.299 --> 00:02:12.470
Repository. And this is going to be an
interface. I'll say okay there. I'm going to
22

23
00:02:12.470 --> 00:02:18.800
add that to Git for you guys and now
we're going to use the Spring Data CRUD
23

24
00:02:18.800 --> 00:02:26.060
Repository and you can see it takes in
two generics there - the T and the ID. So
24

25
00:02:26.060 --> 00:02:32.060
the T is going to be the entity type and
the ID is going to be the ID type of the
25

26
00:02:32.060 --> 00:02:37.220
entity and this way, Spring Data will
know how to construct this by using
26

27
00:02:37.220 --> 00:02:41.530
reflection and Java generics. So I'm
going to go ahead and hit enter there
27

28
00:02:41.530 --> 00:02:48.230
and we want to add in the Recipe and
everything that we did we used a Long for
28

29
00:02:48.230 --> 00:02:55.220
the ID property. So that gives us the
crud repository for recipes. Now we need
29

30
00:02:55.220 --> 00:03:00.019
to repeat that for UnitOfMeasure and
Category. So let's go ahead and create
30

31
00:03:00.019 --> 00:03:13.670
the Category one. We're going to say
interface. Add that into GitHub. Extending
31

32
00:03:13.670 --> 00:03:19.640
the CrudRepository and making sure that
we do have the right Category. You can
32

33
00:03:19.640 --> 00:03:23.840
see on there several category classes
out there, so we're depending on Java's
33

34
00:03:23.840 --> 00:03:28.730
packages, packaging in Java to get the
proper one. So it's getting out of my
34

35
00:03:28.730 --> 00:03:40.010
domain package. Do it a Long there as well
and let's come in here and create the
35

36
00:03:40.010 --> 00:03:49.100
final repository which will be UnitOfMeasure. And I want to point out that
36

37
00:03:49.100 --> 00:03:54.799
this is a naming convention to end it
with a domain or the entity, followed by
37

38
00:03:54.799 --> 00:04:00.170
repository. That is very common use case
or a convention as used it would
38

39
00:04:00.170 --> 00:04:03.920
Spring Data. Personally I think if you
did something else it would just lead to
39

40
00:04:03.920 --> 00:04:09.100
confusion amongst people who know Spring
Data.
40

41
00:04:11.350 --> 00:04:17.900
Again we're selecting the entity type
followed by Long which is the ID
41

42
00:04:17.900 --> 00:04:25.010
property. Just to do a refresh here so by
the ID, I am looking at that type that is
42

43
00:04:25.010 --> 00:04:30.890
a second parameter there. And now this completes the setup of the Spring
43

44
00:04:30.890 --> 00:04:34.520
Data repositories and I'm just
going to run it and make sure everything
44

45
00:04:34.520 --> 00:04:39.560
comes up okay and Spring is still going
to bring these up even though we don't
45

46
00:04:39.560 --> 00:04:45.950
have anything demanding a need for these
CRUD repositories. They have now been
46

47
00:04:45.950 --> 00:04:50.810
created as Spring beans in the context
and if we had anything that needed them,
47

48
00:04:50.810 --> 00:04:56.150
it would have got injected in there. So
we will set up a service layer coming up
48

49
00:04:56.150 --> 00:05:00.200
but first I've got a couple other things
I want to show you about how to load
49

50
00:05:00.200 --> 00:05:06.290
data in into the system. This time
rather than using Spring events, we are
50

51
00:05:06.290 --> 00:05:12.440
going to use a data loading via Spring
Boot. Do I'm going to shut this down and
51

52
00:05:12.440 --> 00:05:16.790
save this up to GitHub for you guys and
you'll be able to get the full example
52

53
00:05:16.790 --> 00:05:20.890
of the three repositories that we just
added.
