WEBVTT
0
1
00:00:05.200 --> 00:00:09.440
Alright we are going to take a look at some of the testing stuff that we have for Spring. So what I want to do is
1

2
00:00:09.490 --> 00:00:15.190
establish a common terminology around testing what is the difference between a unit test and integration
2

3
00:00:15.190 --> 00:00:16.670
test is pretty important.
3

4
00:00:16.750 --> 00:00:18.310
What is a functional test.
4

5
00:00:18.340 --> 00:00:19.200
Important stuff.
5

6
00:00:19.240 --> 00:00:26.420
And then we're going to dive in and look at the tools that we have for testing Spring applications.
6

7
00:00:27.500 --> 00:00:28.070
All right.
7

8
00:00:28.110 --> 00:00:32.600
In this video we are going to talk about testing within the Spring Framework.
8

9
00:00:34.090 --> 00:00:36.970
Now I want to get into some testing terminology first.
9

10
00:00:37.100 --> 00:00:38.320
Code under test.
10

11
00:00:38.380 --> 00:00:43.130
So this is a phrase that is going to refer to the code or the application that you are testing.
11

12
00:00:43.150 --> 00:00:45.940
So this is the actual application code.
12

13
00:00:45.970 --> 00:00:51.760
It could be a Class, a method or a whole application if you are doing functional testing.
13

14
00:00:52.020 --> 00:00:59.560
So and then the other term that we need to distinguish is test fixture. A test fixture is a fixed state
14

15
00:00:59.680 --> 00:01:04.280
of a set of objects used as a baseline for running test.
15

16
00:01:04.330 --> 00:01:10.270
The purpose of a test fixture is to ensure that there will be a well known and fixed environment in
16

17
00:01:10.270 --> 00:01:13.890
which the tests are run so that the results are repeatable.
17

18
00:01:13.900 --> 00:01:16.260
And this is right out of the JUnit documentation.
18

19
00:01:16.330 --> 00:01:18.770
So this is pretty fairly important.
19

20
00:01:18.890 --> 00:01:20.440
Now you get two distinctions here.
20

21
00:01:20.440 --> 00:01:29.290
One is let's say keep it simple you have a class that does something. The test fixture is the test itself
21

22
00:01:29.620 --> 00:01:32.080
and anything that class is going to depend on.
22

23
00:01:32.080 --> 00:01:39.640
So that can include input data, a mock objects, maybe loading a database with known data or giving a known
23

24
00:01:39.640 --> 00:01:41.010
set of inputs to that.
24

25
00:01:41.140 --> 00:01:42.550
That method that you're testing.
25

26
00:01:42.550 --> 00:01:45.190
So two very important distinctions here.
26

27
00:01:45.190 --> 00:01:51.340
I see people get these a little blurred at times but you have code under test that is going to be your
27

28
00:01:51.480 --> 00:01:55.900
your code that you wrote for the application the class or whatever the method.
28

29
00:01:55.900 --> 00:02:02.800
And then the test fixture is the stuff around it that you're using to test that code. Unit tests / unit
29

30
00:02:02.800 --> 00:02:03.540
testing.
30

31
00:02:03.670 --> 00:02:11.920
This is code written test code under test and so should be very specific you're going after to test
31

32
00:02:11.920 --> 00:02:16.470
a specific portion of code such as a method within a class.
32

33
00:02:16.480 --> 00:02:24.310
Now the percentage of the lines of code tested ideally is in the 70 percent range 70-80 percent some
33

34
00:02:24.310 --> 00:02:25.190
people disagree on this.
34

35
00:02:25.200 --> 00:02:27.890
Some people like to see it more some people say less.
35

36
00:02:28.180 --> 00:02:33.170
There's a diminishing returns on this so you're writing code to test code.
36

37
00:02:33.220 --> 00:02:37.780
You do want to have solid coverage but if you start getting up around 100 percent that's where you're
37

38
00:02:37.780 --> 00:02:43.400
becoming very very nitpicky so you get diminishing returns when you start getting beyond 80 percent.
38

39
00:02:43.600 --> 00:02:49.180
So you'll be writing test like code log statements and getters and setters and things like that where
39

40
00:02:49.180 --> 00:02:51.700
you don't have a lot of value in the task.
40

41
00:02:51.700 --> 00:02:54.750
So I like to shoot in the 70-80 percent range.
41

42
00:02:54.940 --> 00:03:01.630
It's a good place to be because you are getting effective test coverage.
42

43
00:03:02.110 --> 00:03:05.260
Now you should be unity in your test.
43

44
00:03:05.260 --> 00:03:11.080
It's a kind of a made up word there but your unit tests should be small and fast and they're going to
44

45
00:03:11.080 --> 00:03:13.570
be targeting very specific things.
45

46
00:03:13.840 --> 00:03:19.000
And a true unit test is not going to have any external dependencies that should not be running on a
46

47
00:03:19.000 --> 00:03:19.900
database.
47

48
00:03:19.980 --> 00:03:22.250
Should not be bringing up the Spring context.
48

49
00:03:22.300 --> 00:03:25.570
It should just be your Java class and your test code.
49

50
00:03:25.660 --> 00:03:34.000
So that is a true unit test and that is in addition to or in contrast to I should say integration
50

51
00:03:34.000 --> 00:03:34.710
test.
51

52
00:03:34.720 --> 00:03:41.440
Now these are designed to test, test behaviors between objects and parts of the overall system. Integration
52

53
00:03:41.440 --> 00:03:43.970
tests are a much larger scope than unit test.
53

54
00:03:43.990 --> 00:03:48.800
They can include the Spring context, a database, message brokers.
54

55
00:03:48.910 --> 00:03:54.810
The downside of your integration test is that they are going to run slower than unit test.
55

56
00:03:54.910 --> 00:03:56.690
That's an important distinction here.
56

57
00:03:56.710 --> 00:04:04.330
Your unit test when you're just targeting method on a class is going to run in a fraction of a second.
57

58
00:04:04.750 --> 00:04:11.110
Integration test if you're bringing up a database through the Spring context that could take 30 seconds
58

59
00:04:11.110 --> 00:04:12.580
or so or 40 seconds.
59

60
00:04:12.910 --> 00:04:20.460
But the distinction is a fraction of a second so versus 30 seconds is exponentially larger.
60

61
00:04:20.520 --> 00:04:26.530
And importance is when you start getting into a large project your integration tests are going to take
61

62
00:04:26.530 --> 00:04:27.250
time to run.
62

63
00:04:27.250 --> 00:04:32.110
It could take five minutes, it could take 10 minutes, it could take a half hour depending on how large
63

64
00:04:32.110 --> 00:04:33.150
the project you have.
64

65
00:04:33.320 --> 00:04:38.840
And I see a lot of developers favor integration test on things that could be done in it.
65

66
00:04:38.980 --> 00:04:46.690
So I like to try to focus on unit test over integration test but integration tests absolutely do have
66

67
00:04:46.690 --> 00:04:53.560
a place. Now functional tests typically means you're going to test a running application. Your application
67

68
00:04:53.560 --> 00:04:57.390
is live and likely deployed in a known environment.
68

69
00:04:57.400 --> 00:05:03.400
So you're going to be bringing up as much as you can in that and you're going to be looking at functional
69

70
00:05:03.400 --> 00:05:09.670
touch points. You could be using Selenium webdriver or JBehave and Spock to test a automatically test
70

71
00:05:09.700 --> 00:05:16.730
a web application to run a mock browser and test browser actions could be calling web services now calling
71

72
00:05:16.750 --> 00:05:22.140
API and a web service and sending in or sending and receiving messages over a message brokers.
72

73
00:05:22.420 --> 00:05:29.470
This is where you are doing functional or also called end to end testing as another bucket for functional
73

74
00:05:29.470 --> 00:05:30.240
test.
74

75
00:05:30.560 --> 00:05:34.960
And let's talk about test driven development so that's what we're going to be doing in this course going
75

76
00:05:34.960 --> 00:05:37.050
forward this is a best practice.
76

77
00:05:37.330 --> 00:05:40.340
Effectively what you want to do is write your test first.
77

78
00:05:40.410 --> 00:05:42.200
And of course going to be failing.
78

79
00:05:42.400 --> 00:05:45.200
And then you're going to produce code to fix the test.
79

80
00:05:45.250 --> 00:05:50.980
Now behavior driven development something that builds upon test driven development and that specifies
80

81
00:05:50.980 --> 00:05:58.000
that test and unit of software should be specified in terms of the desired behavior of the unit.
81

82
00:05:58.000 --> 00:06:02.180
This is often done with DSLs to create a natural language.
82

83
00:06:02.180 --> 00:06:09.480
The goal of BDD is to open up the test more advanced business users in developer hands.
83

84
00:06:09.580 --> 00:06:15.700
So you could have a strong QA or trusting person that's technically adapt but you give them a natural
84

85
00:06:15.700 --> 00:06:19.240
language DSL where they can configure different scenarios.
85

86
00:06:19.510 --> 00:06:24.940
I've used Cucumber that's a good alternative. I've never used JBehave but I hear good things about
86

87
00:06:24.940 --> 00:06:25.040
it.
87

88
00:06:25.040 --> 00:06:32.500
But my personal favorite for BDD is Spock and that's a Groovy based test framework and a good example
88

89
00:06:32.500 --> 00:06:34.900
of Spock is you get a given when then.
89

90
00:06:34.980 --> 00:06:41.500
I really like using Spock especially the given when then because it gives you a good framework about
90

91
00:06:41.500 --> 00:06:42.770
thinking about your tests.
91

92
00:06:43.140 --> 00:06:46.460
You've got to think about a scenario where you're given a set of data.
92

93
00:06:46.550 --> 00:06:54.610
When is the action like calling a method on a class and the then statement is what you expect to happen
93

94
00:06:54.840 --> 00:06:59.560
and you're going to create test around that so it's a really good thing to use and I personally
94

95
00:06:59.560 --> 00:07:02.330
really favor Spock for a test that I write.
95

96
00:07:03.800 --> 00:07:09.970
Now a couple other terminologies is a Mock and we are going to definitely be taking advantage of Mock's.
96

97
00:07:10.370 --> 00:07:13.540
It's a fake implementation of a class used for testing.
97

98
00:07:13.540 --> 00:07:20.930
Kind of like a test double and you see how I've been teaching you to implement an interface and do dependency
98

99
00:07:20.970 --> 00:07:22.910
an injection with an interface.
99

100
00:07:23.050 --> 00:07:29.590
Well guess what our Mock's can implement that interface and allows us to test Dependency Injection classes
100

101
00:07:29.890 --> 00:07:33.200
so we can inject the Mock and therefore our unit test.
101

102
00:07:33.610 --> 00:07:42.520
Now a Spy is a partial Mock and usually uses for a heavyweight class where you want to add in use that class
102

103
00:07:42.550 --> 00:07:49.540
but you want to select methods specific methods of that real class to mock out. So don't see this use
103

104
00:07:49.540 --> 00:07:49.870
a lot.
104

105
00:07:49.870 --> 00:07:53.710
I mean there are scenarios where you do want to use this as a tool in the tool box.
105

106
00:07:53.710 --> 00:08:01.020
I generally favor mocking over using spies but there are scenarios where you do need to use a Spy.
106

107
00:08:01.020 --> 00:08:05.650
All right testing goals touched on this a little bit already but generally you want the majority of
107

108
00:08:05.660 --> 00:08:11.340
your test to unit test. Bringing in  the Spring context does make your test exponentially slower.
108

109
00:08:11.370 --> 00:08:17.790
So I really focus on testing business logic inside of unit test and that's where you want to test the
109

110
00:08:17.790 --> 00:08:24.360
majority. Your integration tests are going to be testing more and and things you're looking at make sure
110

111
00:08:24.360 --> 00:08:27.930
that interactions work properly between different components.
111

112
00:08:27.930 --> 00:08:34.470
So you're not going to be as granular and specific specificity of what you're testing with integration
112

113
00:08:34.470 --> 00:08:39.480
but you're going to be a little bit looser on the specific criteria. You're looking more for the interaction
113

114
00:08:39.480 --> 00:08:46.360
there where your unit test you're going to be more precise and what you're asking the test to verify.
114

115
00:08:46.800 --> 00:08:52.440
And a good way to think about this is think of like a pyramid where the base of that pyramid is going
115

116
00:08:52.440 --> 00:08:53.990
to be made up of your unit test.
116

117
00:08:54.000 --> 00:08:56.370
That's where you should have the most number of tests.
117

118
00:08:56.460 --> 00:09:00.070
And then the middle of that is going to be your integration test.
118

119
00:09:00.360 --> 00:09:04.030
And at the top that's where you get your functional test live so. You are going to,
119

120
00:09:04.110 --> 00:09:10.530
should an ideal world you get to have lots and lots of unit tests less integration test and even less
120

121
00:09:10.650 --> 00:09:15.710
functional test. Ok test scope dependencies.
121

122
00:09:15.730 --> 00:09:22.180
We have been using the Spring initializr and that has meant bringing in our spring-boot-starter-test
122

123
00:09:22.410 --> 00:09:23.470
dependency.
123

124
00:09:23.740 --> 00:09:30.400
And when we do that we get the following dependencies in there so we get JUnit and that is really the
124

125
00:09:30.400 --> 00:09:38.200
de facto standard for unit testing Java applications. Widely popular it's really risen to the top of popularity.
125

126
00:09:38.200 --> 00:09:40.710
Most shops that I work with use JUnit.
126

127
00:09:41.200 --> 00:09:47.470
That's kind of like it said it's the de facto standard so it is a very very popular and it's a simple
127

128
00:09:47.470 --> 00:09:50.800
testing framework to use and we will be looking at that shortly.
128

129
00:09:50.920 --> 00:09:56.350
Spring Test and Spring Boot Test these are a set of utilities that Spring provides for testing Spring
129

130
00:09:56.350 --> 00:09:58.860
and Spring Boot applications. AssertJ,
130

131
00:09:59.080 --> 00:10:02.880
that is a fluent assertion library and we'll take a look at that later.
131

132
00:10:02.950 --> 00:10:10.570
Hamcrest is a library of matcher objects. So JUnit itself does have some capabilities as far as doing
132

133
00:10:10.600 --> 00:10:17.740
assertions but Hamcrest gives us a lot lot more interesting capabilities. Mockito is a Java mocking
133

134
00:10:17.740 --> 00:10:22.680
framework and it's very popular and we will definitely be utilizing Mockito.
134

135
00:10:22.690 --> 00:10:26.160
And we have JSONassert and JSONPath.
135

136
00:10:26.230 --> 00:10:33.140
These two will be when we get into developing RESTful interfaces we will be leveraging those. Now we
136

137
00:10:33.140 --> 00:10:34.360
spoke about JUnit.
137

138
00:10:34.790 --> 00:10:37.430
JUnit 4 is very popular right now.
138

139
00:10:37.430 --> 00:10:44.380
It was originally written by Erich Gamma and Kent Beck is a very iconic guy in the community.
139

140
00:10:44.390 --> 00:10:49.310
He's the creator of extreme programming and guy does a lot of great great work and great
140

141
00:10:49.310 --> 00:10:51.760
contributions to the community.
141

142
00:10:51.800 --> 00:11:00.440
Now at the time of recording JUnit 5 is an alpha. Milestone 1 is expected in July 2017 and it's supposed
142

143
00:11:00.440 --> 00:11:01.850
to go GA.
143

144
00:11:01.890 --> 00:11:03.170
Got a typo there.
144

145
00:11:03.260 --> 00:11:05.590
Third quarter of 2017.
145

146
00:11:06.850 --> 00:11:12.180
Now let's take a look at some of the JUnit 4 annotations. @Test.
146

147
00:11:12.310 --> 00:11:17.970
This is an annotation to declare a test method so that says that it is going to be independent test
147

148
00:11:18.610 --> 00:11:25.150
and the other ones that are important is Before and After . These are going to be things that execute
148

149
00:11:25.150 --> 00:11:27.100
before each test.
149

150
00:11:27.120 --> 00:11:29.090
It's a good way to initialize something.
150

151
00:11:29.340 --> 00:11:35.530
And after you don't see it use too much but that is going to be cleaning up things. And then you have
151

152
00:11:35.560 --> 00:11:37.670
BeforeClass and AfterClass.
152

153
00:11:37.720 --> 00:11:42.850
These are going to be executed at once before starting all test and then after class.
153

154
00:11:42.850 --> 00:11:48.360
Likewise I don't see too much use for those but you do have use cases for that.
154

155
00:11:48.750 --> 00:11:51.450
Ignore is a way to disable a test.
155

156
00:11:51.550 --> 00:11:57.310
Sometimes you do break things by accident and you acknowledge it and you say OK I'm going to ignore
156

157
00:11:57.310 --> 00:12:01.300
this while I work on something else and fix it and come back and fix it.
157

158
00:12:01.300 --> 00:12:07.600
So there are cases where you do want to use Ignore but sometimes you really don't want to. Then the Test
158

159
00:12:07.600 --> 00:12:11.550
annotation You can also say you're expecting an exception.
159

160
00:12:11.590 --> 00:12:14.340
So you do want test non
160

161
00:12:14.410 --> 00:12:20.410
happy path and make sure if you have a condition that you're expecting it which can cause an exception
161

162
00:12:20.440 --> 00:12:26.650
you want to be testing for that. And then Test timeout is a way to say if the test takes longer than
162

163
00:12:27.130 --> 00:12:33.440
X number of milliseconds. And we have a variety of Spring Boot annotation.
163

164
00:12:33.440 --> 00:12:38.900
I mean you go through these somewhat quickly and talk about the ones that we are most likely to be using.
164

165
00:12:38.990 --> 00:12:40.090
We have RunWith.
165

166
00:12:40.090 --> 00:12:41.650
We will definitely be using that.
166

167
00:12:41.720 --> 00:12:47.900
And that brings up a SpringRunner and this is what allows Spring to work with JUnit to bring up the
167

168
00:12:47.900 --> 00:12:56.030
Spring context. SpringBootTest is an annotation that is going to look for the Spring Boot application
168

169
00:12:56.120 --> 00:12:57.680
and bring up its configuration.
169

170
00:12:57.680 --> 00:13:02.960
So it's kind of automatically going to use your same configuration and then you can also override that
170

171
00:13:02.960 --> 00:13:05.600
with the annotation TestConfiguration.
171

172
00:13:05.600 --> 00:13:14.160
So that's going to specify a specific configuration. @MockBean, it's going to inject a Mockito Mock.
172

173
00:13:14.310 --> 00:13:20.990
So this is a real handy way to create a Mock object and Mockito Mock into your test and we'll definitely
173

174
00:13:20.990 --> 00:13:28.010
be walking through examples of that. And then SpyBean some where injects some Mockito Spy. And
174

175
00:13:28.010 --> 00:13:32.860
then let's see if we get JsonTest, WebMvcTest and DataJpaTest.
175

176
00:13:32.870 --> 00:13:38.240
These are all different annotations that bring up different Spring cause it's slices of the system.
176

177
00:13:38.390 --> 00:13:43.940
So JsonTest is something that you'd be using when you are expecting to use JSON input and output
177

178
00:13:43.940 --> 00:13:51.350
likely developing a RESTful API and you have WebMvcTest as it's going to bring up a test context with
178

179
00:13:51.440 --> 00:13:53.300
out a full HTTP server.
179

180
00:13:53.300 --> 00:13:55.160
So this is actually a very important one.
180

181
00:13:55.160 --> 00:14:04.550
It allows us to test the Spring web MVC controllers with a Mock HTTP session in an environment without the
181

182
00:14:05.030 --> 00:14:11.350
heavyweight of bring up like a Tomcat server or deploying the Tomcat. Then DataJpaTest.
182

183
00:14:11.420 --> 00:14:17.950
This is going to bring up a test data layer with an embedded database and also the entity managers.
183

184
00:14:17.960 --> 00:14:26.490
So that gives us like we can test Spring Data JPA against a in memory database. Now we have a variety of
184

185
00:14:26.550 --> 00:14:27.940
other annotations.
185

186
00:14:28.030 --> 00:14:31.950
JdbcTest is like the DataJpaTest.
186

187
00:14:32.310 --> 00:14:37.740
But it does not bring up any entity manager. So you going to be doing SQL with that. You can
187

188
00:14:37.740 --> 00:14:43.020
test with Mongo, ReskClient, RestDocks is something that we'll be looking at in the future when we get
188

189
00:14:43.350 --> 00:14:45.370
to talking about RESTful APIs.
189

190
00:14:45.600 --> 00:14:52.730
And then a very important one is ContextConfiguration. This allows us to specify a context for the task.
190

191
00:14:52.740 --> 00:14:58.110
It gives a lot of control of how Spring brings up the context. ActiveProfiles is something that we'll
191

192
00:14:58.110 --> 00:14:59.680
definitely be looking at in the future of the course.
192

193
00:14:59.680 --> 00:15:06.760
Allows us to specify active profiles to which active profile we want to be using for a specific
193

194
00:15:06.760 --> 00:15:15.790
test. TestPropertySource allows us to specify specific property files for the test. DirtiesContext is a very
194

195
00:15:15.790 --> 00:15:23.110
important one that is going to reset the Spring context. So when you're running the Spring context it
195

196
00:15:23.110 --> 00:15:28.690
is going to get cached between test you run multiple tests against a single Spring context that's not
196

197
00:15:28.690 --> 00:15:30.700
going to get recreated for each one.
197

198
00:15:31.000 --> 00:15:36.760
But when you do the DirtiesContext if you've corrupted something in an environment this is where you
198

199
00:15:36.760 --> 00:15:41.340
want to use this and it's going to rebuild the Spring context after that test runs.
199

200
00:15:41.470 --> 00:15:46.930
And this is very expensive to do. So there is a need for it but use that one with caution.
200

201
00:15:47.140 --> 00:15:51.400
The next one I want to talk about is Transactional and this is something that we're going to use
201

202
00:15:52.090 --> 00:15:57.750
definitely when we're testing database integration and we haven't really talked too much about transactions.
202

203
00:15:57.760 --> 00:16:04.930
But what this allows us to do is run our test manipulate data and by default Spring we'll roll it back.
203

204
00:16:04.930 --> 00:16:10.810
Now if you don't mark it as Transactional what's going to happen is a test will run and it's going to populate
204

205
00:16:10.810 --> 00:16:18.940
that data the test out of generate by the test to your database and it will be persistent so it could
205

206
00:16:18.940 --> 00:16:23.270
corrupt another test. So this is a good annotation to have.
206

207
00:16:23.350 --> 00:16:31.000
And then BeforeTransaction, AfterTransaction that's stuff to do before I say transactions. Commit is
207

208
00:16:31.000 --> 00:16:36.580
to specify that we want that test to commit its data unlike rolling back where it does which is what
208

209
00:16:36.640 --> 00:16:37.650
happens by default.
209

210
00:16:38.720 --> 00:16:45.990
Now we can actually specify Rollback if we need to ask you is a very handy one it allows us to specify
210

211
00:16:46.010 --> 00:16:51.500
ask you all scripts that we want to run for our test and then SqlConfig what it allows controls
211

212
00:16:51.500 --> 00:16:58.890
and meta data around the test and SqlGroup just allows us to group together several SQL annotations
212

213
00:16:58.910 --> 00:17:00.570
and SQL can fix.
213

214
00:17:00.590 --> 00:17:09.080
Repeat is says to repeat the test X number of times and then we have Timed It's very similar to JUnit's
214

215
00:17:09.080 --> 00:17:12.770
timeout but it will actually wait for the test to complete
215

216
00:17:12.800 --> 00:17:19.130
unlike JUnit. And then IfProfileValue and ProfileValueSourceConfiguration these are kind of rarely
216

217
00:17:19.130 --> 00:17:25.870
used but we can say that we are indicating a test is available for a specific profile.
