WEBVTT
0
1
00:00:04.400 --> 00:00:09.000
Alright in the next few videos we are
going to look at working with the ingredients. So
1

2
00:00:09.000 --> 00:00:12.300
we have the recipe and then the
ingredients and then unit of measure. So
2

3
00:00:12.300 --> 00:00:17.580
we have listed properties to deal
with here and what we want to do is I
3

4
00:00:17.580 --> 00:00:22.590
want to show you the nuances of working
with more complex data models here. So
4

5
00:00:22.590 --> 00:00:26.250
there are some nuances. I actually almost
did this as an assignment to do all the
5

6
00:00:26.250 --> 00:00:30.210
CRUD operations for ingredients but there's
enough nuances to learn along the way. I
6

7
00:00:30.210 --> 00:00:34.200
decided to not do that and take you
through it step by step and working with
7

8
00:00:34.200 --> 00:00:38.040
this more complex object model. So we got
a lot to learn. Actually we're going to
8

9
00:00:38.040 --> 00:00:42.329
write a lot of code in this and in this
video specifically, we're going to create
9

10
00:00:42.329 --> 00:00:46.890
a new screen to just show a list of
ingredients against the recipe. So we'll
10

11
00:00:46.890 --> 00:00:50.940
have a recipe, we will be able to go into the
recipes and then display a list of
11

12
00:00:50.940 --> 00:00:55.559
ingredients and from that we're going to
build CRUD operations on the ingredients.
12

13
00:00:55.559 --> 00:00:59.670
So we'll be working with in the specific
recipe. So there are some nuances that we
13

14
00:00:59.670 --> 00:01:04.320
need to do as far as setting up the URLs
and what not and how we are working with
14

15
00:01:04.320 --> 00:01:09.960
not only Spring MVC but Spring Data and the
JPA data model. So I'm going to get
15

16
00:01:09.960 --> 00:01:13.890
going out in this video here and show
you how we implement displaying a list
16

17
00:01:13.890 --> 00:01:19.350
of ingredients for a specific recipe. Alrighty, in this video we want to take a
17

18
00:01:19.350 --> 00:01:23.790
look at adding a new recipe and we're
going to set that up. It's actually going
18

19
00:01:23.790 --> 00:01:27.270
to be a little bit easier than what we
did last time. A lot of the groundworks
19

20
00:01:27.270 --> 00:01:31.770
already been laid from doing the update
because we already have the save method.
20

21
00:01:31.770 --> 00:01:37.920
That's going to be a save or it
actually functions as a merge. So it will
21

22
00:01:37.920 --> 00:01:43.770
save it whether its brand new or coming
in new. So as usual I've started off with
22

23
00:01:43.770 --> 00:01:49.590
a unit test. I have that on the screen
now and that is line 79. We're going to
23

24
00:01:49.590 --> 00:01:53.280
test the new ingredient form and we
basically just need to make sure that
24

25
00:01:53.280 --> 00:01:58.320
form displays properly. The save method
is going to be pretty much the same
25

26
00:01:58.320 --> 00:02:02.040
thing. It's going to take in that command
object to the same URL so there's
26

27
00:02:02.040 --> 00:02:05.790
nothing really to test on the controller.
I'm going to go ahead and run this now.
27

28
00:02:05.790 --> 00:02:11.009
Make sure that our test is in fact valid. It's going to run real quick and we'll
28

29
00:02:11.009 --> 00:02:13.560
jump over and take a look at the
controller. So that is
29

30
00:02:13.560 --> 00:02:19.560
running. I will show you the controller
code and here's the cadet up towards the
30

31
00:02:19.560 --> 00:02:25.349
top there. On line 52 we are mapping it to
get, RequestMapping  will take the recipe
31

32
00:02:25.349 --> 00:02:30.480
ID out of the URL and pass it in as a
path variable using the Path
32

33
00:02:30.480 --> 00:02:35.819
Variable annotation. Therefore, recipeId
and in this case we are going to create
33

34
00:02:35.819 --> 00:02:42.870
a new RecipeCommand by going out and
finding the recipe value. And actually we
34

35
00:02:42.870 --> 00:02:49.590
do not actually need that. I'm sorry we
are going to use that, I apologize.
35

36
00:02:49.590 --> 00:02:55.049
So we want to use the RecipeCommand and
here, we still haven't done anything
36

37
00:02:55.049 --> 00:02:59.549
happy path. So if we get a bad recipe
value we're going to want to do
37

38
00:02:59.549 --> 00:03:03.150
something different there. We'll want to
throw up a exception so I'm going to add
38

39
00:03:03.150 --> 00:03:13.440
a note in there. So here, we're going to
raise an exception if it's null so if we
39

40
00:03:13.440 --> 00:03:19.170
don't get back to RecipeCommand, that
tells us that ID value is incorrect. But
40

41
00:03:19.170 --> 00:03:25.500
now we're going to go ahead and return
back the command object and we will add
41

42
00:03:25.500 --> 00:03:33.090
in an attribute for the IngredientCommand. And just like we did prior there
42

43
00:03:33.090 --> 00:03:37.049
in line 65 we need to go ahead and
initialize the uom. So we're going to
43

44
00:03:37.049 --> 00:03:42.389
do a uomList for our drop-down so that
form is going to function the same. Now I
44

45
00:03:42.389 --> 00:03:47.579
did in testing this, I ran into some
problems and I'm changing out the
45

46
00:03:47.579 --> 00:03:52.859
project Lombok stuff from data
to getter and setters. So should be able
46

47
00:03:52.859 --> 00:03:57.780
to say that I was using data there. We're
going to change that out. That
47

48
00:03:57.780 --> 00:04:02.220
automatically gives us an equals and a
toString values and I don't think
48

49
00:04:02.220 --> 00:04:06.269
project Lombok was misbehaving but I
did run into some problems where it
49

50
00:04:06.269 --> 00:04:10.889
caused some weird behavior. So I'm
migrating our data model over to using
50

51
00:04:10.889 --> 00:04:16.079
getters and setters only and not using
the project Lombok provided equals
51

52
00:04:16.079 --> 00:04:20.549
hashCode and toString. And like I
said, that caused some odd problems
52

53
00:04:20.549 --> 00:04:24.780
when I was troubleshooting the setup. And I figured you guys will probably see it too
53

54
00:04:24.780 --> 00:04:28.940
if I if I saw it. Now the next thing we want to do is take
54

55
00:04:28.940 --> 00:04:35.540
a look at the service implementation and
this is pretty close. We did the
55

56
00:04:35.540 --> 00:04:40.700
save and now I did have to tweak the sum
to save the new ingredient here on line
56

57
00:04:40.700 --> 00:04:45.710
89 at making the relationship both ways. That was part of the troubleshooting. It
57

58
00:04:45.710 --> 00:04:52.550
did when it ran into the errors of
project Lombok and then next, here on 96.
58

59
00:04:52.550 --> 00:04:59.060
We were doing a save and you can see on
97 I was doing a find and verifying the ID.
59

60
00:04:59.060 --> 00:05:06.110
That works great if it is a already persisted
identity but on a brand-new ingredient,
60

61
00:05:06.110 --> 00:05:11.960
guess what? We don't have an ID value. So
now I am coming back and saying is it
61

62
00:05:11.960 --> 00:05:17.510
present on line 182. There's probably a
hole we could poke in it but we are
62

63
00:05:17.510 --> 00:05:22.100
going to take our best guess and they're
going to do a stream and we will filter
63

64
00:05:22.100 --> 00:05:27.800
that by matching on description, matching
on a mount and matching on the uom id and
64

65
00:05:27.800 --> 00:05:32.540
then we'll find the first one that comes
back out of our ingredients. Now keep in
65

66
00:05:32.540 --> 00:05:39.590
mind we did not specify any of those as
unique. So we could add in duplicate
66

67
00:05:39.590 --> 00:05:44.540
ingredients that way. That's something we
could address but that's just where our
67

68
00:05:44.540 --> 00:05:48.140
data model is and that's why I said
we're not totally safe there. We were just
68

69
00:05:48.140 --> 00:05:54.440
taking a best-guess to get back a valid
ID, a valid ingredient to return. And then
69

70
00:05:54.440 --> 00:05:59.930
finally on line 111 we convert that back
to an ingredient object and return it to
70

71
00:05:59.930 --> 00:06:04.190
the client. And of course we did write
our unit test for that. We'll take a
71

72
00:06:04.190 --> 00:06:08.980
quick look at that. In my mistake I
actually did not write a unit test. So
72

73
00:06:08.980 --> 00:06:13.210
ideally in a perfect world we would want
to be testing both of these scenarios.
73

74
00:06:13.210 --> 00:06:18.590
Right now that would be considered a
gap on our unit test coverage. So maybe
74

75
00:06:18.590 --> 00:06:22.220
I'll add that in before I check this in if
I'm feeling really motivated or maybe
75

76
00:06:22.220 --> 00:06:27.950
I'll leave that for somebody out there
to do and maybe I'll even take a pull
76

77
00:06:27.950 --> 00:06:32.390
request on that to bring into the source
code repository. So let's go ahead and
77

78
00:06:32.390 --> 00:06:38.689
run this right now. So I'm going to come
up here and show you the functionality.
78

79
00:06:38.689 --> 00:06:47.749
That will start it up in Spring Boot and Spring Boot is up and running. Let's come
79

80
00:06:47.749 --> 00:06:52.459
over here and I'm just going to come
right to that. See where I was testing it
80

81
00:06:52.459 --> 00:07:00.499
prior. So let's go into perfect guacamole. We can view that. I can view the
81

82
00:07:00.499 --> 00:07:05.329
ingredients and now I added in a button
here for new. We might want to tweak that,
82

83
00:07:05.329 --> 00:07:11.989
add in more accessibility for the users
but if this was a UI UX class. This is
83

84
00:07:11.989 --> 00:07:20.629
good enough for our purposes right now
so I can say new, new ingredient, come in
84

85
00:07:20.629 --> 00:07:27.289
here. Give it an amount of 12 and let's
call this cups. Now that seems a little
85

86
00:07:27.289 --> 00:07:34.009
excessive. We'll say teaspoons. Submit that and boom.
86

87
00:07:34.009 --> 00:07:42.349
Internal error. Let's take a quick look
at this. No value present. So we fell
87

88
00:07:42.349 --> 00:07:48.169
through to this and we did not get a hit
on that. Let's back up, take a quick look at
88

89
00:07:48.169 --> 00:07:56.809
this. So that should have worked. Now I'll show
you some troubleshooting here. So I have
89

90
00:07:56.809 --> 00:08:07.550
maybe that one little tweak there
before I recorded it and let's go
90

91
00:08:07.550 --> 00:08:15.529
ahead and I should see it restart here. You
can see that Spring Boot did not
91

92
00:08:15.529 --> 00:08:21.679
restart, we'll double check that. Same
situation. Sometimes it doesn't
92

93
00:08:21.679 --> 00:08:27.529
restart properly. Now we can see that
I've manually kicked off the build and
93

94
00:08:27.529 --> 00:08:32.089
that did kick off the reload of Spring
Boot through the Spring developer tools.
94

95
00:08:32.089 --> 00:08:41.809
Now let's take a look at this and let's
say something new, one teaspoon. So now we
95

96
00:08:41.809 --> 00:08:50.540
can see I got an ID of 28 and that's
actually ingredients.
96

97
00:08:50.540 --> 00:08:56.220
And there's a ID 28 which we saw get
added on the previous screen, so I can
97

98
00:08:56.220 --> 00:09:05.070
actually come in and update this. So we can
see that has been updated. Something
98

99
00:09:05.070 --> 00:09:11.190
new 22, refresh that and see
something new 22 there. Alright, so
99

100
00:09:11.190 --> 00:09:16.620
that is now adding a new ingredient. So
we're able to do mostly operations. The
100

101
00:09:16.620 --> 00:09:20.220
only thing that's left is deleting the
ingredient which is actually fairly
101

102
00:09:20.220 --> 00:09:24.560
simple and we will get to that in the
next video.
