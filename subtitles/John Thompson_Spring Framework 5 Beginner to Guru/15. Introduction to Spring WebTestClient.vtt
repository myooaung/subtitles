WEBVTT
0
1
00:00:00.000 --> 00:00:02.750
(peaceful music)
1

2
00:00:05.709 --> 00:00:06.948
All right, in this video,
2

3
00:00:06.948 --> 00:00:07.781
we are gonna take a look
3

4
00:00:07.781 --> 00:00:11.579
at the new Spring Framework 5 WebTestClient.
4

5
00:00:11.579 --> 00:00:12.950
And this does some really neat stuff
5

6
00:00:12.950 --> 00:00:16.442
when it comes to dealing with the reactive client.
6

7
00:00:16.442 --> 00:00:19.695
And what we wanna do here is get this set up.
7

8
00:00:19.695 --> 00:00:22.593
It reminds me a lot of the MockMVC stuff that we saw
8

9
00:00:22.593 --> 00:00:24.917
when we had the Servlet API going,
9

10
00:00:24.917 --> 00:00:29.094
but this is specifically for the WebFlux stuff.
10

11
00:00:29.094 --> 00:00:32.447
And you can see here, I have line 28,
11

12
00:00:32.447 --> 00:00:35.185
I created a property for WebTestClient,
12

13
00:00:35.185 --> 00:00:38.653
and I'm also initializing a Mock for our RecipeService.
13

14
00:00:38.653 --> 00:00:41.001
And similar to our other test,
14

15
00:00:41.001 --> 00:00:43.935
and this is gonna be a pure unit test,
15

16
00:00:43.935 --> 00:00:48.443
I am initializing the Mockito mocks there on line 35.
16

17
00:00:48.443 --> 00:00:50.714
And remember the WebConfig.
17

18
00:00:50.714 --> 00:00:52.097
Now, this is important.
18

19
00:00:52.097 --> 00:00:53.634
This is a configuration that we created
19

20
00:00:53.634 --> 00:00:56.002
for our RouterFunction, and what we wanna do
20

21
00:00:56.002 --> 00:00:58.660
is get a handle on this RouterFunction,
21

22
00:00:58.660 --> 00:01:01.580
because we are gonna take this RouterFunction
22

23
00:01:01.580 --> 00:01:03.915
and built our WebTestClient.
23

24
00:01:03.915 --> 00:01:05.907
So, we're gonna bind to RouterFunction.
24

25
00:01:05.907 --> 00:01:09.259
Now, for this to work properly, what we wanna do
25

26
00:01:09.259 --> 00:01:12.705
is use the WebTest Client, bind to the routerFunction.build(),
26

27
00:01:12.705 --> 00:01:15.746
but before we create that RouterFunction,
27

28
00:01:15.746 --> 00:01:18.272
we are gonna inject in our recipeService.
28

29
00:01:18.272 --> 00:01:21.620
So, this is gonna emulate what Spring Framework is gonna do
29

30
00:01:21.620 --> 00:01:22.925
with context running,
30

31
00:01:22.925 --> 00:01:25.390
here it does the dependency injection for us.
31

32
00:01:25.390 --> 00:01:28.002
Now, let's go ahead and write a couple tests with this.
32

33
00:01:28.002 --> 00:01:30.003
I'm gonna close that.
33

34
00:01:30.003 --> 00:01:33.420
Do a command enter here, a new test method.
34

35
00:01:34.504 --> 00:01:36.780
Now, I always want to put an e there.
35

36
00:01:36.780 --> 00:01:37.613
So.
36

37
00:01:38.506 --> 00:01:40.775
Let's go webTestClient.
37

38
00:01:40.775 --> 00:01:42.025
We'll do a get.
38

39
00:01:43.470 --> 00:01:45.476
Now, we wanna say uri.
39

40
00:01:45.476 --> 00:01:47.809
Remember, we said 
40

41
00:01:49.239 --> 00:01:50.406
/api/recipes.
41

42
00:01:53.631 --> 00:01:55.798
And we wanna say accept.
42

43
00:01:58.541 --> 00:01:59.958
APPLICATION_JSON.
43

44
00:02:02.806 --> 00:02:04.283
Now, we're gonna say exchange.
44

45
00:02:04.283 --> 00:02:08.200
This is gonna cause it to invoke the WebClient.
45

46
00:02:10.985 --> 00:02:12.485
expectStatus isOk.
46

47
00:02:14.531 --> 00:02:17.698
And then also let's do an expectBody.
47

48
00:02:20.910 --> 00:02:22.954
and, we'll hold off on expectBody.
48

49
00:02:22.954 --> 00:02:24.230
We just wanna make sure.
49

50
00:02:24.230 --> 00:02:26.528
Let's just make sure that we get a valid response here.
50

51
00:02:26.528 --> 00:02:28.392
Now, I'm gonna go ahead and run this,
51

52
00:02:28.392 --> 00:02:30.011
and I know it's gonna throw an error,
52

53
00:02:30.011 --> 00:02:33.839
but I wanna show you the error that it tosses.
53

54
00:02:33.839 --> 00:02:36.789
And we're seeing here, we're getting a 500 error.
54

55
00:02:36.789 --> 00:02:38.408
What's happening is,
55

56
00:02:38.408 --> 00:02:41.987
our recipeService is returning back a null.
56

57
00:02:41.987 --> 00:02:44.414
So, rather than turning back a Flux,
57

58
00:02:44.414 --> 00:02:46.084
we wanna return it back an empty Flux,
58

59
00:02:46.084 --> 00:02:48.686
but we didn't set it up in the Mockito behavior.
59

60
00:02:48.686 --> 00:02:50.903
The default behavior of Mockito is return back a null
60

61
00:02:50.903 --> 00:02:53.499
if we don't tell it anything differently.
61

62
00:02:53.499 --> 00:02:55.598
So, let's go in and fix that.
62

63
00:02:55.598 --> 00:02:56.848
We'll say when.
63

64
00:03:00.203 --> 00:03:02.099
And we wanna say getRecipes,
64

65
00:03:02.099 --> 00:03:06.099
because that's what it's gonna be calling inside.
65

66
00:03:07.104 --> 00:03:08.799
We're gonna say just Flux.
66

67
00:03:08.799 --> 00:03:10.906
So, it's just an empty Flux.
67

68
00:03:10.906 --> 00:03:14.073
And let's go ahead and run this again.
68

69
00:03:15.495 --> 00:03:16.902
So, now we can see that it's passed,
69

70
00:03:16.902 --> 00:03:19.120
and we get an OK status.
70

71
00:03:19.120 --> 00:03:22.455
Now, let's make this a little bit more interesting.
71

72
00:03:22.455 --> 00:03:26.622
Go ahead and copy this; speed things up a little bit.
72

73
00:03:30.793 --> 00:03:34.960
Say test recipes with data, and rather than just a null,
73

74
00:03:36.767 --> 00:03:39.521
let's have it return back just a new recipe object.
74

75
00:03:39.521 --> 00:03:43.144
We don't need to populate with any data.
75

76
00:03:43.144 --> 00:03:46.578
Now, what we can do is come down here
76

77
00:03:46.578 --> 00:03:48.328
and expectBodyList.
77

78
00:03:51.984 --> 00:03:56.151
And what we are seeing is that we are expecting to get back
78

79
00:03:57.423 --> 00:03:59.734
a list, a list function there.
79

80
00:03:59.734 --> 00:04:03.773
So again, this is gonna accept APPLICATION_JSON, exchange,
80

81
00:04:03.773 --> 00:04:05.747
this is gonna invoke the web service.
81

82
00:04:05.747 --> 00:04:08.716
Now we're gonna expect a status back of isOk.
82

83
00:04:08.716 --> 00:04:12.763
So, a 200 response, and we wanna get back a body,
83

84
00:04:12.763 --> 00:04:14.911
and we're expecting a list of objects in that body,
84

85
00:04:14.911 --> 00:04:17.886
and that list should contain recipes.
85

86
00:04:17.886 --> 00:04:20.553
So, let's go ahead and run this.
86

87
00:04:22.482 --> 00:04:23.324
And that passes.
87

88
00:04:23.324 --> 00:04:26.814
And actually, we should be able to...
88

89
00:04:26.814 --> 00:04:28.171
Have a couple recipes there,
89

90
00:04:28.171 --> 00:04:31.988
so let's go ahead and run this again.
90

91
00:04:31.988 --> 00:04:35.078
And there's a nice little demo, so what we have now
91

92
00:04:35.078 --> 00:04:36.602
is a nice testing framework
92

93
00:04:36.602 --> 00:04:39.909
around the reactive WebFlux stuff,
93

94
00:04:39.909 --> 00:04:43.270
so this is a lot like, gives us a lot of the capabilities
94

95
00:04:43.270 --> 00:04:47.767
for testing these end points in the reactive context.
95

96
00:04:47.767 --> 00:04:49.601
So, let's bring WebFlux stuff up.
96

97
00:04:49.601 --> 00:04:53.589
Right now, the maturity is really focused on web services.
97

98
00:04:53.589 --> 00:04:55.415
This functional stuff that we are demonstrating
98

99
00:04:55.415 --> 00:04:57.815
is really fantastic for web services,
99

100
00:04:57.815 --> 00:04:59.780
and we're gonna be seeing a lot more of it.
100

101
00:04:59.780 --> 00:05:02.930
In this video, I just wanted to get your feet wet with it.
101

102
00:05:02.930 --> 00:05:03.785
We are definitely
102

103
00:05:03.785 --> 00:05:06.170
gonna be getting into more complex examples
103

104
00:05:06.170 --> 00:05:07.519
as we move forward in the course,
104

105
00:05:07.519 --> 00:05:10.973
but this is just an introduction to the WebTestClient
105

106
00:05:10.973 --> 00:05:12.140
in this video.
