WEBVTT
0
1
00:00:06.160 --> 00:00:06.760
OK.
1

2
00:00:06.760 --> 00:00:15.590
Spring uses a model called MVC and that stands for Model View Controller.
2

3
00:00:15.610 --> 00:00:19.270
So this is a very very common design pattern.
3

4
00:00:19.270 --> 00:00:26.560
It actually dates back to the 70s where I think it was a Xerox engineer created it and later the Smalltalk
4

5
00:00:26.560 --> 00:00:35.540
community spec in probably the 80s started picking up on it and it's been adapted widely since then.
5

6
00:00:35.980 --> 00:00:42.810
And this is not a Spring specific technology by any means. It's widely used in .net, Ruby on Rails and
6

7
00:00:43.090 --> 00:00:47.180
a lot of applications use this. A lot of gooey applications use this.
7

8
00:00:47.320 --> 00:00:55.300
So traditional client server type stuff used it and it's definitely not a new paradigm at all. But the
8

9
00:00:55.300 --> 00:01:00.430
reason it is so successful is it does a great job of separating out concerns.
9

10
00:01:00.430 --> 00:01:06.340
So what I want to do is step through how it works and in a conceptual level.
10

11
00:01:06.340 --> 00:01:13.810
Client whether it's a web application or a mobile application or some type of device like a client
11

12
00:01:13.810 --> 00:01:18.840
server application makes a request and that request comes into the controller.
12

13
00:01:19.000 --> 00:01:26.510
And in our instance it's going to be over HTTP and that controller determines how to get the model.
13

14
00:01:26.540 --> 00:01:32.170
So that's going gonna go out and get the model and then return that model to the view.
14

15
00:01:32.390 --> 00:01:39.710
And this is a true separation of concerns because that model that's returned shouldn't have business
15

16
00:01:39.710 --> 00:01:40.490
logic in it.
16

17
00:01:40.850 --> 00:01:45.950
Ideally that should be plain old Java object if we're in the Java world so it should just be a data
17

18
00:01:45.950 --> 00:01:46.910
structure.
18

19
00:01:46.910 --> 00:01:50.080
The controller should be a traffic cop.
19

20
00:01:50.270 --> 00:01:53.370
He should be deciding how to get the model and who to ask the model from.
20

21
00:01:53.480 --> 00:01:54.700
And that should be it.
21

22
00:01:54.800 --> 00:02:00.760
I've seen a lot of bad code out there where the controllers overloaded with a lot of stuff on it.
22

23
00:02:00.800 --> 00:02:06.410
I mean I've seen like database connections get done in controllers which is just awful.
23

24
00:02:06.410 --> 00:02:08.970
A very very bad programming practice.
24

25
00:02:09.140 --> 00:02:10.250
So keep the controller light.
25

26
00:02:10.260 --> 00:02:11.970
It should be just a traffic cop.
26

27
00:02:12.290 --> 00:02:17.650
And then the controller is going to return the model to a view component.
27

28
00:02:17.660 --> 00:02:22.670
Now that view component whose purpose in life is to render the view for the client.
28

29
00:02:23.180 --> 00:02:29.750
So in our case we're going to be using Thymeleaf, a templating engine. Thymeleaf is going to take the model
29

30
00:02:29.860 --> 00:02:35.510
POJO and look at our template and generate the HTML to return back to the client.
30

31
00:02:36.050 --> 00:02:42.410
So this all works transparently and it works out well because everything separated.
31

32
00:02:42.470 --> 00:02:48.590
I've seen instances where people try to put in static method calls inside the view layer that call to
32

33
00:02:48.590 --> 00:02:55.610
the database and that systems like that where things are separated become just a nightmare to deal
33

34
00:02:55.610 --> 00:02:56.500
with.
34

35
00:02:56.510 --> 00:03:01.320
Now let's take a look at this in a Spring context.
35

36
00:03:01.410 --> 00:03:07.530
So this is how Spring MVC models it and getting a little detail of what happens under the covers.
36

37
00:03:08.010 --> 00:03:14.580
So we'll get a client request come in and that could be typically HTTP and it can be for a web page or
37

38
00:03:14.580 --> 00:03:17.290
it could be a REST service call.
38

39
00:03:17.340 --> 00:03:24.160
So not going to get into the details of that at this point. But it goes to a dispatcher servlet
39

40
00:03:24.600 --> 00:03:27.900
So this is the classic Java servlet architecture.
40

41
00:03:27.900 --> 00:03:35.250
So we get that web request comes in and it decides how to handle it and refers to the handler mapping
41

42
00:03:35.840 --> 00:03:40.300
because you're going to go to a specific path. You're making a request from a server.
42

43
00:03:40.320 --> 00:03:41.290
So now it goes.
43

44
00:03:41.330 --> 00:03:43.240
OK well where do I go for this.
44

45
00:03:43.260 --> 00:03:50.820
It determines that. It determines the controller to utilize a controller method.
45

46
00:03:50.820 --> 00:03:57.300
Now the controller typically in a Spring application is going to have some type of service layer wired
46

47
00:03:57.300 --> 00:04:03.330
up to it. That service layer is going to get the data and return it back to the controller and then
47

48
00:04:03.330 --> 00:04:10.080
the controller is going to take that data, the model, which is just a simple POJO return it back to the
48

49
00:04:10.080 --> 00:04:11.410
dispatcher servlet.
49

50
00:04:11.460 --> 00:04:16.020
And in this case the dispatcher servlet knows what it wants to do for the view.
50

51
00:04:16.020 --> 00:04:25.290
It could be rest call and we need to return back XML or Jason or it could be for HTTP or a HTML.
51

52
00:04:25.560 --> 00:04:31.770
And in that case we're going to invoke a view technology to render the HTML all such as GSP, velocity
52

53
00:04:31.770 --> 00:04:34.270
or Thymeleaf. And an upcoming example,
53

54
00:04:34.290 --> 00:04:36.590
I'm going to show you the Thymeleaf example.
54

55
00:04:36.660 --> 00:04:42.270
So this is pretty simple but it's high low. It's important to realize what's happening here with this
55

56
00:04:42.270 --> 00:04:43.340
request.
56

57
00:04:43.340 --> 00:04:50.040
So again just to go through it at a high level, request comes in, dispatch or servlet, looks up the
57

58
00:04:50.040 --> 00:04:55.930
handler mapping, invokes the controller method which in a spring context is going to go call service
58

59
00:04:56.070 --> 00:05:02.990
get the data, return the model, and then the model's going to get passed off to a templating engine for
59

60
00:05:03.000 --> 00:05:08.400
us in this case Thymeleaf and then that HTML is going to get rendered back to the client.
