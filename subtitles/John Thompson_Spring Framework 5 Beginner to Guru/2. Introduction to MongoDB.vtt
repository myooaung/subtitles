WEBVTT
0
1
00:00:05.083 --> 00:00:06.383
Alright, in this video
1

2
00:00:06.383 --> 00:00:09.800
we are going to introduce you to MongoDB.
2

3
00:00:10.783 --> 00:00:13.993
MongoDB is a document oriented database,
3

4
00:00:13.993 --> 00:00:16.929
so it's quite different from traditional SQL databases
4

5
00:00:16.929 --> 00:00:19.358
where everything is laid out in tables.
5

6
00:00:19.358 --> 00:00:21.845
Mongo is going to lay its data out
6

7
00:00:21.845 --> 00:00:24.274
in what's known as documents.
7

8
00:00:24.274 --> 00:00:27.866
Now the documents are actually stored as BSON,
8

9
00:00:27.866 --> 00:00:29.394
which is binary JSON.
9

10
00:00:29.394 --> 00:00:32.135
So as you work with the database, you'll get things
10

11
00:00:32.135 --> 00:00:34.881
coming out of the database in a JSON format.
11

12
00:00:34.881 --> 00:00:36.339
So you'll be working with a lot of JSON
12

13
00:00:36.339 --> 00:00:37.931
when you're dealing with Mongo.
13

14
00:00:37.931 --> 00:00:40.486
But this is significantly different than
14

15
00:00:40.486 --> 00:00:43.636
the relational model that you may be used to.
15

16
00:00:43.636 --> 00:00:46.758
Now the word Mongo is derived from Humongous.
16

17
00:00:46.758 --> 00:00:49.354
I know I mispronounced that, I'm not very good at that word.
17

18
00:00:49.354 --> 00:00:51.491
But that is where Mongo comes from.
18

19
00:00:51.491 --> 00:00:54.714
It was developed all in C++.
19

20
00:00:54.714 --> 00:00:58.881
And like I said before, it is a NoSQL database,
20

21
00:00:58.881 --> 00:01:00.987
so significantly different than working with
21

22
00:01:00.987 --> 00:01:03.693
traditional SQL databases.
22

23
00:01:03.693 --> 00:01:08.614
MongoDB was developed in 2007 by a company called 10gen.
23

24
00:01:08.614 --> 00:01:12.781
In 2013, 10gen changed their name to MongoDB, Inc.
24

25
00:01:13.870 --> 00:01:17.835
So they originally developed Mongo as a PAAS application,
25

26
00:01:17.835 --> 00:01:19.923
so Platform as a Service.
26

27
00:01:19.923 --> 00:01:23.058
And then they took it to Open Source in 2009,
27

28
00:01:23.058 --> 00:01:25.005
and I think they found a lot more success
28

29
00:01:25.005 --> 00:01:27.698
with that business model.
29

30
00:01:27.698 --> 00:01:29.709
Little bit of history about Mongo.
30

31
00:01:29.709 --> 00:01:33.186
Some of the early adopters were SourceForge, Foursquare.
31

32
00:01:33.186 --> 00:01:35.230
I'm not even sure if Foursquare is still around,
32

33
00:01:35.230 --> 00:01:37.532
they were quite popular at one point.
33

34
00:01:37.532 --> 00:01:39.104
But in the US, they seem to have fallen
34

35
00:01:39.104 --> 00:01:41.135
off the face of the Earth.
35

36
00:01:41.135 --> 00:01:43.316
I'm not sure if they're still in business, to be honest.
36

37
00:01:43.316 --> 00:01:45.134
Craigslist, and eBay.
37

38
00:01:45.134 --> 00:01:48.191
And today Mongo is used by a lot of large companies,
38

39
00:01:48.191 --> 00:01:52.142
including MetLife, Facebook, Expedia, and Google.
39

40
00:01:52.142 --> 00:01:56.543
And looking at my metrics from Springframework.guru,
40

41
00:01:56.543 --> 00:01:58.455
I've got several posts on MongoDB,
41

42
00:01:58.455 --> 00:02:00.182
and those are very popular.
42

43
00:02:00.182 --> 00:02:02.993
And my YouTube channel, I also have some stuff
43

44
00:02:02.993 --> 00:02:05.622
about MongoDB up there, and Spring Boot,
44

45
00:02:05.622 --> 00:02:07.092
and that's one of my top videos,
45

46
00:02:07.092 --> 00:02:08.689
so it is something that's gained
46

47
00:02:08.689 --> 00:02:11.243
a lot of popularity in the marketplace.
47

48
00:02:11.243 --> 00:02:13.901
And I see it out there more and more.
48

49
00:02:13.901 --> 00:02:16.352
Now why would you wanna use MongoDB?
49

50
00:02:16.352 --> 00:02:19.894
It's great for high insert systems like sensor reading,
50

51
00:02:19.894 --> 00:02:22.821
social media systems, or advertising systems,
51

52
00:02:22.821 --> 00:02:25.992
where you're doing a lot of insert type activity,
52

53
00:02:25.992 --> 00:02:28.979
and also a lot of read activity too.
53

54
00:02:28.979 --> 00:02:31.473
Mongo, you can cluster Mongo servers
54

55
00:02:31.473 --> 00:02:34.636
and distribute their load and create replica servers.
55

56
00:02:34.636 --> 00:02:36.469
So it's very scalable,
56

57
00:02:37.308 --> 00:02:39.616
so you can definitely scale up with Mongo
57

58
00:02:39.616 --> 00:02:43.791
quite inexpensively because it will run on minimal hardware,
58

59
00:02:43.791 --> 00:02:45.707
and you can do a lot of instances
59

60
00:02:45.707 --> 00:02:48.085
that will replicate to each other.
60

61
00:02:48.085 --> 00:02:50.810
And it's also nice when you need schema flexibility.
61

62
00:02:50.810 --> 00:02:54.893
So having your data and documents and in JSON format,
62

63
00:02:56.212 --> 00:02:57.365
it gives you a lot of flexibility
63

64
00:02:57.365 --> 00:03:01.198
to add properties as your requirements change.
64

65
00:03:02.235 --> 00:03:04.426
Now there's some pitfalls with Mongo.
65

66
00:03:04.426 --> 00:03:06.067
Some people avoid Mongo.
66

67
00:03:06.067 --> 00:03:08.410
It really has no concept of transactions
67

68
00:03:08.410 --> 00:03:11.137
like we saw with traditional relational databases.
68

69
00:03:11.137 --> 00:03:14.762
So we talked about A.C.I.D. when we talked about MySQL.
69

70
00:03:14.762 --> 00:03:15.937
And that's one of the things
70

71
00:03:15.937 --> 00:03:18.229
that makes Mongo so much faster,
71

72
00:03:18.229 --> 00:03:19.607
is because it's not dealing with
72

73
00:03:19.607 --> 00:03:23.289
all the protections of the A.C.I.D. transactions.
73

74
00:03:23.289 --> 00:03:27.233
In MySQL, there's a lot of locking that's happening
74

75
00:03:27.233 --> 00:03:29.872
to make sure that you're not stoping on each other
75

76
00:03:29.872 --> 00:03:32.718
from other sessions or other threads.
76

77
00:03:32.718 --> 00:03:35.514
In Mongo you don't have that protection.
77

78
00:03:35.514 --> 00:03:38.662
So you can get lost updates inside of Mongo.
78

79
00:03:38.662 --> 00:03:41.456
If you have the risk of updates on the same record,
79

80
00:03:41.456 --> 00:03:43.581
not a good use case for Mongo.
80

81
00:03:43.581 --> 00:03:46.535
And if you watch Josh Long doing presentations,
81

82
00:03:46.535 --> 00:03:49.856
he does like to joke about MongoDB losing data.
82

83
00:03:49.856 --> 00:03:52.923
I would use Mongo for a lot of things.
83

84
00:03:52.923 --> 00:03:57.037
Like think about Facebook, where someone's liking a post.
84

85
00:03:57.037 --> 00:03:59.364
If you lose a like, so what?
85

86
00:03:59.364 --> 00:04:00.464
Really, at the end of the day,
86

87
00:04:00.464 --> 00:04:02.835
so what if that like gets lost?
87

88
00:04:02.835 --> 00:04:05.982
But if you're doing a bank, not a good use case,
88

89
00:04:05.982 --> 00:04:08.436
if you're dealing with dollars and cents.
89

90
00:04:08.436 --> 00:04:10.797
Probably not a good use case where you have
90

91
00:04:10.797 --> 00:04:13.910
weird errors happen with dollar terms.
91

92
00:04:13.910 --> 00:04:17.938
Now some terminology as we move forward with Mongo
92

93
00:04:17.938 --> 00:04:21.633
compared to traditional relational databases.
93

94
00:04:21.633 --> 00:04:24.558
Both of them are called a database.
94

95
00:04:24.558 --> 00:04:27.798
Inside of a traditional relational database,
95

96
00:04:27.798 --> 00:04:32.074
you have tables, but Mongo calls those collections.
96

97
00:04:32.074 --> 00:04:36.241
A relational database will have rows within the table,
97

98
00:04:37.436 --> 00:04:41.316
where Mongo will have documents inside the collection.
98

99
00:04:41.316 --> 00:04:45.217
Properties are called columns inside database row,
99

100
00:04:45.217 --> 00:04:49.171
where in a document they'll be referred to as fields.
100

101
00:04:49.171 --> 00:04:52.426
Now one of the powerful features of a relational database
101

102
00:04:52.426 --> 00:04:54.670
is being able to do table joins.
102

103
00:04:54.670 --> 00:04:57.365
You can do something similar with Mongo,
103

104
00:04:57.365 --> 00:04:59.312
and they call that embedded documents.
104

105
00:04:59.312 --> 00:05:01.494
So you get a reference to the document
105

106
00:05:01.494 --> 00:05:03.757
embedded inside another document.
106

107
00:05:03.757 --> 00:05:06.701
Both of them have primary key.
107

108
00:05:06.701 --> 00:05:09.673
And then aggregation is a little bit different,
108

109
00:05:09.673 --> 00:05:12.488
and this is where you'll go in doing a sum operation.
109

110
00:05:12.488 --> 00:05:15.293
So just a terminology difference there, really,
110

111
00:05:15.293 --> 00:05:18.213
but the approaches are fairly similar.
111

112
00:05:18.213 --> 00:05:20.326
My experience with Mongo has been pleasant.
112

113
00:05:20.326 --> 00:05:24.226
It takes a little getting used to working with it directly
113

114
00:05:24.226 --> 00:05:27.155
from a Spring perspective, when we're using Spring Data.
114

115
00:05:27.155 --> 00:05:30.253
As you'll see, it is fairly transparent.
115

116
00:05:30.253 --> 00:05:32.974
Spring Data, Mongo does make it very easy
116

117
00:05:32.974 --> 00:05:35.357
for us to work with the Mongo database,
117

118
00:05:35.357 --> 00:05:37.687
and it does have some unique capabilities.
118

119
00:05:37.687 --> 00:05:39.256
A lot of it is going to be
119

120
00:05:39.256 --> 00:05:42.817
in terms of the flexibility of the database schema,
120

121
00:05:42.817 --> 00:05:45.522
where we can add properties without having to manipulate it.
121

122
00:05:45.522 --> 00:05:47.399
Like in a relational database,
122

123
00:05:47.399 --> 00:05:50.806
you have to go and add a column to a table
123

124
00:05:50.806 --> 00:05:52.073
if you wanna use that.
124

125
00:05:52.073 --> 00:05:55.305
In Mongo, you don't have any schema to manipulate.
125

126
00:05:55.305 --> 00:05:57.465
You just add that property and start using it,
126

127
00:05:57.465 --> 00:06:00.371
so your database migrations become much simpler,
127

128
00:06:00.371 --> 00:06:02.459
as you'll see going forward in this class.
128

129
00:06:02.459 --> 00:06:05.325
So we're gonna have a lot of fun with Mongo.
129

130
00:06:05.325 --> 00:06:08.037
It does support streaming out of the database,
130

131
00:06:08.037 --> 00:06:10.533
and non-blocking streaming more importantly.
131

132
00:06:10.533 --> 00:06:12.636
So we will be using that in the future,
132

133
00:06:12.636 --> 00:06:15.465
as we get into reactive programming
133

134
00:06:15.465 --> 00:06:16.896
and non-blocking programming.
134

135
00:06:16.896 --> 00:06:18.914
That's why we're bringing Mongo in the course.
135

136
00:06:18.914 --> 00:06:20.898
But what we're gonna do first is
136

137
00:06:20.898 --> 00:06:23.228
convert over our recipe application,
137

138
00:06:23.228 --> 00:06:24.372
because I want you guys to see
138

139
00:06:24.372 --> 00:06:27.823
how easy it is to use Spring Data.
139

140
00:06:27.823 --> 00:06:30.331
And we're gonna go from Spring Data JPA
140

141
00:06:30.331 --> 00:06:32.081
to Spring Data Mongo.
141

142
00:06:33.255 --> 00:06:35.229
And we'll have some minor code changes.
142

143
00:06:35.229 --> 00:06:39.146
And we're gonna look at that in the next video.
