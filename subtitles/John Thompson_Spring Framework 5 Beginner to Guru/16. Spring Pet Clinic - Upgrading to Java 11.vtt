WEBVTT
0
1
00:00:04.069 --> 00:00:08.160
Alright! In this video we are going to do some
updates. Primarily, we're going to update the
1

2
00:00:08.160 --> 00:00:13.139
project to use Java 11 and I want to go
through and do a few general updates as
2

3
00:00:13.139 --> 00:00:18.230
well. A couple releases have happened
with Spring. So we are currently on the
3

4
00:00:18.230 --> 00:00:24.300
2.0.3 release. They recently brought out
the 2.1 release. So we are going to
4

5
00:00:24.300 --> 00:00:28.590
upgrade to war and actually let me do
that right now. We are going to be
5

6
00:00:28.590 --> 00:00:33.210
running several updates here. So I'm just
going to have another project. I'm just
6

7
00:00:33.210 --> 00:00:37.710
cutting pasting it from this. So you dont't have
to watch me type everything. So now I've
7

8
00:00:37.710 --> 00:00:43.550
updated that  to 2.1 release so that's going to
bring in a number of new versions for us.
8

9
00:00:43.550 --> 00:00:50.160
We can see that project Lombok has
gone to 1.18 which is exactly what we
9

10
00:00:50.160 --> 00:00:57.270
want and now we are in 5.3.1 of
JUnit. In the background I'm looking
10

11
00:00:57.270 --> 00:01:00.270
at these dependencies. Want to make sure that
we're up on the latest dependencies of
11

12
00:01:00.270 --> 00:01:05.700
both JUnit 5 as well as project
Lombok because both of these have are
12

13
00:01:05.700 --> 00:01:11.520
going to have patches in them for
specifically Java things above Java 8. So
13

14
00:01:11.520 --> 00:01:14.790
we wanted to get those picked up and
make sure that we are functioning
14

15
00:01:14.790 --> 00:01:19.200
properly on Java 11. So those got
picked up. That is good. Now looking at
15

16
00:01:19.200 --> 00:01:26.280
the project here. A couple of things that I
want go in and change. One is let's
16

17
00:01:26.280 --> 00:01:32.640
see here on the data project, we had this
SureFire provider and we're providing a
17

18
00:01:32.640 --> 00:01:37.290
SureFire in two different places here. So
what I'm going to do is this actually
18

19
00:01:37.290 --> 00:01:43.399
will cause problems if we're using the
SureFire Provider with Maven SureFire
19

20
00:01:43.399 --> 00:01:49.799
2.22.0 or higher. So I am going to
just eliminate this plugin from here in
20

21
00:01:49.799 --> 00:01:57.000
the modules like so. Get rid of them
there and let's take a look at the web
21

22
00:01:57.000 --> 00:02:01.530
and I am going to get rid of the
SureFire plugin from there as well. I'm
22

23
00:02:01.530 --> 00:02:06.630
going to move that up to the parent pom.
So remember we have the the parent.
23

24
00:02:06.630 --> 00:02:11.370
I'm going to come over here and I'm
taking this from a project I did for the
24

25
00:02:11.370 --> 00:02:16.100
testing course.
I'm going to come in here and now
25

26
00:02:16.100 --> 00:02:22.290
update these. So now I'm doing SureFire
and then also FailSafe which is going to
26

27
00:02:22.290 --> 00:02:25.560
be running the integration test. Right
now we don't have any integration
27

28
00:02:25.560 --> 00:02:29.570
test but I'm setting up the pom here
for that. What's going to happen
28

29
00:02:29.570 --> 00:02:35.010
underneath the covers with Maven is
these plugins, these sub modules will
29

30
00:02:35.010 --> 00:02:39.960
inherit from the parent module so that's
exactly what we want. What's
30

31
00:02:39.960 --> 00:02:45.450
important is that we get to Maven
Surefire 2.22.0 or higher that is
31

32
00:02:45.450 --> 00:02:49.650
going to include the JUnit 5 support
which is exactly what we want. And here
32

33
00:02:49.650 --> 00:02:54.900
in the configuration the illegal access
permit. I have found a blog post recommending
33

34
00:02:54.900 --> 00:02:59.280
that for Java 11 so that's why I have
that in there. I'm not sure exactly why
34

35
00:02:59.280 --> 00:03:02.670
that is there but it was a
recommendation from a blog post that I
35

36
00:03:02.670 --> 00:03:07.010
read about updating that. So finally what
we need to do is come over here and
36

37
00:03:07.010 --> 00:03:14.130
change this to Java 11 as well. Then
finally, we wanted to go in and add in
37

38
00:03:14.130 --> 00:03:20.070
these two settings here and that's going
to set up the compiler, the Maven
38

39
00:03:20.070 --> 00:03:23.640
Compiler, that's the property to take
that Java version. So we're setting the
39

40
00:03:23.640 --> 00:03:28.170
Java version property and then that's
going to get sourced in there on line 30
40

41
00:03:28.170 --> 00:03:34.200
and 31. Now one thing that we need to go
in and also add is I'm going to create a
41

42
00:03:34.200 --> 00:03:48.900
dependency section here. Paste this in.
You need one more property. So now I'm
42

43
00:03:48.900 --> 00:03:53.070
setting the JAXB version. What
happened is when we went from Java 8
43

44
00:03:53.070 --> 00:03:59.610
to Java 9 the JAXB stuff was a
removed from the standard libraries. But
44

45
00:03:59.610 --> 00:04:03.800
there's a number of tools inside of
Hibernate whatnot that rely on
45

46
00:04:03.800 --> 00:04:08.820
having the xml tools there, so that's why
we can include JAXB within this
46

47
00:04:08.820 --> 00:04:13.500
otherwise our project will not compile.
So this sets up everything for this
47

48
00:04:13.500 --> 00:04:17.730
and then finally what we need to do is
go in and tell IntelliJ. So if we come up
48

49
00:04:17.730 --> 00:04:25.750
here to this folder. Click on him and
then what we want to do is change the
49

50
00:04:25.750 --> 00:04:30.520
project SDK. You can see I have a variety
of eight and I want to jump right to
50

51
00:04:30.520 --> 00:04:38.290
eleven. And we will also change the
language to allow for Java 11. We're
51

52
00:04:38.290 --> 00:04:42.280
not going to go to modules or anything at
this point. We are just upgrading the JVM.
52

53
00:04:42.280 --> 00:04:48.040
Again I'm going after that bug that we
saw apply on a Circle CI. So I'm going to
53

54
00:04:48.040 --> 00:04:56.230
go as say that apply and say okay and
now that's going to come in here. Let's do
54

55
00:04:56.230 --> 00:05:04.210
a clean. Let's go ahead and I'm
going to install this. This will run a
55

56
00:05:04.210 --> 00:05:08.560
number of tests.
I'm also get the compiled.  You can see that
56

57
00:05:08.560 --> 00:05:12.160
things are going through compiling and
testing and if I've covered all the
57

58
00:05:12.160 --> 00:05:19.330
bases this is going to work properly.
We've got a build failure and we going to
58

59
00:05:19.330 --> 00:05:22.230
pause this and dig into this a little
bit deeper.
59

60
00:05:22.230 --> 00:05:26.200
Okay skipped ahead a little bit. It took
me about twenty minutes to resolve these
60

61
00:05:26.200 --> 00:05:31.360
issues. There's actually two problems. So
let's tackle the first one. In the web
61

62
00:05:31.360 --> 00:05:37.690
project, actually I'm going to get rid of
this old comment here, in the web project
62

63
00:05:37.690 --> 00:05:46.270
what I had to do is come in here. This
WRO 4j plug-in that was failing and it
63

64
00:05:46.270 --> 00:05:52.090
has not been updated fully for Java 9
plus and what's happening is has an old
64

65
00:05:52.090 --> 00:05:57.970
version of Mockito in there and we had to
upgrade the Mockito version. So for some
65

66
00:05:57.970 --> 00:06:02.350
reason that is in there and that is
causing problems with the plugin. So by
66

67
00:06:02.350 --> 00:06:06.870
upgrading that version that will get us
up to Java 11. Now the second one
67

68
00:06:06.870 --> 00:06:12.280
it's also a problem. What's happening
here is in the configuration here. This
68

69
00:06:12.280 --> 00:06:17.050
was working but when I upgraded the
Maven pom we got a new version of this
69

70
00:06:17.050 --> 00:06:22.150
and that configuration is no longer
accurate. It is now a property. So that's
70

71
00:06:22.150 --> 00:06:26.050
skip property. It looks like it should
work. It might be a bug. I'm not sure
71

72
00:06:26.050 --> 00:06:29.800
but by setting this property here, we
looked at the documentation that is a
72

73
00:06:29.800 --> 00:06:34.570
property to get it to skip. So what we
want this here, the Spring Boot
73

74
00:06:34.570 --> 00:06:38.729
plugin for Maven is going to try to
create an uber jar in
74

75
00:06:38.729 --> 00:06:42.419
the data class. We do not want that
happening. We just want a simple jar to
75

76
00:06:42.419 --> 00:06:47.729
be produced. So this tells Spring Boot
not to repackage it. The symptom you're
76

77
00:06:47.729 --> 00:06:50.580
going to see is that it's going to complain
that it cannot find a main class.
77

78
00:06:50.580 --> 00:06:55.110
Actually let me do this.
I'm going to comment this out just so
78

79
00:06:55.110 --> 00:07:00.539
you guys can actually see the error. I'm
going to come up here to data lifecycle and
79

80
00:07:00.539 --> 00:07:06.629
we'll go ahead and do the package goal.
You'll see it goes in and runs our
80

81
00:07:06.629 --> 00:07:13.229
test and then we get the error that it
is unable to find main class. So what
81

82
00:07:13.229 --> 00:07:17.729
it's trying to do is package it as a
Spring Boot Project looking for the main
82

83
00:07:17.729 --> 00:07:23.460
class for Spring Boot and this is just
going to be a simple jar. It's not a Spring
83

84
00:07:23.460 --> 00:07:27.240
Boot jar so that is why we are
setting this property. So now if I come
84

85
00:07:27.240 --> 00:07:32.309
in and run that, we will see that
this module does now
85

86
00:07:32.309 --> 00:07:37.770
complete properly and that runs. So I'm
going to collapse this over here and
86

87
00:07:37.770 --> 00:07:42.770
come to the root. Now let's do a clean.
87

88
00:07:42.919 --> 00:07:48.719
And now let's go ahead and I'm going to
install that. An install goal tells it to
88

89
00:07:48.719 --> 00:07:53.580
do everything, compile everything, package
it and it's going to install into my
89

90
00:07:53.580 --> 00:08:00.719
local Maven cache under user home .m2
repository. So you can see now we are going
90

91
00:08:00.719 --> 00:08:05.610
through running all the tests. You can
see the Spring Context has started. We are
91

92
00:08:05.610 --> 00:08:10.469
bringing up test so everything is up
and running and happy and we're going to
92

93
00:08:10.469 --> 00:08:15.599
do one last thing here. Let's go ahead
and run the application make sure that I
93

94
00:08:15.599 --> 00:08:22.080
can still run it from IntelliJ. You can see
that IntelliJ is going out and building
94

95
00:08:22.080 --> 00:08:25.969
it. If you run into problems don't
forget that you do need to upgrade your
95

96
00:08:25.969 --> 00:08:32.940
JVM settings inside of IntelliJ and that
is again under this folder. We can
96

97
00:08:32.940 --> 00:08:37.740
see that I have a port in use. So I have
something running somewhere. Let me pause
97

98
00:08:37.740 --> 00:08:42.029
this. I've got several windows open so
I'm going to pause this real quick. Okay, I
98

99
00:08:42.029 --> 00:08:48.029
look through my various applications and
did find a running project on 8080. I do
99

100
00:08:48.029 --> 00:08:51.550
have a number of IntelliJ windows open
so I
100

101
00:08:51.550 --> 00:08:57.220
have something that I left running so it
came up, hit a port conflict died. But in
101

102
00:08:57.220 --> 00:09:01.510
this case now we can see here I'm going to
highlight in the messages. We can see
102

103
00:09:01.510 --> 00:09:05.620
that Tomcat started on 8080. So at this
point I know the applications starting
103

104
00:09:05.620 --> 00:09:10.320
and running so I am going to double
check things and commit this into GitHub.
104

105
00:09:10.320 --> 00:09:15.970
Let's go through. I'm going to come up here
version control. We'll take a look at the
105

106
00:09:15.970 --> 00:09:18.790
data. I'm just going to do a quick code
review of what we did. So we set this
106

107
00:09:18.790 --> 00:09:24.430
property for to skip the repackaging to
keep that happy so there was a change in
107

108
00:09:24.430 --> 00:09:28.300
the configuration of how the Spring Boot
Maven plugin is working. Again that's
108

109
00:09:28.300 --> 00:09:35.709
because I upgraded Spring Boot to 2.1.
Let's come over here. This is in
109

110
00:09:35.709 --> 00:09:42.730
the Spring Pet Clinic Web. We'll scroll
down to this and I had to upgrade the
110

111
00:09:42.730 --> 00:09:50.040
Mockito plugin for the WRO4j plugin and
then finally let's take a look at the
111

112
00:09:50.040 --> 00:09:57.910
parent pom. We got the changes that I put
in here. Upgraded to Spring Boot 2.1.0.
112

113
00:09:57.910 --> 00:10:02.050
That is the latest release at the time
of recording. Upgraded the Java version
113

114
00:10:02.050 --> 00:10:07.600
to Java 11. Added in the JAXB
dependencies which were taken out of the
114

115
00:10:07.600 --> 00:10:11.290
Java 9 JDK.
That was no longer included with Java
115

116
00:10:11.290 --> 00:10:16.630
but we do have things like Hibernate
that do depend on them. Your project will
116

117
00:10:16.630 --> 00:10:20.680
be very unhappy if you do not include
these. Then I set the compiler
117

118
00:10:20.680 --> 00:10:25.450
settings to the Java 11 version. You can
see here on line 35, these are the JAXB
118

119
00:10:25.450 --> 00:10:34.449
dependencies to bring those in. And
then finally on line 67 there, we
119

120
00:10:34.449 --> 00:10:39.550
upgraded the Maven SureFire plugin. I
took those out of the child modules.
120

121
00:10:39.550 --> 00:10:43.720
Brought them up here. I'm explicitly
saying that we need the Maven
121

122
00:10:43.720 --> 00:10:49.390
Surefire plugin 2.22.0  that
includes the JUnit 5 support as well as
122

123
00:10:49.390 --> 00:10:52.779
the Failsafe plugin for running
integration tests should we configure
123

124
00:10:52.779 --> 00:10:57.720
any of those and the argument line
illegal access that is a recommendation
124

125
00:10:57.720 --> 00:11:02.150
that it's on the web for compiling Java
11 project.
125

126
00:11:02.150 --> 00:11:18.589
So that completes all these changes. So
I'm going to go ahead and commit this.
126

127
00:11:18.589 --> 00:11:23.990
Get that pushed up to GitHub and I'm
going to verify that the project on GitHub.
127

128
00:11:23.990 --> 00:11:30.500
I actually forgot one change. Forgot
about the Circle CI. We need to come in
128

129
00:11:30.500 --> 00:11:34.339
here. That is set to the Java JDK so that
change that I just pushed that will
129

130
00:11:34.339 --> 00:11:38.270
definitely fail on Circle CI
because we are asking to build a Java 11
130

131
00:11:38.270 --> 00:11:44.110
project with Java 8. That will definitely
not work. So there's several versions of
131

132
00:11:44.110 --> 00:11:51.529
the base image and I am taking the open
JDK 11 and browsers legacy. That
132

133
00:11:51.529 --> 00:11:55.339
seems to be the most leanest one. I don't
think we need the browser support in
133

134
00:11:55.339 --> 00:11:59.510
there at this point in time. But I'm picking
that one up. That's seems to be the most
134

135
00:11:59.510 --> 00:12:05.839
complete JDK with Java 11 for our needs.
So if you look at Circle CI's Docker
135

136
00:12:05.839 --> 00:12:10.940
Repository, you can see the number of JDK
images that they have there to support.
136

137
00:12:10.940 --> 00:12:15.529
It's quite a plethora of them to choose
from. That is the one I'm picking so I'm
137

138
00:12:15.529 --> 00:12:18.730
going to go ahead and commit that.
138

139
00:12:27.940 --> 00:12:32.569
So that is going to get pushed up to
GitHub and again this is controlling the
139

140
00:12:32.569 --> 00:12:37.220
base image that Circle CI is going to
use to do our CI builds. So again that
140

141
00:12:37.220 --> 00:12:41.870
Circle CI is going to check things out
run them inside of a Docker Container.
141

142
00:12:41.870 --> 00:12:47.389
I'm specifying that I want a Docker
Container with Java 11 in it. So I'm
142

143
00:12:47.389 --> 00:12:53.629
going to toggle over to Chrome and we
can see that like I said that one build
143

144
00:12:53.629 --> 00:12:57.920
that I pushed without the upgrade,
that would definitely fail. This one
144

145
00:12:57.920 --> 00:13:05.300
is running. I'm going to shoot down to
the bottom. I'm going to pause the video
145

146
00:13:05.300 --> 00:13:10.100
until it's completes. I've resumed
the video and we can see that the
146

147
00:13:10.100 --> 00:13:16.069
integration test did complete. Shoot down
to the bottom here and we can see that
147

148
00:13:16.069 --> 00:13:21.620
everything built normally. So let's come
back to our jobs. Just to recap what
148

149
00:13:21.620 --> 00:13:24.410
happened,
the reason why I upgraded to Java
149

150
00:13:24.410 --> 00:13:30.319
11 is about two months ago is the last
time I worked on this project. Between
150

151
00:13:30.319 --> 00:13:35.029
then and now, what happened was Circle CI
they upgraded their base image to a
151

152
00:13:35.029 --> 00:13:40.430
new release of the Java 8 JDK and
there's a change in there that Maven is
152

153
00:13:40.430 --> 00:13:43.880
not happy about. The Surefire plugin is
not happy about and that started failing.
153

154
00:13:43.880 --> 00:13:48.319
So we can see that my code did not
change. The underlying groundwork that
154

155
00:13:48.319 --> 00:13:53.540
the code runs in that changed and when
I went in and manually triggered a build,
155

156
00:13:53.540 --> 00:13:58.490
the project started to fail. Let's
actually bring out the pet client
156

157
00:13:58.490 --> 00:14:02.930
project slowly. So we can see here two
months ago is when I did the last
157

158
00:14:02.930 --> 00:14:06.649
build on this project. I triggered a
manual build and that's running with a
158

159
00:14:06.649 --> 00:14:12.740
new version of Java 8 which Maven was
unhappy with. You can say I forgot to upgrade to
159

160
00:14:12.740 --> 00:14:19.130
Java 11 here and then I upgraded it. So I
didn't do any code changes. I brought in
160

161
00:14:19.130 --> 00:14:24.620
new libraries too for compatibility with
Java 11 and upgraded the project in
161

162
00:14:24.620 --> 00:14:31.100
Maven to use Java 11 and now things are
happy again. So that defect inside of the
162

163
00:14:31.100 --> 00:14:35.449
JDK that Maven was not happy about has
been resolved or does not exist in
163

164
00:14:35.449 --> 00:14:39.449
inside a Java 11. So
for the pet clinic project we will be
164

165
00:14:39.449 --> 00:14:45.449
using Java 11 going forward. For the
Spring 5 course in general, I will be
165

166
00:14:45.449 --> 00:14:52.790
upgrading that in Q1 of 2019 to bring
everything up to Java 11.
