WEBVTT
0
1
00:00:04.220 --> 00:00:09.179
In this video, we are going to take a
look at connecting to MySQL running
1

2
00:00:09.179 --> 00:00:13.230
in the inside of a Docker Container. So
you can see, I have the Command Line up
2

3
00:00:13.230 --> 00:00:17.910
here. If I do docker ps, just to see
what's running, you see that I have
3

4
00:00:17.910 --> 00:00:25.949
nothing running at all. So, I'm going to
start up docker run. We'll give this a
4

5
00:00:25.949 --> 00:00:33.120
container name and just call it jt-mysql.
I'm going to pass in an environment
5

6
00:00:33.120 --> 00:00:36.210
variable. If you have questions about
these environment variables, the
6

7
00:00:36.210 --> 00:00:40.829
documentation up on Docker Hub is very
good for this of the MySQL image.
7

8
00:00:40.829 --> 00:00:51.120
I'm going to say MySQL. I'm saying MySQL_ROOT_PASSWORD equal to... I'm just going to
8

9
00:00:51.120 --> 00:00:57.329
say password. It's just a real temporary
thing - d to run it in the background.
9

10
00:00:57.329 --> 00:01:03.539
Then, I'm going to say mysql. By default,
by not providing a tag, it's going to
10

11
00:01:03.539 --> 00:01:09.360
just grab the latest one. So now, go ahead
and hit enter. You can see that's going
11

12
00:01:09.360 --> 00:01:13.710
to take a moment while it Docker goes up
and starts that. It's pulling down an
12

13
00:01:13.710 --> 00:01:18.420
image, so that's telling me that this
image is being started up, or container I
13

14
00:01:18.420 --> 00:01:25.470
should say, on the proper context. We can
see that the container is now up. I do a
14

15
00:01:25.470 --> 00:01:32.100
docker ps. You can see that this is now
up and running. What we want to do
15

16
00:01:32.100 --> 00:01:38.670
is basically get a bash shell inside of
that. So, you might consider SSH again but
16

17
00:01:38.670 --> 00:01:43.229
we're actually using Docker Utilities to
connect in and and get a shell inside
17

18
00:01:43.229 --> 00:01:46.649
that running container. So, that's what we
want to do to get to the command line of
18

19
00:01:46.649 --> 00:01:50.310
running against MySQL. If you notice, I
did not expose a port here. So, this
19

20
00:01:50.310 --> 00:01:57.299
container is running on my system. But
technically, you can't connect into MySQL
20

21
00:01:57.299 --> 00:02:02.549
from the outside of the container.
So, let's go ahead and do that now, and do
21

22
00:02:02.549 --> 00:02:10.080
docker exec -it
and what I want to do is the
22

23
00:02:10.080 --> 00:02:17.010
container name. So, that's going to be jt-mysql. I'm going to say, I want to run
23

24
00:02:17.010 --> 00:02:23.520
bash, so I'll do that, and now, you can see
whoami
24

25
00:02:23.520 --> 00:02:33.680
root running inside of that. So,
what I want to do now is mysql --user
25

26
00:02:33.709 --> 00:02:41.220
equals root. I'm going to do a -p so we can
pass in the password. Now, it's going to ask
26

27
00:02:41.220 --> 00:02:47.550
me for that password, and now I am at the
MySQL command line. So, now I have
27

28
00:02:47.550 --> 00:02:54.269
access to the command line of MySQL.
Let's take a look at help. At any
28

29
00:02:54.269 --> 00:03:00.720
time, you can run help. You can see that,
technically, the commands here. You don't need
29

30
00:03:00.720 --> 00:03:06.930
to terminate them with a semicolon, but
for SQL commands, you do. So, for the shell
30

31
00:03:06.930 --> 00:03:11.640
commands, you do not. But for the SQL
commands, you do. So, let's take a look at
31

32
00:03:11.640 --> 00:03:20.670
like status. We can see here that I
am connected. I'm connecting into MySQL
32

33
00:03:20.670 --> 00:03:25.459
using a UNIX socket because I am running
inside of a Docker Container, which is a
33

34
00:03:25.459 --> 00:03:29.280
flavor of Linux, that's running inside
there. So, it's going to be using sockets.
34

35
00:03:29.280 --> 00:03:32.400
So, it's kind of a nice little feature there. 
This gives us some basic information
35

36
00:03:32.400 --> 00:03:37.430
about what's going on. So, let's go ahead
and and run some MySQL commands now.
36

37
00:03:37.430 --> 00:03:44.549
One of them is, I can do show databases.
Like so, you can see that we have four
37

38
00:03:44.549 --> 00:03:48.269
different databases running on this. 
Let's take a look at the MySQL database
38

39
00:03:48.269 --> 00:03:55.530
a little bit closer. I'm going to say
use mysql and now I need to do a
39

40
00:03:55.530 --> 00:04:00.390
semicolon. That's going to terminate
the statement. And now, by default, I'm
40

41
00:04:00.390 --> 00:04:04.470
going to be using the mysql database
inside of MySQL. So, a little bit
41

42
00:04:04.470 --> 00:04:10.130
confusing about that, but is the name of
the database. I can do show tables,
42

43
00:04:10.130 --> 00:04:16.709
and now, I can get a list of the tables
that are inside this database. So, this
43

44
00:04:16.709 --> 00:04:19.669
tells me about everything that's there
now intuitively.
44

45
00:04:19.669 --> 00:04:23.569
We just did show databases and then we
did show tables. If we want to get more
45

46
00:04:23.569 --> 00:04:28.909
information about a table, you might be
tempted to try show in table name but
46

47
00:04:28.909 --> 00:04:36.199
that's not going to work for you. But,
what we can do is describe user and we
47

48
00:04:36.199 --> 00:04:40.430
can see that we get all the information
about the user table, so that does have a
48

49
00:04:40.430 --> 00:04:44.749
bunch of rows on it. You can see up
here, I have the field, the type, whether
49

50
00:04:44.749 --> 00:04:50.090
it's a allowed to be null, if there's a
key on it, default value, then additional
50

51
00:04:50.090 --> 00:04:55.639
information under extra. What I'd like to
do now is let's select the host and user
51

52
00:04:55.639 --> 00:05:04.060
from that. So, let's go ahead and do
select host comma user
52

53
00:05:04.060 --> 00:05:10.610
from user, and I do need that semicolon
again. We can see that from
53

54
00:05:10.610 --> 00:05:15.830
command-line, I'm now seeing that I have
a user called root available from any
54

55
00:05:15.830 --> 00:05:21.680
host. That % sign means any host. and then,
there's two users in there. mysql.sys
55

56
00:05:21.680 --> 00:05:28.939
and then local host root. So, SQL treats
user says host and user name. So, it's
56

57
00:05:28.939 --> 00:05:34.460
kind of a unique user within MySQL.
It kind of little confusing at first
57

58
00:05:34.460 --> 00:05:39.439
when you see how MySQL is treating user
accounts, because technically, the
58

59
00:05:39.439 --> 00:05:46.819
wild-card root and local root are two
different accounts inside the MySQL
59

60
00:05:46.819 --> 00:05:51.500
database. So, a little confusing.
Now the mysql.sys user there, the
60

61
00:05:51.500 --> 00:05:56.839
middle row, that is a system account. You
should never. I don't know make sure if
61

62
00:05:56.839 --> 00:06:00.649
you could try to sign in to it. I'm not
sure if MySQL will let you. But
62

63
00:06:00.649 --> 00:06:05.439
effectively, you really don't have any
reason to ever sign in as that user
63

64
00:06:05.439 --> 00:06:10.509
specifically. So, going on future in the
course, we will show you how to create
64

65
00:06:10.509 --> 00:06:15.139
named user accounts, which is probably a
better habit, because once you get into a
65

66
00:06:15.139 --> 00:06:19.430
production database, you definitely do
not want to be using the root user
66

67
00:06:19.430 --> 00:06:22.909
account, because that could cause you
problems further down the road, because
67

68
00:06:22.909 --> 00:06:27.469
this is a very powerful user account. So,
once you get to a database that you're
68

69
00:06:27.469 --> 00:06:31.099
going to be using, like in production or
something, you will want to be using
69

70
00:06:31.099 --> 00:06:34.670
named accounts
with the proper roles and authorities.
70

71
00:06:34.670 --> 00:06:38.870
But that's something that we're going to
get it to further down in the course. Now,
71

72
00:06:38.870 --> 00:06:42.500
the one last thing that we want to do is
be able to get out of this. If we want to
72

73
00:06:42.500 --> 00:06:49.130
do help, you can see here that we have
the exit command and the quick command. I
73

74
00:06:49.130 --> 00:06:53.900
will personally go back and forth. They
do the exact same thing, so don't worry
74

75
00:06:53.900 --> 00:06:58.580
about which to use. There's really no
difference between them. For me, it's
75

76
00:06:58.580 --> 00:07:01.820
really kind of which one I happen to
remember at the time I'm exiting the
76

77
00:07:01.820 --> 00:07:10.040
MySQL command line. So, you just type exit.
That closes out to MySQL shell and you
77

78
00:07:10.040 --> 00:07:17.990
can see that I am still in the container.
If I just do exit here, I am back at
78

79
00:07:17.990 --> 00:07:23.030
the command line of my operating system.
So, I'm on my macbook pro now. I do a
79

80
00:07:23.030 --> 00:07:30.280
docker ps. We can see that that MySQL
container is still running for us. So,
80

81
00:07:30.280 --> 00:07:35.720
just real quickly, if you're in
the container at the MySQL prompt, just
81

82
00:07:35.720 --> 00:07:40.610
do exit. That will exit you back to the
command line off the bash shell inside
82

83
00:07:40.610 --> 00:07:46.360
of the container, and then do another
exit and you'll be out of the container.
