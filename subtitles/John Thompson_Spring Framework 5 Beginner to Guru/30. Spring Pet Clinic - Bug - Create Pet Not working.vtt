WEBVTT
0
1
00:00:03.589 --> 00:00:08.130
In this video, we're going to address the
bug that we saw in the last video about
1

2
00:00:08.130 --> 00:00:14.099
the add update pet not working. I
actually researched this and I actually
2

3
00:00:14.099 --> 00:00:18.390
learned something about Spring today. 
This is some old school stuff. Been
3

4
00:00:18.390 --> 00:00:22.350
around for a while but not commonly used.
I learned a little bit here in
4

5
00:00:22.350 --> 00:00:26.900
researching this. Let's just go
through the problem that we're seeing.
5

6
00:00:26.900 --> 00:00:32.130
I'll explain this in detail so I got
it running in the background. Let's just do
6

7
00:00:32.130 --> 00:00:36.960
find owner. We'll pick on Michael
and let's go in and add a pet. We see
7

8
00:00:36.960 --> 00:00:42.420
null null here. We are going to fix
that shortly. But let's go in and add in
8

9
00:00:42.420 --> 00:00:47.640
a pet. This is where we're getting a
500 error. Let's come in take a
9

10
00:00:47.640 --> 00:00:52.989
closer look at this.
What's happening, it kind of threw me
10

11
00:00:52.989 --> 00:00:57.190
for a loop because we're getting a
NumberFormatException for the input
11

12
00:00:57.190 --> 00:01:01.809
String of Cat. What's happening?
Let's come over here and take a closer
12

13
00:01:01.809 --> 00:01:08.040
look at this. Come back here to the
templates. Let's view page source.
13

14
00:01:08.040 --> 00:01:13.119
What's happening is the value is
getting set here. So this is what's
14

15
00:01:13.119 --> 00:01:18.369
getting passed back as petType.
Spring is trying to parse that and trying
15

16
00:01:18.369 --> 00:01:22.360
to create a petType from that. It's
trying to get a handle on petType but
16

17
00:01:22.360 --> 00:01:28.810
it's looking it up using the String dog
and cat for the Long. So what it's trying to
17

18
00:01:28.810 --> 00:01:34.690
find that. When it tries to find pet
type or create a pet type, it's blowing
18

19
00:01:34.690 --> 00:01:40.509
up because obviously you can't create a
number out of word called cat. That's why
19

20
00:01:40.509 --> 00:01:46.690
it's not happy about that. I looked
at this for a while trying to figure out
20

21
00:01:46.690 --> 00:01:52.090
what was wrong. Looking at the Thymeleaf 
because the only change we made was the
21

22
00:01:52.090 --> 00:01:56.350
renaming of the pet type property and
that shouldn't matter. I'm looking in
22

23
00:01:56.350 --> 00:02:00.930
here, how this is getting generated 
and just couldn't figure it out. Then
23

24
00:02:00.930 --> 00:02:08.729
almost accidentally, I looked at this
component. This is a formatter and
24

25
00:02:08.729 --> 00:02:15.519
basically it sets up kind of like
an interceptor so when this comes in, so
25

26
00:02:15.519 --> 00:02:21.750
we are going to get a parse. It's
going to take in text and it is going to
26

27
00:02:21.750 --> 00:02:27.400
go and create the PetType. So, kind of an
odd way that we're doing it but I'm
27

28
00:02:27.400 --> 00:02:33.740
going to go ahead and implement this.
We'll get him cooking now. I
28

29
00:02:33.740 --> 00:02:38.210
actually never seen this used so that's
kind of a little bit of a learning
29

30
00:02:38.210 --> 00:02:41.930
experience for me as well. You can see in
their comments that they referenced some
30

31
00:02:41.930 --> 00:02:46.100
some blog entries and you can see it's
all the way from 2010. So, eight years ago.
31

32
00:02:46.100 --> 00:02:50.390
This has been rolling around for
a while out there. For what they're
32

33
00:02:50.390 --> 00:02:53.270
doing, I would do it differently but we
are going to go through this learning
33

34
00:02:53.270 --> 00:02:59.240
process together and implement it. So
let's go in here. I am going to come
34

35
00:02:59.240 --> 00:03:06.760
in to the web project. Let's
create a package for that.
35

36
00:03:10.120 --> 00:03:13.200
Add a new class.
36

37
00:03:19.980 --> 00:03:24.379
It's going to be unhappy for a couple of
minutes while I ...
37

38
00:03:25.300 --> 00:03:29.090
Not sure which one
that is.
38

39
00:03:32.730 --> 00:03:37.930
In ParseException, which one
we have here? java.text.Parse
39

40
00:03:37.930 --> 00:03:41.370
Exception. So we'll grab that.
40

41
00:03:44.950 --> 00:03:52.080
Java text. That was the
right one. We want to...like that
41

42
00:03:54.550 --> 00:03:57.630
like so.
42

43
00:03:57.680 --> 00:04:01.549
In their implementation, they're getting
a hold of repository. We're going to use
43

44
00:04:01.549 --> 00:04:04.629
our PetTypeService.
44

45
00:04:12.060 --> 00:04:17.100
Again, you can actually see some of
the older-style of Spring. So they actually
45

46
00:04:17.100 --> 00:04:20.850
have a component and they still have the
Autowired annotation. They were doing
46

47
00:04:20.850 --> 00:04:26.310
private final on it which is good.But
the constructor, I think it's in Spring 4.2,
47

48
00:04:26.310 --> 00:04:31.860
it admitted the need for having to auto
wire the Constructors so that
48

49
00:04:31.860 --> 00:04:36.360
happens implicitly for us. We need to
make this a component so it gets picked
49

50
00:04:36.360 --> 00:04:45.639
up by the Spring Context 
and now change this to petTypeService
50

51
00:04:45.639 --> 00:04:50.940
findAll. That returns back a Set
and this will iterate
51

52
00:04:50.940 --> 00:04:56.340
over it. Basically when it goes to
parse a PetType, it takes in on the
52

53
00:04:56.340 --> 00:05:00.780
String of the the PetType. It's
going to iterate over the list of all
53

54
00:05:00.780 --> 00:05:06.240
pet types and then get the name and
return that. This is not the way I'd
54

55
00:05:06.240 --> 00:05:11.160
normally iterate over it. But for our
purposes, for a small collection, this is
55

56
00:05:11.160 --> 00:05:14.610
going to be fine. So I'm just kind of
following what the Spring guys did here
56

57
00:05:14.610 --> 00:05:18.660
If I was doing this differently, I'd
probably just use the PetTypeService
57

58
00:05:18.660 --> 00:05:23.510
defined by the name rather than pull out
a collection and iterate over it. But
58

59
00:05:23.510 --> 00:05:29.670
that's just a stylistic difference in
how I would implement it. So let's go
59

60
00:05:29.670 --> 00:05:32.990
ahead and restart Spring Boot.
60

61
00:05:37.970 --> 00:05:44.260
So that is up and running. Let's come
back over here to our pet clinic.
61

62
00:05:45.490 --> 00:05:48.930
You'll find owners. Click on Michael again.
We'll add in a
62

63
00:05:50.490 --> 00:05:55.509
new pet.
We'll add that and now we can see
63

64
00:05:55.509 --> 00:06:00.389
that that does get added. 
But looks like
64

65
00:06:01.080 --> 00:06:05.919
actually it did not get added for whatever
reason.
65

66
00:06:05.919 --> 00:06:09.310
So I think it failed the validation.
That's what happened. It failed a
66

67
00:06:09.310 --> 00:06:14.920
validation of null. We're not, we don't have
validation handling yet so the object
67

68
00:06:14.920 --> 00:06:18.760
failed validation. We have a hidden
problem there but we do have validation
68

69
00:06:18.760 --> 00:06:23.170
coming up in the course. I'm not going to
address that right now but I do want to
69

70
00:06:23.170 --> 00:06:26.820
look at this new pet null null.
70

71
00:06:27.040 --> 00:06:30.840
So that is our pet form.
71

72
00:06:31.690 --> 00:06:35.730
What it's like
for...
72

73
00:06:40.000 --> 00:06:45.090
pet 
owner firstName lastName.
73

74
00:06:45.090 --> 00:06:49.650
Unfortunately, these are not 
getting set so let's take a look at Pet.
74

75
00:06:49.650 --> 00:06:51.290
It does have
75

76
00:06:53.200 --> 00:06:55.410
owner.
76

77
00:07:07.419 --> 00:07:14.110
So let's uh stop this and run it in the
debugger. I want to see what's happening
77

78
00:07:14.110 --> 00:07:22.530
here. So that pet does have an owner but
it's like the owner object is missing.
78

79
00:07:22.670 --> 00:07:25.660
I think I see it already.
So we have owner
79

80
00:07:26.980 --> 00:07:34.540
add pet but the pet does not have the
owner. So I replace that. I'm working with
80

81
00:07:34.540 --> 00:07:37.420
that directly so they probably
implemented that and that little
81

82
00:07:37.420 --> 00:07:43.080
convenience function. So let's come here
and say...
82

83
00:07:45.230 --> 00:07:50.520
I am almost positive that's
what it is. Let's go ahead. I'm just going to run
83

84
00:07:51.830 --> 00:07:54.430
this normally.
84

85
00:07:54.790 --> 00:07:58.090
I have to go into the debugger for that
to figure out what happened there. I just
85

86
00:07:58.090 --> 00:08:02.920
saw that because they originally
had a convenience function to add in the
86

87
00:08:02.920 --> 00:08:07.480
pet. That probably maintained the
relationship and now I have to do it
87

88
00:08:07.480 --> 00:08:11.770
myself.
So let's come back over here. You find
88

89
00:08:11.770 --> 00:08:14.250
owners.
89

90
00:08:15.340 --> 00:08:19.310
Pick on Fiona this
time. I was going to add a pet and now we
90

91
00:08:19.310 --> 00:08:23.480
can see that's no longer there. So there
was that relationship where I didn't add
91

92
00:08:23.480 --> 00:08:30.080
the owner to the empty pet object that
we needed. So,
92

93
00:08:30.080 --> 00:08:34.029
let's test this here.
Add a cat
93

94
00:08:34.080 --> 00:08:38.450
for Fiona. Invalid date.
94

95
00:08:41.990 --> 00:08:48.000
Why don't you like my date? So we haven't added in the
validation yet so I'm not going to worry
95

96
00:08:48.000 --> 00:08:53.699
about this for right now. We will
need to go in and fix validation. But
96

97
00:08:53.699 --> 00:08:59.100
for now, that does fix the parse
problem that we had with that. So, just as
97

98
00:08:59.100 --> 00:09:05.519
a recap, come back in here. We added in
the PetTypeFormatter. This is going
98

99
00:09:05.519 --> 00:09:12.140
to be used by Spring MVC. Expand this out.
This is a Spring component. It
99

100
00:09:12.140 --> 00:09:17.150
implements the Formater interface for
PetType. Spring MVC is going to use
100

101
00:09:17.150 --> 00:09:21.170
this so when it's parsing a PetType you
can see here that's parsing that in and
101

102
00:09:21.170 --> 00:09:25.940
this is how it derives the problem or
the object PetType. In the
102

103
00:09:25.940 --> 00:09:31.100
implementation again, we're going to go into
the pet service to findAll and then
103

104
00:09:31.100 --> 00:09:36.350
basically match on name. Again the
default behavior was trying to generate
104

105
00:09:36.350 --> 00:09:42.170
a PetType and using the String and
putting it into the ID property so the
105

106
00:09:42.170 --> 00:09:46.610
automatic parsing magic of Spring was
failing us there and it was because I
106

107
00:09:46.610 --> 00:09:50.390
was missing this formatter component. So
let's go ahead and close out that task.
107

108
00:09:50.390 --> 00:09:55.000
That was number 69.
108

109
00:10:11.240 --> 00:10:16.880
and that will close out that issue.Take a quick look there. Close out
109

110
00:10:16.880 --> 00:10:19.210
the issue.
And now
110

111
00:10:20.440 --> 00:10:25.030
we're going to start working on visits. So I'm
going to go ahead and do some task planning
111

112
00:10:25.030 --> 00:10:28.300
on this soon. But we'll go ahead and add
visits and then we'll come back and
112

113
00:10:28.300 --> 00:10:32.380
start adding in validation constraint so
that's going to resolve the issues that
113

114
00:10:32.380 --> 00:10:35.700
we saw earlier in this video.
