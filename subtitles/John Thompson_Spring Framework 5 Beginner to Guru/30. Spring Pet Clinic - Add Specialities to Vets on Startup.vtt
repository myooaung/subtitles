WEBVTT
0
1
00:00:03.920 --> 00:00:09.240
In this video, we are going to cover
number 34 here. We want to create some
1

2
00:00:09.240 --> 00:00:14.639
specialties and add those to vets upon
startup so I'm going to go in here to
2

3
00:00:14.639 --> 00:00:19.100
GitHub. Assign it to me for right now to
indicate that I am working on it.
3

4
00:00:19.100 --> 00:00:28.239
Let's toggle on over to IntelliJ here
and what we want to do is modify. I'm
4

5
00:00:28.239 --> 00:00:35.730
going to come down here to the source main java
bootstrap. Going to the DataLoader.
5

6
00:00:35.880 --> 00:00:40.890
What we want to do is set
up some specialties and then we're going
6

7
00:00:40.890 --> 00:00:46.440
to add them to owners, so let's go in
here. I want to show you something
7

8
00:00:46.440 --> 00:00:52.560
inside it here in Spring Pet Clinic. Wait.
Get back to the root here. Inside of
8

9
00:00:52.560 --> 00:01:01.140
the reference application under source
main resources, we have a db folder.
9

10
00:01:01.140 --> 00:01:05.520
The db folder we're holding some SQL
files. I'm just going to take a look
10

11
00:01:05.520 --> 00:01:09.630
to see what they're doing. Just as a
side note, we are going to get into this
11

12
00:01:09.630 --> 00:01:15.330
coming up in the course. I'm not showing
you this yet but Spring Boot will accept
12

13
00:01:15.330 --> 00:01:20.009
two files. One is a data SQL and one is a
schema SQL. I'm not going to dive into
13

14
00:01:20.009 --> 00:01:25.229
that too much right now but I want to
look at the data SQL. This is how
14

15
00:01:25.229 --> 00:01:30.600
they are choosing to initialize their
data, so what I want to do, I'm going to
15

16
00:01:30.600 --> 00:01:35.190
mimic what they're doing here. They
are adding specialties of radiology,
16

17
00:01:35.190 --> 00:01:39.929
surgery, and dentistry. So let's go ahead
and add that. I'm going to set it up so we
17

18
00:01:39.929 --> 00:01:44.929
add these specialties. Let's come over
here to our application.
18

19
00:01:45.439 --> 00:01:50.409
Let's see here. We had radiology.
19

20
00:01:52.579 --> 00:01:56.149
Make sure I'm spelling that right. I know
I almost never use that word. So
20

21
00:01:56.149 --> 00:01:59.079
radiology, yes.
21

22
00:02:13.560 --> 00:02:17.210
So like so and
22

23
00:02:17.560 --> 00:02:22.530
let's go ahead. I'm going to create
the other ones real quick.
23

24
00:02:25.610 --> 00:02:31.280
Let's create surgery.
24

25
00:02:39.280 --> 00:02:42.310
I like to have that capitalized, and then
finally, we have
25

26
00:02:42.310 --> 00:02:44.910
dentistry.
26

27
00:02:45.680 --> 00:02:50.360
I am cutting and pasting. Do not do
this at home. As I always tell you,
27

28
00:02:50.360 --> 00:02:56.930
don't do as I do, do as I say, right. So
this sets those up. These create the
28

29
00:02:56.930 --> 00:03:00.260
objects but we're not persisting those
yet so what we want to do is bring in
29

30
00:03:00.260 --> 00:03:03.549
that service.
30

31
00:03:09.660 --> 00:03:15.050
Why don't you coming out SpecialtyService?
31

32
00:03:15.600 --> 00:03:19.290
I don't. I want to be consistent
here so I called that SpecialtiesService
32

33
00:03:19.290 --> 00:03:25.110
so let me make sure of the model here, so
Specialty, SpecialtyService. Let's
33

34
00:03:25.110 --> 00:03:32.600
come in here and refactor that.
We'll rename that just to be consistent.
34

35
00:03:34.819 --> 00:03:40.379
SpecialtyService, so rather than use the
plural, I mean I use singular there, just
35

36
00:03:40.379 --> 00:03:44.010
be mainly to be consistent because we
have all the other properties are
36

37
00:03:44.010 --> 00:03:49.739
singular so make it that way and
especially map service so that is
37

38
00:03:49.739 --> 00:03:52.730
all consistent now.
38

39
00:03:54.250 --> 00:03:58.080
Why aren't you coming up?
39

40
00:04:08.720 --> 00:04:12.440
Not sure why that wasn't happy before as
far as coming up. Maybe I fat fingered
40

41
00:04:12.440 --> 00:04:17.510
something. Let's go ahead and now I'm
going to go in and add in a constructor
41

42
00:04:17.510 --> 00:04:23.450
parameter, so I just did command enter
there to bring up the help. We'll go
42

43
00:04:23.450 --> 00:04:31.130
ahead and add that in. Refactor that. So
now, this will get an instance of that so
43

44
00:04:31.130 --> 00:04:35.840
we can come down here and now I can say...
I just want to make sure that I get
44

45
00:04:35.840 --> 00:04:39.340
the saved version.
45

46
00:04:44.139 --> 00:04:47.420
I need to do the same for the other
ones.
46

47
00:04:47.420 --> 00:04:51.680
Remember, what we're doing is we're
going through and we're persisting that
47

48
00:04:51.680 --> 00:04:54.520
to our map.
48

49
00:05:06.550 --> 00:05:11.289
When we persisted to the map, that's
when we get the ID value. Once we get
49

50
00:05:11.289 --> 00:05:18.389
to start implementing JPA,
this is going to behave very similar.
50

51
00:05:21.820 --> 00:05:28.330
So we have savedRadiology, savedSurgery, savedDentistry, so that sets those up. These
51

52
00:05:28.330 --> 00:05:32.770
objects will have the ID value
established so that is all good. That's
52

53
00:05:32.770 --> 00:05:37.420
exactly what we want. So now, we want to
come down here to our vetService as
53

54
00:05:37.420 --> 00:05:39.750
well.
54

55
00:05:39.900 --> 00:05:48.660
Let's say vet1 getSpecialties().add() and we'll do 
55

56
00:05:48.660 --> 00:05:52.840
savedRadiology. That will add
56

57
00:05:52.840 --> 00:05:59.950
specialty to vet number one, so Sam X
will be an expert on that. Let's come
57

58
00:05:59.950 --> 00:06:09.170
over here. vet2
and I'm going to getSpecialties() dot then
58

59
00:06:09.170 --> 00:06:11.620
add and let's say that
59

60
00:06:13.590 --> 00:06:20.340
Jessie is an expert in vet surgeon.
One thing I want double check here. Let's
60

61
00:06:20.340 --> 00:06:25.440
come in take a look at Specialty.
Okay, so I wanted to verify that we are
61

62
00:06:25.440 --> 00:06:31.230
initializing it to a HashSet so that's
good. So when we do the getSpecialties(),
62

63
00:06:31.230 --> 00:06:35.310
this properties are already initialized
so that that is exactly what we want
63

64
00:06:35.310 --> 00:06:39.060
there.
Let's come back over here and double
64

65
00:06:39.060 --> 00:06:43.050
check our work.
I think everything looks good so
65

66
00:06:43.050 --> 00:06:46.170
let's go ahead and start this. Make sure
that we're not blowing up at this point.
66

67
00:06:46.170 --> 00:06:49.770
Again, I'm just double checking make sure
that we're not throwing an exception on
67

68
00:06:49.770 --> 00:06:54.180
startup, that we are properly
persisting our specialties. Now it looks
68

69
00:06:54.180 --> 00:06:57.180
like we did. Further down on the course,
we're going to get into testing so we'll
69

70
00:06:57.180 --> 00:07:03.420
be setting this up. But right now, we do
have a good set up here. There's one.
70

71
00:07:03.420 --> 00:07:08.730
I'm going to stop this. There's one other
refactoring I want to do
71

72
00:07:08.730 --> 00:07:16.410
and really what's happening here is that
we are doing a run set up. Let's come
72

73
00:07:16.410 --> 00:07:25.340
up here. I'm going to highlight all this .
I come up here refactor.
73

74
00:07:26.120 --> 00:07:29.560
Extract to method.
74

75
00:07:29.959 --> 00:07:34.619
I'm going to move this into a private
method so I'm going to do all the data into
75

76
00:07:34.619 --> 00:07:40.439
a load data method, so refactor. You can
see there that that IntelliJ refactored
76

77
00:07:40.439 --> 00:07:46.379
that. What I want to do here is makes
a sensible thing because right now I'm
77

78
00:07:46.379 --> 00:07:49.349
kind of laying the groundwork. I 
want to be able to reuse this class once
78

79
00:07:49.349 --> 00:07:53.699
we bring in Spring Data JPA
and start persisting this with an actual
79

80
00:07:53.699 --> 00:07:57.449
database. But obviously, we don't want to
run this every time. If we get into
80

81
00:07:57.449 --> 00:08:01.079
something that's persisting data, this is
going to work great as long as we're
81

82
00:08:01.079 --> 00:08:04.769
bringing things up and down and there's
nothing there. When we have a persistent
82

83
00:08:04.769 --> 00:08:08.789
database, what's going to happen is it's
going to try to create these values
83

84
00:08:08.789 --> 00:08:12.029
multiple times, so every time we start it
up we'd get a whole new set of data and
84

85
00:08:12.029 --> 00:08:17.399
then we drop it. Database stays there. If
we're using MySQL, then we start it
85

86
00:08:17.399 --> 00:08:21.119
up again
and we're going to re get it again. So what
86

87
00:08:21.119 --> 00:08:25.769
we want to do here, let's come in. I just
make a reasonable assumption to say if
87

88
00:08:25.769 --> 00:08:31.429
there's no pet types. Let's do...
88

89
00:08:34.289 --> 00:08:38.159
Let's see petService
89

90
00:08:39.640 --> 00:08:44.459
and I just do a find all
90

91
00:08:44.980 --> 00:08:51.320
dot size().
Let's say
91

92
00:08:54.440 --> 00:09:01.430
if count equals zero, we want to run load
data so that should work. Let's double
92

93
00:09:01.430 --> 00:09:04.819
check that. I'm going to start this up
and make sure that that is running in
93

94
00:09:04.819 --> 00:09:07.089
fact.
94

95
00:09:15.119 --> 00:09:19.309
You can see that we got our system
out
95

96
00:09:21.640 --> 00:09:26.890
loaded owners, loaded pets.
There's our system.out statement so
96

97
00:09:26.890 --> 00:09:30.280
that tells us because I'm seeing
this output down here in the log that
97

98
00:09:30.280 --> 00:09:34.840
loaded owners loaded vets, that our
system out did run, so my logic is good.
98

99
00:09:34.840 --> 00:09:40.690
We did get a findAll() size(). An account
was equal to zero. So now, I'm testing
99

100
00:09:40.690 --> 00:09:45.430
to say count is equal to zero and then I'm
going to call the load data method.
100

101
00:09:45.430 --> 00:09:50.320
This is exactly what we want.
Right now, our data loader, our bootstrap
101

102
00:09:50.320 --> 00:09:53.020
data loader,
that is going to run on startup. This guy
102

103
00:09:53.020 --> 00:09:58.390
should be generic enough so when we
switch over our services to be using JPA
103

104
00:09:58.390 --> 00:10:02.110
upcoming in the course, everything's
got to run happily even if we are
104

105
00:10:02.110 --> 00:10:05.890
running against MySQL so I kind of
set ourselves up for that in the
105

106
00:10:05.890 --> 00:10:12.850
future here. Just to quickly recap
what we did here. Okay, I refactored the
106

107
00:10:12.850 --> 00:10:17.200
specialty service name.
I had mistakenly had specialties. That
107

108
00:10:17.200 --> 00:10:23.320
was a mistake in my part, so I refactored
that and then in the data loader, we
108

109
00:10:23.320 --> 00:10:28.930
refactored did load all the loading
logic into a private method called loadData().
109

110
00:10:28.930 --> 00:10:35.670
We added this section here. I'll
clean out that empty space. We set up
110

111
00:10:35.670 --> 00:10:41.170
the new Specialty. We have two
specialties being used. You can see that
111

112
00:10:41.170 --> 00:10:45.820
savedDentistry. That specialty is
not being used at this point in time, and
112

113
00:10:45.820 --> 00:10:53.500
then, we came down here to the vets.
Let's double check. The one last thing
113

114
00:10:53.500 --> 00:10:58.930
that we want to do here is we don't
necessarily need to set that up so let's
114

115
00:10:58.930 --> 00:11:04.390
come in here, double-check our VetMapService. Remember, when we did the
115

116
00:11:04.390 --> 00:11:08.770
owner service, when we're adding in
the pets, I want to do something similar
116

117
00:11:08.770 --> 00:11:14.190
here
so when I do a save, let's expand that
117

118
00:11:14.190 --> 00:11:18.510
out.
I actually want to do a vet service.
118

119
00:11:18.510 --> 00:11:20.899
I'm sorry.
119

120
00:11:21.270 --> 00:11:27.260
Come in here to the vet service. I'm
going to say if
120

121
00:11:29.970 --> 00:11:35.279
that is greater than zero, we need to
check those specialties. So now, when I
121

122
00:11:35.279 --> 00:11:42.510
say object getSpecialties()
forEach
122

123
00:11:42.980 --> 00:11:46.090
like so if
123

124
00:11:48.620 --> 00:11:52.330
and if ID has now been set,
124

125
00:11:52.460 --> 00:11:56.440
we want to go ahead and set it.
125

126
00:11:57.470 --> 00:12:03.279
That will save that. And then we
also want to save it to our service. If we
126

127
00:12:03.459 --> 00:12:09.460
come back over here to
our owner service,
127

128
00:12:09.769 --> 00:12:12.160
let's see here
128

129
00:12:15.100 --> 00:12:19.279
and going to double-check the AbstractMapService that's going to go ahead
129

130
00:12:19.279 --> 00:12:23.959
and implement that next ID for so that's
exactly what we want to do here. Come
130

131
00:12:23.959 --> 00:12:31.540
back over here to the owner service.
You can see here that we are doing that.
131

132
00:12:31.540 --> 00:12:35.230
Double-checking my work here.
132

133
00:12:36.050 --> 00:12:39.800
See here how I'm saving the pet and then
getting the save pet and getting the ID,
133

134
00:12:39.800 --> 00:12:45.079
so that's exactly what I want to be
doing here in the vet service. If that
134

135
00:12:45.079 --> 00:12:49.209
is equal to null, I'm going to say Specialty
135

136
00:12:51.070 --> 00:12:56.579
and we need to bring in the SpecialtyService.
136

137
00:13:01.230 --> 00:13:07.440
Going to add in a constructor for that. That
will get auto wire by Spring, so Spring's
137

138
00:13:07.440 --> 00:13:14.030
going to manage this. I can say
specialtyService.save().
138

139
00:13:15.510 --> 00:13:20.430
So now, that's going to create a ID
on the Specialty, the saved
139

140
00:13:20.430 --> 00:13:25.050
Specialty. We want to make sure and
this is just some defensive coding here
140

141
00:13:25.050 --> 00:13:29.900
so we're going to go in and say 
specialty dot
141

142
00:13:30.950 --> 00:13:34.900
setId() equals to
142

143
00:13:36.060 --> 00:13:41.610
like so. Now, if we do get a vet object
that has specialties that I have not been
143

144
00:13:41.610 --> 00:13:48.390
persisted, we are going to go ahead and
make sure that that ID is saved so...
144

145
00:13:51.379 --> 00:13:54.729
Had a typo there.
145

146
00:13:56.540 --> 00:14:01.250
So now, that's going to set things up
to make sure that is all happy. So
146

147
00:14:01.250 --> 00:14:05.990
come in, we're going to go to save it,
walk the specialties. If there's any IDs
147

148
00:14:05.990 --> 00:14:09.680
that are null, we're going to go in and save
that specialty or specialty
148

149
00:14:09.680 --> 00:14:13.610
Service, that will create the ID for
us. Then it will come back and make
149

150
00:14:13.610 --> 00:14:19.280
sure that that specialty in the list
does in fact have that ID value and then
150

151
00:14:19.280 --> 00:14:24.650
the entire vet object, we are going to go
ahead and save that. So that will make
151

152
00:14:24.650 --> 00:14:28.940
everything all happy for us. Some of
this were kind of mimicking some of the
152

153
00:14:28.940 --> 00:14:32.510
things that Hibernate is going to be
doing for us, so if we have unpersisted
153

154
00:14:32.510 --> 00:14:36.470
objects that are nested like this,
Hibernate inside of JPA and Hibernate, a
154

155
00:14:36.470 --> 00:14:40.820
lot of that will be taken care of for us.
We're going through a little extra hoops
155

156
00:14:40.820 --> 00:14:47.000
here because we are using HashMap so it
is up to us to implement that logic. So I
156

157
00:14:47.000 --> 00:14:50.930
think that is all good. I am going to
just rerun those. Make sure that we are
157

158
00:14:50.930 --> 00:14:54.970
not tossing any exceptions on startup.
158

159
00:15:01.820 --> 00:15:07.410
Alright! So everything loaded up
normally again. Come back over here.
159

160
00:15:07.410 --> 00:15:11.210
That was number 34.
160

161
00:15:11.600 --> 00:15:15.690
Come in here. Commit
that.
161

162
00:15:33.160 --> 00:15:37.110
That was number 34.
162

163
00:15:40.860 --> 00:15:47.150
Go ahead and commit that to GitHub and call
this one done.
