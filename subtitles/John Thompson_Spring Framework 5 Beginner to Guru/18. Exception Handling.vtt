WEBVTT
0
1
00:00:04.339 --> 00:00:09.929
Now in this video, we are gonna take a
look at handling exceptions and one
1

2
00:00:09.929 --> 00:00:13.650
thing that we weren't handling is if we
do something not found. So if we pass on
2

3
00:00:13.650 --> 00:00:19.230
an ID value that is not found, I had to do in
there to implement this. And so what I've
3

4
00:00:19.230 --> 00:00:24.750
done is I've created a ResourceNotFoundException and this is a custom
4

5
00:00:24.750 --> 00:00:28.859
exception class that we're gonna be
utilizing inside of our service. Now we
5

6
00:00:28.859 --> 00:00:34.770
want our controllers to return back a
404 error code. We wanna make sure
6

7
00:00:34.770 --> 00:00:41.579
that it returns back if not found.
So that does return back the 
7

8
00:00:41.579 --> 00:00:46.440
HttpStatus code of 404. So we want to make
sure that our controllers are doing that.
8

9
00:00:46.440 --> 00:00:51.809
One way we can do that is, this
is just like Spring MVC, all this is
9

10
00:00:51.809 --> 00:00:56.879
Spring MVC, but just like we did before,
we can add in ControllerAdvice.
10

11
00:00:56.879 --> 00:01:07.799
So let's come in here. And I'm gonna
create a new Java class. And now, we're
11

12
00:01:07.799 --> 00:01:13.110
gonna annotate it with @ControllerAdvice. So this is gonna get invoked
12

13
00:01:13.110 --> 00:01:19.500
when we have a problem. And actually,
We'll refactor this. Got a little typo
13

14
00:01:19.500 --> 00:01:34.100
there. And what we wanna do is add an
ExceptionHandler here.
14

15
00:01:46.500 --> 00:01:58.330
So adding in that, and we'll annotate
it to take in our ResourceNotFoundException.class.
15

16
00:01:58.330 --> 00:02:09.070
And one thing that we do wanna
do is also extend out in the Spring
16

17
00:02:09.070 --> 00:02:13.150
class ResponseEntityExceptionHandler.
And we'll go ahead and take a look at
17

18
00:02:13.150 --> 00:02:17.920
that. So this is a convenient base class
for us to leverage, and gives us a lot of
18

19
00:02:17.920 --> 00:02:23.890
out-of-the-box exception handling for
Spring MVC. So this is used internally to
19

20
00:02:23.890 --> 00:02:27.580
Spring. So we're just gonna
externalize that, and add on top of it,
20

21
00:02:27.580 --> 00:02:31.290
the things that we wanna provide.
21

22
00:02:50.700 --> 00:02:58.510
So pretty simple implementation there. So
now, let's go ahead and run our test. And
22

23
00:02:58.510 --> 00:03:07.180
we should see that those tests will pass
now. Now, we have this wired up and they
23

24
00:03:07.180 --> 00:03:28.930
did not pass all controllers. I
realized I forgot to add in. So now, we're
24

25
00:03:28.930 --> 00:03:33.670
gonna need to add that to both of them.
So this adds in the ExceptionHandler
25

26
00:03:33.670 --> 00:03:44.680
for us. I mean, I'm just gonna copy that
over. Now, let's go ahead and run these
26

27
00:03:44.680 --> 00:03:51.940
again. And we should see our test pass. So
we are all green there. Our handler is
27

28
00:03:51.940 --> 00:03:55.210
working properly. So let's go ahead and
start this up, and we'll take a look at
28

29
00:03:55.210 --> 00:04:05.490
it in Postman. I'm gonna start this
up. So let's go ahead and send that get.
29

30
00:04:05.490 --> 00:04:13.420
You can see that it's still functioning,
and let's do it get 55, and we still get
30

31
00:04:13.420 --> 00:04:19.239
an error. That is because we did not
implement that handler method in our
31

32
00:04:19.239 --> 00:04:26.260
services. So what's happening there is
we're returning back this value here.
32

33
00:04:26.260 --> 00:04:34.320
What we wanna do is make that a .. and we
can get rid of this to do.
33

34
00:04:41.100 --> 00:04:44.890
And I get DevTools installed. So I'm
doing a build and we can see that the
34

35
00:04:44.890 --> 00:04:49.840
Spring Context has restarted. Now let's
come over here to Postman. We'll send this
35

36
00:04:49.840 --> 00:04:54.820
again and now you can see that I am
getting back that Resource Not Found and
36

37
00:04:54.820 --> 00:04:59.980
a status of 404 Not Found. So
a much more friendly error message
37

38
00:04:59.980 --> 00:05:04.810
coming back for us. Now there's a couple
things I wanna point out here. In our
38

39
00:05:04.810 --> 00:05:09.490
handler, we saw that just returned back a
String. We could handle this a lot
39

40
00:05:09.490 --> 00:05:15.310
differently. We could provide a rich
JSON object for our use and provide the
40

41
00:05:15.310 --> 00:05:19.450
client more, and we'll probably do that
once we get to validation. I'll show you
41

42
00:05:19.450 --> 00:05:23.740
how to return back a more rich error
message to the client. But this is pretty
42

43
00:05:23.740 --> 00:05:28.480
simple. And there are several different
ways to handle this. We could have
43

44
00:05:28.480 --> 00:05:32.860
handled this through just us through the
controller itself by adding an exception
44

45
00:05:32.860 --> 00:05:38.410
handler to the controller. But in this
case, I want to add this in for both
45

46
00:05:38.410 --> 00:05:42.550
controllers. So now we have a single
ExceptionHandler, that's gonna handle
46

47
00:05:42.550 --> 00:05:47.880
either case for us. So it should work out
fairly nice for us.
