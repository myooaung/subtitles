WEBVTT
0
1
00:00:05.292 --> 00:00:06.939
<v Instructor>All right, what we want to do here</v>
1

2
00:00:06.939 --> 00:00:10.578
is revisit how we are loading our Bootstrap data.
2

3
00:00:10.578 --> 00:00:12.387
Right now, prior to this video,
3

4
00:00:12.387 --> 00:00:16.335
everything was going to be loaded through that Bootstrap.
4

5
00:00:16.335 --> 00:00:19.685
Running it, we have a unintended side effect.
5

6
00:00:19.685 --> 00:00:21.435
The recipes in the...
6

7
00:00:22.588 --> 00:00:25.023
in the Bootstrap class keep getting reloaded,
7

8
00:00:25.023 --> 00:00:27.587
and that's definitely an effect that we do not want.
8

9
00:00:27.587 --> 00:00:29.530
So we want to initialize that database
9

10
00:00:29.530 --> 00:00:32.535
with a lot of test data for our own use,
10

11
00:00:32.535 --> 00:00:35.914
but we don't want to do that in MySQL
11

12
00:00:35.914 --> 00:00:39.322
where that database is going to be persistent.
12

13
00:00:39.322 --> 00:00:42.423
We'll keep inserting data overtime,
13

14
00:00:42.423 --> 00:00:43.839
so I'm going to show you a couple different tools
14

15
00:00:43.839 --> 00:00:45.423
here that we can use.
15

16
00:00:45.423 --> 00:00:46.595
Now, the one thing that we want to do
16

17
00:00:46.595 --> 00:00:49.108
is set the datasource platform.
17

18
00:00:49.108 --> 00:00:53.275
I've added in a new application-default.properties.
18

19
00:00:54.590 --> 00:00:55.658
Just as a reminder,
19

20
00:00:55.658 --> 00:00:58.174
the profile default is active
20

21
00:00:58.174 --> 00:01:01.747
when there is no other profiles available.
21

22
00:01:01.747 --> 00:01:03.719
The way we've configure our application
22

23
00:01:03.719 --> 00:01:05.873
is MySQL gets activated when we set
23

24
00:01:05.873 --> 00:01:08.968
a dev profile or a prod profile.
24

25
00:01:08.968 --> 00:01:10.350
If we don't set a profile,
25

26
00:01:10.350 --> 00:01:12.230
then the H2 database kicks in
26

27
00:01:12.230 --> 00:01:16.194
and now I've added in an application-default.properties.
27

28
00:01:16.194 --> 00:01:18.541
Going back to the properties here,
28

29
00:01:18.541 --> 00:01:20.604
showing you how we can mix and match
29

30
00:01:20.604 --> 00:01:22.771
properties and yml files.
30

31
00:01:22.771 --> 00:01:27.571
In this case, I'm setting the datasource.platform to h2.
31

32
00:01:27.571 --> 00:01:32.028
Now, I've gone in and modified the yml configuration for
32

33
00:01:32.028 --> 00:01:36.699
the MySQL profiles to have a platform of mysql.
33

34
00:01:36.699 --> 00:01:40.354
You can see I'm also doing mysql here for the prod.
34

35
00:01:40.354 --> 00:01:41.736
This is important to set,
35

36
00:01:41.736 --> 00:01:43.503
and it kind of threw me off at first
36

37
00:01:43.503 --> 00:01:46.886
because the Spring documentation talks about setting
37

38
00:01:46.886 --> 00:01:49.273
the datasource platform and I thought it was implied
38

39
00:01:49.273 --> 00:01:51.523
based on this setting here.
39

40
00:01:52.408 --> 00:01:54.815
It's something that's easily confused.
40

41
00:01:54.815 --> 00:01:57.350
It did throw me for a loop at first,
41

42
00:01:57.350 --> 00:01:59.139
when I first started playing with this feature.
42

43
00:01:59.139 --> 00:02:00.656
I did make a mistake thinking that
43

44
00:02:00.656 --> 00:02:02.247
it was getting set by this
44

45
00:02:02.247 --> 00:02:05.448
or a bit getting implied by the database,
45

46
00:02:05.448 --> 00:02:08.637
but it's actually the spring.datasource.platform
46

47
00:02:08.637 --> 00:02:10.428
that is getting used.
47

48
00:02:10.428 --> 00:02:12.428
Now, the platform value.
48

49
00:02:13.541 --> 00:02:15.619
Remember, we were using Hibernate
49

50
00:02:15.619 --> 00:02:17.897
to do the inserts, SQL file.
50

51
00:02:17.897 --> 00:02:20.963
Actually, this is through Spring Boot.
51

52
00:02:20.963 --> 00:02:23.046
If we do dash datasource,
52

53
00:02:24.224 --> 00:02:25.886
the datasource.platform,
53

54
00:02:25.886 --> 00:02:28.211
if we do that dash value,
54

55
00:02:28.211 --> 00:02:30.906
now this will get picked up for the H2 databases,
55

56
00:02:30.906 --> 00:02:33.823
and I could create a data-mysql.sql
56

57
00:02:35.578 --> 00:02:37.692
and have inserts for the MySQL platform,
57

58
00:02:37.692 --> 00:02:41.667
but that's a behavior that I do not want.
58

59
00:02:41.667 --> 00:02:45.300
I'm also configuring our Bootstrap classes here.
59

60
00:02:45.300 --> 00:02:48.478
Now we are changing this original Bootstrap class
60

61
00:02:48.478 --> 00:02:50.620
to be active with the default profile.
61

62
00:02:50.620 --> 00:02:54.196
Again, that's going to be going with the H2 database.
62

63
00:02:54.196 --> 00:02:57.101
But obviously, we don't want to initialize all this data
63

64
00:02:57.101 --> 00:02:58.768
in MySQL every time.
64

65
00:02:59.685 --> 00:03:01.614
I created another one here,
65

66
00:03:01.614 --> 00:03:03.804
but this time I'm using Profile "dev" and "prod",
66

67
00:03:03.804 --> 00:03:06.009
so if either one of those are active,
67

68
00:03:06.009 --> 00:03:07.758
this component will get wired in
68

69
00:03:07.758 --> 00:03:10.082
and listen for the context startup.
69

70
00:03:10.082 --> 00:03:12.150
What I'm doing here
70

71
00:03:12.150 --> 00:03:15.127
is I want to initialize some of this reference data
71

72
00:03:15.127 --> 00:03:17.037
so the categories and UOMs,
72

73
00:03:17.037 --> 00:03:18.255
the unit of measures.
73

74
00:03:18.255 --> 00:03:21.162
I want to initialize those if they are missing.
74

75
00:03:21.162 --> 00:03:22.626
This is something pretty common to do
75

76
00:03:22.626 --> 00:03:25.111
where you can set up some default properties
76

77
00:03:25.111 --> 00:03:26.609
in an application.
77

78
00:03:26.609 --> 00:03:29.472
Let me show you how this runs altogether.
78

79
00:03:29.472 --> 00:03:30.722
I come up here.
79

80
00:03:32.496 --> 00:03:33.996
Let's delete this.
80

81
00:03:35.096 --> 00:03:37.780
I'm going to run with the "no profiles active"
81

82
00:03:37.780 --> 00:03:40.607
which will enable the default profile.
82

83
00:03:40.607 --> 00:03:42.774
I'm going to start it up now.
83

84
00:03:46.387 --> 00:03:47.470
We can see...
84

85
00:03:48.422 --> 00:03:51.448
Nope, we didn't get our inserts.
85

86
00:03:51.448 --> 00:03:52.928
Actually, here we go.
86

87
00:03:52.928 --> 00:03:55.660
The SQL logging wasn't enable for some reason,
87

88
00:03:55.660 --> 00:03:57.535
but we are loading the Bootstrap data
88

89
00:03:57.535 --> 00:04:00.519
so it comes out of the recipe Bootstrap.
89

90
00:04:00.519 --> 00:04:03.389
We can see here that that's that log message.
90

91
00:04:03.389 --> 00:04:05.005
We did go through
91

92
00:04:05.005 --> 00:04:07.109
our Bootstrap class with the default profiles,
92

93
00:04:07.109 --> 00:04:09.975
so now let's go ahead and stop this.
93

94
00:04:09.975 --> 00:04:12.475
I want to show you the database.
94

95
00:04:13.749 --> 00:04:15.607
Now, let's take a look at this.
95

96
00:04:15.607 --> 00:04:17.056
Here's my dev database.
96

97
00:04:17.056 --> 00:04:18.753
I have unit of measures,
97

98
00:04:18.753 --> 00:04:22.079
and let's go ahead and delete these.
98

99
00:04:22.079 --> 00:04:24.282
I'm going to go ahead and delete those rows so that
99

100
00:04:24.282 --> 00:04:27.341
we don't have any unit measures, but we'll have categories.
100

101
00:04:27.341 --> 00:04:29.243
We'll leave those there, alive.
101

102
00:04:29.243 --> 00:04:31.527
Now, let's come back over to IntelliJ.
102

103
00:04:31.527 --> 00:04:33.106
We'll stop Spring Boot.
103

104
00:04:33.106 --> 00:04:34.413
Oh, did I already stop it?
104

105
00:04:34.413 --> 00:04:35.828
Yup.
105

106
00:04:35.828 --> 00:04:39.080
Now, we can come in Edit Configurations
106

107
00:04:39.080 --> 00:04:42.330
and I want to set the dev profile active.
107

108
00:04:43.438 --> 00:04:44.271
Apply, OK.
108

109
00:04:45.506 --> 00:04:48.089
Now, let's run the application.
109

110
00:04:49.809 --> 00:04:53.138
Now we can see that we did a select count from category
110

111
00:04:53.138 --> 00:04:55.153
and a select count from unit of measure.
111

112
00:04:55.153 --> 00:04:58.623
That unit of measure came back to zero,
112

113
00:04:58.623 --> 00:05:01.621
so we loaded up the unit of measure.
113

114
00:05:01.621 --> 00:05:03.737
Now let's take a quick look here.
114

115
00:05:03.737 --> 00:05:05.240
Now we have unit of measure,
115

116
00:05:05.240 --> 00:05:06.960
and those rows are now back in there.
116

117
00:05:06.960 --> 00:05:08.982
We can see that the ID value
117

118
00:05:08.982 --> 00:05:11.122
has been incrementing because I deleted it,
118

119
00:05:11.122 --> 00:05:13.414
and we're using the auto-increment field in MySQL
119

120
00:05:13.414 --> 00:05:16.001
so that they'll keep going up.
120

121
00:05:16.001 --> 00:05:20.168
We can also see that we did not load any recipe data.
121

122
00:05:21.336 --> 00:05:22.817
All that is still blank,
122

123
00:05:22.817 --> 00:05:25.739
but our reference data for the unit of measure
123

124
00:05:25.739 --> 00:05:27.822
has been loaded properly.
124

125
00:05:29.281 --> 00:05:31.536
Just to recap here again,
125

126
00:05:31.536 --> 00:05:33.032
we can set up data.
126

127
00:05:33.032 --> 00:05:34.769
I'm showing you several techniques here,
127

128
00:05:34.769 --> 00:05:37.220
so we can set up a data-
128

129
00:05:37.220 --> 00:05:39.637
and then the datasource name.
129

130
00:05:40.546 --> 00:05:42.518
I mean datasource.platform.
130

131
00:05:42.518 --> 00:05:44.864
Sorry to be causing confusion there.
131

132
00:05:44.864 --> 00:05:46.864
These terminologies are really close,
132

133
00:05:46.864 --> 00:05:49.929
but it is spring.datasource.platform
133

134
00:05:49.929 --> 00:05:53.429
that is going to be working with the data-h2.
134

135
00:05:55.255 --> 00:06:00.187
We're controlling the rest of it with active profiles.
135

136
00:06:00.187 --> 00:06:03.870
These are a couple important things and actually,
136

137
00:06:03.870 --> 00:06:05.037
let's go here.
137

138
00:06:07.939 --> 00:06:11.439
I want to enable show-sql, so that Spring...
138

139
00:06:13.061 --> 00:06:16.978
So in the default, let's go ahead and add that.
139

140
00:06:18.619 --> 00:06:20.123
The default is false.
140

141
00:06:20.123 --> 00:06:22.987
Let's go ahead and change that to true.
141

142
00:06:22.987 --> 00:06:26.877
I'm going to stop this here and rerun it with the h2
142

143
00:06:26.877 --> 00:06:29.379
because I'm editing in the default profiles.
143

144
00:06:29.379 --> 00:06:33.546
We'll Edit Configurations, let's go ahead and remove dev.
144

145
00:06:34.538 --> 00:06:35.371
Apply, OK.
145

146
00:06:36.702 --> 00:06:38.468
Now with the H2 database,
146

147
00:06:38.468 --> 00:06:41.468
we should be getting the SQL output.
147

148
00:06:44.599 --> 00:06:48.257
Now we can see we have a lot more insert activity.
148

149
00:06:48.257 --> 00:06:50.691
This is something I like to leave on,
149

150
00:06:50.691 --> 00:06:53.008
generally in my development environments
150

151
00:06:53.008 --> 00:06:54.947
so you can keep an eye on what's going on with Hibernate
151

152
00:06:54.947 --> 00:06:57.351
because Hibernate will do some weird things sometimes,
152

153
00:06:57.351 --> 00:07:00.254
but now I can see exactly the SQL statements
153

154
00:07:00.254 --> 00:07:02.486
are being issued against the database.
154

155
00:07:02.486 --> 00:07:04.784
You can see the question marks here,
155

156
00:07:04.784 --> 00:07:06.752
and those are bind parameters.
156

157
00:07:06.752 --> 00:07:09.252
You'll need to enable some additional debug
157

158
00:07:09.252 --> 00:07:11.490
logging if you want to get those bind parameters,
158

159
00:07:11.490 --> 00:07:14.101
but this does show you what's happening
159

160
00:07:14.101 --> 00:07:16.545
inside of Hibernate in the database.
160

161
00:07:16.545 --> 00:07:18.454
Pretty handy to keep with you
161

162
00:07:18.454 --> 00:07:20.721
or keep enabled while you're in development,
162

163
00:07:20.721 --> 00:07:22.988
just to keep an eye on what Hibernate is doing.
163

164
00:07:22.988 --> 00:07:26.218
It's very, very easy when you're working with Hibernate
164

165
00:07:26.218 --> 00:07:29.246
to accidentally create a n+1 query where you're
165

166
00:07:29.246 --> 00:07:32.663
issuing a select for a rerecord in a set.
166

167
00:07:33.841 --> 00:07:37.109
It's definitely a behavior you do not want.
167

168
00:07:37.109 --> 00:07:38.827
I've seen a lot of times where Hibernate
168

169
00:07:38.827 --> 00:07:41.265
just gets misconfigured a little bit,
169

170
00:07:41.265 --> 00:07:43.222
and it's doing these n+1 queries
170

171
00:07:43.222 --> 00:07:45.500
and it just kills your performance.
171

172
00:07:45.500 --> 00:07:49.500
So that is a little pro tip that I have for you.
