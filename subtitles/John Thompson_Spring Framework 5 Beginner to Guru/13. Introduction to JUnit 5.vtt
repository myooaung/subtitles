WEBVTT
0
1
00:00:01.230 --> 00:00:05.910
Alright! In this video, we are gonna take
1

2
00:00:03.570 --> 00:00:08.069
a look at JUnit 5. We're going to get you
2

3
00:00:05.910 --> 00:00:10.379
guys introduced to that. Now JUnit 5
3

4
00:00:08.069 --> 00:00:13.589
originally started as a project called
4

5
00:00:10.379 --> 00:00:16.350
JUnit Lambda. This was a source through a
5

6
00:00:13.589 --> 00:00:19.560
crowdfunding campaign started on mid 2015.
6

7
00:00:16.350 --> 00:00:21.660
They raised about â‚¬54,000  for it.
7

8
00:00:19.560 --> 00:00:24.060
They have a number of corporate
8

9
00:00:21.660 --> 00:00:25.860
sponsors and, notably Pivotal and
9

10
00:00:24.060 --> 00:00:27.540
American Express were involved in the
10

11
00:00:25.860 --> 00:00:30.390
initial development of it. The first
11

12
00:00:27.540 --> 00:00:33.810
general availability release was made
12

13
00:00:30.390 --> 00:00:36.180
September 10, 2017 considering that it's
13

14
00:00:33.810 --> 00:00:38.760
not even a year later. JUnit 5 is still
14

15
00:00:36.180 --> 00:00:41.070
fairly new to the marketplace. They've
15

16
00:00:38.760 --> 00:00:43.200
had a couple other interim releases, but
16

17
00:00:41.070 --> 00:00:46.110
the first general available release was
17

18
00:00:43.200 --> 00:00:47.790
made in September 10th 2017. They did
18

19
00:00:46.110 --> 00:00:50.430
have some milestone releases and stuff
19

20
00:00:47.790 --> 00:00:52.760
going up to that but the GA releases
20

21
00:00:50.430 --> 00:00:55.560
really the go to production type release.
21

22
00:00:52.760 --> 00:00:58.860
Now you might be wondering why JUnit 5.
22

23
00:00:55.560 --> 00:01:00.960
JUnit 4 is widely very very
23

24
00:00:58.860 --> 00:01:02.040
popular, one of the most popular Java
24

25
00:01:00.960 --> 00:01:04.589
libraries out there
25

26
00:01:02.040 --> 00:01:06.600
I think if not the most popular based on
26

27
00:01:04.589 --> 00:01:08.819
download metrics and usage
27

28
00:01:06.600 --> 00:01:12.810
statistics. It was originally released
28

29
00:01:08.819 --> 00:01:15.509
back in February of 2006. If you look
29

30
00:01:12.810 --> 00:01:18.719
back, Java 6 was released in December of
30

31
00:01:15.509 --> 00:01:21.359
2006. So it came out on Java 5 and that
31

32
00:01:18.719 --> 00:01:23.670
was really kind of the original release
32

33
00:01:21.359 --> 00:01:24.929
of that. So it was tied to that, these
33

34
00:01:23.670 --> 00:01:27.509
older versions of Java.
34

35
00:01:24.929 --> 00:01:29.219
There was about 12 minor releases since
35

36
00:01:27.509 --> 00:01:32.549
then where they did add additional
36

37
00:01:29.219 --> 00:01:35.130
functionality to JUnit 4. But obviously,
37

38
00:01:32.549 --> 00:01:38.729
since Java 5, there's been quite a few
38

39
00:01:35.130 --> 00:01:40.289
changes to the Java language, so the
39

40
00:01:38.729 --> 00:01:42.119
language had evolved but our testing
40

41
00:01:40.289 --> 00:01:43.920
tool really had not. I do you wanna point
41

42
00:01:42.119 --> 00:01:48.060
out at this point in time, I'm recording
42

43
00:01:43.920 --> 00:01:49.469
this in August of 2018, JUnit 4 is
43

44
00:01:48.060 --> 00:01:51.959
definitely the de facto standard for
44

45
00:01:49.469 --> 00:01:53.939
Java unit testing. It's widely used
45

46
00:01:51.959 --> 00:01:55.380
everywhere. There's other testing
46

47
00:01:53.939 --> 00:01:56.700
frameworks. I'm not gonna get into an
47

48
00:01:55.380 --> 00:01:59.490
argument about which is better in their
48

49
00:01:56.700 --> 00:02:02.759
merits. Just from the marketplace, JUnit 4
49

50
00:01:59.490 --> 00:02:05.219
has a significant lead over any other
50

51
00:02:02.759 --> 00:02:07.560
testing framework. So if you're going out
51

52
00:02:05.219 --> 00:02:09.269
into the workplace even today, you're
52

53
00:02:07.560 --> 00:02:10.479
probably gonna see a lot of JUnit 4 out
53

54
00:02:09.269 --> 00:02:13.360
there.
54

55
00:02:10.479 --> 00:02:15.190
Now, going along why they did that, they
55

56
00:02:13.360 --> 00:02:18.220
wanted to take JUnit 5 and allow it to
56

57
00:02:15.190 --> 00:02:20.739
leverage new features of Java 8 such as
57

58
00:02:18.220 --> 00:02:24.010
Lambda Expression, Streams and they've
58

59
00:02:20.739 --> 00:02:25.720
actually made Java 8 or higher required
59

60
00:02:24.010 --> 00:02:27.970
so we're kind of cutting the baggage of
60

61
00:02:25.720 --> 00:02:31.480
these old Java releases. Much like Spring
61

62
00:02:27.970 --> 00:02:33.880
5. Spring 5 requires Java 8 or higher. So
62

63
00:02:31.480 --> 00:02:36.160
these requirements allow a lot of
63

64
00:02:33.880 --> 00:02:38.860
flexibility so you're not required to
64

65
00:02:36.160 --> 00:02:40.299
maintain backwards compatibility, so very
65

66
00:02:38.860 --> 00:02:41.910
important for a large framework like
66

67
00:02:40.299 --> 00:02:44.230
this. We're seeing more and more
67

68
00:02:41.910 --> 00:02:45.459
frameworks put a stake in the ground
68

69
00:02:44.230 --> 00:02:47.830
saying that we are only gonna
69

70
00:02:45.459 --> 00:02:49.480
support Java 8 or higher. A pretty common
70

71
00:02:47.830 --> 00:02:51.220
thing in the Java industry right now so
71

72
00:02:49.480 --> 00:02:53.799
I don't blame them for doing that.
72

73
00:02:51.220 --> 00:02:56.590
Now, one of the things that they provided in
73

74
00:02:53.799 --> 00:02:59.079
JUnit 5 is they wanna design it for
74

75
00:02:56.590 --> 00:03:01.840
better integration and extensibility. So
75

76
00:02:59.079 --> 00:03:04.390
you're gonna see more extensions to it
76

77
00:03:01.840 --> 00:03:06.459
as well as IDE compatibility so there's
77

78
00:03:04.390 --> 00:03:10.269
some nice hooks in there. The IDE
78

79
00:03:06.459 --> 00:03:12.370
manufacturers can hook into. Now, one of
79

80
00:03:10.269 --> 00:03:15.130
the features of JUnit 5 is an Optional
80

81
00:03:12.370 --> 00:03:17.920
library called JUnit Vintage. This
81

82
00:03:15.130 --> 00:03:21.459
library will allow you to run both
82

83
00:03:17.920 --> 00:03:24.579
JUnit 3 and JUnit 4 tests using the
83

84
00:03:21.459 --> 00:03:26.139
JUnit 5 Runner. So this is kind of
84

85
00:03:24.579 --> 00:03:29.859
designed to give you a migration path
85

86
00:03:26.139 --> 00:03:32.859
because in the industry, JUnit 4 and 3
86

87
00:03:29.859 --> 00:03:34.690
were widely popular and let's face it
87

88
00:03:32.859 --> 00:03:36.730
there's a lot of legacy code out there.
88

89
00:03:34.690 --> 00:03:38.230
You might be updating your code and you
89

90
00:03:36.730 --> 00:03:41.170
don't wanna have to go in and update
90

91
00:03:38.230 --> 00:03:43.870
all your existing tests to JUnit 5. So
91

92
00:03:41.170 --> 00:03:45.670
the JUnit Vintage allows an easy
92

93
00:03:43.870 --> 00:03:48.670
migration to JUnit 5 so this very
93

94
00:03:45.670 --> 00:03:51.900
important feature that will help people
94

95
00:03:48.670 --> 00:03:53.159
adopt the new version of JUnit.
95

96
00:03:51.900 --> 00:03:56.580
Now some very important differences
96

97
00:03:53.159 --> 00:03:58.200
between the two. In JUnit 4, if you're
97

98
00:03:56.580 --> 00:04:00.860
not familiar with it, you will see this
98

99
00:03:58.200 --> 00:04:03.390
coming up in the course. You can do @Test
99

100
00:04:00.860 --> 00:04:05.640
expected and give it an exception class.
100

101
00:04:03.390 --> 00:04:08.730
That is in the @Test annotation that is
101

102
00:04:05.640 --> 00:04:11.610
now gone away. Inside of a JUnit 5,
102

103
00:04:08.730 --> 00:04:14.849
you have an assertion of assertThrows,
103

104
00:04:11.610 --> 00:04:16.260
so you expect that same a timeout that
104

105
00:04:14.849 --> 00:04:18.720
was also an attribute of the @Test
105

106
00:04:16.260 --> 00:04:21.359
annotation. No longer the case in JUnit 5,
106

107
00:04:18.720 --> 00:04:23.699
you now have an assertion. Yet
107

108
00:04:21.359 --> 00:04:26.400
the way you set up Spring, remember
108

109
00:04:23.699 --> 00:04:28.530
Spring has its own class runner. You'd
109

110
00:04:26.400 --> 00:04:30.449
use a @RunWith annotation, so you're
110

111
00:04:28.530 --> 00:04:33.300
gonna run with a special test runner for
111

112
00:04:30.449 --> 00:04:35.220
it, Here  in JUnit 5, that
112

113
00:04:33.300 --> 00:04:37.380
annotation now becomes @ExtendWith.
113

114
00:04:35.220 --> 00:04:40.229
There's a couple other changes to the
114

115
00:04:37.380 --> 00:04:42.720
annotations that are used. So, in JUnit 4,
115

116
00:04:40.229 --> 00:04:45.840
we have @Before, so that is expected
116

117
00:04:42.720 --> 00:04:48.000
to run before each test method. Now, in
117

118
00:04:45.840 --> 00:04:50.729
JUnit 5, that becomes @BeforeEach, then
118

119
00:04:48.000 --> 00:04:52.650
@After and @AfterEach. Same effects. Both
119

120
00:04:50.729 --> 00:04:56.039
of those are gonna be before after each
120

121
00:04:52.650 --> 00:04:58.500
test method. Now we had a Before
121

122
00:04:56.039 --> 00:05:01.919
class and After class. That becomes
122

123
00:04:58.500 --> 00:05:04.200
@BeforeAll and @AfterAll inside of JUnit 5
123

124
00:05:01.919 --> 00:05:06.810
And then next, I actually got
124

125
00:05:04.200 --> 00:05:09.360
caught by this one. JUnit 4, just
125

126
00:05:06.810 --> 00:05:12.150
recently, they switch @Ignored to @Disabled.
126

127
00:05:09.360 --> 00:05:14.190
So I was trying to ignore a test and I
127

128
00:05:12.150 --> 00:05:16.110
kept running in. I was using JUnit 5. Like
128

129
00:05:14.190 --> 00:05:17.940
why am I keep running? So
129

130
00:05:16.110 --> 00:05:19.979
something that throw the wrench in, so
130

131
00:05:17.940 --> 00:05:21.660
it works for me. JUnit 4 also has a
131

132
00:05:19.979 --> 00:05:23.699
very powerful tool called Category. It
132

133
00:05:21.660 --> 00:05:25.410
allows you to categorize your tests and
133

134
00:05:23.699 --> 00:05:28.910
allows you to run them in groups. That
134

135
00:05:25.410 --> 00:05:32.460
has evolved to tags inside of JUnit 5.
135

136
00:05:28.910 --> 00:05:34.410
Now ahead in this course, most of the
136

137
00:05:32.460 --> 00:05:36.780
Spring Framework 5 Beginner to Guru
137

138
00:05:34.410 --> 00:05:39.810
course was developed using JUnit 4.
138

139
00:05:36.780 --> 00:05:41.280
Mainly because JUnit 4 was what was
139

140
00:05:39.810 --> 00:05:43.199
out at the time that bulk of the
140

141
00:05:41.280 --> 00:05:45.810
development occurred. JUnit 4 is
141

142
00:05:43.199 --> 00:05:48.180
still very popular. There's definitely a
142

143
00:05:45.810 --> 00:05:50.729
ton of legacy code using JUnit 4. Now
143

144
00:05:48.180 --> 00:05:52.740
I'm introducing JUnit 5 in the
144

145
00:05:50.729 --> 00:05:54.030
Spring Pet Clinic Project because it
145

146
00:05:52.740 --> 00:05:57.120
is getting out there in the marketplace
146

147
00:05:54.030 --> 00:06:00.090
and for the foreseeable future,
147

148
00:05:57.120 --> 00:06:01.680
again this is August 2018, I think you're
148

149
00:06:00.090 --> 00:06:03.659
gonna see both in the marketplace.
149

150
00:06:01.680 --> 00:06:05.150
There's just a lot of people comfortable with
150

151
00:06:03.659 --> 00:06:07.040
JUnit 4. It's a
151

152
00:06:05.150 --> 00:06:08.630
great tool so I can't knock them for
152

153
00:06:07.040 --> 00:06:10.730
that. JUnit 5 does bring some new
153

154
00:06:08.630 --> 00:06:13.190
capabilities, but the Java community can
154

155
00:06:10.730 --> 00:06:15.290
be slow to adapt, so I think for the next
155

156
00:06:13.190 --> 00:06:17.510
few years, you're gonna see JUnit 4
156

157
00:06:15.290 --> 00:06:19.850
continue to get used by a lot of people
157

158
00:06:17.510 --> 00:06:23.440
but you will start seeing people adapt
158

159
00:06:19.850 --> 00:06:25.820
JUnit 5. Now coming up, I am
159

160
00:06:23.440 --> 00:06:27.890
considering developing a specialized
160

161
00:06:25.820 --> 00:06:30.800
testing course to do a really deep dive.
161

162
00:06:27.890 --> 00:06:33.290
In this course here, I am focused on
162

163
00:06:30.800 --> 00:06:36.260
Spring Framework 5 not testing. I do
163

164
00:06:33.290 --> 00:06:38.450
introduce it but these are things that I
164

165
00:06:36.260 --> 00:06:40.280
could do a whole course on. I'm actually
165

166
00:06:38.450 --> 00:06:42.560
thinking about a very deep dive course
166

167
00:06:40.280 --> 00:06:45.470
go into these tool sets like JUnit
167

168
00:06:42.560 --> 00:06:47.390
4 and 5,  Mockito. I have not used
168

169
00:06:45.470 --> 00:06:50.210
Spock in this course but I am a huge
169

170
00:06:47.390 --> 00:06:53.420
Spock fan. That does take a little groovy
170

171
00:06:50.210 --> 00:06:55.850
foo but Spock is a great testing tool
171

172
00:06:53.420 --> 00:06:57.680
and then there's a really new project
172

173
00:06:55.850 --> 00:06:59.990
out called Test Containers that allows
173

174
00:06:57.680 --> 00:07:02.900
you to write from your JUnit test,
174

175
00:06:59.990 --> 00:07:04.670
add-in dependencies on Docker Containers
175

176
00:07:02.900 --> 00:07:06.410
and how you execute and work with those
176

177
00:07:04.670 --> 00:07:09.050
so you can run some pretty
177

178
00:07:06.410 --> 00:07:10.280
interesting integration tests. If
178

179
00:07:09.050 --> 00:07:11.840
this is a course that you would like to
179

180
00:07:10.280 --> 00:07:13.640
see, I'm pretty sure I'm gonna do
180

181
00:07:11.840 --> 00:07:15.830
this course but I think this would be a
181

182
00:07:13.640 --> 00:07:17.240
fun course and very valuable course. If its
182

183
00:07:15.830 --> 00:07:18.920
something you'd like to see, please leave
183

184
00:07:17.240 --> 00:07:20.630
a comment here so I can gauge your
184

185
00:07:18.920 --> 00:07:23.450
interest. I think this would be a lot of
185

186
00:07:20.630 --> 00:07:25.370
fun to do. So coming up, JUnit 4, it's
186

187
00:07:23.450 --> 00:07:28.070
gonna be used in the regular course.
187

188
00:07:25.370 --> 00:07:29.690
In the Spring Pet Clinic, in the next few
188

189
00:07:28.070 --> 00:07:31.700
videos, I'm gonna start setting up JUnit 5.
189

190
00:07:29.690 --> 00:07:35.690
So in this course, you'll get a chance
190

191
00:07:31.700 --> 00:07:38.330
to see both JUnit 4 and 5 and you'll
191

192
00:07:35.690 --> 00:07:41.140
also see Mockito used as well. So, a lot
192

193
00:07:38.330 --> 00:07:41.140
of fun stuff coming up.
