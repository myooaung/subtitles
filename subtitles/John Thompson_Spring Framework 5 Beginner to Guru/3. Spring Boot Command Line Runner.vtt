WEBVTT
0
1
00:00:04.130 --> 00:00:08.940
Alright. In the last video, you saw that
my build was failing. It is now passing.
1

2
00:00:08.940 --> 00:00:13.320
What happened was, I forgot to include
the @Entity annotation here. So the
2

3
00:00:13.320 --> 00:00:17.250
context was failing on us. I wanted to
let you know that. Now in this video, we
3

4
00:00:17.250 --> 00:00:22.140
wanna go in and start populating our
database with some data. And what we can
4

5
00:00:22.140 --> 00:00:28.619
do is, I like to use, I steal this right
from the Grails guys, I'm gonna create a
5

6
00:00:28.619 --> 00:00:36.739
directory called bootstrap.
Let's add a Bootstrap class, and
6

7
00:00:36.739 --> 00:00:42.360
what we wanna do is a couple different
things here. We wanna inject the
7

8
00:00:42.360 --> 00:00:54.480
repository. We'll add in a constructor so
that gets autowired in. And what we are
8

9
00:00:54.480 --> 00:01:00.800
gonna do is I showed you how to use
Spring events before. We are going to
9

10
00:01:00.949 --> 00:01:06.000
this is a Spring Boot class CommandLineRunner. We are gonna go ahead and
10

11
00:01:06.000 --> 00:01:14.700
implement that. And we're gonna say
Implement Methods. And before, I showed
11

12
00:01:14.700 --> 00:01:19.890
you how to load data using Spring Events,
a Context initialization event. Now,
12

13
00:01:19.890 --> 00:01:23.970
CommandRunner is a Spring Boot specific
class of this. So I'm only gonna work
13

14
00:01:23.970 --> 00:01:27.840
on a Spring Boot. The other method I
showed you using events will work
14

15
00:01:27.840 --> 00:01:32.100
without Spring Boot. But this is gonna
be Spring Boot specific, and this class
15

16
00:01:32.100 --> 00:01:37.650
gets called on startup and any arguments,
that have been passed into the JVM will
16

17
00:01:37.650 --> 00:01:42.240
also get picked up here. But we don't
need that. What I'm gonna do is load
17

18
00:01:42.240 --> 00:01:46.740
up some classes. I'm gonna pause the
video one second and I'll show you that.
18

19
00:01:46.740 --> 00:01:52.920
It may pause it while I type out that
and I'll be right back. Okay. Jumped out a
19

20
00:01:52.920 --> 00:01:59.090
little bit and let's go ahead and use
the repository to save these.
20

21
00:01:59.090 --> 00:02:02.840
yeah let's here fruits.
21

22
00:02:05.670 --> 00:02:16.310
I would say if the fruits, dried. Shut, I'm
not making this stuff up. It's from that
22

23
00:02:16.310 --> 00:02:25.739
API that we're working with. Fix this one
little typo here. And just to remind you,
23

24
00:02:25.739 --> 00:02:30.480
so this is a data of the categories up
from that API that we're recreating that
24

25
00:02:30.480 --> 00:02:44.120
gives us these different values here to
work with. And now, let's do Data Loaded.
25

26
00:02:44.120 --> 00:02:51.959
And say categoryRepository count.
They'll get counted records. And now, if
26

27
00:02:51.959 --> 00:02:57.209
we come over here and start our Spring
MVC Application, we should see Data
27

28
00:02:57.209 --> 00:03:04.980
Loaded. What is that? Five five
records? And we did not. And that is
28

29
00:03:04.980 --> 00:03:12.900
because I forgot this. Build the
project. Actually, kick in the dev tools.
29

30
00:03:12.900 --> 00:03:19.530
And there it is. So again, this is using a
Spring Boot class CommandLineRunner.
30

31
00:03:19.530 --> 00:03:25.320
Just as a reminder, this is a Spring Boot
specific class, which allows us to run
31

32
00:03:25.320 --> 00:03:30.540
application code on startup. And in this
video, I wanna have this data here in
32

33
00:03:30.540 --> 00:03:33.930
our database, so when we call the
repository, we have something to return
33

34
00:03:33.930 --> 00:03:37.430
for our API calls.
