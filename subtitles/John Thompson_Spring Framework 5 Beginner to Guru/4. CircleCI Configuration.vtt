WEBVTT
0
1
00:00:05.112 --> 00:00:08.301
Now if you looked at the repository for this,
1

2
00:00:08.301 --> 00:00:10.915
you'll notice that I've already setup CircleCI.
2

3
00:00:10.915 --> 00:00:13.270
You even get the little passing badge here
3

4
00:00:13.270 --> 00:00:15.507
saying that it did pass test.
4

5
00:00:15.507 --> 00:00:18.656
Let's take a look at the configuration for that
5

6
00:00:18.656 --> 00:00:21.656
as we are using the new CircleCI 2.0
6

7
00:00:22.769 --> 00:00:25.116
and that has been configured here.
7

8
00:00:25.116 --> 00:00:25.949
It's a little bit different
8

9
00:00:25.949 --> 00:00:28.237
than the Maven configuration.
9

10
00:00:28.237 --> 00:00:30.040
Going in, let me hide this so we can see
10

11
00:00:30.040 --> 00:00:32.040
the full YAML file here.
11

12
00:00:33.417 --> 00:00:36.515
This is the CircleCI configuration
12

13
00:00:36.515 --> 00:00:39.265
and the first thing we do is on line 10 there,
13

14
00:00:39.265 --> 00:00:42.834
we're saying take it from a circleci/openjdk image.
14

15
00:00:42.834 --> 00:00:45.252
That's a Docker image that CircleCI is using
15

16
00:00:45.252 --> 00:00:47.771
under the covers that's pre-configured for us
16

17
00:00:47.771 --> 00:00:49.229
and it's gonna have a lot of the build tools
17

18
00:00:49.229 --> 00:00:50.062
that we're gonna be using
18

19
00:00:50.062 --> 00:00:52.775
so I imagine it has Maven and Gradle
19

20
00:00:52.775 --> 00:00:54.984
installed on that image.
20

21
00:00:54.984 --> 00:00:57.982
Now, we can see down on line 19,
21

22
00:00:57.982 --> 00:01:00.488
we're setting up the JVM environment
22

23
00:01:00.488 --> 00:01:01.880
and we are giving it actually
23

24
00:01:01.880 --> 00:01:04.683
a good chunk of memory there.
24

25
00:01:04.683 --> 00:01:06.136
I took this from their example,
25

26
00:01:06.136 --> 00:01:07.500
so the term dumb,
26

27
00:01:07.500 --> 00:01:09.104
I'm not quite sure why that is there,
27

28
00:01:09.104 --> 00:01:10.637
but it's setting up a dumb terminal.
28

29
00:01:10.637 --> 00:01:12.689
It's probably something that they found.
29

30
00:01:12.689 --> 00:01:13.654
I've tried it without it,
30

31
00:01:13.654 --> 00:01:14.721
it runs fine.
31

32
00:01:14.721 --> 00:01:16.174
But it's probably there just in case
32

33
00:01:16.174 --> 00:01:18.183
for a more complex type thing.
33

34
00:01:18.183 --> 00:01:21.234
Now, we can also see there on line 27,
34

35
00:01:21.234 --> 00:01:23.549
it is caching the dependencies.
35

36
00:01:23.549 --> 00:01:27.243
This sets up a cache with inside a CircleCI.
36

37
00:01:27.243 --> 00:01:30.514
Between the builds, it's gonna restore the dependency
37

38
00:01:30.514 --> 00:01:32.982
cache so it's not going out and downloading that.
38

39
00:01:32.982 --> 00:01:34.197
If you ever watch,
39

40
00:01:34.197 --> 00:01:36.307
If you ever delete your Maven home,
40

41
00:01:36.307 --> 00:01:37.712
and your .m2,
41

42
00:01:37.712 --> 00:01:38.770
the first time that you build
42

43
00:01:38.770 --> 00:01:39.836
is gonna take some time
43

44
00:01:39.836 --> 00:01:41.398
because all those jars
44

45
00:01:41.398 --> 00:01:42.251
and it's gonna go out there
45

46
00:01:42.251 --> 00:01:44.193
and download quite a bit of data.
46

47
00:01:44.193 --> 00:01:46.386
That can definitely speed up.
47

48
00:01:46.386 --> 00:01:48.857
We go out and get the Gradle dependencies
48

49
00:01:48.857 --> 00:01:50.370
on line 34 there
49

50
00:01:50.370 --> 00:01:52.551
and we save that cache.
50

51
00:01:52.551 --> 00:01:55.606
Then, the next thing there, on line 42,
51

52
00:01:55.606 --> 00:01:57.522
is we're doing a clean test
52

53
00:01:57.522 --> 00:02:00.952
jacocoTestReport, I'm gonna get into
53

54
00:02:00.952 --> 00:02:02.020
in the next video,
54

55
00:02:02.020 --> 00:02:03.799
that is for the test coverage.
55

56
00:02:03.799 --> 00:02:05.216
Then, on line 44,
56

57
00:02:06.521 --> 00:02:08.456
we are gonna be saving the test results
57

58
00:02:08.456 --> 00:02:11.872
so that we can store those test results there.
58

59
00:02:11.872 --> 00:02:13.023
Toggle back over here
59

60
00:02:13.023 --> 00:02:15.258
and we can take a look at it.
60

61
00:02:15.258 --> 00:02:16.430
In CircleCI we can see
61

62
00:02:16.430 --> 00:02:18.292
that I do have this setup,
62

63
00:02:18.292 --> 00:02:20.753
in our mongo-recipe-app.
63

64
00:02:20.753 --> 00:02:22.825
I'll show you how quickly this does kick off.
64

65
00:02:22.825 --> 00:02:23.658
Let's go ahead and make
65

66
00:02:23.658 --> 00:02:26.241
a small whitespace change here.
66

67
00:02:27.571 --> 00:02:29.321
Oh, we'll just do,
67

68
00:02:30.321 --> 00:02:32.679
Eliminate that little guy there.
68

69
00:02:32.679 --> 00:02:34.458
We're eliminating a comment line
69

70
00:02:34.458 --> 00:02:37.958
and I'm going to go ahead and commit this.
70

71
00:02:39.282 --> 00:02:41.129
Just making a whitespace change.
71

72
00:02:41.129 --> 00:02:43.894
I'll Commit and Push it.
72

73
00:02:43.894 --> 00:02:45.144
And we'll Push.
73

74
00:02:46.080 --> 00:02:49.216
Now the CircleCI, the way that's working
74

75
00:02:49.216 --> 00:02:51.107
is it's actually getting a webhook
75

76
00:02:51.107 --> 00:02:53.386
so it went up there,
76

77
00:02:53.386 --> 00:02:55.202
it committed up to GitHub,
77

78
00:02:55.202 --> 00:02:57.925
and then a webhook went out and hit CircleCI
78

79
00:02:57.925 --> 00:02:59.214
and triggered the build.
79

80
00:02:59.214 --> 00:03:00.462
You can see just how fast
80

81
00:03:00.462 --> 00:03:02.826
the builds will actually run.
81

82
00:03:02.826 --> 00:03:04.835
I'm not gonna make us wait for the entire thing
82

83
00:03:04.835 --> 00:03:07.718
but you can see that the build does kick off
83

84
00:03:07.718 --> 00:03:09.482
and run pretty quick.
84

85
00:03:09.482 --> 00:03:11.196
I'm not expecting this to fill
85

86
00:03:11.196 --> 00:03:12.461
but I wanted to show you
86

87
00:03:12.461 --> 00:03:14.991
just how quickly the CircleCI build
87

88
00:03:14.991 --> 00:03:16.741
will kick off for us.
88

89
00:03:18.698 --> 00:03:20.901
Alright, there's one more thing I wanna show you here.
89

90
00:03:20.901 --> 00:03:23.692
This little badge here, this little passing badge,
90

91
00:03:23.692 --> 00:03:26.118
I wanna show you how to get that out of CircleCI.
91

92
00:03:26.118 --> 00:03:27.597
If you come up here
92

93
00:03:27.597 --> 00:03:30.248
and look at the application
93

94
00:03:30.248 --> 00:03:32.266
and go to settings
94

95
00:03:32.266 --> 00:03:34.633
and right here you can do Status Badges.
95

96
00:03:34.633 --> 00:03:36.760
This gives you the Markdown.
96

97
00:03:36.760 --> 00:03:39.115
You actually can do several different formats
97

98
00:03:39.115 --> 00:03:42.289
but I am using Markdown for that.
98

99
00:03:42.289 --> 00:03:44.765
Cut and paste that right there.
99

100
00:03:44.765 --> 00:03:48.098
CTRL-C but come over to your README file
100

101
00:03:51.502 --> 00:03:53.623
and that, this here out of CircleCI,
101

102
00:03:53.623 --> 00:03:56.596
that is what's providing this pass badge.
102

103
00:03:56.596 --> 00:03:57.946
So, if your build starts to fail,
103

104
00:03:57.946 --> 00:04:00.985
that badge will actually change to failing.
104

105
00:04:00.985 --> 00:04:03.419
But that's a quick way when you can see
105

106
00:04:03.419 --> 00:04:05.266
right out your repository,
106

107
00:04:05.266 --> 00:04:06.840
you do get that badge.
107

108
00:04:06.840 --> 00:04:08.775
We are gonna get into the code coverage next,
108

109
00:04:08.775 --> 00:04:09.642
in the next video,
109

110
00:04:09.642 --> 00:04:13.642
and I'll show you exactly how to work with that.
