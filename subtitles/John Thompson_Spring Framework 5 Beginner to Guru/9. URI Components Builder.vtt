WEBVTT
0
1
00:00:04.250 --> 00:00:07.919
Alright. In this video, I wanna
introduce you to something called
1

2
00:00:07.919 --> 00:00:13.969
a UriComponentsBuilder. And like I said,
I didn't like having that api_url
2

3
00:00:13.969 --> 00:00:19.740
hard-coded in the class. So just a
quick code review, what I've done here in
3

4
00:00:19.740 --> 00:00:25.859
the in term, is I added a property api.url. And now we have that api string
4

5
00:00:25.859 --> 00:00:30.750
there. And it externalizes to
application.properties. A property
5

6
00:00:30.750 --> 00:00:34.500
that we can override at runtime, or
deploy time, if we wanted to change this.
6

7
00:00:34.500 --> 00:00:36.660
So this is an important thing to be
doing.
7

8
00:00:36.660 --> 00:00:40.620
It makes our code or application a
little more versatile here. Now let's
8

9
00:00:40.620 --> 00:00:48.059
come back over here. And what we wanna
do is I wanna get rid of this limit. So
9

10
00:00:48.059 --> 00:00:56.969
we'll just have the URL for the API
there. And now, we'll come in here. We're
10

11
00:00:56.969 --> 00:01:17.820
gonna define a UriComponentsBuilder. Just call a uriBuilder. We're
11

12
00:01:17.820 --> 00:01:22.590
gonna do it fromUriString, and
then, we'll put that api_url in there. And
12

13
00:01:22.590 --> 00:01:27.210
actually let's make it more
readable here. Now what we wanna do is
13

14
00:01:27.210 --> 00:01:37.500
also add a queryParam. And we'll
call this limit. And we're gonna pass in
14

15
00:01:37.500 --> 00:01:44.820
the value of that limit. And now this
changes here, we're gonna get rid of this.
15

16
00:01:44.820 --> 00:01:52.220
That's kind of a little hackish. And
we'll say uriBuilder. And we'll say
16

17
00:01:52.220 --> 00:01:57.000
toUriString. So that's gonna give us
the String for the RestTemplate that we're
17

18
00:01:57.000 --> 00:02:02.880
using. So let's go ahead and we'll bring
this up and run it. And make sure that
18

19
00:02:02.880 --> 00:02:08.390
things are still working normally. Over
here.
19

20
00:02:09.649 --> 00:02:15.420
Get a big results up. All 33 of them. So
we can see a bunch came back, and that is
20

21
00:02:15.420 --> 00:02:23.340
still working properly. If we back up,
let's do five. Now we can see that things
21

22
00:02:23.340 --> 00:02:28.470
are binding properly as we expect it to.
so just to recap what I've done here in
22

23
00:02:28.470 --> 00:02:37.349
this lesson, we took the api_url. We
externalized it to application.properties.
23

24
00:02:37.349 --> 00:02:42.060
Now this is externalized so
we could override that and when we go to
24

25
00:02:42.060 --> 00:02:46.200
deploy this application. This is a very
good habit to get into. It's no longer
25

26
00:02:46.200 --> 00:02:50.370
hard code in the class. That's a
considered a very bad practice. And now,
26

27
00:02:50.370 --> 00:02:55.319
we are injecting that using the @Value
annotation. So we are using Spring
27

28
00:02:55.319 --> 00:02:58.799
expression language there to go out and
get that property from the properties
28

29
00:02:58.799 --> 00:03:04.110
file. That's gonna get injected
into our class at runtime. And because we
29

30
00:03:04.110 --> 00:03:08.400
have a single constructor here, Spring is
able to autowire this without using the
30

31
00:03:08.400 --> 00:03:13.049
@Autowired annotation. So it's gonna
provide us an implementation of the Rest
31

32
00:03:13.049 --> 00:03:18.090
Template. And now, we are using this UriComponentsBuilder to build up the
32

33
00:03:18.090 --> 00:03:21.630
string. So it's gonna build a query
string from us. So this is really handy
33

34
00:03:21.630 --> 00:03:25.530
to have, if we had a bunch of query
parameters, we could inject them here. So
34

35
00:03:25.530 --> 00:03:30.030
it builds up that properly formatted
query string for us without us having to
35

36
00:03:30.030 --> 00:03:35.040
remember that syntax which can be very
error-prone. So this is a much better way
36

37
00:03:35.040 --> 00:03:40.670
to be exercising this API in conjunction
with RestTemplate.
