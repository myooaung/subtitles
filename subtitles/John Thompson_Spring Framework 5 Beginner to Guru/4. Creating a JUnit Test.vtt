WEBVTT
0
1
00:00:04.310 --> 00:00:08.309
Alright let's take a look at some of
the stuff that we need to do to run a
1

2
00:00:08.309 --> 00:00:13.860
JUnit test. Now our project already has
the spring-boot-starter-test coming in
2

3
00:00:13.860 --> 00:00:18.810
and let's go over to our Maven projects and take a look at what that brings in
3

4
00:00:18.810 --> 00:00:24.869
for us. Plugins, but we wanna look
at Dependencies and we can see, where is
4

5
00:00:24.869 --> 00:00:27.720
it,
there it is down at bottom. And we have
5

6
00:00:27.720 --> 00:00:32.399
the spring-boot-starter-test and we can see a Spring and a junit,
6

7
00:00:32.399 --> 00:00:38.160
assert, mockito, hamcrest, jsonassert. It's kind of funny how dependency
7

8
00:00:38.160 --> 00:00:43.290
resolution works in IntelliJ.
Maven thinks that a spring-core
8

9
00:00:43.290 --> 00:00:47.750
is being brought in by this but we also
have a spring-test. So get a variety of
9

10
00:00:47.750 --> 00:00:52.500
dependencies being brought in just by
having that test starter there. But the
10

11
00:00:52.500 --> 00:00:55.890
primary one that we want is junit and
that's the one that we're gonna be
11

12
00:00:55.890 --> 00:01:01.739
utilizing for our unit tests. So let's go
and close this window and we do have a
12

13
00:01:01.739 --> 00:01:09.450
test that was created by default. So this
is a very typical test. So we have the
13

14
00:01:09.450 --> 00:01:14.430
@RunWith, and that's the SpringRunner. And that is going to bring up the Spring
14

15
00:01:14.430 --> 00:01:18.960
Context and we are saying that's the
@SpringBootTest and so this is an
15

16
00:01:18.960 --> 00:01:24.000
integration test actually, not a unit
test. So this is an integration test and
16

17
00:01:24.000 --> 00:01:31.380
we can come in and just do a right click
and say Run and IntelliJ did a quick
17

18
00:01:31.380 --> 00:01:37.409
build and we can see that it runs. It brings
up the Spring Context and come up and
18

19
00:01:37.409 --> 00:01:42.720
should shut right down. So that test
quote-unquote past because the context
19

20
00:01:42.720 --> 00:01:46.890
did load successfully. If the context did
not load for whatever reason this test
20

21
00:01:46.890 --> 00:01:51.149
would fail. So very, very simple test. Let's go ahead and create a test now.
21

22
00:01:51.149 --> 00:01:58.320
We'll create an actual unit test and
come into Category and if I remember
22

23
00:01:58.320 --> 00:02:04.470
right, we'll come in here. So I just did alt-enter and so it asked me
23

24
00:02:04.470 --> 00:02:07.020
to create a test and this is within
IntelliJ.
24

25
00:02:07.020 --> 00:02:13.100
So I'm gonna say I want a JUnit4 test and let's go ahead and say what
25

26
00:02:13.100 --> 00:02:21.830
do we wanna do. Let's do these couple
tests here. Say OK.
26

27
00:02:21.830 --> 00:02:25.470
IntelliJ has generated this and of course
we're gonna add this to Git so you
27

28
00:02:25.470 --> 00:02:31.860
can see it and let's create a property
here for Category.
28

29
00:02:31.860 --> 00:02:40.620
And what I wanna do is create
a setup and this is gonna be a test
29

30
00:02:40.620 --> 00:02:49.709
that something I'll run every time. And
here, we're gonna use the @Before. And
30

31
00:02:49.709 --> 00:02:55.580
this is gonna save us some headaches
here so we're gonna say category and
31

32
00:02:55.580 --> 00:02:59.880
this is gonna initialize that
property. So whenever we run we will get
32

33
00:02:59.880 --> 00:03:06.030
a new category. So we have three test
methods here and it is going to, we will
33

34
00:03:06.030 --> 00:03:09.870
create a new Category object before each
test method is executed.
34

35
00:03:09.870 --> 00:03:19.560
So let's write a quick test here. Now
we're gonna say that we are setting
35

36
00:03:19.560 --> 00:03:27.239
the category ID to a Long 4. Now we can
do assertEquals and we're gonna say,
36

37
00:03:27.239 --> 00:03:31.670
Long expected, Long actual. So do that,
37

38
00:03:31.850 --> 00:03:38.850
category and say getId(). And let's
refactor this a little bit and what I
38

39
00:03:38.850 --> 00:03:42.690
wanna do is create a new property for
that Long. I like to have a
39

40
00:03:42.690 --> 00:03:46.920
specific property that we're testing
because right now we're creating a value
40

41
00:03:46.920 --> 00:03:53.870
several times and this can lead to
errors in your test. So let's do idValue.
41

42
00:03:53.870 --> 00:03:58.190
Make sure we can use the autoboxing
here.
42

43
00:03:58.240 --> 00:04:02.530
And by autoboxing, what's Long, a
lowercase long is gonna be a
43

44
00:04:02.530 --> 00:04:08.470
primitive Java and I'm saying go ahead
and do that. With the 4L, so
44

45
00:04:08.470 --> 00:04:14.860
we're going to 4 Long here and
let's replicate that here and also in
45

46
00:04:14.860 --> 00:04:23.260
our assert. So that's a lot cleaner in there.
I like how that looks and now we can do
46

47
00:04:23.260 --> 00:04:31.210
a right click and say Run and we can now
see that test has run and if I come
47

48
00:04:31.210 --> 00:04:38.890
down here, let's close that window. You
can also run all tests just to do that
48

49
00:04:38.890 --> 00:04:43.870
and we'll see it instantiate and we see
that the Spring integration test,
49

50
00:04:43.870 --> 00:04:48.160
the default one that brings up to
contexts, takes a lot longer and then you
50

51
00:04:48.160 --> 00:04:52.690
can see that it took like almost no time
to run the actual unit test. Even
51

52
00:04:52.690 --> 00:04:56.410
though they don't have any logic in them
but they did get executed there. So you
52

53
00:04:56.410 --> 00:05:03.270
can see how much faster actual unit
tests are over integration tests.
