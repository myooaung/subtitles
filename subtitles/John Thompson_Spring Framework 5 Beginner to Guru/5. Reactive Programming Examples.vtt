WEBVTT
0
1
00:00:05.048 --> 00:00:07.035
Alright we've been going through
1

2
00:00:07.035 --> 00:00:09.757
a lot of PowerPoint slides in this section of the course.
2

3
00:00:09.757 --> 00:00:11.200
Kind of apologize for that,
3

4
00:00:11.200 --> 00:00:14.260
I find the slide decks get a little boring after a while.
4

5
00:00:14.260 --> 00:00:16.870
But, we had to cover a lot of content
5

6
00:00:16.870 --> 00:00:20.535
getting our heads around this reactive programming stuff.
6

7
00:00:20.535 --> 00:00:23.289
So we've laid down a lot of groundwork here.
7

8
00:00:23.289 --> 00:00:25.968
But now I want to jump over to IntelliJ,
8

9
00:00:25.968 --> 00:00:27.988
and we're gonna look at some hands-on examples.
9

10
00:00:27.988 --> 00:00:29.740
This is really just to get our feet wet
10

11
00:00:29.740 --> 00:00:31.154
with reactive programming.
11

12
00:00:31.154 --> 00:00:32.655
So we're gonna look at the reactive types
12

13
00:00:32.655 --> 00:00:33.867
within the Spring framework,
13

14
00:00:33.867 --> 00:00:35.310
the Monos and the Fluxes,
14

15
00:00:35.310 --> 00:00:37.784
and what I have is a pretty simple little project,
15

16
00:00:37.784 --> 00:00:39.161
a couple data types,
16

17
00:00:39.161 --> 00:00:42.176
and we're going to go in and play around with those.
17

18
00:00:42.176 --> 00:00:44.683
Now I will check all this into GitHub,
18

19
00:00:44.683 --> 00:00:47.841
it's in a little sandbox collection of stuff that I have.
19

20
00:00:47.841 --> 00:00:49.708
Go ahead, check it out, take a look.
20

21
00:00:49.708 --> 00:00:51.416
I encourage you to play with it,
21

22
00:00:51.416 --> 00:00:55.382
start getting used to working with these reactive objects,
22

23
00:00:55.382 --> 00:00:59.199
this is an extension of the Java 8 streams,
23

24
00:00:59.199 --> 00:01:01.842
so I'm not covering all that technology,
24

25
00:01:01.842 --> 00:01:03.771
I'm not gonna cover it in detail,
25

26
00:01:03.771 --> 00:01:06.308
but we are gonna be utilizing a lot going forward.
26

27
00:01:06.308 --> 00:01:08.413
So the reactive types and the Java 8 streams
27

28
00:01:08.413 --> 00:01:10.250
are very, very closely related,
28

29
00:01:10.250 --> 00:01:12.567
and you use a lot of the same techniques,
29

30
00:01:12.567 --> 00:01:14.834
but I think I got some fun examples here,
30

31
00:01:14.834 --> 00:01:16.912
and again this is just to get our feet wet.
31

32
00:01:16.912 --> 00:01:18.381
We're gonna go through,
32

33
00:01:18.381 --> 00:01:21.117
and just start getting used to using these reactive types
33

34
00:01:21.117 --> 00:01:23.592
that are available in Spring Framework 5.
34

35
00:01:23.592 --> 00:01:25.247
Alright we've been talking a lot about reactive programming,
35

36
00:01:25.247 --> 00:01:28.638
let's take an actual look at some examples,
36

37
00:01:28.638 --> 00:01:31.768
and what I have is a little project that I have
37

38
00:01:31.768 --> 00:01:34.420
a sandbox up on GitHub,
38

39
00:01:34.420 --> 00:01:36.695
I'll leave a link to the project here for sure,
39

40
00:01:36.695 --> 00:01:38.217
once I get it checked in,
40

41
00:01:38.217 --> 00:01:40.210
you can see everything is green there, in IntelliJ,
41

42
00:01:40.210 --> 00:01:41.597
meaning that it hasn't been
42

43
00:01:41.597 --> 00:01:42.549
committed and pushed,
43

44
00:01:42.549 --> 00:01:44.729
but I will definitely leave that in the course resources
44

45
00:01:44.729 --> 00:01:46.494
so that you can see this example.
45

46
00:01:46.494 --> 00:01:48.584
And what I have is a pretty simple example,
46

47
00:01:48.584 --> 00:01:51.754
we've got two objects, just a Person, and a PersonCommand,
47

48
00:01:51.754 --> 00:01:53.789
so we just have firstName, lastName,
48

49
00:01:53.789 --> 00:01:56.052
and I got a little helper method here
49

50
00:01:56.052 --> 00:01:58.182
that we'll be using to get output, so,
50

51
00:01:58.182 --> 00:02:01.441
we'll have the little POJO here say its name.
51

52
00:02:01.441 --> 00:02:04.327
And of course we're using ProjectLombok
52

53
00:02:04.327 --> 00:02:06.179
so we have @Data, @NoArgsConstructor,
53

54
00:02:06.179 --> 00:02:07.662
@AllArgsConstructor,
54

55
00:02:07.662 --> 00:02:09.846
and then I have a command here, so,
55

56
00:02:09.846 --> 00:02:11.618
to emulate a command object,
56

57
00:02:11.618 --> 00:02:13.967
and we'll use that for some type transformations,
57

58
00:02:13.967 --> 00:02:16.239
and I put a convenience method on there too,
58

59
00:02:16.239 --> 00:02:19.099
with the constructor, to create a PersonCommand
59

60
00:02:19.099 --> 00:02:21.566
from a Person object, so,
60

61
00:02:21.566 --> 00:02:22.857
nothing too exciting there.
61

62
00:02:22.857 --> 00:02:25.643
Now let's take a look at the test.
62

63
00:02:25.643 --> 00:02:27.762
And I wrote everything in test,
63

64
00:02:27.762 --> 00:02:29.993
so we can go through a number of different examples here.
64

65
00:02:29.993 --> 00:02:31.657
And you don't know,
65

66
00:02:31.657 --> 00:02:33.592
if you've taken my courses in the past,
66

67
00:02:33.592 --> 00:02:35.332
you know that I'm a Burn Notice fan,
67

68
00:02:35.332 --> 00:02:37.641
so we have the characters from Burn Notice here,
68

69
00:02:37.641 --> 00:02:40.786
Michael, Fiona, good old Sam, and Jesse,
69

70
00:02:40.786 --> 00:02:43.313
and let's take a look at some of the examples here,
70

71
00:02:43.313 --> 00:02:45.959
and the first one we're gonna look at
71

72
00:02:45.959 --> 00:02:48.050
is just a monoTests, and,
72

73
00:02:48.050 --> 00:02:51.592
what this is doing here, is we created a new Person,
73

74
00:02:51.592 --> 00:02:53.155
personMono,
74

75
00:02:53.155 --> 00:02:55.968
and we do Mono and just,
75

76
00:02:55.968 --> 00:02:58.923
and just is going to create a Mono object
76

77
00:02:58.923 --> 00:03:01.555
from the given object that you're working with.
77

78
00:03:01.555 --> 00:03:03.852
So this gives us a personMono,
78

79
00:03:03.852 --> 00:03:06.627
and if we wanna get the Person object
79

80
00:03:06.627 --> 00:03:08.275
out of the Mono,
80

81
00:03:08.275 --> 00:03:09.884
we call the block method on it,
81

82
00:03:09.884 --> 00:03:12.328
and that's gonna return back that Person,
82

83
00:03:12.328 --> 00:03:14.212
and now we can do a login.
83

84
00:03:14.212 --> 00:03:16.039
I'll go ahead and run this little test here
84

85
00:03:16.039 --> 00:03:19.982
so you can see the output of the example.
85

86
00:03:19.982 --> 00:03:22.114
And we can see there that we did get Michael Weston
86

87
00:03:22.114 --> 00:03:24.480
back from that test.
87

88
00:03:24.480 --> 00:03:27.292
Now let's go ahead and take a look at the next test here,
88

89
00:03:27.292 --> 00:03:30.691
and this case here, we're gonna use the map function
89

90
00:03:30.691 --> 00:03:33.445
to return back that Person,
90

91
00:03:33.445 --> 00:03:36.754
so actually I'm gonna reformat that a little bit.
91

92
00:03:36.754 --> 00:03:40.701
So, that's a little bit better formatting,
92

93
00:03:40.701 --> 00:03:43.460
and in this case, map is a transformation object,
93

94
00:03:43.460 --> 00:03:45.181
just like Java streams,
94

95
00:03:45.181 --> 00:03:47.944
Spring reactive stuff has that map function,
95

96
00:03:47.944 --> 00:03:51.237
so we're gonna do type transformation in that sample,
96

97
00:03:51.237 --> 00:03:53.979
and again we're just gonna do, say name,
97

98
00:03:53.979 --> 00:03:57.236
and we'll go ahead and run this,
98

99
00:03:57.236 --> 00:04:01.086
and we should see Fiona in the output.
99

100
00:04:01.086 --> 00:04:03.004
And again, you need to remember
100

101
00:04:03.004 --> 00:04:06.311
that we are calling this block function here,
101

102
00:04:06.311 --> 00:04:07.867
and that's what triggers it,
102

103
00:04:07.867 --> 00:04:10.765
because really this is essentially a future,
103

104
00:04:10.765 --> 00:04:14.271
and it won't execute until something blocks on it.
104

105
00:04:14.271 --> 00:04:18.438
Now, next up here, let's take a look at a filter example,
105

106
00:04:20.220 --> 00:04:22.244
bring that up to the top of the screen,
106

107
00:04:22.244 --> 00:04:24.380
and in this case, what we're gonna do
107

108
00:04:24.380 --> 00:04:25.727
is filter out that mono,
108

109
00:04:25.727 --> 00:04:27.293
so we're gonna do a stream,
109

110
00:04:27.293 --> 00:04:28.737
so we'll get a stream on that,
110

111
00:04:28.737 --> 00:04:31.240
and we're gonna say, hey, I'm asking for foo,
111

112
00:04:31.240 --> 00:04:33.706
and we're gonna take the sam object,
112

113
00:04:33.706 --> 00:04:38.283
and when I run this, we'll get a NullPointerException,
113

114
00:04:38.283 --> 00:04:39.699
because they're gonna filter that,
114

115
00:04:39.699 --> 00:04:42.048
and no results are gonna be back, so,
115

116
00:04:42.048 --> 00:04:46.038
that Person is gonna be a null object, or null, so,
116

117
00:04:46.038 --> 00:04:48.062
in this case, this guy's gonna toss
117

118
00:04:48.062 --> 00:04:51.298
a NullPointerException, which it does
118

119
00:04:51.298 --> 00:04:53.768
in JUnit here, on line 47,
119

120
00:04:53.768 --> 00:04:57.188
where it's saying I expect a null pointer to come back.
120

121
00:04:57.188 --> 00:04:58.761
In all these examples so far,
121

122
00:04:58.761 --> 00:05:01.083
we've been looking at Mono.
122

123
00:05:01.083 --> 00:05:03.962
So let's take a look at a Flux.
123

124
00:05:03.962 --> 00:05:06.124
And remember a Flux is
124

125
00:05:06.124 --> 00:05:07.538
multiple objects.
125

126
00:05:07.538 --> 00:05:11.705
So a Mono, just to reiterate, a Mono is zero or one,
126

127
00:05:13.695 --> 00:05:16.570
whereas a Flux is zero or many.
127

128
00:05:16.570 --> 00:05:19.462
So in this case here, let's go ahead and take,
128

129
00:05:19.462 --> 00:05:21.145
run the fluxTest,
129

130
00:05:21.145 --> 00:05:22.747
you see that he runs pretty quick.
130

131
00:05:22.747 --> 00:05:25.029
Again, just like Mono, we are using a Flux,
131

132
00:05:25.029 --> 00:05:26.950
and it can take in multiple properties,
132

133
00:05:26.950 --> 00:05:29.288
so a couple different ways of creating the Fluxes,
133

134
00:05:29.288 --> 00:05:31.983
but here, you can see that we did get the Flux,
134

135
00:05:31.983 --> 00:05:34.143
and when we subscribed on it,
135

136
00:05:34.143 --> 00:05:36.045
we are passing on the log info,
136

137
00:05:36.045 --> 00:05:38.211
and we are getting our log output here
137

138
00:05:38.211 --> 00:05:40.772
from the Flux objects.
138

139
00:05:40.772 --> 00:05:44.388
So collapse this guy, and let's take a look at the next one.
139

140
00:05:44.388 --> 00:05:47.060
Now here we can also test a filter,
140

141
00:05:47.060 --> 00:05:48.738
which I did not,
141

142
00:05:48.738 --> 00:05:50.238
let me pause this.
142

143
00:05:51.206 --> 00:05:53.321
Okay, I realized I forgot to put in a filter option on this,
143

144
00:05:53.321 --> 00:05:56.154
so I went and did that real quick,
144

145
00:05:57.189 --> 00:05:59.517
and what we're gonna do is filter on persons,
145

146
00:05:59.517 --> 00:06:01.184
basically for Fiona.
146

147
00:06:02.029 --> 00:06:06.802
Let's go ahead and run this now, make sure that works.
147

148
00:06:06.802 --> 00:06:09.191
We can see that we only get Fiona, so,
148

149
00:06:09.191 --> 00:06:12.630
we still had, just like in the example before,
149

150
00:06:12.630 --> 00:06:14.682
we still had the four objects in there,
150

151
00:06:14.682 --> 00:06:17.116
so we still had the four objects going into the Flux,
151

152
00:06:17.116 --> 00:06:19.759
but now we are doing a filter operation on it,
152

153
00:06:19.759 --> 00:06:23.926
and we are gonna filter out just where fiona is, and,
153

154
00:06:24.776 --> 00:06:25.609
now here,
154

155
00:06:27.749 --> 00:06:29.000
we can also do this,
155

156
00:06:29.000 --> 00:06:31.201
and we're doing a delay,
156

157
00:06:31.201 --> 00:06:34.457
so we're gonna emit every second here, and,
157

158
00:06:34.457 --> 00:06:37.958
this is a little, little surprising,
158

159
00:06:37.958 --> 00:06:40.625
if you're not used to streaming.
159

160
00:06:41.718 --> 00:06:44.152
See how everything just went by?
160

161
00:06:44.152 --> 00:06:46.638
And what happened there is that we're delaying,
161

162
00:06:46.638 --> 00:06:48.347
but because it's running in the background,
162

163
00:06:48.347 --> 00:06:50.280
we didn't wait for that output.
163

164
00:06:50.280 --> 00:06:52.383
So it ran, and the test terminated
164

165
00:06:52.383 --> 00:06:55.340
before that duration expired,
165

166
00:06:55.340 --> 00:06:58.647
and a way around that when we're testing,
166

167
00:06:58.647 --> 00:07:00.440
let me show you this here,
167

168
00:07:00.440 --> 00:07:02.321
is to use a countDownLatch,
168

169
00:07:02.321 --> 00:07:04.516
and what we can do here,
169

170
00:07:04.516 --> 00:07:06.990
is we're still gonna do a delay of one second,
170

171
00:07:06.990 --> 00:07:09.264
but now on complete of that stream,
171

172
00:07:09.264 --> 00:07:11.520
we are gonna count down that latch,
172

173
00:07:11.520 --> 00:07:13.603
and this here on line 100
173

174
00:07:14.604 --> 00:07:17.878
tells the test to wait until the countdown is complete.
174

175
00:07:17.878 --> 00:07:19.411
So a handy way to do that,
175

176
00:07:19.411 --> 00:07:21.617
and now if we run this,
176

177
00:07:21.617 --> 00:07:24.721
and see that it's gonna go through,
177

178
00:07:24.721 --> 00:07:27.064
and now we're gonna get the output every second,
178

179
00:07:27.064 --> 00:07:29.727
and then the one last test that I wanna show you,
179

180
00:07:29.727 --> 00:07:32.403
is we are gonna add in a filter,
180

181
00:07:32.403 --> 00:07:35.781
so let's go ahead and run this guy,
181

182
00:07:35.781 --> 00:07:38.961
and in this case, we'll just get michael and fiona,
182

183
00:07:38.961 --> 00:07:41.542
because the others did not qualify,
183

184
00:07:41.542 --> 00:07:45.106
so we're looking for a firstName that contains i,
184

185
00:07:45.106 --> 00:07:46.915
and you can see up here,
185

186
00:07:46.915 --> 00:07:49.095
woops, scroll all the way up,
186

187
00:07:49.095 --> 00:07:51.286
Michael and Fiona are the only ones.
187

188
00:07:51.286 --> 00:07:53.638
Sam and Jesse do not match that criteria, so,
188

189
00:07:53.638 --> 00:07:56.331
a number of different things that we can do with the
189

190
00:07:56.331 --> 00:07:58.953
Flux and the Monos, the reactive types,
190

191
00:07:58.953 --> 00:08:00.184
it's a lot of fun.
191

192
00:08:00.184 --> 00:08:01.368
It's a little bit different,
192

193
00:08:01.368 --> 00:08:02.953
it takes a little bit of getting your head around it, but,
193

194
00:08:02.953 --> 00:08:04.379
I wanted to record this video,
194

195
00:08:04.379 --> 00:08:06.098
and just show you some examples of these in action,
195

196
00:08:06.098 --> 00:08:09.431
and I hope you found this video helpful.
