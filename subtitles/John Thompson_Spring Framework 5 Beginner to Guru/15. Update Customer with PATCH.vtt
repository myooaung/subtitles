WEBVTT
0
1
00:00:04.310 --> 00:00:08.220
Alright. In this video, we wanna go
ahead and look at implementing the PATCH
1

2
00:00:08.220 --> 00:00:13.380
operation on the controller and I've set
up a unit test here. I'm gonna go ahead
2

3
00:00:13.380 --> 00:00:17.490
and run it. So we can see this execute.
Now this functionally is gonna be
3

4
00:00:17.490 --> 00:00:23.100
very close to how the update works. 
Let's take a quick look at the API
4

5
00:00:23.100 --> 00:00:27.750
documentation. So you can see we're doing
a PATCH against the same url customer/{id},
5

6
00:00:27.750 --> 00:00:32.369
just like the PUT does. But in
this case, the values are gonna be
6

7
00:00:32.369 --> 00:00:35.190
optional and we're only gonna be
updating those values. So that's the
7

8
00:00:35.190 --> 00:00:39.329
difference between a PUT and a PATCH. It
updates an existing customer. But we are
8

9
00:00:39.329 --> 00:00:45.809
allowing the client to just update, do a
quote unquote patch of operation. So the
9

10
00:00:45.809 --> 00:00:50.960
functionality is very close. But the
biggest difference is gonna be in the
10

11
00:00:50.960 --> 00:00:56.940
operation selection. So we are gonna be
using the HTTP PATCH method. And in this
11

12
00:00:56.940 --> 00:01:00.539
case, it's gonna be running it almost
exactly the same but we wanna have
12

13
00:01:00.539 --> 00:01:03.510
different logic there to handle that. So
let's go ahead and implement that now.
13

14
00:01:03.510 --> 00:01:10.409
And now, a lot of business mapping there.
so let's go ahead and copy this. And I'm
14

15
00:01:10.409 --> 00:01:15.540
gonna say, patchCustomer here. And of
course, I'm sure you guys aren't doing
15

16
00:01:15.540 --> 00:01:20.280
any cut and paste in your coding right.
And now, what we wannao change is this
16

17
00:01:20.280 --> 00:01:28.500
to the Patch, @PatchMapping, and in this
case, we wanna use the patch method. So
17

18
00:01:28.500 --> 00:01:32.040
that's the biggest difference. So all our
business logic, I wrote that integration
18

19
00:01:32.040 --> 00:01:35.759
test in the previous video. That's
testing out our business logic, our
19

20
00:01:35.759 --> 00:01:41.460
Spring MVC test here. The unit test
we're writing and using MockMvc. That is
20

21
00:01:41.460 --> 00:01:45.750
gonna be testing the RequestMapping.
So let's double check things here. So we
21

22
00:01:45.750 --> 00:01:49.530
have patchCustomer. We wanna get that
@PathVariable Long id. And then, the
22

23
00:01:49.530 --> 00:01:54.270
CustomerDTO is gonna get bound to it. We
are gonna return back an HTTPStatus of
23

24
00:01:54.270 --> 00:02:01.590
OK. So let's go ahead and run that, and
we should see our test pass now. You can
24

25
00:02:01.590 --> 00:02:06.479
see that the test did pass OK.
So let's go ahead and we'll start this
25

26
00:02:06.479 --> 00:02:13.950
up
and we'll test it inside a Postman. Let's
26

27
00:02:13.950 --> 00:02:19.400
come over here and see here
27

28
00:02:20.480 --> 00:02:31.010
did a PUT. Let's take a look at the body.
So, will send that and we did get up Freddy.
28

29
00:02:31.010 --> 00:02:38.490
And now, let's go ahead and change that
to do FreddyUPDATE. But now, we wanna
29

30
00:02:38.490 --> 00:02:43.820
change that up to PATCH. So we're stuck in a
patch against the /1 for the id
30

31
00:02:43.820 --> 00:02:54.480
and we should get back something. And we
got a Bad Request. And that is valid. I had bad
31

32
00:02:54.480 --> 00:02:58.520
JSON there. Let's try this one
more time.
32

33
00:02:58.520 --> 00:03:03.110
And we did not get back the id value,
which we should. I thought I fixed that.
33

34
00:03:03.110 --> 00:03:11.700
So I will double check that and let's go
ahead and do a get on that and we can
34

35
00:03:11.700 --> 00:03:17.040
see that the update went through and the
lastname of Meyers is there. So if we did
35

36
00:03:17.040 --> 00:03:21.810
not pass that value using the update
method, that would have been a null value
36

37
00:03:21.810 --> 00:03:26.489
returned. So if we passed in a null the
way that JPA is gonna handle that,
37

38
00:03:26.489 --> 00:03:34.350
that property does not get set. That is
going to not work properly. So I'm gonna
38

39
00:03:34.350 --> 00:03:38.100
investigate why our customer URL
didn't get updated. So I'm gonna pause
39

40
00:03:38.100 --> 00:03:44.700
this and take a look at that real quick.
And I see the problem right here. It's in
40

41
00:03:44.700 --> 00:03:52.670
our return class here. So let's go ahead
and CustomerDTO.
41

42
00:03:53.660 --> 00:04:04.130
And we wanna take this guy. And what we
need to do is this function here, and
42

43
00:04:04.130 --> 00:04:08.540
we'll just make it work for right now.
43

44
00:04:12.470 --> 00:04:20.060
So that'll fix that url getting set
properly and we want the id value there.
44

45
00:04:20.060 --> 00:04:24.840
So the return URL was not set on the
response so that will set that up. And I
45

46
00:04:24.840 --> 00:04:31.020
am going to refactor this in a future
video. Because right now, this api url on
46

47
00:04:31.020 --> 00:04:35.040
the way we're setting it, we're doing it
in multiple places. So we are violating
47

48
00:04:35.040 --> 00:04:38.760
the do not repeat yourself
property. So we definitely wanna
48

49
00:04:38.760 --> 00:04:44.340
refactor that and I will do so in a
future video. But for now, I'm gonna wrap
49

50
00:04:44.340 --> 00:04:51.170
this one up. So that is how we'd set up
the PatchMapping for HTTP REST.
