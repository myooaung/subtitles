WEBVTT
0
1
00:00:02.429 --> 00:00:08.109
Okay I got a little code review of a
Spring Boot example using ActiveMQ. It
1

2
00:00:08.109 --> 00:00:13.080
actually uses ActiveMQ and MySQL so a
pretty simple example that I have here.
2

3
00:00:13.080 --> 00:00:18.850
Now all the source code for this
example is going to be available up on
3

4
00:00:18.850 --> 00:00:22.900
GitHub in my little section of GitHub if
you go to
4

5
00:00:22.900 --> 00:00:24.340
github/springframeworkguru
5

6
00:00:24.340 --> 00:00:33.640
and the repository name is spring-boot-active-mq-example and you can
6

7
00:00:33.640 --> 00:00:37.390
see that I have that right up there on
the screen. So if you go to that URL you'll
7

8
00:00:37.390 --> 00:00:42.909
be able to access the source code for
this example. Now I do have a little
8

9
00:00:42.909 --> 00:00:49.570
README here and I am backing this up
with MySQL database with pretty simple
9

10
00:00:49.570 --> 00:00:53.890
product type application and we are
using the embedded
10

11
00:00:53.890 --> 00:01:00.369
ActiveMQ broker that Spring Boot will
automatically configure for us. So I have
11

12
00:01:00.369 --> 00:01:06.550
wired up a database schema called springboot_activemq_
12

13
00:01:06.550 --> 00:01:13.270
example, that schema will need to exist
in your MySQL database for this example
13

14
00:01:13.270 --> 00:01:17.680
to run or you will need to override the
example. Like in Spring Boot, you can
14

15
00:01:17.680 --> 00:01:21.700
override any of the MySQL properties and
then what you're going to see is an
15

16
00:01:21.700 --> 00:01:26.650
application as a basic CRUD application
I'll bring up, all these products you'd
16

17
00:01:26.650 --> 00:01:30.909
be able to add in a product and then I'm
putting a link on the product to send a
17

18
00:01:30.909 --> 00:01:35.110
message. We just want this interactive so
we want to send a message for a specific
18

19
00:01:35.110 --> 00:01:41.080
product ID and what we're going to do is
send a message across ActiveMQ, we'll set
19

20
00:01:41.080 --> 00:01:47.020
up a listener for that message to come
across and then we'll capture that
20

21
00:01:47.020 --> 00:01:51.970
message and update that product ID
record and we'll see all this in action.
21

22
00:01:51.970 --> 00:01:56.140
Now I'll show you an example that is running
at the end of the one. I'm going to toggle over
22

23
00:01:56.140 --> 00:02:03.190
to IntelliJ now. So I have IntelliJ up
here and this is the main Spring Boot
23

24
00:02:03.190 --> 00:02:08.890
class and I'm going to focus on the
messaging aspects of this. I do have
24

25
00:02:08.890 --> 00:02:12.340
other examples from MySQL and CRUD operations so you're welcome to check
25

26
00:02:12.340 --> 00:02:15.490
those out I'm just using Spring Boot and
Spring
26

27
00:02:15.490 --> 00:02:20.140
Data JPA to access the database. I'm not going
to focus on that in this code review
27

28
00:02:20.140 --> 00:02:26.590
but I'm going to focus on
ActiveMQ and how I configure it so you
28

29
00:02:26.590 --> 00:02:33.280
can see there on line 18, I'm using anntonation to enable JMS that brings up
29

30
00:02:33.280 --> 00:02:41.380
the JMS stuff inside a Spring Boot
and on line 21 I am using a final static
30

31
00:02:41.380 --> 00:02:46.240
String of PRODUCT_MESSEGE_QUEUE. So this
is my queue definition now if I was
31

32
00:02:46.240 --> 00:02:49.960
running this application in production
type environment I was going someplace
32

33
00:02:49.960 --> 00:02:53.950
else
I probably externalize that message
33

34
00:02:53.950 --> 00:02:59.290
queue name. But here I'm adding it in as
a static final so it doesn't change and
34

35
00:02:59.290 --> 00:03:02.950
I didn't want to repeat myself so
there's that object-oriented
35

36
00:03:02.950 --> 00:03:06.220
programming thing, don't repeat yourself
I didn't want to have that Spring
36

37
00:03:06.220 --> 00:03:11.260
defined in multiple spots so that's why
I am setting it up here. We do utilize
37

38
00:03:11.260 --> 00:03:15.340
that String in a couple of
configurations so now I do set up a
38

39
00:03:15.340 --> 00:03:19.870
bean for a JmsListenerContainerFactory and that takes in a
39

40
00:03:19.870 --> 00:03:24.610
ConnectionFactory and Spring Boot by
default is going to give us that
40

41
00:03:24.610 --> 00:03:29.440
ConnectionFactory for ActiveMQ so this
is something that's going to be provided
41

42
00:03:29.440 --> 00:03:34.210
by Spring Boot and we're just going to
set up that Container Factory using the
42

43
00:03:34.210 --> 00:03:38.050
ConnectionFactory provided by Spring
Boot. Now let's take a look at the
43

44
00:03:38.050 --> 00:03:44.110
ProductService implementation and he is
going to get an instance by Jms
44

45
00:03:44.110 --> 00:03:48.280
Template injected so I'm auto wiring by
constructor to bring in another Jms
45

46
00:03:48.280 --> 00:03:57.160
Template and down here on line 73 to 78
I am sending out a message using the Jms
46

47
00:03:57.160 --> 00:04:02.800
Template and you can see here this
section right here, where I'm reusing
47

48
00:04:02.800 --> 00:04:07.270
that string for the message queue name
and then I send out, basically it's just
48

49
00:04:07.270 --> 00:04:12.430
a map message. I'm sending out a map JMS
message and I'm going to log out there then
49

50
00:04:12.430 --> 00:04:17.890
I sent out a JMS message so this is the
service that connects into the Product
50

51
00:04:17.890 --> 00:04:22.360
Controller. The ProductController is
going to listen on a link so I'm just
51

52
00:04:22.360 --> 00:04:27.669
listening for a post of that Product ID
or actually any post, get or whatever
52

53
00:04:27.669 --> 00:04:31.389
comes across that
URL with a product ID I'm going to send
53

54
00:04:31.389 --> 00:04:35.710
out a message for this and no logic in
here as far as checking make sure I got
54

55
00:04:35.710 --> 00:04:39.509
a valid ID or anything like that it
takes whatever ID value is sent and
55

56
00:04:39.509 --> 00:04:45.669
choose out a JMS map message for it. So the
next piece that we are concerned about
56

57
00:04:45.669 --> 00:04:50.409
is MessageListener.
So the MessageListener is a Spring
57

58
00:04:50.409 --> 00:04:57.550
component and we inject in a ProductRepository to this guy and through the
58

59
00:04:57.550 --> 00:05:02.710
JmsListener we're setting up a listener
on that queue so whenever a message gets
59

60
00:05:02.710 --> 00:05:08.169
invoked on that queue he'll get built so
you can see I'm setting up a destination
60

61
00:05:08.169 --> 00:05:13.509
and again here's that String for the
product queue name so again that just
61

62
00:05:13.509 --> 00:05:17.469
could have it not to repeat yourself
that's what I'm using it there and if I
62

63
00:05:17.469 --> 00:05:21.249
was running this on some production real
application I'd probably externalize
63

64
00:05:21.249 --> 00:05:24.999
that to an external property and check
that differently but for this example. This is
64

65
00:05:24.999 --> 00:05:29.949
just fine. I am bringing in the JmsContainerFactory which we defined in
65

66
00:05:29.949 --> 00:05:35.020
the main class for the Spring Boot
application as a bean. So that bean will
66

67
00:05:35.020 --> 00:05:41.860
get access and what this is going to do
is listen on that JMS queue and you can
67

68
00:05:41.860 --> 00:05:47.050
see that we are going to convert to a Long
from the ID because its String value
68

69
00:05:47.050 --> 00:05:52.360
that's coming in from the web, I will go
out to the product repository ask for an
69

70
00:05:52.360 --> 00:05:57.099
instance of that and then we're going to
set message receive to true which it
70

71
00:05:57.099 --> 00:06:02.020
initializes to fall so we'll set it to
true then it will implement the message
71

72
00:06:02.020 --> 00:06:08.050
count and then we'll go back save it, use some Spring Data JPA and then I'm
72

73
00:06:08.050 --> 00:06:12.819
logging out an info message saying that
we saved that so let's go and take a
73

74
00:06:12.819 --> 00:06:15.490
look at this guy now I'm not going to go
through there with the rest of the stuff
74

75
00:06:15.490 --> 00:06:23.110
I wanted to focus on the JMS here. I am
going to start him up and I am using the
75

76
00:06:23.110 --> 00:06:28.779
ActiveMQ embedded broker and I do have a
MySQL database running locally, actually
76

77
00:06:28.779 --> 00:06:33.099
running locally in a docker container
and we see that he has up and running
77

78
00:06:33.099 --> 00:06:40.750
so I'm going to go and toggle back over to Chrome
and I'm going to refresh this so no
78

79
00:06:40.750 --> 00:06:48.460
products in the database and
add in a product, simple price and
79

80
00:06:48.460 --> 00:06:53.980
there's no validation on here so this is
real simple application. I'm just doing
80

81
00:06:53.980 --> 00:07:00.640
this to show you that it's saved and now
we can see that message is sent, false
81

82
00:07:00.640 --> 00:07:06.490
and message count is zero and I just
want to recap how this is going to work
82

83
00:07:06.490 --> 00:07:11.250
in this. So if I come back to the
controller
83

84
00:07:11.250 --> 00:07:17.320
probably controller when I hit that link
to send a message all he does is sends
84

85
00:07:17.320 --> 00:07:22.720
out the message to the queue and then
redirect back to the show page so
85

86
00:07:22.720 --> 00:07:27.640
nothing too extraordinary here but what
we're going to see is a message is going
86

87
00:07:27.640 --> 00:07:31.600
to get sent and it's going to happen
asynchronously. So message is sent and
87

88
00:07:31.600 --> 00:07:35.800
then we immediately return but control
back to the controller and we display
88

89
00:07:35.800 --> 00:07:39.280
the product page and the processing in
that message is going to happen in the
89

90
00:07:39.280 --> 00:07:44.350
background and so we get on queue, get
pulled off the queue and then process so
90

91
00:07:44.350 --> 00:07:50.860
what happens, I'll show you this here in
just a second, is we're going to send out
91

92
00:07:50.860 --> 00:07:55.540
a message and these values aren't going
to change until we refresh. So I'm going
92

93
00:07:55.540 --> 00:08:02.410
to go ahead and send that and now it's
already come back and we see this is
93

94
00:08:02.410 --> 00:08:08.380
false and this is zero. Now if I come
back here and refresh it you can see
94

95
00:08:08.380 --> 00:08:13.060
that those have changed to true in one
so I can send a couple more here I'm
95

96
00:08:13.060 --> 00:08:18.940
just clicking on it randomly and I did
hit that multiple times send multiple
96

97
00:08:18.940 --> 00:08:24.390
messages you can see that I only have
two messages here but if I do a refresh
97

98
00:08:24.390 --> 00:08:33.340
you can see that the messages are like
just slightly behind. So we can see how
98

99
00:08:33.340 --> 00:08:37.510
that's an achromatic in that we have
that little bit of a lag there and that
99

100
00:08:37.510 --> 00:08:41.440
concludes everything that I wanted to
show you as far as how to send out a JMS
100

101
00:08:41.440 --> 00:08:45.970
message, put it on the queue we set up an
automatic listener and then we're
101

102
00:08:45.970 --> 00:08:52.090
updating the database for a specific
product ID and this is a quick reminder
102

103
00:08:52.090 --> 00:08:56.560
if you want the source code for this,
it's out on GitHub at
103

104
00:08:56.560 --> 00:09:03.580
/springframeworkguru/spring-boot-active-mq-example you can get the
104

105
00:09:03.580 --> 00:09:08.760
source code and play with this and send
out some JMS messages.
