WEBVTT
0
1
00:00:04.100 --> 00:00:09.150
Alright this time we want to step
through setting up viewing a specific
1

2
00:00:09.150 --> 00:00:14.820
ingredient. And just as a helper, I've got
the IngredientCommand up right now on
2

3
00:00:14.820 --> 00:00:21.390
the screen. You can see on line 17 I want to edit a
property for a recipeId so we know what
3

4
00:00:21.390 --> 00:00:27.300
recipeId this belongs to. And
right now I'm just using that ID
4

5
00:00:27.300 --> 00:00:31.560
properties because I'm going to need
that for hidden variables, hidden
5

6
00:00:31.560 --> 00:00:35.130
properties on forms and whatnot. So I
know I'm going to need that to preserve
6

7
00:00:35.130 --> 00:00:39.390
that with the web interaction
but at this time I don't need the fully
7

8
00:00:39.390 --> 00:00:43.469
qualified object. If that changes that's
something we can definitely refactor but
8

9
00:00:43.469 --> 00:00:47.489
it's just that single property that I
need off of a recipe. So I'm adding in
9

10
00:00:47.489 --> 00:00:52.760
one property for that. So let's go ahead
and take a look at the controller test.
10

11
00:00:52.760 --> 00:00:59.820
So you can see down on line 60, I set up
a test of show ingredient. So what we
11

12
00:00:59.820 --> 00:01:05.280
want to do is perform a get. You can see
on 69 I'm doing perform of get. I'm going to
12

13
00:01:05.280 --> 00:01:12.390
go against recipe/id/ingredient/ the ingredientId that I want to
13

14
00:01:12.390 --> 00:01:19.020
view and show. So I'm going to expect
back a status of okay, a view name of
14

15
00:01:19.020 --> 00:01:23.369
recipe/ingredients/show and I
want to make sure that I get back an
15

16
00:01:23.369 --> 00:01:27.990
ingredient. So we're going to bind that
in the controller. So let's go ahead
16

17
00:01:27.990 --> 00:01:35.490
and run this and we'll verify that is
running properly. And I got a 404 error.
17

18
00:01:35.490 --> 00:01:44.250
So let's take a quick look at that and I
have not implemented that yet so I'm
18

19
00:01:44.250 --> 00:01:49.380
going to pause one second and get that
implemented. So you can see I've gone in
19

20
00:01:49.380 --> 00:01:54.090
and added this in. I have an IngredientService. I'm going to get back the
20

21
00:01:54.090 --> 00:01:58.530
IngredientCommand object from and add
that to the Model. So just to recap on
21

22
00:01:58.530 --> 00:02:02.759
line 38, we're going to use the get
request mapping and we're going to map
22

23
00:02:02.759 --> 00:02:08.369
it to recipe, recipe ID, slash recipe ID
slash ingredient slash the ID of the
23

24
00:02:08.369 --> 00:02:14.660
ingredient to show. And now let's what
make sure that our unit test runs.
24

25
00:02:14.660 --> 00:02:25.950
And we ran into an error here. You have
to pass it in the IngredientService. Now
25

26
00:02:25.950 --> 00:02:37.350
our tests, we run happily. Let's go ahead
and run that test now. So now we have a
26

27
00:02:37.350 --> 00:02:43.890
passing unit test and that's on the
controller. Let's go take a quick review
27

28
00:02:43.890 --> 00:02:49.230
that controller again just to recap. You
can see on line 38 to 43 that is the
28

29
00:02:49.230 --> 00:02:54.870
controller method I added in but now we
added in an implementation of the
29

30
00:02:54.870 --> 00:02:59.130
ingredient service. So I'm going to jump
over to that so we have a single
30

31
00:02:59.130 --> 00:03:04.200
interface with a single method there, findRecipeIdAndId, probably should
31

32
00:03:04.200 --> 00:03:10.650
rename that to something. A little bit
better, find by recipe ID and ingredient
32

33
00:03:10.650 --> 00:03:16.020
ID would make more sense there. So not
the best naming on my part. Let's go
33

34
00:03:16.020 --> 00:03:19.830
ahead and refactor that. You
can refactor things in intellij by
34

35
00:03:19.830 --> 00:03:28.650
coming into this and I'm going to say
ingredient ID and that makes a lot more
35

36
00:03:28.650 --> 00:03:30.830
sense.
36

37
00:03:32.300 --> 00:03:39.270
Ingredient ID, recipe ID and ingredient ID. So now that hadn't refactored that
37

38
00:03:39.270 --> 00:03:41.550
and that's going to do all the
implementations everywhere in the
38

39
00:03:41.550 --> 00:03:46.590
project so if I come over here to
implementations, we can see that IntelliJ
39

40
00:03:46.590 --> 00:03:51.470
automatically refactored that method to
make it a little more clean. And
40

41
00:03:51.470 --> 00:03:56.850
let's step through what's going on and
this. So I'm going to pass in the recipe
41

42
00:03:56.850 --> 00:04:03.480
ID and the ingredient ID that I get off
the URL from URL parameters. And what I
42

43
00:04:03.480 --> 00:04:09.030
want to do is go out and get a recipe
from the RecipeRepository by that ID
43

44
00:04:09.030 --> 00:04:15.600
and you can see there on line 33, I'm
saying if isPresent and we haven't
44

45
00:04:15.600 --> 00:04:20.640
gotten to exception handling yet. So I'm
putting a stub in there saying hey we if we
45

46
00:04:20.640 --> 00:04:24.390
don't find that recipe ID, we've got a
problem. We want a turn back
46

47
00:04:24.390 --> 00:04:27.360
404 because you're asking for something
that doesn't exist.
47

48
00:04:27.360 --> 00:04:31.259
Right now we're not doing that yet but
we will definitely get to that. So down
48

49
00:04:31.259 --> 00:04:38.340
on line 38 I get the recipe from the
optional and then on line 40 using Java
49

50
00:04:38.340 --> 00:04:45.539
streams to search for that ID that was
passed. Okay and by default we are going
50

51
00:04:45.539 --> 00:04:50.039
to get an Optional from that. So I'm
going in. I'm using converter. I'm using
51

52
00:04:50.039 --> 00:04:55.409
the map function. So just in case you're
not familiar with Java streams, so I'm saying
52

53
00:04:55.409 --> 00:05:00.569
recipe there on line 40, get the
ingredients get a stream of that and I'm
53

54
00:05:00.569 --> 00:05:05.520
going to filter that stream based on
where the ingredient ID equals the ID
54

55
00:05:05.520 --> 00:05:11.219
value that was passed. And then when I
get one, I'm going to map it. I'm going to
55

56
00:05:11.219 --> 00:05:16.409
map it over to an IngredientCommand
object and I'm going to say findFirst. Now
56

57
00:05:16.409 --> 00:05:22.050
again that's going to return back an
Optional. On line 44, I'm going to login
57

58
00:05:22.050 --> 00:05:28.560
that error from the Optional and then
return a get on that. So we also have
58

59
00:05:28.560 --> 00:05:37.289
implemented a unit test for this. Let's
take a quick look at that. So we did do
59

60
00:05:37.289 --> 00:05:42.449
this on a test driven development way
and you can see here I'm saying find the
60

61
00:05:42.449 --> 00:05:49.919
recipe by ID and should rename this
recipeId. And I'm also saying happy path
61

62
00:05:49.919 --> 00:05:54.960
there. So I'm going to fill all the
requirements of what this is expecting
62

63
00:05:54.960 --> 00:06:00.120
so you can see my given block is quite
big as far as just some of the data
63

64
00:06:00.120 --> 00:06:05.490
stuff that I do and set up. And so now
you can see I built up the ingredient
64

65
00:06:05.490 --> 00:06:09.659
and the recipe with two ingredients in
it are three ingredients and then I set
65

66
00:06:09.659 --> 00:06:15.810
up an Optional there on line 65 to
return back. On line 67, I set up the
66

67
00:06:15.810 --> 00:06:23.370
mock action for the RecipeRepository to
return back the Optional. Now in line 70
67

68
00:06:23.370 --> 00:06:28.409
I'm going to expect back that an
IngredientCommand and that is my then
68

69
00:06:28.409 --> 00:06:34.560
action. So I like to keep in my mind
given, when, then and then on line 72, I'm
69

70
00:06:34.560 --> 00:06:38.880
doing some assertions to that command of
it that came back. So let's go ahead and run
70

71
00:06:38.880 --> 00:06:42.319
this make sure that he's running.
71

72
00:06:42.790 --> 00:06:55.910
And we got an error there. So you can see
that the getRecipeId failed. So take a
72

73
00:06:55.910 --> 00:07:03.470
closer look at that. So for some reason
the getRecipeId did not pass but I did
73

74
00:07:03.470 --> 00:07:12.530
get the ID. So let's double check our
implementation and there's a problem
74

75
00:07:12.530 --> 00:07:23.750
with our converter. So you can see there,
I'm adding a one-line change of the
75

76
00:07:23.750 --> 00:07:27.950
converter because the type of conversion
wasn't happening right. So let's go ahead
76

77
00:07:27.950 --> 00:07:34.220
and see this run now. So we can see that
test is running. Let's double check, make
77

78
00:07:34.220 --> 00:07:40.910
sure that all our tests are running
properly. You can see as I'm going
78

79
00:07:40.910 --> 00:07:44.630
through coding, this following a
test-driven development method, I am
79

80
00:07:44.630 --> 00:07:48.440
adding in more and more tests and I did
break a couple more things. Let's take a
80

81
00:07:48.440 --> 00:07:55.220
quick look at that. So now we're getting
an NPE error. So that is important so
81

82
00:07:55.220 --> 00:07:58.750
let's take a look at this and do.
82

83
00:08:06.920 --> 00:08:15.890
We'll add in a null check on that one
and I think we had the same error there.
83

84
00:08:16.520 --> 00:08:23.520
It might be all of them and I think all those were affected by a null point error because
84

85
00:08:23.520 --> 00:08:26.940
it wasn't checked and see if that recipe
was bad. So let's go ahead and rerun
85

86
00:08:26.940 --> 00:08:33.780
the test now and see if that did in fact
fix it or not. Now we can see that we are
86

87
00:08:33.780 --> 00:08:37.530
clean across the board so this is a good
example of why you want to follow test
87

88
00:08:37.530 --> 00:08:41.969
driven development. I did have an
expected null pointer error there when I
88

89
00:08:41.969 --> 00:08:48.630
introduced that small change. So let's go
ahead and bring up Spring Boot again and
89

90
00:08:48.630 --> 00:08:51.630
it will take a quick look at that it's
in the browser and see how it's acting
90

91
00:08:51.630 --> 00:08:59.700
in the browser. Come on back over to
Chrome, and let's do a refresh on our
91

92
00:08:59.700 --> 00:09:04.290
ingredients. So you can see that our
order is changing kind of randomly
92

93
00:09:04.290 --> 00:09:07.440
because we don't have a sort on there so
it's just however it's coming out of the
93

94
00:09:07.440 --> 00:09:12.360
database. Now we can come up here in view,
so now we can see we did in fact go to
94

95
00:09:12.360 --> 00:09:18.630
the URL recipe. Number one for recipe
number one, ingredient and ingredient ID 8.
95

96
00:09:18.630 --> 00:09:23.130
So you can see how that corresponds to
the show functionality and here is
96

97
00:09:23.130 --> 00:09:27.750
something, it's a place that we can put
in the ability to edit that ingredient
97

98
00:09:27.750 --> 00:09:32.730
or more detailed information if we were
to add in create and update time
98

99
00:09:32.730 --> 00:09:37.589
stamps for a more detailed view
of that object. But in this case our
99

100
00:09:37.589 --> 00:09:43.560
ingredient is pretty simple. So really no
need to over complicate it here but
100

101
00:09:43.560 --> 00:09:47.570
in the next video we are going to look
at actually updating an existing
101

102
00:09:47.570 --> 00:09:50.570
ingredient.
