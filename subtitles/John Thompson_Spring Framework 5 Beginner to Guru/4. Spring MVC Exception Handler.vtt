WEBVTT
0
1
00:00:04.100 --> 00:00:09.120
Alright in this video what we want to
do is set up our application. So we return
1

2
00:00:09.120 --> 00:00:15.929
back a more friendly 404 error to
our users. So what I've done is I created
2

3
00:00:15.929 --> 00:00:21.810
a 404 error HTML. So nothing too
complicated here. So you can see the HTML
3

4
00:00:21.810 --> 00:00:25.410
up on the screen bringing in the same
things that we did before. I'm setting
4

5
00:00:25.410 --> 00:00:31.260
the title to 404 not found error and
then I just have a heading one 404 not
5

6
00:00:31.260 --> 00:00:37.260
found. You can see that on line 23 there. So I jump over to Chrome, we can see what
6

7
00:00:37.260 --> 00:00:41.309
it looks like here. It's a pretty simple
page and we can get a lot fancier here.
7

8
00:00:41.309 --> 00:00:46.260
For the main thing I want to show you
in this video is how to set that up. So
8

9
00:00:46.260 --> 00:00:51.840
when we do get a 404 error from our NotFoundException, we display this page.
9

10
00:00:51.840 --> 00:00:59.100
Let's jump back over here, so in our
RecipeController you can see down on
10

11
00:00:59.100 --> 00:01:03.870
line 63 I've added in an ExceptionHandler. So this ExceptionHandler
11

12
00:01:03.870 --> 00:01:08.520
returns back a ModelAndView and I just
gave it a name of handleNotFound and
12

13
00:01:08.520 --> 00:01:14.070
I'm saying with the ExceptionHandler
annotation there, I'm using our NotFound
13

14
00:01:14.070 --> 00:01:19.320
Exception class. So I do log an error
message saying we're handling a Not
14

15
00:01:19.320 --> 00:01:25.799
FoundException and then I set the view
name to 404 error which matches over
15

16
00:01:25.799 --> 00:01:31.020
here that 404 error HTML. So the Thymeleaf
templating engine will pick that up and
16

17
00:01:31.020 --> 00:01:37.710
render that and I've also written a
test and let's go ahead and run that
17

18
00:01:37.710 --> 00:01:43.829
test now. So actually I just modified
that so this is the not found and now
18

19
00:01:43.829 --> 00:01:48.750
I'm checking here on line 63 to
make sure that we're getting back the
19

20
00:01:48.750 --> 00:01:55.170
404 error. So when i get the status of
not found 404 in the HTTP status and not
20

21
00:01:55.170 --> 00:02:02.240
found. And let's go ahead and run that
and we're going to see a failure here.
21

22
00:02:02.240 --> 00:02:09.200
And what's happening is we're expecting
404 but we got 200. So we do have the
22

23
00:02:09.200 --> 00:02:15.470
annotation there on ResponseStatus but what's
happening is that is actually taking
23

24
00:02:15.470 --> 00:02:21.560
precedence. The handler method is taking
precedence so we can reuse this
24

25
00:02:21.560 --> 00:02:28.970
annotation right here. Now if we run our
test, our test is going to go ahead and
25

26
00:02:28.970 --> 00:02:33.920
run. So it's kind of how the Spring MVC
error handling works. This is the nature. So
26

27
00:02:33.920 --> 00:02:38.120
that's taken a higher precedence than
that exception class. So it didn't see
27

28
00:02:38.120 --> 00:02:43.130
that so to speak. So sometimes the stuff
gets a little tricky but you want to set
28

29
00:02:43.130 --> 00:02:49.220
it up and you can use that ResponseStatus
elsewhere which I am doing now on the
29

30
00:02:49.220 --> 00:02:54.680
controller method for that ExceptionHandler. So now my tests are passing,
30

31
00:02:54.680 --> 00:03:00.080
let's double check make sure all the
tests are passing here. And then we'll go
31

32
00:03:00.080 --> 00:03:07.970
ahead and run the application. We'll see
this in action. All the tests run and
32

33
00:03:07.970 --> 00:03:13.640
let's go ahead and start up our
application now. You'll see this in
33

34
00:03:13.640 --> 00:03:21.109
action. So we are up and running and
toggle over to Chrome. We have localhost,
34

35
00:03:21.109 --> 00:03:28.160
still recipe 4. So just click refresh
on that and we can see the 404 not found
35

36
00:03:28.160 --> 00:03:32.420
and we can also down here at the bottom
of the screen, I had positioned this so
36

37
00:03:32.420 --> 00:03:36.620
that we can see the log output as well. We can see that we are getting the
37

38
00:03:36.620 --> 00:03:41.480
handling NotFoundException. So we did
go into the ExceptionHandler and we can
38

39
00:03:41.480 --> 00:03:47.269
see that also that we got this output
from a framework that is, remember what I
39

40
00:03:47.269 --> 00:03:55.190
mentioned. Let's go ahead and take a look
at that class. So this is the Exception
40

41
00:03:55.190 --> 00:03:59.209
HandlerExceptionResolver. So this is
what we looked at in the PowerPoint so
41

42
00:03:59.209 --> 00:04:06.160
it extends that.
Extends that. And ultimately it extends
42

43
00:04:06.160 --> 00:04:10.240
that interface and this is the interface
that Spring MVC is going to be using
43

44
00:04:10.240 --> 00:04:15.520
internally. And if we want to do a lot
more versatile error handling within
44

45
00:04:15.520 --> 00:04:18.940
Spring MVC, we could extend out this
class but I am not going to be showing
45

46
00:04:18.940 --> 00:04:22.900
an example on that because you typically
don't get into that because the error
46

47
00:04:22.900 --> 00:04:27.520
handling capabilities that you do have
inside of Spring MVC is more than.
47

48
00:04:27.520 --> 00:04:31.270
It's plenty versatile enough for your needs.
I've never had to do it in my experience
48

49
00:04:31.270 --> 00:04:35.950
using Spring. I know it's there but I
just don't have to use that. So this
49

50
00:04:35.950 --> 00:04:41.020
is a perfect example I'm able to use the
annotation based method and return back
50

51
00:04:41.020 --> 00:04:45.460
my own custom ModelAndView for the view
that I want. But I did want to show you
51

52
00:04:45.460 --> 00:04:50.860
how we are getting a warning message out there where we did get that picked up. So
52

53
00:04:50.860 --> 00:04:56.050
this error handler ultimately is getting
delegated over to this guy here. So I
53

54
00:04:56.050 --> 00:04:58.890
hope that makes sense.
