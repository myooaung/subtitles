WEBVTT
0
1
00:00:04.220 --> 00:00:08.429
Alright, we are gonna take a look at
some of the testing stuff that we have
1

2
00:00:08.429 --> 00:00:11.820
for Spring. So what I wanna do is
establish common terminology around
2

3
00:00:11.820 --> 00:00:15.450
testing. What is the difference between
the unit tests and integration test is
3

4
00:00:15.450 --> 00:00:19.500
pretty important. What is a functional
test important stuff and then we're
4

5
00:00:19.500 --> 00:00:25.380
gonna dive in and look at the tools
that we have for testing Spring
5

6
00:00:25.380 --> 00:00:30.810
applications. Alright, in this video we
are gonna talk about testing within
6

7
00:00:30.810 --> 00:00:37.200
the Spring framework. Now I wanna get
into some testing terminology first. Code
7

8
00:00:37.200 --> 00:00:41.579
under test. So this is a phrase that is
gonna refer to the code or the
8

9
00:00:41.579 --> 00:00:46.140
application that you are testing. So this
is the actual application code. It could
9

10
00:00:46.140 --> 00:00:50.760
be a class, a method or a whole
application if we're doing functional
10

11
00:00:50.760 --> 00:00:57.539
testing. So and then the other term that
we need to distinguish is Test fixture. A
11

12
00:00:57.539 --> 00:01:02.969
Test fixture is a fixed state of a set
of objects used as a baseline for
12

13
00:01:02.969 --> 00:01:07.470
running tests. The purpose of a Test
Fixture is to ensure that there will be
13

14
00:01:07.470 --> 00:01:12.630
a well known and fixed environment in
which the tests are run so that the
14

15
00:01:12.630 --> 00:01:16.710
results are repeatable and this is right
out of the JUnit documentation. So this
15

16
00:01:16.710 --> 00:01:22.560
is pretty fairly important. You get two
distinctions here. One is, let's say keep
16

17
00:01:22.560 --> 00:01:28.110
it simple you have a class that does
something. The Test Fixture is the test
17

18
00:01:28.110 --> 00:01:33.900
itself and anything that class is gonna depend on. So that could include input
18

19
00:01:33.900 --> 00:01:39.270
data, any mock objects, maybe loading a
database with known data or giving a
19

20
00:01:39.270 --> 00:01:43.560
known set of inputs to that method
that you're testing. So two very
20

21
00:01:43.560 --> 00:01:48.570
important distinctions here I see people
get these a little blurred at times but
21

22
00:01:48.570 --> 00:01:52.470
you have Code Under Test that is gonna be your code that you wrote for
22

23
00:01:52.470 --> 00:01:57.360
the application, the class, or whatever
the method. And then the Test Fixture is
23

24
00:01:57.360 --> 00:02:02.729
the stuff around it that you're using to
test that code. Unit Tests / Unit
24

25
00:02:02.729 --> 00:02:07.910
Testing. This is code written to test
code under test. So should be very
25

26
00:02:07.910 --> 00:02:14.069
specific, you're going after to
test a specific portion of code such as
26

27
00:02:14.069 --> 00:02:20.329
a method within a class. Now the
percentage of the lines code tested
27

28
00:02:20.329 --> 00:02:25.079
ideally is in the 70% range 70-80%. Some people disagree on this,
28

29
00:02:25.079 --> 00:02:29.069
some people like to see it more, some
people say less. There's a diminishing
29

30
00:02:29.069 --> 00:02:34.200
returns on this so you're writing code
to test code. You do wanna have solid
30

31
00:02:34.200 --> 00:02:37.590
coverage but if you start getting up
around 100 percent that's where you're
31

32
00:02:37.590 --> 00:02:41.370
becoming very very nitpicky. So you get a
diminishing returns when you start
32

33
00:02:41.370 --> 00:02:47.459
getting beyond 80%. So you'll be writing
test like code log statements and
33

34
00:02:47.459 --> 00:02:50.669
getters and setters and things like that
where you don't have a lot of value in
34

35
00:02:50.669 --> 00:02:56.489
the test code. So I like to shoot in the
70-80% range. It's a good place
35

36
00:02:56.489 --> 00:03:03.150
to be because you are getting effective
test coverage there. Now you should be
36

37
00:03:03.150 --> 00:03:08.459
'unity' in your test, it's a kind of a
made-up word there but your unit test
37

38
00:03:08.459 --> 00:03:12.780
should be small and fast. They're
gonna be targeting very specific
38

39
00:03:12.780 --> 00:03:18.120
things and a true unit test is not gonna have any external dependencies. It
39

40
00:03:18.120 --> 00:03:21.209
should not be running on the database, it
should not be bringing up a Spring
40

41
00:03:21.209 --> 00:03:26.250
context, it should just be your java
class and your test code. So that is
41

42
00:03:26.250 --> 00:03:32.669
a true unit test and that is in it
addition to or in contrast to I should
42

43
00:03:32.669 --> 00:03:38.190
say Integration Tests. Now these are
designed to test behaviors between
43

44
00:03:38.190 --> 00:03:42.780
objects and parts of the overall system. Integration tests are much larger scope
44

45
00:03:42.780 --> 00:03:48.269
than unit tests. They can include the
Spring context, database, message brokers.
45

46
00:03:48.269 --> 00:03:53.400
The downside of your integration test is
that they are gonna run slower than
46

47
00:03:53.400 --> 00:03:57.930
unit tests and that's an important
distinction in your unit test when
47

48
00:03:57.930 --> 00:04:03.229
you're just targeting a method on a
class is gonna run in a fraction of a
48

49
00:04:03.229 --> 00:04:07.680
second. Integration test, if you're
bringing up a database through the
49

50
00:04:07.680 --> 00:04:13.169
Spring context that could take 30
seconds or so or 40 seconds. But the
50

51
00:04:13.169 --> 00:04:19.289
distinction is, a fraction of second. So
it versus 30 seconds, it's exponentially
51

52
00:04:19.289 --> 00:04:24.690
larger and the importance is when you
start getting into a large project,
52

53
00:04:24.690 --> 00:04:28.980
your integration tests are gonna take
time to run. It could take five minutes,
53

54
00:04:28.980 --> 00:04:32.010
it could take ten minutes, it could take
a half-hour depending on how large the
54

55
00:04:32.010 --> 00:04:37.110
project you have. And I see a lot of
developers favor integration tests on
55

56
00:04:37.110 --> 00:04:42.930
things that could be done in a unit
tests. So I like to try to focus on unit
56

57
00:04:42.930 --> 00:04:46.710
tests over integration tests but
integration tests absolutely do have a
57

58
00:04:46.710 --> 00:04:51.510
place. Now Functional Tests typically
means you're gonna test a running
58

59
00:04:51.510 --> 00:04:57.330
application. Your application is live and
likely deployed in a known environment.
59

60
00:04:57.330 --> 00:05:02.250
So you're gonna be bringing up as
much as you can in that and you're going
60

61
00:05:02.250 --> 00:05:06.360
to be looking at functional touch points. You could be using a Selenium WebDriver
61

62
00:05:06.360 --> 00:05:11.700
or Geb and Spock to automatically
test a web application to run a mock
62

63
00:05:11.700 --> 00:05:16.950
browser and test browser actions. It could
be calling web services, calling the API
63

64
00:05:16.950 --> 00:05:20.910
and a web service and sending in reports
and sending and receiving messages over
64

65
00:05:20.910 --> 00:05:25.680
a message broker. So this is where you
are doing functional or also called
65

66
00:05:25.680 --> 00:05:31.380
end-to-end testing is another bucket for
a functional test. And let's talk about
66

67
00:05:31.380 --> 00:05:34.500
Test Driven D\evelopment. So that's what
we're gonna be doing in this course
67

68
00:05:34.500 --> 00:05:39.030
going forward. This is the best practice. Effectively what you wanna do is write
68

69
00:05:39.030 --> 00:05:43.080
your test first and of course it's gonna be
failing and then you're going to produce
69

70
00:05:43.080 --> 00:05:47.910
code to fix the test. Now Behavior Driven
Development, something that builds upon
70

71
00:05:47.910 --> 00:05:53.760
Test Driven Development and it specifies
that test, any unit of software should be
71

72
00:05:53.760 --> 00:05:59.100
specified in terms of the desired
behavior of the unit. This is often done
72

73
00:05:59.100 --> 00:06:07.040
with DSLs to create a natural language. The goal of BDD is to open up the
73

74
00:06:07.040 --> 00:06:12.810
test to more business users and out of developer hands. So you
could have a strong QA or testing person
74

75
00:06:12.810 --> 00:06:16.950
that's technically adept but you give them a
natural language DSL where they can
75

76
00:06:16.950 --> 00:06:22.350
configure different scenarios. I've used
Cucumber. That's a good alternative I've
76

77
00:06:22.350 --> 00:06:26.610
never used JBehave but I hear good
things about it but my personal favorite
77

78
00:06:26.610 --> 00:06:32.490
for BDD is Spock. That's a Groovy based
test framework and a good example of
78

79
00:06:32.490 --> 00:06:36.780
Spock is you get a given, when, then. I
really like using Spock especially the
79

80
00:06:36.780 --> 00:06:41.060
given, when, then
because it gives you a good framework
80

81
00:06:41.060 --> 00:06:44.360
about thinking about your test. So you're
gonna think about a scenario where
81

82
00:06:44.360 --> 00:06:50.240
you're given a set of data, when is the
action like calling a method on a class
82

83
00:06:50.240 --> 00:06:55.340
and the then statement is what you
expect to happen. And you've got to
83

84
00:06:55.340 --> 00:06:59.060
create test criteria around that. So it's
a really good thing to use and I
84

85
00:06:59.060 --> 00:07:04.400
personally really favor Spock for
the tests that I write. Now a couple
85

86
00:07:04.400 --> 00:07:09.050
other terminologies is a Mock and we are
gonna definitely be taking advantage
86

87
00:07:09.050 --> 00:07:13.880
of mocks. It's a fake implementation of a
class used for testing. It's kind of like a
87

88
00:07:13.880 --> 00:07:19.430
test double and you see how I've been
teaching you to implement an interface
88

89
00:07:19.430 --> 00:07:24.289
and do dependency injection with an
interface. Well guess what our mocks can
89

90
00:07:24.289 --> 00:07:29.930
implement that interface and allows us
to test dependency injection classes so
90

91
00:07:29.930 --> 00:07:35.990
we can inject a mock in there for our
unit test. Now a Spy is a partial mock
91

92
00:07:35.990 --> 00:07:42.080
and usually use this for a heavyweight
class where you wanna add in, use that
92

93
00:07:42.080 --> 00:07:46.580
class but you wanna select methods,
specific methods of that real class to
93

94
00:07:46.580 --> 00:07:51.229
mock out. So I don't see this used a lot. I
mean there are scenarios where you do
94

95
00:07:51.229 --> 00:07:55.820
wanna use this as a tool in the
toolbox. I generally favor mocking over
95

96
00:07:55.820 --> 00:08:01.160
using Spys but there are scenarios
where you do need to use a spy. Alright
96

97
00:08:01.160 --> 00:08:05.120
testing goals. Touched on this a little
bit already but generally you want the
97

98
00:08:05.120 --> 00:08:08.960
majority your test to be unit test. Bringing up a Spring context does make
98

99
00:08:08.960 --> 00:08:14.330
your tests exponentially slower. So I
really focus on testing business logic
99

100
00:08:14.330 --> 00:08:18.919
inside of unit tests and that's where
you want to test the majority. Your
100

101
00:08:18.919 --> 00:08:23.389
integration tests are gonna be
testing more integrated things. You're looking
101

102
00:08:23.389 --> 00:08:27.530
to make sure that interactions work
properly between different components. So
102

103
00:08:27.530 --> 00:08:32.630
you're not gonna be as granular in
the specificity of what you're
103

104
00:08:32.630 --> 00:08:36.020
testing. With integration test you're
gonna be a little bit loose around
104

105
00:08:36.020 --> 00:08:40.099
the specific criteria. You're looking
more for the interaction there where
105

106
00:08:40.099 --> 00:08:44.330
your unit test, you're gonna be more
precise and what you're asking the test
106

107
00:08:44.330 --> 00:08:51.050
to verify. And a good way to think about
this is think of like a pyramid where
107

108
00:08:51.050 --> 00:08:52.720
the
base of that pyramid is gonna be made
108

109
00:08:52.720 --> 00:08:56.290
up of your unit tests. That's where you
should have the most number of tests and
109

110
00:08:56.290 --> 00:09:00.940
then the middle of that, is gonna be
your integration test. And at the top
110

111
00:09:00.940 --> 00:09:04.690
that's where your functional tests are gonna live. So you should, in an
111

112
00:09:04.690 --> 00:09:09.460
ideal world you can have lots and lots
of unit tests, less integration tests and
112

113
00:09:09.460 --> 00:09:16.840
even less functional tests. Okay, test scope
dependencies. We have been using the
113

114
00:09:16.840 --> 00:09:21.990
Spring initializr and that has been
bringing in our spring-boot-starter-test
114

115
00:09:21.990 --> 00:09:27.910
dependency and when we do that, we get
the following dependencies in there. So
115

116
00:09:27.910 --> 00:09:32.830
we get JUnit and that is really the de-facto standard for unit testing Java
116

117
00:09:32.830 --> 00:09:38.320
applications. Wildly popular, it's really
risen to the top of popularity. Most
117

118
00:09:38.320 --> 00:09:43.480
shops that I work with use JUnit. That's
kind of what I said, the de-facto
118

119
00:09:43.480 --> 00:09:48.640
standard. So it is a very very popular
and a  simple testing framework to use and
119

120
00:09:48.640 --> 00:09:52.540
we will be looking at that shortly. Spring test and Spring Boot test, these
120

121
00:09:52.540 --> 00:09:56.560
are a set of utilities that Spring
provides for testing Spring and Spring
121

122
00:09:56.560 --> 00:10:01.540
Boot applications. AssertJ, that is a
fluent assertion library and we'll take
122

123
00:10:01.540 --> 00:10:06.850
a look at that later. Hamcrest is a
library of matcher objects. So JUnit
123

124
00:10:06.850 --> 00:10:12.250
itself does have some capabilities as
far as doing assertions but Hamcrest
124

125
00:10:12.250 --> 00:10:17.650
gives us a lot more interesting
capabilities. Mockito is a Java mocking
125

126
00:10:17.650 --> 00:10:22.089
framework. It is very popular and we will
definitely be utilizing Mockito
126

127
00:10:22.089 --> 00:10:28.240
and we have JSONassert and JSONPath, these two we when we get into developing
127

128
00:10:28.240 --> 00:10:35.500
restful interfaces we will be leveraging
those. Now we spoke about JUnit. JUnit 4
128

129
00:10:35.500 --> 00:10:39.730
is very popular right now. It was
originally written by Erich Gamma and
129

130
00:10:39.730 --> 00:10:44.920
Kent Beck and Kent Beck is a very iconic
guy in the community. He's the creator of
130

131
00:10:44.920 --> 00:10:49.030
extreme programming and big agile guy. There's a lot of great working
131

132
00:10:49.030 --> 00:10:54.250
great contributions to the community. Now at the time of recording, JUnit 5 is
132

133
00:10:54.250 --> 00:11:01.990
in alpha. Milestone 1 is expected in July
2017 and it's supposed to go GA. I got a
133

134
00:11:01.990 --> 00:11:07.839
little typo there third quarter of 2017. Now let's take a look at some of the
134

135
00:11:07.839 --> 00:11:14.920
JUnit 4 annotations. @Test is an
annotation to declare a test method so
135

136
00:11:14.920 --> 00:11:19.750
that says that it is gonna be an
independent test. And the other ones that
136

137
00:11:19.750 --> 00:11:25.060
are important is @Before and @After. These
are gonna be things that execute
137

138
00:11:25.060 --> 00:11:30.670
before each test and it's a good way to
initialize something. And @After you don't
138

139
00:11:30.670 --> 00:11:35.440
see it used too much but that is gonna be cleaning up things. Then you have
139

140
00:11:35.440 --> 00:11:39.580
@BeforeClass and @AfterClass. These are
gonna be executed once before
140

141
00:11:39.580 --> 00:11:45.430
starting all tests and then @AfterClass
likewise. I don't see too much use for
141

142
00:11:45.430 --> 00:11:51.130
those but you do have use cases for that. @Ignore is a way to disable a test.
142

143
00:11:51.130 --> 00:11:56.080
Sometimes you do break things by
accident and you acknowledge it and you
143

144
00:11:56.080 --> 00:11:59.890
say okay I'm gonna ignore this while
I work on something else and fix it and
144

145
00:11:59.890 --> 00:12:04.060
come back and fix it. So there are cases
where you do wanna use ignore but
145

146
00:12:04.060 --> 00:12:09.820
sometimes you don't want to. Then the
@Test annotation you can also say you're
146

147
00:12:09.820 --> 00:12:16.450
expecting an exception. So you do wanna
test a non-happy path and make sure if
147

148
00:12:16.450 --> 00:12:19.750
you have a condition that you're
expecting it which can cause an
148

149
00:12:19.750 --> 00:12:24.040
exception, you wanna be testing for
that. And then test timeout as a way to
149

150
00:12:24.040 --> 00:12:30.220
say if the test takes longer than X
number of milliseconds. And we have a
150

151
00:12:30.220 --> 00:12:34.480
variety of Spring Boot annotation. I'm
gonna go through these some of these
151

152
00:12:34.480 --> 00:12:39.700
quickly and talk about the ones that we
are most likely to be using. We have 
152

153
00:12:39.700 --> 00:12:43.330
@RunWith. We will definitely be using that
and that brings up a SpringRunner and
153

154
00:12:43.330 --> 00:12:48.870
this is what allows Spring to work with
JUnit to bring up the Spring Context.
154

155
00:12:48.870 --> 00:12:55.270
@SpringBootTest is an annotation that
is going to look for the Spring Boot
155

156
00:12:55.270 --> 00:12:58.089
Application and bring up its
configuration. So it's kind of
156

157
00:12:58.089 --> 00:13:02.350
automatically gonna use your same
configuration. Then you can also override
157

158
00:13:02.350 --> 00:13:06.310
that with the annotation @TestConfiguration. So that's gonna specify
158

159
00:13:06.310 --> 00:13:14.380
a specific configuration. @MockBean
it's going to inject a Mockito mock so
159

160
00:13:14.380 --> 00:13:19.220
this is a really handy way to create a
mock object and get a mockito mock
160

161
00:13:19.220 --> 00:13:23.630
into your tets and we'll definitely be
walking through examples of that. And
161

162
00:13:23.630 --> 00:13:28.400
then @SpyBean. Similarly, it injects a mockito spy. And then let's
162

163
00:13:28.400 --> 00:13:33.350
see here we get @JsonTest, @WebMvcTest
and @DataJpaTest. These are all
163

164
00:13:33.350 --> 00:13:38.450
different annotations that bring up different
Spring slices of the system. So
164

165
00:13:38.450 --> 00:13:41.960
@JsonTest is something that you should be
using when you are expecting to use
165

166
00:13:41.960 --> 00:13:49.100
Json input and output. Likely developing
a RESTful API. And you have @WebMvcTest,
166

167
00:13:49.100 --> 00:13:53.630
this is gonna bring up a test context
without a full HTTP server. So this
167

168
00:13:53.630 --> 00:13:58.400
is actually a very important one.  It
allows us to test the Spring web MVC
168

169
00:13:58.400 --> 00:14:05.540
controllers with a mock HTTP session in
environment without the heavyweight of
169

170
00:14:05.540 --> 00:14:10.940
bringing up like a tomcat server or
deploying to Tomcat. Then @DataJpaTest,
170

171
00:14:10.940 --> 00:14:16.100
this is gonna bring up a test data
layer with an embedded database and also
171

172
00:14:16.100 --> 00:14:21.460
the entity managers. So this gives us
like, we can you test Spring Data JPA
172

173
00:14:21.460 --> 00:14:28.240
against a in memory database. Now we have
a variety of other annotations here.
173

174
00:14:28.240 --> 00:14:34.310
@JdbcTest is like the @DataJpaTest but
it does not bring up the entity manager
174

175
00:14:34.310 --> 00:14:38.480
so you're going to be doing tests for
SQL with that. You can test with Mongo,
175

176
00:14:38.480 --> 00:14:42.770
rest client, Rest Docs is something that
we'll be looking at in the future when we
176

177
00:14:42.770 --> 00:14:47.960
get to talking about RESTful APIs. Then a
very important one is 
177

178
00:14:47.960 --> 00:14:53.270
@ContextConfiguration, this allows us to specify
a context for the test. It gives us a lot
178

179
00:14:53.270 --> 00:14:57.830
of control of how Spring brings up the
context. @ActiveProfiles is something
179

180
00:14:57.830 --> 00:15:01.130
that we'll definitely be looking at in
the future of the course. It allows us to
180

181
00:15:01.130 --> 00:15:06.200
specify active profile as to which
active profile we wanna be using for a
181

182
00:15:06.200 --> 00:15:12.530
specific test. @TestPropertySource
allows us to specify a specific property
182

183
00:15:12.530 --> 00:15:16.400
files for the test.
@DirtiesContext is a very important one
183

184
00:15:16.400 --> 00:15:22.160
that is going to reset the Spring
context. So when you're running the
184

185
00:15:22.160 --> 00:15:26.390
Spring Context, it is gonna get cached
between tests so you run multiple tests
185

186
00:15:26.390 --> 00:15:31.100
against a single Spring context. It's not
gonna get recreated for each one but
186

187
00:15:31.100 --> 00:15:35.250
when you do the @DirtiesContext,
if you've corrupted something in an
187

188
00:15:35.250 --> 00:15:38.940
environment, this is where you wanna
use this and it's going to rebuild the
188

189
00:15:38.940 --> 00:15:43.500
Spring context. After that, the test runs. And this is very expensive to do so
189

190
00:15:43.500 --> 00:15:48.150
there is a need for it but use that one
with caution. The next one I wanna talk
190

191
00:15:48.150 --> 00:15:52.470
about is @Transactional. This is something
that we're gonna use definitely when
191

192
00:15:52.470 --> 00:15:56.940
we're testing database integration and
we haven't really talked too much about
192

193
00:15:56.940 --> 00:16:01.460
transactions but what this allows us to
do is run our tests, manipulate data and
193

194
00:16:01.460 --> 00:16:06.320
by default, Spring will roll it back. Now if you don't mark it as
194

195
00:16:06.320 --> 00:16:10.230
@Transactional, what's gonna happen is the
test will run and it's gonna
195

196
00:16:10.230 --> 00:16:15.720
populate that data, the test data
generated by the test to your database
196

197
00:16:15.720 --> 00:16:21.690
and it will be persisted. So it could
corrupt another test. So this is a good
197

198
00:16:21.690 --> 00:16:26.790
annotation to have. And then @BeforeTransaction, @AfterTransaction, that's
198

199
00:16:26.790 --> 00:16:31.710
stuff to do before. Obviously
transactions. @Commit is to specify that,
199

200
00:16:31.710 --> 00:16:36.450
we want that test to commit its data
unlike rolling backward which is what
200

201
00:16:36.450 --> 00:16:43.320
happens by default. Now we can actually
specify rollback if we need to. @Sql is a
201

202
00:16:43.320 --> 00:16:47.790
very handy one, it allows us to specify
SQL scripts that we wanna run for our
202

203
00:16:47.790 --> 00:16:53.310
test and then @SqlConfig will allow us
control some metadata around the test.
203

204
00:16:53.310 --> 00:16:59.310
And @SqlGroup just allows us to group
together several SQL annotations and 
204

205
00:16:59.310 --> 00:17:06.570
@SqlConfig. @Repeat says to repeat the test x
number of times. And then we have @Timed,
205

206
00:17:06.570 --> 00:17:12.030
it's very similar to JUnit's @Timeout
but it will actually wait for the test
206

207
00:17:12.030 --> 00:17:17.040
to complete unlike JUnit. And then @IdProfileValue and @ProfileValueSourceConfiguration,
207

208
00:17:17.040 --> 00:17:21.480
these are kind of rarely
used but we can say that we are
208

209
00:17:21.480 --> 00:17:27.320
indicating a test is available for a
specific profile.
