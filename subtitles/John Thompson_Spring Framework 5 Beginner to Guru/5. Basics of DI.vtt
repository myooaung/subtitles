WEBVTT
0
1
00:00:05.060 --> 00:00:11.060
OK in this lecture we want to talk about dependency injection and this a very very core concept of the
1

2
00:00:11.360 --> 00:00:13.060
spring framework.
2

3
00:00:13.070 --> 00:00:17.300
Now you might not be familiar with dependency injection but here's a great quote I got a chuckle out
3

4
00:00:17.300 --> 00:00:23.030
of this one dependency injection for five year olds is when you go and get things out of the refrigerator
4

5
00:00:23.030 --> 00:00:23.710
yourself.
5

6
00:00:23.780 --> 00:00:28.010
You can cause problems you might leave the door open you might get something mommy and daddy doesn't
6

7
00:00:28.010 --> 00:00:28.850
want you to have.
7

8
00:00:29.000 --> 00:00:32.660
You might even be looking for something we don't have or which is expired.
8

9
00:00:32.750 --> 00:00:38.120
What you should be doing is stating a need I need something to drink with lunch and then we'll make
9

10
00:00:38.120 --> 00:00:41.100
sure that you have something when you sit down to eat.
10

11
00:00:41.120 --> 00:00:48.310
So I do get a chuckle out of this because it is pretty accurate a description for a five year old now
11

12
00:00:48.460 --> 00:00:55.490
Dependency Injection is where a needed dependency is injected by another object. The class that is being
12

13
00:00:55.490 --> 00:01:00.440
injected has no responsibility and instantiating the object that is being injected.
13

14
00:01:00.440 --> 00:01:05.160
Some will say that you should avoid declaring objects by using the new keyword.
14

15
00:01:05.160 --> 00:01:07.790
And some people get pretty militant on that.
15

16
00:01:07.790 --> 00:01:11.500
I've seen people go overboard with that. Not 100 percent correct.
16

17
00:01:11.510 --> 00:01:13.830
If you need something small and minor.
17

18
00:01:14.030 --> 00:01:16.990
Yes yes you do want to avoid that.
18

19
00:01:17.010 --> 00:01:22.950
A good example going back to our five year old example is like a database connection.
19

20
00:01:22.970 --> 00:01:27.980
So if you needed a database connection and your hard wiring that database connection inside your class
20

21
00:01:28.010 --> 00:01:29.340
think about what you're doing.
21

22
00:01:29.430 --> 00:01:34.190
You're going out and you might be hard coding the database credentials the name of the server and so
22

23
00:01:34.190 --> 00:01:34.730
on.
23

24
00:01:34.910 --> 00:01:37.610
And what if you forget to close a connection or something like that.
24

25
00:01:37.610 --> 00:01:39.430
Now you're you're causing problems.
25

26
00:01:39.590 --> 00:01:45.380
So it also could make your code very un maintainable because what we want to use a different database
26

27
00:01:45.590 --> 00:01:52.220
or moved to a different database server so your class that's being run really has no interest in in
27

28
00:01:52.430 --> 00:01:56.830
the database and where the database is located the user credentials and all that.
28

29
00:01:56.930 --> 00:02:03.800
That is a dependency that can easily be injected so that that's a great example of dependency injection.
29

30
00:02:03.950 --> 00:02:07.290
Another example was you might want to send a message and put a message on a queue.
30

31
00:02:07.290 --> 00:02:11.710
Now you don't care if you're using ActiveMQ or RabbitMQ you just want to send a message.
31

32
00:02:11.710 --> 00:02:18.080
So that's another great use case for dependency injection just to see for you doesn't start in versioning
32

33
00:02:18.500 --> 00:02:24.980
why it's such a powerful tool to make your code higher quality more versatile and easier to maintain.
33

34
00:02:26.600 --> 00:02:32.000
Now there's a couple of different types of dependency injection. You can do it right by class properties.
34

35
00:02:32.060 --> 00:02:38.360
If you had a public property you can easily do dependency injection. Just set the property and inside
35

36
00:02:38.360 --> 00:02:45.440
a Spring you can actually dependency inject against private properties and you can see there I've bolded
36

37
00:02:45.530 --> 00:02:50.430
evil using private properties as absolutely evil. It's highly frowned upon.
37

38
00:02:50.510 --> 00:02:53.190
I see it and use way too much.
38

39
00:02:53.450 --> 00:03:00.080
And basically you're creating a class and you are Spring use of reflection to get around this for
39

40
00:03:00.080 --> 00:03:06.200
you but you've created a class to instantiate that class and get your code run somehow that dependent
40

41
00:03:06.200 --> 00:03:13.910
object needs get created and it can't be done without having to go around the walls to using the reflection.
41

42
00:03:13.910 --> 00:03:19.400
So if you think about it I have this class now it basically said no you can't unit test night class
42

43
00:03:19.760 --> 00:03:20.780
absolutely impossible.
43

44
00:03:20.830 --> 00:03:25.220
That lesson you're gonna jump through a bunch of hoops to go ahead and use reflection to inject that
44

45
00:03:25.520 --> 00:03:30.470
but otherwise you can't unit test that class and that's exactly what happens when you run dependency
45

46
00:03:30.470 --> 00:03:36.210
injection against private property because you could just make your class completely impossible to test.
46

47
00:03:36.230 --> 00:03:43.340
Now the next thing that we have is by Setters. and this is an area of much debate I used to prefer Setter
47

48
00:03:43.340 --> 00:03:46.610
based dependency injection and this is an old memory.
48

49
00:03:46.610 --> 00:03:54.020
This goes back to like Spring to 5 ish maybe 3 constructor injection used to be a little bit buggy but
49

50
00:03:54.020 --> 00:03:56.700
that's a really no longer an issue.
50

51
00:03:56.950 --> 00:04:04.280
Setters is not the most preferred and there's a lot of debate in the community because the pure object
51

52
00:04:04.280 --> 00:04:09.260
oriented type people are going to prefer By Constructor and that as my preferred method is to do dependency
52

53
00:04:09.260 --> 00:04:14.720
injection by constructor and the thought being there as you can't instantiate the class without the
53

54
00:04:14.720 --> 00:04:15.830
dependencies.
54

55
00:04:16.010 --> 00:04:20.480
So it's definitely a preferred type of dependency injection.
55

56
00:04:20.520 --> 00:04:26.880
Now the next thing we need to talk about is the use of concrete classes versus interfaces. Now dependency
56

57
00:04:26.900 --> 00:04:31.880
injection can be done with either you can either use a concrete class or an interface.
57

58
00:04:31.880 --> 00:04:38.500
Generally I like to say this is a generalization to avoid dependency injection with concrete classes
58

59
00:04:39.140 --> 00:04:45.950
because what you're doing is when you do this you're saying I must have the specific type of class so
59

60
00:04:46.430 --> 00:04:51.680
going back to the database example if I was looking for a database connection I'm gonna use a data source
60

61
00:04:51.800 --> 00:04:52.860
interface.
61

62
00:04:53.060 --> 00:04:55.400
Allow any data source to get injected.
62

63
00:04:55.400 --> 00:05:01.450
I'm not going to use these specific implementation provided by MySQL.
63

64
00:05:01.540 --> 00:05:08.870
Now if I did that now I've hard wired my class to MySQL and I wouldn't be able to use another
64

65
00:05:08.960 --> 00:05:13.870
database without that without modifying my class to a different type.
65

66
00:05:14.000 --> 00:05:20.630
So Dependency Injection view view interfaces is highly preferred and what this does is it allows the
66

67
00:05:20.630 --> 00:05:29.000
runtime to decide the implementation to inject. So any class that implements that interface can be interjected
67

68
00:05:29.030 --> 00:05:35.840
into your class and if you remember we started off with the solid principles of object oriented design.
68

69
00:05:36.120 --> 00:05:40.210
This follows nicely the interface segregation principle of SOLID.
69

70
00:05:40.980 --> 00:05:46.520
And another point of using interfaces is going to make your code a lot more testable because now you
70

71
00:05:46.520 --> 00:05:51.860
can run, you can write your own mocks, you can use Mockito of when you're running unit tests and do true
71

72
00:05:51.950 --> 00:05:57.320
unit test against your class by providing a mocked interface.
72

73
00:05:57.320 --> 00:06:02.810
Now if you're to run against a concrete type you could easily get in trouble there because maybe if
73

74
00:06:02.810 --> 00:06:08.210
you were going across MySQL implementation of data service guess what to test that class you're gonna
74

75
00:06:08.210 --> 00:06:14.250
have to inject MySQL edit type in there and have a MySQL database running. So going 
75

76
00:06:14.250 --> 00:06:20.010
against an interface is much easier and very very much preferred. Now the next thing when you talk about
76

77
00:06:20.010 --> 00:06:23.360
is inversion of control it's also known as IOC.
77

78
00:06:23.490 --> 00:06:29.370
Now this is a technique to allow the dependencies to be injected at runtime. The dependencies are not
78

79
00:06:29.370 --> 00:06:30.480
predetermined.
79

80
00:06:30.480 --> 00:06:32.200
So I can easily write code.
80

81
00:06:32.200 --> 00:06:37.830
It could structure my code for dependency injection and the right of wrapper class around it to hard
81

82
00:06:37.860 --> 00:06:41.650
wire those dependencies in. That would be technically legal.
82

83
00:06:41.670 --> 00:06:45.960
The concept of inversion control is that you're going to have some type of framework that's going to
83

84
00:06:45.960 --> 00:06:50.370
determine at runtime what dependencies to inject.
84

85
00:06:50.390 --> 00:06:56.430
Now this is a great quote from Ralph Johnson and Brian Foote. One important characteristics of a framework
85

86
00:06:56.460 --> 00:07:01.860
is that the methods defined by the user to tailor the framework will often be called from within the
86

87
00:07:01.860 --> 00:07:06.340
framework itself rather than from the user's application code.
87

88
00:07:06.340 --> 00:07:12.950
The framework often plays the role of the main program coordinate in sequencing application activity.
88

89
00:07:13.050 --> 00:07:19.450
This inversion of control gives frameworks the power to serve as extensible skeletons.
89

90
00:07:19.830 --> 00:07:26.040
The methods supplied by the user tailor generic algorithms defined and the framework for a particular
90

91
00:07:26.040 --> 00:07:27.600
application.
91

92
00:07:27.600 --> 00:07:31.390
And this is really exactly what spring framework does.
92

93
00:07:31.530 --> 00:07:33.650
Take a moment to reread this.
93

94
00:07:33.980 --> 00:07:38.880
This is really what makes spring framework so powerful. You saw previously when we set up that Spring
94

95
00:07:38.880 --> 00:07:47.790
Boot application how easy it was to instantiate Spring MVC so we were using Spring MVC and Spring Boot
95

96
00:07:47.820 --> 00:07:55.380
to create that runtime environment and it gave us all that framework code around our stuff but we focused
96

97
00:07:55.380 --> 00:08:00.750
on the business logic so we only wrote the business logic and we leveraged the framework.
97

98
00:08:00.800 --> 00:08:08.740
And this is really is what makes spring frameworks so powerful. Now a lot of people get dependency injection
98

99
00:08:08.740 --> 00:08:14.980
and inversion control confused that they kind of get the concepts but not quite.
99

100
00:08:14.980 --> 00:08:21.850
And what you need to realize is that dependency injection is going to refer mainly to the composition
100

101
00:08:21.850 --> 00:08:27.880
of your classes so you can compose your application with dependency injection in mind.
101

102
00:08:27.880 --> 00:08:34.900
So you know that you're going to have these things injected at runtime so Dependency Injection is more
102

103
00:08:34.900 --> 00:08:36.910
of how you design your code.
103

104
00:08:37.120 --> 00:08:43.690
While inversion control is the runtime environment. So this is your code running in an application when
104

105
00:08:43.690 --> 00:08:44.620
it starts up.
105

106
00:08:44.620 --> 00:08:50.290
This is how things are gonna get injected into your code and the spring framework inversion control
106

107
00:08:50.290 --> 00:08:52.770
container is an excellent example of this.
107

108
00:08:52.810 --> 00:08:58.750
So at runtime spring is gonna come up, it's gonna find your classes, and it's going to perform dependency
108

109
00:08:58.750 --> 00:08:59.650
injection
109

110
00:08:59.890 --> 00:09:05.800
depending on how you've configured Spring. Previously we saw a lot of Spring Boot that does a lot of
110

111
00:09:05.830 --> 00:09:11.280
automatic configuration for us making sensible defaults which we totally leverage there.
111

112
00:09:11.380 --> 00:09:16.840
When we started off the course. Spring was able to come up make these sensible defaults through Spring
112

113
00:09:16.840 --> 00:09:20.290
Boot and run our application at runtime.
113

114
00:09:20.290 --> 00:09:23.070
So this is a very very powerful concept.
