WEBVTT
0
1
00:00:00.590 --> 00:00:06.870
In this video we're going to go through the basics of Dependency Injection. There's a little saying
1

2
00:00:06.870 --> 00:00:10.350
out there by John. I'm not sure how you say that last name.
2

3
00:00:10.350 --> 00:00:13.970
Munsch and I probably butchering that. I'm sorry John.
3

4
00:00:14.100 --> 00:00:16.430
Dependency Injection for five year olds.
4

5
00:00:16.500 --> 00:00:21.390
So when you go and get things out of the refrigerator yourself, you can cause problems. You might leave
5

6
00:00:21.390 --> 00:00:26.120
the door open, you might get something that mommy and daddy doesn't want you to have.
6

7
00:00:26.220 --> 00:00:28.490
You might even be looking for something we don't have.
7

8
00:00:28.500 --> 00:00:29.760
Or has expired.
8

9
00:00:29.760 --> 00:00:32.420
What you should be doing is stating the need.
9

10
00:00:32.520 --> 00:00:37.800
I need something to drink with lunch and then we will make sure that you have something when you sit
10

11
00:00:37.800 --> 00:00:38.730
down to eat.
11

12
00:00:38.760 --> 00:00:46.260
So this is effectively Dependency Injection for five year olds. So your class is going to have a
12

13
00:00:46.260 --> 00:00:51.960
dependency and you are asking the framework to provide that dependency.
13

14
00:00:51.960 --> 00:00:53.760
Your class doesn't have to think about it.
14

15
00:00:53.880 --> 00:00:54.930
You don't have to think about it.
15

16
00:00:54.930 --> 00:01:03.390
The framework is going to provide that needed object for you. So Dependency Injection is where a needed
16

17
00:01:03.390 --> 00:01:10.170
dependency is injected by another object or by a framework such as Spring. The class being injected
17

18
00:01:10.560 --> 00:01:15.570
does not have the responsibility to instantiate that object being injected.
18

19
00:01:15.570 --> 00:01:22.620
So some want to say that you avoid declaring objects using the new keyword. And I don't think this is
19

20
00:01:22.680 --> 00:01:28.860
entirely correct. Because there are times where you are going to be creating new objects inside of 
20

21
00:01:28.870 --> 00:01:29.750
your code.
21

22
00:01:29.760 --> 00:01:36.120
There is still very much a valid use case for it. But if you think about a database connection, that is
22

23
00:01:36.120 --> 00:01:42.800
a fairly expensive and complex object to create and this is an ideal thing that you can have injected
23

24
00:01:42.810 --> 00:01:50.100
so you might have an application that with technology such as Hibernate, it makes it easy to connect to
24

25
00:01:50.400 --> 00:01:56.820
an H2 in-memory database or MySQL database and effectively the only thing that is changing is that
25

26
00:01:56.820 --> 00:01:58.650
database connection.
26

27
00:01:58.650 --> 00:02:02.620
So this is an ideal use case for using a Dependency Injection framework.
27

28
00:02:02.730 --> 00:02:08.490
So your class at runtime that is getting data from the database doesn't necessarily have to care if
28

29
00:02:08.490 --> 00:02:13.800
it is getting it from a MySQL database, an H2 database, Informix database.
29

30
00:02:13.800 --> 00:02:15.550
I think Informix is still around.
30

31
00:02:15.540 --> 00:02:21.980
So this allows your class to be abstracted so it's only asking for that data source.
31

32
00:02:22.080 --> 00:02:27.600
It doesn't have to care about the configuration of that data source that is being pushed off to the
32

33
00:02:27.600 --> 00:02:30.830
framework to manage that object for you.
33

34
00:02:30.850 --> 00:02:36.070
Now there are several different types of Dependency Injection that we will see in this course.
34

35
00:02:36.400 --> 00:02:40.580
You can do Dependency Injection right against class properties.
35

36
00:02:40.600 --> 00:02:43.510
This is the least preferred method.
36

37
00:02:43.510 --> 00:02:49.840
These properties can be public or private and I don't particularly like injecting it against private
37

38
00:02:49.840 --> 00:02:50.290
properties.
38

39
00:02:50.290 --> 00:02:58.540
I think that as evil. It does cause problems downstream such as testing. How do you actually inject a dependency
39

40
00:02:58.540 --> 00:03:01.690
into a private property using it against unit test.
40

41
00:03:01.690 --> 00:03:07.300
There is a way to do it but it does take extra work. So it does create some headaches.
41

42
00:03:07.300 --> 00:03:10.020
Then the next way is to use setters.
42

43
00:03:10.120 --> 00:03:14.860
So we've all seen POJOs that have properties and then we set up getters and setters for it.
43

44
00:03:14.890 --> 00:03:22.390
That is also an option. And then also you have by constructor and this is the most preferred method. 
44

45
00:03:22.630 --> 00:03:26.240
There's been a lot of debate between setters and constructors.
45

46
00:03:26.290 --> 00:03:32.890
When I first started using the Spring Framework, constructor injection was a little bit problematic. That
46

47
00:03:32.890 --> 00:03:33.680
has really matured.
47

48
00:03:33.680 --> 00:03:39.940
It's no longer an issue. And in my early days of Spring, I actually preferred using setters over constructors.
48

49
00:03:40.220 --> 00:03:44.740
I have now come around to the camp. But first to use constructors over setters.
49

50
00:03:44.740 --> 00:03:50.650
So there is still some debate in this area but generally the community agrees the constructors is the
50

51
00:03:51.010 --> 00:03:53.620
most preferable method to do
51

52
00:03:53.770 --> 00:04:01.250
Dependency Injection. Now Concrete Classes versus Interfaces. Dependency injection can be done with Concrete
52

53
00:04:01.250 --> 00:04:03.020
Classes or Interfaces.
53

54
00:04:03.020 --> 00:04:07.210
Generally you want to be avoiding Concrete Classes.
54

55
00:04:07.220 --> 00:04:13.600
This is not really the best practice. Using Dependency Injection with Interfaces is the most preferred.
55

56
00:04:13.760 --> 00:04:18.050
It allows the runtime to decide the implementation to inject.
56

57
00:04:18.050 --> 00:04:24.470
It also follows the information the interface segregation principle of the SOLID object oriented principles
57

58
00:04:24.710 --> 00:04:27.050
and it makes your code more testable.
58

59
00:04:27.080 --> 00:04:33.200
Remember the previous example I was talking about a data source. So data source is a standard interface
59

60
00:04:33.200 --> 00:04:37.880
inside of Java and then database vendors provide that implementation.
60

61
00:04:37.880 --> 00:04:44.630
So by using that data source you can change that underlying implementation of it to an Oracle database
61

62
00:04:44.630 --> 00:04:51.620
or MySQL database or any relational database that is going to provide that implementation of a data
62

63
00:04:51.620 --> 00:04:55.360
source can be swapped out because you are using an Interface.
63

64
00:04:57.010 --> 00:05:01.650
Next we need to talk about Inversion of Control also known as IoC.
64

65
00:05:01.720 --> 00:05:08.020
This is a technique to allow dependencies to be injected at runtime. So the dependencies are not predetermined.
65

66
00:05:08.020 --> 00:05:15.070
You get to remember that the Inversion of Control, what's happening is your classes in a runtime environment
66

67
00:05:15.430 --> 00:05:19.850
and the class itself is not controlling the injection. It's not asking for anything.
67

68
00:05:19.860 --> 00:05:24.010
The control is being done by the framework. So Springs
68

69
00:05:24.040 --> 00:05:29.140
containers often called an Inversion Control Container because a container in the context is going to
69

70
00:05:29.140 --> 00:05:33.360
be determining what gets injected as a dependency into your classes.
70

71
00:05:34.160 --> 00:05:39.160
And then there's a quote from Ralph Johnson and Brian Foote. One important characteristic of a framework
71

72
00:05:39.190 --> 00:05:45.940
is that the methods defined by the user to tailor the framework will often be called within the framework
72

73
00:05:45.940 --> 00:05:49.990
itself rather than from the user's application code.
73

74
00:05:49.990 --> 00:05:57.230
The framework often plays the role of the main program in coordinating and sequencing application activity.
74

75
00:05:57.420 --> 00:06:03.490
This inversion of control gives frameworks the power to serve as extensible skeletons.
75

76
00:06:03.490 --> 00:06:09.940
The methods supplied by the user to tailor genetic algorithms defined in the framework for a particular
76

77
00:06:09.940 --> 00:06:10.820
application.
77

78
00:06:11.170 --> 00:06:16.930
This basically is saying that the framework is going to control most of the activity bringing up the structure.
78

79
00:06:17.260 --> 00:06:23.830
You are going to be providing code to fulfill the business logic. So that's where the Spring Framework
79

80
00:06:23.860 --> 00:06:29.380
becomes so powerful because you are not worried about a lot of things. You are really allows you to
80

81
00:06:29.380 --> 00:06:35.710
focus on the business logic that you have to implement for a specific scenario.
81

82
00:06:36.800 --> 00:06:43.160
Now IoC versus Dependency Injection inversion of control and dependency injection aren't easily confuse
82

83
00:06:43.160 --> 00:06:48.110
especially when you're new to this. Dependency Injection refers much to the composition of your
83

84
00:06:48.110 --> 00:06:53.020
classes. So you're going to compose your classes with Dependency Injection in mind.
84

85
00:06:53.020 --> 00:06:59.410
So data source again. You're going to provide a constructor to your class for a data source to be injected.
85

86
00:06:59.460 --> 00:07:06.090
Version control is the actual runtime environment of your code. So we talked about Springs and version could
86

87
00:07:06.320 --> 00:07:07.500
control container.
87

88
00:07:07.580 --> 00:07:10.000
Spring is in control of the injection.
88

89
00:07:10.190 --> 00:07:18.590
So Dependency Injection is how you write your classes. Inversion of Control is the runtime when the injection
89

90
00:07:18.590 --> 00:07:19.520
is actually happening.
90

91
00:07:19.540 --> 00:07:24.690
So the inversion control determines what objects to actually inject.
91

92
00:07:24.730 --> 00:07:29.110
Now some best practices. Get this as is quite frequently.
92

93
00:07:29.120 --> 00:07:32.730
What are the best practices? You do have a number of options here.
93

94
00:07:32.840 --> 00:07:38.930
What you should be doing is favor using a constructor based injection over setter injection. Definitely
94

95
00:07:38.940 --> 00:07:41.000
over Broperty based injection.
95

96
00:07:41.000 --> 00:07:46.850
Also a good habit to use final properties for injected components. So if you are injecting that data source
96

97
00:07:46.850 --> 00:07:47.220
again as
97

98
00:07:47.270 --> 00:07:52.700
example, you want to be using a final property for that data source so nothing inside that class can
98

99
00:07:52.700 --> 00:07:54.380
actually change it at least in theory.
99

100
00:07:54.650 --> 00:08:00.800
So just a little bit safety to use features of the Java programming language like that. And also I'm
100

101
00:08:00.800 --> 00:08:06.700
saying whenever practical code to an interface. There are times where you're going to have to.
101

102
00:08:06.710 --> 00:08:13.610
It might be more convenient to code to a specific type but whenever practical code to interface that's
102

103
00:08:14.000 --> 00:08:18.890
considered generally the best practice when we are developing applications using the Spring Framework
103

104
00:08:19.010 --> 00:08:20.600
and performing Dependency Injection.
