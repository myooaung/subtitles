WEBVTT
0
1
00:00:04.430 --> 00:00:09.150
Okay, I still have Spring running. So Spring
boot is up and running, our little
1

2
00:00:09.150 --> 00:00:13.799
application is up and running and all we
have is the index page in it and what I
2

3
00:00:13.799 --> 00:00:20.279
want to show you here is the AxisTCP
Mon tool. So to install this you would
3

4
00:00:20.279 --> 00:00:26.340
come in to IntelliJ and go to plugins
and what you want to do is browse
4

5
00:00:26.340 --> 00:00:33.180
repositories. So it says Axis TCP
Monitor Plugin. It's a very popular
5

6
00:00:33.180 --> 00:00:38.309
plug-in. The project is no longer active
but it's still a very stable
6

7
00:00:38.309 --> 00:00:44.399
project based on the Axis TCP monitor. You can google it and there's actually
7

8
00:00:44.399 --> 00:00:48.059
several different flavors of it. There's
a completely standalone one and as far
8

9
00:00:48.059 --> 00:00:51.180
as I know if you're using Eclipse
there's also an equivalent Eclipse
9

10
00:00:51.180 --> 00:00:55.710
plug-in but if there's not, you can use a
standalone version. I believe that will
10

11
00:00:55.710 --> 00:01:01.440
run on Windows or OSX
but I use the IntelliJ plug-in. You can
11

12
00:01:01.440 --> 00:01:07.260
see it's fairly popular. Almost 35,000
downloads and I already have it
12

13
00:01:07.260 --> 00:01:10.890
installed. If you need to install it,
you'd have to come into the plug-in
13

14
00:01:10.890 --> 00:01:15.299
manager and IntelliJ and install it from
the screen and then restart your browser
14

15
00:01:15.299 --> 00:01:21.689
and then once you do that, you will have
this TCP monitor tool up and running. And
15

16
00:01:21.689 --> 00:01:26.189
I'm going to expand out this window a
little bit and what we can do is, say
16

17
00:01:26.189 --> 00:01:32.850
listen on port 8081,
and we'll add that in and what
17

18
00:01:32.850 --> 00:01:38.820
it's going to do is pass traffic to and
from port 8080. So 8080 is where Tomcat
18

19
00:01:38.820 --> 00:01:43.670
is up and running. You do have a couple of 
things here. I usually set up a listener.
19

20
00:01:43.670 --> 00:01:49.979
You can use proxy if you need to, but
simulate assault slow connection. I
20

21
00:01:49.979 --> 00:01:53.850
rarely use those options. I usually just
set it up like this
21

22
00:01:53.850 --> 00:01:58.200
and now we can see activity coming
across in it. That's just sitting there
22

23
00:01:58.200 --> 00:02:03.869
waiting for our connection. If I come
back over to Chrome, where we still have
23

24
00:02:03.869 --> 00:02:10.020
developer tools up and just refresh the
page, I actually have to go to 8081. I'm
24

25
00:02:10.020 --> 00:02:14.629
sorry. So you have to go to 8081 and now
25

26
00:02:14.629 --> 00:02:20.749
that's going to hit the TCP mon plug-in
and it's going to go through that
26

27
00:02:20.749 --> 00:02:26.359
plug-in and basically what he's doing is
standing on 8081, on port 8081
27

28
00:02:26.359 --> 00:02:31.459
and grabbing that traffic, passing it
over to 8080 and then taking the
28

29
00:02:31.459 --> 00:02:37.819
response for the 8080 and passing it
back. And what that means for us is, that
29

30
00:02:37.819 --> 00:02:45.260
we can see this. So the second request
here, we can see the pure HTTP request.
30

31
00:02:45.260 --> 00:02:51.949
Let's minimize this here. So this is
actually everything that the browser
31

32
00:02:51.949 --> 00:03:00.319
sent. So the get command from local host
of 127.0.0.1 and you can see that it passed
32

33
00:03:00.319 --> 00:03:04.730
to pragma. No cache, cache control and
this all stuff just from a normal love 
33

34
00:03:04.730 --> 00:03:08.540
request. This is everything that we
passed. You can see that a human passed
34

35
00:03:08.540 --> 00:03:13.250
in a cookie value there for us. So this
is the stuff that will get you when
35

36
00:03:13.250 --> 00:03:15.859
you're doing web development. Because sometimes you're passing in a
36

37
00:03:15.859 --> 00:03:19.489
cookie or setting a cache control or
something like that, something that's
37

38
00:03:19.489 --> 00:03:24.109
causing an unexpected behavior and when
you're in some of the developer tools in
38

39
00:03:24.109 --> 00:03:29.750
the browsers, you don't necessarily see
all this. So this first one here was a
39

40
00:03:29.750 --> 00:03:34.189
request and then we can see the response
down in the bottom window
40

41
00:03:34.189 --> 00:03:39.489
and you can see the exact response came
back with an HTTP document. And this is
41

42
00:03:39.489 --> 00:03:45.500
literally what's going across the wire
back to the browser. So this is a
42

43
00:03:45.500 --> 00:03:50.540
header and this is going to get parsed
by the browser. So when we go in and look
43

44
00:03:50.540 --> 00:03:56.479
at, so this is chatter from the HTTP
protocol. So we can see all this
44

45
00:03:56.479 --> 00:04:02.109
and if I remember correctly, this is
actually a number of bytes to expect in
45

46
00:04:02.109 --> 00:04:08.900
this. So if we edit all that up, I bet it
would come up to 96 characters. So
46

47
00:04:08.900 --> 00:04:14.509
that's just part of the HTTP
standard and just to show you that in
47

48
00:04:14.509 --> 00:04:18.549
the browser, so if I come in here.
48

49
00:04:21.010 --> 00:04:28.310
So you can see the doctype HTML and then
the open and closing HTML tags. If I look
49

50
00:04:28.310 --> 00:04:33.199
at this, you can see that it's exactly
like that. So the browser obscured that
50

51
00:04:33.199 --> 00:04:36.710
from us and that's an actual payload
that's getting rendered as the page. And
51

52
00:04:36.710 --> 00:04:44.000
like I said it's pretty handy to be
looking at this and so basically I came
52

53
00:04:44.000 --> 00:04:49.240
back, did a get request and sent that back
and this looks like an acknowledgment.
53

54
00:04:49.240 --> 00:04:55.490
Thought I could change these accounts,
apparently not. So that's a request in an
54

55
00:04:55.490 --> 00:05:00.410
act. So I made the request, got that in the
browser, sent back an ACK. So across the
55

56
00:05:00.410 --> 00:05:05.150
wire. So kind of interesting
stuff is the number different things we
56

57
00:05:05.150 --> 00:05:10.130
can set in HTML and you can see by
default what your browsers are doing. So
57

58
00:05:10.130 --> 00:05:14.150
this is a very important tool and a lot
of lan developers don't even know about
58

59
00:05:14.150 --> 00:05:17.870
this tool to be able to see it. But once
you know about it and you need to do
59

60
00:05:17.870 --> 00:05:24.080
some low-level debugging to see exactly
what is going across a wire, what you're
60

61
00:05:24.080 --> 00:05:29.539
sending back and forth between the
browser and the the Spring MVC back end,
61

62
00:05:29.539 --> 00:05:35.120
you can do it with this tool because
HTTP is a generic protocol. This tool
62

63
00:05:35.120 --> 00:05:38.510
doesn't care if you're running PHP, or an apache on the background. Whether it's a
63

64
00:05:38.510 --> 00:05:44.150
Spring boot or Tomcat, Python,
whatever. It's browser independent.
64

65
00:05:44.150 --> 00:05:47.960
You could even be using
postman and making post requests. So
65

66
00:05:47.960 --> 00:05:54.289
later in the course when we get to rest
requests and doing restful API calls, you
66

67
00:05:54.289 --> 00:06:00.340
can bet that we're going to be using
this tool to inspect those requests.
