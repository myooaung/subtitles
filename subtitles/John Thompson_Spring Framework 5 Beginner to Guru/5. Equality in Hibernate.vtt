WEBVTT
0
1
00:00:04.009 --> 00:00:08.370
Alright. In this video, I want to talk
about some of the best practices with
1

2
00:00:08.370 --> 00:00:13.820
Hibernate. Now we did not implement any
type of equal hash code function and
2

3
00:00:13.820 --> 00:00:19.320
that could cause us a problem here
in theory, at least. There's a couple of
3

4
00:00:19.320 --> 00:00:25.430
nuances to this. And right now, we're just
using object, in the underlying object
4

5
00:00:25.430 --> 00:00:29.939
equality and hash code. And that might
not be what we want to use. There's
5

6
00:00:29.939 --> 00:00:35.850
two schools of thought on this. One is we
can go ahead and work with the ID value. 
6

7
00:00:35.850 --> 00:00:41.730
So the ID value is gonna get
generated at time of persistence. That is
7

8
00:00:41.730 --> 00:00:46.890
one way to do it. The downside here is on
line 14 there. You can see that we're
8

9
00:00:46.890 --> 00:00:51.870
using a generation type of AUTO. So this
ID values going to get changed when the
9

10
00:00:51.870 --> 00:00:55.559
object is persisted for the first time.
I'll go from doll to having a value and
10

11
00:00:55.559 --> 00:01:01.410
this could cause problems within a set.
But hibernate does recommend if we are
11

12
00:01:01.410 --> 00:01:06.659
working with sets, which we are, to
implement these values and the preferred
12

13
00:01:06.659 --> 00:01:12.090
is to use a unique business key. And in
this case, we don't have a unique
13

14
00:01:12.090 --> 00:01:16.590
business key, in theory, like an author we
could say first-name lastname, but there
14

15
00:01:16.590 --> 00:01:20.310
could be two different authors with the
same name. So we don't have a unique key to
15

16
00:01:20.310 --> 00:01:27.600
work with. So what we can do is use the
ID value. We can come in and right-click
16

17
00:01:27.600 --> 00:01:33.210
in IntelliJ. You can right-click and
say Generate, and we say equals() and
17

18
00:01:33.210 --> 00:01:41.579
hashcode(). Let's go ahead and do Next here.
And I'm just going to use the ID value
18

19
00:01:41.579 --> 00:01:52.799
of the JPA entity, and we'll say Next, and
do that, and now we have this implemented
19

20
00:01:52.799 --> 00:01:57.409
here. That gives us the
implementation of hashcode() and equals().
20

21
00:01:57.409 --> 00:02:04.500
And one other thing that we can do is
come down here and also say Generate and
21

22
00:02:04.500 --> 00:02:08.340
this is more for aesthetics can also
say generate and do a toString method.
22

23
00:02:08.340 --> 00:02:12.860
IntelliJ has a nice method here and
this will give us a pretty output
23

24
00:02:12.860 --> 00:02:17.030
to string. So this is something that we
want to do, as far as working with the
24

25
00:02:17.030 --> 00:02:26.630
set. So I'm going to do the same thing on
book. And we're just going to do the ID
25

26
00:02:26.630 --> 00:02:32.780
value, as well, on the book because
again, we don't have a good key to go off
26

27
00:02:32.780 --> 00:02:38.060
of title. We could have more than one
book with that same title. It's been, in
27

28
00:02:38.060 --> 00:02:43.610
theory, should be unique in practice than  in logistics. It should be unique
28

29
00:02:43.610 --> 00:02:47.540
but can't always count on that, being
unique, so we don't have... again, we don't
29

30
00:02:47.540 --> 00:02:52.100
have a valid, always going to be unique
business key that can use, so we're
30

31
00:02:52.100 --> 00:02:57.890
getting use the ID value. I'll just gonna
go through and take the defaults on
31

32
00:02:57.890 --> 00:03:02.360
this, so we can see. We could argue about
the perfect implementation of that
32

33
00:03:02.360 --> 00:03:07.010
equals method, and this is going to vary
based on your business case. So you're
33

34
00:03:07.010 --> 00:03:09.380
gonna have to apply some Java
programming 101.
34

35
00:03:09.380 --> 00:03:14.650
Think about this. There are some pitfalls
of this but this does give us a basic
35

36
00:03:14.650 --> 00:03:19.850
implementation, and I'm also going to
implement the two string method so we
36

37
00:03:19.850 --> 00:03:24.049
have some pretty outputs in here. So the
biggest thing here is to remembers that
37

38
00:03:24.049 --> 00:03:30.260
we are working with sets here, so Java
101 stuff, what set is going to be using
38

39
00:03:30.260 --> 00:03:35.390
these methods to determine if that
object is duplicated inside that set. So
39

40
00:03:35.390 --> 00:03:40.430
now, before we were using the default
object, so with that object ID, now we
40

41
00:03:40.430 --> 00:03:46.310
actually have an implementation of that
so and we are looking at just the ID
41

42
00:03:46.310 --> 00:03:51.500
value in here. So when we have two objects
with the same ID, they will be considered
42

43
00:03:51.500 --> 00:03:55.910
equal. Now if they have different IDs so
that would be considered different and
43

44
00:03:55.910 --> 00:03:59.630
that's kind of the behavior that we want
to see going forward in the course in
44

45
00:03:59.630 --> 00:04:02.799
this particular use case.
