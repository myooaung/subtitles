WEBVTT
0
1
00:00:00.150 --> 00:00:03.540
Alright! In this video, I want to talk
about some of the deployment
1

2
00:00:03.540 --> 00:00:07.380
architectures that we're going to
typically see with Relational Database
2

3
00:00:07.380 --> 00:00:13.880
Management Systems.
Now the RDBMS is can be deployed in a
3

4
00:00:13.880 --> 00:00:17.360
number of different ways and the
deployment architecture is going to be
4

5
00:00:17.360 --> 00:00:21.020
driven by the needs of scalability and
availability and we do have a lot of
5

6
00:00:21.020 --> 00:00:27.289
options here. We have everything from a
single non dedicated server, where you're
6

7
00:00:27.289 --> 00:00:31.730
running multiple things on an addition
to the database to many dedicated
7

8
00:00:31.730 --> 00:00:35.690
servers where you have a cluster of
database servers, so you can have a
8

9
00:00:35.690 --> 00:00:40.820
single server or many servers.
Typically, communication is going to be
9

10
00:00:40.820 --> 00:00:44.540
done over a network web socket so this
is important when we start connecting to
10

11
00:00:44.540 --> 00:00:47.989
the database, you're going to see this in
play, so you're going to see a network
11

12
00:00:47.989 --> 00:00:55.280
address or localhost and then a port
name. Like if I remember right, MySQL is 3306
12

13
00:00:55.280 --> 00:01:00.250
so that is a number that identifies that
socket so that's very typical and
13

14
00:01:00.250 --> 00:01:05.570
often the client or the thing that's
talking to the database is going to need
14

15
00:01:05.570 --> 00:01:10.390
something called a driver. That
driver is going to be specific to
15

16
00:01:10.390 --> 00:01:16.459
the database that you're using. If
I'm using Oracle, I would need an Oracle
16

17
00:01:16.459 --> 00:01:20.390
driver to talk to Oracle over that
network socket, so that communication
17

18
00:01:20.390 --> 00:01:26.090
layer is absolutely proprietary between
the databases. So that is a specific
18

19
00:01:26.090 --> 00:01:32.630
thing for the databases.
Take a look at this. The simplest thing, a
19

20
00:01:32.630 --> 00:01:38.390
simple non-dedicated server so I have a
single server. It could be a.. I'm using
20

21
00:01:38.390 --> 00:01:43.219
server and air quotes here it could be
your your laptop your home computer or a
21

22
00:01:43.219 --> 00:01:49.009
virtual machine running up on Amazon as
a server, so just a single machine. The
22

23
00:01:49.009 --> 00:01:53.840
relational database management system is
installed on the machine. User logs in
23

24
00:01:53.840 --> 00:01:58.939
and accesses that database from the
command line, so all the major databases
24

25
00:01:58.939 --> 00:02:03.590
have a command line interface that you
can log in, get to the command line, and
25

26
00:02:03.590 --> 00:02:07.549
access the database. So it's like the
simplest thing that we can do for
26

27
00:02:07.549 --> 00:02:12.590
talking to it. Often you're going to go over
localhost and network socket and I say
27

28
00:02:12.590 --> 00:02:17.780
often because there are variants to this.
There are local communication network
28

29
00:02:17.780 --> 00:02:20.959
protocols when you're talking on the
same system for inter-process
29

30
00:02:20.959 --> 00:02:24.200
communication. I'm not going to run down
that rabbit all because it does vary
30

31
00:02:24.200 --> 00:02:28.970
between operating systems. Just want you
to be aware of that. This is like
31

32
00:02:28.970 --> 00:02:32.930
the absolute simplest thing. Now let's
take a something that's also very
32

33
00:02:32.930 --> 00:02:38.209
popular. This is a very common set up
and this is called the LAMP Stack.
33

34
00:02:38.209 --> 00:02:43.910
That's just one example. LAMP is very
popular. LAMP stands for Linux, Apache,
34

35
00:02:43.910 --> 00:02:50.359
MySQL, and PHP. I would have to venture I
guess and say probably 70% of the
35

36
00:02:50.359 --> 00:02:54.260
websites out there are running the LAMP
Stack just because of WordPress is the
36

37
00:02:54.260 --> 00:02:58.549
most popular web hosting software or
website hosting software.
37

38
00:02:58.549 --> 00:03:05.810
springframework.guru that is a wordpress
site. It is running on a Amazon image ec2
38

39
00:03:05.810 --> 00:03:10.459
instance of a virtual machine up on
Amazon. It is running Linux and the LAMP
39

40
00:03:10.459 --> 00:03:15.560
Stack. The database is right on 
that machine, so just a single server
40

41
00:03:15.560 --> 00:03:20.989
with the database installed Apache is on
it and it serves up web pages. Often,
41

42
00:03:20.989 --> 00:03:25.400
your application, if it's just a website
is not going to outgrow this. I could
42

43
00:03:25.400 --> 00:03:30.079
probably call out Drupal need traffic on
springframework.guru and still not need
43

44
00:03:30.079 --> 00:03:34.549
to upgrade that database, so there's a
lot of headroom there. The downside is
44

45
00:03:34.549 --> 00:03:39.560
what's happening here in this scenario
is Apache
45

46
00:03:39.560 --> 00:03:44.090
and the database in MySQL software are
competing for the limited resources of
46

47
00:03:44.090 --> 00:03:49.910
that database server. Now let's take a
look at its called Client Server. This
47

48
00:03:49.910 --> 00:03:54.950
was a big buzz in the 90s. I remember 90s
 when I entered the industry
48

49
00:03:54.950 --> 00:03:58.730
dating myself a little bit. But that was
like all the buzz everybody's like
49

50
00:03:58.730 --> 00:04:02.810
moving away from mainframes and we had
to go to client server, so it was like
50

51
00:04:02.810 --> 00:04:07.459
cloud computing today. So the basic
concept was to move the application code
51

52
00:04:07.459 --> 00:04:13.640
to a client at different hardware. So it
became the client as conceptually while
52

53
00:04:13.640 --> 00:04:18.019
we used a dedicated hardware for the
database server so it was splitting that
53

54
00:04:18.019 --> 00:04:23.300
application load off the server that
limited resource of the server that was
54

55
00:04:23.300 --> 00:04:28.400
running the database. It was a
way to achieve scalability and you still
55

56
00:04:28.400 --> 00:04:31.940
see this used quite a bit in some form
so it's a concept that really hasn't
56

57
00:04:31.940 --> 00:04:36.290
gone away but you don't hear called
client server too often anymore. But the
57

58
00:04:36.290 --> 00:04:39.979
concept stays the same, where you have an
external client running its own
58

59
00:04:39.979 --> 00:04:45.260
application code and then talking to a
dedicated application server. So let's
59

60
00:04:45.260 --> 00:04:50.150
look at that last slide here. In the LAMP
stack here, if I wanted to scale this out
60

61
00:04:50.150 --> 00:04:54.080
further, let's say I'm running against
system resources, I could move my
61

62
00:04:54.080 --> 00:04:59.300
database to a separate server, and now
I'd be running an air quotes client
62

63
00:04:59.300 --> 00:05:03.620
server.
Let's go ahead here. Now talk about
63

64
00:05:03.620 --> 00:05:09.020
scaling Client Server. What it does here
is give you the opportunity scale and as
64

65
00:05:09.020 --> 00:05:14.000
we were going through the .com era
and when the .com boom, this became
65

66
00:05:14.000 --> 00:05:18.289
very popular way of scaling out
ecommerce sites where you could take
66

67
00:05:18.289 --> 00:05:22.819
your application servers and
load-balanced that internet traffic
67

68
00:05:22.819 --> 00:05:27.410
across the application servers and they
became responsible for serving up the
68

69
00:05:27.410 --> 00:05:31.460
web pages and doing such and management.
All that stuff that you can do on an
69

70
00:05:31.460 --> 00:05:35.990
e-commerce site. So you have a small
server farm of application servers and
70

71
00:05:35.990 --> 00:05:39.440
then you'd have a dedicated database
server and sometimes that database
71

72
00:05:39.440 --> 00:05:44.270
server can get quite large and often as
you scale it up, you would actually take
72

73
00:05:44.270 --> 00:05:50.000
the storage and dedicate that to call it
as network attached storage and so you
73

74
00:05:50.000 --> 00:05:54.620
awfully load just all the i/o management
to dedicated hardware so this is a very
74

75
00:05:54.620 --> 00:05:59.210
very scalable architecture but that
database server becomes the single
75

76
00:05:59.210 --> 00:06:03.949
point of failure. I saw I mean you
can get mainframe like systems for that
76

77
00:06:03.949 --> 00:06:07.430
database server and they run into the
hundreds of thousand millions of dollars
77

78
00:06:07.430 --> 00:06:12.590
for the single database server so they I
mean they're a crazy huge. But in this
78

79
00:06:12.590 --> 00:06:17.479
type of architecture, it does give you a
very highly scalable system. Now what if
79

80
00:06:17.479 --> 00:06:22.969
we want to take this even further? So
then we started looking at database
80

81
00:06:22.969 --> 00:06:28.520
clusters, so now we can scale out the
application tier and then apply an
81

82
00:06:28.520 --> 00:06:34.219
assembler concept where we start using
multiple servers for the databases so an
82

83
00:06:34.219 --> 00:06:38.509
example is Oracle RAC or Oracle Real
Application Cluster proves scalability
83

84
00:06:38.509 --> 00:06:44.300
over a single database server, and also,
we improve reliability because now we
84

85
00:06:44.300 --> 00:06:48.979
can lose a database server of the
cluster or service of a node a single
85

86
00:06:48.979 --> 00:06:53.840
server that can fail and the system will
keep running, just like in the
86

87
00:06:53.840 --> 00:06:58.880
applications and the application tier. If
one of those systems fail, the load
87

88
00:06:58.880 --> 00:07:03.710
balancer just stop spreading load to it,
so very scalable, very redundant system.
88

89
00:07:03.710 --> 00:07:08.569
And then I have a Mainframe like
performance. For people, remember
89

90
00:07:08.569 --> 00:07:12.650
that good old mainframe systems I've run
like airlines and stuff. Never like
90

91
00:07:12.650 --> 00:07:18.020
multi-million dollar systems and have
crazy computing power. This is a very
91

92
00:07:18.020 --> 00:07:23.419
scalable architecture and very reliable
architecture and very very common. To
92

93
00:07:23.419 --> 00:07:28.969
be honest, this is probably going to get
you a scalability for 95%
93

94
00:07:28.969 --> 00:07:33.530
use cases out there. But what if we have
to go and higher?
94

95
00:07:33.530 --> 00:07:38.930
So I call that Cloud Sscale and think
about like the Amazon. I mean Amazon
95

96
00:07:38.930 --> 00:07:45.680
did like 45% of Black Friday sales last
year. That was insane. But Amazon runs
96

97
00:07:45.680 --> 00:07:50.510
multiple data centers around the world.
Same with Google and Facebook, they
97

98
00:07:50.510 --> 00:07:55.280
all have dozens of data centers and
these data centers have tens of
98

99
00:07:55.280 --> 00:07:59.990
thousands of computers in them. They have
these crazy a lot of balancing and that
99

100
00:07:59.990 --> 00:08:03.950
is going into what's called distributed
computing, where the load is spread
100

101
00:08:03.950 --> 00:08:08.960
across many many servers. Typically,
you're looking at the cheapest commodity
101

102
00:08:08.960 --> 00:08:12.200
server. I've talked to guys that they
don't bother putting in a redundant
102

103
00:08:12.200 --> 00:08:16.160
power supply unlike that buy the
cheapest hard and they can't. If it fails,
103

104
00:08:16.160 --> 00:08:19.640
they just pull it out of the rack, throw
it away and throwing no one in. Sometimes they
104

105
00:08:19.640 --> 00:08:24.350
don't try to fix it. But large mainframe
systems are absolutely avoided because
105

106
00:08:24.350 --> 00:08:26.780
they don't want a single point of
failure. By single point of failure,
106

107
00:08:26.780 --> 00:08:30.380
the mainframes in a building in a data
center that as a single point of failure.
107

108
00:08:30.380 --> 00:08:35.479
You lose that data center. So these are
truly distributed system. A Facebook
108

109
00:08:35.479 --> 00:08:39.110
could lose a data center and you would
never even know it. It would just continue
109

110
00:08:39.110 --> 00:08:42.919
on running same with Amazon. If you
lose multiple data centers, you wouldn't
110

111
00:08:42.919 --> 00:08:47.630
even know. It just keep on going. In this
type of situation, relational databases
111

112
00:08:47.630 --> 00:08:52.490
are not used. This is a hugely different
paradigm shift from Client Server
112

113
00:08:52.490 --> 00:08:57.230
because you are looking at distributed
computing. This is a huge shift and
113

114
00:08:57.230 --> 00:09:02.740
I'm going to keep this outside of this in
this course. We are looking at SQL and
114

115
00:09:02.740 --> 00:09:06.800
looking at the relational databases so
when you're going to stick and within that
115

116
00:09:06.800 --> 00:09:11.630
side of paradigm, but this is a fun topic.
But probably looking at the top
116

117
00:09:11.630 --> 00:09:16.720
three to five percent of use cases that
need to get into this.
