WEBVTT
0
1
00:00:03.950 --> 00:00:08.639
In this video, we are going to initialize
the Spring Framework Guru Pet Clinic
1

2
00:00:08.639 --> 00:00:14.400
project. You can see up on the screen,
I have github up in Chrome. So what I
2

3
00:00:14.400 --> 00:00:17.640
want to do, there's actually several
different ways I could do this. I could
3

4
00:00:17.640 --> 00:00:21.710
do just about everything right through
IntelliJ to create a github repository,
4

5
00:00:21.710 --> 00:00:26.939
but I'm going to do a little bit more
hands-on. This is my particular workflow.
5

6
00:00:26.939 --> 00:00:31.199
There's quite several different ways of
doing this to be honest, but this is how
6

7
00:00:31.199 --> 00:00:35.820
I like to create a new repository. So I'm
going to come up here. I'm going to say
7

8
00:00:35.820 --> 00:00:43.270
New Repository. We'll call on sfg-pet-clinic.
8

9
00:00:43.270 --> 00:00:47.350
Right now, I have this under development
so when I have things under development
9

10
00:00:47.350 --> 00:00:50.680
I will make the repositories Private.
That just means I have to remember to do
10

11
00:00:50.680 --> 00:00:54.760
it to make it public before I release
this material but I'm going to make it
11

12
00:00:54.760 --> 00:00:59.680
private for right now I say I work on it.
Surprisingly, my github repositories like
12

13
00:00:59.680 --> 00:01:04.120
one of the top github repositories in
Tampa Bay area. There's a map out there
13

14
00:01:04.120 --> 00:01:07.630
that you can look things up and find
out who's most popular and somehow I
14

15
00:01:07.630 --> 00:01:11.140
happen to be the most popular
oddly enough. I'm going to go ahead and
15

16
00:01:11.140 --> 00:01:18.760
add a .gitignore for Java. I don't
like the standard one but I'm just going
16

17
00:01:18.760 --> 00:01:25.080
go ahead Initialize it with a README,
clone the repository like so,
17

18
00:01:25.080 --> 00:01:31.260
and now, what we can do, I come over
here and say Clone or download. I'm going
18

19
00:01:31.260 --> 00:01:38.190
copy this. Actually, I'll use the SSH one
because when you're using github, if
19

20
00:01:38.190 --> 00:01:42.810
you're on OSX or Linux, SSH makes it
pretty easy. Windows, I think you can
20

21
00:01:42.810 --> 00:01:48.900
install the github bash client to use
SSH or use putty. Otherwise, HTTP is
21

22
00:01:48.900 --> 00:01:52.830
probably going to be better for Windows
users. But without getting into long
22

23
00:01:52.830 --> 00:01:57.630
explanation, SSH allows to set up a key
which I've done so I can authenticate
23

24
00:01:57.630 --> 00:02:03.300
pretty seamlessly with github from the
command line and we can see here, I got
24

25
00:02:03.300 --> 00:02:09.300
the command line up. You can see
here's a number of repos that I have in
25

26
00:02:09.300 --> 00:02:14.550
the course and what I'm going to do here,
let clear the screen. I'm just going to
26

27
00:02:14.550 --> 00:02:21.890
say git clone and that's going to clone
the repo.
27

28
00:02:22.130 --> 00:02:29.750
Now if I do a list, we can see here sfg-pet-clinic. That directory has been
28

29
00:02:29.750 --> 00:02:36.880
created. I do a cd into sfg tab
29

30
00:02:37.319 --> 00:02:41.209
and i'll clear the screen real quick.
30

31
00:02:41.500 --> 00:02:46.970
I'm doing
ls -ltra and a shows hidden files so we
31

32
00:02:46.970 --> 00:02:51.770
can see there's the .gitignore and the
README file as well as the git directory.
32

33
00:02:51.770 --> 00:02:56.000
So in this little directory here, it's
all the secret sauce to git which makes
33

34
00:02:56.000 --> 00:03:02.090
this directory a github track directory.
So now what I want to do is I'm going to
34

35
00:03:02.090 --> 00:03:07.130
come over to IntelliJ and I'm going to
create the first project and you could
35

36
00:03:07.130 --> 00:03:11.989
say I have the recipe app. We will be
getting into all this goodness coming up
36

37
00:03:11.989 --> 00:03:18.590
in the course. But for right now, what I
would do is come over here and say a new
37

38
00:03:18.590 --> 00:03:22.430
project.
I'm going to use good old Spring
38

39
00:03:22.430 --> 00:03:27.410
Initializer. Now I am going through
IntelliJ to do this. If you don't have
39

40
00:03:27.410 --> 00:03:29.390
IntelliJ and you want follow along at
home,
40

41
00:03:29.390 --> 00:03:35.000
you can go to the URL start.spring.io
and use the web interface which will
41

42
00:03:35.000 --> 00:03:38.810
download a zip file of everything I'm
showing you but I'm going to use
42

43
00:03:38.810 --> 00:03:43.700
IntelliJ and show you how to initialize
this project via IntelliJ. Again, this
43

44
00:03:43.700 --> 00:03:48.709
is my personal workflow for kicking off
a new Spring project. So now I'm going to
44

45
00:03:48.709 --> 00:03:52.090
say Next.
45

46
00:03:57.760 --> 00:04:04.040
I'm going to say sfg-pet-clinic. Let me
double check something. I want to make
46

47
00:04:04.040 --> 00:04:11.680
sure I have sfg-pet-clinic and it's
my own personal workflow, my own personal
47

48
00:04:11.680 --> 00:04:17.299
organization so I'm taking that sfg-pet-clinic and I'm going to make the
48

49
00:04:17.299 --> 00:04:25.449
artifact sfg-pet clinic, so that's
okay.
49

50
00:04:29.600 --> 00:04:34.700
We can see that default package
Spring Framework Guru, and again, this is
50

51
00:04:34.700 --> 00:04:38.960
a Java naming convention, particular to
the Java developers to use the reverse
51

52
00:04:38.960 --> 00:04:43.820
domain of what you're working on so if
you're working at google.com you'd be
52

53
00:04:43.820 --> 00:04:49.760
doing com.google so a very common thing
to do for Java development. The
53

54
00:04:49.760 --> 00:04:54.080
package is we're doing this the reverse
domain name is a way to prevent
54

55
00:04:54.080 --> 00:05:00.290
collisions. We are going to use Java, Jar. Currently using Java 8, industry
55

56
00:05:00.290 --> 00:05:04.760
is still kind of migrating. Java 9
wasn't widely adopted. At the time of
56

57
00:05:04.760 --> 00:05:09.470
recording, 10 is out. I'm going to start
making the transition right now. Majority
57

58
00:05:09.470 --> 00:05:14.060
of the industry is still on 8. Tooling is
starting to catch up to the new release
58

59
00:05:14.060 --> 00:05:17.660
of Java. You'll find the Java community
can be pretty conservative. 9 was a
59

60
00:05:17.660 --> 00:05:21.620
pretty big release on a lot change. They
got the kinks worked out and now the
60

61
00:05:21.620 --> 00:05:25.820
tooling is all catching up to 10. 
We'll start with switching over to that
61

62
00:05:25.820 --> 00:05:29.360
recent cycle. I expect by the time we
get this complete, we will actually going
62

63
00:05:29.360 --> 00:05:33.530
transition the project over to Java 10.
But for right now, I'm going stick with
63

64
00:05:33.530 --> 00:05:41.000
Java 8. Say next. Now if you could
look at the web configuration or the
64

65
00:05:41.000 --> 00:05:45.890
start.spring.io you'll see a number
of options. What I want to do is I'm
65

66
00:05:45.890 --> 00:05:50.990
going to be taking Spring Boot 2.0.3. I'm
not going to be using the snapshots, so we
66

67
00:05:50.990 --> 00:05:57.650
are on a stable release of Spring Boot 2.
I want DevTools. We'll take Lombok.
67

68
00:05:57.650 --> 00:06:04.400
That's some goodness there. Just looking
through here what else we want. We'll
68

69
00:06:04.400 --> 00:06:09.770
just use regular web
and we do not need any other stuff.
69

70
00:06:09.770 --> 00:06:15.440
I'm just glancing through this. We will
be bringing in Thymeleaf. Ultimately, we
70

71
00:06:15.440 --> 00:06:20.129
do want MySQL and H2 for in memory
database.
71

72
00:06:20.129 --> 00:06:25.319
NoSQL integration, We're not going to
get into any of the cloud stuff. We can
72

73
00:06:25.319 --> 00:06:29.910
see we got quite a few things to select
from there.
73

74
00:06:29.910 --> 00:06:35.520
Just make sure all the Batch, Mail, Camel,
we're not going to be utilizing. Ops, we
74

75
00:06:35.520 --> 00:06:40.290
definitely do want to bring in Spring
Boot Actuator. I'm not going to be
75

76
00:06:40.290 --> 00:06:43.980
showing you admin server or client.
That's actually some really cool
76

77
00:06:43.980 --> 00:06:49.140
stuff for microservices, where you can
register a Spring Boot Admin (Server) and
77

78
00:06:49.140 --> 00:06:54.360
then your notes of the microservices
will register it. It's kind of a
78

79
00:06:54.360 --> 00:06:58.410
real nice project but we will not be
getting into that. This is going to
79

80
00:06:58.410 --> 00:07:03.180
start us off. We will be adding more
dependencies as we get more and
80

81
00:07:03.180 --> 00:07:06.590
more into it. I'm going to double check that.
81

82
00:07:07.990 --> 00:07:15.100
I do want JPA. The JPA option, that
brings in the JPA API and spring-data-jpa
82

83
00:07:15.100 --> 00:07:20.289
so we will definitely be utilizing
that and Hibernate under the covers. I'm
83

84
00:07:20.289 --> 00:07:26.410
going to be using MySQL for our target
and we might have some fun with
84

85
00:07:26.410 --> 00:07:29.979
Flyway or Liquibase coming up but I'm
going to leave those out for right now.
85

86
00:07:29.979 --> 00:07:36.039
Let's go ahead and say Next. What
I want to do is change this directory
86

87
00:07:36.039 --> 00:07:40.190
structure.
I'm going to come back down here to 
87

88
00:07:40.190 --> 00:07:49.160
spring.framework.guru courses spring5 and
Spring Pet Clinic. I'm going to
say go ahead
88

89
00:07:49.160 --> 00:07:54.770
and open that. By setting this
directory here, in Project name and also
89

90
00:07:54.770 --> 00:07:59.060
directory to the sfg-pet-clinic. What's
going to happen in the background when I
90

91
00:07:59.060 --> 00:08:04.280
say Finish, IntelliJ it's going to call out
to start.spring.io
91

92
00:08:04.280 --> 00:08:08.210
and get the project and it's going to drop
it down and then index the project.
92

93
00:08:08.210 --> 00:08:11.930
I'm going to go ahead and click Finish
right now. What's happening is
93

94
00:08:11.930 --> 00:08:15.500
IntelliJ is going out. It's
downloading. You saw a little window pop
94

95
00:08:15.500 --> 00:08:21.380
up there. Set it, downloaded it and I'm
going to say Enable Auto-import. Just
95

96
00:08:21.380 --> 00:08:25.639
as a quick tip. If you have a really
really big project, sometimes an auto
96

97
00:08:25.639 --> 00:08:29.000
import becomes a headache. This is
not a problem. I've been on some rather
97

98
00:08:29.000 --> 00:08:33.500
complex projects. I will be changing that
to auto import. Clicked on the wrong
98

99
00:08:33.500 --> 00:08:37.529
thing there.
Now what we can see is that we've
99

100
00:08:37.529 --> 00:08:42.990
brought this down. You can see that
IntelliJ is highlighting it and what I
100

101
00:08:42.990 --> 00:08:46.430
want to do here, this is another thing I
always do.
101

102
00:08:46.430 --> 00:08:52.980
Let's collapse this. Come
over here to .gitignore. I like to show you the
102

103
00:08:52.980 --> 00:08:58.350
contrast here. I stole a lot of this.
It's like my personal .gitignore file so
103

104
00:08:58.350 --> 00:09:05.069
it brings down a lot of stuff. If we come
in and look at the pet clinic. Bring up
104

105
00:09:05.069 --> 00:09:10.110
it's .gitignore, this was probably
replaced with the download from
105

106
00:09:10.110 --> 00:09:17.660
start.spring.io. What I want to do is
replace that
106

107
00:09:17.660 --> 00:09:20.660
in this.
107

108
00:09:24.420 --> 00:09:29.920
I think that mine is
much more comprehensive, so I'm going to go
108

109
00:09:29.920 --> 00:09:36.160
ahead and save that. I saw some stuff
in there but that means before I pasted
109

110
00:09:36.160 --> 00:09:40.770
over it, I don't know if any potential
are you still using NetBeans to be honest.
110

111
00:09:40.770 --> 00:09:45.820
I think this is a lot more
comprehensive. Again, I took a lot of
111

112
00:09:45.820 --> 00:09:50.410
this from the JHipster project so this
gives us a number of ignores that we
112

113
00:09:50.410 --> 00:09:55.920
don't want to be checking in. You can see
here like this iml file. This is an IDE
113

114
00:09:55.920 --> 00:10:01.240
specific file. One thing that will get
you in trouble with other developers, if
114

115
00:10:01.240 --> 00:10:07.510
you start checking those into your
repository, definitely a no-no. What I
115

116
00:10:07.510 --> 00:10:13.120
want to do here now is add in these
files.  I'm going to do a Git
116

117
00:10:13.120 --> 00:10:15.870
Add
117

118
00:10:15.970 --> 00:10:21.609
I also want to add in, this is a
Maven Wrapper. This allows us to run Maven
118

119
00:10:21.609 --> 00:10:30.449
from the command line. We'll also add
him. We want to add this in as well.
119

120
00:10:30.680 --> 00:10:36.770
Just as a quick tour of what Spring brought
down for us, so we can see the basic pom
120

121
00:10:36.770 --> 00:10:41.570
that was created. This was generated from
start.spring.io. It gives us a number
121

122
00:10:41.570 --> 00:10:46.520
of Spring Boot Starters. We'll get into
those further. It gives us a stub of
122

123
00:10:46.520 --> 00:10:51.410
a project. Not too much in there. We
just have a Spring Boot Application
123

124
00:10:51.410 --> 00:10:57.140
class, a main class, and I think we'll get
in. We'll get folders for static and
124

125
00:10:57.140 --> 00:11:02.750
templates. Now one thing that's a quirk
about git, the way it works, if the folder
125

126
00:11:02.750 --> 00:11:06.920
is empty, I don't think those will get
checked in. But if there's a file inside
126

127
00:11:06.920 --> 00:11:10.160
the folder, then it will get checked
in even if the file like the application.properties
127

128
00:11:10.160 --> 00:11:14.330
is empty, that we'll get
it checked in. With the stove of our
128

129
00:11:14.330 --> 00:11:20.630
initial project that we downloaded is
going to give us an application test.
129

130
00:11:20.630 --> 00:11:27.080
This looks like, I think this is JUnit 4.
Yeah JUnit 4. We will be
130

131
00:11:27.080 --> 00:11:30.470
changing over to JUnit 5 coming up in the
course and we will be getting into
131

132
00:11:30.470 --> 00:11:34.940
testing. This here is the entire
project. Everything that's pretty much in
132

133
00:11:34.940 --> 00:11:40.100
green. The stuff that we brought down
from the start.spring.io on this there
133

134
00:11:40.100 --> 00:11:45.740
are base Spring Boot project. From
here, we are going to build upon that.
134

135
00:11:45.740 --> 00:11:51.350
What I'm going to do now, this is just a
generic project that we checked in or
135

136
00:11:51.350 --> 00:11:56.510
created. Now what I want to do is come
down to Gi. Commit directory.
136

137
00:11:56.510 --> 00:12:00.350
Now we get a dialogue.
137

138
00:12:00.499 --> 00:12:08.569
Say Initial Project Add and we can see
we're still indexing the project so it's
138

139
00:12:08.569 --> 00:12:13.099
not happy about that. Normally what I do
is I turn off code analysis into dues
139

140
00:12:13.099 --> 00:12:18.229
and change on Optimized Imports, so I'm
just going to go ahead and Commit right now.
140

141
00:12:18.229 --> 00:12:22.849
We'll change that at a future point.
In IntelliJ, you can do a Commit and
141

142
00:12:22.849 --> 00:12:27.529
remember in github, if you commit, it
only commits to your local github
142

143
00:12:27.529 --> 00:12:32.269
repository. You have to push it to the
remote repository so that's what I want
143

144
00:12:32.269 --> 00:12:42.570
to do. I'm going to do a Commit and Push
and I'm going to say go right ahead, Commit
144

145
00:12:42.570 --> 00:12:44.250
and now I want to say Push.
You can see down
145

146
00:12:45.950 --> 00:12:50.030
at the bottom, I get a little spending
ball that's pushing. Push is successful
146

147
00:12:50.030 --> 00:12:55.910
so everything's been pushed up to github.
Now if I come over here to Spring Pet
147

148
00:12:55.910 --> 00:12:59.480
Clinic, we can see that I just had
the two files there. If I've refresh
148

149
00:12:59.480 --> 00:13:05.840
this, now we can see that the project has
been checked into github so we have the
149

150
00:13:05.840 --> 00:13:12.110
basic stub, so in this video, I showed you
how to create the initial project. We
150

151
00:13:12.110 --> 00:13:16.940
want step by step. My workflow is to
create the github repository first, even
151

152
00:13:16.940 --> 00:13:20.150
though I could initialize that
externally. A couple different ways to do
152

153
00:13:20.150 --> 00:13:24.020
that. Just my personal workflow. Create
the repository first and then I went to
153

154
00:13:24.020 --> 00:13:29.030
IntelliJ, created the project through
start.spring.io using IntelliJ.
154

155
00:13:29.030 --> 00:13:33.290
Download that project into the working
directory. Actually I skipped a step
155

156
00:13:33.290 --> 00:13:38.210
there were I went over the command line.
I checked out the project to a working
156

157
00:13:38.210 --> 00:13:42.890
directory on my local machine. Then I
went to IntelliJ and created the project
157

158
00:13:42.890 --> 00:13:48.230
and then I committed it and I pushed it
so now all my project files are now up
158

159
00:13:48.230 --> 00:13:51.820
here on github.
