WEBVTT
0
1
00:00:04.190 --> 00:00:08.849
Okay! In this video, what we wanna do is
start introducing you to task management.
1

2
00:00:08.849 --> 00:00:13.590
There's a number of different tools
that we can use. For the purposes of the
2

3
00:00:13.590 --> 00:00:18.840
Spring Framework Guru Pet Clinic, we are
going to be using github. Github has a
3

4
00:00:18.840 --> 00:00:22.140
built-in issue tracker. I'm gonna show
you how to set up some tasks. I'm gonna
4

5
00:00:22.140 --> 00:00:25.680
go in and add some initial tasks that we
are gonna complete in future videos.
5

6
00:00:25.680 --> 00:00:30.480
Just kind of lay out things. I'm trying
to make this very real-world like. One of
6

7
00:00:30.480 --> 00:00:35.850
my favorite issue trackers is called
JIRA. A lot of enterprises use it and
7

8
00:00:35.850 --> 00:00:40.500
there's actually a number of different
issue trackers out there. JIRA is highly
8

9
00:00:40.500 --> 00:00:45.090
popular but github is also highly
popular. There's probably like a
9

10
00:00:45.090 --> 00:00:50.399
dozen more that can easily be put up
there. But the main concept is what we
10

11
00:00:50.399 --> 00:00:56.579
wanna be doing here as best practice
is to be creating the issues. In a
11

12
00:00:56.579 --> 00:01:00.690
typical workflow is you're gonna have
your business partners create issues in
12

13
00:01:00.690 --> 00:01:04.409
some type of issue tracker and then
you're going to work for them. I've
13

14
00:01:04.409 --> 00:01:09.119
been on project teams where you do not
change the source code at all without a
14

15
00:01:09.119 --> 00:01:14.939
issue. This is very important for the
track ability as you get into public
15

16
00:01:14.939 --> 00:01:19.340
companies, companies that handle credit
cards, especially financial services,
16

17
00:01:19.340 --> 00:01:24.119
healthcare companies. What the issue
tracker does is provide visibility of
17

18
00:01:24.119 --> 00:01:27.479
why this source code was changing. It
provides a record of why it's changing
18

19
00:01:27.479 --> 00:01:32.640
and also your business partners can see
through the issue tracker what the issue
19

20
00:01:32.640 --> 00:01:36.450
was, the history of it, and where the
source code changed so that rather than
20

21
00:01:36.450 --> 00:01:40.590
just saying short commit messages, it
gives them a lot more visibility. What
21

22
00:01:40.590 --> 00:01:46.920
I'm going to do is come over here to the
issues screen, click on that. You can
22

23
00:01:46.920 --> 00:01:52.049
see we don't have any. What I'm gonna do is add in a couple issues, so let's
23

24
00:01:52.049 --> 00:01:54.740
create a new issue.
24

25
00:01:58.520 --> 00:02:04.640
So here's the test that I've just added in
and this is to Create a Multi-Module
25

26
00:02:04.640 --> 00:02:08.600
Project for Data Model. This one
thing that we want to do is we're gonna
26

27
00:02:08.600 --> 00:02:13.580
configure Maven to a multi module
build. Very commonly, you're going to take
27

28
00:02:13.580 --> 00:02:19.700
out the Spring Data or JPA entities into
its own module. It's pretty common use
28

29
00:02:19.700 --> 00:02:24.319
case. I'm gonna show you how to use
Spring Boot and the tooling of Spring
29

30
00:02:24.319 --> 00:02:28.080
Boot and Maven to create a Multi-Module
Project.
30

31
00:02:28.080 --> 00:02:31.730
Then of course we wannna do.
31

32
00:02:36.319 --> 00:02:40.640
So here, we're gonna implement the Pet
Clinic POJO Data Model. We haven't
32

33
00:02:40.640 --> 00:02:46.430
seen it in the course yet, but what we
will be doing is using data entities, JPA
33

34
00:02:46.430 --> 00:02:51.349
entities, which are regular pojos.
We're gonna take the Pet Clinic POJO's
34

35
00:02:51.349 --> 00:02:55.540
and get those implemented into the
project.
35

36
00:02:58.030 --> 00:03:03.520
So here, I'm saying Add the Maven Release
Plugin. What this allows us to do is
36

37
00:03:03.520 --> 00:03:08.170
create releases. This is a very popular
plugin to use with Maven and we'll have
37

38
00:03:08.170 --> 00:03:12.690
a whole video on that. Now let's do
38

39
00:03:14.590 --> 00:03:19.120
upgrade to JUnit 5. I said earlier
that we will be using JUnit 5 in the
39

40
00:03:19.120 --> 00:03:24.090
course, so we'll need to upgrade the
project right now. We're on JUnit 4.
40

41
00:03:27.700 --> 00:03:31.450
In here, we're going to Create
Interfaces for Pet Clinic Services, so
41

42
00:03:31.450 --> 00:03:35.170
these are gonna be standard
interfaces that we will use to interact
42

43
00:03:35.170 --> 00:03:39.010
with the backend services, so we'll
create a service layer from the
43

44
00:03:39.010 --> 00:03:45.090
controller and utilize that. This is very
common design pattern with Spring.
44

45
00:03:48.569 --> 00:03:53.459
So here I'm saying we are going to
implement Map Based Services. These
45

46
00:03:53.459 --> 00:03:57.900
are services that will use a hash map,
rather than a database. We'll use
46

47
00:03:57.900 --> 00:04:02.819
this just to illustrate how we can store
data. I am doing this because I wanna
47

48
00:04:02.819 --> 00:04:07.590
show you coming up, how we can have
multiple implementations of an interface
48

49
00:04:07.590 --> 00:04:11.280
and use Spring to compose a project. 
This is gonna be a neat thing that
49

50
00:04:11.280 --> 00:04:15.019
will last up through in this project.
50

51
00:04:19.130 --> 00:04:22.970
So here, we are going to Create the Pet
Clinic Controllers. These are the
51

52
00:04:22.970 --> 00:04:27.370
controller objects to render the views.
52

53
00:04:27.430 --> 00:04:30.990
Let's see here. We'll add in.
53

54
00:04:34.680 --> 00:04:42.199
We'll Add in a Pet Clinic Index Page and
Controller. Let's see here. We'll add in
54

55
00:04:43.249 --> 00:04:48.050
a Bootstrap.
We'll be using Bootstrap CSS. I'll
55

56
00:04:48.050 --> 00:04:52.430
actually add that in. That gives our
application a real nice look and feel.
56

57
00:04:52.430 --> 00:04:56.420
Let's see here. We now have 9 issues
created. I'm gonna show you the
57

58
00:04:56.420 --> 00:05:00.590
list here. This is all the issues I'm
gonna create for right now. But what
58

59
00:05:00.590 --> 00:05:04.730
we'll be doing, each one of these issues
are gonna become a video coming up in
59

60
00:05:04.730 --> 00:05:09.290
the course. I'm showing you how we'll
do those and now I have the issues plan
60

61
00:05:09.290 --> 00:05:14.420
in the upcoming videos when I tackle
each one of these, we will go in and work
61

62
00:05:14.420 --> 00:05:18.140
on that issue and then close out that
issue to show the progress that we've
62

63
00:05:18.140 --> 00:05:21.860
been making on the course. This works
out really nice because we can actually
63

64
00:05:21.860 --> 00:05:25.940
see the github commits linked to the
issues. We'll see that all coming up.
64

65
00:05:25.940 --> 00:05:30.110
For right now, this is a really good
start. We have a number tasks to complete,
65

66
00:05:30.110 --> 00:05:33.980
a number of videos that we want to
record for our Pet Clinic application, so
66

67
00:05:33.980 --> 00:05:38.210
I think we got a nice start here planned
and of course this is not the complete
67

68
00:05:38.210 --> 00:05:43.580
list of tasks by any means. We will be
adding in more tasks as we develop this
68

69
00:05:43.580 --> 00:05:46.120
project.
