WEBVTT
0
1
00:00:04.220 --> 00:00:09.389
Alright. In this lesson, we are going to
stand up a little web application. So a
1

2
00:00:09.389 --> 00:00:13.320
lot of stuff that we've already covered.
I was going to do it as assignment but I
2

3
00:00:13.320 --> 00:00:16.020
changed my mind.
And we're just gonna do it as a code
3

4
00:00:16.020 --> 00:00:19.710
review to go through this because I'm
gonna show a couple of new things here.
4

5
00:00:19.710 --> 00:00:26.160
And I did run into one problem here.
Right now, I am on Spring Boot milestone 4
5

6
00:00:26.160 --> 00:00:32.430
and that broke some things. I'll show
you the requests here in Chrome. Right
6

7
00:00:32.430 --> 00:00:37.350
now with Spring WebFlux, I wanna do
this reactively and that broke Spring
7

8
00:00:37.350 --> 00:00:43.500
Boot WebFlux with Thymeleaf. But make a
long story short, it is fixed in 
8

9
00:00:43.500 --> 00:00:49.829
3.0.8-snapshot. So I've updated our POM to
use a SNAPSHOT version. Right now, I
9

10
00:00:49.829 --> 00:00:54.989
am recording this at the middle of
September and Spring Boot is gonna be
10

11
00:00:54.989 --> 00:00:59.460
coming out with additional version. So
this is going to get fixed. So later on I am
11

12
00:00:59.460 --> 00:01:03.420
gonna update the source code to not
be using the SNAPSHOT version once this
12

13
00:01:03.420 --> 00:01:07.140
matures a little bit more. But I wanna
point out right now, that I am on a
13

14
00:01:07.140 --> 00:01:13.200
SNAPSHOT version. So I had to add this
in. Also, we added in a snapshot
14

15
00:01:13.200 --> 00:01:18.360
repository. So I am going to remove that
in the near future once this stabilizes.
15

16
00:01:18.360 --> 00:01:24.950
But, let's go through the little bit of a
code review here. I added in two pages,
16

17
00:01:24.950 --> 00:01:29.530
and then two pages here. And let's go
ahead and take a look at this in Chrome.
17

18
00:01:29.530 --> 00:01:35.950
Of course, it's gonna open a different
window. So we have a basic form here. And
18

19
00:01:35.950 --> 00:01:42.979
just, it's a numeric field and we
Submit it. So this is gonna be the limit
19

20
00:01:42.979 --> 00:01:50.180
on that API call. Let's go back over to
IntelliJ now and look at the other
20

21
00:01:50.180 --> 00:01:55.009
userlist. Go ahead and bring this up in
Chrome as well.
21

22
00:01:55.009 --> 00:02:00.110
Drag it over for us and we can see that
just set up a table here we're gonna
22

23
00:02:00.110 --> 00:02:04.250
just show First Name, Last Name, Gender,
Email, Language and the Phone number that
23

24
00:02:04.250 --> 00:02:08.209
comes back. So these are the Thymeleaf
templates that I've set up for our use.
24

25
00:02:08.209 --> 00:02:13.760
Gonna be checked into GitHub for you to
check out. And now, let's come over and
25

26
00:02:13.760 --> 00:02:19.640
take a look at the UserController. Now,
things change a little bit as far as
26

27
00:02:19.640 --> 00:02:25.190
getting the form parameters. And right
now, I am doing something bad here on
27

28
00:02:25.190 --> 00:02:31.610
line 37. We're gonna refactor this in an
upcoming video. But this here is gonna
28

29
00:02:31.610 --> 00:02:36.230
go out and get the form data and block.
So we're getting the serverWebExchange
29

30
00:02:36.230 --> 00:02:40.070
and getting form data. Now you
remember, we used to use the request
30

31
00:02:40.070 --> 00:02:45.200
parameters that is a Spring MVC. Now we
need to get a hold of the form data from
31

32
00:02:45.200 --> 00:02:49.640
the ServerWebExchange. This is the
reactive way of doing this. And that's
32

33
00:02:49.640 --> 00:02:53.600
gonna get or limit parameter from the
form. And we could see that I'm now
33

34
00:02:53.600 --> 00:02:59.660
injecting the ApiService. Now to test
this, okay introducing a couple things
34

35
00:02:59.660 --> 00:03:04.310
here as well. This is actually an
integration test. So we are running it
35

36
00:03:04.310 --> 00:03:08.180
with a SpringRunner and the SpringBootTest. The reason I did this is right now
36

37
00:03:08.180 --> 00:03:12.980
I need to bring it up this way so I get
the Thymeleaf template engine
37

38
00:03:12.980 --> 00:03:17.900
wired in and all set up for the testing.
And now, let's go ahead and run this and
38

39
00:03:17.900 --> 00:03:22.519
I'll show you what happens. And we can
see that I'm getting a lot of chatter
39

40
00:03:22.519 --> 00:03:26.630
there. The Spring Boot context is coming
up. So the Spring Boot is starting up the
40

41
00:03:26.630 --> 00:03:31.010
Spring context. And at this time, we're
actually going out and invoking the web
41

42
00:03:31.010 --> 00:03:35.989
server. So we're not using any Mocks here.
This is an actual integration test. So
42

43
00:03:35.989 --> 00:03:40.010
we're going out and
exercising that API so if that API ever
43

44
00:03:40.010 --> 00:03:44.540
goes down these tests will start to fail.
So normally, I would like to do this with
44

45
00:03:44.540 --> 00:03:48.860
some type of mocks or I could wire in
and create a custom context for this. But
45

46
00:03:48.860 --> 00:03:52.550
for the purposes of this and where we're
at on the course, I think this is fine to
46

47
00:03:52.550 --> 00:03:58.340
show you a good integration test. So 
now, it's coming in and will actually run
47

48
00:03:58.340 --> 00:04:07.790
the application. Go ahead and start that
up. You can see we're up on 8080. And you
48

49
00:04:07.790 --> 00:04:12.950
can see that I am running Netty because
we are at running reactively. So let's go
49

50
00:04:12.950 --> 00:04:18.880
ahead and refresh this. And I'll put in 8
here for the number of users to display.
50

51
00:04:18.880 --> 00:04:24.050
And we can see that I go out and then
seems like we always get one extra one
51

52
00:04:24.050 --> 00:04:29.900
from this API from the limit. So
let's go ahead and refresh that. And it's
52

53
00:04:29.900 --> 00:04:33.590
gonna do the form post again. You can
see that every time we're getting a
53

54
00:04:33.590 --> 00:04:37.160
different set of data from that API.
Kind of neat how things change up a
54

55
00:04:37.160 --> 00:04:42.140
little bit. But that is telling us that
it's going out to the API and coming
55

56
00:04:42.140 --> 00:04:48.440
back. Now a couple things that I'm going
to show you coming up in the course, if
56

57
00:04:48.440 --> 00:04:53.330
you're looking at how has wired up this
controller here, obviously we do not wanna
57

58
00:04:53.330 --> 00:04:57.530
be blocking like this. We can do this
fully reactively. And I'm gonna show you
58

59
00:04:57.530 --> 00:05:04.460
coming up, we will refactor this and get
this whole reactive exchange from the
59

60
00:05:04.460 --> 00:05:09.200
API to Thymeleaf. We'll do that all
reactively and we will be refactoring
60

61
00:05:09.200 --> 00:05:14.050
this. So it should be a cool little
example for us to work through.
