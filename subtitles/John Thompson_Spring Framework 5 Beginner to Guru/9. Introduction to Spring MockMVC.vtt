WEBVTT
0
1
00:00:04.430 --> 00:00:09.660
Alright, in this video I wanna
introduce you to Spring MockMVC test.
1

2
00:00:09.660 --> 00:00:13.860
Now this is a feature that was added to
Spring around Version 3.2 I
2

3
00:00:13.860 --> 00:00:19.740
think and it gives us capability to test
Spring MVC controllers and actually unit
3

4
00:00:19.740 --> 00:00:25.859
test them. And it's gonna bring in a
mock servlet context. So controllers
4

5
00:00:25.859 --> 00:00:29.760
can be tricky little beasts to test when
you're looking at testing things
5

6
00:00:29.760 --> 00:00:35.309
like response codes and media types and
different things like that and a lot of
6

7
00:00:35.309 --> 00:00:40.140
times to test like request path mapping
and things like that. In the older days
7

8
00:00:40.140 --> 00:00:45.360
you'd have to bring up an entire web
server to get this tested. Now we have
8

9
00:00:45.360 --> 00:00:50.879
the capability to do a mock web server
and actually we are not even using a mock
9

10
00:00:50.879 --> 00:00:55.590
web server. We're going through a mock
Dispatcher Servlet and the Spring
10

11
00:00:55.590 --> 00:01:00.149
team has given us these tools that we
can utilize it and our tests around the
11

12
00:01:00.149 --> 00:01:04.379
controllers now become very very
lightweight. And I see a lot of people
12

13
00:01:04.379 --> 00:01:08.610
testing those and bringing up the Spring
Context when you really don't need to.
13

14
00:01:08.610 --> 00:01:14.369
And I'm gonna show you how to use the
Spring MockMVC in a standalone setup.
14

15
00:01:14.369 --> 00:01:20.520
So I'm in IntelliJ and let's go ahead and add
a new test method. I'm doing a command N
15

16
00:01:20.520 --> 00:01:29.070
test method and we're gonna do a testMockMVC and the first thing we wanna
16

17
00:01:29.070 --> 00:01:39.140
do is create a MockMVC and alt+enter. We'll get that imported. And we can use a
17

18
00:01:39.140 --> 00:01:46.619
builder and we want that MockMvcBuilders. Now you have two options here, 
18

19
00:01:46.619 --> 00:01:51.509
standaloneSetup or web context setup. There's a lot
of testing, you'll see a lot of examples
19

20
00:01:51.509 --> 00:01:55.500
using the webAppContextSetup and
that's gonna bring up a Spring
20

21
00:01:55.500 --> 00:02:01.320
Context and our tests will no longer be
a unit test. So but standalone tests, we
21

22
00:02:01.320 --> 00:02:06.689
can do and keep our tests running nice
and fast. And what it's gonna ask for
22

23
00:02:06.689 --> 00:02:12.650
is a controller or a set of controllers
and we have our controller that's being
23

24
00:02:12.650 --> 00:02:18.920
configured already for us and this is a
builder. So we wanna say build(). So this
24

25
00:02:18.920 --> 00:02:23.209
is running to build a pattern. So now we
have our MockMvc and it's
25

26
00:02:23.209 --> 00:02:29.870
fluent API. So what I wanna
do is mockMvc.perform(), I wanna
26

27
00:02:29.870 --> 00:02:38.120
say get and the static imports are
little tricky. And I just type mock to
27

28
00:02:38.120 --> 00:02:41.900
narrow down the list. It seems like
there's a thousand static get methods
28

29
00:02:41.900 --> 00:02:46.220
and the one we want is the MockMvcRequestBuilders. So we're gonna do a
29

30
00:02:46.220 --> 00:02:55.180
static import for that, bring that in and
we wanna say get from the root context.
30

31
00:02:55.180 --> 00:03:06.730
Now, we can say andExpect and this is
another static import that we want.
31

32
00:03:06.730 --> 00:03:14.180
I'm gonna import that and we want the mockMvc
status and that's gonna assert that
32

33
00:03:14.180 --> 00:03:19.720
we get back a 200 status from our
controller, which is exactly what we want.
33

34
00:03:19.720 --> 00:03:27.169
andExpect, we have a view. Again, there's
another static import. We're gonna say
34

35
00:03:27.169 --> 00:03:40.280
import that, name("index"). So now let's
go ahead and run this and we see that
35

36
00:03:40.280 --> 00:03:44.479
our test is running. I'll double check
make sure that everything runs. We're on
36

37
00:03:44.479 --> 00:03:50.629
the whole class here but both our tests. Okay so you can see how quick this is
37

38
00:03:50.629 --> 00:03:56.690
running and so there's still very much a
unit test. So we are using basically a
38

39
00:03:56.690 --> 00:04:01.909
mock servlet context created by the
guys at the Spring team and this gives
39

40
00:04:01.909 --> 00:04:06.979
us a lot of capabilities. And that
this is the way I prefer to test Spring
40

41
00:04:06.979 --> 00:04:11.030
MVC controllers and it keeps your test
very light and you don't need to
41

42
00:04:11.030 --> 00:04:14.799
be bringing up the world in the
Spring context. So this is just a great
42

43
00:04:14.799 --> 00:04:19.639
way to be doing things. And going forward
in the course, we are gonna be using
43

44
00:04:19.639 --> 00:04:24.469
this quite a bit more. I'm just showing
you, this just meant to be an
44

45
00:04:24.469 --> 00:04:28.729
introduction to MockMvc. There's a lot more capabilities here and
45

46
00:04:28.729 --> 00:04:32.810
we will definitely be getting into those
capabilities going further or forward in
46

47
00:04:32.810 --> 00:04:35.110
the course.
