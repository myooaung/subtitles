WEBVTT
0
1
00:00:04.339 --> 00:00:08.880
Now, in this example we want to take a
look at using Factory Bean. So it's not
1

2
00:00:08.880 --> 00:00:13.679
that we can do pretty easily inside of
Spring Configuration. And a factory
2

3
00:00:13.679 --> 00:00:16.830
method is something that you're going to
use for more complex object. I'm going to
3

4
00:00:16.830 --> 00:00:20.880
adapt it to our little Hello World example. Typically in the field you're going to
4

5
00:00:20.880 --> 00:00:23.789
have something like a database
connection or maybe a connection to the
5

6
00:00:23.789 --> 00:00:27.900
message broker where you have some
more complex configuration and
6

7
00:00:27.900 --> 00:00:32.160
you're going to ask a factory for that
like for a database connection. But in
7

8
00:00:32.160 --> 00:00:35.370
this example, we're just going to adapt
out our little Hello World example and
8

9
00:00:35.370 --> 00:00:39.600
we're going to move that configuration
into a centralized Java configuration
9

10
00:00:39.600 --> 00:00:43.399
class and I'm going to add in a little
factory bean that's going to determine
10

11
00:00:43.399 --> 00:00:49.320
based on a string figure out which one
we want to return back to our Spring
11

12
00:00:49.320 --> 00:00:52.680
configuration. I'm going to show you how
we can move this all into Java
12

13
00:00:52.680 --> 00:00:58.469
configuration and utilize a factory, a
bean factory to create other beans
13

14
00:00:58.469 --> 00:01:03.750
inside of our Spring Context. So pretty
common thing to do and it actually can
14

15
00:01:03.750 --> 00:01:07.260
make your configuration a little bit
nicer too. Okay I've done a little bit of
15

16
00:01:07.260 --> 00:01:12.240
refactoring to our Dependency Injection
project and what I did is I moved the
16

17
00:01:12.240 --> 00:01:17.729
services back to guru.springframework and I've added in a factory
17

18
00:01:17.729 --> 00:01:23.369
class to generate the different primary
GreetingServices and what we want to do
18

19
00:01:23.369 --> 00:01:27.360
is we're going to use this in a Spring
configuration. So I'm going to come over
19

20
00:01:27.360 --> 00:01:37.799
here and create a New Package called
config. We'll add in a class for a
20

21
00:01:37.799 --> 00:01:48.869
Greeting Config and now we're going to
annotate it as @Configuration. Now what
21

22
00:01:48.869 --> 00:01:53.909
we want to do is I've added in this
GreetingService factory and it takes
22

23
00:01:53.909 --> 00:02:00.420
in as a constructor, the GreetingRepository and the method, the factory
23

24
00:02:00.420 --> 00:02:04.350
method is going to take in a language
string and right now it's going to
24

25
00:02:04.350 --> 00:02:08.910
support English, German and Spanish. So
we have the three different options there
25

26
00:02:08.910 --> 00:02:13.950
and we're going to utilize us to mimic
something that's a heavyweight.
26

27
00:02:13.950 --> 00:02:17.459
That we're going to be using some type
of like a database connection factory or
27

28
00:02:17.459 --> 00:02:22.019
something for. So we're going to mimic
that in our Spring configuration. So we
28

29
00:02:22.019 --> 00:02:26.970
want to first, we need to make this
factory a Spring Bean. So we're going to
29

30
00:02:26.970 --> 00:02:43.200
come over here and this is going
to take in the repository and now what we
30

31
00:02:43.200 --> 00:02:52.620
want to do is return a new instance. Now
when I annotate this as a Bean, it's
31

32
00:02:52.620 --> 00:02:59.700
going to get configured as a Spring Bean. So what this is doing is I've declared
32

33
00:02:59.700 --> 00:03:04.500
the GreetingRepository as a parameter
for that Bean and Spring is going to
33

34
00:03:04.500 --> 00:03:09.780
pick that up automatically and at
runtime, it's going to get injected into
34

35
00:03:09.780 --> 00:03:20.700
my configuration method and then I'm
kind of providing a, I made a mistake there. I forgot the
35

36
00:03:20.700 --> 00:03:25.079
new keyword so sorry that was turning me off. I was
wondering why this method was called. It's kind
36

37
00:03:25.079 --> 00:03:30.540
of a strange error. So this is
going to be returning a new instance of
37

38
00:03:30.540 --> 00:03:35.190
the GreetingServiceFactory and it's
going to take in the repository that was
38

39
00:03:35.190 --> 00:03:41.069
passed into our Bean method to declare
it. Now we can utilize those to declare
39

40
00:03:41.069 --> 00:03:49.639
other Spring Beans and what we want to
do is I'm going to get rid of this. I
40

41
00:03:49.639 --> 00:04:01.500
know all these and we'll get that all
into our Spring configuration. Get back
41

42
00:04:01.500 --> 00:04:04.310
to the right class here.
42

43
00:04:06.599 --> 00:04:10.959
And I'm going to pause here and
fast-forward a little bit and type this
43

44
00:04:10.959 --> 00:04:15.010
out so you don't have to see me type
three different methods and then
44

45
00:04:15.010 --> 00:04:19.239
we'll go over it. Okay I fast forward a
little bit to save you some time
45

46
00:04:19.239 --> 00:04:23.889
watching me type and what I've done is
I've added in three different bean
46

47
00:04:23.889 --> 00:04:28.780
definitions and if you can see, I'm also
using the Primary and Profile
47

48
00:04:28.780 --> 00:04:33.430
annotations there. So it's not
functioning just like before so I'm
48

49
00:04:33.430 --> 00:04:39.520
coming into IntelliJ so I'm showing you
the what was deleted there.13 to 16 on
49

50
00:04:39.520 --> 00:04:44.380
the line number so you can see that we
deleted service Primary and Profile from
50

51
00:04:44.380 --> 00:04:50.260
the class. So that's no longer annotated
as a class and we moved it into the
51

52
00:04:50.260 --> 00:04:56.530
configuration. So now we can see that we
have the same annotations there but this
52

53
00:04:56.530 --> 00:05:01.020
time instead of Service, it's at Bean
because we're in a configuration class.
53

54
00:05:01.020 --> 00:05:06.280
But the Primary annotation, Profile
annotations work just like they do on
54

55
00:05:06.280 --> 00:05:11.380
mer clear components, they also work in
configuration classes. So now we can see
55

56
00:05:11.380 --> 00:05:18.100
that we have set this default
English, es for Spanish and de for
56

57
00:05:18.100 --> 00:05:24.729
German. So let's go ahead and run this
now. You can see it's going to run and we're
57

58
00:05:24.729 --> 00:05:31.060
getting the same results and if I
come down here to the resources
58

59
00:05:31.060 --> 00:05:38.350
application.properties and let's
uncomment that and let's change it to
59

60
00:05:38.350 --> 00:05:47.080
Spanish and we'll run it again and watch
the Spanish being injected. Okay so
60

61
00:05:47.080 --> 00:05:54.430
we can see that we still have the same
functionality as before and that the
61

62
00:05:54.430 --> 00:05:59.220
Beans are getting wired up properly but
this time here we do have a little bit
62

63
00:05:59.220 --> 00:06:03.910
cleaner configuration and this is
something that you might want to do if
63

64
00:06:03.910 --> 00:06:08.410
you have a more complex thing and I'm
just doing this as examples but you do
64

65
00:06:08.410 --> 00:06:11.590
get into situations where you're
annotating the classes and sometimes
65

66
00:06:11.590 --> 00:06:16.479
it's easier and cleaner to pull that
configuration out to central class. So
66

67
00:06:16.479 --> 00:06:19.840
you have one class to maintain for your
configuration rather
67

68
00:06:19.840 --> 00:06:23.710
than having your annotations spread all
over a bunch of different classes. So
68

69
00:06:23.710 --> 00:06:27.310
just a different technique as you get
more experience with spring you'll
69

70
00:06:27.310 --> 00:06:30.820
get a feeling for which one to
use and sometimes you'll go back and go
70

71
00:06:30.820 --> 00:06:34.630
I want to refactor this and and you move
stuff into a configuration class because
71

72
00:06:34.630 --> 00:06:40.270
this is a little cleaner. You can see the
attention in one spot rather than being
72

73
00:06:40.270 --> 00:06:44.110
spread across multiple classes. Alright you saw how easy it was to
73

74
00:06:44.110 --> 00:06:48.160
move this into Java configuration and I
think at the end of the day I feel that
74

75
00:06:48.160 --> 00:06:53.080
having this is a little bit cleaner. If
you think you're in a situation where
75

76
00:06:53.080 --> 00:06:56.650
you might have to add more languages,
this is probably not the way you'd want
76

77
00:06:56.650 --> 00:07:00.220
to do it but you can see how something
like this could be extendable for that
77

78
00:07:00.220 --> 00:07:05.260
if you had more things to do like
this and extend out more and more beans
78

79
00:07:05.260 --> 00:07:10.720
you might want to do this. But this is
just a play example to get you exposed
79

80
00:07:10.720 --> 00:07:15.360
to different configuration options
within the Spring framework.
