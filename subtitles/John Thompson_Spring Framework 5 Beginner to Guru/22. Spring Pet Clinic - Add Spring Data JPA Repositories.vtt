WEBVTT
0
1
00:00:03.350 --> 00:00:08.730
In this video, we are going to go ahead
and start implementing the Spring Data
1

2
00:00:08.730 --> 00:00:12.929
JPA Repositories. You've already
seen these in the course. I'm going to go ahead
2

3
00:00:12.929 --> 00:00:16.020
and assign this to myself. This is going to be
number 39 that we're going to be working
3

4
00:00:16.020 --> 00:00:20.250
on. We're going to go ahead and
implement the Spring Data JPA
4

5
00:00:20.250 --> 00:00:23.519
Repositories. There's a number of
different ones that we can use. I'm going to
5

6
00:00:23.519 --> 00:00:27.359
jump over to IntelliJ and talk through
that a little bit. This is an area that
6

7
00:00:27.359 --> 00:00:33.540
does get some confusion. At the bottom
of this in the food chain, I guess, we
7

8
00:00:33.540 --> 00:00:39.270
have the Repository interface. This is
the bottom of the Spring Data Repository.
8

9
00:00:39.270 --> 00:00:43.680
A lot of things can inherit from those,
different flavors of the Repository. We
9

10
00:00:43.680 --> 00:00:48.090
are going to be looking specifically at
the CrudRepository so we've implemented
10

11
00:00:48.090 --> 00:00:53.190
our map implementation, very similar
to using this CrudRepository. We are
11

12
00:00:53.190 --> 00:00:58.710
going to follow the repository pattern
and use of the CrudRepository. Now, there
12

13
00:00:58.710 --> 00:01:03.750
are other implementations that also
inherit from this. There's the PagingAnd
13

14
00:01:03.750 --> 00:01:09.090
SortingRepository, which adds in paging
and sorting, obviously, as the names
14

15
00:01:09.090 --> 00:01:13.650
kind of implies. This extends out the
CrudRepository. Then there's
15

16
00:01:13.650 --> 00:01:19.799
specifically one for JPA.
This extends out the PagingAnd
16

17
00:01:19.799 --> 00:01:24.450
Sorting, which extends the CrudRepository so we inherit all the methods
17

18
00:01:24.450 --> 00:01:28.979
in that, and then also, a query by example
executors. These are some pretty
18

19
00:01:28.979 --> 00:01:32.759
advanced things that are available
within Spring Data and Spring Data JPA
19

20
00:01:32.759 --> 00:01:38.220
that we can utilize if we have a use
case. At this time, we do not really have
20

21
00:01:38.220 --> 00:01:42.540
a use case for it so I'm not going to
implement that. We are going to focus on
21

22
00:01:42.540 --> 00:01:47.850
the CrudRepository interface, which will
allow us Spring Data JPA to provide an
22

23
00:01:47.850 --> 00:01:53.939
implementation of this to our classes. So
this is what we're going to be implementing.
23

24
00:01:53.939 --> 00:01:58.049
It's the CrudRepository. The other ones
do have advanced features and
24

25
00:01:58.049 --> 00:02:02.189
functionality. I'm not going to get into at
this time. I want to reiterate
25

26
00:02:02.189 --> 00:02:05.430
not using them because I don't
need that functionality. That's the
26

27
00:02:05.430 --> 00:02:09.660
primary reason why I am not using those
other options. These are just
27

28
00:02:09.660 --> 00:02:13.950
more tools inside of Spring Data that we
can use if we need them.  I
28

29
00:02:13.950 --> 00:02:18.840
a lot of questions about why we used one
over the other and it's primarily the
29

30
00:02:18.840 --> 00:02:23.790
reason why is what we need to use it for.
I'm going to go ahead and close this
30

31
00:02:23.790 --> 00:02:29.230
all out.
Close all. Shrink that down. We
31

32
00:02:29.230 --> 00:02:35.560
closed external libraries. I'm going to
go ahead and implement repositories for
32

33
00:02:35.560 --> 00:02:41.290
all these. So we got our model services.
Now there's a couple different places I
33

34
00:02:41.290 --> 00:02:45.670
could create it. I'm going to create it
right off the root of our main
34

35
00:02:45.670 --> 00:02:50.489
project. It's called repositories.
35

36
00:02:53.300 --> 00:02:57.110
In this, I'm going to create the
implementations. Now I could arguably
36

37
00:02:57.110 --> 00:03:01.700
put it under services. I don't think
that's really necessary. What I want
37

38
00:03:01.700 --> 00:03:05.180
to do is start implementing some of
repositories for us, so when it's a new
38

39
00:03:05.180 --> 00:03:10.150
Java class. This is going to be an
interface. Let's create a owner, an
39

40
00:03:10.150 --> 00:03:13.990
OwnerRepository.
It's going to
40

41
00:03:14.840 --> 00:03:17.230
extend out
41

42
00:03:18.319 --> 00:03:21.990
the CrudRepository.
In this case, it's going to be a
42

43
00:03:21.990 --> 00:03:26.060
typing ID so we are going to do Owner. 
We can see that
43

44
00:03:27.330 --> 00:03:31.890
we have a couple objects there so we
want the model, the entity that we've
44

45
00:03:31.890 --> 00:03:36.760
implemented.
We're going to do a Long. Just to
45

46
00:03:36.760 --> 00:03:41.739
reiterate what we're doing here, the
CrudRepository takes in two generic
46

47
00:03:41.739 --> 00:03:47.650
properties. A T for the type of the entity
and the ID value, the ID value of the
47

48
00:03:47.650 --> 00:03:52.680
entity. So I come over here and let's
go into Owner.
48

49
00:03:53.300 --> 00:03:57.800
That extends out that Person and BaseEntity. The ID value is a Long, so
49

50
00:03:57.800 --> 00:04:01.970
that's why we're specifying Owner and
then the Long. At this point, I don't
50

51
00:04:01.970 --> 00:04:08.720
need to implement anything else. Like you
saw previously, we can implement query
51

52
00:04:08.720 --> 00:04:12.590
methods. If we have a need, we will do
that. At this point, we don't have a need.
52

53
00:04:12.590 --> 00:04:16.820
But I do want to go in and implement the
rest. So, Owner is going to be implemented.
53

54
00:04:16.820 --> 00:04:20.989
Person will never going to implement.
Let's go ahead and add in a Pet
54

55
00:04:20.989 --> 00:04:23.770
Repository.
55

56
00:04:29.589 --> 00:04:34.799
This is also going to be Pet, Long.
56

57
00:04:38.940 --> 00:04:44.139
PetType, PetTypeRepository.
57

58
00:04:46.509 --> 00:04:51.379
It's being interface. We'll go ahead
and implement that extends
58

59
00:04:51.379 --> 00:04:54.819
CrudRepository.
59

60
00:04:55.240 --> 00:05:01.620
PetType and also a Long
Specialty. We'll set up a
60

61
00:05:01.620 --> 00:05:04.669
SpecialtyRepository.
61

62
00:05:07.670 --> 00:05:13.870
You should add some interface. Create
that extends out Crud
62

63
00:05:15.100 --> 00:05:17.370
Repository,
63

64
00:05:18.170 --> 00:05:22.190
Specialty and Long.
64

65
00:05:22.690 --> 00:05:26.949
Let's see what we need.
Vet.
65

66
00:05:36.999 --> 00:05:41.589
You can see here, I'm got a red
squiggly line. What happened was I
66

67
00:05:41.589 --> 00:05:48.120
made a mistake. I say class rather than
interface.
67

68
00:05:48.120 --> 00:05:52.499
That is easily fixed. Finally, we
need a VisitRepository.
68

69
00:05:54.150 --> 00:05:58.819
I'll make that interface
this time so we don't get that error.
69

70
00:06:03.660 --> 00:06:08.490
You can see I've added in six new
repository interfaces. Because all
70

71
00:06:08.490 --> 00:06:14.220
these are JPA entities, Spring Data JPA
is going to provide us instances of
71

72
00:06:14.220 --> 00:06:19.470
these at runtime automatically, so we
will get those available for our use in
72

73
00:06:19.470 --> 00:06:23.910
the Spring context. Some of these, I
don't know if we're going to have a direct
73

74
00:06:23.910 --> 00:06:29.730
use case for. I just kinda went through
blanket and added in repositories for
74

75
00:06:29.730 --> 00:06:34.800
all our entities, so if we do need to use
a repository we will have it there. When
75

76
00:06:34.800 --> 00:06:38.670
you get to the end of the project, maybe
we're not using one or more of these
76

77
00:06:38.670 --> 00:06:42.870
perhaps. We'll see. When we get down to
being complete with this. But I suspect
77

78
00:06:42.870 --> 00:06:47.370
we're going to find a need for most of
them. Now I do want to toggle over and
78

79
00:06:47.370 --> 00:06:54.850
take a look at the implementation here.
You can see what they've done here.
79

80
00:06:54.850 --> 00:07:01.140
They organized their structure more
by model, so we have the model, the owner.
80

81
00:07:01.140 --> 00:07:06.610
Within the owner package, we have an
OwnerController, OwnerRepository, Pet, all
81

82
00:07:06.610 --> 00:07:11.740
things being related to Owner. I
think what they did is kind of made this
82

83
00:07:11.740 --> 00:07:17.170
more oriented to setting up micro
services, so they took the domain and
83

84
00:07:17.170 --> 00:07:20.160
made the domain kind of drive the
packages and the relationships there.
84

85
00:07:20.160 --> 00:07:25.450
Perhaps we'll refactor that. The
structure that I have, I kind of prefer I
85

86
00:07:25.450 --> 00:07:30.520
know where my repositories are. I know
where my model is. So I'm kind of going
86

87
00:07:30.520 --> 00:07:34.630
more functional in my approach where
they are more domain oriented. Domain
87

88
00:07:34.630 --> 00:07:38.860
being the objects that they're working
with. Just a different spin. We're doing
88

89
00:07:38.860 --> 00:07:43.960
effectively the same thing but we have
the organization different. This is
89

90
00:07:43.960 --> 00:07:48.100
more of my opinion. I'm not saying it's
right or wrong. That's just the way I am
90

91
00:07:48.100 --> 00:07:52.480
have chosen to implement it. So in case
there's any questions around that. Again,
91

92
00:07:52.480 --> 00:07:56.680
I'm just talking about the package
structure. You can see here, they have
92

93
00:07:56.680 --> 00:08:00.910
organized by owner and if you look like
by vet, you can see that that has
93

94
00:08:00.910 --> 00:08:05.380
Specialty, VetController, VetRepository all in one package, where I'm
94

95
00:08:05.380 --> 00:08:10.180
spreading out more by the functionality.
So the objective of this video was to
95

96
00:08:10.180 --> 00:08:15.070
add in the Spring Data Repositories.
Fairly simple implimentation of six
96

97
00:08:15.070 --> 00:08:20.650
interfaces. I'm going to go ahead and
close out this issue now and we will jump
97

98
00:08:20.650 --> 00:08:24.450
to the next task in the next video.
