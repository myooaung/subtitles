WEBVTT
0
1
00:00:03.859 --> 00:00:08.030
Alright. In this video, we are going to be
reviewing the assignment to create the
1

2
00:00:08.030 --> 00:00:14.280
vendors API. So we've been working with
that fruit shop vendors spec and we're
2

3
00:00:14.280 --> 00:00:17.369
gonna look at implementing that. So
this is kind of a challenging assignment
3

4
00:00:17.369 --> 00:00:21.449
because I wanted you to go in and
reinforce all the things that we've been
4

5
00:00:21.449 --> 00:00:25.949
talking about in the course, so far as
far as Domains, Repositories, Service
5

6
00:00:25.949 --> 00:00:31.289
Layer. I'm using DTOs. The MapStruct
Type Converters challenge you to also
6

7
00:00:31.289 --> 00:00:35.730
use test-driven development and we wanna create a controller that's gonna
7

8
00:00:35.730 --> 00:00:42.390
create a RESTful API for GET, POST, DELETE, GET by ID, PATCH and PUT. And we're
8

9
00:00:42.390 --> 00:00:47.190
able to skip the product API calls.
Just a reference, come over here and take
9

10
00:00:47.190 --> 00:00:50.760
a look at the Swagger documentation. You
can see down at the bottom of the screen,
10

11
00:00:50.760 --> 00:00:57.300
we have the API spec for the vendors and
everything that we wanna be able to do
11

12
00:00:57.300 --> 00:01:01.590
with that. So take a quick look at the
data model that's gonna come back, and
12

13
00:01:01.590 --> 00:01:06.240
we're gonna have a JSON object that says
vendors and a name and then the URL
13

14
00:01:06.240 --> 00:01:10.950
string. So that's what we want to
replicate in our API that we're
14

15
00:01:10.950 --> 00:01:14.369
developing. So let's go over and take a
look at my implementation of this right now.
15

16
00:01:14.369 --> 00:01:18.509
You toggle over to IntelliJ, and we can
16

17
00:01:18.509 --> 00:01:23.280
see that I have the domain class up
there. It is an Entity, a JPA Entity, and
17

18
00:01:23.280 --> 00:01:29.490
it's called Vendor. We have a simple id
prompt value there and just one value of
18

19
00:01:29.490 --> 00:01:34.590
the name. So pretty simple entity that we
are dealing with, and of course, I am also
19

20
00:01:34.590 --> 00:01:40.439
implementing a VendorRepository. And
again, I'm using the JpaRepository, which
20

21
00:01:40.439 --> 00:01:44.220
gives us some nice features, which I hope
to explore at a future point in the
21

22
00:01:44.220 --> 00:01:49.829
course. And so, not much there for us
to implement Spring Data. It's gonna
22

23
00:01:49.829 --> 00:01:54.030
give us some great functionality out of
the box. And now, we also wanna follow
23

24
00:01:54.030 --> 00:01:58.920
the DTO pattern.
And we see here that I am using
24

25
00:01:58.920 --> 00:02:03.719
Project Lombok. And through Project
Lombok, you can see that I am using the
25

26
00:02:03.719 --> 00:02:07.680
@Data annotation, which is gonna give
me getters and setters and equals and
26

27
00:02:07.680 --> 00:02:11.250
hashcode. And I'm also, just for our
convenience, I'm adding in
27

28
00:02:11.250 --> 00:02:16.770
the annotations @NoArgsConstructor and
@AllArgsConstructor. And I think I did
28

29
00:02:16.770 --> 00:02:21.810
this on Vendor, as well. I just used @Data
there. So you could optionally add in
29

30
00:02:21.810 --> 00:02:25.080
those annotations here. It might make
your life a little bit easier. I'm gonna
30

31
00:02:25.080 --> 00:02:30.780
leave those off for right now. And then
also, I created a list DTO. So this is
31

32
00:02:30.780 --> 00:02:34.800
just like what we did for customer, and
that's kind of like a wrapper object
32

33
00:02:34.800 --> 00:02:39.510
because the API specification, if you
remember, if we take a look at it here, we
33

34
00:02:39.510 --> 00:02:43.620
are returning back a list of vendors. So
this is that object that's gonna get
34

35
00:02:43.620 --> 00:02:47.550
converted it into JSON for us, when we're
working with the API for a list of
35

36
00:02:47.550 --> 00:02:53.880
vendors. And we see it's a pretty simple
mapping. The vendors property will get
36

37
00:02:53.880 --> 00:02:57.720
mapped to the String vendors using
Jackson for us. So this works out pretty
37

38
00:02:57.720 --> 00:03:01.670
nicely.
Next, we implement a VendorMapper.
38

39
00:03:01.670 --> 00:03:08.070
This is a mapper implemented through
MapStruct. So this is gonna give us a
39

40
00:03:08.070 --> 00:03:13.050
Mapper instance. Just as a reminder,
I'm gonna go in here and compile this,
40

41
00:03:13.050 --> 00:03:17.130
and this gets created off of compiling.
So if you ever run in to something
41

42
00:03:17.130 --> 00:03:21.570
funny, go ahead and compile the project
if you're missing the Mapper instance.
42

43
00:03:21.570 --> 00:03:26.549
And if I come down here, just as a
reminder if we come down to target and
43

44
00:03:26.549 --> 00:03:31.890
we can look at generated-sources, we
can see that here's our implementation
44

45
00:03:31.890 --> 00:03:35.760
that MapStruct is providing for us. So I
really like MapStruct. It's a great
45

46
00:03:35.760 --> 00:03:38.250
time-saver.
If you're able to use it our project,
46

47
00:03:38.250 --> 00:03:43.170
I highly recommend checking it out. It's
got some really cool capabilities. And of
47

48
00:03:43.170 --> 00:03:48.350
course, I have a test for that. Let's go
ahead and take a look at that.
48

49
00:03:52.640 --> 00:03:56.630
You can see here, I just have a very
simple mapping test. Go ahead and run
49

50
00:03:56.630 --> 00:04:00.710
this. And I really like this little
feature in IntelliJ. This is a fairly recent
50

51
00:04:00.710 --> 00:04:04.640
addition to IntelliJ, it's being able to
run the test right out of the gutter or
51

52
00:04:04.640 --> 00:04:08.060
the source code. And we can see that it's
pretty simple test.
52

53
00:04:08.060 --> 00:04:11.990
I do recommend trying to set up tests on
your mappers. Make sure that you're doing
53

54
00:04:11.990 --> 00:04:16.940
the data mappings correctly. I've seen a
lot of errors happen in this area.
54

55
00:04:16.940 --> 00:04:21.709
Then next up is we have the VendorService implementation. This is gonna
55

56
00:04:21.709 --> 00:04:26.390
list the methods that we are going to be
using from the controller layer. This
56

57
00:04:26.390 --> 00:04:30.050
gives us the service and let's go ahead
and take a look at the service
57

58
00:04:30.050 --> 00:04:34.220
implementation of that. And you can see,
this is gonna look a lot like what we
58

59
00:04:34.220 --> 00:04:38.450
did for the CategoryService. So very
similar, but now we're working with
59

60
00:04:38.450 --> 00:04:44.240
vendors. Same basic operations here. Now, I
do wanna point out on the patch, that's
60

61
00:04:44.240 --> 00:04:48.890
pretty much the same for the save, but
we're just checking those properties. So
61

62
00:04:48.890 --> 00:04:54.170
our Vendor data model is like extremely
simple. So a PATCH operation is really
62

63
00:04:54.170 --> 00:04:58.669
kind of not a very good example for that.
But as we had more properties, we would
63

64
00:04:58.669 --> 00:05:04.550
wanna be checking to see if those are
set on the PATCH operation here. Then
64

65
00:05:04.550 --> 00:05:09.169
of course, we do have a test
implementation of this. Go ahead and take
65

66
00:05:09.169 --> 00:05:13.400
a look at that. Now on the test
implementation, I am showing you some new
66

67
00:05:13.400 --> 00:05:19.700
things here in the testing. So I wanna
point out on line 57 here, Mokito
67

68
00:05:19.700 --> 00:05:26.320
actually implemented a behavior driven
development syntax. So that should be BDD.
68

69
00:05:26.320 --> 00:05:32.270
So this is a new syntax that we were not
using before, so this gives us some nice
69

70
00:05:32.270 --> 00:05:37.160
functionality when we're thinking about
giving one then as in a behavior driven
70

71
00:05:37.160 --> 00:05:41.690
syntax. It's really helpful. I like
writing my tests this way. It does help
71

72
00:05:41.690 --> 00:05:45.200
me think about what's happening under
its house, what I want the test to be
72

73
00:05:45.200 --> 00:05:49.490
actually be doing. So I do have a series
of tests here. And then, I also wanna
73

74
00:05:49.490 --> 00:05:54.010
point out here on my 96, actually through
the whole test, I'm using assertThat.
74

75
00:05:54.010 --> 00:05:59.300
So this is also a new type of a JUnit
assertion. I think they introduced this
75

76
00:05:59.300 --> 00:06:03.470
about two years ago, if memory serves me
right. So you can do assertions and then
76

77
00:06:03.470 --> 00:06:07.220
use matchers.
And if I remember, I think these are actually Hamcrest
77

78
00:06:07.220 --> 00:06:12.680
matchers. Double-checked that. Yeah so all the
Hamcrest library. So there's a variety
78

79
00:06:12.680 --> 00:06:16.820
of matchers that we can use to create the
assertions with. So this is just an
79

80
00:06:16.820 --> 00:06:20.030
alternate syntax I want want to
introduce you to. So a little bit
80

81
00:06:20.030 --> 00:06:23.210
different. Trying to show you some things
along the way here that can make your
81

82
00:06:23.210 --> 00:06:26.810
life easier. Some people prefer just
assertEquals. That's fine. Nothing
82

83
00:06:26.810 --> 00:06:30.860
wrong with that. This is actually uh
the assertions and the Hamcrest matchers
83

84
00:06:30.860 --> 00:06:35.330
had a lot of really cool capability, so I
personally will go back and forth
84

85
00:06:35.330 --> 00:06:40.340
between the two types of method. 
Let's see here. Then let's take a look
85

86
00:06:40.340 --> 00:06:50.320
at the controller implementation. Then
our controller implementation, like this.
86

87
00:06:50.320 --> 00:06:56.030
So you can see, I am using the @RestController annotation and also 
87

88
00:06:56.030 --> 00:07:00.260
@GetMapping and @ResponseStatus so that it's
gonna get rendered as an object based on
88

89
00:07:00.260 --> 00:07:04.700
the content type of the request. I wanna point out that I'm using a BASE_URL
89

90
00:07:04.700 --> 00:07:09.830
again, just like we did on the category
and customer repositories so that
90

91
00:07:09.830 --> 00:07:14.750
makes our life a little bit easier by
defining that String in one spot. And on
91

92
00:07:14.750 --> 00:07:18.680
the test, I'm also gonna show you some
new stuff with the controller test. And
92

93
00:07:18.680 --> 00:07:22.040
this is actually really important. I
don't think I've done this in the course
93

94
00:07:22.040 --> 00:07:28.070
yet. I am doing it as a integration test.
So now, I'm using the Spring Context. I
94

95
00:07:28.070 --> 00:07:32.060
wanna show you a couple different
things here. I am running with the 
95

96
00:07:32.060 --> 00:07:37.190
@WebMvcTest, which is gonna bring up a
small segment of the Spring Context and
96

97
00:07:37.190 --> 00:07:44.900
just for the web front-end. I am also
using it on line 35 @MockBean, so this is
97

98
00:07:44.900 --> 00:07:49.520
an annotation, that's gonna tell
Mockito and Spring to create a Mockito
98

99
00:07:49.520 --> 00:07:55.850
Mock and inject it into our test here. So
rather than doing the initMock, we are
99

100
00:07:55.850 --> 00:08:01.690
asking the Spring Context to create that
Mock for us and inject it into our class.
100

101
00:08:01.690 --> 00:08:07.760
Also, I'm using @Autowired there on line
38 for MockMvc. I'm specifying that
101

102
00:08:07.760 --> 00:08:12.590
I want the VendorController class to be
brought in and wired up. So this is a
102

103
00:08:12.590 --> 00:08:17.690
pretty big contrast. So let's take a look
at the CustomerControllerTest. If we
103

104
00:08:17.690 --> 00:08:22.219
scroll up to the top there,
remember I'm saying make a Mock there,
104

105
00:08:22.219 --> 00:08:30.199
and also @InjectMocks, so what's gonna
happen here, with these two is Mockito,
105

106
00:08:30.199 --> 00:08:35.089
is going to create a Mock here, when we
run the initMocks, and it's also going to
106

107
00:08:35.089 --> 00:08:42.019
create a CustomerController instance
for us and inject that Mock object in
107

108
00:08:42.019 --> 00:08:50.209
there. Where in contrast, here, we are
asking a Spring to do everything for us.
108

109
00:08:50.209 --> 00:08:53.810
So Spring is gonna do the heavy
lifting it managing those. I've
109

110
00:08:53.810 --> 00:08:59.149
done some refactorings from what we had
before. You can see on the @Before method,
110

111
00:08:59.149 --> 00:09:03.200
I'm now setting up our objects there
that we're gonna be working with in
111

112
00:09:03.200 --> 00:09:06.829
the test, and the rest of the test, I
think I'm doing pretty much the same
112

113
00:09:06.829 --> 00:09:12.910
thing. Except I am using the behavior
driven development syntax for Mockito
113

114
00:09:12.910 --> 00:09:17.779
here and I'm also doing some more
assertions. I think in the previous
114

115
00:09:17.779 --> 00:09:21.950
test, I wasn't testing the Mock
interactions as well, so we got some
115

116
00:09:21.950 --> 00:09:26.300
additional assertions there on all the
tests. So now, if I come over here and run
116

117
00:09:26.300 --> 00:09:40.640
this, verify that all the tests are
running. One thing I did not do is I
117

118
00:09:40.640 --> 00:09:45.170
did not add any bootstrapped data. So
let's come in here. I'm gonna pause the
118

119
00:09:45.170 --> 00:09:50.209
video and add a bootstrap method real
quick. Okay. Jumped ahead and I added in a
119

120
00:09:50.209 --> 00:09:54.769
new method on our bootstrap class to
load vendors and I'm just creating two
120

121
00:09:54.769 --> 00:10:05.360
new Vendor objects there. So let's go
ahead and start our application. Got an
121

122
00:10:05.360 --> 00:10:09.740
error in my test because I changed the
signature of that class, and let's go
122

123
00:10:09.740 --> 00:10:12.790
ahead and fix that real quick.
123

124
00:10:19.240 --> 00:10:27.920
Now let's try running this again. So we
are up and running. Let's bring up
124

125
00:10:27.920 --> 00:10:38.180
Postman. I don't have that. Starting a
Postman and we will just make sure that
125

126
00:10:38.180 --> 00:10:45.619
we can go to localhost, and get a list of
vendors, and I'm gonna step through everything.
126

127
00:10:48.339 --> 00:10:53.480
And we can see that we have Vendor 1,
and that is because, let's take a quick
127

128
00:10:53.480 --> 00:11:02.839
look at Bootstrap. A typo. Remember I said
about cut and paste. So don't cut and
128

129
00:11:02.839 --> 00:11:17.449
paste at home. Met. Go ahead and compile
this. Okay, that should be working. I'm
129

130
00:11:17.449 --> 00:11:21.860
gonna go ahead and restart it. So I am
using Spring Boot DevTools.
130

131
00:11:21.860 --> 00:11:27.829
Sometimes things don't work right. So if
you ever see something out there, what I
131

132
00:11:27.829 --> 00:11:36.290
do here? So there, you saw as getting an
error saying CategoryMapper not found.
132

133
00:11:36.290 --> 00:11:40.519
And that's because I needed to compile
it. I did a rebuild on the project and
133

134
00:11:40.519 --> 00:11:45.379
the IntelliJ must create in that class.
So let's go ahead and try running this
134

135
00:11:45.379 --> 00:11:54.980
again. We are back up and happy again.
Let's go ahead and test that. And now, I
135

136
00:11:54.980 --> 00:11:59.329
do have the two vendors coming back in
the list, and if we come over here to our
136

137
00:11:59.329 --> 00:12:07.699
API specification and if I do a try it
out, you can see that I'm getting the
137

138
00:12:07.699 --> 00:12:12.110
same JSON. And, part of the assignment I
said not to worry about the metadata
138

139
00:12:12.110 --> 00:12:16.699
object. So we can implement that at a
later time, as primarily worried about
139

140
00:12:16.699 --> 00:12:21.800
you guys being able to create the list
of vendors and JSON output. So it's a
140

141
00:12:21.800 --> 00:12:26.839
fairly large assignment. I hope you guys
found success in it, and hope the tips I
141

142
00:12:26.839 --> 00:12:30.339
pass along here, you find helpful.
