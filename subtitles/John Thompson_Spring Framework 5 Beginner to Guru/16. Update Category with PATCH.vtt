WEBVTT
0
1
00:00:04.190 --> 00:00:09.150
Alright! In this video, we are going to
take a look at using the patch method.
1

2
00:00:09.150 --> 00:00:15.660
And remember, in a RESTful API, patch is an
operation to partially update a resource.
2

3
00:00:15.660 --> 00:00:22.080
And to be honest, looking at a patch
is not used that much. There are cases
3

4
00:00:22.080 --> 00:00:27.029
where it is useful, and the standard
around it is kind of a little bit
4

5
00:00:27.029 --> 00:00:31.500
nebulous too, so it's not very common. But,
I thought I demonstrate how to setup a
5

6
00:00:31.500 --> 00:00:38.489
patch method in this example here, and that
there is a number of different am and I'm
6

7
00:00:38.489 --> 00:00:43.170
using air quotes standards around the
patch method, and a number of different
7

8
00:00:43.170 --> 00:00:49.289
opinions out there. In use, I don't see
patch implemented that often, but it is
8

9
00:00:49.289 --> 00:00:52.710
an option for RESTful interfaces. I'm
going to show you in this video how to
9

10
00:00:52.710 --> 00:00:58.980
set it up using the WebFlux client, the
stack inside of Spring Framework. So,
10

11
00:00:58.980 --> 00:01:03.420
let's go ahead and and do that. Now, I
have the CategoryControllerTest up. We
11

12
00:01:03.420 --> 00:01:07.290
are going to implement a patch method
for the CategoryController. And what I'm
12

13
00:01:07.290 --> 00:01:11.670
going to do is I'm going to take this
update because it was so similar. I'm
13

14
00:01:11.670 --> 00:01:16.590
going to copy that over.
And now, let's go ahead and change this
14

15
00:01:16.590 --> 00:01:19.460
name to patch.
15

16
00:01:19.710 --> 00:01:24.670
And we are going to make this do a patch
against that URL.
16

17
00:01:24.670 --> 00:01:29.080
And so, we have this Category that we are
going to go ahead and do a patch
17

18
00:01:29.080 --> 00:01:34.270
against, and I'm looking at this. This is
fine for the test here. Now, let's go over
18

19
00:01:34.270 --> 00:01:40.720
to the CategoryCcontroller, and actually,
implement this method. So, I'm just going to
19

20
00:01:40.720 --> 00:01:45.050
grab this guy again because they are
very similar.
20

21
00:01:45.050 --> 00:01:50.320
And change this to PatchMapping.
Just going to take that in, and we want
21

22
00:01:50.320 --> 00:01:51.689
to do patch for
22

23
00:01:51.689 --> 00:01:55.380
for the method name. And in this case,
I'm going to pause the video and write a
23

24
00:01:55.380 --> 00:01:58.380
little bit of code here and then come
back to it because it's some typing I
24

25
00:01:58.380 --> 00:02:04.259
need to do and I don't drag you guys
along with that. So, I'm pausing this, and
25

26
00:02:04.259 --> 00:02:08.250
jumped ahead just a touch and revise
some of code here. And let me step
26

27
00:02:08.250 --> 00:02:13.530
through what's going on here. And first
off, I am doing everything inside the
27

28
00:02:13.530 --> 00:02:17.310
controller, and as you've seen me through
do throughout the entire course, I've
28

29
00:02:17.310 --> 00:02:20.459
been using a service layer, when I
started implementing business logic. I'm
29

30
00:02:20.459 --> 00:02:24.540
putting a little bit of business logic
and the controller here. Normally, I would
30

31
00:02:24.540 --> 00:02:28.890
refactor the center service layer to
keep the controllers very clean. But
31

32
00:02:28.890 --> 00:02:32.069
in the this example, just as a learning
example, I'm going to include this into
32

33
00:02:32.069 --> 00:02:37.769
the controller code for now. So, what I'm
doing there on line 48, I'm going out and
33

34
00:02:37.769 --> 00:02:42.870
finding the categoryById, and then, on
line 50, I'm implementing some business
34

35
00:02:42.870 --> 00:02:46.769
logic to say if the description is
different to go ahead and update it. And
35

36
00:02:46.769 --> 00:02:52.260
you can see on line 52, I'm returning
that. Otherwise, I just return back the
36

37
00:02:52.260 --> 00:02:56.849
found category. And obviously, in a patch
operation, this is going to be highly
37

38
00:02:56.849 --> 00:03:02.849
customized and highly changing depending
on your particular use case. So, there's a
38

39
00:03:02.849 --> 00:03:05.459
number of different ways we can
implement this. Depending on the
39

40
00:03:05.459 --> 00:03:09.930
complexity of the object that we have,
obviously, this logic would need to grow
40

41
00:03:09.930 --> 00:03:14.609
to detect the changes. JPA does have a
merge method, as well, that we could
41

42
00:03:14.609 --> 00:03:19.349
utilize to detect changes. It can be a
little flaky from use because
42

43
00:03:19.349 --> 00:03:24.569
sometimes it does not quite behave as
you would expect it to. And I've used it
43

44
00:03:24.569 --> 00:03:28.829
in the past, and often, what's going to
happen, the merge is going to be a little
44

45
00:03:28.829 --> 00:03:32.730
flaky and you'll wind up ultimately in
implementing your own business logic to
45

46
00:03:32.730 --> 00:03:37.709
explicitly detect changes in properties
and bring those properties over. The
46

47
00:03:37.709 --> 00:03:43.410
biggest problem is handling null values
when to go ahead and determine that up
47

48
00:03:43.410 --> 00:03:48.060
to apply a null, if that value wasn't
sent, or if it's actually null. So, that
48

49
00:03:48.060 --> 00:03:52.109
can get a little bit tricky, when you're
implementing that logic. But here, let's
49

50
00:03:52.109 --> 00:03:55.349
go ahead and continue through this
example. So, I've set up the patch. We are
50

51
00:03:55.349 --> 00:04:01.380
doing a PatchMapping against the api/v1/categories URL and we're extracting out
51

52
00:04:01.380 --> 00:04:05.370
the ID. The logic is would go out and get
a foundCategory. The
52

53
00:04:05.370 --> 00:04:09.900
description is different. We are going to go
ahead and update it, and then, return it.
53

54
00:04:09.900 --> 00:04:15.930
Now, on line 55, I'm going to return back
to a Mono of just the foundCategory
54

55
00:04:15.930 --> 00:04:21.239
because in this example, my object didn't
change. I'm just going to return it
55

56
00:04:21.239 --> 00:04:26.520
back. So, perfectly fine business logic
for a patch operation. And like I said, if
56

57
00:04:26.520 --> 00:04:30.930
that object is more complex, obviously,
your business logic here is going to be
57

58
00:04:30.930 --> 00:04:35.810
quite a bit different. Now, let's go ahead
and run the test here.
58

59
00:04:35.810 --> 00:04:40.940
And I expect this is going to go kaboom
because we do need to not implement a
59

60
00:04:40.940 --> 00:04:46.250
couple things. But I do want to show you
what an error in this reactor stack. You
60

61
00:04:46.250 --> 00:04:49.940
can see that I'm getting a 500 error, an
internal server error, which is not what
61

62
00:04:49.940 --> 00:04:55.190
we wanted. If I come up here, we can
see that I'm getting a null pointer error.
62

63
00:04:55.190 --> 00:04:59.690
Let's take a closer look at that. We can
click on that and it dives in. It tells
63

64
00:04:59.690 --> 00:05:06.590
me, on line 48, that I'm getting an NPE.
And why is that? Effectively, what's
64

65
00:05:06.590 --> 00:05:11.750
happening here is I didn't implement the
Mockito Mock for this. So, it's returning
65

66
00:05:11.750 --> 00:05:17.630
back a null, and then, I call a block
method on a null object, and that's
66

67
00:05:17.630 --> 00:05:22.250
why I'm getting that NPE because this guy
right here is causing the NPE, because
67

68
00:05:22.250 --> 00:05:26.750
that method is returning back null, and
then kaboom. So, let's go ahead and
68

69
00:05:26.750 --> 00:05:29.560
implement that.
69

70
00:05:31.400 --> 00:05:34.800
And what I need to do, come up here to my
testPatch.
70

71
00:05:34.800 --> 00:05:40.669
Given.
Now, we want to do findById and we can
71

72
00:05:40.669 --> 00:05:43.930
do anyString.
72

73
00:05:48.980 --> 00:05:53.000
And that should be sufficient for my
method. Since I didn't go ahead and do
73

74
00:05:53.000 --> 00:05:56.580
that.
And we can see that by setting that, that
74

75
00:05:56.580 --> 00:06:01.110
should cause the logic to go through and
also execute that. So, let's go ahead and
75

76
00:06:01.110 --> 00:06:03.440
run that.
76

77
00:06:04.120 --> 00:06:09.430
And we can see that the test does pass
now. And now here, on this test here, I
77

78
00:06:09.430 --> 00:06:14.740
want to make sure that, that save is
actually running, and what I can do is
78

79
00:06:14.740 --> 00:06:23.430
come in here and do a verify a categoryRepository
79

80
00:06:24.830 --> 00:06:30.680
.save and we'll just say any,
and that's going to require that to
80

81
00:06:30.680 --> 00:06:34.360
actually run. So, let's go ahead and run
this now.
81

82
00:06:34.360 --> 00:06:40.210
So, that's going to say that, hey I
actually need to run at least once. So,
82

83
00:06:40.210 --> 00:06:43.539
that's going to verify that, and we can
actually take this it a little bit
83

84
00:06:43.539 --> 00:06:47.550
step further, and we clean this up a
little bit. I can actually get rid of
84

85
00:06:47.550 --> 00:06:53.699
this, and just do a static import of it.
85

86
00:06:54.500 --> 00:07:01.260
So, we can also import him.
86

87
00:07:01.759 --> 00:07:05.419
So, this a little bit cleaner. So now, you
can see that our test code looks a
87

88
00:07:05.419 --> 00:07:09.949
little bit cleaner so we can do a given
willReturn and then a verify down here
88

89
00:07:09.949 --> 00:07:13.069
at the bottom. So, that has to come after
this run, so let's go ahead and run that.
89

90
00:07:13.069 --> 00:07:17.610
Make sure that's still running.
And now, this is happy and you can see
90

91
00:07:17.610 --> 00:07:22.680
that also now IntelliJ went through and
refactor the static imports. So now, our test
91

92
00:07:22.680 --> 00:07:26.819
does look a little bit cleaner.
So, trying to give you some tips with
92

93
00:07:26.819 --> 00:07:29.610
Mockito,
as we move along here. So, just a nice
93

94
00:07:29.610 --> 00:07:34.720
option here, and actually, let's see if we
can actually break this.
94

95
00:07:34.720 --> 00:07:39.730
Cut this out right here. So, pass in a
null, because I remember right, we're
95

96
00:07:39.730 --> 00:07:44.830
sending in a null object, so it should
not matter right now. Expect us to fail,
96

97
00:07:44.830 --> 00:07:49.960
which it did because that interaction
did not happen. Because what happened
97

98
00:07:49.960 --> 00:07:54.940
there, by setting up this test here, now
this failed like that. So actually,
98

99
00:07:54.940 --> 00:08:01.440
let's go ahead and when we actually want
to do is something like this.
99

100
00:08:05.919 --> 00:08:11.540
So that get rid of that, and say with
changes in here
100

101
00:08:11.540 --> 00:08:19.540
I'm going to come in, and this save here, we
want to add in a description.
101

102
00:08:22.960 --> 00:08:26.440
A little quick refactoring there on the
fly. And now, we're setting a new
102

103
00:08:26.440 --> 00:08:30.879
description and we expect this to run
once.
103

104
00:08:30.879 --> 00:08:33.839
Run this.
104

105
00:08:34.779 --> 00:08:41.620
So, we run that. I changed the name of the
test that's why IntelliJ didn't see it.
105

106
00:08:46.280 --> 00:08:50.420
So are save did not invoked.
106

107
00:08:51.740 --> 00:08:55.380
I'm going to pause this. Look at a little
closer.
107

108
00:08:55.380 --> 00:09:01.410
And I see my problem. I updated the
wrong one. So, what we want to do is the
108

109
00:09:01.410 --> 00:09:04.520
one that we're passing in,
109

110
00:09:04.550 --> 00:09:08.450
so that was my mistake there. Easy
enough mistake to make. Now, let's go
110

111
00:09:08.450 --> 00:09:12.710
ahead and run this and this should run as
expected.
111

112
00:09:12.710 --> 00:09:19.010
And that is good. Now here, we are using
the verify save method. So, we are
112

113
00:09:19.010 --> 00:09:23.690
verifying that does get invoked. But over
here, what we want to make sure is that
113

114
00:09:23.690 --> 00:09:29.180
it does not get invoked. So, let's go
ahead and test that. And what I can do is
114

115
00:09:29.180 --> 00:09:34.940
just come in here paste this. And now, in
Mockito, I can pass in the number of
115

116
00:09:34.940 --> 00:09:41.240
interactions I want to verify. I can say
never, and bring that in static method
116

117
00:09:41.240 --> 00:09:45.310
never. And let's go ahead and run this.
117

118
00:09:45.680 --> 00:09:52.029
See that runs okay. Let's go ahead and
run all the tests in this class.
118

119
00:09:53.050 --> 00:09:56.950
Everything runs successfully here. So,
showed you a few more things with
119

120
00:09:56.950 --> 00:10:01.420
Mockito here. So, I'm really enjoying the
behavior-driven development stuff inside
120

121
00:10:01.420 --> 00:10:03.760
of Mockito, so it's actually really
cool.
121

122
00:10:03.760 --> 00:10:06.610
By bringing in the static imports here,
you can see how the tests really are
122

123
00:10:06.610 --> 00:10:13.440
looking a lot cleaner, and I really like
how Mockito has implemented this stuff.
