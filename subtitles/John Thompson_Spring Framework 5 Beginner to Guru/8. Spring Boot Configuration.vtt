WEBVTT
0
1
00:00:04.490 --> 00:00:09.000
Alright, Spring Boot Configuration, so
we've been relying on Spring Boot quite
1

2
00:00:09.000 --> 00:00:13.019
a bit throughout the course and we were
lining on a lot of the magic of
2

3
00:00:13.019 --> 00:00:16.980
Spring Boot and what Spring Boot has
been doing for us under the covers is it's
3

4
00:00:16.980 --> 00:00:20.039
doing a lot of sensible configuration.
It's going out and configuring things
4

5
00:00:20.039 --> 00:00:23.279
like data sources for us so we don't
have to. It automatically brings up a
5

6
00:00:23.279 --> 00:00:27.900
configuration for an h2 in memory
database. So that all that configuration
6

7
00:00:27.900 --> 00:00:30.929
is hidden from us and there's a lot that
it's doing that we have not looked at
7

8
00:00:30.929 --> 00:00:35.760
and I want to get into some of the
configuration options and this is an
8

9
00:00:35.760 --> 00:00:39.059
area that a lot of people struggle with
learning because there's so much
9

10
00:00:39.059 --> 00:00:41.879
happening under the covers that they
don't see as they're going through that.
10

11
00:00:41.879 --> 00:00:45.780
We've been depending on that because it
gives us a lot of capabilities. You saw
11

12
00:00:45.780 --> 00:00:49.770
how fast we were able to bring up and
develop a web application but you've
12

13
00:00:49.770 --> 00:00:52.410
probably been wondering, well there's a
lot of stuff going on when it covers. Yes
13

14
00:00:52.410 --> 00:00:55.949
there is and throughout the course we're
going to start peeling back the layers
14

15
00:00:55.949 --> 00:01:00.030
of Spring Boot but right now we're going
to take a look at Spring Boot
15

16
00:01:00.030 --> 00:01:06.060
configuration and how we can work with
it and in the next video after this, I'm
16

17
00:01:06.060 --> 00:01:11.460
going to show you how to debug and see a configuration report of what's going on.
17

18
00:01:11.460 --> 00:01:15.570
So we'll start peeling back the covers
on Spring Boot. So I know Spring
18

19
00:01:15.570 --> 00:01:19.409
Boot is kind of a black box right now
but as we progress to the course we're
19

20
00:01:19.409 --> 00:01:23.880
going to work with it and see a lot more
of it and later in the course, I'm going
20

21
00:01:23.880 --> 00:01:26.759
to step through and we'll completely
remove the Spring Boot out of the
21

22
00:01:26.759 --> 00:01:30.630
project and we'll go step by step by
step so you can see all the
22

23
00:01:30.630 --> 00:01:34.619
configuration stuff that you have to
manually provide with Spring Boot. So I'm
23

24
00:01:34.619 --> 00:01:37.590
going to switch over to slide deck now
and show you some of the spring boot
24

25
00:01:37.590 --> 00:01:42.740
configuration options. Alright we are
going to take a look at spring boot
25

26
00:01:42.740 --> 00:01:47.100
configuration. Now we've already talked a
little bit about the dependencD
26

27
00:01:47.100 --> 00:01:51.750
Management of Spring Boot. For Spring Boot,
both Maven and Gradle are supportive or
27

28
00:01:51.750 --> 00:01:55.920
curated dependencies and this is
important because it gives you a set of
28

29
00:01:55.920 --> 00:02:00.000
dependencies that's going to work out of
the box with that Spring Boot
29

30
00:02:00.000 --> 00:02:04.590
version that you're on. Now each version
of Spring Boot is configured to work
30

31
00:02:04.590 --> 00:02:10.530
with a specific version of the Spring framework and overriding the Spring 
31

32
00:02:10.530 --> 00:02:13.260
framework version is something that
you can do but
32

33
00:02:13.260 --> 00:02:17.760
the Spring guys do not recommend that. So
you should be using whatever version of
33

34
00:02:17.760 --> 00:02:21.209
spring boot matches that Spring
framework version and I know being in
34

35
00:02:21.209 --> 00:02:24.810
enterprise development sometimes there's
dependencies further down the road
35

36
00:02:24.810 --> 00:02:29.069
that's going to get you in trouble and
have conflicts. So this is kind of an
36

37
00:02:29.069 --> 00:02:33.720
important thing you can do it but it's
not recommended. Then other building
37

38
00:02:33.720 --> 00:02:38.250
systems such as ant can be used but it's
really not recommended because you
38

39
00:02:38.250 --> 00:02:41.849
run into difficulties in getting the
curated set of dependency.
39

40
00:02:41.849 --> 00:02:46.829
Now the Maven support is going to
inherit from a Spring Boot parent pom
40

41
00:02:46.829 --> 00:02:50.659
and that parent pom is going to have all
the dependencies information in it and
41

42
00:02:50.659 --> 00:02:55.709
whenever possible, don't specify
inversions in your pom. Allow the
42

43
00:02:55.709 --> 00:03:00.389
versions to inherit from the parent pom. This is something important then and
43

44
00:03:00.389 --> 00:03:05.420
I've seen experienced Java developers
get in trouble doing this because
44

45
00:03:05.420 --> 00:03:10.260
they're specifying a version and you run
into version conflicts and sometimes
45

46
00:03:10.260 --> 00:03:15.690
these conflicts can be really really
weird to figure out and get around. So
46

47
00:03:15.690 --> 00:03:19.919
whenever possible you want to be using
the version specified inside the parent
47

48
00:03:19.919 --> 00:03:25.349
pom and most of the major and popular
Java libraries are there in the
48

49
00:03:25.349 --> 00:03:30.090
parent pom and this is all a curated set
of dependencies and it's been certified
49

50
00:03:30.090 --> 00:03:34.530
to work with that specific version of
Spring Boot and all the versions of
50

51
00:03:34.530 --> 00:03:39.180
Spring with it. So you can definitely get
into trouble so watch this when you're
51

52
00:03:39.180 --> 00:03:44.549
doing larger projects. Now the Spring Boot
maven plug-in, basically 
52

53
00:03:44.549 --> 00:03:49.680
primary purpose of that is to do the
repackaging of the executable jar. You
53

54
00:03:49.680 --> 00:03:54.180
also get some other commands in there
such as running Spring Boot. You can do
54

55
00:03:54.180 --> 00:03:57.780
maven Spring Boot, call and run and it's going to bring up the
55

56
00:03:57.780 --> 00:04:01.260
Spring Boot application. So a
couple functions of that and we'll be
56

57
00:04:01.260 --> 00:04:05.159
demonstrating those functionalities in the course for sure. Then we have Gradle
57

58
00:04:05.159 --> 00:04:10.829
support. The Gradle support is supported
by Spring Boot Gradle plugin and you're
58

59
00:04:10.829 --> 00:04:15.870
going to need to have a Gradle 3.4 or
later and the Gradle plugin provides
59

60
00:04:15.870 --> 00:04:20.280
the similar functionality that what
maven gets. You get a curated
60

61
00:04:20.280 --> 00:04:25.800
dependencies packaging of the artifact
as a jar or a war and also allows you to
61

62
00:04:25.800 --> 00:04:28.889
run the application command line. I'm thinking now, I'm primarily
62

63
00:04:28.889 --> 00:04:34.590
focusing on Gradle or primarily
focusing on Maven and I think I wanna
63

64
00:04:34.590 --> 00:04:38.310
introduce Gradle at some point in the
project just for fun so you can see the
64

65
00:04:38.310 --> 00:04:42.600
the kind of test we are in. Hopefully I'll do a
product, some type of application
65

66
00:04:42.600 --> 00:04:46.289
further down the line where we can get
to play with Gradle. Now the
66

67
00:04:46.289 --> 00:04:51.810
documentation for Spring Boot does show
an example for ant and Ivy. You can do this
67

68
00:04:51.810 --> 00:04:57.600
and the configuration uses Ivy and in
conjunction with the parent pom or the
68

69
00:04:57.600 --> 00:05:01.770
starters to bring down the curated
dependencies. You can see the complete
69

70
00:05:01.770 --> 00:05:07.080
directions on the official Spring Boot
documentation. I don't know how widely ant and
70

71
00:05:07.080 --> 00:05:11.880
Ivy are used out there. The two big
contenders are maven and
71

72
00:05:11.880 --> 00:05:16.139
Gradle. Not a lot of people are using ant. It's kind of painful unless you have
72

73
00:05:16.139 --> 00:05:20.039
some weird legacy application. I don't
know how many of you guys will actually
73

74
00:05:20.039 --> 00:05:27.539
see Ant and Ivy being used out in the wild. Spring Boot starters. This is a important
74

75
00:05:27.539 --> 00:05:32.460
feature of Spring Boot and they're kind of
like plugins. It is a kind of sort of way to
75

76
00:05:32.460 --> 00:05:35.910
look at them. They're top-level
dependencies and for a lot of the
76

77
00:05:35.910 --> 00:05:39.539
popular Java libraries. There's literally
dozens of them. So if you can think of a
77

78
00:05:39.539 --> 00:05:43.680
popular Java project like ActiveMQ
there's a starter for that, there's one
78

79
00:05:43.680 --> 00:05:49.349
for RabbitMQ. So you need to get these
ready-made dependencies and basically
79

80
00:05:49.349 --> 00:05:53.970
they're a pom that has the dependencies. It's not only for like ActiveMQ but it
80

81
00:05:53.970 --> 00:05:57.479
also bring in all the related Spring
components. So it's kind of like a
81

82
00:05:57.479 --> 00:06:01.320
ready-made dependency and of course
these are going to be curated
82

83
00:06:01.320 --> 00:06:05.639
dependencies too so all the versions are
going to play happily together and they
83

84
00:06:05.639 --> 00:06:11.159
do follow a convention. So they are all
now starting as 'spring-boot-starter'
84

85
00:06:11.159 --> 00:06:15.180
and earlier versions of Spring, that
was not the case but this is something
85

86
00:06:15.180 --> 00:06:19.620
that the team over epital has
standardized on. And to give you an
86

87
00:06:19.620 --> 00:06:24.320
example, I have the spring-boot-starter-data-jpa and that's going to bring in
87

88
00:06:24.320 --> 00:06:29.280
hibernate, Spring data JPA to work
with hibernate and then there's no
88

89
00:06:29.280 --> 00:06:34.169
several Spring dependencies that are going to get
kind of get brought in also. So you get
89

90
00:06:34.169 --> 00:06:38.969
the all the jars that you're going to
need to run that stack of Spring data
90

91
00:06:38.969 --> 00:06:44.880
JPA and hibernate. Next we want to talk
about Spring Boot annotations. And we
91

92
00:06:44.880 --> 00:06:50.279
have been seeing so far the Spring Boot
application and we've been using this
92

93
00:06:50.279 --> 00:06:54.539
throughout the course so far and this is
kind of like a top-level annotation and
93

94
00:06:54.539 --> 00:06:59.279
it's going to include three annotations
below it which gives us a lot of
94

95
00:06:59.279 --> 00:07:03.710
functionality that Spring Boot brings. The first one is @Configuration. So
95

96
00:07:03.710 --> 00:07:08.000
that class that we've been working with
is an actual Spring configuration class.
96

97
00:07:08.000 --> 00:07:12.300
So that gets declared and you can
declare Spring Beans right in that class
97

98
00:07:12.300 --> 00:07:16.800
like what we saw in the Java
configuration. Next is EnableAutoConfiguration
98

99
00:07:16.800 --> 00:07:20.219
and it kind of does what it
implies. It enables the auto
99

100
00:07:20.219 --> 00:07:25.409
configuration and Spring Boot is going
to make a lot of decisions based on
100

101
00:07:25.409 --> 00:07:29.010
what's on the class path, what it finds
and then it's going to automatically
101

102
00:07:29.010 --> 00:07:32.580
wire up components if you have not
defined them. So it makes a lot of
102

103
00:07:32.580 --> 00:07:37.830
guesses on sensible defaults and then
finally is component scan. We didn't see
103

104
00:07:37.830 --> 00:07:41.909
that, we saw an example of that in
our configurations when we want to
104

105
00:07:41.909 --> 00:07:46.889
switch packages but the Spring Boot
application annotation brings in the
105

106
00:07:46.889 --> 00:07:50.219
ComponentScan and that is what
gives us that functionality that we've
106

107
00:07:50.219 --> 00:07:54.779
been relying on so far that's going to
go in and scan for components and all
107

108
00:07:54.779 --> 00:07:59.849
the child packages from that route
package. Now of course we can go in and
108

109
00:07:59.849 --> 00:08:03.779
disable things. Right now we have not
taken a look at all the dependencies
109

110
00:08:03.779 --> 00:08:08.729
that are getting wired in with Spring Boot. But we can see those, we can go in
110

111
00:08:08.729 --> 00:08:12.930
and disable those and I'm going to show
you how to get a list of what's going on
111

112
00:08:12.930 --> 00:08:17.130
with Spring Boot to bring in those to
show a configuration report because
112

113
00:08:17.130 --> 00:08:20.820
there's actually a lot of them and as
you get in more and more projects, I mean
113

114
00:08:20.820 --> 00:08:26.250
you start seeing dozens, if not
hundreds of configuration classes are
114

115
00:08:26.250 --> 00:08:30.180
getting brought in to wire up your
project for you. And it saves you a ton
115

116
00:08:30.180 --> 00:08:34.669
of work because you're not doing it and now
you can exclude them. Where you have the
116

117
00:08:34.669 --> 00:08:39.510
EnableAutoConfiguration, you can do an
exclude and then name a class for that
117

118
00:08:39.510 --> 00:08:44.240
configuration then that configuration
will not get brought in.
