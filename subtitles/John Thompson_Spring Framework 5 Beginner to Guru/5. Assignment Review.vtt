WEBVTT
0
1
00:00:04.940 --> 00:00:08.580
Alright! Let's go ahead and complete the
assignment. So, I'm gonna come in over
1

2
00:00:08.580 --> 00:00:15.809
here, create a new domain class.
Call that Vendor, just like the previous
2

3
00:00:15.809 --> 00:00:23.970
REST that we were working with. Now, we
wanna add in @Data for Project Lombok,
3

4
00:00:23.970 --> 00:00:29.759
@Document for Spring Data MongoDB to pick
this up,
4

5
00:00:30.450 --> 00:00:36.660
and if I remember right, I think Spring
Data Mongo will automatically take any
5

6
00:00:36.660 --> 00:00:42.620
property named id. But, it's good habit to
use @Id value here to explicitly say that.
6

7
00:00:42.620 --> 00:00:49.579
And let's do a private
firstName. Let's try to spell first
7

8
00:00:49.579 --> 00:00:51.940
right.
8

9
00:00:53.789 --> 00:00:58.949
So, that is our entity. This will work
for our purposes. Now, let's come over
9

10
00:00:58.949 --> 00:01:04.879
here and create the VendorRepository.
10

11
00:01:09.470 --> 00:01:13.360
Definitely want that to be an interface
11

12
00:01:16.759 --> 00:01:21.170
and extending the ReactiveMongoRepository, and we are going to use
12

13
00:01:21.170 --> 00:01:29.060
Vendor for the type. And String is our id
value. So, that's all we need to do to set
13

14
00:01:29.060 --> 00:01:34.869
up our Reactive Repository. Now, we we
also had an assignment to go ahead, and
14

15
00:01:34.869 --> 00:01:41.299
part of this was to populate it. So, let's
go in, and I like to use a package called
15

16
00:01:41.299 --> 00:01:46.369
bootstrap. This is still for my
Grails days. So, Grails are called
16

17
00:01:46.369 --> 00:01:48.939
Bootstrapping.
17

18
00:01:49.950 --> 00:01:55.369
That comes up kind of loosely from the
computers booting up.
18

19
00:01:56.290 --> 00:02:00.940
That comes from an old American slang of
pull yourself up by your Bootstraps. I
19

20
00:02:00.940 --> 00:02:04.290
don't know if everybody knew that or not.
20

21
00:02:08.319 --> 00:02:10.590
Mark that as @Component.
21

22
00:02:10.940 --> 00:02:15.270
I'm gonna do, have it implement the 
CommandLineRunner.
22

23
00:02:15.270 --> 00:02:20.599
And again, this is a Spring Boot class
that is gonna get run on startup,
23

24
00:02:20.599 --> 00:02:27.560
and we are gonna implement
that. Now, what we wanna do here, also, is
24

25
00:02:27.560 --> 00:02:32.140
get our repositories injected.
25

26
00:02:34.690 --> 00:02:37.530
So, we're gonna do that.
26

27
00:02:40.790 --> 00:02:46.310
Now, hitting command-N for constructor, and
this will allow Spring Boot to
27

28
00:02:46.310 --> 00:02:51.370
automatically wire that up.
I've fat-fingered repository. It's gonna
28

29
00:02:51.370 --> 00:02:56.850
fit.
Fix that. I'm gonna come in here. Refactor.
29

30
00:02:56.850 --> 00:03:00.180
Rename that
30

31
00:03:05.170 --> 00:03:11.349
and Spring Boot thinks that it cannot
autowire that, but it should be able to.
31

32
00:03:19.960 --> 00:03:23.790
Just fixing that little typo there.
32

33
00:03:24.550 --> 00:03:26.940
Now, we are happy.
33

34
00:03:27.530 --> 00:03:30.250
And I'm gonna say if.
34

35
00:03:35.030 --> 00:03:39.570
So, just to recap, what I'm doing here
with the Reactive Type, so I'm doing
35

36
00:03:39.570 --> 00:03:44.520
category count, and then, I'm doing a
block on it, which tells it to
36

37
00:03:44.520 --> 00:03:48.900
subscribe and invoke it. So, I've done
that. That we'll get a count other
37

38
00:03:48.900 --> 00:03:56.720
repository. So, I'm saying if a count is
equal to zero, we're gonna load data.
38

39
00:04:02.150 --> 00:04:07.069
Just putting in a message there that
I'll see in the log
39

40
00:04:09.010 --> 00:04:16.440
and I am gonna show you a little
trick here. Come in here and do.
40

41
00:04:21.360 --> 00:04:25.540
So, I'm gonna add in the Builder pattern.
Let's make it a little bit easier for us
41

42
00:04:25.540 --> 00:04:31.900
to work with this. I'm gonna add that
into that guy too. So, I don't think I've
42

43
00:04:31.900 --> 00:04:35.500
done the Builder pattern in the course
so far. That gives us a through Project
43

44
00:04:35.500 --> 00:04:38.500
Lombok. We're gonna get a Builder, and
that action is gonna make what we're
44

45
00:04:38.500 --> 00:04:43.460
doing here a little bit cleaner inside
the bootstrap
45

46
00:04:43.460 --> 00:04:48.890
because what I wanna do is make this a
little more fluent. And without it, I'd
46

47
00:04:48.890 --> 00:04:56.840
have to create a new object. So, let's
come in here to CategoryRepository save.
47

48
00:04:56.840 --> 00:05:00.820
Now, let's do Category.
48

49
00:05:04.610 --> 00:05:09.669
So, you can see how that's a little bit
cleaner. I'm just gonna copy this.
49

50
00:05:19.110 --> 00:05:23.300
So, you can see how that's a little bit
nicer.
50

51
00:05:23.320 --> 00:05:25.980
And let's do a System.out.
51

52
00:05:34.540 --> 00:05:40.890
So, that'll pick that up, and let's do the
same thing for Vendor.
52

53
00:05:42.990 --> 00:05:47.040
Actually, I'm gonna do it all inside of one block.
Depends that, there's a couple different
53

54
00:05:47.040 --> 00:05:51.150
philosophies there. Depending on how
you're setting things up here, what I
54

55
00:05:51.150 --> 00:05:55.860
wanna do is I'm just looking for an
empty database. So, I'm gonna assume if
55

56
00:05:55.860 --> 00:05:59.760
categories are blank, vendors will also
be blank. Depending on your environment,
56

57
00:05:59.760 --> 00:06:04.110
that may or may not be a good thing to
do. But here, I'm gonna make that little
57

58
00:06:04.110 --> 00:06:07.680
leap of faith and say that one is
blank, the other is gonna be blank as
58

59
00:06:07.680 --> 00:06:09.890
well.
59

60
00:06:18.540 --> 00:06:22.020
And again, this builder pattern, you
can see how that's a little nicer than
60

61
00:06:22.020 --> 00:06:26.750
having to go out and create an object,
and then, set the properties and save it.
61

62
00:06:26.750 --> 00:06:31.640
Much much nicer to work with.
62

63
00:06:35.800 --> 00:06:40.050
Do some of the characters that we've
done in the past.
63

64
00:06:45.090 --> 00:06:50.280
See, if anybody knows who Bill Nershi
is.
64

65
00:06:50.759 --> 00:06:54.960
Let's do Jimmy Buffett.
65

66
00:06:56.570 --> 00:07:00.040
And we also help with this.
66

67
00:07:08.720 --> 00:07:12.440
And remember to do the block on the
Reactive Types, when you want that value.
67

68
00:07:12.440 --> 00:07:17.330
Without doing that block, nothing were to
happen. I'm not sure what would happen
68

69
00:07:17.330 --> 00:07:20.480
if we pass it to a toString. I'm not
gonna find out right now. But, we
69

70
00:07:20.480 --> 00:07:24.940
definitely wanna be doing a block on
that. Now,
70

71
00:07:26.030 --> 00:07:31.010
you can see that I have Docker running.
MongoDB also have a Postgres instance
71

72
00:07:31.010 --> 00:07:35.090
running out there that I've been doing
some other development with. But here, we
72

73
00:07:35.090 --> 00:07:40.930
are running the latest image of Docker,
and the important part is I have mapped
73

74
00:07:40.930 --> 00:07:45.680
27017 into the container. So, that's
the main thing that you wanna be doing
74

75
00:07:45.680 --> 00:07:50.150
there. Again, it's optional on how you
run Docker. You need on your local
75

76
00:07:50.150 --> 00:07:56.210
system, Docker running on 27017. So,
Spring can find it when it starts up. So,
76

77
00:07:56.210 --> 00:07:59.230
let's go ahead and start this.
77

78
00:08:00.189 --> 00:08:04.199
Nope. What are we not happy about.
78

79
00:08:06.270 --> 00:08:13.650
I know. So, stop this. Come over here. This
is a new project, and I need to come into
79

80
00:08:13.650 --> 00:08:21.530
the Build Compiler.
I really wish this would default on
80

81
00:08:21.530 --> 00:08:28.370
with IntelliJ. So, we need to enable the
annotation processing. Say, OK. Now, that
81

82
00:08:28.370 --> 00:08:33.919
should go okay.
So, the annotation processors work out
82

83
00:08:33.919 --> 00:08:39.390
great. Hold on one second.
And this should be an
83

84
00:08:39.390 --> 00:08:42.080
@AllArgsConstructor.
84

85
00:08:42.450 --> 00:08:46.110
That was my mistake there. So, when you're using
the Builder pattern and specifying
85

86
00:08:46.110 --> 00:08:51.180
constructors, you can get into a little
problem. The Builder, by default, will not
86

87
00:08:51.180 --> 00:08:55.380
create a no args constructor. It's kind
of like a little work around
87

88
00:08:55.380 --> 00:09:01.410
here. And so, we want to have it build up
some arguments. So, we give it all args,
88

89
00:09:01.410 --> 00:09:04.650
which is used by the Builder, and then, a
no args constructor, and then, Lombok is
89

90
00:09:04.650 --> 00:09:10.370
happy. So, we need to do this to both of
them. So I picked out the wrong Lombok
90

91
00:09:10.370 --> 00:09:15.140
annotation. So, this should be happy now.
91

92
00:09:22.900 --> 00:09:26.710
Accidentally, when I was in there, I
think, I accidentally nuke the public
92

93
00:09:26.710 --> 00:09:35.520
access, or another small mistake. Should
be happy now. Alright!
93

94
00:09:35.610 --> 00:09:40.200
Now, we can see here's the System.out and
we did not get anything loaded.
94

95
00:09:40.200 --> 00:09:42.950
Interesting.
95

96
00:09:45.480 --> 00:09:50.870
And that is because we are working with
Reactive Types.
96

97
00:09:51.500 --> 00:09:58.360
And that is going to return back a Mono. So, what
we need to do here is
97

98
00:09:58.360 --> 00:10:01.320
block.
98

99
00:10:01.900 --> 00:10:04.230
That was my mistake.
99

100
00:10:09.000 --> 00:10:13.390
Now, let's try this again.
Because we're calling that save, it's a
100

101
00:10:13.390 --> 00:10:18.340
Mono, but we never invoked the Mono
action. So, nothing ever happened. So,
101

102
00:10:18.340 --> 00:10:22.270
nobody asked for it to doing anything so
it didn't do anything. So now, we can see
102

103
00:10:22.270 --> 00:10:26.470
that we did get five categories
loaded and five vendors loaded, which is
103

104
00:10:26.470 --> 00:10:31.390
exactly what we want. Now, if I restart
this, I expect will you will see zero
104

105
00:10:31.390 --> 00:10:33.870
loaded.
105

106
00:10:37.220 --> 00:10:42.350
And we should not have fallen in there.
So, I'm gonna pause this video and take a
106

107
00:10:42.350 --> 00:10:47.770
quick look at this. So it is getting a
little long.
107

108
00:10:49.190 --> 00:10:55.100
Okay, turned out to be nothing kind of
unique to my environment. I had a weird
108

109
00:10:55.100 --> 00:11:01.160
thing going on, because what happened was,
I was running an experiment and I
109

110
00:11:01.160 --> 00:11:06.199
removed the test compile on the embedded
Mongo, and then, it comes up all the time.
110

111
00:11:06.199 --> 00:11:13.430
But if you leave tests compiled on it, it
does not. But, when I undid it, intellij
111

112
00:11:13.430 --> 00:11:18.319
hiccuped and left it on the classpath so
it was coming up, and what happened is
112

113
00:11:18.319 --> 00:11:23.060
when I ran it twice there, it was using
the embedded MongoDB driver. So, it's
113

114
00:11:23.060 --> 00:11:30.310
coming up to a fresh Mongo instance. So,
let's come over here to Robo 3T and
114

115
00:11:30.310 --> 00:11:34.209
maybe refresh this guy.
115

116
00:11:36.090 --> 00:11:40.830
So now, we can see the two collections
over in Robo 3T. Initially, when I looked,
116

117
00:11:40.830 --> 00:11:45.000
they weren't there. So now, this is
persisted. This is actually going against
117

118
00:11:45.000 --> 00:11:49.890
it. So again, the reason that I
didn't see anything like that, because I
118

119
00:11:49.890 --> 00:11:54.660
had a little hiccup. And if you change
this dependency here, actually, I might
119

120
00:11:54.660 --> 00:11:59.610
demonstrate that real quick. Admit this
videos getting long. I'm not gonna do
120

121
00:11:59.610 --> 00:12:04.440
that right now. But, just to recap, this
test compile dependency for the embedded
121

122
00:12:04.440 --> 00:12:08.340
Mongo, if that is on your class path,
Spring Boot will auto-configure an
122

123
00:12:08.340 --> 00:12:13.320
embedded Mongo instance. If it is not on
your class path, its gonna look for a
123

124
00:12:13.320 --> 00:12:19.920
local Mongo instance, and what happened
there, it is IntelliJ hiccuped and it was
124

125
00:12:19.920 --> 00:12:24.120
including that on the class path. So, I
was going to omit a database rather than
125

126
00:12:24.120 --> 00:12:30.120
any permanent one or semi permanent  
one running in Docker on my image. So,
126

127
00:12:30.120 --> 00:12:35.600
we covered a lot of ground here. Hope you
found this valuable.
