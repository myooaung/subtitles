WEBVTT
0
1
00:00:04.040 --> 00:00:09.690
In this video, we are going to go ahead
and create the Visit entity. So here you
1

2
00:00:09.690 --> 00:00:13.889
have the POJO there. Let's take a
quick look at this. I'm going assign it to
2

3
00:00:13.889 --> 00:00:17.970
myself, just how to have it there to
indicate that I am working on it and
3

4
00:00:17.970 --> 00:00:22.529
taking a responsibility to link this
task to others even though nobody else
4

5
00:00:22.529 --> 00:00:27.000
is working on this. Just a good work habit.
What I want to do is take a look at the
5

6
00:00:27.000 --> 00:00:31.560
visit entity. This is in Spring Pet
Clinic, the actual reference
6

7
00:00:31.560 --> 00:00:37.350
implementation that we are working with.
You can see here on line 46, they
7

8
00:00:37.350 --> 00:00:43.410
implement a pet_id as an integer. I'm
using it Long for my ids but they did
8

9
00:00:43.410 --> 00:00:48.300
an integer. They're just entering the
ID property. Not really the ideal for
9

10
00:00:48.300 --> 00:00:52.890
what I think. In my opinion, I think
that should be the actual object there.
10

11
00:00:52.890 --> 00:00:56.579
It makes things a little more natural to
be working with because we are using
11

12
00:00:56.579 --> 00:01:00.719
an ORM. I'm not quite sure why they did
this. Maybe we'll find out down the road.
12

13
00:01:00.719 --> 00:01:05.309
But for right now, what I'm going to do
is I'm going to implement this as the
13

14
00:01:05.309 --> 00:01:10.140
entity Pet. If we come over here and
bounce into IntelliJ, you can see that I
14

15
00:01:10.140 --> 00:01:14.760
already set this up as a Pet so we have
the Visit POJO set up. What we want
15

16
00:01:14.760 --> 00:01:20.369
to do is let's go ahead and annotate it.
It's designating this is an entity in
16

17
00:01:20.369 --> 00:01:26.549
JPA.
We'll name the table as well.
17

18
00:01:27.610 --> 00:01:30.450
Call that visits. Call the @Column.
18

19
00:01:31.729 --> 00:01:35.350
Give that column name a date
19

20
00:01:37.980 --> 00:01:42.950
as well as a description.
20

21
00:01:43.249 --> 00:01:47.149
I've got the description and now what we
need to do is set up that mapping
21

22
00:01:47.149 --> 00:01:54.560
between the Visit and Pet so we come
over to Pet. You can see we don't
22

23
00:01:54.560 --> 00:01:58.880
even have a property right now for this
so what we can do is I'm going to come
23

24
00:01:58.880 --> 00:02:05.500
in here under birthDate. We'll just
add in private.
24

25
00:02:08.340 --> 00:02:13.290
We're going to add a new property of
visits. Come down here. We'll add in the
25

26
00:02:13.290 --> 00:02:16.010
getter and setters.
26

27
00:02:16.340 --> 00:02:22.730
Remember, a good habit to get into. We'll
initialize that to new HashSet so that
27

28
00:02:22.730 --> 00:02:27.020
will never be null so if when we do a
get on it we do have an empty HashSet
28

29
00:02:27.020 --> 00:02:30.200
that we'll be working with.
Just good to have done that before and
29

30
00:02:30.200 --> 00:02:35.739
other ones. Now what we want to do is set
up the mapping and let's do a
30

31
00:02:35.739 --> 00:02:38.739
one-to-many.
31

32
00:02:39.020 --> 00:02:48.040
We'll just do a cascade type of all
and we'll say mappedBy.
32

33
00:02:48.200 --> 00:02:53.780
In this type, we want to say pet so
we will go ahead and do the pet property.
33

34
00:02:53.780 --> 00:03:02.060
That pet property references back to
the Visit here. So on the pet,
34

35
00:03:02.060 --> 00:03:07.090
what we want to do set up the inverse of
this relationship,
35

36
00:03:08.040 --> 00:03:11.040
many-to-one.
36

37
00:03:11.650 --> 00:03:19.200
You say the JoinColumn. This case is
going to be name. In this case will be...
37

38
00:03:19.200 --> 00:03:23.030
That sets up
the mapping of the inverse. So now, come
38

39
00:03:23.030 --> 00:03:28.100
back over to Chrome. Rather than doing
the ID just ID value, which would be a
39

40
00:03:28.100 --> 00:03:31.130
reference,
we're actually treating this like a full
40

41
00:03:31.130 --> 00:03:35.660
class entity and we're setting up the
relationship so this is a delta definite
41

42
00:03:35.660 --> 00:03:39.350
change from the way the Spring guys have
lamented to Spring Pet Clinic but I
42

43
00:03:39.350 --> 00:03:44.060
think that's going to give us a nicer
implementation to work with. So again,
43

44
00:03:44.060 --> 00:03:49.820
just to reiterate what we are doing. We
created an entity. Called it visits, so
44

45
00:03:49.820 --> 00:03:53.990
the visits is the table name and the
database is going to be visits. Specify a
45

46
00:03:53.990 --> 00:04:00.260
column name of date, description, and then
we set up. We are not using just the ID
46

47
00:04:00.260 --> 00:04:04.250
value. We are actually treating this as a
full-blown object and along JPA to
47

48
00:04:04.250 --> 00:04:10.250
manage it. We set up a many to one
relationship, saying that a visit it's
48

49
00:04:10.250 --> 00:04:14.180
going to have a single pet that's
going to come back over here. Of
49

50
00:04:14.180 --> 00:04:19.760
course a pet can go visit the vet
multiple times, so each visit will become
50

51
00:04:19.760 --> 00:04:25.700
an individual attribute of a pet. Now
we are saying that we want a one-to-many
51

52
00:04:25.700 --> 00:04:31.490
relationship there and line 29. Cascade
type of all means that if we delete a
52

53
00:04:31.490 --> 00:04:36.110
pet, the associated visit records for
that pet will also get deleted by JPA.
53

54
00:04:36.110 --> 00:04:40.400
We're saying that on the other side,
it's going to be mapped by the pet
54

55
00:04:40.400 --> 00:04:45.620
property. We did add in the new property
there on line 30. A set of visits and we
55

56
00:04:45.620 --> 00:04:51.020
are initializing that to a HashSet.
Down on 64, you can see where I added in
56

57
00:04:51.020 --> 00:04:54.530
the getters and setters. So I'm going to
call this one good. Come back over
57

58
00:04:54.530 --> 00:05:02.210
here. This was issue number 38. I
think it's going to complete out our JPA
58

59
00:05:02.210 --> 00:05:04.780
mapping.
59

60
00:05:07.310 --> 00:05:09.370
That was
60

61
00:05:09.389 --> 00:05:14.040
number 38.
I'll go ahead and commit and push
61

62
00:05:14.040 --> 00:05:17.810
this which will close it up in GitHub.
