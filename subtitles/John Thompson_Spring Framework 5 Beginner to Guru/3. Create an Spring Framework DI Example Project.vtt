WEBVTT
0
1
00:00:04.549 --> 00:00:08.940
Alright now in this module I'm gonna
create a new project for us
1

2
00:00:08.940 --> 00:00:12.480
to play around with dependency injector
by just using base spring so we're not
2

3
00:00:12.480 --> 00:00:15.660
going to bring in a lot of stuff like
last time we're just going to bring in
3

4
00:00:15.660 --> 00:00:19.740
the real core of the Spring Framework
and we'll show you how to do that and this
4

5
00:00:19.740 --> 00:00:23.100
time we're going to do is a little bit
of twist on you I'm going to do it all
5

6
00:00:23.100 --> 00:00:26.939
through IntelliJ I'm going to be using
some features of IntelliJ Ultimate here
6

7
00:00:26.939 --> 00:00:31.769
and it's important to note that if
you're using a Community Edition, the
7

8
00:00:31.769 --> 00:00:36.480
option to create a Spring Project using
Spring Initializr is not available in
8

9
00:00:36.480 --> 00:00:41.579
the Community Edition. It is a feature of
IntelliJ Ultimate. Now with that said, you
9

10
00:00:41.579 --> 00:00:45.570
can always go out to the website again
and pull down a zip file like we did
10

11
00:00:45.570 --> 00:00:49.230
previously in this course where we got a
zip file, then we mounted it inside of
11

12
00:00:49.230 --> 00:00:54.090
IntelliJ or if you want to be using
Eclipse you can do that also but this is
12

13
00:00:54.090 --> 00:01:01.199
an ultimate feature and don't worry if
you're not on Ultimate, I am going to check
13

14
00:01:01.199 --> 00:01:07.140
this in. So you can either follow along by
downloading it from the site or I will
14

15
00:01:07.140 --> 00:01:11.070
have the code checked into the github
just as it came out of the Spring
15

16
00:01:11.070 --> 00:01:16.170
Initializr. Okay I am back in IntelliJ and
what I'm going to do to create the new
16

17
00:01:16.170 --> 00:01:21.840
project using these Spring Initializr
right from inside the IDE is, I'm going
17

18
00:01:21.840 --> 00:01:27.390
to come up here to File then come over
to New and say a New Project and there
18

19
00:01:27.390 --> 00:01:30.930
are several options here and it already
knows that I want Spring Initializer
19

20
00:01:30.930 --> 00:01:36.329
because I've been creating Spring Boot
Applications from that before and we are
20

21
00:01:36.329 --> 00:01:41.880
going to use the SDK of Java 1.8 and
actually I think I got a newer version
21

22
00:01:41.880 --> 00:01:48.500
of Java so we'll take it up to the 121
release and we are going to use the
22

23
00:01:48.500 --> 00:01:53.040
initializr service and this is start.spring.io and this is the exact
23

24
00:01:53.040 --> 00:01:58.290
same website that we used previously to
create the web application so IntelliJ
24

25
00:01:58.290 --> 00:02:02.820
is going to be using that behind the
scenes to get it for us and we do have
25

26
00:02:02.820 --> 00:02:07.590
an option for a custom as far as I know
there's no other implementations of that
26

27
00:02:07.590 --> 00:02:13.140
so at the time of recording to my
knowledge your only option is to use
27

28
00:02:13.140 --> 00:02:17.850
start.spring.io for your
initializr and we are going to go to
28

29
00:02:17.850 --> 00:02:29.459
next and I'm going to change the group
to my domain. I'm going to call this
29

30
00:02:29.459 --> 00:02:37.020
di-demo or dependency injection demo and
we can see that I'm going to leave it
30

31
00:02:37.020 --> 00:02:42.569
as a Maven Project use a Jar Java 1.8
language of Java we are
31

32
00:02:42.569 --> 00:02:46.860
getting options on there for Kotlin and
Groovy but for now we'll definitely be
32

33
00:02:46.860 --> 00:02:50.430
staying with Java we don't need to show
too much at you. I'm going to give it a
33

34
00:02:50.430 --> 00:03:00.030
realistic description here and I'm going
to accept that package of guru.springframework,
34

35
00:03:00.030 --> 00:03:06.750
say Next and this is where we
saw all that stuff before that we could
35

36
00:03:06.750 --> 00:03:12.030
select from the website and there's
a lot of stuff in here that we are not
36

37
00:03:12.030 --> 00:03:18.510
going to take so we just want Spring
Core so that's all we need and I am
37

38
00:03:18.510 --> 00:03:26.430
going to come over here and take the
milestone 1 release of Spring Boot so
38

39
00:03:26.430 --> 00:03:32.220
and that is Spring Boot 2 which
includes Spring 5 and all the stuff.
39

40
00:03:32.220 --> 00:03:35.660
We are going to be working with
absolutely pure Spring unlike before
40

41
00:03:35.660 --> 00:03:40.709
where we were bringing in Thymeleaf and
the web components. It's going to be just
41

42
00:03:40.709 --> 00:03:44.160
straight-up Spring. We are looking at
probably one of the most core features
42

43
00:03:44.160 --> 00:03:47.610
of the Spring Framework which is all
around the Dependency Injection and
43

44
00:03:47.610 --> 00:03:52.560
Inversion Of Control so that's all we
need for this project and now I'm going
44

45
00:03:52.560 --> 00:03:57.750
to say Next and now it's asked me for a
location you can see I'm keeping it in
45

46
00:03:57.750 --> 00:04:09.930
spring5 and everything looks correct
to me so I am going to say Finish.Iit's
46

47
00:04:09.930 --> 00:04:13.530
going to take
a few moments for IntelliJ to go out to
47

48
00:04:13.530 --> 00:04:17.549
the Spring site and bring down the
project and you can see down at the
48

49
00:04:17.549 --> 00:04:23.940
bottom IntelliJ is currently indexing
the project so intelliJ does bring up or develop its
49

50
00:04:23.940 --> 00:04:28.110
own index and if you ever see anything
weird inside of IntelliJ, I'll give you a
50

51
00:04:28.110 --> 00:04:34.050
quick tip while this is loading, you come
up to File and say Invalidate Caches / Restart.
51

52
00:04:34.050 --> 00:04:38.370
Every now and then IntelliJ will
get lost and you need to do that but I
52

53
00:04:38.370 --> 00:04:44.580
mean like once a month is as far as
every now and then so we can see that
53

54
00:04:44.580 --> 00:04:49.110
IntelliJ has a project down and it is
finishing up the indexing process let's
54

55
00:04:49.110 --> 00:04:53.820
go ahead and take a look at what's been
created for us so now let's take a look
55

56
00:04:53.820 --> 00:04:58.140
at this pom. You can see there's all the
stuff that I've placed inside in the
56

57
00:04:58.140 --> 00:05:05.610
dialog box and this is just like if I
used it from the website and now what we
57

58
00:05:05.610 --> 00:05:10.200
can see is the dependencies are a lot
lot less so we really only have two
58

59
00:05:10.200 --> 00:05:15.150
right here we have the spring-boot-starter and the spring-boot-starter-test.
59

60
00:05:15.150 --> 00:05:18.210
I'm going to come over here to Maven
Projects and show you what's behind
60

61
00:05:18.210 --> 00:05:23.730
those so we are using the curated
dependencies if I look at the spring-boot-starter
61

62
00:05:23.730 --> 00:05:28.950
you can see there's spring
down spring boot and we're going to
62

63
00:05:28.950 --> 00:05:35.160
spring-context release candidate
one so we're getting some of the auto
63

64
00:05:35.160 --> 00:05:40.229
configure, we're getting the logging, logback, slf4j. If you're doing logging,
64

65
00:05:40.229 --> 00:05:46.430
please use slf4j and not a hard
logging implementation. We're getting a
65

66
00:05:46.430 --> 00:05:52.770
spring-core in jcl and the YAML,
the sneaky yml is a Spring Boot
66

67
00:05:52.770 --> 00:05:57.479
dependency not Spring specifically but
it is a dependency for spring boot and
67

68
00:05:57.479 --> 00:06:01.800
then we also are getting in the starter-test which will give us nifty stuff like
68

69
00:06:01.800 --> 00:06:05.880
junit and mockito and we will definitely
be looking at those later in the course.
69

70
00:06:05.880 --> 00:06:11.160
Okay can see how easy it was to use
IntelliJ to go out and grab that project
70

71
00:06:11.160 --> 00:06:14.940
to get a project created even though our
projects a lot lighter and we only had
71

72
00:06:14.940 --> 00:06:19.289
two jars come in you can see how
the curated dependencies are working in
72

73
00:06:19.289 --> 00:06:23.310
the maven dependency tree inside of
IntelliJ so we got a lot of fun stuff
73

74
00:06:23.310 --> 00:06:25.639
that we're going to cover
around dependency injection in this
74

75
00:06:25.639 --> 00:06:29.960
module and this project we're going
to be using that just to be working with
75

76
00:06:29.960 --> 00:06:34.250
pure Spring and dependency injection how
Spring seeds dependency injection so
76

77
00:06:34.250 --> 00:06:37.879
we will be continued along with that
in the course like I said if you weren't
77

78
00:06:37.879 --> 00:06:41.750
able to follow along using IntelliJ
ultimate don't worry I'm going to have
78

79
00:06:41.750 --> 00:06:46.069
this checked into GitHub for you to
download and bring down to your system
79

80
00:06:46.069 --> 00:06:52.430
or alternatively you can use the website
start.spring.io and go down
80

81
00:06:52.430 --> 00:06:56.680
and bring down a minimal Spring project
for our use.
