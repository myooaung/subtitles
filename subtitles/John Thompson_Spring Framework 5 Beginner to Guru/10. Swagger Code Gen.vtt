WEBVTT
0
1
00:00:04.790 --> 00:00:10.380
Okay, I'm back in the Swagger Editor and
what I wanna show you, in this video, is
1

2
00:00:10.380 --> 00:00:15.330
some of the abilities that we can use to
generate code right from this. So, if we
2

3
00:00:15.330 --> 00:00:20.580
come up here to generate server, we can
see the number of different programming
3

4
00:00:20.580 --> 00:00:25.619
languages here, and everything from ASP,
which I don't know why anybody writes in
4

5
00:00:25.619 --> 00:00:31.320
ASP. But anything from that to Erlang, which
is kind of interesting stuff. Nodejs,
5

6
00:00:31.320 --> 00:00:37.649
Python, PHP, Spring is an option. So you
can see all these different options of
6

7
00:00:37.649 --> 00:00:42.930
code that we can download. And I was
using this just seems like a couple
7

8
00:00:42.930 --> 00:00:46.260
weeks ago, and I looked at the Spring
code that I generated, and right now,
8

9
00:00:46.260 --> 00:00:51.030
click on that and nothing is
happening. But we can't generate clients
9

10
00:00:51.030 --> 00:00:54.660
so you can see a number of client codes.
So, these are gonna be stubs that we can
10

11
00:00:54.660 --> 00:00:59.520
use. So, if we wanted to do something in
Python, let's say, we could download that
11

12
00:00:59.520 --> 00:01:04.860
and we can see that brings down a zip
file of a pre-configured Python library.
12

13
00:01:04.860 --> 00:01:08.520
And I'm not a Python developer, so I'm
not even gonna go through that. But
13

14
00:01:08.520 --> 00:01:13.200
unfortunately, the Spring option is not
working, but I do wanna demonstrate
14

15
00:01:13.200 --> 00:01:20.610
this to you. And if you go back to switch
to previous editor, this is a previous
15

16
00:01:20.610 --> 00:01:24.270
version of the editor, you can see some
things have definitely changed. I'm not
16

17
00:01:24.270 --> 00:01:30.060
using pet-store. Now we're using a Uber
API, which kind of it could be, kind of,
17

18
00:01:30.060 --> 00:01:34.860
fun to go through and see what's going
on there. But here, we can come in and
18

19
00:01:34.860 --> 00:01:41.400
generate a Spring server side component
and download that, and you can see that I
19

20
00:01:41.400 --> 00:01:46.799
already did that a little bit ago. And
I'm gonna go into that project. And let's
20

21
00:01:46.799 --> 00:01:51.390
do a code review of the code that's been
generated by Swagger. I'm sorry that
21

22
00:01:51.390 --> 00:01:56.189
this is on an older version of Swagger.
The newer version was working, but it's
22

23
00:01:56.189 --> 00:02:00.299
pretty pretty darn similar but I want to
come through and take a look at that. So,
23

24
00:02:00.299 --> 00:02:06.200
I've got the Maven POM open right now.
And you can see that it's on Java 1.7
24

25
00:02:06.200 --> 00:02:11.090
and the 1.4 release of Spring
Boot. So, I think
25

26
00:02:11.090 --> 00:02:13.245
at the time of writing, we're on 1.5.9
26

27
00:02:13.245 --> 00:02:14.720
if I remember right, as the
27

28
00:02:14.720 --> 00:02:20.540
mainstream released for the Spring 1.4
series. You can see it's pretty simple
28

29
00:02:20.540 --> 00:02:25.819
POM. Bring us down spring-boot-starter-web,
Tomcat, and here's a friend, springfox,
29

30
00:02:25.819 --> 00:02:31.250
for the Swagger documentation. So pretty
pretty lean. But let's take a look at the
30

31
00:02:31.250 --> 00:02:38.390
configuration. Just have a pretty simple
home mapping. Then, it sets up the API
31

32
00:02:38.390 --> 00:02:42.110
documentation, that's for the Spring Fox
stuff to generate our Swagger
32

33
00:02:42.110 --> 00:02:47.720
documentation here. But let's take a
little bit closer look at the API. So
33

34
00:02:47.720 --> 00:02:53.000
here's our EstimatesApi, and what they're
doing here, you can see that it's setting
34

35
00:02:53.000 --> 00:02:59.599
up the API documentation using 
Spring Fox. So, we get a lot of mapping
35

36
00:02:59.599 --> 00:03:05.209
there. And then, they are creating a
interface, and this is a coding style
36

37
00:03:05.209 --> 00:03:09.410
that I don't particularly like. And this
comes from experience with Spring.
37

38
00:03:09.410 --> 00:03:14.450
Generally, it is very good practice to
code to an interface. Here, they are
38

39
00:03:14.450 --> 00:03:18.470
creating an interface for a controller.
It's pretty unusual in Spring
39

40
00:03:18.470 --> 00:03:21.889
development that I would ever inject
that controller into something. So,
40

41
00:03:21.889 --> 00:03:25.040
providing an interface here doesn't make
a lot of sense. But if you've been
41

42
00:03:25.040 --> 00:03:30.319
following along in this course, you know
that I often do code to interfaces. But
42

43
00:03:30.319 --> 00:03:33.829
it's usually in a case where I have a
component that I'm gonna be injecting
43

44
00:03:33.829 --> 00:03:38.299
in. So if I have a controller that
depends on a service, that is gonna have
44

45
00:03:38.299 --> 00:03:43.639
business logic in it. Yes, I create an
interface for that service so I can run
45

46
00:03:43.639 --> 00:03:47.480
my tests easily against things like
Mocks and have different versions of
46

47
00:03:47.480 --> 00:03:51.200
that services, if I need it.
So you can see that this is fairly well
47

48
00:03:51.200 --> 00:03:58.340
decorated with annotations for both
Spring and the Swagger Documentation
48

49
00:03:58.340 --> 00:04:03.590
through Spring Fox. Let's take a quick
look at this. You can see it's generated code
49

50
00:04:03.590 --> 00:04:08.630
and it gives us a stub of the controller,
so this would get picked up by Spring.
50

51
00:04:08.630 --> 00:04:13.340
Get wired up as a controller, this would
probably run. I'm not going to go through
51

52
00:04:13.340 --> 00:04:17.840
all that, but you can see that this just
gives us a stub. There's nothing there.
52

53
00:04:17.840 --> 00:04:23.110
There's no logic there.
So, like our HistoryApiController, its
53

54
00:04:23.110 --> 00:04:28.900
just gonna return back okay. So, there's
no data that's gonna be provided by that.
54

55
00:04:28.900 --> 00:04:34.180
This gives us a like a jumping-off point,
where we could take this and start
55

56
00:04:34.180 --> 00:04:38.260
developing and put like develop the
whole back-end, develop a service layer,
56

57
00:04:38.260 --> 00:04:43.000
the repositories, the entities, that were
gonna persist into the database. We'd be
57

58
00:04:43.000 --> 00:04:49.060
responsible for that. But, we have a very
nicely generated set of code API
58

59
00:04:49.060 --> 00:04:54.280
documentation. So if we develop this API,
we can give it to one team, like if we
59

60
00:04:54.280 --> 00:04:59.410
had a UI team, like okay, code to this, and
we are gonna go code to this on the
60

61
00:04:59.410 --> 00:05:03.699
backend, and you can divide and conquer
up the work pretty quickly. One last
61

62
00:05:03.699 --> 00:05:07.230
thing, I might take a look at is the
model.
62

63
00:05:07.230 --> 00:05:12.210
So, you can see here that it actually is
going through and setting up the Jackson
63

64
00:05:12.210 --> 00:05:19.290
stuff. So overall, I mean, this is a
real. For generated code ,this is a fairly
64

65
00:05:19.290 --> 00:05:24.360
nice. So, they did a nice job with
the code generation on this. So,
65

66
00:05:24.360 --> 00:05:29.930
I could see using this to really jumpstart
a project, if I was comfortable with
66

67
00:05:29.930 --> 00:05:38.010
documenting in the Swagger UI. So, just
as a recap, this is a documentation that
67

68
00:05:38.010 --> 00:05:42.060
it created. So this gives us a fairly
robust API specification. A lot of
68

69
00:05:42.060 --> 00:05:47.280
information about what's going on in
this RESTful type API, and it was just a
69

70
00:05:47.280 --> 00:05:53.400
click of the button to go ahead and
download that Spring Application. So from
70

71
00:05:53.400 --> 00:05:57.690
that, we generated a lot of code, but now,
we have a pretty clear contract that
71

72
00:05:57.690 --> 00:06:02.040
multiple developers could use. So,
Swagger is a really powerful project, and
72

73
00:06:02.040 --> 00:06:07.290
you can see that what they are trying to
do here, as far as being language
73

74
00:06:07.290 --> 00:06:11.640
agnostic, it looks like they're really
accomplishing it. So, kudos to the Swagger
74

75
00:06:11.640 --> 00:06:17.670
team, you will see this used a lot. I am
now employed again for a pretty exciting
75

76
00:06:17.670 --> 00:06:22.260
startup, and personally, I am working with
a major financial institution. They just
76

77
00:06:22.260 --> 00:06:28.500
stood up some new RESTful APIs, and I
think, fortune 10 type company, and maybe
77

78
00:06:28.500 --> 00:06:34.260
fortune 20. But their team are able to
provide us Swagger documentation and
78

79
00:06:34.260 --> 00:06:40.290
some very clear contract for us to use.
So, definitely a great tool here to be
79

80
00:06:40.290 --> 00:06:42.590
using.
