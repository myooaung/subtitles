WEBVTT
0
1
00:00:04.279 --> 00:00:10.500
Alright! In this video, we are going to go
through and add in a new method to
1

2
00:00:10.500 --> 00:00:15.120
update a Vendor, and we're going to follow
test-driven development. And the first
2

3
00:00:15.120 --> 00:00:18.660
thing we're going to do is write our unit
tests, and you can see, if I've set up my
3

4
00:00:18.660 --> 00:00:22.769
screens again. I'm following along with
the Category example, that we've coded
4

5
00:00:22.769 --> 00:00:27.390
earlier as my example for using Vendor.
So, I'm going to go through that right now.
5

6
00:00:27.390 --> 00:00:33.000
And I can see on line 71 of my
category tests, I made a typo there
6

7
00:00:33.000 --> 00:00:38.370
so I'm going to correct that. So, remember
that it's not necessarily required by
7

8
00:00:38.370 --> 00:00:42.030
Java but it is by convention to start
your method names with a lowercase
8

9
00:00:42.030 --> 00:00:46.950
character. So, I am correcting that there
and I will commit that with this update.
9

10
00:00:46.950 --> 00:00:51.600
Now, what we want to do is go ahead and
create a new test method here in our
10

11
00:00:51.600 --> 00:00:57.420
VendorControllerTest. So, create a new
test method. Again, for that, I am using
11

12
00:00:57.420 --> 00:01:01.559
command N on the OS X keyboard. I
believe that key mapping for Windows,
12

13
00:01:01.559 --> 00:01:05.369
this will may be different. I'm not on
percent sure on that. But I know there
13

14
00:01:05.369 --> 00:01:10.409
are differences for the IntelliJ
keyboard mappings for Windows. I
14

15
00:01:10.409 --> 00:01:15.140
don't use my Windows, so I don't have them
memorized either. So, let's do a test
15

16
00:01:15.140 --> 00:01:19.510
updateVendor.
The first thing that we want to do is
16

17
00:01:19.510 --> 00:01:24.210
set up our repository actions. So, in
17

18
00:01:24.260 --> 00:01:29.690
our vendorRepository, when we say do a
save. This time, we're going to be using
18

19
00:01:29.690 --> 00:01:40.030
save and not saveAll. We're just
going to say any Vendor coming in there,
19

20
00:01:42.159 --> 00:01:45.840
and we will return back Mono
20

21
00:01:46.170 --> 00:01:48.409
just
21

22
00:01:48.890 --> 00:01:55.010
and I'm just going to return back a new
Vendor object. So, nothing too creative
22

23
00:01:55.010 --> 00:01:58.250
there. An empty object, I think, is going
to be fine for our test. We don't have to
23

24
00:01:58.250 --> 00:02:02.330
do anything with it.
And let's do a Mono. Remember, we're doing
24

25
00:02:02.330 --> 00:02:09.530
reactive types here, so do a Mono Vendor
and we will call that vendorMonoTo
25

26
00:02:09.530 --> 00:02:13.530
Update.
So, a tip when you're doing your variable
26

27
00:02:13.530 --> 00:02:17.340
names, you do want to try to add a little
bit description, because remember, when
27

28
00:02:17.340 --> 00:02:21.300
you're coding, more time is spent
reading code than it is writing code.
28

29
00:02:21.300 --> 00:02:26.670
So, if you're in a big shop, people are
going to be coming behind you and reading
29

30
00:02:26.670 --> 00:02:32.400
your code. So, having descriptive names
like that for your variables is very
30

31
00:02:32.400 --> 00:02:36.390
helpful for people reading your code
because it expresses your intent on what
31

32
00:02:36.390 --> 00:02:40.620
that variable is suppose for it's
function in life, so to speak. Let's do a
32

33
00:02:40.620 --> 00:02:45.390
vendor builder, and we will just build
that. We're not going to be testing any
33

34
00:02:45.390 --> 00:02:50.220
properties there, so just having an empty
object should be fine for us. And you can
34

35
00:02:50.220 --> 00:02:55.350
see in the above examples, I actually did
test some things or add some properties
35

36
00:02:55.350 --> 00:02:59.070
in there, but I don't think, we actually
need them. If I was doing assertions
36

37
00:02:59.070 --> 00:03:02.970
against the properties, definitely would
want to do that. So here, we are going to
37

38
00:03:02.970 --> 00:03:09.150
do the put method. So remember, a put is
to do an update, so we're going to put, do
38

39
00:03:09.150 --> 00:03:15.239
a put action against the API to update
something. And in this case, we are going
39

40
00:03:15.239 --> 00:03:22.790
to do the same API, that we did for the
get. Again, that's going to be api/v1/
40

41
00:03:22.790 --> 00:03:28.290
vendors, and then, we're going to parse out
the ID value there.
41

42
00:03:28.290 --> 00:03:32.450
And let's go ahead and do a
42

43
00:03:32.590 --> 00:03:37.019
body and we'll set the vendor to save.
43

44
00:03:39.709 --> 00:03:46.760
And we're doing exchange, and I expect
status. We want to get back in okay.
44

45
00:03:46.760 --> 00:03:53.750
In this case, which is an okay HTTP. Okay
is a 200, so we are expecting that. So,
45

46
00:03:53.750 --> 00:03:58.090
we'll go ahead and run this, and we will
get an error.
46

47
00:03:58.940 --> 00:04:03.410
You can see that we are getting a 405
error because we have not meant
47

48
00:04:03.410 --> 00:04:07.640
saying method not allow because a Spring
WebFlux doesn't know what to do with it,
48

49
00:04:07.640 --> 00:04:11.180
because we haven't implemented that on
the controller yet. So, let's go ahead and
49

50
00:04:11.180 --> 00:04:15.350
implement that, and we'll bring up the
controller so we are going to implement
50

51
00:04:15.350 --> 00:04:21.260
a version of this on line 39 there. We'll
implement that for our Vendor. So, let's
51

52
00:04:21.260 --> 00:04:26.030
go ahead and write that code right now.
It's going to return back a Mono.
52

53
00:04:26.030 --> 00:04:29.720
This time, Vendor.
53

54
00:04:31.280 --> 00:04:38.230
We're going to take in String ID and a
Vendor object.
54

55
00:04:38.230 --> 00:04:42.730
And the actions that we want to do is we
want to update the vendor after that
55

56
00:04:42.730 --> 00:04:50.400
comes in with the ID value. So, remember,
we're specifying the ID and the URL,
56

57
00:04:50.400 --> 00:04:55.040
and we will return back the saved object.
57

58
00:04:55.380 --> 00:04:59.820
So pretty simple method. So, we're just
calling that vendorRepository. Now, let's
58

59
00:04:59.820 --> 00:05:06.360
go ahead and we are going to decorate
this with the Spring Annotation so
59

60
00:05:06.360 --> 00:05:11.979
WebFlux will know what to do with this.
So, the first thing that we want to do is
60

61
00:05:11.979 --> 00:05:18.580
I'm going to steal this right here
because we are doing the same URL for
61

62
00:05:18.580 --> 00:05:21.929
the put action. So that
62

63
00:05:22.810 --> 00:05:27.160
sets up the URI mapping. And in this case,
the ResponseStatus is going to default
63

64
00:05:27.160 --> 00:05:32.220
to 200 so we don't need the ResponseStatus annotation. But we do need to say,
64

65
00:05:32.220 --> 00:05:37.870
tell the Spring Framework that we want
to take in the PathVariable.
65

66
00:05:37.870 --> 00:05:43.090
Again, what's happening here, if we had
multiple variables, Spring is using
66

67
00:05:43.090 --> 00:05:47.320
reflection so it gets the method the
parameter name and it's going to look to
67

68
00:05:47.320 --> 00:05:51.280
match on those, just as a reminder of how
that's working. So, if we had multiple
68

69
00:05:51.280 --> 00:05:55.300
path variables, we could do so through
the naming convention that we're using
69

70
00:05:55.300 --> 00:06:00.919
there. And then, now, we want tell Spring
to look at the RequestBody
70

71
00:06:00.919 --> 00:06:06.499
and parse out the Vendor. So, what's going
to happen there is a Spring, under the
71

72
00:06:06.499 --> 00:06:11.210
covers, when we post a adjacent object
with the vendor data in it, it's
72

73
00:06:11.210 --> 00:06:15.349
going to parse it and create a Vendor
object and pass it into our method for
73

74
00:06:15.349 --> 00:06:18.979
that. So, under the covers, that's what
Spring Framework is doing for us. So now,
74

75
00:06:18.979 --> 00:06:23.060
we got that implementation. Just
double-check things. I think everything
75

76
00:06:23.060 --> 00:06:29.180
is looking good. Let's go ahead and
run this. So, our test was failing, and now,
76

77
00:06:29.180 --> 00:06:33.960
it should be passing
And now, we have a successful test. Let's
77

78
00:06:33.960 --> 00:06:37.639
go ahead and run all our vendor tests.
78

79
00:06:40.380 --> 00:06:44.310
I say that all our VendorControllerTest our passing and happy. So, let's go
79

80
00:06:44.310 --> 00:06:49.680
ahead and do a quick review of what we
created here. So, look at the test first
80

81
00:06:49.680 --> 00:06:52.800
because we are following test-driven
development. So, we wrote the test first.
81

82
00:06:52.800 --> 00:06:58.530
On line 73, we're setting up Mockito to
return back that Mono with a Vendor
82

83
00:06:58.530 --> 00:07:05.490
object in it. And then, on line 76, we are
creating the vendor Mono of the object
83

84
00:07:05.490 --> 00:07:11.340
that we want to pass in to update. 
Then on line 78, that's where our test is
84

85
00:07:11.340 --> 00:07:16.050
actually executing. So, we are taking the
the WebTestClient. We are saying to do
85

86
00:07:16.050 --> 00:07:23.190
a put against the URI of api/v1/vendors.
Then, we're passing in an ID value,
86

87
00:07:23.190 --> 00:07:27.690
which we're not really testing the
mapping of, but we are expecting the
87

88
00:07:27.690 --> 00:07:31.890
action to pass in the Vendor Mono, so
that's the object that we're going to
88

89
00:07:31.890 --> 00:07:35.700
update. We're saying that, it's a Vendor
class, and then, we're going to do the
89

90
00:07:35.700 --> 00:07:39.780
exchange, and underneath it covers, what's
happening here because we are using the
90

91
00:07:39.780 --> 00:07:43.980
test framework in the WebTestClient,
that is going to get converted to JSON. It
91

92
00:07:43.980 --> 00:07:47.220
is going to get posted against the
controller and the Spring Framework is
92

93
00:07:47.220 --> 00:07:53.520
going to be used to unmarshal that JSON
and run the update action. We are
93

94
00:07:53.520 --> 00:07:57.480
expecting everything to work through and
get back an expected status of okay. Now,
94

95
00:07:57.480 --> 00:08:03.420
the VendorController action, we
decorated this. So, we are saying that we
95

96
00:08:03.420 --> 00:08:07.200
are expecting the Spring Framework to
pass in the ID value, which it's going to
96

97
00:08:07.200 --> 00:08:12.240
parse from the URL, and then also, the
RequestBody, which is going to be the
97

98
00:08:12.240 --> 00:08:17.220
JSON payload that the test is posting to
it, that's going to get parsed back to a
98

99
00:08:17.220 --> 00:08:21.450
Vendor object. So, I'll get marshalled into
a vendor object, or unmarshalled, I should
99

100
00:08:21.450 --> 00:08:29.070
say. And then, on line 42, we're going to
take the ID from the URL appended or set
100

101
00:08:29.070 --> 00:08:34.320
the parsed object an ID value of that
and we'll call our vendorRepository to
101

102
00:08:34.320 --> 00:08:38.610
save it. And so that this will work
through that, and then, the save function
102

103
00:08:38.610 --> 00:08:45.810
from Spring Data MonoDB is going to
return back the saved object. And we are
103

104
00:08:45.810 --> 00:08:51.000
returning that back in the body of the
response on line 40. Well in the method
104

105
00:08:51.000 --> 00:08:54.320
signature there
41.
