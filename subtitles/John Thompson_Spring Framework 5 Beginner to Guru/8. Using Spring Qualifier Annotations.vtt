WEBVTT
0
1
00:00:04.730 --> 00:00:08.970
Now Spring does have number of tools for
us to use to control how dependency
1

2
00:00:08.970 --> 00:00:13.469
injection happens and so far we've been
dealing with a single instance of the
2

3
00:00:13.469 --> 00:00:17.490
beans that are available. What if you
have more than one implementation of an
3

4
00:00:17.490 --> 00:00:21.600
interface? Well one of the tools that we
can go into our toolbox is the Qualifier
4

5
00:00:21.600 --> 00:00:25.439
annotation this is a way to give the
Spring framework a hint as to which
5

6
00:00:25.439 --> 00:00:29.490
bean you want and we're going to go by
the bean name in this example to tell
6

7
00:00:29.490 --> 00:00:34.800
the Spring which one we want and I'm
going to add in multiple implementations
7

8
00:00:34.800 --> 00:00:38.430
of our Greeting bean. I'm going to show
you how we can use the Qualifier
8

9
00:00:38.430 --> 00:00:44.280
annotation to help determine which bean
to wire in. Okay one of the neat things
9

10
00:00:44.280 --> 00:00:49.800
about dependency injection is it gives
you the option to inject different
10

11
00:00:49.800 --> 00:00:53.820
instances and we have a lot of options
inside the Spring framework to control
11

12
00:00:53.820 --> 00:00:58.920
how that happens and what I've done is
I've added in two new Greeting services
12

13
00:00:58.920 --> 00:01:03.300
so we have a getter based greeting
service so just called it GetterGreetingService
13

14
00:01:03.300 --> 00:01:08.909
and it implements GreetingService and I also added in a ConstructorGreetingService
14

15
00:01:08.909 --> 00:01:14.520
and he also implements
the GreetingService. Now I've both marked
15

16
00:01:14.520 --> 00:01:20.880
as Services so both get brought into the
Spring context is Spring beans and when
16

17
00:01:20.880 --> 00:01:26.520
I run this, let me show you what happens
here, when I run this you're going to see
17

18
00:01:26.520 --> 00:01:32.430
a problem here pop-up saying that the
and that APPLICATION FAILED TO START.
18

19
00:01:32.430 --> 00:01:36.930
And the Parameter 0 of the constructor in, our
ConstructorInjectedController required
19

20
00:01:36.930 --> 00:01:41.640
a single bean but 3 were found so
now we're seeing 3 of them and you
20

21
00:01:41.640 --> 00:01:48.030
can see down here it's suggesting us for
us to use the Qualifier so we can do
21

22
00:01:48.030 --> 00:01:52.020
either Primary or a Qualifier but in this
video I'm going to show you Qualifier
22

23
00:01:52.020 --> 00:01:59.149
and let's see how to use that and we'll
jump over to the constructor based and
23

24
00:01:59.149 --> 00:02:04.649
what we need to do is we actually we can
get rid of the Autowired so I'm going to
24

25
00:02:04.649 --> 00:02:11.819
delete that and get rid of these two unused imports just to keep things tidy
25

26
00:02:11.819 --> 00:02:21.180
and right in line here what I'm going to
use is the Qualifier annotation. Now this
26

27
00:02:21.180 --> 00:02:40.500
annotation is going to take in a string
and fix that typo there and this is
27

28
00:02:40.500 --> 00:02:46.950
going to take in a string and the string
is the bean name so by default when we
28

29
00:02:46.950 --> 00:02:50.969
create a ConstructorGreetingService
it's going to get a string
29

30
00:02:50.969 --> 00:02:57.060
name of constructorgreetingservice
with a lowercase so that allows us to
30

31
00:02:57.060 --> 00:03:02.699
specify the class name using the
Qualifier annotation. If I run this now
31

32
00:03:02.699 --> 00:03:07.680
it's still going to fail on the getter
injected in controller you can see that
32

33
00:03:07.680 --> 00:03:11.760
he doesn't know which one to use so we
need to tell him the same thing and now
33

34
00:03:11.760 --> 00:03:24.359
this one's a little bit different as we
can use it at the method level and we
34

35
00:03:24.359 --> 00:03:29.159
can run it that way and now it should
know what both of them are and we can
35

36
00:03:29.159 --> 00:03:35.040
see the message is there and I'm
actually not sure don't see this is my
36

37
00:03:35.040 --> 00:03:40.739
own personal experiment here. Let's see
if we can use that at either on the
37

38
00:03:40.739 --> 00:03:44.629
setter see if this works.
38

39
00:03:45.439 --> 00:03:51.180
Okay so the Qualifier on setters can be
used at either the method level or
39

40
00:03:51.180 --> 00:03:56.129
inside the method with the properties
going into the method so do have the
40

41
00:03:56.129 --> 00:04:01.919
option there so it's important option
now we can see that we have HelloGurus!!!!
41

42
00:04:01.919 --> 00:04:08.639
from the original one and also
from the the setter and constructor so
42

43
00:04:08.639 --> 00:04:13.199
we can see that each one is getting
wired up properly and what's important
43

44
00:04:13.199 --> 00:04:20.219
to note is the PropertyInjectedController. Now if I we are calling
44

45
00:04:20.219 --> 00:04:23.970
it by type,
we are doing a hard type there so
45

46
00:04:23.970 --> 00:04:28.080
Spring knows to do the dependency
injection by type so if I come over here
46

47
00:04:28.080 --> 00:04:40.550
and change that to just GreetingService, now if we run this that will fail because
47

48
00:04:40.550 --> 00:04:47.250
we had a GreetingService and we have
a GreetingServiceImpl in there so if
48

49
00:04:47.250 --> 00:04:54.470
I go back to the Impl. Now Spring once
again is going to know which one to use.
49

50
00:04:54.470 --> 00:04:59.430
Now one other thing that we can do is
what if we were to rename this let me
50

51
00:04:59.430 --> 00:05:04.710
show you a trick here I'm going to go
back to GreetingService but this time
51

52
00:05:04.710 --> 00:05:09.330
I'm going to change the property name to
match the bean name and we're going to
52

53
00:05:09.330 --> 00:05:21.960
have to refactor this and we also need
to do the test. So now I have a GreetingService
53

54
00:05:21.960 --> 00:05:27.750
and the type is the interface
but the name of the property is the bean
54

55
00:05:27.750 --> 00:05:31.830
name so when I run this what's going to
happen it Spring is going to do some
55

56
00:05:31.830 --> 00:05:36.539
reflection and see that the property
name matches the bean name and it's
56

57
00:05:36.539 --> 00:05:41.610
going to find it that way as well so a
little work of a shortcut of not using the
57

58
00:05:41.610 --> 00:05:46.710
Qualifier. Now you can see how easy the
Qualifier annotation is used, it's very
58

59
00:05:46.710 --> 00:05:50.910
versatile as to getting the right bean
into the right spot and dependency
59

60
00:05:50.910 --> 00:05:55.860
injection you also saw it towards the end
there I use the property name and
60

61
00:05:55.860 --> 00:06:00.300
allowed Spring to go in and do
reflection and it used property name to
61

62
00:06:00.300 --> 00:06:03.930
determine the proper bean name. Now I
want to caution you from experience.
62

63
00:06:03.930 --> 00:06:08.610
Sometimes you can get in trouble with
that and you wind up causing unintended
63

64
00:06:08.610 --> 00:06:12.930
side effects. I've had some issues with
it in the past and it's probably better
64

65
00:06:12.930 --> 00:06:18.450
to use the Qualifier, that way you're
expressing your intent more as to what
65

66
00:06:18.450 --> 00:06:21.930
you want so always remember there's
somebody going to be behind you reading
66

67
00:06:21.930 --> 00:06:25.680
your code and you want to be expressing
what you want to do so you might find
67

68
00:06:25.680 --> 00:06:29.250
oh yeah here's a shortcut to do it this way
and then somebody else is going to come
68

69
00:06:29.250 --> 00:06:33.469
along and break things so it's not
always apparent when you're doing
69

70
00:06:33.469 --> 00:06:37.689
depending on the property names for your
70

71
00:06:37.689 --> 00:06:41.680
dependency injection and it's something
that can definitely shoot you in the
71

72
00:06:41.680 --> 00:06:45.029
foot later down the road too.
