WEBVTT
0
1
00:00:04.009 --> 00:00:08.940
In this video, we are gonna configure
a message converter with JMS messages.
1

2
00:00:08.940 --> 00:00:12.570
And, this is a kind of like an
abstraction that Spring gives us. And,
2

3
00:00:12.570 --> 00:00:16.980
what we wanna do is that I previously
mentioned about having some flexibility
3

4
00:00:16.980 --> 00:00:21.240
in our messaging. So, we wanna be
setting up a text message but we want
4

5
00:00:21.240 --> 00:00:25.619
that JMS text message to have a JSON
payload of the object that we're working
5

6
00:00:25.619 --> 00:00:30.269
with. So, to do that we need to set up
this message converter. So, I'm gonna
6

7
00:00:30.269 --> 00:00:34.920
come in here and create a new class
under config.
7

8
00:00:34.920 --> 00:00:40.340
And, we'll just call this JmsConfig
since it is gonna be specific to
8

9
00:00:40.340 --> 00:00:46.410
working with JMS or just JmsConfig like
so. We'll be adding this. And, this of
9

10
00:00:46.410 --> 00:00:53.040
course is going to be a @Configuration.
Now, what we wanna do is come in here
10

11
00:00:53.040 --> 00:00:56.270
and we will say public.
11

12
00:00:56.730 --> 00:01:01.260
We want a message converter and in this
case, we want the type to be we want
12

13
00:01:01.260 --> 00:01:05.580
to be using this JMS support. And, I think
to be honest probably we can get away
13

14
00:01:05.580 --> 00:01:10.710
with using either one. But since we're in
a JMS specific environment in this case,
14

15
00:01:10.710 --> 00:01:15.660
I'm gonna go ahead and demonstrate using
the JMS message converter. So, that is
15

16
00:01:15.660 --> 00:01:19.800
what we wanna be working with here. So,
I'm gonna go ahead and say that and
16

17
00:01:19.800 --> 00:01:28.860
we will use MessageConverter like so.
And here, we wanna say mapping
17

18
00:01:28.860 --> 00:01:33.450
and we want this Jackson to messaging
converter. Again, you can see that is
18

19
00:01:33.450 --> 00:01:38.430
coming out and that is the JMS support
converter. So, that package is important.
19

20
00:01:38.430 --> 00:01:45.060
So, we will go ahead and implement this
and we'll call that a converter equals
20

21
00:01:45.060 --> 00:01:50.160
new MappingJackson2MessageConverter. And, this
is going to be utilizing the Jackson
21

22
00:01:50.160 --> 00:01:54.720
JSON library underneath. And of course,
we'll wanna return that, return that
22

23
00:01:54.720 --> 00:01:59.789
converter like so.
A couple of  things that we wanna set here
23

24
00:01:59.789 --> 00:02:06.810
converter.setTargetType.
And here, we wanna say MessageType
24

25
00:02:06.810 --> 00:02:12.400
not BYTES but we wanna say TEXT
like so.
25

26
00:02:14.760 --> 00:02:22.959
Now, we wanna set the type property name. And here, we are gonna do, I'm just go type. So, what's
26

27
00:02:22.959 --> 00:02:27.640
gonna be happening. Remember, we talked
about the JMS properties. So, we are gonna
27

28
00:02:27.640 --> 00:02:33.550
be setting a property name of the
Type so Spring can decode this. So, this
28

29
00:02:33.550 --> 00:02:38.800
all gonna be working within Spring.
And once we get the setup, Spring is
29

30
00:02:38.800 --> 00:02:42.030
gonna make our lives a lot easier
because it will use it both for
30

31
00:02:42.030 --> 00:02:47.200
serialization of the message when we put
it on the queue. But Spring is gonna
31

32
00:02:47.200 --> 00:02:51.910
be smart enough to use it as we
pull it off the queue as well. But as far
32

33
00:02:51.910 --> 00:02:54.790
as I know at this point in time, Spring
Boot does not provide an auto
33

34
00:02:54.790 --> 00:02:59.920
configuration of this. But I do wanna
point out if we come in here. And, take a
34

35
00:02:59.920 --> 00:03:07.540
look at this option here, I always
when you're setting up configurations
35

36
00:03:07.540 --> 00:03:12.700
like this, I'll always go ahead and take
a look at the class there. There is Java
36

37
00:03:12.700 --> 00:03:17.110
doc on this. You can see what's going on
with this class. The main things that we
37

38
00:03:17.110 --> 00:03:20.950
set up here, you can see that this is
gonna get an object mapper. So
38

39
00:03:20.950 --> 00:03:25.600
Spring is gonna be providing that for
us. Here is the target type. Very
39

40
00:03:25.600 --> 00:03:30.640
important here that is saying that it
can be bytes or text. So, we are using the
40

41
00:03:30.640 --> 00:03:34.299
text, text implementation of it.
Optionally, you could use the bytes
41

42
00:03:34.299 --> 00:03:38.980
implementation. And, remember we talked
about those JMS messages. We are using a
42

43
00:03:38.980 --> 00:03:42.640
JMS text message under the cover. But
we're kind of abstracting that by
43

44
00:03:42.640 --> 00:03:46.930
setting up this technique where we are
sending a text message. But we are gonna
44

45
00:03:46.930 --> 00:03:51.670
be sending that JMS payload as a text
message. And optionally, we could do this
45

46
00:03:51.670 --> 00:03:55.510
as a bytes message to arguably maybe a
little bit more efficient doing it as a
46

47
00:03:55.510 --> 00:04:01.630
bytes message. Could argue that point out.
I will stipulate that. And then finally
47

48
00:04:01.630 --> 00:04:07.299
here on line 146 is another important
note its specifying the JMS message
48

49
00:04:07.299 --> 00:04:12.310
property that carries the type of that
property. So, this is also important for
49

50
00:04:12.310 --> 00:04:18.519
us to extract that from that. So, that is
gonna help Spring deserialize that. So,
50

51
00:04:18.519 --> 00:04:24.610
just to recap, what we did here. We
created a new class called JmsConfig,
51

52
00:04:24.610 --> 00:04:29.470
annotated it on line 12 there with
@Configuration. And then, on line 15
52

53
00:04:29.470 --> 00:04:33.400
you can see it the @Bean annotation saying that
I am going to have a bean called
53

54
00:04:33.400 --> 00:04:37.300
MessageConverter in the Spring Context.
And, that it's going to be a 
54

55
00:04:37.300 --> 00:04:40.900
MappingJackson2MessageConverter
specifically for working with the
55

56
00:04:40.900 --> 00:04:45.790
Jackson JSON library. And, what Spring is
gonna be doing underneath the covers
56

57
00:04:45.790 --> 00:04:52.210
when we send a message to JMS, Spring
is gonna convert that message that we
57

58
00:04:52.210 --> 00:04:59.050
send to a JMS text message and the
payload is gonna be taking that Java
58

59
00:04:59.050 --> 00:05:03.700
object and converting that over to
a JSON payload. So, that that's what
59

60
00:05:03.700 --> 00:05:09.400
this configuration is doing. It's
enabling our Spring instance to take JMS
60

61
00:05:09.400 --> 00:05:15.340
messages and flip those two adjacent
message. And then, it can read that JMS
61

62
00:05:15.340 --> 00:05:21.669
message as a JMS text message and
convert it back to a Java object. So, in
62

63
00:05:21.669 --> 00:05:25.000
the up committing us, we'll be taking a
look at sending messages and then also
63

64
00:05:25.000 --> 00:05:29.260
receiving messages. But, this little piece
of configuration here makes our lives a
64

65
00:05:29.260 --> 00:05:35.050
lot easier and a lot simpler. Because a
lot of the conversion between a JMS
65

66
00:05:35.050 --> 00:05:42.100
message and from a Java POJO into
serialized JSON into a JMS message. This
66

67
00:05:42.100 --> 00:05:48.210
is all abstracting that for us and makes
our lives as developers much much easier.
