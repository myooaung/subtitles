WEBVTT
0
1
00:00:09.530 --> 00:00:13.950
Okay, so we're gonna get into an
introduction of Docker. We're going to assume
1

2
00:00:13.950 --> 00:00:18.240
that you really don't know what Docker
is. But I think it's a really exciting
2

3
00:00:18.240 --> 00:00:23.609
technology because it is truly a game
changer in your development as a Java
3

4
00:00:23.609 --> 00:00:28.320
developer. It opens up a lot of
capabilities that you can do, because it
4

5
00:00:28.320 --> 00:00:34.140
makes things so easy. So if you have MySQL database, you can spool it up just
5

6
00:00:34.140 --> 00:00:40.550
like that in a Docker Container. It's all
self-contained. So in doing
6

7
00:00:40.550 --> 00:00:48.629
Java development and Spring Development,
if you need MySQL, MongoDB, message broker
7

8
00:00:48.629 --> 00:00:52.649
like RabbitMQ, it's easy to bring up a
Docker Container with one of those
8

9
00:00:52.649 --> 00:00:56.969
already pre-loaded. We can do what we
need to do as software developers
9

10
00:00:56.969 --> 00:01:05.040
without a contaminating environment. Now
Docker is not equal to VM. So, now the
10

11
00:01:05.040 --> 00:01:08.400
question might be coming back to your
mind. So, what is Docker? So, let me get into that.
11

12
00:01:08.400 --> 00:01:12.540
I've got a nice little PowerPoint
presentation here, that I'm gonna show
12

13
00:01:12.540 --> 00:01:20.189
you, and answer the question, what is
Docker? Okay, so what is Docker? So we're
13

14
00:01:20.189 --> 00:01:22.842
gonna get into an introduction of Docker
14

15
00:01:22.842 --> 00:01:26.460
in this slideshow. So what it is, it's
15

16
00:01:26.460 --> 00:01:31.890
a standard for Linux containers. Now a
container is an isolated runtime inside
16

17
00:01:31.890 --> 00:01:37.770
of Linux. It also provides a private
machine like space under Linux, and these
17

18
00:01:37.770 --> 00:01:44.340
containers will run under any modern
Linux Kernel. It's important to point
18

19
00:01:44.340 --> 00:01:50.970
out, that this is very much Linux
centric, but it's also nothing new.
19

20
00:01:50.970 --> 00:01:56.670
So containers have been around for quite
some time, even under the old UNIX days.
20

21
00:01:56.670 --> 00:02:00.750
Now, in these containers, when you're
inside them, they do have their own
21

22
00:02:00.750 --> 00:02:07.979
process space, their own network interface.
Generally speaking, processes will run as
22

23
00:02:07.979 --> 00:02:13.080
root inside of a container. If you're
familiar with Linux security, root is the
23

24
00:02:13.080 --> 00:02:16.920
most powerful user and pretty common not to allow
24

25
00:02:16.920 --> 00:02:21.120
things to run as root. I did say this
is generally speaking, there are
25

26
00:02:21.120 --> 00:02:27.480
exceptions to that. They also have their
own disk space. They can share that
26

27
00:02:27.480 --> 00:02:33.330
container, can share disk with the host
that it's running on as well. So this is
27

28
00:02:33.330 --> 00:02:38.940
all very important to you guys conceptually,
when your program is running inside the
28

29
00:02:38.940 --> 00:02:45.410
container, it feels to the program like
it's running on its own private machine.
29

30
00:02:45.410 --> 00:02:51.180
But, that is not really the case. It's
easy to think of the container, as a
30

31
00:02:51.180 --> 00:02:58.140
virtual machine, but it's not. This is
an image I took directly from Docker.
31

32
00:02:58.140 --> 00:03:01.980
This is actually in the docker
information up on the web, unless
32

33
00:03:01.980 --> 00:03:06.390
they've changed it since they published
this course. But on the left hand side,
33

34
00:03:06.390 --> 00:03:10.980
of virtual machines. Now you can see
that we have some type of infrastructure
34

35
00:03:10.980 --> 00:03:15.900
being a physical hardware and on top of
that hardware, it's going to be the
35

36
00:03:15.900 --> 00:03:21.900
operating system, and in this case, a Host
Operating System, and then a Hypervisor
36

37
00:03:21.900 --> 00:03:27.239
to manage virtual machines. Now each
virtual machine is going to have its own
37

38
00:03:27.239 --> 00:03:31.799
guest operating system, with its own
binaries and libraries, and then its own
38

39
00:03:31.799 --> 00:03:37.620
application. Now the important thing to
remember, as a virtual machine, is just
39

40
00:03:37.620 --> 00:03:43.560
that it is a virtual piece of hardware.
So we're mocking out a PC or a server,
40

41
00:03:43.560 --> 00:03:49.110
some type of typically X86 architecture.
So the hypervisor
41

42
00:03:49.110 --> 00:03:56.010
is making it seem to the runtime
environment, that is running on physical
42

43
00:03:56.010 --> 00:04:00.540
hardware, that's why they call it
a virtual machine. It's a machine
43

44
00:04:00.540 --> 00:04:06.690
that's written in software, so to speak.
You can see on the left hand side,
44

45
00:04:06.690 --> 00:04:12.360
there's a lot of overhead with that now.
Now it's important, about on the right hand
45

46
00:04:12.360 --> 00:04:16.650
side of the containers, there is no
guest operating system. The guest
46

47
00:04:16.650 --> 00:04:21.530
operating system doesn't exist, so you're
running off the operating system of the
47

48
00:04:21.530 --> 00:04:25.919
host machine so you still have... down at
the bottom, you still have the
48

49
00:04:25.919 --> 00:04:30.650
infrastructure, which is being
the physical computer, the laptop, the
49

50
00:04:30.650 --> 00:04:34.270
server, the desktop... whatever it's running
out. And then, your operating system and
50

51
00:04:34.270 --> 00:04:41.300
that can be a couple of different things
primarily UNIX based or Linux based.
51

52
00:04:41.300 --> 00:04:46.910
Now, OS X has taken to it quite nicely because under the covers of Apple's OS X
52

53
00:04:46.910 --> 00:04:52.040
operating system is a flavor of Unix,
that Apple adapted. So the Docker stuff
53

54
00:04:52.040 --> 00:04:57.260
does point quite nicely there. And on
Windows 10, there is a native port to
54

55
00:04:57.260 --> 00:05:02.540
allow that. Now other operating systems
will require you to run VirtualBox, which
55

56
00:05:02.540 --> 00:05:08.840
will bring up a Linux virtual machine
for to run the Docker Containers inside
56

57
00:05:08.840 --> 00:05:14.450
them. So in this case, you'll be if you're
running an older version of Windows, pre-10,
57

58
00:05:14.450 --> 00:05:20.000
you will need to bring up a virtual
machine running in Linux and within that,
58

59
00:05:20.000 --> 00:05:24.560
you'll be able to run Docker. Now also,
comparing to this, we have the Docker
59

60
00:05:24.560 --> 00:05:28.360
Image, which is actually fairly
lightweight, and then each side of the 
60

61
00:05:28.360 --> 00:05:33.110
container has its own binaries and
libraries, and then its own application
61

62
00:05:33.110 --> 00:05:38.840
and their firewall, off in their own
container. Now the key point of
62

63
00:05:38.840 --> 00:05:44.060
remembering this picture is that a
container is not equal to VM. You can
63

64
00:05:44.060 --> 00:05:50.090
see in this image here, the guest
operating system for the first machine
64

65
00:05:50.090 --> 00:05:55.940
does take up a lot of resources. So if
you're running three different virtual
65

66
00:05:55.940 --> 00:06:01.669
machines, on one physical machine, it's
gonna get quite costly, because you have
66

67
00:06:01.669 --> 00:06:07.370
to share or share the limited resources
of the infrastructure or the physical
67

68
00:06:07.370 --> 00:06:12.800
machine, that you're running out amongst
all the virtual machines. Whereas, if you
68

69
00:06:12.800 --> 00:06:18.500
compare on the right hand side of Docker,
this is much more efficient. It really
69

70
00:06:18.500 --> 00:06:24.169
depends on what you're running and your
workload, but some estimates are 30% - 40%
70

71
00:06:24.169 --> 00:06:29.240
more efficient in terms of your system
utilization. So it's actually, a fairly
71

72
00:06:29.240 --> 00:06:35.419
significant difference in how much you
can utilize it. Utilize the hardware.
72

73
00:06:35.419 --> 00:06:40.130
Okay, let's get into some common Docker
terminology, a Docker Image.
73

74
00:06:40.130 --> 00:06:45.680
Now, this is a representation of a Docker
Container. It's kind of in a Java world,
74

75
00:06:45.680 --> 00:06:53.150
it's kind of like a war or a jar file so
very similar. And then, the Docker
75

76
00:06:53.150 --> 00:06:59.300
Container is like the standard runtime.
I like to think of this roughly equating
76

77
00:06:59.300 --> 00:07:04.610
it out to the Java world of running an
executable jar, so it's self-contained
77

78
00:07:04.610 --> 00:07:11.930
that's running inside the JVM. Now, the
Docker Engine. This is basically what
78

79
00:07:11.930 --> 00:07:17.090
manages all the docker stuff. So you get
the docker engine commands, and it's
79

80
00:07:17.090 --> 00:07:20.600
going to create and allocate Docker
Container, so startup those containers,
80

81
00:07:20.600 --> 00:07:24.860
bring them up, and shut them down. It will
allow them access to some different
81

82
00:07:24.860 --> 00:07:30.770
system resources, such as directories on
the host operating system, or network
82

83
00:07:30.770 --> 00:07:36.230
resources. This is an image from
Docker themselves, talking about the
83

84
00:07:36.230 --> 00:07:42.740
challenge, and why this is important.
We think about deploying out into the
84

85
00:07:42.740 --> 00:07:48.890
enterprise today. You have a lot of
different requirements, so, you have like,
85

86
00:07:48.890 --> 00:07:54.770
Python and Postgres and Ruby and Rails
and each at the top those are all
86

87
00:07:54.770 --> 00:07:59.450
different deployments and different
things. And then, we have the operations
87

88
00:07:59.450 --> 00:08:05.900
requirements of dealing with QA and data
centers and production servers or
88

89
00:08:05.900 --> 00:08:12.140
development servers are developing on
your own machine. DR, disaster recovery is
89

90
00:08:12.140 --> 00:08:17.420
a very important issue. You also have
access for like contractors and
90

91
00:08:17.420 --> 00:08:21.470
regulatory compliance, especially if
you're doing something like PCI or if
91

92
00:08:21.470 --> 00:08:26.990
your publicly traded in the US, you'd
have SAS 70 to contend with. So to
92

93
00:08:26.990 --> 00:08:31.130
all the access controls.
Today's enterprise environments are
93

94
00:08:31.130 --> 00:08:35.150
very very challenging. They have a
lot of requirements. There's really no
94

95
00:08:35.150 --> 00:08:41.630
standard to it. Docker, kind of, gets
its nickname from, if you look at how
95

96
00:08:41.630 --> 00:08:47.150
Cargo transport used to be done, it was
all haphazard. So, you had to literally
96

97
00:08:47.150 --> 00:08:52.080
carry cars across or individual barrels
of wine or
97

98
00:08:52.080 --> 00:08:59.130
pianos. It was all independent, so
that there was no standards for it.
98

99
00:08:59.130 --> 00:09:03.870
It was very difficult, not
having that. If you look at shipping
99

100
00:09:03.870 --> 00:09:08.460
today, where you have the container, it
really becomes a no-brainer, because
100

101
00:09:08.460 --> 00:09:14.040
these containers are intermodal. They
can be moved on trucks or on boats, and
101

102
00:09:14.040 --> 00:09:18.810
moved all over the world. They can be
used to transport, just about any type of
102

103
00:09:18.810 --> 00:09:24.420
goods, that are being traded and shipping,
and that's really kind of concept of the
103

104
00:09:24.420 --> 00:09:29.250
Docker Container. Because if you look at
the Docker Container, now you have a
104

105
00:09:29.250 --> 00:09:36.060
standard entity. We come from being
Java developers and our standard entity
105

106
00:09:36.060 --> 00:09:40.740
is either a jar or a war file or if
you're really slugging it through with
106

107
00:09:40.740 --> 00:09:47.670
J2E or JEE... in your file, I hope no you
guys are doing that still. But, that is
107

108
00:09:47.670 --> 00:09:53.100
only applicable to the Java world and it
doesn't address like databases or Ruby
108

109
00:09:53.100 --> 00:09:57.570
or Rails applications, and things like
that. So the technology world is much
109

110
00:09:57.570 --> 00:10:03.390
larger than the Java footprint that we
are comfortable with. Now, this has been a
110

111
00:10:03.390 --> 00:10:12.540
real game-changer for companies
utilizing Docker because it's highly effective for them to use. Companies like Google, that are
111

112
00:10:12.540 --> 00:10:19.890
literally deploying in tens of thousands
of Docker Containers every day, and it's
112

113
00:10:19.890 --> 00:10:26.820
really becoming quite explosive in the
growth. Now we can see back in 2013,
113

114
00:10:26.820 --> 00:10:31.740
not much going on in the Docker world.
Then it slowly started getting
114

115
00:10:31.740 --> 00:10:38.700
picked up. We can see that it's just
exponential growth goes from less than a
115

116
00:10:38.700 --> 00:10:43.620
million downloads to over six billion
containers being downloaded from docker
116

117
00:10:43.620 --> 00:10:47.640
hub. This is just containers, or I
should say, images being brought down
117

118
00:10:47.640 --> 00:10:55.320
from Docker. So you can see that it's
become rapidly evolving, and the
118

119
00:10:55.320 --> 00:11:01.140
size here is still a little dated. So, we
are working, I am working with Docker 1.15
119

120
00:11:01.140 --> 00:11:05.400
so this slide is against 1.12.
120

121
00:11:05.400 --> 00:11:08.820
Things are moving steadily along and 
there's a lot of innovation coming out
121

122
00:11:08.820 --> 00:11:14.550
in the Docker community. Now, the
last thing I wanna talk about is the
122

123
00:11:14.550 --> 00:11:17.520
Docker Runtime Engine. This takes a
little bit for you to get your head
123

124
00:11:17.520 --> 00:11:22.290
around. So when you're running Docker,
you're gonna have on the server at
124

125
00:11:22.290 --> 00:11:28.830
Docker Daemon and it's not demon. It's not
possessed. There's no evil exorcism way
125

126
00:11:28.830 --> 00:11:33.960
after as. Daemon, so that means it's a
background process.  In this process is
126

127
00:11:33.960 --> 00:11:37.740
gonna run with root privileges on
your machine and this is what's gonna
127

128
00:11:37.740 --> 00:11:43.800
control all the Docker Containers. Now, it
is exposed by REST API. You'll see
128

129
00:11:43.800 --> 00:11:48.360
this more when you're setting it up on a
Linux distribution. In the course, I'm
129

130
00:11:48.360 --> 00:11:51.630
using OS X where it is,
there's the Native Client and it does
130

131
00:11:51.630 --> 00:11:56.190
make it pretty darn easy. But if you have
to install it raw, you may have to
131

132
00:11:56.190 --> 00:12:03.100
remember to set the Docker Host import
that the Daemon is listening up. So that's kind of important stuff.
132

133
00:12:03.100 --> 00:12:13.500
Because it is a REST API and listening out port, it allows you to have your Docker client, which is what you use your commands to talk
133

134
00:12:13.500 --> 00:12:17.250
to other machines running Docker. In it,
as you get your head more around Docker,
134

135
00:12:17.250 --> 00:12:22.830
this becomes more and more important
because having that capability allows
135

136
00:12:22.830 --> 00:12:27.900
you to allocate and work with containers
on other machines that are running a
136

137
00:12:27.900 --> 00:12:32.390
Docker Daemon. So you can bring up
clusters machines and cluster together
137

138
00:12:32.390 --> 00:12:38.400
containers to build out an application.
So this is a kind of a really important
138

139
00:12:38.400 --> 00:12:43.170
concept. Okay so now you have a better
idea of what Docker is from the slides
139

140
00:12:43.170 --> 00:12:47.070
that I have. Now I did steal some of
these images from Docker, especially the
140

141
00:12:47.070 --> 00:12:51.900
one on the growth projections, that
Docker has been going through. If you're
141

142
00:12:51.900 --> 00:12:55.230
paying attention you can see some of
those dates are a little dated I assure
142

143
00:12:55.230 --> 00:12:59.280
you, that the growth of Docker has
not slowed down at all. It's continued
143

144
00:12:59.280 --> 00:13:04.200
see explosive growth. I'm seeing it more
and more in the workplace. Enterprise's
144

145
00:13:04.200 --> 00:13:10.590
are adapting it. I guarantee you, if
you are not using Docker right now, or
145

146
00:13:10.590 --> 00:13:14.040
not already been exposed to, if you don't
know somebody using it, chances are
146

147
00:13:14.040 --> 00:13:18.570
you're going to be using it. I'm seeing
this roll across the information
147

148
00:13:18.570 --> 00:13:21.520
technology space, much like virtual machine is dead.
148

149
00:13:21.520 --> 00:13:24.500
Because I did see the virtual machines
come through, I remember we had these
149

150
00:13:24.500 --> 00:13:32.890
big massive servers, and we started cutting down its virtual machine.  There wasn't a  lot of trust in the marketplace initially, and then more and more virtual
150

151
00:13:32.890 --> 00:13:36.850
machines to start becoming used. If
you talk to anybody who's running a data center now,
151

152
00:13:36.850 --> 00:13:42.010
they couldn't imagine running operations
without virtual machines. It's just not
152

153
00:13:42.010 --> 00:13:46.570
done anymore. Unless you're like Google
or Facebook, running all this commodity
153

154
00:13:46.570 --> 00:13:50.710
hardware. A lot of enterprises are
taking these very powerful servers,
154

155
00:13:50.710 --> 00:13:53.800
putting multiple virtual machines on
them, to run their applications. That's a
155

156
00:13:53.800 --> 00:13:59.200
very common use case. Docker is really
the next wave in that. Actually like
156

157
00:13:59.200 --> 00:14:03.670
Google, they run tens of thousands of
Docker Containers every day. So that is
157

158
00:14:03.670 --> 00:14:08.620
their go-to. Now next in this course,
we are gonna go ahead and get Docker
158

159
00:14:08.620 --> 00:14:13.570
installed on your machine, so we can
actually do a Hello World or dot hello
159

160
00:14:13.570 --> 00:14:16.540
world equivalent in Docker.
So the next module is gonna start
160

161
00:14:16.540 --> 00:14:19.290
stepping us through that.
