WEBVTT
0
1
00:00:04.400 --> 00:00:08.550
Alright, we are going to be talking
about Spring Stereotypes or 
1

2
00:00:08.550 --> 00:00:15.030
Spring Framework Stereotypes. A
Stereotype for our discussion today is a
2

3
00:00:15.030 --> 00:00:18.900
fixed general image or set of
characteristics but which represent a
3

4
00:00:18.900 --> 00:00:22.830
particular type of person or thing and
we're going to be focusing on the thing
4

5
00:00:22.830 --> 00:00:26.820
part of that definition. The word
Stereotype definitely has a lot of
5

6
00:00:26.820 --> 00:00:31.769
negative connotations because
Stereotyping people is particularly a
6

7
00:00:31.769 --> 00:00:37.469
bad habit to do and that's frowned upon
within the world but in this context, we
7

8
00:00:37.469 --> 00:00:43.079
are talking about Stereotyping software
components and these stereotypes, I think
8

9
00:00:43.079 --> 00:00:48.629
they pick that word because we're trying
to specify what gives you a hint of what
9

10
00:00:48.629 --> 00:00:52.050
that particular thing is doing. Like a
controller is going to be a controller
10

11
00:00:52.050 --> 00:00:57.090
inside of Spring MVC. A services is intended
to be a generic service layer. So these
11

12
00:00:57.090 --> 00:01:03.030
are used to express the intent. So when
we encounter the Spring Stereotypes, they
12

13
00:01:03.030 --> 00:01:07.110
are used to be defined Spring Beans with
in the Spring Context and this is being
13

14
00:01:07.110 --> 00:01:11.159
done through a Component Scan. So this is
part of the Spring Java Configuration
14

15
00:01:11.159 --> 00:01:15.780
where Spring is going to go and scan a
particular package and it's looking for
15

16
00:01:15.780 --> 00:01:19.350
these Stereotyped annotations. Now the available stereotypes within
16

17
00:01:19.350 --> 00:01:24.240
the Spring framework are @Component,
@Controller, @RestController, @Repository
17

18
00:01:24.240 --> 00:01:28.950
and @Service and I want to show you the
hierarchy. Component is the highest level,
18

19
00:01:28.950 --> 00:01:33.090
everything else inherits from the
Component so when Spring encounters
19

20
00:01:33.090 --> 00:01:36.720
just the Component annotation, that's
going to wire it up as a Spring Bean,
20

21
00:01:36.720 --> 00:01:41.579
it's going to hold true for all the
other annotations. Now Controller is used
21

22
00:01:41.579 --> 00:01:46.290
to indicate a Spring MVC Controller and
to be honest you probably could swap
22

23
00:01:46.290 --> 00:01:51.240
Controller and Component out and still
have that bean function as Controller
23

24
00:01:51.240 --> 00:01:55.470
because that's going to be a Spring
Component but when you use Controller
24

25
00:01:55.470 --> 00:02:01.350
you're going to be using Request Mapping to map
a particular method to a URL and that's
25

26
00:02:01.350 --> 00:02:05.009
really the meat and potatoes of the
Spring MVC in that action. I don't know
26

27
00:02:05.009 --> 00:02:09.599
if you can or not, but I expected to what
I personally tried swapping Controller
27

28
00:02:09.599 --> 00:02:13.920
and Component. Repository is annotation
that
28

29
00:02:13.920 --> 00:02:17.849
case that you're accessing the data
layer where Service is intended to be a
29

30
00:02:17.849 --> 00:02:22.650
Service that's going to be backing up
usually quite often that Controller.
30

31
00:02:22.650 --> 00:02:27.840
Now RestController, some people don't
consider RestController actual
31

32
00:02:27.840 --> 00:02:33.239
Stereotype because it is a convenience
annotation and it represents Controller
32

33
00:02:33.239 --> 00:02:37.830
and ResponseBody. So if you look at the
code of that you can see that it just
33

34
00:02:37.830 --> 00:02:42.150
extends Controller and adds in the
ResponseBody. Now ResponseBody as an
34

35
00:02:42.150 --> 00:02:45.360
annotation we have not seen yet. We will
be working with that later in the course
35

36
00:02:45.360 --> 00:02:50.970
and that is used within Spring MVC to
render an object back to the response
36

37
00:02:50.970 --> 00:02:56.340
and commonly you're going to be working
with this when you're doing Restful API's.
37

38
00:02:56.340 --> 00:03:00.989
You're going to be returning back a JSON
object or an XML object and Response
38

39
00:03:00.989 --> 00:03:06.600
Body is what says, take this object and
render it back to the client as json or
39

40
00:03:06.600 --> 00:03:12.209
xml. Taking a closer look at the
different Spring stereotypes, we have
40

41
00:03:12.209 --> 00:03:16.380
Component and Controller. They're very
similar but they're just indicating
41

42
00:03:16.380 --> 00:03:20.820
different intentions. Like I said before
the RestController that is a
42

43
00:03:20.820 --> 00:03:24.510
convenience annotation combining
Controller and ResponseBody. Now
43

44
00:03:24.510 --> 00:03:29.670
Repository and Services, these are both
inspired by Domain-Driven Design by
44

45
00:03:29.670 --> 00:03:35.940
Evans in 2003 and this is a very iconic
computer book and obviously Rod
45

46
00:03:35.940 --> 00:03:40.890
Johnson when he was developing Spring
Framework he's up on the latest trends
46

47
00:03:40.890 --> 00:03:47.250
and what not and this was right around
2003 in the early days of Spring. So we
47

48
00:03:47.250 --> 00:03:52.650
can see that repository is a mechanism
for encapsulating storage retrieval and
48

49
00:03:52.650 --> 00:03:57.540
search behavior. So it's going to be
defining classes. It's going to be interacting
49

50
00:03:57.540 --> 00:04:02.640
with a persistence in database likely. And then a Service, there's an operation
50

51
00:04:02.640 --> 00:04:07.140
that stands alone in the model, with no
encapsulated state. So a real real common
51

52
00:04:07.140 --> 00:04:10.739
pattern which we've already seen is that
you're going to take a Controller and
52

53
00:04:10.739 --> 00:04:14.730
give it a Service and the Service is
going to be responsible as far as
53

54
00:04:14.730 --> 00:04:19.769
managing the interaction with the
Controller and the database layer. So
54

55
00:04:19.769 --> 00:04:24.690
pretty common pattern within Spring
Framework to have a controller inject a
55

56
00:04:24.690 --> 00:04:27.570
service into it and that service will
have a
56

57
00:04:27.570 --> 00:04:33.540
repository injected into it. Now all
these annotations behaviorally to
57

58
00:04:33.540 --> 00:04:37.110
the Spring Framework are roughly the
same repositories the one that does
58

59
00:04:37.110 --> 00:04:42.420
stick out a little bit because what we
get here, we do get some special error
59

60
00:04:42.420 --> 00:04:46.740
handling when you mark a component on
the Spring using the Repository
60

61
00:04:46.740 --> 00:04:52.230
annotation and what Spring is going to
do under the covers is take if you're
61

62
00:04:52.230 --> 00:04:57.510
using hibernate or just straight JDBC
and different databases, it's going to
62

63
00:04:57.510 --> 00:05:03.690
take those exceptions from that specific
layer and make it into the Spring
63

64
00:05:03.690 --> 00:05:08.790
generic, or I shouldn't say generic, but a Spring
exception so that the exception and
64

65
00:05:08.790 --> 00:05:13.860
error handling above your repository is
going to stay generic to the Spring
65

66
00:05:13.860 --> 00:05:18.030
Framework and not be tied to the
particular persistence application you
66

67
00:05:18.030 --> 00:05:21.780
have underneath. So it's a basically an
abstraction layer and it's a good
67

68
00:05:21.780 --> 00:05:25.830
habit to do when we get into that
because you're going to be looking and
68

69
00:05:25.830 --> 00:05:31.320
handling Spring exceptions and if you
think if you have an application and you
69

70
00:05:31.320 --> 00:05:37.980
might be on MySQL, you don't want to be
handling MySQL specific errors when
70

71
00:05:37.980 --> 00:05:42.300
further down the road you might migrate
the application to Oracle and get on a
71

72
00:05:42.300 --> 00:05:47.250
real database. But this is just
convenient and that's probably the
72

73
00:05:47.250 --> 00:05:52.320
biggest difference between the
annotations so just remember that. These
73

74
00:05:52.320 --> 00:05:56.790
are largely used to express intent of
what that component is doing. I've seen a
74

75
00:05:56.790 --> 00:06:01.830
lot of people get confused as to what
annotation, what Stereotype annotation I
75

76
00:06:01.830 --> 00:06:07.470
should use when and generally if you
don't have a specific role, use Component
76

77
00:06:07.470 --> 00:06:12.120
that's fine. But if you're doing a
controller, obviously use Controller, data
77

78
00:06:12.120 --> 00:06:16.710
layer Repository or if you have
something like a service, obviously
78

79
00:06:16.710 --> 00:06:23.760
Service. So a large part of the Stereotype
usage is to express the intent of that
79

80
00:06:23.760 --> 00:06:26.630
Spring Bean.
