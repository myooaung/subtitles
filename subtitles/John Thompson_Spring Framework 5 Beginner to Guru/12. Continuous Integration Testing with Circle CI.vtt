WEBVTT
0
1
00:00:04.670 --> 00:00:09.240
Alright, continuous integration testing
is a very important thing to do when
1

2
00:00:09.240 --> 00:00:13.710
you're actively developing projects like
this. And what we're gonna do in this
2

3
00:00:13.710 --> 00:00:17.130
video is take a look at CircleCI. Now
this is a completely free service that
3

4
00:00:17.130 --> 00:00:21.840
we can use for integration builds. The
folks over a CircleCI give us a
4

5
00:00:21.840 --> 00:00:26.160
basically a docker container that will
run and it hooks up to GitHub very
5

6
00:00:26.160 --> 00:00:30.779
seamlessly and it will build our
projects for us and if we check in
6

7
00:00:30.779 --> 00:00:34.380
something's bad we'll get an email on it. So pretty pretty cool stuff. So I'm gonna
7

8
00:00:34.380 --> 00:00:38.280
go over to the website now and show
you. I'm gonna take that project that
8

9
00:00:38.280 --> 00:00:42.840
I forked earlier just like you can. So go
ahead and fork the code and then work in
9

10
00:00:42.840 --> 00:00:47.760
that and as you commit, now that we have
tests in place, as you commit every time
10

11
00:00:47.760 --> 00:00:51.840
a commit happens,
CircleCI is gonna do a build and if
11

12
00:00:51.840 --> 00:00:56.219
any of your tests happen to fail, you're
going to get an email on it. And of
12

13
00:00:56.219 --> 00:00:59.340
course you wanna be running your tests
and make sure everything is right
13

14
00:00:59.340 --> 00:01:03.270
before you check in. So you shouldn't get
any failing builds but it's a really nice
14

15
00:01:03.270 --> 00:01:07.439
safety net to have in place to have
continuous integration builds going. And
15

16
00:01:07.439 --> 00:01:11.220
this is something that development teams
do all the time. It's really considered
16

17
00:01:11.220 --> 00:01:15.750
the best practice to have a continuous
integration build server going for
17

18
00:01:15.750 --> 00:01:19.979
a development shop. So I am showing you,
I'm trying to show you best practices in
18

19
00:01:19.979 --> 00:01:26.310
this. CircleCI is completely free so you
can now utilize it for the rest of
19

20
00:01:26.310 --> 00:01:30.119
this course and get your own continuous
integration builds going. There is also
20

21
00:01:30.119 --> 00:01:36.540
TravisCI. That's a very popular option
too and it is also free. CircleCI right
21

22
00:01:36.540 --> 00:01:40.110
now seems to have a little more attraction
and community. I see a lot of people that
22

23
00:01:40.110 --> 00:01:45.360
are migrating over from Travis to Circle. So that's why I'm using Circle and
23

24
00:01:45.360 --> 00:01:49.200
it works nicely. I'm very
happy with it. I've been CircleCI for
24

25
00:01:49.200 --> 00:01:53.850
a while and it works out great. So I'm
gonna jump over to IntelliJ now or
25

26
00:01:53.850 --> 00:01:59.250
actually the web and show you how to set
up CircleCI and get your own continuous
26

27
00:01:59.250 --> 00:02:02.640
integration builds going. Okay
earlier in the course I showed you how
27

28
00:02:02.640 --> 00:02:06.090
to fork a source repository so I'm
hoping you're working within GitHub.
28

29
00:02:06.090 --> 00:02:10.770
CircleCI is designed to work
specifically with GitHub. The integration
29

30
00:02:10.770 --> 00:02:13.790
is quite nice. So what I have here is
I've got the
30

31
00:02:13.790 --> 00:02:21.109
that fork up here and we wanna come into
CircleCI and we can go ahead and login
31

32
00:02:21.109 --> 00:02:26.810
and it is going to leverage your
GitHub account. So under the covers, it's
32

33
00:02:26.810 --> 00:02:30.680
going to be using OAuth to work with
GitHub. So you can sign in using your
33

34
00:02:30.680 --> 00:02:35.870
same GitHub
credentials and now you're gonna be
34

35
00:02:35.870 --> 00:02:41.269
asked to authorize CircleCI to your
GitHub account. So I'm gonna go ahead
35

36
00:02:41.269 --> 00:02:46.189
and authorize CircleCI to work with
GitHub. And it's asking me for my
36

37
00:02:46.189 --> 00:02:56.150
password. And we see CircleCI
loads up and we see that I get a list
37

38
00:02:56.150 --> 00:02:59.780
of all the projects that I have
authorized inside my GitHub account. And
38

39
00:02:59.780 --> 00:03:03.889
what we wanna do is take on this. I'm
not gonna do everything that I have
39

40
00:03:03.889 --> 00:03:09.680
in my GitHub account but I do wanna
get the spring5-recipe-app up and
40

41
00:03:09.680 --> 00:03:14.120
cooking. So I've deselected the other
ones and I am going to say Follow and
41

42
00:03:14.120 --> 00:03:20.720
Build that. And what's gonna happen
inside CircleCI is it's going to go out
42

43
00:03:20.720 --> 00:03:26.629
and run a build for that. So you can see
that I've also linked this account to my
43

44
00:03:26.629 --> 00:03:31.269
springframeworkguru account and we're
getting build information from that and
44

45
00:03:31.269 --> 00:03:37.419
we're also getting this to run. So you
can actually come in and see it run and
45

46
00:03:37.419 --> 00:03:42.859
see that's going through and doing a
number of steps. And CircleCI is
46

47
00:03:42.859 --> 00:03:47.510
pretty impressive. It's smart enough to
go out and build a project. It simply
47

48
00:03:47.510 --> 00:03:52.579
detects that you're already doing a
Maven build. So it's automatically going
48

49
00:03:52.579 --> 00:03:56.590
to configure everything for us and in
the background, what it's doing is it's
49

50
00:03:56.590 --> 00:04:01.430
running a basically I Maven inside of
a docker container and you can see that
50

51
00:04:01.430 --> 00:04:05.209
it's going offline and now we can
see that it's going through downloading
51

52
00:04:05.209 --> 00:04:10.220
all the stuff that we need. So it's
downloading all the Maven dependencies.
52

53
00:04:10.220 --> 00:04:15.199
So this is gonna take longer
because it is downloading to the world.
53

54
00:04:15.199 --> 00:04:20.150
And just as a reminder all these jars
that you see it downloading right now,
54

55
00:04:20.150 --> 00:04:25.010
those are all going to be in your local Maven cache under your home
55

56
00:04:25.010 --> 00:04:28.880
folder .m2/repository. This
is where you can see all the Maven
56

57
00:04:28.880 --> 00:04:33.860
artifacts that are stored locally on
your machine. But in this case it does
57

58
00:04:33.860 --> 00:04:38.210
have to go out and download all those. And what I'm gonna do right now is
58

59
00:04:38.210 --> 00:04:44.020
pause this and then we'll take a look at
the build when it's all done.
59

60
00:04:45.820 --> 00:04:51.650
Okay our build has completed. You can see
here it does go through several
60

61
00:04:51.650 --> 00:04:56.570
steps. One is bring down the dependencies,
saves cache and then also comes over
61

62
00:04:56.570 --> 00:05:00.470
here to the integration test. And we can
see here that we did have a BUILD
62

63
00:05:00.470 --> 00:05:06.050
SUCCESS and this is what's checked out
the root of the project. So we can scroll
63

64
00:05:06.050 --> 00:05:11.390
up and you see a lot of downloading
activity. Then as we scroll further up we
64

65
00:05:11.390 --> 00:05:18.200
will eventually get to the test output. So we can see here that we have the
65

66
00:05:18.200 --> 00:05:30.860
one test that did run zero failures, zero
errors. So exactly what we want. So if you
66

67
00:05:30.860 --> 00:05:35.300
come over to your User Settings, you can
see that you are connected to GitHub.
67

68
00:05:35.300 --> 00:05:40.640
Optionally you can use Bitbucket, Google
with this, you can see your build history
68

69
00:05:40.640 --> 00:05:45.979
which is quite nice. So this is again
bringing up my build histories too. So
69

70
00:05:45.979 --> 00:05:50.330
what's really nice about CircleCI is if you do follow branching that
70

71
00:05:50.330 --> 00:05:54.380
I've been doing, it will automatically
pick up that branch. So if you branch
71

72
00:05:54.380 --> 00:05:57.590
from master to something else,
CircleCI is gonna automatically pick
72

73
00:05:57.590 --> 00:06:03.350
that up. And what I really like about is
if you do branch and encounter an error,
73

74
00:06:03.350 --> 00:06:07.370
you're gonna get an email from CircleCI saying that your your build fails. So
74

75
00:06:07.370 --> 00:06:12.229
this is a really really good habit to
get into using. A couple other things I'd
75

76
00:06:12.229 --> 00:06:16.100
like to show you here, if you come down
here you do see an option to Add
76

77
00:06:16.100 --> 00:06:21.950
Containers and what a container is,
CircleCI is going to limit you to one
77

78
00:06:21.950 --> 00:06:27.080
container at a time. If you had a very
busy project team you could add in
78

79
00:06:27.080 --> 00:06:31.700
additional containers and we really
don't need that here. Especially for you
79

80
00:06:31.700 --> 00:06:35.900
being a student. One container is gonna be fine. What's going to happen is if
80

81
00:06:35.900 --> 00:06:40.070
you're busy doing check-ins and like you
should be doing small incremental
81

82
00:06:40.070 --> 00:06:43.040
check-ins,
effectively you're gonna have one
82

83
00:06:43.040 --> 00:06:49.040
build running at a time. So any follow and
check-ins if you did two check-ins or no
83

84
00:06:49.040 --> 00:06:53.419
check in before that build completed,
what CircleCI is gonna do is put it
84

85
00:06:53.419 --> 00:06:58.100
in a build queue. So when that that built
completes, you're gonna get the next
85

86
00:06:58.100 --> 00:07:03.530
one will automatically start when
it's done. So really no need to
86

87
00:07:03.530 --> 00:07:06.860
purchase additional containers from
CircleCI. I think this gives us
87

88
00:07:06.860 --> 00:07:09.800
capabilities. I'm only running with one
container on everything that I'm
88

89
00:07:09.800 --> 00:07:13.490
doing. So you're perfectly fine there. Now
I do wanna show you how this is
89

90
00:07:13.490 --> 00:07:19.070
working. So if you come over here, I'm
going back into GitHub and you go into
90

91
00:07:19.070 --> 00:07:25.160
the settings of your project and take a
look at Webhooks and you can see in
91

92
00:07:25.160 --> 00:07:29.389
that CircleCI automatically configured
a webhook for you. So that's how it's
92

93
00:07:29.389 --> 00:07:33.860
going to know. So the moment you check in,
this webhook from GitHub is gonna
93

94
00:07:33.860 --> 00:07:39.910
fire over to CircleCI and initiate the
build for you. And I think we also got a
94

95
00:07:39.910 --> 00:07:47.090
Deploy keys. So CircleCI also created
its own SSH key back to GitHub. So these
95

96
00:07:47.090 --> 00:07:50.960
are just a couple things I want you to
be aware of because this is how
96

97
00:07:50.960 --> 00:07:54.950
GitHub has been integrated with CircleCI so it gets an SSH key so it can securely
97

98
00:07:54.950 --> 00:07:59.930
check things out from your repository. And then this web hook here,
98

99
00:07:59.930 --> 00:08:05.240
the second you commit your code up to
GitHub, that webhook will fire and CircleCI
99

100
00:08:05.240 --> 00:08:12.949
will go out and build right away. Let's see I think I can trigger build from
100

101
00:08:12.949 --> 00:08:19.120
right here. Try making a white source.
101

102
00:08:24.580 --> 00:08:27.950
So I'm going right in GitHub and making that
102

103
00:08:27.950 --> 00:08:36.030
change and I'm gonna commit right to
GitHub and now that's committed and
103

104
00:08:36.030 --> 00:08:42.120
we've come over here and because I see
how fast I switched over and it's
104

105
00:08:42.120 --> 00:08:46.920
already building. So that's
already fired off and it's building. It's
105

106
00:08:46.920 --> 00:08:51.720
gonna go ahead and build that so you
can see just how fast your builds
106

107
00:08:51.720 --> 00:08:55.560
are gonna get triggered. They happen
like right away when you check-in. So
107

108
00:08:55.560 --> 00:08:59.400
hopefully you guys go through and
configure this. I will be using CircleCI
108

109
00:08:59.400 --> 00:09:03.390
for the remainder of this course and
will definitely be seeing a lot more
109

110
00:09:03.390 --> 00:09:05.600
testing.
