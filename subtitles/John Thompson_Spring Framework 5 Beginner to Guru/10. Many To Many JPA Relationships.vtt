WEBVTT
0
1
00:00:04.460 --> 00:00:08.760
Alright, in this one we are going to
take a look at many to many
1

2
00:00:08.760 --> 00:00:14.219
relationships and I'm going to show you
how to set up a bi-directional many to many
2

3
00:00:14.219 --> 00:00:20.340
relationship in JPA. Now I've gone in and
updated our little ERD diagram there in
3

4
00:00:20.340 --> 00:00:25.619
JDL Studio and what I want to see was a
bi-directional relationship between
4

5
00:00:25.619 --> 00:00:32.460
Recipe and Category. So I've now gone and
added that and you can see we have a
5

6
00:00:32.460 --> 00:00:38.790
line going from Recipe to Category and
there's a star underscore star meaning
6

7
00:00:38.790 --> 00:00:45.239
many to many. And we also have a line
going back from Category to Recipe and
7

8
00:00:45.239 --> 00:00:51.360
up towards the top there by Recipe, you
can see that also has a star underscore
8

9
00:00:51.360 --> 00:00:56.640
star for a many-to-many relationship. So
we can have many recipes pointing to
9

10
00:00:56.640 --> 00:01:02.250
many categories and many categories
belonging to many recipes. So what we
10

11
00:01:02.250 --> 00:01:09.119
want to do is go in and map that now and
jump over to IntelliJ. And I've gone in
11

12
00:01:09.119 --> 00:01:14.400
and I've created the entity class
Category already and now it has a
12

13
00:01:14.400 --> 00:01:21.540
property on it, private Set of Recipe of
recipes and we want to come in and use
13

14
00:01:21.540 --> 00:01:31.350
the many-to-many annotation on that. And
let's also update Recipe to have
14

15
00:01:31.350 --> 00:01:37.979
a Category. So I'm going to come down
here under notes and I'm also going to
15

16
00:01:37.979 --> 00:01:46.200
use a Set, collect categories and shoot
down to the bottom here. I'm going to add
16

17
00:01:46.200 --> 00:01:49.520
in the getters and setters for it.
17

18
00:01:51.750 --> 00:01:54.720
sounds like I have some Thunder outside.
I'm sorry if that's getting picked up by
18

19
00:01:54.720 --> 00:01:59.910
the microphone. That's summertime in Florida. And I'm
19

20
00:01:59.910 --> 00:02:04.890
also going to annotate this as a
ManyToMany but our relationship isn't
20

21
00:02:04.890 --> 00:02:09.869
done there. So I'm going to show you what
happens in Hibernate right now if we let
21

22
00:02:09.869 --> 00:02:15.600
it go and create the database schema for
us. So I'm going to start up Spring Boot.
22

23
00:02:15.600 --> 00:02:20.010
And Spring Boot, it did start up normally. We can see down there at the bottom
23

24
00:02:20.010 --> 00:02:27.120
Tomcat started up on port 8080 and
because we are using Spring Boot, we are
24

25
00:02:27.120 --> 00:02:34.430
going to get an H2 database console and
just as a reminder the default JDBC URL
25

26
00:02:34.430 --> 00:02:42.780
when you're using Spring Boot unless you
overwrite it, is jdbc:h2:mem:
26

27
00:02:42.780 --> 00:02:47.489
testdb. Now I do see people having
problems with this at times where they
27

28
00:02:47.489 --> 00:02:52.050
have something else in there and I think
this is saved in a cookie somewhere on
28

29
00:02:52.050 --> 00:02:56.400
your system. So if you change it once
then you're fine but if you have a
29

30
00:02:56.400 --> 00:03:01.049
problem and you don't see your database
then double check your JDBC URL because a
30

31
00:03:01.049 --> 00:03:06.090
lot of times if you have that, you're
going to see a different database. The
31

32
00:03:06.090 --> 00:03:11.670
way H2 works is it creates the database
based on the URL when you're doing in
32

33
00:03:11.670 --> 00:03:18.049
memory database. So I'm going to go in
and connect. We'll try that one more time and
33

34
00:03:18.049 --> 00:03:24.720
now we can see our database got got
created but we can see that we have a
34

35
00:03:24.720 --> 00:03:30.780
CATEGORY_RECIPES and a RECIPE_CATEGORIES. So we have two different
35

36
00:03:30.780 --> 00:03:35.880
tables there and that's because we
created two relationships but we did not
36

37
00:03:35.880 --> 00:03:40.860
configure them. So this is definitely not
a behavior that we want. We can do this
37

38
00:03:40.860 --> 00:03:44.880
in one table. We only need one table to
support this and the reason this is
38

39
00:03:44.880 --> 00:03:49.200
happening is because we didn't give
Hibernate enough information and it just
39

40
00:03:49.200 --> 00:03:54.360
went out and created the different
relationships for us but we can use the
40

41
00:03:54.360 --> 00:03:57.630
same and we should use the same set
because this is kind of ugly right here.
41

42
00:03:57.630 --> 00:04:01.340
So I'm going to come back over to
IntelliJ
42

43
00:04:01.340 --> 00:04:09.180
and I'm going to stop Spring Boot
and we can close that window. Now what I
43

44
00:04:09.180 --> 00:04:19.140
want to do is specify a join table and
this is probably one of the more complex
44

45
00:04:19.140 --> 00:04:29.340
things you're going to do in JPA mapping. And I want to name it. We'll call it
45

46
00:04:29.340 --> 00:04:47.540
recipe category. We only get one. Now
we're going to specify join columns and
46

47
00:04:47.540 --> 00:04:52.950
the convention that Hibernate is using, see
if I still have that up. So it's going to
47

48
00:04:52.950 --> 00:05:01.200
do, what we want to do is recipe category
and we want to do recipe ID. So you can
48

49
00:05:01.200 --> 00:05:06.860
see we have category recipes, recipe
categories is changing the second one to
49

50
00:05:06.860 --> 00:05:13.350
plural but in both cases we are getting
table name underscore ID and that is a
50

51
00:05:13.350 --> 00:05:17.040
default naming convention that hibernate
is going to use to generate the tables
51

52
00:05:17.040 --> 00:05:21.570
for us. So we're going to follow that
same naming convention. So we want you to
52

53
00:05:21.570 --> 00:05:34.200
do recipe ID and category ID. So that's
specifying the join column. Next, we need
53

54
00:05:34.200 --> 00:05:42.780
to do the opposite way and use the
inverseJoinColumns. Again we need to
54

55
00:05:42.780 --> 00:05:50.330
use the JoinColumn annotation and this is
going to be for the inverse direction.
55

56
00:05:51.710 --> 00:05:59.900
And in this case, I'm going to specify
singular on these because we don't need
56

57
00:05:59.900 --> 00:06:05.250
plurals in any case. So now we're
saying I want a table recipe category
57

58
00:06:05.250 --> 00:06:10.440
and from this way of the relationship
we're going to use recipe ID and coming
58

59
00:06:10.440 --> 00:06:14.640
back, we're going to have category ID. So this is setting up that mapping. Now
59

60
00:06:14.640 --> 00:06:22.680
when we really run it we're going to see
a much different view. I got a mistake
60

61
00:06:22.680 --> 00:06:24.919
there.
61

62
00:06:29.290 --> 00:06:38.030
I miss the name value there so now let's
try that again. You see that started up
62

63
00:06:38.030 --> 00:06:48.320
normally. Come back over here and let's
do a refresh here. Connect. Now I have
63

64
00:06:48.320 --> 00:06:54.190
CATEGORY_RECIPES but I still have that
other one and I overlooked one property.
64

65
00:06:54.190 --> 00:07:06.680
So I didn't do the other side. So over
here I need to tell it mappedBy. And we can
65

66
00:07:06.680 --> 00:07:10.880
see that Hibernate did restart there
because I did change it and we do have
66

67
00:07:10.880 --> 00:07:15.320
Spring Boot developer tools running. So
this is going to restart for us and let's
67

68
00:07:15.320 --> 00:07:25.040
go and take a look. I'm going to do a
refresh. Now let's do a connect and
68

69
00:07:25.040 --> 00:07:31.669
that's what I wanted. So now I have one
table RECIPE_CATEGORY, so rather than
69

70
00:07:31.669 --> 00:07:35.960
having two tables. Let's come back over
here and we'll step through this one
70

71
00:07:35.960 --> 00:07:44.120
more time. So what I did is I created a
many-to-many relationship and I'm saying
71

72
00:07:44.120 --> 00:07:50.210
this is mappedBy categories and this is
going to be on the join table from that
72

73
00:07:50.210 --> 00:07:55.130
set. So from the other side of the
relationship and that categories is
73

74
00:07:55.130 --> 00:08:03.890
going to be this property name. Now on
this side, I told a join able to name
74

75
00:08:03.890 --> 00:08:11.300
the table as recipe category which gives
us this value here. That's why it's named
75

76
00:08:11.300 --> 00:08:18.830
recipe category, and now I set up to join
columns so from this side of the
76

77
00:08:18.830 --> 00:08:23.660
relationship, we are going to have a join
column called recipe id and on the other
77

78
00:08:23.660 --> 00:08:29.470
side for the categories, we're going to
have category id. So it's important to
78

79
00:08:29.470 --> 00:08:36.770
recognize it. Let's do a little example
here. So if I called that recipe category
79

80
00:08:36.770 --> 00:08:38.979
foo,
80

81
00:08:38.979 --> 00:08:45.740
call this bar, we can see that Spring
Boot is restarting pretty quickly there.
81

82
00:08:45.740 --> 00:08:50.240
That's dev tools, the Spring Boot dev
tools in action. Now I come back over
82

83
00:08:50.240 --> 00:08:55.910
here we will see that the tables have been
renamed. So I come back and connect and
83

84
00:08:55.910 --> 00:09:02.689
we can see that the table is now RECIPE_CATEGORY_FOO and we have recipe_id_bar.
84

85
00:09:02.689 --> 00:09:08.629
So that's clearly just demonstration
purposes. That's not what we want in real
85

86
00:09:08.629 --> 00:09:13.610
life. I'm just showing you how these are
related to the SQL that is getting
86

87
00:09:13.610 --> 00:09:18.259
generated for the tables underneath the
covers and we can see that this is going
87

88
00:09:18.259 --> 00:09:24.259
to restart and it goes again. Let's just
refresh and I'll show you how those have
88

89
00:09:24.259 --> 00:09:31.279
changed back. So we are now back to
recipe_category and with this recipe_id
89

90
00:09:31.279 --> 00:09:37.579
and we got rid of the foo bar attributes. So this is probably one of the more
90

91
00:09:37.579 --> 00:09:42.829
complex things and that you're going to
do in JPA mappings and I'll be honest
91

92
00:09:42.829 --> 00:09:46.970
when I need to set up a many to many, I
need to go out and google this as a
92

93
00:09:46.970 --> 00:09:52.339
refresher because honestly you don't
see that many to many relationships in
93

94
00:09:52.339 --> 00:09:56.689
when you're working as a Spring
developer. This is something that you're
94

95
00:09:56.689 --> 00:10:00.920
come going to encounter every month or
two months or so. So you don't see it
95

96
00:10:00.920 --> 00:10:05.209
that much or that often. So don't feel
bad if you have to go out and google it
96

97
00:10:05.209 --> 00:10:08.749
but do be aware of the functionality and
how you have to set up those
97

98
00:10:08.749 --> 00:10:13.069
relationships. I am aware of that but I
will go out and google it just to
98

99
00:10:13.069 --> 00:10:17.740
refresh my memory and get it set up
properly.
