WEBVTT
0
1
00:00:04.971 --> 00:00:06.454
<v Instructor>Alright, in this video</v>
1

2
00:00:06.454 --> 00:00:09.105
we are going to take a look at setting up
2

3
00:00:09.105 --> 00:00:12.503
the MySQL database and up on the screen there,
3

4
00:00:12.503 --> 00:00:15.781
what I have is a file that I'm going to
4

5
00:00:15.781 --> 00:00:18.532
add into the source and you'll see it under scripts
5

6
00:00:18.532 --> 00:00:21.699
and the SQL files configured mysql.sql
6

7
00:00:23.315 --> 00:00:25.254
and you'll be able to use the commands
7

8
00:00:25.254 --> 00:00:26.350
in here to set things up.
8

9
00:00:26.350 --> 00:00:29.522
Now, it's optional for you to run MySQL locally,
9

10
00:00:29.522 --> 00:00:31.627
installed on your whatever operating
10

11
00:00:31.627 --> 00:00:33.828
system you're working under or,
11

12
00:00:33.828 --> 00:00:35.420
as we just saw on the Docker stuff,
12

13
00:00:35.420 --> 00:00:37.610
we can run it in a Docker container
13

14
00:00:37.610 --> 00:00:39.868
and on line two there, I'm giving you
14

15
00:00:39.868 --> 00:00:43.811
a command to start up MySQL and I'm going to
15

16
00:00:43.811 --> 00:00:47.978
copy that over right now, and come over to the command line
16

17
00:00:49.727 --> 00:00:52.310
and go ahead and paste that in.
17

18
00:00:53.167 --> 00:00:55.025
Oh, already in use, so I got to give
18

19
00:00:55.025 --> 00:00:57.178
it a unique name, like I said,
19

20
00:00:57.178 --> 00:00:59.248
I do run several containers here,
20

21
00:00:59.248 --> 00:01:03.415
so I'm just going to do v3, give it a unique name to my system.
21

22
00:01:06.666 --> 00:01:11.034
Now we can see that is up, and do a docker...
22

23
00:01:11.034 --> 00:01:14.686
Spell docker right, ps I can see that container
23

24
00:01:14.686 --> 00:01:17.256
is up and running, so listening on the
24

25
00:01:17.256 --> 00:01:19.756
default port of 3306 of MySQL.
25

26
00:01:21.004 --> 00:01:24.438
Now the, MySQL client that I like to use is,
26

27
00:01:24.438 --> 00:01:27.402
Sequel pro, there's a lot of different clients out there,
27

28
00:01:27.402 --> 00:01:30.394
so this is just my particular choice on the Mac.
28

29
00:01:30.394 --> 00:01:32.895
I find it works quite nicely.
29

30
00:01:32.895 --> 00:01:36.674
You can go to command line or use the client of your choice.
30

31
00:01:36.674 --> 00:01:38.992
Now, the first thing that we want to do here,
31

32
00:01:38.992 --> 00:01:41.478
is we're going to create a couple databases.
32

33
00:01:41.478 --> 00:01:44.540
I'm going to copy these commands over
33

34
00:01:44.540 --> 00:01:47.276
and we'll just paste that in and I'm going to
34

35
00:01:47.276 --> 00:01:50.116
highlight that all and say, run selection.
35

36
00:01:50.116 --> 00:01:52.439
Now we see that there is no errors down there
36

37
00:01:52.439 --> 00:01:54.283
at the bottom of the screen.
37

38
00:01:54.283 --> 00:01:56.169
So now the database is created
38

39
00:01:56.169 --> 00:01:57.524
and we can see here that they are being
39

40
00:01:57.524 --> 00:01:59.590
listed in Sequel pro for us.
40

41
00:01:59.590 --> 00:02:02.450
The next thing we want to do is create our user accounts.
41

42
00:02:02.450 --> 00:02:04.430
Now this is standard SQL here,
42

43
00:02:04.430 --> 00:02:06.912
it's creating a user at localhost
43

44
00:02:06.912 --> 00:02:11.124
and identified by guru, is actually setting the password,
44

45
00:02:11.124 --> 00:02:13.895
so that is a SQL standard, as far as
45

46
00:02:13.895 --> 00:02:17.060
identified by, so if you're not familiar with SQL,
46

47
00:02:17.060 --> 00:02:19.207
that's create user and that's the username
47

48
00:02:19.207 --> 00:02:21.290
and we're saying identified by guru,
48

49
00:02:21.290 --> 00:02:23.774
as a password, so I'm going to copy that over
49

50
00:02:23.774 --> 00:02:27.941
and we'll jump over to Sequel pro and paste that in,
50

51
00:02:28.813 --> 00:02:31.896
and highlight all this, so now I have
51

52
00:02:32.794 --> 00:02:36.174
those two users created and now,
52

53
00:02:36.174 --> 00:02:38.155
we want to do the database grants.
53

54
00:02:38.155 --> 00:02:39.831
So we can see that we're doing select,
54

55
00:02:39.831 --> 00:02:42.583
answer, delete and update, so these two user accounts
55

56
00:02:42.583 --> 00:02:44.877
will only be able to do DML operations,
56

57
00:02:44.877 --> 00:02:46.352
we don't want them doing anything else
57

58
00:02:46.352 --> 00:02:50.063
and this is kind of standard security for database
58

59
00:02:50.063 --> 00:02:52.741
and we'll see this a lot more in Enterprise use,
59

60
00:02:52.741 --> 00:02:55.116
where you're going to be creating service accounts
60

61
00:02:55.116 --> 00:02:57.675
that have a minimal amount of access.
61

62
00:02:57.675 --> 00:03:01.675
So copy that over, and I'm just going to paste that
62

63
00:03:02.810 --> 00:03:07.395
and I'm going to highlight all this and say, run selection.
63

64
00:03:07.395 --> 00:03:10.205
And now, those grants have completed
64

65
00:03:10.205 --> 00:03:12.167
and now, let's go ahead and take a look at the
65

66
00:03:12.167 --> 00:03:16.488
database and this is a specific Sequel pro,
66

67
00:03:16.488 --> 00:03:19.452
other MySQL tools can do this as well.
67

68
00:03:19.452 --> 00:03:21.647
Going to take a quick look at the user accounts so,
68

69
00:03:21.647 --> 00:03:24.096
now we can see that the root user was created
69

70
00:03:24.096 --> 00:03:26.272
by the Docker container that we're using,
70

71
00:03:26.272 --> 00:03:28.184
that we'll set up without a password.
71

72
00:03:28.184 --> 00:03:30.713
You definitely want to secure your root account,
72

73
00:03:30.713 --> 00:03:33.326
but this is just a Docker container on my box so,
73

74
00:03:33.326 --> 00:03:36.156
it's okay to have a blank password
74

75
00:03:36.156 --> 00:03:38.222
for the root SQL user, definitely would not
75

76
00:03:38.222 --> 00:03:41.140
do this in production, but now we can see
76

77
00:03:41.140 --> 00:03:44.685
our sfg_dev_ user, we can see he doesn't have
77

78
00:03:44.685 --> 00:03:48.086
any global privileges, but if I click on the
78

79
00:03:48.086 --> 00:03:51.450
dev schema, you can see that he does have these.
79

80
00:03:51.450 --> 00:03:53.504
Now these are other privileges here
80

81
00:03:53.504 --> 00:03:55.660
and you can see the service count
81

82
00:03:55.660 --> 00:03:58.021
isn't going to be needing to create like a view
82

83
00:03:58.021 --> 00:04:01.402
or temporary tables or grant anything or lock tables.
83

84
00:04:01.402 --> 00:04:04.409
These are all things that we don't want him doing.
84

85
00:04:04.409 --> 00:04:08.242
You can see that sfg_dev has these privileges,
85

86
00:04:09.110 --> 00:04:12.541
but if we look at the prod schema, he doesn't
86

87
00:04:12.541 --> 00:04:16.252
and then, inversely for the sfg_prod_user,
87

88
00:04:16.252 --> 00:04:18.377
if we look at the schema privileges,
88

89
00:04:18.377 --> 00:04:21.544
he's got grant privileges on sfg_prod,
89

90
00:04:22.656 --> 00:04:24.834
the databases of sfg_prod, but of course,
90

91
00:04:24.834 --> 00:04:28.075
he doesn't have any privileges on the dev database so,
91

92
00:04:28.075 --> 00:04:30.813
this is kind of standard and going forward in the course,
92

93
00:04:30.813 --> 00:04:32.939
what we're going to do, is we're going to create a
93

94
00:04:32.939 --> 00:04:37.015
dev profile and set it up to use the sfg_dev_user
94

95
00:04:37.015 --> 00:04:40.656
and also, prod profile to emulate a production database
95

96
00:04:40.656 --> 00:04:42.416
and we'll set it up in the connection
96

97
00:04:42.416 --> 00:04:47.075
to use the sfg_prod database and our database schemes.
97

98
00:04:47.075 --> 00:04:51.420
Or I should say, our local MySQL database.
98

99
00:04:51.420 --> 00:04:53.955
Okay, I need to mend this just briefly here,
99

100
00:04:53.955 --> 00:04:55.670
especially if you're using Docker
100

101
00:04:55.670 --> 00:04:58.534
and this is kind of how MySQL works,
101

102
00:04:58.534 --> 00:05:01.452
it looks at a user account coming from localhost
102

103
00:05:01.452 --> 00:05:04.099
or from a specific IP address.
103

104
00:05:04.099 --> 00:05:06.812
Now, if you're running inside of a Docker container,
104

105
00:05:06.812 --> 00:05:09.061
you're going to run into a little bit of trouble here,
105

106
00:05:09.061 --> 00:05:12.037
if you do not set this up, so on line 12 there,
106

107
00:05:12.037 --> 00:05:14.545
12 and 13, I'm adding to the script,
107

108
00:05:14.545 --> 00:05:16.439
a percent sign for the host.
108

109
00:05:16.439 --> 00:05:20.197
What this is, is a wild card, means from any host,
109

110
00:05:20.197 --> 00:05:22.947
so, when you connect to the Docker container,
110

111
00:05:22.947 --> 00:05:25.269
you're going to be coming from a different IP address
111

112
00:05:25.269 --> 00:05:29.285
in the eyes of MySQL. So what we had to do here
112

113
00:05:29.285 --> 00:05:32.666
is add in, create that same service account
113

114
00:05:32.666 --> 00:05:34.450
with the wild card for the host
114

115
00:05:34.450 --> 00:05:37.467
and then down on line 24 to 31,
115

116
00:05:37.467 --> 00:05:40.060
we're also doing the wild card for the host
116

117
00:05:40.060 --> 00:05:42.834
to set up those grants and this will get you running,
117

118
00:05:42.834 --> 00:05:45.233
especially if you're running inside of a Docker container,
118

119
00:05:45.233 --> 00:05:48.593
so, just a quick amendment to the source code here,
119

120
00:05:48.593 --> 00:05:50.943
but I am going to check that in and you'll
120

121
00:05:50.943 --> 00:05:54.193
have that available for your reference.
