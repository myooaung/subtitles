WEBVTT
0
1
00:00:04.460 --> 00:00:09.960
Alright now. In this video, what we wanna do is create a new customer. We're
1

2
00:00:09.960 --> 00:00:13.469
gonna set up the RESTful endpoint for
that. Now, I've gone in and coded the
2

3
00:00:13.469 --> 00:00:18.449
infrastructure to support that. If we
come in take a look at the 
3

4
00:00:18.449 --> 00:00:22.830
CustomerService, you can see that I've added in a
createNewCustomer and that takes in a
4

5
00:00:22.830 --> 00:00:28.890
CustomerDTO. And now, if we trace us
through, I've added in a new method here
5

6
00:00:28.890 --> 00:00:33.059
on line 48, that is gonna create
the new customer. So what that does is it
6

7
00:00:33.059 --> 00:00:38.280
takes in a CustomerDTO object,
converts it to Customer, then saves
7

8
00:00:38.280 --> 00:00:43.260
it, and then takes that return value
converts it back to a DTO
8

9
00:00:43.260 --> 00:00:48.660
and calculates the URL based on the ID
and returns that DTO object to the
9

10
00:00:48.660 --> 00:00:52.649
controller. To do this, we did have to
change the Mapper. So this is a new
10

11
00:00:52.649 --> 00:00:57.000
implementation here to convert that on
over. And we're gonna click through to
11

12
00:00:57.000 --> 00:01:01.260
the mapper to take a look at that new
implementation. You can see, because I
12

13
00:01:01.260 --> 00:01:03.930
have the property names the same, I don't
have to do anything.
13

14
00:01:03.930 --> 00:01:09.180
So, MapStruct is gonna generate that for
us. And just a quick tip, if you ever have
14

15
00:01:09.180 --> 00:01:13.380
problems where as saying it's not found
there, go in here and do a compile step
15

16
00:01:13.380 --> 00:01:17.070
and that will generate that class.
Sometimes I'm noticing the test. If you
16

17
00:01:17.070 --> 00:01:21.830
write a test looking for that right away
you don't may not get it right away. So
17

18
00:01:21.830 --> 00:01:26.159
expect it to work but sometimes it does
trip up the id, being that class
18

19
00:01:26.159 --> 00:01:32.369
is getting generated at compile time. So
now, that's the mapper and that's
19

20
00:01:32.369 --> 00:01:37.590
the service implementation. So the
service doesn't change. Now I've added in
20

21
00:01:37.590 --> 00:01:43.020
a couple things here to the test. So we
created a new test that we're doing a
21

22
00:01:43.020 --> 00:01:48.119
createNewCustomer that goes out. And we
are mimicking the repository action.
22

23
00:01:48.119 --> 00:01:53.159
There was Mockito there, on line 88 to
return back a saved Customer object, and
23

24
00:01:53.159 --> 00:01:59.939
then we go through and test make sure
that we get the proper URL value. Next up
24

25
00:01:59.939 --> 00:02:04.710
is we have our CustomerTest. I'm
doing a createNewCustomer and this is
25

26
00:02:04.710 --> 00:02:10.140
on the controller. So we're gonna test
that. But I have not implemented it yet.
26

27
00:02:10.140 --> 00:02:14.850
And one thing that I did add here is
that we wanna convert to a JSON object,
27

28
00:02:14.850 --> 00:02:21.240
and I create a new abstract class here,
that we can share amongst our other
28

29
00:02:21.240 --> 00:02:25.080
controller tests. So this is AbstractRestControllerTest and I'm adding in a
29

30
00:02:25.080 --> 00:02:29.880
helper there, where I can pass in an
object and we're gonna use Jackson to
30

31
00:02:29.880 --> 00:02:33.750
return back the JSON String because
that's what we wanna be doing here in
31

32
00:02:33.750 --> 00:02:38.730
our controller test is that we're gonna
take the CustomerDTO
32

33
00:02:38.730 --> 00:02:44.910
object and generate a property of that
and get that JSON string. So right here
33

34
00:02:44.910 --> 00:02:51.180
on line 98, it's where we're generating
the JSON body that we will be doing a
34

35
00:02:51.180 --> 00:02:56.190
put to create that new object. So just as
a quick refresher, let's take a look at
35

36
00:02:56.190 --> 00:03:00.840
at the post here. So we are gonna do a
post. Actually that's an error on my
36

37
00:03:00.840 --> 00:03:09.330
test. We want that to be a post rather
than a put. So a little correction there
37

38
00:03:09.330 --> 00:03:13.110
on my test but it's going to fail either
way because we wanna do a post to
38

39
00:03:13.110 --> 00:03:18.840
create a new customer. Now if I run my
test, you can see that it's going to fail
39

40
00:03:18.840 --> 00:03:25.440
because I have not implemented that
method on the controller yet. So you can
40

41
00:03:25.440 --> 00:03:30.570
see that that did fail it's returning
back a 405 error. We're expecting it 201
41

42
00:03:30.570 --> 00:03:40.320
CREATED. So let's go ahead and implement
that right now. Now, we're gonna
42

43
00:03:40.320 --> 00:03:43.790
use the @PostMapping annotation.
43

44
00:03:49.730 --> 00:03:57.570
You know, we're not gonna take in any
PathVariable on this one. Now remember,
44

45
00:03:57.570 --> 00:04:02.150
we're gonna return back the created DTO.
45

46
00:04:06.290 --> 00:04:12.830
And in this case, we are expecting to get
the DTO bound.
46

47
00:04:23.130 --> 00:04:27.720
And now one thing that I need to
point out here is that we want this to
47

48
00:04:27.720 --> 00:04:32.730
be bound automatically. To do this,
what we're gonna use is a new
48

49
00:04:32.730 --> 00:04:41.070
annotation that we haven't seen before,
and that is called @RequestBody. As I was
49

50
00:04:41.070 --> 00:04:46.650
gonna tell Spring MVC to look at the
body of the request, and parse it, and try
50

51
00:04:46.650 --> 00:04:50.100
to create a CustomerDTO out of that. So
the Spring Framework is gonna
51

52
00:04:50.100 --> 00:04:59.070
handle that for us. So let's go and run
their tests now. And this should work. Try
52

53
00:04:59.070 --> 00:05:09.660
that one more time, and we're seeing that
we're not getting a customer_url.
53

54
00:05:09.660 --> 00:05:18.510
So let's go ahead and debug that and see
what's wrong there. I don't think I can
54

55
00:05:18.510 --> 00:05:27.990
hit a debugger point right there, but
let's take a look. So that is not working.
55

56
00:05:27.990 --> 00:05:30.960
I'm gonna pause this and I'll show you
how we can get a hold of that and take a
56

57
00:05:30.960 --> 00:05:36.030
closer look at it. Okay I had a feeling
that's what was let me stop this and
57

58
00:05:36.030 --> 00:05:42.500
show you what I've done. Close this guy.
And I comment out our original test and
58

59
00:05:42.500 --> 00:05:46.560
what we wanna do is we're doing the
andExpects, and those are gonna toss
59

60
00:05:46.560 --> 00:05:51.630
out an error. So there's no good way to
put a debug point on this. So what I've
60

61
00:05:51.630 --> 00:05:55.980
done is I've done it andReturn().getResponse.getContentAsString() so
61

62
00:05:55.980 --> 00:05:59.790
that we can now see this. So let's go
ahead and run this in the debugger.
62

63
00:05:59.790 --> 00:06:06.930
I'll show you what's happening here. So
the response is coming back and rather
63

64
00:06:06.930 --> 00:06:12.840
than customer_url we're
getting customerUrl. So it's
64

65
00:06:12.840 --> 00:06:21.920
customerUrl. So what we can do
is come over here to our CustomerDTO.
65

66
00:06:21.920 --> 00:06:24.920
Now this..
66

67
00:06:28.940 --> 00:06:35.910
We can just override that. So now, we get
customer_url. If I restart
67

68
00:06:35.910 --> 00:06:44.520
that, we can see now that that property
has changed a customer_url. So let's go
68

69
00:06:44.520 --> 00:06:58.610
ahead and stop this. Uncomment that.
Comment this out. Let's get rid of that.
69

70
00:07:00.680 --> 00:07:06.360
Should have all our tests passing. So
that is good and actually let's go in
70

71
00:07:06.360 --> 00:07:09.830
and run this right now.
71

72
00:07:10.190 --> 00:07:17.190
So we'll start it up in Spring Boot.
I'm gonna come over here to the your
72

73
00:07:17.190 --> 00:07:25.350
documentation. Grab this and see Spring
Boot is up and running. We'll go over to
73

74
00:07:25.350 --> 00:07:33.090
postman. And now, we wanna do a post and
rather than form data, what we wanna do
74

75
00:07:33.090 --> 00:07:41.910
is raw and we can just say paste. And we wanna say JSON, and we'll go
75

76
00:07:41.910 --> 00:07:50.190
ahead and send that. No. That's because I
had that on there. Let's try this one
76

77
00:07:50.190 --> 00:07:52.400
more time.
77

78
00:07:55.710 --> 00:08:01.770
I'm gonna try to restart this just in
case something where it's got going on.
78

79
00:08:02.970 --> 00:08:13.690
I got POST, api/v1/customers. 
I've got a pause this real quick. Okay,
79

80
00:08:13.690 --> 00:08:17.260
I went in and found out what the problem
was. So I don't have that trailing
80

81
00:08:17.260 --> 00:08:23.230
slash and Freddy3 there. We'll get a Not
Found, but if I put that trailing slash
81

82
00:08:23.230 --> 00:08:30.460
there, it goes okay. So what we can do is
we can make a little tweak our mapping
82

83
00:08:30.460 --> 00:08:38.860
here. I'll show you how to do that. I'm
just gonna copy this. We'll get rid of
83

84
00:08:38.860 --> 00:08:41.880
that trailing slash.
84

85
00:08:42.520 --> 00:08:48.660
And now, let's
our get id as well. Let's go ahead
85

86
00:08:48.660 --> 00:09:05.759
and restart this. Oop.. it's not there,
Come over here, so can send them
86

87
00:09:05.759 --> 00:09:12.930
that way, That works. Make sure that we
can get rid of that slash. And that works
87

88
00:09:12.930 --> 00:09:18.689
as well. So it just makes it a little bit
more user friendly to be able to accept
88

89
00:09:18.689 --> 00:09:23.819
that with or without the slash. That's a
pretty finicky thing if you have your
89

90
00:09:23.819 --> 00:09:28.379
API set up like that. Let's come in
here and make sure that all my tests do
90

91
00:09:28.379 --> 00:09:36.149
continue passing because I did make that
small change. You know we can see that my
91

92
00:09:36.149 --> 00:09:42.629
tests are passing, I believe. Yep all
tests passed, so that is complete. See
92

93
00:09:42.629 --> 00:09:47.790
that completes the demonstration of how
to create a new Customer. So now, the next
93

94
00:09:47.790 --> 00:09:52.220
thing we're gonna do is look at
updating an existing Customer.
