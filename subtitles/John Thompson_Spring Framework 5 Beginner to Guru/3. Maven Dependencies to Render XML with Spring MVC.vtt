WEBVTT
0
1
00:00:04.250 --> 00:00:08.880
Alright! Let's go ahead and take a look
at setting things up to return back XML
1

2
00:00:08.880 --> 00:00:14.400
here. Just as a recap, I've jumped
back over to the Spring MVC REST
2

3
00:00:14.400 --> 00:00:18.690
application, that we wrote earlier in the
course. I've created a new branch. I'll be
3

4
00:00:18.690 --> 00:00:23.039
checking in at the end of this lesson
called XML Maven. You can see that in the
4

5
00:00:23.039 --> 00:00:26.640
bottom right hand corner of the branch, I
am working on right now.
5

6
00:00:26.640 --> 00:00:30.750
So, just just to recap, we're going to be
taking just a quick look at and get a
6

7
00:00:30.750 --> 00:00:36.239
list of customer. So we want to exercise
this get mapping against api/v1/
7

8
00:00:36.239 --> 00:00:40.710
customers. So, I do have Postman up.
Actually, I need to start Spring Boot
8

9
00:00:40.710 --> 00:00:42.950
first. So,
9

10
00:00:43.030 --> 00:00:46.320
let's go ahead and bring up Spring Boot.
10

11
00:00:48.160 --> 00:00:53.500
She's up and running, which we are up. And
now, we're going to go ahead and send
11

12
00:00:53.500 --> 00:01:00.250
that request. You can see, I am going to
a specify content type. So, I am
12

13
00:01:00.250 --> 00:01:04.059
doing. I'll do it.
Be consistent to do that application/xml
13

14
00:01:04.059 --> 00:01:06.269
there.
14

15
00:01:10.260 --> 00:01:14.310
So, just go ahead and double-check that.
Now, I did speak a little bit in
15

16
00:01:14.310 --> 00:01:20.010
the last video there, a Content-type.
That is on a request that's going in. So,
16

17
00:01:20.010 --> 00:01:22.680
it's the header that you want to be
citing for that, so that's for the server
17

18
00:01:22.680 --> 00:01:27.570
to understand, and then, Accept as the
what's really going to be driving the
18

19
00:01:27.570 --> 00:01:30.960
view. So, I did speak there in the last
video, as we're talking about how that
19

20
00:01:30.960 --> 00:01:36.030
view is being to determine. So, the
content type is how the post is going to
20

21
00:01:36.030 --> 00:01:42.210
be for posting or doing a PUT on how to
interpret that body of the content type
21

22
00:01:42.210 --> 00:01:46.350
of that body, and then, Accept is what the
client is going to accept back. So here, I
22

23
00:01:46.350 --> 00:01:51.720
am saying I want to receive back
application XML, so let's go ahead and
23

24
00:01:51.720 --> 00:01:56.160
send this. Anyway, we can see that I'm
getting back a 406 not
24

25
00:01:56.160 --> 00:02:00.060
acceptable error. So, that is coming back
from the server, and we can even see down
25

26
00:02:00.060 --> 00:02:03.660
at the bottom here, we are getting an
exception saying that we could not find
26

27
00:02:03.660 --> 00:02:09.090
an acceptable representation. So, that is
Spring saying, 'Hey, they asked for some
27

28
00:02:09.090 --> 00:02:13.080
type of media type and I didn't have any
way to provide that to the client.' So,
28

29
00:02:13.080 --> 00:02:17.490
important aspect there. Now, I want to
bring up the Spring documentation real
29

30
00:02:17.490 --> 00:02:23.430
quick. I got the page right here. Now,
this is out of the Spring Docs for
30

31
00:02:23.430 --> 00:02:28.530
Spring Boot M2 and there's two
dependencies that they recommend. So, you
31

32
00:02:28.530 --> 00:02:34.290
can get away with just the Jackson data
format XML. So again, this is going to be
32

33
00:02:34.290 --> 00:02:38.880
extension the Jackson JSON library, so
there's another library from same guys
33

34
00:02:38.880 --> 00:02:45.090
that wrote Jackson for JSON. So, there
are several different options here. But,
34

35
00:02:45.090 --> 00:02:49.470
this is the recommended approach by the
Spring community right now. And then, they
35

36
00:02:49.470 --> 00:02:57.360
are also recommending Woodstock's. So,
that as an XML parser, or a library that
36

37
00:02:57.360 --> 00:03:03.150
we can you utilize, and by default, 
the JAXB is used in the JDK and
37

38
00:03:03.150 --> 00:03:09.239
they're saying this is a much faster and
it has some nice handling for us. So, I'm
38

39
00:03:09.239 --> 00:03:14.010
going to include that as well, and then,
down there, we're getting into XML root
39

40
00:03:14.010 --> 00:03:17.850
elements. I am not going to handle that
right now. I'll just show you a default
40

41
00:03:17.850 --> 00:03:23.740
without doing that. We'll get into that in
upcoming video. Now, let's come back over
41

42
00:03:23.740 --> 00:03:31.680
here and come we're here to Maven POM.
I do have these commented out. So I'm going to
42

43
00:03:34.450 --> 00:03:39.980
remove those, and and you can see, it moved
by a little quick that Maven did
43

44
00:03:39.980 --> 00:03:44.720
automatically refresh or IntelliJ
refresh the dependencies. So now, these
44

45
00:03:44.720 --> 00:03:50.060
are going to be on the class path. But, I
am going to have to restart a Spring
45

46
00:03:50.060 --> 00:03:55.579
Boot, and just again, I added in these two
dependencies, so that's the only change
46

47
00:03:55.579 --> 00:04:00.049
that I'm making. But because now, I'm
adding those in, Spring Boot is
47

48
00:04:00.049 --> 00:04:05.450
automatically going to configure that
XML view for us. So now, when I come over
48

49
00:04:05.450 --> 00:04:12.799
here and do a send, we can see that I get
my CustomerListDTO. Well, that has
49

50
00:04:12.799 --> 00:04:17.209
customers and then the various customer
properties, so we have Michael Westen, Sam
50

51
00:04:17.209 --> 00:04:24.840
Axe again there. Now, if I come here
and say application/json, you can see
51

52
00:04:24.840 --> 00:04:28.410
that I still get the JSON
representation. So, that is a very
52

53
00:04:28.410 --> 00:04:34.259
convenient thing to do. When I am
designing a REST API myself, it doesn't
53

54
00:04:34.259 --> 00:04:39.750
cost a lot to provide the XML capability.
It does allow your client, your customers
54

55
00:04:39.750 --> 00:04:44.009
to determine - do they want to be working
with JSON? Or, do they want to be working
55

56
00:04:44.009 --> 00:04:49.380
with XML? There's a lot of opinions on
which is better. I'm not going to fight
56

57
00:04:49.380 --> 00:04:56.009
that battle. You can see how easy it is
to give your clients an option of which
57

58
00:04:56.009 --> 00:05:01.949
to utilize or which to consume. So, you're
making your REST API here. I'm very
58

59
00:05:01.949 --> 00:05:05.639
open to your client. You're being very
convenient for your client to consume
59

60
00:05:05.639 --> 00:05:13.550
your REST API. So, if they want JSON, they
do that. They do just XML.
60

61
00:05:13.550 --> 00:05:19.730
I can come in and change the accept, and
we can see that, now, we are getting XML
61

62
00:05:19.730 --> 00:05:25.330
or JSON being returned back by Spring
MVC.
62

63
00:05:28.360 --> 00:05:34.840
Okay, I broke the build, so to speak, and I
went ahead and I committed that last one.
63

64
00:05:34.840 --> 00:05:40.000
You can see, I got the meme up here
of, 'I like to commit without running the
64

65
00:05:40.000 --> 00:05:45.789
test and I too like to live dangerously',
which is exactly what I did, and you can
65

66
00:05:45.789 --> 00:05:51.159
see here, I have up. CircleCI caught it
and let me know, and this is why we do
66

67
00:05:51.159 --> 00:05:56.050
continuous integration testing. I did
break the built in. I am absolutely
67

68
00:05:56.050 --> 00:06:00.490
guilty of not running my unit test on
when I did this. Let's go ahead and
68

69
00:06:00.490 --> 00:06:04.599
take a look and see what's happening
here. So, I'm going to get rid of this email
69

70
00:06:04.599 --> 00:06:09.950
and come back in. Let's go ahead and
run our test.
70

71
00:06:09.950 --> 00:06:14.620
Show you what's failing. It's a pretty
simple fix.
71

72
00:06:18.910 --> 00:06:23.920
You can see that we are going to get
some failures here, and we can see that
72

73
00:06:23.920 --> 00:06:29.490
as the controllers that are failing. So,
let's go ahead and take a look at this.
73

74
00:06:30.380 --> 00:06:37.940
We can see that we are getting no
value there, and what's happened is, we
74

75
00:06:37.940 --> 00:06:43.220
only had the one view on there. It
looks like it's getting the wrong one.
75

76
00:06:43.220 --> 00:06:47.780
We're not specifying what to return. So,
what we need to do is come in here to
76

77
00:06:47.780 --> 00:06:51.610
MockMvc.
Sakes up.
77

78
00:06:51.610 --> 00:06:57.260
APPLICATION_JSON. We are going to need
to do that anywhere that we are asking
78

79
00:06:57.260 --> 00:07:05.590
for it. Let's go ahead. Add that there.
So, those two.
79

80
00:07:06.780 --> 00:07:12.860
Everything that we've set up is for
JSON and not XML, specifically.
80

81
00:07:13.720 --> 00:07:17.910
I'm just kind of eyeballing it right
now.
81

82
00:07:19.990 --> 00:07:23.820
I don't think we need to add a delete.
82

83
00:07:24.450 --> 00:07:29.800
Get we will. So, let's go ahead. In
case you don't know, this one here with
83

84
00:07:29.800 --> 00:07:32.920
the little exclamation point, you can see
rerun the failed test. So, let's see if we
84

85
00:07:32.920 --> 00:07:35.580
got them all.
85

86
00:07:37.670 --> 00:07:40.030
And I missed one.
86

87
00:07:40.550 --> 00:07:46.849
Sorry about that.
Make sure that that is in fact passing
87

88
00:07:46.849 --> 00:07:55.189
now. And that is now all in the green. 
I am going to run this. I always like to
88

89
00:07:55.189 --> 00:07:58.849
just double check here, especially after
I broke the build. Fortunately, it's my
89

90
00:07:58.849 --> 00:08:03.770
own project, my own repo, so I'm not going to
have to buy anybody beers tonight. Now we
90

91
00:08:03.770 --> 00:08:10.270
can see that our tests are almost done.
35 of 37.
91

92
00:08:10.789 --> 00:08:15.289
All our tests have passed. So now, I
check this in the build will be green
92

93
00:08:15.289 --> 00:08:20.629
again. So, that was my mistake of breaking
the build, but it's a pretty simple change
93

94
00:08:20.629 --> 00:08:24.889
there. I did not think it would have any
impact, but effectively, what was
94

95
00:08:24.889 --> 00:08:28.969
happening is Spring MVC was making a
guess and it might have been returning back
95

96
00:08:28.969 --> 00:08:33.709
XML by default. Could have been returning
back something completely different, but
96

97
00:08:33.709 --> 00:08:37.699
it didn't look to too deep into the
nature of it. But now, because we have
97

98
00:08:37.699 --> 00:08:43.099
JSON and XML capabilities, it's
important for our requests to be
98

99
00:08:43.099 --> 00:08:49.639
specifying the type that it wants. So, I
will commit these into GitHub and you
99

100
00:08:49.639 --> 00:08:54.199
will have the updated test on the
completed branch for this module of the
100

101
00:08:54.199 --> 00:08:56.230
course.
