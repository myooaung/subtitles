WEBVTT
0
1
00:00:04.549 --> 00:00:08.940
Alright. I got keynote up here and
let's go ahead and review the assignment
1

2
00:00:08.940 --> 00:00:13.769
just quickly. Basically, we're gonna set
up the whole back end for our customer.
2

3
00:00:13.769 --> 00:00:17.940
So we're gonna create the Customer
Domain, DTO object, the Repository, the Mapper
3

4
00:00:17.940 --> 00:00:22.859
or the Service, and of course, the
Controller. Now, I've gone in and created
4

5
00:00:22.859 --> 00:00:26.039
all this, except for the CustomerController. I'm gonna walk through a
5

6
00:00:26.039 --> 00:00:30.179
little tester in the development on that.
I hope you are doing the same. And of
6

7
00:00:30.179 --> 00:00:33.570
course, we wanna do a Bootstrap class
and initialize that data. So I got most
7

8
00:00:33.570 --> 00:00:36.510
of the backend implemented. I'm just
gonna do a code review. We'll step
8

9
00:00:36.510 --> 00:00:39.480
through that and then we'll get into a
little live coding of the Controller.
9

10
00:00:39.480 --> 00:00:44.730
I'll toggle over to IntelliJ now. And you
can see here, I've set up a Customer
10

11
00:00:44.730 --> 00:00:51.329
domain. So we do have Customer. It does have
the JPA @Id annotation for the id value.
11

12
00:00:51.329 --> 00:00:54.390
So it's gonna get generated by the
database. And we only have the two
12

13
00:00:54.390 --> 00:00:58.649
properties - firstname, lastname. So, let's
go ahead and take a another look at our
13

14
00:00:58.649 --> 00:01:03.480
API spec. So we just have firstname, lastname. The customer_url, that is a
14

15
00:01:03.480 --> 00:01:08.280
generated value. So that it's not gonna
exist on the domain. Although, I'm sure
15

16
00:01:08.280 --> 00:01:11.159
some people would want to code it that
way. We don't wanna be storing the
16

17
00:01:11.159 --> 00:01:15.420
URL and the database when we're gonna
be generating that on the fly. Depending
17

18
00:01:15.420 --> 00:01:18.240
on where, of course, we're gonna be
deploying it. So that URL is something
18

19
00:01:18.240 --> 00:01:21.659
that could change. It's not specific to
that customer. It's specific to the
19

20
00:01:21.659 --> 00:01:26.130
deployment of your web application. 
Alright, so let's see here. Next up, we have
20

21
00:01:26.130 --> 00:01:31.140
the repository. So far, I haven't had to
implement anything. I'm using the 
21

22
00:01:31.140 --> 00:01:35.820
JpaRepository as an extension. That gives us
paging and stuff. We'll get into that in
22

23
00:01:35.820 --> 00:01:43.070
a future video. And let's see here. What
else was on our list? So with the DTO,
23

24
00:01:43.070 --> 00:01:51.420
repository. Looked at the repository. So I
set up the CustomerDTO, so firstname
24

25
00:01:51.420 --> 00:01:56.509
lastname, and now, we're doing a customerUrl, and then, we also have the list. And
25

26
00:01:56.509 --> 00:02:01.740
here, I also add convenience. I no args,
all args constructor and we only have the
26

27
00:02:01.740 --> 00:02:05.880
one property List of CustomerDTO
objects. And that goes to the property of
27

28
00:02:05.880 --> 00:02:13.020
Customers, which is going to be directly
as our list value here. So that property
28

29
00:02:13.020 --> 00:02:15.800
will get
display down the list value in our API.
29

30
00:02:15.800 --> 00:02:20.970
Then, we have our Bootstrap class.
I've gone in and added this. Now, in these
30

31
00:02:20.970 --> 00:02:26.640
classes in the Bootstrap classes, from
experience, as you get more and more data,
31

32
00:02:26.640 --> 00:02:31.650
you could do one class per type. But
chances are, as you get a more complex
32

33
00:02:31.650 --> 00:02:34.980
data model, you're gonna want to
interact with that. So you're gonna
33

34
00:02:34.980 --> 00:02:38.280
load it in a specific sequence. So if you
do it in different classes, you don't
34

35
00:02:38.280 --> 00:02:42.030
have any control over that sequence. But let me show you a trick inside of
35

36
00:02:42.030 --> 00:02:47.220
IntelliJ. Clean up a little code there.
Now, what we can do here, I'd still have
36

37
00:02:47.220 --> 00:02:51.450
the categories, I created a new method
for that. We can come in here. Go to
37

38
00:02:51.450 --> 00:03:01.320
Refactor and Extract. We wanna Extract
that type of method. We'll call that
38

39
00:03:01.320 --> 00:03:05.550
loadCategories, and it can be private. We
don't need that.
39

40
00:03:05.550 --> 00:03:12.690
And now we can see that IntelliJ did the
refactoring and we have this whole new
40

41
00:03:12.690 --> 00:03:18.090
loadCategories. So it was everything I
highlighted and it just slurped that out
41

42
00:03:18.090 --> 00:03:21.750
into a method for us. Makes it a little
cleaner because we're gonna get the run
42

43
00:03:21.750 --> 00:03:27.270
method here, and we can run that in any
sequence. I'm just gonna preserve our
43

44
00:03:27.270 --> 00:03:33.810
original sequence, like so. We'll keep
that going. So that's our Bootstrap class.
44

45
00:03:33.810 --> 00:03:40.140
Now, created a Mapper. So we did Mapper
and we are doing the instance there and
45

46
00:03:40.140 --> 00:03:43.320
we have one method there, customerToCustomerDTO.
46

47
00:03:43.320 --> 00:03:46.740
Let's come over here and we'll do a
compile, and we'll show you the
47

48
00:03:46.740 --> 00:03:50.580
implementation that MapStruct is gonna create of that. So I've gone through
48

49
00:03:50.580 --> 00:03:58.080
the compiled step, and we can look at the
generated-sources. So now, let's look at
49

50
00:03:58.080 --> 00:04:01.650
the CustomerMapperImpl, so we can see
that it's mapping the firstname, lastname
50

51
00:04:01.650 --> 00:04:05.880
and that is going by properties.
I'm able to do that without getting into
51

52
00:04:05.880 --> 00:04:15.139
configuration because my property names
are the same. Then next up is our service.
52

53
00:04:15.139 --> 00:04:20.940
So I am coding to interface so we have
getAllCustomers, getCustomerById, and
53

54
00:04:20.940 --> 00:04:27.240
here's our implementation. This looks a
lot like what we did before. So almost
54

55
00:04:27.240 --> 00:04:32.850
the same, I am using Java 8 streams
here. And now, in here, I am setting up a
55

56
00:04:32.850 --> 00:04:38.699
method here, and we are taking it. We
doing a conversion to CustomerDTO and
56

57
00:04:38.699 --> 00:04:43.380
then we're gonna enhance it with this
API string and the id value. Now, I'd like
57

58
00:04:43.380 --> 00:04:46.590
to do something a little more elegant
here. I will do a refactoring in the
58

59
00:04:46.590 --> 00:04:49.620
future of the course but this is good
enough to get us up and running. And then
59

60
00:04:49.620 --> 00:04:55.620
also here, I am getting the CustomerDTO
when I do a by id and I'm just tossing
60

61
00:04:55.620 --> 00:04:59.130
an exception here, if it's not found.
Obviously, we wanna do something a
61

62
00:04:59.130 --> 00:05:02.910
little more elegant than just throw an
exception like that. We probably wanna
62

63
00:05:02.910 --> 00:05:08.849
create a custom NotFoundException for
our use to turn this into a 404 error. As
63

64
00:05:08.849 --> 00:05:12.389
right now, to be a 500 error. So this
is bad. It's something else that
64

65
00:05:12.389 --> 00:05:17.430
we're gonna refactor. But again, good
enough for now. And then finally,
65

66
00:05:17.430 --> 00:05:27.449
let's take a look at the controller
itself. We can hide Maven. So now,
66

67
00:05:27.449 --> 00:05:35.220
I just have the RequestMapping here, and
what we can do, let's do this, it's a
67

68
00:05:35.220 --> 00:05:39.419
little trick that I like to use. I come
down here and let's take a look at the
68

69
00:05:39.419 --> 00:05:44.729
CategoryController. Now, the CategoryController has almost exact same methods
69

70
00:05:44.729 --> 00:05:50.370
that we wanna do but we are gonna
do this for the Customer. And when I'm
70

71
00:05:50.370 --> 00:05:53.070
learning something new and I have
something that's cookie cutter like this,
71

72
00:05:53.070 --> 00:05:57.360
I like to set up my screen this way so I
can come here. I'm gonna go ahead and
72

73
00:05:57.360 --> 00:06:06.930
live code this. We wanna respond
with ResponseEntity. This time, it's
73

74
00:06:06.930 --> 00:06:15.370
gonna be CustomerDTO, that's
getting returned. And that's not
74

75
00:06:15.370 --> 00:06:20.380
gonna take in anything. This is
just gonna be on the get value. And here,
75

76
00:06:20.380 --> 00:06:27.270
we can say, return new ResponseEntity.
76

77
00:06:32.370 --> 00:06:44.310
That's your customerService.getAllCustomers(). I'm gonna come up there.
77

78
00:06:59.150 --> 00:07:04.010
My mistake here. So this is actually a
ListDTO, that was my mistake.
78

79
00:07:04.010 --> 00:07:20.510
Oh my mistake.
I got the parenthesis there. I'm creating new
79

80
00:07:20.510 --> 00:07:27.790
ResponseEntity so that should be happy
now, and let's go ahead and run my test.
80

81
00:07:31.419 --> 00:07:37.310
You see my list is passing now, but my
getById is not. So let's go implement
81

82
00:07:37.310 --> 00:07:49.790
that method as well. And now, we wanna
get it by the id value. So we're gonna
82

83
00:07:49.790 --> 00:07:58.100
say a @PathVariable now. We also need to
set up the mapping there so you can see
83

84
00:07:58.100 --> 00:08:08.030
down here that just as a reminder I got
that up still. So if we do this 
84

85
00:08:08.030 --> 00:08:17.330
customerService.getCustomerById(id), you can
see how simple that is to implement. Let's go
85

86
00:08:17.330 --> 00:08:23.960
ahead and run this. We've got an
error there. Let's take a closer look at
86

87
00:08:23.960 --> 00:08:34.010
that. So we are getting a 404 error. I'm
gonna pause this and debug this real
87

88
00:08:34.010 --> 00:08:39.919
quick. Let's see what I have. I have the
v1 here but don't have the v1 there. So
88

89
00:08:39.919 --> 00:08:47.800
v1. So I missed that mapping, and let's
take a look at my controller itself.
89

90
00:08:47.800 --> 00:08:55.520
api/v1/customers. So let's go
ahead and run this again. getCustomerById
90

91
00:08:55.520 --> 00:08:58.450
is still failing.
91

92
00:09:03.879 --> 00:09:09.709
I'm gonna pause this again. I thought it
was the v1 but I was missing. But it's probably
92

93
00:09:09.709 --> 00:09:16.240
my mistake here, and that is... I miss the
little squiggles.
93

94
00:09:16.240 --> 00:09:21.559
So without the squiggly side, it's just a
String value. Now I'm saying that that is
94

95
00:09:21.559 --> 00:09:26.749
a property so that's gonna map out. So
now, let's go ahead and run my test again.
95

96
00:09:26.749 --> 00:09:31.550
And I actually had a mistake here on the
test that was getByCategory. So
96

97
00:09:31.550 --> 00:09:35.660
category customers. Sometimes I get them.
Start using them with saying when you
97

98
00:09:35.660 --> 00:09:38.899
start working with similar terminology
there. Let's go ahead and run these. So
98

99
00:09:38.899 --> 00:09:44.660
now, both my tests are passing so that is
up and alive. Let's go ahead and run this
99

100
00:09:44.660 --> 00:09:50.990
inside of Spring Boot without it
starting up. Let's toggle over to
100

101
00:09:50.990 --> 00:10:00.639
Postman. I'm gonna resize this a little
bit. You can see that is up and working
101

102
00:10:00.639 --> 00:10:10.040
and there's Michale Weston and Sam Axe. 
Let's go ahead and get by 2. Check it's
102

103
00:10:10.040 --> 00:10:15.079
Sam Axe and so our API is up and working.
So that is everything that we needed to
103

104
00:10:15.079 --> 00:10:19.779
do to implement the GET for the
customers.
