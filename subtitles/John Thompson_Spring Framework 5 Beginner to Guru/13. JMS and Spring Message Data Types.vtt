WEBVTT
0
1
00:00:04.069 --> 00:00:09.690
In this video, I wanna reiterate and
clarify a little bit more about the use
1

2
00:00:09.690 --> 00:00:16.260
of the message type. So, up on the screen
I have the JMS message. So, there's a
2

3
00:00:16.260 --> 00:00:20.070
lot of Java doc to this but let me collapse
out in the Java doc.
3

4
00:00:20.070 --> 00:00:27.180
And, we can see this lives in the package
in javax.jms. This is the Java
4

5
00:00:27.180 --> 00:00:31.679
standard. This is the standard API.
And remember, ActiveMQ is an
5

6
00:00:31.679 --> 00:00:37.170
implementation of that. And it can get a
little confusing as to the object types
6

7
00:00:37.170 --> 00:00:40.739
that are in play, especially when we
start mixing in Spring. In the previous
7

8
00:00:40.739 --> 00:00:44.550
video, you saw me, you may have noticed I
stumbled a little bit when I was setting up
8

9
00:00:44.550 --> 00:00:50.100
the getting the message to reply queue.
And that's because I wrote an example
9

10
00:00:50.100 --> 00:00:54.809
previously and I used the Spring message
type rather than the JMS message type and
10

11
00:00:54.809 --> 00:01:00.059
the API had some minor differences. So, I
decided to add in this video to clarify
11

12
00:01:00.059 --> 00:01:05.250
it because somebody new to JMS
messaging could easily make a
12

13
00:01:05.250 --> 00:01:08.850
similar mistake and get very confused
by this. So, we talked about the different
13

14
00:01:08.850 --> 00:01:13.229
JMS message types that we can send, the
bytes message and so on. And we've been
14

15
00:01:13.229 --> 00:01:18.509
using a text message. These are all
implementations of this interface for
15

16
00:01:18.509 --> 00:01:22.110
message. So, there are different
implementations of that. Then, we have the
16

17
00:01:22.110 --> 00:01:27.450
ActiveMQMessage class. And we can see
if I come in here and look at that and
17

18
00:01:27.450 --> 00:01:34.680
that is implementing that interface from
the javax.jms message. So, it's implementing
18

19
00:01:34.680 --> 00:01:40.409
an interface that we're just looking at
out of the Java API. So, that's how
19

20
00:01:40.409 --> 00:01:44.670
this is working. And then ActiveMQ of
course is going to have implementations
20

21
00:01:44.670 --> 00:01:49.680
for the various message types. So, this is
a generic message here. And then it will
21

22
00:01:49.680 --> 00:01:57.119
have an implementation for each one. And
then finally, what we have here is Spring
22

23
00:01:57.119 --> 00:02:02.880
Framework has a abstraction. So, it has
its own. I was, the Package
23

24
00:02:02.880 --> 00:02:06.960
org.springframework.messaging and then a message payload.
24

25
00:02:06.960 --> 00:02:13.260
And you can use this and that. I think I might have made them use interchangeably a little bit through out here.
25

26
00:02:13.560 --> 00:02:17.910
The message builder is definitely gonna be using this. And when you are
26

27
00:02:17.910 --> 00:02:23.700
developing with Spring Framework, I tend
to favor using this implementation.
27

28
00:02:23.700 --> 00:02:29.700
You can favor. You can also use JMS. What
this is going to allow you to do is when
28

29
00:02:29.700 --> 00:02:32.190
you get further into the Spring
Framework and building a larger
29

30
00:02:32.190 --> 00:02:37.800
application. This is abstracting the JMS
portion of the code. So, if you decide to
30

31
00:02:37.800 --> 00:02:42.360
switch to a different messaging provider, it'll be a little less painful. So, it's
31

32
00:02:42.360 --> 00:02:46.319
kind of abstracting that out.
So, this is kind of what I tend to favor.
32

33
00:02:46.319 --> 00:02:50.780
This section was focused on JMS. I may
have switched back and forth. But overall
33

34
00:02:50.780 --> 00:02:55.260
this is the message type. You'll see this
used again and again throughout the
34

35
00:02:55.260 --> 00:02:59.549
Spring Framework, especially if you start
getting into tooling on a Spring
35

36
00:02:59.549 --> 00:03:03.810
Integration, which I'm a big fan of. I
really like Spring Integration. That's
36

37
00:03:03.810 --> 00:03:08.069
outside the scope of this course. But
Spring Integration does a really really
37

38
00:03:08.069 --> 00:03:14.310
good job of abstracting out the entire
messaging layer. So, you can easily swap
38

39
00:03:14.310 --> 00:03:20.820
from JMS to Kafka to Rabbit and it's
very very abstracted. So, at the end of
39

40
00:03:20.820 --> 00:03:25.410
the day when you are working with
messages themselves, the messaging
40

41
00:03:25.410 --> 00:03:29.579
implementation doesn't matter to you as
the developer. So, but this section was
41

42
00:03:29.579 --> 00:03:32.660
specifically on JMS so we'll get a little
bit closer to the actual JMS
42

43
00:03:32.660 --> 00:03:39.120
implementation. So, what I wanna show
you here also in this, I tweaked the
43

44
00:03:39.120 --> 00:03:44.760
hello world message listener. You can
see here in this first message that is
44

45
00:03:44.760 --> 00:03:52.350
the JMS message. And then here, I brought
in the Spring Framework message and
45

46
00:03:52.350 --> 00:03:56.549
brought it up in the debugger. So, I got
the break point up and I wanted to
46

47
00:03:56.549 --> 00:04:02.280
highlight those. So, let me bring this up.
You can see the JMS message that is
47

48
00:04:02.280 --> 00:04:08.040
actually an ActiveMQ text message. Again,
that's an implementation of the text
48

49
00:04:08.040 --> 00:04:11.940
message for the JMS specification. So, we
can see this is the one that we worked
49

50
00:04:11.940 --> 00:04:17.700
with in the previous video. And then up
here, I have the Spring message. Again,
50

51
00:04:17.700 --> 00:04:23.099
this is abstraction. And you can see
inside the object structure, you have the
51

52
00:04:23.099 --> 00:04:26.850
the message but the API is slightly
52

53
00:04:26.850 --> 00:04:31.620
be different. So, the headers of the
message are actually mapped to the JMS
53

54
00:04:31.620 --> 00:04:37.860
message properties. So, if I was using
this, I'd have to get the JMS destination.
54

55
00:04:37.860 --> 00:04:42.750
Actually, let me... I've got my other window open.
I'm gonna bring in this code. Give me one
55

56
00:04:42.750 --> 00:04:48.780
second here. I'm grabbing this from my
example that it worked on in preparation
56

57
00:04:48.780 --> 00:04:57.020
for the previous lesson. I'm just
gonna cancel that. But here, this is the... let me
57

58
00:04:57.020 --> 00:05:02.910
comment that out so we can see the
contrast there. So, in this previous line
58

59
00:05:02.910 --> 00:05:06.930
that just pasted it on line 51. This is
working with the Spring implementation.
59

60
00:05:06.930 --> 00:05:13.980
And here, in the JMS template on line 53,
I'm using the JMS message and there is a
60

61
00:05:13.980 --> 00:05:19.980
method for get JMS reply to. When I'm
using the Spring flavor of this message,
61

62
00:05:19.980 --> 00:05:26.070
I actually have to use getHeaders and
then get the jms_replyTo property so
62

63
00:05:26.070 --> 00:05:30.660
that is mapped into a map of headers
effectively. And that's how you access
63

64
00:05:30.660 --> 00:05:35.370
that. So, minor difference there. And also
you need to do a cast to a Destination
64

65
00:05:35.370 --> 00:05:39.660
for that property, that is a JMS
Destination. So, two different ways for
65

66
00:05:39.660 --> 00:05:44.280
doing this. On line 51, I kind of think
the doing the cast is a little ugly so
66

67
00:05:44.280 --> 00:05:49.440
that's always a bit of a code smell when
you see that. But, in this case here, you
67

68
00:05:49.440 --> 00:05:54.270
are decoupling from the JMS
implementation. So, we are still somewhat
68

69
00:05:54.270 --> 00:05:58.320
tied to it but in either case of your to
do a change you'd have to touch the code
69

70
00:05:58.320 --> 00:06:04.050
here. But I did wanna go through and
point out the differences here of
70

71
00:06:04.050 --> 00:06:10.080
what we're dealing with. Again, just as a
quick recap, so we have the JMS, the javax.jms
71

72
00:06:10.080 --> 00:06:16.440
Message, that is the JMS API
specification for a message. We are using
72

73
00:06:16.440 --> 00:06:22.200
the ActiveMQMessage class. So, that is
the implementation that implements the
73

74
00:06:22.200 --> 00:06:29.070
Java API. That's what's being provided
from ActiveMQ. And then finally, we have
74

75
00:06:29.070 --> 00:06:34.320
the Spring abstraction of a Message and
that also works within the Spring
75

76
00:06:34.320 --> 00:06:40.080
Framework. And here in the debugger, I'm
showing you two different ways here.
76

77
00:06:40.080 --> 00:06:44.400
Being able to use the convert and send,
using a destination and using the Spring
77

78
00:06:44.400 --> 00:06:49.949
implementation that is on line 51. And
then on line 53, that convertAndSend
78

79
00:06:49.949 --> 00:06:55.470
with the jmsTemplate. You can see I'm
using the native JMS message where I do
79

80
00:06:55.470 --> 00:07:00.720
have a method where I can use the JMSReplyTo. So, two different techniques.
80

81
00:07:00.720 --> 00:07:05.250
I just want hopefully this clarifies the
different object types that we have
81

82
00:07:05.250 --> 00:07:09.900
within the messaging infrastructure
within the Spring Framework and within
82

83
00:07:09.900 --> 00:07:12.590
JMS.
