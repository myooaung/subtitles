WEBVTT
0
1
00:00:03.680 --> 00:00:08.820
Alright we are going to take a look at
the code required to delete a recipe.
1

2
00:00:08.820 --> 00:00:12.809
But first, to give you a little tip here.
I've gone over to application dot
2

3
00:00:12.809 --> 00:00:18.180
properties and I edited a line here to
change the log level of the package guru
3

4
00:00:18.180 --> 00:00:22.410
dot springframework. Now in a
future module of course, I'm going to
4

5
00:00:22.410 --> 00:00:27.300
look at logging a lot closer but I just
want to change out that log level and we
5

6
00:00:27.300 --> 00:00:31.349
can see here, I've been adding in a
little debug statements. So now
6

7
00:00:31.349 --> 00:00:35.700
we're going to get that in the console
because we did change this to the log
7

8
00:00:35.700 --> 00:00:40.920
level of debug and now the debug
messages shall display. So let's go ahead
8

9
00:00:40.920 --> 00:00:45.360
and take a look at deleting a recipe
now. And like everything else we have
9

10
00:00:45.360 --> 00:00:50.160
started off writing our unit test for it. So I did follow test-driven development
10

11
00:00:50.160 --> 00:00:56.550
and here's my test method for our
service. So it's going to work in
11

12
00:00:56.550 --> 00:01:01.020
conjunction with the RecipeRepository
which is supplied by Spring Data JPA.
12

13
00:01:01.020 --> 00:01:07.220
Now you can see there on line 103, I put
in a comment that there's no when
13

14
00:01:07.220 --> 00:01:12.150
because this meant that actually returns
back void. So we don't have to give it a
14

15
00:01:12.150 --> 00:01:17.220
when Clause because we're not expecting
much of an interaction but we do want to
15

16
00:01:17.220 --> 00:01:22.710
verify that it was actually invoked. And
you can see on line 105 there I am
16

17
00:01:22.710 --> 00:01:28.950
verifying that the recipeRepository
is called one time and the deleteById
17

18
00:01:28.950 --> 00:01:33.329
method gets invoked with anyLong
property. So I could actually specify the
18

19
00:01:33.329 --> 00:01:36.900
value there if I wanted to but in
this case I think that's a good enough
19

20
00:01:36.900 --> 00:01:49.040
for our properties or our purposes. So we
can actually follow the good old, given
20

21
00:01:49.040 --> 00:01:58.530
when and also say then. So that's our
behavior driven development so that's
21

22
00:01:58.530 --> 00:02:01.619
like a specific behavior. That's a good
way to organize your tests when you
22

23
00:02:01.619 --> 00:02:07.530
you're going through that. So that is my
test for the service layer. Now let's
23

24
00:02:07.530 --> 00:02:13.319
take a look at the RecipeControllerTest and that starts on line 97. This is
24

25
00:02:13.319 --> 00:02:16.290
new task action and you can see I am performing
25

26
00:02:16.290 --> 00:02:25.109
a get against recipe, the ID value and
then the action of delete and I am
26

27
00:02:25.109 --> 00:02:30.209
expecting to get a redirect back for the
status code and I'm expecting to get
27

28
00:02:30.209 --> 00:02:35.040
directed back to the root. Now
this is important, I've had this trip
28

29
00:02:35.040 --> 00:02:41.579
people up in the past about why I'm
using the get method and this is part of
29

30
00:02:41.579 --> 00:02:47.689
the HTML standard for forms and
links. It is what we have to work with and
30

31
00:02:47.689 --> 00:02:54.230
actually you cannot do a delete method
within HTTP unless you're using
31

32
00:02:54.230 --> 00:02:59.459
JavaScript. So obviously if we're doing a
RESTful interface we'd be doing the
32

33
00:02:59.459 --> 00:03:07.019
delete HTTP method. But here we're
limited with HTML so we have what we can
33

34
00:03:07.019 --> 00:03:11.099
work with. So we're setting up a simple
link to go ahead and delete that recipe.
34

35
00:03:11.099 --> 00:03:15.989
So these are my two tests. I can run my
test make sure everything is in the
35

36
00:03:15.989 --> 00:03:20.909
green. So our delete method did pick up two
36

37
00:03:20.909 --> 00:03:27.900
additional unit tests and you can see
that we do have one failure. So let's
37

38
00:03:27.900 --> 00:03:34.949
take a quick look at that. And that's a
quick fix there. So remember we
38

39
00:03:34.949 --> 00:03:41.430
reformatted that. So we want 2 and show. That was a
39

40
00:03:41.430 --> 00:03:46.829
mistake that I caught before but I
missed it on this branch. Now we'll see
40

41
00:03:46.829 --> 00:03:53.759
that these do run all green. So now
all our tests are done. Let's go ahead
41

42
00:03:53.759 --> 00:03:58.620
and take a look at the implementation of
this. This is really a simple
42

43
00:03:58.620 --> 00:04:03.150
implementation so we go into the RecipeService and down here at the bottom, get
43

44
00:04:03.150 --> 00:04:09.930
deleteById. The ID to delete and that
calls the Spring Data JPA repository to
44

45
00:04:09.930 --> 00:04:16.739
delete that from Hibernate. And we
did pick up one additional method there
45

46
00:04:16.739 --> 00:04:20.639
on our interface. Let's come up here and
take a look at the RecipeController and
46

47
00:04:20.639 --> 00:04:25.919
this should look pretty familiar
to you right now. So we're mapping to the
47

48
00:04:25.919 --> 00:04:30.720
URL recipe,
taking out the PathVariable of ID, right
48

49
00:04:30.720 --> 00:04:34.530
out of the path and we do have the verb
delete there. So just be consistent with
49

50
00:04:34.530 --> 00:04:40.080
the other mappings that we've done. I did
a log there to see debug log to see the
50

51
00:04:40.080 --> 00:04:45.150
ID that we are deleting and we call
service and do a delete. Now one
51

52
00:04:45.150 --> 00:04:49.500
other thing I did just for
consistency, I did go in and GetMapping
52

53
00:04:49.500 --> 00:04:53.580
and PostMapping. This is a good habit
to do when you're working with Spring
53

54
00:04:53.580 --> 00:04:58.890
MVC is to limit the methods that can be
used against them. So right now without
54

55
00:04:58.890 --> 00:05:04.710
this, so without this any HTTP method
would be supported by these. Now we're
55

56
00:05:04.710 --> 00:05:10.650
saying I'm only expecting get methods. So
let's go ahead and run this now. So come
56

57
00:05:10.650 --> 00:05:21.330
up here and we will start it up. You can
see that we are up in live. I'll come on
57

58
00:05:21.330 --> 00:05:29.940
over to Chrome and let's resize this a
little bit. Come on resize it so that we
58

59
00:05:29.940 --> 00:05:35.160
can see the log. So I'm going to refresh
this. You can see that getting an index
59

60
00:05:35.160 --> 00:05:38.280
page and I'm in the service, now I'm
going to come over here and click on the
60

61
00:05:38.280 --> 00:05:45.660
delete action and you can see that it's
deleting id 2 and if I refresh this we
61

62
00:05:45.660 --> 00:05:50.220
can see that id 2 is no longer being
returned. So that did in fact get deleted
62

63
00:05:50.220 --> 00:05:54.030
from the database. If I want to go over
to H2 console, I could do that and prove
63

64
00:05:54.030 --> 00:05:57.480
that to you but I'm going to assume
since it is no longer displaying on the
64

65
00:05:57.480 --> 00:06:01.850
screen that we have successfully deleted
that.
