WEBVTT
0
1
00:00:00.462 --> 00:00:03.795
(pleasant guitar music)
1

2
00:00:04.871 --> 00:00:06.568
Alright we are going to start converting
2

3
00:00:06.568 --> 00:00:09.416
our Mongo based recipe application
3

4
00:00:09.416 --> 00:00:12.507
over to a Reactive Mongo recipe application.
4

5
00:00:12.507 --> 00:00:14.706
And effectively what I'm gonna do is
5

6
00:00:14.706 --> 00:00:18.468
work from the database up and really to
6

7
00:00:18.468 --> 00:00:22.020
take full advantage of Reactive programming
7

8
00:00:22.020 --> 00:00:23.712
you want to be end-to-end.
8

9
00:00:23.712 --> 00:00:26.021
So we have a Reactive database driver
9

10
00:00:26.021 --> 00:00:29.991
with MongoDB and Thymeleaf is also Reactive.
10

11
00:00:29.991 --> 00:00:32.340
So, but we need to get that Reactive object
11

12
00:00:32.340 --> 00:00:35.641
all the way through the chain.
12

13
00:00:35.641 --> 00:00:37.403
But we're gonna do that a step at a time,
13

14
00:00:37.403 --> 00:00:39.442
one step at a time, so the first thing
14

15
00:00:39.442 --> 00:00:42.093
we need to do is address our dependencies
15

16
00:00:42.093 --> 00:00:44.588
and there's a couple things going on here
16

17
00:00:44.588 --> 00:00:48.378
inside the gradle build, or build.gradle
17

18
00:00:48.378 --> 00:00:51.172
and what we have there on line 34
18

19
00:00:51.172 --> 00:00:53.607
is the starter-web and we're gonna keep
19

20
00:00:53.607 --> 00:00:55.070
that in place right now.
20

21
00:00:55.070 --> 00:00:58.011
And line 35 I put in webflux and we're gonna
21

22
00:00:58.011 --> 00:00:59.751
get into that in the future of the course,
22

23
00:00:59.751 --> 00:01:01.034
but not just yet.
23

24
00:01:01.034 --> 00:01:03.445
That's gonna be driving a number of changes
24

25
00:01:03.445 --> 00:01:06.523
because we'll be using the Reactive webstack
25

26
00:01:06.523 --> 00:01:08.520
but we're gonna focus on the backend for right now.
26

27
00:01:08.520 --> 00:01:12.322
So you can see on line 38 I've gone in and
27

28
00:01:12.322 --> 00:01:15.305
added the starter-data-mongodb-reactive
28

29
00:01:15.305 --> 00:01:16.708
so that's what Spring brings in our
29

30
00:01:16.708 --> 00:01:19.843
Reactive driver for MongoDB.
30

31
00:01:19.843 --> 00:01:22.089
And then down on testCompile you can see that we
31

32
00:01:22.089 --> 00:01:24.575
have the Reactive test framework that we're adding
32

33
00:01:24.575 --> 00:01:26.393
as well and we'll get into that in the
33

34
00:01:26.393 --> 00:01:27.327
future of the course.
34

35
00:01:27.327 --> 00:01:29.315
But what we wanna do right now is I'm
35

36
00:01:29.315 --> 00:01:32.097
gonna create a repository, so,
36

37
00:01:32.097 --> 00:01:34.580
let's take a look at the UnitOfMeasureRepository
37

38
00:01:34.580 --> 00:01:37.927
and just as recap this is gonna be return back
38

39
00:01:37.927 --> 00:01:41.192
an Optional and we're using generics
39

40
00:01:41.192 --> 00:01:43.886
there for UnitOfMeasure, and then we also
40

41
00:01:43.886 --> 00:01:45.843
have the full CRUD operations as well
41

42
00:01:45.843 --> 00:01:49.510
that are implemented by the CrudRepository.
42

43
00:01:50.344 --> 00:01:51.541
So if you remember these are the
43

44
00:01:51.541 --> 00:01:53.134
different methods that we have.
44

45
00:01:53.134 --> 00:01:56.581
And let's go ahead and close this.
45

46
00:01:56.581 --> 00:01:58.837
And we are going to, I'm starting a new package
46

47
00:01:58.837 --> 00:02:01.539
we'll stand these up together so
47

48
00:02:01.539 --> 00:02:04.792
I'm gonna do a New Java Class,
48

49
00:02:04.792 --> 00:02:07.042
actually want it Interface.
49

50
00:02:09.000 --> 00:02:13.000
So we'll call it UnitOfMeasureReactiveRepository
50

51
00:02:13.909 --> 00:02:16.048
Go ahead and add that into Git.
51

52
00:02:16.048 --> 00:02:18.798
And now, we wanna extend, uh oh
52

53
00:02:22.887 --> 00:02:24.804
ReactiveMongoRepository
53

54
00:02:30.052 --> 00:02:33.708
So just like the other Spring data repositories,
54

55
00:02:33.708 --> 00:02:36.388
we're gonna pass in the entity or in this case
55

56
00:02:36.388 --> 00:02:38.399
the document class and then the
56

57
00:02:38.399 --> 00:02:39.982
property of the id.
57

58
00:02:41.714 --> 00:02:44.935
So let's take a quick look at what we get here.
58

59
00:02:44.935 --> 00:02:48.730
And the Reactive Repository, this looks
59

60
00:02:48.730 --> 00:02:52.156
oddly just like the CrudRepository we have.
60

61
00:02:52.156 --> 00:02:54.967
You can see that it's extending out a couple
61

62
00:02:54.967 --> 00:02:57.749
repositories so this is gonna behave very similar
62

63
00:02:57.749 --> 00:03:00.949
to the CrudRepository that we had
63

64
00:03:00.949 --> 00:03:04.315
but now we went from a generic Spring data
64

65
00:03:04.315 --> 00:03:06.919
interface, the CrudRepository interface
65

66
00:03:06.919 --> 00:03:08.682
is gonna work across a number of different
66

67
00:03:08.682 --> 00:03:11.265
Spring data implementations.
67

68
00:03:11.265 --> 00:03:14.624
Now we're going into a specific MongoRepository
68

69
00:03:14.624 --> 00:03:17.069
that has Reactive features.
69

70
00:03:17.069 --> 00:03:19.120
And we can see that this is gonna be
70

71
00:03:19.120 --> 00:03:22.642
returning Reactive types, Flux, and Mono
71

72
00:03:22.642 --> 00:03:25.048
and these are Reactive publishers
72

73
00:03:25.048 --> 00:03:26.859
so we get that Reactive type and then
73

74
00:03:26.859 --> 00:03:29.276
we're gonna be passing these Fluxes and Monos
74

75
00:03:29.276 --> 00:03:31.266
all the way into Thymeleaf but first
75

76
00:03:31.266 --> 00:03:35.472
let's make sure that this is gonna be working
76

77
00:03:35.472 --> 00:03:38.785
I'm gonna go ahead and close out these.
77

78
00:03:38.785 --> 00:03:40.032
And I'm going to do something very
78

79
00:03:40.032 --> 00:03:42.142
very simple here.
79

80
00:03:42.142 --> 00:03:46.309
And we'll just use this for testing for right now.
80

81
00:03:49.601 --> 00:03:50.772
Because I'd wanna introduce you
81

82
00:03:50.772 --> 00:03:51.819
to what's going on here, I'm gonna
82

83
00:03:51.819 --> 00:03:53.236
autowire that in.
83

84
00:03:54.542 --> 00:03:56.126
So this is temporary normally I modify
84

85
00:03:56.126 --> 00:04:00.953
the constructor but I am just doing this for play.
85

86
00:04:00.953 --> 00:04:03.620
And let's go ahead, come up here
86

87
00:04:05.766 --> 00:04:09.687
and I'm intentionally using the error debug
87

88
00:04:09.687 --> 00:04:13.338
because I wanna make sure that it shows up.
88

89
00:04:13.338 --> 00:04:15.823
And here what we wanna do is take up
89

90
00:04:15.823 --> 00:04:18.406
get the reactiveRepository here
90

91
00:04:19.436 --> 00:04:21.615
and let's get a count.
91

92
00:04:21.615 --> 00:04:24.275
Now, can see here that it is complaining
92

93
00:04:24.275 --> 00:04:26.880
and we're not doing anything here
93

94
00:04:26.880 --> 00:04:28.731
because it's a Reactive type and we've
94

95
00:04:28.731 --> 00:04:31.077
asked it for a count and that is going
95

96
00:04:31.077 --> 00:04:34.048
to return back a Mono, so that Mono is
96

97
00:04:34.048 --> 00:04:36.569
a publisher so if we don't ask anything
97

98
00:04:36.569 --> 00:04:38.390
from that publisher, it's just gonna
98

99
00:04:38.390 --> 00:04:40.864
blow right by that and nothing's going to happen.
99

100
00:04:40.864 --> 00:04:45.081
So what we're gonna do is call block on it.
100

101
00:04:45.081 --> 00:04:48.938
Now that block is gonna say "okay, run this now."
101

102
00:04:48.938 --> 00:04:51.268
So this is blocking now something we wanna do
102

103
00:04:51.268 --> 00:04:52.889
so this is just temporary.
103

104
00:04:52.889 --> 00:04:54.869
This is just for us to start getting used to
104

105
00:04:54.869 --> 00:04:57.721
dealing with Reactive types.
105

106
00:04:57.721 --> 00:05:00.006
And now I wanna do a toString so that block
106

107
00:05:00.006 --> 00:05:03.673
says, "Okay publisher give me that one Mono"
107

108
00:05:05.034 --> 00:05:08.041
and in this case that's gonna return back a Long
108

109
00:05:08.041 --> 00:05:10.647
which is the count and now I'm gonna convert
109

110
00:05:10.647 --> 00:05:14.861
that Long to a toString and I'll put the error message.
110

111
00:05:14.861 --> 00:05:17.778
So let's go ahead and run this now.
111

112
00:05:21.067 --> 00:05:23.800
And I'm getting a little warning there.
112

113
00:05:23.800 --> 00:05:25.501
So I've been doing some modifications here.
113

114
00:05:25.501 --> 00:05:28.503
Told you I just get a little confused.
114

115
00:05:28.503 --> 00:05:30.525
And we can see I got a count of zero
115

116
00:05:30.525 --> 00:05:32.858
which is not what we wanted.
116

117
00:05:40.085 --> 00:05:43.710
Make sure that is in truth the actual one that we did
117

118
00:05:43.710 --> 00:05:46.793
and I'm gonna run this one more time.
118

119
00:05:49.945 --> 00:05:54.250
And that is zero and I see exactly what I did wrong.
119

120
00:05:54.250 --> 00:05:55.917
This should be here.
120

121
00:05:58.214 --> 00:06:00.084
So I bet that's gonna work a lot better now.
121

122
00:06:00.084 --> 00:06:03.584
Let's go ahead and run this one more time.
122

123
00:06:05.807 --> 00:06:08.102
And now we can see we're getting expected behavior
123

124
00:06:08.102 --> 00:06:10.866
so I put a bunch of pound signs there and we
124

125
00:06:10.866 --> 00:06:12.793
can see we're getting a lot of chatter there
125

126
00:06:12.793 --> 00:06:14.476
in the log file that's why we get a little
126

127
00:06:14.476 --> 00:06:16.296
bit of spacing there but my count
127

128
00:06:16.296 --> 00:06:19.370
out of the unitOfMeasure is indeed eight
128

129
00:06:19.370 --> 00:06:21.721
so what this proves out is that
129

130
00:06:21.721 --> 00:06:24.117
our Reactive Repository is getting wired up
130

131
00:06:24.117 --> 00:06:25.530
and it is working.
131

132
00:06:25.530 --> 00:06:27.768
Spring data Mongo is providing us a
132

133
00:06:27.768 --> 00:06:29.880
Reactive Repository and we just got
133

134
00:06:29.880 --> 00:06:32.690
our first Reactive type back.
134

135
00:06:32.690 --> 00:06:33.691
So I think this is some cool stuff
135

136
00:06:33.691 --> 00:06:34.758
that we're gonna be working with.
136

137
00:06:34.758 --> 00:06:36.591
A lot more to go here.
