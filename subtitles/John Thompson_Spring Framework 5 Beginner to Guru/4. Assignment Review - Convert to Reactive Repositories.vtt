WEBVTT
0
1
00:00:00.590 --> 00:00:03.173
(light guitar)
1

2
00:00:05.388 --> 00:00:06.297
All right, we're gonna go ahead
2

3
00:00:06.297 --> 00:00:07.396
and complete the assignment.
3

4
00:00:07.396 --> 00:00:08.751
So the first task that we wanna do
4

5
00:00:08.751 --> 00:00:11.369
is create the two reactive repositories.
5

6
00:00:11.369 --> 00:00:14.121
So let's go ahead and take category first,
6

7
00:00:14.121 --> 00:00:17.371
so I come in here, say New Java Class,
7

8
00:00:18.570 --> 00:00:20.320
make it an Interface.
8

9
00:00:22.152 --> 00:00:26.686
So CategoryReactiveRepository, and say OK.
9

10
00:00:26.686 --> 00:00:28.932
Of course, we'll add that to Git for you guys.
10

11
00:00:28.932 --> 00:00:32.543
And we do have one here, we're doing findByDescription,
11

12
00:00:32.543 --> 00:00:35.460
let's come in here, copy that over.
12

13
00:00:37.947 --> 00:00:41.184
Paste that in, we only want Category
13

14
00:00:41.184 --> 00:00:43.985
so we don't have to wipe out the import.
14

15
00:00:43.985 --> 00:00:47.186
Now we don't want Optional here, so this is gonna be
15

16
00:00:47.186 --> 00:00:52.140
a findByDescription, and we are expecting one back.
16

17
00:00:52.140 --> 00:00:54.930
So we want to change this to Mono,
17

18
00:00:54.930 --> 00:00:56.901
so that's inside of the reactive core.
18

19
00:00:56.901 --> 00:00:59.196
So we have findByDescription,
19

20
00:00:59.196 --> 00:01:03.363
and now the next thing that we need to here is an extends.
20

21
00:01:05.876 --> 00:01:07.219
Import that.
21

22
00:01:07.219 --> 00:01:09.707
Now remember that we need to give it two types.
22

23
00:01:09.707 --> 00:01:11.374
So we want Category.
23

24
00:01:13.929 --> 00:01:17.290
And then String, which is our id value.
24

25
00:01:17.290 --> 00:01:19.458
So that is now created.
25

26
00:01:19.458 --> 00:01:22.208
And we'll get rid of that import.
26

27
00:01:23.217 --> 00:01:27.384
And let's go ahead and create our recipe repository too.
27

28
00:01:28.229 --> 00:01:30.896
So come in here, New Java Class.
28

29
00:01:36.232 --> 00:01:37.900
And in this case here,
29

30
00:01:37.900 --> 00:01:41.023
we didn't implement any additional methods in the interface.
30

31
00:01:41.023 --> 00:01:43.218
So we don't need to do any additional work,
31

32
00:01:43.218 --> 00:01:46.201
but we do need to say extends.
32

33
00:01:46.201 --> 00:01:48.368
ReactiveMongoRepository.
33

34
00:01:52.355 --> 00:01:53.188
Recipe.
34

35
00:01:54.435 --> 00:01:55.268
String.
35

36
00:01:56.145 --> 00:01:57.640
And one more character there.
36

37
00:01:57.640 --> 00:01:59.027
So now that is happy.
37

38
00:01:59.027 --> 00:02:02.133
And we have our two repositories to find.
38

39
00:02:02.133 --> 00:02:03.718
The next part of the assignment
39

40
00:02:03.718 --> 00:02:05.552
was to come in here to the bootstrap.
40

41
00:02:05.552 --> 00:02:07.700
And we're gonna do the same thing here.
41

42
00:02:07.700 --> 00:02:08.954
And this isn't permanent code,
42

43
00:02:08.954 --> 00:02:12.454
so we're getting a little relaxed with it.
43

44
00:02:14.262 --> 00:02:16.012
There's our category.
44

45
00:02:18.078 --> 00:02:20.245
And let's rename this one.
45

46
00:02:21.713 --> 00:02:24.047
So that's just reactiveRepository.
46

47
00:02:24.047 --> 00:02:25.928
That's gonna get confusing as to which one we're using,
47

48
00:02:25.928 --> 00:02:27.983
so I'm gonna come in and Refactor that.
48

49
00:02:27.983 --> 00:02:31.553
So I can come down to Refactor, rename.
49

50
00:02:31.553 --> 00:02:34.293
And thank you intelligence, we'll take that.
50

51
00:02:34.293 --> 00:02:36.433
You can see that by doing the refactor there,
51

52
00:02:36.433 --> 00:02:38.196
it also changed it down here.
52

53
00:02:38.196 --> 00:02:39.863
So we're reusing it.
53

54
00:02:41.595 --> 00:02:44.095
So we wanna autowire that in.
54

55
00:02:45.020 --> 00:02:48.270
And let's do the same thing for recipe.
55

56
00:02:52.143 --> 00:02:54.848
And also autowire that in.
56

57
00:02:54.848 --> 00:02:57.181
So change this to UOM count.
57

58
00:03:01.356 --> 00:03:02.679
And again, I'm using the error
58

59
00:03:02.679 --> 00:03:05.820
just to make sure that it does get outputted.
59

60
00:03:05.820 --> 00:03:07.428
We do have debug going,
60

61
00:03:07.428 --> 00:03:08.995
but sometimes when you're doing something like this,
61

62
00:03:08.995 --> 00:03:11.474
it's kind of handy to use the error output.
62

63
00:03:11.474 --> 00:03:15.700
That almost is always configured for your debugger.
63

64
00:03:15.700 --> 00:03:17.950
I mean your logging output.
64

65
00:03:20.408 --> 00:03:24.575
Now we're gonna concatenate the categoryReactiveRepository.findAll()
65

66
00:03:26.968 --> 00:03:27.801
.
66

67
00:03:29.092 --> 00:03:33.191
And actually we wanna count, I'm sorry.
67

68
00:03:33.191 --> 00:03:36.291
count, and that's gonna return back a Mono Long.
68

69
00:03:36.291 --> 00:03:38.171
And then we need to do a block.
69

70
00:03:38.171 --> 00:03:39.776
And then toString.
70

71
00:03:39.776 --> 00:03:43.442
So toString function I don't think would work directly.
71

72
00:03:43.442 --> 00:03:46.859
Actually, I'm gonna experiment with that.
72

73
00:03:48.817 --> 00:03:51.067
Let's see here, we want
73

74
00:03:57.217 --> 00:03:59.377
I'm curious to see what that output's there.
74

75
00:03:59.377 --> 00:04:00.863
This is my own curiosity.
75

76
00:04:00.863 --> 00:04:02.366
We're probably going to have
76

77
00:04:02.366 --> 00:04:03.608
to change that and do a block,
77

78
00:04:03.608 --> 00:04:06.608
but let's go ahead and run this now.
78

79
00:04:08.943 --> 00:04:10.540
I'm curious to see what this line
79

80
00:04:10.540 --> 00:04:12.566
actually outputs here.
80

81
00:04:12.566 --> 00:04:13.912
So we got UOM count.
81

82
00:04:13.912 --> 00:04:15.184
Yep, just as I expected.
82

83
00:04:15.184 --> 00:04:17.893
So this one is an important learning feature.
83

84
00:04:17.893 --> 00:04:19.534
So we got a UOM Count of 8.
84

85
00:04:19.534 --> 00:04:21.685
Category Count of 4.
85

86
00:04:21.685 --> 00:04:23.602
And then we get a Mono,
86

87
00:04:25.075 --> 00:04:26.689
a description of that.
87

88
00:04:26.689 --> 00:04:29.075
So it's important to do a block function.
88

89
00:04:29.075 --> 00:04:31.236
So lets go ahead and do that.
89

90
00:04:31.236 --> 00:04:32.069
And dot.
90

91
00:04:33.475 --> 00:04:36.459
And lets rerun this and get a count of the recipe.
91

92
00:04:36.459 --> 00:04:39.459
So we should have two recipes there.
92

93
00:04:41.594 --> 00:04:44.116
And now we got exactly what we expected.
93

94
00:04:44.116 --> 00:04:45.774
So UOM Count of 8.
94

95
00:04:45.774 --> 00:04:47.645
Category Count of 4,
95

96
00:04:47.645 --> 00:04:49.312
Recipe Count of 2.
96

97
00:04:50.344 --> 00:04:51.993
And this video's getting a little long,
97

98
00:04:51.993 --> 00:04:53.456
and we still have one more assignment.
98

99
00:04:53.456 --> 00:04:55.308
It's to create the integration test.
99

100
00:04:55.308 --> 00:04:57.380
I'm gonna pause this video for a second
100

101
00:04:57.380 --> 00:04:59.286
and set up the integration test
101

102
00:04:59.286 --> 00:05:01.832
so this video does not get too long.
102

103
00:05:01.832 --> 00:05:03.535
Okay, I've jumped ahead and went ahead
103

104
00:05:03.535 --> 00:05:05.629
and wrote the integration test.
104

105
00:05:05.629 --> 00:05:08.968
And a couple things here that I want to point out.
105

106
00:05:08.968 --> 00:05:11.747
Let's take a look at this test here.
106

107
00:05:11.747 --> 00:05:15.355
And what it's doing is I'm testing the recipe save.
107

108
00:05:15.355 --> 00:05:19.522
So I create a recipe, then I call the repository save,
108

109
00:05:20.849 --> 00:05:25.148
get the count, and this is actually going to error out.
109

110
00:05:25.148 --> 00:05:28.731
So I'm going to run it and show you the error.
110

111
00:05:29.583 --> 00:05:31.574
Now take a look here.
111

112
00:05:31.574 --> 00:05:36.236
And what you are seeing is we're doing a save,
112

113
00:05:36.236 --> 00:05:39.121
but what happens here implicitly,
113

114
00:05:39.121 --> 00:05:42.121
is the save is gonna act reactively,
114

115
00:05:43.086 --> 00:05:46.772
so we pass it in, but there's no pressure on it.
115

116
00:05:46.772 --> 00:05:51.317
No subscriber, so, what we wanna do is add in a block.
116

117
00:05:51.317 --> 00:05:53.378
And now that's gonna force it to save.
117

118
00:05:53.378 --> 00:05:55.804
So now when I run this again,
118

119
00:05:55.804 --> 00:05:59.566
we'll see that does actually complete properly.
119

120
00:05:59.566 --> 00:06:01.720
So that little block there,
120

121
00:06:01.720 --> 00:06:03.043
it's gonna take some getting used to
121

122
00:06:03.043 --> 00:06:06.033
once you start working with the reactive streams.
122

123
00:06:06.033 --> 00:06:07.792
Just remember to do that block.
123

124
00:06:07.792 --> 00:06:10.032
Because that block is kind of what triggers
124

125
00:06:10.032 --> 00:06:13.109
that whole reactive train to take off.
125

126
00:06:13.109 --> 00:06:16.145
And something that we also need to be rather careful with.
126

127
00:06:16.145 --> 00:06:19.164
Let's take a quick look at the others here.
127

128
00:06:19.164 --> 00:06:23.221
Here on line 39, I'm doing a testFindByDescription,
128

129
00:06:23.221 --> 00:06:25.764
so I create the object, I save it,
129

130
00:06:25.764 --> 00:06:27.592
and I block it again.
130

131
00:06:27.592 --> 00:06:31.759
Now, to get it back, I go back to the reactive repository,
131

132
00:06:33.020 --> 00:06:34.402
and I do a findByDescription.
132

133
00:06:34.402 --> 00:06:36.375
You can see again I'm doing the block.
133

134
00:06:36.375 --> 00:06:39.638
And here I'm making sure the id is not null.
134

135
00:06:39.638 --> 00:06:43.986
So the id value is getting set by MongoDB upon persistence.
135

136
00:06:43.986 --> 00:06:47.068
I could, in theory, update that check
136

137
00:06:47.068 --> 00:06:49.593
and make sure I'm getting the full value back.
137

138
00:06:49.593 --> 00:06:52.496
And let's take a look at the unit of measure test here.
138

139
00:06:52.496 --> 00:06:54.545
I'm playing around with the each.
139

140
00:06:54.545 --> 00:06:56.230
And let's go in.
140

141
00:06:56.230 --> 00:06:57.693
And one thing I like to do,
141

142
00:06:57.693 --> 00:07:02.086
is right now I've got each in four different spots.
142

143
00:07:02.086 --> 00:07:05.168
And I can come in and say Refactor.
143

144
00:07:05.168 --> 00:07:06.492
I'm gonna show you a little bit
144

145
00:07:06.492 --> 00:07:08.032
of inside IntelliJ.
145

146
00:07:08.032 --> 00:07:11.618
And I wanna extract that out to a Constant.
146

147
00:07:11.618 --> 00:07:13.266
So I'm gonna do that.
147

148
00:07:13.266 --> 00:07:14.636
And say EACH.
148

149
00:07:14.636 --> 00:07:16.453
And now I'm getting asked,
149

150
00:07:16.453 --> 00:07:18.537
do I want to replace all occurrences.
150

151
00:07:18.537 --> 00:07:20.333
And I'll say yes.
151

152
00:07:20.333 --> 00:07:21.856
And we'll call it EACH.
152

153
00:07:21.856 --> 00:07:23.504
I'm just gonna hit enter here.
153

154
00:07:23.504 --> 00:07:26.754
And now you can see up here on line 17,
154

155
00:07:27.639 --> 00:07:30.455
we have a static final String of EACH,
155

156
00:07:30.455 --> 00:07:33.375
and now that's not gonna change anywhere.
156

157
00:07:33.375 --> 00:07:35.453
So let's go ahead and run this and make sure
157

158
00:07:35.453 --> 00:07:37.120
it does in fact run.
158

159
00:07:39.690 --> 00:07:42.374
And that's a much better way to handle that.
159

160
00:07:42.374 --> 00:07:43.207
When you have the Strings,
160

161
00:07:43.207 --> 00:07:44.259
and you're using them in
161

162
00:07:44.259 --> 00:07:46.384
multiple places with the same value,
162

163
00:07:46.384 --> 00:07:47.899
you don't wanna have
163

164
00:07:47.899 --> 00:07:49.774
some kind of accidental mistake,
164

165
00:07:49.774 --> 00:07:51.434
where one change slightly can
165

166
00:07:51.434 --> 00:07:53.449
definitely throw your tests off.
166

167
00:07:53.449 --> 00:07:56.806
But that's a good way to set up a static value.
167

168
00:07:56.806 --> 00:07:58.054
Let's go ahead and make sure that
168

169
00:07:58.054 --> 00:08:00.266
all our tests are running properly now.
169

170
00:08:00.266 --> 00:08:03.337
And what we did is we added in about five or six
170

171
00:08:03.337 --> 00:08:06.396
new reactive tests, and these are integration tests.
171

172
00:08:06.396 --> 00:08:08.900
So just to remind you that we are bringing up
172

173
00:08:08.900 --> 00:08:10.983
the Mongo database slice.
173

174
00:08:13.756 --> 00:08:16.183
We get an embedded Mongo instances brought up
174

175
00:08:16.183 --> 00:08:18.244
in a very limited Spring context,
175

176
00:08:18.244 --> 00:08:19.625
where it has to run it.
176

177
00:08:19.625 --> 00:08:22.406
And we can see now we have 72 tests.
177

178
00:08:22.406 --> 00:08:23.892
And I do have one ignored test,
178

179
00:08:23.892 --> 00:08:25.892
and I know what that is.
179

180
00:08:27.511 --> 00:08:30.808
And I will fix that before I check that in.
180

181
00:08:30.808 --> 00:08:32.608
So you can see that these reactive types
181

182
00:08:32.608 --> 00:08:34.959
do take a little bit of getting used to.
182

183
00:08:34.959 --> 00:08:36.997
In the next video, we are going to
183

184
00:08:36.997 --> 00:08:39.090
be starting to work with the service layers,
184

185
00:08:39.090 --> 00:08:41.821
so we'll be working with these reactive types even more.
185

186
00:08:41.821 --> 00:08:44.090
(metal clanging)
186

187
00:08:44.090 --> 00:08:46.232
Okay, one other thing I am going to do.
187

188
00:08:46.232 --> 00:08:49.088
So the problem that we had,
188

189
00:08:49.088 --> 00:08:51.238
I still had this commented out.
189

190
00:08:51.238 --> 00:08:54.332
I forgot to port it over from the previous project,
190

191
00:08:54.332 --> 00:08:56.265
where had a different repository,
191

192
00:08:56.265 --> 00:09:00.596
so I do have the original UnitOfMeasureTest running.
192

193
00:09:00.596 --> 00:09:01.931
But the problem is it started
193

194
00:09:01.931 --> 00:09:03.850
throwing some NPE errors on me.
194

195
00:09:03.850 --> 00:09:06.499
So I'm gonna change it at this time.
195

196
00:09:06.499 --> 00:09:08.845
The bootstrap class,
196

197
00:09:08.845 --> 00:09:11.828
I'm actually gonna remove the stuff here.
197

198
00:09:11.828 --> 00:09:14.725
Because I think we have enough examples, now,
198

199
00:09:14.725 --> 00:09:16.199
of the reactive stuff,
199

200
00:09:16.199 --> 00:09:17.999
so I'm gonna go ahead and delete this
200

201
00:09:17.999 --> 00:09:21.897
and commit into our stream of branches here in GitHub.
201

202
00:09:21.897 --> 00:09:24.608
So we now longer need that.
202

203
00:09:24.608 --> 00:09:26.274
I think we have a pretty solid example,
203

204
00:09:26.274 --> 00:09:28.178
and I'm gonna go ahead and run that,
204

205
00:09:28.178 --> 00:09:29.623
make sure that everything runs,
205

206
00:09:29.623 --> 00:09:34.169
and we'll have our previous integration test restored.
206

207
00:09:34.169 --> 00:09:35.744
And good examples there.
207

208
00:09:35.744 --> 00:09:37.886
I didn't want you to get messed up when you see
208

209
00:09:37.886 --> 00:09:42.832
that the little logging statements we got have been deleted.
209

210
00:09:42.832 --> 00:09:44.167
So now we are all set,
210

211
00:09:44.167 --> 00:09:46.355
and we will continue on.
211

212
00:09:46.355 --> 00:09:48.235
Next video, we're gonna look
212

213
00:09:48.235 --> 00:09:51.652
at starting to address the service layer.
