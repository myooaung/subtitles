WEBVTT
0
1
00:00:04.310 --> 00:00:08.340
Alright, in this video we are going to
take a look at the data model we are
1

2
00:00:08.340 --> 00:00:11.370
going to be building. Now I'm going to
cheat a little bit. I'm going to use a
2

3
00:00:11.370 --> 00:00:16.619
tool called JDL Studio and this is a
piece of software from JHipster team
3

4
00:00:16.619 --> 00:00:21.119
and gives us a chance to model it. So
we're going to go through the data model.
4

5
00:00:21.119 --> 00:00:23.609
I'm going to look at a recipe
application we're going to be using for
5

6
00:00:23.609 --> 00:00:26.609
our little example here of the
application that we're going to be
6

7
00:00:26.609 --> 00:00:31.260
building. And what I want to establish in
this video is the data model that we're
7

8
00:00:31.260 --> 00:00:34.860
going to build. So we're not going to get
into JPA just yet. All the different
8

9
00:00:34.860 --> 00:00:38.700
options there, but we are going to move
forward and use this model that we're
9

10
00:00:38.700 --> 00:00:43.860
establishing here for the relationships, the
entity, the object model that we're going
10

11
00:00:43.860 --> 00:00:47.820
to be creating. So I'm going to toggle
over now and show you the application
11

12
00:00:47.820 --> 00:00:50.670
that we're going to build, or an example
of the application I'm going to build.
12

13
00:00:50.670 --> 00:00:55.170
We're not building the exact same application but we are going to build a web-like
13

14
00:00:55.170 --> 00:00:59.940
application just using this as an
example for a recipe application. And
14

15
00:00:59.940 --> 00:01:03.960
then we'll get in and look at the object
model that we're going to use for our
15

16
00:01:03.960 --> 00:01:09.270
little recipe web application. Alright I
want to take a little closer look at our
16

17
00:01:09.270 --> 00:01:15.869
recipe application. And I did a quick
search and found most popular iOS recipe
17

18
00:01:15.869 --> 00:01:19.110
application and this is a screenshot. And
that's kind of what we're going to
18

19
00:01:19.110 --> 00:01:24.540
emulate. I'm just using this as an
example and so we need to model this and
19

20
00:01:24.540 --> 00:01:29.880
we're going to focus on modeling it
properly in a JPA sort of way or more
20

21
00:01:29.880 --> 00:01:34.619
of an OO sort of way. So I'm not going to
worry about the database per se. I'm more
21

22
00:01:34.619 --> 00:01:39.900
looking at the object model. So right
away I have a recipe object. I can see
22

23
00:01:39.900 --> 00:01:43.860
that I'm going to need a recipe object
and that's going to have attributes like
23

24
00:01:43.860 --> 00:01:49.259
an image, prep time, cook time, serving,
source, URL. It's going to have a
24

25
00:01:49.259 --> 00:01:54.479
difficulty and a rating. So these are all
attributes of a recipe object. Now that
25

26
00:01:54.479 --> 00:02:00.479
recipe is going to have multiple
ingredients. So we have a whole list of
26

27
00:02:00.479 --> 00:02:06.119
ingredients and it looks like the
ingredient is going to have a unit of
27

28
00:02:06.119 --> 00:02:09.720
measure and a description. So pretty simple there then we have
28

29
00:02:09.720 --> 00:02:13.790
directions which looks like it's just
one giant text field. So
29

30
00:02:13.790 --> 00:02:17.959
that's kind of giving us some clues
about our data model. I'm going to toggle
30

31
00:02:17.959 --> 00:02:25.549
over here. Jump over to Chrome and what
I'm using here is JDL Studio. So this is
31

32
00:02:25.549 --> 00:02:28.579
from the JHipster project. JHipster is kind of a code generator
32

33
00:02:28.579 --> 00:02:34.940
built around AngularJS and Spring Boot
and so it gives us a nice Spring
33

34
00:02:34.940 --> 00:02:38.569
back-end and Angular CRUD type
application. I'm not going to show you
34

35
00:02:38.569 --> 00:02:43.280
JHipster right now but I am showing
you the JDL Studio because I wanted to
35

36
00:02:43.280 --> 00:02:47.629
show you the entities and their
relationships and how they are going to do this
36

37
00:02:47.629 --> 00:02:51.920
and then we're going to go through and
build this out in JPA in the upcoming
37

38
00:02:51.920 --> 00:02:56.180
videos of the course. But I want to talk
about what we're building for
38

39
00:02:56.180 --> 00:03:01.879
our application. So the first thing we
have is the Recipe entity. You can see
39

40
00:03:01.879 --> 00:03:07.340
there in the top left hand side, lines 1
through 10 we have the entity defined. So
40

41
00:03:07.340 --> 00:03:12.470
this is setting up the property names
and their datatypes. So on here I have
41

42
00:03:12.470 --> 00:03:18.769
prep time, cook time, servings, the source
as a String, URL as a String, directions
42

43
00:03:18.769 --> 00:03:24.980
as a String and a difficulty and then
also image as a byte array. And you can
43

44
00:03:24.980 --> 00:03:29.299
see here on the difficulty I'm taking
the opportunity to use an enum.
44

45
00:03:29.299 --> 00:03:32.959
So we're going to use an enumeration
there and see how that gets to play in
45

46
00:03:32.959 --> 00:03:37.519
JPA.
Now we also have a single notes field
46

47
00:03:37.519 --> 00:03:41.449
and you can see there I'm creating a
one-to-one relationship from recipe to
47

48
00:03:41.449 --> 00:03:46.069
notes and where it gets a little more
interesting is the relationships from
48

49
00:03:46.069 --> 00:03:51.889
recipe to ingredient and then I guess
it'd be the third column there. I'm going
49

50
00:03:51.889 --> 00:03:56.930
from left to right. So you have recipe
then you can see the notation there
50

51
00:03:56.930 --> 00:04:01.639
right above a gradient. The one dash star,
so that's a one-to-many relationship and
51

52
00:04:01.639 --> 00:04:05.690
I'm going to have a description amount
and then we have a one-to-one
52

53
00:04:05.690 --> 00:04:10.159
relationship with UnitOfMeasure. So
that unit measure is just going to be a
53

54
00:04:10.159 --> 00:04:16.340
String that will define and then finally,
if you look at the far left, a category
54

55
00:04:16.340 --> 00:04:21.760
box. We are saying between recipe and
category, we're going to have a
55

56
00:04:21.760 --> 00:04:26.719
many-to-many relationship. So right
above the category box you can see the star
56

57
00:04:26.719 --> 00:04:31.040
dot star
or star - star that is indicating a
57

58
00:04:31.040 --> 00:04:35.750
many-to-many relationship and we got a
mistake there, departmentName, we want to
58

59
00:04:35.750 --> 00:04:42.620
say categoryName. And you can see the
JDL is actually, we can even do a
59

60
00:04:42.620 --> 00:04:46.160
required property but
I'm not going to be generating entities
60

61
00:04:46.160 --> 00:04:50.660
from this. I'm going to do it all by hand
and step you through that. So let's
61

62
00:04:50.660 --> 00:04:55.070
toggle back over and double check our
little application. So you can see I have
62

63
00:04:55.070 --> 00:05:00.740
a description there. Did I do the
description? I did not. So let's add in
63

64
00:05:00.740 --> 00:05:08.240
description and you can see how the
entity changed right away there on the
64

65
00:05:08.240 --> 00:05:12.800
screen. This is a really nice modeling tool that I like to use. If I just need to
65

66
00:05:12.800 --> 00:05:15.680
model out a simple data model it's kind
of almost like cheating.
66

67
00:05:15.680 --> 00:05:20.330
So let's come back and double check our
screen. So we get description, cook
67

68
00:05:20.330 --> 00:05:25.639
time, servings and source URL, difficulty
in reading and I am going to save
68

69
00:05:25.639 --> 00:05:29.720
reading for you guys as an assignment
further down the road. So I'm not going
69

70
00:05:29.720 --> 00:05:34.550
to add that in and I am going to skip
over nutritional information. Let's
70

71
00:05:34.550 --> 00:05:39.410
double check this model. So Recipe, that's
going to be the primary object that
71

72
00:05:39.410 --> 00:05:43.039
we'll be dealing with. So when we're
working with multiple recipes of course
72

73
00:05:43.039 --> 00:05:47.870
in the system, that's going to have a
difficulty notes, it's going to have many
73

74
00:05:47.870 --> 00:05:51.889
ingredients and each Ingredient is going
to have one UnitOfMeasure if that makes
74

75
00:05:51.889 --> 00:05:56.060
sense and then we will be able to assign
multiple different categories to our
75

76
00:05:56.060 --> 00:05:59.780
recipe. So we'll have a many-to-many
relationship there. So we could bring up
76

77
00:05:59.780 --> 00:06:05.150
recipes for a specific category or query
a category and get recipes that way. So
77

78
00:06:05.150 --> 00:06:10.789
it definitely be a two-way relationship
there. Alright so that is the data
78

79
00:06:10.789 --> 00:06:14.449
model that we are going to be using. Going forward, we are going to go step by
79

80
00:06:14.449 --> 00:06:18.169
step and build the JPA entities for this.
I'm going to show you exactly how to do
80

81
00:06:18.169 --> 00:06:22.639
that but I want to establish first just
the object relational model or the
81

82
00:06:22.639 --> 00:06:26.270
object model that we're building. Then
we're going to get into the object
82

83
00:06:26.270 --> 00:06:30.979
relational mapping via JPA and with the
Hibernate implementation and we'll get
83

84
00:06:30.979 --> 00:06:34.909
this implemented and we'll have
Hibernate happy to take data into our
84

85
00:06:34.909 --> 00:06:38.529
recipe application.
