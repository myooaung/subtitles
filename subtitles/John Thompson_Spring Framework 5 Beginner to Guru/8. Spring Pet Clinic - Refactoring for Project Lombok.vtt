WEBVTT
0
1
00:00:04.069 --> 00:00:09.510
In this video, we are going to tackle
adding in Project Lombok. We just saw
1

2
00:00:09.510 --> 00:00:15.150
that used here in the recipe project.
We are going to go ahead and get
2

3
00:00:15.150 --> 00:00:18.690
things cooking with the Spring Pet
Clinic project, so we're going to go ahead
3

4
00:00:18.690 --> 00:00:22.800
and add Project Lombok to that so I'll
assign this to myself and get it in
4

5
00:00:22.800 --> 00:00:28.980
progress. Let's toggle over to
IntelliJ. The first thing we want to
5

6
00:00:28.980 --> 00:00:35.010
do is go in and add in the Project
Lombok dependency so I'm going to add this
6

7
00:00:35.010 --> 00:00:42.570
up here, like so, and I'm copying this out
of a project that had Project Lombok
7

8
00:00:42.570 --> 00:00:47.579
brought in using Spring Initializer.
The Spring guys are setting this to an
8

9
00:00:47.579 --> 00:00:52.020
optional dependency and this impacts how
things are brought in to Mavens
9

10
00:00:52.020 --> 00:00:55.770
inheritance of different POMs. I'm
not quite sure why they're setting it at
10

11
00:00:55.770 --> 00:01:00.120
optional. I'm going to be honest to you. I looked
at it and I don't think it's needed but
11

12
00:01:00.120 --> 00:01:04.619
I'm going to kind of roll with that because
that's the way it's defaulting in. So
12

13
00:01:04.619 --> 00:01:11.400
this sets a Project Lombok for our
project as far as a dependency for a
13

14
00:01:11.400 --> 00:01:16.229
maven dependency. And then, the next thing
I need to do is come in and take a look
14

15
00:01:16.229 --> 00:01:21.720
at project settings. I want to come
in here and
15

16
00:01:21.720 --> 00:01:29.690
come under here look at Build Execution
Deployment, Compiler and Java compiler
16

17
00:01:29.690 --> 00:01:34.590
Annotation Processors. I want to make
sure that annotation processing is
17

18
00:01:34.590 --> 00:01:38.940
enabled. This is important to
make sure that is enabled because if you
18

19
00:01:38.940 --> 00:01:44.160
don't enable that, Project Lombok it's
not going to be compiled properly within
19

20
00:01:44.160 --> 00:01:50.190
the IDE. So it happens okay for Maven but
it will cause you headaches inside the
20

21
00:01:50.190 --> 00:01:56.660
IDE. I had to imply that
and say okay. So that brings in the
21

22
00:01:56.660 --> 00:02:05.090
dependency for our project. Actually,
it's only a pet clinic web.
22

23
00:02:05.090 --> 00:02:10.690
It should also be 
brought in to this guy here. You can
23

24
00:02:10.690 --> 00:02:15.430
see that I already have Project Lombok
so I probably don't need that.
24

25
00:02:15.430 --> 00:02:20.620
I grabbed the wrong POM by mistake. I'm
going to try to comment that out and make
25

26
00:02:20.620 --> 00:02:27.370
sure that everything happens okay.
Remember the gotchas we ran into some
26

27
00:02:27.370 --> 00:02:32.290
problems with how the equals are getting
set up as far as the references to and
27

28
00:02:32.290 --> 00:02:37.030
from so I'm going to go ahead and
continue with that and let's come in and
28

29
00:02:37.030 --> 00:02:39.209
say...
29

30
00:02:39.240 --> 00:02:44.599
I'm going to say rather than Data, I'm going to
do Setter
30

31
00:02:44.599 --> 00:02:48.290
Getter, NoArgsConstructor
31

32
00:02:48.290 --> 00:02:52.719
and let's do
32

33
00:02:52.910 --> 00:02:56.690
set up the Builder pattern as well. So
it's a number of annotations, but that
33

34
00:02:56.690 --> 00:03:01.010
does give us some pretty cool
functionality here. I'm going to copy
34

35
00:03:01.010 --> 00:03:05.020
these over to the other entities.
35

36
00:03:21.200 --> 00:03:24.790
In here, we can say at...
36

37
00:03:26.140 --> 00:03:32.410
and now I can start getting rid of these.
Allow Project Lombok to take care of the
37

38
00:03:32.410 --> 00:03:37.880
implementations of those. Let's see here. 
Private.
38

39
00:03:37.880 --> 00:03:44.650
That's where my getters and 
setters start so I can get rid of them.
39

40
00:03:46.040 --> 00:03:51.860
In these intermediate classes, I
found that it's usually good habit to go
40

41
00:03:51.860 --> 00:03:55.840
in and add getters and setters to those.
41

42
00:03:56.290 --> 00:04:00.640
So those will be made available 
because Lombok does some funny things
42

43
00:04:00.640 --> 00:04:05.319
with inheritance. It doesn't always
behave like you'd like it to. We are
43

44
00:04:05.319 --> 00:04:10.610
going to go ahead and set those like so.
That looks good.
44

45
00:04:10.610 --> 00:04:13.970
We're wiping out all these getters
and setters because now we're adding
45

46
00:04:13.970 --> 00:04:18.590
that in. We're also picking up the
Builder pattern so that's a nice
46

47
00:04:18.590 --> 00:04:26.080
thing that we can do here. We get rid of that, like so.
47

48
00:04:27.000 --> 00:04:29.420
Same thing for
this guy
48

49
00:04:29.559 --> 00:04:32.879
and then
49

50
00:04:34.370 --> 00:04:39.190
I'm just double-checking my work
and then finally Visit. We can get rid of
50

51
00:04:39.190 --> 00:04:41.400
these.
I think we are happy there so now let's
51

52
00:04:44.750 --> 00:04:49.220
come down and probably the best place to
check like this is going to be a bootstrap
52

53
00:04:49.220 --> 00:04:53.570
class because that's what we're working
with everything and you can see IntelliJ is
53

54
00:04:53.570 --> 00:04:58.820
currently happy. So let's go ahead and
start this to make sure everything's still
54

55
00:04:58.820 --> 00:05:07.040
happy using Project Lombok.
Everything seems to be okay.
55

56
00:05:07.500 --> 00:05:13.400
We are starting up normally, which is 
good. I'm going to stop this. And just
56

57
00:05:13.400 --> 00:05:19.270
out of being paranoid, let's come over
here.
57

58
00:05:19.700 --> 00:05:23.570
I'm going to do a clean.
That's going to clean out everything.
58

59
00:05:23.570 --> 00:05:28.220
This is just in case things are still
hanging around. Kind of a little bit of
59

60
00:05:28.220 --> 00:05:33.530
experience here, but I'm also going to go
in and package this, which will force a
60

61
00:05:33.530 --> 00:05:37.460
test and compile, so we'll get everything
compiled via Maven.
61

62
00:05:37.460 --> 00:05:44.060
You can see they were downloading a little bit
there some stuff. It looks like
62

63
00:05:44.060 --> 00:05:49.040
everything's compiling. We are getting a
context starting up, so that is one of
63

64
00:05:49.040 --> 00:05:52.430
our tests that's running to bring up the
Spring context and everything is still
64

65
00:05:52.430 --> 00:05:57.400
happy. Just a double check.
65

66
00:05:57.810 --> 00:06:02.040
These were a lot of changes that we are
now moving over to the annotations of
66

67
00:06:02.040 --> 00:06:07.560
Project Lombok, so a lot of functionality
that we picked up there. All that is
67

68
00:06:07.560 --> 00:06:13.680
happy. I'm happy with how that is running,
so let's take a look at in the Owner.
68

69
00:06:13.680 --> 00:06:20.850
You can see, here I click on 
that. You can see, I get rid of a lot of
69

70
00:06:20.850 --> 00:06:25.380
the getters and setters and at the same
time I brought in some functionality so
70

71
00:06:25.380 --> 00:06:29.930
I had now had the Builder pattern.
Let's come over here to data loader.
71

72
00:06:29.930 --> 00:06:34.430
I'm just going to show you this. I'm not
going to save it. I could come over to
72

73
00:06:34.430 --> 00:06:42.320
this and say Owner.builder.address.
73

74
00:06:43.910 --> 00:06:48.200
Rather than doing all these setter based
stuff, we could actually do a builder
74

75
00:06:48.200 --> 00:06:51.170
pattern, more of a functional
pattern, so that's a nice little
75

76
00:06:51.170 --> 00:06:56.150
addition that we'd got through using the
Project Lombok Builder Annotation. So
76

77
00:06:56.150 --> 00:07:00.920
hopefully, we'll be able to grab that
functionality at a future point in the
77

78
00:07:00.920 --> 00:07:04.880
course but I want to show you guys how
to do use that builder pattern and the
78

79
00:07:04.880 --> 00:07:10.070
biggest trick to using the Builder
pattern is to add in a AllArgs
79

80
00:07:10.070 --> 00:07:13.790
Constructor, so you want a NoArgsConstructor than an AllArgsConstructor.
80

81
00:07:13.790 --> 00:07:17.990
That allows Project Lombock to go
ahead and bring in the Builder pattern
81

82
00:07:17.990 --> 00:07:22.460
for you so it works out pretty nicely
for you. I'm going to double check
82

83
00:07:22.460 --> 00:07:30.730
this Owner. So that's a
Person. I just remembered one thing.
83

84
00:07:33.889 --> 00:07:37.889
You see the first name isn't coming
through so I'm going to show you a trick
84

85
00:07:37.889 --> 00:07:45.449
on Owner because we are extending out
the Person. In Person, I'm setting up a
85

86
00:07:45.449 --> 00:07:52.450
constructor on the person
and I want to make sure that we are now if
86

87
00:07:52.450 --> 00:07:57.930
I can get a constructor for that.
So now it's asking me for the person as
87

88
00:07:57.930 --> 00:08:02.880
well
that I want.
88

89
00:08:05.449 --> 00:08:08.319
Now that we have the Owner...
89

90
00:08:09.419 --> 00:08:15.409
Set pets. We're still not getting the
first name, last name.
90

91
00:08:19.919 --> 00:08:23.400
Let me pause this and look at it a
little bit closer. Getting these
91

92
00:08:23.400 --> 00:08:26.849
extensions working with the Builder
pattern can be a little tricky. I'm going to
92

93
00:08:26.849 --> 00:08:33.560
pause this and be right back.
93

94
00:08:35.310 --> 00:08:40.260
All right jumped ahead a little bit and
what I had to do is this a little more
94

95
00:08:40.260 --> 00:08:46.170
complex out object model. You can see
here that now I have an Owner and I
95

96
00:08:46.170 --> 00:08:50.490
annotated at the constructor level to
generate the Builder. So the Builder is
96

97
00:08:50.490 --> 00:08:55.410
going to generate everything out as far
as the id, firstName, lastName. So these
97

98
00:08:55.410 --> 00:09:01.980
first three properties are coming from
the person class, so I'd go into the
98

99
00:09:01.980 --> 00:09:09.570
person class, create a constructor for
that, and then also, for the base entity, I
99

100
00:09:09.570 --> 00:09:14.550
need to set up a constructor for that. So
I now have a NoArgs and AllArgs
100

101
00:09:14.550 --> 00:09:20.370
Constructor. So that should do everything.
I am going to restart this, just in case.
101

102
00:09:20.370 --> 00:09:27.810
Make sure that I didn't break anything
inadvertently. This here's where
102

103
00:09:27.810 --> 00:09:35.089
I was going in. So I can see now I can do
the id that's off the map superclass
103

104
00:09:35.690 --> 00:09:40.130
and also firstName. So now, I can build
out the full object graph with the Owner
104

105
00:09:40.130 --> 00:09:43.720
so I'm going to get rid of that.
105

106
00:09:44.220 --> 00:09:48.410
Let's go ahead and I make sure that this
will compile.
106

107
00:09:48.410 --> 00:09:53.800
I'm going to go ahead and start it. Make
sure everything's still happy.
107

108
00:09:55.900 --> 00:10:01.450
That is good. So just to recap there,
going back to the Owner because I have
108

109
00:10:01.450 --> 00:10:05.860
an Owner that extends out a Person, which
extends out the base entity, I had to set
109

110
00:10:05.860 --> 00:10:11.080
up chain of constructors on that, and
then, I have all the properties including
110

111
00:10:11.080 --> 00:10:15.250
the inherited class so id comes from
from the base entity. firstName, last
111

112
00:10:15.250 --> 00:10:21.250
Name comes from the Person, Person object.
So now, Person has a constructor that
112

113
00:10:21.250 --> 00:10:28.900
takes an id, firstName and the Person
calls the constructor of the base entity
113

114
00:10:28.900 --> 00:10:34.540
and passing an id. So now, I get the
desired functionality of the Builder
114

115
00:10:34.540 --> 00:10:38.410
pattern. I don't know if you've ever
manually written to build a pattern. I
115

116
00:10:38.410 --> 00:10:43.120
love using builder patterns because
they're so convenient. But if you
116

117
00:10:43.120 --> 00:10:48.100
are writing them on an POJO, it is tedious.
So hopefully you guys find some benefit.
117

118
00:10:48.100 --> 00:10:51.280
I know it's a little confusing. Didn't
quite go as smooth as I'd like, but
118

119
00:10:51.280 --> 00:10:55.900
sometimes that happens. I'm trying
to show you live coding here, and this is
119

120
00:10:55.900 --> 00:10:59.380
is a little tricky to implement. But as
long as you remember, you want to get all
120

121
00:10:59.380 --> 00:11:03.310
the properties. When we get into
inheritance, you can setup that Builder
121

122
00:11:03.310 --> 00:11:08.320
pattern to go against rather
complex object model and give yourself
122

123
00:11:08.320 --> 00:11:14.950
some nice code to work with as your
project develops. So that was number 51.
123

124
00:11:14.950 --> 00:11:18.090
I'm going to go ahead and close that.
Adding Project Lombok.
124

125
00:11:21.050 --> 00:11:25.910
One of my favorite projects.
125

126
00:11:25.910 --> 00:11:29.380
Closes out number 51.
126

127
00:11:30.840 --> 00:11:37.110
I'm going to do a quick push and that will be up
in GitHub.
