WEBVTT
0
1
00:00:05.120 --> 00:00:11.219
Okay! What we want to do here is look at
creating an XSD, so XML schema. So, we
1

2
00:00:11.219 --> 00:00:16.109
have our XML, that's been generated from
our POJOs, that we've generated before in
2

3
00:00:16.109 --> 00:00:20.550
the class. Take a look at the actual
XML. It's not that great of a structure.
3

4
00:00:20.550 --> 00:00:24.480
So, we have CustomerListDTO. Then,
we have an element called customers.
4

5
00:00:24.480 --> 00:00:29.510
Then, we have another element called
customers firstname, lastname, and then
5

6
00:00:29.510 --> 00:00:33.899
customer underscore URL. So, these are all
things that I want to clean up. This
6

7
00:00:33.899 --> 00:00:38.910
not very well structured. It's a little
sloppy. It just came from the POJOs that
7

8
00:00:38.910 --> 00:00:43.530
we had. And really, what's happening here
is Jackson is looking at our data
8

9
00:00:43.530 --> 00:00:47.010
structure and really doing that best guess
that it has. We haven't given it any
9

10
00:00:47.010 --> 00:00:52.350
mapping hints or anything like that. So,
what I'm going to show you here is we are
10

11
00:00:52.350 --> 00:00:57.239
going to create a XML schema. This is a
little bit old school because XML seems
11

12
00:00:57.239 --> 00:01:02.129
to have fallen out of favor, so to speak,
in modern Java development, but it's
12

13
00:01:02.129 --> 00:01:06.720
still a very good tool to use. It is
rock-solid and mature. It's actually so
13

14
00:01:06.720 --> 00:01:10.710
mature it's rather boring. But it is
still a very good technology that we can
14

15
00:01:10.710 --> 00:01:14.760
leverage, and I want to show you this
because this is going to be a convenient
15

16
00:01:14.760 --> 00:01:19.409
way, when we're designing our APIs. One
of the things I like to do is work from
16

17
00:01:19.409 --> 00:01:27.600
an XSD. So, XSD is XML schema that
is going to describe our data. It's a
17

18
00:01:27.600 --> 00:01:31.920
tool that makes it kind of neutral. So,
the JSON community is pursuing JSON
18

19
00:01:31.920 --> 00:01:36.240
schema. But that is still in the beta
stages at the time of recording this.
19

20
00:01:36.240 --> 00:01:38.820
They haven't come out with an official
release. That's still going through
20

21
00:01:38.820 --> 00:01:44.399
iterations. Now, XSD has been approved
and the community has approved them for a
21

22
00:01:44.399 --> 00:01:49.020
long time ago. So, like I
said, this area technology so mature is
22

23
00:01:49.020 --> 00:01:53.250
boring, but it's still a very good
technology that we can look at. What
23

24
00:01:53.250 --> 00:02:00.240
I want to do here is take the first step
and show you how to work with XSD. So
24

25
00:02:00.240 --> 00:02:04.799
ultimately, what we're going to do is
take an XSD and we're going to tell JAXB
25

26
00:02:04.799 --> 00:02:09.929
to generate our Java classes from that
XSD, and then, we'll include those
26

27
00:02:09.929 --> 00:02:13.180
generated Java classes as our data types
that will be
27

28
00:02:13.180 --> 00:02:17.439
during back. Now, the generated classes
are going to come right from the XSD. So,
28

29
00:02:17.439 --> 00:02:22.689
once we get our XSD, we're going to
have a lot more control over how this is
29

30
00:02:22.689 --> 00:02:27.459
rendering. So, I want to clean this up. So,
like customers, I'd rather say customer
30

31
00:02:27.459 --> 00:02:31.659
list, and then, have that. You can see
there on line 3, where we have the
31

32
00:02:31.659 --> 00:02:35.680
inner customers. I'd rather have that
just as customer. Now, to make a lot more
32

33
00:02:35.680 --> 00:02:40.389
sense as a customer object. Then, on
line 6, like customer_url.
33

34
00:02:40.389 --> 00:02:46.239
Let's be consistent and use camel case in
there. So, I think we can clean this up a
34

35
00:02:46.239 --> 00:02:51.939
little bit nicer. So, let's go ahead and
do that. I am going to cheat. I'm
35

36
00:02:51.939 --> 00:02:58.000
going to copy this over. There's a
utility on the web called freeformater.com
36

37
00:02:58.000 --> 00:03:02.739
So, I'm going to paste that in. So, we
can see that all I've done here is paste
37

38
00:03:02.739 --> 00:03:09.310
of that in. I'm going to say generate
XSD, and we see, this is XSD, that
38

39
00:03:09.310 --> 00:03:16.780
it generated. I'm not teaching XML
schema in this. So, this is okay. You can
39

40
00:03:16.780 --> 00:03:21.699
see here, we have Russian Doll, Salami
Slice and Venetian Blind. These are their
40

41
00:03:21.699 --> 00:03:25.120
names for it, which is kind of
interesting. I did not come up with these
41

42
00:03:25.120 --> 00:03:29.620
in names, but you do have different
options here. So, I'm going to go through
42

43
00:03:29.620 --> 00:03:33.989
and take each one. You can see here, now,
we have a little more structure to it.
43

44
00:03:33.989 --> 00:03:39.790
Close but not quite what I want.
But in this Venetian Blind, I think
44

45
00:03:39.790 --> 00:03:43.689
this gives us a lot better structure. So
now, we have some pretty nicely
45

46
00:03:43.689 --> 00:03:50.530
structured XML schema here. So, I think
this gives us a real nice setup here. So
46

47
00:03:50.530 --> 00:03:56.769
we have Customer DTO type and customers
type. So, this gives us an element of a
47

48
00:03:56.769 --> 00:04:01.049
type of CustomerListDTOType. So, we get
the type here. So we have type
48

49
00:04:01.049 --> 00:04:04.569
declarations for all this. So, this is
exactly what we want to be working with
49

50
00:04:04.569 --> 00:04:10.030
for JAXB. We might have to adjust
as some going forward. But, I am going to
50

51
00:04:10.030 --> 00:04:16.150
copy this. Let's come over to our project
structure now, and you can see here in
51

52
00:04:16.150 --> 00:04:19.180
Spring MVC REST,
I've created a new folder called
52

53
00:04:19.180 --> 00:04:27.180
rest-model source main resources xsd. 
I'm going to create a new file
53

54
00:04:30.230 --> 00:04:34.000
and yes we will add that to get. I'm going to past that in. So
54

55
00:04:34.070 --> 00:04:38.900
now, we have our XML schema available in
GitHub. Now, what I'm doing here is I'm
55

56
00:04:38.900 --> 00:04:43.880
taking the first step of refactoring
this. So, we're not doing anything here.
56

57
00:04:43.880 --> 00:04:48.440
But this is going to become a Maven
module. Coming up, in the next few
57

58
00:04:48.440 --> 00:04:52.970
lessons, what we are going to do is
refactor this to a Multi Module Maven
58

59
00:04:52.970 --> 00:04:56.900
build. Now, I'm not teaching Maven
specifically, but I know I'm going to have a
59

60
00:04:56.900 --> 00:05:00.400
lot of skill levels going through this
course, but I'm going to take you through
60

61
00:05:00.400 --> 00:05:05.000
refactoring this project to a Multi
Module Maven Build, and what we want to
61

62
00:05:05.000 --> 00:05:10.070
do is effectively take our current
source for a Spring Boot project. We're
62

63
00:05:10.070 --> 00:05:14.570
going to move that into a module. We'll
have a parent POM over the two of those,
63

64
00:05:14.570 --> 00:05:19.310
and then, that Spring Boot project is
going to depend upon the rest-model
64

65
00:05:19.310 --> 00:05:24.380
Project. We are going to set up the
rest-model Project and tell Maven to use
65

66
00:05:24.380 --> 00:05:30.860
JAXB to generate Java classes. So,
this will generate. We can use JAXB
66

67
00:05:30.860 --> 00:05:35.210
to generate Java classes from that,
include those Java classes into a jar
67

68
00:05:35.210 --> 00:05:41.480
and have that jar brought in into our
soon to be created other module for the
68

69
00:05:41.480 --> 00:05:44.690
project that we have been working with.
So, this is going to be an opportunity to
69

70
00:05:44.690 --> 00:05:48.100
get to see how JAXB can be used and be
70

71
00:05:48.100 --> 00:05:52.400
to see a Multi Module Maven project. I'm
71

72
00:05:52.400 --> 00:05:56.180
telling you from experience, we're
working with pretty simple things here.
72

73
00:05:56.180 --> 00:06:01.640
But in the enterprise, it's not. Multi
module projects are probably more of the
73

74
00:06:01.640 --> 00:06:06.620
norm than they are of the exception. So,
as your projects get bigger and more
74

75
00:06:06.620 --> 00:06:11.420
complex, it does make sense to break them
out into multiple modules, because you
75

76
00:06:11.420 --> 00:06:17.810
might have data types, or real common
cases, your JPA entities to break those
76

77
00:06:17.810 --> 00:06:23.840
out into its own module so they can
be shared amongst modules. So, I'm going
77

78
00:06:23.840 --> 00:06:28.520
to save this, and then, in upcoming videos,
we are going to be looking at breaking
78

79
00:06:28.520 --> 00:06:33.170
this down into a multi module project
and implementing JAXB to generate
79

80
00:06:33.170 --> 00:06:35.740
those entities.
