WEBVTT
1
00:00:00.620 --> 00:00:03.780
This video we're gonna be taking a look at Java being validation.

2
00:00:03.950 --> 00:00:09.710
So this actually official API is part of Java came out under originally under GSR three or three and

3
00:00:09.710 --> 00:00:13.580
this is what kind of introduced the concept of Java being validation.

4
00:00:13.580 --> 00:00:21.020
Now before we had this toolset it was all up to you to do validation so it can be rather painful and

5
00:00:21.380 --> 00:00:23.690
actually really made your code pretty ugly.

6
00:00:23.720 --> 00:00:29.360
As far as all is property checking that you'd want to do inside a code and validations the bean validation

7
00:00:29.360 --> 00:00:31.480
that actually made things a lot simpler.

8
00:00:31.610 --> 00:00:38.600
And that's a nice framework it's the initial iteration was released on November 16th in 2009 and this

9
00:00:38.600 --> 00:00:41.960
has been part of Java EE Version 6 or above.

10
00:00:41.960 --> 00:00:44.130
So this is Jess are three or three.

11
00:00:44.150 --> 00:00:49.100
This was also implemented in spring in version three of the spring framework and we're on Version 5

12
00:00:49.130 --> 00:00:49.610
now.

13
00:00:49.640 --> 00:00:55.950
So the primary ballot focus originally was to define annotations for data validation.

14
00:00:56.060 --> 00:01:01.990
The first iteration here on three or three was primarily targeted at field level properties.

15
00:01:01.990 --> 00:01:04.750
Now we had a conditional release come out.

16
00:01:04.840 --> 00:01:09.970
Jess are 349 This is released on April 10th in 2013.

17
00:01:09.970 --> 00:01:17.680
So still a little ways back but this got put in to G 7 and also spring framework for so kind of built

18
00:01:17.680 --> 00:01:24.570
upon the one dot one specification and this expanded out to method level validation also input parameters

19
00:01:24.580 --> 00:01:30.130
so you could start using as annotations are a more flexible way and then it also includes dependency

20
00:01:30.130 --> 00:01:36.180
injection for being validation component so more of a framework that could be used within your code.

21
00:01:36.200 --> 00:01:45.250
Now they didn't stop there just recently GSR 380 was ratified this was approved in August of 2017 originally

22
00:01:45.250 --> 00:01:46.760
and a two spring framework five.

23
00:01:46.780 --> 00:01:51.810
And it was I actually got into a spring framework five and released candidate two and this is going

24
00:01:51.810 --> 00:01:58.430
to be available in all spring boot to Spring Boot to us where we switched over a spring framework five.

25
00:01:58.540 --> 00:02:05.740
This is going to use hibernate validator six auto so the GSR the implementations that basically defined

26
00:02:05.740 --> 00:02:13.900
an API the hibernate validator that is an implementation of that API much like JPA is part of the Java

27
00:02:14.170 --> 00:02:21.130
itself it's part of the Java specification but that is only an API set of interfaces basically and it

28
00:02:21.130 --> 00:02:26.740
is up to you to select an implementation so hibernate is a very popular implementation of it hibernate

29
00:02:26.770 --> 00:02:34.320
validator as implantation of the bean validation API and as far as I know I believe hibernate validator

30
00:02:34.320 --> 00:02:36.670
is the only implementation for Java.

31
00:02:36.850 --> 00:02:41.440
To my knowledge I could be very wrong in that but I don't know of another implementation of being validation

32
00:02:41.440 --> 00:02:42.440
2.0.

33
00:02:42.520 --> 00:02:49.690
The primary goal of the second release was to use the Java 8 language features and then it also added

34
00:02:49.690 --> 00:02:55.600
an about eleven additional validation annotations so the remainder of everything that we'll talk about

35
00:02:55.610 --> 00:03:00.490
is going to be talking about being validation 2.0 specifically and be using that throughout the course.

36
00:03:00.880 --> 00:03:03.770
So we're not going to be talking about the previous release.

37
00:03:03.940 --> 00:03:09.140
Now the built in constraints that we get out of the box have been validation.

38
00:03:09.170 --> 00:03:12.750
We have now to see if a value is no not no obviously not at.

39
00:03:13.120 --> 00:03:15.260
And then cert True or false.

40
00:03:15.260 --> 00:03:22.380
Men and Max these player two numbers then we have decimal min and max these applied obviously decimal

41
00:03:22.380 --> 00:03:25.040
positions negative negative or zero.

42
00:03:25.050 --> 00:03:30.780
Those are pretty self-explanatory and then positive or zero again opposite of negative.

43
00:03:31.170 --> 00:03:35.910
Sighs This is an important one this is gonna check if a string is this size or it can also be applied

44
00:03:35.910 --> 00:03:36.570
to a collection.

45
00:03:36.570 --> 00:03:41.640
So if you're getting back a list you will make sure that that list has a certain number of properties.

46
00:03:41.790 --> 00:03:48.330
And that's going to be a minimum and maximum digits this can check four digits in fractions of digits.

47
00:03:48.330 --> 00:03:55.170
Then past past or present future a future present these are going to be dealing with the date in relation

48
00:03:55.170 --> 00:03:56.680
to the current date pattern.

49
00:03:56.790 --> 00:04:04.090
This is gonna give you the capability check against a regex pattern then we have not empty now empty

50
00:04:04.090 --> 00:04:10.900
and not blank or two different things though not empty checks if it is null or empty so you could have

51
00:04:10.900 --> 00:04:17.440
space characters or line breaks or something in there that technically is not empty and then not blank

52
00:04:17.440 --> 00:04:20.280
is going to make sure that you do have a string in there.

53
00:04:20.290 --> 00:04:26.580
So I can have a series of spaces and not blank will fail if it's just spaces.

54
00:04:26.590 --> 00:04:32.170
So you want some non whitespace characters there and then email RSA and you can check to see if the

55
00:04:32.170 --> 00:04:35.620
value is a valid email address.

56
00:04:35.860 --> 00:04:38.680
Script assert this is a kind of a tricky one to use.

57
00:04:38.680 --> 00:04:39.490
I've never used it.

58
00:04:39.490 --> 00:04:44.500
Never had a need to use it but you can provide a script to test the entire class.

59
00:04:44.500 --> 00:04:46.100
So kind of an edge case.

60
00:04:46.120 --> 00:04:49.650
I've never actually seen it used no other but never had to use it.

61
00:04:49.840 --> 00:04:54.540
A handy one is a credit card that's going to validate that is a valid credit card number.

62
00:04:54.550 --> 00:05:00.880
There's actually a lot that goes into credit card numbers there's a long if you're curious Google valid

63
00:05:00.910 --> 00:05:03.380
credit card numbers there's like an entire wiki page on it.

64
00:05:03.550 --> 00:05:09.700
So quite a bit to that currency this can deal with currencies make sure that you have a valid currency

65
00:05:09.700 --> 00:05:13.670
amount and then we have two annotations in relation to durations.

66
00:05:13.780 --> 00:05:18.460
And one thing I would point out is when I got to the script assert forgot to mention this at the beginning

67
00:05:18.460 --> 00:05:19.390
of the slide.

68
00:05:19.390 --> 00:05:24.850
These are hibernate validator specific constraints so previously what we're looking at was everything

69
00:05:24.890 --> 00:05:31.360
it being validation hibernate hibernate validator is giving you these additional bonuses and these are

70
00:05:31.360 --> 00:05:38.230
not part of the bean validation specification but they are part of hibernate validator so continue here

71
00:05:38.740 --> 00:05:41.710
and that is a one that stands for other things.

72
00:05:41.780 --> 00:05:46.420
It's a European product code that is deal with retail operations.

73
00:05:46.510 --> 00:05:54.430
Azman that's books as a number for publishing two standards there and then we have length.

74
00:05:54.430 --> 00:06:00.670
We make sure that a string length is a specific manner or Max could point length validates Cove Point

75
00:06:00.670 --> 00:06:04.650
length as of the annotated character sequences between men and Max included.

76
00:06:04.660 --> 00:06:10.020
And I'm not sure where you use that but that could be a handy one for some type of case.

77
00:06:10.030 --> 00:06:11.240
Got a couple of different checksum.

78
00:06:11.260 --> 00:06:14.410
So these are loan Chuck Montaigne model Levin.

79
00:06:14.440 --> 00:06:19.540
There's a specific use cases where those may be handy for something that you are working on to validate

80
00:06:20.080 --> 00:06:25.400
some type of user input range number between a specific range.

81
00:06:25.410 --> 00:06:30.000
Then we have the email so you can take in an Asian you know string and make sure that there's no malicious

82
00:06:30.000 --> 00:06:31.980
characters in their unique element.

83
00:06:31.980 --> 00:06:36.570
So this is going to go through a collection make sure that you have unique elements in it so validating

84
00:06:36.570 --> 00:06:38.650
a list has unique entries.

85
00:06:38.750 --> 00:06:40.680
Girl that's pretty self-explanatory.

86
00:06:41.910 --> 00:06:47.610
And then I read validator also gives you some very specific country constraints so you can see there

87
00:06:47.790 --> 00:06:48.990
on the slide.

88
00:06:48.990 --> 00:06:54.090
Here we have a couple for Brazilian and then some Polish validators as well.

89
00:06:54.330 --> 00:06:58.710
Now as far as usage goes we'll be getting into some usage coming up in the course.

90
00:06:58.710 --> 00:07:05.220
I'm really validator version 6 is as far as I know the only implementation of being validation 2.0 there

91
00:07:05.220 --> 00:07:07.130
might be another one being developed out there.

92
00:07:07.140 --> 00:07:09.050
I am honestly not aware of it.

93
00:07:09.080 --> 00:07:10.750
I really stuff works great for this.

94
00:07:10.860 --> 00:07:15.930
The documentation around the validation capabilities hibernate has some really good documentation.

95
00:07:16.020 --> 00:07:21.420
I'm not going to be able go too far into depth as far as how all the validation stuff works.

96
00:07:21.450 --> 00:07:28.230
There's actually a fairly robust toolset I highly recommend no don't read the official documentation

97
00:07:28.230 --> 00:07:34.320
there's a lot of really cool stuff to do with it and then bullet point there hibernate is likely to

98
00:07:34.320 --> 00:07:39.990
add additional predefined validators so I've gone through what was defined right now at this point in

99
00:07:39.990 --> 00:07:45.780
time I fully expect that they'll probably add additional validators in upcoming releases of the a validator

100
00:07:46.380 --> 00:07:52.200
and then also if you have a use case where you need to create your own you can actually define custom

101
00:07:52.200 --> 00:07:54.710
validators and this can be very handy.

102
00:07:54.720 --> 00:08:00.150
I've seen a need for this a number of times so if you have a specific use case to define a validator

103
00:08:00.180 --> 00:08:05.910
that you want to be able to reuse amongst your projects or within your project or over several projects

104
00:08:06.030 --> 00:08:11.040
you can create your own custom validator and provide an implementation of that for your own personal

105
00:08:11.040 --> 00:08:11.330
use.
