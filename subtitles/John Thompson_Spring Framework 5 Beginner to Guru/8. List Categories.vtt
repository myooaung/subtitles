WEBVTT
0
1
00:00:04.549 --> 00:00:09.450
Okay. In this video, we wanna go ahead
and implement our endpoint for the REST
1

2
00:00:09.450 --> 00:00:14.009
service. And you can see what I've done
here, I've created a controller, our
2

3
00:00:14.009 --> 00:00:18.600
CategoryController. I don't
think I pointed this out yet, but I am
3

4
00:00:18.600 --> 00:00:22.740
doing versioning. It's a best practice
when we're developing REST API. Has to do
4

5
00:00:22.740 --> 00:00:28.320
like a version one. So if we ever modify
this in production, we can do a version
5

6
00:00:28.320 --> 00:00:32.700
two, if there's a major change that we're
going to make to the API structure and
6

7
00:00:32.700 --> 00:00:36.540
this will allow your clients to go to the
version,
7

8
00:00:36.540 --> 00:00:40.950
the next version, when they are ready to
adapt to the changes. So kind of a best
8

9
00:00:40.950 --> 00:00:45.420
practice that I'm showing you here. 
I'm also adding that into my package
9

10
00:00:45.420 --> 00:00:50.160
names as well. So that's why I did the v1
there. So if we want to evolve this API,
10

11
00:00:50.160 --> 00:00:55.949
we can do so. Now, just like the last time,
I got the stub with a service
11

12
00:00:55.949 --> 00:01:02.460
set up here. And now, I've created a test
and introducing you to a new annotation
12

13
00:01:02.460 --> 00:01:07.020
here, @InjectMocks. So I have the CategoryService, and then, I have @InjectMocks. And
13

14
00:01:07.020 --> 00:01:09.900
what the sanitation is going to do is
automatically inject that Category
14

15
00:01:09.900 --> 00:01:13.740
Service into the controller. So we no
longer need to build the controller that
15

16
00:01:13.740 --> 00:01:19.320
way. So we can just get rid of that line.
And now, if I come in and run the test,
16

17
00:01:19.320 --> 00:01:23.430
I'll go ahead and run these right now.
Since we don't have the implementation,
17

18
00:01:23.430 --> 00:01:28.080
we are expecting the test to fail, and we
see that we're getting a 404 not found
18

19
00:01:28.080 --> 00:01:32.369
error. Again, we're getting that on both
of them because we have not implemented
19

20
00:01:32.369 --> 00:01:37.799
those. So let's go ahead and implement
those functions now on the Category. Now
20

21
00:01:37.799 --> 00:01:41.369
we do need to make one minor change here.
So let's take a quick look at our API
21

22
00:01:41.369 --> 00:01:45.090
spec. So we're gonna have categories
and it's gonna be a list of
22

23
00:01:45.090 --> 00:01:49.350
categories. But that's an actual object.
so we can see the JSON object there. So
23

24
00:01:49.350 --> 00:01:55.799
what we wanna do is create a DTO
object for that. Let's come out here to
24

25
00:01:55.799 --> 00:02:07.790
our model and we're gonna do a new Java
class on the CategoryListDTO. And let's...
25

26
00:02:12.560 --> 00:02:17.329
We're gonna create one property here.
26

27
00:02:20.180 --> 00:02:24.510
We just wanna call that
categories. Now, Project Lombok is
27

28
00:02:24.510 --> 00:02:30.060
gonna give us a constructor for that as
well and that will give us all set for
28

29
00:02:30.060 --> 00:02:41.430
that. So here, what will return back is
a ResponseEntity of the type 
29

30
00:02:41.430 --> 00:02:53.879
CategoryListDTO. We'll return back a new, I'm gonna
say new and that's gonna take in a
30

31
00:02:53.879 --> 00:03:07.530
list of categories. So our categoryService. That also takes on the 
31

32
00:03:07.530 --> 00:03:13.620
HttpStatus. Let's clean this up a
little bit so that's a little more
32

33
00:03:13.620 --> 00:03:21.690
readable there. So in this, just do a GetMapping on it and remember, we wanna go
33

34
00:03:21.690 --> 00:03:26.879
to this url api/v1/controllers. So when we
do a GET against that, that is what we
34

35
00:03:26.879 --> 00:03:35.430
are going to return back. So let's
go ahead and run our test now. You
35

36
00:03:35.430 --> 00:03:41.250
can see that the first test case is
passing. Let's go ahead and implement
36

37
00:03:41.250 --> 00:03:48.959
the next one. It's also gonna return
back a response on it. And this time, it's
37

38
00:03:48.959 --> 00:03:54.109
gonna be a CategoryDTO. So we're
returning back one.
38

39
00:03:59.420 --> 00:04:08.550
Again, this is gonna be GetMapping. But
this time, I'm gonna do by. Give this a
39

40
00:04:08.550 --> 00:04:19.220
@PathVariable, new ResponseEntity again,
and it's gonna take in that CategoryDTO.
40

41
00:04:19.220 --> 00:04:30.360
So we'll do a categoryService.findByName. It was a okay. So that would
41

42
00:04:30.360 --> 00:04:38.940
set up that mapping. And we ran into a
failure here so we're getting a 404 not
42

43
00:04:38.940 --> 00:04:44.360
found. I didn't need to do with
squigglies. That was my mistake.
43

44
00:04:44.360 --> 00:04:51.750
Let's try this again. So now, both tests
are passing and let's take a closer
44

45
00:04:51.750 --> 00:04:57.000
look at that test. A couple things I wanna show you here, we are doing a MockMvc
45

46
00:04:57.000 --> 00:05:02.100
or performing a get against that URL. And
now, we're saying contentType of
46

47
00:05:02.100 --> 00:05:07.620
APPLICATION_JSON and we're saying we
are expecting a status of isOk. And
47

48
00:05:07.620 --> 00:05:14.250
then, we're also using matchers here of
jsonPath. So I am looking examining the
48

49
00:05:14.250 --> 00:05:18.060
JSON object. So the dollar sign is the
root and I'm saying categories. I'm
49

50
00:05:18.060 --> 00:05:22.380
expecting to have two elements in there,
which it did, because we are passing that.
50

51
00:05:22.380 --> 00:05:27.600
And now, on the getByName, you can see
that we're also setting up the object by
51

52
00:05:27.600 --> 00:05:33.419
named and returning it with a mock again.
And now, we are going against the URL to
52

53
00:05:33.419 --> 00:05:38.970
that name value. And I am coming back and
looking at the JSON object that was
53

54
00:05:38.970 --> 00:05:44.460
returned and saying that it is equal to
by name. So in this case, both both tests
54

55
00:05:44.460 --> 00:05:47.750
are now passing for us.
