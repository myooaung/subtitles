WEBVTT
0
1
00:00:36.230 --> 00:00:41.010
Hope you guys enjoyed that opening video
there. Little clip from one of my
1

2
00:00:41.010 --> 00:00:45.329
favorite movies. Curious who actually
knows what movie that clip is from. I'll
2

3
00:00:45.329 --> 00:00:50.339
give you a hint. I am a big Quentin
Tarantino fan. Great movie.
3

4
00:00:50.339 --> 00:00:54.479
He does some very interesting movies.
But I thought I'd do a little something
4

5
00:00:54.479 --> 00:00:58.589
special here because in this section,
with our pet clinic application, we are
5

6
00:00:58.589 --> 00:01:03.119
going to get into setting up the JPA
mapping. Now we have a bit of work to do
6

7
00:01:03.119 --> 00:01:07.740
for the mappings. In this video, we
are going to tackle setting up any base
7

8
00:01:07.740 --> 00:01:11.520
entity. So if I come in here, I just want
to show you that the reference
8

9
00:01:11.520 --> 00:01:17.250
application. So we're going to come here
main package. Under their model, we
9

10
00:01:17.250 --> 00:01:23.250
have our base entity. What we want to
do is implement this. And MapperSuperclass
10

11
00:01:23.250 --> 00:01:28.979
is a special annotation to JPA saying
we're going to take this. This is going
11

12
00:01:28.979 --> 00:01:33.600
to be a base class for objects to derive
from it. This is a pretty
12

13
00:01:33.600 --> 00:01:38.759
typical setup here. You do go in and add
in basically the id value. A lot of
13

14
00:01:38.759 --> 00:01:42.840
people also add in common things like
createDate and updateDate. Maybe we'll
14

15
00:01:42.840 --> 00:01:46.859
do that in a future video. But for right
now in this video, what we want to do
15

16
00:01:46.859 --> 00:01:53.850
is take care of this map superclass and
the ID generation. So let's toggle over
16

17
00:01:53.850 --> 00:01:57.049
to IntelliJ now.
17

18
00:01:57.229 --> 00:02:01.549
Let's take a look at our model.
Actually, I don't need you anymore.
18

19
00:02:01.549 --> 00:02:06.850
So let this stop. Let's minimize that window
down on the bottom of the Spring Boot.
19

20
00:02:06.850 --> 00:02:10.760
You're going to have a
videos here where we will start the
20

21
00:02:10.760 --> 00:02:14.810
mapping and I imagine it's probably
going to break things.
21

22
00:02:14.810 --> 00:02:18.940
We can come in here and say
22

23
00:02:19.240 --> 00:02:25.090
MapperSuperclass. This established this
as a base class to JPA. What we are
23

24
00:02:25.090 --> 00:02:29.740
doing is saying, "Hey JPA, we're going to
inherit from this class or other classes
24

25
00:02:29.740 --> 00:02:34.990
are going to be inheriting it." We don't
need this specific class mapped to the
25

26
00:02:34.990 --> 00:02:39.550
database". We're doing inheritance but
don't worry about doing anything special
26

27
00:02:39.550 --> 00:02:44.620
for it as far as creating just a class
that has an id value because obviously
27

28
00:02:44.620 --> 00:02:49.240
that's not what we want here. Now the
next thing that we need to do is come in
28

29
00:02:49.240 --> 00:02:56.160
and take care of this id property.
Let's come in here and do that.
29

30
00:02:57.790 --> 00:03:04.319
This annotation tells JPA that this
is the ID value.
30

31
00:03:04.700 --> 00:03:08.480
Add GeneratedValue 
and we were going to say strategy Generation
31

32
00:03:08.480 --> 00:03:11.110
Type IDENTITY.
32

33
00:03:15.129 --> 00:03:19.090
Now this generation type that we're
looking at, let's take a closer look at
33

34
00:03:19.090 --> 00:03:24.219
that. I'm going to just come in here and
I'm going to hold down command and click
34

35
00:03:24.219 --> 00:03:30.010
on that. This is going to go out to
the JPA class so this belongs to you can
35

36
00:03:30.010 --> 00:03:35.799
see Hibernate JPA. This is the API so
this is the the javax.persistence so
36

37
00:03:35.799 --> 00:03:39.209
this right out of the JPA specification. So it's a public enum.
37

38
00:03:39.209 --> 00:03:45.549
The GenerationType is going to be
TABLE, SEQUENCE, IDENTITY or AUTO. A
38

39
00:03:45.549 --> 00:03:50.409
TABLE means that we're going to have a
database table with the sequence number
39

40
00:03:50.409 --> 00:03:54.609
on that, so we'll have a value on a
database table that we're going to use to
40

41
00:03:54.609 --> 00:03:59.859
determine the maximum value and then the
next value. A SEQUENCE, databases have
41

42
00:03:59.859 --> 00:04:04.780
what's called a sequence generator, where
you can say give me the next number in a
42

43
00:04:04.780 --> 00:04:09.760
sequence. The functionality there and
this is depends on the underlying
43

44
00:04:09.760 --> 00:04:15.459
database. Now IDENTITY, which is what
we've selected is saying that we're
44

45
00:04:15.459 --> 00:04:20.979
going to insert it in the database is going
to provide us the identity value. We
45

46
00:04:20.979 --> 00:04:25.389
are targeting MySQL in this example, so
we are planning on using or I am
46

47
00:04:25.389 --> 00:04:29.050
planning I shouldn't say we. I am
planning on using an auto-generated
47

48
00:04:29.050 --> 00:04:33.130
column. The very common thing to do
inside of MySQL so that is what we're
48

49
00:04:33.130 --> 00:04:36.639
going for.
AUTO is basically saying that we're
49

50
00:04:36.639 --> 00:04:41.830
gonna pick one and we're going to allow
Hibernate to look at the underlying
50

51
00:04:41.830 --> 00:04:47.889
database and determine a strategy to use.
AUTO can give you some problems as far
51

52
00:04:47.889 --> 00:04:53.460
as unpredictable results. IDENTITY does
tie you to the specific database.
52

53
00:04:53.460 --> 00:04:59.229
SEQUENCE is a good choice. But again, the
database provider that you're using
53

54
00:04:59.229 --> 00:05:03.639
needs to implement that. So a number of
different things that we can do here. The
54

55
00:05:03.639 --> 00:05:07.690
identity generation, I could do several
lectures on it so I don't want to run
55

56
00:05:07.690 --> 00:05:12.430
down that rabbit hole right now. But for
right now, for what we're using, I want
56

57
00:05:12.430 --> 00:05:16.419
you to remember that we are targeting
MySQL for the database and we are going
57

58
00:05:16.419 --> 00:05:24.099
to be using an auto increment field, so
when we insert a record, MySQL is going
58

59
00:05:24.099 --> 00:05:28.139
to manage providing next number in the
sequence for us.
59

60
00:05:28.139 --> 00:05:33.389
This is going to be utilizing the
functionality of the underlying database.
60

61
00:05:33.389 --> 00:05:38.550
We're probably going to use H2 as well
as a in-memory database that will allow
61

62
00:05:38.550 --> 00:05:46.979
us to use H2 or MySQL. And H2 is very
commonly used for testing Spring
62

63
00:05:46.979 --> 00:05:51.629
applications. We're also going to... that
also provides us an auto increment so
63

64
00:05:51.629 --> 00:05:57.330
there's a high degree of compatibility
between H2 and the database syntax and
64

65
00:05:57.330 --> 00:06:04.110
how it is used with MySQL. So this
sets up our MapperSuperclass. So now, we
65

66
00:06:04.110 --> 00:06:08.699
set up everything. This generates that
right now. If we run Spring Boot, I expect
66

67
00:06:08.699 --> 00:06:12.779
to a toss an exception. We do need to
complete the mapping for the other
67

68
00:06:12.779 --> 00:06:18.120
classes in our model. In the JPA, we have a
number of annotations to do. We will
68

69
00:06:18.120 --> 00:06:23.279
accomplish that in upcoming videos. 
I'm going to go out and close
69

70
00:06:23.279 --> 00:06:27.500
out this task.
So that was implement base entity. That was
70

71
00:06:27.500 --> 00:06:30.340
number 35.
71

72
00:06:30.850 --> 00:06:35.010
Let's come in here and close out that.
72

73
00:06:47.620 --> 00:06:53.260
Just double-check. That was number 35 and
do a commit and
73

74
00:06:53.260 --> 00:06:56.820
push on that. That will close out the
issue.
