WEBVTT
0
1
00:00:00.407 --> 00:00:02.824
(soft music)
1

2
00:00:05.646 --> 00:00:06.536
<v Instructor>Alright, in this video</v>
2

3
00:00:06.536 --> 00:00:10.086
we are going to look at the HTTP request methods.
3

4
00:00:10.086 --> 00:00:12.017
So these are the verbs that we are going to be using
4

5
00:00:12.017 --> 00:00:14.490
as we go forward and work with web development
5

6
00:00:14.490 --> 00:00:17.041
and we are not going to see too many of them
6

7
00:00:17.041 --> 00:00:20.078
as we do traditional Spring MVC using forms
7

8
00:00:20.078 --> 00:00:22.991
and stuff like that. But as we move towards
8

9
00:00:22.991 --> 00:00:24.736
doing restful API's we are going to see
9

10
00:00:24.736 --> 00:00:28.392
a lot more involvement with the request methods.
10

11
00:00:28.392 --> 00:00:31.080
Request methods are also known as verbs
11

12
00:00:31.080 --> 00:00:34.331
and basically we are making a request at the server.
12

13
00:00:34.331 --> 00:00:37.236
So we are saying, hey, I want to do whatever,
13

14
00:00:37.236 --> 00:00:39.138
so it's a verb, it's an action request
14

15
00:00:39.138 --> 00:00:42.459
to tell the server to do something.
15

16
00:00:42.459 --> 00:00:45.888
The first one that we want to talk about is get.
16

17
00:00:45.888 --> 00:00:47.968
Get is a request for a resource,
17

18
00:00:47.968 --> 00:00:50.449
so you are saying I am going to get,
18

19
00:00:50.449 --> 00:00:52.558
usually it starts off with an HTML file,
19

20
00:00:52.558 --> 00:00:55.555
or you might want to get a javascript file or an image,
20

21
00:00:55.555 --> 00:00:59.211
you are asking the server to provide you a specific resource
21

22
00:00:59.211 --> 00:01:03.357
whether it's a binary image or a text HTML file.
22

23
00:01:03.357 --> 00:01:05.935
So there's a variety of things that you can ask
23

24
00:01:05.935 --> 00:01:08.039
the server for. And this is probably
24

25
00:01:08.039 --> 00:01:10.229
the most popular request method
25

26
00:01:10.229 --> 00:01:12.306
because get is what your browser's going to use
26

27
00:01:12.306 --> 00:01:14.238
when you go out to a website.
27

28
00:01:14.238 --> 00:01:17.165
Next method on the list is head.
28

29
00:01:17.165 --> 00:01:18.556
Head is a lot like a get,
29

30
00:01:18.556 --> 00:01:21.354
but it only asks for the meta information.
30

31
00:01:21.354 --> 00:01:23.971
So if you remember the examples there,
31

32
00:01:23.971 --> 00:01:25.981
we did have a payload body
32

33
00:01:25.981 --> 00:01:28.454
so if we were saying get an HTML file,
33

34
00:01:28.454 --> 00:01:31.032
we get all the header information that comes back,
34

35
00:01:31.032 --> 00:01:32.948
but we wouldn't get that HTML file
35

36
00:01:32.948 --> 00:01:35.198
if we use the head method.
36

37
00:01:36.945 --> 00:01:41.439
Now we have a post which is used to post data to the server.
37

38
00:01:41.439 --> 00:01:44.045
A very common use case is when you are on a form,
38

39
00:01:44.045 --> 00:01:47.054
you click that button to submit the form.
39

40
00:01:47.054 --> 00:01:50.714
It's an HTTP post that's happening in the background.
40

41
00:01:50.714 --> 00:01:52.881
So, let's see, here it is.
41

42
00:01:54.562 --> 00:01:58.961
Now put is a special request, encloses an entity
42

43
00:01:58.961 --> 00:02:03.128
and gives it a URI and it says, put this at that URI,
43

44
00:02:04.863 --> 00:02:08.817
and if whatever it's putting there is already there,
44

45
00:02:08.817 --> 00:02:10.788
it expects the server to update it
45

46
00:02:10.788 --> 00:02:13.393
and these are very, very easily confuses.
46

47
00:02:13.393 --> 00:02:16.877
A lot of new developers get confused about this.
47

48
00:02:16.877 --> 00:02:19.886
Easiest way to remember, post is a create request
48

49
00:02:19.886 --> 00:02:22.210
and that post is probably going to create something
49

50
00:02:22.210 --> 00:02:25.329
every time you post to it and there's some edge cases,
50

51
00:02:25.329 --> 00:02:29.404
but typically that is what's happening there with a post
51

52
00:02:29.404 --> 00:02:32.727
and then put is a create or update.
52

53
00:02:32.727 --> 00:02:36.437
So you're going to have like a JSON body with a,
53

54
00:02:36.437 --> 00:02:37.977
if you're doing a restful interface
54

55
00:02:37.977 --> 00:02:41.514
and your going to put that JSON and in that case,
55

56
00:02:41.514 --> 00:02:44.635
if it doesn't exist, it's going to get created,
56

57
00:02:44.635 --> 00:02:46.402
but if it does exist, you're expecting
57

58
00:02:46.402 --> 00:02:48.402
the server to update it.
58

59
00:02:49.560 --> 00:02:52.409
Then we have delete is a request
59

60
00:02:52.409 --> 00:02:54.717
to delete a specified resource.
60

61
00:02:54.717 --> 00:02:58.884
Now, it's important to understand delete is a HTTP method
61

62
00:03:00.821 --> 00:03:03.598
and people want to use it when you're doing a form,
62

63
00:03:03.598 --> 00:03:05.884
if you want to delete something from a web form,
63

64
00:03:05.884 --> 00:03:10.565
well the forms don't support, the HTML standard,
64

65
00:03:10.565 --> 00:03:13.995
does not support delete, it's only going to support a get
65

66
00:03:13.995 --> 00:03:18.301
or a post, so in this case, delete is not going to work.
66

67
00:03:18.301 --> 00:03:20.488
This is something that you're going to be seeing in use
67

68
00:03:20.488 --> 00:03:24.120
when you're doing restful interfaces, if you want to delete
68

69
00:03:24.120 --> 00:03:26.698
something when you're doing a restful API,
69

70
00:03:26.698 --> 00:03:29.762
this is the request method that you use.
70

71
00:03:29.762 --> 00:03:33.759
Trace is going to echo what was received by the server.
71

72
00:03:33.759 --> 00:03:37.580
So you are telling the server to say here is something
72

73
00:03:37.580 --> 00:03:41.576
I want you to receive, send it back what you sent me,
73

74
00:03:41.576 --> 00:03:44.237
and this is going to be happening when you want to see
74

75
00:03:44.237 --> 00:03:46.384
if there is intermediate servers between you
75

76
00:03:46.384 --> 00:03:48.526
and the target server that are going to modify it
76

77
00:03:48.526 --> 00:03:50.469
and this is something that happens that if you are
77

78
00:03:50.469 --> 00:03:53.563
in a corporation you are going to be going through proxy servers
78

79
00:03:53.563 --> 00:03:54.791
and these servers are going to be taking
79

80
00:03:54.791 --> 00:03:58.707
and handing your request off to the destination servers
80

81
00:03:58.707 --> 00:04:02.244
through proxies and they can modify the request
81

82
00:04:02.244 --> 00:04:03.472
so that's a way to see
82

83
00:04:03.472 --> 00:04:05.806
if something's been changed along the way.
83

84
00:04:05.806 --> 00:04:09.749
Options is a way to request the methods
84

85
00:04:09.749 --> 00:04:13.680
that are supported for a specific URL on the server.
85

86
00:04:13.680 --> 00:04:16.407
So you make an options request and the server
86

87
00:04:16.407 --> 00:04:20.846
will respond back with what methods are supported.
87

88
00:04:20.846 --> 00:04:23.546
Then we have connect and this is something
88

89
00:04:23.546 --> 00:04:26.651
that is going to create a TCP tunnel
89

90
00:04:26.651 --> 00:04:28.679
and a lot of times this is going to be used
90

91
00:04:28.679 --> 00:04:32.346
where you are on a HTTPS unencrypted channel
91

92
00:04:33.779 --> 00:04:36.371
and you are going through an unencrypted proxy
92

93
00:04:36.371 --> 00:04:38.506
and this is something as a developer
93

94
00:04:38.506 --> 00:04:40.595
I have never seen direct use for,
94

95
00:04:40.595 --> 00:04:42.824
this is probably something that's going to be happening
95

96
00:04:42.824 --> 00:04:45.081
in the network layer, under the covers,
96

97
00:04:45.081 --> 00:04:47.687
and part of the HTTP protocol,
97

98
00:04:47.687 --> 00:04:51.790
but something as developers we are not going to see.
98

99
00:04:51.790 --> 00:04:54.748
Patch is going to apply partial modification
99

100
00:04:54.748 --> 00:04:56.703
to the specified resource.
100

101
00:04:56.703 --> 00:05:00.645
In development, I've only seen this used a handful of times,
101

102
00:05:00.645 --> 00:05:04.438
so it's not something that's too common out there.
102

103
00:05:04.438 --> 00:05:06.911
Now, we need to talk about safe methods.
103

104
00:05:06.911 --> 00:05:08.572
Safe methods are considered safe to use
104

105
00:05:08.572 --> 00:05:10.621
because they only fetch information
105

106
00:05:10.621 --> 00:05:13.307
and do not cause changes on the servers.
106

107
00:05:13.307 --> 00:05:16.942
So safe methods are get, head, options and trace.
107

108
00:05:16.942 --> 00:05:20.448
Now it's important to say that they are expected
108

109
00:05:20.448 --> 00:05:22.110
not to cause changes on the server.
109

110
00:05:22.110 --> 00:05:24.943
So if you get a specific resource,
110

111
00:05:25.852 --> 00:05:28.479
like you are asking for an HTML page
111

112
00:05:28.479 --> 00:05:32.646
the server is expected return back the same thing every time.
112

113
00:05:33.544 --> 00:05:35.421
Of course, unless it's like dynamic data
113

114
00:05:35.421 --> 00:05:38.069
where it doesn't apply to that,
114

115
00:05:38.069 --> 00:05:41.040
but typically if you are going to get a javascript file
115

116
00:05:41.040 --> 00:05:44.682
it's expected to server back the same javascript file
116

117
00:05:44.682 --> 00:05:46.439
and then like the others, you should
117

118
00:05:46.439 --> 00:05:49.691
be getting the same response back.
118

119
00:05:49.691 --> 00:05:53.743
Idempotent methods, idempotent is actually a word
119

120
00:05:53.743 --> 00:05:55.957
and I actually had to look up to see how you say it.
120

121
00:05:55.957 --> 00:05:58.265
I have read it a thousand times and I was preparing for this,
121

122
00:05:58.265 --> 00:06:00.220
I'm like how do you say that word?
122

123
00:06:00.220 --> 00:06:01.887
So it's idempotence.
123

124
00:06:03.233 --> 00:06:06.497
That means a quality of an action such that repetitions
124

125
00:06:06.497 --> 00:06:10.400
of that action have no further effect on the outcome
125

126
00:06:10.400 --> 00:06:14.828
and we only have a couple, or actually we do have several.
126

127
00:06:14.828 --> 00:06:18.106
Put and delete are both considered idempotent methods,
127

128
00:06:18.106 --> 00:06:21.058
so you can put multiple times
128

129
00:06:21.058 --> 00:06:22.625
and you can delete multiple times.
129

130
00:06:22.625 --> 00:06:26.892
Remember the put is a creator update and a delete should,
130

131
00:06:26.892 --> 00:06:28.781
if it's already been deleted,
131

132
00:06:28.781 --> 00:06:31.304
it's not going to be deleting it again.
132

133
00:06:31.304 --> 00:06:35.137
Now I want to point out that the safe methods,
133

134
00:06:36.057 --> 00:06:40.092
get, head, trace and options, are also idempotent.
134

135
00:06:40.092 --> 00:06:42.119
So, by default, because they are safe methods
135

136
00:06:42.119 --> 00:06:43.389
they are not going to change anything,
136

137
00:06:43.389 --> 00:06:45.830
but the put and delete do change things,
137

138
00:06:45.830 --> 00:06:48.721
but they're expected to produce the same outcome every time,
138

139
00:06:48.721 --> 00:06:50.598
so you can recall them multiple times
139

140
00:06:50.598 --> 00:06:52.703
and the same thing's going to happen
140

141
00:06:52.703 --> 00:06:55.536
and lastly, being truly idempotent
141

142
00:06:56.575 --> 00:06:58.576
is not enforced by the protocol.
142

143
00:06:58.576 --> 00:07:01.799
This is part of the standard and this is what we're saying,
143

144
00:07:01.799 --> 00:07:05.880
we expect you to implement, but coders are coders,
144

145
00:07:05.880 --> 00:07:10.672
they can write things badly and cause unexpected actions,
145

146
00:07:10.672 --> 00:07:12.130
so that's important to know.
146

147
00:07:12.130 --> 00:07:14.261
So that's what's expected to happen,  
147

148
00:07:14.261 --> 00:07:16.678
but reality can be different.
148

149
00:07:17.745 --> 00:07:20.486
Now, non-idempotent methods.
149

150
00:07:20.486 --> 00:07:23.291
A post is not idempotent.
150

151
00:07:23.291 --> 00:07:25.723
So a lot of times multiple posts
151

152
00:07:25.723 --> 00:07:29.128
are likely to create multiple resources.
152

153
00:07:29.128 --> 00:07:32.419
I'm sure you've seen a website saying do not click twice
153

154
00:07:32.419 --> 00:07:35.025
because you'll submit that multiple times
154

155
00:07:35.025 --> 00:07:37.266
and cause unintended effects
155

156
00:07:37.266 --> 00:07:39.871
and whenever I see a website doing that,
156

157
00:07:39.871 --> 00:07:41.710
I actually get a little annoyed
157

158
00:07:41.710 --> 00:07:44.027
because it's usually a junior developer
158

159
00:07:44.027 --> 00:07:45.205
that doesn't know what they're doing
159

160
00:07:45.205 --> 00:07:48.700
because there are ways to protect against that.
160

161
00:07:48.700 --> 00:07:51.227
Here is a handy chart for you.
161

162
00:07:51.227 --> 00:07:54.397
It compares out all the request methods
162

163
00:07:54.397 --> 00:07:56.450
on the left hand side
163

164
00:07:56.450 --> 00:07:59.487
and then across the top we have request body,
164

165
00:07:59.487 --> 00:08:01.728
response body, is it safe,
165

166
00:08:01.728 --> 00:08:04.483
is it idempotent, or is it cachable
166

167
00:08:04.483 --> 00:08:05.549
and this is a handy grid
167

168
00:08:05.549 --> 00:08:07.653
you can use for your reference going forward.
168

169
00:08:07.653 --> 00:08:09.948
In the course notes, I'm going to leave
169

170
00:08:09.948 --> 00:08:12.365
a PDF here for your download.
170

171
00:08:13.527 --> 00:08:17.456
Next thing we need to review is HTTP status codes.
171

172
00:08:17.456 --> 00:08:20.494
These are several series of codes
172

173
00:08:20.494 --> 00:08:24.447
and the 100 series of codes are informational
173

174
00:08:24.447 --> 00:08:27.460
and to be honest, I've never really seen a situation
174

175
00:08:27.460 --> 00:08:30.889
where depending on a 100 series of codes.
175

176
00:08:30.889 --> 00:08:34.841
200 series indicate a successful request.
176

177
00:08:34.841 --> 00:08:37.127
300 series are redirections.
177

178
00:08:37.127 --> 00:08:40.891
This is a case of the server capabilities of saying,
178

179
00:08:40.891 --> 00:08:43.984
hey I have moved something, you need to go here,
179

180
00:08:43.984 --> 00:08:45.630
and this is actually pretty common
180

181
00:08:45.630 --> 00:08:49.476
because sometimes you move a page on a website
181

182
00:08:49.476 --> 00:08:51.935
and you have other people that are dependent
182

183
00:08:51.935 --> 00:08:56.864
on that page location and you get a 300 redirect to say,
183

184
00:08:56.864 --> 00:09:00.710
hey, that resource you want is over here now
184

185
00:09:00.710 --> 00:09:03.625
and this actually happens completely under the covers,
185

186
00:09:03.625 --> 00:09:06.648
so if you're browsing to a site and it's a 300 redirect,
186

187
00:09:06.648 --> 00:09:08.066
you don't even know it happened,
187

188
00:09:08.066 --> 00:09:10.175
that's all network chatter under the covers
188

189
00:09:10.175 --> 00:09:13.117
when you're using that application.
189

190
00:09:13.117 --> 00:09:16.700
400 series are client errors and this means
190

191
00:09:17.827 --> 00:09:21.607
you made a request and something was bad in your request
191

192
00:09:21.607 --> 00:09:24.739
and the 500 series are server side errors.
192

193
00:09:24.739 --> 00:09:28.250
This means something went bad on the server side
193

194
00:09:28.250 --> 00:09:30.452
and when you're doing web development,
194

195
00:09:30.452 --> 00:09:33.164
regardless of whether it's spring or something else,
195

196
00:09:33.164 --> 00:09:36.780
you are going to see plenty of 400 and 500 errors,
196

197
00:09:36.780 --> 00:09:39.441
but you want to be seeing the 200 errors,
197

198
00:09:39.441 --> 00:09:41.274
or 200 response codes.
198

199
00:09:42.812 --> 00:09:45.561
Now some common HTTP status codes
199

200
00:09:45.561 --> 00:09:49.228
are 200 okay, 201 created, and 204 accepted.
200

201
00:09:50.111 --> 00:09:53.092
This is where you have posted or did
201

202
00:09:53.092 --> 00:09:54.820
some type of action to a server
202

203
00:09:54.820 --> 00:09:57.965
and this is a request so you can do a get request
203

204
00:09:57.965 --> 00:10:02.123
and you are going to get a 200 status back from it.
204

205
00:10:02.123 --> 00:10:04.326
You might also get, if you are doing
205

206
00:10:04.326 --> 00:10:07.738
a rest interface and you post something,
206

207
00:10:07.738 --> 00:10:11.194
you are probably going to get a 200 or 201 back.
207

208
00:10:11.194 --> 00:10:12.545
301 is a redirection,
208

209
00:10:12.545 --> 00:10:14.718
so you are going to get a moved permanently,
209

210
00:10:14.718 --> 00:10:16.809
but as part of that response you are going to get
210

211
00:10:16.809 --> 00:10:19.741
where it's at, the new URL for it.
211

212
00:10:19.741 --> 00:10:23.074
400 errors, 400 could be a bad request,
212

213
00:10:23.074 --> 00:10:24.992
you have specified a media type
213

214
00:10:24.992 --> 00:10:29.986
that the server doesn't accept, maybe a character encoding
214

215
00:10:29.986 --> 00:10:31.389
that's not supported by the servers,
215

216
00:10:31.389 --> 00:10:34.510
so you've done something bad in the request
216

217
00:10:34.510 --> 00:10:36.723
and the server says I don't support
217

218
00:10:36.723 --> 00:10:38.722
what you're asking for, basically,
218

219
00:10:38.722 --> 00:10:41.586
and then 401 not authorized means that you're asking
219

220
00:10:41.586 --> 00:10:44.568
for a protected resource and your client
220

221
00:10:44.568 --> 00:10:47.376
has not gone through authorization for it.
221

222
00:10:47.376 --> 00:10:50.397
Then we also have good old 404,
222

223
00:10:50.397 --> 00:10:53.169
I'm sure everybody's seen a 404 error come back
223

224
00:10:53.169 --> 00:10:57.309
and then the 500, a lot of times, especially in Spring
224

225
00:10:57.309 --> 00:10:58.729
when you are doing development,
225

226
00:10:58.729 --> 00:11:02.763
if you get an unexpected exception you will get
226

227
00:11:02.763 --> 00:11:06.060
a 500 internal server error, that's pretty standard.
227

228
00:11:06.060 --> 00:11:09.675
503, a lot of times you can see service unavailable
228

229
00:11:09.675 --> 00:11:12.863
and that's going to be a lot of times
229

230
00:11:12.863 --> 00:11:14.363
these are a temporary condition
230

231
00:11:14.363 --> 00:11:16.561
like the server's overloaded or something like that.
231

232
00:11:16.561 --> 00:11:20.409
There are a number of other HTTP status codes,
232

233
00:11:20.409 --> 00:11:22.032
these are just a lot of common ones
233

234
00:11:22.032 --> 00:11:23.893
I wanted to give you some examples of.
234

235
00:11:23.893 --> 00:11:27.927
I'll leave a link in the course notes for you to see
235

236
00:11:27.927 --> 00:11:30.860
the full suite of HTTP status codes.
236

237
00:11:30.860 --> 00:11:35.354
Now for common, just regular web development,
237

238
00:11:35.354 --> 00:11:37.407
we're not going to see the full suite of those,
238

239
00:11:37.407 --> 00:11:40.836
but as you get into developing restful interfaces,
239

240
00:11:40.836 --> 00:11:43.308
you will see a lot more status codes
240

241
00:11:43.308 --> 00:11:45.391
that you're dealing with.
