WEBVTT
0
1
00:00:03.830 --> 00:00:08.309
Alright! In this video, we are gonna
take a look at a pull request that I
1

2
00:00:08.309 --> 00:00:13.049
received and this is from a student in
the course. And what they've done is
2

3
00:00:13.049 --> 00:00:19.590
they've gone in and added in the
French messages. Now, I absolutely do not
3

4
00:00:19.590 --> 00:00:23.820
speak French at all. I probably can order
a beer in French and that's probably the
4

5
00:00:23.820 --> 00:00:28.500
extent of my French language. So, I'm
gonna have to trust this person on what
5

6
00:00:28.500 --> 00:00:32.300
they've done there. You can see on
the screen here, I've got a note here
6

7
00:00:32.300 --> 00:00:38.790
from this person and what they did is
they forked my GitHub repository for
7

8
00:00:38.790 --> 00:00:41.640
Pet Clinic. They made some changes in
theirs
8

9
00:00:41.640 --> 00:00:46.860
and then they submitted a pull request
to me, and you can see here, this is where
9

10
00:00:46.860 --> 00:00:54.149
I got it. This is set up for pull
request number 59. I'm just gonna
10

11
00:00:54.149 --> 00:00:58.230
close out this email and we're gonna
view it up in GitHub, so you can see
11

12
00:00:58.230 --> 00:01:04.920
here Add French messages properties
number 59. I don't have a continuous
12

13
00:01:04.920 --> 00:01:09.930
integration set up. If I did, that'd be
shown here whether or not it passed.
13

14
00:01:09.930 --> 00:01:13.860
That's something I'm gonna add to this
very soon. I actually got planned on the
14

15
00:01:13.860 --> 00:01:17.729
doc. I think it's gonna be in the
next few videos to get CircleCI cooking.
15

16
00:01:17.729 --> 00:01:24.030
But here, what I wanna do is come in
and accept this. All he's done here
16

17
00:01:24.030 --> 00:01:30.619
is he added in one file. So this is a
single commit. You can see, under the
17

18
00:01:30.619 --> 00:01:36.420
resources/messages, we now have a
messages_fr.properties and
18

19
00:01:36.420 --> 00:01:42.329
fr is the international code for French.
You can see here, these are some
19

20
00:01:42.329 --> 00:01:45.450
properties that are set in there and I'm
just gonna have to trust that he's set
20

21
00:01:45.450 --> 00:01:50.340
up these Unicode characters correctly
and that is actual French. I'm going to
21

22
00:01:50.340 --> 00:01:55.770
trust him on that as far as getting
these properties cooking. So I'm gonna
22

23
00:01:55.770 --> 00:02:02.520
back up one step here and I'm gonna
go ahead and merge in this pull request.
23

24
00:02:02.520 --> 00:02:06.590
I'm just gonna confirm it and that will
24

25
00:02:07.100 --> 00:02:12.470
close out showing that pull request is
now merged. Nothing is left open. One is
25

26
00:02:12.470 --> 00:02:17.630
closed. So we can see that this Add French
messages properties is now closed inside
26

27
00:02:17.630 --> 00:02:24.380
a GitHub. Now what I need to do on my
application is come over here and I am
27

28
00:02:24.380 --> 00:02:32.770
going to go ahead and pull that. So I'm
gonna do a Git Repository Pull. This is gonna
28

29
00:02:33.400 --> 00:02:39.159
pull down that change from GitHub. You
see that I did get one. We can see that
29

30
00:02:39.159 --> 00:02:43.659
down on the bottom of the window here
that we did bring down that 
30

31
00:02:43.659 --> 00:02:48.129
messages_fr.properties. The way
this is gonna work is that's gonna match
31

32
00:02:48.129 --> 00:02:52.959
up to your locale. Now I wanna talk
about this for a little bit. I do go into
32

33
00:02:52.959 --> 00:02:57.970
this in my Spring Core Advanced Course.
It really hasn't changed much. I don't
33

34
00:02:57.970 --> 00:03:02.200
see a lot as much demand for it anymore
as far as doing localization like this.
34

35
00:03:02.200 --> 00:03:07.359
Spring does have very nice support built
in but we're seeing less international
35

36
00:03:07.359 --> 00:03:12.940
web development done on Spring and that
moving more to JavaScript frameworks
36

37
00:03:12.940 --> 00:03:17.019
like React and Angular where all the
heavy lifting is being done for
37

38
00:03:17.019 --> 00:03:21.730
the UI. Still very valid to do for
straight HTML development or Thymeleaf.
38

39
00:03:21.730 --> 00:03:25.450
I'm a big fan of Thymeleaf for doing that
but the bulk of the industry is kind of
39

40
00:03:25.450 --> 00:03:29.200
moving towards these JavaScript
frameworks right now, so not as prevalent
40

41
00:03:29.200 --> 00:03:34.019
as it was in the Spring community. What I
want to show you is just a quick
41

42
00:03:34.019 --> 00:03:39.849
what's going on here.
Out of the box, this is in. You can see
42

43
00:03:39.849 --> 00:03:45.040
here a Spring MVC. This is getting
wired up for us and this is a Spring
43

44
00:03:45.040 --> 00:03:49.739
MVC branch, specifically to the servlet. So
this is not gonna be addressing
44

45
00:03:49.739 --> 00:03:53.919
reactive. There is a reactive component
but I'm looking at the servlet version
45

46
00:03:53.919 --> 00:04:00.010
of it, and what this setting up as a
LocaleResolver and it does this 
46

47
00:04:00.010 --> 00:04:04.319
AcceptHeaderLocaleResolver,
and I got that up on the screen here.
47

48
00:04:04.319 --> 00:04:09.940
I don't have the sources downloaded but
you can see here it is going out of
48

49
00:04:09.940 --> 00:04:14.560
there request header and looking at the
exact Accept-language. I'll show you
49

50
00:04:14.560 --> 00:04:19.750
how that works here in a second.
Effectively, when you make a request with
50

51
00:04:19.750 --> 00:04:26.070
your browser, let's go ahead and start
this guy up so I can run him.
51

52
00:04:27.530 --> 00:04:31.880
When you make a request with your
browser, your operating system is going
52

53
00:04:31.880 --> 00:04:37.190
to determine your locale. So when you go
in and set up your computer, your French,
53

54
00:04:37.190 --> 00:04:41.390
your German, English, whatever, you're
gonna pick out a locale and that's
54

55
00:04:41.390 --> 00:04:46.130
gonna get transmitted to your browser.
You can see that we are up running. Let's
55

56
00:04:46.130 --> 00:04:52.150
come back over to Chrome and take a look
at localhost
56

57
00:04:53.780 --> 00:04:56.110
and let me come up here.
57

58
00:04:56.110 --> 00:04:59.310
I'm gonna go to View
58

59
00:04:59.639 --> 00:05:05.709
Developer Tools. This is a Chrome
extension. I do highlight a lot of the
59

60
00:05:05.709 --> 00:05:09.639
Chrome tools. I can actually all the
major browser tools. What I wanna
60

61
00:05:09.639 --> 00:05:15.039
do is come here take a look at network.
Let me refresh this again so I can
61

62
00:05:15.039 --> 00:05:21.459
capture that. When I look at this
localhost, let me bring this up a little
62

63
00:05:21.459 --> 00:05:26.030
bit.
And here is the request header. So this
63

64
00:05:26.030 --> 00:05:31.130
is HTTP going across the wire. The
secret sauce of how things are working
64

65
00:05:31.130 --> 00:05:38.150
is I'm doing an Accept-Language of en-US.
So if I wanted an English US property
65

66
00:05:38.150 --> 00:05:43.710
specifically, if I come back over here,
and look at the messages,
66

67
00:05:43.710 --> 00:05:47.610
you can see that we have several
different implementations here. If I
67

68
00:05:47.610 --> 00:05:53.070
wanted English US specific, the way
this is gonna work is it's gonna
68

69
00:05:53.070 --> 00:05:57.840
look at language and then the locale, so
the first two characters are language,
69

70
00:05:57.840 --> 00:06:02.730
secondary locale, so I could have a
different English properties file for US
70

71
00:06:02.730 --> 00:06:07.260
and another one for Great Britain
because the Brits do talk a little funny
71

72
00:06:07.260 --> 00:06:12.630
to me. Just a little plug at my British
colleagues. But that's how this is
72

73
00:06:12.630 --> 00:06:16.550
working. This is a real high-level
overview. I do go into
73

74
00:06:16.550 --> 00:06:22.740
internationalization quite a bit more.
But right now, if I either change my
74

75
00:06:22.740 --> 00:06:30.350
browser settings to send either French,
German, English or than the default,
75

76
00:06:30.350 --> 00:06:34.380
depending on how it's set up, that's how
it's going to resolve. So, kind of an
76

77
00:06:34.380 --> 00:06:37.919
important thing, and again, sometimes it's
a pain in the neck to change your
77

78
00:06:37.919 --> 00:06:42.330
browser settings to send this, otherwise
I'd be demonstrating it. It is possible
78

79
00:06:42.330 --> 00:06:49.470
to set up a LocaleChangeInterceptor. So
this is something that can be configured.
79

80
00:06:49.470 --> 00:06:54.210
I don't think Spring Boot configures this
by default, but you can configure it, add
80

81
00:06:54.210 --> 00:06:58.860
in a bean and then you can pass in a
parameter to change your language. So it's
81

82
00:06:58.860 --> 00:07:03.000
kind of handy thing to do if you needed
to do that functionality. Otherwise, if
82

83
00:07:03.000 --> 00:07:06.000
you don't have this set up and I'm
almost hundred percent sure it does not
83

84
00:07:06.000 --> 00:07:09.780
get auto configured for you inside a
Spring Boot. I could be wrong on that. But
84

85
00:07:09.780 --> 00:07:14.940
as far as I know. it does not. You do need
to change your browser settings to send
85

86
00:07:14.940 --> 00:07:20.190
in a different accept language. But for
now, if somebody from France were to
86

87
00:07:20.190 --> 00:07:27.030
check out this application and run it, they
would see properties from this French
87

88
00:07:27.030 --> 00:07:30.389
one from the contribution that was made.
So kind of a nice little contribution
88

89
00:07:30.389 --> 00:07:35.039
where the student made it,
internationalization for French.
89

90
00:07:35.039 --> 00:07:39.300
Maybe there'll be some more, If I do get
some more pull requests with different
90

91
00:07:39.300 --> 00:07:43.340
languages, I will update the project with
them.
