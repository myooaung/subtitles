WEBVTT
0
1
00:00:05.160 --> 00:00:10.470
In this video we are gonna start looking at the Spring Context. So we've already seen the Spring Context
1

2
00:00:10.470 --> 00:00:16.290
or some people called the Application Context in use. When we created that web application remember we
2

3
00:00:16.290 --> 00:00:19.400
were bringing up repository instances.
3

4
00:00:19.500 --> 00:00:25.620
Spring was giving us an instance of that repository and then in our controllers we asked for Spring
4

5
00:00:25.620 --> 00:00:29.980
to inject an instance of that repository into our controllers at runtime.
5

6
00:00:30.120 --> 00:00:35.880
That was all being done by the Spring Context. So you can think of the Spring Context as all the stuff
6

7
00:00:35.910 --> 00:00:41.100
that's going to be around your application. And when Spring starts up it's going to be looking at your
7

8
00:00:41.100 --> 00:00:47.580
project and you are going to have annotated dependencies. You might have configuration files. So all the
8

9
00:00:47.580 --> 00:00:52.770
stuff is going to get brought up into the context. So when Spring does come across the controller asking
9

10
00:00:52.770 --> 00:00:58.620
for a component what's happening is that it's going to go out to the context and see if I can find an
10

11
00:00:58.710 --> 00:01:01.210
instance of that or constructed at that time.
11

12
00:01:01.260 --> 00:01:06.480
So there's a couple different scenarios at play. We'll be exploring this more in the course in future
12

13
00:01:06.480 --> 00:01:07.200
videos.
13

14
00:01:07.290 --> 00:01:12.300
But in this video what we want start doing is just take a look at that Spring Context, conceptually start
14

15
00:01:12.380 --> 00:01:17.790
start remembering that it's not just your code that's executing. You have this context that Spring is going
15

16
00:01:17.790 --> 00:01:24.060
to be managing components. As it finds components, Spring Beans, those objects are going to
16

17
00:01:24.060 --> 00:01:30.360
get constructed and become available in the context. What this means is that we can go in and ask
17

18
00:01:30.360 --> 00:01:37.620
the context, the Spring application context, for a reference to that object. So if we have a controller
18

19
00:01:37.680 --> 00:01:43.000
that has been created in the context, this is a controller object that has been created. We can ask
19

20
00:01:43.000 --> 00:01:48.150
spring for a reference to that and then work with that constructed object that is being managed by the
20

21
00:01:48.150 --> 00:01:49.150
Spring Framework.
21

22
00:01:49.170 --> 00:01:56.550
So in this video we are going to go through an example of creating a controller and then asking the
22

23
00:01:56.550 --> 00:02:01.350
Spring Context for a reference to that. I'll show you how to do that inside of IntelliJ
23

24
00:02:01.410 --> 00:02:06.720
right now. Okay up on the screen, you can see that I have our Spring project loaded.
24

25
00:02:06.720 --> 00:02:14.480
We have the one main class here. What I want to do here is I'm going to create a example controller.
25

26
00:02:14.540 --> 00:02:22.830
I'm going to come up here create a new package. I'm just going to call that controllers like so and I'm
26

27
00:02:22.830 --> 00:02:26.540
gonna create a new Java class. I'm just gonna call this MyController.
27

28
00:02:31.470 --> 00:02:38.910
And here I'm going to annotate this as a Spring managed component so I'm telling it to use the Spring
28

29
00:02:39.150 --> 00:02:49.610
Controller stereotype. And let's just create a simple method that returns back a string and say Say
29

30
00:02:52.210 --> 00:03:04.300
hello world example. And in this I can do system out and then I can return a simple string that just
30

31
00:03:04.300 --> 00:03:07.480
says Hi Folks like so.
31

32
00:03:07.810 --> 00:03:15.070
So very simple. This is just a simple Java class with one method and that method I'm going to get a message
32

33
00:03:15.070 --> 00:03:17.710
of hello world to the council.
33

34
00:03:17.710 --> 00:03:19.960
So a very very simple method here.
34

35
00:03:20.080 --> 00:03:22.200
I'm not doing anything strange here.
35

36
00:03:22.290 --> 00:03:27.940
I just want a very simple controller that we can work with. And then in the application what we're gonna
36

37
00:03:27.970 --> 00:03:35.960
do is we're going to take this method here. What this does here, this run.
37

38
00:03:36.130 --> 00:03:40.010
This is actually going to turn back a application context.
38

39
00:03:40.190 --> 00:03:47.730
So what I can say here is I'm modifying this. I'm just going to say ctx for the name.
39

40
00:03:47.940 --> 00:03:56.060
So now I'm getting a handle on the Spring application context and I can actually ask that context
40

41
00:03:56.060 --> 00:04:03.970
for an instance of my controller so say my controller equals and I need to do a cast here because it
41

42
00:04:03.970 --> 00:04:05.460
just returns back an object type.
42

43
00:04:07.910 --> 00:04:12.560
And I can say getBean and give it the name of the bean.
43

44
00:04:12.590 --> 00:04:18.560
And by default when Spring creates beans, the string name of the bean is going to be the class name.
44

45
00:04:18.560 --> 00:04:27.180
But beginning with a lower case . So I just say myController like so and that that's how we ask the Spring
45

46
00:04:27.180 --> 00:04:32.040
Context because when the starts up Spring is going to go through, scan for beans.
46

47
00:04:32.070 --> 00:04:36.050
Things have been annotated as beans and create those into the context.
47

48
00:04:37.750 --> 00:04:51.160
Now I can say greeting equals myController sayHello and then I can also do sys out greeting.
48

49
00:04:51.220 --> 00:04:57.610
So what's gonna happen here is I'm asking the context for the controller. I am getting the return value
49

50
00:04:57.640 --> 00:04:58.500
and the greeting.
50

51
00:04:58.630 --> 00:05:04.180
But when I say that say hello and that is going to run that method inside the controller and we'll get
51

52
00:05:04.180 --> 00:05:10.480
that greeting output to the council. So when I run this, we will get Hello World and then we should see
52

53
00:05:10.480 --> 00:05:12.790
it followed right by Hi folks.
53

54
00:05:12.790 --> 00:05:19.950
So let's go ahead and run this now. So I'm just just going to run the Spring application. It takes a
54

55
00:05:19.950 --> 00:05:21.510
second for it to compile.
55

56
00:05:21.570 --> 00:05:29.720
You can see that Spring Boot did start up. Let me resize this here. So we can see that Spring Boot started.
56

57
00:05:30.290 --> 00:05:37.070
Unlike what we did before where we're bringing up a web application there is no Web Context. So effectively
57

58
00:05:37.160 --> 00:05:41.080
this starts and then stops because there's no web server configured.
58

59
00:05:41.150 --> 00:05:46.820
So this is very very light lightweight Spring application but we see on the council just as we expected
59

60
00:05:47.300 --> 00:05:49.010
we did get a bean.
60

61
00:05:49.010 --> 00:05:54.560
So the bean is being brought up and we are seeing that controller. we are getting that green from
61

62
00:05:54.560 --> 00:06:00.740
there. So we execute the say a Hello method and that method says Hello World but it also returns back
62

63
00:06:00.770 --> 00:06:01.190
the string.
63

64
00:06:01.220 --> 00:06:02.360
Hi folks.
64

65
00:06:02.360 --> 00:06:06.550
And then on line 18 we output  that data.
65

66
00:06:06.560 --> 00:06:13.100
Now one thing I do want to point out here is notice that I never asked never created that controller
66

67
00:06:13.100 --> 00:06:13.500
object.
67

68
00:06:13.520 --> 00:06:18.820
Nowhere in the code did I say new controller. The spring framework is actually doing that for us.
68

69
00:06:18.850 --> 00:06:19.950
So it's going out.
69

70
00:06:20.100 --> 00:06:22.730
What's happening underneath the covers.
70

71
00:06:22.850 --> 00:06:29.510
Spring is creating that. So inside the Spring Context, Spring effectively is saying create a new instance
71

72
00:06:29.510 --> 00:06:36.680
of this class, put it into the context, and then when I run here what's happening is on line 14 I'm saying
72

73
00:06:36.680 --> 00:06:43.000
hey Spring I want an instance of this so from the context provide me an instance of this bean.
73

74
00:06:43.000 --> 00:06:46.550
So the Spring that's how the inversion of control works.
74

75
00:06:46.550 --> 00:06:51.610
The Spring Framework is managing the construction of myController.
75

76
00:06:51.620 --> 00:06:53.290
So Spring is providing it.
76

77
00:06:53.300 --> 00:06:55.590
So I'm not creating a new object there.
77

78
00:06:55.710 --> 00:06:58.950
I'm asking Spring to provide me an object there.
78

79
00:06:58.970 --> 00:07:05.090
So this is like one of the fundamental tenants of Dependency Injection is to have the framework doing
79

80
00:07:05.090 --> 00:07:06.450
all the management of it.
80

81
00:07:06.470 --> 00:07:12.560
So the framework is going out and creating those objects for you and providing those instantiated objects.
81

82
00:07:12.560 --> 00:07:14.780
You can see there I did not create it myself.
82

83
00:07:14.990 --> 00:07:18.820
I asked the framework for an instance of that object.
83

84
00:07:18.980 --> 00:07:23.720
And then on line 16, I utilized that object to execute the sayHello method.
