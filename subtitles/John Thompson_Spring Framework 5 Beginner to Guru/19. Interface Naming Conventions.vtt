WEBVTT
0
1
00:00:01.930 --> 00:00:07.300
All right in this video I want to talk about interface naming conventions, the best practices around
1

2
00:00:07.300 --> 00:00:12.030
naming, because I get a lot of questions as we get into Dependency Injection.
2

3
00:00:12.040 --> 00:00:17.400
How should I name my interfaces? How should I name the implementation of the interfaces?
3

4
00:00:17.440 --> 00:00:19.770
So I want to give you some general rules of thumb.
4

5
00:00:19.780 --> 00:00:25.210
The interface should be a good object name. For example if you look at Java's List interface.
5

6
00:00:25.300 --> 00:00:31.020
There's literally thousands of implementations of the List interface like a ArrayList, LinkedList, CheckList,
6

7
00:00:31.050 --> 00:00:32.590
SingletonList.
7

8
00:00:32.620 --> 00:00:35.150
I mean there's stuff out there I have never even heard of.
8

9
00:00:35.280 --> 00:00:37.120
Sure what they do to be honest.
9

10
00:00:37.120 --> 00:00:39.610
So these are all good names for it.
10

11
00:00:39.970 --> 00:00:45.700
So the list when you implement the list you really don't care what it is. You're just asking for a list
11

12
00:00:45.820 --> 00:00:48.210
object and an implementation of it.
12

13
00:00:48.220 --> 00:00:53.320
So you don't get down to the nitty gritty details of the difference between an ArrayList and a
13

14
00:00:53.320 --> 00:00:53.580
LinkedList.
14

15
00:00:53.590 --> 00:00:56.820
You don't care when you're using the list interface as it should be.
15

16
00:00:56.830 --> 00:01:02.770
Some people like to start their interfaces with that letter 'I' and I'm saying no I list.
16

17
00:01:02.770 --> 00:01:08.590
I think this is a dot net community thing where they prefix the interface name with an 'I' so you know
17

18
00:01:08.590 --> 00:01:09.440
that as an interface.
18

19
00:01:09.450 --> 00:01:14.920
So it gives you a visual interface and the Java folks really don't like that. We don't like to see
19

20
00:01:14.920 --> 00:01:16.870
that I in front of it interface name.
20

21
00:01:17.230 --> 00:01:22.510
So when you name the interface go ahead and make a good object name and that's something that you're
21

22
00:01:22.510 --> 00:01:23.350
going to be utilizing.
22

23
00:01:23.350 --> 00:01:30.490
Now let's talk about the implementation of that. When there is just one implementation, that's generally
23

24
00:01:30.550 --> 00:01:33.280
acceptable to user interface and then Impl.
24

25
00:01:33.310 --> 00:01:35.750
So going back to list you could use a list
25

26
00:01:35.760 --> 00:01:36.280
Impl
26

27
00:01:36.310 --> 00:01:38.800
I M P L for implementation.
27

28
00:01:38.800 --> 00:01:42.370
This is very accepted within the Java community.
28

29
00:01:42.400 --> 00:01:47.620
I've had students come back and say hey you're using Impl rather than something that makes sense.
29

30
00:01:47.620 --> 00:01:50.110
Generally if you only have one.
30

31
00:01:50.170 --> 00:01:52.320
It's OK to use Impl.
31

32
00:01:52.350 --> 00:01:58.610
So if you don't see a need for one error, make a distinction there, perfectly fine to use just
32

33
00:01:58.670 --> 00:02:02.320
Impl. Largely accepted within the community.
33

34
00:02:02.320 --> 00:02:09.490
However if you're gonna have multiple implementations of the interface then that name should indicate
34

35
00:02:09.850 --> 00:02:11.230
the difference of that.
35

36
00:02:11.710 --> 00:02:13.000
So that's very important.
36

37
00:02:13.060 --> 00:02:18.730
Impl, if you're only gonna have one. Very common within Spring to just have one implementation of
37

38
00:02:18.730 --> 00:02:23.950
an interface and then when you get to testing you're going to be using that interface to generate mocks
38

39
00:02:23.950 --> 00:02:29.110
or stubs and things like that for your test framework then maybe you want to give those implementations
39

40
00:02:29.410 --> 00:02:32.830
a name or just happen to use a mock or you really don't name it.
40

41
00:02:32.830 --> 00:02:34.090
And that's perfectly fine.
41

42
00:02:34.090 --> 00:02:40.690
But the key point is where you just have one, Impl is fine. If you have more than one, then give something
42

43
00:02:40.690 --> 00:02:42.940
in the name of it to indicate the difference.
43

44
00:02:42.940 --> 00:02:49.430
So I'm going to jump over to IntelliJ now and show you an example of this in action.
44

45
00:02:49.710 --> 00:02:50.100
OK.
45

46
00:02:50.290 --> 00:02:51.640
I have the pet clinic app.
46

47
00:02:51.670 --> 00:02:57.760
I am not going to save what I'm showing here to source code but what I want to do is create a Java class
47

48
00:02:58.000 --> 00:03:06.040
let's say some controller like so. I'm going to go ahead and add that like so. I'm going to have... I don't
48

49
00:03:06.040 --> 00:03:08.520
want to do that. I'm going to be deleting these.
49

50
00:03:08.590 --> 00:03:19.260
So I have some controller and then let's create a Java class and I'm going to make this interface like
50

51
00:03:19.260 --> 00:03:25.090
so and oops I added that. Take about a habit.
51

52
00:03:25.140 --> 00:03:29.720
This is not going into Git. I'm just doing this for demonstration purposes.
52

53
00:03:29.720 --> 00:03:37.350
So I might say private final my service my service.
53

54
00:03:37.350 --> 00:03:45.280
Like so. I'm just going to hit that and add in a constructor parameter so that's automatically going to populate
54

55
00:03:45.280 --> 00:03:45.550
that.
55

56
00:03:46.060 --> 00:03:52.510
So now what my controller my controller named some controllers asking for a class that implements my
56

57
00:03:52.510 --> 00:03:59.900
service. So now if I come over to my service, I'm going to hit alt enter
57

58
00:04:00.050 --> 00:04:01.560
Implement interface.
58

59
00:04:01.820 --> 00:04:09.570
Now I could do an implementation like this, perfectly valid where I'm doing the Impl. But what I'm
59

60
00:04:09.570 --> 00:04:15.530
going to be showing you coming up in the pet clinic if I wanted to do this, what I might want to do is
60

61
00:04:15.770 --> 00:04:20.080
let's refactor this. Rename.
61

62
00:04:28.820 --> 00:04:30.650
If I can generate to this
62

63
00:04:34.950 --> 00:04:41.450
so it's coming up my service impl and let's say JPA.
63

64
00:04:44.360 --> 00:04:49.430
In the naming, I'm doing JPA just for illustrative purposes.
64

65
00:04:49.490 --> 00:04:55.460
So what I'm gonna be doing coming up in the pet clinic application I'm going to implement services where
65

66
00:04:55.460 --> 00:05:01.610
we can get objects from a hash map at runtime and then later we're going to start using a database and
66

67
00:05:01.640 --> 00:05:08.420
I want to use Spring profiles because what I want to be able to do is use Spring profiles as to how
67

68
00:05:08.420 --> 00:05:14.060
this controller gets wired either with an implementation of using a hash map for the objects that are
68

69
00:05:14.060 --> 00:05:20.660
being returned from the service or I want to be using JPA to return object from a database.
69

70
00:05:20.660 --> 00:05:25.700
So these are two implementations. But just to get your head around how this is being worked, I've created
70

71
00:05:25.820 --> 00:05:27.800
three four different objects here.
71

72
00:05:27.800 --> 00:05:35.120
I have my controller that wants an implementation of my service as my services the interface and now
72

73
00:05:35.150 --> 00:05:43.130
I'm going to allow Spring to wire in either implementation of the hash map implementation or the JPA implementation.
73

74
00:05:43.130 --> 00:05:45.090
And I've used Impl.
74

75
00:05:45.110 --> 00:05:48.310
Some people would say just use JPA and hash map.
75

76
00:05:48.350 --> 00:05:52.400
I'm not going to get down to that nitty gritty here.
76

77
00:05:52.400 --> 00:05:59.180
I'm using these as illustrative purposes because now if I look at the concrete classes of my service
77

78
00:05:59.180 --> 00:06:05.420
hash map Impl, I know that this is going to be related to the implementing that service using a hash
78

79
00:06:05.420 --> 00:06:06.130
map.
79

80
00:06:06.170 --> 00:06:12.770
Likewise with JPA I know that's going to be implementing a service with JPA. But the way I like to think
80

81
00:06:12.770 --> 00:06:18.980
about it is when I'm working with the controller, I don't want to care how that service is implemented.
81

82
00:06:18.980 --> 00:06:23.660
All I want to do is ask the framework Springs Inversion of control container.
82

83
00:06:23.660 --> 00:06:28.820
I will say container to implement or inject an implementation of that and we're going to use Spring
83

84
00:06:28.820 --> 00:06:31.800
configuration as to how to inject that.
84

85
00:06:32.000 --> 00:06:34.520
So this gives us a lot of versatility.
85

86
00:06:34.560 --> 00:06:40.610
Well from a standpoint of developing and were I care about things I don't care about the implementation
86

87
00:06:40.610 --> 00:06:44.020
of my service. I'm going to allow spring to determine that.
87

88
00:06:44.060 --> 00:06:48.320
Now you can say I have two implementations there. It's clear from their naming.
88

89
00:06:48.320 --> 00:06:49.660
I hope this clears this up.
89

90
00:06:49.790 --> 00:06:51.320
There's a lot of opinions on this.
90

91
00:06:51.620 --> 00:06:53.550
I'm giving you my opinion.
91

92
00:06:53.600 --> 00:06:58.280
It may counter others but I do see this generally accepted in the industry.
92

93
00:06:58.280 --> 00:07:05.630
So just to recap what we're talking about for naming interfaces and implementations if it's the interface
93

94
00:07:05.690 --> 00:07:10.220
use a valid object name so you can see here implementing my service.
94

95
00:07:10.220 --> 00:07:13.580
So that's a valid object name. It is very common.
95

96
00:07:13.610 --> 00:07:19.460
Just follow good object naming conventions there and then for the implementation if there's just one
96

97
00:07:20.030 --> 00:07:26.870
perfectly acceptable to use IMPL. There's more than one use something in the name of it to indicate
97

98
00:07:26.900 --> 00:07:33.020
the difference of the functionality so that you know in this example one is a hash map implementation
98

99
00:07:33.070 --> 00:07:35.600
and the other is a JPA implementation.
99

100
00:07:35.600 --> 00:07:40.730
So give people something to go off them and you're naming conventions so always remember when you are
100

101
00:07:40.730 --> 00:07:43.370
coding code as read by others.
101

102
00:07:43.370 --> 00:07:45.700
A lot more than it is written.
102

103
00:07:45.890 --> 00:07:49.070
So there's a lot more time studying and reading what code does.
103

104
00:07:49.070 --> 00:07:55.600
So when you're on a team how about your team members by naming stuff that makes sense in ways that makes
104

105
00:07:55.600 --> 00:07:56.780
sense and is intuitive.
