WEBVTT
0
1
00:00:02.420 --> 00:00:08.280
Okay I have an example of using Spring
Boot with Redis here and show you how to
1

2
00:00:08.280 --> 00:00:13.769
wire everything up and if you need the
source code for this it is up on GitHub
2

3
00:00:13.769 --> 00:00:18.569
at my repository springframeworkguru
and the path to the repository is
3

4
00:00:18.569 --> 00:00:23.200
spring-boot-redis-example.
4

5
00:00:23.200 --> 00:00:26.400
So you be able get the
complete source code for this project
5

6
00:00:26.400 --> 00:00:31.410
I'm about to step you through and toggle
over to IntelliJ now and I am using the
6

7
00:00:31.410 --> 00:00:37.410
latest release of Spring Boot at a time
of recording this which is 1.5.2, that's
7

8
00:00:37.410 --> 00:00:43.530
a release version and to get Redis
support in there, we just need to include
8

9
00:00:43.530 --> 00:00:49.170
the Spring Boot Starter for Redis and
you can see there on line 30 I've
9

10
00:00:49.170 --> 00:00:54.300
included that Maven dependency for Redis
and let's take a quick look to, I want to
10

11
00:00:54.300 --> 00:00:59.850
show you what's inside of that so if we
come over here to the Maven projects we
11

12
00:00:59.850 --> 00:01:04.470
can see that the Spring Boot Starter
does bring in Spring Data for Redis and
12

13
00:01:04.470 --> 00:01:09.360
then also the Redis Client so that gets
us all wired up and like everything else
13

14
00:01:09.360 --> 00:01:13.140
in Spring Boot when we bring in that
dependency that will trigger Auto
14

15
00:01:13.140 --> 00:01:17.759
configuration for us. So it's
automatically going to create up a
15

16
00:01:17.759 --> 00:01:25.350
connection to a Redis server running on
localhost for us so I'm using now a
16

17
00:01:25.350 --> 00:01:31.530
default connection properties so
toggling over to the Product class, what
17

18
00:01:31.530 --> 00:01:36.570
we are going to do is create a Redis
hash called products and give it an ID
18

19
00:01:36.570 --> 00:01:41.790
value of String which will get
automatically generated by Spring Data.
19

20
00:01:41.790 --> 00:01:47.490
The Sring Data version for Redis and
let's take a look at the repository for
20

21
00:01:47.490 --> 00:01:51.689
that and we're just using the CrudRepository and if you're not familiar with
21

22
00:01:51.689 --> 00:01:56.219
Spring Data, what Spring Data is going to
do is provide an implementation of the
22

23
00:01:56.219 --> 00:02:02.610
repository so this makes it very very
easy for us to work with Redis. We just
23

24
00:02:02.610 --> 00:02:07.560
provided the interface for the CrudRepository and then wired into our
24

25
00:02:07.560 --> 00:02:11.280
classes and that gets created at runtime
for us by Spring Data and we can
25

26
00:02:11.280 --> 00:02:16.319
interact with the Redis database. Now let's take a look at the Product
26

27
00:02:16.319 --> 00:02:21.750
Controller, we have a converter in the
ProductToProductForm, this is for the
27

28
00:02:21.750 --> 00:02:26.970
data type conversion, this is used
to show it and bind the Product data to
28

29
00:02:26.970 --> 00:02:32.700
the ProductForm, so I also have the
ProductForm class here so it looks a
29

30
00:02:32.700 --> 00:02:37.560
lot like the domain class of Product but
this is really a backing object or
30

31
00:02:37.560 --> 00:02:41.250
command object that some people would
call it, which we will bind to the
31

32
00:02:41.250 --> 00:02:47.040
properties on the form and then convert
that into our service layer so go back
32

33
00:02:47.040 --> 00:02:50.879
over to the controller. Take a quick
look at this you can see I don't have
33

34
00:02:50.879 --> 00:02:55.379
a lot of mapping here, it is pretty simple
CRUD operations. I take the root and
34

35
00:02:55.379 --> 00:03:00.450
redirect to product/list to show the
list products and then I have the
35

36
00:03:00.450 --> 00:03:05.489
ability show by ID, to edit by ID create
a new product which will return back a
36

37
00:03:05.489 --> 00:03:10.019
blank ProductForm you can see on the
edit there on line 56 that will actually
37

38
00:03:10.019 --> 00:03:15.379
bring back the Product from the Redis
database via the service and then
38

39
00:03:15.379 --> 00:03:20.190
convert it over to the ProductForm
object and display it on the page so
39

40
00:03:20.190 --> 00:03:25.319
let's see, take a couple more things here
I do have a ProductService
40

41
00:03:25.319 --> 00:03:32.010
implementation that is getting injected
into the ProductController. I'm going to
41

42
00:03:32.010 --> 00:03:37.319
hit command and take a look at that so
pretty simple service I'm writing to an
42

43
00:03:37.319 --> 00:03:43.049
interface which is considered a best
practice that allows us to wire in different
43

44
00:03:43.049 --> 00:03:46.769
types into our controller when we're
doing testing and stuff like that and
44

45
00:03:46.769 --> 00:03:51.569
let's go over here and we'll take a look
at the implementation, I only have one
45

46
00:03:51.569 --> 00:03:56.639
implementation in this, we inject in that
ProductRepository again that's being
46

47
00:03:56.639 --> 00:04:02.180
provided by Spring Data and you can see
not a lot of mystery going on here
47

48
00:04:02.180 --> 00:04:09.090
we're using constructor base dependency
injection here  on line 23 through 26 and we
48

49
00:04:09.090 --> 00:04:13.819
can see that we have a list and we're
going to findAll from the repository, a
49

50
00:04:13.819 --> 00:04:21.630
little Java 8 is in there in case you're
not familiar Java 8 yet, so not too
50

51
00:04:21.630 --> 00:04:26.750
much here to look at, I'm going to go
ahead and start up the application now
51

52
00:04:26.750 --> 00:04:32.039
and we can see it starting up here
in the bottom, it's going to start up
52

53
00:04:32.039 --> 00:04:36.180
pretty quick because there's really not
a lot in the Spring application you can
53

54
00:04:36.180 --> 00:04:45.300
see that the mapping came up and come
over here into Chrome and add a test
54

55
00:04:45.300 --> 00:04:51.800
there, we'll go back to the root and I do
have a product in there from my testing
55

56
00:04:51.800 --> 00:04:59.520
so I can come in and create a new product
and I'm not doing any validations here
56

57
00:04:59.520 --> 00:05:07.699
on any of the data fields. You can see
that this was created, come over here
57

58
00:05:07.699 --> 00:05:12.990
go back to the list page you can see
that I do have two products in there I
58

59
00:05:12.990 --> 00:05:19.020
can come in and edit this and let's
update the description, a bunch of
59

60
00:05:19.020 --> 00:05:27.719
e's there and let's give it an image URL
of all fives and we can see that has
60

61
00:05:27.719 --> 00:05:33.900
gone back and persisted so our changes
are getting persisted to the Redis
61

62
00:05:33.900 --> 00:05:39.210
database for us, let's try and verify
the delete operation. You can see that
62

63
00:05:39.210 --> 00:05:43.949
the delete runs right away so
like we expect since Redis is a memory
63

64
00:05:43.949 --> 00:05:49.800
everything's going along pretty fast so
not a lot there for it's a pretty
64

65
00:05:49.800 --> 00:05:54.629
standard application. I want to point out
I am using all the auto configuration
65

66
00:05:54.629 --> 00:05:58.729
stuff out of Spring Boot. So I didn't
have to wire up any
66

67
00:05:58.729 --> 00:06:03.690
connections for Redis. Of course if
you should need to do, that if you need
67

68
00:06:03.690 --> 00:06:11.839
to override any properties you'd be
coming over here application.properties
68

69
00:06:14.070 --> 00:06:18.600
and you can see IntelliJ has
intellisense there so we have a number
69

70
00:06:18.600 --> 00:06:23.010
of properties that we can override for
Redis. These are showing a lot of the
70

71
00:06:23.010 --> 00:06:28.230
defaults, they're going to get set up by
Spring Boot and if we were running on a
71

72
00:06:28.230 --> 00:06:32.970
different server, different port, ID,
password we could specify all that and
72

73
00:06:32.970 --> 00:06:37.560
our application.properties or of
course, run overwrite those at runtime by
73

74
00:06:37.560 --> 00:06:41.570
specifying environment variables for
these.
