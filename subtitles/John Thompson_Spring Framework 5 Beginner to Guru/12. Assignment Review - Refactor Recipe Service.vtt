WEBVTT
0
1
00:00:00.183 --> 00:00:02.600
(calm music)
1

2
00:00:05.059 --> 00:00:05.892
Alright, in this
2

3
00:00:05.892 --> 00:00:07.149
video we are going to complete the
3

4
00:00:07.149 --> 00:00:11.839
assignment to go ahead and refactor the RecipeService
4

5
00:00:11.839 --> 00:00:13.790
to use reactive types,
5

6
00:00:13.790 --> 00:00:16.808
so we wanna be using the reactive repository,
6

7
00:00:16.808 --> 00:00:18.142
for recipe repository,
7

8
00:00:18.142 --> 00:00:20.523
and also be returning reactive types
8

9
00:00:20.523 --> 00:00:22.415
with all the method calls on that.
9

10
00:00:22.415 --> 00:00:23.866
So a couple things that we need to there
10

11
00:00:23.866 --> 00:00:27.873
so I'm gonna go through this step-by-step and refactor it.
11

12
00:00:27.873 --> 00:00:32.040
First thing we want to do is change the RecipeRepository.
12

13
00:00:35.756 --> 00:00:39.423
See this is gonna cause a number of changes.
13

14
00:00:43.430 --> 00:00:45.288
And again I am creating
14

15
00:00:45.288 --> 00:00:47.784
all those injected things there
15

16
00:00:47.784 --> 00:00:50.605
to utilize private final
16

17
00:00:50.605 --> 00:00:52.324
so we do have to run the constructor
17

18
00:00:52.324 --> 00:00:54.065
and then once we're inside,
18

19
00:00:54.065 --> 00:00:57.165
we can't change any of those injected properties.
19

20
00:00:57.165 --> 00:00:58.522
Just gonna go through here,
20

21
00:00:58.522 --> 00:00:59.605
findAll and,
21

22
00:01:00.520 --> 00:01:02.187
we wanna do a block.
22

23
00:01:06.070 --> 00:01:06.952
Now that's not gonna work
23

24
00:01:06.952 --> 00:01:09.901
so I am going to comment that out right now
24

25
00:01:09.901 --> 00:01:12.676
and we are gonna have to come back to that.
25

26
00:01:12.676 --> 00:01:13.767
Not a simple fix there
26

27
00:01:13.767 --> 00:01:15.346
and looking at this code
27

28
00:01:15.346 --> 00:01:18.513
we want to completely refactor that too.
28

29
00:01:20.246 --> 00:01:23.496
And that will no longer be an Optional.
29

30
00:01:24.982 --> 00:01:27.982
So this is gonna become a Recipe.
30

31
00:01:29.835 --> 00:01:33.418
And of course we're gonna say if it's null.
31

32
00:01:36.221 --> 00:01:38.206
And we'll return back the recipe here on the,
32

33
00:01:38.206 --> 00:01:39.390
findById,
33

34
00:01:39.390 --> 00:01:42.235
and this also is gonna be refactored
34

35
00:01:42.235 --> 00:01:44.301
so we wanna be returning back that Mono,
35

36
00:01:44.301 --> 00:01:48.468
so we'll need to add in some different logic there.
36

37
00:01:54.948 --> 00:01:58.085
So this set will at least get us compiling
37

38
00:01:58.085 --> 00:01:59.653
and then the next thing we wanna be changing
38

39
00:01:59.653 --> 00:02:01.998
is to the reactive types.
39

40
00:02:01.998 --> 00:02:04.915
So what we wanna return back here
40

41
00:02:06.375 --> 00:02:08.198
this is gonna be getting a new HashSet,
41

42
00:02:08.198 --> 00:02:09.865
but we wanna do a...
42

43
00:02:15.290 --> 00:02:16.307
and in this case here,
43

44
00:02:16.307 --> 00:02:19.442
we wanna get that request from people.
44

45
00:02:19.442 --> 00:02:20.275
findAll.
45

46
00:02:21.520 --> 00:02:24.853
So actually that's gonna change to that.
46

47
00:02:25.883 --> 00:02:27.569
And in this case, again,
47

48
00:02:27.569 --> 00:02:30.588
we are going to make it return that.
48

49
00:02:30.588 --> 00:02:31.921
So now that's changing that,
49

50
00:02:31.921 --> 00:02:34.860
and we can also see that the
50

51
00:02:34.860 --> 00:02:36.509
By doing that with IntelliJ
51

52
00:02:36.509 --> 00:02:39.175
the interface changes itself too.
52

53
00:02:39.175 --> 00:02:41.130
So, that's exactly what we want there.
53

54
00:02:41.130 --> 00:02:44.936
And here we wanna return back a Mono.
54

55
00:02:44.936 --> 00:02:46.969
And rather than doing this,
55

56
00:02:46.969 --> 00:02:49.431
we can just change that.
56

57
00:02:49.431 --> 00:02:50.598
Refactor this.
57

58
00:02:52.657 --> 00:02:55.338
And all that goes away.
58

59
00:02:55.338 --> 00:02:57.163
You can see that's breaking some of the logic
59

60
00:02:57.163 --> 00:02:58.463
we had in there.
60

61
00:02:58.463 --> 00:03:00.994
We're not finding stuff, but we wanna
61

62
00:03:00.994 --> 00:03:03.577
make that handle that upstream.
62

63
00:03:04.826 --> 00:03:08.598
So our findCommandById, that's going to change.
63

64
00:03:08.598 --> 00:03:10.515
Recipe, RecipeCommand.
64

65
00:03:12.569 --> 00:03:14.600
And looking at that, and actually transactional
65

66
00:03:14.600 --> 00:03:16.481
we don't need that anymore.
66

67
00:03:16.481 --> 00:03:18.731
So that is specific to JPA.
67

68
00:03:21.369 --> 00:03:23.505
And I need to put some thought to that
68

69
00:03:23.505 --> 00:03:25.641
because we are gonna do a conversion there.
69

70
00:03:25.641 --> 00:03:27.917
Some, not quite sure how we can do that
70

71
00:03:27.917 --> 00:03:30.343
without blocking, so we need to some refactoring there.
71

72
00:03:30.343 --> 00:03:31.597
So I need to think about that.
72

73
00:03:31.597 --> 00:03:34.892
And I may pause that and come back to that.
73

74
00:03:34.892 --> 00:03:39.190
That's also a transactional that also goes away.
74

75
00:03:39.190 --> 00:03:42.023
So we have a number of things here that we've changed.
75

76
00:03:42.023 --> 00:03:44.940
And, we know where this is touching
76

77
00:03:45.865 --> 00:03:47.886
is not gonna be happy, so I'm gonna go ahead
77

78
00:03:47.886 --> 00:03:49.569
and just say run the test.
78

79
00:03:49.569 --> 00:03:53.947
I know we're gonna get some compile time errors.
79

80
00:03:53.947 --> 00:03:55.697
And of course we did.
80

81
00:03:56.663 --> 00:04:00.599
And here we wanna be returning a Mono.
81

82
00:04:00.599 --> 00:04:02.849
So we can do Mono.just().
82

83
00:04:03.966 --> 00:04:05.485
Save recipe.
83

84
00:04:05.485 --> 00:04:09.652
So now this is gonna be functioning similarly to before.
84

85
00:04:10.793 --> 00:04:13.858
And now our RecipeServiceImplTest
85

86
00:04:13.858 --> 00:04:15.441
is going to change.
86

87
00:04:16.307 --> 00:04:17.724
Now we want this.
87

88
00:04:25.001 --> 00:04:28.637
I'm just changing the types there.
88

89
00:04:28.637 --> 00:04:31.470
We'll go back and change them all.
89

90
00:04:34.570 --> 00:04:37.237
So now our new recipe findById
90

91
00:04:38.506 --> 00:04:40.886
and now we wanna say block.
91

92
00:04:40.886 --> 00:04:42.952
So that'll get that reactive type.
92

93
00:04:42.952 --> 00:04:44.856
And this Optional,
93

94
00:04:44.856 --> 00:04:46.203
we don't need the Optional anymore.
94

95
00:04:46.203 --> 00:04:48.339
So that can go away.
95

96
00:04:48.339 --> 00:04:49.589
And we'll do...
96

97
00:04:51.811 --> 00:04:54.690
So now we'll use the Mono function there
97

98
00:04:54.690 --> 00:04:58.857
to return back a Mono which just a recipe inside of it.
98

99
00:05:00.019 --> 00:05:01.319
And we don't need that.
99

100
00:05:01.319 --> 00:05:02.152
We can...
100

101
00:05:03.292 --> 00:05:04.209
Also say...
101

102
00:05:08.841 --> 00:05:10.584
And, actually this NotFoundException
102

103
00:05:10.584 --> 00:05:11.825
is not gonna work anymore
103

104
00:05:11.825 --> 00:05:14.218
so I'm just gonna get rid of that.
104

105
00:05:14.218 --> 00:05:15.885
That test goes away.
105

106
00:05:16.888 --> 00:05:20.940
And we don't need the Optional anymore.
106

107
00:05:20.940 --> 00:05:24.440
But we do need to return back a Mono here.
107

108
00:05:29.636 --> 00:05:34.442
getRecipes() so the recipe data that we want to do is...
108

109
00:05:34.442 --> 00:05:35.525
Looks just...
109

110
00:05:38.460 --> 00:05:42.377
Alright, let's see here, recipeService dot...
110

111
00:05:44.518 --> 00:05:47.724
Nope, that's not what we want.
111

112
00:05:47.724 --> 00:05:50.185
And here we need to do something different.
112

113
00:05:50.185 --> 00:05:52.018
Pause this real quick.
113

114
00:05:53.378 --> 00:05:55.477
And we're coming back with a set here,
114

115
00:05:55.477 --> 00:05:57.720
I'm not sure if we need to at this point,
115

116
00:05:57.720 --> 00:06:00.470
so I'm going to say collectList,
116

117
00:06:01.471 --> 00:06:03.839
we'll change this to a List as well.
117

118
00:06:03.839 --> 00:06:06.463
I may revisit that in the future.
118

119
00:06:06.463 --> 00:06:09.748
And, oops, we also want to do a block here.
119

120
00:06:09.748 --> 00:06:12.742
So, basically we have a Flux coming back.
120

121
00:06:12.742 --> 00:06:14.694
Now Flux has multiple elements,
121

122
00:06:14.694 --> 00:06:16.889
and we're dealing with a stream of elements here.
122

123
00:06:16.889 --> 00:06:20.105
And so, we're gonna say collect as a list and block that.
123

124
00:06:20.105 --> 00:06:22.522
So, this test should run now.
124

125
00:06:23.715 --> 00:06:26.615
Let's see if our compile is happy again.
125

126
00:06:26.615 --> 00:06:27.448
Nope.
126

127
00:06:28.475 --> 00:06:30.392
IndexController get...
127

128
00:06:32.423 --> 00:06:35.756
We're gonna have a similar problem here.
128

129
00:06:39.270 --> 00:06:41.571
So we're gonna get that, not quite sure if that'll work.
129

130
00:06:41.571 --> 00:06:42.651
But we'll see, make sure,
130

131
00:06:42.651 --> 00:06:45.925
because we're returning back a Flux there.
131

132
00:06:45.925 --> 00:06:48.003
Go ahead and run these and see what fails.
132

133
00:06:48.003 --> 00:06:49.037
We are compiling now,
133

134
00:06:49.037 --> 00:06:52.454
but our test probably will not pass here.
134

135
00:06:54.006 --> 00:06:58.486
Did get one fail in that inside the index page.
135

136
00:06:58.486 --> 00:07:02.653
And that is not happy because cannot be cast to a Set.
136

137
00:07:05.603 --> 00:07:06.936
Let's do a List.
137

138
00:07:12.280 --> 00:07:14.030
See if that runs now.
138

139
00:07:19.873 --> 00:07:22.290
Re-run the failing test there.
139

140
00:07:25.420 --> 00:07:27.394
And take a closer look at that, so...
140

141
00:07:27.394 --> 00:07:30.414
We have a Flux that cannot be cast to a...
141

142
00:07:30.414 --> 00:07:33.414
Wait a minute, can't target value...
142

143
00:07:36.473 --> 00:07:40.328
And this is actually gonna be a Flux.
143

144
00:07:40.328 --> 00:07:41.766
Taking a closer look at what we're doing here
144

145
00:07:41.766 --> 00:07:44.752
so we're gonna return back a Flux here.
145

146
00:07:44.752 --> 00:07:46.252
ArgumentCaptor...
146

147
00:07:51.718 --> 00:07:54.385
This should be a little happier.
147

148
00:07:59.113 --> 00:08:01.052
Okay, jumped ahead just quickly,
148

149
00:08:01.052 --> 00:08:03.013
and made a couple changes.
149

150
00:08:03.013 --> 00:08:04.872
I was doing a Flux from recipe,
150

151
00:08:04.872 --> 00:08:05.789
and that was a mistake.
151

152
00:08:05.789 --> 00:08:08.202
I wanna do a Flux from recipes.
152

153
00:08:08.202 --> 00:08:11.313
And here, there's a Flux fromIterable,
153

154
00:08:11.313 --> 00:08:13.521
so I'm passing in the recipes there.
154

155
00:08:13.521 --> 00:08:16.981
So that gives me a Flux with two recipes in it.
155

156
00:08:16.981 --> 00:08:20.023
And now, I refactor to use a list.
156

157
00:08:20.023 --> 00:08:22.960
So I do a Flux in the controller collectList,
157

158
00:08:22.960 --> 00:08:25.816
and then block, and then assertEquals.
158

159
00:08:25.816 --> 00:08:27.917
And we change out to the recipeList.
159

160
00:08:27.917 --> 00:08:31.389
So, just quickly can see before we were doing a Set,
160

161
00:08:31.389 --> 00:08:33.177
and we're just checking that set there,
161

162
00:08:33.177 --> 00:08:35.685
but now we're working with the Flux type.
162

163
00:08:35.685 --> 00:08:37.403
And we have to go in and collect it.
163

164
00:08:37.403 --> 00:08:41.142
So, now we can go in and run our test.
164

165
00:08:41.142 --> 00:08:42.416
You can see that test is running,
165

166
00:08:42.416 --> 00:08:44.019
and we'll run the full suite of tests,
166

167
00:08:44.019 --> 00:08:46.852
so now our unit tests are running.
167

168
00:08:49.094 --> 00:08:51.582
And all our tests are green.
168

169
00:08:51.582 --> 00:08:54.946
And let's come back over to our service implementation.
169

170
00:08:54.946 --> 00:08:56.467
Take a closer look at this
170

171
00:08:56.467 --> 00:08:58.011
and clean up any last minute code.
171

172
00:08:58.011 --> 00:09:01.094
So, we are no longer returning a Set.
172

173
00:09:02.759 --> 00:09:05.511
And we are just doing the findAll there.
173

174
00:09:05.511 --> 00:09:08.075
So we don't need to do that.
174

175
00:09:08.075 --> 00:09:10.875
We are returning the Mono back directly from
175

176
00:09:10.875 --> 00:09:15.855
the recipe repository provided by Spring Data MongoDB.
176

177
00:09:15.855 --> 00:09:18.884
And let's see here, this command object...
177

178
00:09:18.884 --> 00:09:20.162
This I can
178

179
00:09:20.162 --> 00:09:22.578
actually convert I believe.
179

180
00:09:22.578 --> 00:09:24.828
Let's get back to that one.
180

181
00:09:27.744 --> 00:09:30.170
So, in this one here, we're coming in,
181

182
00:09:30.170 --> 00:09:32.690
this is a save recipe, so we're gonna come in
182

183
00:09:32.690 --> 00:09:35.207
from a command, we're gonna convert it.
183

184
00:09:35.207 --> 00:09:37.073
We're gonna save it, block.
184

185
00:09:37.073 --> 00:09:38.168
And then convert it back,
185

186
00:09:38.168 --> 00:09:41.192
so that'd be a little tricky to do reactively.
186

187
00:09:41.192 --> 00:09:43.361
And then here, our delete.
187

188
00:09:43.361 --> 00:09:44.837
So we're gonna do deleteById,
188

189
00:09:44.837 --> 00:09:48.387
and we missed the block activity there.
189

190
00:09:48.387 --> 00:09:50.723
So, we do wanna do the block in the delete,
190

191
00:09:50.723 --> 00:09:53.080
because if we just ignore that return type
191

192
00:09:53.080 --> 00:09:55.887
that Mono is never gonna get triggered
192

193
00:09:55.887 --> 00:09:58.339
to do it's thing in the database.
193

194
00:09:58.339 --> 00:10:01.671
This one up here, I believe I can convert that.
194

195
00:10:01.671 --> 00:10:04.388
findById ByCommand, so I'm gonna give that a shot
195

196
00:10:04.388 --> 00:10:05.443
I'm gonna pause this,
196

197
00:10:05.443 --> 00:10:07.359
so you don't have to sit through that.
197

198
00:10:07.359 --> 00:10:08.942
I'll be right back.
198

199
00:10:10.007 --> 00:10:11.238
Alright, I jumped ahead a little bit,
199

200
00:10:11.238 --> 00:10:13.710
and I did refactor a few things in our class here
200

201
00:10:13.710 --> 00:10:15.393
and made it a little more reactive.
201

202
00:10:15.393 --> 00:10:17.426
So, look at like 48, there.
202

203
00:10:17.426 --> 00:10:20.781
So I'm doing a return, so this is the findById.
203

204
00:10:20.781 --> 00:10:22.674
You can see in the commented code below,
204

205
00:10:22.674 --> 00:10:24.938
starting on line 60, the old code,
205

206
00:10:24.938 --> 00:10:28.978
but up on line 48, so we go in, we do a findById
206

207
00:10:28.978 --> 00:10:30.766
on the reactive repository.
207

208
00:10:30.766 --> 00:10:33.541
And then on line 49 we're gonna do a map.
208

209
00:10:33.541 --> 00:10:36.232
This map function is gonna take a recipe
209

210
00:10:36.232 --> 00:10:38.556
that was returned back by the repository
210

211
00:10:38.556 --> 00:10:41.282
and convert it to a RecipeCommand.
211

212
00:10:41.282 --> 00:10:43.932
And remember, we were enhancing that command
212

213
00:10:43.932 --> 00:10:46.672
with the ID value of the recipe.
213

214
00:10:46.672 --> 00:10:50.201
So we're gonna go ahead and add that into our model.
214

215
00:10:50.201 --> 00:10:52.105
And then we're gonna return that back,
215

216
00:10:52.105 --> 00:10:53.672
that RecipeCommand back.
216

217
00:10:53.672 --> 00:10:55.727
So you can see that this is what we were doing
217

218
00:10:55.727 --> 00:10:58.166
kind of on line 60, we'd get the RecipeCommand
218

219
00:10:58.166 --> 00:11:00.894
and then we'd go through the ingredients
219

220
00:11:00.894 --> 00:11:02.157
and update them.
220

221
00:11:02.157 --> 00:11:04.539
So, this little block of code here
221

222
00:11:04.539 --> 00:11:07.628
is the same block of code that we have here.
222

223
00:11:07.628 --> 00:11:10.960
So we go back and enhance that recipeCommand.
223

224
00:11:10.960 --> 00:11:14.373
So I'm gonna go ahead and delete this, this comment.
224

225
00:11:14.373 --> 00:11:17.482
So, now we have a little better, cleaner code.
225

226
00:11:17.482 --> 00:11:21.397
And then, also we had our Recipe that we were working with.
226

227
00:11:21.397 --> 00:11:23.696
And, this is actually original code,
227

228
00:11:23.696 --> 00:11:24.845
so I'm going to get rid of that.
228

229
00:11:24.845 --> 00:11:27.028
We don't need the detachedRecipe anymore.
229

230
00:11:27.028 --> 00:11:30.671
But the saveRecipeCommand, we're able to go in
230

231
00:11:30.671 --> 00:11:32.102
and do the save function on it,
231

232
00:11:32.102 --> 00:11:33.808
and we do a convert.
232

233
00:11:33.808 --> 00:11:35.689
Now we are returning back a Mono,
233

234
00:11:35.689 --> 00:11:37.454
so I'm going to get rid of this original code.
234

235
00:11:37.454 --> 00:11:40.623
So, the original code created detachedRecipe,
235

236
00:11:40.623 --> 00:11:42.373
saved it, and then...
236

237
00:11:43.317 --> 00:11:44.963
I was going back so you can see we were...
237

238
00:11:44.963 --> 00:11:46.742
I was iterating over that,
238

239
00:11:46.742 --> 00:11:48.553
I took a closer look at that, and said,
239

240
00:11:48.553 --> 00:11:49.958
"Oh, we can actually do that."
240

241
00:11:49.958 --> 00:11:52.175
And realized that we were turning back the type,
241

242
00:11:52.175 --> 00:11:54.671
and rather than not the publisher there.
242

243
00:11:54.671 --> 00:11:56.754
So, publisher being Mono.
243

244
00:11:58.003 --> 00:12:00.447
So, I'm gonna delete that other code there.
244

245
00:12:00.447 --> 00:12:01.530
And also this
245

246
00:12:02.729 --> 00:12:04.828
stuff here so I can see that our repository's
246

247
00:12:04.828 --> 00:12:06.476
getting a little cleaner here.
247

248
00:12:06.476 --> 00:12:10.574
And the other thing I wanna point out here is
248

249
00:12:10.574 --> 00:12:13.988
the command objects were not Monos, but they are now.
249

250
00:12:13.988 --> 00:12:16.415
And I've refactored everything to that.
250

251
00:12:16.415 --> 00:12:18.365
Had to refactor a number of tests there,
251

252
00:12:18.365 --> 00:12:19.793
so I'm gonna go ahead and run the tests.
252

253
00:12:19.793 --> 00:12:22.793
Show you that these are running now.
253

254
00:12:25.028 --> 00:12:27.374
See that all the tests pass.
254

255
00:12:27.374 --> 00:12:30.124
Let's go ahead and run this also.
255

256
00:12:31.380 --> 00:12:33.354
And hopefully everything is happy.
256

257
00:12:33.354 --> 00:12:36.127
Because this video is getting a little long in the tooth.
257

258
00:12:36.127 --> 00:12:38.544
So let's come back over here.
258

259
00:12:41.121 --> 00:12:43.139
And we are getting an error.
259

260
00:12:43.139 --> 00:12:45.806
Let's take a quick look at that.
260

261
00:12:47.271 --> 00:12:48.180
Ah, okay.
261

262
00:12:48.180 --> 00:12:51.186
Let me pause this, we can fix that.
262

263
00:12:51.186 --> 00:12:53.647
Okay, just needed to make a couple minor tweaks.
263

264
00:12:53.647 --> 00:12:55.575
I'll show you exactly what I did.
264

265
00:12:55.575 --> 00:12:56.666
What was happening here,
265

266
00:12:56.666 --> 00:12:59.731
you can see that we're using model.addAttribute(),
266

267
00:12:59.731 --> 00:13:01.252
recipeService.getRecipes(),
267

268
00:13:01.252 --> 00:13:03.609
well we were returning back the reactive type
268

269
00:13:03.609 --> 00:13:04.863
into the view layer.
269

270
00:13:04.863 --> 00:13:06.848
So when you add an attribute like that,
270

271
00:13:06.848 --> 00:13:08.496
there is no type checking to it,
271

272
00:13:08.496 --> 00:13:09.762
so you're just adding an object
272

273
00:13:09.762 --> 00:13:11.376
to the property of recipes.
273

274
00:13:11.376 --> 00:13:15.217
So, in this case we were adding in a reactive object,
274

275
00:13:15.217 --> 00:13:18.052
in this case a Flux, and the Thymeleaf layer
275

276
00:13:18.052 --> 00:13:19.271
didn't know what to do with it
276

277
00:13:19.271 --> 00:13:21.140
because we haven't set that up yet.
277

278
00:13:21.140 --> 00:13:22.742
So, at this point we still need
278

279
00:13:22.742 --> 00:13:25.783
to keep the web layer to non-reactive types
279

280
00:13:25.783 --> 00:13:27.871
until we set up Thymeleaf to handle that.
280

281
00:13:27.871 --> 00:13:30.022
So I had to go in, say getRecipes,
281

282
00:13:30.022 --> 00:13:31.798
collect as a list, and then block.
282

283
00:13:31.798 --> 00:13:33.737
And that's gonna return back an ArrayList
283

284
00:13:33.737 --> 00:13:35.606
to our IndexController,
284

285
00:13:35.606 --> 00:13:39.716
and I also had to do that in a couple spots here.
285

286
00:13:39.716 --> 00:13:44.035
So, like on the show, so we had to add in the block here,
286

287
00:13:44.035 --> 00:13:47.216
as we dealt with the service so everything's happy
287

288
00:13:47.216 --> 00:13:51.105
but I can come over here and show you now, refresh this.
288

289
00:13:51.105 --> 00:13:54.136
Actually I probably need to start it.
289

290
00:13:54.136 --> 00:13:57.053
So, let's go back and start it now.
290

291
00:13:58.431 --> 00:14:02.309
We can see that we are up and running on that.
291

292
00:14:02.309 --> 00:14:05.177
Let's go ahead and refresh this.
292

293
00:14:05.177 --> 00:14:06.872
So now we can see our recipes are there,
293

294
00:14:06.872 --> 00:14:09.289
we can go back and view them.
294

295
00:14:10.123 --> 00:14:12.956
Let's make sure we can do an edit.
295

296
00:14:18.888 --> 00:14:21.614
So that edit is working.
296

297
00:14:21.614 --> 00:14:25.114
And we'll do a double check of the delete.
297

298
00:14:26.033 --> 00:14:28.292
Make sure we can still delete a recipe.
298

299
00:14:28.292 --> 00:14:29.807
And that is also functional.
299

300
00:14:29.807 --> 00:14:32.085
So, now our CRUD operations are fully functional,
300

301
00:14:32.085 --> 00:14:34.082
with the reactive types, again,
301

302
00:14:34.082 --> 00:14:36.775
our view layer is not using reactive types
302

303
00:14:36.775 --> 00:14:39.179
we are going to get into that in a future video,
303

304
00:14:39.179 --> 00:14:41.930
right now we do have reactive going from
304

305
00:14:41.930 --> 00:14:45.135
the controller layer back to MongoDB and back.
305

306
00:14:45.135 --> 00:14:46.783
And I did make a few changes there,
306

307
00:14:46.783 --> 00:14:48.292
and encourage you to review them.
307

308
00:14:48.292 --> 00:14:50.498
I know this reactive stuff can get tricky,
308

309
00:14:50.498 --> 00:14:51.692
that's why I'm spending the extra time
309

310
00:14:51.692 --> 00:14:53.191
to go though it step-by-step,
310

311
00:14:53.191 --> 00:14:56.129
and showing you how this reactive stuff is working,
311

312
00:14:56.129 --> 00:14:57.847
because it is quite a different paradigm
312

313
00:14:57.847 --> 00:14:59.430
to be dealing with.
