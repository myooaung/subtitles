WEBVTT
0
1
00:00:04.700 --> 00:00:08.730
Alright. In this video, we are gonna be
talking about the Richardson maturity
1

2
00:00:08.730 --> 00:00:13.830
model and as Martin Fowler likes to say,
its steps towards the glory of a REST. So
2

3
00:00:13.830 --> 00:00:19.260
kind of a important tagline there.
Making REST all colorful, but once you
3

4
00:00:19.260 --> 00:00:22.920
understand how some of the stuff works
together, it is pretty slick. It is a
4

5
00:00:22.920 --> 00:00:28.019
really not a bad tagline that Martin
Fowler came up with. So the Richardson
5

6
00:00:28.019 --> 00:00:34.110
maturity model or RMM was established by
Leonard Richardson in a 2008 Q-con
6

7
00:00:34.110 --> 00:00:38.190
presentation. And what happened there,
that little bit of backdrop, Richardson
7

8
00:00:38.190 --> 00:00:43.230
looked at literally hundreds of RESTful
APIs. And you need to understand, this is
8

9
00:00:43.230 --> 00:00:48.450
going back roughly a decade at the time
of recording. And REST API's were still
9

10
00:00:48.450 --> 00:00:55.079
new and evolving and there's really no
formal specification to RESTful APIs.
10

11
00:00:55.079 --> 00:00:59.219
It's more of a concept. And what
Richardson did is looked over these
11

12
00:00:59.219 --> 00:01:04.170
API's and came up with a model to
describe the maturity of the RESTful web
12

13
00:01:04.170 --> 00:01:08.010
services. So there's some very basic
services that we could get to, and then
13

14
00:01:08.010 --> 00:01:14.070
we move towards the concept of REST. And
this describes the maturity of just how
14

15
00:01:14.070 --> 00:01:18.330
mature the RESTful models are. So
Richardson came up with a number of
15

16
00:01:18.330 --> 00:01:21.869
different traits that could use. And I
wanna point out again that, SOAP
16

17
00:01:21.869 --> 00:01:27.030
services there is a very formal
specification on how to produce SOAP web
17

18
00:01:27.030 --> 00:01:33.479
services. But unlike the REST, they do
there is no standard definition of what
18

19
00:01:33.479 --> 00:01:39.509
a REST services is. There is no authority to
say this is the RESTful Web Services
19

20
00:01:39.509 --> 00:01:45.810
standard. Now, RMM is used to describe the
quality. As in terms of how friendly that
20

21
00:01:45.810 --> 00:01:51.689
is going to be to the clients, consuming
the REST web service. Now let's take a
21

22
00:01:51.689 --> 00:01:56.340
look at the different RMM levels that
were established by Richardson. Level
22

23
00:01:56.340 --> 00:02:03.869
0 is the Swap of POX. Level 1 is
using resources. Level 2 is using HTTP
23

24
00:02:03.869 --> 00:02:08.759
verbs. And finally, level 3 is where
we bring in hypermedia controls. So I'm
24

25
00:02:08.759 --> 00:02:12.209
gonna go through and establish what
all these levels are. We'll take a look
25

26
00:02:12.209 --> 00:02:15.300
at what each one in depth.
Now, we won't look at the core
26

27
00:02:15.300 --> 00:02:20.340
technologies and how these work together.
So we have a URI, which is a resource
27

28
00:02:20.340 --> 00:02:26.370
locator. That is a unique URI or URL
for a specific resource on the server.
28

29
00:02:26.370 --> 00:02:31.830
Then we have HTTP which is a hypertext
Transfer Protocol.
29

30
00:02:31.830 --> 00:02:36.210
So there's we've looked at the protocol
in depth earlier in the class. And you
30

31
00:02:36.210 --> 00:02:39.450
remember we have a number of different
methods that we can leverage here. And
31

32
00:02:39.450 --> 00:02:44.190
then finally, hypermedia, this is a
another thing, where we can provide links
32

33
00:02:44.190 --> 00:02:49.410
and allow us to get additional
information through linking to different
33

34
00:02:49.410 --> 00:02:53.130
content. So these different technologies
are very important. How they play
34

35
00:02:53.130 --> 00:02:59.400
together in terms of a RESTful web
service. Now let's take a look at level
35

36
00:02:59.400 --> 00:03:04.890
0, The Swamp of POX is coined by
Martin Fowler. I actually had to look up
36

37
00:03:04.890 --> 00:03:11.160
what POX meant. And it turns out that
like POX, it's plain old XML like POJOs
37

38
00:03:11.160 --> 00:03:16.820
but it's talking about XML. Now level 0
APIs are gonna use a
38

39
00:03:16.820 --> 00:03:21.440
protocol as a transport protocol. So in
this case, we're just gonna be using
39

40
00:03:21.440 --> 00:03:28.320
if we're using HTTP, it's just going to
be a single like a GET or a POST type
40

41
00:03:28.320 --> 00:03:32.910
protocol. We're not gonna be using the
different HTTP methods for anything. And
41

42
00:03:32.910 --> 00:03:39.030
it's also gonna use one URI or one
endpoint. And this is more like a
42

43
00:03:39.030 --> 00:03:44.640
remote procedure call or the SOAP
interface. Or we also have a concept
43

44
00:03:44.640 --> 00:03:49.830
called XML-RPC. We hardly ever see that
anymore. But going back a decade ago, we
44

45
00:03:49.830 --> 00:03:56.220
did see that, where you posted an XML
document to an endpoint, a URL. And then,
45

46
00:03:56.220 --> 00:04:01.560
based on the type and based on that XML
document, it invokes some type of server
46

47
00:04:01.560 --> 00:04:05.790
remote procedure call. So that XML
document would represent what you wanna
47

48
00:04:05.790 --> 00:04:10.200
do. The URI didn't change the protocol,
didn't change so it was one and one
48

49
00:04:10.200 --> 00:04:14.880
there.
So that this is the level zero. Now level
49

50
00:04:14.880 --> 00:04:19.200
one is to bring in actual resources. 
You saw me doing this earlier in the
50

51
00:04:19.200 --> 00:04:24.510
course. I did that's intentionally to
start showing you REST like
51

52
00:04:24.510 --> 00:04:30.420
URL's being used. So in this case, we're
gonna use URIs to identify specific
52

53
00:04:30.420 --> 00:04:34.530
resources. So you can see here, I got a
couple examples there. We have gonna
53

54
00:04:34.530 --> 00:04:38.520
do a GET. I guess
example.com for product 1234,
54

55
00:04:38.520 --> 00:04:42.510
which is gonna give us data or
information about product 1234.
55

56
00:04:42.510 --> 00:04:49.260
Or if we do a GET against a URI for
product 567 or 5687,
56

57
00:04:49.260 --> 00:04:52.980
my little typo there. And we're
gonna get information about that Product
57

58
00:04:52.980 --> 00:04:58.200
ID. Again, this is just going to be using
one protocol. So it's still gonna be
58

59
00:04:58.200 --> 00:05:05.430
using a single method of HTTP like
GET. Now the next level up is the level
59

60
00:05:05.430 --> 00:05:10.980
2. It's where we start leveraging HTTP
verbs and these are gonna be used in
60

61
00:05:10.980 --> 00:05:16.740
conjunction with URIs for desired
actions. So for example, we might do a get
61

62
00:05:16.740 --> 00:05:22.950
of products 1234 to return
data about that product. What we could do
62

63
00:05:22.950 --> 00:05:30.330
I put against that same URI with like an
XML body to update data for product 
63

64
00:05:30.330 --> 00:05:35.460
1234. Now if we wanted to
delete that product, we can do a DELETE
64

65
00:05:35.460 --> 00:05:42.900
an HTTP DELETE action against that URI
of products/1234 to
65

66
00:05:42.900 --> 00:05:48.300
cause a delete action. And this is
probably the most common level that
66

67
00:05:48.300 --> 00:05:52.770
you're gonna see in use today. This
is widely accepted. I'm gonna continue to
67

68
00:05:52.770 --> 00:05:56.910
show you how these work together but
that's probably the most common that you
68

69
00:05:56.910 --> 00:06:02.370
can see. Now to get to true REST, we need
to get to level 3. The representation
69

70
00:06:02.370 --> 00:06:07.710
now contains URIs, which may be
useful to consumers of your API. Now it's
70

71
00:06:07.710 --> 00:06:12.030
gonna help your client developers
explore the resource and see different
71

72
00:06:12.030 --> 00:06:16.110
actions that are available and they can
actually start doing so programmatically.
72

73
00:06:16.110 --> 00:06:20.630
There's actually some pretty slick stuff
evolving. Right now, there's not a
73

74
00:06:20.630 --> 00:06:25.770
standard. There's some generally accepted
standards but there's like no governing
74

75
00:06:25.770 --> 00:06:32.010
body says this is how you provide
hypermedia and a REST resource. So Spring
75

76
00:06:32.010 --> 00:06:36.420
does provide an implementation of HATEOS. I will get into in the future in this
76

77
00:06:36.420 --> 00:06:39.639
course. But I want you may make you
where there are different
77

78
00:06:39.639 --> 00:06:43.659
interpretations of this. So that the
standards still kind of evolving but
78

79
00:06:43.659 --> 00:06:49.509
it's pretty slick when you get there. Now
to summarize, what we have here. Level 1
79

80
00:06:49.509 --> 00:06:53.409
is gonna break a large service into
distinct URIs. So we're gonna get away
80

81
00:06:53.409 --> 00:06:59.259
from a remote procedure call effectively
and then start providing URIs. Now
81

82
00:06:59.259 --> 00:07:04.300
level 2 is probably where most of the
world is at, where there is RESTful APIs. And
82

83
00:07:04.300 --> 00:07:09.909
we're gonna start using verbs, that HTTP
verbs, to implement different actions. Now
83

84
00:07:09.909 --> 00:07:13.629
level 3 is where kind of where
things are going right now and it's
84

85
00:07:13.629 --> 00:07:16.569
gonna provide discoverability. We're
gonna provide hypermedia
85

86
00:07:16.569 --> 00:07:21.490
links inside our API. And that's gonna
make our API more self-documenting
86

87
00:07:21.490 --> 00:07:25.659
and will be able to programmatically
work with that. So that we need an important
87

88
00:07:25.659 --> 00:07:29.620
level. So it's important to remember how
these different technologies are working
88

89
00:07:29.620 --> 00:07:36.990
together and providing a very easy and
intuitive API to leverage.
