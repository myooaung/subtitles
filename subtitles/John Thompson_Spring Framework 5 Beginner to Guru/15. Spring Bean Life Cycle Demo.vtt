WEBVTT
0
1
00:00:04.220 --> 00:00:08.760
Alright we are going to take a look at
a demonstration of the Spring bean life
1

2
00:00:08.760 --> 00:00:12.360
cycle
just to recap some of the life cycle, what's
2

3
00:00:12.360 --> 00:00:15.540
going to happen is bean's going to get
Instantiated, Properties are going to get
3

4
00:00:15.540 --> 00:00:19.830
set and then the BeanNameAware
interface will get called, the 
4

5
00:00:19.830 --> 00:00:24.539
BeanFactory interface would get called, the
Application Context will get called and
5

6
00:00:24.539 --> 00:00:31.140
then a PreOnitialization via BeanPostProcessors will get called and then
6

7
00:00:31.140 --> 00:00:35.610
we'll get into the afterPropertiesSet of
Initializing Beans, Custom Init Method
7

8
00:00:35.610 --> 00:00:41.219
and then initialization of the PostInitialization using again BeanPostProcessors
8

9
00:00:41.219 --> 00:00:46.680
then the Bean is Ready to
Use and then we also have destruction
9

10
00:00:46.680 --> 00:00:51.180
where the Container Shutting Down, the
Disposable Bean interface will get
10

11
00:00:51.180 --> 00:00:55.620
called, the destroy method there and
then the Custom Destroy Method and
11

12
00:00:55.620 --> 00:01:00.570
then that the bean will be terminated.
Now I have a class that setup here,
12

13
00:01:00.570 --> 00:01:06.140
toggle over to IntelliJ and show you
that and what we had to do is implement
13

14
00:01:06.140 --> 00:01:11.580
InitializingBean, DisposableBean,
BeanNameAware, BeanFactoryAware
14

15
00:01:11.580 --> 00:01:16.259
and ApplicationContextAware. So the
InitializingBean is, that's going
15

16
00:01:16.259 --> 00:01:20.909
to be working with the startup and then
the aware interfaces are going to get
16

17
00:01:20.909 --> 00:01:25.530
called as well and just had to implement
a couple methods there and all I have is
17

18
00:01:25.530 --> 00:01:31.619
a series of system outline or system
output statements to put out messages
18

19
00:01:31.619 --> 00:01:36.509
there and this will run, this will start
up and put out the messages. I don't
19

20
00:01:36.509 --> 00:01:41.549
think I have to go through each one of
these, the overriding methods you can see
20

21
00:01:41.549 --> 00:01:47.340
there on line 24 to 47 these are the
different interfaces that we're
21

22
00:01:47.340 --> 00:01:51.360
implementing that Spring will detect has
been implemented and we'll call those
22

23
00:01:51.360 --> 00:01:56.790
methods. And then we have the two
annotations, the PostConstruct and PreDestroy.
23

24
00:01:56.790 --> 00:02:01.049
Those are the two annotations we
can use to annotate methods to get
24

25
00:02:01.049 --> 00:02:07.920
called and I've got messages there
on line 54 and line 59 to output
25

26
00:02:07.920 --> 00:02:13.890
with the annotated methods and then
finally on line 62 to 68 there
26

27
00:02:13.890 --> 00:02:17.910
I have a beforeInit() and then afterInit() and those are the methods that are
27

28
00:02:17.910 --> 00:02:22.350
going to get called by our our Bean Post
Processor so let's come in and take a
28

29
00:02:22.350 --> 00:02:29.340
look at the CustomBeanPostProcessor
and this is a Spring component annotated
29

30
00:02:29.340 --> 00:02:33.870
as a Component, so Spring will pick it up
and we implement the interface BeanPostProcessor
30

31
00:02:33.870 --> 00:02:38.940
and what this is going to do
is it's going to get called for each
31

32
00:02:38.940 --> 00:02:43.440
bean in the context and gives you a way
to work with these beans and you can do
32

33
00:02:43.440 --> 00:02:49.830
whatever you need to to the bean in the
life cycle using this and all I'm doing
33

34
00:02:49.830 --> 00:02:55.080
is saying if that bean is an instance of
our life cycle demo bean, I'm going to
34

35
00:02:55.080 --> 00:03:00.360
call the beforeInit method to match
up with the BeforeInitialization and
35

36
00:03:00.360 --> 00:03:06.300
then the afterInit method to match up
with the AfterInitialization so we can
36

37
00:03:06.300 --> 00:03:10.170
run this it's going to run pretty quick
here and run this now and we'll take a
37

38
00:03:10.170 --> 00:03:17.760
look at the output and you can see I'm
in the LifecycleBean Constructor, My
38

39
00:03:17.760 --> 00:03:22.230
Bean Name is , Bean Factory has been set,
Application context has been set,
39

40
00:03:22.230 --> 00:03:26.970
we're gonna toggle back over to keynote and you can see
that this is following along so we saw
40

41
00:03:26.970 --> 00:03:31.680
the constructor method then setting
properties in this example but the Aware
41

42
00:03:31.680 --> 00:03:36.299
interfaces get called then the PostBeanProcessor gets called so we can see
42

43
00:03:36.299 --> 00:03:42.930
these messages here and where
as Called by the Bean Post Processor, The
43

44
00:03:42.930 --> 00:03:48.560
Post Construct method so that they match
up to the annotated method and then the
44

45
00:03:48.560 --> 00:03:54.450
Life cycle properties has been set and
then the After init, so you can see all
45

46
00:03:54.450 --> 00:03:59.370
these messages are tying up with the
demo class and this is as the whole
46

47
00:03:59.370 --> 00:04:04.370
Spring context is going through its life
cycle and then we can see we have our
47

48
00:04:04.370 --> 00:04:09.000
dependency injection messages from the
beans that we were working with before
48

49
00:04:09.000 --> 00:04:14.370
and just as a visual, I'm putting a
double hashtag in front of the messages
49

50
00:04:14.370 --> 00:04:19.650
from our life cycle bean so these
instructor here that was from our
50

51
00:04:19.650 --> 00:04:25.290
dependency injection before and then
down at the very bottom we can see that
51

52
00:04:25.290 --> 00:04:30.300
we start getting some chatter in the
logs about Spring cleaning up and we can
52

53
00:04:30.300 --> 00:04:36.390
see right here where two termination
methods get called so the Post Processor
53

54
00:04:36.390 --> 00:04:47.940
doesn't do anything in termination but
the Predestroy gets called and the Predestroy
54

55
00:04:47.940 --> 00:04:53.840
and then I'm sorry the
DisposableBean method gets called. So a
55

56
00:04:53.840 --> 00:05:01.110
pretty handy little life cycle you can see that
it runs pretty quick and I am going to
56

57
00:05:01.110 --> 00:05:05.970
check this into github under the branch
bean life cycle if you want to check
57

58
00:05:05.970 --> 00:05:10.230
this out and experiment with some of the
Spring lifecycle stuff and you're more
58

59
00:05:10.230 --> 00:05:12.860
than welcome to do so.
