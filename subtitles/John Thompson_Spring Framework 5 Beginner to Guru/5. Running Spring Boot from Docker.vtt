WEBVTT
0
1
00:00:02.892 --> 00:00:04.721
- Okay, in this part of the course, we are
1

2
00:00:04.721 --> 00:00:05.554
going to to take a look at taking
2

3
00:00:05.554 --> 00:00:08.143
a Spring Boot jar and putting it
3

4
00:00:08.143 --> 00:00:10.398
into our Docker image that we are going to
4

5
00:00:10.398 --> 00:00:12.262
prepare, and get that Docker image
5

6
00:00:12.262 --> 00:00:14.176
all set up, and we'll actually run
6

7
00:00:14.176 --> 00:00:15.657
the Docker image and bring that
7

8
00:00:15.657 --> 00:00:18.226
right up, and run our Spring Boot
8

9
00:00:18.226 --> 00:00:20.002
application right out of a Docker image.
9

10
00:00:20.002 --> 00:00:21.665
So, I'm going to toggle over to
10

11
00:00:21.665 --> 00:00:24.508
my screen now, and show you exactly how to do that.
11

12
00:00:24.508 --> 00:00:25.341
What we are going to do is,
12

13
00:00:25.341 --> 00:00:28.696
we're going to create the Spring Boot artifact,
13

14
00:00:28.696 --> 00:00:31.083
create a Docker file, which will give Docker
14

15
00:00:31.083 --> 00:00:33.770
a recipe to create our image.
15

16
00:00:33.770 --> 00:00:35.862
We'll create our image.
16

17
00:00:35.862 --> 00:00:38.260
Then we'll go out and run it and toggle over
17

18
00:00:38.260 --> 00:00:41.485
to Chrome and bring up our Spring Boot application
18

19
00:00:41.485 --> 00:00:43.923
running inside a Docker container.
19

20
00:00:43.923 --> 00:00:47.208
Okay, I want to show you a couple things here, real quick.
20

21
00:00:47.208 --> 00:00:48.833
As far as how the Maven build works,
21

22
00:00:48.833 --> 00:00:50.640
we'll be looking at this a lot closer
22

23
00:00:50.640 --> 00:00:54.548
going forward, but, if you're not terribly familiar
23

24
00:00:54.548 --> 00:00:56.242
with Spring Boot so what happens,
24

25
00:00:56.242 --> 00:01:00.141
it is not an executable jar, but it is fat jar.
25

26
00:01:00.141 --> 00:01:04.231
And by fat jar, what I mean is that it has everything
26

27
00:01:04.231 --> 00:01:06.550
self-contained, so it is an executable jar,
27

28
00:01:06.550 --> 00:01:09.085
which includes all the dependencies.
28

29
00:01:09.085 --> 00:01:12.394
So, normally when we build something,
29

30
00:01:12.394 --> 00:01:15.121
we just get the project artifacts.
30

31
00:01:15.121 --> 00:01:17.197
With Spring Boot, it's going to include in
31

32
00:01:17.197 --> 00:01:20.088
all the various jars and dependencies,
32

33
00:01:20.088 --> 00:01:22.913
so normal jar application would just
33

34
00:01:22.913 --> 00:01:25.187
have the classes of your project.
34

35
00:01:25.187 --> 00:01:27.576
Here, we have a fat jar, some people
35

36
00:01:27.576 --> 00:01:30.472
call it an uber jar that includes
36

37
00:01:30.472 --> 00:01:32.346
all the Maven dependencies that haven't
37

38
00:01:32.346 --> 00:01:33.461
been specified in the project.
38

39
00:01:33.461 --> 00:01:37.019
So, the original dot original jar,
39

40
00:01:37.019 --> 00:01:38.797
that's our classes.
40

41
00:01:38.797 --> 00:01:41.547
The Spring Boot jar here, that is
41

42
00:01:42.719 --> 00:01:45.766
the fat or the uber jar that includes
42

43
00:01:45.766 --> 00:01:47.922
all the jars for like the Spring framework,
43

44
00:01:47.922 --> 00:01:50.036
H2 database, Thymeleaf.
44

45
00:01:50.036 --> 00:01:52.177
So, all the dependencies that have been specified
45

46
00:01:52.177 --> 00:01:54.963
in our Maven Palm are included in that jar.
46

47
00:01:54.963 --> 00:01:57.293
What's nice about this is it gives us
47

48
00:01:57.293 --> 00:01:58.656
an executable jar that we can just
48

49
00:01:58.656 --> 00:02:01.489
plunk into Docker file and run it.
49

50
00:02:02.416 --> 00:02:05.060
So, what I want to show you now is
50

51
00:02:05.060 --> 00:02:07.866
I have prepared a Docker file.
51

52
00:02:07.866 --> 00:02:11.788
I'm going to come over here to the command line, and working
52

53
00:02:11.788 --> 00:02:14.480
my little temp directory again, and I've got
53

54
00:02:14.480 --> 00:02:17.374
two files in there, and one I've copied over
54

55
00:02:17.374 --> 00:02:20.671
the Spring Boot web -0.0.1-snapshot
55

56
00:02:20.671 --> 00:02:23.171
jar, and that is directly from
56

57
00:02:24.913 --> 00:02:26.672
the target directory.
57

58
00:02:26.672 --> 00:02:29.316
So, what you need to do to generate this
58

59
00:02:29.316 --> 00:02:32.838
is run the package command in Maven, and it
59

60
00:02:32.838 --> 00:02:35.826
will build that for us, but we need
60

61
00:02:35.826 --> 00:02:37.975
to work with that build artifact.
61

62
00:02:37.975 --> 00:02:40.454
So, that is the build artifact that we're dealing with
62

63
00:02:40.454 --> 00:02:44.621
is that jar, and if I do an ls -ltr,
63

64
00:02:46.040 --> 00:02:49.558
we'd see that jar does have some girth to it.
64

65
00:02:49.558 --> 00:02:52.111
So, let's take a look at the Docker file now.
65

66
00:02:52.111 --> 00:02:53.778
So, vi Dockerfile.
66

67
00:02:55.547 --> 00:02:56.836
I don't use nano.
67

68
00:02:56.836 --> 00:03:00.100
So, we can see on the top line, it says
68

69
00:03:00.100 --> 00:03:03.063
from centos, so that is the Centos image
69

70
00:03:03.063 --> 00:03:07.230
that we were working with, and the next line,
70

71
00:03:07.327 --> 00:03:09.073
remember we did the install java,
71

72
00:03:09.073 --> 00:03:12.490
so I am doing a run install java minus y,
72

73
00:03:14.428 --> 00:03:17.556
so yum install minus y java.
73

74
00:03:17.556 --> 00:03:21.032
This is a very important step that installs
74

75
00:03:21.032 --> 00:03:24.025
the Java JDK for us.
75

76
00:03:24.025 --> 00:03:28.192
The minus y defaults the questions to yes,
76

77
00:03:28.260 --> 00:03:29.893
so if you remember, we had to say yes
77

78
00:03:29.893 --> 00:03:31.849
a couple times there on the downloads.
78

79
00:03:31.849 --> 00:03:34.210
This defaults that to yes, so it does
79

80
00:03:34.210 --> 00:03:35.661
a silent install of the yum.
80

81
00:03:35.661 --> 00:03:39.374
If we don't do the minus y, the Docker built process
81

82
00:03:39.374 --> 00:03:41.170
is not terribly happy with that.
82

83
00:03:41.170 --> 00:03:42.812
It will actually fail.
83

84
00:03:42.812 --> 00:03:45.900
Now, we need to add in a volume
84

85
00:03:45.900 --> 00:03:48.180
of slash temp, and this is where
85

86
00:03:48.180 --> 00:03:50.874
Spring Boot will store temp files for us.
86

87
00:03:50.874 --> 00:03:53.901
So, kind of a minor, but important step.
87

88
00:03:53.901 --> 00:03:57.454
Without it the Tomcat stuff won't execute properly.
88

89
00:03:57.454 --> 00:04:00.514
So, that's a default that Spring Boot utilizes.
89

90
00:04:00.514 --> 00:04:04.070
Now, the next line there, the add.
90

91
00:04:04.070 --> 00:04:07.749
So, this is saying add from the current directory,
91

92
00:04:07.749 --> 00:04:09.980
just doing a slash Spring Boot.
92

93
00:04:09.980 --> 00:04:11.936
So, the way the Docker file works,
93

94
00:04:11.936 --> 00:04:14.940
it's relative to the Docker file, and we are
94

95
00:04:14.940 --> 00:04:16.863
asking it to add in that snapshot
95

96
00:04:16.863 --> 00:04:20.946
artifact, and I'm adding it in as myapp.jar.
96

97
00:04:21.898 --> 00:04:24.812
So, it moves the file over and it actually
97

98
00:04:24.812 --> 00:04:26.882
does a little rename of the file, so that
98

99
00:04:26.882 --> 00:04:30.215
that jar artifact becomes myapp.jar
99

100
00:04:31.329 --> 00:04:33.540
inside of the Docker image.
100

101
00:04:33.540 --> 00:04:37.707
Now, the next line, the run sh, that's a shell command.
101

102
00:04:38.126 --> 00:04:41.459
We are saying to touch the jar, and what
102

103
00:04:42.547 --> 00:04:45.214
this does is it updates the date
103

104
00:04:46.698 --> 00:04:48.645
on the jar file, and this could be
104

105
00:04:48.645 --> 00:04:51.049
important if we had static resources,
105

106
00:04:51.049 --> 00:04:53.687
such as images or things like that.
106

107
00:04:53.687 --> 00:04:55.784
So, that'll change the date for those,
107

108
00:04:55.784 --> 00:04:57.433
so if they get cached or something,
108

109
00:04:57.433 --> 00:04:59.863
the new version will get pulled down.
109

110
00:04:59.863 --> 00:05:02.323
Now, the next piece, I stole those
110

111
00:05:02.323 --> 00:05:04.145
directly from the Spring guys.
111

112
00:05:04.145 --> 00:05:06.519
They have an article on it, and this is
112

113
00:05:06.519 --> 00:05:09.809
an entrypoint, and this is a command.
113

114
00:05:09.809 --> 00:05:12.752
An entrypoint is basically the command that
114

115
00:05:12.752 --> 00:05:15.454
the Docker image is going to run
115

116
00:05:15.454 --> 00:05:17.551
when it's run inside of a container.
116

117
00:05:17.551 --> 00:05:21.496
So, this is a run Java with a parameter
117

118
00:05:21.496 --> 00:05:24.913
of minus Djava security.egd, and this
118

119
00:05:27.368 --> 00:05:30.285
gives us a urandom value, and this
119

120
00:05:31.339 --> 00:05:34.907
helps Tomcat start up faster, so a very long,
120

121
00:05:34.907 --> 00:05:38.102
technical reason, but the key part
121

122
00:05:38.102 --> 00:05:41.446
is to remember that it gets Tomcat to start faster.
122

123
00:05:41.446 --> 00:05:44.682
It says minus jar, and then it gives us
123

124
00:05:44.682 --> 00:05:48.849
the myapp jar, so that's the jar artifact.
124

125
00:05:49.064 --> 00:05:53.231
So, long story short, entrypoint says run our jar.
125

126
00:05:53.584 --> 00:05:55.896
So, pretty simple Docker file.
126

127
00:05:55.896 --> 00:05:57.122
Not too much going on there.
127

128
00:05:57.122 --> 00:06:00.867
We install Java, set up a temp directory,
128

129
00:06:00.867 --> 00:06:03.329
copy over the jar, punch the jar to update
129

130
00:06:03.329 --> 00:06:07.229
the file time, and then we run the jar.
130

131
00:06:07.229 --> 00:06:09.146
Let's quit out of this.
131

132
00:06:11.980 --> 00:06:15.078
Now, to build this, we want to run
132

133
00:06:15.078 --> 00:06:17.828
the docker command build minus t.
133

134
00:06:19.644 --> 00:06:21.728
Minus t is for a tag, so we are going to tag
134

135
00:06:21.728 --> 00:06:24.531
this image with spring-boot-docker, and the next
135

136
00:06:24.531 --> 00:06:26.433
important thing is that dot that says
136

137
00:06:26.433 --> 00:06:29.256
look in the local directory for this,
137

138
00:06:29.256 --> 00:06:31.082
for our Docker file, and it defaults to
138

139
00:06:31.082 --> 00:06:34.376
the name Docker file, and it's Docker file
139

140
00:06:34.376 --> 00:06:37.192
with a capital D, not camel case.
140

141
00:06:37.192 --> 00:06:39.005
I've made that mistake in the past, and it's
141

142
00:06:39.005 --> 00:06:40.475
not happy about that.
142

143
00:06:40.475 --> 00:06:44.203
So, now you can see, we're doing steps, and these steps
143

144
00:06:44.203 --> 00:06:45.948
are coming right out of the Docker file,
144

145
00:06:45.948 --> 00:06:49.078
so it's running the Docker file, and it started
145

146
00:06:49.078 --> 00:06:51.824
that up, and if you see what's scrolling
146

147
00:06:51.824 --> 00:06:55.363
across the screen, this is going to look
147

148
00:06:55.363 --> 00:06:57.091
very, very familiar, because it's the exact
148

149
00:06:57.091 --> 00:07:00.301
same output that we got when we started up
149

150
00:07:00.301 --> 00:07:03.977
the Centos image, and we ran yum install.
150

151
00:07:03.977 --> 00:07:06.478
So, it's going through the exact same images, and what's
151

152
00:07:06.478 --> 00:07:09.402
happening in the background now is
152

153
00:07:09.402 --> 00:07:11.951
Docker is going out, and it's running
153

154
00:07:11.951 --> 00:07:13.927
this command, and when this command
154

155
00:07:13.927 --> 00:07:15.375
is complete, it's going to create
155

156
00:07:15.375 --> 00:07:18.440
an image layer, and just like we saw before,
156

157
00:07:18.440 --> 00:07:21.166
now, before where we had these Docker images
157

158
00:07:21.166 --> 00:07:23.257
made of multiple layers, we are actually
158

159
00:07:23.257 --> 00:07:25.868
creating one with yum command to install
159

160
00:07:25.868 --> 00:07:28.393
Java, and we'll create another layer
160

161
00:07:28.393 --> 00:07:30.227
when we install the jar file.
161

162
00:07:30.227 --> 00:07:32.089
So, our Docker image is going to have
162

163
00:07:32.089 --> 00:07:35.102
multiple layers, and I think the Centos
163

164
00:07:35.102 --> 00:07:38.009
it only had one layer, a base layer, and we'll
164

165
00:07:38.009 --> 00:07:39.717
have several layers here.
165

166
00:07:39.717 --> 00:07:41.843
Now, we can see each one of these steps
166

167
00:07:41.843 --> 00:07:45.576
is probably going to produce a layer, and we can see
167

168
00:07:45.576 --> 00:07:48.088
that we successfully built that container.
168

169
00:07:48.088 --> 00:07:51.184
So, I'm going to come over here and cheat.
169

170
00:07:51.184 --> 00:07:53.351
I've saved these commands.
170

171
00:07:56.452 --> 00:08:00.619
Before I run that, I'm going to paste this real quick.
171

172
00:08:01.000 --> 00:08:03.485
So, I have docker run minus d to run
172

173
00:08:03.485 --> 00:08:06.682
in the background process, and a minus p
173

174
00:08:06.682 --> 00:08:09.850
of 8080:8080, so that's mapping
174

175
00:08:09.850 --> 00:08:12.467
a localhost 8080, and I am saying
175

176
00:08:12.467 --> 00:08:14.806
to run the image of Spring Boot Docker.
176

177
00:08:14.806 --> 00:08:17.732
So, just do a quick toggle over
177

178
00:08:17.732 --> 00:08:20.537
here, and this is what I had up before.
178

179
00:08:20.537 --> 00:08:21.957
When I refresh, we can see that
179

180
00:08:21.957 --> 00:08:23.692
that dies, so I want to prove to you
180

181
00:08:23.692 --> 00:08:26.978
that nothing's running, nothing's up my sleeve.
181

182
00:08:26.978 --> 00:08:29.352
Now, I'm going to come over here and hit
182

183
00:08:29.352 --> 00:08:31.839
enter, and we get that back.
183

184
00:08:31.839 --> 00:08:33.839
So, I can do docker ps.
184

185
00:08:35.102 --> 00:08:39.269
We can see that is running, docker logs, and let's
185

186
00:08:39.409 --> 00:08:40.659
grab this name.
186

187
00:08:44.539 --> 00:08:45.744
Oops.
187

188
00:08:45.744 --> 00:08:49.911
Get a little space in there, and we can see
188

189
00:08:49.953 --> 00:08:52.613
that everything has come up normally.
189

190
00:08:52.613 --> 00:08:54.277
So, it does start up pretty quick
190

191
00:08:54.277 --> 00:08:56.471
when running from a jar.
191

192
00:08:56.471 --> 00:09:00.638
Now let's jump over here, and it already refreshed.
192

193
00:09:02.353 --> 00:09:06.501
So, we can see that it's running for us, and I'm
193

194
00:09:06.501 --> 00:09:10.334
not sure if I have any logging output on this.
194

195
00:09:12.494 --> 00:09:16.661
So, just like when you when you ask how we do a minus f,
195

196
00:09:17.739 --> 00:09:18.739
and it does look like we're getting
196

197
00:09:18.739 --> 00:09:22.239
some chatter there, so let's do a refresh.
197

198
00:09:29.024 --> 00:09:30.258
No, I'm sorry, I lied.
198

199
00:09:30.258 --> 00:09:32.116
I'm not getting any logging output,
199

200
00:09:32.116 --> 00:09:34.420
so I'd have to change up the logging output,
200

201
00:09:34.420 --> 00:09:37.332
but the minus f is going to give that set, and if
201

202
00:09:37.332 --> 00:09:39.552
you do have the logging output increased,
202

203
00:09:39.552 --> 00:09:42.537
we can definitely get that right to the console,
203

204
00:09:42.537 --> 00:09:45.128
so it's actually a kind of a nice little feature of Docker.
204

205
00:09:45.128 --> 00:09:46.065
All right, so that's it.
205

206
00:09:46.065 --> 00:09:47.459
That's all there is to running
206

207
00:09:47.459 --> 00:09:51.375
a Spring Boot application inside of Docker.
207

208
00:09:51.375 --> 00:09:54.053
You can see the actual steps to create the container,
208

209
00:09:54.053 --> 00:09:56.160
or create the image and then run the container,
209

210
00:09:56.160 --> 00:09:58.220
were fairly simple, fairly short,
210

211
00:09:58.220 --> 00:10:01.169
but a number of things had to line up, and to get you
211

212
00:10:01.169 --> 00:10:03.766
from not knowing anything to Docker
212

213
00:10:03.766 --> 00:10:06.516
to here, I feel it's quite a bit.
213

214
00:10:07.605 --> 00:10:09.017
A lot of things came into play.
214

215
00:10:09.017 --> 00:10:13.184
We took that Centos image, loaded up the Spring Boot
215

216
00:10:13.232 --> 00:10:16.116
through a Docker file, ran that Docker file
216

217
00:10:16.116 --> 00:10:19.340
via Docker to create a Docker image, and then
217

218
00:10:19.340 --> 00:10:21.353
we started up that image, and we were able
218

219
00:10:21.353 --> 00:10:23.260
to go right inside of it and see our
219

220
00:10:23.260 --> 00:10:25.238
Spring Boot application running.
220

221
00:10:25.238 --> 00:10:28.238
(heavy metal music)
