WEBVTT
0
1
00:00:04.279 --> 00:00:09.870
Alright in this video we want to take a
look at persisting the image file into
1

2
00:00:09.870 --> 00:00:13.830
the database and we're going to do that
as a byte array. So a couple minor things
2

3
00:00:13.830 --> 00:00:18.840
that we need to go through here. Course
on, we're still following test-driven
3

4
00:00:18.840 --> 00:00:22.560
development so I've written a test for
it and that's what I have on screen
4

5
00:00:22.560 --> 00:00:27.359
right now starting on line 34. We're
going to test save of the image file and
5

6
00:00:27.359 --> 00:00:32.219
again we're going to use the MockMultipartFile as our input. So that's
6

7
00:00:32.219 --> 00:00:35.910
going to work out for our unit test here. And you can see I go through and set
7

8
00:00:35.910 --> 00:00:43.559
that up on line 40-41, we create a Recipe
object and assign it an id value. We
8

9
00:00:43.559 --> 00:00:47.969
create an Optional which is going to be
the return of findById method and
9

10
00:00:47.969 --> 00:00:51.329
that's the method that's going to be
implemented by Spring Data JPA.
10

11
00:00:51.329 --> 00:00:56.789
So we're going to mock that out there on
line 44 and also this time I'm going to
11

12
00:00:56.789 --> 00:01:01.680
do an assert and I want to assert
against the saved recipe because I want
12

13
00:01:01.680 --> 00:01:05.670
to check out, make sure that the bytes
are going to be the same as to what we
13

14
00:01:05.670 --> 00:01:10.140
pass in and that's what has been saved
on the recipe object. So you can see on
14

15
00:01:10.140 --> 00:01:16.320
line 46, I set up an ArgumentCaptor
and it is for the Recipe class. Now the
15

16
00:01:16.320 --> 00:01:23.340
save option right now, it doesn't return
anything. So we it returns void so we
16

17
00:01:23.340 --> 00:01:26.610
don't have to test the return value but
we do want to test what happens inside
17

18
00:01:26.610 --> 00:01:33.150
of it. So you can see on line 52, I'm
verifying that the recipeRepository
18

19
00:01:33.150 --> 00:01:38.970
save gets called one time and in that,
I'm going to use the argumentCaptor
19

20
00:01:38.970 --> 00:01:44.340
to capture the argument. And that's going
to give me a savedRecipe there on line
20

21
00:01:44.340 --> 00:01:51.240
53 and then I'm going to check to see if
the bytes match. And go ahead and run
21

22
00:01:51.240 --> 00:01:58.530
this guy. You can see that run and that
it is a passing test. Let's take a look
22

23
00:01:58.530 --> 00:02:06.850
at the actual implementation of this. So it switched over to the image service
23

24
00:02:06.850 --> 00:02:11.650
implementation and you can see
that it takes in the recipeId and
24

25
00:02:11.650 --> 00:02:15.640
MultipartFile. That's what's going to
be passed in from the controller and of
25

26
00:02:15.640 --> 00:02:21.730
course on line 35 there, we're going to
go through and get the recipe object out
26

27
00:02:21.730 --> 00:02:26.110
of the repository because we're going to
be saving against an existing recipe. And
27

28
00:02:26.110 --> 00:02:31.900
then I need to convert it because that
MultipartFile that's going to use a
28

29
00:02:31.900 --> 00:02:37.570
Java primitive byte array and I need to
convert it to the wrapper class of a
29

30
00:02:37.570 --> 00:02:42.070
Byte into the Byte object and that's why I'm calling it byteObjects and I do a new
30

31
00:02:42.070 --> 00:02:47.500
Byte array to the length of the
primitive byte array there on line 37.
31

32
00:02:47.500 --> 00:02:54.820
And then 39 to 43 basically set up in
the iterator to iterate over that and we
32

33
00:02:54.820 --> 00:03:00.820
convert over the byteObjects. So we're
doing a conversion from the
33

34
00:03:00.820 --> 00:03:06.459
Java primitive to the wrapper object. And
that's kind of a little strange to have
34

35
00:03:06.459 --> 00:03:11.410
to do it that way. There's no auto boxing
available for arrays inside of Java. So
35

36
00:03:11.410 --> 00:03:18.070
just a touch extra code that we need to
do. And I want to point out also, let's go
36

37
00:03:18.070 --> 00:03:23.590
ahead and take a look at the Recipe
object. We are using the boxing
37

38
00:03:23.590 --> 00:03:28.060
object there and that is a
recommendation from the Hibernate team.
38

39
00:03:28.060 --> 00:03:31.900
I've had people say why don't you
just use the primitive. Primitives can't
39

40
00:03:31.900 --> 00:03:37.930
be null and so Hibernate team actually
recommends to use the wrappers for
40

41
00:03:37.930 --> 00:03:41.860
the primitive. So that is a Hibernate
recommendation and I
41

42
00:03:41.860 --> 00:03:49.000
typically considered the best practice
when working with Hibernate. So come back
42

43
00:03:49.000 --> 00:03:54.239
over here then we just set the image to
the byte array and then we save it and
43

44
00:03:54.239 --> 00:04:01.540
right now I'm going to put a note in
here. Coming up in the course, we're going
44

45
00:04:01.540 --> 00:04:05.350
to be focusing a little bit more on
exception handling. So right now we're
45

46
00:04:05.350 --> 00:04:09.910
not handling any type of exception in
here. So we definitely will be getting
46

47
00:04:09.910 --> 00:04:16.019
to that in the future. So let's go ahead
and run all our tests.
47

48
00:04:16.019 --> 00:04:20.320
So this is a habit that you want to be
getting into is to be running your tests
48

49
00:04:20.320 --> 00:04:22.930
frequently because if you break
something unintentionally, you want to
49

50
00:04:22.930 --> 00:04:27.820
know sooner rather than later. And when
you get into larger development shops it
50

51
00:04:27.820 --> 00:04:32.140
is definitely frowned upon
to check on something that breaks your
51

52
00:04:32.140 --> 00:04:41.890
test. So all the tests do run and come up
here and run the application now. You see
52

53
00:04:41.890 --> 00:04:49.690
Spring Boot is starting up and let's
come over here into Chrome and we will
53

54
00:04:49.690 --> 00:04:53.740
test out this functionality. I'm going to refresh this and it's still displaying
54

55
00:04:53.740 --> 00:04:57.430
the image. We haven't done the image
display yet. Now I can come in and choose a
55

56
00:04:57.430 --> 00:05:04.480
file and I am just going to upload that
file. It's just a simple image file and
56

57
00:05:04.480 --> 00:05:09.400
we can see that it did take, and let's
come over here to the database console. I
57

58
00:05:09.400 --> 00:05:15.850
want to take a look at the database and
let's take a look at recipe, run that. And
58

59
00:05:15.850 --> 00:05:22.600
we can see that recipe 2 does have 72
thousand, almost seventy three thousand
59

60
00:05:22.600 --> 00:05:26.680
bytes on. That's roughly the size of the
image file that I did upload. So exactly
60

61
00:05:26.680 --> 00:05:30.669
what we're looking for and expecting to see
the byte array loaded into our
61

62
00:05:30.669 --> 00:05:33.780
H2 database.
