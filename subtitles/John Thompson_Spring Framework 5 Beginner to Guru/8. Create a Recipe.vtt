WEBVTT
0
1
00:00:04.250 --> 00:00:10.349
Alright in this video we want to take
a look at setting up a form to create a
1

2
00:00:10.349 --> 00:00:14.549
new recipe for our little recipe
application. Now the first thing I want
2

3
00:00:14.549 --> 00:00:20.580
to do is go back to the show form and on
line 20 here, I got the comment and
3

4
00:00:20.580 --> 00:00:26.039
there for a thymesVar. Yesterday when I
recorded this, and the previous video I was
4

5
00:00:26.039 --> 00:00:31.740
having problems with this. But between now
and then I've upgraded to IntelliJ 2017.2.
5

6
00:00:31.740 --> 00:00:37.430
I'm not sure if it's a change in
the version or perhaps I didn't have the
6

7
00:00:37.430 --> 00:00:41.760
comment in the right spot but by moving
it up to line 20 I no longer need
7

8
00:00:41.760 --> 00:00:45.660
several instances of that for the
intellisense to detect the proper object
8

9
00:00:45.660 --> 00:00:54.930
type here in the Thymeleaf expressions. So do a quick diff here, and we can see
9

10
00:00:54.930 --> 00:00:59.250
that I had several comments there which have now been taken out. That's no
10

11
00:00:59.250 --> 00:01:03.000
longer necessary and I've moved it up to
the top here on line 20. So you can see I
11

12
00:01:03.000 --> 00:01:07.680
was using several comments. I think it
was just either aims using the tag,
12

13
00:01:07.680 --> 00:01:14.460
having it nested inside the div elements
or needed to move it. Or by moving it up
13

14
00:01:14.460 --> 00:01:17.880
it and did clear up and intellisense is
working throughout the document now
14

15
00:01:17.880 --> 00:01:22.439
rather than red lining it like it was
before. But just a quick hint there on
15

16
00:01:22.439 --> 00:01:26.100
when I did a small change. I did if you
happen to be using intelliJ and preacher,
16

17
00:01:26.100 --> 00:01:31.680
this comment is IntelliJ specific. I
don't know if it will work with
17

18
00:01:31.680 --> 00:01:38.100
Eclipse. Alright moving right along to our
new form object. So I have a new recipe
18

19
00:01:38.100 --> 00:01:43.110
form up and want to go through a few
things of this. I'm not going to code out
19

20
00:01:43.110 --> 00:01:47.880
the entire HTML form for you live. I
think that'd be excruciating to have you
20

21
00:01:47.880 --> 00:01:54.240
guys sit through. First thing we want to
is talk about the form tag itself and
21

22
00:01:54.240 --> 00:02:00.180
that is up on line 24. So this is a
standard HTML form tag but you can see them
22

23
00:02:00.180 --> 00:02:05.700
using a Thymeleaf tag there and I am
saying object is recipe. So I'm going to
23

24
00:02:05.700 --> 00:02:11.250
pass in a recipe command object to the
property recipe and now that is going to
24

25
00:02:11.250 --> 00:02:16.070
be used for the rest of
form and then the th action that tells
25

26
00:02:16.070 --> 00:02:20.570
Thymeleaf that we're going to post to
recipe. So I'm not filming out the entire
26

27
00:02:20.570 --> 00:02:26.200
URL there. So Thymeleaf is going to parse
it at runtime and build the URL for us.
27

28
00:02:26.200 --> 00:02:32.030
Next thing on line 25. This is important. This form it's a generic form so we're
28

29
00:02:32.030 --> 00:02:36.770
going to be using this form for both
creations and updates. So we're able to
29

30
00:02:36.770 --> 00:02:42.950
reuse that and if we were doing an
update, we wanted to past along the ID
30

31
00:02:42.950 --> 00:02:47.510
value so that we know what to do. Obviously an ID isn't something that we
31

32
00:02:47.510 --> 00:02:52.700
want to expose to allow editable but we
do need to pass it in with the command
32

33
00:02:52.700 --> 00:02:57.230
object. So we know which ID value we are
editing here. In the case that we're
33

34
00:02:57.230 --> 00:03:02.600
looking at today in this video, the idea
is going to be blank since the recipe
34

35
00:03:02.600 --> 00:03:06.410
has not been created and that's going to
get assigned by the database when we
35

36
00:03:06.410 --> 00:03:11.420
persist it. Next thing I want to talk
about is on line 35. This is an example
36

37
00:03:11.420 --> 00:03:16.280
of an input. So you can see that we have
the bootstrap styling there around the
37

38
00:03:16.280 --> 00:03:25.100
input element but I'm also using a th
colon field and that star squiggly
38

39
00:03:25.100 --> 00:03:29.630
braces description. That is a property
off of a recipe . So it's important to
39

40
00:03:29.630 --> 00:03:36.709
remember that this is going to
effectively be read as recipe dot
40

41
00:03:36.709 --> 00:03:41.989
description. So that's going to be used.
It's like a dot notation but
41

42
00:03:41.989 --> 00:03:48.430
everything is implied within the
form that we are using the recipe object.
42

43
00:03:48.430 --> 00:03:53.510
Now we do have some radio buttons here.
I'm not implementing those right now.
43

44
00:03:53.510 --> 00:03:58.910
That's for the categories. I'm not going to
implement that right now as well as the
44

45
00:03:58.910 --> 00:04:02.420
difficulty. We're going to do both of
those in upcoming videos to show you how
45

46
00:04:02.420 --> 00:04:06.110
to work with those controls and get
those rendering. Right now we're
46

47
00:04:06.110 --> 00:04:10.100
primarily looking at the different
fields. So you have prep time, cook time,
47

48
00:04:10.100 --> 00:04:14.989
serving. So these are all text fields, all
string fields and then ingredients we're
48

49
00:04:14.989 --> 00:04:19.729
going to handle that separately. We'll go
off to another screen allow them to edit
49

50
00:04:19.729 --> 00:04:23.420
the different ingredients associated
with the recipe.
50

51
00:04:23.420 --> 00:04:31.080
So we'll create a URL edit / recipe /id
/ ingredients and then we'll do a list
51

52
00:04:31.080 --> 00:04:35.190
of ingredients there and we'll get to
that as well as in future use. So let's
52

53
00:04:35.190 --> 00:04:42.930
take a quick look at this inside of
chrome and this is running from the
53

54
00:04:42.930 --> 00:04:47.160
localhost. So this is what we look like. This is a natural templating
54

55
00:04:47.160 --> 00:04:53.480
engine so we have all the basic
properties here. I'm not sure why I got that there.
55

56
00:04:53.480 --> 00:05:04.710
Must be description and why are we doing
that. I'll take a quick look and we see in
56

57
00:05:04.710 --> 00:05:09.870
recipe description for some reason, I
have a last password running on my
57

58
00:05:09.870 --> 00:05:14.669
Chrome browser and thinks that it's a
password or login field which is odd but
58

59
00:05:14.669 --> 00:05:18.300
otherwise that icon would be there. I just
want to point out that it's
59

60
00:05:18.300 --> 00:05:22.860
being injected by a Chrome plugin. So
we're going to have our description test
60

61
00:05:22.860 --> 00:05:27.180
field. We will come up with checkboxes for
the categories, we will implement that in
61

62
00:05:27.180 --> 00:05:31.410
the future. We will be employing the
functionality day for prep time, cook
62

63
00:05:31.410 --> 00:05:35.340
time and all the other text fields. This
is not going to be implemented at this
63

64
00:05:35.340 --> 00:05:39.990
point so that difficulty is not going to
work. We'll do that in a future video
64

65
00:05:39.990 --> 00:05:44.640
then we'll get directions and notes. So
the important thing now is we need to
65

66
00:05:44.640 --> 00:05:53.820
jog over to the controller and implement
the controller methods. Alright the
66

67
00:05:53.820 --> 00:05:56.610
first one that we want to do is
implement the method that will render
67

68
00:05:56.610 --> 00:06:07.699
the view. And this is going to
take in the model and what we want to do
68

69
00:06:07.699 --> 00:06:24.319
is map it to recipe /new. This is going to
be a pretty simple one to implement. I'm
69

70
00:06:24.319 --> 00:06:33.740
going to add an attribute. I'm going to
add in a new RecipeCommand so that that
70

71
00:06:33.740 --> 00:06:40.039
becomes pretty simple and then for
what we want to return, it's a simple
71

72
00:06:40.039 --> 00:06:50.120
String of the view name. So you can see
there in line 34, we're returning recipe
72

73
00:06:50.120 --> 00:06:54.889
forms or recipes slash recipeform which
is going to match in our templates
73

74
00:06:54.889 --> 00:07:00.500
recipe slash recipeform at last the html. So that is going to give us the view
74

75
00:07:00.500 --> 00:07:05.240
capability. Now that's going to
handle it when we go to recipe new and
75

76
00:07:05.240 --> 00:07:13.669
display our new form but we got to
handle the posts back. I'm going to call
76

77
00:07:13.669 --> 00:07:25.580
it saveOrUpdate since it's going to work
for both. Now this is where we're using
77

78
00:07:25.580 --> 00:07:31.909
the ModelAttribute. That's an annotation
to tell Spring to bind the form post
78

79
00:07:31.909 --> 00:07:35.590
parameters to the RecipeCommand object. So that's going to happen for us
79

80
00:07:35.590 --> 00:07:40.159
automatically by the naming convention
of the properties that we did in the
80

81
00:07:40.159 --> 00:07:49.930
form. Now remember our service returns
back a new implementation of the command.
81

82
00:07:54.169 --> 00:08:01.490
So we're going to return back that and
what we want to do here, we're going to
82

83
00:08:01.490 --> 00:08:10.759
use a redirect and this is a command
that tells Spring MVC to redirect to a
83

84
00:08:10.759 --> 00:08:25.520
specific URL. We're going to append that
with the ID of the saved object. So the
84

85
00:08:25.520 --> 00:08:30.169
functionality is we'll see the
form, it'll come up we'll enter in all
85

86
00:08:30.169 --> 00:08:36.800
the properties that we want and then
when we post it with the save, they'll go
86

87
00:08:36.800 --> 00:08:41.479
into this. It will save to the database
and then come back and we will redirect
87

88
00:08:41.479 --> 00:08:47.959
to the recipe show and show the
saved recipe. Now we also need to map
88

89
00:08:47.959 --> 00:08:50.320
this.
89

90
00:08:59.690 --> 00:09:06.120
So this here's the older way. So the
RequestMapping annotation has several
90

91
00:09:06.120 --> 00:09:10.800
options that we can pass to a name and
method RequestMethod post and this is a
91

92
00:09:10.800 --> 00:09:17.310
actually a tried-and-true way of doing
exactly as really as far as requesting
92

93
00:09:17.310 --> 00:09:22.620
or specifying the HTTP method that is
going to be used as far as the verb
93

94
00:09:22.620 --> 00:09:26.370
that's happening. And there's actually a
newer way to do it. This actually came
94

95
00:09:26.370 --> 00:09:31.410
along in Spring 4.3 if I remember
correctly. So let's get rid of that and
95

96
00:09:31.410 --> 00:09:36.080
we can actually use the Post annotation.
96

97
00:09:36.230 --> 00:09:41.820
So what this is telling Spring to do is
when we get a post to the recipe URL or
97

98
00:09:41.820 --> 00:09:48.029
the recipe path to invoke this
specific method here. Alright and I did
98

99
00:09:48.029 --> 00:09:53.250
find a little bug inside of Spring. If you
use it with the name property here it
99

100
00:09:53.250 --> 00:09:58.649
does not pick up correctly. So I'm going
to get rid of that. So now we just has a
100

101
00:09:58.649 --> 00:10:03.810
RequestMapping of recipe without the
name attribute and PostMapping together
101

102
00:10:03.810 --> 00:10:07.620
and it will work and actually there's
something I'm probably going to file a
102

103
00:10:07.620 --> 00:10:16.620
bug report with the Spring team on. So
just a FYI in case you encounter it. So
103

104
00:10:16.620 --> 00:10:25.080
now I am going to go ahead and run
Spring Boot. So Spring Boot is up and
104

105
00:10:25.080 --> 00:10:30.930
running. Let's toggle it on over and this
here's the bug that we saw before, so I'm
105

106
00:10:30.930 --> 00:10:37.320
going to refresh this. Kind of a really strange
behavior that was happening. So now we
106

107
00:10:37.320 --> 00:10:44.700
have our two recipes that are being loaded by
the bootstrap. We come up here, new slash
107

108
00:10:44.700 --> 00:10:59.829
new. My mistake. Do recipe new
and that will get to our form and on
108

109
00:10:59.829 --> 00:11:05.470
these properties, we do need to be using
proper numbers because we don't have any
109

110
00:11:05.470 --> 00:11:09.329
validation yet that's also coming up.
110

111
00:11:11.399 --> 00:11:18.430
Just add in some texts for the
description, do the same for notes. Now we
111

112
00:11:18.430 --> 00:11:25.630
can go ahead and submit it and we can
see that it did redirect to the show
112

113
00:11:25.630 --> 00:11:30.490
property and our properties were
persisted. Obviously no categories, no
113

114
00:11:30.490 --> 00:11:35.529
difficulty or ingredients but everything
else did persist properly to the
114

115
00:11:35.529 --> 00:11:37.920
database.
