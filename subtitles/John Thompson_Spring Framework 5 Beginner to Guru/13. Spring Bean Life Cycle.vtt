WEBVTT
0
1
00:00:05.570 --> 00:00:08.730
Okay we're gonna talk about the Spring Bean Lifecycle.
1

2
00:00:08.810 --> 00:00:11.080
Now the beans do go through a specific life cycle.
2

3
00:00:11.090 --> 00:00:16.870
There's actually a lot going on behind the scenes and a lot of this is handled by the framework.
3

4
00:00:16.880 --> 00:00:21.640
And as a Spring Developer we don't need to get into it that often.
4

5
00:00:21.650 --> 00:00:23.320
There are definitely times that you do.
5

6
00:00:23.330 --> 00:00:30.590
But generally speaking you can continue working on Spring applications and be blissfully unaware of
6

7
00:00:30.590 --> 00:00:37.160
this stuff but it is actually very important to know as you get into more and more complex applications
7

8
00:00:37.160 --> 00:00:39.230
with the Spring Framework.
8

9
00:00:39.230 --> 00:00:44.990
So let's take a quick look at the Spring Bean Lifecycle and the first thing that's gonna happen is we're
9

10
00:00:44.990 --> 00:00:49.390
going to instantiate that class so that class is going to get called.
10

11
00:00:49.640 --> 00:00:55.190
Obviously if it's got a constructor and dependencies in that constructor that's when those will get
11

12
00:00:55.190 --> 00:00:56.170
injected.
12

13
00:00:56.370 --> 00:01:01.880
And then we have the ability to inject properties into that so it can set property values on that bean
13

14
00:01:01.880 --> 00:01:06.250
like say a data source is going to have like a user name and password.
14

15
00:01:06.260 --> 00:01:08.940
So we'd be setting properties there and storing value.
15

16
00:01:08.950 --> 00:01:12.980
So we want to invoke from a properties file which is set at that point.
16

17
00:01:13.320 --> 00:01:19.920
Now there's a couple interfaces that you can implement and they're aware interfaces and these are gonna
17

18
00:01:19.940 --> 00:01:22.610
get called early on in the bean lifecycle.
18

19
00:01:22.730 --> 00:01:28.370
So you can see that BeanNameAware, BeanFactoryAware, and ApplicationContextAware. Those three are
19

20
00:01:28.370 --> 00:01:36.080
gonna get called in that order is that it gets wired up and then we have the preinitialization and
20

21
00:01:36.080 --> 00:01:42.770
we have BeanPostProcessors and we'll take a look at those in a future slide here and then the bean
21

22
00:01:42.770 --> 00:01:48.500
goes through initializing and there's an interface that we can do for initializing beans and then we
22

23
00:01:48.500 --> 00:01:51.290
can also specify a custom initialization.
23

24
00:01:51.290 --> 00:01:57.500
And then finally you can see down the bottom right hand corner there is the post initialization and
24

25
00:01:57.500 --> 00:02:00.540
that again as the BeanPostProcessors.
25

26
00:02:00.740 --> 00:02:05.970
And at that point that bean is considered ready to use by the framework and the framework moves on
26

27
00:02:06.160 --> 00:02:12.470
continuous creating the beans and gets everything wired up and then can run for an indefinite amount
27

28
00:02:12.470 --> 00:02:18.560
of time and then ultimately we're going to have some type of termination about ideally unless we just
28

29
00:02:18.560 --> 00:02:20.050
pull the plug on the server.
29

30
00:02:20.120 --> 00:02:22.990
So we should get a container shutdown signal.
30

31
00:02:23.210 --> 00:02:30.480
And at this point you have a interface you can implement called DisposableBean that destroy method
31

32
00:02:30.490 --> 00:02:34.770
will get called or you can specify a custom destroy method.
32

33
00:02:34.970 --> 00:02:39.650
And this is a handy way if you have something like opening up a socket and you need to do a clean and
33

34
00:02:39.650 --> 00:02:41.170
graceful disconnect.
34

35
00:02:41.180 --> 00:02:47.240
This is where you'd put that there and at that point after that the bean is destroyed or terminated
35

36
00:02:47.240 --> 00:02:55.000
and we have Arnold up there to terminate the bean. And that is the end of the Spring Bean Lifecycle.
36

37
00:02:55.180 --> 00:03:01.990
We did it manually the InitializingBean and DisposableBean. Those are callback interfaces and all you
37

38
00:03:01.990 --> 00:03:08.680
have to do is on your Spring bean is implement these interfaces in the InitializingBean after properties
38

39
00:03:08.690 --> 00:03:14.200
set that method will get called by the framework after the properties are set within that Spring bean
39

40
00:03:14.290 --> 00:03:20.230
lifecycle graph that we had there. And then likewise ,if you implement the disposable interface on your
40

41
00:03:20.230 --> 00:03:26.560
bean, the destroy will get called during shutdown after or being termination.
41

42
00:03:26.560 --> 00:03:31.510
So these are two callback interfaces that are provided by the Spring Framework which you can use you
42

43
00:03:31.510 --> 00:03:32.700
can implement one.
43

44
00:03:32.740 --> 00:03:34.840
Either one of them or none at all.
44

45
00:03:34.870 --> 00:03:39.470
So you don't have to implement these. You only need to implement them when you have a use for them.
45

46
00:03:40.380 --> 00:03:46.920
Next we have a couple of lifecycle annotations and these were introduced I think in Spring Framework 3
46

47
00:03:47.190 --> 00:03:48.210
I believe.
47

48
00:03:48.210 --> 00:03:51.620
So these two annotations you can hook into the beans lifecycle.
48

49
00:03:51.630 --> 00:03:57.540
We have post construct, these annotated methods will be called after the bean has been constructed but
49

50
00:03:57.540 --> 00:04:04.260
before it's been returned to the requesting object so it's like right after the bean gets created. And
50

51
00:04:04.260 --> 00:04:09.360
then we have PreDestroy. Kind of works like the lifecycle hook. Both these works are very similar and
51

52
00:04:09.360 --> 00:04:15.450
happen in near contexts of the lifecycle. PreDestroy is going to be called just before the bean
52

53
00:04:15.450 --> 00:04:23.040
gets destroyed by the container. And then in the life cycle we mentioned Bean Post Processors. Basically
53

54
00:04:23.040 --> 00:04:27.960
these give you a way to tap into the Spring context the life cycle and interact with the beans as they
54

55
00:04:27.960 --> 00:04:29.230
are processed.
55

56
00:04:29.400 --> 00:04:35.010
So you again do this by implementing an interface called BeingPostProcessor and it's going to ask
56

57
00:04:35.010 --> 00:04:38.000
you to provide implementations of two methods.
57

58
00:04:38.220 --> 00:04:44.190
And these two methods are going to get called during the bean creation process and both methods will
58

59
00:04:44.190 --> 00:04:50.010
take in an object which will be the bean that is being supplied and then you can interact with that
59

60
00:04:50.010 --> 00:04:55.410
object so you'd probably have to check the type of the object to set up a reflection there and do whatever
60

61
00:04:55.410 --> 00:05:00.720
you need to do. To be honest I've actually never found a use for these.
61

62
00:05:00.720 --> 00:05:04.310
I know they're there but I just never had a use for them.
62

63
00:05:04.380 --> 00:05:10.260
So it's kind of a cool feature knowing that you can hook into it but in reality it just never had a
63

64
00:05:10.590 --> 00:05:16.470
need to utilize these in doing Spring application development.
64

65
00:05:16.630 --> 00:05:25.270
Next we need talk about Aware interfaces. Spring provides at a time writing over 14 or 14 Aware interfaces.
65

66
00:05:25.900 --> 00:05:30.580
These are used to access the Spring Framework infrastructure.
66

67
00:05:30.880 --> 00:05:34.220
You see them used a lot with inside the Spring Framework.
67

68
00:05:34.220 --> 00:05:39.490
If you start going in the Spring code and looking through it you will see these interfaces being
68

69
00:05:39.490 --> 00:05:41.160
used quite a bit.
69

70
00:05:41.350 --> 00:05:47.200
But in reality they're not used that much by Spring application developers.
70

71
00:05:47.260 --> 00:05:54.160
I've had to use them occasionally when you have a specific use case but reality wise it's largely framework
71

72
00:05:54.160 --> 00:06:01.420
type stuff. As a day to day Spring developer doing business application development with the Spring
72

73
00:06:01.420 --> 00:06:03.850
Framework just not much of a need for them.
73

74
00:06:03.970 --> 00:06:10.990
We will do a quick review ApplicationContextAware. This one is probably one of the more common
74

75
00:06:10.990 --> 00:06:12.200
ones that you're going to use.
75

76
00:06:12.250 --> 00:06:19.280
And this gives you a way to get a handle of the application context in the ApplicationEventPublisher
76

77
00:06:19.300 --> 00:06:19.780
Aware
77

78
00:06:19.780 --> 00:06:25.870
This is one that you will use if you're going to be throwing application events, so you can define custom
78

79
00:06:25.870 --> 00:06:27.670
events inside a Spring.
79

80
00:06:27.920 --> 00:06:33.000
You can happen and set up event listeners. So that that's a real handy one.
80

81
00:06:33.070 --> 00:06:39.040
And then BeanFactoryAware, this is a way to get a handle on the Spring bean factory. If you have a
81

82
00:06:39.040 --> 00:06:42.470
need to get a handle on a bean within some type of process.
82

83
00:06:42.580 --> 00:06:44.350
That's also a very handy one.
83

84
00:06:44.530 --> 00:06:46.930
And the other one that are pretty specific.
84

85
00:06:47.200 --> 00:06:49.350
Honestly I am looking through them now.
85

86
00:06:49.450 --> 00:06:52.570
I really haven't found a need for them but they are there.
86

87
00:06:52.570 --> 00:06:53.680
Be aware of them.
87

88
00:06:53.800 --> 00:06:56.920
You may run into a situation where you do need to use them.
