WEBVTT
0
1
00:00:04.279 --> 00:00:08.970
Alright so we're going to take a look
at actual validation using Spring and
1

2
00:00:08.970 --> 00:00:14.849
Spring MVC here. So I've gone into the
RecipeCommand object and I've annotated
2

3
00:00:14.849 --> 00:00:19.800
it with some validation constraints that
we want to apply. So you can see there
3

4
00:00:19.800 --> 00:00:26.730
on line 24, I've added NotBlank and a
Size restriction on the description. I
4

5
00:00:26.730 --> 00:00:31.740
think we should have at least three
characters for the description and a max
5

6
00:00:31.740 --> 00:00:38.940
of 255. Now using a max of 255 here
because in our JPA classes, we've
6

7
00:00:38.940 --> 00:00:43.680
specified String properties and in the
database by default because we didn't
7

8
00:00:43.680 --> 00:00:48.899
specify any constraints there or mapping
parameters. By default Hibernate is going
8

9
00:00:48.899 --> 00:00:54.329
to create a bar chart column with a
length of 255. So that's just the default
9

10
00:00:54.329 --> 00:01:00.270
behavior of Hibernate. So I'm playing
along with the default behavior of
10

11
00:01:00.270 --> 00:01:05.430
Hibernate and setting that to 255
characters there. And then for the prep
11

12
00:01:05.430 --> 00:01:10.229
Time and cookTime, I'm saying we
probably want a minimum one minute and I
12

13
00:01:10.229 --> 00:01:13.830
don't think anybody's going to do a
recipe over a thousand minutes long or
13

14
00:01:13.830 --> 00:01:18.360
cook anything over a thousand minutes. I
hope. So these are just trying to put in
14

15
00:01:18.360 --> 00:01:25.020
some sensible constraints there. Servings
min of 1, max of 100 and then for
15

16
00:01:25.020 --> 00:01:32.729
our property for the url, I'm saying it
must be a URL. Now that url property, it
16

17
00:01:32.729 --> 00:01:39.470
will allow a blank. So if I want to do it,
I could also double up and say not blank
17

18
00:01:39.470 --> 00:01:46.200
like so and then that's going to say we
must provide a valid URL. So sometimes
18

19
00:01:46.200 --> 00:01:51.210
these are a little tricky. You can use
multiples but I'm going to allow the URL
19

20
00:01:51.210 --> 00:01:56.219
to be optional and then I'm also saying
on the directions and that should not be
20

21
00:01:56.219 --> 00:02:03.270
blank either. So let's take a quick
look at our tests. So I've added in a new
21

22
00:02:03.270 --> 00:02:09.959
test and actually this one probably will
fail. Let's go ahead and run the
22

23
00:02:09.959 --> 00:02:14.610
controller test.
I don't think I have all the validations
23

24
00:02:14.610 --> 00:02:22.590
there. So we can see the new recipe is
failing right now. And we'll go ahead and
24

25
00:02:22.590 --> 00:02:27.120
fix that because what's happening is
it's failing out of constraint but the
25

26
00:02:27.120 --> 00:02:32.310
test that I added to test the validation,
that is working. The older test is
26

27
00:02:32.310 --> 00:02:36.780
failing because one of our validations
is getting triggered. And let's go take a
27

28
00:02:36.780 --> 00:02:40.680
look at the Controller first. I'll show
you the implementation of what's going
28

29
00:02:40.680 --> 00:02:48.750
on and we'll go fix the test. We can see
on line 53, I've added in the @Valid
29

30
00:02:48.750 --> 00:02:54.180
annotation and also on the ModelAttribute. This is important. I'm giving
30

31
00:02:54.180 --> 00:02:58.799
it a name now. Before I wasn't but this is
ModelAttribute, that it's going to bind
31

32
00:02:58.799 --> 00:03:04.200
that RecipeCommand to the Model so it
gets returned on this and you can see
32

33
00:03:04.200 --> 00:03:09.629
there I also have a BindingResult. So that
it's going to be the result of the
33

34
00:03:09.629 --> 00:03:15.750
validation and we do have to check to
make sure that it is valid. So on line
34

35
00:03:15.750 --> 00:03:19.910
55 there, I'm going to the BindingResult and asking it if it has errors.
35

36
00:03:19.910 --> 00:03:26.669
If so, we are going to take an action
there and I am going through and I'm
36

37
00:03:26.669 --> 00:03:32.190
going to log out the object error. So we
do have pretty rich capabilities here
37

38
00:03:32.190 --> 00:03:39.090
and if I scroll down here, I should see right here is my debug statement. So
38

39
00:03:39.090 --> 00:03:44.519
the directions cannot be null. So that's
why my other test is failing. So let's go
39

40
00:03:44.519 --> 00:03:47.540
fix that right now.
40

41
00:03:54.550 --> 00:04:07.610
So let's see if that fixes that. So now
all my tests are passing. I'll just run all
41

42
00:04:07.610 --> 00:04:14.540
the Controller tests make sure. Okay good
now what I want to do is I want to show
42

43
00:04:14.540 --> 00:04:20.239
you this and we'll debug that. So this is
a nice feature in IntelliJ. So I can just
43

44
00:04:20.239 --> 00:04:24.530
click on it and say debug and I've set a
breakpoint because I want to inspect
44

45
00:04:24.530 --> 00:04:28.880
that object and show you that in a
little more detail. So I hit the
45

46
00:04:28.880 --> 00:04:34.430
breakpoint on the logging. So now we have
the object error and actually I'd like to
46

47
00:04:34.430 --> 00:04:39.770
skip down here. I want see a different
view of this. So we're inside the
47

48
00:04:39.770 --> 00:04:48.800
iterator. So now we're here, so let's take
a look at the bindingResult and here's
48

49
00:04:48.800 --> 00:04:52.430
my errors array and that there's
actually two errors there. So this is
49

50
00:04:52.430 --> 00:04:57.320
quite versatile so we can see that we
have a field error on the description
50

51
00:04:57.320 --> 00:05:03.470
and also the direction. So this is a
pretty robust handling here. You can
51

52
00:05:03.470 --> 00:05:07.760
actually set up error codes so these are
different things and you'll see how this
52

53
00:05:07.760 --> 00:05:11.570
comes into play later
because now we can set actual error
53

54
00:05:11.570 --> 00:05:15.710
messages and Spring property. So when
we to get to the actual display on
54

55
00:05:15.710 --> 00:05:20.479
the Thymeleaf template, we will actually
set up some properties there. So I'll do
55

56
00:05:20.479 --> 00:05:25.280
that on a future video. So we can
actually define custom error messages. So
56

57
00:05:25.280 --> 00:05:28.729
that this is a lot of robust stuff
happening here but I want you to get
57

58
00:05:28.729 --> 00:05:32.360
some experience in seeing this. That's why I brought it up in the debugger.
58

59
00:05:32.360 --> 00:05:37.130
So as our validations fail, we
actually get a whole array and it's
59

60
00:05:37.130 --> 00:05:41.780
pretty rich error handling
that we have here for validation errors.
60

61
00:05:41.780 --> 00:05:46.669
One other thing I want to point out,
let's finish this real quick and we can
61

62
00:05:46.669 --> 00:05:54.740
close you. Now I did move the recipe URL
to a String. So just avoiding some code
62

63
00:05:54.740 --> 00:05:59.120
reuse there. It's a good habit to get
into that. I normally do that when I'm doing a
63

64
00:05:59.120 --> 00:06:03.409
larger project. So I'd move these into
static final String. So that they cannot
64

65
00:06:03.409 --> 00:06:07.580
mutate and it gives you good code reuse. So that's always a good
65

66
00:06:07.580 --> 00:06:13.099
to do so I needed this URL in two places
so I refactored it to that to that URL.
66

67
00:06:13.099 --> 00:06:19.310
So what's going to happen now is with
these modifications, if the RecipeCommand is
67

68
00:06:19.310 --> 00:06:24.439
good it's going to go into the save
path down there on line 64. It will save
68

69
00:06:24.439 --> 00:06:29.539
and then we'll get our redirection back
to the show and just like before.
69

70
00:06:29.539 --> 00:06:36.439
But if it fails what we're going to do
is redirect and send that object back to
70

71
00:06:36.439 --> 00:06:40.940
the form. So now we will still have the RecipeCommand so
71

72
00:06:40.940 --> 00:06:45.409
it's already going to have the data binding. So we'll redisplay the properties that
72

73
00:06:45.409 --> 00:06:49.250
were sent to it into and to the form and
that's already going to happen inside of
73

74
00:06:49.250 --> 00:06:54.259
Thymeleaf but we'll also have the BindingResult to work with and we'll be able to
74

75
00:06:54.259 --> 00:06:58.099
display errors from that BindingResult. So we'll have the field errors to work
75

76
00:06:58.099 --> 00:07:01.849
with and we'll be able to display that
right on the Thymeleaf template. So we
76

77
00:07:01.849 --> 00:07:06.620
actually get a little more enhanced data
to work with. And in the next video I'm
77

78
00:07:06.620 --> 00:07:10.789
going to show you how we can tap into
the field errors and provide our and
78

79
00:07:10.789 --> 00:07:16.000
end-users feedback about what is wrong
with their form submission.
