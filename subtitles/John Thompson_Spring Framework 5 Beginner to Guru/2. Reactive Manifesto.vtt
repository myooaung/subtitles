WEBVTT
0
1
00:00:00.093 --> 00:00:02.676
(mellow music)
1

2
00:00:05.666 --> 00:00:07.209
All right, in this video we wanna talk
2

3
00:00:07.209 --> 00:00:10.139
about The Reactive Manifesto.
3

4
00:00:10.139 --> 00:00:12.908
So this was originally published in 2013,
4

5
00:00:12.908 --> 00:00:16.908
and you can go over to www.reactivemanifesto.org
5

6
00:00:17.796 --> 00:00:20.564
to read it in its complete form.
6

7
00:00:20.564 --> 00:00:23.885
Some interesting authors there, you have Jonas Boner,
7

8
00:00:23.885 --> 00:00:25.184
he's the Akka founder.
8

9
00:00:25.184 --> 00:00:27.912
Akka is a pretty cool library focused on a lot
9

10
00:00:27.912 --> 00:00:30.960
of big scale distributed type systems,
10

11
00:00:30.960 --> 00:00:34.572
Dave Farley, Roland Kuhn, and Martin Thompson.
11

12
00:00:34.572 --> 00:00:36.649
I wanna point out that the term reactive
12

13
00:00:36.649 --> 00:00:39.106
is really getting overloaded in the IT community.
13

14
00:00:39.106 --> 00:00:41.302
There's a lot of disinformation out there,
14

15
00:00:41.302 --> 00:00:43.370
I guess you could say, a lot of confusion about
15

16
00:00:43.370 --> 00:00:44.949
what is and what isn't reactive.
16

17
00:00:44.949 --> 00:00:48.636
It's kind of becoming a real buzzword right now.
17

18
00:00:48.636 --> 00:00:52.122
So there's several reactive paradigms out there
18

19
00:00:52.122 --> 00:00:54.074
that we need to clarify.
19

20
00:00:54.074 --> 00:00:58.385
So in this presentation, I'm referring to Reactive Systems
20

21
00:00:58.385 --> 00:01:01.253
and this is a architecture and design pattern.
21

22
00:01:01.253 --> 00:01:03.977
And you'll see like Cloud Native
22

23
00:01:03.977 --> 00:01:07.354
and cloud-based applications, so that type of system,
23

24
00:01:07.354 --> 00:01:09.809
like the large scale self-healing systems
24

25
00:01:09.809 --> 00:01:12.913
like Google's Gmail is a great example
25

26
00:01:12.913 --> 00:01:16.619
or amazon.com, obviously a reactive system.
26

27
00:01:16.619 --> 00:01:20.278
They do not go down on Black Friday sales events.
27

28
00:01:20.278 --> 00:01:24.309
Then reactive programming is much more granular.
28

29
00:01:24.309 --> 00:01:26.144
It's focusing on event based.
29

30
00:01:26.144 --> 00:01:30.505
It's asynchronous non-blocking programming techniques
30

31
00:01:30.505 --> 00:01:34.406
focused on handling an event, and that event would probably
31

32
00:01:34.406 --> 00:01:36.971
be within a reactive system.
32

33
00:01:36.971 --> 00:01:40.675
So a reactive system is a much more broader concept.
33

34
00:01:40.675 --> 00:01:43.528
We're looking at how you're laying out your servers
34

35
00:01:43.528 --> 00:01:45.810
and your microservices, whether or not
35

36
00:01:45.810 --> 00:01:49.277
you're using messaging or a big monolithic application,
36

37
00:01:49.277 --> 00:01:51.597
so it's more at an architectural level
37

38
00:01:51.597 --> 00:01:54.564
while reactive programming is the technique
38

39
00:01:54.564 --> 00:01:56.719
that you're using to code in.
39

40
00:01:56.719 --> 00:02:00.420
Now Functional Reactive Programming is also a buzzword.
40

41
00:02:00.420 --> 00:02:02.494
You're hearing a lot of functional buzz right now
41

42
00:02:02.494 --> 00:02:06.661
especially in the Java community on the heels of Java 8.
42

43
00:02:08.497 --> 00:02:11.917
One of the founders of the reactive manifesto
43

44
00:02:11.917 --> 00:02:13.878
believes that functional reactive programming
44

45
00:02:13.878 --> 00:02:18.231
is definitely misused right now by a lot of libraries
45

46
00:02:18.231 --> 00:02:21.805
that are claiming to be functional reactive programming
46

47
00:02:21.805 --> 00:02:25.584
libraries, when in fact they're more reactive programming.
47

48
00:02:25.584 --> 00:02:27.831
I'm not gonna get into the nuts and bolts of that.
48

49
00:02:27.831 --> 00:02:31.130
I just want to make you aware that there is disparity
49

50
00:02:31.130 --> 00:02:33.913
in the community about what is functional
50

51
00:02:33.913 --> 00:02:36.680
reactive programming and reactive programming.
51

52
00:02:36.680 --> 00:02:40.154
So some people believe if go with a functional model
52

53
00:02:40.154 --> 00:02:43.533
and doing reactive, you're now doing FRP,
53

54
00:02:43.533 --> 00:02:46.295
but not necessarily that's the case.
54

55
00:02:46.295 --> 00:02:49.273
So let's take a look at the reactive manifesto.
55

56
00:02:49.273 --> 00:02:52.933
This is gonna be looking at four areas,
56

57
00:02:52.933 --> 00:02:56.639
and this is an image adopted right off their website,
57

58
00:02:56.639 --> 00:02:59.780
Responsive, Resilient, Message Driven, and Elastic.
58

59
00:02:59.780 --> 00:03:01.621
So let's take a little closer look
59

60
00:03:01.621 --> 00:03:04.288
to what each one of those means.
60

61
00:03:05.573 --> 00:03:07.980
Responsive means that the system
61

62
00:03:07.980 --> 00:03:10.638
is gonna respond in a timely manner.
62

63
00:03:10.638 --> 00:03:12.549
And responsiveness is the cornerstone
63

64
00:03:12.549 --> 00:03:14.632
of usability and utility.
64

65
00:03:16.299 --> 00:03:17.572
I'm not sure if everybody understands
65

66
00:03:17.572 --> 00:03:19.364
what cornerstone means.
66

67
00:03:19.364 --> 00:03:23.344
A lot of times when you're building an old architectural
67

68
00:03:23.344 --> 00:03:27.651
style is you'd set down a cornerstone which became the stone
68

69
00:03:27.651 --> 00:03:29.970
that you built upon the entire building.
69

70
00:03:29.970 --> 00:03:33.994
That's what that connotation means in a broader sense,
70

71
00:03:33.994 --> 00:03:36.517
so that might get lost in other communities
71

72
00:03:36.517 --> 00:03:38.636
outside the US and Europe.
72

73
00:03:38.636 --> 00:03:41.243
Responsiveness also means that problems
73

74
00:03:41.243 --> 00:03:45.474
may be detected quickly and dealt with effectively.
74

75
00:03:45.474 --> 00:03:47.562
This means that the system is going
75

76
00:03:47.562 --> 00:03:50.145
to effectively be self-healing.
76

77
00:03:51.887 --> 00:03:53.947
All responsive systems also provide rapid
77

78
00:03:53.947 --> 00:03:55.938
and consistent response times.
78

79
00:03:55.938 --> 00:03:59.969
And this consistent behavior simplifies error handling
79

80
00:03:59.969 --> 00:04:02.295
and builds end user confidence,
80

81
00:04:02.295 --> 00:04:05.141
and encourages further interaction.
81

82
00:04:05.141 --> 00:04:09.509
Think about if you're using Facebook and you're on Facebook.
82

83
00:04:09.509 --> 00:04:12.885
Usually Facebook works pretty consistent for me
83

84
00:04:12.885 --> 00:04:15.730
but there's times when it's slow and I get frustrated
84

85
00:04:15.730 --> 00:04:17.767
with that and it's usually when I'm on my mobile
85

86
00:04:17.767 --> 00:04:22.703
and have a bad data connection, so having a consistent
86

87
00:04:22.703 --> 00:04:26.120
response is important for your end users.
87

88
00:04:27.018 --> 00:04:29.340
Resilient, so a system stays responsive
88

89
00:04:29.340 --> 00:04:32.074
in the face of failure.
89

90
00:04:32.074 --> 00:04:34.678
Resilience is achieved by replication, containment,
90

91
00:04:34.678 --> 00:04:36.955
isolation, and delegation.
91

92
00:04:36.955 --> 00:04:39.151
And then failures are contained within a component.
92

93
00:04:39.151 --> 00:04:42.687
You don't want a single part of the system failing
93

94
00:04:42.687 --> 00:04:44.863
and taking down the whole system.
94

95
00:04:44.863 --> 00:04:49.030
So recovery is delegated to another, and that means
95

96
00:04:50.422 --> 00:04:52.738
there's a redundancy in the system,
96

97
00:04:52.738 --> 00:04:56.236
so there's no single point of failure in the system.
97

98
00:04:56.236 --> 00:05:00.407
High-availability is ensured by replication where necessary.
98

99
00:05:00.407 --> 00:05:04.528
So this would be like if you're running a RabbitMQ server
99

100
00:05:04.528 --> 00:05:07.415
you'd be running in a cluster, so one of those
100

101
00:05:07.415 --> 00:05:09.322
in the cluster could go down.
101

102
00:05:09.322 --> 00:05:11.953
Or if you have microservices you're gonna have be
102

103
00:05:11.953 --> 00:05:16.828
load balance against multiple nodes of that microservice.
103

104
00:05:16.828 --> 00:05:19.267
And then Elastic, so the system
104

105
00:05:19.267 --> 00:05:22.640
stays responsive under varying workload.
105

106
00:05:22.640 --> 00:05:25.776
Reactive systems can react to changes to the input rate
106

107
00:05:25.776 --> 00:05:27.698
by increasing or decreasing resources
107

108
00:05:27.698 --> 00:05:30.709
allocated to those service inputs.
108

109
00:05:30.709 --> 00:05:34.876
And they achieve elasticity on a cost effective platform,
109

110
00:05:36.508 --> 00:05:40.293
so using commodity hardware and software.
110

111
00:05:40.293 --> 00:05:43.099
amazon.com is a great example of this
111

112
00:05:43.099 --> 00:05:47.002
because they do run a lot of nodes behind amazon.com
112

113
00:05:47.002 --> 00:05:49.198
but both Amazon and Google are well known
113

114
00:05:49.198 --> 00:05:51.923
for using commodity hardware so just
114

115
00:05:51.923 --> 00:05:54.080
the cheapest servers that they can find.
115

116
00:05:54.080 --> 00:05:56.289
And they structure their system so that
116

117
00:05:56.289 --> 00:05:58.161
that cheap little server can go down
117

118
00:05:58.161 --> 00:05:59.344
and it doesn't matter
118

119
00:05:59.344 --> 00:06:01.737
because they have other things to back it up.
119

120
00:06:01.737 --> 00:06:05.904
And then also like Google, is the founder of Kubernetes
120

121
00:06:06.748 --> 00:06:09.449
and within Kubernetes you can look at a workload
121

122
00:06:09.449 --> 00:06:12.469
and say okay well, I want three nodes of this running
122

123
00:06:12.469 --> 00:06:15.644
but if it starts getting busy, if the CPU goes above X,
123

124
00:06:15.644 --> 00:06:17.837
bring on additional nodes to handle the load.
124

125
00:06:17.837 --> 00:06:21.539
So it will automatically scale in response to the load.
125

126
00:06:21.539 --> 00:06:24.300
And when that load goes away then
126

127
00:06:24.300 --> 00:06:26.620
that will scale down as well,
127

128
00:06:26.620 --> 00:06:29.667
so having this dynamic scaling is important.
128

129
00:06:29.667 --> 00:06:34.627
And while it's doing this, the system will stay responsive.
129

130
00:06:34.627 --> 00:06:38.899
For the end user, the user experience is the same
130

131
00:06:38.899 --> 00:06:43.093
depending on if there is 5 users, 5,000, 50,000,
131

132
00:06:43.093 --> 00:06:47.284
the experience for each user is gonna be the same in this.
132

133
00:06:47.284 --> 00:06:50.402
Now is probably one of the more important parts for us
133

134
00:06:50.402 --> 00:06:52.676
as far as being Java developers,
134

135
00:06:52.676 --> 00:06:54.832
reactive systems are message driven.
135

136
00:06:54.832 --> 00:06:58.939
They rely on asynchronous message passing to establish
136

137
00:06:58.939 --> 00:07:01.418
a boundary between components.
137

138
00:07:01.418 --> 00:07:04.392
So this is gonna ensure loose coupling, isolation,
138

139
00:07:04.392 --> 00:07:06.838
and location transparency.
139

140
00:07:06.838 --> 00:07:09.324
Message passing also enables load management,
140

141
00:07:09.324 --> 00:07:11.741
elasticity, and flow control.
141

142
00:07:13.030 --> 00:07:15.715
This makes it important because now you have
142

143
00:07:15.715 --> 00:07:19.377
a distributed system and you're passing messages between it.
143

144
00:07:19.377 --> 00:07:22.309
So if you're sending a message and just for clarity
144

145
00:07:22.309 --> 00:07:26.362
a message can be going over like RabbitMQ, JMS Broker,
145

146
00:07:26.362 --> 00:07:29.977
such as ActiveMQ, it can even be a web service call
146

147
00:07:29.977 --> 00:07:33.191
because you are posting the contents of a message
147

148
00:07:33.191 --> 00:07:36.419
to a rest end point. So the message passing
148

149
00:07:36.419 --> 00:07:39.389
can take a number of different forms but the concept
149

150
00:07:39.389 --> 00:07:42.029
remains the same is that you're passing some chunk
150

151
00:07:42.029 --> 00:07:46.196
of data whether it's JSON, XML, serialized object,
151

152
00:07:47.235 --> 00:07:49.647
you're passing that message across some boundary
152

153
00:07:49.647 --> 00:07:52.251
to another system that's gonna act on it.
153

154
00:07:52.251 --> 00:07:56.027
And location transparent messaging means that you're not
154

155
00:07:56.027 --> 00:07:58.714
dependent on Server A talking to Server B.
155

156
00:07:58.714 --> 00:08:02.367
You're going from a message group cluster
156

157
00:08:02.367 --> 00:08:06.534
of microservices A to a cluster of microservices B,
157

158
00:08:07.886 --> 00:08:12.368
that you're not concerned about the specific server.
158

159
00:08:12.368 --> 00:08:15.658
So this is an important architecture shift.
159

160
00:08:15.658 --> 00:08:18.376
And then the non-blocking communication allows recipients
160

161
00:08:18.376 --> 00:08:21.015
to consume only resources while active
161

162
00:08:21.015 --> 00:08:22.442
and this is also important.
162

163
00:08:22.442 --> 00:08:26.956
So if you have say a message queue you can have a consumer
163

164
00:08:26.956 --> 00:08:29.316
come up, you could have one consumer, five consumers,
164

165
00:08:29.316 --> 00:08:33.466
so you can dynamically take that and the consumers
165

166
00:08:33.466 --> 00:08:35.438
that are not active aren't gonna be adding it
166

167
00:08:35.438 --> 00:08:38.286
to the overall system load.
167

168
00:08:38.286 --> 00:08:41.641
Now I stole this diagram right from the JHipster guys
168

169
00:08:41.641 --> 00:08:43.505
because I think it's really good.
169

170
00:08:43.505 --> 00:08:46.741
When we hear the term Cloud Native, the Spring guys
170

171
00:08:46.741 --> 00:08:48.848
definitely like to talk about Cloud Native,
171

172
00:08:48.848 --> 00:08:52.578
and this is a good overview of what that involves.
172

173
00:08:52.578 --> 00:08:57.045
Netflix has been a huge contributor to the components
173

174
00:08:57.045 --> 00:09:00.029
within Spring Cloud so there's a lot of cool stuff there.
174

175
00:09:00.029 --> 00:09:03.023
And what we have as a distributed architecture
175

176
00:09:03.023 --> 00:09:06.090
is probably gonna be deployed in Docker containers.
176

177
00:09:06.090 --> 00:09:07.579
There's a number of different ways
177

178
00:09:07.579 --> 00:09:09.276
of managing those containers.
178

179
00:09:09.276 --> 00:09:12.837
Kubernetes is one that I mentioned, Docker Swarm is another.
179

180
00:09:12.837 --> 00:09:14.988
There's Patria, I think it's Mesos,
180

181
00:09:14.988 --> 00:09:18.511
so there's a number of different ways of managing this.
181

182
00:09:18.511 --> 00:09:22.678
Then there's different ways of using like Zuul and Eureka,
182

183
00:09:24.229 --> 00:09:25.933
and you can just pull up these nodes
183

184
00:09:25.933 --> 00:09:28.292
and you could manually do it with these.
184

185
00:09:28.292 --> 00:09:32.996
So now you have a truly distributed application here.
185

186
00:09:32.996 --> 00:09:36.095
If you're not familiar with the Spring microservices
186

187
00:09:36.095 --> 00:09:39.325
what's gonna happen here is if I deploy a microservice,
187

188
00:09:39.325 --> 00:09:41.692
it's gonna wake up, go out to what you see
188

189
00:09:41.692 --> 00:09:45.127
on the diagram is the JHipster registry,
189

190
00:09:45.127 --> 00:09:47.903
get its configuration from Spring Cloud config,
190

191
00:09:47.903 --> 00:09:50.969
and then register itself with the Eureka server.
191

192
00:09:50.969 --> 00:09:53.362
So it says, okay I'm this microservice.
192

193
00:09:53.362 --> 00:09:56.167
Here I am, I'm on this IP address and node.
193

194
00:09:56.167 --> 00:09:59.436
Now the Zuul proxy is also in communication
194

195
00:09:59.436 --> 00:10:01.947
with the Eureka server, a request comes in
195

196
00:10:01.947 --> 00:10:04.811
through the gateway and it knows to route
196

197
00:10:04.811 --> 00:10:06.963
to that node of that microservice.
197

198
00:10:06.963 --> 00:10:08.577
Now that microservice can go down,
198

199
00:10:08.577 --> 00:10:11.346
the box that it's running on can get terminated,
199

200
00:10:11.346 --> 00:10:15.451
and you could bring up another microservice on another box,
200

201
00:10:15.451 --> 00:10:17.736
and the process would go through the same.
201

202
00:10:17.736 --> 00:10:21.247
Where now it's registered again with the Eureka server,
202

203
00:10:21.247 --> 00:10:24.101
it gets its configuration, so obviously you're gonna
203

204
00:10:24.101 --> 00:10:26.462
be running multiple nodes of those microservices
204

205
00:10:26.462 --> 00:10:29.982
so now any time those microservices can fail,
205

206
00:10:29.982 --> 00:10:33.457
a node could fail, and the system is now self-healing
206

207
00:10:33.457 --> 00:10:35.824
because now you have that redundancy there.
207

208
00:10:35.824 --> 00:10:38.101
And it's also very scalable this way.
208

209
00:10:38.101 --> 00:10:41.545
So as different services become hot spots,
209

210
00:10:41.545 --> 00:10:43.452
you can spool up additional nodes.
210

211
00:10:43.452 --> 00:10:46.019
And what's important in a distributed architecture
211

212
00:10:46.019 --> 00:10:48.469
like this is that is elastic.
212

213
00:10:48.469 --> 00:10:51.469
And you see the Logstash and Kibana,
213

214
00:10:52.315 --> 00:10:54.342
this is quite a bit different from having a big
214

215
00:10:54.342 --> 00:10:56.825
monolithic application where you have one spot
215

216
00:10:56.825 --> 00:10:59.725
to go look at the logs on, now you could have dozens
216

217
00:10:59.725 --> 00:11:03.267
if not hundreds of nodes out there, each collecting logs.
217

218
00:11:03.267 --> 00:11:06.179
That's why you use something like Kibana and Logstash.
218

219
00:11:06.179 --> 00:11:08.581
So this is a distributed architecture.
219

220
00:11:08.581 --> 00:11:12.630
You can see that what I have here is much more broad
220

221
00:11:12.630 --> 00:11:15.570
in terms of the entire system architecture.
221

222
00:11:15.570 --> 00:11:19.007
And the purpose is, of course, is to look more granular
222

223
00:11:19.007 --> 00:11:20.957
at Spring 5 and know what's going on inside
223

224
00:11:20.957 --> 00:11:22.821
of Spring framework 5.
224

225
00:11:22.821 --> 00:11:26.259
Now reactive programming is very important
225

226
00:11:26.259 --> 00:11:29.401
and is a useful implementation technique.
226

227
00:11:29.401 --> 00:11:33.708
So now we're going from the overall system architecture
227

228
00:11:33.708 --> 00:11:36.860
with reactive systems down to reactive programming
228

229
00:11:36.860 --> 00:11:40.217
which is like the individual nodes in a microservice.
229

230
00:11:40.217 --> 00:11:43.032
One is broad and one is very granular.
230

231
00:11:43.032 --> 00:11:46.107
Reactive programming focuses on non-blocking,
231

232
00:11:46.107 --> 00:11:49.054
asynchronous execution, and this is a very important
232

233
00:11:49.054 --> 00:11:52.202
characteristic of overall reactive systems.
233

234
00:11:52.202 --> 00:11:54.849
But at the end of the day, reactive programming
234

235
00:11:54.849 --> 00:11:58.284
is just one tool in building reactive systems.
235

236
00:11:58.284 --> 00:12:01.798
So I think as a goal we all wanna have very fast,
236

237
00:12:01.798 --> 00:12:04.493
very reliable systems, so it's important to understand
237

238
00:12:04.493 --> 00:12:05.530
the distinction here.
238

239
00:12:05.530 --> 00:12:08.832
So one is an overall architecture but we're gonna be
239

240
00:12:08.832 --> 00:12:11.567
diving into reactive programming, which is
240

241
00:12:11.567 --> 00:12:15.734
an implementation technique of a very granular service.
