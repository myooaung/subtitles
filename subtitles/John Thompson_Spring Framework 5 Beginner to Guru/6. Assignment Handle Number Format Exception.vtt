WEBVTT
0
1
00:00:04.160 --> 00:00:09.179
Okay right now our application is rather
fragile. We don't have a lot of error
1

2
00:00:09.179 --> 00:00:13.469
checking in there. So in this video I
have an assignment for you and we want
2

3
00:00:13.469 --> 00:00:17.070
to strengthen our application a little
bit. Problem that we have right now and I
3

4
00:00:17.070 --> 00:00:19.710
kind of left this in on purpose because
I wanted to leave it in there until we
4

5
00:00:19.710 --> 00:00:24.720
got to exception handling to show you
this example. This ID value here, if we
5

6
00:00:24.720 --> 00:00:28.439
pass in a String what's going to happen
here is we're going to get a Number
6

7
00:00:28.439 --> 00:00:31.560
FormatException because we're just
casting that in. We never checked to make
7

8
00:00:31.560 --> 00:00:36.719
sure that we have an actual number. So we
can pass any String in for that and
8

9
00:00:36.719 --> 00:00:40.440
we can get an exception. So let's go ahead
and show you what's going to happen here.
9

10
00:00:40.440 --> 00:00:43.430
I'm going to start up the application.
10

11
00:00:43.489 --> 00:00:49.050
And we've got Spring Boot starting, we're
just about, there we are .So come back
11

12
00:00:49.050 --> 00:00:54.180
over here. If i refresh that, we are
handling that exception but if I come in
12

13
00:00:54.180 --> 00:01:01.020
here and change that value to asdf, we
can see that we're throwing a server
13

14
00:01:01.020 --> 00:01:05.220
error 500 error because it's an
unhandled exception. So it's going to
14

15
00:01:05.220 --> 00:01:09.180
become a server error and we're going to
toss a 500 and what we want to do is we
15

16
00:01:09.180 --> 00:01:12.540
want to be a little bit more friendly. Let's take a quick look over IntelliJ
16

17
00:01:12.540 --> 00:01:18.509
and show you a quick trick here in
IntelliJ. So if you come in you can see
17

18
00:01:18.509 --> 00:01:22.110
how this is linked there. So if I just
click on that it's going to jump right
18

19
00:01:22.110 --> 00:01:25.950
to the line threw the
exception. So this is the line that's
19

20
00:01:25.950 --> 00:01:30.320
throwing the exception. It's the Long and
we can see that the message on that
20

21
00:01:30.320 --> 00:01:35.280
exception shows the input String. So we
want to get that message to the client
21

22
00:01:35.280 --> 00:01:40.500
to tell them what was wrong. So what we
want to do is create another Exception
22

23
00:01:40.500 --> 00:01:45.540
Handler, but this time for NumberFormaException. So that would be the exception
23

24
00:01:45.540 --> 00:01:53.720
class and then the HTTPStatus, what we
want to do is change that to bad request
24

25
00:01:53.720 --> 00:02:01.020
and if you do a command click, mail drill
into that and we can see that is
25

26
00:02:01.020 --> 00:02:06.990
going to return back a 400 error. So that
is HTTP 400 which is a bad request and
26

27
00:02:06.990 --> 00:02:13.260
what we want to do is just like we did
here, get that exception and print out
27

28
00:02:13.260 --> 00:02:16.170
the message of this exception which is going to be bad
28

29
00:02:16.170 --> 00:02:20.790
input String of asdf. So saying that we
must have a number. So what I want you to
29

30
00:02:20.790 --> 00:02:25.920
do is go ahead and create an error page. We
will do a 400 error and print out that
30

31
00:02:25.920 --> 00:02:31.380
message for that. So just to recap what
you're going to be doing is create a
31

32
00:02:31.380 --> 00:02:37.290
exception handling just like this but
for the NumberFormatException, we
32

33
00:02:37.290 --> 00:02:42.630
want to do a bad request and then also
pass the exception just like
33

34
00:02:42.630 --> 00:02:47.310
we're doing here. And I'll put that
String on the web page so the client has
34

35
00:02:47.310 --> 00:02:50.790
some more information. In the next video
I'll go through this step by step and
35

36
00:02:50.790 --> 00:02:54.470
show you exactly how to implement it.
