WEBVTT
0
1
00:00:04.520 --> 00:00:09.090
Okay, between videos there I looked at
that error a little bit closer. We're
1

2
00:00:09.090 --> 00:00:12.360
going to take an opportunity here because
it wasn't exactly what I thought it was
2

3
00:00:12.360 --> 00:00:16.230
but I'll explain exactly what it was. But
in this video, I'm going to take the
3

4
00:00:16.230 --> 00:00:21.119
opportunity to show you how to use a
feature branch inside a GitHub. I
4

5
00:00:21.119 --> 00:00:25.410
created a new task here because this is
a bug that I introduced. What I'm
5

6
00:00:25.410 --> 00:00:29.939
trying to emulate here is you as a
developer, got a bug report. There's
6

7
00:00:29.939 --> 00:00:34.500
something that's happening inside of our
production code. I'm using production
7

8
00:00:34.500 --> 00:00:39.120
side of error code for our Spring
Pet Clinic project. We are getting
8

9
00:00:39.120 --> 00:00:44.430
this 500 error. Let's say that
somebody opened up a ticket. We're
9

10
00:00:44.430 --> 00:00:49.770
getting this error and display of owner
and I copied in the relevant part. We
10

11
00:00:49.770 --> 00:00:54.390
can see in the template owner ownerDetails on line 52. We are throwing an
11

12
00:00:54.390 --> 00:00:59.840
exception. If I look at the template,
let's come back over here to this on line
12

13
00:00:59.840 --> 00:01:05.100
52. It is looking for pet type and we can
13

14
00:01:05.100 --> 00:01:08.909
see that I actually have a little red
squiggly there. Remember I copied
14

15
00:01:08.909 --> 00:01:13.170
this over owner details directly from
the Spring project. Let's take a closer
15

16
00:01:13.170 --> 00:01:22.259
look at that right now. So here, they have
pet type and the name is type and not
16

17
00:01:22.259 --> 00:01:29.869
pet type but type. Come over here.
Let's take a look at our implementation.
17

18
00:01:29.950 --> 00:01:37.780
Come here your model and get to Pet and
our property a name is petType.
18

19
00:01:37.780 --> 00:01:42.680
Personally I like that better because I
don't think type is very descriptive, pet
19

20
00:01:42.680 --> 00:01:47.210
Type is more descriptive so that is not
necessarily wrong or right but that is
20

21
00:01:47.210 --> 00:01:51.200
my personal preference because I think
that as a better variable name. The
21

22
00:01:51.200 --> 00:01:57.350
reason things are breaking is that value
is miss named because the template is
22

23
00:01:57.350 --> 00:02:01.460
looking for this property to be named
type and not petType. So it's not
23

24
00:02:01.460 --> 00:02:04.970
finding it and that's why it's going
kaboom. What we are going to do is we
24

25
00:02:04.970 --> 00:02:10.009
are going to create a branch here. So I'm
going to come in here. Right-click.
25

26
00:02:10.009 --> 00:02:14.210
Go to Git, repository
26

27
00:02:14.210 --> 00:02:16.720
branches
27

28
00:02:17.349 --> 00:02:21.860
and let's take a look quick look at that 
GitHub tasks.
28

29
00:02:21.860 --> 00:02:30.260
I'm just going to call this errorDisplayOwner. I'm going to check out that branch.
29

30
00:02:30.260 --> 00:02:35.780
To fix this problem, I have two
options to be honest. One
30

31
00:02:35.780 --> 00:02:40.190
I can refactor and rename petType and
have that ramifications go through my
31

32
00:02:40.190 --> 00:02:44.480
entire project, which I don't want to do.
The simplest one is to come into owner
32

33
00:02:44.480 --> 00:02:48.460
Details and this should be
33

34
00:02:48.760 --> 00:02:52.610
like so.
So that will
34

35
00:02:52.610 --> 00:02:55.000
fix it.
35

36
00:02:57.050 --> 00:03:01.550
We also have visits. That's not happy so
let's take a look at just going to
36

37
00:03:01.550 --> 00:03:09.040
expand Pet here
and visits. Let's take a closer look at
37

38
00:03:09.040 --> 00:03:16.680
that. It should be.. Oh, see? I got a
typo in the word so let's go ahead and
38

39
00:03:16.680 --> 00:03:21.450
come in here. Refactor rename
39

40
00:03:23.710 --> 00:03:31.450
to visits. So that was my own fat
fingering of that. Let's come back
40

41
00:03:31.450 --> 00:03:36.770
over here to ownerDetails.
That squiggly should be going away. Visit
41

42
00:03:36.770 --> 00:03:38.980
date.
42

43
00:03:43.370 --> 00:03:50.709
That should be okay so I'm going to go
ahead and restart the Spring project.
43

44
00:03:54.710 --> 00:03:59.069
IntelliJ might be making mistake there
so we shall see if that claim that
44

45
00:03:59.069 --> 00:04:01.520
clears up.
45

46
00:04:04.580 --> 00:04:09.140
We are back up and running. Let's come
back over to Chrome
46

47
00:04:09.140 --> 00:04:15.790
and do a refresh on this.
And now we can see that good old Michael
47

48
00:04:15.790 --> 00:04:23.620
Weston is being displayed there. He's got
a name, a pet named, Roscoe. In here, this
48

49
00:04:23.620 --> 00:04:27.370
is another problem here. We are getting a
pet type so let's take a closer look at
49

50
00:04:27.370 --> 00:04:29.400
that.
That should be
50

51
00:04:32.710 --> 00:04:38.410
petType so I should be doing it
toString.
51

52
00:04:38.599 --> 00:04:43.580
I'm going to take a quick look over
here. We saw a pet type. Take a look at
52

53
00:04:43.580 --> 00:04:45.999
this guy.
53

54
00:04:48.740 --> 00:04:56.380
Extends out. I looking at what the Spring
guys did here. NamedEntity.
54

55
00:04:56.940 --> 00:05:01.720
I'm expecting they have a toString method. Yeah,
they do have toString. So
55

56
00:05:01.720 --> 00:05:05.470
what's happening here is I don't have a
toString method implemented so I'm
56

57
00:05:05.470 --> 00:05:10.090
getting the object name so it's where
toString is not implemented. So come in
57

58
00:05:10.090 --> 00:05:15.390
here
toString.
58

59
00:05:16.220 --> 00:05:21.070
Actually I just want to return back
the name property like
59

60
00:05:22.320 --> 00:05:28.570
so. Let's go ahead and cycle this.
Actually I think I got
60

61
00:05:28.570 --> 00:05:34.430
built tools going so I'm doing a build
on that. By building it, that
61

62
00:05:34.430 --> 00:05:39.110
triggered Spring Boot DevTools
to reload the project. Let's come back
62

63
00:05:39.110 --> 00:05:42.790
over here and make sure that is working
now.
63

64
00:05:42.790 --> 00:05:48.100
And there we go. You can see adding
that to string now fixed that. I am
64

65
00:05:48.100 --> 00:05:54.190
not seeing any other errors at this
point. So now remember, I created this on
65

66
00:05:54.190 --> 00:06:03.090
a feature branch so I'm going to come in
here and say Git commit directory and
66

67
00:06:03.090 --> 00:06:07.770
that was number 65.
67

68
00:06:12.760 --> 00:06:17.100
I'm going to go ahead and do it commit
and push. What's going to happen is this
68

69
00:06:18.090 --> 00:06:25.560
pushes up to GitHub. What's going to
be interesting here is that does
69

70
00:06:25.560 --> 00:06:30.159
push up there. Let's come
back here to the code
70

71
00:06:30.159 --> 00:06:34.779
and now we can see that I have this
branch here. I want to do a compare
71

72
00:06:34.779 --> 00:06:40.260
and pull request.
Let's go ahead and add that. I'm going to
72

73
00:06:40.260 --> 00:06:46.920
create a pull request on this inside of
GitHub, and now we can see that our
73

74
00:06:46.920 --> 00:06:52.380
Circle CI is running. Typically
what's going to happen in workflow is
74

75
00:06:52.380 --> 00:06:58.340
I'm going to have one of my co-workers go
and review this, ask it for a review.
75

76
00:06:58.340 --> 00:07:04.530
Being that, I am an army of one on this
project. I can't do that. But now, we can
76

77
00:07:04.530 --> 00:07:09.240
see. You just saw that GitHub went to
green and what happened there is my CI
77

78
00:07:09.240 --> 00:07:13.710
build in Circle CI completed in the
background and now I know that all my
78

79
00:07:13.710 --> 00:07:18.630
checks pass. If I come in here and show
checks, we can see that Circle CI build
79

80
00:07:18.630 --> 00:07:25.920
is up and I have a green checkmark next
to it. Now I can come over here. This
80

81
00:07:25.920 --> 00:07:31.340
shows the changes I made inside of
GitHub. And now I can say review changes
81

82
00:07:31.340 --> 00:07:34.340
comment.
82

83
00:07:34.969 --> 00:07:39.139
Just say it looks great. I'm going to submit
a review even though I'm reviewing my
83

84
00:07:39.139 --> 00:07:45.459
own code. You would not do this typically.
Now what I can do is merge this in to
84

85
00:07:45.459 --> 00:07:51.620
master. I'm going to go ahead, confirm
the merge,
85

86
00:07:51.620 --> 00:07:57.680
and I am going to delete that branch
like so.
86

87
00:07:57.680 --> 00:08:05.100
And now we can see, this is gone 
in there and that task has been closed.
87

88
00:08:05.100 --> 00:08:10.380
It closed automatically because I put
in. I merged it to master and on that
88

89
00:08:10.380 --> 00:08:14.160
merged to master because I had closes
number 65 in there. That automatically
89

90
00:08:14.160 --> 00:08:18.180
closed that issue for me inside of
GitHub. Now the last thing I have to do
90

91
00:08:18.180 --> 00:08:22.050
is come back over here. I'm going to shut
down Spring Boot. I don't need him
91

92
00:08:22.050 --> 00:08:26.090
right now. Now I want to come back over
here
92

93
00:08:26.090 --> 00:08:36.470
inside of Git. I want to go to branches
and now I want to check out master again
93

94
00:08:36.470 --> 00:08:42.250
so I'm going to be returning to master.
The next thing I want to do is come
94

95
00:08:42.250 --> 00:08:49.000
in here, Repostitory, Branches and this errorDisplayOwner, I'm just going to delete
95

96
00:08:49.000 --> 00:08:51.930
that branch because I don't need it
anymore. Delete
96

97
00:08:51.930 --> 00:08:58.440
remote branch.
I just told it also to delete on
97

98
00:08:58.440 --> 00:09:00.899
origin which it's not going to do
anything because I already did that
98

99
00:09:00.899 --> 00:09:07.110
inside of GitHub. And now because I made
that change, because I pushed it up, now
99

100
00:09:07.110 --> 00:09:15.020
I'm on my local master. I need to also
come in here and do it Git pull
100

101
00:09:15.020 --> 00:09:20.930
to sync up my master from the origin
because these changes were made. This
101

102
00:09:20.930 --> 00:09:24.560
might be a little bit confusing to you
because I checked in on the branch, push
102

103
00:09:24.560 --> 00:09:28.880
that up to GitHub, so my changes went in
on the branch on GitHub and I did the
103

104
00:09:28.880 --> 00:09:34.790
merge to master on GitHub and then when
I switched over to my master, I'm running
104

105
00:09:34.790 --> 00:09:40.070
locally on my master branch, I had to
tell my GitHub to go and sync up the
105

106
00:09:40.070 --> 00:09:45.770
changes from master on GitHub. So kind of
a big circle. Kind of went around, but
106

107
00:09:45.770 --> 00:09:49.790
this is a fairly common workflow where
you do your changes on a feature branch
107

108
00:09:49.790 --> 00:09:54.410
like that, and then another person would
review them and you see have CI build and stuff
108

109
00:09:54.410 --> 00:09:59.150
would also run and whatnot. And then now
you're going to come back and get back on
109

110
00:09:59.150 --> 00:10:03.530
the mainline branch. So there's a
number of different ways to use GitHub. I
110

111
00:10:03.530 --> 00:10:07.550
just wanted to show you here in this
video how to leverage that. This is a
111

112
00:10:07.550 --> 00:10:14.960
really nice workflow because now if I come
in here, now on display owner, there's a
112

113
00:10:14.960 --> 00:10:20.690
lot of information here. We can see that
I had this original exception. I had a
113

114
00:10:20.690 --> 00:10:26.690
specific branch in there. We can also
see that a code review was done and then
114

115
00:10:26.690 --> 00:10:33.380
also a specific build on Circle CI ran
against that. So a lot of tracking here.
115

116
00:10:33.380 --> 00:10:37.400
When you get inside an enterprise
environment, this is all very important
116

117
00:10:37.400 --> 00:10:40.520
for compliance activities. Because if
you're developing software in a company,
117

118
00:10:40.520 --> 00:10:44.510
and if they're like a publicly traded
company or healthcare company or
118

119
00:10:44.510 --> 00:10:48.110
something they are going to have,
processes, procedures, and controls in
119

120
00:10:48.110 --> 00:10:52.970
place to monitor all these software and
that's being developed. So that this is
120

121
00:10:52.970 --> 00:10:59.350
all best practices and also how you
write quality software.
