WEBVTT
0
1
00:00:04.069 --> 00:00:09.330
In the last video, we created Spring Data
Repositories that will provide some
1

2
00:00:09.330 --> 00:00:13.769
implementation to work with Spring Data
for the various entities. Now in
2

3
00:00:13.769 --> 00:00:16.590
this video, we are going to start
creating services that are going to
3

4
00:00:16.590 --> 00:00:22.949
leverage those repositories, so I am
going to start on number 40 here. I'm
4

5
00:00:22.949 --> 00:00:26.789
just going to sign that to myself to say that
it is in process. I am working on it.
5

6
00:00:26.789 --> 00:00:31.920
This is going to be creating a service
layer using those repositories, so let's
6

7
00:00:31.920 --> 00:00:36.660
come over here to IntelliJ and talk
about what I mean. We have this map
7

8
00:00:36.660 --> 00:00:41.460
service. This is an implementation
that provides the service and using a
8

9
00:00:41.460 --> 00:00:45.989
HashMap. Now I want to provide an
implementation of it using Spring Data
9

10
00:00:45.989 --> 00:00:51.180
JPA so we're going to wire in things and
make an implementation of this that will
10

11
00:00:51.180 --> 00:00:58.890
use Spring Data JPA, how we need to have
it provided. In doing so, we are going
11

12
00:00:58.890 --> 00:01:02.789
to be leveraging that. We're doing this
out of service layer and our goal is to
12

13
00:01:02.789 --> 00:01:08.250
as much as possible to abstract out the
implementation of the underlying
13

14
00:01:08.250 --> 00:01:13.049
persistent store. So in this case, we are
comparing using a HashMap
14

15
00:01:13.049 --> 00:01:19.680
implementation to persist data to vs.
using an SQL database. Through the
15

16
00:01:19.680 --> 00:01:25.080
SQL database, we're going to be using JPA
Hibernate for implementation for ORM,
16

17
00:01:25.080 --> 00:01:29.430
our Object Relational Mapping, and then
above that, we are going to be using
17

18
00:01:29.430 --> 00:01:32.250
Spring Data JPA.
So a number of things that we're going to be
18

19
00:01:32.250 --> 00:01:37.079
doing and our goal is to try to abstract
things out as much as possible. We
19

20
00:01:37.079 --> 00:01:41.070
will be using Spring. The longer term
goal here is we're going to be using Spring
20

21
00:01:41.070 --> 00:01:46.170
to control which one of these gets off
wired up at runtime, so the goal here is
21

22
00:01:46.170 --> 00:01:50.880
we'll have a profile that we can run a
HashMap service with our little web
22

23
00:01:50.880 --> 00:01:56.280
application for our pet clinic or
another profile where we can use a SQL
23

24
00:01:56.280 --> 00:02:00.810
database so we'll be able to switch
those on and off with a switch. But, to
24

25
00:02:00.810 --> 00:02:05.700
get there, what we need to do is start
implementing the service so I'm going to
25

26
00:02:05.700 --> 00:02:15.210
create a new package here.
Let's call it springdatajpa, so a brand new
26

27
00:02:15.390 --> 00:02:18.890
package here.
27

28
00:02:19.280 --> 00:02:25.300
I'm going to work on the Owner. It's
coming up here. Say new Java class.
28

29
00:02:26.970 --> 00:02:33.510
I'm abbreviating SD for Spring Data, so
Spring Data JPA gets rather lengthy so
29

30
00:02:33.510 --> 00:02:37.710
we're going to go ahead and do that. 
Let's come up here and I'm going to split
30

31
00:02:37.710 --> 00:02:42.960
this vertically. On the top there, I
have our map implementation on the
31

32
00:02:42.960 --> 00:02:48.750
bottom. What we're going to do is we are
going to code up our service. We want
32

33
00:02:48.750 --> 00:02:52.740
to implement the OwnerService as well.
So let's come in here. I'm just going to
33

34
00:02:52.740 --> 00:02:55.740
copy that.
Remember, that what we are doing is
34

35
00:02:55.740 --> 00:02:58.410
we're providing an alternate
implementation of that interface, so
35

36
00:02:58.410 --> 00:03:02.970
OwnerService is an interface, and now, we
are providing a different implementation
36

37
00:03:02.970 --> 00:03:10.890
of that interface. We want to have
this be wired up as a Spring Component,
37

38
00:03:10.890 --> 00:03:16.740
like so.
Now I'm going to come in here hit
38

39
00:03:16.740 --> 00:03:23.380
option enter and implement the methods,
so these are the the various things that
39

40
00:03:23.380 --> 00:03:29.870
we can implement.
Let's see here.I'm  just reviewing this. The
40

41
00:03:29.870 --> 00:03:32.390
pets and pet type service, I don't think
41

42
00:03:32.390 --> 00:03:37.010
we may need a PetTypeService but I
don't think we are going to need those
42

43
00:03:37.010 --> 00:03:46.180
right now. We are definitely going to
need OwnerService, so private final.
43

44
00:03:49.120 --> 00:03:57.000
Actually, let's go ahead 
and we'll add in final.
44

45
00:03:57.000 --> 00:04:01.150
I'm not 100% sure we're going to need these
but I'm going to wire them in right now, if
45

46
00:04:01.150 --> 00:04:05.910
we need to, we can remove them later.
46

47
00:04:07.990 --> 00:04:12.430
Notice I am implementing the
repositories here and you can see that
47

48
00:04:12.430 --> 00:04:16.840
it's not happy. I'm going to go ahead and
say go ahead and add in constructor
48

49
00:04:16.840 --> 00:04:24.880
parameters, highlight all these and
say okay. You can see that IntelliJ just
49

50
00:04:24.880 --> 00:04:29.710
created that for me. Just as a coding
tip inside of IntelliJ, see this line
50

51
00:04:29.710 --> 00:04:35.800
here? This is a right at about 80
characters, if I remember right. Just
51

52
00:04:35.800 --> 00:04:38.950
as a rule of thumb, that's a good place
to cut off so it you don't want have
52

53
00:04:38.950 --> 00:04:43.510
real long lines, that makes your code
hard to read so I'm just going to hit an
53

54
00:04:43.510 --> 00:04:48.210
enter there and try to keep things from
bleeding over that line.
54

55
00:04:48.210 --> 00:04:55.430
Now, we want to do a findByLastName().
What we want to do here is add in a
55

56
00:04:55.430 --> 00:05:01.500
method into that repository so we're
going to be doing that. It's going to
56

57
00:05:01.500 --> 00:05:07.940
the OwnerRepository.
It's going to return back an Owner
57

58
00:05:09.249 --> 00:05:12.509
findByLastName()
58

59
00:05:15.710 --> 00:05:20.120
so we can see this is going to be using
those dynamic query methods with a
59

60
00:05:20.120 --> 00:05:24.830
Spring Data JPA. It's going to set up
a method for us to findByLastName() and
60

61
00:05:24.830 --> 00:05:30.350
implement the underlying JPA
functionality to provide that. You
61

62
00:05:30.350 --> 00:05:34.400
were leveraging Spring Data JPA
there. What we can do here is return
62

63
00:05:34.400 --> 00:05:41.389
back ownerRepository findByLastName() and
pass in the lastName. So that's how easy
63

64
00:05:41.389 --> 00:05:46.430
that is to return. Next, we want to
implement to find all method. It's going
64

65
00:05:46.430 --> 00:05:53.419
to be pretty simple. What we want to do is
create a new Set Owner. I'll just call
65

66
00:05:53.419 --> 00:05:58.419
that owners equals new HashSet
66

67
00:05:58.420 --> 00:06:06.330
and now we can do ownerRepository findAll forEach.
67

68
00:06:06.540 --> 00:06:09.830
What we can do is owners
68

69
00:06:09.840 --> 00:06:14.340
so we're using a method reference there
then we can return back the owners
69

70
00:06:14.340 --> 00:06:17.430
object.
Pretty simple implementation there
70

71
00:06:17.430 --> 00:06:21.540
that would give us a findAll Set
up. There's probably a couple different ways
71

72
00:06:21.540 --> 00:06:25.410
you could do that. You could arguably say
if we came out and did got a count
72

73
00:06:25.410 --> 00:06:29.940
initialize the HashSet, that'd be
a minor performance. Actually, I'm not sure
73

74
00:06:29.940 --> 00:06:33.660
that even help out your performance or
not, because you're going to have to go out
74

75
00:06:33.660 --> 00:06:37.919
and get a count and then initialize that,
so not having that initialize the proper
75

76
00:06:37.919 --> 00:06:41.130
size is probably less of a performance
Set than trying to go out and get a count
76

77
00:06:41.130 --> 00:06:47.610
of the iterable. So it could argue about
that one. Then we want to findById(),  so
77

78
00:06:47.610 --> 00:06:58.190
say ownerRepository
findbyId() and that becomes a Long.
78

79
00:06:58.700 --> 00:07:02.930
That is returning back a optional so you're
going to do it get there. Now we are
79

80
00:07:02.930 --> 00:07:08.210
returning an optional and we are doing a
get here on that. Now you can see that
80

81
00:07:08.210 --> 00:07:13.970
that in IntelliJ give me some
warnings there about using get without 
81

82
00:07:13.970 --> 00:07:19.280
isPresent. You can see that that is
not too happy there. Can't remember if
82

83
00:07:19.280 --> 00:07:25.030
that throws an exception if it's not
present. Let's see here.
83

84
00:07:25.450 --> 00:07:29.050
Yeah it's going to throw an exception there,
and actually the functionality that I
84

85
00:07:29.050 --> 00:07:37.110
want is to return back a null value, so
let's go ahead and modify this. So
85

86
00:07:37.110 --> 00:07:42.600
you'll say... Let's see here.
That's going to be Optional of
86

87
00:07:44.880 --> 00:07:47.180
Owner.
87

88
00:07:50.660 --> 00:07:57.950
We'll get rid of that get(). Just clean
this up a little bit, and now we will say
88

89
00:07:57.950 --> 00:08:02.090
optional Owner ifPresent().
89

90
00:08:03.860 --> 00:08:07.960
I should say isPresent().
We're going to say if that is present,
90

91
00:08:07.960 --> 00:08:10.770
what we want to do
is type
91

92
00:08:12.220 --> 00:08:20.810
this right.
We'll say return optionalOwner.get()
92

93
00:08:23.229 --> 00:08:26.720
else we're going to return null.
There's a couple different ways that
93

94
00:08:26.720 --> 00:08:29.660
we can do this. We're not really in a
functional style right now for streaming
94

95
00:08:29.660 --> 00:08:32.959
over it or something I'd probably write
this a little bit differently. But for
95

96
00:08:32.959 --> 00:08:37.849
the functionality that we want right now,
let's see what IntelliJ tells me
96

97
00:08:37.849 --> 00:08:40.060
here.
Ah okay, that's
97

98
00:08:41.640 --> 00:08:46.890
a little bit cleaner. Exactly
what I want it so we're going to return the
98

99
00:08:46.890 --> 00:08:51.270
optional or we're going to return null, so
like exactly what we want to. Thank you
99

100
00:08:51.270 --> 00:08:55.800
for IntelliJ for helping me out with the
optional. There's a lot of
100

101
00:08:55.800 --> 00:08:59.640
different ways we can use optionals and
I don't work with them all that often so
101

102
00:08:59.640 --> 00:09:05.880
you can see a little of rust news there.
We can actually clean this up. We can
102

103
00:09:05.880 --> 00:09:14.250
even get rid of that so I'm going to
copy that out. Boom! Get rid of you, so now
103

104
00:09:14.250 --> 00:09:18.540
we have a much cleaner implementation of
it.
104

105
00:09:18.540 --> 00:09:24.840
That's going to return back an owner if
found. If not, I'll return that. So now,
105

106
00:09:24.840 --> 00:09:31.900
let's get on to this. So now we're going to
say ownerRepository.save().
106

107
00:09:31.900 --> 00:09:36.160
It's very simple. Remember the save is
going to return back an owner object
107

108
00:09:36.160 --> 00:09:42.960
just as we want so that is going to help
us out there. Let's see here. Owner
108

109
00:09:44.640 --> 00:09:51.500
delete object so that's all we have to
implement on that.
109

110
00:09:52.220 --> 00:09:59.329
deleteById(). Hit Long. So that's the
name. When I told IntelliJ, I came up with
110

111
00:09:59.329 --> 00:10:03.180
aLong for the property name. I'm just going to
go ahead and roll with that for now.
111

112
00:10:03.180 --> 00:10:08.750
Clean this up a little bit, so
that's our implementation. You can see that
112

113
00:10:08.750 --> 00:10:14.420
I'm not using PetRepository or PetTypeRepository. I want to see how this
113

114
00:10:14.420 --> 00:10:19.160
behaves right now because we have the
save. If we have unsaved pets or unsaved
114

115
00:10:19.160 --> 00:10:23.389
pet types, I'm not quite sure how this
will behave. I'm being honest there. We
115

116
00:10:23.389 --> 00:10:28.060
may want to experiment with this future.
I'm going to leave those in for right now.
116

117
00:10:28.060 --> 00:10:34.370
Now, let's go ahead and start the
application. I'm expecting we are
117

118
00:10:34.370 --> 00:10:40.759
going to get a collision because we have
two services defined for the 
118

119
00:10:40.759 --> 00:10:46.279
OwnerService. We see here we have the
ownerServiceMap and ownerServiceJpaService
119

120
00:10:46.279 --> 00:10:56.170
What I'm going to do right
now is I'm going say @Profile.
120

121
00:10:57.610 --> 00:11:04.209
This is going to be for Spring Data JPA in this
profile. So now, when I start this up,
121

122
00:11:04.209 --> 00:11:07.740
you should see the start up normally.
122

123
00:11:08.240 --> 00:11:12.800
We can see that it did startup.
Effectively, by what I did here is
123

124
00:11:12.800 --> 00:11:17.990
setting in this profile, Spring Data JPA.
I've not called that an active profile
124

125
00:11:17.990 --> 00:11:22.639
so this mean this been in the 
context, is getting ignored. Spring is
125

126
00:11:22.639 --> 00:11:26.689
saying I have set a profile called Spring
Data JPA. It doesn't march for Spring
126

127
00:11:26.689 --> 00:11:31.100
Data JPA, so I'm going to skip over it
because that profile is not active and
127

128
00:11:31.100 --> 00:11:37.339
because I set it to deactive profile,
only one implementation, only the map
128

129
00:11:37.339 --> 00:11:41.059
implementation, got picked up by the
context, which is exactly what we want
129

130
00:11:41.059 --> 00:11:45.949
for right now because I do want to be
working towards implementing
130

131
00:11:45.949 --> 00:11:50.600
Spring Data JPA but we have other Spring
Data JPA classes to implement yet. So,
131

132
00:11:50.600 --> 00:11:56.470
this is kind of exactly where we
want to be. Let's come over here and
132

133
00:11:56.470 --> 00:12:02.809
this was a create Spring Data JPA Service
for owners, which we have completed so
133

134
00:12:02.809 --> 00:12:07.569
I'm going to go ahead and commit this
into GitHub.
134

135
00:12:12.019 --> 00:12:16.399
Now, this closes number 40.
135

136
00:12:16.460 --> 00:12:21.550
Important that you get the pound
sign in front of 40.
136

137
00:12:22.080 --> 00:12:26.370
I'm going to go ahead and commit that and that 
will get pushed up to GitHub and
137

138
00:12:26.370 --> 00:12:29.360
complete this task.
