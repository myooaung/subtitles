WEBVTT
0
1
00:00:04.190 --> 00:00:08.910
Alright, in this section, we want to
take a look at using form posts and
1

2
00:00:08.910 --> 00:00:12.570
form posts are pretty important things
when we're developing a traditional web
2

3
00:00:12.570 --> 00:00:15.929
application because we're going to post
data back to the server. And this is
3

4
00:00:15.929 --> 00:00:20.609
going to handle both the initial
creation and an update of some type of
4

5
00:00:20.609 --> 00:00:24.150
data back at the server. And
traditionally this is done through a
5

6
00:00:24.150 --> 00:00:29.730
post and posting form data. So it's been
around like as long as the Internet
6

7
00:00:29.730 --> 00:00:35.670
but a lot of people don't look at it too
close. And in a Spring MVC context, what
7

8
00:00:35.670 --> 00:00:42.420
we're going to do is let's say we have
our controller. So this is our controller,
8

9
00:00:42.420 --> 00:00:50.460
and over here we have our web
application. Now when we want to present
9

10
00:00:50.460 --> 00:00:58.260
the form to the controller, we're going
to create an object. And we're going to
10

11
00:00:58.260 --> 00:01:01.890
bind data to that object and this is
going to be happening within inside of
11

12
00:01:01.890 --> 00:01:09.299
Spring MVC. And we are going to pass that
object over and ultimately, the data
12

13
00:01:09.299 --> 00:01:13.170
properties are going to get passed over
to that. So this would be more for like
13

14
00:01:13.170 --> 00:01:17.610
an update or perhaps in a create scenario
where we want to initialize the form
14

15
00:01:17.610 --> 00:01:23.310
with some initial data provided from
Spring MVC. Now this is going to get
15

16
00:01:23.310 --> 00:01:32.700
submitted back via post. And Spring MVC
is going to handle this as well and by
16

17
00:01:32.700 --> 00:01:38.610
convention, as long as we make the form
property names, the same as the object
17

18
00:01:38.610 --> 00:01:42.930
property names, so I'm talking this
object right here. I'm trying to help you
18

19
00:01:42.930 --> 00:01:48.210
visualize what's happening. Upon that
post and the controller the framework is
19

20
00:01:48.210 --> 00:01:52.950
going to bind those properties of the
form post to a bean for us to work with. So
20

21
00:01:52.950 --> 00:01:57.180
it's a really handy way to work. This has
been around for a long time. Some people
21

22
00:01:57.180 --> 00:02:02.369
call it a command object or a command
bean, I also here backing bean. So there's
22

23
00:02:02.369 --> 00:02:06.149
a few different names. The terminology
around us a little loose but the concept
23

24
00:02:06.149 --> 00:02:11.110
is we're going to have a POJO,
so this guy is going to be a POJO,
24

25
00:02:11.110 --> 00:02:16.450
and we will take that and we'll
initialize the form, the view with that
25

26
00:02:16.450 --> 00:02:20.350
POJO and any properties we want
initialize on the form so that that will
26

27
00:02:20.350 --> 00:02:25.570
be done through binding for us. And then
when we get the beam back, the framework
27

28
00:02:25.570 --> 00:02:29.620
itself is going to handle that. It's
going to take that post for us. And what
28

29
00:02:29.620 --> 00:02:33.640
I want to do now is, let's switch over
and take a closer look at this. I'm going
29

30
00:02:33.640 --> 00:02:39.250
to bring up an application. We'll take a
look at the actual HTTP cymatics on what's
30

31
00:02:39.250 --> 00:02:43.540
going on under the covers in this whole
transaction here. Okay what's happening
31

32
00:02:43.540 --> 00:02:48.550
here is, I have a Spring Boot application.
I've actually set up Apache TCPMon
32

33
00:02:48.550 --> 00:02:54.160
inside of IntelliJ to act as a proxy. So
I am going against port 8081
33

34
00:02:54.160 --> 00:02:59.170
which is what the TCPMon is listening
on. I have Spring Boot running on port
34

35
00:02:59.170 --> 00:03:05.290
8080 and this is a simple form post. This
is design on my Thymeleaf course. I'm
35

36
00:03:05.290 --> 00:03:09.100
not going to share the source with this.
I'm just using this as an example of a
36

37
00:03:09.100 --> 00:03:12.250
form post. I'm going to look at that
right now and we'll be getting into
37

38
00:03:12.250 --> 00:03:16.480
form posts going forward in the
course for sure. But this is just a handy
38

39
00:03:16.480 --> 00:03:21.280
example for me to pull up and what we
want to do is take a look at the submit
39

40
00:03:21.280 --> 00:03:26.500
action. So I'm going to submit this form. So I'll just click on submit and you can see
40

41
00:03:26.500 --> 00:03:30.820
down there, I've actually got an error
back so some validation errors happened
41

42
00:03:30.820 --> 00:03:35.920
and we will be getting into that for
sure. But you can see that it does the
42

43
00:03:35.920 --> 00:03:40.209
initial post here and it goes against
the web server and then it starts
43

44
00:03:40.209 --> 00:03:45.340
out doing some get actions. So let's
take a closer look at that inside of TCP
44

45
00:03:45.340 --> 00:03:53.350
Mon that's up inside of IntelliJ. So there's that post and it came up and
45

46
00:03:53.350 --> 00:04:00.519
what we want to look at is, here we went
to 8081, we can see the origin is 8081,
46

47
00:04:00.519 --> 00:04:10.660
and in the content type you can see application/x-www-form-urlencoded. And here, here's
47

48
00:04:10.660 --> 00:04:16.239
the URL encoding of the form data and
this is what Spring is going to get and
48

49
00:04:16.239 --> 00:04:21.010
bind to the bean. So it's actually going
to do a binding to that bean and by the
49

50
00:04:21.010 --> 00:04:24.379
property names. So these property names are going to
50

51
00:04:24.379 --> 00:04:30.080
match bean names of what's happening
with the binding inside of Spring Data.
51

52
00:04:30.080 --> 00:04:34.879
So we're going to match these two
regular old POJO. So there's some rules
52

53
00:04:34.879 --> 00:04:39.289
around that as far as the property
matching it and let me toggle over. I get
53

54
00:04:39.289 --> 00:04:43.789
a little slide presentation prepared
to talk about some of the binding
54

55
00:04:43.789 --> 00:04:47.629
attributes and as we move forward in the
course, we are going to be using this. So
55

56
00:04:47.629 --> 00:04:53.270
we're going to set up a command object
which we will use to render the create
56

57
00:04:53.270 --> 00:04:57.889
form and obviously we won't need to
initialize any data there. Not on a
57

58
00:04:57.889 --> 00:05:02.599
create there. It could be a scenario that we
do want to but then we will post back to
58

59
00:05:02.599 --> 00:05:08.210
the server to create like a new recipe,
and these properties will get bound to
59

60
00:05:08.210 --> 00:05:12.199
that POJO. So it's pretty important to
understand how this binding process is
60

61
00:05:12.199 --> 00:05:16.759
working. Now we're going to talk about
how that data binding does happen inside
61

62
00:05:16.759 --> 00:05:21.469
the Spring framework and talking about
the command objects that we're going to
62

63
00:05:21.469 --> 00:05:26.180
use the shuttle information to and from
forms. So what Spring is going to do is
63

64
00:05:26.180 --> 00:05:31.039
automatically bind this for us and it's
going to be done by property name and
64

65
00:05:31.039 --> 00:05:35.930
actually, if you're looking at using
reflection, it's the property name but
65

66
00:05:35.930 --> 00:05:40.460
we're going to use the getter or setter. So
typically we will say get property name
66

67
00:05:40.460 --> 00:05:44.690
or set property name but it's the actual
root property name without the get or
67

68
00:05:44.690 --> 00:05:50.000
set. Some people get that confused. Now
that let's say we have a person bean
68

69
00:05:50.000 --> 00:05:54.229
and that person bean has a property of
first name. So if it has a parameter name
69

70
00:05:54.229 --> 00:06:00.560
firstName, it's going to get bound to
firstName. Likewise if that person had
70

71
00:06:00.560 --> 00:06:05.870
an address and an address object like an
addressLine1, so if we use the dot
71

72
00:06:05.870 --> 00:06:10.879
notation, so this is important, the dot
notation allows us to navigate the
72

73
00:06:10.879 --> 00:06:17.330
object graph. So if we just pass a
property on that form named address dot
73

74
00:06:17.330 --> 00:06:22.939
addressLine1, that would
automatically bind to the addressLine1
74

75
00:06:22.939 --> 00:06:30.560
of the property. And then we can also
support the use of arrays. So let's say
75

76
00:06:30.560 --> 00:06:35.659
our person bean had an email list. So
actually I've got a bunch of different
76

77
00:06:35.659 --> 00:06:37.910
email
addresses that I use for various
77

78
00:06:37.910 --> 00:06:43.160
different purposes and if we want to
capture that on a form, in some type of
78

79
00:06:43.160 --> 00:06:52.010
array we could do so. So that email would
get an index property. So email bracket 0
79

80
00:06:52.010 --> 00:06:57.230
would be the first property, the first
index and then email 1, remember it's
80

81
00:06:57.230 --> 00:07:02.600
going to be zero base Java thing. Your
indexes are zero base. So this is an
81

82
00:07:02.600 --> 00:07:08.180
example of having properties and you do
the string literal of email bracket 0
82

83
00:07:08.180 --> 00:07:14.120
bracket on your form, on your HTML form
and that is going to get translated into
83

84
00:07:14.120 --> 00:07:20.180
an index property inside of the Java
Bean. So these are
84

85
00:07:20.180 --> 00:07:24.170
kind of the high-level rules of doing
the data binding and this is just how
85

86
00:07:24.170 --> 00:07:31.100
Spring is going to bind from a web form
post to your your bean. Now in the next
86

87
00:07:31.100 --> 00:07:36.080
video we are going to take a closer look
at actually setting up a command object
87

88
00:07:36.080 --> 00:07:41.150
that we can use with our forms and we
will get that working in a
88

89
00:07:41.150 --> 00:07:45.620
create context. So we'll create a new
record for a recipe using a command
89

90
00:07:45.620 --> 00:07:48.940
bean or command object.
