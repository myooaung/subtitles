WEBVTT
0
1
00:00:04.609 --> 00:00:08.370
Alright! In this video, we're going to
take a look at content negotiation
1

2
00:00:08.370 --> 00:00:13.049
inside of Spring. You get under the
covers a little bit here. What's
2

3
00:00:13.049 --> 00:00:17.340
happening, just as a refresher, this is a
slide that we had earlier in the course
3

4
00:00:17.340 --> 00:00:21.810
about Spring MVC. This is specific to
Spring MVC. But underneath the covers, we
4

5
00:00:21.810 --> 00:00:26.220
have something very similar happening in
the WebFlux framework, but we just don't
5

6
00:00:26.220 --> 00:00:29.130
have the Dispatcher Servlet and we
don't have a server at all in WebFlux.
6

7
00:00:29.130 --> 00:00:33.989
But here, what's going on just recap
what's happening in this context, and
7

8
00:00:33.989 --> 00:00:37.200
again, it's very similar for WebFlux. The
same flow is happening so the
8

9
00:00:37.200 --> 00:00:40.739
components are different. We have a
client request. So this is from some type
9

10
00:00:40.739 --> 00:00:45.210
of web client. It's going to come in and
get handled by the Dispatcher Servlet,
10

11
00:00:45.210 --> 00:00:50.670
and through a handler mapping, we are
going to determine which controller method
11

12
00:00:50.670 --> 00:00:54.750
to use. So, that's Controller. It's going
to handle that request, and chances are,
12

13
00:00:54.750 --> 00:00:58.469
like in a get request, we're going to be
asking for a list of data from the
13

14
00:00:58.469 --> 00:01:03.329
backend database, for example. So, we're
going to go out to service and get that
14

15
00:01:03.329 --> 00:01:08.970
data. That is going to be returned back
as a model there. You can see that small
15

16
00:01:08.970 --> 00:01:14.010
box, a model, which is just a POJO, a
simple Java data structure. So, that's all
16

17
00:01:14.010 --> 00:01:18.630
inside of the JVM running his Java
objects. This is going back to the
17

18
00:01:18.630 --> 00:01:23.520
Dispatcher Servlet. Now, a Servlet is
responsible for providing the view.
18

19
00:01:23.520 --> 00:01:28.250
So far in the course, we've only looked
at a single view, like early on, we were
19

20
00:01:28.250 --> 00:01:34.680
looking at Thymeleaf to render HTML. As
we got into some of the REST stuff, we were
20

21
00:01:34.680 --> 00:01:39.930
using JSON, and underneath the covers of
that, we were using Jackson. So, Jackson
21

22
00:01:39.930 --> 00:01:45.390
was taking that Java model, that Java
POJO and converting it into JSON for us
22

23
00:01:45.390 --> 00:01:50.549
and vice versa. I was taking JSON and
converting it over to a Java object for
23

24
00:01:50.549 --> 00:01:54.960
us. And somewhere, was happening with
Thymeleaf, we're Thymeleaf was taking a
24

25
00:01:54.960 --> 00:02:00.990
Thymeleaf template and combining it in
with the model object, the data that we
25

26
00:02:00.990 --> 00:02:05.880
got back to generate HTML for us. Now,
there are additional capabilities that
26

27
00:02:05.880 --> 00:02:11.310
we have not looked at, and that is to
allow the client to specify the content
27

28
00:02:11.310 --> 00:02:16.800
that he wants,
or she, the client can ask for HTML JSON
28

29
00:02:16.800 --> 00:02:22.560
or XML. So, there's a number of different
use case scenarios here that allows it.
29

30
00:02:22.560 --> 00:02:26.430
So, we've only been looking at a singular
view, but to implement that, what Spring
30

31
00:02:26.430 --> 00:02:31.140
has provided us is a bean called a
ContentNegotiatingViewResolver. Now,
31

32
00:02:31.140 --> 00:02:33.560
I'm going to take a closer look at that
now.
32

33
00:02:33.560 --> 00:02:38.670
Now, a ContentNegotiatingViewResolver,
that is going to be used by Spring MVC
33

34
00:02:38.670 --> 00:02:44.790
to determine which view to use. So, are we
going to render JSON? Are we going to render
34

35
00:02:44.790 --> 00:02:51.150
XML? Are we're going to render HTML? It could
even be a PDF, a spreadsheet, CSV. So,
35

36
00:02:51.150 --> 00:02:56.490
there's a number of handlers that we can
wire in here, and this view resolver is
36

37
00:02:56.490 --> 00:03:01.110
going to be Auto configurable for us by
Spring Boot now. We were not using Spring
37

38
00:03:01.110 --> 00:03:06.270
Boot. It would be up to us to provide a
ContentNegotiatingViewResolver. I know
38

39
00:03:06.270 --> 00:03:11.340
the important thing to remember is that
this is determining which view to use
39

40
00:03:11.340 --> 00:03:18.120
based on the content type. That content
type, that is actually a property inside
40

41
00:03:18.120 --> 00:03:23.580
the HTTP header. So, we looked at some of
the HTTP requests earlier. That is in
41

42
00:03:23.580 --> 00:03:30.000
the header, and basically the content
type is in the HTTP protocol. It's the
42

43
00:03:30.000 --> 00:03:36.060
way for the client to say, I want Jason
or I want XML or I want HTML. So, that's
43

44
00:03:36.060 --> 00:03:41.370
part of HTTP standard and protocol for
the client to do that. So, I think there's
44

45
00:03:41.370 --> 00:03:45.450
over a dozen of them that are in the
spec. I'm only looking at a handful here
45

46
00:03:45.450 --> 00:03:49.560
and these are some of the more popular
ones and we're going to be looking at in
46

47
00:03:49.560 --> 00:03:54.090
this section of the course of
implementing the XML view. So, our REST
47

48
00:03:54.090 --> 00:04:00.209
client will be able to say, I want Jason
or I want to consume XML. Now, if the
48

49
00:04:00.209 --> 00:04:06.570
client requests like PDF, for example, if
we don't have that configured, we are
49

50
00:04:06.570 --> 00:04:10.350
going to return back or Spring is
going to return back an HTTP status of
50

51
00:04:10.350 --> 00:04:15.480
406 not acceptable. So, that's a way
to let the client know, 'Hey, you asked for
51

52
00:04:15.480 --> 00:04:19.549
this
type of content and I don't have it'.
52

53
00:04:19.549 --> 00:04:23.270
I'm going to show you that now and jump
over to intelligent take a quick look at
53

54
00:04:23.270 --> 00:04:27.500
that.
Okay, I actually up on the screen here, I
54

55
00:04:27.500 --> 00:04:32.900
have the ContentNegotiatingViewResolver up. I want to show you here
55

56
00:04:32.900 --> 00:04:37.400
on line 334, that is
saying getBestView. So, this is
56

57
00:04:37.400 --> 00:04:40.910
going to come in. We're getting requestedMediaTypes. It's going to go through
57

58
00:04:40.910 --> 00:04:47.479
there, and really effectively, what's
happening here, that's right here. This is
58

59
00:04:47.479 --> 00:04:52.940
an important part. Now, we're going to return
back. We're going to try to find
59

60
00:04:52.940 --> 00:04:59.389
the best available view. So, we can have
multiple views in here. So, let's take a
60

61
00:04:59.389 --> 00:05:04.840
quick look at the view object. So, here's
the interface and View, and we can see,
61

62
00:05:04.840 --> 00:05:09.620
this is just the interface. But, let's
take a quick look at the implementations
62

63
00:05:09.620 --> 00:05:16.419
of it. So, here's the Jackson. So here's
the Jackson View. So we implemented
63

64
00:05:16.419 --> 00:05:21.409
AbstractJackson2View, and ultimately, it
does implement the View interface.
64

65
00:05:21.409 --> 00:05:27.650
This is basically the View, and you
can see here on line 68, I'm saying my
65

66
00:05:27.650 --> 00:05:34.400
default content-type for this View is
application Jason. And so, when this is on
66

67
00:05:34.400 --> 00:05:38.630
the path or in the Spring Context, which
it will be if we have Jackson
67

68
00:05:38.630 --> 00:05:42.650
implemented. Spring Boot is automatically
going to provide us an instance of this
68

69
00:05:42.650 --> 00:05:47.599
view inside the Spring Context. It's
going to come in and say, 'Oh, I'm going to use
69

70
00:05:47.599 --> 00:05:52.250
this and handle that with Jackson'. Now,
what you don't see here is I don't have
70

71
00:05:52.250 --> 00:05:57.440
Thymeleaf in this project. If I did, I
would have a Thymeleaf view. That would
71

72
00:05:57.440 --> 00:06:03.349
get automatically wired by Spring.
So typically, with Spring Boot, it is going
72

73
00:06:03.349 --> 00:06:07.699
to be making the sensible defaults for
us or sensible decisions for us. So, if
73

74
00:06:07.699 --> 00:06:12.320
we include Thymeleaf, we will have a Thymeleaf
View Handler in there. If we include
74

75
00:06:12.320 --> 00:06:15.199
something to handle XML, which you are
going to see coming up in the course,
75

76
00:06:15.199 --> 00:06:21.919
we'll be able to render XML, but we do not,
so right now, I'll show you how we get a
76

77
00:06:21.919 --> 00:06:27.889
406 return, and ultimately, if
it falls through this logic,
77

78
00:06:27.889 --> 00:06:31.819
this is a view that's getting back,
getting returned. It's going to
78

79
00:06:31.819 --> 00:06:38.900
return back in this. So, if we come in
here, you can see that is a 406.
79

80
00:06:38.900 --> 00:06:43.639
So, that is returning back a HTTP 406.
That sounds, and that's working
80

81
00:06:43.639 --> 00:06:47.629
underneath the covers. So, coming up in
future videos here, your are going to see how to
81

82
00:06:47.629 --> 00:06:52.819
wire up XML and get XML being
returned back to the client rather than
82

83
00:06:52.819 --> 00:06:55.120
JSON.
