WEBVTT
0
1
00:00:05.190 --> 00:00:08.250
In this video we are going to create a brand new Spring Framework project.
1

2
00:00:08.310 --> 00:00:13.900
We are going to be using this project to explore the Dependency Injection features of Spring Framework.
2

3
00:00:13.980 --> 00:00:19.650
So I have a repository that's been created inside of GitHub. The master branch of that repository only
3

4
00:00:19.650 --> 00:00:26.260
has read me file on this so we want to go through the recommended workflow to check this repository out.
4

5
00:00:26.430 --> 00:00:31.950
First we're going to fork it to our repository and then check it out to your own workspace and then
5

6
00:00:31.950 --> 00:00:35.400
we are going to create a project using start.spring.io
6

7
00:00:35.520 --> 00:00:41.790
We just need a very basic Spring project. We'll take those generated project files and bring it into
7

8
00:00:41.790 --> 00:00:45.910
our workspace and start utilizing that as a Spring Framework project.
8

9
00:00:45.930 --> 00:00:50.940
So I'm going to jump over to IntelliJ and start stepping through the steps of the work recommended workflow
9

10
00:00:51.330 --> 00:00:54.840
to initialize this new Spring Framework project.
10

11
00:00:55.110 --> 00:01:02.310
You can see on the screen here at the repository springframeworkguru/sfg-di for
11

12
00:01:02.310 --> 00:01:03.660
dependency injection.
12

13
00:01:03.660 --> 00:01:09.570
So this is the repository that we're going to be using to explore some of the Dependency Injection features
13

14
00:01:09.660 --> 00:01:10.950
of the Spring Framework.
14

15
00:01:10.980 --> 00:01:16.700
So the first thing that we want to do is go ahead and clone this to our own local workspace. I'm going to step
15

16
00:01:16.710 --> 00:01:22.850
through that now. You can see I'm on the master branch and this branch only has the README.md
16

17
00:01:22.860 --> 00:01:23.610
file.
17

18
00:01:23.610 --> 00:01:26.720
So that's the only thing that's in this branch of the repository.
18

19
00:01:26.740 --> 00:01:35.820
I'm gonna I come up here. Click on clone or download and I'm copying that to the clipboard. Now I'm gonna toggle
19

20
00:01:35.820 --> 00:01:45.270
over to IntelliJ and from IntelliJ what I'm going to do say file new project from version control
20

21
00:01:47.430 --> 00:01:52.290
I paste that in and then I want changed my workspace.
21

22
00:01:56.270 --> 00:02:03.520
See all my stuff in here and then I go down courses Spring 5 and I'm going to check that out into
22

23
00:02:03.970 --> 00:02:10.840
this core folder for all my Spring 5 repositories. So I go ahead and click open which is a little
23

24
00:02:10.840 --> 00:02:15.640
bit off the screen. Sorry about that. I'm not going to say clone
24

25
00:02:19.150 --> 00:02:21.780
spring 5 and I made one mistake there.
25

26
00:02:21.780 --> 00:02:31.730
So I want to do a sfg-di and then say clone that. And that's me
26

27
00:02:31.730 --> 00:02:38.950
check that out. And here it's an empty project so I'm just say create project from existing sources because
27

28
00:02:38.980 --> 00:02:48.410
there's no Maven or Gradle model there to pull in and project name is a sfg-di. You
28

29
00:02:48.410 --> 00:02:49.640
can see that it's the right spot.
29

30
00:02:49.640 --> 00:02:50.870
So I'm gonna say next.
30

31
00:02:53.970 --> 00:02:58.500
You can see IntelliJ is looking for frameworks. It doesn't see anything because all we have is a readme
31

32
00:02:58.520 --> 00:03:07.770
file in there so I'm going to say finish and let me reposition this window. You can see the only thing that we
32

33
00:03:07.770 --> 00:03:11.580
have in the project is in fact that read me file.
33

34
00:03:11.610 --> 00:03:13.780
So that one file exists.
34

35
00:03:13.890 --> 00:03:21.800
Now I'm going to come over to Chrome and here's Spring Initializr there and I'm going to download a project
35

36
00:03:21.800 --> 00:03:27.020
from them so I'm going to do Maven project, Java, Spring 2.2.2 
36

37
00:03:30.610 --> 00:03:37.460
and the reverse domain name. For the artifacts, one thing I'd like to do is match my artifact named
37

38
00:03:37.460 --> 00:03:41.780
to the repository name. That is my own personal convention.
38

39
00:03:41.780 --> 00:03:45.530
So sfg-di that's going to match the repository name.
39

40
00:03:50.840 --> 00:03:58.660
I'm going to say dependency injection examples and I'm going to take Java 11 packaging JAR and actually
40

41
00:03:58.660 --> 00:04:04.080
I don't need any of the options because we're just going to be doing a core Spring.
41

42
00:04:04.320 --> 00:04:08.050
So we just need the basic Spring libraries and testing libraries.
42

43
00:04:08.110 --> 00:04:12.520
So I'm going to click on generate and I am doing this the day after Christmas.
43

44
00:04:12.520 --> 00:04:17.770
So we've got a couple Christmas animations on the Web site so I'm going to go ahead and say generate
44

45
00:04:19.040 --> 00:04:27.380
and that is going to bring down this zip file. So I'm clicking on open and toggle back over to IntelliJ.
45

46
00:04:28.190 --> 00:04:30.890
I'm gonna bring this up.
46

47
00:04:30.910 --> 00:04:38.740
So this is the sfg-di files and I want these files brought into IntelliJ
47

48
00:04:38.740 --> 00:04:44.490
so what I can do so I can just click on them and then drag over like
48

49
00:04:44.500 --> 00:04:44.830
so.
49

50
00:04:50.010 --> 00:04:51.970
We'll go ahead and add all those.
50

51
00:04:51.970 --> 00:04:56.130
So I'm adding these into Github and I will check this in on a new branch.
51

52
00:04:56.310 --> 00:05:02.100
So I don't dirty up that master branch. And let's take a look at what was brought
52

53
00:05:02.110 --> 00:05:11.010
in. So we have this pom file and we can see here. Let me close this dialog. We could see this is what
53

54
00:05:11.010 --> 00:05:16.470
was generated by the Spring Initializr. So very very simple project.
54

55
00:05:16.470 --> 00:05:20.740
We have the Spring Boot Starter and also the Spring Boot Starter Test.
55

56
00:05:20.850 --> 00:05:24.960
And right now IntelliJ does not see this as a Maven project.
56

57
00:05:24.960 --> 00:05:31.650
So what I need to do is come in here, right click, and see here I got Add as Maven project. So I'm gonna click
57

58
00:05:31.650 --> 00:05:38.460
on that. That tells IntelliJ to bring this in as a Maven project. And let's see here.
58

59
00:05:41.690 --> 00:05:43.470
I'm going to say recreate that.
59

60
00:05:43.500 --> 00:05:46.020
So IntelliJ do that.
60

61
00:05:49.220 --> 00:05:53.570
I think that was mistaken in saying recreate so I'm gonna say add as Maven project again.
61

62
00:05:56.560 --> 00:06:04.310
And let's come in here. I'm going to come up to the lifecycle and say verify. You can see here I'm saying a project
62

63
00:06:04.370 --> 00:06:05.900
JDK is not specified.
63

64
00:06:05.900 --> 00:06:10.630
So that is something that we can fix here. Go to preferences.
64

65
00:06:10.640 --> 00:06:20.630
I'm sorry. We want to go to the project structure and here I want to take my Java 11 SDK and we'll
65

66
00:06:20.630 --> 00:06:23.680
set the language level to Java 11 as well.
66

67
00:06:23.870 --> 00:06:30.290
So that sets up this project inside of IntelliJ as a Java 11 project. So I'm going to say apply.
67

68
00:06:30.390 --> 00:06:31.200
Okay.
68

69
00:06:31.300 --> 00:06:33.260
And now verify I should be able to run
69

70
00:06:37.280 --> 00:06:40.330
so there we can see that this did in fact run.
70

71
00:06:40.340 --> 00:06:45.170
Now one thing that I want to point out is this project Spring Boot switched over to 
71

72
00:06:45.170 --> 00:06:48.020
JUnit 5 and this JUnit Vintage.
72

73
00:06:48.020 --> 00:06:56.570
So if you have any need for JUnit 4 test, get rid of this JUnit Vintage engine. So remove this from your
73

74
00:06:56.570 --> 00:06:59.140
project if you have a need for JUnit 4 tests.
74

75
00:06:59.140 --> 00:07:08.000
So this is basically what allows JUnit 4 test to run inside from JUnit 5. If you have questions, additional
75

76
00:07:08.000 --> 00:07:14.180
about JUnit, check out my Testing Spring Boot course. I go into JUnit really in depth in that course.
76

77
00:07:14.810 --> 00:07:21.680
I quickly recap what we did in this video is we checked out the repository. The only thing that was
77

78
00:07:21.680 --> 00:07:27.410
in the repository was this READM file here and then we use Spring Initializr to create a Spring
78

79
00:07:27.410 --> 00:07:34.360
Boot project and copy that into our repository. The one thing that you have to do within IntelliJ
79

80
00:07:34.760 --> 00:07:39.740
is when we bring in those project files, IntelliJ doesn't know that it is Maven project so
80

81
00:07:39.740 --> 00:07:46.040
within the pom file come over here, right click, and it's not there now but there's you'll see
81

82
00:07:46.040 --> 00:07:54.170
an option here to Add as Maven project which will bring up this Maven dialog. You will also have to go
82

83
00:07:54.170 --> 00:08:02.520
over here to the project structure and tell IntelliJ to use your Java 11 SDK and also set the
83

84
00:08:02.540 --> 00:08:03.290
language level.
84

85
00:08:03.290 --> 00:08:08.770
And if you're stuck on Java 8, that's OK. When you create the project inside this Spring Initializr
85

86
00:08:09.110 --> 00:08:13.760
use Java 8, bring it down then point your Java 8 SDK to it.
86

87
00:08:14.390 --> 00:08:19.160
So that sets up the project and by the end of the video what you want to be able to do is just come
87

88
00:08:19.160 --> 00:08:26.450
over here. Run the verify command. This is gonna go out and tell Maven to compile the project and
88

89
00:08:26.450 --> 00:08:32.570
it will also run the one test. So remember we have a main class and then the Spring Initializr does give
89

90
00:08:32.570 --> 00:08:33.330
us one
90

91
00:08:33.330 --> 00:08:36.500
JUnit tests which will get executed in the verify step.
