WEBVTT
0
1
00:00:04.430 --> 00:00:08.130
Alright we covered a lot of ground in
this session of course. It's actually a
1

2
00:00:08.130 --> 00:00:12.000
much longer section and I like to have
them but I wanted to keep this focused
2

3
00:00:12.000 --> 00:00:16.560
on CRUD operations using Spring MVC. And I think we threw a lot of good examples
3

4
00:00:16.560 --> 00:00:22.050
at you. So you can see how versatile
Spring MVC is and how you can do work
4

5
00:00:22.050 --> 00:00:27.449
with Spring MVC and Spring Data to
persist and get data back out of the
5

6
00:00:27.449 --> 00:00:30.599
database. And I want to go through the
number of scenarios because I've been
6

7
00:00:30.599 --> 00:00:35.520
doing this for a while. And when I
originally did the course, I did a very
7

8
00:00:35.520 --> 00:00:39.780
simple example but we didn't get into some
of the more complex object stuff. So I
8

9
00:00:39.780 --> 00:00:43.559
decided to include that in the course
and you can see the nuances dealing with
9

10
00:00:43.559 --> 00:00:49.379
a more complex
data model. So it gives you some more
10

11
00:00:49.379 --> 00:00:54.719
very realistic hands-on experience using
Spring MVC. And also I got a lot of
11

12
00:00:54.719 --> 00:01:00.120
questions about how to handle images. So
we did towards the end there, we did
12

13
00:01:00.120 --> 00:01:04.939
store the image in the database. A pretty
common use case to do that.
13

14
00:01:04.939 --> 00:01:11.189
So now you do see just how versatile
Spring MVC is and along the way, we did
14

15
00:01:11.189 --> 00:01:15.689
follow test-driven development. So you
get a lot of great hands-on, a lot of
15

16
00:01:15.689 --> 00:01:20.430
great examples for a MockMvc through
Spring MVC test. So it's a very very
16

17
00:01:20.430 --> 00:01:24.360
versatile tool and you're going to see a
lot more of that coming up in this
17

18
00:01:24.360 --> 00:01:30.390
course. So right now we do have a rather
brittle application because it does
18

19
00:01:30.390 --> 00:01:34.259
expect happy path on everything. So if
something goes wrong, it's not going to
19

20
00:01:34.259 --> 00:01:38.759
react properly like if you put in a
String value for the recipe ID, it's
20

21
00:01:38.759 --> 00:01:43.049
probably not going to like that. Or if
you go and not find a recipe,
21

22
00:01:43.049 --> 00:01:46.649
you're going to get a generic error
error page. Coming up in the course we
22

23
00:01:46.649 --> 00:01:51.720
are going to make this a lot more
production grade and do a little more
23

24
00:01:51.720 --> 00:01:56.570
defensive programming against some of
those issues that we may see.
