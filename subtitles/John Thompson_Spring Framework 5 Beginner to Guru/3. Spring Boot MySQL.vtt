WEBVTT
0
1
00:00:02.510 --> 00:00:09.890
Okay I want to go through my example of a
Spring Boot application using MySQL. The
1

2
00:00:09.890 --> 00:00:15.269
source code is available up on GitHub so
if you go to my repository on GitHub for
2

3
00:00:15.269 --> 00:00:23.200
springframeworkguru and you go to the
repository spring-boot-mysql-example,
3

4
00:00:23.200 --> 00:00:26.039
you will get the sample source
code for everything I'm going to show
4

5
00:00:26.039 --> 00:00:30.449
you in this little code review of my
Spring Boot application. I'm going to
5

6
00:00:30.449 --> 00:00:38.370
toggle over to IntelliJ now and what we
have here is a simple JPA Entity for
6

7
00:00:38.370 --> 00:00:44.039
Product, it's got four properties on it
id, description, price and imageUrl so
7

8
00:00:44.039 --> 00:00:51.780
nothing too crazy here and I
also have a ProductRepository and this
8

9
00:00:51.780 --> 00:00:55.649
is using Spring Data JPA. So if you're not familiar with Spring
9

10
00:00:55.649 --> 00:00:58.559
Data JPA, this is going to provide a
10

11
00:00:58.559 --> 00:01:03.629
repository pattern for us to use in our
project and Spring Data JPA will
11

12
00:01:03.629 --> 00:01:09.630
actually provide the implementation of
this. Now I've written it, I like to wrap
12

13
00:01:09.630 --> 00:01:13.590
things up in a service before we get to
the controller layer. So I have a very
13

14
00:01:13.590 --> 00:01:19.170
simple ProductService that's going to
do a listAll, getById, saveOrUpdate
14

15
00:01:19.170 --> 00:01:24.870
delete or then we can also saveOrUpdate from a product form which is a
15

16
00:01:24.870 --> 00:01:28.350
command pattern I'm going to use from
the controller. Let's go over here and
16

17
00:01:28.350 --> 00:01:34.020
take a quick look at the service
implementation and you can see that I've
17

18
00:01:34.020 --> 00:01:39.330
annotated it as a Service up there on
line 16 so this gets wired up as a
18

19
00:01:39.330 --> 00:01:44.460
Spring component and I'm bringing in
two different classes that are also
19

20
00:01:44.460 --> 00:01:49.590
going to be managed by Spring so the
ProductRepository, that is the Spring
20

21
00:01:49.590 --> 00:01:55.980
Data JPA provided component. Then we also
have a ProductFormToProduct and that
21

22
00:01:55.980 --> 00:01:59.909
is converter class and that's just going
to do a simple type conversion for us as
22

23
00:01:59.909 --> 00:02:05.010
things get posted from the web form,
they'll get bound to a ProductForm and
23

24
00:02:05.010 --> 00:02:11.249
this ProductFormToProduct will do the
type conversion for us and just take a
24

25
00:02:11.249 --> 00:02:15.780
quick look here, we can
see that we're going through the Product
25

26
00:02:15.780 --> 00:02:20.879
Repository we do a findAll, for listAll and we'll get all the products and
26

27
00:02:20.879 --> 00:02:26.489
we'll convert those to everything else
is a fairly self-explanatory. Here now
27

28
00:02:26.489 --> 00:02:30.959
let's take a quick look at the ProductController, this is a Spring controller
28

29
00:02:30.959 --> 00:02:37.799
and you can see there on line 37 for
the root I'm doing a simple redirect to
29

30
00:02:37.799 --> 00:02:44.670
the product/list so that will run the
list and I got two URLs map there both
30

31
00:02:44.670 --> 00:02:49.470
slash product slash list and then
simply slash product they'll show the
31

32
00:02:49.470 --> 00:02:55.230
list and pretty standard Spring pattern
here, I'm going to go through when this
32

33
00:02:55.230 --> 00:03:01.139
comes in we'll bind the model we'll add the
attribute products to it, we call the
33

34
00:03:01.139 --> 00:03:04.109
ProductService and get a complete list
and return back so I'm not doing any
34

35
00:03:04.109 --> 00:03:09.079
paging that's just meant to be a fairly
simple example and you can see I have
35

36
00:03:09.079 --> 00:03:14.849
URL setup with basic CRUD operations
where we can create update show one and
36

37
00:03:14.849 --> 00:03:19.919
then also do a delete down here at the
bottom and then if you're not familiar
37

38
00:03:19.919 --> 00:03:25.889
with Thymeleaf, here's the list that
we're looking at it goes through and
38

39
00:03:25.889 --> 00:03:31.079
iterates out a table for us of all the
products. Now considering that this is My
39

40
00:03:31.079 --> 00:03:39.209
SQL to enable MySQL for this, I had to
bring in the jar dependency and the Maven
40

41
00:03:39.209 --> 00:03:46.169
POM for MySQL to set up that connector
and then for Spring Boot, the application
41

42
00:03:46.169 --> 00:03:49.290
.properties we need to set up a few
things here that are going to be
42

43
00:03:49.290 --> 00:03:54.569
important for you I have to set up for
years so they're on line 5, I'm
43

44
00:03:54.569 --> 00:03:59.549
setting up the Spring Data source URL
and this is the URL for your database to
44

45
00:03:59.549 --> 00:04:05.729
your MySQL database and in this case I
am running against localhost and the
45

46
00:04:05.729 --> 00:04:13.349
typical port for MySQL is 3306 and I am
connecting to a database called spring
46

47
00:04:13.349 --> 00:04:18.750
boot_mysql_example so you will want to change that
47

48
00:04:18.750 --> 00:04:23.400
property to whatever database you are
connecting to. A couple of other tricks
48

49
00:04:23.400 --> 00:04:29.790
here for the Spring Boot settings on line 10
11 and 12 are some things to
49

50
00:04:29.790 --> 00:04:34.980
keep the data source connection alive
where or it will issue a periodic query
50

51
00:04:34.980 --> 00:04:39.210
with MySQL sometimes they will
actually drop out the connection if
51

52
00:04:39.210 --> 00:04:43.889
you're idle for a while so this is a
trick to keep the database connection
52

53
00:04:43.889 --> 00:04:52.169
alive and then here on line 17, I am
setting a property show-sql so we will
53

54
00:04:52.169 --> 00:04:56.790
see the SQL and the console output and
if you're familiar with Hibernate on
54

55
00:04:56.790 --> 00:05:03.690
line 20 we are setting the ddl-auto and
we are setting it to create-drop. Now if
55

56
00:05:03.690 --> 00:05:07.020
you're using this against a production
database, I recommend doing something
56

57
00:05:07.020 --> 00:05:12.090
like validate because the create-drop
is destructive it will recreate the
57

58
00:05:12.090 --> 00:05:17.550
database with every time so if you're in
development sometimes it's easy to get
58

59
00:05:17.550 --> 00:05:22.830
away with update and any updates to the
database structure will get made on
59

60
00:05:22.830 --> 00:05:27.510
startup but if you're running in
production normally you are going to be
60

61
00:05:27.510 --> 00:05:32.270
using validate to make sure that the
data structure is matching your JPA
61

62
00:05:32.270 --> 00:05:39.060
structure and then finally I am using
the more recent version of Spring Boot
62

63
00:05:39.060 --> 00:05:45.599
and it is using Hibernate 5 and in
Hibernate 5 the naming strategy change
63

64
00:05:45.599 --> 00:05:52.889
and on lines 22 and 23 I am setting that
naming strategy and then finally I'm
64

65
00:05:52.889 --> 00:05:59.190
on line 25 we are setting the hibernate
dialect for MySQL 5 so let's go ahead
65

66
00:05:59.190 --> 00:06:03.660
and run this now and I'll show you the
application so I'm going to come up here.
66

67
00:06:03.660 --> 00:06:11.130
Don't want to do the test,
I am going to run this. I'm running the
67

68
00:06:11.130 --> 00:06:17.070
main class if you're not familiar with Spring
Boot SpringBoodApplication has a Java
68

69
00:06:17.070 --> 00:06:22.680
main and we see that we started up here
everything connected fine we are
69

70
00:06:22.680 --> 00:06:29.070
connecting to MySQL, it did run the
schema export and we can see that
70

71
00:06:29.070 --> 00:06:33.810
because we have the Hibernate SQL being
shown, we're showing that it's dropping
71

72
00:06:33.810 --> 00:06:39.630
the table that exists and also
recreating it based on our JPA mappings.
72

73
00:06:39.630 --> 00:06:46.170
Now let's toggle over and I'll do a
quick demonstration of this so I got up
73

74
00:06:46.170 --> 00:06:54.090
up here and see if I come in here, does
the redirect product/list, I can do a new
74

75
00:06:54.090 --> 00:07:02.190
product. So the description,
123 for price some URL, I'm
75

76
00:07:02.190 --> 00:07:06.900
not doing any data validation, this is
just a real simplistic example to see
76

77
00:07:06.900 --> 00:07:13.130
that we are in fact persisting data and
if I come back to the list function
77

78
00:07:13.130 --> 00:07:22.140
you'll see that it did in fact do that. I
can actually come in and edit this and
78

79
00:07:22.140 --> 00:07:28.860
you see that the edits took, I can come back
to the list as well and of course delete
79

80
00:07:28.860 --> 00:07:34.650
would work too and come back over here
and you can see that activity the SQL
80

81
00:07:34.650 --> 00:07:39.780
that were issued by Hibernate, again this
is Hibernate 5 this is SQL that was
81

82
00:07:39.780 --> 00:07:44.640
generated by Hibernate based on my JPA
mappings and what I was doing in the
82

83
00:07:44.640 --> 00:07:50.310
Spring Boot web application and again if
you want the source code for this head
83

84
00:07:50.310 --> 00:07:56.460
on over to GitHub my name is under
GitHub springframeworkguru and the
84

85
00:07:56.460 --> 00:08:04.520
repository is spring-boot-mysql-example
