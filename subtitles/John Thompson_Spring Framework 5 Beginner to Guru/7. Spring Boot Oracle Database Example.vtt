WEBVTT
0
1
00:00:02.290 --> 00:00:07.549
Okay I have an example of using Spring
Boot with Oracle here so there's a
1

2
00:00:07.549 --> 00:00:12.650
little bit of prep that we need to do
for this one is to get the Oracle
2

3
00:00:12.650 --> 00:00:19.699
database going and I am actually running
Oracle 12c via VirtualBox and this
3

4
00:00:19.699 --> 00:00:23.240
is something that you can download for
free and utilize for your development
4

5
00:00:23.240 --> 00:00:31.759
see down here and I do have a VirtualBox
cooking, I'll show you the right window so
5

6
00:00:31.759 --> 00:00:36.830
here's the Oracle VM running in
VirtualBox which gives me a 12c database
6

7
00:00:36.830 --> 00:00:42.350
to work with it's kind of a convenient
way to bring up Oracle on your
7

8
00:00:42.350 --> 00:00:48.110
local system for for development. Go to
the Oracle page download that you'll
8

9
00:00:48.110 --> 00:00:52.640
need to accept Oracle's licensing
agreements of course. It's a little beefy
9

10
00:00:52.640 --> 00:00:59.420
but they do recommend a Giga memory I'm
not running that I think I gave it to
10

11
00:00:59.420 --> 00:01:03.290
maybe four gig and it's up and running
fine it's not something that you'd want
11

12
00:01:03.290 --> 00:01:08.659
to use for any type of production type
stuff but it is working for that so the
12

13
00:01:08.659 --> 00:01:13.600
source code for this example is going to
be up on GitHub under
13

14
00:01:13.600 --> 00:01:16.700
github/springframeworkguru
14

15
00:01:16.700 --> 00:01:22.159
and the repository
name is spring-boot-oracle-example.
15

16
00:01:22.159 --> 00:01:28.310
So on this I do have a README here,
another thing that we need to do for
16

17
00:01:28.310 --> 00:01:33.619
preparations is downloading the Oracle
JDBC driver and it's something that I
17

18
00:01:33.619 --> 00:01:39.889
had to go through to get the proper
driver version installed. If
18

19
00:01:39.889 --> 00:01:46.729
you Google out the driver, you want this
JDBC thin driver. Oracle offers a lot of
19

20
00:01:46.729 --> 00:01:54.229
options for the JDBC drivers, 95% of time the light JDBC jar 7
20

21
00:01:54.229 --> 00:01:59.149
is going to be just fine for what you need. But
Oracle makes you go through all this so
21

22
00:01:59.149 --> 00:02:03.189
you can click on this thing here and say
that you accept their license agreement.
22

23
00:02:03.189 --> 00:02:08.890
That is rather annoying Oracle
Corporation because the driver is not
23

24
00:02:08.890 --> 00:02:14.299
available in public Maven repos so
because Oracle wants you to accept their
24

25
00:02:14.299 --> 00:02:18.140
license agreement and
click and then sign-in and sign-out that
25

26
00:02:18.140 --> 00:02:23.150
you are accepting Oracle's terms, you
have to go through this. You can download
26

27
00:02:23.150 --> 00:02:28.730
it to your system and then install it. Now if you are in a company where you
27

28
00:02:28.730 --> 00:02:34.700
are running your own Maven repository
such as artifactory or possibly Nexus
28

29
00:02:34.700 --> 00:02:39.260
you can upload this jar there and then
your builds will function normally that's
29

30
00:02:39.260 --> 00:02:43.970
what companies normally do but if you're
a private developer on your own this
30

31
00:02:43.970 --> 00:02:47.870
Maven command here you can download
the jar upload it to your local Maven
31

32
00:02:47.870 --> 00:02:53.810
repository and then things will be happy
for your project to build and run. So I'm
32

33
00:02:53.810 --> 00:03:00.290
going to jump over to IntelliJ and start
stepping through this so the Oracle
33

34
00:03:00.290 --> 00:03:06.980
stuff that we need to set up, we need to
setup on line 5 the data source URL and
34

35
00:03:06.980 --> 00:03:12.610
if you're going to follow along exactly
with me localhost 1521 for the port and
35

36
00:03:12.610 --> 00:03:22.010
Oracle 12c for the CID. The orcl12c,
so it's kind of hard to see there the
36

37
00:03:22.010 --> 00:03:31.000
the l and the one, pretty similar
but that is orcl12c for Oracle 12c.
37

38
00:03:31.000 --> 00:03:38.720
Now I am using the account system and
any Oracle DBA watching this would
38

39
00:03:38.720 --> 00:03:42.800
probably freak but that is the most
powerful account in an Oracle database.
39

40
00:03:42.800 --> 00:03:47.660
I'm not setting up a service account if
this was a production application I'd
40

41
00:03:47.660 --> 00:03:52.280
say definitely set up a service account,
do not use what equipment is the
41

42
00:03:52.280 --> 00:03:56.620
equivalent of a root account for a web
application, that would be very bad.
42

43
00:03:56.620 --> 00:04:01.250
Oracle has got some outstanding security
features so I'm just taking a shortcut
43

44
00:04:01.250 --> 00:04:06.440
because I'm using SVM here and I can trash
and do whatever I want to. So system
44

45
00:04:06.440 --> 00:04:13.910
Oracle the image downloaded from Oracle,
all the passwords will be default to Oracle
45

46
00:04:13.910 --> 00:04:21.380
and if you're an old Oracle guy like I am
it used to be System Manager so you'll
46

47
00:04:21.380 --> 00:04:24.919
see a lot of that out on Oracle
instances but Oracle has been changing
47

48
00:04:24.919 --> 00:04:29.580
that in the last few years so
in this case it is system Oracle
48

49
00:04:29.580 --> 00:04:35.250
for the password and a couple things
here that we're keeping the connection
49

50
00:04:35.250 --> 00:04:42.060
alive we are telling Spring JPA to show
SQL and then we also have a create drop
50

51
00:04:42.060 --> 00:04:49.469
strategy for the database and I just
realized I had a bad naming strategy
51

52
00:04:49.469 --> 00:04:55.139
here updating that on the fly here these
have changed, I stole it from another
52

53
00:04:55.139 --> 00:04:59.629
project cutting and pasting in here, so these naming strategies implicit and
53

54
00:04:59.629 --> 00:05:04.259
physical have changed with Hibernate
5 . So that what I had in there was old
54

55
00:05:04.259 --> 00:05:11.250
this is now current and we are using the
Oracle10gDialect for the Oracle and
55

56
00:05:11.250 --> 00:05:18.000
this is what configures Hibernate to
talk to Oracle's flavor of SQL so there
56

57
00:05:18.000 --> 00:05:21.750
is ANSI SQL out there everybody's a
little bit different so this is what
57

58
00:05:21.750 --> 00:05:24.569
configures Hibernate for that. So let's
go ahead and step through this
58

59
00:05:24.569 --> 00:05:32.419
application now. So I will start up from
the domain object so we have an Entity,
59

60
00:05:32.419 --> 00:05:40.710
JPA Entity, persistence ID, we want to clear that, go
ahead and import that so we don't have
60

61
00:05:40.710 --> 00:05:46.589
that ugliness there and then GenerationType of AUTO so this is going to be
61

62
00:05:46.589 --> 00:05:50.669
managed by Hibernate. So Hibernate will be generating the ID
62

63
00:05:50.669 --> 00:05:56.189
value so we have a pretty simple example
here so we have an id, description, price
63

64
00:05:56.189 --> 00:06:02.669
for our "product" so
pretty simple example of a product and
64

65
00:06:02.669 --> 00:06:08.129
what we want to do is set up a Spring
application for that so we'll go up the
65

66
00:06:08.129 --> 00:06:11.699
food chain of this so we are using
Spring Data JPA
66

67
00:06:11.699 --> 00:06:16.289
I am declaring a CrudRepository which
will give us CRUD operations right out
67

68
00:06:16.289 --> 00:06:21.900
of that and I'm telling this to using
Java generics to use Product and Long
68

69
00:06:21.900 --> 00:06:28.800
for the ID and this sets things up so we
can get Spring Data JPA to provide us an
69

70
00:06:28.800 --> 00:06:33.659
implementation so or to note if you're
not used to Spring Data by
70

71
00:06:33.659 --> 00:06:38.599
declaring the repository interface at
runtime Spring will provide us an
71

72
00:06:38.599 --> 00:06:41.940
instance of
that and it gets fired into our classes. So we
72

73
00:06:41.940 --> 00:06:46.830
just provide the interface and then
Spring Data will give us the runtime
73

74
00:06:46.830 --> 00:06:52.230
for that. Now
I do grab the repository up in a service
74

75
00:06:52.230 --> 00:06:58.490
so I'd like to have a service layer
that sits between the controller and the
75

76
00:06:58.490 --> 00:07:03.360
database layer. So all the business logic
should happen inside the service layer
76

77
00:07:03.360 --> 00:07:08.700
it keeps your controller very clean by
doing this you can see that I have set
77

78
00:07:08.700 --> 00:07:13.500
up variety of methods that we are going
to use to support CRUD operation. So we
78

79
00:07:13.500 --> 00:07:18.720
have listing products, getting a specific
product, deleting product, so this all
79

80
00:07:18.720 --> 00:07:23.790
CRUD type operations that we can use
with it and you can also see that I have
80

81
00:07:23.790 --> 00:07:29.910
a converter object in this, so let's go
take a look at that. So I have Product
81

82
00:07:29.910 --> 00:07:33.750
and I have ProductForm so I have
converters. I'm using the Spring
82

83
00:07:33.750 --> 00:07:38.280
standard converter class to convert one
to the other it gives you a nice spot
83

84
00:07:38.280 --> 00:07:42.300
where your logic is all self-contained
in a single class, good old single
84

85
00:07:42.300 --> 00:07:46.350
responsibility principle, your classes
should have one functional life that's
85

86
00:07:46.350 --> 00:07:49.710
what makes a converter pattern quite
nice and then Spring will manage the
86

87
00:07:49.710 --> 00:07:56.130
objects for us. So next thing let's take
a look at the controller so I have a
87

88
00:07:56.130 --> 00:08:02.760
ProductController and this takes in my
ProductService and notice I'm using the
88

89
00:08:02.760 --> 00:08:06.510
interface and not the implementation so
if I want to set up unit tests for this
89

90
00:08:06.510 --> 00:08:11.010
it'll go ahead and utilize that. I'm not
going to get into all the Spring
90

91
00:08:11.010 --> 00:08:15.960
specific MVC mapping. So this is a
typical Spring controller. You can see
91

92
00:08:15.960 --> 00:08:21.300
that for product or produc/ list I'm
going to return back a list of products
92

93
00:08:21.300 --> 00:08:29.220
and I have the ability to show a single
product, edit, create a new product and
93

94
00:08:29.220 --> 00:08:34.770
then here is my saveOrUpdate. So this is
what will accept a form post and I'm
94

95
00:08:34.770 --> 00:08:39.210
expecting a ProductForm to come in and
then I will persist that using the
95

96
00:08:39.210 --> 00:08:44.970
ProductService and then finally we have
a delete action so I can run I guess a
96

97
00:08:44.970 --> 00:08:50.740
delete URL and then delete from that
and then it will delete and redirect to
97

98
00:08:50.740 --> 00:08:58.480
the list and let's take a look at the
templates. So that is a controller I am
98

99
00:08:58.480 --> 00:09:05.019
using Thymeleaf here. So we'll take a
quick look at this, this is a Thymeleaf
99

100
00:09:05.019 --> 00:09:09.699
template you can see up here I just
declared the XML namespace for Thymeleaf
100

101
00:09:09.699 --> 00:09:15.309
using standard HTML 5 here. I'm not going
to get into a lot of specifics of Thymeleaf
101

102
00:09:15.309 --> 00:09:19.449
in here. I have a whole course on
Thymeleaf so if you want them to learn a
102

103
00:09:19.449 --> 00:09:25.029
lot more about Thymeleaf go check out
that course but here I am listing out
103

104
00:09:25.029 --> 00:09:29.589
products so I'll show you what's going
on here line 19 the controller is going
104

105
00:09:29.589 --> 00:09:34.990
to return back a list of products and
then I will iterate through the list of
105

106
00:09:34.990 --> 00:09:39.759
products to render a table of products
so that's what's going on here. Product
106

107
00:09:39.759 --> 00:09:47.170
Form, pretty similar, standard HTML stuff
but I'm using Thymeleaf to show the
107

108
00:09:47.170 --> 00:09:52.029
ProductForm, it will be empty if it's a
new product or it will be pre-populated
108

109
00:09:52.029 --> 00:09:59.620
if I'm editing and then finally we have
the show HTML for Thymeleaf which
109

110
00:09:59.620 --> 00:10:04.180
will show a product ID and we can see
that Thymeleaf here, this section code
110

111
00:10:04.180 --> 00:10:09.970
here would bind out the product ID to a
value on the show display of the HTML. So
111

112
00:10:09.970 --> 00:10:14.230
let's go ahead and run this. I'm going to
bring this up and important to note that
112

113
00:10:14.230 --> 00:10:19.089
I do have Oracle running and the VM
behind it so it's going to come up and
113

114
00:10:19.089 --> 00:10:25.959
connect to Oracle and because of the way
it's set up it will create that product
114

115
00:10:25.959 --> 00:10:33.819
table on startup. So I'm going to come
back over to Chrome refresh this, have no
115

116
00:10:33.819 --> 00:10:41.139
products in the product list so let's
call this test 1, price it to
116

117
00:10:41.139 --> 00:10:47.350
$22, some URL. Now I'm not
doing any validations here, it's pretty
117

118
00:10:47.350 --> 00:10:53.490
simple so I can see that product was
created so I'm going to go back here
118

119
00:10:53.490 --> 00:11:00.809
that shows me the product list, let's
create test2
119

120
00:11:05.089 --> 00:11:10.800
and if I come back to the product/list
again you can see that I have two
120

121
00:11:10.800 --> 00:11:19.380
products out there I can come in and
edit, let's call them test222
121

122
00:11:19.380 --> 00:11:24.990
and I have things set up here so down in
the bottom this is the Spring Boot
122

123
00:11:24.990 --> 00:11:31.550
output and I am outputting the SQL so
when I hit submit you can see that the
123

124
00:11:31.550 --> 00:11:40.949
SQL was sent out to the console and we
can see that it was updated and finally
124

125
00:11:40.949 --> 00:11:46.440
let's go ahead and delete that second
one and see he deleted it, actually was
125

126
00:11:46.440 --> 00:11:54.660
deleted. So this is being persisted
to to Oracle, again just a recap all
126

127
00:11:54.660 --> 00:12:00.360
source code is up on GitHub at /springframeworkguru/spring-
127

128
00:12:00.360 --> 00:12:06.420
boot-oracle-example. If you need a
instance of Oracle you can download the
128

129
00:12:06.420 --> 00:12:11.100
VirtualBox Oracle instance, comes all
pre-configured right out-of-the-box you
129

130
00:12:11.100 --> 00:12:14.790
can get it working and then the other
annoying nuance about working with
130

131
00:12:14.790 --> 00:12:19.380
Oracle is you have to download and
accept their license agreement and if
131

132
00:12:19.380 --> 00:12:25.860
you forget the command to upload the
Oracle JDBC drivers here is the Maven
132

133
00:12:25.860 --> 00:12:31.889
command right here to install the Oracle
jar on your local Maven repository. I
133

134
00:12:31.889 --> 00:12:36.149
hope that you found this example of
Oracle helpful, please leave a comment on
134

135
00:12:36.149 --> 00:12:39.260
this video if you did.
