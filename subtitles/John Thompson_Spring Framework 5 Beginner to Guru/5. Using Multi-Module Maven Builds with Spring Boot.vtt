WEBVTT
0
1
00:00:04.220 --> 00:00:10.710
Alright! I have refactored the project
to a Multi Module Maven project, and I
1

2
00:00:10.710 --> 00:00:13.769
decided to do this as a code review,
because when you start refactoring this,
2

3
00:00:13.769 --> 00:00:19.020
things don't always go perfectly right.
So, it can get a little bit tricky, but it
3

4
00:00:19.020 --> 00:00:23.609
actually wasn't too bad. I've done this a
lot. If you are new to Maven
4

5
00:00:23.609 --> 00:00:28.529
or don't have a lot of experience
with Maven, I imagine this would be get a
5

6
00:00:28.529 --> 00:00:33.480
little hairy for you to reflect or
something like this, because Maven is
6

7
00:00:33.480 --> 00:00:37.440
something I've worked with for quite
some time, longer than I want to admit. But, at
7

8
00:00:37.440 --> 00:00:40.829
the end of day, Maven is a really great
build tool. It's like a comfortable shoe
8

9
00:00:40.829 --> 00:00:46.770
for me. So, I'm going to step you through
a code review on this, so you'll be able
9

10
00:00:46.770 --> 00:00:51.449
to go ahead and contrast this. Let
give you a little tour here. So, we did
10

11
00:00:51.449 --> 00:00:56.250
have the spring5-mvc-rest. That was the
root of our project, and now, I've added
11

12
00:00:56.250 --> 00:01:03.210
in, we have two modules - rest-model and
spring5-mvc-rest-app. So, that's
12

13
00:01:03.210 --> 00:01:08.310
our Spring Boot Application. rest-model
only has the XSD in it. I'm not going to
13

14
00:01:08.310 --> 00:01:12.150
configure JAXB in this video. I'm going
to focus on the refactoring to a multi
14

15
00:01:12.150 --> 00:01:16.680
module project. So, that's really the
important part. I want you to get some
15

16
00:01:16.680 --> 00:01:21.299
hands-on with Maven. If you're
comfortable with Maven, go ahead and
16

17
00:01:21.299 --> 00:01:24.840
skip to the next video because the rest
of this video is going to be focused on
17

18
00:01:24.840 --> 00:01:32.310
multi module projects with Maven and how
we do that Spring build. So, we can see
18

19
00:01:32.310 --> 00:01:36.930
here, I've got the the REST parent, so
this is a parent POM. This has changed
19

20
00:01:36.930 --> 00:01:40.930
some. I want to go ahead and see if
I can
20

21
00:01:40.930 --> 00:01:46.150
prepare the same repository version. That
should do it. Okay, so we got a good
21

22
00:01:46.150 --> 00:01:50.440
compare here. So, I'm just comparing
against the current repository version,
22

23
00:01:50.440 --> 00:01:55.060
which would be their original. We can
see that the one thing that I did change
23

24
00:01:55.060 --> 00:01:59.950
is a package names, groupId. I had
springfamework. I was missing the R
24

25
00:01:59.950 --> 00:02:05.229
in framework. I've refactored that. So, you
can see that on line 6 there. Now, I
25

26
00:02:05.229 --> 00:02:12.940
changed the artifactId from REST Spring
MVC. REST to REST Parent. I added a dash
26

27
00:02:12.940 --> 00:02:17.920
parent there to make this a parent POM
to have that, and then, changed the
27

28
00:02:17.920 --> 00:02:23.320
packaging to POM. So, POM stands for
Project Object Model. That's a Maven
28

29
00:02:23.320 --> 00:02:29.019
thing. I made some updates there, and
then, a very important one here, you can
29

30
00:02:29.019 --> 00:02:34.480
see on 21 to 25 on the right-hand screen,
this part of the screen, I've added in a
30

31
00:02:34.480 --> 00:02:38.800
section called modules. And now, I have
two modules. I'm declaring the rest
31

32
00:02:38.800 --> 00:02:45.700
module and the spring5-mvc-rest-app. 
Now, you can see here the dependencies.
32

33
00:02:45.700 --> 00:02:51.579
I've completely omitted that from the
parent POM, and the reason I've done that,
33

34
00:02:51.579 --> 00:02:56.650
the quick rule of thumb is if I have
multiple modules and I have a dependency
34

35
00:02:56.650 --> 00:03:01.180
that's going to be shared amongst those,
I will declare it in the parent. But, if
35

36
00:03:01.180 --> 00:03:04.239
it's not going to be shared,
I don't declare it. Now, remember that
36

37
00:03:04.239 --> 00:03:09.670
your POMs do inherit from each other. So,
it is an object model so you are
37

38
00:03:09.670 --> 00:03:14.380
inheriting it. You're like extending out
these classes so you can rely on Maven
38

39
00:03:14.380 --> 00:03:19.690
to inherit properties and dependencies
and things from the parent. So, you can
39

40
00:03:19.690 --> 00:03:26.680
see on the left there, that is the before
and so that's all been emitted, and now
40

41
00:03:26.680 --> 00:03:31.810
that the last big piece of the puzzle is
I do have repositories and plug-in
41

42
00:03:31.810 --> 00:03:36.190
repositories. This is bringing in this
snapshots of milestones. Right now, I
42

43
00:03:36.190 --> 00:03:41.500
am on a milestone release
M7 of Spring Boot. That is why I
43

44
00:03:41.500 --> 00:03:47.590
need these. Now, once I get to a GA
release, these can be deleted from it. So,
44

45
00:03:47.590 --> 00:03:51.490
we are a little bit on the bleeding edge
right now. Working out a
45

46
00:03:51.490 --> 00:03:56.020
milestone release of Spring 5. You've
noticed ringing in GA releases a Spring
46

47
00:03:56.020 --> 00:04:00.640
Framework. Spring Boot is still in a
milestone stage. I'm recording this in
47

48
00:04:00.640 --> 00:04:05.140
mid January, and we are supposed to have
the first release candidate coming out
48

49
00:04:05.140 --> 00:04:11.380
soon. Only closed this.
I think officially January 25th, which is
49

50
00:04:11.380 --> 00:04:17.890
just a few days from now. So, let's take a
quick look at the rest model first. This
50

51
00:04:17.890 --> 00:04:24.160
is the simplest one. I am declaring it
So, I'm even saying that. I could
51

52
00:04:24.160 --> 00:04:29.320
even delete this because that is getting
inherited. So, thank you IntelliJ. Cleaned
52

53
00:04:29.320 --> 00:04:34.810
that up and it turned off auto import
while I was doing everything. So, if when
53

54
00:04:34.810 --> 00:04:39.910
you update this, if IntelliJ should lose
its mind, a quick tip is to come in here
54

55
00:04:39.910 --> 00:04:45.550
and run and validate caches and restart,
because we are juggling things around
55

56
00:04:45.550 --> 00:04:48.580
quite a bit, so intelligent could get
confused. I wouldn't be surprised if
56

57
00:04:48.580 --> 00:04:54.970
someone you need to do this. I did not
have to do it. So, this project here, we
57

58
00:04:54.970 --> 00:05:00.580
have it in the one resource class. That's
our customer.xsd that we created in
58

59
00:05:00.580 --> 00:05:05.830
the last one. We are going to configure
this module to use JAXB to generate
59

60
00:05:05.830 --> 00:05:09.700
Java code from that. We are not going to
do that in this video, but this is the
60

61
00:05:09.700 --> 00:05:16.750
module that we are going to do it in. Now,
this is our Spring Boot application. This
61

62
00:05:16.750 --> 00:05:24.010
lived previously at Spring MVC REST. Now,
I've moved the code up to its own module
62

63
00:05:24.010 --> 00:05:30.610
under spring5-mvc-rest-app. It's the
same stuff that we had before, with the
63

64
00:05:30.610 --> 00:05:36.370
exception, I renamed the package from
springfamework to springframework. Now,
64

65
00:05:36.370 --> 00:05:40.440
let's take a look at the pom on this one.
This one, just like before, we can also
65

66
00:05:40.440 --> 00:05:46.740
whack that groupId
and I'm going to re-enable auto import.
66

67
00:05:46.740 --> 00:05:51.840
So now, ought to keep clicking that and with
every pom change. Now, this one here, I
67

68
00:05:51.840 --> 00:05:58.890
see these properties could get inherited.
So, I am going to go ahead and delete
68

69
00:05:58.890 --> 00:06:03.270
these because these would override. 
These properties will still be available.
69

70
00:06:03.270 --> 00:06:07.050
Again, I'm going to inherit from the
parent POM. I don't need to declare
70

71
00:06:07.050 --> 00:06:12.210
them and the child here. Now, I'm
declaring a bunch of dependencies here.
71

72
00:06:12.210 --> 00:06:16.500
Now remember, the parent POM is
inheriting from the Spring Boot parent
72

73
00:06:16.500 --> 00:06:20.760
POM. So, I'm getting get all the
dependency information there. One thing I
73

74
00:06:20.760 --> 00:06:24.570
don't think I called out before though,
Woodstock, I did need added in a
74

75
00:06:24.570 --> 00:06:29.280
dependency on that. Looks like the Spring
is not curating that Java dependency. So,
75

76
00:06:29.280 --> 00:06:33.060
I do need a version number there. The
rest are going to be inherited from the
76

77
00:06:33.060 --> 00:06:37.410
Spring Boot Parent POM but they
accepted a Mapstruct. We moved that out
77

78
00:06:37.410 --> 00:06:41.910
to property and also Swagger. But these
are the same dependencies that we had
78

79
00:06:41.910 --> 00:06:49.039
before. I did not change anything at all.
So, this all happy. It's all using all
79

80
00:06:49.039 --> 00:06:53.719
the same plugins. I move the plugins here.
These are not going to be utilized by
80

81
00:06:53.719 --> 00:06:58.959
the other project. So, this is all the
same as to what we had before, and
81

82
00:06:58.959 --> 00:07:04.789
actually, I can get rid of these
repositories because those also will be
82

83
00:07:04.789 --> 00:07:10.939
inherited from the parent. So now, over
here, on the right hand side in the
83

84
00:07:10.939 --> 00:07:17.359
Maven projects, you can see that I have
two Spring MVC REST. I
84

85
00:07:17.359 --> 00:07:19.839
renamed you.
85

86
00:07:20.340 --> 00:07:23.780
That's where that's coming from.
86

87
00:07:23.970 --> 00:07:27.860
Now you can see that that name
changed there. That was coming off the name of that
87

88
00:07:27.860 --> 00:07:32.630
rather than that artifactId. So, here's
my modules name, and you can see this one
88

89
00:07:32.630 --> 00:07:39.020
has root next to it, so let's go ahead
and open that up and run it clean.
89

90
00:07:39.020 --> 00:07:43.069
We can see now that we have the 
different dependencies here. Let's go
90

91
00:07:43.069 --> 00:07:45.819
ahead and package it.
91

92
00:07:47.810 --> 00:07:52.220
See that we are going through the
compiled step. This is going to run
92

93
00:07:52.220 --> 00:08:00.440
the package goal against each module. So,
the parent, the model, and also the spring5
93

94
00:08:00.440 --> 00:08:04.910
mvc-rest-app. So,
effectively, three of them will run. Now,
94

95
00:08:04.910 --> 00:08:10.700
we can see here, the parent ran and the
model, then the rest. That was just by
95

96
00:08:10.700 --> 00:08:16.070
sheer luck that model ran before rest.
Because right now, the rest does not have
96

97
00:08:16.070 --> 00:08:18.890
a model.
So, technically, Maven could have picked
97

98
00:08:18.890 --> 00:08:22.280
those either way. Just happen to pick it
to run that way.
98

99
00:08:22.280 --> 00:08:28.880
Now, once we go in and configure our
JAXB generation, we are going to put a
99

100
00:08:28.880 --> 00:08:35.330
dependency in the rest app. So, we will
tell the rest app that we want to
100

101
00:08:35.330 --> 00:08:40.729
include the jar in from the rest model
module. So, we'll do that in an
101

102
00:08:40.729 --> 00:08:46.640
upcoming video. But now, you can see that
we do have a Multi Module Maven Build.
102

103
00:08:46.640 --> 00:08:51.680
And just to recap, so you understand
exactly what's happening here, because
103

104
00:08:51.680 --> 00:08:58.490
there's a lot of inheritance going on.
Ultimately, we are going from the Spring
104

105
00:08:58.490 --> 00:09:04.970
Boot Starter Parent. I don't know if we
can jump to the source. Okay, so we are
105

106
00:09:04.970 --> 00:09:11.120
jumping to the source here, and you can
see, IntelliJ is going to use users home
106

107
00:09:11.120 --> 00:09:16.610
.m2 repository. So, that is a
Maven repository. So, this is an image
107

108
00:09:16.610 --> 00:09:21.080
kept on my local hard drive, and now, we
are looking at. So, this is the parent
108

109
00:09:21.080 --> 00:09:26.720
POM that we are inheriting from. So, you
can see that this gets one from Spring
109

110
00:09:26.720 --> 00:09:31.160
Boot Dependencies. So, if you ever want to
see what's going on in there, now you
110

111
00:09:31.160 --> 00:09:36.410
can see there's a lot of
jars being handled in that. So, our POM is
111

112
00:09:36.410 --> 00:09:41.030
inheriting from the starter POM, which is
an area from that POM. So right now, we
112

113
00:09:41.030 --> 00:09:45.520
have four or five different levels of
inheritance. Do we have another one.
113

114
00:09:45.520 --> 00:09:48.520
Just looking at it quickly. I don't think
so.
114

115
00:09:48.520 --> 00:09:53.830
Close properties.
So, you can see quite a bit
115

116
00:09:53.830 --> 00:09:57.610
happening there, as far as how the
dependencies are being handled. So, the
116

117
00:09:57.610 --> 00:10:01.210
important thing to keep in mind, how
dependencies are being inherited inside
117

118
00:10:01.210 --> 00:10:08.410
of Maven. So, we are inheriting from the
curated Spring. This is our POM, and now,
118

119
00:10:08.410 --> 00:10:14.830
our sub modules are also inheriting. So,
these guys inherit from its parent. Its
119

120
00:10:14.830 --> 00:10:19.600
parent inherits from its parent, and so
on. So, if you are not familiar with
120

121
00:10:19.600 --> 00:10:23.290
working with Maven, it's important to
understand how things inherit. Hopefully,
121

122
00:10:23.290 --> 00:10:27.940
this clears it up and it clears up what
we did and gives you some good hands-on
122

123
00:10:27.940 --> 00:10:32.890
experience with Multi Module Maven
Builds, because when you get in the
123

124
00:10:32.890 --> 00:10:38.640
Enterprise, I guarantee you're going to see
Multi Module Builds.
