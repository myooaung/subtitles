WEBVTT
0
1
00:00:04.310 --> 00:00:08.670
Alright, in this video we are going to
talk about data source initialization.
1

2
00:00:08.670 --> 00:00:12.840
Now Spring really has quite a few tools
that we can work with to initialize
2

3
00:00:12.840 --> 00:00:18.869
data sources. Now we are working towards
using Hibernate and traditional SQL data
3

4
00:00:18.869 --> 00:00:22.590
sources. So this will work with any
traditional relational database what
4

5
00:00:22.590 --> 00:00:28.109
we're going to cover in this video and
you do have quite a tool set here to
5

6
00:00:28.109 --> 00:00:31.619
work with. I'm just going to look at
initial data source initialization. Now
6

7
00:00:31.619 --> 00:00:36.719
what I mean by that is we need to create
the database structure so the tables, 
7

8
00:00:36.719 --> 00:00:41.239
the foreign keys and indexes and whatnot,
as well as we want to populate the
8

9
00:00:41.239 --> 00:00:46.110
database tables with some initial data. So there's a number of different ways
9

10
00:00:46.110 --> 00:00:49.620
that we can do it, but there's also some
pitfalls in there. So I'm going to go
10

11
00:00:49.620 --> 00:00:55.620
through a brief slide presentation and
show you about the tools that we have at
11

12
00:00:55.620 --> 00:01:02.039
our disposal between Hibernate and
Spring Boot and Spring JDBC. Gives us a
12

13
00:01:02.039 --> 00:01:06.210
pretty complete toolset that we can
utilize to work against multiple
13

14
00:01:06.210 --> 00:01:11.580
databases as we go through our
development lifecycle and then at the
14

15
00:01:11.580 --> 00:01:15.689
end of that, after the slideshow is
complete, I'll give you a quick
15

16
00:01:15.689 --> 00:01:20.280
demonstration inside of IntelliJ and we
will take a look at the data that gets
16

17
00:01:20.280 --> 00:01:28.310
loaded in the database and data that
gets loaded in an H2 in-memory database.
17

18
00:01:28.310 --> 00:01:34.290
Alright we want to talk about data
base initialization using Spring. There's actually
18

19
00:01:34.290 --> 00:01:37.770
a couple things that we need to
discuss here. One of them is the
19

20
00:01:37.770 --> 00:01:44.579
Hibernate DDL auto. Just as a reminder
DDL stands for Data Definition Language.
20

21
00:01:44.579 --> 00:01:50.310
So that's the type of SQL we're going to
use to define things like tables and
21

22
00:01:50.310 --> 00:01:54.570
indexes and whatnot, foreign key
relationships. So anything that deals
22

23
00:01:54.570 --> 00:01:59.520
with the actual data structure and this
is in contrast to DML which is Data
23

24
00:01:59.520 --> 00:02:03.420
Manipulation Language. This is going to
be your SQL statements that are doing
24

25
00:02:03.420 --> 00:02:09.440
database inserts, updates and deletes. So two different categories of SQL and
25

26
00:02:09.440 --> 00:02:15.570
the DDL auto is,
we have several options there and it's a
26

27
00:02:15.570 --> 00:02:20.400
Hibernate property. This is a Hibernate
specific thing. It is not specific to JPA.
27

28
00:02:20.400 --> 00:02:26.820
That's actually a Hibernate feature and
what it allows for, is the database be
28

29
00:02:26.820 --> 00:02:32.280
graded from your JPA entity classes and
we've been seeing that in action
29

30
00:02:32.280 --> 00:02:36.780
throughout the course where we've been
not actually creating the database, but
30

31
00:02:36.780 --> 00:02:41.850
allowing Hibernate to go out and create
the database. So we do have several
31

32
00:02:41.850 --> 00:02:48.570
options to work with. Now these options
are none, validate, update, create and
32

33
00:02:48.570 --> 00:02:53.760
create-drop. So when you're set to none,
nothing's going to happen so there's no
33

34
00:02:53.760 --> 00:02:59.760
DDL activity from Hibernate and it
doesn't verify the database structure
34

35
00:02:59.760 --> 00:03:05.060
either. Now when I'm running in
production, I prefer to use validate and
35

36
00:03:05.060 --> 00:03:10.710
that will fail the startup. So if
Hibernate is going to expect a table
36

37
00:03:10.710 --> 00:03:15.180
that will fail on startup if that table
is missing or a column in that table is
37

38
00:03:15.180 --> 00:03:17.670
missing. So that will fail your startup so I
38

39
00:03:17.670 --> 00:03:22.350
prefer not to get surprised if there is a
database problem compared to the JPA
39

40
00:03:22.350 --> 00:03:28.920
mappings. Now update will automatically
update an existing database schema. I say
40

41
00:03:28.920 --> 00:03:34.620
use this one with caution because if
your JPA model changes or if there's an
41

42
00:03:34.620 --> 00:03:41.670
error in it, Hibernate will run DDL
statements to update the database and if
42

43
00:03:41.670 --> 00:03:45.650
you're on a production system, this is
probably not a behavior you want and
43

44
00:03:45.650 --> 00:03:50.340
personally, if you are running in
production, ideally you're going to be
44

45
00:03:50.340 --> 00:03:56.580
using a service account that's going to
be limiting stuff to DML. So your
45

46
00:03:56.580 --> 00:04:01.800
production database users should not
have DDL capabilities. That's a
46

47
00:04:01.800 --> 00:04:07.560
pretty basic security thing to prevent
malicious activity against your database
47

48
00:04:07.560 --> 00:04:11.190
using the credentials of your
application. Now the other twos that we
48

49
00:04:11.190 --> 00:04:14.790
need to look at is create and drop. Create will do an initial database
49

50
00:04:14.790 --> 00:04:20.250
creation and then the difference with
create drop is what's going to happen
50

51
00:04:20.250 --> 00:04:26.490
there with a create drop is when you
shut down the database will get dropped.
51

52
00:04:26.490 --> 00:04:31.500
All the database schema objects
will get dropped and contrasted if you
52

53
00:04:31.500 --> 00:04:35.910
just have create and you're running
against MySQL and you go back and look,
53

54
00:04:35.910 --> 00:04:42.270
the database will still be there, where
with create-drop, it will be gone. Now Spring
54

55
00:04:42.270 --> 00:04:50.340
Boot by default, we've been using the
embedded H2 database and for HSQL, H2 and
55

56
00:04:50.340 --> 00:04:56.190
Derby, Apache Derby, Spring Boot is going
to use the create-drop option. Now if
56

57
00:04:56.190 --> 00:05:01.500
you're not using an embedded database it
is going to use none. So that is the
57

58
00:05:01.500 --> 00:05:04.740
default behavior of Spring Boot and
this is what's been creating the
58

59
00:05:04.740 --> 00:05:10.470
database for us. So we've been using H2
and it has been running in create-drop
59

60
00:05:10.470 --> 00:05:15.900
and you've been seeing the database
commence in the log file all along. Now
60

61
00:05:15.900 --> 00:05:21.180
we can also initialize the database
using Hibernate. This is a default
61

62
00:05:21.180 --> 00:05:27.419
property of Hibernate that's not Spring
specific and if we have a file called
62

63
00:05:27.419 --> 00:05:33.630
import SQL, and it exists on the root
of the class path, it will get executed
63

64
00:05:33.630 --> 00:05:38.909
if Hibernate's DDL auto property is set
to create or create-drop. So it
64

65
00:05:38.909 --> 00:05:47.190
automatically do this and that SQL
script can contain a combination of DDL
65

66
00:05:47.190 --> 00:05:52.110
and DML statements. So you can go in and
create the database with it and then
66

67
00:05:52.110 --> 00:05:56.969
load up initial data into the database. And this is a little bit different than
67

68
00:05:56.969 --> 00:06:04.020
what Spring Boot offers. So in Spring
JDBC, we get a data source initializer.
68

69
00:06:04.020 --> 00:06:10.469
This is a Spring JDBC property but
Spring Boot will by default utilize the
69

70
00:06:10.469 --> 00:06:17.940
data source initializer and it will load
up a schema from schema.sql and then data from
70

71
00:06:17.940 --> 00:06:26.250
data.sql. Now Spring Boot can also load
platform-specific SQL files and this is
71

72
00:06:26.250 --> 00:06:30.270
going to be schema -${platform}.sql
or
72

73
00:06:30.270 --> 00:06:36.449
data-${platform}.sql and you must set the
property spring.datasource.platform. I
73

74
00:06:36.449 --> 00:06:40.300
remember when I first initially utilize
this, I thought
74

75
00:06:40.300 --> 00:06:44.099
Spring Boot was going to Auto configure
that property and that was not the case.
75

76
00:06:44.099 --> 00:06:49.870
Now one word of caution with all this, if
you're using the Spring Boot stuff and
76

77
00:06:49.870 --> 00:06:58.210
trying to use Hibernate's import.sql
it can get rather tricky. So I recommend
77

78
00:06:58.210 --> 00:07:03.629
trying to use this Spring Boot stuff or
the Spring Data source initializer and
78

79
00:07:03.629 --> 00:07:09.490
you really don't want to be using both
of them. You could, but it's a rather
79

80
00:07:09.490 --> 00:07:13.840
delicate dance to do to get them both
working. So I would recommend to use the
80

81
00:07:13.840 --> 00:07:19.990
Spring Data source initializer and get
the same functionality but you won't get
81

82
00:07:19.990 --> 00:07:26.259
a conflict. I've seen some really weird
stuff where if you are using Spring. I've
82

83
00:07:26.259 --> 00:07:30.430
seen people complain about the data
source tables getting created and then
83

84
00:07:30.430 --> 00:07:35.919
dropped and recreated. So you can get
some pretty weird stuff there. So you
84

85
00:07:35.919 --> 00:07:38.550
definitely want to be using one or the
other.
85

86
00:07:38.550 --> 00:07:45.039
Okay I've toggled over to IntelliJ and
I've created a file called data.sql and
86

87
00:07:45.039 --> 00:07:50.800
it's in resources here. We can see that
it is in resources data.sql and
87

88
00:07:50.800 --> 00:07:55.810
that will be loaded on the root of the
classpath. So this file will be eligible
88

89
00:07:55.810 --> 00:08:00.400
for being picked up by Spring Boot. So I
am using the Spring Boot, not the
89

90
00:08:00.400 --> 00:08:05.650
Hibernate flavor. And you can see I've
got about nine insert statements. So it's just
90

91
00:08:05.650 --> 00:08:11.710
standard SQL and I'm just setting the
description property and I'm going to
91

92
00:08:11.710 --> 00:08:18.129
come in and change a dialect here and
set that up to, we will use MySQL even
92

93
00:08:18.129 --> 00:08:23.379
though we are going towards against H2.
I'm going to use the MySQL dialect
93

94
00:08:23.379 --> 00:08:27.370
because ultimately down the road we will
get into MySQL. So I'm going to leave
94

95
00:08:27.370 --> 00:08:34.120
that there and then we will get into
configuring a data source later. So we
95

96
00:08:34.120 --> 00:08:38.589
have these nine insert statements here. So I am going to go ahead and run the
96

97
00:08:38.589 --> 00:08:44.440
application now and we can see that it
will start up pretty quick. This doesn't
97

98
00:08:44.440 --> 00:08:49.149
take much time at all to load up these
SQL statements. You can do quite a bit to
98

99
00:08:49.149 --> 00:08:53.580
be honest in this and you can see that
the
99

100
00:08:53.580 --> 00:08:57.300
statements were run and there was no
output so that this is not getting
100

101
00:08:57.300 --> 00:09:02.670
picked up by the SQL logging of
Hibernate, so when this runs. Now I'm going
101

102
00:09:02.670 --> 00:09:07.860
to toggle over to Chrome where I still
have the H2 database console up and
102

103
00:09:07.860 --> 00:09:13.500
click on connect there. I'm going to click on it
one more time since we restarted and we
103

104
00:09:13.500 --> 00:09:19.560
can examine the tables. Say run that
and we can see that my four values have
104

105
00:09:19.560 --> 00:09:25.380
been put into the description and ID
column was automatically generated. So
105

106
00:09:25.380 --> 00:09:29.190
that ID value is set there in the
primary key and I'm going to clear that
106

107
00:09:29.190 --> 00:09:36.480
and we will also take a look at unit of
measure and say run selected. And we can
107

108
00:09:36.480 --> 00:09:40.770
see that that is that. Now I do want to
point out that we are using the default
108

109
00:09:40.770 --> 00:09:48.180
naming strategy and Hibernate actually
has several naming strategies and we can
109

110
00:09:48.180 --> 00:09:54.480
see how we have camel cased UnitOfMeasure. So that is going to get
110

111
00:09:54.480 --> 00:10:02.130
converted to uppercase underscore naming
convention. So you can see. I'll show you. So we
111

112
00:10:02.130 --> 00:10:07.380
have unit underscore of underscore
measure and that is from the camel
112

113
00:10:07.380 --> 00:10:12.420
casing of the Java class. So this is one of the default naming strategies of
113

114
00:10:12.420 --> 00:10:18.300
Hibernate and that's how I know
the naming convention. So I was able to
114

115
00:10:18.300 --> 00:10:24.510
follow that and generally SQL is going
to be case insensitive for table and
115

116
00:10:24.510 --> 00:10:29.640
column names unless you make it
sensitive, which I will avoid doing
116

117
00:10:29.640 --> 00:10:35.010
before this because I personally believe
that your database columns and table
117

118
00:10:35.010 --> 00:10:38.940
names should be case insensitive. It
really causes a headache when you do
118

119
00:10:38.940 --> 00:10:43.860
make them sensitive and it's not very
consistent across databases. Alright
119

120
00:10:43.860 --> 00:10:47.280
you can see that we do have a pretty
diverse set of tools that we can utilize
120

121
00:10:47.280 --> 00:10:51.900
to initialize the data source for the
database that we are working against. Now
121

122
00:10:51.900 --> 00:10:56.820
you need to think about this in context. If you're are doing development chances
122

123
00:10:56.820 --> 00:11:00.150
or you going to run against an
in-memory data source at first and then
123

124
00:11:00.150 --> 00:11:06.730
probably MySQL or maybe Oracle or
hopefully not Microsoft's databases, but
124

125
00:11:06.730 --> 00:11:10.660
you can stay on a real database. But you
will probably go from an in-memory
125

126
00:11:10.660 --> 00:11:14.110
database while you're doing local
development to a permanent database.
126

127
00:11:14.110 --> 00:11:19.720
Something that's going to be on a database
server and like in your QA system or
127

128
00:11:19.720 --> 00:11:24.610
your production system. So these
settings will give you tools to work
128

129
00:11:24.610 --> 00:11:27.519
with that. So when you're in development
obviously you're going to be
129

130
00:11:27.519 --> 00:11:33.220
initializing data and the database
structure and production that's probably
130

131
00:11:33.220 --> 00:11:36.940
going to be locked down. So this gives us
different tool sets that we can utilize
131

132
00:11:36.940 --> 00:11:40.959
along the way. And when we get further
down in the course we are going to start
132

133
00:11:40.959 --> 00:11:45.130
using MySQL and I'll show you exactly
how to set all that up and you'll see
133

134
00:11:45.130 --> 00:11:49.540
how these tools can work together to
really give us a powerful tool set here
134

135
00:11:49.540 --> 00:11:52.980
for working with databases.
