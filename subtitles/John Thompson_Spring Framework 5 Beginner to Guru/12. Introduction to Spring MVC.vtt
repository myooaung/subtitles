WEBVTT
1
00:00:06.130 --> 00:00:06.740
OK.

2
00:00:06.760 --> 00:00:15.590
Spring uses a model called NBC and that stands for Model View Controller.

3
00:00:15.610 --> 00:00:19.270
So this is a very very common design pattern.

4
00:00:19.270 --> 00:00:26.560
It actually dates back to the 70s where I think it was a Xerox engineer created it and later the Smalltalk

5
00:00:26.560 --> 00:00:35.540
community spec in probably the 80s started picking up on it and it's been adapted widely since then.

6
00:00:35.980 --> 00:00:42.810
And this is not a spring specific technology by any means it's widely used and not Ruby on Rails and

7
00:00:43.090 --> 00:00:47.180
a lot of applications use this a lot of gooey applications use this.

8
00:00:47.320 --> 00:00:55.300
So traditional client server type stuff used it and it's definitely not a new paradigm at all but the

9
00:00:55.300 --> 00:01:00.400
reason it is so successful is it does a great job of separating out concerns.

10
00:01:00.430 --> 00:01:06.340
So what I want to do is step through how it works and in a conceptual level.

11
00:01:06.340 --> 00:01:13.810
Client whether it's a web application or a mobile application or some type of device but like a client

12
00:01:13.810 --> 00:01:18.840
server application makes a request and that request comes into the controller.

13
00:01:19.000 --> 00:01:26.510
And in our instance it's going to be over HDTV and that controller determines how to get the model.

14
00:01:26.540 --> 00:01:32.170
So that's going gonna go out and get the model and then return that model to the view.

15
00:01:32.390 --> 00:01:39.710
And this is a true separation of concerns because that model that's returned shouldn't have business

16
00:01:39.710 --> 00:01:40.490
logic in it.

17
00:01:40.850 --> 00:01:45.950
Ideally that should be plain old Java object if we're in the Java world so it should just be a data

18
00:01:45.950 --> 00:01:46.910
structure.

19
00:01:46.910 --> 00:01:50.080
The controller should be a traffic cop.

20
00:01:50.270 --> 00:01:53.370
He should be deciding how to get the model and who to ask the model from.

21
00:01:53.480 --> 00:01:54.700
And that should be it.

22
00:01:54.800 --> 00:02:00.760
I've seen a lot of bad code out there where the controllers overloaded with a lot of stuff on it.

23
00:02:00.800 --> 00:02:06.310
I mean I've seen like database connections get done in controllers which is just awful.

24
00:02:06.410 --> 00:02:09.140
A very very bad programming practice.

25
00:02:09.140 --> 00:02:10.250
So keep the controller light.

26
00:02:10.260 --> 00:02:11.970
It should be just a traffic cop.

27
00:02:12.290 --> 00:02:17.660
And then the controller is going to return the model to a view component.

28
00:02:17.660 --> 00:02:22.850
Now that view component whose purpose in life is to render the view for the client.

29
00:02:23.180 --> 00:02:29.750
So in our case we're going to be using timely templating engine timely to is going to take the model

30
00:02:29.860 --> 00:02:35.510
Pogo Joe and look at our template and generate the A.T.M. to return back to the client.

31
00:02:36.050 --> 00:02:42.410
So this all works transparently and it works out well because everything separated.

32
00:02:42.470 --> 00:02:48.590
I've seen instances where people try to put in static method calls inside the view layer that call to

33
00:02:48.590 --> 00:02:55.610
the database and that systems like that where things are separated become just a nightmare to to deal

34
00:02:55.610 --> 00:02:56.360
with.

35
00:02:56.470 --> 00:03:01.320
Now let's take a look at this in a spring context.

36
00:03:01.410 --> 00:03:07.530
So this is how Spring MVC models it and getting a little detail of what happens under the covers.

37
00:03:08.010 --> 00:03:14.580
So we'll get a client request come in and that could be typically GDP and it can be for a web page or

38
00:03:14.580 --> 00:03:17.290
it could be a rough service call.

39
00:03:17.340 --> 00:03:24.160
So not going to get into the details of that at this point but it's goes to a dispatcher's serval.

40
00:03:24.600 --> 00:03:27.690
So this is the classic Java server load architecture.

41
00:03:27.900 --> 00:03:35.250
So we get that web request comes in and it decides how to handle it and refers to the handler mapping

42
00:03:35.840 --> 00:03:40.320
because you're going to go to a specific path and you're making a request from a server.

43
00:03:40.320 --> 00:03:41.320
So now it goes.

44
00:03:41.350 --> 00:03:43.240
OK well where do I go for this.

45
00:03:43.260 --> 00:03:50.820
And it determines that determines the controller to utilize a controller method.

46
00:03:50.820 --> 00:03:57.300
Now the controller typically in a spring application is going to have some type of service layer wired

47
00:03:57.300 --> 00:04:03.330
up to it and that service layer is going to get the data and return it back to the controller and then

48
00:04:03.330 --> 00:04:10.080
the controller is going to take that data the model which is just a simple Pogo return it back to the

49
00:04:10.080 --> 00:04:11.410
dispatcher serve it.

50
00:04:11.460 --> 00:04:16.020
And in this case the dispatcher certainly knows what what it wants to do for the view.

51
00:04:16.020 --> 00:04:25.290
It could be rest call and we need to return back similar Jason or it could be for TTP or a HCM.

52
00:04:25.560 --> 00:04:31.770
And in that case we're going to invoke a view technology to render the HDMI all such as GSP velocity

53
00:04:31.770 --> 00:04:34.270
or timely and an upcoming example.

54
00:04:34.290 --> 00:04:36.660
I'm going to show you the timely for example.

55
00:04:36.660 --> 00:04:42.270
So this is pretty simple but it's high low it's important to realize what's happening here with this

56
00:04:42.270 --> 00:04:43.320
request.

57
00:04:43.340 --> 00:04:50.040
So again just to go through it at a high level request comes in dispatch or several it looks up the

58
00:04:50.040 --> 00:04:55.930
handler mapping invokes the controller method which in a spring context is going to go call service

59
00:04:56.070 --> 00:05:02.990
get the data return the model and then the model's going to get passed off to a templating engine for

60
00:05:03.000 --> 00:05:08.400
us in this case timely and then that H2 AML is going to get rendered back to the client.
