WEBVTT
0
1
00:00:09.349 --> 00:00:14.130
Okay, cleaning up after Docker is a very
important task. When I first started
1

2
00:00:14.130 --> 00:00:19.170
working with Docker, I was working at a
client and I had a Red Hat image with
2

3
00:00:19.170 --> 00:00:25.800
VPN into. They gave us a choice of
having Windows or Linux instances, and of
3

4
00:00:25.800 --> 00:00:29.849
course, took Linux. I'd rather work with
Linux any day of the week, over Windows.
4

5
00:00:29.849 --> 00:00:34.649
So with VPN into these
images and they didn't have a lot
5

6
00:00:34.649 --> 00:00:38.640
of disk space allocated to them. So as I
started getting into Docker development,
6

7
00:00:38.640 --> 00:00:44.010
I kept blowing up the disk on this
machine, like crazy. I found out
7

8
00:00:44.010 --> 00:00:47.539
it it is pretty important to do
housekeeping, when you're doing
8

9
00:00:47.539 --> 00:00:51.690
development with Docker, and going
further in this course, we're going to be
9

10
00:00:51.690 --> 00:00:56.879
building images, and this is going to become
more and more important. Now if you have
10

11
00:00:56.879 --> 00:01:02.100
a terabyte of disk space, you're probably
not going to run into this for a while. But
11

12
00:01:02.100 --> 00:01:07.260
trust me, if you're on a smaller system,
with disk space constraints, you will run
12

13
00:01:07.260 --> 00:01:10.470
into this pretty quick,
as you start doing development of Docker
13

14
00:01:10.470 --> 00:01:15.540
because you are going to be building it -
images, containers and volumes.
14

15
00:01:15.540 --> 00:01:20.009
All these files will start taking up a
significant amount of space on your
15

16
00:01:20.009 --> 00:01:25.439
system. Over time, it really builds up.
So these commands here, I'm going to show
16

17
00:01:25.439 --> 00:01:31.110
you some lessons learn from being out on
the field on the trenches of stumbling
17

18
00:01:31.110 --> 00:01:34.710
through this because I didn't
know all this about at first when I
18

19
00:01:34.710 --> 00:01:38.970
first got into Docker and how it could
can consume up space. At first, I learned
19

20
00:01:38.970 --> 00:01:42.210
it will flow away the images, and then I
learned though you can clean up
20

21
00:01:42.210 --> 00:01:46.320
containers, and then my disk filled up
again, it's like oh I've got all these
21

22
00:01:46.320 --> 00:01:50.490
orphaned volumes, so I'm going to go over to
a slideshow now, and show you exactly the
22

23
00:01:50.490 --> 00:01:56.430
commands that I use to keep my Docker
environment nice and neat and tidy. Okay,
23

24
00:01:56.430 --> 00:01:59.850
in this one, we are going to talk about
Docker Housecleaning,
24

25
00:01:59.850 --> 00:02:06.479
cleaning up after Docker. Now, what we
need to do in cleaning up after Docker is
25

26
00:02:06.479 --> 00:02:10.770
it does leave behind a lot of files.
These files will continue to grow and
26

27
00:02:10.770 --> 00:02:15.420
consume a lot of disk space.
Probably less of an issue on production
27

28
00:02:15.420 --> 00:02:19.709
systems, where we aren't building
containers, restarting things all the
28

29
00:02:19.709 --> 00:02:24.209
time, bringing down different images and
whatnot. A couple things that we
29

30
00:02:24.209 --> 00:02:28.800
need to remember is that, Docker is going to
be leaving these files behind. Even
30

31
00:02:28.800 --> 00:02:34.500
though it's very efficient, it can
consume a lot of space over time because
31

32
00:02:34.500 --> 00:02:38.220
the containers after you start and stop.
When that container image is still there.
32

33
00:02:38.220 --> 00:02:41.520
There is a volume associated with that
container.
33

34
00:02:41.520 --> 00:02:45.510
I mean if you didn't mount something
there there's a volume associated that
34

35
00:02:45.510 --> 00:02:49.739
that container, so that is left behind as
you bring down different images and
35

36
00:02:49.739 --> 00:02:54.780
those are left behind and all of the
slices for those images that are kept
36

37
00:02:54.780 --> 00:02:59.010
down the system. So the two culprits are
going to be containers and volumes, as
37

38
00:02:59.010 --> 00:03:02.700
you start and stop containers and
volumes that this can really start
38

39
00:03:02.700 --> 00:03:06.870
consuming a lot of space. So let's go and
take a look at and we have the
39

40
00:03:06.870 --> 00:03:12.120
containers and I want to point out a couple of
commands here. You can't remove the
40

41
00:03:12.120 --> 00:03:16.500
volumes or the containers while they're
running. Docker won't allow that. So if we
41

42
00:03:16.500 --> 00:03:21.299
want to, like on a dev system, we wanted a
lot clean up everything. One of the first
42

43
00:03:21.299 --> 00:03:25.380
things that we do is kill all the
Docker containers. So this is a Docker
43

44
00:03:25.380 --> 00:03:31.470
command kill, and we're passing it in an
argument dollar sign paren docker ps
44

45
00:03:31.470 --> 00:03:37.350
minus q and the minus q does a quiet
mode and what this is going to do is
45

46
00:03:37.350 --> 00:03:43.079
pass in a list of container IDs to kill
command and Docker will kill everything
46

47
00:03:43.079 --> 00:03:49.799
that is running. Then the next one would
be delete all the stopped containers, so if
47

48
00:03:49.799 --> 00:03:55.170
we did docker rm, and then the same
syntax here and we are going to use
48

49
00:03:55.170 --> 00:04:01.380
docker ps minus a and again minus q for
quiet, that will give us all the stopped
49

50
00:04:01.380 --> 00:04:05.430
containers, and we'll pass that into the
remove command, and that's going to
50

51
00:04:05.430 --> 00:04:09.840
remove all the containers. Now the next
thing I saw that we needed to look at
51

52
00:04:09.840 --> 00:04:15.180
was images. A couple of commands for these
guys. If we want to remove a specific
52

53
00:04:15.180 --> 00:04:21.859
Docker image, like the rm command but now
it's rmi so I remember it in my head.
53

54
00:04:21.859 --> 00:04:29.419
Docker remove image so rmi will remove
an image name. Now if we brought down an
54

55
00:04:29.419 --> 00:04:36.319
image and then we built another latest
image, that image would still be there,
55

56
00:04:36.319 --> 00:04:41.389
but it would be untagged. And that this
is an important concept, especially when
56

57
00:04:41.389 --> 00:04:46.280
we start building our own images. We'll
start off with the first image. We'll
57

58
00:04:46.280 --> 00:04:50.719
build it and we'll tag it as latest, and
then if we run another build and we
58

59
00:04:50.719 --> 00:04:56.750
build that image again, and tag it as
latest, that original first image would
59

60
00:04:56.750 --> 00:05:02.360
become untagged and now this is would be
considered a dangling image because it
60

61
00:05:02.360 --> 00:05:07.400
doesn't have a tag. But that image still
exists on the system. So in this case, to
61

62
00:05:07.400 --> 00:05:11.990
remove those dangling images, now use
docker rmi again. And this time, we are
62

63
00:05:11.990 --> 00:05:20.629
going to run a command inside docker
images -q for quiet and then -f for
63

64
00:05:20.629 --> 00:05:25.400
filter and we're going to filter them on
dangling equals true and then this will
64

65
00:05:25.400 --> 00:05:28.490
clean up all those dangling images. Again,
this is important once we start getting
65

66
00:05:28.490 --> 00:05:33.440
into building images on our local
machine. Now the next one is to
66

67
00:05:33.440 --> 00:05:37.969
delete all images. Let's say we just want
to clean everything up. If you start
67

68
00:05:37.969 --> 00:05:41.270
developing a lot with Docker, trust me,
you're going to, at some point in time,
68

69
00:05:41.270 --> 00:05:46.610
you just want to like clear all the
Docker stuff. So if we do docker rmi and
69

70
00:05:46.610 --> 00:05:51.650
then inside the command we do docker
images -q, that inside command is
70

71
00:05:51.650 --> 00:05:56.960
going to list all the Docker images in
quiet mode. - q is quiet mode. Pass
71

72
00:05:56.960 --> 00:06:02.150
in those image IDs to the docker rmi 
command and that's going to clear up
72

73
00:06:02.150 --> 00:06:08.539
everything. Now the next one we need to
talk to about his volumes. Now cleaning
73

74
00:06:08.539 --> 00:06:13.520
up volumes. Once a volume is alone, no
longer associated with a container, it is
74

75
00:06:13.520 --> 00:06:20.240
considered dangling. Now to remove these
dangling volumes, we need to run the
75

76
00:06:20.240 --> 00:06:26.990
command docker volume minus rm dollar
sign docker volume ls -f and dangling
76

77
00:06:26.990 --> 00:06:35.300
equal true with the - q command. Now
one caveat here is if we've mounted
77

78
00:06:35.300 --> 00:06:40.610
a local storage, they're using the - v command, those files will not be
78

79
00:06:40.610 --> 00:06:47.090
removed. So this is all the local Docker
images. Remember I said that. When a
79

80
00:06:47.090 --> 00:06:51.979
Docker container starts up, it will give
it a volume and image sliced volume
80

81
00:06:51.979 --> 00:06:57.199
inside of Docker zone file system for
any local rights to that container.
81

82
00:06:57.199 --> 00:07:02.030
If you do a volume mount that is
actually separate from that. But these
82

83
00:07:02.030 --> 00:07:07.490
volumes do get left behind, as you create
and stop containers, this one that has
83

84
00:07:07.490 --> 00:07:11.990
been me in the past was I forgot about
the volumes and that those will
84

85
00:07:11.990 --> 00:07:18.139
definitely chew up some space after some
time. Now for further help, I've created a
85

86
00:07:18.139 --> 00:07:21.199
Docker cheat sheet. I think I mentioned
this before in the course for Spring
86

87
00:07:21.199 --> 00:07:25.099
Developers. If you just Google Docker
cheat sheet for Spring Developers, they'll
87

88
00:07:25.099 --> 00:07:28.879
take you right to my website. I have
a series of commands. All these commands
88

89
00:07:28.879 --> 00:07:32.599
are documented there. When I first
started with Docker, I couldn't
89

90
00:07:32.599 --> 00:07:35.599
remember these commands off the top of
my head, I was new to it so I started
90

91
00:07:35.599 --> 00:07:39.469
creating that that post, to keep those
around and it gives me an easy way to
91

92
00:07:39.469 --> 00:07:44.240
find those. The set of commands is pretty
important and you might be looking at
92

93
00:07:44.240 --> 00:07:47.930
this wondering why Docker does it this
way, and there's actually some pretty
93

94
00:07:47.930 --> 00:07:52.130
important reasons why it does this.
Containers after they're stopped, they're
94

95
00:07:52.130 --> 00:07:56.810
left there in place so that you can go in
and see the log files on it.
95

96
00:07:56.810 --> 00:08:01.610
If Docker clean this up automatically,
that'd be no fun because it wouldn't see
96

97
00:08:01.610 --> 00:08:07.039
the logs after running a container
images. Docker doesn't know if you're
97

98
00:08:07.039 --> 00:08:10.400
going to be running that image again.
The same of volumes, you may need to
98

99
00:08:10.400 --> 00:08:15.169
access the contents of those volume
files. So it's kind of a nature of how
99

100
00:08:15.169 --> 00:08:20.419
Docker works, that most these files get
left behind, and it if you're running in
100

101
00:08:20.419 --> 00:08:23.449
production, it's not going to be as much
as a problem if you're running in
101

102
00:08:23.449 --> 00:08:26.479
development. Running in development,
you're pulling down a lot of different
102

103
00:08:26.479 --> 00:08:30.500
diagram images, doing a lot of different
stuff with Docker, and you will fill
103

104
00:08:30.500 --> 00:08:35.380
up a lot of disk, if you're doing a lot
of different things with Docker.
