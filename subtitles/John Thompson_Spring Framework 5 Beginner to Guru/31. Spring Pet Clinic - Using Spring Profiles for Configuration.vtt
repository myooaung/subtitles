WEBVTT
0
1
00:00:04.190 --> 00:00:09.480
Alright! In the last video, I actually
went in and loaded visits on startup. But
1

2
00:00:09.480 --> 00:00:17.660
what I want to do in this video, I am
going to edit this and say...
2

3
00:00:27.180 --> 00:00:32.700
We have not actually run until Spring
Data JPA Services. Basically, I'm
3

4
00:00:32.700 --> 00:00:35.550
going to say we're going to update the
profiles. There's a couple things
4

5
00:00:35.550 --> 00:00:39.150
that we need to do here. I'm going to go
through this. I have not run this yet
5

6
00:00:39.150 --> 00:00:45.120
against the H2 in-memory database. This
is coming up okay. H2 is loading and at
6

7
00:00:45.120 --> 00:00:48.210
this point I think the entities are
probably getting created. We're not
7

8
00:00:48.210 --> 00:00:51.089
loading any data against them because
we're not using the Spring Data
8

9
00:00:51.089 --> 00:00:57.059
repositories so what we want to do is go
in and update those to do so.
9

10
00:00:57.059 --> 00:01:02.469
I'm going to come over to IntelliJ
and change some things here.
10

11
00:01:02.469 --> 00:01:09.240
So, what we did here for the JPA services,
we added a profile Spring Data JPA.
11

12
00:01:09.240 --> 00:01:14.530
We need to do the same thing. The problem
here is these services don't have a
12

13
00:01:14.530 --> 00:01:20.110
profile, and kind of be nice to have
everything default to the map based
13

14
00:01:20.110 --> 00:01:25.680
service per se, so let me stop Spring
Boot. We'll go ahead and hide that.
14

15
00:01:25.680 --> 00:01:33.270
We don't need him. Let's see here. I
got the map service here.
15

16
00:01:34.280 --> 00:01:39.440
Remember the profiles,
what we can do is come up with a
16

17
00:01:39.440 --> 00:01:42.580
list here and we
17

18
00:01:43.560 --> 00:01:48.079
can say default
18

19
00:01:49.909 --> 00:01:54.760
or we can also say, we'll just do map and
keep it simple.
19

20
00:01:54.760 --> 00:02:02.560
What happens, just as a refresher, if
we don't specify an active profile, the
20

21
00:02:02.560 --> 00:02:08.980
air quotes the active profile will be
default. We only want this class to
21

22
00:02:08.980 --> 00:02:15.940
be implemented if the default profile is
active or if the map profile is active.
22

23
00:02:15.940 --> 00:02:21.430
Now if I specify any active profile,
default is not active, so that's why I'm
23

24
00:02:21.430 --> 00:02:29.250
going to go in and implement both.
So now, I'm going to come here and we
24

25
00:02:29.250 --> 00:02:34.650
want to modify the other ones. Doing the
evils of cut and paste. I'm just going
25

26
00:02:34.650 --> 00:02:38.910
to come through and update the different
services .There are the service
26

27
00:02:38.910 --> 00:02:45.930
implementations of that. So I'm updating
these Spring Beans, like so.
27

28
00:02:45.930 --> 00:02:51.560
Again, I'm just doing Profile default, and
map. This bean will be
28

29
00:02:51.560 --> 00:02:57.290
implemented if either one of those is
active.
29

30
00:02:58.460 --> 00:03:04.040
And now, I'm just going to go ahead and
start Spring Boot again. You can see
30

31
00:03:06.489 --> 00:03:10.870
right towards the top usually.
31

32
00:03:11.790 --> 00:03:16.409
Right here, this second line says no
active profile set falling back to the
32

33
00:03:16.409 --> 00:03:23.430
default profile of default. So right now,
our map implementation came up and that
33

34
00:03:23.430 --> 00:03:28.110
is up and running so everything
restarted normally with all these new
34

35
00:03:28.110 --> 00:03:32.310
annotations of the Profile, so exactly
what I hoped happen. So let's go ahead
35

36
00:03:32.310 --> 00:03:37.320
and stop this.
Now let's come over here. There's
36

37
00:03:37.320 --> 00:03:41.290
actually a couple different ways that we
can set the active profile.
37

38
00:03:41.290 --> 00:03:44.500
Let's see here.
38

39
00:03:45.400 --> 00:03:51.340
We want to come under here our pet
clinic web. We have resources application
39

40
00:03:51.340 --> 00:03:54.150
dot properties.
40

41
00:03:56.849 --> 00:04:02.090
You can see here at IntelliJ's
intellisense profiles active and comes
41

42
00:04:02.090 --> 00:04:08.989
in separate list of active profiles. 
What we want to do is come over here, and
42

43
00:04:08.989 --> 00:04:15.950
remember, we have the Spring Data JPA. 
I'm pretty sure that these are
43

44
00:04:15.950 --> 00:04:20.359
case-sensitive.
I am going from memory, so i could be
44

45
00:04:20.359 --> 00:04:25.910
wrong on that. But we are going to do springdatajpa. Just did a cut and paste on that to
45

46
00:04:25.910 --> 00:04:29.210
make sure that we did get it right. 
This is the first time I'm running it. I
46

47
00:04:29.210 --> 00:04:34.090
don't know if we're going to get errors or
not. Let's go ahead and see what happens
47

48
00:04:34.090 --> 00:04:39.169
because we could have missed something.
We will deal with the errors, if they
48

49
00:04:39.169 --> 00:04:46.660
occur. It looks looks like everything
worked okay.
49

50
00:04:47.030 --> 00:04:48.100
So everything came up all right. I'm just
double checking the logs here.
50

51
00:04:48.100 --> 00:04:54.220
Let's come over
51

52
00:04:56.670 --> 00:05:00.740
here to Chrome and run this.
52

53
00:05:02.000 --> 00:05:09.810
There's our Veterinarians.
Just double check the active profiles
53

54
00:05:10.350 --> 00:05:13.310
Spring Data JPA.
54

55
00:05:16.370 --> 00:05:20.800
I don't remember if the database
console is running.
55

56
00:05:27.440 --> 00:05:32.380
Make sure I try to remember. They changed this URL a
couple of times.
56

57
00:05:33.820 --> 00:05:40.539
Nope, I did not see that come up. Look into
that, double-check.
57

58
00:05:42.850 --> 00:05:47.770
I might be overlooking. I'm looking for
the H2 database console and I am not
58

59
00:05:47.770 --> 00:05:53.400
seeing any chatter from
H2, which I should be.
59

60
00:05:54.460 --> 00:05:57.509
I should have liked.
60

61
00:05:58.889 --> 00:06:05.219
I'm going to look for the DB console
here in another video look. Will look at that at
61

62
00:06:05.219 --> 00:06:11.940
the future. But what we can do here is
let's come into, we'll say owner,
62

63
00:06:11.940 --> 00:06:18.410
and what we want to do here is let's
take a look at the save method.
63

64
00:06:19.220 --> 00:06:22.910
I just want to prove that this is
actually running
64

65
00:06:22.910 --> 00:06:25.930
for us. I'm just going to put in a
65

66
00:06:27.430 --> 00:06:30.600
bunch of pound signs.
66

67
00:06:32.160 --> 00:06:37.830
I'm just doing this because this will
show up in the logs quite nicely. I just
67

68
00:06:37.830 --> 00:06:42.600
want to make sure that we are in fact
running the JPA implementation. I
68

69
00:06:42.600 --> 00:06:46.170
always get skeptical when things run the
first time without any causing any
69

70
00:06:46.170 --> 00:06:54.910
error, and we can see that we are in
fact running the JPA services.
70

71
00:06:54.910 --> 00:06:59.470
So I'm going to get rid of that system
out, or actually, let me leave
71

72
00:06:59.470 --> 00:07:07.020
that in. I'll go over to active profiles.
Comment that out and let's restart
72

73
00:07:07.020 --> 00:07:11.260
this.
This time, we should not see any
73

74
00:07:11.260 --> 00:07:16.840
chatter from that.
We do. We have a problem.
74

75
00:07:17.580 --> 00:07:25.220
You can see, this time, the pound signs
are not in the log, so we'll return that.
75

76
00:07:25.220 --> 00:07:28.400
Restart this.
76

77
00:07:31.960 --> 00:07:37.270
You can see how the active profile is
controlling through the Spring
77

78
00:07:37.270 --> 00:07:43.060
inversion of control of the Spring Container
is deciding which implementation. So we
78

79
00:07:43.060 --> 00:07:48.400
have a set of was that about six
services that are being wired up.
79

80
00:07:48.400 --> 00:07:55.030
Depending on what our active profile is,
that is telling the Spring application
80

81
00:07:55.030 --> 00:07:59.590
of which one to actually wire in for us.
So I'm going to come back over here and
81

82
00:07:59.590 --> 00:08:04.020
clear out this debug stuff.
82

83
00:08:05.400 --> 00:08:12.330
And let's see here. I think everything's
good. I'm just double-checking. So I'm
83

84
00:08:12.330 --> 00:08:17.999
going to come over here and that was
number 48.
84

85
00:08:17.999 --> 00:08:22.849
I'm going to go ahead and commit that
into GitHub.
85

86
00:08:37.610 --> 00:08:44.570
I was honestly expecting something to
be unhappy there. Sometimes things
86

87
00:08:44.570 --> 00:08:49.160
work out in your favor. I'm going to go
ahead and commit and push this. So I
87

88
00:08:49.160 --> 00:08:53.300
think we got a good example there. So now,
I think there's a really good example of
88

89
00:08:53.300 --> 00:08:58.160
how you can see how we are using active
profiles to wire in the implementation
89

90
00:08:58.160 --> 00:09:01.880
that we did. We kind of been
working to this point for quite a while
90

91
00:09:01.880 --> 00:09:06.680
and I'm glad it kind of came together.
Part of it is an experience in
91

92
00:09:06.680 --> 00:09:11.329
setting things up because we really did
model the map service after the JPA
92

93
00:09:11.329 --> 00:09:15.290
service. I kind of knew if some gotchas
and I kind of guide in things along the
93

94
00:09:15.290 --> 00:09:19.760
way. But I am honestly a little surprised
that we did not run into one hiccup at
94

95
00:09:19.760 --> 00:09:22.910
all. There's probably something lurking
out there because we really don't have
95

96
00:09:22.910 --> 00:09:29.050
good test coverage. But testing is coming
up in a future video.
