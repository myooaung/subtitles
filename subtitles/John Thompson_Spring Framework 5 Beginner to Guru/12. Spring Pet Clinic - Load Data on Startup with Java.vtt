WEBVTT
0
1
00:00:04.009 --> 00:00:09.120
In this video, we want to take a look at
loading up data using what I call a
1

2
00:00:09.120 --> 00:00:14.580
Bootstrap process. Effectively, what we
want to do is bring data into the
2

3
00:00:14.580 --> 00:00:18.900
project. This is going to be like
some startup data. We'll set up some
3

4
00:00:18.900 --> 00:00:21.840
things that we can work with. This is a
concept I've kind of steal from the
4

5
00:00:21.840 --> 00:00:26.220
Grails team where we load up data on
startup and it's really nice when you're
5

6
00:00:26.220 --> 00:00:30.900
developing a web application to have an
known set of data brought into your
6

7
00:00:30.900 --> 00:00:35.040
environment. In here, what we're going to be
doing is like we're going to have three
7

8
00:00:35.040 --> 00:00:39.390
different implementations. We'll have
a Map implementation, Spring Data JPA
8

9
00:00:39.390 --> 00:00:44.940
implementation, as well as a traditional
just straight-up JPA implementation.
9

10
00:00:44.940 --> 00:00:49.950
The first one is just going to be Map. It
would be a hash map in memory. The second
10

11
00:00:49.950 --> 00:00:55.199
one we can use either a in-memory database
or a persistent database. We have
11

12
00:00:55.199 --> 00:00:59.280
different tools for both of the latter
set but the process is going to be the same.
12

13
00:00:59.280 --> 00:01:03.570
I'm going to start and I'm going to show
you how to configure this. I'm going to
13

14
00:01:03.570 --> 00:01:08.610
go ahead and assign this task to myself so
we are working on test #14 and
14

15
00:01:08.610 --> 00:01:12.630
that is to Load Bootstrap Data on
Startup. I'm going to toggle over to
15

16
00:01:12.630 --> 00:01:19.909
IntelliJ now. Remember, we have our two
modules. We have the pet-clinic-data and
16

17
00:01:19.909 --> 00:01:26.600
pet-clinic-web. Now, we can discuss about
where we want to store that.
17

18
00:01:26.600 --> 00:01:32.670
Traditionally for me, I do like to
break out the data project but I look at
18

19
00:01:32.670 --> 00:01:36.930
that as a tool as to how we are going to
save that data. I think that the
19

20
00:01:36.930 --> 00:01:41.450
persistence and this is my opinion that
the persistence of said data should be
20

21
00:01:41.450 --> 00:01:47.220
more at the project level, the
implementation level. Now what I do
21

22
00:01:47.220 --> 00:01:51.540
here is I'm going to expand out under
the web. Remember we have our guru
22

23
00:01:51.540 --> 00:01:55.560
springframework sfgpetclinic. That's
like our base package. I'm going to
23

24
00:01:55.560 --> 00:01:59.560
come in here and I'm going to create a
New Package.
24

25
00:01:59.560 --> 00:02:03.540
I'm going to call that bootstrap.
25

26
00:02:05.080 --> 00:02:09.180
This is a pretty common
convention. Somebody else developing this
26

27
00:02:09.180 --> 00:02:15.210
also people are fairly custom defining
startup data or any startup processes in
27

28
00:02:15.210 --> 00:02:18.950
a package called bootstrap.
28

29
00:02:19.340 --> 00:02:26.680
I am just going to call this a... I can call 
something like a DataLoader,
29

30
00:02:26.680 --> 00:02:31.000
or you could say DataInitializer. I mean
there's a dozen different names for that
30

31
00:02:31.000 --> 00:02:38.549
but this makes sense for us. What we
want to do is implement.
31

32
00:02:41.550 --> 00:02:45.750
This is a Spring Boot Class, CommandLineRunner. Now in the course, I'm going to
32

33
00:02:45.750 --> 00:02:49.500
show you a couple different ways that we
can initialise data. This is one of them.
33

34
00:02:49.500 --> 00:02:56.010
This is a Spring Boot specific way, so
I'm utilising this and I just do command
34

35
00:02:56.010 --> 00:03:00.129
N and I'm going to implement the
methods.
35

36
00:03:00.129 --> 00:03:04.389
Now it's important. I have this run
method. I'll take in arguments from the
36

37
00:03:04.389 --> 00:03:07.740
environment. We're not going to be
utilising those
37

38
00:03:07.740 --> 00:03:15.270
but what's important here is what we
want to do is make this a Component.
38

39
00:03:15.270 --> 00:03:21.150
By Component, by making this a 
Component, this becomes a Spring Bean and
39

40
00:03:21.150 --> 00:03:25.770
it gets registered into the Spring
Context. What happens underneath the
40

41
00:03:25.770 --> 00:03:30.990
covers of Spring is this is going to
execute. Spring saves that, "Oh, this
41

42
00:03:30.990 --> 00:03:35.460
implements CommandLineRunner." When my
Spring Context is completely up and
42

43
00:03:35.460 --> 00:03:39.660
ready, it's going to call this run method
and run everything inside of it.
43

44
00:03:39.660 --> 00:03:43.140
Now what I'm going to do right now is I'm
going to implement this without a lot of
44

45
00:03:43.140 --> 00:03:47.690
Spring configuration so I'm going to
come up here and implement a Constructor
45

46
00:03:47.690 --> 00:03:57.150
and say I have, what I want to get a
handle on are my services.
46

47
00:03:57.150 --> 00:04:02.159
I have my basic services and what I'm
going to do is I'm going to load up some
47

48
00:04:02.159 --> 00:04:08.549
Owners and Vets. Now remember, Pets
are owned by Owners but we haven't
48

49
00:04:08.549 --> 00:04:12.900
established that relationship, so I'm not
going to worry about that too much. What I
49

50
00:04:12.900 --> 00:04:19.760
can do is say I'll do the actual
interface. Let's do OwnerService.
50

51
00:04:25.350 --> 00:04:29.810
I don't want static. My mistake.
51

52
00:04:33.479 --> 00:04:37.590
Then I can also do private,
52

53
00:04:42.990 --> 00:04:45.919
like so.
Implement that
53

54
00:04:48.320 --> 00:04:54.889
and now I'm going to initialise
these inside the Constructor and say
54

55
00:04:55.360 --> 00:05:03.800
equals new. What did I call that?
OwnerServiceMap.
55

56
00:05:06.120 --> 00:05:10.050
You can see here that we're not
happy on this so if I take a look at the
56

57
00:05:10.050 --> 00:05:15.540
OwnerServiceMap, this implementation
actually implements CrudService. I'm
57

58
00:05:15.540 --> 00:05:22.050
going to refactor this to implement the
OwnerService, like so. Let's go ahead and
58

59
00:05:22.050 --> 00:05:26.880
I'm going to do an alt there and say
Implement Methods. You can see that
59

60
00:05:26.880 --> 00:05:30.330
this picks up that last name
implementation. We'll have to
60

61
00:05:30.330 --> 00:05:34.199
implement that later. This is a Map
method where we need to go through and
61

62
00:05:34.199 --> 00:05:39.050
implement that. We get rid of this
import.
62

63
00:05:40.270 --> 00:05:44.970
Come back over here. We can see that this
is now happy.
63

64
00:05:45.820 --> 00:05:49.990
Get rid of the generics now because the
interface actually implements those
64

65
00:05:49.990 --> 00:05:54.550
on the OwnerService. We are
implementing that on a CrudService so
65

66
00:05:54.550 --> 00:05:58.630
we no longer need to do that. That
service is still unhappy, so let's go
66

67
00:05:58.630 --> 00:06:03.660
ahead and implement him.
67

68
00:06:14.360 --> 00:06:20.740
You can see this is unhappy. I think I probably
have the same problem here. VetService.
68

69
00:06:22.520 --> 00:06:30.349
VetServiceMap, that should implement
the VetService. That was a mistake in
69

70
00:06:30.349 --> 00:06:34.430
my previous setting this up. You
can see it's going to be a little bit
70

71
00:06:34.430 --> 00:06:39.500
smoother now so our VetSeSrviceMap
implements the actual VetService interface
71

72
00:06:39.500 --> 00:06:42.830
rather than trying to inherit from the
CrudService. It's a mistake that
72

73
00:06:42.830 --> 00:06:48.560
I made. We will make you 
implement PetService because I think
73

74
00:06:48.560 --> 00:06:52.360
we're going to see that in the future as
well.
74

75
00:06:52.900 --> 00:06:57.880
As you can see how as I'm working along
here, I'll go ahead and Refactor as I
75

76
00:06:57.880 --> 00:07:03.220
go. I made it a little bit change in our
data model. But now my DataLoader is
76

77
00:07:03.220 --> 00:07:09.100
more happy. Just to show you to
reiterate what I'm doing is I'm
77

78
00:07:09.100 --> 00:07:14.919
implementing these two services and now
I've got the services created in the
78

79
00:07:14.919 --> 00:07:19.960
constructor. I'm going to refactor this
in a future video to leverage Spring to
79

80
00:07:19.960 --> 00:07:24.130
provide this configuration for us. But
right now, we're going to treat the DataLoader
80

81
00:07:24.130 --> 00:07:30.510
like this and refactor in the
future. So let's create an Owner.
81

82
00:07:34.290 --> 00:07:38.010
What I'm going to do is I'm going to
pause the video here. I don't think you
82

83
00:07:38.010 --> 00:07:42.000
need to watch me create POJOs.
I'm going to pause it and then come back to
83

84
00:07:42.000 --> 00:07:48.480
it. I know. Give it a second. I swear I'm not 
even moving.  It's just doing it on its own.
84

85
00:07:48.480 --> 00:07:53.790
Thanks for waiting just jumped ahead a
85

86
00:07:53.790 --> 00:07:57.390
little bit here and let's do a quick
review here of what I did starting on
86

87
00:07:57.390 --> 00:08:02.130
line number 30. I created a new Owner
object, so I have owner1. I set the
87

88
00:08:02.130 --> 00:08:07.500
properties there. Now what's important is
I'm manually managing the id value of 1L
88

89
00:08:07.500 --> 00:08:12.390
so I manually setting that. You can
see that I have Michael Weston, Fiona
89

90
00:08:12.390 --> 00:08:15.510
Glenanne,
as my two owners. I'm using a
90

91
00:08:15.510 --> 00:08:19.620
different ID property for the Owner.
You can see that I'm calling the OwnerService
91

92
00:08:19.620 --> 00:08:26.790
save method. Down on
line 44, we can see that that's where I
92

93
00:08:26.790 --> 00:08:33.230
start loading the two Vets, so I have Sam
Axe. Actually, I want to make this.
93

94
00:08:36.690 --> 00:08:41.220
So Jesse Porter. If you follow along
my videos, you know that I like Burn
94

95
00:08:41.220 --> 00:08:44.850
Notice. The audio quality or might be
a little bit different. I'm using
95

96
00:08:44.850 --> 00:08:48.570
different mic right now because I'm
actually recording this from lovely
96

97
00:08:48.570 --> 00:08:53.070
Phoenix Arizona. I'm out here for work
but I want to knock out this video for you
97

98
00:08:53.070 --> 00:08:55.620
guys.
I actually brought that up
98

99
00:08:55.620 --> 00:08:59.910
because I was watching a little Burn
Notice on the plane out here. What
99

100
00:08:59.910 --> 00:09:04.500
this is going to do for us. We'll get two
Owners and two Vets created. I am going to
100

101
00:09:04.500 --> 00:09:08.580
go ahead and run this. I put some
system out in here so we can see that
101

102
00:09:08.580 --> 00:09:13.080
logged out to the console. Let's go
ahead and start this up. I'm going to
102

103
00:09:13.080 --> 00:09:16.800
expand this out a little bit. There goes
our little Vizsla.
103

104
00:09:16.800 --> 00:09:20.190
We can see that we're we're
building it up. You can see chatter
104

105
00:09:20.190 --> 00:09:25.020
in the log where we are initializing the
data container, which are not using yet.
105

106
00:09:25.020 --> 00:09:28.950
You can see the Hibernate stuff. But
down here at the bottom, if I ever get
106

107
00:09:28.950 --> 00:09:33.120
rid of my spinning beach ball here, you
can see I have loaded Owners and loaded
107

108
00:09:33.120 --> 00:09:38.580
Vets and that is from our startup
application. So now we know I could throw
108

109
00:09:38.580 --> 00:09:42.089
a test in there to see if the Map
properties are loaded. But I think that'
109

110
00:09:42.089 --> 00:09:47.040
fairly apparent that everything worked
properly. we are going to
110

111
00:09:47.040 --> 00:09:53.190
refactor this coming up to be more
Springy because right here with the
111

112
00:09:53.190 --> 00:09:56.550
tools of Spring I don't like that. But we
are going to show you that in an
112

113
00:09:56.550 --> 00:10:01.230
upcoming video of how to switch that
over to use dependency injection and
113

114
00:10:01.230 --> 00:10:06.120
allow Spring to manage these components. 
Because ultimately, this Bootstrap class
114

115
00:10:06.120 --> 00:10:11.820
what we wanted to allow it to do is
manage itself and in theory where we're
115

116
00:10:11.820 --> 00:10:16.500
going with all this is I'm going to
allow Spring to manage whether we're
116

117
00:10:16.500 --> 00:10:21.779
using a Map service, a hash map, or an
underlying data store and will allow the
117

118
00:10:21.779 --> 00:10:26.490
Spring Configuration to do all that. But
we're going to do that we need to make
118

119
00:10:26.490 --> 00:10:30.480
sure that we don't have a leakage.
One thing that will have to refactor is
119

120
00:10:30.480 --> 00:10:35.100
our ID management will have to allow our
Map service to actually figure out the
120

121
00:10:35.100 --> 00:10:39.870
IDs. That will also be a future
refactoring. But ultimately, what we're
121

122
00:10:39.870 --> 00:10:44.760
trying to do here is set up a project so
you can see how we can utilise multiple
122

123
00:10:44.760 --> 00:10:50.100
Spring Profiles to manage multiple
persistence strategies. That completes
123

124
00:10:50.100 --> 00:10:56.250
our tasks. I am going to go ahead and
commit this into GitHub so you guys
124

125
00:10:56.250 --> 00:10:59.270
going to have a source code.
125

126
00:11:09.500 --> 00:11:18.000
That is #14. Let's just say
Closes #14. I will Commit and
126

127
00:11:18.000 --> 00:11:21.380
Push that up to GitHub.
