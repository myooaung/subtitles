WEBVTT
0
1
00:00:05.359 --> 00:00:10.080
Okay, we are going to talk about
primarily JPA Entity relationships and
1

2
00:00:10.080 --> 00:00:16.470
we're going to get into a lot of the
mapping aspects of utilizing JPA. Now we
2

3
00:00:16.470 --> 00:00:19.320
do have several types of relationships
that we can work with.
3

4
00:00:19.320 --> 00:00:25.019
First is one-to-one and the annotation
to define that is @OnetoOne and
4

5
00:00:25.019 --> 00:00:29.699
this is where you know exactly one
entity is related to another entity. So
5

6
00:00:29.699 --> 00:00:36.390
it's going to be like an embedded type
and a type. So then it'll just be one. And
6

7
00:00:36.390 --> 00:00:40.710
then the next we have one to many and
this is where you have one entity that
7

8
00:00:40.710 --> 00:00:46.230
has many different entities that it is
related to. And typically this is going
8

9
00:00:46.230 --> 00:00:52.949
to be a List, Set, Map, SortedSet or
SortedMap and you mostly see in use
9

10
00:00:52.949 --> 00:00:58.350
lists and sets. So that's the
primary use cases that you can see.
10

11
00:00:58.350 --> 00:01:03.780
However there are cases when you do want
to use the other types. Now the final
11

12
00:01:03.780 --> 00:01:09.659
example, our final example is we also have
many two one and this is a inverse
12

13
00:01:09.659 --> 00:01:15.180
relationship of one-to-many. So you can
do a two direction mapping here. And
13

14
00:01:15.180 --> 00:01:20.250
then next is many to many and
this is one that gets people confused
14

15
00:01:20.250 --> 00:01:25.619
sometimes. You have many entities that are
related in many other entities and each
15

16
00:01:25.619 --> 00:01:29.600
has a List or Set or any of the other
types that just mentioned on the left side.
16

17
00:01:29.600 --> 00:01:34.140
References to each other and you're
going to see a join table where you
17

18
00:01:34.140 --> 00:01:40.409
identify the ID properties of each of
the related entities and good example of
18

19
00:01:40.409 --> 00:01:45.720
this would be if you had products
and categories. So you could have many
19

20
00:01:45.720 --> 00:01:49.979
products belonging to many different
categories and have that relationship
20

21
00:01:49.979 --> 00:01:54.990
going back and forth. So you could have a
category that would be covering multiple
21

22
00:01:54.990 --> 00:02:01.920
products. So that's a pretty common use
case for many to many relationships. Now
22

23
00:02:01.920 --> 00:02:07.009
we just mentioned it there briefly, we
have unidirectional and bi-directional.
23

24
00:02:07.009 --> 00:02:12.390
Unidirectional is a one-way mapping. So
mapping is only done on one side of the
24

25
00:02:12.390 --> 00:02:15.569
relationship. The other side of the relationship does
25

26
00:02:15.569 --> 00:02:19.950
not know about the other entity and then
bi-directional is where you complete the
26

27
00:02:19.950 --> 00:02:24.510
mapping for both ways. So both sides of
the relationship know about each
27

28
00:02:24.510 --> 00:02:29.280
other. And the folks at Hibernate they
recommend to use bi-directional because
28

29
00:02:29.280 --> 00:02:33.420
then you can navigate the object graph
in either direction. So this is all about
29

30
00:02:33.420 --> 00:02:37.349
now getting those objects. In a
unidirectional, if you try to go
30

31
00:02:37.349 --> 00:02:42.180
backwards in a one-to-one or one way
unidirectional, you're not going to be
31

32
00:02:42.180 --> 00:02:46.769
able to because that property will be
missing on the object. So performance
32

33
00:02:46.769 --> 00:02:52.590
wise, there's really no difference. So
it's just more for use case wise to use
33

34
00:02:52.590 --> 00:02:59.010
the bi-directional. And next concept we
need to cover in mapping entities is the
34

35
00:02:59.010 --> 00:03:04.440
owning side of the relationship. So one
entity will have an ownership to the
35

36
00:03:04.440 --> 00:03:11.459
other entity. On one to one, this is where
the foreign key is specified. One to many
36

37
00:03:11.459 --> 00:03:17.910
and many to one is typically the many
side. And typically, when we're doing the
37

38
00:03:17.910 --> 00:03:23.430
mappings there's an attribute called mappedBy and that is the attribute that we're
38

39
00:03:23.430 --> 00:03:28.160
going to see and use to define the
ownership reference of the relationship.
39

40
00:03:28.160 --> 00:03:33.419
Next we want to talk about fetch type. So
that there's two such types that are
40

41
00:03:33.419 --> 00:03:38.099
we're going to be dealing with inside of
JPA. Lazy fetch type and this means
41

42
00:03:38.099 --> 00:03:41.120
data is not going to be queried until it's
referenced. So you could have a
42

43
00:03:41.120 --> 00:03:45.989
relationship and what Hibernate is going
to do under the covers is when you go to
43

44
00:03:45.989 --> 00:03:52.950
ask for that the list, it's going to run the
query then. So it only do the work when
44

45
00:03:52.950 --> 00:03:58.669
it needs to. And then an eager fetch type,
the data is all queried upfront. So
45

46
00:03:58.669 --> 00:04:06.060
Hibernate 5 does support the JPA 2.1
fetch type defaults and I think this
46

47
00:04:06.060 --> 00:04:10.560
might have changed from four to five
before Hibernate. I'm thinking version four
47

48
00:04:10.560 --> 00:04:15.269
Hibernate was all lazy but now they are
compliant with the JPA 2.1
48

49
00:04:15.269 --> 00:04:23.460
standard and that is going to be one to
many is lazy, many to one is eager, many
49

50
00:04:23.460 --> 00:04:27.090
to many is lazy and one to one is eager. So
50

51
00:04:27.090 --> 00:04:31.500
this is all from the JPA standard and
affects how that object is built
51

52
00:04:31.500 --> 00:04:35.430
when you initially call it out of the
database and goes through the ORM
52

53
00:04:35.430 --> 00:04:41.130
mapping. Now we need to also
talk about cascade types. It's basically
53

54
00:04:41.130 --> 00:04:44.910
how state changes are going to be
cascaded from parent objects to child
54

55
00:04:44.910 --> 00:04:50.430
objects. So when you make changes to an object,
if you delete a parent object,
55

56
00:04:50.430 --> 00:04:54.449
the child objects get deleted from the
database. So a lot of important stuff
56

57
00:04:54.449 --> 00:05:01.290
happens here and then we do have several
categories to talk about. So the persist
57

58
00:05:01.290 --> 00:05:06.810
cascade type, any save operation. So if
you have child entities involved, the
58

59
00:05:06.810 --> 00:05:11.400
child entities will also get saved in a
save operation of the parent. Merge if
59

60
00:05:11.400 --> 00:05:15.660
you're merging entities and there's child
entities, they are also going to get
60

61
00:05:15.660 --> 00:05:21.870
merged and then just like refresh. This
is going to be a refresh operation. So
61

62
00:05:21.870 --> 00:05:27.930
within JPA you can ask the database to
basically refresh the entity, go out and
62

63
00:05:27.930 --> 00:05:31.260
fetch new data and exactly that's what's
going to be happening there with the
63

64
00:05:31.260 --> 00:05:38.370
refresh operation. Then remove if you
remove a parent entity, now the child
64

65
00:05:38.370 --> 00:05:44.310
entities will also get removed. Then
there's also the detach though. You can
65

66
00:05:44.310 --> 00:05:48.720
get an entity and if you go into the
detach state, that means you're no longer
66

67
00:05:48.720 --> 00:05:53.130
associated with a Hibernate session. And
this is one that definitely trips up
67

68
00:05:53.130 --> 00:05:57.090
people because if you are in a detached
state, you will get an error if you try
68

69
00:05:57.090 --> 00:06:03.260
to access a lazy association. But the
detach cascade type is going to
69

70
00:06:03.260 --> 00:06:09.539
basically say when I detach a parent,
all the children will also be detached.
70

71
00:06:09.539 --> 00:06:15.419
And then we do have the option of all
and all the previously mentioned cascade
71

72
00:06:15.419 --> 00:06:21.630
types will be applied and it's important
to point out that by default, no cascade
72

73
00:06:21.630 --> 00:06:27.180
operations are applied. So if you do not
specify the cascade type, then you're
73

74
00:06:27.180 --> 00:06:31.650
going to have to manually manage
everything here. So if you were to delete
74

75
00:06:31.650 --> 00:06:35.969
a parent, you'd have to first go and
delete the children and save that and
75

76
00:06:35.969 --> 00:06:40.110
then you manage it then delete the parent. So the cascade types can definitely save
76

77
00:06:40.110 --> 00:06:43.940
you a lot of work
but when misused that can cause you some
77

78
00:06:43.940 --> 00:06:52.160
expected problems too. Then I also want
to talk about embeddable types. So JPA in
78

79
00:06:52.160 --> 00:06:55.730
Hibernate do support an embeddable types
and this is basically a POJO that you
79

80
00:06:55.730 --> 00:07:01.760
can use for a common set of properties
and reuse that in your entities. And a
80

81
00:07:01.760 --> 00:07:06.080
really good example is if you have like
an order entity. You may have a billing
81

82
00:07:06.080 --> 00:07:10.490
address and a shipping address, then this
is a perfect use case for having an
82

83
00:07:10.490 --> 00:07:14.390
address type. So you don't have to repeat
all those properties. So it's just basic
83

84
00:07:14.390 --> 00:07:21.410
hello composition, so being able to reuse
that. And then I do want to point out
84

85
00:07:21.410 --> 00:07:26.270
that Hibernate does support inheritance. So we do have several strategies about
85

86
00:07:26.270 --> 00:07:31.220
how the objects are mapped to the
database. Obviously a relational database
86

87
00:07:31.220 --> 00:07:36.290
does not have the concept of inheritance
but the first inheritance that we need
87

88
00:07:36.290 --> 00:07:38.780
to talk about is map superclass. And this is
something you're going to see me use
88

89
00:07:38.780 --> 00:07:44.120
coming up and this is where the entities
inherit from a superclass but a database
89

90
00:07:44.120 --> 00:07:47.690
table is not created for that superclass. You're going to have a set of properties
90

91
00:07:47.690 --> 00:07:53.360
on that superclass and then those
entities will get their own table or
91

92
00:07:53.360 --> 00:07:59.990
joint table. And this is going to apply
to entities and when we do subtypes. So
92

93
00:07:59.990 --> 00:08:03.710
important distinction here. So if you
have just a type and inherits from the
93

94
00:08:03.710 --> 00:08:08.570
default of object, it's going to get its
own table. But if you have like a shape
94

95
00:08:08.570 --> 00:08:12.920
and define a square and this is where
these strategies are going to come into
95

96
00:08:12.920 --> 00:08:19.940
play. So the default of Hibernate is to
use a single table. So as you expand out
96

97
00:08:19.940 --> 00:08:25.820
your subclasses, all those subclasses
will share a single table and you're
97

98
00:08:25.820 --> 00:08:29.750
expected to provide columns for the
different properties that are going to
98

99
00:08:29.750 --> 00:08:35.810
be in play. Next is a joined table. So as
you extend out your classes the base
99

100
00:08:35.810 --> 00:08:40.070
class is going to have its own table and
the subclasses are going to have their
100

101
00:08:40.070 --> 00:08:46.010
own table. But the subclass tables will
only have the different columns. So
101

102
00:08:46.010 --> 00:08:49.970
whatever additional properties that
subclass has will be in its own
102

103
00:08:49.970 --> 00:08:54.920
table. But all the base properties will
be in the base class table
103

104
00:08:54.920 --> 00:09:00.279
you'll need to do a join between the two. And then the next is table per class and
104

105
00:09:00.279 --> 00:09:06.019
this is a strategy where each subclass
will have its own table. So kind of
105

106
00:09:06.019 --> 00:09:10.220
violating some database rules and by
having extended properties across
106

107
00:09:10.220 --> 00:09:15.589
multiple tables because you'll be
repeating the properties for each class
107

108
00:09:15.589 --> 00:09:21.500
in each table. So a lot of debate as to
when to use what. Each has its own
108

109
00:09:21.500 --> 00:09:27.680
upsides and downsides. The joined table
does look technically correct but it
109

110
00:09:27.680 --> 00:09:32.149
does force you to do a join and would in
theory could cause some performance
110

111
00:09:32.149 --> 00:09:38.209
problems on larger data sets. Last thing
I want to talk about is creating update
111

112
00:09:38.209 --> 00:09:44.000
timestamps. I'm going to show you an example. This
is coming up and it's often, I consider the best
112

113
00:09:44.000 --> 00:09:47.600
practice to use, create an update
timestamps. It's a nice little audit
113

114
00:09:47.600 --> 00:09:52.610
trail. So you can see when entities were
created in the database and also when
114

115
00:09:52.610 --> 00:09:57.829
they were last updated. JPA does support
PrePersist and PreUpdate. These are
115

116
00:09:57.829 --> 00:10:01.910
life cycle callbacks that you can tap
into and then set up a strategy to
116

117
00:10:01.910 --> 00:10:06.079
update your timestamps around PrePersist for the create and PreUpdate
117

118
00:10:06.079 --> 00:10:11.329
for any update action. And then Hibernate
and this is Hibernate specific. You need to
118

119
00:10:11.329 --> 00:10:15.589
keep that in mind. It is a
hibernation interpretation of the
119

120
00:10:15.589 --> 00:10:18.170
library that Hibernate is providing for
JPA
120

121
00:10:18.170 --> 00:10:23.570
and that's the at creation time stand
annotation and update timestamp
121

122
00:10:23.570 --> 00:10:28.550
annotation. These both can be used to
update timestamps and when I'm using a
122

123
00:10:28.550 --> 00:10:31.339
Hibernate project, these are the ones
that I personally use even though I'm
123

124
00:10:31.339 --> 00:10:35.449
breaking the JPA standards so to
speak. They're just a little more
124

125
00:10:35.449 --> 00:10:39.230
convenient. You don't have to write as much
logic as when you're sporting the
125

126
00:10:39.230 --> 00:10:42.730
prepossessed and pre update.
