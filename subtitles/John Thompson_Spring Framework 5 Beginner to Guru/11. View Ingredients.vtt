WEBVTT
0
1
00:00:04.279 --> 00:00:07.820
Alright, in the next few videos we are
going to look at working with the
1

2
00:00:07.820 --> 00:00:11.759
ingredients. So we have the recipe and
then the ingredients and then unit of
2

3
00:00:11.759 --> 00:00:16.529
measure. So we have listed the
properties to deal with here and what we
3

4
00:00:16.529 --> 00:00:20.640
want to do is I want to show you the
nuances of working with more complex
4

5
00:00:20.640 --> 00:00:25.170
data models here. So there are some
nuances. I actually almost did this as an
5

6
00:00:25.170 --> 00:00:28.439
assignment to do all the CRUD operations
for ingredients but there's enough
6

7
00:00:28.439 --> 00:00:32.640
nuances to learn along the way. I decided
to not do that and take you through it
7

8
00:00:32.640 --> 00:00:36.809
step by step and working with this more
complex object model. So we got a lot to
8

9
00:00:36.809 --> 00:00:40.530
learn. Actually we're going to write a
lot of code in this and in this video
9

10
00:00:40.530 --> 00:00:44.129
specifically we're going to create a new
screen to just show a list of
10

11
00:00:44.129 --> 00:00:48.300
ingredients against the recipe. So we'll
have a recipe, we will they'll go into the
11

12
00:00:48.300 --> 00:00:52.770
recipes and then display a list of
ingredients and from that, we're going to
12

13
00:00:52.770 --> 00:00:57.600
build CRUD operations on the ingredients. So we'll be working within a specific
13

14
00:00:57.600 --> 00:01:01.440
recipe. So there are some nuances that we
need to do as far as setting up the URLs
14

15
00:01:01.440 --> 00:01:07.200
and whatnot and how we are working with a Spring MVC but Spring Data and the
15

16
00:01:07.200 --> 00:01:12.030
JPA data model. So I'm going to get
going on this video here and show you
16

17
00:01:12.030 --> 00:01:17.759
how we implement displaying a list of
ingredients for a specific recipe.
17

18
00:01:17.759 --> 00:01:21.240
Alright in this video we want to take a
look at viewing ingredients. I'm going to
18

19
00:01:21.240 --> 00:01:25.799
set it up so we can go buy a recipe,
drill into the recipe and then we want
19

20
00:01:25.799 --> 00:01:30.390
to be able to view the ingredients off
that recipe. So I've set up a unit test
20

21
00:01:30.390 --> 00:01:33.360
for our controller. That's kind of our
starting point since we'll be following
21

22
00:01:33.360 --> 00:01:38.040
some test-driven development here and in
it, you can see there I've got it set up
22

23
00:01:38.040 --> 00:01:43.890
for the RecipeService to go ahead and
find a command by ID. So we've already
23

24
00:01:43.890 --> 00:01:48.119
been doing this before. So we're going to
continue on the list view to use the
24

25
00:01:48.119 --> 00:01:54.119
recipe, a list of the recipe command
objects. And on line 47 there you can see
25

26
00:01:54.119 --> 00:01:59.250
I'm performing it get and note the URLs I'm doing, recipe 1 and then
26

27
00:01:59.250 --> 00:02:06.090
ingredients and I'm going to expect back
a view called recipe/ingredient/list.
27

28
00:02:06.090 --> 00:02:11.250
And the way that's going to work, that's
going to render back to under recipe, a
28

29
00:02:11.250 --> 00:02:15.200
folder called ingredient and then
list. So let's go ahead and open that up
29

30
00:02:15.200 --> 00:02:21.590
now and here's a pretty simple Thymeleaf
template. Let's take a peek at that
30

31
00:02:21.590 --> 00:02:26.720
inside of Chrome and we can see that
here, we are going to get a list of the
31

32
00:02:26.720 --> 00:02:31.040
different ingredients that are listed
there. So that will come up at the recipe
32

33
00:02:31.040 --> 00:02:34.900
so we're drilling into the recipe to the
ingredients. So we are kind of following the same
33

34
00:02:34.900 --> 00:02:41.030
model here that we have been as far as
seeing how the ingredients get rendered
34

35
00:02:41.030 --> 00:02:48.380
and how we view that. So it's going to
continue up on this. So if I close this
35

36
00:02:48.380 --> 00:02:51.020
out
and let's go ahead and run our test,
36

37
00:02:51.020 --> 00:02:58.160
prove that our unit test is in fact
functional, you can see that test
37

38
00:02:58.160 --> 00:03:01.400
doesn't run pretty quick. Now let's go
ahead and look at the implementation.
38

39
00:03:01.400 --> 00:03:05.960
I've already implemented this on the
controller. So now we have a new
39

40
00:03:05.960 --> 00:03:11.930
controller called IngredientController. That's going to get a RecipeService and
40

41
00:03:11.930 --> 00:03:16.310
we're going to do constructor based
injection on that. So by requiring the
41

42
00:03:16.310 --> 00:03:18.770
constructor Spring we will automatically
inject that for us.
42

43
00:03:18.770 --> 00:03:25.209
See on line 24 I've set up a GetMapping to
recipe and taking in the parameter
43

44
00:03:25.209 --> 00:03:32.740
recipeid and we bring in the recipeid
off the path using the @PathVariable
44

45
00:03:32.740 --> 00:03:39.830
annotation there in line 26. And we also
bring in the Model and got a quick debug
45

46
00:03:39.830 --> 00:03:44.630
statement on there. So I'm using the
project Lombok annotation there on 14
46

47
00:03:44.630 --> 00:03:53.630
and then we add in the attribute recipe
and we'll review the HTML real quick. So
47

48
00:03:53.630 --> 00:03:58.870
that is going to come in, see if that
recipe ingredients is empty or not.
48

49
00:03:58.870 --> 00:04:04.730
Assuming that it is not, down here on
line 57 is where all the magic is going
49

50
00:04:04.730 --> 00:04:09.230
to happen where we build out the table,
all the table rows for each ingredient
50

51
00:04:09.230 --> 00:04:15.470
in the set that's going to get returned
back on recipe. So on line 57 they're
51

52
00:04:15.470 --> 00:04:21.710
saying we're setting up an ingredient
variable for an iterator from recipe dot
52

53
00:04:21.710 --> 00:04:26.300
ingredients. And then we're going to
output that data. So let's go ahead
53

54
00:04:26.300 --> 00:04:31.340
and
run this right now inside. We will bring up
54

55
00:04:31.340 --> 00:04:39.780
Spring Boot. We'll get it started and
toggle over to Chrome. Okay that Spring
55

56
00:04:39.780 --> 00:04:45.990
Boot is up and running. Let's come on
over to Chrome and we'll come back to
56

57
00:04:45.990 --> 00:04:55.560
the root context. Now we can see my
recipes and if we come to view, we have a
57

58
00:04:55.560 --> 00:05:00.690
View button there and then we get a
table of ingredients. So you can see that
58

59
00:05:00.690 --> 00:05:04.650
I brought up the list of ingredients. You
can see how these kind of look similar
59

60
00:05:04.650 --> 00:05:08.550
there. A little bit of formatting
difference because we have a more
60

61
00:05:08.550 --> 00:05:13.830
data there and the table did adjust
accordingly. But now we already have
61

62
00:05:13.830 --> 00:05:18.540
links there to view it, update it or
delete it. That has not been implemented.
62

63
00:05:18.540 --> 00:05:24.000
Those are what we'll be showing in
upcoming videos to show you how to work
63

64
00:05:24.000 --> 00:05:29.370
with us. One more detail but we will step
through each one because we do run into
64

65
00:05:29.370 --> 00:05:34.020
a few nuances a long way with a more
complex data model. But I do want you to
65

66
00:05:34.020 --> 00:05:40.770
note that here, I've mapped recipe/ the
recipe ID to ingredients and I'm doing
66

67
00:05:40.770 --> 00:05:45.530
a list function of that URL.
