WEBVTT
0
1
00:00:09.170 --> 00:00:14.340
Okay! We just took a nice in-depth look
at Docker images and how the storage
1

2
00:00:14.340 --> 00:00:18.779
mechanisms inside of Docker works with
the new layers. Now, all those layers, just
2

3
00:00:18.779 --> 00:00:24.449
as a reminder, those layers are not
mutable. Meaning that, for the most part
3

4
00:00:24.449 --> 00:00:28.890
the container, when is it running, it
cannot write out to those. Except for one.
4

5
00:00:28.890 --> 00:00:33.480
The very last one is allowed to write to
and that's how our database Mongo is
5

6
00:00:33.480 --> 00:00:38.399
compress the storage because inside the
container that very last layer of
6

7
00:00:38.399 --> 00:00:42.540
storage is going to be their working and
write out data to it.
7

8
00:00:42.540 --> 00:00:45.780
So now, I want you to think, what happens
if I bounced that container? What's going to
8

9
00:00:45.780 --> 00:00:51.239
happen to that layer? It's my data
going to be saved, or will the database be
9

10
00:00:51.239 --> 00:00:55.500
lost? So, I'm going to go into a little
demonstration and show you exactly what
10

11
00:00:55.500 --> 00:00:58.050
happens here.
Okay, I'm going to demonstrate to you what
11

12
00:00:58.050 --> 00:01:02.989
happens with container storage. Now, I have
our Spring Boot Mongo database
12

13
00:01:02.989 --> 00:01:08.549
application up and running already.
I'm going to toggle over to Chrome, and we
13

14
00:01:08.549 --> 00:01:13.320
can see that I have a product there
called new product 222.
14

15
00:01:13.320 --> 00:01:23.369
So, let's go ahead and edit him and
 34555. Just a random
15

16
00:01:23.369 --> 00:01:30.780
number. So now, I can see that he's there
and I am going to go over here and bring
16

17
00:01:30.780 --> 00:01:34.829
him up so I can still see that 23455 is still there.
17

18
00:01:34.829 --> 00:01:38.729
Now, come back over here and let's go
ahead and restart this. We're going to
18

19
00:01:38.729 --> 00:01:45.420
bounce the Spring Boot Application and I
do have a Mongo tailing logs again and
19

20
00:01:45.420 --> 00:01:49.649
inside of my command window. And we see
that everything's up and happy. Now, let's
20

21
00:01:49.649 --> 00:01:55.920
take a quick peek here and do a refresh.
And we can see that that product is
21

22
00:01:55.920 --> 00:02:00.799
still there. So, let's take a look and see
what happens if I restart the container.
22

23
00:02:00.799 --> 00:02:05.880
So, I'm going to control C out of that.
Let's clear this so I get back up to
23

24
00:02:05.880 --> 00:02:11.569
the top. docker ps. And what I want to do is
24

25
00:02:11.569 --> 00:02:22.110
docker stop. And I'm just going to copy this
and paste that. So, I'm pasting in the
25

26
00:02:22.110 --> 00:02:31.530
container ID and hitting enter. I can
see I have no Docker images running, so
26

27
00:02:31.530 --> 00:02:34.170
I'm going to hit clear, just to clear the
screens so we don't get a bunch of
27

28
00:02:34.170 --> 00:02:41.280
commands on it. I'm using the up
arrow to go back through my commands and
28

29
00:02:41.280 --> 00:02:48.440
I'm going to start this. Now, if I do a
docker ps,
29

30
00:02:48.440 --> 00:02:55.140
now, I have a new container running.
It's completely different container that
30

31
00:02:55.140 --> 00:03:03.920
has been started. And this is now
priceless_bartik. So now, if I do docker
31

32
00:03:03.920 --> 00:03:08.420
logs - f on him
32

33
00:03:14.500 --> 00:03:20.600
I'm running there and I'm honestly not
sure how the MongoDB container
33

34
00:03:20.600 --> 00:03:28.010
will or driver will behave. So, let's
refresh this, and the driver did in fact
34

35
00:03:28.010 --> 00:03:34.460
survive the restart. So, other relational
databases like MySQL or Oracle might be
35

36
00:03:34.460 --> 00:03:37.910
upset about having the the database
restarted under it and having that
36

37
00:03:37.910 --> 00:03:42.200
socket connection broken. Mongo
apparently is not. Let's take a quick
37

38
00:03:42.200 --> 00:03:47.630
peek at the logs. So, we
did get an exception there but it wasn't
38

39
00:03:47.630 --> 00:03:53.450
a fatal exception. So, MongoDB did recover
from that. So interesting tidbit for me. I
39

40
00:03:53.450 --> 00:03:57.890
didn't expect that behavior from MongoDB
with us. A nice behavior not to crash the
40

41
00:03:57.890 --> 00:04:02.270
whole container. But, what does happen
here is, I don't have my products anymore.
41

42
00:04:02.270 --> 00:04:08.900
So, you can see, I'm on the list function and that
product is not there anymore. So, that's
42

43
00:04:08.900 --> 00:04:13.370
an important thing so that persisted
data did not make it across the
43

44
00:04:13.370 --> 00:04:17.930
container restart. Okay, you can see that
the data disappeared. And what happened
44

45
00:04:17.930 --> 00:04:23.030
was, when the container went down and
came back up, that last layer that we
45

46
00:04:23.030 --> 00:04:29.540
talked about, that actually got created
again as a new layer and attached to
46

47
00:04:29.540 --> 00:04:36.979
the container when it started up. So, the
old one went away and a new one was
47

48
00:04:36.979 --> 00:04:41.390
allocated for the new container, so we
wound up with a blank database. And this
48

49
00:04:41.390 --> 00:04:46.100
can be a double-edged sword. If you're
not expecting this type of behavior, it
49

50
00:04:46.100 --> 00:04:51.290
can definitely get you in trouble, where
your persisted data disappears. But,
50

51
00:04:51.290 --> 00:04:56.660
it also gives us a lot of flexibility as
developers, so we can bring up a
51

52
00:04:56.660 --> 00:05:00.560
Greenfield Mongo database and not have
to worry about development
52

53
00:05:00.560 --> 00:05:03.470
wreckage for our test. So, this is an
important feature that we're going to
53

54
00:05:03.470 --> 00:05:08.330
utilize later in the course, and give us
a lot of flexibility in working with
54

55
00:05:08.330 --> 00:05:13.729
this. Now, a caveat, I want to point out
about these little detached, or I don't
55

56
00:05:13.729 --> 00:05:18.950
even say detached, it's not a term I even
 introduce you to yet. This layer that
56

57
00:05:18.950 --> 00:05:23.330
we're writing to, when we drop the
container, that actually sticks around on
57

58
00:05:23.330 --> 00:05:26.650
the filesystem, and if you're tight on
space, that
58

59
00:05:26.650 --> 00:05:31.180
really clog up a lot of space on 
your filesystem. I was running out on a
59

60
00:05:31.180 --> 00:05:36.789
small small VM with Docker and used to keep start these up and drop and start them
60

61
00:05:36.789 --> 00:05:41.350
up and drop them. These little chunks
can really start accumulating space, and
61

62
00:05:41.350 --> 00:05:46.449
this is on the current flavor a Docker.
I've been working with several releases
62

63
00:05:46.449 --> 00:05:53.830
up to this. I think around 1.15 now, if I
remember right. The earlier versions did
63

64
00:05:53.830 --> 00:05:58.840
not clean those up automatically, and it
could lead back a lot of stuff and this
64

65
00:05:58.840 --> 00:06:02.620
is something to be aware of. Now, is this
something that's going to be changed in future Dockers?
65

66
00:06:02.620 --> 00:06:08.050
Quite possibly. I don't know that the
long-term plan for this, but I'm making you
66

67
00:06:08.050 --> 00:06:11.260
aware of it because there are some
commands that we want to utilize to
67

68
00:06:11.260 --> 00:06:16.870
clean up these effectively orphaned
files that are being left in their file
68

69
00:06:16.870 --> 00:06:22.210
systems. So, it's like the containers there,
then it went away, but it still leaves a
69

70
00:06:22.210 --> 00:06:27.669
file in the file system, and after time,
this will accumulate space and
70

71
00:06:27.669 --> 00:06:31.180
can cause us headaches by running out of
disk space, if we get too many of them
71

72
00:06:31.180 --> 00:06:34.960
laying around, or if we don't have
adequate disk space. Definitely causes
72

73
00:06:34.960 --> 00:06:41.830
headaches. Now, the next section, of course,
we can do persistent storage. And what we
73

74
00:06:41.830 --> 00:06:47.020
need to do is mount out a volume to the
host system. So, this is where the
74

75
00:06:47.020 --> 00:06:52.510
container is going to interact more with
the host. So, we're going to show you
75

76
00:06:52.510 --> 00:06:57.940
exactly how to do that, because of course,
we want to be having persistent storage
76

77
00:06:57.940 --> 00:07:01.870
on our hard disk. We don't want to be
going away and not being able to get
77

78
00:07:01.870 --> 00:07:06.280
back to it. In fact, I've been developing
with Docker for some time, I have a
78

79
00:07:06.280 --> 00:07:11.740
development MySQL database, that I
used as my sandbox and I have persistent
79

80
00:07:11.740 --> 00:07:16.539
storage in there. I can drop this machine.
Reboot it. Bring it completely back up
80

81
00:07:16.539 --> 00:07:22.810
its OS X so you don't have to reboot very
often. But, when I do that, it's just like
81

82
00:07:22.810 --> 00:07:28.780
having a normal MySQL database. The data is still 
there. Starts back up and everything's
82

83
00:07:28.780 --> 00:07:33.460
working normally. So, we're going to
get into that exactly how to set that up
83

84
00:07:33.460 --> 00:07:37.139
in the next section of this course.
