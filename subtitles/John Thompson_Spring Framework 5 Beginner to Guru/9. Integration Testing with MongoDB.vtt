WEBVTT
0
1
00:00:00.047 --> 00:00:03.214
(gentle guitar music)
1

2
00:00:04.991 --> 00:00:07.326
Alright now the one last thing I wanna do
2

3
00:00:07.326 --> 00:00:11.091
is correct this test that we have ignored.
3

4
00:00:11.091 --> 00:00:13.418
So this was working, this was a unit test,
4

5
00:00:13.418 --> 00:00:15.418
or I should say, an integration test,
5

6
00:00:15.418 --> 00:00:18.000
against it, against the database,
6

7
00:00:18.000 --> 00:00:21.022
previously, when we had the H2 in memory database
7

8
00:00:21.022 --> 00:00:24.938
and we were using the annotation DataJpaTest.
8

9
00:00:24.938 --> 00:00:27.328
And it's important to point out that this is bringing up
9

10
00:00:27.328 --> 00:00:30.916
a subset of the Spring context, so they call it a slice
10

11
00:00:30.916 --> 00:00:33.839
but it brings up the data slice up for us to test with.
11

12
00:00:33.839 --> 00:00:36.368
Now this is gonna behave a little bit different for us,
12

13
00:00:36.368 --> 00:00:40.203
so I'm gonna remove the @Ignore annotation.
13

14
00:00:40.203 --> 00:00:41.857
So we don't want that guy.
14

15
00:00:41.857 --> 00:00:44.223
Let's clean up the import as well.
15

16
00:00:44.223 --> 00:00:46.085
(clicking)
16

17
00:00:46.085 --> 00:00:48.585
And now, rather than JPA test,
17

18
00:00:50.318 --> 00:00:52.677
we have a Mongo test.
18

19
00:00:52.677 --> 00:00:54.943
And we're gonna go ahead and run this
19

20
00:00:54.943 --> 00:00:56.230
and we're gonna see it fail.
20

21
00:00:56.230 --> 00:00:57.180
So I step through this
21

22
00:00:57.180 --> 00:00:59.363
and I'll show you exactly why it fails.
22

23
00:00:59.363 --> 00:01:02.157
(clicking)
23

24
00:01:02.157 --> 00:01:04.115
And our tests are failing
24

25
00:01:04.115 --> 00:01:06.760
because we're not getting any values out of the database,
25

26
00:01:06.760 --> 00:01:10.702
so our database initialization is no longer working.
26

27
00:01:10.702 --> 00:01:13.035
Get rid of that import also.
27

28
00:01:14.974 --> 00:01:18.581
So if you remember, we were initializing these values
28

29
00:01:18.581 --> 00:01:22.717
in SQL, now we moved them over to our bootstrap class.
29

30
00:01:22.717 --> 00:01:26.625
So let's go ahead and get to that class real quick.
30

31
00:01:26.625 --> 00:01:29.876
So this class here sets up that test data
31

32
00:01:29.876 --> 00:01:32.000
that we're looking for so these tests should run
32

33
00:01:32.000 --> 00:01:35.225
once we get that data populated into the Mongo database.
33

34
00:01:35.225 --> 00:01:36.769
Now you would think...
34

35
00:01:36.769 --> 00:01:39.019
(clicking)
35

36
00:01:45.982 --> 00:01:48.798
you would think if we wired it up this way,
36

37
00:01:48.798 --> 00:01:51.014
we could just simply call upon it,
37

38
00:01:51.014 --> 00:01:52.890
but I'm gonna show you that this fails.
38

39
00:01:52.890 --> 00:01:54.539
Because what's happening is
39

40
00:01:54.539 --> 00:01:57.552
we only have part of the context up.
40

41
00:01:57.552 --> 00:01:59.837
And we can see that we're getting NoSuchBeanDefinitions.
41

42
00:01:59.837 --> 00:02:01.749
So what we can do
42

43
00:02:01.749 --> 00:02:04.140
it's not Autowired
43

44
00:02:04.140 --> 00:02:05.995
(computer ticks)
44

45
00:02:05.995 --> 00:02:09.119
but we can ask for the repositories.
45

46
00:02:09.119 --> 00:02:11.177
So I'm gonna cheat here.
46

47
00:02:11.177 --> 00:02:14.461
(clicking and scrolling)
47

48
00:02:14.461 --> 00:02:18.419
So we need these two repositories here as well.
48

49
00:02:18.419 --> 00:02:22.138
(clicking and scrolling)
49

50
00:02:22.138 --> 00:02:24.271
And we're not gonna do private final on 'em,
50

51
00:02:24.271 --> 00:02:26.041
it's just a unit test.
51

52
00:02:26.041 --> 00:02:29.144
But some people ask me why we do private final
52

53
00:02:29.144 --> 00:02:32.148
and we wanna make our classes immutable.
53

54
00:02:32.148 --> 00:02:35.315
So it's just a good habit to get into.
54

55
00:02:36.523 --> 00:02:39.302
So we can ask for the repositories.
55

56
00:02:39.302 --> 00:02:42.885
And now what we can do is recipeBootstrap.
56

57
00:02:43.931 --> 00:02:47.128
Which we don't need to keep that up there.
57

58
00:02:47.128 --> 00:02:49.378
(clicking)
58

59
00:02:54.224 --> 00:02:57.765
And that takes in the categoryRepository.
59

60
00:02:57.765 --> 00:03:01.104
(clicking and scrolling)
60

61
00:03:01.104 --> 00:03:05.021
recipeRepository and unitOfMeasureRepository.
61

62
00:03:06.075 --> 00:03:09.033
So we're basically mimicking what Spring would do
62

63
00:03:09.033 --> 00:03:11.098
for us in the context.
63

64
00:03:11.098 --> 00:03:14.818
(clicking and scrolling)
64

65
00:03:14.818 --> 00:03:18.535
I think a null value would go through there.
65

66
00:03:18.535 --> 00:03:20.572
So let's see if this actually works,
66

67
00:03:20.572 --> 00:03:23.539
because we just wanna call that on application on that
67

68
00:03:23.539 --> 00:03:26.617
and we're not using that context in there.
68

69
00:03:26.617 --> 00:03:30.422
So I'm just gonna pass at it, event in as null,
69

70
00:03:30.422 --> 00:03:32.650
so we're not checking that but it'll trigger
70

71
00:03:32.650 --> 00:03:34.577
all these others to load this.
71

72
00:03:34.577 --> 00:03:36.628
So let's see if this works now.
72

73
00:03:36.628 --> 00:03:39.761
(clicking and scrolling)
73

74
00:03:39.761 --> 00:03:43.845
Yeah we can that we did get one passing and one failing.
74

75
00:03:43.845 --> 00:03:45.928
(clicks)
75

76
00:03:46.812 --> 00:03:49.629
I'm gonna pause this for a second, take a closer look.
76

77
00:03:49.629 --> 00:03:52.243
Okay, I didn't want you to see me troubleshooting,
77

78
00:03:52.243 --> 00:03:55.306
tumbling through this but I do see what is going on here,
78

79
00:03:55.306 --> 00:03:57.630
so what we have is that it,
79

80
00:03:57.630 --> 00:04:00.340
this is returning a non-unique result.
80

81
00:04:00.340 --> 00:04:02.458
So when we went through that,
81

82
00:04:02.458 --> 00:04:05.389
we're expecting one comeback but we got more than one.
82

83
00:04:05.389 --> 00:04:09.973
So what's happening is we have the before method here,
83

84
00:04:09.973 --> 00:04:13.896
and that is loading up our database in the before.
84

85
00:04:13.896 --> 00:04:17.682
And that method is going to every time before a test method.
85

86
00:04:17.682 --> 00:04:20.550
So what happened is this got called twice.
86

87
00:04:20.550 --> 00:04:22.153
And there's a couple different ways we can do this.
87

88
00:04:22.153 --> 00:04:24.812
We've changed this to a before class,
88

89
00:04:24.812 --> 00:04:28.609
but what's happening is now our database is more persistent.
89

90
00:04:28.609 --> 00:04:32.878
Before in the JPA context, this was running on startup.
90

91
00:04:32.878 --> 00:04:35.445
Now we're running before each test.
91

92
00:04:35.445 --> 00:04:39.612
And what we can do, let it be a little bit cleaner here.
92

93
00:04:40.945 --> 00:04:42.442
If we come in
93

94
00:04:42.442 --> 00:04:43.275
and do
94

95
00:04:44.464 --> 00:04:48.582
unitOfMeasureRepository.deleteAll().
95

96
00:04:48.582 --> 00:04:52.473
And this is gonna basically set up the reset the database.
96

97
00:04:52.473 --> 00:04:54.670
(clicking and scrolling)
97

98
00:04:54.670 --> 00:04:56.554
And one more of the...
98

99
00:04:56.554 --> 00:04:58.940
(clicking and scrolling)
99

100
00:04:58.940 --> 00:05:03.107
And I'm gonna change the order of this just in case,
100

101
00:05:04.061 --> 00:05:07.275
because the recipe does have cleaners to it.
101

102
00:05:07.275 --> 00:05:08.731
So let's go ahead and run this again.
102

103
00:05:08.731 --> 00:05:10.643
I think this is gonna take care of it.
103

104
00:05:10.643 --> 00:05:11.476
And remember,
104

105
00:05:11.476 --> 00:05:13.875
MongoDB doesn't have the concept of transaction.
105

106
00:05:13.875 --> 00:05:17.904
So in the JPA world, you can see the test passed now.
106

107
00:05:17.904 --> 00:05:21.831
So just point out in the JPA world, we had transactions
107

108
00:05:21.831 --> 00:05:25.291
and that the default behavior of Spring is to roll back
108

109
00:05:25.291 --> 00:05:27.478
after each test method, so your integration tests
109

110
00:05:27.478 --> 00:05:29.364
are gonna stay a little bit cleaner.
110

111
00:05:29.364 --> 00:05:32.622
But here in Mongo, we don't have transactions,
111

112
00:05:32.622 --> 00:05:36.372
so this is probably the best way to handle it
112

113
00:05:36.372 --> 00:05:38.901
is by going in, cleaning up the database
113

114
00:05:38.901 --> 00:05:41.343
and then we're gonna call our bootstrap.
114

115
00:05:41.343 --> 00:05:44.626
So, we're setting up our own bootstrap bean to do that.
115

116
00:05:44.626 --> 00:05:47.714
And then we'll initialize the data that way.
116

117
00:05:47.714 --> 00:05:49.918
Now there is one other way I could have done this.
117

118
00:05:49.918 --> 00:05:53.122
I could have set up a special test configuration
118

119
00:05:53.122 --> 00:05:55.689
to bring in the bootstrap package
119

120
00:05:55.689 --> 00:05:59.520
and ask the Spring context to wire up that one bean,
120

121
00:05:59.520 --> 00:06:03.159
but I'm not quite sure which one would be better, it'd be,
121

122
00:06:03.159 --> 00:06:06.343
as we say, six in one, half a dozen in the other.
122

123
00:06:06.343 --> 00:06:09.605
So you could do it that way, that'd be absolutely valid.
123

124
00:06:09.605 --> 00:06:11.866
Here, I just thought it would be a little bit simpler
124

125
00:06:11.866 --> 00:06:15.888
and cleaner to work with the Spring boot slice.
125

126
00:06:15.888 --> 00:06:19.193
The Mongo test, we just needed that one class there.
126

127
00:06:19.193 --> 00:06:21.484
So now we're gonna set up that class.
127

128
00:06:21.484 --> 00:06:22.914
Basically, we clean up the database
128

129
00:06:22.914 --> 00:06:24.992
instantiate our bootstrap class
129

130
00:06:24.992 --> 00:06:27.609
by injecting the repositories into it
130

131
00:06:27.609 --> 00:06:29.683
and then call it the onApplicationEvent,
131

132
00:06:29.683 --> 00:06:31.594
which is gonna initialize our data.
132

133
00:06:31.594 --> 00:06:35.427
And now our integration tests are now passing.
