WEBVTT
0
1
00:00:09.260 --> 00:00:13.530
Okay. In this part of the course, we're gonna take a look at setting up a Hello
1

2
00:00:13.530 --> 00:00:16.770
World in Docker. We wanna make sure
that we can get a container to start up
2

3
00:00:16.770 --> 00:00:20.789
and spit out Hello World. So, in all
programming languages, we always start
3

4
00:00:20.789 --> 00:00:24.320
off with a Hello World app. This is
my way of making sure, that you have
4

5
00:00:24.320 --> 00:00:29.789
completed your Docker installation. So if
Hello World does not work, you need to
5

6
00:00:29.789 --> 00:00:33.660
stop right here, and make sure that you
get Docker properly installed on your
6

7
00:00:33.660 --> 00:00:36.390
development platform, whether it's
Windows, OS X
7

8
00:00:36.390 --> 00:00:41.520
or Linux. These both all have nuances on
how they get installed, so right now, in
8

9
00:00:41.520 --> 00:00:44.219
this module, we're gonna go in and
make sure that we have Hello World
9

10
00:00:44.219 --> 00:00:48.750
working for Docker. Okay! One thing I
wanna point out to you though, as a
10

11
00:00:48.750 --> 00:00:53.340
little bonus. I developed a Docker cheat
sheet for Spring developers. Now this is
11

12
00:00:53.340 --> 00:00:56.850
just a list of commands I assembled, as I
was going through and learning Docker
12

13
00:00:56.850 --> 00:01:02.399
myself, a while back. This is a bunch
of Handy commands. What I wanna do
13

14
00:01:02.399 --> 00:01:05.519
is look up this, because I can never
remember this on the top of my head.
14

15
00:01:05.519 --> 00:01:09.600
I wanna go in and delete all my Docker
images, so I'm gonna grab this command,
15

16
00:01:09.600 --> 00:01:18.540
right here, and I think I gotta copy it
to the copy, so that's a handy line.
16

17
00:01:18.540 --> 00:01:22.470
I'm gonna toggle over to the command
line and I just listed out all the image
17

18
00:01:22.470 --> 00:01:34.950
that I have. And that did not work. So,
let's try this one more time, that time
18

19
00:01:34.950 --> 00:01:39.810
it worked. So this is Docker removed.
rmi is remove images. What this is
19

20
00:01:39.810 --> 00:01:45.750
passing in is a Docker images command
quiet mode so that only lists the tag. So
20

21
00:01:45.750 --> 00:01:50.399
its kind of a little recursive command that's gonna go in and
21

22
00:01:50.399 --> 00:01:54.450
delete all the images. You can see
it's going out and deleting a bunch of
22

23
00:01:54.450 --> 00:01:59.490
stuff. One thing from experienced
Docker, if you're learning a bunch of
23

24
00:01:59.490 --> 00:02:07.290
stuff, it can clog up a lot. I'm doing
docker images -a, so the only thing
24

25
00:02:07.290 --> 00:02:13.380
I have about there's artifactory
that might still be running. No it's not right.
25

26
00:02:13.380 --> 00:02:16.380
For some reason... I'm
not gonna look into that right now.
26

27
00:02:16.380 --> 00:02:22.320
What we wanna do is make sure that
Docker Hello World is running. So I
27

28
00:02:22.320 --> 00:02:27.300
actually like clear the screen. Let's
do a docker
28

29
00:02:27.300 --> 00:02:37.470
run hello-world. So we can see that 
I wasn't able to find it, so I wanted you
29

30
00:02:37.470 --> 00:02:42.990
to see that. I wasn't able to find it
locally. It went through and I ran
30

31
00:02:42.990 --> 00:02:48.510
and we see in the middle screen there,
downloaded newer image finishes
31

32
00:02:48.510 --> 00:02:52.680
below from docker. So this is exactly
what you want to see on your system, to
32

33
00:02:52.680 --> 00:02:58.170
verify that Docker is up and running.
If you run it a second time, notice how
33

34
00:02:58.170 --> 00:03:01.620
that we have a pool complete right there
at the top of the screen. It's gonna be
34

35
00:03:01.620 --> 00:03:06.540
missing. If I run it again, we can see
that, it  just went through in and ran
35

36
00:03:06.540 --> 00:03:14.160
quickly. So if I do to clear and docker
run hello-world, you can see that I don't
36

37
00:03:14.160 --> 00:03:16.890
get that initial message or it's
downloading it from the docker registry.
37

38
00:03:16.890 --> 00:03:21.300
So this tells us that the Docker image
has been cached in our machine. One of the nice
38

39
00:03:21.300 --> 00:03:24.810
things about Docker, kind of sort of,
works like Maven is that it's gonna
39

40
00:03:24.810 --> 00:03:30.450
bring down the containers and cache
locally. Downside is, like Maven, it can
40

41
00:03:30.450 --> 00:03:34.620
clog up a lot of disk space on your
local system. Alright, so how easy it was
41

42
00:03:34.620 --> 00:03:38.340
to set up Docker or get Docker going
with Hello World.
42

43
00:03:38.340 --> 00:03:41.610
We saw the Hello World out to the
console and what this tells us is that
43

44
00:03:41.610 --> 00:03:46.320
Docker is installed and working on our
system. So, this is what we wanna see
44

45
00:03:46.320 --> 00:03:50.750
and this is what we need to see going
forward with the course.
