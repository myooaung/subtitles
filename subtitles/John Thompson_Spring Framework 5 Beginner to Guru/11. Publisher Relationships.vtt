WEBVTT
0
1
00:00:04.310 --> 00:00:11.060
Okay we've gone in and we added in a publisher entity but we didn't do any further mapping for that.
1

2
00:00:11.100 --> 00:00:16.860
So we do have a publisher entity but it's not related to anything. In a logical sense,
2

3
00:00:16.860 --> 00:00:23.280
a publisher is probably going to be publishing many books and a book typically is only gonna have one
3

4
00:00:23.280 --> 00:00:24.200
publisher.
4

5
00:00:24.210 --> 00:00:28.780
So what we're going to do is we're going to set up the JPA relationships for that.
5

6
00:00:28.860 --> 00:00:32.460
I'm just going to step through this to get our feet wet with these relationships.
6

7
00:00:32.460 --> 00:00:39.900
This is a pretty common situation so our publisher is going to have a set of books and our book is going
7

8
00:00:39.900 --> 00:00:46.050
to have a publisher property. I'm going to jump over to IntelliJ, modify the classes to show
8

9
00:00:46.050 --> 00:00:53.700
this relationship, and then show you the JPA annotations that we use to tell Hibernate how these are
9

10
00:00:53.700 --> 00:00:57.510
related. And don't worry, I'm going to go through this a little bit quicker.
10

11
00:00:57.620 --> 00:01:02.980
I have a whole section on mapping where I dive into these mappings a lot deeper.
11

12
00:01:03.060 --> 00:01:08.940
Here we are just setting up a really fundamental data model and getting accustomed to JPA a little bit
12

13
00:01:09.210 --> 00:01:13.960
before we move on with the building our Spring Framework web application.
13

14
00:01:14.010 --> 00:01:19.200
So let's go in and start doing the mapping to configure publisher to have a set of books. So I'm going to come
14

15
00:01:19.200 --> 00:01:22.500
in here and let's do private set 
15

16
00:01:26.010 --> 00:01:29.980
say books and call it books.
16

17
00:01:30.130 --> 00:01:35.770
So and then also one thing that we want to do is when we're working with sets like this, we want to
17

18
00:01:35.770 --> 00:01:38.520
initialize it. There's a couple of different ways to do this.
18

19
00:01:38.530 --> 00:01:45.670
But the easiest is to just say new HashSet to default it to an empty HashSet. That is by far the simplest
19

20
00:01:45.670 --> 00:01:48.660
technique here of setting that up.
20

21
00:01:49.060 --> 00:01:55.540
If you do not this can really catch you because if you forget to initialize it at runtime that book's
21

22
00:01:55.540 --> 00:02:00.900
property has been initiated at all and you will get a infamous NPV error.
22

23
00:02:00.910 --> 00:02:03.520
So that takes care of the publisher mapping.
23

24
00:02:03.520 --> 00:02:08.000
Now let's come over to the book and then also set up a book publisher there.
24

25
00:02:10.690 --> 00:02:11.980
So that sets him up.
25

26
00:02:12.080 --> 00:02:18.960
Let's go in and also add and getters and setters for that. So that initialize is that.
26

27
00:02:19.010 --> 00:02:24.620
And on the publisher, I forgot to add in the getters and setters. I normally do this altogether but
27

28
00:02:24.620 --> 00:02:32.100
for clarity I'm just gonna add the getters and setters right here. So that takes care of the Java side.
28

29
00:02:32.100 --> 00:02:37.680
So now we need to address the other side as far as the JPA mapping.
29

30
00:02:37.680 --> 00:02:45.030
So a here on the publisher what we want to do is annotate that property and we are going to say at one
30

31
00:02:45.030 --> 00:02:46.660
too many.
31

32
00:02:46.710 --> 00:02:54.540
So one too many meaning that the publisher is one and it has many books. On the book side,
32

33
00:02:54.540 --> 00:03:02.430
we are going to do just the opposite and here what we are going to say many to one so that that is the
33

34
00:03:02.430 --> 00:03:02.990
opposite.
34

35
00:03:03.000 --> 00:03:04.220
So that that is the inverse.
35

36
00:03:04.220 --> 00:03:08.200
I mean now there's many publishers but it's only come in to this one entity.
36

37
00:03:08.340 --> 00:03:11.720
So here's many to one and then one to many.
37

38
00:03:11.730 --> 00:03:19.090
Now one other thing that we need to do here is we want to say a join column and we are going to give
38

39
00:03:19.090 --> 00:03:23.050
Hibernate a hint to use join column called
39

40
00:03:25.820 --> 00:03:26.120
so.
40

41
00:03:26.120 --> 00:03:32.270
Here we are saying publisher I.D. and IntelliJ do know a little squiggly under there because I am
41

42
00:03:32.270 --> 00:03:34.870
configured a data source so it's trying to look at a database.
42

43
00:03:34.880 --> 00:03:40.230
It's not finding it so it's giving me a warning there that's not finding that which is perfectly OK.
43

44
00:03:40.520 --> 00:03:48.290
But what this is doing is giving Hibernate a hint to add in a publisher I.D. to the book record to track
44

45
00:03:48.320 --> 00:03:53.210
the publisher so that's going to create a foreign key relationship underneath the covers for us. So pretty
45

46
00:03:53.210 --> 00:03:54.800
elegant little mapping here.
46

47
00:03:54.800 --> 00:03:59.810
So we don't need to have a joined table or anything like that. Very simple mapping to set that up.
47

48
00:04:00.260 --> 00:04:07.140
So now the last thing that we want to do is come in here and initialize some bootstrap data. So let's
48

49
00:04:07.150 --> 00:04:08.110
come over here.
49

50
00:04:08.110 --> 00:04:10.780
Remember we're already creating a publisher.
50

51
00:04:10.840 --> 00:04:19.690
Now what we want to do is go in and add in that publisher so we can say for DDD set the publisher to
51

52
00:04:19.690 --> 00:04:29.770
our publisher and then also on our publisher we can get books and add and the DDD book, Domain Driven
52

53
00:04:29.770 --> 00:04:31.370
Designed by Eric.
53

54
00:04:31.390 --> 00:04:38.120
And here we actually want to go and save that too because now that entity is changing. So let's say publisher
54

55
00:04:38.200 --> 00:04:45.310
repository. Save. Save publisher. Let's do the same thing for the noEJB book.
55

56
00:04:55.200 --> 00:05:03.170
And then finally we'll save publisher repository and here let's go ahead and I'm going to do a system
56

57
00:05:03.200 --> 00:05:10.130
out and we'll say so we'll just display the number of books assigned to a publisher.
57

58
00:05:10.130 --> 00:05:13.730
And if I want to get fancy I could go and actually retrieve this out of the database.
58

59
00:05:13.730 --> 00:05:16.780
But I think this is good enough for our purposes.
59

60
00:05:16.900 --> 00:05:25.690
When you say publisher get book stuff size like so and let's come up here to the Spring web application.
60

61
00:05:25.700 --> 00:05:29.680
So this is the main class. I'm just going to click the Run here to initialize that.
61

62
00:05:29.690 --> 00:05:34.540
And again what's happening is Spring is initializing. It's going to bring up Hibernate. Hibernate
62

63
00:05:34.550 --> 00:05:40.910
is going to see your JPA configuration, creates our database the bootstrap class runs and you can see
63

64
00:05:40.910 --> 00:05:49.010
here we started in bootstrap one publisher two books and the publisher has two books so just exactly
64

65
00:05:49.010 --> 00:05:50.550
as we expected.
65

66
00:05:50.570 --> 00:05:56.350
So just to shut this down and do a quick recap here.
66

67
00:05:56.460 --> 00:06:03.570
So on publisher we are doing a one to many meaning that one publisher has many books and we are doing a
67

68
00:06:03.570 --> 00:06:10.500
set of books and then the join column is giving Hibernate a hint that on the books we are going to have
68

69
00:06:10.500 --> 00:06:14.160
publisher ID to reference back to what publisher has.
69

70
00:06:14.430 --> 00:06:20.000
And so we just added in the books property and then getters and setters for the books.
70

71
00:06:20.490 --> 00:06:25.150
And then on the book entity we did use the opposite annotation.
71

72
00:06:25.230 --> 00:06:27.240
Many publishers to one book.
72

73
00:06:27.270 --> 00:06:34.290
So we have a publisher property, a singular property, and we use the many to one annotation and then provide
73

74
00:06:34.290 --> 00:06:36.240
it getters and setters for that.
74

75
00:06:36.330 --> 00:06:43.430
And then finally and bootstrap data we initialize the publisher and save that relationship. You can
75

76
00:06:43.440 --> 00:06:48.810
see on the final line sixty seven there we're doing the output to prove that the publisher does have
76

77
00:06:48.810 --> 00:06:49.860
two books assigned to it.
77

78
00:06:50.820 --> 00:06:53.460
So it completes the mapping a publisher to books.
78

79
00:06:53.550 --> 00:06:58.140
You can see it does get a little confusing and I'm sure it does first time going through it. I still
79

80
00:06:58.140 --> 00:07:03.510
have to go back and carefully think through when I'm doing these JPA Mavericks because there's a lot
80

81
00:07:03.510 --> 00:07:04.630
of stuff that's going out.
81

82
00:07:04.800 --> 00:07:08.430
But if you've been following along, one thing that has not been happening.
82

83
00:07:08.640 --> 00:07:12.120
If you notice we haven't written any SQL out at all.
83

84
00:07:12.120 --> 00:07:16.590
We didn't develop any SQL. What's happening under neath the covers I don't think I'm pointing
84

85
00:07:16.590 --> 00:07:24.270
this out before his Hibernate is actually generating the SQL DDL statements to go out and create the
85

86
00:07:24.270 --> 00:07:27.060
database tables based on our JPA definition.
86

87
00:07:27.060 --> 00:07:31.980
So this is all happening transparently and there are settings for that. This is stuff that will explain
87

88
00:07:32.310 --> 00:07:34.170
further into the course.
88

89
00:07:34.260 --> 00:07:41.640
But just wanted you to think now that we're literally coming up, we are creating an entities. Those are
89

90
00:07:41.640 --> 00:07:49.810
getting to an actual in-memory H2 database but initialization if you look at the logs you will see Hibernate
90

91
00:07:49.810 --> 00:07:54.270
is actually initializing the database, it's generating that SQL statements based on that entities that
91

92
00:07:54.270 --> 00:07:55.220
we've created.
92

93
00:07:55.320 --> 00:08:03.360
And then when we populate these entities and say save haven is going in and creating the SQL statements
93

94
00:08:03.360 --> 00:08:05.400
to insert the data for us.
94

95
00:08:05.460 --> 00:08:13.050
So it really does alleviate a lot of stuff that we have to do especially as far as creating tables, maintaining
95

96
00:08:13.050 --> 00:08:21.300
those tables, doing all the SQL statements because I've written plenty of pure SQL JDBC stuff
96

97
00:08:21.330 --> 00:08:24.000
and it is very very verbose.
97

98
00:08:24.000 --> 00:08:31.110
So we want to take a moment to point out to you what we are not writing by using Hibernate and Spring
98

99
00:08:31.110 --> 00:08:32.130
Data JPA.
