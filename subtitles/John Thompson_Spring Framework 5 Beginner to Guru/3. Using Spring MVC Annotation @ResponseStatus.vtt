WEBVTT
0
1
00:00:04.400 --> 00:00:08.910
Alright in this video we are going to
take a look at using ResponseStatus. The
1

2
00:00:08.910 --> 00:00:13.980
ResponseStatus annotation control back
the HTTP response status that Spring MVC
2

3
00:00:13.980 --> 00:00:20.130
is going to return for us. So I've
written a test here so I'm introducing
3

4
00:00:20.130 --> 00:00:25.590
a new class, NotFoundException. It
extends RuntimeException and I didn't
4

5
00:00:25.590 --> 00:00:30.349
override all the constructors for it,
just a common ones I would probably use.
5

6
00:00:30.349 --> 00:00:35.640
No arcs constructor, pass a message
constructor then message and Throwable.
6

7
00:00:35.640 --> 00:00:40.800
So that's probably going to be good
enough for our use cases here and of
7

8
00:00:40.800 --> 00:00:48.000
course I have gone in and created a test
for that and what we want to do is test
8

9
00:00:48.000 --> 00:00:52.739
when the Optional comes back is empty. So
that's going to be from the Spring Data
9

10
00:00:52.739 --> 00:00:58.469
JPA repository when we go in and find
by ID we want to return back an empty
10

11
00:00:58.469 --> 00:01:04.979
Optional. And you can see here on line 61,
I've annotated the test and I'm
11

12
00:01:04.979 --> 00:01:11.520
using the JUnit expected to expect back
and NotFoundException. And that that's
12

13
00:01:11.520 --> 00:01:15.479
a specific class, that's a custom
exception that we just wrote and I did
13

14
00:01:15.479 --> 00:01:20.700
put that in the exceptions package. So
something that I like to do is keep
14

15
00:01:20.700 --> 00:01:26.009
things neat and tidy inside of this. You
could argue about where that exception
15

16
00:01:26.009 --> 00:01:30.600
actually lives. I prefer to use a
exceptions package. It makes sense when
16

17
00:01:30.600 --> 00:01:35.610
you're looking for custom exceptions to
have a specific package for those to me.
17

18
00:01:35.610 --> 00:01:42.540
So let's go ahead and I'll run this test
and then we'll examine the code because
18

19
00:01:42.540 --> 00:01:48.479
I do have this working at this point. So
we are Green on the test and let's take
19

20
00:01:48.479 --> 00:01:54.570
a quick look at the implementation there. So on line 49, we were throwing a Runtime
20

21
00:01:54.570 --> 00:02:00.930
Exception and now I've counted that out
and now we're throwing our own
21

22
00:02:00.930 --> 00:02:08.009
custom exception. Now I do have the
ResponseStatus commented out here. So
22

23
00:02:08.009 --> 00:02:13.319
when I come into my test, I am going to
be looking for a status of isNot
23

24
00:02:13.319 --> 00:02:19.799
Found. So let's go ahead and run that now. That's a nice little feature inside of
24

25
00:02:19.799 --> 00:02:22.530
IntelliJ that they recently added
where you can run the test right from
25

26
00:02:22.530 --> 00:02:27.359
the gutter and we can see that this is
not behaving properly. So when I
26

27
00:02:27.359 --> 00:02:37.140
reintroduce this annotation, you can see that
now I will have a passing test. Okay so
27

28
00:02:37.140 --> 00:02:41.220
what we want to do now, so let's close
this out and let's go ahead and run our
28

29
00:02:41.220 --> 00:02:46.200
application and come down here to Spring
recipe application. That's a Spring Boot
29

30
00:02:46.200 --> 00:02:51.209
and we'll start this up and let's
demonstrate this. So you can see we are
30

31
00:02:51.209 --> 00:02:56.370
up and running and let's go ahead and
refresh this.
31

32
00:02:56.370 --> 00:03:03.359
So our recipe is coming up. So now let's
go over to, I will do like ID 4 which we
32

33
00:03:03.359 --> 00:03:07.439
know is not there in the database. And
now you can see that we are getting that
33

34
00:03:07.439 --> 00:03:13.439
back ResponseStatus is now 404. So this
is a generic error page that's being
34

35
00:03:13.439 --> 00:03:19.829
generated by Spring Boot and let's just
demonstrate. If we take this annotation
35

36
00:03:19.829 --> 00:03:26.250
off the class, and I'm going to force a
build here so you can see the Spring
36

37
00:03:26.250 --> 00:03:31.019
Boot developer tools kick in and we are
back up and running. Let's go ahead and
37

38
00:03:31.019 --> 00:03:36.150
refresh this again and now we can see
that we get a 500 error. So we are in
38

39
00:03:36.150 --> 00:03:41.310
fact changing that HTTP status code
that's coming back to the browser. Now
39

40
00:03:41.310 --> 00:03:52.590
we will re-enable that real quick. And we will force a build, refresh that. I want to show this
40

41
00:03:52.590 --> 00:04:03.449
in the Developer tools as well. Let's go
and take a look at the Network. So now
41

42
00:04:03.449 --> 00:04:08.040
inside of Developer Tools on Chrome, we
can see that we are getting back a 404
42

43
00:04:08.040 --> 00:04:13.259
error coming back from the server. But we
do get this HTML returned as well. So
43

44
00:04:13.259 --> 00:04:18.750
this allows us to see both the error
message on the web page but also we
44

45
00:04:18.750 --> 00:04:25.120
did a get and got a 404 back and from
the server. Let's come back over here
45

46
00:04:25.120 --> 00:04:28.930
and I am going to run all the tests and
while that's running we'll do a real
46

47
00:04:28.930 --> 00:04:35.830
quick recap. You can see our body of
tests are growing. So we did add in a new
47

48
00:04:35.830 --> 00:04:40.120
NotFoundException that just extends
the RuntimeException and we are
48

49
00:04:40.120 --> 00:04:46.389
annotating that with ResponseStatus. And
then in our service implementation,
49

50
00:04:46.389 --> 00:04:52.389
we change to throw that exception type and that's what's
50

51
00:04:52.389 --> 00:04:58.780
going to kick in the 404 coming back. And
you can see now that we are up to 67
51

52
00:04:58.780 --> 00:05:02.979
tests in this project and they are all
passing. So I am going to go ahead and
52

53
00:05:02.979 --> 00:05:07.900
commit this and Git branch of
response - status. So if you need to
53

54
00:05:07.900 --> 00:05:10.889
check it out you can see it.
