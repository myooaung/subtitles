WEBVTT
0
1
00:00:04.759 --> 00:00:09.540
Alright, in this video we are going to
take a look at Spring Data JPA query
1

2
00:00:09.540 --> 00:00:13.950
methods. Now this reminds me, I used to do
a lot of Grails development. They had dynamic
2

3
00:00:13.950 --> 00:00:18.750
query methods or dynamic finders I
called it in the Grails world and this
3

4
00:00:18.750 --> 00:00:25.500
is very similar where we can create a
method name using a property and say
4

5
00:00:25.500 --> 00:00:31.019
find by property name as a whole naming
convention where we have finders and we
5

6
00:00:31.019 --> 00:00:35.210
can string together different properties. So we can say find by description and
6

7
00:00:35.210 --> 00:00:40.559
location and pass in those values. And
what's going to happen underneath the
7

8
00:00:40.559 --> 00:00:45.329
covers is Spring data JPA is going to go
in and create that query based on the
8

9
00:00:45.329 --> 00:00:50.399
criteria that was found inside the
method name. So this is a very important
9

10
00:00:50.399 --> 00:00:55.649
feature. It saves us a ton of work and
it's very very versatile. It will adapt a
10

11
00:00:55.649 --> 00:00:59.820
lot of different situations. Now all we
need to do is go to the repositories and
11

12
00:00:59.820 --> 00:01:07.530
define a method in the interface. So we'll define a method and what I want
12

13
00:01:07.530 --> 00:01:10.920
to do is create a couple dynamic finders
for the data that we're populating in
13

14
00:01:10.920 --> 00:01:16.380
unit of measure and category. I want to be
able to look up by description so we can
14

15
00:01:16.380 --> 00:01:21.000
get a hold of that record. Easily for
other purposes that we're going to see
15

16
00:01:21.000 --> 00:01:25.619
in the course here soon,
and we'll set up these dynamic finders
16

17
00:01:25.619 --> 00:01:30.479
so we can go and look up that data. And what I want you to do is as you
17

18
00:01:30.479 --> 00:01:35.880
go through this, realize that we are just
creating the method name inside the
18

19
00:01:35.880 --> 00:01:40.110
interface and then Spring Data JPA
is going to provide us the
19

20
00:01:40.110 --> 00:01:45.689
implementation and also via Hibernate,
it's going to give us all the plumbing
20

21
00:01:45.689 --> 00:01:50.100
that we need to do to go fetch something
out of the database. And you're going to
21

22
00:01:50.100 --> 00:01:54.090
know that we're not going to write any
SQL to go get data out of the database.
22

23
00:01:54.090 --> 00:01:56.909
It's all going to be done for us by
Spring Data JPA.
23

24
00:01:56.909 --> 00:02:02.310
And this is why Spring Data JPA is just
so popular right now because it makes
24

25
00:02:02.310 --> 00:02:06.659
your life as a Java developer, as a
Spring developer, working with databases
25

26
00:02:06.659 --> 00:02:11.520
so much easier. So I'm going to jump over
to IntelliJ now and show you how to set
26

27
00:02:11.520 --> 00:02:15.000
up a couple dynamic
finders or I should say muesli grills
27

28
00:02:15.000 --> 00:02:21.330
world. So these are called query methods
in the Spring Data world. So I'm going to  jump over
28

29
00:02:21.330 --> 00:02:25.800
to IntelliJ now and show you exactly how
to do that. Alright I am back inside of
29

30
00:02:25.800 --> 00:02:31.140
IntelliJ now and we can still see the
data.sql file that I added in the
30

31
00:02:31.140 --> 00:02:35.100
previous video and these are the values
that we are populating inside the
31

32
00:02:35.100 --> 00:02:39.209
database. And what we want to do is to be
able to get a hold of these objects from
32

33
00:02:39.209 --> 00:02:45.590
the database. So I'm going to just come
over here and let's look at Category and
33

34
00:02:45.590 --> 00:02:51.150
let's look at the domain class for
Category and we have the the one
34

35
00:02:51.150 --> 00:02:58.700
property description. So what we want to
do here is we're going to come into the Category
35

36
00:02:58.700 --> 00:03:09.360
Repository and we are going to specify,
double check this. So Spring Data coming
36

37
00:03:09.360 --> 00:03:14.940
into Spring 5 is now using optional. So this is a good habit to get into. So
37

38
00:03:14.940 --> 00:03:19.470
this was a change made between Spring
4 and Spring 5 and I am going to
38

39
00:03:19.470 --> 00:03:25.980
follow that and continue to use the
Java 8 type of optional for our
39

40
00:03:25.980 --> 00:03:30.530
purposes. So what I want to do is do a...
40

41
00:03:32.600 --> 00:03:37.410
Now before, Spring Data would just return
null. Now it's going to return the
41

42
00:03:37.410 --> 00:03:43.950
Optional type and we can see that
IntelliJs intellisense is coming up
42

43
00:03:43.950 --> 00:03:48.690
for the query method. So I want to do
findByDescription and I could chain
43

44
00:03:48.690 --> 00:03:54.480
that out to multiple options but I don't
need to. So find by is going to find one,
44

45
00:03:54.480 --> 00:03:59.010
find all returns a list. So we just
want to find one and we're going to
45

46
00:03:59.010 --> 00:04:02.910
pretend that our description is unique
even though we didn't set it up as
46

47
00:04:02.910 --> 00:04:10.280
unique. That'll be fine for our
purposes and we are going to say String
47

48
00:04:11.060 --> 00:04:14.030
and that's really all we need to do
there. So we've got this findBy
48

49
00:04:14.030 --> 00:04:19.579
Description and what we want to do is
the same thing for UnitOfMeasure. We
49

50
00:04:19.579 --> 00:04:27.950
will do that, we will also use Optional here
and it will optionally return back the
50

51
00:04:27.950 --> 00:04:38.120
UnitOfMeasure, findByDescription and
say by description there again. So these
51

52
00:04:38.120 --> 00:04:44.120
are the two finders and now we'll
just do a poor man's way of showing this
52

53
00:04:44.120 --> 00:04:49.330
and we'll do it on our IndexController.
53

54
00:04:50.080 --> 00:05:03.800
We well inject an instance of the CategoryRepository. Now just as a reminder, we are
54

55
00:05:03.800 --> 00:05:08.540
going to do constructor based dependency
injection and because I am calling for
55

56
00:05:08.540 --> 00:05:11.330
it and construct your other component
Spring going to go ahead and
56

57
00:05:11.330 --> 00:05:23.450
automatically wire that in for us. And
what we are going to do, to show the
57

58
00:05:23.450 --> 00:05:25.960
Category,
58

59
00:05:28.720 --> 00:05:36.949
and we'll say a categoryRepository, findByDescription. Let's come over here and
59

60
00:05:36.949 --> 00:05:43.580
look at the Category description. So we
had American, I am cutting paste and just
60

61
00:05:43.580 --> 00:05:49.400
to make sure we don't wind up with any
problems with a case or me fat fingering
61

62
00:05:49.400 --> 00:06:04.220
something. Let's do the same for UnitOfMeasure. I'm also going to go over and go
62

63
00:06:04.220 --> 00:06:09.310
right to the SQL here and we'll grab teaspoon,
63

64
00:06:10.210 --> 00:06:18.350
paste that in and in IntelliJ, I'm just
typing us out which will give us an
64

65
00:06:18.350 --> 00:06:28.430
autocomplete for that. And what we want
to do is a Cat id is and we'll catenate
65

66
00:06:28.430 --> 00:06:39.620
the categoryOptional.get() and we'll
say getId(). Let's do the same thing for
66

67
00:06:39.620 --> 00:06:48.550
the UnitOfMeasure. Add a little space there.
67

68
00:06:50.289 --> 00:06:54.949
getId(). Now let's go ahead and run this
and when we go to the index page, we'll
68

69
00:06:54.949 --> 00:07:02.330
see that output to the console for us. Spring Boot is coming up. We are almost up
69

70
00:07:02.330 --> 00:07:10.760
and running, we are now on localhost 8080. So I'm going to come over here. localhost
70

71
00:07:10.760 --> 00:07:17.120
8080, you see my recipes. That's the text
from our Thymeleaf template and let's go
71

72
00:07:17.120 --> 00:07:25.220
over and take a look and we can see down
here. Cat Id is 1 and UOM Id is 1
72

73
00:07:25.220 --> 00:07:30.979
down there in the bottom left hand
corner. So that validates that we
73

74
00:07:30.979 --> 00:07:36.110
did go out to the database, we queried
the database, got an object back from
74

75
00:07:36.110 --> 00:07:41.659
that query method and it was an Optional.
You can see there in line 32 and 33 I'm
75

76
00:07:41.659 --> 00:07:44.069
doing the
method to get the optional out of it
76

77
00:07:44.069 --> 00:07:49.440
which is going to give me an instance of
Category or UnitOfMeasure respectively.
77

78
00:07:49.440 --> 00:07:53.190
And then I'm concatenating that into the
String by getting the Id and we can see
78

79
00:07:53.190 --> 00:07:59.009
that in both cases, we got the Id number
1. Alright so you can see the query
79

80
00:07:59.009 --> 00:08:03.720
methods in action there, how they worked
and how we were able to get those
80

81
00:08:03.720 --> 00:08:07.410
properties out of the database and get a
hand on those objects and query the
81

82
00:08:07.410 --> 00:08:12.300
database just by setting up a method
name. I think this is probably one of the
82

83
00:08:12.300 --> 00:08:18.830
coolest features of Spring Data JPA and
it's a huge huge time-saver for us.
