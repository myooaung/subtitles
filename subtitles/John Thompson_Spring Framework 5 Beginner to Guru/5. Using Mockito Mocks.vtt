WEBVTT
0
1
00:00:04.190 --> 00:00:09.210
Alright! Let's take a look at using
Mockito Mocks. I've brought up our
1

2
00:00:09.210 --> 00:00:15.330
RecipeServiceImpl and how
would you test this? So we're gonna take
2

3
00:00:15.330 --> 00:00:18.270
a look at testing this. We're gonna
leverage Mockito because what's
3

4
00:00:18.270 --> 00:00:22.740
happening if we want to us that getRecipes method, we need to provide a
4

5
00:00:22.740 --> 00:00:27.180
RecipeRepository because that is a
required dependency of this class. We
5

6
00:00:27.180 --> 00:00:32.550
need to inject an instance of RecipeRepository. Now remember at runtime
6

7
00:00:32.550 --> 00:00:37.260
Spring Data JPA is gonna provide
us that. But here we wanna do that in a
7

8
00:00:37.260 --> 00:00:40.110
test. So let's take a look at doing that
right now.
8

9
00:00:40.110 --> 00:00:45.510
So I'm doing a alt+enter. Gonna say go
ahead and create a test and we wanna
9

10
00:00:45.510 --> 00:00:51.360
test getRecipes and ask IntelliJ to
create that for us. And now you can see
10

11
00:00:51.360 --> 00:00:55.949
that it's giving us that but we need a
couple of things here. One is gonna be
11

12
00:00:55.949 --> 00:00:58.760
our service of course.
12

13
00:01:01.640 --> 00:01:07.340
I'll create that and then we need the
dependency as well because we need to
13

14
00:01:07.340 --> 00:01:11.439
inject this RecipeRepository.
14

15
00:01:13.210 --> 00:01:19.430
Now what I wanna do here is
annotate this as a @Mock. So now that is
15

16
00:01:20.300 --> 00:01:24.350
a Mock but we haven't done anything with
it so we need our test method. So I did a
16

17
00:01:24.350 --> 00:01:30.800
command N there and I wanna create a
setUp method. So that's a quick way that
17

18
00:01:30.800 --> 00:01:35.150
we can generate that. A little shortcut
inside of IntelliJ. And now what we
18

19
00:01:35.150 --> 00:01:40.120
wanna do is first we need to
initialize our mocks. Call it 
19

20
00:01:41.150 --> 00:01:46.490
initMocks and say this. So that's gonna set
up the mocks. That's telling Mockito
20

21
00:01:46.490 --> 00:01:52.850
give me a mock RecipeRepository.
Now we're gonna init create our 
21

22
00:01:52.850 --> 00:01:55.420
recipeService.
22

23
00:02:00.990 --> 00:02:05.090
Let's go down here and start our test.
23

24
00:02:07.750 --> 00:02:12.599
It should be getting back a Set of recipes
right.
24

25
00:02:16.670 --> 00:02:22.750
Let's see if they will run right now.
I'm guessing it will not but
25

26
00:02:23.170 --> 00:02:25.560
did run.
Interesting. I thought I was
26

27
00:02:25.760 --> 00:02:30.409
expecting Mockito to return back a null
value which would cause us a problem but
27

28
00:02:30.409 --> 00:02:33.849
apparently did return back us up.
28

29
00:02:37.540 --> 00:02:41.790
Let's take a look to see what that gives us.
29

30
00:02:44.860 --> 00:02:49.239
So Mockito is giving us an empty set.
But what if we wanted that to actually
30

31
00:02:49.239 --> 00:02:54.440
return back a value
like that. So obviously we do wanna get
31

32
00:02:54.440 --> 00:02:56.950
something there.
32

33
00:02:56.990 --> 00:03:01.820
Now we have a failing test and we
actually wanna return back a value. So
33

34
00:03:01.820 --> 00:03:07.330
what we can do is tell the Mockito Mock
to return something.
34

35
00:03:17.420 --> 00:03:25.990
So I'm creating a set. We're gonna add
in. I want that to be data not date. We'll add in the
35

36
00:03:28.250 --> 00:03:30.640
recipe.
36

37
00:03:30.690 --> 00:03:34.659
So now we have a set.
We're gonna tell Mockito to return
37

38
00:03:34.659 --> 00:03:40.030
that and we are gonna use when.
38

39
00:03:42.099 --> 00:03:46.049
IntelliJ should be finding
that for me.
39

40
00:03:46.049 --> 00:03:51.000
Import static method there you are. Mockito
when so we need to do a static import
40

41
00:03:51.000 --> 00:03:55.670
there.
We're gonna say recipeService dot
41

42
00:03:55.670 --> 00:04:01.150
getRecipes then we're gonna say
thenReturn
42

43
00:04:01.150 --> 00:04:06.860
and we're gonna give it a recipesData.
43

44
00:04:06.860 --> 00:04:11.250
Hey guys I need to point out that I made
a little typo here in this video.
44

45
00:04:11.250 --> 00:04:16.160
They're on line 42 where I'm doing the
one recipe service, I should be actually
45

46
00:04:16.160 --> 00:04:21.570
for the repository and not the service
so the source code in the GitHub has
46

47
00:04:21.570 --> 00:04:25.350
been corrected but I wanted to point
that out so this doesn't trip you up in
47

48
00:04:25.350 --> 00:04:31.020
this video. Just a quick note that recipeService on line 42 in the when block
48

49
00:04:31.020 --> 00:04:36.150
that should actually be the recipeRepository that we are setting up there
49

50
00:04:36.150 --> 00:04:42.540
on line 42.
Just to recap what's going on there. We
50

51
00:04:42.540 --> 00:04:48.840
created on line 38 to 40 we set up the
recipe data and then on 42 this is where
51

52
00:04:48.840 --> 00:04:53.310
we're telling Mockito. We're saying
when when the recipeServic.getRecipes
52

53
00:04:53.310 --> 00:04:59.520
is called then return back recipesData.
So we want our data
53

54
00:04:59.520 --> 00:05:05.060
returned to the test. So let's go
ahead and run this again.
54

55
00:05:05.470 --> 00:05:11.770
And now we are passing. But we can take
this a little bit further. When we're
55

56
00:05:11.770 --> 00:05:17.230
working with mocks what we wanna do is
verify their interactions. So we can do
56

57
00:05:17.230 --> 00:05:23.320
let's come down here and say verify.
So you can see that IntelliJ is bringing
57

58
00:05:23.320 --> 00:05:29.870
that up for us already. We wanna
say the recipeRepository.
58

59
00:05:29.870 --> 00:05:35.840
We're gonna use times
and we want to verify that it's called
59

60
00:05:35.840 --> 00:05:41.450
once and do an alt+enter and we're gonna import that static method and we want
60

61
00:05:41.450 --> 00:05:49.520
Mockito times. And now
we wanna say findAll() well like. So
61

62
00:05:49.520 --> 00:05:55.490
what we're saying here verify that the
recipeRepository times once and
62

63
00:05:55.490 --> 00:05:59.570
we're saying the method findAll(). So we're
saying we wanna make sure that 
63

64
00:05:59.570 --> 00:06:04.940
findAll() is called once and only once, not
twice, not zero, but once and so we're
64

65
00:06:04.940 --> 00:06:09.350
gonna verify that the recipeRepository
was called like that. So let's go ahead
65

66
00:06:09.350 --> 00:06:12.280
and run the test now.
66

67
00:06:13.300 --> 00:06:19.690
We can see that we're still passing now.
If I were to change this to say three,
67

68
00:06:19.690 --> 00:06:24.620
we'll see a failure.
68

69
00:06:25.500 --> 00:06:29.160
Now you can see that down in the window
that we're saying wanted three
69

70
00:06:29.160 --> 00:06:33.180
times but only one was called one
time. So it's a good way to verify that
70

71
00:06:33.180 --> 00:06:37.530
your interactions within the class are
happening as expected. I'm gonna
71

72
00:06:37.530 --> 00:06:43.160
change that back and make sure that our
tests are passing when we check in.
72

73
00:06:43.599 --> 00:06:48.490
We got back to green. Alright that
was a very simple example of using
73

74
00:06:48.490 --> 00:06:53.529
Mockito with Spring. Actually we didn't
even use Spring there. This is a pure
74

75
00:06:53.529 --> 00:06:57.639
JUnit test and all we're using is Mockito
 but we are testing a Spring class
75

76
00:06:57.639 --> 00:07:02.860
that is already go for the Spring
Framework. But I want you keep in mind that
76

77
00:07:02.860 --> 00:07:07.929
we had no time did we bring up the
Spring Context. We're using pure JUnit
77

78
00:07:07.929 --> 00:07:11.770
here. It's a very fast test. You can see
how fast it runs so there's no Spring
78

79
00:07:11.770 --> 00:07:17.139
Context involved but we are testing the
functionality of a bean that it's gonna
79

80
00:07:17.139 --> 00:07:21.639
be managed by the Spring service or
by the Spring Context at run time. So
80

81
00:07:21.639 --> 00:07:25.869
this is a very very common design
pattern here. Something that you'll see a lot
81

82
00:07:25.869 --> 00:07:30.309
in use where you have a service layer,
you're injecting in repositories but you
82

83
00:07:30.309 --> 00:07:34.330
wanna test that business logic inside
the service layer so you can write unit
83

84
00:07:34.330 --> 00:07:37.119
tests
exactly like this and leverage Mockito
84

85
00:07:37.119 --> 00:07:43.149
Mocks. So this is where why Spring is very
popular because you are using
85

86
00:07:43.149 --> 00:07:46.419
leveraging that dependency injection
framework so you're injecting
86

87
00:07:46.419 --> 00:07:51.159
dependencies like the repository here
and now we're using Mockito Mocks to
87

88
00:07:51.159 --> 00:07:54.909
test that business logic inside the
service layer. So you're gonna see this a
88

89
00:07:54.909 --> 00:07:59.139
lot and we are definitely gonna be
continuing to use Mockito throughout the
89

90
00:07:59.139 --> 00:08:03.959
course when we have to test our
dependencies like that.
