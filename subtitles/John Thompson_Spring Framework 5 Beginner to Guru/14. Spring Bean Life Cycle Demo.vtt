WEBVTT
0
1
00:00:04.960 --> 00:00:12.570
Up here on the screen I've added in a class entire project here and this is a lifecycle demo bean and
1

2
00:00:12.570 --> 00:00:17.580
what I've done is I've created a bean that implements the variety of interfaces that Spring Framework
2

3
00:00:17.610 --> 00:00:20.410
gives us to work with lifecycle events.
3

4
00:00:20.690 --> 00:00:28.290
So add in initializing bean disposable bean, bean name aware, bean factory aware and application context
4

5
00:00:28.290 --> 00:00:28.620
aware.
5

6
00:00:28.620 --> 00:00:32.390
So these are all the variety of things that we can work with.
6

7
00:00:32.600 --> 00:00:39.150
And what I want to show you know is let's go ahead and run this and we'll see how this interacts with
7

8
00:00:39.150 --> 00:00:44.770
our application. I'm just going to click on the Run dialog and take a look at the log output.
8

9
00:00:44.820 --> 00:00:51.840
Now the lifecycle demonstration bean I did prefix everything with a double hashtag so we can easily
9

10
00:00:51.840 --> 00:00:54.810
see how things are happening.
10

11
00:00:54.990 --> 00:01:00.900
So you can see right here the first thing that happens that's in the lifecycle bean constructor. We
11

12
00:01:00.900 --> 00:01:07.080
get the name the bean factory is set. The application context has been set and then the post construct
12

13
00:01:07.110 --> 00:01:13.470
has been called. A lifecycle bean has all of its properties set and then you can see the output that
13

14
00:01:13.470 --> 00:01:18.990
we had before from the variety of beans that we've been working with throughout this and right towards
14

15
00:01:19.160 --> 00:01:25.020
the bottom there you can see two more pre destroy and termination messages.
15

16
00:01:25.200 --> 00:01:32.070
So as the context came up we saw all the lifecycle events and then we ran through basically everything
16

17
00:01:32.070 --> 00:01:39.360
that we had before and then as the context shuts down you can see the other methods getting called. Now
17

18
00:01:39.370 --> 00:01:45.290
this works out well. This gives you a hook into all of the lifecycle events.
18

19
00:01:45.300 --> 00:01:54.350
Now we also are able to work with a custom bean post processor so I've added in this class as well.
19

20
00:01:54.350 --> 00:01:58.320
I had the component commented out there.
20

21
00:01:58.460 --> 00:02:00.150
Now let's go ahead and run this again.
21

22
00:02:00.380 --> 00:02:07.850
And this allows us to do actions on beans as a post processor. So as beans come up we can run some
22

23
00:02:07.850 --> 00:02:09.350
type of post processor.
23

24
00:02:09.350 --> 00:02:17.030
Now we can see here we have additional messages output now that I brought that into the Spring Context.
24

25
00:02:17.810 --> 00:02:25.840
You can see here this before init, bean called by the bean post processor and then the after init.
25

26
00:02:25.850 --> 00:02:33.140
So again these are hooks that we can have into the Spring bean lifecycle. And to be honest I've done
26

27
00:02:33.140 --> 00:02:36.080
a lot of development with the Spring Framework.
27

28
00:02:36.080 --> 00:02:41.180
Pretty rare that you need to get into lifecycle events like this but important you might have some type
28

29
00:02:41.180 --> 00:02:44.500
of edge case where you need to get access to these.
29

30
00:02:44.540 --> 00:02:49.460
This is typically stuff that the Spring Framework developer is going to be using as they develop on
30

31
00:02:49.460 --> 00:02:50.820
the framework itself.
31

32
00:02:50.900 --> 00:02:57.410
You as an application developer probably aren't going to have a big use case for hooking into these
32

33
00:02:57.410 --> 00:03:02.330
lifecycle events. But it's also important to be aware that they are there.
33

34
00:03:02.330 --> 00:03:08.410
So when you do need to access lifecycle events of a bean you do have that access.
34

35
00:03:08.510 --> 00:03:13.850
And keep in mind that there are cases where you as an application developer, again you don't need to do that and
35

36
00:03:13.870 --> 00:03:16.020
get a handle on these life cycle events.
36

37
00:03:16.040 --> 00:03:22.640
So just as a quick review between videos I did go in and add in two new classes.
37

38
00:03:22.640 --> 00:03:28.280
One is a new Spring component called the lifecycle demo being so down will be available inside of GitHub
38

39
00:03:28.280 --> 00:03:36.530
and I implemented all the Spring interfaces to work with Spring bean lifecycle event. So important to
39

40
00:03:36.530 --> 00:03:43.430
keep in mind that there are a set of things that do happen as a Spring bean is being initiated within
40

41
00:03:43.430 --> 00:03:44.600
the Spring Context.
41

42
00:03:44.750 --> 00:03:50.540
And then there are also another set of things that are happening as that Spring Bean is destroyed or
42

43
00:03:50.570 --> 00:03:52.840
brought down inside in the Spring Context.
43

44
00:03:52.910 --> 00:03:58.460
Then the second class I'm adding into the entire project. This is going to be the custom bean post
44

45
00:03:58.460 --> 00:03:59.480
processor.
45

46
00:03:59.480 --> 00:04:04.420
So this is going to implement Spring interface of a bean post processor. Spring
46

47
00:04:04.490 --> 00:04:11.510
is going to see this as a component bring it up and then this is going to see it allow you to inspect
47

48
00:04:11.870 --> 00:04:14.800
all Spring Beans before they are initialized.
48

49
00:04:14.810 --> 00:04:20.380
And then after they are initialized so sometimes you do need to hook into those events set on a more
49

50
00:04:20.390 --> 00:04:21.520
of a global scale.
50

51
00:04:21.530 --> 00:04:27.660
So the sooner you can utilize a bean post processor for any special configuration needs that you have.
51

52
00:04:27.920 --> 00:04:31.520
And again both these classes will be checked into Github for your review.
