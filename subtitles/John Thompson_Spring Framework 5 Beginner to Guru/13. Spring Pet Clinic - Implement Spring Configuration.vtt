WEBVTT
0
1
00:00:04.130 --> 00:00:09.960
Now in the previous video, I talked about how
we can make these Spring Components
1

2
00:00:09.960 --> 00:00:13.500
manage Spring Beans. It's just
ultimately the way we want to go with
2

3
00:00:13.500 --> 00:00:18.720
this. What I want to do here is I
looked at our open task and we don't
3

4
00:00:18.720 --> 00:00:24.670
have a task on this, so I'm going to
create a New Issue
4

5
00:00:24.670 --> 00:00:32.620
and call it Implement Spring Config for
Services. We are just going to use
5

6
00:00:32.620 --> 00:00:36.430
this as our foundation. I'm trying to
follow the rule set where I don't change
6

7
00:00:36.430 --> 00:00:41.440
any code without a corresponding ticket
so now making up that ticket, so
7

8
00:00:41.440 --> 00:00:47.440
ticket #22. I'll go ahead and
assign this to myself. You just have to have it
8

9
00:00:47.440 --> 00:00:52.960
and now we are going to implement Spring
Services. What we want to do is take
9

10
00:00:52.960 --> 00:00:59.890
these ap services. I'm just going to
come over here and say @Service.
10

11
00:00:59.890 --> 00:01:03.720
I'm using the Service annotation because
the intention of this is a Service.
11

12
00:01:03.720 --> 00:01:07.960
Functionally Service and Component are
the same. It's more an indication of the
12

13
00:01:07.960 --> 00:01:13.130
behavior, so that takes care of OwnerService.
13

14
00:01:17.780 --> 00:01:26.090
We'll do him and this guy as well. So
now, what I've done as I've said I want
14

15
00:01:26.090 --> 00:01:30.770
these Map implementations of the
different CrudService or  Crud
15

16
00:01:30.770 --> 00:01:33.620
Service Interfaces.
I want those brought into the Spring
16

17
00:01:33.620 --> 00:01:38.150
Context as Spring Beans. So now, the
Spring sees that Service annotation and
17

18
00:01:38.150 --> 00:01:43.280
is going to bring these into the Context
upon startup. Now what I want to do here
18

19
00:01:43.280 --> 00:01:49.880
is now since these are going to be under
my root package and it just as a
19

20
00:01:49.880 --> 00:01:55.009
reminder because I am using 
guru.springframework.sfgpetclinic
20

21
00:01:55.009 --> 00:02:00.410
because my Spring Pet Clinic application
here is my main startup class in Spring
21

22
00:02:00.410 --> 00:02:04.340
Boot, it's going to do a Component Scan
of everything in this package and down
22

23
00:02:04.340 --> 00:02:08.989
so it is going to find that. So if I had
that in different packages, those people
23

24
00:02:08.989 --> 00:02:12.470
for a loop, they used to Spring just
finding it. Spring doesn't scan the
24

25
00:02:12.470 --> 00:02:16.700
world. It who'd have tons of, if not hundreds
of thousands of classes to go over and
25

26
00:02:16.700 --> 00:02:20.150
look for annotations which would be
extremely slow. It does do very targeted
26

27
00:02:20.150 --> 00:02:24.980
scanning. It's very sensible what the
Spring guys are doing is just say, "Hey, if
27

28
00:02:24.980 --> 00:02:29.360
I have the Spring Boot application here
sitting in those package, look in this
28

29
00:02:29.360 --> 00:02:33.780
package and everything underneath it." So
it does want to scan in quite a bit.
29

30
00:02:33.780 --> 00:02:37.670
You can actually make it more targeted and
we do get into that further in the class.
30

31
00:02:37.670 --> 00:02:43.160
But here, what we want to do is I'm going
to target this bootstrap class, so let's
31

32
00:02:43.160 --> 00:02:47.390
look at our data loader and I want
to get rid of this because I don't want
32

33
00:02:47.390 --> 00:02:51.110
that dependency on the hard
implementation. I want Spring to
33

34
00:02:51.110 --> 00:02:56.840
implement that. So now if I come up here
and I'm just do alt enter. I'm going to
34

35
00:02:56.840 --> 00:03:03.110
add in Constructor Parameters. I'll take
them both of those and say OK. You can
35

36
00:03:03.110 --> 00:03:09.310
see IntelliJ did the refactoring for me
and now you can see I'm taking in the
36

37
00:03:09.310 --> 00:03:13.959
OwnerService and that is the interface,
I'm specifying the interface. Any
37

38
00:03:13.959 --> 00:03:17.140
implementation of that interface that's
in the Spring Context is going to get Autowired.
38

39
00:03:17.140 --> 00:03:23.349
Now previously, I think with Spring
4.2, you'd have to do Autowired like
39

40
00:03:23.349 --> 00:03:28.810
this. That is no longer required when you
have a Constructor like this, you don't
40

41
00:03:28.810 --> 00:03:34.299
need to do that. So now, let's go ahead
and I am going to start this up. Let's
41

42
00:03:34.299 --> 00:03:39.010
make sure this runs happily. I should
still see everything wired up and I'm
42

43
00:03:39.010 --> 00:03:42.579
laying the groundwork here
because what I want to do is start
43

44
00:03:42.579 --> 00:03:46.329
utilising Spring to manage the
components in this. You can see there
44

45
00:03:46.329 --> 00:03:50.769
down at the bottom, I did get Owners and
that's loaded up just like it was before
45

46
00:03:50.769 --> 00:03:56.409
but now we are using the Spring Context
to load it. Coming up, I did not do
46

47
00:03:56.409 --> 00:04:01.920
any additional annotations on this. But
coming up, as we implement the different
47

48
00:04:01.920 --> 00:04:08.409
implementations of this, we will use
Spring Profiles to control. Like a flag
48

49
00:04:08.409 --> 00:04:13.090
that we can turn on and off, we'll use
those Spring Profiles to configure this.
49

50
00:04:13.090 --> 00:04:17.079
But for right now, we only have one
implementation so that's just perfectly
50

51
00:04:17.079 --> 00:04:23.320
fine. Just as a quick recap here, what
I did is we did have the the private
51

52
00:04:23.320 --> 00:04:27.520
final variables. We don't want anybody
changing those. I changed it so that
52

53
00:04:27.520 --> 00:04:32.380
those are injected into the constructor.
I have one constructor on my class which
53

54
00:04:32.380 --> 00:04:36.070
requires Spring and the Spring Inversion
Control Container is going to
54

55
00:04:36.070 --> 00:04:41.110
wire up these components for us because
I've added annotations to this. These are
55

56
00:04:41.110 --> 00:04:45.669
now available for us. Going forward,
what will be doing coming up in the
56

57
00:04:45.669 --> 00:04:49.810
classes will be wiring these into our
controllers and so we'll have these
57

58
00:04:49.810 --> 00:04:53.470
Spring Beans wired into controllers so
we can utilize those data services in
58

59
00:04:53.470 --> 00:04:56.919
our controllers as well but we will do
that and upcoming video of this course.
59

60
00:04:56.919 --> 00:05:04.020
So I'm going to go ahead. That was #22. I'll go ahead and Commit this now.
60

61
00:05:11.840 --> 00:05:17.630
So same it Closes #22. I will Commit
and Push this. This is some very
61

62
00:05:17.630 --> 00:05:20.990
basic configuration that we've seen then
the course so far some kind of
62

63
00:05:20.990 --> 00:05:25.670
reiterating that. We will definitely
be expanding upon this as we develop our
63

64
00:05:25.670 --> 00:05:28.840
Spring Pet Clinic project.
