WEBVTT
0
1
00:00:04.279 --> 00:00:09.690
Now, one use case for JMS is to actually
send a JMS message and then expect a
1

2
00:00:09.690 --> 00:00:14.759
reply. So, this kind of breaks the
asynchronicity of typical JMS messaging.
2

3
00:00:14.759 --> 00:00:18.900
But there are use cases where you wanna do a send and receive across the JMS
3

4
00:00:18.900 --> 00:00:25.109
broker. And what happens in this scenario
is you send out to a queue, the message
4

5
00:00:25.109 --> 00:00:30.000
consumer then replies back on a
temporary queue. And, this is all kind of
5

6
00:00:30.000 --> 00:00:34.469
managed transparently for us. And, what
I'm gonna do in this video is I'm gonna
6

7
00:00:34.469 --> 00:00:38.460
show you how to set that up and it's
actually a little little tricky but not
7

8
00:00:38.460 --> 00:00:44.100
too bad. And, I'm gonna start off here.
And what we're doing, I'm just gonna grab
8

9
00:00:44.100 --> 00:00:50.760
this here. I'm gonna copy this
completely and we'll modify it. And I am
9

10
00:00:50.760 --> 00:00:57.170
going to clean this up a little bit so
we don't get that chatter from this guy.
10

11
00:00:57.960 --> 00:01:02.360
And let's see here. I'm gonna get rid of
that
11

12
00:01:02.980 --> 00:01:13.360
say sendAndReceiveMessage. And on this let's
actually add a new queue for this.
12

13
00:01:13.370 --> 00:01:25.060
Copy that like so and MY_SEND_RCV_QUEUE.
13

14
00:01:26.760 --> 00:01:28.500
So, I'm gonna call that replybacktome.
14

15
00:01:28.500 --> 00:01:31.890
So, MY_SEND_RCV_QUEUE is gonna be replybacktome. So, that's the name of
15

16
00:01:31.890 --> 00:01:36.390
the queue that we are going to be
working out and let's come back over
16

17
00:01:36.390 --> 00:01:39.980
here to my HelloSender.
17

18
00:01:40.590 --> 00:01:45.509
What we wanna do here is no one wanna use convertAndSend. What we're going
18

19
00:01:45.509 --> 00:01:51.750
to do is sendAndReceive. And here,
we're gonna use the message
19

20
00:01:51.750 --> 00:01:56.549
destination such JmsConfig. We're gonna do MY_SEND_RCV_QUEUE like so.
20

21
00:01:56.549 --> 00:02:01.020
This is where it gets a little bit
tricky. We actually need to
21

22
00:02:01.020 --> 00:02:07.979
instantiate at an interface. So, we wanna do a new MessageCreator like that.
22

23
00:02:07.979 --> 00:02:14.230
And here what we wanna do is do this
session.
23

24
00:02:14.230 --> 00:02:21.250
We need to do a Message. So, I'm gonna
do helloMessage equals session.create
24

25
00:02:21.250 --> 00:02:28.180
We want to createTextMessage
like so. And here, because we're not doing
25

26
00:02:28.180 --> 00:02:32.500
the conversion. Remember, how we had to
convert and save we need to manage that
26

27
00:02:32.500 --> 00:02:39.510
ourselves. So, what we need to do here is
I'm going to come up here as a 
27

28
00:02:39.510 --> 00:02:42.510
private final.
28

29
00:02:43.780 --> 00:02:48.890
So remember, Spring Boot is going to be creating a Jackson object
29

30
00:02:48.890 --> 00:02:52.130
mapper for us and configuring. So, we'll
use that. We'll just be consistent with
30

31
00:02:52.130 --> 00:02:56.720
that. And, I'm creating that private final
property and our Lombok will provide a
31

32
00:02:56.720 --> 00:03:00.980
constructor and Spring will go ahead
and inject that for us. So now here down
32

33
00:03:00.980 --> 00:03:09.590
on the message, what we wanna do is say
helloMessage. Actually it goes into
33

34
00:03:09.590 --> 00:03:14.629
the constructor. I'm sorry.
In the constructor, what we'll do is
34

35
00:03:14.629 --> 00:03:19.134
we'll do objectMapper.writeValueAsString
35

36
00:03:19.134 --> 00:03:22.320
and we'll take in our message.
36

37
00:03:22.320 --> 00:03:25.520
And we'll typo on that.
37

38
00:03:26.420 --> 00:03:30.770
And also, what we wanna do on the
helloMessage, we want to set up property
38

39
00:03:30.770 --> 00:03:35.720
so a string property because remember,
here in our JmsConfig, we are doing
39

40
00:03:35.720 --> 00:03:41.959
this type. So, that's exactly what we want
to put on our message. Remember, that
40

41
00:03:41.959 --> 00:03:46.550
was getting set to this fully qualified
class name. So, come over here to our
41

42
00:03:46.550 --> 00:03:51.640
HelloWorldMessage. I grabbed the
package of this.
42

43
00:03:52.280 --> 00:03:58.700
And of course, I could do reflection for
it too. Get the fully qualified class name
43

44
00:03:58.700 --> 00:04:02.680
but this is just as easy.
44

45
00:04:03.480 --> 00:04:10.800
So, that's set that up. And now we wanna do a return
another helloMessage like so.
45

46
00:04:16.400 --> 00:04:23.130
And here, I'm surrounding this with a
catch statement and I clean this up a
46

47
00:04:23.130 --> 00:04:27.230
little bit. IntelliJ didn't quite do it
right for me.
47

48
00:04:28.100 --> 00:04:37.810
And if this fails, I am just gonna go
throw a new JMSException.
48

49
00:04:44.879 --> 00:04:50.490
So, if it fails, it will go kaboom. So, I'm
just handling that exception there. So,
49

50
00:04:50.490 --> 00:04:54.330
I'm creating a new MessageCreator. And
what this is going to do is I'm
50

51
00:04:54.330 --> 00:04:58.709
implementing this MessageCreator and I have
this createMessage which is gonna
51

52
00:04:58.709 --> 00:05:02.969
return back the message. I'm building the
message from up here on line 45. I'm
52

53
00:05:02.969 --> 00:05:06.719
doing the exact same thing that convertAndSend did. So, I'm sending out that
53

54
00:05:06.720 --> 00:05:12.020
message like that. So, I clean this
little piece up.
54

55
00:05:12.700 --> 00:05:18.380
I'm gonna get rid of this piece here.
55

56
00:05:18.580 --> 00:05:25.080
And lets do like so. I'm just reviewing what got going
on here.
56

57
00:05:26.300 --> 00:05:32.920
I put a little output here "Sending Hello". So, this is gonna do the
57

58
00:05:32.930 --> 00:05:39.040
send portion of it. Now, we need to handle
the return.
58

59
00:05:39.180 --> 00:05:42.800
So I'm going to add and
59

60
00:05:42.830 --> 00:05:48.820
make sure I copy this guy too. So, I do
this like so.
60

61
00:05:48.820 --> 00:05:54.130
And here, I wanna do listenFor. I'll just say listenforHello. And in
61

62
00:05:54.130 --> 00:05:58.140
this case, we will want to change the queue
name.
62

63
00:05:59.289 --> 00:06:05.409
MY_SEND_RCV_QUEUE
and I get rid of this here. And I'm
63

64
00:06:05.409 --> 00:06:09.200
gonna comment this out so we don't see
that chatter when we run it.
64

65
00:06:09.200 --> 00:06:15.960
And in this case, what we wanna do here
is we also need a JmsTemplate. So, let's
65

66
00:06:15.960 --> 00:06:18.740
go in private.
66

67
00:06:20.050 --> 00:06:29.350
So, adding in the JmsTemplate and let's
add in @RequiredArgsConstructor. And here,
67

68
00:06:29.350 --> 00:06:37.810
what we will do is come in say jmsTemplate and we want to convertAndSend.
68

69
00:06:37.810 --> 00:06:43.800
And here, what we need to do is cast a
Destination
69

70
00:06:43.860 --> 00:06:50.840
message. That's a getJMSReplyTo.
70

71
00:06:51.220 --> 00:06:58.120
Actually, we need to send a message on 
 that. I am going to steal this guy right here.
71

72
00:07:01.640 --> 00:07:05.740
And this time, we're gonna say "World!!".
72

73
00:07:11.740 --> 00:07:15.260
I need to rename this too.
73

74
00:07:21.920 --> 00:07:27.610
So, what's going on here is I'm building up that message object. I'm doing a convertAndSent, just like we
74

75
00:07:27.610 --> 00:07:33.340
were doing before. But the secret sauce
here is we are gonna be taking the
75

76
00:07:33.340 --> 00:07:37.300
JMS reply to. And actually, I don't need
that cast in there. So, I'm get rid of
76

77
00:07:37.300 --> 00:07:43.600
that. So, I'm taking the JMSReplyTo
write off the message and then I'm
77

78
00:07:43.600 --> 00:07:49.449
adding in the payload message. And let's
go ahead. Let's see here. And then finally,
78

79
00:07:49.449 --> 00:07:56.220
what we wanna do here under
sender.
79

80
00:07:56.240 --> 00:08:00.410
We are actually gonna
getting a message.
80

81
00:08:04.370 --> 00:08:09.980
So, we are gonna do a receive message.
We can get rid of the System.out. Or
81

82
00:08:09.980 --> 00:08:13.150
actually, what we wanna do is
82

83
00:08:14.539 --> 00:08:22.120
and a getBody that will be that should
be the object. So, it should be
83

84
00:08:22.120 --> 00:08:28.290
a WorldMessage class. So, let's see if
that works.
84

85
00:08:30.830 --> 00:08:35.590
All right! So, I think we got
go ahead and try running this now and
85

86
00:08:35.590 --> 00:08:38.310
see what we get.
86

87
00:08:43.560 --> 00:08:51.100
And, we are getting a body not a sign ...
So let's try a string.
87

88
00:08:52.180 --> 00:08:56.320
That doesn't do it. I'll bring this up in the debugger.
88

89
00:08:58.540 --> 00:09:04.000
So now we can see that that is in fact
working. So, we have the hello world
89

90
00:09:04.000 --> 00:09:09.580
coming back. So now getting a round trip.
Basically, we're sending a message and
90

91
00:09:09.580 --> 00:09:15.880
also receiving that message. So, by using
the sendAndReceive, this functionality
91

92
00:09:15.880 --> 00:09:20.650
is setting a temporary queue on the
message and it's going up to the queue.
92

93
00:09:20.650 --> 00:09:24.490
And then, it's returning back to
different queue. And actually, let me stop
93

94
00:09:24.490 --> 00:09:29.290
this and bring this up in the debugger
so you can actually see that. So, if I
94

95
00:09:29.290 --> 00:09:34.360
come up here and I'm gonna set a
breakpoint here, remove that one and
95

96
00:09:34.360 --> 00:09:37.780
let's run this in the debugger and we'll
break on that. I wanna inspect the
96

97
00:09:37.780 --> 00:09:41.560
message. I wanna show you that
temporary property that temporary queue
97

98
00:09:41.560 --> 00:09:45.960
that gets set up on that. So that we are
broke.
98

99
00:09:46.460 --> 00:09:51.380
Here we are in the message. You can see
the msgID and this reply to right
99

100
00:09:51.380 --> 00:09:56.060
here. So, this is the reply to temporary
queue. So, what's happening is message
100

101
00:09:56.060 --> 00:10:00.680
sender is saying, I want to reply on
this temporary queue. And then, it's gonna
101

102
00:10:00.680 --> 00:10:04.070
listen on that temporary queue to get
the message back. So, that's kind of neat how that
102

103
00:10:04.070 --> 00:10:06.170
works.
Like I said it at the beginning in the
103

104
00:10:06.170 --> 00:10:10.880
video, typically you're gonna send a
message and forget. But there is a use
104

105
00:10:10.880 --> 00:10:14.870
case where you wanna send a message
and get a response back. And by using
105

106
00:10:14.870 --> 00:10:18.800
these temporary queues, this is a way
that you can do and get asynchronous
106

107
00:10:18.800 --> 00:10:24.380
response back through signing JMS
messages.
107

108
00:10:24.380 --> 00:10:28.190
Stop the debugger and we'll do a quick
review of the changes that I made in
108

109
00:10:28.190 --> 00:10:33.530
this video. First off in the jmsConfig, I
added a new queue name so to replybacktome
109

110
00:10:33.530 --> 00:10:41.720
queue. And then, on the sender added a
new sendAndReceive method scheduled to
110

111
00:10:41.720 --> 00:10:46.370
go every two seconds. I'm sending a "Hello
World" message with a payload of just
111

112
00:10:46.370 --> 00:10:53.060
"Hello" as the message itself. And then
through a jmsTemplate, I am doing the
112

113
00:10:53.060 --> 00:10:57.290
sendAndReceive message. I'm sending to
that new queue and then I'm creating a new
113

114
00:10:57.290 --> 00:11:01.130
instance of a message from creator. You
could see IntelliJ is saying that we
114

115
00:11:01.130 --> 00:11:04.130
could replace this with a Lambda.
Probably a little cleaner and do it that
115

116
00:11:04.130 --> 00:11:08.810
way, optionally. But here, this is
fine for our purposes of demonstrating
116

117
00:11:08.810 --> 00:11:15.860
this. And then, I'm going to create a new
message here and we are manually
117

118
00:11:15.860 --> 00:11:21.680
handling what we did. So remember we set
up this MessageConverter and that is
118

119
00:11:21.680 --> 00:11:25.760
going to be providing a MessageConverter for us. That's configured by
119

120
00:11:25.760 --> 00:11:31.010
Jackson and Spring Boot. Here, we can't
use that because that is a wired into
120

121
00:11:31.010 --> 00:11:35.840
the convertAndSend. So, what we are going
to do is manually do that. So, we are
121

122
00:11:35.840 --> 00:11:41.570
creating an actual JMS text message. And
in the constructor, we are providing the
122

123
00:11:41.570 --> 00:11:46.880
JSON value through the object mapper. And
then on line 58, it's important that we
123

124
00:11:46.880 --> 00:11:51.140
set that underscore type and then the
fully qualified class name of that JSON
124

125
00:11:51.140 --> 00:11:56.570
payload. So, on the receiving side we can
deserialize it back into a Java object.
125

126
00:11:56.570 --> 00:12:02.390
So, we send out that message. This JMS
sendAndReceive responds back with a
126

127
00:12:02.390 --> 00:12:09.230
receiveMsg. And then, here on line 70,
we are going ahead and getting the
127

128
00:12:09.230 --> 00:12:13.490
body of the message that was sent to us
on the queue, on the temporary reply
128

129
00:12:13.490 --> 00:12:15.790
queue.
