WEBVTT
0
1
00:00:01.140 --> 00:00:05.850
Alright! In this video, we are going to do
a quick look at the history of MySQL and
1

2
00:00:05.850 --> 00:00:12.000
all it came to be.
So quick overview about MySQL, it's got
2

3
00:00:12.000 --> 00:00:18.060
over 100 million downloads. It's by far
the most popular database in history. Like
3

4
00:00:18.060 --> 00:00:22.169
we've said before, it is a relational
database management system. It is owned
4

5
00:00:22.169 --> 00:00:27.960
by Oracle but MySQL is open source under
GPL and that is absolutely free to use.
5

6
00:00:27.960 --> 00:00:33.440
You'll hear some people say My Sequel
but officially the documentation is
6

7
00:00:33.440 --> 00:00:39.210
pronounced MySQL. This
official way but you'll hear some people
7

8
00:00:39.210 --> 00:00:43.649
calling in My Sequel as well. So
industrialize says that's okay to say if
8

9
00:00:43.649 --> 00:00:49.500
you will. Now in 1995 a Swedish company
called MySQL AB created it. The
9

10
00:00:49.500 --> 00:00:54.390
original developers included Monty.
Michael Monty Widenius, I think. David
10

11
00:00:54.390 --> 00:00:59.010
Axmark and Allan Larsson. MySQL was
actually named after Monty's daughter
11

12
00:00:59.010 --> 00:01:04.170
My. So that's how it came up with the name
MySQL and it's been released under
12

13
00:01:04.170 --> 00:01:12.030
GPL semi public license in 2000. By
2001 it had over 2 million active
13

14
00:01:12.030 --> 00:01:16.049
installation so grapple gained
popularity once it was released as open
14

15
00:01:16.049 --> 00:01:21.229
source.
In 2005, Oracle acquired Innobase, that is the
15

16
00:01:21.229 --> 00:01:27.490
company behind the storage back-end of
MySQL and as it grew, you see here in
16

17
00:01:27.490 --> 00:01:35.119
2006, MySQL had over 8 million
installations 320 employees, over 25
17

18
00:01:35.119 --> 00:01:40.580
countries. Now Sun Microsystems actually
brought MySQL in 2008 for 1 billion
18

19
00:01:40.580 --> 00:01:45.979
dollars. It had become a choice
database for large corporations, banks
19

20
00:01:45.979 --> 00:01:53.810
and telecoms because of its durability and
reliability and scalability. Then in 2010
20

21
00:01:53.810 --> 00:01:59.330
Oracle went after Sun Microsystems, there
some legal issues there with the EU but
21

22
00:01:59.330 --> 00:02:04.610
the purchase was finalized so the Oracle
Corporation bound up through this
22

23
00:02:04.610 --> 00:02:10.429
acquisition of Sun with MySQL. This
caused a lot of concern in the
23

24
00:02:10.429 --> 00:02:15.709
community. Monty there
actually the left Sun Microsystems and
24

25
00:02:15.709 --> 00:02:20.930
developed before a fork of MySQL called  Maria DB.
A lot of people are
25

26
00:02:20.930 --> 00:02:23.959
concerned about what was going to happen
with MySQL. There's a lot of synical
26

27
00:02:23.959 --> 00:02:28.310
people in the industry that thought of
Oracle saw MySQL as a competitor and
27

28
00:02:28.310 --> 00:02:33.410
they'll think you crush it and stop it.
But that has not happened MySQL does
28

29
00:02:33.410 --> 00:02:38.989
continue. Oracle is seeing a lot of success with
the product and Maria DB is still 100%
29

30
00:02:38.989 --> 00:02:45.709
compatible with MySQL, API wise. The code
base has been in forked and they're
30

31
00:02:45.709 --> 00:02:50.150
developing it separately from MySQL.
But if you want to use it, the
31

32
00:02:50.150 --> 00:02:56.540
API itself commands that you use exactly
the same as MySQL. Some of the
32

33
00:02:56.540 --> 00:03:01.340
features both MySQL said previously
it as a relational database management
33

34
00:03:01.340 --> 00:03:04.069
system.
SQL stands for Structured Query Language.
34

35
00:03:04.069 --> 00:03:10.100
It does support the ANSI standards
so I'm just happy you're seeing previously in
35

36
00:03:10.100 --> 00:03:14.959
the course that ANSI standards on MySQL
is largely interpreted so but
36

37
00:03:14.959 --> 00:03:19.130
it does do a pretty good job of
supporting ANSI standards. MySQL under the
37

38
00:03:19.130 --> 00:03:24.560
covers is developed in C and C++. These are
very popular programming languages. They
38

39
00:03:24.560 --> 00:03:28.940
do the pub on the made of machine code
that you can compile it on many different
39

40
00:03:28.940 --> 00:03:32.380
platforms. That's why
was so easy to port to different
40

41
00:03:32.380 --> 00:03:38.080
operating systems. MySQL is known for
being very fast, stable, and scalable. Then
41

42
00:03:38.080 --> 00:03:42.460
we talk about MySQL clients. The client
is the chimp of software that you can use
42

43
00:03:42.460 --> 00:03:46.180
to pop to the database, so you're going to
have communication pipe are going to
43

44
00:03:46.180 --> 00:03:51.520
the database. You have clients for all
the major popular programming languages so
44

45
00:03:51.520 --> 00:03:55.700
that's just suppose just about everything it goes.
45

46
00:03:55.700 --> 00:04:00.350
Most on the features of the database, you
can write stored procedures. This is a
46

47
00:04:00.350 --> 00:04:05.060
piece of code inside of the database that
execute against the database so it runs
47

48
00:04:05.060 --> 00:04:09.740
locally on the database. Triggers, we haven't really
 discuss those yet. Triggers are
48

49
00:04:09.740 --> 00:04:14.690
a piece of code that so when something
happens in the database like you insert
49

50
00:04:14.690 --> 00:04:19.669
a record the trigger will run before or
after that transaction. Cursors are
50

51
00:04:19.669 --> 00:04:24.169
something that you can use to get a
large set of data and they kind of lets
51

52
00:04:24.169 --> 00:04:28.580
you point a place in the data, so you can
scroll through it and look into the next
52

53
00:04:28.580 --> 00:04:31.400
record giving the next record
so that is a programming thing.
53

54
00:04:31.400 --> 00:04:38.419
Updated views, so views are like a
virtual table. It's an actual SQL view
54

55
00:04:38.419 --> 00:04:43.010
but you store that inside the database.
Then, Query Caching. This is a
55

56
00:04:43.010 --> 00:04:48.260
technology where the database is going
to remember in memory, in real memory
56

57
00:04:48.260 --> 00:04:53.300
the results of your query, so when you
ask for that data again, it doesn't have
57

58
00:04:53.300 --> 00:04:57.620
to go back to the file system to find
the data. It will be stored in real memory.
58

59
00:04:57.620 --> 00:05:01.669
That's something really brings up
the performance to the database and then a
59

60
00:05:01.669 --> 00:05:06.260
Subselects, that's a nice feature where
you can have all nested queries and we
60

61
00:05:06.260 --> 00:05:10.550
will definitely be seeing some of that
ahead and of course. We'll get more.
61

62
00:05:10.550 --> 00:05:17.599
Then ACID compliance so this is a very
important thing as far as the databases
62

63
00:05:17.599 --> 00:05:24.050
work. So ACID is a concept when you have
multiple users on the system if they're
63

64
00:05:24.050 --> 00:05:29.240
going to have of a series of sequence of
statements in a sequence so
64

65
00:05:29.240 --> 00:05:32.960
all those statements should complete or
none of them should complete. So this
65

66
00:05:32.960 --> 00:05:37.220
is inside of a transaction.
Think about if, a good example would
66

67
00:05:37.220 --> 00:05:41.900
be if I'm creating an order, I'm going to
insert a order header record in which
67

68
00:05:41.900 --> 00:05:46.789
insert like new lines that happen, so
what this is saying that if I'm doing
68

69
00:05:46.789 --> 00:05:51.770
that in a set of a database transaction,
all those statements should completed
69

70
00:05:51.770 --> 00:05:57.860
model complete, so meaning that the
last order line had an error none of
70

71
00:05:57.860 --> 00:06:02.270
them that would have a half baked
transaction in the database. We will
71

72
00:06:02.270 --> 00:06:07.190
get into transactions in the future
of the course. Consistency, so they are
72

73
00:06:07.190 --> 00:06:10.639
valid according to the rules of database
so we talked about that previously for
73

74
00:06:10.639 --> 00:06:14.599
the data types and different constraints
that we can do. Isolation, so the results
74

75
00:06:14.599 --> 00:06:20.659
of the transactions are done end to end. So the 
function in isolation when they
75

76
00:06:20.659 --> 00:06:25.069
commit, they become available to all
those. Durability, so once the transaction
76

77
00:06:25.069 --> 00:06:29.449
is committed, it remains so. Community
likes to joke about MongoDB losing data.
77

78
00:06:29.449 --> 00:06:34.400
This is important so once you get
back a response that your transition as
78

79
00:06:34.400 --> 00:06:39.229
committed, you can trust that data is
actually stored in the database. Some of
79

80
00:06:39.229 --> 00:06:44.750
the novel SQL databases actually do not
support ACID compliance. They trade your
80

81
00:06:44.750 --> 00:06:47.539
data integrity away for speed and
performance.
81

82
00:06:47.539 --> 00:06:50.300
Underneath the covers of the database,
there's a lot of us going to be
82

83
00:06:50.300 --> 00:06:54.409
happening there, maintaining this ACID
compliance. This is a very important
83

84
00:06:54.409 --> 00:06:59.990
feature and this is why obviously like
banks will like MySQL because this ACID
84

85
00:06:59.990 --> 00:07:03.889
compliance ensures such a financial
transaction completes the way you expect
85

86
00:07:03.889 --> 00:07:09.879
it to. It's very important thing there.
MySQL Editions. We have the MySQL
86

87
00:07:09.879 --> 00:07:13.659
Community Edition. This is the edition
MySQL that we are going to be using.
87

88
00:07:13.659 --> 00:07:18.340
That is free. That said, it's open source
on your GPL. The Community Edition
88

89
00:07:18.340 --> 00:07:22.960
means that it's open source but you
only get community support so if you had
89

90
00:07:22.960 --> 00:07:27.999
a business and you're running MySQL and had
a problem with it, you would have to go
90

91
00:07:27.999 --> 00:07:31.509
out to support forums and post there and
see if you can get somebody to help you.
91

92
00:07:31.509 --> 00:07:36.849
It is a pretty vibrant community so
not a bad thing to do. A lot of companies
92

93
00:07:36.849 --> 00:07:44.199
will go to MySQL Standard Edition and
this is about $2,000 per year per server
93

94
00:07:44.199 --> 00:07:47.469
and I have a little squiggly long in
there because there are some constraints
94

95
00:07:47.469 --> 00:07:51.669
around numbers CPU sockets that you had
on it's over and I'm not going to go
95

96
00:07:51.669 --> 00:07:56.889
down that rabbit hole but roughly $2,000
per year per server. What this does
96

97
00:07:56.889 --> 00:08:02.289
is gives you 24/7 support from Oracle so
if you have any problems, you can call up
97

98
00:08:02.289 --> 00:08:06.189
Oracle and get resolution with it. So
some of that companies want when we're
98

99
00:08:06.189 --> 00:08:10.120
running a business, if there's something
that happens to your database, obviously
99

100
00:08:10.120 --> 00:08:13.750
you're going to want to resolve that
problem very rapidly. Technology wise,
100

101
00:08:13.750 --> 00:08:17.770
it's technically the same as Community
Edition. The biggest thing is that you
101

102
00:08:17.770 --> 00:08:23.289
have that support and the guarantee of
support from Oracle. Now we also have
102

103
00:08:23.289 --> 00:08:27.939
MySQL Enterprise Edition. This is for
larger operations so when you're getting
103

104
00:08:27.939 --> 00:08:32.079
into a more significant operational, you
add more users, more transactions on the
104

105
00:08:32.079 --> 00:08:36.849
database. You're running a bigger system.
This gives you features for cluster
105

106
00:08:36.849 --> 00:08:41.529
routing and partitioning. Cluster
routing is you're going to have several
106

107
00:08:41.529 --> 00:08:46.660
database servers acting as one and
the routing is powdered. Your connections come
107

108
00:08:46.660 --> 00:08:51.399
in and gets distributed across the
server nodes. Partitioning is a very
108

109
00:08:51.399 --> 00:08:55.420
interesting technology. What this does is 
if I have a table with a little bit
109

110
00:08:55.420 --> 00:09:00.130
let's say a billion rows in the table,
that's going to be stored on a disks somewhere
110

111
00:09:00.130 --> 00:09:05.589
on just somewhere. Partitioning is a
way to divide up that table across
111

112
00:09:05.589 --> 00:09:10.510
multiple disks of different storage
options. What this allows us to do is
112

113
00:09:10.510 --> 00:09:15.100
do is go after that data because your
disk is going to be the slowest thing that
113

114
00:09:15.100 --> 00:09:19.630
happens inside of a computer and it
allows multiple threads go after that data so
114

115
00:09:19.630 --> 00:09:24.250
that's a big performance boost for larger
sets of data. Now of course the
115

116
00:09:24.250 --> 00:09:28.240
Enterprise Edition also includes
enterprise tooling for monitoring, backups,
116

117
00:09:28.240 --> 00:09:33.670
and security and get thread pooling in
this and also some performance charts on MySQL
117

118
00:09:33.670 --> 00:09:38.940
Standard Edition does not have thread pooling
and as you get into higher and higher
118

119
00:09:38.940 --> 00:09:43.720
server loads, there's more and more
people connected into the database, the
119

120
00:09:43.720 --> 00:09:47.500
thread pooling becomes very important. 
This is going to be so some pretty high end
120

121
00:09:47.500 --> 00:09:52.810
databases. MySQL Standard Edition is
going to handle quite a bit so these are
121

122
00:09:52.810 --> 00:09:59.680
for really large things, and then the
big boy is MySQL Cluster CGE.
122

123
00:09:59.680 --> 00:10:04.810
Think of like telecoms. This is like for
design from near linear scalability
123

124
00:10:04.810 --> 00:10:09.760
through clustering and it's high volume
high availability so this is for
124

125
00:10:09.760 --> 00:10:15.399
really large operations, like think
of Verizon doing text messages. They might
125

126
00:10:15.399 --> 00:10:20.319
have a MySQL Cluster behind those text
messages. So real pretty big stuff so we're
126

127
00:10:20.319 --> 00:10:23.380
not going to get into these. The one that
we are going to be using is the
127

128
00:10:23.380 --> 00:10:27.940
Community Edition. We can learn a tremendous
amount from that and coming up in the
128

129
00:10:27.940 --> 00:10:31.860
course, we'll be talking about how to
install that.
