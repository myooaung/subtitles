WEBVTT
1
00:00:05.400 --> 00:00:08.910
Now in this module we're going to introduce you to configuring spring controllers.

2
00:00:08.910 --> 00:00:13.240
What we need to do is associate a controller method with a request path.

3
00:00:13.230 --> 00:00:19.560
Thus when spring gets requests on a specific path a specific controller method will get invoked.

4
00:00:19.560 --> 00:00:24.270
Now in our example what would you want the controller to do is go to the database get a list of books

5
00:00:24.360 --> 00:00:25.980
and return it over to the view.

6
00:00:26.170 --> 00:00:30.910
Now to configure a controller in spring we're going to agitate the class with the controller annotation.

7
00:00:31.020 --> 00:00:37.150
This will tell spring to manage that class as the spring being and that it is a Spring MVC controller.

8
00:00:37.350 --> 00:00:40.230
Notice set up the request path.

9
00:00:40.230 --> 00:00:46.500
We are gonna use the annotation request math mapping to tell spring to associate a path with a controller

10
00:00:46.500 --> 00:00:47.210
method.

11
00:00:47.340 --> 00:00:51.870
In this module we are just going to look at configuring the controller to return Dad to the view.

12
00:00:51.960 --> 00:00:56.490
The next video we're going to take a look at the actual view layer so jump over to Intelligence now

13
00:00:56.790 --> 00:00:59.280
and show you how to wire up a spring controller.

14
00:00:59.310 --> 00:01:05.250
All right we're going to take a look at setting up a spring controller back in Intel J on our project

15
00:01:05.250 --> 00:01:08.740
that we just worked on and what we want to do.

16
00:01:08.790 --> 00:01:14.040
It's a good convention to follow it's not an official convention but most people or many people do I

17
00:01:14.040 --> 00:01:18.060
should say it does create a pat or a new package.

18
00:01:19.080 --> 00:01:20.080
For the controllers.

19
00:01:20.150 --> 00:01:24.740
So just a good organizational habit let's call it and we'll just call it controller

20
00:01:27.970 --> 00:01:31.900
and what I'm going to do is create a a new Java class called book controller

21
00:01:36.930 --> 00:01:43.290
and the first thing we want to do is annotated with at controller.

22
00:01:43.340 --> 00:01:50.050
So this is what does the registration of the class in spring so spring is gonna detect this as a spring

23
00:01:50.050 --> 00:01:55.130
bean and create the class whereas and wired into the spring context

24
00:01:58.300 --> 00:02:00.760
and what we want to do is return a string of The View name

25
00:02:04.890 --> 00:02:08.340
and to this what we want to do is pass in the model

26
00:02:12.380 --> 00:02:18.500
so spring well because we're specifying this as as a model spring will pass and the model objects that

27
00:02:18.500 --> 00:02:21.060
remember the model view controller paradigm MVC.

28
00:02:21.440 --> 00:02:29.960
So by and by by passing in the model which is an interface spring will pass in the implementation of

29
00:02:29.960 --> 00:02:32.990
it at runtime when this controller method is invoked.

30
00:02:33.020 --> 00:02:36.230
Next we want to associate this with the book's path

31
00:02:39.490 --> 00:02:40.840
so we'll use request mapping

32
00:02:44.790 --> 00:02:46.140
and just say books.

33
00:02:46.270 --> 00:02:55.650
So this will get invoked there whenever a request comes in to slash books on our our web application.

34
00:02:55.660 --> 00:02:57.340
Now we won't get the repository

35
00:03:05.090 --> 00:03:09.020
ad in a constructor for the book repository.

36
00:03:09.020 --> 00:03:14.240
And so when spring creates us it's going to automatically inject the instance of the book repository

37
00:03:16.250 --> 00:03:30.300
we want to say here is modeled ad we're going gonna add an attribute.

38
00:03:30.410 --> 00:03:31.200
So what.

39
00:03:31.220 --> 00:03:37.010
What's happening here on line 23 is we're taking the model that gets passed in and we're going to add

40
00:03:37.010 --> 00:03:39.330
an attribute called books.

41
00:03:39.440 --> 00:03:43.040
So there's going to be the list of books coming out of the book repository.

42
00:03:43.070 --> 00:03:50.600
So this is going to tell spring data JPA to go out and get a list of books from the database and spring

43
00:03:50.600 --> 00:03:57.290
NBC is going to associate that list which is our model just a list of the photos from the database and

44
00:03:57.290 --> 00:03:59.670
that that would be passed onto our view.

45
00:03:59.720 --> 00:04:00.890
Now the last thing that we needed

46
00:04:05.550 --> 00:04:08.340
is return a String and we're going to call it books.

47
00:04:08.610 --> 00:04:11.730
And what that's going to do is associate it with a timely view.

48
00:04:11.730 --> 00:04:14.460
So we're just giving it the view name.

49
00:04:14.460 --> 00:04:18.380
Now it's going to when we get to the time leaf part it's going to look things up.

50
00:04:18.420 --> 00:04:25.080
So just to recap everything that I did here is I created a controller called Book controller I annotated

51
00:04:25.080 --> 00:04:31.080
there on 9/11 with the controller annotation and this tells it that it's a spring bean.

52
00:04:31.110 --> 00:04:33.810
So it's now going to be a spring manage component.

53
00:04:33.810 --> 00:04:39.990
And because I'm specifying the constructor they're online line sixteen that takes in a book repository

54
00:04:39.990 --> 00:04:46.930
spring will auto wire that end for us automatically we'll get a instance there and now on line 20 the

55
00:04:46.950 --> 00:04:49.120
request mapping of books.

56
00:04:49.230 --> 00:04:55.050
So when we'll get a request that comes into the book CRL this method is gonna get invoked the spring

57
00:04:55.050 --> 00:05:01.950
framework that spring MVC is going to pass and an instance of the model and online twenty three we're

58
00:05:01.950 --> 00:05:07.230
saying had an attribute to the model called books and that's going to be a list of books out of the

59
00:05:07.230 --> 00:05:08.130
book repository.

60
00:05:08.130 --> 00:05:14.640
So underneath the covers book repositories using spring data JPA it's going to use hibernate to go out

61
00:05:14.670 --> 00:05:17.250
and get a list of books out of our database.

62
00:05:17.490 --> 00:05:25.470
And then finally on line 25 we're returning the string books which is going to tell Spring MVC to associate

63
00:05:25.470 --> 00:05:30.960
this with a view called books and in the next video we're going to get into and take a look at the actual

64
00:05:30.960 --> 00:05:33.590
creation of the books view.

65
00:05:33.620 --> 00:05:37.880
Now what you saw me create there was a very simple Spring MVC controller.

66
00:05:37.920 --> 00:05:40.200
This is about as simple as they come now.

67
00:05:40.200 --> 00:05:45.240
Going forward in the course we are going to get into Spring MVC a lot more in depth just going through

68
00:05:45.240 --> 00:05:50.430
a very simple example here to get your feet wet with Spring MVC so further down in the course we're

69
00:05:50.430 --> 00:05:54.160
definitely going to explore spring controllers more because there's a lot more to it.

70
00:05:54.510 --> 00:05:56.830
But for now this is just a very simple example.

71
00:05:56.830 --> 00:06:01.680
All we want to do is display a list of books on the web page and in the next video we're going to show

72
00:06:01.680 --> 00:06:04.590
you the view technology so we can get that web page displayed.
