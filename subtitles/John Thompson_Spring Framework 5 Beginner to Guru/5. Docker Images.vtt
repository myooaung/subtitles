WEBVTT
0
1
00:00:09.650 --> 00:00:13.139
Aright, in this section, we're gonna
take a little closer look at Docker
1

2
00:00:13.139 --> 00:00:17.070
images. We're gonna get into a lot of
very important stuff. In this section, the
2

3
00:00:17.070 --> 00:00:21.779
content, that's ahead of you in this
video, is very important. This is
3

4
00:00:21.779 --> 00:00:27.269
absolutely core to your understanding of
Docker so that you have any doubt about
4

5
00:00:27.269 --> 00:00:31.289
what I cover in this, rewatch this again.
So we're gonna cover a lot of very
5

6
00:00:31.289 --> 00:00:35.850
important stuff about Docker Images and
what they are. Me, being a Java developer,
6

7
00:00:35.850 --> 00:00:42.059
a great analogy about Docker Images, they
are like your class file, that you
7

8
00:00:42.059 --> 00:00:48.780
define in Java, and at the end of that,
when the class file's running, it went
8

9
00:00:48.780 --> 00:00:54.239
it's been instantiate in the JVM. An
instance of that class file is kind of
9

10
00:00:54.239 --> 00:00:59.879
like a Docker Container. So a Docker
Image could be a great analogy, as like a
10

11
00:00:59.879 --> 00:01:05.939
class file in Java, versus an instance
running as a container. So, I had... Please
11

12
00:01:05.939 --> 00:01:10.320
pay attention. I got a lot of great content
coming up in the slide deck. Okay! Let's
12

13
00:01:10.320 --> 00:01:17.189
talk about Docker Images. Okay, Docker image
is really what defines the Docker
13

14
00:01:17.189 --> 00:01:22.950
container runtime. I kind of think of it, as
like a snapshot of VM. So you're gonna
14

15
00:01:22.950 --> 00:01:27.780
make a, have a running VM or something
that you instantiate a VM from depending
15

16
00:01:27.780 --> 00:01:32.400
on the platform you're on. That would be
like a Docker Image. For people coming
16

17
00:01:32.400 --> 00:01:36.900
from a Java background, it's kind of like
the class versus an instance of a
17

18
00:01:36.900 --> 00:01:41.610
class, where the class would be the
Docker Image, and an instance of the
18

19
00:01:41.610 --> 00:01:46.710
class would be at runtime in a container.
The key concept that we need to talk
19

20
00:01:46.710 --> 00:01:51.750
about is that images are immutable. So
once they are built, the files making up
20

21
00:01:51.750 --> 00:01:55.729
an image do not change. So you can't swap
things out. You can't change things.
21

22
00:01:55.729 --> 00:02:00.630
Unlike a VM, where you can snapshot the
VM, you can go in and change it, and
22

23
00:02:00.630 --> 00:02:05.850
update it, and then save that snapshot
again, and start that VM up from that
23

24
00:02:05.850 --> 00:02:10.619
snapshot, the image file is
considered an immutable in Docker.
24

25
00:02:10.619 --> 00:02:13.750
This is a very important concept because
a lot of stuff is
25

26
00:02:13.750 --> 00:02:20.620
built up around us. Now, images are built in
layers. This is kind of a weird
26

27
00:02:20.620 --> 00:02:28.330
concept to get around, but it's effectively a
immutable file. So, an image is gonna have
27

28
00:02:28.330 --> 00:02:33.160
multiple files in it, and these layers
are going to have basically a collection of
28

29
00:02:33.160 --> 00:02:38.920
files and directories inside of them. But
the layers will receive an ID, and
29

30
00:02:38.920 --> 00:02:46.060
that ID is calculated using a SHA 256
hash of the layer contents so that
30

31
00:02:46.060 --> 00:02:51.820
hash value becomes the identifier of a
layer. So if the layer ever changes, 
31

32
00:02:51.820 --> 00:02:56.980
the contents change in that layer, you
have to start off and get a new hash. So
32

33
00:02:56.980 --> 00:03:02.560
that hash is tied to the contents
of the layer. Now, here's an example. I've
33

34
00:03:02.560 --> 00:03:08.470
gone in and working with the Mongo image.
I did a command. I put it on the screen
34

35
00:03:08.470 --> 00:03:13.720
at the bottom of their docker image
inspect mongo. At the very end, we get
35

36
00:03:13.720 --> 00:03:17.860
to see the layers that are making up
that Mongo image. So, we got a, what is
36

37
00:03:17.860 --> 00:03:23.769
that, about a half dozen eight of them or
so in there that make up that Mongo
37

38
00:03:23.769 --> 00:03:29.530
image. So these are a series of files, and
each one of those files, the layer has
38

39
00:03:29.530 --> 00:03:34.989
its own SHA 256 identifier. This is a
hash of contents of that particular
39

40
00:03:34.989 --> 00:03:41.950
layer. Now, this plays into how image Ids
are calculated. So, the image Ids are also
40

41
00:03:41.950 --> 00:03:48.760
a hash value, that are derived from the
layers. So, if the layers change and the
41

42
00:03:48.760 --> 00:03:54.850
hash value of the image also changes. So
that this very very important to
42

43
00:03:54.850 --> 00:03:59.829
understand how these are calculated
because these are truly immutable. So if
43

44
00:03:59.829 --> 00:04:05.650
you change any of the contents, that
images and image Id is going to change.
44

45
00:04:05.650 --> 00:04:11.230
Now, when you see stuff going on inside a
Docker, you're gonna see an image ID.
45

46
00:04:11.230 --> 00:04:17.019
That is actually the first 12
characters of the hash. So I have an
46

47
00:04:17.019 --> 00:04:22.270
example here up on the screen of image
Ids and if you do the command docker
47

48
00:04:22.270 --> 00:04:27.660
images -q and no trunc, you get the
full
48

49
00:04:27.660 --> 00:04:33.100
SHA-256 value of the hash. But if you
just do Docker Images and list it, you
49

50
00:04:33.100 --> 00:04:38.560
can see there, in the lower part of the
screen, the image ID is listed, which is
50

51
00:04:38.560 --> 00:04:46.720
really the first 12 characters of the
hash value. Now, to make things easier, we
51

52
00:04:46.720 --> 00:04:54.220
use tag names. So, the hash values can be
assigned a human readable tag. This
52

53
00:04:54.220 --> 00:04:56.890
can get a little confusing because of
the format and some of the things that
53

54
00:04:56.890 --> 00:05:01.840
are inferred. But it's kind of like an IP
address versus a domain name. So, we're
54

55
00:05:01.840 --> 00:05:04.930
gonna have something, that's human
readable, and that makes sense to us as
55

56
00:05:04.930 --> 00:05:09.880
people versus over this long string of
characters, that only makes sense to a
56

57
00:05:09.880 --> 00:05:17.530
computer. So, here's an example, where
I use that same command again, the docker
57

58
00:05:17.530 --> 00:05:25.510
images -q --no-trunc, to get the
full hash value of the image. But I can
58

59
00:05:25.510 --> 00:05:31.810
see, if I just do docker images under
repository, that tag value is named
59

60
00:05:31.810 --> 00:05:40.360
mongo, and it relates to that image ID.
Now the image tag names, this is very
60

61
00:05:40.360 --> 00:05:45.930
important, when we're working with them.
The full tag name is the registry host,
61

62
00:05:45.930 --> 00:05:53.890
[REGISTRYHOST/][USERNAME/]NAME[:TAG]. Now for the
Registry Host, if you don't specify at
62

63
00:05:53.890 --> 00:06:00.310
"registry.hub.docker.com" is inferred.
So it becomes up the default value, the
63

64
00:06:00.310 --> 00:06:07.480
same with the latest tag. So, the latest
tag is commonly used, but it's rarely
64

65
00:06:07.480 --> 00:06:14.200
specified. So when we do a list under
repository, Mongo actually refers to
65

66
00:06:14.200 --> 00:06:22.690
registry.hub.docker.com/mongo or
that's a name colon latest. Now of course,
66

67
00:06:22.690 --> 00:06:27.640
I can override these. If I were running
my own Docker registry at 
67

68
00:06:27.640 --> 00:06:34.030
springframework.guru, it would be listed there
as springframework.guru/mongo:latest
68

69
00:06:34.030 --> 00:06:39.070
I can tag those with
specific versions and this becomes
69

70
00:06:39.070 --> 00:06:43.449
important later down the road,
where you're doing deployments. It's
70

71
00:06:43.449 --> 00:06:46.990
pretty common to use the latest tag, as
you're moving up through environments.
71

72
00:06:46.990 --> 00:06:52.540
But, you might want a specific version. So
when you start working with Docker,
72

73
00:06:52.540 --> 00:06:56.770
that's gonna get a little confusing at
first because you're only seeing these
73

74
00:06:56.770 --> 00:07:01.570
values where everything is inferred, but
when you start using it for real, you're
74

75
00:07:01.570 --> 00:07:08.470
gonna be dealing with actual registry
host and actual tag values. So you'll
75

76
00:07:08.470 --> 00:07:11.260
get comfortable at first, just
saying, "Hey, I wanna run a Mongo
76

77
00:07:11.260 --> 00:07:18.040
instance". By default, it's gonna go
out to the Docker registry host and
77

78
00:07:18.040 --> 00:07:23.290
bring down the latest tag for you, even
though you didn't specify those.
78

79
00:07:23.290 --> 00:07:28.419
Alright, that was a deep dive into Docker
Images -- how they are created, how they are set up.
79

80
00:07:28.419 --> 00:07:33.070
The image layers is a very important
concept. In the next video, we are
80

81
00:07:33.070 --> 00:07:38.770
gonna take a closer look at how those
images, those image layers work between
81

82
00:07:38.770 --> 00:07:41.620
the two things. We're gonna
introduce you to the concept of the
82

83
00:07:41.620 --> 00:07:45.610
Docker File. Docker File is the recipe of
how to build a docker image, so we're
83

84
00:07:45.610 --> 00:07:49.080
gonna get into that, into the next
video.
