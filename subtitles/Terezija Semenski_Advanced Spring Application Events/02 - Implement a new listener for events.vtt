WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Now that you have improved

2
00:00:02.000 --> 00:00:04.007
the design of ExistingService,

3
00:00:04.007 --> 00:00:10.003
let's add new features by implementing an event listener.

4
00:00:10.003 --> 00:00:15.003
Anyone can have multiple listeners doing different work

5
00:00:15.003 --> 00:00:18.005
based on application requirements.

6
00:00:18.005 --> 00:00:22.006
Spring gives us two ways to define Listener.

7
00:00:22.006 --> 00:00:26.009
We can either implement an ApplicationListener interface

8
00:00:26.009 --> 00:00:30.005
or use @EventListener.

9
00:00:30.005 --> 00:00:32.004
With ApplicationListener,

10
00:00:32.004 --> 00:00:35.006
as long as it is registered as Spring bean,

11
00:00:35.006 --> 00:00:38.001
it will receive events.

12
00:00:38.001 --> 00:00:41.006
Spring uses the signature of the listener

13
00:00:41.006 --> 00:00:46.006
to determine if it matches that event or not.

14
00:00:46.006 --> 00:00:49.007
Limitations of using ApplicationListener

15
00:00:49.007 --> 00:00:52.003
is that it can only be used for objects

16
00:00:52.003 --> 00:00:55.007
that extend ApplicationEvent class.

17
00:00:55.007 --> 00:01:01.006
On top of that, Listener can only process one event type.

18
00:01:01.006 --> 00:01:04.003
Starting with Spring 4.2,

19
00:01:04.003 --> 00:01:08.003
it's now possible to simply annotate a method

20
00:01:08.003 --> 00:01:12.008
over Spring bean with @EventListener.

21
00:01:12.008 --> 00:01:15.008
Each method will be automatically registered

22
00:01:15.008 --> 00:01:18.002
as a new application listener

23
00:01:18.002 --> 00:01:21.000
to listen for one or many events,

24
00:01:21.000 --> 00:01:24.009
depending on the signature of the method.

25
00:01:24.009 --> 00:01:27.007
Unlike ApplicationListener interface,

26
00:01:27.007 --> 00:01:30.009
which only supports void return type,

27
00:01:30.009 --> 00:01:35.004
annotated methods may have a nonvoid return type.

28
00:01:35.004 --> 00:01:38.001
When they do, the result of the method

29
00:01:38.001 --> 00:01:42.000
in vocation is send as a new event.

30
00:01:42.000 --> 00:01:46.005
If the return type is either an array or a collection,

31
00:01:46.005 --> 00:01:51.008
each element is send as a new individual event.

32
00:01:51.008 --> 00:01:55.000
It is also possible to define the order

33
00:01:55.000 --> 00:02:00.001
in which listeners for the same event are to be invoked.

34
00:02:00.001 --> 00:02:05.005
To do so, we can use SpringCommon @order annotation,

35
00:02:05.005 --> 00:02:10.002
alongside EventListener annotation.

36
00:02:10.002 --> 00:02:16.002
So far we have created and published RegisteredEvent.

37
00:02:16.002 --> 00:02:19.007
Now, we need to create a new listener

38
00:02:19.007 --> 00:02:22.006
that will capture RegisteredEvent

39
00:02:22.006 --> 00:02:26.005
and trigger RegistrationEmail.

40
00:02:26.005 --> 00:02:28.004
Under the email package,

41
00:02:28.004 --> 00:02:35.009
create a new class called EmailListeners.

42
00:02:35.009 --> 00:02:42.001
We need to register a new listener by creating new methods.

43
00:02:42.001 --> 00:02:44.002
Return type can be void

44
00:02:44.002 --> 00:02:47.002
since we don't need to send new events.

45
00:02:47.002 --> 00:02:50.002
Let's call it onRegisteredEvent

46
00:02:50.002 --> 00:02:55.003
that accepts type CustomerRegisteredEvent.

47
00:02:55.003 --> 00:02:59.007
In order for this method to get triggered when event is sent

48
00:02:59.007 --> 00:03:03.007
we need to annotate it with @EventListener.

49
00:03:03.007 --> 00:03:11.003
And also mark our class as Spring bean with @Component.

50
00:03:11.003 --> 00:03:15.007
Right now, our listener is not doing anything.

51
00:03:15.007 --> 00:03:17.009
In order to send an email

52
00:03:17.009 --> 00:03:25.007
we just need to inject EmailService.

53
00:03:25.007 --> 00:03:30.008
I like to use project loan book @RequiredArcsConstructor

54
00:03:30.008 --> 00:03:33.000
to remove well-played code

55
00:03:33.000 --> 00:03:36.004
and handle construction injection.

56
00:03:36.004 --> 00:03:43.002
And we can now call emailservice.sendregisteredemail

57
00:03:43.002 --> 00:03:46.003
by providing a customer from the event

58
00:03:46.003 --> 00:03:50.000
that came as a method argument.

59
00:03:50.000 --> 00:03:53.003
Keep in mind that the email service we are using

60
00:03:53.003 --> 00:03:57.002
is just doing log print.

61
00:03:57.002 --> 00:03:59.000
In a real application,

62
00:03:59.000 --> 00:04:03.001
we would be using real email implementation.

63
00:04:03.001 --> 00:04:09.000
For testing, you can run EmailCustomerServiceTest class

64
00:04:09.000 --> 00:04:13.007
and check results for registeredcustomer,

65
00:04:13.007 --> 00:04:16.008
foranewcustomer, sendsanemail.

66
00:04:16.008 --> 00:04:20.009
You can see that test class does not know anything

67
00:04:20.009 --> 00:04:23.003
about events infrastructure.

68
00:04:23.003 --> 00:04:27.003
What we only care is that CustomerService receives

69
00:04:27.003 --> 00:04:43.000
a new customer and expect an email service has been called.

70
00:04:43.000 --> 00:04:44.007
And there you have it.

71
00:04:44.007 --> 00:04:47.006
We have successfully refactor the code

72
00:04:47.006 --> 00:04:52.000
from using direct method calls to Spring beans.

