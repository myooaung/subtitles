WEBVTT
1
00:00:00.005 --> 00:00:03.008
- [Instructor] By default, spring events are synchronous,

2
00:00:03.008 --> 00:00:07.008
meaning the publisher thread blocks until all listeners

3
00:00:07.008 --> 00:00:10.003
interested in a particular event

4
00:00:10.003 --> 00:00:13.003
have finished processing the event.

5
00:00:13.003 --> 00:00:17.001
What if we have a listener that takes too long to get

6
00:00:17.001 --> 00:00:20.006
executed and publishing synchronously?

7
00:00:20.006 --> 00:00:23.006
It isn't really what we're looking for.

8
00:00:23.006 --> 00:00:27.009
We may need asynchronous handling of our events.

9
00:00:27.009 --> 00:00:31.006
To make an event listener run in async mode,

10
00:00:31.006 --> 00:00:34.003
all they have to do is use the at S

11
00:00:34.003 --> 00:00:37.005
in connotation on that listener.

12
00:00:37.005 --> 00:00:40.009
We also need to enable asynchronous processing

13
00:00:40.009 --> 00:00:43.003
by adding at enable Async

14
00:00:43.003 --> 00:00:46.008
on top of our spring configuration.

15
00:00:46.008 --> 00:00:51.000
Keep in mind that using Async in event system

16
00:00:51.000 --> 00:00:54.000
comes with its limitations.

17
00:00:54.000 --> 00:00:56.006
Async listeners cannot publish

18
00:00:56.006 --> 00:01:00.008
a subsequent event by returning value.

19
00:01:00.008 --> 00:01:03.000
If you need to publish another event,

20
00:01:03.000 --> 00:01:06.006
use application event publisher.

21
00:01:06.006 --> 00:01:10.005
If an asynchronous event listener throws an exception,

22
00:01:10.005 --> 00:01:13.007
it's not propagated to the caller.

23
00:01:13.007 --> 00:01:16.002
However, by implementing

24
00:01:16.002 --> 00:01:19.009
Async Uncaught Exception Handler Interface,

25
00:01:19.009 --> 00:01:24.005
we can process any asynchronous exceptions.

26
00:01:24.005 --> 00:01:26.008
As part of our exercise,

27
00:01:26.008 --> 00:01:28.008
we need to add a new feature

28
00:01:28.008 --> 00:01:32.002
on top of customer registration use-case.

29
00:01:32.002 --> 00:01:34.001
For each registration,

30
00:01:34.001 --> 00:01:37.004
we need to form external analytics system

31
00:01:37.004 --> 00:01:40.006
so our marketing people can start to track them in a

32
00:01:40.006 --> 00:01:42.005
customer funnel.

33
00:01:42.005 --> 00:01:46.000
However, external call is really slow

34
00:01:46.000 --> 00:01:50.008
and it doesn't make sense we blog the whole use case.

35
00:01:50.008 --> 00:01:56.002
Running this event asynchronously sound like a perfect fit.

36
00:01:56.002 --> 00:01:58.002
Let's go back to our project

37
00:01:58.002 --> 00:02:02.003
and create a new event listener.

38
00:02:02.003 --> 00:02:04.008
First under the analytics package,

39
00:02:04.008 --> 00:02:09.001
we have a class analytics service that has a method called

40
00:02:09.001 --> 00:02:11.001
register new customer

41
00:02:11.001 --> 00:02:13.007
with a timeout of five seconds

42
00:02:13.007 --> 00:02:16.005
to simulate long running service.

43
00:02:16.005 --> 00:02:21.002
What we need is the listener that we'll call this method.

44
00:02:21.002 --> 00:02:22.007
We need a new class

45
00:02:22.007 --> 00:02:25.001
called analytics

46
00:02:25.001 --> 00:02:27.007
customer registered listener.

47
00:02:27.007 --> 00:02:30.004
Since this is a spring bean, we will add,

48
00:02:30.004 --> 00:02:35.000
add component annotation.

49
00:02:35.000 --> 00:02:38.003
We will create a new method of type word

50
00:02:38.003 --> 00:02:41.001
called unregister event

51
00:02:41.001 --> 00:02:48.004
with the argument customer registered event.

52
00:02:48.004 --> 00:02:50.007
We need to call analytics service,

53
00:02:50.007 --> 00:02:57.006
which we will first inject with constructor injection.

54
00:02:57.006 --> 00:03:03.008
Now we can use it as a part of our listener.

55
00:03:03.008 --> 00:03:08.004
We also need to mark our listener as add event listener

56
00:03:08.004 --> 00:03:11.003
and add Asynch annotations.

57
00:03:11.003 --> 00:03:14.000
To verify if our listener and analytics

58
00:03:14.000 --> 00:03:18.002
service has been triggered, we can run our test.

59
00:03:18.002 --> 00:03:22.002
The test is calling customer service dot register.

60
00:03:22.002 --> 00:03:27.001
We are also verifying the call to register new customer.

61
00:03:27.001 --> 00:03:28.009
Due to the nature of us in Kronos,

62
00:03:28.009 --> 00:03:32.007
the call to this service might not have been called

63
00:03:32.007 --> 00:03:36.006
immediately after the main thread of customer service

64
00:03:36.006 --> 00:03:37.009
has finished.

65
00:03:37.009 --> 00:03:41.002
So we added a small timeout.

66
00:03:41.002 --> 00:03:47.005
Let's run our tests.

67
00:03:47.005 --> 00:03:50.001
Even though our test is green,

68
00:03:50.001 --> 00:03:54.001
notice that customer register has been running

69
00:03:54.001 --> 00:03:56.005
more than five seconds.

70
00:03:56.005 --> 00:03:58.000
We forgot to enable

71
00:03:58.000 --> 00:04:01.002
asynchronous method execution capability.

72
00:04:01.002 --> 00:04:04.003
To do that, we just need to add,

73
00:04:04.003 --> 00:04:16.002
add enable async inner spring configuration.

74
00:04:16.002 --> 00:04:18.002
After we re-run our test,

75
00:04:18.002 --> 00:04:22.003
you can see registered new customer method has been called,

76
00:04:22.003 --> 00:04:25.000
but we weren't waiting for it to end.

