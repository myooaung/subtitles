WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] Now that you're familiar with

2
00:00:02.003 --> 00:00:06.009
Event System Architectures, let's explore all features

3
00:00:06.009 --> 00:00:10.006
Spring Events, bring to the table.

4
00:00:10.006 --> 00:00:14.000
Spring Events are one of the core capabilities provided

5
00:00:14.000 --> 00:00:16.003
by Spring Framework.

6
00:00:16.003 --> 00:00:19.002
They allow us to publish and listen to

7
00:00:19.002 --> 00:00:22.000
specific Application Events

8
00:00:22.000 --> 00:00:25.003
that we can process as we wish.

9
00:00:25.003 --> 00:00:27.008
Core components of Spring Events

10
00:00:27.008 --> 00:00:32.000
are Events, Publisher and Listeners.

11
00:00:32.000 --> 00:00:35.008
An ApplicationEvent is a simple POJO class

12
00:00:35.008 --> 00:00:37.004
that holds data

13
00:00:37.004 --> 00:00:42.002
and is exchanged between publisher and listener.

14
00:00:42.002 --> 00:00:45.003
Publisher constructs the event object

15
00:00:45.003 --> 00:00:49.004
and publishes it to anyone who is listening.

16
00:00:49.004 --> 00:00:52.002
It uses ApplicationEventPublisher being

17
00:00:52.002 --> 00:00:55.008
and its Publisher event method.

18
00:00:55.008 --> 00:00:59.000
Listeners, there are different flavors

19
00:00:59.000 --> 00:01:02.000
of implementing listeners to an event.

20
00:01:02.000 --> 00:01:05.000
It can be implemented within notations

21
00:01:05.000 --> 00:01:08.005
or by implementing Application Listener.

22
00:01:08.005 --> 00:01:10.009
The neat thing is that Spring does

23
00:01:10.009 --> 00:01:13.003
all the heavy lifting for us

24
00:01:13.003 --> 00:01:15.009
and registered all listeners.

25
00:01:15.009 --> 00:01:19.009
So there is no need for manual registration.

26
00:01:19.009 --> 00:01:23.002
Spring Events ones are by default synchronous,

27
00:01:23.002 --> 00:01:27.005
meaning the publisher thread blocks until all listeners have

28
00:01:27.005 --> 00:01:30.004
finished processing the event.

29
00:01:30.004 --> 00:01:35.001
However, Spring also supports Asynchronous mode,

30
00:01:35.001 --> 00:01:38.007
meaning that it went as published in a new thread

31
00:01:38.007 --> 00:01:41.008
and release execution of publisher independently

32
00:01:41.008 --> 00:01:44.000
from the listener.

33
00:01:44.000 --> 00:01:46.002
Transection Bound Events,

34
00:01:46.002 --> 00:01:50.004
Spring allows us to bind an Event Listener to phase

35
00:01:50.004 --> 00:01:52.006
of the current transaction.

36
00:01:52.006 --> 00:01:56.001
This allows events to be used with more flexibility

37
00:01:56.001 --> 00:01:59.005
when the outcome of the current transaction matters

38
00:01:59.005 --> 00:02:01.008
to the listener.

39
00:02:01.008 --> 00:02:03.006
Filtering Events,

40
00:02:03.006 --> 00:02:07.003
Spring Events gives us an option to find tune conditions

41
00:02:07.003 --> 00:02:09.005
under which circumstances

42
00:02:09.005 --> 00:02:12.007
our Event Listener will be triggered.

43
00:02:12.007 --> 00:02:13.006
By default,

44
00:02:13.006 --> 00:02:18.003
Spring would provide several predefined application events

45
00:02:18.003 --> 00:02:20.004
that are tied to the life cycle

46
00:02:20.004 --> 00:02:23.001
of Spring Application Context.

47
00:02:23.001 --> 00:02:27.001
So we can register listeners that are revoked.

48
00:02:27.001 --> 00:02:31.000
When for example, Application Context is started.

49
00:02:31.000 --> 00:02:33.005
However, if we have a use case

50
00:02:33.005 --> 00:02:35.002
where we want our listener to be

51
00:02:35.002 --> 00:02:39.003
triggered before Application Context is created,

52
00:02:39.003 --> 00:02:43.006
we need to register those listeners manually.

53
00:02:43.006 --> 00:02:47.008
As we have seen the support for Application Events in Spring

54
00:02:47.008 --> 00:02:49.007
is pretty comprehensive

55
00:02:49.007 --> 00:02:52.004
and comes with a handful of features,

56
00:02:52.004 --> 00:02:56.000
which we will cover in detail in the next lessons.

