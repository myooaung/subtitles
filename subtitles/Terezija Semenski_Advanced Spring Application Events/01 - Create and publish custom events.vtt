WEBVTT
1
00:00:00.007 --> 00:00:02.008
- [Instructor] Now that we have learned the benefits

2
00:00:02.008 --> 00:00:05.002
and highlights of Spring Events,

3
00:00:05.002 --> 00:00:07.003
let's take them into practice

4
00:00:07.003 --> 00:00:11.004
by creating our first Application Event.

5
00:00:11.004 --> 00:00:13.008
Before we dive into the code,

6
00:00:13.008 --> 00:00:16.005
let me introduce you to the application

7
00:00:16.005 --> 00:00:20.007
we will be refactoring and extending throughout this course.

8
00:00:20.007 --> 00:00:23.006
Our application is an e-commerce system

9
00:00:23.006 --> 00:00:28.004
that contains orders, products, and customers.

10
00:00:28.004 --> 00:00:32.002
Through our journey, we will be refactoring existing

11
00:00:32.002 --> 00:00:36.005
and adding new functionalities by paying close attention

12
00:00:36.005 --> 00:00:41.008
to architectural impact, and pros and cons of each approach.

13
00:00:41.008 --> 00:00:45.006
In this lesson, the use case we will be focusing on

14
00:00:45.006 --> 00:00:48.008
is the customer registration.

15
00:00:48.008 --> 00:00:52.008
Imagine a customer has initiated registration,

16
00:00:52.008 --> 00:00:57.004
such a use case would persist a customer in the database,

17
00:00:57.004 --> 00:00:59.006
trigger an email service,

18
00:00:59.006 --> 00:01:03.008
maybe invoke external CRM registration system,

19
00:01:03.008 --> 00:01:06.004
and many other things.

20
00:01:06.004 --> 00:01:10.009
Let's analyze how the simple case of persisting a customer

21
00:01:10.009 --> 00:01:16.005
and sending an email would be reflected in the code.

22
00:01:16.005 --> 00:01:20.003
Make sure you have downloaded the exercise files,

23
00:01:20.003 --> 00:01:22.004
unzip the project files,

24
00:01:22.004 --> 00:01:25.007
and open it in the IDE of your choice,

25
00:01:25.007 --> 00:01:33.008
either from the terminal or from Java IDE.

26
00:01:33.008 --> 00:01:36.007
Immediately after opening the project,

27
00:01:36.007 --> 00:01:40.007
IntelliJ will pull all the Maven dependencies.

28
00:01:40.007 --> 00:01:45.001
Make sure that you have the correct Java version installed.

29
00:01:45.001 --> 00:01:49.005
You can check it by opening File, Project Structure.

30
00:01:49.005 --> 00:02:00.000
Under Project SDK, you should see Java 15.

31
00:02:00.000 --> 00:02:02.002
Our customer and email service

32
00:02:02.002 --> 00:02:05.008
are split into two different packages.

33
00:02:05.008 --> 00:02:08.002
You can also imagine those could live

34
00:02:08.002 --> 00:02:11.002
in separate Maven modules.

35
00:02:11.002 --> 00:02:16.003
Both customer and email service are Spring Beans.

36
00:02:16.003 --> 00:02:18.009
In a typical imperative style,

37
00:02:18.009 --> 00:02:23.001
our CustomerService would call CustomerRepository

38
00:02:23.001 --> 00:02:25.008
to store customer in database,

39
00:02:25.008 --> 00:02:29.002
and would trigger an EmailService.

40
00:02:29.002 --> 00:02:32.005
The fact that customerService has to know

41
00:02:32.005 --> 00:02:36.006
about sending emails has a couple of consequences,

42
00:02:36.006 --> 00:02:39.001
and pros and cons.

43
00:02:39.001 --> 00:02:43.001
Very obvious advantage is that by looking at the code,

44
00:02:43.001 --> 00:02:46.008
we can understand the entire use case.

45
00:02:46.008 --> 00:02:49.009
Even if there are other use cases coupled

46
00:02:49.009 --> 00:02:54.006
with customer registration, we know we need to add it here.

47
00:02:54.006 --> 00:02:59.004
However, imagine adding promotion for a new customer

48
00:02:59.004 --> 00:03:04.002
or updating some external systems.

49
00:03:04.002 --> 00:03:07.001
We not only need to provide an email service,

50
00:03:07.001 --> 00:03:11.004
but also all other functionalities that are coming up

51
00:03:11.004 --> 00:03:15.003
and centered around customer registration.

52
00:03:15.003 --> 00:03:16.009
We might argue,

53
00:03:16.009 --> 00:03:20.004
why should the customer registration process need to know

54
00:03:20.004 --> 00:03:23.003
about all those first functionalities

55
00:03:23.003 --> 00:03:25.009
that are centered around it?

56
00:03:25.009 --> 00:03:29.001
This creates more cyclic dependencies,

57
00:03:29.001 --> 00:03:33.003
and violates the single responsibility principle.

58
00:03:33.003 --> 00:03:37.001
Testing becomes much harder as we might need

59
00:03:37.001 --> 00:03:40.005
to mock all different dependencies.

60
00:03:40.005 --> 00:03:45.001
What will this look like in our system?

61
00:03:45.001 --> 00:03:48.001
Let's create our first event

62
00:03:48.001 --> 00:03:53.004
by creating a new class in the Customer package.

63
00:03:53.004 --> 00:03:59.007
We will call it CustomerRegisteredEvent.

64
00:03:59.007 --> 00:04:03.003
We can extend an application event base class,

65
00:04:03.003 --> 00:04:07.003
however, since Spring version 4.2,

66
00:04:07.003 --> 00:04:12.005
this is no longer required, so we can leave it empty.

67
00:04:12.005 --> 00:04:16.001
As part of our event, we want to make sure it contains

68
00:04:16.001 --> 00:04:19.004
the Customer object.

69
00:04:19.004 --> 00:04:23.003
For getters, setters, and constructors,

70
00:04:23.003 --> 00:04:29.005
we can add annotation from project lombok.

71
00:04:29.005 --> 00:04:33.006
Now in our CustomerService, in order to publish an event,

72
00:04:33.006 --> 00:04:41.000
we just need to inject ApplicationEventPublisher Bean.

73
00:04:41.000 --> 00:04:43.004
And in our business logic,

74
00:04:43.004 --> 00:04:49.005
we can now call publisher.publishevent.

75
00:04:49.005 --> 00:04:54.001
And as an argument provide CustomerRegisteredEvent together

76
00:04:54.001 --> 00:04:55.007
with the customer.

77
00:04:55.007 --> 00:04:57.008
Since we migrated to events,

78
00:04:57.008 --> 00:05:02.006
we can remove dependencies to emailService.

79
00:05:02.006 --> 00:05:06.008
In the next lesson, we will proceed by implementing listener

80
00:05:06.008 --> 00:05:10.000
for CustomerRegisteredEvent.

