WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] In certain circumstances,

2
00:00:02.005 --> 00:00:06.001
we may want our event listeners to be triggered.

3
00:00:06.001 --> 00:00:10.000
Let's say you want to execute event listeners

4
00:00:10.000 --> 00:00:14.003
only for users that belong to the VIP group.

5
00:00:14.003 --> 00:00:18.001
You could write this by implementing if statements.

6
00:00:18.001 --> 00:00:22.005
However, overusing conditionals results in code

7
00:00:22.005 --> 00:00:26.006
that is more complex and difficult to maintain.

8
00:00:26.006 --> 00:00:30.008
In some cases we can avoid this by fine tuning

9
00:00:30.008 --> 00:00:34.003
those conditions with @EventListener

10
00:00:34.003 --> 00:00:37.003
and Spring Expression Language.

11
00:00:37.003 --> 00:00:41.000
@EventListener provides a conditional tribute

12
00:00:41.000 --> 00:00:43.008
that accepts spell expression.

13
00:00:43.008 --> 00:00:45.005
The event will be handled

14
00:00:45.005 --> 00:00:49.001
if the expression evaluates the Boolean true,

15
00:00:49.001 --> 00:00:55.007
or one of the following strings: true, on, yes, or one.

16
00:00:55.007 --> 00:00:58.004
The default expression is empty string,

17
00:00:58.004 --> 00:01:01.006
meaning the event is always handled.

18
00:01:01.006 --> 00:01:06.008
Here's some examples for referencing event and its content.

19
00:01:06.008 --> 00:01:10.001
#event to reference an event.

20
00:01:10.001 --> 00:01:16.001
#event.customer.type equals b2c.

21
00:01:16.001 --> 00:01:19.001
We can also reference other Spring beans

22
00:01:19.001 --> 00:01:25.003
with at @myBean.test #event.

23
00:01:25.003 --> 00:01:30.003
For more on expressions, you can check Spring docs.

24
00:01:30.003 --> 00:01:34.005
In this lesson, our marketing department is asking us

25
00:01:34.005 --> 00:01:38.001
to run a promotion for all new customers

26
00:01:38.001 --> 00:01:41.005
who have signed up for a newsletter.

27
00:01:41.005 --> 00:01:43.009
This sounds like a perfect candidate

28
00:01:43.009 --> 00:01:47.004
for conditional event listeners.

29
00:01:47.004 --> 00:01:49.007
Within the promotion package,

30
00:01:49.007 --> 00:02:00.000
we will create a new promotion listeners class.

31
00:02:00.000 --> 00:02:05.001
Mark it as a Spring bean.

32
00:02:05.001 --> 00:02:10.001
Let's create a new method on registration event

33
00:02:10.001 --> 00:02:20.002
of type void with customer register event as an argument.

34
00:02:20.002 --> 00:02:24.000
We will also inject and use promotion service

35
00:02:24.000 --> 00:02:33.009
and its method applied from promotion.

36
00:02:33.009 --> 00:02:37.007
Now, if you mark our method only with @EventListener,

37
00:02:37.007 --> 00:02:40.008
it will be triggered every time.

38
00:02:40.008 --> 00:02:42.007
We need to apply the condition

39
00:02:42.007 --> 00:02:51.004
by first referencing the event, customer, and newsletter.

40
00:02:51.004 --> 00:02:55.004
In our test package, we have a class with methods

41
00:02:55.004 --> 00:02:59.003
that check if promotions are applied or not

42
00:02:59.003 --> 00:03:12.009
depending if customer applied for a newsletter.

43
00:03:12.009 --> 00:03:14.008
If we have done our job right,

44
00:03:14.008 --> 00:03:19.000
our registered customer test cases should be green.

