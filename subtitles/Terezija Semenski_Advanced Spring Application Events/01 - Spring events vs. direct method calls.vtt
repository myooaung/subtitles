WEBVTT
1
00:00:00.005 --> 00:00:03.002
- Spring Events are one of the more used

2
00:00:03.002 --> 00:00:05.005
functionalities in the framework,

3
00:00:05.005 --> 00:00:08.003
but also one of the more useful.

4
00:00:08.003 --> 00:00:12.001
They give developers a way for different components

5
00:00:12.001 --> 00:00:15.002
to communicate and have more flexibility

6
00:00:15.002 --> 00:00:19.003
with each other than the traditional method calls.

7
00:00:19.003 --> 00:00:22.006
The one system leads to more flexible

8
00:00:22.006 --> 00:00:26.004
and loosely coupled architectural design.

9
00:00:26.004 --> 00:00:28.009
Coupling refers to a degree of knowledge

10
00:00:28.009 --> 00:00:31.005
that one object has about the other object

11
00:00:31.005 --> 00:00:34.005
that it interacts with.

12
00:00:34.005 --> 00:00:38.006
The loose coupling architecture design can handle changes

13
00:00:38.006 --> 00:00:41.000
because they reduce the dependency

14
00:00:41.000 --> 00:00:43.009
between multiple components.

15
00:00:43.009 --> 00:00:45.009
It reduces the risk that

16
00:00:45.009 --> 00:00:48.009
the change made between one component

17
00:00:48.009 --> 00:00:51.007
might create an anticipated impact

18
00:00:51.007 --> 00:00:54.002
on the other component.

19
00:00:54.002 --> 00:00:57.002
It simplifies testing, maintenance

20
00:00:57.002 --> 00:00:59.005
and troubleshooting problems.

21
00:00:59.005 --> 00:01:02.003
Another benefit of Event system

22
00:01:02.003 --> 00:01:05.004
is it provides published subscribe capability.

23
00:01:05.004 --> 00:01:09.000
Which means subscribers can be added

24
00:01:09.000 --> 00:01:13.000
or removed at any point in time.

25
00:01:13.000 --> 00:01:18.003
Event publishers and Event subscribers are not tied up

26
00:01:18.003 --> 00:01:21.000
and can be used independently of each other.

27
00:01:21.000 --> 00:01:23.006
Event system allows sending data

28
00:01:23.006 --> 00:01:26.000
to other components effectively.

29
00:01:26.000 --> 00:01:29.005
Also changes in the publisher or listener

30
00:01:29.005 --> 00:01:31.005
will not affect each other

31
00:01:31.005 --> 00:01:33.007
as both are independent.

32
00:01:33.007 --> 00:01:36.009
They are free to make their own changes.

33
00:01:36.009 --> 00:01:40.000
Event system allows invoking logic

34
00:01:40.000 --> 00:01:43.007
on multiple components at the same time.

35
00:01:43.007 --> 00:01:48.006
Having said that, does any pattern come to your mind?

36
00:01:48.006 --> 00:01:51.007
It is the observer pattern that is well known

37
00:01:51.007 --> 00:01:55.001
from the Gang of Four design patterns.

38
00:01:55.001 --> 00:01:57.004
Where in the observer pattern,

39
00:01:57.004 --> 00:01:59.003
we refer to observers.

40
00:01:59.003 --> 00:02:01.003
In spring event system

41
00:02:01.003 --> 00:02:03.008
we refer to listeners.

42
00:02:03.008 --> 00:02:06.000
When we refer to subject,

43
00:02:06.000 --> 00:02:09.008
we actually refer to event publisher.

44
00:02:09.008 --> 00:02:15.006
So how do events compare to traditional method calls?

45
00:02:15.006 --> 00:02:19.008
When one class calls methods in another class,

46
00:02:19.008 --> 00:02:23.000
those classes are tightly coupled.

47
00:02:23.000 --> 00:02:25.009
The more classes you have tightly coupled,

48
00:02:25.009 --> 00:02:29.003
the more difficult it becomes to make a change

49
00:02:29.003 --> 00:02:34.008
to one of them without having to also change several others.

50
00:02:34.008 --> 00:02:38.006
Event driven are architecture also follows

51
00:02:38.006 --> 00:02:40.009
an open-closed principle.

52
00:02:40.009 --> 00:02:43.009
Which means open for extension,

53
00:02:43.009 --> 00:02:47.001
but closed for modification.

54
00:02:47.001 --> 00:02:48.005
For example.

55
00:02:48.005 --> 00:02:51.009
Imagine we need to process a customer order

56
00:02:51.009 --> 00:02:54.004
and depending on some criterias

57
00:02:54.004 --> 00:02:56.007
send an email to the customer

58
00:02:56.007 --> 00:02:59.009
or update customer reward points.

59
00:02:59.009 --> 00:03:01.009
With direct method calls,

60
00:03:01.009 --> 00:03:06.001
each time we need to make changes on order service.

61
00:03:06.001 --> 00:03:09.005
At the same time, changes to the email service,

62
00:03:09.005 --> 00:03:12.008
also effect order service.

63
00:03:12.008 --> 00:03:16.003
However, by using an event system,

64
00:03:16.003 --> 00:03:19.007
we can close order service for modification

65
00:03:19.007 --> 00:03:22.005
by using events and we can easily

66
00:03:22.005 --> 00:03:27.002
extend the behavior by implementing new listeners.

67
00:03:27.002 --> 00:03:31.000
Event driven architectures allow new functionalities

68
00:03:31.000 --> 00:03:34.002
to be added with no disruption of old ones

69
00:03:34.002 --> 00:03:37.000
as the domain expands.

