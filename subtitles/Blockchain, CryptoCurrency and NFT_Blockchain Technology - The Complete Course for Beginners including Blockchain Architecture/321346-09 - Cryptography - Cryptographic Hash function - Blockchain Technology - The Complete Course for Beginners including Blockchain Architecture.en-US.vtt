WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.110
Hello and welcome.

00:00:01.110 --> 00:00:03.080
In the previous lecture,

00:00:03.080 --> 00:00:05.990
we learned about the cryptography aunt,

00:00:05.990 --> 00:00:08.810
how it works in this lecture.

00:00:08.810 --> 00:00:13.450
Let's try to understand what is a cryptographic hash function?

00:00:13.450 --> 00:00:14.550
Well,

00:00:14.550 --> 00:00:18.320
it's a function that takes any messages.

00:00:18.320 --> 00:00:22.450
Input on will produce an output off fixed size.

00:00:22.450 --> 00:00:29.650
Some of the examples are MD five Andi S H A to 56 or sharp to 56.

00:00:29.650 --> 00:00:33.470
Schottel 56 is designed by the NSS.

00:00:33.470 --> 00:00:37.550
Let's see Shot off 56 in action.

00:00:37.550 --> 00:00:39.080
Go to your browser.

00:00:39.080 --> 00:00:47.290
Andi type chart 256 ash generators click on this first link here.

00:00:47.290 --> 00:00:49.510
Andi,

00:00:49.510 --> 00:00:54.200
this should open the sharp 256 hash generators.

00:00:54.200 --> 00:00:56.550
Let's try a few off them.

00:00:56.550 --> 00:00:58.830
As I'm recording this.

00:00:58.830 --> 00:01:01.850
The sky is very beautiful in this month of February.

00:01:01.850 --> 00:01:03.550
So let me try that.

00:01:03.550 --> 00:01:04.750
So I die.

00:01:04.750 --> 00:01:07.650
The sky is beautiful.

00:01:07.650 --> 00:01:10.180
As you can see,

00:01:10.180 --> 00:01:18.250
it has generated a cryptographic hash from which you cannot say what was the input text.

00:01:18.250 --> 00:01:22.220
I want us to compare different strings.

00:01:22.220 --> 00:01:27.850
So let me check this box here so that we can compare them in one scream.

00:01:27.850 --> 00:01:29.450
All right,

00:01:29.450 --> 00:01:34.070
let me copy and paste the same string as you can see.

00:01:34.070 --> 00:01:34.820
It As you noted,

00:01:34.820 --> 00:01:35.840
the same hash.

00:01:35.840 --> 00:01:41.150
The amount of time it is taking is less than a second almost real time.

00:01:41.150 --> 00:01:43.060
So you might say,

00:01:43.060 --> 00:01:44.040
What's the big deal?

00:01:44.040 --> 00:01:49.250
But that is one of the properties that a cryptographic hash function should have.

00:01:49.250 --> 00:01:55.250
The hash function is supposed to generate the same hash for a given string,

00:01:55.250 --> 00:01:59.440
no matter how many times we create that hash,

00:01:59.440 --> 00:02:02.370
or how many times we provide that.

00:02:02.370 --> 00:02:04.620
Now,

00:02:04.620 --> 00:02:10.340
let me change the uppercase off sky to a lower case s on.

00:02:10.340 --> 00:02:12.250
Let's see what changes here.

00:02:12.250 --> 00:02:13.630
Well,

00:02:13.630 --> 00:02:15.300
as you can see,

00:02:15.300 --> 00:02:18.220
the hash is completely changed,

00:02:18.220 --> 00:02:23.150
so you cannot rely on simple trial and error.

00:02:23.150 --> 00:02:27.150
Andi gets the input message with a few of those.

00:02:27.150 --> 00:02:33.280
A good cryptographic hash function will change the hash completely,

00:02:33.280 --> 00:02:36.560
even for a small change on.

00:02:36.560 --> 00:02:38.130
As you can see,

00:02:38.130 --> 00:02:41.360
it generates the fixed length hash.

00:02:41.360 --> 00:02:44.650
No matter what the input string is,

00:02:44.650 --> 00:02:47.650
such as jellyfish are John.

00:02:47.650 --> 00:02:50.250
All right,

00:02:50.250 --> 00:02:57.150
let me close this so that we can discuss the properties off cryptographic hash function,

00:02:57.150 --> 00:02:59.650
every hash function,

00:02:59.650 --> 00:03:03.890
need to comply with certain principles or properties.

00:03:03.890 --> 00:03:11.470
Or you can say they should possess some off the basic properties for them toe qualify as

00:03:11.470 --> 00:03:13.300
cryptographic hash function.

00:03:13.300 --> 00:03:15.680
First and foremost,

00:03:15.680 --> 00:03:18.850
they should be computational e very efficient,

00:03:18.850 --> 00:03:26.260
which means the output should be produced in a reasonable on acceptable timeframe on should

00:03:26.260 --> 00:03:29.650
not require huge computation power.

00:03:29.650 --> 00:03:36.240
What's the point to produce and hash that takes hours when you actually want to send the

00:03:36.240 --> 00:03:38.350
message in the next few seconds?

00:03:38.350 --> 00:03:40.250
All right,

00:03:40.250 --> 00:03:46.260
the second property that a cryptographic hash function should have is the collegian

00:03:46.260 --> 00:03:47.150
resistance.

00:03:47.150 --> 00:03:48.790
What it means is,

00:03:48.790 --> 00:03:49.550
ideally,

00:03:49.550 --> 00:03:56.080
it should be very difficult to produce the same hash for two different messages we are

00:03:56.080 --> 00:03:56.450
using.

00:03:56.450 --> 00:04:04.420
The word difficult on not unique are impossible because there is always a possibility off

00:04:04.420 --> 00:04:06.040
producing the same hash,

00:04:06.040 --> 00:04:09.650
though the probability off the same is very,

00:04:09.650 --> 00:04:10.550
very minimal.

00:04:10.550 --> 00:04:16.200
Difficulty here simply means beyond the reach often adversary,

00:04:16.200 --> 00:04:19.830
another application off this property ease.

00:04:19.830 --> 00:04:25.950
We can simply remember the hash rather than comparing the entire data or files.

00:04:25.950 --> 00:04:30.640
Because if hashes off X and Y are same,

00:04:30.640 --> 00:04:39.970
then X is same as why this allows us to compare the two sets off data or files by simply

00:04:39.970 --> 00:04:46.250
comparing them with their hashes than comparing the entire file all data.

00:04:46.250 --> 00:04:54.800
The 3rd 1 is that it should be completely invisible to generate the same message from its

00:04:54.800 --> 00:04:55.750
hash value.

00:04:55.750 --> 00:04:59.050
We also call this as a hiding property.

00:04:59.050 --> 00:05:05.980
The next property that a cryptographic hash function should have is that it should be

00:05:05.980 --> 00:05:07.250
deterministic.

00:05:07.250 --> 00:05:12.870
So it basically means that no matter how many times you apply ah,

00:05:12.870 --> 00:05:15.330
hash function on an input message,

00:05:15.330 --> 00:05:18.140
it will always produce the same hash.

00:05:18.140 --> 00:05:21.750
We saw that in case off our input message,

00:05:21.750 --> 00:05:30.090
and the last property is that a small change in input can produce a significant change in

00:05:30.090 --> 00:05:30.850
the output.

00:05:30.850 --> 00:05:33.490
So in a message like this,

00:05:33.490 --> 00:05:37.150
when we change even the case off a single later,

00:05:37.150 --> 00:05:43.700
it should produce completely different and non correlated output else.

00:05:43.700 --> 00:05:48.650
It might be easy to figure out the message with few trial and error.

00:05:48.650 --> 00:05:55.360
I hope that makes it clear what hashing is and what the cryptographic hash function is

00:05:55.360 --> 00:05:56.050
supposed to do.

00:05:56.050 --> 00:05:57.710
In this lecture,

00:05:57.710 --> 00:06:01.850
we learned about what is a hash function and what are its properties.

00:06:01.850 --> 00:06:03.950
Thank you so much for joining me,

00:06:03.950 --> 00:06:04.730
Joe,

00:06:04.730 --> 00:06:06.550
your time learning Blockchain

