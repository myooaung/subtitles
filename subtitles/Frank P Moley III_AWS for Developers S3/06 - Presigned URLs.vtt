WEBVTT
1
00:00:00.008 --> 00:00:01.009
- [Instructor] There will be many times

2
00:00:01.009 --> 00:00:04.008
where you'll want to give temporary public access

3
00:00:04.008 --> 00:00:08.006
to a binary object in a private bucket.

4
00:00:08.006 --> 00:00:11.009
Enter into the picture presigned URLs.

5
00:00:11.009 --> 00:00:14.009
Presigning URLs is always a temporary thing

6
00:00:14.009 --> 00:00:16.009
for security purposes.

7
00:00:16.009 --> 00:00:20.005
The default behavior is one hour for link expiration,

8
00:00:20.005 --> 00:00:23.009
but that isn't always what you want.

9
00:00:23.009 --> 00:00:26.009
So let's go ahead and create a download link

10
00:00:26.009 --> 00:00:30.004
and show how that expiration function works.

11
00:00:30.004 --> 00:00:33.009
So first step here is to create the presigned URL.

12
00:00:33.009 --> 00:00:39.004
So in our terminal we are going to type aws s3 presign

13
00:00:39.004 --> 00:00:43.001
and we're going to go to our s3 bucket,

14
00:00:43.001 --> 00:00:48.007
our bucket name, I'm going to choose the lil1.txt file.

15
00:00:48.007 --> 00:00:52.002
And then we're going to set our expires-in

16
00:00:52.002 --> 00:00:54.001
and this is a time in seconds,

17
00:00:54.001 --> 00:00:58.007
in this case I'm going to choose 30 seconds.

18
00:00:58.007 --> 00:01:01.004
Now, I'm going to copy this link,

19
00:01:01.004 --> 00:01:04.001
I'm going to take that link to our browser,

20
00:01:04.001 --> 00:01:07.005
open up a new tab, execute that.

21
00:01:07.005 --> 00:01:09.004
And you'll see I have This is file 1.

22
00:01:09.004 --> 00:01:11.000
So it's actually pulled this file

23
00:01:11.000 --> 00:01:12.007
and displayed it in my browser,

24
00:01:12.007 --> 00:01:15.009
'cause it's a text file and Chrome can do that.

25
00:01:15.009 --> 00:01:17.005
Now we're going to wait a little bit,

26
00:01:17.005 --> 00:01:21.004
specifically we're going to wait the time it takes

27
00:01:21.004 --> 00:01:23.006
to do this expiration.

28
00:01:23.006 --> 00:01:26.003
If you did see an expiration the first time you did this,

29
00:01:26.003 --> 00:01:27.005
it may just mean that you're going

30
00:01:27.005 --> 00:01:29.008
just a little bit slower than I am.

31
00:01:29.008 --> 00:01:32.000
And if that's the case, you could do a couple things.

32
00:01:32.000 --> 00:01:34.007
You could either regenerate the link as is

33
00:01:34.007 --> 00:01:36.007
and try to move a little faster,

34
00:01:36.007 --> 00:01:39.002
or you can change that expiration time

35
00:01:39.002 --> 00:01:40.008
and give yourself a little bit more time

36
00:01:40.008 --> 00:01:43.003
to navigate from the terminal to the browser

37
00:01:43.003 --> 00:01:45.006
and enter that link in.

38
00:01:45.006 --> 00:01:47.009
At this point, we spent about 30 seconds,

39
00:01:47.009 --> 00:01:49.002
my link should've expired.

40
00:01:49.002 --> 00:01:52.000
So I'm going to go ahead and refresh.

41
00:01:52.000 --> 00:01:53.003
And it indeed has expired.

42
00:01:53.003 --> 00:01:55.003
I'm not getting an AccessDenied,

43
00:01:55.003 --> 00:01:57.007
which is what I would expect.

44
00:01:57.007 --> 00:02:00.004
There is one other thing that I want to talk to about

45
00:02:00.004 --> 00:02:04.000
and that is the way that this URL is generated.

