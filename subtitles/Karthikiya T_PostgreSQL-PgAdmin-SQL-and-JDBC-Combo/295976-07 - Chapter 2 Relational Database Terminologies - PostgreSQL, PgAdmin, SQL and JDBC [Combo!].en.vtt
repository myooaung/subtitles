WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.340
All right,

00:00:01.340 --> 00:00:03.980
let us try to understand some of the relational data.

00:00:03.980 --> 00:00:05.150
Best concepts.

00:00:05.150 --> 00:00:06.060
First of all,

00:00:06.060 --> 00:00:08.130
let us try to get the definition off.

00:00:08.130 --> 00:00:10.550
What's a relational model?

00:00:10.550 --> 00:00:20.290
A relational model is a technique used to organize the data using so called relations or,

00:00:20.290 --> 00:00:21.190
in other words,

00:00:21.190 --> 00:00:22.230
tables.

00:00:22.230 --> 00:00:23.340
We have in fact,

00:00:23.340 --> 00:00:26.950
taken one such example in case off our students table,

00:00:26.950 --> 00:00:31.150
restoring all the student information in the form off a table.

00:00:31.150 --> 00:00:31.970
Well,

00:00:31.970 --> 00:00:34.790
that's the concept off relational database.

00:00:34.790 --> 00:00:40.150
So here we have a picture that Alistair is the same.

00:00:40.150 --> 00:00:46.290
We have a table which in this case is a student table and we call the stable.

00:00:46.290 --> 00:00:48.650
Relation are a table,

00:00:48.650 --> 00:00:53.380
and each of the record are the row in the table.

00:00:53.380 --> 00:00:56.400
We sometimes refer them as people,

00:00:56.400 --> 00:00:57.750
as you can see it here,

00:00:57.750 --> 00:01:01.490
and all the columns are actually called attributes.

00:01:01.490 --> 00:01:07.100
The world attribute would make more sense when you try to look at the definition off the

00:01:07.100 --> 00:01:07.750
table.

00:01:07.750 --> 00:01:11.400
So we use this instruction to create the table.

00:01:11.400 --> 00:01:15.650
Whatever is highlighted in green are actually attributes.

00:01:15.650 --> 00:01:16.610
Actually,

00:01:16.610 --> 00:01:19.380
we can map it with object oriented programming.

00:01:19.380 --> 00:01:19.850
Israel,

00:01:19.850 --> 00:01:21.420
for instance,

00:01:21.420 --> 00:01:23.530
if student is a class than these,

00:01:23.530 --> 00:01:26.210
are all the attributes in it.

00:01:26.210 --> 00:01:27.590
In fact,

00:01:27.590 --> 00:01:30.840
using the modern airframe books like Hibernate,

00:01:30.840 --> 00:01:39.650
We can actually map the Java object with the table in the database and the kind of data

00:01:39.650 --> 00:01:45.880
that these attributes can support is termed as at domain,

00:01:45.880 --> 00:01:48.250
like I've highlighted here.

00:01:48.250 --> 00:01:55.850
So these are some of the terms typically used in the context off relational database keys

00:01:55.850 --> 00:02:02.910
will actually help you identify each and every individual people or row or sometimes also

00:02:02.910 --> 00:02:10.950
called as record keys are also used to establish relationship between tables.

00:02:10.950 --> 00:02:14.210
You'll understand this when we talk about Foreign Key,

00:02:14.210 --> 00:02:16.450
which is coming in a minute or two.

00:02:16.450 --> 00:02:19.750
Take a look at this example table.

00:02:19.750 --> 00:02:21.530
When you choose a key,

00:02:21.530 --> 00:02:26.200
it has to help us in uniquely identifying a record.

00:02:26.200 --> 00:02:29.790
If you choose the name as a key,

00:02:29.790 --> 00:02:33.550
that won't suffice because name can be duplicate.

00:02:33.550 --> 00:02:37.540
Two different students can have the same name,

00:02:37.540 --> 00:02:39.080
just as you see in here,

00:02:39.080 --> 00:02:42.500
so we can't choose name as a unique identify.

00:02:42.500 --> 00:02:45.760
Where for the rose in the stable or in other words,

00:02:45.760 --> 00:02:49.850
name alone cannot be chosen as a key.

00:02:49.850 --> 00:02:55.420
Let's take a look at some of the categories off keys available in the context off

00:02:55.420 --> 00:02:58.650
relational database so that you understand it better.

00:02:58.650 --> 00:03:06.340
His super key is a set of attributes within the table that uniquely identify heat row

00:03:06.340 --> 00:03:07.750
recorder tuber.

00:03:07.750 --> 00:03:16.290
Here are some of the examples Heidi is a valid super key because there is no possibility

00:03:16.290 --> 00:03:21.350
off having duplicate values in this field or attribute.

00:03:21.350 --> 00:03:27.050
Same is the case with combination off name and phone number.

00:03:27.050 --> 00:03:29.830
You can have duplicate values and name,

00:03:29.830 --> 00:03:31.950
but when you combine these two,

00:03:31.950 --> 00:03:34.250
it will remain unique.

00:03:34.250 --> 00:03:40.150
So these two attributes combine together will form a super key as well,

00:03:40.150 --> 00:03:45.070
and name as have described cannot be a key name,

00:03:45.070 --> 00:03:51.370
and age together cannot be termed as a key because two students can have same name as,

00:03:51.370 --> 00:03:52.530
well a same age,

00:03:52.530 --> 00:03:58.980
so we can't choose this to as a key phone will remain unique.

00:03:58.980 --> 00:04:02.750
Forage in every student so it can be a possible super key.

00:04:02.750 --> 00:04:05.580
Same goes here as well.

00:04:05.580 --> 00:04:07.230
Coming to candidate key.

00:04:07.230 --> 00:04:11.660
A candidate key is a minimal set off attributes,

00:04:11.660 --> 00:04:18.400
which can uniquely island for each record in a table.

00:04:18.400 --> 00:04:21.280
So out of this Super keys,

00:04:21.280 --> 00:04:27.090
whichever is the minimal set off attributes that will help us uniquely identify a record in

00:04:27.090 --> 00:04:30.170
the table his termed as a candidate key.

00:04:30.170 --> 00:04:35.150
So I D and phone are two examples.

00:04:35.150 --> 00:04:38.790
All the name and phone together conform a key.

00:04:38.790 --> 00:04:44.910
It can't be a candidate key because we need to find the minimal set so one would suffice.

00:04:44.910 --> 00:04:45.400
Here.

00:04:45.400 --> 00:04:47.390
We don't need to use two attributes,

00:04:47.390 --> 00:04:49.650
so that's not a candidate key.

00:04:49.650 --> 00:04:52.100
And when you choose one of these,

00:04:52.100 --> 00:04:55.490
Keys has a unique identify.

00:04:55.490 --> 00:05:00.330
Where for your table rose that KIIS toned as a primary key?

00:05:00.330 --> 00:05:01.710
It's as simple as that.

00:05:01.710 --> 00:05:02.250
So,

00:05:02.250 --> 00:05:05.890
like a primary key can be a single attribute.

00:05:05.890 --> 00:05:08.450
Our combination off two attributes.

00:05:08.450 --> 00:05:09.700
But typically,

00:05:09.700 --> 00:05:10.950
let me tell you,

00:05:10.950 --> 00:05:13.830
we always choose the i.

00:05:13.830 --> 00:05:16.370
D column as the primary key.

00:05:16.370 --> 00:05:17.230
In fact,

00:05:17.230 --> 00:05:22.340
we introduced Heidi column in each and every table just for that purpose to make it the

00:05:22.340 --> 00:05:23.190
primary key.

00:05:23.190 --> 00:05:24.980
It's a good practice,

00:05:24.980 --> 00:05:27.350
and all the rest of the keys,

00:05:27.350 --> 00:05:29.850
which we haven't using are called.

00:05:29.850 --> 00:05:32.750
Secondary keys are alternate keys.

00:05:32.750 --> 00:05:34.750
Hope that makes sense.

00:05:34.750 --> 00:05:42.120
And Foreign Key is actually one of the key concepts in relation database because foreign

00:05:42.120 --> 00:05:48.220
key actually helped establish the relationship between two relations or tables.

00:05:48.220 --> 00:05:50.640
So let us see how it's done well,

00:05:50.640 --> 00:05:52.280
if you go through the definition,

00:05:52.280 --> 00:05:54.000
you probably don't understand.

00:05:54.000 --> 00:05:55.830
So let us take an example.

00:05:55.830 --> 00:05:57.880
Consider these two tables.

00:05:57.880 --> 00:06:03.240
We have a course table as well as the students table in here.

00:06:03.240 --> 00:06:05.530
I have listed all the courses,

00:06:05.530 --> 00:06:10.380
and each of the course is identified with a unique identify Where,

00:06:10.380 --> 00:06:11.720
which is course I D.

00:06:11.720 --> 00:06:17.360
So this will be the primary key off this table and C e mails with the students table.

00:06:17.360 --> 00:06:18.690
We have student I D.

00:06:18.690 --> 00:06:20.250
As a primary key.

00:06:20.250 --> 00:06:26.850
Now let us assume a scenario where we can have multiple students and rolling for a course,

00:06:26.850 --> 00:06:31.360
and a single student cannot enroll for more than one course.

00:06:31.360 --> 00:06:33.850
Just try to understand what I said if you want.

00:06:33.850 --> 00:06:35.390
If you wish to pause the video,

00:06:35.390 --> 00:06:37.970
can Paulus try to get what I'm saying?

00:06:37.970 --> 00:06:39.490
So for that purpose,

00:06:39.490 --> 00:06:41.740
we're going to define their foreign key,

00:06:41.740 --> 00:06:42.720
a foreign keys,

00:06:42.720 --> 00:06:47.410
a field or a column like we're seeing here in one table.

00:06:47.410 --> 00:06:48.850
That refers to the key,

00:06:48.850 --> 00:06:54.250
typically the primary key in another table to create the link between two tables.

00:06:54.250 --> 00:06:57.070
So if you take a look at this instruction,

00:06:57.070 --> 00:06:59.970
we're seeing course form Key,

00:06:59.970 --> 00:07:08.490
which defines this particular field and then it refrains us to the core stable course I D

00:07:08.490 --> 00:07:09.050
Field.

00:07:09.050 --> 00:07:13.690
This instruction will actually make this field a foreign key,

00:07:13.690 --> 00:07:16.960
which is actually different to the primary key off another table.

00:07:16.960 --> 00:07:18.410
So by that,

00:07:18.410 --> 00:07:25.180
the only values that can go inside here are the values that are part off the referring

00:07:25.180 --> 00:07:26.720
table Primary key,

00:07:26.720 --> 00:07:27.940
which means that well,

00:07:27.940 --> 00:07:32.990
is that you can possible enter here or the values that are listed as part of the primary

00:07:32.990 --> 00:07:35.450
key that the stables referring toe.

00:07:35.450 --> 00:07:36.600
In this case,

00:07:36.600 --> 00:07:38.050
we said its course table.

00:07:38.050 --> 00:07:40.680
So by this table,

00:07:40.680 --> 00:07:47.480
we can say that Sam and Sunder have enrolled for course Number one,

00:07:47.480 --> 00:07:48.950
which will be Java,

00:07:48.950 --> 00:07:52.210
and Nick has enrolled for Jsp,

00:07:52.210 --> 00:07:53.130
etcetera,

00:07:53.130 --> 00:07:55.050
and ask about this design.

00:07:55.050 --> 00:07:59.290
One course can be enrolled by many students,

00:07:59.290 --> 00:08:00.750
but it's not the other way.

00:08:00.750 --> 00:08:05.690
We can't have a single student and rolling for multiple courses.

00:08:05.690 --> 00:08:08.610
If you want both these things to happen,

00:08:08.610 --> 00:08:14.030
went to design our database to support many to many relationship,

00:08:14.030 --> 00:08:19.600
and the way we do it is will have course table in the student stable will introduce another

00:08:19.600 --> 00:08:23.380
table with two feels both or foreign keys,

00:08:23.380 --> 00:08:27.040
and do they ignore that as a good naming convention.

00:08:27.040 --> 00:08:29.860
We always say F k for foreign key,

00:08:29.860 --> 00:08:33.330
and this foreign key refers to course table,

00:08:33.330 --> 00:08:35.450
and this refers to the students table.

00:08:35.450 --> 00:08:40.530
So course one is andl best to,

00:08:40.530 --> 00:08:44.890
and one course to is enrolled by student,

00:08:44.890 --> 00:08:47.150
one so on and so forth.

00:08:47.150 --> 00:08:48.570
So in here,

00:08:48.570 --> 00:08:51.600
not only multiple students and all for a single course,

00:08:51.600 --> 00:08:52.090
for example,

00:08:52.090 --> 00:08:59.980
store in one and to enroll for course one but also a single student and rolled for multiple

00:08:59.980 --> 00:09:00.680
courses.

00:09:00.680 --> 00:09:04.470
Student One has enrolled for both one and two.

00:09:04.470 --> 00:09:14.030
A composite key is a key off two or more attributes that uniquely identifies a row.

00:09:14.030 --> 00:09:17.690
But each of the individual attributes doesn't form a key.

00:09:17.690 --> 00:09:22.590
Consider the falling example in here we have student I D.

00:09:22.590 --> 00:09:23.480
In course I d.

00:09:23.480 --> 00:09:29.210
The country's this field as a primary key because there is a possibility off having

00:09:29.210 --> 00:09:30.410
duplicate values.

00:09:30.410 --> 00:09:31.820
Same goes here.

00:09:31.820 --> 00:09:33.150
We can choose this field,

00:09:33.150 --> 00:09:42.260
but we can choose the combination off these two attributes or fields to form a key primary

00:09:42.260 --> 00:09:43.550
key for this table.

00:09:43.550 --> 00:09:51.550
So essentially we have the same table with the additional field off date off enrollment.

00:09:51.550 --> 00:09:55.350
So this is what is that composite key.

00:09:55.350 --> 00:09:59.910
If you're all around with number off keys,

00:09:59.910 --> 00:10:06.210
then I would just suggest you to have a good understanding off primary key and foreign key

00:10:06.210 --> 00:10:07.470
that put suffice.

00:10:07.470 --> 00:10:11.340
I believe others are just there to create confusion,

00:10:11.340 --> 00:10:15.050
but it's always better to know.

00:10:15.050 --> 00:10:23.960
So let's talk about schemer Schema is like a design that describes how the database is

00:10:23.960 --> 00:10:26.280
structured and organized.

00:10:26.280 --> 00:10:28.970
These designs are typically done,

00:10:28.970 --> 00:10:37.630
but the database designers to illustrate how the data is organized to rest of the team or

00:10:37.630 --> 00:10:38.650
with customers.

00:10:38.650 --> 00:10:41.040
So we have a couple off scheme.

00:10:41.040 --> 00:10:41.260
Us.

00:10:41.260 --> 00:10:43.070
One is the relation schema,

00:10:43.070 --> 00:10:47.090
which will basically talk about the tables in the database.

00:10:47.090 --> 00:10:49.690
And we have the database schema,

00:10:49.690 --> 00:10:55.400
which is like the big picture of the entire database that we're dealing with an example of

00:10:55.400 --> 00:10:56.550
what you can see here.

00:10:56.550 --> 00:10:59.500
By the way this images picked up from this location,

00:10:59.500 --> 00:11:01.810
I put the mate source Justin,

00:11:01.810 --> 00:11:06.680
because if you want to take a look at so here's a major or the scheme of that to present

00:11:06.680 --> 00:11:10.180
the students and teachers database.

00:11:10.180 --> 00:11:14.420
All these individual blocks represent tables,

00:11:14.420 --> 00:11:22.420
so we term each block as a relation schema and combination off all these is together called

00:11:22.420 --> 00:11:23.750
as a database schema.

00:11:23.750 --> 00:11:25.510
If you take a look at this,

00:11:25.510 --> 00:11:28.170
each and every student well,

00:11:28.170 --> 00:11:31.450
actually deal with multiple subjects.

00:11:31.450 --> 00:11:35.350
And so when the good exam they get multiple marks.

00:11:35.350 --> 00:11:38.760
So single student multiple marks,

00:11:38.760 --> 00:11:40.610
which is one to many relationship.

00:11:40.610 --> 00:11:42.860
If you observe this line carefully,

00:11:42.860 --> 00:11:46.460
we have multiple points here,

00:11:46.460 --> 00:11:48.410
which represents many.

00:11:48.410 --> 00:11:52.800
So we have one to many relationship between these two tables.

00:11:52.800 --> 00:11:54.510
Same goes here as well.

00:11:54.510 --> 00:11:57.390
Multiple students can belong to a single group,

00:11:57.390 --> 00:12:00.250
and we have one to many relationship.

00:12:00.250 --> 00:12:08.570
Now this diagram is based off entity relationship diagrams which will talk about that later

00:12:08.570 --> 00:12:09.510
point of time.

00:12:09.510 --> 00:12:17.070
But this is a very quick in major on how we can design a database.

00:12:17.070 --> 00:12:18.790
Now,

00:12:18.790 --> 00:12:20.320
with all this in mind,

00:12:20.320 --> 00:12:26.550
we're definitely good to go head to start exploring the structured query language.

00:12:26.550 --> 00:12:28.350
See you soon.

