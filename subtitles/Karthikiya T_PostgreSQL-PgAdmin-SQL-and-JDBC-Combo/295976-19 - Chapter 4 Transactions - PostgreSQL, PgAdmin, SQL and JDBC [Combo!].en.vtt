WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.070
in this very We're going to talk about transaction management in database.

00:00:05.070 --> 00:00:06.370
If you remember,

00:00:06.370 --> 00:00:09.940
we had already talked about what is a transaction?

00:00:09.940 --> 00:00:13.050
What is transaction management in database?

00:00:13.050 --> 00:00:17.990
We've talked about it in one or for intra videos on D BMS.

00:00:17.990 --> 00:00:19.860
If you'd like to take a look at it again,

00:00:19.860 --> 00:00:25.570
you can go through this document db Emma's intro along with my video on it.

00:00:25.570 --> 00:00:32.070
So basically a transaction is has set off logically related sequence of actions that

00:00:32.070 --> 00:00:39.980
perform a certain task so that either all of them get executed flawlessly or none of them

00:00:39.980 --> 00:00:40.950
will get executed.

00:00:40.950 --> 00:00:47.450
So either data will be saved completely or no data will be saved at all.

00:00:47.450 --> 00:00:51.720
But it's not a rocket signs to deal with this transactions imposed.

00:00:51.720 --> 00:00:53.380
Re ask your I'm a show.

00:00:53.380 --> 00:00:53.650
You what?

00:00:53.650 --> 00:00:54.180
I mean,

00:00:54.180 --> 00:00:57.920
so all you have to take care off artistry,

00:00:57.920 --> 00:00:58.810
keywords.

00:00:58.810 --> 00:01:02.520
The begin transaction will help us initiate a transaction.

00:01:02.520 --> 00:01:03.970
So followed by this key,

00:01:03.970 --> 00:01:09.760
would you would have set off a skill statements that together perform a certain transaction

00:01:09.760 --> 00:01:10.520
and then,

00:01:10.520 --> 00:01:10.920
later on,

00:01:10.920 --> 00:01:11.540
you rather say,

00:01:11.540 --> 00:01:13.680
commit or roll back commitment.

00:01:13.680 --> 00:01:20.050
You'd like to comet or save changes in the database based on whatever you execute has part

00:01:20.050 --> 00:01:21.440
of the SQL statements,

00:01:21.440 --> 00:01:27.710
the rollback will simply undo everything and will not save any data in the database.

00:01:27.710 --> 00:01:30.500
So let's take a look at this in action.

00:01:30.500 --> 00:01:37.740
I already have this set off instructions which will cancer them to be a single transaction

00:01:37.740 --> 00:01:37.740
.

00:01:37.740 --> 00:01:38.860
Here.

00:01:38.860 --> 00:01:42.910
We're just simply trying to add three entries in the student stable.

00:01:42.910 --> 00:01:44.270
But in real world,

00:01:44.270 --> 00:01:50.330
these instructions could actually be a product purchase or a bank transaction,

00:01:50.330 --> 00:01:51.540
like transferring funds.

00:01:51.540 --> 00:01:53.440
Still one account to the other,

00:01:53.440 --> 00:01:54.180
etcetera.

00:01:54.180 --> 00:01:57.550
So we use this key would begin transaction,

00:01:57.550 --> 00:02:01.150
followed by all the set off transactional statements.

00:02:01.150 --> 00:02:02.400
And then I said,

00:02:02.400 --> 00:02:03.390
Roll back,

00:02:03.390 --> 00:02:07.750
meaning that I don't want to save any off the details in the database,

00:02:07.750 --> 00:02:12.300
meaning that I don't want to save any of the data into database.

00:02:12.300 --> 00:02:20.250
So let's run this and make sure that nothing is in fact saved in the student stable.

00:02:20.250 --> 00:02:22.560
And sure enough,

00:02:22.560 --> 00:02:28.450
nothing got saved because everything got undone with the rollback.

00:02:28.450 --> 00:02:29.620
Now let's a comet,

00:02:29.620 --> 00:02:33.850
and sure enough,

00:02:33.850 --> 00:02:37.860
this time everything will be saved.

00:02:37.860 --> 00:02:43.560
Just as you see here Now,

00:02:43.560 --> 00:02:44.890
we could actually use mix up,

00:02:44.890 --> 00:02:46.350
both commit and roll back.

00:02:46.350 --> 00:02:48.320
Let's say that I wanted to move,

00:02:48.320 --> 00:02:54.450
Come it until here and after which we're executing this instruction.

00:02:54.450 --> 00:02:55.950
And then I say,

00:02:55.950 --> 00:02:58.910
Roll back now.

00:02:58.910 --> 00:03:06.270
This time these two instructions will be executed than its data will be safer because you

00:03:06.270 --> 00:03:09.460
said comet afterward,

00:03:09.460 --> 00:03:12.830
you're trying to execute this statement and then we said,

00:03:12.830 --> 00:03:13.870
Roll back not.

00:03:13.870 --> 00:03:23.190
This rollback will not undo water has been done prior to come It it will only undo until

00:03:23.190 --> 00:03:26.200
previous commit or roll back instruction.

00:03:26.200 --> 00:03:27.860
So let's run this.

00:03:27.860 --> 00:03:29.770
And before that,

00:03:29.770 --> 00:03:33.350
make sure let's delayed these entries from here.

00:03:33.350 --> 00:03:35.030
It could still keep them,

00:03:35.030 --> 00:03:36.100
but to stay.

00:03:36.100 --> 00:03:37.150
What confusion?

00:03:37.150 --> 00:03:42.050
Let's run the query.

00:03:42.050 --> 00:03:46.070
And sure enough,

00:03:46.070 --> 00:03:49.450
we only have two entries that are saved.

00:03:49.450 --> 00:03:56.350
And just for your information in software development,

00:03:56.350 --> 00:04:01.920
we would never typically managed transactions directly from database like you're seeing

00:04:01.920 --> 00:04:02.350
here.

00:04:02.350 --> 00:04:05.540
We would typically used frameworks,

00:04:05.540 --> 00:04:07.850
which will handle the task for us.

00:04:07.850 --> 00:04:09.170
Also,

00:04:09.170 --> 00:04:14.710
there's something called locking mechanism that you use as part off a transaction and that

00:04:14.710 --> 00:04:18.510
lets you actually get exclusive access to a table,

00:04:18.510 --> 00:04:21.910
meaning that when your transaction is working on that table,

00:04:21.910 --> 00:04:25.760
no other transaction can actually make updates on the table,

00:04:25.760 --> 00:04:29.570
so that they'll be less scope for creating conflicts.

00:04:29.570 --> 00:04:36.500
And the way you go about acquiring a lock on a table is by saying,

00:04:36.500 --> 00:04:43.350
Look table and then the name of the table students in our case.

00:04:43.350 --> 00:04:49.150
And then you say the more than what you would like to act for the lock.

00:04:49.150 --> 00:04:52.270
And here we have radius options.

00:04:52.270 --> 00:04:59.290
But the option that I'm going to use is to have exclusive axis.

00:04:59.290 --> 00:05:01.950
I think I supposed to say it's ah,

00:05:01.950 --> 00:05:05.660
access exclusive mode.

00:05:05.660 --> 00:05:10.130
So this transaction will get an exclusive access to the students table.

00:05:10.130 --> 00:05:10.510
No,

00:05:10.510 --> 00:05:13.650
the transition can actually interact with the table during the time frame.

00:05:13.650 --> 00:05:18.280
This transaction is happening and let's run it.

00:05:18.280 --> 00:05:20.700
Things worked fine,

00:05:20.700 --> 00:05:25.650
and you would certainly see some new later getting populated.

00:05:25.650 --> 00:05:31.520
And there are actually where yes moored available.

00:05:31.520 --> 00:05:34.320
You also got to row exclusive more etcetera.

00:05:34.320 --> 00:05:38.010
You can just refer to the documentation An official pose,

00:05:38.010 --> 00:05:40.080
great skill dot Argh website.

00:05:40.080 --> 00:05:41.640
There,

00:05:41.640 --> 00:05:47.050
the search will just search for the lock table keyboard and then you will find its

00:05:47.050 --> 00:05:48.070
documentation.

00:05:48.070 --> 00:05:49.540
All right,

00:05:49.540 --> 00:05:50.770
See you in my next video

