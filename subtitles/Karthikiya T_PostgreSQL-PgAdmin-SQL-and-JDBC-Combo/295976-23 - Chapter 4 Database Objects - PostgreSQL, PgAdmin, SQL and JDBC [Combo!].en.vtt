WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.470
in this video,

00:00:01.470 --> 00:00:05.500
we're going to take a look at various objects present at database level.

00:00:05.500 --> 00:00:10.050
We've talked about how we can create a new schema and its objects.

00:00:10.050 --> 00:00:10.930
Similarly,

00:00:10.930 --> 00:00:14.550
we can create a new database and months to do so.

00:00:14.550 --> 00:00:19.450
You would see all these objects getting populated in that new database,

00:00:19.450 --> 00:00:24.690
and the way we go about creating a database is either by using this wizard.

00:00:24.690 --> 00:00:32.500
Let's give it some name or you could use this SQL statement created a base to do the same

00:00:32.500 --> 00:00:34.030
and want to click.

00:00:34.030 --> 00:00:34.680
Cancel.

00:00:34.680 --> 00:00:38.750
Let me walk you through all these various list off objects present in here.

00:00:38.750 --> 00:00:39.250
First,

00:00:39.250 --> 00:00:41.250
let's talk about casts.

00:00:41.250 --> 00:00:46.750
Gas is similar to typecasting in any other programming language.

00:00:46.750 --> 00:00:51.050
Let me just open up the query tool by selecting the database.

00:00:51.050 --> 00:00:53.060
Let's do that.

00:00:53.060 --> 00:00:57.730
I wanted to typecast this literal,

00:00:57.730 --> 00:00:59.370
which is off type.

00:00:59.370 --> 00:01:03.700
Text to you are car.

00:01:03.700 --> 00:01:05.790
This would obviously work.

00:01:05.790 --> 00:01:06.830
By the way.

00:01:06.830 --> 00:01:09.990
This is how you would typecast in Post Grad school.

00:01:09.990 --> 00:01:13.300
You would use this couple off colon's,

00:01:13.300 --> 00:01:15.950
the source type and the destination type,

00:01:15.950 --> 00:01:22.730
So basically this will work because these two types are compatible or in the terms off post

00:01:22.730 --> 00:01:23.690
Greece cure.

00:01:23.690 --> 00:01:27.050
These two types are binary compatible.

00:01:27.050 --> 00:01:32.160
But how about trying to convert text to Belene?

00:01:32.160 --> 00:01:33.380
Now?

00:01:33.380 --> 00:01:37.550
This is obviously not possible because these two types are not compatible.

00:01:37.550 --> 00:01:39.150
This would try an error.

00:01:39.150 --> 00:01:41.560
This is where cast will come into picture.

00:01:41.560 --> 00:01:47.540
We can create a new cast that will actually convert text to Belene.

00:01:47.540 --> 00:01:53.850
But it is our responsibility to provide the logic that does that task.

00:01:53.850 --> 00:01:55.160
So first of all,

00:01:55.160 --> 00:02:02.070
before we create a new cast went to create a function that's going to take the source data

00:02:02.070 --> 00:02:03.680
type as a perimeter,

00:02:03.680 --> 00:02:05.030
do something with it,

00:02:05.030 --> 00:02:08.550
and finally return the destination data type.

00:02:08.550 --> 00:02:14.430
So I'm going to go inside our default schema and create a new function.

00:02:14.430 --> 00:02:21.170
I'm actually going to copy the existing court from one of the existing functions just to

00:02:21.170 --> 00:02:26.760
save a bit off time and create a function.

00:02:26.760 --> 00:02:31.350
Let's call it as DF and I'm going to return,

00:02:31.350 --> 00:02:34.750
um,

00:02:34.750 --> 00:02:36.330
a bull in value.

00:02:36.330 --> 00:02:37.520
True,

00:02:37.520 --> 00:02:38.300
for instance,

00:02:38.300 --> 00:02:45.230
the written type is going to be Belene now,

00:02:45.230 --> 00:02:46.450
just to keep things simple,

00:02:46.450 --> 00:02:50.450
I'm just simply returning a bull in value in real time.

00:02:50.450 --> 00:02:52.070
You would have something meaningful here.

00:02:52.070 --> 00:02:56.750
Maybe you would like to do something with the string that comes as an argument.

00:02:56.750 --> 00:03:00.650
Let's add that argument here.

00:03:00.650 --> 00:03:10.550
Argument is going to be off type text that's name it as arc or whatever.

00:03:10.550 --> 00:03:12.950
And here is the final Lescure.

00:03:12.950 --> 00:03:16.070
We have the source type as an argument,

00:03:16.070 --> 00:03:18.510
and we're returning the destination type.

00:03:18.510 --> 00:03:19.010
What's like?

00:03:19.010 --> 00:03:21.130
Save that?

00:03:21.130 --> 00:03:22.550
We seem to have some error.

00:03:22.550 --> 00:03:26.010
Sustain the programming language to P O.

00:03:26.010 --> 00:03:26.180
P.

00:03:26.180 --> 00:03:26.330
G.

00:03:26.330 --> 00:03:27.350
A skill and,

00:03:27.350 --> 00:03:30.650
like save now we can go ahead and create a cast.

00:03:30.650 --> 00:03:33.580
And what that does it is.

00:03:33.580 --> 00:03:38.350
It's going to convert the source type text to decision,

00:03:38.350 --> 00:03:39.350
Taibu lean,

00:03:39.350 --> 00:03:45.550
and it will take help of the function that we have just created is DF,

00:03:45.550 --> 00:03:50.100
and if you look at their skill,

00:03:50.100 --> 00:03:52.760
this is how you go about creating a cast.

00:03:52.760 --> 00:03:53.750
Create cast,

00:03:53.750 --> 00:04:01.240
followed by various options can defer to the documentation by clicking this high icon click

00:04:01.240 --> 00:04:01.740
save.

00:04:01.740 --> 00:04:03.790
Now let's try to run this query,

00:04:03.790 --> 00:04:05.960
and sure enough,

00:04:05.960 --> 00:04:09.240
we're able to convert this text to Belene,

00:04:09.240 --> 00:04:15.020
so that's where casting will come into picture coming to catalog.

00:04:15.020 --> 00:04:17.370
This is similar to a schema.

00:04:17.370 --> 00:04:18.050
In fact,

00:04:18.050 --> 00:04:21.040
these two words are used interchangeability.

00:04:21.040 --> 00:04:27.090
If you expand the catalogue and get inside it you would notice that you would see all the

00:04:27.090 --> 00:04:27.610
objects,

00:04:27.610 --> 00:04:29.100
what you would see in a schema,

00:04:29.100 --> 00:04:31.360
but you can't really work with them.

00:04:31.360 --> 00:04:32.250
For example,

00:04:32.250 --> 00:04:33.860
I cannot create a new function.

00:04:33.860 --> 00:04:40.920
You can think off catalogue as a kind of a broader view office kema where not only will

00:04:40.920 --> 00:04:43.050
this have the functions that we have defined,

00:04:43.050 --> 00:04:46.330
but also the functions that are external.

00:04:46.330 --> 00:04:47.170
For instance,

00:04:47.170 --> 00:04:48.550
if expand this section,

00:04:48.550 --> 00:04:58.390
he would see quite a big list off functions which will help us perform various tasks in our

00:04:58.390 --> 00:04:59.450
database.

00:04:59.450 --> 00:05:01.750
So that's about it.

00:05:01.750 --> 00:05:04.890
You don't have to worry too much about catalogs.

00:05:04.890 --> 00:05:06.850
He can work on it much.

00:05:06.850 --> 00:05:14.850
The even triggers is sort of similar to the triggers we had talked about in schema.

00:05:14.850 --> 00:05:21.220
But these triggers will come into picture not only when we're dealing with tables,

00:05:21.220 --> 00:05:21.780
for example,

00:05:21.780 --> 00:05:25.630
adding a row into a table or inserting daring to the table,

00:05:25.630 --> 00:05:26.320
etcetera,

00:05:26.320 --> 00:05:28.450
but also at the database level.

00:05:28.450 --> 00:05:33.610
Let me right click on this and take a look at the desert and see what it offers.

00:05:33.610 --> 00:05:40.180
And if you notice it is allowing us to associate at trigger function when any off these

00:05:40.180 --> 00:05:41.120
events happen.

00:05:41.120 --> 00:05:46.520
So maybe we wanted to perform something when we try to create a database or when they're

00:05:46.520 --> 00:05:52.940
trying to create a schema so you can put that query in here and a particular function will

00:05:52.940 --> 00:05:53.790
be triggered.

00:05:53.790 --> 00:05:58.390
It's as simple as that coming to extensions.

00:05:58.390 --> 00:06:04.700
These are set off extensions that you can add to enhance the capabilities off post.

00:06:04.700 --> 00:06:04.890
Great.

00:06:04.890 --> 00:06:08.960
Ask your We already have this couple off extensions,

00:06:08.960 --> 00:06:10.950
which we've been using so far.

00:06:10.950 --> 00:06:12.450
Pl PDS Cure,

00:06:12.450 --> 00:06:13.800
for instance,

00:06:13.800 --> 00:06:15.940
will help us work with this language.

00:06:15.940 --> 00:06:18.580
Similarly can add See other languages,

00:06:18.580 --> 00:06:21.950
like C language extension to be able to work on the same.

00:06:21.950 --> 00:06:26.750
We also got admin pack that would help us with some administrator tasks.

00:06:26.750 --> 00:06:28.150
Similarly,

00:06:28.150 --> 00:06:31.800
we got host off other extensions provided by Pose Greer's.

00:06:31.800 --> 00:06:39.560
You can actually afford to the documentation in and see what each one of these extensions

00:06:39.560 --> 00:06:40.650
does.

00:06:40.650 --> 00:06:49.480
The foreign data rappers is sort of similar to being able to see external data from

00:06:49.480 --> 00:06:50.790
external data sources,

00:06:50.790 --> 00:06:55.750
maybe from other databases or from external file system.

00:06:55.750 --> 00:06:59.610
And not only do we read the data,

00:06:59.610 --> 00:07:04.350
but also we can perform right operations with current configuration.

00:07:04.350 --> 00:07:07.580
But this is a little advanced,

00:07:07.580 --> 00:07:11.550
and I personally never get to work on this section.

00:07:11.550 --> 00:07:15.250
The languages has just simply set off languages,

00:07:15.250 --> 00:07:16.990
which were supporting,

00:07:16.990 --> 00:07:17.700
if you'd wish,

00:07:17.700 --> 00:07:19.150
you can add more.

00:07:19.150 --> 00:07:25.010
And that's about the stop objects President Despot off a database.

00:07:25.010 --> 00:07:27.680
And let us also talk about the stable spaces.

00:07:27.680 --> 00:07:28.750
It's pretty simple.

00:07:28.750 --> 00:07:34.870
So these are the places where the actual data is getting stored.

00:07:34.870 --> 00:07:35.770
In fact,

00:07:35.770 --> 00:07:39.850
we had talked about this in one afar introduction videos.

00:07:39.850 --> 00:07:43.850
Wherever these two reciting said that the disk is full,

00:07:43.850 --> 00:07:49.840
then we want to switch to alternators so you would get some name.

00:07:49.840 --> 00:07:53.760
In the definition you report the location where you would like to continue storing your

00:07:53.760 --> 00:07:54.250
data,

00:07:54.250 --> 00:07:55.770
and once you do so,

00:07:55.770 --> 00:08:02.050
you can actually point the database to store its data in that location.

00:08:02.050 --> 00:08:06.970
In the definition off the database,

00:08:06.970 --> 00:08:07.830
for example,

00:08:07.830 --> 00:08:10.450
you get an option to choose the table space.

00:08:10.450 --> 00:08:12.650
All right,

00:08:12.650 --> 00:08:20.050
that thing that will summarize on on objects present in database see you in my next video

