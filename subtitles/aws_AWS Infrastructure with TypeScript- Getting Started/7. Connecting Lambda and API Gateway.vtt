WEBVTT
1
00:00:01.040 --> 00:00:04.680
So now we've reached the final step in creating our API tier,

2
00:00:04.680 --> 00:00:08.560
and that is that we need to connect lambda with API gateway.

3
00:00:08.560 --> 00:00:09.670
So here within this demo,

4
00:00:09.670 --> 00:00:15.060
we're first going to be creating an API gateway HTTP API, and then we'll be

5
00:00:15.060 --> 00:00:19.690
creating an integration to allow API gateway to call our lambda function, and

6
00:00:19.690 --> 00:00:22.810
then we'll be validating our API with Postman.

7
00:00:22.810 --> 00:00:25.440
So, let's dive in.

8
00:00:25.440 --> 00:00:28.210
So just like with many of the clips in this module,

9
00:00:28.210 --> 00:00:29.970
our first step here is actually in the terminal

10
00:00:29.970 --> 00:00:32.470
because we need to install a package.

11
00:00:32.470 --> 00:00:36.810
So, in this case, we're going to be installing aws‑apigatewayv2,

12
00:00:36.810 --> 00:00:39.810
and as a reminder, v2 means we're working with the HTTP

13
00:00:39.810 --> 00:00:45.140
APIs as opposed to the REST‑based APIs.

14
00:00:45.140 --> 00:00:49.340
Now that we have that in place, we're going to head over to VS Code.

15
00:00:49.340 --> 00:00:50.750
So here within VS Code,

16
00:00:50.750 --> 00:00:54.820
I'm in our API construct, and I'm going to scroll to the top here.

17
00:00:54.820 --> 00:00:58.150
We're going to need to import API gateway. So I'm going to say

18
00:00:58.150 --> 00:01:06.840
import as apig from aws‑cdk, and then apigateway.

19
00:01:06.840 --> 00:01:08.370
So now that we have that imported,

20
00:01:08.370 --> 00:01:12.150
we can now go below where we were configuring our IAM permissions.

21
00:01:12.150 --> 00:01:14.510
And the first thing we're going to need to do is we're going

22
00:01:14.510 --> 00:01:18.840
to need to create an API gateway HttpAPI.

23
00:01:18.840 --> 00:01:21.190
Now that is just as simple as including this here.

24
00:01:21.190 --> 00:01:22.920
Now I'm going to call out what I've pasted.

25
00:01:22.920 --> 00:01:23.400
First of all,

26
00:01:23.400 --> 00:01:26.650
we're giving this an API name of document‑management‑api.

27
00:01:26.650 --> 00:01:30.500
We're having it create a default stage, we're not worrying

28
00:01:30.500 --> 00:01:32.410
with multiple stages at this point,

29
00:01:32.410 --> 00:01:35.180
and we're specifying the option here for cores.

30
00:01:35.180 --> 00:01:38.890
Now, as mentioned, we're setting the origin here to be the asterisk value,

31
00:01:38.890 --> 00:01:40.920
which means it will match anything. Now, you

32
00:01:40.920 --> 00:01:43.900
wouldn't want to do this in production, but for our case here,

33
00:01:43.900 --> 00:01:46.870
this will work until we deploy a web application where we could

34
00:01:46.870 --> 00:01:49.840
potentially limit it to that specific scope.

35
00:01:49.840 --> 00:01:54.140
We also were saying here that the allowed methods are only HTTP GET. And that's

36
00:01:54.140 --> 00:01:57.440
because right now we only have a GET method within our API.

37
00:01:57.440 --> 00:01:58.570
And now that that's in place,

38
00:01:58.570 --> 00:02:01.690
we can now create a LambdaProxyIntegration, and this is what's going to

39
00:02:01.690 --> 00:02:04.640
actually link API gateway with our lambda function.

40
00:02:04.640 --> 00:02:08.720
We're just going to call this integration, and we're saying this

41
00:02:08.720 --> 00:02:11.940
is going to be a new LambdaProxyIntegration.

42
00:02:11.940 --> 00:02:12.500
And here,

43
00:02:12.500 --> 00:02:15.800
this isn't actually a resource in and of itself, so we just have

44
00:02:15.800 --> 00:02:19.460
a props value to pass in. And we're going to specify the handler

45
00:02:19.460 --> 00:02:23.840
is going to be our lambda function, which is getDocumentsFunction.

46
00:02:23.840 --> 00:02:26.060
So now that we have our integration in place,

47
00:02:26.060 --> 00:02:29.540
we're now ready to go in and configure our routes.

48
00:02:29.540 --> 00:02:30.390
So we're going to say,

49
00:02:30.390 --> 00:02:35.020
httpApi, we're going to add a route. Now, this also in and of itself

50
00:02:35.020 --> 00:02:38.020
doesn't need to have the construct passed in because this is a part of

51
00:02:38.020 --> 00:02:41.700
the httpApi where we did pass the construct in.

52
00:02:41.700 --> 00:02:44.180
So in this case, we're just going to have a parameters object.

53
00:02:44.180 --> 00:02:46.230
We're going to need to specify the path,

54
00:02:46.230 --> 00:02:46.950
and in this case,

55
00:02:46.950 --> 00:02:51.610
the path is going to be getDocuments. Then, in addition to the path,

56
00:02:51.610 --> 00:02:53.780
we're going to need to pass in the methods. Now,

57
00:02:53.780 --> 00:02:56.480
as mentioned, we're only using a GET method here.

58
00:02:56.480 --> 00:02:58.840
So, we have an array that we can pass in.

59
00:02:58.840 --> 00:03:02.720
We're going to say that this is going to be HttpMethod.GET

60
00:03:02.720 --> 00:03:06.640
because that's all we need to use for now.

61
00:03:06.640 --> 00:03:06.800
Now,

62
00:03:06.800 --> 00:03:09.420
the next thing we need to include is the integration because we need

63
00:03:09.420 --> 00:03:12.450
to know ultimately what API gateway needs to call.

64
00:03:12.450 --> 00:03:14.940
And so we have our single integration that has been added

65
00:03:14.940 --> 00:03:17.880
here. And next, we need to add one more thing,

66
00:03:17.880 --> 00:03:20.520
and that's going to be a cloud formation output that is going to

67
00:03:20.520 --> 00:03:24.760
include the URL for our HttpApi. So in this case,

68
00:03:24.760 --> 00:03:29.500
we're going to say new cdk and then CfnOutput, and then we're going to

69
00:03:29.500 --> 00:03:32.610
pass in the construct, and we're going to give it a name.

70
00:03:32.610 --> 00:03:36.270
So we're going to call this APIEndpoint. Then, we need to pass in our

71
00:03:36.270 --> 00:03:39.780
parameters object, we're going to say the value, which in this case,

72
00:03:39.780 --> 00:03:44.550
is going to be httpApi, and we're going to pass in the URL, and we're

73
00:03:44.550 --> 00:03:47.090
going to say here that that is something that we definitely need; it

74
00:03:47.090 --> 00:03:49.570
doesn't need to be optional. And then we're going to specify the

75
00:03:49.570 --> 00:03:53.640
export name, which is going to be APIEndpoint.

76
00:03:53.640 --> 00:03:55.020
Now that we have this in place,

77
00:03:55.020 --> 00:03:58.570
we're now ready to save our construct, and we're going to navigate

78
00:03:58.570 --> 00:04:07.640
over to the terminal. And now we're going to deploy.

79
00:04:07.640 --> 00:04:11.580
Now, one of the things you'll notice here is we do have an IAM statement change.

80
00:04:11.580 --> 00:04:11.820
Now,

81
00:04:11.820 --> 00:04:13.820
that might seem strange to you because we didn't work with

82
00:04:13.820 --> 00:04:17.120
IAM directly, but when we created the integration between our

83
00:04:17.120 --> 00:04:19.590
lambda function and API gateway,

84
00:04:19.590 --> 00:04:23.490
it also gave API gateway the permission to invoke our lambda function,

85
00:04:23.490 --> 00:04:24.520
which is what we want.

86
00:04:24.520 --> 00:04:30.380
So we'll say yes that we're ready to deploy. Now that this is deployed,

87
00:04:30.380 --> 00:04:34.690
you can see here that our APIEndpoint has been provided.

88
00:04:34.690 --> 00:04:38.990
So I'm going to actually take this and I'm going to copy it, and now

89
00:04:38.990 --> 00:04:42.370
I'm going to open up an application called Postman that will enable us

90
00:04:42.370 --> 00:04:45.750
to test our API. So here within Postman,

91
00:04:45.750 --> 00:04:47.440
I'm going to create a new tab.

92
00:04:47.440 --> 00:04:49.440
This is going to be a GET request.

93
00:04:49.440 --> 00:04:51.950
I'm going to paste in the URL that was our output,

94
00:04:51.950 --> 00:04:55.340
and I'm going to add getDocuments.

95
00:04:55.340 --> 00:04:58.830
Now that we have all of this in place, I should be able to just hit Send.

96
00:04:58.830 --> 00:05:02.830
And now you can see that we are getting the expected output.

97
00:05:02.830 --> 00:05:06.940
We're getting an array of files that includes both the file names and the URL.

98
00:05:06.940 --> 00:05:08.180
So here within this module,

99
00:05:08.180 --> 00:05:11.240
we have been able to implement the API tier of our

100
00:05:11.240 --> 00:05:13.220
document management proof of concept.

101
00:05:13.220 --> 00:05:16.990
We've created a lambda function with an integrated typescript project that

102
00:05:16.990 --> 00:05:20.460
utilizes the CDK for bundling of our lambda function.

103
00:05:20.460 --> 00:05:28.000
We've also integrated in with API gateway, and we've made sure that it has the permissions to work with our S3 bucket.

