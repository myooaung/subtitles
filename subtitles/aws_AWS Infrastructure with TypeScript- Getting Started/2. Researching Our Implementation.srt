1
00:00:01,040 --> 00:00:04,040
There might be times when you're tempted to immediately jump in

2
00:00:04,040 --> 00:00:06,860
and just start coding a solution with the CDK.

3
00:00:06,860 --> 00:00:10,710
But I encourage you, take time to go in and review the documentation,

4
00:00:10,710 --> 00:00:13,170
and that's exactly what we're going to be doing here

5
00:00:13,170 --> 00:00:15,240
before we start building anything.

6
00:00:15,240 --> 00:00:18,310
So here we're first going to be launching the CDK documentation,

7
00:00:18,310 --> 00:00:20,070
which, of course, we've done multiple times.

8
00:00:20,070 --> 00:00:22,830
And we'll be reviewing the packages that we're going

9
00:00:22,830 --> 00:00:24,890
to need for our implementation.

10
00:00:24,890 --> 00:00:27,540
So let's dive in.

11
00:00:27,540 --> 00:00:29,960
So I'm here within the terminal, and just like before,

12
00:00:29,960 --> 00:00:33,740
I'm going to launch the documentation using cdk docs.

13
00:00:33,740 --> 00:00:38,240
So here within the documentation, I'm going to click on API Reference.

14
00:00:38,240 --> 00:00:40,760
Now one of the first places that we're going to go is

15
00:00:40,760 --> 00:00:42,810
we're going to go to look at Lambda.

16
00:00:42,810 --> 00:00:47,640
So I'm going to scroll down, and I'm going to look at AWS Lambda,

17
00:00:47,640 --> 00:00:50,040
and I'm going to click on the Overview page.

18
00:00:50,040 --> 00:00:53,260
Now you'll see here the TypeScript package that we need to worry with.

19
00:00:53,260 --> 00:00:55,800
You also can see here that both our L1 and L2

20
00:00:55,800 --> 00:00:58,640
constructs are stable for AWS Lambda.

21
00:00:58,640 --> 00:01:00,770
And I wanted to showcase a few things here.

22
00:01:00,770 --> 00:01:04,670
So here's an example of using the L2 construct.

23
00:01:04,670 --> 00:01:06,660
We can go in and create a new lambda function,

24
00:01:06,660 --> 00:01:10,800
we can specify a runtime, we can specify a handler,

25
00:01:10,800 --> 00:01:14,010
and then we can specify where the code is located.

26
00:01:14,010 --> 00:01:17,090
Now in this case, we're going to be using local code for this.

27
00:01:17,090 --> 00:01:19,950
So we're going to have a directory within our project where

28
00:01:19,950 --> 00:01:22,140
we'll have the code for our lambda function,

29
00:01:22,140 --> 00:01:26,190
and we want it to take care of packaging that up for us and deploying it.

30
00:01:26,190 --> 00:01:27,310
And that's what's shown here.

31
00:01:27,310 --> 00:01:30,940
We can use this lambda.Code.fromAsset and actually tell it

32
00:01:30,940 --> 00:01:32,990
the directory to go look for this in.

33
00:01:32,990 --> 00:01:37,540
But if you remember, we're going to be building out our API in TypeScript.

34
00:01:37,540 --> 00:01:40,120
That means we need to worry about things like building it

35
00:01:40,120 --> 00:01:42,390
so we actually have a JavaScript output,

36
00:01:42,390 --> 00:01:45,580
packaging it together with our production dependencies,

37
00:01:45,580 --> 00:01:47,890
and then creating that bundle file.

38
00:01:47,890 --> 00:01:49,370
So let's just hold that for a minute,

39
00:01:49,370 --> 00:01:52,140
and we'll talk about how we do that in just a bit.

40
00:01:52,140 --> 00:01:53,930
So here you can see that we have three different

41
00:01:53,930 --> 00:01:55,820
options for using our handler code.

42
00:01:55,820 --> 00:01:57,780
We can actually do it from a bucket.

43
00:01:57,780 --> 00:02:01,070
So if you've already deployed a ZIP file, you can use that option.

44
00:02:01,070 --> 00:02:03,120
And next, you can do it inline.

45
00:02:03,120 --> 00:02:05,390
And again, this should be something that you do rarely.

46
00:02:05,390 --> 00:02:07,090
There can be some cases where this makes sense,

47
00:02:07,090 --> 00:02:10,640
but usually you're going to want to choose one of the other two options.

48
00:02:10,640 --> 00:02:12,300
And then the third option is the one that we just

49
00:02:12,300 --> 00:02:15,050
discussed where we can utilize the fromAsset,

50
00:02:15,050 --> 00:02:17,100
which will allow us to point to either directory,

51
00:02:17,100 --> 00:02:19,100
and it'll take care of bundling that for us.

52
00:02:19,100 --> 00:02:21,610
Or we can specify a ZIP file.

53
00:02:21,610 --> 00:02:23,250
Now you also can go through here,

54
00:02:23,250 --> 00:02:25,630
and you can specify a lot of additional options.

55
00:02:25,630 --> 00:02:27,940
You can go in and define some different information about

56
00:02:27,940 --> 00:02:29,670
the role that's used for execution.

57
00:02:29,670 --> 00:02:32,070
You can go through and specify versions and aliases.

58
00:02:32,070 --> 00:02:34,260
But let's not worry with that for the moment.

59
00:02:34,260 --> 00:02:34,610
Here,

60
00:02:34,610 --> 00:02:36,950
we're going to be able to accept most of the defaults that

61
00:02:36,950 --> 00:02:39,340
are included within the L2 construct.

62
00:02:39,340 --> 00:02:42,650
But we need to think a little bit more about this bundling process.

63
00:02:42,650 --> 00:02:49,040
So here, I'm going to go to another package, and that's going to be s3‑assets.

64
00:02:49,040 --> 00:02:51,580
Now you'll note here that the CDK constructs that are

65
00:02:51,580 --> 00:02:53,920
used for this are experimental.

66
00:02:53,920 --> 00:02:57,790
Now this is also a package that is in addition to AWS S3.

67
00:02:57,790 --> 00:03:02,460
So when you have three elements within a particular package,

68
00:03:02,460 --> 00:03:05,100
that means that this is something in addition to

69
00:03:05,100 --> 00:03:07,030
what's included with CloudFormation.

70
00:03:07,030 --> 00:03:09,340
So we don't have L1 constructs for this.

71
00:03:09,340 --> 00:03:12,640
These are designed to make key tasks easier.

72
00:03:12,640 --> 00:03:14,100
So if we look here at s3‑assets,

73
00:03:14,100 --> 00:03:17,590
this includes the option for us to create an asset.

74
00:03:17,590 --> 00:03:22,030
And an asset is what is needed when we're actually specifying

75
00:03:22,030 --> 00:03:25,340
where our code is within our lambda function.

76
00:03:25,340 --> 00:03:28,320
Now this gives us the option here to just specify a directory.

77
00:03:28,320 --> 00:03:29,740
We've already seen that.

78
00:03:29,740 --> 00:03:31,580
But we also have some other options.

79
00:03:31,580 --> 00:03:36,550
So if I scroll down, we can look at the actual asset bundling process.

80
00:03:36,550 --> 00:03:40,700
So there's an option within this particular package where we can

81
00:03:40,700 --> 00:03:43,440
specify a Docker image and then a command,

82
00:03:43,440 --> 00:03:45,750
and it will handle building for us.

83
00:03:45,750 --> 00:03:49,110
Now for us, when we're talking about our lambda function,

84
00:03:49,110 --> 00:03:52,060
this is going to mean installing our production dependencies,

85
00:03:52,060 --> 00:03:54,360
building TypeScript into JavaScript,

86
00:03:54,360 --> 00:03:56,990
all the things we need to do that would be handled

87
00:03:56,990 --> 00:03:58,660
within the asset bundling process.

88
00:03:58,660 --> 00:04:01,080
So we could specify a Docker image,

89
00:04:01,080 --> 00:04:04,540
and we could go through and specify each of those commands.

90
00:04:04,540 --> 00:04:06,480
But if this is in a Docker image,

91
00:04:06,480 --> 00:04:09,300
that's going to take quite a while during the build process.

92
00:04:09,300 --> 00:04:11,870
So there is another option that we can take a look at.

93
00:04:11,870 --> 00:04:15,010
There is an option to do a local build process.

94
00:04:15,010 --> 00:04:17,870
Now there are some reasons why you wouldn't want to do this.

95
00:04:17,870 --> 00:04:21,260
Let me just give you a quick download of the different approaches.

96
00:04:21,260 --> 00:04:25,290
First, if you just have normal dependencies, you can use a local process.

97
00:04:25,290 --> 00:04:28,320
And instead of taking maybe 3 or 4 minutes to build,

98
00:04:28,320 --> 00:04:30,540
it might be done in 5 seconds.

99
00:04:30,540 --> 00:04:34,440
But if you have dependencies that have to be compiled natively,

100
00:04:34,440 --> 00:04:37,540
and you want be sure that's done in the exact same

101
00:04:37,540 --> 00:04:40,460
container as what would happen within Lambda,

102
00:04:40,460 --> 00:04:42,410
then you won't want to use the local option.

103
00:04:42,410 --> 00:04:44,650
So there's an option here where you can configure it.

104
00:04:44,650 --> 00:04:47,220
You can run through this try bundle function,

105
00:04:47,220 --> 00:04:49,280
and if it succeeds, it will just do it locally.

106
00:04:49,280 --> 00:04:52,140
If not, it will actually use the Docker image.

107
00:04:52,140 --> 00:04:54,120
Now if you're looking at this saying you know what,

108
00:04:54,120 --> 00:04:56,520
there's a lot here, but I think we can make this work,

109
00:04:56,520 --> 00:04:59,890
I want to encourage you, you actually don't have to worry about this.

110
00:04:59,890 --> 00:05:02,220
I want to make sure that you know what's happening behind the

111
00:05:02,220 --> 00:05:06,340
scenes, but the CDK has made this process even easier.

112
00:05:06,340 --> 00:05:09,460
So I'm going to scroll up back to aws‑lambda, and I'm

113
00:05:09,460 --> 00:05:13,440
going to look at aws‑lambda‑nodejs.

114
00:05:13,440 --> 00:05:16,520
Now this is another package where we have three different

115
00:05:16,520 --> 00:05:19,450
elements in the name, and that means, again, this isn't

116
00:05:19,450 --> 00:05:20,970
analogous to CloudFormation.

117
00:05:20,970 --> 00:05:24,760
This is something extra that's provided to make things easier.

118
00:05:24,760 --> 00:05:27,620
And we can see here that these CDK constructs are

119
00:05:27,620 --> 00:05:30,140
experimental. So they can change.

120
00:05:30,140 --> 00:05:33,740
However, they will make your life quite a bit easier.

121
00:05:33,740 --> 00:05:35,950
So here, if we look at this process,

122
00:05:35,950 --> 00:05:40,100
we can simply go in and define our entry point and our handler

123
00:05:40,100 --> 00:05:44,450
function, and what will happen behind the scenes is it's going to go

124
00:05:44,450 --> 00:05:47,200
through and handle that build process for us.

125
00:05:47,200 --> 00:05:49,960
It knows how to deal with package.json files. It

126
00:05:49,960 --> 00:05:51,570
knows how to compile TypeScript.

127
00:05:51,570 --> 00:05:53,910
In this case, it's going to be using Parcel for that.

128
00:05:53,910 --> 00:05:57,200
It's going to bundle together your needed dependencies and create the

129
00:05:57,200 --> 00:06:00,840
ZIP file that's needed for it to be used as an asset.

130
00:06:00,840 --> 00:06:03,930
Now there are some different configuration values that are supported.

131
00:06:03,930 --> 00:06:07,090
We can specify different environment variables for our container

132
00:06:07,090 --> 00:06:11,040
environment in the build process or specific build arguments.

133
00:06:11,040 --> 00:06:13,790
We also can go through and work with Parcel to

134
00:06:13,790 --> 00:06:16,090
configure the specifics of how it builds.

135
00:06:16,090 --> 00:06:19,230
For example, we can specify external modules.

136
00:06:19,230 --> 00:06:24,060
We would almost always want to specify the AWS SDK as an external module

137
00:06:24,060 --> 00:06:27,070
because it's going to be included within the Lambda environment,

138
00:06:27,070 --> 00:06:29,910
so we don't need to package it in with our code.

139
00:06:29,910 --> 00:06:34,210
But if you're using an external layer where you have additional dependencies,

140
00:06:34,210 --> 00:06:36,650
you want to be sure those are not included as well.

141
00:06:36,650 --> 00:06:39,040
Now we're not going to be using a layer in our case,

142
00:06:39,040 --> 00:06:44,840
so we'll just make sure that we're specifying the AWS SDK for this value.

143
00:06:44,840 --> 00:06:46,160
Now with all of this said,

144
00:06:46,160 --> 00:06:49,940
that pretty much gives us a pathway to implementing our lambda function.

145
00:06:49,940 --> 00:06:51,920
There's one other thing I want to point out.

146
00:06:51,920 --> 00:06:56,500
So I'm going to scroll to api‑gateway. And immediately, you'll

147
00:06:56,500 --> 00:06:58,810
notice that there are two different options.

148
00:06:58,810 --> 00:07:04,360
We have api‑gateway and api‑gatewayv2. Now api‑gateway

149
00:07:04,360 --> 00:07:09,530
refers to the REST‑based endpoints, and api‑gatewayv2

150
00:07:09,530 --> 00:07:12,590
refers to the HTTP API endpoints.

151
00:07:12,590 --> 00:07:16,410
Now we're going to be using the HTTP option. These are actually newer,

152
00:07:16,410 --> 00:07:19,490
and in most cases, they're going to be a little bit faster. If you don't

153
00:07:19,490 --> 00:07:24,460
need all the capabilities of the REST endpoints, the HTTP API endpoints

154
00:07:24,460 --> 00:07:26,740
would probably work really well for you.

155
00:07:26,740 --> 00:07:29,540
We can see here that the L1 constructs are stable.

156
00:07:29,540 --> 00:07:34,400
The L2 constructs for HTTP APIs are experimental, and we don't

157
00:07:34,400 --> 00:07:37,810
have any L2 constructs yet for WebSocket APIs.

158
00:07:37,810 --> 00:07:40,520
Now we're going to be using HTTP APIs, so we're not

159
00:07:40,520 --> 00:07:43,540
concerned about the WebSocket APIs right now.

160
00:07:43,540 --> 00:07:47,190
And if I scroll down a little bit here, you're going to see a great example.

161
00:07:47,190 --> 00:07:50,160
This example here is going to be very similar to what we're going to

162
00:07:50,160 --> 00:07:53,420
be doing within our API. We're going to be creating a lambda

163
00:07:53,420 --> 00:07:57,770
function. We'll then be creating a lambda proxy integration. And then

164
00:07:57,770 --> 00:08:02,370
with that, we'll create an HTTP API. And then we'll create a route

165
00:08:02,370 --> 00:08:03,950
where we specify a path,

166
00:08:03,950 --> 00:08:07,570
a method, and then we link that in with the integration. With

167
00:08:07,570 --> 00:08:09,470
all of these pieces that we've researched,

168
00:08:09,470 --> 00:08:18,000
we should be able to build out an HTTP API that we can use for our document management proof of concept.

