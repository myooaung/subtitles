WEBVTT
1
00:00:01.040 --> 00:00:05.260
So now I'm going to walk through the process of creating a Docker container.

2
00:00:05.260 --> 00:00:09.350
And ultimately, within the next clip, we'll be deploying this with the CDK.

3
00:00:09.350 --> 00:00:10.930
But here within this clip,

4
00:00:10.930 --> 00:00:14.010
we'll first be creating a directory structure for

5
00:00:14.010 --> 00:00:16.440
Docker containers within our project.

6
00:00:16.440 --> 00:00:20.740
Then, we'll be implementing a TypeScript express webserver.

7
00:00:20.740 --> 00:00:25.050
We'll then be configuring a Dockerfile and testing our container locally.

8
00:00:25.050 --> 00:00:27.240
So let's dive in.

9
00:00:27.240 --> 00:00:28.730
So I'm here within VS Code,

10
00:00:28.730 --> 00:00:31.930
and the first step is I need to create a couple of folders.

11
00:00:31.930 --> 00:00:34.090
So first, I'm going to go in and create a new folder,

12
00:00:34.090 --> 00:00:35.970
and we're going to call this containers.

13
00:00:35.970 --> 00:00:38.310
And this would be a folder where you could put any of the

14
00:00:38.310 --> 00:00:40.640
containers you would have within your application,

15
00:00:40.640 --> 00:00:42.550
and you would put each of them in their own folder.

16
00:00:42.550 --> 00:00:45.940
And so I'm going to create another folder here called webserver.

17
00:00:45.940 --> 00:00:50.840
Now here within webserver, I'm going to create a new package.json file.

18
00:00:50.840 --> 00:00:51.480
And then here,

19
00:00:51.480 --> 00:00:55.550
I'm just going to use a template to just put in a default package.json file,

20
00:00:55.550 --> 00:00:58.940
and we'll call this expressâ€‘webserver.

21
00:00:58.940 --> 00:01:04.440
I'm going to save this, and now I'm going to navigate over to the terminal.

22
00:01:04.440 --> 00:01:08.130
So here in the terminal, I'm in the base directory for my project.

23
00:01:08.130 --> 00:01:10.980
And so I want to change into the containers directory

24
00:01:10.980 --> 00:01:12.690
and then the webserver directory.

25
00:01:12.690 --> 00:01:17.140
Now the next thing I'm going to do is I need to install some dependencies.

26
00:01:17.140 --> 00:01:20.170
So here, I'm going to be installing Axios,

27
00:01:20.170 --> 00:01:22.620
and I'm going to be installing a specific version.

28
00:01:22.620 --> 00:01:24.900
So this is actually one back from the current version,

29
00:01:24.900 --> 00:01:27.250
but there is an error that happens in TypeScript

30
00:01:27.250 --> 00:01:28.850
compilation with the current version.

31
00:01:28.850 --> 00:01:30.250
So that's why I'm using this one.

32
00:01:30.250 --> 00:01:32.690
You can try out the current version when you take this course.

33
00:01:32.690 --> 00:01:36.740
But just know if you see an error when you try to compile your TypeScript files,

34
00:01:36.740 --> 00:01:38.440
this might be the cause of it.

35
00:01:38.440 --> 00:01:41.920
I'm also installing EJS, which I'll use for our view templates,

36
00:01:41.920 --> 00:01:46.540
and then Express, which we'll use as our web server.

37
00:01:46.540 --> 00:01:48.190
Now that we have that in place,

38
00:01:48.190 --> 00:01:51.140
I'm going to install some development dependencies.

39
00:01:51.140 --> 00:01:52.970
First, it's going to be TypeScript,

40
00:01:52.970 --> 00:01:57.640
and then I'm going to install the types for both Express and Node.

41
00:01:57.640 --> 00:02:02.040
Now that I have that in place, I'm going to head back over to VS Code.

42
00:02:02.040 --> 00:02:05.530
Now the next step I need to take is I need to go under my webserver directory,

43
00:02:05.530 --> 00:02:07.620
and I'm going to create a new file,

44
00:02:07.620 --> 00:02:11.010
and this is going to be tsconfig Now you might be surprised by

45
00:02:11.010 --> 00:02:13.940
this because we already have a tsconfig file.

46
00:02:13.940 --> 00:02:14.840
But just know here,

47
00:02:14.840 --> 00:02:19.100
the build process is going to take everything within our webserver directory,

48
00:02:19.100 --> 00:02:21.730
and it's going to put it onto a Docker container.

49
00:02:21.730 --> 00:02:22.210
So here,

50
00:02:22.210 --> 00:02:24.580
we can't rely on it being able to go up the directory

51
00:02:24.580 --> 00:02:26.960
structure to get to our current tsconfig file.

52
00:02:26.960 --> 00:02:29.440
It's just cleaner to include it here.

53
00:02:29.440 --> 00:02:32.440
So here, I'm going to have a base configuration,

54
00:02:32.440 --> 00:02:35.460
and this base configuration makes a few assumptions.

55
00:02:35.460 --> 00:02:35.970
First of all,

56
00:02:35.970 --> 00:02:39.420
it assumed that our TypeScript files are going to be in a src directory

57
00:02:39.420 --> 00:02:42.300
and it's going to output them to a dist directory.

58
00:02:42.300 --> 00:02:45.100
Now this is important because this will factor into our

59
00:02:45.100 --> 00:02:47.640
Dockerfile that we'll create in just a bit.

60
00:02:47.640 --> 00:02:51.090
But with this being said, I need to create a src directory.

61
00:02:51.090 --> 00:02:55.150
Now within our src directory, I'm going to create a new file,

62
00:02:55.150 --> 00:03:01.220
and it's going to be app.ts. Now here within our app.ts file, this is

63
00:03:01.220 --> 00:03:04.540
where we're going to set up our Express web server.

64
00:03:04.540 --> 00:03:08.300
So here within our app.ts file, we're currently importing

65
00:03:08.300 --> 00:03:11.550
Express, the path module from Node and Axios,

66
00:03:11.550 --> 00:03:15.640
which we'll use to make an HTTP request to our API.

67
00:03:15.640 --> 00:03:17.800
I want to call out though that we are requiring two

68
00:03:17.800 --> 00:03:19.400
different environment variables here.

69
00:03:19.400 --> 00:03:22.350
The first is SERVER_PORT, and that's going to be the port that our

70
00:03:22.350 --> 00:03:26.060
Express Server will run on, and the second is API_BASE,

71
00:03:26.060 --> 00:03:30.930
which is going to be the base URL for the HTTP API that we deployed within the

72
00:03:30.930 --> 00:03:36.240
last module. And here, we're going to use that as the base to then call the API.

73
00:03:36.240 --> 00:03:40.060
We're then creating our Express Server, and then we're specifying a views

74
00:03:40.060 --> 00:03:43.790
directory. And this is going to be directly under the webserver directory, we

75
00:03:43.790 --> 00:03:45.340
need to create a folder called views.

76
00:03:45.340 --> 00:03:47.040
So we'll do that next.

77
00:03:47.040 --> 00:03:49.940
And then we're specifying that EJS is the view engine.

78
00:03:49.940 --> 00:03:52.540
We have one route configured, and it's going to call our

79
00:03:52.540 --> 00:03:54.590
asynchronous getDocuments function,

80
00:03:54.590 --> 00:03:58.940
and that function is going to call our API and return an array of documents.

81
00:03:58.940 --> 00:04:03.440
We're then going to pass that array into our index template.

82
00:04:03.440 --> 00:04:06.080
So with that said, we need to create our index view.

83
00:04:06.080 --> 00:04:08.200
So I'm going to go under webserver, we're going to say New

84
00:04:08.200 --> 00:04:11.550
Folder, and we're going to call it views. Within views,

85
00:04:11.550 --> 00:04:16.140
we're going to create a new file, and it's going to be index.ejs.

86
00:04:16.140 --> 00:04:19.920
So here, I've got a snippet that we'll just put a very basic template in place.

87
00:04:19.920 --> 00:04:22.660
Here we have an h2 title, and then we're looping over all

88
00:04:22.660 --> 00:04:26.910
the documents in an unordered list, and we're outputting them as links.

89
00:04:26.910 --> 00:04:28.350
So now that we have this in place,

90
00:04:28.350 --> 00:04:31.240
we're ready to start looking at our Dockerfile.

91
00:04:31.240 --> 00:04:33.010
So here, I'm going to create a new file,

92
00:04:33.010 --> 00:04:38.690
and we're going to call this Dockerfile. And here within our Dockerfile,

93
00:04:38.690 --> 00:04:41.160
we're doing something called a multistage build.

94
00:04:41.160 --> 00:04:44.490
We're using one container to build our application,

95
00:04:44.490 --> 00:04:48.360
and it's going to run npm install, and then it's going to run build ts,

96
00:04:48.360 --> 00:04:50.780
and that's going to compile our TypeScript file.

97
00:04:50.780 --> 00:04:53.160
Now we need to actually implement that within our

98
00:04:53.160 --> 00:04:55.740
package.json file, so we'll do that next.

99
00:04:55.740 --> 00:04:56.360
After that,

100
00:04:56.360 --> 00:05:01.840
it's running npm prune to remove everything except our production dependencies.

101
00:05:01.840 --> 00:05:04.030
And then, we have another container, and this is

102
00:05:04.030 --> 00:05:05.900
going to be our serving container.

103
00:05:05.900 --> 00:05:08.480
And here, it's going to copy the files over from our dist

104
00:05:08.480 --> 00:05:11.550
directory, views directory, Node modules, and package.json

105
00:05:11.550 --> 00:05:13.540
file into the new container.

106
00:05:13.540 --> 00:05:16.410
And then we'll expose port 8080, and then we will

107
00:05:16.410 --> 00:05:19.320
actually run Node on our app.js file,

108
00:05:19.320 --> 00:05:22.140
which is the compiled version of our TypeScript file.

109
00:05:22.140 --> 00:05:23.530
So now that I have this in place,

110
00:05:23.530 --> 00:05:28.040
I'm going to navigate back over into my package.json file.

111
00:05:28.040 --> 00:05:31.510
So here within our scripts object, we need to add in a few things.

112
00:05:31.510 --> 00:05:34.610
First, we need to specify build ts,

113
00:05:34.610 --> 00:05:38.940
and this is what's going to be used to build our TypeScript files.

114
00:05:38.940 --> 00:05:41.700
Now we're just going to use the TypeScript compiler here, so we can

115
00:05:41.700 --> 00:05:45.080
just use tsc. But we need to add to additional things.

116
00:05:45.080 --> 00:05:49.040
We need to have the ability to both build and run our Docker container. So

117
00:05:49.040 --> 00:05:53.840
I'm going to add both of those in. So here, first to build, we're simply

118
00:05:53.840 --> 00:05:56.600
calling docker build on the current directory.

119
00:05:56.600 --> 00:05:57.940
But for docker run,

120
00:05:57.940 --> 00:06:02.280
we're telling it to bind local port 8080 to the container port 8080. We're

121
00:06:02.280 --> 00:06:07.110
then telling it to use server port 8080, and I'm passing in the current URL

122
00:06:07.110 --> 00:06:11.210
for our HTTP API. So with all of this said,

123
00:06:11.210 --> 00:06:16.170
let's go to the terminal and test out our Docker container So now I'm going

124
00:06:16.170 --> 00:06:22.740
to run npm run docker and then build. And we can see that it has built our

125
00:06:22.740 --> 00:06:28.770
container And now I'm going to do npm run docker run. And now we can see

126
00:06:28.770 --> 00:06:30.600
that it has launched our container.

127
00:06:30.600 --> 00:06:33.940
So now I'm going to navigate over to the browser.

128
00:06:33.940 --> 00:06:35.130
So here, within the browser,

129
00:06:35.130 --> 00:06:40.070
I'm going to load localhost and port 8080, and now we can see

130
00:06:40.070 --> 00:06:42.670
that it has returned a list of our documents.

131
00:06:42.670 --> 00:06:45.860
And with this I'm able to open a document in a new tab, and I

132
00:06:45.860 --> 00:06:48.720
can see that it has opened it correctly using the signed URL

133
00:06:48.720 --> 00:06:51.240
that we generated from within the API.

134
00:06:51.240 --> 00:06:58.000
Now that we have this in place, in the next clip, we're going to walk through the process of deploying it onto Fargate.

