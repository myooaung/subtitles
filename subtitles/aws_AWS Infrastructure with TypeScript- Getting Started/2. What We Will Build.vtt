WEBVTT
1
00:00:01.040 --> 00:00:02.920
Before we go too much further,

2
00:00:02.920 --> 00:00:07.220
I want to talk about what we're going to be building over this course.

3
00:00:07.220 --> 00:00:09.260
And really, even before we dive into that,

4
00:00:09.260 --> 00:00:11.520
I just want to hit some general course goals.

5
00:00:11.520 --> 00:00:15.110
I want to revisit with you some things that I believe you should be

6
00:00:15.110 --> 00:00:18.890
able to do once you get to the end of this course.

7
00:00:18.890 --> 00:00:19.510
First of all,

8
00:00:19.510 --> 00:00:26.530
you should be able to create a new TypeScript CDK application using the CDK CLI.

9
00:00:26.530 --> 00:00:26.970
And again,

10
00:00:26.970 --> 00:00:30.550
I would recommend you use the CLI to get started. Once you've used the

11
00:00:30.550 --> 00:00:32.830
CDK for a while, if you want to do it differently,

12
00:00:32.830 --> 00:00:36.090
feel free, but this is the best place to start.

13
00:00:36.090 --> 00:00:41.430
Next, you should be able to deploy your CDK application to an environment.

14
00:00:41.430 --> 00:00:41.820
And again,

15
00:00:41.820 --> 00:00:45.400
an environment is a combination of an AWS account

16
00:00:45.400 --> 00:00:47.940
and a region within that account.

17
00:00:47.940 --> 00:00:48.780
Next,

18
00:00:48.780 --> 00:00:53.020
you should be able to install and manage service‑specific packages. So

19
00:00:53.020 --> 00:00:57.370
the CDK is a collection of packages that you can utilize, and you need

20
00:00:57.370 --> 00:01:00.240
to be able to manage those effectively.

21
00:01:00.240 --> 00:01:05.740
Next, you should be able to create a Lambda‑based API using local assets.

22
00:01:05.740 --> 00:01:07.740
So let me break that down for a minute.

23
00:01:07.740 --> 00:01:08.300
So here,

24
00:01:08.300 --> 00:01:12.090
Lambda‑based, that means you're going to need to work with Lambda,

25
00:01:12.090 --> 00:01:15.960
and using local assets means you're going to actually include the

26
00:01:15.960 --> 00:01:20.180
code locally on your machine with your CDK project and use that to

27
00:01:20.180 --> 00:01:22.890
create a Lambda function in AWS.

28
00:01:22.890 --> 00:01:25.540
Also here, we're saying a Lambda‑based API.

29
00:01:25.540 --> 00:01:27.980
That means we're going to need to integrate that Lambda

30
00:01:27.980 --> 00:01:30.960
function in with API Gateway. And in this case,

31
00:01:30.960 --> 00:01:36.240
we're going to be using an HTTP API as opposed to a REST API.

32
00:01:36.240 --> 00:01:42.070
Next, you should be able to launch a Fargate‑based web server using local assets.

33
00:01:42.070 --> 00:01:43.840
So let's break this one down.

34
00:01:43.840 --> 00:01:45.750
So here, we're going to be using Fargate.

35
00:01:45.750 --> 00:01:47.460
That means we're going to be using ECS,

36
00:01:47.460 --> 00:01:51.220
but we're going to be using the variation of ECS that does not require us to

37
00:01:51.220 --> 00:01:54.960
maintain the underlying cluster that's hosting our containers.

38
00:01:54.960 --> 00:01:56.670
But here we're also saying we're going to be able to

39
00:01:56.670 --> 00:01:58.680
do this using our local assets.

40
00:01:58.680 --> 00:02:01.770
That means we're going to be building a container locally

41
00:02:01.770 --> 00:02:04.910
within our CDK application and then deploying it out to the

42
00:02:04.910 --> 00:02:07.040
Elastic Container Registry.

43
00:02:07.040 --> 00:02:07.440
Next,

44
00:02:07.440 --> 00:02:12.140
you should be able to manage both permissions and network access with the CDK.

45
00:02:12.140 --> 00:02:15.980
That means you need to be able to work with security groups and with IAM roles,

46
00:02:15.980 --> 00:02:19.940
and we're going to be covering both of those here within this course.

47
00:02:19.940 --> 00:02:22.540
Now let's talk a little bit about our use case.

48
00:02:22.540 --> 00:02:23.660
So here, as mentioned,

49
00:02:23.660 --> 00:02:26.560
we're going to be creating a proof of concept for a document

50
00:02:26.560 --> 00:02:29.650
management system. And we just need to call this out.

51
00:02:29.650 --> 00:02:32.590
My purpose with this course is to meet the goals that I just

52
00:02:32.590 --> 00:02:35.570
mentioned, not to build a full‑featured application.

53
00:02:35.570 --> 00:02:37.640
So if we were building this from scratch,

54
00:02:37.640 --> 00:02:39.640
we would go about it just a little bit differently,

55
00:02:39.640 --> 00:02:42.130
and we would start with a full architecture diagram

56
00:02:42.130 --> 00:02:43.740
and then work our way through.

57
00:02:43.740 --> 00:02:47.190
In this case though, we're going to be doing a very simplistic approach,

58
00:02:47.190 --> 00:02:49.440
and I want to cover that approach with you now.

59
00:02:49.440 --> 00:02:52.750
So here, this is our sample architecture. And first of all,

60
00:02:52.750 --> 00:02:54.890
we're going to have a single region.

61
00:02:54.890 --> 00:03:00.270
In this case, I'm going to be launching my CDK application into us‑east‑1.

62
00:03:00.270 --> 00:03:03.640
You can choose to launch yours into whatever region you want.

63
00:03:03.640 --> 00:03:07.580
Now here, I want to call out that this architecture diagram is not going to

64
00:03:07.580 --> 00:03:10.610
cover aspects of high availability or fault tolerance.

65
00:03:10.610 --> 00:03:13.370
So this is not going to get down to the detail of talking

66
00:03:13.370 --> 00:03:15.730
about different availability zones. Now,

67
00:03:15.730 --> 00:03:18.630
first of all, we're going to have an S3 bucket,

68
00:03:18.630 --> 00:03:21.730
and this is going to be the bucket where we store the documents that

69
00:03:21.730 --> 00:03:24.900
we're going to use within our document management system.

70
00:03:24.900 --> 00:03:25.810
In addition,

71
00:03:25.810 --> 00:03:30.520
we're going to have an API, and this API will be used to get a list of

72
00:03:30.520 --> 00:03:34.420
the documents that we have within that S3 bucket.

73
00:03:34.420 --> 00:03:35.200
Now in this case,

74
00:03:35.200 --> 00:03:38.410
we're going to need to tie that to some type of compute that

75
00:03:38.410 --> 00:03:40.160
will do the work for us, and in this case,

76
00:03:40.160 --> 00:03:42.240
that's going to be Lambda.

77
00:03:42.240 --> 00:03:45.060
So Lambda will be able to query that S3 bucket,

78
00:03:45.060 --> 00:03:47.780
get back a list of files, and then API Gateway will

79
00:03:47.780 --> 00:03:50.340
return it to the calling application.

80
00:03:50.340 --> 00:03:52.890
Now, in addition, we're going to create a VPC,

81
00:03:52.890 --> 00:03:56.710
or virtual private cloud, within our environment. And this is

82
00:03:56.710 --> 00:03:59.800
going to house our Fargate‑based service,

83
00:03:59.800 --> 00:04:02.160
which in this case will be a web server.

84
00:04:02.160 --> 00:04:02.970
And if you remember,

85
00:04:02.970 --> 00:04:05.830
I mentioned that we're going to build our container locally and

86
00:04:05.830 --> 00:04:09.390
upload it into the ECR, the container registry.

87
00:04:09.390 --> 00:04:11.970
And then we're going to make our Fargate‑based web server

88
00:04:11.970 --> 00:04:15.480
available through an application load balancer.

89
00:04:15.480 --> 00:04:15.870
Now,

90
00:04:15.870 --> 00:04:18.610
I just want to give you a few general notes on the approach that

91
00:04:18.610 --> 00:04:20.990
I'm going to be taking within this course.

92
00:04:20.990 --> 00:04:21.790
First of all,

93
00:04:21.790 --> 00:04:25.790
we're going to be leveraging npm for managing application dependencies.

94
00:04:25.790 --> 00:04:30.180
I know some people here are die‑hard YARN fans, and really, you can use either.

95
00:04:30.180 --> 00:04:34.470
There is no limit to saying you have to just use npm. Next,

96
00:04:34.470 --> 00:04:36.790
I'm going to be using Mac, but all concepts here

97
00:04:36.790 --> 00:04:40.340
should transfer to Windows or Linux, no matter what you're using.

98
00:04:40.340 --> 00:04:45.050
In addition, I'm going to be using Visual Studio Code as my IDE.

99
00:04:45.050 --> 00:04:46.630
Now, you can certainly use others,

100
00:04:46.630 --> 00:04:49.810
but Visual Studio Code works well with the configuration

101
00:04:49.810 --> 00:04:53.280
that is generated with the CDK CLI.

102
00:04:53.280 --> 00:04:56.030
Next, this application use case, as mentioned,

103
00:04:56.030 --> 00:05:03.000
is not designed to be a production application. It's designed to help you get familiar working with the CDK.

