WEBVTT
1
00:00:01.040 --> 00:00:03.290
Now the next thing we're going to be doing is we're going to be

2
00:00:03.290 --> 00:00:07.040
implementing IAM permissions using the CDK.

3
00:00:07.040 --> 00:00:08.390
So here within this demo,

4
00:00:08.390 --> 00:00:11.340
we'll be configuring permissions so that our lambda function

5
00:00:11.340 --> 00:00:14.260
can call in and get a list of files from S3,

6
00:00:14.260 --> 00:00:17.220
and then to enable it so that users that even don't have an AWS

7
00:00:17.220 --> 00:00:20.160
account can view the contents of those files,

8
00:00:20.160 --> 00:00:25.740
we're going to create signed S3 URLs for use within our API.

9
00:00:25.740 --> 00:00:28.810
So the first thing that we're going to need to do within this clip is

10
00:00:28.810 --> 00:00:31.150
we're going to need to install another package.

11
00:00:31.150 --> 00:00:32.160
And as you might have guessed,

12
00:00:32.160 --> 00:00:36.510
it's going to be AWS IAM because this is what we'll need to configure some

13
00:00:36.510 --> 00:00:42.740
policies that we'll be attaching to our lambda execution role.

14
00:00:42.740 --> 00:00:47.440
Now that this is installed, I'm going to jump over into VS Code.

15
00:00:47.440 --> 00:00:50.850
So here within VS Code, I'm within my lambda function,

16
00:00:50.850 --> 00:00:53.820
and the first thing I'm going to do is I'm going to pull in S3

17
00:00:53.820 --> 00:00:57.460
because we're going to be using some of the S3 API functions

18
00:00:57.460 --> 00:01:00.440
to get access into our bucket.

19
00:01:00.440 --> 00:01:02.670
So now what I'm going to do is I'm going to navigate

20
00:01:02.670 --> 00:01:05.750
down here to my return statement, and I'm actually going to highlight that,

21
00:01:05.750 --> 00:01:08.750
I'm going to remove it, and I'm going to paste in a block of code.

22
00:01:08.750 --> 00:01:11.190
Now I'm going to talk through what we're doing here.

23
00:01:11.190 --> 00:01:16.860
The first thing I want to call out is we're using the S3.listObjects method.

24
00:01:16.860 --> 00:01:17.550
Now note here,

25
00:01:17.550 --> 00:01:20.060
we're actually having it return a promise because we're using

26
00:01:20.060 --> 00:01:23.510
the async and await capabilities of Node.

27
00:01:23.510 --> 00:01:27.720
Now here within this, we're going to get back a list of objects.

28
00:01:27.720 --> 00:01:30.770
We're going to get this back as a value called results,

29
00:01:30.770 --> 00:01:35.700
and then we're going to loop over all of those using the map function,

30
00:01:35.700 --> 00:01:38.650
and we're going to generate a signed URL Now,

31
00:01:38.650 --> 00:01:41.410
we haven't written that function yet; however,

32
00:01:41.410 --> 00:01:45.800
if you notice here, we've wrapped all of this logic with a try catch block.

33
00:01:45.800 --> 00:01:50.150
Here, if things succeed, we should return a 200 status code,

34
00:01:50.150 --> 00:01:55.390
and we're going to return a list of those files using JSON.stringify

35
00:01:55.390 --> 00:01:57.740
within the body value of our return statement.

36
00:01:57.740 --> 00:02:01.460
Now if anything fails, whether it is listing the objects,

37
00:02:01.460 --> 00:02:03.500
generating a signed URL, any of that,

38
00:02:03.500 --> 00:02:06.400
we're going to get a 500 error code that's going to be returned,

39
00:02:06.400 --> 00:02:09.240
and we're going to return to the error message.

40
00:02:09.240 --> 00:02:11.010
Now the next thing I'm going to do is I'm going to go

41
00:02:11.010 --> 00:02:12.770
here below are getDocuments function,

42
00:02:12.770 --> 00:02:15.260
and we're going to have a function here that we don't export

43
00:02:15.260 --> 00:02:17.890
that's going to generate a signed URL.

44
00:02:17.890 --> 00:02:20.320
So here, we're going to be taking in that bucket name,

45
00:02:20.320 --> 00:02:21.940
we're going to be taking in the key.

46
00:02:21.940 --> 00:02:26.370
Now this gets passed in based on the results of the S3 listObjects command,

47
00:02:26.370 --> 00:02:29.240
and we're going to go through and generate a signed URL,

48
00:02:29.240 --> 00:02:32.430
and then return both the file name and that URL,

49
00:02:32.430 --> 00:02:36.030
so this should be the output of our API is an array

50
00:02:36.030 --> 00:02:37.740
of these file names and URLs.

51
00:02:37.740 --> 00:02:40.550
So now that I have this in place, I'm going to save this.

52
00:02:40.550 --> 00:02:43.450
And if you note here, there's going to be a problem.

53
00:02:43.450 --> 00:02:46.380
If we were to deploy it right now, we would get a failure.

54
00:02:46.380 --> 00:02:49.440
We would see it go and return a 500 status code,

55
00:02:49.440 --> 00:02:53.120
and we would get a error message back saying access denied because our

56
00:02:53.120 --> 00:02:57.110
lambda function doesn't have any access to list objects within our

57
00:02:57.110 --> 00:03:01.140
bucket or to go in and create a signed URL.

58
00:03:01.140 --> 00:03:05.940
So lets navigate over to our API construct.

59
00:03:05.940 --> 00:03:08.740
Now the first thing we need to do, here within our API construct,

60
00:03:08.740 --> 00:03:12.940
is we're going to need to import the AWS IAM package.

61
00:03:12.940 --> 00:03:14.510
Now the next thing we're going to do is we're going to

62
00:03:14.510 --> 00:03:17.000
go here under our lambda function,

63
00:03:17.000 --> 00:03:20.340
and we're going to define two different policies.

64
00:03:20.340 --> 00:03:24.140
So the first one is we're going to call this bucketPermissions,

65
00:03:24.140 --> 00:03:28.140
and this is going to be a new IAM.policy statement.

66
00:03:28.140 --> 00:03:28.440
Now,

67
00:03:28.440 --> 00:03:31.940
what we're going to do with this is we're going to go into bucketPermissions,

68
00:03:31.940 --> 00:03:35.640
and we're going to say that we want to add a resource,

69
00:03:35.640 --> 00:03:39.520
and in this case, we're going to tell it that we want to get the bucket.

70
00:03:39.520 --> 00:03:40.240
And in this case,

71
00:03:40.240 --> 00:03:43.440
we're going to tell it that we want our bucket out of our props object,

72
00:03:43.440 --> 00:03:46.340
and we want to get the bucketArn.

73
00:03:46.340 --> 00:03:48.410
And in this case, we're going to actually specify,

74
00:03:48.410 --> 00:03:49.630
in addition to the ARN,

75
00:03:49.630 --> 00:03:52.630
that we're concerned here with everything that is in the bucket,

76
00:03:52.630 --> 00:03:55.140
as opposed to the bucket itself.

77
00:03:55.140 --> 00:04:00.440
Now the next thing we need to do is we need to then go in and add an action.

78
00:04:00.440 --> 00:04:03.340
And here we're going to add in two different actions.

79
00:04:03.340 --> 00:04:08.800
The first is going to be S3:GetObject, and the next is going to be S3:PutObject,

80
00:04:08.800 --> 00:04:12.530
which is going to be needed to generate those side URLs.

81
00:04:12.530 --> 00:04:16.240
Once we have this in place, we can now go to our lambda function,

82
00:04:16.240 --> 00:04:21.740
and we're going to use a function here that is addToRolePolicy,

83
00:04:21.740 --> 00:04:25.280
and this is going to give our lambda function the ability to do

84
00:04:25.280 --> 00:04:28.640
whatever is specified in the policy that we're passing in.

85
00:04:28.640 --> 00:04:33.130
Now I'm going to copy this, and we're going to paste it again.

86
00:04:33.130 --> 00:04:35.730
So now we need to do the bucketContainerPermissions.

87
00:04:35.730 --> 00:04:37.950
And so here we're going to be looking at the bucket itself,

88
00:04:37.950 --> 00:04:41.140
as opposed to what is actually in the bucket.

89
00:04:41.140 --> 00:04:44.940
Now I'm going to go through and update all of these values,

90
00:04:44.940 --> 00:04:49.640
and in this case, we just need the bucketArn itself,

91
00:04:49.640 --> 00:04:51.200
and for our actions here,

92
00:04:51.200 --> 00:04:56.740
we're going to be concerned with S3 and then ListBucket.

93
00:04:56.740 --> 00:04:58.120
And now you can see we've added these

94
00:04:58.120 --> 00:05:02.090
bucketContainerPermissions into our lambda function as well.

95
00:05:02.090 --> 00:05:03.750
So now if I save,

96
00:05:03.750 --> 00:05:07.720
I should now be able to go to the terminal and deploy the application.

97
00:05:07.720 --> 00:05:11.040
So I'm going to run cdk deploy,

98
00:05:11.040 --> 00:05:13.800
and we should know what's going to happen here, and that is

99
00:05:13.800 --> 00:05:16.300
we should get a warning letting us know that we have made

100
00:05:16.300 --> 00:05:19.940
securityâ€‘related changes with IAM.

101
00:05:19.940 --> 00:05:22.310
And here you can see that that has been specified.

102
00:05:22.310 --> 00:05:25.290
We can see for our bucket, we have a ListBucket action,

103
00:05:25.290 --> 00:05:27.050
and for the contents of our bucket,

104
00:05:27.050 --> 00:05:29.910
we have GetObject and PutObject, and that's exactly what we want.

105
00:05:29.910 --> 00:05:31.140
So we're going to say that yes,

106
00:05:31.140 --> 00:05:36.490
we want to deploy these changes. Now that the deployment has completed,

107
00:05:36.490 --> 00:05:39.340
let's navigate over to the browser.

108
00:05:39.340 --> 00:05:40.060
So from here,

109
00:05:40.060 --> 00:05:43.070
I'm going to go into Lambda, and you're going to notice

110
00:05:43.070 --> 00:05:45.990
something here, we now have another lambda function.

111
00:05:45.990 --> 00:05:48.120
So this lambda function is what actually manages

112
00:05:48.120 --> 00:05:52.100
that S3 bucket deployment for us, so we don't have to worry with it.

113
00:05:52.100 --> 00:05:54.480
You'll notice here that it is a Python function.

114
00:05:54.480 --> 00:05:55.090
But in this case,

115
00:05:55.090 --> 00:05:59.340
we're going to click on our Node.js function for our document management API.

116
00:05:59.340 --> 00:06:03.740
And from here, I should be able to just hit Test and run the test event,

117
00:06:03.740 --> 00:06:06.830
and I should be able to expand this and see that this has succeeded.

118
00:06:06.830 --> 00:06:07.490
First of all,

119
00:06:07.490 --> 00:06:10.980
we get back a file name with document1.pdf, and then you can see

120
00:06:10.980 --> 00:06:13.080
we have a pretty long URL that's included here.

121
00:06:13.080 --> 00:06:17.180
So I'm going to see if I can actually scroll down and capture this entire URL.

122
00:06:17.180 --> 00:06:20.540
And in this case, that's going to end right about here.

123
00:06:20.540 --> 00:06:22.860
So if I actually copy this, and then I open a new tab

124
00:06:22.860 --> 00:06:25.040
in the browser, and I paste this in,

125
00:06:25.040 --> 00:06:28.220
I'm going to be able to see the first test document in the list.

126
00:06:28.220 --> 00:06:28.550
Now again,

127
00:06:28.550 --> 00:06:32.000
it's important to note here this bucket is not publicly available, so we

128
00:06:32.000 --> 00:06:39.000
have successfully configured permissions to allow the lambda function to create a signed URL for this document.

