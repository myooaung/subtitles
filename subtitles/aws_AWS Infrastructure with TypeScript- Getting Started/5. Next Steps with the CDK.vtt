WEBVTT
1
00:00:01.040 --> 00:00:04.710
So now we're ready to talk about next steps with the CDK,

2
00:00:04.710 --> 00:00:06.210
but before we do,

3
00:00:06.210 --> 00:00:11.040
let's quickly review what we have been able to cover within this course.

4
00:00:11.040 --> 00:00:15.530
First of all, we created a new CDK project using the CLI,

5
00:00:15.530 --> 00:00:18.550
and you got to see the entire life of that project,

6
00:00:18.550 --> 00:00:22.290
starting off with just the template and moving through what we have now.

7
00:00:22.290 --> 00:00:26.510
And as a part of that, we reviewed the entire CDK lifecycle,

8
00:00:26.510 --> 00:00:29.000
all the way from init with a new project,

9
00:00:29.000 --> 00:00:31.140
to going through and bootstrapping in environment,

10
00:00:31.140 --> 00:00:33.840
to synthesizing CloudFormation templates deploying,

11
00:00:33.840 --> 00:00:36.450
and then updating, doing a diff, and then redeploying,

12
00:00:36.450 --> 00:00:38.850
we went through all of those different steps.

13
00:00:38.850 --> 00:00:43.550
We also examined best practices for managing deployed CDK stacks,

14
00:00:43.550 --> 00:00:48.340
and we talked about concepts like how to tag your resources for cost allocation.

15
00:00:48.340 --> 00:00:54.030
We then deployed an API using Lambda, API Gateway and S3. And then within

16
00:00:54.030 --> 00:00:58.040
this module, we deployed a loadâ€‘balanced Fargate service.

17
00:00:58.040 --> 00:00:59.500
So where do you go from here?

18
00:00:59.500 --> 00:01:03.330
Well, with this, with the skills you already have from this course,

19
00:01:03.330 --> 00:01:07.230
you'll be able to build out quite a bit, but there are still some more things

20
00:01:07.230 --> 00:01:11.810
that you can learn, concepts like multiple environments.

21
00:01:11.810 --> 00:01:13.890
So generally when you're building an application,

22
00:01:13.890 --> 00:01:16.700
you'll have development, and staging, and maybe testing

23
00:01:16.700 --> 00:01:19.040
environments, as well as production.

24
00:01:19.040 --> 00:01:23.520
Also, you will need to have the ability to manage multiple stacks.

25
00:01:23.520 --> 00:01:26.250
Some applications exist within a single stack,

26
00:01:26.250 --> 00:01:29.080
but there are a lot of different ways you can approach multiple stacks,

27
00:01:29.080 --> 00:01:31.740
and there's a lot of reasons why you would want to do that.

28
00:01:31.740 --> 00:01:34.950
Also, we have the concept of continuous delivery,

29
00:01:34.950 --> 00:01:38.870
so integrating in your CDK application with a repository,

30
00:01:38.870 --> 00:01:41.200
and then having that repository build and deploy your

31
00:01:41.200 --> 00:01:43.740
changes automatically on commit.

32
00:01:43.740 --> 00:01:46.740
We also have one of the biggest benefits of the CDK,

33
00:01:46.740 --> 00:01:50.640
which is the ability to create reusable constructs.

34
00:01:50.640 --> 00:01:54.780
And we even have the ability within the CDK to enforce aspects of

35
00:01:54.780 --> 00:01:58.140
security before we deploy our applications.

36
00:01:58.140 --> 00:01:59.320
So here's the great news.

37
00:01:59.320 --> 00:02:03.750
We have one more course in this path, and it's going to cover all of these items,

38
00:02:03.750 --> 00:02:13.000
so I encourage you, dive into the third course as well, and you'll be able to build just about anything you can imagine with the AWS CDK.

