WEBVTT
1
00:00:01.040 --> 00:00:07.000
So next we're going to walk through the process of adding tags for a CDK stack.

2
00:00:07.000 --> 00:00:08.930
Now if you don't have familiarity with tags,

3
00:00:08.930 --> 00:00:09.890
and to be honest,

4
00:00:09.890 --> 00:00:12.600
I've worked with people who have spent years in AWS

5
00:00:12.600 --> 00:00:17.430
and have never worked with tags, but tags are just customer‑defined metadata,

6
00:00:17.430 --> 00:00:20.100
and you can use it for a lot of different things with

7
00:00:20.100 --> 00:00:21.750
everything from cost allocation,

8
00:00:21.750 --> 00:00:23.960
which is really the example we're going to be using

9
00:00:23.960 --> 00:00:26.330
here within this particular use case.

10
00:00:26.330 --> 00:00:28.700
But you also can use it for resource grouping,

11
00:00:28.700 --> 00:00:33.240
for access control, so tags can work directly with IAM,

12
00:00:33.240 --> 00:00:35.620
for a lot of services, not all services.

13
00:00:35.620 --> 00:00:38.490
Some of them don't support it, but for a lot of them, you can.

14
00:00:38.490 --> 00:00:41.780
You also can use it for automation and for operations support.

15
00:00:41.780 --> 00:00:44.160
So as an example within Systems Manager,

16
00:00:44.160 --> 00:00:48.740
you can have it take action on all EC2 instances that have a specific tag.

17
00:00:48.740 --> 00:00:53.000
So there really are almost endless ways that you can use tags within AWS,

18
00:00:53.000 --> 00:00:57.920
and the CDK provides this ability for us to add in tags to multiple resources.

19
00:00:57.920 --> 00:00:59.940
So here within this demo,

20
00:00:59.940 --> 00:01:04.550
we're first going to be applying tags to our custom CDK stack.

21
00:01:04.550 --> 00:01:07.240
So we're going to look to apply it to everything as a whole.

22
00:01:07.240 --> 00:01:10.930
But then we're also going to look at how we can apply tags for specific

23
00:01:10.930 --> 00:01:14.910
modules within our CDK stack because in most cases we'll want to have

24
00:01:14.910 --> 00:01:17.620
some division beyond just the application.

25
00:01:17.620 --> 00:01:19.070
And once we have this in place,

26
00:01:19.070 --> 00:01:21.880
we're going to deploy and verify the tags that we've

27
00:01:21.880 --> 00:01:24.380
added within our CDK application.

28
00:01:24.380 --> 00:01:26.490
So let's dive in.

29
00:01:26.490 --> 00:01:30.620
So I'm here within VS Code, and I have my stack pulled up,

30
00:01:30.620 --> 00:01:34.650
and I want to go through the process here of adding in the tags as mentioned.

31
00:01:34.650 --> 00:01:40.250
Now I want to start off with a couple of tags that will apply to everything.

32
00:01:40.250 --> 00:01:43.740
So to do this, I'm not going to stay here within my stack.

33
00:01:43.740 --> 00:01:48.760
I'm going to go up in my BIN directory to my typescript‑cdk.ts file.

34
00:01:48.760 --> 00:01:52.430
Now here you can see that this is where we actually define our stack,

35
00:01:52.430 --> 00:01:54.760
and we attach it to our application.

36
00:01:54.760 --> 00:01:58.160
And I'm going to go ahead and change one thing on this.

37
00:01:58.160 --> 00:02:01.180
I'm going to go ahead and give this a variable name,

38
00:02:01.180 --> 00:02:06.300
and now we're going to utilize the tags feature that is a part of the CDK core.

39
00:02:06.300 --> 00:02:10.290
So I'm going to type in Tags, and I can see here if I now hit Enter,

40
00:02:10.290 --> 00:02:12.080
we're going to have that imported for us.

41
00:02:12.080 --> 00:02:16.790
And as you can see, that is from the aws‑cdk/core package.

42
00:02:16.790 --> 00:02:19.540
Then I'm going to type in of.

43
00:02:19.540 --> 00:02:21.930
Now what this is going to allow us to do is it's going

44
00:02:21.930 --> 00:02:24.990
to allow us to specify a construct.

45
00:02:24.990 --> 00:02:28.560
And if you remember, a stack here is also a type of construct.

46
00:02:28.560 --> 00:02:31.840
So we're going to say Tags.of(stack),

47
00:02:31.840 --> 00:02:34.880
and then we're going to specify the tag that we want to add.

48
00:02:34.880 --> 00:02:39.830
So we'll say here add, and then we need to pass in a key and a value.

49
00:02:39.830 --> 00:02:43.600
So in this case, I'm going to have a key here be App,

50
00:02:43.600 --> 00:02:48.540
and the value is going to be DocumentManagement.

51
00:02:48.540 --> 00:02:52.320
Now the next thing I'm going to do is I'm going to copy this line,

52
00:02:52.320 --> 00:02:56.700
and we'll just paste it below, and we'll call this Environment.

53
00:02:56.700 --> 00:03:01.450
And then we'll change this to be Development.

54
00:03:01.450 --> 00:03:04.620
So now we've added in these two tags.

55
00:03:04.620 --> 00:03:06.990
Now I want to add in a third tag.

56
00:03:06.990 --> 00:03:12.830
And here I want this to apply just to the networking components within my stack.

57
00:03:12.830 --> 00:03:17.400
So we're going to call this module, and we're going to say networking.

58
00:03:17.400 --> 00:03:21.930
Now here we could utilize some of the additional properties that we

59
00:03:21.930 --> 00:03:24.960
can pass in when we're tagging our resources.

60
00:03:24.960 --> 00:03:28.850
So here we have one that is includeResourceTypes,

61
00:03:28.850 --> 00:03:33.100
and this allows us to pass in on array of resource types.

62
00:03:33.100 --> 00:03:37.240
And so if you happen to know here the cloud formation type

63
00:03:37.240 --> 00:03:40.010
for the different types of resources, you could pass them in here,

64
00:03:40.010 --> 00:03:43.210
and what it would do is it would look over all of

65
00:03:43.210 --> 00:03:44.660
the resources within the stack,

66
00:03:44.660 --> 00:03:48.330
and if they're identifier types or equal to what you pass in here,

67
00:03:48.330 --> 00:03:49.370
then it will tag them.

68
00:03:49.370 --> 00:03:50.830
And if it doesn't, it won't.

69
00:03:50.830 --> 00:03:52.670
Now you also can do the opposite.

70
00:03:52.670 --> 00:03:56.110
We can go through and we can say we want to exclude resource types.

71
00:03:56.110 --> 00:03:57.390
So if you know, for example,

72
00:03:57.390 --> 00:04:00.800
that we want to tag everything except for our S3 bucket,

73
00:04:00.800 --> 00:04:04.280
we could place the identifier for the S3 bucket in here.

74
00:04:04.280 --> 00:04:08.480
However, there's actually an easier way to accomplish this.

75
00:04:08.480 --> 00:04:09.380
So in this case,

76
00:04:09.380 --> 00:04:12.580
I'm going to go through and just delete all of this and we're

77
00:04:12.580 --> 00:04:16.440
going to navigate now over into our stack file.

78
00:04:16.440 --> 00:04:18.230
So I'm here within my stack file,

79
00:04:18.230 --> 00:04:22.640
and here I'm going to give our networking stack a variable name.

80
00:04:22.640 --> 00:04:24.170
And what I'm going to do here is we're going to go

81
00:04:24.170 --> 00:04:26.670
through and do just what we did previously.

82
00:04:26.670 --> 00:04:31.100
We're going to say Tags.of, and then we'll pass in our networkingStack.

83
00:04:31.100 --> 00:04:32.750
And then we're going to do add.

84
00:04:32.750 --> 00:04:36.340
Now because our networkingStack is a kind of construct,

85
00:04:36.340 --> 00:04:40.140
we can choose to add tags just to the resources that are

86
00:04:40.140 --> 00:04:42.520
included within this particular stack.

87
00:04:42.520 --> 00:04:45.720
So here we'll be able to go in and specify Module,

88
00:04:45.720 --> 00:04:49.350
and then we'll be able to go in a specify Networking.

89
00:04:49.350 --> 00:04:52.400
Now we don't need to at this point go in and use any of the

90
00:04:52.400 --> 00:04:56.450
include or exclude because we're choosing to change the scope

91
00:04:56.450 --> 00:04:58.070
that we're applying the tags on.

92
00:04:58.070 --> 00:04:59.970
This way is generally easier.

93
00:04:59.970 --> 00:05:01.770
You certainly can use the others,

94
00:05:01.770 --> 00:05:04.290
but you have to know the specific CloudFormation

95
00:05:04.290 --> 00:05:06.750
identifiers for each of the types you're using.

96
00:05:06.750 --> 00:05:08.470
But if you're not familiar with those,

97
00:05:08.470 --> 00:05:11.850
you can go in and see the list of those within your

98
00:05:11.850 --> 00:05:14.540
CloudFormation console in the browser.

99
00:05:14.540 --> 00:05:16.880
So now I'm going to go ahead and save this.

100
00:05:16.880 --> 00:05:19.430
And now I'm going to go over to the terminal.

101
00:05:19.430 --> 00:05:21.840
From here within the terminal,

102
00:05:21.840 --> 00:05:25.260
I'm now going to go in and I'm going to type cdk and diff.

103
00:05:25.260 --> 00:05:27.910
And this will allow us to see the changes that

104
00:05:27.910 --> 00:05:31.740
we've implemented with these tags.

105
00:05:31.740 --> 00:05:33.330
And there's a long list here.

106
00:05:33.330 --> 00:05:34.600
We'll just look at the bottom one.

107
00:05:34.600 --> 00:05:37.510
We can see here that we are adding in additional

108
00:05:37.510 --> 00:05:40.670
tags that weren't there previously, including our App,

109
00:05:40.670 --> 00:05:43.110
Environment, and Module tags.

110
00:05:43.110 --> 00:05:50.040
So now that we have this in place, I'm going to go ahead and run cdk deploy.

111
00:05:50.040 --> 00:05:54.540
Now that we've deployed those changes, I'm now going to go over to the console.

112
00:05:54.540 --> 00:05:55.850
So here within the console,

113
00:05:55.850 --> 00:06:00.990
I'm going to navigate under Resource Groups to Tag Editor.

114
00:06:00.990 --> 00:06:04.590
Now, within here, I'm going to be sure that the us‑east‑1 region is selected,

115
00:06:04.590 --> 00:06:08.840
which it is, and then I'm going to have it select all resource types.

116
00:06:08.840 --> 00:06:11.640
And now I'm going to go in and say I want to find

117
00:06:11.640 --> 00:06:16.320
everything that has a module tag, irrespective of what the value of that tag is.

118
00:06:16.320 --> 00:06:18.700
And now I'm going to hit Search resources.

119
00:06:18.700 --> 00:06:22.460
And we can see here that it returns 12 different resources.

120
00:06:22.460 --> 00:06:24.750
So with one line in our code,

121
00:06:24.750 --> 00:06:34.000
we have been able to specify tags for all of the different resources that are created with our L2 VPC construct.

