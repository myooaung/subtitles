WEBVTT
1
00:00:01.000 --> 00:00:03.000
- [Instructor] Dependency Scope is a topic

2
00:00:03.000 --> 00:00:06.050
that every developer using Maven must understand

3
00:00:06.050 --> 00:00:10.070
to prevent issues with the way that artifacts are packaged

4
00:00:10.070 --> 00:00:16.000
and as such we will spend some time here talking about Scope

5
00:00:16.000 --> 00:00:19.050
The first Scope that we will talk about is Compile Scope.

6
00:00:19.050 --> 00:00:21.070
The Compile Scope is the default scope

7
00:00:21.070 --> 00:00:25.080
for all dependencies if not otherwise specified.

8
00:00:25.080 --> 00:00:28.080
As such, if you do not specify Scope,

9
00:00:28.080 --> 00:00:32.010
the dependency will always be compile.

10
00:00:32.010 --> 00:00:34.060
The compile dependency is always available

11
00:00:34.060 --> 00:00:38.050
in all ClassPath loaders that the artifact is in

12
00:00:38.050 --> 00:00:40.010
or that it goes through.

13
00:00:40.010 --> 00:00:42.040
All of your tests whether it's test compile,

14
00:00:42.040 --> 00:00:46.010
test execution, compilation, runtime,

15
00:00:46.010 --> 00:00:47.040
all of those class letters,

16
00:00:47.040 --> 00:00:51.030
the compile skill participates in.

17
00:00:51.030 --> 00:00:54.070
It is also propagated to other dependency trees

18
00:00:54.070 --> 00:00:58.080
when the artifact specifying it as a dependency

19
00:00:58.080 --> 00:01:00.060
in another artifact.

20
00:01:00.060 --> 00:01:03.070
This is called a transit of dependency.

21
00:01:03.070 --> 00:01:07.010
And by far this is the most common dependency type

22
00:01:07.010 --> 00:01:09.000
that you will deal with.

23
00:01:09.000 --> 00:01:12.010
Now provided dependencies are a special case

24
00:01:12.010 --> 00:01:16.030
that we see usually in Enterprise scenarios.

25
00:01:16.030 --> 00:01:18.090
For the perspective of the artifact itself,

26
00:01:18.090 --> 00:01:21.070
the dependency is similar to compile.

27
00:01:21.070 --> 00:01:24.080
However, it is in packaging and operations

28
00:01:24.080 --> 00:01:27.020
where we see the difference.

29
00:01:27.020 --> 00:01:29.030
When the artifact is packaged,

30
00:01:29.030 --> 00:01:33.080
we will not see the provided dependency in say the war

31
00:01:33.080 --> 00:01:38.000
but instead are expecting the application server

32
00:01:38.000 --> 00:01:42.040
or a runtime to provide the dependency for us,

33
00:01:42.040 --> 00:01:45.000
hence provided skill.

34
00:01:45.000 --> 00:01:47.090
We will only see the dependency on the runtime

35
00:01:47.090 --> 00:01:50.000
and test ClassPath.

36
00:01:50.000 --> 00:01:52.090
Because of the nature of cloud computing,

37
00:01:52.090 --> 00:01:56.080
we don't usually see this in cloud native applications

38
00:01:56.080 --> 00:02:00.000
because it violates the 12-factor principle

39
00:02:00.000 --> 00:02:04.090
but we do see it in large-scale Enterprise deployments

40
00:02:04.090 --> 00:02:10.010
where the application servers provides jars to the runtime.

41
00:02:10.010 --> 00:02:14.000
These dependencies are not transitive.

42
00:02:14.000 --> 00:02:16.060
Runtime dependencies are useful

43
00:02:16.060 --> 00:02:20.070
when you have multiple implementations of an API.

44
00:02:20.070 --> 00:02:25.050
The runtime dependency is only needed for execution.

45
00:02:25.050 --> 00:02:28.060
They are not needed for compilation.

46
00:02:28.060 --> 00:02:32.030
These are only seen in the runtime and test classpaths

47
00:02:32.030 --> 00:02:35.070
when the code is actually executed.

48
00:02:35.070 --> 00:02:38.050
Test Scope dependencies are useful

49
00:02:38.050 --> 00:02:41.060
to reduce the size of the artifact.

50
00:02:41.060 --> 00:02:46.020
These are the artifacts that are only needed for testing.

51
00:02:46.020 --> 00:02:49.070
As they are only available during test compilation

52
00:02:49.070 --> 00:02:52.040
and test execution.

53
00:02:52.040 --> 00:02:55.040
Most of your testing and marking frameworks

54
00:02:55.040 --> 00:02:58.040
are specified as test dependencies

55
00:02:58.040 --> 00:03:01.030
and if you're not specifying 'em as such,

56
00:03:01.030 --> 00:03:04.070
you might want to reconsider what you are doing.

57
00:03:04.070 --> 00:03:06.090
These are not transitive

58
00:03:06.090 --> 00:03:09.040
as they should never reconsider part

59
00:03:09.040 --> 00:03:11.050
of the final project.

60
00:03:11.050 --> 00:03:13.030
Now there are a couple other scopes

61
00:03:13.030 --> 00:03:15.090
but they are much less common.

62
00:03:15.090 --> 00:03:18.020
The first is System Scope

63
00:03:18.020 --> 00:03:20.050
and this is similar to provided,

64
00:03:20.050 --> 00:03:24.050
only you have to specify the location on the system

65
00:03:24.050 --> 00:03:29.000
where the jar is because it's not provided by the container.

66
00:03:29.000 --> 00:03:32.060
Import Scope only applies to POM files

67
00:03:32.060 --> 00:03:35.040
when using them for dependency management

68
00:03:35.040 --> 00:03:38.040
outside the context of the parent POM.

69
00:03:38.040 --> 00:03:41.020
The most clear example that I can think of is this,

70
00:03:41.020 --> 00:03:44.020
is the way that you'd reference the spring platform

71
00:03:44.020 --> 00:03:47.050
if you just want to use it for dependency management

72
00:03:47.050 --> 00:03:50.060
but not as part of your parent POM.

73
00:03:50.060 --> 00:03:53.020
That's really a high-level run down of scopes.

74
00:03:53.020 --> 00:03:56.080
Of course the Maven documentation on the Maven website

75
00:03:56.080 --> 00:03:59.030
is infinitely more descriptive

76
00:03:59.030 --> 00:04:03.000
of all of the nuances of these scopes.

