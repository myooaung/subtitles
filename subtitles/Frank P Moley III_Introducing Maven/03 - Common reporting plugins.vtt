WEBVTT
1
00:00:01.010 --> 00:00:01.090
- [Instructor] Now much like we did

2
00:00:01.090 --> 00:00:04.010
for the build plugins I want to walk through

3
00:00:04.010 --> 00:00:07.050
some of the most common reports that you may want to consider

4
00:00:07.050 --> 00:00:11.000
when you are deciding how to build your Maven site.

5
00:00:11.000 --> 00:00:12.070
Let's jump back into our web browser

6
00:00:12.070 --> 00:00:16.090
on Maven.Apache.org and we're going to scroll down on the left

7
00:00:16.090 --> 00:00:21.040
to our plugin section.

8
00:00:21.040 --> 00:00:24.070
And then we're going to scroll down to the reporting section.

9
00:00:24.070 --> 00:00:26.010
And the first one that I want to talk about

10
00:00:26.010 --> 00:00:28.030
is this Changelog report.

11
00:00:28.030 --> 00:00:31.080
If you are using SCM and you should be,

12
00:00:31.080 --> 00:00:34.060
the Changelog plugin gives you everything

13
00:00:34.060 --> 00:00:36.050
that you need to know about what changes

14
00:00:36.050 --> 00:00:38.070
are included in your build.

15
00:00:38.070 --> 00:00:42.010
Now if you're doing true CICD where every commit

16
00:00:42.010 --> 00:00:44.080
to master becomes a build,

17
00:00:44.080 --> 00:00:47.060
this is a little bit less valuable.

18
00:00:47.060 --> 00:00:50.070
But if you are aggregating multiple changes

19
00:00:50.070 --> 00:00:54.010
into a single build this becomes invaluable

20
00:00:54.010 --> 00:00:57.040
because you need to know what's in every release.

21
00:00:57.040 --> 00:01:00.050
And you may be doing nightly builds on a CICD

22
00:01:00.050 --> 00:01:04.000
or per commit builds, but you want to still have

23
00:01:04.000 --> 00:01:07.080
this aggregation function for your consistent releases.

24
00:01:07.080 --> 00:01:10.010
This gives you a way to do that.

25
00:01:10.010 --> 00:01:12.040
Once again on the usage page it'll tell you

26
00:01:12.040 --> 00:01:14.090
what you need to do to get this running

27
00:01:14.090 --> 00:01:16.060
but one thing to note is that you have

28
00:01:16.060 --> 00:01:19.070
to actually configure your SCM and your POM.

29
00:01:19.070 --> 00:01:21.080
And that's not something we've done to date

30
00:01:21.080 --> 00:01:24.030
in this course because I didn't want to bring SCM

31
00:01:24.030 --> 00:01:25.070
into the picture.

32
00:01:25.070 --> 00:01:28.050
It's not very hard to do and if you're using Git

33
00:01:28.050 --> 00:01:31.040
it's really very easy to set this up.

34
00:01:31.040 --> 00:01:34.010
And really if you're using SVN it's not very hard either.

35
00:01:34.010 --> 00:01:37.040
In fact the example here is using SVN.

36
00:01:37.040 --> 00:01:39.020
But again this Changelog report

37
00:01:39.020 --> 00:01:41.090
is very, very powerful and they give you

38
00:01:41.090 --> 00:01:48.020
an example of what one would look like here on the page.

39
00:01:48.020 --> 00:01:49.070
The next one that I want to jump into

40
00:01:49.070 --> 00:01:51.090
is the Checkstyle report.

41
00:01:51.090 --> 00:01:53.070
Now the Checkstyle report can be both

42
00:01:53.070 --> 00:01:57.020
a build plugin and a reporting plugin.

43
00:01:57.020 --> 00:01:59.060
And this is something that can be very valuable

44
00:01:59.060 --> 00:02:03.010
to a team that wants to have consistent code

45
00:02:03.010 --> 00:02:05.060
across all of its projects.

46
00:02:05.060 --> 00:02:08.090
The Checkstyle report allows you to create rules

47
00:02:08.090 --> 00:02:12.000
that you can then check your code against.

48
00:02:12.000 --> 00:02:14.010
And this is all documented fairly well both

49
00:02:14.010 --> 00:02:18.010
on the usage page as well as the examples pages

50
00:02:18.010 --> 00:02:21.040
on how to actually get your Checkstyle to run

51
00:02:21.040 --> 00:02:24.010
and generate a report that can then be used

52
00:02:24.010 --> 00:02:26.080
to ensure that your developers are conforming

53
00:02:26.080 --> 00:02:30.000
to your code standards that you have applied across

54
00:02:30.000 --> 00:02:32.070
your entire organization.

55
00:02:32.070 --> 00:02:34.060
What you'll see here is that it can be run

56
00:02:34.060 --> 00:02:37.040
as a stand alone report or as part of your build

57
00:02:37.040 --> 00:02:39.030
and published through your site.

58
00:02:39.030 --> 00:02:40.080
I actually would recommend keeping

59
00:02:40.080 --> 00:02:42.080
it with your site documentation

60
00:02:42.080 --> 00:02:49.020
but you can do both if you choose to.

61
00:02:49.020 --> 00:02:50.050
The next one that I want to bring up

62
00:02:50.050 --> 00:02:52.060
is the Javadoc report.

63
00:02:52.060 --> 00:02:55.060
And much like Checkstyle this can be run both in

64
00:02:55.060 --> 00:02:57.020
and out of the report section.

65
00:02:57.020 --> 00:03:00.080
So it can be a build plugin or a report plugin.

66
00:03:00.080 --> 00:03:03.050
Of all of the report plugins themselves

67
00:03:03.050 --> 00:03:07.040
the Javadoc maybe the single most useful report

68
00:03:07.040 --> 00:03:09.040
for other developers.

69
00:03:09.040 --> 00:03:11.030
As you might imagine this is going to take

70
00:03:11.030 --> 00:03:15.010
and generate all of the Javadoc from your source code

71
00:03:15.010 --> 00:03:19.020
and publish it through that very standard Javadoc process

72
00:03:19.020 --> 00:03:23.070
into a report that can then be consumed by other developers

73
00:03:23.070 --> 00:03:25.040
within the organization.

74
00:03:25.040 --> 00:03:28.090
Or if you expose your Maven site outside your organization

75
00:03:28.090 --> 00:03:31.080
they would of course have your Javadoc as well.

76
00:03:31.080 --> 00:03:34.070
The usage here documents not only how

77
00:03:34.070 --> 00:03:37.040
to configure this report but of course how

78
00:03:37.040 --> 00:03:40.070
to customize it over on the left side in the examples.

79
00:03:40.070 --> 00:03:43.060
Because Javadoc is nothing more than HTML

80
00:03:43.060 --> 00:03:46.090
and of course you can customize that as well.

81
00:03:46.090 --> 00:03:50.080
Again, this Javadoc is a very, very powerful tool.

82
00:03:50.080 --> 00:03:53.000
I actually recommend doing two things.

83
00:03:53.000 --> 00:03:56.030
One, generate your Javadoc as a JAR file

84
00:03:56.030 --> 00:03:58.040
that can be deployed and you could do that

85
00:03:58.040 --> 00:04:00.040
with a Javadoc plugin.

86
00:04:00.040 --> 00:04:02.000
That way when you deploy your code

87
00:04:02.000 --> 00:04:04.070
to your Maven repository other developers

88
00:04:04.070 --> 00:04:06.090
can actually download your Javadoc straight

89
00:04:06.090 --> 00:04:10.030
into their IDEs and they will get the Javadoc statement

90
00:04:10.030 --> 00:04:12.070
to show up in the IDE itself.

91
00:04:12.070 --> 00:04:14.070
The other thing that I recommend you do is always publish

92
00:04:14.070 --> 00:04:16.090
it to your site that way someone can read

93
00:04:16.090 --> 00:04:19.010
the Javadoc if they want to and they don't have

94
00:04:19.010 --> 00:04:23.060
to actually download it into their IDE.

95
00:04:23.060 --> 00:04:25.090
Now the final report that we're going to talk about

96
00:04:25.090 --> 00:04:28.090
we've actually already seen and that's the Surefire report.

97
00:04:28.090 --> 00:04:30.060
Next to the Javadoc report I believe

98
00:04:30.060 --> 00:04:33.060
that this is the second most important report

99
00:04:33.060 --> 00:04:36.010
that you can put into your Maven site.

100
00:04:36.010 --> 00:04:39.010
Because this gives your upper level management

101
00:04:39.010 --> 00:04:40.060
some sort of a comfort factor

102
00:04:40.060 --> 00:04:42.060
that you're actually running tests.

103
00:04:42.060 --> 00:04:45.070
And running tests is of course a very important thing

104
00:04:45.070 --> 00:04:48.010
in a software development life cycle.

105
00:04:48.010 --> 00:04:50.020
So this Surefire report not only lets people know

106
00:04:50.020 --> 00:04:52.000
that you're running tests but lets you know

107
00:04:52.000 --> 00:04:53.060
what your coverage looks like

108
00:04:53.060 --> 00:04:55.080
as well as how you're testing it.

109
00:04:55.080 --> 00:04:58.010
Because in reality the best way to figure out

110
00:04:58.010 --> 00:05:00.070
how to use someone's code is to read their tests.

111
00:05:00.070 --> 00:05:02.080
This will give them an indication of that through

112
00:05:02.080 --> 00:05:04.060
the reporting and then they can go look

113
00:05:04.060 --> 00:05:07.070
at the source code that matches that report.

114
00:05:07.070 --> 00:05:09.080
So this is another one that I would always include

115
00:05:09.080 --> 00:05:13.050
and this is the one that we've seen to date in this course.

116
00:05:13.050 --> 00:05:14.080
Now as with the build plugins

117
00:05:14.080 --> 00:05:17.030
there's other reporting plugins out there.

118
00:05:17.030 --> 00:05:19.070
And there's third part ones as well.

119
00:05:19.070 --> 00:05:21.050
Read through them and figure out which ones

120
00:05:21.050 --> 00:05:24.000
are going to be most useful for you.

