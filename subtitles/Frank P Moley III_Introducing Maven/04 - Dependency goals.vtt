WEBVTT
1
00:00:01.000 --> 00:00:03.080
- [Instructor] Of all the plugins in the Maven ecosystem,

2
00:00:03.080 --> 00:00:07.050
I find the most value from running specific goals

3
00:00:07.050 --> 00:00:09.040
from the dependency plugin,

4
00:00:09.040 --> 00:00:12.040
and I want to walk through a couple of them with you,

5
00:00:12.040 --> 00:00:15.080
so you too can see the value of them.

6
00:00:15.080 --> 00:00:17.060
Let's go ahead and jump into our terminal,

7
00:00:17.060 --> 00:00:21.020
and let's go into our individual project.

8
00:00:21.020 --> 00:00:22.070
From within this project, I want you

9
00:00:22.070 --> 00:00:26.080
to execute a goal on the dependency plugin,

10
00:00:26.080 --> 00:00:35.010
so dependency:analyze.

11
00:00:35.010 --> 00:00:40.030
We'll allow this goal to run, and what you'll see here

12
00:00:40.030 --> 00:00:44.060
is we actually get a warning section at the very end.

13
00:00:44.060 --> 00:00:47.090
This tells us some very interesting information.

14
00:00:47.090 --> 00:00:50.090
The first one, is that we have a dependency that

15
00:00:50.090 --> 00:00:55.000
we haven't declared that we're actually using.

16
00:00:55.000 --> 00:00:58.070
So the commons io dependency we're using,

17
00:00:58.070 --> 00:01:01.050
but it hasn't been declared in our POM file.

18
00:01:01.050 --> 00:01:05.090
We're getting it transitively, but because we're using it

19
00:01:05.090 --> 00:01:08.090
we should mention it as being compile time.

20
00:01:08.090 --> 00:01:10.090
This is a very good warning to know because

21
00:01:10.090 --> 00:01:14.000
if that dependency goes and changes things

22
00:01:14.000 --> 00:01:17.080
I'm going to have compilation problems.

23
00:01:17.080 --> 00:01:19.080
We also have several dependencies

24
00:01:19.080 --> 00:01:23.000
that are unused but declared.

25
00:01:23.000 --> 00:01:26.000
Now this section can sometimes be a little bit squirrely,

26
00:01:26.000 --> 00:01:29.080
so really have to read and understand your code.

27
00:01:29.080 --> 00:01:32.030
Let's take a look at what this says.

28
00:01:32.030 --> 00:01:36.060
There's a directory studio, a commons io jar,

29
00:01:36.060 --> 00:01:40.050
that we have declared but it's saying that it's unused.

30
00:01:40.050 --> 00:01:42.070
The reason that it's doing that is because

31
00:01:42.070 --> 00:01:46.070
we're using this studio one as what we've defined,

32
00:01:46.070 --> 00:01:48.060
but we're actually using the previous one,

33
00:01:48.060 --> 00:01:52.030
so we actually have it mixed up and we need to go fix that.

34
00:01:52.030 --> 00:01:54.090
The next one is a runtime jar.

35
00:01:54.090 --> 00:01:58.050
Runtime notoriously show up in this section

36
00:01:58.050 --> 00:02:01.010
because it can't do the analysis

37
00:02:01.010 --> 00:02:04.050
of what is actually being used during runtime.

38
00:02:04.050 --> 00:02:08.060
The same way you'll see similar behavior on your test jars,

39
00:02:08.060 --> 00:02:11.000
because it doesn't know what is actually needed

40
00:02:11.000 --> 00:02:13.030
for the test to execute.

41
00:02:13.030 --> 00:02:16.000
So you really have to understand how this section works,

42
00:02:16.000 --> 00:02:18.000
but we have seen an issue in the way

43
00:02:18.000 --> 00:02:19.070
that we've built our POM file,

44
00:02:19.070 --> 00:02:22.080
and that's really the benefit of this plugin.

45
00:02:22.080 --> 00:02:25.030
I actually firmly believe that this should be used

46
00:02:25.030 --> 00:02:30.000
every time you commit before you push those code changes

47
00:02:30.000 --> 00:02:34.040
to the remote repository.

48
00:02:34.040 --> 00:02:36.050
The next one that I want you to run

49
00:02:36.050 --> 00:02:43.020
is Maven dependency resolve.

50
00:02:43.020 --> 00:02:45.000
Now what this plugin is going to do is

51
00:02:45.000 --> 00:02:47.020
it's going to actually give me a list

52
00:02:47.020 --> 00:02:49.080
of everything that I have declared.

53
00:02:49.080 --> 00:02:52.030
And this, again, is a really nice way

54
00:02:52.030 --> 00:02:54.080
to not have to read through the POM file

55
00:02:54.080 --> 00:02:57.030
but get a list of what's included.

56
00:02:57.030 --> 00:02:59.080
You'll see here that we have a line

57
00:02:59.080 --> 00:03:02.030
that we've declared that studio jar.

58
00:03:02.030 --> 00:03:03.080
If we go back and look at our POM file,

59
00:03:03.080 --> 00:03:07.070
you'll see that I did indeed declare the wrong jar,

60
00:03:07.070 --> 00:03:10.090
and I did that on purpose so that it would show up,

61
00:03:10.090 --> 00:03:12.010
because I knew that I would still

62
00:03:12.010 --> 00:03:15.060
get the code that I needed.

63
00:03:15.060 --> 00:03:19.000
Now the last one that we're going to run is really a cool one

64
00:03:19.000 --> 00:03:22.000
when you're trying to figure out how you got something

65
00:03:22.000 --> 00:03:29.060
on your classpath, and that's the dependency tree goal.

66
00:03:29.060 --> 00:03:31.010
Now that that's run, let's take a look

67
00:03:31.010 --> 00:03:33.010
at what this is saying.

68
00:03:33.010 --> 00:03:34.080
What it says is that at the top level

69
00:03:34.080 --> 00:03:37.080
we have a project that is a jar file.

70
00:03:37.080 --> 00:03:40.080
I've declared a couple of jackson jars,

71
00:03:40.080 --> 00:03:43.090
that second one, the jackson databind jar,

72
00:03:43.090 --> 00:03:48.010
also brought in a jar called jackson annotations.

73
00:03:48.010 --> 00:03:52.050
I then went through and I declared a slf4j api jar,

74
00:03:52.050 --> 00:03:55.080
and that directory studio jar, and that brought in

75
00:03:55.080 --> 00:03:57.090
the commons.io jar.

76
00:03:57.090 --> 00:04:01.070
I'm actually using the commons.io not the stuido one,

77
00:04:01.070 --> 00:04:04.070
again that was on purpose.

78
00:04:04.070 --> 00:04:06.050
Keep going down through here you'll see that

79
00:04:06.050 --> 00:04:10.000
the next three jars I've declared and I'm using them,

80
00:04:10.000 --> 00:04:13.030
and that third one, the jupiter api jar,

81
00:04:13.030 --> 00:04:16.070
also brought in several jars of its own.

82
00:04:16.070 --> 00:04:19.090
There's an apiguardian, an opentest4j,

83
00:04:19.090 --> 00:04:22.070
and then the junit platform commons

84
00:04:22.070 --> 00:04:24.070
all came in transitively.

85
00:04:24.070 --> 00:04:28.050
And that third one there, the junit platform commons,

86
00:04:28.050 --> 00:04:31.070
actually came in from the opentest jar,

87
00:04:31.070 --> 00:04:34.040
and that's just by reading this tree.

88
00:04:34.040 --> 00:04:36.060
And you can continue through the rest of that.

89
00:04:36.060 --> 00:04:40.000
But this tree can be an invaluable troubleshooting tool

90
00:04:40.000 --> 00:04:42.040
when trying to figure out how things got on,

91
00:04:42.040 --> 00:04:44.070
why specific versions were selected

92
00:04:44.070 --> 00:04:47.000
when you're dealing with transitive problems,

93
00:04:47.000 --> 00:04:50.030
and, again, it gives you a clear picture of what's going on

94
00:04:50.030 --> 00:04:53.070
when Maven is doing its dependency resolution.

95
00:04:53.070 --> 00:04:55.080
Now there's many other goals to this,

96
00:04:55.080 --> 00:04:57.010
but these are the three big ones

97
00:04:57.010 --> 00:05:00.020
that I find myself using more than anything else.

98
00:05:00.020 --> 00:05:02.070
Take a look at Maven's documentation, however.

99
00:05:02.070 --> 00:05:05.090
You may find other goals of this or any plugin

100
00:05:05.090 --> 00:05:08.040
that you, too, may find very valuable,

101
00:05:08.040 --> 00:05:10.050
and make your productivity at your job

102
00:05:10.050 --> 00:05:13.000
that much more efficient.

