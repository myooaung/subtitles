WEBVTT
1
00:00:01.000 --> 00:00:03.000
- [Instructor] There's one more high-level concept

2
00:00:03.000 --> 00:00:04.080
that I want to talk about,

3
00:00:04.080 --> 00:00:07.090
and this really can be helpful for organizations

4
00:00:07.090 --> 00:00:10.090
that want to control dependencies at a higher level

5
00:00:10.090 --> 00:00:12.070
and that is parent POMs

6
00:00:12.070 --> 00:00:17.040
and the associated concept of reactor builds.

7
00:00:17.040 --> 00:00:21.010
A parent POM is a POM file that is stand-alone,

8
00:00:21.010 --> 00:00:24.090
meaning that there is no code associated with it.

9
00:00:24.090 --> 00:00:27.060
That creates a list of dependency versions

10
00:00:27.060 --> 00:00:31.000
and plugin versions that the subordinate projects

11
00:00:31.000 --> 00:00:32.090
can leverage.

12
00:00:32.090 --> 00:00:37.000
This provides a way to control versions in one place

13
00:00:37.000 --> 00:00:39.070
so the subordinate projects don't actually have to

14
00:00:39.070 --> 00:00:44.020
specify the version, only the dependency.

15
00:00:44.020 --> 00:00:47.000
In addition to dependencies and plugins,

16
00:00:47.000 --> 00:00:51.060
parent POMs can provide properties and repositories.

17
00:00:51.060 --> 00:00:53.070
This really becomes a powerful tool

18
00:00:53.070 --> 00:00:58.070
when companies need a way to manage versions and licenses,

19
00:00:58.070 --> 00:01:01.040
as you can provide a pre-approved list

20
00:01:01.040 --> 00:01:04.080
of dependencies and artifacts.

21
00:01:04.080 --> 00:01:08.080
A similar concept called a reactor exists.

22
00:01:08.080 --> 00:01:12.080
A reactor builds on the concept of a parent POM.

23
00:01:12.080 --> 00:01:17.030
A reactor is used to build a group of related projects

24
00:01:17.030 --> 00:01:20.030
through the use of the parent POM.

25
00:01:20.030 --> 00:01:23.020
Maven commands are executed on the parent,

26
00:01:23.020 --> 00:01:27.010
and the reactor executes the commands on each module

27
00:01:27.010 --> 00:01:30.010
or artifact in the reactor in such a way

28
00:01:30.010 --> 00:01:33.040
that the dependencies, if they exist,

29
00:01:33.040 --> 00:01:36.030
are handled in the correct order.

30
00:01:36.030 --> 00:01:38.070
Building a reactor is not that hard

31
00:01:38.070 --> 00:01:40.050
but it is time consuming.

32
00:01:40.050 --> 00:01:41.080
So instead of building one

33
00:01:41.080 --> 00:01:44.050
I want to walk through the structure at least.

34
00:01:44.050 --> 00:01:46.030
And actually, our existing project

35
00:01:46.030 --> 00:01:47.070
that we're going to look at here in a minute,

36
00:01:47.070 --> 00:01:50.090
is already setup to be a reactor.

37
00:01:50.090 --> 00:01:53.080
At the root is a POM file that contains

38
00:01:53.080 --> 00:01:56.020
the dependency management section,

39
00:01:56.020 --> 00:02:00.070
which usually references all of the modules.

40
00:02:00.070 --> 00:02:03.060
The parent version is used for all items

41
00:02:03.060 --> 00:02:05.070
to keep them in sync.

42
00:02:05.070 --> 00:02:09.070
Because reactor modules tend to depend on each other,

43
00:02:09.070 --> 00:02:11.060
you usually want to put the module

44
00:02:11.060 --> 00:02:15.080
in the dependency management section of the parent POM.

45
00:02:15.080 --> 00:02:17.080
One important aspect of the POM

46
00:02:17.080 --> 00:02:21.080
is that its packaging type must be POM.

47
00:02:21.080 --> 00:02:24.040
So far, we haven't seen this section

48
00:02:24.040 --> 00:02:26.080
because the default is JAR,

49
00:02:26.080 --> 00:02:31.030
but parent POM files must be packaged as a POM.

50
00:02:31.030 --> 00:02:34.030
Now, in the root directory you then create

51
00:02:34.030 --> 00:02:37.030
project directories for each module.

52
00:02:37.030 --> 00:02:42.040
You define the module and the parent in a module section.

53
00:02:42.040 --> 00:02:47.010
Now each module has its own java project structure,

54
00:02:47.010 --> 00:02:48.090
including a POM.

55
00:02:48.090 --> 00:02:53.090
That POM lists the reactor parent POM as its parent.

56
00:02:53.090 --> 00:02:56.060
This structure is super useful when you build

57
00:02:56.060 --> 00:03:00.070
shared client libraries, for web services for instance.

58
00:03:00.070 --> 00:03:02.020
You can define your interface

59
00:03:02.020 --> 00:03:04.030
and domain objects in one module,

60
00:03:04.030 --> 00:03:08.010
your client in another that depends on that interface,

61
00:03:08.010 --> 00:03:10.090
and finally, your implementation that also depends

62
00:03:10.090 --> 00:03:14.040
on the interface in a third module.

63
00:03:14.040 --> 00:03:15.090
Now let's take a look at this structure

64
00:03:15.090 --> 00:03:17.040
a little bit in code.

65
00:03:17.040 --> 00:03:20.020
Now we're going to do some refactoring later on with this,

66
00:03:20.020 --> 00:03:23.070
but I at least want to get you invested into what we've done.

67
00:03:23.070 --> 00:03:27.010
So at the root of our project in the learning-maven folder,

68
00:03:27.010 --> 00:03:29.040
I've created a POM file

69
00:03:29.040 --> 00:03:33.050
and that POM file is listed as the parent of project.

70
00:03:33.050 --> 00:03:35.040
You'll see that there's a module section

71
00:03:35.040 --> 00:03:37.050
starting here on line 12

72
00:03:37.050 --> 00:03:41.060
that references the learning-maven-presidents module.

73
00:03:41.060 --> 00:03:44.000
Likewise, if we open up the POM in that project

74
00:03:44.000 --> 00:03:46.030
you will see starting at line 11

75
00:03:46.030 --> 00:03:51.010
that I've defined the parent that is the module itself.

76
00:03:51.010 --> 00:03:53.000
So let's jump over here to the terminal,

77
00:03:53.000 --> 00:03:56.050
and this time we're going to start at the learning-maven level,

78
00:03:56.050 --> 00:03:59.040
so the root of our exercise file.

79
00:03:59.040 --> 00:04:03.060
So we're going to do a Maven clean package

80
00:04:03.060 --> 00:04:06.030
on the root of our project here,

81
00:04:06.030 --> 00:04:08.000
and what I want you to notice is that you're going to get

82
00:04:08.000 --> 00:04:10.020
a reactor build order listed

83
00:04:10.020 --> 00:04:11.090
and that's because it knows the order

84
00:04:11.090 --> 00:04:13.060
that it has to be done in.

85
00:04:13.060 --> 00:04:15.060
And it's going to go through and execute the build

86
00:04:15.060 --> 00:04:17.050
on each of those projects.

87
00:04:17.050 --> 00:04:21.040
So if we scroll back up a little bit in our console here,

88
00:04:21.040 --> 00:04:23.050
so that we can actually see what happened,

89
00:04:23.050 --> 00:04:26.050
you'll see that we got this reactor build order

90
00:04:26.050 --> 00:04:29.070
and it built the parent POM first and then the JAR,

91
00:04:29.070 --> 00:04:30.050
and then it went through

92
00:04:30.050 --> 00:04:32.090
and did all of its build operations.

93
00:04:32.090 --> 00:04:34.080
And that's the way that a reactor works,

94
00:04:34.080 --> 00:04:36.060
if we had multiple modules

95
00:04:36.060 --> 00:04:39.070
each of them would get built in the correct order,

96
00:04:39.070 --> 00:04:41.080
and because we did packaging,

97
00:04:41.080 --> 00:04:45.060
testing also happened and subsequent operations occurred,

98
00:04:45.060 --> 00:04:47.080
and we're going to talk about that build life cycle

99
00:04:47.080 --> 00:04:49.020
in just a little bit.

100
00:04:49.020 --> 00:04:51.010
But that's a way that a reactor works,

101
00:04:51.010 --> 00:04:52.030
and though we've been dealing with it

102
00:04:52.030 --> 00:04:53.040
at the beginning of this course,

103
00:04:53.040 --> 00:04:55.080
we haven't been working on the reactor level.

104
00:04:55.080 --> 00:04:57.070
Instead, we've been working on the module level,

105
00:04:57.070 --> 00:05:00.000
so this time we can actually work with the reactor

106
00:05:00.000 --> 00:05:02.000
and see how this behaves.

