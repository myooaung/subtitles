WEBVTT
1
00:00:00.010 --> 00:00:03.030
- [Instructor] An Uber Jar is a special build

2
00:00:03.030 --> 00:00:06.080
and packaging routine that has more to do with dependencies

3
00:00:06.080 --> 00:00:10.040
than packaging or build.

4
00:00:10.040 --> 00:00:14.000
So, what is an Uber, or a shaded JAR?

5
00:00:14.000 --> 00:00:17.040
In my mind's eye, an Uber JAR is a WAR file

6
00:00:17.040 --> 00:00:20.050
to run outside of a web container.

7
00:00:20.050 --> 00:00:22.090
Now, while that isn't exactly what it is,

8
00:00:22.090 --> 00:00:24.060
it's a great analogy,

9
00:00:24.060 --> 00:00:26.030
because just like a WAR file,

10
00:00:26.030 --> 00:00:29.090
a shaded JAR contains all of the source code

11
00:00:29.090 --> 00:00:33.040
that you write for your application.

12
00:00:33.040 --> 00:00:35.090
In addition, also like a WAR file,

13
00:00:35.090 --> 00:00:38.050
it contains all the dependencies that you need

14
00:00:38.050 --> 00:00:41.070
to run your application.

15
00:00:41.070 --> 00:00:45.040
Unlike a WAR file, however, it can be executable.

16
00:00:45.040 --> 00:00:47.040
Now, what this means is that you can

17
00:00:47.040 --> 00:00:51.070
actually package your application in a shaded JAR

18
00:00:51.070 --> 00:00:54.050
and hand it to somebody to run,

19
00:00:54.050 --> 00:00:56.040
and they don't have to do anything

20
00:00:56.040 --> 00:00:59.000
to bring the dependencies onto the class path,

21
00:00:59.000 --> 00:01:02.000
and you can even package in a shaded JAR

22
00:01:02.000 --> 00:01:05.040
something like embedded Tomcat to run a web application

23
00:01:05.040 --> 00:01:07.010
as a JAR file.

24
00:01:07.010 --> 00:01:09.050
Before we build our shaded JAR,

25
00:01:09.050 --> 00:01:11.020
I want to run a command to show you

26
00:01:11.020 --> 00:01:13.070
what's included in the standard JAR.

27
00:01:13.070 --> 00:01:21.010
So, let's start by running a mvn clean package.

28
00:01:21.010 --> 00:01:24.050
Now, I want to run another command called jar tf,

29
00:01:24.050 --> 00:01:26.070
and we're going to go to the target directory,

30
00:01:26.070 --> 00:01:30.050
and bring up our learning-maven-presidents JAR.

31
00:01:30.050 --> 00:01:32.000
Now, what you can see is we've actually

32
00:01:32.000 --> 00:01:35.030
output everything that was included in our JAR file,

33
00:01:35.030 --> 00:01:38.080
not only the directory structure, but all of our classes.

34
00:01:38.080 --> 00:01:40.020
And this is going to be really important

35
00:01:40.020 --> 00:01:42.050
as we build our shaded JAR.

36
00:01:42.050 --> 00:01:45.010
So, let's jump into our IDE, and we'll go ahead

37
00:01:45.010 --> 00:01:48.030
and open up the learning-maven-presidents.

38
00:01:48.030 --> 00:01:52.080
And we're going to start actually with our PresidentsService.

39
00:01:52.080 --> 00:01:57.050
So, open up com.frankmoley.lil, PresidentsService

40
00:01:57.050 --> 00:01:59.080
in src main java.

41
00:01:59.080 --> 00:02:02.060
Let's scroll down towards the bottom.

42
00:02:02.060 --> 00:02:04.060
And we're going to add a new method.

43
00:02:04.060 --> 00:02:09.030
It's going to be a public static void method called main.

44
00:02:09.030 --> 00:02:14.080
Pass in a string array of args.

45
00:02:14.080 --> 00:02:18.050
Now, in here we're going to create a PresidentsService,

46
00:02:18.050 --> 00:02:24.050
call it service.

47
00:02:24.050 --> 00:02:30.070
And then we're going to do a service.getPresidents.forEach.

48
00:02:30.070 --> 00:02:36.020
And in there we're going to do a System.out::println.

49
00:02:36.020 --> 00:02:38.010
Now, what this is going to allow us to do

50
00:02:38.010 --> 00:02:39.060
is when we run this main method,

51
00:02:39.060 --> 00:02:41.020
we're going to actually grab the service,

52
00:02:41.020 --> 00:02:44.040
execute the query, and then we're going to printout

53
00:02:44.040 --> 00:02:46.060
all of that content to the terminal,

54
00:02:46.060 --> 00:02:48.090
or whatever we're running this from.

55
00:02:48.090 --> 00:02:52.070
So, let's actually make this a shaded, executable JAR.

56
00:02:52.070 --> 00:02:54.020
So, open up our POM file

57
00:02:54.020 --> 00:02:58.010
in our learning-maven-presidents module.

58
00:02:58.010 --> 00:03:04.050
And I want to add to this a plugin in our build section.

59
00:03:04.050 --> 00:03:06.080
So we're going to drop to the bottom here

60
00:03:06.080 --> 00:03:09.050
and create a new plugin.

61
00:03:09.050 --> 00:03:12.020
And the plugin is going to come from

62
00:03:12.020 --> 00:03:18.080
org.apache.maven.plugins.

63
00:03:18.080 --> 00:03:25.070
And the plugin name is the maven-shade-plugin.

64
00:03:25.070 --> 00:03:31.090
And the version that we are going to use is 3.2.1.

65
00:03:31.090 --> 00:03:34.090
Now, we've got a little bit of configuration

66
00:03:34.090 --> 00:03:38.040
that we need to do to make this thing executable.

67
00:03:38.040 --> 00:03:43.010
So we'll go ahead and start with our configuration,

68
00:03:43.010 --> 00:03:48.050
and we are going to build a transformers section,

69
00:03:48.050 --> 00:03:50.070
and a transformer.

70
00:03:50.070 --> 00:03:57.030
And the transformer that we are going to use

71
00:03:57.030 --> 00:04:01.020
has an implementation that equals

72
00:04:01.020 --> 00:04:08.060
org.apache.maven.plugins.shade.resource.

73
00:04:08.060 --> 00:04:21.080
ManifestResourceTransformer.

74
00:04:21.080 --> 00:04:30.010
Make sure you set that to equal and not hyphen.

75
00:04:30.010 --> 00:04:34.050
And then in here, we're going to set our mainClass,

76
00:04:34.050 --> 00:04:35.040
and this is going to be

77
00:04:35.040 --> 00:04:47.060
com.frankmoley.lil.PresidentsService.

78
00:04:47.060 --> 00:04:50.070
Excellent, let me shrink this down over here

79
00:04:50.070 --> 00:04:55.090
so you can see that full implementation.

80
00:04:55.090 --> 00:04:58.040
And now we need to go in and we need to add an execution

81
00:04:58.040 --> 00:05:00.060
to bind this plugin to.

82
00:05:00.060 --> 00:05:04.030
So now we'll execute an execution,

83
00:05:04.030 --> 00:05:11.090
and it is going to run in the package /phase

84
00:05:11.090 --> 00:05:18.030
and the goal that we want to run on it

85
00:05:18.030 --> 00:05:20.080
is the shade goal.

86
00:05:20.080 --> 00:05:23.000
And that's all that we need to do.

87
00:05:23.000 --> 00:05:24.090
So, let's jump back to our terminal

88
00:05:24.090 --> 00:05:33.060
and we're going to run a mvn clean package, once again.

89
00:05:33.060 --> 00:05:34.070
You'll see here towards the end

90
00:05:34.070 --> 00:05:36.000
that we've actually got some output now

91
00:05:36.000 --> 00:05:37.040
from our shaded plugin,

92
00:05:37.040 --> 00:05:38.070
which is what we would expect.

93
00:05:38.070 --> 00:05:40.050
And I want to show you something else.

94
00:05:40.050 --> 00:05:45.040
We're going to do an ls -la on the target directory itself.

95
00:05:45.040 --> 00:05:48.060
And you'll see that in addition to our JAR file,

96
00:05:48.060 --> 00:05:49.080
that is much larger now,

97
00:05:49.080 --> 00:05:52.060
we also have an original JAR file.

98
00:05:52.060 --> 00:05:55.080
And that original JAR file is the unshaded version.

99
00:05:55.080 --> 00:05:58.080
You can see that the size difference is quite significant,

100
00:05:58.080 --> 00:06:00.070
and that's because of all the extra JARs

101
00:06:00.070 --> 00:06:03.030
that we've now brought into our class path.

102
00:06:03.030 --> 00:06:07.020
So, let's actually take a look at what's in there.

103
00:06:07.020 --> 00:06:11.020
So, if we do our jar tf command on target,

104
00:06:11.020 --> 00:06:13.080
and then learning-maven-presidents,

105
00:06:13.080 --> 00:06:16.080
you will see that we have a significantly larger output

106
00:06:16.080 --> 00:06:19.000
because we have all of our shaded classes now

107
00:06:19.000 --> 00:06:21.070
brought into our project itself.

108
00:06:21.070 --> 00:06:24.020
And just to sort of clean all of this up at the end,

109
00:06:24.020 --> 00:06:28.020
I want to run a java -jar command

110
00:06:28.020 --> 00:06:30.070
on our target directory and our

111
00:06:30.070 --> 00:06:37.080
learning-maven-presidents-1.0.0-SNAPSHOT.jar,

112
00:06:37.080 --> 00:06:40.020
and you will see that it executed that method

113
00:06:40.020 --> 00:06:43.000
and output everything to the console,

114
00:06:43.000 --> 00:06:45.030
which is exactly what we would have expected it to do

115
00:06:45.030 --> 00:06:47.050
based on what we just setup.

116
00:06:47.050 --> 00:06:50.000
And that's how the Shade Plugin works.

