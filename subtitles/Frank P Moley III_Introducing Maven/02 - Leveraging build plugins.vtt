WEBVTT
1
00:00:00.070 --> 00:00:02.040
- [Instructor] Leveraging build plugins

2
00:00:02.040 --> 00:00:04.060
is very straightforward.

3
00:00:04.060 --> 00:00:07.020
And we've actually already done this.

4
00:00:07.020 --> 00:00:08.090
When using the Maven package command,

5
00:00:08.090 --> 00:00:10.030
we ran through many goals

6
00:00:10.030 --> 00:00:13.060
on several core plugins for Maven.

7
00:00:13.060 --> 00:00:17.000
Build plugins are the most utilized plugins

8
00:00:17.000 --> 00:00:19.050
in the Maven build life cycles.

9
00:00:19.050 --> 00:00:22.010
In fact, the build plugins participate

10
00:00:22.010 --> 00:00:26.070
in all three of the default life cycles for Maven.

11
00:00:26.070 --> 00:00:29.090
The output of build plugins can be used for reporting.

12
00:00:29.090 --> 00:00:33.000
The output is also used for artifact creation

13
00:00:33.000 --> 00:00:37.010
and the clean plugin is technically a build plugin as well.

14
00:00:37.010 --> 00:00:39.000
You can see a list of plugins,

15
00:00:39.000 --> 00:00:41.000
both Apache and third party,

16
00:00:41.000 --> 00:00:43.090
on the Apache website.

17
00:00:43.090 --> 00:00:47.010
There are really three types of build plugins:

18
00:00:47.010 --> 00:00:50.030
core, packaging, and tools.

19
00:00:50.030 --> 00:00:51.060
While some reporting plugins

20
00:00:51.060 --> 00:00:53.080
also have build aspects,

21
00:00:53.080 --> 00:00:56.080
we will focus on these.

22
00:00:56.080 --> 00:00:59.000
The core plugins, as you might imagine,

23
00:00:59.000 --> 00:01:00.080
are the most used.

24
00:01:00.080 --> 00:01:02.060
The compiler plugin, for instance,

25
00:01:02.060 --> 00:01:04.070
is responsible for using the JDK

26
00:01:04.070 --> 00:01:09.040
to compile the source code into byte code.

27
00:01:09.040 --> 00:01:11.050
The install plugin is responsible

28
00:01:11.050 --> 00:01:13.020
for taking the packaged artifact

29
00:01:13.020 --> 00:01:18.010
and installing it into the local M2 repository

30
00:01:18.010 --> 00:01:19.050
on your machine,

31
00:01:19.050 --> 00:01:25.000
usually located in your Home directory, /.M2.

32
00:01:25.000 --> 00:01:26.090
The deploy plugin is responsible

33
00:01:26.090 --> 00:01:28.040
for tacking the packaged artifact

34
00:01:28.040 --> 00:01:31.070
and pushing it to a remote repository

35
00:01:31.070 --> 00:01:34.020
for others to use.

36
00:01:34.020 --> 00:01:36.020
The validation plugin is used

37
00:01:36.020 --> 00:01:38.020
for validating your source code.

38
00:01:38.020 --> 00:01:41.080
And there are several types of validation plugins.

39
00:01:41.080 --> 00:01:44.010
The packaging plugins are responsible

40
00:01:44.010 --> 00:01:47.010
for taking the compiled byte code

41
00:01:47.010 --> 00:01:49.040
and packaging it into a structure

42
00:01:49.040 --> 00:01:52.070
that can be consumed by the JVM

43
00:01:52.070 --> 00:01:56.070
or other Java system, like an application server.

44
00:01:56.070 --> 00:02:00.020
The JAR plugin is the default packaging plugin

45
00:02:00.020 --> 00:02:02.010
and produces a JAR file

46
00:02:02.010 --> 00:02:06.080
that can be loaded by a class loader of the JVM.

47
00:02:06.080 --> 00:02:09.080
A WAR is a package that can be consumed

48
00:02:09.080 --> 00:02:13.020
by the web application server, like Tomcat,

49
00:02:13.020 --> 00:02:16.010
to run a web application.

50
00:02:16.010 --> 00:02:19.070
An EAR is an enterprise archive,

51
00:02:19.070 --> 00:02:23.080
which often consists of multiple JARs, WARs,

52
00:02:23.080 --> 00:02:26.040
and sometimes EJBs.

53
00:02:26.040 --> 00:02:28.020
This is usually used for

54
00:02:28.020 --> 00:02:31.050
large enterprise application servers.

55
00:02:31.050 --> 00:02:34.040
A SHADE is a special JAR file

56
00:02:34.040 --> 00:02:36.060
that includes all of the classes

57
00:02:36.060 --> 00:02:40.080
from your code as well as the dependency classes you need

58
00:02:40.080 --> 00:02:43.090
for a so-called uber-JAR.

59
00:02:43.090 --> 00:02:46.090
This often becomes an executable JAR file

60
00:02:46.090 --> 00:02:51.000
that is self-contained to ease portability.

61
00:02:51.000 --> 00:02:53.070
Now, while this is technically a packaging plugin,

62
00:02:53.070 --> 00:02:56.020
it is not one that you can actually specify

63
00:02:56.020 --> 00:02:57.050
in the package block.

64
00:02:57.050 --> 00:02:59.070
And we'll show you how to use the SHADE plugin

65
00:02:59.070 --> 00:03:03.010
later on in this course.

66
00:03:03.010 --> 00:03:05.090
Now, the tools plugins don't really fit

67
00:03:05.090 --> 00:03:08.030
into a single box.

68
00:03:08.030 --> 00:03:10.030
The variety of uses makes them

69
00:03:10.030 --> 00:03:13.080
sort of a catch-all category.

70
00:03:13.080 --> 00:03:18.010
Some of the most popular are those associated with releases,

71
00:03:18.010 --> 00:03:20.080
where an artifact is stamped with the version,

72
00:03:20.080 --> 00:03:23.060
deployed, SEM is tagged,

73
00:03:23.060 --> 00:03:26.010
and then the version is incremented.

74
00:03:26.010 --> 00:03:29.000
There are also plugins for signing JARs

75
00:03:29.000 --> 00:03:30.090
to prevent tampering.

76
00:03:30.090 --> 00:03:33.040
The dependency JAR is a build tool

77
00:03:33.040 --> 00:03:37.080
that copies, analyzes, and builds trees of dependencies,

78
00:03:37.080 --> 00:03:39.080
and the list goes on.

79
00:03:39.080 --> 00:03:41.000
We're going to focus a little more

80
00:03:41.000 --> 00:03:43.020
on the most common use cases

81
00:03:43.020 --> 00:03:47.000
of all of these in coming videos.

