WEBVTT
1
00:00:01.000 --> 00:00:03.040
- [Instructor] The Java project structure for Apache Maven

2
00:00:03.040 --> 00:00:07.010
is one of those areas that tends to be polarizing

3
00:00:07.010 --> 00:00:10.000
among Java developers.

4
00:00:10.000 --> 00:00:11.030
While Maven will argue that

5
00:00:11.030 --> 00:00:14.000
the file structure requirements are in place

6
00:00:14.000 --> 00:00:17.000
on purpose to help you build your code

7
00:00:17.000 --> 00:00:19.020
following best practices,

8
00:00:19.020 --> 00:00:22.070
there are arguments against it in the community.

9
00:00:22.070 --> 00:00:24.070
While some call this a pain point,

10
00:00:24.070 --> 00:00:26.050
I would argue on the side of Apache

11
00:00:26.050 --> 00:00:29.090
that this is a great separation.

12
00:00:29.090 --> 00:00:32.090
But as I alluded to, it is a source of complaints

13
00:00:32.090 --> 00:00:35.030
when it comes to Apache Maven.

14
00:00:35.030 --> 00:00:38.030
Consider however that this structure cleanly separates

15
00:00:38.030 --> 00:00:43.000
code from the resources that the project needs to operate.

16
00:00:43.000 --> 00:00:45.030
Things like property files, logging instructions,

17
00:00:45.030 --> 00:00:49.000
and other non-Java code files.

18
00:00:49.000 --> 00:00:52.000
It also separates live code from test code,

19
00:00:52.000 --> 00:00:54.090
which makes your code easier to navigate

20
00:00:54.090 --> 00:00:57.080
than say something like Go where the test

21
00:00:57.080 --> 00:01:01.010
lives right next to the files they are testing.

22
00:01:01.010 --> 00:01:03.070
This separation makes it infinitely easier

23
00:01:03.070 --> 00:01:06.080
to read code versus tests

24
00:01:06.080 --> 00:01:09.060
and if you maintain package structure,

25
00:01:09.060 --> 00:01:13.020
finding tests isn't hard at all.

26
00:01:13.020 --> 00:01:15.050
Finally, while some people may complain

27
00:01:15.050 --> 00:01:20.010
once they embrace it and see the elegance in the structure,

28
00:01:20.010 --> 00:01:22.080
it becomes the only way to separate code

29
00:01:22.080 --> 00:01:24.050
when writing software

30
00:01:24.050 --> 00:01:26.080
and I find myself missing the structure

31
00:01:26.080 --> 00:01:30.030
when I write code in say Go or Python.

32
00:01:30.030 --> 00:01:34.060
So now, we will look at the concrete structure of a project.

33
00:01:34.060 --> 00:01:38.080
We will start with the root directory.

34
00:01:38.080 --> 00:01:42.080
In this directory we have another directory called source,

35
00:01:42.080 --> 00:01:45.050
spelled out S-R-C.

36
00:01:45.050 --> 00:01:49.000
This directory houses all of the code and resources

37
00:01:49.000 --> 00:01:51.010
for the project.

38
00:01:51.010 --> 00:01:56.020
At the same level as SRC we have the pom.xml file.

39
00:01:56.020 --> 00:01:58.020
By the end of this course,

40
00:01:58.020 --> 00:02:02.000
you will be very familiar with this file.

41
00:02:02.000 --> 00:02:03.060
Now, in the SRC folder

42
00:02:03.060 --> 00:02:07.080
we have two folders that are identical underneath.

43
00:02:07.080 --> 00:02:11.000
One is main and one is test.

44
00:02:11.000 --> 00:02:14.030
Main contains the runtime code

45
00:02:14.030 --> 00:02:19.040
and test, as you might imagine, contains your test code.

46
00:02:19.040 --> 00:02:23.060
Now, it is important to note that some plugins in Maven

47
00:02:23.060 --> 00:02:27.010
add other folders to this level,

48
00:02:27.010 --> 00:02:30.030
but that's beyond the scope of this course.

49
00:02:30.030 --> 00:02:32.070
Now, underneath main and test

50
00:02:32.070 --> 00:02:35.040
the structures are identical.

51
00:02:35.040 --> 00:02:38.030
There's a Java folder for your source code

52
00:02:38.030 --> 00:02:41.080
and a resources folder for, as you guessed it,

53
00:02:41.080 --> 00:02:43.080
your resources.

54
00:02:43.080 --> 00:02:47.050
Throughout this course we will reference this file structure

55
00:02:47.050 --> 00:02:53.000
several times, as this is how all Maven projects start.

