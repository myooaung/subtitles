WEBVTT
1
00:00:01.020 --> 00:00:02.050
- [Instructor] One of the hardest aspects

2
00:00:02.050 --> 00:00:05.060
to grasp about Maven is how it handles

3
00:00:05.060 --> 00:00:10.020
dependency resolution, specifically through the concept

4
00:00:10.020 --> 00:00:13.000
of transitive dependencies.

5
00:00:13.000 --> 00:00:15.050
So, you may be asking yourself at this point,

6
00:00:15.050 --> 00:00:19.000
what is this transitive concept?

7
00:00:19.000 --> 00:00:23.060
In short, a transitive dependency is a dependency

8
00:00:23.060 --> 00:00:27.000
of a dependency, and so on.

9
00:00:27.000 --> 00:00:29.030
It provides a mechanism to not have

10
00:00:29.030 --> 00:00:33.070
to actually declare all of your actual dependencies,

11
00:00:33.070 --> 00:00:38.040
instead focusing on only those things that you know about.

12
00:00:38.040 --> 00:00:41.000
This reduces the need to know the inner workings

13
00:00:41.000 --> 00:00:44.020
of libraries while also isolating you

14
00:00:44.020 --> 00:00:47.000
from changes when upgrading versions

15
00:00:47.000 --> 00:00:50.030
because if your dependency needs three dependencies,

16
00:00:50.030 --> 00:00:52.050
you don't need to know what those three are.

17
00:00:52.050 --> 00:00:56.000
Maven will actually bring them onto the class path for you

18
00:00:56.000 --> 00:00:58.050
through this transitive model.

19
00:00:58.050 --> 00:01:02.000
Now, as you might imagine, since software is managing

20
00:01:02.000 --> 00:01:06.010
this transitive dependency process, there are rules,

21
00:01:06.010 --> 00:01:10.050
and these rules can get you if you don't know them.

22
00:01:10.050 --> 00:01:13.000
The first rule is that when two versions

23
00:01:13.000 --> 00:01:15.070
of the same artifact are needed,

24
00:01:15.070 --> 00:01:20.070
the one that is closest to the actual project wins.

25
00:01:20.070 --> 00:01:25.050
Meaning, if project A has B and C as dependencies

26
00:01:25.050 --> 00:01:30.040
and B relies on project Z 1.0

27
00:01:30.040 --> 00:01:36.070
whereas C relies on project D which relies on Z 1.2,

28
00:01:36.070 --> 00:01:39.050
Maven will pick version 1.0

29
00:01:39.050 --> 00:01:42.040
because it's actually closer to A.

30
00:01:42.040 --> 00:01:46.010
It's two degrees of separation instead of three.

31
00:01:46.010 --> 00:01:49.040
Now, regardless of which is closer,

32
00:01:49.040 --> 00:01:52.090
if there is a dependency management section defined

33
00:01:52.090 --> 00:01:57.050
and the artifact is there, it will be the version chosen.

34
00:01:57.050 --> 00:02:00.010
Scopes also play a big role in

35
00:02:00.010 --> 00:02:02.090
what is included as a transitive dependency,

36
00:02:02.090 --> 00:02:06.030
as we discussed when talking about scopes.

37
00:02:06.030 --> 00:02:09.010
Local dependency declaration overrides

38
00:02:09.010 --> 00:02:11.060
all other transitive dependencies,

39
00:02:11.060 --> 00:02:13.060
so take that into account when you're building

40
00:02:13.060 --> 00:02:14.070
your artifacts.

41
00:02:14.070 --> 00:02:16.080
If you need a specific version,

42
00:02:16.080 --> 00:02:20.030
just simply mark that on your POM file

43
00:02:20.030 --> 00:02:23.080
and then there's no need for transitive dependencies.

44
00:02:23.080 --> 00:02:25.090
So, I have gone through many iterations

45
00:02:25.090 --> 00:02:29.000
of transitive dependency management in my career,

46
00:02:29.000 --> 00:02:32.050
and I've come up with a few tricks that I find useful.

47
00:02:32.050 --> 00:02:36.070
First and foremost, ensure you are only declaring

48
00:02:36.070 --> 00:02:38.030
what you need.

49
00:02:38.030 --> 00:02:39.090
Often, when declaring the POM,

50
00:02:39.090 --> 00:02:43.060
what we think we may need only to find out

51
00:02:43.060 --> 00:02:45.060
that we're aren't using it.

52
00:02:45.060 --> 00:02:48.000
Using tools like Dependency Analyze

53
00:02:48.000 --> 00:02:51.000
as part of your commit process will ensure

54
00:02:51.000 --> 00:02:54.060
that you aren't declaring stuff you don't need.

55
00:02:54.060 --> 00:02:57.050
In a similar way, ensure that you are using

56
00:02:57.050 --> 00:03:00.020
the correct scopes for your dependencies,

57
00:03:00.020 --> 00:03:05.030
as this can drastically impact transitive dependency trees,

58
00:03:05.030 --> 00:03:10.020
sometimes negatively when you have the wrong scope declared.

59
00:03:10.020 --> 00:03:13.070
Consider using parent POMs for your organization

60
00:03:13.070 --> 00:03:18.060
to control version, especially when dealing with artifacts

61
00:03:18.060 --> 00:03:24.020
that tend to break things or have security implications.

62
00:03:24.020 --> 00:03:26.030
This is a real threat.

63
00:03:26.030 --> 00:03:29.010
I used to use a library that had a bad habit

64
00:03:29.010 --> 00:03:34.000
of breaking on odd number releases back in my SOAP days.

65
00:03:34.000 --> 00:03:36.090
If I got this artifact transitively

66
00:03:36.090 --> 00:03:39.010
and someone didn't know that,

67
00:03:39.010 --> 00:03:41.060
there was a risk that I would break.

68
00:03:41.060 --> 00:03:44.020
This happened more than once before I stopped

69
00:03:44.020 --> 00:03:47.010
allowing others to impact my build,

70
00:03:47.010 --> 00:03:49.040
and that, maybe, is the cleanest trick.

71
00:03:49.040 --> 00:03:52.030
If you need to control the class path,

72
00:03:52.030 --> 00:03:57.000
specify everything that you need to control.

