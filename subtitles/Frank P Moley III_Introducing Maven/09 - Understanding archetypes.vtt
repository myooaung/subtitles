WEBVTT
1
00:00:01.000 --> 00:00:02.000
- [Instructor] While they aren't really

2
00:00:02.000 --> 00:00:04.000
a basic aspect of Maven,

3
00:00:04.000 --> 00:00:06.090
I want to at least introduce archetypes to you

4
00:00:06.090 --> 00:00:10.050
as I have found them to be very powerful constructs

5
00:00:10.050 --> 00:00:13.020
when working with Maven.

6
00:00:13.020 --> 00:00:14.060
So before we get too deep,

7
00:00:14.060 --> 00:00:16.080
let's talk about what they are.

8
00:00:16.080 --> 00:00:21.050
In short, an archetype is a project template using Maven.

9
00:00:21.050 --> 00:00:25.040
You specify an archetype when creating a new project,

10
00:00:25.040 --> 00:00:27.020
if you want to use one,

11
00:00:27.020 --> 00:00:30.000
and Maven will build the project structure

12
00:00:30.000 --> 00:00:34.070
or structures for you based on the template.

13
00:00:34.070 --> 00:00:36.070
This is a great tool for teams

14
00:00:36.070 --> 00:00:39.060
wanting to build consistent artifacts

15
00:00:39.060 --> 00:00:45.060
or to specify specific constructs in the artifacts.

16
00:00:45.060 --> 00:00:50.000
Ultimately, they are a project of their own.

17
00:00:50.000 --> 00:00:53.000
Now, while creating an archetype is outside the scope

18
00:00:53.000 --> 00:00:53.080
of this course,

19
00:00:53.080 --> 00:00:59.010
I do want to give you some high level use cases for it.

20
00:00:59.010 --> 00:01:02.030
I've used them for package structures of artifacts.

21
00:01:02.030 --> 00:01:05.000
When I first introduced restful services

22
00:01:05.000 --> 00:01:06.070
for a company I was working for,

23
00:01:06.070 --> 00:01:09.090
we built a strategy for a reactor build

24
00:01:09.090 --> 00:01:12.040
for each domain web service.

25
00:01:12.040 --> 00:01:14.080
The reactor had an interface, a client,

26
00:01:14.080 --> 00:01:16.040
and a service project.

27
00:01:16.040 --> 00:01:20.070
Each of those projects had a specific package structure

28
00:01:20.070 --> 00:01:22.080
based on the domain.

29
00:01:22.080 --> 00:01:26.000
Because we were very prescriptive at the time

30
00:01:26.000 --> 00:01:30.050
it saved developers a ton of time to use an archetype

31
00:01:30.050 --> 00:01:34.010
than to go reference the documentation standards

32
00:01:34.010 --> 00:01:37.080
and implement the packaging themselves.

33
00:01:37.080 --> 00:01:42.000
In addition, when I used to do monolithic web applications

34
00:01:42.000 --> 00:01:44.090
we used archetypes for our war deployments

35
00:01:44.090 --> 00:01:50.000
to provide the boilerplate JSPs and CSS we use

36
00:01:50.000 --> 00:01:52.020
for all of our applications.

37
00:01:52.020 --> 00:01:54.000
Yes, that was a long time ago,

38
00:01:54.000 --> 00:01:58.020
but for our web applications it worked.

39
00:01:58.020 --> 00:02:01.040
These resources were not part of our code per se,

40
00:02:01.040 --> 00:02:04.080
but we needed them in a specific location

41
00:02:04.080 --> 00:02:07.030
for the web application to work.

42
00:02:07.030 --> 00:02:09.070
As such, the archetype helped us a lot

43
00:02:09.070 --> 00:02:12.080
because that structure wasn't something

44
00:02:12.080 --> 00:02:14.060
I committed to memory.

45
00:02:14.060 --> 00:02:16.060
Now while we aren't going to create one,

46
00:02:16.060 --> 00:02:20.030
Apache has a great step by step process

47
00:02:20.030 --> 00:02:24.060
you can use to create a sample archetype.

48
00:02:24.060 --> 00:02:26.000
And if you are interested,

49
00:02:26.000 --> 00:02:28.090
you may find that it is worth your time.

50
00:02:28.090 --> 00:02:32.050
You also may find that using it in a process

51
00:02:32.050 --> 00:02:35.030
with a framework, like let's say Spring Boot,

52
00:02:35.030 --> 00:02:37.040
you can implement your standards quickly

53
00:02:37.040 --> 00:02:42.000
and get development started that much faster.

