WEBVTT
1
00:00:01.010 --> 00:00:02.070
- [Instructor] As we previously discussed,

2
00:00:02.070 --> 00:00:06.060
the core plugins are the most often used plugins

3
00:00:06.060 --> 00:00:09.020
within Apache Maven.

4
00:00:09.020 --> 00:00:10.080
In order to talk about these plugins,

5
00:00:10.080 --> 00:00:14.020
I actually want to use the Maven project website

6
00:00:14.020 --> 00:00:17.000
as our direction, so I ask you to navigate

7
00:00:17.000 --> 00:00:23.030
to https://maven.apache.org/plugins

8
00:00:23.030 --> 00:00:26.020
and that'll take you to this page here.

9
00:00:26.020 --> 00:00:28.090
Now we're going to talk about a few of the more common

10
00:00:28.090 --> 00:00:33.000
core plugins and we're going to start with the compiler plugin.

11
00:00:33.000 --> 00:00:35.020
The compiler plugin is actually responsible

12
00:00:35.020 --> 00:00:38.050
for doing the compilation of your source code

13
00:00:38.050 --> 00:00:41.090
and if you take a look there are several examples here

14
00:00:41.090 --> 00:00:45.010
and you can look at different configurations within this.

15
00:00:45.010 --> 00:00:48.050
But I want to focus on the Usage

16
00:00:48.050 --> 00:00:52.020
It shows you here that you can execute Maven compile

17
00:00:52.020 --> 00:00:55.060
or Maven test compile because the compiler plugin

18
00:00:55.060 --> 00:00:59.070
will also be used in your test class loader as well

19
00:00:59.070 --> 00:01:03.050
when you are doing test execution.

20
00:01:03.050 --> 00:01:05.070
If you scroll down here, you see some basics

21
00:01:05.070 --> 00:01:08.070
on configuring the plugin and this is very portable

22
00:01:08.070 --> 00:01:11.080
and can get dropped right into your POM file.

23
00:01:11.080 --> 00:01:13.090
Usually things like a compiler plugin

24
00:01:13.090 --> 00:01:17.000
are put into the parent POM which is why you see

25
00:01:17.000 --> 00:01:19.090
this documented on line four of this snippet

26
00:01:19.090 --> 00:01:23.050
as plugin management because that's how you would specify it

27
00:01:23.050 --> 00:01:26.090
for a parent POM, you also can just drop that

28
00:01:26.090 --> 00:01:29.040
as a plugin itself in the parent

29
00:01:29.040 --> 00:01:33.020
and it'll work just fine for all the subordinate artifacts.

30
00:01:33.020 --> 00:01:36.020
Now I encourage you to take a look at some of these examples

31
00:01:36.020 --> 00:01:38.090
especially when you're trying to solve needs

32
00:01:38.090 --> 00:01:42.060
of the compiler plugin.

33
00:01:42.060 --> 00:01:44.040
Go ahead and jump back here, the next one

34
00:01:44.040 --> 00:01:47.080
I want to take a look at is the deploy plugin.

35
00:01:47.080 --> 00:01:51.000
This is used really often within an organization

36
00:01:51.000 --> 00:01:53.030
where you are done working on an artifact

37
00:01:53.030 --> 00:01:56.050
and you want to publish it to your central repository

38
00:01:56.050 --> 00:01:58.010
for others to use.

39
00:01:58.010 --> 00:02:00.060
And if you're working on an open source project

40
00:02:00.060 --> 00:02:03.000
this is how you're ultimately going to get code

41
00:02:03.000 --> 00:02:05.070
out to Maven Central

42
00:02:05.070 --> 00:02:08.000
Again, we'll take a look at the Usage here

43
00:02:08.000 --> 00:02:10.060
and you'll see that you have this deploy

44
00:02:10.060 --> 00:02:13.080
that's based on a repo and this distribution

45
00:02:13.080 --> 00:02:17.010
management section is how the deploy plugin knows

46
00:02:17.010 --> 00:02:19.030
to take your packaged artifact

47
00:02:19.030 --> 00:02:21.090
and all of the metadata associated with it

48
00:02:21.090 --> 00:02:27.070
and push it to your internal or external repositories.

49
00:02:27.070 --> 00:02:30.010
As you really get into this you can also start to learn

50
00:02:30.010 --> 00:02:34.040
how you can push associated JARs with your package

51
00:02:34.040 --> 00:02:37.080
things like source JARs and documentation JARs

52
00:02:37.080 --> 00:02:41.000
can also get deployed to your repositories

53
00:02:41.000 --> 00:02:43.010
and it's actually highly encouraged to do that

54
00:02:43.010 --> 00:02:45.010
so that others can look are your javadoc

55
00:02:45.010 --> 00:02:48.080
and not just your code itself.

56
00:02:48.080 --> 00:02:51.020
Furthermore, you can use the deploy plugin

57
00:02:51.020 --> 00:02:54.050
to take a third party JAR and publish it

58
00:02:54.050 --> 00:02:58.020
to your local repository, especially if it's not something

59
00:02:58.020 --> 00:03:01.000
that's housed in Maven Central.

60
00:03:01.000 --> 00:03:03.030
If let's say, you buy a software product

61
00:03:03.030 --> 00:03:05.020
and they hand you a JAR file,

62
00:03:05.020 --> 00:03:07.090
you may want to store that in your repository

63
00:03:07.090 --> 00:03:10.020
for your own internal consumption

64
00:03:10.020 --> 00:03:12.070
and if you don't have a POM file to publish it,

65
00:03:12.070 --> 00:03:15.040
this allows you to generate a POM file

66
00:03:15.040 --> 00:03:18.040
using the deploy plugin.

67
00:03:18.040 --> 00:03:20.070
Let's jump back here and now we're going to take a look

68
00:03:20.070 --> 00:03:24.010
at the resources plugin, now the resources plugin

69
00:03:24.010 --> 00:03:27.000
is responsible for copying all of the files

70
00:03:27.000 --> 00:03:31.010
and your resources or files elsewhere on your system

71
00:03:31.010 --> 00:03:33.020
that you reference and putting them

72
00:03:33.020 --> 00:03:35.060
into your packaged artifact.

73
00:03:35.060 --> 00:03:39.020
This is how things like CSS and Java Script,

74
00:03:39.020 --> 00:03:42.000
properties files, many other different kind of files

75
00:03:42.000 --> 00:03:44.030
actually make it into your JAR

76
00:03:44.030 --> 00:03:47.010
and by default, the resources folder

77
00:03:47.010 --> 00:03:50.040
from the standard Maven Java package structure

78
00:03:50.040 --> 00:03:54.020
gets automatically copied out of that resources folder

79
00:03:54.020 --> 00:03:56.030
into your JAR for consumption,

80
00:03:56.030 --> 00:03:59.030
and that's why we put those elements there.

81
00:03:59.030 --> 00:04:02.050
You also get the same behavior on the test class loader

82
00:04:02.050 --> 00:04:06.010
by using the test resources.

83
00:04:06.010 --> 00:04:08.000
You can also do all kinds of custom copying

84
00:04:08.000 --> 00:04:10.020
if you need to have share resources

85
00:04:10.020 --> 00:04:13.030
from say, a network location brought into your project

86
00:04:13.030 --> 00:04:16.080
you can set that up to the use of the resources plugin

87
00:04:16.080 --> 00:04:20.040
and the Usage section kind of shows you what's going on

88
00:04:20.040 --> 00:04:23.050
but more importantly if you go over here to the examples

89
00:04:23.050 --> 00:04:26.020
and things like copying resources,

90
00:04:26.020 --> 00:04:29.000
it will tell you how to set your project up

91
00:04:29.000 --> 00:04:34.070
to bring in extra resources onto your project.

92
00:04:34.070 --> 00:04:38.020
Jump back out to the beginning here.

93
00:04:38.020 --> 00:04:41.020
The next one I want to take a look at is the surefire plugin

94
00:04:41.020 --> 00:04:43.080
and the surefire plugin is what we've been using

95
00:04:43.080 --> 00:04:47.060
to execute our JUnit test when we're doing builds.

96
00:04:47.060 --> 00:04:50.050
This is a very powerful tool because often

97
00:04:50.050 --> 00:04:52.090
you will write unit tests as part of your project

98
00:04:52.090 --> 00:04:55.060
and you actually want to halt your build

99
00:04:55.060 --> 00:04:59.080
if those unit tests fail and surefire allows you to do that.

100
00:04:59.080 --> 00:05:03.000
In addition to the fact that the surefire plugin

101
00:05:03.000 --> 00:05:06.060
produces xml documentation, it can then be converted

102
00:05:06.060 --> 00:05:09.020
into a site document to allow you to see

103
00:05:09.020 --> 00:05:12.000
the status of your testing.

104
00:05:12.000 --> 00:05:15.040
Again, the Usage page shows you how to configure

105
00:05:15.040 --> 00:05:17.080
that plugin from a base perspective

106
00:05:17.080 --> 00:05:19.070
and there's also examples on using

107
00:05:19.070 --> 00:05:22.040
different test frameworks outside of JUnit

108
00:05:22.040 --> 00:05:26.000
using things like Cucumber, how to set up tests,

109
00:05:26.000 --> 00:05:29.020
how to skip tests after failures, things like that.

110
00:05:29.020 --> 00:05:32.040
Again you have a very large list of documentation

111
00:05:32.040 --> 00:05:35.040
one of the real benefits of Apache Maven.

112
00:05:35.040 --> 00:05:37.060
Let's jump back out to the beginning once again

113
00:05:37.060 --> 00:05:39.090
and we're going to take a look at the last core plugin

114
00:05:39.090 --> 00:05:41.050
that we're going to talk about today

115
00:05:41.050 --> 00:05:44.040
and that's the failsafe plugin.

116
00:05:44.040 --> 00:05:46.080
Now the failsafe plugin is really cool

117
00:05:46.080 --> 00:05:49.060
if you are doing integration testing.

118
00:05:49.060 --> 00:05:51.060
It allows you to put your integration test

119
00:05:51.060 --> 00:05:55.000
into a separate structure within your project

120
00:05:55.000 --> 00:05:57.010
and have those integration tests run

121
00:05:57.010 --> 00:05:59.030
at any point in the lifecycle.

122
00:05:59.030 --> 00:06:02.020
This is really powerful if you're deploying code

123
00:06:02.020 --> 00:06:04.040
and then want to run those integration tests

124
00:06:04.040 --> 00:06:07.060
as part of your standard build process.

125
00:06:07.060 --> 00:06:10.010
In this example, it'll show you how to use

126
00:06:10.010 --> 00:06:14.000
different types of things with this failsafe plugin

127
00:06:14.000 --> 00:06:16.030
in addition to the standard usage.

128
00:06:16.030 --> 00:06:19.010
So take a look at it, read the documentation,

129
00:06:19.010 --> 00:06:20.070
you may find something of value here

130
00:06:20.070 --> 00:06:24.080
especially if you are doing large-scale CICD

131
00:06:24.080 --> 00:06:27.000
with Apache Maven.

