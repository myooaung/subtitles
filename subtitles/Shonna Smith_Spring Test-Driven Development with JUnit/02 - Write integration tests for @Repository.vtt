WEBVTT
1
00:00:00.070 --> 00:00:01.090
- [Instructor] Now we're ready to write

2
00:00:01.090 --> 00:00:07.010
some integration tests for our Spring repository components.

3
00:00:07.010 --> 00:00:10.000
Since this is an integration test, we want to see how well

4
00:00:10.000 --> 00:00:12.070
our contact management data access component

5
00:00:12.070 --> 00:00:16.040
puts data into the database or retrieves it.

6
00:00:16.040 --> 00:00:18.070
As usual, there's a bit of setup to do.

7
00:00:18.070 --> 00:00:22.050
We are only focusing on testing our repository components,

8
00:00:22.050 --> 00:00:26.030
so we want to tell JUnit not to load any controllers

9
00:00:26.030 --> 00:00:29.080
or service components, and for this type of testing,

10
00:00:29.080 --> 00:00:33.000
a new setup need is we have to load

11
00:00:33.000 --> 00:00:35.060
JPA testing configurations.

12
00:00:35.060 --> 00:00:39.040
So let's started, and you'll see what that means.

13
00:00:39.040 --> 00:00:42.080
So here in our exercise project, I'm going to drill down

14
00:00:42.080 --> 00:00:46.080
into source test Java tree,

15
00:00:46.080 --> 00:00:52.020
and down into the data.repos package,

16
00:00:52.020 --> 00:00:53.060
and we want to open up this

17
00:00:53.060 --> 00:00:59.030
CustomerContactRepositoryIntegrationTest.

18
00:00:59.030 --> 00:01:01.010
I'm going to double-click on this tab

19
00:01:01.010 --> 00:01:04.040
so we can maximize this window.

20
00:01:04.040 --> 00:01:06.010
So in terms of setup needs,

21
00:01:06.010 --> 00:01:09.040
you'll see the very familiar RunWith annotation.

22
00:01:09.040 --> 00:01:14.070
What's new for us now is the annotation for DataJpaTest.

23
00:01:14.070 --> 00:01:17.040
This is a shortcut annotation that gives us

24
00:01:17.040 --> 00:01:21.080
a lot of the things we need for testing JPA code.

25
00:01:21.080 --> 00:01:24.010
There's also a new annotation here,

26
00:01:24.010 --> 00:01:26.070
AutoConfigureTestDatabase.

27
00:01:26.070 --> 00:01:30.040
This is letting us set up which type of database

28
00:01:30.040 --> 00:01:32.030
we want to use for our testing.

29
00:01:32.030 --> 00:01:35.000
We have the option of using an embedded database.

30
00:01:35.000 --> 00:01:37.060
We also have the option of just using the data source

31
00:01:37.060 --> 00:01:40.060
we already have configured here in our local environment,

32
00:01:40.060 --> 00:01:44.090
and for the sake of simplicity, that's the one I'm choosing.

33
00:01:44.090 --> 00:01:47.030
Something I also want to call your attention to.

34
00:01:47.030 --> 00:01:50.010
We're injecting our TestEntityManager,

35
00:01:50.010 --> 00:01:53.020
and you'll see why that's useful in a second,

36
00:01:53.020 --> 00:01:56.040
and we're also injecting or auto-wiring

37
00:01:56.040 --> 00:01:59.000
the CustomerContactRepository component

38
00:01:59.000 --> 00:02:02.040
because that's the component we want to test.

39
00:02:02.040 --> 00:02:06.050
The test case we're working on now is testFindByEmail,

40
00:02:06.050 --> 00:02:09.040
and what I want to do is set up a scenario

41
00:02:09.040 --> 00:02:15.040
where we're creating a contact that has an email address,

42
00:02:15.040 --> 00:02:20.080
and I already have someone in mind.

43
00:02:20.080 --> 00:02:22.050
I'm just going to make up an email address here,

44
00:02:22.050 --> 00:02:27.020
fredj@myemail.com, and that's all I really need

45
00:02:27.020 --> 00:02:29.090
for that contact so far.

46
00:02:29.090 --> 00:02:32.030
So I'm going to copy that email address,

47
00:02:32.030 --> 00:02:35.020
and I already have the line of code

48
00:02:35.020 --> 00:02:39.010
where I want to test my findByEmail

49
00:02:39.010 --> 00:02:42.010
or my customerContactRepository.

50
00:02:42.010 --> 00:02:46.040
I'm just going to paste in that email.

51
00:02:46.040 --> 00:02:50.090
So that's what I want to find, but let me jump back.

52
00:02:50.090 --> 00:02:54.050
I have to make sure it's there in the database first,

53
00:02:54.050 --> 00:02:57.010
and the way I'm going to do that for this test

54
00:02:57.010 --> 00:02:59.060
is I'm going to take advantage of the fact

55
00:02:59.060 --> 00:03:03.000
that I have access to our entity manager,

56
00:03:03.000 --> 00:03:07.020
which allows me to directly persist or save

57
00:03:07.020 --> 00:03:09.050
this new contact.

58
00:03:09.050 --> 00:03:12.080
So now this new contact with this email address

59
00:03:12.080 --> 00:03:15.030
that I just made up, it's going to be saved

60
00:03:15.030 --> 00:03:18.000
directly by the entity manager,

61
00:03:18.000 --> 00:03:20.040
and I have my line of code set up,

62
00:03:20.040 --> 00:03:24.050
where I'm calling the FindByEmail on my repository,

63
00:03:24.050 --> 00:03:28.040
and then I have an assert here already set up too.

64
00:03:28.040 --> 00:03:31.010
Now I'm going to copy and paste in this email

65
00:03:31.010 --> 00:03:34.010
just to avoid any mistypes.

66
00:03:34.010 --> 00:03:37.050
Copy, paste.

67
00:03:37.050 --> 00:03:44.060
So, now I'm going to run this test, and what I expect to see

68
00:03:44.060 --> 00:03:46.080
is of course JUnit green bar.

69
00:03:46.080 --> 00:03:49.050
Let me go over here in my package explorer.

70
00:03:49.050 --> 00:03:54.000
I'm going to expand my test class, and go right-click

71
00:03:54.000 --> 00:04:01.030
on the method that I want to run as a JUnit test.

72
00:04:01.030 --> 00:04:08.040
I run it, I wait a bit, and I see the green bar,

73
00:04:08.040 --> 00:04:10.090
and that's exactly what I wanted to see.

74
00:04:10.090 --> 00:04:15.060
So I saved a new contact, I was able to find it,

75
00:04:15.060 --> 00:04:18.050
I was able to assert that it was there,

76
00:04:18.050 --> 00:04:20.080
and I got what I needed.

77
00:04:20.080 --> 00:04:23.010
So let's do one last thing.

78
00:04:23.010 --> 00:04:26.060
We want to prove that our database was left in a good state.

79
00:04:26.060 --> 00:04:28.090
So I already have a query ready to go here.

80
00:04:28.090 --> 00:04:31.070
Well, I'm going to select the contact ID

81
00:04:31.070 --> 00:04:34.020
and the contact first name

82
00:04:34.020 --> 00:04:37.000
from the customer contact table.

83
00:04:37.000 --> 00:04:41.000
Let's run this query, and we get back nothing,

84
00:04:41.000 --> 00:04:42.070
an empty result set.

85
00:04:42.070 --> 00:04:44.070
That's exactly what I expected.

86
00:04:44.070 --> 00:04:47.090
This lets us know that we were able to run a test

87
00:04:47.090 --> 00:04:49.050
that altered the database

88
00:04:49.050 --> 00:04:52.090
and by the end of that test, the database was rolled back

89
00:04:52.090 --> 00:04:55.090
to its original clean state.

90
00:04:55.090 --> 00:04:59.030
Let's review what we just accomplished here.

91
00:04:59.030 --> 00:05:03.010
Yes, we created a test class for our data repository.

92
00:05:03.010 --> 00:05:05.020
It was an integration test,

93
00:05:05.020 --> 00:05:08.010
but we also configured a test database

94
00:05:08.010 --> 00:05:10.050
that had transactional behavior,

95
00:05:10.050 --> 00:05:14.040
and we'll see the proof of that in a second.

96
00:05:14.040 --> 00:05:17.000
We asserted our test database record,

97
00:05:17.000 --> 00:05:19.030
where we were able to access the test

98
00:05:19.030 --> 00:05:22.000
entity manager to do so.

99
00:05:22.000 --> 00:05:24.020
What this allowed us to do

100
00:05:24.020 --> 00:05:28.010
is not only test that our findBy method was working

101
00:05:28.010 --> 00:05:30.080
but it is a form of entity testing.

102
00:05:30.080 --> 00:05:34.010
Remember, the CustomerContact object is an entity.

103
00:05:34.010 --> 00:05:36.070
What we're doing here is making sure that

104
00:05:36.070 --> 00:05:39.030
all of the mapping is correct between an entity

105
00:05:39.030 --> 00:05:42.040
and the table that it represents,

106
00:05:42.040 --> 00:05:45.020
but a whole lot more happened that you may not have seen

107
00:05:45.020 --> 00:05:48.010
so we're going to review a little deeper.

108
00:05:48.010 --> 00:05:50.090
That DataJpaTest annotation,

109
00:05:50.090 --> 00:05:56.030
it packed a whole lot of magic in one single annotation.

110
00:05:56.030 --> 00:05:58.000
It's what I like to call one of those

111
00:05:58.000 --> 00:06:02.040
combo Spring annotations, which is really a shorthand way

112
00:06:02.040 --> 00:06:05.010
of adding a whole bundle of annotations

113
00:06:05.010 --> 00:06:07.070
that tend to go well together.

114
00:06:07.070 --> 00:06:10.080
I've listed a few here, but actually

115
00:06:10.080 --> 00:06:16.070
the DataJpaTest annotation is a shorthand for several more.

116
00:06:16.070 --> 00:06:18.010
Now I'm going to go over the ones

117
00:06:18.010 --> 00:06:21.000
that we got the most benefit from.

118
00:06:21.000 --> 00:06:24.050
First there's the AutoConfigureDataJpa annotation.

119
00:06:24.050 --> 00:06:27.010
This is a pretty basic need here.

120
00:06:27.010 --> 00:06:29.020
You're letting your test environment know that,

121
00:06:29.020 --> 00:06:32.060
hey, I'm about to start doing a lot of Jpa testing.

122
00:06:32.060 --> 00:06:36.030
So I need to know all of the components that make sense

123
00:06:36.030 --> 00:06:39.000
for this type of test objective.

124
00:06:39.000 --> 00:06:42.020
Next, the AutoConfigureTestDatabase.

125
00:06:42.020 --> 00:06:46.010
That annotation allowed us to specify

126
00:06:46.010 --> 00:06:48.090
what type of test database we want to use.

127
00:06:48.090 --> 00:06:51.050
The options were an embedded database,

128
00:06:51.050 --> 00:06:54.060
or porting to an external database,

129
00:06:54.060 --> 00:06:57.040
or simply accepting the default database

130
00:06:57.040 --> 00:07:00.090
that's already configured and found on our class path

131
00:07:00.090 --> 00:07:04.010
during execution of the test code.

132
00:07:04.010 --> 00:07:07.010
There's also configuring the TestEntityManager.

133
00:07:07.010 --> 00:07:10.020
As you saw in that test example, we had access to

134
00:07:10.020 --> 00:07:13.080
an entity manager that allowed us to pretty quickly

135
00:07:13.080 --> 00:07:18.060
create an entity and have it persisted in the database.

136
00:07:18.060 --> 00:07:22.090
Lastly, we got a transactional annotation as a result

137
00:07:22.090 --> 00:07:27.070
of using that one shorthand DataJpaTest annotation.

138
00:07:27.070 --> 00:07:30.020
That meant we got rollback behavior.

139
00:07:30.020 --> 00:07:34.020
So we were able to expect the database to be

140
00:07:34.020 --> 00:07:37.000
in a certain state when the test began,

141
00:07:37.000 --> 00:07:41.040
and also know exactly what that state was when a test ended.

142
00:07:41.040 --> 00:07:44.020
This means our tests are repeatable.

143
00:07:44.020 --> 00:07:46.060
Now when testing out the data access layer,

144
00:07:46.060 --> 00:07:49.080
repeatability can definitely be tricky.

145
00:07:49.080 --> 00:07:52.020
We want to make sure we begin and end a test

146
00:07:52.020 --> 00:07:54.060
with the database in a known state,

147
00:07:54.060 --> 00:07:56.090
and with the help of a little Spring

148
00:07:56.090 --> 00:08:01.000
and JUnit combination magic, we've done just that.

