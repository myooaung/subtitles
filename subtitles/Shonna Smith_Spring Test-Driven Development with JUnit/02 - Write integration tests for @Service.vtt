WEBVTT
1
00:00:00.080 --> 00:00:03.040
- [Instructor] Before we get started writing our first test,

2
00:00:03.040 --> 00:00:06.080
let's get clear again on our test objectives.

3
00:00:06.080 --> 00:00:09.010
Let's glance at a visual representation

4
00:00:09.010 --> 00:00:11.050
of what our test goals are.

5
00:00:11.050 --> 00:00:14.040
Remember, we're doing an integration test

6
00:00:14.040 --> 00:00:17.020
of our contact management service.

7
00:00:17.020 --> 00:00:21.030
We will start writing our first happy path test case

8
00:00:21.030 --> 00:00:23.020
where we're just testing how to add

9
00:00:23.020 --> 00:00:26.030
a new contact to our address book.

10
00:00:26.030 --> 00:00:28.020
Since this is an integration test,

11
00:00:28.020 --> 00:00:30.060
it involves exercising the interaction

12
00:00:30.060 --> 00:00:33.040
between the contact management service,

13
00:00:33.040 --> 00:00:37.080
and the contact management data access components.

14
00:00:37.080 --> 00:00:41.080
There's a bit of special JUnit and Spring set up to consider

15
00:00:41.080 --> 00:00:44.010
before we start testing.

16
00:00:44.010 --> 00:00:45.060
So let's preview some of those things

17
00:00:45.060 --> 00:00:47.050
that we're going to have to do.

18
00:00:47.050 --> 00:00:51.030
Since we're testing services and its dependencies,

19
00:00:51.030 --> 00:00:54.090
we don't want to run any controller components.

20
00:00:54.090 --> 00:00:56.090
Instead, we want to isolate

21
00:00:56.090 --> 00:01:00.000
just testing our service components

22
00:01:00.000 --> 00:01:01.090
and our data access components,

23
00:01:01.090 --> 00:01:05.010
and how those two things interact with each other.

24
00:01:05.010 --> 00:01:07.090
And because we are using real data access components,

25
00:01:07.090 --> 00:01:11.060
that also means we will connect to a real data source,

26
00:01:11.060 --> 00:01:13.080
which could be a test-specific data source

27
00:01:13.080 --> 00:01:16.000
or other staging database environment

28
00:01:16.000 --> 00:01:19.080
that you have set up and ready to go.

29
00:01:19.080 --> 00:01:22.070
For this exercise, we have a Spring project

30
00:01:22.070 --> 00:01:26.030
set up with the familiar Spring project layout.

31
00:01:26.030 --> 00:01:28.020
We have our production source

32
00:01:28.020 --> 00:01:30.050
in the source main java tree.

33
00:01:30.050 --> 00:01:34.080
And our test source code in the source test java tree,

34
00:01:34.080 --> 00:01:37.000
which I will expand now.

35
00:01:37.000 --> 00:01:38.080
And because we only care about testing

36
00:01:38.080 --> 00:01:40.030
our service components now,

37
00:01:40.030 --> 00:01:43.040
there is a service package.

38
00:01:43.040 --> 00:01:47.070
And in there, we have an integration test ready to go,

39
00:01:47.070 --> 00:01:49.030
which I will open.

40
00:01:49.030 --> 00:01:51.090
So the first thing we want to do,

41
00:01:51.090 --> 00:01:54.060
some of those housekeeping things that I mentioned.

42
00:01:54.060 --> 00:01:57.080
We have to instruct JUnit.

43
00:01:57.080 --> 00:02:01.020
Mow we are testing a Spring application.

44
00:02:01.020 --> 00:02:05.070
So we do that by adding the @RunWith annotation.

45
00:02:05.070 --> 00:02:08.090
The next thing we want to do is

46
00:02:08.090 --> 00:02:11.070
let JUnit know that not only are we testing

47
00:02:11.070 --> 00:02:12.050
a Spring application,

48
00:02:12.050 --> 00:02:15.040
but this is a Spring Boot application,

49
00:02:15.040 --> 00:02:19.090
so we're going to add the @SpringBootTest annotation.

50
00:02:19.090 --> 00:02:22.090
This is going to let the JUnit environments

51
00:02:22.090 --> 00:02:27.050
bootstrap all of the required Spring components.

52
00:02:27.050 --> 00:02:29.090
However, there is one caveat here,

53
00:02:29.090 --> 00:02:32.050
one more thing we want to add.

54
00:02:32.050 --> 00:02:35.060
Because we are only testing our service components,

55
00:02:35.060 --> 00:02:37.090
we want to also instruct JUnit

56
00:02:37.090 --> 00:02:42.040
to just load the components that we care about most,

57
00:02:42.040 --> 00:02:45.070
and ignore the ones that we don't care about.

58
00:02:45.070 --> 00:02:49.090
So we do that by adding the webEnvironment attribute.

59
00:02:49.090 --> 00:02:51.030
And we're going to tell it exactly

60
00:02:51.030 --> 00:02:54.050
what kind of web environment we want loaded during our test,

61
00:02:54.050 --> 00:02:57.030
which for our purposes, it's none.

62
00:02:57.030 --> 00:03:00.060
This means none of our controller components will be loaded,

63
00:03:00.060 --> 00:03:03.030
which is exactly what we want.

64
00:03:03.030 --> 00:03:06.030
For our simple example, there's not much gain there,

65
00:03:06.030 --> 00:03:08.010
because we don't have any

66
00:03:08.010 --> 00:03:10.070
or many controller components to begin wit.

67
00:03:10.070 --> 00:03:12.010
But in a real world scenario,

68
00:03:12.010 --> 00:03:13.040
this could become very useful

69
00:03:13.040 --> 00:03:15.010
when you really want to make sure that

70
00:03:15.010 --> 00:03:18.080
only what you need to load gets loaded during the test.

71
00:03:18.080 --> 00:03:20.030
So the next thing I want to point out

72
00:03:20.030 --> 00:03:23.050
is we have our context management service

73
00:03:23.050 --> 00:03:25.060
auto wired or injected in,

74
00:03:25.060 --> 00:03:26.090
because that is the component

75
00:03:26.090 --> 00:03:29.000
that we actually want to test.

76
00:03:29.000 --> 00:03:32.030
So at a minimum, we want to make sure that is a

77
00:03:32.030 --> 00:03:34.040
field on this test class.

78
00:03:34.040 --> 00:03:38.030
And now, we're going to begin our first test,

79
00:03:38.030 --> 00:03:41.030
which is the AddContactHappyPath.

80
00:03:41.030 --> 00:03:45.060
The first thing we want to do is create our contact.

81
00:03:45.060 --> 00:03:48.060
And for our testing,

82
00:03:48.060 --> 00:03:52.090
we're just going to set a few properties on this contact.

83
00:03:52.090 --> 00:03:57.080
So let's give our first contact a name.

84
00:03:57.080 --> 00:04:00.050
I'm going to call her Jenny.

85
00:04:00.050 --> 00:04:05.050
And let's give Jenny a last name.

86
00:04:05.050 --> 00:04:08.020
Let's call her Jenny Johnson.

87
00:04:08.020 --> 00:04:11.030
So I'm going to stop there for our needs,

88
00:04:11.030 --> 00:04:13.060
but in real test scenario,

89
00:04:13.060 --> 00:04:15.080
we would want to set more attributes on Jenny,

90
00:04:15.080 --> 00:04:19.060
maybe her address, her phone number, her email,

91
00:04:19.060 --> 00:04:22.010
but I want get to just running this test.

92
00:04:22.010 --> 00:04:24.020
So we've set up enough information about Jenny

93
00:04:24.020 --> 00:04:26.000
that we want to save,

94
00:04:26.000 --> 00:04:28.070
so let's call our contactsManagementService

95
00:04:28.070 --> 00:04:30.070
and save Jenny's record.

96
00:04:30.070 --> 00:04:33.020
So we're going to call the add method

97
00:04:33.020 --> 00:04:35.050
on our contactsManagementService.

98
00:04:35.050 --> 00:04:38.060
We're going to pass in the new contact

99
00:04:38.060 --> 00:04:41.040
that we just created for Jenny,

100
00:04:41.040 --> 00:04:44.070
and it should save.

101
00:04:44.070 --> 00:04:46.090
But that's not interesting enough,

102
00:04:46.090 --> 00:04:49.060
because we really want to see

103
00:04:49.060 --> 00:04:53.000
what gets returned from that save.

104
00:04:53.000 --> 00:04:56.020
And it will be a customer contact,

105
00:04:56.020 --> 00:04:59.080
object, but it will be a new object.

106
00:04:59.080 --> 00:05:04.000
So, now, this is where things get interesting.

107
00:05:04.000 --> 00:05:06.030
We want to compare

108
00:05:06.030 --> 00:05:09.090
what we send in, a contact,

109
00:05:09.090 --> 00:05:13.040
with what we got back, the new contact that was saved.

110
00:05:13.040 --> 00:05:16.050
And the way we could do that with JUnit,

111
00:05:16.050 --> 00:05:19.090
and this is where the power of JUnit comes in,

112
00:05:19.090 --> 00:05:21.020
is by

113
00:05:21.020 --> 00:05:23.040
creating a set of assertions,

114
00:05:23.040 --> 00:05:25.080
as many as you feel necessary

115
00:05:25.080 --> 00:05:28.020
or useful for your test needs.

116
00:05:28.020 --> 00:05:29.070
So I have a few here ready to go.

117
00:05:29.070 --> 00:05:32.020
These are kind of the basic ones,

118
00:05:32.020 --> 00:05:33.060
but you'll start to see a pattern here

119
00:05:33.060 --> 00:05:36.000
on the things you want to assert.

120
00:05:36.000 --> 00:05:37.040
The first thing I want to assert

121
00:05:37.040 --> 00:05:40.070
ist that the new contact isn't null.

122
00:05:40.070 --> 00:05:42.090
That's a good smoke test,

123
00:05:42.090 --> 00:05:44.020
just to make sure that the object

124
00:05:44.020 --> 00:05:47.050
that came back after the save actually got saved,

125
00:05:47.050 --> 00:05:49.050
and nothing went wrong there.

126
00:05:49.050 --> 00:05:51.010
Another good thing to assert

127
00:05:51.010 --> 00:05:54.050
is that the new contact actually has an ID.

128
00:05:54.050 --> 00:05:58.080
And the final assertion that I want to make for this example

129
00:05:58.080 --> 00:06:01.030
is just a simple comparison.

130
00:06:01.030 --> 00:06:03.030
I expect that that the record I save

131
00:06:03.030 --> 00:06:05.030
was actually Jenny's record,

132
00:06:05.030 --> 00:06:07.080
so I want to see for the new contact,

133
00:06:07.080 --> 00:06:10.080
did I get back something where the first name is Jenny?

134
00:06:10.080 --> 00:06:15.020
This assertEquals JUnit assertion is doing just that,

135
00:06:15.020 --> 00:06:18.050
a simple string comparison between what I expect,

136
00:06:18.050 --> 00:06:21.010
and what was actually returned.

137
00:06:21.010 --> 00:06:23.020
So now,

138
00:06:23.020 --> 00:06:26.030
let's run this test.

139
00:06:26.030 --> 00:06:29.030
I'm going to right click

140
00:06:29.030 --> 00:06:32.070
on the testAddContactHappyPath

141
00:06:32.070 --> 00:06:35.030
in my Explorer window,

142
00:06:35.030 --> 00:06:40.040
and then I want to run this as a JUnit test,

143
00:06:40.040 --> 00:06:46.040
and see the amazing green bar when it's done.

144
00:06:46.040 --> 00:06:49.000
Ah, and that's what we're looking for.

145
00:06:49.000 --> 00:06:53.070
When your test and all of your assertions have held true,

146
00:06:53.070 --> 00:06:56.050
this green bar will actually be green.

147
00:06:56.050 --> 00:06:59.070
If something went wrong, it will be red,

148
00:06:59.070 --> 00:07:01.080
and that's where you can go in and trouble shoot,

149
00:07:01.080 --> 00:07:07.000
either your test code or your actual production code.

150
00:07:07.000 --> 00:07:09.020
So, let's do one last thing.

151
00:07:09.020 --> 00:07:12.020
We've done some assertions, we ran our test,

152
00:07:12.020 --> 00:07:13.080
we've got the green bar we love to see

153
00:07:13.080 --> 00:07:16.010
after running a JUnit test.

154
00:07:16.010 --> 00:07:19.030
Let's go do one final check.

155
00:07:19.030 --> 00:07:21.060
Let's see what's in the database.

156
00:07:21.060 --> 00:07:25.070
So I've moved over into the MySQL browser.

157
00:07:25.070 --> 00:07:28.060
That let's me query tables on my database,

158
00:07:28.060 --> 00:07:32.030
and see what's happening in any of my tables.

159
00:07:32.030 --> 00:07:36.000
So right here I have a select statement ready to go.

160
00:07:36.000 --> 00:07:40.000
I just want to select the customer ID and the first name

161
00:07:40.000 --> 00:07:42.040
from my customer contact table.

162
00:07:42.040 --> 00:07:45.080
I'm expecting to see Jenny's record in there.

163
00:07:45.080 --> 00:07:47.030
And there she is.

164
00:07:47.030 --> 00:07:49.010
I ran the select query,

165
00:07:49.010 --> 00:07:52.090
and I see one record, Jenny's first name,

166
00:07:52.090 --> 00:07:54.050
Jenny's last name,

167
00:07:54.050 --> 00:07:56.070
and her record has an ID.

168
00:07:56.070 --> 00:07:59.070
That's exactly what I wanted to see.

169
00:07:59.070 --> 00:08:04.030
And now, we can get back to writing more tests.

170
00:08:04.030 --> 00:08:06.070
So let's review what just happened.

171
00:08:06.070 --> 00:08:10.010
We provided JUnit and Spring some important

172
00:08:10.010 --> 00:08:11.090
bootstrapping directives,

173
00:08:11.090 --> 00:08:13.070
so that the test could run

174
00:08:13.070 --> 00:08:16.060
with all of the Spring components needed,

175
00:08:16.060 --> 00:08:18.060
but also ignoring the Spring components

176
00:08:18.060 --> 00:08:21.040
that we don't need during the test.

177
00:08:21.040 --> 00:08:25.040
We created our ContactManagementServiceInegrationTest.

178
00:08:25.040 --> 00:08:29.070
And we added test coverage for the Add Contact feature.

179
00:08:29.070 --> 00:08:32.050
We got a green JUnit bar.

180
00:08:32.050 --> 00:08:35.090
And to be extra sure that our test was successful,

181
00:08:35.090 --> 00:08:39.020
we verified in our local MySQL database

182
00:08:39.020 --> 00:08:43.000
that the new contact record was indeed added.

183
00:08:43.000 --> 00:08:45.020
And finally, we have now paved the way

184
00:08:45.020 --> 00:08:48.000
to write more service integration test cases.

