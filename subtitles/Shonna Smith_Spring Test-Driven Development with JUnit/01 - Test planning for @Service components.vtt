WEBVTT
1
00:00:00.090 --> 00:00:02.030
- [Instructor] In this video,

2
00:00:02.030 --> 00:00:03.080
we're going to talk about how to plan

3
00:00:03.080 --> 00:00:07.000
for testing service components.

4
00:00:07.000 --> 00:00:09.050
We want to start testing the business logic layer

5
00:00:09.050 --> 00:00:12.040
of a Spring application.

6
00:00:12.040 --> 00:00:14.040
Recall that we are working on a fictitious

7
00:00:14.040 --> 00:00:18.010
eCommerce web application for a flower shop business.

8
00:00:18.010 --> 00:00:21.070
We're going to be adding the first automated test

9
00:00:21.070 --> 00:00:24.040
written for this application.

10
00:00:24.040 --> 00:00:26.090
If your team is deciding to practice test-driven

11
00:00:26.090 --> 00:00:29.020
development, then chances are pretty high

12
00:00:29.020 --> 00:00:31.040
that they're also practicing other habits

13
00:00:31.040 --> 00:00:33.070
that stem from an Agile methodology,

14
00:00:33.070 --> 00:00:35.030
such as writing user stories

15
00:00:35.030 --> 00:00:38.000
to begin planning feature development.

16
00:00:38.000 --> 00:00:39.090
So before we get into writing tests,

17
00:00:39.090 --> 00:00:43.010
let's review some user stories.

18
00:00:43.010 --> 00:00:44.090
One, there's an add contacts feature

19
00:00:44.090 --> 00:00:49.030
that was added to the system in the prior release.

20
00:00:49.030 --> 00:00:51.080
This just allowed a user to create contacts

21
00:00:51.080 --> 00:00:53.050
to their account,

22
00:00:53.050 --> 00:00:56.060
and start an address book feature.

23
00:00:56.060 --> 00:01:00.000
Well, what we're working on is for release two

24
00:01:00.000 --> 00:01:01.000
of the system,

25
00:01:01.000 --> 00:01:03.040
where we're going to take the add contacts feature

26
00:01:03.040 --> 00:01:05.000
a step further,

27
00:01:05.000 --> 00:01:07.090
and we're going to add something called contact occasions.

28
00:01:07.090 --> 00:01:11.010
This allows the user to add birthdates,

29
00:01:11.010 --> 00:01:12.060
or any other special dates,

30
00:01:12.060 --> 00:01:16.040
so that someone can receive flowers on those dates.

31
00:01:16.040 --> 00:01:18.050
Let's revisit our architecture again,

32
00:01:18.050 --> 00:01:21.080
just to show where we are in our testing process.

33
00:01:21.080 --> 00:01:24.040
Right now we're going to start writing tests

34
00:01:24.040 --> 00:01:28.020
just for our Spring Services components.

35
00:01:28.020 --> 00:01:30.020
Why are we beginning with service components?

36
00:01:30.020 --> 00:01:32.070
Because that is usually where some of the most important

37
00:01:32.070 --> 00:01:35.030
business logic is implemented.

38
00:01:35.030 --> 00:01:37.030
So, in terms of priorities,

39
00:01:37.030 --> 00:01:39.080
services are where test coverage is typically

40
00:01:39.080 --> 00:01:42.050
needed the most.

41
00:01:42.050 --> 00:01:44.030
And speaking of priorities,

42
00:01:44.030 --> 00:01:46.070
we should spend some time thinking of our test goals

43
00:01:46.070 --> 00:01:48.060
and objectives.

44
00:01:48.060 --> 00:01:50.060
It helps with overall time management

45
00:01:50.060 --> 00:01:53.000
to spend a little time thinking through

46
00:01:53.000 --> 00:01:54.020
a plan of action

47
00:01:54.020 --> 00:01:56.090
before you go straight to writing test code.

48
00:01:56.090 --> 00:01:58.080
In other words have a specific plan

49
00:01:58.080 --> 00:02:01.010
for how you're going to spend your test time.

50
00:02:01.010 --> 00:02:03.020
First it's just having a broad goal of

51
00:02:03.020 --> 00:02:06.090
adding test coverage to everything.

52
00:02:06.090 --> 00:02:08.080
Not all things are equally important

53
00:02:08.080 --> 00:02:10.080
from a testing perspective.

54
00:02:10.080 --> 00:02:12.090
Be clear on which components need test coverage,

55
00:02:12.090 --> 00:02:17.000
and which features are most in need of that coverage.

56
00:02:17.000 --> 00:02:19.010
For example, you may decide that Happy Path tests

57
00:02:19.010 --> 00:02:21.090
are first priority.

58
00:02:21.090 --> 00:02:23.090
Let's look at the test plan for H and P's

59
00:02:23.090 --> 00:02:26.010
service components.

60
00:02:26.010 --> 00:02:27.080
The plan should include deciding

61
00:02:27.080 --> 00:02:29.050
which type of tests are needed,

62
00:02:29.050 --> 00:02:31.070
and on a per future basis.

63
00:02:31.070 --> 00:02:33.020
The test type you start with could depend on timing

64
00:02:33.020 --> 00:02:37.000
and where you are in the development cycle.

65
00:02:37.000 --> 00:02:39.030
For the H and P application, we will be writing

66
00:02:39.030 --> 00:02:43.040
integration tests, as well as unit tests.

67
00:02:43.040 --> 00:02:45.080
Because the add contacts feature is so subtle

68
00:02:45.080 --> 00:02:48.050
and in production, it's actually a great place

69
00:02:48.050 --> 00:02:51.030
to start writing integration tests.

70
00:02:51.030 --> 00:02:53.040
Not only because it's relatively easy,

71
00:02:53.040 --> 00:02:55.070
but because it's possible.

72
00:02:55.070 --> 00:02:57.040
Every component that needs to be involved

73
00:02:57.040 --> 00:02:58.090
in the integration test

74
00:02:58.090 --> 00:03:00.060
is already mature and settled,

75
00:03:00.060 --> 00:03:04.010
so they are perfect candidates for an integration test,

76
00:03:04.010 --> 00:03:05.070
whereas the new feature,

77
00:03:05.070 --> 00:03:07.020
add contact occasions,

78
00:03:07.020 --> 00:03:09.060
has no code written at all.

79
00:03:09.060 --> 00:03:12.040
So that's a prime candidate for focusing our unit

80
00:03:12.040 --> 00:03:14.090
test efforts.

81
00:03:14.090 --> 00:03:16.070
At some in the development cycle,

82
00:03:16.070 --> 00:03:18.010
it might be a good idea to finish up

83
00:03:18.010 --> 00:03:19.090
the add contact occasions feature

84
00:03:19.090 --> 00:03:23.000
by creating an integration test for it.

85
00:03:23.000 --> 00:03:26.000
But for now, let's get starting writing some tests.

