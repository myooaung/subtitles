WEBVTT
1
00:00:00.080 --> 00:00:02.000
- [Instructor] Let's now turn our attention to

2
00:00:02.000 --> 00:00:03.070
creating test suites.

3
00:00:03.070 --> 00:00:06.040
We are able to combine several test cases to run

4
00:00:06.040 --> 00:00:07.080
as a grouping.

5
00:00:07.080 --> 00:00:10.050
This is also known as a test suite.

6
00:00:10.050 --> 00:00:12.030
Test suites are very useful

7
00:00:12.030 --> 00:00:15.090
to achieve a much broader testing objective.

8
00:00:15.090 --> 00:00:20.060
Some examples of test suites are, smoke tests,

9
00:00:20.060 --> 00:00:22.060
these are the kind of tests that you might want to have

10
00:00:22.060 --> 00:00:25.010
in place just to give you a good indication of basic

11
00:00:25.010 --> 00:00:26.090
system health.

12
00:00:26.090 --> 00:00:29.090
There's also a notion of iteration test suites.

13
00:00:29.090 --> 00:00:33.030
If your project is planned in iterations you may want

14
00:00:33.030 --> 00:00:36.080
to group the test cases for any of the work that's happening

15
00:00:36.080 --> 00:00:38.090
within an iteration.

16
00:00:38.090 --> 00:00:42.000
There's also something called a feature test,

17
00:00:42.000 --> 00:00:45.010
this is what we're going to do in our next exercise.

18
00:00:45.010 --> 00:00:47.080
We're going to combine several of the test classes

19
00:00:47.080 --> 00:00:49.020
that we've already developed,

20
00:00:49.020 --> 00:00:52.060
so that we can have a test suite for our add contact

21
00:00:52.060 --> 00:00:53.090
feature.

22
00:00:53.090 --> 00:00:57.080
Let's get started so you can see what that looks like.

23
00:00:57.080 --> 00:01:00.060
So we have an exercise project here, and I'm going to

24
00:01:00.060 --> 00:01:03.000
go into my source test Java tree

25
00:01:03.000 --> 00:01:06.060
and right here in my hansel and petal repackage

26
00:01:06.060 --> 00:01:11.030
I have an add contact feature test suite that I'm

27
00:01:11.030 --> 00:01:13.080
going to open up and

28
00:01:13.080 --> 00:01:16.010
let's maximize this window.

29
00:01:16.010 --> 00:01:18.090
You'll see the familiar run with annotation,

30
00:01:18.090 --> 00:01:23.050
what's new here is the type of runner we're using.

31
00:01:23.050 --> 00:01:25.090
We're using a suite class.

32
00:01:25.090 --> 00:01:29.010
This is letting j unit know that we want to create

33
00:01:29.010 --> 00:01:33.060
a test suite and we also have to supply the list of

34
00:01:33.060 --> 00:01:36.070
classes that we want to aggregate together.

35
00:01:36.070 --> 00:01:41.000
So for this particular test suite I chose to combine

36
00:01:41.000 --> 00:01:44.040
the context management service integration test,

37
00:01:44.040 --> 00:01:48.030
as well as the controller integration test and the

38
00:01:48.030 --> 00:01:50.070
repository integration test.

39
00:01:50.070 --> 00:01:54.010
And notice that other than creating the class

40
00:01:54.010 --> 00:01:58.020
there's no implementation it's intentionally empty.

41
00:01:58.020 --> 00:02:02.030
All that's really needed is all of the requisite test

42
00:02:02.030 --> 00:02:04.020
suite set up annotations.

43
00:02:04.020 --> 00:02:08.010
So now let's minimize our test class and run our test

44
00:02:08.010 --> 00:02:09.080
suite.

45
00:02:09.080 --> 00:02:12.080
I'm going to go back into my package explorer.

46
00:02:12.080 --> 00:02:18.030
I'm going to right click on the add contact test suite

47
00:02:18.030 --> 00:02:21.090
so that I can run it as a j unit test.

48
00:02:21.090 --> 00:02:24.010
Now there's several test classes involved here

49
00:02:24.010 --> 00:02:27.010
so there's a little bit of a wait.

50
00:02:27.010 --> 00:02:31.030
Once that's over you should see the j unit green bar.

51
00:02:31.030 --> 00:02:35.030
But let's expand this j unit tab, I want to show you

52
00:02:35.030 --> 00:02:40.040
maybe even prove to you that our test suite actually

53
00:02:40.040 --> 00:02:44.010
ran the classes that we wanted it to run.

54
00:02:44.010 --> 00:02:48.000
And let's expand it ran our context management

55
00:02:48.000 --> 00:02:51.020
service integration test if we expand that we'll see

56
00:02:51.020 --> 00:02:55.070
which particular test case, the add contact happy path.

57
00:02:55.070 --> 00:02:59.090
We included our context management controller integration

58
00:02:59.090 --> 00:03:03.040
test and if we expand that we can also see what

59
00:03:03.040 --> 00:03:10.000
ran and finally our repository integration test

60
00:03:10.000 --> 00:03:14.090
which ran our test find by email test case.

61
00:03:14.090 --> 00:03:17.070
So let's shrink that down.

62
00:03:17.070 --> 00:03:20.040
Now for a simple test suite I would say that was pretty

63
00:03:20.040 --> 00:03:24.090
thorough of course your test suite needs will differ.

64
00:03:24.090 --> 00:03:29.070
So let's review what we just accomplished.

65
00:03:29.070 --> 00:03:34.070
We made a feature test suite for our add contact feature

66
00:03:34.070 --> 00:03:37.080
where we combined all the efforts that we put into

67
00:03:37.080 --> 00:03:41.000
creating integration tests for our controller,

68
00:03:41.000 --> 00:03:45.050
our service and our repository components.

69
00:03:45.050 --> 00:03:48.000
We could have just as easily combined our unit test

70
00:03:48.000 --> 00:03:52.020
into a suite, the combination possibilities are endless

71
00:03:52.020 --> 00:03:54.080
but typically strategic.

72
00:03:54.080 --> 00:03:57.020
You would have of course make test suite aggregation

73
00:03:57.020 --> 00:04:00.000
choices that suit your project needs.

