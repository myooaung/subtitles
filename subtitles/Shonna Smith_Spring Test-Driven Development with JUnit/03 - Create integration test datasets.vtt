WEBVTT
1
00:00:00.050 --> 00:00:03.000
- [Instructor] We just went through a pretty trivial example

2
00:00:03.000 --> 00:00:05.060
of creating test setup data

3
00:00:05.060 --> 00:00:10.020
by instantiating an entity object, setting values in it,

4
00:00:10.020 --> 00:00:11.070
and using our EntityManager

5
00:00:11.070 --> 00:00:14.080
to persist that object into the database.

6
00:00:14.080 --> 00:00:16.080
Sometimes you need to simulate a fuller

7
00:00:16.080 --> 00:00:19.060
and more involved data scenario

8
00:00:19.060 --> 00:00:22.030
to thoroughly test data access code.

9
00:00:22.030 --> 00:00:24.080
Well, there's a framework for that.

10
00:00:24.080 --> 00:00:26.080
It's called DBUnit.

11
00:00:26.080 --> 00:00:28.070
And for our next exercise,

12
00:00:28.070 --> 00:00:32.000
we will introduce the use of this framework.

13
00:00:32.000 --> 00:00:34.040
DBUnit is a JUnit extension

14
00:00:34.040 --> 00:00:37.080
that helps developers manage the nontrivial task

15
00:00:37.080 --> 00:00:40.040
of keeping the data store in a known state

16
00:00:40.040 --> 00:00:43.010
before and after testing.

17
00:00:43.010 --> 00:00:46.020
As usual with any of our test classes,

18
00:00:46.020 --> 00:00:48.000
there are setup needs.

19
00:00:48.000 --> 00:00:51.020
And for this case, we will have to load

20
00:00:51.020 --> 00:00:54.090
some DBUnit specific configurations.

21
00:00:54.090 --> 00:00:59.020
So let's get started and see what that looks like.

22
00:00:59.020 --> 00:01:01.070
So in this exercise, I'm going to go

23
00:01:01.070 --> 00:01:05.080
into my src/test/java tree as normal.

24
00:01:05.080 --> 00:01:09.060
And into my data.repos package

25
00:01:09.060 --> 00:01:10.050
and I'm going to open up

26
00:01:10.050 --> 00:01:16.090
the CustomerContactRepositoryDbUnitTest.

27
00:01:16.090 --> 00:01:19.070
Now take a look at the setup that's going on here.

28
00:01:19.070 --> 00:01:23.050
A lot is familiar, but a couple of things are new.

29
00:01:23.050 --> 00:01:26.030
We have our test execution listeners,

30
00:01:26.030 --> 00:01:30.010
which are going to help us with DBUnit setup.

31
00:01:30.010 --> 00:01:32.020
The final annotation is the one

32
00:01:32.020 --> 00:01:34.040
that's really giving us what we need,

33
00:01:34.040 --> 00:01:36.050
DatabaseSetup, and we are referring

34
00:01:36.050 --> 00:01:39.030
to an XML file that I created

35
00:01:39.030 --> 00:01:41.050
with our test-datasets.

36
00:01:41.050 --> 00:01:44.040
Let's go ahead and minimize this class for one second

37
00:01:44.040 --> 00:01:47.070
and let's open up that test-datasets file.

38
00:01:47.070 --> 00:01:50.050
I'm going to go into my Package Explorer

39
00:01:50.050 --> 00:01:53.090
and under src/test/resources

40
00:01:53.090 --> 00:01:56.000
is that XML file.

41
00:01:56.000 --> 00:01:58.090
And let's see what we have in here.

42
00:01:58.090 --> 00:02:02.090
So this is some pretty DBUnit specific information.

43
00:02:02.090 --> 00:02:05.020
We are creating a dataset element.

44
00:02:05.020 --> 00:02:07.030
And inside that element,

45
00:02:07.030 --> 00:02:09.020
we create an element for each record

46
00:02:09.020 --> 00:02:12.020
that we want to insert into the database

47
00:02:12.020 --> 00:02:16.010
to simulate the data setup needs that we have.

48
00:02:16.010 --> 00:02:19.020
Now for our tests, we have some pretty simple needs.

49
00:02:19.020 --> 00:02:22.050
I'm simply creating four customer contact records.

50
00:02:22.050 --> 00:02:24.040
I have one for Jenny

51
00:02:24.040 --> 00:02:26.090
and I added some more of Jenny's friends,

52
00:02:26.090 --> 00:02:29.090
Elaine and Susan and Bernard.

53
00:02:29.090 --> 00:02:34.010
So let's go back into our test class.

54
00:02:34.010 --> 00:02:37.000
I'm going to maximize this window again.

55
00:02:37.000 --> 00:02:42.000
And you'll see I have the test case ready to go here for us.

56
00:02:42.000 --> 00:02:44.030
testFindByEmail.

57
00:02:44.030 --> 00:02:49.090
So, what I want to do is create a CustomerContact

58
00:02:49.090 --> 00:02:52.000
and in order to do that,

59
00:02:52.000 --> 00:02:58.080
I'm going to rely on my customerContactRepository.

60
00:02:58.080 --> 00:03:03.080
And we have a findByEmail method

61
00:03:03.080 --> 00:03:06.030
on our repository.

62
00:03:06.030 --> 00:03:08.000
And I'm going to type one of the emails

63
00:03:08.000 --> 00:03:11.070
that I know exist in my test dataset.

64
00:03:11.070 --> 00:03:16.010
So Elaine had an email address in there, so let's use hers,

65
00:03:16.010 --> 00:03:21.080
elaine@myemail.com.

66
00:03:21.080 --> 00:03:24.070
Let's finish this line up.

67
00:03:24.070 --> 00:03:28.010
And that's really all we want to find for this test.

68
00:03:28.010 --> 00:03:30.080
So let's also finish up.

69
00:03:30.080 --> 00:03:32.070
Let's assert something.

70
00:03:32.070 --> 00:03:38.060
I'm just going to do pretty simple assertion.

71
00:03:38.060 --> 00:03:40.010
I want to know that the contact

72
00:03:40.010 --> 00:03:43.040
that came back from my finder

73
00:03:43.040 --> 00:03:49.010
actually has an email address.

74
00:03:49.010 --> 00:03:51.030
And because sometimes I want to be safe

75
00:03:51.030 --> 00:03:56.040
and not retype things, I'm going to copy and paste.

76
00:03:56.040 --> 00:03:59.090
Let's end this line of code, the semicolon.

77
00:03:59.090 --> 00:04:02.090
And now we're ready to run this test.

78
00:04:02.090 --> 00:04:08.010
So I'm going to minimize the window here

79
00:04:08.010 --> 00:04:12.060
and go back over into my Package Explorer,

80
00:04:12.060 --> 00:04:17.060
right-click on my FindByEmail test case,

81
00:04:17.060 --> 00:04:22.000
run it as a JUnit Test.

82
00:04:22.000 --> 00:04:24.090
Wait a few seconds.

83
00:04:24.090 --> 00:04:28.060
And eventually, I should see the green bar.

84
00:04:28.060 --> 00:04:31.040
It always makes me happy when I see that.

85
00:04:31.040 --> 00:04:32.060
And that's it.

86
00:04:32.060 --> 00:04:35.030
So notice what was missing here.

87
00:04:35.030 --> 00:04:39.040
We didn't really have to deal with an entity manager.

88
00:04:39.040 --> 00:04:43.040
We didn't have to create a fake entity,

89
00:04:43.040 --> 00:04:45.040
set some data into it.

90
00:04:45.040 --> 00:04:48.050
All we needed was our test-datasets.xml file.

91
00:04:48.050 --> 00:04:49.070
And from this, you can imagine

92
00:04:49.070 --> 00:04:52.040
that when you have more thorough needs,

93
00:04:52.040 --> 00:04:58.000
you can create more information or more datasets files.

94
00:04:58.000 --> 00:05:00.090
So let's review what we just accomplished.

95
00:05:00.090 --> 00:05:03.070
We created a DBUnit dataset,

96
00:05:03.070 --> 00:05:06.040
and we did so in an XML file.

97
00:05:06.040 --> 00:05:09.040
We were able to completely specify data scenario

98
00:05:09.040 --> 00:05:12.050
without creating data entity classes,

99
00:05:12.050 --> 00:05:15.080
instantiating those classes, et cetera.

100
00:05:15.080 --> 00:05:18.070
This is extremely useful when your project is in a stage

101
00:05:18.070 --> 00:05:22.030
where those types of classes maybe don't exist yet

102
00:05:22.030 --> 00:05:23.080
or maybe you're not the developer

103
00:05:23.080 --> 00:05:27.000
that has the responsibility of making those classes,

104
00:05:27.000 --> 00:05:29.050
but you still want to get started testing

105
00:05:29.050 --> 00:05:32.060
with creating scenarios in a database

106
00:05:32.060 --> 00:05:35.030
and testing how you find that data

107
00:05:35.030 --> 00:05:39.010
or maybe even testing how you insert more data.

108
00:05:39.010 --> 00:05:42.060
We also covered some pretty simple findBy() test cases.

109
00:05:42.060 --> 00:05:45.090
In our instance, it was the findByEmail.

110
00:05:45.090 --> 00:05:47.000
But hopefully that was enough for you

111
00:05:47.000 --> 00:05:49.070
to get an idea of the many possibilities

112
00:05:49.070 --> 00:05:55.000
that are beyond what we covered.

