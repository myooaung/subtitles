WEBVTT
1
00:00:00.080 --> 00:00:02.020
- [Instructor] Now it's time for us to make a plan

2
00:00:02.020 --> 00:00:04.090
for testing our repository components.

3
00:00:04.090 --> 00:00:07.020
These are the components that we write so that

4
00:00:07.020 --> 00:00:09.080
we can have access to a data store.

5
00:00:09.080 --> 00:00:13.030
So let's take another quick reference at our application

6
00:00:13.030 --> 00:00:16.070
architecture overview, just to point out where we are

7
00:00:16.070 --> 00:00:19.050
in our overall test plan.

8
00:00:19.050 --> 00:00:22.070
We are focusing on testing spring data access

9
00:00:22.070 --> 00:00:24.030
components.

10
00:00:24.030 --> 00:00:26.050
Just as in other test plans we have to ask ourselves

11
00:00:26.050 --> 00:00:29.090
the usual questions of what are our highest priorities,

12
00:00:29.090 --> 00:00:34.020
what kind of tests are we writing, are they unit tests,

13
00:00:34.020 --> 00:00:36.040
are they integration tests, are they both.

14
00:00:36.040 --> 00:00:39.040
And for the persistence layer we do have an additional

15
00:00:39.040 --> 00:00:42.080
question that we need to ask ourselves in our planning,

16
00:00:42.080 --> 00:00:46.000
is our code going to access a relational database,

17
00:00:46.000 --> 00:00:48.050
a graph database, both?

18
00:00:48.050 --> 00:00:51.010
These are things we need to keep in mind and plan for.

19
00:00:51.010 --> 00:00:54.070
For our particular exercises we will be using a relational

20
00:00:54.070 --> 00:00:59.070
database and for our persistence layer testing

21
00:00:59.070 --> 00:01:03.090
we will only focus on integration test, we will not

22
00:01:03.090 --> 00:01:05.070
be doing unit test.

23
00:01:05.070 --> 00:01:08.040
The reason for that is there's typically not much

24
00:01:08.040 --> 00:01:11.050
return on investment of unit testing at the data

25
00:01:11.050 --> 00:01:14.060
repository layer of a spring application,

26
00:01:14.060 --> 00:01:17.040
as it is the spring framework providing a lot of

27
00:01:17.040 --> 00:01:20.010
what could be called the units.

28
00:01:20.010 --> 00:01:22.070
For example a lot of the actual implementation

29
00:01:22.070 --> 00:01:26.050
for data repository class is already done by the

30
00:01:26.050 --> 00:01:27.060
spring framework.

31
00:01:27.060 --> 00:01:30.060
So unless you find yourself overwriting and customizing

32
00:01:30.060 --> 00:01:33.090
a lot of that, it is sufficient to plan for integration

33
00:01:33.090 --> 00:01:35.060
tests only.

34
00:01:35.060 --> 00:01:39.000
And for those pretty pragmatic reasons, we will focus

35
00:01:39.000 --> 00:01:41.080
on simply testing the interaction between the data

36
00:01:41.080 --> 00:01:46.010
repository classes and the data store itself.

37
00:01:46.010 --> 00:01:49.040
This type of testing is done to ensure things like

38
00:01:49.040 --> 00:01:53.080
entity mappings are fine, query semantics are fine

39
00:01:53.080 --> 00:01:57.080
and any custom sequel statements and that transactional

40
00:01:57.080 --> 00:02:00.040
configurations work as expected.

41
00:02:00.040 --> 00:02:03.000
Now that we have a plan, let's get started.

