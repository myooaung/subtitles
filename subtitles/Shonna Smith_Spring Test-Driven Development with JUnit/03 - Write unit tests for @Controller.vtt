WEBVTT
1
00:00:00.070 --> 00:00:02.020
- [Instructor] Let's now look at how

2
00:00:02.020 --> 00:00:03.080
we might write some unit tests

3
00:00:03.080 --> 00:00:06.060
for spring controller component,

4
00:00:06.060 --> 00:00:09.090
but first let's review our unit test objectives.

5
00:00:09.090 --> 00:00:11.050
We're going to be writing a contact

6
00:00:11.050 --> 00:00:14.020
management unit test class where

7
00:00:14.020 --> 00:00:17.050
we're just testing adding a contact.

8
00:00:17.050 --> 00:00:19.030
And we isolate our test to just

9
00:00:19.030 --> 00:00:21.080
the contact management controller

10
00:00:21.080 --> 00:00:23.040
which means we're going to mock out

11
00:00:23.040 --> 00:00:26.000
our contact management service.

12
00:00:26.000 --> 00:00:28.060
There will be a bit of setup as usual.

13
00:00:28.060 --> 00:00:30.070
So just to preview what that is,

14
00:00:30.070 --> 00:00:32.070
we will need to mimic or mock

15
00:00:32.070 --> 00:00:35.020
some web browser behavior.

16
00:00:35.020 --> 00:00:37.000
We want to instruct our test environment

17
00:00:37.000 --> 00:00:39.020
to load our controllers.

18
00:00:39.020 --> 00:00:41.010
We also want to instruct our test environment

19
00:00:41.010 --> 00:00:43.080
to just load mocks for our service components

20
00:00:43.080 --> 00:00:47.010
or anything else beyond a service layer.

21
00:00:47.010 --> 00:00:49.060
So let's get started.

22
00:00:49.060 --> 00:00:52.030
Here in our Spring project, I'm going to go

23
00:00:52.030 --> 00:00:56.010
into our source test Java Tree

24
00:00:56.010 --> 00:01:00.070
and go to our controller package

25
00:01:00.070 --> 00:01:02.050
and I want to open up the contacts

26
00:01:02.050 --> 00:01:06.020
management controller unit test.

27
00:01:06.020 --> 00:01:11.070
And let me double click to expand this window.

28
00:01:11.070 --> 00:01:15.010
And let's walk through a little bit of the setup.

29
00:01:15.010 --> 00:01:21.060
What's new for our setup here is the @WebMvcTest annotation.

30
00:01:21.060 --> 00:01:23.080
That's basically letting our test environment know

31
00:01:23.080 --> 00:01:28.030
that we will be unit testing an MVC controller.

32
00:01:28.030 --> 00:01:32.010
We're also going to add a mock bean

33
00:01:32.010 --> 00:01:35.000
for our contacts management service

34
00:01:35.000 --> 00:01:36.080
because we want to mock out the

35
00:01:36.080 --> 00:01:38.020
service component completely.

36
00:01:38.020 --> 00:01:42.000
Remember we're just focusing on unit testing our controller.

37
00:01:42.000 --> 00:01:45.090
So we then need to inject mocks onto

38
00:01:45.090 --> 00:01:48.010
our contact management controller.

39
00:01:48.010 --> 00:01:51.050
So we need to make sure we add that annotation.

40
00:01:51.050 --> 00:01:54.000
And we have some setup needs where we're

41
00:01:54.000 --> 00:01:56.050
just initializing our mocks.

42
00:01:56.050 --> 00:02:00.040
So now let's scroll down to our test case here.

43
00:02:00.040 --> 00:02:04.010
The test for Add Contact Happy Path,

44
00:02:04.010 --> 00:02:06.000
it begins with us just setting up

45
00:02:06.000 --> 00:02:09.030
a mock customer contact record.

46
00:02:09.030 --> 00:02:12.040
This is the record that the mock business

47
00:02:12.040 --> 00:02:15.030
service will return us.

48
00:02:15.030 --> 00:02:18.070
And for now, we're going to add

49
00:02:18.070 --> 00:02:23.050
just a simple amount of information.

50
00:02:23.050 --> 00:02:26.020
Let's give a first name to this contact.

51
00:02:26.020 --> 00:02:29.030
So now we have a contact for Fred

52
00:02:29.030 --> 00:02:31.050
and the next thing we're going to do

53
00:02:31.050 --> 00:02:35.020
for our setup is mock out the business service

54
00:02:35.020 --> 00:02:38.000
returning this contact to us.

55
00:02:38.000 --> 00:02:43.020
So we're going to call on the mock business service.

56
00:02:43.020 --> 00:02:46.060
Any time a customer contact class is added,

57
00:02:46.060 --> 00:02:49.050
simply return the mock contact record

58
00:02:49.050 --> 00:02:52.000
that we just established.

59
00:02:52.000 --> 00:02:53.090
The next thing you want to do is simulate

60
00:02:53.090 --> 00:02:59.000
the form bean that would post from the web browser.

61
00:02:59.000 --> 00:03:02.040
So let's setup some information that

62
00:03:02.040 --> 00:03:06.060
might be in that form bean.

63
00:03:06.060 --> 00:03:08.000
So this will be the kind of thing

64
00:03:08.000 --> 00:03:11.070
that a user would type into a web form.

65
00:03:11.070 --> 00:03:17.020
So maybe they type Fred's name.

66
00:03:17.020 --> 00:03:19.040
Let's just add something else to make

67
00:03:19.040 --> 00:03:22.070
this a little more interesting.

68
00:03:22.070 --> 00:03:31.050
Let's give Fred an email, fredj@myemail.com.

69
00:03:31.050 --> 00:03:33.020
So this is simulating what a user would type

70
00:03:33.020 --> 00:03:36.030
in a web form.

71
00:03:36.030 --> 00:03:38.080
And the next thing you really want to get to is showing

72
00:03:38.080 --> 00:03:42.030
how we're going to use the mock MVC framework

73
00:03:42.030 --> 00:03:45.000
to simulate posting this form or submitting

74
00:03:45.000 --> 00:03:47.090
this form to the controller.

75
00:03:47.090 --> 00:03:50.070
So on the mock MVC component, we're going to call

76
00:03:50.070 --> 00:03:53.090
a perform or post.

77
00:03:53.090 --> 00:04:00.040
We're going to send in the contact form bean.

78
00:04:00.040 --> 00:04:04.070
So I'm going to copy the name of that class.

79
00:04:04.070 --> 00:04:07.070
I'm going to pass that into my post

80
00:04:07.070 --> 00:04:09.040
and then I'm going to do something

81
00:04:09.040 --> 00:04:11.090
in the Mockito framework which would be

82
00:04:11.090 --> 00:04:16.060
equivalent to assertions.

83
00:04:16.060 --> 00:04:21.050
We need to setup here what we expect to get back.

84
00:04:21.050 --> 00:04:27.040
Well I'm expecting status code of okay

85
00:04:27.040 --> 00:04:30.020
because this is a happy path test.

86
00:04:30.020 --> 00:04:34.090
I'm also expecting a return and that will complete

87
00:04:34.090 --> 00:04:37.030
a happy path scenario.

88
00:04:37.030 --> 00:04:42.060
So let's minimize this window and let's run this test.

89
00:04:42.060 --> 00:04:44.080
I'm going to go back into my package explorer

90
00:04:44.080 --> 00:04:51.040
and right click on my test for Add Contact Happy Path.

91
00:04:51.040 --> 00:04:57.000
And let's run as a JUnit test.

92
00:04:57.000 --> 00:04:59.060
And wait for that lovely green bar

93
00:04:59.060 --> 00:05:02.020
and that's what we have.

94
00:05:02.020 --> 00:05:06.030
But let's take this test one step further.

95
00:05:06.030 --> 00:05:08.050
We have a happy path.

96
00:05:08.050 --> 00:05:11.000
Let's consider an unhappy path.

97
00:05:11.000 --> 00:05:13.010
So I've started a test case called

98
00:05:13.010 --> 00:05:18.070
testAddContactBizServiceRuleNotSatisfied.

99
00:05:18.070 --> 00:05:20.060
So we want to simulate what would happen

100
00:05:20.060 --> 00:05:22.050
if the user forgets to type in

101
00:05:22.050 --> 00:05:26.090
a required piece of information like the first name.

102
00:05:26.090 --> 00:05:30.020
As far as the business service implementation is concerned,

103
00:05:30.020 --> 00:05:32.080
a business rule violation should result

104
00:05:32.080 --> 00:05:35.060
in a null object being returned which is

105
00:05:35.060 --> 00:05:39.030
why we have simulated that scenario here.

106
00:05:39.030 --> 00:05:41.050
Whenever a customer contact is added,

107
00:05:41.050 --> 00:05:44.000
simply return null.

108
00:05:44.000 --> 00:05:46.080
Let's move on now to simulating

109
00:05:46.080 --> 00:05:50.000
what the user would enter into the form

110
00:05:50.000 --> 00:05:52.030
when they forgot to type the first name.

111
00:05:52.030 --> 00:05:58.020
So let's just enter a last name here.

112
00:05:58.020 --> 00:06:00.000
And scroll down a bit here.

113
00:06:00.000 --> 00:06:02.010
I'm going to copy the name of this variable

114
00:06:02.010 --> 00:06:06.040
because I want to send that into my form submission

115
00:06:06.040 --> 00:06:13.020
and I expect a status of this time not okay.

116
00:06:13.020 --> 00:06:15.010
I know that this controller is implemented

117
00:06:15.010 --> 00:06:17.040
to return a redirect to the user

118
00:06:17.040 --> 00:06:21.070
and I happen to know that that status code is a 302.

119
00:06:21.070 --> 00:06:25.090
So I expect a 302 code to be returned to the browser

120
00:06:25.090 --> 00:06:29.030
when a business rule has been violated.

121
00:06:29.030 --> 00:06:32.000
So let's save this test and let's minimize

122
00:06:32.000 --> 00:06:35.080
the window here and let's run that test.

123
00:06:35.080 --> 00:06:38.050
I'm going to go back into my package explorer,

124
00:06:38.050 --> 00:06:41.080
right click on the test.

125
00:06:41.080 --> 00:06:45.030
Run it as a JUnit.

126
00:06:45.030 --> 00:06:50.010
And wait for that green bar and we got what we wanted there.

127
00:06:50.010 --> 00:06:53.020
So let's just look at one last simple thing.

128
00:06:53.020 --> 00:06:57.030
Something I've gotten started which you can surely complete.

129
00:06:57.030 --> 00:07:00.040
We are now ready to start writing more unit tests.

130
00:07:00.040 --> 00:07:02.020
Remember there's a new feature coming.

131
00:07:02.020 --> 00:07:06.070
The test for add contact occasion can now be written.

132
00:07:06.070 --> 00:07:08.030
Let's review what we just did.

133
00:07:08.030 --> 00:07:10.010
We demonstrated how you can do some

134
00:07:10.010 --> 00:07:12.020
pretty in-depth controller testing

135
00:07:12.020 --> 00:07:14.060
without even starting a web server

136
00:07:14.060 --> 00:07:17.090
simply by using the mock MVC framework

137
00:07:17.090 --> 00:07:20.020
to mock out all of the controller's interactions

138
00:07:20.020 --> 00:07:23.030
with a web server and a web browser.

139
00:07:23.030 --> 00:07:24.090
We showed that you can unit test

140
00:07:24.090 --> 00:07:27.060
a controller's behavior, both with a mock server

141
00:07:27.060 --> 00:07:30.050
and your mock service components.

142
00:07:30.050 --> 00:07:32.080
This means a controller can be fully developed

143
00:07:32.080 --> 00:07:35.060
and tested independent of the service

144
00:07:35.060 --> 00:07:37.090
component it relies on.

145
00:07:37.090 --> 00:07:40.030
We also showed that the controller's view routing is

146
00:07:40.030 --> 00:07:42.080
sending the user to the correct webpage

147
00:07:42.080 --> 00:07:46.060
or a redirect when it's supposed to do so.

148
00:07:46.060 --> 00:07:48.060
With the benefits of mocks in place

149
00:07:48.060 --> 00:07:50.090
where we needed them, we were able to add

150
00:07:50.090 --> 00:07:54.080
test coverage for the existing add contact feature.

151
00:07:54.080 --> 00:07:58.000
And we had just enough groundwork laid to begin

152
00:07:58.000 --> 00:08:00.050
adding test coverage for the new feature

153
00:08:00.050 --> 00:08:02.030
Add Contact Occasion.

154
00:08:02.030 --> 00:08:04.090
Now we are in position to stay in flow

155
00:08:04.090 --> 00:08:07.090
with writing test code then production code,

156
00:08:07.090 --> 00:08:12.030
then test code and so on, keeping the test driven

157
00:08:12.030 --> 00:08:16.000
cycle going to drive a single component to completion.

