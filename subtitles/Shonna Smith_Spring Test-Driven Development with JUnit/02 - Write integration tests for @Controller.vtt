WEBVTT
1
00:00:00.090 --> 00:00:02.000
- [Instructor] We're ready to begin writing

2
00:00:02.000 --> 00:00:06.080
our first integration test for a controller component.

3
00:00:06.080 --> 00:00:09.000
So once again another quick review

4
00:00:09.000 --> 00:00:12.030
of what exactly our objectives are.

5
00:00:12.030 --> 00:00:14.040
This is an integration test which means

6
00:00:14.040 --> 00:00:18.000
all components are real and no mocks involved

7
00:00:18.000 --> 00:00:20.000
at this stage of testing.

8
00:00:20.000 --> 00:00:22.030
We want to test what happens when a real

9
00:00:22.030 --> 00:00:24.070
contact management controller interacts

10
00:00:24.070 --> 00:00:27.070
with a real contact management service

11
00:00:27.070 --> 00:00:30.020
and when that contact management service

12
00:00:30.020 --> 00:00:33.090
accesses real data access components.

13
00:00:33.090 --> 00:00:36.090
So another preview on what we're going

14
00:00:36.090 --> 00:00:39.030
to have to tell JUnit to do.

15
00:00:39.030 --> 00:00:42.000
In a word, we want it to do everything.

16
00:00:42.000 --> 00:00:45.020
So we want the JUnit environment to provide

17
00:00:45.020 --> 00:00:49.000
us full servlet engine or web environment behavior,

18
00:00:49.000 --> 00:00:51.060
and we want to load all types of components,

19
00:00:51.060 --> 00:00:56.000
controllers, services, and our data repository components.

20
00:00:56.000 --> 00:00:58.010
So let's get started.

21
00:00:58.010 --> 00:01:01.030
For this exercise, we'll be testing a controller

22
00:01:01.030 --> 00:01:04.090
that is located in our source test Java Tree

23
00:01:04.090 --> 00:01:07.060
like all test code and I'm going to expand

24
00:01:07.060 --> 00:01:11.010
our controller package where I have ready to go

25
00:01:11.010 --> 00:01:13.060
a contacts management controller,

26
00:01:13.060 --> 00:01:16.040
and this is an integration test.

27
00:01:16.040 --> 00:01:18.050
So to read this a little easier,

28
00:01:18.050 --> 00:01:21.030
I'm going to expand the window.

29
00:01:21.030 --> 00:01:23.060
As you can see here, our run width

30
00:01:23.060 --> 00:01:26.050
annotation is the same as before.

31
00:01:26.050 --> 00:01:30.060
The Spring boot test annotation is similar.

32
00:01:30.060 --> 00:01:35.020
The difference now is our web environment is no longer none.

33
00:01:35.020 --> 00:01:38.060
We actually want to simulate a real web environment

34
00:01:38.060 --> 00:01:41.000
with a real servlet engine running

35
00:01:41.000 --> 00:01:42.090
and we're going to choose a random port

36
00:01:42.090 --> 00:01:45.030
because that works fine for us for now.

37
00:01:45.030 --> 00:01:47.080
But in your actual testing, you do have

38
00:01:47.080 --> 00:01:50.060
the flexibility to change this to a real port

39
00:01:50.060 --> 00:01:52.040
just in case you're working on an environment

40
00:01:52.040 --> 00:01:54.070
where certain ports are already in use

41
00:01:54.070 --> 00:01:57.020
and you want to avoid conflicts.

42
00:01:57.020 --> 00:01:59.050
Just as before, we make sure we inject

43
00:01:59.050 --> 00:02:03.050
in the actual controller class we plan to test.

44
00:02:03.050 --> 00:02:05.030
And we're going to begin with

45
00:02:05.030 --> 00:02:08.050
our Add Contact Happy Path Test

46
00:02:08.050 --> 00:02:11.020
where we set up our usual customer contact

47
00:02:11.020 --> 00:02:13.070
with Jenny Johnson's information.

48
00:02:13.070 --> 00:02:16.090
And now what we're going to do is call

49
00:02:16.090 --> 00:02:21.030
our contacts management controller

50
00:02:21.030 --> 00:02:27.040
and let's just test what happens when we send in

51
00:02:27.040 --> 00:02:32.060
this Jenny object that we've already setup.

52
00:02:32.060 --> 00:02:35.060
And what we're simulating here is

53
00:02:35.060 --> 00:02:40.030
a customer contact form being that was posted.

54
00:02:40.030 --> 00:02:43.050
So imagine a form on a webpage

55
00:02:43.050 --> 00:02:46.070
where the user has typed in the first name of Jenny

56
00:02:46.070 --> 00:02:48.090
and the last name of Johnson.

57
00:02:48.090 --> 00:02:51.070
And they've hit the submit button

58
00:02:51.070 --> 00:02:54.030
and that's going to send in this form bean.

59
00:02:54.030 --> 00:02:57.020
Another thing to show here is that

60
00:02:57.020 --> 00:03:01.040
on our controller method, we do expect a specific outcome.

61
00:03:01.040 --> 00:03:03.080
Right now it's just a simple string.

62
00:03:03.080 --> 00:03:06.040
For the purposes of this simple exercise,

63
00:03:06.040 --> 00:03:08.030
I'm sure you could imagine how much

64
00:03:08.030 --> 00:03:10.010
more useful that would be if it were

65
00:03:10.010 --> 00:03:12.000
a different type of object.

66
00:03:12.000 --> 00:03:14.060
So another thing we're going to do now,

67
00:03:14.060 --> 00:03:18.070
unlike before when we were using assert equals quite a bit,

68
00:03:18.070 --> 00:03:20.070
we're going to show an improvement that was made

69
00:03:20.070 --> 00:03:23.090
to the JUnit framework a few years ago

70
00:03:23.090 --> 00:03:26.060
where instead of assert equals,

71
00:03:26.060 --> 00:03:30.020
they have more expressive assertion methods.

72
00:03:30.020 --> 00:03:37.000
For instance, assert that outcome is equal to.

73
00:03:37.000 --> 00:03:42.050
I'm expecting a string that comes back that says success.

74
00:03:42.050 --> 00:03:47.030
And now that one example completes

75
00:03:47.030 --> 00:03:49.030
my controller integration test

76
00:03:49.030 --> 00:03:53.030
and I want to minimize my window again

77
00:03:53.030 --> 00:04:00.050
and expand my test class and right click

78
00:04:00.050 --> 00:04:03.040
on the happy path method because I just want

79
00:04:03.040 --> 00:04:07.050
to show what happens when we run that.

80
00:04:07.050 --> 00:04:11.080
I'm certainly hoping for, ah, the JUnit green bar.

81
00:04:11.080 --> 00:04:14.030
That's what I love to see.

82
00:04:14.030 --> 00:04:18.050
So another thing I want to show this test class is

83
00:04:18.050 --> 00:04:23.010
our first time testing a not so happy path.

84
00:04:23.010 --> 00:04:26.000
So imagine this was an add contact scenario

85
00:04:26.000 --> 00:04:29.050
where the user forgot to type a first name.

86
00:04:29.050 --> 00:04:32.010
In our system, we consider the first name

87
00:04:32.010 --> 00:04:36.020
to be required information from the user.

88
00:04:36.020 --> 00:04:40.040
So, if they miss that first name,

89
00:04:40.040 --> 00:04:42.050
then I'm going to expect the outcome

90
00:04:42.050 --> 00:04:45.020
to be a message that says failure.

91
00:04:45.020 --> 00:04:47.090
So I've done the same assertion as above,

92
00:04:47.090 --> 00:04:52.000
assert that the outcome is equal to failure.

93
00:04:52.000 --> 00:04:58.060
Now let's run this test and see what happens.

94
00:04:58.060 --> 00:05:01.010
Ah, now this is interesting.

95
00:05:01.010 --> 00:05:04.000
My failure scenario test failed.

96
00:05:04.000 --> 00:05:08.000
This is an example of how running JUnit tests

97
00:05:08.000 --> 00:05:11.070
and having the right kind of strategic assertions

98
00:05:11.070 --> 00:05:15.060
can help inform better designed decisions.

99
00:05:15.060 --> 00:05:18.020
So at this point, I would switch out

100
00:05:18.020 --> 00:05:23.000
of writing JUnit code and into writing production code

101
00:05:23.000 --> 00:05:26.000
because I've spotted a design flaw here.

102
00:05:26.000 --> 00:05:28.010
I was expecting a failure outcome

103
00:05:28.010 --> 00:05:30.050
and I didn't get one.

104
00:05:30.050 --> 00:05:34.090
So let's go back over into our package explorer here

105
00:05:34.090 --> 00:05:39.040
and let's look at why this may have failed.

106
00:05:39.040 --> 00:05:46.000
And I have a suspicion that it's in our service component.

107
00:05:46.000 --> 00:05:48.040
And look at that.

108
00:05:48.040 --> 00:05:50.040
There's a new contact that comes in

109
00:05:50.040 --> 00:05:53.020
and all we do is save it.

110
00:05:53.020 --> 00:05:56.060
What we really want to do is at least check

111
00:05:56.060 --> 00:06:00.070
for one required piece of information.

112
00:06:00.070 --> 00:06:03.090
So let's say for the purposes of what we're doing,

113
00:06:03.090 --> 00:06:07.010
we only require the first name.

114
00:06:07.010 --> 00:06:11.080
So what I want to do is first see

115
00:06:11.080 --> 00:06:16.030
if the first name is not null.

116
00:06:16.030 --> 00:06:19.020
If it's not null, then I want to call

117
00:06:19.020 --> 00:06:23.080
the save method on my customer contact repository.

118
00:06:23.080 --> 00:06:26.090
So now that I'm checking that my first name is not null

119
00:06:26.090 --> 00:06:31.060
before I do a save, I'm also designing this code

120
00:06:31.060 --> 00:06:34.080
so that if the first name is null,

121
00:06:34.080 --> 00:06:37.030
I just want to return a null object.

122
00:06:37.030 --> 00:06:39.000
Now it may not be bullet proof,

123
00:06:39.000 --> 00:06:41.090
but for this exercise it'll do.

124
00:06:41.090 --> 00:06:44.080
So let's minimize this window again

125
00:06:44.080 --> 00:06:47.000
and let's try running that test again

126
00:06:47.000 --> 00:06:48.050
that just failed.

127
00:06:48.050 --> 00:06:51.060
I expect my failure scenario to be caught

128
00:06:51.060 --> 00:06:56.000
which means this test should succeed.

129
00:06:56.000 --> 00:07:00.060
What I'm hoping for this time is the green bar.

130
00:07:00.060 --> 00:07:04.090
So now I have two test cases that are succeeding.

131
00:07:04.090 --> 00:07:07.060
And in the process, I've also shown how

132
00:07:07.060 --> 00:07:10.040
a failure test case scenario is driving

133
00:07:10.040 --> 00:07:13.030
you towards better design decisions

134
00:07:13.030 --> 00:07:15.040
which is the whole point of writing

135
00:07:15.040 --> 00:07:17.020
JUnit tests to begin with.

136
00:07:17.020 --> 00:07:20.080
You want to stay in cycles of writing tests

137
00:07:20.080 --> 00:07:24.000
that fail so that you can fix designs

138
00:07:24.000 --> 00:07:28.050
and then come back and see those tests succeed.

139
00:07:28.050 --> 00:07:30.090
So let's recap what we just accomplished.

140
00:07:30.090 --> 00:07:34.010
We created a contacts management controller

141
00:07:34.010 --> 00:07:36.010
integration test.

142
00:07:36.010 --> 00:07:37.070
We made sure we had test coverage

143
00:07:37.070 --> 00:07:41.020
on our happy path for Add Contact.

144
00:07:41.020 --> 00:07:43.090
We also added a test case to check

145
00:07:43.090 --> 00:07:47.040
for one particular failure scenario.

146
00:07:47.040 --> 00:07:49.090
And that is the scenario of a user forgetting

147
00:07:49.090 --> 00:07:52.000
to type in a first name.

148
00:07:52.000 --> 00:07:56.000
After writing that test and seeing that test fail,

149
00:07:56.000 --> 00:08:00.030
we then took the time to adjust a bad design decision

150
00:08:00.030 --> 00:08:02.030
because of a test outcome.

151
00:08:02.030 --> 00:08:05.060
Then we revisited that test to run it again

152
00:08:05.060 --> 00:08:07.030
and see it succeed.

153
00:08:07.030 --> 00:08:10.000
And that's exactly how we wanted this cycle to go.

