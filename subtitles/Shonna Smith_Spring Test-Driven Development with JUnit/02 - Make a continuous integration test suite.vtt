WEBVTT
1
00:00:00.070 --> 00:00:02.010
- [Instructor] Let's now turn our attention

2
00:00:02.010 --> 00:00:04.090
to a kind of test suite that is very often

3
00:00:04.090 --> 00:00:06.060
employed by teams that are practicing

4
00:00:06.060 --> 00:00:08.010
test driven development,

5
00:00:08.010 --> 00:00:12.000
as well as other agile methodology habits.

6
00:00:12.000 --> 00:00:13.010
If you're on a team that practices

7
00:00:13.010 --> 00:00:15.090
test driven development, then chances are high

8
00:00:15.090 --> 00:00:18.030
that this is the kind of team that highly favors

9
00:00:18.030 --> 00:00:21.040
the use of a continuous integration process.

10
00:00:21.040 --> 00:00:22.090
This typically means that there's

11
00:00:22.090 --> 00:00:25.010
a continuous integration server

12
00:00:25.010 --> 00:00:29.090
involved in the automated build and deployment processes.

13
00:00:29.090 --> 00:00:33.040
A single smoke test, or a smoke test suite,

14
00:00:33.040 --> 00:00:36.040
is a good thing to incorporate into the cycle

15
00:00:36.040 --> 00:00:39.010
of your continuous integration server.

16
00:00:39.010 --> 00:00:40.070
This is the kind of test that is run

17
00:00:40.070 --> 00:00:42.030
after every check-in.

18
00:00:42.030 --> 00:00:44.070
There could also be another kind of test

19
00:00:44.070 --> 00:00:46.050
that is run whenever a full deployment

20
00:00:46.050 --> 00:00:48.040
is about to occur.

21
00:00:48.040 --> 00:00:50.030
Let's get started on an example

22
00:00:50.030 --> 00:00:52.040
of a continuous integration test suite

23
00:00:52.040 --> 00:00:54.050
that we might want to make.

24
00:00:54.050 --> 00:00:56.080
So I'm going into my Spring project,

25
00:00:56.080 --> 00:01:00.080
I'm going to drill down in my Source Test Java Tree

26
00:01:00.080 --> 00:01:06.010
and open my com.hanselnpetal root package.

27
00:01:06.010 --> 00:01:10.010
And I'm going to open the Continuous Integration Test Suite,

28
00:01:10.010 --> 00:01:13.020
which should have the familiar run with annotations

29
00:01:13.020 --> 00:01:16.050
and we are supplying a suite runner

30
00:01:16.050 --> 00:01:19.080
to let your unit know we're running a test suite

31
00:01:19.080 --> 00:01:22.060
and we also have to supply a list of suite classes,

32
00:01:22.060 --> 00:01:25.090
which as you notice now is empty.

33
00:01:25.090 --> 00:01:30.020
And I want to open one of the test classes that I've made.

34
00:01:30.020 --> 00:01:33.040
Simply for this test suite.

35
00:01:33.040 --> 00:01:38.010
Let me maximize the Data Store Systems Health Test.

36
00:01:38.010 --> 00:01:42.020
What I have here is a test called dbPrimaryIsOk.

37
00:01:42.020 --> 00:01:44.050
What I'm trying to suggest here is that

38
00:01:44.050 --> 00:01:47.060
you might want to run a check against

39
00:01:47.060 --> 00:01:51.020
database systems or any kind of similar external systems

40
00:01:51.020 --> 00:01:54.010
that your application connects to.

41
00:01:54.010 --> 00:01:56.040
And you may consider that type of test

42
00:01:56.040 --> 00:02:00.010
a good indicator of overall system health.

43
00:02:00.010 --> 00:02:02.010
For this test, I'm simply getting a connection

44
00:02:02.010 --> 00:02:03.090
to our data source.

45
00:02:03.090 --> 00:02:07.010
In asserting that the connection is not null

46
00:02:07.010 --> 00:02:10.060
and that the schema name is what I expect it to be,

47
00:02:10.060 --> 00:02:13.050
which is spring tdd.

48
00:02:13.050 --> 00:02:15.050
So let's minimize this.

49
00:02:15.050 --> 00:02:19.070
Before we do, let's copy this test name.

50
00:02:19.070 --> 00:02:23.060
And now I'm going to switch back to my test suite class

51
00:02:23.060 --> 00:02:28.010
and I want to add my Data Store System Helth Test class

52
00:02:28.010 --> 00:02:30.090
to my list of test suites.

53
00:02:30.090 --> 00:02:35.040
And there's one other class I also want to add.

54
00:02:35.040 --> 00:02:38.000
I'm going to open the Context Management Control

55
00:02:38.000 --> 00:02:40.010
Integration Test.

56
00:02:40.010 --> 00:02:43.020
And I'm going to copy that class name

57
00:02:43.020 --> 00:02:45.040
and then once again, switch back to my

58
00:02:45.040 --> 00:02:47.030
Integration Test Suite.

59
00:02:47.030 --> 00:02:49.080
I'm going to paste the name of this class

60
00:02:49.080 --> 00:02:52.030
into our list.

61
00:02:52.030 --> 00:02:53.060
Now I'm going to put a new line here,

62
00:02:53.060 --> 00:02:56.000
just for readability.

63
00:02:56.000 --> 00:02:57.030
And let me explain why I'm adding

64
00:02:57.030 --> 00:03:00.070
our Control Integration Test.

65
00:03:00.070 --> 00:03:03.040
This could be an example of the kind of feature

66
00:03:03.040 --> 00:03:06.090
in a system that if it were very settled,

67
00:03:06.090 --> 00:03:10.060
because it involves so many different components,

68
00:03:10.060 --> 00:03:12.030
which are also very subtle,

69
00:03:12.030 --> 00:03:16.000
running this test is a good overall indicator

70
00:03:16.000 --> 00:03:17.090
of system health.

71
00:03:17.090 --> 00:03:21.000
So now let's run our test suite.

72
00:03:21.000 --> 00:03:24.030
I'm going to go back to my Package Explorer.

73
00:03:24.030 --> 00:03:30.090
Right click on my Continuous Integration Test Suite class,

74
00:03:30.090 --> 00:03:35.000
run it as a J Unit Test.

75
00:03:35.000 --> 00:03:37.050
I'm going to wait for all of the test classes

76
00:03:37.050 --> 00:03:40.070
in that suite to run.

77
00:03:40.070 --> 00:03:42.040
And then let's see.

78
00:03:42.040 --> 00:03:44.080
We're looking for the green J Unit bar.

79
00:03:44.080 --> 00:03:47.000
And that's what we got.

80
00:03:47.000 --> 00:03:49.060
So let's review what we just accomplished.

81
00:03:49.060 --> 00:03:51.050
I just showed a very simple example

82
00:03:51.050 --> 00:03:54.050
of the kind of test suite you might want

83
00:03:54.050 --> 00:03:57.070
to fold into your continuous integration cycle.

84
00:03:57.070 --> 00:03:59.050
Because this type of test is attached

85
00:03:59.050 --> 00:04:02.010
to a continuous integration cycle,

86
00:04:02.010 --> 00:04:04.070
you want to make sure it's pretty lightweight.

87
00:04:04.070 --> 00:04:07.040
Some teams run a full integration

88
00:04:07.040 --> 00:04:10.060
every 15 minutes, some every hour.

89
00:04:10.060 --> 00:04:13.040
The timing of your continuous integration cycles

90
00:04:13.040 --> 00:04:15.060
will be a good guide for just how much

91
00:04:15.060 --> 00:04:19.090
you want to happen in your smoke test suite.

92
00:04:19.090 --> 00:04:22.000
It really comes down to your team's definition

93
00:04:22.000 --> 00:04:24.000
of what a smoke test is.

