WEBVTT
1
00:00:00.080 --> 00:00:02.010
- [Instructor] So now let's turn our attention

2
00:00:02.010 --> 00:00:05.090
to writing some unit tests for our service components.

3
00:00:05.090 --> 00:00:09.000
And just as we did for our integration testing,

4
00:00:09.000 --> 00:00:12.030
let's review our unit test objectives.

5
00:00:12.030 --> 00:00:16.090
We will writing contact management unit test code

6
00:00:16.090 --> 00:00:19.070
with the purpose of just testing the contact

7
00:00:19.070 --> 00:00:21.040
management service.

8
00:00:21.040 --> 00:00:25.020
In particular, the add contact method.

9
00:00:25.020 --> 00:00:27.000
Since we're isolating our testing

10
00:00:27.000 --> 00:00:31.000
to just the service component unit,

11
00:00:31.000 --> 00:00:34.020
we are going to mock our data access component.

12
00:00:34.020 --> 00:00:36.030
So for this test, we'll see something

13
00:00:36.030 --> 00:00:38.010
that we didn't have to worry about

14
00:00:38.010 --> 00:00:40.010
in our integration test.

15
00:00:40.010 --> 00:00:43.020
Because we do not care much about the actual behavior

16
00:00:43.020 --> 00:00:46.020
of a data access component, we will substitute a mock

17
00:00:46.020 --> 00:00:50.050
and we will be introducing a new framework to show that.

18
00:00:50.050 --> 00:00:53.000
But let's look at some of our other previews

19
00:00:53.000 --> 00:00:56.060
of what else we need to instruct JUnit to do

20
00:00:56.060 --> 00:00:59.010
just to begin our testing.

21
00:00:59.010 --> 00:01:01.000
Just as before we're going to instruct

22
00:01:01.000 --> 00:01:03.050
our JUnit test class to not load

23
00:01:03.050 --> 00:01:05.030
any of our web environment or any

24
00:01:05.030 --> 00:01:07.090
of our controller components.

25
00:01:07.090 --> 00:01:10.070
And for the first time, we will be using mocks

26
00:01:10.070 --> 00:01:12.090
so we will have to give JUnit some special

27
00:01:12.090 --> 00:01:17.010
instructions to let it know how to load our mocks.

28
00:01:17.010 --> 00:01:18.090
And as I mentioned, we are using

29
00:01:18.090 --> 00:01:21.000
the Mockito framework which works nicely

30
00:01:21.000 --> 00:01:24.040
within a JUnit test environment.

31
00:01:24.040 --> 00:01:26.020
And I should also point out that

32
00:01:26.020 --> 00:01:28.020
because we're mocking all things related

33
00:01:28.020 --> 00:01:31.000
to data access, there is no data source

34
00:01:31.000 --> 00:01:34.000
to configure or be concerned about.

35
00:01:34.000 --> 00:01:35.090
So let's get started on our service

36
00:01:35.090 --> 00:01:40.010
component unit testing.

37
00:01:40.010 --> 00:01:41.090
So once again we're going to open up

38
00:01:41.090 --> 00:01:44.050
a spring boot project.

39
00:01:44.050 --> 00:01:49.030
And we're going to go to our source test Java tree

40
00:01:49.030 --> 00:01:54.020
and drill down into our service package.

41
00:01:54.020 --> 00:01:56.080
I'm going to open up our contacts

42
00:01:56.080 --> 00:02:00.040
management service unit test.

43
00:02:00.040 --> 00:02:03.020
So just as before we had to instruct JUnit

44
00:02:03.020 --> 00:02:06.020
that this is a spring boot test

45
00:02:06.020 --> 00:02:09.030
and for the web environment, we're choosing none.

46
00:02:09.030 --> 00:02:11.060
That's our way of saying we don't want any controllers

47
00:02:11.060 --> 00:02:16.020
or servlet like components to load during our test.

48
00:02:16.020 --> 00:02:20.020
But unlike before, our run with instruction is

49
00:02:20.020 --> 00:02:22.080
no longer a spring runner.

50
00:02:22.080 --> 00:02:26.090
Instead we're using a Mockito JUnit runner.

51
00:02:26.090 --> 00:02:28.090
This lets the JUnit environment know

52
00:02:28.090 --> 00:02:33.020
that we will be using mock objects.

53
00:02:33.020 --> 00:02:37.060
In particular, the first mock and the only mock

54
00:02:37.060 --> 00:02:39.040
that we really need to be concerned about

55
00:02:39.040 --> 00:02:43.090
at this time is our customer contact repository.

56
00:02:43.090 --> 00:02:46.070
This is how we access the database

57
00:02:46.070 --> 00:02:49.000
and get data in and out of the database,

58
00:02:49.000 --> 00:02:51.020
but that component isn't ready yet

59
00:02:51.020 --> 00:02:54.040
so this is the reason why we need to mock it.

60
00:02:54.040 --> 00:02:57.050
And because the contacts management service

61
00:02:57.050 --> 00:03:00.040
relies on that component, we also need

62
00:03:00.040 --> 00:03:05.020
to supply a directive to let the JUnit runtime

63
00:03:05.020 --> 00:03:07.060
environment know to inject the mocks

64
00:03:07.060 --> 00:03:10.020
that we need onto this service.

65
00:03:10.020 --> 00:03:12.050
The next thing I want to point out in this test is

66
00:03:12.050 --> 00:03:15.060
there is a setup method which is a JUnit convention

67
00:03:15.060 --> 00:03:20.030
to have a method that follows the naming convention of setup

68
00:03:20.030 --> 00:03:24.030
and by supplying the before annotation,

69
00:03:24.030 --> 00:03:25.090
we're saying that this is code

70
00:03:25.090 --> 00:03:29.090
that we want to execute before any of our test cases.

71
00:03:29.090 --> 00:03:33.050
Now let's get started working on our first test case

72
00:03:33.050 --> 00:03:38.020
and we are going to test the Add Contact Happy Path.

73
00:03:38.020 --> 00:03:40.020
Once again, I've gotten us started

74
00:03:40.020 --> 00:03:43.060
with a customer contact object here

75
00:03:43.060 --> 00:03:46.060
where I'm setting the first name Jenny

76
00:03:46.060 --> 00:03:49.080
and the last name Johnson just as before.

77
00:03:49.080 --> 00:03:52.070
But the difference here which I've already typed

78
00:03:52.070 --> 00:03:56.030
just to save a little time, but I'm going to uncomment this,

79
00:03:56.030 --> 00:03:59.080
this is a when statement which comes

80
00:03:59.080 --> 00:04:04.050
from the Mockito framework and this one line of code

81
00:04:04.050 --> 00:04:06.070
saves us a lot of trouble.

82
00:04:06.070 --> 00:04:09.040
And the way it is written is very expressive

83
00:04:09.040 --> 00:04:11.040
of what's going on here.

84
00:04:11.040 --> 00:04:13.050
So let's walk through this.

85
00:04:13.050 --> 00:04:16.080
What this line is saying is when a customer

86
00:04:16.080 --> 00:04:21.070
contact repository receives a call on its saved method

87
00:04:21.070 --> 00:04:24.060
for any customer contact class,

88
00:04:24.060 --> 00:04:28.060
and simply return the mock contact.

89
00:04:28.060 --> 00:04:30.070
So that will be the object that we just declared

90
00:04:30.070 --> 00:04:32.070
this is our mock object.

91
00:04:32.070 --> 00:04:34.070
So it'd be a good idea to set

92
00:04:34.070 --> 00:04:37.030
the state of this object based on

93
00:04:37.030 --> 00:04:41.040
the test case scenario you're trying to create.

94
00:04:41.040 --> 00:04:43.070
Now that we're done creating our mock object

95
00:04:43.070 --> 00:04:47.000
and specifying all of the mock behavior

96
00:04:47.000 --> 00:04:50.010
we want to have on it, we can now test

97
00:04:50.010 --> 00:04:53.040
our contacts management service.

98
00:04:53.040 --> 00:04:58.030
And let's see what happens when we call Add Contact method.

99
00:04:58.030 --> 00:05:00.080
And what I'm going to do right now,

100
00:05:00.080 --> 00:05:04.020
even though it wants a contact object,

101
00:05:04.020 --> 00:05:07.010
because we're mocking all of the data access,

102
00:05:07.010 --> 00:05:08.070
we really aren't that concerned

103
00:05:08.070 --> 00:05:12.050
with whatever object comes in because

104
00:05:12.050 --> 00:05:15.060
we're going to receive the mock contact

105
00:05:15.060 --> 00:05:19.060
with Jenny's information as a result anyway.

106
00:05:19.060 --> 00:05:21.030
So it doesn't matter where we attempt to save,

107
00:05:21.030 --> 00:05:25.020
we're going to get our mock object as a result.

108
00:05:25.020 --> 00:05:28.000
So I'm going to go ahead and at least create

109
00:05:28.000 --> 00:05:34.010
the new contact that's going to be returned

110
00:05:34.010 --> 00:05:38.050
so that we can now run our JUnit.

111
00:05:38.050 --> 00:05:40.060
But before we do that, let's write

112
00:05:40.060 --> 00:05:43.030
at least one assertion.

113
00:05:43.030 --> 00:05:46.010
We want to see whether or not we get back

114
00:05:46.010 --> 00:05:50.050
the contact object with Jenny's information in it.

115
00:05:50.050 --> 00:05:55.050
So I'm going to do an assert equals

116
00:05:55.050 --> 00:05:59.070
and just as the last time we did an assert equals,

117
00:05:59.070 --> 00:06:02.040
I'm just going to check for the first name.

118
00:06:02.040 --> 00:06:04.060
I want to assert that the new contact

119
00:06:04.060 --> 00:06:07.030
that comes back after my contact management

120
00:06:07.030 --> 00:06:11.020
service Add is called, it should return

121
00:06:11.020 --> 00:06:16.080
a new contact with a first name value is indeed Jenny.

122
00:06:16.080 --> 00:06:19.040
Now we could go on with more mocking behavior,

123
00:06:19.040 --> 00:06:21.060
more assertions, but for our purposes,

124
00:06:21.060 --> 00:06:24.050
let's just stop here and run this JUnit.

125
00:06:24.050 --> 00:06:28.020
So I'm going to minimize this class

126
00:06:28.020 --> 00:06:32.030
and I'm going to right click in the package explorer

127
00:06:32.030 --> 00:06:37.050
on my test AddContactHappyPath method.

128
00:06:37.050 --> 00:06:42.060
And from the Run As menu, I want to choose JUnit test

129
00:06:42.060 --> 00:06:43.070
and there we go.

130
00:06:43.070 --> 00:06:47.010
We got our nice lovely green bar

131
00:06:47.010 --> 00:06:50.060
which means our JUnit test was successful.

132
00:06:50.060 --> 00:06:55.040
That means our assertion of the new contact having

133
00:06:55.040 --> 00:06:59.040
Jenny's name in it actually did turn out to be true

134
00:06:59.040 --> 00:07:01.030
which means our mocking behavior was

135
00:07:01.030 --> 00:07:04.050
exactly what we wanted it to be.

136
00:07:04.050 --> 00:07:06.080
Let's review what we just accomplished.

137
00:07:06.080 --> 00:07:10.010
We created a contacts management unit test.

138
00:07:10.010 --> 00:07:12.040
For the first time, we used a different kind

139
00:07:12.040 --> 00:07:15.060
of runner class, specifically the Mockito runner

140
00:07:15.060 --> 00:07:18.040
instead of a spring runner because we wanted

141
00:07:18.040 --> 00:07:20.080
to use the Mockito framework to mock out

142
00:07:20.080 --> 00:07:23.090
all of data access components.

143
00:07:23.090 --> 00:07:26.060
And by doing so, we don't have to wait

144
00:07:26.060 --> 00:07:29.060
on a completed data access layer

145
00:07:29.060 --> 00:07:33.040
just so we can make progress on coding everything

146
00:07:33.040 --> 00:07:36.000
that's needed for our service components.

147
00:07:36.000 --> 00:07:39.030
And now that we've done one service unit test,

148
00:07:39.030 --> 00:07:41.000
we've paved the way for many more.

