WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] Now let us understand

2
00:00:01.080 --> 00:00:04.060
the second way of exchanging the session id

3
00:00:04.060 --> 00:00:06.010
between the client and the server,

4
00:00:06.010 --> 00:00:08.060
which is URL rewriting.

5
00:00:08.060 --> 00:00:11.060
Now, this is a fallback option and it is going to kick in

6
00:00:11.060 --> 00:00:14.080
only when the cookies are disabled in your browser software.

7
00:00:14.080 --> 00:00:20.030
Generally, today in all the websites, cookies have to be

8
00:00:20.030 --> 00:00:22.080
enabled because there are loads of websites running on the

9
00:00:22.080 --> 00:00:25.060
internet, which work with cookies, so you really

10
00:00:25.060 --> 00:00:27.080
can't disable them today.

11
00:00:27.080 --> 00:00:30.020
Nevertheless, if they are disabled, we need to have

12
00:00:30.020 --> 00:00:32.090
another way of exchanging the session ID between

13
00:00:32.090 --> 00:00:35.040
the client and the server.

14
00:00:35.040 --> 00:00:38.060
Let's understand what it is.

15
00:00:38.060 --> 00:00:40.080
When you talk about URL rewriting, as the name suggests,

16
00:00:40.080 --> 00:00:44.040
you are rewriting the URL, and when we say rewriting,

17
00:00:44.040 --> 00:00:48.020
you're basically appending some information at the end

18
00:00:48.020 --> 00:00:49.090
of the URL.

19
00:00:49.090 --> 00:00:53.060
That information is nothing but the session ID.

20
00:00:53.060 --> 00:00:54.050
So let's understand this.

21
00:00:54.050 --> 00:00:56.070
Let's say this is your basic URL,

22
00:00:56.070 --> 00:00:58.080
which you have attached to your hyperlink

23
00:00:58.080 --> 00:01:00.070
or maybe your form action element.

24
00:01:00.070 --> 00:01:02.060
Anything like that on your page.

25
00:01:02.060 --> 00:01:05.090
Now to this URL, we're going to rewrite some information.

26
00:01:05.090 --> 00:01:07.090
How is that going to look like?

27
00:01:07.090 --> 00:01:09.030
This is what it looks like.

28
00:01:09.030 --> 00:01:12.000
There's a semicolon separator and after that,

29
00:01:12.000 --> 00:01:14.060
the session ID is in the form of a key,

30
00:01:14.060 --> 00:01:17.030
and that long value that the server generates.

31
00:01:17.030 --> 00:01:22.020
Now this separator of semicolon and the j session

32
00:01:22.020 --> 00:01:26.070
name of the parameter, are very specific to the tomcat

33
00:01:26.070 --> 00:01:29.040
container software that we are using.

34
00:01:29.040 --> 00:01:33.080
However, if you go ahead and choose any other JEE

35
00:01:33.080 --> 00:01:37.000
compliant server, then in that case the separator

36
00:01:37.000 --> 00:01:42.020
and the name of this parameter could possibly be different.

37
00:01:42.020 --> 00:01:44.090
So this URL rewriting is something that the server

38
00:01:44.090 --> 00:01:46.030
will do for us,

39
00:01:46.030 --> 00:01:53.080
but we as developers need to encode all the necessary URLs.

40
00:01:53.080 --> 00:01:57.010
All the URLs that you attach to your hyperlinks

41
00:01:57.010 --> 00:01:59.090
or form action elements or whichever elements on

42
00:01:59.090 --> 00:02:01.020
your page that you have,

43
00:02:01.020 --> 00:02:05.030
you will have to explicitly encode those URLs.

44
00:02:05.030 --> 00:02:06.080
How do you encode them?

45
00:02:06.080 --> 00:02:09.050
Basically you invoke an API for it, we'll take a look at it

46
00:02:09.050 --> 00:02:11.070
in the demo anyway.

47
00:02:11.070 --> 00:02:15.000
But the point is that until you encode these URLs,

48
00:02:15.000 --> 00:02:17.060
the server would not enable the URL

49
00:02:17.060 --> 00:02:19.060
rewriting process for you.

50
00:02:19.060 --> 00:02:22.060
It will obey your command for URL rewriting

51
00:02:22.060 --> 00:02:24.060
only if you tell it to do it.

52
00:02:24.060 --> 00:02:27.000
So that's something that we have to do.

53
00:02:27.000 --> 00:02:29.090
This could be a little tedious option because there

54
00:02:29.090 --> 00:02:33.070
may be really large number of URLs in your project

55
00:02:33.070 --> 00:02:36.040
and you may really have to sit and encode all of them

56
00:02:36.040 --> 00:02:37.080
on every page.

57
00:02:37.080 --> 00:02:40.010
But yes, this is definitely going to be the case

58
00:02:40.010 --> 00:02:41.030
if your cookies are disabled.

59
00:02:41.030 --> 00:02:44.080
So this is the only way then of exchanging the session IDs,

60
00:02:44.080 --> 00:02:48.020
or you will have to implement URL rewriting.

61
00:02:48.020 --> 00:02:49.000
Right.

62
00:02:49.000 --> 00:02:51.030
In the next video we're going to understand this URL

63
00:02:51.030 --> 00:02:52.040
rewriting demo.

64
00:02:52.040 --> 00:02:54.050
Let's understand the use case for it.

65
00:02:54.050 --> 00:02:56.050
So this is my application.

66
00:02:56.050 --> 00:02:58.020
I'm going to click on the login hyperlink.

67
00:02:58.020 --> 00:03:01.090
And let's say I enter credentials.

68
00:03:01.090 --> 00:03:05.050
For this demo, we are going to assume that it's going

69
00:03:05.050 --> 00:03:06.090
to be a successful login.

70
00:03:06.090 --> 00:03:09.060
So I'm definitely entering the correct credentials.

71
00:03:09.060 --> 00:03:12.000
Now, once I login, we are going to do the

72
00:03:12.000 --> 00:03:13.030
session management.

73
00:03:13.030 --> 00:03:14.010
Right.

74
00:03:14.010 --> 00:03:16.090
Once we do the session management and when you

75
00:03:16.090 --> 00:03:19.010
come to the home jsp,

76
00:03:19.010 --> 00:03:21.030
these links of order history and view my profile

77
00:03:21.030 --> 00:03:25.070
are very specific to this user's login.

78
00:03:25.070 --> 00:03:28.070
It means that if I click on view my profile,

79
00:03:28.070 --> 00:03:29.090
I should get some information.

80
00:03:29.090 --> 00:03:30.080
Fine.

81
00:03:30.080 --> 00:03:34.040
But let's say a user comes in, copies this URL

82
00:03:34.040 --> 00:03:37.080
and tries to maliciously access it on some other machine,

83
00:03:37.080 --> 00:03:39.050
then it is a problem.

84
00:03:39.050 --> 00:03:43.060
Or let's say the session itself times out on this machine,

85
00:03:43.060 --> 00:03:44.070
then it's a problem.

86
00:03:44.070 --> 00:03:45.050
Right.

87
00:03:45.050 --> 00:03:47.020
So we'll handle all of that in the subsequent parts

88
00:03:47.020 --> 00:03:49.060
of the code, but for right now what we need to understand

89
00:03:49.060 --> 00:03:51.080
is when I click on view my profile,

90
00:03:51.080 --> 00:03:54.070
the session that I had setup on the click of login

91
00:03:54.070 --> 00:03:58.080
should continue and I should be able to see the username.

92
00:03:58.080 --> 00:03:59.070
Right.

93
00:03:59.070 --> 00:04:02.020
So when I click on this link, I will write a servlet

94
00:04:02.020 --> 00:04:05.000
and there we're going to fetch that username from the

95
00:04:05.000 --> 00:04:08.070
session to verify that the session management is indeed

96
00:04:08.070 --> 00:04:10.060
working correctly.

97
00:04:10.060 --> 00:04:13.020
Now this entire demo that we're going to do is

98
00:04:13.020 --> 00:04:16.080
with URL rewriting way of session management.

99
00:04:16.080 --> 00:04:19.000
So let's take a look at it in the next video.

