WEBVTT
1
00:00:00.050 --> 00:00:02.080
- [Instructor] Okay now, lets do a very quick

2
00:00:02.080 --> 00:00:05.070
Tag Handler Development in our project.

3
00:00:05.070 --> 00:00:06.050
So what we're going to do is

4
00:00:06.050 --> 00:00:08.000
we are going to develop a custom tag

5
00:00:08.000 --> 00:00:09.060
which will format a date,

6
00:00:09.060 --> 00:00:11.000
according to a particular format.

7
00:00:11.000 --> 00:00:13.030
Of course, now you have this tag in JSTL already,

8
00:00:13.030 --> 00:00:14.050
we don't need that but

9
00:00:14.050 --> 00:00:15.090
this is just for a demo purpose

10
00:00:15.090 --> 00:00:17.050
that we're going to develop this

11
00:00:17.050 --> 00:00:18.090
small tag of our own.

12
00:00:18.090 --> 00:00:19.080
Okay?

13
00:00:19.080 --> 00:00:20.070
So the first thing that we have to do is

14
00:00:20.070 --> 00:00:23.000
we've to define the .tld file

15
00:00:23.000 --> 00:00:25.000
which is of course a tag library descriptor,

16
00:00:25.000 --> 00:00:26.030
it's an XML file.

17
00:00:26.030 --> 00:00:28.000
So lets write that out first.

18
00:00:28.000 --> 00:00:29.030
Lets go to a project.

19
00:00:29.030 --> 00:00:31.000
And we need to create that file under WEB-INF

20
00:00:31.000 --> 00:00:33.080
so I'm going to right click here,

21
00:00:33.080 --> 00:00:38.020
and call it as an XML file,

22
00:00:38.020 --> 00:00:44.050
and give it a name, so appTags.tld

23
00:00:44.050 --> 00:00:46.060
There you go.

24
00:00:46.060 --> 00:00:49.060
Now, this is of course an XML file

25
00:00:49.060 --> 00:00:51.010
and the tags that you're going

26
00:00:51.010 --> 00:00:52.090
to write in this XML file are going to

27
00:00:52.090 --> 00:00:54.000
come from a namespace.

28
00:00:54.000 --> 00:00:56.010
So that namespace has been provided on the slide.

29
00:00:56.010 --> 00:00:58.060
I'm just going to copy that

30
00:00:58.060 --> 00:01:02.030
and paste it here and then of course,

31
00:01:02.030 --> 00:01:04.080
end that taglib.

32
00:01:04.080 --> 00:01:07.010
Lets do more readable code, so yeah,

33
00:01:07.010 --> 00:01:08.090
that's what it is going to be.

34
00:01:08.090 --> 00:01:11.030
So that's the namespace from which

35
00:01:11.030 --> 00:01:12.070
all the tags are going to come in

36
00:01:12.070 --> 00:01:17.050
so that I can write them under the taglib out here.

37
00:01:17.050 --> 00:01:19.000
So lets get started with this file.

38
00:01:19.000 --> 00:01:21.050
The first thing that I want to define is

39
00:01:21.050 --> 00:01:24.050
what is the version of the tag library

40
00:01:24.050 --> 00:01:25.050
that I'm developing.

41
00:01:25.050 --> 00:01:27.000
So right now it is just the start

42
00:01:27.000 --> 00:01:31.060
so I'm going to say tlib-version,

43
00:01:31.060 --> 00:01:33.060
that's the tag and I'll just say 1.0

44
00:01:33.060 --> 00:01:35.010
So this is just the first version

45
00:01:35.010 --> 00:01:37.060
that I'm trying to create for my project.

46
00:01:37.060 --> 00:01:38.040
The next one is,

47
00:01:38.040 --> 00:01:40.080
you also need to specify which JSP version

48
00:01:40.080 --> 00:01:42.070
this tag will run on to.

49
00:01:42.070 --> 00:01:45.050
So I'm going to say jsp-version,

50
00:01:45.050 --> 00:01:47.050
lets say 2.0

51
00:01:47.050 --> 00:01:50.000
You can also put it to 2.1, no matter.

52
00:01:50.000 --> 00:01:50.090
Then of course,

53
00:01:50.090 --> 00:01:53.040
lets give it a short name.

54
00:01:53.040 --> 00:01:56.050
So I'm going to write one more tag called short-name

55
00:01:56.050 --> 00:01:59.000
and lets say app tag handler.

56
00:01:59.000 --> 00:02:01.050
Just a short name.

57
00:02:01.050 --> 00:02:04.020
Next, I may choose to give a description

58
00:02:04.020 --> 00:02:05.050
for this tag library.

59
00:02:05.050 --> 00:02:06.090
So I can say,

60
00:02:06.090 --> 00:02:10.010
this is the

61
00:02:10.010 --> 00:02:11.070
custom tag

62
00:02:11.070 --> 00:02:16.020
library for hplus.

63
00:02:16.020 --> 00:02:18.020
Right, that's our application.

64
00:02:18.020 --> 00:02:20.000
Okay, what else can we define?

65
00:02:20.000 --> 00:02:24.010
We can define the display name.

66
00:02:24.010 --> 00:02:25.050
Of course this is really your choice,

67
00:02:25.050 --> 00:02:27.000
if you really want the display name.

68
00:02:27.000 --> 00:02:29.040
It's not a mandatory option.

69
00:02:29.040 --> 00:02:33.000
So, hplus tag library.

70
00:02:33.000 --> 00:02:35.080
That will be the display name.

71
00:02:35.080 --> 00:02:37.020
Now the important thing that you have to

72
00:02:37.020 --> 00:02:39.010
define here is the URI.

73
00:02:39.010 --> 00:02:43.010
So if you observed in our tag library demos that we did,

74
00:02:43.010 --> 00:02:44.020
as a part of JSTL,

75
00:02:44.020 --> 00:02:47.050
we included the taglib directive on the JSP.

76
00:02:47.050 --> 00:02:49.090
And the taglib directive had URI as

77
00:02:49.090 --> 00:02:51.060
one of the attributes which was going to

78
00:02:51.060 --> 00:02:55.020
specify the path of the tag library.

79
00:02:55.020 --> 00:02:56.090
So this could be a logical name.

80
00:02:56.090 --> 00:03:03.080
So http://www.hplus.com

81
00:03:03.080 --> 00:03:06.020
and lets say, /apptags.

82
00:03:06.020 --> 00:03:10.020
Just a logical URI path for this tag library.

83
00:03:10.020 --> 00:03:11.060
Okay, so now that we've done this,

84
00:03:11.060 --> 00:03:13.020
lets go ahead and define our tags.

85
00:03:13.020 --> 00:03:15.010
I'm going to have the tag tag.

86
00:03:15.010 --> 00:03:15.090
You know what it is.

87
00:03:15.090 --> 00:03:19.000
It's a tag element inside this XML file.

88
00:03:19.000 --> 00:03:20.070
And this is basically to define

89
00:03:20.070 --> 00:03:23.010
the information about my custom tag.

90
00:03:23.010 --> 00:03:24.080
So what is the name that my custom tag

91
00:03:24.080 --> 00:03:25.070
is going to have,

92
00:03:25.070 --> 00:03:27.070
what are the attributes to that tag, et cetera.

93
00:03:27.070 --> 00:03:30.010
So that's what we're going to define now.

94
00:03:30.010 --> 00:03:32.060
So under that, the first thing that you have to

95
00:03:32.060 --> 00:03:34.090
define is the name that you want to give to the tag.

96
00:03:34.090 --> 00:03:39.020
So I am going to say, formatDate, lets say.

97
00:03:39.020 --> 00:03:43.020
And of course, what is the tag handler class.

98
00:03:43.020 --> 00:03:45.010
So you're going to write...

99
00:03:45.010 --> 00:03:46.040
Of course, in this application we're going to

100
00:03:46.040 --> 00:03:48.020
write a tag handler class,

101
00:03:48.020 --> 00:03:50.080
so we have to give the fully qualified class name

102
00:03:50.080 --> 00:03:51.060
of that class.

103
00:03:51.060 --> 00:03:53.090
So I'm just going to embed the file path

104
00:03:53.090 --> 00:03:58.060
com.test.customtags

105
00:03:58.060 --> 00:04:01.020
and AppHandler.

106
00:04:01.020 --> 00:04:03.050
So you may be wondering where this is coming from?

107
00:04:03.050 --> 00:04:05.070
We have not yet created this class,

108
00:04:05.070 --> 00:04:06.070
do not worry about it.

109
00:04:06.070 --> 00:04:09.020
We're just going to create this class in a while.

110
00:04:09.020 --> 00:04:11.090
Lets complete this tag library descriptor file

111
00:04:11.090 --> 00:04:14.060
and then we're going to create this in our build path.

112
00:04:14.060 --> 00:04:16.010
So this is just a placeholder

113
00:04:16.010 --> 00:04:18.060
that I'm right now giving.

114
00:04:18.060 --> 00:04:21.030
The next on is we need to define attributes for this tag.

115
00:04:21.030 --> 00:04:22.030
So I'm going to go ahead

116
00:04:22.030 --> 00:04:25.060
and write down the attribute tag.

117
00:04:25.060 --> 00:04:27.000
And lets see what I have inside it.

118
00:04:27.000 --> 00:04:30.050
I have a name to that attribute, right?

119
00:04:30.050 --> 00:04:34.010
So lets call it, the date.

120
00:04:34.010 --> 00:04:36.090
And, what is this describing?

121
00:04:36.090 --> 00:04:38.020
So whenever you write a tag,

122
00:04:38.020 --> 00:04:40.060
you of course feed the extra information as we said,

123
00:04:40.060 --> 00:04:42.020
in the form of attributes.

124
00:04:42.020 --> 00:04:43.050
So this is one of the attributes.

125
00:04:43.050 --> 00:04:45.020
So I want to format a date.

126
00:04:45.020 --> 00:04:47.060
So in order to format a date, what all do I need?

127
00:04:47.060 --> 00:04:50.050
I need a proper format and I need the date

128
00:04:50.050 --> 00:04:52.010
that I need to format, right?

129
00:04:52.010 --> 00:04:53.000
So those are the two attributes

130
00:04:53.000 --> 00:04:55.000
that I'm going to have for this tag.

131
00:04:55.000 --> 00:04:56.060
So the name is tag.

132
00:04:56.060 --> 00:05:00.000
And I would want to assign values

133
00:05:00.000 --> 00:05:02.070
in the form of expressions to this tag.

134
00:05:02.070 --> 00:05:04.060
So lets say I want to evaluate an expression

135
00:05:04.060 --> 00:05:06.060
using the expression element on JSP

136
00:05:06.060 --> 00:05:08.050
and assign it to this attribute.

137
00:05:08.050 --> 00:05:09.090
I should be able to that.

138
00:05:09.090 --> 00:05:11.090
For that, you'll have to explicitly set,

139
00:05:11.090 --> 00:05:16.050
rtexprvalue, that's the attribute,

140
00:05:16.050 --> 00:05:17.050
to true,

141
00:05:17.050 --> 00:05:21.040
so that this attribute can accept anything

142
00:05:21.040 --> 00:05:24.040
in the form of an expression.

143
00:05:24.040 --> 00:05:25.060
Because that expression is going to be

144
00:05:25.060 --> 00:05:27.030
dynamically evaluated,

145
00:05:27.030 --> 00:05:30.000
you need to specify in the tag library descriptor

146
00:05:30.000 --> 00:05:32.030
that this attribute is capable of

147
00:05:32.030 --> 00:05:34.080
evaluating an expression dynamically.

148
00:05:34.080 --> 00:05:38.010
Which is why I'm setting this to true.

149
00:05:38.010 --> 00:05:42.030
Lets define the other attribute.

150
00:05:42.030 --> 00:05:45.020
And under that, lets give it a name first.

151
00:05:45.020 --> 00:05:46.090
So the name of this attribute will be

152
00:05:46.090 --> 00:05:49.040
the format that I need for that date

153
00:05:49.040 --> 00:05:52.020
and yeah, that is okay.

154
00:05:52.020 --> 00:05:54.020
And after this,

155
00:05:54.020 --> 00:05:56.070
the last thing that we need to define is that,

156
00:05:56.070 --> 00:06:00.060
the body content of this tag.

157
00:06:00.060 --> 00:06:02.050
There is no body content for this tag,

158
00:06:02.050 --> 00:06:05.060
so I'm going to define that here.

159
00:06:05.060 --> 00:06:07.060
And I'm going to say that it is empty.

160
00:06:07.060 --> 00:06:09.050
So we don't have any body content of this tag.

161
00:06:09.050 --> 00:06:11.030
This is just a tag and it is just

162
00:06:11.030 --> 00:06:13.040
going to have our two attributes,

163
00:06:13.040 --> 00:06:16.010
the date attribute, the format attribute

164
00:06:16.010 --> 00:06:18.020
and once we write that tag on the JSP,

165
00:06:18.020 --> 00:06:20.000
it's going to just format that date

166
00:06:20.000 --> 00:06:22.050
according to the format that we have specified.

167
00:06:22.050 --> 00:06:23.030
That's all.

168
00:06:23.030 --> 00:06:25.010
So there is no body to this tag, right?

169
00:06:25.010 --> 00:06:28.000
So that's empty. That's what I'm saying.

170
00:06:28.000 --> 00:06:32.000
Okay so, that is the tag library descriptor file.

171
00:06:32.000 --> 00:06:33.070
Now lets just go ahead and quickly

172
00:06:33.070 --> 00:06:36.010
create this AppHandler class.

173
00:06:36.010 --> 00:06:39.070
So I'm going to create a folder on the test folder,

174
00:06:39.070 --> 00:06:43.020
which is called customtags.

175
00:06:43.020 --> 00:06:45.050
And I'm going to take the name of this class

176
00:06:45.050 --> 00:06:53.020
and quickly make that under the customtags folder.

177
00:06:53.020 --> 00:06:55.030
Yes.

178
00:06:55.030 --> 00:06:58.000
Okay so,

179
00:06:58.000 --> 00:06:59.050
so do you see now that the warning

180
00:06:59.050 --> 00:07:01.040
on line number 15 has vanished?

181
00:07:01.040 --> 00:07:03.090
Now that it is able to find the AppHandler class

182
00:07:03.090 --> 00:07:06.000
in the build path, we're good.

183
00:07:06.000 --> 00:07:08.040
So lets go ahead in AppHandler and as we said,

184
00:07:08.040 --> 00:07:09.070
the simpler version is of course,

185
00:07:09.070 --> 00:07:13.020
to extend this SimpleTagSupport class.

186
00:07:13.020 --> 00:07:14.010
So there we go.

187
00:07:14.010 --> 00:07:17.040
It's available in the javax.servelet.jsp.tagext.

188
00:07:17.040 --> 00:07:20.020
tagext is tag extensions.

189
00:07:20.020 --> 00:07:22.060
So that's the class that we're going to extend

190
00:07:22.060 --> 00:07:25.020
and now what have we to do in this?

191
00:07:25.020 --> 00:07:26.040
The first thing that we have to do is

192
00:07:26.040 --> 00:07:28.080
the attributes that we have defined for the tag.

193
00:07:28.080 --> 00:07:31.040
Lets go to appTags.tld.

194
00:07:31.040 --> 00:07:32.080
The attributes that we have defined

195
00:07:32.080 --> 00:07:35.060
are format and the date.

196
00:07:35.060 --> 00:07:37.040
So both the attributes are going to go as

197
00:07:37.040 --> 00:07:40.050
instance variables in that tag handler class.

198
00:07:40.050 --> 00:07:42.070
So lets do that as the first thing.

199
00:07:42.070 --> 00:07:48.000
So I'm going to say, private String format.

200
00:07:48.000 --> 00:07:50.080
So format is going to be of the String type.

201
00:07:50.080 --> 00:07:54.020
And date is of course going to be of the Date type.

202
00:07:54.020 --> 00:07:56.050
So lets do that and generate

203
00:07:56.050 --> 00:07:58.020
the getters and setters for this.

204
00:07:58.020 --> 00:08:00.030
In the Eclipse IDE, there is a shortcut for that.

205
00:08:00.030 --> 00:08:02.070
You can just right click, say Source,

206
00:08:02.070 --> 00:08:05.000
and then say Generate Getters and Setters,

207
00:08:05.000 --> 00:08:07.030
select both the properties and say OK

208
00:08:07.030 --> 00:08:08.010
and there you go.

209
00:08:08.010 --> 00:08:11.070
Your getters setters are generated for you.

210
00:08:11.070 --> 00:08:14.000
And as a part of the logic of that tag,

211
00:08:14.000 --> 00:08:15.000
what have you to do?

212
00:08:15.000 --> 00:08:17.010
You have to provide an implemenation

213
00:08:17.010 --> 00:08:18.090
to the dotag method.

214
00:08:18.090 --> 00:08:21.000
That's the one.

215
00:08:21.000 --> 00:08:23.030
So lets implement that method,

216
00:08:23.030 --> 00:08:25.060
lets get rid of these parent calls.

217
00:08:25.060 --> 00:08:27.010
Yeah, so it could possibly throw you

218
00:08:27.010 --> 00:08:29.010
a JspException and IOExcception in case

219
00:08:29.010 --> 00:08:31.070
you're trying to write a response back to the client.

220
00:08:31.070 --> 00:08:34.050
It doesn't return anything, it's a public method.

221
00:08:34.050 --> 00:08:36.090
And now lets go ahead and implement this method.

222
00:08:36.090 --> 00:08:38.010
So what are we going to do?

223
00:08:38.010 --> 00:08:40.060
We're going to basically format this date

224
00:08:40.060 --> 00:08:42.060
in the format that has been specified

225
00:08:42.060 --> 00:08:44.060
and then we're going to write that formatted date,

226
00:08:44.060 --> 00:08:46.030
back to the JSP.

227
00:08:46.030 --> 00:08:49.030
In order to write that formatted date back to the JSP,

228
00:08:49.030 --> 00:08:51.050
we need a context.

229
00:08:51.050 --> 00:08:54.040
So that context is going to be the surrounding scope.

230
00:08:54.040 --> 00:08:56.030
The surrounding scope for the JSP

231
00:08:56.030 --> 00:08:58.020
is going to be the JspContext.

232
00:08:58.020 --> 00:09:00.050
So we're going to take that JspContext

233
00:09:00.050 --> 00:09:02.070
and then we'll take the JspWriter object

234
00:09:02.070 --> 00:09:05.060
and then we'll write that date back to the client.

235
00:09:05.060 --> 00:09:07.060
So we're going to do all of this, one by one.

236
00:09:07.060 --> 00:09:09.030
The first thing that we've to do is,

237
00:09:09.030 --> 00:09:13.040
get the SimpleDateFormat API

238
00:09:13.040 --> 00:09:16.080
and get a dateFormatter.

239
00:09:16.080 --> 00:09:19.090
So basically, trying to define a format here.

240
00:09:19.090 --> 00:09:23.000
So that SimpleDateFormat is going to be a

241
00:09:23.000 --> 00:09:27.040
constructor call to which I'm going to insert

242
00:09:27.040 --> 00:09:31.030
the format that the attribute will give me.

243
00:09:31.030 --> 00:09:34.010
So this format variable that we have,

244
00:09:34.010 --> 00:09:36.010
is going to go and sit inside

245
00:09:36.010 --> 00:09:38.090
the constructor call of SimpleDateFormat.

246
00:09:38.090 --> 00:09:40.080
So once we do that,

247
00:09:40.080 --> 00:09:41.090
what we've to is we have to get

248
00:09:41.090 --> 00:09:44.030
the context as I said, the surrounding context.

249
00:09:44.030 --> 00:09:47.040
So that is going to be given by PageContext

250
00:09:47.040 --> 00:09:51.070
and the method for that is getJspContext.

251
00:09:51.070 --> 00:09:54.090
So that will give you the JspContext.

252
00:09:54.090 --> 00:09:59.020
And of course, we'll have to cast this.

253
00:09:59.020 --> 00:10:02.010
So lets do that and we're done.

254
00:10:02.010 --> 00:10:03.090
Once we get this, what we're going to do?

255
00:10:03.090 --> 00:10:05.070
We're going to take the out object.

256
00:10:05.070 --> 00:10:09.000
If you recall the discussion that we've had previously,

257
00:10:09.000 --> 00:10:12.040
out object belongs to the JspWriter class

258
00:10:12.040 --> 00:10:14.040
and that object is basically used

259
00:10:14.040 --> 00:10:16.060
to write something on the JSP page.

260
00:10:16.060 --> 00:10:18.080
So the way you had printWriter for servelet,

261
00:10:18.080 --> 00:10:20.080
we have JspWriter for Jsp.

262
00:10:20.080 --> 00:10:22.030
So I'm going to take that object,

263
00:10:22.030 --> 00:10:25.070
so lets say JspWriter and we can get that

264
00:10:25.070 --> 00:10:27.040
on the page context.

265
00:10:27.040 --> 00:10:29.060
So do you also remember and recall that

266
00:10:29.060 --> 00:10:32.040
page context is that object which has got

267
00:10:32.040 --> 00:10:35.010
a reference to all the other implicit objects.

268
00:10:35.010 --> 00:10:37.040
So when I say getOut,

269
00:10:37.040 --> 00:10:41.040
it will return me the JspWriter object.

270
00:10:41.040 --> 00:10:43.010
Once I do that, what I have to do is

271
00:10:43.010 --> 00:10:47.020
I have to say writer.println

272
00:10:47.020 --> 00:10:48.080
and what am I going to print?

273
00:10:48.080 --> 00:10:52.050
I'm going to take that dateFormatter

274
00:10:52.050 --> 00:10:55.020
and I'm going to invoke the format API

275
00:10:55.020 --> 00:10:58.000
and pass on that date that I have got

276
00:10:58.000 --> 00:10:59.050
in the form of the attribute.

277
00:10:59.050 --> 00:11:01.080
That's all.

278
00:11:01.080 --> 00:11:03.040
So just to summarize,

279
00:11:03.040 --> 00:11:06.040
I am having a tag which is going to format a date.

280
00:11:06.040 --> 00:11:09.000
The name of that tag is format date.

281
00:11:09.000 --> 00:11:10.050
It has got two attributes,

282
00:11:10.050 --> 00:11:13.030
format, in which we need to format the date

283
00:11:13.030 --> 00:11:15.050
and the actual date which needs to get formatted.

284
00:11:15.050 --> 00:11:18.060
So we're going to use the SsimpleDateFormat API

285
00:11:18.060 --> 00:11:20.030
that's on line number 31,

286
00:11:20.030 --> 00:11:23.030
we need to include that format provided in the tag

287
00:11:23.030 --> 00:11:25.030
and then format it and then just print it

288
00:11:25.030 --> 00:11:26.020
on the JSP page.

289
00:11:26.020 --> 00:11:30.000
So our Tag Handler class is now ready with us.

290
00:11:30.000 --> 00:11:31.060
So lets take a look at the next steps

291
00:11:31.060 --> 00:11:33.000
in the next video.

