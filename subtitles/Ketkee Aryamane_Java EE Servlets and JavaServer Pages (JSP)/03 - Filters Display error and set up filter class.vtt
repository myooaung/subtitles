WEBVTT
1
00:00:00.050 --> 00:00:02.010
- [Instructor] So let's pick up from where we left off.

2
00:00:02.010 --> 00:00:03.070
We have coded the LoginServlet.

3
00:00:03.070 --> 00:00:06.080
Now, let's go to the login.jsp

4
00:00:06.080 --> 00:00:11.030
and also display this message that we have coded out here.

5
00:00:11.030 --> 00:00:14.060
Okay, so let's go to login.jsp, let me open that for you,

6
00:00:14.060 --> 00:00:17.010
and let's come down.

7
00:00:17.010 --> 00:00:19.010
So this is the login form,

8
00:00:19.010 --> 00:00:21.030
and we are going to display that error message

9
00:00:21.030 --> 00:00:23.000
in case it's an invalid login right

10
00:00:23.000 --> 00:00:26.010
out here on line number 44.

11
00:00:26.010 --> 00:00:27.010
Now, how am I going to do that?

12
00:00:27.010 --> 00:00:29.040
I'm going to use a simple scriptlet element

13
00:00:29.040 --> 00:00:32.040
and say that if request,

14
00:00:32.040 --> 00:00:35.040
so I'm going to use the implicit object of jsp,

15
00:00:35.040 --> 00:00:37.070
and I'm going to say if request.getAttribute

16
00:00:37.070 --> 00:00:40.060
I get anything as an error.

17
00:00:40.060 --> 00:00:43.000
So let's say if it is not null,

18
00:00:43.000 --> 00:00:48.080
then I'm going to go ahead and display that error message.

19
00:00:48.080 --> 00:00:51.090
So I'm going to say an expression element

20
00:00:51.090 --> 00:00:57.070
and just take this again and assign it.

21
00:00:57.070 --> 00:00:59.070
So whatever is there inside

22
00:00:59.070 --> 00:01:02.010
that attribute of error, we'll get displayed.

23
00:01:02.010 --> 00:01:06.020
Let me put also a quickly here to break the line.

24
00:01:06.020 --> 00:01:09.020
And yeah, so that's what we're going to do.

25
00:01:09.020 --> 00:01:11.030
And of course, let's end the if condition,

26
00:01:11.030 --> 00:01:16.010
so let's put that scriptlet element again,

27
00:01:16.010 --> 00:01:19.030
just to end this if condition, right?

28
00:01:19.030 --> 00:01:20.070
So if we are going to get an error,

29
00:01:20.070 --> 00:01:22.070
we'll just display that error,

30
00:01:22.070 --> 00:01:24.090
otherwise we are fine, right?

31
00:01:24.090 --> 00:01:26.080
Okay, now the next chunk is

32
00:01:26.080 --> 00:01:28.060
we have to device the filter class,

33
00:01:28.060 --> 00:01:31.000
so let's go ahead.

34
00:01:31.000 --> 00:01:33.070
I've already made a class called AuthenticationFilter

35
00:01:33.070 --> 00:01:36.090
inside the filters folder on your project structure,

36
00:01:36.090 --> 00:01:38.010
and now this is supposed

37
00:01:38.010 --> 00:01:41.040
to be implementing the filter interface,

38
00:01:41.040 --> 00:01:45.000
which is of course going to come from javax.servlet package,

39
00:01:45.000 --> 00:01:46.070
and it is implementing an interface,

40
00:01:46.070 --> 00:01:47.060
which means we will have

41
00:01:47.060 --> 00:01:49.060
to add all the unimplemented methods.

42
00:01:49.060 --> 00:01:51.020
So let's do that.

43
00:01:51.020 --> 00:01:52.080
There you go.

44
00:01:52.080 --> 00:01:56.090
So there's destroy, there's doFilter and there's init.

45
00:01:56.090 --> 00:01:59.010
Now, init and destroy are part

46
00:01:59.010 --> 00:02:01.080
of the lifecycle of this filter.

47
00:02:01.080 --> 00:02:05.040
So any kind of initialization and cleanup activity

48
00:02:05.040 --> 00:02:07.080
that you want to put in for this filter can go

49
00:02:07.080 --> 00:02:12.040
into the init and destroy methods respectively.

50
00:02:12.040 --> 00:02:14.040
If you look at the method of init,

51
00:02:14.040 --> 00:02:15.060
the signature looks like this,

52
00:02:15.060 --> 00:02:18.060
it's init, public, does not return anything

53
00:02:18.060 --> 00:02:21.030
and has got a parameter of FilterConfig.

54
00:02:21.030 --> 00:02:22.090
So FilterConfig is that API,

55
00:02:22.090 --> 00:02:25.000
which is used to pass configuration information

56
00:02:25.000 --> 00:02:26.000
to this filter.

57
00:02:26.000 --> 00:02:27.010
So let's say your filter wants

58
00:02:27.010 --> 00:02:30.020
to do any kind of pre-processing, post-processing logic,

59
00:02:30.020 --> 00:02:33.070
for which it needs some kind of configuration information.

60
00:02:33.070 --> 00:02:36.080
You can fetch it through the FilterConfig parameter.

61
00:02:36.080 --> 00:02:40.040
And destroy is merely the place for the cleanup activity,

62
00:02:40.040 --> 00:02:43.030
so you can just go and close all your resources

63
00:02:43.030 --> 00:02:45.020
inside the destroy method.

64
00:02:45.020 --> 00:02:49.020
The important thing here is this, the doFilter API,

65
00:02:49.020 --> 00:02:51.010
which is at the heart of the filter.

66
00:02:51.010 --> 00:02:53.040
It is going to hold all your filter logic,

67
00:02:53.040 --> 00:02:56.040
and now let's inspect the signature of that method first.

68
00:02:56.040 --> 00:02:59.020
It is public, does not return anything,

69
00:02:59.020 --> 00:03:00.040
and it has got parameters

70
00:03:00.040 --> 00:03:03.010
of ServletRequest and ServletResponse.

71
00:03:03.010 --> 00:03:04.090
So you see that they are generic parameters,

72
00:03:04.090 --> 00:03:09.020
they're not your HttpServletRequest and HttpServletResponse.

73
00:03:09.020 --> 00:03:10.000
That is essentially

74
00:03:10.000 --> 00:03:12.060
because the filter component has been designed,

75
00:03:12.060 --> 00:03:14.050
so that it can fit into any kind

76
00:03:14.050 --> 00:03:17.080
of protocol-independent application.

77
00:03:17.080 --> 00:03:21.010
It does not have to be restricted only for HTTP protocol.

78
00:03:21.010 --> 00:03:22.090
That's why they are generic there.

79
00:03:22.090 --> 00:03:25.050
And the third parameter is the FilterChain,

80
00:03:25.050 --> 00:03:27.010
which is of course the one that is going

81
00:03:27.010 --> 00:03:31.040
to help you invoke the chain of filters

82
00:03:31.040 --> 00:03:34.080
and then subsequently the servlet, okay?

83
00:03:34.080 --> 00:03:36.010
So this is the doFilter method,

84
00:03:36.010 --> 00:03:39.020
and let's go and start doing things here.

85
00:03:39.020 --> 00:03:40.050
So what we are essentially going to do

86
00:03:40.050 --> 00:03:42.080
as a part of this method is

87
00:03:42.080 --> 00:03:44.060
we are going to get the session.

88
00:03:44.060 --> 00:03:47.030
We are going to check whether you get an attribute

89
00:03:47.030 --> 00:03:49.070
in the session of username,

90
00:03:49.070 --> 00:03:52.040
and if you do get a valid value for username,

91
00:03:52.040 --> 00:03:55.020
then we are good, and we'll allow the entry

92
00:03:55.020 --> 00:03:57.050
into the servlet that comes after this.

93
00:03:57.050 --> 00:04:00.090
However, if we do not get any username,

94
00:04:00.090 --> 00:04:02.000
then there's a problem,

95
00:04:02.000 --> 00:04:03.080
so either it was a malicious access,

96
00:04:03.080 --> 00:04:05.020
or the session timed out.

97
00:04:05.020 --> 00:04:08.050
So we'll just go back to the login page, okay?

98
00:04:08.050 --> 00:04:10.060
Now, the first thing that we have to do is

99
00:04:10.060 --> 00:04:12.040
you have the ServletRequest,

100
00:04:12.040 --> 00:04:14.060
we are dealing with HttpServletRequest,

101
00:04:14.060 --> 00:04:15.070
so let's quickly cast it.

102
00:04:15.070 --> 00:04:22.080
So I'm going to take a reference of HttpServletRequest,

103
00:04:22.080 --> 00:04:26.090
and I'm going to assign the ServletRequest parameter

104
00:04:26.090 --> 00:04:35.050
to this, but that, I'll have to cast now.

105
00:04:35.050 --> 00:04:37.060
Right, so there we are,

106
00:04:37.060 --> 00:04:39.090
we have our request object ready with us.

107
00:04:39.090 --> 00:04:42.040
Now, there's an important check that we have to do here.

108
00:04:42.040 --> 00:04:44.020
As we have discussed in the previous video,

109
00:04:44.020 --> 00:04:46.000
we are going to make this check only

110
00:04:46.000 --> 00:04:47.040
for those couple of URLs,

111
00:04:47.040 --> 00:04:51.000
which are very specific to the login use case, right?

112
00:04:51.000 --> 00:04:54.070
Because other URLs you can access even without a login.

113
00:04:54.070 --> 00:04:56.020
This is a very subjective requirement

114
00:04:56.020 --> 00:04:58.030
that I have for my application.

115
00:04:58.030 --> 00:05:00.020
In your project and in your application

116
00:05:00.020 --> 00:05:03.030
you can choose as to where are the points

117
00:05:03.030 --> 00:05:04.070
where you want to restrict the access.

118
00:05:04.070 --> 00:05:06.010
So it's completely dependent

119
00:05:06.010 --> 00:05:09.030
upon the requirement of the application, okay?

120
00:05:09.030 --> 00:05:11.040
So, let's go ahead and do that check.

121
00:05:11.040 --> 00:05:13.020
Now, that check can be done like this.

122
00:05:13.020 --> 00:05:15.030
I'm going to take that request object

123
00:05:15.030 --> 00:05:18.080
and say getrequestURI.

124
00:05:18.080 --> 00:05:21.020
If you recall in one of our previous videos,

125
00:05:21.020 --> 00:05:23.010
we've already seen this API,

126
00:05:23.010 --> 00:05:26.050
and it returns us the part of the URL

127
00:05:26.050 --> 00:05:29.040
from the protocol name up to the query string.

128
00:05:29.040 --> 00:05:33.020
So I'm going to say if this startsWith,

129
00:05:33.020 --> 00:05:35.080
and let's read the relative part of that URL,

130
00:05:35.080 --> 00:05:44.020
so that's HPlusSample/orderHistory, okay?

131
00:05:44.020 --> 00:05:47.000
So that's one of the hyperlinks that we have,

132
00:05:47.000 --> 00:05:48.090
and you can put an or check here,

133
00:05:48.090 --> 00:05:57.000
you can say request.getRequestURI().startsWith,

134
00:05:57.000 --> 00:05:58.090
and you can get the other URL here,

135
00:05:58.090 --> 00:06:03.040
so that's HPlusSample,

136
00:06:03.040 --> 00:06:06.030
and then you'll have getProfileDetails.

137
00:06:06.030 --> 00:06:07.090
So those are the URL patterns

138
00:06:07.090 --> 00:06:11.090
that we have for the orderHistory and the getProfileDetails.

139
00:06:11.090 --> 00:06:13.070
So I'll do one thing, I'll just press an Enter here,

140
00:06:13.070 --> 00:06:17.010
so that it becomes easy to read, right.

141
00:06:17.010 --> 00:06:20.040
Okay, so now that we have this if condition ready with us,

142
00:06:20.040 --> 00:06:23.000
the code that we're going to insert inside this if-block,

143
00:06:23.000 --> 00:06:25.000
let's take a look at it in the next video.

