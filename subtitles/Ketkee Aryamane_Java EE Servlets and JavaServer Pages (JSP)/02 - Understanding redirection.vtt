WEBVTT
1
00:00:00.040 --> 00:00:02.090
- [Woman] Let us now talk about the redirection concept

2
00:00:02.090 --> 00:00:05.020
in the servlet specification.

3
00:00:05.020 --> 00:00:07.000
If you look at our websites landing page,

4
00:00:07.000 --> 00:00:09.080
there are a lot of hyperlinks at the top right corner.

5
00:00:09.080 --> 00:00:12.050
One of them has been labeled as LinkedIn.

6
00:00:12.050 --> 00:00:15.030
My requirement is that when I click on this hyperlink,

7
00:00:15.030 --> 00:00:18.000
it should take me to the LinkedIn website.

8
00:00:18.000 --> 00:00:21.050
This exactly is the idea of redirection.

9
00:00:21.050 --> 00:00:23.060
So let's take a look at it.

10
00:00:23.060 --> 00:00:25.020
When we talk about redirection,

11
00:00:25.020 --> 00:00:27.020
it means we are handing over the control

12
00:00:27.020 --> 00:00:30.060
outside the current application context.

13
00:00:30.060 --> 00:00:33.000
The current application context for our goals

14
00:00:33.000 --> 00:00:34.040
is H plus sport,

15
00:00:34.040 --> 00:00:38.040
and from there we want to go now to the LinkedIn website.

16
00:00:38.040 --> 00:00:39.080
This is how the flow will look.

17
00:00:39.080 --> 00:00:41.000
There's a client,

18
00:00:41.000 --> 00:00:43.060
whose going to click on the hyperlink of LinkedIn.

19
00:00:43.060 --> 00:00:46.010
When the request goes to App Context One,

20
00:00:46.010 --> 00:00:49.000
which is the H plus sport application,

21
00:00:49.000 --> 00:00:50.070
the application is going to understand

22
00:00:50.070 --> 00:00:52.090
that this request is for LinkedIn

23
00:00:52.090 --> 00:00:55.010
and I would not be able to serve it.

24
00:00:55.010 --> 00:00:56.000
So what it does is

25
00:00:56.000 --> 00:00:59.000
it gives a response back to the client

26
00:00:59.000 --> 00:01:00.060
stating two things.

27
00:01:00.060 --> 00:01:03.040
First is, that I would not be able to serve this request

28
00:01:03.040 --> 00:01:04.080
because it is for LinkedIn.

29
00:01:04.080 --> 00:01:08.090
And second, the url for the LinkedIn is as follows

30
00:01:08.090 --> 00:01:12.020
please go ahead and hit a request to LinkedIn.

31
00:01:12.020 --> 00:01:16.010
The browser always and hits a new request

32
00:01:16.010 --> 00:01:18.060
which is now going to go to App Context Two

33
00:01:18.060 --> 00:01:20.080
which is a LinkedIn application.

34
00:01:20.080 --> 00:01:23.060
So this feature in which you are navigating

35
00:01:23.060 --> 00:01:26.010
out of your application and moving on

36
00:01:26.010 --> 00:01:28.010
altogether to a new application

37
00:01:28.010 --> 00:01:32.060
is the concept of redirection in servlet specification.

38
00:01:32.060 --> 00:01:37.010
Redirection is done with the help of redirection API,

39
00:01:37.010 --> 00:01:41.070
and it is available on the http servlet response object.

40
00:01:41.070 --> 00:01:44.010
So we're going to implement this in our application.

41
00:01:44.010 --> 00:01:46.050
Let's go in the cord.

42
00:01:46.050 --> 00:01:48.020
This is my index html

43
00:01:48.020 --> 00:01:51.000
and that's the listed limit on line number 25

44
00:01:51.000 --> 00:01:53.020
which is called the hyperlink of LinkedIn.

45
00:01:53.020 --> 00:01:54.030
What I have written is

46
00:01:54.030 --> 00:01:58.030
I've done a redirect servlet which is extending http servlet

47
00:01:58.030 --> 00:02:02.060
and it is annotated with the url pattern of redirect.

48
00:02:02.060 --> 00:02:04.010
It is called a doGet method

49
00:02:04.010 --> 00:02:06.080
and the sole job of this method is

50
00:02:06.080 --> 00:02:09.090
to redirect the control to the LinkedIn website.

51
00:02:09.090 --> 00:02:12.060
So what I need to do is on line number 17,

52
00:02:12.060 --> 00:02:14.060
I need to take the response object

53
00:02:14.060 --> 00:02:19.060
and I have to simply call a method called send redirect.

54
00:02:19.060 --> 00:02:23.020
Now this send redirect API is going to ask me

55
00:02:23.020 --> 00:02:26.090
the full url of the other application.

56
00:02:26.090 --> 00:02:28.080
So I'm going to enter that information here

57
00:02:28.080 --> 00:02:36.050
as a http://www.linkedin.com

58
00:02:36.050 --> 00:02:39.040
It demands you the full http url because

59
00:02:39.040 --> 00:02:42.000
it's another application altogether.

60
00:02:42.000 --> 00:02:45.010
Right, so that's all that we have to do in this method

61
00:02:45.010 --> 00:02:47.070
Now let's take this url pattern and attach it

62
00:02:47.070 --> 00:02:52.050
to the hyperlink on line number 25.

63
00:02:52.050 --> 00:02:53.040
Once we do this,

64
00:02:53.040 --> 00:02:58.020
let's quickly go ahead and check out our changes.

65
00:02:58.020 --> 00:03:00.080
So now if I click on that LinkedIn hyperlink,

66
00:03:00.080 --> 00:03:02.000
do you see what happened?

67
00:03:02.000 --> 00:03:06.060
I actually navigated to the www.linkedin.com website.

68
00:03:06.060 --> 00:03:08.050
Now whatever actions I do here

69
00:03:08.050 --> 00:03:12.020
are all going to be served by the LinkedIn application.

70
00:03:12.020 --> 00:03:14.010
This is a very common functionality which

71
00:03:14.010 --> 00:03:16.050
is hosted in lot of web applications today,

72
00:03:16.050 --> 00:03:18.010
where you have hyperlinks pointing

73
00:03:18.010 --> 00:03:19.060
to famous popular websites like

74
00:03:19.060 --> 00:03:22.050
Facebook, Google, Twitter, LinkedIn, etc

75
00:03:22.050 --> 00:03:26.000
So this is how you can implement that functionality.

76
00:03:26.000 --> 00:03:29.000
So couple of more points when you talk about redirection.

77
00:03:29.000 --> 00:03:30.030
The control is redirected to

78
00:03:30.030 --> 00:03:32.050
a resource outside the current context.

79
00:03:32.050 --> 00:03:36.000
And in this entire process the browser plays a major role.

80
00:03:36.000 --> 00:03:38.010
Because the first application context is going

81
00:03:38.010 --> 00:03:41.070
to tell the browser to hit the new application's url

82
00:03:41.070 --> 00:03:44.000
So browser definitely got it all to play.

