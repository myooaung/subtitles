WEBVTT
1
00:00:00.050 --> 00:00:02.040
- [Instructor] Now let us talk in brief about

2
00:00:02.040 --> 00:00:05.020
expression languages implicit objects.

3
00:00:05.020 --> 00:00:07.090
In the previous demo, we accessed the map of weight

4
00:00:07.090 --> 00:00:11.000
summary from the request scope name.

5
00:00:11.000 --> 00:00:11.080
Right.

6
00:00:11.080 --> 00:00:12.060
Where did that come from?

7
00:00:12.060 --> 00:00:15.060
So that's basically what we're going to talk about now.

8
00:00:15.060 --> 00:00:17.090
We know that in an expression language the expression

9
00:00:17.090 --> 00:00:22.000
could be written as dollar and the curly pair of braces

10
00:00:22.000 --> 00:00:23.070
and then the name of the property.

11
00:00:23.070 --> 00:00:26.030
Or you can alternately write it as dollar and then

12
00:00:26.030 --> 00:00:28.090
request scope dot number of items.

13
00:00:28.090 --> 00:00:31.070
So basically what each of these expressions is doing

14
00:00:31.070 --> 00:00:33.040
is mostly the same thing.

15
00:00:33.040 --> 00:00:35.000
Let's understand that.

16
00:00:35.000 --> 00:00:38.040
When you talk about EL's implicit objects,

17
00:00:38.040 --> 00:00:41.070
please understand that they are not the same as

18
00:00:41.070 --> 00:00:44.000
our jsp implicit objects.

19
00:00:44.000 --> 00:00:46.020
If you recall from a previous videos, there were nine

20
00:00:46.020 --> 00:00:49.000
implicit objects in jsp that we had talked about,

21
00:00:49.000 --> 00:00:52.010
and those are the ones that are of specific type.

22
00:00:52.010 --> 00:00:55.090
HTTP servlet request, HTTP servlet response, then you had

23
00:00:55.090 --> 00:00:58.050
servlet context, servlet config,

24
00:00:58.050 --> 00:01:01.060
then you had HTTP session etc, right?

25
00:01:01.060 --> 00:01:03.060
But when you talk about expression language,

26
00:01:03.060 --> 00:01:08.040
the implicit objects are not the same as you have in jsp.

27
00:01:08.040 --> 00:01:09.080
So then what are they?

28
00:01:09.080 --> 00:01:14.050
Most of them are java . util . map instances,

29
00:01:14.050 --> 00:01:17.020
so basically objects of the map interface

30
00:01:17.020 --> 00:01:21.040
containing the value pairs of attributes from the

31
00:01:21.040 --> 00:01:25.000
actual jsp implicit objects.

32
00:01:25.000 --> 00:01:26.000
What does this mean?

33
00:01:26.000 --> 00:01:26.090
Let's understand this.

34
00:01:26.090 --> 00:01:30.010
Let's say this is your implicit object of jsp,

35
00:01:30.010 --> 00:01:32.040
which is a request, HTTP servlet request is which it

36
00:01:32.040 --> 00:01:34.010
belongs to.

37
00:01:34.010 --> 00:01:38.060
Now from this object, if I take out all the attributes

38
00:01:38.060 --> 00:01:42.030
which are in the form of key and value, and I put them

39
00:01:42.030 --> 00:01:45.070
in a hash map, in the form of key and value,

40
00:01:45.070 --> 00:01:50.070
then that hash map that I get is basically my expression

41
00:01:50.070 --> 00:01:54.000
language implicit object and the name for that is

42
00:01:54.000 --> 00:01:56.020
request scope, right?

43
00:01:56.020 --> 00:01:59.030
So all those implicit objects, let's say for example

44
00:01:59.030 --> 00:02:02.060
HTTP session, so the same thing has been done for HTTP

45
00:02:02.060 --> 00:02:05.020
session, all the key value attributes are picked up,

46
00:02:05.020 --> 00:02:08.030
extracted, they are put in a hash map, and then that

47
00:02:08.030 --> 00:02:11.040
hash map becomes session scope.

48
00:02:11.040 --> 00:02:15.020
That's exactly why we are saying that they are java.util.map

49
00:02:15.020 --> 00:02:20.010
instances and they contain only the attribute information

50
00:02:20.010 --> 00:02:22.010
in the form of key and value.

51
00:02:22.010 --> 00:02:22.090
Okay.

52
00:02:22.090 --> 00:02:25.060
So let's take a look at EL implicit objects are

53
00:02:25.060 --> 00:02:27.080
available for us.

54
00:02:27.080 --> 00:02:30.010
The first one is request scope that we just saw.

55
00:02:30.010 --> 00:02:33.050
So it's basically a map of all the attributes of the

56
00:02:33.050 --> 00:02:37.010
actual HTTP servlet request implicit object.

57
00:02:37.010 --> 00:02:39.020
Up next is the session scope.

58
00:02:39.020 --> 00:02:41.060
That's another implicit object in EL which is a map

59
00:02:41.060 --> 00:02:44.060
of all the attributes of the actual HTTP session object.

60
00:02:44.060 --> 00:02:51.000
Page scope, it is a map of all page-scope attributes.

61
00:02:51.000 --> 00:02:52.030
Application scope.

62
00:02:52.030 --> 00:02:54.030
Application scope is a map of all application

63
00:02:54.030 --> 00:02:56.060
scoped attributes, so if you remember in the jsp

64
00:02:56.060 --> 00:02:59.080
implicit objects, there's a scope called page.

65
00:02:59.080 --> 00:03:01.020
And whatever attributes that you store in page,

66
00:03:01.020 --> 00:03:04.000
those are going to be extracted and put in a separate

67
00:03:04.000 --> 00:03:06.040
hash map which is the page scope.

68
00:03:06.040 --> 00:03:07.080
Okay.

69
00:03:07.080 --> 00:03:09.080
Similarly, whatever attributes are present as a part

70
00:03:09.080 --> 00:03:12.010
of the application scope, which is the servlet context

71
00:03:12.010 --> 00:03:14.080
object, they're going to be extracted and put in a map

72
00:03:14.080 --> 00:03:18.080
and that map is going to be named as application scope.

73
00:03:18.080 --> 00:03:23.070
Cookies, this is going to map your cookie objects.

74
00:03:23.070 --> 00:03:25.020
The next one is param.

75
00:03:25.020 --> 00:03:28.040
The param implicit object of EL is basically going to

76
00:03:28.040 --> 00:03:31.010
help you get the request parameter.

77
00:03:31.010 --> 00:03:33.010
So let's say in your servlet classes we've already

78
00:03:33.010 --> 00:03:36.020
been using this request . get parameter over and over,

79
00:03:36.020 --> 00:03:39.060
right?

80
00:03:39.060 --> 00:03:41.080
So if on a jsp you want to extract the parameter out of the

81
00:03:41.080 --> 00:03:43.030
request, you can just use this implicit object of param

82
00:03:43.030 --> 00:03:46.030
and mention the name of this parameter using the dot

83
00:03:46.030 --> 00:03:49.020
operator and you'll get the value for it.

84
00:03:49.020 --> 00:03:50.070
Next is the header.

85
00:03:50.070 --> 00:03:54.060
So this is going to return you the value of a header.

86
00:03:54.060 --> 00:03:55.050
Right.

87
00:03:55.050 --> 00:03:57.080
A single header and its value.

88
00:03:57.080 --> 00:04:00.010
So let's say you say dollar and you say header,

89
00:04:00.010 --> 00:04:02.070
so that's the implicit object, and in a pair of square

90
00:04:02.070 --> 00:04:04.060
brackets if you mention the name of the header,

91
00:04:04.060 --> 00:04:07.040
like user agent, or content type, etc,

92
00:04:07.040 --> 00:04:10.090
then it is going to return you the value of that header.

93
00:04:10.090 --> 00:04:14.090
For example, when I say dollar header user agent,

94
00:04:14.090 --> 00:04:17.000
it means that I'm going to get the value of

95
00:04:17.000 --> 00:04:18.060
the browser information.

96
00:04:18.060 --> 00:04:21.030
So Mozilla, Internet, Firefox, etc.

97
00:04:21.030 --> 00:04:24.050
So I can actually go ahead and use that user agent property

98
00:04:24.050 --> 00:04:28.020
in order to conditionally code for the kinds of browsers

99
00:04:28.020 --> 00:04:30.050
on my jsp page.

100
00:04:30.050 --> 00:04:34.010
Header values, so the way header gets you a single value

101
00:04:34.010 --> 00:04:35.050
for a particular header,

102
00:04:35.050 --> 00:04:38.040
header values is going to get you all the values of

103
00:04:38.040 --> 00:04:41.070
all headers in an array.

104
00:04:41.070 --> 00:04:46.060
Init param, if you remember we had this context init

105
00:04:46.060 --> 00:04:49.000
parameters concept where you can pass configuration

106
00:04:49.000 --> 00:04:51.070
information to all the servlets, right?

107
00:04:51.070 --> 00:04:55.000
So in your servlet you would have done context . get init

108
00:04:55.000 --> 00:04:58.000
parameter to fetch that context init parameter.

109
00:04:58.000 --> 00:05:00.080
If however you want to do it on your jsp page through

110
00:05:00.080 --> 00:05:04.000
the expression language, you can access the init param

111
00:05:04.000 --> 00:05:06.080
implicit object and just feed the name of the property

112
00:05:06.080 --> 00:05:10.030
using the dot operator and you'll get the value.

113
00:05:10.030 --> 00:05:11.080
Page context.

114
00:05:11.080 --> 00:05:17.020
Now page context is the only object which is exactly

115
00:05:17.020 --> 00:05:21.070
the same as the page context implicit object.

116
00:05:21.070 --> 00:05:22.050
Right?

117
00:05:22.050 --> 00:05:26.000
Apart from this, all the other implicit objects that you see

118
00:05:26.000 --> 00:05:27.090
are those map instances.

119
00:05:27.090 --> 00:05:31.050
But page context is exactly the same as you see in jsp.

120
00:05:31.050 --> 00:05:36.070
So if you recall our discussion, page context in jsp

121
00:05:36.070 --> 00:05:39.000
is the one which has a reference to all the

122
00:05:39.000 --> 00:05:40.050
implicit objects of jsp.

123
00:05:40.050 --> 00:05:41.080
That's the same object that we have even in

124
00:05:41.080 --> 00:05:43.050
expression language.

125
00:05:43.050 --> 00:05:46.070
So if you really want to access only the attribute

126
00:05:46.070 --> 00:05:48.080
information out of all of these implicit objects,

127
00:05:48.080 --> 00:05:51.000
you can go ahead with these names.

128
00:05:51.000 --> 00:05:55.010
However, if you want to access something other than

129
00:05:55.010 --> 00:05:56.060
attribute information from the implicit objects,

130
00:05:56.060 --> 00:05:59.040
then you can get hold of the page context object

131
00:05:59.040 --> 00:06:03.020
and from there you can access the actual implicit object

132
00:06:03.020 --> 00:06:06.090
of jsp and get any other information.

133
00:06:06.090 --> 00:06:09.000
The last point to note is, we've already discussed this

134
00:06:09.000 --> 00:06:11.020
but I'm just iterating this again.

135
00:06:11.020 --> 00:06:15.050
If a pre-defined scope is not mentioned in the expression,

136
00:06:15.050 --> 00:06:17.020
like for example when we say,

137
00:06:17.020 --> 00:06:20.090
dollar and a curly pair or braces cart dot number of items,

138
00:06:20.090 --> 00:06:23.000
here we have really not mentioned any scope.

139
00:06:23.000 --> 00:06:25.090
We have not mentioned any implicit object of

140
00:06:25.090 --> 00:06:28.090
expression language as a part of this expression.

141
00:06:28.090 --> 00:06:33.050
If that's the case, then the system or the expression

142
00:06:33.050 --> 00:06:34.040
language is basically going to do search that object

143
00:06:34.040 --> 00:06:38.010
in all the scopes in the following order.

144
00:06:38.010 --> 00:06:40.040
First, we'll go to the page scope and then it'll search

145
00:06:40.040 --> 00:06:42.010
for a property called cart.

146
00:06:42.010 --> 00:06:44.020
If it doesn't get it, it'll go in the request.

147
00:06:44.020 --> 00:06:45.020
Doesn't get it again?

148
00:06:45.020 --> 00:06:46.050
It'll go in the session.

149
00:06:46.050 --> 00:06:49.060
If it doesn't get it yet again, It'll go to the application.

150
00:06:49.060 --> 00:06:51.090
So wherever it finds that property, it is going to

151
00:06:51.090 --> 00:06:55.000
pick it up and from that it is going to display to you

152
00:06:55.000 --> 00:06:57.030
the number of items value.

153
00:06:57.030 --> 00:07:01.010
Now, whenever you talk about this it is a little risky

154
00:07:01.010 --> 00:07:04.040
business because if you have the same property

155
00:07:04.040 --> 00:07:08.060
name in two different objects, in two different scopes,

156
00:07:08.060 --> 00:07:11.050
let's say the property cart is available in the session

157
00:07:11.050 --> 00:07:13.070
scope, and the application scope,

158
00:07:13.070 --> 00:07:16.050
then your expression language system is possibly going

159
00:07:16.050 --> 00:07:18.060
to encounter a problem.

160
00:07:18.060 --> 00:07:20.060
It doesn't know where to pick it from.

161
00:07:20.060 --> 00:07:23.060
So if you're absolutely sure that this object is only

162
00:07:23.060 --> 00:07:26.080
present in one scope, you can directly access it in the

163
00:07:26.080 --> 00:07:30.040
expression language.

164
00:07:30.040 --> 00:07:32.050
If however, you want to be particular and pick it up from

165
00:07:32.050 --> 00:07:35.000
a specific scope, then you may want to go ahead and

166
00:07:35.000 --> 00:07:38.020
use those implicit objects of the expression language.

167
00:07:38.020 --> 00:07:39.000
Right.

168
00:07:39.000 --> 00:07:41.000
So you have implicit objects of expression language

169
00:07:41.000 --> 00:07:43.070
and generally when we write expressions we stick to the

170
00:07:43.070 --> 00:07:46.000
implicit objects of expression language.

171
00:07:46.000 --> 00:07:49.090
If you are writing a scriptlet and an expression element

172
00:07:49.090 --> 00:07:53.000
on jsp, then you can stick to the jsp implicit objects.

