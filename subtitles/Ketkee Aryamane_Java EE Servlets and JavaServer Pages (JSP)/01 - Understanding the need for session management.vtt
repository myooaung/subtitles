WEBVTT
1
00:00:00.050 --> 00:00:01.060
- [Instructor] Now let us understand

2
00:00:01.060 --> 00:00:04.010
what is session management,

3
00:00:04.010 --> 00:00:07.090
but before that we need to understand an HTTP limitation,

4
00:00:07.090 --> 00:00:11.040
because of which we need session management.

5
00:00:11.040 --> 00:00:14.060
All the requests that happen from the client to the server

6
00:00:14.060 --> 00:00:17.030
go over the HTTP protocol.

7
00:00:17.030 --> 00:00:20.090
Unfortunately HTTP is a stateless protocol,

8
00:00:20.090 --> 00:00:23.080
as in it does not conserve the state of conversation

9
00:00:23.080 --> 00:00:26.010
between the client and the server.

10
00:00:26.010 --> 00:00:28.010
Let's take a look at this diagram.

11
00:00:28.010 --> 00:00:30.020
When a client or a user

12
00:00:30.020 --> 00:00:32.070
comes with a request of adding an item to cart

13
00:00:32.070 --> 00:00:34.020
in a shopping application

14
00:00:34.020 --> 00:00:35.070
it goes to the server.

15
00:00:35.070 --> 00:00:38.030
The server is going to add item to the cart

16
00:00:38.030 --> 00:00:40.070
and then responds back to the client

17
00:00:40.070 --> 00:00:42.080
with an appropriate message.

18
00:00:42.080 --> 00:00:46.060
After this the server forgets this user.

19
00:00:46.060 --> 00:00:48.070
So if the same users comes over again

20
00:00:48.070 --> 00:00:50.080
and adds another item to the cart

21
00:00:50.080 --> 00:00:54.020
the server is going to treat it as a new user.

22
00:00:54.020 --> 00:00:57.000
If the same user comes over and over

23
00:00:57.000 --> 00:01:01.070
in all these cases the server would treat it as a new user.

24
00:01:01.070 --> 00:01:03.030
This is not a very good situation,

25
00:01:03.030 --> 00:01:06.080
because imagine your sense on a shopping cart application

26
00:01:06.080 --> 00:01:08.060
when you add a product to the cart

27
00:01:08.060 --> 00:01:10.000
and when you add another product

28
00:01:10.000 --> 00:01:11.040
you expect that the first product

29
00:01:11.040 --> 00:01:13.050
is already lying there in the cart.

30
00:01:13.050 --> 00:01:16.030
If your server does not track your shopping cart

31
00:01:16.030 --> 00:01:19.020
then it is going to be a very cumbersome experience to you

32
00:01:19.020 --> 00:01:22.000
as an end customer.

33
00:01:22.000 --> 00:01:23.080
This essentially means that

34
00:01:23.080 --> 00:01:27.060
there is a dire need to conserve that state of conversation

35
00:01:27.060 --> 00:01:29.070
between the client and the server.

36
00:01:29.070 --> 00:01:32.010
The server should know that it's the same user

37
00:01:32.010 --> 00:01:33.080
who is coming again and again

38
00:01:33.080 --> 00:01:36.080
and it should preserve the information for that user

39
00:01:36.080 --> 00:01:40.080
so that it becomes easy for the state to be maintained.

40
00:01:40.080 --> 00:01:42.040
So what are the solutions for this?

41
00:01:42.040 --> 00:01:44.050
Let's take a look at it.

42
00:01:44.050 --> 00:01:46.070
The server could actually store the user

43
00:01:46.070 --> 00:01:49.030
information in the database upon the first request

44
00:01:49.030 --> 00:01:50.060
from the user

45
00:01:50.060 --> 00:01:54.050
and then for every subsequent request from the same user

46
00:01:54.050 --> 00:01:57.030
the server could actually pull the database information

47
00:01:57.030 --> 00:01:59.080
for all the users match it with the

48
00:01:59.080 --> 00:02:02.040
incoming users information and then understand

49
00:02:02.040 --> 00:02:05.010
that it's the same user who has come before,

50
00:02:05.010 --> 00:02:08.000
but making a database trip for every request

51
00:02:08.000 --> 00:02:11.050
is going to be a very expensive and time consuming process.

52
00:02:11.050 --> 00:02:13.060
So that's not feasible.

53
00:02:13.060 --> 00:02:16.020
There is the session management that you can implement

54
00:02:16.020 --> 00:02:19.060
with Enterprise Java Beans, which is EJBs API,

55
00:02:19.060 --> 00:02:21.050
but that's all together another topic

56
00:02:21.050 --> 00:02:24.070
and it is not under the serverless JSP API.

57
00:02:24.070 --> 00:02:27.090
So in order to solve this session tracking problem

58
00:02:27.090 --> 00:02:30.050
serverless specification has offered as the

59
00:02:30.050 --> 00:02:34.060
HTTPSession API for session management.

60
00:02:34.060 --> 00:02:37.040
The HTTPSession is going to be created

61
00:02:37.040 --> 00:02:41.040
so it's an object and that gets created for every user

62
00:02:41.040 --> 00:02:45.030
and then we can use that object to store the information

63
00:02:45.030 --> 00:02:47.020
pertaining to the user.

64
00:02:47.020 --> 00:02:51.010
Now just so that the server does not

65
00:02:51.010 --> 00:02:53.060
go and overwrite one users information

66
00:02:53.060 --> 00:02:55.060
with another users information

67
00:02:55.060 --> 00:02:59.050
each user will be given a session object

68
00:02:59.050 --> 00:03:01.070
of his or her own

69
00:03:01.070 --> 00:03:05.000
and every object is going to be uniquely identified

70
00:03:05.000 --> 00:03:06.070
by a session ID.

71
00:03:06.070 --> 00:03:09.050
So the server is going to setup the session ID

72
00:03:09.050 --> 00:03:10.090
to uniquely track

73
00:03:10.090 --> 00:03:14.060
every users session information.

74
00:03:14.060 --> 00:03:19.000
So when you use HTTPSession API for session management

75
00:03:19.000 --> 00:03:21.070
this is how the solution will look like.

76
00:03:21.070 --> 00:03:23.040
Let's say the client comes in with the first

77
00:03:23.040 --> 00:03:25.000
request to the server site

78
00:03:25.000 --> 00:03:27.030
the server is going to generate that session ID

79
00:03:27.030 --> 00:03:30.070
and give it back to the client as apart of the response.

80
00:03:30.070 --> 00:03:32.050
Every subsequent request

81
00:03:32.050 --> 00:03:35.020
that further comes from the same client

82
00:03:35.020 --> 00:03:36.090
this session ID is going to travel

83
00:03:36.090 --> 00:03:38.060
from the client to the server

84
00:03:38.060 --> 00:03:40.030
so that the server recognizes

85
00:03:40.030 --> 00:03:42.060
that it is the same user.

86
00:03:42.060 --> 00:03:45.030
So essentially this server

87
00:03:45.030 --> 00:03:47.010
is going to help the client

88
00:03:47.010 --> 00:03:49.000
and the client is going to help the server.

89
00:03:49.000 --> 00:03:50.070
They're going to work together

90
00:03:50.070 --> 00:03:52.060
and of course the session ID

91
00:03:52.060 --> 00:03:55.010
needs to get exchanged between them

92
00:03:55.010 --> 00:03:58.040
continuously for every request response chain.

93
00:03:58.040 --> 00:04:01.080
This session ID can be exchanged by two ways.

94
00:04:01.080 --> 00:04:05.010
Either by cookies or by URL rewriting.

95
00:04:05.010 --> 00:04:07.040
We will look at how the session ID gets exchanged

96
00:04:07.040 --> 00:04:10.000
through cookies in the next video.

