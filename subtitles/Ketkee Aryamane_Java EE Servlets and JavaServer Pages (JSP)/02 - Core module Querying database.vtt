WEBVTT
1
00:00:00.050 --> 00:00:01.090
- [Instructor] Okay so let's see what we are going

2
00:00:01.090 --> 00:00:03.080
to implement as part of this demo.

3
00:00:03.080 --> 00:00:07.030
We click on the login hyperlink

4
00:00:07.030 --> 00:00:10.090
enter the credentials, and when we reach the home page

5
00:00:10.090 --> 00:00:12.070
we'll click on order history,

6
00:00:12.070 --> 00:00:15.030
and we'll get these products displayed,

7
00:00:15.030 --> 00:00:17.090
which is basically the order history for the customer.

8
00:00:17.090 --> 00:00:20.060
So let's start.

9
00:00:20.060 --> 00:00:23.000
Now let us take a look at this Java servlet page

10
00:00:23.000 --> 00:00:23.090
tag library demo.

11
00:00:23.090 --> 00:00:26.090
The first of them we are going to see the code module

12
00:00:26.090 --> 00:00:29.000
and then we'll see the FMT module.

13
00:00:29.000 --> 00:00:31.060
So for that, we need a servlet class right now

14
00:00:31.060 --> 00:00:35.000
for the JSTL, so let's go ahead,

15
00:00:35.000 --> 00:00:36.090
and what we are going to do is,

16
00:00:36.090 --> 00:00:39.080
we are going to show the order history now.

17
00:00:39.080 --> 00:00:41.090
So the order history is going to be completely shown

18
00:00:41.090 --> 00:00:43.080
on the page using JSDL.

19
00:00:43.080 --> 00:00:45.050
So my order history servlet is ready,

20
00:00:45.050 --> 00:00:47.000
I already have a template of it,

21
00:00:47.000 --> 00:00:49.080
which extends HHTPServelet, and of course I've annotated it

22
00:00:49.080 --> 00:00:53.040
with the order history URL pattern.

23
00:00:53.040 --> 00:00:57.040
Next step we'll do Add a method in the ApplicationDao class

24
00:00:57.040 --> 00:00:59.070
to get the order details for the user.

25
00:00:59.070 --> 00:01:03.030
So let's go ahead,

26
00:01:03.030 --> 00:01:07.070
and this is my order details method,

27
00:01:07.070 --> 00:01:10.060
which is getOrder, on line 131,

28
00:01:10.060 --> 00:01:13.010
it is going to return here a list of orders,

29
00:01:13.010 --> 00:01:15.000
the way we have it encapsulating

30
00:01:15.000 --> 00:01:16.070
all the information in objects,

31
00:01:16.070 --> 00:01:18.000
similarly the orders also

32
00:01:18.000 --> 00:01:19.090
are going to be putting an order object,

33
00:01:19.090 --> 00:01:22.040
and for all those orders, we are going to create a list.

34
00:01:22.040 --> 00:01:24.080
So, that's the return of this method.

35
00:01:24.080 --> 00:01:26.050
Okay, so let's get started with this,

36
00:01:26.050 --> 00:01:35.090
on line number 134, let's quickly get a connection first.

37
00:01:35.090 --> 00:01:39.060
Next, we'll have to write the select query for the orders.

38
00:01:39.060 --> 00:01:45.040
So, let's write that query,

39
00:01:45.040 --> 00:01:48.060
select * from, the table in this case

40
00:01:48.060 --> 00:01:51.010
is this time the orders table,

41
00:01:51.010 --> 00:01:56.070
and where the user_name is question mark.

42
00:01:56.070 --> 00:01:59.020
Let's put a semicolon there.

43
00:01:59.020 --> 00:02:02.060
Once we do that let's get the prepare statement, as usual,

44
00:02:02.060 --> 00:02:06.030
so, I'm going to fetch the PreparedStatement API,

45
00:02:06.030 --> 00:02:14.000
on the connection object, and pass that sql query.

46
00:02:14.000 --> 00:02:16.070
And let me set the parameter for user_name

47
00:02:16.070 --> 00:02:20.000
so I'm going to say statement.setString

48
00:02:20.000 --> 00:02:22.070
parameterIndex number one, there's only one index.

49
00:02:22.070 --> 00:02:27.090
So, user_name, that's coming in as the method parameter.

50
00:02:27.090 --> 00:02:30.090
Once we do this, we're going to execute this query,

51
00:02:30.090 --> 00:02:33.070
get the resultset and return the Orders Info,

52
00:02:33.070 --> 00:02:36.000
so that's what it is going to be,

53
00:02:36.000 --> 00:02:37.030
and what are we going to do?

54
00:02:37.030 --> 00:02:40.070
We are going to basically execute that statement,

55
00:02:40.070 --> 00:02:46.030
executeQuery API, which will return me the ResultSetObject.

56
00:02:46.030 --> 00:02:50.020
Let's take it in the ResultSet variable reference,

57
00:02:50.020 --> 00:02:53.000
and let's now go ahead and iterate the result set,

58
00:02:53.000 --> 00:02:58.010
so that'll be while(set.next())

59
00:02:58.010 --> 00:02:59.070
and before we do anything in the loop,

60
00:02:59.070 --> 00:03:01.080
let's quickly go ahead up there,

61
00:03:01.080 --> 00:03:03.040
and on line number 132,

62
00:03:03.040 --> 00:03:05.010
let's create an order reference first

63
00:03:05.010 --> 00:03:06.030
so that we start storing

64
00:03:06.030 --> 00:03:09.070
all the details in this order object,

65
00:03:09.070 --> 00:03:17.020
and let's also create the list of such orders.

66
00:03:17.020 --> 00:03:21.080
Equal to new ArrayList.

67
00:03:21.080 --> 00:03:23.090
Good, so now let's come down,

68
00:03:23.090 --> 00:03:29.020
and start filling in all the values of that ResultSet rule

69
00:03:29.020 --> 00:03:32.000
to the list of orders, right?

70
00:03:32.000 --> 00:03:34.050
So let me come inside and say order,

71
00:03:34.050 --> 00:03:37.000
and instantiate this first,

72
00:03:37.000 --> 00:03:40.020
that will be order.

73
00:03:40.020 --> 00:03:45.080
And then it will be order.setOrderId,

74
00:03:45.080 --> 00:03:49.070
let's say, and it's going to come from the result set

75
00:03:49.070 --> 00:03:51.070
in the form of an int.

76
00:03:51.070 --> 00:03:53.080
so I'm going to say getInt,

77
00:03:53.080 --> 00:03:58.030
and feed the column name of order_id.

78
00:03:58.030 --> 00:04:04.050
Similarly, I'm going to say order.set, the product name,

79
00:04:04.050 --> 00:04:09.040
which is this, and that will come as a string,

80
00:04:09.040 --> 00:04:17.010
which is the column for product name.

81
00:04:17.010 --> 00:04:22.040
The next one will be order dot set the product image path,

82
00:04:22.040 --> 00:04:24.060
so we're going to show the order product name,

83
00:04:24.060 --> 00:04:27.050
we're going to show the order product image as well on the JSP.

84
00:04:27.050 --> 00:04:29.070
For this we need all these values,

85
00:04:29.070 --> 00:04:31.080
so I'm going to say

86
00:04:31.080 --> 00:04:36.070
set.getString,

87
00:04:36.070 --> 00:04:42.070
and the column name for image is image_path.

88
00:04:42.070 --> 00:04:44.050
Then let's set the order date,

89
00:04:44.050 --> 00:04:50.060
so that will be order.setOrderDate,

90
00:04:50.060 --> 00:04:52.080
which is going to take a date parameter.

91
00:04:52.080 --> 00:04:54.060
So what we're going to do is we are going to convert it

92
00:04:54.060 --> 00:04:58.010
to the Java.util.date right away,

93
00:04:58.010 --> 00:05:02.020
so I'm going to say this will be new Date,

94
00:05:02.020 --> 00:05:07.080
and to that I'm going to feed set.getDate,

95
00:05:07.080 --> 00:05:09.050
specify the column name,

96
00:05:09.050 --> 00:05:15.060
which is order_date, and then on that

97
00:05:15.060 --> 00:05:18.040
you can chain the getTime API.

98
00:05:18.040 --> 00:05:22.030
So that's how you'll convert it to Java.util.date.

99
00:05:22.030 --> 00:05:25.010
Okay, and then the last one that we need to set

100
00:05:25.010 --> 00:05:31.010
is the user name, so I'm going to say order.setUsername

101
00:05:31.010 --> 00:05:37.040
set.getString, and feed the column name for user_name,

102
00:05:37.040 --> 00:05:39.040
which is this.

103
00:05:39.040 --> 00:05:41.060
Okay.

104
00:05:41.060 --> 00:05:43.030
So once we've done this, we just need

105
00:05:43.030 --> 00:05:45.060
to put this order object in that list of orders.

106
00:05:45.060 --> 00:05:52.080
So I'm going to say orders.add, and I'll put that order object.

107
00:05:52.080 --> 00:05:54.060
Once done, we just have to return this

108
00:05:54.060 --> 00:05:57.070
and tie our list of orders back to the calling method,

109
00:05:57.070 --> 00:06:01.060
so I'm going to go right down, on line number 169,

110
00:06:01.060 --> 00:06:05.090
and I'm going to say return orders.

111
00:06:05.090 --> 00:06:08.070
Okay.

112
00:06:08.070 --> 00:06:11.080
So that's what this is, so we have added the method

113
00:06:11.080 --> 00:06:14.080
in the application down, and let's go to the next step.

114
00:06:14.080 --> 00:06:16.020
Yeah, of course, we left out an out call

115
00:06:16.020 --> 00:06:18.060
that ApplicationDao method from this servlet class

116
00:06:18.060 --> 00:06:21.030
and then we'll set all the data in the request call,

117
00:06:21.030 --> 00:06:24.010
and forward the control to the JSP, so let's come back

118
00:06:24.010 --> 00:06:27.090
on Eclipse, that's the history servlet class.

119
00:06:27.090 --> 00:06:29.030
The first step is we, of course,

120
00:06:29.030 --> 00:06:32.020
need to retrieve the username from the session,

121
00:06:32.020 --> 00:06:34.090
so I'm going to say string username,

122
00:06:34.090 --> 00:06:41.000
request.getSession,

123
00:06:41.000 --> 00:06:43.080
and then .getAttribute,

124
00:06:43.080 --> 00:06:47.030
and feed the name of the attribute.

125
00:06:47.030 --> 00:06:48.090
So of course, this is going to return me something

126
00:06:48.090 --> 00:06:53.000
of the object type, so casting is necessary.

127
00:06:53.000 --> 00:06:55.070
Okay, now let's go in and create an instance

128
00:06:55.070 --> 00:06:59.090
of the ApplicationDao, so I'm going to say

129
00:06:59.090 --> 00:07:03.000
new ApplicationDao, and then,

130
00:07:03.000 --> 00:07:05.050
I'll call the method of getOrders.

131
00:07:05.050 --> 00:07:10.020
So getOrders, which demands the username as an argument,

132
00:07:10.020 --> 00:07:15.090
okay, and this will return something of the list parameter,

133
00:07:15.090 --> 00:07:21.050
so list of orders, get a reference, and there we go.

134
00:07:21.050 --> 00:07:25.050
Of course you need to import this order class, right.

135
00:07:25.050 --> 00:07:28.000
And once we get there, then we just have to set that

136
00:07:28.000 --> 00:07:30.080
in that orders list into the request call,

137
00:07:30.080 --> 00:07:32.070
so on line number 28, I'm just going to say

138
00:07:32.070 --> 00:07:37.060
request.setAttribute, and the key value,

139
00:07:37.060 --> 00:07:40.060
so you can say orders is the key,

140
00:07:40.060 --> 00:07:43.040
and the value will be this orders object.

141
00:07:43.040 --> 00:07:46.010
And once you do that, home.jsp is the place

142
00:07:46.010 --> 00:07:47.070
where we are displaying the order history,

143
00:07:47.070 --> 00:07:49.030
if you want, if you choose,

144
00:07:49.030 --> 00:07:52.090
you can make a separate order history page as well,

145
00:07:52.090 --> 00:07:54.060
but as of now for the demo purposes,

146
00:07:54.060 --> 00:07:56.080
we're just utilizing that home.jsp,

147
00:07:56.080 --> 00:07:58.090
so I'm going to take the request object,

148
00:07:58.090 --> 00:08:03.090
get the request dispatcher on it,

149
00:08:03.090 --> 00:08:11.010
which is this, and then feed the path of the home.jsp,

150
00:08:11.010 --> 00:08:14.090
and then forward this along with the request,

151
00:08:14.090 --> 00:08:17.030
and the response objects.

152
00:08:17.030 --> 00:08:20.020
There we go, so our servlet is ready, the Dao is ready,

153
00:08:20.020 --> 00:08:22.030
the bean is ready, if you look at this order bean,

154
00:08:22.030 --> 00:08:24.000
it's a very simple java bean class,

155
00:08:24.000 --> 00:08:26.000
with all the instance variables,

156
00:08:26.000 --> 00:08:28.070
and of course, the get and setters that we've utilized

157
00:08:28.070 --> 00:08:31.070
in order to encapsulate the order information

158
00:08:31.070 --> 00:08:34.000
for this object oriented design.

159
00:08:34.000 --> 00:08:37.030
Right, so there we are and the rest of the steps

160
00:08:37.030 --> 00:08:39.000
we'll take a look at in the next video.

