WEBVTT
1
00:00:00.060 --> 00:00:01.060
- [Narrator] Now that we've taken a look

2
00:00:01.060 --> 00:00:02.080
at some of the APIs,

3
00:00:02.080 --> 00:00:06.040
let's talk about the concept of scopes in a web application.

4
00:00:06.040 --> 00:00:08.040
All the components that you have in your web app,

5
00:00:08.040 --> 00:00:12.080
let's say servlets, filters, listeners, GSPs,

6
00:00:12.080 --> 00:00:14.080
all of them talk to each other.

7
00:00:14.080 --> 00:00:16.050
They have to talk to each other because they need

8
00:00:16.050 --> 00:00:20.020
to work together in order to run the application.

9
00:00:20.020 --> 00:00:21.010
So talking to each other

10
00:00:21.010 --> 00:00:23.060
is basically by sharing information.

11
00:00:23.060 --> 00:00:24.070
Now think about it.

12
00:00:24.070 --> 00:00:26.070
Where do you want to save this information?

13
00:00:26.070 --> 00:00:28.010
In the database?

14
00:00:28.010 --> 00:00:30.070
No that's not a very good idea because if you really want

15
00:00:30.070 --> 00:00:32.080
to have access to the information,

16
00:00:32.080 --> 00:00:34.090
you need to make a database strip for it,

17
00:00:34.090 --> 00:00:37.080
which is going to be a costly business.

18
00:00:37.080 --> 00:00:40.040
And moreover, the information that you're trying to use

19
00:00:40.040 --> 00:00:42.080
to communicate between the different components,

20
00:00:42.080 --> 00:00:46.000
may really need to die out quickly.

21
00:00:46.000 --> 00:00:47.070
Let's say I want to store some information

22
00:00:47.070 --> 00:00:49.070
only for one particular request

23
00:00:49.070 --> 00:00:51.060
and once that request is completed,

24
00:00:51.060 --> 00:00:53.080
I need to get rid of that information.

25
00:00:53.080 --> 00:00:56.050
So that's exactly where you have the facility

26
00:00:56.050 --> 00:00:59.000
of scopes in a web application.

27
00:00:59.000 --> 00:01:01.070
The information that you want to share across components

28
00:01:01.070 --> 00:01:06.080
can be stored in scope objects in the form of attributes.

29
00:01:06.080 --> 00:01:08.050
Now attributes could mean anything.

30
00:01:08.050 --> 00:01:10.030
A string value, an integer,

31
00:01:10.030 --> 00:01:13.070
a completely user defined object, anything.

32
00:01:13.070 --> 00:01:17.030
There are primarily four scopes in a web application.

33
00:01:17.030 --> 00:01:19.070
The first one is the request scope,

34
00:01:19.070 --> 00:01:22.050
which is represented by the HTTPServletRequest

35
00:01:22.050 --> 00:01:25.040
or of course, the ServletRequest object.

36
00:01:25.040 --> 00:01:28.090
This scope is going to be alive until the response

37
00:01:28.090 --> 00:01:32.010
of this request goes back to the client.

38
00:01:32.010 --> 00:01:35.020
So you can store information in this request scope

39
00:01:35.020 --> 00:01:37.000
in the form of an attribute,

40
00:01:37.000 --> 00:01:39.060
and the information of the attribute is again

41
00:01:39.060 --> 00:01:42.040
a key and a value pair.

42
00:01:42.040 --> 00:01:44.080
The next scope is the session scope,

43
00:01:44.080 --> 00:01:49.000
which is represented by the HTTPSession object.

44
00:01:49.000 --> 00:01:52.070
This scope is going to be alive til the user either

45
00:01:52.070 --> 00:01:57.010
quits the browser, or the user clicks on the logout button,

46
00:01:57.010 --> 00:02:02.000
or maybe the session itself times out on the user's machine.

47
00:02:02.000 --> 00:02:05.040
Please note that inside the session of course you can have

48
00:02:05.040 --> 00:02:08.040
multiple requests spanned.

49
00:02:08.040 --> 00:02:10.040
The next scope is the context scope,

50
00:02:10.040 --> 00:02:13.070
which is of course sometimes known as the application scope,

51
00:02:13.070 --> 00:02:17.010
represented by the ServletContext object.

52
00:02:17.010 --> 00:02:18.080
We've already taken a look at this API

53
00:02:18.080 --> 00:02:20.070
in one of our previous videos,

54
00:02:20.070 --> 00:02:22.090
and we know that it is used to share information

55
00:02:22.090 --> 00:02:24.070
across all the servlets.

56
00:02:24.070 --> 00:02:27.050
Moreover, it can also help you to share information

57
00:02:27.050 --> 00:02:30.060
in the form of attributes and pass it to any other

58
00:02:30.060 --> 00:02:33.060
component of your web application.

59
00:02:33.060 --> 00:02:35.070
The last scope is the page scope,

60
00:02:35.070 --> 00:02:39.000
which is represented by the JSPContext object,

61
00:02:39.000 --> 00:02:42.030
and it is going to be accessible from any JSP page

62
00:02:42.030 --> 00:02:44.040
that creates that object.

63
00:02:44.040 --> 00:02:46.020
Right, so those are the scopes that you have

64
00:02:46.020 --> 00:02:49.030
in a web application and they are very useful

65
00:02:49.030 --> 00:02:51.080
because there are very small bits of information

66
00:02:51.080 --> 00:02:57.010
that you need to pass all the time for your functionalities.

67
00:02:57.010 --> 00:03:00.090
Now that we have talked about the APIs and the scopes,

68
00:03:00.090 --> 00:03:03.070
let's quickly understand the subtle differences

69
00:03:03.070 --> 00:03:07.080
between parameters and attributes.

70
00:03:07.080 --> 00:03:09.070
We have looked at both of these.

71
00:03:09.070 --> 00:03:11.010
When we have talked about parameters,

72
00:03:11.010 --> 00:03:13.040
we have seen them in the client data.

73
00:03:13.040 --> 00:03:16.070
We have talked about attributes when we spoke about scopes.

74
00:03:16.070 --> 00:03:18.050
Now the difference between them is

75
00:03:18.050 --> 00:03:22.040
when parameters are only going to return you string values,

76
00:03:22.040 --> 00:03:25.080
whereas attributes can help you return objects.

77
00:03:25.080 --> 00:03:28.080
Attributes could be anything, a string, an integer,

78
00:03:28.080 --> 00:03:31.000
a user defined object, anything.

79
00:03:31.000 --> 00:03:32.040
But when you talk about parameters,

80
00:03:32.040 --> 00:03:34.040
they're only string values.

81
00:03:34.040 --> 00:03:35.080
The other thing is,

82
00:03:35.080 --> 00:03:38.090
parameters cannot be set in those scopes.

83
00:03:38.090 --> 00:03:41.010
The four scopes that we talked about a while ago,

84
00:03:41.010 --> 00:03:43.080
you cannot set any parameters in the scope.

85
00:03:43.080 --> 00:03:47.060
Whereas the attributes can definitely be set in scopes,

86
00:03:47.060 --> 00:03:51.010
and that's exactly how you pass that information

87
00:03:51.010 --> 00:03:53.090
across all the components.

88
00:03:53.090 --> 00:03:56.050
One of the ways to retrieve a parameter

89
00:03:56.050 --> 00:03:58.070
is through the getParameter API.

90
00:03:58.070 --> 00:04:00.080
We have used this on a request object,

91
00:04:00.080 --> 00:04:02.010
feed the name of the parameter

92
00:04:02.010 --> 00:04:05.000
and you'll get its value in return.

93
00:04:05.000 --> 00:04:07.060
If however you want to get the attribute information,

94
00:04:07.060 --> 00:04:09.090
there is an API called get attribute

95
00:04:09.090 --> 00:04:11.030
to which you pass a key,

96
00:04:11.030 --> 00:04:14.020
and you get the value of the attribute.

97
00:04:14.020 --> 00:04:16.090
If you want to set the attribute in any of the scopes,

98
00:04:16.090 --> 00:04:19.000
you have a method called set attribute

99
00:04:19.000 --> 00:04:22.040
which demands information in the form of key and value.

100
00:04:22.040 --> 00:04:26.010
The value as I said would be any object.

101
00:04:26.010 --> 00:04:29.040
And there's another way of setting parameters,

102
00:04:29.040 --> 00:04:31.060
we have done that in the web.xml,

103
00:04:31.060 --> 00:04:34.090
the inet parameters, the context parameters,

104
00:04:34.090 --> 00:04:37.070
all of them can be configured in web.xml.

105
00:04:37.070 --> 00:04:42.000
But parameters cannot be set in scopes like attributes.

