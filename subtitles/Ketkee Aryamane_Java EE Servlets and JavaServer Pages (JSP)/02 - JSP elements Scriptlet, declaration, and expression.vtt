WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Woman] Now, let's take a look at the basic J-S-P elements

2
00:00:02.060 --> 00:00:06.000
that we need to know in order to work with the J-S-P page.

3
00:00:06.000 --> 00:00:09.010
J-S-P elements are basically to support Java

4
00:00:09.010 --> 00:00:13.000
or any other scripting code on the J-S-P page.

5
00:00:13.000 --> 00:00:16.060
Now, whenever you write code inside a J-S-P element,

6
00:00:16.060 --> 00:00:18.050
all that Java code goes into

7
00:00:18.050 --> 00:00:21.020
the translated servlet file of J-S-P.

8
00:00:21.020 --> 00:00:22.060
What does this mean?

9
00:00:22.060 --> 00:00:26.060
Let's say this is your J-S-P file, Login dot J-S-P.

10
00:00:26.060 --> 00:00:28.040
Whatever code that you embed

11
00:00:28.040 --> 00:00:31.000
as a part of the J-S-P elements on this page,

12
00:00:31.000 --> 00:00:35.090
once you do that the entire code is going to get translated

13
00:00:35.090 --> 00:00:38.090
into a Login Servlet Java file.

14
00:00:38.090 --> 00:00:41.080
This Login J-S-P of course will have both H-T-M-L

15
00:00:41.080 --> 00:00:44.020
and Java code but once it gets translated

16
00:00:44.020 --> 00:00:47.070
it'll be converted into a Login Servlet dot Java.

17
00:00:47.070 --> 00:00:50.040
It's servlet class, so it's definitely going to be similar

18
00:00:50.040 --> 00:00:53.090
to the way we have written servlet classes so far.

19
00:00:53.090 --> 00:00:56.050
But this translation process is something that is

20
00:00:56.050 --> 00:00:59.040
completely owned up by the container software.

21
00:00:59.040 --> 00:01:02.080
As developers, we wouldn't have to do anything for this.

22
00:01:02.080 --> 00:01:06.010
Once this is going to get translated,

23
00:01:06.010 --> 00:01:08.090
it's also going to get compiled because class files

24
00:01:08.090 --> 00:01:12.010
is what the server needs to execute any Java code.

25
00:01:12.010 --> 00:01:14.060
So, the Java file gets compiled and gets converted

26
00:01:14.060 --> 00:01:17.000
into a dot class file.

27
00:01:17.000 --> 00:01:19.050
Since this is like a servlet,

28
00:01:19.050 --> 00:01:21.030
it'll have all the life cycle methods,

29
00:01:21.030 --> 00:01:24.060
similar to iron it, service and destroy.

30
00:01:24.060 --> 00:01:28.010
So no let's take a look at what elements we have.

31
00:01:28.010 --> 00:01:31.080
The first among them a Scriptlet and Expression.

32
00:01:31.080 --> 00:01:34.020
A Scriptlet element looks like this:

33
00:01:34.020 --> 00:01:36.040
it starts off with an angle bracket, a percentage sign,

34
00:01:36.040 --> 00:01:39.010
and then the symbols in the reverse order indicate

35
00:01:39.010 --> 00:01:42.050
the closing of the Scriptlet on your J-S-P page.

36
00:01:42.050 --> 00:01:44.010
So, what does the Scriptlet do?

37
00:01:44.010 --> 00:01:48.050
It helps you to write Java statements on the J-S-P page.

38
00:01:48.050 --> 00:01:51.010
When I say Java statements, it could be an "If" condition,

39
00:01:51.010 --> 00:01:53.030
or you could run a full loop,

40
00:01:53.030 --> 00:01:57.080
or any amount of statements which comprise your logic.

41
00:01:57.080 --> 00:02:00.010
Now, when you talk about the code inside a Scriptlet,

42
00:02:00.010 --> 00:02:02.090
all the statements written inside the Scriptlet

43
00:02:02.090 --> 00:02:05.090
will go into the underscore J-S-P service method

44
00:02:05.090 --> 00:02:08.020
when this J-S-P gets translated

45
00:02:08.020 --> 00:02:10.080
to the corresponding servlet class.

46
00:02:10.080 --> 00:02:13.000
Of course now this underscore J-S-P service method

47
00:02:13.000 --> 00:02:14.090
is something that is very subjective

48
00:02:14.090 --> 00:02:17.020
to the J-S-P life cycle.

49
00:02:17.020 --> 00:02:18.020
We're going to talk about that

50
00:02:18.020 --> 00:02:20.030
in the later part of this course.

51
00:02:20.030 --> 00:02:22.060
The next element is Expression.

52
00:02:22.060 --> 00:02:25.020
Expression looks like this: it's an angled bracket,

53
00:02:25.020 --> 00:02:27.070
a percentage sign, and there's an equal to sign,

54
00:02:27.070 --> 00:02:30.020
which will indicate that it's an expression element.

55
00:02:30.020 --> 00:02:32.060
For closing this element, you need to give

56
00:02:32.060 --> 00:02:35.010
the percentage and the angled bracket in the reverse order.

57
00:02:35.010 --> 00:02:36.060
What does this do?

58
00:02:36.060 --> 00:02:39.060
This helps us to evaluate expressions

59
00:02:39.060 --> 00:02:43.050
and print the output of them on the J-S-P page.

60
00:02:43.050 --> 00:02:47.060
So, what happens when the expression element is written out?

61
00:02:47.060 --> 00:02:50.060
On your page, whenever you write an expression element,

62
00:02:50.060 --> 00:02:54.060
the expression value is going to go

63
00:02:54.060 --> 00:02:57.030
as an argument to an A-P-I.

64
00:02:57.030 --> 00:03:00.050
That A-P-I is out dot printin.

65
00:03:00.050 --> 00:03:03.000
Out dot printin essentially is responsible

66
00:03:03.000 --> 00:03:06.060
for printing a value on the J-S-P page.

67
00:03:06.060 --> 00:03:08.060
So, the expression that you've written out here

68
00:03:08.060 --> 00:03:10.080
is going to go as an argument to that call

69
00:03:10.080 --> 00:03:13.080
and the entire statement is going to be written out

70
00:03:13.080 --> 00:03:18.000
inside the underscore J-S-P service method.

71
00:03:18.000 --> 00:03:21.050
So essentially, all the code that you write in Scriptlet

72
00:03:21.050 --> 00:03:24.020
or Expression ultimately goes

73
00:03:24.020 --> 00:03:26.040
into the underscore J-S-P service method

74
00:03:26.040 --> 00:03:31.060
of the translated J-S-P's servlet file.

75
00:03:31.060 --> 00:03:32.080
Let's look at the third one,

76
00:03:32.080 --> 00:03:34.090
which is the Declaration element.

77
00:03:34.090 --> 00:03:36.020
Now this is a little different

78
00:03:36.020 --> 00:03:40.030
because this one helps to declare variables and methods

79
00:03:40.030 --> 00:03:42.050
in the pages scripting language.

80
00:03:42.050 --> 00:03:44.020
And when all the code that you write

81
00:03:44.020 --> 00:03:45.090
within a declaration element

82
00:03:45.090 --> 00:03:49.070
goes as separate methods in the translated servlet file.

83
00:03:49.070 --> 00:03:51.020
Let's understand this bit.

84
00:03:51.020 --> 00:03:53.010
First of all, declaration looks like this:

85
00:03:53.010 --> 00:03:54.080
angle bracket, a percentage sign,

86
00:03:54.080 --> 00:03:56.090
and this exclamation mark is going to indicate

87
00:03:56.090 --> 00:03:59.000
that it is a declaration statement.

88
00:03:59.000 --> 00:04:01.090
To close it, again, those symbols in the reverse order.

89
00:04:01.090 --> 00:04:05.000
Whenever your J-S-P gets translated

90
00:04:05.000 --> 00:04:06.070
we know that there are life cycle methods

91
00:04:06.070 --> 00:04:09.020
corresponding to the J-S-P's life cycle.

92
00:04:09.020 --> 00:04:12.020
Other than that, if you would really like to add

93
00:04:12.020 --> 00:04:15.070
new variables and new methods in that translated file,

94
00:04:15.070 --> 00:04:19.070
then you will need to use the declaration element.

95
00:04:19.070 --> 00:04:21.010
So, whatever code you write here

96
00:04:21.010 --> 00:04:23.030
will be the declaration of instance variables,

97
00:04:23.030 --> 00:04:25.040
or declaration of instance methods,

98
00:04:25.040 --> 00:04:27.060
and they'll go out as separate entries

99
00:04:27.060 --> 00:04:30.010
into the translated servlet file.

100
00:04:30.010 --> 00:04:32.030
In the next video we'll catch a demo

101
00:04:32.030 --> 00:04:34.000
for all these three basic elements.

