WEBVTT
1
00:00:00.050 --> 00:00:03.010
- [Woman] Let's take a look at why do we need a servlet.

2
00:00:03.010 --> 00:00:05.000
Let's understand a diagram

3
00:00:05.000 --> 00:00:07.070
of client server architecture over the web.

4
00:00:07.070 --> 00:00:09.050
Every website that you access

5
00:00:09.050 --> 00:00:12.030
is going to be accessed from the web browser.

6
00:00:12.030 --> 00:00:14.030
That's the web client.

7
00:00:14.030 --> 00:00:16.070
And this web client is going to make a request

8
00:00:16.070 --> 00:00:18.000
to the web server.

9
00:00:18.000 --> 00:00:19.070
The web server is going to act on it

10
00:00:19.070 --> 00:00:23.060
and produce a response and give it back to the web client.

11
00:00:23.060 --> 00:00:26.060
So the communication with any website that you make today

12
00:00:26.060 --> 00:00:30.030
is nothing but a series of requests and responses,

13
00:00:30.030 --> 00:00:33.060
a chain of requests and responses that go on.

14
00:00:33.060 --> 00:00:35.060
And it could be concurrent requests.

15
00:00:35.060 --> 00:00:38.040
There are millions of user accessing your website

16
00:00:38.040 --> 00:00:40.030
all over the globe and there could be

17
00:00:40.030 --> 00:00:43.010
multiple concurrent parallel requests coming in

18
00:00:43.010 --> 00:00:45.050
from multiple browsers.

19
00:00:45.050 --> 00:00:48.060
Now, this entire chain of requests and response

20
00:00:48.060 --> 00:00:50.070
that gets exchanged between the web client

21
00:00:50.070 --> 00:00:54.060
and the web server is nothing but over the H-T-T-P protocol.

22
00:00:54.060 --> 00:00:56.060
Hypertext transfer protocol

23
00:00:56.060 --> 00:00:58.090
is the only communication strategy

24
00:00:58.090 --> 00:01:00.080
between the web client and the server.

25
00:01:00.080 --> 00:01:03.090
They do not understand any other language except H-T-T-P.

26
00:01:03.090 --> 00:01:08.040
Now, if your web server needs to act and process a request,

27
00:01:08.040 --> 00:01:10.060
it needs to be fed a set of instructions.

28
00:01:10.060 --> 00:01:13.030
Let's understand, what option do we have

29
00:01:13.030 --> 00:01:15.040
for server-side programming?

30
00:01:15.040 --> 00:01:18.010
We could use Java Standard-Edition A-P-Is,

31
00:01:18.010 --> 00:01:21.040
which is code Java, but code Java A-P-Is are designed

32
00:01:21.040 --> 00:01:24.040
only to develop stand-alone applications.

33
00:01:24.040 --> 00:01:25.070
Yes, you do have applets

34
00:01:25.070 --> 00:01:27.080
but applets work in the browser side,

35
00:01:27.080 --> 00:01:29.020
not on the server side.

36
00:01:29.020 --> 00:01:31.040
Let's take a look at another option.

37
00:01:31.040 --> 00:01:34.010
This Common Gateway Interface scripts, which is C-G-I.

38
00:01:34.010 --> 00:01:36.050
Now these are nothing but programs

39
00:01:36.050 --> 00:01:39.090
which will help web servers generate dynamic webpages

40
00:01:39.090 --> 00:01:41.030
because that's what we need.

41
00:01:41.030 --> 00:01:43.080
Every page that you access today is customized

42
00:01:43.080 --> 00:01:45.090
according to the kind of user you are.

43
00:01:45.090 --> 00:01:48.000
So you need to generate dynamic content.

44
00:01:48.000 --> 00:01:51.040
However, C-G-I is going to be a costly process.

45
00:01:51.040 --> 00:01:54.010
It's not feasible because every request that you make,

46
00:01:54.010 --> 00:01:58.010
C-G-I creates a new process for every new request.

47
00:01:58.010 --> 00:01:59.080
Imagine yourselves on a website,

48
00:01:59.080 --> 00:02:02.080
you click a button, or you enter something into a text box,

49
00:02:02.080 --> 00:02:05.010
or you check a radio button, or you click a hyperlink,

50
00:02:05.010 --> 00:02:08.010
every action that you're doing is a request.

51
00:02:08.010 --> 00:02:10.010
If you are going to create a new precess

52
00:02:10.010 --> 00:02:11.050
for every new request,

53
00:02:11.050 --> 00:02:13.030
it means you're setting up a new environment,

54
00:02:13.030 --> 00:02:15.050
a new context and there are a lot of resources

55
00:02:15.050 --> 00:02:17.000
from the machine allocated.

56
00:02:17.000 --> 00:02:18.090
So this is terrible going to pull down

57
00:02:18.090 --> 00:02:21.020
the performance of your application.

58
00:02:21.020 --> 00:02:24.090
Moreover, C-G-I is a traditionally older way of coding.

59
00:02:24.090 --> 00:02:27.050
If you look at the other platforms,

60
00:02:27.050 --> 00:02:29.010
which offer you server-side options,

61
00:02:29.010 --> 00:02:30.040
you have the dot NET platform,

62
00:02:30.040 --> 00:02:32.030
which has got A-S-P.NET A-P-I.

63
00:02:32.030 --> 00:02:34.070
Then you have Node J-S, which is the latest

64
00:02:34.070 --> 00:02:37.000
server-side programming using Java script.

65
00:02:37.000 --> 00:02:38.040
You have P-H-P et cetera.

66
00:02:38.040 --> 00:02:42.040
However, we are into the enterprise world of Java,

67
00:02:42.040 --> 00:02:44.070
and we need an A-P-I so that we can code

68
00:02:44.070 --> 00:02:46.060
server-side programming features.

69
00:02:46.060 --> 00:02:50.070
And that is exactly where servlets pitch in.

70
00:02:50.070 --> 00:02:54.010
So let us take a look at the features of servlets.

71
00:02:54.010 --> 00:02:57.080
Servlets offer you a robust server-side programming option

72
00:02:57.080 --> 00:03:00.000
to generate dynamic web content.

73
00:03:00.000 --> 00:03:02.030
And they're going to be way more efficient

74
00:03:02.030 --> 00:03:05.030
as opposed to C-G-I scripts because servlets

75
00:03:05.030 --> 00:03:08.030
create a new thread for every new request.

76
00:03:08.030 --> 00:03:11.050
We know the multi-threading capability of Java platform,

77
00:03:11.050 --> 00:03:14.010
where you have multiple threads spawned

78
00:03:14.010 --> 00:03:17.020
and each thread will be allocated a task to perform.

79
00:03:17.020 --> 00:03:19.080
These threads can run in parallel and hence can

80
00:03:19.080 --> 00:03:23.020
improve the performance of your application considerably.

81
00:03:23.020 --> 00:03:25.090
This is what servlets employ when they work.

82
00:03:25.090 --> 00:03:28.080
Now, since they're servlets and released

83
00:03:28.080 --> 00:03:30.090
as a part of the Java community,

84
00:03:30.090 --> 00:03:33.030
they can work with all the J-V-M features.

85
00:03:33.030 --> 00:03:36.010
Platform independence where you can file a program only once

86
00:03:36.010 --> 00:03:38.050
then run it on any other O-S.

87
00:03:38.050 --> 00:03:39.090
Or you have object orientation,

88
00:03:39.090 --> 00:03:42.010
which will help you to simulate the real world entities

89
00:03:42.010 --> 00:03:43.060
into the programming model.

90
00:03:43.060 --> 00:03:45.000
We talked about multi-threading,

91
00:03:45.000 --> 00:03:47.060
and the garbage collection, which runs at a scheduled time

92
00:03:47.060 --> 00:03:49.070
in order to free up memory space

93
00:03:49.070 --> 00:03:51.090
and make sure application run faster.

94
00:03:51.090 --> 00:03:54.020
Now, if you look at the servlet specification,

95
00:03:54.020 --> 00:03:57.050
the J-S-R, which is the Java Specification Request,

96
00:03:57.050 --> 00:04:00.000
the number 315 was released by Java community

97
00:04:00.000 --> 00:04:02.050
for version 3.0 as a part of

98
00:04:02.050 --> 00:04:04.080
Java Enterprise Edition number six,

99
00:04:04.080 --> 00:04:07.060
which works with J-D-K 1.6

100
00:04:07.060 --> 00:04:11.040
and then there is J-S-R 340, which is for version 3.1,

101
00:04:11.040 --> 00:04:13.090
which was released as a part of Java E-E seven.

102
00:04:13.090 --> 00:04:17.040
Please understand one more point that servlets can work

103
00:04:17.040 --> 00:04:20.060
with the entire Java Standard-Edition A-P-Is.

104
00:04:20.060 --> 00:04:23.010
Be it object orientation, exception handling,

105
00:04:23.010 --> 00:04:25.090
collections, Generix, multi-threading,

106
00:04:25.090 --> 00:04:28.050
inner classes and even J-D-B-C.

107
00:04:28.050 --> 00:04:30.060
The servlets are going to work in conjunction

108
00:04:30.060 --> 00:04:32.040
with your code Java A-P-Is

109
00:04:32.040 --> 00:04:35.000
to help you build a wonderful web application.

