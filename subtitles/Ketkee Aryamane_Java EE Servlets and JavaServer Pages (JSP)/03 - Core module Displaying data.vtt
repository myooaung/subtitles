WEBVTT
1
00:00:00.050 --> 00:00:01.060
- [Interviewer] Okay, so let's pick up

2
00:00:01.060 --> 00:00:03.090
from where we left off.

3
00:00:03.090 --> 00:00:06.030
We had done the job inside the servlet and the DAO.

4
00:00:06.030 --> 00:00:09.040
Now, this is the home.jsp file

5
00:00:09.040 --> 00:00:13.070
on which we are going to display the order data.

6
00:00:13.070 --> 00:00:15.000
But, in order to do that,

7
00:00:15.000 --> 00:00:17.020
there are quite a few steps we have to do before.

8
00:00:17.020 --> 00:00:21.070
One is we have to add the JSTL JAR to the build path.

9
00:00:21.070 --> 00:00:25.030
Now, as I said, the java server pages tag library jar

10
00:00:25.030 --> 00:00:26.020
is a separate jar.

11
00:00:26.020 --> 00:00:30.080
It's not a part, directly, of the servlets or JSP API.

12
00:00:30.080 --> 00:00:32.070
So, we have to do download this externally

13
00:00:32.070 --> 00:00:35.050
and then put it in the build path of the project.

14
00:00:35.050 --> 00:00:37.010
So, I have downloaded it already,

15
00:00:37.010 --> 00:00:38.010
which is on my desktop.

16
00:00:38.010 --> 00:00:41.010
So, I'm just going to take that, copy it,

17
00:00:41.010 --> 00:00:43.080
go to my projects lib folder.

18
00:00:43.080 --> 00:00:45.040
Let's go there.

19
00:00:45.040 --> 00:00:49.010
And, paste it there.

20
00:00:49.010 --> 00:00:53.050
Once done, I will also require to go to properties,

21
00:00:53.050 --> 00:00:57.090
go to the libraries tab of Build Path,

22
00:00:57.090 --> 00:01:01.000
and add that jar in the Build Path.

23
00:01:01.000 --> 00:01:03.080
So, I'm going to refer that from the lib folder.

24
00:01:03.080 --> 00:01:06.010
Let's just select it, say OK,

25
00:01:06.010 --> 00:01:09.030
and then, we apply the change and say OK again.

26
00:01:09.030 --> 00:01:12.000
So, now the build path is absolutely set

27
00:01:12.000 --> 00:01:15.050
with our JSTL tag library.

28
00:01:15.050 --> 00:01:19.010
The next step will be to add the JSTL modules on JSP.

29
00:01:19.010 --> 00:01:21.080
So, you cannot just start using the JSTL tags

30
00:01:21.080 --> 00:01:23.010
just like that on your JSP.

31
00:01:23.010 --> 00:01:26.060
What you have to do is, you have to refer those modules

32
00:01:26.060 --> 00:01:28.090
individually on your JSP page.

33
00:01:28.090 --> 00:01:32.060
And, that is exactly where your tag lib directive

34
00:01:32.060 --> 00:01:33.090
comes in the picture.

35
00:01:33.090 --> 00:01:34.090
So, there were three directives

36
00:01:34.090 --> 00:01:37.040
that we had discussed about in the previous videos.

37
00:01:37.040 --> 00:01:39.040
There was an include directive.

38
00:01:39.040 --> 00:01:40.090
There was a page directive.

39
00:01:40.090 --> 00:01:43.000
And, the third on is a tag lib directive.

40
00:01:43.000 --> 00:01:45.060
So, tag lib, as the name suggests, tag libraries.

41
00:01:45.060 --> 00:01:48.030
So, it's going to refer a tag library on your JSP page

42
00:01:48.030 --> 00:01:51.000
and we know that there are four modules specifically

43
00:01:51.000 --> 00:01:55.020
for JSTL, the core, the xml, the fmt, and sql.

44
00:01:55.020 --> 00:01:56.060
So, each of these modules will have

45
00:01:56.060 --> 00:01:59.030
to be included on the JSP individually.

46
00:01:59.030 --> 00:02:01.090
The syntax of all of that has been given on the slide

47
00:02:01.090 --> 00:02:04.030
so, let's pick up the core module first.

48
00:02:04.030 --> 00:02:05.090
This one.

49
00:02:05.090 --> 00:02:09.060
Let's take this, copy this, and go to our Eclipse.

50
00:02:09.060 --> 00:02:12.020
And, usually, the inclusion

51
00:02:12.020 --> 00:02:14.000
of the tag library's right at the top.

52
00:02:14.000 --> 00:02:16.010
So, just after the DOCTYPE html,

53
00:02:16.010 --> 00:02:19.030
you can just paste out that line.

54
00:02:19.030 --> 00:02:20.050
So, what does this mean?

55
00:02:20.050 --> 00:02:23.010
This, of course, indicates that it is a taglib directive.

56
00:02:23.010 --> 00:02:24.090
This is the uri's, the location

57
00:02:24.090 --> 00:02:28.040
where the core module of JSTL resides.

58
00:02:28.040 --> 00:02:30.010
And, as we discussed earlier,

59
00:02:30.010 --> 00:02:32.050
the prefix is going to be decided as c.

60
00:02:32.050 --> 00:02:35.010
So, whenever you want to use a tag of the core module,

61
00:02:35.010 --> 00:02:37.000
you'll have to begin with a prefix, c,

62
00:02:37.000 --> 00:02:39.010
followed by the name of the tag.

63
00:02:39.010 --> 00:02:40.060
Alright, so now, let's go down

64
00:02:40.060 --> 00:02:42.050
and this is a section where we are

65
00:02:42.050 --> 00:02:45.000
displaying the orders, line number 41.

66
00:02:45.000 --> 00:02:47.050
This is the container in which there's a table

67
00:02:47.050 --> 00:02:50.090
and it is going to display the orders in a tabular format.

68
00:02:50.090 --> 00:02:52.030
Okay, now, what do we do?

69
00:02:52.030 --> 00:02:56.040
Before this container, we need to put a condition.

70
00:02:56.040 --> 00:02:58.020
The condition is, we are going to display

71
00:02:58.020 --> 00:03:00.090
this division element if, and only if,

72
00:03:00.090 --> 00:03:04.060
there are orders that we find in the request scope.

73
00:03:04.060 --> 00:03:07.070
So, if you remember, let's go to OrderHistroy servlet.

74
00:03:07.070 --> 00:03:10.070
This is that line, number 29,

75
00:03:10.070 --> 00:03:12.030
on which we set the orders in the request scope.

76
00:03:12.030 --> 00:03:14.070
Only if we get these orders

77
00:03:14.070 --> 00:03:17.050
then, we are going to display them on the JSP.

78
00:03:17.050 --> 00:03:19.070
So now, what I'm going to do is I'm going

79
00:03:19.070 --> 00:03:22.050
to start using each JSTL tag on the JSP.

80
00:03:22.050 --> 00:03:26.060
The first one among them will be the c if tag.

81
00:03:26.060 --> 00:03:29.040
So, I'm basically putting the conditional statement.

82
00:03:29.040 --> 00:03:31.040
See, had you worked with scripted and expression,

83
00:03:31.040 --> 00:03:34.000
you would have to write it with the scriptlet code,

84
00:03:34.000 --> 00:03:36.070
the if condition, but now, I'm using a tag for it.

85
00:03:36.070 --> 00:03:38.040
So, let's see how this looks like.

86
00:03:38.040 --> 00:03:41.080
On line number 42, I'm putting a c if tag

87
00:03:41.080 --> 00:03:43.090
which is coming from the core module of JSTL.

88
00:03:43.090 --> 00:03:48.020
So, I'm going to say angle bracket, c:if.

89
00:03:48.020 --> 00:03:50.070
That's how the tag looks like.

90
00:03:50.070 --> 00:03:54.030
So, I'm going to say that if I get orders

91
00:03:54.030 --> 00:03:55.060
from the request scope.

92
00:03:55.060 --> 00:03:58.000
Now, understand this bit,

93
00:03:58.000 --> 00:04:00.060
JSTL internally uses expression language.

94
00:04:00.060 --> 00:04:02.090
We already know that expression language can work

95
00:04:02.090 --> 00:04:05.000
with a lot of operators;

96
00:04:05.000 --> 00:04:08.030
arithmetic, relational, logical, et cetera.

97
00:04:08.030 --> 00:04:09.080
So, now we are going to combine

98
00:04:09.080 --> 00:04:13.060
that power of expression language inside the JSTL

99
00:04:13.060 --> 00:04:15.040
and we are going to write out expressions.

100
00:04:15.040 --> 00:04:18.080
So now, under test attribute, I basically have

101
00:04:18.080 --> 00:04:22.000
to specify the if condition.

102
00:04:22.000 --> 00:04:23.040
So, what is that if condition?

103
00:04:23.040 --> 00:04:24.030
It's going to look like this.

104
00:04:24.030 --> 00:04:26.070
I'm going to use an expression language for this.

105
00:04:26.070 --> 00:04:32.030
I'm going to say dollar and a pair of curly braces

106
00:04:32.030 --> 00:04:34.010
and I'm going to write a condition in this.

107
00:04:34.010 --> 00:04:37.080
The condition is requestScope

108
00:04:37.080 --> 00:04:40.010
.orders.

109
00:04:40.010 --> 00:04:41.010
Now, what is this orders?

110
00:04:41.010 --> 00:04:43.010
This is the key of that object

111
00:04:43.010 --> 00:04:46.050
that we have set on line number 29.

112
00:04:46.050 --> 00:04:50.060
Alright, so we are going to say requestScope.orders

113
00:04:50.060 --> 00:04:53.030
and we are going to put a check here

114
00:04:53.030 --> 00:04:56.060
which is not equal to null.

115
00:04:56.060 --> 00:04:58.050
So, we are going to say that

116
00:04:58.050 --> 00:05:00.090
if only you get a valid ArrayList object

117
00:05:00.090 --> 00:05:03.030
out of the request scope then, we are going

118
00:05:03.030 --> 00:05:05.000
to display this entire container.

119
00:05:05.000 --> 00:05:08.030
So, I'm going to take the end of that c if tag

120
00:05:08.030 --> 00:05:12.020
and paste it right after that div.

121
00:05:12.020 --> 00:05:13.060
There you go.

122
00:05:13.060 --> 00:05:15.040
So, there's a condition that we have put

123
00:05:15.040 --> 00:05:17.040
and you see how simple it is

124
00:05:17.040 --> 00:05:20.000
to code an if condition by using a tag.

125
00:05:20.000 --> 00:05:21.090
Had you been in scriptlet, you would have

126
00:05:21.090 --> 00:05:24.050
to write out that code and you would have

127
00:05:24.050 --> 00:05:26.050
to open a scriptlet element and then close it

128
00:05:26.050 --> 00:05:27.060
and all of that messy business.

129
00:05:27.060 --> 00:05:29.050
But, this is way cleaner code

130
00:05:29.050 --> 00:05:32.050
and more maintainable for sure.

131
00:05:32.050 --> 00:05:35.000
Right, so now that we have put that condition,

132
00:05:35.000 --> 00:05:37.070
let's go ahead, this is the div,

133
00:05:37.070 --> 00:05:39.090
that's the table, and those are the headers.

134
00:05:39.090 --> 00:05:42.030
The first row is, of course, the header information.

135
00:05:42.030 --> 00:05:44.080
So, that's okay, but the purpose of our data

136
00:05:44.080 --> 00:05:47.010
is going to sit in this row.

137
00:05:47.010 --> 00:05:48.000
Right.

138
00:05:48.000 --> 00:05:50.040
So, let's go ahead and start off one by one.

139
00:05:50.040 --> 00:05:51.090
So, now what I'm going to do is

140
00:05:51.090 --> 00:05:55.000
I have the orders ArrayList object with me.

141
00:05:55.000 --> 00:05:57.090
And, that ArrayList object I'm going to iterate

142
00:05:57.090 --> 00:05:59.060
over this JSP page.

143
00:05:59.060 --> 00:06:03.010
And, all of this I'm going to do using the JSTL tag.

144
00:06:03.010 --> 00:06:04.070
So, let's see how to do it.

145
00:06:04.070 --> 00:06:07.040
On line number 54, I have c

146
00:06:07.040 --> 00:06:12.050
and I have a tag for iteration which is code forEach.

147
00:06:12.050 --> 00:06:14.050
Now, what all does this tag demand?

148
00:06:14.050 --> 00:06:16.010
It's just a tag, right?

149
00:06:16.010 --> 00:06:17.080
So, all the information you need will be

150
00:06:17.080 --> 00:06:20.020
in the form of attributes.

151
00:06:20.020 --> 00:06:23.010
So, the first attribute that we have to specify is items

152
00:06:23.010 --> 00:06:24.060
and what are those items?

153
00:06:24.060 --> 00:06:27.000
That orders ArrayList object.

154
00:06:27.000 --> 00:06:30.070
So, what I want to do is I want to take that orders from here

155
00:06:30.070 --> 00:06:32.070
or maybe we could just write it out here.

156
00:06:32.070 --> 00:06:37.000
Let's say dollar sign, a curly pair of braces,

157
00:06:37.000 --> 00:06:41.000
and then, you say requestScope

158
00:06:41.000 --> 00:06:43.050
.orders.

159
00:06:43.050 --> 00:06:44.060
There you go.

160
00:06:44.060 --> 00:06:46.070
So, the orders data has been embedded

161
00:06:46.070 --> 00:06:49.080
to the items attribute of c forEach.

162
00:06:49.080 --> 00:06:50.060
Okay.

163
00:06:50.060 --> 00:06:53.070
Now, we also want a temporary pointer

164
00:06:53.070 --> 00:06:58.030
which points to every order object of this ArrayList.

165
00:06:58.030 --> 00:07:00.050
If you recall the discussion,

166
00:07:00.050 --> 00:07:02.050
this orders is an ArrayList

167
00:07:02.050 --> 00:07:05.010
and each element is an order object.

168
00:07:05.010 --> 00:07:06.090
Now, if you want to print the order data

169
00:07:06.090 --> 00:07:09.000
or, let's say, the product name, et cetera,

170
00:07:09.000 --> 00:07:10.070
we would need a temporary variable

171
00:07:10.070 --> 00:07:14.040
which will be assigned for every iteration of this loop

172
00:07:14.040 --> 00:07:16.040
and that variable is going to point

173
00:07:16.040 --> 00:07:19.030
to every order object in that ArrayList.

174
00:07:19.030 --> 00:07:21.050
So, for that, I can define one more attribute

175
00:07:21.050 --> 00:07:23.000
which is called var.

176
00:07:23.000 --> 00:07:27.090
And, I can say var is going to be order, let's say.

177
00:07:27.090 --> 00:07:29.050
This is a name of your choice, of course.

178
00:07:29.050 --> 00:07:31.090
And then, we have one more attribute

179
00:07:31.090 --> 00:07:33.070
which is called varStatus

180
00:07:33.070 --> 00:07:36.050
which is basically a loop tag status object

181
00:07:36.050 --> 00:07:39.010
which is going to give you the current status

182
00:07:39.010 --> 00:07:40.020
of the iteration.

183
00:07:40.020 --> 00:07:41.050
Okay so, I'm going to take that

184
00:07:41.050 --> 00:07:45.010
and I'm just going to set it to, let's say, loop.

185
00:07:45.010 --> 00:07:46.050
Let's set it to loop.

186
00:07:46.050 --> 00:07:49.000
Now, this forEach is not going to end here

187
00:07:49.000 --> 00:07:50.060
because for every order object that is coming

188
00:07:50.060 --> 00:07:53.080
out of this ArrayList, we need to generate this entire row.

189
00:07:53.080 --> 00:07:56.080
So, this c forEach end tag will come

190
00:07:56.080 --> 00:08:02.050
after that tr on line number 61.

191
00:08:02.050 --> 00:08:03.030
Right.

192
00:08:03.030 --> 00:08:05.060
So now, let's go ahead and fill up

193
00:08:05.060 --> 00:08:07.060
all the data in each of the columns.

194
00:08:07.060 --> 00:08:11.000
The first one is going to be the order number.

195
00:08:11.000 --> 00:08:12.010
So, you look at the header.

196
00:08:12.010 --> 00:08:13.070
The first header is order number

197
00:08:13.070 --> 00:08:15.050
and the order number can be gotten

198
00:08:15.050 --> 00:08:18.020
through this loop tag status object.

199
00:08:18.020 --> 00:08:20.070
So, what I can do is I can use analytics expression

200
00:08:20.070 --> 00:08:24.050
and say loop

201
00:08:24.050 --> 00:08:25.030
.count.

202
00:08:25.030 --> 00:08:27.090
So, if I access the count property on

203
00:08:27.090 --> 00:08:29.070
that loop tag status object,

204
00:08:29.070 --> 00:08:31.020
I will get the counter

205
00:08:31.020 --> 00:08:32.060
starting from one.

206
00:08:32.060 --> 00:08:34.000
Okay and that's exactly what I want to do.

207
00:08:34.000 --> 00:08:36.030
I want to start the order numbers displayed

208
00:08:36.030 --> 00:08:39.040
from one, two, three, and so on and so forth.

209
00:08:39.040 --> 00:08:40.050
Alright, so that's there

210
00:08:40.050 --> 00:08:43.070
and the next one is, of course, the product name

211
00:08:43.070 --> 00:08:44.050
that I want to display.

212
00:08:44.050 --> 00:08:47.060
So, I'm going to say order,

213
00:08:47.060 --> 00:08:49.010
which is this.

214
00:08:49.010 --> 00:08:51.040
Every order object is going to

215
00:08:51.040 --> 00:08:52.030
temporarily sit in this variable.

216
00:08:52.030 --> 00:08:53.010
So, I'm going to say order.

217
00:08:53.010 --> 00:08:56.050
and now, I'm going to feed the instance variable

218
00:08:56.050 --> 00:08:58.070
of that product name.

219
00:08:58.070 --> 00:09:00.080
So now, in order to just recall

220
00:09:00.080 --> 00:09:02.050
in case you do not remember,

221
00:09:02.050 --> 00:09:05.070
this is that order bean and these are the properties.

222
00:09:05.070 --> 00:09:08.000
So, you basically have to pick up the property names

223
00:09:08.000 --> 00:09:10.020
from these, which are the instance variables,

224
00:09:10.020 --> 00:09:12.070
and then access them on your JSP page

225
00:09:12.070 --> 00:09:14.010
and that's what I did here.

226
00:09:14.010 --> 00:09:16.050
Alright, let's see the next.

227
00:09:16.050 --> 00:09:18.080
We have

228
00:09:18.080 --> 00:09:19.080
dollar sign

229
00:09:19.080 --> 00:09:22.080
and now, here we are going to say

230
00:09:22.080 --> 00:09:26.030
order.

231
00:09:26.030 --> 00:09:29.080
orderDate.

232
00:09:29.080 --> 00:09:30.090
Okay.

233
00:09:30.090 --> 00:09:33.030
And under the src attribute, the image

234
00:09:33.030 --> 00:09:36.030
of the particular product in that order

235
00:09:36.030 --> 00:09:37.050
is going to be displayed.

236
00:09:37.050 --> 00:09:40.030
So, I'm going to say,

237
00:09:40.030 --> 00:09:42.060
dollar sign, a curly pair of braces,

238
00:09:42.060 --> 00:09:44.080
and I'm going to take the order object

239
00:09:44.080 --> 00:09:47.020
and access the image path which is given

240
00:09:47.020 --> 00:09:50.040
by this property product

241
00:09:50.040 --> 00:09:51.060
img

242
00:09:51.060 --> 00:09:53.000
Path.

243
00:09:53.000 --> 00:09:55.000
There you go.

244
00:09:55.000 --> 00:09:56.040
So, this is what we have done.

245
00:09:56.040 --> 00:09:58.080
We have put an if condition.

246
00:09:58.080 --> 00:09:59.070
So, this is going to be a conditional display.

247
00:09:59.070 --> 00:10:01.070
This entire division element is only going

248
00:10:01.070 --> 00:10:06.040
to be visible if we indeed get orders in the request scope.

249
00:10:06.040 --> 00:10:07.040
Right.

250
00:10:07.040 --> 00:10:08.060
So, that's the usage of c if

251
00:10:08.060 --> 00:10:10.040
and then, of course, we say the huge one,

252
00:10:10.040 --> 00:10:13.040
c forEach where you have a couple of attributes

253
00:10:13.040 --> 00:10:15.020
to find items var.

254
00:10:15.020 --> 00:10:17.080
As for varStatus, that is just to get the counter.

255
00:10:17.080 --> 00:10:18.060
Okay.

256
00:10:18.060 --> 00:10:22.030
So now, let's go ahead and run this application

257
00:10:22.030 --> 00:10:25.000
and see the changes.

258
00:10:25.000 --> 00:10:26.040
Let us login now

259
00:10:26.040 --> 00:10:29.060
and enter the credentials.

260
00:10:29.060 --> 00:10:31.040
We have been using the admin user

261
00:10:31.040 --> 00:10:33.070
for all our demos, but feel free to register

262
00:10:33.070 --> 00:10:36.070
as many users as you want on this website

263
00:10:36.070 --> 00:10:38.040
and then, you can keep using different users.

264
00:10:38.040 --> 00:10:41.080
So, I'm going to login and click on order history.

265
00:10:41.080 --> 00:10:42.090
There you go.

266
00:10:42.090 --> 00:10:44.080
You get all your orders displayed

267
00:10:44.080 --> 00:10:46.000
in the form of the table

268
00:10:46.000 --> 00:10:49.000
and all of it using JSTL tags.

269
00:10:49.000 --> 00:10:49.080
Right.

270
00:10:49.080 --> 00:10:52.020
And, don't worry if you are not too happy

271
00:10:52.020 --> 00:10:55.040
with the order the tag has been displayed right there.

272
00:10:55.040 --> 00:10:56.060
It's looking ugly right now.

273
00:10:56.060 --> 00:10:59.030
But, we are going to definitely repair that

274
00:10:59.030 --> 00:11:01.030
with the formatting module of JSTL.

275
00:11:01.030 --> 00:11:04.000
Right, so we'll go over that in the next video.

