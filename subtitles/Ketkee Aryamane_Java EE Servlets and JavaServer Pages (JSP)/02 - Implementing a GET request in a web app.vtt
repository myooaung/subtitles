WEBVTT
1
00:00:00.050 --> 00:00:03.090
- [Instructor] Now let us dive into what is a GET request.

2
00:00:03.090 --> 00:00:05.060
A GET request as we said is a question

3
00:00:05.060 --> 00:00:07.040
from the client to the server to get

4
00:00:07.040 --> 00:00:09.090
or retrieve information for the user.

5
00:00:09.090 --> 00:00:12.050
And that information could either be a text file

6
00:00:12.050 --> 00:00:14.080
or it could be a PDF or a Word document

7
00:00:14.080 --> 00:00:17.050
or it could be an audio or a video

8
00:00:17.050 --> 00:00:22.000
or even for that matter an entire HTML content.

9
00:00:22.000 --> 00:00:23.030
Now, when you make a GET request,

10
00:00:23.030 --> 00:00:25.020
you can send data along with it

11
00:00:25.020 --> 00:00:27.040
and the data that is sent out is always in the form

12
00:00:27.040 --> 00:00:31.040
of a query string which is exposed or visible in the URL,

13
00:00:31.040 --> 00:00:33.070
which is why GET request is considered to be

14
00:00:33.070 --> 00:00:36.030
an insecure request.

15
00:00:36.030 --> 00:00:38.030
Moreover, the data that is sent along

16
00:00:38.030 --> 00:00:40.070
in a GET request is of limited size.

17
00:00:40.070 --> 00:00:43.060
The max is eight KB, of course, with a few caveats

18
00:00:43.060 --> 00:00:45.070
because that would depend upon the browser

19
00:00:45.070 --> 00:00:48.020
and the server configuration.

20
00:00:48.020 --> 00:00:51.040
GET request is an idempotent request.

21
00:00:51.040 --> 00:00:53.050
What it essentially means that whenever you access

22
00:00:53.050 --> 00:00:57.060
the URL pattern of Servlet and make a GET request

23
00:00:57.060 --> 00:01:00.060
you are basically going to get information.

24
00:01:00.060 --> 00:01:03.090
So it is not going to change anything on the server side.

25
00:01:03.090 --> 00:01:07.000
If you take the same URL and hit a fortnight later,

26
00:01:07.000 --> 00:01:08.030
or maybe a month down the line

27
00:01:08.030 --> 00:01:11.040
you're still going to get the refresh content for that URL.

28
00:01:11.040 --> 00:01:13.070
So nothing is changing on the server side

29
00:01:13.070 --> 00:01:17.060
even if you hit the same request again and again.

30
00:01:17.060 --> 00:01:20.090
These kind of requests are called idempotent requests

31
00:01:20.090 --> 00:01:23.080
and GET is one of them.

32
00:01:23.080 --> 00:01:25.000
Now let us understand how do you

33
00:01:25.000 --> 00:01:28.010
implement a GET request inside your application.

34
00:01:28.010 --> 00:01:32.010
I have created package under my source folder com.test

35
00:01:32.010 --> 00:01:34.030
under which I have created another folder

36
00:01:34.030 --> 00:01:37.010
specifically reserved for my Servlet classes.

37
00:01:37.010 --> 00:01:41.050
Now under that I'm going to make a class

38
00:01:41.050 --> 00:01:46.030
and let's label it as GETServlet itself.

39
00:01:46.030 --> 00:01:48.070
Now this class needs to be equipped

40
00:01:48.070 --> 00:01:51.050
with all the facilities of being a Servlet.

41
00:01:51.050 --> 00:01:55.020
For that, I'm going to extend

42
00:01:55.020 --> 00:01:58.090
the HTTP Servlet class into it.

43
00:01:58.090 --> 00:02:00.060
The question is, why are we extending

44
00:02:00.060 --> 00:02:02.020
the HTTP Servlet class?

45
00:02:02.020 --> 00:02:04.040
So let's take a look at that.

46
00:02:04.040 --> 00:02:07.010
Let's take a look at HTTP Servlet API Hierarchy.

47
00:02:07.010 --> 00:02:10.000
It all starts off with a Servlet interface.

48
00:02:10.000 --> 00:02:13.040
Down there you have an abstract class with Generic Servlet.

49
00:02:13.040 --> 00:02:16.090
Now Servlet has got all the methods declared

50
00:02:16.090 --> 00:02:18.090
for implementing a web application.

51
00:02:18.090 --> 00:02:22.020
Generic Servlet, however, is that kind of an abstract

52
00:02:22.020 --> 00:02:24.030
class which will help you design a protocol

53
00:02:24.030 --> 00:02:25.050
independent application.

54
00:02:25.050 --> 00:02:26.090
It could be any protocol

55
00:02:26.090 --> 00:02:29.040
that you want to implement for an app.

56
00:02:29.040 --> 00:02:32.050
HTTP Servlet on the other hand, has been designed

57
00:02:32.050 --> 00:02:36.000
specifically to implement HTTP based applications.

58
00:02:36.000 --> 00:02:38.050
So this is how the overall hierarchy looks like.

59
00:02:38.050 --> 00:02:40.080
The focal point of discussion in this course

60
00:02:40.080 --> 00:02:43.080
is building a web application using HTTP protocol,

61
00:02:43.080 --> 00:02:47.060
which is why we are going with HTTP Servlet class.

62
00:02:47.060 --> 00:02:49.060
Additionally, there are a couple of other APIs

63
00:02:49.060 --> 00:02:53.020
that we need to check, Servlet Request and Servlet Response.

64
00:02:53.020 --> 00:02:55.030
We know that the entire communication

65
00:02:55.030 --> 00:02:57.070
between the client and the server is an exchange

66
00:02:57.070 --> 00:03:00.010
of requests and responses.

67
00:03:00.010 --> 00:03:02.080
To represent those, there are objects designated

68
00:03:02.080 --> 00:03:04.050
under the Servlet API hierarchy,

69
00:03:04.050 --> 00:03:07.000
Servlet request and Servlet response.

70
00:03:07.000 --> 00:03:08.090
But again, theses are those protocol

71
00:03:08.090 --> 00:03:12.050
independent entities and then down there

72
00:03:12.050 --> 00:03:16.030
we have HTTP Servlet request and HTTP Servlet response,

73
00:03:16.030 --> 00:03:17.080
which are going to be specifically

74
00:03:17.080 --> 00:03:20.060
for our HTTP based applications.

75
00:03:20.060 --> 00:03:23.000
All these enitities, the Servlet, generic Servlet

76
00:03:23.000 --> 00:03:25.080
HTTP Servlet, come from the Java extra Servlet

77
00:03:25.080 --> 00:03:30.070
package or the Java extra Servlet.HTTP package.

78
00:03:30.070 --> 00:03:33.050
So now let's go back to our Eclipse

79
00:03:33.050 --> 00:03:37.050
and we are implementing the HTTP Servlet Class

80
00:03:37.050 --> 00:03:39.020
out here as apparent.

81
00:03:39.020 --> 00:03:42.010
Now, every request that is made from the client

82
00:03:42.010 --> 00:03:44.070
to the server, is always going to have a

83
00:03:44.070 --> 00:03:48.000
corresponding method inside HTTP Servlet.

84
00:03:48.000 --> 00:03:50.010
For example, right now we are looking at the GET request.

85
00:03:50.010 --> 00:03:52.040
So the method for it is doget.

86
00:03:52.040 --> 00:03:54.080
You just have to generate that and it'll come out

87
00:03:54.080 --> 00:03:57.080
on its own in any IDE.

88
00:03:57.080 --> 00:04:00.040
Doget looks like this, it has got the HTTP request

89
00:04:00.040 --> 00:04:02.050
and the responses parameters.

90
00:04:02.050 --> 00:04:04.010
Obviously because it is going to do the processing

91
00:04:04.010 --> 00:04:05.080
for the request and response.

92
00:04:05.080 --> 00:04:08.070
And then it could possibly throw you a Servlet exception

93
00:04:08.070 --> 00:04:10.060
in case there are any errors encountered

94
00:04:10.060 --> 00:04:12.030
with respect to Servlet.

95
00:04:12.030 --> 00:04:14.020
And whenever you write a response

96
00:04:14.020 --> 00:04:16.080
from this Servlet back to the client,

97
00:04:16.080 --> 00:04:19.010
then it's an IO operation.

98
00:04:19.010 --> 00:04:20.050
So if anything goes wrong there,

99
00:04:20.050 --> 00:04:24.050
then it could possibly throw you an IO exception.

100
00:04:24.050 --> 00:04:26.050
Let us get rid of all the parent calls.

101
00:04:26.050 --> 00:04:28.070
We do not want that, we want our own implementation

102
00:04:28.070 --> 00:04:29.090
in this doget.

103
00:04:29.090 --> 00:04:30.090
So what we're going to do is,

104
00:04:30.090 --> 00:04:34.050
we're going to construct a small HTML response.

105
00:04:34.050 --> 00:04:37.020
Like this, in the form of a string.

106
00:04:37.020 --> 00:04:39.020
So let me code some HTML elements here.

107
00:04:39.020 --> 00:04:44.020
I'm going to say, HTML parent start and end tag.

108
00:04:44.020 --> 00:04:46.010
And let's write a simple header

109
00:04:46.010 --> 00:04:48.050
which will say that it gives a message to the user.

110
00:04:48.050 --> 00:04:52.070
So, welcome to Servlets.

111
00:04:52.070 --> 00:04:56.040
And I'm going to end that h3 element.

112
00:04:56.040 --> 00:04:58.020
So my HTML response is ready with me.

113
00:04:58.020 --> 00:04:59.070
What I now want to do is,

114
00:04:59.070 --> 00:05:02.060
take this HTML response back to the client.

115
00:05:02.060 --> 00:05:03.090
So I want to write it there.

116
00:05:03.090 --> 00:05:06.000
For that, I need a pin.

117
00:05:06.000 --> 00:05:09.020
Now that pin will be retrieved from this response object.

118
00:05:09.020 --> 00:05:11.040
So on the response object I have an API

119
00:05:11.040 --> 00:05:13.010
which is called getWriter.

120
00:05:13.010 --> 00:05:19.000
This is going to return me a print writer reference.

121
00:05:19.000 --> 00:05:22.070
Print Writer is an API under the Java IO package

122
00:05:22.070 --> 00:05:24.010
which will help you to exclusively

123
00:05:24.010 --> 00:05:26.010
write response on a webpage.

124
00:05:26.010 --> 00:05:26.090
So I'm going to do that.

125
00:05:26.090 --> 00:05:31.030
And then, I can just invoke the write API on it,

126
00:05:31.030 --> 00:05:34.030
and stuff that HTML response in it as an argument.

127
00:05:34.030 --> 00:05:35.080
And I am done.

128
00:05:35.080 --> 00:05:37.060
So now whenever this servlet executes,

129
00:05:37.060 --> 00:05:39.090
this HTML response in the form a string

130
00:05:39.090 --> 00:05:42.070
is going to be written back onto the webpage.

131
00:05:42.070 --> 00:05:44.070
On the web client, which is a browser,

132
00:05:44.070 --> 00:05:47.010
it's going to be interpreted as HTML code

133
00:05:47.010 --> 00:05:50.000
and I'll get this header displayed.

134
00:05:50.000 --> 00:05:51.060
The next step that we have to do is,

135
00:05:51.060 --> 00:05:53.050
we have to configure this servlet.

136
00:05:53.050 --> 00:05:56.020
So let's go to the web XML, and configure the servlet.

137
00:05:56.020 --> 00:05:58.070
For this you require a couple of tags.

138
00:05:58.070 --> 00:06:02.030
The first one is the servlet tag.

139
00:06:02.030 --> 00:06:05.020
Under which you have another tag called servlet-name.

140
00:06:05.020 --> 00:06:08.000
Servlet-name is basically a logical name

141
00:06:08.000 --> 00:06:10.050
that you wish to give, which is of your choice.

142
00:06:10.050 --> 00:06:14.030
So let's say I'm going to call it GetServlet.

143
00:06:14.030 --> 00:06:18.010
After that, the other tag to define is servlet-class.

144
00:06:18.010 --> 00:06:20.080
Which is the fully qualified class name

145
00:06:20.080 --> 00:06:23.050
of that servlet class that we used just now.

146
00:06:23.050 --> 00:06:26.030
So I'm going to state that information

147
00:06:26.030 --> 00:06:27.090
out there in that tag.

148
00:06:27.090 --> 00:06:28.080
Right.

149
00:06:28.080 --> 00:06:31.070
After we do this, there's another tag that you're to define

150
00:06:31.070 --> 00:06:34.070
which is called servlet-mapping.

151
00:06:34.070 --> 00:06:37.090
Now under this, you have a couple of other tags.

152
00:06:37.090 --> 00:06:39.010
Let's see that.

153
00:06:39.010 --> 00:06:40.040
There's a servlet-name.

154
00:06:40.040 --> 00:06:43.030
Now this servlet-name is supposed to be having

155
00:06:43.030 --> 00:06:46.030
exactly the same value that you've already given

156
00:06:46.030 --> 00:06:47.070
under the servlet tag.

157
00:06:47.070 --> 00:06:49.080
It's supposed to be the same and I'll tell you why

158
00:06:49.080 --> 00:06:51.070
in the later part of this discussion.

159
00:06:51.070 --> 00:06:55.000
The other tag that you're to define is url-pattern.

160
00:06:55.000 --> 00:06:59.050
Which is a unique URL pattern identifying this servlet.

161
00:06:59.050 --> 00:07:01.070
And it always relative to that ward structure

162
00:07:01.070 --> 00:07:03.010
that we've seen earlier.

163
00:07:03.010 --> 00:07:08.060
So I'm just going to say slash get servlet.

164
00:07:08.060 --> 00:07:11.000
So this is what the configuration is for the servlet.

165
00:07:11.000 --> 00:07:12.020
If you go down this file,

166
00:07:12.020 --> 00:07:13.070
there is another servlet configuration

167
00:07:13.070 --> 00:07:15.090
that I've done for the HomeServlet class.

168
00:07:15.090 --> 00:07:18.030
And I've also added a HomeServlet.java file

169
00:07:18.030 --> 00:07:19.070
under the servlets folder.

170
00:07:19.070 --> 00:07:21.010
You are free to ignore it,

171
00:07:21.010 --> 00:07:23.060
we discuss it in the later part of this course.

172
00:07:23.060 --> 00:07:26.030
So now let's go ahead and run this project.

173
00:07:26.030 --> 00:07:28.090
And check out our changes.

174
00:07:28.090 --> 00:07:30.040
Yeah so this is how it looks like.

175
00:07:30.040 --> 00:07:31.090
Let me take this URL,

176
00:07:31.090 --> 00:07:36.050
go to a browser, and open it up fresh.

177
00:07:36.050 --> 00:07:38.080
So this is the landing page of my application.

178
00:07:38.080 --> 00:07:40.070
Now if I want to access that get servlet,

179
00:07:40.070 --> 00:07:43.080
I need to append the URL pattern of that servlet.

180
00:07:43.080 --> 00:07:45.000
So I'm going to do that quickly.

181
00:07:45.000 --> 00:07:49.020
I'm going to say get servlet.

182
00:07:49.020 --> 00:07:50.030
And there we are.

183
00:07:50.030 --> 00:07:53.040
We get that header displayed as a part of the response

184
00:07:53.040 --> 00:07:55.030
that we have written out of that servlet.

185
00:07:55.030 --> 00:07:57.080
So this is basically how the get servlet works.

186
00:07:57.080 --> 00:07:59.090
Let us look at a couple of other things.

187
00:07:59.090 --> 00:08:04.000
We have done the entire servlet configuration via XML,

188
00:08:04.000 --> 00:08:07.000
however web module 3.0 version

189
00:08:07.000 --> 00:08:10.010
allows you to do the configuration via annotations.

190
00:08:10.010 --> 00:08:12.030
Annotations are always placed inside a class

191
00:08:12.030 --> 00:08:13.040
so this is how it look like.

192
00:08:13.040 --> 00:08:15.080
You just have to say adderate,

193
00:08:15.080 --> 00:08:19.050
webservlet, which is this annotation.

194
00:08:19.050 --> 00:08:21.000
And in a pair of round brackets

195
00:08:21.000 --> 00:08:25.030
you will have to define the URL pattern for this servlet.

196
00:08:25.030 --> 00:08:27.060
Which was this for us.

197
00:08:27.060 --> 00:08:31.030
So basically you either do the annotation configuration,

198
00:08:31.030 --> 00:08:34.060
or you could do the XML configuration.

199
00:08:34.060 --> 00:08:36.080
Choice is yours, it's completely left to the project

200
00:08:36.080 --> 00:08:37.090
that you're implementing.

201
00:08:37.090 --> 00:08:40.040
Where it is dictated, which configuration approach

202
00:08:40.040 --> 00:08:41.080
you're going to adopt.

203
00:08:41.080 --> 00:08:44.080
Let's also see one more thing.

204
00:08:44.080 --> 00:08:47.050
Now that we've hit this URL on our browser,

205
00:08:47.050 --> 00:08:49.090
let's see how do you send data

206
00:08:49.090 --> 00:08:51.080
with a GET request?

207
00:08:51.080 --> 00:08:53.010
So as I said, it is going to be

208
00:08:53.010 --> 00:08:54.040
in the form of a query string.

209
00:08:54.040 --> 00:08:55.050
And that looks like this.

210
00:08:55.050 --> 00:08:56.090
There's a question mark,

211
00:08:56.090 --> 00:08:58.080
and then the data is going to be

212
00:08:58.080 --> 00:09:01.090
in the form of key and value.

213
00:09:01.090 --> 00:09:03.030
The question mark is a separator

214
00:09:03.030 --> 00:09:04.090
to understand that the rest of the portion

215
00:09:04.090 --> 00:09:06.030
is the data plus.

216
00:09:06.030 --> 00:09:08.040
Right, so name equal to Hplus.

217
00:09:08.040 --> 00:09:10.090
Name is the key, and Hplus is the value.

218
00:09:10.090 --> 00:09:13.030
Now, if you want to retrieve this data

219
00:09:13.030 --> 00:09:15.030
inside your servlet, how do we do it?

220
00:09:15.030 --> 00:09:16.090
Let's come back to the code.

221
00:09:16.090 --> 00:09:19.080
This is my GetServlet.

222
00:09:19.080 --> 00:09:22.060
Let's come here and now on line number 15,

223
00:09:22.060 --> 00:09:25.020
I'm going to add the code which will fetch that data.

224
00:09:25.020 --> 00:09:26.070
So let's take the request object

225
00:09:26.070 --> 00:09:30.010
and invoke an API on it which is called getParameter.

226
00:09:30.010 --> 00:09:33.000
We need to feed the name of that parameter

227
00:09:33.000 --> 00:09:36.000
which is in our case name of course.

228
00:09:36.000 --> 00:09:37.020
Let's end it with semicolon

229
00:09:37.020 --> 00:09:39.050
and this is going to return me something of type string.

230
00:09:39.050 --> 00:09:44.030
So I'm going to fetch it in a string variable.

231
00:09:44.030 --> 00:09:46.070
Once this is done, let's also do one more thing.

232
00:09:46.070 --> 00:09:49.080
Let's go ahead and write out this value

233
00:09:49.080 --> 00:09:50.090
as a part of the response.

234
00:09:50.090 --> 00:09:51.090
So on line number 18

235
00:09:51.090 --> 00:09:53.090
where I'm writing out to find a response,

236
00:09:53.090 --> 00:09:56.040
I can just go ahead, put a space,

237
00:09:56.040 --> 00:09:59.050
and then append the value to it

238
00:09:59.050 --> 00:10:02.050
to understand whether we are really getting the data or not.

239
00:10:02.050 --> 00:10:08.000
Alright, so let's quickly run this project again.

240
00:10:08.000 --> 00:10:09.010
And let's go back to the browser.

241
00:10:09.010 --> 00:10:12.000
And now we're going to hit the request with this data.

242
00:10:12.000 --> 00:10:13.080
So when I do that,

243
00:10:13.080 --> 00:10:17.080
you see I got the response parameter written out.

244
00:10:17.080 --> 00:10:19.090
So in order to fetch the data of the request,

245
00:10:19.090 --> 00:10:22.040
you need to use request or get parameter.

246
00:10:22.040 --> 00:10:25.030
Key value is how you specify the information.

247
00:10:25.030 --> 00:10:28.010
And this entire thing is called query string.

248
00:10:28.010 --> 00:10:30.060
In the next video we're going to implement

249
00:10:30.060 --> 00:10:33.070
the get request for our Hplus boat application

250
00:10:33.070 --> 00:10:36.000
for the search use case.

