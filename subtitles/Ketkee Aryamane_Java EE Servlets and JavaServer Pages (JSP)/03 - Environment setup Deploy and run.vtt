WEBVTT
1
00:00:00.050 --> 00:00:03.050
- [Narrator] All right, let's pick up from where had left.

2
00:00:03.050 --> 00:00:05.000
We were actually looking at the steps for

3
00:00:05.000 --> 00:00:06.020
server d application.

4
00:00:06.020 --> 00:00:09.040
We will continue with some more in this light.

5
00:00:09.040 --> 00:00:11.050
Let's take a look at the next step.

6
00:00:11.050 --> 00:00:15.040
The next step is to add the JDBC driver JAR MySQL.

7
00:00:15.040 --> 00:00:17.010
Now in our application we're going to use

8
00:00:17.010 --> 00:00:19.020
the MySQL data base server.

9
00:00:19.020 --> 00:00:22.080
Of course we're going to use JDBC API java based connectivity

10
00:00:22.080 --> 00:00:25.030
to transact with the data base.

11
00:00:25.030 --> 00:00:28.070
We need the driver JAR file for the respective data base.

12
00:00:28.070 --> 00:00:32.020
That's essential, otherwise JDBC code wouldn't work.

13
00:00:32.020 --> 00:00:35.090
I've already got that JAR downloaded on my desktop.

14
00:00:35.090 --> 00:00:41.020
I'm just going to copy that and go to my workspace.

15
00:00:41.020 --> 00:00:46.000
Go inside this project and paste it under the lift folder.

16
00:00:46.000 --> 00:00:47.070
Once you do that, that wouldn't be enough.

17
00:00:47.070 --> 00:00:49.050
You have to go in and add it to the build parts.

18
00:00:49.050 --> 00:00:51.020
I'm going to right click on this project again.

19
00:00:51.020 --> 00:00:52.060
Go to properties.

20
00:00:52.060 --> 00:00:54.000
Go to the build part.

21
00:00:54.000 --> 00:00:57.010
Of course go to the library step and this time

22
00:00:57.010 --> 00:00:59.000
click on add JARs.

23
00:00:59.000 --> 00:01:01.080
Once we do that, let's try first to the lift folder and

24
00:01:01.080 --> 00:01:04.050
pick up the JAR file from there.

25
00:01:04.050 --> 00:01:05.070
There we are.

26
00:01:05.070 --> 00:01:07.010
Let's say OK.

27
00:01:07.010 --> 00:01:09.000
Apply, and okay again.

28
00:01:09.000 --> 00:01:13.020
So now you're all set to code the JDBC API on this project

29
00:01:13.020 --> 00:01:16.040
because you have the driver connected JAR ready with you.

30
00:01:16.040 --> 00:01:18.050
Let's see the next one.

31
00:01:18.050 --> 00:01:21.050
Now we have to deploy and run the project on the server.

32
00:01:21.050 --> 00:01:23.030
Right. Let's come back to Eclipse.

33
00:01:23.030 --> 00:01:24.080
Our project is here.

34
00:01:24.080 --> 00:01:26.040
Our server instance is ready.

35
00:01:26.040 --> 00:01:28.040
Now we need to make them work together.

36
00:01:28.040 --> 00:01:30.080
I'm going to right click on this project and choose the

37
00:01:30.080 --> 00:01:33.050
option of run as, run on server.

38
00:01:33.050 --> 00:01:35.090
Once I do that it is going to ask me which is the server

39
00:01:35.090 --> 00:01:37.040
option do I need to choose?

40
00:01:37.040 --> 00:01:39.060
In case you have multiple servers you need to choose

41
00:01:39.060 --> 00:01:41.070
the appropriate option from this list.

42
00:01:41.070 --> 00:01:43.030
I just have one server configured so I'm

43
00:01:43.030 --> 00:01:44.060
just going to choose that.

44
00:01:44.060 --> 00:01:47.070
I can also click on the check box so that I don't

45
00:01:47.070 --> 00:01:51.000
have to repeat this process over.

46
00:01:51.000 --> 00:01:52.000
Click on next.

47
00:01:52.000 --> 00:01:55.000
Do you see that you project is available in the configured

48
00:01:55.000 --> 00:01:58.000
pane because you're going to deploy it right now.

49
00:01:58.000 --> 00:02:00.070
Let's click on finish.

50
00:02:00.070 --> 00:02:04.000
Once we are done, the entire deployment activity that

51
00:02:04.000 --> 00:02:07.060
happens for that project on the server is going to

52
00:02:07.060 --> 00:02:10.030
be visible under the console view of Eclipse.

53
00:02:10.030 --> 00:02:12.040
If you don't get to see this view you just have to again

54
00:02:12.040 --> 00:02:15.020
go to window, show view, and there you are.

55
00:02:15.020 --> 00:02:16.050
That's the option.

56
00:02:16.050 --> 00:02:17.090
So when you click on it, this console view is

57
00:02:17.090 --> 00:02:18.080
going to become visible.

58
00:02:18.080 --> 00:02:22.080
Generally it opens up when you deploy the application.

59
00:02:22.080 --> 00:02:25.080
Now, take a look at this activity trace.

60
00:02:25.080 --> 00:02:28.090
The entire trace of the activity that happens on your

61
00:02:28.090 --> 00:02:31.070
server console has to be a clean start-up.

62
00:02:31.070 --> 00:02:35.030
If there are any exceptions coming out on your console

63
00:02:35.030 --> 00:02:37.050
it essentially means that there are errors in your

64
00:02:37.050 --> 00:02:40.080
deployment, which means you need to go and rectify those

65
00:02:40.080 --> 00:02:43.060
errors and re-deploy your application.

66
00:02:43.060 --> 00:02:45.050
This process will go on until you have

67
00:02:45.050 --> 00:02:48.030
a clean start-up like this.

68
00:02:48.030 --> 00:02:51.050
Do you see that the server said that it started up

69
00:02:51.050 --> 00:02:53.080
in 41 milliseconds?

70
00:02:53.080 --> 00:02:56.060
It completely deployed my project on it.

71
00:02:56.060 --> 00:02:59.000
So now we are ready to actually start off with the

72
00:02:59.000 --> 00:03:00.070
run of that application.

73
00:03:00.070 --> 00:03:02.080
Right? So this is how it looks like.

74
00:03:02.080 --> 00:03:04.040
Let's see the next step.

75
00:03:04.040 --> 00:03:05.080
Now this is an important one.

76
00:03:05.080 --> 00:03:08.060
We have to deploy the war external to Eclipse IDE.

77
00:03:08.060 --> 00:03:11.020
Let's understand this point first.

78
00:03:11.020 --> 00:03:15.030
Whenever the server deployed this project on itself,

79
00:03:15.030 --> 00:03:18.070
what it essentially did is it actually constructed

80
00:03:18.070 --> 00:03:20.070
a war file for this project.

81
00:03:20.070 --> 00:03:23.080
When I say "war" I mean web archive.

82
00:03:23.080 --> 00:03:26.030
Because that's the package that the term gets over

83
00:03:26.030 --> 00:03:28.060
understands for the deployment process.

84
00:03:28.060 --> 00:03:31.040
It cannot understand any other kind of package.

85
00:03:31.040 --> 00:03:34.050
Now in order that that happens, since we are inside

86
00:03:34.050 --> 00:03:37.080
Eclipse, Eclipse internally manages these things for us.

87
00:03:37.080 --> 00:03:41.000
When you say "run as" run on server it will clearly go

88
00:03:41.000 --> 00:03:44.060
and create a war and deploy it on that instance.

89
00:03:44.060 --> 00:03:48.030
However, in your industry projects you have a lot of

90
00:03:48.030 --> 00:03:50.000
environments that you work on.

91
00:03:50.000 --> 00:03:53.000
One of them may be development and then this QA where

92
00:03:53.000 --> 00:03:55.020
you actually give your project for testing, and there's

93
00:03:55.020 --> 00:03:57.080
a Go Live which is your production environment.

94
00:03:57.080 --> 00:04:00.070
Now in your QA or Go Live, or even for that matter the

95
00:04:00.070 --> 00:04:04.000
staging environment you do not have the Eclipse IDE.

96
00:04:04.000 --> 00:04:07.020
That's only specific to the development environment.

97
00:04:07.020 --> 00:04:10.050
How are we going to deploy and host our project on

98
00:04:10.050 --> 00:04:13.080
the server in the QA and in the Go Live environment?

99
00:04:13.080 --> 00:04:15.060
This is what we need to understand, and that's

100
00:04:15.060 --> 00:04:17.080
exactly this point is about.

101
00:04:17.080 --> 00:04:20.030
Let's understand how are you going to deploy

102
00:04:20.030 --> 00:04:23.000
your project outside Eclipse.

103
00:04:23.000 --> 00:04:27.020
Let's go to Eclipse first and stop the server.

104
00:04:27.020 --> 00:04:31.020
I'm going to open the command prompt.

105
00:04:31.020 --> 00:04:34.060
From here I'm going to navigate to the Softwares folder

106
00:04:34.060 --> 00:04:37.020
where my tomcat is residing.

107
00:04:37.020 --> 00:04:40.080
Let's go there.

108
00:04:40.080 --> 00:04:42.060
There we are.

109
00:04:42.060 --> 00:04:44.090
We also need to navigate to the bin directory of

110
00:04:44.090 --> 00:04:47.030
tomcat because bin is the place which has got all the

111
00:04:47.030 --> 00:04:49.050
executable commands to start, stop,

112
00:04:49.050 --> 00:04:51.080
de-bug your server et cetera.

113
00:04:51.080 --> 00:04:55.000
Now we need a war file, we said, for the deployment.

114
00:04:55.000 --> 00:04:56.060
How are we are we going to generate the war file?

115
00:04:56.060 --> 00:05:00.020
Let's go to Eclipse and Eclipse has got a utility ready.

116
00:05:00.020 --> 00:05:01.090
You right click on this project.

117
00:05:01.090 --> 00:05:04.010
Click on the export option, and say that you want to

118
00:05:04.010 --> 00:05:06.000
export to a war file.

119
00:05:06.000 --> 00:05:08.070
Once you click this, say next, and you choose a

120
00:05:08.070 --> 00:05:11.050
destination where this war file is going to be saved.

121
00:05:11.050 --> 00:05:14.050
So let me save it to desktop right now.

122
00:05:14.050 --> 00:05:16.030
Click on finish.

123
00:05:16.030 --> 00:05:17.060
Now let's come to the (mumbles).

124
00:05:17.060 --> 00:05:20.060
We are now going to inspect the contents of this war.

125
00:05:20.060 --> 00:05:21.070
We want to extract that.

126
00:05:21.070 --> 00:05:25.040
Let's open up with WinRAR.

127
00:05:25.040 --> 00:05:27.030
That is how it looks like.

128
00:05:27.030 --> 00:05:29.020
That's the root folder of your app, and under that you

129
00:05:29.020 --> 00:05:32.000
see there is a css folder and an html folder.

130
00:05:32.000 --> 00:05:35.020
So these are the web content files that we had prepared.

131
00:05:35.020 --> 00:05:38.040
There's also META-INF and WEB-INF, and under WEB-INF you

132
00:05:38.040 --> 00:05:41.070
have the classes which will store all your dot class files.

133
00:05:41.070 --> 00:05:44.030
Under the lib you have all the JAR files that you may

134
00:05:44.030 --> 00:05:48.050
have added, and web xml of (mumbles) deployment descriptor.

135
00:05:48.050 --> 00:05:50.000
Now an important thing to note here is that you

136
00:05:50.000 --> 00:05:53.020
may not be able to see all the servlet in the JSPAPI JARs

137
00:05:53.020 --> 00:05:57.010
because we refer to them directly from the server folder.

138
00:05:57.010 --> 00:05:59.030
Had you pasted all of them into the lib, they would

139
00:05:59.030 --> 00:06:01.060
have been visible even here.

140
00:06:01.060 --> 00:06:04.070
Please also note that the JAR files for servlets in

141
00:06:04.070 --> 00:06:09.030
JSPs have been included locally in our project, which

142
00:06:09.030 --> 00:06:11.010
are picked up from this machine.

143
00:06:11.010 --> 00:06:14.010
However, if you want to transport this application from

144
00:06:14.010 --> 00:06:17.030
one machine to another, then it would be best advisable

145
00:06:17.030 --> 00:06:21.000
to go ahead and paste all the servlet and JSPI JARs

146
00:06:21.000 --> 00:06:23.040
under the lib folder of your machine.

147
00:06:23.040 --> 00:06:26.080
So that when you change the machine, the local part is not

148
00:06:26.080 --> 00:06:28.090
going to produce any kind of conflict.

149
00:06:28.090 --> 00:06:33.030
In a real life project, we always add all the dependencies,

150
00:06:33.030 --> 00:06:37.030
which are the JAR files for servlets, JSP and any other

151
00:06:37.030 --> 00:06:41.010
API that you may need to integrate with your application.

152
00:06:41.010 --> 00:06:44.030
So make it a best practice to store all the JARs always

153
00:06:44.030 --> 00:06:47.020
under the lib folder and then add them to the build

154
00:06:47.020 --> 00:06:49.090
part of your project so that transportation on any

155
00:06:49.090 --> 00:06:54.020
machine will never cause any issues.

156
00:06:54.020 --> 00:06:58.030
Now, this is the context root folder of your app.

157
00:06:58.030 --> 00:07:00.040
If you look at this entire war structure, it is a little

158
00:07:00.040 --> 00:07:03.000
different from your actual project structure, which

159
00:07:03.000 --> 00:07:05.030
is totally fine because this is how the war structure

160
00:07:05.030 --> 00:07:08.000
looks like and this is what tomcat understands for

161
00:07:08.000 --> 00:07:09.090
the entire deployment process.

162
00:07:09.090 --> 00:07:14.030
So css and html come right immediate to the context root.

163
00:07:14.030 --> 00:07:16.060
Then you have META-INF and WEB-INF.

164
00:07:16.060 --> 00:07:20.000
All the related parts that you provide in your code are

165
00:07:20.000 --> 00:07:22.080
with respect to this war structure, which is why it is

166
00:07:22.080 --> 00:07:25.050
very important to understand this right now.

167
00:07:25.050 --> 00:07:28.040
So once we are ready with the war, what we need to do is

168
00:07:28.040 --> 00:07:31.070
we need to open the server software.

169
00:07:31.070 --> 00:07:34.000
So this is how the server software structure looks like

170
00:07:34.000 --> 00:07:36.070
and there's a web apps directory under that server.

171
00:07:36.070 --> 00:07:39.080
When I click on it, this is the place where you're going to

172
00:07:39.080 --> 00:07:43.000
put all your war files so that the server can pick

173
00:07:43.000 --> 00:07:44.090
them up for deployment.

174
00:07:44.090 --> 00:07:47.080
What I'm going to do now is, I'm just going to drop that

175
00:07:47.080 --> 00:07:51.030
war file that we have under this web apps directory.

176
00:07:51.030 --> 00:07:54.000
Let's take it and grab and put it there

177
00:07:54.000 --> 00:07:55.050
under that directory.

178
00:07:55.050 --> 00:07:56.070
Yeah.

179
00:07:56.070 --> 00:07:59.020
Now that we have the war file dropped here, the only

180
00:07:59.020 --> 00:08:01.030
thing that we need to do is we need to start the server,

181
00:08:01.030 --> 00:08:03.090
and when the server starts this war file is automatically

182
00:08:03.090 --> 00:08:06.020
going to be picked up for deployment.

183
00:08:06.020 --> 00:08:08.080
Let's go back to work on mine prompt, and I'm going to

184
00:08:08.080 --> 00:08:12.010
hit command which is called startup.bat.

185
00:08:12.010 --> 00:08:13.090
It's a batch file which is going to start

186
00:08:13.090 --> 00:08:15.010
your tomcat server.

187
00:08:15.010 --> 00:08:17.090
I'm just going to hit enter and a tomcat window

188
00:08:17.090 --> 00:08:19.080
will open up for you.

189
00:08:19.080 --> 00:08:23.000
When that is done, if I maximize this you see that the

190
00:08:23.000 --> 00:08:25.060
server has started up in so many milliseconds and

191
00:08:25.060 --> 00:08:29.020
it has deployed you sample project dot war file.

192
00:08:29.020 --> 00:08:33.010
So this is what happens when you want to deploy

193
00:08:33.010 --> 00:08:35.000
a war file outside Eclipse IDE.

194
00:08:35.000 --> 00:08:37.080
Generally on your testing and production environments

195
00:08:37.080 --> 00:08:39.090
you have (mumbles) machines and you need to work with

196
00:08:39.090 --> 00:08:44.000
a command prompt in order to deploy a war to the server.

