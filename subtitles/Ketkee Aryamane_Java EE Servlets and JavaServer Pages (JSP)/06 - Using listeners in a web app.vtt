WEBVTT
1
00:00:00.050 --> 00:00:02.040
- [Instructor] So the GEE provides you

2
00:00:02.040 --> 00:00:04.010
a lot of listener interfaces that you

3
00:00:04.010 --> 00:00:05.060
can create classes out of.

4
00:00:05.060 --> 00:00:07.080
Some of them are listed on this slide.

5
00:00:07.080 --> 00:00:09.070
You have the ServletContextListener,

6
00:00:09.070 --> 00:00:11.080
which is going to be responsible for the

7
00:00:11.080 --> 00:00:15.020
deployment and undeployment event software application.

8
00:00:15.020 --> 00:00:17.070
So basically, if you write a clause which implements

9
00:00:17.070 --> 00:00:20.020
the ServletContextListener, it means that

10
00:00:20.020 --> 00:00:22.020
you will be able to capture the events

11
00:00:22.020 --> 00:00:25.080
of deployment and undeployment in your application.

12
00:00:25.080 --> 00:00:29.000
On the same lines, there is ServletContextAttributeListener.

13
00:00:29.000 --> 00:00:32.040
So if you really add or remove or replace attributes

14
00:00:32.040 --> 00:00:34.020
in the ServletContextObject,

15
00:00:34.020 --> 00:00:37.020
you have this listener to trap those events.

16
00:00:37.020 --> 00:00:40.080
HTTPSessionListener is dedicated for the HTTPSessionObject.

17
00:00:40.080 --> 00:00:43.000
So when this session gets created or destroyed,

18
00:00:43.000 --> 00:00:45.050
that's the point where you can trap those events

19
00:00:45.050 --> 00:00:47.060
using this Listener Interface.

20
00:00:47.060 --> 00:00:50.030
And as for HTTPSessionAttributeListener,

21
00:00:50.030 --> 00:00:53.000
it means if you're trying to add, remove, or replace

22
00:00:53.000 --> 00:00:55.070
attributes inside the HTTPSessionObject,

23
00:00:55.070 --> 00:00:57.060
then you have this listener at your disposal

24
00:00:57.060 --> 00:00:59.060
to trap those events.

25
00:00:59.060 --> 00:01:04.020
ServletRequestAttributeListener and ServletRequestListener,

26
00:01:04.020 --> 00:01:05.070
they are the ones that are dedicated

27
00:01:05.070 --> 00:01:07.020
for the Servlet Request.

28
00:01:07.020 --> 00:01:09.040
So if you have a request processing that is starting,

29
00:01:09.040 --> 00:01:12.080
you can use ServletRequestListener to trap that event.

30
00:01:12.080 --> 00:01:16.020
And if you are trying to add, remove, or replace attributes,

31
00:01:16.020 --> 00:01:19.020
then you have the ServletRequestAttributeListener.

32
00:01:19.020 --> 00:01:21.090
Then you also have HTTPSessionBindingListener.

33
00:01:21.090 --> 00:01:23.070
So as we talked about in the previous video,

34
00:01:23.070 --> 00:01:26.040
that if you have an object binding itself

35
00:01:26.040 --> 00:01:28.080
or unbinding itself from the session,

36
00:01:28.080 --> 00:01:30.000
then you can trap those events,

37
00:01:30.000 --> 00:01:31.050
and that's the Listener Interface

38
00:01:31.050 --> 00:01:33.090
which you'll take help from.

39
00:01:33.090 --> 00:01:35.010
In addition to this, there's also

40
00:01:35.010 --> 00:01:38.010
HTTPSessionActivationListener. which is basically

41
00:01:38.010 --> 00:01:42.080
responsible for the session migration event.

42
00:01:42.080 --> 00:01:45.090
Now let's go ahead and try out the code demo

43
00:01:45.090 --> 00:01:49.060
for the listeners in our application.

44
00:01:49.060 --> 00:01:52.060
So the first step is to write out a listener class

45
00:01:52.060 --> 00:01:56.060
which implements the javax.servlet.ServletContextListener

46
00:01:56.060 --> 00:01:58.090
interface and will generate the pair of methods.

47
00:01:58.090 --> 00:02:02.010
So the idea that we're trying to do on this demo is,

48
00:02:02.010 --> 00:02:05.010
we are going to write a listener which will implement

49
00:02:05.010 --> 00:02:07.070
the ServletContextListener interface.

50
00:02:07.070 --> 00:02:10.070
Now this is the one which will help you to trap the events

51
00:02:10.070 --> 00:02:13.070
of deployment and undeployment in your application.

52
00:02:13.070 --> 00:02:16.040
And whenever the application is going to get deployed,

53
00:02:16.040 --> 00:02:17.070
we are going to basically set up

54
00:02:17.070 --> 00:02:20.010
the connection object to the database.

55
00:02:20.010 --> 00:02:21.070
That's the idea, right?

56
00:02:21.070 --> 00:02:23.080
So let's go to the code.

57
00:02:23.080 --> 00:02:26.060
And I have a folder of listeners on my machine

58
00:02:26.060 --> 00:02:30.080
on the project, and I'm going to create a class here,

59
00:02:30.080 --> 00:02:37.050
which is, let's say, called the ApplicationListener.

60
00:02:37.050 --> 00:02:40.090
And I'm going to make this class implement

61
00:02:40.090 --> 00:02:44.010
the ServletContextListener.

62
00:02:44.010 --> 00:02:45.070
That's the one.

63
00:02:45.070 --> 00:02:47.080
Now it is implements, so I'll have to add

64
00:02:47.080 --> 00:02:48.090
the unimplemented methods.

65
00:02:48.090 --> 00:02:50.080
Let's quickly do that.

66
00:02:50.080 --> 00:02:52.080
So you get a pair of methods generated.

67
00:02:52.080 --> 00:02:56.040
One is contextDestroyed, the other's contextInitialized.

68
00:02:56.040 --> 00:02:58.060
So whenever you deploy your application,

69
00:02:58.060 --> 00:03:01.050
that's the point when the contextInitialized method

70
00:03:01.050 --> 00:03:03.050
will get executed automatically.

71
00:03:03.050 --> 00:03:05.080
And whenever you undeploy, then ContextDestroyed

72
00:03:05.080 --> 00:03:08.060
is the method that will get invoked.

73
00:03:08.060 --> 00:03:11.050
Okay, so now, the next step is to obtain

74
00:03:11.050 --> 00:03:16.000
the DB connection object in the contextInitialized method.

75
00:03:16.000 --> 00:03:18.070
That's correct because whenever your application deploys,

76
00:03:18.070 --> 00:03:20.060
we know that this is going to get invoked.

77
00:03:20.060 --> 00:03:23.010
So let's go ahead and write out a code

78
00:03:23.010 --> 00:03:26.040
for establishing the connection object to database.

79
00:03:26.040 --> 00:03:28.090
But before that, just take a look at the parameters

80
00:03:28.090 --> 00:03:30.090
for the methods.

81
00:03:30.090 --> 00:03:34.000
This is ServletContextEvent object,

82
00:03:34.000 --> 00:03:35.050
which is a parameter.

83
00:03:35.050 --> 00:03:38.010
So basically, the events and event listeners,

84
00:03:38.010 --> 00:03:40.050
they are bundled up into the same package.

85
00:03:40.050 --> 00:03:42.010
So whenever you have a listener,

86
00:03:42.010 --> 00:03:45.010
you will have the associated event object for it

87
00:03:45.010 --> 00:03:46.090
so that you can retrieve any information

88
00:03:46.090 --> 00:03:50.060
with respect to the event if you wish to in the code.

89
00:03:50.060 --> 00:03:53.050
So now let's go ahead under the contextInitialized method,

90
00:03:53.050 --> 00:03:56.070
and the first thing is, let me just put a small instance

91
00:03:56.070 --> 00:03:59.000
out on line 16.

92
00:03:59.000 --> 00:04:07.040
I'm just going say, I am in contextInitialized method.

93
00:04:07.040 --> 00:04:10.030
Similarly, I just copy this line, line number 16,

94
00:04:10.030 --> 00:04:12.060
and I'll paste on line number 10.

95
00:04:12.060 --> 00:04:15.000
And I'm just going to change the method name.

96
00:04:15.000 --> 00:04:18.010
So this is like an activity tracer I want to do.

97
00:04:18.010 --> 00:04:20.010
Okay, so let's go to contextInitialized,

98
00:04:20.010 --> 00:04:22.020
and I'm going to set up the DB connection.

99
00:04:22.020 --> 00:04:23.060
It's going to be rather simple.

100
00:04:23.060 --> 00:04:27.060
We just have to take the reference of connection,

101
00:04:27.060 --> 00:04:31.050
and we have to consult our DB connection class,

102
00:04:31.050 --> 00:04:33.070
and invoke the method of connection to database.

103
00:04:33.070 --> 00:04:35.050
That's all that we have to do, really,

104
00:04:35.050 --> 00:04:37.030
because in that code of setting of the connection,

105
00:04:37.030 --> 00:04:40.080
is already done in the DB connection class.

106
00:04:40.080 --> 00:04:43.070
Now, we need to store that connection object

107
00:04:43.070 --> 00:04:47.000
in the ServletContext as an attribute.

108
00:04:47.000 --> 00:04:49.030
So what this means is, this connection

109
00:04:49.030 --> 00:04:51.030
that you're setting up, should be available

110
00:04:51.030 --> 00:04:53.030
to your servlets of the application

111
00:04:53.030 --> 00:04:54.040
because the other ones from the

112
00:04:54.040 --> 00:04:56.060
other request processing logic begins.

113
00:04:56.060 --> 00:04:59.040
So I need to share this object now,

114
00:04:59.040 --> 00:05:02.000
and one way of sharing the object across the servlets

115
00:05:02.000 --> 00:05:05.070
of our application is your ServletContext object.

116
00:05:05.070 --> 00:05:06.080
So let's do one thing.

117
00:05:06.080 --> 00:05:09.060
We should be able to get the ServletContext

118
00:05:09.060 --> 00:05:11.010
on the Event object,

119
00:05:11.010 --> 00:05:14.060
so on line number 22, I'm just going to go ahead

120
00:05:14.060 --> 00:05:16.070
and say, getServletContext,

121
00:05:16.070 --> 00:05:19.010
which will get me the ServletContext object,

122
00:05:19.010 --> 00:05:21.070
and on that, I can say, setAttribute,

123
00:05:21.070 --> 00:05:27.060
and label this object with this dbconnection key,

124
00:05:27.060 --> 00:05:32.020
and the actual value for this will be the connection object.

125
00:05:32.020 --> 00:05:33.090
That's right.

126
00:05:33.090 --> 00:05:35.090
So we are done, we have established a connection,

127
00:05:35.090 --> 00:05:37.060
and we have set it as an attribute

128
00:05:37.060 --> 00:05:40.000
under the ServletContext.

129
00:05:40.000 --> 00:05:42.060
Now let's go ahead and also give an implementation

130
00:05:42.060 --> 00:05:43.090
to the Destroyed methods.

131
00:05:43.090 --> 00:05:45.070
So what we are going to do here is essentially

132
00:05:45.070 --> 00:05:49.070
get this connection and then just close it

133
00:05:49.070 --> 00:05:51.080
so it wants a part of the cleanup activity

134
00:05:51.080 --> 00:05:53.030
that you would want to do.

135
00:05:53.030 --> 00:05:56.010
So let's go ahead and say, connection,

136
00:05:56.010 --> 00:06:00.020
take a reference, and on the Event object again,

137
00:06:00.020 --> 00:06:03.000
get the ServletContext, and this time,

138
00:06:03.000 --> 00:06:03.080
you want to call getAttribute,

139
00:06:03.080 --> 00:06:06.010
because I want to get that connection.

140
00:06:06.010 --> 00:06:08.010
So the key is dbconnection.

141
00:06:08.010 --> 00:06:10.050
That's what this is.

142
00:06:10.050 --> 00:06:12.010
And this is, of course, going to return you

143
00:06:12.010 --> 00:06:13.080
something of the object type,

144
00:06:13.080 --> 00:06:18.000
so you need to cast it to the connection type.

145
00:06:18.000 --> 00:06:19.010
So once we are done with that,

146
00:06:19.010 --> 00:06:22.030
you can just come here and say connection.close,

147
00:06:22.030 --> 00:06:23.080
that's all.

148
00:06:23.080 --> 00:06:26.030
Now this line could possible throw you an SQL exception,

149
00:06:26.030 --> 00:06:29.020
so we have to surround it with a try catch.

150
00:06:29.020 --> 00:06:31.030
So that's about the listener.

151
00:06:31.030 --> 00:06:33.020
The next step will be to configure the listener

152
00:06:33.020 --> 00:06:34.080
in the deployment descriptor.

153
00:06:34.080 --> 00:06:38.070
So let's go ahead and open up the webxml file.

154
00:06:38.070 --> 00:06:42.010
Configuring a listener inside webxml is pretty simple.

155
00:06:42.010 --> 00:06:43.020
You just have to go there.

156
00:06:43.020 --> 00:06:45.050
I'm on line number 59 right now,

157
00:06:45.050 --> 00:06:47.060
and there's an element in the webxml,

158
00:06:47.060 --> 00:06:49.020
which is called listener.

159
00:06:49.020 --> 00:06:52.090
And under that, there's a child element, listener class,

160
00:06:52.090 --> 00:06:55.080
which will take the fully qualified class name

161
00:06:55.080 --> 00:07:00.000
of that listener, so it is com.test.listeners.

162
00:07:00.000 --> 00:07:03.070
Let me copy that from line number one, go to webxml,

163
00:07:03.070 --> 00:07:10.030
and quickly paste it here along with the class name.

164
00:07:10.030 --> 00:07:11.060
That's all.

165
00:07:11.060 --> 00:07:14.070
If, however, you want to go the annotation way

166
00:07:14.070 --> 00:07:17.000
of configuration, then you can do one thing

167
00:07:17.000 --> 00:07:19.050
on line number 10, oh, it's on line number 11

168
00:07:19.050 --> 00:07:20.060
for that matter.

169
00:07:20.060 --> 00:07:22.030
Basically on the top of the class,

170
00:07:22.030 --> 00:07:24.030
you just need to annotate this with the

171
00:07:24.030 --> 00:07:27.050
web listener annotation, that's all.

172
00:07:27.050 --> 00:07:30.040
Of course, you have to use either the xml old annotations.

173
00:07:30.040 --> 00:07:32.030
I'm going to get rid of this right now,

174
00:07:32.030 --> 00:07:37.020
and let's go ahead and do one last thing.

175
00:07:37.020 --> 00:07:38.080
We have configured the listener.

176
00:07:38.080 --> 00:07:41.030
Now you need to get the DB connection

177
00:07:41.030 --> 00:07:45.060
in any of the servlets using the ServletContext object

178
00:07:45.060 --> 00:07:48.020
instead of setting up directly in the DAO layer.

179
00:07:48.020 --> 00:07:50.050
What this means is, now we have done the job

180
00:07:50.050 --> 00:07:52.070
of setting up the connection inside the listener.

181
00:07:52.070 --> 00:07:54.060
Now let's open one of our servlets,

182
00:07:54.060 --> 00:07:57.050
let's say the search servlet.

183
00:07:57.050 --> 00:08:00.040
And in the servlet, we know that we're giving a call

184
00:08:00.040 --> 00:08:03.050
to the ApplicationDao, and on line number 30,

185
00:08:03.050 --> 00:08:05.080
it calls the searchProducts method.

186
00:08:05.080 --> 00:08:07.090
Now inside the searchProducts method,

187
00:08:07.090 --> 00:08:10.060
on line number 21, that's the place

188
00:08:10.060 --> 00:08:12.030
you're setting up the connection.

189
00:08:12.030 --> 00:08:14.040
So instead of that, we are not going to set up

190
00:08:14.040 --> 00:08:17.020
the connection in the ApplicationDao at all.

191
00:08:17.020 --> 00:08:19.010
So let me get rid of this line,

192
00:08:19.010 --> 00:08:20.060
and let's do one more thing.

193
00:08:20.060 --> 00:08:23.030
Let me add one more parameter to this method

194
00:08:23.030 --> 00:08:28.080
on line number 16, which is of the connection type.

195
00:08:28.080 --> 00:08:31.050
So what we are essentially going to do is,

196
00:08:31.050 --> 00:08:34.050
that whenever we come in the servlet,

197
00:08:34.050 --> 00:08:37.030
from there itself, you're going to pass this connection

198
00:08:37.030 --> 00:08:41.040
as an argument when we call the searchProducts method.

199
00:08:41.040 --> 00:08:45.000
So let's come back to search servlet, and here,

200
00:08:45.000 --> 00:08:49.090
on line number 27, I'm now going to go ahead

201
00:08:49.090 --> 00:08:53.060
and get the connection from the ServletContext.

202
00:08:53.060 --> 00:08:55.070
I need not write that line again,

203
00:08:55.070 --> 00:08:59.020
it's already there in the contextDestroyed

204
00:08:59.020 --> 00:09:02.040
on line number 16 in my listener class.

205
00:09:02.040 --> 00:09:06.050
So I just have to copy that, come to search servlet,

206
00:09:06.050 --> 00:09:10.040
and paste it on line number 27.

207
00:09:10.040 --> 00:09:14.000
So once that's done, I'm now going to modify this call

208
00:09:14.000 --> 00:09:17.030
and add that connection as one more parameter.

209
00:09:17.030 --> 00:09:19.050
That's all, right?

210
00:09:19.050 --> 00:09:22.000
You don't need the arg0 object,

211
00:09:22.000 --> 00:09:24.060
you just need to say, getServletContext

212
00:09:24.060 --> 00:09:27.010
or getAttribute, and of course it is going

213
00:09:27.010 --> 00:09:29.000
to return me something of the object type,

214
00:09:29.000 --> 00:09:30.050
so I'm casting it to connection,

215
00:09:30.050 --> 00:09:33.000
and I'm going to paste that connection as an argument,

216
00:09:33.000 --> 00:09:35.010
which is the other argument now,

217
00:09:35.010 --> 00:09:38.020
to the searchProducts method, right?

218
00:09:38.020 --> 00:09:39.020
So we are done now.

219
00:09:39.020 --> 00:09:47.070
Let's now run this project and check the changes.

220
00:09:47.070 --> 00:09:50.030
So now if you observe the console,

221
00:09:50.030 --> 00:09:53.020
do you see that, when the application was getting deployed,

222
00:09:53.020 --> 00:09:55.070
that's the activity trace on the console view,

223
00:09:55.070 --> 00:09:58.060
and it put me the sysout in contextInitialized,

224
00:09:58.060 --> 00:10:00.000
so that's what happened.

225
00:10:00.000 --> 00:10:01.060
When you deployed the application,

226
00:10:01.060 --> 00:10:03.020
the event got triggered,

227
00:10:03.020 --> 00:10:06.070
and the listener against it got executed automatically.

228
00:10:06.070 --> 00:10:08.070
So that's the sysout that's going to be picked up

229
00:10:08.070 --> 00:10:10.080
from the contextInitialized method.

230
00:10:10.080 --> 00:10:13.060
As for the two sysouts that you see after that,

231
00:10:13.060 --> 00:10:15.080
they are coming from the DB connection class,

232
00:10:15.080 --> 00:10:19.000
which was setting up the connection object for you, right?

233
00:10:19.000 --> 00:10:20.020
So that's what it is.

234
00:10:20.020 --> 00:10:21.030
Now let's do one more thing.

235
00:10:21.030 --> 00:10:26.060
Let's go to our application, and run this application

236
00:10:26.060 --> 00:10:29.030
for the search use case, because we made modifications

237
00:10:29.030 --> 00:10:31.010
to that method, so I'm going to click there,

238
00:10:31.010 --> 00:10:33.000
and enter the search criteria, protein.

239
00:10:33.000 --> 00:10:35.040
Let's see, and click on the search button,

240
00:10:35.040 --> 00:10:37.050
and yeah, we are still getting the products

241
00:10:37.050 --> 00:10:39.060
from the database, so the database object is

242
00:10:39.060 --> 00:10:41.000
set up correctly.

243
00:10:41.000 --> 00:10:43.010
Now we have picked that connection object

244
00:10:43.010 --> 00:10:45.010
from the listener.

245
00:10:45.010 --> 00:10:46.010
So that's what you can do.

246
00:10:46.010 --> 00:10:48.010
This is efficient resource management

247
00:10:48.010 --> 00:10:51.000
that you can set up with the listeners.

