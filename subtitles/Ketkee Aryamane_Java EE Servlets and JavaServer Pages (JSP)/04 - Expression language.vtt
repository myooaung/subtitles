WEBVTT
1
00:00:00.050 --> 00:00:03.010
- [Instructor] Now that we've seen JSP standard actions,

2
00:00:03.010 --> 00:00:06.040
let's take a look at expression language of JSP.

3
00:00:06.040 --> 00:00:09.010
So now we are constantly going towards the goal where we

4
00:00:09.010 --> 00:00:12.010
minimize the Java code statements, and do everything

5
00:00:12.010 --> 00:00:15.070
possible by means of a tag, an element or an expression.

6
00:00:15.070 --> 00:00:19.020
And expression language is one which will allow you to

7
00:00:19.020 --> 00:00:22.030
write simple expressions on JSP.

8
00:00:22.030 --> 00:00:24.050
Now what can those expressions do for you?

9
00:00:24.050 --> 00:00:27.010
Think about what you can do on a JSP.

10
00:00:27.010 --> 00:00:29.090
JSPs, as I said, used for the display purposes,

11
00:00:29.090 --> 00:00:31.060
the presentation purposes.

12
00:00:31.060 --> 00:00:35.020
So if you want to go ahead and dynamically read the data

13
00:00:35.020 --> 00:00:39.050
of JavaBean components, or maybe read the data out of

14
00:00:39.050 --> 00:00:42.030
any implicit objects that you have been storing it into,

15
00:00:42.030 --> 00:00:46.040
that can be quickly read and displayed on a JSP with

16
00:00:46.040 --> 00:00:48.070
simple expressions.

17
00:00:48.070 --> 00:00:52.040
You can also invoke public methods and go ahead and

18
00:00:52.040 --> 00:00:55.020
basically evaluate and print the output of those

19
00:00:55.020 --> 00:00:57.080
expressions on the JSP page.

20
00:00:57.080 --> 00:01:01.050
Not only this, expression language also allows you to

21
00:01:01.050 --> 00:01:05.060
perform arithmetic, addition, subtraction, multiplication,

22
00:01:05.060 --> 00:01:08.010
division, modulo, or for that matter relational,

23
00:01:08.010 --> 00:01:10.080
the double equal to, the not equal to, greater than,

24
00:01:10.080 --> 00:01:15.030
less than, etc., and logical operations like the and or not.

25
00:01:15.030 --> 00:01:19.050
Now these arithmetic operations or relational or logical

26
00:01:19.050 --> 00:01:22.010
operations that you can perform in an expression language

27
00:01:22.010 --> 00:01:24.030
are very useful when you collaborate with the

28
00:01:24.030 --> 00:01:26.030
JavaServer Pages stack library.

29
00:01:26.030 --> 00:01:29.030
We will anyway take a look at it in the video of JSTL.

30
00:01:29.030 --> 00:01:31.060
However, this is just to introduce you that expression

31
00:01:31.060 --> 00:01:34.040
language has a lot of capabilities than just reading

32
00:01:34.040 --> 00:01:37.070
the data off your Java components.

33
00:01:37.070 --> 00:01:41.090
Now as for the 2.1 specification of JSP, expression

34
00:01:41.090 --> 00:01:45.020
language is unified expression language.

35
00:01:45.020 --> 00:01:48.020
That is, it is the union of expression languages offered

36
00:01:48.020 --> 00:01:51.040
by the JavaServer Faces technology 1.0

37
00:01:51.040 --> 00:01:54.040
and JavaServer Pages technology 2.0.

38
00:01:54.040 --> 00:01:58.000
Now JavaServer Faces is of course a framework which is

39
00:01:58.000 --> 00:02:01.010
used to build component based user interfaces for a

40
00:02:01.010 --> 00:02:04.080
web application, and it's 1.0 version is also going to

41
00:02:04.080 --> 00:02:06.050
use the expression language.

42
00:02:06.050 --> 00:02:10.040
So that one and the one that we use in JSP technology 2.0

43
00:02:10.040 --> 00:02:13.000
have been combined, and now together they form

44
00:02:13.000 --> 00:02:16.020
Unified Expression Language.

45
00:02:16.020 --> 00:02:18.050
Let's take a look at the syntax.

46
00:02:18.050 --> 00:02:23.000
When I say dollar and a curly pair of braces,

47
00:02:23.000 --> 00:02:25.030
and inside that we have written out something,

48
00:02:25.030 --> 00:02:27.080
cart.noOfItems.

49
00:02:27.080 --> 00:02:30.020
What this essentially means is first of all this is

50
00:02:30.020 --> 00:02:33.060
an expression on a JSP page, and this means that I'm

51
00:02:33.060 --> 00:02:36.050
trying to read the number of items property

52
00:02:36.050 --> 00:02:39.070
from an object called cart, and that object would be

53
00:02:39.070 --> 00:02:42.020
stored in one of our predefined scopes.

54
00:02:42.020 --> 00:02:47.010
It could be request, session, application, page, etc.

55
00:02:47.010 --> 00:02:49.060
So this signifies that you're trying to display that

56
00:02:49.060 --> 00:02:53.040
property and print it to your JSP page.

57
00:02:53.040 --> 00:02:57.010
This is the alternate syntax, for as in your have a

58
00:02:57.010 --> 00:02:59.080
dollar sign, and then you have a curly pair of braces.

59
00:02:59.080 --> 00:03:02.030
Now instead of using this dot operator to access

60
00:03:02.030 --> 00:03:04.070
the property, you are trying to actually access it

61
00:03:04.070 --> 00:03:06.070
via this pair of square brackets.

62
00:03:06.070 --> 00:03:09.080
The name of the property has been embedded in double quotes.

63
00:03:09.080 --> 00:03:12.020
This is a way powerful syntax, and it is always preferred

64
00:03:12.020 --> 00:03:15.060
because it is also going to allow you to access arrays,

65
00:03:15.060 --> 00:03:19.070
array lists, maps, etc., basically your data structure.

66
00:03:19.070 --> 00:03:23.050
So this is considered to be more powerful.

67
00:03:23.050 --> 00:03:27.010
Now these expressions are primarily of two types,

68
00:03:27.010 --> 00:03:29.060
a value expression and a method expression.

69
00:03:29.060 --> 00:03:31.000
So let's say if you look at this one,

70
00:03:31.000 --> 00:03:32.020
this is a value expression.

71
00:03:32.020 --> 00:03:34.010
It's just trying to fetch a value and print it

72
00:03:34.010 --> 00:03:35.060
to your JSP page.

73
00:03:35.060 --> 00:03:38.020
And then you can also invoke methods, as we said,

74
00:03:38.020 --> 00:03:41.040
in expression language, so that's a method expression.

75
00:03:41.040 --> 00:03:44.030
At another level expressions could be either of the

76
00:03:44.030 --> 00:03:47.070
immediate type, the ones that can get evaluated immediately

77
00:03:47.070 --> 00:03:50.040
when your JSP executes.

78
00:03:50.040 --> 00:03:52.060
And the syntax that we have seen so far is going to be

79
00:03:52.060 --> 00:03:55.000
for an immediate expression.

80
00:03:55.000 --> 00:03:56.040
But there's another kind of an expression which

81
00:03:56.040 --> 00:03:59.000
is called deferred expression.

82
00:03:59.000 --> 00:04:01.030
This is the one which is going to evaluate at a later

83
00:04:01.030 --> 00:04:05.010
point in time somewhere in the pages lifecycle,

84
00:04:05.010 --> 00:04:08.050
and this deferred expression evaluation is going to be

85
00:04:08.050 --> 00:04:11.070
completely the responsibility of the underlying

86
00:04:11.070 --> 00:04:13.090
technology that you're using.

87
00:04:13.090 --> 00:04:17.070
For example, in case of JavaServer Faces framework

88
00:04:17.070 --> 00:04:21.090
you have this pages lifecycle undergoing many phases

89
00:04:21.090 --> 00:04:27.010
like component event handling or data validation,

90
00:04:27.010 --> 00:04:29.040
populating the data into the bean, etc.

91
00:04:29.040 --> 00:04:31.060
So that's where JSF is going to decide which of the

92
00:04:31.060 --> 00:04:34.060
expressions can be deferred and executed at a later

93
00:04:34.060 --> 00:04:35.080
point in time.

94
00:04:35.080 --> 00:04:37.090
If that's the deferred expression that you're writing

95
00:04:37.090 --> 00:04:40.070
on the page, then the syntax is going to be like this.

96
00:04:40.070 --> 00:04:44.040
There's a hash, and then there's a pair of curly braces

97
00:04:44.040 --> 00:04:46.090
as opposed to the dollar sign.

98
00:04:46.090 --> 00:04:50.040
Now let's take a look at some examples of expressions,

99
00:04:50.040 --> 00:04:52.070
the way you write it in EL on JSP.

100
00:04:52.070 --> 00:04:55.070
Let's say you want to just navigate through all the data

101
00:04:55.070 --> 00:04:58.030
of your Java Beans on EL, so let's take a look at

102
00:04:58.030 --> 00:05:00.060
how the expressions would look like.

103
00:05:00.060 --> 00:05:03.070
I'm saying dollar and within a pair of curly braces

104
00:05:03.070 --> 00:05:06.030
I'm saying user.age, which means that it's trying to get

105
00:05:06.030 --> 00:05:10.030
the age property of the user bean, and then it is trying

106
00:05:10.030 --> 00:05:12.070
to print it to the page.

107
00:05:12.070 --> 00:05:16.030
However, if you said dollar request scope dot number

108
00:05:16.030 --> 00:05:19.040
of items, it means that I'm trying to fetch a property

109
00:05:19.040 --> 00:05:22.080
which is called number of items, and it has to be

110
00:05:22.080 --> 00:05:25.060
picked up from the request scope.

111
00:05:25.060 --> 00:05:26.070
That's what this means.

112
00:05:26.070 --> 00:05:28.050
So it is going to pick it up from the request scope

113
00:05:28.050 --> 00:05:32.010
and display it for me on the JSP page.

114
00:05:32.010 --> 00:05:35.090
And then if you say dollar and session scope dot username,

115
00:05:35.090 --> 00:05:38.040
it means you are trying to get this property this time

116
00:05:38.040 --> 00:05:40.010
from the session scope.

117
00:05:40.010 --> 00:05:42.020
Let's take a look now at what happens for

118
00:05:42.020 --> 00:05:43.090
arithmetic operations.

119
00:05:43.090 --> 00:05:46.050
So you give a dollar sign, and within a pair of curly braces

120
00:05:46.050 --> 00:05:49.040
you could write out any expression using any of the

121
00:05:49.040 --> 00:05:50.070
arithmetic operators.

122
00:05:50.070 --> 00:05:55.060
So like addition, multiplication, division, modulo, etc.

123
00:05:55.060 --> 00:05:59.000
Now the thing to note here is that when you write

124
00:05:59.000 --> 00:06:01.000
an expression using arithmetic operators,

125
00:06:01.000 --> 00:06:03.040
it is not necessary that you use only the symbols

126
00:06:03.040 --> 00:06:04.030
that we know of.

127
00:06:04.030 --> 00:06:05.080
You can also use these keywords.

128
00:06:05.080 --> 00:06:08.030
For example, when I want to divide, I can say div,

129
00:06:08.030 --> 00:06:10.090
I can say mod instead of the modulo operator,

130
00:06:10.090 --> 00:06:12.010
so on and so forth.

131
00:06:12.010 --> 00:06:14.050
So there is this set of keywords that has been reserved

132
00:06:14.050 --> 00:06:19.010
in EL which you can use out for writing your expressions.

133
00:06:19.010 --> 00:06:20.090
Up next is the relational operations.

134
00:06:20.090 --> 00:06:23.040
So how do you write an expression for relational operation?

135
00:06:23.040 --> 00:06:26.030
There you go, so you have A into B, which is again

136
00:06:26.030 --> 00:06:28.040
a multiplication, that's an arithmetic operation,

137
00:06:28.040 --> 00:06:30.040
and then you're comparing it with 20.

138
00:06:30.040 --> 00:06:32.060
Instead of the symbol, as I said, you can also use

139
00:06:32.060 --> 00:06:34.020
the keyword of EQ.

140
00:06:34.020 --> 00:06:36.060
If it's a not equal to, then the keyword is NE,

141
00:06:36.060 --> 00:06:38.040
so on and so forth.

142
00:06:38.040 --> 00:06:39.070
Let's look at another one.

143
00:06:39.070 --> 00:06:42.060
If you want to say let's say a greater than 100,

144
00:06:42.060 --> 00:06:45.090
or instead of that you can also put it as GT,

145
00:06:45.090 --> 00:06:48.010
which actually says that it's greater than.

146
00:06:48.010 --> 00:06:51.000
Instead of the less than sign, you can put the keyword LT.

147
00:06:51.000 --> 00:06:54.000
Instead of less than equal to, you can put a keyword of LE.

148
00:06:54.000 --> 00:06:56.050
So basically when you do relational operations or

149
00:06:56.050 --> 00:06:58.040
arithmetic operations, there is this set of keywords

150
00:06:58.040 --> 00:07:00.090
that you may have at your disposal if you want to feel

151
00:07:00.090 --> 00:07:04.060
more comfortable writing an expression using those keywords.

152
00:07:04.060 --> 00:07:07.070
Then logical operations, you have the conventional

153
00:07:07.070 --> 00:07:10.090
and, or and not operators, so those are the kinds of

154
00:07:10.090 --> 00:07:14.060
expressions that you can write out with expression language.

155
00:07:14.060 --> 00:07:16.090
In the next video we'll take a look at how you can use

156
00:07:16.090 --> 00:07:20.000
expression language on one of your pages.

