WEBVTT
1
00:00:00.050 --> 00:00:01.060
- [Instructor] Now let's understand

2
00:00:01.060 --> 00:00:03.070
what is the filter component

3
00:00:03.070 --> 00:00:06.090
under the Servlet's JEE specification.

4
00:00:06.090 --> 00:00:08.070
All the request processing logic

5
00:00:08.070 --> 00:00:10.040
that you do in your application,

6
00:00:10.040 --> 00:00:14.010
generally goes in the Servlet's doGet or the doPost method.

7
00:00:14.010 --> 00:00:15.030
So request processing logic

8
00:00:15.030 --> 00:00:18.000
is a set of business rule implementations.

9
00:00:18.000 --> 00:00:20.000
What do you mean by business rule implementations?

10
00:00:20.000 --> 00:00:22.010
Let's understand that.

11
00:00:22.010 --> 00:00:25.020
Let's say, you're developing a health care application

12
00:00:25.020 --> 00:00:27.010
and you have a use case there to implement

13
00:00:27.010 --> 00:00:30.040
which is booking a doctor's appointment for a patient.

14
00:00:30.040 --> 00:00:34.010
This use case will have a certain set of steps

15
00:00:34.010 --> 00:00:37.030
that you need to translate into your code.

16
00:00:37.030 --> 00:00:38.020
Like for example,

17
00:00:38.020 --> 00:00:40.010
when I am trying to book a doctor's appointment,

18
00:00:40.010 --> 00:00:42.020
I'll have to check the date of the appointment,

19
00:00:42.020 --> 00:00:44.060
then I'll have to check the doctor's availability,

20
00:00:44.060 --> 00:00:45.090
then if it's available,

21
00:00:45.090 --> 00:00:47.070
then I'll quickly book it for the patient,

22
00:00:47.070 --> 00:00:50.090
otherwise, I'll deny that appointment for the patient.

23
00:00:50.090 --> 00:00:52.050
And if I book the appointment,

24
00:00:52.050 --> 00:00:54.070
then I'll also block that doctor's slot,

25
00:00:54.070 --> 00:00:57.000
so that nobody else can book the appointment

26
00:00:57.000 --> 00:00:58.080
with that doctor.

27
00:00:58.080 --> 00:01:01.010
So you see what I'm saying, that there is a set of steps

28
00:01:01.010 --> 00:01:03.020
in each use case which is provided

29
00:01:03.020 --> 00:01:05.030
in your requirement specification document

30
00:01:05.030 --> 00:01:08.010
which you will now translate into the code,

31
00:01:08.010 --> 00:01:10.080
in the form of business rule implementation.

32
00:01:10.080 --> 00:01:13.080
Of course, all the request processing logic that you write

33
00:01:13.080 --> 00:01:16.010
may not go only into the Servlet,

34
00:01:16.010 --> 00:01:17.080
because Servlets are generally,

35
00:01:17.080 --> 00:01:20.070
for intercepting the request and giving back a response.

36
00:01:20.070 --> 00:01:21.080
So you could actually lay down

37
00:01:21.080 --> 00:01:23.080
this business rule implementation logic

38
00:01:23.080 --> 00:01:27.040
in your business logic class or your service classes,

39
00:01:27.040 --> 00:01:30.010
depending on whatever kind of MVC architecture

40
00:01:30.010 --> 00:01:33.010
you lay down for your project.

41
00:01:33.010 --> 00:01:38.000
Now, imagine that this is the scenario,

42
00:01:38.000 --> 00:01:41.020
where you have a client coming in with a request,

43
00:01:41.020 --> 00:01:43.090
it goes to the Servlet, the Servlet let's say,

44
00:01:43.090 --> 00:01:47.000
does the actual processing logic, prepares a response

45
00:01:47.000 --> 00:01:49.030
and gives it back to the client.

46
00:01:49.030 --> 00:01:52.090
But let's say you want to do some kind of jobs

47
00:01:52.090 --> 00:01:57.080
before this request reaches the Servlet, which is year.

48
00:01:57.080 --> 00:02:00.030
Let's say, when there is an incoming request,

49
00:02:00.030 --> 00:02:03.080
I want to log the date and time of that request,

50
00:02:03.080 --> 00:02:06.000
just for an activity tracking purpose.

51
00:02:06.000 --> 00:02:09.020
Or let's say, I have a request coming in

52
00:02:09.020 --> 00:02:12.070
and when it hits the Servlet, I want to maintain a counter

53
00:02:12.070 --> 00:02:16.020
for the number of requests to the same Servlet.

54
00:02:16.020 --> 00:02:18.060
So, whenever I have a request coming in for the Servlet,

55
00:02:18.060 --> 00:02:22.030
I'll need to quickly increment that counter.

56
00:02:22.030 --> 00:02:23.080
Another example could be,

57
00:02:23.080 --> 00:02:26.020
let's say the request has reached the Servlet,

58
00:02:26.020 --> 00:02:29.040
the Servlet has done the processing logic,

59
00:02:29.040 --> 00:02:30.070
it's already prepared a response,

60
00:02:30.070 --> 00:02:33.090
let's say it is an HTML response, and now,

61
00:02:33.090 --> 00:02:36.070
you need to actually transform that response,

62
00:02:36.070 --> 00:02:39.020
to some other format, so that the client understands,

63
00:02:39.020 --> 00:02:40.050
let's say WML.

64
00:02:40.050 --> 00:02:43.040
You want to transform the response from HTML to WML

65
00:02:43.040 --> 00:02:45.070
and then get it back to the client.

66
00:02:45.070 --> 00:02:48.070
So, all these jobs that I'm talking about

67
00:02:48.070 --> 00:02:51.060
are administrative tasks of your application.

68
00:02:51.060 --> 00:02:53.050
They are not directly related

69
00:02:53.050 --> 00:02:56.060
to your business rule implementation.

70
00:02:56.060 --> 00:03:01.070
And that is exactly where filters pitch in for you.

71
00:03:01.070 --> 00:03:04.020
Let's look at the features of filters.

72
00:03:04.020 --> 00:03:07.020
Filters are those entities in your Web application,

73
00:03:07.020 --> 00:03:09.040
they're classes basically, that you write

74
00:03:09.040 --> 00:03:12.090
which are reserved for preprocessing and postprocessing

75
00:03:12.090 --> 00:03:14.010
of a request.

76
00:03:14.010 --> 00:03:17.090
So filters are never going to produce output themselves,

77
00:03:17.090 --> 00:03:21.080
but yes, they are definitely going to dynamically intercept

78
00:03:21.080 --> 00:03:23.060
your request and response

79
00:03:23.060 --> 00:03:26.030
to apply those additional functionalities

80
00:03:26.030 --> 00:03:29.010
across all your pages.

81
00:03:29.010 --> 00:03:31.090
Filters are extremely crucial components

82
00:03:31.090 --> 00:03:34.040
in a web application, because for one,

83
00:03:34.040 --> 00:03:36.020
they promote modularity.

84
00:03:36.020 --> 00:03:37.040
What does that mean?

85
00:03:37.040 --> 00:03:40.000
They give you a way to separate out

86
00:03:40.000 --> 00:03:41.080
those administrative jobs

87
00:03:41.080 --> 00:03:44.080
from your actual request processing logic jobs

88
00:03:44.080 --> 00:03:48.000
which means you're making your code modular.

89
00:03:48.000 --> 00:03:51.040
Moreover, the code that you may write in a filter

90
00:03:51.040 --> 00:03:53.070
can be applied across various use cases

91
00:03:53.070 --> 00:03:56.030
of your application, which essentially means,

92
00:03:56.030 --> 00:03:59.030
that you're promoting reusability

93
00:03:59.030 --> 00:04:01.060
and when there's modularity, reusability,

94
00:04:01.060 --> 00:04:03.080
of course the maintainability of your application

95
00:04:03.080 --> 00:04:06.080
is definitely going to increase.

96
00:04:06.080 --> 00:04:11.000
Filters possess the power of abruptly terminating

97
00:04:11.000 --> 00:04:12.070
the request execution.

98
00:04:12.070 --> 00:04:15.010
So let's say, there's something going wrong in the filter,

99
00:04:15.010 --> 00:04:17.090
then the filter can go back to the client,

100
00:04:17.090 --> 00:04:19.060
stating that something went wrong,

101
00:04:19.060 --> 00:04:24.060
and it can restrict the entry to the subsequent Servlet.

102
00:04:24.060 --> 00:04:28.030
So, when you incorporate a filter in your web application,

103
00:04:28.030 --> 00:04:30.040
this is how the flow will look like.

104
00:04:30.040 --> 00:04:33.040
There's a user, that's coming in with a request.

105
00:04:33.040 --> 00:04:36.050
When it comes in, it will first enter your context,

106
00:04:36.050 --> 00:04:38.000
of course, your application,

107
00:04:38.000 --> 00:04:41.080
but the first place that it will go to, is the filter.

108
00:04:41.080 --> 00:04:44.080
Now, this filter is going to do some preprocessing logic,

109
00:04:44.080 --> 00:04:48.090
after which, it will hand the request to the Servlet.

110
00:04:48.090 --> 00:04:50.090
The Servlet is going to then do

111
00:04:50.090 --> 00:04:53.010
the actual request processing logic.

112
00:04:53.010 --> 00:04:56.000
Of course, it may traverse through the other layers as well

113
00:04:56.000 --> 00:04:58.020
like business logic, the DAO layer et cetera

114
00:04:58.020 --> 00:05:00.020
to complete that processing

115
00:05:00.020 --> 00:05:02.050
and then it will prepare a response.

116
00:05:02.050 --> 00:05:04.020
This response then in turn,

117
00:05:04.020 --> 00:05:07.000
is again going to go to the filter, where the filter

118
00:05:07.000 --> 00:05:10.030
will now do postprocessing bit of the logic,

119
00:05:10.030 --> 00:05:13.030
and after that, the response is finally carried back

120
00:05:13.030 --> 00:05:14.080
to the client.

121
00:05:14.080 --> 00:05:19.000
The most commonly applied use cases for filters

122
00:05:19.000 --> 00:05:22.000
in a web application in your industry project,

123
00:05:22.000 --> 00:05:23.090
are user authentication.

124
00:05:23.090 --> 00:05:26.020
You can actually authenticate and verify

125
00:05:26.020 --> 00:05:28.080
whether the incoming user is a correct user,

126
00:05:28.080 --> 00:05:31.090
otherwise, you can restrict the access for that user

127
00:05:31.090 --> 00:05:33.050
for the entire system.

128
00:05:33.050 --> 00:05:36.010
You can also do response transformation,

129
00:05:36.010 --> 00:05:39.010
which is of course, coming in the postprocessing bit.

130
00:05:39.010 --> 00:05:41.000
So you can transform your response,

131
00:05:41.000 --> 00:05:43.040
from one format to another format,

132
00:05:43.040 --> 00:05:45.040
so that the client understands.

133
00:05:45.040 --> 00:05:46.080
You can also do logging.

134
00:05:46.080 --> 00:05:51.020
You can do any kind on any level of logging in the filter,

135
00:05:51.020 --> 00:05:52.090
so that your application is tracked

136
00:05:52.090 --> 00:05:55.090
and you have a log continuously about the activities

137
00:05:55.090 --> 00:05:57.020
in your application.

138
00:05:57.020 --> 00:06:00.000
Other use cases falling in this may be, encryption.

139
00:06:00.000 --> 00:06:02.030
You can encrypt your data, decrypt your data,

140
00:06:02.030 --> 00:06:05.020
you can compress your data, you can decompress your data.

141
00:06:05.020 --> 00:06:07.050
So all these jobs as you see, are not a part

142
00:06:07.050 --> 00:06:09.040
of your business application,

143
00:06:09.040 --> 00:06:11.040
but they are the other administrative tasks

144
00:06:11.040 --> 00:06:14.050
that you need to perform for your app.

145
00:06:14.050 --> 00:06:18.050
And of course, you need not encompass all the functionality,

146
00:06:18.050 --> 00:06:20.050
all the filters in one single filter class,

147
00:06:20.050 --> 00:06:22.090
you can have one to n filters configured

148
00:06:22.090 --> 00:06:25.010
in your application.

149
00:06:25.010 --> 00:06:27.030
Let's look at the filter APIs quickly.

150
00:06:27.030 --> 00:06:30.090
It all starts with the javax.servlet.Filter interface

151
00:06:30.090 --> 00:06:32.000
which is the main interface

152
00:06:32.000 --> 00:06:33.090
which has got all the methods declared.

153
00:06:33.090 --> 00:06:36.060
So you are going to write a class in your application

154
00:06:36.060 --> 00:06:39.050
which is going to implement this interface.

155
00:06:39.050 --> 00:06:42.090
Then we have the javax.servlet.FilterConfig.

156
00:06:42.090 --> 00:06:45.050
So if you want to pass any kind of configuration information

157
00:06:45.050 --> 00:06:49.000
to the filter, you have this API ready at your disposal.

158
00:06:49.000 --> 00:06:51.060
So this is very similar to the Servlet Config

159
00:06:51.060 --> 00:06:55.040
that we have seen for the Servlet class.

160
00:06:55.040 --> 00:06:58.050
Next is, javax.servlet.FilterChain.

161
00:06:58.050 --> 00:07:00.070
Now, this is a very critical API

162
00:07:00.070 --> 00:07:03.030
because this is going to help you participate

163
00:07:03.030 --> 00:07:05.030
in the chaining process.

164
00:07:05.030 --> 00:07:07.060
When a request comes into your system,

165
00:07:07.060 --> 00:07:10.090
it may first go through, let's say, two or three filters

166
00:07:10.090 --> 00:07:12.080
and when finally everything is okay,

167
00:07:12.080 --> 00:07:14.070
it will land up in this Servlet.

168
00:07:14.070 --> 00:07:18.060
So this entire set of filters and Servlets,

169
00:07:18.060 --> 00:07:21.070
basically forms a chain and filter chain

170
00:07:21.070 --> 00:07:27.070
will allow you to invoke those entities in that order.

171
00:07:27.070 --> 00:07:30.050
DoFilter API, so that's a method which is declared

172
00:07:30.050 --> 00:07:33.080
in the filter interface and it's at the heart of the filter,

173
00:07:33.080 --> 00:07:35.060
it is an essential call in the filter

174
00:07:35.060 --> 00:07:38.050
because it holds all your filter logic.

175
00:07:38.050 --> 00:07:39.070
So, this is how it looks like.

176
00:07:39.070 --> 00:07:42.040
The request comes in, it goes through filter number one,

177
00:07:42.040 --> 00:07:43.070
then it goes through filter number two

178
00:07:43.070 --> 00:07:45.020
and so on and so forth.

179
00:07:45.020 --> 00:07:47.020
Finally reaches filter number n.

180
00:07:47.020 --> 00:07:50.030
So, all of these filters are going to perform preprocessing.

181
00:07:50.030 --> 00:07:52.050
If everything is hunky-dory,

182
00:07:52.050 --> 00:07:54.070
then we will go to the Servlet class.

183
00:07:54.070 --> 00:07:57.070
The Servlet will do the actual request processing logic

184
00:07:57.070 --> 00:07:59.030
and prepare a response.

185
00:07:59.030 --> 00:08:03.060
Now this response, can be intercepted by these filters

186
00:08:03.060 --> 00:08:06.090
in exactly the reverse order and then finally,

187
00:08:06.090 --> 00:08:10.030
it will be carried back to the client.

188
00:08:10.030 --> 00:08:12.080
In the next set of videos, we are going to implement

189
00:08:12.080 --> 00:08:16.000
the filter in our application and we are going to work out

190
00:08:16.000 --> 00:08:19.000
the user authentication use case for the app.

