WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Instructor] Now let's take a look at the servlet

2
00:00:02.020 --> 00:00:05.070
lifecycle from the code perspective.

3
00:00:05.070 --> 00:00:08.090
In one of the previous videos, we had written out the

4
00:00:08.090 --> 00:00:10.050
home servlet and done the configuration of this

5
00:00:10.050 --> 00:00:12.030
inside web.xml.

6
00:00:12.030 --> 00:00:14.060
We're going to use the same servlet for exhibiting the

7
00:00:14.060 --> 00:00:17.020
lifecycle of the servlet.

8
00:00:17.020 --> 00:00:19.050
Now, let's first understand the configuration I have written

9
00:00:19.050 --> 00:00:23.000
out a home servlet which extends the HTTP servlet

10
00:00:23.000 --> 00:00:25.060
and inside the web xml file I have

11
00:00:25.060 --> 00:00:27.040
done the configuration for it.

12
00:00:27.040 --> 00:00:30.040
That's the servlet tag for the home servlet

13
00:00:30.040 --> 00:00:32.020
and there are to URL patterns that I have defined

14
00:00:32.020 --> 00:00:33.040
for the servlet.

15
00:00:33.040 --> 00:00:34.060
You can do this.

16
00:00:34.060 --> 00:00:36.090
You can have multiple URL patterns defined

17
00:00:36.090 --> 00:00:38.070
for exactly the same servlet.

18
00:00:38.070 --> 00:00:42.030
But please note that one URL pattern cannot

19
00:00:42.030 --> 00:00:45.050
point to two different servlets.

20
00:00:45.050 --> 00:00:46.030
Right.

21
00:00:46.030 --> 00:00:48.000
Let's come back to home servlet.

22
00:00:48.000 --> 00:00:51.010
And now we know that the lifecycle methods are typically

23
00:00:51.010 --> 00:00:54.060
init, service, and destroy,

24
00:00:54.060 --> 00:00:56.090
out of which service must never be overwritten because it's

25
00:00:56.090 --> 00:01:00.030
already implemented in the HTTP servlet class,

26
00:01:00.030 --> 00:01:03.080
but init and destroy however can definitely be overwritten

27
00:01:03.080 --> 00:01:05.070
by the developer.

28
00:01:05.070 --> 00:01:08.010
Now what is the job of this servlet?

29
00:01:08.010 --> 00:01:11.010
There is a do get method that we have generated here.

30
00:01:11.010 --> 00:01:14.050
The job of this home servlet is only to forward the control

31
00:01:14.050 --> 00:01:18.010
to the index dot html file, which is nothing but

32
00:01:18.010 --> 00:01:19.080
our landing page.

33
00:01:19.080 --> 00:01:22.090
The purpose of inserting the home servlet in our application

34
00:01:22.090 --> 00:01:26.090
is, that we do not want to access the index dot html

35
00:01:26.090 --> 00:01:29.020
as a static resource.

36
00:01:29.020 --> 00:01:31.070
We have already studied that as a part of the requisite

37
00:01:31.070 --> 00:01:33.030
dispatch video.

38
00:01:33.030 --> 00:01:36.090
We know that we need to go to a servlet and then go to

39
00:01:36.090 --> 00:01:39.090
an html or jsp using the forwarding mechanism so that we're

40
00:01:39.090 --> 00:01:42.090
always save and we do not reveal any details

41
00:01:42.090 --> 00:01:45.020
of our code in the URL.

42
00:01:45.020 --> 00:01:47.050
So we're going to do that now in the home servlets

43
00:01:47.050 --> 00:01:50.010
do get method.

44
00:01:50.010 --> 00:01:51.050
Let's come to line number 16.

45
00:01:51.050 --> 00:01:53.010
And I'm going to take the requisite dispatcher out

46
00:01:53.010 --> 00:01:56.030
of the request object.

47
00:01:56.030 --> 00:02:03.050
Feed the path of the index.html.

48
00:02:03.050 --> 00:02:07.090
And invoke the forward API along with the request and

49
00:02:07.090 --> 00:02:09.010
response objects.

50
00:02:09.010 --> 00:02:11.020
That's all that this servlet's do get method is going

51
00:02:11.020 --> 00:02:13.010
to do for us.

52
00:02:13.010 --> 00:02:18.020
So now, do get is overwritten, so when the service gets

53
00:02:18.020 --> 00:02:22.000
called, do get is going to be automatically invoked.

54
00:02:22.000 --> 00:02:25.020
Let's go ahead and also write out the

55
00:02:25.020 --> 00:02:26.060
init and destroy methods.

56
00:02:26.060 --> 00:02:28.080
So I'm going to generate those methods quickly.

57
00:02:28.080 --> 00:02:31.010
They can be generated in any IDE that you may be using.

58
00:02:31.010 --> 00:02:33.020
So let's get rid of the parent calls.

59
00:02:33.020 --> 00:02:34.030
And this is the signature,

60
00:02:34.030 --> 00:02:37.030
it's a public method, does not return anything

61
00:02:37.030 --> 00:02:39.080
and would probably throw servlet exception in case your

62
00:02:39.080 --> 00:02:42.010
instantiation process goes wrong.

63
00:02:42.010 --> 00:02:43.090
So what are we going to do here?

64
00:02:43.090 --> 00:02:48.000
We are going to have the initialization activity.

65
00:02:48.000 --> 00:02:54.070
So here, we're going to setup the connection object.

66
00:02:54.070 --> 00:03:00.070
Similarly, let's also generate the destroy method.

67
00:03:00.070 --> 00:03:02.000
Let's get rid of the parent calls and let's look

68
00:03:02.000 --> 00:03:05.000
at the signature, it's a public method,

69
00:03:05.000 --> 00:03:07.020
does not return anything.

70
00:03:07.020 --> 00:03:08.090
And what are we going to do here?

71
00:03:08.090 --> 00:03:12.090
We are going to do the cleanup activity.

72
00:03:12.090 --> 00:03:16.070
So basically we're going to close that db connection object.

73
00:03:16.070 --> 00:03:21.070
Let me change this comment do db connection object.

74
00:03:21.070 --> 00:03:23.060
That's right.

75
00:03:23.060 --> 00:03:28.090
Now let's go ahead, let's take a connection variable here.

76
00:03:28.090 --> 00:03:29.070
Let's say public,

77
00:03:29.070 --> 00:03:36.080
connection and initially let's set it to null.

78
00:03:36.080 --> 00:03:41.070
And then let's come inside the init method and that's the

79
00:03:41.070 --> 00:03:43.090
place we're going to set it up for the initialization

80
00:03:43.090 --> 00:03:45.060
process, so on line number 26,

81
00:03:45.060 --> 00:03:48.050
I'm going to take that reference that I created just now,

82
00:03:48.050 --> 00:03:50.090
and we'll call the db connection class and access our

83
00:03:50.090 --> 00:03:54.040
own method of get connection to database.

84
00:03:54.040 --> 00:03:57.060
So what I've done is I've basically consulted the

85
00:03:57.060 --> 00:04:00.070
db connection class and got in the connection object.

86
00:04:00.070 --> 00:04:03.040
So this is that initialization code that I'm putting

87
00:04:03.040 --> 00:04:04.020
under the init method.

88
00:04:04.020 --> 00:04:06.020
Similarly, under the destroy method,

89
00:04:06.020 --> 00:04:07.090
let's do the cleanup activity.

90
00:04:07.090 --> 00:04:13.060
So what we are going to do is on line number 35

91
00:04:13.060 --> 00:04:14.040
I'm going to take that same connection object

92
00:04:14.040 --> 00:04:19.030
and I'm just going to invoke the close API on it

93
00:04:19.030 --> 00:04:21.050
so that it gets closed when this application is getting

94
00:04:21.050 --> 00:04:25.010
undeployed or when the server is getting shutdown.

95
00:04:25.010 --> 00:04:27.060
Why do you see this error is because this line

96
00:04:27.060 --> 00:04:30.030
could possibly throw an SQL exception so we're going to

97
00:04:30.030 --> 00:04:34.040
quickly surround it with a try catch block.

98
00:04:34.040 --> 00:04:36.040
Additionally, let's also do one more thing.

99
00:04:36.040 --> 00:04:39.030
Let's put logs in each of these methods.

100
00:04:39.030 --> 00:04:42.000
What I mean is, I'm going to just press enter here and

101
00:04:42.000 --> 00:04:45.020
on line number 29, I'm going to enter a line saying

102
00:04:45.020 --> 00:04:47.040
in init method.

103
00:04:47.040 --> 00:04:50.030
This is just kind of tracing activity so that when this

104
00:04:50.030 --> 00:04:52.090
entire servlet runs, we get those sys outs and we

105
00:04:52.090 --> 00:04:56.050
understand that oh yes, init indeed got called.

106
00:04:56.050 --> 00:04:58.040
Similar thing we'll do in the rest of the methods.

107
00:04:58.040 --> 00:05:00.090
So let me copy this line number 29,

108
00:05:00.090 --> 00:05:05.060
go in the destroy method and paste it at line number 35.

109
00:05:05.060 --> 00:05:08.020
And change this message.

110
00:05:08.020 --> 00:05:09.070
Right.

111
00:05:09.070 --> 00:05:11.080
And I'll do the same thing for do get as well.

112
00:05:11.080 --> 00:05:14.000
So I'm going to come here,

113
00:05:14.000 --> 00:05:20.000
and on line number 20, I'll paste the same line number 30.

114
00:05:20.000 --> 00:05:22.070
That's what I'm going to do and I'm going to change this

115
00:05:22.070 --> 00:05:25.080
message which is do get.

116
00:05:25.080 --> 00:05:28.070
So this is just a kind of tracing I want to do so that

117
00:05:28.070 --> 00:05:32.000
I understand where and which method did I land up in.

118
00:05:32.000 --> 00:05:34.020
Right.

119
00:05:34.020 --> 00:05:37.020
Okay, so we're ready with all the lifecycle methods now.

120
00:05:37.020 --> 00:05:40.070
Let's deploy this application and understand how the

121
00:05:40.070 --> 00:05:44.070
lifecycle runs.

122
00:05:44.070 --> 00:05:48.070
So this is my root page and I'm going to access the

123
00:05:48.070 --> 00:05:53.000
home servlets URL pattern, which is this,

124
00:05:53.000 --> 00:05:54.050
so let me click enter.

125
00:05:54.050 --> 00:05:56.010
And let's check the console.

126
00:05:56.010 --> 00:05:56.090
Do you see?

127
00:05:56.090 --> 00:05:57.070
The init method got called.

128
00:05:57.070 --> 00:06:01.010
That's because I made the first request to that servlet.

129
00:06:01.010 --> 00:06:04.040
So the first time the servlet is called the init method

130
00:06:04.040 --> 00:06:07.080
will be invoked, then these two sys outs that you see

131
00:06:07.080 --> 00:06:10.060
are from the db connection class which I've been able to

132
00:06:10.060 --> 00:06:13.070
successfully setup the connection, and then it went into the

133
00:06:13.070 --> 00:06:14.090
do get method.

134
00:06:14.090 --> 00:06:18.000
Now let me do one thing.

135
00:06:18.000 --> 00:06:19.050
I hit this URL again.

136
00:06:19.050 --> 00:06:21.010
Let me hit it again.

137
00:06:21.010 --> 00:06:22.000
Do you see?

138
00:06:22.000 --> 00:06:25.010
Every time the do get keeps getting called.

139
00:06:25.010 --> 00:06:29.000
Now for all the other requests, all the repeated requests

140
00:06:29.000 --> 00:06:31.020
that I made to that same servlet,

141
00:06:31.020 --> 00:06:33.020
init never got called again.

142
00:06:33.020 --> 00:06:36.010
It was only that the do get kept getting called.

143
00:06:36.010 --> 00:06:39.030
And this happened because after init for every

144
00:06:39.030 --> 00:06:43.030
other repeated request, the service method was called

145
00:06:43.030 --> 00:06:49.000
and from there the call was delegated to the do get method.

146
00:06:49.000 --> 00:06:51.030
Let me do one more thing.

147
00:06:51.030 --> 00:06:54.080
Let me undeploy this application from the server.

148
00:06:54.080 --> 00:06:57.010
So let's go, right click, add and remove,

149
00:06:57.010 --> 00:06:58.090
and let's say you're going to remove h plus sample.

150
00:06:58.090 --> 00:07:00.020
Say finish.

151
00:07:00.020 --> 00:07:03.000
It'll show you some errors because the server is already

152
00:07:03.000 --> 00:07:04.060
starting while you're trying to undeploy.

153
00:07:04.060 --> 00:07:06.060
Let's just say okay.

154
00:07:06.060 --> 00:07:07.080
And do you see?

155
00:07:07.080 --> 00:07:10.070
You get the sys out from the destroy method,

156
00:07:10.070 --> 00:07:13.020
so whenever your application is getting undeployed,

157
00:07:13.020 --> 00:07:17.080
that's the point the destroy method will be invoked.

158
00:07:17.080 --> 00:07:19.070
Please also not that in that init method where we setup

159
00:07:19.070 --> 00:07:22.040
the database connection, that's not how you will do

160
00:07:22.040 --> 00:07:23.080
in your live project.

161
00:07:23.080 --> 00:07:25.090
In the live project, in the init method you can

162
00:07:25.090 --> 00:07:27.090
setup a complete connection pool,

163
00:07:27.090 --> 00:07:31.030
which has got a lot of database objects and that

164
00:07:31.030 --> 00:07:34.000
can be reused by the users for your application.

165
00:07:34.000 --> 00:07:36.060
So right now just for the demo purposes we are setting

166
00:07:36.060 --> 00:07:38.000
just a single database connection object but in your

167
00:07:38.000 --> 00:07:40.090
real life project, you definitely will have connection

168
00:07:40.090 --> 00:07:43.030
pooling implemented.

169
00:07:43.030 --> 00:07:46.090
So that's how the lifecycle of a servlet operates

170
00:07:46.090 --> 00:07:48.010
in that order,

171
00:07:48.010 --> 00:07:51.000
init, service, and destroy.

