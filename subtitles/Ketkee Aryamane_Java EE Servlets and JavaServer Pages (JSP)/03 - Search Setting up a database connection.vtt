WEBVTT
1
00:00:00.050 --> 00:00:02.080
- [Instructor] Now, we want to implement the get request

2
00:00:02.080 --> 00:00:05.000
for the search use case in an application.

3
00:00:05.000 --> 00:00:06.080
So, this is how an application looks like.

4
00:00:06.080 --> 00:00:08.060
I'm just going to show you the demo

5
00:00:08.060 --> 00:00:09.080
and then, we'll implement it

6
00:00:09.080 --> 00:00:12.000
in our freshly made application.

7
00:00:12.000 --> 00:00:13.050
So, if I click on this search hyperlink

8
00:00:13.050 --> 00:00:15.060
and let's say I ended a search criteria

9
00:00:15.060 --> 00:00:17.060
and click on the search button,

10
00:00:17.060 --> 00:00:18.060
what do I see?

11
00:00:18.060 --> 00:00:21.090
I see the products relevant to the search criteria.

12
00:00:21.090 --> 00:00:23.050
Let's say if I go back to search

13
00:00:23.050 --> 00:00:25.030
and try to enter some other search criteria,

14
00:00:25.030 --> 00:00:28.000
let's say vitamin, and I click on search again,

15
00:00:28.000 --> 00:00:29.060
I will get the products relative

16
00:00:29.060 --> 00:00:31.050
to the vitamin search criteria.

17
00:00:31.050 --> 00:00:33.020
And, all of this is a get request.

18
00:00:33.020 --> 00:00:35.040
If you look at the browser URL

19
00:00:35.040 --> 00:00:38.000
the data is going as a query string

20
00:00:38.000 --> 00:00:39.090
that we discussed in a previous video.

21
00:00:39.090 --> 00:00:41.080
So, we're going to implement this entire scenario

22
00:00:41.080 --> 00:00:44.090
for our application and only with a get request.

23
00:00:44.090 --> 00:00:46.030
So, let's get started.

24
00:00:46.030 --> 00:00:47.090
The first thing that we need to notice,

25
00:00:47.090 --> 00:00:49.070
we need to stick to this approach.

26
00:00:49.070 --> 00:00:51.030
We are going to go to HTML.

27
00:00:51.030 --> 00:00:53.060
From there, we will hit a servlet

28
00:00:53.060 --> 00:00:56.010
and from the servlet we are going to call our DAO layer

29
00:00:56.010 --> 00:00:58.050
which is going to interact with our database.

30
00:00:58.050 --> 00:00:59.030
Right.

31
00:00:59.030 --> 00:01:03.000
The other part is, let's come to the code.

32
00:01:03.000 --> 00:01:06.000
Index to HTML is that landing page that we have

33
00:01:06.000 --> 00:01:08.060
and this is that section of search

34
00:01:08.060 --> 00:01:10.090
in which I was trying to enter some search criteria.

35
00:01:10.090 --> 00:01:14.010
That's the input box and that's the submit button.

36
00:01:14.010 --> 00:01:16.090
Now, all of these controls are

37
00:01:16.090 --> 00:01:19.090
inside the form element of your HTML.

38
00:01:19.090 --> 00:01:23.020
So what we are going to do is whenever you enter anything

39
00:01:23.020 --> 00:01:25.070
in this search box and click on the submit button

40
00:01:25.070 --> 00:01:27.050
we are going to submit this form

41
00:01:27.050 --> 00:01:30.070
on the server side via a get request.

42
00:01:30.070 --> 00:01:32.050
That's what we are going to do.

43
00:01:32.050 --> 00:01:33.070
Okay.

44
00:01:33.070 --> 00:01:35.030
Another thing is that when the request goes

45
00:01:35.030 --> 00:01:36.090
to the servlet it is going

46
00:01:36.090 --> 00:01:40.000
to retrieve the products for us against the database

47
00:01:40.000 --> 00:01:42.010
and come back with that product data.

48
00:01:42.010 --> 00:01:44.070
That data is going to be displayed on another page

49
00:01:44.070 --> 00:01:48.030
which is search results dot HTML.

50
00:01:48.030 --> 00:01:51.030
Now, this is the section which displays the products.

51
00:01:51.030 --> 00:01:53.060
Now, let's understand this bit.

52
00:01:53.060 --> 00:01:56.010
This is an HTML file and the product data

53
00:01:56.010 --> 00:01:57.070
that we get from the database is

54
00:01:57.070 --> 00:01:59.030
in the form of Java objects.

55
00:01:59.030 --> 00:02:02.060
Unfortunately, HTML only understands static code.

56
00:02:02.060 --> 00:02:05.090
So, we wouldn't be able to write out the data

57
00:02:05.090 --> 00:02:08.090
out of those Java objects on this page.

58
00:02:08.090 --> 00:02:10.010
So, what we are going to do is

59
00:02:10.010 --> 00:02:12.040
we have already got a template for this page.

60
00:02:12.040 --> 00:02:16.080
In our servlet code, we will read this entire template

61
00:02:16.080 --> 00:02:18.070
as a string.

62
00:02:18.070 --> 00:02:20.090
Now, let's look at this section

63
00:02:20.090 --> 00:02:23.020
which is displaying products.

64
00:02:23.020 --> 00:02:25.050
Each product is going to be signified

65
00:02:25.050 --> 00:02:27.010
by a division element

66
00:02:27.010 --> 00:02:31.000
and each of them has an images and a product name.

67
00:02:31.000 --> 00:02:32.080
If you see, the SRC attribute

68
00:02:32.080 --> 00:02:36.010
of every image has been given a placeholder.

69
00:02:36.010 --> 00:02:38.010
Similarly, the name of the product, also,

70
00:02:38.010 --> 00:02:40.090
has been give another placeholder.

71
00:02:40.090 --> 00:02:42.080
The same thing has been done for the rest

72
00:02:42.080 --> 00:02:44.080
of the two division elements as well.

73
00:02:44.080 --> 00:02:47.070
Additionally, I have one more paragraph attribute

74
00:02:47.070 --> 00:02:49.080
at line number 47 which is going

75
00:02:49.080 --> 00:02:52.000
to display the items in cart for me.

76
00:02:52.000 --> 00:02:53.060
Right now, it is, of course, zero

77
00:02:53.060 --> 00:02:55.090
because I have not added any product to the cart,

78
00:02:55.090 --> 00:02:58.000
but that value is also signified

79
00:02:58.000 --> 00:02:59.070
with the help of a placeholder.

80
00:02:59.070 --> 00:03:02.030
So, the idea here is to read this

81
00:03:02.030 --> 00:03:04.050
entire HTML template as a string.

82
00:03:04.050 --> 00:03:07.010
Then, replace these placeholders

83
00:03:07.010 --> 00:03:11.040
with the respective data values coming from the database.

84
00:03:11.040 --> 00:03:14.010
And then, to drive that entire static string

85
00:03:14.010 --> 00:03:15.040
back to the client.

86
00:03:15.040 --> 00:03:16.090
We will have to adapt this approach

87
00:03:16.090 --> 00:03:20.020
because right now, we do not know what a JSP is.

88
00:03:20.020 --> 00:03:22.040
We don't know how to generate dynamic content.

89
00:03:22.040 --> 00:03:23.050
Right.

90
00:03:23.050 --> 00:03:26.030
So, let's do that.

91
00:03:26.030 --> 00:03:28.080
Now, there are a lot of steps that we need to carry out

92
00:03:28.080 --> 00:03:30.060
so, we want to go one by one.

93
00:03:30.060 --> 00:03:32.050
The first one is we are going to write

94
00:03:32.050 --> 00:03:34.090
a search servlet class with the do get method.

95
00:03:34.090 --> 00:03:37.000
So, let's go to Eclipse.

96
00:03:37.000 --> 00:03:40.040
And, I have the search servlet template ready with me

97
00:03:40.040 --> 00:03:42.030
with the do get method.

98
00:03:42.030 --> 00:03:43.060
There are a lot of statements that we need

99
00:03:43.060 --> 00:03:46.040
to carry out as a part of this use case.

100
00:03:46.040 --> 00:03:47.050
Let's look at them one by one.

101
00:03:47.050 --> 00:03:50.050
The first step will be to collect the search string

102
00:03:50.050 --> 00:03:52.020
which was entered by the user

103
00:03:52.020 --> 00:03:54.090
and pass it to the application DAO class.

104
00:03:54.090 --> 00:03:57.030
What this means is whatever the search criteria

105
00:03:57.030 --> 00:03:58.090
that the user tried to enter into

106
00:03:58.090 --> 00:04:01.040
that text box the first step is to collect

107
00:04:01.040 --> 00:04:04.020
that search criteria inside this method.

108
00:04:04.020 --> 00:04:06.070
Now, we already know how to collect the data

109
00:04:06.070 --> 00:04:08.030
from the request object.

110
00:04:08.030 --> 00:04:10.000
So, we want to go ahead and do that.

111
00:04:10.000 --> 00:04:13.050
Let's say string

112
00:04:13.050 --> 00:04:14.080
search string equal to.

113
00:04:14.080 --> 00:04:16.000
Let's take the request object

114
00:04:16.000 --> 00:04:20.020
and call that get parameter API.

115
00:04:20.020 --> 00:04:22.010
And, feed the name of that element

116
00:04:22.010 --> 00:04:24.050
which is nothing but search.

117
00:04:24.050 --> 00:04:28.010
And, once we do this, we are now going to set up the DAO layer.

118
00:04:28.010 --> 00:04:30.090
The DAO layer is going to be a simple class

119
00:04:30.090 --> 00:04:32.040
which is application DAO.

120
00:04:32.040 --> 00:04:35.010
So, it's already created under the DAO folder in my package.

121
00:04:35.010 --> 00:04:39.000
Now, there's a template for the method that is ready.

122
00:04:39.000 --> 00:04:40.030
We'll talk about this.

123
00:04:40.030 --> 00:04:43.010
But, before that, there are a couple of things.

124
00:04:43.010 --> 00:04:44.050
When you talk about the DAO layer,

125
00:04:44.050 --> 00:04:47.000
it's basically conversing with the database.

126
00:04:47.000 --> 00:04:48.080
In order to talk with the database,

127
00:04:48.080 --> 00:04:50.070
you need a connection to the database

128
00:04:50.070 --> 00:04:53.070
and then you need a method for doing the transaction.

129
00:04:53.070 --> 00:04:56.000
Now, the connection part of that database

130
00:04:56.000 --> 00:05:00.010
is in comparison to this DB connection dot java file.

131
00:05:00.010 --> 00:05:02.000
Now, since this is JDBC code

132
00:05:02.000 --> 00:05:04.040
and it's not directly related to the servlet part,

133
00:05:04.040 --> 00:05:05.080
we've written out that code already

134
00:05:05.080 --> 00:05:08.040
and I'm going to explain that code to you.

135
00:05:08.040 --> 00:05:10.050
The motive of this class is

136
00:05:10.050 --> 00:05:12.040
to get a connection to the database.

137
00:05:12.040 --> 00:05:14.010
We know that in the set of we've

138
00:05:14.010 --> 00:05:17.010
already included the my SQL driver jar file.

139
00:05:17.010 --> 00:05:19.090
So, now we are ready to go ahead and write out this code.

140
00:05:19.090 --> 00:05:22.060
We are first taken a connection reference variable

141
00:05:22.060 --> 00:05:25.080
which is initially set to null value on line number ten.

142
00:05:25.080 --> 00:05:27.070
After that, we have a try-catch block

143
00:05:27.070 --> 00:05:30.010
which is writing out the code to get a connection.

144
00:05:30.010 --> 00:05:32.070
So, let's look at the steps one by one.

145
00:05:32.070 --> 00:05:35.040
Line number 15 is class dot for name

146
00:05:35.040 --> 00:05:37.060
and it specifies the fully qualified class name

147
00:05:37.060 --> 00:05:39.020
of the driver class.

148
00:05:39.020 --> 00:05:42.010
This is to basically load the driver class

149
00:05:42.010 --> 00:05:44.050
into the memory of JBM.

150
00:05:44.050 --> 00:05:46.040
Once that is done, we have a sys out

151
00:05:46.040 --> 00:05:48.070
which is just trying to log something

152
00:05:48.070 --> 00:05:50.070
which is just telling the user

153
00:05:50.070 --> 00:05:52.090
that we have registered the driver class.

154
00:05:52.090 --> 00:05:55.020
The next step on line number 19 is

155
00:05:55.020 --> 00:05:57.000
you get the connection reference

156
00:05:57.000 --> 00:05:59.040
and you consult the driver manager

157
00:05:59.040 --> 00:06:01.070
and call the get connection API.

158
00:06:01.070 --> 00:06:03.010
Now, all of these classes,

159
00:06:03.010 --> 00:06:07.030
please know they're coming from the Java dot SQL package.

160
00:06:07.030 --> 00:06:08.080
So, we want to call this API

161
00:06:08.080 --> 00:06:10.080
and this API demands three arguments.

162
00:06:10.080 --> 00:06:15.010
The first one, as you see, is the database server URL,

163
00:06:15.010 --> 00:06:18.000
that is on which machine is your database

164
00:06:18.000 --> 00:06:19.070
residing the details of that.

165
00:06:19.070 --> 00:06:22.010
So, local host because the application

166
00:06:22.010 --> 00:06:24.080
and the database server both are on the same machine.

167
00:06:24.080 --> 00:06:26.080
Otherwise you would have to embed the IP address

168
00:06:26.080 --> 00:06:28.050
in place of local host.

169
00:06:28.050 --> 00:06:30.070
3306 is the default port on

170
00:06:30.070 --> 00:06:33.010
which my SQL database server runs.

171
00:06:33.010 --> 00:06:34.090
And, hplus is the schema name

172
00:06:34.090 --> 00:06:37.040
that we have decided for our project.

173
00:06:37.040 --> 00:06:40.000
The next two arguments are basically the credentials

174
00:06:40.000 --> 00:06:41.030
to the database.

175
00:06:41.030 --> 00:06:43.040
So, when you feed all this information

176
00:06:43.040 --> 00:06:46.040
to the get connection API of driver manager

177
00:06:46.040 --> 00:06:48.090
that's when you get your connection object.

178
00:06:48.090 --> 00:06:51.050
If anything goes wrong in the class loading

179
00:06:51.050 --> 00:06:54.040
on line number 15, it could possibly throw you

180
00:06:54.040 --> 00:06:56.010
a class not found exception

181
00:06:56.010 --> 00:06:58.090
for which this catch block has been encapsulated.

182
00:06:58.090 --> 00:07:01.050
Anything goes wrong on line number 19

183
00:07:01.050 --> 00:07:03.080
to get the connection from the driver manager

184
00:07:03.080 --> 00:07:05.090
there could be an SQL exception thrown

185
00:07:05.090 --> 00:07:08.080
for which there is another designated catch block.

186
00:07:08.080 --> 00:07:10.030
So, after all of this is done,

187
00:07:10.030 --> 00:07:11.090
we just have to check whether we indeed

188
00:07:11.090 --> 00:07:14.060
got the connection object by making a quick null check

189
00:07:14.060 --> 00:07:16.000
on line number 32.

190
00:07:16.000 --> 00:07:18.010
And, after that, we just return the connection

191
00:07:18.010 --> 00:07:19.080
to the calling method.

192
00:07:19.080 --> 00:07:22.090
So, this class is solely to establish a connection

193
00:07:22.090 --> 00:07:26.030
to the database and return that object to you.

194
00:07:26.030 --> 00:07:27.010
Right.

195
00:07:27.010 --> 00:07:29.030
Now, the DAO class that we have

196
00:07:29.030 --> 00:07:31.090
for our application is application DAO

197
00:07:31.090 --> 00:07:34.050
and inside that, I've already added a method.

198
00:07:34.050 --> 00:07:35.070
So, I'm just going to go to the PPT

199
00:07:35.070 --> 00:07:37.000
and check on the steps.

200
00:07:37.000 --> 00:07:39.050
We have collected the search string entered by the user

201
00:07:39.050 --> 00:07:42.060
and now we want to pass that to the application DAO.

202
00:07:42.060 --> 00:07:45.030
But, in order to pass, we have to add a method

203
00:07:45.030 --> 00:07:48.050
for searching the products in the application DAO class.

204
00:07:48.050 --> 00:07:51.090
So, that method is going to return all the products.

205
00:07:51.090 --> 00:07:55.000
So, we look at this method in the next video.

