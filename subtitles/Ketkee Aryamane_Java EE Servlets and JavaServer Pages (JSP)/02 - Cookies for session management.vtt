WEBVTT
1
00:00:00.050 --> 00:00:01.050
- [Narrator] Now let's understand

2
00:00:01.050 --> 00:00:05.000
how is the session ID exchanged through cookies.

3
00:00:05.000 --> 00:00:07.020
Firstly, what are cookies?

4
00:00:07.020 --> 00:00:09.080
Cookies are small pieces of bits of information

5
00:00:09.080 --> 00:00:12.000
that are stored in the browser software.

6
00:00:12.000 --> 00:00:14.010
They could be information pertaining to the user

7
00:00:14.010 --> 00:00:16.060
or the application, et cetera.

8
00:00:16.060 --> 00:00:18.090
So let's understand how is a session ID generated

9
00:00:18.090 --> 00:00:20.010
and then how is it exchanged

10
00:00:20.010 --> 00:00:24.000
between the client and server via these cookies.

11
00:00:24.000 --> 00:00:27.040
Let's say the client comes in with the first request.

12
00:00:27.040 --> 00:00:30.060
Now the server will understand that is a new user

13
00:00:30.060 --> 00:00:33.020
because it did not receive any session ID

14
00:00:33.020 --> 00:00:34.050
from the client.

15
00:00:34.050 --> 00:00:36.060
So it will generate a new session ID

16
00:00:36.060 --> 00:00:38.040
for this new user.

17
00:00:38.040 --> 00:00:42.020
After that, it creates an object of the cookie class.

18
00:00:42.020 --> 00:00:44.060
Cookie is an API available to you

19
00:00:44.060 --> 00:00:47.000
under the servlet's specification.

20
00:00:47.000 --> 00:00:49.050
Once it creates an instance of the cookie,

21
00:00:49.050 --> 00:00:52.040
the server is going to stuff that session ID

22
00:00:52.040 --> 00:00:54.030
into the cookie object

23
00:00:54.030 --> 00:00:57.010
and write it as a part of the response.

24
00:00:57.010 --> 00:00:59.030
If you recall in one of our previous videos,

25
00:00:59.030 --> 00:01:02.030
when we saw the HTTP servlet response API

26
00:01:02.030 --> 00:01:04.060
we had seen an API call on it

27
00:01:04.060 --> 00:01:07.020
which is called a response.addCookie

28
00:01:07.020 --> 00:01:09.020
which helps you to add a cookie object

29
00:01:09.020 --> 00:01:11.000
as a part of the response.

30
00:01:11.000 --> 00:01:13.020
So that is exactly what the server does,

31
00:01:13.020 --> 00:01:15.040
it writes that entire cookie object stuffed

32
00:01:15.040 --> 00:01:17.080
with the session ID back to response

33
00:01:17.080 --> 00:01:20.040
and the response is sent to the client.

34
00:01:20.040 --> 00:01:24.030
Now let's say the client comes in with another request.

35
00:01:24.030 --> 00:01:27.090
The client while making the request ensures that

36
00:01:27.090 --> 00:01:31.010
the cookie is always going to travel along with the request

37
00:01:31.010 --> 00:01:33.000
so when it reaches the server side,

38
00:01:33.000 --> 00:01:36.030
the server can extract the session ID out of the cookie.

39
00:01:36.030 --> 00:01:39.010
It will match it with one of its already generated IDs

40
00:01:39.010 --> 00:01:44.040
and if it finds one, it recognizes that it is the same user.

41
00:01:44.040 --> 00:01:46.030
Now fortunately for a developer,

42
00:01:46.030 --> 00:01:48.070
you do not have to do this entire tedious process

43
00:01:48.070 --> 00:01:51.010
of the getting the session ID exchanged.

44
00:01:51.010 --> 00:01:53.010
The client and the server are smart enough

45
00:01:53.010 --> 00:01:56.010
to do that exchange between them automatically.

46
00:01:56.010 --> 00:01:58.030
However, for this entire process

47
00:01:58.030 --> 00:02:00.040
to be set up for our application,

48
00:02:00.040 --> 00:02:02.060
we have to write one line of code

49
00:02:02.060 --> 00:02:04.010
which is this:

50
00:02:04.010 --> 00:02:06.010
the entire process is triggered

51
00:02:06.010 --> 00:02:10.060
by using the API call of request.getSession.

52
00:02:10.060 --> 00:02:14.060
This primarily returns you an HTTP session object

53
00:02:14.060 --> 00:02:17.080
and that's exactly where this entire process

54
00:02:17.080 --> 00:02:19.080
is set up by the server.

55
00:02:19.080 --> 00:02:23.060
And thereafter the session ID is going to travel

56
00:02:23.060 --> 00:02:25.010
between the client and the server

57
00:02:25.010 --> 00:02:29.020
back and forth for every subsequent request.

58
00:02:29.020 --> 00:02:31.060
We're going to implement this cookie's demo

59
00:02:31.060 --> 00:02:33.020
in our application.

60
00:02:33.020 --> 00:02:36.050
Let's see the corresponding use case for it.

61
00:02:36.050 --> 00:02:38.050
This is my h+ application.

62
00:02:38.050 --> 00:02:40.020
When I click on the search hyperlink

63
00:02:40.020 --> 00:02:41.060
and search for a product,

64
00:02:41.060 --> 00:02:44.010
and I click on the search button, we've already done this.

65
00:02:44.010 --> 00:02:46.050
We know that the items that are going to get displayed

66
00:02:46.050 --> 00:02:48.080
according to the search criteria.

67
00:02:48.080 --> 00:02:50.000
Now what we are going to do is

68
00:02:50.000 --> 00:02:52.020
we're going to click on this Add to Cart button.

69
00:02:52.020 --> 00:02:53.060
Let me click here.

70
00:02:53.060 --> 00:02:57.020
Do you see that the Items in Cart is now set to one?

71
00:02:57.020 --> 00:02:58.080
Now let me add another product

72
00:02:58.080 --> 00:03:01.040
and Items in Cart is implemented to two.

73
00:03:01.040 --> 00:03:03.050
So basically the same shopping cart's an arrow

74
00:03:03.050 --> 00:03:05.040
that we talked about previously.

75
00:03:05.040 --> 00:03:07.040
That's exactly what we're going to implement

76
00:03:07.040 --> 00:03:09.020
as a part of our application

77
00:03:09.020 --> 00:03:11.090
using session management with cookies

78
00:03:11.090 --> 00:03:13.000
in the next video.

