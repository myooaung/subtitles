WEBVTT
1
00:00:01.000 --> 00:00:02.020
- [Instructor] Now that we have looked at

2
00:00:02.020 --> 00:00:05.060
the JSP Standard actions and the expression language,

3
00:00:05.060 --> 00:00:08.010
let's look at the bigger piece that we have

4
00:00:08.010 --> 00:00:11.050
which is JavaServer Pages Tag Library.

5
00:00:11.050 --> 00:00:15.040
So as the name suggest, it's a library of tags

6
00:00:15.040 --> 00:00:19.000
and it's a huge bundle of tags that can accomplish

7
00:00:19.000 --> 00:00:20.090
the core functionalities of your

8
00:00:20.090 --> 00:00:23.010
web application for your JSP pages.

9
00:00:23.010 --> 00:00:25.030
So as we said earlier, that the JavaServer Pages

10
00:00:25.030 --> 00:00:28.040
are going to be helping us to display data,

11
00:00:28.040 --> 00:00:32.030
to help us to sort and evaluations on the fly.

12
00:00:32.030 --> 00:00:34.010
So all of that is possible with

13
00:00:34.010 --> 00:00:35.080
expression language, of course,

14
00:00:35.080 --> 00:00:38.010
and now there's a bigger bundle of tags that we have,

15
00:00:38.010 --> 00:00:41.090
which is JSTL.

16
00:00:41.090 --> 00:00:44.090
Now this entire set of tags comes bundled up

17
00:00:44.090 --> 00:00:47.090
or encapsulated in a Java archive.

18
00:00:47.090 --> 00:00:52.090
It's a .jar file which is outside the servlet-api.jar

19
00:00:52.090 --> 00:00:56.050
so it has to be externally downloaded

20
00:00:56.050 --> 00:01:00.060
and then you have to add it to the bill part of our project.

21
00:01:00.060 --> 00:01:02.090
And, in one of our previous videos

22
00:01:02.090 --> 00:01:05.080
we are actually talked about directives.

23
00:01:05.080 --> 00:01:07.030
We had talked about the page directive,

24
00:01:07.030 --> 00:01:09.040
the include directive,

25
00:01:09.040 --> 00:01:11.080
and we said that the taglib directive can only be seen

26
00:01:11.080 --> 00:01:15.000
when we come to JavaServer Pages Tag Library.

27
00:01:15.000 --> 00:01:16.080
So now that we are here,

28
00:01:16.080 --> 00:01:18.080
we can now look at that taglib directive

29
00:01:18.080 --> 00:01:23.080
being used on the JSP page for JSTL.

30
00:01:23.080 --> 00:01:29.050
Right, so what are the jobs that this JSTL can do for you?

31
00:01:29.050 --> 00:01:31.040
it can do a lot of stuff.

32
00:01:31.040 --> 00:01:32.040
Let's see what it is.

33
00:01:32.040 --> 00:01:34.040
It can do your display of data.

34
00:01:34.040 --> 00:01:37.040
So, basically navigating through all your Java objects,

35
00:01:37.040 --> 00:01:39.040
through your server site.

36
00:01:39.040 --> 00:01:40.060
It can even do iterations

37
00:01:40.060 --> 00:01:43.050
and put on conditional statements in the code.

38
00:01:43.050 --> 00:01:45.070
If you were to write a conditional statement

39
00:01:45.070 --> 00:01:48.060
with the scriptlet, you would picture in your mind

40
00:01:48.060 --> 00:01:50.020
how it would look like.

41
00:01:50.020 --> 00:01:53.010
If you wanted a for loop or a while loop for that matter,

42
00:01:53.010 --> 00:01:55.010
it's an iteration that you would have to write again

43
00:01:55.010 --> 00:01:56.080
with the scriptlet.

44
00:01:56.080 --> 00:01:59.060
But when it comes to JSTL, it has ready made tags

45
00:01:59.060 --> 00:02:01.080
which will help you with these iterations

46
00:02:01.080 --> 00:02:04.030
and conditional statements.

47
00:02:04.030 --> 00:02:06.000
Now all of this, the display of data,

48
00:02:06.000 --> 00:02:08.090
the basic iteration, conditional statements, et cetera

49
00:02:08.090 --> 00:02:11.080
form the core module of JSTL.

50
00:02:11.080 --> 00:02:14.020
That's the first one.

51
00:02:14.020 --> 00:02:15.080
What else can it do for you?

52
00:02:15.080 --> 00:02:17.020
It can format values.

53
00:02:17.020 --> 00:02:20.050
Let's say I want to go ahead and format the currency

54
00:02:20.050 --> 00:02:22.010
in a particular currency format.

55
00:02:22.010 --> 00:02:23.060
Or maybe let's say I want to format

56
00:02:23.060 --> 00:02:25.070
the date in a particular format.

57
00:02:25.070 --> 00:02:27.070
I can do that with the help of a tag,

58
00:02:27.070 --> 00:02:30.040
just a simple tag on my JSP page.

59
00:02:30.040 --> 00:02:32.090
So, I really don't need to go ahead and manipulate

60
00:02:32.090 --> 00:02:35.040
the date object on my server side

61
00:02:35.040 --> 00:02:36.090
and then get it to my JSP.

62
00:02:36.090 --> 00:02:39.040
Instead, I can just get the date object as is

63
00:02:39.040 --> 00:02:45.030
and format to any format using the JSTL's FMT module.

64
00:02:45.030 --> 00:02:48.050
Moreover, it can also do localization

65
00:02:48.050 --> 00:02:50.030
and internationalization.

66
00:02:50.030 --> 00:02:54.070
Localization is a process of localizing all your labels

67
00:02:54.070 --> 00:02:56.080
and information or error messages

68
00:02:56.080 --> 00:02:59.080
that you display on JSP to a central file.

69
00:02:59.080 --> 00:03:02.050
You do not want to go ahead and hard code all these messages

70
00:03:02.050 --> 00:03:05.070
and labels in all your JSP pages.

71
00:03:05.070 --> 00:03:08.020
Instead, you can store them at a central place

72
00:03:08.020 --> 00:03:10.030
so that even if they have a change tomorrow,

73
00:03:10.030 --> 00:03:12.000
you just have to change at one place

74
00:03:12.000 --> 00:03:14.080
and they will get reflected in all the other.

75
00:03:14.080 --> 00:03:17.050
Right, internationalization on the other hand

76
00:03:17.050 --> 00:03:20.040
is a concept where you make your application available

77
00:03:20.040 --> 00:03:22.060
in various locales.

78
00:03:22.060 --> 00:03:23.070
So, locale is a language.

79
00:03:23.070 --> 00:03:26.080
So let's say I want to build the H plus port application

80
00:03:26.080 --> 00:03:30.080
for German, for French, so I can do that

81
00:03:30.080 --> 00:03:34.050
using the internationalization concept.

82
00:03:34.050 --> 00:03:37.080
The third module of JSTL is the XML module,

83
00:03:37.080 --> 00:03:39.090
so if you have any kind of requirement

84
00:03:39.090 --> 00:03:42.070
where you want to parse or manipulate

85
00:03:42.070 --> 00:03:44.010
an XML document on a JSP page

86
00:03:44.010 --> 00:03:47.010
then you can do that with the help of XML module.

87
00:03:47.010 --> 00:03:49.070
And then lastly we have the SQL module

88
00:03:49.070 --> 00:03:51.050
which is going to help you query

89
00:03:51.050 --> 00:03:53.090
or do any kind of transaction with SQL

90
00:03:53.090 --> 00:03:56.010
right there on your JSP page.

91
00:03:56.010 --> 00:03:58.000
But, as we said, the Java server pages

92
00:03:58.000 --> 00:04:01.000
are solely used for the purpose of display

93
00:04:01.000 --> 00:04:02.060
so they should not be really involved

94
00:04:02.060 --> 00:04:05.080
in any kind of business logic or database interaction

95
00:04:05.080 --> 00:04:07.070
and that's exactly why this SQL module

96
00:04:07.070 --> 00:04:11.060
is not really used in JSPs today.

97
00:04:11.060 --> 00:04:13.090
Yeah, so let's quickly look at the Syntax now.

98
00:04:13.090 --> 00:04:15.080
If you're talking with the Core Module,

99
00:04:15.080 --> 00:04:17.030
we are going to have the syntax

100
00:04:17.030 --> 00:04:19.030
with the zen angle bracket.

101
00:04:19.030 --> 00:04:20.080
And then this keyword called c,

102
00:04:20.080 --> 00:04:23.000
then a colon followed by the name of the tag.

103
00:04:23.000 --> 00:04:24.090
So the c is basically the prefix

104
00:04:24.090 --> 00:04:26.050
identifying that module

105
00:04:26.050 --> 00:04:28.000
and what follows is a tag

106
00:04:28.000 --> 00:04:30.020
that you have picked up from that module.

107
00:04:30.020 --> 00:04:32.080
So, similar to that, you have the XML module

108
00:04:32.080 --> 00:04:34.080
which will help you to pick up a tag

109
00:04:34.080 --> 00:04:37.080
from the XML module of JSTL.

110
00:04:37.080 --> 00:04:39.050
And then you have the SQL module.

111
00:04:39.050 --> 00:04:42.080
The prefix for that is sql followed by the name of the tag.

112
00:04:42.080 --> 00:04:46.000
And then we have the FMT module, formatting module

113
00:04:46.000 --> 00:04:48.080
which is going to go ahead and have the prefix of fmt

114
00:04:48.080 --> 00:04:51.070
followed by the name of the tag.

115
00:04:51.070 --> 00:04:53.030
Now, if you want to use these four modules

116
00:04:53.030 --> 00:04:54.080
on your JSP pages,

117
00:04:54.080 --> 00:04:58.010
you will have to include them independently,

118
00:04:58.010 --> 00:05:00.000
each one of them separately.

119
00:05:00.000 --> 00:05:02.020
And this declaration, or this inclusion

120
00:05:02.020 --> 00:05:03.080
that we are talking about

121
00:05:03.080 --> 00:05:07.090
will take place with the help of the taglib directive.

122
00:05:07.090 --> 00:05:10.080
So we will look at that anyway as a part of our demo,

123
00:05:10.080 --> 00:05:15.050
but this is just to make sure that you know it beforehand.

124
00:05:15.050 --> 00:05:18.050
And yes, JSTL is completely aligned

125
00:05:18.050 --> 00:05:21.030
to the Unified Expression Language,

126
00:05:21.030 --> 00:05:24.060
so in one of the previous videos we had taken a look

127
00:05:24.060 --> 00:05:26.060
at Unified Expression Language

128
00:05:26.060 --> 00:05:29.040
which is a combination of the expression languages

129
00:05:29.040 --> 00:05:34.010
used by Java server faces and Java server pages.

130
00:05:34.010 --> 00:05:37.040
Right, so that's a mix, and that's exactly JSP 2.1.

131
00:05:37.040 --> 00:05:40.020
And this JSTL library that we are talking about

132
00:05:40.020 --> 00:05:43.010
is aligned to this Unified Expression Language

133
00:05:43.010 --> 00:05:46.030
which is why you can actually use this Core module

134
00:05:46.030 --> 00:05:50.000
in Java server faces components or pages as well.

