WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Woman] Now let us understand the concept

2
00:00:02.000 --> 00:00:05.000
of forwarding in servlets specification.

3
00:00:05.000 --> 00:00:07.070
All of the demos that we have implemented so far

4
00:00:07.070 --> 00:00:09.040
follow this flow.

5
00:00:09.040 --> 00:00:11.030
There's a requested ghost from the client

6
00:00:11.030 --> 00:00:13.050
to the servlet, the servlet will extract

7
00:00:13.050 --> 00:00:16.030
the request data, bundle it up in objects,

8
00:00:16.030 --> 00:00:17.090
and call the dao.

9
00:00:17.090 --> 00:00:20.050
The dao then talks to the database and returns

10
00:00:20.050 --> 00:00:22.030
the data in the sublet.

11
00:00:22.030 --> 00:00:24.060
The sublets are then going to prepared the response

12
00:00:24.060 --> 00:00:27.010
and give it back to the client, which in turn,

13
00:00:27.010 --> 00:00:29.020
is going to display it.

14
00:00:29.020 --> 00:00:31.050
Now in this entire process, we have actually asked

15
00:00:31.050 --> 00:00:33.070
the servlet to write the response back.

16
00:00:33.070 --> 00:00:36.040
Often in a web application, all the requests

17
00:00:36.040 --> 00:00:39.040
processing capability is never encapsulated

18
00:00:39.040 --> 00:00:41.060
into a single servlet.

19
00:00:41.060 --> 00:00:43.080
You often need to split up the functionality

20
00:00:43.080 --> 00:00:46.030
across multiple servlets to make the code

21
00:00:46.030 --> 00:00:49.010
more modular and maintainable.

22
00:00:49.010 --> 00:00:51.050
In that case it is necessary to understand

23
00:00:51.050 --> 00:00:53.090
how do you forward the control of the request

24
00:00:53.090 --> 00:00:56.040
from one servlet to another?

25
00:00:56.040 --> 00:00:58.040
Even in cases where the servlet is trying to

26
00:00:58.040 --> 00:01:00.060
ready the response and give it back to the client,

27
00:01:00.060 --> 00:01:02.090
we need to understand how do you forward the control

28
00:01:02.090 --> 00:01:06.020
from the servlet to let's say a JSP file.

29
00:01:06.020 --> 00:01:08.090
So far, we've not seen any JSP files, we always deal

30
00:01:08.090 --> 00:01:11.060
with HTML's, but that's definitely a need that's

31
00:01:11.060 --> 00:01:13.040
coming up in future.

32
00:01:13.040 --> 00:01:15.030
So let's look at this diagram.

33
00:01:15.030 --> 00:01:18.050
Whenever the user hits a request, it goes to your

34
00:01:18.050 --> 00:01:19.090
application context.

35
00:01:19.090 --> 00:01:22.020
Let's say that this requests functionality

36
00:01:22.020 --> 00:01:25.010
is split across servlet.

37
00:01:25.010 --> 00:01:27.010
So the request comes to the first servlet and

38
00:01:27.010 --> 00:01:30.010
when the servlet does what it is supposed to do,

39
00:01:30.010 --> 00:01:33.080
the request can be forwarded to the other servlet.

40
00:01:33.080 --> 00:01:36.050
Not only this, in some cases the servlet can

41
00:01:36.050 --> 00:01:38.060
also forward the entire request control

42
00:01:38.060 --> 00:01:41.000
to another JSP.

43
00:01:41.000 --> 00:01:44.010
Now be it a servlet or a JSP, they are all resources

44
00:01:44.010 --> 00:01:45.040
of the application.

45
00:01:45.040 --> 00:01:47.080
So this process by which you can forward the

46
00:01:47.080 --> 00:01:50.040
request control from one servlet to another

47
00:01:50.040 --> 00:01:53.050
servlet or from one servlet to another JSP

48
00:01:53.050 --> 00:01:56.040
is exactly the concept of forwarding under the servlets

49
00:01:56.040 --> 00:01:57.080
API.

50
00:01:57.080 --> 00:02:01.030
Now let us look at a use case in our application.

51
00:02:01.030 --> 00:02:03.020
What we are going to do now is, we are going to make

52
00:02:03.020 --> 00:02:05.080
this login link functional.

53
00:02:05.080 --> 00:02:09.070
For this, I have already got the login.jsp file

54
00:02:09.070 --> 00:02:12.050
ready with me in my HTML folder.

55
00:02:12.050 --> 00:02:14.080
Of course, right now it doesn't have any capabilities

56
00:02:14.080 --> 00:02:19.020
of JSP, but I have just renamed it to a .JSP file.

57
00:02:19.020 --> 00:02:23.060
This is that index.html, which has got the login link.

58
00:02:23.060 --> 00:02:25.070
If I want to make that login link functional,

59
00:02:25.070 --> 00:02:29.050
I can access that login JSP from here as a static resource.

60
00:02:29.050 --> 00:02:30.060
How do I do that?

61
00:02:30.060 --> 00:02:34.050
I just have to go ahead and embed the bot of that JSP

62
00:02:34.050 --> 00:02:38.070
right out here, on line number 21.

63
00:02:38.070 --> 00:02:42.060
Now, let's also go to login.jsp and take a look at it.

64
00:02:42.060 --> 00:02:44.060
So it has got a header, it has got some details,

65
00:02:44.060 --> 00:02:45.080
and a footer.

66
00:02:45.080 --> 00:02:48.000
If you look at the resources that it has accessed,

67
00:02:48.000 --> 00:02:50.010
for example, on line number seven, it is accessing

68
00:02:50.010 --> 00:02:53.090
the CSS, on line number 17, it's accessing some image,

69
00:02:53.090 --> 00:02:57.090
these spots that you see are the bots as for the

70
00:02:57.090 --> 00:03:00.050
war structure that we've seen previously.

71
00:03:00.050 --> 00:03:02.050
But now, in order to make this demo work,

72
00:03:02.050 --> 00:03:04.060
I'm going to access these resources as well

73
00:03:04.060 --> 00:03:06.020
in a static fashion.

74
00:03:06.020 --> 00:03:08.020
So that's how I do it.

75
00:03:08.020 --> 00:03:12.000
So let me get those bot changes on line number seven,

76
00:03:12.000 --> 00:03:14.090
line number 17, and down there where you have the footer

77
00:03:14.090 --> 00:03:18.000
on line number 59.

78
00:03:18.000 --> 00:03:20.020
Now let's go ahead and run this application

79
00:03:20.020 --> 00:03:22.000
and see whether our changes work correctly,

80
00:03:22.000 --> 00:03:25.060
so I'm going to run this project.

81
00:03:25.060 --> 00:03:30.040
Let's take this and go to our browser.

82
00:03:30.040 --> 00:03:31.080
And run this.

83
00:03:31.080 --> 00:03:34.030
Now when I click on login, do you see that I

84
00:03:34.030 --> 00:03:36.000
reached the login.jsp file?

85
00:03:36.000 --> 00:03:39.040
I accessed the login.jsp as a static resource.

86
00:03:39.040 --> 00:03:41.060
Now please take a look at the URL.

87
00:03:41.060 --> 00:03:44.010
If you observe the URL you'll see that the folder

88
00:03:44.010 --> 00:03:48.000
details of login.jsp are visible out there.

89
00:03:48.000 --> 00:03:50.000
This is not a very wise thing to do,

90
00:03:50.000 --> 00:03:52.070
because we wouldn't want to reveal the implementation

91
00:03:52.070 --> 00:03:55.080
details like that to the end customers.

92
00:03:55.080 --> 00:03:59.050
Now, this entire scenario that we did right now,

93
00:03:59.050 --> 00:04:03.090
I'm going to implement using our forwarding concept.

94
00:04:03.090 --> 00:04:06.020
What we are going to do is, when I click on the login

95
00:04:06.020 --> 00:04:09.040
link, I'm going to reach a login servlet, and from the

96
00:04:09.040 --> 00:04:13.050
login servlet, I will go over to the login JSP.

97
00:04:13.050 --> 00:04:15.000
So let's work that out.

98
00:04:15.000 --> 00:04:18.030
Now, in order to do the forwarding, you need an API,

99
00:04:18.030 --> 00:04:20.030
which is RequestDispatcher.

100
00:04:20.030 --> 00:04:22.070
As the name suggests, it is going to dispatch

101
00:04:22.070 --> 00:04:26.030
your request to another resource of the application.

102
00:04:26.030 --> 00:04:29.020
You need to get the RequestDispatcher API

103
00:04:29.020 --> 00:04:31.090
on the HTTPServletRequest object.

104
00:04:31.090 --> 00:04:33.080
So let's get started with this demo.

105
00:04:33.080 --> 00:04:35.060
I'm going to open my eclipse.

106
00:04:35.060 --> 00:04:38.090
I have the login servlet ready with me,

107
00:04:38.090 --> 00:04:42.020
which extends HttpServlet, and it has been annotated

108
00:04:42.020 --> 00:04:44.050
with the URL pattern of login.

109
00:04:44.050 --> 00:04:47.050
There's a doGet material on line number 15, and the

110
00:04:47.050 --> 00:04:51.040
sole object of this meter is to reach that login JSP.

111
00:04:51.040 --> 00:04:54.090
For that, I'm going to need the RequestDispatcher API.

112
00:04:54.090 --> 00:05:00.060
So on line number 17, I'm going to take a reference of it.

113
00:05:00.060 --> 00:05:03.080
I can opt in the object for this on the request object,

114
00:05:03.080 --> 00:05:06.090
but in working in API called getRequestDispatcher,

115
00:05:06.090 --> 00:05:10.060
and this will demand the part of that resource

116
00:05:10.060 --> 00:05:12.020
where you want to go to.

117
00:05:12.020 --> 00:05:15.050
(typing noises)

118
00:05:15.050 --> 00:05:17.080
Once this is done, the next step will be

119
00:05:17.080 --> 00:05:22.000
to call the RequestDispatcher.forward API to hand over

120
00:05:22.000 --> 00:05:24.050
the request control to another resource.

121
00:05:24.050 --> 00:05:27.030
So just getting the dispatcher reference would not be

122
00:05:27.030 --> 00:05:29.090
enough, what we essentially have to do is

123
00:05:29.090 --> 00:05:32.010
on the next line, which is line number 18,

124
00:05:32.010 --> 00:05:34.050
I'm just going to invoke an API called forward,

125
00:05:34.050 --> 00:05:38.020
and pass the request and response objects along with it.

126
00:05:38.020 --> 00:05:39.070
This is forwarding.

127
00:05:39.070 --> 00:05:42.080
You are in the login Servlet, but you're using

128
00:05:42.080 --> 00:05:45.050
the RequestDispatcher to forward the control

129
00:05:45.050 --> 00:05:48.050
to the login.jsp file.

130
00:05:48.050 --> 00:05:51.020
So a question may float in the mind here as to why

131
00:05:51.020 --> 00:05:53.090
are we including the request and response objects

132
00:05:53.090 --> 00:05:55.080
when we forward the call?

133
00:05:55.080 --> 00:05:58.010
That's because, let's say the current resource

134
00:05:58.010 --> 00:06:00.050
wants to utilize request and response,

135
00:06:00.050 --> 00:06:02.080
the other resource where you're forwarding to,

136
00:06:02.080 --> 00:06:05.090
that may also need to use both of these objects

137
00:06:05.090 --> 00:06:08.030
for let's say extracting the request data,

138
00:06:08.030 --> 00:06:10.060
writing some more response, etc.

139
00:06:10.060 --> 00:06:13.070
So even if this login servlet was not doing anything

140
00:06:13.070 --> 00:06:16.050
with these objects, the next resource in line would

141
00:06:16.050 --> 00:06:18.010
definitely need these.

142
00:06:18.010 --> 00:06:21.070
That's exactly why the specification itself dictates

143
00:06:21.070 --> 00:06:23.040
that whenever you forward the control

144
00:06:23.040 --> 00:06:26.000
to another resource, make sure that the requested

145
00:06:26.000 --> 00:06:29.010
response objects always go along.

146
00:06:29.010 --> 00:06:32.050
Now let's come in index.html, get rid of the

147
00:06:32.050 --> 00:06:35.080
static access of this, and embed the URL pattern

148
00:06:35.080 --> 00:06:38.020
of that servlet, so that when we click here,

149
00:06:38.020 --> 00:06:40.010
it takes us to the servlet.

150
00:06:40.010 --> 00:06:43.020
On the login.jsp also, I need to stop accessing

151
00:06:43.020 --> 00:06:45.050
these resources in a static fashion.

152
00:06:45.050 --> 00:06:47.040
So let's do those changes.

153
00:06:47.040 --> 00:06:52.040
This is line number 17, and that's line number seven.

154
00:06:52.040 --> 00:06:54.070
So I'm going to go back to my previous changes.

155
00:06:54.070 --> 00:06:57.020
Once this is done, let me now deploy the project

156
00:06:57.020 --> 00:07:03.030
again and check the changes.

157
00:07:03.030 --> 00:07:05.030
Now when I click on this login hyperlink,

158
00:07:05.030 --> 00:07:06.080
let's see what happens.

159
00:07:06.080 --> 00:07:10.030
Yes, I indeed reach the login.jsp file, but take a look

160
00:07:10.030 --> 00:07:11.070
at the URL.

161
00:07:11.070 --> 00:07:14.080
The URL only shows the login URL pattern,

162
00:07:14.080 --> 00:07:17.020
and that's exactly why we are safe now.

163
00:07:17.020 --> 00:07:20.030
It is not revealing any kind of implementation details

164
00:07:20.030 --> 00:07:21.070
in the URL.

165
00:07:21.070 --> 00:07:24.020
This exactly is the concept of forwarding.

166
00:07:24.020 --> 00:07:26.020
There are a couple of other things in this.

167
00:07:26.020 --> 00:07:29.030
There's another API called RequestDispatcher.include

168
00:07:29.030 --> 00:07:30.060
that you can use.

169
00:07:30.060 --> 00:07:34.020
Let's go back to our servlet and examine how to do this.

170
00:07:34.020 --> 00:07:37.000
You are in the servlet, and on line number 19,

171
00:07:37.000 --> 00:07:41.040
instead of forward, I am now going to call the include API.

172
00:07:41.040 --> 00:07:44.000
What it essentially does is, it is going to combine

173
00:07:44.000 --> 00:07:47.070
the response of this login servlet and the response

174
00:07:47.070 --> 00:07:52.080
of this login.jsp file together and render it to the client.

175
00:07:52.080 --> 00:07:55.080
In order to do this demo, just for the demo purposes,

176
00:07:55.080 --> 00:07:57.080
I'm going to construct a small response

177
00:07:57.080 --> 00:07:59.040
inside login servlet.

178
00:07:59.040 --> 00:08:02.030
On line number 18, I'm just constructing a very small

179
00:08:02.030 --> 00:08:08.090
HTML.

180
00:08:08.090 --> 00:08:14.010
And under that HTML, let's write out a simple H3 tag,

181
00:08:14.010 --> 00:08:18.060
which will display a message stating please login.

182
00:08:18.060 --> 00:08:23.040
Let me end the H3 tag, and this string is ready with us.

183
00:08:23.040 --> 00:08:27.020
Now we just need to get the writer object and invoke

184
00:08:27.020 --> 00:08:33.030
the right API and stuff that HTML response inside that call.

185
00:08:33.030 --> 00:08:35.060
So now, what is going to happen is

186
00:08:35.060 --> 00:08:37.080
that this response, which is written out of the login

187
00:08:37.080 --> 00:08:41.060
servlet, and whatever happens as a part of login JSP,

188
00:08:41.060 --> 00:08:44.020
it's going to combine together, and it's going

189
00:08:44.020 --> 00:08:46.000
to get rendered to the client.

190
00:08:46.000 --> 00:08:49.020
So let's check the changes for this.

191
00:08:49.020 --> 00:08:53.020
So now let's say I click on the login hyperlink.

192
00:08:53.020 --> 00:08:54.050
Do you see what happened?

193
00:08:54.050 --> 00:08:57.030
I got a message at the top, which is please login,

194
00:08:57.030 --> 00:08:59.080
which is the response coming out of the login servlet,

195
00:08:59.080 --> 00:09:03.010
and I also got the entire login JSP rendered

196
00:09:03.010 --> 00:09:05.040
to the client, so this is a combination of response,

197
00:09:05.040 --> 00:09:10.090
which is possible with the help of the include API.

198
00:09:10.090 --> 00:09:12.060
So this is how RequestDispatcher works.

199
00:09:12.060 --> 00:09:14.040
It's basically used to forward the control

200
00:09:14.040 --> 00:09:17.030
from one resource to another resource, but do not forget

201
00:09:17.030 --> 00:09:20.020
it is inside the same application.

202
00:09:20.020 --> 00:09:23.080
And in this entire process, the browser will play no part.

203
00:09:23.080 --> 00:09:27.000
Entirely, it's managed by the server site.

204
00:09:27.000 --> 00:09:30.040
This approach is very commonly used in a framework

205
00:09:30.040 --> 00:09:32.080
called Struts, where whenever you click on

206
00:09:32.080 --> 00:09:35.040
a hyperlink, you always go to an action class

207
00:09:35.040 --> 00:09:37.070
and from the action class, the request is dispatched

208
00:09:37.070 --> 00:09:39.020
to a JSP.

209
00:09:39.020 --> 00:09:42.030
That way, we are always safe, and we never reveal any

210
00:09:42.030 --> 00:09:45.000
of our folder details in the URL.

