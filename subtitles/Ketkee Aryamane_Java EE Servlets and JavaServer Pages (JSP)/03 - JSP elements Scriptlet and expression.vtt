WEBVTT
1
00:00:00.000 --> 00:00:03.090
- [Instructor] Let us now take a look at how are we going

2
00:00:03.090 --> 00:00:07.030
to use scriptlet and expression element on a JSP.

3
00:00:07.030 --> 00:00:09.030
If you remember our search use case,

4
00:00:09.030 --> 00:00:11.050
this was the search results page

5
00:00:11.050 --> 00:00:13.040
which was trying to display all the products

6
00:00:13.040 --> 00:00:15.000
in a static fashion.

7
00:00:15.000 --> 00:00:17.080
Every division element represented on product

8
00:00:17.080 --> 00:00:21.000
and we had the SRC attribute and the name attribute

9
00:00:21.000 --> 00:00:24.000
of the image as placeholders which we were trying

10
00:00:24.000 --> 00:00:27.020
to replace with the data in the servlet code.

11
00:00:27.020 --> 00:00:29.050
So, basically, we were trying to deal

12
00:00:29.050 --> 00:00:32.000
very hard with this HTML file.

13
00:00:32.000 --> 00:00:33.050
What we are going to do now

14
00:00:33.050 --> 00:00:36.080
is we will transform this HTML into a JSP

15
00:00:36.080 --> 00:00:38.080
and make sure that the product data that you want

16
00:00:38.080 --> 00:00:42.030
to display on the page gets generated dynamically

17
00:00:42.030 --> 00:00:45.030
through the scriptlet and expression elements.

18
00:00:45.030 --> 00:00:46.040
So, let's get started on it.

19
00:00:46.040 --> 00:00:48.050
The first thing that we have to do is

20
00:00:48.050 --> 00:00:52.010
we have to convert this HTML file into a JSP.

21
00:00:52.010 --> 00:00:55.000
It's going to be as simple as renaming it

22
00:00:55.000 --> 00:00:59.040
and changing this extension to .jsp.

23
00:00:59.040 --> 00:01:00.060
Right.

24
00:01:00.060 --> 00:01:02.070
Now, there's another thing that we need to do.

25
00:01:02.070 --> 00:01:04.050
Let's go to the SearchServlet.

26
00:01:04.050 --> 00:01:07.030
If you remember, on lines number 34 and 35,

27
00:01:07.030 --> 00:01:09.020
those are the places where we were trying

28
00:01:09.020 --> 00:01:12.020
to read their HTML, replace placeholders,

29
00:01:12.020 --> 00:01:14.080
and write again the entire string back to the client.

30
00:01:14.080 --> 00:01:16.040
So, we are no longer going to do that.

31
00:01:16.040 --> 00:01:18.010
I'm going to command out this code.

32
00:01:18.010 --> 00:01:20.040
Instead, we are going to do a couple of things.

33
00:01:20.040 --> 00:01:24.010
The first one is the products that you obtained

34
00:01:24.010 --> 00:01:26.060
from the DAO layer on line number 31,

35
00:01:26.060 --> 00:01:29.030
we're going to take the entire products object

36
00:01:29.030 --> 00:01:33.020
and store it in the request scope as an attribute.

37
00:01:33.020 --> 00:01:36.030
We've already known in one of our previous videos

38
00:01:36.030 --> 00:01:38.060
as to how can you store information

39
00:01:38.060 --> 00:01:41.050
in the form of attributes in request code.

40
00:01:41.050 --> 00:01:43.050
So, we now want to do the demo here.

41
00:01:43.050 --> 00:01:46.050
So, on line number 36, I'm just going to grab

42
00:01:46.050 --> 00:01:48.000
that request object

43
00:01:48.000 --> 00:01:51.030
and invoke that API of setAttribute.

44
00:01:51.030 --> 00:01:53.050
Now, this is going to demand information

45
00:01:53.050 --> 00:01:54.080
in the form of a key in value

46
00:01:54.080 --> 00:01:56.090
so, I'm going to give a key.

47
00:01:56.090 --> 00:01:58.070
Names, of course, your choice

48
00:01:58.070 --> 00:02:01.040
and the value will be this entire real list object

49
00:02:01.040 --> 00:02:04.020
that I want so that it's available

50
00:02:04.020 --> 00:02:06.060
to me on my JSP.

51
00:02:06.060 --> 00:02:09.010
Once I do this, the next thing that I have to do

52
00:02:09.010 --> 00:02:13.070
is forward the control to the searchResults.JSP.

53
00:02:13.070 --> 00:02:15.070
Now, you see how things are changing.

54
00:02:15.070 --> 00:02:17.070
The last time we did the search use case demo

55
00:02:17.070 --> 00:02:19.050
we had to read that file and all of that.

56
00:02:19.050 --> 00:02:22.040
Now, it becomes so simple with a JSP.

57
00:02:22.040 --> 00:02:24.090
Now, you just need to take the request control

58
00:02:24.090 --> 00:02:27.050
to the JSP page and then, we go ahead

59
00:02:27.050 --> 00:02:29.010
and start coding on JSP.

60
00:02:29.010 --> 00:02:29.090
So, let's do that.

61
00:02:29.090 --> 00:02:31.060
Let's grab the request object.

62
00:02:31.060 --> 00:02:35.040
Let's get the requestDispatcher API.

63
00:02:35.040 --> 00:02:43.050
Let's feed the path of searchResults.JSP

64
00:02:43.050 --> 00:02:46.050
and let's quickly invoke the forward API,

65
00:02:46.050 --> 00:02:49.000
pass on the request and the response objects

66
00:02:49.000 --> 00:02:50.050
and we are done.

67
00:02:50.050 --> 00:02:53.040
So, now, from the SearchServlet,

68
00:02:53.040 --> 00:02:55.060
we are going to go to the searchResults.JSP

69
00:02:55.060 --> 00:02:58.020
where we are going to fetch this products data

70
00:02:58.020 --> 00:03:02.090
and generate that product data dynamically on the page.

71
00:03:02.090 --> 00:03:06.070
Now, please note, since you've started making JSP pages

72
00:03:06.070 --> 00:03:10.030
you could put all the JSP pages in a JSP folder

73
00:03:10.030 --> 00:03:12.020
instead of an HTML folder.

74
00:03:12.020 --> 00:03:13.060
However, it really doesn't matter.

75
00:03:13.060 --> 00:03:16.060
You can still stick to the same HTML folder.

76
00:03:16.060 --> 00:03:19.080
So now, let's go to searchResults.JSP

77
00:03:19.080 --> 00:03:22.000
and, if you see, on line number 51

78
00:03:22.000 --> 00:03:23.040
I've already put a command.

79
00:03:23.040 --> 00:03:24.060
This is the place that we are going

80
00:03:24.060 --> 00:03:27.080
to start off with writing the scriptlet and expression code.

81
00:03:27.080 --> 00:03:29.060
What we need to do is we need

82
00:03:29.060 --> 00:03:31.020
to first get that product's data.

83
00:03:31.020 --> 00:03:33.040
Okay, so on line number 52, I'm going

84
00:03:33.040 --> 00:03:35.020
to open a scriptlet element

85
00:03:35.020 --> 00:03:37.040
which is going to look like this.

86
00:03:37.040 --> 00:03:38.070
Right.

87
00:03:38.070 --> 00:03:40.050
And, of course, this will indicate

88
00:03:40.050 --> 00:03:42.010
that you're closing the script reader image.

89
00:03:42.010 --> 00:03:44.040
So now, inside this element, we are going

90
00:03:44.040 --> 00:03:46.090
to write those Java statements.

91
00:03:46.090 --> 00:03:49.000
On line number 53, the first thing

92
00:03:49.000 --> 00:03:51.050
that I'm going to do is get that product's

93
00:03:51.050 --> 00:03:54.040
a real list object from the request scope.

94
00:03:54.040 --> 00:03:55.020
So, let's do that.

95
00:03:55.020 --> 00:03:57.040
Let's say List,

96
00:03:57.040 --> 00:03:59.070
and I'm also going to use the generex feature of Java,

97
00:03:59.070 --> 00:04:01.050
List of products.

98
00:04:01.050 --> 00:04:04.060
So, let's take a reference for that.

99
00:04:04.060 --> 00:04:07.010
And, you're going to get it through the request objects.

100
00:04:07.010 --> 00:04:12.070
I'm going to say request.getAttribute

101
00:04:12.070 --> 00:04:14.080
and I'm going to feed the key of the attribute,

102
00:04:14.080 --> 00:04:17.090
the key was products.

103
00:04:17.090 --> 00:04:20.010
Now, there are a couple of things to note here.

104
00:04:20.010 --> 00:04:24.060
The first thing is we accessed this request object.

105
00:04:24.060 --> 00:04:26.000
Now, where did this come from?

106
00:04:26.000 --> 00:04:30.060
Request is an implicit object on JSP.

107
00:04:30.060 --> 00:04:32.040
When I say implicit, it means it is going

108
00:04:32.040 --> 00:04:36.030
to be available by default on every JSP page.

109
00:04:36.030 --> 00:04:37.070
You don't need to create it.

110
00:04:37.070 --> 00:04:40.020
It's already created and available to you.

111
00:04:40.020 --> 00:04:43.050
And, this request object is the same one

112
00:04:43.050 --> 00:04:47.050
that the SearchServlet passed to us in the forward call.

113
00:04:47.050 --> 00:04:49.060
So, basically, getting this request object

114
00:04:49.060 --> 00:04:51.050
and now further trying to fetch data

115
00:04:51.050 --> 00:04:53.040
out of it and manipulate it.

116
00:04:53.040 --> 00:04:54.090
So, let's go back there.

117
00:04:54.090 --> 00:04:56.060
The other thing to note is

118
00:04:56.060 --> 00:04:58.040
whatever is returned out of the

119
00:04:58.040 --> 00:05:01.040
request.getAttribute API call is always something

120
00:05:01.040 --> 00:05:02.060
of the object type.

121
00:05:02.060 --> 00:05:05.030
Object is the top paid in class in Java.

122
00:05:05.030 --> 00:05:08.010
So, we need to cast this to the proper type

123
00:05:08.010 --> 00:05:13.010
and I'm going to do that right here.

124
00:05:13.010 --> 00:05:14.000
Right.

125
00:05:14.000 --> 00:05:17.030
Once this is done, let's now start an iterator

126
00:05:17.030 --> 00:05:18.030
for this products.

127
00:05:18.030 --> 00:05:19.010
So, what we are going to do is

128
00:05:19.010 --> 00:05:20.080
we are going to iterate this list,

129
00:05:20.080 --> 00:05:22.090
we are going to fetch every element of this list,

130
00:05:22.090 --> 00:05:25.040
and then, generate this entire form

131
00:05:25.040 --> 00:05:27.080
and division element for each product.

132
00:05:27.080 --> 00:05:29.000
So, let's do that.

133
00:05:29.000 --> 00:05:34.060
I'm going to go and say iterator.

134
00:05:34.060 --> 00:05:36.090
And, we use the generex syntax again

135
00:05:36.090 --> 00:05:40.030
so iterator for products is equal

136
00:05:40.030 --> 00:05:44.080
to products and call the iterator API on it.

137
00:05:44.080 --> 00:05:47.090
Then, let's start a while loop.

138
00:05:47.090 --> 00:05:52.000
And, let's say while iterator.hasNext.

139
00:05:52.000 --> 00:05:55.070
You're going to take each element of that product

140
00:05:55.070 --> 00:05:59.070
into a product reference.

141
00:05:59.070 --> 00:06:01.000
And, that's going to be available

142
00:06:01.000 --> 00:06:03.040
through the iterator.next call.

143
00:06:03.040 --> 00:06:04.050
Now, understand this.

144
00:06:04.050 --> 00:06:07.070
On line number 60, we have already taken the product object

145
00:06:07.070 --> 00:06:09.070
from that list.

146
00:06:09.070 --> 00:06:12.030
Now, for each of these products,

147
00:06:12.030 --> 00:06:16.000
we need to generate this entire element.

148
00:06:16.000 --> 00:06:17.000
So, what we are going to do is

149
00:06:17.000 --> 00:06:21.060
we're going to take this and copy it from line number 61.

150
00:06:21.060 --> 00:06:26.000
But, please understand, this is HTML code

151
00:06:26.000 --> 00:06:29.030
and we cannot write it inside the scriptlet element

152
00:06:29.030 --> 00:06:31.080
which essentially means that I will have

153
00:06:31.080 --> 00:06:34.090
to close the scriptlet right at this point,

154
00:06:34.090 --> 00:06:37.030
then again write this HTML code,

155
00:06:37.030 --> 00:06:40.090
and then close this while loop in another scriptlet element.

156
00:06:40.090 --> 00:06:42.050
So, let's do that.

157
00:06:42.050 --> 00:06:44.040
I'm going to close the scriptlet right here

158
00:06:44.040 --> 00:06:46.070
and instead on line number 71.

159
00:06:46.070 --> 00:06:49.000
Let's take that and close it here.

160
00:06:49.000 --> 00:06:51.060
Once we do that, what we are essentially doing is

161
00:06:51.060 --> 00:06:54.030
for every iteration of this while loop

162
00:06:54.030 --> 00:06:56.040
I'm going to generate this form element.

163
00:06:56.040 --> 00:06:58.060
Let me also close the form element here.

164
00:06:58.060 --> 00:06:59.080
Right.

165
00:06:59.080 --> 00:07:04.030
And now, once we do this only then can we end this loop.

166
00:07:04.030 --> 00:07:06.070
But, ending this loop is a Java curly brace

167
00:07:06.070 --> 00:07:08.020
which, of course, is a Java code,

168
00:07:08.020 --> 00:07:10.080
which means we now need to introduce

169
00:07:10.080 --> 00:07:14.000
another scriptlet element on line number 69.

170
00:07:14.000 --> 00:07:15.090
So, let's do that.

171
00:07:15.090 --> 00:07:16.070
That's right.

172
00:07:16.070 --> 00:07:19.010
This is what we have to do.

173
00:07:19.010 --> 00:07:20.040
Now, this entire code is, of course,

174
00:07:20.040 --> 00:07:23.050
going to sit inside the product container division element.

175
00:07:23.050 --> 00:07:26.050
So, I'm going to take lines number 55 to 72,

176
00:07:26.050 --> 00:07:29.000
cut them, and just quickly paste them

177
00:07:29.000 --> 00:07:31.070
on line number 62 onwards.

178
00:07:31.070 --> 00:07:34.060
And, now that we have generated the entire form element

179
00:07:34.060 --> 00:07:37.020
for every product, we don't any longer need

180
00:07:37.020 --> 00:07:40.000
these static elements at all.

181
00:07:40.000 --> 00:07:44.060
We need to get rid of them.

182
00:07:44.060 --> 00:07:46.030
This is the division container

183
00:07:46.030 --> 00:07:48.040
and we have iterated the products.

184
00:07:48.040 --> 00:07:50.030
Every product is now going to have

185
00:07:50.030 --> 00:07:51.080
an individual form element

186
00:07:51.080 --> 00:07:55.000
and for every product, this form is going to get generated.

187
00:07:55.000 --> 00:07:58.070
So now, let's also get rid of these placeholders.

188
00:07:58.070 --> 00:08:00.070
Instead of these placeholders,

189
00:08:00.070 --> 00:08:03.030
now we are going to use the expression element

190
00:08:03.030 --> 00:08:08.000
to access the product image and the product name.

191
00:08:08.000 --> 00:08:10.030
So, I'm going to use the expression element

192
00:08:10.030 --> 00:08:12.000
so let's see how.

193
00:08:12.000 --> 00:08:14.030
You are going to begin the expression element like that

194
00:08:14.030 --> 00:08:16.030
and expression of course has an equal to sign.

195
00:08:16.030 --> 00:08:17.040
And, if you want to close it,

196
00:08:17.040 --> 00:08:19.050
it will be in the reverse order.

197
00:08:19.050 --> 00:08:20.040
Right.

198
00:08:20.040 --> 00:08:21.080
And, what are we going to feed in this?

199
00:08:21.080 --> 00:08:22.090
We want the image.

200
00:08:22.090 --> 00:08:25.060
That can obtained through this product reference.

201
00:08:25.060 --> 00:08:30.020
So, I'm going to say product.getProduct image path.

202
00:08:30.020 --> 00:08:31.050
That's right.

203
00:08:31.050 --> 00:08:33.090
As for the name, it's going to be get product name,

204
00:08:33.090 --> 00:08:40.040
so let's also do that change via an expression element.

205
00:08:40.040 --> 00:08:44.040
So, I'm going to quickly say product.getProductName.

206
00:08:44.040 --> 00:08:45.090
Right.

207
00:08:45.090 --> 00:08:48.050
We also had one more placeholder on line number 52

208
00:08:48.050 --> 00:08:50.070
which was signifying the items in cart.

209
00:08:50.070 --> 00:08:51.080
But, for the search use case,

210
00:08:51.080 --> 00:08:53.010
the items is always going to be zero.

211
00:08:53.010 --> 00:08:56.000
So, right now, let's keep it at zero in a hard coded manner.

212
00:08:56.000 --> 00:08:58.020
We'll change this later.

213
00:08:58.020 --> 00:09:01.050
So, now let's deploy this application and check our changes.

214
00:09:01.050 --> 00:09:03.090
I'm going to say run as, run on server

215
00:09:03.090 --> 00:09:05.060
and I'm going to click on the search hyperlink,

216
00:09:05.060 --> 00:09:06.080
search for a product,

217
00:09:06.080 --> 00:09:08.010
and click on the search button.

218
00:09:08.010 --> 00:09:09.020
There you go.

219
00:09:09.020 --> 00:09:12.070
So now, all these items have definitely been retrieved,

220
00:09:12.070 --> 00:09:15.010
but they are all dynamically generated items

221
00:09:15.010 --> 00:09:17.050
and that's only possible because you have

222
00:09:17.050 --> 00:09:21.000
that scripted and expression element with you.

223
00:09:21.000 --> 00:09:23.010
So, that's how you can use scripted and expression

224
00:09:23.010 --> 00:09:26.000
to generate dynamic content for your webpages.

