WEBVTT
1
00:00:00.060 --> 00:00:04.050
- Now let us talk about the servlet life cycle.

2
00:00:04.050 --> 00:00:06.030
All the servlet classes that we have created

3
00:00:06.030 --> 00:00:08.020
so far: login, servlet, and any other

4
00:00:08.020 --> 00:00:10.000
that you may see in your project,

5
00:00:10.000 --> 00:00:14.000
all of them have extended HttpServlet

6
00:00:14.000 --> 00:00:17.030
and have either overridden the doGet or the doPost method

7
00:00:17.030 --> 00:00:20.040
so that actions are taken accordingly.

8
00:00:20.040 --> 00:00:23.030
And whenever we hit the request from the client,

9
00:00:23.030 --> 00:00:25.070
the control automatically came inside

10
00:00:25.070 --> 00:00:28.070
one of the doGet or the doPost methods.

11
00:00:28.070 --> 00:00:32.000
But in Java, whenever you want to invoke a method

12
00:00:32.000 --> 00:00:34.090
of any class, you need an object of that class

13
00:00:34.090 --> 00:00:38.040
and then a reference variable to call that method.

14
00:00:38.040 --> 00:00:42.030
But we have never instantiated any of our Servlet classes

15
00:00:42.030 --> 00:00:46.000
nor did we call any of these methods ourselves.

16
00:00:46.000 --> 00:00:48.080
So what is this entire thing that goes behind the scenes

17
00:00:48.080 --> 00:00:51.050
where this is getting worked out automatically?

18
00:00:51.050 --> 00:00:53.060
That is exactly what we need to understand

19
00:00:53.060 --> 00:00:56.070
as a part of the servlet life cycle.

20
00:00:56.070 --> 00:01:00.000
The servlet life cycle firstly is entirely managed

21
00:01:00.000 --> 00:01:01.080
by the server container.

22
00:01:01.080 --> 00:01:04.030
In our case it is TomCat, or it could be any other

23
00:01:04.030 --> 00:01:06.020
JEE-compliant container source.

24
00:01:06.020 --> 00:01:09.020
So, with software as for your project.

25
00:01:09.020 --> 00:01:11.020
The life cycle of a servlet will start off

26
00:01:11.020 --> 00:01:15.010
when the first request comes in for that servlet.

27
00:01:15.010 --> 00:01:19.020
And it will end when the application is either undeployed

28
00:01:19.020 --> 00:01:22.040
or maybe the server is shut down.

29
00:01:22.040 --> 00:01:24.050
Now we need to take a look at the servlet life cycle

30
00:01:24.050 --> 00:01:25.090
in two phases.

31
00:01:25.090 --> 00:01:28.040
The first phase is when the first request

32
00:01:28.040 --> 00:01:30.020
comes in to the servlet.

33
00:01:30.020 --> 00:01:34.030
And the second phase is when repeated requests come

34
00:01:34.030 --> 00:01:36.010
for the same servlet.

35
00:01:36.010 --> 00:01:40.060
So let's go ahead and look at the first request scenario.

36
00:01:40.060 --> 00:01:44.060
Now we know that every servlet is identified by a URL title.

37
00:01:44.060 --> 00:01:46.070
So let's say you either hit the URL title

38
00:01:46.070 --> 00:01:49.030
through the address bar or you hit the URL title

39
00:01:49.030 --> 00:01:50.090
via your form element.

40
00:01:50.090 --> 00:01:54.000
When the first request comes to any particular servlet,

41
00:01:54.000 --> 00:01:57.040
the container is going to scan that web XML file

42
00:01:57.040 --> 00:02:02.030
and find the appropriate servlet class as per URL pattern.

43
00:02:02.030 --> 00:02:04.030
Of course, if you have chosen the annotation

44
00:02:04.030 --> 00:02:08.090
way of configuration, it'll scan the class accordingly.

45
00:02:08.090 --> 00:02:12.060
Once it finds that class, it's going to load and instantiate

46
00:02:12.060 --> 00:02:14.090
that servlet class, based on the conventional

47
00:02:14.090 --> 00:02:17.020
class loader information that is has.

48
00:02:17.020 --> 00:02:19.030
So there's a ClassLoader API in core Java

49
00:02:19.030 --> 00:02:23.000
which it uses in order to load any instantiate that servlet.

50
00:02:23.000 --> 00:02:26.000
Now a very important thing to note here is,

51
00:02:26.000 --> 00:02:29.090
that whenever you have n number of requests

52
00:02:29.090 --> 00:02:33.070
coming to the same servlet, there is only one instance

53
00:02:33.070 --> 00:02:36.010
of a servlet that gets created.

54
00:02:36.010 --> 00:02:39.000
No matter if there are millions of requests

55
00:02:39.000 --> 00:02:42.080
coming from millions of users for the same servlet.

56
00:02:42.080 --> 00:02:48.010
But all those requests will have only one servlet object.

57
00:02:48.010 --> 00:02:50.060
Once the instance of the servlet is created,

58
00:02:50.060 --> 00:02:52.070
there's a lot of initialization activity

59
00:02:52.070 --> 00:02:54.040
that happens after that.

60
00:02:54.040 --> 00:02:57.030
The first one is that servlet context

61
00:02:57.030 --> 00:02:59.030
and the servlet context objects

62
00:02:59.030 --> 00:03:00.010
will get created.

63
00:03:00.010 --> 00:03:02.090
We've already seen this as a part of our previous videos.

64
00:03:02.090 --> 00:03:07.020
So they get created here and they attached to this servlet.

65
00:03:07.020 --> 00:03:10.010
Up next, the next step is, it allocated a new thread

66
00:03:10.010 --> 00:03:11.070
to the request.

67
00:03:11.070 --> 00:03:13.050
Now this is important again.

68
00:03:13.050 --> 00:03:15.040
You may have your application being accessed

69
00:03:15.040 --> 00:03:20.010
by multiple users at exactly the same point in time.

70
00:03:20.010 --> 00:03:23.000
This entire set of concurrent requests

71
00:03:23.000 --> 00:03:26.000
is going to be handled by the multithreading capability

72
00:03:26.000 --> 00:03:27.050
of Java platform.

73
00:03:27.050 --> 00:03:30.030
So every request is going to be allocated a new thread,

74
00:03:30.030 --> 00:03:32.090
and hence, those threads are going to run in parallel.

75
00:03:32.090 --> 00:03:35.040
So that's exactly what happens at this stage.

76
00:03:35.040 --> 00:03:39.040
The incoming request is going to get allocated a new thread.

77
00:03:39.040 --> 00:03:41.080
Once this is done, it also allocates

78
00:03:41.080 --> 00:03:44.010
a pair of HTTPServletRequest

79
00:03:44.010 --> 00:03:46.070
and HTTPServletResponse objects

80
00:03:46.070 --> 00:03:50.050
and attaches it to this incoming request.

81
00:03:50.050 --> 00:03:54.060
Once done, then it is going to call a series of APIs.

82
00:03:54.060 --> 00:03:57.070
It calls to the init method, the service method,

83
00:03:57.070 --> 00:04:00.010
and the destroy method.

84
00:04:00.010 --> 00:04:03.000
Now there's a very big doubt in the mind that may come

85
00:04:03.000 --> 00:04:05.030
because, where are these methods coming from?

86
00:04:05.030 --> 00:04:06.080
We have never written out any of these methods

87
00:04:06.080 --> 00:04:09.010
in any of our servlet classes.

88
00:04:09.010 --> 00:04:11.030
Right, so let's understand that bit.

89
00:04:11.030 --> 00:04:15.040
The service method comes from the HTTPServlet class.

90
00:04:15.040 --> 00:04:17.040
And the init and destroy methods

91
00:04:17.040 --> 00:04:20.040
come from the GenericServlet class.

92
00:04:20.040 --> 00:04:22.040
Let's recall the hierarchy quickly.

93
00:04:22.040 --> 00:04:23.070
This is how the hierarchy is:

94
00:04:23.070 --> 00:04:25.060
There's a Servlet interface at the top

95
00:04:25.060 --> 00:04:27.070
then there's a GenericServlet, which is the abstract class,

96
00:04:27.070 --> 00:04:29.090
the protocol-independent class,

97
00:04:29.090 --> 00:04:32.040
and then you have the HTTPServlet class,

98
00:04:32.040 --> 00:04:36.000
which is specifically designed for HTTP applications.

99
00:04:36.000 --> 00:04:39.000
So the service method comes from the HTTPServlet

100
00:04:39.000 --> 00:04:42.050
and the init and destroy come from the GenericServlet.

101
00:04:42.050 --> 00:04:44.000
Of course they're going to be borrowed down

102
00:04:44.000 --> 00:04:47.050
to HTTPServlet out of inheritance.

103
00:04:47.050 --> 00:04:50.090
So when the init method is called, what exactly happens?

104
00:04:50.090 --> 00:04:53.070
Init method is the place to accommodate any kind

105
00:04:53.070 --> 00:04:57.000
of initialization activity for your servlet.

106
00:04:57.000 --> 00:05:00.010
Let's say your servlet wants to interact with the database.

107
00:05:00.010 --> 00:05:01.070
So you can set up the database connection

108
00:05:01.070 --> 00:05:03.050
inside the init method.

109
00:05:03.050 --> 00:05:05.030
Or let's say your servlet wants

110
00:05:05.030 --> 00:05:08.000
to display the weather information all the time

111
00:05:08.000 --> 00:05:10.010
so you can connect to that weather service

112
00:05:10.010 --> 00:05:12.010
inside the init method.

113
00:05:12.010 --> 00:05:16.090
Any kind of one time job; that happens in init method.

114
00:05:16.090 --> 00:05:19.010
Because init method is going to get executed

115
00:05:19.010 --> 00:05:24.040
only once during the entire life cycle of the servlet.

116
00:05:24.040 --> 00:05:27.000
Up next, it calls the service method.

117
00:05:27.000 --> 00:05:28.070
Now the service method, of course as I said,

118
00:05:28.070 --> 00:05:33.020
comes from HTTPServlet and it is already implemented there.

119
00:05:33.020 --> 00:05:35.090
The logic that goes inside the service method is:

120
00:05:35.090 --> 00:05:38.040
depending on the kind of request that was made

121
00:05:38.040 --> 00:05:40.090
from the client, let's say it's a GET or a POST

122
00:05:40.090 --> 00:05:42.070
or anything like that,

123
00:05:42.070 --> 00:05:46.010
the service method is accordingly going to delegate the call

124
00:05:46.010 --> 00:05:50.070
to either the doGet or the doPost methods.

125
00:05:50.070 --> 00:05:53.090
And this is the place exactly where your request

126
00:05:53.090 --> 00:05:57.020
is being served for the user.

127
00:05:57.020 --> 00:06:00.050
Now, once your application is about to get undeployed,

128
00:06:00.050 --> 00:06:03.050
or maybe say your server is absolutely shutting down

129
00:06:03.050 --> 00:06:06.050
altogether, that's the point when the destroy method

130
00:06:06.050 --> 00:06:09.020
of the servlet is called.

131
00:06:09.020 --> 00:06:11.050
Destroy method is going to hold any kind

132
00:06:11.050 --> 00:06:15.050
of clean up activity that you want to do for the servlet.

133
00:06:15.050 --> 00:06:17.040
So, maybe you have some object created

134
00:06:17.040 --> 00:06:19.090
inside the init method where you can clean them up

135
00:06:19.090 --> 00:06:22.050
in destroy method so that they're eligible

136
00:06:22.050 --> 00:06:25.060
for the garbage collection process.

137
00:06:25.060 --> 00:06:27.010
So this is how the life cycle looks like

138
00:06:27.010 --> 00:06:29.020
for the first request.

139
00:06:29.020 --> 00:06:32.030
Now, the second phase, where there are multiple requests

140
00:06:32.030 --> 00:06:34.010
coming in for the same servlet,

141
00:06:34.010 --> 00:06:37.040
do you see some points highlighted in red in this slide?

142
00:06:37.040 --> 00:06:41.040
Those are the steps that happen again for repeated requests.

143
00:06:41.040 --> 00:06:42.070
The instance is only one.

144
00:06:42.070 --> 00:06:44.020
That does not happen again.

145
00:06:44.020 --> 00:06:47.060
Directly, a new thread will be allocated to that request,

146
00:06:47.060 --> 00:06:50.050
a new pair of HTTPServlet request and response objects

147
00:06:50.050 --> 00:06:53.010
will be created and attached with the request,

148
00:06:53.010 --> 00:06:56.030
and then, directly, the service method is called.

149
00:06:56.030 --> 00:06:58.080
Again, depending on what request was made,

150
00:06:58.080 --> 00:07:01.010
the service will go over and call

151
00:07:01.010 --> 00:07:05.020
either the doGet or doPost, so on and so forth.

152
00:07:05.020 --> 00:07:08.060
Like init, destroy is also called only once

153
00:07:08.060 --> 00:07:10.010
during the life cycle.

154
00:07:10.010 --> 00:07:13.020
So they will never happen again and again.

155
00:07:13.020 --> 00:07:16.000
So this is how the life cycle looks like overall.

156
00:07:16.000 --> 00:07:19.060
So if you summarize the methods of the servlet life cycle,

157
00:07:19.060 --> 00:07:21.080
there are three life cycle methods:

158
00:07:21.080 --> 00:07:26.030
init, service, and destroy, out of which init and destroy

159
00:07:26.030 --> 00:07:29.060
can definitely be overridden by the developer.

160
00:07:29.060 --> 00:07:32.020
Service method, however, there's no logical reason

161
00:07:32.020 --> 00:07:33.060
to override it.

162
00:07:33.060 --> 00:07:36.050
It has already been implemented in the HTTPServlet class

163
00:07:36.050 --> 00:07:39.010
and if you choose to override service,

164
00:07:39.010 --> 00:07:41.050
it means you take up the responsibility

165
00:07:41.050 --> 00:07:43.090
of delegating the chores to the respective

166
00:07:43.090 --> 00:07:47.020
doGet or doPost methods.

167
00:07:47.020 --> 00:07:50.040
A very crucial point is, all the servlet requests

168
00:07:50.040 --> 00:07:54.010
that are going to come in the application are multithreaded.

169
00:07:54.010 --> 00:07:55.060
We've already spoken about the multithreading

170
00:07:55.060 --> 00:07:56.090
capability of servlets.

171
00:07:56.090 --> 00:08:00.030
For every new request, you have a new thread.

172
00:08:00.030 --> 00:08:03.020
Now those threads are definitely going to run in parallel

173
00:08:03.020 --> 00:08:05.060
for the concurrent requests.

174
00:08:05.060 --> 00:08:09.010
It essentially means that care needs to be taken

175
00:08:09.010 --> 00:08:12.080
to synchronize access to the shared resources.

176
00:08:12.080 --> 00:08:15.070
Let's say your servlet class has instance variables

177
00:08:15.070 --> 00:08:18.070
in the form of data, and if you have multiple threads

178
00:08:18.070 --> 00:08:22.020
accessing that same data, at the same point in time,

179
00:08:22.020 --> 00:08:26.040
there's definitely bound to be data inconsistency issues.

180
00:08:26.040 --> 00:08:29.020
In order to avoid that, we will have to synchronize

181
00:08:29.020 --> 00:08:31.010
that block of code which is trying

182
00:08:31.010 --> 00:08:36.010
to have those multiple threads access the shared resource.

183
00:08:36.010 --> 00:08:39.010
In the next video, we are going to look at this life cycle

184
00:08:39.010 --> 00:08:42.000
by actually coding out the init and destroy methods

185
00:08:42.000 --> 00:08:44.000
inside one of our servlet classes.

