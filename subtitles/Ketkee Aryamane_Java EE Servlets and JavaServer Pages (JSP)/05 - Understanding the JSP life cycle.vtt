WEBVTT
1
00:00:00.050 --> 00:00:01.050
- [Instructor] Now let us understand

2
00:00:01.050 --> 00:00:03.090
what the JSP life cycle is.

3
00:00:03.090 --> 00:00:05.070
This is going to be very simple to understand

4
00:00:05.070 --> 00:00:07.010
because by this time we already know

5
00:00:07.010 --> 00:00:09.030
what the servlet life cycle is.

6
00:00:09.030 --> 00:00:11.060
So this also can be viewed in two phases.

7
00:00:11.060 --> 00:00:13.080
The first phase is when the first request comes in

8
00:00:13.080 --> 00:00:16.010
for the JSP and the second phase is when

9
00:00:16.010 --> 00:00:19.000
repeated requests come in for the same JSP.

10
00:00:19.000 --> 00:00:20.050
Let's look at the first phase.

11
00:00:20.050 --> 00:00:22.080
When the first request comes in for a JSP,

12
00:00:22.080 --> 00:00:24.050
then the container is first going to

13
00:00:24.050 --> 00:00:27.030
translate that JSP to a servlet file.

14
00:00:27.030 --> 00:00:29.080
We've already spoken about this translation process

15
00:00:29.080 --> 00:00:32.030
when we started discussing the JSP elements.

16
00:00:32.030 --> 00:00:35.040
So that's the first step that the container takes.

17
00:00:35.040 --> 00:00:37.030
Please rest assure that the container's going to

18
00:00:37.030 --> 00:00:40.010
completely own up the responsibility

19
00:00:40.010 --> 00:00:42.040
of translating that JSP to a servlet.

20
00:00:42.040 --> 00:00:45.010
We don't need to do anything for this.

21
00:00:45.010 --> 00:00:49.040
Once that's done, then the translated servlet file,

22
00:00:49.040 --> 00:00:51.020
which is a .java file is going to

23
00:00:51.020 --> 00:00:54.020
get compiled into a .class file.

24
00:00:54.020 --> 00:00:56.080
Once this is done, now let's understand that

25
00:00:56.080 --> 00:01:00.050
translation and compilation are going to happen only once

26
00:01:00.050 --> 00:01:03.070
during the entire JSP life cycle.

27
00:01:03.070 --> 00:01:07.060
And since the containers translates the JSP to a .java file,

28
00:01:07.060 --> 00:01:09.080
this translated file is available

29
00:01:09.080 --> 00:01:12.070
for viewing under our server folders.

30
00:01:12.070 --> 00:01:15.070
We are going to take a look at it in some time.

31
00:01:15.070 --> 00:01:18.080
So once the translation and compilation is over,

32
00:01:18.080 --> 00:01:21.050
then the rest of the life cycle is

33
00:01:21.050 --> 00:01:25.040
exactly same as it happens for the servlet.

34
00:01:25.040 --> 00:01:28.060
So it is going to load and instantiate the servlet class,

35
00:01:28.060 --> 00:01:30.070
all of that initialization activity is

36
00:01:30.070 --> 00:01:35.020
going to happen again, it is going to call a jspinit method.

37
00:01:35.020 --> 00:01:38.050
We spoke about this as well in one of our previous videos.

38
00:01:38.050 --> 00:01:41.070
Since this is a JSP, the translated servlet

39
00:01:41.070 --> 00:01:43.080
for the JSP will look a little different

40
00:01:43.080 --> 00:01:46.050
from the servlet classes that we write.

41
00:01:46.050 --> 00:01:48.080
So instead of the init method that you have

42
00:01:48.080 --> 00:01:52.060
for an http servlet, for a JSP's servlet class

43
00:01:52.060 --> 00:01:56.030
you have the jspinit method to hold all the code

44
00:01:56.030 --> 00:01:59.000
for your initialization activity.

45
00:01:59.000 --> 00:02:03.010
After that, it will call the _jspService method.

46
00:02:03.010 --> 00:02:06.060
So that's the service method for the JSP class.

47
00:02:06.060 --> 00:02:09.000
And then finally, whenever your application is

48
00:02:09.000 --> 00:02:11.000
shutting down or you're undeploying it,

49
00:02:11.000 --> 00:02:13.070
you will have the jspDestroy method call,

50
00:02:13.070 --> 00:02:16.050
which is reserved for all of the clean up activity.

51
00:02:16.050 --> 00:02:18.010
Now where are these methods coming from?

52
00:02:18.010 --> 00:02:20.000
Let's take a look at that.

53
00:02:20.000 --> 00:02:24.020
Jspinit, _jspService, and jspDestroy,

54
00:02:24.020 --> 00:02:29.010
all of them come from a class called HTTPJspBase.

55
00:02:29.010 --> 00:02:34.010
Now that's the patent for the translated JSP's servlet file.

56
00:02:34.010 --> 00:02:36.060
Generally, when we write a servlet class,

57
00:02:36.060 --> 00:02:40.090
we've always take the http servlet as out patent.

58
00:02:40.090 --> 00:02:44.000
But when container translates a JSP to a servlet,

59
00:02:44.000 --> 00:02:47.030
the patent is HTTPJspBase.

60
00:02:47.030 --> 00:02:49.070
So that's where these methods are coming from.

61
00:02:49.070 --> 00:02:54.010
So you as a developer can override the jspinit

62
00:02:54.010 --> 00:02:57.050
or the jspDestroy and or whatever kind of initialization

63
00:02:57.050 --> 00:03:00.070
or a clean up activity that you may want to do.

64
00:03:00.070 --> 00:03:03.040
So basically, the code that is written inside

65
00:03:03.040 --> 00:03:06.000
the scriptlet and expression element

66
00:03:06.000 --> 00:03:10.020
is going to get inserted into the _jspService method,

67
00:03:10.020 --> 00:03:11.040
whereas the code that you write

68
00:03:11.040 --> 00:03:13.060
under the declaration element is going to

69
00:03:13.060 --> 00:03:17.020
directly sit inside the servlet file.

70
00:03:17.020 --> 00:03:20.080
That's how the JSP life cycle is for the first request.

71
00:03:20.080 --> 00:03:23.060
For the subsequent requests, it's directly going to call

72
00:03:23.060 --> 00:03:26.030
the jspService method and then it will serve

73
00:03:26.030 --> 00:03:29.090
the request that the client asked it to do.

74
00:03:29.090 --> 00:03:31.070
So now let us understand where

75
00:03:31.070 --> 00:03:33.070
could we find that translated file.

76
00:03:33.070 --> 00:03:36.050
So let me go to our server folder.

77
00:03:36.050 --> 00:03:41.000
Let's open up that, which is D, software, tomcat server.

78
00:03:41.000 --> 00:03:45.010
And under that I have already deployed the HPlusSample.war.

79
00:03:45.010 --> 00:03:48.010
I've already exported my project into a war file,

80
00:03:48.010 --> 00:03:50.010
dropped it onto the web apps directory,

81
00:03:50.010 --> 00:03:52.040
and then started a command prompt in order to

82
00:03:52.040 --> 00:03:56.020
start the server and it has already deployed my application.

83
00:03:56.020 --> 00:03:58.030
Now when I access my application,

84
00:03:58.030 --> 00:04:00.030
so let's go ahead to the browser

85
00:04:00.030 --> 00:04:04.000
and access our application, which is this.

86
00:04:04.000 --> 00:04:05.050
Let's say I click on the login,

87
00:04:05.050 --> 00:04:07.030
so I'll access the login JSP.

88
00:04:07.030 --> 00:04:09.090
Now let's go home and click on search.

89
00:04:09.090 --> 00:04:12.010
Enter a search criteria so I have

90
00:04:12.010 --> 00:04:14.030
access to searchresults.jsp.

91
00:04:14.030 --> 00:04:17.050
Now let's see whether the tomcat server has placed

92
00:04:17.050 --> 00:04:20.070
all the translated files under the server.

93
00:04:20.070 --> 00:04:23.050
The translated files are available for viewing

94
00:04:23.050 --> 00:04:25.050
under the work directory of tomcat.

95
00:04:25.050 --> 00:04:27.020
You see this, this one.

96
00:04:27.020 --> 00:04:31.030
So dive into it, Catalina, local host.

97
00:04:31.030 --> 00:04:34.020
Go to your respective project folder, HPlusSample,

98
00:04:34.020 --> 00:04:39.000
and under that dive into all org.apache.jsp.html

99
00:04:39.000 --> 00:04:42.070
and you see that there is a login_jsp.java,

100
00:04:42.070 --> 00:04:46.070
searchResults_jsp.java, those are the translated files.

101
00:04:46.070 --> 00:04:48.010
So I'm going to quickly open them

102
00:04:48.010 --> 00:04:52.010
with Notepad++ and let's quickly look at it.

103
00:04:52.010 --> 00:04:54.020
So this is how the file looks like.

104
00:04:54.020 --> 00:04:59.040
If you see the definition of this class.

105
00:04:59.040 --> 00:05:03.010
Do you see, _jspinit and jspDestroy, those are the methods.

106
00:05:03.010 --> 00:05:05.010
And then you have the jspService,

107
00:05:05.010 --> 00:05:08.050
under which you have all our code.

108
00:05:08.050 --> 00:05:12.090
Let's go down, scroll down further.

109
00:05:12.090 --> 00:05:17.090
And that was our scriptlet code right, from line number 150.

110
00:05:17.090 --> 00:05:21.080
That got inserted into the _jspService method.

111
00:05:21.080 --> 00:05:23.000
And the rest of them, of course,

112
00:05:23.000 --> 00:05:25.020
was written out by the out object.

113
00:05:25.020 --> 00:05:27.050
Similarly, let's close this and take a look

114
00:05:27.050 --> 00:05:30.030
at the other file, which is loginjps.java.

115
00:05:30.030 --> 00:05:34.010
So you see that the class extends that HTTPJspBase patent

116
00:05:34.010 --> 00:05:36.090
that we were talking about in the life cycle diagram.

117
00:05:36.090 --> 00:05:40.000
This patent is now a separate method

118
00:05:40.000 --> 00:05:41.070
under this translated file.

119
00:05:41.070 --> 00:05:43.030
That's because this was inserted

120
00:05:43.030 --> 00:05:45.020
into the declaration element.

121
00:05:45.020 --> 00:05:46.090
But when it script and an expression,

122
00:05:46.090 --> 00:05:49.020
everything went into the service method.

123
00:05:49.020 --> 00:05:51.040
So that's how the translated files look like

124
00:05:51.040 --> 00:05:54.000
in the case of JSP life cycle.

