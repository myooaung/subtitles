WEBVTT
1
00:00:00.050 --> 00:00:02.030
- [Instructor] Okay, so let's first understand

2
00:00:02.030 --> 00:00:04.060
what is the exact demo that we want to implement

3
00:00:04.060 --> 00:00:06.070
for the filter use case.

4
00:00:06.070 --> 00:00:08.020
This is our application.

5
00:00:08.020 --> 00:00:12.030
When I log in and I enter the correct credentials

6
00:00:12.030 --> 00:00:14.040
I reach the home page.

7
00:00:14.040 --> 00:00:18.000
Now, when I log in, that's exactly when I'm able to see

8
00:00:18.000 --> 00:00:20.080
all the history and view my profile links

9
00:00:20.080 --> 00:00:23.000
because they are links that are very specific

10
00:00:23.000 --> 00:00:24.080
to the user's login.

11
00:00:24.080 --> 00:00:26.000
However, if I log out

12
00:00:26.000 --> 00:00:27.080
and if I go on the landing page

13
00:00:27.080 --> 00:00:31.040
do you see that I can access Home, History, Products,

14
00:00:31.040 --> 00:00:34.040
People, Search, New User,

15
00:00:34.040 --> 00:00:37.000
all of these even without a login.

16
00:00:37.000 --> 00:00:39.060
Okay, so now, when I log in,

17
00:00:39.060 --> 00:00:42.030
let me log in again,

18
00:00:42.030 --> 00:00:44.050
and when I reach the home page,

19
00:00:44.050 --> 00:00:47.040
I should completely restrict access

20
00:00:47.040 --> 00:00:50.060
to order history and view my profile

21
00:00:50.060 --> 00:00:54.090
in case anybody is trying to access it maliciously.

22
00:00:54.090 --> 00:00:57.000
Let's say on from some other machine

23
00:00:57.000 --> 00:00:58.050
or let's say the session itself

24
00:00:58.050 --> 00:00:59.090
times out on this machine.

25
00:00:59.090 --> 00:01:03.070
In both these cases, I have to go back to the login page

26
00:01:03.070 --> 00:01:06.050
and ask the user to log in again.

27
00:01:06.050 --> 00:01:09.030
So this is the functionality that I'm going to incorporate

28
00:01:09.030 --> 00:01:11.050
in the filter class that we're going to write

29
00:01:11.050 --> 00:01:13.060
as a part of our application.

30
00:01:13.060 --> 00:01:16.020
We're going to restrict the access to the system

31
00:01:16.020 --> 00:01:20.060
in case anybody tries to access these URLs maliciously

32
00:01:20.060 --> 00:01:22.090
or the session is invalidated.

33
00:01:22.090 --> 00:01:23.080
Okay?

34
00:01:23.080 --> 00:01:27.020
So, let's look at the steps quickly.

35
00:01:27.020 --> 00:01:29.020
We have a login request that's coming in

36
00:01:29.020 --> 00:01:30.070
which will go to the servlet.

37
00:01:30.070 --> 00:01:34.000
The servlet is going to do the validation of the credentials

38
00:01:34.000 --> 00:01:35.000
against the database

39
00:01:35.000 --> 00:01:39.070
so we will have to traverse to the DAO leer as well, okay?

40
00:01:39.070 --> 00:01:42.030
And once this is done, then after,

41
00:01:42.030 --> 00:01:44.080
on the click of those links, the filter

42
00:01:44.080 --> 00:01:46.060
is going to do the authentication

43
00:01:46.060 --> 00:01:49.070
and block the access to those certain servlet URLs

44
00:01:49.070 --> 00:01:53.000
like, for example, order history or view my profile.

45
00:01:53.000 --> 00:01:54.020
So this is only going to happen

46
00:01:54.020 --> 00:01:56.050
if any malicious user accesses the URL

47
00:01:56.050 --> 00:01:57.060
on a different machine

48
00:01:57.060 --> 00:01:59.030
or let's say the session itself times out,

49
00:01:59.030 --> 00:02:00.090
that's what we were talking about.

50
00:02:00.090 --> 00:02:03.050
If you want to achieve this functionality in the filter

51
00:02:03.050 --> 00:02:04.070
what you actually need to do

52
00:02:04.070 --> 00:02:07.090
is somehow get access to that session object

53
00:02:07.090 --> 00:02:10.050
and check if you have a valid username.

54
00:02:10.050 --> 00:02:12.030
If you do get a valid username

55
00:02:12.030 --> 00:02:15.010
it means it's the same session that is getting carried on

56
00:02:15.010 --> 00:02:18.030
so it's fine to allow an entry to the next page.

57
00:02:18.030 --> 00:02:21.000
If not, you can just stop the execution there

58
00:02:21.000 --> 00:02:22.040
and go back to the login

59
00:02:22.040 --> 00:02:25.010
asking the user to log in again.

60
00:02:25.010 --> 00:02:26.010
Right?

61
00:02:26.010 --> 00:02:28.080
So let's go ahead and now start implementing the steps.

62
00:02:28.080 --> 00:02:30.080
The first of the steps is we have to add

63
00:02:30.080 --> 00:02:33.020
the validation method in the DAO class.

64
00:02:33.020 --> 00:02:34.060
So let's go to the eclipse.

65
00:02:34.060 --> 00:02:36.040
This is my application DAO class,

66
00:02:36.040 --> 00:02:39.010
I have a template of that method ready with me.

67
00:02:39.010 --> 00:02:42.020
Public Boolean validate user takes in the username

68
00:02:42.020 --> 00:02:44.030
and password as the parameters.

69
00:02:44.030 --> 00:02:46.090
Right, so the first step will be getting the connection

70
00:02:46.090 --> 00:02:47.090
to the database.

71
00:02:47.090 --> 00:02:50.080
So I am on line number 76 and I am going to employ

72
00:02:50.080 --> 00:02:53.020
the same mechanism of getting a connection

73
00:02:53.020 --> 00:02:56.040
that we have been doing so far.

74
00:02:56.040 --> 00:02:57.020
Done.

75
00:02:57.020 --> 00:02:59.040
Now let's write select query,

76
00:02:59.040 --> 00:03:01.000
so this is not going to be the insert query,

77
00:03:01.000 --> 00:03:02.060
this is the select query,

78
00:03:02.060 --> 00:03:03.070
and what am I going to do?

79
00:03:03.070 --> 00:03:06.080
I'm going to query the user's table

80
00:03:06.080 --> 00:03:09.090
and see if this username and password

81
00:03:09.090 --> 00:03:12.090
do exist in the database table or not.

82
00:03:12.090 --> 00:03:15.030
So I'm on line number 79

83
00:03:15.030 --> 00:03:17.010
and I'm going to write the select query,

84
00:03:17.010 --> 00:03:18.080
so let's say string,

85
00:03:18.080 --> 00:03:20.090
that is string sql

86
00:03:20.090 --> 00:03:27.060
equal to select star from users where

87
00:03:27.060 --> 00:03:29.070
username equals a question mark

88
00:03:29.070 --> 00:03:32.040
and password equals two questions marks.

89
00:03:32.040 --> 00:03:33.070
That's the query.

90
00:03:33.070 --> 00:03:37.060
And I'm going to pass these placeholders with parameters

91
00:03:37.060 --> 00:03:39.060
through the prepare statement API.

92
00:03:39.060 --> 00:03:42.050
So let's get the prepare statement object first,

93
00:03:42.050 --> 00:03:47.030
prepare statement which is java sequel

94
00:03:47.030 --> 00:03:49.060
and I'm going to get it on the connection object

95
00:03:49.060 --> 00:03:52.010
by calling the prepared statement API.

96
00:03:52.010 --> 00:03:56.020
To do this, I of course need to pass the sql queery

97
00:03:56.020 --> 00:03:58.040
and after that I'll set the parameters,

98
00:03:58.040 --> 00:04:01.040
I'm going to say statement dot set string parameter

99
00:04:01.040 --> 00:04:03.020
index number one

100
00:04:03.020 --> 00:04:06.090
and I'm going to take the username for this.

101
00:04:06.090 --> 00:04:10.060
And the other parameter will be

102
00:04:10.060 --> 00:04:15.020
parameter index number two, which is the password.

103
00:04:15.020 --> 00:04:16.030
Okay, good.

104
00:04:16.030 --> 00:04:20.000
Now let's go ahead and execute that query, right.

105
00:04:20.000 --> 00:04:21.090
So I'm on line number 88,

106
00:04:21.090 --> 00:04:23.050
what I'm going to do is I'm going to say is

107
00:04:23.050 --> 00:04:26.080
statement dot execute query.

108
00:04:26.080 --> 00:04:29.030
And this, of course, is going to return me results set.

109
00:04:29.030 --> 00:04:32.090
I'm going to collect it into a result set reference.

110
00:04:32.090 --> 00:04:35.040
Now, what I'm going to do on line number 89

111
00:04:35.040 --> 00:04:37.050
is I'll just iterate this results set

112
00:04:37.050 --> 00:04:40.050
and I will check whether I get a record or not.

113
00:04:40.050 --> 00:04:42.080
If I get a record against this username

114
00:04:42.080 --> 00:04:44.030
and password combination,

115
00:04:44.030 --> 00:04:46.050
it means that the user is good,

116
00:04:46.050 --> 00:04:48.000
it's a legal, valid user,

117
00:04:48.000 --> 00:04:50.080
and I can take that user inside the system.

118
00:04:50.080 --> 00:04:53.070
Okay, so let's go ahead and iterate that results set.

119
00:04:53.070 --> 00:04:56.020
So I'm going to say while set dot next.

120
00:04:56.020 --> 00:04:58.030
This search self is enough a check.

121
00:04:58.030 --> 00:05:01.000
So let's put that while loop

122
00:05:01.000 --> 00:05:02.030
and let's do one more thing.

123
00:05:02.030 --> 00:05:05.050
I'll come at the top of this block

124
00:05:05.050 --> 00:05:09.040
on line number 73 declare a Boolean variable,

125
00:05:09.040 --> 00:05:11.090
let's say is valid user,

126
00:05:11.090 --> 00:05:14.040
initially let us set it to false,

127
00:05:14.040 --> 00:05:16.020
and if I do get a record

128
00:05:16.020 --> 00:05:18.070
it means it's okay, it's a valid user,

129
00:05:18.070 --> 00:05:19.080
so I'll take that Boolean

130
00:05:19.080 --> 00:05:22.060
and set it to true.

131
00:05:22.060 --> 00:05:23.060
Okay.

132
00:05:23.060 --> 00:05:26.090
And at the end of the method what I only have to do is

133
00:05:26.090 --> 00:05:29.020
just return that is valid user Boolean

134
00:05:29.020 --> 00:05:31.090
back to the calling method.

135
00:05:31.090 --> 00:05:32.080
That's all.

136
00:05:32.080 --> 00:05:33.090
So we've taken the connection,

137
00:05:33.090 --> 00:05:35.070
we have checked whether the username

138
00:05:35.070 --> 00:05:37.070
and password exist in that table,

139
00:05:37.070 --> 00:05:38.080
and if they do,

140
00:05:38.080 --> 00:05:42.030
then I'm just going to signal that via that Boolean return.

141
00:05:42.030 --> 00:05:44.060
Okay, let's go to the next step.

142
00:05:44.060 --> 00:05:48.060
Now, we need to call that DAO method from the login servlet.

143
00:05:48.060 --> 00:05:51.000
So whenever you click on the login button

144
00:05:51.000 --> 00:05:53.080
we have to essentially call that DAO method

145
00:05:53.080 --> 00:05:56.000
and check whether the user is valid.

146
00:05:56.000 --> 00:05:59.030
So if you remember, for our URL rewriting demo,

147
00:05:59.030 --> 00:06:01.060
we had actually set up the login servlet already

148
00:06:01.060 --> 00:06:03.030
and we had collected the username,

149
00:06:03.030 --> 00:06:05.030
we had set up the session,

150
00:06:05.030 --> 00:06:08.090
we had set the attribute of username in the session,

151
00:06:08.090 --> 00:06:10.070
and we had gone to home JSP

152
00:06:10.070 --> 00:06:13.010
and there we have actually assumed

153
00:06:13.010 --> 00:06:15.050
that this is going to be a successful login.

154
00:06:15.050 --> 00:06:17.040
Now, however, for this demo,

155
00:06:17.040 --> 00:06:19.080
we are going to attach that bit of logic

156
00:06:19.080 --> 00:06:21.050
for the validation as well.

157
00:06:21.050 --> 00:06:24.030
So you're on line number 32, you see this comment,

158
00:06:24.030 --> 00:06:27.040
I'm going to call the DAO class for the validation logic.

159
00:06:27.040 --> 00:06:30.020
So let's come down on line number 33,

160
00:06:30.020 --> 00:06:36.000
let's make an instance of application DAO quickly,

161
00:06:36.000 --> 00:06:41.020
and go ahead and call that validate user method.

162
00:06:41.020 --> 00:06:43.020
But, of course, this method needs username

163
00:06:43.020 --> 00:06:44.040
and password both.

164
00:06:44.040 --> 00:06:47.010
So I have already collected the username before.

165
00:06:47.010 --> 00:06:49.030
Let me also collect the password.

166
00:06:49.030 --> 00:06:53.060
On line number 33 I am now going to collect the password

167
00:06:53.060 --> 00:06:59.010
from the request parameters.

168
00:06:59.010 --> 00:07:00.080
Okay.

169
00:07:00.080 --> 00:07:02.070
And let's give a call there

170
00:07:02.070 --> 00:07:05.000
and we know that this returns as a Boolean value.

171
00:07:05.000 --> 00:07:08.060
Let's collect it in a Boolean variable.

172
00:07:08.060 --> 00:07:09.050
Right.

173
00:07:09.050 --> 00:07:12.050
Let me name it correctly, let's say is valid user.

174
00:07:12.050 --> 00:07:14.080
Please do not forget to name your classes,

175
00:07:14.080 --> 00:07:16.010
your methods correctly

176
00:07:16.010 --> 00:07:18.050
according to all java naming conventions,

177
00:07:18.050 --> 00:07:20.080
it's a very good practice to do that.

178
00:07:20.080 --> 00:07:23.010
Okay, so now,

179
00:07:23.010 --> 00:07:25.050
let's come inside, so we have called the DAO method

180
00:07:25.050 --> 00:07:27.020
form LoginServlet, that's right,

181
00:07:27.020 --> 00:07:29.090
and now we need to prepare an error message

182
00:07:29.090 --> 00:07:31.040
for the invalid user

183
00:07:31.040 --> 00:07:33.070
and set it in request, so let's do that.

184
00:07:33.070 --> 00:07:35.070
What I'm going to do is here,

185
00:07:35.070 --> 00:07:37.080
I'm going to check if the user is invalid,

186
00:07:37.080 --> 00:07:39.050
so I can just check this variable.

187
00:07:39.050 --> 00:07:43.060
So on line number 40, I'm going to put this condition,

188
00:07:43.060 --> 00:07:46.010
if it is a valid user,

189
00:07:46.010 --> 00:07:48.040
only then we are going to set up the session

190
00:07:48.040 --> 00:07:51.020
and we are going to store the username inside the session.

191
00:07:51.020 --> 00:07:53.050
So what I'm going to do is I'm going to take the code

192
00:07:53.050 --> 00:07:56.060
from lines number 44 to 48,

193
00:07:56.060 --> 00:08:00.090
cut and paste it from line number 41.

194
00:08:00.090 --> 00:08:02.040
That's right.

195
00:08:02.040 --> 00:08:04.090
And then, if it's a valid user, of course,

196
00:08:04.090 --> 00:08:06.060
you also need to go to home JSP

197
00:08:06.060 --> 00:08:08.030
because it's a successful login.

198
00:08:08.030 --> 00:08:12.070
So let me also take lines number 51, 52, cut them off,

199
00:08:12.070 --> 00:08:16.090
and paste it on line number 46.

200
00:08:16.090 --> 00:08:17.080
Okay.

201
00:08:17.080 --> 00:08:19.070
So that's the case for the valid user.

202
00:08:19.070 --> 00:08:21.050
However, if it's an invalid user,

203
00:08:21.050 --> 00:08:23.070
then we need to put the else block.

204
00:08:23.070 --> 00:08:24.080
So let's go in and do that.

205
00:08:24.080 --> 00:08:29.020
What we're going to do is string error message,

206
00:08:29.020 --> 00:08:31.020
let's set it to null initially,

207
00:08:31.020 --> 00:08:32.040
otherwise you could do this,

208
00:08:32.040 --> 00:08:35.060
you could just set the message yourself

209
00:08:35.060 --> 00:08:37.000
because we're already in the else block,

210
00:08:37.000 --> 00:08:40.040
so we say invalid credentials,

211
00:08:40.040 --> 00:08:44.000
please login again,

212
00:08:44.000 --> 00:08:46.080
requesting the user to login again.

213
00:08:46.080 --> 00:08:50.050
And we'll set this error message in the request score

214
00:08:50.050 --> 00:08:51.050
as an attribute.

215
00:08:51.050 --> 00:08:53.040
So let's get hold of the request object

216
00:08:53.040 --> 00:08:55.090
and call the set attribute API

217
00:08:55.090 --> 00:09:00.030
and say error and pass on this error message to it.

218
00:09:00.030 --> 00:09:01.030
Okay.

219
00:09:01.030 --> 00:09:03.010
And the last step will be to take the user

220
00:09:03.010 --> 00:09:04.030
back to login page

221
00:09:04.030 --> 00:09:05.090
because their invalid credentials

222
00:09:05.090 --> 00:09:08.010
will have to ask the user to login again.

223
00:09:08.010 --> 00:09:11.080
So we do that using the request dispatcher API,

224
00:09:11.080 --> 00:09:12.070
so I'm going to take that,

225
00:09:12.070 --> 00:09:17.090
and fill the path of login dot jsp

226
00:09:17.090 --> 00:09:21.050
and simply call the forward API with the request

227
00:09:21.050 --> 00:09:23.080
and the response objects.

228
00:09:23.080 --> 00:09:25.080
So there we are, we have the login servlet code

229
00:09:25.080 --> 00:09:26.080
ready with us.

230
00:09:26.080 --> 00:09:29.000
The rest of the things we'll look in the next video.

