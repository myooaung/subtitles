WEBVTT
1
00:00:00.050 --> 00:00:03.020
- [Instructor] Now let's take a look at the POST request.

2
00:00:03.020 --> 00:00:06.020
Of course it's another HTTP request type

3
00:00:06.020 --> 00:00:08.060
and POST is used to POST or process

4
00:00:08.060 --> 00:00:10.090
or manipulate information on the server site.

5
00:00:10.090 --> 00:00:12.050
So when you make a request from the client to the server,

6
00:00:12.050 --> 00:00:15.010
the server is going to process that information

7
00:00:15.010 --> 00:00:17.030
and give you a response back.

8
00:00:17.030 --> 00:00:20.090
Typically, POST is used to modify data into a data store.

9
00:00:20.090 --> 00:00:25.030
Now that data store be an xfile, or it could be an XML file,

10
00:00:25.030 --> 00:00:28.000
or for that matter, it could even be a database.

11
00:00:28.000 --> 00:00:30.010
And when we say modify data,

12
00:00:30.010 --> 00:00:32.040
it means you either want to insert or record

13
00:00:32.040 --> 00:00:34.070
or you want to edit it or you want to delete it,

14
00:00:34.070 --> 00:00:39.040
all of these qualify as modified data used cases.

15
00:00:39.040 --> 00:00:42.000
So all the surfing that you guys do

16
00:00:42.000 --> 00:00:45.040
on a daily basis like registering yourself as a new user

17
00:00:45.040 --> 00:00:47.090
on a website or checking out a shopping cart,

18
00:00:47.090 --> 00:00:49.080
all of these are very typical use cases

19
00:00:49.080 --> 00:00:51.070
for the POST request.

20
00:00:51.070 --> 00:00:54.060
The data that you send along in a POST request

21
00:00:54.060 --> 00:00:57.000
is always going to be in a separate component,

22
00:00:57.000 --> 00:00:59.060
which is called payload of the request object,

23
00:00:59.060 --> 00:01:01.090
so it is never going to be exposed in the URL,

24
00:01:01.090 --> 00:01:05.080
which is why POST is considered to be a secured request,

25
00:01:05.080 --> 00:01:09.010
Moreover, the data that you can send out in a post request

26
00:01:09.010 --> 00:01:11.030
can be of unlimited character length,

27
00:01:11.030 --> 00:01:12.070
of course with a few caveats

28
00:01:12.070 --> 00:01:15.020
because it will depend upon the application

29
00:01:15.020 --> 00:01:16.060
and the server configuration

30
00:01:16.060 --> 00:01:20.040
which could possibly limit the character length.

31
00:01:20.040 --> 00:01:24.080
Lastly, POST request is a nonidempotent request.

32
00:01:24.080 --> 00:01:26.050
Let's take a look at this diagram.

33
00:01:26.050 --> 00:01:28.070
Let's say the user comes in through the browser

34
00:01:28.070 --> 00:01:31.020
and tries to check out her shopping cart.

35
00:01:31.020 --> 00:01:34.000
When she submits the request you must have already seen

36
00:01:34.000 --> 00:01:36.040
that you're asked to enter your credit card credentials

37
00:01:36.040 --> 00:01:37.050
and then when you submit them,

38
00:01:37.050 --> 00:01:41.050
you're always shown a pop up to not refresh the browser

39
00:01:41.050 --> 00:01:43.040
or go back to the previous page.

40
00:01:43.040 --> 00:01:45.020
Why do you think that happens?

41
00:01:45.020 --> 00:01:48.000
Checking out shopping cart is a POST request.

42
00:01:48.000 --> 00:01:50.080
It's going to change data on the server side.

43
00:01:50.080 --> 00:01:53.010
The money is going to be debited from the account

44
00:01:53.010 --> 00:01:56.030
and the card is going to be ordered for that user.

45
00:01:56.030 --> 00:01:57.090
So let's say if the user tries

46
00:01:57.090 --> 00:02:00.020
to check out that shopping cart again

47
00:02:00.020 --> 00:02:03.020
and over again, in this case the POST request is going

48
00:02:03.020 --> 00:02:06.010
to be made again which means the changes

49
00:02:06.010 --> 00:02:08.020
on the server side with respect

50
00:02:08.020 --> 00:02:10.090
to that request will happen all over again.

51
00:02:10.090 --> 00:02:13.050
This is not a very good situation

52
00:02:13.050 --> 00:02:17.000
because if you try to do the POST request again

53
00:02:17.000 --> 00:02:19.050
and again, the user is basically trying

54
00:02:19.050 --> 00:02:23.010
to buy the same shopping cart thrice.

55
00:02:23.010 --> 00:02:26.040
So, these kind of requests which you can not go

56
00:02:26.040 --> 00:02:31.000
and run over and over are called nonidempotent requests.

57
00:02:31.000 --> 00:02:33.070
That's because they tend to change the data

58
00:02:33.070 --> 00:02:36.020
on the server side so we have to be careful

59
00:02:36.020 --> 00:02:37.080
whenever we make a POST request

60
00:02:37.080 --> 00:02:40.040
and that's exactly why all the web applications

61
00:02:40.040 --> 00:02:44.020
show you those information messages asking you not

62
00:02:44.020 --> 00:02:48.000
to refresh your page or go back to the previous page.

