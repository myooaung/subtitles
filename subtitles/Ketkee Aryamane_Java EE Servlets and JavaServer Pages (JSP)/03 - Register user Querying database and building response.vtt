WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] Okay, now let's pick up

2
00:00:01.080 --> 00:00:03.030
from where we left off.

3
00:00:03.030 --> 00:00:06.000
So, we are going to add a method in application DAO.

4
00:00:06.000 --> 00:00:07.010
It's already added here, register user,

5
00:00:07.010 --> 00:00:11.000
which returns an int and has a parameter of the user object.

6
00:00:11.000 --> 00:00:13.050
So, we're going to take all the information extracted

7
00:00:13.050 --> 00:00:14.090
out of this user object and save it

8
00:00:14.090 --> 00:00:16.050
as a record to the database.

9
00:00:16.050 --> 00:00:17.040
Let's get started on it.

10
00:00:17.040 --> 00:00:19.070
The first step is to get the connection to the database.

11
00:00:19.070 --> 00:00:21.080
So, I'm going to quickly do that

12
00:00:21.080 --> 00:00:25.090
the way we have done for the other methods.

13
00:00:25.090 --> 00:00:26.080
Done.

14
00:00:26.080 --> 00:00:28.000
Now, let's write the insert query.

15
00:00:28.000 --> 00:00:32.070
So, I'm going to say string insert query equal to

16
00:00:32.070 --> 00:00:35.030
insert into users.

17
00:00:35.030 --> 00:00:37.090
That's the table where we want to store all the information.

18
00:00:37.090 --> 00:00:41.000
And, say values.

19
00:00:41.000 --> 00:00:42.010
So, the first one is username.

20
00:00:42.010 --> 00:00:43.040
Then, this password,

21
00:00:43.040 --> 00:00:46.020
First name, last name, age,

22
00:00:46.020 --> 00:00:47.040
and activity.

23
00:00:47.040 --> 00:00:49.010
That's the insert query.

24
00:00:49.010 --> 00:00:51.020
So, if you're wondering, these question marks,

25
00:00:51.020 --> 00:00:53.020
then, they are basically the place holders

26
00:00:53.020 --> 00:00:56.060
for the parameters that we are going to pass to this query.

27
00:00:56.060 --> 00:00:59.020
And, as for the JDBC API, we need to pass

28
00:00:59.020 --> 00:01:02.000
these parameters to a prepared statement object.

29
00:01:02.000 --> 00:01:05.010
So, we're going to get that quickly.

30
00:01:05.010 --> 00:01:08.040
Prepared statement can be gotten

31
00:01:08.040 --> 00:01:12.020
on the connection object.

32
00:01:12.020 --> 00:01:15.050
Just have to call the API and pass the query

33
00:01:15.050 --> 00:01:17.050
that you've already written

34
00:01:17.050 --> 00:01:20.010
because prepared statement demands a precompile query

35
00:01:20.010 --> 00:01:21.030
to the database.

36
00:01:21.030 --> 00:01:22.080
Alright.

37
00:01:22.080 --> 00:01:23.060
And, let's also set the parameters,

38
00:01:23.060 --> 00:01:25.050
so, I'm going to say statement

39
00:01:25.050 --> 00:01:28.010
dot set string.

40
00:01:28.010 --> 00:01:30.080
Now, the parameter indices start from one

41
00:01:30.080 --> 00:01:33.040
for a prepared statement, so parameter index number one

42
00:01:33.040 --> 00:01:35.070
is going to be username and, as I said,

43
00:01:35.070 --> 00:01:37.070
all the information we are going

44
00:01:37.070 --> 00:01:38.050
to pull from that user object.

45
00:01:38.050 --> 00:01:41.080
So, I'm going to say, get username.

46
00:01:41.080 --> 00:01:44.020
So, similarly we need to do the rest

47
00:01:44.020 --> 00:01:46.030
for other five parameters.

48
00:01:46.030 --> 00:01:48.040
So, I'm going to say set string

49
00:01:48.040 --> 00:01:50.060
parameter index number two

50
00:01:50.060 --> 00:01:54.020
and that will give me password.

51
00:01:54.020 --> 00:01:59.010
Up next is the first name,

52
00:01:59.010 --> 00:02:01.030
parameter index number three

53
00:02:01.030 --> 00:02:06.000
and that will be user dot get first name.

54
00:02:06.000 --> 00:02:09.090
Then, there is, of course, set string again

55
00:02:09.090 --> 00:02:11.060
for parameter index number four

56
00:02:11.060 --> 00:02:17.050
which is going to be the last name.

57
00:02:17.050 --> 00:02:19.090
Now, the age is an integer field

58
00:02:19.090 --> 00:02:21.090
so, I'm going to say set int this time,

59
00:02:21.090 --> 00:02:23.020
parameter index number five

60
00:02:23.020 --> 00:02:27.040
and that will be user dot get age.

61
00:02:27.040 --> 00:02:29.030
And the last one, of course, is activity.

62
00:02:29.030 --> 00:02:30.080
So, that's again a string.

63
00:02:30.080 --> 00:02:35.080
So, I'm going to say set string parameter index number six

64
00:02:35.080 --> 00:02:38.090
and user dot get activity.

65
00:02:38.090 --> 00:02:40.060
Right.

66
00:02:40.060 --> 00:02:41.090
Now, let's execute the statement

67
00:02:41.090 --> 00:02:43.090
so, for that, on line number 63,

68
00:02:43.090 --> 00:02:47.050
I'm going to just invoke the API of execute update

69
00:02:47.050 --> 00:02:50.010
which is this.

70
00:02:50.010 --> 00:02:51.080
Now, this API is going to tell me

71
00:02:51.080 --> 00:02:54.040
how many rows got affected due to the operation

72
00:02:54.040 --> 00:02:56.020
in the form of an integer.

73
00:02:56.020 --> 00:02:58.050
So, let me take an integer variable

74
00:02:58.050 --> 00:03:00.020
right there on line number 45.

75
00:03:00.020 --> 00:03:03.000
Let's call it rows affected.

76
00:03:03.000 --> 00:03:05.020
Initially let us set it to zero.

77
00:03:05.020 --> 00:03:08.070
And, on line number 64, I am going to go ahead

78
00:03:08.070 --> 00:03:11.090
and assign the output of that API call

79
00:03:11.090 --> 00:03:14.000
to that int variable.

80
00:03:14.000 --> 00:03:16.000
At the end of this, I just have to take this variable

81
00:03:16.000 --> 00:03:21.040
and return it on line number 69.

82
00:03:21.040 --> 00:03:23.050
Right, so the rows affected is going to go back

83
00:03:23.050 --> 00:03:25.060
to the calling method which will indicate

84
00:03:25.060 --> 00:03:28.050
to the calling method that you were able

85
00:03:28.050 --> 00:03:32.060
to successfully insert a record or not in the database.

86
00:03:32.060 --> 00:03:35.010
So, that's our DAO method.

87
00:03:35.010 --> 00:03:37.070
Okay, so we've got the connection, the insert query ready,

88
00:03:37.070 --> 00:03:39.010
the prepared statement is ready.

89
00:03:39.010 --> 00:03:40.030
We've set the parameters.

90
00:03:40.030 --> 00:03:41.050
We've executed the query

91
00:03:41.050 --> 00:03:44.050
and we've returned the rows affected due to this operation.

92
00:03:44.050 --> 00:03:47.000
Right, let's go to the next step.

93
00:03:47.000 --> 00:03:50.030
Now, we need to construct and send an information message

94
00:03:50.030 --> 00:03:52.030
back to the browser from the register servlet.

95
00:03:52.030 --> 00:03:54.000
So, what we're going to do is,

96
00:03:54.000 --> 00:03:56.000
let's go to the Eclipse,

97
00:03:56.000 --> 00:03:57.060
from the register user servlet,

98
00:03:57.060 --> 00:03:59.040
we've already instantiated the DAO.

99
00:03:59.040 --> 00:04:01.040
Now, on line number 36, I'm going to call

100
00:04:01.040 --> 00:04:02.070
the insert users method.

101
00:04:02.070 --> 00:04:06.000
So, I'm going to say DAO dot register user.

102
00:04:06.000 --> 00:04:08.030
That' our method and I'll pass the user bean

103
00:04:08.030 --> 00:04:10.000
as an argument.

104
00:04:10.000 --> 00:04:14.010
And, the output of this is, of course, rows.

105
00:04:14.010 --> 00:04:15.010
Right.

106
00:04:15.010 --> 00:04:17.040
Now, the next thing is depending on what you got

107
00:04:17.040 --> 00:04:20.040
in this rows returned from this API call

108
00:04:20.040 --> 00:04:22.000
we need to prepare a message.

109
00:04:22.000 --> 00:04:25.020
It could either be a success message or a failure message

110
00:04:25.020 --> 00:04:27.030
just indicating to the user

111
00:04:27.030 --> 00:04:28.080
that an operation was a success or not.

112
00:04:28.080 --> 00:04:30.080
Okay, so, we are going to do that.

113
00:04:30.080 --> 00:04:32.030
We have to check this variable.

114
00:04:32.030 --> 00:04:36.010
Let's say if rows is zero

115
00:04:36.010 --> 00:04:38.020
then, we have a problem here.

116
00:04:38.020 --> 00:04:40.050
So, on line number 40, I'm just going

117
00:04:40.050 --> 00:04:43.090
to quickly take a strong string message variable.

118
00:04:43.090 --> 00:04:47.070
Let's just stay info message,

119
00:04:47.070 --> 00:04:50.020
initially subject to null.

120
00:04:50.020 --> 00:04:52.030
And, if rows is zero, it essentially means

121
00:04:52.030 --> 00:04:53.020
that something went wrong.

122
00:04:53.020 --> 00:04:56.020
So, I'm just going to say sorry,

123
00:04:56.020 --> 00:04:59.020
an

124
00:04:59.020 --> 00:05:01.050
error occurred.

125
00:05:01.050 --> 00:05:04.000
And, if the number of rows has changed,

126
00:05:04.000 --> 00:05:05.070
it essentially means that I was able

127
00:05:05.070 --> 00:05:07.070
to insert a record so I just have

128
00:05:07.070 --> 00:05:09.090
to give a success message saying

129
00:05:09.090 --> 00:05:14.010
that a user was registered successfully.

130
00:05:14.010 --> 00:05:16.060
Great.

131
00:05:16.060 --> 00:05:18.040
Right, so now that this is done,

132
00:05:18.040 --> 00:05:20.020
we are ready with the response that we want

133
00:05:20.020 --> 00:05:22.070
to write back to the client.

134
00:05:22.070 --> 00:05:24.010
So, now that the message is ready,

135
00:05:24.010 --> 00:05:25.070
we just need to write it back to the client

136
00:05:25.070 --> 00:05:27.080
so I'm going adopt the same strategy

137
00:05:27.080 --> 00:05:30.040
that we used in our search use case.

138
00:05:30.040 --> 00:05:31.090
We don't know JSPs as of now,

139
00:05:31.090 --> 00:05:34.060
so we're going to need the entire HTML as a template.

140
00:05:34.060 --> 00:05:36.030
Replace those place holders quickly

141
00:05:36.030 --> 00:05:37.060
and then write that message back.

142
00:05:37.060 --> 00:05:40.010
So, let's go ahead and now,

143
00:05:40.010 --> 00:05:41.080
I'm going to open the search servlet

144
00:05:41.080 --> 00:05:43.070
to just copy that method.

145
00:05:43.070 --> 00:05:49.030
So, carefully, lines number 49 to 68.

146
00:05:49.030 --> 00:05:51.020
Let me copy this.

147
00:05:51.020 --> 00:05:53.030
And, go to my register users servlet

148
00:05:53.030 --> 00:05:55.060
and paste this as a separate method starting

149
00:05:55.060 --> 00:05:58.020
from line number 51.

150
00:05:58.020 --> 00:05:59.090
There we are.

151
00:05:59.090 --> 00:06:02.000
Right, so now the only thing that we need to change

152
00:06:02.000 --> 00:06:04.060
in this is the file path, of course, will be a parameter

153
00:06:04.060 --> 00:06:06.010
but the data this time is going

154
00:06:06.010 --> 00:06:07.060
to be a simple message, right.

155
00:06:07.060 --> 00:06:09.080
So, it is a

156
00:06:09.080 --> 00:06:11.010
string variable.

157
00:06:11.010 --> 00:06:12.010
That's all.

158
00:06:12.010 --> 00:06:14.040
And, what we need to do is we don't need all of this

159
00:06:14.040 --> 00:06:17.000
to be passed at all now, we just need to pass the data

160
00:06:17.000 --> 00:06:18.030
that needs to get formatted

161
00:06:18.030 --> 00:06:21.000
in the respective place holder on that page.

162
00:06:21.000 --> 00:06:22.040
Just to recap,

163
00:06:22.040 --> 00:06:24.020
let's look at the register HTML,

164
00:06:24.020 --> 00:06:26.030
there's a place holder that I've added here

165
00:06:26.030 --> 00:06:28.010
for the message to get displayed.

166
00:06:28.010 --> 00:06:29.020
That's what we're going to do.

167
00:06:29.020 --> 00:06:30.000
Right.

168
00:06:30.000 --> 00:06:32.070
So, we've done that and the last thing is we have

169
00:06:32.070 --> 00:06:35.010
to call this method from the do get.

170
00:06:35.010 --> 00:06:37.070
So, let's come here.

171
00:06:37.070 --> 00:06:40.060
Let's say string page equal to

172
00:06:40.060 --> 00:06:42.040
get HTML string

173
00:06:42.040 --> 00:06:45.010
and the

174
00:06:45.010 --> 00:06:48.060
way of passing the parameter is going to be the same

175
00:06:48.060 --> 00:06:50.090
as we did in the previous demo,

176
00:06:50.090 --> 00:06:53.030
get real path

177
00:06:53.030 --> 00:06:57.010
and the path will be slash HTML slash

178
00:06:57.010 --> 00:06:59.060
register dot HTML

179
00:06:59.060 --> 00:07:03.030
which is the relative path of that file

180
00:07:03.030 --> 00:07:05.080
and the message is going to be that info message

181
00:07:05.080 --> 00:07:08.040
that we want to put as the data.

182
00:07:08.040 --> 00:07:10.000
Once we have this ready, we just need

183
00:07:10.000 --> 00:07:12.000
to get the response object

184
00:07:12.000 --> 00:07:16.040
and write this entire page back to the client.

185
00:07:16.040 --> 00:07:18.030
Right.

186
00:07:18.030 --> 00:07:19.030
The last step will be

187
00:07:19.030 --> 00:07:21.000
we have to assign the proper attributes

188
00:07:21.000 --> 00:07:23.060
to the form element on the HTML.

189
00:07:23.060 --> 00:07:26.070
We know that for this register user servlet

190
00:07:26.070 --> 00:07:28.080
we have the URL pattern of register user

191
00:07:28.080 --> 00:07:30.010
so, I'm going to pick this up,

192
00:07:30.010 --> 00:07:31.070
go to my register HTML

193
00:07:31.070 --> 00:07:33.080
and now, assign those couple of attributes

194
00:07:33.080 --> 00:07:35.010
to the form element.

195
00:07:35.010 --> 00:07:36.040
The first one among them is action

196
00:07:36.040 --> 00:07:38.060
which is exactly the register user.

197
00:07:38.060 --> 00:07:40.050
And, the method this time, however, will be post

198
00:07:40.050 --> 00:07:43.000
because we are making a post request.

199
00:07:43.000 --> 00:07:44.000
So, that's the difference.

200
00:07:44.000 --> 00:07:45.080
The method is going to determine what

201
00:07:45.080 --> 00:07:48.000
kind of request you are going to make.

202
00:07:48.000 --> 00:07:49.060
Right.

203
00:07:49.060 --> 00:07:51.040
In the next video we are going to run this application

204
00:07:51.040 --> 00:07:53.000
and look at the changes.

