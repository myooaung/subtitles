WEBVTT
1
00:00:00.050 --> 00:00:02.050
- [Instructor] Okay let us pick up where we left off.

2
00:00:02.050 --> 00:00:03.060
Another thing to note here is

3
00:00:03.060 --> 00:00:04.070
that if you have a lot of problem

4
00:00:04.070 --> 00:00:06.060
understanding the code and the Dao class

5
00:00:06.060 --> 00:00:08.010
or the DB connection class

6
00:00:08.010 --> 00:00:12.000
please feel free to check out any JWC recorded video

7
00:00:12.000 --> 00:00:14.010
on LinkedIn Learning.

8
00:00:14.010 --> 00:00:15.060
Right, so we are in an application Dao

9
00:00:15.060 --> 00:00:17.000
and I've already got the template

10
00:00:17.000 --> 00:00:17.080
of the template of the meta ready.

11
00:00:17.080 --> 00:00:18.060
What is a meta doing?

12
00:00:18.060 --> 00:00:19.090
The name is search products.

13
00:00:19.090 --> 00:00:22.050
It will of course have the search string as a parameter

14
00:00:22.050 --> 00:00:25.030
and it is going to return me a list of products.

15
00:00:25.030 --> 00:00:27.040
And, I'm using the collection and generex feature

16
00:00:27.040 --> 00:00:28.080
of code java together.

17
00:00:28.080 --> 00:00:30.090
I will encapsulate all the information

18
00:00:30.090 --> 00:00:32.090
of the products in a product, bean.

19
00:00:32.090 --> 00:00:35.090
Let's look at that product bean quickly.

20
00:00:35.090 --> 00:00:37.080
I have a bean class, a simple java bean class,

21
00:00:37.080 --> 00:00:40.030
product ID, product image, product image path,

22
00:00:40.030 --> 00:00:42.050
and the respective getters and setters.

23
00:00:42.050 --> 00:00:44.030
So, this is a simple java bean

24
00:00:44.030 --> 00:00:47.000
and I want to encapsulate all the information in a bean

25
00:00:47.000 --> 00:00:50.080
because I want to stick to object oriented concept of Java,

26
00:00:50.080 --> 00:00:51.070
right?

27
00:00:51.070 --> 00:00:52.090
So, let's come to application Dao

28
00:00:52.090 --> 00:00:55.030
and let's get started with this method.

29
00:00:55.030 --> 00:00:58.020
So, the first thing that I want to do is get the connection

30
00:00:58.020 --> 00:00:59.060
from the DB connection class,

31
00:00:59.060 --> 00:01:03.030
so I'm going to quickly take a reference of connection

32
00:01:03.030 --> 00:01:05.080
coming from the Java SQL package

33
00:01:05.080 --> 00:01:07.060
and let's call the DB connection class

34
00:01:07.060 --> 00:01:11.040
and invoke the method of get connection to database.

35
00:01:11.040 --> 00:01:14.080
Once this is done, we need to write out the SQL query

36
00:01:14.080 --> 00:01:16.080
which is going to help us search products.

37
00:01:16.080 --> 00:01:20.020
So, that is going to be select star from products.

38
00:01:20.020 --> 00:01:22.010
That's the table from which we want

39
00:01:22.010 --> 00:01:24.000
to retrieve the information.

40
00:01:24.000 --> 00:01:25.030
And, I'm going to put a where clause.

41
00:01:25.030 --> 00:01:28.000
I'm going to say where product underscore name,

42
00:01:28.000 --> 00:01:29.050
that's the name of the column,

43
00:01:29.050 --> 00:01:33.030
like and you put the pattern,

44
00:01:33.030 --> 00:01:35.050
append the search string to it

45
00:01:35.050 --> 00:01:38.050
and then complete the pattern.

46
00:01:38.050 --> 00:01:41.050
That is how it'll look like.

47
00:01:41.050 --> 00:01:42.090
Right, so you've got the connection.

48
00:01:42.090 --> 00:01:44.020
We are ready with our query.

49
00:01:44.020 --> 00:01:47.030
Up next, we want the statement object.

50
00:01:47.030 --> 00:01:49.010
So, let's take that again coming

51
00:01:49.010 --> 00:01:54.030
from the Java dot SQL package which is this.

52
00:01:54.030 --> 00:01:56.080
Now, let us get the statement object.

53
00:01:56.080 --> 00:01:58.060
So, that will be on the connection object itself.

54
00:01:58.060 --> 00:02:02.050
You will need to invoke an API called create statement.

55
00:02:02.050 --> 00:02:04.060
And, once we do this, we just have to go

56
00:02:04.060 --> 00:02:06.070
and execute that query.

57
00:02:06.070 --> 00:02:09.010
So, for that, I'm going to take the statement reference

58
00:02:09.010 --> 00:02:11.060
and invoke that API of execute query

59
00:02:11.060 --> 00:02:13.080
and pass that query that we've written out

60
00:02:13.080 --> 00:02:16.060
on line number 50.

61
00:02:16.060 --> 00:02:17.050
Right.

62
00:02:17.050 --> 00:02:18.080
Now, once we execute the query,

63
00:02:18.080 --> 00:02:20.090
we are going to get some data from the database

64
00:02:20.090 --> 00:02:22.080
which is in the form of a result set API.

65
00:02:22.080 --> 00:02:25.060
so, I'm going to collect the output of this API call

66
00:02:25.060 --> 00:02:27.040
in the result set reference.

67
00:02:27.040 --> 00:02:30.020
Let's do that.

68
00:02:30.020 --> 00:02:32.050
Once we do this, we have to iterate this result set

69
00:02:32.050 --> 00:02:34.060
because it will be lot of product rules

70
00:02:34.060 --> 00:02:37.000
that are going to be returned out of the query.

71
00:02:37.000 --> 00:02:39.090
So, let's iterate that using a while loop.

72
00:02:39.090 --> 00:02:42.080
I'm going to say while set dot next

73
00:02:42.080 --> 00:02:44.070
and I'm going to do something here.

74
00:02:44.070 --> 00:02:47.040
So, what I'm going to do, each rule of the result set,

75
00:02:47.040 --> 00:02:49.080
I'm going to fill up in a product object.

76
00:02:49.080 --> 00:02:52.030
And, that product object, I'm going to put out in a list.

77
00:02:52.030 --> 00:02:54.050
So, let us have two reference variables here.

78
00:02:54.050 --> 00:02:56.080
I'm going to insert some call on line number 13.

79
00:02:56.080 --> 00:03:00.010
I'm first going to make a product bean reference,

80
00:03:00.010 --> 00:03:02.000
set it to null initially.

81
00:03:02.000 --> 00:03:03.060
And, on line number 14, I'm going

82
00:03:03.060 --> 00:03:08.070
to create a list of products.

83
00:03:08.070 --> 00:03:12.030
Let's just say new array list.

84
00:03:12.030 --> 00:03:14.050
This is, of course, the code Java collection API

85
00:03:14.050 --> 00:03:18.010
that I'm using.

86
00:03:18.010 --> 00:03:19.050
There you go.

87
00:03:19.050 --> 00:03:22.090
Now, let's come to this while loop on line number 25.

88
00:03:22.090 --> 00:03:29.090
Let's go inside and let's instantiate that product object.

89
00:03:29.090 --> 00:03:32.000
And, let's quickly set the data to it.

90
00:03:32.000 --> 00:03:35.030
So, I'm going to say product dot set product ID.

91
00:03:35.030 --> 00:03:36.030
The first one.

92
00:03:36.030 --> 00:03:38.050
And, that is going to come from the result set

93
00:03:38.050 --> 00:03:40.020
in the form of an integer value.

94
00:03:40.020 --> 00:03:44.040
So, I'm going to say set dot get int

95
00:03:44.040 --> 00:03:46.010
and mention the column ID,

96
00:03:46.010 --> 00:03:48.080
which is nothing but product underscore ID.

97
00:03:48.080 --> 00:03:51.050
That's how it looks.

98
00:03:51.050 --> 00:03:53.040
The next thing that you do is

99
00:03:53.040 --> 00:03:55.030
set the rest of the parameters.

100
00:03:55.030 --> 00:04:00.000
So, product dot set product image path, let's say.

101
00:04:00.000 --> 00:04:03.000
And, this going to come as a string.

102
00:04:03.000 --> 00:04:06.040
So, let me get string and mention the name

103
00:04:06.040 --> 00:04:09.040
of the column for the image path.

104
00:04:09.040 --> 00:04:11.030
Similarly, I'll have to do the rest

105
00:04:11.030 --> 00:04:14.050
of this stuff for the product name.

106
00:04:14.050 --> 00:04:15.030
The third one,

107
00:04:15.030 --> 00:04:17.000
the third parameter.

108
00:04:17.000 --> 00:04:19.080
So, that also is coming as a string.

109
00:04:19.080 --> 00:04:24.000
So, I just need to go ahead and mention the name

110
00:04:24.000 --> 00:04:25.090
of the column.

111
00:04:25.090 --> 00:04:27.040
Right.

112
00:04:27.040 --> 00:04:29.020
Now, all of these errors that you see

113
00:04:29.020 --> 00:04:30.030
on the call statements are

114
00:04:30.030 --> 00:04:31.070
because all of these could possibly

115
00:04:31.070 --> 00:04:33.050
throw you an SQL exception.

116
00:04:33.050 --> 00:04:35.040
So, we're going to encapsulate all of this code

117
00:04:35.040 --> 00:04:37.000
inside a try-catch block.

118
00:04:37.000 --> 00:04:40.080
So, I'm going to take lines number 17 to 31,

119
00:04:40.080 --> 00:04:45.000
cut them out, and put them quickly inside a try block.

120
00:04:45.000 --> 00:04:47.070
Once that's done, let's also go ahead

121
00:04:47.070 --> 00:04:56.030
and write out the catch block for this.

122
00:04:56.030 --> 00:04:59.080
So, this is all a part of the exception handling that we do

123
00:04:59.080 --> 00:05:01.010
using the Java standard edition APIs.

124
00:05:01.010 --> 00:05:02.030
I'm just going to say print stack trace

125
00:05:02.030 --> 00:05:04.030
because we are in the development environment.

126
00:05:04.030 --> 00:05:05.080
Right.

127
00:05:05.080 --> 00:05:08.010
Now, once we clear the product object,

128
00:05:08.010 --> 00:05:10.000
we are going to also quickly add it

129
00:05:10.000 --> 00:05:13.050
to that products list that we created.

130
00:05:13.050 --> 00:05:16.070
Let's fill it up in that products list, the bean.

131
00:05:16.070 --> 00:05:19.060
And, once we do this, let's come at the end

132
00:05:19.060 --> 00:05:23.030
which is on line number 40.

133
00:05:23.030 --> 00:05:27.030
And, I'm just going to return that products list.

134
00:05:27.030 --> 00:05:28.020
Right.

135
00:05:28.020 --> 00:05:31.030
So, in totality this method gets a connection,

136
00:05:31.030 --> 00:05:33.070
writes the query to search a product,

137
00:05:33.070 --> 00:05:35.020
creates a statement,

138
00:05:35.020 --> 00:05:37.090
takes all the rules inside a result set,

139
00:05:37.090 --> 00:05:41.000
iterates it, fills every rule into a product object,

140
00:05:41.000 --> 00:05:42.080
adds a product into the products list,

141
00:05:42.080 --> 00:05:44.090
and finally returns that products list

142
00:05:44.090 --> 00:05:47.000
to the calling method.

