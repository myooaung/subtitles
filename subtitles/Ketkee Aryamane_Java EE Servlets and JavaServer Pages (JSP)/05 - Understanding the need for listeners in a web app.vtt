WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] Now, let's talk about event

2
00:00:01.080 --> 00:00:03.030
and event listeners.

3
00:00:03.030 --> 00:00:05.010
Let's first understand what are events

4
00:00:05.010 --> 00:00:08.010
in Java Enterprise Edition.

5
00:00:08.010 --> 00:00:10.070
They're basically notifications for a change

6
00:00:10.070 --> 00:00:12.080
in the state of certain objects.

7
00:00:12.080 --> 00:00:14.060
Now, when we say the state of certain objects,

8
00:00:14.060 --> 00:00:17.090
it means, a lot of things, let's see what that is.

9
00:00:17.090 --> 00:00:19.090
The occur at following levels.

10
00:00:19.090 --> 00:00:22.080
One is; if there's a change in the ServletContext object

11
00:00:22.080 --> 00:00:26.010
which is at the application level and then there's a change

12
00:00:26.010 --> 00:00:28.080
in the HTTPSession object which is at the session level,

13
00:00:28.080 --> 00:00:31.060
this is the one that we used for session management,

14
00:00:31.060 --> 00:00:35.000
and if there's a change in HTTPServletRequest object,

15
00:00:35.000 --> 00:00:36.080
which is at the request level.

16
00:00:36.080 --> 00:00:39.050
So when we say that there's a change in the state

17
00:00:39.050 --> 00:00:42.010
of these objects, what do we mean by that?

18
00:00:42.010 --> 00:00:46.070
It means that, there's a change in either the life cycle

19
00:00:46.070 --> 00:00:50.030
or the information that you may be added or removed

20
00:00:50.030 --> 00:00:52.070
or replaced from these objects.

21
00:00:52.070 --> 00:00:55.070
So it could mean either of them.

22
00:00:55.070 --> 00:00:57.020
Now, when can events occur?

23
00:00:57.020 --> 00:01:00.030
Let's see all the categories of events that can occur

24
00:01:00.030 --> 00:01:03.030
in a Java Enterprise application.

25
00:01:03.030 --> 00:01:07.000
Let's say you deploy and you undeploy your application,

26
00:01:07.000 --> 00:01:09.080
so that's at the context level, at the application level,

27
00:01:09.080 --> 00:01:12.010
so, those are the points where events could occur

28
00:01:12.010 --> 00:01:14.020
in your application.

29
00:01:14.020 --> 00:01:16.080
The other thing is, when you create a session,

30
00:01:16.080 --> 00:01:18.000
when the user logs in,

31
00:01:18.000 --> 00:01:19.060
let's say, if you've always set up a session

32
00:01:19.060 --> 00:01:22.040
when the user logs out, you invalidate a session,

33
00:01:22.040 --> 00:01:24.040
so those also are the appropriate points

34
00:01:24.040 --> 00:01:29.010
where events can get triggered for your app.

35
00:01:29.010 --> 00:01:30.090
Let's say the client hit a request

36
00:01:30.090 --> 00:01:32.050
and it finally entered your Servlet

37
00:01:32.050 --> 00:01:34.010
and the request processing started, that also

38
00:01:34.010 --> 00:01:37.010
is going to be an event for the application.

39
00:01:37.010 --> 00:01:39.070
Then of course in the Servlet context

40
00:01:39.070 --> 00:01:42.050
or you have the session or you have the request,

41
00:01:42.050 --> 00:01:45.080
if you add an attribute or remove an attribute,

42
00:01:45.080 --> 00:01:49.000
that also could be the place where you have events

43
00:01:49.000 --> 00:01:50.060
being triggered.

44
00:01:50.060 --> 00:01:52.000
Session migration,

45
00:01:52.000 --> 00:01:54.060
so this typically happens in a distributed environment

46
00:01:54.060 --> 00:01:56.050
or wherever you have set load balancing.

47
00:01:56.050 --> 00:01:57.080
So, let's say there are two machines

48
00:01:57.080 --> 00:02:00.000
on which the application is deployed.

49
00:02:00.000 --> 00:02:02.050
The first few requests come to the first machine

50
00:02:02.050 --> 00:02:05.020
and then the next few requests go to the other one,

51
00:02:05.020 --> 00:02:06.090
so you may need to move the session

52
00:02:06.090 --> 00:02:09.020
from one machine to another and that's where,

53
00:02:09.020 --> 00:02:13.090
you could have these events generated for session migration.

54
00:02:13.090 --> 00:02:15.040
Then we often have this requirement

55
00:02:15.040 --> 00:02:19.050
where we store a lot of information in the session

56
00:02:19.050 --> 00:02:22.020
as attributes and those attributes could be objects.

57
00:02:22.020 --> 00:02:24.060
So let's say an object is binding itself to a session,

58
00:02:24.060 --> 00:02:26.040
unbinding itself from the session,

59
00:02:26.040 --> 00:02:28.010
so those are also the points

60
00:02:28.010 --> 00:02:31.000
where you could have events triggered for your app.

61
00:02:31.000 --> 00:02:33.010
So then, what are event listeners in JEE?

62
00:02:33.010 --> 00:02:34.010
Let's understand that now.

63
00:02:34.010 --> 00:02:37.010
Now that we know what are events, event listeners

64
00:02:37.010 --> 00:02:39.080
are basically classes, that can be written

65
00:02:39.080 --> 00:02:42.030
in order to respond to those events.

66
00:02:42.030 --> 00:02:45.010
You can trap those events, you can capture them

67
00:02:45.010 --> 00:02:47.040
and then you can perform the logic that is necessary

68
00:02:47.040 --> 00:02:49.040
for your application.

69
00:02:49.040 --> 00:02:50.060
When you talk about listeners,

70
00:02:50.060 --> 00:02:53.040
listener classes can be created by inheriting

71
00:02:53.040 --> 00:02:56.040
the appropriate interface or interfaces

72
00:02:56.040 --> 00:02:59.000
from either the java extract servlet package

73
00:02:59.000 --> 00:03:02.060
or java extract servlet.http package.

74
00:03:02.060 --> 00:03:04.010
Listeners are also going to be crucial

75
00:03:04.010 --> 00:03:05.040
because they help you a lot

76
00:03:05.040 --> 00:03:07.080
for efficient resource management

77
00:03:07.080 --> 00:03:09.090
and automated task processing.

78
00:03:09.090 --> 00:03:11.080
Let's think about a scenario.

79
00:03:11.080 --> 00:03:14.030
We all know that managing database connection

80
00:03:14.030 --> 00:03:18.010
is always a very critical factor in any application.

81
00:03:18.010 --> 00:03:19.070
If you look at our application,

82
00:03:19.070 --> 00:03:21.080
we've always been setting up the database connection

83
00:03:21.080 --> 00:03:23.020
in the Dao class.

84
00:03:23.020 --> 00:03:26.020
And the Dao class's APIs are only going to get called

85
00:03:26.020 --> 00:03:28.090
when a request comes in from the user.

86
00:03:28.090 --> 00:03:31.040
So when a request comes in, it first comes to the Servlet

87
00:03:31.040 --> 00:03:34.000
and then from the Servlet, we traverse to the Dao,

88
00:03:34.000 --> 00:03:38.020
and then the Dao is going to setup the connection for us.

89
00:03:38.020 --> 00:03:40.000
But now think of this scenario.

90
00:03:40.000 --> 00:03:42.080
Let's say a request came in, and it entered the servlet.

91
00:03:42.080 --> 00:03:44.040
From the servlet we call the Dao.

92
00:03:44.040 --> 00:03:47.090
Now when we were trying to setup the connection in Dao,

93
00:03:47.090 --> 00:03:49.050
let's say the database server is down.

94
00:03:49.050 --> 00:03:51.070
If that is the case you will never be able to setup

95
00:03:51.070 --> 00:03:55.080
a connection and then the entire cycle of that request

96
00:03:55.080 --> 00:03:57.010
is going to fail and it will be an embarrassing

97
00:03:57.010 --> 00:03:59.030
situation for the application..

98
00:03:59.030 --> 00:04:01.080
Instead of this, can we do something like,

99
00:04:01.080 --> 00:04:04.060
we could actually setup the database connection right

100
00:04:04.060 --> 00:04:08.040
at the point where we are deploying our application.

101
00:04:08.040 --> 00:04:10.050
So even let's say when we are deploying our application

102
00:04:10.050 --> 00:04:12.040
and the database server is down,

103
00:04:12.040 --> 00:04:14.090
we can just shutdown the application so that no user

104
00:04:14.090 --> 00:04:16.000
can access it.

105
00:04:16.000 --> 00:04:18.060
That will be a way better situation than the one

106
00:04:18.060 --> 00:04:21.050
where you have got a request already and then the server

107
00:04:21.050 --> 00:04:23.080
is down and you're not able to do anything.

108
00:04:23.080 --> 00:04:26.020
So that way listeners help you to do efficient

109
00:04:26.020 --> 00:04:28.040
resource management and they will also help you to

110
00:04:28.040 --> 00:04:32.070
automate certain tasks for your application.

111
00:04:32.070 --> 00:04:36.050
Now let's understand what is the use case scenario that

112
00:04:36.050 --> 00:04:38.050
we are going to implement for listeners as a part

113
00:04:38.050 --> 00:04:40.070
of our H plus port application.

114
00:04:40.070 --> 00:04:43.060
So far in all our previous flows, we have a servlet

115
00:04:43.060 --> 00:04:44.080
and then we go to Dao,

116
00:04:44.080 --> 00:04:46.060
and as I said, we setup the connection

117
00:04:46.060 --> 00:04:50.020
there which then finally talks to the database.

118
00:04:50.020 --> 00:04:51.060
Now what we're going to do is we're going to do this

119
00:04:51.060 --> 00:04:54.070
entire job of setting up the database connection

120
00:04:54.070 --> 00:04:58.020
inside our listener class and we're going to pickup that

121
00:04:58.020 --> 00:05:00.080
listener class which is going to get executed when

122
00:05:00.080 --> 00:05:04.040
your application gets deployed or undeployed.

123
00:05:04.040 --> 00:05:05.020
Okay.

124
00:05:05.020 --> 00:05:07.090
So now, when you will implement the listener,

125
00:05:07.090 --> 00:05:09.070
the flow will be like this.

126
00:05:09.070 --> 00:05:12.030
The listener at the deployment time itself is going to

127
00:05:12.030 --> 00:05:15.010
get executed and it'll setup the db connection

128
00:05:15.010 --> 00:05:16.020
object for you.

129
00:05:16.020 --> 00:05:18.080
Now whenever a request comes in from the user,

130
00:05:18.080 --> 00:05:21.060
any of your servlets can retrieve the connection

131
00:05:21.060 --> 00:05:24.060
which was setup by the listener and pass it to the Dao

132
00:05:24.060 --> 00:05:27.020
and subsequently the Dao will talk to the database

133
00:05:27.020 --> 00:05:31.010
and give you the data or basically a database transaction.

134
00:05:31.010 --> 00:05:33.000
We will look at that in the next video.

