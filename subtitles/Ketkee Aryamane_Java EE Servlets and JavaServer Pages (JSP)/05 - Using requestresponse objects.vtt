WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Instructor] Now let us talk about another API

2
00:00:02.020 --> 00:00:04.080
which is the HTTPServletRequest object.

3
00:00:04.080 --> 00:00:06.090
We have been using this API over and over

4
00:00:06.090 --> 00:00:09.000
in all our previous demos.

5
00:00:09.000 --> 00:00:10.030
Now whenever you make a request

6
00:00:10.030 --> 00:00:12.030
from the client to the server,

7
00:00:12.030 --> 00:00:15.080
the request is represented in terms of this object.

8
00:00:15.080 --> 00:00:18.090
This is the one which extends the ServletRequest API

9
00:00:18.090 --> 00:00:20.080
and provides all the request information

10
00:00:20.080 --> 00:00:23.030
to the HTTP servlets.

11
00:00:23.030 --> 00:00:27.010
It consists of two parts, the headers and the body.

12
00:00:27.010 --> 00:00:29.010
The headers is all the extra information

13
00:00:29.010 --> 00:00:31.030
that you may need for the request,

14
00:00:31.030 --> 00:00:33.060
let's say, what type of content are you sending

15
00:00:33.060 --> 00:00:35.030
from the client to the server.

16
00:00:35.030 --> 00:00:37.050
Or let's say what is the browser information.

17
00:00:37.050 --> 00:00:38.070
Which is the browser through which

18
00:00:38.070 --> 00:00:40.020
you are making this request?

19
00:00:40.020 --> 00:00:42.020
So all this kind of extra information

20
00:00:42.020 --> 00:00:44.030
sits usually in the form of headers.

21
00:00:44.030 --> 00:00:46.070
The body, however, will contain the data

22
00:00:46.070 --> 00:00:49.060
that you are sending along with the request.

23
00:00:49.060 --> 00:00:52.040
As for the get request, the data is never in the body

24
00:00:52.040 --> 00:00:54.060
but it is always visible in the URL

25
00:00:54.060 --> 00:00:57.010
in the form of a query string.

26
00:00:57.010 --> 00:00:59.050
HTTPServletRequest object is a huge one

27
00:00:59.050 --> 00:01:01.020
but we are just going to take a look

28
00:01:01.020 --> 00:01:03.050
at some important API calls.

29
00:01:03.050 --> 00:01:05.070
The first one is request.getSession

30
00:01:05.070 --> 00:01:08.040
which will help you get the HTTPSession API

31
00:01:08.040 --> 00:01:11.060
responsible for doing session management in the application.

32
00:01:11.060 --> 00:01:13.020
We will talk about session management

33
00:01:13.020 --> 00:01:15.040
in the later part of this course.

34
00:01:15.040 --> 00:01:18.030
We have another API call which is request.getHeader,

35
00:01:18.030 --> 00:01:20.080
so when you pass the header name as an argument

36
00:01:20.080 --> 00:01:25.010
it'll return you the value of that header through this API.

37
00:01:25.010 --> 00:01:28.050
The next API call is request.getRequestURI,

38
00:01:28.050 --> 00:01:31.000
which is going to return you the part

39
00:01:31.000 --> 00:01:34.010
starting from the protocol name up to the query string

40
00:01:34.010 --> 00:01:36.000
for a particular URL.

41
00:01:36.000 --> 00:01:39.010
request.getParameter is going to return you the data

42
00:01:39.010 --> 00:01:41.030
from the requester object and we've used this

43
00:01:41.030 --> 00:01:43.090
in our previous videos as well.

44
00:01:43.090 --> 00:01:46.050
request.getCookies call is going to get you

45
00:01:46.050 --> 00:01:49.010
all the cookies that the browser sent

46
00:01:49.010 --> 00:01:51.050
as a part of a particular request.

47
00:01:51.050 --> 00:01:53.030
We are going to look at cookies when we take a look

48
00:01:53.030 --> 00:01:55.040
at the Session Management topic.

49
00:01:55.040 --> 00:01:58.000
And lastly, you have request.getMethod,

50
00:01:58.000 --> 00:02:00.030
which will return you the kind of request

51
00:02:00.030 --> 00:02:02.030
that you made from your client.

52
00:02:02.030 --> 00:02:04.040
So, let's say you will make a GET request

53
00:02:04.040 --> 00:02:07.010
and request.getMethod is going to return you GET.

54
00:02:07.010 --> 00:02:09.080
If you make a POST request then request.getMethod

55
00:02:09.080 --> 00:02:13.010
is going to return as POST and so on and so forth.

56
00:02:13.010 --> 00:02:15.060
Please remember that in case of the POST request

57
00:02:15.060 --> 00:02:18.040
the body is going to hold that payload component

58
00:02:18.040 --> 00:02:20.050
which has got all the data, and hence

59
00:02:20.050 --> 00:02:23.040
that data is never going to be visible in the URL.

60
00:02:23.040 --> 00:02:26.070
So that's about that HTTPServletRequest object.

61
00:02:26.070 --> 00:02:31.000
Now let us talk about the HTTPServletResponse object.

62
00:02:31.000 --> 00:02:33.020
The way we have HTTPServletRequest of course

63
00:02:33.020 --> 00:02:35.040
response is the other bit of that entire

64
00:02:35.040 --> 00:02:37.000
chain of communication that happens

65
00:02:37.000 --> 00:02:39.030
between the client and the server.

66
00:02:39.030 --> 00:02:43.090
HTTPServletResponse API extends the ServletResponse API

67
00:02:43.090 --> 00:02:46.060
and represents all the response information

68
00:02:46.060 --> 00:02:49.020
that you want to write back to the client.

69
00:02:49.020 --> 00:02:51.060
Of course, this again is a huge object,

70
00:02:51.060 --> 00:02:54.060
but let's look at a few important API calls.

71
00:02:54.060 --> 00:02:57.080
The first one is response.sendRedirect,

72
00:02:57.080 --> 00:02:59.070
which demands a string URL.

73
00:02:59.070 --> 00:03:01.050
If you remember and recall,

74
00:03:01.050 --> 00:03:03.050
we have already discussed this API

75
00:03:03.050 --> 00:03:05.010
in the redirection concept,

76
00:03:05.010 --> 00:03:07.010
which helps us to do redirection that's going out

77
00:03:07.010 --> 00:03:10.090
to another application altogether.

78
00:03:10.090 --> 00:03:13.070
Another API call is response.addCookie.

79
00:03:13.070 --> 00:03:16.060
If you exclusively want to save some cookies

80
00:03:16.060 --> 00:03:19.010
from the server back to the browser software,

81
00:03:19.010 --> 00:03:20.020
then you can do that

82
00:03:20.020 --> 00:03:24.060
by invoking this API call called addCookie.

83
00:03:24.060 --> 00:03:26.060
This demands a cookie object,

84
00:03:26.060 --> 00:03:28.020
and you can store the cookie name.

85
00:03:28.020 --> 00:03:29.080
You can also store the time for which

86
00:03:29.080 --> 00:03:32.080
this cookie's going to remain alive in the browser.

87
00:03:32.080 --> 00:03:34.090
That entire cookie object can be returned

88
00:03:34.090 --> 00:03:37.010
as part of the response.

89
00:03:37.010 --> 00:03:40.030
The next one is response.EncodeURL.

90
00:03:40.030 --> 00:03:42.030
Now this is something that's got to do with

91
00:03:42.030 --> 00:03:46.020
the session management again, as a part of URL rewriting,

92
00:03:46.020 --> 00:03:49.040
that we will see in the later part of this course.

93
00:03:49.040 --> 00:03:53.040
Response.setContentType will give you the option

94
00:03:53.040 --> 00:03:57.060
to set a proper content value for the response.

95
00:03:57.060 --> 00:04:00.020
Let's say I'm trying to write a response

96
00:04:00.020 --> 00:04:02.030
which is in the form of a PDF document.

97
00:04:02.030 --> 00:04:04.090
Or let's say it's an HTML response.

98
00:04:04.090 --> 00:04:07.080
So I can exclusively set the content type

99
00:04:07.080 --> 00:04:12.010
to this response object, using this API call.

100
00:04:12.010 --> 00:04:15.030
Next API is response.getStatus.

101
00:04:15.030 --> 00:04:18.040
Whenever a request is sent from the client to the server,

102
00:04:18.040 --> 00:04:19.090
the server is going to do the processing

103
00:04:19.090 --> 00:04:22.070
and send you a response back.

104
00:04:22.070 --> 00:04:26.040
Now the response could either be a success or a failure.

105
00:04:26.040 --> 00:04:31.020
Each of these responses always has an integer status code.

106
00:04:31.020 --> 00:04:34.060
That is what you get out of this API call.

107
00:04:34.060 --> 00:04:35.050
So let's say, if the status is 200,

108
00:04:35.050 --> 00:04:38.070
it means it's a success operation.

109
00:04:38.070 --> 00:04:41.000
If the status is 404, it means

110
00:04:41.000 --> 00:04:44.020
it was not able to find one of your pages.

111
00:04:44.020 --> 00:04:47.080
If it was 500, it means it's some internal server error.

112
00:04:47.080 --> 00:04:50.000
If it is 403, then it means

113
00:04:50.000 --> 00:04:51.090
you're forbidden to access that resource.

114
00:04:51.090 --> 00:04:54.040
So there are a lot of status codes like these,

115
00:04:54.040 --> 00:04:58.050
and you'll be able to fetch that information via this API.

116
00:04:58.050 --> 00:05:00.090
Lastly, we have response.getWriter,

117
00:05:00.090 --> 00:05:02.010
which we have been using all over

118
00:05:02.010 --> 00:05:04.020
to get the print writer

119
00:05:04.020 --> 00:05:07.050
and write some response to the web page.

120
00:05:07.050 --> 00:05:09.000
Like the request object,

121
00:05:09.000 --> 00:05:12.020
the response object also has got headers and body.

122
00:05:12.020 --> 00:05:14.090
Body is exactly the place where all the response

123
00:05:14.090 --> 00:05:18.000
that you have written out from the servlet sits in,

124
00:05:18.000 --> 00:05:20.060
whereas the headers contain the extra information,

125
00:05:20.060 --> 00:05:22.050
like, say, the content type, et cetera,

126
00:05:22.050 --> 00:05:24.090
that goes as a part of the response.

127
00:05:24.090 --> 00:05:29.000
So that's what HTTPServletResponse object looks like.

