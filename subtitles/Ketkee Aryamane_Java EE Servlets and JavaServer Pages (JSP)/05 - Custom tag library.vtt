WEBVTT
1
00:00:00.050 --> 00:00:02.050
- [Instructor] Okay, so now that we have seen

2
00:00:02.050 --> 00:00:04.060
JSP standard actions, expression language,

3
00:00:04.060 --> 00:00:08.080
JSTL, let's say that you want to implement a requirement

4
00:00:08.080 --> 00:00:13.070
which is not allowing you to choose any tag from JST.

5
00:00:13.070 --> 00:00:16.030
Let's say that's something that you want to implement

6
00:00:16.030 --> 00:00:18.060
for which there is no tag existing

7
00:00:18.060 --> 00:00:21.050
under the Java server pages tag library.

8
00:00:21.050 --> 00:00:24.080
So, in that case, you can make your own tag library

9
00:00:24.080 --> 00:00:26.080
which is the custom tag library defined

10
00:00:26.080 --> 00:00:28.050
by the developer, right.

11
00:00:28.050 --> 00:00:30.060
So, custom tag library is basically going

12
00:00:30.060 --> 00:00:34.040
to consist of a user-defined JSP element

13
00:00:34.040 --> 00:00:35.060
and, when it's a library,

14
00:00:35.060 --> 00:00:36.070
of course it can contain one

15
00:00:36.070 --> 00:00:38.040
or more tags bundled together

16
00:00:38.040 --> 00:00:41.050
and you can bundle them in a jar file

17
00:00:41.050 --> 00:00:43.050
and make sure that the jar file is used

18
00:00:43.050 --> 00:00:44.080
by a few other projects

19
00:00:44.080 --> 00:00:47.080
so that it promotes re-useability as well.

20
00:00:47.080 --> 00:00:50.010
Now, in order to develop a custom tag library,

21
00:00:50.010 --> 00:00:53.080
you of course need to write your own tags

22
00:00:53.080 --> 00:00:57.020
but as we saw, that when we write a tag on a JSP,

23
00:00:57.020 --> 00:00:58.030
it's not just a tag.

24
00:00:58.030 --> 00:01:01.070
There's some Java code that executes behind the tag, right?

25
00:01:01.070 --> 00:01:03.070
So whenever, the JSP executes and runs,

26
00:01:03.070 --> 00:01:05.040
the tag makes sure that there's some Java

27
00:01:05.040 --> 00:01:07.080
code run behind the scenes.

28
00:01:07.080 --> 00:01:09.060
Now, when we write our own tag library

29
00:01:09.060 --> 00:01:12.070
which means we will have to define what that tag is,

30
00:01:12.070 --> 00:01:15.080
what is the name, what are the attributes to the tag,

31
00:01:15.080 --> 00:01:17.080
and then what is the Java code

32
00:01:17.080 --> 00:01:19.070
that is going to run behind the scenes

33
00:01:19.070 --> 00:01:23.050
when that tag executes on your JSP?

34
00:01:23.050 --> 00:01:26.090
So, as for the informational folder tags in your library,

35
00:01:26.090 --> 00:01:29.060
you will have to define a descriptor file.

36
00:01:29.060 --> 00:01:32.040
Now, that descriptor is a tag library descriptor

37
00:01:32.040 --> 00:01:34.030
which is of course an XML document

38
00:01:34.030 --> 00:01:36.070
and that's going to contain the information

39
00:01:36.070 --> 00:01:39.050
about the entire tag library as a whole

40
00:01:39.050 --> 00:01:42.080
and it also gives you the information about each tag

41
00:01:42.080 --> 00:01:45.010
that is going to be contained in the library.

42
00:01:45.010 --> 00:01:47.070
So, you may choose to develop a set of tags.

43
00:01:47.070 --> 00:01:50.000
Each tag will have it's own unique job to do

44
00:01:50.000 --> 00:01:52.020
and each tag will also have it's attributes

45
00:01:52.020 --> 00:01:54.000
so all of this information you're going

46
00:01:54.000 --> 00:01:57.040
to describe in a tag library descriptor

47
00:01:57.040 --> 00:02:00.050
which is an XML document.

48
00:02:00.050 --> 00:02:02.070
Now, the tag library descriptor file names

49
00:02:02.070 --> 00:02:05.050
must have the extension of a .tld

50
00:02:05.050 --> 00:02:09.080
so it's an XML document but the extension will be a .tld

51
00:02:09.080 --> 00:02:12.010
and it must be placed

52
00:02:12.010 --> 00:02:15.010
or packaged inside the WEB-INF directory.

53
00:02:15.010 --> 00:02:16.070
So we already know this directory,

54
00:02:16.070 --> 00:02:18.070
the web information, and we'll have

55
00:02:18.070 --> 00:02:20.090
to place the file under this directory

56
00:02:20.090 --> 00:02:23.080
or maybe a sub-directory of the WAR file.

57
00:02:23.080 --> 00:02:26.020
So you've seen the WAR structure in the first videos

58
00:02:26.020 --> 00:02:29.010
of this post so we know what the WAR structure looks like

59
00:02:29.010 --> 00:02:33.000
and it is necessary that you place your tld and a WEB-INF.

60
00:02:33.000 --> 00:02:34.070
The custom tag may look like this.

61
00:02:34.070 --> 00:02:36.070
So, let's say you have an angled bracket

62
00:02:36.070 --> 00:02:39.040
and my tags, colon, format date.

63
00:02:39.040 --> 00:02:41.090
So, maybe format date is the name of the tag

64
00:02:41.090 --> 00:02:45.040
and my tags is the prefix that you have chosen

65
00:02:45.040 --> 00:02:47.030
for your tag library.

66
00:02:47.030 --> 00:02:49.020
Let's say when you talked about JSTL,

67
00:02:49.020 --> 00:02:52.020
we had c as the prefix for the code module,

68
00:02:52.020 --> 00:02:55.030
we had fmt as the prefix for the fmt module,

69
00:02:55.030 --> 00:03:00.030
so likewise, you can define prefix for your own tag library.

70
00:03:00.030 --> 00:03:01.030
So, what are the tasks

71
00:03:01.030 --> 00:03:03.060
that a custom tag library could perform?

72
00:03:03.060 --> 00:03:05.000
You could produce some output

73
00:03:05.000 --> 00:03:07.050
like say you could run some logic

74
00:03:07.050 --> 00:03:10.000
and then the entire output of

75
00:03:10.000 --> 00:03:12.090
that logic would be printed as an output of the JSP

76
00:03:12.090 --> 00:03:15.020
or let's say you could have just an empty tag

77
00:03:15.020 --> 00:03:17.050
which will perform some server-side operations

78
00:03:17.050 --> 00:03:20.040
for the JSP page or maybe you could have an empty tag

79
00:03:20.040 --> 00:03:22.060
which creates an object that can be referenced

80
00:03:22.060 --> 00:03:25.050
by the rest of the page like say a scripting variable

81
00:03:25.050 --> 00:03:26.060
or something like that

82
00:03:26.060 --> 00:03:28.030
or you could also have an empty tag

83
00:03:28.030 --> 00:03:31.060
which could insert content into some portions of the page.

84
00:03:31.060 --> 00:03:33.060
So basically, not only these four,

85
00:03:33.060 --> 00:03:34.090
but there are many other tasks

86
00:03:34.090 --> 00:03:36.080
that a custom tag library can do

87
00:03:36.080 --> 00:03:39.090
so, basically, when you know that there is a job

88
00:03:39.090 --> 00:03:42.050
that you have in your requirements specification,

89
00:03:42.050 --> 00:03:47.000
which cannot be done by a tag from the JSTL library,

90
00:03:47.000 --> 00:03:51.000
then you go ahead and develop your own.

91
00:03:51.000 --> 00:03:53.080
Okay, so now let's talk about the tag handler API.

92
00:03:53.080 --> 00:03:56.070
So, as we said, when we put a tag on the JSP,

93
00:03:56.070 --> 00:03:59.090
it's also going to execute some Java code behind the scenes.

94
00:03:59.090 --> 00:04:01.060
So this is exactly we need to understand

95
00:04:01.060 --> 00:04:03.060
what kind of class you will have to write.

96
00:04:03.060 --> 00:04:06.020
Now, when you talk about a class

97
00:04:06.020 --> 00:04:09.080
that you have to write for the custom tag,

98
00:04:09.080 --> 00:04:13.020
it's basically talking about the tag handler API.

99
00:04:13.020 --> 00:04:16.090
Now, whenever a JSP contains a custom tag

100
00:04:16.090 --> 00:04:19.030
and that JSP is going to be converted

101
00:04:19.030 --> 00:04:22.060
into the sublet class in the translation process,

102
00:04:22.060 --> 00:04:24.010
then that tag that you've written out

103
00:04:24.010 --> 00:04:27.060
in the JSP is converted to the methods

104
00:04:27.060 --> 00:04:31.020
on the tag handler class that you've written for that tag.

105
00:04:31.020 --> 00:04:32.090
That's how it works, right.

106
00:04:32.090 --> 00:04:34.090
So it is going to call the necessary operations

107
00:04:34.090 --> 00:04:37.040
on your tag handler class and then execute

108
00:04:37.040 --> 00:04:39.020
and print the output for you.

109
00:04:39.020 --> 00:04:40.060
So, the custom tag handler class

110
00:04:40.060 --> 00:04:42.070
that I write in my application,

111
00:04:42.070 --> 00:04:45.050
must use one of the following.

112
00:04:45.050 --> 00:04:47.050
You either use a classic handler

113
00:04:47.050 --> 00:04:50.070
which consists of the tag, body tag,

114
00:04:50.070 --> 00:04:53.000
and iteration tag interfaces,

115
00:04:53.000 --> 00:04:55.060
or you could use the simple tag handlers

116
00:04:55.060 --> 00:04:58.080
which consists of the simple tag interface.

117
00:04:58.080 --> 00:05:01.040
An even simpler version will be

118
00:05:01.040 --> 00:05:05.060
to just extend the abstract class called simple tag support

119
00:05:05.060 --> 00:05:09.010
that already implements the simple tag interface.

120
00:05:09.010 --> 00:05:11.010
So, when you actually extend an abstract class,

121
00:05:11.010 --> 00:05:13.090
what happens is that it already comes ahead

122
00:05:13.090 --> 00:05:15.070
with some convenient functionality

123
00:05:15.070 --> 00:05:16.090
that you really don't have to sit

124
00:05:16.090 --> 00:05:18.070
and implement so you just to focus

125
00:05:18.070 --> 00:05:21.010
on the specific implementation that is going

126
00:05:21.010 --> 00:05:23.080
to go against your custom tag.

127
00:05:23.080 --> 00:05:26.010
So, the easiest way is to just extend

128
00:05:26.010 --> 00:05:28.020
that abstract class of simple tag support

129
00:05:28.020 --> 00:05:30.010
and go ahead and provide an implementation

130
00:05:30.010 --> 00:05:32.000
to those methods.

