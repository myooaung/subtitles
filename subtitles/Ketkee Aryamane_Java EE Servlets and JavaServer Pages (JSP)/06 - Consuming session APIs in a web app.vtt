WEBVTT
1
00:00:00.060 --> 00:00:03.060
- [Woman] Okay, now let us just look at few important API's

2
00:00:03.060 --> 00:00:05.090
on the http session object.

3
00:00:05.090 --> 00:00:07.090
We have done session management with cookies,

4
00:00:07.090 --> 00:00:09.030
and you are rewriting,

5
00:00:09.030 --> 00:00:11.090
and every time you played with the http session API

6
00:00:11.090 --> 00:00:14.090
because that's like the hero of this entire process.

7
00:00:14.090 --> 00:00:15.070
Okay.

8
00:00:15.070 --> 00:00:17.080
So let's look at other few important API calls

9
00:00:17.080 --> 00:00:19.070
on that object.

10
00:00:19.070 --> 00:00:22.000
So what I've done is I've written a logout servlet

11
00:00:22.000 --> 00:00:24.030
and I've given it a url pattern of logout

12
00:00:24.030 --> 00:00:27.000
through the addition configuration.

13
00:00:27.000 --> 00:00:28.050
On line number 16 I'm just going to

14
00:00:28.050 --> 00:00:37.010
take the http session again.

15
00:00:37.010 --> 00:00:39.050
Right, so this is just an iteration of whatever we

16
00:00:39.050 --> 00:00:41.060
have explained ourselves before

17
00:00:41.060 --> 00:00:44.030
but there's often a confusion you're,

18
00:00:44.030 --> 00:00:46.040
whenever you say request or get session

19
00:00:46.040 --> 00:00:49.040
and as I said if the user is coming for the first time,

20
00:00:49.040 --> 00:00:53.020
this API call will return a new http session object,

21
00:00:53.020 --> 00:00:55.030
but if the same user comes again and again

22
00:00:55.030 --> 00:00:58.060
in the same servlet where you have invoked this API,

23
00:00:58.060 --> 00:01:01.030
it's basically going return the same session object

24
00:01:01.030 --> 00:01:04.050
item defined by the session ID that it

25
00:01:04.050 --> 00:01:06.000
is receiving from the client.

26
00:01:06.000 --> 00:01:08.090
So do not worry about that stuff where you have to manage

27
00:01:08.090 --> 00:01:10.070
the old and the new session objects.

28
00:01:10.070 --> 00:01:13.070
That's completely going to be taken care of

29
00:01:13.070 --> 00:01:15.050
by the server site.

30
00:01:15.050 --> 00:01:16.030
Right.

31
00:01:16.030 --> 00:01:17.070
So that's the session and now let's

32
00:01:17.070 --> 00:01:19.060
just inspect a few API's on it.

33
00:01:19.060 --> 00:01:25.000
So enter session dot get creation time let's say

34
00:01:25.000 --> 00:01:25.090
Yeah.

35
00:01:25.090 --> 00:01:27.030
So that will give me the time exactly

36
00:01:27.030 --> 00:01:29.030
when the session was created.

37
00:01:29.030 --> 00:01:30.010
Right.

38
00:01:30.010 --> 00:01:33.020
Let's look at another one.

39
00:01:33.020 --> 00:01:35.020
Session dot get attribute we have been employing

40
00:01:35.020 --> 00:01:36.050
this API over and over

41
00:01:36.050 --> 00:01:39.000
to get the session information stored,

42
00:01:39.000 --> 00:01:40.000
so we know that.

43
00:01:40.000 --> 00:01:42.020
Then we have session dot get ID.

44
00:01:42.020 --> 00:01:44.090
Now, session dot get IDs going to give you that long ID number.

45
00:01:44.090 --> 00:01:45.080
Right.

46
00:01:45.080 --> 00:01:48.020
That we had generated through the server.

47
00:01:48.020 --> 00:01:51.020
Get last access time API.

48
00:01:51.020 --> 00:01:52.060
That is going to give us the

49
00:01:52.060 --> 00:01:56.010
time when the session was accessed last.

50
00:01:56.010 --> 00:01:56.090
Okay.

51
00:01:56.090 --> 00:01:57.080
Next.

52
00:01:57.080 --> 00:02:00.010
Is get max inactive interval.

53
00:02:00.010 --> 00:02:01.070
Now this is a little important.

54
00:02:01.070 --> 00:02:04.040
So when we say max inactive interval,

55
00:02:04.040 --> 00:02:07.090
it means how much is the time that

56
00:02:07.090 --> 00:02:10.010
the session can remain idle,

57
00:02:10.010 --> 00:02:11.090
can remain inactive.

58
00:02:11.090 --> 00:02:13.080
And after that period,

59
00:02:13.080 --> 00:02:16.010
the server is going to close that session.

60
00:02:16.010 --> 00:02:18.020
It is going to invalidate that session.

61
00:02:18.020 --> 00:02:20.060
So that interval you are going to get through the

62
00:02:20.060 --> 00:02:24.010
get max inactive intervaL API call.

63
00:02:24.010 --> 00:02:24.090
Okay.

64
00:02:24.090 --> 00:02:27.000
So imagine a situation like this.

65
00:02:27.000 --> 00:02:28.050
You logged into an application

66
00:02:28.050 --> 00:02:30.080
and let's say you decided to go for lunch.

67
00:02:30.080 --> 00:02:33.040
You returned after 30 or 45 minutes.

68
00:02:33.040 --> 00:02:37.040
The session would not possibly or would not necessarily

69
00:02:37.040 --> 00:02:39.080
remain alive for that long of period.

70
00:02:39.080 --> 00:02:40.060
Right.

71
00:02:40.060 --> 00:02:43.010
So that's exactly what this max inactive interval is.

72
00:02:43.010 --> 00:02:45.000
It can remain idle for a certain time

73
00:02:45.000 --> 00:02:46.070
after which the server is just going

74
00:02:46.070 --> 00:02:48.030
to invalidate their session.

75
00:02:48.030 --> 00:02:51.050
So you'll have to log in again to set up a new session.

76
00:02:51.050 --> 00:02:52.090
That's how this works.

77
00:02:52.090 --> 00:02:53.070
Okay.

78
00:02:53.070 --> 00:02:58.000
Now let's take a look at the other API's.

79
00:02:58.000 --> 00:02:58.080
So yeah.

80
00:02:58.080 --> 00:03:02.010
You can get the servlet context object on this session.

81
00:03:02.010 --> 00:03:04.030
In a previous demo when we had looked

82
00:03:04.030 --> 00:03:06.020
at the servlet context API,

83
00:03:06.020 --> 00:03:10.060
we had gotten it through the meter on the http servlet,

84
00:03:10.060 --> 00:03:13.070
and this is another way of accessing the servlet context.

85
00:03:13.070 --> 00:03:17.050
So you may choose to access it from here.

86
00:03:17.050 --> 00:03:18.030
Okay.

87
00:03:18.030 --> 00:03:20.020
And this is the important one.

88
00:03:20.020 --> 00:03:24.050
So invalidate call is basically going to close the session.

89
00:03:24.050 --> 00:03:25.030
Right.

90
00:03:25.030 --> 00:03:28.090
So this is typically invoked in a servlet which is,

91
00:03:28.090 --> 00:03:30.020
let's say the logout servlet.

92
00:03:30.020 --> 00:03:32.070
So I have deliberately written this servlet

93
00:03:32.070 --> 00:03:34.090
so that when I click on the logout button

94
00:03:34.090 --> 00:03:38.040
this servlet will be invoked and my session will be closed.

95
00:03:38.040 --> 00:03:39.020
Right.

96
00:03:39.020 --> 00:03:41.000
So it's just going to get you the current session,

97
00:03:41.000 --> 00:03:43.050
and it will just quickly invalidate that session,

98
00:03:43.050 --> 00:03:46.050
so that you're logged off and you're back to your login page

99
00:03:46.050 --> 00:03:47.070
Right.

100
00:03:47.070 --> 00:03:49.060
The other API's,

101
00:03:49.060 --> 00:03:51.000
let me see.

102
00:03:51.000 --> 00:03:56.060
If they are important we will take a look at it.

103
00:03:56.060 --> 00:03:57.040
Yeah.

104
00:03:57.040 --> 00:04:00.060
So is new will be telling you whether the session

105
00:04:00.060 --> 00:04:03.050
is newly created or it is an existing session.

106
00:04:03.050 --> 00:04:06.020
So you can employ this check if you're really doubtful

107
00:04:06.020 --> 00:04:10.070
about certain flaws in all your screens.

108
00:04:10.070 --> 00:04:11.060
Right.

109
00:04:11.060 --> 00:04:12.040
We know remove attribute.

110
00:04:12.040 --> 00:04:13.040
We know set attribute.

111
00:04:13.040 --> 00:04:14.080
Set max inactive interval.

112
00:04:14.080 --> 00:04:17.040
So the way you have get max inactive interval,

113
00:04:17.040 --> 00:04:20.020
you can actually set max inactive interval.

114
00:04:20.020 --> 00:04:24.070
So, you can define the period for which the session will be.

115
00:04:24.070 --> 00:04:25.050
Idle.

116
00:04:25.050 --> 00:04:26.080
It can remain inactive.

117
00:04:26.080 --> 00:04:27.070
Right.

118
00:04:27.070 --> 00:04:29.000
Now this parameter that we have

119
00:04:29.000 --> 00:04:31.000
that we have to pass here is in seconds.

120
00:04:31.000 --> 00:04:31.090
So let's say you want to keep

121
00:04:31.090 --> 00:04:33.070
the session inactive for 60 minutes

122
00:04:33.070 --> 00:04:35.040
then it will be 60 into 60

123
00:04:35.040 --> 00:04:38.070
and that will go as an argument to this API call.

124
00:04:38.070 --> 00:04:40.010
Right.

125
00:04:40.010 --> 00:04:41.090
Okay.

126
00:04:41.090 --> 00:04:45.060
Let's look at any other API that may look important.

127
00:04:45.060 --> 00:04:46.090
Yeah, so that is pretty much the set

128
00:04:46.090 --> 00:04:49.050
of API's that are important on this session object.

129
00:04:49.050 --> 00:04:51.090
Another thing to note significantly here is

130
00:04:51.090 --> 00:04:54.080
people often in projects actually configure

131
00:04:54.080 --> 00:04:57.090
the session time out in the deployment descriptor.

132
00:04:57.090 --> 00:04:59.020
Of course you can do it while the

133
00:04:59.020 --> 00:05:03.030
set max inactive interval API that we saw just now.

134
00:05:03.030 --> 00:05:05.030
But you can also do it in the web xml.

135
00:05:05.030 --> 00:05:07.060
That is because whenever you change anything

136
00:05:07.060 --> 00:05:09.010
in our java file

137
00:05:09.010 --> 00:05:11.010
it has to be compiled again

138
00:05:11.010 --> 00:05:13.040
and you have to redeploy the project.

139
00:05:13.040 --> 00:05:14.020
However,

140
00:05:14.020 --> 00:05:16.030
if you change in your web xml,

141
00:05:16.030 --> 00:05:19.080
for that matter if you make changes to any xml file,

142
00:05:19.080 --> 00:05:22.040
you just need to restart the server.

143
00:05:22.040 --> 00:05:24.050
There is no need of redeployment.

144
00:05:24.050 --> 00:05:28.010
But changes to a java will amount to redeployment

145
00:05:28.010 --> 00:05:29.050
and restarting.

146
00:05:29.050 --> 00:05:32.000
That's why people sometimes choose web xml

147
00:05:32.000 --> 00:05:35.030
as a place to configure the session timeout period.

148
00:05:35.030 --> 00:05:36.040
How do we do that?

149
00:05:36.040 --> 00:05:38.090
I am on line number 46 of this file.

150
00:05:38.090 --> 00:05:41.000
Just right under the web app tag,

151
00:05:41.000 --> 00:05:44.010
and there's a tag which is called session config.

152
00:05:44.010 --> 00:05:45.030
That's the one.

153
00:05:45.030 --> 00:05:49.010
Under that you have one more child tag on line number 47.

154
00:05:49.010 --> 00:05:49.090
Yeah.

155
00:05:49.090 --> 00:05:51.020
That's the one session timeout.

156
00:05:51.020 --> 00:05:53.080
Now this states the argument in minutes.

157
00:05:53.080 --> 00:05:56.000
So let's say I want to keep session timeout

158
00:05:56.000 --> 00:05:56.080
after 60 minutes.

159
00:05:56.080 --> 00:05:59.000
I can just feed in 60 and I'm done.

160
00:05:59.000 --> 00:06:00.070
So now in the user log's in

161
00:06:00.070 --> 00:06:03.010
and if there is no activity for the next 60 minutes,

162
00:06:03.010 --> 00:06:04.040
the session will timeout,

163
00:06:04.040 --> 00:06:06.030
it will be invalidated.

164
00:06:06.030 --> 00:06:07.010
Right.

165
00:06:07.010 --> 00:06:08.000
Okay.

166
00:06:08.000 --> 00:06:10.050
So these are all the API's for the session object

167
00:06:10.050 --> 00:06:11.080
that I will review with you.

168
00:06:11.080 --> 00:06:15.060
And you can set it up accordingly in your application.

169
00:06:15.060 --> 00:06:17.070
Right, so now that we have written this logout servlet,

170
00:06:17.070 --> 00:06:19.000
we are just getting the current session

171
00:06:19.000 --> 00:06:20.050
and invalidating it.

172
00:06:20.050 --> 00:06:22.090
This url pattern you can attach to

173
00:06:22.090 --> 00:06:26.030
the logout hyperlink on your homepage.

174
00:06:26.030 --> 00:06:29.060
So I'm just going to enter that url pattern here

175
00:06:29.060 --> 00:06:34.020
and when you run this project.

176
00:06:34.020 --> 00:06:37.050
Let's log in.

177
00:06:37.050 --> 00:06:39.060
With some credentials.

178
00:06:39.060 --> 00:06:40.080
Let's go on the profile

179
00:06:40.080 --> 00:06:42.030
and when I click on logout,

180
00:06:42.030 --> 00:06:43.080
I'm now back.

181
00:06:43.080 --> 00:06:44.060
Right.

182
00:06:44.060 --> 00:06:45.070
But then do you see a blank screen?

183
00:06:45.070 --> 00:06:46.060
Yeah.

184
00:06:46.060 --> 00:06:49.000
So in order to avoid that what you can also do is

185
00:06:49.000 --> 00:06:53.010
you can come right here on line number 19

186
00:06:53.010 --> 00:06:55.010
and you can take the request dispatcher

187
00:06:55.010 --> 00:06:56.050
for help again

188
00:06:56.050 --> 00:07:00.080
and just navigate yourself to the login or maybe the index.

189
00:07:00.080 --> 00:07:04.010
The landing page.

190
00:07:04.010 --> 00:07:05.060
That's all that you have to do.

191
00:07:05.060 --> 00:07:07.090
So basically you come back to the original state

192
00:07:07.090 --> 00:07:09.070
of the application that's what we have to do.

193
00:07:09.070 --> 00:07:10.090
So I'm just going to

194
00:07:10.090 --> 00:07:12.050
stop this server

195
00:07:12.050 --> 00:07:16.090
and deploy this again.

196
00:07:16.090 --> 00:07:19.040
Quickly log in.

197
00:07:19.040 --> 00:07:21.020
With the correct credentials.

198
00:07:21.020 --> 00:07:22.020
Go to the profile page

199
00:07:22.020 --> 00:07:23.060
and when I click on logout.

200
00:07:23.060 --> 00:07:24.070
There you go.

201
00:07:24.070 --> 00:07:27.020
We are now back on the index dot html.

202
00:07:27.020 --> 00:07:29.090
So that completes the flow of log in log out

203
00:07:29.090 --> 00:07:32.000
everything using session management.

