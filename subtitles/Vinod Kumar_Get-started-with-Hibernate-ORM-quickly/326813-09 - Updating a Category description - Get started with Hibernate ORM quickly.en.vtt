WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.090
suppose we want to update the data stored in the BP.

00:00:03.090 --> 00:00:03.550
Now,

00:00:03.550 --> 00:00:07.350
what we can do is we can do to the data using the get function,

00:00:07.350 --> 00:00:12.520
and then we can make the changes inside a transaction boundary and they automatically get

00:00:12.520 --> 00:00:13.650
updated to the TV.

00:00:13.650 --> 00:00:14.840
So to the monster,

00:00:14.840 --> 00:00:17.990
the same Let's go and create a new job class.

00:00:17.990 --> 00:00:21.950
I'm gonna call this as exhibit A cheap package.

00:00:21.950 --> 00:00:24.870
The program is gonna be called as mean.

00:00:24.870 --> 00:00:27.650
I also want the main function over here.

00:00:27.650 --> 00:00:32.050
It's full screen the same on the basis.

00:00:32.050 --> 00:00:36.670
Mostly pick your we're gonna have factory object here and then a station object here

00:00:36.670 --> 00:00:39.200
station is closed and factories also closed.

00:00:39.200 --> 00:00:41.880
Let's do an import by pressing command shift.

00:00:41.880 --> 00:00:42.270
Oh,

00:00:42.270 --> 00:00:46.440
our control shift on windows and in get off a name conflict,

00:00:46.440 --> 00:00:47.430
it's gonna ask me.

00:00:47.430 --> 00:00:51.270
So I have to select our hybridization and then everything is OK.

00:00:51.270 --> 00:00:54.140
Now we have a session object here.

00:00:54.140 --> 00:00:58.080
Let's say we want to return the date off from the DB and then make some changes.

00:00:58.080 --> 00:01:03.230
So first domino beginning transaction by calling session dark Begin transaction.

00:01:03.230 --> 00:01:11.170
And then I would say your session don't get category class from my package and then the

00:01:11.170 --> 00:01:12.310
idea is one.

00:01:12.310 --> 00:01:15.710
And then I'm gonna ascended to available for C one on,

00:01:15.710 --> 00:01:19.020
then create a variable off record category.

00:01:19.020 --> 00:01:22.240
Not even but the transaction has bean started.

00:01:22.240 --> 00:01:29.240
Which means by the time I do a transaction that commit all the changes toe this object C

00:01:29.240 --> 00:01:33.400
one will be monitored and effectively updated to the baby as well.

00:01:33.400 --> 00:01:34.740
For example,

00:01:34.740 --> 00:01:39.780
if I type er Stephen Barr said description toe something else like for example,

00:01:39.780 --> 00:01:43.130
cola coffee de,

00:01:43.130 --> 00:01:43.750
it's a drum.

00:01:43.750 --> 00:01:47.460
And then if I say you're session,

00:01:47.460 --> 00:01:50.570
don't get transaction Dark Comet.

00:01:50.570 --> 00:01:53.370
Now you'll see that at the time of commit,

00:01:53.370 --> 00:01:56.250
it's gonna fight an SQL update statement.

00:01:56.250 --> 00:01:58.830
How does it happen at this time?

00:01:58.830 --> 00:01:59.240
See,

00:01:59.240 --> 00:02:02.160
One is considered as a persistent object,

00:02:02.160 --> 00:02:06.020
which means hibernated manages the state off this particular semen.

00:02:06.020 --> 00:02:12.500
So it constantly observes the changes turn to the C one and right appropriate SQL

00:02:12.500 --> 00:02:13.520
statements here,

00:02:13.520 --> 00:02:18.290
such as delete our update statements back to the TV.

00:02:18.290 --> 00:02:23.120
Since the data that we have given here is something that is different than what is there in

00:02:23.120 --> 00:02:24.250
the database table,

00:02:24.250 --> 00:02:27.360
it knows that C one has become dirty on.

00:02:27.360 --> 00:02:30.060
It'll automatically read in SQL update statement.

00:02:30.060 --> 00:02:31.820
So we're under programs.

00:02:31.820 --> 00:02:37.960
Second time since there d be also contains the same text on I'm assigning the same text

00:02:37.960 --> 00:02:38.580
once again.

00:02:38.580 --> 00:02:44.730
Hibernate now considered that this C one is no longer dirty and the skill update will not

00:02:44.730 --> 00:02:45.530
be sent.

00:02:45.530 --> 00:02:51.940
So just to demonstrate the same let's save this on Run this and we'll see that it sends an

00:02:51.940 --> 00:02:54.510
SQL update statement this time here.

00:02:54.510 --> 00:02:59.810
And it is also updated in the DB so I can run this command again and he would see that it

00:02:59.810 --> 00:03:01.120
has changed to call a cough,

00:03:01.120 --> 00:03:02.050
et etcetera.

00:03:02.050 --> 00:03:04.770
But as if I run this court once more,

00:03:04.770 --> 00:03:08.470
you will not see the actual SQL update statement.

00:03:08.470 --> 00:03:11.410
There's only a select statement because of the get command here.

00:03:11.410 --> 00:03:17.880
But there is no update going on here because this exactly matches the data in the database

00:03:17.880 --> 00:03:18.350
table.

00:03:18.350 --> 00:03:19.910
Suppose you are made.

00:03:19.910 --> 00:03:26.240
The changes after decision has been closed and you want toe re open decision and then

00:03:26.240 --> 00:03:27.620
update that to the baby.

00:03:27.620 --> 00:03:29.060
If you want to do that,

00:03:29.060 --> 00:03:32.880
then you can use the update function from hyper next session.

00:03:32.880 --> 00:03:33.830
For example,

00:03:33.830 --> 00:03:41.250
if I come down over here and then start a musician by calling session equals toe factory

00:03:41.250 --> 00:03:42.480
door open incisions.

00:03:42.480 --> 00:03:48.070
So that's gonna test new session and then using decision if I want to send in a big

00:03:48.070 --> 00:03:52.260
statement because I changed the value over here.

00:03:52.260 --> 00:03:53.020
Now,

00:03:53.020 --> 00:03:54.680
if you want to send this dated,

00:03:54.680 --> 00:03:57.530
you can obviously your session dark,

00:03:57.530 --> 00:04:02.160
begin transaction and then see your session.

00:04:02.160 --> 00:04:03.500
Don't update,

00:04:03.500 --> 00:04:05.440
and then supplies See one.

00:04:05.440 --> 00:04:07.800
Because this is the change due date or not,

00:04:07.800 --> 00:04:09.270
Because a distance see,

00:04:09.270 --> 00:04:10.930
one has nothing to do with this session.

00:04:10.930 --> 00:04:12.470
Object has been disconnected.

00:04:12.470 --> 00:04:14.820
We call this other detached object now.

00:04:14.820 --> 00:04:16.650
But then I'd say session,

00:04:16.650 --> 00:04:19.840
don't get transaction dark commit.

00:04:19.840 --> 00:04:25.330
And I didn't see that this will generate an SQL off dead statement because you have given

00:04:25.330 --> 00:04:27.450
an update function called over here.

00:04:27.450 --> 00:04:33.540
Which means that decision adopted always makes this see one as a dirty object.

00:04:33.540 --> 00:04:35.980
I'm session dot Get transaction dot com.

00:04:35.980 --> 00:04:39.370
It will report that as an SQL update statement.

00:04:39.370 --> 00:04:41.970
So just toe ensure that this works.

00:04:41.970 --> 00:04:43.010
I'm going to save this.

00:04:43.010 --> 00:04:47.960
Run this and you will see that esque you'll update statement is fire.

00:04:47.960 --> 00:04:51.200
We respect your whether there is any change or not.

00:04:51.200 --> 00:04:52.980
Somewhere around this game toe,

00:04:52.980 --> 00:04:57.420
verify the same and you should see that there is an SQL update again.

