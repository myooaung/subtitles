1

00:00:00,840  -->  00:00:04,830
Hello everyone and welcome to the regular expressions lecture in this lecture.

2

00:00:04,860  -->  00:00:09,480
We're going to learn how to use OUR to search for patterns and tech strings or vectors.

3

00:00:09,720  -->  00:00:12,200
Let's go ahead and jump to our studio get started.

4

00:00:12,630  -->  00:00:17,350
OK so here we are Studia and we're going to discuss how we can use regular expressions.

5

00:00:17,350  -->  00:00:22,290
No question are familiar of the term regular expressions regular expressions basically just covered

6

00:00:22,290  -->  00:00:27,790
the idea of pattern searching typically in a string or sometimes a vector of strings.

7

00:00:27,790  -->  00:00:30,180
For now we're going to learn about two useful functions.

8

00:00:30,240  -->  00:00:40,590
The first one is going to be Grapel G R E P L and the second one is going to be grep G R E P And they

9

00:00:40,590  -->  00:00:45,620
basically just stand for general regular expressions so g r.

10

00:00:45,630  -->  00:00:46,670
P.

11

00:00:47,370  -->  00:00:47,930
OK.

12

00:00:48,000  -->  00:00:50,740
Now let's go ahead and get started with an example.

13

00:00:51,270  -->  00:00:53,890
I'm going to say a text.

14

00:00:53,910  -->  00:00:59,760
Just some variable is equal to a string and I'll say hi there.

15

00:00:59,760  -->  00:01:06,070
Do you know who you are voting for questionmark.

16

00:01:06,810  -->  00:01:13,110
So now I have my text just a string and I want to be able to search for either certain terms or patterns

17

00:01:13,110  -->  00:01:15,350
in my strings so I have two options.

18

00:01:15,360  -->  00:01:23,790
This grep L or Grapel and then grette the difference between the two is one will return a logical grep

19

00:01:23,900  -->  00:01:27,960
L for logical and the other one will return an index.

20

00:01:27,960  -->  00:01:34,130
Let's go ahead and show you how we can use these sort of Grethel which is the simpler to what grep els

21

00:01:34,130  -->  00:01:40,200
are going to do is it's going to take in an argument and the first argument is going to take in is the

22

00:01:40,200  -->  00:01:42,430
term or pattern you're searching for.

23

00:01:42,630  -->  00:01:48,510
So let's say I'm searching for the word voting or the pattern voting just that string and then the second

24

00:01:48,510  -->  00:01:53,580
argument you're going to pass is the actual thing you want to search this case I want to search text

25

00:01:53,670  -->  00:01:54,990
that object.

26

00:01:54,990  -->  00:01:57,240
Let's go ahead and see this in a research.

27

00:01:57,240  -->  00:01:57,670
True.

28

00:01:57,690  -->  00:02:03,730
So that means that the pattern or term voting is inside of the text.

29

00:02:03,730  -->  00:02:05,600
Let's go out and try another example.

30

00:02:06,120  -->  00:02:11,750
Let's say a search for dog in text I get a false meaning.

31

00:02:11,750  -->  00:02:15,710
That term dog or pattern dog is not inside that text.

32

00:02:15,720  -->  00:02:21,460
And finally let's go and say crap logical or grep.

33

00:02:21,480  -->  00:02:31,110
Well we'll go in and say do space you pasand text and it returns true because that little pattern do

34

00:02:31,110  -->  00:02:36,850
space you is in inside of the text and that's the basic way we can pattern search.

35

00:02:36,900  -->  00:02:37,640
True or false.

36

00:02:37,640  -->  00:02:41,110
At least using grep L and using R.

37

00:02:41,280  -->  00:02:45,300
Now let's you want to know where those actual terms were.

38

00:02:45,450  -->  00:02:51,690
For instance imagine we have the vector V of character string.

39

00:02:51,680  -->  00:02:53,920
So what's going to make them simple letters.

40

00:02:54,000  -->  00:03:02,720
Let's say a b c d and I'll go ahead and add another D.

41

00:03:02,820  -->  00:03:04,820
So I'm going to go and clear this.

42

00:03:05,370  -->  00:03:06,960
And show me a vector v.

43

00:03:06,960  -->  00:03:09,860
So the vector 5 characters.

44

00:03:10,080  -->  00:03:19,010
If I search using grep L for the pattern B inside of my vector I actually get a vector back.

45

00:03:19,050  -->  00:03:21,860
Notice that says false true false false false.

46

00:03:21,930  -->  00:03:28,540
So it will return the index true wherever it actually found the pattern which is really useful.

47

00:03:28,550  -->  00:03:35,490
Now another thing you might be interested in is finding out the actual index of where it is true that's

48

00:03:35,490  -->  00:03:39,240
where that normal G RFP function comes into play.

49

00:03:39,360  -->  00:03:46,660
The passing of the pattern we're looking for this case be the object we want to search the and then

50

00:03:46,720  -->  00:03:48,710
no return the index where it occurs.

51

00:03:48,750  -->  00:03:51,030
So B occurs at index 2.

52

00:03:51,030  -->  00:03:58,290
So 1 2 years or B if it shows up multiple times for instance the letter D or pattern D so at multiple

53

00:03:58,290  -->  00:04:04,590
times that vector will return all the index locations where that pattern occurred.

54

00:04:04,590  -->  00:04:13,890
And that's really all there is to using grep L and grep in our studio or an our general again G R E

55

00:04:13,890  -->  00:04:19,460
P L or return a boolean value indicating if it's the pattern you're searching for is in that text or

56

00:04:19,460  -->  00:04:20,130
not.

57

00:04:20,160  -->  00:04:31,530
So for example is hello in the text Hello world that returns true while grep will return index locations

58

00:04:31,530  -->  00:04:31,590
.

59

00:04:31,590  -->  00:04:43,650
So for example I'm searching for the term a in some vector that has b comma a get back index location

60

00:04:43,650  -->  00:04:46,070
to insist that the second index.

61

00:04:46,380  -->  00:04:49,920
For now that's all we'll discuss about regular expressions.

62

00:04:49,920  -->  00:04:56,970
If you're interested in further use cases for grep or grep Well you can just go ahead and say help pass

63

00:04:57,030  -->  00:05:04,000
grep enter and there's a nice piece of documentation concerning pattern matching and replacement.

64

00:05:04,060  -->  00:05:05,510
So you go ahead and check this out.

65

00:05:05,550  -->  00:05:11,460
In case you're already familiar of regular expressions and are trying to do a particular task in are

66

00:05:11,480  -->  00:05:13,550
using regular expressions.

67

00:05:13,590  -->  00:05:15,290
OK thanks everyone.

68

00:05:15,290  -->  00:05:16,720
Now I'll see at the next lecture.
