WEBVTT
1

00:00:01.020  -->  00:00:06.570
Hello everyone and welcome to the lecture on while loops while loops will allow us to have programs

2

00:00:06.570  -->  00:00:11.100
continuously run some block of code until a condition is met are made true.

3

00:00:11.400  -->  00:00:14.280
Let's go ahead and jump to our studio and see how they work.

4

00:00:14.880  -->  00:00:15.210
OK.

5

00:00:15.210  -->  00:00:16.980
So here we are our studio.

6

00:00:17.100  -->  00:00:21.030
And in case you're already familiar of while loops and just want to know how you can make them in our

7

00:00:21.030  -->  00:00:24.030
studio or what the syntax for them in our studio is.

8

00:00:24.210  -->  00:00:30.510
It's just a key word while an imprint sees you have your condition and then the curly brackets you have

9

00:00:30.510  -->  00:00:34.890
your block occurred which will continue to execute as long as condition inside the while loop is true

10

00:00:34.890  -->  00:00:35.750
.

11

00:00:35.790  -->  00:00:40.620
Let's go ahead and break down and actually program these in our studio for those that are new to the

12

00:00:40.620  -->  00:00:42.470
concept the while loops.

13

00:00:43.190  -->  00:00:49.870
OK so to get started what we're going to do is start a variable called X and assign it the integers

14

00:00:49.890  -->  00:00:53.550
0 then we're going to have a WHILE loop.

15

00:00:53.550  -->  00:00:55.900
And we're going to have a condition inside this parentheses.

16

00:00:56.130  -->  00:01:01.750
We're going to say why X is less than 10 curly bracket.

17

00:01:02.010  -->  00:01:12.090
We're going to go ahead and print and we'll print two things we're going to print X is I'm going to

18

00:01:12.090  -->  00:01:14.750
go ahead and add in the paste function here.

19

00:01:15.100  -->  00:01:17.620
Paste zeros there's no separator.

20

00:01:18.750  -->  00:01:23.350
And then pass in the current x value close parentheses there.

21

00:01:23.760  -->  00:01:28.210
And then what I'm going to go ahead and do is add 1 to x.

22

00:01:28.650  -->  00:01:31.610
So we should see we're running this X starts at zero.

23

00:01:31.620  -->  00:01:33.510
We say well X less than 10.

24

00:01:33.660  -->  00:01:37.970
We print X is and then the current value of x and then we're going to go ahead.

25

00:01:38.010  -->  00:01:39.150
Add 1 to x.

26

00:01:39.330  -->  00:01:43.000
So we should see this go all the way up to until X's 9.

27

00:01:44.100  -->  00:01:48.330
Once x is equal to 10 this while condition will no longer be true.

28

00:01:48.360  -->  00:01:49.910
And this loop should break.

29

00:01:49.920  -->  00:01:55.220
Let's go ahead and run the source in if we expand the console so we can see the output a bit.

30

00:01:55.290  -->  00:01:57.310
We get exactly what we expected.

31

00:01:57.310  -->  00:02:05.550
X is 0 X's 1 etc. all the way until X is 9 and then at that point we were at X's 9 we said nine plus

32

00:02:05.550  -->  00:02:08.520
1 is 10 x was then get assigned 10.

33

00:02:08.520  -->  00:02:11.290
And since 10 is not less than 10 that's equal to it.

34

00:02:11.310  -->  00:02:18.330
This wild condition is no longer true and the loop breaks and that's the very basic use case of a WHILE

35

00:02:18.330  -->  00:02:18.860
loop.

36

00:02:19.110  -->  00:02:23.670
Let's go ahead and add an if statement inside of this while loop so we can get a clearer picture of

37

00:02:23.670  -->  00:02:26.590
this and how it's actually breaking out of the loop.

38

00:02:26.610  -->  00:02:35.730
I'm going to say if x is equal to 10 clearly bracket print

39

00:02:38.330  -->  00:02:44.790
x y but this is a string x is now equal to 10.

40

00:02:44.820  -->  00:02:46.290
Break loop

41

00:02:48.820  -->  00:02:55.410
that's minimize this counts a little bit and notice here how the curly brackets and the indentation

42

00:02:55.410  -->  00:02:59.850
were automatically placed for me by our studio that's going to be really useful and I have to come back

43

00:02:59.880  -->  00:03:01.250
and read this code.

44

00:03:01.290  -->  00:03:06.900
Let me go ahead and run source here and notice if we get one final line it looks up it looks almost

45

00:03:06.900  -->  00:03:12.120
the same as the previous one except on the turn right after the addition.

46

00:03:12.120  -->  00:03:19.080
So we have Expo's 1 to 10 this if statement becomes true and we print X is now equal to 10.

47

00:03:19.080  -->  00:03:21.900
Break the loop.

48

00:03:21.900  -->  00:03:25.840
Now we've seen one way we can break out of the loop a while loop that is.

49

00:03:26.040  -->  00:03:29.840
And that is by making sure this condition is no longer true.

50

00:03:29.850  -->  00:03:35.550
We can also manually break out of a loop by placing a break key word statement which is just the word

51

00:03:35.550  -->  00:03:36.270
break.

52

00:03:36.270  -->  00:03:42.870
I'm going to show you a simple example of how you can do this and add another print statement here and

53

00:03:42.870  -->  00:03:44.460
I'm going to go ahead and say Prince

54

00:03:47.130  -->  00:03:48.190
let's say whew.

55

00:03:48.390  -->  00:03:52.260
I printed two.

56

00:03:52.470  -->  00:04:00.680
So if I run this source code what I should see is is 0 1 2 3 4 5 all the way until X equal to 10.

57

00:04:00.710  -->  00:04:01.300
Great clue.

58

00:04:01.350  -->  00:04:02.340
And it says whew.

59

00:04:02.370  -->  00:04:03.310
I printed two.

60

00:04:03.330  -->  00:04:05.070
So we have two print statements here.

61

00:04:05.130  -->  00:04:09.330
And then finally the while loop is no longer functioning it's been broken.

62

00:04:09.330  -->  00:04:12.330
I can get a key word break.

63

00:04:12.330  -->  00:04:16.440
Notice how it gets highlighted by syntax in our studio.

64

00:04:16.440  -->  00:04:21.450
And if I say break what's going to happen is if this break statement is ever reached then the loop will

65

00:04:21.450  -->  00:04:22.350
break.

66

00:04:22.350  -->  00:04:25.980
Meaning I didn't see the second print statement actually occur.

67

00:04:26.100  -->  00:04:32.400
So if I run source now again let me go and clear the console but I'm going to run source.

68

00:04:32.550  -->  00:04:37.290
Notice I get 0 1 2 3 and then all the way over here get X is now equal to 10.

69

00:04:37.380  -->  00:04:39.740
Break loop but I don't see this.

70

00:04:39.740  -->  00:04:40.060
Whew.

71

00:04:40.060  -->  00:04:44.030
I printed two statement because we had the break statement right before it.

72

00:04:44.040  -->  00:04:49.380
So at the break statement condition does is just breaks out of the loop it just terminates it.

73

00:04:49.800  -->  00:04:51.880
So when we want to use a break statement.

74

00:04:52.110  -->  00:04:55.630
Well let me show you a better example than just not printing something.

75

00:04:56.550  -->  00:05:01.790
Matt you want to keep doing this while loop unless X happens to equal 5.

76

00:05:01.830  -->  00:05:03.840
And then we wanted to break out of it.

77

00:05:03.840  -->  00:05:05.010
We have two options for that.

78

00:05:05.040  -->  00:05:08.430
We could either make a condition here that will break it.

79

00:05:08.490  -->  00:05:12.480
This while loop if it ever equals 10 or I can get a nice IF statement.

80

00:05:12.600  -->  00:05:15.370
So make it maybe a little more cleaner or a little more readable.

81

00:05:15.840  -->  00:05:21.510
So I'll say if x is equal to 5 I'll say X is not equal to 5.

82

00:05:21.570  -->  00:05:26.620
Break loop and I'll go ahead and break it there.

83

00:05:26.650  -->  00:05:28.050
So what's going to happen here.

84

00:05:28.150  -->  00:05:30.720
I expand this when just a little bit a little clear.

85

00:05:30.750  -->  00:05:35.670
I start with x equal to 10 and then I say well X is less than 10.

86

00:05:35.730  -->  00:05:42.040
Print what X currently is and then add 1 to X if X is ever equal to 5.

87

00:05:42.120  -->  00:05:46.020
I'm going to print X is now equal to 5 and I'm going to go ahead and break that loop with that break

88

00:05:46.020  -->  00:05:47.200
statement.

89

00:05:47.220  -->  00:05:48.930
So let's go ahead and run this

90

00:05:52.310  -->  00:05:55.880
and here it is we say x is 0 x is 1 2 3 4.

91

00:05:56.070  -->  00:06:02.160
And now we've been able to terminate that while loop using that break statement no break even if it's

92

00:06:02.250  -->  00:06:07.680
inside this if statement if statements are loops or just conditional checks.

93

00:06:07.680  -->  00:06:12.760
What break is going to do it's going to break out of the outside loop which is this while loop here

94

00:06:12.770  -->  00:06:13.010
.

95

00:06:13.350  -->  00:06:14.750
So keep that in mind.

96

00:06:15.030  -->  00:06:21.180
Again you can check the notes for this lecture to get a written example how you can use the break statement

97

00:06:21.540  -->  00:06:26.790
for this sort of condition statement in order to break a loop or terminate a loop.

98

00:06:26.800  -->  00:06:29.580
OK so what should have you know gotten out of this lecture.

99

00:06:29.580  -->  00:06:31.040
Just as a quick review.

100

00:06:31.070  -->  00:06:33.770
Do you use a while loop you're going to save while in print.

101

00:06:33.770  -->  00:06:38.110
CJ you'll have some condition and then in curly brackets you have some block of code.

102

00:06:38.280  -->  00:06:40.180
If you ever want to break out of that loop.

103

00:06:40.200  -->  00:06:45.420
You can either just use a simple break statement by itself or you can have a conditional break by saying

104

00:06:45.510  -->  00:06:48.470
if some certain condition and then break.

105

00:06:48.570  -->  00:06:49.320
All right.

106

00:06:49.320  -->  00:06:50.490
That's it for this lecture.

107

00:06:50.490  -->  00:06:52.300
Thanks everyone and I'll see you at the next lecture
