WEBVTT
1

00:00:00.300  -->  00:00:05.430
Hello everyone and welcome to the date and time stamps lecture in this lecture we're going to learn

2

00:00:05.430  -->  00:00:11.040
how to work with date information and time stamp information with our let's go out and jump to our studio

3

00:00:11.160  -->  00:00:13.140
and see how to work with this.

4

00:00:13.140  -->  00:00:19.590
All right so here we are our studio and let's start off by discussing what a normal day object actually

5

00:00:19.590  -->  00:00:21.300
looks like.

6

00:00:21.300  -->  00:00:30.750
We can do this by calling capital S y s dot date close parentheses and that will return today's current

7

00:00:30.750  -->  00:00:31.620
date.

8

00:00:31.650  -->  00:00:37.770
So notice that the current day isn't a particular standard time format and that is four years or four

9

00:00:37.770  -->  00:00:44.080
digits for the year dash two digits for the month that two digits for today's date.

10

00:00:44.430  -->  00:00:48.130
So this is 2016 June 15.

11

00:00:48.460  -->  00:00:53.010
And that's today's date which I called using as a start date.

12

00:00:53.340  -->  00:00:59.560
We can go ahead and set that as a variable today as we start date.

13

00:00:59.760  -->  00:01:04.890
And if I check the class of today it's a data object.

14

00:01:04.920  -->  00:01:06.380
So it's not just the character string.

15

00:01:06.390  -->  00:01:12.540
It's an actual date object that is aware that it has a year a month a day information inside of it.

16

00:01:12.540  -->  00:01:18.300
Now a lot of times when you're importing data you're going to have your data as character strings.

17

00:01:18.300  -->  00:01:21.860
So for example you may have a character string that looks like this.

18

00:01:22.170  -->  00:01:23.640
Maybe it's 1990.

19

00:01:23.700  -->  00:01:31.060
Let's go in and say January 1st 1990 and if I checked the class of C will return a character class.

20

00:01:31.180  -->  00:01:39.200
If I actually want this to be a dates class I'll need to use the as method and call date on it.

21

00:01:39.230  -->  00:01:43.750
Now let's go and save that as we'll just say my date.

22

00:01:45.420  -->  00:01:52.110
And now if I took the class of my day notice a Date object.

23

00:01:52.260  -->  00:01:57.990
The only reason I was actually able to convert this easily with as that date was because this character

24

00:01:57.990  -->  00:02:04.240
was already in the standard format of 4 digits for a year a dash two digits for the month dash and in

25

00:02:04.240  -->  00:02:06.500
two digits for that day.

26

00:02:06.690  -->  00:02:11.910
Most times your data is not going to be so nicely presented to you in the sort of standard time format

27

00:02:12.030  -->  00:02:13.570
or date format.

28

00:02:13.590  -->  00:02:20.250
For instance if you had to do this as dates and maybe had your date information in a format like this

29

00:02:20.250  -->  00:02:20.620
.

30

00:02:20.760  -->  00:02:29.910
November 3rd 1990 notice to get an error and the error you get is that character string is not in a

31

00:02:29.910  -->  00:02:34.690
standard an ambiguous format meaning this is not a standard format.

32

00:02:34.710  -->  00:02:40.660
However we can actually add parameters and formatting arguments to her as that date function.

33

00:02:40.860  -->  00:02:48.840
In order to accept this and convert it to a Date object I'm going to go ahead and clear the consul and

34

00:02:49.080  -->  00:02:51.250
try to reassign my date.

35

00:02:51.750  -->  00:02:57.860
I want to go ahead and say my date and assign it as that date.

36

00:02:58.380  -->  00:03:03.010
I'll go ahead and pass again that string that wasn't in a standard format.

37

00:03:03.060  -->  00:03:07.440
Let's say November 3rd 1990.

38

00:03:07.800  -->  00:03:13.200
And the way I can tell the as Date function to accept this is by passing a format argument

39

00:03:16.440  -->  00:03:21.010
and you're going to go on to say format and then you're going to pasan a character string of the format

40

00:03:21.030  -->  00:03:22.780
your day isn't.

41

00:03:22.830  -->  00:03:29.820
So I know that the format of this data is three letters for the month a dash two digits for the month

42

00:03:30.300  -->  00:03:33.570
or the day excuse me and then two digits for the year.

43

00:03:33.570  -->  00:03:42.840
So my coach looks something like this percentage sign B dash percentage sign d percentage sign year

44

00:03:43.290  -->  00:03:45.440
and notices are all lowercase.

45

00:03:46.110  -->  00:03:53.760
And I was actually successfully able to convert this string into a date object so if I say my date notice

46

00:03:53.820  -->  00:03:55.730
it's now standardized.

47

00:03:56.100  -->  00:03:59.010
So you may be wondering how the heck did I know these codes.

48

00:03:59.010  -->  00:04:01.050
And how does that actually work.

49

00:04:01.050  -->  00:04:08.820
So if I want to go out and copy and paste the codes from the notebook for the lecture then you can reference

50

00:04:08.820  -->  00:04:09.440
it yourself.

51

00:04:09.450  -->  00:04:12.220
But I'm going to leave it here in the script.

52

00:04:12.870  -->  00:04:13.960
Let me just comment.

53

00:04:14.070  -->  00:04:14.960
All of them out.

54

00:04:15.180  -->  00:04:21.120
So we don't get any errors here and we can actually discuss all of these.

55

00:04:21.750  -->  00:04:29.190
So the formatting or the format argument for as Date Function is going to accept a character string

56

00:04:29.580  -->  00:04:36.870
in the same format of the character you're trying to convert to a Date object.

57

00:04:36.870  -->  00:04:41.760
And what that basically means is you can use the as that date in combination with the format argument

58

00:04:42.060  -->  00:04:47.790
to convert any string representation of a date to an actual date object which is super useful for time

59

00:04:47.790  -->  00:04:50.760
series analysis.

60

00:04:50.760  -->  00:04:59.040
So for example let's say I have as Dot dates and my character string looks something like this it looks

61

00:04:59.040  -->  00:05:10.720
like let's say it's going to say June comma 0 1 comma 2002.

62

00:05:10.970  -->  00:05:12.590
Now I just need to add a format.

63

00:05:12.590  -->  00:05:19.760
Arguments equals and then a character string with the base format of the character that I trying to

64

00:05:19.760  -->  00:05:23.900
convert in this case I have the full month.

65

00:05:23.900  -->  00:05:27.650
So the full month name that's going to be percentage sign capital B.

66

00:05:27.650  -->  00:05:31.260
And at the end of this lecture I'll discuss how you can actually find all these codes.

67

00:05:31.370  -->  00:05:35.870
They're presented for you in the notes but you can actually find them in the documentation to help call

68

00:05:36.070  -->  00:05:38.060
and I'll show you that at the end of the lecture.

69

00:05:38.200  -->  00:05:39.950
For now we'll just use these notes.

70

00:05:40.160  -->  00:05:41.950
So the first thing I have is a full month.

71

00:05:42.080  -->  00:05:44.850
So I'm going to say percentage sign capital B.

72

00:05:45.080  -->  00:05:48.350
Next thing I have is a comma after that.

73

00:05:48.380  -->  00:05:50.590
I have two digits for the day.

74

00:05:50.780  -->  00:05:51.570
So of the month.

75

00:05:51.590  -->  00:05:55.460
That's all a number that's going to be percentage sign lowercase D.

76

00:05:55.610  -->  00:05:59.930
And then finally you have the full four digit year which is going to be percentage sign capital Y

77

00:06:03.300  -->  00:06:11.640
and now notice I was able to convert June comma's 0 1 common 2002 to the standard date format.

78

00:06:11.870  -->  00:06:17.390
So hopefully now you can begin to see how this would be super useful if you have time or date information

79

00:06:17.510  -->  00:06:18.140
inside it.

80

00:06:18.140  -->  00:06:23.230
Let's say some sort of Excel spreadsheet that you were trying to import into our.

81

00:06:23.570  -->  00:06:24.500
OK.

82

00:06:24.500  -->  00:06:27.490
Now let's talk about work time information.

83

00:06:27.560  -->  00:06:33.320
Are uses the posek C-T or post-sex LTE data types to store time information.

84

00:06:33.620  -->  00:06:41.160
That's capital P O S I x c t or LTE.

85

00:06:41.720  -->  00:06:46.250
And what that stands for is a portable operating system interface.

86

00:06:46.250  -->  00:06:51.230
The sort of object types are primarily used with Unix systems but they're available on all other operating

87

00:06:51.230  -->  00:06:52.360
systems as well.

88

00:06:52.700  -->  00:07:02.600
And as far as what we need to know we can just use the command as Dot Hasek's C-T or Piel s i x C-T

89

00:07:03.230  -->  00:07:11.030
to convert strings into data type or a time stamp information which we can use for time series analysis

90

00:07:11.390  -->  00:07:17.300
or any other sort of analysis where we actually need to know specific time stamps and have time information

91

00:07:17.420  -->  00:07:19.590
inside of that object.

92

00:07:19.610  -->  00:07:30.200
So let's go ahead and try passing a character here passing a character string let's say 11 0 2 0 3 and

93

00:07:30.200  -->  00:07:35.700
I can add a format arguments and we'll discuss how we can actually get these codes in a little bit.

94

00:07:35.830  -->  00:07:37.400
But I'll go ahead and show an example.

95

00:07:37.400  -->  00:07:45.570
So this character has hours minutes seconds Samis and percentage signs to show the formatting codes

96

00:07:45.580  -->  00:07:45.990
.

97

00:07:46.580  -->  00:07:51.580
And notice I get a quick warning message numerical expression has 10 elements only the first use.

98

00:07:51.800  -->  00:07:54.630
And that's because there is quite a bit more information here.

99

00:07:54.710  -->  00:07:56.310
So that fills in information.

100

00:07:56.510  -->  00:08:01.580
I only gave it time information so it went ahead and it filled in the year in my time zone.

101

00:08:01.580  -->  00:08:02.750
So keep that in mind.

102

00:08:02.790  -->  00:08:10.190
I'll do that as I use this as that posek city in order to convert just a simple time stamp information

103

00:08:10.190  -->  00:08:10.270
.

104

00:08:10.310  -->  00:08:13.990
If it doesn't have that information well go ahead and add it in.

105

00:08:14.000  -->  00:08:16.190
So that's just something to keep in mind.

106

00:08:16.400  -->  00:08:21.970
However usually we actually won't be using this sort of as the host city function.

107

00:08:22.550  -->  00:08:30.780
Will be using the s t r p time or stript time function.

108

00:08:30.780  -->  00:08:32.410
Let's go ahead and call help on this.

109

00:08:32.570  -->  00:08:34.040
So you can pull up the documentation

110

00:08:38.990  -->  00:08:41.590
and the squid and pull the documentation tab.

111

00:08:42.140  -->  00:08:47.510
So if we say help strip time you'll notice you get a date time conversion functions to and from character

112

00:08:47.510  -->  00:08:48.020
.

113

00:08:48.050  -->  00:08:53.390
And this is the main piece of our documentation going to be using in order to figure out what the codes

114

00:08:53.670  -->  00:08:55.160
for formatting are.

115

00:08:55.160  -->  00:08:59.930
So if you keep scrolling down here here you see a full list of all the codes and what they actually

116

00:08:59.930  -->  00:09:01.160
stand for.

117

00:09:01.160  -->  00:09:05.240
So for example we're using H capital H.

118

00:09:05.240  -->  00:09:10.370
So percent of St. h it's maybe a little small to read here but you can go ahead and type in help stript

119

00:09:10.370  -->  00:09:12.150
time yourself to check this out.

120

00:09:12.270  -->  00:09:13.900
But capital H.

121

00:09:13.910  -->  00:09:19.120
Percentages are percent capital H stands for hours as a dustball number.

122

00:09:19.520  -->  00:09:25.010
And for example if we go ahead and scroll back up here to see lower case D which we're using we're using

123

00:09:25.190  -->  00:09:29.680
as the date we see it stands for a day of month as a decimal number.

124

00:09:29.690  -->  00:09:34.850
So whenever you actually need the codes for formatting how to use them or information on them you can

125

00:09:34.850  -->  00:09:42.950
just say help strip time and ship time is going to be your basic time conversion function for to and

126

00:09:42.950  -->  00:09:49.400
from character strings or character values to convert them into actually time stamp information objects

127

00:09:49.400  -->  00:09:49.910
.

128

00:09:49.910  -->  00:09:55.820
So this is going to be the main tool we use from now on as far as converting things to time stamp information

129

00:09:55.820  -->  00:09:56.970
.

130

00:09:56.990  -->  00:10:01.220
So let me go ahead and show you a quick example of what that actually looks like.

131

00:10:01.850  -->  00:10:06.680
You're going to go ahead and use it almost exactly the same way as we're just using as they are or as

132

00:10:06.680  -->  00:10:15.680
that posek CTE you're going to go ahead to say stript time in the character string you want to try to

133

00:10:15.680  -->  00:10:22.220
strip time from and you'll notice if I just say 11 or two or three I'll get an error because format

134

00:10:22.220  -->  00:10:22.750
is missing.

135

00:10:22.750  -->  00:10:26.420
So you still need to put a format here even with strip time.

136

00:10:26.420  -->  00:10:32.120
So you can say format equals and you can then go ahead to just pass character string with the format

137

00:10:32.120  -->  00:10:32.450
.

138

00:10:32.450  -->  00:10:41.900
This case going to be our capital H colon minute capital M them percentage sign capital S for seconds

139

00:10:41.900  -->  00:10:42.440
.

140

00:10:42.650  -->  00:10:48.680
And again the way to actually get these codes and how to actually construct this string is by using

141

00:10:48.680  -->  00:10:54.190
help strip time and then checking out the help documentation that pops up.

142

00:10:54.190  -->  00:11:00.840
Here you go to scroll down and you essentially just assemble whatever format your string is in.

143

00:11:01.040  -->  00:11:07.910
So usually be applying stript up time using those apply functions we learned earlier in order to convert

144

00:11:08.030  -->  00:11:15.270
a vector or a column full of time stamp information or at least characters that appear to be times into

145

00:11:15.350  -->  00:11:20.650
real time stamp information with dates time zones hour seconds etc..

146

00:11:20.660  -->  00:11:24.900
Ok that's all we've discussed for this lecture on dates and time stamp information.

147

00:11:25.170  -->  00:11:27.740
That's just a quick review of what you should have gotten out of this lecture.

148

00:11:27.950  -->  00:11:34.010
Really if I just clear the consul quickly here all you really need to understand is how to call help

149

00:11:34.100  -->  00:11:40.550
for stript time Fulop to help documentation so you can reference it and even if you scroll all the way

150

00:11:40.550  -->  00:11:44.430
down you see tons of information here as well as just basic examples.

151

00:11:44.720  -->  00:11:48.170
So once you know how to call help strict time you're basically good to go.

152

00:11:48.440  -->  00:11:53.880
And then you should also feel comfortable of calling stript time passing in some sort of day here.

153

00:11:53.900  -->  00:12:00.470
Obviously not the word day but using format to format your day information just like we've been showing

154

00:12:00.470  -->  00:12:02.510
throughout this lecture.

155

00:12:02.510  -->  00:12:03.030
OK.

156

00:12:03.260  -->  00:12:04.700
So that's all there is to it.

157

00:12:04.790  -->  00:12:07.510
Hope you found that useful and I'll see at the next lecture.
