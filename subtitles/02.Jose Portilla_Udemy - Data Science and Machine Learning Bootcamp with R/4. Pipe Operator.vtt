WEBVTT
1

00:00:00.570  -->  00:00:05.920
Hello everyone and welcome to the lecture on the pipe operator the pipe operator is really useful when

2

00:00:05.920  -->  00:00:10.620
you're working at the plier library and it's going to allow us to chain together multiple operations

3

00:00:10.620  -->  00:00:12.230
or functions on a data set.

4

00:00:12.600  -->  00:00:15.440
Let's go ahead and learn how it works and jump to our studio.

5

00:00:15.880  -->  00:00:21.720
OK so here in our studio and before we even learn how to use the pipe OPERATOR I want to show the motivation

6

00:00:21.720  -->  00:00:26.050
behind the idea of why you would use it versus other methods.

7

00:00:26.070  -->  00:00:33.090
I'm going to start off with just importing the plier library just calling library on it and then I'm

8

00:00:33.090  -->  00:00:40.410
going to go ahead and assign the built in empty car's data frame to death and first thing we're going

9

00:00:40.410  -->  00:00:45.200
to try to do is perform multiple operations using nesting.

10

00:00:45.240  -->  00:00:52.510
So I'm going to go out and say filter that data frame where the MPG column is greater than 20.

11

00:00:52.860  -->  00:00:55.200
But that's actually not the only operation I want to do.

12

00:00:55.410  -->  00:00:58.110
I also want to take a random sample from this result.

13

00:00:58.270  -->  00:01:06.270
So I'll say sample underscore and and I want to go ahead and take five random samples from it and we'll

14

00:01:06.300  -->  00:01:08.190
do one more operation.

15

00:01:08.190  -->  00:01:14.130
I want to go ahead and arrange this so that it's in descending order by mpg

16

00:01:18.750  -->  00:01:26.940
and close off that final print sees all say this all as a result and then I'll go ahead and prints my

17

00:01:26.940  -->  00:01:28.560
results.

18

00:01:28.560  -->  00:01:29.630
Let's go ahead and run this.

19

00:01:29.640  -->  00:01:31.650
Make sure we roll everything correctly.

20

00:01:32.220  -->  00:01:33.200
And there it is.

21

00:01:33.510  -->  00:01:40.550
OK so I have my five random samples arranged by MPG from descending order greatest to least.

22

00:01:40.590  -->  00:01:44.670
And it's also every mile per gallon is greater than 20 here.

23

00:01:44.670  -->  00:01:46.170
OK so that's using nesting.

24

00:01:46.350  -->  00:01:50.610
If you were to come back to this code this sort of code is a little difficult to read because you have

25

00:01:50.610  -->  00:01:52.100
to read it from the inside out.

26

00:01:52.200  -->  00:01:56.160
You have to say OK I got this result with the filter then I took the sample of it.

27

00:01:56.220  -->  00:02:01.520
Then I arranged it so nesting isn't ideal for these sort of multiple operations especially if you can

28

00:02:01.540  -->  00:02:06.080
do more than three or more than two because it starts to get hard reading a little messy.

29

00:02:06.270  -->  00:02:10.650
So maybe you might be thinking well let's just do multiple assignments where each of these steps is

30

00:02:10.650  -->  00:02:12.360
going to be assigned a variable.

31

00:02:12.360  -->  00:02:14.120
Let's go ahead and try that out.

32

00:02:14.190  -->  00:02:21.330
So we're going to go ahead and try to rewrite this using multiple assignments and a clear line 5 there

33

00:02:23.130  -->  00:02:25.400
and I'll start off with just my filter step.

34

00:02:25.500  -->  00:02:31.420
So I wanted again to filter the data frame mpg greater than 20.

35

00:02:31.650  -->  00:02:39.300
I'll go ahead and just label that some variable A and then I want to go ahead and take a random sample

36

00:02:39.300  -->  00:02:49.770
of a saw say pass an A and I'll go ahead and take five samples so that we will call that B.

37

00:02:51.210  -->  00:02:54.870
And then finally what I want to do is arrange B.

38

00:02:54.870  -->  00:03:03.140
So I'm going to go ahead and say arr. B and then descending order of MPG and we'll finally save that

39

00:03:03.150  -->  00:03:05.130
to our result.

40

00:03:06.210  -->  00:03:09.400
Let's go ahead and run this and see if we get something similar.

41

00:03:10.470  -->  00:03:15.720
And we do know we don't get the exact same thing because we're taking a random sample of five here though

42

00:03:15.720  -->  00:03:17.460
we do get the same idea.

43

00:03:17.670  -->  00:03:20.020
We have MPG are all greater than 20.

44

00:03:20.030  -->  00:03:25.880
It's in a descending order and it's a random sample of five rows here.

45

00:03:25.890  -->  00:03:26.150
All right.

46

00:03:26.160  -->  00:03:29.180
So this is a little better and a little cleaner to read.

47

00:03:29.250  -->  00:03:34.530
The issue here though is that I've just created a bunch of variables that are all being stored in memory

48

00:03:34.530  -->  00:03:35.160
.

49

00:03:35.160  -->  00:03:40.680
So even though this is clear to read now Unfortunately I'm kind of wasting a lot of space time memory

50

00:03:41.040  -->  00:03:43.640
by doing these multiple assignments.

51

00:03:43.680  -->  00:03:49.210
So finally we have the motivation on trying to rewrite all of this using the pipe operator then we're

52

00:03:49.230  -->  00:03:51.840
to chain together multiple assignments.

53

00:03:51.840  -->  00:03:53.220
So it's going to delete that.

54

00:03:53.610  -->  00:03:57.420
And finally use the pipe operator to do all of this.

55

00:03:57.540  -->  00:04:02.410
So the syntax for the pipe operator is basically going to start off with your data.

56

00:04:03.000  -->  00:04:06.230
You're going to call the pipe operator which is like this.

57

00:04:06.450  -->  00:04:09.870
And then you're just going to have the operations you want to do on it.

58

00:04:09.870  -->  00:04:15.960
So you say like Operation one over here operation to over here.

59

00:04:15.960  -->  00:04:20.640
Operation three etc. and for each of these operations you won't need to pass in the data because you

60

00:04:20.640  -->  00:04:22.350
use the pipe operator.

61

00:04:22.350  -->  00:04:27.750
So I'm going to show you how this works super well with displayer so I have my data frame and I'm going

62

00:04:27.750  -->  00:04:32.790
to go ahead and pasand the first operation and the first operation I want to do is filter.

63

00:04:32.850  -->  00:04:35.580
I don't need to pass in my data because I Meason the pipe operator.

64

00:04:35.910  -->  00:04:38.820
I'll go ahead and say mpg greater than 20.

65

00:04:39.000  -->  00:04:44.040
Once I'm done with that I'm going to go ahead and pass it in the next step on this pipeline that I'm

66

00:04:44.070  -->  00:04:50.380
essentially building and I want to sample and I will go ahead and just sample size 5.

67

00:04:50.380  -->  00:04:52.400
So take five random samples of that.

68

00:04:52.470  -->  00:04:57.420
Notice again I'm not passing on the data because the data is already going along this pipeline.

69

00:04:57.420  -->  00:05:05.700
And then finally I want to arrange by descending order of MPG and we'll go ahead and put that whole

70

00:05:05.700  -->  00:05:07.090
thing as a result.

71

00:05:07.620  -->  00:05:14.770
So we'll just say result is that what's going to run this.

72

00:05:14.940  -->  00:05:16.090
And there you have it.

73

00:05:16.350  -->  00:05:21.420
So even though this is a long line we could break it up into multiple lines if we wanted to but we have

74

00:05:21.420  -->  00:05:28.830
this nice pipe operator that hopefully takes the best of both nesting and multiple assignments just

75

00:05:28.830  -->  00:05:29.480
like of nesting.

76

00:05:29.490  -->  00:05:35.430
I'm able to chain together multiple operations and just like multiple assignments I'm able to actually

77

00:05:35.430  -->  00:05:41.430
separate each of these into a nice easy to read separate step and the pipe operator allows us to do

78

00:05:41.430  -->  00:05:45.730
this without having to create a bunch of variables in between.

79

00:05:45.810  -->  00:05:50.680
So it performs this nice pipeline of operations and that's really how to use the pipe operator that's

80

00:05:50.700  -->  00:05:56.520
all there is to it you're going to chain together your operations remember it goes your data.

81

00:05:56.520  -->  00:06:00.290
The pipe operator syntax which is as percent saying greater than percent sign.

82

00:06:00.450  -->  00:06:04.200
And then the operations you want to do and you don't pass in the data because you already have it at

83

00:06:04.200  -->  00:06:05.160
the beginning.

84

00:06:05.610  -->  00:06:06.230
OK.

85

00:06:06.360  -->  00:06:08.260
So that's it for the pipe operator.

86

00:06:08.310  -->  00:06:12.900
Hopefully find that useful in your own work when you're trying to do multiple assignments or multiple

87

00:06:12.900  -->  00:06:16.340
operations or multiple functions on your dataset.

88

00:06:16.730  -->  00:06:19.050
OK thanks everyone and I'll see you the next lecture
