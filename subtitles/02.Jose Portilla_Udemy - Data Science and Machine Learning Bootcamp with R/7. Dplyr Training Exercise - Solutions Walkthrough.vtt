WEBVTT
1

00:00:00.780  -->  00:00:06.320
Hello everyone and welcome to the plier exercises solutions walk through in this lecture video.

2

00:00:06.330  -->  00:00:08.530
I'm going to be just going over the solutions for that.

3

00:00:08.530  -->  00:00:10.420
The plier exercise.

4

00:00:10.440  -->  00:00:13.490
Let's go ahead and jump to our studio and get started.

5

00:00:14.280  -->  00:00:16.470
OK so here we are our studio.

6

00:00:16.470  -->  00:00:23.260
First thing I want to do is just go ahead and call library the plier.

7

00:00:24.420  -->  00:00:26.660
Looks like it successfully was called.

8

00:00:26.700  -->  00:00:31.950
And then I just want to show the head of the empty cars data frame which is what we're going to be working

9

00:00:31.950  -->  00:00:33.160
with.

10

00:00:33.370  -->  00:00:35.320
They go ahead and expand this.

11

00:00:35.340  -->  00:00:41.610
I went ahead and copied and pasted the various operations that we had to do as part of the exercise

12

00:00:41.610  -->  00:00:42.290
.

13

00:00:42.330  -->  00:00:44.390
Let me go out and clear the console.

14

00:00:44.430  -->  00:00:49.010
I'll go ahead and clear the console after every operation just so we know it's that Brawne.

15

00:00:49.020  -->  00:00:52.440
So hopefully this is a pretty straightforward exercise.

16

00:00:52.440  -->  00:00:56.300
The only issue is probably remembering what the actual function name is.

17

00:00:56.550  -->  00:01:01.140
But other than that the should have been pretty straightforward because the whole point of the pliers

18

00:01:01.140  -->  00:01:07.200
to make your life easier through a simple syntax first exercise was to return rows of cars to have an

19

00:01:07.200  -->  00:01:11.060
MPG value greater than 20 and six cylinders.

20

00:01:11.190  -->  00:01:13.440
So let's go ahead and try that out.

21

00:01:13.890  -->  00:01:15.210
We'll say filter.

22

00:01:15.330  -->  00:01:18.210
So this was the function you had to find.

23

00:01:18.260  -->  00:01:22.190
Now you just passing your data and you pass in any conditions you want to filter by.

24

00:01:22.290  -->  00:01:28.500
In this case we wanted to filter by mpg greater than 20 and six cylinders meaning we want see a whale

25

00:01:28.500  -->  00:01:30.670
to be equal to six.

26

00:01:30.900  -->  00:01:33.090
And there's the result to filter.

27

00:01:33.090  -->  00:01:33.580
All right.

28

00:01:33.870  -->  00:01:37.020
Let me go out and clear the con..

29

00:01:37.050  -->  00:01:42.190
Next one we had to reorder the data frame by cylinder first and then by the sending weight.

30

00:01:42.450  -->  00:01:48.460
So we're ordering we use arr. then you just passing your data.

31

00:01:48.540  -->  00:01:50.400
Empty cars.

32

00:01:50.400  -->  00:01:56.390
And we want to go by cylinder first and then we want descending weights.

33

00:01:56.400  -->  00:02:04.740
So we have to pass an d s c and then the weight column C and if we check the results here we can scroll

34

00:02:04.740  -->  00:02:06.500
through them to make sure they look correct.

35

00:02:06.520  -->  00:02:11.590
But it looks like they do we Hirst's sort by cylinders we have four six and eight.

36

00:02:11.820  -->  00:02:17.610
And then with in each of those within each of the four cellars when each of the six cylinders etc. Each

37

00:02:17.610  -->  00:02:24.270
of those groups has weight going in descending order so from Greatest all the weight to least.

38

00:02:24.450  -->  00:02:24.870
Right.

39

00:02:24.900  -->  00:02:30.370
And that was just done with arr. passenger data and then pasand the already one to the columns you want

40

00:02:30.380  -->  00:02:34.210
ordered by me go ahead and cons..

41

00:02:34.500  -->  00:02:39.380
Next one was to just simply select the columns mpg and HP.

42

00:02:39.610  -->  00:02:45.500
Again this is pretty simple we just say select and the passenger data frame empty cars.

43

00:02:45.500  -->  00:02:51.510
In this case and we just passed the columns you want to select this case it was just mpg and horsepower

44

00:02:53.010  -->  00:02:53.820
and that's it.

45

00:02:53.820  -->  00:02:57.630
That's how you can select those two columns again hopefully pretty simple.

46

00:02:57.630  -->  00:03:03.300
The key here is just getting a good knowledge of how to use those functions as far as recalling which

47

00:03:03.300  -->  00:03:09.420
actual functions are basically the hard part is just memorizing the function names.

48

00:03:09.420  -->  00:03:09.680
All right.

49

00:03:09.690  -->  00:03:12.810
Next one you want to select distinct values of the gear columns.

50

00:03:12.810  -->  00:03:14.160
How do we actually do that.

51

00:03:14.160  -->  00:03:15.930
This one's actually a two step process.

52

00:03:15.930  -->  00:03:17.950
We need two functions.

53

00:03:18.090  -->  00:03:22.480
First we need to select the year column.

54

00:03:22.650  -->  00:03:27.540
So I pass in my data frame and then the name of the column on a selects.

55

00:03:27.540  -->  00:03:31.140
Now if I just run this I'll get the entire column back.

56

00:03:31.320  -->  00:03:37.680
What I actually want to run we go ahead and write that again is this stink.

57

00:03:38.340  -->  00:03:42.140
Pass this into this stinks and this will return the unique are distinct values.

58

00:03:42.270  -->  00:03:46.590
This case we have four years three year and five year cars.

59

00:03:46.620  -->  00:03:52.230
So again this is kind of two function distinct and that selects could have also use the pipe operator

60

00:03:52.260  -->  00:04:00.520
if you wanted to show you what that would look like with the pipe operator can use say empty cars.

61

00:04:01.200  -->  00:04:02.830
Then pipe in our step.

62

00:04:02.830  -->  00:04:12.660
So first we wanted to select the gear column and then we want to go ahead and just call it the stink

63

00:04:12.660  -->  00:04:19.620
on that whether or not this is more readable kind of up to you personally I think the first way it was

64

00:04:19.620  -->  00:04:25.830
more readable but you can use the pipe operator to change these operations together.

65

00:04:25.860  -->  00:04:26.910
All right.

66

00:04:26.910  -->  00:04:32.160
Next we wanted to create a new column called performance which is calculated by HP divided by weights

67

00:04:32.160  -->  00:04:32.580
.

68

00:04:32.610  -->  00:04:33.860
Let's go ahead and do that.

69

00:04:33.870  -->  00:04:41.580
So to create new columns based off of the ones we use mutate and then we just pass in our data frame

70

00:04:41.580  -->  00:04:48.510
our data and we pass in our new column name this case it was performance equals and then the actual

71

00:04:48.510  -->  00:04:54.570
equation we want to calculate it by this case it would just H-P the right way can go in and check that

72

00:04:54.570  -->  00:04:55.010
out.

73

00:04:55.230  -->  00:04:56.100
And there it is.

74

00:04:56.100  -->  00:04:57.980
We have performance.

75

00:04:58.260  -->  00:05:02.700
Hopefully this seems familiar because we've actually done this exact same operation before just not

76

00:05:02.700  -->  00:05:04.930
with the plier.

77

00:05:04.950  -->  00:05:05.400
All right.

78

00:05:05.490  -->  00:05:12.240
Moving on we wanted to find the mean value of the MPG column isn't the player MeeGo didn't clear the

79

00:05:12.240  -->  00:05:13.600
con..

80

00:05:14.430  -->  00:05:16.790
So how can we find the mean use in the player.

81

00:05:16.800  -->  00:05:21.720
Well in this case we'll go ahead and use summerize.

82

00:05:21.750  -->  00:05:23.430
All right so the summerize function

83

00:05:26.820  -->  00:05:29.730
is going to go ahead and pass in our data frame empty cars

84

00:05:33.360  -->  00:05:35.490
and then we want to find the mean NPG value.

85

00:05:35.520  -->  00:05:43.360
So we just go ahead and say we can apply average MPG as our new column name.

86

00:05:43.800  -->  00:05:51.240
And then we just say I mean mpg and that will turn out the average MPG for those cars just twenty point

87

00:05:51.630  -->  00:05:53.520
one Ishmael's per gallon.

88

00:05:53.580  -->  00:05:58.750
And then finally you want to use pipe operators to get the mean HP value for cars of six cylinders.

89

00:05:58.770  -->  00:05:59.460
So how do we do that.

90

00:05:59.460  -->  00:06:01.640
Well we need to break this down into our step.

91

00:06:01.650  -->  00:06:06.580
So first thing is their data frame and you have the pipe operator.

92

00:06:06.900  -->  00:06:11.470
We want to filter first by six cylinders.

93

00:06:12.090  -->  00:06:20.370
So we need C-y l.com equality to 6 there we're going to go ahead use another pipe operator and then

94

00:06:20.370  -->  00:06:25.980
we're just going to go ahead and use our summerize function just like we did earlier and I'll go ahead

95

00:06:25.980  -->  00:06:32.310
and say average HP equals mean HP.

96

00:06:32.470  -->  00:06:32.920
Okay.

97

00:06:32.940  -->  00:06:36.980
And that's the result 120 two point three.

98

00:06:36.990  -->  00:06:37.230
All right.

99

00:06:37.230  -->  00:06:40.230
So hopefully those the player exercises are pretty straightforward.

100

00:06:40.230  -->  00:06:44.930
The main part of this is just remembering what the actual function names are.

101

00:06:44.940  -->  00:06:47.130
All right thanks everyone and I'll see you the next lecture
