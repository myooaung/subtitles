1

00:00:00,570  -->  00:00:06,200
Hello everyone and welcome to the conditional statements exorcized solutions walk through this lecture

2

00:00:06,210  -->  00:00:10,730
we're going to be going over the solutions and programming them out or the conditional statements exercises

3

00:00:10,730  -->  00:00:11,170
.

4

00:00:11,190  -->  00:00:16,640
Let's go ahead and jump to our studio to get started right so here we are our studio.

5

00:00:16,650  -->  00:00:21,780
The first example script was already done for you is just a very simple script to print Hello it's x

6

00:00:21,780  -->  00:00:22,940
is equal to 1.

7

00:00:23,100  -->  00:00:24,640
It looked something like this.

8

00:00:24,650  -->  00:00:30,590
I just copy and paste in the notes but let's go ahead and move on to the exercise problems later on

9

00:00:30,600  -->  00:00:34,770
we're going to learn about functions which is going to make organizing this type of code a lot easier

10

00:00:36,780  -->  00:00:38,410
because here it's copied and pasted.

11

00:00:38,400  -->  00:00:44,010
The first exercise which was to write a script that will print even numbers some sort of character string

12

00:00:44,460  -->  00:00:46,250
if the variable x is an even number.

13

00:00:46,260  -->  00:00:48,700
Otherwise print not even.

14

00:00:48,720  -->  00:00:53,300
So let's go ahead and just assign some variable x and we'll play around a bit later on the check this

15

00:00:53,840  -->  00:00:55,820
but to check if that number is even.

16

00:00:56,100  -->  00:01:00,480
We have to know if we divide it by two is the remainder 0.

17

00:01:00,600  -->  00:01:05,120
And the way you can check that is in this modulo capability.

18

00:01:05,280  -->  00:01:12,300
So this conditional statement right here if X divided by two remainders equals zero then I can go ahead

19

00:01:12,360  -->  00:01:16,080
imprints even number.

20

00:01:16,080  -->  00:01:18,000
Let's go ahead and say even.

21

00:01:18,000  -->  00:01:22,160
Else I want to print.

22

00:01:22,440  -->  00:01:28,200
Not even.

23

00:01:28,200  -->  00:01:28,920
And there we have it.

24

00:01:28,920  -->  00:01:29,660
So let's go in and run.

25

00:01:29,660  -->  00:01:31,780
This looks like two is even.

26

00:01:31,800  -->  00:01:33,150
That's good.

27

00:01:33,150  -->  00:01:37,710
Now let's go ahead and put in 13 Juno's odd.

28

00:01:37,710  -->  00:01:38,780
Not even.

29

00:01:38,850  -->  00:01:39,390
All right.

30

00:01:39,400  -->  00:01:42,870
So pretty basic exercise to Kita this one's for isn't a trick.

31

00:01:42,910  -->  00:01:44,830
Was just remembering that you can have this.

32

00:01:45,120  -->  00:01:50,290
Essentially my capability to get remainders out you can go ahead and review the arithmetic lecture you

33

00:01:50,460  -->  00:01:53,190
a refresher on that.

34

00:01:53,340  -->  00:01:55,860
Moving along to exercise number two.

35

00:01:55,890  -->  00:02:00,190
And to go ahead and clear this all right.

36

00:02:00,300  -->  00:02:07,770
So jumping to exercise to want to write a script that will print is a matrix variable x is the matrix

37

00:02:07,770  -->  00:02:07,890
.

38

00:02:07,890  -->  00:02:10,370
Otherwise prints not a matrix.

39

00:02:10,730  -->  00:02:13,510
And in case you need some hints you may want to check out.

40

00:02:13,500  -->  00:02:15,450
Help is that matrix.

41

00:02:15,510  -->  00:02:21,810
So I want to go ahead and just go quickly over these is dot methods work centrally if you want to check

42

00:02:21,810  -->  00:02:28,620
if something is of a particular class you can say is dots and then notice our studio has a bunch of

43

00:02:28,720  -->  00:02:30,810
dropdown options here in this menu.

44

00:02:31,020  -->  00:02:37,950
You can say is dots and any sort of data structure or data type you want so you can say is that logical

45

00:02:38,720  -->  00:02:44,990
pass in either the variable you're checking or that actual name of the variable So for instance is logical

46

00:02:45,000  -->  00:02:47,090
true that returns true.

47

00:02:47,250  -->  00:02:50,920
Passen an integer such as 12 will return false.

48

00:02:50,970  -->  00:02:57,420
So that's the way you can use the method to check if something is a data structure or a data type that

49

00:02:57,420  -->  00:02:59,040
you're looking for.

50

00:02:59,050  -->  00:03:01,570
Sissons actually then quite straightforward.

51

00:03:01,680  -->  00:03:03,230
I'm going to go ahead and make a matrix.

52

00:03:03,240  -->  00:03:07,280
One quick way to do this just by creating an empty Matrix like so.

53

00:03:07,620  -->  00:03:15,640
And then we'll go ahead and say if is dot matrix Has an x.

54

00:03:16,230  -->  00:03:20,780
And notice that these is dot methods always return some sort of logical value.

55

00:03:20,790  -->  00:03:23,530
So I can just leave this as my conditional statement.

56

00:03:23,550  -->  00:03:26,380
So this is going to return true or false.

57

00:03:27,030  -->  00:03:40,830
And then I'm going to go ahead and say print is Matrix else I'll just go ahead and print not a matrix

58

00:03:40,850  -->  00:03:41,550
.

59

00:03:42,110  -->  00:03:43,270
Whoops.

60

00:03:43,710  -->  00:03:44,670
There you go.

61

00:03:44,670  -->  00:03:47,880
So this should printout is a matrix.

62

00:03:47,910  -->  00:03:48,650
Perfect.

63

00:03:48,730  -->  00:03:57,280
And if I say X to be something else maybe a character string such as GWV.

64

00:03:57,570  -->  00:04:02,680
Now if you run this we get not a matrix so that all worked out trick for this one.

65

00:04:02,690  -->  00:04:06,360
It's just discovering how these methods work.

66

00:04:06,360  -->  00:04:08,590
Next one is exercise three.

67

00:04:08,600  -->  00:04:11,170
Let's go ahead and jump to it.

68

00:04:11,220  -->  00:04:17,430
All right exercise 3 was to create a script that given a numeric vector x for length 3 it will print

69

00:04:17,430  -->  00:04:21,810
out the elements in order from high to low and you must use if.

70

00:04:21,870  -->  00:04:24,600
Else if and else statements for your logic.

71

00:04:24,600  -->  00:04:30,630
So in other words you can just use a quicksort function the point of this script was just to get you

72

00:04:30,630  -->  00:04:34,950
used to using a bunch of IF or else if statements in order.

73

00:04:34,980  -->  00:04:39,780
So usually you would never actually program something that looks like this but this is just to get you

74

00:04:39,960  -->  00:04:44,620
really comfortable with using if else and these other conditional statements.

75

00:04:44,850  -->  00:04:50,370
So let's go ahead and start off with this is because again going to be kind of long and you usually

76

00:04:50,370  -->  00:04:53,970
won't actually type something like this but this is just for practice.

77

00:04:54,030  -->  00:05:02,040
So we want to do is systematically check which elements are going to be the first second and third highest

78

00:05:02,040  -->  00:05:02,460
elements.

79

00:05:02,460  -->  00:05:07,080
So essentially what I want to do is at the end of this mean going right at the very end of the script

80

00:05:07,590  -->  00:05:16,560
I'm gonna say prints no going to use the paste function to paste together three variables first second

81

00:05:17,370  -->  00:05:18,170
and third.

82

00:05:18,570  -->  00:05:24,030
And what these variables stand for that we haven't actually created yet or a sign that we will is the

83

00:05:24,450  -->  00:05:30,000
first Greatest the second greatest in the third greatest So the highest second highest third highest

84

00:05:30,010  -->  00:05:30,420
.

85

00:05:30,780  -->  00:05:35,550
Let's go ahead and start assigning these so we'll start by just comparing the first two elements.

86

00:05:35,550  -->  00:05:38,400
And then we use indexing brackets to do this.

87

00:05:38,490  -->  00:05:42,240
So I'm going to compare X-1 versus x 2.

88

00:05:42,240  -->  00:05:55,470
So if x is greater than x 2 I'm going to assign first to be x 1 and then second to be x 2.

89

00:05:55,770  -->  00:05:59,220
Else I'm going to do the exact opposite.

90

00:05:59,220  -->  00:06:06,430
I'm going to go out and copy this save some time paste here but then just switch the numbers.

91

00:06:06,480  -->  00:06:06,890
All right.

92

00:06:07,080  -->  00:06:09,010
So that's assigning first and second.

93

00:06:09,150  -->  00:06:10,940
And then we've got to start bringing in third.

94

00:06:10,960  -->  00:06:12,440
Two it's.

95

00:06:12,720  -->  00:06:14,840
So that's that script.

96

00:06:15,540  -->  00:06:17,860
Taking care of the first two numbers.

97

00:06:17,910  -->  00:06:21,740
And now we just need to compare the order with the third number.

98

00:06:21,750  -->  00:06:26,520
So essentially if this was this would already be done if we just had a vector of two numbers.

99

00:06:26,520  -->  00:06:34,650
So let's go ahead and add in our third number so when we say if the third number is greater than first

100

00:06:35,940  -->  00:06:46,680
and the third number is greater than the second one and then go ahead and do is do assignments like

101

00:06:46,680  -->  00:06:49,670
this on going to re-assign.

102

00:06:49,740  -->  00:06:54,930
What's the third argument or th i.

103

00:06:55,020  -->  00:07:02,580
To be second re-assigning second to be first and then re-assign first place to be that third element

104

00:07:02,580  -->  00:07:03,000
.

105

00:07:03,000  -->  00:07:07,830
So basically what this is saying is if that third element was greater than the first at one and greater

106

00:07:07,830  -->  00:07:15,180
than the second one then basically shift everything over so that the third element is the first one

107

00:07:15,190  -->  00:07:15,490
.

108

00:07:16,020  -->  00:07:23,250
And then I'm going to have an ELSE IF statement which will be if the third element is less than the

109

00:07:23,250  -->  00:07:32,470
first one ends if the third element is less than the second one.

110

00:07:32,640  -->  00:07:37,380
The ones we already kind of ordered up then I already know the third element is going to be the smallest

111

00:07:37,380  -->  00:07:37,800
one.

112

00:07:37,800  -->  00:07:39,450
So I will reassign it to

113

00:07:42,540  -->  00:07:43,260
x 3.

114

00:07:43,260  -->  00:07:45,210
So that's essentially last place.

115

00:07:45,210  -->  00:07:49,780
So I want to go ahead and put in some comments here before we finish up.

116

00:07:49,830  -->  00:07:57,900
So this one is first and second place for these two.

117

00:07:57,900  -->  00:08:03,590
This one is going to be if the third element's was.

118

00:08:04,140  -->  00:08:13,740
We'll go ahead and say largest This is for third element was the smallest And if that's not the case

119

00:08:13,740  -->  00:08:17,220
we'll then I know it's right in the middle since there is only three of them and I'm going to go ahead

120

00:08:17,220  -->  00:08:24,630
and take care of that with just a simple S L statement and shift that third output to be actually second

121

00:08:25,170  -->  00:08:29,090
and then second to be that third element.

122

00:08:29,100  -->  00:08:33,190
So I know this is a little maybe confusing as far as the terminology here.

123

00:08:33,240  -->  00:08:36,080
So you may want to just use a B and C instead.

124

00:08:36,300  -->  00:08:44,160
If this T H I S C C F I R A variable choice for the names is a little confusing but hopefully the logic

125

00:08:44,160  -->  00:08:45,900
here is pretty solid.

126

00:08:46,350  -->  00:08:52,020
Basically what you're doing is just organizing the first two elements in first and second place and

127

00:08:52,020  -->  00:08:54,800
then you just seeing where the third element should go.

128

00:08:54,960  -->  00:08:56,880
Should it be the first one since is the largest.

129

00:08:56,880  -->  00:09:01,440
Should it be the last one if it's the smallest or otherwise it goes in the middle.

130

00:09:01,440  -->  00:09:02,430
Let's go ahead and run this.

131

00:09:02,430  -->  00:09:04,630
Make sure it all worked out.

132

00:09:04,950  -->  00:09:11,550
It looks like it worked out so I put in three 7 1 and an output 73 one perfect greatest the smallest

133

00:09:11,550  -->  00:09:12,210
.

134

00:09:12,240  -->  00:09:13,440
Go ahead and check out the notebook.

135

00:09:13,440  -->  00:09:15,500
You want to reference this code again.

136

00:09:15,600  -->  00:09:16,840
I'm going to go ahead and move on.

137

00:09:16,860  -->  00:09:21,650
Exercise for exercise for jumping to it.

138

00:09:21,660  -->  00:09:28,620
We wanted to write a script that uses if else if else statements to print the max elements and a numeric

139

00:09:28,620  -->  00:09:30,740
vector with three elements.

140

00:09:30,750  -->  00:09:31,140
All right.

141

00:09:31,230  -->  00:09:32,530
Let's go ahead and see how we can do that.

142

00:09:32,530  -->  00:09:39,020
Sorry no my input is going to be some sort of numeric elements.

143

00:09:39,120  -->  00:09:44,640
We'll go ahead and say 10:21 and I want to find the max elements and I'm going to use if.

144

00:09:44,640  -->  00:09:49,290
Else if an L statements so you could just use the built in max function but that would kind of kill

145

00:09:49,290  -->  00:09:51,210
the whole purpose of this exercise.

146

00:09:51,690  -->  00:09:56,820
So in this case I'm going to start off of an IF statement checking for this logic.

147

00:09:56,820  -->  00:10:06,630
I'm going to say if the first elements is greater than the second one and if my first element is greater

148

00:10:06,630  -->  00:10:13,290
than my third one go ahead and just print out the first element since that's the largest one.

149

00:10:13,290  -->  00:10:18,690
So if the first element is bigger than the second one and the third one that I know is the largest.

150

00:10:18,690  -->  00:10:22,550
So this should feel kind of similar to what we just did earlier and then say.

151

00:10:22,560  -->  00:10:24,280
Else if.

152

00:10:25,140  -->  00:10:30,030
If the second element is greater than the third one

153

00:10:32,490  -->  00:10:36,990
printouts that element sent in the second one is the greatest.

154

00:10:36,990  -->  00:10:41,190
Otherwise go ahead and print out that very last third element.

155

00:10:41,220  -->  00:10:46,650
So why do I not have to check any more for the first element you may be wondering in this if statement

156

00:10:46,650  -->  00:10:47,030
.

157

00:10:47,040  -->  00:10:51,000
Well the reason for that is because I already checked that against both the second and third element

158

00:10:51,070  -->  00:10:52,790
in that very first IF statement.

159

00:10:52,860  -->  00:10:57,530
So it's essentially been clear and basically clearing each of those elements as they go along.

160

00:10:57,720  -->  00:11:00,720
I clear the first number to check if it's the largest.

161

00:11:00,720  -->  00:11:02,560
Then I clear the second number to check it.

162

00:11:02,640  -->  00:11:07,780
If it's the largest And then finally if neither the first or second were the largest by default.

163

00:11:07,820  -->  00:11:09,690
I know the third one has to be the largest.

164

00:11:09,930  -->  00:11:15,190
Let's go ahead and run this it looks if we get 20 so that's good.

165

00:11:15,240  -->  00:11:21,370
Let's go in and mess around the order of these Let's put one 2 three points up three.

166

00:11:21,370  -->  00:11:28,400
Now let's put the largest in the middle we'll say one 100 two and it prints out 100.

167

00:11:28,410  -->  00:11:30,680
So looks like the scripts are working and eased.

168

00:11:30,700  -->  00:11:36,890
L if else if and else in order to do that in real life you would just see something like max of X. OK

169

00:11:37,020  -->  00:11:37,420
.

170

00:11:37,650  -->  00:11:41,740
Hopefully that was good practice as far as using if else and elses statements.

171

00:11:41,880  -->  00:11:43,500
That's really the point of this exercise.

172

00:11:43,500  -->  00:11:46,560
So usually you won't be writing such crazy scripts like this.

173

00:11:46,560  -->  00:11:51,570
As far as arranging or checking max of elements in a vector.

174

00:11:51,570  -->  00:11:55,710
But the idea of if else if an else is pretty important for programming in general.

175

00:11:55,710  -->  00:12:01,550
So hopefully this was a good exercise to just give you a nice solid foundation in those concepts.

176

00:12:01,920  -->  00:12:02,700
Okay.

177

00:12:02,700  -->  00:12:04,470
Thanks everyone and I'll see at the next lecture
