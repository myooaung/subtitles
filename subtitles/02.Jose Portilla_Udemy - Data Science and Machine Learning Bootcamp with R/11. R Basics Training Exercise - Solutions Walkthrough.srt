1

00:00:00,780  -->  00:00:06,730
Hello everyone and welcome to the basics exercise solutions walk through in this lecture video.

2

00:00:06,750  -->  00:00:11,970
I'm going to be going ahead and walking through and explaining the solutions to the our basic exercise

3

00:00:11,970  -->  00:00:13,130
questions.

4

00:00:13,140  -->  00:00:16,250
Let's go ahead and jump to our studio and get started.

5

00:00:16,260  -->  00:00:18,250
OK so here we are our studio.

6

00:00:18,420  -->  00:00:23,580
I want to go ahead and shrink the plots and environment tabs who won't really be using them.

7

00:00:23,640  -->  00:00:25,930
So it's going to push those to the right.

8

00:00:26,760  -->  00:00:32,520
And the first question we want to solve is this what is two to the power of five.

9

00:00:32,520  -->  00:00:35,390
I'll go ahead and copy and paste questions as we go along.

10

00:00:35,940  -->  00:00:40,470
Hopefully you remember from the arithmetic lecture that today the power of five can be solved and are

11

00:00:40,920  -->  00:00:46,220
just using that carrot symbol so to the power of five we get 32 back.

12

00:00:46,380  -->  00:00:48,270
If you don't remember how to do that arithmetic.

13

00:00:48,270  -->  00:00:52,920
Go ahead and review the arithmetic lecture and are moving on to the next question.

14

00:00:52,950  -->  00:01:00,600
We wanted to create a vector called stock prices with the falling points and those points were a 23

15

00:01:00,600  -->  00:01:02,990
27 23:21 et cetera.

16

00:01:03,030  -->  00:01:04,520
Let's go in and see what we can do that.

17

00:01:04,950  -->  00:01:06,390
So I'll make my variable.

18

00:01:06,390  -->  00:01:09,130
Stock up prices.

19

00:01:09,810  -->  00:01:18,050
And then I use the combined function which is C and I enter those integers separated by a comma.

20

00:01:19,860  -->  00:01:20,460
OK great.

21

00:01:20,490  -->  00:01:23,450
So now I have my stock prices vector.

22

00:01:23,490  -->  00:01:29,070
Next thing we had to do was this we wanted to assign names to the price data points relating to the

23

00:01:29,070  -->  00:01:33,710
day of the week starting of Monday Tuesday Wednesday Thursday etc..

24

00:01:33,810  -->  00:01:35,570
So how do we actually do that.

25

00:01:36,150  -->  00:01:41,070
Well hopefully remember the names function and to use the names function we pass in what we actually

26

00:01:41,070  -->  00:01:41,960
want to name.

27

00:01:42,300  -->  00:01:46,740
So I say stocked up prices and then assign a vector of names.

28

00:01:46,740  -->  00:01:48,640
This case will go ahead and assign.

29

00:01:48,750  -->  00:01:52,530
Monday Tuesday.

30

00:01:53,010  -->  00:02:02,490
Repassing these as strings are characters Thursday and then finally Friday and then if we go ahead and

31

00:02:02,490  -->  00:02:04,480
check stock prices now.

32

00:02:04,890  -->  00:02:09,560
Notice when we print it out we get Monday $23 Tuesdays 27 etc..

33

00:02:09,750  -->  00:02:15,390
So just in our minds the numbers here represent the stock price in dollars.

34

00:02:15,420  -->  00:02:17,630
OK so time for the next question.

35

00:02:17,640  -->  00:02:23,220
Next question was what was the average mean stock price for the week.

36

00:02:23,220  -->  00:02:27,060
So it was this was the average mean stock price for the week.

37

00:02:27,180  -->  00:02:31,920
There was a hint that you may need to reference a built in function and the built in function was mean

38

00:02:31,930  -->  00:02:32,360
.

39

00:02:32,760  -->  00:02:39,420
So using mean what we can do is just pasand stocked up prices in a row return the mean value for the

40

00:02:39,420  -->  00:02:43,470
stock prices which in this case was twenty five point six.

41

00:02:44,070  -->  00:02:44,940
OK.

42

00:02:44,940  -->  00:02:51,200
Next question was this let's go out and put this on two lines.

43

00:02:51,380  -->  00:02:58,230
It was create a vector called over 23 consisting of logicals that correspond to the days where the stock

44

00:02:58,230  -->  00:03:00,720
price was more than $23.

45

00:03:00,720  -->  00:03:02,610
So how do we actually do this.

46

00:03:02,790  -->  00:03:07,050
We'll use a comparison operator on a vector do this.

47

00:03:07,290  -->  00:03:14,850
So I'll say stocked up prices and I'll say greater than 23 and I'm going to show you what this actually

48

00:03:14,850  -->  00:03:15,890
outputs.

49

00:03:15,990  -->  00:03:22,950
So this outputs on a element by element basis which is stock numbers or stock prices were greater than

50

00:03:22,950  -->  00:03:23,690
23.

51

00:03:23,700  -->  00:03:29,250
So if we look back at the original stock prices we can see that Tuesday and Friday are the only two

52

00:03:29,250  -->  00:03:31,990
valleys that are greater than 23.

53

00:03:32,100  -->  00:03:36,340
And if we just go ahead and apply this comparison operator to the entire vector.

54

00:03:36,410  -->  00:03:43,780
So let's go ahead and assign that vector of logicals to that variable.

55

00:03:43,780  -->  00:03:44,960
Over 23.

56

00:03:44,980  -->  00:03:48,270
So say stock prices greater than 23.

57

00:03:48,580  -->  00:03:56,360
And now if I go ahead and check over 23 notice I get back that same vector of logicals.

58

00:03:56,670  -->  00:03:57,190
All right.

59

00:03:57,660  -->  00:04:01,190
I'm going to go ahead and clear my castle now.

60

00:04:01,320  -->  00:04:04,000
So have stock prices and over that 23.

61

00:04:04,080  -->  00:04:05,980
Let's go ahead and continue.

62

00:04:06,120  -->  00:04:07,650
Next answer your next question.

63

00:04:07,710  -->  00:04:15,660
Was this use the over that 23 vector to filter out the stock prices vector and only return that day

64

00:04:15,660  -->  00:04:19,350
in prices where the price was over $23.

65

00:04:19,350  -->  00:04:21,330
So how exactly can we do that.

66

00:04:21,840  -->  00:04:29,100
Well we can remember that we can use stock prices and bracket notation to actually filter out what we

67

00:04:29,190  -->  00:04:31,670
what information want from stock prices.

68

00:04:31,680  -->  00:04:36,780
So if stock prices looks like this I can go ahead and call stock prices.

69

00:04:37,200  -->  00:04:47,880
And then a bracket notation I can pass in that boolean value or a logical value vector it'll return

70

00:04:47,880  -->  00:04:51,480
back the actual days where that was true.

71

00:04:51,510  -->  00:04:58,470
This is exactly the same thing as saying stock up prices bracket and then passing and stock up prices

72

00:04:58,470  -->  00:05:01,740
again over 23.

73

00:05:02,400  -->  00:05:08,450
So this is the exact same thing but we just to simplify information we said over that 23 and we assigned

74

00:05:08,450  -->  00:05:11,380
it this actual conditional statement.

75

00:05:11,390  -->  00:05:11,690
All right.

76

00:05:11,730  -->  00:05:14,010
So that's how you answer that question.

77

00:05:14,130  -->  00:05:19,490
Next question was to use a built in function to find the day the price was the highest.

78

00:05:19,710  -->  00:05:21,060
The built in function for that.

79

00:05:21,060  -->  00:05:23,670
Hopefully you're able to discover was Max.

80

00:05:23,910  -->  00:05:27,060
So then we can just pass in stock prices.

81

00:05:27,420  -->  00:05:34,770
But notice when I use Mac Max I only get the number value 34 that didn't actually tell me what I was

82

00:05:34,770  -->  00:05:37,850
looking for the day the price was the highest.

83

00:05:37,860  -->  00:05:39,900
So there's a couple of ways to do this.

84

00:05:39,930  -->  00:05:43,460
One is knowing that the answer was 34.

85

00:05:43,500  -->  00:05:51,780
I could split this up into a second step and say stocked up prices passing stocked up prices check for

86

00:05:51,780  -->  00:05:55,940
equality with 34 to enter.

87

00:05:55,980  -->  00:05:59,410
And then I get back Friday the name of that value.

88

00:05:59,460  -->  00:06:02,460
That's one way to do this or the better way.

89

00:06:02,460  -->  00:06:09,390
Let me go in and clear this con. is to actually combine those steps saw say stocked up prices and then

90

00:06:09,390  -->  00:06:24,110
pasan stock prices equals equals max on stock prices and we get back the same value.

91

00:06:24,120  -->  00:06:27,150
But now it's in a clean line and this is pretty readable.

92

00:06:27,180  -->  00:06:32,470
I'm looking for where stock prices equals equals Max stock prices checking for equality there.

93

00:06:32,490  -->  00:06:35,820
We could also have taken this and assign a variable.

94

00:06:35,820  -->  00:06:44,310
So if I copy and pastes something like Max that price just like we did over 23 we assign that variable

95

00:06:44,820  -->  00:06:47,720
and then maybe this something like this maybe more readable to you.

96

00:06:47,820  -->  00:06:53,430
If we just pass in max price we get the same answer kind of up to you.

97

00:06:53,430  -->  00:06:57,240
Whichever way you actually want to execute this code.

98

00:06:57,480  -->  00:07:00,150
All right that's it for the exercise in the basics.

99

00:07:00,150  -->  00:07:02,020
Hopefully was pretty straightforward.

100

00:07:02,130  -->  00:07:06,630
Maybe there was a little bit of tricks as far as using this bracket notation for filtering but we'll

101

00:07:06,630  -->  00:07:11,580
get a lot more practice that sort of filtering as the course goes on and we learn about how to use data

102

00:07:11,580  -->  00:07:12,500
frames.

103

00:07:12,870  -->  00:07:14,670
All right thanks everyone.

104

00:07:14,670  -->  00:07:19,310
Go ahead and review the lecturers in case any of this was unclear or you're a little fuzzy on it.

105

00:07:19,500  -->  00:07:20,520
I'll see it the next lecture
