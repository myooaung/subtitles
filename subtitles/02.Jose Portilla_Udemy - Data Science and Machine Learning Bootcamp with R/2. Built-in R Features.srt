1

00:00:00,540  -->  00:00:06,750
Hello everyone and welcome to lecture and built in our features this lecture talk about a lot of the

2

00:00:06,750  -->  00:00:12,420
built in features and functions in our how we can use to work with data structures.

3

00:00:12,420  -->  00:00:16,170
Let's go out and jump to our studio and see how they work.

4

00:00:16,170  -->  00:00:22,350
All right so here our studio and the features are functions we're going to be going over our SE Q to

5

00:00:22,350  -->  00:00:28,890
create a sequence the sort function which will allow us to vector Rev which will reverse elements in

6

00:00:28,890  -->  00:00:34,710
an object that's here to show us the structure of an object and append which will allow us to merge

7

00:00:34,770  -->  00:00:36,320
objects together.

8

00:00:36,810  -->  00:00:38,700
Let's go to get started with the first one.

9

00:00:38,750  -->  00:00:47,490
CQ first sequence Swit sequence allows us to generate some sort of regular sequence and taken three

10

00:00:47,490  -->  00:00:49,440
arguments.

11

00:00:49,440  -->  00:00:52,400
You'll go ahead and start with where you want to start.

12

00:00:52,560  -->  00:00:58,210
So let's say zero then you'll put in where you want it and it's going to say 100.

13

00:00:58,230  -->  00:01:05,850
And then the third argument by is going to be your step size so we'll say by two actually it's going

14

00:01:05,850  -->  00:01:10,310
to make this 10 so we don't get a huge output.

15

00:01:10,770  -->  00:01:17,400
And now you'll notice we get the same thing as if we had written zero call and 10 except we're going

16

00:01:17,520  -->  00:01:18,880
by 2.

17

00:01:18,900  -->  00:01:25,440
This will allow us to generate sequences from a starting point and an endpoint really easily and jumping

18

00:01:25,440  -->  00:01:26,960
by a certain numeric amount.

19

00:01:27,180  -->  00:01:33,130
So another example will sequence 0 to 100.

20

00:01:33,240  -->  00:01:40,740
In this case we'll say by 10 and now I can see I'm going from zero all the way to 100 and I'm jumping

21

00:01:40,740  -->  00:01:42,420
by 10.

22

00:01:42,480  -->  00:01:47,850
This kind of thing is really useful if in case you want to get for instance all the even numbers from

23

00:01:47,850  -->  00:01:49,320
0 to 24.

24

00:01:49,320  -->  00:01:52,960
So to do that I would say my starting point which is zero.

25

00:01:53,160  -->  00:02:01,320
My ending point which is 24 and I would say by two and I've got all the numbers from 0 to 24 that's

26

00:02:01,330  -->  00:02:05,630
as a cue it's really useful for creating sequences you want to learn more about it.

27

00:02:05,640  -->  00:02:11,880
You can always just say help as CQ and through that line and I'll tell you more about how to generate

28

00:02:11,880  -->  00:02:17,460
regular sequences and some more examples and details throughout the documentation.

29

00:02:17,500  -->  00:02:18,030
OK.

30

00:02:18,120  -->  00:02:20,630
So that's the basic usage of creating a sequence.

31

00:02:20,640  -->  00:02:27,180
Let's go ahead and clear the console and talk about sort which will allow us to sort a vector.

32

00:02:27,180  -->  00:02:36,420
Imagine I had the vector V and I'm going to put in some unsorted random numbers here so go at 1 4 7

33

00:02:36,480  -->  00:02:41,960
2 13 3 and 11.

34

00:02:42,180  -->  00:02:46,080
So I have my vector it's good on display at these kind of random numbers.

35

00:02:46,320  -->  00:02:55,860
If I say sorts the I'll get an interesting output back I will get the sorted version of this vector

36

00:02:56,850  -->  00:03:05,030
and I will get it in ascending order if I want to get it in descending order I can say sort the with

37

00:03:05,030  -->  00:03:13,650
an additional argument decreasing equals false sees me decreasing equals true.

38

00:03:13,830  -->  00:03:15,320
So false is the default.

39

00:03:15,390  -->  00:03:18,830
If I say decreasing then I will sort it in a descending order.

40

00:03:18,990  -->  00:03:23,150
That's really all there is to sort as far as sorting a vector.

41

00:03:23,400  -->  00:03:31,800
If your vector is a vector of characters it's going to make C-v equal to a vector of characters for

42

00:03:31,800  -->  00:03:36,730
instance b comma D.

43

00:03:37,380  -->  00:03:43,580
A face shows C-v BDA face sort.

44

00:03:43,620  -->  00:03:48,660
See the it will sort them in alphabetical order.

45

00:03:48,660  -->  00:03:55,650
Now if one of these happens to be capitalized so we'll go in and say see BT A and I'll go ahead and

46

00:03:55,650  -->  00:03:59,840
pasan a capital C in r.

47

00:03:59,850  -->  00:04:08,070
As far as the sorting parameters it will go ahead and treat a capital C same as a lowercase c.

48

00:04:08,070  -->  00:04:15,410
So for instance say it added additional capital a here and say sort C.v.

49

00:04:16,170  -->  00:04:19,190
Ill put in the lower case first and then the capital first.

50

00:04:19,200  -->  00:04:24,840
In other languages sometimes all capitals are sorted first and then the lower cases here are more or

51

00:04:24,840  -->  00:04:27,270
less treat them equally in the sorting process.

52

00:04:27,270  -->  00:04:31,730
So keep that in mind as you sort on a vector of characters.

53

00:04:32,520  -->  00:04:33,330
All right.

54

00:04:33,330  -->  00:04:34,590
That's it for sort.

55

00:04:34,590  -->  00:04:39,900
Now let's talk about RMV which will reverse the elements of an object going to go ahead to re-assign

56

00:04:39,900  -->  00:04:48,870
V to just be numbers one through ten if I call Ari V which is for reverse on that Dr. V I just get the

57

00:04:48,870  -->  00:04:50,300
reversed output.

58

00:04:50,490  -->  00:04:52,230
That's really all there is to it.

59

00:04:52,250  -->  00:04:57,250
Es TR we've actually used quite a bit but it will show the structure of an object.

60

00:04:57,320  -->  00:05:04,160
So first if I call on a simple object like a vector it will tell me that its integer vector has 10 elements

61

00:05:04,250  -->  00:05:10,590
1 through 10 for a call on something a little more complex such as the built in data frame empty cars

62

00:05:10,580  -->  00:05:11,180
.

63

00:05:11,190  -->  00:05:18,610
It will show you observations of 11 variables meaning I have 32 rows of 11 columns.

64

00:05:18,610  -->  00:05:22,370
Ill tell me what the kind of data types are in that column.

65

00:05:22,380  -->  00:05:28,650
So for example the MPG column is a numeric data type and here are the first few numbers of that column

66

00:05:29,340  -->  00:05:30,680
structure is really useful.

67

00:05:30,690  -->  00:05:36,730
And so a summary summary especially is useful for data frames.

68

00:05:36,870  -->  00:05:41,760
And again we've actually seen this in the past and it shows you Siskel summary of the various columns

69

00:05:41,750  -->  00:05:43,770
.

70

00:05:43,880  -->  00:05:50,390
Finally let's go over append which will allow us to merge objects together which works on vectors and

71

00:05:50,390  -->  00:05:51,900
lists.

72

00:05:52,010  -->  00:05:58,940
I'm going to quickly create a new vector will say it's 1 through 10 and I'm going to create a vector

73

00:05:59,000  -->  00:06:04,450
the two which will be let's go and say 35 to 40.

74

00:06:04,470  -->  00:06:08,370
So these went through 10 to 35 through 40.

75

00:06:08,510  -->  00:06:15,960
If I wanted to merge these objects together I can just use append and passing those two objects as arguments

76

00:06:15,950  -->  00:06:23,440
separated by a comma and as a result I get in return the appended version of those two vectors.

77

00:06:23,450  -->  00:06:29,250
It also works on lists but it's the exact same thing you just pass in one list and another list you

78

00:06:29,250  -->  00:06:32,230
put them together and append those lists.

79

00:06:32,310  -->  00:06:37,160
OK that's really all there is to it for a append a few more things I want to show you that are useful

80

00:06:37,170  -->  00:06:45,820
features in our is checking the data type and converting the data type of objects and our.

81

00:06:45,950  -->  00:06:50,430
Let's talk about checking the data type Mi-Go to clear this.

82

00:06:50,440  -->  00:06:58,710
We're checking data type and we're going to use is dot for that.

83

00:06:58,710  -->  00:07:00,910
Notice there's a lot of outputs there.

84

00:07:01,160  -->  00:07:06,930
So we're going to say vector is C one two three.

85

00:07:08,120  -->  00:07:16,650
I can use the is dot notation to check if an object or a variable name is of a certain class or a data

86

00:07:16,640  -->  00:07:18,560
type in our notice.

87

00:07:18,560  -->  00:07:24,990
Our studio gives me a large dropdown of the various data types objects functions etc. that are available

88

00:07:24,990  -->  00:07:26,520
to me in our.

89

00:07:26,940  -->  00:07:31,420
So for instance I can say is vector pass in V.

90

00:07:31,480  -->  00:07:36,080
Now we'll get a logical indicating whether or not that object is a vector.

91

00:07:36,180  -->  00:07:38,080
So it's true it is a vector.

92

00:07:38,100  -->  00:07:42,360
Maybe I want to check is data frame on V.

93

00:07:43,130  -->  00:07:46,100
I will get a false sense of a vector not a data frame.

94

00:07:46,350  -->  00:07:50,680
If I check is data frame on empty cars all get true.

95

00:07:50,750  -->  00:07:53,990
And since empty cars actually is a data frame.

96

00:07:54,000  -->  00:07:56,770
So the basic notation to remember is is dot.

97

00:07:56,940  -->  00:08:01,320
And then you'll get a nice dropdown of all the various things you can check it check if it's a list

98

00:08:01,310  -->  00:08:01,550
.

99

00:08:01,560  -->  00:08:02,540
It's a matrix.

100

00:08:02,550  -->  00:08:08,360
If it's an array there's any hazier data frame etc..

101

00:08:08,850  -->  00:08:13,100
So that's the basic structure of checking for a data type.

102

00:08:13,110  -->  00:08:22,840
Now you can use the as dot notation to try to convert it to another data type.

103

00:08:22,880  -->  00:08:31,400
So for instance I have my vector v which is one to three I can say as dots and I get again a bunch of

104

00:08:31,400  -->  00:08:35,620
results here but I'm going to say as Dot list.

105

00:08:35,800  -->  00:08:41,750
Now what this is going to try to do is construct a list out of whatever you pass in as an argument.

106

00:08:41,750  -->  00:08:48,900
So if I say as list for V notice I can output a list and it's in essentially iterate through each element

107

00:08:48,890  -->  00:08:52,930
in the vector and convert it into an item in a list.

108

00:08:52,940  -->  00:09:00,180
I can also say something like as Matrix pass in that vector it will convert it into a to then missional

109

00:09:00,170  -->  00:09:03,630
matrix with one column and three rows.

110

00:09:03,770  -->  00:09:09,540
That's really useful if you're trying to quickly cast or convert data types from one to another.

111

00:09:09,770  -->  00:09:15,250
That's going to be the as dots and then whatever data type you want to try to convert it to the is that

112

00:09:15,440  -->  00:09:24,270
is a method for checking the data type as that is a method for converting the data type.

113

00:09:25,130  -->  00:09:27,790
OK so that's it for the lecture.

114

00:09:27,810  -->  00:09:29,460
Again I hope you found that useful.

115

00:09:29,450  -->  00:09:34,800
There are some really useful built in data functions that we went over including making a sequence reversing

116

00:09:34,800  -->  00:09:39,080
sorting checking the structure and appending merging objects together.

117

00:09:39,090  -->  00:09:44,360
And then this is that as are also going to be really useful is that is especially useful when you're

118

00:09:44,370  -->  00:09:46,140
debugging your code.

119

00:09:46,160  -->  00:09:49,190
All right thanks everyone and I'll see you at the next lecture.
