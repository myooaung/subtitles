WEBVTT
1

00:00:00.540  -->  00:00:04.210
Hello everyone and welcome to the lecture on Excel files with our.

2

00:00:04.440  -->  00:00:09.330
And this lecture we're going to learn how to install packages that allow us to work with Excel files

3

00:00:09.660  -->  00:00:11.510
within our in our studio.

4

00:00:11.760  -->  00:00:14.820
Let's go out and jump to our studio to see how this all works.

5

00:00:14.820  -->  00:00:15.120
All right.

6

00:00:15.120  -->  00:00:19.860
So here we are our studio and the first thing we need to learn is how to install a package directly

7

00:00:19.860  -->  00:00:26.690
from the Internet within our and our studio in order to actually work with Excel files.

8

00:00:26.700  -->  00:00:31.740
Will you install a package called Read Excel to read them in there way we can install a package in our

9

00:00:31.920  -->  00:00:37.740
is by typing install bot packages in go ahead and see that our studio actually completes this for us

10

00:00:37.840  -->  00:00:38.030
.

11

00:00:38.160  -->  00:00:39.220
So just click answer.

12

00:00:39.240  -->  00:00:44.100
And then in single or double quotes type in the name of the package you want to download this case.

13

00:00:44.130  -->  00:00:45.770
It's going to be read x.

14

00:00:45.780  -->  00:00:49.210
I'll go ahead and click enter.

15

00:00:49.360  -->  00:00:53.730
You should see after a while some sort of notification that you're installing the package.

16

00:00:53.730  -->  00:00:57.870
You'll see something like this that shows that it's downloaded and you should see something that tells

17

00:00:57.870  -->  00:01:03.110
you package unsuccess are successfully unpacked and checked and it should also tell you where it downloaded

18

00:01:03.110  -->  00:01:04.100
it to.

19

00:01:04.110  -->  00:01:08.940
Don't worry if you get a few warning messages as long as you get something that looks more or less like

20

00:01:08.940  -->  00:01:16.320
this some successfully unpacked you saw that download timer or progress bar and then you have the downloaded

21

00:01:16.320  -->  00:01:17.340
binary packages.

22

00:01:17.430  -->  00:01:18.630
That's all you need to see.

23

00:01:18.750  -->  00:01:24.630
In this case and again the line is just install packages and then pass in in quotes whatever package

24

00:01:24.630  -->  00:01:25.970
you want to install.

25

00:01:26.100  -->  00:01:28.740
Why not go ahead and clear the console of all this information.

26

00:01:28.740  -->  00:01:34.300
Again don't worry if you get some warning messages you'll have to worry if you actually get errors.

27

00:01:34.330  -->  00:01:40.440
Now let's go ahead and show you the Excel file We're going to be working with.

28

00:01:40.500  -->  00:01:47.430
Going to go ahead and show you in Excel we're looking at some sample sales data is just made up sales

29

00:01:47.430  -->  00:01:50.190
data and it's just the post code column.

30

00:01:50.190  -->  00:01:57.120
A sales rep ID column some sales rep Name Year and value and then notice we have sheet names and just

31

00:01:57.120  -->  00:02:00.460
intuitively we can already see that this basically looks like a data frame.

32

00:02:00.480  -->  00:02:06.510
We have columns and rows of information and we can think of these sheets as items in a list.

33

00:02:06.510  -->  00:02:12.480
So we're going to be able to store all of these different worksheets as items in a list or data frames

34

00:02:12.510  -->  00:02:13.300
in a list.

35

00:02:13.500  -->  00:02:18.950
So let's go ahead and now use read Excel to read in the sample sales data Excel file.

36

00:02:18.990  -->  00:02:24.000
You can actually work with whatever Excel file you want for this presentation or the lecture.

37

00:02:24.270  -->  00:02:27.470
I'm going to be working with this sample sales data Excel file.

38

00:02:27.870  -->  00:02:31.150
So it's good and minimize this and jumped to our studio.

39

00:02:31.230  -->  00:02:36.390
The first thing we have to do is actually call the library we just downloaded and you can do that by

40

00:02:36.390  -->  00:02:39.500
saying library read excel.

41

00:02:39.540  -->  00:02:45.240
And again our studio nicely will automatically tell you what packages you have or what libraries you

42

00:02:45.240  -->  00:02:46.750
have in order to call them.

43

00:02:46.800  -->  00:02:51.930
Something to note here maybe a little funny to you is that there's no quotes when you're calling the

44

00:02:51.930  -->  00:02:52.810
library.

45

00:02:52.950  -->  00:02:57.090
So you call quotes when you're installing the package but when you actually called library you don't

46

00:02:57.090  -->  00:02:59.340
call any quotes.

47

00:02:59.340  -->  00:02:59.710
All right.

48

00:02:59.720  -->  00:03:03.000
They should be able to just click enter and load up the library.

49

00:03:03.030  -->  00:03:08.790
Now that library or package is loaded into are going to be able to call functions from that package

50

00:03:08.790  -->  00:03:09.600
.

51

00:03:09.690  -->  00:03:11.930
One of the functions I want to use is Excel sheets.

52

00:03:11.960  -->  00:03:14.430
And notice here and kind of gray brackets.

53

00:03:14.430  -->  00:03:16.050
It says read excel.

54

00:03:16.230  -->  00:03:20.760
That means that this function comes from this read Excel package going to go ahead and click on it.

55

00:03:20.880  -->  00:03:25.930
You can just click enter and I'm going to pass in the path to that Excel file.

56

00:03:26.040  -->  00:03:27.620
In this case I actually saved it.

57

00:03:27.660  -->  00:03:31.120
So I go ahead and bring this out a little bit.

58

00:03:31.470  -->  00:03:38.100
If I click on files I saved it to wherever I'm currently working with in our studio so I can see that

59

00:03:38.190  -->  00:03:45.510
I have a sample sales data Excel X LS X file right here going to go ahead and set aside a little bit

60

00:03:46.010  -->  00:03:46.880
.

61

00:03:47.250  -->  00:03:52.710
If you don't have it saves to wherever your current directory for working in our in our studio is you'll

62

00:03:52.710  -->  00:03:55.010
have to pass in the whole file path here.

63

00:03:55.050  -->  00:04:01.470
This case I can just type in an S or capitalist's tab and it should tell me what options I have in this

64

00:04:01.470  -->  00:04:06.390
case I've sampled their sales they know exactly what I want you can type it in all manually or begin

65

00:04:06.390  -->  00:04:10.550
to type it and then click tab on your keyboard and our studio will autocomplete.

66

00:04:10.920  -->  00:04:16.470
So if I go ahead and just run this this will list the sheets of the Excel file.

67

00:04:16.470  -->  00:04:18.200
So in this case I only have one sheet.

68

00:04:18.380  -->  00:04:24.030
It's sheet 1 and this is going to be really useful because the next command will allow me to actually

69

00:04:24.030  -->  00:04:27.360
read the Excel file as a data frame.

70

00:04:28.080  -->  00:04:35.190
So I'm going to make a variable called DMF and I'm going to use read underscore excel and again note

71

00:04:35.190  -->  00:04:37.650
that this is from the read x l package.

72

00:04:37.740  -->  00:04:42.790
So I'm going to read excel and the arguments you put in is the Excel file itself.

73

00:04:42.840  -->  00:04:49.330
This case sample the hash sales Dasht data x l s x comma.

74

00:04:49.410  -->  00:04:54.720
And then you're actually going to put in a second argument sheet and I'm going to go ahead and pass in

75

00:04:55.590  -->  00:04:56.310
sheet 1

76

00:04:59.540  -->  00:05:06.590
and now if I go ahead and check out the head of my data frame if I have successfully imported that Excel

77

00:05:06.590  -->  00:05:12.380
file as a data frame and our So everything you've learned about are you can now perform on the Excel

78

00:05:12.380  -->  00:05:13.670
file.

79

00:05:13.700  -->  00:05:21.620
So for example if we quickly want to take the sum of the value column I could just say some E-F dollar

80

00:05:21.620  -->  00:05:27.400
sign value and there's a total sum of that value column.

81

00:05:27.470  -->  00:05:32.330
So hopefully you can find already how this is going to be really useful when you're taking an excel

82

00:05:32.330  -->  00:05:35.250
file and want to use our to work with them.

83

00:05:35.270  -->  00:05:41.090
You can also get quick statistical summaries of your Excel file by just passing that data frame that

84

00:05:41.090  -->  00:05:43.550
we just imported using read Excel.

85

00:05:43.990  -->  00:05:44.590
OK.

86

00:05:44.720  -->  00:05:47.290
So let's again just briefly go over how he did this.

87

00:05:47.420  -->  00:05:52.880
First thing you're going to do is call Excel underscore sheets to actually get the names of the sheets

88

00:05:52.880  -->  00:05:58.760
that are in that Excel file and then each sheet in that Excel file is basically going to be represent

89

00:05:58.820  -->  00:06:00.480
a data frame.

90

00:06:00.560  -->  00:06:07.400
So then you say read underscore Excel pass in the source which is the SSX file and then pasand the sheet

91

00:06:07.400  -->  00:06:11.420
name you actually want to import as a data frame.

92

00:06:11.660  -->  00:06:16.790
So that's the way you can just import a single sheet in an Excel file as a data frame.

93

00:06:16.790  -->  00:06:23.090
Remember I said we can imagine that an entire workbook with multiple sheets in an Excel file can be

94

00:06:23.090  -->  00:06:28.760
sort of like a list in our where each item in the list is going to be a data frame representing each

95

00:06:28.760  -->  00:06:30.760
sheet in the workbook.

96

00:06:30.770  -->  00:06:35.800
So let me go in there and show you just how to download an entire workbook into Excel.

97

00:06:35.840  -->  00:06:43.040
I can say entire underscore will turn underscore work that workbook is going to be a variable name.

98

00:06:43.080  -->  00:06:50.600
This isn't a function and I'm going to go ahead and use L apply to essentially apply the Excel sheets

99

00:06:50.660  -->  00:06:54.980
function over and over again onto the path of that Excel file.

100

00:06:55.010  -->  00:06:57.070
So I say EHLO apply.

101

00:06:57.710  -->  00:07:03.890
I'm going to apply excel under scoresheets on my sample data.

102

00:07:04.460  -->  00:07:08.700
My sample sales data says My first argument second argument.

103

00:07:08.700  -->  00:07:17.810
I'm going to do is whip's accidently clicked enter their second argument I'm going to do is read Excel

104

00:07:19.220  -->  00:07:25.130
and then the third argument I'm going to say path and just go ahead and pass in the file path which

105

00:07:25.130  -->  00:07:30.730
is sample sales data X X and there's my entire workbook.

106

00:07:30.740  -->  00:07:33.070
Let me go in and clear this.

107

00:07:33.500  -->  00:07:39.560
I have my entire adult workbook I'm using L apply remember l apply is the way we can apply a function

108

00:07:39.950  -->  00:07:44.100
to an entire iterable object such as a list or vector.

109

00:07:44.150  -->  00:07:48.060
In this case it's going to be Excel sheet surrender Excel sheets.

110

00:07:48.140  -->  00:07:50.450
Return the names of all the sheets.

111

00:07:50.450  -->  00:07:58.250
So basically what I'm saying is OK get me the list of all the sheet names apply read Excel to each of

112

00:07:58.250  -->  00:08:02.240
those sheet names along the path of the Excel file.

113

00:08:02.240  -->  00:08:09.110
Meaning if now I say entire workbook and call it out I get a list.

114

00:08:09.110  -->  00:08:11.480
In this case it's a list of one.

115

00:08:11.670  -->  00:08:14.850
Scroll up here since it's quite a large file.

116

00:08:14.960  -->  00:08:18.620
My entire workbook only has one entry but you notice that double brackets here.

117

00:08:18.620  -->  00:08:23.570
In the case that it's a list so that's the way you can upload an entire workbook and you can check the

118

00:08:23.570  -->  00:08:25.940
notes in case you ever want to reference this code.

119

00:08:26.360  -->  00:08:30.660
But you just say apply Excel sheets to wherever your Excel file is.

120

00:08:30.800  -->  00:08:37.970
Apply the read Excel function and say the path over your Excel file is and then we can call specific

121

00:08:37.970  -->  00:08:44.240
data frames or sheets off of this workbook in order to work with them and are all right.

122

00:08:44.240  -->  00:08:46.310
So we went over reading excel files.

123

00:08:46.310  -->  00:08:49.140
Now let's talk about writing two Excel files.

124

00:08:49.140  -->  00:08:54.050
So in order to write two Excel files we're actually going to need to download another package and that

125

00:08:54.050  -->  00:08:57.220
package is going to be the x l s x package.

126

00:08:57.260  -->  00:08:58.140
So I going to do it again.

127

00:08:58.140  -->  00:09:00.060
Say installed packages.

128

00:09:00.720  -->  00:09:06.350
Type in x l s x notice and typing it in quotes.

129

00:09:06.470  -->  00:09:11.750
Went ahead and clicked enter and now we slowly get the download notice you'll see and Salling package

130

00:09:11.750  -->  00:09:12.490
etc..

131

00:09:12.500  -->  00:09:16.710
I'm going to go ahead and quickly jump to finished the download.

132

00:09:16.790  -->  00:09:19.900
All right I went ahead and jumped to the finished download notice.

133

00:09:20.000  -->  00:09:26.950
You may also download a few other packages which are just dependencies for the elex package.

134

00:09:27.110  -->  00:09:31.520
But again this was the install procedure installed packages and in quotes.

135

00:09:31.550  -->  00:09:33.790
X l s x.

136

00:09:34.190  -->  00:09:39.470
OK let's go in and clear the console and see how we can write to an Excel file.

137

00:09:39.470  -->  00:09:48.770
First thing I have to do is call library and pass in Excel S6 which allows us to write to excel files

138

00:09:48.770  -->  00:09:50.480
.

139

00:09:50.480  -->  00:09:58.590
So I call it will also load other required packages such as our Java and this SSX jar's.

140

00:09:58.760  -->  00:10:03.410
Now as far as writing to an Excel file will x LS X makes it super easy.

141

00:10:03.410  -->  00:10:05.390
Imagine we have our empty cars.

142

00:10:05.390  -->  00:10:06.590
Data frame.

143

00:10:06.590  -->  00:10:08.380
So we have empty cars.

144

00:10:08.390  -->  00:10:12.920
That's just the head of it and I want to write the entire empty car's data frame into an Excel file

145

00:10:12.940  -->  00:10:13.190
.

146

00:10:13.430  -->  00:10:18.080
Well in that case I just cannot call right dots.

147

00:10:18.660  -->  00:10:22.160
Xcel sex passin the file I want to write.

148

00:10:22.160  -->  00:10:25.970
In this case you're going to always be a data frame pretty much usually.

149

00:10:25.990  -->  00:10:31.850
You may write a matrix but you're usually writing a data Frinton Excel file will pass in empty cars

150

00:10:31.940  -->  00:10:36.230
and then you just pasand the file location or path you want to write this to.

151

00:10:36.230  -->  00:10:41.320
I'm going to go ahead and say output example dot x.

152

00:10:41.460  -->  00:10:47.000
Sex an in quotes and that will go ahead and write that Excel file.

153

00:10:47.180  -->  00:10:52.580
So then I can go ahead and open this with Excel and if I take a quick look at my files over here on

154

00:10:52.580  -->  00:10:53.570
the right.

155

00:10:53.570  -->  00:10:55.710
Notice I have an output example.

156

00:10:55.710  -->  00:10:59.930
X L-A sex all the way here at the bottom which is the most recent file.

157

00:11:00.440  -->  00:11:01.730
Ok that's really all there is.

158

00:11:01.760  -->  00:11:04.730
As far as reading and writing to excel files.

159

00:11:04.730  -->  00:11:10.820
Keep in mind that if your Excel files maybe have complicated macros or some sort of function or equation

160

00:11:11.030  -->  00:11:16.460
inside of those files importing it the way we just showed is only going to be able to keep the information

161

00:11:16.550  -->  00:11:21.830
you're not going to be able to import more advanced functionality such as like VBA code or other things

162

00:11:21.830  -->  00:11:27.650
that are going on in your Excel file when you're importing Excel files into our into a data frame object

163

00:11:27.650  -->  00:11:28.010
.

164

00:11:28.010  -->  00:11:33.680
You should really just consider the only have the information shown upfront as the cells are data points

165

00:11:33.770  -->  00:11:35.270
in that Excel file.

166

00:11:35.730  -->  00:11:41.120
OK go ahead and reference the notes in case you want to ever read and write Excel files but that's it

167

00:11:41.120  -->  00:11:42.380
for this lecture.

168

00:11:42.380  -->  00:11:43.550
I'll see you at the next one.
