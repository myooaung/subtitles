WEBVTT
1

00:00:00.420  -->  00:00:04.170
Hello everyone and welcome to the Web scraping with our lecture.

2

00:00:04.260  -->  00:00:10.260
This lecture is going to focus on showing you how you can use the R vest package to perform web scraping

3

00:00:10.260  -->  00:00:15.810
with our let's go ahead and jump to the notebook first.

4

00:00:15.810  -->  00:00:16.080
All right.

5

00:00:16.080  -->  00:00:22.110
Here we are at the notebook and I want to make it clear notes in order to fully understand the structure

6

00:00:22.230  -->  00:00:22.850
you need to know.

7

00:00:22.880  -->  00:00:25.020
H TNL in CSX.

8

00:00:25.170  -->  00:00:30.870
You also need to know about the pipe operator which looks like this that I'm highlighting in our I want

9

00:00:30.870  -->  00:00:35.760
you to come back to the lecture after reviewing them at Tiriel otherwise you won't really understand

10

00:00:35.760  -->  00:00:42.300
how to perform web scrapin and are using the our vest library or package what you reviewed that material

11

00:00:42.630  -->  00:00:46.350
and know enough about H.M.S. assess or perform web scraping.

12

00:00:46.350  -->  00:00:47.780
You can come back to this lecture.

13

00:00:47.880  -->  00:00:52.620
This lecture is located in the section data input and output because it's the most relevant section

14

00:00:52.620  -->  00:00:52.920
.

15

00:00:52.950  -->  00:00:58.200
However chronologically speaking you'd probably skip this lecture and come back to it once you learn

16

00:00:58.200  -->  00:01:05.070
about the pipe operator in are now continuing on with the Arbus library and web scraping in general

17

00:01:05.320  -->  00:01:05.780
.

18

00:01:05.880  -->  00:01:09.930
Scraping is almost always going to be unique to your personal use case.

19

00:01:09.930  -->  00:01:12.300
This is because every Web site is different.

20

00:01:12.300  -->  00:01:16.550
Updates to those Web sites occur all the time and things can quickly change.

21

00:01:16.650  -->  00:01:22.320
To fully understand web scraping you're going to need to know what Web sites are built with H assess

22

00:01:22.500  -->  00:01:25.760
in order to understand what you want to grab off of that Web site.

23

00:01:25.860  -->  00:01:31.200
If you don't know h team LRC assess what you may be able to use is an auto Web great tool.

24

00:01:31.200  -->  00:01:33.820
I have a link to one called import IO.

25

00:01:33.960  -->  00:01:40.470
This is basically a web site that if you go ahead and click on it will take you to import Io which is

26

00:01:40.470  -->  00:01:45.990
essentially just an automated way of extracting data from different Web sites.

27

00:01:45.990  -->  00:01:52.620
What you do is you just go ahead and put a u r l in it will go ahead and return a C S V file.

28

00:01:52.620  -->  00:01:54.160
There's different pricing metrics for it.

29

00:01:54.180  -->  00:01:55.290
So keep that in mind.

30

00:01:55.440  -->  00:02:00.570
It's not a completely free product but if you go ahead and click on the pricing for small use cases

31

00:02:00.810  -->  00:02:04.230
it's usually free.

32

00:02:04.230  -->  00:02:09.360
So go into pricing you'll see a free version of it which includes up to 10000 queries per month which

33

00:02:09.360  -->  00:02:12.810
for most use cases is enough.

34

00:02:12.810  -->  00:02:17.550
Going back to the notebook Whilce will want to show is the vast library.

35

00:02:17.550  -->  00:02:22.140
Again you can use import the I O if you don't really understand anything about a steam oleracea says

36

00:02:22.480  -->  00:02:28.680
that if you do understand how web sites are built and H.M.S. assess the best library may be a good package

37

00:02:28.680  -->  00:02:29.910
free to use.

38

00:02:29.940  -->  00:02:34.740
Let's go ahead and jump to our studio and show you how you can run through the various demos that are

39

00:02:34.740  -->  00:02:37.330
built into the our vest package.

40

00:02:37.530  -->  00:02:43.050
We'll leave it to you to actually walk through this example instead of doing it in our studio because

41

00:02:43.080  -->  00:02:45.980
basically it would just be typing this out.

42

00:02:46.140  -->  00:02:50.950
Let me go ahead and jump to our studio and show you the our vest package and how to access the demos

43

00:02:50.950  -->  00:02:52.010
in it.

44

00:02:52.350  -->  00:02:52.640
All right.

45

00:02:52.640  -->  00:02:57.640
Here in our studio the first thing you're going to do is install the our vest package.

46

00:02:57.690  -->  00:03:06.750
Go ahead and just say installed up packages and then type in our vest and wait for that to finish.

47

00:03:06.750  -->  00:03:12.280
Once that is successfully unpacked and installed you can go ahead and clear your console.

48

00:03:12.510  -->  00:03:23.750
Call library are vest and then call demo and say package equals and it has a string or in quotes pass in

49

00:03:24.430  -->  00:03:25.420
are best.

50

00:03:25.510  -->  00:03:30.690
Now you should see is a little pop up here and what's really nice about the R vest package.

51

00:03:30.720  -->  00:03:34.070
It comes with three demos of how you can use it.

52

00:03:34.110  -->  00:03:39.350
It comes with three demos showing you how you can scrape data from TripIt advisor dot com.

53

00:03:39.460  -->  00:03:45.890
Great mileage details from United dot com or scrape housing info from Zill dot com.

54

00:03:45.900  -->  00:03:48.920
Let me go ahead and show you how you can access those demos.

55

00:03:49.080  -->  00:03:57.870
All you need to do is say demo pass in package again are vast and then you pass in a second argument

56

00:03:57.870  -->  00:04:03.860
called topic and here you're going to pass in a straight you know TripIt vizor United or Zillo.

57

00:04:04.170  -->  00:04:10.090
Let's go ahead and do the TripIt advisor one and then hit enter.

58

00:04:10.320  -->  00:04:13.260
And what's going to happen is you'll get this demo trip advisor.

59

00:04:13.260  -->  00:04:16.910
And this is basically a built in tutorial for our vets.

60

00:04:17.070  -->  00:04:23.700
You just click return to start and it will show you all the code and comments that allow you to get

61

00:04:23.730  -->  00:04:25.530
this data frame up here.

62

00:04:25.680  -->  00:04:29.590
You get an ID column like a rating a day and a review.

63

00:04:29.740  -->  00:04:34.840
Go ahead and expand this console window a little bit and push this up.

64

00:04:34.860  -->  00:04:39.690
What you'll notice is that when you call that demo trip and click return you have some comments and

65

00:04:39.690  -->  00:04:42.310
you basically have the code of how this works.

66

00:04:42.420  -->  00:04:50.310
You went ahead and call the library set the u r l and then using the pipe OPERATOR You grab information

67

00:04:50.310  -->  00:04:56.270
from the HVM l sent to what's happening here is you read the HVM nodes.

68

00:04:56.550  -->  00:05:00.560
Then you grab the attributes that you want from an aged female file.

69

00:05:00.790  -->  00:05:07.050
You grab those text notes that you want from that particular attribute and then you just use these pipe

70

00:05:07.050  -->  00:05:14.310
operators to actually grab certain features from that HVM page such as ratings dates quotes etc..

71

00:05:14.310  -->  00:05:17.390
Again this really depends on two things One.

72

00:05:17.400  -->  00:05:22.860
A good knowledge of H T.M. and the other one is an understanding of this pipe operator.

73

00:05:22.890  -->  00:05:25.960
I'm going to leave this lecture done here for now.

74

00:05:26.250  -->  00:05:31.290
Keep in mind that once you review the pipe operator and have a good understanding of each T.M. you should

75

00:05:31.290  -->  00:05:33.050
come back to this lecture.

76

00:05:33.060  -->  00:05:36.460
Check out the demos and check up the note book.

77

00:05:36.660  -->  00:05:38.890
Let me go ahead and hop back to the notebook real quick.

78

00:05:38.920  -->  00:05:45.030
If you check out the notebook I have a very similar tutorial just like the demos except this one goes

79

00:05:45.030  -->  00:05:52.410
ahead and it reads the I am D-B page for a particular movie and explains how to actually use our best

80

00:05:52.440  -->  00:05:56.270
here and step by step it shows you what's actually going on.

81

00:05:56.280  -->  00:06:01.830
Basically the whole idea of our events is you just grab the female file from the your L and then extract

82

00:06:01.890  -->  00:06:06.710
data from it based off of the actual classes or attributes in that HVM file.

83

00:06:06.720  -->  00:06:08.360
And that's really all there is to it.

84

00:06:08.370  -->  00:06:14.120
Use extract information from the HD M-L file based off of what you're actually looking for.

85

00:06:14.130  -->  00:06:18.630
All right hopefully this lecture can do some good resources and ideas in case you want a web scrape

86

00:06:18.630  -->  00:06:22.220
with are in the future and just a quick note one more time.

87

00:06:22.230  -->  00:06:28.020
If you have no experience of female or C Ss and you still want to perform web scraping try checking

88

00:06:28.020  -->  00:06:28.210
out.

89

00:06:28.240  -->  00:06:31.440
Import the IO as an available tool for you.

90

00:06:31.440  -->  00:06:31.970
All right.

91

00:06:32.190  -->  00:06:33.060
Thanks everyone.

92

00:06:33.070  -->  00:06:37.470
And remember this lectures more to the point you in the right direction for resources for web scrapin

93

00:06:37.470  -->  00:06:38.160
with our.

94

00:06:38.310  -->  00:06:39.630
You have this note book.

95

00:06:39.630  -->  00:06:40.830
Import the IO.

96

00:06:40.980  -->  00:06:46.800
And then you can just call demo package calls are Vess and set the topic for the three examples demos

97

00:06:46.950  -->  00:06:49.910
that are already inside of our best.

98

00:06:49.950  -->  00:06:51.960
Thanks everyone and I'll see you at the next lecture
