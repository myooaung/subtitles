1

00:00:00,390  -->  00:00:05,250
Hello everyone and welcome to the Apply lecture in this lecture we're going to learn how to use the

2

00:00:05,250  -->  00:00:10,020
Apply function in order to apply a function over a list or a vector.

3

00:00:10,020  -->  00:00:13,490
Let's go ahead and jump to our studio and see how it works.

4

00:00:13,510  -->  00:00:18,870
OK so here we are our studio and to start off I want to go ahead and show you a simple function called

5

00:00:18,870  -->  00:00:29,700
sample first the builtin sample function allows us to just randomly sample objects from a vector.

6

00:00:29,700  -->  00:00:36,330
So this case I can say X is a vector of 1 through 10.

7

00:00:36,360  -->  00:00:41,120
And the second argument is how many actual objects I want to grab from this vector.

8

00:00:41,130  -->  00:00:44,910
So I just want to grab one object from one the source for that.

9

00:00:44,910  -->  00:00:46,070
Nothing actually occurs.

10

00:00:46,110  -->  00:00:49,700
Let's go ahead and print this out.

11

00:00:52,730  -->  00:00:56,820
And you know every time we run this is going to just run it multiple times we get some random number

12

00:00:57,840  -->  00:01:03,110
from X and X is just this a vector of integers 1 through 10.

13

00:01:03,420  -->  00:01:10,360
So if I also changed this to let's say from 1 to 100 then I can change the second parameter to 3 or

14

00:01:10,430  -->  00:01:15,530
just get three random numbers between 1 and 100.

15

00:01:15,570  -->  00:01:17,770
So that's all sampled does.

16

00:01:17,790  -->  00:01:19,050
So you can go and play around with it.

17

00:01:19,050  -->  00:01:20,290
That's a pretty useful function.

18

00:01:20,310  -->  00:01:24,240
And we're going to be using it in just a second.

19

00:01:24,240  -->  00:01:28,270
Now let's get back to our main topic which is apply.

20

00:01:29,040  -->  00:01:34,980
We can use apply in a really practical use case when we want to apply some sort of function over a vector

21

00:01:34,980  -->  00:01:36,920
.

22

00:01:37,130  -->  00:01:38,110
So we are a vector.

23

00:01:38,130  -->  00:01:40,880
Let's go ahead and make a vector one two three four five.

24

00:01:40,890  -->  00:01:44,950
You could also use that one colon or five to make the same vector in.

25

00:01:44,960  -->  00:01:50,210
Now I'm going to make a custom function we'll call it add Rand.

26

00:01:50,490  -->  00:01:57,300
And the reason I wanted to show you the sample function first I'll say at of rand which is going to

27

00:01:57,300  -->  00:01:59,560
just add a random number.

28

00:02:00,670  -->  00:02:15,300
Well say it takes an X and it's going to grab a random number between 1 and 100.

29

00:02:15,300  -->  00:02:21,330
So one in 100 of vectors the first argument and just want to grab one random sample from that and then

30

00:02:21,330  -->  00:02:28,750
I'm going to return the input X plus that random value ran.

31

00:02:29,550  -->  00:02:31,060
And that's my random function.

32

00:02:31,350  -->  00:02:33,750
Let's go ahead and make sure it works.

33

00:02:33,780  -->  00:02:41,280
So I'm going to call Prince on at Rand and I'm going to go ahead and put 10.

34

00:02:41,280  -->  00:02:42,120
See what we get up.

35

00:02:42,310  -->  00:02:47,760
I'm going to clear my console and run this ok.

36

00:02:47,820  -->  00:02:51,910
Notice I get 20 out if I run this again I should get something completely different.

37

00:02:51,930  -->  00:02:53,380
Run it a few more times.

38

00:02:53,520  -->  00:03:00,470
I should get just some random number added to 10 with a round number B being between 1 and 100.

39

00:03:00,810  -->  00:03:09,900
Now let's see how I can use our first apply function to apply this function over a vector What apply

40

00:03:09,960  -->  00:03:15,080
function I can use is l apply and L apply.

41

00:03:15,090  -->  00:03:19,280
The first argument you pass in is the vector and the second argument.

42

00:03:19,300  -->  00:03:22,440
Passen is the function.

43

00:03:22,440  -->  00:03:26,210
Notice I'm not actually calling the function with parentheses.

44

00:03:26,210  -->  00:03:30,070
I'm just passing the function and that's an important difference.

45

00:03:30,180  -->  00:03:37,110
So I'm going to go ahead and say l apply V Adarand and I'm going to just run this.

46

00:03:37,110  -->  00:03:39,900
Let me clear the cons. first.

47

00:03:40,860  -->  00:03:48,720
And what I'm going to go ahead and do is assign this L apply result to some variable called result and

48

00:03:48,720  -->  00:03:55,680
then we can go ahead and say print results and make sure spooled result right here.

49

00:03:56,040  -->  00:03:56,600
Result.

50

00:03:56,650  -->  00:03:58,110
OK let's go and run this.

51

00:03:58,110  -->  00:03:59,800
See it works.

52

00:04:00,360  -->  00:04:02,940
OK so notice will we get back out with L.

53

00:04:02,970  -->  00:04:10,710
Apply we get a list out which is why it's called L apply list apply and all this function does is it

54

00:04:10,710  -->  00:04:14,300
takes some vector and then input functions.

55

00:04:14,320  -->  00:04:20,460
Vector can also technically be a list but it's easiest to use it with a vector and it's going to apply

56

00:04:20,490  -->  00:04:25,900
this function to every single element in this vector.

57

00:04:25,950  -->  00:04:32,640
So in this case we're saying OK go to every single element and add a random number to apply this function

58

00:04:32,660  -->  00:04:32,690
.

59

00:04:32,710  -->  00:04:39,390
Add rinde and in the result it will store each of these separate results as an item in a list which

60

00:04:39,390  -->  00:04:42,040
is why we get this sort of double bracket output.

61

00:04:42,140  -->  00:04:48,160
Each item in a list now a lot of times you won't want a list back.

62

00:04:48,190  -->  00:04:54,580
You want something simpler simpler which is just like a vector or a matrix in order to do that.

63

00:04:54,610  -->  00:05:01,210
You can just use as supply which simplifies process by just returning a vector.

64

00:05:01,200  -->  00:05:07,800
So if I go ahead and run this again noticed we get back a vector of 5 essentially random numbers.

65

00:05:07,830  -->  00:05:15,780
So we took in this vector and apply this Adarand some expand that this ad Rand function to every single

66

00:05:15,810  -->  00:05:18,700
element in that vector.

67

00:05:18,850  -->  00:05:24,100
What's good and clear all of this and show one more example so we can really get an understanding of

68

00:05:24,100  -->  00:05:27,040
how these apply functions work.

69

00:05:27,310  -->  00:05:33,030
I'm going to go out and create a vector just going to be the numbers let's say 1 through 5.

70

00:05:33,680  -->  00:05:44,550
I'm going to create a function called Times 2 and the function accepts some number arguments and it's

71

00:05:44,560  -->  00:05:58,410
going to return that number times to then I'm going to go ahead and say my result is equal to s apply

72

00:06:01,020  -->  00:06:07,930
and I'm going to go ahead and pasan V and then my function times 2 and then I'm going to print.

73

00:06:07,950  -->  00:06:11,800
My result is going to run this.

74

00:06:12,370  -->  00:06:19,800
And notice it took the we go ahead say print's V before we apply anything around this again.

75

00:06:19,810  -->  00:06:26,290
It took V and essentially multiplied every single element in V by two to get two four six eight 10 back

76

00:06:26,880  -->  00:06:28,790
and that's how apply works.

77

00:06:28,830  -->  00:06:35,740
There's actually several apply functions and you can find all of them by just saying help on one of

78

00:06:35,740  -->  00:06:42,410
them for instance as apply just call help here go in and pull up the Help tab.

79

00:06:43,070  -->  00:06:45,510
We apply a function over a list or a vector.

80

00:06:45,510  -->  00:06:49,860
So the base function for all of these apply functions is l apply.

81

00:06:49,880  -->  00:06:52,170
So l apply returns some list.

82

00:06:52,290  -->  00:06:54,000
A lot of times you won't want to list.

83

00:06:54,120  -->  00:06:59,050
So there's other apply functions such as apply which is the one we just showed here.

84

00:06:59,070  -->  00:07:05,170
So user friendly version wrapper of L apply that it defaults to returning a vector or Matrix.

85

00:07:05,160  -->  00:07:12,340
There's also the apply which is similar to supply but it has some pre-specified type of return value

86

00:07:12,340  -->  00:07:12,580
.

87

00:07:12,660  -->  00:07:16,290
So sometimes it can be a little faster to use than as supply.

88

00:07:16,440  -->  00:07:20,700
So you can feel free to use via plier as apply as you see fit.

89

00:07:20,780  -->  00:07:26,800
Then there's some more information on replicate and simplify to array case instead of reading more about

90

00:07:26,790  -->  00:07:28,650
those.

91

00:07:28,750  -->  00:07:33,850
Again the best way to check all of this out is just by calling help on any of the Apply functions.

92

00:07:33,970  -->  00:07:35,160
It'll take you to the main.

93

00:07:35,190  -->  00:07:39,810
Apply a function over a list or vector documentation page.

94

00:07:39,900  -->  00:07:42,920
The main idea here is I'm going to call a supplier.

95

00:07:42,940  -->  00:07:46,400
L apply depending on what I want my output to look like.

96

00:07:46,480  -->  00:07:51,060
I pass in my vector and then second argument I pass and the function again.

97

00:07:51,070  -->  00:07:53,340
No that I'm not actually calling the function.

98

00:07:53,350  -->  00:08:00,780
So I'm not putting parentheses here like that and just passing in the function as an argument not calling

99

00:08:00,780  -->  00:08:01,140
it.

100

00:08:01,380  -->  00:08:04,440
And then I can store the result in print the result or do whatever I want.

101

00:08:04,440  -->  00:08:06,090
In that case.

102

00:08:06,100  -->  00:08:11,890
Now let's talk about anonymous functions in a go ahead and expand the our script and the consul here

103

00:08:14,040  -->  00:08:20,200
and I'm going to clear the consul and let's talk about anonymous functions

104

00:08:20,190  -->  00:08:25,760
.

105

00:08:25,810  -->  00:08:27,430
There we go.

106

00:08:28,530  -->  00:08:34,480
So you notice in one of these last examples we had a rewrites an entire function to apply over the vector

107

00:08:34,840  -->  00:08:38,290
and then involve the process something like this at RAND.

108

00:08:38,880  -->  00:08:46,560
And then we had to call function etc. make some clearly brackets write some code and that can be time

109

00:08:46,570  -->  00:08:48,910
consuming and it can also take up space.

110

00:08:49,060  -->  00:08:55,620
Since you're taking the entire variable name to define your function that's where anonymous functions

111

00:08:55,620  -->  00:08:56,470
will come into play.

112

00:08:56,470  -->  00:09:01,280
If we don't actually want it take all that space and effort to create an entire function.

113

00:09:01,300  -->  00:09:08,010
If you're only going to use it once meaning a lot of times you don't actually want to have to formally

114

00:09:08,010  -->  00:09:09,770
define an entire function.

115

00:09:09,900  -->  00:09:15,300
If you're only going to use a function once in anonymous function is a great tool and our That allows

116

00:09:15,310  -->  00:09:18,270
you to quickly create a function without having to name it.

117

00:09:18,390  -->  00:09:21,880
This is a similar idea to lambda expressions in Python.

118

00:09:21,900  -->  00:09:27,370
Let's go in to show an example of how we can use this.

119

00:09:27,610  -->  00:09:36,310
I'm going to go ahead and create a vector v the numbers 1 through 5 and then I'm going to use s apply

120

00:09:38,390  -->  00:09:46,470
pass in V and instead of passing in a function such as Rand add or etc. I would actually build an anonymous

121

00:09:46,480  -->  00:09:52,380
function as my argument right here and the syntax for an anonymous function looks like this.

122

00:09:52,380  -->  00:09:56,170
You type the keyword function in parentheses.

123

00:09:56,190  -->  00:10:03,790
You type in some variable for the input or go ahead and say numb and then in curly brackets you go ahead

124

00:10:03,780  -->  00:10:09,590
and type what you want to return this case go ahead and return some times too.

125

00:10:10,480  -->  00:10:13,750
And I'm going to go ahead and say this as a result.

126

00:10:16,380  -->  00:10:22,830
And then print the results I could have also just said print on this entire supply statement but this

127

00:10:22,840  -->  00:10:24,570
is a little more readable.

128

00:10:25,500  -->  00:10:25,790
OK.

129

00:10:25,800  -->  00:10:26,430
There we have it.

130

00:10:26,470  -->  00:10:27,870
Two four six eight ten.

131

00:10:27,970  -->  00:10:30,270
So this worked so successfully.

132

00:10:30,750  -->  00:10:34,860
So what are we actually trying to do here with this anonymous function.

133

00:10:34,870  -->  00:10:40,720
We save ourselves the effort of actually labeling this function and naming it.

134

00:10:41,280  -->  00:10:46,720
I'm going to go ahead and build out this function again one last time is a formal function so I can

135

00:10:46,720  -->  00:10:49,630
break down how it looks as an anonymous function.

136

00:10:50,280  -->  00:10:54,920
So I can say a function times to call my function keyword.

137

00:10:55,280  -->  00:10:56,820
I pasan.

138

00:10:57,120  -->  00:11:01,760
And I want to go ahead and return nine times too.

139

00:11:02,130  -->  00:11:04,650
That's what this looks like as a formal function.

140

00:11:05,010  -->  00:11:08,340
And that's what I would pass in here just times too.

141

00:11:08,500  -->  00:11:15,390
If I had a formal function but the anonymous function breaks this down you get rid of this naming or

142

00:11:15,610  -->  00:11:23,300
assignment operator step you get rid of the return call and then you just go ahead and get rid of these

143

00:11:23,430  -->  00:11:26,200
princes and put the curly bracket all in one line.

144

00:11:26,550  -->  00:11:31,200
And that's how an anonymous function can be created from a normal function.

145

00:11:31,210  -->  00:11:35,600
Anonymous functions are really good for very complex tasks or stuff.

146

00:11:35,640  -->  00:11:41,100
But for something simple like this you just want a quick single use function that you don't want to

147

00:11:41,110  -->  00:11:42,700
formally name or define.

148

00:11:42,750  -->  00:11:44,420
This is a great choice.

149

00:11:44,430  -->  00:11:44,740
All right.

150

00:11:44,740  -->  00:11:47,990
That's all I want to show for anonymous functions for now.

151

00:11:48,250  -->  00:11:54,750
Lastly I want to show something really quickly about using a supply or L apply with a function that

152

00:11:54,750  -->  00:11:57,700
takes in more than just a single arguments.

153

00:11:57,930  -->  00:12:01,200
For example let's go in and keeper V.

154

00:12:01,420  -->  00:12:11,710
And let's talk about apply with multiple inputs.

155

00:12:11,940  -->  00:12:20,650
I want to create a function called add underscore choice and the function takes in two arguments numb

156

00:12:21,540  -->  00:12:23,430
and choice.

157

00:12:23,430  -->  00:12:25,780
And what it ends up doing it just returns

158

00:12:28,600  -->  00:12:31,990
your number plus your choice.

159

00:12:31,990  -->  00:12:40,040
So if I call it's going to print this add choice I can pasan a number two.

160

00:12:40,440  -->  00:12:47,460
And then my choice 10 to go ahead and run that 10 plus 2 is equal to 12.

161

00:12:47,470  -->  00:12:55,490
So what if I wanted to apply the add choice function to every single element in my vector v.

162

00:12:55,720  -->  00:13:00,340
Well I would say this this case is a supply.

163

00:13:00,340  -->  00:13:06,780
So I want a vector back I pasand v what I want to actually apply over and then I pass in my function

164

00:13:06,780  -->  00:13:10,970
name add choice except for I just run this.

165

00:13:10,990  -->  00:13:12,460
Let's go out and try this.

166

00:13:12,450  -->  00:13:18,370
We should get an error and you'll see why it says error in fun.

167

00:13:18,580  -->  00:13:20,960
And this is just a general term for a function.

168

00:13:20,980  -->  00:13:26,730
You'll notice this is argument choice is missing with no default meaning it didn't know what to put

169

00:13:26,750  -->  00:13:27,990
for choice here.

170

00:13:28,020  -->  00:13:32,000
It knows what to put in for number because it's using the number for the vector.

171

00:13:32,160  -->  00:13:35,310
However it doesn't know what to put in for the additional arguments.

172

00:13:35,320  -->  00:13:40,840
If we have additional arguments so we need to put in with our function that we're trying to apply we

173

00:13:40,840  -->  00:13:45,360
can add those as more parameters into the Apply function sirra.

174

00:13:45,380  -->  00:13:48,960
Can I just say choice is equal to.

175

00:13:49,020  -->  00:13:50,550
Let's go in and put in 100.

176

00:13:50,890  -->  00:13:53,700
Now if I run this it works just fine.

177

00:13:54,030  -->  00:14:00,790
So keep that in mind or using a supply or apply or apply with functions that take in multiple inputs

178

00:14:00,790  -->  00:14:00,980
.

179

00:14:01,200  -->  00:14:06,550
All you have to do is take the name of the other parameters that you want for your function in your

180

00:14:06,560  -->  00:14:11,670
apply statement and you can go ahead and add them on after you call your function.

181

00:14:11,670  -->  00:14:12,510
So it goes.

182

00:14:12,580  -->  00:14:19,880
Vector function and then any additional arguments with the values you want to put inside of them.

183

00:14:20,480  -->  00:14:22,930
OK so that's it for apply.

184

00:14:23,040  -->  00:14:27,820
What you should have gotten out of this as a quick review is how to create an anonymous function.

185

00:14:28,090  -->  00:14:30,700
I'll show you one more time how to do that.

186

00:14:30,750  -->  00:14:40,110
Imagine we wanted just to say no and create a function called add to this would it look like this as

187

00:14:40,120  -->  00:14:45,590
a normal function taking the number add two to that number for an anonymous function.

188

00:14:45,690  -->  00:14:47,750
We get rid of the assignment operator.

189

00:14:48,030  -->  00:14:53,490
We go ahead and get rid of the return statements and we put this all in one line.

190

00:14:53,500  -->  00:14:54,560
So it looks like this.

191

00:14:54,590  -->  00:14:59,120
This is the anonymous function version of that add to function.

192

00:14:59,130  -->  00:14:59,790
All right.

193

00:14:59,800  -->  00:15:04,480
And the second thing you should have gotten out of this lecture is how to use a supplier l apply by

194

00:15:04,480  -->  00:15:10,060
passing in a vector and passing in a function in order to apply that function to every element in that

195

00:15:10,060  -->  00:15:11,560
vector.

196

00:15:11,560  -->  00:15:13,860
All right that's it for this lecture.

197

00:15:13,870  -->  00:15:14,780
Thanks everyone.

198

00:15:14,910  -->  00:15:15,810
I'll see you at the next lecture
