WEBVTT

00:00.580 --> 00:05.400
Hello and welcome back to the course on deep learning today we're talking about a relay which is rectified

00:05.460 --> 00:08.770
in your units and this is an additional step.

00:08.770 --> 00:12.120
On top of our convolution step.

00:12.120 --> 00:16.070
So it's not a separate big step it's a small step in step one be basically.

00:16.230 --> 00:18.160
And what is going on here.

00:18.180 --> 00:22.860
Well we have our input image we have all convolutional there which we've discussed.

00:22.920 --> 00:26.050
And then on top of that we're going to apply.

00:26.370 --> 00:27.130
Wait for it.

00:27.180 --> 00:36.690
Our favorite rectifier function and you're familiar with the rectifier function from the previous section

00:36.690 --> 00:47.340
on artificial neural networks and in our So sometimes authors or instructors separates the convolution

00:47.370 --> 00:54.000
and direct fire as two separate steps in our examples which is going to consider them the just one big

00:54.000 --> 00:57.000
step for second motion then the rectifier.

00:57.210 --> 01:03.720
And the reason why we're applying the rectifier is because we want to increase non-linearity in our

01:03.750 --> 01:13.380
image or in our network in our commercial neural network and rectifier acts as that filter or access

01:13.380 --> 01:15.690
that function which breaks up in you arity.

01:15.810 --> 01:23.550
And the reason why we want to increase nonlinearity in our network is because images themselves are

01:23.640 --> 01:30.630
highly non-linear especially if you're recognizing different objects next to each other or just on background

01:30.660 --> 01:31.470
and stuff like that.

01:31.530 --> 01:36.660
The image is going to have lots of Nandikar elements and the transition between pixels adjacent pixels

01:36.960 --> 01:37.980
is often would be non-linear.

01:37.980 --> 01:41.230
That's you know because as borders is different colors is different.

01:41.400 --> 01:45.960
There's different elements in your images and but at the same time when we're applying mathematical

01:45.960 --> 01:51.990
operations such as convolution you know and to running this feature detection to create our feature

01:51.990 --> 01:59.580
maps we risk that we might create something linear and therefore we need to break up the narrative.

01:59.910 --> 02:05.910
So let's have a look at an example here is a image and original image.

02:05.910 --> 02:13.160
Now when we apply a feature detection detector to this image we get something like this.

02:13.230 --> 02:19.110
So you can see here that black is negative white is positive values Well when you apply a feature detector

02:19.110 --> 02:24.000
to a like a proper image which has not just zeros and ones but has lots of different values and you

02:24.510 --> 02:28.980
apply as we saw previously featured text that can have negative values in themselves.

02:29.040 --> 02:34.630
Sometimes you'll get negative values and here are there black ones are negative white ones are positive.

02:34.740 --> 02:45.210
And what a rectified linear unit function does is it removes all the black rights in anything below

02:45.210 --> 02:46.440
zero it turns into zero.

02:46.500 --> 02:49.180
And so from this it turns into this right.

02:49.230 --> 02:57.990
And so it's it's pretty hard to see what exactly is the benefit in terms of in terms of breaking up

02:58.100 --> 02:59.200
already.

02:59.340 --> 03:00.910
I'll try to explain.

03:01.020 --> 03:07.680
I'll try to show an example on this image but at the end of the day it's this is a very mathematical

03:07.680 --> 03:12.420
concept and would have to go into a lot of math to really explain what is going on.

03:12.420 --> 03:13.770
But let's let's try let's have a look.

03:13.770 --> 03:16.760
So for instance let's look at this.

03:16.820 --> 03:18.010
This building here right.

03:18.030 --> 03:20.100
So this is a building on its own.

03:20.680 --> 03:24.420
Then you can see this shadow this black part this shadow over here.

03:24.570 --> 03:31.230
Well you see that it's white the reflection of the light and then it's a gray and then it gets darker

03:31.260 --> 03:32.800
and then it gets darker again.

03:32.930 --> 03:33.150
Right.

03:33.210 --> 03:35.860
So and when we take it out we take out that black spot.

03:35.850 --> 03:42.420
So think of it in terms of linearity right so it looks like when you go from white to gray the next

03:42.420 --> 03:43.680
step would be black.

03:43.680 --> 03:45.220
Right the next step would be black.

03:45.480 --> 03:49.430
It's a linear progression from bright to dark.

03:49.650 --> 03:53.430
And therefore this is kind of like a linear situation.

03:53.430 --> 03:56.490
When you take out the black you break up the charity.

03:56.620 --> 03:57.990
Let's try another one.

03:57.990 --> 03:59.050
Let's have a look here.

03:59.160 --> 04:01.920
And at the same time it's still that same building right.

04:01.920 --> 04:08.270
It's not it's not like you or you're like it's not like you're blending two buildings into each other

04:08.490 --> 04:09.750
but that is secondary.

04:09.750 --> 04:11.890
The main point is breaking up the linearity.

04:12.150 --> 04:13.050
So let's have a look here.

04:13.050 --> 04:13.530
Same thing.

04:13.530 --> 04:19.400
So you see white gray black gray white.

04:19.560 --> 04:22.490
And when you break it up you don't have that anymore right.

04:22.500 --> 04:29.510
You don't have that progression the gradual progression that you just have like an abrupt change.

04:29.670 --> 04:33.470
And that helps introduce non-linearity into your image.

04:33.510 --> 04:42.550
So it's a very rough explanation very kind of like on the on the fingers explanation rather than technical.

04:42.630 --> 04:47.310
But hopefully it kind of helps you understand a bit better what we're talking about here.

04:47.310 --> 04:54.780
So here again you can see white gray is a better example even to bright darker darker darker darker

04:54.780 --> 04:55.650
darker darker.

04:55.650 --> 05:04.410
So this part looks like it's thinner than you break it up like that again so this is a very rough explanation.

05:04.430 --> 05:08.520
It's not absolutely perfect but at least it gives you some idea of what's going on.

05:08.750 --> 05:14.070
But if you'd like to learn more there's a good paper as always there's always a paper.

05:14.150 --> 05:20.320
This one is by CCJ corps from the University of California and it's called Understanding convolutional

05:20.330 --> 05:22.930
neural networks who have a mathematical model.

05:23.150 --> 05:28.790
And basically they're He answers to questions and you need to just look at the first one.

05:28.790 --> 05:34.070
And the question is why not a nonlinear activation function is essential at the filter output of all

05:34.070 --> 05:36.120
intermediate layers.

05:36.170 --> 05:44.220
So that kind of explains it a bit more detail both in terms of intuition and mostly in terms of mathematics.

05:44.270 --> 05:47.910
So that's an interesting paper where you can get some more additional information on this topic.

05:48.050 --> 05:53.280
And if you really want to dig in and explore some some cool stuff here.

05:53.300 --> 05:55.630
Then there's another paper that you might be interested in.

05:55.640 --> 06:01.670
It's called delving deeper into rectifier surpassing human Lebon level performance on image and that

06:01.670 --> 06:02.830
classification.

06:02.870 --> 06:13.700
And here the author is coming here and others from Microsoft Research they propose a different type

06:13.700 --> 06:17.580
of rectified leaner unit function.

06:17.600 --> 06:23.120
They propose the parametric rectified function which you see here on the right and they argue that it

06:23.120 --> 06:26.690
delivers better results without sacrificing performance.

06:26.690 --> 06:30.150
So interesting read if you'd like to get a bit more into this topic.

06:30.440 --> 06:31.980
And that's all for today.

06:32.230 --> 06:38.330
Really you layer is pretty simple so for justing just applying the rectifier function and I look forward

06:38.330 --> 06:39.200
to seeing you next time.

06:39.200 --> 06:40.760
Until then enjoy deep learning.
