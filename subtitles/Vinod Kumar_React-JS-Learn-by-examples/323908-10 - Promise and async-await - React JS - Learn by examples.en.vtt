WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.480
year six introduced promises,

00:00:02.480 --> 00:00:06.010
which are a different way off working with asynchronous functions.

00:00:06.010 --> 00:00:07.600
To understand the same,

00:00:07.600 --> 00:00:08.860
let's take an example.

00:00:08.860 --> 00:00:12.880
I'm gonna create a new five year called E 8 13 Dark GS,

00:00:12.880 --> 00:00:15.250
and it's really function here.

00:00:15.250 --> 00:00:18.420
That takes two numbers as parameters on D.

00:00:18.420 --> 00:00:18.720
D.

00:00:18.720 --> 00:00:21.780
Wade's one by another and support student and the result.

00:00:21.780 --> 00:00:23.810
So this is how it's gonna look like,

00:00:23.810 --> 00:00:26.680
Let's call it as function divide.

00:00:26.680 --> 00:00:30.050
It takes number one and number two as perimeters,

00:00:30.050 --> 00:00:34.560
and all I'm supposed to do is to check if their numbers,

00:00:34.560 --> 00:00:36.630
and if they're not through an error,

00:00:36.630 --> 00:00:42.420
check your if type off anyone not equals toe number.

00:00:42.420 --> 00:00:44.650
I can take a throw.

00:00:44.650 --> 00:00:50.450
And then a message saying that first argument is not a number.

00:00:50.450 --> 00:00:52.000
Similarly,

00:00:52.000 --> 00:00:56.950
check your if type off and to not equals toe number.

00:00:56.950 --> 00:00:58.130
Then again,

00:00:58.130 --> 00:01:06.800
you know so another saying that second argument is not a number and then killed the numbers

00:01:06.800 --> 00:01:06.800
,

00:01:06.800 --> 00:01:09.350
but second number is equals to zero.

00:01:09.350 --> 00:01:11.360
I wanted that That cannot do it by zero.

00:01:11.360 --> 00:01:12.150
So I'll say there,

00:01:12.150 --> 00:01:21.680
if in tow people equals 20 that I'm gonna say you're too cannot do White by Zito and if

00:01:21.680 --> 00:01:22.750
everything is OK.

00:01:22.750 --> 00:01:23.740
I want an hour done.

00:01:23.740 --> 00:01:30.370
The result off Anyone divided by into I'll say return and one slash into Now that this

00:01:30.370 --> 00:01:31.380
function exists,

00:01:31.380 --> 00:01:32.710
let's make use off this.

00:01:32.710 --> 00:01:33.850
But before calling,

00:01:33.850 --> 00:01:41.530
I just want to print a message here something like Start off screwed and then I'll type

00:01:41.530 --> 00:01:48.040
your let equals do 12 b equals toe fight.

00:01:48.040 --> 00:01:52.230
And then I want to calculate the result off 12 Divided by five.

00:01:52.230 --> 00:01:59.220
I'm gonna say here let C equals toe Divide A and B is the perimeters.

00:01:59.220 --> 00:02:06.640
And then I dreamed the result by typing so long result off division is and then I just type

00:02:06.640 --> 00:02:08.130
C at the end.

00:02:08.130 --> 00:02:12.770
I'll also see here so long end off Good.

00:02:12.770 --> 00:02:19.540
Now the reason I'm printing start off script or end off script is to show you that all

00:02:19.540 --> 00:02:23.800
these lines off court get executed one by one in a singleness strain.

00:02:23.800 --> 00:02:27.770
And then I want to convert this function into an asynchronous function,

00:02:27.770 --> 00:02:30.630
using promises to execute this file.

00:02:30.630 --> 00:02:34.380
Let's go to a command prompt and get into the directory,

00:02:34.380 --> 00:02:38.850
and then I want to tape here the command north,

00:02:38.850 --> 00:02:45.740
followed by e x 13 on your 13 Js Onda Since we get 12 and fight,

00:02:45.740 --> 00:02:46.680
there is no problems,

00:02:46.680 --> 00:02:52.270
so we see that start off Script reserved off division is 2.4 end off script.

00:02:52.270 --> 00:02:56.460
If I go back to the court and then change this toe a text,

00:02:56.460 --> 00:03:00.870
for example instead of 12 type PSD go back to the command,

00:03:00.870 --> 00:03:02.760
prompt and then run this you'll see.

00:03:02.760 --> 00:03:05.040
Now we do not get the industrial.

00:03:05.040 --> 00:03:06.620
We got the start of script,

00:03:06.620 --> 00:03:12.750
the execution off this divide function to you in error and that caused the application toe

00:03:12.750 --> 00:03:13.170
break.

00:03:13.170 --> 00:03:15.010
And I did not see the end of script.

00:03:15.010 --> 00:03:19.330
And of course I got an error saying that first argument is not a number.

00:03:19.330 --> 00:03:22.300
Now this is the same thing with all other conditions.

00:03:22.300 --> 00:03:22.850
Onda.

00:03:22.850 --> 00:03:24.290
Let's not worry about that.

00:03:24.290 --> 00:03:26.550
So let me put this back as 12.

00:03:26.550 --> 00:03:27.720
Save this.

00:03:27.720 --> 00:03:30.850
Suppose if you want to convert this into an asynchronous function,

00:03:30.850 --> 00:03:33.440
then when you called is asynchronous function.

00:03:33.440 --> 00:03:38.720
There will not be any return value because the execution happens in a different way,

00:03:38.720 --> 00:03:42.980
so we have to supply con back as what to do with the result.

00:03:42.980 --> 00:03:43.930
To do this,

00:03:43.930 --> 00:03:47.220
let's put work this into an asynchronous function.

00:03:47.220 --> 00:03:51.470
The first thing that you have to do is to write the third parameter,

00:03:51.470 --> 00:03:53.650
which is supposed to be a callback function on.

00:03:53.650 --> 00:03:57.120
Let's name this appropriately as called back on.

00:03:57.120 --> 00:04:02.010
The only thing that you're gonna do is if call back is not supplied as a function.

00:04:02.010 --> 00:04:05.510
We have to draw an EDL some tape here.

00:04:05.510 --> 00:04:10.650
If type off callback is not equals toe a function,

00:04:10.650 --> 00:04:17.140
then we're gonna So another callback must be supplying on.

00:04:17.140 --> 00:04:18.850
It must be a function,

00:04:18.850 --> 00:04:28.050
and I'm going to do then asynchronous block over here by calling the set time out function

00:04:28.050 --> 00:04:28.050
,

00:04:28.050 --> 00:04:32.250
which takes a combat as a perimeter and then a duration.

00:04:32.250 --> 00:04:34.200
Since I don't want any delays,

00:04:34.200 --> 00:04:40.950
I'm gonna put a zero on all these court is going to go inside this with a small change.

00:04:40.950 --> 00:04:43.670
So I'm gonna cut this first on,

00:04:43.670 --> 00:04:46.050
then pasted inside over here.

00:04:46.050 --> 00:04:51.910
The next thing we want to do is to see if there is an editor and whenever there is another

00:04:51.910 --> 00:04:51.910
,

00:04:51.910 --> 00:04:53.510
we're gonna call the callback,

00:04:53.510 --> 00:04:56.520
using this as my first argument.

00:04:56.520 --> 00:04:57.300
So remember,

00:04:57.300 --> 00:05:01.180
Norgay's follows the ever first approach for the callbacks.

00:05:01.180 --> 00:05:03.140
So instead of throwing an exceptions,

00:05:03.140 --> 00:05:09.580
I'm gonna cut this and I'm gonna call the call back by supplying this and no second

00:05:09.580 --> 00:05:10.260
argument,

00:05:10.260 --> 00:05:13.960
I'm gonna say return here because we want to go back.

00:05:13.960 --> 00:05:15.020
Similarly,

00:05:15.020 --> 00:05:18.650
I want toe remote this and then dive here,

00:05:18.650 --> 00:05:23.540
call back and then passed this argument as the only argument,

00:05:23.540 --> 00:05:24.450
which is an error,

00:05:24.450 --> 00:05:26.530
similarly,

00:05:26.530 --> 00:05:27.160
the same thing.

00:05:27.160 --> 00:05:29.160
I'm gonna do it for this.

00:05:29.160 --> 00:05:35.490
Cut this call here by saying call back on this error message on Britain.

00:05:35.490 --> 00:05:36.710
And finally,

00:05:36.710 --> 00:05:38.140
if there is no other,

00:05:38.140 --> 00:05:42.620
we do not want to return because we want to supply that an asynchronous callback result.

00:05:42.620 --> 00:05:44.270
So I'm Curtis on,

00:05:44.270 --> 00:05:46.020
then Savior come back.

00:05:46.020 --> 00:05:48.640
And since there is no other,

00:05:48.640 --> 00:05:54.220
we're going to say none as the first perimeter and the result off division as the second

00:05:54.220 --> 00:05:54.750
perimeter.

00:05:54.750 --> 00:05:59.280
Now the function has been converted into an asynchronous function.

00:05:59.280 --> 00:06:01.430
When we call this divide function,

00:06:01.430 --> 00:06:04.570
there is no more return by Lucius aggregated off this.

00:06:04.570 --> 00:06:07.820
But we have 1/3 perimeter here card call back,

00:06:07.820 --> 00:06:09.300
which is supposed to be a function.

00:06:09.300 --> 00:06:15.270
I'm gonna read a callback granular here which they ever on reserved as two parameters.

00:06:15.270 --> 00:06:17.090
We're gonna check your gift.

00:06:17.090 --> 00:06:17.620
There isn't.

00:06:17.620 --> 00:06:20.270
We're gonna say consult law.

00:06:20.270 --> 00:06:26.010
There waas an error and means a yacht?

00:06:26.010 --> 00:06:27.670
Yes,

00:06:27.670 --> 00:06:28.980
with savior.

00:06:28.980 --> 00:06:30.910
That console law.

00:06:30.910 --> 00:06:36.030
The result off division is on.

00:06:36.030 --> 00:06:40.210
Then we'll tell you that this concern log is no longer required.

00:06:40.210 --> 00:06:40.960
I'm gonna move.

00:06:40.960 --> 00:06:44.320
That saved this now to execute the same,

00:06:44.320 --> 00:06:45.850
we'll go back to the command,

00:06:45.850 --> 00:06:47.010
run and run this.

00:06:47.010 --> 00:06:48.380
But just remember,

00:06:48.380 --> 00:06:50.430
we have now 12 and five,

00:06:50.430 --> 00:06:52.320
which which are valid perimeters,

00:06:52.320 --> 00:06:55.770
but because divide is now an asynchronous function.

00:06:55.770 --> 00:06:57.930
So the concert log for starters,

00:06:57.930 --> 00:06:59.080
script comes first.

00:06:59.080 --> 00:07:05.040
This just transfer the control and comes back instantly and later point in time.

00:07:05.040 --> 00:07:09.410
The result off this division comes up and we see one of these.

00:07:09.410 --> 00:07:10.920
So we're gonna go back to the command,

00:07:10.920 --> 00:07:12.250
prompt on done the same,

00:07:12.250 --> 00:07:17.350
and you'll see that start off script Industrial comes without any problem.

00:07:17.350 --> 00:07:17.820
That is,

00:07:17.820 --> 00:07:20.230
a top division is 2.4 and let's go on.

00:07:20.230 --> 00:07:21.350
Changes to some.

00:07:21.350 --> 00:07:23.130
ASD saved this.

00:07:23.130 --> 00:07:24.030
Go back to the command,

00:07:24.030 --> 00:07:25.850
prompt really on the same thing.

00:07:25.850 --> 00:07:26.910
And once again,

00:07:26.910 --> 00:07:30.620
you will see start off script and industrial comes without a problem.

00:07:30.620 --> 00:07:33.480
There was another first argument is not a number.

00:07:33.480 --> 00:07:39.290
The only reason why you make it an exception is when you don't supply this call back at all

00:07:39.290 --> 00:07:39.780
on,

00:07:39.780 --> 00:07:44.310
in which case we're gonna actually receive an exception and the execution of the

00:07:44.310 --> 00:07:45.530
application may break.

00:07:45.530 --> 00:07:49.790
So this is how traditionally the JavaScript supports asynchronous,

00:07:49.790 --> 00:07:53.450
we have two different on some other asynchronous functions.

00:07:53.450 --> 00:07:58.060
But in year six they introduced the concept off promises.

00:07:58.060 --> 00:07:58.940
So that is,

00:07:58.940 --> 00:08:00.840
convert dysfunction in tow,

00:08:00.840 --> 00:08:03.260
a promise based asynchronous function.

00:08:03.260 --> 00:08:06.830
So in case of a promise based operations,

00:08:06.830 --> 00:08:11.870
the return value off this function when we call is a promise object.

00:08:11.870 --> 00:08:13.440
So there is no call back here,

00:08:13.440 --> 00:08:16.140
so we're gonna remove this call back on,

00:08:16.140 --> 00:08:21.030
then write a return statement which returns a new promise,

00:08:21.030 --> 00:08:23.470
which is going to have some callbacks.

00:08:23.470 --> 00:08:24.410
Onda,

00:08:24.410 --> 00:08:25.330
obviously,

00:08:25.330 --> 00:08:27.600
because we're learning a new promise object.

00:08:27.600 --> 00:08:33.550
We can no assign this over here toe result,

00:08:33.550 --> 00:08:37.780
so I can call this year as let result equals.

00:08:37.780 --> 00:08:41.260
So we're gonna get the promise object over here.

00:08:41.260 --> 00:08:46.900
The promised instructor takes a call back as an argument on the callback receives,

00:08:46.900 --> 00:08:48.810
result and reject,

00:08:48.810 --> 00:08:53.910
which are two functions that we have to call and inside the body were gonna do all our

00:08:53.910 --> 00:08:54.390
logic.

00:08:54.390 --> 00:08:56.370
And since there is no call back,

00:08:56.370 --> 00:09:01.610
we don't have this particular course so I can get it off this now if type off Edwin is not

00:09:01.610 --> 00:09:02.190
a number,

00:09:02.190 --> 00:09:04.020
we have to report this as an editor.

00:09:04.020 --> 00:09:06.290
I'm gonna cut this and paste over killed.

00:09:06.290 --> 00:09:08.650
We don't have anything called call back,

00:09:08.650 --> 00:09:11.810
but that is where this reject function comes into picture.

00:09:11.810 --> 00:09:13.850
We're just going to say reject.

00:09:13.850 --> 00:09:20.040
The first argument is not a number that means you get a promise on the promise has been

00:09:20.040 --> 00:09:20.650
rejected.

00:09:20.650 --> 00:09:24.610
We don't need to call the return because the reject will take the control away.

00:09:24.610 --> 00:09:25.190
Anyways,

00:09:25.190 --> 00:09:28.060
the same thing applies to these two as well.

00:09:28.060 --> 00:09:29.600
So I cut this from here,

00:09:29.600 --> 00:09:31.320
based it over here,

00:09:31.320 --> 00:09:32.940
and then you start off call back.

00:09:32.940 --> 00:09:34.920
I'm gonna call it us reject on.

00:09:34.920 --> 00:09:36.980
I don't need these to return statement,

00:09:36.980 --> 00:09:38.920
so I will get it off them too.

00:09:38.920 --> 00:09:42.120
The last part here is where we called the callback.

00:09:42.120 --> 00:09:45.100
With null and anyone divided into.

00:09:45.100 --> 00:09:50.160
We don't have to do that because now the promise is gonna be a result because there's no

00:09:50.160 --> 00:09:50.700
errors.

00:09:50.700 --> 00:09:57.410
And I think you have to say result n one n two and then I don't need this set time out at

00:09:57.410 --> 00:09:57.760
all.

00:09:57.760 --> 00:10:02.810
Now this is how you have to write a function that returns a promise.

00:10:02.810 --> 00:10:06.170
So which means as soon as you call this here,

00:10:06.170 --> 00:10:10.700
the control comes over toe here and returns the promise object.

00:10:10.700 --> 00:10:15.730
So result is a promise object And then we're gonna continue with our stock here which

00:10:15.730 --> 00:10:21.070
prince this console on and off script and little the actual logic off this function gets

00:10:21.070 --> 00:10:21.850
processed.

00:10:21.850 --> 00:10:22.550
Now,

00:10:22.550 --> 00:10:23.480
when you get a promise,

00:10:23.480 --> 00:10:25.480
the promise has only two outcomes.

00:10:25.480 --> 00:10:28.050
Either it is result or it is rejected.

00:10:28.050 --> 00:10:29.840
If it is result,

00:10:29.840 --> 00:10:34.700
then you can access the result the result in the denim function.

00:10:34.700 --> 00:10:36.210
In case of an error,

00:10:36.210 --> 00:10:40.050
you call the catch function To get the error messages,

00:10:40.050 --> 00:10:40.820
for example,

00:10:40.820 --> 00:10:42.740
I configure result dark.

00:10:42.740 --> 00:10:47.340
Then we now get the result as callbacks perimeter.

00:10:47.340 --> 00:10:53.650
I can see your console long result off division and then I take your results.

00:10:53.650 --> 00:10:58.190
And I can also tell you your result or catch in case often error.

00:10:58.190 --> 00:11:00.040
I can type console law.

00:11:00.040 --> 00:11:05.570
There was an error on the other message is here.

00:11:05.570 --> 00:11:07.250
So save this.

00:11:07.250 --> 00:11:13.030
And now we have a neater mechanism where I did not have to depend on set time out for

00:11:13.030 --> 00:11:14.320
easing from its functions.

00:11:14.320 --> 00:11:16.580
I did not hurt us up like callbacks,

00:11:16.580 --> 00:11:18.240
so I just have to call.

00:11:18.240 --> 00:11:19.540
This is a regular function.

00:11:19.540 --> 00:11:20.840
We get a result,

00:11:20.840 --> 00:11:22.660
but this time it's not actually the result.

00:11:22.660 --> 00:11:23.850
It's a promise object,

00:11:23.850 --> 00:11:25.460
and then we are using it.

00:11:25.460 --> 00:11:28.630
Then toe get the result and catch toe.

00:11:28.630 --> 00:11:31.230
Get the other and it is still asynchronous.

00:11:31.230 --> 00:11:33.750
Which means that we get the start off script first.

00:11:33.750 --> 00:11:37.680
Endoscopes again on then one off these two statements.

00:11:37.680 --> 00:11:40.330
Let's change the first para middle toe 12.

00:11:40.330 --> 00:11:41.370
Save this.

00:11:41.370 --> 00:11:43.090
Go back to the command prompt.

00:11:43.090 --> 00:11:44.290
Try out the same thing.

00:11:44.290 --> 00:11:50.420
So I will run nor extorting the jays and you'll see that we got it in an asynchronous style

00:11:50.420 --> 00:11:50.420
,

00:11:50.420 --> 00:11:55.120
which means we got the start of Scripture duster and the result comes later point in time.

00:11:55.120 --> 00:11:55.980
Similarly,

00:11:55.980 --> 00:11:58.770
if I had something like a SDF saved this,

00:11:58.770 --> 00:12:00.100
go back to the command front.

00:12:00.100 --> 00:12:02.510
You'll still see that there was another,

00:12:02.510 --> 00:12:05.630
but we got the start off script industrial.

00:12:05.630 --> 00:12:07.260
There was an error.

00:12:07.260 --> 00:12:09.560
First argument is not a number,

00:12:09.560 --> 00:12:09.900
and then,

00:12:09.900 --> 00:12:10.180
of course,

00:12:10.180 --> 00:12:11.550
it's giving the details off.

00:12:11.550 --> 00:12:15.310
What actually went wrong over here Now,

00:12:15.310 --> 00:12:21.100
the General Convention to write this would be to say Divide a by me,

00:12:21.100 --> 00:12:22.060
Andi.

00:12:22.060 --> 00:12:22.880
Then you say,

00:12:22.880 --> 00:12:23.320
Don't.

00:12:23.320 --> 00:12:25.540
Then then you say here,

00:12:25.540 --> 00:12:26.480
dark catch.

00:12:26.480 --> 00:12:28.680
So this is the general way off writing.

00:12:28.680 --> 00:12:34.320
So you make a statement chain here instead off assigning them to available.

00:12:34.320 --> 00:12:35.270
So it's like,

00:12:35.270 --> 00:12:39.050
do this job and then when it is result,

00:12:39.050 --> 00:12:41.080
you do this when there is another.

00:12:41.080 --> 00:12:41.820
Do this.

00:12:41.820 --> 00:12:43.320
So save this.

00:12:43.320 --> 00:12:45.030
Go back to the command.

00:12:45.030 --> 00:12:45.360
Prompt.

00:12:45.360 --> 00:12:46.190
Run the same.

00:12:46.190 --> 00:12:48.760
Since we're passing a SDF has the perimeter,

00:12:48.760 --> 00:12:54.840
we get the better and then we go and supply a proper number.

00:12:54.840 --> 00:12:56.120
Let's stay pure 11.

00:12:56.120 --> 00:13:00.910
And then when I run this and you can see we get the output in a much neater way.

00:13:00.910 --> 00:13:06.720
Maybe a seven introduced to keywords called casing and await,

00:13:06.720 --> 00:13:09.750
which makes this particular call.

00:13:09.750 --> 00:13:14.050
The promise based asynchronous function calls much a simpler to read.

00:13:14.050 --> 00:13:16.470
So we don't have to write this dark,

00:13:16.470 --> 00:13:18.510
then are dark catch callbacks.

00:13:18.510 --> 00:13:20.300
So to modify this,

00:13:20.300 --> 00:13:23.850
I have to first collect the return value off the divide,

00:13:23.850 --> 00:13:26.150
which earlier was a promise.

00:13:26.150 --> 00:13:31.220
Now I can say you're let result equals toe await and then say divide.

00:13:31.220 --> 00:13:33.920
So what actually were telling here is that Hey,

00:13:33.920 --> 00:13:38.880
wait for the result off this to be resolved and then give the result.

00:13:38.880 --> 00:13:42.120
So this time result is no longer a promise,

00:13:42.120 --> 00:13:44.620
but the actual result value,

00:13:44.620 --> 00:13:46.650
which is the desert off division.

00:13:46.650 --> 00:13:52.080
So what happened to the promise was rejected than the actual rejected results,

00:13:52.080 --> 00:13:56.080
such as these streets will be thrown as other messages from here.

00:13:56.080 --> 00:13:58.500
So we may have to put this in a try catch.

00:13:58.500 --> 00:14:00.090
So now that we have the result,

00:14:00.090 --> 00:14:03.830
I can directly display that result over here like this.

00:14:03.830 --> 00:14:07.350
And then we're gonna say here,

00:14:07.350 --> 00:14:10.590
let's select this and then put a try,

00:14:10.590 --> 00:14:15.250
catch and inside the try block and report this.

00:14:15.250 --> 00:14:16.260
If there is an error,

00:14:16.260 --> 00:14:20.870
that it hurts the rejected value from the promise and then we're gonna say you're consoled

00:14:20.870 --> 00:14:21.420
or long.

00:14:21.420 --> 00:14:24.650
There was an error on probably we can change the name,

00:14:24.650 --> 00:14:25.140
toe.

00:14:25.140 --> 00:14:26.160
Er,

00:14:26.160 --> 00:14:30.450
we don't need this then and catch anymore.

00:14:30.450 --> 00:14:35.370
So this is how it's gonna look like even though this court looks like singleness,

00:14:35.370 --> 00:14:38.550
which means we feel that it is all executed one after the other.

00:14:38.550 --> 00:14:40.540
But it is not under the hood.

00:14:40.540 --> 00:14:42.600
It is still an asynchronous function,

00:14:42.600 --> 00:14:45.190
which means that we kept the start of script.

00:14:45.190 --> 00:14:46.720
We get this endorsed it,

00:14:46.720 --> 00:14:49.190
then only one of these two will come.

00:14:49.190 --> 00:14:54.980
The only requirement off this obeyed key work is that this block are the statements which

00:14:54.980 --> 00:15:00.710
include the await keyword must be included in a function marked as easing.

00:15:00.710 --> 00:15:03.750
Since we don't have any function over here,

00:15:03.750 --> 00:15:10.070
either we may have directed a function which is facing are right now For the time being,

00:15:10.070 --> 00:15:19.670
I can put it in a set time out and then they've been chasing function on then Probably zero

00:15:19.670 --> 00:15:22.520
on here I can put dysfunction on.

00:15:22.520 --> 00:15:23.900
That's not a problem.

00:15:23.900 --> 00:15:25.120
Let's say this.

00:15:25.120 --> 00:15:27.100
Go back to the command front,

00:15:27.100 --> 00:15:34.300
try running this and then we still get the similar result in case off an error like some

00:15:34.300 --> 00:15:37.100
ASD here and then go back and try.

00:15:37.100 --> 00:15:40.950
And we still get the result just like the previous examples.

00:15:40.950 --> 00:15:46.450
Except that this block is now much more simpler than by calling.

00:15:46.450 --> 00:15:50.550
I promised our then Norton Norton dot catch

