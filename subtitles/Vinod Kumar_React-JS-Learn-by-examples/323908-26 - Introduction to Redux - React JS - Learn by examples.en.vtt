WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.570
when you're working with a react application with many components on changes to the state

00:00:05.570 --> 00:00:08.640
by one company may have to be reflected in other components.

00:00:08.640 --> 00:00:12.780
It becomes extremely difficult to manage the state amongst these components.

00:00:12.780 --> 00:00:14.420
Take a look at this map,

00:00:14.420 --> 00:00:16.290
which is not a react application,

00:00:16.290 --> 00:00:18.250
which has three US sections.

00:00:18.250 --> 00:00:20.370
Number one is the HTML form,

00:00:20.370 --> 00:00:23.090
which allows the user toe enter in submitting him.

00:00:23.090 --> 00:00:27.870
Number two is a lister displaying a name along with the big button on,

00:00:27.870 --> 00:00:31.040
and the number three is the Martin along the name itself.

00:00:31.040 --> 00:00:33.800
The challenges start when I add in a name here,

00:00:33.800 --> 00:00:34.430
for example,

00:00:34.430 --> 00:00:37.630
like type in some name and click on the U.

00:00:37.630 --> 00:00:41.320
S has to be updated with the new name and as well,

00:00:41.320 --> 00:00:45.050
when I click on the delete button off a particular name again,

00:00:45.050 --> 00:00:45.400
the U.

00:00:45.400 --> 00:00:47.180
N has to be updated here.

00:00:47.180 --> 00:00:53.060
So here the name happens to be the state and adding a name or believing a name or

00:00:53.060 --> 00:00:54.670
considered as actions.

00:00:54.670 --> 00:01:01.500
So relax helps us manage these state and actions in a very nice and professional fashion.

00:01:01.500 --> 00:01:06.050
Readers application has these four elements Number one,

00:01:06.050 --> 00:01:06.470
of course,

00:01:06.470 --> 00:01:07.100
is your,

00:01:07.100 --> 00:01:07.470
um,

00:01:07.470 --> 00:01:13.470
components itself where the actual data is either presented to the user are being updated

00:01:13.470 --> 00:01:14.660
back and using the U.

00:01:14.660 --> 00:01:15.390
N component,

00:01:15.390 --> 00:01:18.690
we generally do something called dispatching an action,

00:01:18.690 --> 00:01:26.920
and action is simply an object with typically type as one off its property and data are any

00:01:26.920 --> 00:01:29.440
other properties that represent the actual data.

00:01:29.440 --> 00:01:30.460
For example,

00:01:30.460 --> 00:01:36.100
the first action here has a type which is called Are the name means type of action is are

00:01:36.100 --> 00:01:38.470
the name but the data corresponding toe.

00:01:38.470 --> 00:01:40.360
This action is the name itself.

00:01:40.360 --> 00:01:41.340
However,

00:01:41.340 --> 00:01:42.860
if you want to delete the name,

00:01:42.860 --> 00:01:47.020
then the type represents a string here that says Delete underscore name.

00:01:47.020 --> 00:01:50.850
But the actual data to be deleted is at least index.

00:01:50.850 --> 00:01:56.180
While there is no hard and fast rule that you should use this type and data as properties

00:01:56.180 --> 00:01:59.910
of an action type is somewhat expected as a mandatory one,

00:01:59.910 --> 00:02:00.750
and the property,

00:02:00.750 --> 00:02:01.340
called data,

00:02:01.340 --> 00:02:02.570
can be anything else.

00:02:02.570 --> 00:02:03.030
For example,

00:02:03.030 --> 00:02:07.190
for the 1st 1 I couldn't simply said name on second when I could have said index.

00:02:07.190 --> 00:02:09.420
Once the action is dispatched by the U.

00:02:09.420 --> 00:02:10.300
N components,

00:02:10.300 --> 00:02:14.260
it is received by what is called as a producer producer.

00:02:14.260 --> 00:02:16.980
Not only get the action object that you have dispatched,

00:02:16.980 --> 00:02:18.230
but it also quiet.

00:02:18.230 --> 00:02:20.740
It's for the initial state off the store,

00:02:20.740 --> 00:02:22.800
which is the crux of your relax application.

00:02:22.800 --> 00:02:28.800
The reduced job is toe modify the state maintained in the store based on the action that

00:02:28.800 --> 00:02:29.390
your scent,

00:02:29.390 --> 00:02:30.560
for example,

00:02:30.560 --> 00:02:36.420
if the initial state of the store contains two names on you have sent an action card are

00:02:36.420 --> 00:02:38.680
the name with a new name in it that it is.

00:02:38.680 --> 00:02:39.880
His job is toe.

00:02:39.880 --> 00:02:44.750
Combine the new name along with the existing names on Return It Back to the store.

00:02:44.750 --> 00:02:45.640
So they do.

00:02:45.640 --> 00:02:50.250
There is basically a function that receives the current state from the store,

00:02:50.250 --> 00:02:54.100
as well as the action object that has been dispatched for the U element.

00:02:54.100 --> 00:02:59.570
And generally we will have some kind of a switch case where we check working off action.

00:02:59.570 --> 00:03:04.070
Was it was it in adding any or deleting a name or something else?

00:03:04.070 --> 00:03:04.980
In this case,

00:03:04.980 --> 00:03:06.270
if it's an art name,

00:03:06.270 --> 00:03:10.800
we written a new array that is containing the existing names in the store,

00:03:10.800 --> 00:03:13.310
as well as the new name that is being sent from the action.

00:03:13.310 --> 00:03:16.900
And if the action that type is deleted name.

00:03:16.900 --> 00:03:19.270
Then we actually get the current state,

00:03:19.270 --> 00:03:21.010
which contains a bunch off names,

00:03:21.010 --> 00:03:22.040
and then we just funded,

00:03:22.040 --> 00:03:23.800
deleted based on the index.

00:03:23.800 --> 00:03:24.590
Finally,

00:03:24.590 --> 00:03:25.550
we have to return.

00:03:25.550 --> 00:03:30.610
The modified state on the modified state will now be given back to the store the stories

00:03:30.610 --> 00:03:34.610
and object created using this creates store function from readers.

00:03:34.610 --> 00:03:39.740
All that we have to do is to call this react store function by supplying the reducer

00:03:39.740 --> 00:03:41.560
function as an argument.

00:03:41.560 --> 00:03:47.200
The store products a function called dispatch using which we can dispatch new actions from

00:03:47.200 --> 00:03:53.150
the as well as proper to subscribe function where we can register event listeners.

00:03:53.150 --> 00:03:54.500
They re listeners,

00:03:54.500 --> 00:04:00.330
listen to the change off data in the stores estate and simply invokes the listener

00:04:00.330 --> 00:04:01.830
functions that were register,

00:04:01.830 --> 00:04:03.700
which helps us update the U.

00:04:03.700 --> 00:04:03.810
N.

00:04:03.810 --> 00:04:06.530
Here is an example as how you can do this.

00:04:06.530 --> 00:04:12.690
We have a Abdic list function whose job is to create a bunch off a lie slash light based on

00:04:12.690 --> 00:04:14.350
the store's state here,

00:04:14.350 --> 00:04:19.060
and we simply register dysfunction with the store as a subscriber.

00:04:19.060 --> 00:04:21.120
So whenever there is a change in the stores,

00:04:21.120 --> 00:04:21.730
a state,

00:04:21.730 --> 00:04:26.880
this update list will be called on the date list is actually updating and nameless,

00:04:26.880 --> 00:04:27.490
which is a,

00:04:27.490 --> 00:04:27.990
um,

00:04:27.990 --> 00:04:31.400
with all the list items that has been created here.

00:04:31.400 --> 00:04:32.630
To understand the same,

00:04:32.630 --> 00:04:33.930
let's take an example,

00:04:33.930 --> 00:04:38.550
even though this application was created using the create react app,

00:04:38.550 --> 00:04:41.630
we're not having any react component in this.

00:04:41.630 --> 00:04:48.270
So the index RJ's is empty index dot html has the basic structure,

00:04:48.270 --> 00:04:52.210
and we're gonna remove this one because we're not going to use this and instead really

00:04:52.210 --> 00:04:56.700
create a plain HTML court here and using the plain JavaScript.

00:04:56.700 --> 00:04:58.230
We're gonna understand the readers.

00:04:58.230 --> 00:05:03.530
The first thing that we have to do is to install a new package called Readers.

00:05:03.530 --> 00:05:06.730
For this I'm gonna press control and back.

00:05:06.730 --> 00:05:07.110
Take.

00:05:07.110 --> 00:05:08.680
That brings me the console,

00:05:08.680 --> 00:05:09.500
your terminal.

00:05:09.500 --> 00:05:14.650
You can also do the same thing from the view middle and then select your terminal on.

00:05:14.650 --> 00:05:18.770
Then I will take your NPM install readers.

00:05:18.770 --> 00:05:20.040
I pressed.

00:05:20.040 --> 00:05:20.750
Enter.

00:05:20.750 --> 00:05:23.590
This will take probably a couple of seconds.

00:05:23.590 --> 00:05:25.450
Let's close this command prompt.

00:05:25.450 --> 00:05:29.240
We like the basic your elements here first on.

00:05:29.240 --> 00:05:31.910
The first thing that I want to do is to have a deal whose class?

00:05:31.910 --> 00:05:33.020
The miscall container,

00:05:33.020 --> 00:05:37.630
and that's gonna have a heading one heading one,

00:05:37.630 --> 00:05:40.650
I'm gonna die Pure Redux demo application.

00:05:40.650 --> 00:05:44.060
And below that,

00:05:44.060 --> 00:05:46.100
I'm gonna have a two sections here,

00:05:46.100 --> 00:05:48.340
as we saw earlier in our demonstration,

00:05:48.340 --> 00:05:52.810
I'm gonna have here a dot ro with dot all into two.

00:05:52.810 --> 00:05:56.980
So that gives me two columns where I can place my components.

00:05:56.980 --> 00:06:02.090
The first color is where I'm gonna have an extreme form for which no press enter type your

00:06:02.090 --> 00:06:04.320
hits three and your name,

00:06:04.320 --> 00:06:08.660
and then form whose idea is a form knee?

00:06:08.660 --> 00:06:09.980
Press enter.

00:06:09.980 --> 00:06:14.640
I don't need an action because we're not going to submit toe any sort of oversight resource

00:06:14.640 --> 00:06:14.640
.

00:06:14.640 --> 00:06:17.400
I press enter here and inside the form,

00:06:17.400 --> 00:06:25.590
I'm gonna have a text box with a glance off form control on an icy off name,

00:06:25.590 --> 00:06:33.870
followed by probably important whose last name is Beauty and beauty and dash Primary with a

00:06:33.870 --> 00:06:36.050
text off our need.

00:06:36.050 --> 00:06:39.700
So if I save this and go back to the browser,

00:06:39.700 --> 00:06:42.770
you will see that it comes without any bootstrap.

00:06:42.770 --> 00:06:44.970
CS is applied to do that.

00:06:44.970 --> 00:06:48.450
We go back to our indexed RGs on import.

00:06:48.450 --> 00:06:58.400
Bootstrap based CSS bootstrap dot CS is saved this and go back and you'll see that the

00:06:58.400 --> 00:07:00.410
bootstrap seer says has been applied.

00:07:00.410 --> 00:07:07.870
Let's go back to the index html Andi will also are a U S ally combination over here.

00:07:07.870 --> 00:07:16.790
And I'm gonna hit three here that says list off names followed by a union who CSS class

00:07:16.790 --> 00:07:22.450
name is going to be something called list group with an i D off names list.

00:07:22.450 --> 00:07:23.570
As of now,

00:07:23.570 --> 00:07:25.740
we don't need to give any lay here,

00:07:25.740 --> 00:07:29.880
but those allies are going to be dynamically created based on the names that we're gonna

00:07:29.880 --> 00:07:34.670
enter And just to make sure that these sections will be clearly visible here,

00:07:34.670 --> 00:07:37.360
let's also are for both the columns here.

00:07:37.360 --> 00:07:39.140
We're gonna add some CSS class.

00:07:39.140 --> 00:07:40.540
Let's are alert.

00:07:40.540 --> 00:07:41.450
Alert.

00:07:41.450 --> 00:07:42.780
Warning.

00:07:42.780 --> 00:07:48.810
That will give you some kind of a local copy the scene and based over here on instead of

00:07:48.810 --> 00:07:49.210
warning,

00:07:49.210 --> 00:07:51.940
that's how does danger saved this?

00:07:51.940 --> 00:07:55.800
Go back to the browser and you will see that they're gonna come like this.

00:07:55.800 --> 00:07:58.860
If I want the height off this to be controlled,

00:07:58.860 --> 00:08:00.750
let's are a CSS here.

00:08:00.750 --> 00:08:04.890
I'm gonna call this as in extort CSS on for Say,

00:08:04.890 --> 00:08:11.910
you're anything that is an alert class should have a mid height off around 500 pixel and

00:08:11.910 --> 00:08:18.630
then we have to include the CS is in our indexed years like this on.

00:08:18.630 --> 00:08:20.830
If I save this and go back to the browser,

00:08:20.830 --> 00:08:23.600
you should see now the height has been changed.

00:08:23.600 --> 00:08:27.450
I will also add a little bit off gap to do Britain.

00:08:27.450 --> 00:08:28.180
To do that,

00:08:28.180 --> 00:08:31.560
I go back to the index start CSS Revere,

00:08:31.560 --> 00:08:37.390
a class obedient should have a margin top off around 10 pixels.

00:08:37.390 --> 00:08:38.390
Save this,

00:08:38.390 --> 00:08:39.560
and if you go back now,

00:08:39.560 --> 00:08:41.350
you'll see that there is a nice gap.

00:08:41.350 --> 00:08:43.750
Now let's come to the functionality part.

00:08:43.750 --> 00:08:45.060
So to do that,

00:08:45.060 --> 00:08:48.490
let's close this index your CSS index dot html,

00:08:48.490 --> 00:08:49.470
and come to the index,

00:08:49.470 --> 00:08:49.660
right?

00:08:49.660 --> 00:08:50.060
Yes,

00:08:50.060 --> 00:08:53.260
Since we have imported the relax package,

00:08:53.260 --> 00:08:54.990
let's get a couple of things from there.

00:08:54.990 --> 00:08:58.810
The number one thing that we want right now is the create store functions.

00:08:58.810 --> 00:09:02.950
I can see your report an antique early bracket from readers,

00:09:02.950 --> 00:09:05.100
but instead the college Gregor.

00:09:05.100 --> 00:09:10.080
We can type here something called pH store and using the create store function,

00:09:10.080 --> 00:09:12.270
we will clear the store to do that.

00:09:12.270 --> 00:09:15.350
They can't store equals to create stool,

00:09:15.350 --> 00:09:17.500
but it takes an argument,

00:09:17.500 --> 00:09:19.600
which is far as a reducer.

00:09:19.600 --> 00:09:21.320
It's holidays reducer.

00:09:21.320 --> 00:09:23.760
We don't have this variable called producer.

00:09:23.760 --> 00:09:25.110
Let's create one.

00:09:25.110 --> 00:09:30.350
So real user is a function that exports called ST,

00:09:30.350 --> 00:09:33.220
which is supposed to be the current state from the store.

00:09:33.220 --> 00:09:35.000
And since the stories brand new,

00:09:35.000 --> 00:09:37.010
the current state would be undefined.

00:09:37.010 --> 00:09:37.890
So instead,

00:09:37.890 --> 00:09:40.450
we can also say here initial state,

00:09:40.450 --> 00:09:44.230
which is the default value that began supply on an action.

00:09:44.230 --> 00:09:47.850
The action is what is being dispatched using the U.

00:09:47.850 --> 00:09:47.980
N.

00:09:47.980 --> 00:09:49.590
And this is a function.

00:09:49.590 --> 00:09:51.190
So we're gonna receive something like this.

00:09:51.190 --> 00:09:51.820
Of course,

00:09:51.820 --> 00:09:53.420
we don't have this initial state.

00:09:53.420 --> 00:09:56.850
Let's assign an array off a couple of names here.

00:09:56.850 --> 00:09:57.830
Something to see here.

00:09:57.830 --> 00:09:58.720
Const.

00:09:58.720 --> 00:10:02.740
Initial state equals two honorary off couple of means like,

00:10:02.740 --> 00:10:03.090
you know,

00:10:03.090 --> 00:10:11.690
on shop the releases main job is to alter the value off the state maintained by the store

00:10:11.690 --> 00:10:13.310
based on the actions type.

00:10:13.310 --> 00:10:14.400
So to do that,

00:10:14.400 --> 00:10:17.350
we're going to say it's which action door type,

00:10:17.350 --> 00:10:20.200
and we'll assume that the action don't type,

00:10:20.200 --> 00:10:23.510
maybe equals toe are the name or deleted name.

00:10:23.510 --> 00:10:30.080
So the first case I'm gonna die pure as case on Underscore name with the City of Great for

00:10:30.080 --> 00:10:30.550
now.

00:10:30.550 --> 00:10:33.130
And in the second case let's call it as delete.

00:10:33.130 --> 00:10:34.940
Underscored the need for that.

00:10:34.940 --> 00:10:35.210
Also,

00:10:35.210 --> 00:10:36.760
we're gonna add a great for now,

00:10:36.760 --> 00:10:40.620
and a switch case must have a default.

00:10:40.620 --> 00:10:43.210
So I'm gonna add a default on right now.

00:10:43.210 --> 00:10:44.750
I'm not doing anything in the default.

00:10:44.750 --> 00:10:48.160
Suppose if the actions type is add name.

00:10:48.160 --> 00:10:52.440
The action carries the name to be added as part of its payload,

00:10:52.440 --> 00:10:56.930
which literally call it as data so we can see your they've done.

00:10:56.930 --> 00:11:03.940
And new money that is made out off the current value from the state as the last action.

00:11:03.940 --> 00:11:04.890
Dark data.

00:11:04.890 --> 00:11:05.580
So,

00:11:05.580 --> 00:11:08.300
assuming that the action that data contains the new name,

00:11:08.300 --> 00:11:11.300
we're bringing in all the names in the current state,

00:11:11.300 --> 00:11:14.450
plus the new one and we're doing a new array here.

00:11:14.450 --> 00:11:17.310
Since that it doesn't has more presidents over break.

00:11:17.310 --> 00:11:18.870
We don't need this break anymore,

00:11:18.870 --> 00:11:19.950
so I'll get it off that,

00:11:19.950 --> 00:11:22.130
in case of a delete name,

00:11:22.130 --> 00:11:25.910
we have toe get the current values from the state on,

00:11:25.910 --> 00:11:30.390
then probably deleted a name based on the index maintained by action or data.

00:11:30.390 --> 00:11:32.950
So this could be probably a couple of steps here,

00:11:32.950 --> 00:11:35.750
So the number one is that I'm gonna get the current values.

00:11:35.750 --> 00:11:40.290
Let's say I'm gonna say let name equals toe all the meals in the state.

00:11:40.290 --> 00:11:46.810
And then we'll say your name start spies action or data,

00:11:46.810 --> 00:11:48.650
which is assumed to be the index.

00:11:48.650 --> 00:11:51.030
And we want to believe one element from there.

00:11:51.030 --> 00:11:53.550
And then now we have to return these names.

00:11:53.550 --> 00:11:56.070
So which I can simply say written names,

00:11:56.070 --> 00:12:00.690
which is the new state being returned from the producer once again.

00:12:00.690 --> 00:12:02.070
I don't need this break here.

00:12:02.070 --> 00:12:06.770
I'm gonna get it off this since switch case must have a default and engaging.

00:12:06.770 --> 00:12:08.750
The action is none of these two.

00:12:08.750 --> 00:12:12.010
Then we have to return the state as is.

00:12:12.010 --> 00:12:15.050
We're gonna just say your return stage itself.

00:12:15.050 --> 00:12:18.460
So now that we have the store,

00:12:18.460 --> 00:12:21.810
the store is a local variable off this index torches,

00:12:21.810 --> 00:12:26.700
and it will not be accessible to the browser to make sure that this variable is available

00:12:26.700 --> 00:12:27.510
in the browser.

00:12:27.510 --> 00:12:29.310
We can put that in the window,

00:12:29.310 --> 00:12:30.610
which is a global scope.

00:12:30.610 --> 00:12:34.210
Like this window off store.

00:12:34.210 --> 00:12:36.150
He could stow store,

00:12:36.150 --> 00:12:38.940
save this and go back to the closer.

00:12:38.940 --> 00:12:40.990
We don't see any changes over here,

00:12:40.990 --> 00:12:42.860
but by going toe view,

00:12:42.860 --> 00:12:47.940
developer jobless could concern and we see that console over here.

00:12:47.940 --> 00:12:49.810
I can say now store.

00:12:49.810 --> 00:12:53.660
And that store is made out off these many functionalities.

00:12:53.660 --> 00:12:56.400
There is a dispatch function that they get state.

00:12:56.400 --> 00:12:58.650
There is a replace reducer.

00:12:58.650 --> 00:12:59.920
There's a subscript function.

00:12:59.920 --> 00:13:04.260
So currently we can have a look at what is there in the store by calling stored or get

00:13:04.260 --> 00:13:04.760
state.

00:13:04.760 --> 00:13:08.640
So store don't get state will give me the current values,

00:13:08.640 --> 00:13:14.950
which is we know and sham and know that we also have a dispatch function here where I can

00:13:14.950 --> 00:13:16.040
dispatch an action.

00:13:16.040 --> 00:13:17.850
And as we have seen earlier,

00:13:17.850 --> 00:13:24.210
action is an object with type as one of its property and probably data as another property

00:13:24.210 --> 00:13:24.210
.

00:13:24.210 --> 00:13:35.960
So let's create a variable car action one equals two is add name and then data is letter,

00:13:35.960 --> 00:13:37.010
for example,

00:13:37.010 --> 00:13:37.450
Miller.

00:13:37.450 --> 00:13:39.990
That's the new action.

00:13:39.990 --> 00:13:43.680
I can dispatch this action by typing stored our dispatch.

00:13:43.680 --> 00:13:46.520
And then I say action one press enter.

00:13:46.520 --> 00:13:48.130
It has been dispatched,

00:13:48.130 --> 00:13:50.980
and I have to go and check what is the current state.

00:13:50.980 --> 00:13:53.880
You will see that the name Miller has been upended.

00:13:53.880 --> 00:13:57.650
And the reason for that is whenever the action was dispatched,

00:13:57.650 --> 00:14:00.240
the reducer receives the current state,

00:14:00.240 --> 00:14:02.090
which contains thes two values,

00:14:02.090 --> 00:14:04.010
and the action will be dispatched,

00:14:04.010 --> 00:14:06.730
which consists off this structure.

00:14:06.730 --> 00:14:10.270
And then we say your switch action dot type,

00:14:10.270 --> 00:14:15.020
which matches with our name and were spreading the values from the current state,

00:14:15.020 --> 00:14:16.270
which is the northern sham.

00:14:16.270 --> 00:14:17.660
And then this is Miller,

00:14:17.660 --> 00:14:18.690
which is the new name.

00:14:18.690 --> 00:14:21.800
So a combination off these three names have been returned.

00:14:21.800 --> 00:14:25.220
The return values will be now kept as part of the store.

00:14:25.220 --> 00:14:25.920
Similarly,

00:14:25.920 --> 00:14:27.720
we can check if till it is working.

00:14:27.720 --> 00:14:29.800
And if I come here and create action,

00:14:29.800 --> 00:14:32.570
two equals toe type off.

00:14:32.570 --> 00:14:38.360
Delete name on data here this time corresponds to the index,

00:14:38.360 --> 00:14:39.260
and I can feel it.

00:14:39.260 --> 00:14:41.340
01 or two,

00:14:41.340 --> 00:14:42.580
which are the index's.

00:14:42.580 --> 00:14:43.940
I'm gonna supply one,

00:14:43.940 --> 00:14:46.540
which means the name at Index one.

00:14:46.540 --> 00:14:47.940
And then I pressed.

00:14:47.940 --> 00:14:48.540
Enter,

00:14:48.540 --> 00:14:49.960
I'd say your store Lord,

00:14:49.960 --> 00:14:51.230
dispatch off.

00:14:51.230 --> 00:14:53.740
Action to oppress Tender.

00:14:53.740 --> 00:14:58.020
This has been dispatched knife essays toward our get state.

00:14:58.020 --> 00:14:59.980
You'll see that the second name,

00:14:59.980 --> 00:15:00.690
which was Sean,

00:15:00.690 --> 00:15:01.850
has been deleted now.

00:15:01.850 --> 00:15:07.850
So all that I have to do is to call this stored or despatched function on click off this ad

00:15:07.850 --> 00:15:12.980
name and the store will now contain new names entered in the text boxes and that's going to

00:15:12.980 --> 00:15:13.750
the same thing.

00:15:13.750 --> 00:15:15.860
So that's come down here.

00:15:15.860 --> 00:15:16.660
It's great.

00:15:16.660 --> 00:15:19.350
A function called submitted handler,

00:15:19.350 --> 00:15:25.240
which is supposed to handle the form Submission on this is gonna be an event function.

00:15:25.240 --> 00:15:25.820
So I'll follow.

00:15:25.820 --> 00:15:27.540
Doesn't even as the perimeter.

00:15:27.540 --> 00:15:29.700
And the first thing that I'm gonna do is to say,

00:15:29.700 --> 00:15:32.380
DVD dot prevent different.

00:15:32.380 --> 00:15:38.450
This actually prevent from the form being submitted on the page being refreshed.

00:15:38.450 --> 00:15:45.390
Let's get the name from the textbooks that they constant need equals toe document are get

00:15:45.390 --> 00:15:48.880
element by idea off the dark value.

00:15:48.880 --> 00:15:54.190
So this part represents their textbooks were getting the value from there on the long.

00:15:54.190 --> 00:15:55.790
So with the new action,

00:15:55.790 --> 00:16:02.210
So it's advanced action to be dispatched is with the type off our underscore name.

00:16:02.210 --> 00:16:07.700
And then data is nothing with the name that we have collected from the textbooks and in

00:16:07.700 --> 00:16:09.610
orderto dispatch this action,

00:16:09.610 --> 00:16:13.050
we simply says toward our dispatch off action.

00:16:13.050 --> 00:16:17.760
So this is where the store will now be modified with the new state.

00:16:17.760 --> 00:16:19.160
After that,

00:16:19.160 --> 00:16:22.120
we also would like toa clear the value in the next post.

00:16:22.120 --> 00:16:27.120
This is what I'm gonna do and we just copy this part destitute.

00:16:27.120 --> 00:16:29.690
Assign an empty string as well.

00:16:29.690 --> 00:16:34.740
I'm gonna call the focused function to bring the crystal back to this particular textbooks

00:16:34.740 --> 00:16:34.740
.

00:16:34.740 --> 00:16:36.550
One last thing is toe.

00:16:36.550 --> 00:16:42.970
Assign this function as a event handler for the form I'm gonna say document dot Get element

00:16:42.970 --> 00:16:50.160
by ivy off a foreign name door on submit equals to submit.

00:16:50.160 --> 00:16:50.580
Handler.

00:16:50.580 --> 00:16:53.930
Say this.

00:16:53.930 --> 00:16:55.880
If I go back to the browser,

00:16:55.880 --> 00:16:59.830
I first check what is the store dot Get state return.

00:16:59.830 --> 00:17:01.770
So I would say there are two values.

00:17:01.770 --> 00:17:05.890
I'm gonna taking a new name here and then click on add name on,

00:17:05.890 --> 00:17:08.310
then come back here and then check the state.

00:17:08.310 --> 00:17:11.400
You'll see that killer has been added as a new name.

00:17:11.400 --> 00:17:15.080
When we are able toe our new names now,

00:17:15.080 --> 00:17:19.620
we should be able tow display the names on this list off names over here.

00:17:19.620 --> 00:17:20.300
For that,

00:17:20.300 --> 00:17:21.880
we already have a Uriel here.

00:17:21.880 --> 00:17:27.090
We just have to construct new light elements for every name and that has to be displayed

00:17:27.090 --> 00:17:27.810
over here.

00:17:27.810 --> 00:17:33.310
Let's create a new function called update list in adult function style,

00:17:33.310 --> 00:17:37.620
which doesn't take any parameters,

00:17:37.620 --> 00:17:41.530
but it's gonna create a list items for every name.

00:17:41.530 --> 00:17:43.700
First I'm gonna get the names,

00:17:43.700 --> 00:17:48.910
so I call it us Left names equals toe store dark get stage,

00:17:48.910 --> 00:17:56.620
Which gives me on the names and then they names dot map were you get one single made along

00:17:56.620 --> 00:17:59.100
with the index off the particular element.

00:17:59.100 --> 00:18:09.350
I'm gonna return your life with a class name off a list group item and then up in the name

00:18:09.350 --> 00:18:12.390
and then plus slash and light.

00:18:12.390 --> 00:18:17.810
So the malfunction returns an array of strengths where every stream is a lie.

00:18:17.810 --> 00:18:23.530
Slash alive along with the name Let's collect that as list equals two.

00:18:23.530 --> 00:18:30.310
But the listed that way I can say listed are join with an empty string to make it as a

00:18:30.310 --> 00:18:34.050
single string consisting off all the lights slash life.

00:18:34.050 --> 00:18:38.380
And this is what we may have to update our usual with some say,

00:18:38.380 --> 00:18:42.310
let list items it calls to Lister.

00:18:42.310 --> 00:18:47.380
Join now that we have the list items were to make this as the content off.

00:18:47.380 --> 00:18:48.140
Are you really?

00:18:48.140 --> 00:18:53.320
And are you will in the index HTML has an Islay off names list,

00:18:53.320 --> 00:19:02.940
so that's grabbed it using the document get element by idee names list dark in our html

00:19:02.940 --> 00:19:11.420
equals toe list items to verify this works are not that also stole this in the video scope

00:19:11.420 --> 00:19:12.960
on my savior window.

00:19:12.960 --> 00:19:18.260
Off off the lift equals toe the function off dead list.

00:19:18.260 --> 00:19:20.340
If I go back to the browser,

00:19:20.340 --> 00:19:22.020
we have the current state.

00:19:22.020 --> 00:19:24.730
And if I simply call off dead list function,

00:19:24.730 --> 00:19:27.410
it should actually update the names in our,

00:19:27.410 --> 00:19:30.380
um so to display this initially itself,

00:19:30.380 --> 00:19:32.530
we will call this function once.

00:19:32.530 --> 00:19:34.450
So I don't need this anymore over here.

00:19:34.450 --> 00:19:39.000
But I call this so which means if I say this and go back to the browser,

00:19:39.000 --> 00:19:40.980
I should see the initial names.

00:19:40.980 --> 00:19:43.380
But every time I click on the add name,

00:19:43.380 --> 00:19:45.880
the store is getting updated.

00:19:45.880 --> 00:19:48.220
But every time the stories updated,

00:19:48.220 --> 00:19:50.090
dysfunction is never being called.

00:19:50.090 --> 00:19:52.860
This is where we can register the update list,

00:19:52.860 --> 00:19:56.690
function to the store using the substrate function.

00:19:56.690 --> 00:19:58.000
Let's do that.

00:19:58.000 --> 00:19:59.280
Stole darts,

00:19:59.280 --> 00:20:00.260
subscribe,

00:20:00.260 --> 00:20:04.900
and then we supply the update dysfunction.

00:20:04.900 --> 00:20:06.370
Save this.

00:20:06.370 --> 00:20:07.930
Go back to the browser.

00:20:07.930 --> 00:20:08.140
Now,

00:20:08.140 --> 00:20:08.450
you see,

00:20:08.450 --> 00:20:09.670
if I type in a name here,

00:20:09.670 --> 00:20:14.350
all secure in our name and that name also has been added over here.

00:20:14.350 --> 00:20:18.700
And the reason for this is every time you type in a name and click on the art name function

00:20:18.700 --> 00:20:21.900
we dispatch in action called art Name,

00:20:21.900 --> 00:20:27.090
along with the newly typed name and that is received by the reducer along with the current

00:20:27.090 --> 00:20:32.480
state and the reducer updates the state and returns that back to the store and store has

00:20:32.480 --> 00:20:35.050
been registered with one function for update list.

00:20:35.050 --> 00:20:38.150
So the store takes the responsibility of calling my function.

00:20:38.150 --> 00:20:40.850
And every time my update list function is called,

00:20:40.850 --> 00:20:44.860
it just really lenders this list with all the names in the store.

00:20:44.860 --> 00:20:49.810
We can also provide the village options over here To do that.

00:20:49.810 --> 00:20:51.590
Let's go back over here.

00:20:51.590 --> 00:20:54.030
We have the l A plus name,

00:20:54.030 --> 00:20:54.550
etcetera.

00:20:54.550 --> 00:20:55.240
Over years,

00:20:55.240 --> 00:21:00.400
I will just add some more content on just before the name I would like to either for 10

00:21:00.400 --> 00:21:00.830
years.

00:21:00.830 --> 00:21:01.350
I'm gonna say it.

00:21:01.350 --> 00:21:04.290
Plus in single ports in Britain,

00:21:04.290 --> 00:21:12.150
probably a class off Bt and Bt and danger on click equals toe.

00:21:12.150 --> 00:21:15.330
Let's assume a function called delete need,

00:21:15.330 --> 00:21:20.390
which is supposed to be given an index on that index is nothing but this index we have

00:21:20.390 --> 00:21:21.600
received over here.

00:21:21.600 --> 00:21:30.110
So we respect this over and then supply that index followed by the buttons closing back and

00:21:30.110 --> 00:21:36.550
then probably a an ex mont using M percent times slash bottom.

00:21:36.550 --> 00:21:40.720
So if I go back after saving,

00:21:40.720 --> 00:21:44.190
you'll see that every name now has a partner.

00:21:44.190 --> 00:21:44.930
Also,

00:21:44.930 --> 00:21:50.200
we can also give a little of margin over here on the right Say on that can be done by going

00:21:50.200 --> 00:21:50.890
toe indexed.

00:21:50.890 --> 00:21:53.560
RCs says we're already given the Martin top.

00:21:53.560 --> 00:21:55.410
It also gave margin,

00:21:55.410 --> 00:21:56.140
right?

00:21:56.140 --> 00:21:57.620
Also 10 pixels.

00:21:57.620 --> 00:21:59.570
And if I go back to the closer,

00:21:59.570 --> 00:22:01.690
you see that there is a nice cap.

00:22:01.690 --> 00:22:07.700
But of course the button doesn't work because we don't have this daily name function and

00:22:07.700 --> 00:22:11.440
notice that the delete operation happens in the browser,

00:22:11.440 --> 00:22:16.540
which means I cannot simply write a local function over here because the local functions

00:22:16.540 --> 00:22:18.780
will not be exposed in the browser.

00:22:18.780 --> 00:22:21.710
Just like how we added this Windows store.

00:22:21.710 --> 00:22:26.350
We also have to expose this delete function as a part of window.

00:22:26.350 --> 00:22:31.690
So I'm gonna do one last thing here as a widow off Dick.

00:22:31.690 --> 00:22:37.540
Name is going to be a function which receives the index because we're supplying that index

00:22:37.540 --> 00:22:38.260
over here,

00:22:38.260 --> 00:22:43.920
and we just had a clear and action on respects the same.

00:22:43.920 --> 00:22:47.160
So I'm gonna say const action equals toe.

00:22:47.160 --> 00:22:51.500
I didn't need on the data in this case.

00:22:51.500 --> 00:22:56.660
Is the index on Let's do a stored or scratch off actions?

00:22:56.660 --> 00:23:02.600
See this Go back to the closer and then if I type in a new name,

00:23:02.600 --> 00:23:03.140
he'll say,

00:23:03.140 --> 00:23:03.800
for example,

00:23:03.800 --> 00:23:07.090
Kiran or remission or perish.

00:23:07.090 --> 00:23:08.630
All of them have been added,

00:23:08.630 --> 00:23:12.020
but I can pick and choose to delete anyone off them.

00:23:12.020 --> 00:23:13.150
When I click on this,

00:23:13.150 --> 00:23:16.740
the index corresponding to kill in which is 012 will be supplied.

00:23:16.740 --> 00:23:21.760
We can also inspect the same before taking the village by taking this addle and pointing it

00:23:21.760 --> 00:23:24.100
over here and you will see now it says,

00:23:24.100 --> 00:23:25.510
delete name off,

00:23:25.510 --> 00:23:26.040
too.

00:23:26.040 --> 00:23:26.940
And the same thing.

00:23:26.940 --> 00:23:28.080
If I goto marriage,

00:23:28.080 --> 00:23:28.710
for example,

00:23:28.710 --> 00:23:30.080
it says delete name off.

00:23:30.080 --> 00:23:30.540
Four.

00:23:30.540 --> 00:23:33.010
That's the index off that particular name.

00:23:33.010 --> 00:23:36.760
So let's go and delete killer and not that it is deleted.

00:23:36.760 --> 00:23:38.920
All we're doing is we're dispatching.

00:23:38.920 --> 00:23:45.330
An action on the store gets modified and the changes to the stores A state automatically

00:23:45.330 --> 00:23:50.170
triggers the update list function because we're subscribe to that event.

00:23:50.170 --> 00:23:52.130
So every time I click on village,

00:23:52.130 --> 00:23:53.790
the name has been deleted now,

00:23:53.790 --> 00:23:58.160
So this is how relaxed does the state management between the U.

00:23:58.160 --> 00:23:58.270
N.

00:23:58.270 --> 00:23:59.070
Components

