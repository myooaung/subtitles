WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.740
So far we j unit test using a unit and

00:00:04.740 --> 00:00:08.400
mockito we have called the service

00:00:08.400 --> 00:00:10.740
impls methods and we have even mocked

00:00:10.740 --> 00:00:13.740
out the dao but we haven't set the dao

00:00:13.740 --> 00:00:16.710
on to the service yet so in this lecture

00:00:16.710 --> 00:00:19.050
we will use the spring and spring test

00:00:19.050 --> 00:00:21.660
annotations to do dependency injection

00:00:21.660 --> 00:00:25.410
and we will complete our test we will do

00:00:25.410 --> 00:00:28.260
it in three steps will first move the

00:00:28.260 --> 00:00:30.330
service to a field level and then use

00:00:30.330 --> 00:00:32.759
the spring and mockito annotations on it

00:00:32.759 --> 00:00:34.620
and then we will mark this ticket

00:00:34.620 --> 00:00:37.410
service impl test itself with two of

00:00:37.410 --> 00:00:39.239
the spring annotations 1 j unit

00:00:39.239 --> 00:00:41.010
annotation and one then one spring

00:00:41.010 --> 00:00:44.160
annotation so before we do that let me

00:00:44.160 --> 00:00:46.410
rename this test method to a meaningful

00:00:46.410 --> 00:00:50.309
name let's call it buy tickets should

00:00:50.309 --> 00:00:56.879
return a valid value if I run this test

00:00:56.879 --> 00:01:00.930
right now right click run as a unit it

00:01:00.930 --> 00:01:01.530
should throw a nullpointerexception

00:01:01.530 --> 00:01:04.379
there you go it throws a

00:01:04.379 --> 00:01:06.060
nullpointerexception because we haven't

00:01:06.060 --> 00:01:09.420
set this Dao onto the service and the

00:01:09.420 --> 00:01:11.520
service when it tries to use this DAO

00:01:11.520 --> 00:01:14.010
get DAO it gets a null and it tries to

00:01:14.010 --> 00:01:16.470
throw or when it tries to call the

00:01:16.470 --> 00:01:18.030
create ticket exception it is throwing a

00:01:18.030 --> 00:01:20.310
nullpointerexception so go back to the

00:01:20.310 --> 00:01:23.310
test let's move this service hit control

00:01:23.310 --> 00:01:26.340
one on this service here convert this

00:01:26.340 --> 00:01:28.080
local variable to a field you will see

00:01:28.080 --> 00:01:32.460
in a second why I am doing it and on top

00:01:32.460 --> 00:01:35.909
of it use the @auto wild annotation

00:01:35.909 --> 00:01:38.070
from spring so we are going to wire this

00:01:38.070 --> 00:01:41.610
service through spring and we can delete

00:01:41.610 --> 00:01:43.200
this line where we are creating the

00:01:43.200 --> 00:01:47.250
service instance so even our test we are

00:01:47.250 --> 00:01:48.899
doing the dependency injection on our

00:01:48.899 --> 00:01:51.600
test using spring so hit ctrl d remove

00:01:51.600 --> 00:01:53.970
that service instance creation another

00:01:53.970 --> 00:01:58.170
annotation this is from mockito is at

00:01:58.170 --> 00:02:03.270
inject mocks so mockito allows you to

00:02:03.270 --> 00:02:06.180
inject all the dependencies using this

00:02:06.180 --> 00:02:08.539
so instead of we saying

00:02:08.539 --> 00:02:11.480
service. set we can inject the mocked out

00:02:11.480 --> 00:02:14.420
dao into this service created by

00:02:14.420 --> 00:02:20.359
spring at runtime using inject mocks you

00:02:20.359 --> 00:02:22.219
have two more annotations to go at the

00:02:22.219 --> 00:02:24.950
class level we need to tell this test

00:02:24.950 --> 00:02:26.720
that it should use the spring

00:02:26.720 --> 00:02:29.030
configuration it is not a simple j unit

00:02:29.030 --> 00:02:33.200
test so first we will do run with will

00:02:33.200 --> 00:02:35.000
configure the spring j unit 4 runner

00:02:35.000 --> 00:02:36.920
instead of the default j unit runner

00:02:36.920 --> 00:02:42.019
junit for class runner dot class so

00:02:42.019 --> 00:02:44.599
this again comes from spring hyphen test

00:02:44.599 --> 00:02:52.040
jar file at context configuration this

00:02:52.040 --> 00:02:54.169
again is from the spring hyphen test

00:02:54.169 --> 00:02:58.310
project or jar file here we are going to

00:02:58.310 --> 00:03:00.139
tell the springs unit for class runner

00:03:00.139 --> 00:03:02.840
where our spring configuration file is

00:03:02.840 --> 00:03:05.389
so it is the application hyphen context

00:03:05.389 --> 00:03:06.799
dot xml which is on the

00:03:06.799 --> 00:03:11.239
classpath because it is under SRC main

00:03:11.239 --> 00:03:13.669
resources this folder is on maven

00:03:13.669 --> 00:03:16.729
classpath maven project class path let's

00:03:16.729 --> 00:03:19.639
go back to our test this context

00:03:19.639 --> 00:03:20.989
configuration has an attribute called

00:03:20.989 --> 00:03:26.629
locations control space you can pass

00:03:26.629 --> 00:03:28.459
multiple values to these locations using

00:03:28.459 --> 00:03:30.560
flower braces but in our case we have

00:03:30.560 --> 00:03:33.590
only one configuration file and in here

00:03:33.590 --> 00:03:36.979
class path colon the file name

00:03:36.979 --> 00:03:45.079
application hyphen context dot XML we

00:03:45.079 --> 00:03:47.329
are all set except for we haven't

00:03:47.329 --> 00:03:49.190
stubbed out the method on the mock doubt

00:03:49.190 --> 00:03:56.389
object so take the DAO mockito dot when

00:03:56.389 --> 00:04:00.049
now that mockito would have been imported

00:04:00.049 --> 00:04:02.720
here let's make it a static import let's

00:04:02.720 --> 00:04:04.129
import all the static methods on

00:04:04.129 --> 00:04:08.090
mockito mockito dot star so import

00:04:08.090 --> 00:04:10.370
static all the static methods on the

00:04:10.370 --> 00:04:13.819
mockito class the method call is we can

00:04:13.819 --> 00:04:16.070
take out mockito here now we can directly

00:04:16.070 --> 00:04:19.940
use all the static methods let me add

00:04:19.940 --> 00:04:21.560
some lines at the end so that you can

00:04:21.560 --> 00:04:22.550
see it clearly

00:04:22.550 --> 00:04:29.030
when dAO dot create ticket Here I am

00:04:29.030 --> 00:04:31.520
going to use any any ticket let it be

00:04:31.520 --> 00:04:34.340
any parameter we can also say any ticket

00:04:34.340 --> 00:04:46.280
dot plus so it's up to us dot we fix

00:04:46.280 --> 00:04:48.919
this by hitting control one import the

00:04:48.919 --> 00:04:54.289
ticket first and then dot then return

00:04:54.289 --> 00:04:59.810
one so we have stubbed out the method

00:04:59.810 --> 00:05:02.900
when the service calls the DAO the

00:05:02.900 --> 00:05:04.520
mocked out DAO object it's going to

00:05:04.520 --> 00:05:07.729
return one and we are all set now let's

00:05:07.729 --> 00:05:09.590
see what happens to our test right click

00:05:09.590 --> 00:05:17.840
run as j unit test it's all green so we

00:05:17.840 --> 00:05:20.270
have done a good job our test has passed

00:05:20.270 --> 00:05:22.789
I will explain each and every annotation

00:05:22.789 --> 00:05:24.919
one more time and the entire flow in the

00:05:24.919 --> 00:05:27.550
next lecture.

