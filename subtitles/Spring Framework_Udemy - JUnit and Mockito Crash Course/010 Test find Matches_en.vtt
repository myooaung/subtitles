WEBVTT

0
00:00.090 --> 00:06.870
Last method under test is the find matches method that receives a user account ID. It fetches the

1
00:06.870 --> 00:12.930
user account for that ID using the user repo dot find by ID, and then it invokes find matches on

2
00:12.930 --> 00:13.760
the user repo.

3
00:13.800 --> 00:20.330
But passing in the age city country and ID from this user account to find the matches so will have

4
00:20.340 --> 00:24.300
to stub out or mock out the find by ID call undefined matches.

5
00:24.480 --> 00:28.560
Call on the user repo to test this find matches method, go to the test.

6
00:29.420 --> 00:30.870
Add a new test void

7
00:33.150 --> 00:40.170
test find matches is the method mark it with @ test annotation.

8
00:42.080 --> 00:48.170
Start by invoking the method under test controller dot find matches, pass in the ID one two three

9
00:48.410 --> 00:53.960
control one assigned statement to a local variable, call it output matches will do the assertions

10
00:53.960 --> 00:54.470
later on.

11
00:54.680 --> 01:01.760
Let's start stubbing out when user account repository Dot find by

12
01:01.760 --> 01:05.670
ID is the first method that needs to be stubbed out with one two three.

13
01:05.840 --> 01:09.920
Outside the brackets, then return back optional

14
01:09.920 --> 01:13.700
dot off new user account.

15
01:14.510 --> 01:15.980
Put the end semicolon.

16
01:15.980 --> 01:17.870
Select that new user account.

17
01:19.370 --> 01:25.100
Control one, extract a local variable call it user account, set some fields on it, user account dot

18
01:25.100 --> 01:34.070
set id one two three user account dot set age, say 20 user account dot city I am setting the fields which

19
01:34.070 --> 01:35.680
are required to find the matches.

20
01:36.710 --> 01:37.310
Austin.

21
01:38.430 --> 01:43.140
And finally, user account Dot set country within double quotes

22
01:43.350 --> 01:44.340
USA.

23
01:45.730 --> 01:46.780
So that's the first step.

24
01:47.170 --> 01:56.580
Then we do the second one, which is the find matches when user account repository Dot Find Matches

25
01:56.650 --> 01:59.150
is invoked with the same age

26
01:59.170 --> 02:02.740
What we have set here, which is 20 city, is.

27
02:03.250 --> 02:03.940
Austin.

28
02:05.240 --> 02:16.340
And country is U.S.A. and finally, the id is one two three dot then return back a new array list

29
02:17.210 --> 02:21.470
of user accounts user account.

30
02:23.210 --> 02:24.170
Is the type.

31
02:24.680 --> 02:28.010
Let me take this to the next line to make it a little more readable.

32
02:30.210 --> 02:37.260
So they're returning back and new ArrayList off user accounts hit control, one extract, a local variable.

33
02:38.520 --> 02:43.470
And you can move this data up top so that all the stubbing is in one place and all the data is in one

34
02:43.470 --> 02:43.860
place.

35
02:47.170 --> 02:49.360
And we can add a few things here.

36
02:49.390 --> 02:52.600
So instead of a value call, this user accounts.

37
02:53.530 --> 02:55.510
Copy that and paste it right there as well.

38
02:55.510 --> 03:00.080
User accounts add a couple of user accounts to this matches that come back.

39
03:00.300 --> 03:08.050
User account dot add new user account user accounts dot

40
03:08.060 --> 03:10.930
Add new user account.

41
03:11.710 --> 03:15.970
I'm adding a couple of empty user accounts that's good enough for our testing.

42
03:15.970 --> 03:20.320
You can optionally add data to these user accounts and even do sessions at that level.

43
03:20.350 --> 03:22.240
But that is not required here.

44
03:22.690 --> 03:27.130
So we have stubbed out the two method calls successfully are we have mocked the calls.

45
03:27.460 --> 03:31.240
Now we are also invoking controller dot find matches the method under test.

46
03:31.390 --> 03:33.070
It's time to do the verifications.

47
03:33.340 --> 03:40.560
Verify that user account repository user account repository outside the brackets.

48
03:40.570 --> 03:43.090
Dot Find By ID is really invoked with ID

49
03:43.180 --> 03:52.570
One two three Also Verify User account repository Dot Find Matches is invoked with the exact data that

50
03:52.570 --> 03:55.570
we are passing in right here and we were stubbed out.

51
03:56.600 --> 04:03.440
That is the data we should use right here as well, each city, country and ID. Then you can do the

52
04:03.440 --> 04:10.130
assertions, assert not null the output matches that comes back eventually from the method under test.

53
04:10.400 --> 04:11.990
This guy is not null.

54
04:12.290 --> 04:13.310
Also assert.

55
04:14.550 --> 04:21.420
Equals expected size two, because we have added two user accounts to this array list

56
04:22.680 --> 04:30.150
Output matches dot size, those two assertions are good enough, so we are testing the find matches

57
04:30.150 --> 04:32.190
method by stubbing out the two method calls.

58
04:33.360 --> 04:38.400
The first method call returns a single user account, which will have this data that will be used internally

59
04:38.760 --> 04:39.180
here.

60
04:40.390 --> 04:44.380
When this call happens, this user account comes back, what are we have stubbed that data will have

61
04:44.380 --> 04:50.110
their age 20, said Austin Country as USA and ID one two three that will be used to invoke the find matches

62
04:50.110 --> 04:56.050
method and the find matches method is invoke when we have stubbed  out that return back a list which

63
04:56.050 --> 04:59.110
will have two user accounts in it to match us.

64
04:59.320 --> 05:01.780
And then we are verifying that these calls really happen.

65
05:02.050 --> 05:05.570
And also, we are asserting it for the right values, right click

66
05:05.590 --> 05:08.200
run as JUnit test.

67
05:10.100 --> 05:14.480
And we should see everything green if it goes as planned, there we go.

68
05:14.900 --> 05:18.440
We have completed the testing, all the five methods have tests

69
05:18.440 --> 05:18.740
Now.