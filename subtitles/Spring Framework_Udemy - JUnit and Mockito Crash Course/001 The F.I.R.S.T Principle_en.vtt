WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.319
In this best practices lecture, I will introduce you to the first principle

00:00:04.390 --> 00:00:09.059
Which is a very popular principle in the agile software testing world?

00:00:09.700 --> 00:00:11.700
Wherein it is an acronym, wherein F

00:00:11.889 --> 00:00:15.749
Stands for fast unittest I for independent test

00:00:16.600 --> 00:00:18.600
R for repeatable test

00:00:18.970 --> 00:00:20.410
S for

00:00:20.410 --> 00:00:21.699
self-validating test and

00:00:21.699 --> 00:00:24.389
T for timely unit tests

00:00:25.630 --> 00:00:29.609
So we should have fastest always, so if we go back to our eclipse

00:00:30.310 --> 00:00:31.570
if we

00:00:31.570 --> 00:00:36.630
Run our tests by right-clicking on the test package or the test source folder

00:00:37.239 --> 00:00:39.239
runas junit test

00:00:40.480 --> 00:00:44.549
All our tests run and the results are displayed within milliseconds

00:00:45.550 --> 00:00:47.550
That is how unittest should be

00:00:48.579 --> 00:00:55.589
So that we can repeat the test again and again and get the feedback right away that is very important when it comes to

00:00:55.719 --> 00:01:02.038
production code we can't wait for the bugs to clip in by taking a lot of time for running the unittest

00:01:02.890 --> 00:01:07.519
Second test should be independent that is none of our test here

00:01:08.280 --> 00:01:12.900
Test method should depend on another test method for its data set up

00:01:13.630 --> 00:01:20.759
If if that is the case if one test fails all the tests that depend on that particular test will fail

00:01:20.979 --> 00:01:27.209
So we should never ever depend on other test methods for a particular test method to work

00:01:28.810 --> 00:01:30.810
3rd are for repeatable

00:01:31.659 --> 00:01:35.429
We should be able to run these tests across environments that is

00:01:35.950 --> 00:01:38.159
Our development machine QA environment

00:01:38.740 --> 00:01:45.240
Staging production whenever we want. We should be able to quickly run them and see the results right away

00:01:45.280 --> 00:01:47.489
So test should be repeatable

00:01:49.119 --> 00:01:56.489
4th S for self validating test should either faith or succeed. It is it should be a

00:01:57.130 --> 00:02:04.110
Boolean result we should not be writing the test results into some log files and then reading those log files

00:02:04.329 --> 00:02:06.989
Processing the results and all that which is very time-consuming

00:02:07.509 --> 00:02:08.950
always remember that

00:02:08.950 --> 00:02:10.869
That should be

00:02:10.869 --> 00:02:14.309
Should yield boolean results either failed or success

00:02:15.519 --> 00:02:17.019
finally

00:02:17.019 --> 00:02:20.879
the last T in first stands for timely

00:02:20.879 --> 00:02:27.359
We should always be not lazy and write our test as soon as we write any code or even before

00:02:27.610 --> 00:02:30.449
We write any production called Following TDD

00:02:31.569 --> 00:02:37.919
Should always write tests on time so that the code we write is also off good quality?

00:02:38.170 --> 00:02:41.159
To summarize, in this lecture we have learnt the first

00:02:41.590 --> 00:02:47.340
principle of agile software testing wherein F stands for fast unittest then we should

00:02:47.829 --> 00:02:50.099
Be able to run our tests really quick

00:02:50.859 --> 00:02:54.929
Independent test should not depend on other test methods to work

00:02:55.780 --> 00:03:01.799
Repeatable we should be able to repeat and run the test across environments that is how things should be coded

00:03:02.290 --> 00:03:05.640
self validating that is the result should either be

00:03:05.640 --> 00:03:10.829
failed or success and not spend a lot of time to process the results?

00:03:11.500 --> 00:03:17.519
Timely, we should always right tests, and that too before we write our production as much as possible.

