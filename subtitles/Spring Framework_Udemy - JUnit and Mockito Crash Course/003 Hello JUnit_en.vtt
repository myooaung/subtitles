WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.639
In this lecture you will write your first

00:00:02.639 --> 00:00:06.150
JUnit tests to do that launched the

00:00:06.150 --> 00:00:09.480
eclipse ide select a workspace once you are

00:00:09.480 --> 00:00:12.450
on the eclipse dashboard go to the file

00:00:12.450 --> 00:00:17.789
menu, say new java project. Give your project

00:00:17.789 --> 00:00:19.170
name let's call it

00:00:19.170 --> 00:00:24.720
hello Junit click finish by default

00:00:24.720 --> 00:00:26.939
eclipse creates only one source folder

00:00:26.939 --> 00:00:30.150
called SRC. Will be creating another

00:00:30.150 --> 00:00:31.650
source folder by right-clicking on

00:00:31.650 --> 00:00:35.520
the project say new source folder name it

00:00:35.520 --> 00:00:38.040
test this is the first step and we are

00:00:38.040 --> 00:00:39.780
doing test-driven development and we're

00:00:39.780 --> 00:00:41.489
writing unit tests which we always

00:00:41.489 --> 00:00:43.410
should the first step is to create a

00:00:43.410 --> 00:00:45.899
source folder called test and we will be

00:00:45.899 --> 00:00:49.440
placing all our test classes for the

00:00:49.440 --> 00:00:53.699
source code in src into the test folder

00:00:53.699 --> 00:00:55.379
The requirement we have on hand is very

00:00:55.379 --> 00:00:58.199
simple we need to create a greeting

00:00:58.199 --> 00:01:00.629
class which will have one public method

00:01:00.629 --> 00:01:03.180
which will return which will take a name

00:01:03.180 --> 00:01:05.250
as input parameters and it i'll return hello

00:01:05.250 --> 00:01:09.900
plus that name. Right click on SRC folder say

00:01:09.900 --> 00:01:15.210
new interface call it greeting always go

00:01:15.210 --> 00:01:16.380
to interfaces

00:01:16.380 --> 00:01:19.890
select a package

00:01:19.890 --> 00:01:23.189
com.bharath.trainings.junit you can do

00:01:23.189 --> 00:01:26.100
whatever package name you want hit finish

00:01:26.100 --> 00:01:30.329
In this interface will have one public

00:01:30.329 --> 00:01:36.270
method which is string greet takes a

00:01:36.270 --> 00:01:42.150
string as well name. let's create

00:01:42.150 --> 00:01:43.770
implementation class right click on the

00:01:43.770 --> 00:01:47.700
package say new class

00:01:47.700 --> 00:01:52.950
greetingimpl click on the add button

00:01:52.950 --> 00:01:56.159
type in greeting to select the interface

00:01:56.159 --> 00:02:00.479
for our class select it ,hit ok click on

00:02:00.479 --> 00:02:02.850
finish. We have the default

00:02:02.850 --> 00:02:05.369
implementation to move this to do line

00:02:05.369 --> 00:02:08.009
by hitting control D and this method

00:02:08.009 --> 00:02:12.720
will simply return hello space

00:02:12.720 --> 00:02:18.840
plus the input parameter which is name

00:02:18.840 --> 00:02:20.730
Now to test this method we're going to write

00:02:20.730 --> 00:02:23.190
a test class created as class create one

00:02:23.190 --> 00:02:25.860
test method which will assert for this

00:02:25.860 --> 00:02:27.780
result hello and then the name which we

00:02:27.780 --> 00:02:30.900
pass-in to create your first junit right

00:02:30.900 --> 00:02:33.510
click on the implementation class say New

00:02:33.510 --> 00:02:38.640
junit test case if you don't see this

00:02:38.640 --> 00:02:40.560
option here go to other and you will

00:02:40.560 --> 00:02:45.180
find it select the junit test case option

00:02:45.180 --> 00:02:47.310
by default eclipse chooses your class name

00:02:47.310 --> 00:02:50.040
and it apends it with a test for your

00:02:50.040 --> 00:02:52.740
test class which is a good convention

00:02:52.740 --> 00:02:55.020
the package name is also same as the package

00:02:55.020 --> 00:02:57.060
name you have for your source class

00:02:57.060 --> 00:03:00.150
the important piece here is the source

00:03:00.150 --> 00:03:03.090
folder instead of src will change it

00:03:03.090 --> 00:03:05.370
to test when you follow that we have

00:03:05.370 --> 00:03:09.360
created hit finish eclipse prompts you to

00:03:09.360 --> 00:03:13.290
add junit for library to your build path

00:03:13.290 --> 00:03:14.640
hit okay

00:03:14.640 --> 00:03:17.220
eclipse will add the junit for jar to your

00:03:17.220 --> 00:03:22.380
class path, so here is your test that

00:03:22.380 --> 00:03:25.290
eclipse has generated, it has imported the static

00:03:25.290 --> 00:03:27.060
assert statements which we can use from

00:03:27.060 --> 00:03:31.200
the assert class and there is one test

00:03:31.200 --> 00:03:32.700
method called test

00:03:32.700 --> 00:03:36.330
let's rename it let's call it greet

00:03:36.330 --> 00:03:46.380
should return a valid output give your

00:03:46.380 --> 00:03:49.680
test very meaningful names so that any

00:03:49.680 --> 00:03:52.200
developer who reads through your test should understand

00:03:52.200 --> 00:03:54.810
what the test is exactly its a great

00:03:54.810 --> 00:03:57.480
way of documenting your code now if i

00:03:57.480 --> 00:04:00.060
run this test by right-clicking on this

00:04:00.060 --> 00:04:06.150
class go to run as junit our test will fail

00:04:06.150 --> 00:04:09.600
as you can see this is the junit runner

00:04:09.600 --> 00:04:13.049
inside eclipse and error we can see here

00:04:13.049 --> 00:04:14.760
in the failure trace under the failure

00:04:14.760 --> 00:04:17.430
race it says not yet implemented this is coming

00:04:17.430 --> 00:04:19.769
from our fail method that we are calling

00:04:19.769 --> 00:04:23.789
here from the assert from the junit API hit control

00:04:23.789 --> 00:04:26.030
D remove that fail method

00:04:26.030 --> 00:04:30.110
start writing our test by creating a new

00:04:30.110 --> 00:04:35.900
instance or greetingimpl assign

00:04:35.900 --> 00:04:39.139
this to greeting interface object

00:04:39.139 --> 00:04:45.500
greeting Greeting.greet

00:04:45.500 --> 00:05:00.110
passin junit as the parameter here find

00:05:00.110 --> 00:05:01.880
assign this statement to a variable by  hitting

00:05:01.880 --> 00:05:06.080
ctrl 1 assign statement to new local

00:05:06.080 --> 00:05:10.700
variable let's call it results now let's

00:05:10.700 --> 00:05:15.770
assert first assert i'm going to do is assert

00:05:15.770 --> 00:05:18.800
not null to see if this result is not

00:05:18.800 --> 00:05:21.410
null before we do any other assersions.

00:05:21.410 --> 00:05:24.080
the second and the last assert i'm going

00:05:24.080 --> 00:05:26.060
to do here is to compare

00:05:26.060 --> 00:05:29.479
the results that are coming back with the

00:05:29.479 --> 00:05:31.580
results we are expecting asset equals

00:05:31.580 --> 00:05:34.880
result goes in as the second parameter

00:05:34.880 --> 00:05:37.430
the actual goes in on the right the

00:05:37.430 --> 00:05:52.700
expected is junit or hello junit now to

00:05:52.700 --> 00:05:54.380
re-run this test you can right-click

00:05:54.380 --> 00:05:57.860
here in the test window or the junit

00:05:57.860 --> 00:06:01.789
window and click run, so everything is green

00:06:01.789 --> 00:06:04.130
we don't see any failure trace anymore

00:06:04.130 --> 00:06:06.320
to make this test fail I can simply

00:06:06.320 --> 00:06:09.950
remove this junit piece here save it re-run

00:06:09.950 --> 00:06:14.090
it failed and that failure trace clearly

00:06:14.090 --> 00:06:18.050
shows to double-click on it expected

00:06:18.050 --> 00:06:18.800
is hello

00:06:18.800 --> 00:06:20.780
but actually what came back is hello

00:06:20.780 --> 00:06:23.870
Junit its that simple to write a junit

00:06:23.870 --> 00:06:27.830
test create a test folder  right click

00:06:27.830 --> 00:06:29.840
on your implementation class create new

00:06:29.840 --> 00:06:32.660
junit test case then give your method a

00:06:32.660 --> 00:06:35.810
meaningful name and call the actual

00:06:35.810 --> 00:06:37.789
method under test by creating an

00:06:37.789 --> 00:06:39.420
instance of your class and

00:06:39.420 --> 00:06:42.840
then use the assert statements to assert the

00:06:42.840 --> 00:06:46.620
actual results versus the results

00:06:46.620 --> 00:06:49.490
that you are expecting.

