WEBVTT
Kind: captions
Language: en

00:00:00.355 --> 00:00:02.835
From this lecture you will learn

00:00:02.835 --> 00:00:05.475
what a unit testing framework is

00:00:05.475 --> 00:00:07.785
and why JUnit is so popular.

00:00:08.665 --> 00:00:11.315
any unit testing framework gives us three

00:00:11.315 --> 00:00:12.455
things that is

00:00:12.905 --> 00:00:15.865
1.An easy to use API

00:00:15.865 --> 00:00:18.535
to write unit.

00:00:18.535 --> 00:00:19.045
 

00:00:19.045 --> 00:00:22.235
2. different ways to compare or assert the

00:00:22.235 --> 00:00:23.605
actual results

00:00:23.915 --> 00:00:26.875
that are returned from the methods and the

00:00:26.875 --> 00:00:28.125
results we are expecting

00:00:28.565 --> 00:00:29.565
thirdly

00:00:30.585 --> 00:00:31.725
a way to run

00:00:32.535 --> 00:00:35.405
and report out the results, both the success

00:00:35.405 --> 00:00:38.215
as well as the failures in a developer friendly

00:00:38.215 --> 00:00:39.565
fashion.

00:00:40.945 --> 00:00:43.375
Junit provides these three.

00:00:44.285 --> 00:00:46.075
Starting with JUnit3

00:00:47.355 --> 00:00:50.335
We had to extend a test case class

00:00:50.335 --> 00:00:53.505
All our test classes should extend test case class

00:00:53.745 --> 00:00:56.465
and all the methods should follow a naming convention

00:00:56.465 --> 00:00:59.135
certain naming convention for it to work

00:00:59.135 --> 00:01:01.815
But JUnit4 removes all that

00:01:01.815 --> 00:01:04.835
and makes our job a lot easier by providing

00:01:04.835 --> 00:01:06.975
easy to use annotations.

00:01:07.875 --> 00:01:11.115
First annotation is the test annotation

00:01:11.125 --> 00:01:14.265
which we used to mark each and every test method with.

00:01:14.265 --> 00:01:15.265
 

00:01:17.685 --> 00:01:20.605
The @Before annotation is used to mark our setup

00:01:20.605 --> 00:01:23.625
methods where-in will be creating all the objects

00:01:23.625 --> 00:01:26.345
that we need for our test and all the data that we want to

00:01:26.345 --> 00:01:29.345
setup for a particular test will

00:01:29.345 --> 00:01:32.415
put that in a method and mark that method with the

00:01:32.415 --> 00:01:33.865
@Before annotation.

00:01:34.605 --> 00:01:37.565
Any method that is marked with @Beforen annotation

00:01:37.565 --> 00:01:40.585
Will be run before each test method

00:01:40.585 --> 00:01:42.605
that we write in a test class.

00:01:43.845 --> 00:01:46.665
Similarly any method that we mark with

00:01:46.955 --> 00:01:48.375
@After annotation will be run

00:01:48.895 --> 00:01:52.375
after every test method.

00:01:52.635 --> 00:01:55.765
So will be  doing all the setup in the methods marked @Before

00:01:55.765 --> 00:01:58.885
and the clean-up in the methods marked with

00:01:58.885 --> 00:02:01.815
@After so that every test method  will have

00:02:01.815 --> 00:02:03.605
clean data or objects.

00:02:05.305 --> 00:02:08.315
As the name itself says the @Before class annotation

00:02:08.315 --> 00:02:11.325
so we mark a method with this annotation

00:02:11.325 --> 00:02:13.815
that method will be run only once for the entire

00:02:13.815 --> 00:02:15.855
test class right at the beginning.

00:02:18.295 --> 00:02:19.295
Last

00:02:19.515 --> 00:02:22.725
I don't recommend using this annotation but if you mark

00:02:22.725 --> 00:02:25.775
your test with this annotation those test will be

00:02:25.775 --> 00:02:28.685
ignored when you run them from your ides

00:02:28.685 --> 00:02:31.435
or when you run them from your build tools like Maven

00:02:31.435 --> 00:02:34.625
or ANT those tests will be ignored.

00:02:37.415 --> 00:02:40.605
JUnit also provides easy to use

00:02:40.605 --> 00:02:43.195
static methods in the

00:02:43.495 --> 00:02:46.465
assert class which we can use to

00:02:46.465 --> 00:02:49.375
assert the expected results versus the actual

00:02:49.375 --> 00:02:52.205
results that come back from the methods.For example,

00:02:53.835 --> 00:02:55.435
the assertNotNull

00:02:56.035 --> 00:02:59.415
will take an object and if that object is null

00:02:59.415 --> 00:03:01.895
that assertion will fail right there

00:03:01.895 --> 00:03:03.585
and our test will also fail.

00:03:03.905 --> 00:03:06.905
Similarly, the assertEquals checks for the

00:03:06.905 --> 00:03:09.265
values of two objects.

00:03:10.395 --> 00:03:13.365
The assertSame checks for the references of

00:03:13.365 --> 00:03:16.365
two objects. There are several other assertion

00:03:16.365 --> 00:03:19.115
methods on in the assertAPI

00:03:19.115 --> 00:03:21.045
which you can play around with to compare the

00:03:21.045 --> 00:03:24.135
actual result versus the expected results.

00:03:24.945 --> 00:03:26.875
Finally, a way to run our test

00:03:26.875 --> 00:03:29.235
and report the results.

00:03:29.235 --> 00:03:32.095
JUnit provides a BlockJUnit4ClassRunner

00:03:32.095 --> 00:03:35.145
which is very easy

00:03:35.145 --> 00:03:38.345
to use.We run this from command line pass our test classes

00:03:38.345 --> 00:03:41.465
as a command line argument to this class

00:03:41.465 --> 00:03:44.325
and this class will scan through our test classes

00:03:44.325 --> 00:03:47.385
for the annotations at the test annotation @Before annotation

00:03:47.775 --> 00:03:50.345
run all the setup and clean-up methods

00:03:50.345 --> 00:03:53.345
and run all our test methods and it will report out the

00:03:53.345 --> 00:03:56.275
results of all the test that have passed

00:03:56.275 --> 00:03:59.345
and failed, but we rarely touch these class

00:03:59.345 --> 00:04:01.885
we run our test either from ides

00:04:01.885 --> 00:04:04.815
like eclipse and net beans or we run our test

00:04:04.815 --> 00:04:07.405
using build tools like ANT and Maven.

00:04:07.405 --> 00:04:10.205
which internally use this class.

00:04:10.375 --> 00:04:13.015
This is the default JUnit test runner

00:04:13.665 --> 00:04:16.445
you can always extend this for example

00:04:16.445 --> 00:04:18.905
SpringJUnit4ClassRunner

00:04:18.905 --> 00:04:21.985
extends this class and it implements

00:04:21.985 --> 00:04:24.905
JUnitRunner framework

00:04:24.905 --> 00:04:27.905
for it writing integration test while working with spring

00:04:27.905 --> 00:04:30.925
based applications and the @RunWith annotation

00:04:30.925 --> 00:04:33.975
can be used to configure a runner

00:04:33.975 --> 00:04:36.375
when we run our test. By default it is

00:04:36.375 --> 00:04:39.155
this BlockJUnit4ClassRunner

00:04:40.325 --> 00:04:41.715
To summarize,

00:04:42.575 --> 00:04:45.315
JUnit4 provides a easy to be used API

00:04:45.315 --> 00:04:47.975
to do three things

00:04:47.975 --> 00:04:51.025
which any JUnit testing framework will do an easy

00:04:51.025 --> 00:04:52.955
to use API to write test

00:04:53.305 --> 00:04:56.025
then to assert, the actual result and expected

00:04:56.025 --> 00:04:59.245
results and finally it runs our test

00:04:59.245 --> 00:05:02.055
and reports out the results in a

00:05:02.055 --> 00:05:04.385
very developer friendly passion.

