WEBVTT
Kind: captions
Language: en

00:00:00.285 --> 00:00:03.025
In this lecture, you will start unit testing the

00:00:03.025 --> 00:00:05.565
place order method on the

00:00:05.565 --> 00:00:08.065
orderBOimpl. Will do it in

00:00:08.065 --> 00:00:11.075
two steps, in this lecture we will setup the

00:00:11.075 --> 00:00:13.785
expectations stubout the objects and then setup the expectations

00:00:13.785 --> 00:00:16.515
that is we will mockout the order DAO

00:00:16.515 --> 00:00:19.665
in our test and then we will stubout

00:00:19.665 --> 00:00:22.675
all that method calls the

00:00:22.675 --> 00:00:24.995
placeOrder is making onto the DAO

00:00:24.995 --> 00:00:27.455
which is the create methods. We will

00:00:27.455 --> 00:00:29.595
set the expectations of what should happen

00:00:29.595 --> 00:00:32.855
when this create method is called on the DAO.

00:00:32.965 --> 00:00:34.205
To get started, right click on the

00:00:34.555 --> 00:00:37.175
orderBOimpl class

00:00:37.175 --> 00:00:39.805
say new junit testcase

00:00:39.805 --> 00:00:42.815
If you don't see this option here go to other

00:00:42.815 --> 00:00:43.815
and you will find it.

00:00:44.005 --> 00:00:45.795
Click on junit testcase

00:00:45.795 --> 00:00:48.415
the only thing we have to change here

00:00:48.415 --> 00:00:51.675
is this source folder from SRC change it to test

00:00:51.925 --> 00:00:52.985
hit finish.

00:00:53.415 --> 00:00:56.615
Add the junit4library to your build path, hit ok

00:00:57.705 --> 00:01:00.895
there is our test, rename the method

00:01:00.895 --> 00:01:02.805
of test to

00:01:03.295 --> 00:01:05.265
 

00:01:05.635 --> 00:01:07.515
placeorder_shouldreturn

00:01:08.075 --> 00:01:09.095
 

00:01:11.475 --> 00:01:12.585
or shloud

00:01:12.915 --> 00:01:13.975
create

00:01:14.775 --> 00:01:16.035
an order

00:01:18.795 --> 00:01:21.825
using underscores is also a good practice

00:01:21.825 --> 00:01:24.565
delete this line the failed line by hitting ctrl D

00:01:24.565 --> 00:01:26.535
by pointing your curser to it

00:01:26.755 --> 00:01:29.845
very first step is to create a new

00:01:29.915 --> 00:01:31.315
orderBO

00:01:31.995 --> 00:01:35.035
impl ctrl space the second guy here

00:01:35.305 --> 00:01:36.875
class under test

00:01:37.805 --> 00:01:40.375
place your curser hit ctrl 1

00:01:40.375 --> 00:01:41.595
assign statement to a

00:01:42.215 --> 00:01:45.375
new local variable lets call it BO

00:01:47.225 --> 00:01:48.335
enter

00:01:48.955 --> 00:01:52.145
the next important step is

00:01:52.145 --> 00:01:55.435
BO.setDAO this is where our mocking begins

00:01:55.985 --> 00:01:58.675
instead of creating a new instance  of DAO

00:01:58.675 --> 00:02:01.875
lets declare the DAO order

00:02:02.695 --> 00:02:04.915
DAO as a global field

00:02:05.685 --> 00:02:08.465
just use the interface no need to use the implementation

00:02:08.465 --> 00:02:09.465
DAO

00:02:11.475 --> 00:02:12.555
and

00:02:12.975 --> 00:02:14.515
mark it with the

00:02:15.305 --> 00:02:18.385
@moc annotation from mockito hit ctrl1 import

00:02:18.555 --> 00:02:20.385
the moc annotations from

00:02:20.385 --> 00:02:23.155
org.mockito package

00:02:23.155 --> 00:02:24.155
thats the important step

00:02:24.415 --> 00:02:26.985
and for this to work at runtime you have to do

00:02:26.985 --> 00:02:30.245
one additional step and will do it in the setup

00:02:30.565 --> 00:02:33.475
method so @Before annotation

00:02:33.525 --> 00:02:36.005
from the junit API hit ctrl space

00:02:36.005 --> 00:02:39.245
import the @Before annotation

00:02:39.475 --> 00:02:41.465
public void setup

00:02:43.755 --> 00:02:46.935
till here we have to say mockito

00:02:47.025 --> 00:02:50.225
annotations ctrl space

00:02:50.225 --> 00:02:51.225
annotations

00:02:51.555 --> 00:02:54.585
.inintmocs and pass the

00:02:54.585 --> 00:02:57.385
this reference so at runtime

00:02:57.385 --> 00:02:59.855
we are passing this testcases object

00:02:59.855 --> 00:03:02.215
reference to this

00:03:02.215 --> 00:03:05.385
moc annotations.inintmocs so that it will scan through

00:03:05.385 --> 00:03:08.535
all the objects and any

00:03:08.705 --> 00:03:10.995
object that is marked with @moc

00:03:10.995 --> 00:03:13.885
will be knocked out, it will create a

00:03:13.885 --> 00:03:15.685
proxy moc office order DAO.

00:03:17.085 --> 00:03:18.085
Now

00:03:18.485 --> 00:03:21.395
we have set that mocked out object

00:03:21.395 --> 00:03:24.085
onto the orderBO class now we have to

00:03:24.085 --> 00:03:25.165
set the expectations

00:03:25.485 --> 00:03:26.485
to do that

00:03:26.705 --> 00:03:29.635
expand the imports in here you

00:03:29.635 --> 00:03:32.855
already see that we have two imports from mockito lets add another import

00:03:33.185 --> 00:03:34.995
import static

00:03:35.475 --> 00:03:38.355
org.mockito.mockito

00:03:40.515 --> 00:03:42.975
again there is a mockito class

00:03:43.085 --> 00:03:45.885
which provides several static methods

00:03:45.975 --> 00:03:49.025
can say star because will be using

00:03:49.025 --> 00:03:52.375
several static methods from this mockito class

00:03:53.365 --> 00:03:55.735
starting with double click maximize it

00:03:58.125 --> 00:04:00.775
when , when is a very improtant

00:04:00.775 --> 00:04:03.155
which allows us to mockout a

00:04:03.565 --> 00:04:06.645
method call, so we want to mockout

00:04:06.645 --> 00:04:09.035
on the orderDAO we want to

00:04:09.035 --> 00:04:11.155
mockout the create method because that is the method

00:04:11.155 --> 00:04:12.695
which is internally called

00:04:13.085 --> 00:04:16.145
by the place order method

00:04:16.145 --> 00:04:19.285
we want this create method to do what we ask it to do

00:04:20.535 --> 00:04:23.565
in here will say DAO.create

00:04:23.605 --> 00:04:25.965
new order

00:04:25.965 --> 00:04:28.955
will create a new order object

00:04:28.955 --> 00:04:29.955
select this new order

00:04:30.595 --> 00:04:33.705
assign this to a new local variable by hitting ctrl 1

00:04:33.995 --> 00:04:36.755
extract to local variable, lets call it order

00:04:38.485 --> 00:04:40.855
import this order by hitting ctrl 1

00:04:41.205 --> 00:04:42.205
import

00:04:43.165 --> 00:04:46.385
when DAO.createorder two brackets

00:04:46.385 --> 00:04:49.615
.then as you can see

00:04:49.655 --> 00:04:52.595
the when triggers

00:04:52.595 --> 00:04:55.555
the whole process when something happens

00:04:55.555 --> 00:04:58.275
or when a method is called then you can use

00:04:58.275 --> 00:05:00.045
several methods here

00:05:00.045 --> 00:05:02.985
I will explain the other methods later-on for now

00:05:02.985 --> 00:05:04.295
all we need is then return

00:05:06.285 --> 00:05:09.075
and integer value we can say new

00:05:09.305 --> 00:05:10.435
integer

00:05:10.965 --> 00:05:13.605
value should be one because

00:05:13.605 --> 00:05:16.715
one is successful and zero is failure for us

00:05:16.715 --> 00:05:19.175
zero means order was not placed for us

00:05:19.385 --> 00:05:22.125
and this guy here throws a

00:05:22.685 --> 00:05:25.665
exception for now lets add a throws block

00:05:25.665 --> 00:05:27.545
throws a sequel exception

00:05:29.315 --> 00:05:32.045
thats it so we have mocked out the DAO

00:05:32.045 --> 00:05:34.335
and we have set the

00:05:34.335 --> 00:05:37.635
expectations by using the when class when is like a trigger

00:05:37.635 --> 00:05:40.625
and we use the then return method again

00:05:40.625 --> 00:05:42.865
to return the result which we want

00:05:42.865 --> 00:05:45.875
in this case we are returning a result

00:05:45.875 --> 00:05:47.955
1 which means success and the BO

00:05:48.805 --> 00:05:49.805
should get a

00:05:49.995 --> 00:05:52.205
one result back and return a true

00:05:52.205 --> 00:05:54.495
we can also test a failured senario

00:05:54.495 --> 00:05:56.195
later on by passing in or by returning

00:05:56.195 --> 00:05:59.545
back a zero from the mocked out create method.

00:05:59.865 --> 00:06:02.285
Will be verifying the results

00:06:02.285 --> 00:06:03.605
in the next lecture.

