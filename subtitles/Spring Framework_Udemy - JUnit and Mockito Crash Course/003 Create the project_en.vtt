WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.159
In this lecture, will create the user

00:00:02.159 --> 00:00:05.190
admin service project with three classes

00:00:05.190 --> 00:00:07.230
in it, that is the ID generator which

00:00:07.230 --> 00:00:10.050
generates a unique ID and then the user

00:00:10.050 --> 00:00:13.380
DAO which uses the ID generator class

00:00:13.380 --> 00:00:16.770
and a simple user beam that is a DTO

00:00:16.770 --> 00:00:19.890
class will be testing the user DAO

00:00:19.890 --> 00:00:22.680
using j unit and powermock in the lectures

00:00:22.680 --> 00:00:25.560
later on so to create the project launch

00:00:25.560 --> 00:00:29.070
the Eclipse IDE go to the file menu say

00:00:29.070 --> 00:00:32.099
new Java project give it a name user

00:00:32.099 --> 00:00:37.890
admin service hit enter the first step

00:00:37.890 --> 00:00:40.110
as always is to right click on the

00:00:40.110 --> 00:00:43.469
project say new create a source folder

00:00:43.469 --> 00:00:46.770
call it test it finish is where all our

00:00:46.770 --> 00:00:48.750
j unit and power mock test will go later

00:00:48.750 --> 00:00:51.750
on to create our first ID generator

00:00:51.750 --> 00:00:54.390
class right click on the SRC package of

00:00:54.390 --> 00:00:59.609
the SRC folder say new class ID

00:00:59.609 --> 00:01:03.239
generator give it a package name

00:01:03.239 --> 00:01:08.880
com.bharath.useradmin.util I want to

00:01:08.880 --> 00:01:11.580
store this ID generator in a util package because

00:01:11.580 --> 00:01:15.630
it is a utility hit finish, now I want

00:01:15.630 --> 00:01:18.240
to make this class final because I want

00:01:18.240 --> 00:01:20.610
everybody to use the same ID generator I

00:01:20.610 --> 00:01:22.890
don't want anybody to extend this class

00:01:22.890 --> 00:01:23.759
and come up with their own

00:01:23.759 --> 00:01:25.770
implementations by overriding the

00:01:25.770 --> 00:01:30.180
generate ID method so in here I will

00:01:30.180 --> 00:01:35.250
declare a static int I or I can yeah

00:01:35.250 --> 00:01:37.470
this I will be incremented and it will

00:01:37.470 --> 00:01:41.070
be returned back as a ID public static

00:01:41.070 --> 00:01:48.990
final int generate ID is the method and

00:01:48.990 --> 00:01:54.119
this method simply increments the global

00:01:54.119 --> 00:01:56.670
I every time and it returns it back not

00:01:56.670 --> 00:01:59.100
has complex generate ID implementation

00:01:59.100 --> 00:02:02.159
here for the sake of this demo we are

00:02:02.159 --> 00:02:03.990
done with the ID generator and it's

00:02:03.990 --> 00:02:06.689
static method now we'll create the Diego

00:02:06.689 --> 00:02:08.940
class right click on the SRC package a

00:02:08.940 --> 00:02:13.860
new class instead of ID generator

00:02:13.860 --> 00:02:17.340
user DAO and the package name change

00:02:17.340 --> 00:02:22.980
it from util to DAO click finish

00:02:22.980 --> 00:02:27.150
the DAO class has only one method public

00:02:27.150 --> 00:02:32.370
int create user object it takes the user

00:02:32.370 --> 00:02:34.140
object as the parameter and it saves it

00:02:34.140 --> 00:02:37.650
to the database this is where we loose

00:02:37.650 --> 00:02:39.750
the power of a eclipse hit ctrl one on the

00:02:39.750 --> 00:02:43.500
user object which doesn't exist create

00:02:43.500 --> 00:02:46.350
class user let's put it into a different

00:02:46.350 --> 00:02:48.630
package DTO instead of DAO change it

00:02:48.630 --> 00:02:52.410
to DTO click finish we have the user class

00:02:52.410 --> 00:02:56.820
created int ID that is the only field we

00:02:56.820 --> 00:03:01.170
need on this control one create getters

00:03:01.170 --> 00:03:04.800
and setters for this to go back to the

00:03:04.800 --> 00:03:09.270
DAO now we have the user class hit

00:03:09.270 --> 00:03:11.280
control one add a return statement

00:03:11.280 --> 00:03:14.670
instead of returning zero what we will

00:03:14.670 --> 00:03:17.790
do is we will use the ID generator call

00:03:17.790 --> 00:03:19.260
the static method on it which is

00:03:19.260 --> 00:03:22.230
generate ID assign it to a local

00:03:22.230 --> 00:03:29.010
variable let's call it ID and in here

00:03:29.010 --> 00:03:31.950
usually all the database saving code

00:03:31.950 --> 00:03:36.810
we'll go save the user object to the DB

00:03:36.810 --> 00:03:40.440
will use the generated ID and save the

00:03:40.440 --> 00:03:42.810
user object to the database and then we

00:03:42.810 --> 00:03:45.570
will return back the generated ID but we

00:03:45.570 --> 00:03:46.920
are not going to do that we are going to

00:03:46.920 --> 00:03:51.480
keep it as is and we are done with our

00:03:51.480 --> 00:03:54.209
project creation so we have created a ID

00:03:54.209 --> 00:03:57.030
generator which is final and it uses a

00:03:57.030 --> 00:03:59.310
static method and then we have created a

00:03:59.310 --> 00:04:02.880
DAO which uses this ID generator in the

00:04:02.880 --> 00:04:05.610
next lecture we'll be testing this user

00:04:05.610 --> 00:04:09.060
DAO by mocking out the static method

00:04:09.060 --> 00:04:12.470
on this final class.

