WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.920
In this lecture, I will give you an

00:00:01.920 --> 00:00:04.500
overview of Maven the build automation

00:00:04.500 --> 00:00:06.750
tool or the project management tool

00:00:06.750 --> 00:00:10.440
maven uses convention over configuration

00:00:10.440 --> 00:00:14.160
that is if we simply follow certain

00:00:14.160 --> 00:00:16.320
folder structure in our java projects

00:00:16.320 --> 00:00:18.810
like a SRC main java SRC test java

00:00:18.810 --> 00:00:21.570
and so on and if we execute a maven

00:00:21.570 --> 00:00:23.670
command from the command line like maven

00:00:23.670 --> 00:00:26.880
clean install maven will automatically

00:00:26.880 --> 00:00:29.279
compile the java classes under the java

00:00:29.279 --> 00:00:31.380
folder or the main java folder it

00:00:31.380 --> 00:00:33.660
compiles the test under the test java

00:00:33.660 --> 00:00:37.200
folder it runs those tests then prepares

00:00:37.200 --> 00:00:39.390
a war file or jar file from our

00:00:39.390 --> 00:00:41.820
compiled classes and if this project is

00:00:41.820 --> 00:00:43.860
a web application project has a few

00:00:43.860 --> 00:00:45.510
other folders that we need to create and

00:00:45.510 --> 00:00:48.690
then it will automatically create a war

00:00:48.690 --> 00:00:50.969
file of our web application project and

00:00:50.969 --> 00:00:52.800
it can even deploy them onto the server

00:00:52.800 --> 00:00:56.683
it's simple command like this.

00:00:56.683 --> 00:01:00.059
Maven is very lightweight it uses a plug-in based

00:01:00.059 --> 00:01:02.730
architecture then we download and

00:01:02.730 --> 00:01:04.500
install maven it is very lightweight it

00:01:04.500 --> 00:01:07.080
has a bare-bones and then when we run

00:01:07.080 --> 00:01:09.000
certain commands it will download for

00:01:09.000 --> 00:01:10.500
example when we are compiling it uses

00:01:10.500 --> 00:01:13.020
the compiler plugin then we are running

00:01:13.020 --> 00:01:16.020
our test it uses a plug-in to run tests

00:01:16.020 --> 00:01:18.360
called sure fire and there are several

00:01:18.360 --> 00:01:20.189
other plugins which we can configure

00:01:20.189 --> 00:01:23.009
inside maven on the fly so it is very

00:01:23.009 --> 00:01:27.270
lightweight when we initially get it the

00:01:27.270 --> 00:01:29.159
configuration file in case of maven is

00:01:29.159 --> 00:01:32.670
called pom dot XML, pom stands for

00:01:32.670 --> 00:01:35.430
project object model in this XML file

00:01:35.430 --> 00:01:37.409
will first configure our project

00:01:37.409 --> 00:01:39.450
coordinates that is the project name a

00:01:39.450 --> 00:01:42.270
group for the project so that different

00:01:42.270 --> 00:01:44.490
teams in within our company can have

00:01:44.490 --> 00:01:46.409
their own projects saved in a certain

00:01:46.409 --> 00:01:50.220
location those are called coordinates we

00:01:50.220 --> 00:01:52.530
can even give a version number inside

00:01:52.530 --> 00:01:54.210
those coordinates for our project the

00:01:54.210 --> 00:01:57.420
current version of our project as i

00:01:57.420 --> 00:02:00.600
already said maven is plug in or maven

00:02:00.600 --> 00:02:02.880
follows plug-in architecture so we

00:02:02.880 --> 00:02:05.009
can define all the plugins that we need

00:02:05.009 --> 00:02:07.140
for a certain project in the form dot

00:02:07.140 --> 00:02:09.239
XML by default it comes with several

00:02:09.239 --> 00:02:11.340
plugins if we need third-party plugins

00:02:11.340 --> 00:02:13.680
we can also configure that in the

00:02:13.680 --> 00:02:18.000
pom.xml plugins section finally one

00:02:18.000 --> 00:02:20.430
of the main advantages of maven is it

00:02:20.430 --> 00:02:23.159
can easily pull all the dependencies

00:02:23.159 --> 00:02:25.920
that our project needs that is

00:02:25.920 --> 00:02:27.840
third-party libraries or open-source

00:02:27.840 --> 00:02:30.900
libraries can be pulled from the maven

00:02:30.900 --> 00:02:33.599
repository and once we declare them in

00:02:33.599 --> 00:02:35.430
the pom.XML in the dependency

00:02:35.430 --> 00:02:37.290
section maven will automatically pull

00:02:37.290 --> 00:02:39.180
them and use them both to compile our

00:02:39.180 --> 00:02:41.579
classes as well as it will package those

00:02:41.579 --> 00:02:44.310
dependencies into the war files or web

00:02:44.310 --> 00:02:48.100
application projects.

00:02:48.100 --> 00:02:51.329
The maven repository is where all the projects

00:02:51.329 --> 00:02:53.939
artifacts once our projects are compiled

00:02:53.939 --> 00:02:56.730
and jarred those artifacts are saved

00:02:56.730 --> 00:02:58.439
into the maven repositories by

00:02:58.439 --> 00:02:59.819
default there is a open source

00:02:59.819 --> 00:03:02.340
repository out there on the internet we

00:03:02.340 --> 00:03:04.950
can also have a local enterprise level

00:03:04.950 --> 00:03:08.879
repository where and we can maintain all

00:03:08.879 --> 00:03:11.340
the open source stuff or only what our

00:03:11.340 --> 00:03:14.189
organization needs so if we need web

00:03:14.189 --> 00:03:16.530
services jars like cxs jars or apache

00:03:16.530 --> 00:03:19.049
access jars we can have only those in

00:03:19.049 --> 00:03:21.150
our local repository so that we can

00:03:21.150 --> 00:03:23.609
control we can have more control on what

00:03:23.609 --> 00:03:26.010
the developers within our enterprise can

00:03:26.010 --> 00:03:29.189
use and also it saves us some bandwidth

00:03:29.189 --> 00:03:30.510
instead of connecting to the internet

00:03:30.510 --> 00:03:32.819
every time we need to download the

00:03:32.819 --> 00:03:35.099
dependencies we can simply connect to

00:03:35.099 --> 00:03:37.409
the local server or the local repository

00:03:37.409 --> 00:03:42.449
in the next few lectures you will be

00:03:42.449 --> 00:03:45.959
using the m2e maven to eclipse plugin

00:03:45.959 --> 00:03:48.359
that's already there in the eclipse that

00:03:48.359 --> 00:03:50.669
you have installed and we will write a

00:03:50.669 --> 00:03:52.889
simple java class will create a simple

00:03:52.889 --> 00:03:54.720
java project come up with a simple java

00:03:54.720 --> 00:03:57.540
class write a test for it and execute it

00:03:57.540 --> 00:04:02.239
as a part of the maven build lifecycle.

