WEBVTT

0
00:00.090 --> 00:07.260
First method and a test is this create method to do that, go to the test, let's name our test method

1
00:07.260 --> 00:16.110
test create and we need a new coupon rest controller so that we can invoke the create method on it.

2
00:16.110 --> 00:22.740
Coupon rest controller object hit control one assign statement to a new local variable.

3
00:22.980 --> 00:29.490
Call this controller controller dot create is the method under test.

4
00:29.490 --> 00:32.430
You pass it a new coupon object.

5
00:33.030 --> 00:37.080
But now if we run this test, this will become an integration test.

6
00:37.080 --> 00:40.890
We don't want the real repository to be injected.

7
00:41.220 --> 00:43.250
We want to mock out everything.

8
00:43.560 --> 00:47.400
So here we extract this hit control one.

9
00:48.690 --> 00:56.070
Convert local variable to a field so that it will be much easier for Mockito to inject this, then you

10
00:56.070 --> 01:02.040
declare the repository here, private coupon Repo, call it Repo

11
01:02.850 --> 01:04.470
Mark this repo

12
01:04.560 --> 01:07.470
We want to mock out this repository object.

13
01:07.650 --> 01:12.180
Mock Mock it using it, Mock annotation from Mockito.

14
01:12.690 --> 01:21.840
Now we want to inject this mocked out repo into the coupon rest control mark this with @ inject Mock's annotation.

15
01:22.890 --> 01:30.980
@ inject mocks annotation from arg mockito when we run this test first mockito will mock this object,

16
01:30.980 --> 01:35.700
the coupon repo, and then it will inject that mocked object into the controller.

17
01:35.970 --> 01:38.410
I can get rid of this hit control d.

18
01:38.430 --> 01:43.550
We don't need the controller anymore because mockito will automatically create instance of the controller.

19
01:43.770 --> 01:49.110
Then it will inject the repo for us simply invoke controller dot create new coupon.

20
01:49.320 --> 01:56.310
You can fill in this coupon with the data hit control one extract to local variable hit control one

21
01:56.310 --> 02:00.510
on controller dot create assign statement to a new local variable.

22
02:01.080 --> 02:03.430
You can call it coupon created.

23
02:03.960 --> 02:09.890
So before we invoke control controller dot create, we need to stub out or mock the method.

24
02:09.900 --> 02:11.490
Call on this repository.

25
02:11.880 --> 02:17.820
If you go back to the coupon rest controller when the save method is invoked, it will internally invoke

26
02:17.820 --> 02:19.410
repo dot save.

27
02:19.830 --> 02:25.530
So to stub that are to mock that use when within brackets or let's import it first.

28
02:26.820 --> 02:36.600
hit controls space import when from Mockito when Repo dot save method is invoked and the coupon is

29
02:36.600 --> 02:42.120
passed outside the brackets dot then return the coupon back.

30
02:44.350 --> 02:49.240
So we are stubbing out the repo dot save or we are mocking out this call here.

31
02:50.650 --> 02:57.370
Once the controller dot  create is invoked, we have to verify the first step is use the mockito to

32
02:57.370 --> 03:07.330
verify and verify if Repo dot save method is really invoked with the coupon that we are passing

33
03:07.330 --> 03:09.850
to the controller next.

34
03:09.870 --> 03:17.380
You can also assert, assert, not null, the object that is coming back, which is coupon created.

35
03:17.650 --> 03:19.420
And we can also add additional assertions.

36
03:19.420 --> 03:26.170
For example, you can fill in this coupon object coupon dot set code within double quotes super sale.

37
03:27.600 --> 03:36.930
And once the object is returned, you can assert, assert equals expected is super sale will extract

38
03:36.930 --> 03:41.490
in to a constant in a second coupon dot get code.

39
03:43.940 --> 03:53.960
Select that string hit control one extract to constant called super sale, so so far we have mocked

40
03:53.980 --> 03:59.980
out the repository, have injected that into the class, being tested coupon rest controller, and then

41
04:00.010 --> 04:05.710
you have stubbed out the method call or mocked the method call repo dot save then return the coupon.

42
04:05.860 --> 04:08.770
Then you have invoked the controller dot create .

43
04:09.160 --> 04:16.060
When that happens, it will use this mocked out call and then we are verifying if really it is invoking the

44
04:16.060 --> 04:19.150
repo dot save when we call controller dot create.

45
04:19.150 --> 04:23.070
And also we are asserting that the result is what we are expected.

46
04:23.110 --> 04:29.220
Whatever this repository dot save returns, the coupon controller should return it back.

47
04:29.230 --> 04:34.680
That is what the code we have here is to run this test again.

48
04:34.690 --> 04:35.020
you can right

49
04:35.020 --> 04:38.700
click  go to run as if you don't see the junit option here.

50
04:38.710 --> 04:40.960
Usually you see run as j
unit test.

51
04:40.960 --> 04:47.440
If you don't see it, go to run configurations, go to the junit on the left side and you can create

52
04:47.440 --> 04:51.940
a new configuration call it coupon rest controller.

53
04:51.940 --> 04:53.440
Give it a name on the top.

54
04:53.740 --> 04:55.240
The project is coupon service.

55
04:55.660 --> 04:57.730
The test runner should be JUnit five.

56
04:57.730 --> 05:02.770
If you are using the latest version of Springboot, the test class search, and you will find test

57
05:02.770 --> 05:04.000
class within our project. ok

58
05:04.890 --> 05:05.530
Run it.

59
05:06.550 --> 05:10.070
That will run the test, it will open up the Junit console for us.

60
05:10.870 --> 05:13.540
So on the left side, we have the Junit console.

61
05:13.540 --> 05:16.000
If we expand it, everything is green and happy.

62
05:16.930 --> 05:21.790
So our tests are run and the test create has passed successfully.