WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.129
In the previous lecture, we have created

00:00:02.129 --> 00:00:04.770
the user DAO test class and we have

00:00:04.770 --> 00:00:08.610
prepared it to use the power mock API as

00:00:08.610 --> 00:00:11.730
well as we have imported static methods

00:00:11.730 --> 00:00:13.380
that are available in the power mockito

00:00:13.380 --> 00:00:16.260
class this one will start writing our

00:00:16.260 --> 00:00:19.619
unit test for the create method in the

00:00:19.619 --> 00:00:22.500
user DAO class by mocking out the ID

00:00:22.500 --> 00:00:25.710
generators generate ID static method we

00:00:25.710 --> 00:00:28.080
will see if this create method returns a

00:00:28.080 --> 00:00:31.199
valid user ID whatever the static method

00:00:31.199 --> 00:00:34.079
returns back we are going to stub the ID

00:00:34.079 --> 00:00:36.960
generator and set the expectations for

00:00:36.960 --> 00:00:40.110
the generate ID method and then see however

00:00:40.110 --> 00:00:43.079
create method behaves go back to the

00:00:43.079 --> 00:00:45.300
test start by changing the name of this

00:00:45.300 --> 00:00:55.829
test from create should return a user ID back delay this line by hitting control

00:00:55.829 --> 00:00:59.820
D start by creating a new instance for

00:00:59.820 --> 00:01:05.670
user DAO assign this to a new local

00:01:05.670 --> 00:01:07.890
variable by hitting control 1 assign statement

00:01:07.890 --> 00:01:09.420
to a new local variable let's

00:01:09.420 --> 00:01:13.740
call it DAO DAO.create is what

00:01:13.740 --> 00:01:16.650
we are going to test a new user is the

00:01:16.650 --> 00:01:19.080
parameter to it you need to do anything

00:01:19.080 --> 00:01:24.780
else there control one import the user

00:01:24.780 --> 00:01:28.409
and in here let's start subbing and

00:01:28.409 --> 00:01:32.920
setting the expectations by calling the

00:01:32.920 --> 00:01:35.850
mock static method available in the

00:01:35.850 --> 00:01:39.150
mockito power mockito API say mock

00:01:39.150 --> 00:01:41.369
static we need to pass only one

00:01:41.369 --> 00:01:44.100
parameter to this method which is the ID

00:01:44.100 --> 00:01:49.590
generator earlier we have told power

00:01:49.590 --> 00:01:52.409
mockito to prepare this class for static

00:01:52.409 --> 00:01:56.579
stubbing or static mocking now we are

00:01:56.579 --> 00:01:59.490
really mocking out the static method

00:01:59.490 --> 00:02:02.009
inside this class now set the

00:02:02.009 --> 00:02:06.570
expectations by using when ID generator

00:02:06.570 --> 00:02:12.239
dot generate ID is called dot then

00:02:12.239 --> 00:02:13.680
return

00:02:13.680 --> 00:02:18.840
integer you can say it one as you can

00:02:18.840 --> 00:02:21.569
see the syntax is same as the mockito

00:02:21.569 --> 00:02:24.359
API because we are using power mock mockito

00:02:24.359 --> 00:02:27.000
of flavor that's why once you master

00:02:27.000 --> 00:02:28.920
mockito it's very easy to learn power

00:02:28.920 --> 00:02:30.689
moc the only new methods that you have

00:02:30.689 --> 00:02:33.000
learned here is the mock static method

00:02:33.000 --> 00:02:35.069
which mocks out the static methods from the

00:02:35.069 --> 00:02:37.290
ID generator class and here we have set the

00:02:37.290 --> 00:02:40.349
expectations we have already invoked to

00:02:40.349 --> 00:02:46.950
the create method let assert assert

00:02:46.950 --> 00:02:49.980
equalsto the create method  or even before we assert let's assign

00:02:49.980 --> 00:02:52.200
this BO.create to a new local

00:02:52.200 --> 00:02:57.329
variable lets call it result now let's do a

00:02:57.329 --> 00:03:04.349
J unit assert equal expected is one and

00:03:04.349 --> 00:03:07.049
actually is the result that is coming back

00:03:07.049 --> 00:03:11.700
from that method so let's run this by

00:03:11.700 --> 00:03:14.310
going to run as we still run it as

00:03:14.310 --> 00:03:16.200
simple j unit test but j unit at

00:03:16.200 --> 00:03:18.209
runtime as you can see everything is

00:03:18.209 --> 00:03:20.639
green the j-unit then we ran it using

00:03:20.639 --> 00:03:22.739
the j unit runner its delegated it to the

00:03:22.739 --> 00:03:24.870
power mock runner and power mock runner

00:03:24.870 --> 00:03:27.930
is what runs this mocks out the static

00:03:27.930 --> 00:03:30.840
method and returns the one which we have

00:03:30.840 --> 00:03:33.900
set it to and finally we are asserting

00:03:33.900 --> 00:03:36.269
that that one is really coming back we

00:03:36.269 --> 00:03:39.629
can also quickly verify by using the

00:03:39.629 --> 00:03:43.560
verified statis that's it we need not pass

00:03:43.560 --> 00:03:46.049
anything into this method simply use

00:03:46.049 --> 00:03:48.449
this power mock will verify that the

00:03:48.449 --> 00:03:51.209
static methods that we have set the

00:03:51.209 --> 00:03:52.979
expectations for or we have stubbed out

00:03:52.979 --> 00:03:55.439
is really getting called so click on the

00:03:55.439 --> 00:03:57.989
play button here to rerun the test and

00:03:57.989 --> 00:04:01.079
our tests are still green so it's that

00:04:01.079 --> 00:04:04.229
simple we have prepared our test class

00:04:04.229 --> 00:04:07.979
to use the power mockito API and then we

00:04:07.979 --> 00:04:10.349
have used the mock static method from

00:04:10.349 --> 00:04:13.650
the power mock and the when and then

00:04:13.650 --> 00:04:15.060
return which is very similar to the

00:04:15.060 --> 00:04:18.239
mockito API but it is from the power

00:04:18.239 --> 00:04:20.789
mockito class instead of the Mockito

00:04:20.789 --> 00:04:23.400
class and then we have used the verify

00:04:23.400 --> 00:04:25.650
static method to make sure that our

00:04:25.650 --> 00:04:27.540
generate ID method

00:04:27.540 --> 00:04:29.580
is really getting called on the ID

00:04:29.580 --> 00:04:31.700
generator.

