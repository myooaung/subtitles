WEBVTT

0
00:00.150 --> 00:05.550
The next method under test is the update interest method that takes interest and saves it to the database,

1
00:05.550 --> 00:13.380
but before it does that save it will invoke the user repo dot find by ID passes in the user account ID

2
00:13.650 --> 00:19.320
from the interest that it receives in the interest, gets the user account and then it sets it on the

3
00:19.320 --> 00:19.980
interests itself.

4
00:19.980 --> 00:23.940
The user account will be set on the interest object and then the save happens.

5
00:24.150 --> 00:26.250
So we need to mock two calls here.

6
00:26.340 --> 00:30.900
User repo dot find by ID and interest repo dot save.

7
00:31.770 --> 00:32.700
Go to your test.

8
00:33.830 --> 00:36.360
Create a new test method at the end.

9
00:36.410 --> 00:41.070
Let me add some lines so that you can see it clearly void test

10
00:41.630 --> 00:48.380
Update interest of a user is the method under test mark it with @ test annotation from JUnit.

11
00:49.290 --> 00:55.680
Start by invoking the controller dot update interest that takes a new interest object.

12
00:57.370 --> 00:58.270
Select that.

13
00:59.470 --> 01:04.840
Hit control one Assign statement, or extract to a local variable that the interest on this interest

14
01:04.840 --> 01:07.270
will just set the account ID.

15
01:07.280 --> 01:10.600
You can set various other fields, but they are not required again.

16
01:10.600 --> 01:16.870
We are not saving it to the database set user account, ID say one two three.

17
01:16.870 --> 01:20.410
The reason we are setting this here in the controller if you have a look here.

18
01:20.740 --> 01:26.920
The find by ID method when it is invoked on the repository interest dot get user account is used.

19
01:26.980 --> 01:30.430
So we need to set that guy or pass that guy in.

20
01:31.270 --> 01:32.860
Next, you go back to the test.

21
01:33.250 --> 01:35.470
Start mocking when

22
01:37.880 --> 01:44.280
First is user account repository Dot find by IDE

23
01:44.480 --> 01:46.320
One two three is passed in as the IDE

24
01:46.700 --> 01:51.520
Dot then return back a new user account.

25
01:51.770 --> 01:54.110
Any user account that will do so

26
01:54.110 --> 01:55.190
That's the first mock.

27
01:56.340 --> 01:56.910
Next.

28
01:58.970 --> 02:04.690
We have to return a optional here, not a new user account optional, because the find by ID method

29
02:04.700 --> 02:09.440
in spring data, JPA returns a optional object back.

30
02:09.440 --> 02:14.990
So optional dot off is the method to which you can pass this new user account.

31
02:15.440 --> 02:20.360
So make sure you do that optional dot off and errors will go away.

32
02:20.900 --> 02:24.020
The second mock is when.

33
02:25.170 --> 02:39.180
Interest repository Dot Save is invoked and the interest is passed in, then we return back a new interest

34
02:39.180 --> 02:42.060
that will have a ID on a new interest.

35
02:44.550 --> 02:50.210
Take that hit control one extract to a local variable call it saved interest.

36
02:50.640 --> 02:55.830
That is what is returned and when, you invoked controller dot update interest control one extract that or

37
02:55.830 --> 02:58.050
assigned that statement to a new local variable.

38
02:58.470 --> 03:00.720
Call it output

39
03:00.960 --> 03:02.970
interest.

40
03:06.520 --> 03:08.410
Output interest

41
03:09.570 --> 03:11.160
dot we can start assertions on it.

42
03:11.190 --> 03:20.670
Let me start with assertions once we have the output assert, not null and pass in the output interest

43
03:20.670 --> 03:22.560
to it first, we check if it is not null.

44
03:22.830 --> 03:24.180
Let me add some lines there.

45
03:24.480 --> 03:25.890
Go back, do some more assertions.

46
03:25.890 --> 03:27.630
Assert not null.

47
03:31.590 --> 03:35.400
Output interests, dot, get IDE

48
03:36.930 --> 03:39.930
Next, assert equals.

49
03:41.390 --> 03:47.510
Output the expected is one two three, because that's the ID we have set.

50
03:48.470 --> 03:51.800
Here we have to set here on the saved interest right here.

51
03:51.830 --> 03:59.810
Make sure you saved interest  dot set ID is one two three so that we can check that is the ID that comes back,

52
04:00.170 --> 04:03.540
so output interest, dot get ID.

53
04:05.450 --> 04:12.530
And finally, you can also do verifications verify to the verify method you pass in what you want

54
04:12.530 --> 04:13.220
to verify.

55
04:13.280 --> 04:21.070
First, the user account repository Dot find by ID should have been invoked with one two three.

56
04:21.080 --> 04:22.550
That's number one verification.

57
04:23.510 --> 04:27.050
And this guy dot find by ID should go outside the brackets.

58
04:27.320 --> 04:31.340
Cut it, paste it outside and one more verify.

59
04:32.820 --> 04:36.240
Interest repository Dot

60
04:36.540 --> 04:44.280
Save right there, Dot save the entity that would have been passed in is that interest that we have created.

61
04:45.490 --> 04:48.910
That set a long test, but a very useful test.

62
04:49.030 --> 04:55.690
So we have started by mocking two calls the user account dot repository dot find by ID. which takes a ID and then

63
04:55.690 --> 04:57.640
we return a optional user account

64
04:57.640 --> 05:02.970
Back on the second call is the interest repository Dot save which takes a interest and returns a saved

65
05:02.980 --> 05:08.310
interest on which we are asserting an ID. Then we are verifying that output that comes back when controller dot

66
05:08.410 --> 05:09.790
update interest is invoked.

67
05:10.900 --> 05:14.360
Is not null, then we are verifying the ID is not null.

68
05:14.380 --> 05:19.090
We are also verifying that the ID. is what we have set here and stubbed out here using the when class 

69
05:19.330 --> 05:25.210
And finally, we are verifying that they user repository or find by  ID is invoked and also the interest

70
05:25.210 --> 05:27.730
repository dot save is invoked as expected.

71
05:28.030 --> 05:31.330
Right click run as JUnit Test.

72
05:32.430 --> 05:36.300
There are some errors, let me fix those right here the red Mark.

73
05:36.870 --> 05:38.970
Let me see what the error is.

74
05:38.970 --> 05:43.440
I have I need an additional bracket there at the end once you create optional off.

75
05:43.590 --> 05:47.970
There was one bracket less right click run as JUnit test.

76
05:49.850 --> 05:52.250
And everything should be green.

77
05:52.880 --> 05:53.670
There we go.

78
05:53.690 --> 05:55.640
Now we have two tests passing.