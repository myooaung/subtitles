WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.970
In this lecture, will implement the first

00:00:02.970 --> 00:00:05.970
three steps to come up with a parameterized

00:00:05.970 --> 00:00:08.189
junit test that is will identify the

00:00:08.189 --> 00:00:11.130
input data and results will create the

00:00:11.130 --> 00:00:14.070
field at the test class level and then

00:00:14.070 --> 00:00:16.980
we will create a constructor to do that

00:00:16.980 --> 00:00:19.080
launch the Eclipse IDE go to the

00:00:19.080 --> 00:00:20.699
calculator project which you have

00:00:20.699 --> 00:00:23.070
created in the maven and junit section

00:00:23.070 --> 00:00:25.740
which is the previous section if you see

00:00:25.740 --> 00:00:27.930
the calculator impl class it has a

00:00:27.930 --> 00:00:31.109
ADD method with two numbers and it

00:00:31.109 --> 00:00:33.149
returns the sum of those two numbers as

00:00:33.149 --> 00:00:35.910
the result and in the calculator impl

00:00:35.910 --> 00:00:37.800
test they are already written a test

00:00:37.800 --> 00:00:40.200
which takes two numbers and we are

00:00:40.200 --> 00:00:42.000
asserting to see the result is as

00:00:42.000 --> 00:00:44.969
expected so let's start converting this

00:00:44.969 --> 00:00:47.550
junit test into a parameterized junit

00:00:47.550 --> 00:00:50.700
the first step is to identify the inputs

00:00:50.700 --> 00:00:52.140
which we already know there are two

00:00:52.140 --> 00:00:55.530
inputs num1 and num2 two numbers and the

00:00:55.530 --> 00:00:59.010
result is also a integer so let's start

00:00:59.010 --> 00:01:02.910
creating fields inside the test class say

00:01:02.910 --> 00:01:10.439
int num1 int num2 and then int result so

00:01:10.439 --> 00:01:13.380
we have three different fields the two

00:01:13.380 --> 00:01:16.259
inputs and the one output the second

00:01:16.259 --> 00:01:19.770
step is to create a constructor public

00:01:19.770 --> 00:01:24.240
copy the class name of the test void

00:01:24.240 --> 00:01:32.100
constructor in here we are going to pass

00:01:32.100 --> 00:01:34.200
in three different parameters again int

00:01:34.200 --> 00:01:46.680
num1 int num2 int result this dot number

00:01:46.680 --> 00:01:48.329
one we are going to assign the values

00:01:48.329 --> 00:01:53.579
that came in is equal to num1 this dot

00:01:53.579 --> 00:01:58.409
num 2 is equal to num 2 this

00:01:58.409 --> 00:02:05.369
dot result is equal to result can take

00:02:05.369 --> 00:02:10.080
this void out here the constructor doesn't return anything we do not need a

00:02:10.080 --> 00:02:12.450
return type specified there so we are

00:02:12.450 --> 00:02:13.830
done so in this

00:02:13.830 --> 00:02:15.990
lecture we have simply identified the

00:02:15.990 --> 00:02:19.920
inputs and the result and then we have

00:02:19.920 --> 00:02:22.500
created three different fields at the

00:02:22.500 --> 00:02:25.560
class level we can mark these as private

00:02:25.560 --> 00:02:31.260
all the three field and then we have

00:02:31.260 --> 00:02:34.050
created a constructor that takes these

00:02:34.050 --> 00:02:37.170
three as parameters and we are setting

00:02:37.170 --> 00:02:38.700
the three values that come to the

00:02:38.700 --> 00:02:40.890
constructor on to this global fields.

00:02:40.890 --> 00:02:43.860
The next lecture will create a static method

00:02:43.860 --> 00:02:46.950
that will give the data sets that are

00:02:46.950 --> 00:02:50.540
required for this test case.

