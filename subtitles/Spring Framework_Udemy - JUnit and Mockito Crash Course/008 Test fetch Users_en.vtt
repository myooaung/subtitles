WEBVTT

0
00:00.390 --> 00:07.290
The next method under test is the get users method that will return back all the user account, a list

1
00:07.290 --> 00:08.190
of user accounts.

2
00:08.520 --> 00:12.100
The only method called we need to mock here is the user repo dot

3
00:12.120 --> 00:15.210
Find all that returns a list of user accounts.

4
00:15.570 --> 00:19.350
Go to your test class add a new test void

5
00:20.830 --> 00:22.900
test get users.

6
00:24.340 --> 00:32.950
Controller Dot Get Users is the method hit control one assigned statement to a local variable call it

7
00:32.960 --> 00:36.430
users or you can call it output users.

8
00:37.710 --> 00:39.600
Start stubbing when

9
00:42.230 --> 00:52.970
The user account repository Dot find all is invoked, dot then we need to return, then return back

10
00:53.360 --> 00:57.440
a new array list to start with.

11
00:57.860 --> 01:03.320
This array list is of type user account and brackets at the end.

12
01:04.370 --> 01:10.850
Hit control one import array list from Java util and extract this to a local variable.

13
01:10.850 --> 01:13.610
The new array list control one extract to a local variable.

14
01:13.970 --> 01:15.740
Call it users.

15
01:17.410 --> 01:22.360
So these are the users that are returned back, you can add a couple of users to this list or user

16
01:22.360 --> 01:26.050
accounts users dot add new user account.

17
01:27.880 --> 01:34.810
And add one more users dot, add we will just assert on the length we don't have to worry about the

18
01:34.810 --> 01:41.290
contents of it as long as it returns the expected number of user accounts, we are happy.

19
01:41.950 --> 01:45.100
So we have successfully mocked the call, which is find all.

20
01:45.310 --> 01:47.590
Then we invoke controller dot get users.

21
01:47.590 --> 01:54.520
Once that is done, you can start the assertions, assert not null the output users that comes back.

22
01:54.910 --> 02:04.390
And also you can assert assert equals the output user's dot length is expected to be two, because

23
02:04.390 --> 02:09.820
we are adding two user accounts here, and that is what should be returned when this call happens.

24
02:09.820 --> 02:15.430
When controllers dot get users is invoked, it will internally use user account repository dot find all

25
02:15.610 --> 02:17.890
which should return just two users.

26
02:18.460 --> 02:23.320
Here it is Output users dot.

27
02:24.760 --> 02:27.720
The size of it that should be two.

28
02:27.910 --> 02:32.920
And we can also do the verification verify within brackets.

29
02:34.310 --> 02:38.680
The user account repository outside the brackets.

30
02:38.750 --> 02:43.910
Dot find all should have been invoked, format it and run the test.

31
02:44.690 --> 02:45.530
All the tests.

32
02:51.320 --> 02:51.920
There we go.

33
02:51.950 --> 02:54.200
Everything is green and happy.

34
02:54.290 --> 02:57.640
We look at the test output, we only see two tests being run.

35
02:57.650 --> 02:59.870
That is because I haven't marked this test.

36
02:59.880 --> 03:02.330
Get users with the @ test annotation.

37
03:02.660 --> 03:05.990
So let's mark it and rerun this test class.

38
03:06.020 --> 03:07.200
right click run

39
03:07.760 --> 03:13.070
This time we should see three tests that should be running and passing.

40
03:13.490 --> 03:14.120
There we go.

41
03:14.150 --> 03:18.410
test get users test registry user and test update interest.