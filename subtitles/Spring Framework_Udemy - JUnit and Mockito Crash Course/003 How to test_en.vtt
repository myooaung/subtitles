WEBVTT

0
00:00.150 --> 00:06.540
In this section, we'll be writing unit tests for our user account controller methods, unit testing

1
00:06.540 --> 00:13.950
is where we'll be focusing on just the class under test, the unit under test and will be mocking out

2
00:13.950 --> 00:15.120
its dependencies.

3
00:15.240 --> 00:20.880
In this case, we have two dependencies user account repository and interest repository.

4
00:20.910 --> 00:26.190
These two will be mocked out and we'll be testing one public method at a time.

5
00:26.700 --> 00:31.560
And when we test them, we will stub out these method calls on these mocked objects.

6
00:31.740 --> 00:37.710
For example, register user uses, user repo dot save instead of invoking the actual method and going

7
00:37.710 --> 00:42.780
against the database, which will become a integration test, we will be mocking out our stubbing out

8
00:42.780 --> 00:45.480
this call using Mockito framework.

9
00:45.780 --> 00:53.070
So we're going to use the Junit for unit testing and Mockito for mocking out these calls because we just

10
00:53.070 --> 00:59.490
want to test this layer, not the entire application or the next layer as well, which is integration

11
00:59.490 --> 01:00.960
testing this is unit testing.

12
01:00.960 --> 01:05.460
If you want to learn more about unit testing and how to use JUnit and Mockito, you can take my Junit

13
01:05.460 --> 01:06.630
and Mockito crash course.

14
01:06.990 --> 01:10.050
Yeah, I'm going to explain what is required to create unit tests.

15
01:10.470 --> 01:16.050
The first step we already have the Springboot Starter Test, which was automatically added when we created

16
01:16.050 --> 01:18.600
this project this springboot starter

17
01:18.600 --> 01:22.290
test brings in JUnit, Mockito and other dependencies

18
01:22.290 --> 01:23.250
transitively

19
01:24.520 --> 01:28.300
You go to the test class undersource Test Java.

20
01:28.570 --> 01:31.690
The first step is to mock out the dependencies.

21
01:31.780 --> 01:36.880
The user account repository and the interest repository are the two dependencies, which our controller

22
01:36.880 --> 01:38.410
uses these two here.

23
01:39.310 --> 01:44.620
Instead of using the real ones, we mark them with the @mock annotations so that they will be mocked

24
01:44.770 --> 01:48.940
and those mocked ones will be injected into our user account controller

25
01:49.030 --> 01:50.530
This is the class under test.

26
01:50.740 --> 01:54.040
We mark it with @ Inject Mocks annotation.

27
01:54.160 --> 01:56.110
Everything will happen magically.

28
01:56.110 --> 02:03.060
Mockito will create mock objects for these two and it will inject them into our user account controller.

29
02:03.490 --> 02:10.570
Once we have those to test any of the methods, we mock out the calls or we stubout the calls on these

30
02:11.170 --> 02:12.330
mocked objects.

31
02:12.340 --> 02:20.080
For example, test user or test register user uses the save method on user repo.

32
02:20.110 --> 02:25.960
Instead of going against the real method and to the database, we will be stubbing out that call using

33
02:25.960 --> 02:34.390
the Mockito when class when user account repository Dot save is invoked with a user account that is being

34
02:34.390 --> 02:34.930
passed in.

35
02:35.260 --> 02:37.010
This is what you should return.

36
02:37.030 --> 02:43.660
So we are mocking out that entire call, then return a saved user account, which is a object we create

37
02:43.660 --> 02:44.100
right here.

38
02:44.130 --> 02:45.700
We just said the ID on it.

39
02:45.700 --> 02:47.500
We can set whatever fields we want on it.

40
02:47.500 --> 02:49.690
It is just a Java bean that we are creating.

41
02:49.840 --> 02:55.990
So using Mockito when we will stub out the method calls are will mock the method calls and 

42
02:55.990 --> 02:59.620
then we call the method under test, when you invoke this.

43
03:00.220 --> 03:06.400
The registry user will use save method, which will be this stubbed out call.

44
03:06.880 --> 03:10.510
This response will come back from here instead of from the real object.

45
03:10.840 --> 03:14.720
And whatever response we get back, we will assert on that response.

46
03:14.740 --> 03:23.320
And also using Mockito Verify, you can verify if this save method is really being invoked on this mocked

47
03:23.320 --> 03:27.940
out object, you will do the same thing for the rest of the test methods as well.

48
03:27.950 --> 03:29.110
So two important steps.

49
03:29.830 --> 03:35.410
First is to mock out these dependencies and inject them into the class under test.

50
03:35.650 --> 03:37.530
And then you stub out the method calls.

51
03:37.780 --> 03:40.360
Do the assertions and verifications.