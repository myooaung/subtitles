WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.129
In this lecture, we will learn how easy

00:00:02.129 --> 00:00:04.680
it is to measure the code coverage or

00:00:04.680 --> 00:00:07.080
the test coverage for our java projects using

00:00:07.080 --> 00:00:10.440
the ECLEmma code coverage plugin to

00:00:10.440 --> 00:00:13.650
do that  launch the eclipse Ide go to  our order

00:00:13.650 --> 00:00:16.260
processing service project right click

00:00:16.260 --> 00:00:19.770
on the test package or the test source

00:00:19.770 --> 00:00:25.080
folder go to coverage as and click on

00:00:25.080 --> 00:00:28.230
junit test so that will run the ECLEmma

00:00:28.230 --> 00:00:31.230
cole coverage plug-in and it will run our

00:00:31.230 --> 00:00:32.969
test as you can see all our tests are

00:00:32.969 --> 00:00:36.120
green while it runs our test it also

00:00:36.120 --> 00:00:39.540
analyzes our source code at runtime to

00:00:39.540 --> 00:00:42.540
see which parts of our source code are being

00:00:42.540 --> 00:00:44.940
tested or which parts of our source code

00:00:44.940 --> 00:00:47.430
which lines in our source code are being run

00:00:47.430 --> 00:00:49.680
and it generates a beautiful report

00:00:49.680 --> 00:00:54.420
here under the coverage tab if you  expand

00:00:54.420 --> 00:00:58.199
that let me drag it a little as you can see it has

00:00:58.199 --> 00:01:00.930
different columns coverage in percentage

00:01:00.930 --> 00:01:03.359
covered instructions that is the number

00:01:03.359 --> 00:01:05.700
of lines that are covered by our test

00:01:05.700 --> 00:01:08.159
missing instructions and then the total

00:01:08.159 --> 00:01:11.250
number of instructions we don't really

00:01:11.250 --> 00:01:14.700
care about that test themselves that is not

00:01:14.700 --> 00:01:16.650
what we should look at we should

00:01:16.650 --> 00:01:20.430
look at the source folder and go to

00:01:20.430 --> 00:01:22.470
our BOclass because that is what

00:01:22.470 --> 00:01:24.509
we have written tests for this is the

00:01:24.509 --> 00:01:27.750
class we have written test for eclipse emma

00:01:27.750 --> 00:01:30.360
ECLemma highlights all the

00:01:30.360 --> 00:01:31.920
instructions that are covered by our

00:01:31.920 --> 00:01:33.930
test in green so all the beautiful

00:01:33.930 --> 00:01:36.450
greenery there are big is because we

00:01:36.450 --> 00:01:38.549
have run some good test covering the

00:01:38.549 --> 00:01:40.619
place order method as well as the

00:01:40.619 --> 00:01:43.619
cancel order method scroll it down you

00:01:43.619 --> 00:01:45.270
will see all the bad reds

00:01:45.270 --> 00:01:47.220
this is because we haven't returned any

00:01:47.220 --> 00:01:50.220
test method for the delete order method

00:01:50.220 --> 00:01:52.649
or the get DAO we didn't use the get DAO

00:01:52.649 --> 00:01:55.320
at all so we can easily remove

00:01:55.320 --> 00:01:56.280
that method say

00:01:56.280 --> 00:01:59.909
good point or a good that it highlighted we can

00:01:59.909 --> 00:02:01.979
do this method and we can add a test

00:02:01.979 --> 00:02:04.920
method for the delete order in the next

00:02:04.920 --> 00:02:07.350
lecture so that all this will also be

00:02:07.350 --> 00:02:10.590
green so it shows us the percentage of test

00:02:10.590 --> 00:02:12.599
coverage as you can see here the order

00:02:12.599 --> 00:02:13.580
BOimpl has

00:02:13.580 --> 00:02:17.000
71 percent of coverage once we cover the

00:02:17.000 --> 00:02:19.250
Delete order it will become hundred percent

00:02:19.250 --> 00:02:22.040
and as you can see the DAO

00:02:22.040 --> 00:02:24.290
it has 0% coverage

00:02:24.290 --> 00:02:26.210
because our DAO is not even

00:02:26.210 --> 00:02:27.950
completely implemented and we haven't

00:02:27.950 --> 00:02:29.180
tested it at all

00:02:29.180 --> 00:02:31.670
that is why it is all red and it has

00:02:31.670 --> 00:02:34.220
0% coverage the DTOS

00:02:34.220 --> 00:02:36.680
it's okay it has 41%coverage

00:02:36.680 --> 00:02:38.780
because we are not calling the getter

00:02:38.780 --> 00:02:40.130
methods that we are not using the

00:02:40.130 --> 00:02:42.380
getter methods at all and some of the

00:02:42.380 --> 00:02:43.970
setter methods as well.

00:02:43.970 --> 00:02:47.480
Finally the exception has hundred

00:02:47.480 --> 00:02:49.370
percent coverage, we have done a god job

00:02:49.370 --> 00:02:51.650
there as well so it's that simple to run

00:02:51.650 --> 00:02:54.770
ECLEmma code coverage plug-in to see how

00:02:54.770 --> 00:02:56.930
much of our source code is being tested

00:02:56.930 --> 00:03:00.380
simply you can right-click on the tests source

00:03:00.380 --> 00:03:03.410
folder itself or you can run individual test by

00:03:03.410 --> 00:03:06.500
right-clicking and go to coverage as and

00:03:06.500 --> 00:03:08.810
then say a unit test and generate

00:03:08.810 --> 00:03:12.370
a beautiful report for us.

