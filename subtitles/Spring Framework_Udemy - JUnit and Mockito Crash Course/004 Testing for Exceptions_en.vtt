WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.760
In this lecture, you will learn how to

00:00:02.760 --> 00:00:06.359
test exception scenarios using junit.To

00:00:06.359 --> 00:00:09.059
do that go to the greetingimpl class

00:00:09.059 --> 00:00:12.420
and let's add a data validation logic or

00:00:12.420 --> 00:00:15.690
exception scenario in here we're in we will

00:00:15.690 --> 00:00:19.350
through a illegal argument exception if

00:00:19.350 --> 00:00:22.020
the name parameter if it comes in as null

00:00:22.020 --> 00:00:23.760
or if it is blank

00:00:23.760 --> 00:00:25.590
we are going to throw a illegal argument

00:00:25.590 --> 00:00:29.279
exception so in here start writing your if

00:00:29.279 --> 00:00:33.840
conditional statement if name is equal to null

00:00:33.840 --> 00:00:43.350
or name dot length is equal to 0 then

00:00:43.350 --> 00:00:48.510
we'll throw a new illegal argument

00:00:48.510 --> 00:00:52.680
exception thats our exceptional scenario

00:00:52.680 --> 00:00:55.890
now to test this scenario go back to our  test

00:00:55.890 --> 00:00:59.129
class we have left our test in a failure

00:00:59.129 --> 00:01:04.199
state if we re-run this test right click

00:01:04.199 --> 00:01:06.090
run as junit test

00:01:06.090 --> 00:01:08.640
remember we have left it in a failed state

00:01:08.640 --> 00:01:10.439
is always a good practice to leave it in

00:01:10.439 --> 00:01:12.360
failed state because when we come back we

00:01:12.360 --> 00:01:14.850
know where we have left it so let's fix

00:01:14.850 --> 00:01:15.390
it

00:01:15.390 --> 00:01:19.439
here should be hello junit right

00:01:19.439 --> 00:01:23.009
click on the junit view from a test

00:01:23.009 --> 00:01:25.439
passes and now let's create a test for the

00:01:25.439 --> 00:01:28.259
exception scena we will start writing a new

00:01:28.259 --> 00:01:32.100
test by annotating at test if you hit control

00:01:32.100 --> 00:01:34.500
space you will get help you will simply use that

00:01:34.500 --> 00:01:38.759
annotation then try public void all

00:01:38.759 --> 00:01:40.710
the test methods should be void and we

00:01:40.710 --> 00:01:43.140
should always give them as meaningful

00:01:43.140 --> 00:01:46.590
name as possible so let's say greed

00:01:46.590 --> 00:01:52.140
should through an exception underscore

00:01:52.140 --> 00:01:58.020
for underscore name is null so you can

00:01:58.020 --> 00:02:00.270
make them as meaningful as possible as

00:02:00.270 --> 00:02:02.939
long as possible because any developer

00:02:02.939 --> 00:02:05.310
who looks at this test will know what

00:02:05.310 --> 00:02:07.799
exactly this test is doing and how your

00:02:07.799 --> 00:02:10.470
code behaves so it's a very good

00:02:10.470 --> 00:02:13.210
way tests are a very good way to document

00:02:13.210 --> 00:02:16.690
your code as well so in here let's create an

00:02:16.690 --> 00:02:18.310
instance of the greeting you can grab

00:02:18.310 --> 00:02:20.050
this piece from here in the next lecture

00:02:20.050 --> 00:02:22.330
i'll show you how to reuse the instance

00:02:22.330 --> 00:02:26.380
across test for now simply use the

00:02:26.380 --> 00:02:28.540
greetingimpl and then let's call

00:02:28.540 --> 00:02:31.720
greet you're going to passin null because

00:02:31.720 --> 00:02:33.760
they're going to test for the exception

00:02:33.760 --> 00:02:36.970
scenarios. Instead of asserting here to

00:02:36.970 --> 00:02:39.370
test for the exception we are going to

00:02:39.370 --> 00:02:42.790
use junit force powerful expected

00:02:42.790 --> 00:02:45.490
attribute on the test annotation there

00:02:45.490 --> 00:02:49.960
is an attribute called expected is equal

00:02:49.960 --> 00:02:51.490
to this is where we can give the

00:02:51.490 --> 00:03:00.160
exception class expected and then

00:03:00.160 --> 00:03:04.270
this illegal argument exception dot

00:03:04.270 --> 00:03:06.130
class we need to tell junit what

00:03:06.130 --> 00:03:08.110
exception we are expecting and this

00:03:08.110 --> 00:03:10.060
test runs and that sets we are done

00:03:10.060 --> 00:03:17.440
simply right-click go to run as junit test and

00:03:17.440 --> 00:03:20.020
both our tests have past here if you see now

00:03:20.020 --> 00:03:22.870
there are two tests that ran there is

00:03:22.870 --> 00:03:24.970
no guarantee for the order in which

00:03:24.970 --> 00:03:26.830
these tests are run so never make

00:03:26.830 --> 00:03:28.840
any assumptions while you create your data

00:03:28.840 --> 00:03:30.910
object as you can see here our

00:03:30.910 --> 00:03:32.770
exceptional scenario test ran first

00:03:32.770 --> 00:03:35.920
and then the first valid scenario tests ran

00:03:35.920 --> 00:03:39.850
let's make this test fail by passing

00:03:39.850 --> 00:03:43.630
in a valid string in here to passin junit

00:03:43.630 --> 00:03:46.330
or any string for that matter and try

00:03:46.330 --> 00:03:48.190
to rerun if you want to just rerun

00:03:48.190 --> 00:03:50.020
this particular test method you can

00:03:50.020 --> 00:03:54.040
right-click on it and say run so our

00:03:54.040 --> 00:03:56.710
exceptions scenario test fails and it

00:03:56.710 --> 00:04:00.700
clearly shows why it has failed here

00:04:00.700 --> 00:04:03.490
expected exception

00:04:03.490 --> 00:04:06.130
java.lang.illegalargumentexception but

00:04:06.130 --> 00:04:07.240
that no exception

00:04:07.240 --> 00:04:11.200
never was returned so let's make it or turn

00:04:11.200 --> 00:04:16.120
it back green by passing in null and now

00:04:16.120 --> 00:04:19.090
if you right click run your test passes

00:04:19.090 --> 00:04:22.210
again so now we should also test for the

00:04:22.210 --> 00:04:24.460
blank scenario we have only tested for

00:04:24.460 --> 00:04:25.900
the null senario it's always a good

00:04:25.900 --> 00:04:26.870
practice to

00:04:26.870 --> 00:04:29.690
write separate test for each scenario just like

00:04:29.690 --> 00:04:32.570
how we write method to do only one thing

00:04:32.570 --> 00:04:35.270
you should always also test only one

00:04:35.270 --> 00:04:38.900
thing we can rename this and name is

00:04:38.900 --> 00:04:44.660
blank so the very same test code the only

00:04:44.660 --> 00:04:46.490
thing that changes is the name of this test

00:04:46.490 --> 00:04:50.660
method and in here instead off null

00:04:50.660 --> 00:04:55.280
we are going to pass in blank strength again

00:04:55.280 --> 00:04:58.040
right click or right click on the class

00:04:58.040 --> 00:05:00.530
we can also run it from here the play

00:05:00.530 --> 00:05:05.330
button and as a junit test as you can see

00:05:05.330 --> 00:05:07.490
everything is green

00:05:07.490 --> 00:05:09.320
It's that simple test exception

00:05:09.320 --> 00:05:12.380
scenarios we mark our test methods with

00:05:12.380 --> 00:05:14.300
the at test annotation and we use the

00:05:14.300 --> 00:05:17.539
expected attribute on it to assert for the

00:05:17.539 --> 00:05:21.400
exception that we are expecting.

