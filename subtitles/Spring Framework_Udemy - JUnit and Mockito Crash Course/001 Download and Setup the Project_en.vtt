WEBVTT

0
00:00.090 --> 00:06.180
In the next few lectures, you  will use the Junit and Mockito to test a java web  application.

1
00:06.210 --> 00:08.000
It is a MAVEN based application.

2
00:08.430 --> 00:14.190
You can download this completed project by going to the resources section of this lecture once downloaded,

3
00:14.190 --> 00:22.770
import it  into Eclipse as a MAVEN project right click import import existing search for existing select

4
00:22.770 --> 00:23.910
existing Maven project.

5
00:23.910 --> 00:26.130
Browse to the directory where you have the project.

6
00:26.130 --> 00:27.750
Go inside the project directory.

7
00:28.230 --> 00:31.590
Click Finish and that will import the MAVEN project into Eclipse.

8
00:31.590 --> 00:36.750
It will have all the source code that is required and you  will be creating test code starting the

9
00:36.750 --> 00:37.500
next lecture.

10
00:38.660 --> 00:44.490
Once you have the project, you should have Tomcat installed on your machine, go install Tomcat.

11
00:44.510 --> 00:48.320
It is a very simple download, get a Apache  Tomcat nine if you can.

12
00:49.560 --> 00:54.840
Come to Eclipse, go to the server, stab, create a new server.

13
00:56.130 --> 01:00.310
Select Tomcat nine from under  Apache Browse  to your Tomcat directory.

14
01:00.330 --> 01:03.850
Finish it and you  will have a server run once you have the server.

15
01:04.320 --> 01:08.810
Let me get rid of the duplicate here because I already have a Tomcat server.

16
01:09.120 --> 01:11.550
Once you have the server right, click on the project.

17
01:11.910 --> 01:13.500
Go to properties.

18
01:14.460 --> 01:20.050
Search for  targeted run times, if you search for targeted, it will show you targeted run time, select it 

19
01:20.100 --> 01:25.320
and select the server, which you have just added Apache Tomcat nine that will take away any errors

20
01:25.320 --> 01:26.820
you have on the coupon app.

21
01:28.740 --> 01:33.690
Open up the POM.XML , and you  will see that along with the Junit  dependency, it also

22
01:33.690 --> 01:35.400
has the mockito  dependency.

23
01:35.410 --> 01:38.540
It is all set for testing, right.

24
01:38.550 --> 01:39.530
Click on the project.

25
01:40.050 --> 01:44.730
Let's see it in action run as run on server finish.

26
01:46.370 --> 01:52.010
The pace that is getting served  here is the index dot JSB, this application has two JSP  pages and

27
01:52.010 --> 01:55.520
one servelet , very simple application open the index  dot JSP 

28
01:56.270 --> 02:01.210
This is the homepage which has ahref  link and then a form.

29
02:01.970 --> 02:03.170
That is what you see here.

30
02:04.150 --> 02:10.030
The link, when you click on it, it will go to the servlet in the index.JSP  the link is

31
02:10.030 --> 02:14.650
Mapped  to coupon, which is if you go to coupon servlet here.

32
02:15.760 --> 02:19.990
It is map to the servelet it hits the  do get method , because get  is the method when you click on

33
02:19.990 --> 02:20.680
a hyperlink.

34
02:21.680 --> 02:25.920
And this guy, he simply returns back a supersale, that is what you are seeing here.

35
02:25.940 --> 02:33.410
This is the coupon that the user gets copy  that go back paste it  in the text box here, click on this

36
02:33.410 --> 02:35.240
and that gets submitted to the.

37
02:35.270 --> 02:37.040
Servelets do post method.

38
02:37.190 --> 02:44.660
The Do post  method takes the coupon that comes in from the form and it's simply appends  to this text

39
02:44.660 --> 02:44.990
here.

40
02:45.440 --> 02:48.980
Discount for coupon, whatever coupon code you have sent  is 50 percent.

41
02:48.980 --> 02:49.900
It's on hardcoded.

42
02:49.910 --> 02:51.280
We are not going against the database.

43
02:51.290 --> 02:57.830
We are keeping it simple and it sets it on to the request request, get set, attribute, discount and

44
02:57.830 --> 02:59.240
then request dot request.

45
02:59.240 --> 03:05.450
Dispatcher Send the response or give it over to this JSP handle the response.

46
03:06.110 --> 03:11.430
And if you see the response dot JSP it  is one line code here, along with this first directive,

47
03:12.080 --> 03:18.580
it uses the JSP expression language, get this discount out of request and renders it on to the UI.

48
03:18.590 --> 03:24.140
And that is what you are seeing here, a very simple Java web application we have Junit 

49
03:24.140 --> 03:29.690
And Mockito already added as dependencies there are  available under the libraries, if you see you , will

50
03:29.690 --> 03:31.580
have all the maven  dependencies.

51
03:31.940 --> 03:35.620
Have Junit , Hemcrist  Mockito and everything that is required.

52
03:35.890 --> 03:37.700
We're going to write a unit test.

53
03:37.730 --> 03:43.670
What we did just now here is a system or integration test which we are doing manually, will be writing

54
03:43.670 --> 03:47.220
a unit test for this coupon servelet  by mocking out.

55
03:47.240 --> 03:50.780
This HTTP servelet  request , HTTP servelet  response.

56
03:50.900 --> 03:53.090
And also this request despatcher.

57
03:53.450 --> 03:59.840
Whatever the container Tomcat does, we are going to mock  it out using Mockito and then use the Junit

58
03:59.840 --> 04:02.150
to write the test and run it.