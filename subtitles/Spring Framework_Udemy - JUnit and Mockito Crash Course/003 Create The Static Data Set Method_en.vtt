WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.250
In this lecture, will be implementing the

00:00:02.250 --> 00:00:04.950
fourth an important step in every Junit

00:00:04.950 --> 00:00:08.099
parameterized test that is creating a

00:00:08.099 --> 00:00:10.920
static method which will feed in the

00:00:10.920 --> 00:00:13.410
data required for our test will mark it

00:00:13.410 --> 00:00:15.809
with the @parameter annotation from

00:00:15.809 --> 00:00:18.990
junit so go back to the Eclipse IDE and

00:00:18.990 --> 00:00:22.890
our test class and in here let's add a

00:00:22.890 --> 00:00:26.970
new method public static this method

00:00:26.970 --> 00:00:29.670
returns or should return a collection of

00:00:29.670 --> 00:00:32.340
whatever data set we want it returns in

00:00:32.340 --> 00:00:35.370
our case collection of integer arrays

00:00:35.370 --> 00:00:38.730
I'll explain that in a bit let's call

00:00:38.730 --> 00:00:40.920
this method data you can call it

00:00:40.920 --> 00:00:44.550
whatever you want and in here I am going

00:00:44.550 --> 00:00:47.820
to return back a list so I am saying

00:00:47.820 --> 00:00:54.719
arrays dot as list in here new integer

00:00:54.719 --> 00:00:58.109
I'm going to create a two-dimensional

00:00:58.109 --> 00:01:02.489
array in here which will have all the

00:01:02.489 --> 00:01:11.280
different values I want so minus 1 2 will

00:01:11.280 --> 00:01:19.110
result in 1 comma the second array 1 2

00:01:19.110 --> 00:01:22.650
will result in 3 and the third and final

00:01:22.650 --> 00:01:26.549
array which will have let's say 6 comma

00:01:26.549 --> 00:01:34.650
7 will result in 13 semicolon let's

00:01:34.650 --> 00:01:36.270
import the collection hitting control

00:01:36.270 --> 00:01:41.430
one import collections class here add a

00:01:41.430 --> 00:01:43.439
comma in between the two different

00:01:43.439 --> 00:01:46.200
arrays so we have created the data set

00:01:46.200 --> 00:01:48.659
we need here junit expects us to return

00:01:48.659 --> 00:01:51.750
a collection of our data set so we have

00:01:51.750 --> 00:01:54.479
created a collection of single

00:01:54.479 --> 00:01:57.299
dimensional arrays that is each element

00:01:57.299 --> 00:01:59.219
in this collection is a single

00:01:59.219 --> 00:02:01.680
dimensional array then I do this array

00:02:01.680 --> 00:02:04.290
dot as list this two-dimensional array

00:02:04.290 --> 00:02:07.290
will be converted into a list of arrays

00:02:07.290 --> 00:02:10.200
so each element in that list will have a

00:02:10.200 --> 00:02:12.880
single dimensional array with this

00:02:12.880 --> 00:02:16.840
data so each dimension here or each

00:02:16.840 --> 00:02:20.290
array here is this value will go into

00:02:20.290 --> 00:02:23.470
num1 this value will go into num 2

00:02:23.470 --> 00:02:26.170
and this value will go into the result

00:02:26.170 --> 00:02:28.840
at runtime I'll explain the flow again

00:02:28.840 --> 00:02:31.480
once we update our test in the next

00:02:31.480 --> 00:02:33.550
lecture at the end of it when we run our

00:02:33.550 --> 00:02:35.140
tests I will explain how this

00:02:35.140 --> 00:02:37.060
constructor was how the static method

00:02:37.060 --> 00:02:39.580
works and how these values eventually

00:02:39.580 --> 00:02:43.270
are passed into our test method let's

00:02:43.270 --> 00:02:45.130
mark this method with the

00:02:45.130 --> 00:02:49.330
@parameterized annotation or

00:02:49.330 --> 00:02:52.750
parameters annotation from junit and

00:02:52.750 --> 00:02:55.320
we are done.

