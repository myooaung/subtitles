WEBVTT

0
00:00.120 --> 00:05.190
In this lecture, we'll test the do get method to do that, change this test method to do get , to

1
00:05.190 --> 00:10.350
keep it simple hit control D , to get rid of that line, that method.

2
00:10.350 --> 00:11.910
under  test is new.

3
00:12.960 --> 00:21.630
Coupon, servelet  dot do get this guy takes the request and response and he throws an exception, if

4
00:21.630 --> 00:25.740
you point the cursor, it will say it needs to handle exceptional hit control.

5
00:25.740 --> 00:29.280
One Add a throws  declaration Servelet exception  IO exception.

6
00:29.550 --> 00:34.550
But how do we assert or verify the results that come back from this do get method?

7
00:35.040 --> 00:42.090
Go to the servlet, look at the code, it has  single line of code where it gets the response dot writer  out

8
00:42.090 --> 00:42.900
of the response.

9
00:43.110 --> 00:49.080
So this piece here is given by Apache  Tomcat or any server on which our application is run the writer

10
00:49.080 --> 00:51.410
object and then it writes to the Web browser.

11
00:51.750 --> 00:56.700
So we need to mock  this guy out and response dot get writer  is invoked.

12
00:56.880 --> 00:59.550
We need to pass in our own mocked out.

13
00:59.580 --> 00:59.980
writer 

14
01:00.150 --> 01:07.890
So we are going to use the mockitos  when class  you can add that import uptop  import org  or static.

15
01:08.280 --> 01:11.850
The static imports org dot  Mockito, dot.

16
01:13.250 --> 01:14.600
The mockito  class.

17
01:17.680 --> 01:18.250
Dot.

18
01:18.910 --> 01:26.560
star and  all of them save it  right now, go here, create a new string writer

19
01:28.780 --> 01:31.360
Assign this to a local variable.

20
01:32.320 --> 01:40.930
From Java IO hit  control one  assign  statement to a new local variable next, create a new print writer  print

21
01:40.930 --> 01:45.640
writer   this print writer can take any kind of writer  passing the string right there to that constructor.

22
01:47.690 --> 01:56.360
Assigned this by hitting control one import and then assign it to a new local variable as well, use

23
01:56.360 --> 02:07.580
Mockitos  one class when  function response dot get writer  is invoked, then return our own writer  object,

24
02:07.790 --> 02:13.220
then return the print writer , which we have just created up top.

25
02:14.570 --> 02:20.960
Now we can assert, assert  equals within brackets.

26
02:21.920 --> 02:24.230
Super sale of all capital.

27
02:24.500 --> 02:26.840
Super sale is what I am expecting.

28
02:27.020 --> 02:29.690
Comma on the string.

29
02:30.830 --> 02:33.410
writer , which we have created uptop.

30
02:35.330 --> 02:38.570
String writer dot two string.

31
02:40.440 --> 02:45.930
So since we are passing our own print writer  here, this print writer internally uses the string writer

32
02:46.200 --> 02:49.100
and when they do get together, this line is executed.

33
02:49.920 --> 02:53.920
Whatever writer we are passing in that will hold this data.

34
02:54.270 --> 02:58.470
The printer writer  write the data into the string writer  instead of going against the browser.

35
02:58.650 --> 03:03.560
And this super sale will be present inside the string writer 

36
03:03.630 --> 03:05.750
That is what we are asserting  for.

37
03:06.210 --> 03:06.570
Right.

38
03:06.570 --> 03:09.990
Click just run this test so you can select the test.

39
03:10.110 --> 03:10.410
Right.

40
03:10.410 --> 03:10.980
Click on it.

41
03:11.550 --> 03:17.220
Run  as Junit test and it's all green, it only runs that particular test.

42
03:17.220 --> 03:20.210
As you can see, our test passed successfully.

43
03:20.460 --> 03:27.060
So it's that simple to test the servelet  code by mocking out whatever the Tomcat container does in this

44
03:27.060 --> 03:30.900
case, the request, the response, and then the print writer object.

45
03:31.170 --> 03:33.780
And then you have asserted for the results.