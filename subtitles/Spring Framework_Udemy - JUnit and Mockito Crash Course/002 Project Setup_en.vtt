WEBVTT

0
00:00.210 --> 00:06.300
Go to the resources section of this lecture and you will be able to download this dating apis Springboot

1
00:06.300 --> 00:06.840
Project.

2
00:07.140 --> 00:11.460
It will be a zip file unzip the contents of it and you'll find the Dating Api folder.

3
00:12.540 --> 00:17.250
Once you have the unzipped folder, come to your spring tool suit, go to the file menu.

4
00:17.340 --> 00:21.120
Import point it to existing maven projects.

5
00:21.120 --> 00:22.080
Click on Next.

6
00:22.500 --> 00:28.410
Browse to the directory where you how the dating api  the unzipped version and that will import the dating

7
00:28.410 --> 00:30.270
API into your IDE.

8
00:31.530 --> 00:35.970
Once imported, let me walk you through the code that you are going to write the unit test for in

9
00:35.970 --> 00:36.990
the next few lectures.

10
00:37.590 --> 00:43.740
This dating API project has four requirements, as I have already mentioned in the previous lecture.

11
00:44.160 --> 00:45.150
To accomplish this

12
00:46.070 --> 00:51.650
We have a database called Dating db, you don't have to set up this database because we are writing

13
00:51.650 --> 00:53.960
unit tests and not integration tests.

14
00:54.500 --> 01:00.980
This database has two tables user account table that will carry the user information like age, email,

15
01:00.980 --> 01:06.890
gender, phone number and location, and the interest table, which will carry his likes, dislikes,

16
01:06.890 --> 01:08.870
hobbies, profile url and more.

17
01:09.320 --> 01:11.630
The relationship here is a one to one relationship.

18
01:11.630 --> 01:18.980
Every user or user account will have one interest record, so the interest table has a foreign

19
01:18.980 --> 01:23.270
key that points to the primary key in the user account table.

20
01:24.280 --> 01:34.720
Now coming to the code, go to your IDE., go to the source main Java, open up this entity's package.

21
01:35.770 --> 01:37.130
Open the user account.

22
01:37.150 --> 01:43.000
This is the first model class or entity we create that represents the user account database table.

23
01:43.660 --> 01:50.320
And it has all the JPA annotations and you'll also see the Lombok annotations here instead of creating

24
01:50.320 --> 01:55.690
getters, setters, constructors, etc. In our code, we use the Lombok annotations, which makes the

25
01:55.690 --> 01:56.980
code much less cluttered.

26
01:56.980 --> 01:58.840
All the boilerplate coding is gone.

27
01:59.080 --> 02:06.010
Lombok will generate these getters, setters etc into the dot class file that gets generated for this

28
02:06.010 --> 02:06.550
Java file.

29
02:06.560 --> 02:08.200
That's the magic of Lombok.

30
02:08.200 --> 02:11.010
We'll be able to use all those getters , setters in our other classes.

31
02:11.020 --> 02:14.620
As usual, we just don't see them here in the code.

32
02:15.130 --> 02:22.300
Next, the interest represent the interest database table, the second table in the database that is

33
02:22.300 --> 02:23.530
the entity that maps to it.

34
02:23.740 --> 02:28.210
These two guys have one on one relationship, as you can see the one on one annotation.

35
02:28.870 --> 02:32.440
The user account and interest has a one-on-one relationships.

36
02:32.440 --> 02:33.580
So those are the entities.

37
02:33.850 --> 02:35.050
Next is the repos.

38
02:35.290 --> 02:41.140
We have a user account repo and interest repo that allow us to perform crud operations against these

39
02:41.140 --> 02:42.130
two entities.

40
02:42.400 --> 02:47.500
The user account repo, along with crud operations, has an additional method called find matches.

41
02:47.950 --> 02:54.130
That helps us with the last requirement, which is to find matches for a particular user based on his

42
02:54.130 --> 02:56.890
age, city and country.

43
02:57.670 --> 03:02.400
It also receives a ID so that we  will ignore the current user when the matches are found.

44
03:02.410 --> 03:06.340
We don't want the current user for whom we are finding the matches to be returned back.

45
03:06.490 --> 03:11.720
We simply use the age city and country, and we ignore the user for whom we are finding the matches.

46
03:11.740 --> 03:13.090
That's one additional method.

47
03:13.240 --> 03:17.260
The user account repository has, along with all the free crud operations it gets.

48
03:17.620 --> 03:21.730
Now finally, the class under test is the user account controller.

49
03:21.970 --> 03:25.540
This is the class that hosts the restful api.

50
03:26.050 --> 03:32.890
The first method that will be tested is the register user method that takes a user account and it saves

51
03:32.890 --> 03:35.100
it to the database using user repo dot save

52
03:35.830 --> 03:39.790
So this user account repository is being injected here in our unit test.

53
03:39.790 --> 03:41.500
We are going to mock this guy.

54
03:42.740 --> 03:48.560
Next, is the update interest once we have a user account will add a interest to that user account.

55
03:48.650 --> 03:50.180
That is this method.

56
03:50.600 --> 03:56.210
So we'll first find the user account for whom this interest needs to be added when this interest comes

57
03:56.210 --> 03:56.420
in.

58
03:56.660 --> 04:02.750
This interest also has a user account ID, see this 
transient field it  will not be saved to the database. 

59
04:03.020 --> 04:06.020
It is just to be receive it in the request so the user account ID

60
04:06.030 --> 04:08.690
will be used to fetch the user account.

61
04:08.990 --> 04:14.540
That user account will be put on to the interest and then that interest will be saved to the database

62
04:14.540 --> 04:16.090
using interest repo dot save

63
04:16.370 --> 04:22.730
So we are going to mock interest repository when we will test this in lectures later on, then get users.

64
04:22.730 --> 04:27.110
This will fetch all the users and their interest from the database.

65
04:27.290 --> 04:31.340
It will invoke user repo dot, find all.

66
04:31.340 --> 04:33.200
when we fetch the user accounts automatically.

67
04:33.200 --> 04:40.590
User account has a one on one relationship with the interest, so his interest will also be fetched.

68
04:40.610 --> 04:43.600
That will be the method under test, then delete a interest.

69
04:43.610 --> 04:44.720
That's another requirement.

70
04:44.960 --> 04:48.710
We also need to delete a interest given the interest  ID.

71
04:49.100 --> 04:55.340
for that again will be using a mock version of interest repo and will mock the delete by ID call.

72
04:55.730 --> 04:57.920
Last is the find matches.

73
04:58.190 --> 05:07.220
This guy will take a User ID fetches that user from the database first and then users that users

74
05:07.730 --> 05:12.230
age city and country to do the match.

75
05:13.170 --> 05:18.950
That will be the last method under test for which will be mocking the user repo dot by ID and

76
05:18.950 --> 05:19.890
also user repo dot

77
05:19.910 --> 05:21.020
Find matches.

78
05:21.440 --> 05:27.320
I'll be walking you through thoroughly about how we are going to test this class in the next lecture

79
05:27.320 --> 05:27.860
once again.