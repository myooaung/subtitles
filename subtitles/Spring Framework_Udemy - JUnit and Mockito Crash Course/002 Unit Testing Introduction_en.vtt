WEBVTT
Kind: captions
Language: en

00:00:01.560 --> 00:00:04.170
I  will introduce you to what unit

00:00:04.170 --> 00:00:07.379
testing is and why we needed. Unit

00:00:07.379 --> 00:00:10.379
testing is where we test our code at a

00:00:10.379 --> 00:00:13.830
unit or class level that is the test

00:00:13.830 --> 00:00:17.430
all the public methods on a class.We do

00:00:17.430 --> 00:00:19.830
this by providing the different types of

00:00:19.830 --> 00:00:23.070
values or parameters and see if the

00:00:23.070 --> 00:00:26.310
method behave as expected both positive

00:00:26.310 --> 00:00:30.390
as well as the exception scenarios.

00:00:30.390 --> 00:00:32.430
Let's consider a order processing

00:00:32.430 --> 00:00:34.500
application where in we have the order

00:00:34.500 --> 00:00:37.560
processor class with two methods in it.

00:00:37.560 --> 00:00:40.950
One which creates an order and to test

00:00:40.950 --> 00:00:44.010
this create order method will be passing

00:00:44.010 --> 00:00:46.620
in different data inside the order

00:00:46.620 --> 00:00:49.230
object and see if it returns the

00:00:49.230 --> 00:00:53.730
integer order ID back as expected.

00:00:53.730 --> 00:00:55.320
Similarly we have the second method

00:00:55.320 --> 00:00:58.050
called cancel order which throws a

00:00:58.050 --> 00:01:00.780
business exception if the order we are

00:01:00.780 --> 00:01:03.450
trying to cancel is not already present.

00:01:03.450 --> 00:01:08.189
To test this method will pass-in a invalid

00:01:08.189 --> 00:01:11.159
order ID and will see if it throws the

00:01:11.159 --> 00:01:15.329
expected exception back.In the

00:01:15.329 --> 00:01:18.030
object-oriented world for the java ee

00:01:18.030 --> 00:01:21.749
world will not put all our code in one

00:01:21.749 --> 00:01:23.999
single order processor class, our

00:01:23.999 --> 00:01:26.310
application is usually divided into

00:01:26.310 --> 00:01:29.670
layers we're in one class depends on a

00:01:29.670 --> 00:01:32.880
other class. So the order processor will

00:01:32.880 --> 00:01:35.429
call into a order service which will host

00:01:35.429 --> 00:01:38.009
the business logic which inturn can

00:01:38.009 --> 00:01:40.710
call into a order data access object

00:01:40.710 --> 00:01:43.259
which takes care of all the curd work

00:01:43.259 --> 00:01:44.579
connecting to the database and all that.

00:01:44.579 --> 00:01:48.509
Now to unit test the order processor

00:01:48.509 --> 00:01:51.299
class will not be going all the way to

00:01:51.299 --> 00:01:54.600
the service the DAO and then the database.

00:01:54.600 --> 00:01:56.850
Then it will become a integration tes. The

00:01:56.850 --> 00:01:59.459
unit test the order processor we will be

00:01:59.459 --> 00:02:02.490
mocking out the order service.

00:02:02.490 --> 00:02:04.679
Similarly, if we are unit testing the order

00:02:04.679 --> 00:02:07.380
service will be mocking out the order

00:02:07.380 --> 00:02:09.689
DAO and if you are unit testing the order

00:02:09.689 --> 00:02:11.879
DAO we will be mocking out all

00:02:11.879 --> 00:02:15.110
the JDBC APA calls or even the

00:02:15.110 --> 00:02:16.640
hibernate calls depending on what you are

00:02:16.640 --> 00:02:20.480
using for your database access.The idea is

00:02:20.480 --> 00:02:23.360
that each layer is unit tested on its

00:02:23.360 --> 00:02:28.670
own and it works as expected. Due to this

00:02:28.670 --> 00:02:31.160
there are several advantages of unit

00:02:31.160 --> 00:02:35.000
testing starting with great quality. When

00:02:35.000 --> 00:02:39.140
we write unit tests  we will catch

00:02:39.140 --> 00:02:41.510
defects right during development and the

00:02:41.510 --> 00:02:43.490
number of defects that are caught during

00:02:43.490 --> 00:02:45.890
the testing phase or even production

00:02:45.890 --> 00:02:48.680
will go down improving the quality of

00:02:48.680 --> 00:02:53.900
any product. Since we mock out all the

00:02:53.900 --> 00:02:56.420
dependencies and test the unit or a

00:02:56.420 --> 00:03:00.530
class on it own the test run very fast and

00:03:00.530 --> 00:03:04.550
give instant feedback. This is because there

00:03:04.550 --> 00:03:06.620
is no database call or webservice

00:03:06.620 --> 00:03:08.780
call will be mocking out all those calls.

00:03:08.780 --> 00:03:12.350
we can run these test right out of ids

00:03:12.350 --> 00:03:14.930
like eclipse without any additional

00:03:14.930 --> 00:03:20.540
setup. Last but not the least over time as

00:03:20.540 --> 00:03:22.580
write these great unit tests they will

00:03:22.580 --> 00:03:26.269
become a regression shoot that is if we

00:03:26.269 --> 00:03:29.180
or someother developer is changing or

00:03:29.180 --> 00:03:31.370
making a small change to a part of an

00:03:31.370 --> 00:03:35.120
application or product we can update

00:03:35.120 --> 00:03:38.690
the current unit test as well as you can run all the

00:03:38.690 --> 00:03:40.790
unit test for the products to ensure

00:03:40.790 --> 00:03:44.660
that he didn't break because of his

00:03:44.660 --> 00:03:46.430
change in break another part of the

00:03:46.430 --> 00:03:51.530
application. Junit is a easy way to

00:03:51.530 --> 00:03:54.560
unit test or write unit tests and

00:03:54.560 --> 00:03:57.290
mockito complemented complements it by

00:03:57.290 --> 00:04:00.260
mocking out all the dependencies we need.

00:04:00.260 --> 00:04:02.630
Will learn JUnit and mockito in the

00:04:02.630 --> 00:04:07.209
first second half of this course.

