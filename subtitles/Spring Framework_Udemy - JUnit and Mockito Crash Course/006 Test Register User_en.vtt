WEBVTT

0
00:00.150 --> 00:05.220
In this lecture will test the very first method, which is the register user method to do that.

1
00:05.520 --> 00:13.100
Go to the test go to the test method that we have change it to test register user.

2
00:14.670 --> 00:22.770
Controller Dot Register User is the method under test, we invoke it by passing in a new user account.

3
00:23.820 --> 00:27.630
You can extract this to a local variable if you want to or leave it like that.

4
00:28.110 --> 00:32.250
Then we mock out the call, when from Mockito.

5
00:32.250 --> 00:37.080
If you hit control space import it from Mockito, it is a static import if you go up top.

6
00:38.300 --> 00:47.030
Right here, mockito dot when scroll down when user account repository dot save.

7
00:47.060 --> 00:49.040
That's the method we want to

8
00:49.940 --> 00:56.750
Invoke what will this save take, it takes this new user account here, so you can extract this hit control

9
00:56.750 --> 00:59.450
one extract to a local variable.

10
00:59.750 --> 01:08.210
Move it up top control x right there and then pass it the user account when the save method is invoked

11
01:08.210 --> 01:10.490
using the user account, then return.

12
01:12.180 --> 01:14.460
A new user account.

13
01:17.700 --> 01:23.520
Select this hit control, one assigned statement to a local variable or extract to a local variable.

14
01:23.730 --> 01:31.500
Call this saved user account on the saved user account will just add an IDE saved user account dot

15
01:31.500 --> 01:31.860
set

16
01:31.860 --> 01:36.390
ID is equal to or set ID pass in the, ID say, one two three.

17
01:37.080 --> 01:42.570
We can also optionally set the fields on this user account, but it doesn't matter because we are using

18
01:42.570 --> 01:45.150
mocking, we are not saving the data into the database.

19
01:45.510 --> 01:51.780
database, otherwise you can do as follows user account dot set age, etc. But it doesn't matter.

20
01:53.090 --> 01:55.460
We'll just verify the ID. if it comes back.

21
01:56.180 --> 01:57.860
So we have mocked out the call.

22
01:58.190 --> 02:00.020
Then you hit control one on this guy.

23
02:01.060 --> 02:05.380
Assign  statement to a new local variable called this the output.

24
02:06.900 --> 02:13.140
Output user account the user account that is returned finally and the controller method is called, let's

25
02:13.140 --> 02:16.980
finish it and I'll walk you through the code one more time when this happens.

26
02:17.280 --> 02:24.390
We need to verify, assert not null is the first thing we do on the output user account

27
02:25.130 --> 02:25.680
Dot

28
02:27.570 --> 02:32.850
Get ID first, we can verify if this output producer account is not null, then you can copy this whole

29
02:32.850 --> 02:34.000
thing, paste it.

30
02:34.020 --> 02:38.490
We verify output user account, dot get ID is not null.

31
02:38.940 --> 02:41.490
And finally, we will do a assert

32
02:43.180 --> 02:47.260
Equals the expected is one two three.

33
02:47.530 --> 02:57.550
And the actual is the ID, which we want to assert on output user account dot get IDE do a control shift F2

34
02:57.550 --> 02:58.250
format.

35
02:58.270 --> 02:59.470
That's our test.

36
02:59.470 --> 03:02.290
And also we can do a mockito verify at the end.

37
03:02.590 --> 03:12.820
You can verify that the user account repositories dot save method is really invoked this dot save should go

38
03:12.820 --> 03:19.360
outside the brackets let me cut it and paste it outside with what entity with the

39
03:19.360 --> 03:21.170
user account entity?

40
03:21.190 --> 03:27.100
We are just verifying that whatever we have stubbed up top here using the when class etc., that invocation

41
03:27.400 --> 03:28.640
is really happening.

42
03:28.660 --> 03:30.520
That's the verification we are doing.

43
03:30.520 --> 03:34.360
We can do it even before these assets are after the assets.

44
03:35.850 --> 03:41.580
Let's run this and then I will walk you through the code real quick, right click run as JUnit test.

45
03:43.140 --> 03:47.910
That will load up the spring environment, and at the end of it, it will run the test and we should

46
03:47.910 --> 03:49.150
see everything in green here.

47
03:49.170 --> 03:54.390
If you go to the Junit console, you'll see that our test has passed successfully.

48
03:54.390 --> 03:55.830
Everything is in green.

49
03:56.100 --> 04:04.170
So in this lecture, you have successfully tested the controllers register user method by mocking out

50
04:04.170 --> 04:07.950
the call to user account repository Dot Save Method.

51
04:08.280 --> 04:14.700
When the save is invoked with the user account, we are returning a saved user account, which just has

52
04:14.700 --> 04:15.660
the id field in it.

53
04:15.660 --> 04:19.260
We can fill in the other fields if you want to and you can do assertions on them.

54
04:19.260 --> 04:21.920
But in this case, we are only asserting for the ID

55
04:22.290 --> 04:24.180
And when it comes back, we do the assertions.

56
04:24.510 --> 04:27.300
Along with that, we also verify using mockito verify.

57
04:27.540 --> 04:29.640
We verify the repository.

58
04:29.640 --> 04:31.650
Save method was really called.