WEBVTT

0
00:00.430 --> 00:03.000
We're going to write the test in three simple steps.

1
00:03.010 --> 00:06.700
First, we will mock, second will invoke the method under test.

2
00:06.700 --> 00:08.990
Third, we are going to verify and assert.

3
00:09.490 --> 00:13.630
So let's start by defining the class under test as a field in the test class.

4
00:13.900 --> 00:15.610
Private product.

5
00:16.000 --> 00:18.670
Rest controller, call it controller.

6
00:20.880 --> 00:28.800
Next, we need two things to be injected into this controller private rest template, call it template or

7
00:28.890 --> 00:30.980
let's call it a rest template.

8
00:31.830 --> 00:39.360
And the third one is the product repo that is used by the product rest controller call it Repo.

9
00:39.780 --> 00:46.170
These two needs to be mocked hit  control one on the rest template import that, mock it out using the @

10
00:46.500 --> 00:53.160
mock annotation again, control one import that you can copy the @ mock annotation on the product repo

11
00:53.520 --> 00:58.520
and we inject those two using inject Mock's annotation.

12
00:59.190 --> 01:06.750
Now we have the mocked classes stub the method calls using when method when the first call we want to mock

13
01:06.750 --> 01:07.710
is a little tricky.

14
01:07.920 --> 01:10.560
Rest template dot get for object.

15
01:10.560 --> 01:17.310
It takes string u r l which also should have the code, the product code the coupon code that we are

16
01:17.310 --> 01:17.700
using.

17
01:17.850 --> 01:22.950
And then it also takes a coupon class as the parameter and it returns a coupon back.

18
01:22.950 --> 01:31.260
With that in mind, go to the test rest template dot get for  object that takes a u r l.

19
01:32.070 --> 01:33.660
We don't need the third parameter.

20
01:33.960 --> 01:39.000
The second parameter is the coupon dot class.

21
01:39.570 --> 01:44.550
And the first parameter is the u r l, as I said, @ value annotation.

22
01:44.550 --> 01:48.850
We have issues using that with Mockito, so we have other ways of doing it.

23
01:49.050 --> 01:56.040
As I said you can explore them or simply go to the properties file under source main resources.

24
01:56.040 --> 02:02.190
That guy right there go to application dot properties, grab this u r l and will define it as

25
02:02.190 --> 02:06.540
a constant here within double quotes we have the u r l plus.

26
02:06.810 --> 02:11.790
It also needs the coupon code, which is super sale.

27
02:12.860 --> 02:14.880
Extract these two into constants.

28
02:14.900 --> 02:20.510
The first guy hit control, one extract to a constant, call it.

29
02:22.060 --> 02:23.910
Coupon Service u r l.

30
02:24.810 --> 02:26.350
Let's go back here.

31
02:26.530 --> 02:33.340
This guy is coupon underscores these underscore u r l copy.

32
02:33.340 --> 02:38.650
Come back here, replace that and 2nd Super Sale can be extracted in to coupon code.

33
02:38.650 --> 02:40.450
Constant extract to constant.

34
02:41.440 --> 02:48.540
You can call it supersale or you can call it coupon code, coupon underscore code is much more meaningful

35
02:50.230 --> 03:01.780
when that happens at the end dot then return a new coupon, object back, extract this new coupon

36
03:01.780 --> 03:06.780
select it hit  control one extract to a local variable call it coupon.

37
03:07.510 --> 03:12.880
Let me add some lines at the end so that you can see it better on this coupon will only set those fields

38
03:12.880 --> 03:16.240
which are required for our test coupon dot set.

39
03:16.690 --> 03:23.650
The first field is the code, which is the coupon code, which we have up top as a constant coupon

40
03:23.650 --> 03:24.040
code.

41
03:24.370 --> 03:31.240
Next will define a discount that will be used in our logic coupon, dot set discount, which is a big

42
03:31.240 --> 03:34.510
decimals so new big decimal.

43
03:35.080 --> 03:36.550
ten is the discount

44
03:36.550 --> 03:38.870
Those two fields are good enough for our test case.

45
03:39.550 --> 03:42.300
So that's the first STUBING, which is very important.

46
03:42.310 --> 03:43.990
And also we need to set this.

47
03:43.990 --> 03:50.680
u r l on to the controller because here we are testing using Mockito.

48
03:50.860 --> 03:52.810
This @ value annotation won't work.

49
03:52.810 --> 04:00.550
So we have to invoke the set coupon code u r  l on the class under test, which is controller dot set coupon

50
04:00.550 --> 04:00.940
service.

51
04:00.940 --> 04:10.030
u r l and pass in the u r l, which we have as a constant. One more Stubbing to do one more when class

52
04:10.030 --> 04:21.760
this time on the repository when Repo dot save is invoked with a new product that we create

53
04:23.350 --> 04:29.830
dot then return back the new product so you can extract this into a local variable, select new

54
04:29.830 --> 04:36.970
product, extract to a new local variable call it product, and let's move this up top so that we have all these

55
04:36.970 --> 04:40.960
in one place and here we return the same product back.

56
04:42.800 --> 04:49.940
Let's set some fields on this product dot set coupon code is, again, coupon code that we have as

57
04:49.940 --> 04:51.510
a constant product dot

58
04:51.830 --> 04:56.690
Don't forget to set the price, otherwise we will have some null pointers and the calculation happens.

59
04:56.690 --> 05:00.490
New big decimal 100 is the product price.

60
05:00.680 --> 05:01.240
Save it.

61
05:01.490 --> 05:04.580
So we have pretty much all the stubbing in place.

62
05:04.910 --> 05:11.690
Next, invoke the method itself on the class under test, which is controller dot create is the

63
05:11.690 --> 05:18.980
method pass it  the product we have already created hit control one assign statement to a new local variable

64
05:18.980 --> 05:21.980
called this product created.

65
05:24.060 --> 05:31.200
You can do some assertions or even before we assert we can verify some calls using verify, verify,

66
05:31.200 --> 05:37.350
the first call is on the rest template on the rest template dot.

67
05:37.770 --> 05:45.660
You can verify that get for object with the exact parameters we are passing here is being used so we

68
05:45.660 --> 05:48.480
can pick that string one, take out the last parameter.

69
05:48.480 --> 05:55.320
You can actually copy the parameters from up top here and replace these two parameters, get rid of

70
05:55.320 --> 05:57.210
it paste the parameters.

71
05:57.210 --> 05:58.700
That's the first verification.

72
05:59.730 --> 06:08.470
Second, verify that Repo dot save is being invoked with the exact parameter which is the product.

73
06:08.610 --> 06:13.680
Now we can start doing the assertions, assert not null.

74
06:15.450 --> 06:22.260
The product that comes back which is product created will do one more assertion assert equals.

75
06:25.100 --> 06:29.990
The product that comes back should have what did we set on the product, we have the coupon code and

76
06:29.990 --> 06:34.520
we also have set the price so you can verify either of those two.

77
06:34.530 --> 06:36.170
Let's go with the coupon code.

78
06:36.440 --> 06:37.280
That will be enough.

79
06:38.060 --> 06:49.400
Expected is coupon code and the actual is product created dot coupon code.

80
06:49.410 --> 06:51.400
You can do other assertions as well.

81
06:51.680 --> 06:52.420
It's up to you.

82
06:53.300 --> 06:56.000
So to summarize in this lecture, we have done a lot of work.

83
06:56.000 --> 06:59.670
We have mocked out everything that is required for our unit test 

84
06:59.670 --> 07:06.470
Then you have stubbed out the method calls and you have invoked the actual method under test, you have verified that everything

85
07:06.470 --> 07:09.500
else will be invoked when that method is called.

86
07:09.890 --> 07:16.030
And then you have done the assertions lets ensure that the coupon u r l s in the stubbing are right.

87
07:16.040 --> 07:17.280
It has a coupon code.

88
07:17.420 --> 07:19.160
Yeah, we are setting the u r l looks good.

89
07:19.460 --> 07:19.770
Right

90
07:19.770 --> 07:22.610
Click to run as J Unit test.

91
07:27.000 --> 07:33.420
Once it finishes the  Junit, there we go, it's all green and happy, so you have successfully returned

92
07:33.420 --> 07:35.100
a unit test for the create method.