WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.070
In this lecture we will be creating a

00:00:02.070 --> 00:00:04.890
simple Java project called mockito

00:00:04.890 --> 00:00:08.250
scrapbook. This project will have a class

00:00:08.250 --> 00:00:13.650
B with a void method in it which class A will

00:00:13.650 --> 00:00:16.560
use has a user's void method method

00:00:16.560 --> 00:00:19.170
which calls into class B which class A

00:00:19.170 --> 00:00:21.900
depends on so we'll start using this

00:00:21.900 --> 00:00:25.260
project to learn how to stub void method

00:00:25.260 --> 00:00:28.529
using mockito we will then expand on

00:00:28.529 --> 00:00:31.320
this project and add whatever we want to

00:00:31.320 --> 00:00:34.020
learn other API that is available in

00:00:34.020 --> 00:00:36.000
mockito as well as any new features

00:00:36.000 --> 00:00:38.070
that are introducing mockito by the

00:00:38.070 --> 00:00:40.649
mockito team i will be adding them to

00:00:40.649 --> 00:00:43.770
this scrapbook project in the future so

00:00:43.770 --> 00:00:45.420
let's create the simple scrapbook

00:00:45.420 --> 00:00:50.190
project by launching this Eclipse IDE go

00:00:50.190 --> 00:00:56.219
to file menu say new java project call it

00:00:56.219 --> 00:01:03.600
mockito scrapbook hit finished create

00:01:03.600 --> 00:01:06.510
the test folder say new source folder

00:01:06.510 --> 00:01:09.930
test hit finished in this lecture will add two

00:01:09.930 --> 00:01:12.119
simple classes to this starting with

00:01:12.119 --> 00:01:20.490
class B package name com.bharath.mockito.scrapbook

00:01:20.490 --> 00:01:26.640
finish class B will have a

00:01:26.640 --> 00:01:32.520
very simple method called publicvoid

00:01:32.520 --> 00:01:35.520
method can call it whatever you

00:01:35.520 --> 00:01:38.909
want this void method doesn't have any

00:01:38.909 --> 00:01:40.590
parameters but it simply throws a

00:01:40.590 --> 00:01:42.930
exception

00:01:42.930 --> 00:01:48.360
that's what we need not really implement

00:01:48.360 --> 00:01:50.549
this void  method because of the power of

00:01:50.549 --> 00:01:52.660
mockito we can mock this out at runtime

00:01:52.660 --> 00:01:56.009
now let's create Class A to use

00:01:56.009 --> 00:01:59.009
this Class B right click on the package say

00:01:59.009 --> 00:02:05.750
new class class A finish

00:02:05.750 --> 00:02:11.150
public lets have this method as int users

00:02:11.150 --> 00:02:15.830
void method is the name of this method

00:02:15.830 --> 00:02:25.220
let's create the instance of class B here

00:02:25.220 --> 00:02:30.200
new B assign this to a new local variable

00:02:30.200 --> 00:02:33.800
this method should return integer so hit ctrl 1

00:02:33.800 --> 00:02:36.020
add a return statement

00:02:36.020 --> 00:02:39.200
let's convert this B into a field

00:02:39.200 --> 00:02:43.670
place your courser on B hit ctrl one convert local

00:02:43.670 --> 00:02:47.480
variable to field let's create a

00:02:47.480 --> 00:02:50.030
constructor instead of setter here we'll use a

00:02:50.030 --> 00:02:53.030
constructor to set this dependency

00:02:53.030 --> 00:03:01.940
public A parameter is of type B in here

00:03:01.940 --> 00:03:06.260
This.B=B so will use this

00:03:06.260 --> 00:03:08.330
constructor to create an instance of A

00:03:08.330 --> 00:03:11.720
and set the dependency on B we can take

00:03:11.720 --> 00:03:16.910
this out of here now here will CallB.void

00:03:16.910 --> 00:03:22.340
method hit control 1 to fix

00:03:22.340 --> 00:03:24.709
error we have to either handle the

00:03:24.709 --> 00:03:27.170
exception or declare it using a throws

00:03:27.170 --> 00:03:28.940
declaration let's handle it using a

00:03:28.940 --> 00:03:32.480
try-catch block remove this to do here by

00:03:32.480 --> 00:03:37.280
pointing your curser hit ctrlD take out this

00:03:37.280 --> 00:03:41.239
e.print stack trace to simply throw a new runtime exception

00:03:41.239 --> 00:03:43.459
we're going to wrap the checked exception inside

00:03:43.459 --> 00:03:48.620
runtime exception the constructor of it pass the

00:03:48.620 --> 00:03:51.230
checked exception that comes back and

00:03:51.230 --> 00:03:53.600
we are all set so we have created a

00:03:53.600 --> 00:03:57.140
class B with the void method and Class A

00:03:57.140 --> 00:04:01.100
which uses that ClassB void method

00:04:01.100 --> 00:04:03.709
In the next lecture we will test this

00:04:03.709 --> 00:04:06.079
classA by mocking out the void method in

00:04:06.079 --> 00:04:09.790
class B using mockito.

