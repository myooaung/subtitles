WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.970
So far while we are stubbing out our method

00:00:02.970 --> 00:00:06.029
calls using the when method or when we

00:00:06.029 --> 00:00:07.799
are verifying the method calls on the

00:00:07.799 --> 00:00:09.750
mockedout object we have been passing the

00:00:09.750 --> 00:00:12.360
exact object type for example we have

00:00:12.360 --> 00:00:14.580
been creating the other instance and

00:00:14.580 --> 00:00:17.340
passing that in in case of primitive

00:00:17.340 --> 00:00:19.289
types for example and we are cancelling

00:00:19.289 --> 00:00:21.960
the order we have been passing the value

00:00:21.960 --> 00:00:25.289
1234 the order ID instead of this

00:00:25.289 --> 00:00:28.529
mockito gives us a matcher API

00:00:28.529 --> 00:00:31.710
which makes our job a lot more easier

00:00:31.710 --> 00:00:32.969
and we are stubbing out for example

00:00:32.969 --> 00:00:33.960
if oyu scroll it down

00:00:33.960 --> 00:00:35.940
listen to one of the cancel methods

00:00:35.940 --> 00:00:38.399
where we, we are passing the

00:00:38.399 --> 00:00:41.730
order ID instead of this order ID i can

00:00:41.730 --> 00:00:44.760
simply say any control space there are

00:00:44.760 --> 00:00:47.250
so many matcher methods that are available from

00:00:47.250 --> 00:00:49.739
that mockito matchers class all these

00:00:49.739 --> 00:00:51.809
are static method in our case i need

00:00:51.809 --> 00:00:54.780
that any int because the data type we

00:00:54.780 --> 00:00:57.600
have to pass in is integer i can simply

00:00:57.600 --> 00:01:00.750
say any int and if I run our methods

00:01:00.750 --> 00:01:02.940
everything still works everything is

00:01:02.940 --> 00:01:03.870
still green

00:01:03.870 --> 00:01:05.790
so it's a convenient way to use the

00:01:05.790 --> 00:01:09.420
matchers and to make sure that the values

00:01:09.420 --> 00:01:11.610
that we are passing in are of the exact

00:01:11.610 --> 00:01:13.530
time and it's also easy for us we not

00:01:13.530 --> 00:01:15.869
create the entire object for example in

00:01:15.869 --> 00:01:17.610
case of order let's go back to this

00:01:17.610 --> 00:01:18.750
place

00:01:18.750 --> 00:01:21.060
order method the very first test we are

00:01:21.060 --> 00:01:22.979
written by one of the place orders

00:01:22.979 --> 00:01:25.140
method instead of creating this instance

00:01:25.140 --> 00:01:28.590
of the object i can simply say then I'm

00:01:28.590 --> 00:01:31.320
stubbing out the do not create i can say

00:01:31.320 --> 00:01:37.620
any and the any method takes a classname class

00:01:37.620 --> 00:01:40.290
instance

00:01:40.290 --> 00:01:42.479
order not instance order.class we have to tell it

00:01:42.479 --> 00:01:43.920
which class

00:01:43.920 --> 00:01:48.780
it should be used for the any matcher

00:01:48.780 --> 00:01:51.630
from my test again still works so it has stubbed

00:01:51.630 --> 00:01:54.659
out for any order if the DAO's create

00:01:54.659 --> 00:01:57.000
method is called with any order it will

00:01:57.000 --> 00:01:57.930
still work

00:01:57.930 --> 00:02:00.119
it doesn't matter so here the order that

00:02:00.119 --> 00:02:02.219
is being passed is this but the mockitoAPI

00:02:02.219 --> 00:02:04.170
doesn't care because we have used

00:02:04.170 --> 00:02:06.600
the matcher and we have told it as long

00:02:06.600 --> 00:02:08.970
as some order comes into the create

00:02:08.970 --> 00:02:12.360
method then return a new picture there are

00:02:12.360 --> 00:02:12.720
several

00:02:12.720 --> 00:02:14.250
matcher method available like this

00:02:14.250 --> 00:02:17.790
any in any long etc easy references go

00:02:17.790 --> 00:02:21.060
to the mockito download your downloads

00:02:21.060 --> 00:02:25.260
mockito go to the javadoc open the

00:02:25.260 --> 00:02:29.070
index.html scroll it down all the way on

00:02:29.070 --> 00:02:30.900
the left side calls down to the matchers

00:02:30.900 --> 00:02:36.660
class in here click on matchers

00:02:36.660 --> 00:02:39.840
against call it down all the way to the

00:02:39.840 --> 00:02:44.040
bottom and you will find several useful

00:02:44.040 --> 00:02:45.270
methods here

00:02:45.270 --> 00:02:48.570
any-any anyboolean, any bite so play

00:02:48.570 --> 00:02:50.070
around with these methods and if you

00:02:50.070 --> 00:02:54.650
have any questions you can always ask me.

