WEBVTT

0
00:00.240 --> 00:06.300
The next step is to create the coupon rest controller and expose out the restful API so that it can be

1
00:06.480 --> 00:10.830
later on used by the product service to do that, go to sts.

2
00:11.370 --> 00:11.730
Right 

3
00:11.730 --> 00:21.690
click on one of the packages, new class call it coupon rest controller that will go into a package called

4
00:21.690 --> 00:24.120
springcloud.Controllers.

5
00:25.360 --> 00:33.130
Finish, to make this restful control mark it with @ rest controller annotation from spring.

6
00:34.260 --> 00:40.860
Next, we can also use the ,we should also use the request mapping annotation, request, mapping

7
00:40.860 --> 00:44.320
annotation to map this restfully API to a particular "/".

8
00:44.320 --> 00:45.750
so that the client can use it.

9
00:46.020 --> 00:48.480
Call it coupon API.

10
00:50.010 --> 00:51.780
This controller will have two methods.

11
00:51.810 --> 00:59.190
The first method is a public, it returns a coupon back coupon after creating the coupon, so it is

12
00:59.190 --> 01:03.890
responsible for creating the coupon in the database and it will return that coupon back.

13
01:04.500 --> 01:06.680
So it takes a coupon as well.

14
01:06.690 --> 01:13.170
Coupon coupon hit control one, import the coupon from the model package.

15
01:13.650 --> 01:16.440
And within this we need to use the repository hit control.

16
01:16.440 --> 01:20.400
one return add a written statement returns a coupon back.

17
01:20.400 --> 01:21.600
Will change that in a second.

18
01:24.030 --> 01:35.600
Inject the repository, so Coupon repo is the interface, call it repo Mark this with @ auto wire annotation.

19
01:37.590 --> 01:42.990
So this coupon repo at runtime Spring will provide an instance of that, the implementation for it for

20
01:42.990 --> 01:43.200
us.

21
01:43.410 --> 01:50.130
And within this create method, we simply use repo dot, save, invoke the same method, passing the

22
01:50.130 --> 01:56.850
coupon that is passed from the client, whatever the client sends in the rest request, and then once it

23
01:56.850 --> 02:02.010
is save to the database, this repo.save will return the Saved coupon, which will have the I.D. on

24
02:02.010 --> 02:02.130
it.

25
02:02.140 --> 02:04.360
We are returning that back to the client.

26
02:04.710 --> 02:12.420
Now Mark, this method with @request mapping, annotation, request mapping within brackets value

27
02:12.630 --> 02:16.910
is used to give it at ("/coupons")

28
02:17.760 --> 02:24.510
So we are adding the new coupon that the client is sending to a collection of coupons which already

29
02:24.510 --> 02:26.290
exists in the database, 

30
02:26.610 --> 02:30.870
The method is equal to request method.

31
02:31.530 --> 02:36.570
The enumeration.post is the method that should be used to create objects.

32
02:37.650 --> 02:41.460
The second and the last method is get coupon method.

33
02:41.460 --> 02:45.770
This gui also returns a coupon, but it returns the existing coupon.

34
02:45.780 --> 02:49.530
So call it get coupon within brackets.

35
02:49.770 --> 02:53.880
String code given a code, it should return a coupon back.

36
02:53.880 --> 02:57.420
Not the id, but the code hit control one add a written statement.

37
02:59.010 --> 03:05.760
And mark this with annotations, and then we can implement the method at request, mapping annotation

38
03:07.200 --> 03:16.890
within brackets, value is equal to then double quotes, slash coupons, slash within angler brackets

39
03:17.070 --> 03:22.050
code so the client will pass in the code for which we need to return the coupon.

40
03:22.050 --> 03:33.540
Comma the method outside the double quotes comma method is equal to request method dot get by default

41
03:33.540 --> 03:38.490
it is get if you don't specify any method here by default spring will assume get.

42
03:38.730 --> 03:39.990
But this is more readable.

43
03:40.560 --> 03:45.750
Looks at the methods it will automatically know this is a good method and the implementation is super

44
03:45.750 --> 03:46.080
simple.

45
03:46.080 --> 03:50.940
Written repo dot find by code.

46
03:51.180 --> 03:52.680
This method doesn't exist yet.

47
03:52.680 --> 03:54.180
So type in as if it exists.

48
03:54.180 --> 04:01.460
Find by B capital y small C capital  code passing the code.

49
04:01.740 --> 04:05.190
That's the beauty of springdata jpa hit control one.

50
04:06.360 --> 04:14.310
And create method find by code that is all that is required automatically, Spring data jpa will use

51
04:14.310 --> 04:22.950
the code that is passed in here and it will create a select query select star from or select the column names

52
04:22.950 --> 04:26.380
from the database table called Coupon where the code.

53
04:26.400 --> 04:31.920
This gui here is equal to whatever code is passed in from the client and we are automatically using

54
04:31.920 --> 04:32.500
it here.

55
04:32.760 --> 04:36.060
So these are the finder by the support that spring data jpa has

56
04:36.240 --> 04:40.680
We need not write any SQL simply by writing java methods like this.

57
04:40.830 --> 04:43.530
Internally spring data generates the code for us.

58
04:43.530 --> 04:48.500
If you are taken my spring data jpa course or my end to end java project course you already know this.

59
04:49.080 --> 04:53.790
So in this lecture you have implemented the restful controller that has two methods

60
04:54.060 --> 04:55.770
The first method creates a coupon.

61
04:56.310 --> 05:02.700
The second method returns an existing coupon, given a coupon code in the url and you also

62
05:02.700 --> 05:05.820
implemented a find by code method in the repository.