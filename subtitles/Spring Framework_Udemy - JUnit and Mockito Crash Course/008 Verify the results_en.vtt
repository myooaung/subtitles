WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.879
In the previous lecture, we have started testing

00:00:02.879 --> 00:00:05.520
our order BOimpl class by

00:00:05.520 --> 00:00:08.189
using the mockito API we have mocked out

00:00:08.189 --> 00:00:10.950
the orderDAO by using the @moc

00:00:10.950 --> 00:00:13.650
annotation from the mockito API we have

00:00:13.650 --> 00:00:17.010
set up the init mocks inside the junit

00:00:17.010 --> 00:00:20.279
setup method by marking it with @Before and

00:00:20.279 --> 00:00:22.560
also we have set up the expectations by

00:00:22.560 --> 00:00:25.800
using the static methods when and then

00:00:25.800 --> 00:00:28.890
returned from the mockitos mockito class.

00:00:28.890 --> 00:00:33.570
Now in this lecture we will assert

00:00:33.570 --> 00:00:35.550
the results and we verify whether the

00:00:35.550 --> 00:00:37.649
methods on this mocketout objects are

00:00:37.649 --> 00:00:40.320
really getting called because when we call

00:00:40.320 --> 00:00:44.489
the DOs place order method the DAOs

00:00:44.489 --> 00:00:45.989
create order method should be called

00:00:45.989 --> 00:00:49.829
and we have mocked out this result to

00:00:49.829 --> 00:00:53.340
return 1 so we should get a true value

00:00:53.340 --> 00:00:57.210
back from our BO let's first

00:00:57.210 --> 00:00:58.350
call

00:00:58.350 --> 00:01:00.899
let me add some lines at the end so that

00:01:00.899 --> 00:01:05.189
you can see clearly lets call

00:01:05.189 --> 00:01:08.549
BO.placeorder will pass in the order

00:01:08.549 --> 00:01:11.010
object which we have already created and

00:01:11.010 --> 00:01:13.740
we are using that order object and we

00:01:13.740 --> 00:01:17.580
set the expectations as well control 1

00:01:17.580 --> 00:01:20.850
we're not testing this for exceptions so

00:01:20.850 --> 00:01:24.509
let's add a throws class in here we are

00:01:24.509 --> 00:01:26.640
testing a positive senario in here assign

00:01:26.640 --> 00:01:31.110
this to a local variable and call it

00:01:31.110 --> 00:01:39.000
result will use the assert true from the

00:01:39.000 --> 00:01:42.119
junit assert statements static assert

00:01:42.119 --> 00:01:43.170
statements

00:01:43.170 --> 00:01:46.470
result so we are asserting

00:01:46.470 --> 00:01:49.560
that the result is true now to run this test

00:01:49.560 --> 00:01:53.640
now to run this test go to display button here run as the

00:01:53.640 --> 00:01:56.640
junit tests so we are all good

00:01:56.640 --> 00:01:58.799
our test is green that means our mocks

00:01:58.799 --> 00:02:00.390
are working beautifully

00:02:00.390 --> 00:02:04.890
now let's verify that our mocked out  method

00:02:04.890 --> 00:02:07.530
is really getting called it is otherwise

00:02:07.530 --> 00:02:09.119
our test would have failed but let's make

00:02:09.119 --> 00:02:10.379
sure it is getting called

00:02:10.379 --> 00:02:13.500
let's use the verify method available

00:02:13.500 --> 00:02:15.720
again on the mockito class this is a static

00:02:15.720 --> 00:02:23.340
method verify DAO.create

00:02:23.340 --> 00:02:25.140
order order

00:02:25.140 --> 00:02:28.320
by default this method verifies that the

00:02:28.320 --> 00:02:29.910
method that we are asking you to verify

00:02:29.910 --> 00:02:34.260
is called once right click on the class

00:02:34.260 --> 00:02:42.510
go to run as junit test there we go its all

00:02:42.510 --> 00:02:46.380
green that means the create method on the

00:02:46.380 --> 00:02:48.690
DAO is indeed getting called when we are

00:02:48.690 --> 00:02:51.630
calling the BO.placeorder so we

00:02:51.630 --> 00:02:54.300
have successfully demonstrated how to use

00:02:54.300 --> 00:02:56.340
mocking in unit testing we have

00:02:56.340 --> 00:02:59.040
first stubbedout the class or the

00:02:59.040 --> 00:03:01.380
dependency then we have setup the

00:03:01.380 --> 00:03:04.080
expectations and then we have verified

00:03:04.080 --> 00:03:08.160
the results as well, this verify call can

00:03:08.160 --> 00:03:11.160
be used for multiple times by default it

00:03:11.160 --> 00:03:13.170
verifies if its single time but it

00:03:13.170 --> 00:03:14.760
can use for multiple times

00:03:14.760 --> 00:03:18.680
I'll show that in lectures later on.

