WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.820
Mockito support consecutive calls that is

00:00:03.820 --> 00:00:06.980
we can stubout a chain of methods

00:00:06.980 --> 00:00:09.900
that is if this void method is called more than one time

00:00:09.900 --> 00:00:13.140
You can tell mockito what should be done for the first time

00:00:13.140 --> 00:00:16.060
What should be done the second time and so on

00:00:16.060 --> 00:00:19.940
that is where this do nothing method is very useful.

00:00:19.940 --> 00:00:23.020
By default you need not stubout the void methods

00:00:23.020 --> 00:00:26.180
for the non-exceptional scenarios using the donothing

00:00:26.180 --> 00:00:29.220
but let me show you a scenario where this donothing is really useful

00:00:29.220 --> 00:00:32.860
to do that copy this test here

00:00:32.860 --> 00:00:36.460
paste it rename this test

00:00:36.460 --> 00:00:38.460
methods name to

00:00:38.460 --> 00:00:41.420
test consecutive calls

00:00:41.420 --> 00:00:43.420
so we are going to call

00:00:43.420 --> 00:00:46.100
this

00:00:46.100 --> 00:00:48.700
uses void method multiple times

00:00:48.700 --> 00:00:51.740
and see that we get different outputs each time

00:00:51.740 --> 00:00:55.700
to do that we simply add a donothing

00:00:55.700 --> 00:00:57.700
to the start of this dothrow

00:00:57.700 --> 00:01:01.000
we are going to change stub methods here

00:01:01.000 --> 00:01:03.680
so donothing .dothrow

00:01:03.680 --> 00:01:06.400
this syntax simply tells mockito

00:01:06.400 --> 00:01:08.680
that when the void method

00:01:08.680 --> 00:01:11.960
on B is called the first time it should do nothing

00:01:11.960 --> 00:01:17.120
and when it is called the second time it will throw an exception

00:01:17.120 --> 00:01:20.040
thats how consecutive calls can be stubbedout

00:01:20.040 --> 00:01:25.040
now to verify that lets call the A.users void method

00:01:25.040 --> 00:01:28.800
and copy this verify line from our first test

00:01:28.800 --> 00:01:31.760
paste it here that works...

00:01:33.080 --> 00:01:35.960
lets call the usersviod method again copy that

00:01:35.960 --> 00:01:37.960
paste it again

00:01:37.960 --> 00:01:40.560
the second time when the A.usersvoid is called

00:01:40.560 --> 00:01:43.960
we area saying that it should throw an exception

00:01:43.960 --> 00:01:47.120
which inturn should throw a runtime exception

00:01:47.120 --> 00:01:49.120
so we are all set to test it

00:01:49.120 --> 00:01:51.960
right click on our test here and say run

00:01:51.960 --> 00:01:55.720
and everything is green that is the

00:01:55.720 --> 00:01:57.720
UT and one of the users of donothing method

00:01:57.720 --> 00:02:00.160
we can stubout consecutive calls

00:02:00.160 --> 00:02:04.120
now let me comment out the second call here

00:02:04.120 --> 00:02:06.120
A.usersvoid method

00:02:06.120 --> 00:02:08.120
and our test should fail because

00:02:08.120 --> 00:02:10.920
now it throws an exception

00:02:10.920 --> 00:02:13.520
it doesnt throw an exception becase we are calling

00:02:13.520 --> 00:02:15.520
not calling it the second time

00:02:15.520 --> 00:02:18.000
but we are expecting a runtime exception.

00:02:18.000 --> 00:02:20.480
so lets see that right click

00:02:20.480 --> 00:02:23.080
on just this method here right click

00:02:23.080 --> 00:02:25.840
run

00:02:25.840 --> 00:02:27.840
fails it says

00:02:27.840 --> 00:02:31.400
exception java.LAN.runtime exception

00:02:31.400 --> 00:02:34.520
is expected but it is not thrown

00:02:34.520 --> 00:02:38.560
that is how do nothing method  can be used

00:02:38.560 --> 00:02:41.640
to change consecutive calls along with do throw.

00:02:41.640 --> 00:02:45.880
if I uncomment it out right click run

00:02:45.880 --> 00:02:47.880
all the test will pass again

