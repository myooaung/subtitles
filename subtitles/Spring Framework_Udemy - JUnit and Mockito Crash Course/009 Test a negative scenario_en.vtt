WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.810
In this lecture we are

00:00:01.810 --> 00:00:04.090
order method for negative scenario

00:00:04.090 --> 00:00:08.410
where-in in the order BOimpl we are going to

00:00:08.410 --> 00:00:10.330
stub out the DAO.create in

00:00:10.330 --> 00:00:12.309
such a way that it will return a

00:00:12.309 --> 00:00:16.270
result which is 0 and our place order then

00:00:16.270 --> 00:00:19.630
should return a false value instead of

00:00:19.630 --> 00:00:21.070
truth that is what we are going to

00:00:21.070 --> 00:00:23.679
verify and assert for so let's go back

00:00:23.679 --> 00:00:27.400
to our OrderBOimpl test double click on it

00:00:27.400 --> 00:00:29.650
we can reuse this existing tests so take the

00:00:29.650 --> 00:00:31.029
complete test code copy it paste it

00:00:31.029 --> 00:00:34.840
rename this method to

00:00:34.840 --> 00:00:37.600
place order should create from should

00:00:37.600 --> 00:00:40.750
create let's make it should not create

00:00:40.750 --> 00:00:43.480
an order everything else remains the

00:00:43.480 --> 00:00:45.940
same here when we are stubbing it out

00:00:45.940 --> 00:00:50.410
when DAO.create order then

00:00:50.410 --> 00:00:52.960
return instead of new integer 1 will

00:00:52.960 --> 00:00:55.540
be returning a zero value we have

00:00:55.540 --> 00:00:59.800
stubbed out and returning a zero value then

00:00:59.800 --> 00:01:02.170
our place order on the BO should

00:01:02.170 --> 00:01:03.130
return false

00:01:03.130 --> 00:01:06.070
instead of true so here instead of true

00:01:06.070 --> 00:01:07.960
we are going to use junit assert

00:01:07.960 --> 00:01:12.640
false, let me push it up by adding some

00:01:12.640 --> 00:01:16.240
new lines at the end assert false verify

00:01:16.240 --> 00:01:18.069
still remains the same we still want to

00:01:18.069 --> 00:01:20.979
verify that the DAO's create method is

00:01:20.979 --> 00:01:23.799
indeed getting called when we call

00:01:23.799 --> 00:01:26.439
BO.placeorder all we are asserting

00:01:26.439 --> 00:01:28.899
for is assert false the result.

00:01:28.899 --> 00:01:31.479
Thats the only thing that change here you notice we

00:01:31.479 --> 00:01:34.389
have some code repeating so we can

00:01:34.389 --> 00:01:36.579
refactor that or we can move this

00:01:36.579 --> 00:01:39.520
instantiation peace and setting the

00:01:39.520 --> 00:01:43.389
mocobject onto the BO into our setup

00:01:43.389 --> 00:01:47.380
method so select that whole thing hold  the

00:01:47.380 --> 00:01:51.369
alt button move it up press the up arrow we can

00:01:51.369 --> 00:01:54.579
place it in the setup method right after

00:01:54.579 --> 00:01:59.889
we call the in it mocs and then we can

00:01:59.889 --> 00:02:01.749
convert this BO by hitting

00:02:01.749 --> 00:02:04.959
control 1 convert local war variable

00:02:04.959 --> 00:02:07.990
to field and then we can delete these

00:02:07.990 --> 00:02:09.849
two lines from the second test method so

00:02:09.849 --> 00:02:12.310
we are reusing the class under test

00:02:12.310 --> 00:02:13.540
by making it

00:02:13.540 --> 00:02:16.120
a field and then we are instantiating it

00:02:16.120 --> 00:02:18.700
inside the setup method and we

00:02:18.700 --> 00:02:20.590
are also setting the mocked out DAO

00:02:20.590 --> 00:02:23.950
within the setup method let's run our

00:02:23.950 --> 00:02:27.250
test real quick by right-clicking go to

00:02:27.250 --> 00:02:32.680
run as junit test everything is in

00:02:32.680 --> 00:02:34.870
green we are good we have also tested

00:02:34.870 --> 00:02:37.390
for the negative scenario wherein we have

00:02:37.390 --> 00:02:39.670
stubbed out the DAO to the return 0

00:02:39.670 --> 00:02:42.730
and then we made sure that our BO is

00:02:42.730 --> 00:02:45.069
indeed behaving as expected it is returning

00:02:45.069 --> 00:02:47.590
false when the DAO.create

00:02:47.590 --> 00:02:51.030
returns a 0 value.

