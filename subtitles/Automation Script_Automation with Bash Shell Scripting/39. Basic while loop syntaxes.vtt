WEBVTT
ï»¿1
00:00:00.000 --> 00:00:03.690
Friends here our concept is while loop syntaxes see

2
00:00:03.690 --> 00:00:07.470
already we have seen for loop and different types of syntaxes for your for loop.

3
00:00:07.470 --> 00:00:10.905
The same way we how different types of syntaxes for your while loop.

4
00:00:10.905 --> 00:00:12.285
Let me go with one by one.

5
00:00:12.285 --> 00:00:14.655
The very first one is infinity loop.

6
00:00:14.655 --> 00:00:18.090
Let me show you infinitely loop with furthest.

7
00:00:18.090 --> 00:00:20.235
So I'm, I'm picking simple shell script.

8
00:00:20.235 --> 00:00:22.590
So I'm writing, you know,

9
00:00:22.590 --> 00:00:26.895
in four loop you how with the syntax infinity for loop.

10
00:00:26.895 --> 00:00:29.355
So simply, you can write eco.

11
00:00:29.355 --> 00:00:31.680
Simply I am writing, okay.

12
00:00:31.680 --> 00:00:34.980
And I'm writing one more output.

13
00:00:34.980 --> 00:00:37.365
Now let me save it.

14
00:00:37.365 --> 00:00:42.370
See, I am providing execution permission for this.

15
00:00:42.420 --> 00:00:45.430
Now first you see your core ones.

16
00:00:45.430 --> 00:00:48.400
So you know for whether the syntax,

17
00:00:48.400 --> 00:00:53.170
we'll repeat the lines which are there between do and done for infinite number of times.

18
00:00:53.170 --> 00:00:54.805
Now let me run and see there is a,

19
00:00:54.805 --> 00:00:57.190
it is executing for infinite number of times.

20
00:00:57.190 --> 00:01:02.575
Then to stop that HER2 press control C on your keyboard so that it will stop.

21
00:01:02.575 --> 00:01:07.180
Now, same concept you can also implement with your while loop.

22
00:01:07.180 --> 00:01:12.685
Simply write while true, while true.

23
00:01:12.685 --> 00:01:17.110
Let me save it. See you are core and I'm running that.

24
00:01:17.110 --> 00:01:22.330
Now, while true, will allow to exclude these two lines between do and done,

25
00:01:22.330 --> 00:01:25.630
whatever the lines are there or statements or there are commands are there.

26
00:01:25.630 --> 00:01:28.060
Those commands or lines are statements will

27
00:01:28.060 --> 00:01:31.045
repeat for infinite number of times C, that is.

28
00:01:31.045 --> 00:01:38.680
Now in press control C. Not only does that to syntax in shelf true,

29
00:01:38.680 --> 00:01:40.315
you can also write simply colon.

30
00:01:40.315 --> 00:01:44.665
Now this also will execute your code for infinite number of times and that's it.

31
00:01:44.665 --> 00:01:47.480
So both are for same purpose.

32
00:01:47.760 --> 00:01:49.360
That's fine.

33
00:01:49.360 --> 00:01:52.945
Now see that we have these two syntaxes for loop.

34
00:01:52.945 --> 00:01:55.165
No, while loop with command.

35
00:01:55.165 --> 00:01:59.785
Instead of writing through our colon in place of that,

36
00:01:59.785 --> 00:02:01.210
you can also write a command.

37
00:02:01.210 --> 00:02:02.320
Let me show you that.

38
00:02:02.320 --> 00:02:07.545
So simply the either syntax while command do some statements or commands and done.

39
00:02:07.545 --> 00:02:12.450
Now, let me comment this code.

40
00:02:12.460 --> 00:02:15.125
So I'm using multi-line comment,

41
00:02:15.125 --> 00:02:17.240
my comment one I am taking here,

42
00:02:17.240 --> 00:02:22.835
and then my comment one close while I'm writing date command,

43
00:02:22.835 --> 00:02:25.175
then do and w1.

44
00:02:25.175 --> 00:02:28.085
Then here's employee I'm reading echo.

45
00:02:28.085 --> 00:02:34.490
Date command is executing with the while loop.

46
00:02:34.490 --> 00:02:36.650
Let me save it.

47
00:02:36.650 --> 00:02:38.210
See the dessert first.

48
00:02:38.210 --> 00:02:40.190
So before going to execute C,

49
00:02:40.190 --> 00:02:41.870
your core ones and done it.

50
00:02:41.870 --> 00:02:44.600
If you remember a boat if condition,

51
00:02:44.600 --> 00:02:46.835
if some command, if I write,

52
00:02:46.835 --> 00:02:48.920
if this command is executed successfully,

53
00:02:48.920 --> 00:02:52.805
then only if will allow to execute the lines we thought they would do it between.

54
00:02:52.805 --> 00:02:56.130
Then enough, i let me write it once.

55
00:02:56.530 --> 00:03:01.670
And let me open my plus c.

56
00:03:01.670 --> 00:03:06.125
If you remember, if some command, then your phi.

57
00:03:06.125 --> 00:03:09.530
You've command will allow to execute the lines are commands which are

58
00:03:09.530 --> 00:03:13.565
there between then and F-I if the command is successfully executed.

59
00:03:13.565 --> 00:03:15.350
The same concept here also.

60
00:03:15.350 --> 00:03:20.030
Now while will execute the line which is there between do and done.

61
00:03:20.030 --> 00:03:21.800
If this command is success.

62
00:03:21.800 --> 00:03:23.900
But if will execute only one time,

63
00:03:23.900 --> 00:03:25.880
but while will exclude these command for

64
00:03:25.880 --> 00:03:29.280
infinite number of times if this command is success.

65
00:03:29.530 --> 00:03:32.180
So what it will do means first,

66
00:03:32.180 --> 00:03:33.245
we will take this condition,

67
00:03:33.245 --> 00:03:34.850
whether it is executing successfully or not.

68
00:03:34.850 --> 00:03:37.100
If it is sucked says it will execute once.

69
00:03:37.100 --> 00:03:40.370
And then again, we'll come back to this equation only command position.

70
00:03:40.370 --> 00:03:41.945
Again, same commanded comment.

71
00:03:41.945 --> 00:03:43.490
That is success again will exude.

72
00:03:43.490 --> 00:03:48.690
That's why this is also is going to exclude infinite number of times c there is a.

73
00:03:49.810 --> 00:03:55.925
But now what I want to do is I don't want to display the command output.

74
00:03:55.925 --> 00:03:59.120
Why it may be success or fail.

75
00:03:59.120 --> 00:04:01.130
I don't want to display the output of the command,

76
00:04:01.130 --> 00:04:03.155
which is their newer while syntax.

77
00:04:03.155 --> 00:04:04.640
Just if it is success x,

78
00:04:04.640 --> 00:04:06.365
good retailer away, just stop it.

79
00:04:06.365 --> 00:04:07.610
C.

80
00:04:07.610 --> 00:04:10.025
Infinity syntax.

81
00:04:10.025 --> 00:04:13.190
Now, suppose I'm writing some invalid command.

82
00:04:13.190 --> 00:04:15.305
Let's say this is invalid command, right?

83
00:04:15.305 --> 00:04:20.390
That's why your while loop will own take skewed the lines which are

84
00:04:20.390 --> 00:04:25.790
there between do and then see that it is not executing even one time,

85
00:04:25.790 --> 00:04:28.445
because at very first time itself, this is fail.

86
00:04:28.445 --> 00:04:30.560
If it is failed way doesn't allow to

87
00:04:30.560 --> 00:04:32.765
execute the lines which are there between do and done.

88
00:04:32.765 --> 00:04:34.170
That's it.

89
00:04:34.240 --> 00:04:36.590
Not only that command,

90
00:04:36.590 --> 00:04:39.395
you can also write a test to combine in place of that command.

91
00:04:39.395 --> 00:04:41.570
But testicle Monday, somewhat useful.

92
00:04:41.570 --> 00:04:45.090
Instead of this, let me commend the score.

93
00:04:48.790 --> 00:04:52.550
While I'm writing some test to command here.

94
00:04:52.550 --> 00:04:54.545
Suppose for greater than one.

95
00:04:54.545 --> 00:04:56.055
Yes, it is true.

96
00:04:56.055 --> 00:04:59.770
It is true, you know that the lines which are there between do and done will

97
00:04:59.770 --> 00:05:04.400
exclude for infinite number of times if the condition is true.

98
00:05:04.710 --> 00:05:12.820
Now see that executing while loop,

99
00:05:12.820 --> 00:05:16.720
then simply I am writing one modelling just for your understanding.

100
00:05:16.720 --> 00:05:20.770
Now see it as you need to practice each and every syntax here,

101
00:05:20.770 --> 00:05:24.355
executing your while loop for infinite number of times.

102
00:05:24.355 --> 00:05:27.655
But I can modify this concept in this way.

103
00:05:27.655 --> 00:05:30.370
Suppose what I'm doing is my requirement is I

104
00:05:30.370 --> 00:05:33.520
want to print numbers from one to ten by using while loop.

105
00:05:33.520 --> 00:05:36.115
Then initially I will take starting numbers,

106
00:05:36.115 --> 00:05:39.085
start number equals to one.

107
00:05:39.085 --> 00:05:43.780
Then I'm taking a condition here, dollar star.

108
00:05:43.780 --> 00:05:46.675
If it is less than or equal to ten,

109
00:05:46.675 --> 00:05:49.615
less than or equal to ten,

110
00:05:49.615 --> 00:05:51.700
then I want to exclude my while loop.

111
00:05:51.700 --> 00:05:55.465
And here what I'm doing is instead of writing two eco statements,

112
00:05:55.465 --> 00:05:59.215
now I am writing echo, dollar start.

113
00:05:59.215 --> 00:06:01.930
Then I'm increasing the value of your star.

114
00:06:01.930 --> 00:06:04.540
Simply start plus, plus.

115
00:06:04.540 --> 00:06:06.970
Then how it will work.

116
00:06:06.970 --> 00:06:09.205
Then how it will work.

117
00:06:09.205 --> 00:06:10.705
Very simple.

118
00:06:10.705 --> 00:06:13.990
Now your previous all code is commented.

119
00:06:13.990 --> 00:06:16.810
Now you're unaware if you're on your shell script, it will start from here,

120
00:06:16.810 --> 00:06:19.435
starting close to one, then while,

121
00:06:19.435 --> 00:06:21.795
while you will check this condition.

122
00:06:21.795 --> 00:06:23.360
Is it true as of now you are.

123
00:06:23.360 --> 00:06:26.210
Start is one, yes, it grew grew mainstream legs good.

124
00:06:26.210 --> 00:06:28.715
They block which is the Caribbean do and then once.

125
00:06:28.715 --> 00:06:31.640
But while executing the block which is there between Dewan

126
00:06:31.640 --> 00:06:35.045
done automatically you are increasing start value.

127
00:06:35.045 --> 00:06:38.780
You are printing one, then you are increasing your value started to T2.

128
00:06:38.780 --> 00:06:41.210
So once it is done, again, you are while loop.

129
00:06:41.210 --> 00:06:44.645
We'll come back to this equation condition place, command place.

130
00:06:44.645 --> 00:06:46.970
Now you're starting to two less than equals ten.

131
00:06:46.970 --> 00:06:47.600
Yes, true.

132
00:06:47.600 --> 00:06:49.115
Again to link school.

133
00:06:49.115 --> 00:06:51.350
So until this condition is true,

134
00:06:51.350 --> 00:06:54.230
you're while will exclude these two lines again and again.

135
00:06:54.230 --> 00:06:56.210
Once. If this condition is fail,

136
00:06:56.210 --> 00:07:00.500
then your wild will stop to exclude the lines which are there wouldn't do and done.

137
00:07:00.500 --> 00:07:03.515
And simply it will come more from your while loop.

138
00:07:03.515 --> 00:07:08.045
Be clear, these two lines will exclude until this condition is true, you know,

139
00:07:08.045 --> 00:07:12.440
after certain time definitely you will start will become 1111 less than houston.

140
00:07:12.440 --> 00:07:16.100
No false. That's why whenever if you start value becomes 11,

141
00:07:16.100 --> 00:07:18.065
then your while loop is stopping.

142
00:07:18.065 --> 00:07:20.705
Now let me save it and run it and see the result.

143
00:07:20.705 --> 00:07:22.190
You are getting one to ten.

144
00:07:22.190 --> 00:07:23.525
That's it.

145
00:07:23.525 --> 00:07:27.845
So in that way you can use your while loop with command as well.

146
00:07:27.845 --> 00:07:29.960
So instead of writing command, you can also take a,

147
00:07:29.960 --> 00:07:32.000
it's even testing is also one of the command, right?

148
00:07:32.000 --> 00:07:35.780
That's why I have taken that. Now.

149
00:07:35.780 --> 00:07:37.940
Come back to your previous syntaxes.

150
00:07:37.940 --> 00:07:40.400
Now, very useful syntax isn't your real time.

151
00:07:40.400 --> 00:07:44.960
We do a while loop or reading a file content using while loop.

152
00:07:44.960 --> 00:07:49.540
Very simple. While read line, line is a variable.

153
00:07:49.540 --> 00:07:51.130
You can take any variable here.

154
00:07:51.130 --> 00:07:54.700
But whenever if you're reading a content of your file while will

155
00:07:54.700 --> 00:07:58.810
read line by line just to we are taking suitable name as line.

156
00:07:58.810 --> 00:08:02.440
But you can take any variable here. Now let me show you this.

157
00:08:02.440 --> 00:08:09.025
See in our previous lecture we have a file name called sorrows info.plist.

158
00:08:09.025 --> 00:08:16.180
Now I want to read the content of this file using while loop.

159
00:08:16.180 --> 00:08:18.820
See if you go with the for loop. For loop.

160
00:08:18.820 --> 00:08:25.525
The for loop is not reading the content of your file as a line by line.

161
00:08:25.525 --> 00:08:29.040
It is reading values based on space.

162
00:08:29.040 --> 00:08:34.760
That's why whenever if you want to read the content of your file line by line,

163
00:08:34.760 --> 00:08:37.685
then please go with while loop only.

164
00:08:37.685 --> 00:08:39.815
While read each line I'm taking.

165
00:08:39.815 --> 00:08:42.150
You can take any variable no.

166
00:08:43.540 --> 00:08:48.980
Then simply write done less than only filename in gas.

167
00:08:48.980 --> 00:08:50.630
If your file name is there in a variable,

168
00:08:50.630 --> 00:08:54.020
let's say I'm writing filename equals to.

169
00:08:54.020 --> 00:08:56.825
If you're very, if you're filename is there in,

170
00:08:56.825 --> 00:08:58.010
in place of a variable,

171
00:08:58.010 --> 00:08:59.720
I mean inside a variable.

172
00:08:59.720 --> 00:09:03.755
Then dollar file underscore name, that's it.

173
00:09:03.755 --> 00:09:08.870
Then I am writing here a co each line.

174
00:09:08.870 --> 00:09:12.900
Let's now see how it is going to work.

175
00:09:15.430 --> 00:09:18.695
So this entire thing is commented.

176
00:09:18.695 --> 00:09:20.645
Now your code will start from here.

177
00:09:20.645 --> 00:09:22.295
There is a variable called file name.

178
00:09:22.295 --> 00:09:27.335
Into that this file name we'll store wild read each line, do undone.

179
00:09:27.335 --> 00:09:32.030
So first you are, while we'll take the content from this file, all lines.

180
00:09:32.030 --> 00:09:34.730
And if you have four lanes,

181
00:09:34.730 --> 00:09:38.480
now, the logic which is there between do and then we'll repeat four times.

182
00:09:38.480 --> 00:09:40.865
But while executing first time it will get first-line,

183
00:09:40.865 --> 00:09:43.100
second time, second line. That's it.

184
00:09:43.100 --> 00:09:45.300
That's it.

185
00:09:45.940 --> 00:09:49.550
Now, if you want to read a file,

186
00:09:49.550 --> 00:09:51.350
content is the best syntax.

187
00:09:51.350 --> 00:09:53.510
But if you want to read command output,

188
00:09:53.510 --> 00:09:54.695
it may be any command.

189
00:09:54.695 --> 00:09:56.150
It may be any command,

190
00:09:56.150 --> 00:09:58.115
then this is the bestest syntax.

191
00:09:58.115 --> 00:10:00.380
If you want to read file content,

192
00:10:00.380 --> 00:10:02.045
then go with the syntax.

193
00:10:02.045 --> 00:10:06.065
But I want to read any command output using while loop.

194
00:10:06.065 --> 00:10:09.425
Then you had to go in this way command pipeline while read.

195
00:10:09.425 --> 00:10:11.675
Again, ladies, a variable you can take anything here,

196
00:10:11.675 --> 00:10:13.235
do done the statements.

197
00:10:13.235 --> 00:10:15.890
Let me show you that. Suppose I have a yeah,

198
00:10:15.890 --> 00:10:20.225
first I will show you reading content of a file itself.

199
00:10:20.225 --> 00:10:23.345
But to read your file content,

200
00:10:23.345 --> 00:10:26.910
these the best syntax, whatever we have as of now.

201
00:10:28.120 --> 00:10:33.080
Let me come in this mike comment for now,

202
00:10:33.080 --> 00:10:34.700
let me write it here.

203
00:10:34.700 --> 00:10:40.100
See CAT, dollar filename or directly going into your file limit

204
00:10:40.100 --> 00:10:46.115
sells pipeline while read.

205
00:10:46.115 --> 00:10:49.400
I can take line also your variable. It can take any variable.

206
00:10:49.400 --> 00:10:50.570
Done.

207
00:10:50.570 --> 00:10:53.720
So here I'm writing echo dollar line.

208
00:10:53.720 --> 00:10:56.210
And for your understanding, because if you want write one more ACO,

209
00:10:56.210 --> 00:10:57.315
yes, you can write it simply.

210
00:10:57.315 --> 00:10:59.970
I'm reading in this way.

211
00:11:00.910 --> 00:11:09.200
Now see yes, using the word command output pipeline while loop also,

212
00:11:09.200 --> 00:11:11.390
you are able to read the file content,

213
00:11:11.390 --> 00:11:12.980
not only file contents.

214
00:11:12.980 --> 00:11:14.570
Suppose you have a, this command,

215
00:11:14.570 --> 00:11:17.900
this command output also you can provide for your while loop in this way.

216
00:11:17.900 --> 00:11:19.100
Let me open once again,

217
00:11:19.100 --> 00:11:25.010
you are while loops inside of this cat servers.

218
00:11:25.010 --> 00:11:27.320
Any command output you can provide.

219
00:11:27.320 --> 00:11:33.935
Now I commented that simply I'm running LSF and LRT pipeline while read line, that's it.

220
00:11:33.935 --> 00:11:38.045
Now, you held so many lines in this output.

221
00:11:38.045 --> 00:11:41.885
Now your while loop is going to take one by one from this output.

222
00:11:41.885 --> 00:11:47.240
But here suppose, if I want to print line by line from the output of ls Ivan LRT.

223
00:11:47.240 --> 00:11:49.205
You had to go with a while loop. While loop only.

224
00:11:49.205 --> 00:11:50.420
If you go in for loop,

225
00:11:50.420 --> 00:11:52.985
what it will do, it will take this as one.

226
00:11:52.985 --> 00:11:54.815
It won on value,

227
00:11:54.815 --> 00:11:56.660
second value, third value, fourth value,

228
00:11:56.660 --> 00:12:00.620
fifth, 6789101112, something like that.

229
00:12:00.620 --> 00:12:03.740
But while we take entire thing as a one line,

230
00:12:03.740 --> 00:12:05.405
that is the advantage with while loops.

231
00:12:05.405 --> 00:12:09.455
Now see that we are getting line by line.

232
00:12:09.455 --> 00:12:12.125
So that is the uses of while loop.

233
00:12:12.125 --> 00:12:17.015
So there is, these are the very simple syntaxes for our while loop.

234
00:12:17.015 --> 00:12:21.840
We have one advanced level uses of while loop with IFC.

235
00:12:21.880 --> 00:12:25.340
I EFS internal field is operator,

236
00:12:25.340 --> 00:12:27.380
will discuss that in our next lecture.

237
00:12:27.380 --> 00:12:29.010
Thank you.

