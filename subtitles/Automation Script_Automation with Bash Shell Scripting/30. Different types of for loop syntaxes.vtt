WEBVTT
ï»¿1
00:00:00.170 --> 00:00:04.605
Friends here our concept is for loop syntax is see there are

2
00:00:04.605 --> 00:00:07.080
different types of syntaxes are there for your

3
00:00:07.080 --> 00:00:10.185
for loop or we can use for loop in different ways.

4
00:00:10.185 --> 00:00:11.700
Let me go with one by one.

5
00:00:11.700 --> 00:00:16.410
The very first one is basic for loop and either syntax for your basic for loop.

6
00:00:16.410 --> 00:00:20.145
And here if you observe there is a variable.

7
00:00:20.145 --> 00:00:22.605
This is nothing but simply variable name.

8
00:00:22.605 --> 00:00:24.990
You can take any valid variable name here.

9
00:00:24.990 --> 00:00:27.810
And here you have to provide some list of values,

10
00:00:27.810 --> 00:00:30.880
as we have seen in our introduction video.

11
00:00:30.880 --> 00:00:33.500
And between do and done yacht, right?

12
00:00:33.500 --> 00:00:34.700
Some number of lines,

13
00:00:34.700 --> 00:00:38.195
whatever the lens you want to repeat for n number of times.

14
00:00:38.195 --> 00:00:41.450
And this block between do and done,

15
00:00:41.450 --> 00:00:42.740
whatever the lines are there,

16
00:00:42.740 --> 00:00:44.645
that is called simply for block.

17
00:00:44.645 --> 00:00:46.760
Now based on these values,

18
00:00:46.760 --> 00:00:49.265
this block will repeat n number of times.

19
00:00:49.265 --> 00:00:52.850
Suppose in the list of Alice U-Haul to values,

20
00:00:52.850 --> 00:00:55.325
then this block will repeat two times.

21
00:00:55.325 --> 00:00:57.830
Let me show you that with a simple example.

22
00:00:57.830 --> 00:01:00.650
Suppose I am writing a simple shell script.

23
00:01:00.650 --> 00:01:07.145
Let me take basic for loop, dot SH.

24
00:01:07.145 --> 00:01:08.900
Let me read the very first line.

25
00:01:08.900 --> 00:01:11.195
Has she bundling bin bash.

26
00:01:11.195 --> 00:01:14.705
And here, start with your loop.

27
00:01:14.705 --> 00:01:20.570
For each value, I can take any name based on my requirement.

28
00:01:20.570 --> 00:01:23.150
Each value I'm taking in,

29
00:01:23.150 --> 00:01:26.390
I am providing suppose 123 values,

30
00:01:26.390 --> 00:01:29.675
then do, and then first compute your syntax.

31
00:01:29.675 --> 00:01:32.840
Otherwise you'll get some syntax errors between these.

32
00:01:32.840 --> 00:01:36.890
Any logic, whatever you want to repeat for three times Y3,

33
00:01:36.890 --> 00:01:39.200
ten, because you mentioned here three values.

34
00:01:39.200 --> 00:01:41.120
Now let me simply a code.

35
00:01:41.120 --> 00:01:43.325
This is a loop.

36
00:01:43.325 --> 00:01:47.780
That means that line will repeat three times because you have

37
00:01:47.780 --> 00:01:52.280
three values in your list of values plays in your for loop syntax.

38
00:01:52.280 --> 00:01:55.905
So in this place, we have three values.

39
00:01:55.905 --> 00:01:58.360
See that these three values.

40
00:01:58.360 --> 00:02:02.230
Now basically, whenever if you run your shell, skip,

41
00:02:02.230 --> 00:02:08.605
your for loop will repeat this block for block these many times.

42
00:02:08.605 --> 00:02:11.485
And while executing at very first time,

43
00:02:11.485 --> 00:02:15.415
automatically the value one will store into each value.

44
00:02:15.415 --> 00:02:17.155
And in case if you need this,

45
00:02:17.155 --> 00:02:19.960
each value inside of your for blog, you can use it.

46
00:02:19.960 --> 00:02:20.980
If you use.

47
00:02:20.980 --> 00:02:23.364
That value will be one automatically.

48
00:02:23.364 --> 00:02:26.260
And for loop will repeat automatically second time also,

49
00:02:26.260 --> 00:02:28.045
while excluding second time, you're,

50
00:02:28.045 --> 00:02:31.285
each value will become two.

51
00:02:31.285 --> 00:02:33.010
Now, as of now,

52
00:02:33.010 --> 00:02:35.755
I am not using this each value inside of my fourth block.

53
00:02:35.755 --> 00:02:37.270
If you have a requirement, you can use it.

54
00:02:37.270 --> 00:02:38.880
Otherwise simply can skip it.

55
00:02:38.880 --> 00:02:41.600
Now see that I am running our code.

56
00:02:41.600 --> 00:02:44.345
Let me provide ya'll and we probably execution permissions.

57
00:02:44.345 --> 00:02:46.370
Now see you are getting this is a loop,

58
00:02:46.370 --> 00:02:47.870
this loop three times.

59
00:02:47.870 --> 00:02:50.795
But I want to print values,

60
00:02:50.795 --> 00:02:54.275
whatever the values are automatically coming into your each value variable.

61
00:02:54.275 --> 00:02:56.840
I want to print it that also, yes,

62
00:02:56.840 --> 00:02:59.915
you can print it simply inside of your for loop.

63
00:02:59.915 --> 00:03:04.294
Just use echo for this iteration.

64
00:03:04.294 --> 00:03:06.620
So whenever if your code is executing first-time,

65
00:03:06.620 --> 00:03:09.620
there is first iteration, second time, second iteration.

66
00:03:09.620 --> 00:03:12.650
So for this iteration,

67
00:03:12.650 --> 00:03:17.135
each value E, It Is there anywhere,

68
00:03:17.135 --> 00:03:19.340
each value a variable that's a.

69
00:03:19.340 --> 00:03:21.515
Now let me save it and run it.

70
00:03:21.515 --> 00:03:23.840
See, you are core ones.

71
00:03:23.840 --> 00:03:25.445
I'm running.

72
00:03:25.445 --> 00:03:29.390
That's these two lines are repeating three

73
00:03:29.390 --> 00:03:34.685
times by while executing at very first time or for first iteration.

74
00:03:34.685 --> 00:03:37.370
Automatically this each value is one.

75
00:03:37.370 --> 00:03:40.670
In case if you use that each value inside of your logic,

76
00:03:40.670 --> 00:03:42.305
then that value is one.

77
00:03:42.305 --> 00:03:45.260
While excluding second-time or for second iteration,

78
00:03:45.260 --> 00:03:48.050
automatically, each value is two.

79
00:03:48.050 --> 00:03:50.930
And here, you know, you take any sequence of numbers randomly

80
00:03:50.930 --> 00:03:54.590
can provide on numbers like three to 4002012,

81
00:03:54.590 --> 00:03:56.375
something like that, that is your wish.

82
00:03:56.375 --> 00:03:58.055
And not only values,

83
00:03:58.055 --> 00:04:00.905
you can also provide some filenames.

84
00:04:00.905 --> 00:04:03.740
And instead of providing file in directly,

85
00:04:03.740 --> 00:04:06.920
you can write some commands such that that command output you can

86
00:04:06.920 --> 00:04:10.700
provide in place of list of values for your for loop.

87
00:04:10.700 --> 00:04:11.960
I mean, suppose you,

88
00:04:11.960 --> 00:04:13.640
If I run ls command in the current location,

89
00:04:13.640 --> 00:04:15.530
you're letting some list of files.

90
00:04:15.530 --> 00:04:20.105
This list of files I want to take one by one by using for loop.

91
00:04:20.105 --> 00:04:22.890
Then see how I can implement that.

92
00:04:23.740 --> 00:04:26.945
Let me open newer shell script.

93
00:04:26.945 --> 00:04:29.690
I'm commenting this line.

94
00:04:29.690 --> 00:04:33.440
Not only numbers, you can also provide some alphabets.

95
00:04:33.440 --> 00:04:36.860
No, I'm writing for each file.

96
00:04:36.860 --> 00:04:39.485
Now I am taking phile means I'm taking command output,

97
00:04:39.485 --> 00:04:42.440
ls command output in Alaska monopoly are getting files.

98
00:04:42.440 --> 00:04:44.060
Just for our understanding,

99
00:04:44.060 --> 00:04:46.760
for our clarity purpose, I'm circling variable him as each file,

100
00:04:46.760 --> 00:04:50.420
let's say in ls, c,

101
00:04:50.420 --> 00:04:54.680
if I directly plays a command in your for loop syntax,

102
00:04:54.680 --> 00:04:56.810
it will take as a value only.

103
00:04:56.810 --> 00:04:59.330
Now as of now this is like a value. Lsd is one value.

104
00:04:59.330 --> 00:05:00.995
That's why if I run my shell script,

105
00:05:00.995 --> 00:05:02.930
it will run only one time.

106
00:05:02.930 --> 00:05:04.805
And that too, at that time,

107
00:05:04.805 --> 00:05:07.295
it will take value as ls c, that is a.

108
00:05:07.295 --> 00:05:11.225
Sorry, we are using their variable MS,

109
00:05:11.225 --> 00:05:14.015
each file, but we are trying to print each value.

110
00:05:14.015 --> 00:05:16.190
Let me modify this variable name.

111
00:05:16.190 --> 00:05:20.550
Each file.

112
00:05:23.260 --> 00:05:25.160
Now see the output.

113
00:05:25.160 --> 00:05:27.485
What you are getting, you are getting simply LS.

114
00:05:27.485 --> 00:05:29.450
But my intention is a less output.

115
00:05:29.450 --> 00:05:31.280
I want to take Alice output,

116
00:05:31.280 --> 00:05:33.080
I want to substitute in place of this,

117
00:05:33.080 --> 00:05:34.835
in place of this Ls.

118
00:05:34.835 --> 00:05:38.870
We know how to store the command output India variable using

119
00:05:38.870 --> 00:05:42.890
the same syntax you how to use even in U-S loop.

120
00:05:42.890 --> 00:05:45.995
Also. Instead of writing LS,

121
00:05:45.995 --> 00:05:48.035
If I write dollar less,

122
00:05:48.035 --> 00:05:53.060
then the command output will be substituted here.

123
00:05:53.060 --> 00:05:56.660
That means these files are shooting in your for

124
00:05:56.660 --> 00:06:00.290
loop so that your for loop will repeat this many number of times.

125
00:06:00.290 --> 00:06:03.710
How many files here we are having that many number of times.

126
00:06:03.710 --> 00:06:07.220
It will repeat. 60 times you'd we'll repeat.

127
00:06:07.220 --> 00:06:08.300
Now.

128
00:06:08.300 --> 00:06:11.030
See, first let me show you your core.

129
00:06:11.030 --> 00:06:12.680
And I'm running C.

130
00:06:12.680 --> 00:06:16.580
There isn't 60 times it has been repeated.

131
00:06:16.580 --> 00:06:19.160
But while repeating each and every time automatically this

132
00:06:19.160 --> 00:06:22.760
picking different filename, letrec.

133
00:06:22.760 --> 00:06:25.790
So there's just a basic introduction,

134
00:06:25.790 --> 00:06:30.365
basic syntax as explanation for your for loop will have a practice session.

135
00:06:30.365 --> 00:06:33.290
In that we'll do some practice with your for loops.

136
00:06:33.290 --> 00:06:36.860
The syntax is C language type for loop.

137
00:06:36.860 --> 00:06:38.465
Let me get the syntax for that.

138
00:06:38.465 --> 00:06:40.730
This is the syntax for your for loop,

139
00:06:40.730 --> 00:06:43.010
for C language type for loop.

140
00:06:43.010 --> 00:06:48.050
If you observe here for two parenthesis ending with two parentheses.

141
00:06:48.050 --> 00:06:50.495
Then very first value is insulation,

142
00:06:50.495 --> 00:06:54.035
semicolon condition, semicolon, increment or decrement.

143
00:06:54.035 --> 00:06:57.590
And between do and done your writing our four block.

144
00:06:57.590 --> 00:07:02.120
So you can write here a number of commands or lines or statements or logic.

145
00:07:02.120 --> 00:07:05.870
Then how this for loop will execute, how it will work.

146
00:07:05.870 --> 00:07:08.915
So you never previous basic for loop.

147
00:07:08.915 --> 00:07:11.525
The lines which are there between do and done,

148
00:07:11.525 --> 00:07:15.005
or the forever block will execute n number of times.

149
00:07:15.005 --> 00:07:16.910
That n number of times based on

150
00:07:16.910 --> 00:07:20.165
how many values you are having in place of list of values.

151
00:07:20.165 --> 00:07:24.005
But here, let me explain with that with a simple example.

152
00:07:24.005 --> 00:07:30.515
Suppose I am writing c type for loop, dot SH,

153
00:07:30.515 --> 00:07:37.010
bin bash for two parenthesis.

154
00:07:37.010 --> 00:07:39.635
I'm defining, see.

155
00:07:39.635 --> 00:07:42.575
The very first one is insolation.

156
00:07:42.575 --> 00:07:44.450
You have to initialize some variable.

157
00:07:44.450 --> 00:07:45.965
Let me initialize count.

158
00:07:45.965 --> 00:07:51.680
You can take any variable I'm initializing count variable equals to one, then semicolon.

159
00:07:51.680 --> 00:07:57.290
Then condition, I am writing condition as counter less than or equal to ten.

160
00:07:57.290 --> 00:08:00.605
Then I'm increasing counter value by plus plus.

161
00:08:00.605 --> 00:08:03.980
So first let me write a syntax so that he can understand.

162
00:08:03.980 --> 00:08:06.680
Now between do undone or for,

163
00:08:06.680 --> 00:08:08.900
for block, I am writing only one line.

164
00:08:08.900 --> 00:08:14.870
This is c type for loop.

165
00:08:14.870 --> 00:08:17.090
Then how it will execute.

166
00:08:17.090 --> 00:08:18.275
Very simple.

167
00:08:18.275 --> 00:08:20.270
Whenever if you run your for loop, I mean,

168
00:08:20.270 --> 00:08:21.800
whenever if you run your shell script anyway,

169
00:08:21.800 --> 00:08:24.545
you don't have any other lines are of that for loop.

170
00:08:24.545 --> 00:08:26.465
So it will start with for loop.

171
00:08:26.465 --> 00:08:29.180
And this for loop first,

172
00:08:29.180 --> 00:08:33.170
take this variable, it will look into initialization place.

173
00:08:33.170 --> 00:08:38.450
So there c and t count variable is there and that value is assigned with one.

174
00:08:38.450 --> 00:08:42.455
With that one, it will compare this condition.

175
00:08:42.455 --> 00:08:45.290
So County's 11 less than equals ten, yes, true.

176
00:08:45.290 --> 00:08:51.020
If it is true, then your for loop will execute the lines which are there between B17.

177
00:08:51.020 --> 00:08:56.855
Once. After executing the lines which are there between do and done immediately,

178
00:08:56.855 --> 00:09:01.310
your for loop will increase your count variable value we are being plus,

179
00:09:01.310 --> 00:09:03.920
plus means whatever the previous value is.

180
00:09:03.920 --> 00:09:06.545
Therefore, County just increased by one.

181
00:09:06.545 --> 00:09:07.940
Now previously this one,

182
00:09:07.940 --> 00:09:09.875
now we are increasing to two.

183
00:09:09.875 --> 00:09:11.435
Then with other two.

184
00:09:11.435 --> 00:09:14.660
Again, this condition we will check, be clear.

185
00:09:14.660 --> 00:09:18.245
This initialization will be taken by your for loop only once.

186
00:09:18.245 --> 00:09:19.565
That too at very fast.

187
00:09:19.565 --> 00:09:21.755
After that, it will skip that part.

188
00:09:21.755 --> 00:09:24.020
While executing second time.

189
00:09:24.020 --> 00:09:25.445
Before executing Second time,

190
00:09:25.445 --> 00:09:27.290
it will increase your count value.

191
00:09:27.290 --> 00:09:28.715
Previously it was one,

192
00:09:28.715 --> 00:09:30.095
now it will become two.

193
00:09:30.095 --> 00:09:31.565
Now two less than equal to ten.

194
00:09:31.565 --> 00:09:32.570
Yes, true.

195
00:09:32.570 --> 00:09:34.670
If it is through your for loop,

196
00:09:34.670 --> 00:09:37.535
again will execute the code which is there going to London.

197
00:09:37.535 --> 00:09:39.170
So second time is over.

198
00:09:39.170 --> 00:09:42.590
Then will go for a third time before going to exclude thought time.

199
00:09:42.590 --> 00:09:45.935
Again, it will increase your count variable value.

200
00:09:45.935 --> 00:09:47.390
Previously it was two.

201
00:09:47.390 --> 00:09:50.330
Now it will become 33 less than or equal certain.

202
00:09:50.330 --> 00:09:54.995
Likewise, if countless Monaco Student 33 less than Kristen,

203
00:09:54.995 --> 00:09:57.035
it'll execute once again this logic.

204
00:09:57.035 --> 00:10:00.125
Likewise, it will increase this value.

205
00:10:00.125 --> 00:10:04.355
You will check this condition until this condition is true. This for loop.

206
00:10:04.355 --> 00:10:07.700
We'll rerun the sunblock, let's say.

207
00:10:07.700 --> 00:10:09.755
Now.

208
00:10:09.755 --> 00:10:14.460
Let me provide the exclusion conditions for that.

209
00:10:15.280 --> 00:10:18.365
See your code once.

210
00:10:18.365 --> 00:10:23.135
And I am running ten times, it is repeating.

211
00:10:23.135 --> 00:10:24.860
Now instead of displaying echoed,

212
00:10:24.860 --> 00:10:26.420
this is c type of four loop.

213
00:10:26.420 --> 00:10:29.600
I want to display numbers from one to ten by using for loop.

214
00:10:29.600 --> 00:10:31.400
Of course, no need to use for loop,

215
00:10:31.400 --> 00:10:32.885
you have a sequence command.

216
00:10:32.885 --> 00:10:34.445
You can use 1-2,

217
00:10:34.445 --> 00:10:37.940
suppose 20 or ten by using the sequence command also.

218
00:10:37.940 --> 00:10:40.560
But this output I want to,

219
00:10:40.840 --> 00:10:43.565
I want to get using for loop.

220
00:10:43.565 --> 00:10:46.715
It is possible with you a simple for loop,

221
00:10:46.715 --> 00:10:48.650
C type of four loop.

222
00:10:48.650 --> 00:10:50.705
Let me modify.

223
00:10:50.705 --> 00:10:54.380
Initially I'm taking County coastal went because I wanted to print from one.

224
00:10:54.380 --> 00:10:57.170
Then I will check condition up to 200.

225
00:10:57.170 --> 00:10:58.760
Then instead of printing Echo,

226
00:10:58.760 --> 00:11:00.350
this is c type of loop.

227
00:11:00.350 --> 00:11:06.800
I will remove the entire, the entire thing and simply I will display Dollar Coin.

228
00:11:06.800 --> 00:11:09.840
Now, let me save it.

229
00:11:10.150 --> 00:11:15.000
See your code and run it.

230
00:11:15.370 --> 00:11:21.095
You are getting 12102020 because conditioned is up to 20.

231
00:11:21.095 --> 00:11:23.930
Once your account value is greater than 20,

232
00:11:23.930 --> 00:11:25.370
then this condition will become failed,

233
00:11:25.370 --> 00:11:27.005
then your for loop will stop.

234
00:11:27.005 --> 00:11:28.905
And one more thing.

235
00:11:28.905 --> 00:11:30.640
Before you were for Luby,

236
00:11:30.640 --> 00:11:34.045
if how any lines those lands will exclude and after your for loop,

237
00:11:34.045 --> 00:11:36.985
if you have any lines after completion of your for loop,

238
00:11:36.985 --> 00:11:38.605
that line also will exclude.

239
00:11:38.605 --> 00:11:40.270
So you should be clear with that.

240
00:11:40.270 --> 00:11:41.485
Let me write some lines.

241
00:11:41.485 --> 00:11:46.810
So I am writing here clear command and echo.

242
00:11:46.810 --> 00:11:50.120
We are working with loops.

243
00:11:50.220 --> 00:11:52.540
So before starting your for loop,

244
00:11:52.540 --> 00:11:54.040
there is one echo command.

245
00:11:54.040 --> 00:11:55.840
And after completion of for loop,

246
00:11:55.840 --> 00:11:57.130
I can read some other logical.

247
00:11:57.130 --> 00:11:58.630
So here I am writing.

248
00:11:58.630 --> 00:12:03.040
We completed four loop.

249
00:12:03.040 --> 00:12:06.130
After completion of your for loop.

250
00:12:06.130 --> 00:12:09.145
This line will execute because they are in sequence.

251
00:12:09.145 --> 00:12:11.760
This is first line, the second line.

252
00:12:11.760 --> 00:12:13.625
And this entire thing as startling,

253
00:12:13.625 --> 00:12:16.340
after completion of third line automatically Portland coordinate

254
00:12:16.340 --> 00:12:19.610
x could not say, no, let me save it.

255
00:12:19.610 --> 00:12:24.335
See your code and run it.

256
00:12:24.335 --> 00:12:25.985
Sees output.

257
00:12:25.985 --> 00:12:28.625
First we are clearing because clear command is that,

258
00:12:28.625 --> 00:12:30.800
that output, it cleared the screen.

259
00:12:30.800 --> 00:12:32.390
Then we are working with loops.

260
00:12:32.390 --> 00:12:34.520
Then using your for loop,

261
00:12:34.520 --> 00:12:38.495
you are getting this output after completion of your for loop in your code.

262
00:12:38.495 --> 00:12:40.505
You how last echo command,

263
00:12:40.505 --> 00:12:41.735
that output you are getting here.

264
00:12:41.735 --> 00:12:44.585
That's a fine.

265
00:12:44.585 --> 00:12:48.995
Now the last syntax is infinity for New.

266
00:12:48.995 --> 00:12:51.979
Without defining any values,

267
00:12:51.979 --> 00:12:54.995
initialization condition, increment and decrement.

268
00:12:54.995 --> 00:12:57.080
If you run your for loop, it will repeat.

269
00:12:57.080 --> 00:13:00.245
It will execute for infinite number of times.

270
00:13:00.245 --> 00:13:08.760
Let me write VA infinitely Lu infinity for loop dot SH.

271
00:13:09.370 --> 00:13:12.630
I'm reading bin bash.

272
00:13:12.640 --> 00:13:16.310
Before starting your for loop just I am writing echo,

273
00:13:16.310 --> 00:13:18.965
and this is a for loop.

274
00:13:18.965 --> 00:13:26.930
Then let me write for simply parentheses, semicolon, semicolon parenthesis.

275
00:13:26.930 --> 00:13:28.910
Do done.

276
00:13:28.910 --> 00:13:30.710
For our understanding purpose,

277
00:13:30.710 --> 00:13:32.450
what I am doing is a code.

278
00:13:32.450 --> 00:13:35.450
This is infinity.

279
00:13:35.450 --> 00:13:38.900
Lu, An awful that I'm writing some sleep command,

280
00:13:38.900 --> 00:13:41.105
sleep for 1 second.

281
00:13:41.105 --> 00:13:44.525
That means your for loop will execute first this line.

282
00:13:44.525 --> 00:13:46.625
After that it'll include second command, sleep one.

283
00:13:46.625 --> 00:13:48.605
We know sleep one means it will wait for 1 second,

284
00:13:48.605 --> 00:13:50.450
then will go for next iteration.

285
00:13:50.450 --> 00:13:52.025
Let me save it.

286
00:13:52.025 --> 00:13:59.075
See you are core. Now I'm running C, the output.

287
00:13:59.075 --> 00:14:02.969
Yeah, I need to provide execution permissions.

288
00:14:03.640 --> 00:14:06.020
Now I'm running our code.

289
00:14:06.020 --> 00:14:10.050
We see that this is infinity loop.

290
00:14:10.180 --> 00:14:14.480
They're getting infinite number of times now it will execute.

291
00:14:14.480 --> 00:14:19.055
If you want to stop you how to use Control C on your keyboard.

292
00:14:19.055 --> 00:14:23.015
But logically you can stop that.

293
00:14:23.015 --> 00:14:26.270
As I've not don't wherever that but I am writing a condition.

294
00:14:26.270 --> 00:14:27.980
Whenever if you get a chance.

295
00:14:27.980 --> 00:14:30.365
I mean, while working with scripts there,

296
00:14:30.365 --> 00:14:33.380
I will discuss in detail about this.

297
00:14:33.380 --> 00:14:38.780
But as of now, simply I am writing some condition.

298
00:14:38.780 --> 00:14:40.865
Before starting your loop.

299
00:14:40.865 --> 00:14:43.260
I am defining any count.

300
00:14:43.270 --> 00:14:46.820
Then inside of your loop,

301
00:14:46.820 --> 00:14:51.420
just, I'm incrementing our counter variable.

302
00:14:53.970 --> 00:14:56.345
After asleep, I am writing one.

303
00:14:56.345 --> 00:15:02.635
You've conditioned if, if condition if two equals two,

304
00:15:02.635 --> 00:15:06.040
if count is equals to ten,

305
00:15:06.040 --> 00:15:12.050
then I'm using break.

306
00:15:26.700 --> 00:15:29.600
Now let me save it.

307
00:15:29.910 --> 00:15:32.770
And I'm running. Before that.

308
00:15:32.770 --> 00:15:34.820
Just see your core.

309
00:15:36.750 --> 00:15:50.455
What happened to 100?

310
00:15:50.455 --> 00:15:54.430
If you've, sorry, you had to end with the affine,

311
00:15:54.430 --> 00:15:56.540
not with the if right.

312
00:15:58.710 --> 00:16:06.385
Now you can also see that if I don't end up with the properly if I don't end up properly,

313
00:16:06.385 --> 00:16:11.725
it is something like a yes.

314
00:16:11.725 --> 00:16:16.820
No, clear my screen now see your core now run it.

315
00:16:18.970 --> 00:16:27.320
Because of this first Jaco you are getting this one, then 12345678910.

316
00:16:27.320 --> 00:16:28.250
It is stopping.

317
00:16:28.250 --> 00:16:31.910
So whenever you are County coast to ten, I'm using break.

318
00:16:31.910 --> 00:16:33.260
Break means.

319
00:16:33.260 --> 00:16:35.705
Actually it is a loop control statement.

320
00:16:35.705 --> 00:16:38.015
Whenever this line is executing,

321
00:16:38.015 --> 00:16:39.815
simply your for loop will stop,

322
00:16:39.815 --> 00:16:42.980
even though if you have a remaining iterations.

323
00:16:42.980 --> 00:16:45.875
But whenever break is executing,

324
00:16:45.875 --> 00:16:48.500
then your for loop will terminate.

325
00:16:48.500 --> 00:16:50.660
And after four movie,

326
00:16:50.660 --> 00:16:52.115
how many lanes that lays will execute?

327
00:16:52.115 --> 00:16:54.320
Let me write some line after your for loop.

328
00:16:54.320 --> 00:16:55.640
Echo.

329
00:16:55.640 --> 00:16:59.555
Out of loop. Only it will stop for loop,

330
00:16:59.555 --> 00:17:01.845
not your entire shell script.

331
00:17:01.845 --> 00:17:04.615
You have to clear with that

332
00:17:04.615 --> 00:17:14.920
2345678910 out of loop,

333
00:17:14.920 --> 00:17:17.815
you are getting this line you are getting.

334
00:17:17.815 --> 00:17:20.500
But actually it will repeat infinite number of times.

335
00:17:20.500 --> 00:17:23.470
But I'm controlling that after ten iterations,

336
00:17:23.470 --> 00:17:26.215
after ten iterations, intentionally,

337
00:17:26.215 --> 00:17:28.030
I am stopping my for loop.

338
00:17:28.030 --> 00:17:29.470
So using break.

339
00:17:29.470 --> 00:17:32.740
So break is it loop control statement will

340
00:17:32.740 --> 00:17:36.190
discuss in detail a boater loop control statements.

341
00:17:36.190 --> 00:17:38.949
So as, as i've not just to do practice with syntaxes,

342
00:17:38.949 --> 00:17:43.400
in next session, we will do some real time practice. Thank you.

