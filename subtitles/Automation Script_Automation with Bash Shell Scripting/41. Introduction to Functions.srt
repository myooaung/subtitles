1
00:00:00,080 --> 00:00:04,320
Friends here our concept is introduction to functions.

2
00:00:04,320 --> 00:00:06,825
And here we are working with very simple words

3
00:00:06,825 --> 00:00:09,615
to explain about functions and way going forward,

4
00:00:09,615 --> 00:00:12,135
we will see in depth about functions.

5
00:00:12,135 --> 00:00:14,985
Basically a function is a block of code.

6
00:00:14,985 --> 00:00:18,990
Block of code means some set of lines or commands or statements.

7
00:00:18,990 --> 00:00:24,960
So a function is a block of code that performs a specific task and which is reusable.

8
00:00:24,960 --> 00:00:28,245
Because of this reusability property of a function,

9
00:00:28,245 --> 00:00:31,155
we can reduce the core length or shell script length.

10
00:00:31,155 --> 00:00:33,435
Let me explain this in this way.

11
00:00:33,435 --> 00:00:38,915
Just assume that you How a 100 lines of shell script out of

12
00:00:38,915 --> 00:00:44,780
a 100 lines AT lines or unique lines means there is no duplicate code in this.

13
00:00:44,780 --> 00:00:48,590
And the remaining 20 lanes just assumed that you are

14
00:00:48,590 --> 00:00:52,355
repeating filings of logic in four places.

15
00:00:52,355 --> 00:00:56,345
Same logic you are repeating in four places.

16
00:00:56,345 --> 00:01:03,380
Now, whenever if you are repeating same logic in your shell script in different places,

17
00:01:03,380 --> 00:01:05,870
at the time, you don't need to repeat.

18
00:01:05,870 --> 00:01:06,875
Actually.

19
00:01:06,875 --> 00:01:10,730
Instead of repeating, what we will do is we will take

20
00:01:10,730 --> 00:01:14,870
those file line somewhere in your shell scripts and we will use some name for that.

21
00:01:14,870 --> 00:01:20,030
My core, suppose an wherever you are repeating this phi lines,

22
00:01:20,030 --> 00:01:22,520
they're simply, I will write my code so that you

23
00:01:22,520 --> 00:01:25,160
are going to reduce the length of your shell script.

24
00:01:25,160 --> 00:01:27,320
Let me show you this with an example.

25
00:01:27,320 --> 00:01:32,525
Suppose I have a shell script called simple menu-driven automatic calendar dot SH.

26
00:01:32,525 --> 00:01:34,325
First let me run this.

27
00:01:34,325 --> 00:01:36,800
Suppose I'm selecting additional option,

28
00:01:36,800 --> 00:01:39,500
then 45, it is giving the result.

29
00:01:39,500 --> 00:01:42,440
Now, see your code once again,

30
00:01:42,440 --> 00:01:45,320
simple menu-driven arithmetic calculator.

31
00:01:45,320 --> 00:01:48,900
Now if you observe in this entire shell script,

32
00:01:49,030 --> 00:01:53,840
These two lines you are repeating here and here,

33
00:01:53,840 --> 00:01:55,670
and here and here.

34
00:01:55,670 --> 00:02:00,500
In four places you are repeating these lines means eight lanes actually you are writing.

35
00:02:00,500 --> 00:02:04,950
But what I will do is I will take you first backup for this.

36
00:02:09,130 --> 00:02:12,560
Now I am opening our shell script C

37
00:02:12,560 --> 00:02:17,465
that instead of repeating these two lines in four places,

38
00:02:17,465 --> 00:02:20,075
first, I will copy these two lines.

39
00:02:20,075 --> 00:02:22,850
And in our shelf camp itself somewhere,

40
00:02:22,850 --> 00:02:24,545
I will give you a name for them.

41
00:02:24,545 --> 00:02:27,050
See how I am. I am giving the name for them.

42
00:02:27,050 --> 00:02:29,645
Suppose my quote, I'm giving them parenthesis.

43
00:02:29,645 --> 00:02:32,465
There is a syntax. Don't worry about that. Then.

44
00:02:32,465 --> 00:02:34,010
Curly braces.

45
00:02:34,010 --> 00:02:36,980
And inside of that, just write your logic.

46
00:02:36,980 --> 00:02:39,480
All the lines you are having.

47
00:02:39,580 --> 00:02:44,495
If you provide some space before starting any line in your function,

48
00:02:44,495 --> 00:02:46,175
then it is good for looking.

49
00:02:46,175 --> 00:02:47,105
That's it.

50
00:02:47,105 --> 00:02:50,315
Now wherever you are repeating your lines,

51
00:02:50,315 --> 00:02:53,960
just to remove those two lines, instead of them.

52
00:02:53,960 --> 00:02:55,370
Just view the name,

53
00:02:55,370 --> 00:02:57,770
whatever you are giving for these two lengths.

54
00:02:57,770 --> 00:03:02,015
So how given my Kono that I'm giving here my code.

55
00:03:02,015 --> 00:03:05,580
And here also just remove these two lines.

56
00:03:06,070 --> 00:03:09,560
Then write simply mike cord,

57
00:03:09,560 --> 00:03:13,010
known only to type your code in different places,

58
00:03:13,010 --> 00:03:16,740
lengthy code, each of that is somewhat shortcut.

59
00:03:19,270 --> 00:03:22,235
Now, wherever you are using those two lengths,

60
00:03:22,235 --> 00:03:28,430
they have just remove those two lengths and then do the name,

61
00:03:28,430 --> 00:03:30,440
type the name, or plays the name,

62
00:03:30,440 --> 00:03:32,405
whatever we have given for our two lines.

63
00:03:32,405 --> 00:03:33,605
Let's say my code.

64
00:03:33,605 --> 00:03:37,970
Now let me save it and run the shell script.

65
00:03:37,970 --> 00:03:41,585
I'm giving option a, suppose addition,

66
00:03:41,585 --> 00:03:47,720
sorry, addition, some phi and some number three,

67
00:03:47,720 --> 00:03:49,610
we are getting result as eight.

68
00:03:49,610 --> 00:03:52,190
Now what is not, what is here?

69
00:03:52,190 --> 00:03:56,690
Instead of typing these lengthy code again and again in different places.

70
00:03:56,690 --> 00:04:01,445
First, we are taking the score in one place and we are giving some name for that.

71
00:04:01,445 --> 00:04:03,200
Wherever actually you need

72
00:04:03,200 --> 00:04:06,740
these two lines inch off writing these two lines in your court simply,

73
00:04:06,740 --> 00:04:08,225
we are providing this name.

74
00:04:08,225 --> 00:04:09,620
That's it.

75
00:04:09,620 --> 00:04:12,575
Just assume that you are having some ten lines of

76
00:04:12,575 --> 00:04:15,890
code you are repeating in four or five places.

77
00:04:15,890 --> 00:04:17,135
Right?

78
00:04:17,135 --> 00:04:19,550
So actually, if you don't have this type of concept,

79
00:04:19,550 --> 00:04:22,445
you have to type your ten lines of code in different places.

80
00:04:22,445 --> 00:04:24,380
But if held these functions concept,

81
00:04:24,380 --> 00:04:28,400
then instead of typing your ten lines of code in different places,

82
00:04:28,400 --> 00:04:32,135
first we are writing those ten lines somewhere in your shell script itself.

83
00:04:32,135 --> 00:04:34,400
And we are giving some name for that.

84
00:04:34,400 --> 00:04:37,295
And wherever you need these ten lines of code,

85
00:04:37,295 --> 00:04:41,525
then simply we are writing the name which you are given for these lines,

86
00:04:41,525 --> 00:04:43,665
for the code for this block.

87
00:04:43,665 --> 00:04:46,330
Now, this is called simply a function,

88
00:04:46,330 --> 00:04:49,105
this entire thing, and this is called a function name.

89
00:04:49,105 --> 00:04:50,470
And these the syntax,

90
00:04:50,470 --> 00:04:52,630
and this is the block for your function.

91
00:04:52,630 --> 00:04:53,695
That's it.

92
00:04:53,695 --> 00:04:57,309
So these are very simple introduction for your functions.

93
00:04:57,309 --> 00:05:01,510
Now, let me show you the different ways to define a function.

94
00:05:01,510 --> 00:05:03,190
There are two ways actually.

95
00:05:03,190 --> 00:05:05,215
That is the first way and there's a second way.

96
00:05:05,215 --> 00:05:06,790
In first away.

97
00:05:06,790 --> 00:05:08,320
Function is the key.

98
00:05:08,320 --> 00:05:11,200
You have to write this function as it is with the small letters.

99
00:05:11,200 --> 00:05:13,000
And here you have to provide some name.

100
00:05:13,000 --> 00:05:15,340
And in second way, directly how to probably

101
00:05:15,340 --> 00:05:17,620
the name then parenthesis, intializer function.

102
00:05:17,620 --> 00:05:21,625
You can take parenthesis and block.

103
00:05:21,625 --> 00:05:24,310
You have to close with curly braces inside that you have to write

104
00:05:24,310 --> 00:05:27,755
your comments or set of statements or logic.

105
00:05:27,755 --> 00:05:30,065
So in both the ways, block is same,

106
00:05:30,065 --> 00:05:33,215
same syntax for your book only while defining your name.

107
00:05:33,215 --> 00:05:35,330
You can follow either this one or this one.

108
00:05:35,330 --> 00:05:37,715
Both are valid in your Bash shell scripting.

109
00:05:37,715 --> 00:05:40,715
But while defining function name,

110
00:05:40,715 --> 00:05:42,125
you ought to follow some rules.

111
00:05:42,125 --> 00:05:45,860
Those rules are exactly same as the rules which are there for

112
00:05:45,860 --> 00:05:51,245
your variables to define the name of your variable C. While defining a variable name,

113
00:05:51,245 --> 00:05:52,760
we follow some rules.

114
00:05:52,760 --> 00:05:55,594
Variable name should have only alphabets,

115
00:05:55,594 --> 00:05:59,090
maybe smaller capital letters and underscore and then visits.

116
00:05:59,090 --> 00:06:02,330
Same rules are applicable even for your function names.

117
00:06:02,330 --> 00:06:05,540
And variable names should not start with the number.

118
00:06:05,540 --> 00:06:08,270
Same rule is applicable for your function.

119
00:06:08,270 --> 00:06:12,995
Also, functions would not start with the number and variable should not have spaces.

120
00:06:12,995 --> 00:06:15,845
Same rule is applicable to define your function name as well.

121
00:06:15,845 --> 00:06:19,655
I mean, function names should not have any spaces that say.

122
00:06:19,655 --> 00:06:22,040
So in these two syntaxes,

123
00:06:22,040 --> 00:06:23,480
you can go with anyone of that,

124
00:06:23,480 --> 00:06:26,600
but I will go with this one because I am the lazy person.

125
00:06:26,600 --> 00:06:27,845
Instead of writing function,

126
00:06:27,845 --> 00:06:29,405
I will simply use parenthesis.

127
00:06:29,405 --> 00:06:33,090
That's it. Ok, thank you.

