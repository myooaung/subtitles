WEBVTT
ï»¿1
00:00:00.110 --> 00:00:05.220
Friends, we have seen the basic uses of Grip command in our previous video,

2
00:00:05.220 --> 00:00:08.760
and here we are working with advanced or uses often grep command.

3
00:00:08.760 --> 00:00:10.095
Let me start that.

4
00:00:10.095 --> 00:00:14.280
Only we know the syntax of Grip command that is simply grip options,

5
00:00:14.280 --> 00:00:17.010
string or pattern, then file or files.

6
00:00:17.010 --> 00:00:19.710
So if you want to write number of files on multiple files,

7
00:00:19.710 --> 00:00:21.870
then you had to write them with spaces.

8
00:00:21.870 --> 00:00:22.830
That's fine.

9
00:00:22.830 --> 00:00:26.774
And we explain about this grep command by using basic options.

10
00:00:26.774 --> 00:00:29.955
On here we are working with advanced options.

11
00:00:29.955 --> 00:00:31.680
Let me take one by one.

12
00:00:31.680 --> 00:00:33.360
The very first one is hyphen.

13
00:00:33.360 --> 00:00:38.705
Hyphen e. F means it takes such a string or a pattern from a file.

14
00:00:38.705 --> 00:00:39.935
Don't worry about pattern,

15
00:00:39.935 --> 00:00:41.330
we'll discuss in this video.

16
00:00:41.330 --> 00:00:45.170
So simply iPhone f takes a sub string from a file.

17
00:00:45.170 --> 00:00:48.020
Let me explain this with an example.

18
00:00:48.020 --> 00:00:54.830
Suppose I'm searching for line in a file called test.txt,

19
00:00:54.830 --> 00:00:57.530
then you are Grep command will display the lines

20
00:00:57.530 --> 00:01:00.440
from your test.txt which are having line string.

21
00:01:00.440 --> 00:01:05.525
Yes, you are getting. Now, instead of writing you are such a string on your command line.

22
00:01:05.525 --> 00:01:07.805
You can also store that India, fine.

23
00:01:07.805 --> 00:01:10.040
Now let me write V,

24
00:01:10.040 --> 00:01:13.565
I might such strings,

25
00:01:13.565 --> 00:01:18.665
you can take any file name and in this I am writing line. No, let me save this.

26
00:01:18.665 --> 00:01:23.855
And let me run. So here I am running grip

27
00:01:23.855 --> 00:01:29.150
with iPhone5 option by providing your filename in which we have is such a string.

28
00:01:29.150 --> 00:01:31.880
Then in which you want to look that finally,

29
00:01:31.880 --> 00:01:35.405
now see there is an either here or here,

30
00:01:35.405 --> 00:01:37.100
the output is same.

31
00:01:37.100 --> 00:01:41.165
So simply hyphen IAAF is useful to fetch,

32
00:01:41.165 --> 00:01:44.090
to pick us such a string from a file.

33
00:01:44.090 --> 00:01:46.130
And here we have one more advantage.

34
00:01:46.130 --> 00:01:49.715
You can provide multiple such strings in the file,

35
00:01:49.715 --> 00:01:51.290
but one per line.

36
00:01:51.290 --> 00:01:53.450
In one line you had to write first,

37
00:01:53.450 --> 00:01:56.075
satisfying, then one more.

38
00:01:56.075 --> 00:01:58.715
Then if you want write one moody S, We can write.

39
00:01:58.715 --> 00:02:03.365
So as of now, how given three such strings in your file?

40
00:02:03.365 --> 00:02:08.345
And if I run Grip command with iPhone5 option by avoiding this file name,

41
00:02:08.345 --> 00:02:12.080
then you are Grip command will take such strings from this file.

42
00:02:12.080 --> 00:02:13.625
So we have three strings.

43
00:02:13.625 --> 00:02:14.900
Now you're Grip command.

44
00:02:14.900 --> 00:02:18.185
We'll look for those three strings in it text to file.

45
00:02:18.185 --> 00:02:19.880
If there is a match 40 watts strings,

46
00:02:19.880 --> 00:02:23.135
then you will get the lines from your file. That's it.

47
00:02:23.135 --> 00:02:26.240
Suppose if I write one more,

48
00:02:26.240 --> 00:02:34.445
Let's say Python Shell and Python Shell strings are not present in our test.txt.

49
00:02:34.445 --> 00:02:36.005
That's why there is no match.

50
00:02:36.005 --> 00:02:38.090
If there is a match, you will get for that.

51
00:02:38.090 --> 00:02:40.535
I mean, you will get the lines for that.

52
00:02:40.535 --> 00:02:42.500
That's it.

53
00:02:42.500 --> 00:02:48.290
Now, instead of writing such strings in your file,

54
00:02:48.290 --> 00:02:53.675
you can also directly excluded from your command line by using grip hyphen e option.

55
00:02:53.675 --> 00:03:00.035
Hyphen e, your first Such string, or next one.

56
00:03:00.035 --> 00:03:04.980
Likewise, you can provide any number of such strings.

57
00:03:08.230 --> 00:03:14.150
Then finally, in which file you want to look that file name you have to write,

58
00:03:14.150 --> 00:03:16.380
not to say there is a.

59
00:03:16.420 --> 00:03:21.875
So instead of writing your search strings in the file with iPhone year option,

60
00:03:21.875 --> 00:03:25.714
you can execute multiple strings.

61
00:03:25.714 --> 00:03:31.520
Now, instead of writing hyphen e for multiple such strings,

62
00:03:31.520 --> 00:03:33.365
I can simplify this regular expression.

63
00:03:33.365 --> 00:03:35.434
I'm in this expression.

64
00:03:35.434 --> 00:03:38.825
In this way, grip hyphen e,

65
00:03:38.825 --> 00:03:47.990
line pipeline, a bot pipeline by biplane shell pipeline.

66
00:03:47.990 --> 00:03:50.720
If you want, write one more thing, Python.

67
00:03:50.720 --> 00:03:53.480
Close the petitions, then write

68
00:03:53.480 --> 00:03:57.155
the file limb in which you want to look for all these strings.

69
00:03:57.155 --> 00:03:58.700
Be clear, I have written a file,

70
00:03:58.700 --> 00:04:01.115
I have a linear pipeline symbol.

71
00:04:01.115 --> 00:04:04.205
Not the meaning for this pipeline, 0s.

72
00:04:04.205 --> 00:04:07.265
This is one string, these separate string.

73
00:04:07.265 --> 00:04:11.510
So you are having 12345 such strings.

74
00:04:11.510 --> 00:04:15.635
So you're grep command will look for these five strings in a given file.

75
00:04:15.635 --> 00:04:17.675
If there is a match for your string,

76
00:04:17.675 --> 00:04:21.005
it will do the lanes in which that string is that.

77
00:04:21.005 --> 00:04:25.880
But be clear, we have to use hyphen capital E. If you don't want to use hyphen capital,

78
00:04:25.880 --> 00:04:27.140
you had to run in this way.

79
00:04:27.140 --> 00:04:28.310
This is somewhat lengthy, right?

80
00:04:28.310 --> 00:04:30.485
Again, again, we are using hyphen e option.

81
00:04:30.485 --> 00:04:32.525
Yes, I simplified that.

82
00:04:32.525 --> 00:04:36.830
Now here, this is called a pattern.

83
00:04:36.830 --> 00:04:39.425
See basically pattern is also a string,

84
00:04:39.425 --> 00:04:43.400
but pattern represents more than one strings.

85
00:04:43.400 --> 00:04:46.010
Now this entire thing is a string,

86
00:04:46.010 --> 00:04:48.605
but it is representing line, string,

87
00:04:48.605 --> 00:04:52.040
string, string, string, Python, string.

88
00:04:52.040 --> 00:04:55.760
So phi such strings are there in this string.

89
00:04:55.760 --> 00:04:57.215
So this is a pattern.

90
00:04:57.215 --> 00:05:03.770
So simply pattern is a string and it represents more than one string.

91
00:05:03.770 --> 00:05:07.385
And to execute your patterns in your Grip command,

92
00:05:07.385 --> 00:05:11.945
you how to use hyphen capitally option friends from now onwards,

93
00:05:11.945 --> 00:05:15.035
please follow this syntax for your clip command.

94
00:05:15.035 --> 00:05:19.760
Simply grep hyphen capitally.

95
00:05:19.760 --> 00:05:21.995
Just take it as a default option,

96
00:05:21.995 --> 00:05:24.350
then remaining what optional.

97
00:05:24.350 --> 00:05:27.110
So these options are from here.

98
00:05:27.110 --> 00:05:30.830
And now forget about iPhone5 honey and iPhone capitally.

99
00:05:30.830 --> 00:05:36.030
Now use this as your default syntax for Grep command.

100
00:05:36.190 --> 00:05:39.500
Maybe sometimes you may use iPhone5 optional.

101
00:05:39.500 --> 00:05:42.440
So you can take simply gripped by 4f and you can provide

102
00:05:42.440 --> 00:05:46.760
your search strings in the file and then Eva file or files,

103
00:05:46.760 --> 00:05:50.944
but this is the mostly used one in your realtime.

104
00:05:50.944 --> 00:05:54.275
So please do follow this syntax for your grep command.

105
00:05:54.275 --> 00:05:56.735
It's better one, fine.

106
00:05:56.735 --> 00:06:02.075
Now, if you want to use the grep command with the patterns,

107
00:06:02.075 --> 00:06:04.670
you how to know how to create a pattern.

108
00:06:04.670 --> 00:06:09.110
As I've know how create a pattern with pipeline so that you are,

109
00:06:09.110 --> 00:06:11.045
this string is representing,

110
00:06:11.045 --> 00:06:14.030
this pattern is representing five SO2 strings.

111
00:06:14.030 --> 00:06:15.530
So likewise we whoa,

112
00:06:15.530 --> 00:06:17.645
I mean like pipes, a pipe symbol.

113
00:06:17.645 --> 00:06:22.010
We have different types of symbols to a create a pattern.

114
00:06:22.010 --> 00:06:23.720
Now let me go with one-by-one.

115
00:06:23.720 --> 00:06:25.685
So by completion of this rules,

116
00:06:25.685 --> 00:06:30.005
you can understand how to create a patterns effectively.

117
00:06:30.005 --> 00:06:34.100
So the very first one already we have seen pipeline symbol.

118
00:06:34.100 --> 00:06:37.355
So it matches for X-ray RPQ.

119
00:06:37.355 --> 00:06:38.900
You can take any strings,

120
00:06:38.900 --> 00:06:40.265
any number of strings,

121
00:06:40.265 --> 00:06:45.800
then anchor or kept symbol with some string.

122
00:06:45.800 --> 00:06:49.880
Then that is matches for the lines which are starting with X, Y, Zed.

123
00:06:49.880 --> 00:06:57.755
Suppose if you observe in your Finally how let me take your file first.

124
00:06:57.755 --> 00:07:04.010
Different things. Now. I want

125
00:07:04.010 --> 00:07:07.460
to bring to the lines friends

126
00:07:07.460 --> 00:07:11.765
from now onwards I will take grip hyphen capitally than in quotations.

127
00:07:11.765 --> 00:07:14.420
I'm taking kept symbol.

128
00:07:14.420 --> 00:07:17.300
Suppose without cap, suppose you've curated this.

129
00:07:17.300 --> 00:07:20.555
Let me write this line.

130
00:07:20.555 --> 00:07:23.705
I will do one thing was I will admit my file.

131
00:07:23.705 --> 00:07:27.930
I will write down some extra lines so that he can it must start.

132
00:07:32.110 --> 00:07:37.460
Somewhere here I am writing this fossil,

133
00:07:37.460 --> 00:07:39.290
see the content of your file.

134
00:07:39.290 --> 00:07:42.560
So there is a here and here.

135
00:07:42.560 --> 00:07:47.195
Now, initially I'm looking for friends from no adverse.

136
00:07:47.195 --> 00:07:50.585
Please don't forget to take hyphen capitally.

137
00:07:50.585 --> 00:07:55.340
Simply, I'm I'm writing THE Yes in the file.

138
00:07:55.340 --> 00:07:58.490
I'll see that isn't. So wherever this is there,

139
00:07:58.490 --> 00:08:00.185
you are getting all those lines.

140
00:08:00.185 --> 00:08:06.590
But I want to print the lines which are starting with this, then caps M.

141
00:08:06.590 --> 00:08:09.335
Now this is very, very useful.

142
00:08:09.335 --> 00:08:12.275
So in our course superbly also,

143
00:08:12.275 --> 00:08:16.820
we use somewhere to grip the port number of HTTPD.

144
00:08:16.820 --> 00:08:19.760
So actually suppose, let me do it in this way.

145
00:08:19.760 --> 00:08:22.475
Grip, hyphen e.

146
00:08:22.475 --> 00:08:25.054
I'm taking listen.

147
00:08:25.054 --> 00:08:35.570
Then in a file called in this,

148
00:08:35.570 --> 00:08:36.840
I am looking for a reason.

149
00:08:36.840 --> 00:08:39.220
See, you are getting some unknown lengths.

150
00:08:39.220 --> 00:08:41.665
But if you observe you are required line is this one.

151
00:08:41.665 --> 00:08:44.800
And anyway, that line is starting exactly with capitals,

152
00:08:44.800 --> 00:08:47.125
starting with the listen.

153
00:08:47.125 --> 00:08:50.605
And these lines are not starting with the reason.

154
00:08:50.605 --> 00:08:55.630
That's the reason I'm taking here cap symbols so that the meaning for that

155
00:08:55.630 --> 00:09:01.105
is such the lanes which are starting exactly with Alizarin knots it.

156
00:09:01.105 --> 00:09:04.060
So that is that one page of cap symbol.

157
00:09:04.060 --> 00:09:07.780
Then second $1, some string

158
00:09:07.780 --> 00:09:11.200
with the dollar matches for the lines which are ending with x,

159
00:09:11.200 --> 00:09:13.615
y, z integrals starting.

160
00:09:13.615 --> 00:09:17.620
You can also search the lines which are ending with a particular string.

161
00:09:17.620 --> 00:09:23.195
So let me take it thing with yeah,

162
00:09:23.195 --> 00:09:25.865
this only you can take this here and here is demo.

163
00:09:25.865 --> 00:09:29.315
So previously we look for this,

164
00:09:29.315 --> 00:09:32.075
which is they're starting. Now.

165
00:09:32.075 --> 00:09:35.045
First let me go and take that one.

166
00:09:35.045 --> 00:09:36.995
And you are getting this line.

167
00:09:36.995 --> 00:09:38.375
Now instead of starting,

168
00:09:38.375 --> 00:09:39.800
I want to print the lines.

169
00:09:39.800 --> 00:09:42.800
I want to match the lanes which are having this at

170
00:09:42.800 --> 00:09:47.150
the end weekly or I'm writing at the end of your Such a string.

171
00:09:47.150 --> 00:09:49.350
That's it.

172
00:09:49.360 --> 00:09:55.430
Then if we club these two cap on dollar than you are going to get empty lines.

173
00:09:55.430 --> 00:09:57.650
So that will match for empty lines, very,

174
00:09:57.650 --> 00:09:59.120
very useful in your sed command.

175
00:09:59.120 --> 00:10:01.040
Also, this syntax.

176
00:10:01.040 --> 00:10:03.740
Now simply, if you observe your file,

177
00:10:03.740 --> 00:10:05.570
you are having some empty line here.

178
00:10:05.570 --> 00:10:08.795
Now, if i such in this way,

179
00:10:08.795 --> 00:10:11.735
starting with the cap and ending with a dollar,

180
00:10:11.735 --> 00:10:13.745
that means the meaningful that is,

181
00:10:13.745 --> 00:10:15.530
match for empty lines.

182
00:10:15.530 --> 00:10:18.215
Yes, there is a one empty line you are getting back.

183
00:10:18.215 --> 00:10:22.160
So very, very useful in your set command as well.

184
00:10:22.160 --> 00:10:23.555
Fine.

185
00:10:23.555 --> 00:10:27.725
Next thing, slash to remove the special purpose of any symbol,

186
00:10:27.725 --> 00:10:30.005
not only your cap or dollar.

187
00:10:30.005 --> 00:10:32.480
So we are having some more special symbols.

188
00:10:32.480 --> 00:10:35.330
To remove that purpose, we can use slash.

189
00:10:35.330 --> 00:10:40.715
Suppose I want to match the lines which are having kept symbol.

190
00:10:40.715 --> 00:10:44.540
Suppose directly if I do grip hyphen e,

191
00:10:44.540 --> 00:10:49.070
cap symbol, then test.txt and see the result.

192
00:10:49.070 --> 00:10:50.555
You are getting all lines,

193
00:10:50.555 --> 00:10:52.250
but I don't want to print all the lines.

194
00:10:52.250 --> 00:10:54.815
I want to print a line which is having kept symbol.

195
00:10:54.815 --> 00:10:57.920
Basically cap means we knows with the starting.

196
00:10:57.920 --> 00:11:00.245
But I want to remove that special purpose,

197
00:11:00.245 --> 00:11:06.800
then simply use slash before you were symbol so that see there is a,

198
00:11:06.800 --> 00:11:10.970
now the meaning for these is printed the lines which are having kept symbol,

199
00:11:10.970 --> 00:11:12.890
not the purpose of cap,

200
00:11:12.890 --> 00:11:15.230
basic purpose of your copies.

201
00:11:15.230 --> 00:11:18.905
Starting with that, whatever the string you are mentioning.

202
00:11:18.905 --> 00:11:20.855
Not to remove that purpose,

203
00:11:20.855 --> 00:11:22.490
we have to use slash.

204
00:11:22.490 --> 00:11:24.080
Not only for their cap,

205
00:11:24.080 --> 00:11:25.805
you can also use for dollar as well.

206
00:11:25.805 --> 00:11:28.505
In case if knowledge is there somewhere in your file,

207
00:11:28.505 --> 00:11:33.275
then.means matches any one character.

208
00:11:33.275 --> 00:11:37.640
Say now directly if I used a dot, you will get confused.

209
00:11:37.640 --> 00:11:41.405
For C, the result. You can't understand by directly for you,

210
00:11:41.405 --> 00:11:44.225
simply dot you're getting all the matches.

211
00:11:44.225 --> 00:11:46.115
So dot any character.

212
00:11:46.115 --> 00:11:48.320
That's why all characters are matching.

213
00:11:48.320 --> 00:11:50.960
Now let me do one thing.

214
00:11:50.960 --> 00:11:55.010
I want do printed the strings,

215
00:11:55.010 --> 00:12:02.105
which are starting with let say p,

216
00:12:02.105 --> 00:12:05.640
then after the two characters, then yes.

217
00:12:05.640 --> 00:12:09.190
Now the meaning for disease, be clear.

218
00:12:09.190 --> 00:12:13.240
You are looking for a string which is starting with a t and

219
00:12:13.240 --> 00:12:16.615
ending with the S. In between that you may how any two characters,

220
00:12:16.615 --> 00:12:18.760
that is the meaning of dot.means any character.

221
00:12:18.760 --> 00:12:20.590
Now I used two dots.

222
00:12:20.590 --> 00:12:24.340
Policy there isn't. Here, t is there,

223
00:12:24.340 --> 00:12:28.135
and ending ES is there between that two characters.

224
00:12:28.135 --> 00:12:30.760
Those two characters may be any characters,

225
00:12:30.760 --> 00:12:32.815
not only headshot I,

226
00:12:32.815 --> 00:12:34.839
any, any two characters.

227
00:12:34.839 --> 00:12:37.150
That's it turns the uses of dot.

228
00:12:37.150 --> 00:12:40.795
And if you want to match dot width dot,

229
00:12:40.795 --> 00:12:42.580
then you have to use Slashdot.

230
00:12:42.580 --> 00:12:45.730
Suppose if you observe your file.

231
00:12:45.730 --> 00:12:51.760
So here we are. Now I want to match the lines which are having dots.

232
00:12:51.760 --> 00:12:54.310
For some lines you don't have dark for some lines you are having

233
00:12:54.310 --> 00:12:57.820
bought basically.me, any one character.

234
00:12:57.820 --> 00:13:00.325
But I want to match dot with dot only,

235
00:13:00.325 --> 00:13:02.455
then use again slash.

236
00:13:02.455 --> 00:13:04.540
Now first remote days, yeah,

237
00:13:04.540 --> 00:13:09.160
see Slashdot now Match dot with a only that is the meaning.

238
00:13:09.160 --> 00:13:10.990
Be clear on this.

239
00:13:10.990 --> 00:13:14.575
Now you are printing the lines which are having dots.

240
00:13:14.575 --> 00:13:17.425
It is very, very important.

241
00:13:17.425 --> 00:13:18.730
Fine.

242
00:13:18.730 --> 00:13:24.220
Next slash b matches the empty string at the edge of a word.

243
00:13:24.220 --> 00:13:27.700
So it may be on right side or left side of your work.

244
00:13:27.700 --> 00:13:29.629
Suppose

245
00:13:30.270 --> 00:13:39.050
Let me suppose I want to look for the string called line.

246
00:13:39.060 --> 00:13:45.880
String called line in a file for us to see the output line.

247
00:13:45.880 --> 00:13:50.905
Lines, but offer lanes actually sought after LN S, is there?

248
00:13:50.905 --> 00:13:54.400
Even though yes. Is there you are not giving any condition

249
00:13:54.400 --> 00:13:57.820
just simply such the lines which are having simply line.

250
00:13:57.820 --> 00:14:03.324
But now bring to the lines which are having line and at the end some space.

251
00:14:03.324 --> 00:14:06.490
Now see that you are not getting line's

252
00:14:06.490 --> 00:14:11.290
not only that printed the lines which are having lane,

253
00:14:11.290 --> 00:14:14.240
but before lane, you should have some.

254
00:14:14.290 --> 00:14:16.415
That is my requirement.

255
00:14:16.415 --> 00:14:18.185
Now see the output.

256
00:14:18.185 --> 00:14:21.560
There is a space that is why this is a matching for your pattern.

257
00:14:21.560 --> 00:14:26.240
There is a space before that matching for your pattern.

258
00:14:26.240 --> 00:14:32.945
No, I want to look for a string which is having space at the starting and the ending,

259
00:14:32.945 --> 00:14:36.860
then you have to mention slash b on both sides of your string.

260
00:14:36.860 --> 00:14:41.720
Nausea that is, now instead of using in this way slash b starting and ending,

261
00:14:41.720 --> 00:14:44.465
this is nothing but exactly or looking for a word,

262
00:14:44.465 --> 00:14:48.680
you can use no hyphen W option.

263
00:14:48.680 --> 00:14:51.200
We have already basic option W,

264
00:14:51.200 --> 00:14:52.580
mostly that is, sorry.

265
00:14:52.580 --> 00:14:55.715
I have taken B as well.

266
00:14:55.715 --> 00:14:59.510
Hyphen e, w, we know exact word match.

267
00:14:59.510 --> 00:15:01.910
Yes, you are getting. So instead of using

268
00:15:01.910 --> 00:15:05.795
slash b at the starting and ending in case if this is your situation,

269
00:15:05.795 --> 00:15:07.655
non-linear write in this way, you can use,

270
00:15:07.655 --> 00:15:10.475
you can club hyphen W option.

271
00:15:10.475 --> 00:15:12.420
That's right.

272
00:15:12.430 --> 00:15:15.455
Next one, question mark.

273
00:15:15.455 --> 00:15:22.040
Question mark means the preceding character is optional and will be matched at most once.

274
00:15:22.040 --> 00:15:26.760
Means I will explain with an example so that it can understand.

275
00:15:28.360 --> 00:15:33.710
Suppose if I write the grip hyphen capitally,

276
00:15:33.710 --> 00:15:35.765
then I'm looking for y.

277
00:15:35.765 --> 00:15:39.575
Then let's say, why if I am looking in

278
00:15:39.575 --> 00:15:44.105
such a string facilities or you are getting these two lines.

279
00:15:44.105 --> 00:15:45.620
But in my case,

280
00:15:45.620 --> 00:15:48.395
ye fees optional, it may or may not.

281
00:15:48.395 --> 00:15:51.650
If he's optional, it may or may not be.

282
00:15:51.650 --> 00:15:54.260
In that case, you have to write question mark.

283
00:15:54.260 --> 00:15:55.895
The meaningful that is,

284
00:15:55.895 --> 00:15:57.905
the preceding character means EF.

285
00:15:57.905 --> 00:16:01.950
Ef Maybe Juno times or one time.

286
00:16:02.260 --> 00:16:05.855
No, see that is a that also matching this line.

287
00:16:05.855 --> 00:16:07.625
Here we are not there.

288
00:16:07.625 --> 00:16:08.495
No problem.

289
00:16:08.495 --> 00:16:11.135
Question mark means genotypes are one times.

290
00:16:11.135 --> 00:16:14.750
So your pattern will represent why.

291
00:16:14.750 --> 00:16:17.285
Yes, that's it.

292
00:16:17.285 --> 00:16:19.250
That's why there is a match.

293
00:16:19.250 --> 00:16:23.825
So question mark means 0 times so DCF or at least one time,

294
00:16:23.825 --> 00:16:27.095
maximum one time, not at least max one time.

295
00:16:27.095 --> 00:16:30.020
So that's arisen. See the highlighted part.

296
00:16:30.020 --> 00:16:35.090
That is matching than stock.

297
00:16:35.090 --> 00:16:40.160
The preceding territory will be matched with 0 or more times, not only one time.

298
00:16:40.160 --> 00:16:41.330
Suppose if we take question mark,

299
00:16:41.330 --> 00:16:43.085
it will match only for one time.

300
00:16:43.085 --> 00:16:44.645
But if I take star,

301
00:16:44.645 --> 00:16:48.695
it will search for juror banks on more than one time.

302
00:16:48.695 --> 00:16:51.800
Now see there is a UAV,

303
00:16:51.800 --> 00:16:53.030
is there more times?

304
00:16:53.030 --> 00:16:55.280
Yes, it is. Matching star means any number of

305
00:16:55.280 --> 00:16:57.920
times to these entities there are maybe 0 times.

306
00:16:57.920 --> 00:17:01.620
That's why they're getting this many matchings.

307
00:17:01.620 --> 00:17:05.050
Let's be clear. Why is only one time.

308
00:17:05.050 --> 00:17:08.800
But this star is applicable only 4f character.

309
00:17:08.800 --> 00:17:10.540
You have maybe Juno times.

310
00:17:10.540 --> 00:17:11.785
That's why you are getting this one.

311
00:17:11.785 --> 00:17:13.420
Y d rho times of f,

312
00:17:13.420 --> 00:17:16.135
and you have maybe one or more times.

313
00:17:16.135 --> 00:17:19.240
But if you observe here this many number of times is that star

314
00:17:19.240 --> 00:17:23.470
means any number of times, including 0.

315
00:17:23.470 --> 00:17:27.430
Now plus, plus means minimum,

316
00:17:27.430 --> 00:17:29.605
one, maximum and a number of times.

317
00:17:29.605 --> 00:17:39.415
Now suppose if I take simply UFO plus after VIII usual now at least a year,

318
00:17:39.415 --> 00:17:41.245
at least one time, yes.

319
00:17:41.245 --> 00:17:44.030
But maximum number of times.

320
00:17:46.330 --> 00:17:54.695
Guys first tried to London uses of each and every symbol in your patterns.

321
00:17:54.695 --> 00:17:57.065
Then we will see some practice as well anyway,

322
00:17:57.065 --> 00:17:59.450
this is also some somewhat simple practices with you.

323
00:17:59.450 --> 00:18:00.950
What symbols?

324
00:18:00.950 --> 00:18:03.605
Then in square brackets?

325
00:18:03.605 --> 00:18:05.345
Suppose if i write x, y, z,

326
00:18:05.345 --> 00:18:10.415
then it matches for the lines which are having either x or y or z.

327
00:18:10.415 --> 00:18:14.630
Suppose, suppose we are doing in this way.

328
00:18:14.630 --> 00:18:17.490
Let me write that.

329
00:18:20.650 --> 00:18:24.725
Sorry. Grip.

330
00:18:24.725 --> 00:18:27.375
Yeah, first let me take you are fine.

331
00:18:27.375 --> 00:18:37.615
Now I'm looking for capital T, small t.

332
00:18:37.615 --> 00:18:40.000
Capital T small t.

333
00:18:40.000 --> 00:18:48.220
Then something like EF are white in a given string.

334
00:18:48.220 --> 00:18:52.990
The same thing you can also write in this way instead of pipelines in battle.

335
00:18:52.990 --> 00:18:57.940
And this is only for single character right?

336
00:18:57.940 --> 00:19:01.914
Inside of square brackets you write any number of characters.

337
00:19:01.914 --> 00:19:06.535
The meaning for that is it is looking for either T or capital T,

338
00:19:06.535 --> 00:19:08.080
or small F or capital.

339
00:19:08.080 --> 00:19:14.860
Why not say anyone of that? That's it.

340
00:19:14.860 --> 00:19:21.100
Now, if I, if I write something like yay hyphen D,

341
00:19:21.100 --> 00:19:25.900
Suppose if you want to set to the character or string,

342
00:19:25.900 --> 00:19:27.865
either a or b or c or d.

343
00:19:27.865 --> 00:19:29.785
Generally we will write in this way.

344
00:19:29.785 --> 00:19:31.270
I mean you have two ways.

345
00:19:31.270 --> 00:19:33.460
One is you can use biplane symbol.

346
00:19:33.460 --> 00:19:35.980
Suppose E, a or B,

347
00:19:35.980 --> 00:19:38.710
or C or D,

348
00:19:38.710 --> 00:19:43.750
or E, Something like that in a given file.

349
00:19:43.750 --> 00:19:45.850
Now, instead of that,

350
00:19:45.850 --> 00:19:52.910
we can also use square brackets.

351
00:19:53.890 --> 00:19:55.835
This is a valid one.

352
00:19:55.835 --> 00:19:58.130
Both will give the same result.

353
00:19:58.130 --> 00:20:02.285
And even instead of writing this ABCDEF, whenever if you are,

354
00:20:02.285 --> 00:20:04.250
characters are in sequence,

355
00:20:04.250 --> 00:20:06.605
then you can write simply NPV.

356
00:20:06.605 --> 00:20:12.350
That's simply not true.

357
00:20:12.350 --> 00:20:15.770
You're going at 80, you have ADF means either ERB,

358
00:20:15.770 --> 00:20:18.510
RC, RD, Something like that.

359
00:20:22.150 --> 00:20:26.750
Next year a to D is two j.

360
00:20:26.750 --> 00:20:30.065
Suppose if you want to look ABCD,

361
00:20:30.065 --> 00:20:33.290
then PQR, then first of all,

362
00:20:33.290 --> 00:20:35.070
let me write that grip.

363
00:20:35.070 --> 00:20:40.375
Capital E, either a or B or C or D,

364
00:20:40.375 --> 00:20:45.085
And then either p or q or r.

365
00:20:45.085 --> 00:20:47.200
Then in a file.

366
00:20:47.200 --> 00:20:50.590
Once again, I am writing instead of biplane symbol,

367
00:20:50.590 --> 00:20:59.990
you can use square brackets.

368
00:21:01.560 --> 00:21:07.150
And if you observe here AB and CD are in sequence and the PQ or also in sequence.

369
00:21:07.150 --> 00:21:08.710
Now in that case,

370
00:21:08.710 --> 00:21:16.330
you can do in this way a to D, then P2.

371
00:21:16.330 --> 00:21:25.075
Ok, let's say both are giving same result object.

372
00:21:25.075 --> 00:21:29.260
Then 41 square brackets.

373
00:21:29.260 --> 00:21:30.940
If you start with cap,

374
00:21:30.940 --> 00:21:33.700
then you are looking for a lane which is

375
00:21:33.700 --> 00:21:36.730
starting with either a or b or c, something like that.

376
00:21:36.730 --> 00:21:40.285
Let suppose we have a file called test.txt.

377
00:21:40.285 --> 00:21:44.935
And first I am looking for x or y,

378
00:21:44.935 --> 00:21:49.285
printed the lines which are having either x or y from your file.

379
00:21:49.285 --> 00:21:50.935
Yes, you are getting the output.

380
00:21:50.935 --> 00:21:54.160
Now if I play before this square brackets,

381
00:21:54.160 --> 00:21:55.945
if I play caps in ML,

382
00:21:55.945 --> 00:21:57.790
the meaningful that is printed,

383
00:21:57.790 --> 00:22:00.690
the lines which are starting with either X or Y.

384
00:22:00.690 --> 00:22:01.475
Yes.

385
00:22:01.475 --> 00:22:06.200
Now this line is keeping because this line is not starting with either XOR Y.

386
00:22:06.200 --> 00:22:07.910
Fine.

387
00:22:07.910 --> 00:22:12.950
Now, if I apply this cap symbol inside of square brackets,

388
00:22:12.950 --> 00:22:15.290
then the meaning will get changed.

389
00:22:15.290 --> 00:22:17.210
So without kept symbol,

390
00:22:17.210 --> 00:22:19.355
if I write in square brackets x,

391
00:22:19.355 --> 00:22:24.170
y, the meaning for the grep command will look for either x or y.

392
00:22:24.170 --> 00:22:26.105
But if I write cap symbol,

393
00:22:26.105 --> 00:22:29.840
Grip command will look for other than you are x and y.

394
00:22:29.840 --> 00:22:31.025
Now c, that is a.

395
00:22:31.025 --> 00:22:32.765
That's the reason why.

396
00:22:32.765 --> 00:22:35.060
And they are not highlighting actually are

397
00:22:35.060 --> 00:22:38.015
Grep command is looking for other than these two characters.

398
00:22:38.015 --> 00:22:40.680
That's why remaining characters or highlighting.

399
00:22:40.840 --> 00:22:46.820
Fine. Then next one is curly braces in here.

400
00:22:46.820 --> 00:22:48.515
3n means number.

401
00:22:48.515 --> 00:22:51.935
The preceding string match exactly yen times.

402
00:22:51.935 --> 00:22:54.485
Let me explain this so that they can understand.

403
00:22:54.485 --> 00:22:57.395
Suppose I am looking for drip,

404
00:22:57.395 --> 00:23:02.150
hyphen e x in a given file.

405
00:23:02.150 --> 00:23:08.975
Maybe any fight right? Now, I'm looking for x four times.

406
00:23:08.975 --> 00:23:11.450
Yes, there is a match.

407
00:23:11.450 --> 00:23:17.060
And instead of writing f of four times simply you can do,

408
00:23:17.060 --> 00:23:20.465
you have then curly braces for now the meaning is same.

409
00:23:20.465 --> 00:23:22.040
If you write in this way,

410
00:23:22.040 --> 00:23:23.885
the meaning is 0x after x,

411
00:23:23.885 --> 00:23:26.015
x0 f easy fees four times.

412
00:23:26.015 --> 00:23:30.920
That's a shortcut for this string representation, this pattern representation.

413
00:23:30.920 --> 00:23:32.280
That's it.

414
00:23:32.470 --> 00:23:38.220
Now, let me such with the three.

415
00:23:38.470 --> 00:23:42.890
So here, three times of your phase there immediately offerings here

416
00:23:42.890 --> 00:23:47.420
also three times of your phase there immediately after you what x?

417
00:23:47.420 --> 00:23:51.390
Now what I'm doing is three comma four also I am writing.

418
00:23:51.700 --> 00:23:55.685
You are looking for yes,

419
00:23:55.685 --> 00:23:57.545
maybe three times or four times.

420
00:23:57.545 --> 00:23:59.435
That's the reason you are getting 0x,

421
00:23:59.435 --> 00:24:01.955
0x F3 times xy four times.

422
00:24:01.955 --> 00:24:03.740
So here we have four times,

423
00:24:03.740 --> 00:24:05.165
is there, that's why you're getting.

424
00:24:05.165 --> 00:24:08.210
But now I'm playing one more condition at the yen.

425
00:24:08.210 --> 00:24:09.350
I'm writing slash b.

426
00:24:09.350 --> 00:24:12.335
Slash b means after you or match,

427
00:24:12.335 --> 00:24:14.030
there should be a space.

428
00:24:14.030 --> 00:24:16.430
If you observe in these two matches,

429
00:24:16.430 --> 00:24:18.680
EX EF three times.

430
00:24:18.680 --> 00:24:22.295
So three comma four means EF maybe three times,

431
00:24:22.295 --> 00:24:23.915
4f maybe four times.

432
00:24:23.915 --> 00:24:27.920
But after three or four times there should be a space. Just now we have given.

433
00:24:27.920 --> 00:24:29.450
So here's bases there,

434
00:24:29.450 --> 00:24:30.920
but here there is no space dust.

435
00:24:30.920 --> 00:24:33.005
That's why this match will keep.

436
00:24:33.005 --> 00:24:37.110
Only this match will see there is a, that's it.

437
00:24:38.350 --> 00:24:42.200
So you're gonna having, yeah, one more thing.

438
00:24:42.200 --> 00:24:47.425
Suppose if i write grep hyphen e x EF,

439
00:24:47.425 --> 00:24:52.150
it's curly brace two comma, the meaningful disease.

440
00:24:52.150 --> 00:24:57.205
Each year for two times minimum but maximum number of times.

441
00:24:57.205 --> 00:24:57.910
C.

442
00:24:57.910 --> 00:24:59.290
That is a sorry,

443
00:24:59.290 --> 00:25:01.855
I did not provide a filename.

444
00:25:01.855 --> 00:25:07.360
So there is a minimum 2times C here.

445
00:25:07.360 --> 00:25:09.745
Instead of matching two times, three times is there.

446
00:25:09.745 --> 00:25:13.480
That's why it will always look for maximum value theta,

447
00:25:13.480 --> 00:25:15.535
maximum value of f,

448
00:25:15.535 --> 00:25:21.010
I mean maximum number of times E. So that is the meaning of two comma.

449
00:25:21.010 --> 00:25:22.270
That's fine.

450
00:25:22.270 --> 00:25:27.255
But we're also having some shortcuts for some characters.

451
00:25:27.255 --> 00:25:33.770
Suppose, if I want to look the lines which are having a visit,

452
00:25:33.770 --> 00:25:36.245
then simply write grip hyphen Lee.

453
00:25:36.245 --> 00:25:39.035
But here you have to write two square brackets,

454
00:25:39.035 --> 00:25:41.255
then simply does it.

455
00:25:41.255 --> 00:25:45.095
Then square brackets, then you are required to find.

456
00:25:45.095 --> 00:25:48.365
So it will print the the lanes which are having it visit.

457
00:25:48.365 --> 00:25:50.570
Now instead of that, I want to print the,

458
00:25:50.570 --> 00:25:54.860
the lines which are having uppercase character, uppercase alphabet,

459
00:25:54.860 --> 00:25:56.930
then simply write upper,

460
00:25:56.930 --> 00:26:04.055
lower printer, the lanes which are having lower case alphabet not checked.

461
00:26:04.055 --> 00:26:06.560
So like ways we are having different symbols.

462
00:26:06.560 --> 00:26:09.140
So blank space, alphanumeric,

463
00:26:09.140 --> 00:26:13.445
maybe alpha, pneumonic means alphabets off.

464
00:26:13.445 --> 00:26:15.245
Let me write that.

465
00:26:15.245 --> 00:26:18.180
Number's digits.

466
00:26:20.560 --> 00:26:22.980
See that?

467
00:26:24.040 --> 00:26:26.430
Logic.

