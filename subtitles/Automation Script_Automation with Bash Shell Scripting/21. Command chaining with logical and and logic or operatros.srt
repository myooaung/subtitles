1
00:00:00,000 --> 00:00:04,425
Friends here our concept is commanded chaining operators.

2
00:00:04,425 --> 00:00:05,910
And these operators are very,

3
00:00:05,910 --> 00:00:08,220
very important to implement one line,

4
00:00:08,220 --> 00:00:10,649
if or if else conditional statements.

5
00:00:10,649 --> 00:00:15,945
And here command chaining is nothing but clubbing or combining two or more commands.

6
00:00:15,945 --> 00:00:20,295
So we have different types of operators to club two or more commands.

7
00:00:20,295 --> 00:00:24,435
And those operators we can use either in shell scripting or on command line.

8
00:00:24,435 --> 00:00:26,505
They are like semicolon operator,

9
00:00:26,505 --> 00:00:29,320
logical and operator and logical or operator.

10
00:00:29,320 --> 00:00:32,930
Be clear, we have symbols for each and every operator here.

11
00:00:32,930 --> 00:00:35,915
Now let me go with one-by-one semicolon.

12
00:00:35,915 --> 00:00:38,720
Just assume that you are having two commands on

13
00:00:38,720 --> 00:00:41,225
if you want to club them by using semicolon operator,

14
00:00:41,225 --> 00:00:44,510
you can club in this way and offer clubbing.

15
00:00:44,510 --> 00:00:46,955
You're two commands with semicolon operator.

16
00:00:46,955 --> 00:00:48,320
And if you run that,

17
00:00:48,320 --> 00:00:51,845
then those two commands will execute independently.

18
00:00:51,845 --> 00:00:53,960
Let me show you this on your terminal.

19
00:00:53,960 --> 00:00:56,180
Suppose date and PWD command.

20
00:00:56,180 --> 00:00:58,655
I'm running by clubbing with semicolon operator.

21
00:00:58,655 --> 00:01:01,205
You're getting your output for those two commands.

22
00:01:01,205 --> 00:01:03,680
Now I'm running invalid command.

23
00:01:03,680 --> 00:01:08,480
And then by clubbing that command with PWD using your semicolon operator, nausea,

24
00:01:08,480 --> 00:01:11,840
that isn't actually your first command is getting failed,

25
00:01:11,840 --> 00:01:16,490
but that is not disturbing to get the result for your next command.

26
00:01:16,490 --> 00:01:21,860
So here, those two commands or executing independently and command is

27
00:01:21,860 --> 00:01:27,470
getting failure means we know that the exit status of that command is non-zero.

28
00:01:27,470 --> 00:01:29,000
And not only two commands,

29
00:01:29,000 --> 00:01:34,085
you can club any number of commands or logic using semicolon operator in this way.

30
00:01:34,085 --> 00:01:38,750
Suppose I can define two variables in a single line.

31
00:01:38,750 --> 00:01:41,220
Suppose if it is shell scripting,

32
00:01:41,290 --> 00:01:44,810
then I can also display the value of that directly in

33
00:01:44,810 --> 00:01:47,600
a single line by clubbing with semicolon operator c.

34
00:01:47,600 --> 00:01:56,990
That or I can run some date command by clubbing with semicolon operator. That's it.

35
00:01:56,990 --> 00:02:00,995
So here, each and every command is executing independently.

36
00:02:00,995 --> 00:02:04,610
Then the next one is the logical and operator.

37
00:02:04,610 --> 00:02:07,190
I assume that you are having two commands.

38
00:02:07,190 --> 00:02:10,175
And if you want to club them by using logical and operator,

39
00:02:10,175 --> 00:02:11,555
then you can club in this way,

40
00:02:11,555 --> 00:02:14,615
offer clubbing if you run these two commands.

41
00:02:14,615 --> 00:02:19,280
Then here, there is a dependency between commend T2 and command

42
00:02:19,280 --> 00:02:24,200
one commander to will execute only if command one is successful.

43
00:02:24,200 --> 00:02:26,660
Let me show you this on your terminal.

44
00:02:26,660 --> 00:02:32,480
Suppose I'm running date command and PWD command by clubbing with logical end.

45
00:02:32,480 --> 00:02:35,345
You are getting output for each and every command.

46
00:02:35,345 --> 00:02:38,015
But I am running some invalid command.

47
00:02:38,015 --> 00:02:42,515
Then I'm running some valid command by clubbing with logical n.

48
00:02:42,515 --> 00:02:45,770
Now see the result. You are not getting output for your second command.

49
00:02:45,770 --> 00:02:47,660
The reason is whenever,

50
00:02:47,660 --> 00:02:51,170
if we club any commands with the help of a logical and operator,

51
00:02:51,170 --> 00:02:53,045
if the first command is success,

52
00:02:53,045 --> 00:02:57,095
then only you will get output for your next command.

53
00:02:57,095 --> 00:03:00,005
Let me show you that one more with one more example.

54
00:03:00,005 --> 00:03:03,900
Suppose I'm trying to read the slash EDC file.

55
00:03:09,070 --> 00:03:15,170
And I am clubbing that with the logical and I'm writing here echo successful.

56
00:03:15,170 --> 00:03:18,050
See even echo is also one command.

57
00:03:18,050 --> 00:03:20,585
Now, if this is success,

58
00:03:20,585 --> 00:03:22,340
then only it will display this message.

59
00:03:22,340 --> 00:03:26,990
Because these two commands we are clubbing mythological and see that you are not getting

60
00:03:26,990 --> 00:03:29,540
successful output because actually we don't

61
00:03:29,540 --> 00:03:32,540
have read permissions for the file that is a root file.

62
00:03:32,540 --> 00:03:34,265
That's where it is getting fail.

63
00:03:34,265 --> 00:03:35,690
If it is getting fail,

64
00:03:35,690 --> 00:03:39,140
then it doesn't allow to execute the next command which is there,

65
00:03:39,140 --> 00:03:40,940
which is clubbed with the logical hand.

66
00:03:40,940 --> 00:03:42,125
That's it.

67
00:03:42,125 --> 00:03:45,560
Not only to commands, you can club any number of commands,

68
00:03:45,560 --> 00:03:50,930
let say a less PWD date.

69
00:03:50,930 --> 00:03:54,050
And here you have to understand that the last command will

70
00:03:54,050 --> 00:03:57,530
execute if the foster two commands or successful.

71
00:03:57,530 --> 00:04:02,000
Otherwise, second command will exclude if the first command is success.

72
00:04:02,000 --> 00:04:04,250
Suppose you first command is getting fail,

73
00:04:04,250 --> 00:04:05,570
then these two will skip.

74
00:04:05,570 --> 00:04:07,520
Suppose if second command is getting faked,

75
00:04:07,520 --> 00:04:08,690
the last command will skip.

76
00:04:08,690 --> 00:04:09,515
That's it.

77
00:04:09,515 --> 00:04:11,765
Now, let me take one more example.

78
00:04:11,765 --> 00:04:18,740
C test is also one of the command without test to come and write test for iPhone EQ for.

79
00:04:18,740 --> 00:04:24,710
So we are testing the condition for iPhone EQ for I mean equality purpose.

80
00:04:24,710 --> 00:04:27,245
Now if it is success, anyway,

81
00:04:27,245 --> 00:04:28,430
this will get Such as right,

82
00:04:28,430 --> 00:04:30,485
we know that because 404 or equal.

83
00:04:30,485 --> 00:04:33,155
Now if I club this with logical and echo,

84
00:04:33,155 --> 00:04:35,255
I'm writing there equal.

85
00:04:35,255 --> 00:04:39,260
Now see that, isn't there equal you are getting.

86
00:04:39,260 --> 00:04:46,415
Now what I'm doing is I'm comparing for with 444 equal to purpose.

87
00:04:46,415 --> 00:04:52,025
Now you are not getting output for your next command because this is getting filled.

88
00:04:52,025 --> 00:04:54,785
Because testes not such as right, they are not equal.

89
00:04:54,785 --> 00:04:56,135
Test command will get fail.

90
00:04:56,135 --> 00:04:58,940
Not only test command, we have alternate symbols for

91
00:04:58,940 --> 00:05:01,610
your test with the two square brackets also,

92
00:05:01,610 --> 00:05:03,035
we can execute this.

93
00:05:03,035 --> 00:05:04,190
Be clear.

94
00:05:04,190 --> 00:05:06,680
This entire thing is one command.

95
00:05:06,680 --> 00:05:11,180
That command we are combining with the second command by using logical and operator.

96
00:05:11,180 --> 00:05:15,005
And whenever if you run any number of commands with the logical and operator,

97
00:05:15,005 --> 00:05:18,200
the last command will execute if the previous,

98
00:05:18,200 --> 00:05:20,315
all previous comments or success,

99
00:05:20,315 --> 00:05:23,480
otherwise, this command will skip.

100
00:05:23,480 --> 00:05:25,170
That's right.

101
00:05:25,240 --> 00:05:29,030
Now let me give you one more example.

102
00:05:29,030 --> 00:05:32,090
Suppose I'm trying, I want to start my hits UDP on

103
00:05:32,090 --> 00:05:35,195
my host directly. I can run in this way.

104
00:05:35,195 --> 00:05:39,680
Systems CTL start HTTP if a tree but is not there,

105
00:05:39,680 --> 00:05:44,990
then that's why what I am doing is first I can validate whether it is there or not,

106
00:05:44,990 --> 00:05:48,995
which HTTPD, HTTPD is there and my host,

107
00:05:48,995 --> 00:05:50,390
then this will get success.

108
00:05:50,390 --> 00:05:53,615
Then I'm clubbing that to start the work.

109
00:05:53,615 --> 00:05:56,585
Httpd. Then there is a meaning.

110
00:05:56,585 --> 00:05:59,765
So before starting, we are evaluating whether it is there or not.

111
00:05:59,765 --> 00:06:01,700
If it is not there, it will get fail.

112
00:06:01,700 --> 00:06:03,860
If it is getting fail, it won't execute.

113
00:06:03,860 --> 00:06:05,375
It is that it will execute.

114
00:06:05,375 --> 00:06:09,350
That's very simple.

115
00:06:09,350 --> 00:06:13,370
And actually this is like a simple if condition.

116
00:06:13,370 --> 00:06:15,665
We'll discuss that in our next session.

117
00:06:15,665 --> 00:06:18,545
Whenever if you club two commands with the logical end,

118
00:06:18,545 --> 00:06:20,585
but it's simply if condition.

119
00:06:20,585 --> 00:06:21,995
Fine.

120
00:06:21,995 --> 00:06:26,225
Now, we can club any number of commands by using logical and

121
00:06:26,225 --> 00:06:30,470
operator r. Next one is logical or operator.

122
00:06:30,470 --> 00:06:34,820
So here I can club two commands by using logical OR operator in this way.

123
00:06:34,820 --> 00:06:39,800
And here, commander to will execute if command one is failed.

124
00:06:39,800 --> 00:06:44,060
Be clear in your logical and operator commanded to Villegas.

125
00:06:44,060 --> 00:06:46,125
Good. If the first command is success.

126
00:06:46,125 --> 00:06:51,265
But here river's commander to will execute if the command one is getting fail.

127
00:06:51,265 --> 00:06:53,395
Let me show you that on your terminal.

128
00:06:53,395 --> 00:06:56,725
Suppose first let me take with the logical and operator,

129
00:06:56,725 --> 00:06:58,825
we are getting output for both to commands.

130
00:06:58,825 --> 00:07:01,330
And I am running at very first invalid command.

131
00:07:01,330 --> 00:07:05,590
Then your second comment output we are not getting because first command is getting fade.

132
00:07:05,590 --> 00:07:11,260
Now with your logical or if you club, See there isn't.

133
00:07:11,260 --> 00:07:13,180
Both are valid, but you are getting output for

134
00:07:13,180 --> 00:07:16,765
your first command because in logical or operator,

135
00:07:16,765 --> 00:07:18,535
if first command is getting fail,

136
00:07:18,535 --> 00:07:20,845
then only you will get output for your second command.

137
00:07:20,845 --> 00:07:24,085
Otherwise it will skip. Now let me run invalid,

138
00:07:24,085 --> 00:07:29,050
then valid command by clubbing with logical or operator and see the result.

139
00:07:29,050 --> 00:07:32,830
You are getting output for your second command because it is getting failed.

140
00:07:32,830 --> 00:07:35,350
So in case if you don't want display these error messages,

141
00:07:35,350 --> 00:07:39,205
you know how to remove that error message.

142
00:07:39,205 --> 00:07:43,220
Simply two greater than Donald Duck.

143
00:07:43,320 --> 00:07:45,820
And these logical or operator,

144
00:07:45,820 --> 00:07:48,114
it is also important in some scenarios.

145
00:07:48,114 --> 00:07:50,365
Let me do one of those simple example.

146
00:07:50,365 --> 00:07:52,435
Suppose you have first I will do,

147
00:07:52,435 --> 00:07:57,760
I will take this system CTL status, HTTPD.

148
00:07:57,760 --> 00:08:02,290
It is not running. Then what is the status of that comment,

149
00:08:02,290 --> 00:08:04,570
exit status of that command non-zero.

150
00:08:04,570 --> 00:08:07,420
That means if HTTPD your service is

151
00:08:07,420 --> 00:08:10,845
not running not only heterogeneity, any system services.

152
00:08:10,845 --> 00:08:13,925
If you run system CDL sums RVs,

153
00:08:13,925 --> 00:08:15,725
and if that service is not running,

154
00:08:15,725 --> 00:08:17,225
this command will get fail.

155
00:08:17,225 --> 00:08:20,435
That's why it is giving returns status as non-zero.

156
00:08:20,435 --> 00:08:26,795
Now let me start your HTTPD.

157
00:08:26,795 --> 00:08:29,840
So after that I will find status.

158
00:08:29,840 --> 00:08:34,880
It is running. Now see the exit status of that command G.

159
00:08:34,880 --> 00:08:41,795
Now, my requirement is I want to start HTTPD service or any service.

160
00:08:41,795 --> 00:08:45,170
But if it is not running then on I wanted to start.

161
00:08:45,170 --> 00:08:46,475
If it is already running,

162
00:08:46,475 --> 00:08:47,750
then I don't want to start.

163
00:08:47,750 --> 00:08:53,705
Then in that case, first try to find the status of HTTPD.

164
00:08:53,705 --> 00:08:58,890
I mean any sort of east and club with the logical OR operator to start that service.

165
00:09:01,390 --> 00:09:07,010
Now, how it will execute if hedge UDP is already running this week,

166
00:09:07,010 --> 00:09:11,060
you exit status as g means this will get success.

167
00:09:11,060 --> 00:09:13,190
If it is success, then it will skip links.

168
00:09:13,190 --> 00:09:17,465
Good next command because you are clubbing mythological or otherwise.

169
00:09:17,465 --> 00:09:19,175
If anybody is not running,

170
00:09:19,175 --> 00:09:20,705
then it will get failed.

171
00:09:20,705 --> 00:09:22,325
Your first command, you will fail.

172
00:09:22,325 --> 00:09:24,440
If it is failed, then only your second command helix,

173
00:09:24,440 --> 00:09:27,320
good, so that you are able to start you on HTTPD.

174
00:09:27,320 --> 00:09:29,165
So if it is already running,

175
00:09:29,165 --> 00:09:35,075
then it doesn't allow to execute this command so that no need to start already running.

176
00:09:35,075 --> 00:09:37,355
If it is not running, this will get fail.

177
00:09:37,355 --> 00:09:39,800
That's why you are logical or operator will allow dx.

178
00:09:39,800 --> 00:09:43,140
Good second command so that you can start your HTTP.

179
00:09:43,450 --> 00:09:50,840
Now see the status previously or services already starting.

180
00:09:50,840 --> 00:09:53,915
I'm in running, that's why it is not executing this command.

181
00:09:53,915 --> 00:09:57,690
Now let me do one thing. I will stop that.

182
00:10:02,980 --> 00:10:08,850
Now I will run our logical or operator commands.

183
00:10:08,890 --> 00:10:11,750
Previously it was not running.

184
00:10:11,750 --> 00:10:14,730
That's why he definitely see guys, this output.

185
00:10:14,730 --> 00:10:17,035
For this command output.

186
00:10:17,035 --> 00:10:20,800
So you're getting this means virtue liberty is not running head shield,

187
00:10:20,800 --> 00:10:22,720
but he's not running means you will get,

188
00:10:22,720 --> 00:10:24,340
this command will get fail.

189
00:10:24,340 --> 00:10:25,630
If it is failing, then

190
00:10:25,630 --> 00:10:29,080
logical or operator will allude to execute next command and that's it.

191
00:10:29,080 --> 00:10:32,350
So that is the way how we can use logical or operator.

192
00:10:32,350 --> 00:10:36,685
You can club any number of commands by using logical arm, let's say PWD,

193
00:10:36,685 --> 00:10:42,280
some ls, date, systems,

194
00:10:42,280 --> 00:10:45,445
UDL status, any service.

195
00:10:45,445 --> 00:10:48,970
And be clear, if first command is success,

196
00:10:48,970 --> 00:10:51,775
then we'll skip to Xcode remaining all commands.

197
00:10:51,775 --> 00:10:53,320
Suppose if it is fail,

198
00:10:53,320 --> 00:10:55,090
then you will try to look for second command.

199
00:10:55,090 --> 00:10:57,450
If it is success, then it will skip the remaining.

200
00:10:57,450 --> 00:11:02,300
So the last command will execute if all first commands or getting filled, that's it.

201
00:11:02,300 --> 00:11:05,330
That is the logic for logical OR operator.

202
00:11:05,330 --> 00:11:09,800
Now, we can club any number of commands in this way.

203
00:11:09,800 --> 00:11:12,530
I mean by using logical or operator.

204
00:11:12,530 --> 00:11:15,800
Now, combining multiple operators.

205
00:11:15,800 --> 00:11:18,860
Yes, loginData, you are having three commands and you can club

206
00:11:18,860 --> 00:11:22,070
those three commands by using your multiple operators,

207
00:11:22,070 --> 00:11:23,240
especially with logical and,

208
00:11:23,240 --> 00:11:25,265
and logical or in this way.

209
00:11:25,265 --> 00:11:28,325
First observe this first syntax

210
00:11:28,325 --> 00:11:32,165
command one with a logical end and commend to mythological arc.

211
00:11:32,165 --> 00:11:33,920
Now how it will execute?

212
00:11:33,920 --> 00:11:35,045
Very simple.

213
00:11:35,045 --> 00:11:36,710
First of all, command three,

214
00:11:36,710 --> 00:11:38,705
0s clubbing with the logical OR operator.

215
00:11:38,705 --> 00:11:43,865
That means N3 will execute if any one of the command is getting fail.

216
00:11:43,865 --> 00:11:46,625
I mean command, one-off command to,

217
00:11:46,625 --> 00:11:47,900
in these two commands,

218
00:11:47,900 --> 00:11:49,355
if any one of the command is getting fail,

219
00:11:49,355 --> 00:11:51,155
then only combinatory will execute.

220
00:11:51,155 --> 00:11:53,375
Suppose if these two commands are success,

221
00:11:53,375 --> 00:11:55,640
then it won't execute.

222
00:11:55,640 --> 00:11:57,650
And here command two legs.

223
00:11:57,650 --> 00:11:59,810
Good. If the command one is access because you are clubbing with

224
00:11:59,810 --> 00:12:02,405
illogical and let me show you that with an example.

225
00:12:02,405 --> 00:12:05,660
Suppose I'm, I'm writing some tests to

226
00:12:05,660 --> 00:12:09,620
comment because test is also another command I'm doing in this way.

227
00:12:09,620 --> 00:12:13,670
Hyphen e, I'm looking for existence of this file.

228
00:12:13,670 --> 00:12:15,875
Is this file is there on your host.

229
00:12:15,875 --> 00:12:17,525
I mean, in the current path.

230
00:12:17,525 --> 00:12:20,135
If it is there, then I want to display Echo.

231
00:12:20,135 --> 00:12:22,460
Yes, file is there.

232
00:12:22,460 --> 00:12:26,585
Be clear if it is success means this file is there.

233
00:12:26,585 --> 00:12:28,025
If this file is there,

234
00:12:28,025 --> 00:12:29,855
I want display as it is there.

235
00:12:29,855 --> 00:12:32,690
After getting success of your foster command,

236
00:12:32,690 --> 00:12:34,370
if you want to execute any other command,

237
00:12:34,370 --> 00:12:35,390
then you have to club with logical.

238
00:12:35,390 --> 00:12:41,975
And in case if this is getting fairly means this file is not there at the time, I can do.

239
00:12:41,975 --> 00:12:46,770
A co file is not there.

240
00:12:47,380 --> 00:12:49,550
See that isn't there.

241
00:12:49,550 --> 00:12:52,010
Getting file is not there because this command is getting fail.

242
00:12:52,010 --> 00:12:53,960
That's why it will skip to execute this one.

243
00:12:53,960 --> 00:12:56,315
And if any one of these two commands or getting fail,

244
00:12:56,315 --> 00:12:59,525
then only you are odd operator will allow takes good tardy command.

245
00:12:59,525 --> 00:13:00,635
That's it.

246
00:13:00,635 --> 00:13:03,575
And this is simply if fills condition.

247
00:13:03,575 --> 00:13:07,565
So if an if-else condition will discuss in our next decision,

248
00:13:07,565 --> 00:13:11,840
now, concentrate on second command, second syntax.

249
00:13:11,840 --> 00:13:13,790
Commands and command to.

250
00:13:13,790 --> 00:13:16,490
We are clubbing with the logical OR operator and command to and

251
00:13:16,490 --> 00:13:20,700
command tree we are clubbing with logical and then how it will work.

252
00:13:20,740 --> 00:13:23,285
Command one is getting fail.

253
00:13:23,285 --> 00:13:25,250
Then we'll skip remaining two commands.

254
00:13:25,250 --> 00:13:27,335
That is the meaning of logical or might.

255
00:13:27,335 --> 00:13:29,345
If command one is getting fail,

256
00:13:29,345 --> 00:13:32,240
then we'll try to run command to incrementally success.

257
00:13:32,240 --> 00:13:34,340
Then only combinatory will turn because command to

258
00:13:34,340 --> 00:13:36,635
incrementally or clubbing with the logical and operator.

259
00:13:36,635 --> 00:13:37,610
That's it.

260
00:13:37,610 --> 00:13:39,980
Let me show you this here.

261
00:13:39,980 --> 00:13:44,585
Suppose I am writing in this way, hyphen e.

262
00:13:44,585 --> 00:13:46,220
Let say we whoa,

263
00:13:46,220 --> 00:13:48,905
My such file on host,

264
00:13:48,905 --> 00:13:51,785
we have a file called My such, I mean the current path.

265
00:13:51,785 --> 00:13:54,695
Then if that file is not there,

266
00:13:54,695 --> 00:13:59,280
suppose I want to say echo file is not there,

267
00:13:59,950 --> 00:14:03,900
then I will create that file.

268
00:14:05,290 --> 00:14:09,905
Might be clear.

269
00:14:09,905 --> 00:14:12,380
If this is getting failed,

270
00:14:12,380 --> 00:14:15,380
then only it will idx good these two commands.

271
00:14:15,380 --> 00:14:17,345
And here also the second command,

272
00:14:17,345 --> 00:14:20,570
touch will execute if this command is getting success.

273
00:14:20,570 --> 00:14:22,730
Now see there is a, You're not getting

274
00:14:22,730 --> 00:14:25,640
any output for these two because already this file is there.

275
00:14:25,640 --> 00:14:28,520
Now suppose you are trying to look for a file.

276
00:14:28,520 --> 00:14:30,860
If that file is not there in the given path,

277
00:14:30,860 --> 00:14:33,080
then at least you have to create some empty file.

278
00:14:33,080 --> 00:14:35,990
Then you can unleash way.

279
00:14:35,990 --> 00:14:38,300
If file is not there,

280
00:14:38,300 --> 00:14:40,820
then I'm taking inverse symbol.

281
00:14:40,820 --> 00:14:42,275
If every file is there, Yeah,

282
00:14:42,275 --> 00:14:43,460
I will do with these indistinct.

283
00:14:43,460 --> 00:14:45,080
No need to take inverse also.

284
00:14:45,080 --> 00:14:50,855
Let me try for the file hyphen e. I want to create some DB confined.

285
00:14:50,855 --> 00:14:53,495
If that file is not there.

286
00:14:53,495 --> 00:14:55,115
If file is not there,

287
00:14:55,115 --> 00:15:00,230
then they call creating empty file.

288
00:15:00,230 --> 00:15:05,870
Then create it by using touch DB underscore conf.

289
00:15:05,870 --> 00:15:10,115
So before running just ticket BV conf.

290
00:15:10,115 --> 00:15:12,930
In the current location.

291
00:15:13,540 --> 00:15:18,245
No, we don't have. Now I'm running this command.

292
00:15:18,245 --> 00:15:23,270
So after running this, how it will work, how it will execute.

293
00:15:23,270 --> 00:15:27,500
Let me explain that. I'm running C

294
00:15:27,500 --> 00:15:31,415
that is creating empty file and this is success. That's where it will execute.

295
00:15:31,415 --> 00:15:33,860
First thing, this file is not there.

296
00:15:33,860 --> 00:15:36,620
That's why this entire thing is getting fail.

297
00:15:36,620 --> 00:15:39,920
If it is failed, then the remaining commands we are clubbing

298
00:15:39,920 --> 00:15:43,385
with logical or illogical or will alo dx good annex two commands.

299
00:15:43,385 --> 00:15:45,590
If it is success, then it doesn't allow to

300
00:15:45,590 --> 00:15:48,950
exclude this is failed because that file is not there.

301
00:15:48,950 --> 00:15:52,850
That's why logical or operator will allude to exclude these two commands.

302
00:15:52,850 --> 00:15:55,175
Anyway, the second command will execute.

303
00:15:55,175 --> 00:15:56,645
The first command is axis.

304
00:15:56,645 --> 00:15:59,345
Now here simply echo command definitely will get success.

305
00:15:59,345 --> 00:16:02,885
That's why does allowing to exclude these touch DB file.

306
00:16:02,885 --> 00:16:06,635
Now see that we have now DB confirm Yes.

307
00:16:06,635 --> 00:16:12,185
So in that way you can club any number of commands by using multiple operators also.

308
00:16:12,185 --> 00:16:16,775
So we'll do a lot of examples on these so that you will be good with your

309
00:16:16,775 --> 00:16:22,115
combining multiple commands with multiple operators.

310
00:16:22,115 --> 00:16:24,000
Thank you.

