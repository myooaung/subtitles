1
00:00:00,000 --> 00:00:04,755
Friends here our concepts or define a function and calling a function,

2
00:00:04,755 --> 00:00:07,590
see basically we are using functions concept if

3
00:00:07,590 --> 00:00:10,800
there is a repeated logic in different places in your shell script.

4
00:00:10,800 --> 00:00:12,900
But that is not mindedly.

5
00:00:12,900 --> 00:00:17,250
Even though if you don't have any repeated logic in your shell scripts still you

6
00:00:17,250 --> 00:00:21,540
can use functions concept just to increase the readability of your shell script.

7
00:00:21,540 --> 00:00:23,850
Let me show you with an example first.

8
00:00:23,850 --> 00:00:27,645
Suppose I'm implementing simple shell script dot SH.

9
00:00:27,645 --> 00:00:30,360
Let me write shebang line first.

10
00:00:30,360 --> 00:00:32,490
Suppose I want to read two variables.

11
00:00:32,490 --> 00:00:37,305
Let me take read hyphen p, enter first number.

12
00:00:37,305 --> 00:00:45,385
Then I am taking that as the number one variable and read I find P, enter second number.

13
00:00:45,385 --> 00:00:50,170
Then I am taking that as num to then offer that I'm finding addition.

14
00:00:50,170 --> 00:00:58,990
Suppose, suppose I'm giving some Equals two num one, num two.

15
00:00:58,990 --> 00:01:09,550
And here I am displaying the addition of you or num1 and num2 is.

16
00:01:09,550 --> 00:01:12,625
So here I am displaying the result that is some.

17
00:01:12,625 --> 00:01:15,250
And after that, I need to find subtraction as well.

18
00:01:15,250 --> 00:01:21,115
Let me take subtraction equals to one minus num two.

19
00:01:21,115 --> 00:01:23,590
Then I am displaying the result,

20
00:01:23,590 --> 00:01:32,210
the subtraction of number one and number two is the alert subtraction.

21
00:01:32,210 --> 00:01:37,470
First, let me save it and provide the execution permissions for this.

22
00:01:39,970 --> 00:01:42,695
Now let me run this.

23
00:01:42,695 --> 00:01:46,730
So it is asking suppose enter num1 and num2.

24
00:01:46,730 --> 00:01:48,770
Yes, it is giving three plus phi,

25
00:01:48,770 --> 00:01:50,525
three minus phi result.

26
00:01:50,525 --> 00:01:54,770
Now, of course he was Shell script is as of now it is fine.

27
00:01:54,770 --> 00:01:57,935
You can use this just to find the subtraction of two numbers,

28
00:01:57,935 --> 00:02:01,790
but just to increase the readability of my shell script,

29
00:02:01,790 --> 00:02:05,870
what I'm doing is these two lines are just to read two numbers.

30
00:02:05,870 --> 00:02:09,665
And these two lines are to find edition and to display the result of that.

31
00:02:09,665 --> 00:02:13,895
And these two finds are to find this attraction to display the result of that.

32
00:02:13,895 --> 00:02:15,590
So what I'm doing is,

33
00:02:15,590 --> 00:02:18,125
let me open my shells, get first.

34
00:02:18,125 --> 00:02:21,200
To read you what two variables I am defining.

35
00:02:21,200 --> 00:02:27,605
One function simply, I'm taking read inputs. That's it.

36
00:02:27,605 --> 00:02:29,930
So that by using this function,

37
00:02:29,930 --> 00:02:33,450
what we are doing simply we are reading two variables.

38
00:02:33,520 --> 00:02:35,345
Then.

39
00:02:35,345 --> 00:02:39,920
Second function on using for addition, suppose.

40
00:02:39,920 --> 00:02:42,665
So whenever if you use these logic,

41
00:02:42,665 --> 00:02:45,770
it will find the addition of two numbers and it will do the result as well.

42
00:02:45,770 --> 00:02:47,555
I mean, we will display the result as well.

43
00:02:47,555 --> 00:02:50,750
And I am defining one more function called a subtraction.

44
00:02:50,750 --> 00:02:52,260
Suppose.

45
00:02:53,200 --> 00:02:58,860
Then inside that we are writing our two lines of logic.

46
00:02:59,800 --> 00:03:01,580
That's a.

47
00:03:01,580 --> 00:03:04,700
And one more thing. As of now we just define a function.

48
00:03:04,700 --> 00:03:07,609
But if you define simply a function,

49
00:03:07,609 --> 00:03:09,785
it won't eggs glued itself.

50
00:03:09,785 --> 00:03:13,880
Let me show you are still subscript ones.

51
00:03:13,880 --> 00:03:16,430
Now let me run the shell script and see that is,

52
00:03:16,430 --> 00:03:20,975
we are not getting any output because simply if you define a function,

53
00:03:20,975 --> 00:03:23,445
it won't execute itself.

54
00:03:23,445 --> 00:03:26,440
So whenever, if you want to exclude these two lines,

55
00:03:26,440 --> 00:03:30,910
then somewhere you have to call this function name.

56
00:03:30,910 --> 00:03:33,400
Suppose if you want to include these two lines,

57
00:03:33,400 --> 00:03:37,630
some many how to call you have to place this function name.

58
00:03:37,630 --> 00:03:41,960
Now, see, now I'm opening a shell script.

59
00:03:43,770 --> 00:03:48,620
And at, after define your functions.

60
00:03:51,210 --> 00:03:55,525
Suppose after defining your three functions.

61
00:03:55,525 --> 00:03:58,960
So here, first of which lines we need to exclude these two lines.

62
00:03:58,960 --> 00:04:01,405
That's why you have to call this function first.

63
00:04:01,405 --> 00:04:04,465
So calling is nothing but just to placing the name of

64
00:04:04,465 --> 00:04:07,850
your function here without parenthesis.

65
00:04:07,850 --> 00:04:10,145
So after this function,

66
00:04:10,145 --> 00:04:11,210
after these two lines,

67
00:04:11,210 --> 00:04:14,210
whether you want to get some or subtraction.

68
00:04:14,210 --> 00:04:15,650
Suppose if I want to get some,

69
00:04:15,650 --> 00:04:18,695
just write addition first after reading inputs.

70
00:04:18,695 --> 00:04:20,375
If you want to get subtraction first,

71
00:04:20,375 --> 00:04:21,650
just write subtraction first.

72
00:04:21,650 --> 00:04:23,705
See that subtraction.

73
00:04:23,705 --> 00:04:24,935
This is the function name.

74
00:04:24,935 --> 00:04:27,800
Whenever if you place your function name in your code,

75
00:04:27,800 --> 00:04:30,170
the meaning for that is you are calling that.

76
00:04:30,170 --> 00:04:32,045
Now after subtraction function,

77
00:04:32,045 --> 00:04:34,220
I am calling addition.

78
00:04:34,220 --> 00:04:38,615
That's it. No, let me save it now you will get output for your code.

79
00:04:38,615 --> 00:04:43,355
Let me enter for and what suppose some numbers you are getting 26.

80
00:04:43,355 --> 00:04:46,970
Now what I will do is I will come in,

81
00:04:46,970 --> 00:04:49,565
suppose edition additional line I'm commenting.

82
00:04:49,565 --> 00:04:52,370
That means now you are not calling addition function.

83
00:04:52,370 --> 00:04:55,895
If you're not calling addition function, then it won't execute.

84
00:04:55,895 --> 00:04:59,525
See, I'm giving 690 or eating only subtraction,

85
00:04:59,525 --> 00:05:03,770
but you are not getting the result for your addition because addition function

86
00:05:03,770 --> 00:05:08,885
we are not calling now, be clear.

87
00:05:08,885 --> 00:05:12,350
This is the way how to define a function.

88
00:05:12,350 --> 00:05:14,615
And this is the way how to call.

89
00:05:14,615 --> 00:05:17,795
And one more very, very important point, ys.

90
00:05:17,795 --> 00:05:21,035
First, let me show you that result so that he can understand.

91
00:05:21,035 --> 00:05:24,270
Now, I'm removing all these three.

92
00:05:24,580 --> 00:05:28,190
Now I'm coming to top.

93
00:05:28,190 --> 00:05:30,545
Here I am writing, simply reading.

94
00:05:30,545 --> 00:05:33,950
Then what will happen? Let me show you that.

95
00:05:33,950 --> 00:05:37,325
Now I'm running or shell script c,

96
00:05:37,325 --> 00:05:40,805
you are getting an error called read inputs command not phone.

97
00:05:40,805 --> 00:05:43,730
Basically function is also like a command.

98
00:05:43,730 --> 00:05:45,080
So if you want to execute a command,

99
00:05:45,080 --> 00:05:47,360
you are placing and list the same way you have to place

100
00:05:47,360 --> 00:05:49,760
your shells function name inside of your shell script.

101
00:05:49,760 --> 00:05:51,500
That's what we did actually.

102
00:05:51,500 --> 00:05:53,885
But as of now,

103
00:05:53,885 --> 00:06:00,080
if you observe our shell script and if you run that shell script,

104
00:06:00,080 --> 00:06:01,310
you are not getting output.

105
00:06:01,310 --> 00:06:04,145
You are getting an error called read inputs come AND NOT phone.

106
00:06:04,145 --> 00:06:08,150
Because whenever if you want to call a function,

107
00:06:08,150 --> 00:06:11,195
you how to call that after defining your function.

108
00:06:11,195 --> 00:06:12,635
So here if we defined,

109
00:06:12,635 --> 00:06:14,390
but before defining itself,

110
00:06:14,390 --> 00:06:15,470
we are calling this function.

111
00:06:15,470 --> 00:06:18,890
That's why you are shelled. Cannot understand what is it.

112
00:06:18,890 --> 00:06:21,530
If it is a valid command, you will get output.

113
00:06:21,530 --> 00:06:23,105
If it is a function.

114
00:06:23,105 --> 00:06:24,980
Before calling your function name,

115
00:06:24,980 --> 00:06:26,945
some very, very hard to define.

116
00:06:26,945 --> 00:06:30,860
That's why always first-year 100 different function.

117
00:06:30,860 --> 00:06:35,720
So generally the best practices define your functions first in your code after that,

118
00:06:35,720 --> 00:06:37,955
somewhere here you just to call them.

119
00:06:37,955 --> 00:06:42,230
So don't call your function before defining that is very,

120
00:06:42,230 --> 00:06:45,095
very important rule while working with your functions.

121
00:06:45,095 --> 00:06:47,540
So if you do fine in that way, then you will get an error.

122
00:06:47,540 --> 00:06:49,340
Definitely just now we got an error, right?

123
00:06:49,340 --> 00:06:52,025
Command, not phone ringing inputs come in not form.

124
00:06:52,025 --> 00:06:54,830
Then simply read inputs.

125
00:06:54,830 --> 00:06:59,600
How you are shell script will work while excluding your shell script.

126
00:06:59,600 --> 00:07:00,380
C.

127
00:07:00,380 --> 00:07:02,135
Whenever if you run the shell script,

128
00:07:02,135 --> 00:07:06,245
we know that du legs good from top to down while excluding talk to don,

129
00:07:06,245 --> 00:07:08,105
the very first line, ease bash.

130
00:07:08,105 --> 00:07:10,190
That's why your operating system will understand that

131
00:07:10,190 --> 00:07:13,820
the remaining code has to execute with the bash shell.

132
00:07:13,820 --> 00:07:18,455
And if you observe this is something a name,

133
00:07:18,455 --> 00:07:19,640
it is not a valid command,

134
00:07:19,640 --> 00:07:22,865
simply doesn't name off the name immediately heard parenthesis.

135
00:07:22,865 --> 00:07:25,730
So whenever if you have a parenthesis or before this name,

136
00:07:25,730 --> 00:07:27,485
if you have a function key,

137
00:07:27,485 --> 00:07:30,695
then you are shall understand that this is a function name.

138
00:07:30,695 --> 00:07:33,860
And as of now, it should not execute.

139
00:07:33,860 --> 00:07:35,750
Simply it will lead to the name.

140
00:07:35,750 --> 00:07:36,770
That's it.

141
00:07:36,770 --> 00:07:38,555
It will skip these two block,

142
00:07:38,555 --> 00:07:41,705
this block and will keep only it will remember the name.

143
00:07:41,705 --> 00:07:43,790
Then offer that again, you have function.

144
00:07:43,790 --> 00:07:45,785
Then again we'll read the function name.

145
00:07:45,785 --> 00:07:47,750
It will remember the name of your function.

146
00:07:47,750 --> 00:07:50,690
That's it. It won't execute as off, No, you are logic.

147
00:07:50,690 --> 00:07:52,490
And after that, you have subtraction,

148
00:07:52,490 --> 00:07:55,070
is there again, you are shell will try to remember this name.

149
00:07:55,070 --> 00:07:56,435
It won't execute this.

150
00:07:56,435 --> 00:07:58,745
So after all you are functions.

151
00:07:58,745 --> 00:08:00,575
Now you're calling read inputs.

152
00:08:00,575 --> 00:08:04,550
Now holiday shall knows that reinforces nothing but somewhere. Function name It is.

153
00:08:04,550 --> 00:08:07,430
That's why whenever a function name you are calling,

154
00:08:07,430 --> 00:08:11,420
then again you are shell will go back to that place.

155
00:08:11,420 --> 00:08:12,770
Note legs queue.

156
00:08:12,770 --> 00:08:16,370
I'll come back to that line only offer that honey lines,

157
00:08:16,370 --> 00:08:17,555
no lanes which we'll skip.

158
00:08:17,555 --> 00:08:20,450
It will, I mean, it will stop the execution of your shell scripts.

159
00:08:20,450 --> 00:08:21,950
So in that way,

160
00:08:21,950 --> 00:08:24,065
you are shell script will execute.

161
00:08:24,065 --> 00:08:26,045
So be clear.

162
00:08:26,045 --> 00:08:28,355
After defining your function,

163
00:08:28,355 --> 00:08:31,385
you have to call it, right?

164
00:08:31,385 --> 00:08:36,890
See already we know the syntax how to define a function. There are two ways.

165
00:08:36,890 --> 00:08:41,555
Function, function name or simply function name in parentheses.

166
00:08:41,555 --> 00:08:42,845
So we are using this one,

167
00:08:42,845 --> 00:08:44,375
but you have to remember both too,

168
00:08:44,375 --> 00:08:46,865
because in online exempts,

169
00:08:46,865 --> 00:08:48,575
you may get anyone of the syntax.

170
00:08:48,575 --> 00:08:50,779
So at that time you should not get confused.

171
00:08:50,779 --> 00:08:52,865
Ok, that's it.

172
00:08:52,865 --> 00:08:55,700
So this then is the defining a function.

173
00:08:55,700 --> 00:08:57,860
And this is how we are calling a function.

174
00:08:57,860 --> 00:09:02,390
And still this is very basic explanation of what your function, we,

175
00:09:02,390 --> 00:09:07,250
how parameters, arguments to pass your functions concept.

176
00:09:07,250 --> 00:09:09,755
We'll discuss that after sometime.

177
00:09:09,755 --> 00:09:12,540
Okay, thank you.

