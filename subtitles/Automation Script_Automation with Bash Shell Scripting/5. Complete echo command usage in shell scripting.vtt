WEBVTT
ï»¿1
00:00:00.320 --> 00:00:04.950
Friends here our concept is working with echo command S0.

2
00:00:04.950 --> 00:00:10.785
This echo command is one of the most basic and frequently used command in our Unix world.

3
00:00:10.785 --> 00:00:14.205
And it is used for us to display a message,

4
00:00:14.205 --> 00:00:15.990
to display a command output,

5
00:00:15.990 --> 00:00:18.315
and to display a variable value.

6
00:00:18.315 --> 00:00:21.210
And here you can use your echo command

7
00:00:21.210 --> 00:00:23.820
on your command line and also in your shell scripts.

8
00:00:23.820 --> 00:00:26.775
So first we will see how to use your echo command on your command line.

9
00:00:26.775 --> 00:00:28.290
Then we'll go with shell scripts.

10
00:00:28.290 --> 00:00:31.170
Let me open my terminal. C.

11
00:00:31.170 --> 00:00:33.600
Suppose I have a message called Welcome

12
00:00:33.600 --> 00:00:41.960
to shell scripting message I want to display on my command line.

13
00:00:41.960 --> 00:00:46.490
Then you have to use simply ecospace message.

14
00:00:46.490 --> 00:00:47.750
That's a.

15
00:00:47.750 --> 00:00:49.580
And for this message,

16
00:00:49.580 --> 00:00:51.665
you can also use quotations.

17
00:00:51.665 --> 00:00:55.670
That two, it may be double quotations or single quotations.

18
00:00:55.670 --> 00:00:58.624
But for time being, I am using only double quotations

19
00:00:58.624 --> 00:01:02.075
will discuss abort single quotation in our further stations, not now.

20
00:01:02.075 --> 00:01:05.090
So simply echo, start with quotation, right?

21
00:01:05.090 --> 00:01:07.535
You got the message and then close with your quotations.

22
00:01:07.535 --> 00:01:10.490
That's fine.

23
00:01:10.490 --> 00:01:13.475
This is the first uses of your ego command.

24
00:01:13.475 --> 00:01:15.770
Now suppose if I write a coalesce,

25
00:01:15.770 --> 00:01:17.225
we know that Alice is a command.

26
00:01:17.225 --> 00:01:21.854
But by default, whenever if you write something in quotations or without quotations,

27
00:01:21.854 --> 00:01:24.190
that is like a message.

28
00:01:24.190 --> 00:01:25.855
That's why if I'd done this,

29
00:01:25.855 --> 00:01:27.460
if I run this, see there is a,

30
00:01:27.460 --> 00:01:29.215
it is simply displaying a list.

31
00:01:29.215 --> 00:01:31.285
But using echo command,

32
00:01:31.285 --> 00:01:33.805
you can also execute commands.

33
00:01:33.805 --> 00:01:37.090
So if you want to execute any command with the echo command,

34
00:01:37.090 --> 00:01:38.365
you how to write a dollar,

35
00:01:38.365 --> 00:01:41.695
then open parenthesis, and then close parenthesis.

36
00:01:41.695 --> 00:01:42.970
Not only ls command,

37
00:01:42.970 --> 00:01:46.240
you can run any command with the syntax.

38
00:01:46.240 --> 00:01:50.290
Be clear, echo, start the quotation, right?

39
00:01:50.290 --> 00:01:52.765
A dollar than open parenthesis, you are command,

40
00:01:52.765 --> 00:01:56.690
then close parenthesis, and then close your petition, let's say.

41
00:01:57.630 --> 00:02:01.465
And you can also use the echo command to display a variable value.

42
00:02:01.465 --> 00:02:05.135
So as of now, you might not know about variable. Don't worry.

43
00:02:05.135 --> 00:02:06.785
Suppose if I run e and v command,

44
00:02:06.785 --> 00:02:09.740
there are some default variables with the work system.

45
00:02:09.740 --> 00:02:13.970
Suppose host name. What is the shell?

46
00:02:13.970 --> 00:02:14.945
Right?

47
00:02:14.945 --> 00:02:18.200
Simply sum variable, it is having some value.

48
00:02:18.200 --> 00:02:23.795
Now, I can also use echo command to display variable value.

49
00:02:23.795 --> 00:02:28.685
Suppose there is a variable called user default variable with your system C there isn't.

50
00:02:28.685 --> 00:02:31.355
And there is a variable called shell.

51
00:02:31.355 --> 00:02:33.995
Capital letters. Now here,

52
00:02:33.995 --> 00:02:38.180
shell or user are variables for your operating system and the two default variables.

53
00:02:38.180 --> 00:02:40.145
And to display any variable value,

54
00:02:40.145 --> 00:02:41.555
you can use ACO command.

55
00:02:41.555 --> 00:02:42.605
That's it.

56
00:02:42.605 --> 00:02:46.875
Now let me read a simple shell script to understand the uses of Yoko commands.

57
00:02:46.875 --> 00:02:48.850
So before going to write,

58
00:02:48.850 --> 00:02:51.385
always, please check this.

59
00:02:51.385 --> 00:02:55.330
So we are having our bash in this location.

60
00:02:55.330 --> 00:02:58.450
Let me copy this because I need to write the very first line

61
00:02:58.450 --> 00:03:01.615
as shebang line or interpreter line, right?

62
00:03:01.615 --> 00:03:07.030
So usage of eco command not SH.

63
00:03:07.030 --> 00:03:09.745
So I am writing the very first line as shebang line,

64
00:03:09.745 --> 00:03:12.805
that is my interpreter or my shell.

65
00:03:12.805 --> 00:03:13.870
Fine.

66
00:03:13.870 --> 00:03:16.375
See I'm using a core.

67
00:03:16.375 --> 00:03:22.105
This is a simple message.

68
00:03:22.105 --> 00:03:27.290
Then I can also write one more line in the next line, echo.

69
00:03:28.360 --> 00:03:32.370
This is one more lying.

70
00:03:32.470 --> 00:03:35.120
In the same script.

71
00:03:35.120 --> 00:03:37.790
You can also use one more time you're echo command to execute.

72
00:03:37.790 --> 00:03:41.555
Suppose some commands, let's say I want to write,

73
00:03:41.555 --> 00:03:44.855
I need to display the date command output.

74
00:03:44.855 --> 00:03:48.920
I can also use to display some variable value.

75
00:03:48.920 --> 00:03:51.155
Let's say I have a variable called user.

76
00:03:51.155 --> 00:03:52.445
Then I want to display that,

77
00:03:52.445 --> 00:03:55.460
then US dollar, then user, friends.

78
00:03:55.460 --> 00:03:57.470
Suppose if you don't know what is available, don't worry.

79
00:03:57.470 --> 00:03:58.865
We have a detailed discussion on that.

80
00:03:58.865 --> 00:04:03.440
We'll discuss in that session about one variables for timing.

81
00:04:03.440 --> 00:04:06.365
Just concentrate on how to use echo command.

82
00:04:06.365 --> 00:04:07.220
That's it.

83
00:04:07.220 --> 00:04:10.440
Now let me save this and run this.

84
00:04:10.780 --> 00:04:15.275
So before going to run, you have to provide execution permission for that.

85
00:04:15.275 --> 00:04:17.270
Now let me run your script C,

86
00:04:17.270 --> 00:04:21.740
that is, this is your script.

87
00:04:21.740 --> 00:04:25.130
And you are getting the output for that this way.

88
00:04:25.130 --> 00:04:27.905
And one more thing, whenever if you are running your shell, skip,

89
00:04:27.905 --> 00:04:31.505
your shell script will run your code line by line.

90
00:04:31.505 --> 00:04:33.950
I mean the very first line anywhere that is as she bundling,

91
00:04:33.950 --> 00:04:36.815
it won't execute simply your operating system will understand that

92
00:04:36.815 --> 00:04:40.640
the remaining lanes has to execute with the help of Bash shell.

93
00:04:40.640 --> 00:04:42.980
The very first thing is, firstly,

94
00:04:42.980 --> 00:04:44.465
two legs could this line,

95
00:04:44.465 --> 00:04:46.940
then after that it will go and execute second line,

96
00:04:46.940 --> 00:04:48.470
third line, then fourth line.

97
00:04:48.470 --> 00:04:49.055
That's it.

98
00:04:49.055 --> 00:04:51.755
So that's a way you are getting your output.

99
00:04:51.755 --> 00:04:58.475
Now, suppose instead of displaying simply here automation and here date,

100
00:04:58.475 --> 00:05:01.400
i want to modify the script in this way.

101
00:05:01.400 --> 00:05:03.050
See the result.

102
00:05:03.050 --> 00:05:07.130
What I'm doing is today's date 0s.

103
00:05:07.130 --> 00:05:10.369
That is a message space.

104
00:05:10.369 --> 00:05:14.735
Then anyway, you know how to execute a command with the help of echo command.

105
00:05:14.735 --> 00:05:16.010
Echo.

106
00:05:16.010 --> 00:05:18.995
Today DDS, dollar parenthesis did.

107
00:05:18.995 --> 00:05:23.810
Then, you know, dollar using nothing but the currently logged in user.

108
00:05:23.810 --> 00:05:29.480
Now I am writing the username is not to know.

109
00:05:29.480 --> 00:05:33.410
Let me save this and run this code before running.

110
00:05:33.410 --> 00:05:34.475
Just see the core.

111
00:05:34.475 --> 00:05:36.300
Now I'm running that shelves.

112
00:05:36.300 --> 00:05:41.215
That's a fine.

113
00:05:41.215 --> 00:05:43.915
Now this is very simple echo command.

114
00:05:43.915 --> 00:05:47.485
Actually how complete syntax for your echo command that is

115
00:05:47.485 --> 00:05:52.120
a co hyphen e or Ionian or ivan capitally,

116
00:05:52.120 --> 00:05:55.389
These are optional and arguments.

117
00:05:55.389 --> 00:05:56.950
Arguments are also optional.

118
00:05:56.950 --> 00:05:59.200
As of no, we are running

119
00:05:59.200 --> 00:06:03.415
our echo command by providing any message or some command or some variable.

120
00:06:03.415 --> 00:06:06.700
I can also directly use echo command without providing anything,

121
00:06:06.700 --> 00:06:08.905
but it will display an empty line.

122
00:06:08.905 --> 00:06:11.110
You can also use this in your shell script,

123
00:06:11.110 --> 00:06:14.080
and you can use any number of echo

124
00:06:14.080 --> 00:06:17.649
command's without any options or without any arguments.

125
00:06:17.649 --> 00:06:20.530
C, I used two times without any options and

126
00:06:20.530 --> 00:06:24.880
arguments so that it is going to display to empty lines.

127
00:06:24.880 --> 00:06:29.860
Now see the result. So this is

128
00:06:29.860 --> 00:06:34.780
because of to echo command's without any options and arguments,

129
00:06:34.780 --> 00:06:38.365
arguments in nothing but any messages or command or variable.

130
00:06:38.365 --> 00:06:40.570
That's a fine.

131
00:06:40.570 --> 00:06:43.900
Nobody here we are having some options,

132
00:06:43.900 --> 00:06:46.690
hyphen, hyphen yen or ivan category.

133
00:06:46.690 --> 00:06:48.790
You can also club all these three options or

134
00:06:48.790 --> 00:06:52.180
daytime or any two options, or any one option.

135
00:06:52.180 --> 00:06:53.245
Fine.

136
00:06:53.245 --> 00:06:55.885
Now very first one is hyphenation.

137
00:06:55.885 --> 00:06:59.170
So whenever if you use ACO with iPhone Yen,

138
00:06:59.170 --> 00:07:00.790
what it is doing.

139
00:07:00.790 --> 00:07:04.555
Simply, the trailing newline is suppressed.

140
00:07:04.555 --> 00:07:07.340
That means C, the result.

141
00:07:08.850 --> 00:07:15.925
Suppose I am writing here echo hyphen v, sorry, hyphen Yen.

142
00:07:15.925 --> 00:07:18.820
When, whenever if I write eco hyphen Yan,

143
00:07:18.820 --> 00:07:21.340
this message will display directly first.

144
00:07:21.340 --> 00:07:27.160
After that, without a hyphen Yan actually this output will display in the next line.

145
00:07:27.160 --> 00:07:29.215
But because of this iPhone yen,

146
00:07:29.215 --> 00:07:31.225
your cursor won't go to next line.

147
00:07:31.225 --> 00:07:34.630
What our, the executing command is there in the next line,

148
00:07:34.630 --> 00:07:37.135
that output will be displayed here itself.

149
00:07:37.135 --> 00:07:38.620
That's it.

150
00:07:38.620 --> 00:07:41.510
Now let me run and see the result.

151
00:07:41.790 --> 00:07:46.945
C. You are having iPhone yen for this is one more line.

152
00:07:46.945 --> 00:07:48.775
Yes, you are getting, this is one more line.

153
00:07:48.775 --> 00:07:50.380
But after that, generally,

154
00:07:50.380 --> 00:07:52.615
your cursor has to go to next line.

155
00:07:52.615 --> 00:07:53.965
But because of this iPhone Yann,

156
00:07:53.965 --> 00:07:56.590
your cursor won't go to next line and whatever it

157
00:07:56.590 --> 00:07:59.380
is there in the next lane that will be executed in the same line.

158
00:07:59.380 --> 00:08:00.145
That's a.

159
00:08:00.145 --> 00:08:02.710
So that is the uses of iPhone him sometimes

160
00:08:02.710 --> 00:08:05.200
while writing or shell script for our designing purpose,

161
00:08:05.200 --> 00:08:07.375
I mean, to showcase our shells good,

162
00:08:07.375 --> 00:08:10.180
we will use hyphens and option as well.

163
00:08:10.180 --> 00:08:15.865
That's fine. Now, second thing, hyphen e option.

164
00:08:15.865 --> 00:08:22.120
So it is used to execute backslash escape characters.

165
00:08:22.120 --> 00:08:23.770
Before going to use that,

166
00:08:23.770 --> 00:08:26.720
let me explain a very simple example.

167
00:08:26.860 --> 00:08:30.020
Suppose I am writing one more,

168
00:08:30.020 --> 00:08:33.360
shall skip one more width.

169
00:08:36.580 --> 00:08:42.545
Then I'm writing very first-line shebang line, user bin bash.

170
00:08:42.545 --> 00:08:47.700
I am writing this is a first line.

171
00:08:47.920 --> 00:08:54.080
Then this is a second line.

172
00:08:54.080 --> 00:08:57.540
Let me run this and see the result first.

173
00:09:00.730 --> 00:09:03.095
And having to echo command's,

174
00:09:03.095 --> 00:09:06.305
that's a reason you're going to get output in two lines.

175
00:09:06.305 --> 00:09:07.850
Yes.

176
00:09:07.850 --> 00:09:12.635
Now, if we observe immediately or writing to echo combines,

177
00:09:12.635 --> 00:09:16.565
then instead of writing immigrated to echo command's What I will use.

178
00:09:16.565 --> 00:09:18.290
I will use only one echo command.

179
00:09:18.290 --> 00:09:21.080
And I will let this information also in the first echo command.

180
00:09:21.080 --> 00:09:23.540
But I wanted to get output in two lines.

181
00:09:23.540 --> 00:09:26.670
First, let me write and see the result.

182
00:09:29.860 --> 00:09:32.120
So that is the first line,

183
00:09:32.120 --> 00:09:33.575
then this is the second line.

184
00:09:33.575 --> 00:09:36.830
And anyway, as of now if you run your shells k,

185
00:09:36.830 --> 00:09:40.700
you are having one echo command and with some message.

186
00:09:40.700 --> 00:09:46.550
But I want to display this message in one line and this message in the next line.

187
00:09:46.550 --> 00:09:49.355
But as of now it is not possible.

188
00:09:49.355 --> 00:09:57.305
But I can use in slash n special backslash escape character.

189
00:09:57.305 --> 00:10:00.800
And because of that actually the next information,

190
00:10:00.800 --> 00:10:04.670
whatever you are having, offers slash and that has to go to next line.

191
00:10:04.670 --> 00:10:07.260
But see the result.

192
00:10:08.980 --> 00:10:12.830
It is not going on. It is this link slash and as it is.

193
00:10:12.830 --> 00:10:18.260
But if you want to exclude slash n means if you want to send your cursor to next line,

194
00:10:18.260 --> 00:10:22.640
then you have to use hyphen e option for EVA.

195
00:10:22.640 --> 00:10:27.470
Echo command, execute US special characters and see the result.

196
00:10:27.470 --> 00:10:29.810
Now, now you're getting your information in two lines,

197
00:10:29.810 --> 00:10:32.465
even though if you are using only one echo command because of

198
00:10:32.465 --> 00:10:37.910
Slash n, And we are executing that slash and with the help of iPhone Yi option.

199
00:10:37.910 --> 00:10:41.315
Likewise, I mean like slash and you are having

200
00:10:41.315 --> 00:10:46.040
different types of backslash escape characters.

201
00:10:46.040 --> 00:10:48.935
So these are the list.

202
00:10:48.935 --> 00:10:54.680
So now slash B is nothing but to send your cursor one equation back slash

203
00:10:54.680 --> 00:11:00.890
t. To provide a horizontal tab slash v2 provide vertical tab slash shape.

204
00:11:00.890 --> 00:11:03.170
It will create some sound alert.

205
00:11:03.170 --> 00:11:06.920
So you whenever, if you press on your, I mean,

206
00:11:06.920 --> 00:11:09.005
if you press tab on your terminal,

207
00:11:09.005 --> 00:11:11.390
it will create some songs.

208
00:11:11.390 --> 00:11:13.985
That sound will be created by slash,

209
00:11:13.985 --> 00:11:18.800
a slash or carries return slash she.

210
00:11:18.800 --> 00:11:20.810
Suppress any further output.

211
00:11:20.810 --> 00:11:22.400
Let me show you some of them are.

212
00:11:22.400 --> 00:11:24.080
Let me go with one by one.

213
00:11:24.080 --> 00:11:25.910
I am displaying, I mean,

214
00:11:25.910 --> 00:11:27.560
I'm executing directly on your command line.

215
00:11:27.560 --> 00:11:29.675
Same thing you can use in your shell script as well.

216
00:11:29.675 --> 00:11:34.475
First thing, echo, IF only 12 I am writing.

217
00:11:34.475 --> 00:11:36.530
And before one, sorry,

218
00:11:36.530 --> 00:11:38.435
after one, I'm writing slash b.

219
00:11:38.435 --> 00:11:40.535
Because of that, what will happen?

220
00:11:40.535 --> 00:11:41.120
First?

221
00:11:41.120 --> 00:11:42.950
It will display one way anyone.

222
00:11:42.950 --> 00:11:47.270
Then your cursor, we come back one position.

223
00:11:47.270 --> 00:11:50.255
And it will start writing too.

224
00:11:50.255 --> 00:11:51.650
So that E is war, right?

225
00:11:51.650 --> 00:11:53.255
With the first thing,

226
00:11:53.255 --> 00:11:54.515
it will display up to one,

227
00:11:54.515 --> 00:11:56.885
then your cursor is waiting here on your command line.

228
00:11:56.885 --> 00:11:58.280
But because of slash B,

229
00:11:58.280 --> 00:12:01.370
your cursor come to evolution one patient back.

230
00:12:01.370 --> 00:12:04.640
Suppose you've used to slash b, then c.

231
00:12:04.640 --> 00:12:06.090
That is it.

232
00:12:06.700 --> 00:12:10.580
The same way you how carriage written.

233
00:12:10.580 --> 00:12:18.695
Suppose I am writing hello, slash are high.

234
00:12:18.695 --> 00:12:24.230
And see the result now. First it will display hello.

235
00:12:24.230 --> 00:12:25.670
But because of slash,

236
00:12:25.670 --> 00:12:29.405
your cursor equation will come to very first to place.

237
00:12:29.405 --> 00:12:32.885
And from there onwards it will try to write the data that is high.

238
00:12:32.885 --> 00:12:35.825
So hedge and I0 will replace in the place of

239
00:12:35.825 --> 00:12:39.095
H and E. Unremitting information will be there as these.

240
00:12:39.095 --> 00:12:41.150
Suppose you have second, what is,

241
00:12:41.150 --> 00:12:44.375
is having more length a compatible first-world,

242
00:12:44.375 --> 00:12:47.810
then the first word is completely replaced with the second one.

243
00:12:47.810 --> 00:12:51.575
And the suppose if I use slash C,

244
00:12:51.575 --> 00:12:54.755
then it will suppress the remaining output.

245
00:12:54.755 --> 00:12:56.959
It will display only the first information.

246
00:12:56.959 --> 00:13:01.010
Then after slash whatever the information you are having that won't display.

247
00:13:01.010 --> 00:13:02.000
That's it.

248
00:13:02.000 --> 00:13:07.534
So like ways we weren't having different backslash escape characters.

249
00:13:07.534 --> 00:13:10.655
Yeah, let me show you slash p and slash We as well.

250
00:13:10.655 --> 00:13:15.330
Suppose ACO hyphen e, Hello.

251
00:13:15.910 --> 00:13:19.230
I'm writing slash p.

252
00:13:20.920 --> 00:13:24.335
Now see there is a tab space.

253
00:13:24.335 --> 00:13:26.360
But if I write slash v,

254
00:13:26.360 --> 00:13:27.905
it is a vertical tab.

255
00:13:27.905 --> 00:13:29.390
Hello in one line,

256
00:13:29.390 --> 00:13:31.250
then what he called the next line.

257
00:13:31.250 --> 00:13:35.420
In the next line, it will provide vertical tab and then we'll display shell.

258
00:13:35.420 --> 00:13:37.700
So far, sometimes to design your output,

259
00:13:37.700 --> 00:13:41.105
you can take slash v. And one more thing.

260
00:13:41.105 --> 00:13:44.990
Last thing, suppose, suppose if I write two times two slash here,

261
00:13:44.990 --> 00:13:47.105
then see the result.

262
00:13:47.105 --> 00:13:51.410
If you want to escape the purpose of your special characters,

263
00:13:51.410 --> 00:13:53.120
you are backslash characters.

264
00:13:53.120 --> 00:13:54.785
Then before that character,

265
00:13:54.785 --> 00:13:58.295
you have to write two slashes so that it won't execute.

266
00:13:58.295 --> 00:14:01.025
It will skip and will display as a DES.

267
00:14:01.025 --> 00:14:02.730
That's it.

268
00:14:03.220 --> 00:14:04.760
Fine.

269
00:14:04.760 --> 00:14:06.140
Then the last one,

270
00:14:06.140 --> 00:14:08.735
the last option is capital E.

271
00:14:08.735 --> 00:14:11.780
Capital E is nothing but your default echo command C.

272
00:14:11.780 --> 00:14:14.370
Suppose if i write echo,

273
00:14:14.950 --> 00:14:22.970
hi slash n And hello,

274
00:14:22.970 --> 00:14:28.130
then slash and will not execute because we are not using hyphen e option.

275
00:14:28.130 --> 00:14:31.535
But if I use a hyphen e option, it will execute.

276
00:14:31.535 --> 00:14:34.820
But even though if you use iPhone year option and if you want,

277
00:14:34.820 --> 00:14:39.455
if you don't want to exclude us special character, then use capitally.

278
00:14:39.455 --> 00:14:45.350
Nazi, simply, capital E option is nothing but normal echo command without any option.

279
00:14:45.350 --> 00:14:46.710
That's it.

280
00:14:46.710 --> 00:14:48.460
Fine.

281
00:14:48.460 --> 00:14:52.795
Now, we are having one more uses of your echo command that is

282
00:14:52.795 --> 00:14:57.505
just to display your messages or output in terms of colors.

283
00:14:57.505 --> 00:15:00.580
So if you want to display your output in terms of colors,

284
00:15:00.580 --> 00:15:02.875
you how to use again hyphen e option,

285
00:15:02.875 --> 00:15:04.930
then you have to provide some color-code.

286
00:15:04.930 --> 00:15:09.700
See that what I am doing this Jaco,

287
00:15:09.700 --> 00:15:13.000
be clear, if you want to execute your color codes,

288
00:15:13.000 --> 00:15:15.940
you how to use a hyphen e option.

289
00:15:15.940 --> 00:15:17.800
And quotations are mandatory.

290
00:15:17.800 --> 00:15:22.765
That's a reason for all times I'm using double quotations for your echo command.

291
00:15:22.765 --> 00:15:25.435
C. Sometimes you don't need to use your double quotations.

292
00:15:25.435 --> 00:15:29.345
Say suppose if i write simply echo Hi, it will work.

293
00:15:29.345 --> 00:15:32.990
Sorry. Echo high. It will work.

294
00:15:32.990 --> 00:15:35.660
Even though if you use quotations, it will work.

295
00:15:35.660 --> 00:15:37.760
But for color codes,

296
00:15:37.760 --> 00:15:39.890
hyphen e and quotations are mandatory.

297
00:15:39.890 --> 00:15:41.990
And that's a reason from starting onwards I am

298
00:15:41.990 --> 00:15:44.990
taking double quotations for your echo command.

299
00:15:44.990 --> 00:15:50.630
So simply echo hyphen slash 0 double three.

300
00:15:50.630 --> 00:15:52.880
This is a syntax for your color codes.

301
00:15:52.880 --> 00:15:58.910
And let me write, suppose 32 Young and I'm writing hello.

302
00:15:58.910 --> 00:16:01.160
And see that isn't what you are getting.

303
00:16:01.160 --> 00:16:03.680
You're getting your output in terms of green.

304
00:16:03.680 --> 00:16:05.855
And also you are terminally, you are getting,

305
00:16:05.855 --> 00:16:09.350
your terminal color is also you are getting as green.

306
00:16:09.350 --> 00:16:12.620
But I want to get my terminal coloring the default.

307
00:16:12.620 --> 00:16:15.065
That means once if you display your message,

308
00:16:15.065 --> 00:16:16.850
you how to reset your color.

309
00:16:16.850 --> 00:16:18.785
So the default color,

310
00:16:18.785 --> 00:16:21.695
e's g, o, young.

311
00:16:21.695 --> 00:16:27.485
That's now see there isn't only or a message will display in terms of colors.

312
00:16:27.485 --> 00:16:28.415
Right?

313
00:16:28.415 --> 00:16:31.115
Suppose if you want to display your color in terms of thick,

314
00:16:31.115 --> 00:16:33.290
then you have to take here instead of 0

315
00:16:33.290 --> 00:16:43.490
to suppose if I take four underlying,

316
00:16:43.490 --> 00:16:48.200
right, let me take instead of 21.

317
00:16:48.200 --> 00:16:52.925
Actually one is for thick, thick color, right?

318
00:16:52.925 --> 00:16:55.505
So let us actually, you are having different types of color codes.

319
00:16:55.505 --> 00:16:57.410
So these are the list of colorCode.

320
00:16:57.410 --> 00:17:00.170
Anyway, I will share these scores so that you can understand how to

321
00:17:00.170 --> 00:17:03.755
use different types of color codes and different styles.

322
00:17:03.755 --> 00:17:05.540
Okay?

323
00:17:05.540 --> 00:17:07.340
Okay, it's finally write,

324
00:17:07.340 --> 00:17:11.790
let me write a simple shell script with echo command.

325
00:17:12.640 --> 00:17:16.685
Echo shell script dot SH.

326
00:17:16.685 --> 00:17:20.555
So what I'm doing is first bin bash,

327
00:17:20.555 --> 00:17:25.770
echo, I am writing. Welcome too.

328
00:17:26.050 --> 00:17:32.810
Then I want to write echo with colors.

329
00:17:32.810 --> 00:17:36.380
I wonder right? Then slash 0 DoubleTree.

330
00:17:36.380 --> 00:17:37.850
Ben.

331
00:17:37.850 --> 00:17:40.805
Let me take thick color.

332
00:17:40.805 --> 00:17:45.960
Let me take 31, yum.

333
00:17:48.010 --> 00:17:50.405
Yum. If you provide some space,

334
00:17:50.405 --> 00:17:52.955
that space will preserve on one output also.

335
00:17:52.955 --> 00:17:55.190
That's why immediately offered him I'm writing.

336
00:17:55.190 --> 00:18:01.940
Now we are good with usage of echo command.

337
00:18:01.940 --> 00:18:04.160
And after, I mean,

338
00:18:04.160 --> 00:18:07.340
at the end of you are at the end of your message,

339
00:18:07.340 --> 00:18:12.005
please do follow the step that is just to make your default color,

340
00:18:12.005 --> 00:18:14.720
set the color as your default,

341
00:18:14.720 --> 00:18:22.560
that is simply m. Now let me save this and let me provide the execution permissions.

342
00:18:23.770 --> 00:18:28.145
Just run your shell script C that isn't.

343
00:18:28.145 --> 00:18:34.250
So one message without color and second meshes with colors, let's say, okay.

344
00:18:34.250 --> 00:18:36.845
Okay, thank you. If you have any doubts,

345
00:18:36.845 --> 00:18:39.330
please post your query.

