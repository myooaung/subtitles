1
00:00:00,890 --> 00:00:06,135
Friends here, our concepts or how to execute a shell script from

2
00:00:06,135 --> 00:00:11,220
another shell script and how to access variables which are defined in another file.

3
00:00:11,220 --> 00:00:13,005
Let me explain them one by one.

4
00:00:13,005 --> 00:00:18,855
So before that, let me do my requirement actually on my host I how HTTPD and Tomcat.

5
00:00:18,855 --> 00:00:24,150
Now how to create to shell script for HTTPD and two shell script for Tomcat.

6
00:00:24,150 --> 00:00:24,765
There.

7
00:00:24,765 --> 00:00:28,575
Just to start and stop HTTPD on Tomcat.

8
00:00:28,575 --> 00:00:32,660
Anyway, by default, you are having some commands on your host for service,

9
00:00:32,660 --> 00:00:34,865
I mean hatchery buddies or recent Tomcat service.

10
00:00:34,865 --> 00:00:37,730
But I want to create my own commands by using them.

11
00:00:37,730 --> 00:00:43,009
I mean, I want to write my own shell script to start HTTPD and to stop HTTPD.

12
00:00:43,009 --> 00:00:44,330
Same before Tomcat.

13
00:00:44,330 --> 00:00:50,720
Let me take the names to start HTTPD and to stop HUD BD.

14
00:00:50,720 --> 00:00:54,560
The same way, suppose I want to take shell script

15
00:00:54,560 --> 00:00:58,925
as start on your data's H and then stop.

16
00:00:58,925 --> 00:01:01,355
Tomcat dot SH.

17
00:01:01,355 --> 00:01:02,330
Fine.

18
00:01:02,330 --> 00:01:04,295
Now first let me do the commands.

19
00:01:04,295 --> 00:01:09,980
Suppose here my HTTPD first,

20
00:01:09,980 --> 00:01:12,095
let me take status for that.

21
00:01:12,095 --> 00:01:16,820
Anybody is not running. Now I want to start that through commands first.

22
00:01:16,820 --> 00:01:19,535
Simply, I can then start.

23
00:01:19,535 --> 00:01:22,985
But whenever if you are running any commands with the system CTL,

24
00:01:22,985 --> 00:01:25,880
then you should be the root or you should have a root privileges.

25
00:01:25,880 --> 00:01:29,285
Anyway, for my user, I'm having root privileges, that's fine.

26
00:01:29,285 --> 00:01:33,500
And friends here I'm using systems UDL because my Lennox is on HL7.

27
00:01:33,500 --> 00:01:36,230
If you're Linux is less than seven,

28
00:01:36,230 --> 00:01:38,000
then use service command.

29
00:01:38,000 --> 00:01:43,910
Now simply I'm using pseudo system CTLs start HTTPD, done.

30
00:01:43,910 --> 00:01:46,595
Now find the status for status, you don't need to apply.

31
00:01:46,595 --> 00:01:49,565
Pseudo. Yes, it is running the same way.

32
00:01:49,565 --> 00:01:54,050
I want to stop it, then simply stop.

33
00:01:54,050 --> 00:01:56,300
Then find the status.

34
00:01:56,300 --> 00:02:00,020
Find they're working right now let me take these two commands and let me

35
00:02:00,020 --> 00:02:03,860
create a script for your start HTTPD onStop HTTPD.

36
00:02:03,860 --> 00:02:08,100
Now, I will write scripts here itself.

37
00:02:08,500 --> 00:02:12,170
So pause, yeah, very first an issue bank length.

38
00:02:12,170 --> 00:02:13,550
So anyway on my host,

39
00:02:13,550 --> 00:02:15,875
I how my bash in this location.

40
00:02:15,875 --> 00:02:18,305
Then, just to start you on HTTPD,

41
00:02:18,305 --> 00:02:21,590
we are using pseudo system CTL.

42
00:02:21,590 --> 00:02:23,735
Start HTTPD.

43
00:02:23,735 --> 00:02:24,665
That's it.

44
00:02:24,665 --> 00:02:27,930
Now, same way for stop.

45
00:02:29,590 --> 00:02:34,710
User bin bash, sudo system,

46
00:02:34,710 --> 00:02:37,985
CTN, stop HTTP, that's it.

47
00:02:37,985 --> 00:02:41,780
Now we're done our own commands to start and stop HTTPD.

48
00:02:41,780 --> 00:02:46,770
Now, let me create these scripts on my host.

49
00:02:47,080 --> 00:02:51,170
And we'll verify that. So here I am writing.

50
00:02:51,170 --> 00:02:54,305
So let me create a directory.

51
00:02:54,305 --> 00:02:59,165
So I'm creating my working directory.

52
00:02:59,165 --> 00:03:02,130
Then let me move into that. Sorry.

53
00:03:04,990 --> 00:03:10,910
Now here I'm creating start HTTPD dot SH.

54
00:03:10,910 --> 00:03:17,090
So simply Fine.

55
00:03:17,090 --> 00:03:22,205
Now let me write, stop HUD pd dot SH,

56
00:03:22,205 --> 00:03:24,410
and let me paste.

57
00:03:24,410 --> 00:03:26,760
And here it is stopped.

58
00:03:27,550 --> 00:03:29,075
Fine.

59
00:03:29,075 --> 00:03:33,065
Now let me provide the execution permissions for these two files.

60
00:03:33,065 --> 00:03:37,220
Now see that we have an exclusion permission for these two files.

61
00:03:37,220 --> 00:03:39,005
Now instead of system CDL,

62
00:03:39,005 --> 00:03:41,195
because already I used them in my scripts.

63
00:03:41,195 --> 00:03:45,330
Let me know the status of a treaty body.

64
00:03:46,540 --> 00:03:51,965
Now, I'm using HTTP dot SH.

65
00:03:51,965 --> 00:03:53,510
Now find the status.

66
00:03:53,510 --> 00:03:54,440
Yes, it's running.

67
00:03:54,440 --> 00:03:57,990
Now let me run stop script.

68
00:03:59,710 --> 00:04:02,540
Now see the status.

69
00:04:02,540 --> 00:04:04,625
So our shell scripts are working.

70
00:04:04,625 --> 00:04:05,345
That's fine.

71
00:04:05,345 --> 00:04:09,020
The same way we have to create shelters for Tomcat as well.

72
00:04:09,020 --> 00:04:10,865
Now, before going to do that,

73
00:04:10,865 --> 00:04:12,995
let me navigate into my Tomcat.

74
00:04:12,995 --> 00:04:16,039
So here, underpinned location,

75
00:04:16,039 --> 00:04:20,735
I have a command called Startup dot SH.

76
00:04:20,735 --> 00:04:24,425
And if I run that, your Tomcat will starts.

77
00:04:24,425 --> 00:04:30,830
Now, see that PSI funny of pipeline grip Tomcat. Now it's running.

78
00:04:30,830 --> 00:04:32,870
Suppose if I want to stop it,

79
00:04:32,870 --> 00:04:35,405
shadow not SH, that's it.

80
00:04:35,405 --> 00:04:36,905
Now if you find your status,

81
00:04:36,905 --> 00:04:38,870
see that no longer does not running.

82
00:04:38,870 --> 00:04:44,080
And be clear. Our commands are there in this location.

83
00:04:44,080 --> 00:04:47,815
What is the location? In this location,

84
00:04:47,815 --> 00:04:50,125
we have our commands.

85
00:04:50,125 --> 00:04:54,970
Now, if you want to run your start-up dot SH,

86
00:04:54,970 --> 00:04:58,060
unsettled dot SH, in this location you are running dot slash.

87
00:04:58,060 --> 00:05:00,325
But if you want to run from any other location,

88
00:05:00,325 --> 00:05:02,500
we know that we have to provide complete path.

89
00:05:02,500 --> 00:05:05,510
Now let me take complete path here.

90
00:05:06,660 --> 00:05:08,650
Now.

91
00:05:08,650 --> 00:05:12,865
Let me write first, Charleston taught you what Tomcat.

92
00:05:12,865 --> 00:05:15,235
First thing, our shebang line,

93
00:05:15,235 --> 00:05:18,280
that is, if I'm your host,

94
00:05:18,280 --> 00:05:23,460
you, you'll how your bashed in bin location directly connect slash bin bash.

95
00:05:23,460 --> 00:05:25,865
So I'm writing user bin bash.

96
00:05:25,865 --> 00:05:29,465
Then to start your Tomcat,

97
00:05:29,465 --> 00:05:34,580
you have to provide complete path for startup dot SH.

98
00:05:34,580 --> 00:05:37,620
Let me copy this.

99
00:05:38,860 --> 00:05:45,300
Same way. We have to write a shell script to stop Tomcat.

100
00:05:47,410 --> 00:05:50,690
But here to stop commodities shouldn't not.

101
00:05:50,690 --> 00:05:58,190
Sh, fine.

102
00:05:58,190 --> 00:06:01,070
Now let me clear these two scripts as well on our local host,

103
00:06:01,070 --> 00:06:02,795
I mean on our working directory.

104
00:06:02,795 --> 00:06:05,310
So our working directory.

105
00:06:06,180 --> 00:06:10,660
So here we are creating start Tomcat dot SH.

106
00:06:10,660 --> 00:06:13,870
So simply based on what syntax.

107
00:06:13,870 --> 00:06:20,140
Same way. Stop Tomcat dot SH.

108
00:06:20,140 --> 00:06:23,240
Now let me copy this thing.

109
00:06:25,830 --> 00:06:27,370
Fine.

110
00:06:27,370 --> 00:06:28,645
Now anyway, they will work.

111
00:06:28,645 --> 00:06:29,860
Let me try with that.

112
00:06:29,860 --> 00:06:32,860
First time, you have to provide execution permissions, right?

113
00:06:32,860 --> 00:06:36,400
So I'm providing for all files exclusion permissions.

114
00:06:36,400 --> 00:06:37,300
Fine.

115
00:06:37,300 --> 00:06:38,590
Now let me run,

116
00:06:38,590 --> 00:06:42,250
start Tomcat dot SH and see the result.

117
00:06:42,250 --> 00:06:42,940
Psi.

118
00:06:42,940 --> 00:06:46,750
If an EF by pen grip Tomcat, it's up and running.

119
00:06:46,750 --> 00:06:49,370
Now let me stop them.

120
00:06:49,650 --> 00:06:52,480
Stop Tomcat.

121
00:06:52,480 --> 00:06:57,775
Now if you find this status, it is not running.

122
00:06:57,775 --> 00:06:58,945
That's fine.

123
00:06:58,945 --> 00:07:01,450
Now, our concept, that concept

124
00:07:01,450 --> 00:07:05,485
is how to execute a shell script from another shell script.

125
00:07:05,485 --> 00:07:12,865
Actually, we how separate shell script to start Tomcat and hit you deeply.

126
00:07:12,865 --> 00:07:14,665
Know how one more requirement,

127
00:07:14,665 --> 00:07:17,470
that requirement is with single shall scape.

128
00:07:17,470 --> 00:07:24,280
I need to stop or start both the services, Tomcat and HTTPD.

129
00:07:24,280 --> 00:07:26,995
Then integral of writing your code, again,

130
00:07:26,995 --> 00:07:31,100
simply call those two scripts. Now let me do that.

131
00:07:33,910 --> 00:07:41,180
So I am writing start HTTPD and Tomcat dot SH.

132
00:07:41,180 --> 00:07:43,520
Now let me write the very first one,

133
00:07:43,520 --> 00:07:48,275
iss shebang line, user bin bash.

134
00:07:48,275 --> 00:07:54,245
Now, friends, if you want to run this shell script from the current location itself,

135
00:07:54,245 --> 00:07:56,075
then directly you can write

136
00:07:56,075 --> 00:08:00,530
this shell script inside of your shell script without pruning complete path.

137
00:08:00,530 --> 00:08:04,160
Now if you want to run the shell script from the different location,

138
00:08:04,160 --> 00:08:07,130
then you have to provide complete fault for this.

139
00:08:07,130 --> 00:08:09,215
Now let me show you that one by one.

140
00:08:09,215 --> 00:08:14,655
Suppose to start, I'm taking start HTTP dot SH.

141
00:08:14,655 --> 00:08:16,495
Yeah, and that it labeled right.

142
00:08:16,495 --> 00:08:20,875
So your shell scripts to start and stop Tomcat and sorry,

143
00:08:20,875 --> 00:08:24,775
your shell script to start your Tomcat and HTTP are there in the current location.

144
00:08:24,775 --> 00:08:29,800
That's why simply connect dot slash star HTTPD dot SH,

145
00:08:29,800 --> 00:08:34,735
and then dot slash start Tomcat dot SH.

146
00:08:34,735 --> 00:08:36,625
So before running our shell script,

147
00:08:36,625 --> 00:08:39,955
you have to provide execution permission.

148
00:08:39,955 --> 00:08:42,940
Let me prove it for all files.

149
00:08:42,940 --> 00:08:44,560
Fine.

150
00:08:44,560 --> 00:08:46,300
Now before running our shall skip,

151
00:08:46,300 --> 00:08:48,280
let me check the status system,

152
00:08:48,280 --> 00:08:53,290
CDL status, HTTPD. It is not running.

153
00:08:53,290 --> 00:08:56,190
Then let me find the status four.

154
00:08:56,190 --> 00:08:59,945
Tomcat as well. Not running.

155
00:08:59,945 --> 00:09:08,015
Now, I'm running our shell script called start HTTPD and then Tomcat dot SH.

156
00:09:08,015 --> 00:09:10,370
So using single shell script,

157
00:09:10,370 --> 00:09:14,600
you are running scripts which are there inside of that.

158
00:09:14,600 --> 00:09:16,280
That's it.

159
00:09:16,280 --> 00:09:23,450
Now, let me find the status. Yes, it's running.

160
00:09:23,450 --> 00:09:28,040
And let me find this treatise for Tom get as it's running, and that's it.

161
00:09:28,040 --> 00:09:32,180
But suppose if you want to create your start

162
00:09:32,180 --> 00:09:38,990
Tomcat HTTP dot SH and stop Tomcat actually brew.sh in a different location,

163
00:09:38,990 --> 00:09:44,870
then you have to provide complete parts for our shell scripts.

164
00:09:44,870 --> 00:09:49,700
So as of now, this script and the script both are there in the current location.

165
00:09:49,700 --> 00:09:51,380
That's why simply I'm reading dot slash.

166
00:09:51,380 --> 00:09:54,770
Let me come back to my home directory.

167
00:09:54,770 --> 00:09:59,945
And before that, let me list the files.

168
00:09:59,945 --> 00:10:06,545
Now here I'm grading. Suppose stop HTTPD, Tomcat dot SH.

169
00:10:06,545 --> 00:10:12,360
And in this location, suppose be clear.

170
00:10:14,980 --> 00:10:17,570
If I done in this way,

171
00:10:17,570 --> 00:10:22,610
suppose stop HTTPD dot ASH AND NOT slash,

172
00:10:22,610 --> 00:10:25,145
stop Tomcat dot SH.

173
00:10:25,145 --> 00:10:29,270
And they won't work because they are not in the current location.

174
00:10:29,270 --> 00:10:31,400
Let me provide the execution permission.

175
00:10:31,400 --> 00:10:33,395
Let me try that so that you can understand.

176
00:10:33,395 --> 00:10:37,610
So I am running C that no such file or directory,

177
00:10:37,610 --> 00:10:39,590
These two actually they are in the different location.

178
00:10:39,590 --> 00:10:43,160
That's why whenever if you want to run us kids from the different location,

179
00:10:43,160 --> 00:10:45,335
you have to prove it always complete path.

180
00:10:45,335 --> 00:10:47,975
So it's better to provide always complete part.

181
00:10:47,975 --> 00:10:52,280
Now let me copy this path and provide these two parts.

182
00:10:52,280 --> 00:10:55,445
I'm in this path for two shell script which are there anymore.

183
00:10:55,445 --> 00:11:00,600
Stop HTTP dot, Tomcat dot SH.

184
00:11:00,640 --> 00:11:03,060
That's it.

185
00:11:04,150 --> 00:11:06,540
That's it.

186
00:11:06,670 --> 00:11:10,650
Now I can run and it will work.

187
00:11:11,860 --> 00:11:14,105
Now it has been executed.

188
00:11:14,105 --> 00:11:16,910
Now let me check the status of

189
00:11:16,910 --> 00:11:24,590
your Tomcat not running and the status of your HTTPD system,

190
00:11:24,590 --> 00:11:29,450
CDL status, not earning.

191
00:11:29,450 --> 00:11:32,330
So guys here what I did,

192
00:11:32,330 --> 00:11:38,825
I exclude tie one shell script in another shell script.

193
00:11:38,825 --> 00:11:43,235
Be clear, that's a fine.

194
00:11:43,235 --> 00:11:45,110
Then what is our next concept?

195
00:11:45,110 --> 00:11:51,425
How to access variables which are defined in another file. Let me show you that.

196
00:11:51,425 --> 00:11:53,555
See, it is very different.

197
00:11:53,555 --> 00:11:56,495
I mean, just small difference between how we explanations to form

198
00:11:56,495 --> 00:11:58,760
another shell script on how to access

199
00:11:58,760 --> 00:12:01,610
variables from another file or another shell script.

200
00:12:01,610 --> 00:12:06,500
Now first of all, I'm creating one file called one dot SH RNA extinction.

201
00:12:06,500 --> 00:12:09,695
Generally most of the cases we will take SH.

202
00:12:09,695 --> 00:12:11,810
Suppose in this file,

203
00:12:11,810 --> 00:12:14,570
if it is a text to find non-literate shebang line,

204
00:12:14,570 --> 00:12:17,210
if it is, shells could be hard, right?

205
00:12:17,210 --> 00:12:18,095
Shebang line.

206
00:12:18,095 --> 00:12:22,065
Now, just assume that I am writing shebang line for this.

207
00:12:22,065 --> 00:12:24,160
And I'm creating a variable,

208
00:12:24,160 --> 00:12:28,180
let's say name equals two.

209
00:12:28,180 --> 00:12:32,590
I am writing simply first shell script.

210
00:12:32,590 --> 00:12:39,590
And let me save this. And let me create second shell script to dot SH.

211
00:12:43,770 --> 00:12:50,455
Then here I want to access the variables which are defining.

212
00:12:50,455 --> 00:12:53,845
Foster shall skip one dot SH, then how you can,

213
00:12:53,845 --> 00:12:58,480
as of now you know how do we execute one shell script into another shell script?

214
00:12:58,480 --> 00:12:59,545
Right?

215
00:12:59,545 --> 00:13:00,565
Now?

216
00:13:00,565 --> 00:13:05,390
First, let me provide the execution permissions for your first shell script.

217
00:13:07,150 --> 00:13:13,610
Now, you have to provide execution permissions for second shell script as well.

218
00:13:13,610 --> 00:13:15,890
Now I'm running second shell script.

219
00:13:15,890 --> 00:13:19,220
You are not getting an output because you don't have any echo command in

220
00:13:19,220 --> 00:13:23,580
your first shell script or in second shell script.

221
00:13:24,580 --> 00:13:32,400
Now, let me try just by equating this variable name in the second shell script.

222
00:13:33,310 --> 00:13:40,745
Just I am writing echo dollar 10M and see the result,

223
00:13:40,745 --> 00:13:42,500
whether you are getting your output or not.

224
00:13:42,500 --> 00:13:46,895
Be clear. We are displaying the variable from.

225
00:13:46,895 --> 00:13:50,975
Second shells, but our variable is defined in first shell script.

226
00:13:50,975 --> 00:13:55,250
Then is it giving you what data are? Not? Just check it.

227
00:13:55,250 --> 00:13:57,155
It's not giving.

228
00:13:57,155 --> 00:14:02,270
The reason is you may think that we are executing the shells could be here.

229
00:14:02,270 --> 00:14:07,010
Whenever if you're executing any shell script within the another shell escape,

230
00:14:07,010 --> 00:14:09,695
then it will create, First of all,

231
00:14:09,695 --> 00:14:11,525
in new shell internally,

232
00:14:11,525 --> 00:14:13,415
an insight that shall do legs good.

233
00:14:13,415 --> 00:14:16,940
And inside that shell your variable is defined not in the current shell.

234
00:14:16,940 --> 00:14:19,040
That's the reason you are not getting

235
00:14:19,040 --> 00:14:21,530
the variable which is there in your first shell script.

236
00:14:21,530 --> 00:14:24,950
So now if you want to access variables which are

237
00:14:24,950 --> 00:14:28,175
defined in another file from the current shell script.

238
00:14:28,175 --> 00:14:31,670
Then how to source you were first to file it,

239
00:14:31,670 --> 00:14:34,190
maybe a shell script or it may be a text file.

240
00:14:34,190 --> 00:14:38,160
Sourcing is nothing but there is a command called source.

241
00:14:38,830 --> 00:14:42,210
Now, see the result.

242
00:14:42,550 --> 00:14:44,555
You are getting.

243
00:14:44,555 --> 00:14:46,580
Not only shell script, you can store

244
00:14:46,580 --> 00:14:48,920
your variables in any file are without any extensional.

245
00:14:48,920 --> 00:14:51,180
So let me do one thing.

246
00:14:51,220 --> 00:14:56,330
My variables just I am writing without any extension.

247
00:14:56,330 --> 00:14:59,660
And here simply I am writing x

248
00:14:59,660 --> 00:15:04,355
equals ten and y equals to some 45. You can write anything.

249
00:15:04,355 --> 00:15:08,495
And I want to access these variables from my second shell script.

250
00:15:08,495 --> 00:15:09,635
Then what do you want to do?

251
00:15:09,635 --> 00:15:11,535
Open your second shell script.

252
00:15:11,535 --> 00:15:14,935
If you are shells cape and your variables file,

253
00:15:14,935 --> 00:15:23,080
if both are in the same location simply you can write source dot slash hour where, sorry.

254
00:15:23,080 --> 00:15:29,180
What is the filename that we copy this?

255
00:15:30,030 --> 00:15:33,250
So also space dot slash.

256
00:15:33,250 --> 00:15:39,235
Then let me display echo the x's.

257
00:15:39,235 --> 00:15:41,950
So I am getting this x-value from my variables.

258
00:15:41,950 --> 00:15:44,500
Fine. Echo.

259
00:15:44,500 --> 00:15:48,350
The white is dollar right?

260
00:15:48,450 --> 00:15:52,420
Now let me run our shell script and see the result.

261
00:15:52,420 --> 00:15:56,230
Yes, you are getting. And one more thing,

262
00:15:56,230 --> 00:15:59,290
we have one more syntax instead of source.

263
00:15:59,290 --> 00:16:02,090
So you can also use simply dot.

264
00:16:03,210 --> 00:16:06,130
Both are same. Dot space,

265
00:16:06,130 --> 00:16:08,035
dot slash my variables.

266
00:16:08,035 --> 00:16:10,315
When you are using dot slash,

267
00:16:10,315 --> 00:16:14,200
that file is there in the current location from where you are running your shell script.

268
00:16:14,200 --> 00:16:16,165
But if it isn't a different location,

269
00:16:16,165 --> 00:16:19,225
you have to provide a complete path instead of dot slash.

270
00:16:19,225 --> 00:16:21,580
Let me do one more thing so that you can understand.

271
00:16:21,580 --> 00:16:27,115
Suppose here I'm creating one file called demo,

272
00:16:27,115 --> 00:16:31,045
and here I am writing demo equals two.

273
00:16:31,045 --> 00:16:34,225
This is from demo file.

274
00:16:34,225 --> 00:16:38,020
I define a variable inside of my a file

275
00:16:38,020 --> 00:16:41,785
called demo and which is there in the different location called this one.

276
00:16:41,785 --> 00:16:45,760
Now we have our shell script to dot SH here.

277
00:16:45,760 --> 00:16:46,390
Right?

278
00:16:46,390 --> 00:16:50,125
Now I want to access the variable which is there in this demo file.

279
00:16:50,125 --> 00:16:51,790
And don't get confused.

280
00:16:51,790 --> 00:16:54,040
I use demo has a filename and inside of

281
00:16:54,040 --> 00:16:57,010
that taken variable has demo. You can take anything.

282
00:16:57,010 --> 00:16:59,050
Now let me take

283
00:16:59,050 --> 00:17:04,660
this complete path because that demo file is there in a different location.

284
00:17:04,660 --> 00:17:06,295
And if you are getting confusion,

285
00:17:06,295 --> 00:17:09,550
always just use complete path.

286
00:17:09,550 --> 00:17:14,995
Source r dot, you can use then complete path for Word file.

287
00:17:14,995 --> 00:17:18,770
Now let me remove all these things.

288
00:17:21,390 --> 00:17:25,255
One thing, I will keep them as it is.

289
00:17:25,255 --> 00:17:31,090
At the end, I will display because I will share this for your practice purpose.

290
00:17:31,090 --> 00:17:36,985
Demo. Now, see the result.

291
00:17:36,985 --> 00:17:39,685
Yes, you are getting this is from demo file.

292
00:17:39,685 --> 00:17:41,605
I used source.

293
00:17:41,605 --> 00:17:46,690
You can also use dot.me.

294
00:17:46,690 --> 00:17:48,490
Our source means in this file,

295
00:17:48,490 --> 00:17:53,890
please get that information from this file and the current shell script,

296
00:17:53,890 --> 00:17:57,220
and get the information which is there in this file, that's it.

297
00:17:57,220 --> 00:18:00,310
So I come at it with the hash symbol.

298
00:18:00,310 --> 00:18:02,505
So we'll discuss that in the next video.

299
00:18:02,505 --> 00:18:05,165
What is the uses of hash as of no hash means,

300
00:18:05,165 --> 00:18:08,465
just assume that that line is not there in the shell script.

301
00:18:08,465 --> 00:18:10,775
Now this easy or shell script,

302
00:18:10,775 --> 00:18:13,835
and I'm running that and see the result.

303
00:18:13,835 --> 00:18:15,920
Yes, you aren't getting. So simply guys,

304
00:18:15,920 --> 00:18:17,885
you can use either source or dot.

305
00:18:17,885 --> 00:18:19,310
And be clear.

306
00:18:19,310 --> 00:18:24,200
You can use this if you were current shell steep and you are this file.

307
00:18:24,200 --> 00:18:26,090
If both are in the same location.

308
00:18:26,090 --> 00:18:27,470
If they're in a different location,

309
00:18:27,470 --> 00:18:28,655
please provide complete part.

310
00:18:28,655 --> 00:18:29,405
That's it.

311
00:18:29,405 --> 00:18:34,880
So that is the simple uses of these two concepts.

312
00:18:34,880 --> 00:18:36,095
Okay?

313
00:18:36,095 --> 00:18:38,070
Okay, thank you.

