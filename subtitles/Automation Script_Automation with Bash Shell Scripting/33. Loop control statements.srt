1
00:00:00,000 --> 00:00:02,400
Friends here our concept is

2
00:00:02,400 --> 00:00:06,345
loop control statements or commands simply break and continue,

3
00:00:06,345 --> 00:00:10,560
or called loop control statements or loop control commands.

4
00:00:10,560 --> 00:00:16,185
These to break and continue are used to control the execution of loops.

5
00:00:16,185 --> 00:00:19,590
Any loop c we have different types of Lucknow for loop,

6
00:00:19,590 --> 00:00:22,305
while loop, until Lou, select loop.

7
00:00:22,305 --> 00:00:26,400
So to control the execution of any loop here,

8
00:00:26,400 --> 00:00:28,945
break and continue or useful.

9
00:00:28,945 --> 00:00:32,225
Let me explain this concept with a simple shell script.

10
00:00:32,225 --> 00:00:36,860
Suppose I'm defining a shell script called Display Files dot ASH.

11
00:00:36,860 --> 00:00:40,355
So I want display all the files which are there in the current location.

12
00:00:40,355 --> 00:00:42,470
So simply I can use ls command also.

13
00:00:42,470 --> 00:00:51,290
First, let me run the shell script by taking simply ls command C.

14
00:00:51,290 --> 00:00:54,110
You are quote, simply we how ls command,

15
00:00:54,110 --> 00:00:55,355
instead of your shell script,

16
00:00:55,355 --> 00:00:58,955
you are able to display all the files which are there in the current location.

17
00:00:58,955 --> 00:01:02,390
But same output just I want to get using for loop.

18
00:01:02,390 --> 00:01:04,715
Yes, I'm implementing with step-by-step.

19
00:01:04,715 --> 00:01:09,995
Let me comment this unless I am using for each file.

20
00:01:09,995 --> 00:01:14,195
So you know, in for-loop it immediately afterward starting with your four key,

21
00:01:14,195 --> 00:01:15,560
you have to take any variable.

22
00:01:15,560 --> 00:01:21,080
I'm taking each file because my concept is using for loop, I'm printing file.

23
00:01:21,080 --> 00:01:23,975
That's why just I am taking suitable variable him, that's it.

24
00:01:23,975 --> 00:01:26,165
You can take simply for x, for y,

25
00:01:26,165 --> 00:01:27,605
for each, for each file,

26
00:01:27,605 --> 00:01:30,215
or for file. In.

27
00:01:30,215 --> 00:01:33,290
If a sub shoot dollar, ls, dollar pencils,

28
00:01:33,290 --> 00:01:37,940
unless the command output we are giving as an input for your for loops.

29
00:01:37,940 --> 00:01:43,130
So that for loop will take one by one file from this output and we'll try to do it,

30
00:01:43,130 --> 00:01:44,780
will try to repeat the actions,

31
00:01:44,780 --> 00:01:47,990
the commands, the logics which are there between do and done.

32
00:01:47,990 --> 00:01:49,775
Now my intensity is simply,

33
00:01:49,775 --> 00:01:52,830
I want to display each file.

34
00:01:53,820 --> 00:01:55,540
That's it.

35
00:01:55,540 --> 00:02:00,070
So what will happen? First, ls command will exclude that output will substitute here.

36
00:02:00,070 --> 00:02:04,495
So we are getting, going to get some number of files that many number of times.

37
00:02:04,495 --> 00:02:07,570
How many files you are having here because of ls output.

38
00:02:07,570 --> 00:02:09,010
That many number of times,

39
00:02:09,010 --> 00:02:10,435
this logic will repeat,

40
00:02:10,435 --> 00:02:12,145
while repeating each time,

41
00:02:12,145 --> 00:02:14,275
while iterating each time automatically,

42
00:02:14,275 --> 00:02:17,665
the.h file will be one by one from this output.

43
00:02:17,665 --> 00:02:23,050
Now let me say we see your code once and see the output.

44
00:02:23,050 --> 00:02:25,360
Yes, we are getting your output.

45
00:02:25,360 --> 00:02:28,930
And here you are displaying all the files,

46
00:02:28,930 --> 00:02:32,470
see without extension or within some dot TXT dot ASH.

47
00:02:32,470 --> 00:02:36,630
But now my requirement is I won't display only text files.

48
00:02:36,630 --> 00:02:38,525
Then you can take simply,

49
00:02:38,525 --> 00:02:40,085
instead of taking ls command,

50
00:02:40,085 --> 00:02:42,455
if I go with ls star 2.txt,

51
00:02:42,455 --> 00:02:43,700
no meaningful that is,

52
00:02:43,700 --> 00:02:47,015
star means anything any file which is ending with the dot TXT,

53
00:02:47,015 --> 00:02:48,995
you are getting wanted text files.

54
00:02:48,995 --> 00:02:53,460
Now let me use your for loop just to get text files.

55
00:02:54,070 --> 00:02:56,555
So let me comment this code.

56
00:02:56,555 --> 00:02:59,510
So I'm using multi-line comments, multi-line comments.

57
00:02:59,510 --> 00:03:01,970
You can take any name to come into your multi-line.

58
00:03:01,970 --> 00:03:04,040
I'm taking him comment.

59
00:03:04,040 --> 00:03:07,565
Now. For each file in

60
00:03:07,565 --> 00:03:13,520
dollar ls dot dot TXT means any file which is ending with the dot TXT,

61
00:03:13,520 --> 00:03:15,335
that files I'm capturing with ls,

62
00:03:15,335 --> 00:03:18,425
that output we are providing to our for loop.

63
00:03:18,425 --> 00:03:20,705
Then here simply, I am displaying

64
00:03:20,705 --> 00:03:26,850
a dollar each file so that you are going to get now only takes two files.

65
00:03:28,480 --> 00:03:30,815
Yes.

66
00:03:30,815 --> 00:03:37,640
No, I need to extend this such that I need to display only one text file,

67
00:03:37,640 --> 00:03:40,220
which is getting at very first.

68
00:03:40,220 --> 00:03:42,905
If I get one text file by using for loop,

69
00:03:42,905 --> 00:03:44,285
then offer that I don't want to repeat,

70
00:03:44,285 --> 00:03:46,115
I want to skip all these.

71
00:03:46,115 --> 00:03:48,125
Then how we can do it?

72
00:03:48,125 --> 00:03:50,165
There are different ways. Let me show you.

73
00:03:50,165 --> 00:03:52,085
First I will go with some complex way.

74
00:03:52,085 --> 00:03:53,870
Then I will show you a very simple way.

75
00:03:53,870 --> 00:03:56,390
So initially I'm taking some count,

76
00:03:56,390 --> 00:03:58,385
count equals to one.

77
00:03:58,385 --> 00:04:04,564
Now what I am doing is before printing you are each file value.

78
00:04:04,564 --> 00:04:06,995
I'm checking if I'm taking the test condition.

79
00:04:06,995 --> 00:04:13,055
If only if count equals to one means wounded very first-time.

80
00:04:13,055 --> 00:04:18,510
Then, then I'm executing this eco,

81
00:04:19,960 --> 00:04:27,545
sorry, echo dollar each file.

82
00:04:27,545 --> 00:04:28,985
And then after that I am making,

83
00:04:28,985 --> 00:04:30,500
I am increasing this counter value.

84
00:04:30,500 --> 00:04:36,065
We know how to increase counter value by using arithmetic operators simply.

85
00:04:36,065 --> 00:04:43,940
Then I'm closing with their Phi. Now what will happen?

86
00:04:43,940 --> 00:04:47,255
You know, here you will get some list of text files.

87
00:04:47,255 --> 00:04:50,750
Your for loop will try to execute this logic number of times.

88
00:04:50,750 --> 00:04:53,855
But initially before starting your for loop,

89
00:04:53,855 --> 00:04:56,000
we have taken some count as value one.

90
00:04:56,000 --> 00:04:58,475
You can take any variable hours they can count variable.

91
00:04:58,475 --> 00:05:01,190
And for loop will take first to file from

92
00:05:01,190 --> 00:05:04,130
this output and it will try to exclude first-time this one.

93
00:05:04,130 --> 00:05:09,185
So why legs Gooding first-time or for your first iteration count is already one.

94
00:05:09,185 --> 00:05:10,715
So 101, both are equal.

95
00:05:10,715 --> 00:05:12,230
That's why you are printing this.

96
00:05:12,230 --> 00:05:14,885
So after printing first file,

97
00:05:14,885 --> 00:05:18,920
what I am doing is I am increasing count value.

98
00:05:18,920 --> 00:05:21,800
So why executing next time?

99
00:05:21,800 --> 00:05:23,975
You're counties now too?

100
00:05:23,975 --> 00:05:25,700
Two is equals to one.

101
00:05:25,700 --> 00:05:27,395
No false, that's where it will skip.

102
00:05:27,395 --> 00:05:29,660
So now four remaining all files.

103
00:05:29,660 --> 00:05:32,075
While executing this code.

104
00:05:32,075 --> 00:05:33,920
From second iteration onwards,

105
00:05:33,920 --> 00:05:36,800
your count value is not equal to 1.So it will never execute,

106
00:05:36,800 --> 00:05:38,930
so that it is executing only one time,

107
00:05:38,930 --> 00:05:41,930
so that you are going to get only the first text file.

108
00:05:41,930 --> 00:05:47,135
Now let me save it. See you code once.

109
00:05:47,135 --> 00:05:51,725
And I'm running that are getting only one text file.

110
00:05:51,725 --> 00:05:57,785
But there is a small disadvantage. What is that means?

111
00:05:57,785 --> 00:06:01,760
After printing first to file, if you're intensities,

112
00:06:01,760 --> 00:06:03,560
if you don't want to print the remaining files,

113
00:06:03,560 --> 00:06:04,925
you can stop for Lucknow.

114
00:06:04,925 --> 00:06:08,855
Why should we take next to file and why should we check the count value?

115
00:06:08,855 --> 00:06:10,145
It is not equals to one.

116
00:06:10,145 --> 00:06:12,710
So you are skipping this unnecessarily.

117
00:06:12,710 --> 00:06:17,210
You are validating this condition for remaining files by my indents knees.

118
00:06:17,210 --> 00:06:19,100
After printing first to file,

119
00:06:19,100 --> 00:06:21,200
I want to stop my for loop.

120
00:06:21,200 --> 00:06:25,250
I want to stop execution of your for loop.

121
00:06:25,250 --> 00:06:30,350
Now, let me come in this code and I will write one more chord.

122
00:06:30,350 --> 00:06:32,795
So second command.

123
00:06:32,795 --> 00:06:35,540
You can, you can take any name.

124
00:06:35,540 --> 00:06:40,670
See what I'm doing is for each file in dollar,

125
00:06:40,670 --> 00:06:44,735
unless star dot TXT do,

126
00:06:44,735 --> 00:06:48,440
then I'm printing a CO

127
00:06:48,440 --> 00:06:51,215
Dollar each file.

128
00:06:51,215 --> 00:06:54,875
Then I'm using exit, suppose, exit, suppose.

129
00:06:54,875 --> 00:06:58,670
But there is a difference between Exit and Luke convulsed statements,

130
00:06:58,670 --> 00:07:01,595
exit will terminate completely or shelter.

131
00:07:01,595 --> 00:07:04,850
Suppose I am writing two more lengths.

132
00:07:04,850 --> 00:07:06,380
Just for our understanding.

133
00:07:06,380 --> 00:07:08,000
I'm writing yo, I'm in,

134
00:07:08,000 --> 00:07:12,095
I'm writing here, starting for loop.

135
00:07:12,095 --> 00:07:14,975
Then after completion of your for loop at the end,

136
00:07:14,975 --> 00:07:21,365
I am writing a for loop is over.

137
00:07:21,365 --> 00:07:23,945
Now because I use exit.

138
00:07:23,945 --> 00:07:26,870
Because of that you can able to get only one file,

139
00:07:26,870 --> 00:07:29,660
but you are stopping your shell scale so that it

140
00:07:29,660 --> 00:07:33,650
is keeping the line which is the outside of your loop.

141
00:07:33,650 --> 00:07:37,970
Suppose if we how after loop somewhere lens in your core,

142
00:07:37,970 --> 00:07:40,220
then because of exit,

143
00:07:40,220 --> 00:07:43,610
then never execute you're completely or shell script is stopping.

144
00:07:43,610 --> 00:07:48,005
But my indigenous, I wanted to stop only for loop, not your shell script.

145
00:07:48,005 --> 00:07:51,230
You're not getting echo for his over.

146
00:07:51,230 --> 00:07:52,655
But now see the difference.

147
00:07:52,655 --> 00:07:56,195
Without exit, I can stop my for loop.

148
00:07:56,195 --> 00:07:58,790
Exit to stop your shelter.

149
00:07:58,790 --> 00:08:01,220
If I take simply break.

150
00:08:01,220 --> 00:08:04,310
If I take simply break.

151
00:08:04,310 --> 00:08:08,720
Now, see, the difference between

152
00:08:08,720 --> 00:08:14,675
previous output and current output you're getting for loop is over.

153
00:08:14,675 --> 00:08:19,924
So here, brachii used to terminate

154
00:08:19,924 --> 00:08:25,265
or exit current loop completely before the actual ending of loop.

155
00:08:25,265 --> 00:08:29,570
Actual ending means you are far loop has to repeat for n number of times

156
00:08:29,570 --> 00:08:34,385
that n number of times based on how many values text files you are getting here.

157
00:08:34,385 --> 00:08:37,460
But now, because of break,

158
00:08:37,460 --> 00:08:41,090
you are stopping only were fun when you are stopping.

159
00:08:41,090 --> 00:08:43,355
While executing first iteration itself,

160
00:08:43,355 --> 00:08:48,740
you are stopping based on conditional so you can stop your loop as if not directly,

161
00:08:48,740 --> 00:08:50,240
I use a break statement.

162
00:08:50,240 --> 00:08:52,565
Not only that, see,

163
00:08:52,565 --> 00:08:55,415
let me take your count.

164
00:08:55,415 --> 00:08:58,100
Count equals to one.

165
00:08:58,100 --> 00:09:01,700
Now what I am doing is here,

166
00:09:01,700 --> 00:09:05,705
after displaying your value,

167
00:09:05,705 --> 00:09:09,785
let's say if actually in order to use this just I am giving,

168
00:09:09,785 --> 00:09:13,685
you can use break instead of if condition for that just I am giving an example.

169
00:09:13,685 --> 00:09:19,115
If you are dollar count is equals to one,

170
00:09:19,115 --> 00:09:20,630
then you are displaying,

171
00:09:20,630 --> 00:09:24,170
then you are displaying your line.

172
00:09:24,170 --> 00:09:26,045
So after displaying your Lane,

173
00:09:26,045 --> 00:09:34,340
What I will do is here I can use directly break.

174
00:09:34,340 --> 00:09:38,525
So whenever if I display first to file immediately,

175
00:09:38,525 --> 00:09:43,595
immediately stop my for loop.

176
00:09:43,595 --> 00:09:46,700
See break will stop only this for loop.

177
00:09:46,700 --> 00:09:47,780
Actually were for loop.

178
00:09:47,780 --> 00:09:50,225
Just imagine that there are some for text files.

179
00:09:50,225 --> 00:09:52,385
Your for loop has to repeat four times.

180
00:09:52,385 --> 00:09:54,980
But while excluding first-time itself,

181
00:09:54,980 --> 00:09:56,765
you have a break statement.

182
00:09:56,765 --> 00:09:58,775
Because of that, simply,

183
00:09:58,775 --> 00:10:01,040
it will skip remaining three iterations.

184
00:10:01,040 --> 00:10:02,960
It won't x good remaining three iterations.

185
00:10:02,960 --> 00:10:07,700
And simply it will stop your for loop and it will come out from your for loop.

186
00:10:07,700 --> 00:10:10,520
And it will try to execute the lines which are there outside of your

187
00:10:10,520 --> 00:10:14,150
for loop in case you have any logic inside of your shell script.

188
00:10:14,150 --> 00:10:17,030
That's a simply to terminate,

189
00:10:17,030 --> 00:10:19,985
to terminate only for loop, not a shell script.

190
00:10:19,985 --> 00:10:24,095
So be clear, if you want to terminate shells taped you how to use exit.

191
00:10:24,095 --> 00:10:27,830
If you want to terminate only loop, you have to use break.

192
00:10:27,830 --> 00:10:29,195
That's it.

193
00:10:29,195 --> 00:10:38,435
Now let me save it. See that you're getting your output.

194
00:10:38,435 --> 00:10:39,440
Okay?

195
00:10:39,440 --> 00:10:43,325
Now, one more thing called continue.

196
00:10:43,325 --> 00:10:45,935
Then what is the use of this?

197
00:10:45,935 --> 00:10:48,755
Now let me take one more example.

198
00:10:48,755 --> 00:10:53,870
Working with continue dot SH.

199
00:10:53,870 --> 00:10:56,375
Tried to understand the concept.

200
00:10:56,375 --> 00:11:01,730
We will see uses of your continuum break effectively while writing real-time scripts.

201
00:11:01,730 --> 00:11:04,610
Now suppose I am trying to display first,

202
00:11:04,610 --> 00:11:06,230
I will do this thing.

203
00:11:06,230 --> 00:11:09,875
Echo, starting for loop.

204
00:11:09,875 --> 00:11:13,115
I mean, you can use these break statements in any loops,

205
00:11:13,115 --> 00:11:15,980
but as of now, we covered only for loop.

206
00:11:15,980 --> 00:11:18,140
That's why I am explaining with respect to a for loop,

207
00:11:18,140 --> 00:11:23,400
but same concept is applicable with your wife and until unselect loop.

208
00:11:23,920 --> 00:11:27,840
For each in.

209
00:11:28,210 --> 00:11:31,970
I'm taking suppose sequence command, sequence,

210
00:11:31,970 --> 00:11:35,330
command output, suppose one to ten I want to display by using your firm.

211
00:11:35,330 --> 00:11:38,975
You then do.

212
00:11:38,975 --> 00:11:40,100
Then.

213
00:11:40,100 --> 00:11:50,190
So let me save it and let me run this fast.

214
00:11:52,540 --> 00:11:55,655
Execution permission.

215
00:11:55,655 --> 00:12:03,120
Continue. Now, I'm running our shell script.

216
00:12:04,990 --> 00:12:07,775
You are getting one to ten.

217
00:12:07,775 --> 00:12:11,730
And let me modify this script.

218
00:12:16,570 --> 00:12:23,500
So at the end I am writing one more statement called for loop is over.

219
00:12:23,500 --> 00:12:26,590
Now my intention is if you are,

220
00:12:26,590 --> 00:12:29,515
each value is equal to phi,

221
00:12:29,515 --> 00:12:32,740
then I want to stop to print remaining values.

222
00:12:32,740 --> 00:12:35,740
Actually you are for-loop is trying to print one to ten.

223
00:12:35,740 --> 00:12:40,690
But now my intent knees whenever if you are each value is equal to phi,

224
00:12:40,690 --> 00:12:42,280
then I want to stop my for loop.

225
00:12:42,280 --> 00:12:44,800
I don't want to print remaining values after phi.

226
00:12:44,800 --> 00:12:52,705
So that's why what I'm doing here is before printing EVA value,

227
00:12:52,705 --> 00:12:55,090
before printing your value,

228
00:12:55,090 --> 00:12:56,980
I'm checking that value.

229
00:12:56,980 --> 00:13:03,915
If it is. If Be clear,

230
00:13:03,915 --> 00:13:09,485
if you are, each value is greater than phi.

231
00:13:09,485 --> 00:13:10,850
If it is greater than 5x,

232
00:13:10,850 --> 00:13:13,025
then I want to stop my for loop.

233
00:13:13,025 --> 00:13:17,690
Then simply use break here, then close with FI.

234
00:13:17,690 --> 00:13:21,080
Now what will happen if this condition is true?

235
00:13:21,080 --> 00:13:25,640
It will stop your for loop to execute again and again.

236
00:13:25,640 --> 00:13:29,570
It will display value called each.

237
00:13:29,570 --> 00:13:37,490
Now see the result. Now I'm running our shall skip up there,

238
00:13:37,490 --> 00:13:40,590
the output we are getting now only one-to-five.

239
00:13:41,320 --> 00:13:43,340
That's fine.

240
00:13:43,340 --> 00:13:45,030
Now.

241
00:13:46,210 --> 00:13:48,875
In the same shell script.

242
00:13:48,875 --> 00:13:51,635
If you are value equals to phi,

243
00:13:51,635 --> 00:13:55,640
then I don't want to print it that in remaining cases only I want to print

244
00:13:55,640 --> 00:13:58,820
my values actually are for loop is trying to print

245
00:13:58,820 --> 00:14:02,870
values from let me come into your core.

246
00:14:02,870 --> 00:14:04,730
Your for loop is print,

247
00:14:04,730 --> 00:14:09,180
printing values from one to ten.

248
00:14:10,900 --> 00:14:14,910
Now first let me comment this code here.

249
00:14:15,820 --> 00:14:22,835
Now let me write same logic for each in dollar sequence, one to ten.

250
00:14:22,835 --> 00:14:25,430
Do, done.

251
00:14:25,430 --> 00:14:27,515
So here, as of now,

252
00:14:27,515 --> 00:14:32,255
I am taking again each so that it is printing one to ten.

253
00:14:32,255 --> 00:14:36,695
But my requirement is if your value is equals to phi,

254
00:14:36,695 --> 00:14:39,360
then I don't want to print that.

255
00:14:40,150 --> 00:14:46,415
In case I want to print len how you can implement that.

256
00:14:46,415 --> 00:14:48,815
See, first thing I can do this.

257
00:14:48,815 --> 00:14:56,165
If, if, if you are value is not equal to phi,

258
00:14:56,165 --> 00:14:58,235
then I have to take here,

259
00:14:58,235 --> 00:15:01,490
you have an operator called naught equals not equals to phi,

260
00:15:01,490 --> 00:15:04,710
then only print your values. Then this is fine.

261
00:15:05,680 --> 00:15:08,220
Then.

262
00:15:10,480 --> 00:15:14,495
But as you make it small confusion while working with canoe,

263
00:15:14,495 --> 00:15:17,490
but as of now, just try to understand.

264
00:15:18,850 --> 00:15:20,450
It's fine.

265
00:15:20,450 --> 00:15:22,295
As of now, what is our requirement?

266
00:15:22,295 --> 00:15:25,235
Print values one to ten, but skip o phi.

267
00:15:25,235 --> 00:15:28,760
So that's why I'm taking condition whenever it is not equals to fight that only print,

268
00:15:28,760 --> 00:15:30,410
otherwise I don't want to print.

269
00:15:30,410 --> 00:15:32,855
So if it is equals to phi, it will get failed.

270
00:15:32,855 --> 00:15:35,300
That's why you're if it doesn't allow to execute this line so that you are

271
00:15:35,300 --> 00:15:37,895
getting values from one to ten by

272
00:15:37,895 --> 00:15:44,405
excluding you are number phi yes, 1234678910.

273
00:15:44,405 --> 00:15:48,030
But same concept you can also implement in this way.

274
00:15:48,190 --> 00:15:51,875
Working with continued on S-H.

275
00:15:51,875 --> 00:15:54,380
If my value is equals to fight,

276
00:15:54,380 --> 00:16:01,290
then I want to keep to execute echo dollar H. Then let me come in this code once again.

277
00:16:05,110 --> 00:16:12,005
First of all, for each in Noellert sequence, one to ten.

278
00:16:12,005 --> 00:16:14,735
Do, done.

279
00:16:14,735 --> 00:16:21,290
Then between this, suppose actually we need to print the value of each.

280
00:16:21,290 --> 00:16:22,700
So as of now if you don't,

281
00:16:22,700 --> 00:16:25,160
you'll get 12x ten numbers.

282
00:16:25,160 --> 00:16:28,200
But what I am doing is see,

283
00:16:28,480 --> 00:16:33,050
if, if be clear,

284
00:16:33,050 --> 00:16:36,095
if you are a value is equals to,

285
00:16:36,095 --> 00:16:38,720
if it is equals to phi,

286
00:16:38,720 --> 00:16:43,505
then I am writing here simply continue.

287
00:16:43,505 --> 00:16:45,500
Then close with phi.

288
00:16:45,500 --> 00:16:48,660
Then what will happen because of this continue?

289
00:16:52,750 --> 00:16:57,650
But is simple. Yes, I assume that after you've conditioned,

290
00:16:57,650 --> 00:16:58,970
you are having some number of lines.

291
00:16:58,970 --> 00:17:01,145
As of now you have only one line.

292
00:17:01,145 --> 00:17:03,920
It is executing your for loop.

293
00:17:03,920 --> 00:17:06,050
This entire logic is executing again and

294
00:17:06,050 --> 00:17:10,320
again for ten times because you are having values from one to ten.

295
00:17:10,570 --> 00:17:13,220
If this condition is true,

296
00:17:13,220 --> 00:17:15,230
then can new keyword will execute?

297
00:17:15,230 --> 00:17:17,600
If continue is executing,

298
00:17:17,600 --> 00:17:23,615
your for loop will stop current iteration and it will go for next iteration.

299
00:17:23,615 --> 00:17:25,025
It will stop.

300
00:17:25,025 --> 00:17:27,620
Current iteration means after continue.

301
00:17:27,620 --> 00:17:31,520
If you have any number of lines in your code in your loop,

302
00:17:31,520 --> 00:17:35,705
all those lines will skip and we'll try to pick next value from here,

303
00:17:35,705 --> 00:17:38,000
and it will execute for next iteration.

304
00:17:38,000 --> 00:17:48,860
Let's say C, same output you are going to get, you're not getting fine.

305
00:17:49,440 --> 00:17:53,290
The reason is whenever continue keyword is executing,

306
00:17:53,290 --> 00:17:55,585
continue command is executing simply.

307
00:17:55,585 --> 00:17:59,499
Your for loop will stop the current iteration,

308
00:17:59,499 --> 00:18:00,895
the current execution part.

309
00:18:00,895 --> 00:18:04,150
And you will try to take next value for your each and Inditex.

310
00:18:04,150 --> 00:18:05,485
Good next iteration.

311
00:18:05,485 --> 00:18:07,270
That's why even our continues executing

312
00:18:07,270 --> 00:18:09,565
the remaining Lenny is what is there you are trying to display.

313
00:18:09,565 --> 00:18:12,040
Whenever each value is equal to phi,

314
00:18:12,040 --> 00:18:13,990
continue is executing because it is true,

315
00:18:13,990 --> 00:18:15,460
no, if it is phi, this is true.

316
00:18:15,460 --> 00:18:16,870
True means current will execute.

317
00:18:16,870 --> 00:18:21,355
Continue executing means there are many lines will skip in the current iteration,

318
00:18:21,355 --> 00:18:22,704
in the current execution,

319
00:18:22,704 --> 00:18:24,940
and we will try to take second next two value,

320
00:18:24,940 --> 00:18:27,740
that is six for eight and try to execute

321
00:18:27,740 --> 00:18:30,590
60 iteration for sixth iteration, which is not a true.

322
00:18:30,590 --> 00:18:31,880
That's why couldn't you won't Xcode.

323
00:18:31,880 --> 00:18:34,325
That's why equal annual Xcode, that's it.

324
00:18:34,325 --> 00:18:37,160
So guys, this is small confusion continue,

325
00:18:37,160 --> 00:18:38,330
but if you are located,

326
00:18:38,330 --> 00:18:39,620
then no problem otherwise anyway,

327
00:18:39,620 --> 00:18:42,035
you will get confidence when writing our scripts.

328
00:18:42,035 --> 00:18:46,400
So simply can new command is used in the script to

329
00:18:46,400 --> 00:18:51,275
skip current iteration of loop and continue to next iteration of the loop.

330
00:18:51,275 --> 00:18:55,685
So be clear, these two commands you can use.

331
00:18:55,685 --> 00:18:59,000
In any loop, we have different types of loops, right?

332
00:18:59,000 --> 00:19:01,380
Okay, thank you.

