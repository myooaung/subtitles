1
00:00:00,350 --> 00:00:05,489
Friends here, our concepts or logic to handle command-line arguments.

2
00:00:05,489 --> 00:00:07,439
If, if else, if, else,

3
00:00:07,439 --> 00:00:10,799
if else if else, statements and statement.

4
00:00:10,799 --> 00:00:16,544
And finally, how to run shell script with only root r with the root user.

5
00:00:16,544 --> 00:00:18,945
And all these concepts we are discussing with

6
00:00:18,945 --> 00:00:22,574
a simple shell script called automate HTTPD actions.

7
00:00:22,574 --> 00:00:24,569
Before implementing our shall skip.

8
00:00:24,569 --> 00:00:26,070
What are these actions?

9
00:00:26,070 --> 00:00:29,895
See whenever if you install packaged as a system service,

10
00:00:29,895 --> 00:00:33,360
then you can manage that service with system CDL.

11
00:00:33,360 --> 00:00:35,069
And for that system CDL,

12
00:00:35,069 --> 00:00:38,924
you can provide different options like start, stop, restart.

13
00:00:38,924 --> 00:00:40,109
And one more thing.

14
00:00:40,109 --> 00:00:44,659
Suppose if you are, are HCl is greater than or equals to seven,

15
00:00:44,659 --> 00:00:47,180
on Lennox is greater than or equal to seven.

16
00:00:47,180 --> 00:00:51,904
Then you can use System CDL command to manage your services,

17
00:00:51,904 --> 00:00:53,734
to manage your systems are,

18
00:00:53,734 --> 00:00:59,045
suppose if your voice is less than seven, is less than seven.

19
00:00:59,045 --> 00:01:00,290
Instead of systems UDL,

20
00:01:00,290 --> 00:01:03,080
you service command Plaza up now I'm

21
00:01:03,080 --> 00:01:07,010
implementing a shell script for our children are not equal to seven.

22
00:01:07,010 --> 00:01:08,735
So in our photo sessions,

23
00:01:08,735 --> 00:01:11,419
we had been doing work for both.

24
00:01:11,419 --> 00:01:15,169
I mean, any, any rational linux.

25
00:01:15,169 --> 00:01:17,719
First let me show you that.

26
00:01:17,719 --> 00:01:22,009
Hud PUT actually believes that.

27
00:01:22,009 --> 00:01:23,480
But by seeing this output,

28
00:01:23,480 --> 00:01:26,059
I don't wanna decide whether anybody there or not,

29
00:01:26,059 --> 00:01:30,049
because logically I need this value 0,

30
00:01:30,049 --> 00:01:33,319
yes, my hedge UDP is there with my host.

31
00:01:33,319 --> 00:01:34,474
That's fine.

32
00:01:34,474 --> 00:01:36,410
Now let me run one command, systems,

33
00:01:36,410 --> 00:01:38,854
UDL, I want to know the status of that.

34
00:01:38,854 --> 00:01:42,619
Status is when action, it is not running.

35
00:01:42,619 --> 00:01:46,640
Now I want to start with HTTP,

36
00:01:46,640 --> 00:01:52,860
then let me run this with the start action.

37
00:01:57,490 --> 00:01:59,989
It is failed to start.

38
00:01:59,989 --> 00:02:02,749
That isn't status action.

39
00:02:02,749 --> 00:02:04,684
You can learn from any user.

40
00:02:04,684 --> 00:02:09,275
Might start, stop, restart. You had to run from.

41
00:02:09,275 --> 00:02:10,940
Other ways.

42
00:02:10,940 --> 00:02:15,514
You have to run with sudo privileges if you're usually having Sudoku.

43
00:02:15,514 --> 00:02:18,995
Now, first we will try to

44
00:02:18,995 --> 00:02:24,035
implement ourselves script such that it has to walk with only root user.

45
00:02:24,035 --> 00:02:28,859
And then later I will show you how to work with other user, which is having.

46
00:02:28,960 --> 00:02:33,184
Now, let me move into some directory.

47
00:02:33,184 --> 00:02:36,560
So here I'm implementing shell script,

48
00:02:36,560 --> 00:02:44,845
automate HTTPD actions, not SH. And one more thing.

49
00:02:44,845 --> 00:02:47,650
Before implementing your shell script.

50
00:02:47,650 --> 00:02:51,939
How we know that from which user we're running

51
00:02:51,939 --> 00:02:57,279
our cells inside of yourself simply by using Heidi are IID hyphen,

52
00:02:57,279 --> 00:03:00,774
you see that they're getting one W1.

53
00:03:00,774 --> 00:03:02,590
If you're the root user, you would get.

54
00:03:02,590 --> 00:03:06,460
Let me show you that as well. We are getting.

55
00:03:06,460 --> 00:03:11,900
Now this is our logic to decide whether you are running with the root r.

56
00:03:12,840 --> 00:03:21,320
Now, let me open up a shell script or homemade HTTPD. Action's gone insane.

57
00:03:22,290 --> 00:03:26,510
Now let me write our shebang lending bash on.

58
00:03:27,690 --> 00:03:32,509
Now. As usual, I'm writing comments.

59
00:03:34,920 --> 00:03:39,429
Then you can also write u or for personal descript.

60
00:03:39,429 --> 00:03:49,479
So I'm writing something like automating HTTP actions like start,

61
00:03:49,479 --> 00:03:53,364
stop, restart, and status.

62
00:03:53,364 --> 00:03:56,679
Let's say. Now the very first logic,

63
00:03:56,679 --> 00:03:58,840
what we hope to implement in our cells,

64
00:03:58,840 --> 00:04:05,074
when and what have you done this shell script in the user is He's running yourself.

65
00:04:05,074 --> 00:04:09,395
Then it's okay. If user is not the root,

66
00:04:09,395 --> 00:04:14,540
then he had to say that you are not the uprise user to run the shell script.

67
00:04:14,540 --> 00:04:18,154
Please run from rude or with some Sudoku ligase.

68
00:04:18,154 --> 00:04:22,595
How can we decide that based on ID, right?

69
00:04:22,595 --> 00:04:28,130
See, what I'm doing is I'm testing if id value,

70
00:04:28,130 --> 00:04:31,954
ID of users for how we can test it.

71
00:04:31,954 --> 00:04:38,540
Test operation. Is Heidi hyphen you?

72
00:04:38,540 --> 00:04:42,304
If this value, let me do one more thing.

73
00:04:42,304 --> 00:04:45,050
I will take one variable,

74
00:04:45,050 --> 00:04:50,854
user ID equals ID, I even knew.

75
00:04:50,854 --> 00:04:57,470
Now in our variable will have a value for your user who is running shell scripts.

76
00:04:57,470 --> 00:04:59,495
Now that value, I will test it.

77
00:04:59,495 --> 00:05:02,029
So if you did you know that meaningful, that is root,

78
00:05:02,029 --> 00:05:06,755
then dollar user ID value.

79
00:05:06,755 --> 00:05:10,054
If it is equals to o, then it is fine.

80
00:05:10,054 --> 00:05:11,945
Then it is fine.

81
00:05:11,945 --> 00:05:14,210
If it is not equal to 0.

82
00:05:14,210 --> 00:05:16,939
Then so that's what I'm doing.

83
00:05:16,939 --> 00:05:20,285
You see here, if it is ID equals to o,

84
00:05:20,285 --> 00:05:24,769
just I am clubbing with the logical and operator, a goal.

85
00:05:24,769 --> 00:05:27,779
You are the root user.

86
00:05:29,250 --> 00:05:32,570
So you can run the shell script.

87
00:05:34,920 --> 00:05:38,875
This shell script. That's fine.

88
00:05:38,875 --> 00:05:41,395
I am clubbing with logical Alonzo.

89
00:05:41,395 --> 00:05:43,614
Such the idea I'm writing.

90
00:05:43,614 --> 00:05:45,324
You are not the user.

91
00:05:45,324 --> 00:05:49,239
You're not the root user who

92
00:05:49,239 --> 00:05:56,709
run this. Let's see.

93
00:05:56,709 --> 00:06:01,150
So we know whenever if you club three commands with the logical and,

94
00:06:01,150 --> 00:06:04,809
and logical or the second command will execute.

95
00:06:04,809 --> 00:06:07,060
The second command will execute if

96
00:06:07,060 --> 00:06:10,450
the foster command is success, you've kissed his success.

97
00:06:10,450 --> 00:06:13,210
You test to fail, then the command

98
00:06:13,210 --> 00:06:15,714
which we collaborate with a logical order that will execute.

99
00:06:15,714 --> 00:06:20,810
No, let me save it. Provide the what happened.

100
00:06:27,690 --> 00:06:33,710
Oh, let me call

101
00:06:36,510 --> 00:06:41,260
this is a pathway that let me come out from that.

102
00:06:41,260 --> 00:06:43,060
So somebody I've implementing,

103
00:06:43,060 --> 00:06:50,544
then we go ahead and copy this into some location, automate HTTPD actions.

104
00:06:50,544 --> 00:06:53,145
But again, I was in the OPD.

105
00:06:53,145 --> 00:06:55,730
That was for automation.

106
00:06:55,730 --> 00:07:00,239
You don't have to write some files in that location.

107
00:07:01,360 --> 00:07:05,190
Now we're copying the exact script.

108
00:07:08,260 --> 00:07:15,274
Now let me save it and run it before an English proverb execution by missions.

109
00:07:15,274 --> 00:07:20,969
And see your core.

110
00:07:21,040 --> 00:07:23,479
Now I'm running.

111
00:07:23,479 --> 00:07:26,929
You're not the root user to run the shells.

112
00:07:26,929 --> 00:07:29,314
But here, if you observe,

113
00:07:29,314 --> 00:07:32,150
if you are writing some lengthy,

114
00:07:32,150 --> 00:07:35,659
lengthy, but I don't want right in this week. Of course it is.

115
00:07:35,659 --> 00:07:38,030
But I don't want run industry.

116
00:07:38,030 --> 00:07:42,994
And because of that echo command is that you are getting output.

117
00:07:42,994 --> 00:07:46,910
You are not the root user and run the shell script.

118
00:07:46,910 --> 00:07:48,770
Yes, you're getting periorbital.

119
00:07:48,770 --> 00:07:53,989
That's way, instead of this clubbing your commands with logical and,

120
00:07:53,989 --> 00:07:55,940
and logical or I will use infants.

121
00:07:55,940 --> 00:07:59,630
We know if command one and else.

122
00:07:59,630 --> 00:08:03,840
I mean, then you can write this one and this one.

123
00:08:04,030 --> 00:08:07,909
Let me write it. If whatever you

124
00:08:07,909 --> 00:08:11,000
are having this place sd command, that is a foster command.

125
00:08:11,000 --> 00:08:13,924
So we write that here. You've got ill success.

126
00:08:13,924 --> 00:08:18,020
Then we know that the lines we thought they'd between then and else will execute.

127
00:08:18,020 --> 00:08:21,469
If that is failed, the lines which are the LSA and f I

128
00:08:21,469 --> 00:08:25,130
will exclude are simply tested success.

129
00:08:25,130 --> 00:08:27,049
Then block will execute.

130
00:08:27,049 --> 00:08:29,599
If test is fail, then we'll skip.

131
00:08:29,599 --> 00:08:33,274
An LC will exclude anyone of the block.

132
00:08:33,274 --> 00:08:38,060
Only will exclude. Fine. Now, yeah,

133
00:08:38,060 --> 00:08:40,504
let me copy and paste discipline.

134
00:08:40,504 --> 00:08:44,465
Of course you are lined this single lane logic is correct.

135
00:08:44,465 --> 00:08:46,189
But for looking for,

136
00:08:46,189 --> 00:08:47,599
but it is not good that way.

137
00:08:47,599 --> 00:08:50,629
I'm converting that into if else.

138
00:08:50,629 --> 00:08:59,584
That's fine. Let's say,

139
00:08:59,584 --> 00:09:09,635
now let me comment or let me delete this line. That's it.

140
00:09:09,635 --> 00:09:13,895
Now let me save it and run it.

141
00:09:13,895 --> 00:09:15,469
So you are not the root user.

142
00:09:15,469 --> 00:09:17,554
Two renditions, its fine.

143
00:09:17,554 --> 00:09:19,880
Now let me navigate into root.

144
00:09:19,880 --> 00:09:22,070
Now with root user.

145
00:09:22,070 --> 00:09:24,629
From root user I'm running.

146
00:09:25,750 --> 00:09:27,515
You order.

147
00:09:27,515 --> 00:09:29,854
Suppose root user. So you can then,

148
00:09:29,854 --> 00:09:31,444
if I am the root user,

149
00:09:31,444 --> 00:09:33,604
I don't want this day this information.

150
00:09:33,604 --> 00:09:39,110
My intention is to try to run your equilibri actions with root.

151
00:09:39,110 --> 00:09:40,564
If I'm the root user,

152
00:09:40,564 --> 00:09:42,169
I don't want to split this.

153
00:09:42,169 --> 00:09:43,535
If I'm not the root user,

154
00:09:43,535 --> 00:09:45,514
then only I wanted to play a pharmacy.

155
00:09:45,514 --> 00:09:49,550
Then you need here if and else.

156
00:09:49,550 --> 00:09:52,744
Now let me remove the else block.

157
00:09:52,744 --> 00:09:55,804
See guys, if this is not correct,

158
00:09:55,804 --> 00:09:57,410
then we hoped we exclude.

159
00:09:57,410 --> 00:10:01,850
But as of now, if root two user is running, this value is correct.

160
00:10:01,850 --> 00:10:04,325
If it is correct, this block will execute.

161
00:10:04,325 --> 00:10:06,890
But if it is not correct, I want to exclude this.

162
00:10:06,890 --> 00:10:11,284
That means if user ID is not equal to o,

163
00:10:11,284 --> 00:10:13,310
if not equals to 0,

164
00:10:13,310 --> 00:10:15,470
then you are, then block will execute.

165
00:10:15,470 --> 00:10:21,604
We know that that's way what I'm doing is I'm removing then and else. Now it's fine.

166
00:10:21,604 --> 00:10:24,290
If user ID is not equals to 0.

167
00:10:24,290 --> 00:10:25,519
Yes.

168
00:10:25,519 --> 00:10:27,965
You are, you are not the root user.

169
00:10:27,965 --> 00:10:29,329
This method will display.

170
00:10:29,329 --> 00:10:33,799
That's fine. Now let me save it and run it.

171
00:10:33,799 --> 00:10:37,204
I'm going to use up, it is not as linking information.

172
00:10:37,204 --> 00:10:38,270
Motif.

173
00:10:38,270 --> 00:10:40,279
I come out and if I run our shall scape,

174
00:10:40,279 --> 00:10:43,280
and I'm not a root user, you are not the rule usable.

175
00:10:43,280 --> 00:10:44,479
And they said, yes,

176
00:10:44,479 --> 00:10:48,509
we are getting perfect error messages if you are not.

177
00:10:48,550 --> 00:10:56,719
Fine. And suppose next step is if user is having any user like automation,

178
00:10:56,719 --> 00:10:58,534
if any user is having good.

179
00:10:58,534 --> 00:11:03,694
Then how you can understand, let's have three year.

180
00:11:03,694 --> 00:11:05,779
What is the value of id icon you?

181
00:11:05,779 --> 00:11:09,619
But he played around with pseudo idea for you. What is the value?

182
00:11:09,619 --> 00:11:10,865
That means?

183
00:11:10,865 --> 00:11:13,580
If this user is having good privileges, delta,

184
00:11:13,580 --> 00:11:17,329
you can use sudo in front of any command, our initial script.

185
00:11:17,329 --> 00:11:25,175
Now see that is, let's say if user is having root privileges,

186
00:11:25,175 --> 00:11:29,059
then you can then use sunscreen with too low so that inside of yourself,

187
00:11:29,059 --> 00:11:31,469
it will work with the Google.

188
00:11:31,810 --> 00:11:34,189
Now we cleared a boat.

189
00:11:34,189 --> 00:11:35,554
Very foster concept.

190
00:11:35,554 --> 00:11:39,199
That is how to run transcript with only root or root.

191
00:11:39,199 --> 00:11:42,620
Now next is if it fails concept,

192
00:11:42,620 --> 00:11:43,789
so only record here.

193
00:11:43,789 --> 00:11:49,250
If it fails, then we have one more concept called if else, if else, if else.

194
00:11:49,250 --> 00:11:54,780
Let me show you that. Anyway, I will switch into root.

195
00:11:57,670 --> 00:12:00,995
So this is our shelves can find.

196
00:12:00,995 --> 00:12:05,330
Next target is we need to automate actually pretty actions.

197
00:12:05,330 --> 00:12:09,440
Plus let me write all the commands which are there for your HTTPD.

198
00:12:09,440 --> 00:12:12,979
Islam CDL status is one command.

199
00:12:12,979 --> 00:12:18,170
Then if you want to start, same command.

200
00:12:18,170 --> 00:12:21,035
Only difference is here.

201
00:12:21,035 --> 00:12:30,649
Stuck. Then for stop here, stop.

202
00:12:30,750 --> 00:12:34,104
Then restart.

203
00:12:34,104 --> 00:12:37,580
Instead of stop-start status here, restart.

204
00:12:38,430 --> 00:12:40,329
Let's say.

205
00:12:40,329 --> 00:12:43,794
Now you filter all these four commands.

206
00:12:43,794 --> 00:12:47,169
The foster command, last word,

207
00:12:47,169 --> 00:12:48,489
post-war lost, what is same?

208
00:12:48,489 --> 00:12:49,914
The only difference is here.

209
00:12:49,914 --> 00:12:56,589
Let's say what I believe I will take one variable that is required action or user action.

210
00:12:56,589 --> 00:12:59,844
I will take one variable, user action.

211
00:12:59,844 --> 00:13:01,975
Then I will read that from the user.

212
00:13:01,975 --> 00:13:03,640
And meanwhile, learning your shell scripts,

213
00:13:03,640 --> 00:13:05,574
I will leave please enter your action.

214
00:13:05,574 --> 00:13:08,534
Then I will substitute that here.

215
00:13:08,534 --> 00:13:12,379
By using your dollar syntax we have,

216
00:13:12,379 --> 00:13:15,545
let's say, whatever the user is giving.

217
00:13:15,545 --> 00:13:18,290
Suppose if either giving start, it will start.

218
00:13:18,290 --> 00:13:24,334
Let me show you that. Now.

219
00:13:24,334 --> 00:13:27,125
If you're running with the rule, that's fine.

220
00:13:27,125 --> 00:13:32,159
After that, I am writing a logic hyphen p.

221
00:13:33,190 --> 00:13:38,669
Enter action, your action.

222
00:13:39,250 --> 00:13:42,720
For HTTPD.

223
00:13:43,480 --> 00:13:47,464
Then let me store that action.

224
00:13:47,464 --> 00:13:49,880
India variable core user action.

225
00:13:49,880 --> 00:13:52,130
Now after reading that action, yes,

226
00:13:52,130 --> 00:14:01,039
I'm reading some executing your action,

227
00:14:01,039 --> 00:14:04,880
whatever the action we are giving to manipulate this ACO just I am

228
00:14:04,880 --> 00:14:10,490
writing user action on HTTPD.

229
00:14:10,490 --> 00:14:13,920
Then after that, just simply like system CDL.

230
00:14:14,650 --> 00:14:18,605
Instead of writing start, stop, restart.

231
00:14:18,605 --> 00:14:21,244
That action is there with the user, I mean,

232
00:14:21,244 --> 00:14:24,995
David user action with able. Then which UDP?

233
00:14:24,995 --> 00:14:29,974
Let's not let me save it and run them shelter.

234
00:14:29,974 --> 00:14:36,364
So before running was to see the status first I will you they actually asked status only.

235
00:14:36,364 --> 00:14:42,330
Inactive. No, let me rerun and provide the action S star.

236
00:14:43,360 --> 00:14:45,964
Now see the output you are getting,

237
00:14:45,964 --> 00:14:49,565
executing your action, start on it.

238
00:14:49,565 --> 00:14:53,284
Now, redone and poverty status.

239
00:14:53,284 --> 00:14:54,799
So whenever you feel if you,

240
00:14:54,799 --> 00:15:00,094
you here we have given status as action and we are getting there inactive.

241
00:15:00,094 --> 00:15:02,060
Now we rerun that subscript.

242
00:15:02,060 --> 00:15:04,325
And here we provided start action.

243
00:15:04,325 --> 00:15:06,200
So now you're actually,

244
00:15:06,200 --> 00:15:07,624
but it was running because of this.

245
00:15:07,624 --> 00:15:09,829
Let me verify that by returning yourself,

246
00:15:09,829 --> 00:15:12,604
by giving status as action, nobody's running.

247
00:15:12,604 --> 00:15:14,505
That means that what?

248
00:15:14,505 --> 00:15:18,070
That's fine. No.

249
00:15:18,070 --> 00:15:21,279
Here you need to understand one simple logic.

250
00:15:21,279 --> 00:15:25,674
That is, suppose you feel are intuitively is already running.

251
00:15:25,674 --> 00:15:28,819
As up no unit-free Ripley's running.

252
00:15:29,280 --> 00:15:32,934
Status. It is running.

253
00:15:32,934 --> 00:15:35,755
But I have given command as stark.

254
00:15:35,755 --> 00:15:39,264
Nobody's saying that executing good actions taught on it.

255
00:15:39,264 --> 00:15:41,499
If it, if it is already learning,

256
00:15:41,499 --> 00:15:43,479
why should we run again?

257
00:15:43,479 --> 00:15:49,390
Same based upon if it is already stopped state and if you act as toppling skew,

258
00:15:49,390 --> 00:15:52,434
you produce already installed with state,

259
00:15:52,434 --> 00:15:54,160
then why should we stop it again?

260
00:15:54,160 --> 00:16:02,149
No nearly. So that's why I'm separating your actions in this middle.

261
00:16:05,550 --> 00:16:10,840
C yet I'm taking if condition, if statement.

262
00:16:10,840 --> 00:16:12,819
I am writing a test condition here.

263
00:16:12,819 --> 00:16:17,814
That is, if user action,

264
00:16:17,814 --> 00:16:26,470
if user action, if it is equals to strings rate,

265
00:16:26,470 --> 00:16:28,314
you have to use comparison operators.

266
00:16:28,314 --> 00:16:30,919
If it is equals to stock.

267
00:16:33,540 --> 00:16:38,139
Then then I'm closing the template.

268
00:16:38,139 --> 00:16:40,635
I'm concentrating only on stock.

269
00:16:40,635 --> 00:16:45,770
So before starting your HTTPD, I'm ticking status.

270
00:16:45,770 --> 00:16:49,400
If you remember, System CTL status,

271
00:16:49,400 --> 00:16:54,920
HTTPD, will you exit status as success if it is running?

272
00:16:54,920 --> 00:17:01,310
Let me show you this on command line systems, UDL status, HTTPD.

273
00:17:01,310 --> 00:17:03,965
After running this, see the exit status,

274
00:17:03,965 --> 00:17:06,440
such as now what I will do,

275
00:17:06,440 --> 00:17:12,950
I will club this command with logical ARE who started with HUD beauty systems?

276
00:17:12,950 --> 00:17:15,890
Udl dot HTTP.

277
00:17:15,890 --> 00:17:19,070
So whenever you use the club to command by using logical order

278
00:17:19,070 --> 00:17:22,445
of the second command will exclude if first one is.

279
00:17:22,445 --> 00:17:26,900
So when it will fail, if everybody's not running, if not running,

280
00:17:26,900 --> 00:17:29,629
then it will fail there so that it will try to execute

281
00:17:29,629 --> 00:17:33,890
second command so that we can achieve our task to start your hedge.

282
00:17:33,890 --> 00:17:36,829
But if it is already running, it will skip.

283
00:17:36,829 --> 00:17:38,255
That means we have not really learned.

284
00:17:38,255 --> 00:17:40,804
We are not trying to run that because all of the learning,

285
00:17:40,804 --> 00:17:42,454
so that is the concept.

286
00:17:42,454 --> 00:17:49,220
So that's why I'm using logical or operator inside of this if condition.

287
00:17:49,220 --> 00:17:57,829
If actually start, then I am writing this term CDL, start HTTP.

288
00:17:57,829 --> 00:18:00,514
And I don't want to display the output also.

289
00:18:00,514 --> 00:18:04,714
Then just simply, right.

290
00:18:04,714 --> 00:18:08,524
Something like, I mean,

291
00:18:08,524 --> 00:18:16,895
successor output rate greater than null. Simply.

292
00:18:16,895 --> 00:18:23,779
Let me implement the logic for stop also.

293
00:18:23,779 --> 00:18:26,669
I'm reading one more if condition separately.

294
00:18:33,580 --> 00:18:39,320
Now. If your status is running,

295
00:18:39,320 --> 00:18:41,780
then only I want to stop it.

296
00:18:41,780 --> 00:18:43,924
That means it has to combine with success.

297
00:18:43,924 --> 00:18:45,709
So when it was a success, this was the command.

298
00:18:45,709 --> 00:18:48,680
If it is running, I want to stop it left by anythings.

299
00:18:48,680 --> 00:18:50,719
Could one more command then clubbed with the logical

300
00:18:50,719 --> 00:19:00,019
and let's say I

301
00:19:00,019 --> 00:19:04,130
wanted to write one more row index just for restart.

302
00:19:04,130 --> 00:19:07,340
For status, you don't iterate anything that Italy, I mean, yeah,

303
00:19:07,340 --> 00:19:11,675
you can write some condition but no need to take any external loading.

304
00:19:11,675 --> 00:19:16,159
Let me if you are actually restart, then here also,

305
00:19:16,159 --> 00:19:18,904
you don't need to check any condition that Italy can restart it,

306
00:19:18,904 --> 00:19:21,169
see whether it is stopping running.

307
00:19:21,169 --> 00:19:24,680
That is not a problem to restart your HUD.

308
00:19:24,680 --> 00:19:29,174
No need to check any previous status. They started laughing.

309
00:19:29,174 --> 00:19:31,899
Now let me paste it for once again.

310
00:19:31,899 --> 00:19:34,340
And this is for status.

311
00:19:37,560 --> 00:19:44,484
As of now, I implemented this entire script by using only if condition.

312
00:19:44,484 --> 00:19:49,795
But here if implemented will test if condition that it is some problem.

313
00:19:49,795 --> 00:19:56,244
I will show you that I will explain that political understand status.

314
00:19:56,244 --> 00:19:59,359
Let me remove all those things.

315
00:20:02,400 --> 00:20:05,349
Now, just to point you at understanding purpose,

316
00:20:05,349 --> 00:20:10,369
I am writing one more echo command instead of each and every.

317
00:20:10,410 --> 00:20:21,220
Cool. Starting HTTPD. Just while understanding.

318
00:20:21,220 --> 00:20:25,060
But what I am writing one would understand that which if

319
00:20:25,060 --> 00:20:29,560
condition is excluding equal scalping.

320
00:20:29,560 --> 00:20:38,300
Stop, stopping HD DVD.

321
00:20:38,550 --> 00:20:44,750
Then I am writing here restarting.

322
00:20:51,840 --> 00:20:55,370
And for lost if condition.

323
00:20:56,460 --> 00:20:59,689
Finding this status.

324
00:21:01,470 --> 00:21:10,510
That's now let me save it and see what logic ones. Now I'm running.

325
00:21:10,510 --> 00:21:13,435
We are running from boot, so no problem.

326
00:21:13,435 --> 00:21:15,550
It will then enter your action.

327
00:21:15,550 --> 00:21:18,069
I'm entering action as status.

328
00:21:18,069 --> 00:21:20,470
So you will get the status. Proceed output.

329
00:21:20,470 --> 00:21:22,509
You're getting finding these thetas.

330
00:21:22,509 --> 00:21:25,465
That means last if condition is executing.

331
00:21:25,465 --> 00:21:29,349
But because you have this entire script right,

332
00:21:29,349 --> 00:21:31,344
let me copy it to my notepad.

333
00:21:31,344 --> 00:21:36,650
I will explain, I will do is you have to understand about this concept.

334
00:21:42,040 --> 00:21:45,199
This is your antilog.

335
00:21:45,199 --> 00:21:47,764
Now whenever if you run your shell script,

336
00:21:47,764 --> 00:21:49,955
it will execute line by line.

337
00:21:49,955 --> 00:21:53,135
So very first line, it will execute shebang line.

338
00:21:53,135 --> 00:21:57,634
So just you are to know by your operating system is executing by Shell.

339
00:21:57,634 --> 00:22:04,700
Just for that. Then this is the next lane to are shall will execute for finding the ID.

340
00:22:04,700 --> 00:22:07,039
Then it is testing this condition.

341
00:22:07,039 --> 00:22:11,764
If it is success, then it will skip this block because for every success,

342
00:22:11,764 --> 00:22:13,954
it will display this when it will success.

343
00:22:13,954 --> 00:22:16,279
If they are not the review that if you're the root user,

344
00:22:16,279 --> 00:22:17,524
then it will skip this.

345
00:22:17,524 --> 00:22:20,030
Because if you're the root user, this will pay.

346
00:22:20,030 --> 00:22:21,994
So that will skip this block.

347
00:22:21,994 --> 00:22:24,575
That's fine. That is what our, next,

348
00:22:24,575 --> 00:22:27,605
we're reading the value from the user, user action.

349
00:22:27,605 --> 00:22:29,764
So that is storing into user access.

350
00:22:29,764 --> 00:22:33,150
Let's say you are entering status.

351
00:22:33,250 --> 00:22:37,565
You are immediately next elastic is this action.

352
00:22:37,565 --> 00:22:38,974
I'm in this if condition.

353
00:22:38,974 --> 00:22:40,549
So user actinic status,

354
00:22:40,549 --> 00:22:44,194
but you are comparing with stock that play, it is false.

355
00:22:44,194 --> 00:22:45,620
And we do that,

356
00:22:45,620 --> 00:22:48,904
we'll skip the same way.

357
00:22:48,904 --> 00:22:51,469
Each and every if condition will execute.

358
00:22:51,469 --> 00:22:54,500
Each and every if condition will execute.

359
00:22:54,500 --> 00:22:55,579
Protest.

360
00:22:55,579 --> 00:22:59,045
Finally, the last if condition only, we get success.

361
00:22:59,045 --> 00:23:06,529
But unnecessarily, you are executing all these tasks for excluding all this stuff, right?

362
00:23:06,529 --> 00:23:08,840
Otherwise, let me take one more. Yes.

363
00:23:08,840 --> 00:23:13,309
I assume that you are giving action as stop action as stock.

364
00:23:13,309 --> 00:23:16,459
Then you're reading your action,

365
00:23:16,459 --> 00:23:18,110
you are storing that into user action.

366
00:23:18,110 --> 00:23:20,659
Then you are comparing that user action with the start node.

367
00:23:20,659 --> 00:23:22,145
It is false, that way it is.

368
00:23:22,145 --> 00:23:26,374
Then we'll skip links could this block so that you are, you've conditioned is over.

369
00:23:26,374 --> 00:23:30,529
Now here you, that action is stop and stop is equals to stop.

370
00:23:30,529 --> 00:23:32,644
It is success. If it is success,

371
00:23:32,644 --> 00:23:35,840
this if will allow to exclude these lines. That's fine.

372
00:23:35,840 --> 00:23:39,844
We got output, but you don't stop by that.

373
00:23:39,844 --> 00:23:41,540
Still we have some logic MOOC.

374
00:23:41,540 --> 00:23:43,699
It will try to combat these two values.

375
00:23:43,699 --> 00:23:47,180
Also, a value is stopped and you are comparing with restart.

376
00:23:47,180 --> 00:23:50,914
This is false. But actually you don't need to check remaining logic whenever,

377
00:23:50,914 --> 00:23:55,865
whenever if you execute it, you stop action.

378
00:23:55,865 --> 00:24:02,614
That's why whenever, if there is a dependency between immediate if conditions,

379
00:24:02,614 --> 00:24:06,394
see each and every condition, there is a dependency.

380
00:24:06,394 --> 00:24:08,824
If you observe this is executing,

381
00:24:08,824 --> 00:24:13,024
then the remaining all if condition we'll skip the hunted, they will fail.

382
00:24:13,024 --> 00:24:16,324
That means there is a dependency between immediate conditions.

383
00:24:16,324 --> 00:24:20,060
So at that time, what you have to remove this if I come

384
00:24:20,060 --> 00:24:27,350
here and right here else if then how it will work, I will tell you.

385
00:24:27,350 --> 00:24:31,039
Again, he had also remove this F8 whenever there is

386
00:24:31,039 --> 00:24:36,904
a possibility to depend if conditions on each and every one,

387
00:24:36,904 --> 00:24:42,060
I mean on each other immediately if conditions then only you can plug in this way.

388
00:24:46,120 --> 00:24:50,404
That's a non-iterative else block. You can skip.

389
00:24:50,404 --> 00:24:53,824
Now, try to understand this.

390
00:24:53,824 --> 00:24:59,330
If this action is equals to start, then this is true.

391
00:24:59,330 --> 00:25:02,254
This is true. This command will execute successfully.

392
00:25:02,254 --> 00:25:04,130
If it is success by default,

393
00:25:04,130 --> 00:25:07,589
if we skip remaining all else ifs,

394
00:25:08,110 --> 00:25:12,439
by default, it will skip remaining all else-if condition.

395
00:25:12,439 --> 00:25:15,694
That is that one day. If the very success,

396
00:25:15,694 --> 00:25:18,680
then it will take the remaining if conditions.

397
00:25:18,680 --> 00:25:22,640
That is the advantage when nobody people up with olive conditions with

398
00:25:22,640 --> 00:25:28,590
the concept of else-if No. Let me copy.

399
00:25:29,530 --> 00:25:33,620
Just to commend you are and pay logic. Otherwise I will.

400
00:25:33,620 --> 00:25:36,409
Yeah. We'll come here.

401
00:25:36,409 --> 00:25:38,719
I'm commenting out code that logic is correct,

402
00:25:38,719 --> 00:25:44,870
but unnecessarily going to take x i execution time for I am writing here, come in.

403
00:25:44,870 --> 00:25:50,489
And then let me write that last comment. Now.

404
00:25:53,410 --> 00:25:57,059
Let me copy and paste our logic.

405
00:25:59,650 --> 00:26:03,800
I will do, I will write it one more ourselves.

406
00:26:03,800 --> 00:26:10,369
And Hansel automate HTTPD actions.

407
00:26:10,369 --> 00:26:17,539
Notice which I've been faced our logic. That's perfect.

408
00:26:17,539 --> 00:26:19,955
Before that we have some coordinate.

409
00:26:19,955 --> 00:26:24,979
Let me copy it from here. Redeposit.

410
00:26:24,979 --> 00:26:27,300
Yeah, we needed this logic.

411
00:26:34,330 --> 00:26:36,890
Now let me save it.

412
00:26:36,890 --> 00:26:41,149
And probably distribution permissions for your new shell script.

413
00:26:41,149 --> 00:26:48,900
Now I'm running under the hood action datas.

414
00:26:48,970 --> 00:26:52,160
And your action will stop,

415
00:26:52,160 --> 00:26:55,760
stopping HTTPD nauseated status by returning,

416
00:26:55,760 --> 00:26:58,999
returning yourselves given by providing optional status.

417
00:26:58,999 --> 00:27:02,524
Let's say No, that's fine.

418
00:27:02,524 --> 00:27:04,924
So as we implemented our concept,

419
00:27:04,924 --> 00:27:09,484
our shell to perform, to execute actions.

420
00:27:09,484 --> 00:27:14,390
But initial scape, valid options valued actions are start,

421
00:27:14,390 --> 00:27:16,400
stop, restart, and status.

422
00:27:16,400 --> 00:27:18,184
Suppose by mistake.

423
00:27:18,184 --> 00:27:23,975
I have given in this way, then there is no output for that.

424
00:27:23,975 --> 00:27:26,944
So if you actually is not a valid one,

425
00:27:26,944 --> 00:27:32,430
then all your if conditions will get all these.

426
00:27:34,120 --> 00:27:36,184
If all failed them,

427
00:27:36,184 --> 00:27:38,300
that is no block to execute.

428
00:27:38,300 --> 00:27:41,435
Now, if all conditions are,

429
00:27:41,435 --> 00:27:43,580
all your testing conditions are free,

430
00:27:43,580 --> 00:27:48,170
then you have to write one L2 block such that it will display.

431
00:27:48,170 --> 00:27:51,320
This LSA Bloch, when the cells are bug me legs.

432
00:27:51,320 --> 00:27:53,630
Good means if all conditions are praying,

433
00:27:53,630 --> 00:27:55,805
if all the conditions are fail,

434
00:27:55,805 --> 00:27:57,515
then only this else will execute.

435
00:27:57,515 --> 00:27:59,014
This one, this one,

436
00:27:59,014 --> 00:28:01,430
this one involves failed them. This one, it looks good.

437
00:28:01,430 --> 00:28:04,264
Then we can understand when ultimately executing means

438
00:28:04,264 --> 00:28:07,174
you are not probably novalidate option val action.

439
00:28:07,174 --> 00:28:11,160
So here, multiple your shell script.

440
00:28:15,460 --> 00:28:19,144
Else, else.

441
00:28:19,144 --> 00:28:20,434
Yes, NP, right?

442
00:28:20,434 --> 00:28:25,339
Aco. Action is invalid.

443
00:28:25,339 --> 00:28:29,039
And you can say to the user,

444
00:28:29,380 --> 00:28:37,489
valid actions are our onStart,

445
00:28:37,489 --> 00:28:41,165
onRestart hot status.

446
00:28:41,165 --> 00:28:43,970
Let's now let me run it.

447
00:28:43,970 --> 00:28:46,460
Now you're providing some help to the user.

448
00:28:46,460 --> 00:28:48,379
Whenever if there is an invalid option,

449
00:28:48,379 --> 00:28:49,760
you're actually is invalid.

450
00:28:49,760 --> 00:28:55,954
Value flattens off starts kabeles or let's say, fine.

451
00:28:55,954 --> 00:28:59,075
No. One more important thing.

452
00:28:59,075 --> 00:29:02,480
If you observe, as of now we implemented our logic, right?

453
00:29:02,480 --> 00:29:04,820
What we are writing some number of lengths.

454
00:29:04,820 --> 00:29:06,304
Of course, that is correct.

455
00:29:06,304 --> 00:29:09,815
Click on it. You can use this concept that is no doubt on that.

456
00:29:09,815 --> 00:29:16,819
But let me do this only if else, if else,

457
00:29:16,819 --> 00:29:20,014
if else conditions only this lock,

458
00:29:20,014 --> 00:29:24,920
this logic, same logic you can implement in terms of his statement.

459
00:29:24,920 --> 00:29:27,740
Also, there is no difference between you and if else, if,

460
00:29:27,740 --> 00:29:31,534
else, if, else if and else statements.

461
00:29:31,534 --> 00:29:33,679
Already we know k syntax.

462
00:29:33,679 --> 00:29:35,224
What is that case?

463
00:29:35,224 --> 00:29:37,985
Whatever the variable you want to handle it with your case.

464
00:29:37,985 --> 00:29:40,429
Then our variable is user action.

465
00:29:40,429 --> 00:29:45,155
In. Then first end of it.

466
00:29:45,155 --> 00:29:51,875
That is syntax. Then what is the post option you are trying to sell the stock?

467
00:29:51,875 --> 00:29:54,125
Then simply right here.

468
00:29:54,125 --> 00:29:59,810
Host option adds incase if you're actually start whatever

469
00:29:59,810 --> 00:30:02,780
the logic inside of your pasta if

470
00:30:02,780 --> 00:30:07,369
condition that logic we would like simply inside of your cost option,

471
00:30:07,369 --> 00:30:09,780
which is there in your case statement.

472
00:30:12,430 --> 00:30:20,630
That's just I'm giving spaces for looking at the end.

473
00:30:20,630 --> 00:30:22,819
Yes, Y2 semi-colons, non-iterative here.

474
00:30:22,819 --> 00:30:26,824
You can also add in previous lane at the end, semicolon.

475
00:30:26,824 --> 00:30:30,530
Let's say. Same way for stock.

476
00:30:30,530 --> 00:30:32,030
So whatever logic you have,

477
00:30:32,030 --> 00:30:37,814
one-stop just to get those two lines and type it in your face.

478
00:30:37,814 --> 00:30:43,645
Actually, this is the best one compared to your if elseif pensive. Yes, is the best one.

479
00:30:43,645 --> 00:30:48,829
Who do you want to go with a succinctly if else, if else if,

480
00:30:50,460 --> 00:30:57,070
then restart, restart,

481
00:30:57,070 --> 00:31:03,710
whatever the logic you How is to copy that and paste it, you restart option.

482
00:31:07,320 --> 00:31:10,434
And with semi-colons.

483
00:31:10,434 --> 00:31:14,425
Instead of writing in an x lambda2 semicolon iterating the same length.

484
00:31:14,425 --> 00:31:17,080
This one line for each option.

485
00:31:17,080 --> 00:31:20,359
And last one is status.

486
00:31:25,090 --> 00:31:30,240
Let me write status

487
00:31:33,040 --> 00:31:36,889
and end with semicolon, let's say.

488
00:31:36,889 --> 00:31:38,345
So other than this,

489
00:31:38,345 --> 00:31:40,340
if any option is given by the user,

490
00:31:40,340 --> 00:31:43,010
then how you can handle in if else,

491
00:31:43,010 --> 00:31:45,129
if else, if, else block, wall,

492
00:31:45,129 --> 00:31:48,890
our ester conditions fade, then also links.

493
00:31:48,890 --> 00:31:51,755
Good. Here also we have an option called star.

494
00:31:51,755 --> 00:31:54,935
Star means exactly else options.

495
00:31:54,935 --> 00:31:58,590
Then you can say whatever the logic you have.

496
00:32:00,880 --> 00:32:04,234
So it is somewhat very easy,

497
00:32:04,234 --> 00:32:07,235
compatible if else-if condition.

498
00:32:07,235 --> 00:32:10,099
So how would we walk? First, we will read

499
00:32:10,099 --> 00:32:13,145
the user action and the case will take that value here,

500
00:32:13,145 --> 00:32:15,620
and this value will be mapped with any one of these.

501
00:32:15,620 --> 00:32:18,770
There is a match with any one of that that block will execute.

502
00:32:18,770 --> 00:32:22,520
Otherwise, if there is no match for you or input,

503
00:32:22,520 --> 00:32:25,759
then star, star means anything other than this.

504
00:32:25,759 --> 00:32:27,919
But don't write start before you were

505
00:32:27,919 --> 00:32:31,715
valid actions regarding because tar will map for anything,

506
00:32:31,715 --> 00:32:33,965
it will match for anything that way.

507
00:32:33,965 --> 00:32:36,079
Always write the star at the end only.

508
00:32:36,079 --> 00:32:37,745
Other than these four options,

509
00:32:37,745 --> 00:32:38,884
if any option is there,

510
00:32:38,884 --> 00:32:40,715
that will map this one.

511
00:32:40,715 --> 00:32:42,420
Let's say.

512
00:32:43,480 --> 00:32:54,320
Now let me write one more shell script and automate actions.

513
00:32:54,320 --> 00:32:56,009
Notice edge

514
00:33:05,890 --> 00:33:08,670
up to this.

515
00:33:25,780 --> 00:33:35,669
Say we avoid the execution permissions for this C or cold ones.

516
00:33:35,920 --> 00:33:40,219
Simply, you're validating user are not.

517
00:33:40,219 --> 00:33:41,810
Then after that you are reading the action,

518
00:33:41,810 --> 00:33:46,055
another action then that you are comparing with the case statement.

519
00:33:46,055 --> 00:33:49,249
Case will take care whatever the value you are providing that value it will

520
00:33:49,249 --> 00:33:52,204
try to match with anyone out there is a match that logic will execute,

521
00:33:52,204 --> 00:33:55,220
that block, will x do otherwise, starlings.

522
00:33:55,220 --> 00:33:57,139
Let me run.

523
00:33:57,139 --> 00:34:01,459
And Hansel script with the case statement I'm providing some invalid.

524
00:34:01,459 --> 00:34:02,989
You're actually is invalid.

525
00:34:02,989 --> 00:34:05,165
Parallax inserted is giving yes, it's working.

526
00:34:05,165 --> 00:34:06,785
Now let me rerun.

527
00:34:06,785 --> 00:34:10,984
And hence remit. I am providing status.

528
00:34:10,984 --> 00:34:14,960
It's giving plaza of know.

529
00:34:14,960 --> 00:34:17,360
Your Apache is not a medieval HTTP.

530
00:34:17,360 --> 00:34:18,635
Apache is not running.

531
00:34:18,635 --> 00:34:23,730
Let me provide start starting HUD beauty then.

532
00:34:23,740 --> 00:34:29,510
Either status by returning your shell script just to provide axonal status.

533
00:34:29,510 --> 00:34:33,320
Yes, it isn't working. That's fine.

534
00:34:33,320 --> 00:34:35,269
Now, for your shell script,

535
00:34:35,269 --> 00:34:37,730
you are providing input with help of a read command.

536
00:34:37,730 --> 00:34:39,350
I mean, while running your shell scripts,

537
00:34:39,350 --> 00:34:41,600
Sorry, often running your shell script.

538
00:34:41,600 --> 00:34:45,350
After running your shell script.

539
00:34:45,350 --> 00:34:47,149
Now you are providing your input,

540
00:34:47,149 --> 00:34:50,540
but I want to provide my input.

541
00:34:50,540 --> 00:34:52,654
While running Michele Cook itself.

542
00:34:52,654 --> 00:34:57,889
So heat itself, I want to provide my action that is called command-line argument.

543
00:34:57,889 --> 00:35:00,334
We know command-line arguments concept.

544
00:35:00,334 --> 00:35:03,889
Suppose I'm opening with the case,

545
00:35:03,889 --> 00:35:08,780
and instead of reading with 3D command in t,

546
00:35:08,780 --> 00:35:11,614
I can write user action equals $2.1.

547
00:35:11,614 --> 00:35:15,574
$1.1 means the value which we are passing from command line.

548
00:35:15,574 --> 00:35:19,804
Offer your shell script user action. Let me save it.

549
00:35:19,804 --> 00:35:26,434
Now I'm running. Then here I will provide status.

550
00:35:26,434 --> 00:35:28,655
That is the command-line argument.

551
00:35:28,655 --> 00:35:30,635
Yes, you are getting an output.

552
00:35:30,635 --> 00:35:36,894
Now let me stop stopping the HTTPD or you can find a status.

553
00:35:36,894 --> 00:35:40,434
But here, if I don't pass anything,

554
00:35:40,434 --> 00:35:42,415
you're actually is invalid.

555
00:35:42,415 --> 00:35:43,450
Well actions or start,

556
00:35:43,450 --> 00:35:45,475
stop, restart and status.

557
00:35:45,475 --> 00:35:48,879
As of now we know where Latin thoughts start, stop,

558
00:35:48,879 --> 00:35:52,119
restart so that we are providing here start or stop or restart

559
00:35:52,119 --> 00:35:55,855
operand new hotels get whenever if you're using command line arguments concept.

560
00:35:55,855 --> 00:35:58,780
But assume that you are implementing your Shellsort and you are

561
00:35:58,780 --> 00:36:01,825
giving it to some other members which are there in some other team.

562
00:36:01,825 --> 00:36:03,940
They don't know how to pass command line arguments,

563
00:36:03,940 --> 00:36:06,910
then you ought to provide help as well for them.

564
00:36:06,910 --> 00:36:13,150
So that's why just I am writing a logic to work with

565
00:36:13,150 --> 00:36:16,050
your command line arguments after

566
00:36:16,050 --> 00:36:19,969
evaluating user ID or before user ID also, you cannot do a logic.

567
00:36:19,969 --> 00:36:22,700
Now I am writing after validating user ID,

568
00:36:22,700 --> 00:36:24,890
I'm validating this week.

569
00:36:24,890 --> 00:36:27,230
Friends, we know how to calculate

570
00:36:27,230 --> 00:36:31,955
how many command-line arguments are passing to yourselves get with L profit dollar hash.

571
00:36:31,955 --> 00:36:37,970
I am checking if dollar hash value,

572
00:36:37,970 --> 00:36:41,359
square brackets, dollar hash value,

573
00:36:41,359 --> 00:36:43,565
if it is not equals to one,

574
00:36:43,565 --> 00:36:45,229
because we need at least one.

575
00:36:45,229 --> 00:36:47,089
If it is not equals to one, there is a problem.

576
00:36:47,089 --> 00:36:49,040
You are not passing any command line arguments

577
00:36:49,040 --> 00:36:51,004
or you're passing more command line argument.

578
00:36:51,004 --> 00:36:55,940
But my intention is I need exactly one in case if you are not parsing,

579
00:36:55,940 --> 00:37:00,799
parsing one command line argument at the time this will become proved,

580
00:37:00,799 --> 00:37:03,470
then I will say a call.

581
00:37:03,470 --> 00:37:06,214
Please run this shell script.

582
00:37:06,214 --> 00:37:12,334
Please run this shell script as follows.

583
00:37:12,334 --> 00:37:15,260
As what other questions you want to write.

584
00:37:15,260 --> 00:37:23,629
You can write C yet what I'm doing is I'm writing usage,

585
00:37:23,629 --> 00:37:26,279
uses of this shell script.

586
00:37:26,890 --> 00:37:30,800
Then in next line, we know dollar genome into

587
00:37:30,800 --> 00:37:34,190
your shell scripts occurring which tells you how to pass,

588
00:37:34,190 --> 00:37:43,550
either start, onStop and status.

589
00:37:43,550 --> 00:37:46,370
Close your if conditions.

590
00:37:46,370 --> 00:37:49,745
Before running your actual logic,

591
00:37:49,745 --> 00:37:52,474
you are validating whether you are passing exactly one hour mark.

592
00:37:52,474 --> 00:37:55,054
If you pass exactly one, this will become free.

593
00:37:55,054 --> 00:37:57,649
If you are not passing exactly one command line argument,

594
00:37:57,649 --> 00:38:01,685
this will become true so that your if condition will allow to exclude these lines.

595
00:38:01,685 --> 00:38:10,310
Now see that I'm running ocean scooped by adding our logic.

596
00:38:10,310 --> 00:38:13,144
And I am providing invalid options here.

597
00:38:13,144 --> 00:38:14,749
I mean, I'm not passing any options.

598
00:38:14,749 --> 00:38:16,820
First of all, that's why you are if condition is

599
00:38:16,820 --> 00:38:19,594
200 and saying that please run the shell script in this way,

600
00:38:19,594 --> 00:38:21,559
dot slash than anyone adoption.

601
00:38:21,559 --> 00:38:23,645
Then why you are running this also,

602
00:38:23,645 --> 00:38:26,675
this is actually in your case statement, lost option.

603
00:38:26,675 --> 00:38:29,660
I'm not passing any option here.

604
00:38:29,660 --> 00:38:31,669
That's why you are getting this information,

605
00:38:31,669 --> 00:38:34,339
then money to get this output, right?

606
00:38:34,339 --> 00:38:41,135
That means, that means if you are not passing any argument,

607
00:38:41,135 --> 00:38:42,739
you no need to run your shell script.

608
00:38:42,739 --> 00:38:45,664
You can stop yourself could without running this logic.

609
00:38:45,664 --> 00:38:48,934
So if you want to stop without running remaining logic,

610
00:38:48,934 --> 00:38:50,629
if you want to stop your shell script,

611
00:38:50,629 --> 00:38:52,790
you how to use exit command.

612
00:38:52,790 --> 00:38:56,854
Exit, exit is a command to exit from your shell scripts.

613
00:38:56,854 --> 00:38:58,729
So whenever, if this is true,

614
00:38:58,729 --> 00:39:00,410
means you are not passing any arguments,

615
00:39:00,410 --> 00:39:03,424
are you're passing more arguments at that time.

616
00:39:03,424 --> 00:39:05,779
I don't want to the meaning logic, I want to stop it.

617
00:39:05,779 --> 00:39:07,250
So this block will execute.

618
00:39:07,250 --> 00:39:09,859
And after the executing of this blog last you have

619
00:39:09,859 --> 00:39:13,369
an exit command so that it will stop your shell script.

620
00:39:13,369 --> 00:39:18,544
That is the logical handler command-line arguments in your shell scripts.

621
00:39:18,544 --> 00:39:22,039
Now you are not getting these last two length it previously you are

622
00:39:22,039 --> 00:39:25,895
getting the reason if you don't have exit command instead of your if command,

623
00:39:25,895 --> 00:39:31,789
which is used to handling our command line arguments that say, okay,

624
00:39:31,789 --> 00:39:35,510
I'd actually this shell scripts with this video you can

625
00:39:35,510 --> 00:39:39,959
download and you can practice that. Okay, thank you.

