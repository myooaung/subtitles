WEBVTT
ï»¿1
00:00:00.000 --> 00:00:03.135
Friends here our concept teas Test to command.

2
00:00:03.135 --> 00:00:08.280
C test is a command and it is used to judge or validate conditions.

3
00:00:08.280 --> 00:00:11.355
First, let me get the syntax of test command that is simply

4
00:00:11.355 --> 00:00:14.295
test the condition or instead of test,

5
00:00:14.295 --> 00:00:17.849
you can take single or double square braces

6
00:00:17.849 --> 00:00:20.685
are near compared to test or single square brace.

7
00:00:20.685 --> 00:00:24.810
Double square braces on the enhanced version to evaluate your condition,

8
00:00:24.810 --> 00:00:26.460
to judge your condition.

9
00:00:26.460 --> 00:00:31.545
And this syntax works with bass, K-shell jettison.

10
00:00:31.545 --> 00:00:37.905
Suppose if you want to validate your condition in p shell or shell or seashell,

11
00:00:37.905 --> 00:00:42.550
then go with the test condition or with a single square brace.

12
00:00:43.230 --> 00:00:44.950
Fine.

13
00:00:44.950 --> 00:00:48.610
Now, here we are validating or condition

14
00:00:48.610 --> 00:00:52.555
with the test to command or with a single or double square braces.

15
00:00:52.555 --> 00:00:56.590
Then what is this condition or how to create that condition to validate with

16
00:00:56.590 --> 00:01:00.610
your test to command S0 condition is like this.

17
00:01:00.610 --> 00:01:02.620
Assume that you are having two numbers.

18
00:01:02.620 --> 00:01:04.660
I want to compare those two numbers,

19
00:01:04.660 --> 00:01:06.355
like whether they are equal or not.

20
00:01:06.355 --> 00:01:08.830
Or first number is greater than the second number or

21
00:01:08.830 --> 00:01:11.755
first number is less than the second number, there is a condition.

22
00:01:11.755 --> 00:01:14.424
And here to create your condition,

23
00:01:14.424 --> 00:01:15.925
to work with your test to command,

24
00:01:15.925 --> 00:01:17.740
we have different types of operators.

25
00:01:17.740 --> 00:01:21.729
They are like comparison operators and file test operators.

26
00:01:21.729 --> 00:01:25.319
Let me go with one-by-one comparison operators.

27
00:01:25.319 --> 00:01:28.775
Again, here also we have two sets of operators.

28
00:01:28.775 --> 00:01:30.590
First cities for numbers,

29
00:01:30.590 --> 00:01:33.005
and second set is four strings.

30
00:01:33.005 --> 00:01:36.140
So these are the numbers comparison operators.

31
00:01:36.140 --> 00:01:39.275
And these are the strings comparison operators.

32
00:01:39.275 --> 00:01:40.940
Let me explain about this.

33
00:01:40.940 --> 00:01:45.290
See here, I have given a syntax by including tests the command S0,

34
00:01:45.290 --> 00:01:48.350
that square braces to square braces,

35
00:01:48.350 --> 00:01:49.835
double square braces is there.

36
00:01:49.835 --> 00:01:55.385
That means there is a test to command off the running this command with this operator.

37
00:01:55.385 --> 00:01:56.825
Observe here, iPhone E two.

38
00:01:56.825 --> 00:02:00.035
That means if these two numbers are equal,

39
00:02:00.035 --> 00:02:06.335
then this entire command will do the hidden status as 00 means true.

40
00:02:06.335 --> 00:02:08.705
In case if they are not equal,

41
00:02:08.705 --> 00:02:11.540
this entire command will do exit status or

42
00:02:11.540 --> 00:02:15.035
written status of your command as 11 means false.

43
00:02:15.035 --> 00:02:17.390
If a test is false or your test is true.

44
00:02:17.390 --> 00:02:21.860
Let me explain this on your terminal before going to work with your test to command.

45
00:02:21.860 --> 00:02:24.260
Suppose I have an ls command and I want

46
00:02:24.260 --> 00:02:27.200
to list the list of the directories and files which

47
00:02:27.200 --> 00:02:29.690
are there in these directly on

48
00:02:29.690 --> 00:02:33.260
offer that let me run echo dollar question mark, you're getting 0.

49
00:02:33.260 --> 00:02:38.990
This is the exit status of your LS command or written status of your LS command.

50
00:02:38.990 --> 00:02:43.190
You're getting 00 means your command was run successfully.

51
00:02:43.190 --> 00:02:45.410
That's why you are able to see the output here.

52
00:02:45.410 --> 00:02:47.900
Now let me run some invalid command after that,

53
00:02:47.900 --> 00:02:50.300
let me run echo dollar question mark and see the result.

54
00:02:50.300 --> 00:02:52.385
You are getting some nonzero value.

55
00:02:52.385 --> 00:02:54.320
That means your command,

56
00:02:54.320 --> 00:02:57.485
whatever the command you executed that was failed.

57
00:02:57.485 --> 00:03:02.480
That's the same concept is applicable with your test to comment as well.

58
00:03:02.480 --> 00:03:05.255
Let me test it for two numbers,

59
00:03:05.255 --> 00:03:06.905
whether they're equal or not.

60
00:03:06.905 --> 00:03:08.120
For equals to four.

61
00:03:08.120 --> 00:03:09.365
That is the condition,

62
00:03:09.365 --> 00:03:11.390
this condition we are creating,

63
00:03:11.390 --> 00:03:14.465
we are making by using Haiku UQ operator.

64
00:03:14.465 --> 00:03:17.645
So this will check whether they are equal or not.

65
00:03:17.645 --> 00:03:21.005
That condition we are testing with the test can command.

66
00:03:21.005 --> 00:03:22.625
If they're really equal,

67
00:03:22.625 --> 00:03:24.455
this test command will success.

68
00:03:24.455 --> 00:03:25.940
If they are not equal,

69
00:03:25.940 --> 00:03:27.635
your test to command will fail.

70
00:03:27.635 --> 00:03:29.630
But how we can validate that.

71
00:03:29.630 --> 00:03:31.475
So often running test to command,

72
00:03:31.475 --> 00:03:35.300
immediately, run echo dollar question mark and see the result.

73
00:03:35.300 --> 00:03:39.350
You're getting. 00 means your test towards success.

74
00:03:39.350 --> 00:03:41.525
What is your test for equals to four?

75
00:03:41.525 --> 00:03:42.545
That was success.

76
00:03:42.545 --> 00:03:43.970
Now let me check in this way.

77
00:03:43.970 --> 00:03:45.365
For equals to 43.

78
00:03:45.365 --> 00:03:49.745
No, no, see the result of Ecuador question mark nonzero one.

79
00:03:49.745 --> 00:03:53.210
So that is giving nonzero means your test was failing.

80
00:03:53.210 --> 00:03:55.355
Weight is fake because they are not equal.

81
00:03:55.355 --> 00:03:57.469
But we're trying for equality.

82
00:03:57.469 --> 00:03:58.490
That's it.

83
00:03:58.490 --> 00:04:00.635
Now, instead of test,

84
00:04:00.635 --> 00:04:05.630
you can take simply either single or double square braces.

85
00:04:05.630 --> 00:04:11.975
Now see the result of echo dollar question mark non-zero because they are not equal.

86
00:04:11.975 --> 00:04:16.280
You can also take two square braces,

87
00:04:16.280 --> 00:04:19.730
and we'll take this one because this is the enhancer version.

88
00:04:19.730 --> 00:04:21.125
That's it.

89
00:04:21.125 --> 00:04:24.695
Now, if you are having a numbers directly, we are substituting here.

90
00:04:24.695 --> 00:04:27.965
But suppose, assume that we have our numbers in variables.

91
00:04:27.965 --> 00:04:30.965
Let say x equals six and wake goes to two.

92
00:04:30.965 --> 00:04:32.615
Now I want to compare,

93
00:04:32.615 --> 00:04:34.190
is x greater than y?

94
00:04:34.190 --> 00:04:36.995
I mean, the X value is greater than y value.

95
00:04:36.995 --> 00:04:38.705
Then you have to test in this way,

96
00:04:38.705 --> 00:04:40.985
start with two square braces.

97
00:04:40.985 --> 00:04:47.725
Then dollar hyphen g t greater than o, dollar y.

98
00:04:47.725 --> 00:04:51.550
After running your test to command on our condition,

99
00:04:51.550 --> 00:04:53.755
see the echo dollar value.

100
00:04:53.755 --> 00:04:56.695
0 means yes, you are test was success.

101
00:04:56.695 --> 00:05:00.010
What is your test? You are checking x greater than y. Yes, that's true.

102
00:05:00.010 --> 00:05:01.300
That's why you are getting 0.

103
00:05:01.300 --> 00:05:04.270
Now in reverse way, offer validating your test to

104
00:05:04.270 --> 00:05:07.585
command for your condition based on this value,

105
00:05:07.585 --> 00:05:10.825
we are saying that whether this test is success or not,

106
00:05:10.825 --> 00:05:12.910
this test is success.

107
00:05:12.910 --> 00:05:15.355
If you get this question, mark a value at 0,

108
00:05:15.355 --> 00:05:17.470
and this test failed,

109
00:05:17.470 --> 00:05:21.775
if you get this doll question mark of value as non-zero R1.

110
00:05:21.775 --> 00:05:24.290
So 0 means true.

111
00:05:24.960 --> 00:05:28.995
False means one, or one means false, that's it.

112
00:05:28.995 --> 00:05:32.210
And if you observe here we have different types of operators.

113
00:05:32.210 --> 00:05:33.905
And if you observe in the last one,

114
00:05:33.905 --> 00:05:36.035
I have taken here x limit with symbol.

115
00:05:36.035 --> 00:05:40.640
So what will happen whenever if you take exclamation symbol for your condition,

116
00:05:40.640 --> 00:05:42.830
it will reverse the resonant.

117
00:05:42.830 --> 00:05:45.020
Suppose, as of now,

118
00:05:45.020 --> 00:05:47.000
if I compare x greater than y,

119
00:05:47.000 --> 00:05:49.820
you are getting result status as 0.

120
00:05:49.820 --> 00:05:53.240
But if I take x limitless symbol before your condition,

121
00:05:53.240 --> 00:05:55.850
make sure that there should be some space before

122
00:05:55.850 --> 00:06:00.515
your condition with the word exclamation symbol.

123
00:06:00.515 --> 00:06:02.900
And here also you should have some space.

124
00:06:02.900 --> 00:06:07.805
Curly braces, sorry, square braces and your excellent R3.

125
00:06:07.805 --> 00:06:10.565
Then here also space here also space.

126
00:06:10.565 --> 00:06:14.330
Now see there is a, you are getting non-zero value.

127
00:06:14.330 --> 00:06:18.455
So excellently symbol will make your result or reverse.

128
00:06:18.455 --> 00:06:20.150
That's fine.

129
00:06:20.150 --> 00:06:23.240
Same way you can compare strings also lets say my name,

130
00:06:23.240 --> 00:06:24.440
I'm digging empty string.

131
00:06:24.440 --> 00:06:27.605
I want to evaluate that whether it is empty or not through Laozi,

132
00:06:27.605 --> 00:06:31.310
then simply take hyphen side.

133
00:06:31.310 --> 00:06:33.425
You are variable value.

134
00:06:33.425 --> 00:06:35.510
Variable value is nothing but dollar.

135
00:06:35.510 --> 00:06:37.115
Your variable.

136
00:06:37.115 --> 00:06:39.920
If really you were string,

137
00:06:39.920 --> 00:06:41.675
whatever it is, they're newer variable.

138
00:06:41.675 --> 00:06:47.570
If it is having 0 length or if there are no characters for your string,

139
00:06:47.570 --> 00:06:51.695
then this will do written straight us as G0.

140
00:06:51.695 --> 00:06:54.395
0 means your string is empty.

141
00:06:54.395 --> 00:06:56.165
G 0 length string.

142
00:06:56.165 --> 00:06:58.070
Now let me take in this way,

143
00:06:58.070 --> 00:07:01.535
shell scripting I'm taking as my string.

144
00:07:01.535 --> 00:07:04.280
Now see the result I'm comparing.

145
00:07:04.280 --> 00:07:10.940
I'm validating that taste is my string is having 0 length. No.

146
00:07:10.940 --> 00:07:14.480
That's why you're going to get returns traders as non-0.

147
00:07:14.480 --> 00:07:15.900
That's it.

148
00:07:16.810 --> 00:07:21.020
Now these are comparison operators for your numbers and strings.

149
00:07:21.020 --> 00:07:25.310
Now we help come file test operators to walk with your test,

150
00:07:25.310 --> 00:07:30.470
to comment on your files that like these are the operators.

151
00:07:30.470 --> 00:07:37.685
Suppose I wanted to validate whether the given file or path is directory or not,

152
00:07:37.685 --> 00:07:39.905
then you can take hyphen D option here.

153
00:07:39.905 --> 00:07:41.435
Let me evaluate that.

154
00:07:41.435 --> 00:07:46.145
Suppose I have a here,

155
00:07:46.145 --> 00:07:48.590
Bash shell scripting nodes as a directory.

156
00:07:48.590 --> 00:07:51.350
But logical, I want to test it whether it's directly or not.

157
00:07:51.350 --> 00:07:52.775
Then simply take hyphen D,

158
00:07:52.775 --> 00:07:56.915
provide the name of your directory name, then test it.

159
00:07:56.915 --> 00:08:00.170
So how can you test after running your test with condition c,

160
00:08:00.170 --> 00:08:01.715
the value of the URL question mark.

161
00:08:01.715 --> 00:08:05.525
If it is 0, then you can say that this is the directory.

162
00:08:05.525 --> 00:08:10.565
Now let me do one thing instead of the territory I'm evaluating is the defiling.

163
00:08:10.565 --> 00:08:11.570
No.

164
00:08:11.570 --> 00:08:14.630
That's why you're going to get returned status as one.

165
00:08:14.630 --> 00:08:16.640
That means there is not a file.

166
00:08:16.640 --> 00:08:17.750
That's it.

167
00:08:17.750 --> 00:08:20.480
So likewise, Oliver files or paths,

168
00:08:20.480 --> 00:08:23.090
we have different types of operators.

169
00:08:23.090 --> 00:08:25.325
Not only this, we have some more operators.

170
00:08:25.325 --> 00:08:26.240
I will share.

171
00:08:26.240 --> 00:08:28.820
You can download that from this video.

172
00:08:28.820 --> 00:08:29.945
Okay.

173
00:08:29.945 --> 00:08:31.410
Thank you.

