1
00:00:00,000 --> 00:00:06,030
Friends here our concept is difference between dollar rate and tell a star.

2
00:00:06,030 --> 00:00:08,520
Let me explain this with a simple example.

3
00:00:08,520 --> 00:00:10,950
See basically we know dollar upgrade or

4
00:00:10,950 --> 00:00:13,680
dollar star represents all the command line arguments,

5
00:00:13,680 --> 00:00:14,880
but there is a small difference.

6
00:00:14,880 --> 00:00:17,325
Let me explain that with a simple shell script.

7
00:00:17,325 --> 00:00:25,575
So I am writing simply difference between at the rate and star dot SH.

8
00:00:25,575 --> 00:00:30,345
Let me write very simple shell script. C.

9
00:00:30,345 --> 00:00:41,140
If I directly print dollar at the rate values and echo dollar star values.

10
00:00:43,180 --> 00:00:50,900
First see the output C while learning your shell script,

11
00:00:50,900 --> 00:00:53,075
if you pass any command line arguments,

12
00:00:53,075 --> 00:00:58,055
those arguments you can fetch by using dollar or dollars start.

13
00:00:58,055 --> 00:01:00,410
Now I'm not passing anything here,

14
00:01:00,410 --> 00:01:06,035
so you are getting empty for both dollar star and for C, the script.

15
00:01:06,035 --> 00:01:11,795
Now I'm running by passing, suppose three values.

16
00:01:11,795 --> 00:01:16,340
There is no difference while displaying the output to $4 or dollar staff.

17
00:01:16,340 --> 00:01:21,200
So this difference I can explain with a simple for loop.

18
00:01:21,200 --> 00:01:24,615
Let me take for loop.

19
00:01:24,615 --> 00:01:30,085
Let me remove these two lines. Now.

20
00:01:30,085 --> 00:01:35,844
I am writing for each in dollar.

21
00:01:35,844 --> 00:01:40,030
Let me take first a star. Do.

22
00:01:40,030 --> 00:01:41,485
Then.

23
00:01:41,485 --> 00:01:45,100
So here I'm displaying echo dollar each.

24
00:01:45,100 --> 00:01:47,050
And here I am writing equal

25
00:01:47,050 --> 00:01:49,280
the willow output yz

26
00:01:52,950 --> 00:01:58,030
is for frenzy for a $2 star.

27
00:01:58,030 --> 00:02:00,610
Again, it will display the values of your dollar star.

28
00:02:00,610 --> 00:02:01,870
I mean, all command-line arguments,

29
00:02:01,870 --> 00:02:04,195
but I wanted to spend dollar star as it is.

30
00:02:04,195 --> 00:02:08,915
Then I need to escape the purpose of dollar with the slash symbol.

31
00:02:08,915 --> 00:02:12,875
Next, let me write one more for loop echo.

32
00:02:12,875 --> 00:02:15,515
The below.

33
00:02:15,515 --> 00:02:23,730
Output is $4 stock or directly.

34
00:02:24,280 --> 00:02:28,250
You can check with TO turn with the slash,

35
00:02:28,250 --> 00:02:29,660
what is the output you are getting so that you can

36
00:02:29,660 --> 00:02:32,555
understand what is the use of slash humble here.

37
00:02:32,555 --> 00:02:39,545
Now let me write one more for loop for each in dollar at the rate.

38
00:02:39,545 --> 00:02:41,510
Let me complete for loop.

39
00:02:41,510 --> 00:02:44,255
Then echo dollar each.

40
00:02:44,255 --> 00:02:48,395
Let me save it out to be probably the execution permission right?

41
00:02:48,395 --> 00:02:49,970
Now, see the code once.

42
00:02:49,970 --> 00:02:54,829
Now I'm running just to bypassing three values,

43
00:02:54,829 --> 00:02:57,815
or maybe any, any number of values to the output.

44
00:02:57,815 --> 00:03:00,830
As of now, there is no difference.

45
00:03:00,830 --> 00:03:05,240
Whenever if you use a dollar star or delta at the rate in your for loop.

46
00:03:05,240 --> 00:03:10,910
Now, suppose, you know what is the meaning whenever if

47
00:03:10,910 --> 00:03:16,370
you write any data inside of a quotation previously you are having 1234 phi arguments.

48
00:03:16,370 --> 00:03:18,320
Now you're having first argument.

49
00:03:18,320 --> 00:03:21,380
23 is entire thing is only one argument.

50
00:03:21,380 --> 00:03:24,090
Second argument, third, fourth.

51
00:03:24,090 --> 00:03:27,025
Again, there is no difference.

52
00:03:27,025 --> 00:03:32,140
Actually, our intention is we have to take them as a single argument to three,

53
00:03:32,140 --> 00:03:35,095
but either dot-dot-dot rate,

54
00:03:35,095 --> 00:03:37,450
they are not taking them either single argument.

55
00:03:37,450 --> 00:03:40,390
They are taking the splitting actually these data that are

56
00:03:40,390 --> 00:03:44,575
concerning again, 12345 arguments.

57
00:03:44,575 --> 00:03:50,560
That way, generally, we will take quotations for you or does

58
00:03:50,560 --> 00:03:56,725
star or dollar at the rate that we take dollar star quotations.

59
00:03:56,725 --> 00:04:00,190
Now you'll come to know the difference between star

60
00:04:00,190 --> 00:04:07,020
and now I'm running our shell script just by passing.

61
00:04:07,020 --> 00:04:08,930
Without quotations. I mean,

62
00:04:08,930 --> 00:04:11,735
I'm passing phi command line arguments seed output.

63
00:04:11,735 --> 00:04:14,510
Because of dollar star,

64
00:04:14,510 --> 00:04:18,200
the tool we are using quotations for dollar star.

65
00:04:18,200 --> 00:04:22,370
Whenever if you write quotations for your dollar star in your for loop,

66
00:04:22,370 --> 00:04:25,545
it will consider the entire Phi arguments are

67
00:04:25,545 --> 00:04:29,195
a single value that we are getting all values in one line.

68
00:04:29,195 --> 00:04:31,175
Now for dollar star,

69
00:04:31,175 --> 00:04:33,365
if you take quotations in your for loop,

70
00:04:33,365 --> 00:04:36,050
then this N tied all phi command-line arguments.

71
00:04:36,050 --> 00:04:39,799
We built digital as a one command line argument.

72
00:04:39,799 --> 00:04:42,590
But if you observe here,

73
00:04:42,590 --> 00:04:45,770
you are getting output for your double-dot data with quotations,

74
00:04:45,770 --> 00:04:47,375
your data as these,

75
00:04:47,375 --> 00:04:51,470
1-2-3-4-5, that it can swing phi arguments only.

76
00:04:51,470 --> 00:04:55,175
Now, once again, see you are core.

77
00:04:55,175 --> 00:04:58,470
I'm running in this way first.

78
00:04:58,630 --> 00:05:02,075
Now I am providing our data.

79
00:05:02,075 --> 00:05:04,175
I mean, 203.

80
00:05:04,175 --> 00:05:06,005
I'm considering it as a one argument only.

81
00:05:06,005 --> 00:05:07,565
Actually that is my intention.

82
00:05:07,565 --> 00:05:12,320
But Dallas star, whether you provide quotations or without quotations,

83
00:05:12,320 --> 00:05:16,639
whenever if you take quotations for your star,

84
00:05:16,639 --> 00:05:21,245
it will consider you're all command line arguments and a single argument.

85
00:05:21,245 --> 00:05:23,150
But dollar at the rate,

86
00:05:23,150 --> 00:05:25,310
it will work perfectly whenever if you take

87
00:05:25,310 --> 00:05:28,115
quotations for your dollar upgrading quotations.

88
00:05:28,115 --> 00:05:30,845
First argument that we are getting one output.

89
00:05:30,845 --> 00:05:34,235
This entire thing is a second argument because we heard it instead of a quotation,

90
00:05:34,235 --> 00:05:35,990
yes, second value, you are getting that.

91
00:05:35,990 --> 00:05:38,270
Third, fourth, that's it.

92
00:05:38,270 --> 00:05:39,530
Right?

93
00:05:39,530 --> 00:05:41,780
So from now onwards, whenever,

94
00:05:41,780 --> 00:05:44,855
if you want to work with command line arguments,

95
00:05:44,855 --> 00:05:49,580
then please use quotations dollar at the rate.

96
00:05:49,580 --> 00:05:52,985
The syntax we just follow in your for loop.

97
00:05:52,985 --> 00:05:54,245
Okay?

98
00:05:54,245 --> 00:05:58,145
And whenever if you want to take all command line arguments as a single value,

99
00:05:58,145 --> 00:06:00,350
single command line argument, US dollars.

100
00:06:00,350 --> 00:06:05,285
That's it. That is the small difference between a dollar at the rate N star.

101
00:06:05,285 --> 00:06:07,380
Okay, thank you.

