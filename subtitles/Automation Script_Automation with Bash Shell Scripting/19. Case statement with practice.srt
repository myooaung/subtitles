1
00:00:01,280 --> 00:00:04,890
Friends here our concept is case statement.

2
00:00:04,890 --> 00:00:09,030
See this case statement is very useful to design some menu-driven scripts.

3
00:00:09,030 --> 00:00:12,645
First, let me show you the syntax of your kids statement.

4
00:00:12,645 --> 00:00:15,615
These are simple syntax of your case statement.

5
00:00:15,615 --> 00:00:17,250
So if you observe here,

6
00:00:17,250 --> 00:00:19,365
here we are starting the case.

7
00:00:19,365 --> 00:00:22,440
Under here we are closing the case statement.

8
00:00:22,440 --> 00:00:24,240
And there is some variable.

9
00:00:24,240 --> 00:00:27,300
Suppose you are giving this variable from input side

10
00:00:27,300 --> 00:00:30,600
or somewhere from the output you are getting somewhere in your core.

11
00:00:30,600 --> 00:00:33,705
And we have here different options here.

12
00:00:33,705 --> 00:00:35,895
Be clear on that.

13
00:00:35,895 --> 00:00:40,050
Suppose if this value mapply with this one,

14
00:00:40,050 --> 00:00:44,555
then these lines will statements means number of lens you can write.

15
00:00:44,555 --> 00:00:46,505
And at the end of all the lines.

16
00:00:46,505 --> 00:00:49,475
Lastly, hot right to semi-colons from each and I'm in,

17
00:00:49,475 --> 00:00:51,155
in each and every option.

18
00:00:51,155 --> 00:00:53,840
So simply, if you are,

19
00:00:53,840 --> 00:00:55,189
this is a variable.

20
00:00:55,189 --> 00:00:57,290
You may provide it from input side,

21
00:00:57,290 --> 00:01:02,660
or maybe you are getting from because of some logic inside of your code itself.

22
00:01:02,660 --> 00:01:05,765
If this value mapply with this one,

23
00:01:05,765 --> 00:01:07,100
if these two are equal,

24
00:01:07,100 --> 00:01:09,650
then this logic will exclude.

25
00:01:09,650 --> 00:01:11,870
Suppose there is no match with

26
00:01:11,870 --> 00:01:14,705
the very first option then will compare with the second one.

27
00:01:14,705 --> 00:01:18,350
If there is a match with the URL option and this option two,

28
00:01:18,350 --> 00:01:21,635
if both are equal, then this logic will execute.

29
00:01:21,635 --> 00:01:25,535
And remember that suppose if very first option is executing,

30
00:01:25,535 --> 00:01:27,680
then remaining all will skip.

31
00:01:27,680 --> 00:01:29,990
Suppose if there is no match with

32
00:01:29,990 --> 00:01:32,285
the first option and there is a match with second option,

33
00:01:32,285 --> 00:01:34,310
then these seeds anyway,

34
00:01:34,310 --> 00:01:37,055
it is not going to exclude and remaining Minsky.

35
00:01:37,055 --> 00:01:39,965
So in that way you are case statement will work.

36
00:01:39,965 --> 00:01:42,890
Let me explain this with a simple example

37
00:01:42,890 --> 00:01:45,800
so that you can understand the uses of your case.

38
00:01:45,800 --> 00:01:48,710
Suppose I want to design a simple calculator.

39
00:01:48,710 --> 00:01:53,165
Let me design that simple calculator dot SH.

40
00:01:53,165 --> 00:01:57,065
I am writing the very first line as user bin bash.

41
00:01:57,065 --> 00:01:58,850
I want to read two numbers.

42
00:01:58,850 --> 00:02:04,385
Let's say the very first number is I'm taking enter num one.

43
00:02:04,385 --> 00:02:05,825
We can take anything.

44
00:02:05,825 --> 00:02:10,280
I mean, you can print anything and I'm storing that in the variable called a.

45
00:02:10,280 --> 00:02:15,980
Then read iPhone P, enter num two.

46
00:02:15,980 --> 00:02:20,240
Then I want to store that into a variable called be.

47
00:02:20,240 --> 00:02:21,260
Fine.

48
00:02:21,260 --> 00:02:24,410
The next thing, actually my intention, nice,

49
00:02:24,410 --> 00:02:26,420
I need to find either addition or subtraction

50
00:02:26,420 --> 00:02:29,150
or multiplication or division or something like that.

51
00:02:29,150 --> 00:02:33,695
But I don't know what user required.

52
00:02:33,695 --> 00:02:35,765
Suppose if user requires addition,

53
00:02:35,765 --> 00:02:41,375
then I will take that with as options.

54
00:02:41,375 --> 00:02:45,625
See that I'm writing one more 3D command. Entry.

55
00:02:45,625 --> 00:02:51,560
What option? And here I am giving optional suppose

56
00:02:51,560 --> 00:02:58,940
one for addition to FOR subtraction.

57
00:02:58,940 --> 00:03:03,710
Then I'm giving three for multiplication.

58
00:03:03,710 --> 00:03:06,590
You can also design this in a different way.

59
00:03:06,590 --> 00:03:11,405
I will show you that. Then for four suppose division.

60
00:03:11,405 --> 00:03:13,490
That's it.

61
00:03:13,490 --> 00:03:18,200
Now whatever the user is entering that I am taking as a variable call option,

62
00:03:18,200 --> 00:03:20,300
not only option, you can take anything.

63
00:03:20,300 --> 00:03:22,400
Userinput requests something like that.

64
00:03:22,400 --> 00:03:24,620
You can take, I'm taking variable as option.

65
00:03:24,620 --> 00:03:26,765
Now let me read a case statement.

66
00:03:26,765 --> 00:03:29,435
So whenever if you start a case statement,

67
00:03:29,435 --> 00:03:32,540
you have to under with a reverse character of your case studies,

68
00:03:32,540 --> 00:03:36,515
ESC is C. Then here based on R2,

69
00:03:36,515 --> 00:03:37,940
based on user option,

70
00:03:37,940 --> 00:03:40,160
you have to execute some logic that way here,

71
00:03:40,160 --> 00:03:43,355
just select option in.

72
00:03:43,355 --> 00:03:45,350
Then let me write,

73
00:03:45,350 --> 00:03:47,000
suppose because why I am writing here,

74
00:03:47,000 --> 00:03:51,590
one means you are valid options for the user is either one or two, or three or four.

75
00:03:51,590 --> 00:03:53,930
That's why just right here, 1234.

76
00:03:53,930 --> 00:03:58,865
Then if the user enters one than just I am writing in this way,

77
00:03:58,865 --> 00:04:04,355
Ico, you selected addition.

78
00:04:04,355 --> 00:04:07,340
So I am writing one more, one more line.

79
00:04:07,340 --> 00:04:13,850
The addition of a and b is,

80
00:04:13,850 --> 00:04:15,440
guys, we know how to perform

81
00:04:15,440 --> 00:04:19,640
simply integer arithmetic operations with parenthesis, right?

82
00:04:19,640 --> 00:04:22,355
Simply I am writing a plus B, let's say.

83
00:04:22,355 --> 00:04:23,675
So.

84
00:04:23,675 --> 00:04:25,670
Yeah, one more parenthesis.

85
00:04:25,670 --> 00:04:28,205
See whenever if the user enters one,

86
00:04:28,205 --> 00:04:30,860
then case will take action based on that.

87
00:04:30,860 --> 00:04:34,415
So this is one because user enters 1.8em storing into one.

88
00:04:34,415 --> 00:04:36,335
I mean, OPT that won't be DBS.

89
00:04:36,335 --> 00:04:39,170
Substrate in dollar OBD means one. So this is one.

90
00:04:39,170 --> 00:04:40,760
That's why inside of this case,

91
00:04:40,760 --> 00:04:45,375
wherever one mapping is that that logic will execute.

92
00:04:45,375 --> 00:04:48,370
And under these are the last line

93
00:04:48,370 --> 00:04:51,205
you had to write always to semi-colons, but is the syntax.

94
00:04:51,205 --> 00:04:55,900
Then user may interest to also because we are giving options 1234.

95
00:04:55,900 --> 00:05:00,830
Then I can write a code you selected.

96
00:05:01,500 --> 00:05:03,925
So you can add any number of lengths.

97
00:05:03,925 --> 00:05:05,830
That's why just I am writing two eco statements,

98
00:05:05,830 --> 00:05:08,500
not only a Coke, any logic you can write here.

99
00:05:08,500 --> 00:05:13,210
You selected subtraction. That's it.

100
00:05:13,210 --> 00:05:18,430
Then let me write the subtraction of Nala 3a.

101
00:05:18,430 --> 00:05:20,140
And dollar b means yes,

102
00:05:20,140 --> 00:05:24,325
and B is dollar to parenthesis E minus b.

103
00:05:24,325 --> 00:05:25,270
That's it.

104
00:05:25,270 --> 00:05:27,945
So at the end, just right to semi-colons,

105
00:05:27,945 --> 00:05:30,050
user may enter three also,

106
00:05:30,050 --> 00:05:32,975
because we are giving us options up to four.

107
00:05:32,975 --> 00:05:37,565
So you've selected multiplication, touch it,

108
00:05:37,565 --> 00:05:44,255
echo the multiplication of dollar 3A and B

109
00:05:44,255 --> 00:05:54,350
is going to be then ending with two semi-colons, then fourth option.

110
00:05:54,350 --> 00:06:00,020
So here I am writing echo you selected division,

111
00:06:00,020 --> 00:06:03,665
then echo the division of,

112
00:06:03,665 --> 00:06:10,070
let me take dollar aa width b, e.

113
00:06:10,070 --> 00:06:12,320
Yet division width B.

114
00:06:12,320 --> 00:06:13,730
That's it.

115
00:06:13,730 --> 00:06:17,960
Suppose by mistake if user enters are then 1234,

116
00:06:17,960 --> 00:06:20,330
then I want to display something like invalid option.

117
00:06:20,330 --> 00:06:25,250
So invalid option always is like with the stock or default option.

118
00:06:25,250 --> 00:06:33,870
A co, you selected invalid option, that's it.

119
00:06:34,660 --> 00:06:37,400
So now before executing your code,

120
00:06:37,400 --> 00:06:40,025
just try to understand how your case will work

121
00:06:40,025 --> 00:06:44,150
anymore faster to read statement just to read every a and b values.

122
00:06:44,150 --> 00:06:47,075
Then third, we are giving some information to the user.

123
00:06:47,075 --> 00:06:49,430
In third statement that is, one for addition,

124
00:06:49,430 --> 00:06:52,415
two for subtraction, three for multiplication or division.

125
00:06:52,415 --> 00:06:56,555
Just imagine that user is entering for this line

126
00:06:56,555 --> 00:07:00,800
to two means two will store in into this variable called OPT,

127
00:07:00,800 --> 00:07:03,350
then that we are substituting in our case statement.

128
00:07:03,350 --> 00:07:07,685
So net then dollar OBD means two for two varies the mapping here.

129
00:07:07,685 --> 00:07:10,175
So this logic will exclude that's it.

130
00:07:10,175 --> 00:07:13,835
So once it is executed remaining all will skip.

131
00:07:13,835 --> 00:07:16,400
Suppose if user enters ten,

132
00:07:16,400 --> 00:07:19,625
then this value is $10, OPT is ten.

133
00:07:19,625 --> 00:07:20,855
Is there any match with ten?

134
00:07:20,855 --> 00:07:22,025
No, no.

135
00:07:22,025 --> 00:07:25,130
If there is no map with you or given value,

136
00:07:25,130 --> 00:07:26,555
then star will execute.

137
00:07:26,555 --> 00:07:28,430
Star means actually all.

138
00:07:28,430 --> 00:07:30,965
If there is no match with all four,

139
00:07:30,965 --> 00:07:32,525
are whatever the offense you are having,

140
00:07:32,525 --> 00:07:34,250
then by default star will execute.

141
00:07:34,250 --> 00:07:37,790
That's it. Now let me run

142
00:07:37,790 --> 00:07:42,875
simply by providing execution permissions for your shell script.

143
00:07:42,875 --> 00:07:46,535
I'm entering number for number six.

144
00:07:46,535 --> 00:07:47,945
Then I wanted to find the addition.

145
00:07:47,945 --> 00:07:50,600
Then just provide one. You are getting the result.

146
00:07:50,600 --> 00:07:56,390
Let me rerun and provide numbers and I'm giving invalid option called nine.

147
00:07:56,390 --> 00:08:04,820
So in that way your case will work fine.

148
00:08:04,820 --> 00:08:05,750
Right?

149
00:08:05,750 --> 00:08:07,490
So based engine operating in this way,

150
00:08:07,490 --> 00:08:10,145
if you want to decorate here,

151
00:08:10,145 --> 00:08:12,020
you can write in this way also.

152
00:08:12,020 --> 00:08:15,230
You can able to understand that just to follow this,

153
00:08:15,230 --> 00:08:17,615
let me comment this line first.

154
00:08:17,615 --> 00:08:20,120
So just for decorating your own,

155
00:08:20,120 --> 00:08:22,620
put them. So I am writing.

156
00:08:23,680 --> 00:08:33,720
I will write whatever the way you can design for calculator.

157
00:08:33,760 --> 00:08:37,140
Just I'm decorating notebook.

158
00:08:38,440 --> 00:08:45,540
Select. Otherwise I would do on day one.

159
00:08:46,600 --> 00:08:56,250
Addition, subtraction,

160
00:08:57,250 --> 00:09:00,360
multiplication.

161
00:09:01,060 --> 00:09:11,795
It just your interest and how you're going to design your own ICO for division.

162
00:09:11,795 --> 00:09:14,915
Then here I can write, read Ivan p.

163
00:09:14,915 --> 00:09:24,810
Please select your option from above.

164
00:09:26,980 --> 00:09:29,150
Then take OPT.

165
00:09:29,150 --> 00:09:31,685
So here also, if you wander degrade once again,

166
00:09:31,685 --> 00:09:34,050
you just write in this way.

167
00:09:35,530 --> 00:09:39,605
Now let me save this and run it.

168
00:09:39,605 --> 00:09:44,765
See the output for phi option to subtraction.

169
00:09:44,765 --> 00:09:46,400
Yes, you are getting.

170
00:09:46,400 --> 00:09:48,425
Now c.

171
00:09:48,425 --> 00:09:53,000
Suppose we are opening our core and we are running, while running your code.

172
00:09:53,000 --> 00:09:55,100
If you want to clear your screen,

173
00:09:55,100 --> 00:09:57,410
then when he first a command,

174
00:09:57,410 --> 00:10:00,185
just write C LAR,

175
00:10:00,185 --> 00:10:02,255
you know the purpose of CALEA or command.

176
00:10:02,255 --> 00:10:05,840
So the very first line I'm writing CLEA, clear screen.

177
00:10:05,840 --> 00:10:09,290
See that while running your code he was clean, will be cleared.

178
00:10:09,290 --> 00:10:16,470
That's it. So now for some cap hash that is invalid options you output.

179
00:10:19,900 --> 00:10:23,600
That's it. It's working fine.

180
00:10:23,600 --> 00:10:26,134
So now you can understand the syntax.

181
00:10:26,134 --> 00:10:32,315
So this option may be from the input or maybe why writing some realtime scripts,

182
00:10:32,315 --> 00:10:33,575
you will get that option.

183
00:10:33,575 --> 00:10:35,195
Because of some logic,

184
00:10:35,195 --> 00:10:39,140
because of some output that output we will use instead of k statement.

185
00:10:39,140 --> 00:10:44,599
And here, instead of writing stride forward options like 123,

186
00:10:44,599 --> 00:10:46,025
you can also write some patterns.

187
00:10:46,025 --> 00:10:49,115
We know from our grep command how to design a pattern.

188
00:10:49,115 --> 00:10:52,550
Let me write a very simple script just to understand that how to write a pattern

189
00:10:52,550 --> 00:10:57,245
in your pattern for case.

190
00:10:57,245 --> 00:10:59,550
Sh.

191
00:11:01,210 --> 00:11:03,590
As I've not, don't worry about this.

192
00:11:03,590 --> 00:11:08,225
And we will use that in our while implementing some real transcripts.

193
00:11:08,225 --> 00:11:14,640
Just I am writing real-life and P enter any number.

194
00:11:15,370 --> 00:11:22,505
Just I am taking num case dollar num in.

195
00:11:22,505 --> 00:11:25,145
Let me close first your case statement.

196
00:11:25,145 --> 00:11:27,980
At last ROA, you'll forget out too close.

197
00:11:27,980 --> 00:11:31,115
You were kinda sway just while starting lowercase.

198
00:11:31,115 --> 00:11:33,095
Please close that. Then.

199
00:11:33,095 --> 00:11:38,000
Suppose my number may be any number between 0 to nine.

200
00:11:38,000 --> 00:11:39,230
If it is single digit,

201
00:11:39,230 --> 00:11:43,430
I can write in this way any number between 0 to nine.

202
00:11:43,430 --> 00:11:45,620
Then I can write a goal.

203
00:11:45,620 --> 00:11:52,460
You entered number.

204
00:11:52,460 --> 00:11:55,880
Let's suppose if I

205
00:11:55,880 --> 00:12:04,400
enter anything,

206
00:12:04,400 --> 00:12:08,300
alphabet, small letters a to z,

207
00:12:08,300 --> 00:12:13,445
then I can say echo.

208
00:12:13,445 --> 00:12:22,235
You entered lowercase r small letters, lower-case alphabet.

209
00:12:22,235 --> 00:12:24,060
That's it.

210
00:12:24,060 --> 00:12:25,645
Maybe you may enter.

211
00:12:25,645 --> 00:12:33,190
Just assume that here our intention is how to write a pattern to select your options.

212
00:12:33,190 --> 00:12:40,360
Suppose you, if you enter some capital letters, then echo.

213
00:12:40,360 --> 00:12:49,465
You entered uppercase, all 4-bits. Let say.

214
00:12:49,465 --> 00:12:52,255
Suppose if you enter any two digits letter,

215
00:12:52,255 --> 00:12:55,675
I'm in two digits number or two-digit letter or any other thing.

216
00:12:55,675 --> 00:12:58,555
I don't know how to handle that. Then simply write.

217
00:12:58,555 --> 00:13:02,440
As per my logic, echo invalid option,

218
00:13:02,440 --> 00:13:11,720
unable to find, unable to identify your input, something like that.

219
00:13:11,720 --> 00:13:17,640
Let me provide the execution permissions.

220
00:13:21,910 --> 00:13:24,515
Now run your core.

221
00:13:24,515 --> 00:13:26,945
I suppose number two.

222
00:13:26,945 --> 00:13:30,995
What happens syntax near unexpected token.

223
00:13:30,995 --> 00:13:33,750
Let me open that.

224
00:13:40,300 --> 00:13:42,590
Oh sorry.

225
00:13:42,590 --> 00:13:45,600
Are taken here parenthesis.

226
00:13:48,970 --> 00:13:51,935
Now let me run your code.

227
00:13:51,935 --> 00:13:57,050
I'm entering number to see that you enter a single number.

228
00:13:57,050 --> 00:14:00,050
A single muttered maybe now I'm entering,

229
00:14:00,050 --> 00:14:04,685
suppose you, now I'm running an entering capital B.

230
00:14:04,685 --> 00:14:07,220
Now I'm running an amp routing something.

231
00:14:07,220 --> 00:14:09,530
So unable to identify your input.

232
00:14:09,530 --> 00:14:10,400
That's it.

233
00:14:10,400 --> 00:14:12,050
Ok, so here's the,

234
00:14:12,050 --> 00:14:14,585
here's the way how we can write a pattern.

235
00:14:14,585 --> 00:14:16,670
So if you underwrite this pattern,

236
00:14:16,670 --> 00:14:19,655
you have to know the rules to create your pattern,

237
00:14:19,655 --> 00:14:22,220
which we already discussed in our Grip command.

238
00:14:22,220 --> 00:14:26,850
Please go through that. Okay, thank you.

