WEBVTT
ï»¿1
00:00:01.400 --> 00:00:03.090
Hi friends.

2
00:00:03.090 --> 00:00:07.485
In this video, we are going to see how to read variables for

3
00:00:07.485 --> 00:00:12.120
a public key using shells tip with the 3D command C. In

4
00:00:12.120 --> 00:00:17.010
our previous videos already we have seen how to read variables for

5
00:00:17.010 --> 00:00:22.125
your AW k only in your AWPA scripts, right?

6
00:00:22.125 --> 00:00:27.405
But again, my intention is I am including AWPA inside of my shell script,

7
00:00:27.405 --> 00:00:31.690
but I need some variables for my AWPA while running my script.

8
00:00:31.690 --> 00:00:32.585
Right?

9
00:00:32.585 --> 00:00:34.610
So you already, we have seen like this.

10
00:00:34.610 --> 00:00:40.190
So suppose if you want to eat or read some variables for your AWPA, right?

11
00:00:40.190 --> 00:00:44.390
You're using something like echo, right?

12
00:00:44.390 --> 00:00:47.990
Some, let's say three and phi.

13
00:00:47.990 --> 00:00:53.930
Then a WK, Right?

14
00:00:53.930 --> 00:00:59.120
And here we are taking only action that ECA goes to,

15
00:00:59.120 --> 00:01:07.400
let's say $1.1 because Foster value I want to assign for J and B equals $2.2.

16
00:01:07.400 --> 00:01:08.450
Right?

17
00:01:08.450 --> 00:01:12.170
Then we are printing a and b values in this way.

18
00:01:12.170 --> 00:01:18.335
It's working. Now my intention is I want to read two values, right?

19
00:01:18.335 --> 00:01:22.115
Then I want to assign those two values to my AWPA script.

20
00:01:22.115 --> 00:01:24.800
I mean my Arabic I command inside of my shell script.

21
00:01:24.800 --> 00:01:29.840
First, let me write simple shell script just to read two variable values, right?

22
00:01:29.840 --> 00:01:33.425
Read values, not as such.

23
00:01:33.425 --> 00:01:35.615
Let me write simple shell script.

24
00:01:35.615 --> 00:01:39.065
When bash raid iPhone P,

25
00:01:39.065 --> 00:01:42.470
enter a value, right?

26
00:01:42.470 --> 00:01:45.695
I am taking that as BA and read hyphen p.

27
00:01:45.695 --> 00:01:48.020
Suppose enter V value,

28
00:01:48.020 --> 00:01:50.180
and I'm making this for B.

29
00:01:50.180 --> 00:01:51.125
Right?

30
00:01:51.125 --> 00:01:53.645
Now let me display echo,

31
00:01:53.645 --> 00:01:57.840
dollar Yay, and dollar v0.

32
00:01:59.410 --> 00:02:01.175
Right?

33
00:02:01.175 --> 00:02:02.900
So let me run this.

34
00:02:02.900 --> 00:02:08.840
Let me give you the change more execution permission.

35
00:02:08.840 --> 00:02:10.850
I want to do this, right?

36
00:02:10.850 --> 00:02:15.875
Then let me run this k value for supposedly value some number one.

37
00:02:15.875 --> 00:02:17.825
Yes, you are able to display this.

38
00:02:17.825 --> 00:02:20.359
Now, whatever the values you are reading.

39
00:02:20.359 --> 00:02:23.270
Yeah, and b, I want to assign them for

40
00:02:23.270 --> 00:02:27.110
my credibly K command inside of your shell scripts, right?

41
00:02:27.110 --> 00:02:28.280
Nothing is there already,

42
00:02:28.280 --> 00:02:30.065
you know, echo by,

43
00:02:30.065 --> 00:02:34.190
just use this a WK, Right?

44
00:02:34.190 --> 00:02:38.585
So because you are providing input with the help of a ego command.

45
00:02:38.585 --> 00:02:40.940
So whenever you've got providing input for your end obligate,

46
00:02:40.940 --> 00:02:44.675
you should have your actual action block, but isn't middle block.

47
00:02:44.675 --> 00:02:47.705
The, let me take suppose x equals $2.1,

48
00:02:47.705 --> 00:02:50.750
that is nothing but J value you are assigning to edX

49
00:02:50.750 --> 00:02:54.605
or here also we can take same variables. Let stay.

50
00:02:54.605 --> 00:02:57.725
Let me take a coastal $1.1 latrines.

51
00:02:57.725 --> 00:02:59.855
$1.1 value is nothing but yea value,

52
00:02:59.855 --> 00:03:02.315
that value you are assigning inside of your aid.

53
00:03:02.315 --> 00:03:06.500
Awpa has one variable called a and now this year is different and this a is different.

54
00:03:06.500 --> 00:03:08.120
But just to avoid confusion,

55
00:03:08.120 --> 00:03:09.605
I'm taking different variable.

56
00:03:09.605 --> 00:03:12.240
Let me take as yes.

57
00:03:12.700 --> 00:03:14.210
Right?

58
00:03:14.210 --> 00:03:16.880
And Y equals $2.2.

59
00:03:16.880 --> 00:03:20.825
Now I am going to print a equals to,

60
00:03:20.825 --> 00:03:24.950
sorry, x equals two in terms of your AWPA variable is X.

61
00:03:24.950 --> 00:03:27.080
X equals two.

62
00:03:27.080 --> 00:03:30.275
Then here, your X,

63
00:03:30.275 --> 00:03:36.185
then Y equals two. You are white.

64
00:03:36.185 --> 00:03:37.610
That's it.

65
00:03:37.610 --> 00:03:41.450
So now you are reading variable values with L PAF 3D command on your

66
00:03:41.450 --> 00:03:45.410
providing that input for your AWPA command inside of your AWR,

67
00:03:45.410 --> 00:03:47.570
taking x and y variables, right?

68
00:03:47.570 --> 00:03:52.460
Let me save this and run it and see the output 23.

69
00:03:52.460 --> 00:03:54.245
Yes, you're able to get.

70
00:03:54.245 --> 00:03:57.440
Now, suppose you are taking even inside of

71
00:03:57.440 --> 00:04:00.830
EAWAG also some same variables as year and VGS.

72
00:04:00.830 --> 00:04:02.135
You can take it, no problem.

73
00:04:02.135 --> 00:04:06.990
Let me take this is Yay, and this is b.

74
00:04:07.330 --> 00:04:10.640
And make sure that inside of here, WK,

75
00:04:10.640 --> 00:04:15.990
whatever you are having variables there are different from your shell script.

76
00:04:16.000 --> 00:04:21.305
Now this a and b values are completely different from the CIA and b.

77
00:04:21.305 --> 00:04:23.240
There is no dependency between those two.

78
00:04:23.240 --> 00:04:28.250
Just we are assigning values to but would take 102.

79
00:04:28.250 --> 00:04:30.380
Yes, you're able to get it.

80
00:04:30.380 --> 00:04:31.595
Right.

81
00:04:31.595 --> 00:04:34.055
So guys, now here,

82
00:04:34.055 --> 00:04:36.720
what is the advantage by doing in this way?

83
00:04:36.760 --> 00:04:39.725
What is the advantage by doing it this way?

84
00:04:39.725 --> 00:04:46.160
Suppose guys, if you don't know how you are BC calculator on your host, right?

85
00:04:46.160 --> 00:04:48.830
Then you cannot perform addition or subtraction

86
00:04:48.830 --> 00:04:51.980
or I'm in arithmetic operations for your afloat points.

87
00:04:51.980 --> 00:04:55.745
Now using this syntax, right?

88
00:04:55.745 --> 00:04:58.440
Let me, What is our,

89
00:04:59.590 --> 00:05:05.120
sorry, our script VI, read values right?

90
00:05:05.120 --> 00:05:06.950
Now using this concept,

91
00:05:06.950 --> 00:05:11.300
you can find your arithmetic operations very easily with the replicate command.

92
00:05:11.300 --> 00:05:12.410
Right?

93
00:05:12.410 --> 00:05:14.360
So instead of printing,

94
00:05:14.360 --> 00:05:21.935
so I'm printing like sum equals two, right?

95
00:05:21.935 --> 00:05:24.680
Let me print simply a plus b.

96
00:05:24.680 --> 00:05:26.720
Not trick.

97
00:05:26.720 --> 00:05:32.465
Now whether you are going to provide indigenous or some float points don't pro,

98
00:05:32.465 --> 00:05:34.595
no problem, right? Let me take 12.

99
00:05:34.595 --> 00:05:35.615
Yes, value three.

100
00:05:35.615 --> 00:05:40.880
Let me take now 4.56 dots some to ten dot seven.

101
00:05:40.880 --> 00:05:47.705
Perfectly working right now to perform your arithmetic operations.

102
00:05:47.705 --> 00:05:54.725
The combination of your shell and AWPA is a good practice, right?

103
00:05:54.725 --> 00:05:57.034
So you now by using this syntax,

104
00:05:57.034 --> 00:05:59.435
you can find out any arithmetic operator,

105
00:05:59.435 --> 00:06:03.380
not the site, or read this shell script right?

106
00:06:03.380 --> 00:06:07.550
Now only thing plus minus right, division multiplication.

107
00:06:07.550 --> 00:06:08.690
You can do all those things.

108
00:06:08.690 --> 00:06:13.145
So all automatic operations you can easily perform using this syntax.

109
00:06:13.145 --> 00:06:14.255
Right?

110
00:06:14.255 --> 00:06:17.075
So guys, we just try how to

111
00:06:17.075 --> 00:06:21.260
implement arithmetic calculator with the help of AWPA command.

112
00:06:21.260 --> 00:06:22.610
Right?

113
00:06:22.610 --> 00:06:23.540
Fine.

114
00:06:23.540 --> 00:06:29.555
So there's, this is one way to read the words variables, right?

115
00:06:29.555 --> 00:06:32.060
Using a WK, I mean using read command and

116
00:06:32.060 --> 00:06:35.925
providing your variable values for your edible. They'll pop Jaco.

117
00:06:35.925 --> 00:06:37.930
Instead of that, first,

118
00:06:37.930 --> 00:06:39.235
let me try another command, length.

119
00:06:39.235 --> 00:06:46.600
Let's say suppose some yj equals to number two and B equals to some gate, right?

120
00:06:46.600 --> 00:06:52.375
C, K, WK. So actually you are following this syntax inside of your shell script.

121
00:06:52.375 --> 00:06:55.210
Dollar aa, then dollar b,

122
00:06:55.210 --> 00:06:59.065
pipeline, then AWPA, right?

123
00:06:59.065 --> 00:07:01.330
Then you were actually logic.

124
00:07:01.330 --> 00:07:09.475
What you are taking, let's say suppose x equals 2.1.11 argument,

125
00:07:09.475 --> 00:07:11.665
then y equals two.

126
00:07:11.665 --> 00:07:15.475
I mean first field, second field, right?

127
00:07:15.475 --> 00:07:19.245
Then you are printing suppose x plus y.

128
00:07:19.245 --> 00:07:22.680
Yes, it's working perfectly right?

129
00:07:22.690 --> 00:07:24.755
Now instead of this,

130
00:07:24.755 --> 00:07:28.445
the same syntax inch of your echo command.

131
00:07:28.445 --> 00:07:32.270
What I'm doing is I'm going to remove now your x equals to 100,

132
00:07:32.270 --> 00:07:34.820
y equals two to the same variables.

133
00:07:34.820 --> 00:07:38.960
We can also define here like I found v x equals $2 year.

134
00:07:38.960 --> 00:07:41.465
Then define one more variable,

135
00:07:41.465 --> 00:07:43.250
hyphen women's define one more variable,

136
00:07:43.250 --> 00:07:47.340
Y equals $2 b. Now see the output.

137
00:07:47.500 --> 00:07:56.330
What happened if and when y goes to dollar b. Yeah.

138
00:07:56.330 --> 00:08:00.950
So here you are defining with the help of your actual logic, right?

139
00:08:00.950 --> 00:08:06.290
But actual logic needs you input some random input unit.

140
00:08:06.290 --> 00:08:07.340
Actually, let me take,

141
00:08:07.340 --> 00:08:10.010
suppose I'm rooted DC, right?

142
00:08:10.010 --> 00:08:12.995
But I don't want to work repeatedly.

143
00:08:12.995 --> 00:08:17.160
Let me take some file.

144
00:08:17.320 --> 00:08:20.750
Why I'm taking this file means in this way I have only one line.

145
00:08:20.750 --> 00:08:23.750
That's why I'm so no one file.

146
00:08:23.750 --> 00:08:32.210
Let me take just a second.

147
00:08:32.210 --> 00:08:40.910
Echo some high something into file.txt.

148
00:08:40.910 --> 00:08:46.015
Now what I am doing is It's working, right?

149
00:08:46.015 --> 00:08:49.450
But whenever if you do actual logic, it needs input.

150
00:08:49.450 --> 00:08:51.565
But my input is actually coming from here.

151
00:08:51.565 --> 00:08:53.440
That's why I don't want to provide input.

152
00:08:53.440 --> 00:08:55.075
Iclei, given some random for luxury,

153
00:08:55.075 --> 00:08:58.315
should not provide any input because you are not reading anything from this file.

154
00:08:58.315 --> 00:09:00.445
You're reading your values from here.

155
00:09:00.445 --> 00:09:02.635
So in this case you are reading input.

156
00:09:02.635 --> 00:09:04.720
That's why you can use your actual logic.

157
00:09:04.720 --> 00:09:09.160
But in this case I am not reading input from a file, right?

158
00:09:09.160 --> 00:09:11.980
So that's why what you can do is instead of this,

159
00:09:11.980 --> 00:09:13.570
you can also use some begin block.

160
00:09:13.570 --> 00:09:17.090
So begin block don't need any input.

161
00:09:17.850 --> 00:09:19.690
That's it.

162
00:09:19.690 --> 00:09:23.245
So that is the advantage with the begin whenever if you take begin blog, right?

163
00:09:23.245 --> 00:09:26.325
We don't need any input.

164
00:09:26.325 --> 00:09:28.700
So there's actually, you are taken here,

165
00:09:28.700 --> 00:09:33.005
here also you can take, I mean, yeah,

166
00:09:33.005 --> 00:09:35.075
in this you cannot take begin because

167
00:09:35.075 --> 00:09:37.715
you're providing input from command line that should,

168
00:09:37.715 --> 00:09:39.890
can process only using your actual logic.

169
00:09:39.890 --> 00:09:41.705
That's why are taken her actual logic.

170
00:09:41.705 --> 00:09:45.530
But here I am not providing input from your standard input

171
00:09:45.530 --> 00:09:49.490
or file directly Arabic a commodity sub I am defining.

172
00:09:49.490 --> 00:09:55.130
That's why I'm not providing any input from command output or from a file.

173
00:09:55.130 --> 00:09:57.485
That's why if you go in this way,

174
00:09:57.485 --> 00:09:59.240
it's going to wait for input.

175
00:09:59.240 --> 00:10:01.055
But actually I'm not providing input, right?

176
00:10:01.055 --> 00:10:03.575
That's why you have to take begin command here.

177
00:10:03.575 --> 00:10:04.370
Okay?

178
00:10:04.370 --> 00:10:05.840
So if you are getting conviction,

179
00:10:05.840 --> 00:10:07.940
just tried for all to use this way.

180
00:10:07.940 --> 00:10:11.030
Or to define your variables,

181
00:10:11.030 --> 00:10:14.270
which is read by your shell script, right?

182
00:10:14.270 --> 00:10:15.710
Or if you follow this,

183
00:10:15.710 --> 00:10:17.705
just use begin block.

184
00:10:17.705 --> 00:10:18.980
Ok.

185
00:10:18.980 --> 00:10:20.975
So these are the two ways I'm in.

186
00:10:20.975 --> 00:10:23.360
You can also include this inside of your shell script also,

187
00:10:23.360 --> 00:10:26.250
let me open you are shell script.

188
00:10:28.450 --> 00:10:35.780
So let me comment this line and see that a WK hyphen v, x equals two.

189
00:10:35.780 --> 00:10:36.830
Let me say medieval,

190
00:10:36.830 --> 00:10:39.545
I'm taking a $2 aa,

191
00:10:39.545 --> 00:10:42.410
then hyphen v be coasted.

192
00:10:42.410 --> 00:10:45.065
Dollar b lies this yea,

193
00:10:45.065 --> 00:10:47.645
and this b or your AWPA variables,

194
00:10:47.645 --> 00:10:51.320
dollar 3n Darby or your shell script variables, right?

195
00:10:51.320 --> 00:10:54.290
So now here we are taking begin block by we are

196
00:10:54.290 --> 00:10:57.874
taking begin block means you are not providing input directly.

197
00:10:57.874 --> 00:11:00.350
You are providing a replicate itself.

198
00:11:00.350 --> 00:11:02.900
That's why you don't take your actual logic like this.

199
00:11:02.900 --> 00:11:04.970
If you take actual logic against going to,

200
00:11:04.970 --> 00:11:06.425
it is expecting input,

201
00:11:06.425 --> 00:11:09.665
but I am not providing input in terms of file our command output.

202
00:11:09.665 --> 00:11:11.645
That's why I'm taking begin block action.

203
00:11:11.645 --> 00:11:13.565
You can take any action, no problem, right?

204
00:11:13.565 --> 00:11:16.970
I mean begin block or actual action or end block.

205
00:11:16.970 --> 00:11:20.280
Now here simply a plus b.

206
00:11:20.410 --> 00:11:24.935
That's it. Right?

207
00:11:24.935 --> 00:11:28.320
Let me save it and done it.

208
00:11:29.290 --> 00:11:34.375
Some number 36, something wrong.

209
00:11:34.375 --> 00:11:36.410
Let me open it.

210
00:11:37.710 --> 00:11:42.080
Oh, I forgot to close with single quotation.

211
00:11:43.170 --> 00:11:47.785
Number 12, we are getting three, right?

212
00:11:47.785 --> 00:11:50.650
So remember that whenever if you take f and

213
00:11:50.650 --> 00:11:53.320
v option and if you don't want to provide any input,

214
00:11:53.320 --> 00:11:54.730
file or command output,

215
00:11:54.730 --> 00:11:56.680
just use begin block.

216
00:11:56.680 --> 00:11:58.840
Otherwise year you're providing input.

217
00:11:58.840 --> 00:12:02.230
That's why I'm, I'm using actual logic, right?

218
00:12:02.230 --> 00:12:03.550
So you have three logics.

219
00:12:03.550 --> 00:12:07.030
Begin, actual end logic near AWPA command.

220
00:12:07.030 --> 00:12:10.990
So you're providing command output as a input.

221
00:12:10.990 --> 00:12:12.835
That's why you've got to use your actual logic.

222
00:12:12.835 --> 00:12:15.315
But here you are not providing any command output,

223
00:12:15.315 --> 00:12:18.620
input for your ED applicant entity or defining inside of your credibly

224
00:12:18.620 --> 00:12:22.475
K. That's why I just take begin block so that it will work.

225
00:12:22.475 --> 00:12:23.765
Okay?

226
00:12:23.765 --> 00:12:27.330
Okay. Yes. Thank you for watching this video.

