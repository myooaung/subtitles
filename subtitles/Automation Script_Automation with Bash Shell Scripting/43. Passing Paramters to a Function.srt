1
00:00:00,350 --> 00:00:05,055
Friends here our concept is passing parameters to your function.

2
00:00:05,055 --> 00:00:07,050
Let me go with that. First, let me take

3
00:00:07,050 --> 00:00:10,575
a simple shell script name called passing parameters dot SH.

4
00:00:10,575 --> 00:00:16,480
And in there, I want to define a simple function called addition.

5
00:00:16,880 --> 00:00:22,485
Then I'm defining a function and I'm taking directly variables called X and Y.

6
00:00:22,485 --> 00:00:27,670
And directly I am taking result as x plus y.

7
00:00:28,100 --> 00:00:31,515
And I am displaying that result echo.

8
00:00:31,515 --> 00:00:42,100
The addition of X and Y is whatever the result you have in your hand.

9
00:00:42,340 --> 00:00:48,560
Now let me define x equals some number and y equals some number.

10
00:00:48,560 --> 00:00:53,930
And then let me call your function C while executing your core.

11
00:00:53,930 --> 00:00:58,085
Always the execution part will start from this line.

12
00:00:58,085 --> 00:01:00,410
After completion of your all functions,

13
00:01:00,410 --> 00:01:01,835
whatever the first line is there,

14
00:01:01,835 --> 00:01:04,055
from there, your execution will start.

15
00:01:04,055 --> 00:01:06,515
Now x equals six, y equals to two,

16
00:01:06,515 --> 00:01:09,680
then we are calling addition that way your shell will come to here and rulings,

17
00:01:09,680 --> 00:01:10,865
good these two lines.

18
00:01:10,865 --> 00:01:12,725
And again, we'll come back to this line only.

19
00:01:12,725 --> 00:01:17,120
Then after that, if there is any coordinate tried to execute that, that's fine.

20
00:01:17,120 --> 00:01:22,475
Now let me provide the execution permission for this and see your code ones.

21
00:01:22,475 --> 00:01:24,365
Now I'm running your core.

22
00:01:24,365 --> 00:01:26,450
You are getting your result as eight.

23
00:01:26,450 --> 00:01:30,365
That's fine. Now, after calling your function,

24
00:01:30,365 --> 00:01:32,390
let us assume that you are having different variables.

25
00:01:32,390 --> 00:01:36,905
Let say p equal to some number and q equals to some number.

26
00:01:36,905 --> 00:01:40,145
Now I want to find the addition of P and Q.

27
00:01:40,145 --> 00:01:44,000
Then if I call addition,

28
00:01:44,000 --> 00:01:47,660
addition function always works with x and y variables.

29
00:01:47,660 --> 00:01:49,790
X and y means always 602.

30
00:01:49,790 --> 00:01:53,630
But as of now you are having variable values as 37.

31
00:01:53,630 --> 00:01:56,570
See already we have a concept to find edition,

32
00:01:56,570 --> 00:01:59,090
but you can't use these addition function for

33
00:01:59,090 --> 00:02:03,665
these two variables because you already fixed to the variable xyz, x, and y.

34
00:02:03,665 --> 00:02:06,245
But our variables are now P and Q.

35
00:02:06,245 --> 00:02:09,815
Anyway, first, let me save it and see your code once,

36
00:02:09,815 --> 00:02:15,710
and let me execute it and see the result you are getting in the both the cases 86062.

37
00:02:15,710 --> 00:02:17,930
But first K6 and two is fine.

38
00:02:17,930 --> 00:02:22,325
But after defining p and q 37 values,

39
00:02:22,325 --> 00:02:26,180
you are addition should be 103 plus seven tells you how to get,

40
00:02:26,180 --> 00:02:29,840
but you are functioning is working still only what x and y variables.

41
00:02:29,840 --> 00:02:31,895
So in this type of situation,

42
00:02:31,895 --> 00:02:36,995
you need a concept called passing parameters to your function means while calling,

43
00:02:36,995 --> 00:02:39,560
please pass your variable values as well.

44
00:02:39,560 --> 00:02:42,050
Now let me show you that.

45
00:02:42,050 --> 00:02:44,270
Now instead of x and y,

46
00:02:44,270 --> 00:02:46,190
you can take some different variables.

47
00:02:46,190 --> 00:02:48,980
Let say some yum,

48
00:02:48,980 --> 00:02:52,700
Andi and just assume that instead of x and y,

49
00:02:52,700 --> 00:02:54,920
you can take, even if you take x and away, no problem.

50
00:02:54,920 --> 00:02:56,285
But just to avoid confusion,

51
00:02:56,285 --> 00:02:59,750
I am taking yum under yen.

52
00:02:59,750 --> 00:03:02,630
While calling your function automatically,

53
00:03:02,630 --> 00:03:06,230
you have to assign variable values for your EM and yen so

54
00:03:06,230 --> 00:03:10,100
that now your function will work for x,

55
00:03:10,100 --> 00:03:14,240
y, and p, q variables C. While calling in this way,

56
00:03:14,240 --> 00:03:15,665
I want to pass,

57
00:03:15,665 --> 00:03:17,420
I want to tell to my function,

58
00:03:17,420 --> 00:03:20,480
please use em Monday n values as x and y.

59
00:03:20,480 --> 00:03:22,640
And while calling in this year,

60
00:03:22,640 --> 00:03:25,235
please use P and Q. Alice.

61
00:03:25,235 --> 00:03:28,295
For a Monday and then how you can pass it.

62
00:03:28,295 --> 00:03:32,915
So first thing, immediately after your addition function,

63
00:03:32,915 --> 00:03:40,565
directly pass dollar x space with spaces dollar White and dollar p,

64
00:03:40,565 --> 00:03:43,265
and then dollar q.

65
00:03:43,265 --> 00:03:46,145
Suppose if you have directly values, don't write dollar.

66
00:03:46,145 --> 00:03:47,690
Suppose if I want to pass,

67
00:03:47,690 --> 00:03:50,120
let me take one more example.

68
00:03:50,120 --> 00:03:55,730
I don't have variables but directly values in my hand. Let say 49.

69
00:03:55,730 --> 00:04:00,545
So if you have a valid directly pass values, that's fine.

70
00:04:00,545 --> 00:04:03,920
Now while calling in this way how this delta x2 L you

71
00:04:03,920 --> 00:04:07,835
will assign to young on how this doorway value will assign pn.

72
00:04:07,835 --> 00:04:09,635
But it's simple.

73
00:04:09,635 --> 00:04:13,700
We know command-line arguments concept in command lines,

74
00:04:13,700 --> 00:04:16,070
$1.1 means first command line argument.

75
00:04:16,070 --> 00:04:20,255
The same way while calling a function with some values.

76
00:04:20,255 --> 00:04:25,325
Now, this dollar x means $1.1 inside of a function.

77
00:04:25,325 --> 00:04:28,445
Because these first argument for your function,

78
00:04:28,445 --> 00:04:31,430
dollar way means second argument for your function.

79
00:04:31,430 --> 00:04:35,510
That's why here, just assign dollar to see that.

80
00:04:35,510 --> 00:04:38,735
Now I am assigning $1.1.

81
00:04:38,735 --> 00:04:41,790
And here dollar luxury.

82
00:04:42,010 --> 00:04:44,930
While calling from here,

83
00:04:44,930 --> 00:04:51,995
X value will go to $1.1 and that $1.1 will us npm y-value will go to $1.2,

84
00:04:51,995 --> 00:04:53,885
$1.2 we'll assign to yen.

85
00:04:53,885 --> 00:04:57,920
Let me save it and execute it so that you can understand.

86
00:04:57,920 --> 00:04:59,975
See you are core first.

87
00:04:59,975 --> 00:05:04,670
Now I'm running. It's working perfectly first-time while calling from here.

88
00:05:04,670 --> 00:05:05,795
X is six.

89
00:05:05,795 --> 00:05:07,400
Yes, y is two.

90
00:05:07,400 --> 00:05:11,090
Yes. That value we are assigning pm Monday and in this way,

91
00:05:11,090 --> 00:05:14,630
then 37 Yes, perfectly they are working.

92
00:05:14,630 --> 00:05:19,505
And 409 directly we are passing now four is assigned to Yum and 90 loss into yen,

93
00:05:19,505 --> 00:05:21,230
you are getting diesel does cutting.

94
00:05:21,230 --> 00:05:25,475
Likewise, you can pass any command line arguments,

95
00:05:25,475 --> 00:05:27,440
any parameters for your function,

96
00:05:27,440 --> 00:05:29,510
same as command-line arguments concert for

97
00:05:29,510 --> 00:05:33,680
your shell script c. Suppose I want to run, this shall scape.

98
00:05:33,680 --> 00:05:36,140
I can run and I can pass some arguments.

99
00:05:36,140 --> 00:05:37,670
No, we remember that.

100
00:05:37,670 --> 00:05:39,515
So now this is $1.1,

101
00:05:39,515 --> 00:05:42,305
$1.2, $1.3 dollar for dollar fine.

102
00:05:42,305 --> 00:05:45,635
Same concept inside of a script.

103
00:05:45,635 --> 00:05:48,845
While working with the functions we can use.

104
00:05:48,845 --> 00:05:53,795
I'm calling my function bypassing might parodies are called parameters.

105
00:05:53,795 --> 00:05:55,490
Of course, there are arguments,

106
00:05:55,490 --> 00:05:57,995
command-line arguments only parameters.

107
00:05:57,995 --> 00:06:01,475
We are passing these two variables to this function.

108
00:06:01,475 --> 00:06:05,600
So why parsing how we're accessing them inside of a function simply,

109
00:06:05,600 --> 00:06:08,375
we are treating them this value as delta one.

110
00:06:08,375 --> 00:06:09,470
This value has done a two.

111
00:06:09,470 --> 00:06:11,690
Suppose if you are passing some 2.3.4 values,

112
00:06:11,690 --> 00:06:15,235
that wonder to $1.3 dollars for, right?

113
00:06:15,235 --> 00:06:18,625
But you may have a one more doubt in command line arguments.

114
00:06:18,625 --> 00:06:20,425
Dollar genome means cells tip right?

115
00:06:20,425 --> 00:06:23,470
Then here, see what is the result you are getting.

116
00:06:23,470 --> 00:06:29,950
The $1 value is $1.

117
00:06:29,950 --> 00:06:34,490
Let me execute it and see the result.

118
00:06:34,710 --> 00:06:38,200
C dollars jury is always shell script either in

119
00:06:38,200 --> 00:06:41,140
functions or we thought functions concept.

120
00:06:41,140 --> 00:06:43,255
Wherever if you US $1,

121
00:06:43,255 --> 00:06:46,405
that is always shell script name only.

122
00:06:46,405 --> 00:06:47,590
Right?

123
00:06:47,590 --> 00:06:51,325
So while passing your arguments from command lines,

124
00:06:51,325 --> 00:06:53,350
whatever the concept you are using,

125
00:06:53,350 --> 00:06:58,340
same concept you are using even while parsing barometers for your functions.

126
00:06:58,340 --> 00:07:01,310
Also, we clear on that.

127
00:07:01,310 --> 00:07:04,340
If you want to pass parameters to a function,

128
00:07:04,340 --> 00:07:07,160
you have to call your function, function name.

129
00:07:07,160 --> 00:07:10,205
Then what are the variables you are having in your hand?

130
00:07:10,205 --> 00:07:13,460
Then take that dollar x 1 or something like that,

131
00:07:13,460 --> 00:07:14,840
the inside of a function,

132
00:07:14,840 --> 00:07:16,640
we can access them with the help of $1.1,

133
00:07:16,640 --> 00:07:19,160
$1.2, $1.3, and so on.

134
00:07:19,160 --> 00:07:22,880
And be clear, Dollar General means

135
00:07:22,880 --> 00:07:26,450
either with the functions concept or with the normal concept.

136
00:07:26,450 --> 00:07:29,310
Always it is shell script name only.

137
00:07:29,980 --> 00:07:31,535
Right?

138
00:07:31,535 --> 00:07:33,660
Okay, thank you.

