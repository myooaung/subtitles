1
00:00:00,380 --> 00:00:05,370
Friends here our concept is a WK or oc command.

2
00:00:05,370 --> 00:00:08,625
Say before going to work with AWS or oc command.

3
00:00:08,625 --> 00:00:13,260
Let me show you the differences between a grip with Cut command

4
00:00:13,260 --> 00:00:18,300
and AWPA command so that you will come to know the importance of AWPA command.

5
00:00:18,300 --> 00:00:19,545
Let me explain that.

6
00:00:19,545 --> 00:00:22,575
Suppose I want to find V HTTPD version,

7
00:00:22,575 --> 00:00:27,620
then I can run this command and I can see my output here as to dot-dot-dot for one.

8
00:00:27,620 --> 00:00:30,215
But I want to display exactly this version.

9
00:00:30,215 --> 00:00:32,495
I don't want this to these remaining information.

10
00:00:32,495 --> 00:00:34,550
Then you have to apply filters.

11
00:00:34,550 --> 00:00:36,125
The very first one,

12
00:00:36,125 --> 00:00:37,955
I am applying grep Fader.

13
00:00:37,955 --> 00:00:41,930
I'm gripping a line

14
00:00:41,930 --> 00:00:46,415
which is having version because we don't know what is the version we're having here.

15
00:00:46,415 --> 00:00:51,335
It may be any version based on Apache which we install on our host.

16
00:00:51,335 --> 00:00:54,365
That's why first-time trying to filter the first-line.

17
00:00:54,365 --> 00:00:56,420
Yes, we are getting that first line.

18
00:00:56,420 --> 00:00:57,575
Now.

19
00:00:57,575 --> 00:01:00,665
In this line, here he how your version.

20
00:01:00,665 --> 00:01:04,745
Now if I assume our line as some fields,

21
00:01:04,745 --> 00:01:06,845
then somewhere some field,

22
00:01:06,845 --> 00:01:08,460
you will get your version.

23
00:01:08,460 --> 00:01:11,200
And just before your version you how slash.

24
00:01:11,200 --> 00:01:13,720
Now I am assuming field separator,

25
00:01:13,720 --> 00:01:19,675
column separator as slash so that this entire thing is the foster column or foster field.

26
00:01:19,675 --> 00:01:23,245
Then the main thing is secondary lot second column.

27
00:01:23,245 --> 00:01:26,395
So by applying cut command,

28
00:01:26,395 --> 00:01:30,595
I am taking field separator as a slash,

29
00:01:30,595 --> 00:01:33,370
then you are information is there in the second field?

30
00:01:33,370 --> 00:01:34,630
Yes, we are getting.

31
00:01:34,630 --> 00:01:36,820
But if you observe the output,

32
00:01:36,820 --> 00:01:39,115
it is having parenthesis as well.

33
00:01:39,115 --> 00:01:40,285
I want to remove them,

34
00:01:40,285 --> 00:01:41,935
then try to apply once again,

35
00:01:41,935 --> 00:01:46,540
you are cut command on this output by assuming space as the fields operator.

36
00:01:46,540 --> 00:01:49,315
Because between these two spaces there,

37
00:01:49,315 --> 00:01:52,145
if I assume the field is operator,

38
00:01:52,145 --> 00:01:54,260
then I can say that this is the first official or foster

39
00:01:54,260 --> 00:01:57,275
column and this is a second field or second column.

40
00:01:57,275 --> 00:02:00,680
Now let me try to apply once again our cut command.

41
00:02:00,680 --> 00:02:05,720
But here I am taking field separate address space so that our first release,

42
00:02:05,720 --> 00:02:07,820
our worst hand information.

43
00:02:07,820 --> 00:02:09,155
That's fine.

44
00:02:09,155 --> 00:02:13,250
Now, instead of grip with Cut command,

45
00:02:13,250 --> 00:02:16,445
I can directly take AWPA command.

46
00:02:16,445 --> 00:02:19,730
And by using that also I can get this information.

47
00:02:19,730 --> 00:02:22,325
Let me show you that with step-by-step.

48
00:02:22,325 --> 00:02:25,115
Suppose I am running first HTTPD hyphen v,

49
00:02:25,115 --> 00:02:26,930
then you are getting your output.

50
00:02:26,930 --> 00:02:29,090
None. Here.

51
00:02:29,090 --> 00:02:30,965
I'm applying a WK command.

52
00:02:30,965 --> 00:02:36,510
First, I'm trying to get the line in which we have a version.

53
00:02:36,700 --> 00:02:39,035
Then let me print that.

54
00:02:39,035 --> 00:02:41,420
So these are syntax, but don't worry about syntax.

55
00:02:41,420 --> 00:02:43,610
We have a detailed discussion for that.

56
00:02:43,610 --> 00:02:48,980
Now you're getting first-line C in your cut command.

57
00:02:48,980 --> 00:02:52,385
You can assume some fields operator,

58
00:02:52,385 --> 00:02:56,150
but that fields operator always a single character.

59
00:02:56,150 --> 00:02:58,940
But whereas in AWPA command,

60
00:02:58,940 --> 00:03:02,480
you can provide your field separator with first hyphen.

61
00:03:02,480 --> 00:03:04,595
Yet, here we are using hyphen D,

62
00:03:04,595 --> 00:03:07,580
but here you have to take iPhone5 fields operator.

63
00:03:07,580 --> 00:03:09,275
And these fields operator,

64
00:03:09,275 --> 00:03:11,090
you can write some pattern,

65
00:03:11,090 --> 00:03:14,600
a pattern that presents multiple strings.

66
00:03:14,600 --> 00:03:19,325
Know what I'm doing here is I'm assuming space,

67
00:03:19,325 --> 00:03:23,255
space or slash as my fields operator.

68
00:03:23,255 --> 00:03:26,210
You know, from your grep command somewhere used.

69
00:03:26,210 --> 00:03:29,840
We use square brackets inside that we heard in some year and B.

70
00:03:29,840 --> 00:03:31,310
Then what is the meaning for that,

71
00:03:31,310 --> 00:03:33,830
either a or B, the same way.

72
00:03:33,830 --> 00:03:38,870
Here, I mentioned my fields operator inside of square brackets.

73
00:03:38,870 --> 00:03:40,505
First argument some space.

74
00:03:40,505 --> 00:03:42,035
Then how given slash?

75
00:03:42,035 --> 00:03:48,605
The meaning for the days fields operator is slash or space or both.

76
00:03:48,605 --> 00:03:52,820
Now if you observe in your output here there is a space here,

77
00:03:52,820 --> 00:03:54,905
there is a space here, slashes there.

78
00:03:54,905 --> 00:03:57,035
So you would aid obligate command.

79
00:03:57,035 --> 00:04:02,615
We take two characters at a time to separate your information.

80
00:04:02,615 --> 00:04:04,820
Now, this is foster field,

81
00:04:04,820 --> 00:04:06,395
this is second field.

82
00:04:06,395 --> 00:04:09,215
This is third field here space is there,

83
00:04:09,215 --> 00:04:11,450
here slashes then, but we are given both to,

84
00:04:11,450 --> 00:04:13,475
that's why first failed,

85
00:04:13,475 --> 00:04:17,435
second field, third, fourth, fifth.

86
00:04:17,435 --> 00:04:20,060
Now let me try to print fifth field.

87
00:04:20,060 --> 00:04:22,490
So if you want to print a fifth field here,

88
00:04:22,490 --> 00:04:24,680
you have to take, sorry, four to field.

89
00:04:24,680 --> 00:04:26,360
You have to take dollar for.

90
00:04:26,360 --> 00:04:29,570
Now. See, there is a did I miss?

91
00:04:29,570 --> 00:04:31,715
Yeah, I missed one more single quotation here.

92
00:04:31,715 --> 00:04:33,470
I've opened here single quotation,

93
00:04:33,470 --> 00:04:36,305
but I misread that politicians are important.

94
00:04:36,305 --> 00:04:42,350
Let me close with quotation. Now see the result.

95
00:04:42,350 --> 00:04:45,200
In shut off writing this a lengthy command,

96
00:04:45,200 --> 00:04:47,630
instead of using two different commands,

97
00:04:47,630 --> 00:04:49,940
instead of using two times cot command.

98
00:04:49,940 --> 00:04:52,730
By using simply AWPA command,

99
00:04:52,730 --> 00:04:55,295
we are able to get our required information.

100
00:04:55,295 --> 00:04:58,595
But here, if you want to use a WK command,

101
00:04:58,595 --> 00:05:00,290
you How to good with patterns,

102
00:05:00,290 --> 00:05:04,565
how to create a patterns we already discussed about patterns in our Grip command.

103
00:05:04,565 --> 00:05:08,660
Same rules are applicable here to write your patterns.

104
00:05:08,660 --> 00:05:13,400
So this is the difference between your cut and AWPA Command C.

105
00:05:13,400 --> 00:05:16,460
Instead of using grep command to serve some lines directly,

106
00:05:16,460 --> 00:05:20,495
we can use a WK command by writing your sum such string.

107
00:05:20,495 --> 00:05:22,235
So here we can get pattern, right,

108
00:05:22,235 --> 00:05:23,555
the same pattern you can right,

109
00:05:23,555 --> 00:05:25,430
between these two slashes.

110
00:05:25,430 --> 00:05:28,130
The way how we discuss with Grip command,

111
00:05:28,130 --> 00:05:30,875
same patterns we can write here also.

112
00:05:30,875 --> 00:05:34,280
And we can also write patterns or feel separate Roosevelt such

113
00:05:34,280 --> 00:05:37,640
that we can write our time number of fields,

114
00:05:37,640 --> 00:05:39,665
number of fields operators.

115
00:05:39,665 --> 00:05:41,270
So that is the advantage.

116
00:05:41,270 --> 00:05:44,045
And so if you have a W get command,

117
00:05:44,045 --> 00:05:45,260
then why we are,

118
00:05:45,260 --> 00:05:47,885
why we explained about Cut command previously.

119
00:05:47,885 --> 00:05:51,260
If you want to get characters,

120
00:05:51,260 --> 00:05:53,915
then you how to use Cut command only.

121
00:05:53,915 --> 00:05:56,030
In AWS command always you have to,

122
00:05:56,030 --> 00:05:57,875
you will get fields only.

123
00:05:57,875 --> 00:06:01,880
But in cut command we can get fails as well as characters.

124
00:06:01,880 --> 00:06:04,655
So from now onwards,

125
00:06:04,655 --> 00:06:06,890
if you want to get some characters,

126
00:06:06,890 --> 00:06:09,125
foster two or some number of characters,

127
00:06:09,125 --> 00:06:10,610
then go with Cut command.

128
00:06:10,610 --> 00:06:13,535
But if you want to get fields, go with it or leaky,

129
00:06:13,535 --> 00:06:18,560
so that you won't get confused. Ok, fine.

130
00:06:18,560 --> 00:06:22,745
Now let me go and work with you or a delicate command.

131
00:06:22,745 --> 00:06:25,730
First thing we know,

132
00:06:25,730 --> 00:06:28,280
Cut command is going to work on each and

133
00:06:28,280 --> 00:06:32,630
every line to get characters or feels the same way.

134
00:06:32,630 --> 00:06:35,750
A delegate comment also is going to work on each and every line.

135
00:06:35,750 --> 00:06:40,010
But here line is called record.

136
00:06:40,010 --> 00:06:42,920
Line or row is called a record.

137
00:06:42,920 --> 00:06:44,240
And we know columns,

138
00:06:44,240 --> 00:06:48,185
columns are nothing but feels in your cut command and here also.

139
00:06:48,185 --> 00:06:54,095
And you can use this cut commands or AWPA command as a Linux command.

140
00:06:54,095 --> 00:06:59,465
And also there is a separate scripting language is there with your AWPA combined?

141
00:06:59,465 --> 00:07:01,235
That is the advanced level.

142
00:07:01,235 --> 00:07:05,015
So there is a separate course for that AWPA study.

143
00:07:05,015 --> 00:07:10,715
Anyway, I will also give you some information how to write your academic history.

144
00:07:10,715 --> 00:07:14,285
But for time me, forget about AWPA scripting.

145
00:07:14,285 --> 00:07:18,500
A delicate scripting easily exactly or shell scripting, Bash shell scripting.

146
00:07:18,500 --> 00:07:21,965
Ok. As I've don't just assume that AWPA is a command,

147
00:07:21,965 --> 00:07:23,555
but do we help scripting as well?

148
00:07:23,555 --> 00:07:27,620
Now let me do the simple syntax for your edit locate command or oc command.

149
00:07:27,620 --> 00:07:29,180
Awpa.

150
00:07:29,180 --> 00:07:32,150
Options. Options are always optional.

151
00:07:32,150 --> 00:07:34,880
So just now we have given hyphen your fear.

152
00:07:34,880 --> 00:07:36,590
This is option on here.

153
00:07:36,590 --> 00:07:38,045
We didn't provide that option.

154
00:07:38,045 --> 00:07:40,505
If you want, you can prove and otherwise you can skip.

155
00:07:40,505 --> 00:07:43,715
Then in single quotation,

156
00:07:43,715 --> 00:07:47,930
you have to provide some selection criteria and some action.

157
00:07:47,930 --> 00:07:49,910
Action is there in the curly braces.

158
00:07:49,910 --> 00:07:55,025
This action is always with the print and the selection criteria is optional.

159
00:07:55,025 --> 00:07:56,810
So if you want, you can provide,

160
00:07:56,810 --> 00:08:03,020
suppose here I have given selection criteria as some such string.

161
00:08:03,020 --> 00:08:07,025
Not only such a string, you can also put some condition as well.

162
00:08:07,025 --> 00:08:12,065
Ok, now, so this is the syntax we use ANOVA command line.

163
00:08:12,065 --> 00:08:15,260
But instead of providing your output from a command badly,

164
00:08:15,260 --> 00:08:18,650
if you have a SAM file, you can port your file also here.

165
00:08:18,650 --> 00:08:21,950
So now actually you are having different types of options for

166
00:08:21,950 --> 00:08:25,550
your AWPA command there like hyphen,

167
00:08:25,550 --> 00:08:27,335
Yeah, just to provide fields operator,

168
00:08:27,335 --> 00:08:28,925
just know we used that.

169
00:08:28,925 --> 00:08:31,175
And other than that, we have two more options,

170
00:08:31,175 --> 00:08:33,605
but we'll discuss them in a delicate scripting part.

171
00:08:33,605 --> 00:08:37,670
Not no. Then selection criteria,

172
00:08:37,670 --> 00:08:40,100
it may be a pattern or condition.

173
00:08:40,100 --> 00:08:43,340
Pattern is nothing but with what string you want to

174
00:08:43,340 --> 00:08:46,715
search in the file or in the output condition,

175
00:08:46,715 --> 00:08:49,220
we can get some condition here itself.

176
00:08:49,220 --> 00:08:50,225
I can apply that.

177
00:08:50,225 --> 00:08:56,870
Suppose if you are sure that your information is there in the first lane.

178
00:08:56,870 --> 00:08:58,984
Now instead of writing one,

179
00:08:58,984 --> 00:09:01,790
I can write line number means number of

180
00:09:01,790 --> 00:09:05,960
records or the number for your record is first-line.

181
00:09:05,960 --> 00:09:07,970
See that same you are getting.

182
00:09:07,970 --> 00:09:13,415
So you can write either pattern or condition. That is the condition.

183
00:09:13,415 --> 00:09:18,080
Work on only first-line amines.

184
00:09:18,080 --> 00:09:21,785
Record number for your record, first record,

185
00:09:21,785 --> 00:09:27,140
first-line, Nazi. Then action.

186
00:09:27,140 --> 00:09:32,825
So Anwar, matching pattern or on your satisfied condition,

187
00:09:32,825 --> 00:09:36,035
what are the condition you are writing in your AWS command on that?

188
00:09:36,035 --> 00:09:38,750
What is the action you want to perform for 3000?

189
00:09:38,750 --> 00:09:41,165
Some logic that is always with the print.

190
00:09:41,165 --> 00:09:43,010
I mean in your edit wiki command,

191
00:09:43,010 --> 00:09:45,020
but not in your Angelica scripting.

192
00:09:45,020 --> 00:09:46,760
So as a beginner,

193
00:09:46,760 --> 00:09:51,005
don't worry aboard does scripting just try to concentrate on a Duplicate command.

194
00:09:51,005 --> 00:09:53,780
Now, let me explain that first thing.

195
00:09:53,780 --> 00:09:59,105
Very simple, eta, locate command ease simply AWPA, action, input file.

196
00:09:59,105 --> 00:10:02,000
Actually it's always with the print statement. See that?

197
00:10:02,000 --> 00:10:08,850
Suppose, let me take some file.

198
00:10:09,890 --> 00:10:13,430
This one, I will create some way,

199
00:10:13,430 --> 00:10:14,825
some demo dot TXT.

200
00:10:14,825 --> 00:10:18,930
Before that, let me commend when let me nullify that.

201
00:10:19,240 --> 00:10:23,525
I'm writing something like column one,

202
00:10:23,525 --> 00:10:28,385
column two, column three, column four.

203
00:10:28,385 --> 00:10:30,140
Let me write once again column one.

204
00:10:30,140 --> 00:10:33,380
Now I am giving tab space, column two,

205
00:10:33,380 --> 00:10:38,810
tab space, column three.

206
00:10:38,810 --> 00:10:41,865
Let me take only two lengths snowballing.

207
00:10:41,865 --> 00:10:43,765
Now.

208
00:10:43,765 --> 00:10:47,485
A WK start with single quotation,

209
00:10:47,485 --> 00:10:49,615
curly brace directly or action.

210
00:10:49,615 --> 00:10:55,675
So I want to print only Foster Field first column from each and every line.

211
00:10:55,675 --> 00:10:57,490
Then printed $1.1.

212
00:10:57,490 --> 00:11:00,715
$1.1 means first column, foster field.

213
00:11:00,715 --> 00:11:03,130
Then provide your demo 2.txt.

214
00:11:03,130 --> 00:11:06,340
I mean, you are a file on which you want to perform this action C

215
00:11:06,340 --> 00:11:09,550
that you are getting column one from those two lines.

216
00:11:09,550 --> 00:11:12,370
Actually, if you observe your content,

217
00:11:12,370 --> 00:11:14,125
which is there in your file,

218
00:11:14,125 --> 00:11:18,849
first tip, row, first record is subreddit with spaces.

219
00:11:18,849 --> 00:11:23,335
But second record or second row or second line is operating with a tab.

220
00:11:23,335 --> 00:11:28,295
So by default, AWPA will consider tab also as a space.

221
00:11:28,295 --> 00:11:29,810
So now you can say

222
00:11:29,810 --> 00:11:36,260
that default delimiter default to feel separator for AWS command easiest space.

223
00:11:36,260 --> 00:11:39,320
Be clear for Cut command default.

224
00:11:39,320 --> 00:11:41,435
Fields operator is pap.

225
00:11:41,435 --> 00:11:47,405
But here, space and a tab will also consider as a space in your AWPA command.

226
00:11:47,405 --> 00:11:50,270
That's it. Now these are very simple one.

227
00:11:50,270 --> 00:11:52,100
In case of default,

228
00:11:52,100 --> 00:11:56,810
separator is there with the word file to separate your fields or columns,

229
00:11:56,810 --> 00:11:59,300
then no need to write any field subarea directly

230
00:11:59,300 --> 00:12:02,165
can perform your action in which really want.

231
00:12:02,165 --> 00:12:03,725
That's a.

232
00:12:03,725 --> 00:12:05,750
Now, let me see.

233
00:12:05,750 --> 00:12:07,925
Suppose this is the common output.

234
00:12:07,925 --> 00:12:11,000
Now I want to get first afield from those two lines,

235
00:12:11,000 --> 00:12:15,289
then AWPA brink, $1.1.

236
00:12:15,289 --> 00:12:16,535
See what you are going to get.

237
00:12:16,535 --> 00:12:20,705
You're going to get servers, server because default separate resists space.

238
00:12:20,705 --> 00:12:21,815
Now here space is there,

239
00:12:21,815 --> 00:12:23,045
here also space is there.

240
00:12:23,045 --> 00:12:24,365
Then there is Foster Field,

241
00:12:24,365 --> 00:12:27,380
second field, the center up to the start of it.

242
00:12:27,380 --> 00:12:32,045
This is for the field. So in second line, first, second, third,

243
00:12:32,045 --> 00:12:34,805
fourth, because he has spaces that fifth,

244
00:12:34,805 --> 00:12:37,835
spaces that sixth. That's it.

245
00:12:37,835 --> 00:12:39,920
Now let me try to print a six,

246
00:12:39,920 --> 00:12:43,400
the field in first-line we don't now 63, then you will get empty.

247
00:12:43,400 --> 00:12:45,200
But in second line we have a sigma field.

248
00:12:45,200 --> 00:12:46,490
You are getting that.

249
00:12:46,490 --> 00:12:48,420
That's it.

250
00:12:49,650 --> 00:12:53,300
Right? Now.

251
00:12:53,820 --> 00:12:59,095
You have some default variables with your comment or end of leaky command.

252
00:12:59,095 --> 00:12:59,680
There.

253
00:12:59,680 --> 00:13:02,695
Just now we have seen $1.1, $1.6.

254
00:13:02,695 --> 00:13:05,950
Likewise you how $1.2 dollar infinity.

255
00:13:05,950 --> 00:13:09,550
Suppose if I take c,

256
00:13:09,550 --> 00:13:16,075
what you are going to get a WK print $1.

257
00:13:16,075 --> 00:13:18,085
I'm providing input file.

258
00:13:18,085 --> 00:13:19,720
I can provide input file on.

259
00:13:19,720 --> 00:13:23,080
I can apply an obligate command on the output by using pipe bend symbol,

260
00:13:23,080 --> 00:13:25,660
let's say demo dot txt output,

261
00:13:25,660 --> 00:13:28,810
they are going to get entire file, not only $1.

262
00:13:28,810 --> 00:13:31,630
If you remove that by default there is knowledge 0.

263
00:13:31,630 --> 00:13:32,500
That's it.

264
00:13:32,500 --> 00:13:35,290
So whenever if you take a W get command,

265
00:13:35,290 --> 00:13:40,435
print $1 R without any variable name here,

266
00:13:40,435 --> 00:13:41,740
if you simply use print,

267
00:13:41,740 --> 00:13:44,155
it is going to print n-type content.

268
00:13:44,155 --> 00:13:45,940
But if I take $1.1,

269
00:13:45,940 --> 00:13:52,750
it is going to print Foster Field, foster column.

270
00:13:52,750 --> 00:13:56,005
Suppose if I want to print first two column and third column,

271
00:13:56,005 --> 00:14:04,210
then take $1.1 comma three so that you are going to get first, third, right?

272
00:14:04,210 --> 00:14:08,290
And by default the output fields operator is also a space.

273
00:14:08,290 --> 00:14:09,340
Be clear.

274
00:14:09,340 --> 00:14:12,145
So if you want to get other fields operator,

275
00:14:12,145 --> 00:14:15,150
you can get from our advanced level scripting.

276
00:14:15,150 --> 00:14:18,200
I will show you our Diane. I mean,

277
00:14:18,200 --> 00:14:20,030
let me show you that but don't get confused.

278
00:14:20,030 --> 00:14:22,400
If I write that, you may get confused.

279
00:14:22,400 --> 00:14:23,780
Let me write it.

280
00:14:23,780 --> 00:14:27,140
Begin to write some script here.

281
00:14:27,140 --> 00:14:31,800
Output fields operator equals two.

282
00:14:32,470 --> 00:14:36,450
I want to get suppose, underscore.

283
00:14:38,050 --> 00:14:42,215
Say that, but don't get confused with this one.

284
00:14:42,215 --> 00:14:46,400
Again, we'll discuss that in our AWS crippling part.

285
00:14:46,400 --> 00:14:47,495
Fine.

286
00:14:47,495 --> 00:14:52,925
So first thing I want to get first third fees.

287
00:14:52,925 --> 00:14:55,355
Yes, you are getting now I want to reverse

288
00:14:55,355 --> 00:14:58,780
my third first feed while displaying in output.

289
00:14:58,780 --> 00:15:04,360
Then write it in the I'm in first as $1.3.

290
00:15:04,360 --> 00:15:05,290
There.

291
00:15:05,290 --> 00:15:08,635
It's very, very important this point,

292
00:15:08,635 --> 00:15:12,790
how to reverse your fields using AWPA command.

293
00:15:12,790 --> 00:15:16,130
It is possible with your AWPA command.

294
00:15:16,170 --> 00:15:22,840
Okay? No dollar TO second than you.

295
00:15:22,840 --> 00:15:28,825
How some n naught it will print line or record number c.

296
00:15:28,825 --> 00:15:30,550
Let me printed there so that you can understand.

297
00:15:30,550 --> 00:15:33,235
So how many records are lines are there in your file?

298
00:15:33,235 --> 00:15:38,380
Only to suppose if I write N r c 12.

299
00:15:38,380 --> 00:15:42,215
So I want to print entire file with line numbers.

300
00:15:42,215 --> 00:15:45,320
Then first n naught means see whenever

301
00:15:45,320 --> 00:15:48,935
you free AWPA command is working with the first-line. Nr is foster.

302
00:15:48,935 --> 00:15:49,760
One.

303
00:15:49,760 --> 00:15:52,415
If it is working with second line, n naught is two.

304
00:15:52,415 --> 00:15:55,250
So automatically it will increase and will display the value.

305
00:15:55,250 --> 00:15:57,800
We know $1 means entire phi.

306
00:15:57,800 --> 00:16:01,680
Now I am printing entire file with line numbers.

307
00:16:01,990 --> 00:16:10,700
There is one more variable called m. So it will print how many fields are there,

308
00:16:10,700 --> 00:16:12,950
how many columns are there in each and every line?

309
00:16:12,950 --> 00:16:15,005
So at the ending, I'm printing.

310
00:16:15,005 --> 00:16:16,430
You can also write at first,

311
00:16:16,430 --> 00:16:18,290
but just I am writing at the end C,

312
00:16:18,290 --> 00:16:20,855
there is a first-line.

313
00:16:20,855 --> 00:16:22,175
How many fields are there?

314
00:16:22,175 --> 00:16:24,560
Three fields. Second line,

315
00:16:24,560 --> 00:16:26,885
how many fields are the three fields?

316
00:16:26,885 --> 00:16:31,110
Let me add some more fields.

317
00:16:31,630 --> 00:16:35,465
In third, I'm writing column one,

318
00:16:35,465 --> 00:16:38,105
column two, column three,

319
00:16:38,105 --> 00:16:42,215
and column four, and I'm writing column one.

320
00:16:42,215 --> 00:16:46,445
Now for records we are having let me print them.

321
00:16:46,445 --> 00:16:48,410
In first record.

322
00:16:48,410 --> 00:16:51,965
Record means you are lying in first record we held three fields.

323
00:16:51,965 --> 00:16:55,355
This is second record in second decoder also 3.

324
00:16:55,355 --> 00:16:58,220
Fourth, third record for fields.

325
00:16:58,220 --> 00:17:00,575
Fourth record one field.

326
00:17:00,575 --> 00:17:04,595
Know logically I can print some information here.

327
00:17:04,595 --> 00:17:07,385
And the first thing, if I run this thing,

328
00:17:07,385 --> 00:17:11,210
you're getting your output right. Now.

329
00:17:11,210 --> 00:17:16,880
I want to print last field from each and every line.

330
00:17:16,880 --> 00:17:18,140
C.

331
00:17:18,140 --> 00:17:21,680
If you want to, suppose if I write simply $1.3 here,

332
00:17:21,680 --> 00:17:23,150
you will get from first-line,

333
00:17:23,150 --> 00:17:26,990
you'll get Column three from third line triggered column three.

334
00:17:26,990 --> 00:17:30,545
But this is not the last field, this is the last to fail.

335
00:17:30,545 --> 00:17:32,525
But you know, if you observe here

336
00:17:32,525 --> 00:17:36,635
automatically you were NF is giving the number of fields.

337
00:17:36,635 --> 00:17:39,320
Now if I write it dollar enough,

338
00:17:39,320 --> 00:17:42,890
dollar, NF Beatley or without inevitably do the count.

339
00:17:42,890 --> 00:17:47,120
But dollar enough means whenever if it is working with the foster feel sorry,

340
00:17:47,120 --> 00:17:53,405
foster record enough will replace with the three so that this will become $1.3, $1.3.

341
00:17:53,405 --> 00:17:54,920
This you will get.

342
00:17:54,920 --> 00:17:57,725
And whenever if it is working with the third row,

343
00:17:57,725 --> 00:18:00,665
third record, how many fields are there for?

344
00:18:00,665 --> 00:18:03,590
So this value will be get by using NF.

345
00:18:03,590 --> 00:18:06,740
But far enough we are writing dollar then dollar,

346
00:18:06,740 --> 00:18:09,935
NF means dollar for dollar forming fourth column.

347
00:18:09,935 --> 00:18:17,345
So automatically you will get lost a field from each and every record by using dollar NF.

348
00:18:17,345 --> 00:18:19,830
Just simple logic.

349
00:18:19,900 --> 00:18:23,045
And one more logic.

350
00:18:23,045 --> 00:18:24,590
Now, this is useful,

351
00:18:24,590 --> 00:18:28,025
but the second thing is just four logically, it is useful.

352
00:18:28,025 --> 00:18:31,990
You can understand, I want to print from first record,

353
00:18:31,990 --> 00:18:34,190
first to fail from Second Record,

354
00:18:34,190 --> 00:18:36,905
second feet from third record, third field.

355
00:18:36,905 --> 00:18:43,700
Then you can use inner Because if you observe another line numbers, now let me do that.

356
00:18:43,700 --> 00:18:47,030
Simply. I'm printing only dollar in NOR,

357
00:18:47,030 --> 00:18:49,670
so that from first to record you'll get foster

358
00:18:49,670 --> 00:18:52,925
field from secondary God, you'll get secondary.

359
00:18:52,925 --> 00:18:56,150
Third record, third, fourth record for the field,

360
00:18:56,150 --> 00:18:59,840
but you don't have for the field in the fourth regardless, we are getting an empty.

361
00:18:59,840 --> 00:19:01,925
That's it, guys.

362
00:19:01,925 --> 00:19:08,930
This is the simple way to understand the uses of AWPA Command C. As of now,

363
00:19:08,930 --> 00:19:12,545
I have given the very basic AWPA command,

364
00:19:12,545 --> 00:19:14,240
and this is simply part one.

365
00:19:14,240 --> 00:19:18,845
So we have advanced level advocate scripting that we'll discuss after some concerts.

366
00:19:18,845 --> 00:19:23,075
Because this edge obligate command I want to use in some simple shell scripts.

367
00:19:23,075 --> 00:19:25,340
That way. That's why I have given here.

368
00:19:25,340 --> 00:19:26,330
Okay.

369
00:19:26,330 --> 00:19:28,410
Okay guys, thank you.

