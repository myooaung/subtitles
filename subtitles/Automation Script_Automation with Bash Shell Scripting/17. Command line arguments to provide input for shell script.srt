1
00:00:00,350 --> 00:00:05,430
Friends here, our concept ease input with command line arguments.

2
00:00:05,430 --> 00:00:10,740
So he already we know how to provide an input for your shell script using 3D command.

3
00:00:10,740 --> 00:00:12,240
Now instead of read command,

4
00:00:12,240 --> 00:00:16,620
you can also use command-line arguments to provide an input for your shell scripts.

5
00:00:16,620 --> 00:00:18,105
Now let me explain that

6
00:00:18,105 --> 00:00:21,900
these command line arguments are also called as positional arguments.

7
00:00:21,900 --> 00:00:26,910
Why we will see, see command-line arguments or simply values or

8
00:00:26,910 --> 00:00:29,475
arguments on which are provided

9
00:00:29,475 --> 00:00:33,010
while running your shell script on your command prompt itself.

10
00:00:33,010 --> 00:00:35,525
Let me explain that with a simple shell script,

11
00:00:35,525 --> 00:00:37,505
I'm taking shell script name as command line,

12
00:00:37,505 --> 00:00:42,890
always dot-dot-dot H. Now let me write the very first line as user bin bash.

13
00:00:42,890 --> 00:00:47,795
Then, see, suppose I am trying to display the value of y.

14
00:00:47,795 --> 00:00:52,595
That is done away. Anyway, we know that dollar y is not defined in our shell script.

15
00:00:52,595 --> 00:00:55,160
Then if I run that,

16
00:00:55,160 --> 00:00:58,745
let me provide the execution permission for our script.

17
00:00:58,745 --> 00:01:01,760
Then see your core ones.

18
00:01:01,760 --> 00:01:03,980
Now run your code.

19
00:01:03,980 --> 00:01:06,710
You're getting an empty line because y is not defined

20
00:01:06,710 --> 00:01:09,980
anywhere that we are getting, output is empty.

21
00:01:09,980 --> 00:01:15,080
Now, there are some special variables in your shell strip.

22
00:01:15,080 --> 00:01:21,065
Let me printed them. $1.1. I'm printing in a different lines.

23
00:01:21,065 --> 00:01:24,935
$1.2, $1.3.

24
00:01:24,935 --> 00:01:28,190
Actually, you should not take variable name as 1-2-3.

25
00:01:28,190 --> 00:01:30,230
C dollar y means y variable.

26
00:01:30,230 --> 00:01:32,000
You are printing the same NBA $1.1 min,

27
00:01:32,000 --> 00:01:33,905
one variable value you are printing.

28
00:01:33,905 --> 00:01:38,465
But we know that we should not take our variable name starts with a number.

29
00:01:38,465 --> 00:01:41,795
And here I have taken directly our variable names has 123.

30
00:01:41,795 --> 00:01:43,340
That is not correct actually,

31
00:01:43,340 --> 00:01:46,865
but these are some special variables for your shell scripts

32
00:01:46,865 --> 00:01:50,885
and which are defined with your shell script with your shell.

33
00:01:50,885 --> 00:01:51,995
Fine.

34
00:01:51,995 --> 00:01:57,425
Now, first to see your code. And I'm running.

35
00:01:57,425 --> 00:02:01,775
So you can get the output is empty because nowhere that values are defining,

36
00:02:01,775 --> 00:02:04,040
Yes, you are getting three empty lines.

37
00:02:04,040 --> 00:02:06,260
Say that. First empty line,

38
00:02:06,260 --> 00:02:07,985
second thought empty land.

39
00:02:07,985 --> 00:02:09,740
Now while running my shell script,

40
00:02:09,740 --> 00:02:14,135
I am passing some value with the space shell script name space some value.

41
00:02:14,135 --> 00:02:17,630
Now see the result. You are getting the first output.

42
00:02:17,630 --> 00:02:21,185
Now, $1.1 means after your shell script name,

43
00:02:21,185 --> 00:02:22,925
if you pass some value,

44
00:02:22,925 --> 00:02:24,560
if you pass only one value,

45
00:02:24,560 --> 00:02:25,835
then that is delta one.

46
00:02:25,835 --> 00:02:27,695
If I pass first value,

47
00:02:27,695 --> 00:02:30,410
then second value with the spaces be clear.

48
00:02:30,410 --> 00:02:32,330
Then $1.1 needs this.

49
00:02:32,330 --> 00:02:33,770
$1.2 is this one.

50
00:02:33,770 --> 00:02:37,110
Likewise, you can pass any number of values.

51
00:02:41,470 --> 00:02:44,240
Likewise, you can pass any number of values.

52
00:02:44,240 --> 00:02:47,225
Now see the result. We are displaying only 1-2-3.

53
00:02:47,225 --> 00:02:50,375
So after, immediately after your shells taped name,

54
00:02:50,375 --> 00:02:53,000
this is $1.1 inside of your script.

55
00:02:53,000 --> 00:03:02,195
This is $1.234567891011 up to infinity you can provide.

56
00:03:02,195 --> 00:03:07,230
And to be clear, all values must be separately with the spaces.

57
00:03:07,840 --> 00:03:09,230
Right?

58
00:03:09,230 --> 00:03:13,940
Suppose if we have a data and in that if you always spaces,

59
00:03:13,940 --> 00:03:16,880
then you have to write your entire data inside of a quotation.

60
00:03:16,880 --> 00:03:21,890
Let me take the very first as shell scripting. Now see there isn't.

61
00:03:21,890 --> 00:03:24,590
Shell scripting entire thing is then quotations.

62
00:03:24,590 --> 00:03:26,360
So that's why this is the first argument.

63
00:03:26,360 --> 00:03:28,025
If you don't provide quotations,

64
00:03:28,025 --> 00:03:29,810
then Shelley's first argument,

65
00:03:29,810 --> 00:03:31,580
scripting is second argument.

66
00:03:31,580 --> 00:03:34,820
So $1.1 is shell scripting.

67
00:03:34,820 --> 00:03:38,630
So there isn't, you have to be clear on that. Ok.

68
00:03:38,630 --> 00:03:43,475
So these are called command line arguments for your sheltered.

69
00:03:43,475 --> 00:03:48,725
And we're also calling them as a positional arguments because if I change the position,

70
00:03:48,725 --> 00:03:50,390
if I read scripting here on shell here,

71
00:03:50,390 --> 00:03:52,220
the position is changing that.

72
00:03:52,220 --> 00:03:55,009
So these are the positional arguments.

73
00:03:55,009 --> 00:03:55,700
C.

74
00:03:55,700 --> 00:03:58,130
If I write scripting here on shell here,

75
00:03:58,130 --> 00:04:00,200
then one becomes scripting.

76
00:04:00,200 --> 00:04:02,460
$1.2 becomes shell.

77
00:04:02,470 --> 00:04:05,075
But if you want to get delta 1S shell,

78
00:04:05,075 --> 00:04:08,555
you have to read the very first actual position is important.

79
00:04:08,555 --> 00:04:10,175
Fine.

80
00:04:10,175 --> 00:04:14,400
Now, let me open your script once again.

81
00:04:15,280 --> 00:04:18,950
I am defining, I want to display one more value

82
00:04:18,950 --> 00:04:22,890
called dollar G O D is also very, very important.

83
00:04:24,250 --> 00:04:29,135
Now am running or shell script by taking this data.

84
00:04:29,135 --> 00:04:31,430
Now see that isn't dollars zero,

85
00:04:31,430 --> 00:04:33,110
you are getting script name itself.

86
00:04:33,110 --> 00:04:36,680
So in this entire format,

87
00:04:36,680 --> 00:04:38,165
be clear on this.

88
00:04:38,165 --> 00:04:39,935
In this entire format.

89
00:04:39,935 --> 00:04:42,550
This is inside of your script.

90
00:04:42,550 --> 00:04:45,850
You can access your script name with the help of dollar row.

91
00:04:45,850 --> 00:04:49,030
And the first value which you are passing offer

92
00:04:49,030 --> 00:04:52,135
your script name can be accessed with a $1.1.

93
00:04:52,135 --> 00:04:57,940
Then two, likewise, you can take any number of arguments on your command line.

94
00:04:57,940 --> 00:05:01,630
So based on that, jihad to access inside of your script with the help of God,

95
00:05:01,630 --> 00:05:05,154
one dot-dot-dot U3 and position is important.

96
00:05:05,154 --> 00:05:06,400
Fine.

97
00:05:06,400 --> 00:05:09,280
Now, let me go with one more thing.

98
00:05:09,280 --> 00:05:15,595
Suppose how many values we're passing, 12345678910.

99
00:05:15,595 --> 00:05:17,440
Yeah, I want to print,

100
00:05:17,440 --> 00:05:20,455
suppose some tenth command line argument.

101
00:05:20,455 --> 00:05:26,060
Then you have to take a CFO, $1.10.

102
00:05:26,060 --> 00:05:29,015
Now let me observe output for this.

103
00:05:29,015 --> 00:05:32,850
So if you observe in your command line,

104
00:05:34,180 --> 00:05:37,655
what is the tenth argument? First account it.

105
00:05:37,655 --> 00:05:46,130
This is one, this is 2345678910 is AB, right?

106
00:05:46,130 --> 00:05:50,135
So before running your script first to see the content of your core,

107
00:05:50,135 --> 00:05:56,090
now run your script. Observes output.

108
00:05:56,090 --> 00:05:58,880
You are getting the output for ten,

109
00:05:58,880 --> 00:06:01,550
the command-line argument as shelled 0,

110
00:06:01,550 --> 00:06:03,305
but it is AB,

111
00:06:03,305 --> 00:06:05,240
but you are not getting that.

112
00:06:05,240 --> 00:06:09,530
Whenever if you print command line argument

113
00:06:09,530 --> 00:06:13,565
for greater than or equal to ten or two digit command line argument,

114
00:06:13,565 --> 00:06:17,360
then you had to write that command line argument inside of curly braces.

115
00:06:17,360 --> 00:06:20,945
Otherwise, it will consider like $1.1 then 0.

116
00:06:20,945 --> 00:06:23,435
So $1.1 means first command line argument.

117
00:06:23,435 --> 00:06:24,620
Yes, you are getting that,

118
00:06:24,620 --> 00:06:26,990
then Gero is printing as it is.

119
00:06:26,990 --> 00:06:30,200
So if your command line argument e is greater

120
00:06:30,200 --> 00:06:33,140
than or equal to ten or two digit command line argument.

121
00:06:33,140 --> 00:06:34,595
Then take curly braces,

122
00:06:34,595 --> 00:06:37,280
even for your single-digit command-line argument.

123
00:06:37,280 --> 00:06:40,160
Also, you can take curly braces, but not required.

124
00:06:40,160 --> 00:06:43,970
Now let me save it and run it and see the result.

125
00:06:43,970 --> 00:06:46,100
There is no difference with 23.

126
00:06:46,100 --> 00:06:48,740
Even though if you take curly braces for your single,

127
00:06:48,740 --> 00:06:50,615
I mean, what does it command line argument,

128
00:06:50,615 --> 00:06:53,555
no problem, but for two digit command-line argument,

129
00:06:53,555 --> 00:06:55,640
you have to take curly braces.

130
00:06:55,640 --> 00:06:57,005
That's fine.

131
00:06:57,005 --> 00:07:03,920
Now, I want to find how many command-line arguments or passing to us script.

132
00:07:03,920 --> 00:07:06,780
Now first let me comment this code.

133
00:07:06,880 --> 00:07:12,020
So I'm using multi-line comment to comment our code.

134
00:07:12,020 --> 00:07:20,240
Know simply I'm displaying the number of command line or domains,

135
00:07:20,240 --> 00:07:23,640
or simply with dollar hash.

136
00:07:24,160 --> 00:07:29,630
Now first let me run your code without

137
00:07:29,630 --> 00:07:32,630
any command line arguments and see the result you're getting 0 because I'm

138
00:07:32,630 --> 00:07:36,395
not passing any command-line arguments of that our shell script.

139
00:07:36,395 --> 00:07:40,100
Now I'm passing one command line argument, the counties.

140
00:07:40,100 --> 00:07:43,070
One, I'm passing two counties to, I'm pausing.

141
00:07:43,070 --> 00:07:47,630
Suppose three numbers, three command line arguments, three, that's it.

142
00:07:47,630 --> 00:07:53,765
Now, suppose if you want to print all the command line arguments at a time,

143
00:07:53,765 --> 00:08:01,250
the OL command line arguments

144
00:08:01,250 --> 00:08:04,925
or simply I can use dollar at the rate.

145
00:08:04,925 --> 00:08:08,220
You are also having one more syntax for this.

146
00:08:09,460 --> 00:08:13,265
That is dollar stock.

147
00:08:13,265 --> 00:08:14,570
C.

148
00:08:14,570 --> 00:08:18,125
There is a small difference between duller and duller direct,

149
00:08:18,125 --> 00:08:23,225
but as of now there are same that defense I can explain while working with the loops.

150
00:08:23,225 --> 00:08:24,785
So up to that, you had to wait.

151
00:08:24,785 --> 00:08:25,950
What is the difference between dollar,

152
00:08:25,950 --> 00:08:28,025
Stalin, dollar at the rate?

153
00:08:28,025 --> 00:08:31,520
Now, I'm running a shell script and I'm not passing anything.

154
00:08:31,520 --> 00:08:35,975
So I'll put easier empty because you're not passing any command line arguments.

155
00:08:35,975 --> 00:08:39,965
Dollar upgrade means, or dollar star means as of no.

156
00:08:39,965 --> 00:08:44,045
All the command line arguments which we are parsing for our script.

157
00:08:44,045 --> 00:08:46,640
Suppose I'm passing three command line arguments, yours,

158
00:08:46,640 --> 00:08:55,595
you are getting more good for your 1 stock. Right?

159
00:08:55,595 --> 00:08:56,975
Now.

160
00:08:56,975 --> 00:09:01,174
Then what is the use of these command line arguments?

161
00:09:01,174 --> 00:09:03,680
We know that just to provide input.

162
00:09:03,680 --> 00:09:08,945
Suppose we how our script to install Tomcat.

163
00:09:08,945 --> 00:09:12,545
Now, previously we work in this way.

164
00:09:12,545 --> 00:09:17,780
No, let me remove this seed directly.

165
00:09:17,780 --> 00:09:20,465
If you want to pass your version number,

166
00:09:20,465 --> 00:09:25,220
we are opening our script and we are passing our version number here.

167
00:09:25,220 --> 00:09:27,095
But if you don't want to edit,

168
00:09:27,095 --> 00:09:29,820
then we're commenting this line.

169
00:09:30,180 --> 00:09:33,370
Then we are commenting this first line,

170
00:09:33,370 --> 00:09:36,325
I mean Tomcat, what line?

171
00:09:36,325 --> 00:09:37,930
Then with the help of read command,

172
00:09:37,930 --> 00:09:40,960
we are reading the version number of waves running JavaScript.

173
00:09:40,960 --> 00:09:46,945
Now, even if you don't want to provide your version number of the running us strip,

174
00:09:46,945 --> 00:09:49,405
then before running your script itself,

175
00:09:49,405 --> 00:09:55,495
you can provide the required Tomcat version by using your command line arguments.

176
00:09:55,495 --> 00:10:00,325
Simply I'm taking your variable required Tomcat version equals $2.1.

177
00:10:00,325 --> 00:10:02,540
Then let me save it.

178
00:10:02,730 --> 00:10:05,470
And I'll see you a script first.

179
00:10:05,470 --> 00:10:09,399
So the required value we are assigning $1.1

180
00:10:09,399 --> 00:10:13,110
value delta one means command-line argument first command line argument.

181
00:10:13,110 --> 00:10:18,270
So before that, remove your concat mine.

182
00:10:20,650 --> 00:10:24,080
Now see that I am running our shall skip.

183
00:10:24,080 --> 00:10:28,055
And by providing command-line argument as our required version,

184
00:10:28,055 --> 00:10:31,895
nine dot 0 dot 27, any version number.

185
00:10:31,895 --> 00:10:34,025
Now it is going to work.

186
00:10:34,025 --> 00:10:35,360
That's it.

187
00:10:35,360 --> 00:10:38,810
So this is the best uses of command line argument.

188
00:10:38,810 --> 00:10:40,775
So before running your shell script,

189
00:10:40,775 --> 00:10:42,275
without opening your shell script,

190
00:10:42,275 --> 00:10:45,620
if you want to pass your required values for your shell script, yes,

191
00:10:45,620 --> 00:10:51,710
we can pass, we can provide input for our shell script using command line arguments.

192
00:10:51,710 --> 00:10:55,340
And suppose if you are not passing any command-line argument,

193
00:10:55,340 --> 00:11:00,210
and inside of your script actually you are taking your command line arguments, right?

194
00:11:00,220 --> 00:11:03,935
And if you are not passing, then it won't work.

195
00:11:03,935 --> 00:11:07,130
It will do some errors. Let me run.

196
00:11:07,130 --> 00:11:08,600
Now.

197
00:11:08,600 --> 00:11:11,045
I'm not passing any Watson and I am running,

198
00:11:11,045 --> 00:11:12,725
you're going to get an error.

199
00:11:12,725 --> 00:11:15,365
So how to handle this?

200
00:11:15,365 --> 00:11:20,075
We will discuss that in our for the sessions.

201
00:11:20,075 --> 00:11:21,785
That is actually advanced level concept.

202
00:11:21,785 --> 00:11:23,285
We'll discuss that.

203
00:11:23,285 --> 00:11:26,160
Okay guys. Thank you.

