1
00:00:00,920 --> 00:00:02,445
Friends.

2
00:00:02,445 --> 00:00:05,745
Here our concept is working with variables.

3
00:00:05,745 --> 00:00:11,490
C, variables plays an important role in any programming or scripting language.

4
00:00:11,490 --> 00:00:15,615
Basically, variables are used to store data or a value.

5
00:00:15,615 --> 00:00:21,150
Suppose I'm having a value or network called number two and I want to store that India

6
00:00:21,150 --> 00:00:26,840
variable collects then how you can define or declared variable simply x equals to two.

7
00:00:26,840 --> 00:00:29,540
So here, if I write x equals to two,

8
00:00:29,540 --> 00:00:35,090
the meaning for that is we are assigning number two to a variable called X,

9
00:00:35,090 --> 00:00:40,970
or we are storing that data to into a variable called x.

10
00:00:40,970 --> 00:00:44,165
And while declaring in this way x equals to two,

11
00:00:44,165 --> 00:00:47,750
please don't provide any space on either side of the equals symbol.

12
00:00:47,750 --> 00:00:50,645
If you provide, then bashed doesn't allow that.

13
00:00:50,645 --> 00:00:52,925
Let me show you that on your command line.

14
00:00:52,925 --> 00:00:55,565
Suppose if i write x equals to two, then it's fine.

15
00:00:55,565 --> 00:00:57,935
You are shell will accept that.

16
00:00:57,935 --> 00:01:01,940
But if I write x space equal to two,

17
00:01:01,940 --> 00:01:04,670
or x equals two space two,

18
00:01:04,670 --> 00:01:07,010
or X space equals two,

19
00:01:07,010 --> 00:01:11,570
space two, then these three or not a valid declarations

20
00:01:11,570 --> 00:01:13,970
for variable simply you are right,

21
00:01:13,970 --> 00:01:17,615
X equals to two without any spaces, that is the valid one.

22
00:01:17,615 --> 00:01:18,875
That's fine.

23
00:01:18,875 --> 00:01:21,095
So once if you define your variable,

24
00:01:21,095 --> 00:01:27,740
then how you can display the value of your variable simply using a code Dalvik or echo.

25
00:01:27,740 --> 00:01:30,005
Quotations with Dalvik.

26
00:01:30,005 --> 00:01:31,580
Generally we will use,

27
00:01:31,580 --> 00:01:33,260
I mean, in my case,

28
00:01:33,260 --> 00:01:35,585
most of the cases I will use with quotations only.

29
00:01:35,585 --> 00:01:37,700
Actually that is the best practice.

30
00:01:37,700 --> 00:01:39,515
And in some cases,

31
00:01:39,515 --> 00:01:42,350
you have to use to display

32
00:01:42,350 --> 00:01:47,240
your variable value or to substitute u or a variable value somewhere in your expression.

33
00:01:47,240 --> 00:01:50,825
You how to use curly braces off x.

34
00:01:50,825 --> 00:01:54,005
But always you can use curly braces off x.

35
00:01:54,005 --> 00:01:56,210
But in some cases you can skip that.

36
00:01:56,210 --> 00:01:59,240
But in some cases your to use curly braces.

37
00:01:59,240 --> 00:02:00,170
Right?

38
00:02:00,170 --> 00:02:02,420
So we will see that when situation comes at

39
00:02:02,420 --> 00:02:05,195
the time you can understand as of nodes simply,

40
00:02:05,195 --> 00:02:06,770
we define x equals U2.

41
00:02:06,770 --> 00:02:09,215
Now I want to display the value of x,

42
00:02:09,215 --> 00:02:12,034
but I will use always with quotations.

43
00:02:12,034 --> 00:02:14,750
That is the better practice and best practice.

44
00:02:14,750 --> 00:02:17,180
And please do follow this one.

45
00:02:17,180 --> 00:02:22,535
Sorry. Dollar x.

46
00:02:22,535 --> 00:02:26,345
And of course you can also use curly braces, no problem.

47
00:02:26,345 --> 00:02:30,855
That's it. Fine.

48
00:02:30,855 --> 00:02:34,015
Now, not only number two,

49
00:02:34,015 --> 00:02:37,330
you can also store some float point into a variable called y,

50
00:02:37,330 --> 00:02:38,805
any variable you can take.

51
00:02:38,805 --> 00:02:40,450
And you can take some string.

52
00:02:40,450 --> 00:02:43,435
I mean, you can store some string India variable.

53
00:02:43,435 --> 00:02:48,895
And whenever if your string is having a space at that time,

54
00:02:48,895 --> 00:02:53,515
you how to use quotations for your data and to assign your data into your variable.

55
00:02:53,515 --> 00:02:58,930
Basically, you can use quotations for all variables like x equals two in

56
00:02:58,930 --> 00:03:04,750
quotations to why coastal quotations 5-6 m equals two in quotations shell.

57
00:03:04,750 --> 00:03:08,995
But quotations are required for your data

58
00:03:08,995 --> 00:03:13,830
whenever if your data is having a space. Otherwise in only two.

59
00:03:13,830 --> 00:03:16,910
Use quotations for your data to

60
00:03:16,910 --> 00:03:19,955
assign your data into your variable. Let me show you that.

61
00:03:19,955 --> 00:03:26,615
Suppose I'm having a variable called Young and I am storing shell India variable young.

62
00:03:26,615 --> 00:03:28,655
Then I can write m equals to shell.

63
00:03:28,655 --> 00:03:29,285
That's fine.

64
00:03:29,285 --> 00:03:31,805
And I can see that data off your m.

65
00:03:31,805 --> 00:03:33,320
Yes, I'm getting.

66
00:03:33,320 --> 00:03:37,925
But suppose I'm having a shell scripting as my data.

67
00:03:37,925 --> 00:03:40,955
And if you observe that data is having some spaces,

68
00:03:40,955 --> 00:03:43,025
at that time, you had to use quotations.

69
00:03:43,025 --> 00:03:44,600
Otherwise it will do an adder.

70
00:03:44,600 --> 00:03:48,240
Now see that if I use quotations, then it's fine.

71
00:03:50,290 --> 00:03:54,140
Now see echo dollar p.

72
00:03:54,140 --> 00:03:55,715
That's it.

73
00:03:55,715 --> 00:03:57,095
Be clear.

74
00:03:57,095 --> 00:03:59,975
Whenever, if your data is having some spaces,

75
00:03:59,975 --> 00:04:05,780
then please follow quotations to assign your data to your variable.

76
00:04:05,780 --> 00:04:11,735
And next thing, suppose if you want to assign command output India variable,

77
00:04:11,735 --> 00:04:14,825
be clear, command or put into the variable.

78
00:04:14,825 --> 00:04:21,755
See already we have seen how to store the command output India file, some demo 2.txt.

79
00:04:21,755 --> 00:04:24,005
And if you see the content of demo 2.txt,

80
00:04:24,005 --> 00:04:27,260
you're getting the list of files or directories which are there in

81
00:04:27,260 --> 00:04:31,685
the current location because we'd redirected unless or put into your file.

82
00:04:31,685 --> 00:04:35,030
And whenever if you redirect or whenever if you create

83
00:04:35,030 --> 00:04:40,055
a file that will store in your hard disk on your file system.

84
00:04:40,055 --> 00:04:44,630
But the variables are not storing on your file systems or on your hard disk.

85
00:04:44,630 --> 00:04:50,285
They are storing while executing your core or while running your terminal.

86
00:04:50,285 --> 00:04:53,600
The data we store in your RAM memory.

87
00:04:53,600 --> 00:04:56,330
Be clear. Fine.

88
00:04:56,330 --> 00:04:59,420
Now my requirement is if I run any command,

89
00:04:59,420 --> 00:05:02,135
this command output I want to store in the variable,

90
00:05:02,135 --> 00:05:03,815
be clear, not into your file.

91
00:05:03,815 --> 00:05:07,595
If it is India file, you can use redirection symbol greater than symbol.

92
00:05:07,595 --> 00:05:08,810
Now I'm digging.

93
00:05:08,810 --> 00:05:12,545
Suppose D date variable equals two,

94
00:05:12,545 --> 00:05:14,945
the other parenthesis date.

95
00:05:14,945 --> 00:05:15,800
That's it.

96
00:05:15,800 --> 00:05:20,540
Now see the data newer D data output.

97
00:05:20,540 --> 00:05:23,075
So this is the command it is executing,

98
00:05:23,075 --> 00:05:26,090
and that result is storing into a variable called d.

99
00:05:26,090 --> 00:05:31,505
That's right, fine.

100
00:05:31,505 --> 00:05:36,950
And finally, whenever if you're declaring a variable at the time,

101
00:05:36,950 --> 00:05:40,805
you need to mention what type of data you are storing in t a variable,

102
00:05:40,805 --> 00:05:42,920
say suppose if you go with C,

103
00:05:42,920 --> 00:05:46,400
And in C language, suppose if you are assigning x equals to two,

104
00:05:46,400 --> 00:05:47,540
then before assigning you,

105
00:05:47,540 --> 00:05:53,465
hard to say that in dx means I'm storing number to India variable called x,

106
00:05:53,465 --> 00:05:56,750
that to integer number I'm storing in PAX.

107
00:05:56,750 --> 00:06:01,370
But in shell scripting, you no need to declare any datatype.

108
00:06:01,370 --> 00:06:07,145
And default data or value of a variable is an empty.

109
00:06:07,145 --> 00:06:10,265
Suppose I am defining,

110
00:06:10,265 --> 00:06:12,140
sorry, I, I'm displaying dollar x.

111
00:06:12,140 --> 00:06:13,955
Just know we defined the Ulrike.

112
00:06:13,955 --> 00:06:17,225
I'm index value. That's a reason we are getting x value.

113
00:06:17,225 --> 00:06:19,085
Modify, write.

114
00:06:19,085 --> 00:06:20,810
Suppose dollar.

115
00:06:20,810 --> 00:06:24,545
Yea, nowhere we define year variable value.

116
00:06:24,545 --> 00:06:26,105
And if I try to display that,

117
00:06:26,105 --> 00:06:28,370
we are getting an empty, that means.

118
00:06:28,370 --> 00:06:30,650
Default variable value.

119
00:06:30,650 --> 00:06:33,620
If you don't assign any value to a variable,

120
00:06:33,620 --> 00:06:37,625
then the variable value is always an EMT.

121
00:06:37,625 --> 00:06:42,875
And see that nowhere we define this variable, user variable.

122
00:06:42,875 --> 00:06:45,935
But if I tried to display that you are getting some data.

123
00:06:45,935 --> 00:06:51,485
Just now I told that default data or value of a variable is an empty.

124
00:06:51,485 --> 00:06:54,530
And we proved that with the variable called yay.

125
00:06:54,530 --> 00:06:56,630
But if I do this one,

126
00:06:56,630 --> 00:06:58,879
you are getting output as automation.

127
00:06:58,879 --> 00:07:00,605
Nowhere we defend this variable,

128
00:07:00,605 --> 00:07:06,020
then how it is giving the reason he's basically Unix world,

129
00:07:06,020 --> 00:07:07,925
there are two types of variables.

130
00:07:07,925 --> 00:07:13,640
They are system defined variables and user-defined variables.

131
00:07:13,640 --> 00:07:17,420
User-defined variables means, just now we define something like x,

132
00:07:17,420 --> 00:07:20,480
y, yum, p, something like that right there.

133
00:07:20,480 --> 00:07:24,050
I mean the variables which are defined by us.

134
00:07:24,050 --> 00:07:27,830
But system defined variables are nothing but fasting.

135
00:07:27,830 --> 00:07:30,560
Let me show you what are the system defined variable.

136
00:07:30,560 --> 00:07:32,840
To know system defined variable,

137
00:07:32,840 --> 00:07:37,370
you can run a command called ENV on your command line and see the result.

138
00:07:37,370 --> 00:07:41,600
So these all are system defined variables.

139
00:07:41,600 --> 00:07:43,955
So once if you open a terminal,

140
00:07:43,955 --> 00:07:47,570
by default, your system will create some variable.

141
00:07:47,570 --> 00:07:51,770
Some variables, those are nothing but system defined variables.

142
00:07:51,770 --> 00:07:57,020
Suppose, if I display Dollar,

143
00:07:57,020 --> 00:08:00,290
you're not getting an output because not envy is not

144
00:08:00,290 --> 00:08:03,470
a system defined variable are nowhere we defined that variable.

145
00:08:03,470 --> 00:08:07,970
But if I display user or suppose UID,

146
00:08:07,970 --> 00:08:09,710
then you are getting some value.

147
00:08:09,710 --> 00:08:12,750
Let me run home.

148
00:08:12,790 --> 00:08:17,870
So because these are system defined variable,

149
00:08:17,870 --> 00:08:19,430
other than that variables,

150
00:08:19,430 --> 00:08:23,060
if we select any other variable name which is not defined,

151
00:08:23,060 --> 00:08:24,725
then you will get an empty value.

152
00:08:24,725 --> 00:08:26,105
Be clear on that.

153
00:08:26,105 --> 00:08:30,035
So at anytime if you want to see the system defined variables simply you run,

154
00:08:30,035 --> 00:08:32,435
you can run ENV variable.

155
00:08:32,435 --> 00:08:34,490
That's fine.

156
00:08:34,490 --> 00:08:39,995
Now, the last concept is rules to define your variable names.

157
00:08:39,995 --> 00:08:43,775
Suppose as of now we have taken variable names as x,

158
00:08:43,775 --> 00:08:48,260
y, sum p, some yum, something like that, right?

159
00:08:48,260 --> 00:08:50,810
But before going to select a variable names,

160
00:08:50,810 --> 00:08:52,415
you have to follow some rules.

161
00:08:52,415 --> 00:08:59,420
They are, the very first one is the name of a variable can only contain alphabets,

162
00:08:59,420 --> 00:09:01,760
may be clipped, capital or small,

163
00:09:01,760 --> 00:09:03,650
and numbers 0 to nine.

164
00:09:03,650 --> 00:09:05,255
And then underscore.

165
00:09:05,255 --> 00:09:08,225
Other than these three group combinations,

166
00:09:08,225 --> 00:09:10,595
don't take any other variable.

167
00:09:10,595 --> 00:09:12,990
You have to take always.

168
00:09:13,150 --> 00:09:18,895
You are variable name from this. Characters.

169
00:09:18,895 --> 00:09:21,490
Maybe alphabets or numbers,

170
00:09:21,490 --> 00:09:23,739
or maybe underscore, maybe combinational.

171
00:09:23,739 --> 00:09:28,040
So, but don't start with a letter.

172
00:09:28,050 --> 00:09:31,150
Don't start with a number.

173
00:09:31,150 --> 00:09:34,615
Suppose. So what I'm saying is,

174
00:09:34,615 --> 00:09:36,745
I can write y equals to three,

175
00:09:36,745 --> 00:09:39,085
but don't write one-way equals to three.

176
00:09:39,085 --> 00:09:43,190
I mean, any number are Y1 you can define.

177
00:09:43,200 --> 00:09:51,310
So simply, your variable names can only start with a letter or underscore.

178
00:09:51,310 --> 00:09:54,010
Please don't start with a number.

179
00:09:54,010 --> 00:09:55,945
That that is the rule.

180
00:09:55,945 --> 00:10:00,085
Then finally, don't include a space in a variable name.

181
00:10:00,085 --> 00:10:03,430
Suppose I want to define a variable called my name.

182
00:10:03,430 --> 00:10:05,620
Then generally I can write my name Eco.

183
00:10:05,620 --> 00:10:08,000
Suppose Narendra.

184
00:10:09,210 --> 00:10:12,715
Then it is not allowed because I have given a space.

185
00:10:12,715 --> 00:10:14,695
But wherever space is there,

186
00:10:14,695 --> 00:10:19,345
that space you can replace with underscore because underscore is alone, No.

187
00:10:19,345 --> 00:10:20,965
And that's where you can take underscore.

188
00:10:20,965 --> 00:10:26,410
That's, you know, I can display my name, right?

189
00:10:26,410 --> 00:10:29,530
So guys, while taking your variable name,

190
00:10:29,530 --> 00:10:32,980
your variable names should contain only alphabets

191
00:10:32,980 --> 00:10:36,385
or numbers and underscore and don't start it,

192
00:10:36,385 --> 00:10:40,465
start your variable name with a width in number.

193
00:10:40,465 --> 00:10:46,220
But you can start with underscore or you are alphabets, maybe capitalist model.

194
00:10:46,220 --> 00:10:49,775
And don't include any space in your variable name.

195
00:10:49,775 --> 00:10:53,165
And one more thing, variables or case sends to.

196
00:10:53,165 --> 00:10:58,280
Suppose if I write x equals some number and capital X equals to some other number,

197
00:10:58,280 --> 00:11:00,110
then there are different echoed.

198
00:11:00,110 --> 00:11:01,370
The RX is different.

199
00:11:01,370 --> 00:11:04,310
Echo dollar capital X is different.

200
00:11:04,310 --> 00:11:06,740
That's fine.

201
00:11:06,740 --> 00:11:12,260
Now let me take a very simple script, variables dot SH.

202
00:11:12,260 --> 00:11:15,815
So I know that on my host, the shebang line,

203
00:11:15,815 --> 00:11:17,870
I'm in my shell line is,

204
00:11:17,870 --> 00:11:20,465
my shell location is this one.

205
00:11:20,465 --> 00:11:22,430
Now let me define some variables.

206
00:11:22,430 --> 00:11:25,249
I am defining suppose x equals some 56,

207
00:11:25,249 --> 00:11:28,310
Y equals to some 78 dot mine.

208
00:11:28,310 --> 00:11:31,460
Then let me take my name.

209
00:11:31,460 --> 00:11:36,305
I'm taking shell scripting.

210
00:11:36,305 --> 00:11:39,155
So that's why I'm using quotations for your string,

211
00:11:39,155 --> 00:11:41,480
because a string is having some space.

212
00:11:41,480 --> 00:11:46,385
That's the reason I am assigning this output with quotations for my variable.

213
00:11:46,385 --> 00:11:48,035
And if you observe here,

214
00:11:48,035 --> 00:11:52,895
your variable name may have any number of letters.

215
00:11:52,895 --> 00:11:57,680
But the condition is it should have only alphabets underscore.

216
00:11:57,680 --> 00:12:02,600
And of course I am not taking a variable name including a number you can take.

217
00:12:02,600 --> 00:12:08,600
Suppose I am taking x to x two equals to m Dickinson seven, that's it.

218
00:12:08,600 --> 00:12:12,215
Now I am displaying the values echo.

219
00:12:12,215 --> 00:12:16,190
Echo, dollar, x2.

220
00:12:16,190 --> 00:12:22,400
Echo dollar, my name equal.

221
00:12:22,400 --> 00:12:25,685
Yeah, even having one more variable called y, right?

222
00:12:25,685 --> 00:12:27,140
Let me define that here.

223
00:12:27,140 --> 00:12:30,060
Echo dollar wine.

224
00:12:31,060 --> 00:12:38,250
But she, let me save this and let me provide the execution permissions for this.

225
00:12:42,700 --> 00:12:45,575
And see the code first.

226
00:12:45,575 --> 00:12:49,020
Now let me run that and see the result.

227
00:12:49,800 --> 00:12:52,660
I misread the quotations here.

228
00:12:52,660 --> 00:12:54,835
I started the, I mean,

229
00:12:54,835 --> 00:12:57,910
echo quotations, my variable name,

230
00:12:57,910 --> 00:13:00,115
then I misheard to close that quotations.

231
00:13:00,115 --> 00:13:01,795
Thats the reason you are getting an error.

232
00:13:01,795 --> 00:13:03,890
Let me open.

233
00:13:09,300 --> 00:13:12,130
Now let me run that and see the result.

234
00:13:12,130 --> 00:13:14,290
It's working perfectly.

235
00:13:14,290 --> 00:13:19,405
And one more thing, you know that whenever if you run your shell script,

236
00:13:19,405 --> 00:13:21,490
it will run from top to down,

237
00:13:21,490 --> 00:13:23,485
one-by-one, line by line.

238
00:13:23,485 --> 00:13:25,345
The first-line always.

239
00:13:25,345 --> 00:13:27,700
It will tell it to your operating system.

240
00:13:27,700 --> 00:13:30,130
That is, please use this shell to

241
00:13:30,130 --> 00:13:33,195
execute the remaining lines which are there in your shell script.

242
00:13:33,195 --> 00:13:34,400
Fine.

243
00:13:34,400 --> 00:13:35,750
So the very first line,

244
00:13:35,750 --> 00:13:38,285
because of this, we are assigning in data to you.

245
00:13:38,285 --> 00:13:39,965
There is no output from this,

246
00:13:39,965 --> 00:13:42,110
just simply assigning a data,

247
00:13:42,110 --> 00:13:45,020
even here also we are assigning here also we are assigning some data

248
00:13:45,020 --> 00:13:48,155
to variable here also we are assigning here empty line.

249
00:13:48,155 --> 00:13:53,555
You can include any number of empty lines in your shell script. There is no problem.

250
00:13:53,555 --> 00:13:54,665
Fine.

251
00:13:54,665 --> 00:13:58,610
Now here I'm displaying the value of x with dollar,

252
00:13:58,610 --> 00:14:01,475
same VM falling for remaining variables.

253
00:14:01,475 --> 00:14:04,865
C engine of directly displaying your variable data,

254
00:14:04,865 --> 00:14:06,410
data of your variable.

255
00:14:06,410 --> 00:14:08,240
You can also write some message.

256
00:14:08,240 --> 00:14:12,155
Suppose I want to display like x equals two,

257
00:14:12,155 --> 00:14:14,885
then y equals two, Rx2 equals two.

258
00:14:14,885 --> 00:14:16,670
Be clear.

259
00:14:16,670 --> 00:14:22,110
Without a dollar, it wont to display the value it will display as it is.

260
00:14:23,440 --> 00:14:26,975
Now let me save this and see the core first.

261
00:14:26,975 --> 00:14:29,330
Now let me run that and see the out up the load.

262
00:14:29,330 --> 00:14:32,090
Put x equals to 56 you are getting

263
00:14:32,090 --> 00:14:37,130
because generally echo command will display the message.

264
00:14:37,130 --> 00:14:39,560
Yes, x equals two message.

265
00:14:39,560 --> 00:14:43,220
But dollar x is a variable value network in place of delta x,

266
00:14:43,220 --> 00:14:46,010
you are getting a value like waves for remaining variables.

267
00:14:46,010 --> 00:14:47,700
That's it.

268
00:14:47,860 --> 00:14:49,340
Okay?

269
00:14:49,340 --> 00:14:50,420
Okay, thank you.

270
00:14:50,420 --> 00:14:53,910
If you have any queries, please post your query.

