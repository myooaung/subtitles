1
00:00:00,000 --> 00:00:02,355
Friends here our concept ys,

2
00:00:02,355 --> 00:00:04,320
y loop with IFRS,

3
00:00:04,320 --> 00:00:06,195
see here i fs means

4
00:00:06,195 --> 00:00:11,760
internal field separator and which is one of the shell or a neutron meant variable.

5
00:00:11,760 --> 00:00:17,145
And these IFRS variable is used as a word or fields operator for the loops.

6
00:00:17,145 --> 00:00:19,500
Let me explain this with a simple example.

7
00:00:19,500 --> 00:00:23,190
Suppose I am taking a file called solvers info.plist.

8
00:00:23,190 --> 00:00:25,140
And here I have two lines.

9
00:00:25,140 --> 00:00:27,045
We know that by using while loop,

10
00:00:27,045 --> 00:00:29,460
we can read these two lines line by line.

11
00:00:29,460 --> 00:00:30,945
Let me show you that first.

12
00:00:30,945 --> 00:00:36,580
Simply I am writing IFRS while loop dot SH.

13
00:00:37,160 --> 00:00:42,160
I will do one thing. I will take the file name first.

14
00:00:45,180 --> 00:00:49,340
See, I am implementing a simple shell script.

15
00:00:50,640 --> 00:00:54,880
Simply VIII, read line.

16
00:00:54,880 --> 00:00:57,860
Do, done.

17
00:00:58,440 --> 00:01:05,120
So here I am writing a co dollar Lane

18
00:01:06,720 --> 00:01:11,860
and I am providing input for your while loop as server name so that whatever

19
00:01:11,860 --> 00:01:16,840
while loop will take line by line from our servers info.plist.

20
00:01:16,840 --> 00:01:21,925
Let me provide the execution permission for this shell script.

21
00:01:21,925 --> 00:01:25,520
I'll see your shell script one simply we are using while

22
00:01:25,520 --> 00:01:29,615
loop to read the content of a file line by line. Yes, you are getting.

23
00:01:29,615 --> 00:01:34,700
But after reading the line by your while loop,

24
00:01:34,700 --> 00:01:37,355
now in what line you have some number of fields.

25
00:01:37,355 --> 00:01:39,785
If I take space as the field separator,

26
00:01:39,785 --> 00:01:44,945
then I can say that foster fetal second, third, fourth, fifth.

27
00:01:44,945 --> 00:01:48,380
Now, you can separate your lines.

28
00:01:48,380 --> 00:01:51,170
You can BYOD what line into fields,

29
00:01:51,170 --> 00:01:54,110
into number of fields by using IFRS.

30
00:01:54,110 --> 00:01:57,230
By default, IFIS is the space.

31
00:01:57,230 --> 00:02:00,575
Now let me open your telescope once again.

32
00:02:00,575 --> 00:02:02,810
Now what I am doing is simply I am writing,

33
00:02:02,810 --> 00:02:05,615
instead of reading line, I am reading.

34
00:02:05,615 --> 00:02:09,380
You can take any variables simply I'm taking for your understanding purpose,

35
00:02:09,380 --> 00:02:10,955
your phony of two, something like that.

36
00:02:10,955 --> 00:02:14,120
If three, year, four, year five.

37
00:02:14,120 --> 00:02:17,585
C in my file,

38
00:02:17,585 --> 00:02:19,550
in each line or how five fields,

39
00:02:19,550 --> 00:02:22,085
if I take space as the field separator.

40
00:02:22,085 --> 00:02:27,095
Now see that. Now what I am doing is I'm printing only second field, you know,

41
00:02:27,095 --> 00:02:30,035
in your second freely how username from

42
00:02:30,035 --> 00:02:34,175
each line and see that this is your file in each line.

43
00:02:34,175 --> 00:02:37,265
The second field is the username.

44
00:02:37,265 --> 00:02:40,385
Now, I'm printing that.

45
00:02:40,385 --> 00:02:42,410
You are getting the username.

46
00:02:42,410 --> 00:02:48,470
Now I will do one more thing, internal space.

47
00:02:48,470 --> 00:02:50,885
Suppose I assume that this is some CSV file.

48
00:02:50,885 --> 00:02:57,005
So I'm taking header as server name or satellite IB.

49
00:02:57,005 --> 00:03:00,575
Then I'm taking username,

50
00:03:00,575 --> 00:03:04,940
then I'm taking user password.

51
00:03:04,940 --> 00:03:10,230
Then command one comma comma into.

52
00:03:10,600 --> 00:03:15,335
Now let me provide a comma for each and every field z.

53
00:03:15,335 --> 00:03:17,555
If you go with CSV file, in CSV files,

54
00:03:17,555 --> 00:03:23,310
how separate rows comma that way now I'm replacing space with comma.

55
00:03:24,640 --> 00:03:28,680
Just to give me a second, I will complete this.

56
00:03:40,740 --> 00:03:46,930
That's it. Now if I run our shell script C first of the content

57
00:03:46,930 --> 00:03:52,375
of your file, and shall escape.

58
00:03:52,375 --> 00:03:53,935
My if I run yourself,

59
00:03:53,935 --> 00:03:55,480
see the result, what you are getting,

60
00:03:55,480 --> 00:03:59,154
you are not getting anything because by default,

61
00:03:59,154 --> 00:04:03,625
while loop will split the line into fields based on space.

62
00:04:03,625 --> 00:04:05,575
But if you observe now,

63
00:04:05,575 --> 00:04:08,560
you are finally is not having spaces in the fields.

64
00:04:08,560 --> 00:04:10,630
It is having comma.

65
00:04:10,630 --> 00:04:13,395
That's why you see the result.

66
00:04:13,395 --> 00:04:18,050
How to modify your while loop in this way based on your input file.

67
00:04:18,050 --> 00:04:20,735
Based on your input file.

68
00:04:20,735 --> 00:04:23,780
What are the fields, what is the field separator in input file?

69
00:04:23,780 --> 00:04:25,910
Based on that, you have to mention that

70
00:04:25,910 --> 00:04:29,285
in case if you are fields subgrade is not the space.

71
00:04:29,285 --> 00:04:31,415
If anything, other than space,

72
00:04:31,415 --> 00:04:32,885
then you have to mention that here.

73
00:04:32,885 --> 00:04:38,915
Now, please consider comma as the separator and the way the lens into number of fields.

74
00:04:38,915 --> 00:04:41,720
Anyway, if we take in our current phi,

75
00:04:41,720 --> 00:04:43,730
if we take comma as the field separator,

76
00:04:43,730 --> 00:04:46,640
then I can say that this is first,

77
00:04:46,640 --> 00:04:49,310
second, third, fourth, fifth.

78
00:04:49,310 --> 00:04:51,875
Now sea, that isn't how it is going to work.

79
00:04:51,875 --> 00:04:57,310
You're getting username automation Tomcat, right?

80
00:04:57,310 --> 00:05:01,795
So this is the uses of field separator in your while loop.

81
00:05:01,795 --> 00:05:05,695
Suppose if you don't want to display this username header,

82
00:05:05,695 --> 00:05:08,840
if you don't want display the header, see that?

83
00:05:09,180 --> 00:05:12,385
Suppose you are getting all three lines.

84
00:05:12,385 --> 00:05:13,795
I don't want to get first-line,

85
00:05:13,795 --> 00:05:19,870
then simply use the replicate command and use number of regard naught equals to one.

86
00:05:19,870 --> 00:05:23,260
Printed the lines which are not equals to one,

87
00:05:23,260 --> 00:05:25,750
record number means except to fastlane,

88
00:05:25,750 --> 00:05:27,220
print all the lines.

89
00:05:27,220 --> 00:05:30,550
Now on this output just use while loop.

90
00:05:30,550 --> 00:05:36,160
No. Let me open our shell script.

91
00:05:36,160 --> 00:05:38,290
Very, very important one.

92
00:05:38,290 --> 00:05:41,980
Just try to understand my comment.

93
00:05:41,980 --> 00:05:44,420
I'm coming in this entire code.

94
00:05:44,460 --> 00:05:50,170
Same actually my intention is I don't want to get header while working with wild loop.

95
00:05:50,170 --> 00:05:52,630
That's why I'm filtering with the replicate command,

96
00:05:52,630 --> 00:05:54,775
these output I'm applying for a while loop.

97
00:05:54,775 --> 00:05:59,290
But anyway, fields operator how to take it as a comma.

98
00:05:59,290 --> 00:06:02,950
Then read fields, you have fun,

99
00:06:02,950 --> 00:06:06,760
you have to you have three, year,

100
00:06:06,760 --> 00:06:10,855
four, year five, then do none.

101
00:06:10,855 --> 00:06:15,430
Let me print only Foster Field and second field.

102
00:06:15,430 --> 00:06:17,015
So that host name,

103
00:06:17,015 --> 00:06:19,105
IP name on the user for that.

104
00:06:19,105 --> 00:06:23,800
Say as of now, take two phi foster families,

105
00:06:23,800 --> 00:06:26,860
server IP, secondary leaves username.

106
00:06:26,860 --> 00:06:30,595
Now, let me run this and see the result.

107
00:06:30,595 --> 00:06:34,390
Yes, you are getting, you are not getting second field.

108
00:06:34,390 --> 00:06:36,620
What is the problem?

109
00:06:38,310 --> 00:06:41,380
Okay. It's my mistake.

110
00:06:41,380 --> 00:06:42,100
Dollar.

111
00:06:42,100 --> 00:06:48,910
You have to, that's it you're getting.

112
00:06:48,910 --> 00:06:51,220
And one more thing you have to understand.

113
00:06:51,220 --> 00:06:57,895
Suppose if you open your text to file in that based on karma you how five fields.

114
00:06:57,895 --> 00:07:04,310
But what I'm doing is let me open shell script.

115
00:07:04,920 --> 00:07:09,025
I am dividing into only field 100 field.

116
00:07:09,025 --> 00:07:11,950
I'm not taking you have three or four or five.

117
00:07:11,950 --> 00:07:15,310
But if you observe anywhere fiery based on karma,

118
00:07:15,310 --> 00:07:17,995
you are going to get five fields for each and every line.

119
00:07:17,995 --> 00:07:20,830
But if I take the F1, F2,

120
00:07:20,830 --> 00:07:23,860
then how your while loop is going to treat them.

121
00:07:23,860 --> 00:07:27,200
First, let me print only a fantasy that exerted.

122
00:07:27,690 --> 00:07:31,300
You're getting IP because there is the first field.

123
00:07:31,300 --> 00:07:33,415
Then what about second field?

124
00:07:33,415 --> 00:07:37,180
Are you going to get only user C, U, R,

125
00:07:37,180 --> 00:07:42,205
a shell script ones and see your file in which you are information.

126
00:07:42,205 --> 00:07:44,380
Now based on karma,

127
00:07:44,380 --> 00:07:46,695
you have five fields in each and every line,

128
00:07:46,695 --> 00:07:48,800
but you are reading only two fields.

129
00:07:48,800 --> 00:07:52,190
And first, if we live as if now you're getting perfectly that IP,

130
00:07:52,190 --> 00:07:56,060
then what about second field C?

131
00:07:56,060 --> 00:08:00,590
That is, you are going to get remaining all fields as if to suppose if

132
00:08:00,590 --> 00:08:05,240
you are writing here exactly the number of fields which are there in your file.

133
00:08:05,240 --> 00:08:09,440
Then first, we will assign to foster field value.

134
00:08:09,440 --> 00:08:12,365
Second field will ascend to second field value. Third, thoughtful.

135
00:08:12,365 --> 00:08:16,730
Likewise. But if you are not passing exact number here, number of fields,

136
00:08:16,730 --> 00:08:20,690
then only the first to feel we'll assign to foster v,

137
00:08:20,690 --> 00:08:23,975
then u, F2 for remaining field.

138
00:08:23,975 --> 00:08:25,595
I mean, for last to fail,

139
00:08:25,595 --> 00:08:28,055
the remaining all fields will assigned to that variable.

140
00:08:28,055 --> 00:08:33,425
And that's it. The reason you are getting all values for the work you have to consider.

141
00:08:33,425 --> 00:08:38,720
So there's the uses of fields operator, new or while loops.

142
00:08:38,720 --> 00:08:43,160
And very, very important point is if you are going to change that default IFRS,

143
00:08:43,160 --> 00:08:46,955
then it is a good practice to store the virginal IF is inevitable.

144
00:08:46,955 --> 00:08:50,705
I mean, suppose in our shells kid,

145
00:08:50,705 --> 00:08:55,415
we modify or inside of your while loop internal fields submitter value that way,

146
00:08:55,415 --> 00:08:57,230
just take one extra variable,

147
00:08:57,230 --> 00:09:04,250
old IFF equals to store you were present IFRS variable we hear.

148
00:09:04,250 --> 00:09:06,230
And after completion of your while loop,

149
00:09:06,230 --> 00:09:10,815
just a replace i AFS value with the world IFRS so that

150
00:09:10,815 --> 00:09:16,630
you are not changing the virginal fields operator,

151
00:09:16,630 --> 00:09:19,690
internal fields operator, you are resetting

152
00:09:19,690 --> 00:09:22,735
your field separator after completion of while loop.

153
00:09:22,735 --> 00:09:23,920
That's it.

154
00:09:23,920 --> 00:09:26,620
So initially I'm storing my IFRS into

155
00:09:26,620 --> 00:09:29,260
this variable and after completion of my while loop,

156
00:09:29,260 --> 00:09:31,705
because in while loop we are changing our EFS value.

157
00:09:31,705 --> 00:09:33,340
So after completion of while loop,

158
00:09:33,340 --> 00:09:35,110
I'll, again, I want to reset my AF.

159
00:09:35,110 --> 00:09:36,730
That's why whatever the initial value is there,

160
00:09:36,730 --> 00:09:38,875
that value we are assigning to IFRS.

161
00:09:38,875 --> 00:09:40,840
So that is the important one.

162
00:09:40,840 --> 00:09:42,280
Okay?

163
00:09:42,280 --> 00:09:48,205
Okay, so finally, here's the syntax for a while loop with IFRS.

164
00:09:48,205 --> 00:09:49,810
That's it.

165
00:09:49,810 --> 00:09:52,610
Ok, thank you.

