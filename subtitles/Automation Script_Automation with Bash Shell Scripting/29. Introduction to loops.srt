1
00:00:01,010 --> 00:00:05,400
Friends here our concept is introduction to loops.

2
00:00:05,400 --> 00:00:09,270
See most languages how the concept of loops,

3
00:00:09,270 --> 00:00:10,710
and they are very,

4
00:00:10,710 --> 00:00:14,895
very useful to execute series of commands for n number of times.

5
00:00:14,895 --> 00:00:18,120
Let me explain this concept with a simple example.

6
00:00:18,120 --> 00:00:22,050
Suppose I have a shell script called Introduction to loops, not as such.

7
00:00:22,050 --> 00:00:25,530
If we have three lines of code in our shells

8
00:00:25,530 --> 00:00:29,250
taped and you get those three lines we implemented with echo command.

9
00:00:29,250 --> 00:00:31,470
Now let me run this first.

10
00:00:31,470 --> 00:00:33,390
You're getting some output.

11
00:00:33,390 --> 00:00:35,970
Now my requirement is same output.

12
00:00:35,970 --> 00:00:38,065
I want to get three times.

13
00:00:38,065 --> 00:00:43,025
Same output. I want to get three times or four times or five times.

14
00:00:43,025 --> 00:00:49,010
That means these three commands you have to execute for your given number of times.

15
00:00:49,010 --> 00:00:52,595
Let us assume that I want to get output phi times.

16
00:00:52,595 --> 00:00:54,890
Then let me modify this shell script.

17
00:00:54,890 --> 00:01:00,755
So if you want to rerun your commands again and again immediately for n number of times,

18
00:01:00,755 --> 00:01:03,620
then loops concept is useful.

19
00:01:03,620 --> 00:01:05,270
Let me read a simple loop,

20
00:01:05,270 --> 00:01:09,080
but don't worry about syntax of your loop.

21
00:01:09,080 --> 00:01:11,570
I'm writing very simple loop called a for loop.

22
00:01:11,570 --> 00:01:14,210
For each in, I'm writing some numbers,

23
00:01:14,210 --> 00:01:17,855
let's say 12345 times I wanted to get output.

24
00:01:17,855 --> 00:01:21,120
Then do an end with the Done.

25
00:01:21,250 --> 00:01:25,610
See, we already know simply if conditional if-else.

26
00:01:25,610 --> 00:01:28,745
So what I am writing, if some command one, if it is true,

27
00:01:28,745 --> 00:01:33,230
then what are the lines which we have between then and else are then block will execute.

28
00:01:33,230 --> 00:01:35,210
Else, Else block will execute.

29
00:01:35,210 --> 00:01:38,565
And whenever if you are writing lines,

30
00:01:38,565 --> 00:01:43,190
code statements between then and else or else and FA,

31
00:01:43,190 --> 00:01:46,250
while writing, you provide some space,

32
00:01:46,250 --> 00:01:49,070
then that is good for looking the same way.

33
00:01:49,070 --> 00:01:52,520
Whatever the lines we hope between do and done.

34
00:01:52,520 --> 00:01:55,370
We have three lines, right? For those three lanes.

35
00:01:55,370 --> 00:01:57,125
If you provide some space,

36
00:01:57,125 --> 00:01:58,970
if you provide some space,

37
00:01:58,970 --> 00:02:00,800
then it is good for looking purpose.

38
00:02:00,800 --> 00:02:04,640
Nothing is there. So that we can

39
00:02:04,640 --> 00:02:08,885
understand that these three lines are there between do and done.

40
00:02:08,885 --> 00:02:10,260
That's it.

41
00:02:11,260 --> 00:02:14,585
Even if you keep some empty lines, no problem.

42
00:02:14,585 --> 00:02:21,935
Now let me say what? I'm running. C, the output.

43
00:02:21,935 --> 00:02:24,815
You are getting. How many times?

44
00:02:24,815 --> 00:02:30,920
12345 items.

45
00:02:30,920 --> 00:02:37,400
So simply you are repeating your logic phi times by using for loop.

46
00:02:37,400 --> 00:02:39,365
Not only this case.

47
00:02:39,365 --> 00:02:42,005
Let me explain with one more example.

48
00:02:42,005 --> 00:02:45,035
Suppose I am moving into these laboratory.

49
00:02:45,035 --> 00:02:47,630
So here we have different types of files.

50
00:02:47,630 --> 00:02:50,900
First, let me take this file and I want to

51
00:02:50,900 --> 00:02:54,935
check whether this file is having execution permission or not.

52
00:02:54,935 --> 00:02:58,175
Let me get a very simple shell script.

53
00:02:58,175 --> 00:03:03,725
Check execution permission, dot SH.

54
00:03:03,725 --> 00:03:06,665
Start with your shebang line.

55
00:03:06,665 --> 00:03:10,055
So you can implement with the if-else or using

56
00:03:10,055 --> 00:03:13,925
logical AND logical OR operator by clubbing three commands.

57
00:03:13,925 --> 00:03:15,785
First, let me write logical and,

58
00:03:15,785 --> 00:03:18,290
and logical or operator with the help of those.

59
00:03:18,290 --> 00:03:22,205
So two operators, suppose I am taking the given file,

60
00:03:22,205 --> 00:03:25,295
whether it is having execution permission or not, you have to test it.

61
00:03:25,295 --> 00:03:27,694
We how test operators.

62
00:03:27,694 --> 00:03:30,245
File test operator iPhone X.

63
00:03:30,245 --> 00:03:33,095
If this file is really having execution permission,

64
00:03:33,095 --> 00:03:34,700
Then this test will become true.

65
00:03:34,700 --> 00:03:41,960
If it is true, I want to execute one more command called let's say echo.

66
00:03:41,960 --> 00:03:48,260
This file is having execution permission.

67
00:03:48,260 --> 00:03:50,345
If it is not having,

68
00:03:50,345 --> 00:03:52,205
I want to exclude some other command.

69
00:03:52,205 --> 00:03:54,515
So if your first command is getting fail,

70
00:03:54,515 --> 00:03:56,360
then I want to exclude some other calm and

71
00:03:56,360 --> 00:04:00,335
not this other time you had to club with logical are a go.

72
00:04:00,335 --> 00:04:06,050
File is not having execution.

73
00:04:06,050 --> 00:04:09,230
Permission. Let say.

74
00:04:09,230 --> 00:04:12,210
So this is simple way.

75
00:04:12,280 --> 00:04:15,200
Let me provide the execution permission for

76
00:04:15,200 --> 00:04:18,390
this file because we need to run the shell script.

77
00:04:18,790 --> 00:04:21,320
Now I'm running seal output.

78
00:04:21,320 --> 00:04:23,990
That file is having execution permission.

79
00:04:23,990 --> 00:04:27,425
Anyway, same syntax, same logic.

80
00:04:27,425 --> 00:04:29,945
You can also implement by using if and else.

81
00:04:29,945 --> 00:04:33,095
Now I will implement with fl if an else block,

82
00:04:33,095 --> 00:04:36,155
simply if you're foster command.

83
00:04:36,155 --> 00:04:37,760
If that first command is true,

84
00:04:37,760 --> 00:04:40,685
whatever the command we are executing that you hard to write under then block,

85
00:04:40,685 --> 00:04:42,635
nothing is that, but it's simple.

86
00:04:42,635 --> 00:04:46,565
Remove that and illogical and then enter,

87
00:04:46,565 --> 00:04:49,325
then enter in that.

88
00:04:49,325 --> 00:04:51,830
You just write the command which we want to

89
00:04:51,830 --> 00:04:55,115
exclude whenever you were first attest to command the success.

90
00:04:55,115 --> 00:05:01,370
And else inside that else block,

91
00:05:01,370 --> 00:05:07,100
what are the command you want to exclude if your test condition is failed? That's it.

92
00:05:07,100 --> 00:05:10,790
So previous and this index both are same.

93
00:05:10,790 --> 00:05:13,400
I mean, both will work in the same way.

94
00:05:13,400 --> 00:05:16,565
Let me save it and I'm running.

95
00:05:16,565 --> 00:05:20,285
We are getting same output. Now let me take one more file.

96
00:05:20,285 --> 00:05:24,335
I want to check to files whether they're having exclusion permission or not.

97
00:05:24,335 --> 00:05:27,519
Let me take HTTP version Pong.asm.

98
00:05:27,519 --> 00:05:32,260
I'm taking this file and eye opening our shell script.

99
00:05:32,260 --> 00:05:36,565
Now that is first Logic E just to check for FASTA file.

100
00:05:36,565 --> 00:05:38,155
Now I have one more file.

101
00:05:38,155 --> 00:05:40,450
So first let me copy that file here.

102
00:05:40,450 --> 00:05:42,025
Now, same logic.

103
00:05:42,025 --> 00:05:43,660
The only thing is filename is different.

104
00:05:43,660 --> 00:05:44,200
No.

105
00:05:44,200 --> 00:05:46,060
Same logic you are repeating,

106
00:05:46,060 --> 00:05:47,860
but filename is different, right?

107
00:05:47,860 --> 00:05:50,605
Understand. Same logic you are repeating.

108
00:05:50,605 --> 00:05:53,140
The only difference is filename.

109
00:05:53,140 --> 00:05:56,150
Now I am replacing that file.

110
00:06:03,720 --> 00:06:06,130
So wherever you have that file,

111
00:06:06,130 --> 00:06:12,180
I am replacing that file. In this way.

112
00:06:16,930 --> 00:06:18,920
That's it.

113
00:06:18,920 --> 00:06:22,445
So if that file is having really execution permissions,

114
00:06:22,445 --> 00:06:23,630
then you will get, yes,

115
00:06:23,630 --> 00:06:29,600
it is having execution permissions or else you will get NOT having execution permissions.

116
00:06:29,600 --> 00:06:33,395
Now let me remove this line.

117
00:06:33,395 --> 00:06:35,960
Let me say we see your code

118
00:06:35,960 --> 00:06:41,555
once you are checking execution permission for this file and this file.

119
00:06:41,555 --> 00:06:44,240
So to check execution permission for first of all,

120
00:06:44,240 --> 00:06:45,545
you are having logic here,

121
00:06:45,545 --> 00:06:49,905
but same logic you are repeating with some different filename.

122
00:06:49,905 --> 00:06:54,340
Now first let me run and see the output you are getting for first to file.

123
00:06:54,340 --> 00:06:58,734
It is having execution permission for secondary is not having execution permissions.

124
00:06:58,734 --> 00:06:59,890
That's fine.

125
00:06:59,890 --> 00:07:03,130
But if you're out ten files at a time,

126
00:07:03,130 --> 00:07:06,940
you had to check for ten files wherever they are having exclusion permissions or not,

127
00:07:06,940 --> 00:07:11,515
then you how to implement this type of logic for ten files.

128
00:07:11,515 --> 00:07:13,270
As of now you have two files,

129
00:07:13,270 --> 00:07:16,960
then you have to implement this logic for eight more files.

130
00:07:16,960 --> 00:07:20,455
I mean, you have to copy and pasted this eight more times.

131
00:07:20,455 --> 00:07:27,265
So why should we unnecessarily increase our core length if your logic is same,

132
00:07:27,265 --> 00:07:29,679
except some few values.

133
00:07:29,679 --> 00:07:32,369
So here, except this filename.

134
00:07:32,369 --> 00:07:34,910
And the logic is same here and here.

135
00:07:34,910 --> 00:07:36,980
Even if you repeated for eight more files,

136
00:07:36,980 --> 00:07:38,750
logic will be the same.

137
00:07:38,750 --> 00:07:41,000
Now in that case you can modify,

138
00:07:41,000 --> 00:07:43,910
you can use loops concept.

139
00:07:43,910 --> 00:07:46,820
So they just basics guys.

140
00:07:46,820 --> 00:07:48,725
Let me commend all those.

141
00:07:48,725 --> 00:07:51,815
Foster two logics.

142
00:07:51,815 --> 00:07:55,320
Comment I'm using multi-line comment.

143
00:07:58,090 --> 00:08:00,440
Now I am using for loop.

144
00:08:00,440 --> 00:08:05,015
First, let me let the syntax for each in.

145
00:08:05,015 --> 00:08:06,890
So whatever the files you are having,

146
00:08:06,890 --> 00:08:08,810
first let me copy those two files.

147
00:08:08,810 --> 00:08:12,410
And those two files just to provide in your for loop syntax,

148
00:08:12,410 --> 00:08:16,055
FASTA file, space file.

149
00:08:16,055 --> 00:08:19,130
In case if you have some ten files, yes,

150
00:08:19,130 --> 00:08:24,875
you can provide all ten files here with spaces, then do w1.

151
00:08:24,875 --> 00:08:26,750
And here each is a variable.

152
00:08:26,750 --> 00:08:29,270
You can take anything here, like our variable.

153
00:08:29,270 --> 00:08:31,985
We know whenever if you want to define a variable, we have some rules.

154
00:08:31,985 --> 00:08:36,790
The same way you can take any name here such that it is a valid variable name.

155
00:08:36,790 --> 00:08:37,655
That's it.

156
00:08:37,655 --> 00:08:42,050
And this allows whatever the logic you how know,

157
00:08:42,050 --> 00:08:45,305
to verify for one single file that logic

158
00:08:45,305 --> 00:08:49,130
just a copy and pasted inside of your do and done.

159
00:08:49,130 --> 00:08:52,295
I mean inside of your loop block.

160
00:08:52,295 --> 00:08:54,900
Let me paste it first.

161
00:08:59,100 --> 00:09:02,620
See whenever if you are writing your code inside of a loop,

162
00:09:02,620 --> 00:09:05,785
it is better to provide at least two spaces.

163
00:09:05,785 --> 00:09:10,600
Then again, AN inside of you reef condition you how some block four that

164
00:09:10,600 --> 00:09:18,440
I'm giving to more spaces. That's it.

165
00:09:21,180 --> 00:09:26,020
Now, your file is not fixed one,

166
00:09:26,020 --> 00:09:28,270
you are having different files, right?

167
00:09:28,270 --> 00:09:31,735
So that filename will automatically save into this each.

168
00:09:31,735 --> 00:09:34,060
That's why instead of using your file name here,

169
00:09:34,060 --> 00:09:36,760
you can take this variable and we know how to substitute

170
00:09:36,760 --> 00:09:40,910
variable value by using dollar, that variable name.

171
00:09:40,910 --> 00:09:46,745
Now, I am substituting dollar.each.

172
00:09:46,745 --> 00:09:48,965
Wherever he, how your file name.

173
00:09:48,965 --> 00:09:53,540
Just substitute that with the help of a variable called each y each.

174
00:09:53,540 --> 00:09:55,145
You can take any variable,

175
00:09:55,145 --> 00:09:59,390
just follow the rules to define your variable name.

176
00:09:59,390 --> 00:10:00,440
Your variable.

177
00:10:00,440 --> 00:10:04,715
It should have only alphabets and underscore and desserts.

178
00:10:04,715 --> 00:10:08,600
And it should not start with a number. That's it.

179
00:10:08,600 --> 00:10:13,220
Now see here. Instead of writing two times,

180
00:10:13,220 --> 00:10:15,455
your if conditions are given only one time.

181
00:10:15,455 --> 00:10:19,655
And that logic written inside of a loop, then how it will work?

182
00:10:19,655 --> 00:10:22,370
Very simple. Let me explain that.

183
00:10:22,370 --> 00:10:24,740
So whenever if you run your code,

184
00:10:24,740 --> 00:10:26,630
your firm in for loop,

185
00:10:26,630 --> 00:10:29,255
you have a variable that is your concentration.

186
00:10:29,255 --> 00:10:31,100
By default, the first value,

187
00:10:31,100 --> 00:10:32,450
which is I mean the first to file,

188
00:10:32,450 --> 00:10:37,760
which is there in your for loop syntax that will store into this each variable first.

189
00:10:37,760 --> 00:10:41,165
And by taking these filename into each,

190
00:10:41,165 --> 00:10:43,580
your for loop will enter into or will

191
00:10:43,580 --> 00:10:46,475
execute the block which is there between blue and done.

192
00:10:46,475 --> 00:10:49,265
So while executing first time,

193
00:10:49,265 --> 00:10:53,240
it will take the first to file limit to each unduly

194
00:10:53,240 --> 00:10:57,545
exclude so that you are if condition is executing on first to file.

195
00:10:57,545 --> 00:11:01,310
Once it is done, the logic liquidities there between do and done,

196
00:11:01,310 --> 00:11:02,720
between do and done.

197
00:11:02,720 --> 00:11:05,705
Once it is done automatically, you are photovoltaic.

198
00:11:05,705 --> 00:11:09,725
Second filename into each and same block will execute once again.

199
00:11:09,725 --> 00:11:13,460
So finally, how many times it will execute means how many files you are providing

200
00:11:13,460 --> 00:11:17,615
here are how many values you are providing here that many number of times.

201
00:11:17,615 --> 00:11:21,560
The logic which is there between do undone that will execute.

202
00:11:21,560 --> 00:11:22,430
That's it.

203
00:11:22,430 --> 00:11:26,880
Very simple. Now let me save it and execute it.

204
00:11:29,570 --> 00:11:32,520
Let me save it.

205
00:11:39,400 --> 00:11:41,390
See your core.

206
00:11:41,390 --> 00:11:43,715
Now this code is commented, it won't execute.

207
00:11:43,715 --> 00:11:45,650
The remaining part is this one.

208
00:11:45,650 --> 00:11:48,455
Now I'm running that code.

209
00:11:48,455 --> 00:11:51,110
See there getting same output,

210
00:11:51,110 --> 00:11:52,955
not only for two files.

211
00:11:52,955 --> 00:11:56,150
Now you can prove it any number of files in your loop.

212
00:11:56,150 --> 00:11:57,890
Let me take one more file.

213
00:11:57,890 --> 00:12:00,140
Let me take our shells could be itself.

214
00:12:00,140 --> 00:12:03,000
We can take any file name.

215
00:12:04,900 --> 00:12:11,165
Now I am taking one more file in here. That's a.

216
00:12:11,165 --> 00:12:15,215
Now this block will exclude three times because you have three files here.

217
00:12:15,215 --> 00:12:19,850
Not only files, only thing is how many values you are having here as of now,

218
00:12:19,850 --> 00:12:21,575
how files are zed value?

219
00:12:21,575 --> 00:12:26,045
So three files you're having three times real x good, while excluding first-time,

220
00:12:26,045 --> 00:12:28,550
each will take, I mean, inside of each,

221
00:12:28,550 --> 00:12:32,585
the value of first to file name we'll store automatically.

222
00:12:32,585 --> 00:12:37,085
And second time, these filename will go to each variable part-time.

223
00:12:37,085 --> 00:12:43,655
These filename will go to each variable so that you are looping is working on all files.

224
00:12:43,655 --> 00:12:47,660
See whenever if you're executing first-time automatically,

225
00:12:47,660 --> 00:12:49,520
each value is this one.

226
00:12:49,520 --> 00:12:51,830
That is called one iteration.

227
00:12:51,830 --> 00:12:52,864
Iteration.

228
00:12:52,864 --> 00:12:55,130
It is executing one time iteration.

229
00:12:55,130 --> 00:12:57,770
Second iteration means whenever it is executing for

230
00:12:57,770 --> 00:13:01,025
loop by taking each variable value as second file name,

231
00:13:01,025 --> 00:13:02,975
that is called second iteration.

232
00:13:02,975 --> 00:13:08,465
Now, instead of saying this loop is executing three times, instead of that,

233
00:13:08,465 --> 00:13:13,085
we can say that for loop is repeated three times

234
00:13:13,085 --> 00:13:18,560
or three iterations or done by using your for loop for given these values.

235
00:13:18,560 --> 00:13:19,865
That's it.

236
00:13:19,865 --> 00:13:25,100
Now let me save it. You'll see

237
00:13:25,100 --> 00:13:28,670
that our cells could be is having any execution permissions.

238
00:13:28,670 --> 00:13:30,395
That's why we're able to run dot slash.

239
00:13:30,395 --> 00:13:32,300
And this file is having exhibition permission,

240
00:13:32,300 --> 00:13:35,165
but for this file you don't have execution permission.

241
00:13:35,165 --> 00:13:36,245
That's a.

242
00:13:36,245 --> 00:13:42,425
So that is the simple way to understand a simple for loop concept.

243
00:13:42,425 --> 00:13:44,615
And one more thing here.

244
00:13:44,615 --> 00:13:51,240
As of now, if you open your shell script manually, we are providing.

245
00:13:53,340 --> 00:13:55,885
Sorry, I was kept in check, right?

246
00:13:55,885 --> 00:13:56,590
Yeah.

247
00:13:56,590 --> 00:13:59,470
Manually you are providing your file names.

248
00:13:59,470 --> 00:14:04,900
But whenever if I run myself, skip automatically,

249
00:14:04,900 --> 00:14:07,780
it has to take all the files which are there in

250
00:14:07,780 --> 00:14:11,635
the current location from where you are running your shell script.

251
00:14:11,635 --> 00:14:14,290
From where you are running your shell script from

252
00:14:14,290 --> 00:14:17,575
that location automatically it has to pick all the files.

253
00:14:17,575 --> 00:14:19,600
Then how you can modify this logic?

254
00:14:19,600 --> 00:14:20,725
Very simple.

255
00:14:20,725 --> 00:14:22,870
C, We know if you're an ls command,

256
00:14:22,870 --> 00:14:25,795
you're going to get all the files which are there in the current location.

257
00:14:25,795 --> 00:14:28,525
Now, a less output I want to substitute,

258
00:14:28,525 --> 00:14:30,145
I want to do to the for loop.

259
00:14:30,145 --> 00:14:34,315
We know if you want to assign the output of a command to your variable,

260
00:14:34,315 --> 00:14:36,350
then we are using dollar parenthesis.

261
00:14:36,350 --> 00:14:38,090
Inside that we are writing LS.

262
00:14:38,090 --> 00:14:40,670
I mean, we are using the syntax right?

263
00:14:40,670 --> 00:14:43,820
Where originally syntax, same syntax.

264
00:14:43,820 --> 00:14:48,335
Instead of writing your file names in your for loop, you can use this.

265
00:14:48,335 --> 00:14:50,720
Let me write it.

266
00:14:50,720 --> 00:14:54,980
Let me comment only the for loop line as of now, whatever we have,

267
00:14:54,980 --> 00:14:58,490
let me rewrite new for loop for

268
00:14:58,490 --> 00:15:02,120
each in dollar Ls so

269
00:15:02,120 --> 00:15:04,100
that you were shell script will automatically

270
00:15:04,100 --> 00:15:06,635
pick all the files which are there in the current location.

271
00:15:06,635 --> 00:15:08,915
Suppose you may have a 100 files.

272
00:15:08,915 --> 00:15:13,040
So now your loop will repeat a 100 times.

273
00:15:13,040 --> 00:15:15,965
While repeating each time automatically you are,

274
00:15:15,965 --> 00:15:18,845
each variable will be the different file name.

275
00:15:18,845 --> 00:15:21,710
It will take all you are a 100 files one by one,

276
00:15:21,710 --> 00:15:26,150
and it will repeat for a 100 times in case if you're a 100 files in the current location.

277
00:15:26,150 --> 00:15:30,570
But how many files you're having that many number of times your loop will repeat.

278
00:15:31,930 --> 00:15:34,055
Now, let me run this,

279
00:15:34,055 --> 00:15:38,730
see that you're getting your information for all files.

280
00:15:39,040 --> 00:15:46,955
Now my requirement is my script has to take the given path.

281
00:15:46,955 --> 00:15:48,725
It should not consider.

282
00:15:48,725 --> 00:15:50,660
It should not consider the current path.

283
00:15:50,660 --> 00:15:54,800
See whenever if you run the shells could always it will work on current path only.

284
00:15:54,800 --> 00:15:56,870
I may take any park.

285
00:15:56,870 --> 00:15:59,720
Now what I will do is first I will copy this shell script.

286
00:15:59,720 --> 00:16:03,605
Let me take only this logic because I need only this.

287
00:16:03,605 --> 00:16:06,680
I will come out from the directory.

288
00:16:06,680 --> 00:16:09,980
So here I'm creating one more shell script.

289
00:16:09,980 --> 00:16:17,960
Check execution permission file of your files.

290
00:16:17,960 --> 00:16:22,610
For given. I mean,

291
00:16:22,610 --> 00:16:25,260
check for each and every file.

292
00:16:25,750 --> 00:16:33,480
Now see what I'm doing is let me write shebang line.

293
00:16:36,460 --> 00:16:40,970
First-time pasting our shell script.

294
00:16:40,970 --> 00:16:44,520
Let me rearrange this spaces.

295
00:17:01,630 --> 00:17:05,170
So you don't forget whenever if you start with the,

296
00:17:05,170 --> 00:17:07,790
if don't forget to close with their file.

297
00:17:07,790 --> 00:17:11,645
And for loops, we are starting with the do and we hope to end with a done.

298
00:17:11,645 --> 00:17:16,385
So this is the logic which is repeated by your for loop.

299
00:17:16,385 --> 00:17:18,260
Now instead of LS,

300
00:17:18,260 --> 00:17:21,740
What I'm vagueness, given path, I'm taking a variable.

301
00:17:21,740 --> 00:17:25,550
Given path equals $2.1.

302
00:17:25,550 --> 00:17:28,865
I mean, I will send path from command line arguments.

303
00:17:28,865 --> 00:17:33,065
Then I will substitute that path here.

304
00:17:33,065 --> 00:17:35,420
Given park.

305
00:17:35,420 --> 00:17:39,750
Let's say, let me save it.

306
00:17:40,470 --> 00:17:44,785
I will take the complete path, then come back.

307
00:17:44,785 --> 00:17:49,360
Let me probably the execution permission for our shell script.

308
00:17:49,360 --> 00:17:52,540
Now I'm running our shell script while

309
00:17:52,540 --> 00:17:57,175
running first command-line argument I am passing as a path.

310
00:17:57,175 --> 00:18:03,745
That path will take an inside of a loop. See that?

311
00:18:03,745 --> 00:18:09,010
Likewise. Now your shells QP is ready to check execution,

312
00:18:09,010 --> 00:18:14,815
permission for execution, permission of all files which are there in a given path.

313
00:18:14,815 --> 00:18:15,760
That's it.

314
00:18:15,760 --> 00:18:20,480
So in this way you can use your loops concept.

315
00:18:20,800 --> 00:18:23,510
Right? And one more thing here,

316
00:18:23,510 --> 00:18:25,490
whenever if you are working with command line arguments,

317
00:18:25,490 --> 00:18:26,660
we know how to handle that.

318
00:18:26,660 --> 00:18:28,700
If you are not passing command-line arguments,

319
00:18:28,700 --> 00:18:33,515
then let me recollect our concept.

320
00:18:33,515 --> 00:18:35,675
First, I am writing a logic to verify

321
00:18:35,675 --> 00:18:37,910
whether you are parsing command line argument or not.

322
00:18:37,910 --> 00:18:43,265
If you remember, if dollar hash,

323
00:18:43,265 --> 00:18:45,050
if it is not equals to one,

324
00:18:45,050 --> 00:18:47,840
if you are passing Juno arguments are more than one,

325
00:18:47,840 --> 00:18:52,310
then I don't want to run my shell script because I need exactly only one path.

326
00:18:52,310 --> 00:18:55,340
That's why I'm giving simply not equals to one.

327
00:18:55,340 --> 00:18:56,615
If it is not equals to one,

328
00:18:56,615 --> 00:18:58,920
then I have to say CPU.

329
00:18:59,080 --> 00:19:03,935
Usage of this script is simply your shelf skipped.

330
00:19:03,935 --> 00:19:07,020
Then any path.

331
00:19:09,430 --> 00:19:13,445
Then offer that I don't want to run my shell script, then I how to exit.

332
00:19:13,445 --> 00:19:15,320
As of now if I run,

333
00:19:15,320 --> 00:19:17,820
see that how it is working.

334
00:19:20,290 --> 00:19:22,910
It is working on current path,

335
00:19:22,910 --> 00:19:24,965
but we're not passing you in any path.

336
00:19:24,965 --> 00:19:30,245
Mysql has to work if I pass any path. That's why.

337
00:19:30,245 --> 00:19:37,940
See this. If this condition is satisfied,

338
00:19:37,940 --> 00:19:39,335
it means you are not passing any path,

339
00:19:39,335 --> 00:19:40,790
then I want to stop my shells kept.

340
00:19:40,790 --> 00:19:42,365
I don't want to exclude this logic.

341
00:19:42,365 --> 00:19:46,205
So then how you can do that simply. Here.

342
00:19:46,205 --> 00:19:48,965
You can write exit command.

343
00:19:48,965 --> 00:19:52,385
We know what is the uses of exit simply or shell script will exit.

344
00:19:52,385 --> 00:19:55,400
Instead of executing remaining lanes which are there in your code.

345
00:19:55,400 --> 00:19:57,215
It will exit whenever.

346
00:19:57,215 --> 00:19:59,705
If this condition is true, if this is true,

347
00:19:59,705 --> 00:20:03,935
it will execute first this echo command so that you will come to know how to pass.

348
00:20:03,935 --> 00:20:05,930
Then we have exit command.

349
00:20:05,930 --> 00:20:07,790
Because of that, your shell will terminate.

350
00:20:07,790 --> 00:20:11,285
I mean, you are shells could will terminate instead of running remaining lines.

351
00:20:11,285 --> 00:20:16,175
Let me save it and now run without passing any command line arguments and see the result.

352
00:20:16,175 --> 00:20:18,875
You have to run your script in this way.

353
00:20:18,875 --> 00:20:22,310
So it is nothing but whenever if you are working with command line arguments,

354
00:20:22,310 --> 00:20:25,430
you have to take care by using this simple logic.

355
00:20:25,430 --> 00:20:26,525
Okay?

356
00:20:26,525 --> 00:20:29,960
Nothing. In this way.

357
00:20:29,960 --> 00:20:32,900
We have different types of loops in the word shell scripting,

358
00:20:32,900 --> 00:20:34,940
Bash shell scripting there like for loop,

359
00:20:34,940 --> 00:20:37,775
while loop and the loop and select loop.

360
00:20:37,775 --> 00:20:42,260
So we hold different scenarios to use your loops.

361
00:20:42,260 --> 00:20:47,300
I mean, in some cases for loop is helpful in some cases while and in some cases until,

362
00:20:47,300 --> 00:20:48,830
and in some cases select loop.

363
00:20:48,830 --> 00:20:50,090
So based on situation,

364
00:20:50,090 --> 00:20:51,995
you have to select our required loop.

365
00:20:51,995 --> 00:20:56,795
So we will do all practices in our later sessions. Okay.

366
00:20:56,795 --> 00:20:58,260
Thank you.

