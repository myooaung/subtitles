WEBVTT
ï»¿1
00:00:01.010 --> 00:00:02.820
Hi friends.

2
00:00:02.820 --> 00:00:07.080
In this video, we are going to see how to read variable values

3
00:00:07.080 --> 00:00:12.345
from command line for your advocate command or AWPA script.

4
00:00:12.345 --> 00:00:14.880
Okay, so in our previous video,

5
00:00:14.880 --> 00:00:17.939
we have seen how to define a variable

6
00:00:17.939 --> 00:00:21.945
in your edible decay command or in your script directly.

7
00:00:21.945 --> 00:00:23.535
Now I don't want to define,

8
00:00:23.535 --> 00:00:27.030
I don't want to fix a variable value in your arabic,

9
00:00:27.030 --> 00:00:28.965
a command or edit wiki script.

10
00:00:28.965 --> 00:00:32.370
I want to read that variable value from command line.

11
00:00:32.370 --> 00:00:36.075
And then how you can do this and make sure that guys,

12
00:00:36.075 --> 00:00:37.455
as of now, right,

13
00:00:37.455 --> 00:00:41.915
we did not include it anywhere AWPA inside of your shell script.

14
00:00:41.915 --> 00:00:47.545
Still we are working with only a WK iota b get command and script.

15
00:00:47.545 --> 00:00:54.430
Reading a WK variables from Shell script is a different story.

16
00:00:54.430 --> 00:00:55.885
Right?

17
00:00:55.885 --> 00:00:59.410
How to read variable values from command line or

18
00:00:59.410 --> 00:01:02.815
how to read variable values for your AW k's are different.

19
00:01:02.815 --> 00:01:05.185
Now we are going to work only on your WK.

20
00:01:05.185 --> 00:01:10.090
Well, going forward, we will discuss combination of your shell and AWPA and how

21
00:01:10.090 --> 00:01:15.370
to read variable values inside of your shell script for your data became right, fine.

22
00:01:15.370 --> 00:01:17.185
So just remember that as of now,

23
00:01:17.185 --> 00:01:20.020
you are going to work with only a WK, Right?

24
00:01:20.020 --> 00:01:22.660
So before going to enter into this concept,

25
00:01:22.660 --> 00:01:25.670
right, we like command line.

26
00:01:25.670 --> 00:01:30.590
Command for your AWS is righty how some options here.

27
00:01:30.590 --> 00:01:36.785
Then you can write begin action here,

28
00:01:36.785 --> 00:01:40.170
then some pattern or condition.

29
00:01:40.690 --> 00:01:43.830
Let me write it once.

30
00:01:45.700 --> 00:01:48.920
And then actual action here,

31
00:01:48.920 --> 00:01:54.095
then N. And then you are input.

32
00:01:54.095 --> 00:02:00.080
So input either in terms of filename or it can run some command

33
00:02:00.080 --> 00:02:06.585
and that command output also you can provide as a input for your AWS command.

34
00:02:06.585 --> 00:02:09.715
Right? Now.

35
00:02:09.715 --> 00:02:12.160
You're here also, you need single quotation.

36
00:02:12.160 --> 00:02:13.765
That's fine.

37
00:02:13.765 --> 00:02:17.935
See these options, right?

38
00:02:17.935 --> 00:02:22.690
Basically these options are helpful for your AWPA whenever,

39
00:02:22.690 --> 00:02:25.900
if you include AWPA inside of your shell scripts,

40
00:02:25.900 --> 00:02:28.120
right as of now we are not including

41
00:02:28.120 --> 00:02:30.790
your shelves replicate command inside of your shell script.

42
00:02:30.790 --> 00:02:33.310
We are purely discussing about AWPA.

43
00:02:33.310 --> 00:02:36.789
That's why anybody here also you can use it options,

44
00:02:36.789 --> 00:02:40.960
but this is not suggestible way to use your options.

45
00:02:40.960 --> 00:02:47.800
Whenever if you are going to use only a WK command independently from your shell script.

46
00:02:47.800 --> 00:02:50.240
That's why just I am deleting this.

47
00:02:53.190 --> 00:02:59.030
Now for your air replicate command or for Arabic script.

48
00:03:00.870 --> 00:03:03.955
This is your syntax.

49
00:03:03.955 --> 00:03:06.700
Right? Now.

50
00:03:06.700 --> 00:03:09.340
Already we know from our previous video,

51
00:03:09.340 --> 00:03:11.815
if you want to define a variable value,

52
00:03:11.815 --> 00:03:14.450
right, the best two places.

53
00:03:18.240 --> 00:03:22.585
Sorry, this is BGI and begin block.

54
00:03:22.585 --> 00:03:24.670
1 second. Yes, fine.

55
00:03:24.670 --> 00:03:29.740
So whenever if you want to define a variable in your AWPA command or scrape,

56
00:03:29.740 --> 00:03:32.620
the best places. Begin block.

57
00:03:32.620 --> 00:03:33.955
Right?

58
00:03:33.955 --> 00:03:37.540
Now you are not initializing your variables.

59
00:03:37.540 --> 00:03:41.110
Now, you are not initializing your variables.

60
00:03:41.110 --> 00:03:47.785
Then what you are doing, you want to read your variables from command line, right?

61
00:03:47.785 --> 00:03:53.740
You want to provide some input for your AW K. Then at that time, right?

62
00:03:53.740 --> 00:04:00.490
Known enough begin action, right?

63
00:04:00.490 --> 00:04:01.390
Fine.

64
00:04:01.390 --> 00:04:05.080
Now here also now you can remove your begin.

65
00:04:05.080 --> 00:04:09.290
Even if you keep no, I'm all right.

66
00:04:09.300 --> 00:04:11.155
That's fine.

67
00:04:11.155 --> 00:04:14.925
Then see in your shell scripts, right?

68
00:04:14.925 --> 00:04:19.505
While working with your shell script to read some variable value from command line,

69
00:04:19.505 --> 00:04:21.860
you are using a read command.

70
00:04:21.860 --> 00:04:24.260
But for your AW K,

71
00:04:24.260 --> 00:04:26.630
you don't have any command like read,

72
00:04:26.630 --> 00:04:31.655
to read some value from command line while running your public key is correct.

73
00:04:31.655 --> 00:04:35.840
Then the only way you How to provide some input

74
00:04:35.840 --> 00:04:41.100
is either in terms of file or in terms of some command output.

75
00:04:41.140 --> 00:04:42.695
Right?

76
00:04:42.695 --> 00:04:49.250
Now, assume that I want to read two variables for my AWPA.

77
00:04:49.250 --> 00:04:54.380
Let's say I want to read a value and b value using your AWPA command,

78
00:04:54.380 --> 00:04:56.465
and I wanted to split that values.

79
00:04:56.465 --> 00:04:58.895
Then how you can do it?

80
00:04:58.895 --> 00:05:00.395
Right?

81
00:05:00.395 --> 00:05:04.370
Now, I am telling that you can provide your input

82
00:05:04.370 --> 00:05:08.645
for your AW k using either filename or command.

83
00:05:08.645 --> 00:05:13.685
Now whenever if you are providing your file name or command at that time,

84
00:05:13.685 --> 00:05:16.745
you can do your required action,

85
00:05:16.745 --> 00:05:20.795
right, using your actual action block.

86
00:05:20.795 --> 00:05:23.885
Not with the begin or not with end.

87
00:05:23.885 --> 00:05:27.305
And of course in the end you can print something, but no problem.

88
00:05:27.305 --> 00:05:30.800
But whenever if you're providing some input for your EW k,

89
00:05:30.800 --> 00:05:33.589
then you need to include this logic.

90
00:05:33.589 --> 00:05:40.110
Otherwise, there is no use by providing input for your AWPA command.

91
00:05:40.210 --> 00:05:45.035
Fine. Now you how to read variable values.

92
00:05:45.035 --> 00:05:47.540
Then what you need, you need to provide input in

93
00:05:47.540 --> 00:05:50.570
terms of file name or in terms of command.

94
00:05:50.570 --> 00:05:52.970
And whenever if you're providing input for

95
00:05:52.970 --> 00:05:56.585
your NEW K in terms of file or in terms of command output,

96
00:05:56.585 --> 00:05:59.030
you need to include this logic.

97
00:05:59.030 --> 00:06:02.105
And this is optional if you want to keep it.

98
00:06:02.105 --> 00:06:03.800
If you want to remove, you can remove it.

99
00:06:03.800 --> 00:06:05.795
Even begun also optional.

100
00:06:05.795 --> 00:06:08.135
Make sure that you are providing input.

101
00:06:08.135 --> 00:06:10.190
Then definitely you should have this logic here.

102
00:06:10.190 --> 00:06:12.275
Of course, part of our conditioning is your wish,

103
00:06:12.275 --> 00:06:14.660
but you need this block first thing.

104
00:06:14.660 --> 00:06:15.920
Right?

105
00:06:15.920 --> 00:06:17.030
Now.

106
00:06:17.030 --> 00:06:21.740
First I am taking a simple example with this format so that they can easily understand.

107
00:06:21.740 --> 00:06:26.510
Alright, C, I'm going to provide some command.

108
00:06:26.510 --> 00:06:29.900
With that command, I'm going to give inputs for my AW k,

109
00:06:29.900 --> 00:06:31.400
that is a and b values.

110
00:06:31.400 --> 00:06:32.915
We will do that command.

111
00:06:32.915 --> 00:06:35.720
But before that, a WK, Right?

112
00:06:35.720 --> 00:06:38.405
As I've no, I don't want any pattern or condition.

113
00:06:38.405 --> 00:06:39.890
And that is what I want to do.

114
00:06:39.890 --> 00:06:46.520
E's write, print E-value, right?

115
00:06:46.520 --> 00:06:48.305
Yj equals two.

116
00:06:48.305 --> 00:06:50.690
So here I want to print a value.

117
00:06:50.690 --> 00:06:53.735
That is, I will do something here.

118
00:06:53.735 --> 00:06:56.780
Then B value.

119
00:06:56.780 --> 00:06:59.990
Then I want to print here be valued.

120
00:06:59.990 --> 00:07:01.805
That's it.

121
00:07:01.805 --> 00:07:03.395
Then.

122
00:07:03.395 --> 00:07:09.065
So here what I'm doing is I'm simply doing a CO 26.

123
00:07:09.065 --> 00:07:10.520
Now what I'm doing is yeah,

124
00:07:10.520 --> 00:07:13.490
I'm filling as two and B,

125
00:07:13.490 --> 00:07:15.425
I am taking us six.

126
00:07:15.425 --> 00:07:20.435
No, you know, this is actual logic inside of this.

127
00:07:20.435 --> 00:07:22.790
If you remember your AW K command,

128
00:07:22.790 --> 00:07:29.000
right already we discussed this is $1.1 and this is $1.2 inner record, right?

129
00:07:29.000 --> 00:07:39.215
That's why what I'm doing is here I am writing $1.1 and I am writing here $1.2, dots it.

130
00:07:39.215 --> 00:07:43.070
Now let me copy this and run on your command line.

131
00:07:43.070 --> 00:07:46.410
Let me open my terminal.

132
00:07:47.160 --> 00:07:53.484
See that you are getting a equals two. And because 26.

133
00:07:53.484 --> 00:07:56.800
Now, instead of in this way,

134
00:07:56.800 --> 00:08:02.620
just to do what you do is you just saw a stored this value CAB and values in one file.

135
00:08:02.620 --> 00:08:07.555
Let me say it in this way to space six.

136
00:08:07.555 --> 00:08:10.930
So why I'm taking space means by default in Ojeda b,

137
00:08:10.930 --> 00:08:16.630
k is going to separate your records into fields based on space.

138
00:08:16.630 --> 00:08:22.750
Now what I want to do is now I need to provide

139
00:08:22.750 --> 00:08:30.440
input from file and infile I defined the values for my eNB values. I'll see the output.

140
00:08:31.170 --> 00:08:32.620
Right?

141
00:08:32.620 --> 00:08:34.300
You can also do one more way.

142
00:08:34.300 --> 00:08:38.785
I mean, instead of going in this way, right?

143
00:08:38.785 --> 00:08:44.770
I'm assigning a value equal to $1.1, right?

144
00:08:44.770 --> 00:08:46.390
That is first as statement.

145
00:08:46.390 --> 00:08:52.525
And now I want to write B equals $2.2 from your file second value.

146
00:08:52.525 --> 00:08:54.340
So you're writing multiple statements.

147
00:08:54.340 --> 00:08:57.069
You have to separate with colon, sorry, semicolon,

148
00:08:57.069 --> 00:09:01.075
right already we discussed in our previous video how to execute multiple statements.

149
00:09:01.075 --> 00:09:06.370
Then print directly I can write E,

150
00:09:06.370 --> 00:09:09.670
a and b, c output.

151
00:09:09.670 --> 00:09:13.610
But I need like a cos 2x E-value and B goes to b.

152
00:09:13.610 --> 00:09:15.680
Well that means I want to display some message,

153
00:09:15.680 --> 00:09:18.455
then j equals two.

154
00:09:18.455 --> 00:09:22.430
Then b equals two.

155
00:09:22.430 --> 00:09:24.215
The object.

156
00:09:24.215 --> 00:09:25.550
Right?

157
00:09:25.550 --> 00:09:28.280
So guys, this is one statement,

158
00:09:28.280 --> 00:09:29.330
this is one statement,

159
00:09:29.330 --> 00:09:30.650
and this is one more statement,

160
00:09:30.650 --> 00:09:31.760
three statements you are having

161
00:09:31.760 --> 00:09:35.150
not please statements you have to separate with semicolon.

162
00:09:35.150 --> 00:09:39.245
And as of no in your file you have only one line.

163
00:09:39.245 --> 00:09:41.209
You know, these action.

164
00:09:41.209 --> 00:09:45.200
If you remember, this actually is going to perform on each and every line of

165
00:09:45.200 --> 00:09:50.540
your input file or line you can also call as record, right?

166
00:09:50.540 --> 00:09:52.460
Let me add some more values for

167
00:09:52.460 --> 00:09:58.955
your in second lemma and defining a value as phi and B. Well S6.

168
00:09:58.955 --> 00:10:03.155
Now see the output you are going to get two times output because you have

169
00:10:03.155 --> 00:10:06.890
two records on each and every record your action is going to perform.

170
00:10:06.890 --> 00:10:08.720
This is actual logic, right?

171
00:10:08.720 --> 00:10:10.700
Actual action on your AWPA.

172
00:10:10.700 --> 00:10:13.310
See that from first record you are

173
00:10:13.310 --> 00:10:16.190
getting a value two and b value six from secondary God,

174
00:10:16.190 --> 00:10:19.320
you are getting a value, find the value six.

175
00:10:19.390 --> 00:10:21.695
Right?

176
00:10:21.695 --> 00:10:25.115
That's it. So guys,

177
00:10:25.115 --> 00:10:29.210
in this way you can provide input for over eight WK,

178
00:10:29.210 --> 00:10:31.955
I mean, to provide some variable values.

179
00:10:31.955 --> 00:10:34.055
And anyway, this is like command.

180
00:10:34.055 --> 00:10:36.725
Now what I want to do is I want to write a script.

181
00:10:36.725 --> 00:10:40.820
A public casted, then display and BAM, right?

182
00:10:40.820 --> 00:10:46.055
Taking display a and b values dot a WK, Right?

183
00:10:46.055 --> 00:10:52.115
So first I'm going to write your AWPA script without taking your shebang line.

184
00:10:52.115 --> 00:10:53.855
So if you don't take shebang line,

185
00:10:53.855 --> 00:10:55.340
how to run, you know, right?

186
00:10:55.340 --> 00:10:57.935
See, if you don't take shebang line,

187
00:10:57.935 --> 00:11:00.620
then how you can run your AWPA command, AWPA hyphen.

188
00:11:00.620 --> 00:11:07.235
If you were a WK script, then input file.

189
00:11:07.235 --> 00:11:08.300
Right?

190
00:11:08.300 --> 00:11:10.610
So now I'm going to add first AWPA script

191
00:11:10.610 --> 00:11:13.415
without including this shebang line inside of this script.

192
00:11:13.415 --> 00:11:16.190
If you don't mention shebang line instead of your script,

193
00:11:16.190 --> 00:11:20.255
then from command line you hard to run in this way, right first, see that?

194
00:11:20.255 --> 00:11:25.295
So now I don't need begin because I'm not initializing anything.

195
00:11:25.295 --> 00:11:27.395
I want to read input from command line,

196
00:11:27.395 --> 00:11:28.565
I mean from file.

197
00:11:28.565 --> 00:11:30.455
That's why you want to do.

198
00:11:30.455 --> 00:11:33.065
I have to start with actual logic.

199
00:11:33.065 --> 00:11:35.825
Even though you could write begin, right?

200
00:11:35.825 --> 00:11:37.745
You just write begin on,

201
00:11:37.745 --> 00:11:42.365
close with some empty lines in case if you are getting confusion,

202
00:11:42.365 --> 00:11:43.850
simply denied some empty.

203
00:11:43.850 --> 00:11:45.320
Begin all snowball.

204
00:11:45.320 --> 00:11:46.955
Now you have to write c,

205
00:11:46.955 --> 00:11:48.080
I'm sorry, or command line.

206
00:11:48.080 --> 00:11:50.255
First what you are writing begin.

207
00:11:50.255 --> 00:11:52.220
Then if you need,

208
00:11:52.220 --> 00:11:54.290
suppose some pattern condition, you can write it as up.

209
00:11:54.290 --> 00:11:58.235
No, I don't want any pattern or condition that it like a make actual logic.

210
00:11:58.235 --> 00:12:03.095
Not to write your actual logic of the completion of your begin just right forward.

211
00:12:03.095 --> 00:12:04.730
You just taught in this way.

212
00:12:04.730 --> 00:12:06.755
And here, right?

213
00:12:06.755 --> 00:12:09.170
I am writing a equals $2.1.

214
00:12:09.170 --> 00:12:10.939
Step-by-step.

215
00:12:10.939 --> 00:12:15.140
B equals $2.2 means in your file second field,

216
00:12:15.140 --> 00:12:19.370
then I want to print a equals two here, a value,

217
00:12:19.370 --> 00:12:25.230
then b equals two.

218
00:12:30.850 --> 00:12:33.155
So if you don't write comma,

219
00:12:33.155 --> 00:12:34.850
right? So what will happen?

220
00:12:34.850 --> 00:12:37.640
You just observe that. And here guys,

221
00:12:37.640 --> 00:12:39.620
you are writing your statements in multiple lines.

222
00:12:39.620 --> 00:12:42.275
That's why no need to write separate semicolon.

223
00:12:42.275 --> 00:12:46.850
Now, you-how you were scripting this way.

224
00:12:46.850 --> 00:12:50.690
Now if you want to run a WK hyphen F display,

225
00:12:50.690 --> 00:12:54.930
then provide your input AB dot TXT sees output.

226
00:12:55.000 --> 00:13:01.295
Now I don't want to provide my AWPA command outside of this, in this way,

227
00:13:01.295 --> 00:13:04.310
then I can include this as a shebang line inside of

228
00:13:04.310 --> 00:13:08.190
your AW case clip. Now see the output.

229
00:13:12.210 --> 00:13:17.485
So under been a WK, That's it.

230
00:13:17.485 --> 00:13:22.480
Now just you, me the exclusion permission for this.

231
00:13:22.480 --> 00:13:25.540
Now I am running display, but, uh, you know,

232
00:13:25.540 --> 00:13:28.705
to provide your input filename always,

233
00:13:28.705 --> 00:13:30.880
because you're now you're reading $1.1,

234
00:13:30.880 --> 00:13:33.550
$100 to those are nothing but from each line you

235
00:13:33.550 --> 00:13:36.265
are taking Foster Field and second field, right?

236
00:13:36.265 --> 00:13:43.090
See, absorbed your script once a equals the alone means in each and every line.

237
00:13:43.090 --> 00:13:45.355
And the way this is actual logic, you know,

238
00:13:45.355 --> 00:13:48.940
actual logic is going to perform on each and every line of your input.

239
00:13:48.940 --> 00:13:51.430
Now in input you how two lines?

240
00:13:51.430 --> 00:13:54.410
So while working with the first line, this action,

241
00:13:54.410 --> 00:13:56.510
right, a value is nothing but two and we,

242
00:13:56.510 --> 00:13:57.890
well anything but six.

243
00:13:57.890 --> 00:14:02.915
And after completion of this entire logic on your first line of your given file,

244
00:14:02.915 --> 00:14:05.780
automatically it will go on to work on next line.

245
00:14:05.780 --> 00:14:07.250
So in next line,

246
00:14:07.250 --> 00:14:11.525
ye value is phi and B value six way I'm saying ye value phi and B value six Mei.

247
00:14:11.525 --> 00:14:14.930
Ye value your writing assigning US $1.1.

248
00:14:14.930 --> 00:14:16.490
$1.1 means foster field.

249
00:14:16.490 --> 00:14:17.150
Right?

250
00:14:17.150 --> 00:14:19.730
Now let me run and see the output.

251
00:14:19.730 --> 00:14:24.800
That's it. Right? Now.

252
00:14:24.800 --> 00:14:29.435
Just to write some decoration in begin block, right?

253
00:14:29.435 --> 00:14:32.375
You know what, you are going to write in begin and end.

254
00:14:32.375 --> 00:14:34.595
They are going to execute only once.

255
00:14:34.595 --> 00:14:39.200
Only the action which is there in actual logic is going to repeat on each and every line,

256
00:14:39.200 --> 00:14:41.480
but begin and end, they're going to execute only once.

257
00:14:41.480 --> 00:14:42.515
That's why I am writing here.

258
00:14:42.515 --> 00:14:50.285
Print finding a and b values from AB dot TXT file.

259
00:14:50.285 --> 00:14:51.155
That's it.

260
00:14:51.155 --> 00:14:56.000
And I'm going to write end block also,

261
00:14:56.000 --> 00:14:58.175
and is also going to execute only once.

262
00:14:58.175 --> 00:15:01.100
It is not going to depend on your input file.

263
00:15:01.100 --> 00:15:10.115
Completed. Reading yea and v values.

264
00:15:10.115 --> 00:15:13.185
That's a close it.

265
00:15:13.185 --> 00:15:15.460
Now run your script,

266
00:15:15.460 --> 00:15:19.120
dot your AWS, good space, a 2.txt.

267
00:15:19.120 --> 00:15:23.305
See that finding completed between that,

268
00:15:23.305 --> 00:15:26.395
you are repeating your actual action on each and every line.

269
00:15:26.395 --> 00:15:27.280
Okay?

270
00:15:27.280 --> 00:15:30.530
So guys, now,

271
00:15:31.440 --> 00:15:36.625
actually this is whenever if you want to write a script completely in terms of a WK,

272
00:15:36.625 --> 00:15:38.665
The he's a syntax you ought to follow.

273
00:15:38.665 --> 00:15:45.865
But if you want to include your AWPA script inside of your shells gave,

274
00:15:45.865 --> 00:15:48.130
then just to follow in this way.

275
00:15:48.130 --> 00:15:50.065
That means you just,

276
00:15:50.065 --> 00:15:52.750
even though if it is there no problem, right?

277
00:15:52.750 --> 00:15:56.690
You have to run the AWPA hyphen f, then display.

278
00:15:56.690 --> 00:15:58.970
I mean you are to edible script logic,

279
00:15:58.970 --> 00:16:01.760
then your file name, it will work.

280
00:16:01.760 --> 00:16:05.420
So this syntax, right?

281
00:16:05.420 --> 00:16:07.850
And you are worried for syntax,

282
00:16:07.850 --> 00:16:09.440
either this one or this one,

283
00:16:09.440 --> 00:16:12.110
those two are going to use in your shell scripts.

284
00:16:12.110 --> 00:16:15.740
So anyway, while discussing with the combination of your AWPA command,

285
00:16:15.740 --> 00:16:18.380
edible gets skipped it with the shell will discuss that.

286
00:16:18.380 --> 00:16:19.850
Okay, so here's the,

287
00:16:19.850 --> 00:16:21.620
here's the simple way to read

288
00:16:21.620 --> 00:16:26.030
your variable values from command line in your end-of-life care scripts.

289
00:16:26.030 --> 00:16:26.960
Okay?

290
00:16:26.960 --> 00:16:30.390
Okay guys, thank you for watching this video.

