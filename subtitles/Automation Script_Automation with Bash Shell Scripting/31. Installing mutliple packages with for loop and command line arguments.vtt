WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.080
Friends here we're implementing a simple shell script just to

2
00:00:04.080 --> 00:00:07.890
install multiple packages like VIM, HTTPD engine X.

3
00:00:07.890 --> 00:00:12.105
And we are implementing this shell script with the help of for loop.

4
00:00:12.105 --> 00:00:14.490
Let me implement with step-by-step.

5
00:00:14.490 --> 00:00:17.340
See whenever if you want to install any package,

6
00:00:17.340 --> 00:00:21.630
you should be the root user or you were current users should have root religious.

7
00:00:21.630 --> 00:00:26.970
Now, let me move into root and I'm moving into OPT.

8
00:00:26.970 --> 00:00:29.100
Now here I'm implementing a shell script.

9
00:00:29.100 --> 00:00:35.235
Let me take shell script name as install multiple packages dot SH.

10
00:00:35.235 --> 00:00:39.280
Let me write the very first line as our shebang line.

11
00:00:39.350 --> 00:00:43.060
Then I'm writing some author name.

12
00:00:44.520 --> 00:00:47.990
What is the purpose of the shell script?

13
00:00:50.070 --> 00:00:58.360
Installing multiple packages, but all the name you want,

14
00:00:58.360 --> 00:00:59.710
you can do that comment here.

15
00:00:59.710 --> 00:01:00.730
That's fine.

16
00:01:00.730 --> 00:01:06.955
Suppose let me try to install yum install via young hyphen white.

17
00:01:06.955 --> 00:01:09.310
So why we are using year Ivan way means

18
00:01:09.310 --> 00:01:11.530
if you don't you Ivan way while running your shell script,

19
00:01:11.530 --> 00:01:13.420
which will ask yes or no confirmation.

20
00:01:13.420 --> 00:01:15.835
By default, I'm giving hyphen white.

21
00:01:15.835 --> 00:01:17.960
That's fine.

22
00:01:18.000 --> 00:01:23.390
Now, let me provide the execution permissions for this.

23
00:01:24.700 --> 00:01:28.910
Now I am running from root.

24
00:01:28.910 --> 00:01:29.825
Yes.

25
00:01:29.825 --> 00:01:33.170
So actually we already installed that VIM package,

26
00:01:33.170 --> 00:01:35.030
but we'll take it out that as of no,

27
00:01:35.030 --> 00:01:36.590
you're able to run the shell script.

28
00:01:36.590 --> 00:01:39.185
Now let me exit from this route.

29
00:01:39.185 --> 00:01:42.395
And let me navigate from automation user,

30
00:01:42.395 --> 00:01:44.450
let me navigate to OPT.

31
00:01:44.450 --> 00:01:46.820
Now I'm trying to run.

32
00:01:46.820 --> 00:01:48.305
See the result.

33
00:01:48.305 --> 00:01:49.715
You are getting.

34
00:01:49.715 --> 00:01:51.020
Permission.

35
00:01:51.020 --> 00:01:54.740
You don't now permissions, you should be the root user to run this command.

36
00:01:54.740 --> 00:01:57.530
So actually we are using yum command to run your m command.

37
00:01:57.530 --> 00:01:59.645
You should be the root user or you should run from.

38
00:01:59.645 --> 00:02:03.215
You should run with root privileges, sudo privileges.

39
00:02:03.215 --> 00:02:07.190
Thus, the reason inside of your shells can be hard to take care.

40
00:02:07.190 --> 00:02:08.915
If you are not the root user,

41
00:02:08.915 --> 00:02:12.140
you have to say, please run this from root.

42
00:02:12.140 --> 00:02:16.685
So if you remember somewhere we have taken care. What is that?

43
00:02:16.685 --> 00:02:22.400
If I'm testing ID of user,

44
00:02:22.400 --> 00:02:25.340
if it is not equal to 0 means you are not the root user,

45
00:02:25.340 --> 00:02:29.180
then only I want to say some error, then echo.

46
00:02:29.180 --> 00:02:35.000
Please run from root user are width,

47
00:02:35.000 --> 00:02:39.060
pseudo privilege, anything is fine.

48
00:02:42.250 --> 00:02:44.165
That's it.

49
00:02:44.165 --> 00:02:49.895
Now let me save it. Again. Let me exit from root.

50
00:02:49.895 --> 00:02:54.125
Now I'm running our shell scripts with automation user.

51
00:02:54.125 --> 00:02:57.530
Now see the output you are getting.

52
00:02:57.530 --> 00:03:01.399
Please run from root user or with sudo privileges.

53
00:03:01.399 --> 00:03:02.600
That's fine.

54
00:03:02.600 --> 00:03:05.945
Then unnecessarily are getting this line or if you are not the root user,

55
00:03:05.945 --> 00:03:08.430
you should not run your command.

56
00:03:08.430 --> 00:03:10.445
If you are not the root user,

57
00:03:10.445 --> 00:03:13.130
you have to display these measures and then you had to stop it.

58
00:03:13.130 --> 00:03:16.520
But you don't have any logic to stop as of no.

59
00:03:16.520 --> 00:03:19.640
That way after completion of your reef condition, you are shelled.

60
00:03:19.640 --> 00:03:21.590
It'll try to execute this command.

61
00:03:21.590 --> 00:03:24.815
So if you are not the root user, we should not run these.

62
00:03:24.815 --> 00:03:27.725
That's the way, that's the reason we are taking here.

63
00:03:27.725 --> 00:03:32.510
Abort that. So if you are not the root user after executing these information,

64
00:03:32.510 --> 00:03:33.905
you have to stop your shell script.

65
00:03:33.905 --> 00:03:35.165
That's why.

66
00:03:35.165 --> 00:03:38.330
So what you have to do is let me move into root,

67
00:03:38.330 --> 00:03:42.060
because from root we calculated that shell script.

68
00:03:42.550 --> 00:03:45.650
Now immediately after this command,

69
00:03:45.650 --> 00:03:47.015
the harder right exit.

70
00:03:47.015 --> 00:03:50.915
Generally exit will do exit status as 0.

71
00:03:50.915 --> 00:03:54.515
But if you are not the root user,

72
00:03:54.515 --> 00:03:58.955
I don't want to exit status at 0 existed as gentlemen success.

73
00:03:58.955 --> 00:04:02.015
But eventually if you get this measure that is not a success.

74
00:04:02.015 --> 00:04:06.830
Let me show you that. So once again,

75
00:04:06.830 --> 00:04:09.240
I'm running our shell script form,

76
00:04:09.240 --> 00:04:12.640
our automation user. Now it's working fine.

77
00:04:12.640 --> 00:04:15.565
Please run from root user or with sudo privileges.

78
00:04:15.565 --> 00:04:17.560
Suppose if I run with sudo privileges,

79
00:04:17.560 --> 00:04:23.500
they will work pseudo it talking.

80
00:04:23.500 --> 00:04:28.195
But if I'm not running with sudo privileges,

81
00:04:28.195 --> 00:04:29.605
your script is running.

82
00:04:29.605 --> 00:04:31.750
And after running your script R command,

83
00:04:31.750 --> 00:04:34.555
we know how to check the status you're getting 0.

84
00:04:34.555 --> 00:04:38.020
Gentlemen, success, but this is not success rate.

85
00:04:38.020 --> 00:04:43.525
You use top row skip forcefully by using exit command, that means failed.

86
00:04:43.525 --> 00:04:49.570
By default, exit command is giving exit status as G20,

87
00:04:49.570 --> 00:04:52.890
but I don't want to get 0 whenever if I stop my script.

88
00:04:52.890 --> 00:05:00.155
That's why you see that you can pass some exit code in general getting geno.

89
00:05:00.155 --> 00:05:02.000
So I'm giving someone.

90
00:05:02.000 --> 00:05:03.845
So after running my shell script,

91
00:05:03.845 --> 00:05:08.600
if I see exit status has won the meaning for the days we are stopping

92
00:05:08.600 --> 00:05:11.270
the script because you are not the root user or

93
00:05:11.270 --> 00:05:13.970
you are not running with sudo privileges. I can understand that.

94
00:05:13.970 --> 00:05:15.950
Meaning if I see this one,

95
00:05:15.950 --> 00:05:19.805
see, let me exit from Rhode.

96
00:05:19.805 --> 00:05:21.320
Now I'm running or shell script.

97
00:05:21.320 --> 00:05:24.575
Now offer that if I see exit status one.

98
00:05:24.575 --> 00:05:28.355
Now edit record one means I can understand for my shell scape,

99
00:05:28.355 --> 00:05:33.150
I am giving a Git status as 11 means you are not running with the rude, that's it.

100
00:05:33.700 --> 00:05:41.615
That's fine. Now, see,

101
00:05:41.615 --> 00:05:43.730
if you are packages already installed,

102
00:05:43.730 --> 00:05:45.440
then why should we run this?

103
00:05:45.440 --> 00:05:49.160
I don't want to run it. Right? So that's

104
00:05:49.160 --> 00:05:52.280
why what I'm doing is I'm writing one more if condition.

105
00:05:52.280 --> 00:05:57.155
If, which we, I am.

106
00:05:57.155 --> 00:05:59.659
So if already VM in-store,

107
00:05:59.659 --> 00:06:03.365
let me show you this on your common law enforced, which we're young.

108
00:06:03.365 --> 00:06:05.660
If it is already installed, you are getting some path.

109
00:06:05.660 --> 00:06:09.800
Suppose I'm checking for some random package,

110
00:06:09.800 --> 00:06:16.835
see the exit status that the package is not installed affair getting an error,

111
00:06:16.835 --> 00:06:18.950
exit status is one means fail.

112
00:06:18.950 --> 00:06:21.185
So using this concept,

113
00:06:21.185 --> 00:06:25.100
I'm implementing simple if condition if which we're young.

114
00:06:25.100 --> 00:06:26.855
If Vm is there,

115
00:06:26.855 --> 00:06:29.375
then all that command will get success.

116
00:06:29.375 --> 00:06:31.265
Anyway, I don't want display output.

117
00:06:31.265 --> 00:06:35.610
Our error from this command does by simply I'm using dough null.

118
00:06:35.890 --> 00:06:40.700
Then, then if it is already success,

119
00:06:40.700 --> 00:06:42.290
then I don't want to install simply.

120
00:06:42.290 --> 00:06:50.490
I want to say here a coal already VM is installed.

121
00:06:52.000 --> 00:06:56.120
Let's say if you are,

122
00:06:56.120 --> 00:07:01.910
which we aim is fail means young VM command is not installed, then I'm installing.

123
00:07:01.910 --> 00:07:08.390
So before installing, just I want to say some message like a core installing.

124
00:07:08.390 --> 00:07:10.055
We I am.

125
00:07:10.055 --> 00:07:19.140
That's it. If I now be clear.

126
00:07:20.080 --> 00:07:23.795
Now you are having this as the first lender, the shebang line.

127
00:07:23.795 --> 00:07:25.715
These two are comments, they won't execute.

128
00:07:25.715 --> 00:07:27.335
Now there's the first if condition.

129
00:07:27.335 --> 00:07:28.625
If you are running from the root,

130
00:07:28.625 --> 00:07:30.980
this value is 00 nautical 0 falls,

131
00:07:30.980 --> 00:07:35.225
it will get fail means if doesn't allow to Xcode this block,

132
00:07:35.225 --> 00:07:37.895
that means it will skip the notice that next line,

133
00:07:37.895 --> 00:07:39.740
if which we I am,

134
00:07:39.740 --> 00:07:41.030
if I am is there,

135
00:07:41.030 --> 00:07:42.455
then this will get success.

136
00:07:42.455 --> 00:07:45.365
If it is success than you are if will execute this block.

137
00:07:45.365 --> 00:07:48.200
I mean, that Whatever Dakota courts are there,

138
00:07:48.200 --> 00:07:51.080
lines are there between then and else those lands will execute.

139
00:07:51.080 --> 00:07:52.865
That means it will skip this part.

140
00:07:52.865 --> 00:07:54.710
If we aim is not installed,

141
00:07:54.710 --> 00:07:56.075
then it will get failed.

142
00:07:56.075 --> 00:07:58.910
If it is failed, it will exclude LSA Bloch.

143
00:07:58.910 --> 00:08:02.210
That's now let me run and see the result.

144
00:08:02.210 --> 00:08:04.340
Bam already installed.

145
00:08:04.340 --> 00:08:05.705
Let me remove it manually.

146
00:08:05.705 --> 00:08:12.410
Young, remove VIM, hyphen way confirmation. It has been removed.

147
00:08:12.410 --> 00:08:16.700
Now I'm running or shell script C that isn't installing via Yum.

148
00:08:16.700 --> 00:08:18.470
That's it.

149
00:08:18.470 --> 00:08:22.175
Now while installing, I don't want to split this log.

150
00:08:22.175 --> 00:08:26.285
Actually these luggage, yum install VIM hyphen wait, command output.

151
00:08:26.285 --> 00:08:28.790
I don't want displayed these if you want no bomb,

152
00:08:28.790 --> 00:08:29.990
but I don't want display that,

153
00:08:29.990 --> 00:08:32.855
then you know how to hide that.

154
00:08:32.855 --> 00:08:42.005
Simply. No, null, not trick.

155
00:08:42.005 --> 00:08:45.395
But sometimes while installing your package,

156
00:08:45.395 --> 00:08:47.240
if that package is not available,

157
00:08:47.240 --> 00:08:49.055
then this will get failed.

158
00:08:49.055 --> 00:08:52.010
If it is such as no problem it is if it is failed,

159
00:08:52.010 --> 00:08:54.589
then you have to say some information.

160
00:08:54.589 --> 00:08:57.410
Now, I am clubbing with logical or, you know,

161
00:08:57.410 --> 00:09:00.290
whenever if you club two commands with a logical order,

162
00:09:00.290 --> 00:09:01.655
you first command is fail,

163
00:09:01.655 --> 00:09:03.950
then only this will execute.

164
00:09:03.950 --> 00:09:05.420
Else it won't execute.

165
00:09:05.420 --> 00:09:07.200
Otherwise.

166
00:09:07.270 --> 00:09:09.995
I'm taking in this way, if,

167
00:09:09.995 --> 00:09:13.805
if you remember, what is the Dollar Question, one value here.

168
00:09:13.805 --> 00:09:16.970
Whatever the previous command you are executing these,

169
00:09:16.970 --> 00:09:19.925
the command, this command status, dollar question mark.

170
00:09:19.925 --> 00:09:21.875
If that is equals to 0,

171
00:09:21.875 --> 00:09:24.545
then you can say that c.

172
00:09:24.545 --> 00:09:35.210
Then here I am saying that equal successfully installed VIM package metric.

173
00:09:35.210 --> 00:09:39.035
Sometimes if that package is not available, then you will get fame.

174
00:09:39.035 --> 00:09:46.564
So echo unable to install VIM package.

175
00:09:46.564 --> 00:09:50.795
So I am taking care if it is not installing close with their fight, that's it.

176
00:09:50.795 --> 00:09:52.685
So I guess if you observe here,

177
00:09:52.685 --> 00:09:54.695
this is firstly if condition

178
00:09:54.695 --> 00:09:58.505
If an else inside of LC blog,

179
00:09:58.505 --> 00:10:00.290
I'm 1 second I'm writing if and else.

180
00:10:00.290 --> 00:10:02.570
Yes, you can write it based on your requirement.

181
00:10:02.570 --> 00:10:06.005
I showed these two lines are a sufficient if it is perfect.

182
00:10:06.005 --> 00:10:12.005
Sometimes while installing it may get fail because if the packet is not available.

183
00:10:12.005 --> 00:10:16.010
So that's the reason for this command status in nothing but Delegation model.

184
00:10:16.010 --> 00:10:17.420
If that is 0 success,

185
00:10:17.420 --> 00:10:19.070
if it is not equal 0 fail.

186
00:10:19.070 --> 00:10:22.880
That's now, let me save it.

187
00:10:22.880 --> 00:10:27.155
First, let me remove VIM once again.

188
00:10:27.155 --> 00:10:30.830
Now I am running or shell script C that isn't installing

189
00:10:30.830 --> 00:10:35.130
via yum successfully installed VIM package that check.

190
00:10:36.760 --> 00:10:44.450
Now my requirement is I want to install multiple packages like VIM, HTTPD in Unix.

191
00:10:44.450 --> 00:10:49.160
Suppose that means same logic,

192
00:10:49.160 --> 00:10:51.215
whatever you implemented for VM,

193
00:10:51.215 --> 00:10:54.680
that logic you have to repeat two more times by taking

194
00:10:54.680 --> 00:10:59.405
one time HTTPD and for one more time in Unix.

195
00:10:59.405 --> 00:11:01.550
But instead of that,

196
00:11:01.550 --> 00:11:03.605
we have for loops.

197
00:11:03.605 --> 00:11:07.115
By using for loop, you can repeat this logic three times.

198
00:11:07.115 --> 00:11:08.540
For three packages.

199
00:11:08.540 --> 00:11:10.790
That's the reason here.

200
00:11:10.790 --> 00:11:12.455
I am using for loop.

201
00:11:12.455 --> 00:11:16.085
See that first I will implement in this way so that you can understand.

202
00:11:16.085 --> 00:11:19.200
First I will come in the below code.

203
00:11:22.900 --> 00:11:26.660
Now, I am taking four loop here.

204
00:11:26.660 --> 00:11:29.720
For each package.

205
00:11:29.720 --> 00:11:32.180
See these, each bag is a variable, right?

206
00:11:32.180 --> 00:11:33.350
You can take, I mean,

207
00:11:33.350 --> 00:11:37.550
in for-loop here it can take any variable based on situation.

208
00:11:37.550 --> 00:11:38.960
You can sell it any variable as of now,

209
00:11:38.960 --> 00:11:41.870
I'm installing packages that I'm taking each package

210
00:11:41.870 --> 00:11:48.170
in in sequence I will take here tribeca is we am HTTPD in Unix,

211
00:11:48.170 --> 00:11:50.720
Nazi, then do and done.

212
00:11:50.720 --> 00:11:57.275
So as of now simply I am writing a co current packages for to understand your loop.

213
00:11:57.275 --> 00:11:58.400
I'm giving this syntax.

214
00:11:58.400 --> 00:12:00.155
I'm in my, I am displaying that.

215
00:12:00.155 --> 00:12:01.760
We'll modify it.

216
00:12:01.760 --> 00:12:05.120
Just wait and run the script and see the result.

217
00:12:05.120 --> 00:12:08.645
So your for loop is able to take one-by-one package.

218
00:12:08.645 --> 00:12:12.650
But whatever the package you are taking one by one with the help of for loop that is

219
00:12:12.650 --> 00:12:16.910
storing in a variable called each package that is only you are displaying.

220
00:12:16.910 --> 00:12:21.770
Now what I will lose in place of this line between do and done.

221
00:12:21.770 --> 00:12:27.665
I will let this entire logic just by replacing V I am with the help of a dollar h by k,

222
00:12:27.665 --> 00:12:29.690
so that if it is working with

223
00:12:29.690 --> 00:12:32.645
first-time automatically each package will replace with VIM.

224
00:12:32.645 --> 00:12:35.015
Second time, actually booted our timing units.

225
00:12:35.015 --> 00:12:40.460
So that is the logic to use here for our concept.

226
00:12:40.460 --> 00:12:48.710
Now simply, let me open the escape. I am removing this.

227
00:12:48.710 --> 00:12:50.015
Simply.

228
00:12:50.015 --> 00:12:51.815
I'm pasting our code here.

229
00:12:51.815 --> 00:12:56.435
And whenever if you are writing some core between Dewan done inside of your loop,

230
00:12:56.435 --> 00:12:58.925
it's better to provide some spaces.

231
00:12:58.925 --> 00:13:01.320
See how MR. Ageing.

232
00:13:03.910 --> 00:13:08.930
So initially you may not get idea to whether to use loops or not.

233
00:13:08.930 --> 00:13:11.420
But if you implement for one package,

234
00:13:11.420 --> 00:13:14.360
then you will see later that same code you are

235
00:13:14.360 --> 00:13:17.570
repeating again and again immediately for three packages.

236
00:13:17.570 --> 00:13:20.630
Then why should we repeat same logic again and again immediately?

237
00:13:20.630 --> 00:13:22.250
Then we have a loops concept.

238
00:13:22.250 --> 00:13:25.790
By using that, we can repeat the same logic for any number of times.

239
00:13:25.790 --> 00:13:27.920
But here we need three number of times anyway,

240
00:13:27.920 --> 00:13:30.680
we know the names for three packages that y simply I'm

241
00:13:30.680 --> 00:13:34.325
mentioning three packages so that this logic will repeat three times.

242
00:13:34.325 --> 00:13:36.245
But as of now,

243
00:13:36.245 --> 00:13:37.805
you are writing for VIM.

244
00:13:37.805 --> 00:13:41.870
But automatically it has to replace with the VA and HUD PD and in Unix.

245
00:13:41.870 --> 00:13:46.535
And that's the reason I'm taking this variable because in your for loop,

246
00:13:46.535 --> 00:13:49.175
while executing first-time, each packet is VIM,

247
00:13:49.175 --> 00:13:51.110
second-time hetero debited part-time Unix,

248
00:13:51.110 --> 00:13:55.050
so that you can replace your packages here.

249
00:13:55.930 --> 00:13:59.645
Dollar H package.

250
00:13:59.645 --> 00:14:02.120
So now wherever V a m is there,

251
00:14:02.120 --> 00:14:05.070
just that replaced with a dollar each,

252
00:14:08.170 --> 00:14:13.354
dollar, each dollar each package.

253
00:14:13.354 --> 00:14:18.110
Even in node m come and also you can replace your package with variable.

254
00:14:18.110 --> 00:14:23.940
Each package successfully installed each package.

255
00:14:24.160 --> 00:14:27.800
Seed dynamically, you are able to place

256
00:14:27.800 --> 00:14:31.805
your package name with the help of each package variable,

257
00:14:31.805 --> 00:14:34.550
which is the variable for our for loop.

258
00:14:34.550 --> 00:14:37.160
So once again, I am repeating this entire core will

259
00:14:37.160 --> 00:14:39.725
exclude three times because providing gear three values,

260
00:14:39.725 --> 00:14:42.919
three package names while executing first-time,

261
00:14:42.919 --> 00:14:45.170
this variable value will be VIM,

262
00:14:45.170 --> 00:14:46.895
so that in entire logic,

263
00:14:46.895 --> 00:14:51.155
each package will be replaced with VIM while executing second-time,

264
00:14:51.155 --> 00:14:53.075
each package name is HUD beauty,

265
00:14:53.075 --> 00:14:56.525
so that while executing second timer for second iteration,

266
00:14:56.525 --> 00:14:58.700
you are variable will be replaced with HUD.

267
00:14:58.700 --> 00:15:01.775
Pretty likewise, it will work for in unix as well.

268
00:15:01.775 --> 00:15:02.855
That's it.

269
00:15:02.855 --> 00:15:04.865
Now let me save it.

270
00:15:04.865 --> 00:15:06.980
As of now if you observe,

271
00:15:06.980 --> 00:15:13.280
we aim is that actually believes that in Unix is not there.

272
00:15:13.280 --> 00:15:17.360
Now let me run the Michelle's coupon c. That isn't already VM is they're

273
00:15:17.360 --> 00:15:19.025
actually buddies there now in selling the next

274
00:15:19.025 --> 00:15:22.430
successfully installing an expectation, that's it.

275
00:15:22.430 --> 00:15:24.320
Let me remove them.

276
00:15:24.320 --> 00:15:25.265
All.

277
00:15:25.265 --> 00:15:28.890
Removed. Vim hyphen white.

278
00:15:30.910 --> 00:15:34.080
Sorry, removed.

279
00:15:35.320 --> 00:15:44.645
Now let me remove HTTP, Lasswell, space.

280
00:15:44.645 --> 00:15:48.000
Remove Indian accessible.

281
00:15:51.190 --> 00:15:53.180
That's it.

282
00:15:53.180 --> 00:15:55.505
Now as of no, you don't have any packages.

283
00:15:55.505 --> 00:15:57.980
I mean, what other bag is UV mentioned inside of a script?

284
00:15:57.980 --> 00:16:01.040
Now if I run installing BAM, once it is done,

285
00:16:01.040 --> 00:16:05.990
installing heterogeneity, successfully done installing in Unix, successfully done.

286
00:16:05.990 --> 00:16:08.135
You will actually be package also.

287
00:16:08.135 --> 00:16:13.320
But here if you observe inside of your shell script,

288
00:16:13.450 --> 00:16:17.360
we are mentioning three packages names.

289
00:16:17.360 --> 00:16:21.635
But in future, suppose if you want to work with some other package also.

290
00:16:21.635 --> 00:16:24.245
So what I want install five packages.

291
00:16:24.245 --> 00:16:25.220
Then.

292
00:16:25.220 --> 00:16:28.010
Instead of fixing these values,

293
00:16:28.010 --> 00:16:31.685
I will pass them with command line arguments.

294
00:16:31.685 --> 00:16:34.130
From command-line arguments are,

295
00:16:34.130 --> 00:16:36.995
I can mention them in a file.

296
00:16:36.995 --> 00:16:40.350
You can provide in different ways.

297
00:16:40.630 --> 00:16:47.090
Now first thing what I will lose while running our shell script,

298
00:16:47.090 --> 00:16:51.320
I will pass in this way via young HTTPD in Unix.

299
00:16:51.320 --> 00:16:53.524
Or if I want to install Jenkins,

300
00:16:53.524 --> 00:16:56.300
if I want to install Tomcat in this value, we pass.

301
00:16:56.300 --> 00:17:02.270
But you need to know how to handle these command line arguments using for loop.

302
00:17:02.270 --> 00:17:05.420
Let me write that one extra script.

303
00:17:05.420 --> 00:17:14.910
Handle. Command line arguments with the for loop.

304
00:17:15.310 --> 00:17:19.625
Very simple. If you remember, somewhere,

305
00:17:19.625 --> 00:17:23.905
we have seen how to get all command-line arguments are datetime.

306
00:17:23.905 --> 00:17:27.395
There is a variable called dollar at the rate and dollar star.

307
00:17:27.395 --> 00:17:29.450
But please go with the dollar grid.

308
00:17:29.450 --> 00:17:32.630
We will see the difference in next session.

309
00:17:32.630 --> 00:17:37.655
Now see, I am using simply for each in dollar at the rate.

310
00:17:37.655 --> 00:17:41.270
Do then between this,

311
00:17:41.270 --> 00:17:44.910
simply I am writing echo dollar each.

312
00:17:45.160 --> 00:17:48.950
Let me provide execution permissions for this,

313
00:17:48.950 --> 00:17:50.900
and I am running, as of now.

314
00:17:50.900 --> 00:17:53.570
I'm not passing any command line arguments that fight.

315
00:17:53.570 --> 00:17:56.810
There is no output because your for loop will repeat.

316
00:17:56.810 --> 00:18:00.995
If there is at least one value in place of list of values.

317
00:18:00.995 --> 00:18:02.690
If you don't pass anything,

318
00:18:02.690 --> 00:18:04.730
duller dot it is nothing but null.

319
00:18:04.730 --> 00:18:05.525
Nothing.

320
00:18:05.525 --> 00:18:07.190
If it is nothing, it won't repeat.

321
00:18:07.190 --> 00:18:09.575
Even it won't execute at least one time also.

322
00:18:09.575 --> 00:18:15.080
Now I'm passing, suppose only VIM package and you'll see that it is repeating.

323
00:18:15.080 --> 00:18:16.590
Woman.

324
00:18:19.600 --> 00:18:23.870
Sorry, given hash.

325
00:18:23.870 --> 00:18:27.990
That's my mistake guys. And just give me a minute.

326
00:18:28.540 --> 00:18:32.975
And that is dollar hash.

327
00:18:32.975 --> 00:18:35.270
Now let me run from first,

328
00:18:35.270 --> 00:18:37.820
I'm not passing anything. There is no output.

329
00:18:37.820 --> 00:18:41.240
Now I'm passing VIM package or one package I'm passing,

330
00:18:41.240 --> 00:18:44.885
that's where he's repeating for onetime, two packages.

331
00:18:44.885 --> 00:18:48.350
So now you can able to pass any number of packages

332
00:18:48.350 --> 00:18:53.195
here so that your script will work on that by using for loop.

333
00:18:53.195 --> 00:18:57.155
Now, this concept I will use in the one script.

334
00:18:57.155 --> 00:18:59.820
Let me take a backup for this.

335
00:19:05.130 --> 00:19:08.005
Now let me open our shell script.

336
00:19:08.005 --> 00:19:09.940
Now I want to work.

337
00:19:09.940 --> 00:19:12.970
The shells can width the number of command line arguments.

338
00:19:12.970 --> 00:19:15.895
In case if you are not passing any command line arguments,

339
00:19:15.895 --> 00:19:19.675
then I want to, I want to display the uses of that.

340
00:19:19.675 --> 00:19:23.260
See, anyway, whenever if you are using the shells,

341
00:19:23.260 --> 00:19:26.275
could at least you have to pass one command line argument, one package.

342
00:19:26.275 --> 00:19:28.930
But if you are not passing any command line argument,

343
00:19:28.930 --> 00:19:30.280
then there is no use to run.

344
00:19:30.280 --> 00:19:31.525
Otherwise, you may know,

345
00:19:31.525 --> 00:19:34.195
you may don't know how to run the shell script.

346
00:19:34.195 --> 00:19:36.505
That's why I'm giving help to you.

347
00:19:36.505 --> 00:19:38.890
I mean, for third person,

348
00:19:38.890 --> 00:19:44.035
if you don't, dollar hash means number of command line arguments.

349
00:19:44.035 --> 00:19:46.470
If that is equals to 0,

350
00:19:46.470 --> 00:19:48.980
means you are not passing any command line arguments

351
00:19:48.980 --> 00:19:50.930
are you don't know how to do conditional skip.

352
00:19:50.930 --> 00:19:55.440
Then I'm displaying the usage.

353
00:19:55.570 --> 00:19:58.259
Usage.

354
00:19:59.680 --> 00:20:01.850
That is shell script name,

355
00:20:01.850 --> 00:20:07.145
then package one by K2.

356
00:20:07.145 --> 00:20:10.190
Likewise, you can pass any number of packages.

357
00:20:10.190 --> 00:20:14.795
That is the help I am giving, right?

358
00:20:14.795 --> 00:20:17.720
And if you are not passing any command line arguments,

359
00:20:17.720 --> 00:20:20.090
then no need to run the shell script.

360
00:20:20.090 --> 00:20:24.095
If you're not passing at least one command line arguments,

361
00:20:24.095 --> 00:20:26.420
then there is no use to run remaining script.

362
00:20:26.420 --> 00:20:27.890
That's why I want to stop here itself.

363
00:20:27.890 --> 00:20:29.975
Now, I will stop with exit,

364
00:20:29.975 --> 00:20:36.635
but I don't want exit with the default status of your exit command that is 0.

365
00:20:36.635 --> 00:20:40.370
I'm displaying this because you don't know how to run that mean something.

366
00:20:40.370 --> 00:20:42.230
Yes, I wanted display with one.

367
00:20:42.230 --> 00:20:45.650
Any value use previously we use exit one now I'll make it as a

368
00:20:45.650 --> 00:20:49.910
two so that I will come to know after running my transcript.

369
00:20:49.910 --> 00:20:52.430
If I see exit status as one,

370
00:20:52.430 --> 00:20:55.895
then oh, I'm getting arrow something from here.

371
00:20:55.895 --> 00:20:57.710
If I see exit status as two,

372
00:20:57.710 --> 00:21:05.660
then I can come to know that this is the place from where I'm getting another case.

373
00:21:05.660 --> 00:21:08.255
If you are getting a confusion about existed as course,

374
00:21:08.255 --> 00:21:09.575
don't worry, just forget them.

375
00:21:09.575 --> 00:21:10.835
Just simply read exit.

376
00:21:10.835 --> 00:21:14.885
We have a lot of exercises so that you will be good with that.

377
00:21:14.885 --> 00:21:17.720
Now let me exit from our shell script.

378
00:21:17.720 --> 00:21:22.685
No, I'm running installing multiple baggage dot SH.

379
00:21:22.685 --> 00:21:23.900
See that?

380
00:21:23.900 --> 00:21:26.810
Then I can see existed as one.

381
00:21:26.810 --> 00:21:31.020
That means some with some error you have been excluded or shell script.

382
00:21:31.150 --> 00:21:35.630
Now I'm passing, I'm passing at least one package.

383
00:21:35.630 --> 00:21:40.175
Please run from root user nozzle exit status to we know that

384
00:21:40.175 --> 00:21:44.600
where we place it to where we had this message there, we place it.

385
00:21:44.600 --> 00:21:48.110
So either from this message or from this error,

386
00:21:48.110 --> 00:21:51.260
we can conclude that if I get one,

387
00:21:51.260 --> 00:21:52.880
then the meaningful that is,

388
00:21:52.880 --> 00:21:55.025
I'm not passing any command line arguments.

389
00:21:55.025 --> 00:21:57.830
If I get to the meaning for that is

390
00:21:57.830 --> 00:22:03.380
I am not running dish telescope from root or with sudo privileges.

391
00:22:03.380 --> 00:22:05.090
So actually this error, of course,

392
00:22:05.090 --> 00:22:06.680
are very helpful whenever if you are

393
00:22:06.680 --> 00:22:10.800
integrating the shell script with some other scripts.

394
00:22:11.200 --> 00:22:13.790
Based on this Xist status,

395
00:22:13.790 --> 00:22:18.440
you can decide whether you need to run next to script or not.

396
00:22:18.440 --> 00:22:21.650
Okay, fine. We'll see that type of flow situations.

397
00:22:21.650 --> 00:22:24.570
But as of now, try to understand why I am giving.

398
00:22:24.570 --> 00:22:27.480
I mean, other courts has 123.

399
00:22:27.930 --> 00:22:31.195
Now let me move into road.

400
00:22:31.195 --> 00:22:42.200
So now let me run our Shellsort bypassing VIM or let's say HTTPD or let's say jenkins.

401
00:22:44.070 --> 00:22:47.290
Oh, what happened?

402
00:22:47.290 --> 00:22:48.610
Which is scripted.

403
00:22:48.610 --> 00:22:49.570
We modified.

404
00:22:49.570 --> 00:22:51.130
Yes, yes, yes.

405
00:22:51.130 --> 00:22:53.050
Yeah, we've done modification,

406
00:22:53.050 --> 00:23:00.400
but here we forgot to replace these values with a dollar at the rate of the rate.

407
00:23:00.400 --> 00:23:04.015
So that how many command line arguments you are passing,

408
00:23:04.015 --> 00:23:06.550
all command-line arguments will place here.

409
00:23:06.550 --> 00:23:10.730
So now your for loop will take one by one from this.

410
00:23:11.890 --> 00:23:17.390
See your core. Now I'm running that by passing with the spaces.

411
00:23:17.390 --> 00:23:22.625
We am HTTPD Jenkins. Engineer.

412
00:23:22.625 --> 00:23:24.305
How many packet prom cat,

413
00:23:24.305 --> 00:23:27.980
whatever the pack is you want to install Now you can install it in the shell script C

414
00:23:27.980 --> 00:23:31.730
that installing Jenkins satisfied

415
00:23:31.730 --> 00:23:35.465
in soldier and Ginsberg age already in Unix is installed non-insulin Tomcat,

416
00:23:35.465 --> 00:23:37.025
There is also installed successfully.

417
00:23:37.025 --> 00:23:40.790
That's it. Ok.

418
00:23:40.790 --> 00:23:44.300
So guys, this is the simple way to use our for

419
00:23:44.300 --> 00:23:49.280
loop to repeat your logic for n number of times.

420
00:23:49.280 --> 00:23:50.450
Okay?

421
00:23:50.450 --> 00:23:52.500
Okay, thank you.

