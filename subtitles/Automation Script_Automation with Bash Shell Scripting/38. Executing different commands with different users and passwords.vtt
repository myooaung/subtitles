WEBVTT
ï»¿1
00:00:00.000 --> 00:00:03.840
Friends here we're implementing a simple shell script to execute

2
00:00:03.840 --> 00:00:08.129
different commands on different servers with the different users and different passwords.

3
00:00:08.129 --> 00:00:13.350
Say suppose I, how these two remote servers see already we implemented

4
00:00:13.350 --> 00:00:15.150
a shell script to execute

5
00:00:15.150 --> 00:00:18.900
same commands on different servers with the same username and password.

6
00:00:18.900 --> 00:00:21.820
So if we go with our previous shell script,

7
00:00:22.070 --> 00:00:25.410
so here we are reading server names,

8
00:00:25.410 --> 00:00:27.810
only server names from this file.

9
00:00:27.810 --> 00:00:29.925
And on the Anita and every server,

10
00:00:29.925 --> 00:00:31.395
you are repeating this loop.

11
00:00:31.395 --> 00:00:36.030
So you are repeating, you are executing these three commands on each and every server.

12
00:00:36.030 --> 00:00:40.620
So same commands you are executing on multiple servers with same username and password.

13
00:00:40.620 --> 00:00:45.065
That's why we are directly providing our password name and a username here.

14
00:00:45.065 --> 00:00:48.680
Now my requirement is on server one,

15
00:00:48.680 --> 00:00:49.970
on remote server one,

16
00:00:49.970 --> 00:00:53.705
I know username as automation and its password, suppose,

17
00:00:53.705 --> 00:00:56.510
but I want to execute on that first server,

18
00:00:56.510 --> 00:00:59.510
did command and semaphore second user.

19
00:00:59.510 --> 00:01:01.205
I don't how automation user,

20
00:01:01.205 --> 00:01:05.090
but I know one of the user called Tomcat and I know the password for that.

21
00:01:05.090 --> 00:01:08.630
But here I want to explore commanders, who am I?

22
00:01:08.630 --> 00:01:11.240
Now your comments are different.

23
00:01:11.240 --> 00:01:12.575
User names or different.

24
00:01:12.575 --> 00:01:13.955
Your passwords are different.

25
00:01:13.955 --> 00:01:15.935
Now, in this type of situation,

26
00:01:15.935 --> 00:01:19.190
how you can implement a shell script, right?

27
00:01:19.190 --> 00:01:20.945
See first, follow the order.

28
00:01:20.945 --> 00:01:23.450
I mean in each and every line just right for server name,

29
00:01:23.450 --> 00:01:25.070
then username, then password,

30
00:01:25.070 --> 00:01:27.200
then the command which unity execute.

31
00:01:27.200 --> 00:01:27.890
N.

32
00:01:27.890 --> 00:01:29.960
Second line again for server name,

33
00:01:29.960 --> 00:01:34.325
username, password, than the command which you want to execute on second server.

34
00:01:34.325 --> 00:01:35.795
Once if you follow this order,

35
00:01:35.795 --> 00:01:38.855
just take this information into your file.

36
00:01:38.855 --> 00:01:48.900
Let me save this information into a file called Star Wars info 2.txt.

37
00:01:49.480 --> 00:01:52.010
I'm storing into this file.

38
00:01:52.010 --> 00:01:53.840
Now let me save it.

39
00:01:53.840 --> 00:01:57.785
See if you go with your previous shell script using for loop,

40
00:01:57.785 --> 00:02:02.330
you are able to execute your same commands on multiple servers.

41
00:02:02.330 --> 00:02:04.130
But he had not same commands,

42
00:02:04.130 --> 00:02:06.755
even not same user, not same password.

43
00:02:06.755 --> 00:02:08.300
Then how you can do it?

44
00:02:08.300 --> 00:02:16.175
Let me do it. I am writing simply different users passwords.

45
00:02:16.175 --> 00:02:18.875
Dot TXT, sorry, dot SH.

46
00:02:18.875 --> 00:02:24.485
So before that, let me save it.

47
00:02:24.485 --> 00:02:31.595
So you What is our filename in which we stored the content servers in file.txt.

48
00:02:31.595 --> 00:02:37.250
Suppose if I use four loops to read the content from this file, how it will work.

49
00:02:37.250 --> 00:02:47.720
First, observe that for each server info in cat,

50
00:02:47.720 --> 00:02:51.200
filename, do and done.

51
00:02:51.200 --> 00:02:55.985
C Here I am displaying the we were each server in food.

52
00:02:55.985 --> 00:02:59.720
First, observe the output. Now let me provide

53
00:02:59.720 --> 00:03:04.970
the execution permission for this. Now I'm running.

54
00:03:04.970 --> 00:03:07.070
See there isn't.

55
00:03:07.070 --> 00:03:11.810
Even for loop is able to read the content which is there in your file.

56
00:03:11.810 --> 00:03:14.540
But c in this file,

57
00:03:14.540 --> 00:03:16.190
you have a content, right?

58
00:03:16.190 --> 00:03:18.290
Let me open that file as well.

59
00:03:18.290 --> 00:03:21.230
But it is not reading entire line at a time.

60
00:03:21.230 --> 00:03:24.080
It is reading this as one value, second value,

61
00:03:24.080 --> 00:03:25.880
the third value, fourth value,

62
00:03:25.880 --> 00:03:27.785
then fifth, sixth, seventh, 8.

63
00:03:27.785 --> 00:03:31.025
That's why are getting eight lines.

64
00:03:31.025 --> 00:03:37.535
So even if your for loop is able to read this entire line as one field,

65
00:03:37.535 --> 00:03:40.295
then you will get faster for lens in one line,

66
00:03:40.295 --> 00:03:42.320
but you're not getting that.

67
00:03:42.320 --> 00:03:45.590
That's why whenever, if this type of

68
00:03:45.590 --> 00:03:49.775
information you are a for loop is not suitable for your requirement.

69
00:03:49.775 --> 00:03:53.165
Then how you can implement your code using while loop.

70
00:03:53.165 --> 00:03:55.280
Let me show you that first.

71
00:03:55.280 --> 00:03:58.325
As of now we don't know about while loop, but no problem,

72
00:03:58.325 --> 00:04:01.760
just observe and how we are implementing.

73
00:04:01.760 --> 00:04:04.310
Let me remove this. So before removing,

74
00:04:04.310 --> 00:04:07.400
let me copy the file name.

75
00:04:07.400 --> 00:04:12.290
So if you go with either for loop or a while loop or until our select loop do undone and

76
00:04:12.290 --> 00:04:16.925
common in while loop at the end, at the done,

77
00:04:16.925 --> 00:04:19.640
just to provide a less than symbol then server,

78
00:04:19.640 --> 00:04:21.020
I mean the file in which you,

79
00:04:21.020 --> 00:04:26.914
how your information then before do just write while read.

80
00:04:26.914 --> 00:04:31.610
Here you can write any variable, each server info.

81
00:04:31.610 --> 00:04:37.250
Now see the result, how it is executing compared to your for loop.

82
00:04:37.250 --> 00:04:41.639
Very, very useful whenever you have this type of situation.

83
00:04:43.800 --> 00:04:48.940
Now let me run our shell script c.

84
00:04:48.940 --> 00:04:54.370
You are able to read the entire line at a time by using your while loop.

85
00:04:54.370 --> 00:04:57.295
Eats our info into this variable,

86
00:04:57.295 --> 00:04:59.725
you are getting the entire line at a time.

87
00:04:59.725 --> 00:05:00.925
Right?

88
00:05:00.925 --> 00:05:03.400
That is one thing. And second thing is,

89
00:05:03.400 --> 00:05:06.010
if you already know how many fields are there in

90
00:05:06.010 --> 00:05:10.975
each and every line directly here itself we can provide for fields.

91
00:05:10.975 --> 00:05:13.555
So as of now you have four fields in each and every line, right?

92
00:05:13.555 --> 00:05:15.550
That's why in shut off each summer info,

93
00:05:15.550 --> 00:05:18.730
if I take only one variable here into this variable,

94
00:05:18.730 --> 00:05:21.955
you are entire land will store line by line.

95
00:05:21.955 --> 00:05:23.935
You will get into this variable.

96
00:05:23.935 --> 00:05:28.370
But already we know in each and every line we have four fields that way.

97
00:05:28.370 --> 00:05:31.730
See I'm modifying our while loop in this way.

98
00:05:31.730 --> 00:05:34.685
Instead of each server info.

99
00:05:34.685 --> 00:05:36.845
Innumerable anyhow, for fields,

100
00:05:36.845 --> 00:05:38.135
first, if we list server name,

101
00:05:38.135 --> 00:05:40.280
second field is username,

102
00:05:40.280 --> 00:05:43.160
password for the file's command.

103
00:05:43.160 --> 00:05:50.780
Now see that I am printing server name only.

104
00:05:50.780 --> 00:05:56.645
Dollar server. Now see how it is working.

105
00:05:56.645 --> 00:06:01.340
First, let me show you your core and see the content of your file.

106
00:06:01.340 --> 00:06:05.630
Now run your shell script C.

107
00:06:05.630 --> 00:06:07.700
That is, we are getting only server name.

108
00:06:07.700 --> 00:06:10.145
We have four fields in your file.

109
00:06:10.145 --> 00:06:11.525
An inner while loop,

110
00:06:11.525 --> 00:06:12.905
while read is the syntax.

111
00:06:12.905 --> 00:06:15.560
And here you can take any four variables so

112
00:06:15.560 --> 00:06:19.310
that respect to leave foster freely will store into the second field,

113
00:06:19.310 --> 00:06:20.825
will store into the star field.

114
00:06:20.825 --> 00:06:24.320
I mean thoughtful means your password is stored into this variable.

115
00:06:24.320 --> 00:06:26.300
You are command will store into this variable.

116
00:06:26.300 --> 00:06:31.220
So you are while we'll read this entire line first-time for first iteration.

117
00:06:31.220 --> 00:06:33.620
And here you have four fields.

118
00:06:33.620 --> 00:06:39.575
That's why you were four fields will assigned to these four variables respectively.

119
00:06:39.575 --> 00:06:40.625
That's it.

120
00:06:40.625 --> 00:06:45.065
Now I can implement our shell script c from our previous course.

121
00:06:45.065 --> 00:06:50.310
We know how to execute a command on your remote server.

122
00:06:50.790 --> 00:06:54.625
Now, let me execute that.

123
00:06:54.625 --> 00:06:56.635
Very simple.

124
00:06:56.635 --> 00:07:00.430
First, let me copy that command from our previous session.

125
00:07:00.430 --> 00:07:03.625
Simply as such, path hyphen e, f.

126
00:07:03.625 --> 00:07:07.045
But here our password is there in a variable called pass.

127
00:07:07.045 --> 00:07:10.810
That's why I'm taking hyphen p Then subsidy or variable.

128
00:07:10.810 --> 00:07:12.850
Say this is a password value.

129
00:07:12.850 --> 00:07:17.110
Now I'm shooting that SSH hyphen Wall Street who host a key checking.

130
00:07:17.110 --> 00:07:19.150
Now automation usury is not a fixed

131
00:07:19.150 --> 00:07:22.255
one while working with your first silver different user.

132
00:07:22.255 --> 00:07:23.800
Secondly, it's our different user,

133
00:07:23.800 --> 00:07:26.680
but automatically you are user name will come into this variable.

134
00:07:26.680 --> 00:07:29.695
That's why I'm shooting user.

135
00:07:29.695 --> 00:07:31.330
And sorrow results anyway,

136
00:07:31.330 --> 00:07:34.275
salaries different and somebody is there in this variable.

137
00:07:34.275 --> 00:07:35.285
That's it.

138
00:07:35.285 --> 00:07:38.285
Now command, you are command is there in cmd?

139
00:07:38.285 --> 00:07:39.800
Just I use different variable,

140
00:07:39.800 --> 00:07:41.795
that's it. So that's a.

141
00:07:41.795 --> 00:07:45.620
Now let me run this and see the result, how it is working.

142
00:07:45.620 --> 00:07:50.820
So sorrows info, our shell script.

143
00:07:51.460 --> 00:07:53.540
Now I am running that.

144
00:07:53.540 --> 00:07:58.950
See that? Oh, what happened?

145
00:08:00.970 --> 00:08:05.090
779. Yeah, let me check it.

146
00:08:05.090 --> 00:08:08.900
What is the code? Ssh boss,

147
00:08:08.900 --> 00:08:10.340
I found me password host,

148
00:08:10.340 --> 00:08:12.320
KEY tricking new dollar user.

149
00:08:12.320 --> 00:08:14.360
Yeah, I have given two times the dollar.

150
00:08:14.360 --> 00:08:19.100
That is the problem. Let me remove $1.

151
00:08:19.100 --> 00:08:22.620
For dollar. Dollar means PAD right?

152
00:08:24.760 --> 00:08:28.505
Now you are getting output date command output

153
00:08:28.505 --> 00:08:32.060
C. If you see the content of your first line,

154
00:08:32.060 --> 00:08:36.050
command is date, and you are getting output for only for server but seconds,

155
00:08:36.050 --> 00:08:37.460
however, information is knotting,

156
00:08:37.460 --> 00:08:39.035
scooting in your while loop.

157
00:08:39.035 --> 00:08:45.110
This is generally your SSH will expect input from stdin,

158
00:08:45.110 --> 00:08:47.150
but I want to avoid that.

159
00:08:47.150 --> 00:08:51.155
So this is only knew a while loop.

160
00:08:51.155 --> 00:08:57.035
So that's why you can add an option called hyphen Yan means don't expert input from

161
00:08:57.035 --> 00:09:03.890
STD in if you go with the man command of SSH somewhere you how hyphen Yana option.

162
00:09:03.890 --> 00:09:07.340
So you can use Ionian or the at the end of your command.

163
00:09:07.340 --> 00:09:10.710
You can also provide slash DO NL,

164
00:09:10.900 --> 00:09:15.665
hyphen, redirects SUDAAN from Dell null.

165
00:09:15.665 --> 00:09:18.560
I mean, be clear guys,

166
00:09:18.560 --> 00:09:20.670
this is very, very important.

167
00:09:21.700 --> 00:09:24.890
Let me say, sorry.

168
00:09:24.890 --> 00:09:29.900
You can write your iPhone yen or at the end simply you can write down null.

169
00:09:29.900 --> 00:09:32.060
But don't write those two.

170
00:09:32.060 --> 00:09:33.845
I mean highfalutin and donor.

171
00:09:33.845 --> 00:09:37.745
As anyone of that iPhone yen or at the end Less Than donor, you can write it.

172
00:09:37.745 --> 00:09:39.695
But I have an h1 is the best option.

173
00:09:39.695 --> 00:09:44.450
So I haven't any means don't expect any input from STD synthetic.

174
00:09:44.450 --> 00:09:48.650
Now let me save it and run your shell script consider is.

175
00:09:50.680 --> 00:09:53.900
Now you are getting output for your two servers for

176
00:09:53.900 --> 00:09:56.945
first-year server command is date for second server.

177
00:09:56.945 --> 00:09:59.555
Command is Who am I that we are getting that.

178
00:09:59.555 --> 00:10:02.915
See if you need a clarity,

179
00:10:02.915 --> 00:10:04.910
then you can add some echo.

180
00:10:04.910 --> 00:10:07.955
Now, before executing an SSH,

181
00:10:07.955 --> 00:10:17.520
I am writing here a code

182
00:10:17.980 --> 00:10:23.630
executing commands on server

183
00:10:23.630 --> 00:10:34.190
with user as let me read the username and password.

184
00:10:34.190 --> 00:10:37.130
Just for your understanding, I am displaying this content,

185
00:10:37.130 --> 00:10:39.845
that's it so that you can understand and we'd server,

186
00:10:39.845 --> 00:10:42.245
what is the username on? What is the password?

187
00:10:42.245 --> 00:10:44.000
It is taking?

188
00:10:44.000 --> 00:10:49.190
C, executing data on the server with user as automation and password has this one

189
00:10:49.190 --> 00:10:55.525
executing Who am I a on the server with user as Tomcat and password, right?

190
00:10:55.525 --> 00:10:56.650
Not only one command,

191
00:10:56.650 --> 00:10:59.330
you can execute multiple commands also.

192
00:10:59.640 --> 00:11:03.490
Right? See, suppose, let me modify our script.

193
00:11:03.490 --> 00:11:06.265
I mean our sorrows information first.

194
00:11:06.265 --> 00:11:09.640
Suppose unforced Our along with the date command.

195
00:11:09.640 --> 00:11:12.625
Suppose I want to exclude one more command called uptime.

196
00:11:12.625 --> 00:11:14.575
Then on second server,

197
00:11:14.575 --> 00:11:20.830
I will exclude uptime and let's say simply date command, uptime and data.

198
00:11:20.830 --> 00:11:23.665
Now you have to modify your while loop.

199
00:11:23.665 --> 00:11:25.840
Now you have five fields, right?

200
00:11:25.840 --> 00:11:28.630
Now five fields.

201
00:11:28.630 --> 00:11:32.815
Then let's say command one and command to.

202
00:11:32.815 --> 00:11:35.140
Automatically we're command one will store into

203
00:11:35.140 --> 00:11:37.665
command one variable and come into variable.

204
00:11:37.665 --> 00:11:40.715
Then here command one.

205
00:11:40.715 --> 00:11:43.175
So in short writing simply CMD,

206
00:11:43.175 --> 00:11:45.080
right, command one here.

207
00:11:45.080 --> 00:11:51.630
And same logic you have to repeat for second command as well.

208
00:11:52.090 --> 00:11:55.535
So in case you've heard some N number of commands here,

209
00:11:55.535 --> 00:12:00.065
you can also implement a loop instead of writing these two lines two times.

210
00:12:00.065 --> 00:12:01.310
We'll see that.

211
00:12:01.310 --> 00:12:05.630
So this is just for your understanding why we need a while loop in your real time.

212
00:12:05.630 --> 00:12:08.495
Even though if we have for loop,

213
00:12:08.495 --> 00:12:12.560
simply come in to see the result.

214
00:12:12.560 --> 00:12:15.815
And one more thing after completion of your work with first server,

215
00:12:15.815 --> 00:12:18.990
just for differentiation purpose I am writing.

216
00:12:21.700 --> 00:12:26.610
Now let me save it and run your code.

217
00:12:30.460 --> 00:12:31.970
C.

218
00:12:31.970 --> 00:12:34.490
You are getting the content on your first server.

219
00:12:34.490 --> 00:12:36.200
You are executing date command first,

220
00:12:36.200 --> 00:12:38.880
then uptime command second,

221
00:12:38.880 --> 00:12:42.095
second server you're exuding first to who am I? Where is the command?

222
00:12:42.095 --> 00:12:43.085
Yeah, Who am I?

223
00:12:43.085 --> 00:12:44.480
And date command, that's it.

224
00:12:44.480 --> 00:12:48.620
So there is, this is the way how we can execute multiple commands on, I mean,

225
00:12:48.620 --> 00:12:52.835
different commands on different servers with the different users and password.

226
00:12:52.835 --> 00:12:55.220
Very, very important for your realtime.

227
00:12:55.220 --> 00:12:57.750
Okay. Thank you.

