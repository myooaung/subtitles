WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.970
In this video, we are going to see intellection

2
00:00:02.970 --> 00:00:06.210
to sed command with rejects or regular expression.

3
00:00:06.210 --> 00:00:10.770
So if you want to use regular expressions with your set command,

4
00:00:10.770 --> 00:00:14.820
you should know what is it rejects and how to create your rejects, right?

5
00:00:14.820 --> 00:00:18.764
So first I will go with the, what is Racket's?

6
00:00:18.764 --> 00:00:25.200
Let me start that. Basically rejects is the shortcut for regular expression.

7
00:00:25.200 --> 00:00:28.634
And if any expression uses a pattern,

8
00:00:28.634 --> 00:00:32.790
then that expression is called rejects or regular expression.

9
00:00:32.790 --> 00:00:35.505
Then what is pattern, right?

10
00:00:35.505 --> 00:00:38.745
See if any expression uses a pattern,

11
00:00:38.745 --> 00:00:42.145
then that expression we are calling as aggregates or on your expression,

12
00:00:42.145 --> 00:00:44.795
then what is the pattern, right?

13
00:00:44.795 --> 00:00:50.045
So you simply pattern is a string which represents more than one word.

14
00:00:50.045 --> 00:00:51.950
So to explain this,

15
00:00:51.950 --> 00:00:53.870
I'm going to open my terminal.

16
00:00:53.870 --> 00:00:55.475
So let me open this.

17
00:00:55.475 --> 00:00:57.740
So as of now guys, we know sed command with

18
00:00:57.740 --> 00:01:05.420
your normal operations like suppose if I want to such a line which consists of,

19
00:01:05.420 --> 00:01:07.760
let me take first my file.

20
00:01:07.760 --> 00:01:15.530
So I want to print the, the lines which consists of, let's say, put.

21
00:01:15.530 --> 00:01:18.260
I want to print the, the lines which are having,

22
00:01:18.260 --> 00:01:20.255
put in the lines.

23
00:01:20.255 --> 00:01:22.475
So I am getting only one line right.

24
00:01:22.475 --> 00:01:22.820
Now.

25
00:01:22.820 --> 00:01:25.370
What I'm going to do is I'm going to read something.

26
00:01:25.370 --> 00:01:28.640
I'm going to write something because of that.

27
00:01:28.640 --> 00:01:30.170
What I'm going to get up there

28
00:01:30.170 --> 00:01:38.150
that now you are getting because of one simple searching word,

29
00:01:38.150 --> 00:01:39.860
you're getting multiple lines.

30
00:01:39.860 --> 00:01:43.205
So actually this is a string based on this string.

31
00:01:43.205 --> 00:01:47.030
You are getting some lines previously because of this string,

32
00:01:47.030 --> 00:01:48.770
you got only one line.

33
00:01:48.770 --> 00:01:50.870
But now because of this string,

34
00:01:50.870 --> 00:01:52.355
you're getting multiple lines.

35
00:01:52.355 --> 00:01:57.934
The reason is this string is going to represent two words.

36
00:01:57.934 --> 00:02:01.280
They are like, let me write it.

37
00:02:01.280 --> 00:02:06.570
One is PUT and one more is p1.

38
00:02:07.270 --> 00:02:10.505
So these four starting lend,

39
00:02:10.505 --> 00:02:15.200
letter and an inlet and are starting character and an IND categories are fixed.

40
00:02:15.200 --> 00:02:17.930
But the middle character may be you are maybe walk.

41
00:02:17.930 --> 00:02:23.165
That's why it is going to create two such ing words, put and part.

42
00:02:23.165 --> 00:02:27.230
That's why you are getting the lines which are having either put or pot.

43
00:02:27.230 --> 00:02:29.900
Right? Now if you observe here,

44
00:02:29.900 --> 00:02:31.685
you are writing one single string,

45
00:02:31.685 --> 00:02:33.620
but it is going to represent two words.

46
00:02:33.620 --> 00:02:36.875
Now this is a pattern and you are using this pattern in this,

47
00:02:36.875 --> 00:02:44.360
that's why it is a regular expression pattern or simply a regex with your set command.

48
00:02:44.360 --> 00:02:48.410
It's once again, I am telling that regular expression is nothing

49
00:02:48.410 --> 00:02:51.500
but if any expression uses a pattern,

50
00:02:51.500 --> 00:02:54.140
then that expression is called rejects.

51
00:02:54.140 --> 00:02:56.180
Then what about pattern?

52
00:02:56.180 --> 00:02:59.570
A pattern is a string which represents multiple words.

53
00:02:59.570 --> 00:03:02.195
Now if you observe in this entire expression,

54
00:03:02.195 --> 00:03:06.035
set expression, you are using some pattern.

55
00:03:06.035 --> 00:03:10.715
This pattern is going to represent towards right.

56
00:03:10.715 --> 00:03:15.620
That's why this expression is called regular expression with your set command.

57
00:03:15.620 --> 00:03:20.135
So now we have to learn different ways to write a pattern.

58
00:03:20.135 --> 00:03:25.505
Different ways to write a pattern such that it is going to represent multiple words.

59
00:03:25.505 --> 00:03:27.270
Right?

60
00:03:27.270 --> 00:03:30.460
Now without regular expressions, right?

61
00:03:30.460 --> 00:03:33.235
Actually we have different operations with your set command.

62
00:03:33.235 --> 00:03:36.100
You know, there are like viewing file

63
00:03:36.100 --> 00:03:40.315
contains such a find and replace, insertion or deletion.

64
00:03:40.315 --> 00:03:42.220
Now with the single word,

65
00:03:42.220 --> 00:03:44.185
we did all these things already.

66
00:03:44.185 --> 00:03:46.375
Now with the rejects.

67
00:03:46.375 --> 00:03:49.150
If you want to do all these operations with

68
00:03:49.150 --> 00:03:52.585
your set command by using regular expressions, right?

69
00:03:52.585 --> 00:03:55.240
You how to know how to create a pattern.

70
00:03:55.240 --> 00:03:56.905
That means this one.

71
00:03:56.905 --> 00:03:58.630
How to create this one.

72
00:03:58.630 --> 00:04:01.495
You have to know some rules to create this.

73
00:04:01.495 --> 00:04:07.720
So we will learn all these rules while going forward with step-by-step, right?

74
00:04:07.720 --> 00:04:10.970
So for timing, you had to know what is it rejects and what is

75
00:04:10.970 --> 00:04:15.515
a pattern on your using regular expressions with sed command, right?

76
00:04:15.515 --> 00:04:18.870
Okay, yes. Thank you for watching this video.

