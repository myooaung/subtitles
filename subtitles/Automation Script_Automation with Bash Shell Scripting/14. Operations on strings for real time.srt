1
00:00:00,000 --> 00:00:04,380
Friends here our concept is operations on strings.

2
00:00:04,380 --> 00:00:06,150
So these operations are very,

3
00:00:06,150 --> 00:00:09,090
very important while working with the real time scripts,

4
00:00:09,090 --> 00:00:12,045
especially while working with the path.

5
00:00:12,045 --> 00:00:13,995
Now let me go with one by one.

6
00:00:13,995 --> 00:00:17,745
The very first one is how to find these string length.

7
00:00:17,745 --> 00:00:21,115
Let me explain them with a simple shell script.

8
00:00:21,115 --> 00:00:24,440
See, suppose very first line,

9
00:00:24,440 --> 00:00:25,895
I'm writing bin bash,

10
00:00:25,895 --> 00:00:27,155
I mean shebang line.

11
00:00:27,155 --> 00:00:30,755
Then let me define a variable called shell.

12
00:00:30,755 --> 00:00:35,180
Simply I store in a string called shell into a variable called my name.

13
00:00:35,180 --> 00:00:38,375
Now you know how to display variable value.

14
00:00:38,375 --> 00:00:43,790
You can use either this syntax or you can use dollar curly brace.

15
00:00:43,790 --> 00:00:45,140
You will have variable name.

16
00:00:45,140 --> 00:00:47,150
Both will give the same result.

17
00:00:47,150 --> 00:00:50,960
Now, just provide the exclusion permissions

18
00:00:50,960 --> 00:00:54,380
for that and see the content of before running your code.

19
00:00:54,380 --> 00:00:57,635
Now see there is a what are giving same result.

20
00:00:57,635 --> 00:01:00,600
Now in the second syntax,

21
00:01:01,180 --> 00:01:07,580
I'm using hash before you were variable name starts. Now see the result.

22
00:01:07,580 --> 00:01:13,940
What we are getting, we are getting length or fewer variables means the data,

23
00:01:13,940 --> 00:01:15,800
which is their newer variable.

24
00:01:15,800 --> 00:01:17,525
Because of this syntax,

25
00:01:17,525 --> 00:01:21,290
we are getting the length while we are getting phi means.

26
00:01:21,290 --> 00:01:24,290
In this variable we have a data called shell.

27
00:01:24,290 --> 00:01:26,900
So in that shell we have 5K characters.

28
00:01:26,900 --> 00:01:28,505
That's why it is giving phi.

29
00:01:28,505 --> 00:01:33,725
Suppose if you are string consists of space. Space.

30
00:01:33,725 --> 00:01:35,465
Space is also a character.

31
00:01:35,465 --> 00:01:42,710
I'm giving one space then some letter called S. Now forced to see your core ones.

32
00:01:42,710 --> 00:01:47,485
Now observe the output in your string, in your variable,

33
00:01:47,485 --> 00:01:52,240
in your string, you have Sheldon space then yes, finally,

34
00:01:52,240 --> 00:01:55,960
seven characters, Yes, you are getting that C. Instead

35
00:01:55,960 --> 00:01:59,920
of directly displaying your length of a string,

36
00:01:59,920 --> 00:02:02,455
you can assign that into your variable as well.

37
00:02:02,455 --> 00:02:05,665
Let me take my variable called mine, named length.

38
00:02:05,665 --> 00:02:08,680
Friends here I have taken a variable names such a way

39
00:02:08,680 --> 00:02:11,440
that it consists of all four beds and underscore.

40
00:02:11,440 --> 00:02:14,860
You can also how numbers in your variable.

41
00:02:14,860 --> 00:02:16,195
Fine.

42
00:02:16,195 --> 00:02:22,224
Now, if you want to assign the length of your string into a variable, simply,

43
00:02:22,224 --> 00:02:24,024
you can follow this syntax,

44
00:02:24,024 --> 00:02:28,480
whatever we are using to display that we can assign and be available as well.

45
00:02:28,480 --> 00:02:34,240
Now let me display word length of a string with respect to variable as well.

46
00:02:34,240 --> 00:02:36,595
My name length.

47
00:02:36,595 --> 00:02:39,895
So inside of this variable, what is there?

48
00:02:39,895 --> 00:02:41,845
The length of your variable?

49
00:02:41,845 --> 00:02:44,560
So actually what is the your variable value shall yes,

50
00:02:44,560 --> 00:02:49,855
that means this is string length we stored into this variable and we are printing that.

51
00:02:49,855 --> 00:02:56,950
No, let me save this and run it and see the result. Yes, it's working.

52
00:02:56,950 --> 00:03:02,185
Now I am doing one thing for second eco command, echo command.

53
00:03:02,185 --> 00:03:06,205
Simply, I am writing Hash before starting you what line?

54
00:03:06,205 --> 00:03:11,620
See whenever if you place hash symbol before starting you what ln, x shebang line.

55
00:03:11,620 --> 00:03:16,660
While executing your core shell will skip this line simply you are shall.

56
00:03:16,660 --> 00:03:20,260
We'll assume that that is not the part in your code.

57
00:03:20,260 --> 00:03:24,520
So actually, hash symbols are used to commend a code.

58
00:03:24,520 --> 00:03:26,110
So to write some comments,

59
00:03:26,110 --> 00:03:27,475
we can use hash symbols.

60
00:03:27,475 --> 00:03:32,680
Now let me save this c you are core first and let me run that and absorbed output.

61
00:03:32,680 --> 00:03:34,465
We are getting the output from this line,

62
00:03:34,465 --> 00:03:38,200
not from this because that is commented simply you are,

63
00:03:38,200 --> 00:03:41,680
shall we assume that that is not the part in your core?

64
00:03:41,680 --> 00:03:45,535
Suppose if you want to come in multiple lines,

65
00:03:45,535 --> 00:03:48,415
suppose I want to commend all the lines,

66
00:03:48,415 --> 00:03:50,830
then for all the lines, how to write hash symbol.

67
00:03:50,830 --> 00:03:54,000
So instead of writing hash symbol for each and every line,

68
00:03:54,000 --> 00:04:01,430
you can also do one thing that is this syntax you can follow to come into multiple lines.

69
00:04:01,430 --> 00:04:03,890
Suppose I am writing my comment one.

70
00:04:03,890 --> 00:04:06,695
Then up to this, I want to comment,

71
00:04:06,695 --> 00:04:08,495
I don't want to execute all these codes,

72
00:04:08,495 --> 00:04:10,310
then you can follow this syntax.

73
00:04:10,310 --> 00:04:12,050
So because of this syntax,

74
00:04:12,050 --> 00:04:15,635
what will happen means whatever the lanes which are there between these two lines are,

75
00:04:15,635 --> 00:04:18,545
those lines will skip while executing your code.

76
00:04:18,545 --> 00:04:22,325
Now we don't have any lines to execute because whatever the lines were having,

77
00:04:22,325 --> 00:04:25,250
all those lines are there between these two symbols.

78
00:04:25,250 --> 00:04:26,720
Between these two lines?

79
00:04:26,720 --> 00:04:28,640
That means this code is commented.

80
00:04:28,640 --> 00:04:31,130
So while executing your code, you are shelled.

81
00:04:31,130 --> 00:04:36,200
We'll skip the lines which are there between those less than,

82
00:04:36,200 --> 00:04:39,665
less than and some name and the name.

83
00:04:39,665 --> 00:04:41,480
Now, if I run now,

84
00:04:41,480 --> 00:04:44,420
there is no output because there are no lines to execute.

85
00:04:44,420 --> 00:04:46,940
Actually we how, but we commented them.

86
00:04:46,940 --> 00:04:49,400
That's a fine.

87
00:04:49,400 --> 00:04:54,035
Now the next operation is how to join two or more parts.

88
00:04:54,035 --> 00:04:58,055
That is nothing but concatenation of strings.

89
00:04:58,055 --> 00:05:02,150
Just assume that a how to park in my hand.

90
00:05:02,150 --> 00:05:04,655
One is path one.

91
00:05:04,655 --> 00:05:07,505
That party is suppose I am taking valid bug,

92
00:05:07,505 --> 00:05:09,540
but you can take anything.

93
00:05:10,000 --> 00:05:13,610
And I'm having one more path called path two.

94
00:05:13,610 --> 00:05:16,470
And this is HTTPD.com.

95
00:05:16,470 --> 00:05:19,960
Now I want to get complete path for the file.

96
00:05:19,960 --> 00:05:22,885
So if I join this path at the end of this path,

97
00:05:22,885 --> 00:05:24,505
then I can get complete path.

98
00:05:24,505 --> 00:05:27,280
Of course you need a symbol asthma.

99
00:05:27,280 --> 00:05:28,525
Let me do that.

100
00:05:28,525 --> 00:05:32,995
Suppose I am writing a variable called HTTPD con for filing,

101
00:05:32,995 --> 00:05:36,820
but I'm taking lengthy variable him just to understand, but don't undertake this,

102
00:05:36,820 --> 00:05:39,700
lend the variable name C. I can write,

103
00:05:39,700 --> 00:05:42,445
I can write simply dollar path one.

104
00:05:42,445 --> 00:05:48,115
Then immediately I can write dollar path to let me sale These.

105
00:05:48,115 --> 00:05:48,910
Yeah.

106
00:05:48,910 --> 00:05:51,040
If I display that, they can understand, right?

107
00:05:51,040 --> 00:05:54,250
Yeah. Let me just say that a CFO display our print

108
00:05:54,250 --> 00:05:59,655
that HTTPD underscore con for underscore file.

109
00:05:59,655 --> 00:06:03,725
Let me save this and run this.

110
00:06:03,725 --> 00:06:07,560
So before running, it's better to see your code as well.

111
00:06:08,020 --> 00:06:11,210
Now see the result, what you are getting.

112
00:06:11,210 --> 00:06:17,960
What happened? Yeah, I miss to close with the quotation.

113
00:06:17,960 --> 00:06:24,755
So that is another. So I started quotations but I forgot to close that.

114
00:06:24,755 --> 00:06:26,750
Now. See your core.

115
00:06:26,750 --> 00:06:27,830
Now I'm running that.

116
00:06:27,830 --> 00:06:29,270
See the output, what you are getting.

117
00:06:29,270 --> 00:06:31,850
You are getting root A-T-C, A-T-C,

118
00:06:31,850 --> 00:06:34,025
last HTTPD slash conf,

119
00:06:34,025 --> 00:06:36,095
then immediately are getting hit gdb.com,

120
00:06:36,095 --> 00:06:37,730
but you need some slashing.

121
00:06:37,730 --> 00:06:41,450
Well, right? Then I can do in this way.

122
00:06:41,450 --> 00:06:43,475
See here.

123
00:06:43,475 --> 00:06:45,470
Here I can write curly brace,

124
00:06:45,470 --> 00:06:48,560
non-native codebase vertically conveyed slash.

125
00:06:48,560 --> 00:06:53,585
So I am substituting faster path then sludge directly I am writing,

126
00:06:53,585 --> 00:06:57,050
then, I'm sorry, shooting second path. Now see the result.

127
00:06:57,050 --> 00:07:00,620
What we are getting very,

128
00:07:00,620 --> 00:07:02,840
very important adding to part C,

129
00:07:02,840 --> 00:07:05,240
that is, you're getting valid path now.

130
00:07:05,240 --> 00:07:08,510
Now, if you are getting confusion here,

131
00:07:08,510 --> 00:07:10,220
you can also use curly braces.

132
00:07:10,220 --> 00:07:14,675
First two-part slash, second part,

133
00:07:14,675 --> 00:07:18,200
I'm shooting first two path than I am placing slash directly,

134
00:07:18,200 --> 00:07:20,420
then I'm shooting second path so that I'm getting

135
00:07:20,420 --> 00:07:23,700
complete path for this HTTPD con file path.

136
00:07:23,700 --> 00:07:26,770
So this is the way how you can add one.

137
00:07:26,770 --> 00:07:29,080
I'm in two or more than two paths.

138
00:07:29,080 --> 00:07:30,355
If you want to add one more path,

139
00:07:30,355 --> 00:07:33,280
just RD here by substituting that variable value.

140
00:07:33,280 --> 00:07:38,620
That's a fine.

141
00:07:38,620 --> 00:07:41,305
Now I want to come into the center core,

142
00:07:41,305 --> 00:07:43,345
a second particle then, right?

143
00:07:43,345 --> 00:07:45,130
See if, if you want to line,

144
00:07:45,130 --> 00:07:47,530
if you want to comment line by line for each and every line,

145
00:07:47,530 --> 00:07:49,870
you have the right hash symbol.

146
00:07:49,870 --> 00:07:53,140
At the starting of each and every line you had to write Hashim.

147
00:07:53,140 --> 00:07:55,795
But I want to come into all these four lines at a time,

148
00:07:55,795 --> 00:08:00,040
then you can follow or less than,

149
00:08:00,040 --> 00:08:02,365
less than I'm writing might come into two.

150
00:08:02,365 --> 00:08:06,530
And how many lines you want to come in after that, right?

151
00:08:06,530 --> 00:08:10,460
You were come into to name this name and this name must be same,

152
00:08:10,460 --> 00:08:13,805
then only these lanes will come and otherwise you'll get an error.

153
00:08:13,805 --> 00:08:19,520
Now, we don't have any code to execute our shell script.

154
00:08:19,520 --> 00:08:22,880
Because whatever the core we are having that we come into.

155
00:08:22,880 --> 00:08:28,535
The next one, converts strings into lowercase or uppercase.

156
00:08:28,535 --> 00:08:30,260
But it's simple.

157
00:08:30,260 --> 00:08:33,980
First, let me open your shell script.

158
00:08:33,980 --> 00:08:36,530
I'm writing a variable called Again,

159
00:08:36,530 --> 00:08:43,610
my name shall suppose I want to convert this into uppercase.

160
00:08:43,610 --> 00:08:48,350
Then ACO, first-time displaying output.

161
00:08:48,350 --> 00:08:55,654
The uppercase info E, dollar.

162
00:08:55,654 --> 00:08:57,560
You need curly braces here.

163
00:08:57,560 --> 00:09:02,465
My name to capture or to anchor symbols.

164
00:09:02,465 --> 00:09:08,100
But now let me execute and see the content.

165
00:09:08,290 --> 00:09:13,220
You are getting your data in terms of capitals, right?

166
00:09:13,220 --> 00:09:15,215
So because of this gap symbols,

167
00:09:15,215 --> 00:09:18,350
instead of displaying directly with the echo command,

168
00:09:18,350 --> 00:09:21,020
you can also store this result in b, a variable.

169
00:09:21,020 --> 00:09:22,655
And one more thing guys,

170
00:09:22,655 --> 00:09:25,280
let me write that first.

171
00:09:25,280 --> 00:09:28,860
Echo dollar, my name.

172
00:09:29,230 --> 00:09:38,570
So my intention is suppose if I run our core,

173
00:09:38,570 --> 00:09:42,320
you are converting your data into capitals.

174
00:09:42,320 --> 00:09:47,915
But the virginal data is not converting into capitals only while displaying.

175
00:09:47,915 --> 00:09:50,405
Your data is converting into capital.

176
00:09:50,405 --> 00:09:54,545
So now, if you want to store that connoted data in the variable,

177
00:09:54,545 --> 00:09:59,690
you can follow this syntax the same way how we stored the length India variable c.

178
00:09:59,690 --> 00:10:07,489
Now I am defining my name

179
00:10:07,489 --> 00:10:11,135
in uppercase equals two.

180
00:10:11,135 --> 00:10:14,495
Dollar, curly brace, you were variable.

181
00:10:14,495 --> 00:10:17,150
Then to encode symbols that say,

182
00:10:17,150 --> 00:10:19,415
same way my name,

183
00:10:19,415 --> 00:10:22,100
yeah, learned of conditions there.

184
00:10:22,100 --> 00:10:26,645
My name is lowercase equals $2, curly brace.

185
00:10:26,645 --> 00:10:29,105
My name two commas.

186
00:10:29,105 --> 00:10:30,725
That's it.

187
00:10:30,725 --> 00:10:32,705
Now.

188
00:10:32,705 --> 00:10:36,590
It can display ACO upper data.

189
00:10:36,590 --> 00:10:41,255
Simply, I am writing dollar, your variable.

190
00:10:41,255 --> 00:10:43,265
What is your variable? My name,

191
00:10:43,265 --> 00:10:46,310
upper in that Uppercase data is stored now.

192
00:10:46,310 --> 00:10:51,450
Then echo lower data.

193
00:10:51,670 --> 00:10:57,545
So dollar, my name lower in that our data is there.

194
00:10:57,545 --> 00:10:59,735
Again, offer that I am printing your original data.

195
00:10:59,735 --> 00:11:01,175
It won't change.

196
00:11:01,175 --> 00:11:05,780
Only it will modify your data and we'll store it that this result.

197
00:11:05,780 --> 00:11:07,205
But because of this operation,

198
00:11:07,205 --> 00:11:08,255
you are original data.

199
00:11:08,255 --> 00:11:11,300
This is, my name is not modifying.

200
00:11:11,300 --> 00:11:13,680
That is very, very important.

201
00:11:14,170 --> 00:11:17,750
Now see the content first and run that and

202
00:11:17,750 --> 00:11:20,885
see the output you are getting in capital and small.

203
00:11:20,885 --> 00:11:22,610
You may get confused here.

204
00:11:22,610 --> 00:11:25,415
So already original data in terms of Miletus only, right?

205
00:11:25,415 --> 00:11:30,240
I will do, I will take combinations capital and small so that it can understand.

206
00:11:34,060 --> 00:11:41,140
That's it. Now see that they are getting capital small,

207
00:11:41,140 --> 00:11:42,970
uneven ordinal data is there as it is.

208
00:11:42,970 --> 00:11:46,430
And that data we are seeing with the help of this,

209
00:11:46,620 --> 00:11:51,324
is the way how we can convert our data into lowercase and uppercase.

210
00:11:51,324 --> 00:11:57,760
Next one is uses of DAR name and base name on strings or paths.

211
00:11:57,760 --> 00:12:01,090
Actually DA and name and base their mother commands.

212
00:12:01,090 --> 00:12:03,670
They will work on parts.

213
00:12:03,670 --> 00:12:06,160
The first command DIR name.

214
00:12:06,160 --> 00:12:12,370
So it will strip BAR removes last component from filename ot from the puck.

215
00:12:12,370 --> 00:12:14,770
Let me show you this on command line first.

216
00:12:14,770 --> 00:12:18,674
Suppose if I take BAR name, ETC,

217
00:12:18,674 --> 00:12:23,870
HTTPD, con hatred ebay.com C That isn't what it is giving.

218
00:12:23,870 --> 00:12:28,520
A DC tripping or removing the last content from your path.

219
00:12:28,520 --> 00:12:33,110
Then it is giving the remaining data up to this.

220
00:12:33,110 --> 00:12:40,385
Now, same thing I am applying for a baby named command.

221
00:12:40,385 --> 00:12:43,115
These two commands are very, very important.

222
00:12:43,115 --> 00:12:48,275
C there is a, it is giving Now the last content which is there in your file.

223
00:12:48,275 --> 00:12:51,050
Now these two datas,

224
00:12:51,050 --> 00:12:52,880
if you want to store in a file,

225
00:12:52,880 --> 00:12:55,819
India variable, yes, you can now play with the dollar parenthesis.

226
00:12:55,819 --> 00:13:00,380
But before that what I will do is first time you stored the data into a variable called

227
00:13:00,380 --> 00:13:05,120
suppose HTTPD, pot, fight.

228
00:13:05,120 --> 00:13:07,910
No need to take this lengthy variable name I'm taking just for

229
00:13:07,910 --> 00:13:12,785
your understanding purpose. That's it.

230
00:13:12,785 --> 00:13:16,010
No, engine off directly are playing on

231
00:13:16,010 --> 00:13:19,205
this path I want to apply on this variable you are command.

232
00:13:19,205 --> 00:13:21,530
Then the IR name.

233
00:13:21,530 --> 00:13:26,465
Don't directly, don't write directly where variable name you hard to write with a dollar,

234
00:13:26,465 --> 00:13:31,745
then only the value which is there in the y variable will be substituted.

235
00:13:31,745 --> 00:13:35,135
That's a, suppose if I remove dollar,

236
00:13:35,135 --> 00:13:36,395
then there is no use.

237
00:13:36,395 --> 00:13:37,980
See there isn't.

238
00:13:39,340 --> 00:13:46,010
So take dollar the same way you can take based name as well, based name.

239
00:13:46,010 --> 00:13:49,130
In case if you are parties taurine,

240
00:13:49,130 --> 00:13:51,770
some variable, then base name,

241
00:13:51,770 --> 00:13:55,235
dollar that variable so that the data which is there in this,

242
00:13:55,235 --> 00:13:58,670
that will be replaced in place of this entire data.

243
00:13:58,670 --> 00:14:01,295
That is nothing but this, ETC.

244
00:14:01,295 --> 00:14:02,495
Cough up to that.

245
00:14:02,495 --> 00:14:05,750
See there is no,

246
00:14:05,750 --> 00:14:08,525
you can store the result into your variable as well.

247
00:14:08,525 --> 00:14:11,300
First, let me write a shell script for that already we have a shell script.

248
00:14:11,300 --> 00:14:16,730
Let me open that. Now. Let me comment this code now.

249
00:14:16,730 --> 00:14:20,690
So base if you want to practice, remove this comment.

250
00:14:20,690 --> 00:14:23,060
Foster command, second comment, third,

251
00:14:23,060 --> 00:14:24,890
comment, and practice with the quote,

252
00:14:24,890 --> 00:14:26,970
I will share this court.

253
00:14:27,430 --> 00:14:30,980
My commend. Three.

254
00:14:30,980 --> 00:14:33,155
Now I am writing here.

255
00:14:33,155 --> 00:14:34,250
Now our core.

256
00:14:34,250 --> 00:14:37,385
Suppose I am taking a path called this one,

257
00:14:37,385 --> 00:14:41,420
but I want to get HTTPD constant,

258
00:14:41,420 --> 00:14:42,725
whom means up to this.

259
00:14:42,725 --> 00:14:45,215
Then I am taking one more variable,

260
00:14:45,215 --> 00:14:52,760
HTTPD con home equals to C. If I want to apply command on command line,

261
00:14:52,760 --> 00:14:57,470
I'm doing BAR name, dollar, our variable.

262
00:14:57,470 --> 00:14:59,420
But this is a command,

263
00:14:59,420 --> 00:15:03,335
this command output I want to store into this variable.

264
00:15:03,335 --> 00:15:05,090
Than if you remember.

265
00:15:05,090 --> 00:15:10,670
We had a discussion on this US dollar parenthesis are backstage.

266
00:15:10,670 --> 00:15:12,690
Both will work.

267
00:15:14,080 --> 00:15:15,575
Fine.

268
00:15:15,575 --> 00:15:19,790
Now let me take only HTTPD config file I want to get.

269
00:15:19,790 --> 00:15:23,870
Then dollar parentheses, base name,

270
00:15:23,870 --> 00:15:25,115
then you were variable.

271
00:15:25,115 --> 00:15:26,585
What is your variable?

272
00:15:26,585 --> 00:15:29,360
This easy one variable in that your data is there,

273
00:15:29,360 --> 00:15:31,130
actually, whatever the path is there.

274
00:15:31,130 --> 00:15:39,905
Now let me print HTTPD con footpath file.

275
00:15:39,905 --> 00:15:46,830
So complete path, I can print it with the help of let me remove $1.

276
00:15:48,580 --> 00:15:54,110
Then echo HTTPD con for home.

277
00:15:54,110 --> 00:16:00,155
We stored that in the variable called HTTPD underscore con funders for home.

278
00:16:00,155 --> 00:16:04,490
So he applied to understand the uses of Bayes name on BAR name,

279
00:16:04,490 --> 00:16:08,610
then HTTPD con for file,

280
00:16:09,610 --> 00:16:14,135
HTTPD underscore, underscore file.

281
00:16:14,135 --> 00:16:18,740
And that's it. Let me see the content first.

282
00:16:18,740 --> 00:16:24,185
So these are the lines we are going to execute now because remaining all are commented.

283
00:16:24,185 --> 00:16:27,020
Now I'm running that.

284
00:16:27,020 --> 00:16:28,760
See the result.

285
00:16:28,760 --> 00:16:34,340
Yes, you are getting what gel path from this because of the DAR name command,

286
00:16:34,340 --> 00:16:39,290
we are getting this part and basically we are getting this one here.

287
00:16:39,290 --> 00:16:42,995
That's a fine.

288
00:16:42,995 --> 00:16:44,780
Now with the base name,

289
00:16:44,780 --> 00:16:47,330
we have one more advantage. Let me show you that.

290
00:16:47,330 --> 00:16:54,900
Suppose base name, I'm writing EDC, HTTPD.

291
00:16:55,210 --> 00:16:57,990
Hey, Khan.

292
00:16:58,300 --> 00:17:01,805
He actually built.com. What is the output you are getting?

293
00:17:01,805 --> 00:17:04,445
Simply what HTTP.com file.

294
00:17:04,445 --> 00:17:06,380
But in that file, I want to

295
00:17:06,380 --> 00:17:13,640
strip.com then provide in the way that it is going to get only HTTPD.

296
00:17:13,640 --> 00:17:17,000
So simply base name will strip or

297
00:17:17,000 --> 00:17:20,795
remove directory name and also a suffix from the file names,

298
00:17:20,795 --> 00:17:22,415
not prefix, only suffix.

299
00:17:22,415 --> 00:17:25,610
So in this entire thing, what is the suffix.com?

300
00:17:25,610 --> 00:17:29,195
So if you, if you know what is the suffix and if you want to remove that,

301
00:17:29,195 --> 00:17:31,235
then after base name, you can,

302
00:17:31,235 --> 00:17:32,945
I mean based name, then you are path,

303
00:17:32,945 --> 00:17:36,620
then provide a suffix in him so that that will be removed from your file.

304
00:17:36,620 --> 00:17:40,534
The result will display very, very, very important.

305
00:17:40,534 --> 00:17:43,290
While writing scripts.

306
00:17:44,170 --> 00:17:47,555
Let me write this in script as well.

307
00:17:47,555 --> 00:17:50,165
So that will be clear for us.

308
00:17:50,165 --> 00:18:00,305
Suppose I'm storing that HTTPD con for file without suffix.

309
00:18:00,305 --> 00:18:08,075
Without suffix dies I am taking lengthy were able in just to 41 understanding,

310
00:18:08,075 --> 00:18:10,280
don't take that lengthy variable name way lighting.

311
00:18:10,280 --> 00:18:11,975
You want realtime scripts.

312
00:18:11,975 --> 00:18:15,780
So simply you had to write these anti-doping.

313
00:18:17,620 --> 00:18:20,885
Then our dn, just write.com.

314
00:18:20,885 --> 00:18:22,115
That's it.

315
00:18:22,115 --> 00:18:24,020
Now let me print that.

316
00:18:24,020 --> 00:18:26,675
So last literately, I'm printing your variable.

317
00:18:26,675 --> 00:18:28,265
I'm not adding any extra message.

318
00:18:28,265 --> 00:18:30,420
If you want write, you can write it.

319
00:18:33,940 --> 00:18:36,260
Now see the last output.

320
00:18:36,260 --> 00:18:38,850
Yes, we are getting only hits to the beauty.

321
00:18:38,890 --> 00:18:42,065
That's a fine.

322
00:18:42,065 --> 00:18:48,440
Then next string slicing or extracting portion of a string.

323
00:18:48,440 --> 00:18:49,640
C.

324
00:18:49,640 --> 00:18:55,160
Before this already we know Cut command with Cut command also we can slice out a string.

325
00:18:55,160 --> 00:18:57,335
Suppose I have a shell,

326
00:18:57,335 --> 00:18:59,210
let me directly printed that shell.

327
00:18:59,210 --> 00:19:00,890
Yes, you are getting r.

328
00:19:00,890 --> 00:19:03,920
You can store that into a variable and you can print it that both,

329
00:19:03,920 --> 00:19:06,365
these both are possible, right?

330
00:19:06,365 --> 00:19:09,860
Echo, dollar, my name.

331
00:19:09,860 --> 00:19:13,370
No, on this output I can use Cut command directly

332
00:19:13,370 --> 00:19:16,735
cut based on characters I need Foster character.

333
00:19:16,735 --> 00:19:18,920
I need a second character.

334
00:19:18,920 --> 00:19:23,180
I need second to some fourth character, yes, you are getting.

335
00:19:23,180 --> 00:19:26,330
This is also slicing operation on your strings.

336
00:19:26,330 --> 00:19:27,950
And this resulting can directly assigned to

337
00:19:27,950 --> 00:19:30,230
any variable because this entire thing is a command,

338
00:19:30,230 --> 00:19:34,970
then just write x equals $2 parentheses inside that this enter command.

339
00:19:34,970 --> 00:19:37,115
That is one way to slice he was doing.

340
00:19:37,115 --> 00:19:40,775
So I have given this because already we know Cut command with iPhone C option.

341
00:19:40,775 --> 00:19:44,240
Other than that, when also having one more way.

342
00:19:44,240 --> 00:19:47,070
Let me do one thing first.

343
00:19:49,110 --> 00:19:52,495
Suppose we have a shell.

344
00:19:52,495 --> 00:19:54,685
This is just assume that our string,

345
00:19:54,685 --> 00:19:57,849
whenever, if you assign that string to any variable,

346
00:19:57,849 --> 00:20:01,285
immediately ever shall, we'll assign some positions for this,

347
00:20:01,285 --> 00:20:06,865
some numbers for that number is by default 12.

348
00:20:06,865 --> 00:20:10,480
Likewise, it will assign 34.

349
00:20:10,480 --> 00:20:12,190
Likewise it will assign,

350
00:20:12,190 --> 00:20:14,170
suppose you've held shell scripting,

351
00:20:14,170 --> 00:20:21,220
suppose shelf space, scripting spaces at 567.

352
00:20:21,220 --> 00:20:24,339
Likewise, he was telling me la sign some numbers.

353
00:20:24,339 --> 00:20:25,630
Right?

354
00:20:25,630 --> 00:20:27,910
Now let me write this on a notepad,

355
00:20:27,910 --> 00:20:30,330
then will explain about this.

356
00:20:30,330 --> 00:20:36,650
Suppose I am writing a variable called my name equals to shell.

357
00:20:36,650 --> 00:20:37,580
Whenever.

358
00:20:37,580 --> 00:20:40,490
If we assign in this way, immediately, you will,

359
00:20:40,490 --> 00:20:45,365
shall we'll assign some numbers for your characters which are there in your string.

360
00:20:45,365 --> 00:20:46,295
S.

361
00:20:46,295 --> 00:20:48,695
Number is 0, heads one.

362
00:20:48,695 --> 00:20:51,035
Likewise, it will assign the numbers,

363
00:20:51,035 --> 00:20:56,210
and these are called index numbers for clustering C that,

364
00:20:56,210 --> 00:20:58,625
yes, he's there at very first, that index each GO,

365
00:20:58,625 --> 00:21:01,595
Hetchy is there at second position, but Index is one.

366
00:21:01,595 --> 00:21:04,340
Now based on this index potions also,

367
00:21:04,340 --> 00:21:06,050
you can slice your string.

368
00:21:06,050 --> 00:21:09,110
Now let me write a separate shell script for that.

369
00:21:09,110 --> 00:21:14,720
So string slicing operations, dot SH.

370
00:21:14,720 --> 00:21:17,580
So I'm writing separate shell script.

371
00:21:18,130 --> 00:21:21,755
Let me write my name equals to shell,

372
00:21:21,755 --> 00:21:25,595
not only shell, let me take some lengthy string shell scripting.

373
00:21:25,595 --> 00:21:32,330
And first-time directly displaying the virginal string which is there in your mind name.

374
00:21:32,330 --> 00:21:35,165
And here guys, for slicing operations,

375
00:21:35,165 --> 00:21:36,560
you need curly braces.

376
00:21:36,560 --> 00:21:38,180
That's the reason I told that.

377
00:21:38,180 --> 00:21:42,065
It's better practice to take always curly braces for your variable Nim.

378
00:21:42,065 --> 00:21:43,505
There is no wrong in that.

379
00:21:43,505 --> 00:21:45,560
But sometimes you have to use mandatory.

380
00:21:45,560 --> 00:21:50,510
That's why make a habit that always use curly braces for your variable.

381
00:21:50,510 --> 00:21:55,609
Now, I'm displaying in this way my name,

382
00:21:55,609 --> 00:22:00,480
column G. Then echo.

383
00:22:01,960 --> 00:22:07,910
Echo, dollar, my name, colon 1.

384
00:22:07,910 --> 00:22:09,995
First, see the output for this.

385
00:22:09,995 --> 00:22:13,260
Provide the exclusion permissions here.

386
00:22:16,090 --> 00:22:19,890
Then see your core ones.

387
00:22:19,900 --> 00:22:25,190
Then run your code and see the output C.

388
00:22:25,190 --> 00:22:27,650
Because of this, you are getting that

389
00:22:27,650 --> 00:22:30,230
is directly or displaying your variable value directly.

390
00:22:30,230 --> 00:22:32,990
You are getting uneven infrared colon 0,

391
00:22:32,990 --> 00:22:34,235
you're getting complete thing,

392
00:22:34,235 --> 00:22:36,515
complete, you are getting.

393
00:22:36,515 --> 00:22:39,830
But if I write one you are getting from which onwards?

394
00:22:39,830 --> 00:22:43,220
That means if I write in this way colon with

395
00:22:43,220 --> 00:22:48,245
the gyro printed the string from index 0 onwards up to yen.

396
00:22:48,245 --> 00:22:51,875
One printed the string which is there in your variable.

397
00:22:51,875 --> 00:22:53,780
From index one.

398
00:22:53,780 --> 00:22:57,110
Index one means HMO S E is index 0.

399
00:22:57,110 --> 00:23:01,025
Hattie's at one. Now.

400
00:23:01,025 --> 00:23:06,035
Now what I am doing is I am writing one more thing.

401
00:23:06,035 --> 00:23:07,490
Let me do that.

402
00:23:07,490 --> 00:23:08,675
First.

403
00:23:08,675 --> 00:23:12,875
My name, colon. Two, I am writing,

404
00:23:12,875 --> 00:23:15,440
but immediately I am writing one again with colon.

405
00:23:15,440 --> 00:23:20,020
Then what is the meaningful that you can understand by observing the output?

406
00:23:20,020 --> 00:23:21,445
And I'm hurting One more thing,

407
00:23:21,445 --> 00:23:24,700
my name colon, I'm writing to.

408
00:23:24,700 --> 00:23:29,665
Then after that I am eliminating colon with the three. Now let me run this.

409
00:23:29,665 --> 00:23:32,110
First, observe the output.

410
00:23:32,110 --> 00:23:34,750
Let me open your script.

411
00:23:34,750 --> 00:23:36,970
Now I'm running your script C,

412
00:23:36,970 --> 00:23:41,545
that is because of this complete string.

413
00:23:41,545 --> 00:23:47,800
Even because of this also are getting complete string because print from index 0 onwards.

414
00:23:47,800 --> 00:23:52,135
Now here, one, print from one index onwards.

415
00:23:52,135 --> 00:23:56,620
That's why we are getting H-E-L-L-O scripting bring from T2,

416
00:23:56,620 --> 00:23:58,420
but get only one character.

417
00:23:58,420 --> 00:24:01,220
That's, that's the reason they're getting ie index is to

418
00:24:01,220 --> 00:24:04,280
know From yon words get you a string.

419
00:24:04,280 --> 00:24:05,930
But I'm applying a condition that is,

420
00:24:05,930 --> 00:24:07,505
print only one character.

421
00:24:07,505 --> 00:24:10,355
That's why you are getting only E. Now,

422
00:24:10,355 --> 00:24:12,605
print from secondary index,

423
00:24:12,605 --> 00:24:15,755
that is from E, but only three characters.

424
00:24:15,755 --> 00:24:19,130
That's why we are getting three. So this is also one more way to slice.

425
00:24:19,130 --> 00:24:21,305
He was string and friends.

426
00:24:21,305 --> 00:24:22,790
These operations are very,

427
00:24:22,790 --> 00:24:25,175
very important while writing your realtime scripts.

428
00:24:25,175 --> 00:24:29,060
Please do practice on this any way I will share our scripts.

429
00:24:29,060 --> 00:24:34,110
You just go through that and do practice. Ok. Thank you.

