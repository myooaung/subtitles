WEBVTT
ï»¿1
00:00:00.710 --> 00:00:05.880
Friends here our concept is arithmetic operators.

2
00:00:05.880 --> 00:00:08.115
Say basically in our shells taped,

3
00:00:08.115 --> 00:00:11.460
the default data type of a variable is a string.

4
00:00:11.460 --> 00:00:15.120
I mean, if I store any number in a variable,

5
00:00:15.120 --> 00:00:17.580
and that number may be integer or float.

6
00:00:17.580 --> 00:00:20.115
But he was shelved me, consider that as a string.

7
00:00:20.115 --> 00:00:22.410
Even if you store string AND available,

8
00:00:22.410 --> 00:00:24.255
that is also considered as a string.

9
00:00:24.255 --> 00:00:25.965
So because of this,

10
00:00:25.965 --> 00:00:31.035
it is somewhat difficult to perform mathematical operations using your shell script.

11
00:00:31.035 --> 00:00:35.444
So if you want to perform any advanced level mathematical operations,

12
00:00:35.444 --> 00:00:41.050
then please go with either Pearl or Python script and include that in our shell script.

13
00:00:41.050 --> 00:00:43.670
However, we need some minimum,

14
00:00:43.670 --> 00:00:47.735
basic arithmetic operations to perform our shell scripts.

15
00:00:47.735 --> 00:00:51.590
Further, it will support by using different utilities or commands that are

16
00:00:51.590 --> 00:00:55.475
like declare, expression and let.

17
00:00:55.475 --> 00:01:00.424
And these three commands or wold ways to perform your arithmetic operations.

18
00:01:00.424 --> 00:01:03.020
I'm not going to discuss about these three.

19
00:01:03.020 --> 00:01:08.630
Now the advanced level commands Syntax

20
00:01:08.630 --> 00:01:14.615
is to perform your arithmetic operations or parenthesis and bash calculator BC.

21
00:01:14.615 --> 00:01:22.520
And here parenthesis or valid to perform arithmetic operations on integers.

22
00:01:22.520 --> 00:01:24.215
But using bash calculator,

23
00:01:24.215 --> 00:01:27.560
you can use your data as integers or maybe float numbers.

24
00:01:27.560 --> 00:01:30.155
Now let me explain them on your terminal.

25
00:01:30.155 --> 00:01:35.825
Suppose I am taking X equals to some seven and y equals two. Let me take fine.

26
00:01:35.825 --> 00:01:38.495
Now I want to find the addition of these two,

27
00:01:38.495 --> 00:01:41.105
and I want to store that in the variable called sum.

28
00:01:41.105 --> 00:01:44.630
Then directly start with parenthesis, two parentheses,

29
00:01:44.630 --> 00:01:49.160
sum equals to x plus y.

30
00:01:49.160 --> 00:01:52.745
Then printing the result dollar sum.

31
00:01:52.745 --> 00:01:57.740
But you can also find subtraction.

32
00:01:57.740 --> 00:01:59.525
Let me do that.

33
00:01:59.525 --> 00:02:03.334
X minus y. Let me take this as subtraction,

34
00:02:03.334 --> 00:02:04.910
not try to print that.

35
00:02:04.910 --> 00:02:08.209
Now let subtraction.

36
00:02:08.209 --> 00:02:11.585
Now, you can also find multiplications.

37
00:02:11.585 --> 00:02:17.400
Let me take variable as multiplication then X star Y.

38
00:02:17.800 --> 00:02:26.720
Now see there is a, you can also do some division operation.

39
00:02:26.720 --> 00:02:28.640
Now let me take division equals two.

40
00:02:28.640 --> 00:02:31.920
Suppose I am taking x division white.

41
00:02:31.930 --> 00:02:34.535
But see the result.

42
00:02:34.535 --> 00:02:36.635
You got to understand here.

43
00:02:36.635 --> 00:02:38.555
You're getting result as only one,

44
00:02:38.555 --> 00:02:40.565
actually had to get one dot something.

45
00:02:40.565 --> 00:02:46.550
So that is a float result that is not possible with the word parenthesis symbol.

46
00:02:46.550 --> 00:02:48.860
You can also find some remainder.

47
00:02:48.860 --> 00:02:54.830
Now let me find reminder equals to x remainder, right?

48
00:02:54.830 --> 00:02:58.380
Now let me print it that reminder.

49
00:02:58.630 --> 00:03:02.960
Yes, you're getting fine.

50
00:03:02.960 --> 00:03:08.255
Now you can also increment your value by one and decrement your value by one.

51
00:03:08.255 --> 00:03:11.510
Let's say I'm having x already as seven.

52
00:03:11.510 --> 00:03:14.225
Suppose if I do x plus plus,

53
00:03:14.225 --> 00:03:15.860
then see the result.

54
00:03:15.860 --> 00:03:19.235
What is there now in your x eight?

55
00:03:19.235 --> 00:03:21.815
And again, decrement your value.

56
00:03:21.815 --> 00:03:23.780
Let me take two, decrement your value.

57
00:03:23.780 --> 00:03:26.240
I am taking y as of now way value is phi,

58
00:03:26.240 --> 00:03:28.670
I'm doing Y minus minus.

59
00:03:28.670 --> 00:03:29.990
Now see the result.

60
00:03:29.990 --> 00:03:31.850
What is there in your white?

61
00:03:31.850 --> 00:03:38.150
Previously it was phi nowadays for And one more thing while performing in this way.

62
00:03:38.150 --> 00:03:40.955
These two, I mean,

63
00:03:40.955 --> 00:03:42.680
here we are using two variables.

64
00:03:42.680 --> 00:03:44.450
It may be one variable and directly you can

65
00:03:44.450 --> 00:03:47.330
substitute one has value also, let me do one thing.

66
00:03:47.330 --> 00:03:49.385
Let me take suppose some.

67
00:03:49.385 --> 00:03:53.675
So anywhere some, I'm doing x currently x-value is eight,

68
00:03:53.675 --> 00:03:57.275
x plus ten. Now see the result.

69
00:03:57.275 --> 00:04:00.080
I mean, you can take either variable or directly,

70
00:04:00.080 --> 00:04:02.000
you can take your value also.

71
00:04:02.000 --> 00:04:02.945
What happened?

72
00:04:02.945 --> 00:04:05.640
Yeah, it is sum not Iulium.

73
00:04:07.000 --> 00:04:10.460
You're getting 188 plus ten.

74
00:04:10.460 --> 00:04:13.490
And you can also shoot both our values also.

75
00:04:13.490 --> 00:04:16.970
So I'm taking suppose some two plus ten.

76
00:04:16.970 --> 00:04:20.240
Now see there is a yes,

77
00:04:20.240 --> 00:04:23.435
you are getting to a fine.

78
00:04:23.435 --> 00:04:28.640
And directly if you want to print the result of any operation,

79
00:04:28.640 --> 00:04:30.800
you can use the ACO, be clear,

80
00:04:30.800 --> 00:04:33.155
I'm taking dollar, $1.2 parenthesis.

81
00:04:33.155 --> 00:04:35.945
Suppose I am taking four plus some three.

82
00:04:35.945 --> 00:04:40.580
Now see there is a, you can directly print your result by using dollar for

83
00:04:40.580 --> 00:04:46.490
your syntax with the echo command. Right, fine.

84
00:04:46.490 --> 00:04:52.760
Now, suppose if we want to get your result in terms of float,

85
00:04:52.760 --> 00:04:54.799
then you are parenthesis.

86
00:04:54.799 --> 00:04:56.750
Syntax is not applicable.

87
00:04:56.750 --> 00:05:03.290
Now let me take, suppose I am taking x equals to 4.5 and y equals,

88
00:05:03.290 --> 00:05:13.620
I'm taking suppose some 3.What to 3.5. then I'm finding some sum equals to x plus y.

89
00:05:14.770 --> 00:05:19.070
Now see that syntax error,

90
00:05:19.070 --> 00:05:22.835
Invalid arithmetic operator error token is.5.

91
00:05:22.835 --> 00:05:25.010
That means actually what data is in terms of flow.

92
00:05:25.010 --> 00:05:26.360
That's why it is not possible.

93
00:05:26.360 --> 00:05:29.120
In that case, you have to take bash calculator.

94
00:05:29.120 --> 00:05:33.065
Now, let me get a syntax for your bash calculator, simply bc.

95
00:05:33.065 --> 00:05:36.635
Before that guys, you should have a bash calculator on your host.

96
00:05:36.635 --> 00:05:41.150
Some operating systems may not come with your bash calculator.

97
00:05:41.150 --> 00:05:45.530
Then in that case, you how to install your bass using yum install with iPhones

98
00:05:45.530 --> 00:05:51.450
or BC hyphen y with root privileges if you're not the root user.

99
00:05:53.620 --> 00:05:56.765
Right? See already our bash.

100
00:05:56.765 --> 00:05:58.490
That's what I look like and use that.

101
00:05:58.490 --> 00:06:01.250
So simply bash calculator b,

102
00:06:01.250 --> 00:06:04.280
c, less than, less than,

103
00:06:04.280 --> 00:06:05.420
less than three times.

104
00:06:05.420 --> 00:06:07.970
Then in quotations that Italy, right,

105
00:06:07.970 --> 00:06:12.770
you are variables but in terms of dollar x plus dollar y.

106
00:06:12.770 --> 00:06:15.060
So here dollar is required.

107
00:06:15.060 --> 00:06:18.620
Now see there is a, we are getting 7.7.

108
00:06:19.470 --> 00:06:20.905
Fine.

109
00:06:20.905 --> 00:06:25.615
Now let me take one more variable called X equals to some six.

110
00:06:25.615 --> 00:06:30.325
And I am taking y equals to some 700, 4-5 something.

111
00:06:30.325 --> 00:06:34.570
Now I want to find the y division with six.

112
00:06:34.570 --> 00:06:40.180
Then I am taking BEC calculator, less than, less than,

113
00:06:40.180 --> 00:06:44.005
less than quotations, dollar x,

114
00:06:44.005 --> 00:06:46.840
dollar y, division, dollar x.

115
00:06:46.840 --> 00:06:48.445
But see the output first,

116
00:06:48.445 --> 00:06:50.335
you are getting integer number.

117
00:06:50.335 --> 00:06:54.865
Definitely are going to get result as some float.

118
00:06:54.865 --> 00:06:58.155
But you are getting only integer. So in that case.

119
00:06:58.155 --> 00:07:00.410
You have to mention scale.

120
00:07:00.410 --> 00:07:01.925
Scale equals two.

121
00:07:01.925 --> 00:07:06.830
I want to get at least one floating point in your result.

122
00:07:06.830 --> 00:07:10.235
Yes, now you are getting, if you want to get two floating points,

123
00:07:10.235 --> 00:07:12.800
if there is a second floating point,

124
00:07:12.800 --> 00:07:15.140
then you will get that number. Otherwise you'll get 0.

125
00:07:15.140 --> 00:07:17.120
Yes, there is 16.

126
00:07:17.120 --> 00:07:19.320
Let me take four.

127
00:07:19.750 --> 00:07:22.490
That's a 666 you are getting.

128
00:07:22.490 --> 00:07:23.825
So if we take any scale,

129
00:07:23.825 --> 00:07:26.310
you will get always all R6.

130
00:07:26.680 --> 00:07:28.265
Fine.

131
00:07:28.265 --> 00:07:33.890
Now let me write a symbol shell script to find the addition,

132
00:07:33.890 --> 00:07:37.340
subtraction multiplication or something like that.

133
00:07:37.340 --> 00:07:43.940
See, I am writing arithmetic operations from dot SH.

134
00:07:43.940 --> 00:07:46.700
So I am writing very first-line as our shebang line.

135
00:07:46.700 --> 00:07:49.295
So I'm taking user bin bash.

136
00:07:49.295 --> 00:07:51.950
I am defining x equals to some y,

137
00:07:51.950 --> 00:07:55.985
sorry five and y equals to some ID nine, you can take anything.

138
00:07:55.985 --> 00:08:02.435
Then I'm finding, suppose directly I am finding some c.

139
00:08:02.435 --> 00:08:04.895
Observe that some, I'm taking two parenthesis,

140
00:08:04.895 --> 00:08:09.740
some Nikos to simply x plus y here you should not known it to take your parentheses,

141
00:08:09.740 --> 00:08:12.020
sorry, dollar for your variables,

142
00:08:12.020 --> 00:08:14.450
simply write sum equals to x plus y.

143
00:08:14.450 --> 00:08:18.005
Then after that, simply print the word sum.

144
00:08:18.005 --> 00:08:21.380
So if you want to get some messages, you can modify that.

145
00:08:21.380 --> 00:08:29.665
I will show you that you're getting 94 because 8994.

146
00:08:29.665 --> 00:08:31.915
Now instead of printing in the way,

147
00:08:31.915 --> 00:08:33.595
I can also print it this one way.

148
00:08:33.595 --> 00:08:40.675
I mean the addition of your 1, y 0s.

149
00:08:40.675 --> 00:08:44.230
So whatever the values you are having in your x and y that I'm printing,

150
00:08:44.230 --> 00:08:46.855
that's a very just to decorate your output.

151
00:08:46.855 --> 00:08:51.590
Yes, you're getting 589 edition is 94.

152
00:08:51.990 --> 00:08:57.090
That's fine. Now, let me find some division, see friends.

153
00:08:57.090 --> 00:08:58.690
Whenever if you are using division,

154
00:08:58.690 --> 00:09:00.265
please use Bash calculator.

155
00:09:00.265 --> 00:09:04.530
Suppose I am taking same shell script,

156
00:09:04.530 --> 00:09:07.080
but here I am finding.

157
00:09:09.460 --> 00:09:12.920
And one more thing, yeah, see,

158
00:09:12.920 --> 00:09:16.340
this is a command here somewhere we did with bash skeleton, right?

159
00:09:16.340 --> 00:09:18.620
Let me, this is a comment.

160
00:09:18.620 --> 00:09:22.235
So if you want to assign this command result into a variable,

161
00:09:22.235 --> 00:09:26.870
we have a syntax for it is that any command output we can store integer variable.

162
00:09:26.870 --> 00:09:32.300
Suppose I am storing this into a variable called my result equals

163
00:09:32.300 --> 00:09:38.150
$2 parenthesis inside that you had to write your syntax. Be clear on that.

164
00:09:38.150 --> 00:09:41.015
There is a bash calculator is a command.

165
00:09:41.015 --> 00:09:44.270
Now that command result I want to assign to a variable,

166
00:09:44.270 --> 00:09:45.965
then you have to use our syntax,

167
00:09:45.965 --> 00:09:48.935
either back stick or dollar parenthesis.

168
00:09:48.935 --> 00:09:51.590
Now see the result, my result.

169
00:09:51.590 --> 00:09:53.945
So you are 12V 4.1a,

170
00:09:53.945 --> 00:09:56.480
66 will be there in my result.

171
00:09:56.480 --> 00:09:59.330
Now, same thing you can use in your shell script also.

172
00:09:59.330 --> 00:10:04.760
Now I am finding why division with fine.

173
00:10:04.760 --> 00:10:06.995
Now let me do that.

174
00:10:06.995 --> 00:10:11.720
So results simply I'm taking equals $2 parenthesis,

175
00:10:11.720 --> 00:10:14.930
bash calculator three less than,

176
00:10:14.930 --> 00:10:17.630
then quotation, then I'm rating

177
00:10:17.630 --> 00:10:20.795
scale equal to suppose I want to get at these three points,

178
00:10:20.795 --> 00:10:23.780
then semicolon, right? Diva.

179
00:10:23.780 --> 00:10:25.895
Dollar x, I mean,

180
00:10:25.895 --> 00:10:30.770
I ended divide wavy takes dollar y slash dollar x.

181
00:10:30.770 --> 00:10:33.330
So here we need,

182
00:10:33.610 --> 00:10:37.790
here we need dollar for your variables,

183
00:10:37.790 --> 00:10:39.200
but anywhere parenthesis symbol,

184
00:10:39.200 --> 00:10:40.415
no need to take dollar.

185
00:10:40.415 --> 00:10:41.000
That's it.

186
00:10:41.000 --> 00:10:43.895
Now after that, I can print my result in this way.

187
00:10:43.895 --> 00:10:49.940
So simply the division of

188
00:10:49.940 --> 00:10:58.590
width x is so that result we stored in our variable called result. That's it.

189
00:10:59.140 --> 00:11:03.590
Now let me show you the core ones and let me run this.

190
00:11:03.590 --> 00:11:05.750
Yes, you are getting.

191
00:11:05.750 --> 00:11:08.750
Now, if you run our shell script any number of

192
00:11:08.750 --> 00:11:11.480
times it is going to get always result as 9417.

193
00:11:11.480 --> 00:11:13.100
But I don't want to work in this Weber number.

194
00:11:13.100 --> 00:11:14.240
If I run my shell escape,

195
00:11:14.240 --> 00:11:17.495
it has to ask Enter your first number and the second number.

196
00:11:17.495 --> 00:11:19.340
Then I want to find the addition.

197
00:11:19.340 --> 00:11:21.500
Then I am writing one more shall skim,

198
00:11:21.500 --> 00:11:24.365
read and find I am writing only for some,

199
00:11:24.365 --> 00:11:30.755
you can apply that for your different operations as well as h. So it is important guys,

200
00:11:30.755 --> 00:11:32.885
user bin bash, I mean,

201
00:11:32.885 --> 00:11:35.855
not the core concept.

202
00:11:35.855 --> 00:11:41.960
Read iPhone P, enter reward. First number.

203
00:11:41.960 --> 00:11:43.685
So I can take any variable.

204
00:11:43.685 --> 00:11:45.440
Suppose I am taking simply.

205
00:11:45.440 --> 00:11:48.455
Then read hyphen p,

206
00:11:48.455 --> 00:11:51.755
enter your second number.

207
00:11:51.755 --> 00:11:53.930
Then I am taking that as a b.

208
00:11:53.930 --> 00:11:56.465
Then I wanted to find the addition of these two.

209
00:11:56.465 --> 00:11:59.150
Then simply use parenthesis.

210
00:11:59.150 --> 00:12:03.605
If you are expecting your inputs are integers,

211
00:12:03.605 --> 00:12:08.585
then let me simply take sum equals to E a plus B. That's it.

212
00:12:08.585 --> 00:12:17.030
Then print the addition of a and B is,

213
00:12:17.030 --> 00:12:26.510
then you can write some that's now changed more plus x read.

214
00:12:26.510 --> 00:12:30.740
Then run your shell script and see the result.

215
00:12:30.740 --> 00:12:32.630
So it is asking, yeah, before that,

216
00:12:32.630 --> 00:12:37.940
let me open your code must cat.

217
00:12:37.940 --> 00:12:39.140
Because by seeing this,

218
00:12:39.140 --> 00:12:40.385
you can understand what is,

219
00:12:40.385 --> 00:12:42.590
what are the steps you are having in your shell script.

220
00:12:42.590 --> 00:12:44.900
For the very first step, you are trying to read

221
00:12:44.900 --> 00:12:47.315
the first number and we are storing that in the year.

222
00:12:47.315 --> 00:12:51.770
So whatever I enter here that will store into variable called E,

223
00:12:51.770 --> 00:12:55.130
then I'm entering one more number 35, then result,

224
00:12:55.130 --> 00:12:57.245
you are getting a D. But Simscape,

225
00:12:57.245 --> 00:12:59.795
I'm providing for 0.5c.

226
00:12:59.795 --> 00:13:01.370
I mean, flood points.

227
00:13:01.370 --> 00:13:05.255
I am providing phi dot six C that it is not possible.

228
00:13:05.255 --> 00:13:08.570
So that's why if you are expecting your result, I mean,

229
00:13:08.570 --> 00:13:13.160
if your inputs in terms of a float on your result also in terms of float,

230
00:13:13.160 --> 00:13:16.910
then use Bash calculator, that's a better one.

231
00:13:16.910 --> 00:13:20.540
But this parenthesis symbols are useful in

232
00:13:20.540 --> 00:13:23.660
your loops because we are going to repeat some loop,

233
00:13:23.660 --> 00:13:25.805
these many number of times, some ten times,

234
00:13:25.805 --> 00:13:29.405
a 100 times, some 20 times or based on some requirement at the time.

235
00:13:29.405 --> 00:13:32.160
Parenthesis symbols or useful.

236
00:13:32.200 --> 00:13:36.605
Right? Now what I'm doing is simply I'm taking,

237
00:13:36.605 --> 00:13:38.705
I commented that previous code,

238
00:13:38.705 --> 00:13:41.585
sum equals $2 parentheses.

239
00:13:41.585 --> 00:13:45.320
That's why I'm taking dollar parentheses because bash calculator is

240
00:13:45.320 --> 00:13:48.620
the command that result I'm storing in a variable called sum.

241
00:13:48.620 --> 00:13:51.155
That's why I use dollar parenthesis.

242
00:13:51.155 --> 00:13:54.800
Then quotations, skill.

243
00:13:54.800 --> 00:13:57.350
I wanted to get up to, to float points.

244
00:13:57.350 --> 00:13:58.970
Then you are variables.

245
00:13:58.970 --> 00:14:03.050
Dollar a, place, dollar b.

246
00:14:03.050 --> 00:14:06.650
Close your quotations, close your parenthesis, and that's,

247
00:14:06.650 --> 00:14:13.115
you know, let me run and see the result 30 for providing that lineage in numbers.

248
00:14:13.115 --> 00:14:14.870
Yes, it's working. Now.

249
00:14:14.870 --> 00:14:17.660
I am providing some float points.

250
00:14:17.660 --> 00:14:21.545
It is also working. So Bash culture, it is the best one.

251
00:14:21.545 --> 00:14:24.875
But make sure that before going to use our bash calculator,

252
00:14:24.875 --> 00:14:27.005
usually either bash calculator on your host.

253
00:14:27.005 --> 00:14:29.540
That's it. Okay.

254
00:14:29.540 --> 00:14:32.550
Okay guys, thank you for watching this video.

