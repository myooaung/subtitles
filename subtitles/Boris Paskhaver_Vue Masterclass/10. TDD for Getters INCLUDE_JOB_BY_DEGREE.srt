1
00:00:00,710 --> 00:00:01,280
Okay.

2
00:00:01,280 --> 00:00:07,040
So in the previous lesson we added a selected degrees property to our view X Store State.

3
00:00:07,370 --> 00:00:12,530
And of course, the reason all of these properties exist right here, selected organizations like and

4
00:00:12,530 --> 00:00:14,270
job types and now selected degrees.

5
00:00:14,630 --> 00:00:18,320
The reason they exist is so that we can use them to filter in our getters.

6
00:00:18,650 --> 00:00:23,990
So let's open up our getters test file as well as the corresponding test file in getters that test.

7
00:00:23,990 --> 00:00:25,910
That test, which I have on the right hand side.

8
00:00:26,360 --> 00:00:31,760
And as a reminder, we have these two helper getters right here, include job by organization and include

9
00:00:31,760 --> 00:00:32,780
job by job type.

10
00:00:33,140 --> 00:00:39,230
And these are individual getters that are responsible for figuring out whether one given job matches

11
00:00:39,230 --> 00:00:41,570
the criteria that is needed to include it.

12
00:00:41,720 --> 00:00:47,570
And the final result of filter jobs, for example, in our include job by organization getter, we receive

13
00:00:47,570 --> 00:00:52,730
a single job and then we check whether that job's individual organization, which we can get right here

14
00:00:52,730 --> 00:00:58,160
on its organization property, we check whether that organization is present in the array of selected

15
00:00:58,160 --> 00:01:01,820
organizations that the user has populated by selecting checkboxes.

16
00:01:02,120 --> 00:01:05,660
And then our include job by job type getter works very similarly.

17
00:01:05,870 --> 00:01:07,760
It similarly accepts a single job.

18
00:01:08,510 --> 00:01:13,700
It looks at that jobs job type property right here and it checks whether that string is present in the

19
00:01:13,820 --> 00:01:20,750
selected job types array of UCS store state, which itself is populated by the users selecting the job

20
00:01:20,750 --> 00:01:21,710
types checkboxes.

21
00:01:22,070 --> 00:01:25,580
So we need to do something very similar for include job by degree.

22
00:01:25,760 --> 00:01:30,920
And then once we wire that up, of course we also have our filter jobs getter right here and this is

23
00:01:30,920 --> 00:01:36,740
the one that actually iterates over the array of all the jobs and uses these helper getters to arrive

24
00:01:36,740 --> 00:01:40,400
at the final array of the jobs that match all the criteria.

25
00:01:40,610 --> 00:01:45,850
So the organization must match, the job type must match and the degree must match as well.

26
00:01:46,190 --> 00:01:50,780
Remember as well that we have these if statements right here on lines 33 and 37.

27
00:01:50,990 --> 00:01:56,480
And what that is saying is if the user has not selected any checkboxes, so if the user has not selected,

28
00:01:56,480 --> 00:02:01,160
for example, any organization or any job type, we will include all jobs.

29
00:02:01,160 --> 00:02:06,200
As the jobs flow through this check, all of them will pass because if none of them pass, then we'll

30
00:02:06,200 --> 00:02:07,640
have no jobs to show the user.

31
00:02:07,910 --> 00:02:13,160
So basically, if the user has not interacted with a checkbox group, every job will pass that test.

32
00:02:13,280 --> 00:02:13,670
All right.

33
00:02:14,300 --> 00:02:19,790
So in this case, if the user does not select any degrees, we don't want to show them zero jobs.

34
00:02:19,790 --> 00:02:22,670
We want to show them all jobs because they haven't made a selection yet.

35
00:02:22,910 --> 00:02:26,150
And that design allows us to incorporate all of these getters at the same time.

36
00:02:26,520 --> 00:02:26,900
All right.

37
00:02:26,930 --> 00:02:32,450
Now, as a quick reminder, if I open, it might be that JSON file and I scroll down to my jobs section

38
00:02:32,450 --> 00:02:32,870
right here.

39
00:02:32,870 --> 00:02:35,810
This is our jobs response on any given job object.

40
00:02:35,960 --> 00:02:37,730
We're going to have a degree property.

41
00:02:37,730 --> 00:02:39,650
So in this one, it's master's, for example.

42
00:02:39,830 --> 00:02:45,830
And so this is the property we want to check on a given job object and see if that current jobs degree

43
00:02:46,040 --> 00:02:49,080
is a string that is present in our selected degrees array.

44
00:02:49,190 --> 00:02:53,600
If it is, then we want to include the job and if it's not present, then we want to exclude.

45
00:02:53,960 --> 00:02:54,230
All right.

46
00:02:54,230 --> 00:02:56,690
So again, very similar implementation to what we have here.

47
00:02:56,870 --> 00:03:00,710
So I'm going to begin by writing a bunch of tests in my getters file and fact.

48
00:03:00,710 --> 00:03:06,410
I'm going to copy and paste our collection of tests right here for include job by job type, because

49
00:03:06,410 --> 00:03:08,000
my new ones are going to be very similar.

50
00:03:08,330 --> 00:03:09,590
So I'm going to copy all this.

51
00:03:10,190 --> 00:03:11,960
And in my case I have it collapsed.

52
00:03:11,960 --> 00:03:13,520
If you have it on collapsed, not a problem.

53
00:03:13,520 --> 00:03:18,140
Just make sure you copy all of the code for these two tests from above.

54
00:03:18,560 --> 00:03:18,800
All right.

55
00:03:18,800 --> 00:03:20,670
So let's change everything that we need to change.

56
00:03:20,670 --> 00:03:25,550
So right here, instead of include job by job type, I'm going to change this to include job by degree.

57
00:03:26,900 --> 00:03:32,780
And right here is a more specific scenario captured by a to describe when the user has not selected

58
00:03:32,780 --> 00:03:33,800
any degrees.

59
00:03:34,190 --> 00:03:38,060
This is a scenario where we automatically want to include a degree no matter what.

60
00:03:38,420 --> 00:03:40,250
So here I'm going to start off with a state.

61
00:03:40,250 --> 00:03:43,760
And of course the property we care about is selected degrees in this case.

62
00:03:44,210 --> 00:03:49,220
So in this case we are creating a state where we have an empty array, which means the user has not

63
00:03:49,220 --> 00:03:54,530
yet selected any degrees whatsoever from the eventual checkboxes on the screen, which means we want

64
00:03:54,530 --> 00:03:58,160
to include every job as as this test or as this filter runs.

65
00:03:58,160 --> 00:03:58,400
Right.

66
00:03:58,790 --> 00:04:00,530
It doesn't mean we're not filtering by anything else.

67
00:04:00,530 --> 00:04:05,210
It means when it comes to determining whether a job fulfills the degree requirements, the user has

68
00:04:05,210 --> 00:04:06,500
not chosen any degrees.

69
00:04:06,500 --> 00:04:08,150
So we want to include all jobs.

70
00:04:08,510 --> 00:04:12,980
So right here, when we create a new job, we don't really care about the job type property anymore.

71
00:04:13,070 --> 00:04:17,420
We care about the property we just saw in DV that JSON, which is going to be degree right here.

72
00:04:18,260 --> 00:04:22,100
So this is going to be a degree and we're going to give it a value, let's say associate.

73
00:04:23,230 --> 00:04:24,310
It doesn't really matter what it is.

74
00:04:24,790 --> 00:04:28,870
Then here we have a concept called include job, which is going to invoke a group.

75
00:04:29,080 --> 00:04:31,300
In this case, we don't want to use our job type getter.

76
00:04:31,300 --> 00:04:35,470
We want to write the getter that we will eventually implement and that is going to be called include

77
00:04:35,470 --> 00:04:36,520
job by degree.

78
00:04:38,110 --> 00:04:42,700
Remember, the way this works is you have a getter, which is a method that accepts state.

79
00:04:42,970 --> 00:04:47,980
And then that getter method returns a function that return that accepts whatever parameters you want.

80
00:04:48,220 --> 00:04:51,220
So similar to what we have right here, here is our actual getter method.

81
00:04:51,430 --> 00:04:53,890
And it returns this whole function right here.

82
00:04:54,070 --> 00:04:56,860
And that function is what accepts the actual custom argument.

83
00:04:57,100 --> 00:05:01,930
So here we are getting back a function from the getter method called including by degree, and we are

84
00:05:01,930 --> 00:05:06,220
immediately invoking that function and passing in our job object from above.

85
00:05:06,610 --> 00:05:10,750
So in this case, because we have no selected degrees, we expect that this job should be included.

86
00:05:10,960 --> 00:05:13,220
So include job should be equal to true.

87
00:05:14,110 --> 00:05:14,400
All right.

88
00:05:14,400 --> 00:05:18,820
So this test will remain the same when the user has not made any checkbox selections, which would reflect

89
00:05:18,820 --> 00:05:22,330
itself in having an empty selected degree slice of your store state.

90
00:05:22,570 --> 00:05:24,460
We want to include the job here.

91
00:05:24,460 --> 00:05:30,280
It says identifies if job is associated with given job types we care about with given degrees.

92
00:05:31,310 --> 00:05:35,390
So let's now have a selected degrees array that is actually populated.

93
00:05:35,710 --> 00:05:37,250
Let's let's give it a couple of values here.

94
00:05:37,310 --> 00:05:40,430
Let's do, for example, Ph.D. and associate.

95
00:05:41,120 --> 00:05:46,460
And then down here, we'll create a job with a degree that is going to be a value that is in this array.

96
00:05:46,610 --> 00:05:50,330
So you can choose either Ph.D. or associate in this case, and it's going to do associate.

97
00:05:51,910 --> 00:05:52,450
There we go.

98
00:05:52,840 --> 00:05:54,790
So now we created a valid job object.

99
00:05:54,790 --> 00:05:57,730
We've created a valid view store state by using our helper functions.

100
00:05:57,850 --> 00:06:01,600
Again, that's the beauty of those functions is we don't have to worry about all this logic now.

101
00:06:01,600 --> 00:06:02,440
It's all taken care of.

102
00:06:02,530 --> 00:06:05,530
We only focus on the properties on each object that we care about.

103
00:06:05,680 --> 00:06:08,590
In this case, selected degrees on a state and degree on a job.

104
00:06:09,010 --> 00:06:12,340
So here we're going to once again invoke include job by degree.

105
00:06:13,270 --> 00:06:16,270
We're going to pass in the view store state that is going to return a function.

106
00:06:16,270 --> 00:06:21,700
We're going to invoke it with our job and we expect the job to be included because associate is indeed

107
00:06:21,700 --> 00:06:22,990
found within this array.

108
00:06:23,440 --> 00:06:23,740
All right.

109
00:06:23,740 --> 00:06:24,430
So save that.

110
00:06:24,640 --> 00:06:29,200
And of course, we're not going to get a passing test or even a running test suite because TypeScript

111
00:06:29,200 --> 00:06:35,020
is going to say, hey, that property doesn't exist on your actual object that you're importing.

112
00:06:35,050 --> 00:06:35,770
Totally fine.

113
00:06:35,770 --> 00:06:37,210
We can now make that a reality.

114
00:06:37,540 --> 00:06:41,800
So of course, in order to do that, we're going to need to have a constant for our getter name.

115
00:06:42,010 --> 00:06:46,780
So I'm going to open up my constants file and let's add a constant right here.

116
00:06:47,110 --> 00:06:53,020
So export const, we're going to call it include job by degree.

117
00:06:54,070 --> 00:06:57,580
And right here, we're going to give it the exact string of include job by degree.

118
00:06:59,180 --> 00:06:59,740
All right.

119
00:06:59,750 --> 00:07:04,640
We're going to save that and we're going to transition back to our letters file.

120
00:07:04,640 --> 00:07:08,960
And at the very top, we can import it right here, include job by degree.

121
00:07:10,100 --> 00:07:14,180
And down here we can, of course, provide include job by degree.

122
00:07:14,960 --> 00:07:17,090
And that is going to be a method.

123
00:07:17,210 --> 00:07:21,130
It's going to be a method that accepts the View Store State as it currently is.

124
00:07:21,290 --> 00:07:23,750
And we know that state is of type global state.

125
00:07:23,750 --> 00:07:29,150
Global state is our interface and that method is going to return its own function and that function

126
00:07:29,150 --> 00:07:30,650
is going to take an individual job.

127
00:07:30,650 --> 00:07:34,010
I've type job and then here is where we actually have our body.

128
00:07:35,030 --> 00:07:39,530
I'm just going to save this to make sure that TypeScript compiles correctly and simply says you're getting

129
00:07:39,530 --> 00:07:44,840
the wrong return value, but by this point it should recognize the name of the actual getter method

130
00:07:44,840 --> 00:07:45,170
itself.

131
00:07:45,470 --> 00:07:45,950
So perfect.

132
00:07:46,130 --> 00:07:51,470
You can see right here it's expecting to receive true same thing right here for both of these tests.

133
00:07:51,470 --> 00:07:57,020
It's expecting to receive true, but instead it's receiving undefined because this include job by degree

134
00:07:57,020 --> 00:07:59,870
method or more specifically the function that it's returns.

135
00:08:00,110 --> 00:08:05,240
The function body doesn't do anything, so JavaScript and TypeScript implicitly return undefined.

136
00:08:05,240 --> 00:08:10,070
And so I guess the test suite is telling us hey true is not equal to undefined.

137
00:08:10,070 --> 00:08:10,700
Please fix this.

138
00:08:11,060 --> 00:08:14,840
So of course we need to implement the exact same logic we have in our getters above.

139
00:08:15,650 --> 00:08:20,180
So first step will take care of the scenario for when the user does not have any selected degrees.

140
00:08:20,480 --> 00:08:26,270
So right here, if on my view store state I check the selected degrees property which is an array and

141
00:08:26,270 --> 00:08:28,610
I check its length and it's equal to zero.

142
00:08:28,820 --> 00:08:31,250
Then I know the user has not selected any degrees.

143
00:08:31,370 --> 00:08:34,340
In that case, the current job that I'm iterating over is irrelevant.

144
00:08:34,340 --> 00:08:38,210
I want to make sure it passes the validation check so I'm going to say return.

145
00:08:38,210 --> 00:08:40,700
True to say yes it's true.

146
00:08:40,700 --> 00:08:44,510
Please include this job by a degree requirements because every job will pass.

147
00:08:44,930 --> 00:08:49,310
So if the user's not selected anything, we should get true and that should make our first test pass.

148
00:08:50,150 --> 00:08:53,000
Then of course, the next line is going to be something very similar.

149
00:08:53,120 --> 00:09:00,350
We're going to talk to our selected degrees array and double check if it includes the current jobs degree.

150
00:09:00,590 --> 00:09:05,990
So right here, I'm going to return I'm going to take my extra state that has a property called Selected

151
00:09:05,990 --> 00:09:06,530
Degrees.

152
00:09:06,530 --> 00:09:07,340
That is an array.

153
00:09:07,670 --> 00:09:14,570
An array in TypeScript has an includes method that checks whether an element is found within that given

154
00:09:14,570 --> 00:09:14,990
array.

155
00:09:15,260 --> 00:09:20,180
And for the job that I'm iterating over, I want to go into its degree property, which will be a string.

156
00:09:20,360 --> 00:09:26,510
And if that job's degree property if that string is found in my user selected array of degrees, then

157
00:09:26,510 --> 00:09:30,680
I know it should be included and includes will return to boolean, which is exactly what we want to

158
00:09:30,680 --> 00:09:31,910
return from this getter.

159
00:09:32,210 --> 00:09:34,640
So if the array includes it, it's going to return.

160
00:09:34,640 --> 00:09:35,990
True, and that will make it pass.

161
00:09:36,170 --> 00:09:40,670
And if the array does not include it, it's going to be false and it will not include the job by degree.

162
00:09:41,530 --> 00:09:41,830
All right.

163
00:09:41,830 --> 00:09:44,260
So now everything is passing, everything is looking good.

164
00:09:44,440 --> 00:09:48,870
And in the very next lesson, we can wire up this letter to be used by our filter job.

165
00:09:48,880 --> 00:09:49,240
Scatter.

166
00:09:49,450 --> 00:09:50,110
I'll see you there.
