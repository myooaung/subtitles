1
00:00:00,700 --> 00:00:05,110
All right, so let's practice a little bit with just syntax.

2
00:00:05,320 --> 00:00:10,300
So here I am, back in verse code, and I'm going to create my first test file.

3
00:00:10,540 --> 00:00:14,000
I'm going to do so in my tests unit directory.

4
00:00:14,260 --> 00:00:21,080
So right here, I'm going to create a new file and I will call it playground dot, test dot, Jess.

5
00:00:21,730 --> 00:00:23,920
So a few notes here before we proceed.

6
00:00:24,280 --> 00:00:30,280
This playground, that test dogs file will be strictly for testing out various features of tests.

7
00:00:30,280 --> 00:00:33,190
We're not actually going to dive into view testing just yet.

8
00:00:33,400 --> 00:00:36,040
So later on we'll likely delete this file.

9
00:00:36,040 --> 00:00:42,130
It only exists for educational purposes, much like our playground jazz file exists here for testing

10
00:00:42,130 --> 00:00:44,200
out various JavaScript and view features.

11
00:00:44,590 --> 00:00:49,690
Another important detail here is you'll notice that our file has a dot test.

12
00:00:49,690 --> 00:00:50,980
Dot extension.

13
00:00:51,280 --> 00:00:57,250
The way we configured our Jess config file earlier in the course allows us to have test files with two

14
00:00:57,250 --> 00:01:01,820
extensions dot test that JS or dot specs.

15
00:01:01,900 --> 00:01:04,610
Let me just write that out here so you can see it visually.

16
00:01:04,630 --> 00:01:08,280
Dot, test, dot, J.S. and dot specs.

17
00:01:08,290 --> 00:01:13,780
All right, so a plain JavaScript file with a JSS extension is not enough.

18
00:01:13,810 --> 00:01:18,910
You need to prefix it with one of those two words test or spec when we run.

19
00:01:18,910 --> 00:01:24,550
Just what it does is it looks throughout our project and identifies files with these extensions, and

20
00:01:24,550 --> 00:01:28,690
that's how it knows that it is a test file and that it should run the code inside of it.

21
00:01:28,900 --> 00:01:29,260
All right.

22
00:01:29,590 --> 00:01:31,210
So let me go ahead and delete this code.

23
00:01:32,360 --> 00:01:32,720
All right.

24
00:01:33,080 --> 00:01:39,080
The next thing that you should know is when we run jest, it will automatically import the functions

25
00:01:39,080 --> 00:01:42,720
that are available within the library that we're going to write in this file.

26
00:01:42,980 --> 00:01:47,330
So we do not need to manually import anything from the just npm module.

27
00:01:47,510 --> 00:01:51,140
Just will make the functions that we are about to write available to us.

28
00:01:51,170 --> 00:01:55,220
In case you're curious about how can we just write these functions in line and invoke them?

29
00:01:55,340 --> 00:01:57,530
It's because just will make them available.

30
00:01:57,950 --> 00:02:01,790
So let's dive into the very first function and it's called Describe.

31
00:02:02,000 --> 00:02:04,850
So I'm going to write out the function and I'm going to invoke it.

32
00:02:06,060 --> 00:02:11,520
So the described function exists purely for organization or categorization.

33
00:02:11,700 --> 00:02:18,000
It allows us to create a description for the thing that we are about to test.

34
00:02:18,270 --> 00:02:21,480
So this is purely for our own organizational sake.

35
00:02:21,750 --> 00:02:26,220
But you can imagine, for example, if we're testing some kind of view component, we might write something

36
00:02:26,220 --> 00:02:34,420
like May NAV here in one test file and then in another test file we might describe another view component.

37
00:02:34,440 --> 00:02:39,060
The idea is that we want to create some kind of category or organizational element.

38
00:02:39,060 --> 00:02:42,720
You can almost think of it like a header or a chapter title in a book.

39
00:02:42,900 --> 00:02:48,570
It's sort of the top level organizational name for what it is that we're about to test, because when

40
00:02:48,570 --> 00:02:53,700
we run our just test suite, we're going to see a lot of different files being run and a lot of different

41
00:02:54,270 --> 00:02:56,760
expectations and assertions, which we'll talk about shortly.

42
00:02:56,940 --> 00:03:01,530
And so we want some kind of way to segment those outputs and categorize them.

43
00:03:01,530 --> 00:03:02,760
And this is one way to do it.

44
00:03:02,790 --> 00:03:04,140
It's with the described function.

45
00:03:04,410 --> 00:03:08,280
So for now, we're not actually testing any actual view components.

46
00:03:08,490 --> 00:03:12,570
So for now, I might describe that I'm testing, let's say, basic math.

47
00:03:13,020 --> 00:03:16,560
I just want to test some basic math expressions using just right.

48
00:03:16,860 --> 00:03:21,210
So the first argument to describe is a string of whatever you want, describing what you're testing.

49
00:03:21,420 --> 00:03:24,360
Then the second argument is going to be a function.

50
00:03:24,630 --> 00:03:30,210
So right here I'm going to define arrow function and I'm going to break it up onto the new line.

51
00:03:30,570 --> 00:03:34,170
And here is where we can actually write an example of a test.

52
00:03:34,440 --> 00:03:37,380
So a test begins with the function call.

53
00:03:37,380 --> 00:03:39,780
So I t it.

54
00:03:40,110 --> 00:03:44,410
And the reason it's called it is the first argument it expects is a string.

55
00:03:44,430 --> 00:03:51,600
And here is where you actually declare in human readable terms, what is the specific thing you're testing.

56
00:03:51,870 --> 00:03:57,930
So, for example, if my top level category is basic math, let's see, I'm trying to test addition

57
00:03:57,930 --> 00:04:02,740
in an ingest so I might write a description like adds to numbers.

58
00:04:03,330 --> 00:04:08,220
And the reason that the function is called it is specifically so that this line can read almost like

59
00:04:08,220 --> 00:04:10,320
a sentence if we read it from left to right.

60
00:04:10,530 --> 00:04:14,400
You can see it says it adds two numbers right and kind of makes sense.

61
00:04:14,400 --> 00:04:20,220
And when we output this to our console, when we run the test, you'll see how all of this text appears

62
00:04:20,340 --> 00:04:23,340
in a nice formatted and segmented way in our output.

63
00:04:23,760 --> 00:04:28,860
So the ID function much like describe accepts a second argument which is also a function.

64
00:04:29,040 --> 00:04:33,000
So right here I'm going to write my arrow function.

65
00:04:33,540 --> 00:04:33,750
All right.

66
00:04:33,750 --> 00:04:38,700
So here we are nesting this entire ID function call within our describe function, which is the second

67
00:04:38,700 --> 00:04:39,600
argument to describe.

68
00:04:39,630 --> 00:04:43,740
So make sure you have all of the correct opening and closing parentheses, etc..

69
00:04:44,040 --> 00:04:50,370
And here within the IT function call is where we write what is called an assertion or an expectation.

70
00:04:50,670 --> 00:04:55,110
So an expectation means that we expect something to happen, right?

71
00:04:55,380 --> 00:05:02,340
So as an example, if I add the numbers one plus one, I expect the result to be two.

72
00:05:02,580 --> 00:05:02,880
Right.

73
00:05:03,210 --> 00:05:07,560
And so the way this works is we're going to introduce another function here called Expect.

74
00:05:09,030 --> 00:05:15,720
And in expect we're going to put some kind of evaluation or expression or some kind of code, right?

75
00:05:15,900 --> 00:05:21,420
It's whatever we want just to evaluate for us or run for us or execute for us.

76
00:05:21,630 --> 00:05:26,880
So in a typical JavaScript work environment, this may be something like an object that we have and

77
00:05:26,880 --> 00:05:30,660
we're going to call a method on it to produce some kind of return value.

78
00:05:30,810 --> 00:05:35,460
Or we might access some kind of property on an object and check what its value is.

79
00:05:35,580 --> 00:05:41,790
We can basically do anything, any valid JavaScript inside this expect function, and it's what we want

80
00:05:41,790 --> 00:05:43,170
just to actually run for us.

81
00:05:43,410 --> 00:05:48,150
So for now, I'm going to put the simplest thing I can think of, which is a basic mathematical expression.

82
00:05:48,150 --> 00:05:49,830
Expect one plus one.

83
00:05:50,250 --> 00:05:52,830
So of course, that is what we want just to run for us.

84
00:05:52,950 --> 00:06:00,000
We also have to tell just what we expect the result to be, so that just can run that execution and

85
00:06:00,000 --> 00:06:01,890
then compare it with the expected result.

86
00:06:02,640 --> 00:06:07,650
So this expect function is going to give us back in object so we can invoke a method on the object.

87
00:06:07,890 --> 00:06:13,710
And on that object we're going to have a whole bunch of different assertions which are also called matches,

88
00:06:13,890 --> 00:06:17,790
and you could see the deal with all kinds of different ways that we can compare things.

89
00:06:17,800 --> 00:06:23,460
So for example, we can do something like to be greater than to compare that what our expectation is

90
00:06:23,460 --> 00:06:25,290
or what our evaluation is.

91
00:06:25,290 --> 00:06:29,100
One plus one can be greater than something else, right?

92
00:06:29,100 --> 00:06:31,680
So we're not just limited to strict equality here.

93
00:06:31,680 --> 00:06:33,150
We can check for inequality.

94
00:06:33,300 --> 00:06:39,540
We can check for rate greater than less than to be an instance of a specific object, to be less than

95
00:06:39,600 --> 00:06:43,170
to be nan, which is not a number to be null, to be undefined.

96
00:06:43,290 --> 00:06:47,010
There's all kinds of these various assertion types that we can put for now.

97
00:06:47,010 --> 00:06:49,230
What we're looking for is strict equality.

98
00:06:49,230 --> 00:06:52,800
We literally want to compare one plus one to the expected result of two.

99
00:06:53,040 --> 00:06:58,740
So I'm going to use the matcher to be, which is what you should use for strict equality whenever you're

100
00:06:58,740 --> 00:07:03,270
comparing any kind of primitives in JavaScript like strings or numbers or booleans.

101
00:07:03,630 --> 00:07:05,790
So to be is its own method.

102
00:07:05,800 --> 00:07:06,990
So we need to invoke it.

103
00:07:07,260 --> 00:07:10,440
And then the argument we provide it is the expected result.

104
00:07:10,590 --> 00:07:16,530
So of course we expect to get to right here and that is the whole basic syntax of just let me in fact

105
00:07:16,530 --> 00:07:17,280
save this file.

106
00:07:17,520 --> 00:07:21,420
So prettier adds all of its semicolons and gets rid of all those violations.

107
00:07:21,630 --> 00:07:26,670
This is basically what a test file looks like we have a described, which means a top level category

108
00:07:26,670 --> 00:07:33,750
or a top level name, and then we have multiple tests inside that describe that fit that description.

109
00:07:33,750 --> 00:07:33,930
Right.

110
00:07:34,010 --> 00:07:35,850
We'll add a couple more tests in just a second.

111
00:07:35,970 --> 00:07:37,350
For now, we have one test.

112
00:07:37,560 --> 00:07:39,540
Each test begins with an IT function.

113
00:07:39,720 --> 00:07:42,150
It describes what it is that it's testing.

114
00:07:42,270 --> 00:07:47,160
And then in the body of that function, we write one or more assertions or expectations.

115
00:07:47,430 --> 00:07:50,700
So again, we can actually put multiple expected statements in here.

116
00:07:50,850 --> 00:07:52,980
This is just the simplest example that I can think of.

117
00:07:53,130 --> 00:07:56,620
One described function, one at function and one expected function.

118
00:07:56,640 --> 00:07:56,940
All right.

119
00:07:57,240 --> 00:07:58,710
So let's go ahead and run this file.

120
00:07:58,740 --> 00:08:04,080
So what I'm going to do in this code is open up a terminal, which I can do by going to the main NAV.

121
00:08:04,080 --> 00:08:10,860
You may now view main menu, clicking terminal and selecting new terminal, and that's going to open

122
00:08:10,860 --> 00:08:12,560
up a terminal in this code.

123
00:08:12,570 --> 00:08:17,250
It may be a different type of terminal on a Windows computer compared to a mac computer, but it's the

124
00:08:17,250 --> 00:08:17,970
same idea.

125
00:08:17,970 --> 00:08:23,040
It's a command prompt and it should launch you right inside your project, which is job search.

126
00:08:23,040 --> 00:08:26,700
Right now, there's a specific command that you should write down, and this is what we're going to

127
00:08:26,700 --> 00:08:29,130
be running to run our tests using the view seal.

128
00:08:29,670 --> 00:08:35,850
In case you ever forget, you can open up package that JSON and you're going to find this scripts section.

129
00:08:36,150 --> 00:08:42,240
Now in case you are curious or you don't know about the NPM ecosystem or no doubts what you can do from

130
00:08:42,240 --> 00:08:48,210
the command line within a project with a package that JSON file is you can run, NPM run.

131
00:08:49,080 --> 00:08:51,570
I mean, in fact, try to blow this up a little bit so you can see.

132
00:08:51,900 --> 00:08:54,120
Yep, you can run, npm run.

133
00:08:55,260 --> 00:08:58,050
Followed by any one of these script names.

134
00:08:58,050 --> 00:09:04,230
So serve, build, test, unit, lent, etc. We can run NPM, run followed by any of those and will

135
00:09:04,260 --> 00:09:06,690
automatically run the command on the right hand side.

136
00:09:06,690 --> 00:09:08,910
So let me actually hide my files and give you an example.

137
00:09:09,300 --> 00:09:13,020
If, for example, I run NPM, run test, colon unit.

138
00:09:13,440 --> 00:09:20,610
What we're going to run is this command, which NPM knows should in turn run view as service test unit.

139
00:09:20,820 --> 00:09:25,350
And the reason why we have this setup is usually the script command is going to be pretty small and

140
00:09:25,350 --> 00:09:30,510
lightweight and easy to memorize, while the actual more complex command that runs can have a lot of

141
00:09:30,510 --> 00:09:33,900
customized options and flags and things to configure how it runs.

142
00:09:34,050 --> 00:09:36,840
So we don't have to remember to provide those flags every single time.

143
00:09:36,960 --> 00:09:40,730
We just have a simple command like test unit which runs the tests for us.

144
00:09:41,070 --> 00:09:42,390
So let me go ahead and shrink this again.

145
00:09:43,260 --> 00:09:47,370
And when we run this, we're going to run all of the tests within our project.

146
00:09:47,380 --> 00:09:53,610
So View CLIA is going to look for any file with a dot test that yes or not, dot dot just extension

147
00:09:53,790 --> 00:09:54,660
and run it.

148
00:09:54,900 --> 00:09:55,800
So let's see what happens.

149
00:09:55,800 --> 00:09:56,880
We're going to run this command.

150
00:09:57,390 --> 00:10:00,000
We're going to see that it's going to locate our playground.

151
00:10:00,000 --> 00:10:01,320
That test that just failed.

152
00:10:01,470 --> 00:10:03,900
Then it's quickly going to run through it and run the code.

153
00:10:04,320 --> 00:10:06,780
So we can see here that we have the green pass.

154
00:10:06,780 --> 00:10:10,860
And what that means is that all of the tests in the file passed, right?

155
00:10:11,220 --> 00:10:15,510
Then we can see our organizational header that we provided to the described function.

156
00:10:15,510 --> 00:10:17,360
So here we have basic math.

157
00:10:17,370 --> 00:10:22,830
It's sort of our top level category and then we're going to see all of our tests nested underneath that

158
00:10:22,830 --> 00:10:23,160
header.

159
00:10:23,460 --> 00:10:28,620
So because our argument to the IT function was adds two numbers, you can see it output right here adds

160
00:10:28,620 --> 00:10:33,900
two numbers and the check mark to the left of it indicates that the test passed, which means that the

161
00:10:33,900 --> 00:10:39,420
expected result of two was what just got when it actually added one plus one.

162
00:10:40,050 --> 00:10:42,180
Then below you're going to see a summary.

163
00:10:42,180 --> 00:10:44,880
It's going to show you how many total test suites it ran.

164
00:10:45,090 --> 00:10:46,830
Test suites means files.

165
00:10:46,830 --> 00:10:52,620
So in this case, we had one file and the total number of tests we ran was also one and then the total

166
00:10:52,620 --> 00:10:53,760
time it took to run.

167
00:10:53,940 --> 00:10:56,580
All right, so let's try this example one more time.

168
00:10:56,580 --> 00:10:57,990
Let's just practice with the syntax.

169
00:10:58,230 --> 00:11:03,360
So within my same describe function, because I still want to test the basic math, I'm going to write

170
00:11:03,360 --> 00:11:04,140
another test.

171
00:11:04,290 --> 00:11:07,980
And since we're testing basic math, let's now test subtraction, right?

172
00:11:08,190 --> 00:11:12,840
This is a perfect example of where you might want to use describe to provide some kind of higher level

173
00:11:12,840 --> 00:11:18,630
category underneath which you can put multiple tests that fit that Category seven taste.

174
00:11:18,630 --> 00:11:23,370
If I'm testing basic math, I can also test that it subtracts two numbers.

175
00:11:24,530 --> 00:11:24,830
All right.

176
00:11:25,070 --> 00:11:28,100
So we're going to invoke the ID function, provide a strong argument.

177
00:11:28,100 --> 00:11:30,500
And then the second argument again is a function.

178
00:11:30,770 --> 00:11:33,560
And in that function body, we can declare our assertions.

179
00:11:33,830 --> 00:11:39,770
So let's, for example, do a an expectation here where I'm going to say expect five minus three.

180
00:11:40,250 --> 00:11:45,050
Once again, we're going to get an object upon which we can invoke a method to declare our matcher.

181
00:11:45,260 --> 00:11:48,140
I want that to be matcher, to compare strict equality.

182
00:11:48,260 --> 00:11:49,820
And this should also be two.

183
00:11:50,150 --> 00:11:55,400
In fact, let's now add multiple expectations within my function just so I can show you that that's

184
00:11:55,400 --> 00:11:55,790
valid.

185
00:11:56,090 --> 00:12:01,940
So for example, I can also test ten minus five and that should be equal to five.

186
00:12:03,110 --> 00:12:07,580
Let me go ahead and run this test and you're going to see that we're going to have the same output.

187
00:12:07,580 --> 00:12:12,320
We're going to have the basic map header, and then it's going to have the two test names underneath.

188
00:12:12,590 --> 00:12:12,920
All right.

189
00:12:13,280 --> 00:12:17,420
So the advantage of just as well is that it will also catch when things go wrong.

190
00:12:17,600 --> 00:12:21,770
So let me go ahead and put in a incorrect value here for my expectation.

191
00:12:21,770 --> 00:12:23,240
I'm going to expect this to be seven.

192
00:12:23,540 --> 00:12:28,760
And when I run this, we're going to see the output when we experience a failure.

193
00:12:29,090 --> 00:12:32,690
So Jess is going to show us every single test that failed.

194
00:12:32,960 --> 00:12:38,480
And what it's going to do is provide this helpful output that's expected and received outputs.

195
00:12:38,750 --> 00:12:41,120
And this is exactly as it reads.

196
00:12:41,120 --> 00:12:46,880
It's going to tell us what it expected to receive, which is seven, which is the value that we provided

197
00:12:46,880 --> 00:12:52,850
right here in parentheses, and then the actual value it did receive when it subtracted ten minus five,

198
00:12:52,850 --> 00:12:53,810
which is five.

199
00:12:53,990 --> 00:12:57,410
So it's going to show you what it actually got so you don't have to guess what it actually got.

200
00:12:57,650 --> 00:13:03,740
And then the super beneficial part as well is it's going to show you which line or equivalently which

201
00:13:03,740 --> 00:13:05,510
expect function call fail.

202
00:13:05,810 --> 00:13:11,750
So if we know that ten minus five failed, we know that the expect statement above it, five minus three

203
00:13:11,900 --> 00:13:14,450
evaluated successfully without error.

204
00:13:14,630 --> 00:13:16,820
Now, obviously, in this case, it's basic math.

205
00:13:16,820 --> 00:13:18,350
So all of this is obvious to us.

206
00:13:18,590 --> 00:13:24,740
But if we ever have a really complex test where we have, you know, 100 different lines and ten different

207
00:13:24,740 --> 00:13:29,870
tests and maybe multiple expectations in the same test, and our component is undergoing various state

208
00:13:29,870 --> 00:13:30,170
changes.

209
00:13:30,320 --> 00:13:34,190
It might actually become difficult to determine which test is failing and at what point.

210
00:13:34,370 --> 00:13:39,680
So this feature is super helpful because it's going to show us with this little red arrow where or what

211
00:13:39,680 --> 00:13:42,080
line the expectation failed.

212
00:13:42,260 --> 00:13:42,530
All right.

213
00:13:42,740 --> 00:13:44,270
So I'm going to go ahead and fix this.

214
00:13:44,270 --> 00:13:47,420
In fact, what I think I'm going to do is remove this second test.

215
00:13:48,200 --> 00:13:51,650
Generally speaking, you do not want to test the same thing twice.

216
00:13:51,800 --> 00:13:53,480
It's redundant and it waste time.

217
00:13:53,750 --> 00:13:58,340
And I would also argue, although this is a matter of personal developer preference, is that you should

218
00:13:58,340 --> 00:14:02,570
generally aim to have one expect function per test.

219
00:14:02,870 --> 00:14:09,950
So what I tend to prefer is lots of small tests that each test one isolated thing instead of, for example,

220
00:14:09,950 --> 00:14:14,300
a very large test where you create a component, you write a test, you change the component, you write

221
00:14:14,300 --> 00:14:16,070
another test, you modify the component.

222
00:14:16,070 --> 00:14:17,240
Once again, you write another test.

223
00:14:17,420 --> 00:14:21,980
The longer that your test is and the more expectations you have, the more it is that you're testing

224
00:14:21,980 --> 00:14:27,050
and the more difficult it becomes to understand what it is that you are validating in comparison.

225
00:14:27,050 --> 00:14:32,150
If you have lots of really small functions, it functions and each one describes exactly what it is

226
00:14:32,150 --> 00:14:36,650
that you're testing and it has a small setup and a small single expectation.

227
00:14:36,800 --> 00:14:41,330
It's pretty easy for another developer to read through your code and understand what it is that you

228
00:14:41,330 --> 00:14:42,140
are testing.

229
00:14:42,890 --> 00:14:45,020
So I'm going to run this test one more time.

230
00:14:45,200 --> 00:14:49,340
We're going to see that everything is working as expected, and that's really all there is to cover

231
00:14:49,340 --> 00:14:51,410
in this lesson on basic just syntax.

232
00:14:51,650 --> 00:14:56,090
Remember, you have the basic describe function, use it to provide a organizational header and you

233
00:14:56,090 --> 00:14:58,460
are not limited to a single described function.

234
00:14:58,460 --> 00:15:01,460
We're actually going to see how we can that's describes in the very next lesson.

235
00:15:01,670 --> 00:15:07,250
But within a described block, within its function that you provide as a second argument, you can write

236
00:15:07,250 --> 00:15:11,000
your IT functions where you describe the specific test that you are testing.

237
00:15:11,240 --> 00:15:14,360
And then within those functions you write your expectations.

238
00:15:14,360 --> 00:15:17,510
You have some kind of evaluation which you provide to expect.

239
00:15:17,510 --> 00:15:20,030
It does not have to be a mathematical operation.

240
00:15:20,030 --> 00:15:20,870
It could be anything.

241
00:15:20,990 --> 00:15:26,600
It can be a method call, it can be a property access, it can be any kind of JavaScript code that just

242
00:15:26,600 --> 00:15:27,170
can value it.

243
00:15:27,380 --> 00:15:32,450
And then you provide a complimentary matcher which specifies the type of validation or assertion that

244
00:15:32,450 --> 00:15:35,120
you'd like to perform, and then the expected result.

245
00:15:35,120 --> 00:15:41,510
In this case, it was to to be the both the sum and the subtraction product of these two evaluations.

246
00:15:41,590 --> 00:15:41,870
All right.

247
00:15:42,140 --> 00:15:43,100
That's all there is to cover.

248
00:15:43,100 --> 00:15:46,070
Hopefully not too crazy, but we're going to be using just throughout the course.

249
00:15:46,070 --> 00:15:48,800
So this is important information to start processing.

250
00:15:48,890 --> 00:15:49,190
All right.

251
00:15:49,490 --> 00:15:50,990
I will see you in the next lesson.
