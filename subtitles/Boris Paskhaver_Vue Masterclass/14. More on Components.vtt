WEBVTT
1
00:00:00.450 --> 00:00:01.230
Okay.

2
00:00:01.230 --> 00:00:05.010
So in this lesson, I want to show you the power of components.

3
00:00:05.250 --> 00:00:13.260
The primary benefit of components is reusability by being able to pack away a chunk of HTML, JavaScript

4
00:00:13.260 --> 00:00:20.070
and CSS into a separate file, we create almost like a reusable puzzle piece that we can use over and

5
00:00:20.070 --> 00:00:20.700
over again.

6
00:00:20.970 --> 00:00:27.360
In addition, we can customize that sort of piece of the user interface ever so slightly to enable a

7
00:00:27.360 --> 00:00:29.640
lot of reusability and flexibility.

8
00:00:29.940 --> 00:00:31.200
So let me give you an example.

9
00:00:31.410 --> 00:00:32.550
On the right hand side here.

10
00:00:32.550 --> 00:00:36.570
I have our view app in the browser and here I have my app component.

11
00:00:36.810 --> 00:00:41.970
You'll notice that our app component starts with this image tag and that is this V logo right here.

12
00:00:42.180 --> 00:00:48.210
And then the rest of the content here, this whole section right here is the content of our Hello World

13
00:00:48.210 --> 00:00:48.750
component.

14
00:00:49.080 --> 00:00:54.300
So our app component is rendering the Helloworld component, which is why this content appears right

15
00:00:54.300 --> 00:00:54.600
here.

16
00:00:54.930 --> 00:00:58.920
Now the beautiful part about components is we can reuse them as often as we like.

17
00:00:59.280 --> 00:01:04.170
So what I'm going to do here is copy line number three and paste it down below.

18
00:01:04.440 --> 00:01:08.640
So now I'm going to render two Helloworld components right after each other.

19
00:01:08.850 --> 00:01:13.380
And as soon as I save this, we're going to see the changes in the browser and exactly as we'd expect.

20
00:01:13.380 --> 00:01:19.380
We now see a second section of this page, which is the second rendering of the Helloworld component

21
00:01:19.380 --> 00:01:20.100
right here.

22
00:01:20.430 --> 00:01:20.600
Right.

23
00:01:20.640 --> 00:01:25.170
It's the exact same component, but we're rendering it twice in a row and thus we don't have to worry

24
00:01:25.170 --> 00:01:32.100
about the complexities of this HTML, CSS in JavaScript because it is all packaged away in its own independent

25
00:01:32.100 --> 00:01:33.090
helloworld component.

26
00:01:33.420 --> 00:01:37.110
It sort of serves the exact same purpose as a function does in JavaScript.

27
00:01:37.320 --> 00:01:42.540
A function is almost like a reusable procedure that we can use and we can customize ever so slightly

28
00:01:42.540 --> 00:01:44.190
with things like arguments, right?

29
00:01:44.370 --> 00:01:50.250
But the whole purpose of the function is to isolate some logic, some responsibility, and then continue

30
00:01:50.250 --> 00:01:52.980
reusing it so we don't have to rewrite it over and over again.

31
00:01:53.250 --> 00:01:58.380
That's the exact same benefit that components give us, but on a visual scale, we can now reuse this

32
00:01:58.380 --> 00:02:04.260
logic, this idea of a header and a paragraph, and this collection of links, etc. over and over again.

33
00:02:04.470 --> 00:02:08.310
Of course, this is not really a practical example because we probably don't want this, but you can

34
00:02:08.310 --> 00:02:13.260
probably see how it would be applicable to something like a style button or a navigation menu.

35
00:02:13.350 --> 00:02:18.780
A component allows us to isolate just this chunk, this piece of the user interface and use it as often

36
00:02:18.780 --> 00:02:19.410
as we need it.

37
00:02:20.100 --> 00:02:23.250
And as I also mentioned, there is room for some degree of flexibility.

38
00:02:23.550 --> 00:02:27.270
So I know that the syntax is a little bit weird here, but you'll notice we have the string here.

39
00:02:27.420 --> 00:02:28.950
Welcome to your Vue.js app.

40
00:02:29.190 --> 00:02:34.800
And as you might guess, this is the actual string that is becoming the header that we see right here

41
00:02:34.800 --> 00:02:35.520
and right here.

42
00:02:35.820 --> 00:02:40.740
And so for our second rendering of our second Helloworld component, we can alter this to something

43
00:02:40.740 --> 00:02:40.980
else.

44
00:02:40.980 --> 00:02:47.910
Like I'm happy to be learning Vue and as soon as I save this, you'll notice that the second component

45
00:02:47.910 --> 00:02:50.280
right here will be render and that string.

46
00:02:50.370 --> 00:02:52.050
And we'll talk more about the syntax later.

47
00:02:52.290 --> 00:02:54.930
But this string is obviously becoming the header right here.

48
00:02:55.110 --> 00:03:00.570
So we're sort of able to keep the logic of keeping the component just about the exact same way or in

49
00:03:00.570 --> 00:03:07.800
the exact same puzzle piece as the one above for customizing one little detail of that, which is the

50
00:03:07.800 --> 00:03:08.130
header.

51
00:03:08.280 --> 00:03:08.550
All right.

52
00:03:08.550 --> 00:03:09.720
And that's the power of components.

53
00:03:09.900 --> 00:03:15.660
We can still add flexibility to each one while retaining that commonality and reusability.

54
00:03:15.900 --> 00:03:16.230
All right.

55
00:03:16.530 --> 00:03:19.860
A couple more things to talk about when we are discussing components.

56
00:03:20.070 --> 00:03:21.690
You'll notice the syntax right here.

57
00:03:21.690 --> 00:03:24.690
And I just want us to take a second to pause and reflect on it.

58
00:03:24.690 --> 00:03:27.600
This is one way that we can render a component.

59
00:03:27.870 --> 00:03:32.190
The way we render a component is going to be the exact same way that we render an HTML element.

60
00:03:32.400 --> 00:03:35.370
We're going to start with that opening bracket, the less than sine.

61
00:03:35.640 --> 00:03:37.380
Then we're going to write the component name.

62
00:03:37.840 --> 00:03:40.560
Then we're going to provide any potential arguments.

63
00:03:40.560 --> 00:03:44.010
We'll go more about what this exact thing here is MSG later.

64
00:03:44.160 --> 00:03:46.260
But these are almost like arguments to the component.

65
00:03:46.500 --> 00:03:50.250
And then we close the component with a forward slash and then the closing bracket.

66
00:03:50.490 --> 00:03:55.560
And this is what's called a self-closing component tag that basically means we're able to render a component

67
00:03:55.560 --> 00:03:56.910
with just a single tag.

68
00:03:57.090 --> 00:04:01.800
And there are things in HTML the work the exact same way, for example, such as this image tag right

69
00:04:01.800 --> 00:04:02.070
here.

70
00:04:02.550 --> 00:04:07.410
HTML has the same syntax for some elements where you have an opening tag and a self-closing tag right

71
00:04:07.410 --> 00:04:07.620
here.

72
00:04:08.340 --> 00:04:15.030
I do want to note that there is an alternative way to render a component and it is with an opening and

73
00:04:15.030 --> 00:04:15.930
a closing tag.

74
00:04:16.200 --> 00:04:19.110
So the way you do that is exactly the same way it works in HTML.

75
00:04:19.230 --> 00:04:25.590
For the opening tag that begins, you simply write the opening bracket and the closing bracket without

76
00:04:25.590 --> 00:04:26.190
the slash.

77
00:04:26.430 --> 00:04:27.480
So it would look like this.

78
00:04:27.720 --> 00:04:31.530
And if you do this, you have to provide the complementary closing tag.

79
00:04:31.770 --> 00:04:35.280
And what that looks like is simply going to be another pair of brackets.

80
00:04:35.430 --> 00:04:39.360
And in that pair of brackets, you put your forward slash and then the name of the component.

81
00:04:39.720 --> 00:04:44.880
So what we have here on line four and let me just expand it so you can see what we have online for is

82
00:04:44.880 --> 00:04:47.160
the exact same thing as we have on line three.

83
00:04:47.160 --> 00:04:49.200
It's just two different syntactical options.

84
00:04:49.470 --> 00:04:52.440
This is rendering the Hello World component with a self-closing tag.

85
00:04:52.770 --> 00:04:57.390
This is rendering the helloworld component, but starting it off right here with the kind of beginning

86
00:04:57.420 --> 00:04:59.670
tag and closing it right here with the.

87
00:04:59.870 --> 00:05:00.290
Closing time.

88
00:05:00.680 --> 00:05:04.310
Now, obviously, the next question you have is when might we want to use each one?

89
00:05:04.550 --> 00:05:09.380
Well, obviously, if it works by itself with a self-closing tag, you should prefer the self-closing

90
00:05:09.380 --> 00:05:12.530
tag because it's lighter and leaner and requires less code.

91
00:05:12.530 --> 00:05:12.770
Right.

92
00:05:13.010 --> 00:05:18.170
But there are certain situations where we can put things inside the opening and closing component tags

93
00:05:18.170 --> 00:05:22.940
the exact same way we can in HTML, and that will have significance to what is rendered onto the screen.

94
00:05:23.150 --> 00:05:26.180
We're going to talk more about those scenarios later in the course.

95
00:05:26.390 --> 00:05:29.780
But just realize that there are two syntactical ways to render a component.

96
00:05:29.930 --> 00:05:32.150
What we have on line three is option number one.

97
00:05:32.300 --> 00:05:35.480
And what we have right now in lines four through six is option number two.

98
00:05:35.660 --> 00:05:38.940
And we'll talk more about when we use this case later in the course.

99
00:05:38.960 --> 00:05:41.180
Just realize technically that is a possibility.

100
00:05:41.630 --> 00:05:41.960
All right.

101
00:05:41.960 --> 00:05:46.940
So with that, we can remove our second rendered helloworld component, bring everything back to its

102
00:05:46.940 --> 00:05:47.540
starting state.

103
00:05:47.750 --> 00:05:49.370
And that's all there is to cover in this lesson.

104
00:05:49.550 --> 00:05:50.900
So I will see you in the next one.
