WEBVTT
1
00:00:00.940 --> 00:00:01.510
Okay.

2
00:00:01.510 --> 00:00:05.140
So let's write a test suite for our spotlight component.

3
00:00:05.410 --> 00:00:12.100
And the core heart of what we want to test is that the Spotlight component passes these pieces of information

4
00:00:12.190 --> 00:00:13.780
to the parent component.

5
00:00:14.230 --> 00:00:22.150
So let's begin by creating our test file right here in our tests directory components job search.

6
00:00:22.150 --> 00:00:26.620
I will create my spotlight test duchess file.

7
00:00:28.160 --> 00:00:36.290
I'm going to drag it over on the right hand side and we'll begin by importing mount from our test library,

8
00:00:36.320 --> 00:00:38.480
which is vue test utils.

9
00:00:39.200 --> 00:00:42.200
Then I'm going to import Axios and mock it out.

10
00:00:42.200 --> 00:00:47.810
Because remember, when we mount our spotlight component, it's going to make this request right here.

11
00:00:47.960 --> 00:00:53.930
And I want to intercept or mock out that request and resolve that promise to return some mock data from

12
00:00:53.930 --> 00:00:58.190
my test that decouples me from having to build the back end in my test.

13
00:00:58.580 --> 00:01:01.940
So right here, this is the exact same logic we've talked about earlier.

14
00:01:01.940 --> 00:01:05.690
In the course, I'm going to import Axios from Axios.

15
00:01:06.200 --> 00:01:10.670
And then immediately below, I'm going to do just that mock passing in Axios.

16
00:01:11.000 --> 00:01:16.580
So this will force just to iterate over the properties on the Axios imported object and replace all

17
00:01:16.580 --> 00:01:18.200
of them with just mock functions.

18
00:01:18.740 --> 00:01:21.380
Then I want to import the component I'm testing.

19
00:01:21.380 --> 00:01:31.430
So import spotlight from the source directory components job search spotlight type view.

20
00:01:31.940 --> 00:01:37.970
We're going to create a described block for Spotlight, and I think I'm actually going to write a test

21
00:01:37.970 --> 00:01:42.960
for each individual property that I am going to pass up to my parent component.

22
00:01:43.340 --> 00:01:49.550
So right here, it provides image attribute to parent component.

23
00:01:49.940 --> 00:01:55.760
And if I wanted this to be a little bit more user focused, I can just say something like provides information

24
00:01:55.760 --> 00:02:01.280
about image to parent, something that is a little less technical than using the words IMG and being

25
00:02:01.280 --> 00:02:03.260
specific about the object and its attributes.

26
00:02:03.620 --> 00:02:07.910
Again, I'm just going to ignore this for now, but if you want to write a more user focused description,

27
00:02:07.910 --> 00:02:08.930
feel free to do that.

28
00:02:09.350 --> 00:02:11.660
So right here I'm going to provide an arrow function.

29
00:02:13.000 --> 00:02:19.360
And the first thing I want to do is actually to mark out my get method because remember when just mock

30
00:02:19.450 --> 00:02:25.630
out a module, it replaces everything with a just mock function that returns undefined.

31
00:02:25.900 --> 00:02:32.440
I need to have an asynchronous just mock function that resolves to be an object that resembles the Axios

32
00:02:32.440 --> 00:02:33.460
response object.

33
00:02:33.820 --> 00:02:39.520
So right here, as always, I'm going to reference Axios target and I'm going to invoke mock resolve

34
00:02:39.520 --> 00:02:41.560
value on that just mock function.

35
00:02:41.800 --> 00:02:46.390
And that's going to allow it to emulate an async function that returns or resolves to this value.

36
00:02:46.600 --> 00:02:48.070
And this is going to be an object.

37
00:02:48.250 --> 00:02:51.550
And just like the just response object, it's going to have a data property.

38
00:02:51.700 --> 00:02:53.350
And here I can provide an array.

39
00:02:53.440 --> 00:02:56.830
And in that array I can provide a sample spotlight object.

40
00:02:57.130 --> 00:03:01.640
So for example, I can have an object with an IMG property set to some image.

41
00:03:01.810 --> 00:03:07.030
It doesn't actually have to be a real URL of any image because for the purposes of testing what spotlight

42
00:03:07.030 --> 00:03:08.670
is doing, it doesn't really care.

43
00:03:08.680 --> 00:03:13.610
It just passes this property and this string value up to the parent.

44
00:03:13.630 --> 00:03:15.820
It doesn't actually have to be an image string.

45
00:03:16.210 --> 00:03:19.490
So right here, title as another example of a property.

46
00:03:19.540 --> 00:03:22.900
I'm going to give it the value of some title and below description.

47
00:03:23.800 --> 00:03:29.650
So again, what I'm doing here is simply replacing the API call right here.

48
00:03:29.800 --> 00:03:35.830
So the test will notice when I'm using Axios target and will give it an asynchronous function that will

49
00:03:35.830 --> 00:03:36.910
resolve to this object.

50
00:03:37.030 --> 00:03:41.470
So then we're going to get access to the data property, which is going to be this array, and this

51
00:03:41.470 --> 00:03:47.080
will become the value of this spotlight's data attribute in my spotlight component, allowing me to

52
00:03:47.080 --> 00:03:51.550
test the component as if it just received an API response of one spotlight object.

53
00:03:52.060 --> 00:03:57.220
Okay, so after I mark this out, what I'm going to do is create my wrapper.

54
00:03:57.730 --> 00:03:58.870
So I'm going to mount.

55
00:04:00.090 --> 00:04:05.520
My Spotlight component, and I'm going to provide my second argument, which is my configuration object.

56
00:04:05.730 --> 00:04:10.110
And as we know by now, in order to provide slots, we have to use the slots property.

57
00:04:10.500 --> 00:04:12.060
So right here we're going to do slots.

58
00:04:12.060 --> 00:04:13.200
That's going to be an object.

59
00:04:13.620 --> 00:04:16.530
And the properties in this object are these slot names.

60
00:04:16.680 --> 00:04:18.570
In this case, we have a single slot.

61
00:04:18.570 --> 00:04:20.910
So Vue has given it the name of default.

62
00:04:21.300 --> 00:04:23.670
So here I want to target the default slot.

63
00:04:24.790 --> 00:04:31.150
And I want to provide a string with the HTML that I want to inject into that slot content as if I were

64
00:04:31.180 --> 00:04:32.380
a parent component.

65
00:04:32.770 --> 00:04:37.390
So what I'm actually going to do here to enable me to write this content across several lines is I'm

66
00:04:37.390 --> 00:04:39.370
going to use E6 template strings.

67
00:04:39.610 --> 00:04:42.700
The advantage of this is we can do line breaks very easily in them.

68
00:04:42.910 --> 00:04:48.220
And so I'm just going to create the kind of parent component that I would need in order to be able to

69
00:04:48.220 --> 00:04:50.140
render this slot information.

70
00:04:50.440 --> 00:04:54.700
So just like we saw in the implementation, we're going to need a template tag.

71
00:04:56.090 --> 00:04:59.390
And we're also going to need to close it off so I can do a line break like so.

72
00:04:59.690 --> 00:05:08.270
And we, of course, need to reference our specific slots so we can either do V slot in default or we

73
00:05:08.270 --> 00:05:10.880
can simply do hashtag default, which is the preferred approach.

74
00:05:11.210 --> 00:05:14.300
And then we provide our equal sign and or quotes.

75
00:05:14.300 --> 00:05:18.890
And here's where we assign a name to the object with all the slot props that viewer's going to give

76
00:05:18.890 --> 00:05:19.070
us.

77
00:05:19.340 --> 00:05:22.790
So I'm just going to follow the convention we've had throughout the course, and I'm just going to call

78
00:05:22.790 --> 00:05:23.600
it slot props.

79
00:05:23.810 --> 00:05:26.030
Although as we saw, the name is up to us.

80
00:05:26.330 --> 00:05:31.940
So this is the object that is going to have IMG and title and description properties if everything is

81
00:05:31.940 --> 00:05:35.690
correctly configured as far as our Axios response and our implementation here.

82
00:05:36.140 --> 00:05:38.840
So in this template, it's really up to me whatever I want to write.

83
00:05:38.840 --> 00:05:40.250
So I'm just going to put an H1.

84
00:05:41.750 --> 00:05:48.140
And I'm going to use the view interpolation syntax in order to provide the value of slot props dot img.

85
00:05:48.980 --> 00:05:54.410
So basically I'm simply trying to render the string of the IMG property in the real world.

86
00:05:54.410 --> 00:05:59.900
We binded this to the source attribute of an image, but for the purposes of testing this, we don't

87
00:05:59.900 --> 00:06:03.320
really care because the parent just cares that it gets this information.

88
00:06:03.320 --> 00:06:04.880
It doesn't care how it uses it, right?

89
00:06:05.270 --> 00:06:11.720
So what I can do below is I can simply test that somewhere in my wrappers text I see the value of some

90
00:06:11.720 --> 00:06:17.510
image which is the expected value of the image property on the slot props object I'm iterating over,

91
00:06:17.600 --> 00:06:19.820
which is coming from our mock response.

92
00:06:20.210 --> 00:06:27.980
So right here I'm going to say expect somewhere in my wrappers text that I should match or see a substring

93
00:06:28.250 --> 00:06:29.780
equal to some image.

94
00:06:30.500 --> 00:06:36.380
So if everything worked as expected, we are going to market our response, our component is going to

95
00:06:36.380 --> 00:06:36.950
save it.

96
00:06:36.950 --> 00:06:38.960
Spotlight's data property to be this array.

97
00:06:39.200 --> 00:06:41.810
It's going to iterate over this array of one spotlight.

98
00:06:42.050 --> 00:06:43.490
It's going to do that with V four.

99
00:06:43.700 --> 00:06:49.130
It's going to create a slot content area and pass in the properties on this object up to the parent.

100
00:06:49.370 --> 00:06:54.710
So my parent is going to get IMG title description, I'm going to render IMG and then expect that whatever

101
00:06:54.710 --> 00:06:59.480
text I get here is displayed for the parent to see, right?

102
00:06:59.720 --> 00:07:04.490
So actually enabled in order for this to work, we're going to need to do an additional two lines of

103
00:07:04.490 --> 00:07:04.820
code.

104
00:07:05.090 --> 00:07:11.960
You may recall that whenever we do an asynchronous request inside a test, we need to make sure it completes

105
00:07:11.960 --> 00:07:15.140
and resolves and that our component updates with those changes.

106
00:07:15.410 --> 00:07:20.000
And in order to do that we use the flush promises function from Vue test utils.

107
00:07:20.000 --> 00:07:22.400
We do that after any asynchronous operation.

108
00:07:22.700 --> 00:07:25.430
So right here I'm going to do flush promises.

109
00:07:27.030 --> 00:07:31.570
And what I'm going to do is I'm going to await the completion of flush promises.

110
00:07:31.590 --> 00:07:37.740
This is going to ensure that my promise right here, represented by my Axios get method, resolves that

111
00:07:37.740 --> 00:07:38.550
it's done completing.

112
00:07:38.730 --> 00:07:43.830
Because otherwise it's possible that this could still be running technically while we mount our component

113
00:07:43.830 --> 00:07:47.190
and thus we're not going to register the changes of this response in our component.

114
00:07:47.340 --> 00:07:52.800
And thus the properties text will not update because this data from our mock marking out of the back

115
00:07:52.800 --> 00:07:54.180
end, it will not be there yet.

116
00:07:54.450 --> 00:07:54.750
Right.

117
00:07:55.020 --> 00:08:00.240
So if we're going to await this promise, because it is our this function, because it itself returns

118
00:08:00.240 --> 00:08:03.720
a promise, we need to make sure to make this an asynchronous test function.

119
00:08:04.410 --> 00:08:04.680
All right.

120
00:08:04.680 --> 00:08:05.820
So I'm going to save that.

121
00:08:07.020 --> 00:08:08.700
And I'm going to open up my terminal.

122
00:08:09.030 --> 00:08:12.990
And for some weird reason it showed up on my right side.

123
00:08:12.990 --> 00:08:14.650
So let me see if I can drag it over here.

124
00:08:14.650 --> 00:08:16.170
I seem to forgot how to do this.

125
00:08:16.350 --> 00:08:17.670
Give me 1/2 to fix this.

126
00:08:18.600 --> 00:08:20.310
Okay, so apologies for that.

127
00:08:20.310 --> 00:08:26.070
My terminal is now on the bottom of my screen, so I'm going to run and PM run, test, call and watch

128
00:08:27.660 --> 00:08:30.120
and we'll see if we're able to catch the new test.

129
00:08:32.050 --> 00:08:33.310
And everything is passing.

130
00:08:33.400 --> 00:08:38.080
And just to make sure that this is properly testing what I wanted to test, what I'm going to do, of

131
00:08:38.080 --> 00:08:43.960
course, is remove this line from my spotlight component and that will verify that it doesn't exist.

132
00:08:43.960 --> 00:08:50.230
So my test should predictably fail because we're now not going to pass that image pop up to my parent.

133
00:08:51.070 --> 00:08:53.050
So when I save this, we should get a failure.

134
00:08:53.200 --> 00:08:54.490
And that's exactly what we expect.

135
00:08:54.730 --> 00:09:00.280
Our parent component is expecting to see some text, some image which it's getting from the property

136
00:09:00.280 --> 00:09:01.540
right here and rendering.

137
00:09:01.690 --> 00:09:05.530
But it's now not getting that because we're not providing the slot prop to the parent.

138
00:09:05.950 --> 00:09:08.230
So that verifies that everything is working as expected.

139
00:09:08.500 --> 00:09:11.230
So I'm going to return that prop right here.

140
00:09:11.470 --> 00:09:16.270
And then what I'm basically going to do is create two similar tests for the title attribute or the title

141
00:09:16.270 --> 00:09:21.640
property and the description property or attribute or prop, whatever you want to call it.

142
00:09:21.970 --> 00:09:24.430
So for the most part, I can keep the exact same test set up.

143
00:09:24.430 --> 00:09:26.890
I'm just going to need to alter what's going on right here.

144
00:09:27.250 --> 00:09:29.590
So I'm going to copy this entire test right here.

145
00:09:31.430 --> 00:09:32.540
And paste it down below.

146
00:09:33.710 --> 00:09:39.710
For my second test, I want to say that it does not provide the image attribute but the title attribute

147
00:09:39.710 --> 00:09:40.760
to parent component.

148
00:09:41.030 --> 00:09:43.040
You can also use the word prop instead of attribute.

149
00:09:43.340 --> 00:09:48.380
So right here, instead of interpolating the image prop, I want to interpolate the value of the title

150
00:09:48.380 --> 00:09:52.850
prop and that should be a text that includes some title right here.

151
00:09:53.690 --> 00:09:54.080
All right.

152
00:09:54.530 --> 00:09:55.070
Save that.

153
00:09:55.070 --> 00:09:56.120
That's still going to pass.

154
00:09:56.300 --> 00:09:57.570
Then one more test below.

155
00:09:57.590 --> 00:09:59.960
Once again, I'm going to paste the test from above.

156
00:10:00.200 --> 00:10:04.700
And the final attribute we care about is the description attribute to the parent.

157
00:10:04.850 --> 00:10:09.200
I'm going to keep the setup of the Mac, going to keep this setup of the mounting of the spotlight.

158
00:10:09.200 --> 00:10:11.780
Except right now we don't want to render the image prop.

159
00:10:11.930 --> 00:10:14.600
We want to interpolate the value of the description.

160
00:10:15.560 --> 00:10:19.400
And that means the wrappers text should contain the text, some description.

161
00:10:21.290 --> 00:10:21.890
Save that.

162
00:10:22.610 --> 00:10:23.470
And there we go.

163
00:10:23.480 --> 00:10:30.530
We're now testing that the child component of Spotlight is correctly feeding up the values of the those

164
00:10:30.530 --> 00:10:34.730
three props image, child description, and that the parent component is properly doing something with

165
00:10:34.730 --> 00:10:36.110
them and getting them.

166
00:10:36.230 --> 00:10:41.330
And we're verifying that in a very component centric, user centric way, which is verifying that the

167
00:10:41.330 --> 00:10:45.740
text that those properties have is being displayed within the actual component.

168
00:10:45.770 --> 00:10:49.340
This is the simplest way to kind of force a rendering of that data.

169
00:10:49.340 --> 00:10:50.450
It's a lot more complicated.

170
00:10:50.630 --> 00:10:55.850
If we were to use V bind, for example, to bind some attribute like IMG, it's much easier to just

171
00:10:55.850 --> 00:11:00.710
come up with the simplest test we can when we render that slot prop and make sure that the child is

172
00:11:00.710 --> 00:11:02.150
correctly communicating with the parent.

173
00:11:02.420 --> 00:11:02.720
Right.

174
00:11:02.960 --> 00:11:04.460
That's all there is to cover in this lesson.

175
00:11:04.460 --> 00:11:05.960
So I will see you in next one.
