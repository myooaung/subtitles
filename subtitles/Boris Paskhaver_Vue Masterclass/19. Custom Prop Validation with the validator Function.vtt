WEBVTT
1
00:00:00.120 --> 00:00:06.030
In this lesson, I'll show you how we can improve some validation logic for our props in our action

2
00:00:06.030 --> 00:00:06.780
button component.

3
00:00:07.170 --> 00:00:13.980
So I'd like you to focus your attention to this prop validation for the type prop we're currently mandating

4
00:00:13.980 --> 00:00:16.320
that it's going to be a string, right?

5
00:00:16.620 --> 00:00:21.420
But if you think about it, the way that our styles are set up here, especially with this computed

6
00:00:21.420 --> 00:00:24.540
property, we can be a little bit more precise than that.

7
00:00:24.570 --> 00:00:30.420
It's not just that the type should be a string, it's that the type should be one of two current values,

8
00:00:30.720 --> 00:00:33.630
either primary or secondary.

9
00:00:33.820 --> 00:00:34.070
Right.

10
00:00:34.080 --> 00:00:38.640
That's really how this component is meant to work is the parent should tell me whether it's a primary

11
00:00:38.640 --> 00:00:43.560
button or a secondary button, and it shouldn't just be able to feed in any string whatsoever to the

12
00:00:43.560 --> 00:00:44.610
type prop.

13
00:00:45.300 --> 00:00:51.330
So how can we add that kind of validation logic so that Vue can run some kind of validation logic any

14
00:00:51.330 --> 00:00:56.430
time a parent component renders an action button and gives me a type prop?

15
00:00:56.760 --> 00:00:59.640
Well, we can add a method here called validator.

16
00:00:59.850 --> 00:01:01.970
This name is once again not up to us.

17
00:01:01.980 --> 00:01:07.160
It is a requirement of view and we have to define this method to accept one parameter.

18
00:01:07.170 --> 00:01:12.600
I'm going to give it a name, a value, and this will represent the actual prop value that is passed

19
00:01:12.600 --> 00:01:12.840
in.

20
00:01:13.110 --> 00:01:18.090
So in other words, whatever we provide for the type prop, this is what Vue is going to pass in as

21
00:01:18.090 --> 00:01:19.110
the value argument.

22
00:01:19.440 --> 00:01:24.540
And in the body of this method, we define how to perform that validation.

23
00:01:25.260 --> 00:01:26.460
And here's the way it works.

24
00:01:26.760 --> 00:01:32.790
If the validator method returns true, then Vue will see that that is a confirmed validation.

25
00:01:32.790 --> 00:01:37.710
In other words, we're going to pass the criteria or the condition and Vue is going to give a thumbs

26
00:01:37.710 --> 00:01:37.920
up.

27
00:01:38.190 --> 00:01:43.980
Conversely, if the validator method returns a false, then that will mean that we have not validated

28
00:01:43.980 --> 00:01:44.490
the value.

29
00:01:44.490 --> 00:01:45.810
It is invalid.

30
00:01:45.810 --> 00:01:48.180
It is not suitable, it is not good.

31
00:01:48.270 --> 00:01:48.630
Right.

32
00:01:48.960 --> 00:01:54.510
So similarly to how Vue will perform validation on the type and for example, the requirements and things

33
00:01:54.510 --> 00:01:54.890
like that.

34
00:01:54.900 --> 00:02:00.360
This is our own way to add our own custom validation, our own business logic here.

35
00:02:00.600 --> 00:02:01.860
So let me show you how this is going to work.

36
00:02:01.860 --> 00:02:07.440
What I'm going to do is returning Boolean and the way I'm going to do that is by creating an array of

37
00:02:07.440 --> 00:02:10.140
the two string values that I can expect.

38
00:02:10.140 --> 00:02:14.070
We can only get a primary or a secondary string here.

39
00:02:14.880 --> 00:02:19.500
And then on an array in ESX we have a method called includes.

40
00:02:20.250 --> 00:02:24.410
And that method is going to check whether the array contains a specific value.

41
00:02:24.420 --> 00:02:26.160
It's just going to give a true or a false.

42
00:02:26.400 --> 00:02:29.010
We're not worried about the index position or anything like that.

43
00:02:29.130 --> 00:02:32.190
We're just worried about whether the array contains that value.

44
00:02:32.490 --> 00:02:38.760
So what I want to do is check whether an array of primary secondary includes whatever value is passed

45
00:02:38.760 --> 00:02:39.840
in for the prop.

46
00:02:40.080 --> 00:02:40.410
Right?

47
00:02:40.680 --> 00:02:47.400
So what I'm doing here is now I'm mandating that primary or secondary be the value of the type prop

48
00:02:47.850 --> 00:02:53.640
because if the value is anything else, for example, let me right here go and let me provide a type

49
00:02:53.640 --> 00:02:56.730
prop and let me provide, for example, a string of nonsense.

50
00:02:56.730 --> 00:02:56.970
Right.

51
00:02:56.970 --> 00:02:58.080
That's totally invalid.

52
00:02:58.080 --> 00:02:59.400
That's not excess class.

53
00:02:59.820 --> 00:03:04.080
Well, when our validator runs, it's going to receive a value of nonsense.

54
00:03:04.230 --> 00:03:09.210
And it's going to say, does the value nonsense exist within this array of primary secondary?

55
00:03:09.420 --> 00:03:15.030
The answer is false, which means the validator method returns false, which means Vue says this is

56
00:03:15.030 --> 00:03:15.840
not valid.

57
00:03:15.870 --> 00:03:16.560
No good.

58
00:03:16.740 --> 00:03:17.610
Failed the test.

59
00:03:17.730 --> 00:03:19.950
Let me show you a warning in the chrome console.

60
00:03:20.580 --> 00:03:26.970
Alternatively, if we do provide a value here like secondary, then once again Vue will rerun the validator

61
00:03:26.970 --> 00:03:27.300
method.

62
00:03:27.300 --> 00:03:30.450
It's going to say is this string of secondary found in this array?

63
00:03:30.600 --> 00:03:31.350
It is.

64
00:03:31.470 --> 00:03:33.840
So this expression evaluates to true.

65
00:03:34.080 --> 00:03:40.770
The method returns true, and any true will be interpreted as view by view as a confirmed check, as

66
00:03:40.770 --> 00:03:42.840
a valid input for that prop.

67
00:03:43.200 --> 00:03:46.410
So of course, let me just show you the happy path and the sad path here.

68
00:03:46.410 --> 00:03:49.650
I'm going to provide a type of secondary if I go back to my browser.

69
00:03:49.830 --> 00:03:50.640
Let me refresh this.

70
00:03:50.640 --> 00:03:52.080
So we get rid of these formal warnings.

71
00:03:52.380 --> 00:03:54.600
We're going to see that we get no warnings out here.

72
00:03:54.600 --> 00:03:55.440
Everything looks good.

73
00:03:56.100 --> 00:03:58.410
And we do, in fact, get this secondary button on the top.

74
00:03:58.410 --> 00:03:58.710
Right.

75
00:03:59.130 --> 00:04:01.710
Conversely, if I provide something like nonsense.

76
00:04:03.100 --> 00:04:05.800
That is going to trigger a big warning.

77
00:04:06.010 --> 00:04:08.350
Invalid prop custom validator.

78
00:04:08.380 --> 00:04:12.730
Notice our own custom validator method check failed for prop type.

79
00:04:12.970 --> 00:04:18.370
So obviously if you can't tell us exactly what's wrong because we customized the business logic in the

80
00:04:18.370 --> 00:04:19.060
validator method.

81
00:04:19.240 --> 00:04:24.070
But it's least, at least giving us a warning that something has gone wrong with the way that our parent

82
00:04:24.070 --> 00:04:27.990
component is passing in the type prop value for the action.

83
00:04:28.000 --> 00:04:35.560
But you'll also notice if I go back to my editor and I open up my terminal here and I run a test suite.

84
00:04:35.950 --> 00:04:39.400
Let me go ahead and run and PM run test colon.

85
00:04:39.400 --> 00:04:40.720
Let's do watch here.

86
00:04:41.500 --> 00:04:44.800
Just to run this and watch mode, we're also going to get a warning in our test suite.

87
00:04:44.800 --> 00:04:48.040
That's another added benefit as always of adding more information.

88
00:04:48.190 --> 00:04:49.960
You'll notice festival back up.

89
00:04:50.110 --> 00:04:55.960
We're actually going to get this warning not from our action button tests, but from our main nav tests.

90
00:04:55.960 --> 00:04:56.260
Right.

91
00:04:56.500 --> 00:05:02.230
So our main NAV, the way it currently works is it's going to render the main nav that we have right

92
00:05:02.230 --> 00:05:02.770
here on the left.

93
00:05:02.770 --> 00:05:03.580
It's going to mounted.

94
00:05:03.730 --> 00:05:10.330
And because we've hardwired a hardcoded value of nonsense for the type prop for the action button that

95
00:05:10.330 --> 00:05:11.350
is within May.

96
00:05:11.350 --> 00:05:17.380
Now whenever we mount a main component view is going to see that we're rendering an action button within

97
00:05:17.380 --> 00:05:20.920
it and that the tests are feeding in a invalid value for type.

98
00:05:21.190 --> 00:05:27.160
And that's simply because the actual implementation is feeding in a valid value for invalid value for

99
00:05:27.160 --> 00:05:27.700
type, right?

100
00:05:27.700 --> 00:05:31.510
So the cool thing is whenever you make mistakes, your tests are going to catch it in addition to the

101
00:05:31.510 --> 00:05:31.960
browser.

102
00:05:32.140 --> 00:05:34.270
That's why it pays to have a really good test suite.

103
00:05:34.270 --> 00:05:39.610
So of course, if I change this to either the value primary or secondary, let's do primary here.

104
00:05:39.790 --> 00:05:45.130
We're going to see that those warnings disappear from our tests because our main nav now, when it's

105
00:05:45.130 --> 00:05:50.680
mounted, will provide a normal value for the type prop of the action button that is being rendered

106
00:05:50.680 --> 00:05:51.340
inside.

107
00:05:51.700 --> 00:05:52.090
All right.

108
00:05:52.480 --> 00:05:58.330
And just going back to what we talked about earlier, given that this value is not required, we can

109
00:05:58.330 --> 00:06:01.120
totally remove this type prop from here as well.

110
00:06:01.120 --> 00:06:06.430
That's totally valid because in that case view is going to fall back to the default value of primary,

111
00:06:06.580 --> 00:06:10.720
which will in turn pass the validator method check.

112
00:06:10.940 --> 00:06:12.070
It's a totally fine.

113
00:06:12.370 --> 00:06:19.090
And if of course, we want to add a new access class in an upcoming update, that's totally fine.

114
00:06:19.480 --> 00:06:25.000
All we have to do is make sure that we provide that third CSC class right here and then make sure we

115
00:06:25.000 --> 00:06:27.520
add the name of that class right here in this array.

116
00:06:27.670 --> 00:06:29.590
And that will be totally valid, right?

117
00:06:29.860 --> 00:06:30.700
That's all there is to cover.

118
00:06:30.700 --> 00:06:34.840
In this lesson, we talked about how we can add custom validation to any of our props.

119
00:06:35.050 --> 00:06:36.820
We simply provide the validator method.

120
00:06:36.890 --> 00:06:40.060
We give it a single parameter which is going to represent the actual value.

121
00:06:40.210 --> 00:06:45.400
And then however we want to confirm that that value is valid, we can wire up that logic in the validator

122
00:06:45.400 --> 00:06:45.790
method.

123
00:06:45.940 --> 00:06:52.690
The validator method must return a boolean true to indicate that something should pass and false to

124
00:06:52.690 --> 00:06:55.720
indicate that something should not pass, that it is not valid.

125
00:06:55.930 --> 00:06:56.230
All right.

126
00:06:56.620 --> 00:06:57.790
That's all there is to cover here.

127
00:06:57.790 --> 00:06:59.410
So I will see you in the next lesson.
