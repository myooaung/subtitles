1
00:00:00,390 --> 00:00:01,140
Okay.

2
00:00:01,140 --> 00:00:04,740
So let's start styling and building out our accordion component.

3
00:00:05,040 --> 00:00:10,590
So here in Accordion View, I'm going to start by applying some tailwind classes to this top level div.

4
00:00:11,130 --> 00:00:17,760
I'm going to add some padding on the Y axis using the py5 class that's just going to add some padding

5
00:00:17,760 --> 00:00:19,560
on the top and bottom of 20 pixels.

6
00:00:19,980 --> 00:00:24,630
And then I want a bottom border, so I'm going to add the border B class.

7
00:00:25,410 --> 00:00:26,820
So border only in the bottom.

8
00:00:27,060 --> 00:00:28,730
I want that border to be solid.

9
00:00:28,740 --> 00:00:31,110
So I will apply the border solid class.

10
00:00:31,410 --> 00:00:37,710
And finally, as far as the border color, I want to use one of the colors that I defined in my tail

11
00:00:37,710 --> 00:00:40,200
in config file, which is brand great too.

12
00:00:40,500 --> 00:00:45,750
So we have a class available now called the Border Brand gray, too.

13
00:00:46,200 --> 00:00:48,510
And that will give it the exact gray that I want.

14
00:00:48,720 --> 00:00:49,080
All right.

15
00:00:49,440 --> 00:00:54,840
We can remove the my accordion text and then we're going to add some more content within this top level

16
00:00:54,840 --> 00:00:55,110
div.

17
00:00:55,530 --> 00:00:56,700
Let's begin with another div.

18
00:00:57,960 --> 00:01:00,180
And here I'm going to apply some classes as well.

19
00:01:00,390 --> 00:01:03,030
I'm going to make this a Flexbox with Flex.

20
00:01:03,780 --> 00:01:07,740
Then I'm going to ask the children to wrap themselves as they cannot fit in line.

21
00:01:07,800 --> 00:01:09,990
So I'm going to do the flex wrap class.

22
00:01:10,560 --> 00:01:16,020
I want to make sure to vertically align my flex children so I'm going to do items center and then I

23
00:01:16,020 --> 00:01:19,800
want to equally space out the flex children within this flex box.

24
00:01:19,800 --> 00:01:21,840
So I'll do that with justify between.

25
00:01:23,420 --> 00:01:29,630
And finally, whenever a user hovers their mouse over this div, I want to make sure that I change their

26
00:01:29,630 --> 00:01:33,920
cursor to be a pointer so they have an understanding that this content is clickable.

27
00:01:34,220 --> 00:01:38,300
So I'm going to apply the cursor pointer class and that's just going to make sure that we have that

28
00:01:38,300 --> 00:01:42,890
little hand icon that appears whenever the user hovers their mouse over this div.

29
00:01:43,370 --> 00:01:43,760
All right.

30
00:01:44,120 --> 00:01:47,630
Inside this second div, I want to add an H3.

31
00:01:48,760 --> 00:01:53,200
And for now, what we're going to do is we're going to build a specific accordion component.

32
00:01:53,230 --> 00:01:57,460
What I mean by that is we're going to build this out so that it solves exactly one problem.

33
00:01:57,520 --> 00:02:03,400
It's going to be our very first accordion for the organization's header, as well as all of the possible

34
00:02:03,400 --> 00:02:04,120
organizations.

35
00:02:04,390 --> 00:02:10,000
Later on, we're going to see how we can make the accordion more generic so that it supports multiple

36
00:02:10,000 --> 00:02:12,610
accordions with different headers and different content.

37
00:02:12,850 --> 00:02:17,470
But for now, I always think it's a good idea to build one specific implementation first.

38
00:02:17,680 --> 00:02:22,090
So then we can think about how we can make it more generic and more usable later.

39
00:02:22,400 --> 00:02:25,690
Okay, so for now I'm going to hard code and H3 value in here.

40
00:02:25,810 --> 00:02:31,000
Later on, we're going to probably find some custom way to customize what the header of this accordion

41
00:02:31,000 --> 00:02:31,240
is.

42
00:02:31,390 --> 00:02:32,860
For now, we're going to make it hard coded.

43
00:02:33,190 --> 00:02:35,680
So right here I'm just going to put the text organizations.

44
00:02:37,230 --> 00:02:41,910
This is going to be the accordion that the user is going to be able to filter organizations by.

45
00:02:42,240 --> 00:02:44,490
And then I'm going to add some classes to this H3.

46
00:02:44,850 --> 00:02:47,010
I'm going to use text base here.

47
00:02:47,400 --> 00:02:50,170
That's just going to use the default font size of 16 pixels.

48
00:02:50,400 --> 00:02:52,620
And I want to have a little bit of bolding here.

49
00:02:52,860 --> 00:02:54,660
So I'm going to do font symbol.

50
00:02:56,280 --> 00:02:57,680
All right, then.

51
00:02:57,690 --> 00:02:58,470
After.

52
00:02:59,670 --> 00:03:02,550
This div this nested the right here.

53
00:03:02,760 --> 00:03:06,060
I want to add another class or another div rather.

54
00:03:06,330 --> 00:03:11,220
And it's going to have its own set of classes and this is going to represent my child content.

55
00:03:11,490 --> 00:03:17,430
When I talk about child content, what I'm referring to is what the user is going to see when they expand

56
00:03:17,430 --> 00:03:20,290
the according to when they ultimately click the carrot.

57
00:03:20,310 --> 00:03:22,200
This is what I want to reveal to them.

58
00:03:22,440 --> 00:03:25,140
This is content that's going to be hidden by default.

59
00:03:25,260 --> 00:03:27,750
But when we expand the accordion, we're going to see it.

60
00:03:27,960 --> 00:03:30,810
And when we collapse the accordion, we're going to hide it again.

61
00:03:31,290 --> 00:03:36,630
So I'm going to give this a class of W full to apply a width of 100%.

62
00:03:36,900 --> 00:03:41,790
And then I want to give it a little bit of top margin, which I will do with the empty five class that

63
00:03:41,790 --> 00:03:44,130
is going to be 20 pixels of top margin.

64
00:03:44,340 --> 00:03:47,610
And in here, I'm just going to put some sample content.

65
00:03:47,620 --> 00:03:53,220
I'm just going to say child for now, this will be our child content by child again, I mean the content

66
00:03:53,220 --> 00:03:54,150
that we will reveal.

67
00:03:54,630 --> 00:03:54,900
Okay.

68
00:03:55,080 --> 00:03:59,280
Now, obviously, it is hardcoded right now, so we're always going to see that value of child.

69
00:03:59,490 --> 00:04:02,070
My question to you is, how can we make this conditional?

70
00:04:02,250 --> 00:04:07,320
How can we conditionally display this child content based on the user interacting with our accordion

71
00:04:08,130 --> 00:04:10,920
in order to enable this and use view features?

72
00:04:11,100 --> 00:04:17,760
All we're going to do is use AVF directive that is going to be connected to data on our accordion.

73
00:04:18,150 --> 00:04:21,480
So let me show you how this is going to work here in my configuration.

74
00:04:21,690 --> 00:04:27,990
I'm going to define my data method and this method is going to return the JavaScript object representing

75
00:04:27,990 --> 00:04:34,230
the components local data and I'm going to have a single property called is open and that property will

76
00:04:34,230 --> 00:04:38,280
be a boolean that reflects whether the accordion is open or not.

77
00:04:38,430 --> 00:04:41,010
When I use the word open, I mean expanded.

78
00:04:41,010 --> 00:04:43,140
I mean showing that child content.

79
00:04:43,560 --> 00:04:50,760
So I'm going to start this component in a is open state of false so the accordion is not open so we

80
00:04:50,760 --> 00:04:52,950
do not want to show this chunk content.

81
00:04:53,130 --> 00:04:56,700
And then when we flip this value, I do want to show this child content.

82
00:04:57,030 --> 00:05:03,060
So what I'm going to do here is before my class, I'm going to add my if directive and I'm going to

83
00:05:03,060 --> 00:05:06,060
connect it to my is open data property.

84
00:05:06,480 --> 00:05:06,840
Okay.

85
00:05:07,050 --> 00:05:12,150
So one more time as a reminder of how this is going to work when the component initializes is open is

86
00:05:12,150 --> 00:05:18,090
set to false, which means V.F. is going to evaluate to false and we're not going to see the child content.

87
00:05:18,420 --> 00:05:25,890
Then once we figure out how to invert this boolean to be true, then VRF will evaluate to true because

88
00:05:25,890 --> 00:05:28,680
is open will be true and we will render that child content.

89
00:05:28,920 --> 00:05:34,230
And if we're able to swap back and forth between false and true and false and true, etc., then we're

90
00:05:34,230 --> 00:05:37,800
going to conditionally render the appearance of this child the content.

91
00:05:38,760 --> 00:05:39,170
Okay.

92
00:05:39,840 --> 00:05:45,510
So in order to be able to alter the value of this property, I need to define some kind of method on

93
00:05:45,510 --> 00:05:46,140
my component.

94
00:05:46,350 --> 00:05:50,190
And then we're going to see how we're going to be able to trigger that method to run.

95
00:05:50,490 --> 00:05:53,370
So right here, I'm going to define a methods section.

96
00:05:55,110 --> 00:05:57,270
And I'm going to define a method called open.

97
00:05:57,660 --> 00:06:03,840
And its responsibility will be to invert or flip the value of the is open data property.

98
00:06:04,080 --> 00:06:07,230
So we know that we can reference this dot is open here.

99
00:06:07,710 --> 00:06:13,470
And what I'm going to do is whatever the current value is of this, I'm going to inverted or flip it

100
00:06:13,470 --> 00:06:15,600
using the exclamation point.

101
00:06:15,630 --> 00:06:19,650
So the way this works in JavaScript is if this is true, we're going to switch it to false.

102
00:06:19,830 --> 00:06:21,960
And if this is false, we're going to switch it to true.

103
00:06:22,350 --> 00:06:27,740
So whatever is the next value I'm going to reassign back to this is open.

104
00:06:29,060 --> 00:06:31,730
So whenever this method runs it's going to invert.

105
00:06:31,730 --> 00:06:34,270
The current value of my is open data property.

106
00:06:34,280 --> 00:06:37,730
It's going to switch it to the opposite one whenever this method runs.

107
00:06:38,120 --> 00:06:42,800
But of course, we still need this method to run at some point, and we're going to do that with a user

108
00:06:42,800 --> 00:06:43,310
click.

109
00:06:43,610 --> 00:06:48,830
And I'm going to register that on this div right here with this collection of classes, I'm going to

110
00:06:48,830 --> 00:06:50,480
add the V on syntax.

111
00:06:50,480 --> 00:06:56,390
As a reminder, we can do Veon, click here and then we can provide the method that we want to run whenever

112
00:06:56,390 --> 00:06:57,980
the user clicks on this dip.

113
00:06:58,130 --> 00:07:01,160
And I want of course to run the open method.

114
00:07:01,970 --> 00:07:06,860
Now, of course, you may recall with the syntax, with using the VR directive, we can replace it,

115
00:07:07,040 --> 00:07:09,410
replace this with a simple add sign.

116
00:07:09,530 --> 00:07:13,670
So I can simply do at click right here and this should wire everything up.

117
00:07:13,970 --> 00:07:20,000
So when the user clicks on this div, we're going to run the open method which is going to invert the

118
00:07:20,000 --> 00:07:24,440
value of the is open data property, which is going to force the component to re render, which will

119
00:07:24,440 --> 00:07:25,910
conditionally display the child.

120
00:07:26,510 --> 00:07:26,870
Okay.

121
00:07:27,650 --> 00:07:30,980
Before we take a look at this in the browser, there's one more thing I want to do.

122
00:07:31,280 --> 00:07:39,470
You may recall that the carrot is going to change whenever the user clicks on the actual component,

123
00:07:39,470 --> 00:07:39,680
right?

124
00:07:39,920 --> 00:07:44,870
So when the component is in a closed state, we want to show the carrot that is pointing down.

125
00:07:45,140 --> 00:07:50,780
And then when the content is expanded or when the component is open, we want to show the carrot pointing

126
00:07:50,780 --> 00:07:51,140
up.

127
00:07:51,650 --> 00:07:55,310
Okay, so what I'm going to do here is below my H3.

128
00:07:55,310 --> 00:07:57,770
I want to render my font awesome icon.

129
00:07:59,390 --> 00:08:05,690
However, what makes this particularly challenging is I want to dynamically alter what my font awesome

130
00:08:05,690 --> 00:08:06,530
icon will do.

131
00:08:06,680 --> 00:08:12,470
My carrot will depend on whatever my is open state is currently.

132
00:08:12,650 --> 00:08:17,450
So whenever you hear that word dependent or derived, the first thought that should come to mind is

133
00:08:17,450 --> 00:08:18,590
a computed property.

134
00:08:18,830 --> 00:08:24,320
So I'm going to define a computed property that will determine what prop I provide to the font.

135
00:08:24,350 --> 00:08:29,390
Awesome icon to dynamically customize which of those symbols I want to display here.

136
00:08:29,810 --> 00:08:30,260
Okay.

137
00:08:30,440 --> 00:08:34,190
So between data and methods, I'm going to define my computed object.

138
00:08:35,600 --> 00:08:39,680
And here I'll define a single method and I'm going to call it carrot icon.

139
00:08:41,370 --> 00:08:41,820
All right.

140
00:08:42,210 --> 00:08:45,030
And here I'm going to use a simple ternary statement.

141
00:08:45,390 --> 00:08:51,420
I'm going to return and I'm going to check on what is the current value of this that is open.

142
00:08:52,320 --> 00:08:55,260
And if it's true, I want to return one option.

143
00:08:55,380 --> 00:08:57,630
And if it's false, I want to return another option.

144
00:08:57,960 --> 00:09:03,240
Now, as a reminder, what we provide to the font awesome icon component right here, which is a global

145
00:09:03,240 --> 00:09:05,820
component, by the way, which is why we're able to use it in line.

146
00:09:06,060 --> 00:09:12,450
We provide it and I can prop set to an array and in that array we have two string arguments.

147
00:09:12,450 --> 00:09:18,510
The first one is always yes, and the second one is the actual string representing the icon that I want

148
00:09:18,510 --> 00:09:18,990
to render.

149
00:09:19,350 --> 00:09:25,410
So if my component is in an open state, I want to render the angle up.

150
00:09:25,830 --> 00:09:26,840
Font Awesome icon.

151
00:09:26,850 --> 00:09:30,210
We registered this one in our main that just filed a lesson ago.

152
00:09:30,960 --> 00:09:39,250
And alternatively, if my component is not in an open state, I want to render the face angle down for

153
00:09:39,630 --> 00:09:40,410
an awesome icon.

154
00:09:41,310 --> 00:09:46,320
Okay, so now we've hardwired this computed property, so we need to connect it to this component right

155
00:09:46,320 --> 00:09:46,620
here.

156
00:09:47,010 --> 00:09:53,910
So we want to provide the icon prop to this font awesome icon component and we want to provide a reference

157
00:09:53,910 --> 00:09:56,460
to our carat icon computed.

158
00:09:57,980 --> 00:09:58,730
Method below.

159
00:09:58,970 --> 00:10:03,830
But remember, this syntax will not work because if we do this then we will think we are providing a

160
00:10:03,830 --> 00:10:06,410
string of care icon to the prop.

161
00:10:06,560 --> 00:10:10,910
We need to provide a dynamic reference to an array referenced by this computed property.

162
00:10:11,120 --> 00:10:15,290
So we need to make sure we use the v bind syntax and add this colon in front.

163
00:10:16,210 --> 00:10:16,600
Okay.

164
00:10:16,810 --> 00:10:22,240
So we have created a computer property that is dependent on whether the component is open or not.

165
00:10:23,030 --> 00:10:23,350
Right.

166
00:10:23,470 --> 00:10:26,800
And with that, we are good to transition to our browser and see how this works.

167
00:10:27,070 --> 00:10:33,700
So I'm going to go back to Chrome and here we have our organizations according we have our bottom order

168
00:10:33,700 --> 00:10:37,330
here and now because the component is in a closed state.

169
00:10:37,330 --> 00:10:40,480
In other words, the is open data property is set to false.

170
00:10:40,600 --> 00:10:42,580
We have the carrot pointing down.

171
00:10:42,790 --> 00:10:44,590
Notice what happens when I click on this.

172
00:10:44,890 --> 00:10:48,520
We're going to automatically flip it to be the other font awesome icon.

173
00:10:48,580 --> 00:10:49,570
The carrot pointing up.

174
00:10:49,810 --> 00:10:56,020
Notice as well that now because the VRF is evaluating to true because is open the data property is set

175
00:10:56,020 --> 00:10:56,460
to true.

176
00:10:56,530 --> 00:10:58,210
We're now showing the child content.

177
00:10:58,510 --> 00:11:01,530
As soon as we click this again, everything is going to invert.

178
00:11:01,540 --> 00:11:05,140
Our carrot is going to point down and our child content is going to disappear.

179
00:11:05,770 --> 00:11:11,260
And because I'm simply inverting the value of the is open got a property in my open method we can go

180
00:11:11,260 --> 00:11:12,250
back and forth.

181
00:11:12,430 --> 00:11:17,980
JavaScript and Vue are simply going to switch back and forth between true and false to display that

182
00:11:17,980 --> 00:11:19,810
conditional child content.

183
00:11:20,590 --> 00:11:21,040
All right.

184
00:11:21,220 --> 00:11:23,170
I can show you this in my view, DevTools.

185
00:11:23,620 --> 00:11:27,430
If I go to view right here and I make sure I go to components right here.

186
00:11:28,790 --> 00:11:30,020
And look in job results.

187
00:11:30,070 --> 00:11:33,350
You and I look at the jobs up there, sidebar and here's my accordion.

188
00:11:33,500 --> 00:11:35,860
You can take a look at the is open property.

189
00:11:35,870 --> 00:11:37,160
It's set to false right now.

190
00:11:37,340 --> 00:11:40,650
And here we have our computed carat icon property.

191
00:11:40,700 --> 00:11:45,950
And you'll notice as I flip this, you'll notice this will evaluate to true and this will switch to

192
00:11:45,950 --> 00:11:46,490
angle up.

193
00:11:46,700 --> 00:11:50,000
And when I click it again, it's going to go back to false and angled down.

194
00:11:50,240 --> 00:11:55,610
And each time I run, this view is going to recalculate automatically and reactively react.

195
00:11:56,390 --> 00:11:56,840
All right.

196
00:11:57,140 --> 00:11:59,540
So that is the core functionality of you.

197
00:11:59,540 --> 00:12:00,710
That's what makes it so powerful.

198
00:12:01,070 --> 00:12:01,490
All right.

199
00:12:01,730 --> 00:12:04,190
So with that, we have created this accordion component.

200
00:12:04,200 --> 00:12:05,870
It's obviously not very reusable.

201
00:12:05,870 --> 00:12:07,400
It has this organizations tax.

202
00:12:07,550 --> 00:12:08,720
We'll talk more about it later.

203
00:12:08,900 --> 00:12:13,100
But in the very next lesson, we're going to introduce, the core subject of this section of the course

204
00:12:13,100 --> 00:12:15,080
is focused on which is slots.

205
00:12:15,200 --> 00:12:19,190
And slots are going to enable us to add some reusability to this accordion component.

206
00:12:19,370 --> 00:12:20,210
So I will see you there.
