WEBVTT
1
00:00:00.510 --> 00:00:01.500
All right.

2
00:00:01.500 --> 00:00:07.110
So over the course of the next couple of lessons, we're going to do a refactor in our app, and it's

3
00:00:07.110 --> 00:00:13.680
going to revolve around our job filters, sidebar component as well as our job filter, sidebar checkbox

4
00:00:13.680 --> 00:00:14.490
group component.

5
00:00:15.090 --> 00:00:18.180
So as a reminder, the way this works is the job filter.

6
00:00:18.180 --> 00:00:24.690
Sidebar right here renders three different checkbox with components and it passes each one of them a

7
00:00:24.690 --> 00:00:26.610
custom value for the header prop.

8
00:00:26.940 --> 00:00:32.040
And the only reason we're passing that header prop right here is because we want to provide it right

9
00:00:32.040 --> 00:00:34.530
here to the accordion components header prop.

10
00:00:34.770 --> 00:00:40.830
And of course the accordion is the actual component that renders that collapse ability and expandability

11
00:00:40.830 --> 00:00:42.390
of this content right here.

12
00:00:42.780 --> 00:00:48.180
Now you'll notice the fact that we're using accordion right here is actually one reason why our tests

13
00:00:48.180 --> 00:00:51.960
for the checkbox group component right here are a little bit complex.

14
00:00:52.200 --> 00:00:57.120
You'll notice as I scroll down here in any given test, we're doing a full amount.

15
00:00:57.360 --> 00:01:01.860
And then what we're doing is we're looking for this data test attribute with the value of clickable

16
00:01:01.860 --> 00:01:02.310
area.

17
00:01:02.610 --> 00:01:08.490
Now the reason this is confusing is because this data test attribute is actually found within our accordion

18
00:01:08.490 --> 00:01:11.520
component, not within our checkbox group component.

19
00:01:11.760 --> 00:01:17.430
So the reader has to notice or know that this is found in a totally separate component file.

20
00:01:17.670 --> 00:01:23.520
We actually noted this a little bit earlier and how this wasn't so great, but we decided to just have

21
00:01:23.520 --> 00:01:24.630
to kind of handle it right.

22
00:01:24.630 --> 00:01:28.800
Because at the heart of this test, we want to test this logic right here.

23
00:01:29.070 --> 00:01:34.800
But in order to even see that logic, we need to expand the accordion because the accordion is conditionally

24
00:01:34.800 --> 00:01:40.440
rendering this content as slot content whenever the user has actually clicked the little carrot to expand

25
00:01:40.440 --> 00:01:40.530
it.

26
00:01:40.530 --> 00:01:40.800
Right?

27
00:01:41.100 --> 00:01:45.840
So the complexity of how these components interact is what's responsible for us having to do this logic

28
00:01:45.840 --> 00:01:50.520
right here, a finding the static test, then triggering a click to expand it and then actually looking

29
00:01:50.520 --> 00:01:52.860
for the content within the checkbox group component.

30
00:01:53.190 --> 00:01:59.280
So to make this a little bit cleaner, what I propose we do is we move this accordion logic up from

31
00:01:59.280 --> 00:02:02.280
the checkbox group into job filter sidebar.

32
00:02:02.550 --> 00:02:07.440
So in other words, what I want to do is simply render the accordion right here and the accordion is

33
00:02:07.440 --> 00:02:13.620
going to cover the entire checkbox group as its actual slot content and that will allow us to remove

34
00:02:13.620 --> 00:02:18.660
the header prop entirely because we're simply going to feed it into the accordion component right here.

35
00:02:19.170 --> 00:02:19.410
All right.

36
00:02:19.430 --> 00:02:20.410
That's a lot to take in.

37
00:02:20.410 --> 00:02:22.500
So let me show you how this refactor is going to work.

38
00:02:22.800 --> 00:02:26.490
The first thing I'm going to do is in my job filters, sidebar component.

39
00:02:26.700 --> 00:02:29.700
What I'm going to do down here is import the accordion component.

40
00:02:30.840 --> 00:02:35.340
So this might have even been here earlier in the course, but regardless, I'm going to import accordion

41
00:02:35.640 --> 00:02:40.590
and it's going to come from the source directory components shared and then accordion dot view.

42
00:02:40.950 --> 00:02:45.420
And of course as soon as I import it, I also want to register it right here as a local component.

43
00:02:45.420 --> 00:02:47.670
So enter components object, I'll add accordion.

44
00:02:47.970 --> 00:02:51.270
So now we can use the accordion component anywhere in our template.

45
00:02:51.540 --> 00:02:58.110
And what I'm going to do right here is render an accordion to store each job, filter a sidebar checkbox

46
00:02:58.110 --> 00:02:58.380
group.

47
00:02:58.650 --> 00:03:04.860
So in other words, I'm moving this logic right here up one level because this logic of the accordion

48
00:03:04.860 --> 00:03:07.740
header doesn't really have to do anything with a checkbox group.

49
00:03:07.860 --> 00:03:10.620
It's just kind of the layer that exposes it in the first place.

50
00:03:10.950 --> 00:03:15.720
So what I'm going to do here is I'm going to provide my accordion component, right?

51
00:03:15.720 --> 00:03:21.480
And there is my opening tag and there's my closing tag and I'm going to provide the closing tag after

52
00:03:21.480 --> 00:03:22.440
my checkbox group.

53
00:03:22.710 --> 00:03:26.970
So this now becomes the entire slotted content that fits into the accordion.

54
00:03:27.300 --> 00:03:32.640
And because we want to move the header prop and the accordion component itself accepts a header prop,

55
00:03:32.640 --> 00:03:32.940
right.

56
00:03:32.940 --> 00:03:34.470
That's we're feeding down to it right here.

57
00:03:34.830 --> 00:03:39.750
What I'm going to do is simply pass the accordion, the header prop right here, header equals degrees,

58
00:03:40.680 --> 00:03:44.880
which spares me the need to pass in the header prop right here in our checkbox group.

59
00:03:45.090 --> 00:03:48.300
Of course, we also have to go to the checkbox to component and remove it.

60
00:03:48.400 --> 00:03:49.650
We'll do that in just a second.

61
00:03:49.860 --> 00:03:53.370
For now, let's repeat this pattern for all of our other checkbox groups.

62
00:03:53.640 --> 00:03:57.550
So right here, I'm going to create an accordion child component, right?

63
00:03:57.550 --> 00:04:00.390
And I'm going to wrap the closing tag after my checkbox group.

64
00:04:00.600 --> 00:04:04.020
And for this accordion, I'm going to provide a header of job types.

65
00:04:05.230 --> 00:04:09.880
Which allows me to remove this header prop right here and then down below, once again, I'm going to

66
00:04:09.880 --> 00:04:11.320
render an accordion component.

67
00:04:12.310 --> 00:04:14.910
Take the closing tag and put it after the checkbox group.

68
00:04:14.920 --> 00:04:17.170
So prettier should automatically indent this child.

69
00:04:17.470 --> 00:04:22.090
And that means we can provide the header prop right here to the accordion and that will be organizations.

70
00:04:22.450 --> 00:04:27.700
So again, instead of passing it down through CheckBox Group to get to accordion, I've now moved that

71
00:04:27.700 --> 00:04:30.700
accordion back up so I no longer need to pass this prop at all.

72
00:04:31.540 --> 00:04:32.170
So there we go.

73
00:04:32.410 --> 00:04:33.520
So I'm going to remove it there.

74
00:04:33.520 --> 00:04:36.160
And I think that's everything we have to do in this file.

75
00:04:36.550 --> 00:04:36.790
All right.

76
00:04:36.790 --> 00:04:41.470
So our next step is going to be to make the corresponding changes in our checkbox with component, right?

77
00:04:41.800 --> 00:04:44.260
So let's save this file and then let's open checkbox group.

78
00:04:44.650 --> 00:04:49.600
And here what we're going to do is remove the accordion online tool because it's no longer needed because

79
00:04:49.600 --> 00:04:53.920
we're rendering it one step higher in jobs with the sidebar for each checkbox group.

80
00:04:54.130 --> 00:04:54.430
Right?

81
00:04:54.670 --> 00:04:59.290
So I'm going to remove line two and I'm also going to remove the closing accordion tag on line 20.

82
00:04:59.710 --> 00:05:00.430
Save this.

83
00:05:00.580 --> 00:05:05.470
So now our checkbox group simply begins as a div rather than as an accordion component that nests a

84
00:05:05.470 --> 00:05:07.480
whole bunch of child content within a slot.

85
00:05:08.170 --> 00:05:12.730
So in this component, of course, as I scroll down, we're no longer going to need the accordion because

86
00:05:12.730 --> 00:05:15.100
we're not using it in this component in checkbox group.

87
00:05:15.340 --> 00:05:19.240
So we'll remove the import and we'll also remove this component section right here.

88
00:05:20.110 --> 00:05:24.940
And in addition in our props section which performs the type validation from view's perspective of the

89
00:05:24.940 --> 00:05:27.580
props, we no longer are receiving a header prop.

90
00:05:27.760 --> 00:05:32.890
We were previously giving this header prop to our checkbox group simply a pass down to the accordion.

91
00:05:33.130 --> 00:05:37.750
But we're no longer using the accordion component in checkbox group, so we no longer are passing in

92
00:05:37.750 --> 00:05:41.260
the header prop from jobs to the sidebar and thus no longer need this validation.

93
00:05:41.500 --> 00:05:43.150
So I'm going to delete this as well.

94
00:05:44.280 --> 00:05:44.790
There we go.

95
00:05:45.030 --> 00:05:48.960
And as I scroll down, it looks like all of this logic doesn't have anything to do with that.

96
00:05:48.960 --> 00:05:52.470
So that is a good place to to finish up with this component.

97
00:05:52.800 --> 00:05:53.070
All right.

98
00:05:53.070 --> 00:05:56.970
So now we've modified these two components and we're actually going to discover that two test suites

99
00:05:56.970 --> 00:06:00.540
are failing checkbox group as well as job builder sidebar.

100
00:06:00.720 --> 00:06:04.020
Now we're going to come back to job filter sidebar in a later lesson.

101
00:06:04.020 --> 00:06:07.170
So unfortunately, we're not going to get all of our tests to pass in this lesson.

102
00:06:07.410 --> 00:06:12.090
But at a minimum, let's make sure that our tests for the checkbox group are passing.

103
00:06:12.090 --> 00:06:13.920
So we're going to focus on this thing right here.

104
00:06:14.340 --> 00:06:14.670
All right.

105
00:06:14.670 --> 00:06:16.890
So how do we begin the refactor of our test suite?

106
00:06:17.040 --> 00:06:19.230
Well, let's think about what checkbox script now needs.

107
00:06:20.010 --> 00:06:24.660
The first thing is right here in our create config factory function, we no longer need to provide a

108
00:06:24.660 --> 00:06:27.990
default value for the header prop because we no longer accept that thing.

109
00:06:27.990 --> 00:06:29.160
So of course let's get rid of that.

110
00:06:29.760 --> 00:06:33.840
And in addition you'll notice earlier what we were doing is stubbing out font awesome icon.

111
00:06:34.050 --> 00:06:39.690
The reason we were doing that is because our accordion was using that font awesome icon library to render

112
00:06:39.690 --> 00:06:40.460
the little carrot.

113
00:06:40.740 --> 00:06:45.660
Well, now our checkbox group no longer needs the font awesome icon because it no longer uses an accordion,

114
00:06:45.840 --> 00:06:50.190
so we no longer need to stub it out so I can remove this entire global section of my config.

115
00:06:51.480 --> 00:06:51.870
All right.

116
00:06:52.170 --> 00:06:54.150
So moving on down, here's our first test.

117
00:06:54.390 --> 00:06:59.610
Now, in theory, we no longer need to find this clickable area to test because that was our former

118
00:06:59.610 --> 00:07:00.600
accordion implementation.

119
00:07:00.780 --> 00:07:05.490
We should be able to simply look for all of the regular content that exists in here automatically.

120
00:07:05.760 --> 00:07:08.490
So I'm going to get rid of line 27 and 28.

121
00:07:08.490 --> 00:07:09.390
We no longer need it.

122
00:07:09.840 --> 00:07:13.500
And scrolling down, we're going to find the exact same code in this test as well.

123
00:07:13.500 --> 00:07:18.600
We no longer need to find that clickable area data just activate which lives inside the accordion component

124
00:07:18.750 --> 00:07:20.850
and we no longer need to trigger a click on it.

125
00:07:21.090 --> 00:07:26.610
So remove these two lines as well, then scrolling down one more time right here, let's remove that

126
00:07:26.610 --> 00:07:28.800
attached clickable area and the click of it.

127
00:07:29.460 --> 00:07:34.320
And you'll notice we were also utilizing the mount function right here, which forces a full mount,

128
00:07:34.440 --> 00:07:40.050
which means it renders the component as well as all child components which we needed to do because accordion

129
00:07:40.050 --> 00:07:45.360
technically classified as a child component and there was no way for us to check it slotted content

130
00:07:45.510 --> 00:07:47.250
unless we fully rendered the accordion.

131
00:07:47.550 --> 00:07:51.210
But now, if you look at our checkbox group, all we have is plain HTML.

132
00:07:51.330 --> 00:07:54.090
There are no more nested child components in here.

133
00:07:54.330 --> 00:07:58.620
So to make the process a little bit faster, we can actually switch this mount to a shallow amount and

134
00:07:58.620 --> 00:08:00.420
everything should still pass.

135
00:08:00.630 --> 00:08:04.920
So right here I'm going to scroll up and instead of using Mount, I'm going to import Shallow Mount.

136
00:08:06.130 --> 00:08:10.540
Which means wherever I have a mount where I actually mount my component, I'm going to change this to

137
00:08:10.540 --> 00:08:11.260
shallow amount.

138
00:08:13.060 --> 00:08:13.680
Down below.

139
00:08:13.690 --> 00:08:16.330
I'm going to change this mount to a shallow mount as well.

140
00:08:18.330 --> 00:08:19.020
And down below.

141
00:08:19.020 --> 00:08:22.970
Finally, in the last test, I'm going to change this mound to a shallow mound as well.

142
00:08:22.980 --> 00:08:23.790
There we go.

143
00:08:24.210 --> 00:08:27.240
Save that and let's let our tests run.

144
00:08:27.240 --> 00:08:30.720
And as long as we get the tests fixed in checkbox group, I will be happy.

145
00:08:30.750 --> 00:08:35.580
All right, so as I scroll up, it looks like these failures are all coming from the job filter sidebar

146
00:08:35.580 --> 00:08:36.030
tests.

147
00:08:36.450 --> 00:08:37.020
Here we go.

148
00:08:37.020 --> 00:08:38.010
And that's totally fine.

149
00:08:38.160 --> 00:08:42.330
That means that our tests in this file, which we just edited, are all passing.

150
00:08:42.330 --> 00:08:42.630
All right.

151
00:08:42.840 --> 00:08:45.600
The only thing that's failing is now in our job filter sidebar.

152
00:08:45.780 --> 00:08:48.180
And as I mentioned, we're not going to fix that in this lesson.

153
00:08:48.180 --> 00:08:52.080
But I do want to quickly describe why things are failing now in this component.

154
00:08:52.860 --> 00:08:55.410
You'll notice in these tests we are using shallow amount.

155
00:08:55.650 --> 00:08:59.430
And because we're using shallow amount, we're not actually rendering all of our child components,

156
00:08:59.640 --> 00:09:04.200
which means we're not rendering the accordion and we're also not rendering our job filter side bar checkbox

157
00:09:04.200 --> 00:09:09.270
group, because that is technically a child of a child and that is preventing the test from finding

158
00:09:09.270 --> 00:09:11.430
the corresponding data test attribute.

159
00:09:11.880 --> 00:09:17.610
You can see here it's not able to find the proper method on an empty view wrapper and it gets that view

160
00:09:17.610 --> 00:09:20.700
wrapper object by looking for a component with this data test approved.

161
00:09:20.970 --> 00:09:26.640
So this data test attribute job types filter exists right here, but our test is not able to find it

162
00:09:26.640 --> 00:09:31.590
because this child component is not being rendered because it itself is within another child component

163
00:09:31.590 --> 00:09:34.980
of accordion, which we're not rendering because we're doing a shallow amount.

164
00:09:35.280 --> 00:09:38.940
So in other words, the test library is stubbing out the accordion component.

165
00:09:38.940 --> 00:09:43.950
It's not using the real implementation, which means we're never actually getting to provide this slotted

166
00:09:43.950 --> 00:09:44.430
content.

167
00:09:44.700 --> 00:09:44.970
All right.

168
00:09:45.060 --> 00:09:46.080
And that's totally fine.

169
00:09:46.080 --> 00:09:49.050
And we're going to get back to a passing test, we in a few lessons from now.

170
00:09:49.170 --> 00:09:50.520
But that is a good place to start.

171
00:09:50.520 --> 00:09:52.950
Our refactor and I will see you in the next lesson.
