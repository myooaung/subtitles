1
00:00:01,250 --> 00:00:02,060
Okay.

2
00:00:02,060 --> 00:00:07,130
So in this lesson, we're going to talk about fallback content for our slots.

3
00:00:07,460 --> 00:00:13,730
So earlier on, you may recall that I mentioned that if we do not provide any content in the parent

4
00:00:13,730 --> 00:00:18,260
component to be rendered in our slot, then the component will simply ignore it.

5
00:00:18,590 --> 00:00:23,210
So in other words, here we have an accordion where we are providing some sample slot content, this

6
00:00:23,210 --> 00:00:23,750
paragraph.

7
00:00:23,990 --> 00:00:29,540
And if I provide nothing between the opening and closing accordion tags, then viewers are simply going

8
00:00:29,540 --> 00:00:31,340
to say, You didn't give me anything.

9
00:00:31,490 --> 00:00:36,380
So right here where it's expecting slot content, it's literally going to put nothing because the parent

10
00:00:36,380 --> 00:00:38,210
component didn't give it anything.

11
00:00:38,210 --> 00:00:38,600
Right.

12
00:00:39,080 --> 00:00:40,730
So that's something we talked about earlier.

13
00:00:41,540 --> 00:00:43,820
And let me return this back to the original implementation.

14
00:00:44,270 --> 00:00:52,310
Now, what we can do here, where we actually define this slot component is we can write some sample

15
00:00:52,640 --> 00:01:01,010
HTML to use, but only to use if the parent component does not give us custom slot content.

16
00:01:01,340 --> 00:01:04,490
Sunny, write this out and I promise you it's going to make immediate sense.

17
00:01:04,700 --> 00:01:11,330
So in my accordion component, within my opening and closing slot component right here, I'm going to

18
00:01:11,330 --> 00:01:13,030
add a sample paragraph tag.

19
00:01:13,040 --> 00:01:15,020
This can be whatever time all we want.

20
00:01:15,260 --> 00:01:20,750
And I'm going to say something like, whoops, somebody forgot to populate me.

21
00:01:21,710 --> 00:01:22,910
So what am I doing here?

22
00:01:23,210 --> 00:01:32,540
What I am specifying is content to render within my slot if and only if my parent does not give me any

23
00:01:32,540 --> 00:01:33,320
slot content.

24
00:01:33,680 --> 00:01:39,710
So on the left hand side, in our job filter sidebar, I want you to compare this accordion and this

25
00:01:39,710 --> 00:01:42,620
accordion right here in that very first accordion.

26
00:01:42,620 --> 00:01:45,110
We do not provide any slot content.

27
00:01:45,230 --> 00:01:47,210
We do not nest any H10.

28
00:01:47,210 --> 00:01:47,780
All right.

29
00:01:47,780 --> 00:01:54,740
Here, between my opening and my closing accordion component tag, thus because we do not provide any

30
00:01:54,740 --> 00:02:00,920
slot content view will fall back to this default of this paragraph tag with this text.

31
00:02:01,250 --> 00:02:06,210
It will only use this if there is no slot content provided by the parent.

32
00:02:06,800 --> 00:02:13,700
In comparison, when we render this accordion below this organization's accordion, we do provide slot

33
00:02:13,700 --> 00:02:14,240
content.

34
00:02:14,570 --> 00:02:18,590
So View will use this slot content right here.

35
00:02:18,710 --> 00:02:24,020
It's going to completely ignore this paragraph tag and it's going to put this content right here.

36
00:02:24,500 --> 00:02:26,210
So I went a little bit crazy here.

37
00:02:26,360 --> 00:02:31,460
It's going to put this div right here are slot content directly where this paragraph targets.

38
00:02:32,030 --> 00:02:38,900
So again, this will only render if and only if the parent does not provide any slot content.

39
00:02:38,960 --> 00:02:39,770
That's all there is to it.

40
00:02:40,070 --> 00:02:41,540
So if I go back to my browser.

41
00:02:42,880 --> 00:02:43,600
We're going to see.

42
00:02:43,660 --> 00:02:45,600
We did not provide any slot content here.

43
00:02:45,610 --> 00:02:46,330
So what do we get?

44
00:02:46,510 --> 00:02:51,790
We get that paragraph tag that we declared in my accordion component here.

45
00:02:51,810 --> 00:02:55,090
We did provide slot content, so we see exactly what we specified.

46
00:02:55,360 --> 00:03:01,000
So it's a way that we can provide a reasonable default to fall back to in case you want some default

47
00:03:01,000 --> 00:03:02,140
content for the slot.

48
00:03:02,350 --> 00:03:05,410
In case the parent doesn't give me anything, I'm going to use this value.

49
00:03:05,710 --> 00:03:09,100
You may notice that we have a very similar idea when it comes to props.

50
00:03:09,100 --> 00:03:09,400
Right.

51
00:03:09,550 --> 00:03:14,950
We can provide a default value for a prop where if the parent component doesn't give me a prop value,

52
00:03:15,100 --> 00:03:18,010
I can fall back or rely on a reasonable default.

53
00:03:18,220 --> 00:03:25,060
It's the exact same principle, but using HTML content to specify the slots fallback content.

54
00:03:25,420 --> 00:03:25,780
All right.

55
00:03:26,140 --> 00:03:29,320
So to finish up this lesson, let me show you a couple examples side by side.

56
00:03:30,100 --> 00:03:32,650
I'm going to return back to my original implementation here.

57
00:03:32,890 --> 00:03:35,980
I'm going to have a paragraph with the text placeholder for now.

58
00:03:37,420 --> 00:03:40,690
And above job types, I'm going to create yet another accordion.

59
00:03:41,770 --> 00:03:45,310
And for this accordion, I'm actually going to use a self-closing tag.

60
00:03:45,610 --> 00:03:46,630
Why am I going to do this?

61
00:03:46,870 --> 00:03:53,440
I'm going to do this because if I have no slot content right here, I don't actually have a need to

62
00:03:53,440 --> 00:03:55,330
use an open and closing tag at all.

63
00:03:56,170 --> 00:03:56,530
Right.

64
00:03:56,710 --> 00:04:01,720
So in this situation, I need an opening and closing accordion tag because the content that goes in

65
00:04:01,720 --> 00:04:03,940
between becomes my slot content.

66
00:04:04,120 --> 00:04:09,790
If I have no slot content like I have here, then I'm welcome to use a regular self-closing accordion

67
00:04:09,790 --> 00:04:10,180
component.

68
00:04:10,540 --> 00:04:12,310
Granted, I still have to give it a header.

69
00:04:12,310 --> 00:04:12,660
Props.

70
00:04:12,660 --> 00:04:14,620
So let me give it give it a header here of degree.

71
00:04:16,030 --> 00:04:20,950
But these are all valid ways that we can use our accordion and the slot content within it.

72
00:04:21,100 --> 00:04:24,940
We can render a self-closing component if we don't want to provide any slot content.

73
00:04:25,090 --> 00:04:27,880
In which case we're going to fall back to this approach right here.

74
00:04:28,300 --> 00:04:33,430
And as far as these next two accordions, because we are providing different content for each one,

75
00:04:33,700 --> 00:04:36,790
this content is going to win over our fallback content here.

76
00:04:36,940 --> 00:04:41,170
So these two are going to have their respective HTML so in the browser.

77
00:04:41,440 --> 00:04:46,420
Just to make sure we understand only for a degree are we going to use the fallback for job types in

78
00:04:46,420 --> 00:04:50,920
organizations that we're going to have their own custom content that we specify in the parent.

79
00:04:51,400 --> 00:04:51,670
All right.

80
00:04:51,670 --> 00:04:53,560
So lots of flexibility that Vue gives us.

81
00:04:53,800 --> 00:04:54,070
All right.

82
00:04:54,340 --> 00:04:56,260
So that is fallback content for slots.

83
00:04:56,470 --> 00:04:58,180
And I will see you in the next lesson.
