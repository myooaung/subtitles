WEBVTT
1
00:00:00.660 --> 00:00:01.230
Okay.

2
00:00:01.230 --> 00:00:07.410
So we now have a new property on our View X Store and we also have a corresponding mutation to right

3
00:00:07.410 --> 00:00:09.030
data to that property.

4
00:00:09.330 --> 00:00:13.740
Now of course, the next missing piece is going to be our asynchronous action method.

5
00:00:13.980 --> 00:00:17.670
And as a reminder, our view X action is allowed to be asynchronous.

6
00:00:17.910 --> 00:00:22.020
And so this is where we're going to actually make the API request to get our degrees.

7
00:00:22.170 --> 00:00:27.120
And then once we get our degrees, we're going to commit a new mutation and receive degrees in order

8
00:00:27.120 --> 00:00:29.120
to actually overwrite the bookstore state.

9
00:00:29.460 --> 00:00:35.070
So on the left hand side here, I have my actions that that's file and here we have our old fetch jobs

10
00:00:35.070 --> 00:00:38.880
action, which does something very similar, except of course, it fetches jobs.

11
00:00:39.090 --> 00:00:41.700
And here on the right hand side, I have my test suite.

12
00:00:41.940 --> 00:00:47.250
And so as always, let's follow a TDD approach in order to implement my new action, which of course

13
00:00:47.250 --> 00:00:48.840
will be called fetch degrees.

14
00:00:49.170 --> 00:00:54.420
So right here, I'm going to scroll to the top of this file and we can see here the design we have for

15
00:00:54.420 --> 00:00:55.050
get jobs.

16
00:00:55.230 --> 00:00:57.810
It's probably going to be very similar for fetch degrees.

17
00:00:58.050 --> 00:01:01.530
So let's say, of course, import our API function and then actually mock it out.

18
00:01:01.830 --> 00:01:07.200
So right here, I'm going to import get degrees and that is going to come from our source directory,

19
00:01:07.500 --> 00:01:10.520
the API folder and then of course get degrees.

20
00:01:10.530 --> 00:01:15.060
We have each API function call in its own file immediately afterwards.

21
00:01:15.060 --> 00:01:19.910
I want to mark out that exact file to make sure I don't have the original function, but rather the

22
00:01:19.920 --> 00:01:20.760
just replacement.

23
00:01:21.000 --> 00:01:24.880
And afterwards, of course, I want to tell TypeScript that that replacement has occurred.

24
00:01:25.140 --> 00:01:31.050
So I want to define a concept called get degrees mark and that will be my get degrees important function,

25
00:01:31.200 --> 00:01:33.510
but treated as a different type of just mark.

26
00:01:34.350 --> 00:01:34.860
There we go.

27
00:01:35.190 --> 00:01:39.450
The next thing I'm going to do is copy and paste this entire described block for fetch jobs.

28
00:01:39.450 --> 00:01:44.070
And we're simply going to update it to be fetch degrees because I assume my implementation is going

29
00:01:44.070 --> 00:01:45.330
to be very similar to this one.

30
00:01:45.660 --> 00:01:49.380
So I'm going to copy this entire blob right here and paste to below.

31
00:01:50.250 --> 00:01:53.220
And now let's walk through it and update everything that needs to be updated.

32
00:01:53.580 --> 00:01:59.220
So obviously we're going to test a new action which will now be called get or fetch degrees and get

33
00:01:59.220 --> 00:01:59.670
jobs.

34
00:01:59.670 --> 00:02:06.420
Mark here will of course no longer be our mock jobs API call, but rather our new get degrees mock function.

35
00:02:06.720 --> 00:02:08.760
And of course it's resolved value.

36
00:02:08.760 --> 00:02:13.350
Or in other words, what the API will give us is going to be a degree object and just to be a little

37
00:02:13.350 --> 00:02:14.610
bit closer to the real world.

38
00:02:14.610 --> 00:02:19.200
I'm going to replace this title right here with the degree property, just like our real world degree

39
00:02:19.200 --> 00:02:19.590
object.

40
00:02:19.830 --> 00:02:22.530
So let's give this a value degree here, like bachelors.

41
00:02:24.030 --> 00:02:27.330
All right, let's then move on to our actual tests right here.

42
00:02:27.570 --> 00:02:30.090
So it makes request to fetch degrees.

43
00:02:31.170 --> 00:02:31.560
All right.

44
00:02:31.560 --> 00:02:33.360
It's going to be an asynchronous test, right?

45
00:02:33.380 --> 00:02:36.060
Here we have a context object which has a commit.

46
00:02:36.450 --> 00:02:39.780
And then right here, we're going to call an action called fetch degrees.

47
00:02:39.780 --> 00:02:42.690
Of course, that action does not exist yet, but that's not a problem.

48
00:02:43.170 --> 00:02:50.400
And after we invoke that action method, we expect that get degrees should be invoked.

49
00:02:51.450 --> 00:02:54.660
And remember, this can be either get degrees or get degrees mark.

50
00:02:54.840 --> 00:02:57.000
Either one is a reference to the same function.

51
00:02:57.120 --> 00:03:02.040
And because it's adjustment function, it's going to be able to track whether or not it has been called.

52
00:03:02.080 --> 00:03:02.400
Right.

53
00:03:02.520 --> 00:03:06.570
The only reason we need to use get degrees mark right here is because of TypeScript.

54
00:03:06.570 --> 00:03:10.800
So TypeScript knows that that type right here has the mock resolved value right here.

55
00:03:11.310 --> 00:03:11.670
All right.

56
00:03:11.670 --> 00:03:15.810
For our next test, it sends message to save received degrees in store.

57
00:03:16.290 --> 00:03:16.800
There we go.

58
00:03:17.610 --> 00:03:21.780
So right here, what we're doing is we're saving a reference to adjust mark function to this commit

59
00:03:21.780 --> 00:03:22.290
constant.

60
00:03:22.530 --> 00:03:24.150
We're setting up our context object.

61
00:03:24.450 --> 00:03:29.190
We are now invoking our fetch action.

62
00:03:29.190 --> 00:03:30.840
In this case, it's going to be fetch degrees.

63
00:03:32.380 --> 00:03:33.850
Marking out the API call.

64
00:03:33.850 --> 00:03:39.670
And so after we have ran through that asynchronous fetch degrees action, we expect that our commit

65
00:03:39.670 --> 00:03:41.830
will have been called with the right mutation.

66
00:03:41.830 --> 00:03:42.010
Right.

67
00:03:42.030 --> 00:03:47.350
We want to make sure that we are sending the actual received degrees to the View Store to be saved.

68
00:03:47.590 --> 00:03:50.740
So the mutation we expect to invoke here should be received degrees.

69
00:03:51.580 --> 00:03:56.170
And of course the array of data that we're going to provide here should be this exact array because

70
00:03:56.170 --> 00:03:57.430
that is the degrees we're getting.

71
00:03:57.550 --> 00:04:00.580
So that is the degree array that I want to send to my view store.

72
00:04:00.790 --> 00:04:04.450
So I'm just going to copy this property here to make sure this object matches the one above.

73
00:04:04.750 --> 00:04:05.590
And there we go.

74
00:04:05.990 --> 00:04:06.760
Let's save that.

75
00:04:06.760 --> 00:04:10.210
And we are, of course, are going to get a whole bunch of violations, but that's totally fine.

76
00:04:10.630 --> 00:04:10.900
All right.

77
00:04:10.900 --> 00:04:15.160
So we'll begin by defining the action we need here, which means we need to go, of course, to our

78
00:04:15.160 --> 00:04:16.030
constants file.

79
00:04:16.360 --> 00:04:21.370
So I'm going to open up my constants far right here and right here we can add a new const.

80
00:04:21.820 --> 00:04:23.500
So right here, how about here?

81
00:04:23.500 --> 00:04:26.410
I will do an export const and I'll call it fetch degrees.

82
00:04:27.360 --> 00:04:33.030
And that will be, of course, a string equal to the exact string of such degrees saved up, which means

83
00:04:33.030 --> 00:04:36.330
in our actions far right here, we can import fetch degrees.

84
00:04:37.620 --> 00:04:38.220
There we go.

85
00:04:38.610 --> 00:04:43.740
And then what I'm going to need to do is define my fetch degrees method.

86
00:04:43.800 --> 00:04:45.120
So right here, fetch degrees.

87
00:04:45.540 --> 00:04:48.110
And it's going to be an asynchronous function right here.

88
00:04:48.120 --> 00:04:50.190
It's going to accept a context object.

89
00:04:50.700 --> 00:04:54.030
And the only important thing to know about that object is it has a commit method.

90
00:04:54.030 --> 00:04:58.980
And of course, that commit method is what allows us to commit a mutation to the bookstore, which means

91
00:04:58.980 --> 00:04:59.790
a change to it.

92
00:04:59.800 --> 00:05:08.130
State So what I want to do in this method body of course, is invoke my actual API call to get my degrees.

93
00:05:08.340 --> 00:05:13.680
So it's important that function right here, I'm going to import get degrees and that is going to come

94
00:05:13.680 --> 00:05:16.470
from my source directory API get degrees.

95
00:05:16.830 --> 00:05:22.980
So right here in line, I'm going to say convert degrees is going to be awaiting the resolved value

96
00:05:22.980 --> 00:05:26.790
of my get degrees asynchronous function, which will of course return a promise.

97
00:05:27.180 --> 00:05:29.460
All right, so now I have my degrees, I have that array.

98
00:05:29.460 --> 00:05:35.520
And the next thing I want to do, of course, is to commit the right mutation to get it over to my actual

99
00:05:35.520 --> 00:05:36.360
view store.

100
00:05:36.690 --> 00:05:41.550
So the next time I'm going to need to import is a received degrees constant, which I believe should

101
00:05:41.550 --> 00:05:44.520
be right here in my constants file.

102
00:05:44.520 --> 00:05:47.100
This is the name of our mutation which we already wrote.

103
00:05:47.490 --> 00:05:51.540
So what I'm going to do in my actions file is import my receive degrees constant.

104
00:05:52.230 --> 00:05:52.770
There we go.

105
00:05:52.950 --> 00:05:56.250
And that is the name of the mutation that we want to run.

106
00:05:56.280 --> 00:05:58.710
Let me, in fact open up my mutations file so you can see it.

107
00:05:59.700 --> 00:06:05.250
Just in case it's not clear, this is the mutation we now want to run and it's automatically going to

108
00:06:05.250 --> 00:06:06.830
receive the state from view.

109
00:06:07.260 --> 00:06:12.600
But we need to feed in this array of degrees which we have available right here as a degrees constant.

110
00:06:12.900 --> 00:06:14.520
So we have our context object.

111
00:06:14.520 --> 00:06:17.370
We know that we can run a mutation by invoking the commit method.

112
00:06:17.760 --> 00:06:20.160
Then the first argument is the name of the mutation.

113
00:06:20.160 --> 00:06:23.280
That, of course is going to be received degrees, which we've already imported.

114
00:06:23.520 --> 00:06:28.740
And the second argument is going to be this degrees array, which we have available as my degrees right

115
00:06:28.740 --> 00:06:29.040
here.

116
00:06:29.370 --> 00:06:32.010
Save that, let our tests run.

117
00:06:34.280 --> 00:06:38.960
And looks like it is going to affect quite a few files in our code base, but now everything is passing.

118
00:06:39.170 --> 00:06:44.690
So in our tests we are validating that we are indeed making the right API call and that after the API

119
00:06:44.690 --> 00:06:50.720
call completes, we are also sending the right message to the View Store, the right mutation name with

120
00:06:50.720 --> 00:06:51.350
the right data.

121
00:06:51.350 --> 00:06:53.720
We're testing the interaction with the View App Store.

122
00:06:53.720 --> 00:06:58.340
We're not testing the entire flow, and that allows us to be tested independently as just the method

123
00:06:58.430 --> 00:07:01.270
without having to involve all of the complexity of UCS.

124
00:07:01.520 --> 00:07:06.230
So both of these lines have their own respective tests on the right, and now we have our new action.

125
00:07:06.440 --> 00:07:08.030
That's all there is to cover in this lesson.

126
00:07:08.030 --> 00:07:09.530
So I will see you in the next one.
