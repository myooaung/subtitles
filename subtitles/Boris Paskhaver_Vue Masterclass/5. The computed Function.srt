1
00:00:00,600 --> 00:00:01,360
Okay.

2
00:00:01,370 --> 00:00:07,650
So the next thing that I want to implement in our setup method is this carrot icon name right here.

3
00:00:07,970 --> 00:00:13,190
As a reminder, carrot icon in the previous implementation which used the options API.

4
00:00:13,490 --> 00:00:19,730
Carrot icon was a computed property and what it does is it tracks the value of the former is open data

5
00:00:19,730 --> 00:00:20,630
property right here.

6
00:00:20,840 --> 00:00:26,750
And based on when whether this is true or false, it returns a different array and that array actually

7
00:00:26,750 --> 00:00:28,700
becomes an argument to the font.

8
00:00:28,730 --> 00:00:30,380
Awesome icons I can pop.

9
00:00:30,560 --> 00:00:36,260
The idea being that we want to display a different icon depending on what state the accordion is in.

10
00:00:36,590 --> 00:00:41,720
So when the accordion is closed or collapsed, we want to show that little carrot symbol, the little

11
00:00:41,720 --> 00:00:42,980
angle pointing down.

12
00:00:43,310 --> 00:00:49,400
And in comparison, when the accordion is expanded or open, we want to show a different carrot icon

13
00:00:49,490 --> 00:00:50,540
pointing up.

14
00:00:50,900 --> 00:00:58,310
So as soon as is open changes, we want this array to change so that we give font awesome icon the updated

15
00:00:58,310 --> 00:00:59,660
icon that it should show.

16
00:01:00,380 --> 00:01:05,330
So this is a perfect example of a computed property because it is dependent on other data.

17
00:01:05,330 --> 00:01:11,060
It is not original data, it's simply something that needs to rerun whenever is open changes.

18
00:01:11,360 --> 00:01:17,330
So my question to you is how can we implement a very similar functionality using the composition API?

19
00:01:17,600 --> 00:01:19,700
So you might be tempted to do something like this.

20
00:01:19,700 --> 00:01:22,880
You might be tempted to say, well, we can make a ref, right?

21
00:01:22,880 --> 00:01:28,400
And we can start referencing an array with the exact same arguments and whenever we change is open right

22
00:01:28,400 --> 00:01:30,710
here we can simply reference this ref.

23
00:01:30,710 --> 00:01:37,850
Let's say this is something like carrot icon and here we can do carrot icon that value and we can find

24
00:01:37,850 --> 00:01:39,020
a way to invert the array.

25
00:01:39,020 --> 00:01:40,310
It has to be the new one.

26
00:01:40,700 --> 00:01:46,850
So this is not really capturing the original reactivity spirit of a computed property because now we

27
00:01:46,850 --> 00:01:52,640
have to manually wire up the logic that whenever is open changes, we also have to update carrot icon.

28
00:01:52,850 --> 00:01:57,500
It'd be a lot easier and better if we can just get view to do the work for us.

29
00:01:57,620 --> 00:02:05,190
If we can tell you whenever is open changes automatically behind the scenes know that you should rerun

30
00:02:05,190 --> 00:02:07,280
and the logic for calculating a carrot icon.

31
00:02:07,490 --> 00:02:11,780
That's the exact same design for a computed property in the options API.

32
00:02:11,900 --> 00:02:15,410
It's not a second piece of data that we have to manually keep track of.

33
00:02:15,560 --> 00:02:17,450
We could have done that here, by the way as well.

34
00:02:17,450 --> 00:02:20,840
We could have we could have had a separate piece of data called carrot icon.

35
00:02:20,990 --> 00:02:26,540
But the reason we used a computed property instead is because it saves us the responsibility of having

36
00:02:26,540 --> 00:02:28,730
to update to things whenever is open.

37
00:02:28,730 --> 00:02:34,610
Changes we only have to update is open and have confidence that Vue will take care of this computation

38
00:02:34,610 --> 00:02:40,670
for us because it's keeping track of this change and automatically rerunning this logic well, to capture

39
00:02:40,670 --> 00:02:45,920
the exact same spirit using the composition API, we're going to use a function that we introduced in

40
00:02:45,920 --> 00:02:48,710
the previous section of the course called Computed.

41
00:02:49,040 --> 00:02:51,050
So let's go ahead and import it right here.

42
00:02:52,760 --> 00:02:58,910
So you may recall from the previous section of the course that the way computed works is it accepts

43
00:02:58,910 --> 00:02:59,720
a function.

44
00:02:59,900 --> 00:03:06,320
And in that function, we can reference any reactive object that we have in our in our program.

45
00:03:06,560 --> 00:03:08,510
So we have two currently reactive objects.

46
00:03:08,510 --> 00:03:10,550
We have header and and is open.

47
00:03:10,790 --> 00:03:16,880
So if we reference any one of them in this function, when that reactive object changes, the function

48
00:03:16,880 --> 00:03:19,760
that we passed computed is going to re run.

49
00:03:20,390 --> 00:03:21,820
All right, so here's what we're going to do.

50
00:03:21,830 --> 00:03:25,010
We're going to write the syntax out and then I'll show you exactly what we're going to do.

51
00:03:25,790 --> 00:03:29,720
What we're going to do is basically copy the ternary logic we have right here.

52
00:03:30,140 --> 00:03:34,760
So I'm going to say provide an arrow function, provide a function as an argument to computed.

53
00:03:34,940 --> 00:03:35,810
This will rerun.

54
00:03:36,080 --> 00:03:37,310
What do we want to track?

55
00:03:37,490 --> 00:03:40,400
We want to track is open now by itself.

56
00:03:40,410 --> 00:03:42,080
Remember, that is the reactive object.

57
00:03:42,080 --> 00:03:47,180
We have to more specifically track its value, which is going to be a boolean, either true or false.

58
00:03:47,480 --> 00:03:51,220
So when this is true, what I want to do is return an array.

59
00:03:52,260 --> 00:03:54,960
It's going to be the exact same array I have here, so let me copy it.

60
00:03:56,220 --> 00:03:58,540
Up here and then if is.

61
00:03:58,560 --> 00:04:00,440
Opens value is currently false.

62
00:04:00,450 --> 00:04:05,100
If the value on that react object is false, I'm going to return this array instead.

63
00:04:06,420 --> 00:04:12,630
So what we've basically done in the body of this computer function is we have implemented the exact

64
00:04:12,630 --> 00:04:17,280
same logic that we previously had in the computed property in the options API.

65
00:04:17,550 --> 00:04:19,410
Watch whatever is open is.

66
00:04:19,710 --> 00:04:25,560
And because we provided a reactive object here, whenever this changes, view is going to rerun this

67
00:04:26,250 --> 00:04:26,730
function.

68
00:04:26,730 --> 00:04:28,140
We don't have to tell it to rerun.

69
00:04:28,140 --> 00:04:30,870
It knows to rerun whenever is open changes.

70
00:04:31,200 --> 00:04:34,620
So what is the computed function going to give back to us as a return value?

71
00:04:34,800 --> 00:04:38,490
You may recall from the previous section that it's going to be its own reactive object.

72
00:04:38,820 --> 00:04:45,030
Well, that is exactly the object that we want to assign to our carrot icon name.

73
00:04:45,360 --> 00:04:48,960
So right here I'm going to do const karat icon.

74
00:04:50,270 --> 00:04:50,620
All right.

75
00:04:50,630 --> 00:04:55,430
Now, in order to be able to use this in my template, in order to have it accessed right here in line

76
00:04:55,430 --> 00:05:01,130
nine, I need to make sure that I provide it in my return object from my setup method.

77
00:05:01,700 --> 00:05:02,180
All right.

78
00:05:02,540 --> 00:05:08,090
So hopefully this part makes sense because this is repeating the same ideas we've gone through the last

79
00:05:08,090 --> 00:05:11,600
couple lessons and providing care icon, which makes it available here.

80
00:05:11,990 --> 00:05:14,810
The more complicated idea here is what is carrot icon?

81
00:05:14,990 --> 00:05:17,630
Carrot icon is another reactive object.

82
00:05:17,840 --> 00:05:22,730
However, it is a reactive object that doesn't start out with an initial value that we provide it like

83
00:05:23,000 --> 00:05:24,350
cool title or false.

84
00:05:24,650 --> 00:05:30,140
Rather, it is a reactive object that starts with a value that is dynamically computed based on the

85
00:05:30,140 --> 00:05:32,030
value of another reactive object.

86
00:05:32,240 --> 00:05:34,700
That reactive object being is open.

87
00:05:35,450 --> 00:05:41,510
So we're basically doing here is forcing the reactive nature of a computed property, but using a functional

88
00:05:41,510 --> 00:05:48,500
approach, we're telling view track is open because we gave is open here and if it flips rerun this

89
00:05:48,500 --> 00:05:48,950
function.

90
00:05:49,130 --> 00:05:53,960
So when is open flips to true we're going to run the function here and we're going to get this array

91
00:05:54,200 --> 00:05:59,390
if is open flips to false, we're going to rerun this function, we pass the computed and get back this

92
00:05:59,390 --> 00:06:04,610
array and every single time we thus run the open method we're going to flip.

93
00:06:04,610 --> 00:06:09,980
The value of it is open, which is going to force care icon to rerun each time we're going to get those

94
00:06:09,980 --> 00:06:13,070
updates and they're going to automatically reflect in the template.

95
00:06:13,430 --> 00:06:17,330
Once again, carrot icon in our former implementation was in array.

96
00:06:17,480 --> 00:06:22,700
Now Care Icon is a reactive object that's storing a value of an array.

97
00:06:22,850 --> 00:06:28,490
But remember behind the scenes view knows two paths past the value of the reactive object, not the

98
00:06:28,490 --> 00:06:29,810
whole reactive object itself.

99
00:06:30,080 --> 00:06:34,460
So the icon prop of the font awesome icon library expects an array.

100
00:06:34,580 --> 00:06:37,100
Don't worry, it's still going to get an array.

101
00:06:37,370 --> 00:06:42,920
Just because we're exporting a reactive object here with an array stored inside doesn't matter.

102
00:06:42,920 --> 00:06:47,810
Vue understands that it wants to get the inherent value and provide it here in the same way that it

103
00:06:47,810 --> 00:06:48,500
does for header.

104
00:06:48,500 --> 00:06:53,600
It gets the piece of text inside the reactive object in the same way as it does for is open where it

105
00:06:53,600 --> 00:06:58,070
gets the internal boolean stored inside that reactive object.

106
00:06:58,220 --> 00:06:59,240
Same idea here.

107
00:06:59,240 --> 00:07:04,040
This is still going to be an array even though we're returning a property representing a reactive object

108
00:07:04,040 --> 00:07:05,300
in our JavaScript section.

109
00:07:05,600 --> 00:07:08,330
So with that, if we transition back to our browser.

110
00:07:09,780 --> 00:07:11,820
Lo and behold, there is our original carrot.

111
00:07:11,820 --> 00:07:14,640
And take a look at what happens when I click the div.

112
00:07:14,790 --> 00:07:21,240
We're going to run the open method where that's going to invert the value of the is open ref, the reactive

113
00:07:21,240 --> 00:07:26,430
value, which in turn is going to get our computed function that we just wrote a minute ago to rerun,

114
00:07:26,580 --> 00:07:30,930
which is going to generate the new array argument for this icon right here, which is going to flip

115
00:07:30,930 --> 00:07:31,530
it to the new one.

116
00:07:31,710 --> 00:07:35,250
So when I click this, there we go, it's pointing up, click it again.

117
00:07:35,250 --> 00:07:36,180
It's pointing down.

118
00:07:36,330 --> 00:07:39,510
Same rules apply for any of these other accordions.

119
00:07:40,110 --> 00:07:45,600
So with that, we are very, very, very, very, very close to getting our original implementation

120
00:07:46,290 --> 00:07:54,150
and of course replacing it entirely with our composition API instead of our original options API.

121
00:07:54,330 --> 00:07:54,630
All right.

122
00:07:54,630 --> 00:07:55,680
So we're getting super close.

123
00:07:55,920 --> 00:07:59,310
Hopefully, this has been fun and we'll continue chipping away in the next lesson.
