1
00:00:00,330 --> 00:00:01,200
Alright.

2
00:00:01,200 --> 00:00:04,370
So I am pretty happy with the text input component.

3
00:00:04,380 --> 00:00:08,130
The one thing that I would like to add of course is a good test suite.

4
00:00:08,400 --> 00:00:09,840
So let's do that in this lesson.

5
00:00:10,140 --> 00:00:15,120
So I head to my file Explorer and right here I will look for my tests directory.

6
00:00:15,120 --> 00:00:18,090
And there we have a unit folder and a components folder.

7
00:00:18,270 --> 00:00:20,220
And in there we have a shared directory.

8
00:00:20,250 --> 00:00:22,840
And that's where I will create my new test file.

9
00:00:22,860 --> 00:00:25,540
So I'm going to mirror the directory structure of my components.

10
00:00:25,830 --> 00:00:27,390
And here I'll call this file.

11
00:00:27,420 --> 00:00:28,980
Text input dot.

12
00:00:28,980 --> 00:00:29,710
Test, dot.

13
00:00:29,730 --> 00:00:32,040
Just same protocol as always.

14
00:00:32,040 --> 00:00:34,440
I'm going to name the component and then the dot test.

15
00:00:34,440 --> 00:00:36,480
Dot just extension that just requires.

16
00:00:36,930 --> 00:00:38,130
Let's create that file.

17
00:00:38,140 --> 00:00:39,900
I'm going to drag it over here to the right.

18
00:00:39,900 --> 00:00:45,910
So I have it side by side with my implementation and let's work through the usual steps.

19
00:00:45,930 --> 00:00:50,100
So first up, we need to import either the mount or shallow mount function.

20
00:00:50,100 --> 00:00:51,210
I'm going to import mount.

21
00:00:51,900 --> 00:00:56,640
It really doesn't matter in this scenario because our component does not have any child components that

22
00:00:56,640 --> 00:00:57,180
it's rendering.

23
00:00:57,180 --> 00:00:58,170
It's just a plane input.

24
00:00:58,470 --> 00:00:59,970
So it doesn't really matter in this scenario.

25
00:00:59,980 --> 00:01:05,010
So I'm going to import mount and that is going to come from the test utils library, from the view organization.

26
00:01:05,310 --> 00:01:10,890
Then I need to import my component under test, which of course is my text input component that is going

27
00:01:10,890 --> 00:01:16,650
to come from my source directory, the components folder, the shared folder, and then my actual text

28
00:01:16,650 --> 00:01:18,870
input component itself for the file name.

29
00:01:19,380 --> 00:01:21,660
Then I'll use just describe function.

30
00:01:21,660 --> 00:01:23,700
We are describing the text input component.

31
00:01:23,700 --> 00:01:24,780
That's what we are testing.

32
00:01:25,080 --> 00:01:29,280
We'll provide an arrow function for the second argument and here I'll provide a test.

33
00:01:29,640 --> 00:01:30,270
So it.

34
00:01:30,690 --> 00:01:32,290
And what does it do?

35
00:01:32,310 --> 00:01:36,750
Well, I think a good description here that is generic and doesn't go too much into the implementation

36
00:01:36,960 --> 00:01:42,600
is something that we'll talk about what the component does and that component really communicates that

37
00:01:42,600 --> 00:01:44,130
the user has interacted with it.

38
00:01:44,370 --> 00:01:45,720
So how about something like this?

39
00:01:45,720 --> 00:01:50,850
It communicates that user has entered a character that way.

40
00:01:50,850 --> 00:01:55,110
I'm not getting super deep into things like emits or view specific things.

41
00:01:55,110 --> 00:01:58,050
I'm just saying, what's the responsibility of this text input component?

42
00:01:58,380 --> 00:02:04,290
And what I really want to test is that as we enter text into the input, I want it to be sending a message

43
00:02:04,290 --> 00:02:05,880
up with that information.

44
00:02:05,880 --> 00:02:11,070
We really want to test this thing right here because the rest of it is kind of a plain HTML element

45
00:02:11,070 --> 00:02:15,540
that doesn't really do much right to testing the classes here is kind of pointless because they're kind

46
00:02:15,540 --> 00:02:18,420
of fixed in stone is nothing like user specific about them.

47
00:02:18,630 --> 00:02:23,670
The real value of this component is as the user types of letter, it emits a message upward.

48
00:02:23,820 --> 00:02:26,460
And so that's kind of the core heart of what I want to test here.

49
00:02:26,880 --> 00:02:29,310
So let's go ahead and instantiate our component.

50
00:02:29,320 --> 00:02:34,710
So content wrapper, we're going to pass it into the mount function and that will be our text input

51
00:02:34,710 --> 00:02:35,160
component.

52
00:02:35,490 --> 00:02:42,570
And remember we have to props in this component placeholder is optional while model value is required.

53
00:02:42,570 --> 00:02:47,220
So the parent component that instantiate the text input needs to give it a model value prop.

54
00:02:47,400 --> 00:02:49,710
In this scenario, we don't have a parent component.

55
00:02:49,890 --> 00:02:55,260
So the way we simulate that is by providing that second configuration object to the mount function here

56
00:02:55,260 --> 00:03:00,180
we can provide a property of props and then within the object we provide the props.

57
00:03:00,180 --> 00:03:04,560
Our keys or our properties are the props and their values are the respective values.

58
00:03:04,770 --> 00:03:10,500
So for example, I can provide my model value prop and I could set it equal to a starter value of an

59
00:03:10,500 --> 00:03:11,160
empty string.

60
00:03:11,160 --> 00:03:11,460
Right.

61
00:03:11,640 --> 00:03:13,130
And this is totally fine.

62
00:03:13,140 --> 00:03:18,060
We talked earlier about how we don't want to customize things like the components data because that

63
00:03:18,060 --> 00:03:20,640
is reaching into the components implementation.

64
00:03:20,820 --> 00:03:27,810
In this case, we expect text input to be instantiated by a parent and be provided a model value prop.

65
00:03:27,960 --> 00:03:30,540
This is exactly how this component is meant to be used.

66
00:03:30,720 --> 00:03:35,340
So we are not violating the user contract or testing the component in any different way.

67
00:03:35,430 --> 00:03:39,090
We are actually working with it the way we expect it to be worked with in the real world app.

68
00:03:39,090 --> 00:03:42,780
So there's nothing wrong with adding the customization of the props to provide it.

69
00:03:43,560 --> 00:03:48,180
Okay, so what I'd like to do is to find the input element that is right here.

70
00:03:48,300 --> 00:03:52,920
I could use the data test attribute, but since this component is so simple, I'm okay with just searching

71
00:03:52,920 --> 00:03:54,480
for the plane input element.

72
00:03:54,480 --> 00:03:59,610
If expanded later, I might change the test, but for now I think it's okay to just search for input.

73
00:03:59,880 --> 00:04:00,720
So here I'm going.

74
00:04:00,720 --> 00:04:06,900
Just do wrapper defined and instead of providing a data test attribute or any attribute, I'm just going

75
00:04:06,900 --> 00:04:12,660
to provide a string of input and that tells vue test utils to look for the first HTML input element.

76
00:04:12,840 --> 00:04:18,840
So it's basically going to find this thing right here and assign that to an input constant.

77
00:04:19,140 --> 00:04:19,530
Okay.

78
00:04:19,800 --> 00:04:25,620
So at this point, I'd like to introduce you to a special method that is available on our wrapper object,

79
00:04:25,620 --> 00:04:31,320
which as a reminder is vue test utils taking our component and then wrapping it with a whole bunch of

80
00:04:31,320 --> 00:04:36,780
extra functionality such as defined method to query, such as the text, the method to get the components

81
00:04:36,780 --> 00:04:37,110
text.

82
00:04:37,260 --> 00:04:41,970
It's almost like an additional level or layer of functionality and that's the advantage of using Vue

83
00:04:41,970 --> 00:04:46,320
test utils is it gives us all that extra help with interacting with our component.

84
00:04:46,680 --> 00:04:53,040
Well, a available method on the wrapper object is emitted and what emitted will return is an object

85
00:04:53,040 --> 00:04:57,570
that shows every event that that component or that element has emitted.

86
00:04:57,900 --> 00:04:59,160
So let me show you this in action.

87
00:04:59,160 --> 00:04:59,490
I'm going to.

88
00:04:59,630 --> 00:05:00,290
Console.log.

89
00:05:01,280 --> 00:05:03,950
The result of calling emitted.

90
00:05:03,950 --> 00:05:05,500
I'm not going to call it on input.

91
00:05:05,510 --> 00:05:06,980
I'm going to call it on wrapper.

92
00:05:07,190 --> 00:05:08,720
So wrapper emitted right here.

93
00:05:09,800 --> 00:05:12,500
And let me go ahead and start our test runner.

94
00:05:12,500 --> 00:05:16,190
So right here, I open up my terminal and I'm going to start just in watch mode.

95
00:05:16,700 --> 00:05:23,210
So let's run NPM, run, test, colon watch and we're going to see before we interact with our input.

96
00:05:23,210 --> 00:05:28,100
Obviously there's no emitted events yet, so what we're going to get right here is an empty object.

97
00:05:28,130 --> 00:05:31,070
There have been no events that have been logged, so nothing has been tracked.

98
00:05:31,520 --> 00:05:37,970
So what we didn't need to do is to simulate the user entering a character into our text input, or more

99
00:05:37,970 --> 00:05:42,410
specifically, this specific input element within our text input component.

100
00:05:42,800 --> 00:05:49,790
Well, if we have an input element available, we can actually call a helper method on it called set

101
00:05:49,790 --> 00:05:50,390
value.

102
00:05:50,540 --> 00:05:57,530
And it does exactly as the name describes it sets a value inside that HTML input element the exact same

103
00:05:57,530 --> 00:06:01,850
way as us in the browser clicking into that input and typing character on our keyboard.

104
00:06:02,210 --> 00:06:06,710
So right here on my input, which is the reference to the native H2 now element, right?

105
00:06:06,860 --> 00:06:09,980
This is no longer our view wrapper object around our component.

106
00:06:10,160 --> 00:06:16,340
This is a reference to our specific HTML input that we have identified using the fine method on this

107
00:06:16,340 --> 00:06:16,520
one.

108
00:06:16,520 --> 00:06:21,740
I can call this set value method and this is our first time using this, I believe, and I can provide

109
00:06:21,740 --> 00:06:22,520
a sample value.

110
00:06:22,730 --> 00:06:26,420
So let's say the user types in a character like the Capital Letter N, right?

111
00:06:26,720 --> 00:06:32,570
So after this, what I'm going to do is console.log the exact same method invocation of wrapper dot

112
00:06:32,570 --> 00:06:35,090
emitted and we can compare the before and after.

113
00:06:35,540 --> 00:06:41,600
So here you can see we start out with the empty object and here is where we get the new output.

114
00:06:42,230 --> 00:06:46,340
So the way this works is that the properties of the object are the events.

115
00:06:46,580 --> 00:06:52,940
So notice we have an input event right here that is the native kind of browser like event that is kind

116
00:06:52,940 --> 00:06:57,050
of the native thing that happens when a user types a letter into the input box.

117
00:06:57,260 --> 00:07:02,690
But then because we're also going to automatically trigger this handle input method that we defined

118
00:07:02,870 --> 00:07:08,810
and because the component is going to emit this update model, value, message or event, we can see

119
00:07:08,810 --> 00:07:10,280
it present right here.

120
00:07:10,520 --> 00:07:14,930
So that is the property, that is the events that this component has emit.

121
00:07:15,410 --> 00:07:20,840
Now the value is going to be an array of arrays and that might be a little bit confusing.

122
00:07:20,840 --> 00:07:26,480
But the reason we need an outer array is because we may have multiple emissions.

123
00:07:26,660 --> 00:07:30,530
And what vue test utils is going to do is keep track of each one.

124
00:07:30,890 --> 00:07:37,130
The reason we need internal nested arrays is because a component may emit more than one thing at a time.

125
00:07:37,460 --> 00:07:42,800
So imagine right here we emitted not just the targeted value but another string.

126
00:07:42,800 --> 00:07:48,740
For example, in that case, this first internal array would store the end and then that second emitted

127
00:07:48,740 --> 00:07:49,130
value.

128
00:07:49,340 --> 00:07:52,670
So each internal array represents one emission.

129
00:07:52,790 --> 00:07:58,400
And all of the arguments that we passed to the Emit method and then the outer array represents every

130
00:07:58,400 --> 00:07:59,450
single emission event.

131
00:07:59,960 --> 00:08:06,230
So just to, to reiterate, the outer array stores, all of the events and each nested array represents

132
00:08:06,230 --> 00:08:07,160
one single event.

133
00:08:07,370 --> 00:08:12,530
A really easy way that I can show this to you is by pretending that we type in another character.

134
00:08:12,830 --> 00:08:18,500
So let's say after we set the value of and we type in another letter of why, so we expect now that

135
00:08:18,500 --> 00:08:20,840
the input is going to have an An and Y.

136
00:08:21,900 --> 00:08:23,580
So if I look here.

137
00:08:24,650 --> 00:08:30,290
We're now going to see here is our array representing two events because there are two nested arrays.

138
00:08:30,560 --> 00:08:32,480
There are two times the component emitted.

139
00:08:32,780 --> 00:08:37,760
The first array represents the arguments for the first emission, which is a single letter n, and then

140
00:08:37,760 --> 00:08:42,350
the second array represents the arguments for the second emission, which is and Y.

141
00:08:42,590 --> 00:08:44,360
And then we talk about arguments again.

142
00:08:44,360 --> 00:08:48,770
We're talking about the consecutive values that we pass right here to the Emit method.

143
00:08:49,010 --> 00:08:55,070
So for example, if I arbitrarily put a number to here and I save this, you're going to see that each

144
00:08:55,340 --> 00:08:59,810
array is going to have the actual emitted value, plus that extra argument of two that I provided right

145
00:08:59,810 --> 00:09:00,110
here.

146
00:09:00,260 --> 00:09:05,360
That's why we need an internal array, because the array can store any number of elements, just like

147
00:09:05,360 --> 00:09:07,820
we can emit any number of arguments.

148
00:09:07,820 --> 00:09:08,120
Right.

149
00:09:08,120 --> 00:09:11,210
While the outer array represents the entire collection of emissions.

150
00:09:11,750 --> 00:09:12,200
So.

151
00:09:13,920 --> 00:09:21,300
What we'd like to do, of course, is to compare this output array with what we expect the the messages

152
00:09:21,300 --> 00:09:23,340
to be that the component is going to emit.

153
00:09:23,700 --> 00:09:25,560
So here's what I propose we do.

154
00:09:25,770 --> 00:09:31,860
I propose that we reach into this infinite object right here, which we see here, get the array that

155
00:09:31,860 --> 00:09:38,640
is attached to update, model value and verify that it has the shape and structure of what we expect.

156
00:09:39,240 --> 00:09:41,360
So let's do a couple of things here.

157
00:09:41,370 --> 00:09:42,990
I'm going to remove my console.log.

158
00:09:44,630 --> 00:09:48,380
Let's say that I provide one more value here, which is, see.

159
00:09:48,410 --> 00:09:49,660
So we're going to get to NYC.

160
00:09:49,670 --> 00:09:52,700
Let's say the user is searching for a job in a location in New York City.

161
00:09:53,150 --> 00:09:59,030
So what I'd like to do now is I want to get my emitted method, I want to invoke it.

162
00:09:59,030 --> 00:10:04,760
So I'm going to get this thing right here and then I want to index or access this property.

163
00:10:04,970 --> 00:10:09,830
Now, this property is a little unique because it has a colon, so we can't just access it using dot

164
00:10:09,830 --> 00:10:13,790
syntax like so, but we can access it using square brackets and text.

165
00:10:13,790 --> 00:10:17,750
That is a totally normal syntax in JavaScript to access the property.

166
00:10:17,960 --> 00:10:24,890
So right here as a string, I will type that I want the update model value property from my emitted

167
00:10:24,890 --> 00:10:26,240
messages object right here.

168
00:10:26,570 --> 00:10:30,500
So now I'm going to get the value, which is the array of arrays on the right.

169
00:10:30,680 --> 00:10:33,710
And of course, I want to compare that to what I expect to see.

170
00:10:34,070 --> 00:10:40,520
So I'm going to expect that my messages array is going to be equal to an array that I specify when whenever

171
00:10:40,520 --> 00:10:45,920
we compare arrays and just we have to use the to equal matcher instead of the to be matcher because

172
00:10:45,920 --> 00:10:52,040
the to be matcher text restrict equality which also cares about object identity, which means the same

173
00:10:52,040 --> 00:10:53,540
object in the computer's memory.

174
00:10:53,690 --> 00:10:58,850
In this case, the structure of our arrays is the same, but there are two separate arrays.

175
00:10:59,000 --> 00:11:04,280
So in those situations, the two B matcher will fail because it's going to say it's not actually the

176
00:11:04,280 --> 00:11:07,220
same array and it's going to yield a failure.

177
00:11:07,430 --> 00:11:09,950
We want to compare the actual quality of the array.

178
00:11:09,960 --> 00:11:11,780
So what elements are storing?

179
00:11:11,780 --> 00:11:17,090
Are they the same even if those arrays are totally separate copies somewhere different in the computer's

180
00:11:17,090 --> 00:11:17,420
memory?

181
00:11:17,750 --> 00:11:20,750
So long story short, we need to use that to equal matcher here.

182
00:11:20,960 --> 00:11:23,640
And of course, we expect an array of arrays.

183
00:11:23,660 --> 00:11:24,920
So let's start with the outer.

184
00:11:25,370 --> 00:11:31,820
And then we expect a nested array for each individual emitted set of emitted arguments.

185
00:11:31,970 --> 00:11:36,530
So our very first array is going to be the very first emitted event when the user types an end.

186
00:11:36,770 --> 00:11:39,280
So we expect the character end, right?

187
00:11:39,290 --> 00:11:42,920
That's going to be our first array then for our second nested array.

188
00:11:43,100 --> 00:11:48,740
At that point, the emitted event and the value that we're going to provide right here should be and

189
00:11:48,740 --> 00:11:49,250
why.

190
00:11:50,150 --> 00:11:56,120
And finally, for the third array, for this third event right here, the text input component will

191
00:11:56,120 --> 00:11:58,160
emit again or should emit again.

192
00:11:58,310 --> 00:12:02,540
And we expect that event to target that value at that point will be NYC.

193
00:12:02,870 --> 00:12:08,600
So this should be the array of arrays of those consecutive messages that text input will emit.

194
00:12:09,020 --> 00:12:09,440
All right.

195
00:12:09,590 --> 00:12:14,510
And we're interacting with it three times just to be a little bit safe to make sure that it's not like

196
00:12:14,630 --> 00:12:17,580
deleting our old content or doing anything like that.

197
00:12:17,690 --> 00:12:24,140
We're just testing in a couple of times in succession or succession to make sure that everything is

198
00:12:24,140 --> 00:12:24,890
working just fine.

199
00:12:24,900 --> 00:12:30,830
So in sequence we expect and why NYC and we can see here that the test is indeed passing.

200
00:12:30,980 --> 00:12:35,420
And so for example, if we only interact with the component twice, we're going to get a failure because

201
00:12:35,420 --> 00:12:42,010
we're only going to have an array of two emitted values versus an array of three, so three interactions.

202
00:12:42,020 --> 00:12:44,450
So we have an array of three arrays and that's how we test it.

203
00:12:44,720 --> 00:12:46,850
And I think I am pretty happy with this.

204
00:12:46,850 --> 00:12:52,010
I think this is a good place to leave off and I think this covers the responsibility of what text input

205
00:12:52,010 --> 00:12:53,210
is supposed to do.

206
00:12:53,480 --> 00:12:57,560
So with that, we are good to wrap up the section which we will do in the very next lesson.
