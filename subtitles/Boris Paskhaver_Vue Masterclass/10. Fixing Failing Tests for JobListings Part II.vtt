WEBVTT
1
00:00:00.450 --> 00:00:00.960
Okay.

2
00:00:00.960 --> 00:00:06.270
So in the previous lesson, we took care of a lot of housekeeping in our job listings component.

3
00:00:06.540 --> 00:00:11.460
We imported our composable as we mark them out and we talked about how we could use them in the body

4
00:00:11.460 --> 00:00:11.970
of a test.

5
00:00:12.240 --> 00:00:16.260
Now that we have a better sense of how to do that, we can move a little bit quicker through the remaining

6
00:00:16.260 --> 00:00:16.650
tests.

7
00:00:16.950 --> 00:00:22.770
But one thing that's going to stay pretty common is the use of the three composable and marking them

8
00:00:22.770 --> 00:00:23.010
out.

9
00:00:23.310 --> 00:00:28.170
So what I'm going to do is copy the three lines I have right here, lines 25 through 27.

10
00:00:28.470 --> 00:00:34.350
And I'm basically going to copy and paste these lines to every follow up test and then adjust them accordingly

11
00:00:34.350 --> 00:00:35.760
for whatever that test needs.

12
00:00:36.180 --> 00:00:40.680
So let's scroll down to our next test right here, and I'm immediately going to paste these lines below.

13
00:00:41.910 --> 00:00:44.400
So this test cares about that.

14
00:00:44.400 --> 00:00:48.060
The component creates a job listing for a maximum of ten jobs.

15
00:00:48.270 --> 00:00:54.270
So as we can see from our former code here, back when we were using a mock store, we cared about having

16
00:00:54.300 --> 00:00:58.980
a number of filter jobs that was large enough to force more than a page of results.

17
00:00:59.280 --> 00:01:05.160
So, for example, here we had 15 jobs, we had an array of 15 values, and then we were validating

18
00:01:05.160 --> 00:01:08.970
that on page one, we were displaying exactly ten job listings.

19
00:01:09.240 --> 00:01:12.330
So the intent of this test can remain exactly the same.

20
00:01:12.480 --> 00:01:17.130
We can basically say, Hey, say you have 15 filter jobs, only show ten.

21
00:01:17.610 --> 00:01:22.120
So all we need to do is adjust our new code to be able to have that scenario.

22
00:01:22.380 --> 00:01:26.030
So we're no longer going to get our filter jobs from this store set up.

23
00:01:26.040 --> 00:01:30.030
We're going to get our filter jobs as the return value of use filter jobs.

24
00:01:30.240 --> 00:01:34.260
So all we need to modify is this value array right here to have 15 items in it.

25
00:01:34.470 --> 00:01:39.090
And if our new implementation does the exact same thing, then our tests should be able to pass once

26
00:01:39.090 --> 00:01:39.390
again.

27
00:01:39.750 --> 00:01:44.910
So right here, instead of having an empty array, I'm going to replicate the code that I have right

28
00:01:44.910 --> 00:01:45.210
here.

29
00:01:45.480 --> 00:01:46.620
So I'm going to say array.

30
00:01:47.520 --> 00:01:53.700
I'm going to create an array of 15 items and then I'm going to call the fill method and provide 15 empty

31
00:01:53.700 --> 00:01:54.200
objects.

32
00:01:54.210 --> 00:01:58.240
Because remember, we don't need real job objects if we simply have an array of 15.

33
00:01:58.260 --> 00:02:00.030
That should be enough to get it to work right.

34
00:02:00.300 --> 00:02:01.470
For use current page.

35
00:02:02.130 --> 00:02:05.910
If we want 15, let's say we're going to switch this up a little bit.

36
00:02:05.940 --> 00:02:10.020
Let's say we're going to be on page one because that's going to be the page where we're going to have

37
00:02:10.500 --> 00:02:11.640
ten jobs listed, right?

38
00:02:11.670 --> 00:02:14.010
Not page two, because that's going to be the last five.

39
00:02:14.280 --> 00:02:15.600
So let's say we're on page one.

40
00:02:15.810 --> 00:02:20.070
If that's the case for my use previous and next pages mock return value.

41
00:02:20.280 --> 00:02:24.870
I'll make the previous page undefined because we're not going to have a previous page before page one.

42
00:02:25.140 --> 00:02:27.540
And for my next page, I'm going to have page two.

43
00:02:28.980 --> 00:02:29.310
All right.

44
00:02:29.490 --> 00:02:33.570
So, again, just painting a story for a follow up reader that fits a real world scenario.

45
00:02:33.720 --> 00:02:34.800
We have 15 jobs.

46
00:02:34.920 --> 00:02:38.070
We're showing ten on the first page and we have a second page.

47
00:02:38.370 --> 00:02:42.300
So here's the part that's for me, the most fun part.

48
00:02:42.300 --> 00:02:47.250
It's being able to basically delete a lot of our former code and then compare the before and after.

49
00:02:47.520 --> 00:02:49.540
So do we care about query params any more?

50
00:02:49.560 --> 00:02:50.160
We do not.

51
00:02:50.490 --> 00:02:53.350
We don't care about our create out function that no longer exists.

52
00:02:53.370 --> 00:02:57.780
We don't care about our number of jobs and our store because we replace that functionality in our mock

53
00:02:57.780 --> 00:03:03.870
return value for our shallow amount and going to replace or rather remove these two arguments because

54
00:03:03.870 --> 00:03:04.740
they no longer exist.

55
00:03:05.850 --> 00:03:07.770
I'm still going to keep the remainder of the code the same.

56
00:03:07.950 --> 00:03:09.900
I'm going to focus on this test with fit.

57
00:03:10.230 --> 00:03:10.920
Save that.

58
00:03:11.220 --> 00:03:11.970
Let it run.

59
00:03:13.650 --> 00:03:14.910
And we could see it's going to pass.

60
00:03:15.120 --> 00:03:15.570
Beautiful.

61
00:03:15.570 --> 00:03:19.110
And we can see I think it can be argued that it is a little bit cleaner.

62
00:03:19.530 --> 00:03:19.830
All right.

63
00:03:19.830 --> 00:03:22.080
Let's move on to our next test.

64
00:03:22.080 --> 00:03:26.490
In fact, we're going to move on to our next two tests, and I'm going to offer us a wonderful piece

65
00:03:26.490 --> 00:03:26.850
of news.

66
00:03:27.180 --> 00:03:28.650
So take a look at these two tests.

67
00:03:28.680 --> 00:03:33.780
This is when query params, exclude page number and when query applet params include page number.

68
00:03:34.020 --> 00:03:35.040
We're basically testing that.

69
00:03:35.040 --> 00:03:41.040
We're displaying some page number on the page either whatever the query params tell us or one as a default.

70
00:03:41.340 --> 00:03:46.470
Well, the good news is this code was previously in our job listings component and now it exists in

71
00:03:46.470 --> 00:03:48.570
our totally separate use current page.

72
00:03:49.710 --> 00:03:50.510
A composable.

73
00:03:50.650 --> 00:03:52.020
Here's where we have that logic.

74
00:03:52.130 --> 00:03:54.710
And here is where we have the fallback of page one.

75
00:03:55.040 --> 00:04:00.800
The good news is we already have tests for the use current page composable that tests both of these

76
00:04:00.800 --> 00:04:02.030
paths of execution.

77
00:04:02.240 --> 00:04:04.190
Both of these separate branches of logic.

78
00:04:04.430 --> 00:04:10.310
So there's no more need to double test this in job listings, because from job listings perspective,

79
00:04:10.310 --> 00:04:13.700
all it cares about is it's going to talk to use current page.

80
00:04:13.850 --> 00:04:17.490
It's going to get a value from it, and it's going to render it right here on the page.

81
00:04:17.510 --> 00:04:21.110
Here it is, getting current page in the returned object and then somewhere above.

82
00:04:21.260 --> 00:04:23.570
It's also rendering current page right here.

83
00:04:23.750 --> 00:04:28.840
But it no longer cares about how use current page is getting that number or the complexity.

84
00:04:28.850 --> 00:04:32.600
That logic is tested elsewhere in a separate file for a separate function.

85
00:04:32.810 --> 00:04:38.180
So this functionality which we were previously testing, the component is now just one piece of functionality.

86
00:04:38.360 --> 00:04:41.270
So we no longer need to test these two tests.

87
00:04:41.300 --> 00:04:47.120
We're testing two variations, and now those two variations are isolated to our use current page composable.

88
00:04:47.390 --> 00:04:50.840
So what we can do is remove one of these tests and just adjust the other one.

89
00:04:51.170 --> 00:04:57.350
So for example, when I'm going to do here is simply remove my second test here and I no longer care

90
00:04:57.350 --> 00:05:02.520
about the describe situation, which is when create params exclude page number because it doesn't matter.

91
00:05:02.570 --> 00:05:05.000
This logic is now living in my composable.

92
00:05:05.150 --> 00:05:08.690
All I care about is displaying whatever page number the composable gives me.

93
00:05:09.020 --> 00:05:10.850
So what I'm going to do here is delete that.

94
00:05:10.850 --> 00:05:14.420
Describe delete my closing brackets here as well.

95
00:05:14.450 --> 00:05:15.080
Let's save that.

96
00:05:15.530 --> 00:05:19.730
And instead of saying display as page number one, I'm simply going to save displays page number.

97
00:05:19.850 --> 00:05:24.140
It displays some page number, which is obviously going to get from the composable.

98
00:05:24.410 --> 00:05:27.320
So I'm going to once again copy what we have above.

99
00:05:27.320 --> 00:05:30.920
Let's say I copy this set of three lines from before.

100
00:05:31.820 --> 00:05:32.690
Paste them right here.

101
00:05:33.230 --> 00:05:33.590
All right.

102
00:05:33.600 --> 00:05:36.040
Do we care about our filter jobs for this test?

103
00:05:36.050 --> 00:05:36.550
Not really.

104
00:05:36.560 --> 00:05:37.910
We just need to make sure we have an array.

105
00:05:38.270 --> 00:05:40.010
And just to keep things a little bit interesting.

106
00:05:40.010 --> 00:05:41.750
Let's say we are testing that.

107
00:05:41.750 --> 00:05:42.980
We are on page five.

108
00:05:43.220 --> 00:05:48.500
So if our current page is going to be page five, then our previous page is going to be four and our

109
00:05:48.500 --> 00:05:49.950
next page is going to be six.

110
00:05:50.180 --> 00:05:54.470
And ultimately, what we hope for is that the wrappers text will have page five.

111
00:05:54.920 --> 00:05:59.510
So to summarize, because I did move a little bit quickly, our use current page composable function

112
00:05:59.510 --> 00:06:03.980
which is being mocked out we're seeing on line 48 is going to return a value of five.

113
00:06:04.130 --> 00:06:09.140
How it does that logic we don't care about in this component, but if it gives me a value of five,

114
00:06:09.260 --> 00:06:15.170
then I want to make sure I see page five somewhere in my wrappers text that confirms the ultimate thing

115
00:06:15.170 --> 00:06:19.670
that this test was originally testing for, which is just the display of the page number.

116
00:06:19.850 --> 00:06:20.240
All right.

117
00:06:20.540 --> 00:06:22.880
So with that, we can once again clean up a lot of this logic.

118
00:06:22.880 --> 00:06:24.050
We don't need query params.

119
00:06:24.860 --> 00:06:28.970
We don't care about the route that is now being handled by our use current page composable.

120
00:06:29.150 --> 00:06:30.560
We don't care about a mock store.

121
00:06:30.770 --> 00:06:37.460
We can invoke create config with just two or without those two arguments and simply test the we're getting

122
00:06:37.460 --> 00:06:38.480
page five right.

123
00:06:38.570 --> 00:06:41.300
And a reader reading this can say, okay, where is five coming from?

124
00:06:41.420 --> 00:06:45.530
They can look at our mock return values and hopefully make the association of oh five is coming from

125
00:06:45.530 --> 00:06:45.770
here.

126
00:06:46.010 --> 00:06:48.470
So it must be talking to the use current page composable.

127
00:06:48.710 --> 00:06:52.580
If you want to add another assertion, you could also verify that use current page has been called,

128
00:06:52.790 --> 00:06:57.530
but this to me is enough to guarantee the interaction and it focuses mostly on how the user experiences

129
00:06:57.530 --> 00:06:58.040
the component.

130
00:06:58.050 --> 00:06:59.150
So I want to keep it like this.

131
00:06:59.510 --> 00:07:02.840
So let me focus on this test and we might discover that we may have an issue here.

132
00:07:03.620 --> 00:07:07.490
I'm going to focus on this test and we're going to discover that we are going to have a failure.

133
00:07:07.790 --> 00:07:09.230
So let me show you what that failure is.

134
00:07:09.620 --> 00:07:12.320
You can see that we're testing for the substring, page five.

135
00:07:12.590 --> 00:07:16.220
But here what we're getting is page followed by value five.

136
00:07:16.460 --> 00:07:21.140
So unfortunately, what's happening here is this is one scenario where our mock JavaScript object,

137
00:07:21.140 --> 00:07:27.620
our basic object with a value of five, is not good enough to play the role of a reactive object from

138
00:07:27.620 --> 00:07:27.980
Vue.

139
00:07:28.160 --> 00:07:34.490
Because whenever Vue takes a reactive object with a value property, it knows how to render it to the

140
00:07:34.490 --> 00:07:34.910
DOM.

141
00:07:35.060 --> 00:07:39.500
It does not know the same thing with our basic object with just a value property, right?

142
00:07:39.500 --> 00:07:41.690
So this is now no longer in our setup method.

143
00:07:41.840 --> 00:07:47.210
This is this interaction right here where it's taking a reactive object and rendering it right here.

144
00:07:47.300 --> 00:07:49.130
We are not giving it a reactive object.

145
00:07:49.130 --> 00:07:53.840
We are giving it a plain JavaScript object that we hoped was going to be good enough to play that role.

146
00:07:53.960 --> 00:07:55.970
But obviously this is no longer going to be good enough.

147
00:07:56.270 --> 00:07:57.490
So how do we fix this problem?

148
00:07:57.500 --> 00:08:02.090
Well, one really simple way we can do it is to simply give it a real reactive object.

149
00:08:02.360 --> 00:08:10.880
So what I can do is scroll all the way to the top of my file and right here I can import the ref function

150
00:08:10.880 --> 00:08:11.630
from view.

151
00:08:12.800 --> 00:08:18.080
And right as I scroll down right here, instead of mock returning a object with a value property, I'm

152
00:08:18.080 --> 00:08:22.280
going to give it an actual object of the value property, which is going to be a reactive object from

153
00:08:22.280 --> 00:08:25.040
view exactly as the template knows how to work with.

154
00:08:25.280 --> 00:08:27.140
And I'm just going to give it a value of five.

155
00:08:27.410 --> 00:08:31.910
So this is very similar to what we were just having, except we're giving a real view reactive object,

156
00:08:32.060 --> 00:08:36.200
which should be good enough when we're testing DOM interaction because we are going to actually talk

157
00:08:36.200 --> 00:08:39.380
about page five being rendered here, this logic right here.

158
00:08:39.530 --> 00:08:46.100
And so this is just unfortunately a scenario where we were not able to perfectly mock out the original

159
00:08:46.460 --> 00:08:47.660
solution going to save.

160
00:08:47.660 --> 00:08:48.860
This is just to show you that it does.

161
00:08:48.910 --> 00:08:49.210
Work.

162
00:08:51.440 --> 00:08:57.260
And another cool thing I do want to show you is if we actually simply return a value of five right here,

163
00:08:57.560 --> 00:08:58.820
this test will also work.

164
00:08:59.000 --> 00:09:02.990
And the reason is because if we return current page right here, we're going to get five.

165
00:09:03.170 --> 00:09:05.240
We're going to return five right here.

166
00:09:05.240 --> 00:09:10.880
And we're going to render it not as a reactive value, but still value rendered as a single one time

167
00:09:10.880 --> 00:09:14.780
render in the DOM, which should be good enough to test for our section of page five.

168
00:09:15.080 --> 00:09:21.590
The only reason I'm slightly leaning on providing a ref right here is because there is this displayed

169
00:09:21.590 --> 00:09:26.450
jobs computer function right here that is relying on current page value to run.

170
00:09:26.900 --> 00:09:30.470
And in order for it to have a value property, it can't just be the number five.

171
00:09:30.470 --> 00:09:33.830
It has to be a reactive object, or at least something with a value property.

172
00:09:34.130 --> 00:09:38.930
So to just avoid any confusion, I am going to stick with a view reactive object here, but five should

173
00:09:38.930 --> 00:09:39.520
in theory work.

174
00:09:39.860 --> 00:09:44.540
So with that this test is once again passing just fine.

175
00:09:44.540 --> 00:09:49.070
So let me just save it one more time to run and we should get a passing test suite.

176
00:09:49.400 --> 00:09:49.610
All right.

177
00:09:49.610 --> 00:09:51.230
So once again, moving right along.

178
00:09:51.230 --> 00:09:55.340
And I think in the very next lesson, we're going to be able to finish up all of our remaining failing

179
00:09:55.340 --> 00:09:55.700
tests.
