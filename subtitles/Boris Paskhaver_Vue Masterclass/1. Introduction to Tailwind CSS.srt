1
00:00:00,700 --> 00:00:03,460
Welcome to the next section of the course.

2
00:00:03,640 --> 00:00:10,780
In this section we're going to install the Tailwind CC Utility Library or CC framework and we're going

3
00:00:10,780 --> 00:00:16,180
to be using Tailwind to help us write really quick, easy CC styles throughout the course.

4
00:00:16,420 --> 00:00:18,880
Now you may be thinking about, Hey, this is a view course.

5
00:00:18,880 --> 00:00:24,400
I don't want to learn about all this extra stuff, but remember, at the end of the day, we're building

6
00:00:24,400 --> 00:00:27,490
a real world front end application.

7
00:00:27,490 --> 00:00:32,500
So we are going to need to style it so that it looks like the inspiration from which it's coming, the

8
00:00:32,500 --> 00:00:33,700
Google Careers website.

9
00:00:33,940 --> 00:00:37,660
So we are going to need to write CC styles at some point throughout the course.

10
00:00:37,840 --> 00:00:43,090
We're not going to obsess over it, but I think Tailwind is a really, really efficient, popular,

11
00:00:43,090 --> 00:00:45,730
modern way to do it, to write our systems.

12
00:00:45,910 --> 00:00:47,170
And it's going to be super simple.

13
00:00:47,200 --> 00:00:53,680
This was actually my very first project practicing and using Tailwind CC and I found it to be an absolute

14
00:00:53,680 --> 00:00:54,670
joy to use.

15
00:00:54,820 --> 00:00:59,890
And it's also another modern technology that you can add to your resume alongside view.

16
00:01:00,550 --> 00:01:05,890
So here we are on tailwinds official website and I want to talk to you quickly about what this library

17
00:01:05,890 --> 00:01:07,150
is and what it adds.

18
00:01:07,420 --> 00:01:12,940
So whenever you hear the words CSS library or CSS as framework, you might think of bootstrap.

19
00:01:13,180 --> 00:01:19,570
So bootstrap, if you haven't heard of it, is a library that basically gives you pre-configured what

20
00:01:19,570 --> 00:01:21,400
I call components styles.

21
00:01:21,700 --> 00:01:27,820
So for example, if you want to add bootstrap to your app, you might get a access class called Button.

22
00:01:28,180 --> 00:01:33,460
And when you apply that button style to a button in your app, it will apply a whole bunch of aesthetics

23
00:01:33,460 --> 00:01:34,180
to that button.

24
00:01:34,390 --> 00:01:40,750
For example, it might give it a blue background black text, it might give it rounded corners and a

25
00:01:40,750 --> 00:01:42,310
certain box shadow, etc..

26
00:01:42,550 --> 00:01:46,510
So the idea is that you don't have to build these pretty looking buttons out of the box.

27
00:01:46,660 --> 00:01:50,440
Bootstrap gives you a class to apply those styles automatically.

28
00:01:50,680 --> 00:01:57,400
So Bootstrap is focused on kind of the user facing components that an app might need, like a button

29
00:01:57,670 --> 00:02:03,520
or like a nav bar or like an alert or an icon or a card.

30
00:02:03,730 --> 00:02:08,320
Things that are actually part of the UI tailwind is not exactly the same thing.

31
00:02:08,320 --> 00:02:11,770
It doesn't give you these pre-built aesthetic styles out of the box.

32
00:02:12,040 --> 00:02:15,970
Rather, what it gives you is CSS utility classes.

33
00:02:16,210 --> 00:02:21,460
So imagine that we just have a library that gives us hundreds of different sized classes that we can

34
00:02:21,460 --> 00:02:24,640
apply as often as we want throughout our app.

35
00:02:24,850 --> 00:02:31,480
And all of these classes are super small and compact, and they typically do just one thing.

36
00:02:31,750 --> 00:02:36,580
So the idea behind Tailwind is that you apply a bunch of classes together, each one of them takes care

37
00:02:36,580 --> 00:02:40,570
of one thing, and then when they're all combined together, you have the styles you need.

38
00:02:40,810 --> 00:02:46,750
But you never actually have to worry about naming your own sizes, classes, gathering styles together,

39
00:02:46,840 --> 00:02:50,500
etc. We're going to see an example of how this all plays out in our app shortly.

40
00:02:50,680 --> 00:02:53,050
But I just want to give you a quick example here on this Web page.

41
00:02:53,230 --> 00:03:00,520
You can see it says here Tailwind is a utility first class framework packed with classes like Flex for

42
00:03:00,640 --> 00:03:02,530
Tech Center and Rotate 90.

43
00:03:02,710 --> 00:03:08,440
So immediately we can tell from these from these names, this isn't things like button or form or card.

44
00:03:08,650 --> 00:03:14,980
Rather, these are classes that apply direct CSR styles to whatever elements we add them to.

45
00:03:15,280 --> 00:03:22,240
So for example, the flex utility class from the Tailwind CSR Library will apply Display Flex.

46
00:03:22,540 --> 00:03:26,440
So it's a really easy way to add a Flexbox to a component.

47
00:03:26,440 --> 00:03:32,230
If you have a DIV and you just want to make it a flexbox, you do class equals flex and tailwind gives

48
00:03:32,230 --> 00:03:33,160
you that availability.

49
00:03:33,280 --> 00:03:39,250
So now you have a flexbox, you no longer have to come up with a semantic name for that box.

50
00:03:39,250 --> 00:03:43,090
Like you don't need to do header or center container or wrapper.

51
00:03:43,240 --> 00:03:47,770
All you need to know is I have this class called Flex that's coming to me from the Tailwind Library.

52
00:03:47,950 --> 00:03:50,530
I apply it to a did and now I have a Flexbox.

53
00:03:50,680 --> 00:03:50,890
Right.

54
00:03:51,160 --> 00:03:56,080
A similar idea here with Piti for Piti actually stands for padding top.

55
00:03:56,320 --> 00:03:59,260
You don't have to memorize all of these little nicknames.

56
00:03:59,270 --> 00:04:00,820
We'll talk more about them later.

57
00:04:01,000 --> 00:04:06,340
But the idea is, hey, if you have an element and you want to add padding to the top of it, you can

58
00:04:06,340 --> 00:04:08,620
do putty followed by some kind of number.

59
00:04:08,620 --> 00:04:11,800
So starting with T1, that's the smallest amount of padding.

60
00:04:11,950 --> 00:04:18,070
Then P2, P2 three, PD four, that adds padding to the top of whatever element you want.

61
00:04:18,340 --> 00:04:24,190
Similarly, you can apply the CSS utility class text center the tail was just going to give us and that's

62
00:04:24,190 --> 00:04:26,950
going to center align the text in an element.

63
00:04:27,280 --> 00:04:33,100
So you can see here, as I scroll down, when we write our code, it's going to be primarily writing

64
00:04:33,100 --> 00:04:36,220
a whole bunch of extra classes inside our H HTML.

65
00:04:36,520 --> 00:04:40,480
So the advantage of this is that we don't need to write a lot of custom Caesar's classes.

66
00:04:40,690 --> 00:04:45,640
We don't have to worry about things like nesting or sass or any of those kind of complexities, of course,

67
00:04:45,640 --> 00:04:48,560
that make it difficult to keep scope limited.

68
00:04:48,580 --> 00:04:53,700
We talked a little bit about Scope in the previous section when we talked about this scoped attribute

69
00:04:53,730 --> 00:04:55,720
view, and this is a similar idea.

70
00:04:55,900 --> 00:04:59,920
The idea is the Tailwind CFS library is going to give us pretty much.

71
00:05:00,170 --> 00:05:06,530
All the utility classes we need to style our elements in a way that's going to look like the Google

72
00:05:06,530 --> 00:05:07,220
Careers page.

73
00:05:07,400 --> 00:05:08,820
It's going to look just like this.

74
00:05:08,840 --> 00:05:13,220
We're going to have a DIV and we're just going to apply a whole bunch of helper classes to it.

75
00:05:13,440 --> 00:05:19,790
They're going to add different styles to it, and that's going to immediately format the page in a way

76
00:05:19,790 --> 00:05:20,450
that we want.

77
00:05:20,660 --> 00:05:24,800
Now, the best way to experience Tailwind, of course, is to see it in action.

78
00:05:24,980 --> 00:05:30,380
I certainly don't believe that I've made the case so far as to why this is a great framework.

79
00:05:30,410 --> 00:05:31,340
I personally love it.

80
00:05:31,550 --> 00:05:37,310
But I think as we continue writing success throughout the class, you're going to see how it helps us

81
00:05:37,310 --> 00:05:37,940
really quickly.

82
00:05:37,940 --> 00:05:43,970
Just get CSX up and running so that we don't have to worry about it and don't have to worry about cascading

83
00:05:43,970 --> 00:05:48,290
conflicts and all of those other things and can focus primarily on the view concepts, right?

84
00:05:48,590 --> 00:05:52,580
So this is a quick introduction to tailwind in the very next lesson, we're going to set it up in our

85
00:05:52,580 --> 00:05:53,360
View project.
