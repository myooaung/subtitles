WEBVTT
1
00:00:00.620 --> 00:00:01.430
Okay.

2
00:00:01.500 --> 00:00:07.620
Given that we've made some significant changes to our main NAV component, I think now is a good time

3
00:00:07.620 --> 00:00:08.880
to run our test suite.

4
00:00:09.180 --> 00:00:15.600
So right here, I'm going to run my whole test suite with the command NPM run test colon unit that is

5
00:00:15.600 --> 00:00:18.510
going to run every available test file in my code base.

6
00:00:18.780 --> 00:00:20.310
And we're going to see what's going on here.

7
00:00:21.090 --> 00:00:22.350
It's going to take a couple of seconds.

8
00:00:22.350 --> 00:00:26.550
And we do have one test suite that is failing with five failing tests.

9
00:00:26.790 --> 00:00:27.810
And if I scroll up.

10
00:00:29.330 --> 00:00:35.030
It may not be readily apparent in this output, but this type error tells us the issue cannot be properly

11
00:00:35.030 --> 00:00:36.560
state of undefined.

12
00:00:36.770 --> 00:00:40.970
And the only place in my main nav component, by the way, this is coming from May.

13
00:00:40.970 --> 00:00:47.390
Now, the only place in my main nav component where I have a reference to state is of course right here.

14
00:00:47.690 --> 00:00:50.690
So we are accessing state on something that is undefined.

15
00:00:50.900 --> 00:00:52.050
So why is this happening?

16
00:00:52.070 --> 00:00:58.100
Well, you can probably guess in our test suite, we don't have this global store property available

17
00:00:58.100 --> 00:01:02.000
on the this keyboard and thus we don't have access to state and this property.

18
00:01:02.300 --> 00:01:08.390
Just like when it comes to view router, our test suite has no clue that view exists in our app and

19
00:01:08.390 --> 00:01:11.300
that it's been added from our test suite perspective.

20
00:01:11.300 --> 00:01:16.400
It's mounting the main nav component in isolation, so it has no clue what this global variable is.

21
00:01:16.580 --> 00:01:21.080
So this evaluates to undefined and then it tries to access state on undefined.

22
00:01:21.080 --> 00:01:22.580
And we get this error right here.

23
00:01:22.820 --> 00:01:28.640
As I scroll up, you can see it's impacting quite a lot of tests and in case that error was not apparent

24
00:01:28.640 --> 00:01:33.710
enough, if I scroll further up, we'll see some additional errors that may tell us that that we have

25
00:01:34.310 --> 00:01:35.000
the same issue.

26
00:01:35.000 --> 00:01:40.550
For example, here property store was access during render but is not defined on instance.

27
00:01:40.550 --> 00:01:40.820
Right.

28
00:01:40.820 --> 00:01:44.780
That tells us that once again, the tests don't know what dollar sign store is.

29
00:01:45.140 --> 00:01:48.110
So let me open up may nav dot test.

30
00:01:49.130 --> 00:01:55.700
And as you can probably guess by now, knowing everything that I've said many times, my personal preference

31
00:01:55.700 --> 00:01:58.430
is to mark out the View Store.

32
00:01:58.460 --> 00:02:01.930
My personal preference is to replace it with a mock object.

33
00:02:01.940 --> 00:02:06.740
I can play the role because that makes the component much easier to test and it decouples us from the

34
00:02:06.740 --> 00:02:07.790
real implementation.

35
00:02:08.150 --> 00:02:14.540
With that said, I want to show you an alternate approach first of how we can actually test the component

36
00:02:14.540 --> 00:02:17.030
using a real world view store.

37
00:02:17.300 --> 00:02:17.630
All right.

38
00:02:17.840 --> 00:02:23.090
So what we're going to do here in our main nav test file is we're going to import the create store function

39
00:02:23.090 --> 00:02:23.690
from view.

40
00:02:24.380 --> 00:02:30.050
This is the exact same function that we used in our actual app in the index touch's file in the store

41
00:02:30.050 --> 00:02:30.440
folder.

42
00:02:30.740 --> 00:02:34.820
So here I'm going to import that file or that export to be more specific.

43
00:02:35.150 --> 00:02:39.740
And I'm going to modify my create config factory function right here to take a store.

44
00:02:41.110 --> 00:02:45.790
And the way that we can figure something that is not a mock because keep in mind, we're going to be

45
00:02:45.790 --> 00:02:47.710
using the real view stored here.

46
00:02:47.740 --> 00:02:51.520
We're not going to be using a stand in or a replacement or a mock.

47
00:02:51.640 --> 00:02:53.410
We're going to be using the real story here.

48
00:02:53.590 --> 00:02:59.260
So what we need to do is tell the component, Hey, here is the real view store that I want you to register

49
00:02:59.260 --> 00:02:59.980
with the component.

50
00:03:00.100 --> 00:03:03.100
So it has an automatic reference to Dollar Sign Store.

51
00:03:03.430 --> 00:03:08.140
The way we do that is on this global object that is part of our configuration object.

52
00:03:08.290 --> 00:03:15.310
We can add a plugins property and we set plugins equal to an array of the various plugins that we want

53
00:03:15.310 --> 00:03:17.350
to provide to the component.

54
00:03:17.470 --> 00:03:20.380
And a plugin is any extension from a library.

55
00:03:20.380 --> 00:03:23.740
So view router is an example, view acts as an example, etc..

56
00:03:24.040 --> 00:03:29.110
So right here, whatever store I get into this create config factory function, which is going to be

57
00:03:29.110 --> 00:03:30.370
a real view store.

58
00:03:30.550 --> 00:03:33.010
I'm just going to provide into this plugins array.

59
00:03:33.820 --> 00:03:34.240
All right.

60
00:03:34.570 --> 00:03:37.330
So below I can show you a simple example of how this is going to work.

61
00:03:37.330 --> 00:03:42.040
In our very first test right here, I'm going to create a real view X store.

62
00:03:42.250 --> 00:03:45.430
We have our create store function so we can simply invoke it.

63
00:03:45.580 --> 00:03:50.530
And normally this is where we would pass our configuration, where we can specify the store, state

64
00:03:50.680 --> 00:03:56.050
the mutations, etc. But I just want it to be a very simple store with nothing in it that is totally

65
00:03:56.050 --> 00:04:00.880
valid because I want to have the minimal store that I need in order to get the test to pass right.

66
00:04:01.210 --> 00:04:06.310
So for the purposes of displaying the company name, that assertion has nothing to do with the store.

67
00:04:06.320 --> 00:04:08.370
That's a totally separate part of our component.

68
00:04:08.620 --> 00:04:14.410
The only thing I need is some kind of store right here so that this evaluation does not return undefined.

69
00:04:14.410 --> 00:04:16.900
And neither does this that store, that state.

70
00:04:17.110 --> 00:04:24.520
As soon as I plug in a real view X store, the test will plug in the view store right here, and thus

71
00:04:24.520 --> 00:04:28.060
this property will exist, is logged in, will not exist.

72
00:04:28.060 --> 00:04:30.280
But that will be fine because it won't cause a failure.

73
00:04:30.400 --> 00:04:32.360
It'll simply evaluate to undefined.

74
00:04:32.680 --> 00:04:38.080
So right here I'm going to sign this to a constant called store and I'm going to pass the store into

75
00:04:38.080 --> 00:04:41.290
my create config factory function, which I'm using here in line.

76
00:04:41.620 --> 00:04:43.720
So I'm going to pass store in here.

77
00:04:43.900 --> 00:04:44.200
All right.

78
00:04:44.380 --> 00:04:47.530
I'm going to repeat this exact same logic for every single test.

79
00:04:47.530 --> 00:04:48.820
Let's see how far that gets us.

80
00:04:49.120 --> 00:04:54.880
So I'm going to copy this line, bring it below in this test pass and store and to create config scroll

81
00:04:54.880 --> 00:04:55.990
down here.

82
00:04:55.990 --> 00:05:02.470
In this test, I create a store, pass it into our config function right here, create a store, pass

83
00:05:02.470 --> 00:05:03.550
an entire config function.

84
00:05:04.030 --> 00:05:08.800
And finally for this last test, create a new store, pass it into our config function.

85
00:05:09.310 --> 00:05:09.580
All right.

86
00:05:09.580 --> 00:05:12.370
And then I'm going to run NPM, run, test, colon, watch.

87
00:05:12.370 --> 00:05:17.560
So we run in watch mode because I predict we are going to need to make a few more changes after this.

88
00:05:18.610 --> 00:05:21.340
So as a reminder, we had five failing tests.

89
00:05:21.550 --> 00:05:22.870
Now we have two.

90
00:05:23.020 --> 00:05:28.090
So simply creating a store and giving the view x component some kind of reference here automatically

91
00:05:28.180 --> 00:05:31.510
was enough to get three of those failures to go away.

92
00:05:31.780 --> 00:05:33.910
Now let's explore the ones that are still failing.

93
00:05:33.910 --> 00:05:34.880
If I scroll up here.

94
00:05:35.170 --> 00:05:37.680
It's going to be the last two right here.

95
00:05:37.690 --> 00:05:42.610
The ones that are under this described block of when a user logs in, when a user logs in, it displays

96
00:05:42.610 --> 00:05:47.350
the user profile picture and when the user logs in, it displays the sub navigation menu with additional

97
00:05:47.350 --> 00:05:47.920
information.

98
00:05:48.190 --> 00:05:54.820
So now these renderings, of course, are based on the user being logged in, which is a piece of information

99
00:05:54.820 --> 00:05:57.100
that exists in our view store.

100
00:05:57.310 --> 00:06:03.460
So we simply cannot give an empty store in this scenario because we need an actual is logged in property

101
00:06:03.460 --> 00:06:10.090
in order for this computed property to evaluate to true for our view to render that element in our HTML

102
00:06:10.090 --> 00:06:12.460
template and for this to evaluate to be invalid.

103
00:06:12.820 --> 00:06:14.880
So what I want to do is simplify these tests.

104
00:06:14.890 --> 00:06:20.080
I know I said earlier that I generally prefer to have a test that behaves just like the user.

105
00:06:20.080 --> 00:06:24.940
So I'd love to render a button, have the user click it and then verify that something else appears.

106
00:06:25.150 --> 00:06:29.860
But given that it's a little bit more of a complex setup, I'm going to kind of flip that script around.

107
00:06:30.070 --> 00:06:35.530
What I'm going to say is let's assume we have a view store in a given shape with a certain property,

108
00:06:35.530 --> 00:06:41.350
with a certain value, and if the component has a store with that property in that value, here's what

109
00:06:41.350 --> 00:06:42.530
we should expect to see.

110
00:06:42.850 --> 00:06:45.820
So here's where my code is going to look like in this test.

111
00:06:46.000 --> 00:06:50.860
All I really want to test for is that I'm displaying the user profile image, so I'm going to get rid

112
00:06:50.860 --> 00:06:53.770
of all of this action related to the log in button and clicking it.

113
00:06:54.100 --> 00:07:00.220
All right, I'm going to remove this logic as well for checking for the profile image not to exist before

114
00:07:00.220 --> 00:07:00.880
the button click.

115
00:07:01.390 --> 00:07:01.870
All right.

116
00:07:02.140 --> 00:07:04.950
And so here I'm going to need to add a constant for profile image.

117
00:07:05.290 --> 00:07:10.870
And here I'm going to configure a store that fits the criteria that I need in order to display a user

118
00:07:10.870 --> 00:07:11.650
profile picture.

119
00:07:11.950 --> 00:07:17.290
So right here, I'm going to provide an object and I'm going to configure this view store in this test

120
00:07:17.290 --> 00:07:21.340
the exact same way that we configured our actual app view store.

121
00:07:21.640 --> 00:07:29.440
So as a reminder, we provide a state method inside here and that state method returns an object and

122
00:07:29.440 --> 00:07:32.290
that object comprises the global view state.

123
00:07:32.500 --> 00:07:38.890
And of course, in order for the user profile picture to be displayed, I need this computed property

124
00:07:38.890 --> 00:07:39.400
to return.

125
00:07:39.400 --> 00:07:39.940
True.

126
00:07:40.210 --> 00:07:43.510
So I need my state to have and is logged in property.

127
00:07:44.530 --> 00:07:46.150
And I need that property to be true.

128
00:07:46.990 --> 00:07:47.320
All right.

129
00:07:47.590 --> 00:07:50.260
So I'm going to create the store with the specific settings I need.

130
00:07:50.290 --> 00:07:52.470
I'm going to pass it into my configuration.

131
00:07:52.480 --> 00:07:56.800
I'm going to mount the component, and then I'm going to test that the profile image is successfully

132
00:07:56.800 --> 00:07:59.730
render and now we can see that test is passing.

133
00:07:59.740 --> 00:08:05.230
So this is a is a way that we are testing that the View Store is correctly interacting with our component

134
00:08:05.230 --> 00:08:07.600
and we are using indeed a real view store.

135
00:08:07.810 --> 00:08:12.700
I promise in the very next lesson, we're going to come back to testing that click of the action button,

136
00:08:12.820 --> 00:08:14.830
which is the logic that we removed from this test.

137
00:08:15.190 --> 00:08:18.640
Let's do the exact same operation for this second test right here.

138
00:08:18.880 --> 00:08:22.060
So this is testing for the display of the sub navigation menu.

139
00:08:22.300 --> 00:08:23.730
It's going to be the exact same approach.

140
00:08:23.740 --> 00:08:25.900
I'm going to remove the click of the login button.

141
00:08:26.380 --> 00:08:28.030
I don't really care about checking.

142
00:08:28.180 --> 00:08:29.620
The sun doesn't exist.

143
00:08:29.620 --> 00:08:35.350
Before I click the button right here, I'm going to assign this to a contact and basically we need the

144
00:08:35.350 --> 00:08:40.810
exact same store as we have above because we need the is logged in property set to true in order to

145
00:08:40.810 --> 00:08:42.730
display the sub navigation menu.

146
00:08:42.970 --> 00:08:49.600
As a reminder, both these sub nav right here and our profile image right here are using the VRF directive

147
00:08:49.600 --> 00:08:52.000
connected to the is logged in computed property.

148
00:08:52.180 --> 00:08:55.000
So they're both referencing the same part of the View X Store.

149
00:08:55.240 --> 00:08:59.380
So I'm going to copy this store creation from this test and I'm going to put it right here.

150
00:09:00.400 --> 00:09:01.090
Save that.

151
00:09:03.340 --> 00:09:05.110
And now all of our tests pass.

152
00:09:05.320 --> 00:09:05.650
All right.

153
00:09:05.830 --> 00:09:09.850
So this is a way that we can test our component using a real view store.

154
00:09:10.090 --> 00:09:14.500
And the benefit of this approach, even though we are coupling ourselves with the real view implementation,

155
00:09:14.500 --> 00:09:17.800
is we can feed in a smaller version of the store still.

156
00:09:17.950 --> 00:09:21.730
We can still follow many of the same principles that we talked about earlier in the course.

157
00:09:21.970 --> 00:09:27.310
For example, if our real life store has 20 properties in our test, we don't need to create a store

158
00:09:27.310 --> 00:09:28.300
with those 20 properties.

159
00:09:28.510 --> 00:09:31.840
We just need to create a store with the properties we care about.

160
00:09:32.050 --> 00:09:36.970
In this case, is logged in is the only property that needs to exist in the store in order for this

161
00:09:36.970 --> 00:09:38.110
component to work.

162
00:09:38.230 --> 00:09:41.070
So that's the only one that I'm going to provide in this test.

163
00:09:41.230 --> 00:09:44.710
And this will hold true no matter what my real store looked like.

164
00:09:44.710 --> 00:09:50.320
If I had 20 other properties, if I had 20 other mutations, etc. I don't need to have all those mutations

165
00:09:50.320 --> 00:09:50.620
here.

166
00:09:50.830 --> 00:09:52.480
I don't need to have all those properties here.

167
00:09:52.630 --> 00:09:59.290
I just need the bare minimum that I need in order for for this test to pass and to assert that I'm delivering

168
00:09:59.290 --> 00:10:01.180
the user value that I promise here.

169
00:10:01.570 --> 00:10:01.900
All right.

170
00:10:02.050 --> 00:10:06.100
And then, of course, in a couple lessons, I'm going to show you how we can solve this problem with

171
00:10:06.100 --> 00:10:08.470
a mock store with a simpler JavaScript object.

172
00:10:08.740 --> 00:10:13.290
One more thing that we can add in this lesson that I just noticed, we are no longer using any kind

173
00:10:13.300 --> 00:10:17.630
of of weight a weight syntax so we can remove this async keyword right here.

174
00:10:17.650 --> 00:10:23.690
There's nothing asynchronous going on and we can do the exact same thing in the function or test above.

175
00:10:23.710 --> 00:10:24.430
Let me save that.

176
00:10:24.430 --> 00:10:25.540
See if it still works.

177
00:10:26.490 --> 00:10:27.090
And it does.

178
00:10:27.360 --> 00:10:30.040
And that is all there is to cover in this lesson.

179
00:10:30.060 --> 00:10:31.620
So I will see you in the next one.
