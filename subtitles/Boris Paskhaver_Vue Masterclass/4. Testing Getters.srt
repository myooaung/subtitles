1
00:00:00,390 --> 00:00:01,220
Okay.

2
00:00:01,230 --> 00:00:05,760
So in the previous lesson, we created our first getter of unique organizations.

3
00:00:06,000 --> 00:00:09,780
So now let's add a complementary test for that method.

4
00:00:10,080 --> 00:00:16,290
So as a reminder, all of the tests for our view X store constructs are stored in index that test,

5
00:00:16,290 --> 00:00:20,550
that gas, that file is located in tests unit store.

6
00:00:20,760 --> 00:00:25,920
And currently we have all of our tests here for the state, for the mutations and for actions.

7
00:00:26,220 --> 00:00:28,340
Maybe later on we'll think about splitting it up.

8
00:00:28,350 --> 00:00:31,500
But for now, let's put our getter tests in here as well.

9
00:00:31,890 --> 00:00:35,970
So at the very top here, we're currently importing state mutations and actions.

10
00:00:35,970 --> 00:00:40,980
Let's also import getters, which is going to represent this object that we created and exported in

11
00:00:40,980 --> 00:00:41,790
the previous lesson.

12
00:00:42,060 --> 00:00:46,740
And while we're at it, let's make all of these imports alphabetical just because I think it's going

13
00:00:46,740 --> 00:00:48,210
to make it a little bit easier to read.

14
00:00:48,570 --> 00:00:50,550
So right here, it's going to be actions.

15
00:00:51,770 --> 00:00:56,870
Then getters and then mutations and then state is our final one.

16
00:00:57,940 --> 00:00:58,270
All right.

17
00:00:58,270 --> 00:01:00,940
So I'm going to create a new describe block and let's do it.

18
00:01:00,970 --> 00:01:04,000
How about after mutations and before actions?

19
00:01:04,330 --> 00:01:07,750
So right here, I'm going to describe my getters.

20
00:01:08,870 --> 00:01:10,820
That will be a top level describe.

21
00:01:11,000 --> 00:01:17,090
And then here in the arrow function I'll provide another describe a nested context to describe the getter

22
00:01:17,090 --> 00:01:17,870
that I care about.

23
00:01:17,870 --> 00:01:23,540
In this case, I want to test unique organizations which I created in the previous lesson.

24
00:01:24,740 --> 00:01:25,100
Okay.

25
00:01:25,100 --> 00:01:27,110
And what is the responsibility of this letter?

26
00:01:27,500 --> 00:01:30,440
It finds unique organizations.

27
00:01:31,900 --> 00:01:33,760
From List of jobs.

28
00:01:34,450 --> 00:01:39,310
Again, trying to be pretty ignorant about the implementation, just describing the user value.

29
00:01:39,790 --> 00:01:40,160
Okay.

30
00:01:40,360 --> 00:01:41,590
So what do we need to test?

31
00:01:41,620 --> 00:01:47,170
We need a test that we can invoke this unique organization's method, pass it a state object.

32
00:01:47,380 --> 00:01:49,330
And what are the requirements of that state object?

33
00:01:49,420 --> 00:01:54,460
Well, it just needs to have a jobs property that needs to be an array or something, at least that

34
00:01:54,460 --> 00:01:55,870
supports the for each method.

35
00:01:56,260 --> 00:02:02,050
And as we iterate over that array of jobs, a job is simply an object that has a property called organization.

36
00:02:02,230 --> 00:02:04,630
That's all we need in order for this test to be run.

37
00:02:05,020 --> 00:02:06,790
And that's all we need in our test.

38
00:02:07,030 --> 00:02:12,040
So just because our state has a property like is logged in this test shouldn't really worry about it.

39
00:02:12,050 --> 00:02:13,240
It really doesn't care about it.

40
00:02:13,250 --> 00:02:17,560
It just needs a state that is good enough for the purposes of testing this getter in isolation.

41
00:02:17,740 --> 00:02:20,980
So always go with the simplest test setup that you can see right here.

42
00:02:20,980 --> 00:02:27,940
I'm going to define a sample state of a bookstore, and it's just going to be a simple JavaScript object.

43
00:02:28,030 --> 00:02:29,530
What property do we need on it?

44
00:02:29,560 --> 00:02:31,910
Well, right here we're going to be accessing jobs.

45
00:02:31,930 --> 00:02:35,260
So we need a minimum of a jobs property, and that needs to be an array.

46
00:02:36,130 --> 00:02:38,410
And what do the objects in the array need to have?

47
00:02:38,440 --> 00:02:42,310
They need to have an organization property, because that's what I'm accessing right here.

48
00:02:42,730 --> 00:02:46,600
So I'm going to create an object and I'm going to give it an organization property.

49
00:02:46,990 --> 00:02:48,940
And let's set that equal to something like Google.

50
00:02:50,030 --> 00:02:55,490
So again, do we need all of the additional properties that come with a job object in the real world?

51
00:02:55,520 --> 00:02:58,040
Our job objects will, of course, have those properties.

52
00:02:58,250 --> 00:03:01,070
But for the purposes of testing this method, no, we don't.

53
00:03:01,070 --> 00:03:05,720
We don't want to make it more confusing by adding nine other job properties that we don't care about.

54
00:03:05,930 --> 00:03:08,360
All this getter cares about is having an organization.

55
00:03:08,360 --> 00:03:10,340
That's all I'm going to give it in this sample object.

56
00:03:10,760 --> 00:03:14,510
So below I'm going to copy this thing and create another object.

57
00:03:14,510 --> 00:03:18,530
And let's give it another company organization or like let's say Amazon.

58
00:03:18,800 --> 00:03:23,360
And then just to make sure that I'm properly removing duplicates, I'm going to add one more final object

59
00:03:23,480 --> 00:03:27,860
and give it the exact same organization of Google that just is just going to verify that we are, in

60
00:03:27,860 --> 00:03:30,200
fact, removing all of those duplicate values.

61
00:03:30,560 --> 00:03:33,950
So what I'm going to do is I'm going to create a contact call result.

62
00:03:35,270 --> 00:03:36,320
And how do we test that?

63
00:03:36,320 --> 00:03:37,640
The getter does what it's supposed to do.

64
00:03:37,640 --> 00:03:40,070
We simply invoke it as a plain JavaScript method.

65
00:03:40,070 --> 00:03:42,290
No need to invoke the idea of UEC store.

66
00:03:42,470 --> 00:03:45,320
We can simply test that as a regular bit of JavaScript functionality.

67
00:03:45,680 --> 00:03:47,180
So we have our getters object.

68
00:03:47,420 --> 00:03:51,770
Our Getters Object has a method on it called unique organizations.

69
00:03:51,920 --> 00:03:55,760
That Unique Organizations Method expects a object that we call state.

70
00:03:55,760 --> 00:03:59,680
It can be any object, obviously in the real world that's going to be in the U.S. store state.

71
00:03:59,900 --> 00:04:04,610
But for our sake, it can be the state object above because the state object above is good enough.

72
00:04:04,610 --> 00:04:09,200
It has the exact properties that we care about to be able to play the role of a view store or a view

73
00:04:09,320 --> 00:04:11,930
state to be more specific for the purposes of this test.

74
00:04:12,200 --> 00:04:14,990
So what do we expect to get back from this method?

75
00:04:14,990 --> 00:04:18,230
In our results constant, we expect it to be a set.

76
00:04:18,890 --> 00:04:20,780
So right here expect result to equal.

77
00:04:21,560 --> 00:04:25,790
So what I can do here is I can provide the new set syntax in line.

78
00:04:26,000 --> 00:04:31,280
And one way that we can populate a set when we're creating it instead of consistently invoking the ad

79
00:04:31,280 --> 00:04:36,620
method, is we can provide the set constructor function with an array representing the values that we

80
00:04:36,620 --> 00:04:37,580
want that set to hold.

81
00:04:37,910 --> 00:04:44,660
So I'm going to have three organizations, but I expect my final return set to have only two elements,

82
00:04:44,660 --> 00:04:44,930
right?

83
00:04:45,110 --> 00:04:47,330
Because we are prohibiting duplicates.

84
00:04:47,540 --> 00:04:52,340
So even though Google is listed twice above, I only want it listed at once in the set, which makes

85
00:04:52,340 --> 00:04:52,640
sense.

86
00:04:52,820 --> 00:04:59,480
So our final set should have the values Google and Amazon, and that's going to verify that our getter

87
00:04:59,480 --> 00:05:03,620
is doing exactly what it's supposed to do, that it's iterating over the correct property, that it's

88
00:05:03,620 --> 00:05:07,790
accessing the right property on each individual object, and that it's removing duplication.

89
00:05:07,820 --> 00:05:11,990
That's exactly the heart of what our getter is doing, and that's exactly the heart of what our test

90
00:05:11,990 --> 00:05:14,330
is testing right down to the return value.

91
00:05:14,690 --> 00:05:17,510
So I'm going to save this and let's go up here.

92
00:05:17,510 --> 00:05:19,250
Let's open up a new terminal window.

93
00:05:19,520 --> 00:05:27,920
And as always, we can run everyone's favorite command and PM run test colon watch and we're going to

94
00:05:27,920 --> 00:05:30,080
run the tests since the last commit.

95
00:05:30,080 --> 00:05:34,790
For me, it's going to be only our new one and we can see that our new getter test is passing.

96
00:05:35,060 --> 00:05:38,600
Now, as always, I just want to be extra confident that I'm testing correctly.

97
00:05:38,600 --> 00:05:42,920
So one way we can make this fail, of course, is by getting rid of a sample line like this one.

98
00:05:43,100 --> 00:05:47,960
This prevents us from iterating and just returns an empty set, and that at least should give me a failing

99
00:05:47,990 --> 00:05:51,920
test, which is good, because it's verifying that our test is doing everything as it should.

100
00:05:52,160 --> 00:05:55,250
So right here we are expecting in our test a set of two elements.

101
00:05:55,250 --> 00:05:56,510
Instead of we're getting an empty set.

102
00:05:56,690 --> 00:05:58,700
Everything here is working exactly as it should.

103
00:05:58,970 --> 00:06:01,010
And let me again show you the benefits of testing.

104
00:06:01,190 --> 00:06:05,180
Let's imagine that I have this line right here, but I accidentally this type organization.

105
00:06:05,360 --> 00:06:08,120
So maybe at the very end, I forget the end right here and save this.

106
00:06:08,270 --> 00:06:13,580
Our test will perfectly capture that because a property on a JavaScript object will return undefined.

107
00:06:13,580 --> 00:06:15,380
If it does not exist but not a problem.

108
00:06:15,380 --> 00:06:18,770
Our test will say, hey, this is a set that should have Amazon and Google.

109
00:06:18,770 --> 00:06:22,400
It's now a set that only has undefined that tells us that something has gone wrong.

110
00:06:22,490 --> 00:06:26,420
And we can see here, oh yeah, my organization property actually should have an end at the end.

111
00:06:26,810 --> 00:06:31,940
So once again, tests can prove super helpful to verify that we are testing exactly what we want and

112
00:06:31,940 --> 00:06:34,430
that our functionality is still present in our code.

113
00:06:34,790 --> 00:06:36,830
All right, so now we have written a letter.

114
00:06:36,830 --> 00:06:39,050
We have wired up our getters to out of the store.

115
00:06:39,140 --> 00:06:41,030
We have tested our getters as plain methods.

116
00:06:41,180 --> 00:06:45,200
I think it's now time to see how we can use the getter in a view component.

117
00:06:45,200 --> 00:06:46,880
We're going to do that in the very next lesson.
