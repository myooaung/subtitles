WEBVTT
1
00:00:00.490 --> 00:00:01.280
Okay.

2
00:00:01.290 --> 00:00:07.500
So the next thing that I'd like to do is to write a test suite for our job filters, sidebar organizations

3
00:00:07.500 --> 00:00:07.950
component.

4
00:00:08.220 --> 00:00:10.950
We actually don't have a test file at all for this.

5
00:00:11.130 --> 00:00:15.330
So let's go ahead and created and then test the logic we implemented in the previous lesson.

6
00:00:15.720 --> 00:00:21.420
So right here in my file Explorer, I'm going to head to my tests unit components directory.

7
00:00:21.630 --> 00:00:27.090
And here I actually want to create a folder to mirror the directory structure that I have here for my

8
00:00:27.090 --> 00:00:27.630
component.

9
00:00:27.900 --> 00:00:32.030
So this component is actually going to be within job results.

10
00:00:32.040 --> 00:00:37.950
And in here I want to add an additional folder called Job Filters Sidebar.

11
00:00:38.310 --> 00:00:44.580
And in that folder, I want to create my test file, which will have the component name, job filters,

12
00:00:44.580 --> 00:00:46.320
sidebar organizations.

13
00:00:46.560 --> 00:00:53.760
However, of course, the extension will be that test that yes, I'm going to collapse the sidebar and

14
00:00:53.760 --> 00:00:56.160
I'm going to bring the test file over to the right.

15
00:00:57.240 --> 00:00:57.630
All right.

16
00:00:57.640 --> 00:01:00.900
So first step, we begin with our import of our mounting function.

17
00:01:00.900 --> 00:01:05.850
In this scenario, we're actually going to need to import mount and I'll explain why in a second.

18
00:01:06.150 --> 00:01:09.390
But let's import mount from view test utils.

19
00:01:09.690 --> 00:01:10.080
Okay.

20
00:01:10.800 --> 00:01:16.920
So the issue here in our component is that we're actually rendering all of our custom HTML within the

21
00:01:16.920 --> 00:01:18.840
top level accordion component.

22
00:01:18.960 --> 00:01:24.870
As a reminder, that accordion component is the one that enables the collapse ability, the expandability

23
00:01:24.870 --> 00:01:26.700
of that little section on the sidebar.

24
00:01:27.030 --> 00:01:31.830
The problem is from the perspective of the view test utils, accordion is a child component.

25
00:01:32.160 --> 00:01:37.440
So if we were to use shallow mount, the test would say, hey, this is a child component that you're

26
00:01:37.440 --> 00:01:38.460
rendering in your test.

27
00:01:38.670 --> 00:01:42.900
Therefore, I have to replace it with a stub because that's what shallow mount does.

28
00:01:43.140 --> 00:01:48.660
Unfortunately, if we replace this accordion with a stub, then all of the content that we place here,

29
00:01:48.660 --> 00:01:54.180
which is really slot content for the accordion implementation, that will no longer work because from

30
00:01:54.180 --> 00:01:58.890
the tests perspective, accordion will now be some kind of accordion stub that represents something

31
00:01:58.890 --> 00:02:01.080
else, some kind of more lightweight HTML.

32
00:02:01.350 --> 00:02:06.840
So in order to keep all this functionality and keep this slotted content rendering as it should, we

33
00:02:06.840 --> 00:02:09.270
have to render the full accordion as it is.

34
00:02:09.450 --> 00:02:14.100
And so in order to render the real component, instead of a stub replacement, we have to use the mount

35
00:02:14.100 --> 00:02:15.930
function instead of shallow mount.

36
00:02:16.410 --> 00:02:16.830
Okay.

37
00:02:17.520 --> 00:02:19.090
So we're going to import mount.

38
00:02:19.110 --> 00:02:24.930
The next thing I want to import is my actual component, which is job filters, sidebar organizations,

39
00:02:25.230 --> 00:02:29.250
and that is coming from my source directory represented by my at sign.

40
00:02:29.580 --> 00:02:34.650
Then components, job results, job filters, sidebar.

41
00:02:34.800 --> 00:02:36.840
That's kind of our parent category folder.

42
00:02:37.020 --> 00:02:41.010
And then in here I have my job filter is sidebar organization's component.

43
00:02:41.280 --> 00:02:46.590
And again, the reason we're doing this, even though it's a very verbose name, is because whenever

44
00:02:46.590 --> 00:02:53.220
we have a bunch of related components that kind of cluster together, kind of inseparably under a feature,

45
00:02:53.670 --> 00:02:56.340
it's a good idea to prefix them with that feature.

46
00:02:56.550 --> 00:02:59.070
So in this case, our feature is the job filter sidebar.

47
00:02:59.220 --> 00:03:05.580
This organization's collapsible section is one smaller puzzle piece of that some prefix thing that organizations

48
00:03:05.580 --> 00:03:10.200
name with that job filter, sidebar prefix, and I'm nesting this all within a folder.

49
00:03:10.470 --> 00:03:12.840
Again, this is not a view specific thing.

50
00:03:12.840 --> 00:03:17.340
It's a matter of how you'd like to organize your project so that it's easy to find related components.

51
00:03:17.460 --> 00:03:20.160
But this is an official recommendation from the View Style Guide.

52
00:03:20.280 --> 00:03:22.530
That's why we have this super long component name.

53
00:03:22.890 --> 00:03:28.020
So within our job filter sidebar directory, we're going to have our job filter a sidebar organizations

54
00:03:28.020 --> 00:03:28.440
component.

55
00:03:28.650 --> 00:03:32.160
And I'm just going to add the view extension here, even though it's technically not necessary.

56
00:03:33.030 --> 00:03:33.480
Okay.

57
00:03:33.900 --> 00:03:36.000
Then we can write our first described block.

58
00:03:36.450 --> 00:03:41.910
We are testing our job filters, sidebar, organizations, component.

59
00:03:43.660 --> 00:03:45.370
And let's write a test here.

60
00:03:45.820 --> 00:03:48.070
What is this component responsible for?

61
00:03:48.070 --> 00:03:55.000
It renders unique list of organizations for filtering jobs.

62
00:03:55.540 --> 00:03:57.640
That's really the value of this presents to the user.

63
00:03:58.660 --> 00:03:58.990
Okay.

64
00:03:59.320 --> 00:04:05.080
So as a quick reminder of how we've tested view related functionality before here in our component,

65
00:04:05.080 --> 00:04:07.270
we have a dollar sign store property.

66
00:04:07.270 --> 00:04:12.430
And as a reminder, View X is going to add this to every single component from our tests perspective.

67
00:04:12.580 --> 00:04:17.800
That means in order for this computed property to run, we're going to need a dollar sign store property

68
00:04:17.800 --> 00:04:19.060
available under this keyword.

69
00:04:19.300 --> 00:04:22.210
However, it does not need to be a real value store.

70
00:04:22.390 --> 00:04:25.180
It just needs to be a plain object that can play the role.

71
00:04:25.450 --> 00:04:26.890
So what does our object need to have?

72
00:04:26.890 --> 00:04:30.790
It needs to have a getters property and needs to have a unique organization's property.

73
00:04:31.180 --> 00:04:31.540
All right.

74
00:04:31.870 --> 00:04:35.290
So let me set this up and I'm going to do it in a slightly weird order.

75
00:04:35.500 --> 00:04:40.570
Let's say we're just going to define a concept called Dollar Sign Store, and I'm going to leave it

76
00:04:40.570 --> 00:04:42.130
to be an empty object for now.

77
00:04:42.140 --> 00:04:43.840
We're going to come back to this in just a minute.

78
00:04:44.170 --> 00:04:48.130
And I just want to show you how all of this is hardwired, because this is kind of a review of what

79
00:04:48.130 --> 00:04:48.880
we've done before.

80
00:04:49.210 --> 00:04:52.450
So as a reminder, what we can do is we can define our wrapper constant.

81
00:04:53.230 --> 00:04:56.260
We can mount our job filter, sidebar, organization's component.

82
00:04:56.560 --> 00:05:00.790
And then as this as the second argument, we provide our configuration object.

83
00:05:01.000 --> 00:05:03.640
And in here we can provide a global property.

84
00:05:04.090 --> 00:05:06.370
That global property is going to be an object.

85
00:05:06.550 --> 00:05:08.650
That object is going to have a max property.

86
00:05:08.830 --> 00:05:12.650
And here we can specify any of those global properties that we want to replace.

87
00:05:12.910 --> 00:05:18.550
So simply by placing dollar sign store here and using s syntax, what this is telling our test is take

88
00:05:18.550 --> 00:05:23.710
your job filter cyber organization's component and make sure this that dollar sign store is whatever

89
00:05:23.710 --> 00:05:24.550
we provide here.

90
00:05:24.640 --> 00:05:26.890
So in this case, it's going to be whatever object we want.

91
00:05:27.100 --> 00:05:31.240
But because we're using E-6, we're simply referencing this object on line number seven.

92
00:05:31.360 --> 00:05:35.170
And of course, we'll populate it with the required properties that we need in just a second.

93
00:05:35.500 --> 00:05:40.840
Before we proceed, though, I do want to remind you that our accordion component right here is actually

94
00:05:40.840 --> 00:05:42.760
utilizing a font awesome icon.

95
00:05:43.060 --> 00:05:44.470
Here's a quick reminder for you.

96
00:05:44.470 --> 00:05:49.720
In the accordion component, we're using this font awesome icon to render that carrot that is either

97
00:05:49.720 --> 00:05:50.830
pointing down or up.

98
00:05:51.160 --> 00:05:55.870
And because we're doing a full mount, we're going to render accordion and thus also render its font

99
00:05:55.870 --> 00:06:01.840
awesome icon component, which will render that familiar error message that says, hey, I don't know

100
00:06:01.840 --> 00:06:03.040
what font awesome icon is.

101
00:06:03.280 --> 00:06:07.840
So as a reminder, the way that we can fix that is by adding a stubs property here, that's going to

102
00:06:07.840 --> 00:06:08.440
be an object.

103
00:06:08.680 --> 00:06:14.170
And here we say that whenever you find a font awesome icon component, feel free to stub that out with

104
00:06:14.170 --> 00:06:17.470
your default implementation by simply providing a true right here.

105
00:06:18.620 --> 00:06:18.950
Okay.

106
00:06:18.950 --> 00:06:21.290
So this is hopefully all review from what we've done before.

107
00:06:21.500 --> 00:06:25.610
But now the question becomes how how do we define the properties in the store?

108
00:06:25.880 --> 00:06:30.710
Well, we can look at exactly what our component needs, needs the store object, and that store needs

109
00:06:30.710 --> 00:06:32.660
to have a getters property.

110
00:06:33.470 --> 00:06:35.270
Otherwise, it's not going to be able to reference it.

111
00:06:35.450 --> 00:06:36.950
And then what does getters need to have?

112
00:06:36.950 --> 00:06:39.830
It needs to have unique organizations as a property.

113
00:06:40.860 --> 00:06:46.260
So here's where things get really interesting, right from view's perspective or a View X is unique

114
00:06:46.260 --> 00:06:53.040
organizations is actually a method name and that method is invoked and view X is going to give it this

115
00:06:53.040 --> 00:06:54.410
store state as it stands.

116
00:06:54.440 --> 00:07:00.570
Then all of that logic is going to run and calculate the set for us, etc. From the perspective of the

117
00:07:00.570 --> 00:07:03.870
component though, it doesn't really care, right?

118
00:07:03.870 --> 00:07:08.520
From the from the perspective of the component, it's just accessing this property and view knows how

119
00:07:08.520 --> 00:07:13.800
to translate this logic into the right getter into our store.

120
00:07:14.010 --> 00:07:18.840
But from the purposes of this component, as long as this property exists and gives us back a set in

121
00:07:18.840 --> 00:07:23.520
the test or really any iterable object for that matter, because we're using V four and that could be

122
00:07:23.520 --> 00:07:24.720
anything that could be an array.

123
00:07:25.050 --> 00:07:28.560
The point is, we don't need to incorporate view into this.

124
00:07:28.710 --> 00:07:34.260
We just need unique organizations to be something that works because this is the core logic of what

125
00:07:34.260 --> 00:07:35.310
this component is doing.

126
00:07:35.460 --> 00:07:39.810
It's defining a computed property that needs to access all of these nested properties.

127
00:07:40.020 --> 00:07:45.450
As long as these nested properties exist in our test world, they don't need to be like the real ones,

128
00:07:45.450 --> 00:07:45.780
right?

129
00:07:45.990 --> 00:07:51.270
So what I'm saying here is if I simply make unique organizations a simple property that returns something

130
00:07:51.270 --> 00:07:57.240
like a set, I'm going to emulate an environment that is very similar to how the component actually

131
00:07:57.240 --> 00:07:58.080
works in the real world.

132
00:07:58.200 --> 00:08:03.180
Without having to incorporate all the complexity of the View Store, I don't need to define a View bookstore

133
00:08:03.180 --> 00:08:08.010
in order to test that the unique organization's getter is working because from the perspective of the

134
00:08:08.010 --> 00:08:10.920
component, it's just saying, Hey, get or do this logic.

135
00:08:10.920 --> 00:08:13.620
It doesn't care how the getter does it, it doesn't care.

136
00:08:13.800 --> 00:08:14.410
It just cares.

137
00:08:14.410 --> 00:08:17.850
That's going to get some kind of return value from it that it can iterate over.

138
00:08:17.970 --> 00:08:21.420
And that's exactly what I'm providing it here on this, providing it a sample set.

139
00:08:21.780 --> 00:08:25.950
So in here I can simply give it an array to populate that set with some initial strings.

140
00:08:26.250 --> 00:08:31.680
So for example, I can say unique organizations is just going to be a set with, let's say two strings

141
00:08:31.680 --> 00:08:32.580
of Google and Amazon.

142
00:08:33.060 --> 00:08:38.340
So now in my test component, I expect that I should have two list items, one for each of those organizations.

143
00:08:38.490 --> 00:08:41.460
And now I've completely disconnected myself from the View Store.

144
00:08:41.640 --> 00:08:45.960
No, no matter how I want to implement that getter logic, I don't care from the component.

145
00:08:46.200 --> 00:08:51.450
The component is just testing the interaction with the store and its nested properties and its nested

146
00:08:51.450 --> 00:08:51.750
getters.

147
00:08:51.870 --> 00:08:56.460
We don't care how Vue is going to translate this to a method call and pass the state because that is

148
00:08:56.460 --> 00:08:58.140
Vue views responsibility.

149
00:08:58.230 --> 00:09:03.870
That is the library's responsibility for from our perspective, we want to test our code, our component

150
00:09:04.050 --> 00:09:06.540
and all this component is doing is accessing properties.

151
00:09:06.990 --> 00:09:07.320
All right.

152
00:09:07.320 --> 00:09:08.700
So I hope that explanation makes sense.

153
00:09:08.940 --> 00:09:11.940
And so now we can wire up our assertions.

154
00:09:12.180 --> 00:09:15.240
So I'm going to do something here that I'm actually not a fan of.

155
00:09:15.240 --> 00:09:19.470
And the reason is because it requires the test to know a little bit about the accordion component.

156
00:09:19.740 --> 00:09:22.020
But unfortunately, it's part of our current design.

157
00:09:22.560 --> 00:09:26.820
Basically, as you may recall, the accordion is going to start off in a collapsed state.

158
00:09:27.060 --> 00:09:32.370
So because the accordion is collapsed, this content that we provide as slot content is actually not

159
00:09:32.370 --> 00:09:34.950
visible when our component is mounted.

160
00:09:35.220 --> 00:09:40.710
So we need to first click the accordion so that it expands, thus revealing this content.

161
00:09:40.950 --> 00:09:42.600
Well, how can we click the accordion?

162
00:09:42.600 --> 00:09:49.020
Well, as a reminder, our accordion has a data test attribute right here called Clickable Area.

163
00:09:49.230 --> 00:09:54.030
So because we're doing a full mount, I'm going to look for this clickable area data test attribute.

164
00:09:54.240 --> 00:09:58.710
The reason I really don't like this is because I'm looking at a child component of the component that

165
00:09:58.710 --> 00:09:59.340
I'm testing.

166
00:09:59.550 --> 00:10:02.640
We will, I think, move away from this test a little bit later in the course.

167
00:10:02.880 --> 00:10:07.650
But for now, this is a simple way that we can simply target the accordion, click it to expand it,

168
00:10:07.650 --> 00:10:09.630
and then actually look for the things we care about.

169
00:10:10.110 --> 00:10:10.380
All right.

170
00:10:10.380 --> 00:10:16.320
So what I'm going to do here is I'm going to say content, clickable area, and I'm going to look for

171
00:10:16.320 --> 00:10:18.990
that data test attribute that is actually rendered in the accordion.

172
00:10:18.990 --> 00:10:26.970
So wrapper find we're looking for a data test attribute equal to clickable area that's going to be clickable

173
00:10:26.970 --> 00:10:33.450
area with a dash close off that square brackets and then I'm going to click it.

174
00:10:33.570 --> 00:10:38.880
And as a reminder, the way we do that is by doing clickable area and then we can trigger a click on

175
00:10:38.880 --> 00:10:39.000
it.

176
00:10:39.000 --> 00:10:40.230
So trigger is a method.

177
00:10:40.440 --> 00:10:42.630
We provide it with the event we want to activate.

178
00:10:42.630 --> 00:10:43.620
We want a click event.

179
00:10:43.830 --> 00:10:47.250
This is an asynchronous event, so it returns a promise.

180
00:10:47.250 --> 00:10:51.120
We need to await this until it's complete and until the component refreshes.

181
00:10:51.390 --> 00:10:56.550
And in order to use the await keyword here, we need to make our test asynchronous by adding async right

182
00:10:56.550 --> 00:10:56.820
here.

183
00:10:58.220 --> 00:10:58.580
Okay.

184
00:10:58.850 --> 00:11:03.660
So now that our accordion is expanded, we can actually look for the thing that we want to look for

185
00:11:03.660 --> 00:11:05.390
and test the logic that I want to test.

186
00:11:05.630 --> 00:11:07.040
So what do I ultimately want to test?

187
00:11:07.280 --> 00:11:12.950
I want to test that given that I have simulated a unique organization set of two two strings.

188
00:11:13.100 --> 00:11:19.100
I expect to see two list items or two labels, and I should see those two organizations listed in line.

189
00:11:19.100 --> 00:11:19.340
Right.

190
00:11:19.460 --> 00:11:22.820
I should have two checkboxes, one for Google, one for Amazon.

191
00:11:23.120 --> 00:11:24.620
So I'm going to look for.

192
00:11:26.260 --> 00:11:31.480
A concept called organization labels because that is the the content that's actually going to store

193
00:11:31.480 --> 00:11:34.690
my organization name is going to be the label right here on line 12.

194
00:11:34.960 --> 00:11:38.740
So I'm going to look for those and I'm going to assume that they're going to have some kind of data

195
00:11:38.740 --> 00:11:39.520
test attribute.

196
00:11:40.000 --> 00:11:42.220
There's going to be two of them because I'm iterating twice.

197
00:11:42.430 --> 00:11:47.350
So instead of using find, I'm going to find I'm going to use find all as a reminder find all returns

198
00:11:47.350 --> 00:11:53.710
an array that stores all the matches that the test utils found in your implementation.

199
00:11:54.040 --> 00:11:59.710
So I'm going to look for all the elements that I can find that have a data test attribute.

200
00:12:00.870 --> 00:12:05.040
Equal to organization and this data test attribute will not exist right now.

201
00:12:05.040 --> 00:12:06.270
We're going to add to it in just a second.

202
00:12:06.660 --> 00:12:11.820
So this this should give me an array, ideally of two nodes representing the two labels I have right

203
00:12:11.820 --> 00:12:12.120
here.

204
00:12:12.420 --> 00:12:17.100
What I want to do is I want to take those nodes and I want to get the nested text that they have, because

205
00:12:17.100 --> 00:12:21.360
that nested text should be my organization, name of Google and Amazon.

206
00:12:21.510 --> 00:12:24.300
What I'm really testing for is this interpolation right here.

207
00:12:24.480 --> 00:12:29.070
As I iterate over my set, I want to render that company's name right here in line.

208
00:12:29.370 --> 00:12:35.550
So I'm going to say to organizations I can take my organization labels array.

209
00:12:35.550 --> 00:12:41.910
I can map over every element in here, and every element here is basically an optimal node.

210
00:12:42.450 --> 00:12:43.500
It's going to call it node.

211
00:12:43.890 --> 00:12:47.040
And on that note, I'm going to have a method called text.

212
00:12:47.070 --> 00:12:51.390
Text is going to give me the actual text that it's rendering to the DOM, to the browser.

213
00:12:51.810 --> 00:12:56.850
So when I use the map method, I'm going to get back an array from an array of two HTML nodes.

214
00:12:56.850 --> 00:12:58.890
I'm going to get back an array of two strings.

215
00:12:59.160 --> 00:13:02.850
And of course, I expect that array of two strings to be my two organization names.

216
00:13:03.150 --> 00:13:05.100
So I expect organizations.

217
00:13:06.950 --> 00:13:11.150
To equal an array equal to Google and Amazon.

218
00:13:11.690 --> 00:13:15.210
Basically what I'm testing here is given a set of these two strings.

219
00:13:15.230 --> 00:13:20.630
I've expected that you have created two labels for them, and those two labels have the exact same text

220
00:13:20.630 --> 00:13:25.880
that I've given to you in the set that I am giving to you from this fictional store that has this getters

221
00:13:25.880 --> 00:13:28.490
property that is simulating a real view X store.

222
00:13:28.940 --> 00:13:33.140
So with that, I'm going to run, NPM, run, test, call and watch.

223
00:13:35.400 --> 00:13:36.660
And let's see if this works.

224
00:13:38.120 --> 00:13:42.440
And of course it should fail because we do not have our data to attribute, which is great.

225
00:13:42.680 --> 00:13:46.190
So what I'm going to do is head to my label right here and here.

226
00:13:46.190 --> 00:13:51.260
I'm going to add the data test attribute that we look for in the test, which of course, is just organization.

227
00:13:51.800 --> 00:13:56.540
And as a reminder, we can totally have the same data test attribute on the on on a label.

228
00:13:56.720 --> 00:14:02.720
So because we're going to have a V4 over two organizations, we're going to create two labels to labels

229
00:14:02.720 --> 00:14:05.870
that are both going to have this same data test of organization.

230
00:14:06.080 --> 00:14:10.580
We are not binding or anything, so it's just literally going to be the string organization which allows

231
00:14:10.580 --> 00:14:14.570
my find all to have two matches and then get that array of two nodes.

232
00:14:15.380 --> 00:14:15.680
All right.

233
00:14:15.680 --> 00:14:17.480
So everything is working as we expect here.

234
00:14:17.480 --> 00:14:19.740
The test is passing just to make this fail.

235
00:14:19.760 --> 00:14:21.890
What I'm going to do is remove my interpolation.

236
00:14:23.190 --> 00:14:24.570
I've got to remove the curly braces.

237
00:14:24.840 --> 00:14:29.520
So expect to get a failure here because it's going to say, hey, I expected Google and Amazon, but

238
00:14:29.520 --> 00:14:31.110
I'm actually getting to empty strings.

239
00:14:31.320 --> 00:14:33.900
That proves to us that we don't have a false positive.

240
00:14:33.900 --> 00:14:42.240
Our test is passing correctly when viewers able to find the predictable strings that it wants in here

241
00:14:42.240 --> 00:14:45.330
based on the iteration of the set, I'm going to save that.

242
00:14:45.840 --> 00:14:48.210
Our test is passing and that completes our test.

243
00:14:48.480 --> 00:14:53.100
So not a perfect test because we are still mounting and we are reaching a little bit too deep into the

244
00:14:53.100 --> 00:14:56.130
accordion component for my liking, but good enough for now.

245
00:14:56.280 --> 00:15:00.210
And so in the next lesson, we're going to see how we can optimize our current implementation a little

246
00:15:00.210 --> 00:15:00.660
bit more.
