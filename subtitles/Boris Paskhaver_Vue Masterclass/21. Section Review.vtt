WEBVTT
1
00:00:00.270 --> 00:00:01.170
All right.

2
00:00:01.170 --> 00:00:04.650
So congratulations on reaching the end of another core section.

3
00:00:04.740 --> 00:00:08.700
We learned a lot more about the composition API in this section.

4
00:00:08.910 --> 00:00:10.740
So let's review everything that we've learned.

5
00:00:11.100 --> 00:00:17.700
This section was focused on learning how to use the composition API to replace various options API features

6
00:00:17.700 --> 00:00:19.050
that we've used throughout the course.

7
00:00:19.350 --> 00:00:24.930
So we learned about how to replace data methods, computed properties, how to replace properties like

8
00:00:24.930 --> 00:00:30.240
dollar signs, store and dollar router and dollar root, or properties that are given to us by other

9
00:00:30.240 --> 00:00:30.830
libraries.

10
00:00:30.840 --> 00:00:35.880
In other words, we also learned how to replace getters, how to replace mutations, all using the new

11
00:00:35.940 --> 00:00:36.990
composition API.

12
00:00:37.320 --> 00:00:39.330
So what is the focus in the composition API?

13
00:00:40.320 --> 00:00:45.240
Well, its intent, of course, is to replace lots of functionality with helper functions, smaller

14
00:00:45.240 --> 00:00:48.450
functions, which are also often called composable, right.

15
00:00:48.660 --> 00:00:53.970
So we can kind of look at the helper functions that we get from other libraries as their own composable

16
00:00:53.970 --> 00:00:54.480
functions.

17
00:00:54.660 --> 00:01:00.300
So for example, to work with View X, we simply import and use use store to work with view router and

18
00:01:00.300 --> 00:01:01.050
it's objects.

19
00:01:01.050 --> 00:01:06.960
We import the use route and use router functions and invoke those in our setup method and get those

20
00:01:06.960 --> 00:01:08.550
respective objects as well.

21
00:01:08.940 --> 00:01:14.730
So the whole idea is that composable is are these helper functions that utilize views, react to features.

22
00:01:14.970 --> 00:01:19.980
So in the case of what we talked about in the previous slide, you store is going to give us a reactive

23
00:01:19.980 --> 00:01:25.560
object holding the view X Store state and we're able to use that to affect our component and get it

24
00:01:25.560 --> 00:01:28.260
to recognize, change and react to that change.

25
00:01:28.560 --> 00:01:34.920
But the core intent behind this design is that a component is going to be composed of lots of smaller

26
00:01:35.070 --> 00:01:40.260
reusable functions that provide these reactive objects that multiple components can reuse.

27
00:01:40.440 --> 00:01:46.410
So that's why it's called the Composition API, because a component builds up or composes itself based

28
00:01:46.410 --> 00:01:50.940
on logical functionality or behavior that comes from these separate functions.

29
00:01:51.240 --> 00:01:56.520
And of course, the goal here is to kind of make our actual components as dumb as possible.

30
00:01:56.910 --> 00:02:01.320
And that's a good thing, because the more that our components worry about just displaying the view

31
00:02:01.470 --> 00:02:06.360
and the more that the business logic takes place in separate JavaScript functions generally, the easier

32
00:02:06.360 --> 00:02:07.440
it becomes to test.

33
00:02:07.680 --> 00:02:09.660
Generally, the better our components become.

34
00:02:09.660 --> 00:02:16.260
They tend to become smaller because we are able to extract pieces of business logic out instead of cramming,

35
00:02:16.260 --> 00:02:18.840
you know, three separate features into one component.

36
00:02:18.960 --> 00:02:21.600
We tend to extract those into three composable functions.

37
00:02:21.720 --> 00:02:24.060
They live separately, they're tested independently.

38
00:02:24.720 --> 00:02:26.760
So it tends to lead to better code.

39
00:02:27.030 --> 00:02:29.470
That's why a lot of people are fans of the composition API.

40
00:02:29.640 --> 00:02:33.300
It kind of enforces a lot of good practices with component design.

41
00:02:33.390 --> 00:02:33.720
All right.

42
00:02:34.020 --> 00:02:39.210
So we also saw that we can use view functions like graph computed, reactive, etc., and more in a

43
00:02:39.210 --> 00:02:40.680
composable function body.

44
00:02:40.920 --> 00:02:46.410
So in a plane JavaScript function, in a plane JS file in our code base, we can import those named

45
00:02:46.410 --> 00:02:50.340
exports from the from the view library and simply use them outside of a component.

46
00:02:50.550 --> 00:02:54.540
And that is absolutely wonderful because we can decouple ourselves from a specific component.

47
00:02:54.750 --> 00:02:57.180
We can just write a function to talk to The View X Store.

48
00:02:57.360 --> 00:02:58.920
We can write a function to get the root.

49
00:02:59.070 --> 00:03:02.040
We can write a function to update when a getter gets updated.

50
00:03:02.130 --> 00:03:04.020
We can isolate those names.

51
00:03:04.260 --> 00:03:08.700
That logic to smaller helper functions that are reusable in many components.

52
00:03:09.650 --> 00:03:09.930
Right.

53
00:03:10.200 --> 00:03:14.610
As far as testing, we saw that we should just test composable like plain JavaScript functions.

54
00:03:14.880 --> 00:03:18.300
So as always, we simply invoke it and we test the output.

55
00:03:18.480 --> 00:03:22.950
So input, output, what do I get into it and what do I expect it to produce for me?

56
00:03:23.310 --> 00:03:25.920
So all we need to do is test the return diet.

57
00:03:26.130 --> 00:03:29.280
If our composable function returns a reactive object.

58
00:03:29.310 --> 00:03:30.030
No problem.

59
00:03:30.030 --> 00:03:35.250
You can access value on that object to get the data it is storing and validate that everything is correct.

60
00:03:35.390 --> 00:03:35.640
Right.

61
00:03:35.790 --> 00:03:41.100
You don't need to test the complexity of the reactivity because remember, that is the view team's responsibility.

62
00:03:41.220 --> 00:03:44.880
They've created tests for RAF and competed in all that logic and their code base.

63
00:03:45.090 --> 00:03:47.370
We worry about the business logic that is our own.

64
00:03:47.700 --> 00:03:52.770
And similarly, when we're testing our components, our tests no longer need to mark out those properties

65
00:03:52.770 --> 00:03:55.350
that, for example, Vue router or Vue X do.

66
00:03:55.530 --> 00:04:00.090
So we no longer use the MOX property on the config object that we pass to the non function.

67
00:04:00.330 --> 00:04:05.130
Rather we simply mock out the helper functions, the composable that the component utilizes.

68
00:04:05.430 --> 00:04:10.410
So if a component is going to use use store, we simply import you store it in our test, we mock it

69
00:04:10.410 --> 00:04:10.680
out.

70
00:04:10.920 --> 00:04:16.110
So when that component mounts is going to use our mock on a replacement, our substitute instead of

71
00:04:16.110 --> 00:04:16.800
the original one.

72
00:04:17.040 --> 00:04:22.860
And then we simply have our mock out composable function return, whatever is needed to test the components

73
00:04:22.860 --> 00:04:23.640
responsibility.

74
00:04:23.910 --> 00:04:28.500
So we care about the components interaction with those functions and what they return.

75
00:04:28.620 --> 00:04:33.330
We don't really care about the internals of what those functions do when we're testing a component.

76
00:04:33.630 --> 00:04:37.320
If it's our own composable function, we obviously do care about what those functions do.

77
00:04:37.530 --> 00:04:40.890
But we can cover that logic in our tests for that function.

78
00:04:40.980 --> 00:04:47.010
We do not, in my opinion, need to test that in components because that's duplicative and also makes

79
00:04:47.010 --> 00:04:49.560
the test harder and create more points of failure.

80
00:04:49.800 --> 00:04:54.360
Focus on what the component is doing as far as its interactions and its rendering and its user value.

81
00:04:54.480 --> 00:04:59.570
You don't have to worry about testing the composable function in every single component that utilises

82
00:04:59.580 --> 00:04:59.700
it.

83
00:04:59.850 --> 00:05:00.750
That's really wasteful.

84
00:05:01.110 --> 00:05:01.410
All right.

85
00:05:01.410 --> 00:05:04.170
So with that, we've covered a lot more about the composition API.

86
00:05:04.380 --> 00:05:06.360
We have one more section on it coming up.

87
00:05:06.570 --> 00:05:09.060
So I look forward to it and I will see you in the next lesson.
