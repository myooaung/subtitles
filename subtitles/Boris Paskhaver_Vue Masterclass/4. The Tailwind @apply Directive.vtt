WEBVTT
1
00:00:00.410 --> 00:00:01.340
All right.

2
00:00:01.340 --> 00:00:04.010
So we are back in our action button component.

3
00:00:04.010 --> 00:00:10.520
And as a reminder, our goal with this component is for it to be able to represent either one of two

4
00:00:10.520 --> 00:00:17.240
buttons, one with a blue background and a white font, and the other one with a white background and

5
00:00:17.240 --> 00:00:18.110
a blue font.

6
00:00:18.380 --> 00:00:24.200
And those two buttons will have styles in common between them, such as the padding and the font size.

7
00:00:24.440 --> 00:00:27.650
Of course, what varies is going to be their color schemes.

8
00:00:27.980 --> 00:00:34.220
So what I propose we do is that we label the button we have now, the blue one, as the primary style

9
00:00:34.220 --> 00:00:39.440
of this button and the new one that we're about to create with a white background, we'll call the secondary

10
00:00:39.440 --> 00:00:42.710
style or maybe the secondary variant of this button.

11
00:00:42.950 --> 00:00:47.390
Basically, it's just some way that we can label them distinctly because we're going to need to do that

12
00:00:47.390 --> 00:00:49.190
in order to separate the styles for them.

13
00:00:49.400 --> 00:00:53.840
So what we have right now will call the primary version of this button and then we'll have a secondary

14
00:00:53.840 --> 00:00:56.240
version in order to make that possible.

15
00:00:56.240 --> 00:01:01.940
With a single component, what we're going to do is extract some of those access rules to the style

16
00:01:01.940 --> 00:01:04.790
tag that we can add to a view component file.

17
00:01:05.060 --> 00:01:08.510
As a reminder, we can add those styles right below the script tag right here.

18
00:01:08.750 --> 00:01:10.100
So I'll add my styles.

19
00:01:11.210 --> 00:01:16.580
And if you may recall from earlier in the course, a really good idea in each component is to add the

20
00:01:16.580 --> 00:01:22.370
scoped keyword, and that will ensure that the styles that we declare in here, which is regular CC,

21
00:01:22.610 --> 00:01:25.970
are only going to be applied to this HTML template right here.

22
00:01:26.150 --> 00:01:31.970
They have no way of escaping this file and accidentally affecting the styles of other elements throughout

23
00:01:31.970 --> 00:01:32.480
our app.

24
00:01:32.510 --> 00:01:35.570
So we've limited or scoped the CSA styles here.

25
00:01:35.960 --> 00:01:41.570
So let's say I want to target the button component in general, and this is where I can put the styles

26
00:01:41.570 --> 00:01:46.160
that are going to be common to both our primary style and our secondary styles.

27
00:01:46.400 --> 00:01:53.630
And then below that, I'll define a class called Primary, and here I'm going to define the styles for

28
00:01:53.630 --> 00:01:55.490
my primary version of the button.

29
00:01:55.790 --> 00:02:01.130
So the idea is, no matter which class we apply, whether it be primary or eventually a secondary class,

30
00:02:01.340 --> 00:02:06.590
we're going to apply those styles plus the common ones that we will always apply to a button which is

31
00:02:06.590 --> 00:02:10.880
still going to be the fundamental HTML element that is always going to be present, and thus we're going

32
00:02:10.880 --> 00:02:16.460
to be able to mix and match this style with the styles from one of the two access classes that I use

33
00:02:16.460 --> 00:02:16.820
below.

34
00:02:17.270 --> 00:02:23.150
So what I'd like to do now is to copy these styles that we have right here below and spread them out

35
00:02:23.150 --> 00:02:25.370
among these two CSS declarations.

36
00:02:25.700 --> 00:02:31.670
The issue, of course, is that our styles right now are written down as tailwind utility classes such

37
00:02:31.670 --> 00:02:32.480
as five.

38
00:02:32.810 --> 00:02:38.840
So how can we move these ten one classes down to this style section right here where we can only use

39
00:02:39.020 --> 00:02:40.910
traditional CSS syntax?

40
00:02:41.210 --> 00:02:45.590
Well, to solve this problem, the Tailwind Library gives us a special syntax.

41
00:02:45.830 --> 00:02:49.310
It's a special code word that we can write in here.

42
00:02:49.310 --> 00:02:54.990
It's actually a Tailwind directive, much like Vue has its own directives to do Vue related functionality.

43
00:02:55.040 --> 00:02:58.040
Tailwind has its own direct directives for similar purposes.

44
00:02:58.040 --> 00:03:00.830
It's just adding additional functionality to the library.

45
00:03:01.130 --> 00:03:03.230
And that directive is called Apply.

46
00:03:03.350 --> 00:03:08.870
And here's how it works right here, where we would normally define our access styles for Button.

47
00:03:09.020 --> 00:03:12.350
I'm going to write the assign followed by apply.

48
00:03:12.830 --> 00:03:15.520
So make sure you include that sign and then the word apply.

49
00:03:15.530 --> 00:03:21.590
This is built in to tailwind and you can see the documentation on the right says use apply to inline

50
00:03:21.590 --> 00:03:25.400
any existing utility classes into your own custom CSS.

51
00:03:25.580 --> 00:03:31.460
So it works exactly as the description states after the applied keyword, we can write any tailwind

52
00:03:31.460 --> 00:03:38.060
classes in line and they will automatically be applied to the selector in this case the button H2 element.

53
00:03:38.330 --> 00:03:41.060
So I'm going to copy the classes that we have right here.

54
00:03:41.060 --> 00:03:43.340
So I'm going include five right here.

55
00:03:43.730 --> 00:03:48.470
That's five because no matter whether the button is primary or secondary, we always want to have this

56
00:03:48.470 --> 00:03:50.000
padding on the x axis.

57
00:03:50.240 --> 00:03:56.480
Same thing with our py3 style, same thing with our rounded utility class, which makes the button around

58
00:03:56.660 --> 00:04:01.220
and same thing with font medium and that ensures that we have the medium font.

59
00:04:01.220 --> 00:04:05.420
So these are all prebuilt tailwind utility access classes.

60
00:04:05.600 --> 00:04:10.190
They're the same ones that we're using right here, but we are simply applying them to the button element,

61
00:04:10.340 --> 00:04:13.880
using the style tag in a in a view component file.

62
00:04:13.880 --> 00:04:18.320
And this is where we put in again, vanilla access and view is able to understand that.

63
00:04:18.560 --> 00:04:22.550
So I can go ahead and remove these utility classes from the button up here.

64
00:04:22.850 --> 00:04:27.770
So I'm going to remove this and I'm going to remove rounded and I'm going to remove font medium.

65
00:04:29.130 --> 00:04:32.340
And I actually think we're not going to need this border zero style either.

66
00:04:32.430 --> 00:04:35.850
I think that basically applies no border, which should be the default anyway.

67
00:04:35.860 --> 00:04:36.980
So I'm going to remove this style.

68
00:04:36.990 --> 00:04:38.610
I don't think it was needed in the first place.

69
00:04:39.090 --> 00:04:39.420
All right.

70
00:04:39.600 --> 00:04:42.960
So that leaves us with three remaining access classes we can see here.

71
00:04:42.960 --> 00:04:48.810
Text white, which is the white color BGI Brand Blue One, which is our custom blue background, and

72
00:04:48.810 --> 00:04:52.620
then the shadow blue hover effect when you hover your mouse over the button.

73
00:04:52.920 --> 00:04:56.400
So as you might have guessed, we're going to copy these styles and we're simply going to bring them

74
00:04:56.400 --> 00:04:58.670
down into our primary sources class.

75
00:04:58.680 --> 00:05:00.240
I'm just going to copy this right here.

76
00:05:01.220 --> 00:05:02.300
Put them in here.

77
00:05:02.300 --> 00:05:04.250
And again, by itself, this is not enough.

78
00:05:04.490 --> 00:05:09.200
What we have to do is we have to put the apply directive in front of these tailwind classes.

79
00:05:09.440 --> 00:05:17.030
So now we're going to apply these classes whenever the View Library sees the primary class being used.

80
00:05:17.840 --> 00:05:21.860
And you'll notice that there's a little bit of syntax highlighting here in this code.

81
00:05:21.860 --> 00:05:23.840
It says Unknown at will at apply.

82
00:05:24.020 --> 00:05:27.140
That's because the Exchequer doesn't understand the syntax.

83
00:05:27.320 --> 00:05:29.330
I'm going to show you how to fix that in the very next lesson.

84
00:05:29.660 --> 00:05:34.970
So as it stands right now, if we were to leave the code, as is this primary class would not apply

85
00:05:34.980 --> 00:05:36.470
since we are not using it on our button.

86
00:05:36.770 --> 00:05:43.490
But these styles would apply because it's targeting the general HTML element, which is right here.

87
00:05:43.700 --> 00:05:49.730
So in order to replicate what we just had, what I can do is provide the primary class right here,

88
00:05:50.900 --> 00:05:54.320
and that will ensure that all of these tailwind classes are applied.

89
00:05:54.440 --> 00:05:59.150
And thus, if I navigate back to my browser, we're going to see that the button looks exactly the same

90
00:05:59.150 --> 00:06:00.400
as it did before.

91
00:06:00.410 --> 00:06:02.450
And you can see the hover effect is also present.

92
00:06:02.840 --> 00:06:03.110
All right.

93
00:06:03.110 --> 00:06:05.000
That's all there is to cover in this lesson.

94
00:06:05.000 --> 00:06:08.780
We're going to continue chipping away at this over the next couple of lessons, including introducing

95
00:06:08.780 --> 00:06:12.380
the secondary styles for the secondary variant of the button.

96
00:06:12.620 --> 00:06:15.770
Lots of fun stuff up ahead, so I will see you in the next lesson.
