1
00:00:00,550 --> 00:00:01,310
Okay.

2
00:00:01,320 --> 00:00:07,860
So in the previous lesson we learned that from the setup method we can return a JavaScript object whose

3
00:00:07,860 --> 00:00:11,730
properties will be available for us to use in the HTML template.

4
00:00:12,120 --> 00:00:17,760
So if we take a quick look at our accordion HTML template, you'll notice that there's actually four

5
00:00:17,760 --> 00:00:20,010
different names that we're using throughout.

6
00:00:20,250 --> 00:00:24,000
That were previously coming from the script section of the component.

7
00:00:24,330 --> 00:00:29,040
The first one we took care of in the previous lesson, which is header, but there's also three more.

8
00:00:29,310 --> 00:00:32,130
There's open right here, which represents a method.

9
00:00:32,220 --> 00:00:34,770
That open method was formerly right here.

10
00:00:35,520 --> 00:00:39,090
We also have the care icon reference right here.

11
00:00:39,240 --> 00:00:44,100
That is also a name and that is the name of a computed property that we have also commented out.

12
00:00:44,430 --> 00:00:49,080
And we also have is open here, which was a former data property right here.

13
00:00:49,470 --> 00:00:55,170
So in case it isn't a parent, in order to get all of the original functionality to work from the HTML,

14
00:00:55,350 --> 00:00:58,680
we're going to need to eventually have an object with those four properties.

15
00:00:58,860 --> 00:01:01,980
Header care icon is open and open.

16
00:01:02,160 --> 00:01:02,460
All right.

17
00:01:02,460 --> 00:01:05,400
That's where eventually we're trying to move towards.

18
00:01:05,790 --> 00:01:06,150
All right.

19
00:01:06,450 --> 00:01:11,700
Before we get there, I want to introduce a new problem that we're going to try to solve in this lesson.

20
00:01:12,630 --> 00:01:15,510
So we know that we have a click handler.

21
00:01:15,510 --> 00:01:20,040
We have a reaction to the click event right here that runs a method called Open.

22
00:01:20,340 --> 00:01:22,470
What I want to do is implement that method.

23
00:01:22,740 --> 00:01:28,560
And what I also want to happen is when that method runs, I want to change the header text that I display

24
00:01:28,560 --> 00:01:30,450
right here in my H3.

25
00:01:31,110 --> 00:01:31,410
All right.

26
00:01:31,410 --> 00:01:32,880
So let's take it one step at a time.

27
00:01:33,120 --> 00:01:38,490
We know that if we want this open name available to be used in our template, we have to return it as

28
00:01:38,490 --> 00:01:40,920
a property in this object from the setup method.

29
00:01:41,220 --> 00:01:45,810
So what I'm going to do right here is I'm going to define a basic open arrow function.

30
00:01:46,020 --> 00:01:47,850
So right here, let's do open.

31
00:01:48,600 --> 00:01:51,090
Let's make it a basic arrow function right in line.

32
00:01:51,330 --> 00:01:55,800
And I'm going to return or rather make sure I include open as a property here.

33
00:01:56,040 --> 00:02:01,860
This part is critical because this is the object that actually declares which of your constants and

34
00:02:01,860 --> 00:02:07,320
which ones which ones of your variables here are actually going to be included in the available template

35
00:02:07,560 --> 00:02:08,520
names to be used.

36
00:02:08,520 --> 00:02:08,790
Right.

37
00:02:08,940 --> 00:02:13,500
So simply declaring open right here but not including it in the object will not make it available.

38
00:02:13,680 --> 00:02:17,670
But by adding open here, we are now able to use open anywhere in our template.

39
00:02:17,940 --> 00:02:21,120
And actually this is enough to get our click handler to work.

40
00:02:21,330 --> 00:02:27,390
So if we were to click on this div in the browser, the VON Directive would react to that click by running

41
00:02:27,390 --> 00:02:30,570
the open function, which we defined right here.

42
00:02:30,870 --> 00:02:34,280
Now the good news is, is this logic is already actually going to work.

43
00:02:34,290 --> 00:02:35,360
That's all we need to do.

44
00:02:35,370 --> 00:02:40,920
We need to define a function in our setup method and return it in the object and now it's able to work.

45
00:02:41,280 --> 00:02:44,580
The only issue, of course, is that the function right now does absolutely nothing.

46
00:02:44,880 --> 00:02:51,840
So let's say that I want in this function to alter the value of my header value right here.

47
00:02:52,230 --> 00:02:57,900
So the only place where we have access to header in our actual setup method is right here in this constant.

48
00:02:58,260 --> 00:03:01,620
So let's try a proposed idea that we think might work.

49
00:03:01,620 --> 00:03:04,710
It won't actually work, but it's moving us in the right direction.

50
00:03:04,710 --> 00:03:07,890
So I want to show you the the the step by step path.

51
00:03:08,190 --> 00:03:09,780
Let's say we think about it this way.

52
00:03:09,990 --> 00:03:16,710
Imagine that in our setup method we make header a variable by using lat instead of const, which means

53
00:03:16,710 --> 00:03:19,860
we're able to reassign header to a new value.

54
00:03:20,250 --> 00:03:27,480
Then when my open method runs, what I want to do is take my header variable in this setup method and

55
00:03:27,480 --> 00:03:29,340
I want to reassign it to another string.

56
00:03:29,610 --> 00:03:32,280
So let's say I provide a string of awesome title.

57
00:03:33,780 --> 00:03:37,320
So even though this is not going to work, hopefully my intent here is clear.

58
00:03:37,680 --> 00:03:43,410
I'm going to export header and I'm going to also include an export of an open function that's going

59
00:03:43,410 --> 00:03:45,540
to modify the header variable right here.

60
00:03:45,870 --> 00:03:52,890
So my hope is when I click this div, I hope that this will change, which will in turn change the text

61
00:03:52,890 --> 00:03:54,840
in H in the H3 right here.

62
00:03:55,140 --> 00:04:00,450
So just to show you this will not work, let me go to my browser and I'm going to click on Cool Title

63
00:04:00,450 --> 00:04:00,780
here.

64
00:04:01,080 --> 00:04:06,060
You'll see nothing is actually changing when I click this, but this is still moving us in the right

65
00:04:06,150 --> 00:04:06,750
direction.

66
00:04:07,170 --> 00:04:07,560
Okay.

67
00:04:07,860 --> 00:04:12,390
So in order to solve this problem, we're going to need to introduce a function that we learned about

68
00:04:12,390 --> 00:04:16,080
in the previous section and it is the ref function.

69
00:04:16,410 --> 00:04:22,110
You may recall the what the ref function does is it creates a reactive object, an object with a value

70
00:04:22,110 --> 00:04:22,620
property.

71
00:04:22,830 --> 00:04:26,820
And more importantly than that, it's going to keep track of any changes to it.

72
00:04:27,540 --> 00:04:27,870
All right.

73
00:04:27,870 --> 00:04:34,890
So let's import ref right here and be very careful here because you want to import ref from view the

74
00:04:34,890 --> 00:04:36,720
plain view library view.

75
00:04:36,990 --> 00:04:39,580
Make sure you don't accidentally do it from view X.

76
00:04:39,750 --> 00:04:42,030
It's coming from view right now.

77
00:04:42,030 --> 00:04:45,810
As a reminder, we can simply invoke the ref function and pass in anything we want.

78
00:04:45,810 --> 00:04:48,120
A string, a number, boolean, an object.

79
00:04:48,240 --> 00:04:52,140
It's going to wrap that in an object that has a value property.

80
00:04:52,530 --> 00:04:54,300
So here's how we're going to solve this problem.

81
00:04:54,540 --> 00:04:57,780
I'm going to wrap this string in a ref function call.

82
00:04:59,390 --> 00:05:03,500
So now what Heitor is going to represent is going to be a reactive object.

83
00:05:03,710 --> 00:05:05,990
I'm actually going to change this to be a concert.

84
00:05:07,780 --> 00:05:12,570
And what I want the open method to do where the open function is still do the same thing.

85
00:05:12,580 --> 00:05:16,360
I want to change the value that is being stored inside this reactive object.

86
00:05:16,600 --> 00:05:22,450
You may recall from the previous section that whenever I want to alter the internal value in that reactive

87
00:05:22,450 --> 00:05:25,270
object, I have to overwrite its value property.

88
00:05:25,480 --> 00:05:27,160
So I can't just do header equals.

89
00:05:27,280 --> 00:05:29,740
I have to do header that value equals.

90
00:05:30,960 --> 00:05:31,320
Okay.

91
00:05:31,500 --> 00:05:32,090
And the rest.

92
00:05:32,100 --> 00:05:33,180
I'm going to keep the same.

93
00:05:33,180 --> 00:05:36,900
I'm still going to return an object with header and open properties.

94
00:05:37,150 --> 00:05:37,440
Right.

95
00:05:37,680 --> 00:05:42,630
Now, one thing that may be a little bit confusing is header is no longer a string when we return it.

96
00:05:42,630 --> 00:05:42,930
Right.

97
00:05:43,050 --> 00:05:48,330
It's an actual object, but yet we're interpolating had a right here as if it's a regular piece of text.

98
00:05:48,690 --> 00:05:53,610
Well, as you can probably guess, Vue is going to be very smart about this, even though header is

99
00:05:53,610 --> 00:05:58,230
technically a reactive object whenever we use it in an interpolation context like this.

100
00:05:58,530 --> 00:06:01,230
What Vue is going to say is you gave me a reactive object.

101
00:06:01,380 --> 00:06:06,540
I'm going to look inside the value property of that object, and that's what I'm actually going to display

102
00:06:06,540 --> 00:06:07,170
on the screen.

103
00:06:07,410 --> 00:06:12,000
So it's still going to display a string, a piece of text on the string, even though a header represents

104
00:06:12,000 --> 00:06:13,080
a reactive object.

105
00:06:13,470 --> 00:06:19,050
The benefit of having a reactive object, however, is whenever the value property changes whenever

106
00:06:19,050 --> 00:06:22,110
the internal content, in this case the internal string changes.

107
00:06:22,350 --> 00:06:25,050
You guessed it, Vue is going to notice that change.

108
00:06:25,140 --> 00:06:28,530
It's going to notice that change because the reactive object is tracking it.

109
00:06:28,830 --> 00:06:34,170
And whenever the reactive object's value changes, Vue is going to update the corresponding piece of

110
00:06:34,170 --> 00:06:34,710
the template.

111
00:06:35,160 --> 00:06:41,100
So whenever a header reactive object changes, Vue is going to update line eight where we are interpolating

112
00:06:41,100 --> 00:06:43,140
headers value in our template.

113
00:06:43,860 --> 00:06:47,190
So this is going to be enough to get the logic to work in our browser.

114
00:06:47,370 --> 00:06:53,790
So one more time to quickly review, we're using header here as a reactive object that stores a initial

115
00:06:53,790 --> 00:06:54,900
value of cool title.

116
00:06:55,170 --> 00:07:00,270
We are declaring an open function and all that open function is going to do is change the value of that

117
00:07:00,270 --> 00:07:01,080
reactive object.

118
00:07:01,320 --> 00:07:03,450
So hopefully this bit is not too confusing.

119
00:07:03,450 --> 00:07:07,560
We talked about these ideas in isolation in the previous section of the course.

120
00:07:07,860 --> 00:07:12,660
It's very important that we return an object with both of these properties because this is where we

121
00:07:12,660 --> 00:07:17,490
actually establish the properties that are available to use in the accordion HTML template.

122
00:07:17,730 --> 00:07:21,930
So now we are able to use header right here and we are able to use open right here.

123
00:07:22,200 --> 00:07:24,390
Open is going to run as a function.

124
00:07:24,510 --> 00:07:27,510
It's going to be invoked by view whenever we click on the div.

125
00:07:27,720 --> 00:07:33,180
When it runs, it's going to alter the value of the header reactive object, switching the value to

126
00:07:33,180 --> 00:07:39,480
be a string which is going to alter the string that is printed or interpolated right here in my H3.

127
00:07:39,870 --> 00:07:42,510
So let's switch to our browser and let's see this in action.

128
00:07:43,380 --> 00:07:43,740
All right.

129
00:07:43,740 --> 00:07:45,150
So we're going to start out with cool title.

130
00:07:45,150 --> 00:07:45,630
Cool title.

131
00:07:45,840 --> 00:07:47,310
Watch what happens when I click this.

132
00:07:47,430 --> 00:07:49,810
We're going to run our open function and there we go.

133
00:07:49,830 --> 00:07:51,570
It's going to change the reactive object.

134
00:07:51,700 --> 00:07:54,060
We're going to change the interpolated value.

135
00:07:54,390 --> 00:07:55,770
I'm going to click this one right here.

136
00:07:55,770 --> 00:07:58,290
Same thing, this one right here, same thing.

137
00:07:58,890 --> 00:07:59,370
All right.

138
00:07:59,730 --> 00:08:01,770
So we're making really good progress here.

139
00:08:01,800 --> 00:08:07,380
We've now covered two of the four names that we are using our HTML template.

140
00:08:07,590 --> 00:08:12,750
And in the upcoming lessons, I'm going to keep chipping away at the other names we have throughout

141
00:08:12,750 --> 00:08:13,350
this template.

142
00:08:13,530 --> 00:08:14,310
So I'll see you there.
