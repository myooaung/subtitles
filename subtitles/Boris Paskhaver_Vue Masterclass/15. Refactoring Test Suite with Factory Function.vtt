WEBVTT
1
00:00:00.210 --> 00:00:01.020
All right.

2
00:00:01.020 --> 00:00:06.950
So in this lesson, we'll introduce another way that we can solve the duplication problem from a couple

3
00:00:06.960 --> 00:00:07.680
lessons ago.

4
00:00:07.920 --> 00:00:14.190
And it is this instead of using the before each function, what we can do is write our own function,

5
00:00:14.400 --> 00:00:18.720
whose responsibility it will be to generate some kind of object for us.

6
00:00:18.990 --> 00:00:23.790
So for example, we can write a function to generate this wrapper object for us.

7
00:00:23.970 --> 00:00:29.580
And in our function body we can invoke these shallow amount function and have it return the value of

8
00:00:29.580 --> 00:00:30.120
the wrapper.

9
00:00:30.270 --> 00:00:36.180
And that way in every single test we can simply invoke that function and have access to its return value.

10
00:00:36.450 --> 00:00:42.870
So it's a very similar idea to before each, except we move more away from the just framework and more

11
00:00:42.870 --> 00:00:48.480
to vanilla JavaScript, which can sometimes be beneficial because it moves away from the framework and

12
00:00:48.480 --> 00:00:51.870
brings us closer to the core language, which is less likely to change.

13
00:00:52.230 --> 00:00:58.170
Now I propose that we take a slightly different path and that is that our function is going to return,

14
00:00:58.170 --> 00:01:06.210
not the actual wrapper component, but just this configuration object right here, the one that enables

15
00:01:06.210 --> 00:01:08.580
the global stubs and router link properties.

16
00:01:08.850 --> 00:01:14.250
And the reason why I want to go with this approach is so that in every test we can still invoke the

17
00:01:14.250 --> 00:01:20.970
shallow mount function and communicate exactly what it is that we are testing and communicate that we

18
00:01:20.970 --> 00:01:22.080
are using shallow mount.

19
00:01:22.320 --> 00:01:26.690
And the way I like to think about it, if it is, it's a little bit unclear, which I apologize for

20
00:01:26.700 --> 00:01:27.570
is kind of like this.

21
00:01:27.900 --> 00:01:33.240
If the user is going to scroll up in our file to find some kind of detail, I'd like for that detail

22
00:01:33.240 --> 00:01:35.250
to be kind of irrelevant to the test.

23
00:01:35.490 --> 00:01:40.110
So I prefer the user not have the scroll at all, but if they have to, I don't want them to search

24
00:01:40.110 --> 00:01:43.980
for a somewhere in the file where a critical definition is.

25
00:01:44.220 --> 00:01:50.070
So in regards to what we currently have, the reason I don't like this implementation exactly is if

26
00:01:50.070 --> 00:01:55.530
I go down, for example, to the very last test and I open this file three months from now, I'm not

27
00:01:55.530 --> 00:02:02.610
going to be sure what wrapper is and thus have to scroll up and find that wrapper is defined right here

28
00:02:02.640 --> 00:02:05.100
but only assigned right here and now.

29
00:02:05.100 --> 00:02:08.910
I know it is actually a mounted component from view test details.

30
00:02:08.910 --> 00:02:13.410
It's kind of hard to figure out when you have not been the person who wrote this file or when you come

31
00:02:13.410 --> 00:02:16.290
back to it and after a certain passage of time.

32
00:02:16.800 --> 00:02:22.320
Conversely, if I look at this configuration object, I really don't care about knowing this detail

33
00:02:22.440 --> 00:02:23.250
in every test.

34
00:02:23.250 --> 00:02:28.680
I know that something has to stub out my router link component, but we're really not testing much of

35
00:02:28.680 --> 00:02:30.060
the mechanics of router link.

36
00:02:30.060 --> 00:02:32.550
In most of our tests we don't really care.

37
00:02:32.820 --> 00:02:38.760
And thus if the user has a scroll up to find this supplementary information, it's not critical to understanding

38
00:02:38.760 --> 00:02:40.890
the purpose of the test or how it's supposed to run.

39
00:02:41.130 --> 00:02:42.690
So let me show you what we're going to do.

40
00:02:42.690 --> 00:02:47.760
And then I think it'll be a lot easier to justify the decision to have a factory function that returns

41
00:02:47.970 --> 00:02:50.550
a config object instead of the entire wrapper.

42
00:02:50.850 --> 00:02:53.070
So right here I'll define a function.

43
00:02:53.070 --> 00:02:57.090
In fact, let me get rid of our variable declaration in line.

44
00:02:57.090 --> 00:02:59.340
I'll just create a function called create config.

45
00:02:59.610 --> 00:03:02.640
We can totally wrap a arrow function inside an arrow function.

46
00:03:02.640 --> 00:03:03.720
There's nothing wrong with that.

47
00:03:03.720 --> 00:03:05.310
It's just going to exist within scope.

48
00:03:05.700 --> 00:03:09.210
And all this function will do is return a plain JavaScript object.

49
00:03:09.450 --> 00:03:14.730
So I can use this syntax where I have a function body and I return a JavaScript object.

50
00:03:14.940 --> 00:03:17.310
But there is a shorthand syntax for this.

51
00:03:17.460 --> 00:03:19.530
We can implicitly return it by default.

52
00:03:19.920 --> 00:03:26.580
And so in order to do that, we first have to create a pair of parentheses like so, and then inside

53
00:03:26.580 --> 00:03:32.880
it we specify our JavaScript object and that object will serve as the return value of the create config

54
00:03:32.880 --> 00:03:34.530
function when it's invoked.

55
00:03:34.860 --> 00:03:36.360
So what do I want to return here?

56
00:03:36.360 --> 00:03:38.790
I want to return this object right here.

57
00:03:39.870 --> 00:03:45.780
So it's our complete configuration object with the global property stubs, property, etc. So right

58
00:03:45.780 --> 00:03:48.570
here I'm going to get rid of my before each entirely as well.

59
00:03:49.140 --> 00:03:53.520
And I'm basically going to go back to the old code that I used to have, but it's going to be a little

60
00:03:53.520 --> 00:03:54.030
bit different.

61
00:03:54.300 --> 00:04:00.660
So I'm still going to say const wrapper and I'm still going to shallow amount, my main nav component.

62
00:04:00.810 --> 00:04:05.640
But this time around, instead of providing that complex configuration object that really doesn't affect

63
00:04:05.640 --> 00:04:12.030
the test as a whole, here is where I'm going to invoke my create config function.

64
00:04:12.330 --> 00:04:15.510
This function, by the way, is what's called a factory function.

65
00:04:15.690 --> 00:04:20.340
It's called the factory function because it operates very much like a factory in the real world.

66
00:04:20.340 --> 00:04:24.390
You can think of a factory that produces cars or computers, right?

67
00:04:24.450 --> 00:04:29.670
It's just a function whose responsibility it is to spit out some constant thing over and over again.

68
00:04:29.820 --> 00:04:34.050
So our create config function is just spitting out this constant config object each time.

69
00:04:34.260 --> 00:04:35.760
And that's exactly what it's doing here.

70
00:04:36.030 --> 00:04:40.710
And again, it may not seem apparent, but the benefit I think to this approach is we immediately have

71
00:04:40.710 --> 00:04:42.870
a better sense of what wrapper represents.

72
00:04:43.170 --> 00:04:47.550
We have a better sense that we are using shallow amount, that we are fundamentally testing the main

73
00:04:47.550 --> 00:04:48.330
NAV component.

74
00:04:48.630 --> 00:04:53.730
And if we do have to scroll up to see what Create Configures, I'm sort of implicitly communicating

75
00:04:53.730 --> 00:04:56.100
to myself that it's not super important.

76
00:04:56.250 --> 00:04:59.820
It's probably helpful information, but it doesn't really affect.

77
00:04:59.970 --> 00:05:01.320
This thing under test, right?

78
00:05:01.440 --> 00:05:06.480
We want to shallow mount a main nav component and we want to ensure that bubble carriers appear somewhere

79
00:05:06.480 --> 00:05:06.750
there.

80
00:05:06.840 --> 00:05:08.820
But this extra config is sort of supplemental.

81
00:05:09.000 --> 00:05:13.980
Again, some people may disagree and think this is not true and this is just as confusing or less confusing.

82
00:05:14.160 --> 00:05:16.260
It's just a different way to think about this problem.

83
00:05:16.440 --> 00:05:21.630
We are showing what we are mounting in every test which forces the user to not have to scroll back up

84
00:05:21.630 --> 00:05:22.980
to see what wrapper represents.

85
00:05:23.310 --> 00:05:25.650
So I'm going to copy this code to all of our tests.

86
00:05:26.550 --> 00:05:28.050
And so it's kind of a midway point.

87
00:05:28.050 --> 00:05:32.880
We have a little bit more duplication than in the previous lesson, but certainly less than we had in

88
00:05:32.880 --> 00:05:34.260
the two lessons ago.

89
00:05:34.440 --> 00:05:38.640
So we're still using shallow amount, we're still using May now, but we don't have to copy that whole

90
00:05:38.640 --> 00:05:40.350
configuration object each time.

91
00:05:40.740 --> 00:05:46.860
So we can put it right here, save the file, and when we run it, we should see everything pass.

92
00:05:47.070 --> 00:05:51.510
So now again, a user may see this, and if they don't scroll up, that's totally fine because they

93
00:05:51.510 --> 00:05:56.310
still understand the context of what wrapper is supposed to represent and what is the core element that

94
00:05:56.310 --> 00:05:58.080
is under test, which is main NAV.

95
00:05:58.290 --> 00:06:03.690
And the implementation that we had at the start of this lesson I feel didn't communicate that as effectively,

96
00:06:03.870 --> 00:06:07.860
but obviously can be a matter of opinion and can certainly vary from developer to developer.

97
00:06:08.160 --> 00:06:11.490
So regardless, I think this is a good place to leave the test suite.

98
00:06:11.520 --> 00:06:17.310
Our original goal was just to fix our warnings and we figured out how to do that using the Global Stubs

99
00:06:17.310 --> 00:06:23.280
property and providing the router link stub component to replace the real use of the router link child

100
00:06:23.280 --> 00:06:24.150
component in May.

101
00:06:24.150 --> 00:06:28.080
Now we've solved that fundamental problem that came from the View Router Library.

102
00:06:28.260 --> 00:06:32.400
So with that, we are good to wrap up this section and review everything that we've learned.
