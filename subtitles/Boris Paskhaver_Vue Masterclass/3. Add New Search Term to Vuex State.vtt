WEBVTT
1
00:00:00.660 --> 00:00:01.260
Okay.

2
00:00:01.260 --> 00:00:07.170
So we are going to take inspiration from some of our previous work when it comes to storing the user's

3
00:00:07.170 --> 00:00:10.020
search term that they provide in the skills input.

4
00:00:10.320 --> 00:00:14.040
What I'm actually going to do is store it as part of our view store state.

5
00:00:14.340 --> 00:00:20.010
And the reason I'm going to do it is to make it very simple in our getters, to use that term, that

6
00:00:20.010 --> 00:00:26.490
search term, that is to filter down our filter jobs alongside all of the other criteria like the selected

7
00:00:26.490 --> 00:00:28.980
organizations and the selected job types, etc..

8
00:00:29.370 --> 00:00:34.920
What I am going to show you in this section later on is how we can actually solve the problem we ran

9
00:00:34.920 --> 00:00:41.290
into in the previous section where we had duplicate state in both view acts as well as in a local component.

10
00:00:41.310 --> 00:00:46.860
I'm going to show you an alternate solution to that problem in the section A compared to the subscribe

11
00:00:46.860 --> 00:00:48.480
method which we introduced previously.

12
00:00:48.810 --> 00:00:54.780
But regardless, for now, I just want to write a test to represent the property that's going to be

13
00:00:54.780 --> 00:00:56.880
added to our unique store state.

14
00:00:57.210 --> 00:00:59.640
So right here I've opened up my state dots file.

15
00:00:59.670 --> 00:01:04.560
On the left here we have our initial function that returns the starting state of our view store.

16
00:01:04.830 --> 00:01:08.700
And on the right hand side I have the corresponding state, that test file.

17
00:01:08.880 --> 00:01:13.020
And here I want to write my test following a test driven development approach.

18
00:01:13.440 --> 00:01:14.700
So I'm going to scroll down a little bit.

19
00:01:15.600 --> 00:01:16.650
And how about right here?

20
00:01:16.650 --> 00:01:18.000
I'm going to add my new test.

21
00:01:18.530 --> 00:01:25.620
I'm going to say it's stores user's search term for skills and qualifications.

22
00:01:27.300 --> 00:01:27.630
All right.

23
00:01:27.630 --> 00:01:32.430
So again, following our design paradigms from the previous sections that we're going to build out our

24
00:01:32.430 --> 00:01:36.270
view logic and then we're going to transition to actually adding it to our component.

25
00:01:36.660 --> 00:01:41.610
So right here, very similar to the tests above, I'm going to invoke my state function and I'm going

26
00:01:41.610 --> 00:01:44.130
to assign it to a starting state constant.

27
00:01:45.510 --> 00:01:50.160
And I'm going to expect that my starting state object will have a new property, and it's up to us to

28
00:01:50.160 --> 00:01:51.750
decide what we want it to be called.

29
00:01:52.050 --> 00:01:54.690
I'm going to call it skills search term.

30
00:01:55.410 --> 00:02:00.570
And obviously when it starts out, we anticipate that it should be empty because the user hasn't entered

31
00:02:00.570 --> 00:02:01.260
anything yet.

32
00:02:01.560 --> 00:02:04.410
So I'm going to say that it should be an empty string.

33
00:02:05.270 --> 00:02:09.800
And of course, TypeScript is going to complain because it says you don't have a skills search term

34
00:02:10.070 --> 00:02:12.800
property available on this global state interface.

35
00:02:13.160 --> 00:02:17.030
So before I add it right here, the first thing I'm actually going to do is go to my right types.

36
00:02:17.030 --> 00:02:18.200
That's far right here.

37
00:02:18.800 --> 00:02:24.050
So in types that's in the source store directory is where I have my global state interface and it's

38
00:02:24.050 --> 00:02:26.960
here that I'm going to define my new property.

39
00:02:27.170 --> 00:02:30.100
So now this interface should have this exact property.

40
00:02:30.110 --> 00:02:35.990
It's going to be called skills search term and it's going to be a string, a single string representing

41
00:02:35.990 --> 00:02:38.510
the user's typed entry into that input.

42
00:02:38.690 --> 00:02:43.970
And then I'm going to use that string to filter our jobs array right here so that when I save this file

43
00:02:43.970 --> 00:02:49.040
and I go back to status, you can see that TypeScript is going to be unhappy because we just told it

44
00:02:49.040 --> 00:02:54.770
that global state must have a skill search term property, such a string, but we don't have that anymore.

45
00:02:54.920 --> 00:02:59.330
So this object doesn't live up to the promise of honoring this global state interface.

46
00:02:59.630 --> 00:03:04.820
So in order to fix this typescript problem and also to get our test to pass, what I'm going to do is

47
00:03:04.820 --> 00:03:07.640
add a new property here called the skills search term.

48
00:03:07.970 --> 00:03:10.550
And of course, I'm going to initialize it to be an empty string.

49
00:03:10.820 --> 00:03:12.650
Don't forget to add the comma and save.

50
00:03:13.620 --> 00:03:16.020
And with that, we're going to let our tests run.

51
00:03:17.010 --> 00:03:20.550
And if everything was done correctly, we should see everything pass.

52
00:03:21.150 --> 00:03:24.620
Looks like there are quite a few components relying on the View Store state, which makes sense.

53
00:03:24.620 --> 00:03:28.170
So it runs all the tests associated or utilizing that state.

54
00:03:28.410 --> 00:03:29.040
But there we go.

55
00:03:29.070 --> 00:03:32.820
Everything is passing, which means we now have a new property on our store state.

56
00:03:33.180 --> 00:03:33.420
All right.

57
00:03:33.420 --> 00:03:35.040
That's all there is to cover in this lesson.

58
00:03:35.040 --> 00:03:36.690
So I will see you in the next one.
