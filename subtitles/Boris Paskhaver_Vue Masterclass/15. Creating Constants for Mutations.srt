1
00:00:00,540 --> 00:00:01,470
Okay.

2
00:00:01,470 --> 00:00:06,930
So in this lesson, we're going to make a small refactor in our main nav component.

3
00:00:07,230 --> 00:00:13,560
You may have noticed right here that when we invoke the commit method, we are passing a string in line.

4
00:00:13,560 --> 00:00:19,800
We are typing this log in user string which represents the mutation we want to run on our view.

5
00:00:19,830 --> 00:00:26,040
X4 Now imagine hypothetically that we ran this mutation from three or four different components.

6
00:00:26,400 --> 00:00:32,370
Whenever we write a string in line like this, we always open up the possibility that we can make a

7
00:00:32,370 --> 00:00:37,920
typo, that we can include an extra character or exclude a character or type the wrong casing, etc.

8
00:00:38,190 --> 00:00:43,740
And especially if we have multiple places or multiple components in our app that are issuing the same

9
00:00:43,740 --> 00:00:47,280
mutation, we always introduce the possibility of a typo.

10
00:00:47,940 --> 00:00:53,640
So one way that we can solve this is by creating a constant that stores the correct mutation name and

11
00:00:53,640 --> 00:00:59,430
then simply referencing that constant anywhere where we want to commit that mutation, and that just

12
00:00:59,430 --> 00:01:01,170
reduces the chance of error.

13
00:01:01,500 --> 00:01:02,700
So let me show you what we're going to do.

14
00:01:02,700 --> 00:01:05,580
We're going to open up our store index file.

15
00:01:05,760 --> 00:01:07,290
This is where we configure our store.

16
00:01:07,620 --> 00:01:12,990
And at the very top here, I'm going to create and export a constant and I'm literally going to call

17
00:01:12,990 --> 00:01:14,040
it log in user.

18
00:01:14,310 --> 00:01:18,840
And all it's going to be is just that string of log in underscore user.

19
00:01:19,110 --> 00:01:23,430
So this is where I have to be super careful that I typed the name of the mutation correctly.

20
00:01:23,760 --> 00:01:29,850
In fact, one optimization that we can make here is we can use this string right here as the name of

21
00:01:29,850 --> 00:01:30,900
our method right here.

22
00:01:31,170 --> 00:01:33,690
They are exactly the same, and I know that.

23
00:01:33,840 --> 00:01:39,780
But it's going to be a dynamic reference to whatever we have here, and that just ensures that wherever

24
00:01:39,780 --> 00:01:41,640
we use this log in use are constant.

25
00:01:41,970 --> 00:01:48,120
Even if this is a typo, we're always going to reference a valid mutation on our store.

26
00:01:48,300 --> 00:01:52,950
So what I mean by that is, let's say we accidentally made this log in users.

27
00:01:53,190 --> 00:01:59,310
Well, once I replace this property with a dynamic reference to a constant, which I can do as a reminder

28
00:01:59,310 --> 00:02:00,450
with my square brackets.

29
00:02:00,720 --> 00:02:05,640
So here I'm going to reference my log in, use our constant above, which is going to be whatever string

30
00:02:05,640 --> 00:02:06,240
this is.

31
00:02:06,240 --> 00:02:08,370
Let's say hypothetically, this is nonsense, right?

32
00:02:09,000 --> 00:02:12,750
In that case, we now have a method called nonsense on our mutations object.

33
00:02:13,140 --> 00:02:18,750
So wherever we use the log in user constant throughout the app, as long as we know that we must always

34
00:02:18,750 --> 00:02:21,960
commit a mutation by providing a string referenced by a constant.

35
00:02:22,260 --> 00:02:28,290
Even if this is something like nonsense, it's still going to reference a valid mutation on our mutation

36
00:02:28,290 --> 00:02:33,510
object, and there's now no chance of an actual typo because we're always going to reference something

37
00:02:33,510 --> 00:02:36,510
that has to be an actual valid mutation method.

38
00:02:36,870 --> 00:02:37,110
All right.

39
00:02:37,110 --> 00:02:38,640
That's the advantage of this approach.

40
00:02:38,940 --> 00:02:40,890
So I'm going to change this back to log in user.

41
00:02:42,800 --> 00:02:46,040
And we still have a logging user method on our mutations object.

42
00:02:46,040 --> 00:02:51,440
We're just getting its method name from this constant right here and now that allows me and Main NAV

43
00:02:51,620 --> 00:02:53,390
to import that constant.

44
00:02:53,390 --> 00:02:56,660
So what I'm going to do is I'm going to scroll up to where we begin.

45
00:02:58,330 --> 00:03:00,370
Our script section of the component.

46
00:03:00,670 --> 00:03:07,090
So right here and what I'm going to do is I'm going to import the log in user constant and that is going

47
00:03:07,090 --> 00:03:09,670
to come from my top level source directory.

48
00:03:09,670 --> 00:03:13,230
And then we have our store folder and there is where we have our index that Yes.

49
00:03:13,240 --> 00:03:16,270
File with that exported constant of log in user.

50
00:03:16,600 --> 00:03:22,900
So now I'm going to scroll down and instead of writing this string in line and opening it up to typos,

51
00:03:23,050 --> 00:03:28,780
I'm just going to pass in the log in user constant, which is going to be a reference to a method that

52
00:03:28,780 --> 00:03:34,690
I can guarantee will exist on the mutations object because we have dynamically referenced that constant

53
00:03:34,810 --> 00:03:39,040
as a property right here rather than writing out logging user here in line.

54
00:03:39,250 --> 00:03:40,360
Hopefully that makes sense.

55
00:03:40,630 --> 00:03:42,880
But with that we have completed our refactor.

56
00:03:42,880 --> 00:03:45,970
We have extracted the log in user string to its own constant.

57
00:03:46,060 --> 00:03:52,570
And now if we have any other mutations throughout the app or rather any other mutations to the store

58
00:03:52,570 --> 00:03:58,810
that will use the log in user mutation, we can continue to use this log in user constant and reduce

59
00:03:58,810 --> 00:04:01,690
the chances we have of a typo in our component.

60
00:04:02,050 --> 00:04:02,320
All right.

61
00:04:02,320 --> 00:04:03,910
That's all there is to cover in this lesson.

62
00:04:03,910 --> 00:04:05,530
So I will see you in next one.
