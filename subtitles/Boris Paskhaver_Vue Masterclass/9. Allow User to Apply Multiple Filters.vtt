WEBVTT
1
00:00:00.750 --> 00:00:01.380
Okay.

2
00:00:01.380 --> 00:00:07.350
So we have now confirmed in our job listings component that we are able to use either one of these two

3
00:00:07.350 --> 00:00:09.150
getters to filter our jobs.

4
00:00:09.420 --> 00:00:15.300
Either this get it right here, filter jobs by organizations or this go right here, filter jobs by

5
00:00:15.300 --> 00:00:15.990
job types.

6
00:00:16.230 --> 00:00:21.900
We can use them individually, independently, but of course, we ultimately want to combine them into

7
00:00:21.900 --> 00:00:26.070
one so that the user can filter jobs by multiple criteria.

8
00:00:26.370 --> 00:00:31.920
So what I propose we do is that we introduce a new getter that I'll simply call filtered jobs.

9
00:00:32.130 --> 00:00:38.010
And the goal there will be to use the logic across both of these getters to filter our original array

10
00:00:38.010 --> 00:00:40.140
of jobs in the View Store State.

11
00:00:40.590 --> 00:00:44.880
So this time around, since we're introducing a new feature and I want to keep things moving forward,

12
00:00:45.090 --> 00:00:47.610
let's skip writing tests for now.

13
00:00:47.610 --> 00:00:49.650
We're going to come back to tests a little bit later.

14
00:00:49.830 --> 00:00:53.730
But for now, let's see if we can get a quick and dirty implementation up and running.

15
00:00:54.090 --> 00:00:58.620
So in order to create a new filter jobs getter, I'm going to start with my constants.

16
00:00:58.960 --> 00:01:01.350
So I'm going to open up that file right here.

17
00:01:01.350 --> 00:01:03.810
Constance J in our source store folder.

18
00:01:04.230 --> 00:01:08.040
And right here in my jobs category, I'm going to create a new const.

19
00:01:09.540 --> 00:01:11.400
Called filtered jobs.

20
00:01:13.430 --> 00:01:18.260
This time around is not going to be just the concept of filtering specifically by organization or job

21
00:01:18.260 --> 00:01:18.500
types.

22
00:01:18.530 --> 00:01:23.210
I'm going to give it the generic name filter jobs which which can incorporate what we've built so far

23
00:01:23.210 --> 00:01:27.110
and potentially any other filters that we want to add to our project later.

24
00:01:27.740 --> 00:01:28.130
All right.

25
00:01:28.130 --> 00:01:30.290
So that brings us back to our Getters Jast file.

26
00:01:30.320 --> 00:01:33.830
Here, I can import my new filter job's constant.

27
00:01:34.910 --> 00:01:39.050
And down below here, I can define my new filter jobs.

28
00:01:40.280 --> 00:01:40.700
Get her.

29
00:01:40.850 --> 00:01:41.640
What does it matter?

30
00:01:41.660 --> 00:01:46.970
It's a method that accepts the View Store State as its first argument and returns whatever you'd like

31
00:01:46.970 --> 00:01:47.270
from it.

32
00:01:47.630 --> 00:01:50.570
So here's what I did when I was building this project out.

33
00:01:50.570 --> 00:01:52.070
I actually made a mistake.

34
00:01:52.070 --> 00:01:53.660
I made a technical bug.

35
00:01:53.840 --> 00:01:58.610
But I do want to keep it in showing you my implementation because I want to treat it as if we're building

36
00:01:58.610 --> 00:02:01.310
a real world project and we're just pair programming together.

37
00:02:01.610 --> 00:02:03.800
So I want to show you the implementation that I built.

38
00:02:04.040 --> 00:02:08.090
Then we're going to run into a bug a little bit later and we're going to talk about what's wrong with

39
00:02:08.420 --> 00:02:11.000
the implementation that I'm about to write right now.

40
00:02:11.720 --> 00:02:17.750
So what I basically did is I looked at each individual getter and I said, okay, if the length of the

41
00:02:17.760 --> 00:02:23.840
selected organization slice of UX is zero and the length of the selected job types arrays is zero as

42
00:02:23.840 --> 00:02:28.970
well, then the user has not selected any possible criteria to filter by.

43
00:02:28.980 --> 00:02:34.310
And that's when I want to return all of the original jobs represented by state dot jobs.

44
00:02:34.640 --> 00:02:40.250
So the first thing I did is try to capture these statements right here in a single if statement right

45
00:02:40.250 --> 00:02:40.520
here.

46
00:02:41.180 --> 00:02:43.010
So what I did is I created two constants.

47
00:02:43.580 --> 00:02:49.810
The first one I called no selected organizations and that was basically just the name to check whether

48
00:02:49.820 --> 00:02:53.960
state that selected organization's dot length was equal to zero.

49
00:02:54.260 --> 00:02:57.620
So accessing that array of strings, checking if its length was equal to zero.

50
00:02:57.740 --> 00:03:00.950
If that is true, then there are no selected organizations.

51
00:03:01.250 --> 00:03:03.740
Similarly, I created another constant for.

52
00:03:04.880 --> 00:03:05.490
No.

53
00:03:05.510 --> 00:03:15.730
Selected job types and that I assigned to state that selected job types having a length equal to zero.

54
00:03:15.780 --> 00:03:22.010
The same logic if that array of strings representing the users choices is equal to zero, that means

55
00:03:22.010 --> 00:03:22.850
there's no content.

56
00:03:22.850 --> 00:03:26.300
The user has made no selections, so no selected job types.

57
00:03:26.600 --> 00:03:35.540
Then on the next line I said if no selected organisations and no selected job types, meaning the user

58
00:03:35.540 --> 00:03:37.550
has not made any choices whatsoever.

59
00:03:37.760 --> 00:03:46.400
Then I wanted to return the array of jobs represented by state jobs so we can do a condition here and

60
00:03:46.400 --> 00:03:48.140
right return state that jobs.

61
00:03:49.420 --> 00:03:54.370
And one way we can actually simplify this in JavaScript is you can actually remove the curly braces

62
00:03:54.370 --> 00:03:57.370
from an if statement, if you have a single one liner like so.

63
00:03:57.700 --> 00:04:02.590
So what we can do is remove the curly brace above and remove the curly brace below and simply return

64
00:04:02.590 --> 00:04:04.150
state jobs like XL.

65
00:04:04.630 --> 00:04:10.060
So I thought that this logic was going to be sufficient to capture the idea of no selections and avoiding

66
00:04:10.060 --> 00:04:13.510
the bug we saw earlier of having the screen load nothing.

67
00:04:13.750 --> 00:04:17.440
As it turns out, this is actually not good enough, but we'll talk about that in a second.

68
00:04:17.860 --> 00:04:24.910
So the next thing I did was I said, let's have two filter method invocations on state jobs because

69
00:04:24.910 --> 00:04:29.290
we know that state that jobs is the original array that I'm starting with and I want to filter it,

70
00:04:29.500 --> 00:04:35.170
but not just once, but twice, once for the logic of organizations and once for the logic for job tips.

71
00:04:35.410 --> 00:04:41.320
And rather than cram that all into a single filter method call, I decided to split it up across two

72
00:04:41.380 --> 00:04:42.640
separate method calls.

73
00:04:43.030 --> 00:04:46.000
So essentially what I did was something like this returns state that jobs.

74
00:04:46.990 --> 00:04:51.220
And I said, I want to filter this array and here I'm going to provide my filter function.

75
00:04:51.520 --> 00:04:55.960
So for each job, the first thing I want to check is for organizations.

76
00:04:56.170 --> 00:05:01.870
So I copied this line right here, the one that says Check whether the jobs organization is found within

77
00:05:01.870 --> 00:05:03.430
the selected organization's array.

78
00:05:03.760 --> 00:05:06.940
So I'm going to copy that line down below like so.

79
00:05:07.210 --> 00:05:11.680
And then this is going to filter my original array of jobs and give me back a new array.

80
00:05:11.890 --> 00:05:18.220
And then on that array I'm going to call the filter method once again and pass in my second filter operation.

81
00:05:19.370 --> 00:05:21.320
And that is checking for the job types.

82
00:05:21.470 --> 00:05:24.290
So that involved me copying this line right here.

83
00:05:25.730 --> 00:05:26.810
Pasting it right here.

84
00:05:28.070 --> 00:05:28.820
And there we go.

85
00:05:29.000 --> 00:05:33.740
Now, the reason I like this approach, instead of doing something like this where I put everything

86
00:05:33.740 --> 00:05:38.180
in one line like so with an and operator, is because I think it makes it a little bit cleaner and a

87
00:05:38.180 --> 00:05:41.700
little bit more isolated by doing two filter method calls.

88
00:05:41.720 --> 00:05:47.090
I can kind of break apart each individual responsibility, especially with prettier breaking up each

89
00:05:47.090 --> 00:05:48.590
method call on a single line.

90
00:05:48.830 --> 00:05:53.930
It kind of follows the more of a functional programming paradigm where each thing is just starting with

91
00:05:53.930 --> 00:05:58.400
an original bit of state and then narrowing it down to the next smaller subset of items.

92
00:05:58.700 --> 00:06:03.020
I think it just reads a little bit cleaner, it makes the lines shorter, and it also paves the way

93
00:06:03.020 --> 00:06:04.550
for eventually adding more filters.

94
00:06:04.760 --> 00:06:08.390
You can imagine if I have, for example, four or five different criteria.

95
00:06:08.510 --> 00:06:12.430
I don't want to have four and five, you know, and statements in a single line.

96
00:06:12.440 --> 00:06:14.570
I'd rather just run the filter four or five times.

97
00:06:14.720 --> 00:06:17.440
So each operation belongs on a single line.

98
00:06:17.450 --> 00:06:18.980
It just reads very easily.

99
00:06:19.700 --> 00:06:22.490
First, here's the bit of logic for filtering by organizations.

100
00:06:22.700 --> 00:06:28.250
Then take that array, filter it again for the jobs that fit the job types criteria, and that the very

101
00:06:28.250 --> 00:06:30.050
end of the day, you're going to get another array.

102
00:06:30.050 --> 00:06:34.490
And that's ultimately what I'm going to return for my filtered jobs array right here.

103
00:06:34.850 --> 00:06:35.120
All right.

104
00:06:35.120 --> 00:06:36.110
So that's where I started.

105
00:06:36.110 --> 00:06:37.430
That was my first implementation.

106
00:06:37.550 --> 00:06:41.810
We're going to try to use this getter in the component in the very next lesson and see that it's not

107
00:06:41.810 --> 00:06:42.920
going to work quite right.
