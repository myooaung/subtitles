WEBVTT
1
00:00:00.510 --> 00:00:01.110
Okay.

2
00:00:01.110 --> 00:00:07.170
So with our app now completely in TypeScript, I think it's a good time to relaunch our view server

3
00:00:07.350 --> 00:00:11.100
and verify that everything is still working within our browser.

4
00:00:11.280 --> 00:00:13.910
So here I am on the job results page.

5
00:00:13.920 --> 00:00:18.570
This is the most important page of the app and I'm just going to do a quick refresh to make sure everything

6
00:00:18.570 --> 00:00:22.560
loads correctly and looks like everything is working out pretty well.

7
00:00:22.860 --> 00:00:26.010
If I sign in here, it looks like that interactivity is working.

8
00:00:26.190 --> 00:00:28.680
We have our number of jobs matched here.

9
00:00:28.950 --> 00:00:33.360
For example, in the organization section I can select a sample organization like YouTube.

10
00:00:33.540 --> 00:00:36.450
These jobs do update this number updates as well.

11
00:00:36.600 --> 00:00:39.150
I can also filter for example, by job types.

12
00:00:39.360 --> 00:00:46.470
Everything is looking like it's working pretty well as I select and then deselect all of these different

13
00:00:46.470 --> 00:00:46.770
jobs.

14
00:00:47.010 --> 00:00:48.120
So everything is looking good.

15
00:00:48.120 --> 00:00:49.350
And now congratulations.

16
00:00:49.350 --> 00:00:51.270
Our entire app is in TypeScript.

17
00:00:51.510 --> 00:00:56.190
What you can say is the most modern language now being used on the front end because TypeScript is kind

18
00:00:56.190 --> 00:01:01.650
of taking over everything and now we know how to work with it in both view X as well as our actual view

19
00:01:01.650 --> 00:01:02.100
components.

20
00:01:02.430 --> 00:01:06.750
So with that, let's transition to the slide deck and we'll talk about everything we learned in this

21
00:01:06.750 --> 00:01:07.170
section.

22
00:01:08.570 --> 00:01:09.050
Okay.

23
00:01:09.050 --> 00:01:10.970
So let's recap everything we learned.

24
00:01:11.210 --> 00:01:17.060
In this section, we focused on adding TypeScript to our actual view components themselves, and in

25
00:01:17.060 --> 00:01:19.190
order to do that, we must follow two steps.

26
00:01:19.520 --> 00:01:25.640
The first step is we must add a lang attribute to the script tag, and we must set its value to the

27
00:01:25.640 --> 00:01:26.120
value.

28
00:01:26.120 --> 00:01:29.000
T, s and T as of course is short for TypeScript.

29
00:01:29.240 --> 00:01:35.270
And as soon as you do that, Vue and your code editor will realize that that script section consists

30
00:01:35.270 --> 00:01:36.290
of TypeScript code.

31
00:01:36.590 --> 00:01:41.750
The second thing we need to do for better type checking is we need to import the defined component function

32
00:01:41.750 --> 00:01:44.120
from view and we invoke it and we pass it.

33
00:01:44.120 --> 00:01:50.420
The component configuration object that we typically have in our script section make the functions return

34
00:01:50.420 --> 00:01:50.840
value.

35
00:01:50.840 --> 00:01:56.480
And by that I mean the defined component functions return value, the default export of the script section.

36
00:01:56.720 --> 00:02:02.600
So basically all we need to do is take our former object, wrap it in a defined component function call

37
00:02:02.600 --> 00:02:09.500
and make that the final export default value of that script section in your in your component found.

38
00:02:10.170 --> 00:02:15.320
All right TypeScript will do its best to infer the correct types, and it will work for both Options

39
00:02:15.320 --> 00:02:17.030
API and component API.

40
00:02:17.270 --> 00:02:18.950
But it's capable of making mistakes.

41
00:02:18.950 --> 00:02:19.940
It's not perfect.

42
00:02:20.120 --> 00:02:23.600
So if it makes a mistake, simply give it an explicit type annotation.

43
00:02:23.840 --> 00:02:28.910
And as I mentioned in the previous slide, the good news is once you add that Lang attribute, you can

44
00:02:28.910 --> 00:02:32.390
use any valid TypeScript code within that script section.

45
00:02:32.510 --> 00:02:37.730
So if you want to define an interface, for example, to define the shape of an object or the shape

46
00:02:37.730 --> 00:02:41.480
of a return value from a composable function, you totally can, right?

47
00:02:41.480 --> 00:02:44.000
So you treat that as a regular typescript file.

48
00:02:44.330 --> 00:02:49.100
That is what happens between the opening script tag and the closing script tag and use whatever you

49
00:02:49.100 --> 00:02:51.620
need it to be able to provide TypeScript more clarity.

50
00:02:51.740 --> 00:02:55.160
You don't necessarily need to do everything in the configuration object.

51
00:02:55.250 --> 00:03:00.110
You can declare, for example, an object type above as an interface just to make that section a little

52
00:03:00.110 --> 00:03:01.220
bit easier to read.

53
00:03:02.210 --> 00:03:02.570
All right.

54
00:03:02.810 --> 00:03:08.030
When it comes to testing, we saw a big problem, which is the use of the just mock method and the fact

55
00:03:08.030 --> 00:03:14.420
that TypeScript did not understand that we were replacing the default imported functions with just mock

56
00:03:14.420 --> 00:03:15.320
functions instead.

57
00:03:15.320 --> 00:03:16.850
That's what just mock does for us.

58
00:03:17.000 --> 00:03:19.580
But TypeScript has no way of knowing how that library works.

59
00:03:19.820 --> 00:03:24.950
But that's not a problem, because in that case we can simply use that as keyword to tell TypeScript

60
00:03:25.070 --> 00:03:27.710
to treat an object as having a different type.

61
00:03:27.920 --> 00:03:31.250
More specifically, we tell it to have the type just mock again.

62
00:03:31.250 --> 00:03:33.860
That doesn't create a new object or a new copy.

63
00:03:34.370 --> 00:03:37.940
Rather, what it does is create a new interpretation of an existing object.

64
00:03:38.120 --> 00:03:43.580
TypeScript now understands that it has a different type and thus it can verify that when we call methods

65
00:03:43.790 --> 00:03:49.940
like mock return value and now realizes that mock return value is a valid method on something like a

66
00:03:49.940 --> 00:03:54.380
mock function object or of an object having a type of just that mock.

67
00:03:54.500 --> 00:03:56.180
And thus it's not going to complain.

68
00:03:56.330 --> 00:03:56.660
All right.

69
00:03:57.350 --> 00:03:58.540
So we simply declare a contest.

70
00:03:58.730 --> 00:04:03.410
We declare a new name for our mock, and then we take our existing import and then use the ASCII word

71
00:04:03.410 --> 00:04:05.180
to cast it as being of type.

72
00:04:05.360 --> 00:04:06.050
Just mock.

73
00:04:06.530 --> 00:04:07.160
All right.

74
00:04:07.160 --> 00:04:11.750
We also saw the benefits of exploring the types for functions and classes from other libraries.

75
00:04:11.960 --> 00:04:17.510
For example, we discovered that the Axios get method accepts a generic type argument and that type,

76
00:04:17.510 --> 00:04:21.710
that shape represents the object type of the eventual API response.

77
00:04:21.710 --> 00:04:26.510
In that scenario, TypeScript is not going to make an API request for you when we're using the Axios

78
00:04:26.510 --> 00:04:26.990
get method.

79
00:04:27.140 --> 00:04:31.730
So we do have to provide that clarity because in that situation it has no clue what to expect.

80
00:04:32.390 --> 00:04:37.550
But every time we add more specific types, we give more details to TypeScript so that it can infer

81
00:04:37.550 --> 00:04:37.880
better.

82
00:04:38.030 --> 00:04:43.370
So for example, if we tell TypeScript in this function, are you using Axios that get and get is going

83
00:04:43.370 --> 00:04:44.600
to get an object of the shape.

84
00:04:44.750 --> 00:04:50.030
If we return that data as the final return value of that function, then whenever we use that function

85
00:04:50.030 --> 00:04:55.640
that relies on actions that get TypeScript will understand that that return value will be of the exact

86
00:04:55.640 --> 00:04:58.400
same shape as we specified to the generic type.

87
00:04:58.610 --> 00:05:03.980
And then it can verify in a totally separate, different file that the properties we access are correct,

88
00:05:04.100 --> 00:05:09.050
that they exist, they are of the right type, that we are performing valid operations on them, etc.

89
00:05:09.320 --> 00:05:11.870
So TypeScript will infer some things that's going to be incorrect.

90
00:05:11.990 --> 00:05:16.160
And for other things, TypeScript simply will not infer because it has no way of knowing.

91
00:05:16.160 --> 00:05:16.400
Right?

92
00:05:16.610 --> 00:05:21.050
And in those situations we can be more clear and precise by providing more specific annotations.

93
00:05:21.290 --> 00:05:22.940
There's still going to be parts that you miss.

94
00:05:22.940 --> 00:05:27.050
It's it's a normal part of working with TypeScript, especially in code bases with a lot of files.

95
00:05:27.320 --> 00:05:31.700
But as always, when you notice that something is missing like a generic type and you feel that you

96
00:05:31.700 --> 00:05:36.500
as a developer can add something to make it more clear to TypeScript or to other developers what is

97
00:05:36.500 --> 00:05:36.980
going on.

98
00:05:37.190 --> 00:05:39.290
Clarity to me is the most number one priority.

99
00:05:39.440 --> 00:05:42.320
So go ahead and add that additional annotation as needed.

100
00:05:43.280 --> 00:05:43.610
All right.

101
00:05:43.790 --> 00:05:50.420
We also saw that when we were using the use store composable function within a component that it wasn't

102
00:05:50.420 --> 00:05:53.330
properly interpreting the type of our actual store state.

103
00:05:53.590 --> 00:05:58.070
In order to enable that, we had to create a key and then we had to configure it in the file where we

104
00:05:58.070 --> 00:06:00.050
connect the actual view app to view X.

105
00:06:00.350 --> 00:06:03.650
That was our main test file and that's something we only have to do once.

106
00:06:03.650 --> 00:06:07.460
That is the connecting to the app and also the creation of the key, however.

107
00:06:07.640 --> 00:06:13.280
We also must pass that key into every indication of the use store composable function.

108
00:06:13.550 --> 00:06:18.020
So wherever we are using use store, we simply import the key from the file in which it's defined and

109
00:06:18.020 --> 00:06:21.100
then we pass that key as the first argument to use store.

110
00:06:21.380 --> 00:06:22.880
We have to do that both in a component.

111
00:06:22.880 --> 00:06:26.540
We also did it in some composable functions that relied on use store as well.

112
00:06:26.780 --> 00:06:28.430
The good news is you only have to do it once.

113
00:06:28.430 --> 00:06:35.150
Each time you use you store and then understand the type of that you store state and verify once again

114
00:06:35.150 --> 00:06:38.320
that the properties are valid, that you're doing valid things with them, etc..

115
00:06:39.110 --> 00:06:39.470
All right.

116
00:06:39.620 --> 00:06:42.830
Speaking of composable, we talked a little bit about how to declare interfaces.

117
00:06:43.040 --> 00:06:48.950
You're more than welcome to use the exact interfaces that a library like view or a view router or view

118
00:06:48.950 --> 00:06:49.700
X will provide.

119
00:06:49.700 --> 00:06:52.520
And many times that will be automatic from TypeScript inference.

120
00:06:52.790 --> 00:06:57.920
But I also think it's okay to use simpler interfaces if it will make it easier to understand the code

121
00:06:57.920 --> 00:06:59.180
and also easier to test.

122
00:06:59.390 --> 00:07:03.620
Because remember, the more complex the interface, the more requirements you're putting on it, the

123
00:07:03.620 --> 00:07:05.810
more that test has to live up to that interface.

124
00:07:06.020 --> 00:07:11.990
And that may make your tests very closely connected to the official implementation or exact library

125
00:07:11.990 --> 00:07:12.590
you're working with.

126
00:07:12.860 --> 00:07:17.360
The more that you simplify things to kind of their bare essentials, for example, instead of a full

127
00:07:17.360 --> 00:07:22.880
view reactive object, you describe it as having a type of a much simpler object with a value property

128
00:07:22.880 --> 00:07:28.670
set to a string that is a much more lightweight type, that is more separate from the idea of view and

129
00:07:28.670 --> 00:07:33.380
view X, which thus makes your code a little bit more separate and independent and thus more easily

130
00:07:33.380 --> 00:07:40.100
changeable because it's not so dependent and coupled on x precisely using the idea of a view reactive

131
00:07:40.100 --> 00:07:44.600
object compared to a much more simpler dependency like an object with a value property.

132
00:07:44.810 --> 00:07:46.640
So feel free to use simpler interfaces.

133
00:07:46.640 --> 00:07:48.620
There's no real perfect right answer.

134
00:07:48.620 --> 00:07:50.390
Sometimes you need to use the real world thing.

135
00:07:50.510 --> 00:07:53.810
Sometimes you can get away with a mock or a smaller, more lightweight object.

136
00:07:54.050 --> 00:07:58.700
See what feels right to you and your team and just continue working on something that is again, easy

137
00:07:58.700 --> 00:08:03.530
to read, easier to understand, easier to test as well, because all of those factors affect what makes

138
00:08:03.530 --> 00:08:04.730
a good Vue code base.

139
00:08:05.090 --> 00:08:05.390
All right.

140
00:08:05.570 --> 00:08:09.740
So with that, there is that is all there is to cover in this lesson as well as the section.

141
00:08:09.920 --> 00:08:14.780
So in the very next lesson, we're going to review a lot of these ideas by building a brand new feature

142
00:08:14.900 --> 00:08:16.730
in TypeScript for our View app.

143
00:08:16.850 --> 00:08:17.510
I'll see you there.
