1
00:00:00,530 --> 00:00:01,360
Okay.

2
00:00:01,360 --> 00:00:05,170
So let's add some more tests for our job listings component.

3
00:00:05,410 --> 00:00:10,030
The next thing that I'd like to test is when the user is on the first page of job results.

4
00:00:10,210 --> 00:00:15,760
They should not see a link to the previous page of results, and they should see a link to the next

5
00:00:15,760 --> 00:00:17,070
page of results.

6
00:00:17,080 --> 00:00:18,250
In other words, page two.

7
00:00:18,670 --> 00:00:23,530
So in my job listings test file, I'm going to scroll all the way to the bottom and I'm going to add

8
00:00:23,530 --> 00:00:27,040
a new describe function to describe the scenario under which I'm testing.

9
00:00:27,490 --> 00:00:35,410
So when the user is on first page of job results and here I'm going to provide my arrow function, and

10
00:00:35,410 --> 00:00:38,380
I think our two tests here are going to be pretty similar.

11
00:00:38,380 --> 00:00:42,220
So I'm going to write out their descriptions just to start things off, and then we'll populate them

12
00:00:42,220 --> 00:00:43,660
side by side with one another.

13
00:00:43,990 --> 00:00:47,260
So the first thing we want to test is when the user's on the first page.

14
00:00:47,620 --> 00:00:53,890
It does not show link to previous page because of course there is no previous page.

15
00:00:54,400 --> 00:00:59,050
I'm going to provide the arrow function here in line and then immediately below I'll add another one.

16
00:00:59,080 --> 00:01:02,410
It shows link to next page.

17
00:01:03,310 --> 00:01:09,610
Now of course, all of this is assuming we have at least or more than ten job results, but we do have

18
00:01:09,610 --> 00:01:13,000
that hard wired in our Axios call above to return 15 jobs.

19
00:01:13,270 --> 00:01:14,320
So this should hold true.

20
00:01:14,770 --> 00:01:17,320
Okay, so now let's set up our tests right here.

21
00:01:17,770 --> 00:01:19,740
Begin by creating my query params.

22
00:01:19,750 --> 00:01:23,500
So Con square params is going to be an object with a page property.

23
00:01:23,500 --> 00:01:28,180
And I have of course, I'm going to assign it to a value of one where on the first page, then I'm going

24
00:01:28,180 --> 00:01:34,510
to create my root object and I'm going to get it by invoking my create root factory function, passing

25
00:01:34,510 --> 00:01:35,650
in my query params.

26
00:01:36,930 --> 00:01:37,410
Perfect.

27
00:01:37,680 --> 00:01:42,630
Then, of course, I'm going to create my wrapper by shallow mounting my job listings component.

28
00:01:42,960 --> 00:01:48,270
And of course to register that root object, we need to supply it as part of our configuration.

29
00:01:48,540 --> 00:01:53,520
So I'm going to invoke the create config function as my second argument to shallow amount and I'm going

30
00:01:53,520 --> 00:01:58,320
to pass in my round object and that is going to get us up and running and we're going to have the exact

31
00:01:58,320 --> 00:01:59,880
same setup for our second test.

32
00:01:59,880 --> 00:02:03,750
It's still the exact same criteria of being the very first page of job results.

33
00:02:04,050 --> 00:02:06,420
So right here I'm going to paste that code.

34
00:02:06,870 --> 00:02:12,630
And then of course, what I want to look for here is the nonexistence of a previous page link, and

35
00:02:12,630 --> 00:02:15,870
here I want to look for the existence of a next page link.

36
00:02:16,230 --> 00:02:22,800
So right here I'm going to say convert previous page and in my wrapper I'm going to look for a data

37
00:02:22,800 --> 00:02:23,670
test attribute.

38
00:02:23,670 --> 00:02:28,830
So remember to provide these square brackets and I'm looking for a data test at and I'll provide it

39
00:02:28,830 --> 00:02:32,880
with a name, let's say previous page link.

40
00:02:34,320 --> 00:02:34,710
All right.

41
00:02:34,920 --> 00:02:39,810
Now, when the users on the first page of job results, it does not show link to previous page.

42
00:02:40,110 --> 00:02:43,830
So if I invoke the exists method on what this returns.

43
00:02:44,460 --> 00:02:51,150
If view test utils is not able to find any valid HTML element that fits this criteria of having this

44
00:02:51,150 --> 00:02:53,940
down test attribute then exists will return false.

45
00:02:54,240 --> 00:02:55,500
So it should not exist.

46
00:02:55,510 --> 00:02:57,540
So this should be a false.

47
00:02:58,020 --> 00:03:02,700
I'm going to copy and paste this code below and you always have to be careful when copying and pasting

48
00:03:02,700 --> 00:03:06,420
just because you might accidentally leave some old information around.

49
00:03:06,450 --> 00:03:09,480
So in this test, we're not concerned about the previous page.

50
00:03:09,480 --> 00:03:11,250
We're concerned about the next page.

51
00:03:11,520 --> 00:03:14,580
So I'm going to change this to next page and I'm going to look for a date.

52
00:03:14,580 --> 00:03:18,960
It has to at boot of next page link and on the line below.

53
00:03:18,960 --> 00:03:20,280
This will also be next page.

54
00:03:20,460 --> 00:03:26,220
Except the difference here is when we're on the first page, the next page or page two should exist.

55
00:03:26,400 --> 00:03:28,020
So this should be true.

56
00:03:29,100 --> 00:03:34,170
I am going to save this and I'm going to run my test suite with NPM run, test, colon, watch.

57
00:03:34,560 --> 00:03:39,420
And we're actually going to see that one of our tests does not pass or both of them now, actually,

58
00:03:39,420 --> 00:03:43,200
because we don't have the data test attribute, we're getting a little bit ahead of ourselves, but

59
00:03:43,200 --> 00:03:43,770
that's fine.

60
00:03:44,010 --> 00:03:49,340
So of course, all we have to do is scroll up here and add the data test at boot to the router link.

61
00:03:49,350 --> 00:03:55,500
That's the thing that's actually rendering our dynamic links to either the previous page or the next

62
00:03:55,500 --> 00:03:55,770
page.

63
00:03:55,980 --> 00:04:00,420
So right here after class, I'm going to add my data test attribute just for the test.

64
00:04:00,690 --> 00:04:03,270
And here, of course, it's going to be previous page link.

65
00:04:03,810 --> 00:04:07,440
And down below, it's also going to be a data test attribute set to you.

66
00:04:07,650 --> 00:04:08,760
Next page link.

67
00:04:08,760 --> 00:04:10,530
The exact same thing I have in my test.

68
00:04:10,860 --> 00:04:11,610
Save that.

69
00:04:11,850 --> 00:04:15,570
Let's let the test rerun and we're going to see we have a failure.

70
00:04:15,840 --> 00:04:20,310
We're actually going to discover that this is due to a bug in our logic.

71
00:04:20,310 --> 00:04:22,290
We're going to figure out that bug in the next lesson.

72
00:04:22,440 --> 00:04:27,360
But I also want to walk you through the process of how I tried to solve this problem because I wasn't

73
00:04:27,360 --> 00:04:28,440
sure of what was happening.

74
00:04:28,710 --> 00:04:33,780
So my first thought as to what was going wrong was that it had something to do with the resolution of

75
00:04:33,780 --> 00:04:34,920
our mock function.

76
00:04:35,190 --> 00:04:40,470
So when we're worried, when we're thinking about this router link rendering, it's dependent on the

77
00:04:40,470 --> 00:04:42,750
value of the next page computed property.

78
00:04:43,020 --> 00:04:48,480
So what I did is I scroll down and I looked at the next page, computed property to remind myself and

79
00:04:48,480 --> 00:04:55,050
here we are reliant on the jobs data property and of course that jobs data property is populated by

80
00:04:55,050 --> 00:04:57,960
our mock return value from Axios.

81
00:04:58,200 --> 00:05:04,920
So if I scroll up in my test file as a reminder, we're telling get to be simulating.

82
00:05:04,920 --> 00:05:09,390
We're pretending to be a promise that resolves to be an object with a data property with an array of

83
00:05:09,390 --> 00:05:10,050
15 items.

84
00:05:10,320 --> 00:05:16,020
My first thought was for some reason this promise was not resolving in time to update the component

85
00:05:16,020 --> 00:05:17,820
and update the jobs property.

86
00:05:18,000 --> 00:05:23,520
We had this issue before it and you may recall that we used the flush promises function in order to

87
00:05:23,520 --> 00:05:29,730
solve this problem that ensures that all of our promises in the test resolve and thus update the component

88
00:05:29,730 --> 00:05:30,360
accordingly.

89
00:05:30,510 --> 00:05:36,360
So my first thought was that jobs was simply out of sync, and since I had flush promises already imported,

90
00:05:36,360 --> 00:05:39,930
I thought to myself, Well, let me try scrolling down to that function that is failing.

91
00:05:40,080 --> 00:05:46,020
And if I take a look here, it's on this test when users on the first page of job results shows link

92
00:05:46,020 --> 00:05:46,880
to next page.

93
00:05:47,130 --> 00:05:49,920
So I immediately identified it as this test right here.

94
00:05:50,160 --> 00:05:52,290
And what I did is I made this an async test.

95
00:05:53,490 --> 00:05:58,530
And of course after I mount the component, I have to wait for that promise to resolve in order to get

96
00:05:58,530 --> 00:06:00,600
the jobs and update the jobs data property.

97
00:06:00,840 --> 00:06:06,120
So here is where I awaited the flushing of the promise, or in other words, the resolution of the promise.

98
00:06:06,360 --> 00:06:10,200
So I awaited that flush promises function to complete its execution.

99
00:06:10,440 --> 00:06:15,000
Save this and I was saddened to discover that our test suite was still failing.

100
00:06:15,030 --> 00:06:15,330
All right.

101
00:06:15,480 --> 00:06:18,630
So I'm going to show you how I debugged this issue in the very next lesson.
