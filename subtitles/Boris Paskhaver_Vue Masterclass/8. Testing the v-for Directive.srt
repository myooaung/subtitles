1
00:00:00,670 --> 00:00:07,720
All right, so let's add a test for our newly added menu items that we used the V for loop to render.

2
00:00:07,960 --> 00:00:12,940
So right here in my main NAV test file, I'm going to add another test using the ID function.

3
00:00:13,840 --> 00:00:15,730
And let's think of a good description here.

4
00:00:15,970 --> 00:00:20,740
How about it displays menu items for navigation?

5
00:00:21,190 --> 00:00:21,760
Makes sense.

6
00:00:21,760 --> 00:00:23,950
Describes the user value of what we added.

7
00:00:24,310 --> 00:00:28,480
Then of course, I'm going to provide a second argument of a function.

8
00:00:28,720 --> 00:00:33,190
And here is where we write our code to test the logic for mounting.

9
00:00:33,190 --> 00:00:35,980
Our main NAV component is going to be pretty much the same.

10
00:00:36,010 --> 00:00:42,040
So I'm going to copy the code from above content wrapper and we're going to mount our main nav component.

11
00:00:43,220 --> 00:00:48,470
At this point, what I'd like to introduce you to is a special method that's available on our rapper

12
00:00:48,470 --> 00:00:50,390
object called Find.

13
00:00:50,630 --> 00:00:55,700
What find is going to do is allow us to search for certain elements within our template.

14
00:00:55,910 --> 00:01:00,050
And when I say elements, I'm not just limiting it to HTML elements.

15
00:01:00,200 --> 00:01:08,240
We can also search for things like access classes or IDs and even more specific ways that we can target

16
00:01:08,420 --> 00:01:10,610
different pieces of our age to null template.

17
00:01:10,850 --> 00:01:16,460
But let's start with the simplest thing that we can search for or query for, and that is a list item.

18
00:01:16,460 --> 00:01:20,600
I want to find the first list item within my template.

19
00:01:20,780 --> 00:01:26,870
So right here, I'm going to invoke the find method on my wrapper and I'm going to provide an argument

20
00:01:26,870 --> 00:01:29,510
of a string with what's my selector.

21
00:01:29,510 --> 00:01:34,160
Basically, the thing that I want to search for and what I want to search for is a list item.

22
00:01:34,430 --> 00:01:40,580
Of course, due to our V4, we're going to have six list items and the find method is going to find

23
00:01:40,580 --> 00:01:45,200
the first occurrence of a list item or an ally tag in my template.

24
00:01:45,530 --> 00:01:51,050
So I'm going to assign this to a constant right now called navigation menu item.

25
00:01:51,320 --> 00:01:56,300
And what I want to do below is just console.log this navigation menu item so we can see what it looks

26
00:01:56,300 --> 00:01:56,510
like.

27
00:01:56,780 --> 00:02:00,290
So right here, I'm going to run my test suite using NPM run test unit.

28
00:02:00,530 --> 00:02:03,620
And we can see what that navigation menu item looks like.

29
00:02:05,600 --> 00:02:10,640
I mean factories this up in case we can buy ourselves some more space we can see here it is this dom

30
00:02:10,640 --> 00:02:16,940
wrapper object and that is wrapping our HTML element, the actual core ally within our template.

31
00:02:17,210 --> 00:02:17,900
So this is great.

32
00:02:17,900 --> 00:02:24,440
We have successfully located a list item or a list element within my template, which means our main

33
00:02:24,440 --> 00:02:27,230
nav component is being rendered properly by our test.

34
00:02:27,500 --> 00:02:32,180
Well, obviously we don't just want to check for one list item, we want to find all of them.

35
00:02:32,300 --> 00:02:36,050
And there is a complimentary method to find called find all.

36
00:02:36,320 --> 00:02:39,830
So I'm going to change this method defined all.

37
00:02:39,830 --> 00:02:45,860
And as you might imagine, because we have multiple list items here, what view and view test utils

38
00:02:45,860 --> 00:02:48,590
is going to do is return them within an array.

39
00:02:48,800 --> 00:02:54,140
So I'm going to change this constant name to be plural because it's now navigation menu items change

40
00:02:54,140 --> 00:02:55,250
this two items as well.

41
00:02:55,490 --> 00:02:58,910
And let's save that and rerun our test suite and see what we get.

42
00:03:01,620 --> 00:03:02,040
All right.

43
00:03:02,070 --> 00:03:07,230
As I scroll up, you're going to see this array, this array of six different DOM wrapper objects.

44
00:03:07,410 --> 00:03:08,090
Makes sense.

45
00:03:08,100 --> 00:03:09,510
We have six menu items.

46
00:03:09,660 --> 00:03:13,020
So we have six fly tags and we've captured all of them.

47
00:03:13,110 --> 00:03:16,110
In this array, you can see a six total DOM wrappers here.

48
00:03:16,320 --> 00:03:17,510
So, so far, so good.

49
00:03:17,520 --> 00:03:23,220
Our tests are basically finding these elements that we want them to be dynamically rendered into our

50
00:03:23,340 --> 00:03:24,810
into our app.

51
00:03:24,960 --> 00:03:30,090
Now, there is some degree of coupling here and may not seem apparent at first, but notice that our

52
00:03:30,090 --> 00:03:34,050
test explicitly knows to search for ally elements.

53
00:03:34,050 --> 00:03:35,940
That is an implementation detail.

54
00:03:36,090 --> 00:03:38,340
And we'll talk more about that in the next lesson.

55
00:03:38,490 --> 00:03:40,350
But for now, it makes logical sense.

56
00:03:40,350 --> 00:03:42,900
Hopefully we're literally searching for all of these allies.

57
00:03:43,050 --> 00:03:47,550
So I think to keep the test simple for now will forgive the slight implementation detail.

58
00:03:47,670 --> 00:03:49,770
We're just going to look for all of our ally tags.

59
00:03:50,130 --> 00:03:56,190
So on this DOM wrapper object, there is a method available called the text and that is going to return

60
00:03:56,310 --> 00:03:58,950
the text that that ally contains.

61
00:03:59,160 --> 00:04:05,400
So right here on the very next line, I'm going to create a new constant called navigation menu.

62
00:04:05,820 --> 00:04:07,800
Texts, for lack of a better name.

63
00:04:08,010 --> 00:04:13,380
And in order to get the text from each ally, I'm going to iterate over and navigate menu items and

64
00:04:13,380 --> 00:04:16,830
invoke invoke the text method on each one.

65
00:04:16,950 --> 00:04:22,050
And of course, since I want the results in a new array, I'm going to use the JavaScript map method.

66
00:04:22,260 --> 00:04:25,320
So I'm going to map over my navigation menu items.

67
00:04:25,830 --> 00:04:27,840
I'm going to map over each item.

68
00:04:28,020 --> 00:04:30,150
And what do I want to do for each item right here?

69
00:04:30,180 --> 00:04:32,370
I want to call the text method.

70
00:04:32,400 --> 00:04:33,060
I'm going to save this.

71
00:04:33,060 --> 00:04:35,070
I'm going to see if it breaks up across a different line.

72
00:04:35,070 --> 00:04:35,580
It is not.

73
00:04:35,790 --> 00:04:37,430
But here's what our code looks like.

74
00:04:37,440 --> 00:04:39,030
Let this go a little bit to the right.

75
00:04:39,300 --> 00:04:45,390
We're mapping over our array of DOM wrappers, and on each one we're calling the text method.

76
00:04:45,630 --> 00:04:48,390
Each one of these elements right here within the array.

77
00:04:48,540 --> 00:04:50,850
And what this is going to do is give us the internal text.

78
00:04:51,060 --> 00:04:54,780
So now I can output what navigation menu text looks like.

79
00:04:56,280 --> 00:04:58,170
Right here on our test suite.

80
00:04:58,770 --> 00:05:03,120
In fact, let me be a little bit more real estate for our tests right here and now.

81
00:05:03,120 --> 00:05:09,810
You can see we're getting that console.log of an array of the actual text values that we are displaying

82
00:05:09,810 --> 00:05:10,480
for the user.

83
00:05:10,480 --> 00:05:14,700
And I think this is the most important element because it reflects what a navigation menu actually looks

84
00:05:14,700 --> 00:05:14,910
like.

85
00:05:15,150 --> 00:05:20,910
So I think a reasonable test here is to test that this array contains exactly what we see here on screen,

86
00:05:21,060 --> 00:05:23,460
these six items in this order.

87
00:05:23,550 --> 00:05:23,910
All right.

88
00:05:24,210 --> 00:05:30,810
So right here, once again, I'm going to expect and I'm going to provide now my array navigation menu

89
00:05:30,810 --> 00:05:31,200
text.

90
00:05:31,440 --> 00:05:37,230
And for this one, we can actually cannot use the to be matcher in jest because the to be match checks

91
00:05:37,230 --> 00:05:38,490
for strict equality.

92
00:05:38,670 --> 00:05:43,950
So in the case of objects like arrays, it's going to look for the exact same array in memory.

93
00:05:44,070 --> 00:05:49,260
And the array that we're going to create to compare against is not going to be the exact same array

94
00:05:49,290 --> 00:05:51,330
that navigation menu text is.

95
00:05:51,540 --> 00:05:55,860
So we cannot use to be because that's literally checking for literally the same array.

96
00:05:55,920 --> 00:05:59,940
We have two arrays that are equal in content but not the same array in memory.

97
00:06:00,240 --> 00:06:06,420
So the alternative matter that we can use here is to equal and that is going to account for that right

98
00:06:06,570 --> 00:06:11,310
used when you have to check that two objects have the same value, same principle, but not literally

99
00:06:11,310 --> 00:06:11,940
the same object.

100
00:06:12,030 --> 00:06:16,860
We can do this for JavaScript primitives, and when I say this, I mean that to be matcher we can use

101
00:06:16,860 --> 00:06:21,750
that for strings, for numbers, for booleans, etc. But when we start comparing either JavaScript objects

102
00:06:21,750 --> 00:06:24,660
or arrays, we have to switch to the to equal matcher.

103
00:06:24,780 --> 00:06:26,070
But otherwise it's the same.

104
00:06:26,070 --> 00:06:30,540
We're going to invoke this method and we're going to provide the array that we want to compare with.

105
00:06:30,540 --> 00:06:34,230
So I'm going to create my array here, do a line, break and enter all of my values.

106
00:06:34,230 --> 00:06:39,750
So we we're going to have teams first, we're going to have locations, then we're going to have life

107
00:06:39,750 --> 00:06:40,500
at Bobo.

108
00:06:41,040 --> 00:06:46,080
Then we're going to have how we hire then students and then jobs.

109
00:06:46,380 --> 00:06:51,000
And it's reasonable to expect with the with the exception of of course, knowing that we're going to

110
00:06:51,000 --> 00:06:53,670
have a list I our list item.

111
00:06:53,670 --> 00:06:58,320
Rather it's reasonable to expect that we could have written a test like this using TDD because it's

112
00:06:58,320 --> 00:06:59,850
testing for the user value.

113
00:06:59,850 --> 00:07:03,180
We want six menu items in this order and here's what they are.

114
00:07:03,450 --> 00:07:05,070
So I'm going to go ahead and run this test.

115
00:07:07,360 --> 00:07:10,090
And hopefully it should pass and it does.

116
00:07:10,100 --> 00:07:15,580
So we now have two tests to display the company name and to display the menu items for navigation within

117
00:07:15,580 --> 00:07:19,840
our main NAV component that covers the responsibilities of the main nav components so far.

118
00:07:19,990 --> 00:07:21,490
So I'm pretty happy here.

119
00:07:21,760 --> 00:07:22,000
All right.

120
00:07:22,000 --> 00:07:23,710
That's all there is to cover in this lesson.

121
00:07:23,710 --> 00:07:27,880
And the very next one, we're going to talk about how we can address this little issue right here.
