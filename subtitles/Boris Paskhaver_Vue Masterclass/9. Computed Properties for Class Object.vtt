WEBVTT
1
00:00:00.630 --> 00:00:01.710
All right.

2
00:00:01.710 --> 00:00:07.320
So in the previous lesson, we introduced the concept of computed properties in view.

3
00:00:07.560 --> 00:00:14.130
And my next question for you is how can we utilize that concept of computed properties here in our action

4
00:00:14.130 --> 00:00:14.400
button?

5
00:00:14.760 --> 00:00:20.130
Well, if you take a look at line number two, you'll notice that what we're providing to our class

6
00:00:20.130 --> 00:00:25.290
attribute, which we are binding to using V bind, is a plain JavaScript object.

7
00:00:25.470 --> 00:00:31.920
And of course this syntax is valid, but I think it'd be a little bit better to move this logic into

8
00:00:31.920 --> 00:00:34.500
our view configuration object after all.

9
00:00:34.680 --> 00:00:37.440
At the heart of this, this is a piece of JavaScript.

10
00:00:37.440 --> 00:00:39.960
It's not a piece of HTML view.

11
00:00:39.960 --> 00:00:43.980
Of course knows how to process this, but this is some bit of business logic.

12
00:00:43.980 --> 00:00:50.730
It specifies which thing, which class should be applied based on a property called primary.

13
00:00:50.970 --> 00:00:57.270
So if we can move this into our script sections and somehow this would become a little bit cleaner and

14
00:00:57.270 --> 00:01:03.390
separate our concerns a little bit more, we would have as much HTML as we can within our template and

15
00:01:03.390 --> 00:01:06.540
as much JavaScript as we can within our script tag.

16
00:01:07.170 --> 00:01:12.930
Now again, for something like this, this is a pretty small and probably even contrived example, but

17
00:01:12.930 --> 00:01:13.710
let's stick with that.

18
00:01:13.710 --> 00:01:19.950
Let's let's imagine in a much larger app where we have much bigger template for a component, we generally

19
00:01:19.950 --> 00:01:24.120
want to keep as much JavaScript out of it as possible because it makes it more readable.

20
00:01:24.330 --> 00:01:27.630
And we don't have to hunt around for where our JavaScript lives.

21
00:01:27.630 --> 00:01:32.310
You know, if part of our JavaScript lives in our view configuration object and part of it lives in

22
00:01:32.310 --> 00:01:36.480
our HTML template and there's a lot of lines there, we have to go back and forth to figure out these

23
00:01:36.480 --> 00:01:36.720
things.

24
00:01:36.870 --> 00:01:42.420
So the more that we can isolate and put things where they belong in their respective boxes, generally

25
00:01:42.420 --> 00:01:43.740
the code will be easier to read.

26
00:01:43.950 --> 00:01:45.240
So this is a very simple example.

27
00:01:45.310 --> 00:01:45.990
Let's stick with it.

28
00:01:46.170 --> 00:01:51.510
Our goal is to move this JavaScript object into our view configuration object somehow.

29
00:01:51.810 --> 00:01:53.590
So is this a piece of data?

30
00:01:54.270 --> 00:01:55.970
And I would argue it is.

31
00:01:55.980 --> 00:02:01.080
It's something that the component needs to function properly, but it really is a computed property.

32
00:02:01.290 --> 00:02:07.680
It is a JavaScript object that is being generated, but it is a derived object that is dependent on

33
00:02:07.680 --> 00:02:09.300
the value of the primary key.

34
00:02:09.660 --> 00:02:14.670
Now, if you have a sharp eye, you might look and say, well, isn't this object right here basically

35
00:02:14.670 --> 00:02:16.740
the same odd because we have right here.

36
00:02:16.950 --> 00:02:18.450
And the answer is yes.

37
00:02:18.480 --> 00:02:19.410
Right now it is.

38
00:02:19.620 --> 00:02:25.020
But you can imagine that if our data object expands, like if it has five or six different properties

39
00:02:25.200 --> 00:02:30.990
and some of them deal with six styles and some of them don't, then it will no longer hold true.

40
00:02:31.260 --> 00:02:38.280
So the fact of whether or not the primary class should be applied, which is this Boolean value of primary,

41
00:02:38.490 --> 00:02:45.690
is to me a different piece of data than the the the derived JavaScript object that specifies what this

42
00:02:45.690 --> 00:02:48.690
button should have in as far as classes.

43
00:02:49.050 --> 00:02:54.660
So if you imagine we have, for example, a property, A and B here in a moment or two, then we simply

44
00:02:54.660 --> 00:02:59.640
cannot provide this data object anymore because it will no longer function, which proves that this

45
00:02:59.640 --> 00:03:01.530
object is a separate piece of information.

46
00:03:01.710 --> 00:03:07.830
However, it is a piece of information that is dependent on at least this primary property right here.

47
00:03:08.160 --> 00:03:15.030
So I propose what we do is that we create a computed property to return this JavaScript object.

48
00:03:15.300 --> 00:03:19.920
All right, so right below data, I'm going to add my computed keyword, just like in the previous lesson.

49
00:03:20.130 --> 00:03:26.370
And this again is going to be a JavaScript object where we provide our computed methods, but our computed

50
00:03:26.370 --> 00:03:28.620
methods will work just like our data properties.

51
00:03:28.620 --> 00:03:35.700
We can use them right in our template and the name of my method here, I'm just going to choose button

52
00:03:35.700 --> 00:03:36.180
class.

53
00:03:37.020 --> 00:03:39.570
I think that's an appropriate name for what we are trying to represent.

54
00:03:39.900 --> 00:03:46.620
And right here we're going to return the JavaScript object that we want to add right in here and bind

55
00:03:46.620 --> 00:03:47.160
with our back.

56
00:03:47.580 --> 00:03:48.510
So what do we want?

57
00:03:48.510 --> 00:03:50.700
We want the exact same properties as we have here.

58
00:03:50.700 --> 00:03:54.780
We want a primary property and that is going to be a boolean value.

59
00:03:54.780 --> 00:03:59.670
True, if we should apply the primary class and false if we should not.

60
00:03:59.880 --> 00:04:06.660
Although it's important to note that in our computed property, our view component has no clue that

61
00:04:06.660 --> 00:04:08.370
we're going to use button class up here.

62
00:04:08.520 --> 00:04:13.560
So from Vue's perspective, it's just a plain JavaScript object with a primary key and a boolean value,

63
00:04:13.560 --> 00:04:13.890
right?

64
00:04:14.220 --> 00:04:16.860
So where is this primary value going to be coming from?

65
00:04:17.070 --> 00:04:23.310
It is going to be coming from our primary property right here on data so we can access those data properties

66
00:04:23.310 --> 00:04:24.360
using the this keyword.

67
00:04:24.570 --> 00:04:27.660
So this DOT primary will get us that reference.

68
00:04:28.650 --> 00:04:29.070
All right.

69
00:04:29.310 --> 00:04:32.880
So now we've created a computed property that returns a JavaScript object.

70
00:04:33.090 --> 00:04:39.270
So now right here, we can go ahead and replace the syntax with a reference to our computed property,

71
00:04:39.360 --> 00:04:42.900
and we can reference it directly in line, just like our data property.

72
00:04:43.080 --> 00:04:45.690
So right here I'm just going to write button class.

73
00:04:46.610 --> 00:04:51.260
And I think this design is a little bit cleaner because now a reader will assume there's some kind of

74
00:04:51.260 --> 00:04:54.860
combination of classes or a single class represented by button class.

75
00:04:55.040 --> 00:05:01.460
They can look into the view configuration object and see the actual JavaScript that comprises that that

76
00:05:01.460 --> 00:05:02.390
object right here.

77
00:05:02.480 --> 00:05:02.750
All right.

78
00:05:02.930 --> 00:05:06.920
So I know that these two objects look very similar to each other.

79
00:05:07.070 --> 00:05:11.480
But hopefully, as we continue to develop our action button component in later lessons, you're going

80
00:05:11.480 --> 00:05:14.540
to see how keeping them separate is actually going to be advantageous.

81
00:05:14.810 --> 00:05:20.930
So to provide a summary of everything we learned here, there are to me two distinct pieces of information.

82
00:05:21.110 --> 00:05:28.040
One is an actual primary property which is independent, which is keeping track of whether or not the

83
00:05:28.550 --> 00:05:30.950
primary class should or should not be applied.

84
00:05:31.130 --> 00:05:36.950
So given the fact that it's toggling, given the fact that it's changing over time, it is a piece of

85
00:05:36.950 --> 00:05:37.490
data.

86
00:05:37.520 --> 00:05:37.760
Right.

87
00:05:37.760 --> 00:05:42.770
And makes sense to put here because it's something that is going to differ from time to time.

88
00:05:43.460 --> 00:05:49.490
And in comparison, the JavaScript object that we are going to provide to our class attribute right

89
00:05:49.490 --> 00:05:51.860
here and bind to using the view by directive.

90
00:05:52.070 --> 00:05:57.290
This JavaScript object is dependent on this primary piece of data.

91
00:05:57.500 --> 00:05:59.120
It's not a boolean right here.

92
00:05:59.120 --> 00:06:03.320
It is an object that is dependent on the primary piece of data right here.

93
00:06:03.530 --> 00:06:09.680
This JavaScript object is something that is derived so that whenever the value of this data property

94
00:06:09.680 --> 00:06:15.620
changes, for example, to false, we want this object to be reevaluated, which in turn will replace

95
00:06:15.620 --> 00:06:19.790
what we have right here but in class and render a different button on the screen.

96
00:06:19.790 --> 00:06:25.520
We are setting up that architecture to have the pieces of data that that track change, as well as the

97
00:06:25.520 --> 00:06:30.770
pieces of data that generate JavaScript objects that are reflective of that change for the purposes

98
00:06:30.770 --> 00:06:32.600
of our HTML and CSF.

99
00:06:32.620 --> 00:06:34.100
There's a little bit of a separation here.

100
00:06:34.220 --> 00:06:39.080
It might be hard to see, but it should hopefully make more sense as we continue to add other types

101
00:06:39.080 --> 00:06:40.230
of styles to this button.

102
00:06:40.670 --> 00:06:41.000
All right.

103
00:06:41.000 --> 00:06:42.690
So that's all there is to cover in this lesson.

104
00:06:42.720 --> 00:06:44.270
So I will see you in the next one.
