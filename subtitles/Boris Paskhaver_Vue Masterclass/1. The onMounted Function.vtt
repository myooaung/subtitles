WEBVTT
1
00:00:00.180 --> 00:00:01.080
All right.

2
00:00:01.080 --> 00:00:03.610
So welcome to the next section of the course.

3
00:00:03.630 --> 00:00:10.140
We're going to kick this section off by refactoring another component to utilize the composition API.

4
00:00:10.440 --> 00:00:13.110
We're going to focus on the Spotlight component.

5
00:00:13.320 --> 00:00:18.450
And as a reminder, the Spotlight component is the one that makes a request to our spotlights end point

6
00:00:18.660 --> 00:00:24.960
to get a bunch of data, and that uses it to iterate over and create these two cards we see right here

7
00:00:24.990 --> 00:00:26.160
on our front page.

8
00:00:26.610 --> 00:00:31.860
So if I go back to the S code, I have the Spotlight View component open here.

9
00:00:32.100 --> 00:00:37.290
You can see here we have a piece of data, but more importantly, we have a mounted lifecycle look.

10
00:00:37.530 --> 00:00:44.010
As a reminder, the mounted hook is automatically run by view whenever it mounts the component, whenever

11
00:00:44.010 --> 00:00:46.350
it inserts it into your browser, into the page.

12
00:00:46.620 --> 00:00:52.290
And what happens in this mounted lifecycle hook or this method, alternatively, is we make the request

13
00:00:52.290 --> 00:00:58.440
to our slash spotlights, end point using the access library, and once we get the data, we save it

14
00:00:58.440 --> 00:01:01.500
to the spotlight's data property on this component.

15
00:01:01.800 --> 00:01:07.200
So we have not yet talked about how we can replace vue's lifecycle hooks using the composition API.

16
00:01:07.380 --> 00:01:12.960
So this lesson, as always, will offer us some something new and a new way to refactor our old components.

17
00:01:13.290 --> 00:01:18.060
So as always, let's begin by commenting out what we have here and we're going to replace it using the

18
00:01:18.060 --> 00:01:19.890
new composition API.

19
00:01:20.370 --> 00:01:24.000
So above Axios, I'm going to import ref from view.

20
00:01:24.000 --> 00:01:27.570
We're going to need ref because that is the new way that we can store reactive data.

21
00:01:28.380 --> 00:01:28.710
All right.

22
00:01:28.710 --> 00:01:34.020
So my goal with this is to eventually replace or spotlight's array and then I'm going to introduce another

23
00:01:34.200 --> 00:01:38.760
important that we have not used before and it is called On Mountain.

24
00:01:39.810 --> 00:01:41.550
It's going to ride on mountain out like so.

25
00:01:41.910 --> 00:01:49.920
So for every lifecycle hook that exists in the options API, there is now going to be a complementary

26
00:01:49.920 --> 00:01:55.470
function that we can import from view that we can utilize within our setup method that will basically

27
00:01:55.470 --> 00:01:56.310
do the same thing.

28
00:01:56.610 --> 00:02:01.680
So in this case on Mount, it is going to be a function that's going to give us the opportunity to run

29
00:02:01.680 --> 00:02:03.660
some kind of logic on component mount.

30
00:02:04.050 --> 00:02:08.700
And you don't have to do what I'm about to do, but I'm just going to click into this by holding the

31
00:02:08.700 --> 00:02:10.560
command key on my Mac and pressing into this.

32
00:02:10.820 --> 00:02:14.730
This is going to take me into the typescript definitions, which we don't have to worry about.

33
00:02:15.000 --> 00:02:21.270
But the key takeaway here is here are all the available functions that we're now able to import from

34
00:02:21.270 --> 00:02:21.540
view.

35
00:02:21.540 --> 00:02:28.800
So on activated on before mount on before update here we have on on mounted on updated and these all

36
00:02:28.800 --> 00:02:36.060
correspond to similarly named methods in the output in the options API, they are now in portable functions

37
00:02:36.180 --> 00:02:37.710
in the composition API.

38
00:02:37.980 --> 00:02:40.040
So hopefully the idea here is nothing new.

39
00:02:40.060 --> 00:02:45.510
It goes with the entire trend we've been talking about, about how the composition API is more functional,

40
00:02:45.600 --> 00:02:49.620
more important than wiring up everything as methods on the component.

41
00:02:49.800 --> 00:02:53.400
And this is just to show you that we have a whole bunch of these functions available to be important,

42
00:02:53.730 --> 00:02:54.990
but how do they actually work?

43
00:02:54.990 --> 00:02:59.070
Well, let's actually put our on mounted function to use here.

44
00:02:59.400 --> 00:03:01.740
So as always, I'll define my setup method.

45
00:03:03.180 --> 00:03:06.960
And we will begin by replacing our former spotlights piece of data with a ref.

46
00:03:07.230 --> 00:03:13.050
So right here I will do spotlights and I'll invoke the ref function and my starter value to start out

47
00:03:13.050 --> 00:03:14.110
will be an empty array.

48
00:03:14.490 --> 00:03:16.410
So my idea here is the exact same.

49
00:03:16.410 --> 00:03:17.760
I want to have an empty array.

50
00:03:18.000 --> 00:03:22.980
Then on mount I want to make the API request and when I get the array of values back.

51
00:03:22.980 --> 00:03:25.440
And by the way, this is what that array looks like.

52
00:03:25.440 --> 00:03:27.680
We defined that in our debate adjacent filed.

53
00:03:27.690 --> 00:03:28.770
It's these two objects.

54
00:03:29.010 --> 00:03:34.110
Once I get that array of two objects, I want to overwrite this array to be that new array, which should

55
00:03:34.110 --> 00:03:37.290
force the component to render due to Spotlight's reactivity.

56
00:03:37.470 --> 00:03:42.510
And then this thing will be rendered with the V4 and then render the actual cards on the screen.

57
00:03:42.870 --> 00:03:47.640
So before I forget, since I'm using spotlights in my channel, let's make sure we return spotlights

58
00:03:47.640 --> 00:03:48.090
right here.

59
00:03:49.500 --> 00:03:53.550
But now the more important question is how do we overwrite this empty array with our fetch data?

60
00:03:53.910 --> 00:03:59.550
So what I'm going to do is create a inline function, an arrow function that I will call get spotlights.

61
00:04:01.460 --> 00:04:06.740
And I'm not actually going to make this a returned property on my object, but I do need to define some

62
00:04:06.740 --> 00:04:13.430
kind of function because the on mounted function that I imported here expects a function as an argument.

63
00:04:13.760 --> 00:04:18.380
So on mounted in some ways is comparable to the computed function which we've explored earlier.

64
00:04:18.470 --> 00:04:24.440
It takes a function as an argument and it's going to run that function based on when the component mounts.

65
00:04:24.770 --> 00:04:29.030
Now of course, the key difference is when it comes to the computed function that's going to reevaluate

66
00:04:29.030 --> 00:04:30.860
itself every single time.

67
00:04:30.860 --> 00:04:36.450
A react to value that it is watching changes in comparison and on mounted will only run once.

68
00:04:36.740 --> 00:04:41.330
But we still need to pass it a function and in order to pass in a function, the easiest ways to define

69
00:04:41.330 --> 00:04:44.060
one inline with a name and that provides some context.

70
00:04:44.300 --> 00:04:47.960
So in the body of get spotlights, I'm going to copy most of the logic I have here.

71
00:04:48.260 --> 00:04:51.620
So I'm going to start with my basic URL which we're getting from the environment variable.

72
00:04:51.980 --> 00:04:57.590
Then I'm going to create my final URL by appending the slash spotlights to the end of my base URL.

73
00:04:57.980 --> 00:05:03.980
Then I'm going to make my request with Axios and notice that is an asynchronous operation.

74
00:05:04.310 --> 00:05:08.600
So we're using the daisy, we're using the await keyword right here.

75
00:05:09.050 --> 00:05:12.860
And because of that, we need to make sure that we make our get spotlight's function async.

76
00:05:13.040 --> 00:05:16.730
So once again, a wait right here means we need to make this an async function.

77
00:05:17.150 --> 00:05:19.130
Now, keep in mind, it's still not going to run.

78
00:05:19.130 --> 00:05:23.630
We're just defining the function, the recipe, the procedure to be run.

79
00:05:23.750 --> 00:05:26.840
But there's nothing here that's forcing it to be run because we haven't invoked it.

80
00:05:27.200 --> 00:05:32.360
And once we get that response added from Axios, remember that that response object has a data property

81
00:05:32.510 --> 00:05:34.310
and that is the actual array of values.

82
00:05:34.550 --> 00:05:38.420
And then what I want to do is save this array of values to my spotlight's data.

83
00:05:38.780 --> 00:05:41.120
So remember, spotlight is a reactive object.

84
00:05:41.120 --> 00:05:46.220
So if we want to update its internal data, we have to call the value property or access it to be more

85
00:05:46.220 --> 00:05:49.430
specific and then overwrite it with the new response data.

86
00:05:49.880 --> 00:05:50.150
Okay.

87
00:05:50.150 --> 00:05:54.530
So we have defined a async function called get spotlights that is not being invoked.

88
00:05:54.860 --> 00:05:59.870
So how do we actually run this logic and how do we tell you to run this logic when the component mounts?

89
00:06:00.200 --> 00:06:05.270
Well, we're going to use the on mounted function that we imported, and what we provided is the on

90
00:06:05.270 --> 00:06:08.810
invoked function that we want it to run when the component mounts.

91
00:06:09.050 --> 00:06:11.540
So in here we're simply going to pass get spotlights.

92
00:06:13.000 --> 00:06:13.720
And that is it.

93
00:06:13.960 --> 00:06:18.700
So once again, on a mountain, you do not want to actually provide a invoked function in here because

94
00:06:18.700 --> 00:06:19.960
that will produce the return value.

95
00:06:20.080 --> 00:06:24.610
You provide the function, you just provide the name of the procedure you want it to execute.

96
00:06:24.820 --> 00:06:30.730
And because we're specifically using the on mounted function, it knows to run this one whenever the

97
00:06:30.730 --> 00:06:31.360
component mounts.

98
00:06:31.540 --> 00:06:36.760
And similarly, if we were to use any of the other ones, like, for example, on our mountain or on

99
00:06:36.760 --> 00:06:40.690
updated, it knows to run those at the specific moments in the components lifecycle.

100
00:06:40.930 --> 00:06:43.570
Of course, you have to be mindful about which one you're running.

101
00:06:43.750 --> 00:06:49.210
For example, on it will only run once when the component mounts, while something like on updated will

102
00:06:49.210 --> 00:06:52.070
run many times every time the component updates.

103
00:06:52.090 --> 00:06:52.840
As a matter of fact.

104
00:06:53.050 --> 00:06:56.050
So if you're using this one, you can provide a function to it as well.

105
00:06:56.170 --> 00:07:00.130
But just be mindful that this will execute that function each time the component updates.

106
00:07:00.370 --> 00:07:04.480
So it's not like these functions each run only once or multiple times.

107
00:07:04.660 --> 00:07:08.740
Each one is different depending on its use case, depending on how it's being used.

108
00:07:09.010 --> 00:07:12.610
So you do need to know a little bit about what's available to you, but I hope it makes general sense

109
00:07:12.610 --> 00:07:13.870
that this will only run once.

110
00:07:14.080 --> 00:07:16.360
Well, this has the opportunity to run many times.

111
00:07:16.480 --> 00:07:17.940
Every time the component updates.

112
00:07:17.960 --> 00:07:18.240
Right.

113
00:07:18.520 --> 00:07:23.320
So with that said, we have everything we need to replace our former implementation.

114
00:07:23.320 --> 00:07:29.770
So I'm going to remove our old code right here, save that we still have a single setup method.

115
00:07:30.010 --> 00:07:33.700
We're having a function here that we're running when the component mounts.

116
00:07:33.940 --> 00:07:37.000
When it gets back, it's saving to our reactive spotlight's object.

117
00:07:37.000 --> 00:07:42.370
We're making the spotlight's array reactive and available as a return property, which means we're going

118
00:07:42.370 --> 00:07:45.760
to be able to iterate over that array with the ally and render all this content.

119
00:07:46.030 --> 00:07:47.410
So if I go back to the browser.

120
00:07:48.500 --> 00:07:49.610
And I refresh the page.

121
00:07:50.710 --> 00:07:52.680
Notice everything is still working just fine.

122
00:07:52.690 --> 00:07:54.310
So everything is still functional.

123
00:07:54.310 --> 00:07:55.360
We haven't broken anything.

124
00:07:55.720 --> 00:07:57.670
All right, so that's all there is to cover in this lesson.

125
00:07:57.670 --> 00:07:59.260
So I will see you in the next one.
