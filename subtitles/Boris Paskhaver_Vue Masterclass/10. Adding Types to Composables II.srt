1
00:00:00,420 --> 00:00:01,140
Okay.

2
00:00:01,140 --> 00:00:06,750
So there's one more composable function left for us to migrate to TypeScript and it is used at previous

3
00:00:06,750 --> 00:00:07,620
and next pages.

4
00:00:07,920 --> 00:00:09,580
So let's open up that file right here.

5
00:00:09,780 --> 00:00:15,870
Let's immediately change its extension to T.S. and on the right hand side, I will open up the corresponding

6
00:00:15,870 --> 00:00:16,830
test file as well.

7
00:00:17,190 --> 00:00:20,400
And that's going to be used previous index pages that test that.

8
00:00:20,400 --> 00:00:20,790
Yes.

9
00:00:21,450 --> 00:00:26,340
And since we have it open, let's also go ahead and change its extension to T.S. as well.

10
00:00:27,780 --> 00:00:28,140
All right.

11
00:00:28,140 --> 00:00:34,200
So as a reminder of how this works are use previous and next pages composable function accepts two parameters

12
00:00:34,200 --> 00:00:38,160
current page and Max page and TypeScript cannot figure out what their types are.

13
00:00:38,310 --> 00:00:40,890
And these are actually the view reactive objects.

14
00:00:40,890 --> 00:00:44,520
They are the view reactive objects that have a value property on them.

15
00:00:44,730 --> 00:00:49,530
You can see right here we are accessing current pages on value and right here we are accessing max page

16
00:00:49,650 --> 00:00:49,980
value.

17
00:00:50,340 --> 00:00:55,620
Now notice in our test we were able to get away with much simpler JavaScript objects that simply had

18
00:00:55,620 --> 00:01:02,280
a value property rather than using the complete view reactive object that is returned to us, for example,

19
00:01:02,280 --> 00:01:03,540
by using the ref function.

20
00:01:03,750 --> 00:01:09,120
And I think that this is generally a good thing because that means we're using less view specific ideas

21
00:01:09,120 --> 00:01:09,780
in our tests.

22
00:01:09,960 --> 00:01:14,880
Our tests are working with the more basic vanilla JavaScript language or in this case, TypeScript,

23
00:01:15,060 --> 00:01:17,880
which means we are more decoupled from the actual implementation.

24
00:01:18,090 --> 00:01:23,100
If I were to instead change this to something like Ref eight, that certainly would make the test still

25
00:01:23,130 --> 00:01:23,520
pass.

26
00:01:23,670 --> 00:01:29,280
But then our tests would be coupled to the idea of using a reactive view object versus a much simpler

27
00:01:29,400 --> 00:01:33,060
type of object, which is an object that happens to have a value property.

28
00:01:33,420 --> 00:01:39,300
So while there are types and interfaces that we can import from view that allow us to declare a current

29
00:01:39,300 --> 00:01:45,210
page and max page as a computed view, reactive objects or more specifically, give them the type or

30
00:01:45,210 --> 00:01:46,620
the interface for such an object.

31
00:01:46,890 --> 00:01:48,720
I argue we don't need to do that.

32
00:01:48,900 --> 00:01:55,320
I argue we can be just okay with a very simple, much, much more lightweight interface that would also

33
00:01:55,320 --> 00:01:58,230
allow us to keep the tests that we currently have right here.

34
00:01:58,440 --> 00:02:04,440
There is no need to use a more complex, larger, complicated interface that introduces more additional

35
00:02:04,440 --> 00:02:08,820
properties that we don't care about when a much simpler, smaller interface will suffice.

36
00:02:09,120 --> 00:02:13,650
And again, if we tell TypeScript that we're using a view reactive object here specifically, then we'll

37
00:02:13,650 --> 00:02:16,140
have to provide such an object right here in our test.

38
00:02:16,320 --> 00:02:20,910
And that may require us to create an object that has way more properties and way more methods that we

39
00:02:20,910 --> 00:02:21,510
care about.

40
00:02:21,510 --> 00:02:21,750
Right?

41
00:02:21,870 --> 00:02:24,390
We only care about an object having a value property.

42
00:02:24,570 --> 00:02:27,690
So I'm going to define an interface here that says that and nothing more.

43
00:02:27,990 --> 00:02:29,310
So it's going to look like this here.

44
00:02:29,310 --> 00:02:35,250
I'm going to define an interface and I'm going to call it Simple Ref, because we know from the View

45
00:02:35,250 --> 00:02:40,530
Library that we have our ref function and it defines a reactive object wrapping a value.

46
00:02:40,650 --> 00:02:42,990
And I want basically a simple version of that.

47
00:02:43,200 --> 00:02:45,210
And all that's going to be is a value property.

48
00:02:45,510 --> 00:02:50,430
And we can see in this example that we're subtracting minus one and we are adding plus one.

49
00:02:50,430 --> 00:02:52,380
Max paid is also going to be a number.

50
00:02:52,530 --> 00:02:56,280
So I'm going to say that the value inside is going to simply be of type number.

51
00:02:57,270 --> 00:02:57,690
All right.

52
00:02:57,930 --> 00:03:03,000
So right here, I'm going to say that current page is of typed symbol ref and Max Page is a type symbol

53
00:03:03,000 --> 00:03:03,720
ref as well.

54
00:03:04,500 --> 00:03:04,740
All right.

55
00:03:04,740 --> 00:03:09,270
So once again, I'm not importing a type from the View Library, even though I'm sure it does have some

56
00:03:09,270 --> 00:03:13,440
kind of ref or computer ref type that also has a value property.

57
00:03:13,590 --> 00:03:18,450
The problem I see with using that interface is that in addition to having a value property, it would

58
00:03:18,450 --> 00:03:22,980
also have a whole bunch of additional properties or methods that we would have to implement, either

59
00:03:22,980 --> 00:03:26,760
by having a very similar object here or by using ref in our tests.

60
00:03:26,880 --> 00:03:31,440
And that's something that I simply do not want to do because it couples our tests closer to the implementation

61
00:03:31,560 --> 00:03:34,830
and makes our tests as much more dependent on view itself.

62
00:03:35,040 --> 00:03:39,510
The more that our tests can be separate from the framework and the library we're using and be tested

63
00:03:39,510 --> 00:03:44,040
in isolation by using regular JavaScript, the better because it generally makes them much more easier

64
00:03:44,040 --> 00:03:44,970
to transfer later.

65
00:03:45,060 --> 00:03:47,460
If, for example, we decide to go to a different framework.

66
00:03:47,610 --> 00:03:48,000
All right.

67
00:03:48,300 --> 00:03:54,750
So with that said, we have our types annotated in our implementation on the left, and everything is

68
00:03:54,750 --> 00:03:55,080
working.

69
00:03:55,290 --> 00:03:59,220
And on the right hand side, it looks like we do not have any issues right here as I scroll.

70
00:03:59,460 --> 00:04:00,420
So everything looks correct.

71
00:04:00,630 --> 00:04:05,970
So I'm going to run NPM, run test, Colin, watch and see what that gets us.

72
00:04:07,400 --> 00:04:11,180
It should detect the composable that we just updated, which is used previous in pages.

73
00:04:11,210 --> 00:04:14,660
It looks like the job listings component is utilizing that composable as well.

74
00:04:14,810 --> 00:04:15,630
But not a problem.

75
00:04:15,800 --> 00:04:17,750
And you can see we have a bypassing test suite.

76
00:04:18,110 --> 00:04:18,410
All right.

77
00:04:18,410 --> 00:04:20,020
So that's all there is to cover in this lesson.

78
00:04:20,030 --> 00:04:24,180
And with that, we have converted all of our composable functions to utilize TypeScript.

79
00:04:24,230 --> 00:04:26,450
So another big sign of progress.

80
00:04:26,750 --> 00:04:27,040
All right.

81
00:04:27,050 --> 00:04:28,970
So with that, I will see you in the next lesson.
