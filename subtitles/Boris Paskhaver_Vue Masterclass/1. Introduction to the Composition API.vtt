WEBVTT
1
00:00:00.960 --> 00:00:01.550
Okay.

2
00:00:01.560 --> 00:00:05.940
So I am super excited to introduce you to the next section of the course.

3
00:00:06.210 --> 00:00:12.990
This will be the first of several sections focusing on the new composition API in Vue three.

4
00:00:13.300 --> 00:00:16.560
So let's talk a little bit about where we've been and where we're going.

5
00:00:16.830 --> 00:00:22.320
So the syntax that we've used so far throughout the course with every component that we've built is

6
00:00:22.320 --> 00:00:24.390
called the Options API.

7
00:00:24.600 --> 00:00:28.080
And that was the standard way to build components in Vue three.

8
00:00:28.440 --> 00:00:35.010
So when I say Options API, I mean having that configuration object with properties like data, like

9
00:00:35.010 --> 00:00:39.630
methods like computed, etc., that is an example of using Options API.

10
00:00:39.780 --> 00:00:42.870
And that was the way that all components worked in Vue too.

11
00:00:43.230 --> 00:00:50.100
Now keep in mind the Options API is still available in Vue 3.0 and it doesn't appear to be going anywhere

12
00:00:50.100 --> 00:00:51.090
anytime soon.

13
00:00:51.390 --> 00:00:57.240
So you shouldn't think that the options API is the old way of doing things or the deprecated way of

14
00:00:57.240 --> 00:00:57.750
doing things.

15
00:00:57.960 --> 00:00:58.550
It isn't.

16
00:00:58.560 --> 00:01:00.780
It's just one option that's available to you.

17
00:01:01.140 --> 00:01:08.100
And with Vue 3.0, the development team introduced an alternative way, another way to build components

18
00:01:08.100 --> 00:01:14.460
called the Composition API that they believe solves some of the problems that the Options API has.

19
00:01:14.700 --> 00:01:19.200
That doesn't mean that the composition API is always guaranteed to be better.

20
00:01:19.440 --> 00:01:21.390
It doesn't mean that you're going to enjoy it more.

21
00:01:21.600 --> 00:01:27.060
So what I recommend you do is actually treat these two as two tools in your toolbox, right?

22
00:01:27.240 --> 00:01:30.390
Options API is more of the older way of doing things.

23
00:01:30.510 --> 00:01:33.300
And composition API is the newer way of doing things.

24
00:01:33.540 --> 00:01:39.240
But if you want to be a well-rounded Vue developer, you should know both of these options, especially

25
00:01:39.240 --> 00:01:42.720
if you're going to jump into a code base that's been in development for a long time.

26
00:01:42.840 --> 00:01:45.930
You're probably going to find both of these options around.

27
00:01:46.080 --> 00:01:49.030
So it's important to understand the syntax and how it works.

28
00:01:49.050 --> 00:01:49.470
All right.

29
00:01:49.740 --> 00:01:53.640
So we're going to learn a lot about Composition API in this section.

30
00:01:53.790 --> 00:01:59.760
Let's talk about the problems that it's trying to solve that exist in the Options API that by now we're

31
00:01:59.760 --> 00:02:00.960
very familiar with.

32
00:02:01.740 --> 00:02:08.130
So the first issue is that code that belongs together logically, and by that I mean code that kind

33
00:02:08.130 --> 00:02:14.490
of belongs to the same feature even within a single view component is many times split across multiple

34
00:02:14.490 --> 00:02:17.190
parts of the view component configuration object.

35
00:02:17.460 --> 00:02:23.520
So even if we think about data methods and and computed properties, we have that logic scattered across

36
00:02:23.520 --> 00:02:26.220
these three different parts of the configuration object.

37
00:02:26.520 --> 00:02:31.380
Now, throughout the course, we've tried our best to build really small reusable components.

38
00:02:31.620 --> 00:02:35.970
But when you go into the real world and you explore a real world code base, you're going to find a

39
00:02:35.970 --> 00:02:38.040
lot of violations of best practices.

40
00:02:38.340 --> 00:02:43.830
So it's common to find components that are going to be 100 lines long or 500 lines long.

41
00:02:44.070 --> 00:02:49.290
And in those components, you may have a very large collection of data properties like ten or more.

42
00:02:49.470 --> 00:02:51.030
You might have ten or more methods.

43
00:02:51.030 --> 00:02:53.100
You might have ten or more computed properties.

44
00:02:53.310 --> 00:02:58.740
And of course, computed properties derive and depend on data and methods often update data.

45
00:02:58.860 --> 00:03:01.380
So there is kind of this relationship between them.

46
00:03:01.380 --> 00:03:03.570
They need to be knowledgeable about each other.

47
00:03:03.720 --> 00:03:09.630
And whenever you have this large component and you have three separate sections and even more, because

48
00:03:09.630 --> 00:03:14.430
there's additional ways that we can set up the configuration object, such as props, as a reminder,

49
00:03:14.670 --> 00:03:20.490
whenever you have those features and their logic scattered across different parts of that set up object,

50
00:03:20.490 --> 00:03:25.440
in many times of the scroll up and down, you have to understand the logic of execution.

51
00:03:25.440 --> 00:03:30.240
This method calls this method which updates this data property, which affects this computed property,

52
00:03:30.420 --> 00:03:35.700
and it becomes kind of hard to isolate the responsibilities of the component and to place them.

53
00:03:35.700 --> 00:03:40.770
And there are lines of code closer to each other simply because the design of the configuration object

54
00:03:40.920 --> 00:03:45.600
forces them into these separate categories like data and computed, right?

55
00:03:45.610 --> 00:03:49.860
So in larger components, it actually makes it kind of difficult to understand what is going on.

56
00:03:50.070 --> 00:03:54.750
This may not be an issue that we see apparently in our code right now, but rest assured, you can you

57
00:03:54.750 --> 00:03:59.220
can sort of see it or imagine it happening as a components grow really large in size.

58
00:03:59.940 --> 00:04:06.210
Another issue is that it becomes difficult to reuse logic, especially reactive logic across components,

59
00:04:06.210 --> 00:04:06.510
right?

60
00:04:06.660 --> 00:04:11.610
So we can define data and we can define computed properties that depend on it, but that requires a

61
00:04:11.610 --> 00:04:14.010
configuration object belonging to a component.

62
00:04:14.310 --> 00:04:20.520
So the problem was we had really no way of extracting that logic, so it lived simply outside of a component.

63
00:04:20.790 --> 00:04:25.320
Now, if you had a solution called mixed ends in version two, but that was generally considered an

64
00:04:25.320 --> 00:04:26.130
anti pattern.

65
00:04:26.130 --> 00:04:27.450
So I'm not going to introduce it.

66
00:04:27.810 --> 00:04:33.330
But as we've hopefully seen or as you've hopefully seen in the previous section, when we explore reactivity

67
00:04:33.540 --> 00:04:40.890
by using Vue three helper functions, we saw that now we had some of that reactive functionality outside

68
00:04:40.890 --> 00:04:42.000
of any given component.

69
00:04:42.180 --> 00:04:46.950
I'm talking about functions like ref and reactive and computed and too RAF.

70
00:04:46.950 --> 00:04:47.220
Right.

71
00:04:47.340 --> 00:04:52.740
We saw that we could use those functions outside of any component and that is kind of the solution that

72
00:04:52.740 --> 00:04:58.530
the composition API is trying to move towards to enable you to reuse logic across components.

73
00:04:58.830 --> 00:05:00.060
The idea is with the.

74
00:05:00.160 --> 00:05:01.210
Composition API.

75
00:05:01.270 --> 00:05:07.330
We write functions which are also called composable, composable that use views, react to features.

76
00:05:07.420 --> 00:05:12.460
So these functions are going to use the functions that we introduced in the previous section like rough

77
00:05:12.460 --> 00:05:13.090
and reactive.

78
00:05:13.330 --> 00:05:17.860
And the beautiful part about that is we can write these reusable functions outside of a component.

79
00:05:18.220 --> 00:05:23.590
They can stored their own idea of data, their own idea of computation, and then we can reuse them

80
00:05:23.590 --> 00:05:25.030
across multiple components.

81
00:05:25.300 --> 00:05:30.940
And as another benefit, we can test these functions outside of a component as well, because they're

82
00:05:30.940 --> 00:05:33.100
going to be playing JavaScript functions.

83
00:05:33.490 --> 00:05:33.640
Right.

84
00:05:33.640 --> 00:05:39.340
So the whole idea, very similar to kind of the principles that we've been talking about when we introduced

85
00:05:39.340 --> 00:05:42.190
Vue X is we're always trying to make components dumber.

86
00:05:42.340 --> 00:05:46.030
We always want components to handle just the display logic, just a view.

87
00:05:46.270 --> 00:05:51.910
But inevitably we need some place to calculate the business logic to do some kind of computation right

88
00:05:51.910 --> 00:05:52.660
or analysis.

89
00:05:52.990 --> 00:05:58.870
Well, in view X, we kind of moved a lot of that logic up to basic JavaScript functions that compose

90
00:05:58.870 --> 00:06:00.580
dark getters or mutations or actions.

91
00:06:00.790 --> 00:06:05.950
And it's sort of a similar design principle here in that we're trying to move a lot of this logic away

92
00:06:05.950 --> 00:06:11.050
from a component in a separate files where we can test them independently and then reuse them across

93
00:06:11.050 --> 00:06:15.850
multiple components so that the components focus as much as they can on just the view.

94
00:06:15.850 --> 00:06:17.020
I'm just the template.

95
00:06:17.860 --> 00:06:24.130
All right, so the basic gist of how the composition API works when it comes to components is in our

96
00:06:24.160 --> 00:06:29.620
script section, in the component configuration object, we're now going to try to bundle all component

97
00:06:29.620 --> 00:06:32.260
logic up in a single setup method.

98
00:06:32.590 --> 00:06:39.160
So if we're going to use the composition API, we no longer need things like data computed or methods.

99
00:06:39.220 --> 00:06:43.510
We're going to bundle everything up within a single setup method and I'll show you how to do that in

100
00:06:43.510 --> 00:06:44.230
the upcoming lessons.

101
00:06:44.440 --> 00:06:50.620
And so that allows a lot of related lines of code to live next to each other that solve the issue that

102
00:06:50.620 --> 00:06:52.360
we saw a couple of slides ago.

103
00:06:52.600 --> 00:06:58.030
And then because the set up method is able to use those composable reactive JavaScript functions, we

104
00:06:58.030 --> 00:07:00.160
also solved the problem of reusability.

105
00:07:00.460 --> 00:07:03.520
So the composition API helps us solve both of the issues.

106
00:07:03.520 --> 00:07:09.640
We saw a couple of slides ago, that reusable aspect and the organization of logic aspect by placing

107
00:07:09.640 --> 00:07:12.910
related code closer together in a single set method.

108
00:07:13.210 --> 00:07:14.830
Now here's a really good piece of news.

109
00:07:15.070 --> 00:07:20.290
The core HTML template syntax like vue directives like v for v.

110
00:07:20.290 --> 00:07:26.020
If the von handler, you know the app sign all those shortcuts, none of that has changed.

111
00:07:26.020 --> 00:07:28.570
That syntax actually remains exactly the same.

112
00:07:28.780 --> 00:07:33.880
Just about all of the changes are going to be in the script section of the component where we set up

113
00:07:34.120 --> 00:07:36.940
things like the data that the component needs in order to operate.

114
00:07:37.090 --> 00:07:41.620
So most of it is going to be on the JavaScript side of things below the actual HTML template.

115
00:07:41.830 --> 00:07:45.100
So other Vue object properties like props or components are not going to change either.

116
00:07:45.280 --> 00:07:47.980
Only how we set up the initial logic for the component.

117
00:07:48.160 --> 00:07:52.750
And that's going to include obviously not just things like data and computed, which we've already mentioned,

118
00:07:52.870 --> 00:07:55.570
but also things like lifecycle hooks like mounted, right?

119
00:07:55.780 --> 00:08:01.750
Also things like talking to the The View Store, using the dollar sign store property that we had previously,

120
00:08:01.870 --> 00:08:06.700
which we're no longer going to have in the setup method or things like the dollar sign, root or object,

121
00:08:06.700 --> 00:08:08.140
which we're no longer going to have either.

122
00:08:08.140 --> 00:08:13.150
So there's a lot of different concepts we've explored in the script section, and the new idea with

123
00:08:13.150 --> 00:08:18.730
the composition API is there's a whole new way to write those ideas within a single setup method.

124
00:08:18.970 --> 00:08:23.200
But the good news is the HTML side of things doesn't change that much, if at all.

125
00:08:23.650 --> 00:08:23.980
All right.

126
00:08:24.130 --> 00:08:28.000
So with that, that is a quick introduction to the composition API and the set up method.

127
00:08:28.150 --> 00:08:31.360
In the very next lesson, we're going to start actually exploring this in this code.

128
00:08:31.570 --> 00:08:36.940
And the way we're going to do so is by refactoring an old component and switching it from being the

129
00:08:36.940 --> 00:08:39.820
app options API to the composition API.

130
00:08:39.970 --> 00:08:44.980
Later on, we're going to move towards a design principle where we're going to try to convert basically

131
00:08:44.980 --> 00:08:50.230
all of our components to the composition API, not necessarily because it's always better to do so,

132
00:08:50.320 --> 00:08:53.680
but because we've had plenty of practice with the Options API already.

133
00:08:53.800 --> 00:08:58.570
And I want to give you a ton of practice with the composition API as well, both refactoring components,

134
00:08:58.690 --> 00:08:59.650
which is a common thing.

135
00:08:59.650 --> 00:09:02.290
If you join a view to project that, you need to put it to V3.

136
00:09:02.470 --> 00:09:07.720
But also we're going to practice writing new features in from scratch using this new composition API

137
00:09:07.720 --> 00:09:08.170
as well.

138
00:09:08.380 --> 00:09:09.910
So there's still a ton left to learn.

139
00:09:09.910 --> 00:09:10.870
I'm looking forward to it.

140
00:09:11.050 --> 00:09:13.810
This is kind of the latest and greatest version of view.

141
00:09:13.930 --> 00:09:16.480
This is all the latest functionality in Vue three.

142
00:09:16.480 --> 00:09:22.480
This is the big thing that it added the composition API which exists alongside the older options API,

143
00:09:22.660 --> 00:09:25.330
a whole different new way to write your view components.

144
00:09:25.540 --> 00:09:28.780
And we're going to start exploring it in our editor in the very next lesson.
