WEBVTT
1
00:00:00.520 --> 00:00:01.280
Okay.

2
00:00:01.280 --> 00:00:07.310
So the next thing I want to do is whenever the user clicks the clear filters button, I want to obviously

3
00:00:07.310 --> 00:00:11.060
clear all the checkboxes, but it also makes sense to clear their input.

4
00:00:11.060 --> 00:00:15.140
I want the user to be able to basically start the entire search from scratch.

5
00:00:15.440 --> 00:00:20.630
And you'll notice when I do this right now we do correctly clear the checkboxes in our checkbox group

6
00:00:20.630 --> 00:00:24.010
component, but we do not clear our skills and qualifications.

7
00:00:24.020 --> 00:00:24.620
Search Term.

8
00:00:24.950 --> 00:00:31.550
Now the good news is this is now going to be super simple because we have this logic directly connected

9
00:00:31.550 --> 00:00:32.780
to our view, text or state.

10
00:00:33.080 --> 00:00:38.420
So all we need to do is make sure our view store state is updated, that skills search term property

11
00:00:38.570 --> 00:00:44.330
and if it becomes an empty string, our component will automatically react because it's not using local

12
00:00:44.330 --> 00:00:49.490
components state to track this, it's directly connected to the View store and our component will react,

13
00:00:49.490 --> 00:00:55.010
react and automatically clear this once this skill search term property becomes an empty string.

14
00:00:55.340 --> 00:01:02.660
So with that said, we can transition back to my code editor and I'm going to open up my mutations that

15
00:01:02.660 --> 00:01:02.900
yes.

16
00:01:02.910 --> 00:01:04.430
File on the right hand side.

17
00:01:04.430 --> 00:01:06.670
I'm going to open up my mutations test.

18
00:01:06.680 --> 00:01:07.400
That's valid.

19
00:01:07.790 --> 00:01:13.220
And as a reminder, we have this mutation right here, clear user job filter selections.

20
00:01:13.430 --> 00:01:18.050
And currently all it does is it clears the arrays that are storing the checkboxes.

21
00:01:18.230 --> 00:01:24.650
So all we need to do here is to set our skills search term string back to be an empty string and automatically

22
00:01:24.650 --> 00:01:29.960
our skills components should react to that change and clear its own input, which is connected using

23
00:01:29.960 --> 00:01:31.910
the model to our store state.

24
00:01:32.270 --> 00:01:35.780
So let me first find my test right here.

25
00:01:35.780 --> 00:01:40.880
We have clear user job filter selections and so I want to mimic the real world.

26
00:01:41.030 --> 00:01:45.650
So I'm going to imagine now that my state does have a skills search term that is populated.

27
00:01:45.890 --> 00:01:48.050
So it can be some kind of random skill right here.

28
00:01:49.050 --> 00:01:55.020
And what I expect to happen is after I run this mutation, I expect that I will return this skills search

29
00:01:55.020 --> 00:01:59.400
term property back to its starting state, which is an empty string, a string without characters.

30
00:01:59.670 --> 00:02:01.590
So I'm going to add an extra assertion right here.

31
00:02:02.580 --> 00:02:07.550
I expect my starting state that skills search term to be an empty string.

32
00:02:08.430 --> 00:02:08.640
All right.

33
00:02:08.640 --> 00:02:11.550
And once again, I'm choosing to be, because that is what we use for primitives.

34
00:02:11.700 --> 00:02:14.610
We use to equal four objects, including arrays in jest.

35
00:02:15.090 --> 00:02:15.270
All right.

36
00:02:15.270 --> 00:02:16.230
So I'm going to save that.

37
00:02:17.960 --> 00:02:20.900
And obviously that will fail for the expected reasons.

38
00:02:20.900 --> 00:02:26.240
Right here in my mutation, I'm going to affect or change one more property that is going to be skill

39
00:02:26.240 --> 00:02:26.870
search term.

40
00:02:27.050 --> 00:02:32.450
I'm going to set it back to be an empty string that's going to take care of things on the view side,

41
00:02:32.450 --> 00:02:38.150
which will automatically affect the component which will detect this change and render the input with

42
00:02:38.150 --> 00:02:38.750
the V model.

43
00:02:39.110 --> 00:02:39.360
Okay.

44
00:02:39.380 --> 00:02:41.930
So our test is passing and we can transition back to the browser.

45
00:02:43.630 --> 00:02:45.160
It's right here, starting from scratch.

46
00:02:46.130 --> 00:02:47.630
I can enter something like Java.

47
00:02:48.290 --> 00:02:50.210
Provide a couple values here.

48
00:02:50.660 --> 00:02:52.250
Write a couple values here.

49
00:02:53.180 --> 00:02:54.830
Let's do a couple of values here as well.

50
00:02:55.220 --> 00:02:59.680
And when I press clear filters, I expect that all of this stuff will clear out.

51
00:02:59.840 --> 00:03:01.190
3 to 1.

52
00:03:01.730 --> 00:03:02.330
There we go.

53
00:03:02.360 --> 00:03:07.490
You can see the checkboxes go away and so does the search term, which is connected to our input in

54
00:03:07.490 --> 00:03:08.270
the skills component.

55
00:03:08.450 --> 00:03:13.370
And that is the beautiful part is we do not need to use the subscribe method which we implemented here

56
00:03:13.580 --> 00:03:17.420
because this is directly connected to the bookstore state using two way data binding.

57
00:03:17.600 --> 00:03:20.570
So when the bookstore state updates, so does the component.

58
00:03:20.690 --> 00:03:21.770
And that's the beautiful part.

59
00:03:21.920 --> 00:03:26.210
It's less manual, it's less explicit view takes care of the logic for us.

60
00:03:26.390 --> 00:03:32.030
And that is why our solution in this section where we used a computed function with an object with get

61
00:03:32.030 --> 00:03:37.130
and set methods, is better than our former solution because it's a lot more automatic and automated

62
00:03:37.130 --> 00:03:37.580
for us.

63
00:03:37.940 --> 00:03:38.240
All right.

64
00:03:38.240 --> 00:03:39.800
That's all there is to cover in this lesson.

65
00:03:39.800 --> 00:03:41.360
So I will see you in the next one.
