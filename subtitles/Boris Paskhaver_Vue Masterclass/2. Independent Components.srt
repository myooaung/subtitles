1
00:00:00,610 --> 00:00:01,440
Okay.

2
00:00:01,450 --> 00:00:07,330
So before we start working on our action button component, there is one point that I'd like to reiterate

3
00:00:07,510 --> 00:00:12,700
that I mentioned earlier in the course, and that is that each view component is independent.

4
00:00:12,880 --> 00:00:19,120
That means it tracks its own data, its own state, independent of what other components are doing.

5
00:00:19,360 --> 00:00:25,090
And that is a good thing because it prevents one components changes from accidentally affecting another

6
00:00:25,090 --> 00:00:25,600
component.

7
00:00:25,810 --> 00:00:31,900
Each one is its own isolated island, and each one keeps track of its own internals, its own data,

8
00:00:31,900 --> 00:00:32,410
etc..

9
00:00:32,800 --> 00:00:38,170
So for example, here we have our main NAV component, and if I scroll down here as a reminder, we

10
00:00:38,170 --> 00:00:43,990
have this data method which configures the data that the component has and can use in its template.

11
00:00:44,260 --> 00:00:48,910
And currently in our app component, we are rendering one main nav component.

12
00:00:49,240 --> 00:00:53,770
We'll imagine that we rendered three main nav components side by side.

13
00:00:53,770 --> 00:00:56,320
We'd have three nav bars right next to each other.

14
00:00:56,680 --> 00:01:03,280
So what would happen is in that scenario, each one of those main nav view components would receive

15
00:01:03,280 --> 00:01:08,350
a separate copy of this data to put it in another two terms.

16
00:01:08,350 --> 00:01:13,780
Or in other words, the three main components would not share one data object.

17
00:01:13,780 --> 00:01:20,050
Rather, they would each get their own copy, their own isolated chunk of this data, which means that

18
00:01:20,050 --> 00:01:25,810
the changes in data in one main NAV, such as, for example, the triggering of the log in user method

19
00:01:25,930 --> 00:01:29,080
would not affect any other main nav components.

20
00:01:29,410 --> 00:01:30,970
Let me show you this in action.

21
00:01:30,970 --> 00:01:36,700
And just for this lesson, you do not have to follow along since I'm going to revert all the changes

22
00:01:36,700 --> 00:01:37,480
that I make anyway.

23
00:01:37,660 --> 00:01:39,370
This is purely for the sake of example.

24
00:01:39,640 --> 00:01:43,930
So what I'm going to do here very quickly is I'm going to remove some CSS classes.

25
00:01:44,320 --> 00:01:48,310
This is just to ensure that our main NAV components can render side by side with each other.

26
00:01:48,580 --> 00:01:53,770
So I'm going to remove these classes right here and then I'm going to navigate to my app dot view component.

27
00:01:54,580 --> 00:01:59,110
And here is where we are importing the main nav component and rendering it once in the screen.

28
00:01:59,380 --> 00:02:03,700
So I'm going to copy and paste this code two more times below and save.

29
00:02:03,880 --> 00:02:10,600
So now we have three main nav components rendering side by side and that is totally valid in view because

30
00:02:10,600 --> 00:02:12,760
of course the benefit of view is just this.

31
00:02:12,760 --> 00:02:18,910
We have these reusable chunks of the UI that we can use as often as we want and we do not have to rewrite

32
00:02:18,910 --> 00:02:20,140
the HTML for them again.

33
00:02:20,530 --> 00:02:27,670
So if I go to my browser now, I will predictably have three separate main nav components being rendered

34
00:02:27,820 --> 00:02:31,180
and here in my view devtools, I can actually see them side by side here.

35
00:02:31,180 --> 00:02:34,030
Here's the first one, here's the second one and here's the third one.

36
00:02:34,300 --> 00:02:38,860
And you'll notice for each main nav component, the view devtools is going to show us the data on the

37
00:02:38,860 --> 00:02:39,490
right hand side.

38
00:02:39,730 --> 00:02:45,490
This data again is independent and isolated to each respective main nav component.

39
00:02:45,850 --> 00:02:47,350
So what do you think is going to happen?

40
00:02:47,350 --> 00:02:52,720
When I go to my first main nav and I click the sign in button and trigger a change to the is logged

41
00:02:52,720 --> 00:02:53,470
in property.

42
00:02:53,470 --> 00:02:58,630
Well, let's take a look on the very first component we're going to change the value of the is logged

43
00:02:58,630 --> 00:03:03,940
in property to true which will cause a view to re render that component and replace the sign in button

44
00:03:03,940 --> 00:03:05,020
with a profile image.

45
00:03:05,320 --> 00:03:10,840
However, notice that the is logged in property for the other main nav components is still going to

46
00:03:10,840 --> 00:03:16,540
be false and that is expected behavior and good behavior because as I mentioned, each component is

47
00:03:16,540 --> 00:03:19,270
isolated and independent from each other.

48
00:03:19,390 --> 00:03:25,250
So we can't accidentally do a thing here and accidentally have it pollute or affect us.

49
00:03:25,510 --> 00:03:27,070
Totally different component elsewhere.

50
00:03:27,250 --> 00:03:33,280
The components are each reusable, independent, isolated chunks of the UI and so changes in one do

51
00:03:33,280 --> 00:03:34,300
not affect the other.

52
00:03:34,960 --> 00:03:39,910
So similarly, if I were to go to my third main nav and click this time and button, that would change

53
00:03:39,910 --> 00:03:44,650
the internal data or the internal state of this main nav component.

54
00:03:44,650 --> 00:03:50,230
The third one, but the second one still keeps its original state, and in fact the first one still

55
00:03:50,230 --> 00:03:54,880
keeps its original state as well, because the first one has also not been affected by the click of

56
00:03:54,880 --> 00:03:56,770
this former button right here.

57
00:03:56,980 --> 00:03:57,310
All right.

58
00:03:57,430 --> 00:03:59,350
That's all there is to take away from this lesson.

59
00:03:59,350 --> 00:04:02,230
It's that the components keep their own independent state.

60
00:04:02,800 --> 00:04:04,000
They are all isolated.

61
00:04:04,000 --> 00:04:06,190
They each have an independent copy of the data.

62
00:04:06,370 --> 00:04:11,740
We still have to define the data because we define what information that component should contain inside

63
00:04:11,740 --> 00:04:11,830
it.

64
00:04:11,830 --> 00:04:16,600
That might change and that might affect the UI, whether it be through things like interpolation or

65
00:04:16,600 --> 00:04:17,110
directives.

66
00:04:17,320 --> 00:04:23,620
But each component keeps its own copy of that logic, its own methods, its own data, etc. And that's

67
00:04:23,620 --> 00:04:27,640
an important thing to know as we start building a lots of reusable components that we can use over and

68
00:04:27,640 --> 00:04:27,970
over.

69
00:04:27,970 --> 00:04:32,710
We don't have to worry about one change accidentally affecting other components of the same type.

70
00:04:32,920 --> 00:04:33,280
All right.

71
00:04:33,490 --> 00:04:35,110
That's all there is to cover in this lesson.

72
00:04:35,110 --> 00:04:36,550
So I will see you in the next one.
