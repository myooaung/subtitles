1
00:00:00,400 --> 00:00:01,200
Okay.

2
00:00:01,200 --> 00:00:05,760
So let's write a test for our new used confirmed root composable function.

3
00:00:06,150 --> 00:00:07,740
So I'll open my file explorer.

4
00:00:08,340 --> 00:00:15,930
And right here in the tests unit directory, I'm going to create a new folder and I'll call it composable,

5
00:00:16,950 --> 00:00:23,430
mirroring the directory structure of my source directory and in composable I'll create my use confirmed

6
00:00:23,430 --> 00:00:27,480
route dot test dot J.S. Test file.

7
00:00:28,200 --> 00:00:30,000
Let me collapse my explorer.

8
00:00:30,000 --> 00:00:35,160
Let me drag this to the right hand side and let's begin by importing our actual tested function which

9
00:00:35,160 --> 00:00:41,670
is going to be used confirm route and automatically Vsco did it for me, but it's going to be the source

10
00:00:41,670 --> 00:00:47,460
directory slash composable slash use confirmed out and here we'll write our describe for use confirm

11
00:00:47,460 --> 00:00:47,760
root.

12
00:00:50,220 --> 00:00:51,420
And there we go.

13
00:00:51,930 --> 00:00:52,320
All right.

14
00:00:52,320 --> 00:00:56,560
So as always, I'm going to argue the exact same things I've argued throughout the entire course.

15
00:00:56,580 --> 00:01:03,070
We do not need to use the real use root function in order to test whether use confirmed.

16
00:01:03,070 --> 00:01:04,530
Root does what it's supposed to do.

17
00:01:04,860 --> 00:01:11,550
Our functions responsibility is to get an object from use root, but we can simply mark out, use root

18
00:01:11,550 --> 00:01:13,050
and give any object back.

19
00:01:13,260 --> 00:01:17,610
And as long as that object has a name property, we're going to be able to validate that.

20
00:01:17,610 --> 00:01:20,730
All of the logic in these two lines is working as expected.

21
00:01:21,060 --> 00:01:25,920
So the way that we're going to mark out view router or more specifically the user out function is going

22
00:01:25,920 --> 00:01:30,720
to be the same in this file as it is for the component files where we've done similar marking before.

23
00:01:31,140 --> 00:01:35,790
So right here at the very top, I'm going to import use root.

24
00:01:36,000 --> 00:01:40,770
That's the exact same thing I'm using in my implementation and I'm going to get that from Vue router.

25
00:01:41,160 --> 00:01:46,890
And then on the line below on my global just object, I'll invoke the MOC method pass in the library

26
00:01:46,890 --> 00:01:49,260
that I want to mark out, which is Vue router.

27
00:01:49,470 --> 00:01:55,710
So just is going to loop through that library and it's going to mark out every single named export including

28
00:01:55,710 --> 00:02:00,630
use root, which means at this point, use root is going to be a just mock function that returns undefined.

29
00:02:00,870 --> 00:02:02,730
But I don't need it to return undefined.

30
00:02:02,760 --> 00:02:07,440
I needed to return an object with a name property because that's what used confirmed root needs in order

31
00:02:07,440 --> 00:02:08,070
to be tested.

32
00:02:08,460 --> 00:02:10,350
So right here, I'm going to write my description.

33
00:02:11,780 --> 00:02:17,450
It determines if page root matches specified root.

34
00:02:19,180 --> 00:02:24,220
So right here, I'm going to take you route, which at this juncture is going to be a just mock function

35
00:02:24,460 --> 00:02:30,130
so I can invoke the mock return value method and tell it that whenever it's invoked, for example,

36
00:02:30,130 --> 00:02:34,680
when the test suite runs my function on the left, I don't want it to return undefined.

37
00:02:34,780 --> 00:02:39,310
I want it to return an object with a name property and let's provide a string here like home.

38
00:02:40,870 --> 00:02:45,730
Then on the next line I can define a constant like root name just to provide a little bit of clarity

39
00:02:45,730 --> 00:02:46,390
on what this is.

40
00:02:46,630 --> 00:02:48,070
And I'll make my route name home.

41
00:02:48,760 --> 00:02:52,540
Then what I'm going to do is invoke my use confirmed root function.

42
00:02:52,550 --> 00:02:55,000
This is what I'm testing and I'll pass in my root name.

43
00:02:55,750 --> 00:03:01,560
So in this case, because our root name of home matches the name property on this fictional or mock

44
00:03:02,050 --> 00:03:05,650
root object, we should get back a true value.

45
00:03:05,860 --> 00:03:11,020
But let me be a little bit more specific because use confirmed root is not going to give us back a boolean

46
00:03:11,020 --> 00:03:11,890
of true or false.

47
00:03:11,890 --> 00:03:12,190
Right?

48
00:03:12,400 --> 00:03:18,310
It's going to give us a reactive object returned by the computed function that is storing that value

49
00:03:18,310 --> 00:03:19,360
of either true or false.

50
00:03:19,360 --> 00:03:24,850
In fact, it's updating it technically whenever the computed function runs because the root object changes.

51
00:03:25,180 --> 00:03:27,880
So right here, I'm going to save this to accounts called Result.

52
00:03:29,770 --> 00:03:34,150
And then the very next line, when I make my assertion, it's very important to understand here that

53
00:03:34,150 --> 00:03:37,380
we don't just want to assert that result is going to be the values.

54
00:03:37,390 --> 00:03:37,840
True.

55
00:03:38,110 --> 00:03:39,440
That is not going to be the case.

56
00:03:39,460 --> 00:03:40,900
Let me just show you that failure right now.

57
00:03:41,080 --> 00:03:44,220
We're going to get a failure because what result is is not a boolean.

58
00:03:44,230 --> 00:03:50,360
It's the reactive object from view that is storing that value plus all the additional reactive methods.

59
00:03:50,620 --> 00:03:55,240
So on the object that we get back, which is what we get from computed, I'm going to access the value

60
00:03:55,240 --> 00:03:55,780
property.

61
00:03:56,970 --> 00:03:59,070
And I expect that to be true.

62
00:03:59,550 --> 00:04:02,160
And that's the actual test and that is what is going to pass.

63
00:04:02,490 --> 00:04:08,340
So with this setup where we are marking out use route, we are still focusing on what are use confirmed

64
00:04:08,340 --> 00:04:09,600
root function is supposed to do.

65
00:04:09,750 --> 00:04:10,770
We are still testing that.

66
00:04:10,770 --> 00:04:14,370
We are accessing the right property on the object that we are comparing to the string.

67
00:04:14,490 --> 00:04:19,320
We are capturing the heart of what our function is supposed to do without worrying about the implementation

68
00:04:19,320 --> 00:04:20,700
of how use route works.

69
00:04:20,970 --> 00:04:25,800
Once again, the reason this is a good idea is because if hypothetically something was broken in use

70
00:04:25,800 --> 00:04:28,710
root and it broke, our test would fail.

71
00:04:28,710 --> 00:04:31,080
But that wouldn't be a reflection of our code being wrong.

72
00:04:31,170 --> 00:04:33,660
It would be a reflection of the view team's code being wrong.

73
00:04:33,930 --> 00:04:41,280
And similarly, in the actual code base for Vue router, there are tests for use root that verify that

74
00:04:41,280 --> 00:04:43,110
it is doing its own responsibility.

75
00:04:43,200 --> 00:04:46,620
It is not our job to test other developers and other libraries code.

76
00:04:46,740 --> 00:04:49,260
We only want to test our logic and our code base.

77
00:04:49,470 --> 00:04:53,760
Our code base simply says use root will give me an object with a named property and then I'm going to

78
00:04:53,760 --> 00:04:54,270
compare it.

79
00:04:54,420 --> 00:04:56,100
That's all this function cares about.

80
00:04:56,190 --> 00:04:58,650
That's all I want to worry about in my unit tests.

81
00:04:58,950 --> 00:04:59,250
All right.

82
00:04:59,250 --> 00:05:02,700
And just to show this is going to fail if I change this to something like homes, we're going to get

83
00:05:02,700 --> 00:05:05,870
an object with a false value, reactive instead of true.

84
00:05:05,880 --> 00:05:07,230
That's exactly what we get right here.

85
00:05:08,070 --> 00:05:14,520
And similarly, if we were to change this implementation right here on the left to have some kind of

86
00:05:14,520 --> 00:05:16,020
error, this would fail just as well.

87
00:05:16,290 --> 00:05:17,060
So that's it.

88
00:05:17,070 --> 00:05:20,490
That is our simple, plain single test for our composable function.

89
00:05:20,670 --> 00:05:22,500
So now we've tested it and we're good to move on.

90
00:05:22,740 --> 00:05:24,350
So I will see you in the next lesson.
