WEBVTT
1
00:00:00.240 --> 00:00:01.260
All right.

2
00:00:01.260 --> 00:00:05.010
So in this lesson will introduce interfaces and types.

3
00:00:05.280 --> 00:00:10.770
Now, these two constructs, interfaces and types are super, super similar to each other.

4
00:00:10.950 --> 00:00:17.040
So much so that the TypeScript documentation says they're just about interchangeable with one another.

5
00:00:17.310 --> 00:00:21.960
Now there are some small differences between them, but they're not really important for us until we

6
00:00:21.960 --> 00:00:23.760
get to really advanced TypeScript.

7
00:00:24.030 --> 00:00:27.210
So for now, you can consider them as basically being equivalent.

8
00:00:27.630 --> 00:00:30.840
So what problem do interfaces and types solve for us?

9
00:00:31.050 --> 00:00:37.440
They allow us to have a reusable object type definition so that we cut down on the amount of code we

10
00:00:37.440 --> 00:00:41.160
have to write and also cut down on the duplication throughout our code.

11
00:00:41.520 --> 00:00:42.690
So let me give you an example.

12
00:00:42.900 --> 00:00:45.300
Let's see, I have two constants here.

13
00:00:45.480 --> 00:00:47.490
My first one will be called the character one.

14
00:00:48.420 --> 00:00:54.900
And here I'll create an object and it will have a name property set to a string of link and a scale

15
00:00:54.900 --> 00:00:56.910
property set to a string of sword fighting.

16
00:00:58.040 --> 00:01:04.070
And down below, I'll create another concept called Character two, and Character two will be a very

17
00:01:04.070 --> 00:01:09.470
similar object with the name of Mario and a skill of jumping.

18
00:01:09.800 --> 00:01:11.960
In fact, let's add another property here.

19
00:01:11.990 --> 00:01:15.360
Let's add a likes mushrooms property and let's set it to true.

20
00:01:16.190 --> 00:01:22.100
So we could argue for the purposes of our program, in our business logic, that these two types of

21
00:01:22.100 --> 00:01:25.850
objects are similar or identical in our program.

22
00:01:25.910 --> 00:01:30.680
Right now it's up to us to determine whether, for example, likes mushrooms is something that makes

23
00:01:30.860 --> 00:01:33.380
this type of object very distinct from this one.

24
00:01:33.710 --> 00:01:38.510
But I can argue, let's say, just for the sake of argument, that these two objects are basically the

25
00:01:38.510 --> 00:01:39.320
same type.

26
00:01:39.590 --> 00:01:41.870
They're going to have a name property set to a string.

27
00:01:42.080 --> 00:01:44.360
They're going to have a skill property set to a string.

28
00:01:44.540 --> 00:01:48.670
And they're going to have an optional likes, mushrooms, property set to a boom.

29
00:01:48.980 --> 00:01:54.110
And let's say that description of that type of object with that shape, with those properties, with

30
00:01:54.110 --> 00:01:57.770
those types, is something that I want to reuse many times throughout my program.

31
00:01:58.070 --> 00:02:02.480
So what I obviously don't want to do is to go through every single manual declaration here.

32
00:02:02.600 --> 00:02:05.840
And if I'm explicitly declaring types, I don't want to have to do this.

33
00:02:06.560 --> 00:02:10.640
And the reason I don't want to have to do this is because it's going to create a lot of duplication.

34
00:02:10.700 --> 00:02:14.420
I'm going to have to do the exact same thing right here to provide name of string.

35
00:02:14.600 --> 00:02:15.530
Skill of string.

36
00:02:16.190 --> 00:02:20.720
In fact, right here I can provide like mushrooms as being a boolean property.

37
00:02:20.720 --> 00:02:23.570
That is optional, which means I can replicate the same thing up here.

38
00:02:23.810 --> 00:02:26.390
I'm going to provide a likes mushrooms boolean property.

39
00:02:26.690 --> 00:02:31.730
And so once again, we have this duplication even though we're trying to represent the same object type.

40
00:02:32.060 --> 00:02:38.210
So the whole benefit of an interface or a type in TypeScript is that we can extract this logic right

41
00:02:38.210 --> 00:02:43.400
here, this specific object shape to its own named construct in our program.

42
00:02:43.670 --> 00:02:45.770
And the syntax is going to be pretty, pretty simple.

43
00:02:45.990 --> 00:02:46.610
So right here.

44
00:02:46.640 --> 00:02:48.170
Let's first talk about interfaces.

45
00:02:48.380 --> 00:02:51.350
What I'm going to do is use the actual word interface.

46
00:02:51.650 --> 00:02:54.890
An interface simply means I'm describing a type of object.

47
00:02:55.100 --> 00:02:56.930
I'm not providing an implementation.

48
00:02:56.930 --> 00:03:02.240
Remember, I'm really providing type definitions, but I'm describing what a specific type of object

49
00:03:02.240 --> 00:03:03.470
in JavaScript will look like.

50
00:03:03.890 --> 00:03:08.030
Here, after the word interface, we provide a name for our interface.

51
00:03:08.210 --> 00:03:11.840
And typically this is going to have camel case naming formatting.

52
00:03:12.110 --> 00:03:17.750
So let's say each one of these object types, the below I can describe as being a video game character.

53
00:03:18.080 --> 00:03:23.390
So right here I'm going to use the name video game character that is going to be the name I provide

54
00:03:23.390 --> 00:03:24.320
to my interface.

55
00:03:24.650 --> 00:03:27.170
Afterwards, I provide a pair of curly braces.

56
00:03:27.350 --> 00:03:33.200
And in here I provide the types for the properties of this video game character object.

57
00:03:33.410 --> 00:03:33.680
Right.

58
00:03:33.800 --> 00:03:35.360
So this is not a literal object.

59
00:03:35.360 --> 00:03:36.170
This is not a value.

60
00:03:36.290 --> 00:03:37.990
This is a blueprint in a way.

61
00:03:38.000 --> 00:03:41.600
It's a type definition for an eventual video game character object.

62
00:03:41.840 --> 00:03:47.240
Basically, what I provide in here is exactly what I'm providing in my literal object definition right

63
00:03:47.240 --> 00:03:48.170
here in curly braces.

64
00:03:48.380 --> 00:03:52.950
Except this interface is going to be reusable many times, and I only have to write it once.

65
00:03:53.270 --> 00:03:58.100
So let's say my video game character object must have a name property that's going to be a string.

66
00:03:58.880 --> 00:04:04.250
So I'm going to provide that, then provide a semicolon and I'm breaking this up across multiple lines.

67
00:04:04.400 --> 00:04:08.600
That is the common convention that just makes things really easy to read and makes it really easy to

68
00:04:08.600 --> 00:04:12.710
identify how many properties you have and what their exact type assignments are.

69
00:04:13.100 --> 00:04:15.590
So my video game character will have a name, such a string.

70
00:04:15.740 --> 00:04:20.480
It's going to have a skill set to a string as well, and it's going to have an optional like mushrooms

71
00:04:20.480 --> 00:04:20.990
property.

72
00:04:21.200 --> 00:04:24.860
So I'm going to make sure I end this with a question mark and that is going to be a boolean.

73
00:04:25.770 --> 00:04:31.050
And so now, instead of manually writing out this type definition right here, I can simply replace

74
00:04:31.050 --> 00:04:32.400
this with my interface.

75
00:04:32.610 --> 00:04:36.900
So character one will be an object that is of type video game character.

76
00:04:37.320 --> 00:04:37.590
Right.

77
00:04:37.590 --> 00:04:43.140
And because TypeScript says, okay, I'm validating that what you gave me right here has to fulfill

78
00:04:43.140 --> 00:04:44.190
everything you gave me here.

79
00:04:44.370 --> 00:04:45.320
Everything is valid.

80
00:04:45.330 --> 00:04:47.010
You've given me a name that's a string.

81
00:04:47.160 --> 00:04:48.180
You've given me a skill.

82
00:04:48.180 --> 00:04:50.730
That's a string you have not given me likes mushrooms.

83
00:04:50.730 --> 00:04:51.630
But that is optional.

84
00:04:51.780 --> 00:04:53.430
This is going to pass, right?

85
00:04:53.580 --> 00:04:56.070
And once again, the exact same type safety occurs.

86
00:04:56.280 --> 00:05:00.600
So if I tried to give a name something besides a string like the number five, we're going to get the

87
00:05:00.600 --> 00:05:06.030
exact same expected error because it's going to say, hey, type number is not assignable to type string.

88
00:05:06.210 --> 00:05:10.890
The expected type comes from property name, which is declared on the type video game character.

89
00:05:11.160 --> 00:05:16.500
So we get the exact same benefits of type checking, except we get the reusability of isolating this

90
00:05:16.500 --> 00:05:21.240
definition to its own separate named constructor that is reusable throughout our program.

91
00:05:21.570 --> 00:05:23.460
So right here, let me return this back to Link.

92
00:05:24.660 --> 00:05:27.720
And you guess that we can reuse video game character below as well.

93
00:05:27.900 --> 00:05:32.910
So right here, instead of writing this out and duplicating that code, we can simply change it like

94
00:05:32.910 --> 00:05:34.530
so and we get the benefits.

95
00:05:34.770 --> 00:05:39.360
And the beautiful part is if tomorrow we decide that a video game character needs an additional property.

96
00:05:39.360 --> 00:05:39.630
Right?

97
00:05:39.870 --> 00:05:41.400
Like maybe it has something here.

98
00:05:41.400 --> 00:05:43.650
Like, I don't know, language setter string.

99
00:05:44.010 --> 00:05:44.280
Right.

100
00:05:44.370 --> 00:05:49.620
As soon as we add this, we're going to get our errors everywhere in the program where we utilize video

101
00:05:49.620 --> 00:05:50.220
game character.

102
00:05:50.310 --> 00:05:55.440
And that's a good thing because it ensures that this one change reverberates throughout any place where

103
00:05:55.440 --> 00:05:56.070
it's being used.

104
00:05:56.280 --> 00:06:02.250
In comparison, if we declared our types manually in line and we forgot to, for example, provide a

105
00:06:02.250 --> 00:06:06.960
certain property in one definition, then we would only see that error there, but not elsewhere.

106
00:06:07.080 --> 00:06:09.210
Now we gain the benefits of reusability.

107
00:06:09.210 --> 00:06:13.710
Wherever we are seeing a video game character being used, TypeScript is going to warn us that we are

108
00:06:13.710 --> 00:06:15.600
not honoring that contract.

109
00:06:15.840 --> 00:06:19.950
That's a common word you're going to hear when you're talking about interfaces in type languages.

110
00:06:20.190 --> 00:06:22.410
An interface can be described like a contract.

111
00:06:22.590 --> 00:06:27.750
It is a promise that the object makes that it will fulfill something, right?

112
00:06:27.750 --> 00:06:32.250
So when we have an interface, a video game character, what we're seeing here is that character one

113
00:06:32.280 --> 00:06:33.410
promises.

114
00:06:33.420 --> 00:06:38.070
Just like when you promise to do something, when you sign a contract, it promises that its shape will

115
00:06:38.070 --> 00:06:40.590
resemble the type called the video game character.

116
00:06:41.530 --> 00:06:43.240
So that's the purpose that an interface serves.

117
00:06:43.330 --> 00:06:43.660
All right.

118
00:06:43.900 --> 00:06:45.040
So let's talk about types.

119
00:06:45.220 --> 00:06:46.840
Types are very, very similar.

120
00:06:46.840 --> 00:06:51.160
And you can view them, as I mentioned earlier, as basically being equivalent to an interface.

121
00:06:51.340 --> 00:06:53.800
The only difference is the syntax.

122
00:06:53.980 --> 00:06:58.000
Number one, and some small menu differences that we don't want to worry about right now.

123
00:06:58.300 --> 00:06:59.980
So the type syntax looks like this.

124
00:07:00.070 --> 00:07:02.300
Instead of using the word interface right here.

125
00:07:02.350 --> 00:07:04.210
I replaced this with the word type.

126
00:07:04.840 --> 00:07:10.720
And then instead of doing the curly braces immediately afterwards, instead I provide an equal sign.

127
00:07:10.960 --> 00:07:12.250
And that is the only difference.

128
00:07:12.250 --> 00:07:13.840
The logic remains exactly the same.

129
00:07:13.990 --> 00:07:18.490
We are declaring what you can think of as an object type called the video game character.

130
00:07:18.700 --> 00:07:24.760
Each object that we promise has that type must have two required properties and one optional boolean

131
00:07:24.760 --> 00:07:25.120
property.

132
00:07:25.330 --> 00:07:26.440
So same rules apply.

133
00:07:26.440 --> 00:07:30.550
If I change skill here to something like an array, we're going to get an error because it's going to

134
00:07:30.550 --> 00:07:33.520
tell us, hey, the expected type comes from property skill.

135
00:07:33.670 --> 00:07:39.220
You told me that's going to be a string, but your type of an array in this case a never array, that's

136
00:07:39.220 --> 00:07:43.690
not assignable to the type string that you promised me on your video game, character type.

137
00:07:44.140 --> 00:07:44.350
All right.

138
00:07:44.350 --> 00:07:47.980
So if I change this back, we're going to get back to a passing state.

139
00:07:48.280 --> 00:07:53.380
So the syntax is slightly different type instead of interface, an equal sign before the curly braces.

140
00:07:53.560 --> 00:07:59.110
But otherwise, for the most part, you can consider a type and an interface to be basically interchangeable

141
00:07:59.110 --> 00:08:02.620
with each other, and they will be interchangeable for us as we move throughout the course.

142
00:08:02.830 --> 00:08:05.740
If you are curious about the specific differences between the two.

143
00:08:05.890 --> 00:08:08.410
I will provide a link as a resource to this lesson.

144
00:08:08.590 --> 00:08:13.300
But again, that's really only important when you want to get into really advanced TypeScript to explore

145
00:08:13.300 --> 00:08:16.360
the actual differences between those two constructs in the language.

146
00:08:16.720 --> 00:08:17.020
All right.

147
00:08:17.050 --> 00:08:18.730
That's all there is to cover in this lesson.

148
00:08:18.730 --> 00:08:20.290
So I will see you in the next one.
