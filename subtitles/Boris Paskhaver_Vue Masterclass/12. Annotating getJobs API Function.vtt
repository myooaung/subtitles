WEBVTT
1
00:00:00.530 --> 00:00:01.310
Okay.

2
00:00:01.310 --> 00:00:07.580
So in the previous lesson we refactored our spotlight component and we saw how we could use a generic

3
00:00:07.610 --> 00:00:16.370
type argument to the Axios get method to clarify to Axios the shape or the type of the response that

4
00:00:16.370 --> 00:00:19.160
would be received from the endpoint we were reaching out to.

5
00:00:19.460 --> 00:00:22.280
So now that we have that knowledge, let's practice using it.

6
00:00:22.520 --> 00:00:27.230
And you may recall that our code base has a separate API for the right here.

7
00:00:27.830 --> 00:00:34.460
And in here we have a very similar function called get jobs and its responsibility is to fetch the jobs

8
00:00:34.460 --> 00:00:35.090
from the backend.

9
00:00:35.090 --> 00:00:40.310
And then later on there is a UX action that actually runs this asynchronous function and then of course

10
00:00:40.310 --> 00:00:41.810
saves the jobs the view store.

11
00:00:42.170 --> 00:00:46.730
So now that we know a little bit more about how Axios works and its types, let's go ahead and apply

12
00:00:46.730 --> 00:00:48.800
the exact same type logic to this file.

13
00:00:49.130 --> 00:00:52.250
So right here, I'm going to change it to get jobs.

14
00:00:52.280 --> 00:00:54.650
That's right.

15
00:00:54.650 --> 00:00:57.770
And by itself, it doesn't look like TypeScript is going to have any violations.

16
00:00:58.010 --> 00:01:01.730
But remember, TypeScript cannot automatically make an API request for you.

17
00:01:01.880 --> 00:01:08.240
And so it doesn't have any clue about what this method will return as far as the return value from the

18
00:01:08.240 --> 00:01:09.500
actual API URL.

19
00:01:09.500 --> 00:01:09.770
Right.

20
00:01:10.070 --> 00:01:14.390
And if we are able to provide it here, then anywhere where we use the get jobs function throughout

21
00:01:14.390 --> 00:01:20.180
the code base will be able to communicate to that part what this return value will be, which will enable

22
00:01:20.180 --> 00:01:21.350
much better type checking.

23
00:01:21.560 --> 00:01:27.110
So I do want to make sure I tell the get method what slash jobs will return back to me, which of course

24
00:01:27.110 --> 00:01:29.060
is going to be an array of job objects.

25
00:01:29.330 --> 00:01:35.270
So as a reminder, this is the API end point that reach or the API function that reaches out to our

26
00:01:35.270 --> 00:01:37.520
jobs, end point and returns this array of jobs.

27
00:01:37.760 --> 00:01:43.130
And luckily in our types directory right here, we already have an interface declared for a single job

28
00:01:43.130 --> 00:01:43.490
object.

29
00:01:43.730 --> 00:01:49.460
So all I have to tell Axios and the get method in this function call is that my return value will be

30
00:01:49.460 --> 00:01:53.090
above type job array, an array of objects that look like this.

31
00:01:53.450 --> 00:01:54.740
So right here in get jobs.

32
00:01:55.790 --> 00:01:57.170
How important my job.

33
00:01:58.250 --> 00:02:03.500
Interface and that is going to come from the root directory, then the API folder and the types file.

34
00:02:03.530 --> 00:02:09.080
We just opened that a second ago and so right here we saw in the previous lesson the get method when

35
00:02:09.080 --> 00:02:13.190
we're working with access in TypeScript allows us to define a generic argument.

36
00:02:13.370 --> 00:02:18.950
And remember, a generic is just a type that we provide when we invoke a function not in the official

37
00:02:18.950 --> 00:02:23.660
declaration of the function or the type definition, because that is in the Axos library itself.

38
00:02:23.660 --> 00:02:28.610
That is the work of other developers, but they're defining that function to accept the generic that

39
00:02:28.610 --> 00:02:35.240
we can provide here, and they will then integrate into the type checking by double checking that the

40
00:02:35.270 --> 00:02:39.260
actual value of the shape of the, of the return that we declare here.

41
00:02:39.560 --> 00:02:44.270
So basically we're saying whenever we reach out to slash jobs, we promise that the response will look

42
00:02:44.270 --> 00:02:44.810
like this.

43
00:02:44.930 --> 00:02:46.670
It's going to be a job array.

44
00:02:46.880 --> 00:02:48.530
So once again, job as an interface.

45
00:02:48.530 --> 00:02:52.820
And then I'm providing square brackets to clarify an array of objects that look like that.

46
00:02:53.210 --> 00:02:53.480
All right.

47
00:02:53.480 --> 00:02:54.260
So save that.

48
00:02:55.040 --> 00:02:57.950
And with that, we can also open up our corresponding test file.

49
00:02:57.950 --> 00:03:00.070
So get jobs type test that J.

50
00:03:00.080 --> 00:03:01.940
Yes, let's move that over to the right.

51
00:03:02.750 --> 00:03:03.860
Let me collapse this.

52
00:03:03.860 --> 00:03:05.480
Let me open up my terminal.

53
00:03:05.810 --> 00:03:11.930
Let me then open up my sidebar again and change the file extension to Dot's.

54
00:03:12.740 --> 00:03:13.340
There we go.

55
00:03:13.670 --> 00:03:17.960
And we run into the exact same issues as we did throughout many times throughout this course.

56
00:03:18.260 --> 00:03:24.980
So right here I'm going to say contact Axios, get Mark is going to be Axios dot get but interpreted

57
00:03:24.980 --> 00:03:30.620
as a different type of just that mark, which means right here I have to replace Axios, get with Axios,

58
00:03:30.620 --> 00:03:32.810
get mark, save that.

59
00:03:33.290 --> 00:03:36.210
And as I scroll down, it doesn't look like there are any other issues.

60
00:03:36.210 --> 00:03:38.660
So I can run NPM, run, test and watch.

61
00:03:39.230 --> 00:03:41.420
And I made a commit at the end of the previous lesson.

62
00:03:41.420 --> 00:03:46.190
So this should only identify this file as well as maybe the action that actually invokes it, which

63
00:03:46.190 --> 00:03:46.730
makes sense.

64
00:03:47.330 --> 00:03:49.820
And if I run these, we can see everything is passing.

65
00:03:50.060 --> 00:03:50.360
All right.

66
00:03:50.360 --> 00:03:55.220
So now we've clarified what the response shape will look like when we hit the job's endpoint.

67
00:03:55.430 --> 00:04:00.290
So when our action actually uses get jobs, it now knows what to expect as the return value.

68
00:04:00.560 --> 00:04:00.720
Right.

69
00:04:00.740 --> 00:04:04.790
You can see here, if I hover over, get jobs, you can see it's going to be a promise that it doesn't

70
00:04:04.790 --> 00:04:06.050
just resolve to any.

71
00:04:06.260 --> 00:04:09.080
But I promise that resolves to reveal an array of jobs.

72
00:04:09.200 --> 00:04:13.430
And that's because we clarified that using Axios of what we're expecting here, which allowed it to

73
00:04:13.430 --> 00:04:16.910
figure out or infer the return value of the function itself.

74
00:04:17.270 --> 00:04:17.480
Right.

75
00:04:17.480 --> 00:04:22.160
So we fill in all of these small puzzle pieces and TypeScript knows a little bit more to be able to

76
00:04:22.160 --> 00:04:26.690
infer better, which of course reverberates throughout the code base and makes the entire code base

77
00:04:26.690 --> 00:04:30.710
better as a result because it can perform type, checking in more locations.

78
00:04:31.040 --> 00:04:31.340
All right.

79
00:04:31.340 --> 00:04:32.750
That's all there is to cover in this lesson.

80
00:04:32.750 --> 00:04:34.370
So I will see you in the next one.
