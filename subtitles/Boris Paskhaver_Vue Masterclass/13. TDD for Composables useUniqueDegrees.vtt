WEBVTT
1
00:00:00.620 --> 00:00:01.340
Okay.

2
00:00:01.340 --> 00:00:06.530
So to kick this lesson off, I've opened up our job filters sidebar view component.

3
00:00:06.800 --> 00:00:13.400
And as a reminder, this is the component where we are rendering multiple job filters, sidebar, checkbox

4
00:00:13.400 --> 00:00:18.650
group components, and each one of these child components is responsible for rendering its own collection

5
00:00:18.650 --> 00:00:19.760
of checkboxes.

6
00:00:20.030 --> 00:00:27.410
And in order to provide the data for those checkboxes, we have this unique values prop, and the data

7
00:00:27.410 --> 00:00:32.540
for the unique values prop is coming from this unique job type's name, which will expire in just a

8
00:00:32.540 --> 00:00:32.930
second.

9
00:00:33.260 --> 00:00:35.840
And for this checkbox group, we're doing something very similar.

10
00:00:35.960 --> 00:00:39.770
We have our unique values prop and that is relying on unique organizations.

11
00:00:40.070 --> 00:00:45.410
And of course, we know in the composition API that if we're using these names in our template, they

12
00:00:45.410 --> 00:00:47.210
must be coming from our setup method.

13
00:00:47.990 --> 00:00:53.570
So down below you can see here are those sets of unique values and we are getting them from respective

14
00:00:53.570 --> 00:00:57.860
composable functions called use unique job types and use unique organizations.

15
00:00:58.130 --> 00:01:02.270
So that tells me we're going to need to do something very similar for our degrees.

16
00:01:02.540 --> 00:01:08.360
Now, a key difference here is that our unique degrees is going to be an array of strings rather than

17
00:01:08.360 --> 00:01:09.380
a set of strings.

18
00:01:09.560 --> 00:01:16.070
But the same principle applies if I open up the file that this composable is in, which is source store

19
00:01:16.070 --> 00:01:16.970
composable, is that.

20
00:01:16.970 --> 00:01:23.210
Yes, you can see here we have our use unique organizations composable and it uses the use store function

21
00:01:23.210 --> 00:01:29.840
from view X and it does that so that it can return a computed function evaluation that tracks the state

22
00:01:29.840 --> 00:01:34.880
of a specific getter, which is the unique organizations, so that whenever that get a re runs, the

23
00:01:34.880 --> 00:01:41.030
computed reactive object also re evaluates and returns that data back to the job filter, sidebar component

24
00:01:41.240 --> 00:01:44.330
or any component that happens to be relying on this getter.

25
00:01:44.660 --> 00:01:50.090
So we're going to need to write a very similar composable called Use Unique Degrees, and its responsibility

26
00:01:50.090 --> 00:01:55.490
will be to talk to the View Store, to talk more specifically to the getter called unique degrees,

27
00:01:55.670 --> 00:02:00.830
and to wrap that in reactivity so that whenever it changes, we also update all of the components that

28
00:02:00.830 --> 00:02:02.240
are relying on that composable.

29
00:02:02.930 --> 00:02:09.040
So with that said, let's open up our test file for this file and that can be found in composable that

30
00:02:09.050 --> 00:02:11.630
test that yes, I'm going to drag this to the right.

31
00:02:13.230 --> 00:02:18.120
And as always, the good news here is our composable test is going to be very similar to the one we've

32
00:02:18.120 --> 00:02:20.490
written previously for some of the other composable here.

33
00:02:20.910 --> 00:02:26.010
So if I scroll down here, we're going to see we have use unique job types and use unique organizations

34
00:02:26.010 --> 00:02:28.560
and our new one is going to be very similar.

35
00:02:28.800 --> 00:02:33.960
So right here, I'm going to add a new described block and I'm going to assume that my new composable

36
00:02:33.960 --> 00:02:36.120
will be called use unique degrees.

37
00:02:36.540 --> 00:02:39.930
That makes sense to me, of course, following the exact same naming scheme.

38
00:02:40.950 --> 00:02:42.840
And what is its responsibility going to be?

39
00:02:43.230 --> 00:02:44.910
It's going to retrieve.

40
00:02:45.950 --> 00:02:50.330
Retrieves unique degrees from store.

41
00:02:53.150 --> 00:02:53.450
All right.

42
00:02:53.450 --> 00:02:58.610
So if we take a look at what the test above is doing, it's using the used storm mark, which has already

43
00:02:58.610 --> 00:02:59.240
been mapped out.

44
00:02:59.390 --> 00:03:04.730
And it's marking out a sample getter that we're going to be relying on in the implementation and having

45
00:03:04.730 --> 00:03:06.470
it return what it cares about.

46
00:03:06.710 --> 00:03:11.900
So in this case, it's a new set because the unique organization's getter in the real world that returns

47
00:03:11.900 --> 00:03:12.350
a set.

48
00:03:12.710 --> 00:03:17.270
But in our test, it's going to be very similar, except our unique degrees getter simply needs to be

49
00:03:17.270 --> 00:03:20.000
a property that gives us back an array of degrees.

50
00:03:20.360 --> 00:03:25.220
So right here, I'm going to say we have our use store function marked out.

51
00:03:25.340 --> 00:03:29.120
And so when it's invoked in our test, we wanted to have a return value.

52
00:03:29.480 --> 00:03:34.040
Please produce this return value, which of course is going to be an object with a getters property.

53
00:03:34.910 --> 00:03:39.530
And the getter that we care about in this test that needs to exist is going to be unique degrees and

54
00:03:39.530 --> 00:03:41.900
we do not need to write some kind of complex implementation.

55
00:03:42.110 --> 00:03:46.560
This is simply going to be a property that we're acting right here, just like we do in these implementations.

56
00:03:46.760 --> 00:03:47.960
That needs to return to us.

57
00:03:47.960 --> 00:03:53.690
The object that we're going to wrap in reactivity using the view computed function in this case, this

58
00:03:53.690 --> 00:03:55.290
is not going to be a set of strings.

59
00:03:55.310 --> 00:03:58.250
Remember, this is going to be an array of degrees.

60
00:03:58.400 --> 00:04:01.820
So right here, I'm just going to put an array and let's just have the in here.

61
00:04:02.720 --> 00:04:07.640
Again, as a very quick reminder, I apologize for the repetition, but if I go into my getters that's

62
00:04:07.640 --> 00:04:10.370
filed as a quick reminder here is unique degrees.

63
00:04:10.520 --> 00:04:14.120
We are not generating a new JavaScript or TypeScript set object.

64
00:04:14.270 --> 00:04:19.310
We are iterating over our degrees array and recalling the map method on the array to just extract the

65
00:04:19.310 --> 00:04:21.470
degree property from every degree object.

66
00:04:21.650 --> 00:04:24.500
So we're going to have an array of strings, not a set of strings.

67
00:04:24.590 --> 00:04:26.390
And that's exactly what I'm emulating here.

68
00:04:27.410 --> 00:04:27.770
All right.

69
00:04:28.040 --> 00:04:30.350
So once we have Mark at the store, what do we need to do?

70
00:04:30.360 --> 00:04:34.340
We need to actually invoke and run our actual composable.

71
00:04:34.520 --> 00:04:39.650
Now, we don't have it imported yet, so let's scroll up here and right here we can add it to our imports.

72
00:04:39.650 --> 00:04:41.990
It, of course, does not exist yet, but that's not a problem.

73
00:04:42.170 --> 00:04:42.710
It's right here.

74
00:04:42.710 --> 00:04:44.750
I'm going to import use unique degrees.

75
00:04:45.770 --> 00:04:46.250
There we go.

76
00:04:46.250 --> 00:04:47.390
Up and down below.

77
00:04:47.390 --> 00:04:54.170
What I'm going to do is invoke use unique degrees and I'm going to assign its return value to a constant

78
00:04:54.170 --> 00:04:54.740
call result.

79
00:04:55.040 --> 00:04:59.600
And of course, my expectation is that that is going to be a view reactive object because we're going

80
00:04:59.600 --> 00:05:01.460
to eventually wrap this in computed logic.

81
00:05:01.700 --> 00:05:06.470
So in order to get the actual value that that reactive object is keeping track of, as a reminder,

82
00:05:06.470 --> 00:05:12.650
I have to access resultant value and that I will expect to equal the exact value that I have on my getter.

83
00:05:12.680 --> 00:05:14.780
Which is going to be an array of one string of.

84
00:05:16.730 --> 00:05:18.230
All right, let's save that.

85
00:05:18.440 --> 00:05:22.490
And with that, we are cleared to go ahead and go ahead and write our proposal.

86
00:05:22.730 --> 00:05:29.060
Now, our composable will be relying on our unique degrees constant, which should already exist because

87
00:05:29.060 --> 00:05:32.030
it's going to be already defined for the letter file.

88
00:05:32.030 --> 00:05:36.620
So if I scroll up here, we can import unique degrees right here from our conference file.

89
00:05:37.550 --> 00:05:38.030
There we go.

90
00:05:38.300 --> 00:05:42.020
And then what we can do is define our composable set right here, export const.

91
00:05:42.320 --> 00:05:45.320
This composable function will be called using unique degrees.

92
00:05:45.650 --> 00:05:47.300
It's not going to accept any arguments.

93
00:05:47.570 --> 00:05:51.380
The first thing I'm going to need to do is to establish a connection to my bookstore.

94
00:05:51.650 --> 00:05:58.220
I can do that by, of course, using my use store function and passing in the key and again in the real

95
00:05:58.220 --> 00:05:58.520
world.

96
00:05:58.580 --> 00:06:02.870
This will talk to the real view store in our test world that we're simply going to use the mock object

97
00:06:02.870 --> 00:06:03.380
right here.

98
00:06:03.620 --> 00:06:05.510
So this is what we're getting back in our test.

99
00:06:05.930 --> 00:06:09.470
And then the next thing we need to do, of course, very similar to what we're doing above, is we're

100
00:06:09.470 --> 00:06:11.480
going to return a computed evaluation.

101
00:06:12.380 --> 00:06:14.030
Here, I'm going to invoke the computed function.

102
00:06:14.270 --> 00:06:17.030
Remember that that accepts any argument of a function.

103
00:06:17.210 --> 00:06:20.630
And that function is going to rerun any time any of its dependencies change.

104
00:06:20.990 --> 00:06:24.350
So on my store that I have access to, I have a getters property.

105
00:06:24.680 --> 00:06:31.220
And I want to say that whenever the unique degrees getter reruns, I want you to rerun the computed

106
00:06:31.220 --> 00:06:34.910
function and give me back its value in a computed object, right?

107
00:06:34.910 --> 00:06:37.130
So that's going to be a good place to start.

108
00:06:37.130 --> 00:06:41.480
But remember, we can do a little bit better because computed by itself is not going to be able to figure

109
00:06:41.480 --> 00:06:42.830
out what this returns.

110
00:06:43.070 --> 00:06:48.590
So here what we did is we provided a generic type to clarify to TypeScript that the reactive object

111
00:06:48.590 --> 00:06:50.570
is going to be storing a set of strings.

112
00:06:50.780 --> 00:06:52.530
So I'm going to do something very similar here.

113
00:06:52.550 --> 00:06:54.350
I'm going to provide my brackets right here.

114
00:06:54.650 --> 00:06:58.430
And what kind of data type is my reactive object going to be wrapping?

115
00:06:58.610 --> 00:07:00.200
It's not going to be a set of strings.

116
00:07:00.200 --> 00:07:01.820
It's going to be an array of strings.

117
00:07:02.000 --> 00:07:06.830
So right here I'm going to say string array like so string followed by square brackets.

118
00:07:06.950 --> 00:07:11.780
And that again, to provide some more explicit type annotation so that TypeScript can do its job a little

119
00:07:11.780 --> 00:07:12.230
bit better.

120
00:07:13.010 --> 00:07:13.340
All right.

121
00:07:13.610 --> 00:07:14.840
So let's see what we're going to get here.

122
00:07:14.840 --> 00:07:18.560
Looks like we have a failure, but it looks like the failure is due to the fact that I am not a good

123
00:07:18.560 --> 00:07:21.500
typer because there's a typo right here with D having a space.

124
00:07:21.830 --> 00:07:25.970
So right here, if my short doesn't have a space, I will remove the space right here.

125
00:07:26.450 --> 00:07:27.150
Common error.

126
00:07:27.170 --> 00:07:28.250
Let's let that rerun.

127
00:07:29.360 --> 00:07:30.800
We've provided all the right types.

128
00:07:30.800 --> 00:07:34.820
We've used our key, and now it looks like everything is passing perfect.

129
00:07:34.820 --> 00:07:37.670
So now we have a composable and we can use it in our component.

130
00:07:37.940 --> 00:07:39.320
I will see you in the next lesson.
