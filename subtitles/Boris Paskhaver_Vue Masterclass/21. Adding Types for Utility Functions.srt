1
00:00:00,490 --> 00:00:01,300
Okay.

2
00:00:01,310 --> 00:00:07,610
So to kick this lesson off, I've expanded just about every folder in our tests directory and we can

3
00:00:07,610 --> 00:00:12,230
see we definitely have a lot of TypeScript files in here and that is all fantastic news.

4
00:00:12,440 --> 00:00:17,660
It turns out there's actually one file remaining in here that still has Ajax extension and that is the

5
00:00:17,660 --> 00:00:20,510
test for our next element in list function.

6
00:00:20,810 --> 00:00:24,080
You may recall that this is the helper function that we designed earlier.

7
00:00:24,290 --> 00:00:29,150
This is the one that cycles through an array of strings in order to determine the next one in line.

8
00:00:29,330 --> 00:00:36,320
And that affects the dynamic action verb that appears on the front page of the website that swaps every

9
00:00:36,320 --> 00:00:37,010
3 seconds.

10
00:00:37,010 --> 00:00:41,570
You may recall we built that feature out, so let me open up that test right here and let me immediately

11
00:00:41,570 --> 00:00:43,400
change its extension to test.

12
00:00:44,640 --> 00:00:49,920
And then let me also open up the corresponding implementation, which is going to be in the next element

13
00:00:49,920 --> 00:00:53,250
in list, not just because this was a plain JavaScript file.

14
00:00:53,490 --> 00:00:55,620
So let's change this to TSA as well.

15
00:00:56,190 --> 00:00:58,350
There we go to for the price of one.

16
00:00:58,740 --> 00:01:01,950
And let me, of course, drag my tests to the right.

17
00:01:02,310 --> 00:01:03,120
Hide my.

18
00:01:04,340 --> 00:01:05,000
Sidebar.

19
00:01:05,000 --> 00:01:09,620
And all we have to do, of course, is to provide the types for this function.

20
00:01:09,920 --> 00:01:14,300
Now, the way this is being used in our test suite as well as in our component, is we are providing

21
00:01:14,300 --> 00:01:20,690
a list of strings and then looking for the current value or the current string in order for the function

22
00:01:20,690 --> 00:01:21,710
to find the next one.

23
00:01:21,980 --> 00:01:25,820
So as always, the test suite helps us to understand how the actual implementation works.

24
00:01:26,090 --> 00:01:27,600
Here we have a list of ABCD.

25
00:01:28,130 --> 00:01:33,560
We provide a string of C and we know the next element in the list should be the next string in line.

26
00:01:33,920 --> 00:01:38,840
So we could certainly say here that the type of list is going to be a string array and the type of value

27
00:01:38,840 --> 00:01:43,640
is going to be a string or one of the things that the array has many of.

28
00:01:44,030 --> 00:01:48,140
However, I think we can make it even more flexible by using a generic type here.

29
00:01:48,350 --> 00:01:52,370
And that way we can use certainly an array of strings and look for a string inside it.

30
00:01:52,580 --> 00:01:54,200
But we can also make it more flexible.

31
00:01:54,200 --> 00:01:57,530
And for example, look for a number inside a array of numbers.

32
00:01:57,830 --> 00:02:02,240
Granted, we don't necessarily have a use case for that yet, but I think generics help us with the

33
00:02:02,240 --> 00:02:04,250
flexibility to do things like this.

34
00:02:04,250 --> 00:02:09,620
And this strikes me as the exact kind of utility operation that I can see as being useful for arrays

35
00:02:09,620 --> 00:02:10,670
of any type.

36
00:02:11,000 --> 00:02:15,560
So let's use generics here instead, and that will also offer us an opportunity to review that syntax.

37
00:02:15,920 --> 00:02:21,680
So what I'm going to do here is right before my parentheses here, I'm going to declare that this function,

38
00:02:21,680 --> 00:02:23,810
when invoked, will have to provide a generic type.

39
00:02:23,810 --> 00:02:26,570
And remember, a generic type is just a type argument.

40
00:02:26,840 --> 00:02:31,670
So here I'm going to provide my brackets and I'm going to say that this function, when invoked, requires

41
00:02:31,670 --> 00:02:36,980
one generic type, and I'm going to give it the name t remember, this kind of type parameter name is

42
00:02:36,980 --> 00:02:41,690
up to us, but the most common thing you're going to see is a single character, not in all uppercase.

43
00:02:41,840 --> 00:02:44,390
And the most common one is T, which stands for type.

44
00:02:44,780 --> 00:02:49,280
So then list, which is the first argument, is going to be an array of that value.

45
00:02:49,490 --> 00:02:53,330
So what I'm going to say is whatever t is, I want an array of that.

46
00:02:53,540 --> 00:02:57,140
So t square brackets means an array of whatever t is.

47
00:02:57,380 --> 00:03:01,340
When the function is invoked, it can be an array of strings, it can be an array of numbers depending

48
00:03:01,340 --> 00:03:02,270
on what t is.

49
00:03:02,630 --> 00:03:08,150
Then the individual value that I'm going to look for within that array of T will be, of course, of

50
00:03:08,150 --> 00:03:09,020
type T.

51
00:03:09,350 --> 00:03:14,090
So if I have a array of numbers, then I will be looking for a value of a single number.

52
00:03:14,270 --> 00:03:17,840
If I have a list of strings, then I will be looking for a value of a single string.

53
00:03:18,170 --> 00:03:20,030
And what we return is the final return.

54
00:03:20,030 --> 00:03:25,460
Value of this function, of course, is the next array value in line, which will also be of type T.

55
00:03:25,730 --> 00:03:29,240
So right here I'm going to provide my type annotation for the return value.

56
00:03:29,250 --> 00:03:31,750
So this is going to be a colon followed by 80.

57
00:03:32,570 --> 00:03:32,870
All right.

58
00:03:33,080 --> 00:03:38,300
One other thing I want to modify here is we're using the const here of Current Action Index, and that

59
00:03:38,300 --> 00:03:43,800
is very specific to our actual use case of swapping the next action in line.

60
00:03:43,820 --> 00:03:49,250
In this case, we were using the word action to describe the action verbs like build and design in code

61
00:03:49,370 --> 00:03:50,360
which were on the front page.

62
00:03:50,540 --> 00:03:53,600
To make this a little bit more generic so it can be applicable elsewhere.

63
00:03:53,720 --> 00:03:58,640
I'm just going to change this to current value index, which sort of reflects the idea of this is the

64
00:03:58,640 --> 00:04:02,480
index of the current value, and I'm going to change it right here as well.

65
00:04:02,870 --> 00:04:05,060
It doesn't change the implementation, only the name.

66
00:04:05,270 --> 00:04:05,990
And there we go.

67
00:04:06,800 --> 00:04:12,920
So you'll notice right here in my typescript file that we are providing a string array of list and a

68
00:04:12,920 --> 00:04:14,780
value of a string as well.

69
00:04:15,050 --> 00:04:21,080
So because we are providing this type here, TypeScript can infer that the type of T or the type of

70
00:04:21,080 --> 00:04:22,850
the generic is going to be of a string.

71
00:04:23,180 --> 00:04:27,740
So you'll notice when I hover my mouse over the next element in list, you'll notice in those curly

72
00:04:27,740 --> 00:04:34,280
braces or brackets it's figured out that the value of the T type, the type argument, the generic argument

73
00:04:34,370 --> 00:04:35,660
is going to be type string.

74
00:04:35,750 --> 00:04:42,500
It's figured that out because it's kind of obvious because we have a array of strings and a single string.

75
00:04:42,500 --> 00:04:46,630
So it says, okay, this is t array and this is a single value of type T.

76
00:04:46,640 --> 00:04:48,980
So obviously type T must be type string.

77
00:04:49,280 --> 00:04:52,820
However, if we want to be a little bit more explicit in this test, we certainly can be.

78
00:04:53,060 --> 00:04:57,980
So we can write this out explicitly by adding those brackets and then adding string in here.

79
00:04:58,040 --> 00:05:03,140
So this is just explicitly writing out what TypeScript has correctly inferred and probably providing

80
00:05:03,320 --> 00:05:08,750
a future reader with a knowledge of Hey, next element and List expects a generic type argument and

81
00:05:08,750 --> 00:05:11,450
that reminds them exactly what purpose t serves right here.

82
00:05:11,840 --> 00:05:13,430
So we're going to do the exact same thing here.

83
00:05:14,570 --> 00:05:19,910
And of course, if we wanted to provide any other thing in here, like an array of booleans with a value

84
00:05:19,910 --> 00:05:27,200
of a boolean that would work as well, simply because the generic supports any kind of type here.

85
00:05:27,350 --> 00:05:31,400
It'll re declare the type annotation to serve the purposes of whatever t is.

86
00:05:31,910 --> 00:05:32,180
All right.

87
00:05:32,180 --> 00:05:33,110
So save that.

88
00:05:33,110 --> 00:05:35,270
And as always, let's run our test suite.

89
00:05:37,550 --> 00:05:38,570
And let's see where we get.

90
00:05:42,650 --> 00:05:43,060
All right.

91
00:05:43,070 --> 00:05:45,440
Headline is our a component that is utilizing that.

92
00:05:45,440 --> 00:05:46,490
So it's running as well.

93
00:05:46,700 --> 00:05:47,350
And there we go.

94
00:05:47,360 --> 00:05:49,190
Everything is passing more good news.

95
00:05:49,190 --> 00:05:54,020
We are getting super, super, super close to having just about our entire app in TypeScript.

96
00:05:54,290 --> 00:05:57,170
So moving right along and I will see you in the next lesson.
