1
00:00:00,150 --> 00:00:01,170
All right.

2
00:00:01,170 --> 00:00:04,740
So congratulations on reaching the end of another core section.

3
00:00:04,950 --> 00:00:10,110
And as always, let's take a few minutes to review everything that we learned in this section.

4
00:00:10,110 --> 00:00:15,660
We learned that we could use the computed function from the View Library in a different way for all

5
00:00:15,660 --> 00:00:17,160
of our previous uses of it.

6
00:00:17,160 --> 00:00:23,820
We of course pasted a function and in that function we reference some kind of reactive object so that

7
00:00:23,820 --> 00:00:29,550
whenever that reactive object changed, the function would rerun get the new computed value or the new

8
00:00:29,550 --> 00:00:33,780
reactive value, and that's basically the sole purpose that we would use it for.

9
00:00:34,050 --> 00:00:40,590
We also learned of this new syntax where we could pass an object with a get and a set method, and those

10
00:00:40,650 --> 00:00:47,310
get and set methods basically create the logic for reading and writing some kind of reactive state,

11
00:00:47,310 --> 00:00:48,630
some kind of reactive value.

12
00:00:48,930 --> 00:00:53,700
But the beautiful part about this approach is it did not necessarily have to be local component state.

13
00:00:54,030 --> 00:00:59,880
So what we did is we used get and said to connect the logic for reading from the View Store as well

14
00:00:59,880 --> 00:01:04,080
as writing to the View Store through the way of a mutation.

15
00:01:04,320 --> 00:01:09,750
And this solved the problem we saw in the previous section where we had to manually keep our component

16
00:01:09,760 --> 00:01:12,330
state in sync with our view or state.

17
00:01:12,930 --> 00:01:18,120
We did that by keeping a local component state and then having to commit a mutation whenever it changed.

18
00:01:18,300 --> 00:01:23,760
And then we also had to use the subscribe method to make sure the component state was informed whenever

19
00:01:23,760 --> 00:01:25,470
the view store state changes.

20
00:01:25,740 --> 00:01:30,990
Now of course that solution exists in view, but it's generally not considered the best solution because

21
00:01:30,990 --> 00:01:32,070
it's much more manual.

22
00:01:32,250 --> 00:01:38,790
This approach is a lot more automatic because we can simply sync the components local state to be reliant

23
00:01:38,790 --> 00:01:40,260
on view, text or state.

24
00:01:40,440 --> 00:01:44,340
So we used the V model directive with the return value of this computed function.

25
00:01:44,490 --> 00:01:49,620
And that way we did not have any duplicate data, we did not have any multiple sources of truth.

26
00:01:49,830 --> 00:01:55,380
We simply used the View Store State to track the user's current input in the skills search term property

27
00:01:55,530 --> 00:02:00,270
and to update our input whenever the user changed it and have that two way data binding.

28
00:02:00,420 --> 00:02:05,850
But between the template and the view store, instead of all the previous examples where we used to

29
00:02:05,850 --> 00:02:08,850
a data binding between the template and the local component state.

30
00:02:09,180 --> 00:02:14,310
So as a reminder in the get method, we declare the logic for determining the current reactive value.

31
00:02:14,550 --> 00:02:21,090
So in our implementation aren't reactive value was the skills search term property on our view store.

32
00:02:21,300 --> 00:02:26,490
So whenever it changed our component new to react and so in the set method we declared the logic for

33
00:02:26,490 --> 00:02:27,840
setting the next value.

34
00:02:28,020 --> 00:02:33,120
So in our case it was setting the next value of the skills search term property on our store.

35
00:02:33,300 --> 00:02:35,370
That was how we updated that reactive value.

36
00:02:35,550 --> 00:02:40,140
And in order to do that, we of course needed to commit a mutation to the bookstore.

37
00:02:40,350 --> 00:02:45,690
So it's the same read and right logic as using, for example, ref in a component, except we now can

38
00:02:45,690 --> 00:02:49,260
connect it to something external like a view store state.

39
00:02:49,380 --> 00:02:54,510
And that's the most common use case for using this get set method terminology inside the object that

40
00:02:54,510 --> 00:02:55,860
we passed to the computed function.

41
00:02:56,670 --> 00:03:00,360
In addition, the second primary thing we learned about was input modifiers.

42
00:03:00,570 --> 00:03:05,490
I believe earlier in the course we may have also talked about the number input modifier, but regardless,

43
00:03:05,490 --> 00:03:09,360
it was a good chance to either relearn these concepts or introduce them for the first time.

44
00:03:09,630 --> 00:03:12,240
So we first learned about the lazy input modifier.

45
00:03:12,240 --> 00:03:15,060
We can simply add it on to the end of the V model directive.

46
00:03:15,060 --> 00:03:21,030
So the model got lazy and what that does is it only takes action to update the data, whatever that

47
00:03:21,030 --> 00:03:21,780
happens to be.

48
00:03:21,930 --> 00:03:25,590
It can be local component data or as we saw it can be if you store data.

49
00:03:25,800 --> 00:03:31,230
The point is it updates the data when the user stops typing and clicks outside or when they press enter.

50
00:03:31,440 --> 00:03:36,450
And the reason this is advantageous is because we don't need to get view to work so hard to keep track

51
00:03:36,450 --> 00:03:37,950
of every character, the user types.

52
00:03:38,190 --> 00:03:43,350
So in this example, rather than committing a mutation with every single keystroke, we reduce the total

53
00:03:43,350 --> 00:03:44,130
number of mutations.

54
00:03:44,280 --> 00:03:49,080
So the user can just type the search term, press enter, and then we commit one final mutation, one

55
00:03:49,080 --> 00:03:55,230
mutation, and that's it with the final skills search term value to populate in the store, we also

56
00:03:55,230 --> 00:03:57,330
explored the trim input modifier.

57
00:03:57,450 --> 00:04:01,530
What that does is it removes whitespace from both ends of the text input.

58
00:04:01,770 --> 00:04:05,220
You can also combine multiple input modifiers together.

59
00:04:05,340 --> 00:04:07,500
You simply put a dot after each one.

60
00:04:07,500 --> 00:04:11,700
So V model dot lazy dot trim and we saw that applied.

61
00:04:11,700 --> 00:04:17,040
Both of those modifications to the data and trim was especially a cool one because it ensured that any

62
00:04:17,040 --> 00:04:21,990
whitespace would be left out, which of course gave our user a better experience of having a search

63
00:04:21,990 --> 00:04:25,170
term that is more likely to match some job title.

64
00:04:25,500 --> 00:04:25,770
All right.

65
00:04:25,770 --> 00:04:28,380
So those are the new concepts introduced in this section.

66
00:04:28,560 --> 00:04:31,470
Hope you've had fun and I will see you in the next lesson.
