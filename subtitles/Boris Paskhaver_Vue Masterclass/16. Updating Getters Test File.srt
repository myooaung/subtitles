1
00:00:00,600 --> 00:00:01,110
Okay.

2
00:00:01,110 --> 00:00:05,220
So let's fix all of our type violations in the GETTERS Test Suite.

3
00:00:05,430 --> 00:00:11,220
And of course to make that process super easy, we're going to reuse our factory functions that we've

4
00:00:11,220 --> 00:00:14,070
extracted to the Utils file in the previous lesson.

5
00:00:14,340 --> 00:00:16,610
So right here in getters that test starts.

6
00:00:16,860 --> 00:00:22,500
I'll begin by importing create job as well as create state.

7
00:00:23,070 --> 00:00:26,480
And that's going to come from the utils file in the same directory.

8
00:00:26,490 --> 00:00:28,200
So I'm going to do a relative import.

9
00:00:28,380 --> 00:00:33,690
I'm going to use a dot slash and in the current directory I'm going to find the utils file.

10
00:00:34,050 --> 00:00:38,400
All right, so let's navigate through everything we have here and adjust the arguments appropriately.

11
00:00:38,730 --> 00:00:41,520
So here we're going to have not one, but two violations.

12
00:00:41,730 --> 00:00:46,560
Number one, our state is missing some of the required properties because we need the other three.

13
00:00:46,770 --> 00:00:51,060
But in addition, these job objects don't fulfill the job interface.

14
00:00:51,270 --> 00:00:56,820
So all we can do is use create job to create some sample jobs that fulfill that job requirement and

15
00:00:56,820 --> 00:01:01,110
then also use create state to populate all of the additional properties that our state needs.

16
00:01:01,440 --> 00:01:06,780
So what I'm going to do here is start by extracting all this logic out and by all of this, I mean the

17
00:01:06,780 --> 00:01:07,500
jobs logic.

18
00:01:07,500 --> 00:01:08,730
Let me move that out here.

19
00:01:09,870 --> 00:01:15,330
So I'm going to put this here and assign this to a constant jobs variable right here.

20
00:01:15,420 --> 00:01:20,160
And now I have an array of my example fictional job objects, but I need real job objects.

21
00:01:20,460 --> 00:01:22,560
So what I'm going to do is in line here.

22
00:01:22,560 --> 00:01:24,270
I'm going to invoke, create job.

23
00:01:24,630 --> 00:01:30,480
But what I'm going to do is also keep the original objects I had, because I do want to clarify for

24
00:01:30,480 --> 00:01:35,940
the purposes of this test that the organization, property and its value matters because that's what's

25
00:01:35,940 --> 00:01:38,130
going to affect the result I see down here.

26
00:01:38,460 --> 00:01:42,120
So once again, we're going to use create job here to get an object just like this one.

27
00:01:42,240 --> 00:01:44,880
But the only property we're going to overwrite is organization.

28
00:01:45,000 --> 00:01:50,190
And then the entire test can be understood from here without necessarily needing to to go into this

29
00:01:50,190 --> 00:01:52,860
file and understand everything else that a job has.

30
00:01:53,190 --> 00:01:58,920
So right here, I'm going to wrap this object in a create job function call that's going to pass that

31
00:01:58,920 --> 00:02:00,750
config object in right here.

32
00:02:00,750 --> 00:02:05,430
I'm going to create another job using create job passing in this custom config object.

33
00:02:05,610 --> 00:02:08,910
So now I have three jobs, then I'm going to need a state object.

34
00:02:09,090 --> 00:02:13,320
So what I'm going to do to create a state object is invoke my create state factory function.

35
00:02:13,770 --> 00:02:17,220
And of course, the only property that I want to customize here is going to be jobs.

36
00:02:17,430 --> 00:02:23,400
So I'm going to provide jobs and I'm going to use E-6 syntax to reference the jobs array that I have

37
00:02:24,420 --> 00:02:25,710
on the above.

38
00:02:26,040 --> 00:02:29,310
So what I'm going to get is a state object with four properties.

39
00:02:29,310 --> 00:02:33,600
One of them is going to be jobs and the other three properties are going to come from my state function

40
00:02:33,600 --> 00:02:35,970
right here, which provides the initial starting state.

41
00:02:35,970 --> 00:02:38,670
And then I'm going to to structure those additional properties here as well.

42
00:02:39,150 --> 00:02:44,790
So now we're going to be able to feed in the state exactly as the unique organization's getter method

43
00:02:44,790 --> 00:02:45,270
expects it.

44
00:02:45,480 --> 00:02:46,530
And this should be good enough.

45
00:02:46,950 --> 00:02:49,800
We're going to apply the exact same logic to our test below.

46
00:02:49,950 --> 00:02:50,550
It's right here.

47
00:02:50,550 --> 00:02:57,750
We need a view store state that honors the global state interface, and we also need job objects that

48
00:02:57,750 --> 00:02:58,980
honor the job interface.

49
00:02:59,190 --> 00:03:01,200
So once again, I'm going to move this logic out.

50
00:03:02,830 --> 00:03:03,480
It's right here.

51
00:03:03,490 --> 00:03:04,380
I'm going to sign this.

52
00:03:04,390 --> 00:03:09,700
The cons, the jobs and an array of objects with a single property of job type is not enough because

53
00:03:09,700 --> 00:03:12,340
those do not fulfill the job interface.

54
00:03:12,340 --> 00:03:14,530
A job needs all of these other properties as well.

55
00:03:14,860 --> 00:03:18,730
So what I'm going to do is pass these configuration objects into create job.

56
00:03:19,060 --> 00:03:21,010
That's going to give me a full job object.

57
00:03:21,220 --> 00:03:26,350
However, I'm going to specify that these jobs are going to have these respective job types full time,

58
00:03:26,350 --> 00:03:31,600
part time and full time, which is going to communicate to a future reader that these values matter,

59
00:03:31,600 --> 00:03:37,540
that these properties affect the final result, the final return value, which is the set of those job

60
00:03:37,540 --> 00:03:37,870
types.

61
00:03:38,260 --> 00:03:38,530
All right.

62
00:03:38,530 --> 00:03:41,620
So right here State, I need to make sure I have a valid state object.

63
00:03:41,620 --> 00:03:43,150
So I'm going to call create state.

64
00:03:43,870 --> 00:03:47,530
And I do want to overwrite that valid state objects, jobs, property.

65
00:03:47,530 --> 00:03:52,750
So I'm going to overwrite that jobs property with the jobs array of valid jobs I've defined right here.

66
00:03:52,990 --> 00:03:54,850
Pass that in and that should do it.

67
00:03:55,660 --> 00:03:55,930
All right.

68
00:03:55,930 --> 00:04:00,640
Moving on to the next one, these should be a little bit simpler because these only rely on state.

69
00:04:00,880 --> 00:04:03,730
So once again, we have kind of a small subset of state.

70
00:04:03,730 --> 00:04:08,860
Our state does have a selected organization's property, but it also has three other properties.

71
00:04:09,010 --> 00:04:14,650
Well, I can create those three properties automatically by wrapping this in a create state function

72
00:04:14,650 --> 00:04:16,990
call that's coming from our util file on the right.

73
00:04:17,200 --> 00:04:21,760
So now create state will give me an object with those properties and I'm going to only overwrite selected

74
00:04:21,760 --> 00:04:22,480
organization.

75
00:04:22,720 --> 00:04:23,290
There we go.

76
00:04:23,440 --> 00:04:24,880
Same thing applies for job.

77
00:04:25,120 --> 00:04:28,450
In order to make this a valid job, I'm going to pass this into Create Job.

78
00:04:29,730 --> 00:04:33,780
And now you can see there's no more violations because TypeScript understands that we have satisfied

79
00:04:33,900 --> 00:04:37,230
that state is going to be global state and job is going to be a valid job.

80
00:04:37,680 --> 00:04:37,920
All right.

81
00:04:37,920 --> 00:04:42,150
Same rule down here for my state right here, I'm going to use create state.

82
00:04:42,540 --> 00:04:46,440
So wrap this in a create state function call right here.

83
00:04:46,440 --> 00:04:49,620
I'm going to wrap the next line in a create job function call.

84
00:04:50,040 --> 00:04:50,710
There we go.

85
00:04:50,970 --> 00:04:52,560
That's going to make that error go away.

86
00:04:52,800 --> 00:04:53,490
Scroll down.

87
00:04:53,490 --> 00:04:55,360
Going to be something very similar down here.

88
00:04:55,380 --> 00:04:56,700
Once again, create state.

89
00:04:58,390 --> 00:05:02,980
Once again this is going to be create job to get a job object.

90
00:05:03,220 --> 00:05:05,440
Same rules down here create state.

91
00:05:05,800 --> 00:05:11,680
We're now going to have a valid state that honors the global state interface right here by using Create

92
00:05:11,680 --> 00:05:12,140
Job.

93
00:05:12,160 --> 00:05:17,650
We're going to have a job object that honors the job interface, making them suitable arguments to this.

94
00:05:17,650 --> 00:05:18,340
Get it right here.

95
00:05:18,580 --> 00:05:20,500
And finally, we get to filter jobs.

96
00:05:20,500 --> 00:05:20,830
It looks.

97
00:05:21,160 --> 00:05:22,470
Let's look at the violations here.

98
00:05:22,480 --> 00:05:25,390
It looks like state right here does not fulfill what's expected of it.

99
00:05:25,600 --> 00:05:28,060
So we're going to have to do something very similar to what we did above.

100
00:05:28,270 --> 00:05:30,210
So here we have our sample job object.

101
00:05:30,220 --> 00:05:31,990
I'm going to wrap this in Create Job.

102
00:05:33,520 --> 00:05:34,760
That should solve that problem.

103
00:05:34,780 --> 00:05:37,450
In fact, the idea here I don't really think is that important.

104
00:05:37,660 --> 00:05:39,320
I'm just going to provide a title here.

105
00:05:39,340 --> 00:05:43,180
I don't really know at all if these properties are relevant.

106
00:05:43,360 --> 00:05:45,550
But for now, there's no harm to including them anyway.

107
00:05:45,970 --> 00:05:48,730
So let's say we have a job with the title property right here.

108
00:05:48,730 --> 00:05:51,370
We're going to need a real estate, so I'm going to invoke create state.

109
00:05:52,950 --> 00:05:58,290
And for my jobs array, I need a valid job object, which I'm going to have with job right here.

110
00:05:58,500 --> 00:06:00,890
And so that is going to fulfill that requirement.

111
00:06:00,900 --> 00:06:04,470
The additional three properties are going to be provided by my factory function.

112
00:06:04,620 --> 00:06:05,520
It will add them on.

113
00:06:05,610 --> 00:06:11,910
And so we can see all of our typescript violations are now gone so that I can bring open my terminal.

114
00:06:13,080 --> 00:06:19,020
And let's run our entire test suite because it's been a while since we checked in on the whole thing.

115
00:06:19,470 --> 00:06:22,920
So that should cover our getters test file, which is now in TypeScript.

116
00:06:22,920 --> 00:06:28,320
It should also recover our mutations test file, which is now using the utils that we provided.

117
00:06:28,320 --> 00:06:33,150
So because those changes affect a lot of different files, it's a good idea to run the entire test suite

118
00:06:33,540 --> 00:06:35,190
and we're going to give it a couple of seconds.

119
00:06:35,190 --> 00:06:37,860
And it looks like everything is looking good.

120
00:06:37,920 --> 00:06:41,880
There's mutations that test, that test, and there's getters that test, that test.

121
00:06:42,060 --> 00:06:44,190
And we can see everything is passing just fine.

122
00:06:44,430 --> 00:06:48,570
We do have a little bit of code coverage issues, which means we're not covering everything in our utils,

123
00:06:48,750 --> 00:06:49,890
but for now, that's fine.

124
00:06:49,890 --> 00:06:54,570
Our core tests right here are actual assertions are passing as expected.

125
00:06:54,930 --> 00:06:55,260
All right.

126
00:06:55,260 --> 00:06:59,400
So phenomenal, fantastic progress and lots more fun to come up ahead.

127
00:06:59,610 --> 00:07:01,290
So I will see you in the next lesson.
