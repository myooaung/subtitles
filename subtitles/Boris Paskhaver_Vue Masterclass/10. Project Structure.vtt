WEBVTT
1
00:00:00.600 --> 00:00:01.140
Okay.

2
00:00:01.140 --> 00:00:04.710
So in this lesson we'll talk about our project structure.

3
00:00:04.980 --> 00:00:10.980
So I quickly want to walk through all of the files and folders that views Seelye generated for us at

4
00:00:10.980 --> 00:00:11.970
a very high level.

5
00:00:12.300 --> 00:00:17.640
So here on the left hand side, I have my project Explorer Open and let's walk through these files one

6
00:00:17.640 --> 00:00:18.090
by one.

7
00:00:18.480 --> 00:00:23.880
So of course, at the very top we have our voice code folder and in here we have our settings JSON file.

8
00:00:24.540 --> 00:00:29.700
It's in this file that we have our project specific settings and this is mostly configuration for our

9
00:00:29.700 --> 00:00:31.050
text editor itself.

10
00:00:31.170 --> 00:00:34.320
It doesn't specifically have to deal with view afterwards.

11
00:00:34.320 --> 00:00:36.270
We have our node modules directory.

12
00:00:36.270 --> 00:00:39.150
This of course is where we have all of our dependencies.

13
00:00:39.360 --> 00:00:45.300
So all of the NPM packages that are specified in packages on JSON are installed here as well as there

14
00:00:45.300 --> 00:00:46.290
are some dependencies.

15
00:00:46.500 --> 00:00:50.970
So it is here that we have view and s lint and prettier and BABBEL, ET, etc..

16
00:00:51.300 --> 00:00:56.370
As a quick reminder, in case you are unfamiliar with the Node ecosystem, you typically should not

17
00:00:56.370 --> 00:01:02.910
include your node modules directory in your git commits because this is supplementary external code

18
00:01:02.910 --> 00:01:08.220
that is outside of our project and the expectation is that you should only commit your own code and

19
00:01:08.220 --> 00:01:13.740
that when somebody downloads your repository they can simply run NPM install to create their node modules

20
00:01:13.740 --> 00:01:15.030
folder automatically.

21
00:01:15.300 --> 00:01:17.700
So you should never commit node modules to source control.

22
00:01:17.850 --> 00:01:23.370
And in addition, you should generally not edit any content in here because again, all of these libraries

23
00:01:23.370 --> 00:01:26.100
are other people's code and you don't want to mess them up.

24
00:01:26.190 --> 00:01:28.980
You only want to focus on the code that you have control over.

25
00:01:29.730 --> 00:01:34.920
Moving right along, we have our public folder right here and the only file of interest in this one

26
00:01:34.920 --> 00:01:40.470
is index that each html and if I open this up, this is actually going to be the index h two null file

27
00:01:40.470 --> 00:01:43.500
that our browser loads whenever the view app starts up.

28
00:01:43.680 --> 00:01:47.100
And as you can see, it is pretty lightweight, it is pretty barebones.

29
00:01:47.340 --> 00:01:49.980
So this is the heart of a single page application.

30
00:01:50.250 --> 00:01:53.370
The page begins as a very simple HTML page.

31
00:01:53.370 --> 00:01:56.100
We can see here there's actually just one div in the body.

32
00:01:56.370 --> 00:02:03.000
And the idea is that JavaScript or Vue handle all of the actual updates we see on the screen.

33
00:02:03.210 --> 00:02:08.850
So the addition of new elements, the removal of existing elements, the swapping of elements, the

34
00:02:08.850 --> 00:02:11.880
changing of styles, all of that is handled by JavaScript.

35
00:02:12.060 --> 00:02:17.340
And it is in this div right here where we sort of inject or mount our view application.

36
00:02:17.550 --> 00:02:23.880
So our view application tracks all of those changes and it simply plugs into the HTML right here and

37
00:02:23.880 --> 00:02:25.560
then JavaScript takes over fully.

38
00:02:25.860 --> 00:02:30.570
So our JavaScript file predictably is going to be a lot larger than our index edge HTML file.

39
00:02:30.690 --> 00:02:36.420
Our index file is very small because it's just the bare infrastructure that is needed to load the JavaScript

40
00:02:36.420 --> 00:02:38.970
and have it inject the view application in here.

41
00:02:39.630 --> 00:02:39.870
All right.

42
00:02:39.870 --> 00:02:43.770
And that's the whole point of a single page application is we don't need to keep refreshing the page

43
00:02:43.770 --> 00:02:45.030
and getting fresh HTML.

44
00:02:45.240 --> 00:02:50.700
Rather, the JavaScript bundle includes all the logic that it needs to know how to navigate user across

45
00:02:50.700 --> 00:02:55.110
different pages, how to remove certain things and add certain things, and it takes care of it automatically.

46
00:02:55.200 --> 00:02:56.700
But this is where it all begins.

47
00:02:56.700 --> 00:03:02.730
This is the HTML file that your browser loads whenever we look at our view app at local host 80 in our

48
00:03:02.730 --> 00:03:03.180
browser.

49
00:03:03.630 --> 00:03:07.890
All right, moving right along, we have our associate or source directory and this is where we're going

50
00:03:07.890 --> 00:03:10.590
to be writing 95% of the code in this class.

51
00:03:11.070 --> 00:03:14.880
This is basically what we're going to have all of our view related code and JavaScript code.

52
00:03:14.910 --> 00:03:21.060
So most of our code is going to go in here after CRC, we have the tests directory and this is where

53
00:03:21.060 --> 00:03:26.520
we're going to be writing our tests files and those are going to validate that our implementation files

54
00:03:26.520 --> 00:03:29.160
in SLC are doing as they are supposed to do.

55
00:03:29.160 --> 00:03:32.310
So we're going to double check that our code is working as expected.

56
00:03:32.310 --> 00:03:33.540
We'll talk more about that later.

57
00:03:33.840 --> 00:03:36.840
And this is not necessarily the only convention.

58
00:03:36.840 --> 00:03:41.700
Sometimes people put their tests alongside their direct implementation in the CRC directory.

59
00:03:41.940 --> 00:03:46.500
So this folder structure is not something that is mandated by Vue, but it's a common one where you

60
00:03:46.500 --> 00:03:49.380
place your tests in a separate test directory at the top level.

61
00:03:49.590 --> 00:03:51.960
It really is a matter of personal preference and consistency.

62
00:03:52.080 --> 00:03:57.630
But following the way that Vue CLIA has set up our code, we are going to be writing all of our test

63
00:03:57.630 --> 00:04:01.080
files within this test directory on the top level of the project.

64
00:04:01.950 --> 00:04:02.250
All right.

65
00:04:02.400 --> 00:04:06.120
And those are all of our directories and we still have a couple configuration files remaining.

66
00:04:06.300 --> 00:04:07.590
So let's quickly walk through those.

67
00:04:07.860 --> 00:04:14.040
So browsers list RC is just a kind of a requirements file for the transponder so that it knows what

68
00:04:14.040 --> 00:04:16.230
versions of browsers it has to support.

69
00:04:16.440 --> 00:04:21.600
So for example, right here, this says that you don't have to worry about Ie11 Internet Explorer 11.

70
00:04:21.840 --> 00:04:25.710
Basically, this is a file that we never have to really worry about when we're working on our project.

71
00:04:25.860 --> 00:04:31.350
But in case you have to verify support for older browsers, remember that we're going to be taking the

72
00:04:31.350 --> 00:04:36.750
view code and we're going to be transpiring it to basic JavaScript that can run in a browser and certain

73
00:04:36.750 --> 00:04:39.540
browsers will support certain features and certain ones will not.

74
00:04:39.780 --> 00:04:44.940
So this is the file that sort of tells the transporter what it can work with and that allows it to both

75
00:04:44.940 --> 00:04:48.390
include and exclude certain browsers that it needs to have.

76
00:04:48.480 --> 00:04:54.270
And that affects how it transpires, the code and what JavaScript it ends up creating as a result,

77
00:04:54.270 --> 00:04:54.540
right?

78
00:04:54.750 --> 00:04:56.160
So we never have to really worry about it.

79
00:04:56.160 --> 00:04:59.970
But if you're working with a product that needs to support legacy users on legacy.

80
00:05:00.000 --> 00:05:00.540
He browsers.

81
00:05:00.720 --> 00:05:04.320
This is the kind of place where you might make those changes to support those older browsers.

82
00:05:04.350 --> 00:05:04.650
All right.

83
00:05:04.770 --> 00:05:07.650
We don't ever have to worry about this file again afterwards.

84
00:05:07.830 --> 00:05:09.990
We have, of course, our excellent RC jazz file.

85
00:05:10.140 --> 00:05:12.960
This is our configuration file for the S lint linker.

86
00:05:13.110 --> 00:05:18.000
We modified basically this line a lesson or two ago, and we don't really have to worry about this file

87
00:05:18.120 --> 00:05:19.230
moving forward as well.

88
00:05:19.590 --> 00:05:21.640
Afterwards, of course, we have our get ignore file.

89
00:05:21.660 --> 00:05:27.630
This is where you can specify any files or folders that you would like get to ignore permanently, so

90
00:05:27.630 --> 00:05:29.550
it will never be committed to source control.

91
00:05:29.730 --> 00:05:32.310
So one example here of course, is our node module directory.

92
00:05:32.310 --> 00:05:34.830
So this will never be included when you make a get commit.

93
00:05:35.070 --> 00:05:39.930
And you can of course put all kinds of random files that don't really matter here if you don't want

94
00:05:39.930 --> 00:05:41.400
them to be included in your source control.

95
00:05:42.470 --> 00:05:44.040
Hi babble contagious.

96
00:05:44.060 --> 00:05:47.600
Just configure some things that David needs in order to transpire our view code.

97
00:05:47.750 --> 00:05:49.370
Once again, it's a configuration file.

98
00:05:49.370 --> 00:05:52.100
We don't really need to worry about it, but it does need to stay in the project.

99
00:05:52.460 --> 00:05:56.390
Same thing goes for just this is our configuration for our gest test runner.

100
00:05:56.540 --> 00:05:58.040
We added this line right here.

101
00:05:58.040 --> 00:06:00.980
A couple lessons go and we never really have to worry about this file again.

102
00:06:01.370 --> 00:06:02.390
All right, jazz config.

103
00:06:02.390 --> 00:06:08.030
That JSON here sets up some basic JavaScript logic, basically communicating some of the logic of the

104
00:06:08.030 --> 00:06:10.400
type of version that we're trying to get to in JavaScript.

105
00:06:10.400 --> 00:06:16.070
S5, things like establishing the SA C directory as the kind of the home or root directory.

106
00:06:16.250 --> 00:06:19.010
Once again, these are just compiler options for translation.

107
00:06:19.430 --> 00:06:24.080
We don't really need to worry too much about customizing the values here because the visualized sets

108
00:06:24.080 --> 00:06:26.060
up a reasonable default for us to work with.

109
00:06:26.480 --> 00:06:26.750
All right.

110
00:06:26.750 --> 00:06:28.490
Finally, of course, we have packaged JSON.

111
00:06:28.490 --> 00:06:30.530
This is where we have all of our project dependencies.

112
00:06:30.710 --> 00:06:31.480
So they scroll down.

113
00:06:31.490 --> 00:06:33.110
You can see here is my version of view.

114
00:06:33.350 --> 00:06:35.960
We also have our dev dependencies listed below.

115
00:06:36.080 --> 00:06:41.420
And as a reminder, dev dependencies are packages that we don't need for the end user in the browser.

116
00:06:41.510 --> 00:06:44.120
They still exist for the benefit of us, the developer.

117
00:06:44.330 --> 00:06:49.010
So for example, prettier right here is really great for formatting our code, but for the end user

118
00:06:49.010 --> 00:06:49.940
they don't really care.

119
00:06:49.940 --> 00:06:52.760
They're not looking for our code in the browser, they're not looking for that.

120
00:06:52.970 --> 00:06:55.070
Another example is just, which is our test run.

121
00:06:55.070 --> 00:06:59.910
Our tests are very important to verify that our code works, but it makes no difference to the end user

122
00:06:59.930 --> 00:07:00.680
using our website.

123
00:07:00.860 --> 00:07:03.350
So these dev dependencies are strictly for us as developers.

124
00:07:03.470 --> 00:07:08.090
While these dependencies are the actual NPM packages that Vue needs in order to run in the browser.

125
00:07:08.840 --> 00:07:14.270
As another quick reminder about the NPM ecosystem, we have this script section right here, and the

126
00:07:14.270 --> 00:07:21.170
way this works is in your terminal you can run the command NPM run, followed by any one of these keywords,

127
00:07:21.260 --> 00:07:24.320
and that will correspond to the command on the right hand side.

128
00:07:24.530 --> 00:07:30.110
So for example, earlier we ran NPM, Run, Serve, and that launched our view up in the browser.

129
00:07:30.320 --> 00:07:35.510
The reason we were able to run serve after NPM run is because it is an available key right here.

130
00:07:35.750 --> 00:07:40.550
So we can similarly do NPM run, build, npm, run, test, colon, unit, npm, run linked.

131
00:07:40.760 --> 00:07:44.210
And when we run those commands from the terminal, they execute these commands right here.

132
00:07:44.840 --> 00:07:49.400
And of course these commands simply rely on the view sales service which we installed to run a whole

133
00:07:49.400 --> 00:07:53.960
bunch of internal commands to start up that process, whether it be serving the app, live in the browser,

134
00:07:54.140 --> 00:07:59.900
building the final JavaScript bundle, running our just test suite, or lifting the files with Eastland

135
00:07:59.900 --> 00:08:00.350
and prettier.

136
00:08:00.590 --> 00:08:00.920
All right.

137
00:08:01.370 --> 00:08:05.780
And then we have of course, I read me this is just a plain markdown file where you can write a description

138
00:08:05.780 --> 00:08:06.590
about your app.

139
00:08:06.740 --> 00:08:11.450
You know, this is typically where developers will show you how to set up the repository on your computer.

140
00:08:11.600 --> 00:08:14.110
We're not going to be writing any documentation in this course.

141
00:08:14.120 --> 00:08:15.020
We don't need to worry about it.

142
00:08:15.200 --> 00:08:18.350
But if you want to use this file to keep notes, that's a good place to do it.

143
00:08:19.070 --> 00:08:24.860
And finally, Vue configs is just a general configuration file for the again that usually we're never

144
00:08:24.860 --> 00:08:26.150
going to have to deal with this file again.

145
00:08:26.510 --> 00:08:30.140
But there are some configuration options available depending on how you would like to transport all

146
00:08:30.150 --> 00:08:32.510
of you up once again for learning the basics.

147
00:08:32.510 --> 00:08:37.190
View all of the defaults that you Seelye created for us here are pretty reasonable.

148
00:08:37.400 --> 00:08:39.110
So we're going to stick with them throughout the course.

149
00:08:39.530 --> 00:08:39.770
All right.

150
00:08:39.770 --> 00:08:43.910
So that is a quick overview of the project structure and I will see you in the next lesson.
