1
00:00:00,370 --> 00:00:01,240
Okay.

2
00:00:01,240 --> 00:00:07,600
So in this lesson, let's add a test suite for our new job filter sidebar skills component.

3
00:00:07,940 --> 00:00:14,410
So right here in tests unit, I'm going to find my components folder and job results and job filter

4
00:00:14,410 --> 00:00:21,370
sidebar and I will create a new test file called Job Filter Sidebar Skills.

5
00:00:23,010 --> 00:00:23,820
Dot test.

6
00:00:24,090 --> 00:00:24,990
That's.

7
00:00:25,320 --> 00:00:25,860
There we go.

8
00:00:26,430 --> 00:00:32,820
And since this component is not rendering any child components, I think we're going to be okay with

9
00:00:32,820 --> 00:00:33,780
a shallow amount.

10
00:00:34,140 --> 00:00:39,300
So I'm going to begin by importing shallow amount that is going to come from you test utils.

11
00:00:39,690 --> 00:00:44,790
Then we are utilizing our use store computed function right here from view export.

12
00:00:44,790 --> 00:00:46,560
I meant composable function from view.

13
00:00:47,100 --> 00:00:48,660
And we're going to need to mock it out.

14
00:00:48,840 --> 00:00:51,510
So I am going to import it and immediately mock it out.

15
00:00:51,810 --> 00:00:53,910
So right here, import, use store.

16
00:00:54,000 --> 00:00:55,350
And that's going to come from view.

17
00:00:56,010 --> 00:00:59,030
Then on the line below, I'm going to use just mock to mock up.

18
00:00:59,790 --> 00:01:05,370
And finally, for typescript sake, I'm going to define a used or mock constant, which will be the

19
00:01:05,370 --> 00:01:11,010
use store function now a just function, but properly treated as indeed a just mock function.

20
00:01:11,370 --> 00:01:13,920
Then I'm going to import the actual component under test.

21
00:01:14,760 --> 00:01:18,420
So right here we're going to import job filters, sidebar skills.

22
00:01:18,690 --> 00:01:24,390
And that's going to come from the source directory components, job results, job filter, sidebar,

23
00:01:24,570 --> 00:01:26,180
job filter, sidebar skills.

24
00:01:26,190 --> 00:01:27,810
And then I'm going to add the view extension.

25
00:01:28,380 --> 00:01:31,350
Then I'll create my described block for job filters.

26
00:01:31,410 --> 00:01:32,310
Sidebar skills.

27
00:01:34,010 --> 00:01:36,410
And then we can think about what we wanted to test here.

28
00:01:37,370 --> 00:01:43,070
So the first thing that I want to test is the connection between the video store and my input.

29
00:01:43,280 --> 00:01:48,710
I really want to test the read functionality, which is really this section right here, the Gap method

30
00:01:48,710 --> 00:01:54,620
that accesses the state property Honor View Store, and then more specifically the skills search term

31
00:01:54,620 --> 00:01:56,990
property and then connects it to my input.

32
00:01:57,350 --> 00:02:02,390
So what I want to set up in my first test is a mock return value for use store that's going to return

33
00:02:02,390 --> 00:02:03,470
an object like this.

34
00:02:03,680 --> 00:02:10,160
And I want to make sure that whatever is on this property is what I can find populated in my input element.

35
00:02:10,940 --> 00:02:13,280
So right here, I'll begin with the test description.

36
00:02:13,610 --> 00:02:18,170
The component populates search input from store.

37
00:02:19,940 --> 00:02:25,670
So we're going to take our store, Mark, and we are, of course, going to provide a mock return value

38
00:02:25,970 --> 00:02:28,790
to overwrite just default of undefined.

39
00:02:29,060 --> 00:02:30,290
And this is going to be an object.

40
00:02:30,500 --> 00:02:32,260
And there's two things we need to support.

41
00:02:32,270 --> 00:02:36,380
We need to support the get method logic right here and the set method logic right here.

42
00:02:36,680 --> 00:02:41,690
So in order forget to be able to work our store right here, which we are returning, must have a state

43
00:02:41,690 --> 00:02:42,200
property.

44
00:02:42,590 --> 00:02:47,540
And that is going to be an object and that internal object is going to have a skills search term property.

45
00:02:47,810 --> 00:02:48,410
So right here.

46
00:02:49,510 --> 00:02:53,830
I'm going to add skill search term and I could set it to be whatever string I want.

47
00:02:54,100 --> 00:02:56,080
Let's just go with something like programmer.

48
00:02:56,980 --> 00:03:02,170
Then in order for my set method to be able to work, I need to make sure that my mock store right here

49
00:03:02,320 --> 00:03:06,220
supports a commit method because I'm going to invoke commit whenever the user types.

50
00:03:06,640 --> 00:03:08,380
So right here I'm going to provide commit.

51
00:03:09,940 --> 00:03:12,220
And I'm just going to set it to a basic just function.

52
00:03:12,760 --> 00:03:17,590
Now, technically speaking, if we don't directly interact with our input, our set logic may never

53
00:03:17,590 --> 00:03:21,640
run and thus we may be able to get away with leaving out line 15.

54
00:03:21,910 --> 00:03:26,830
But it kind of makes sense to put it, and I think it sort of makes me feel a little safer knowing that

55
00:03:26,830 --> 00:03:32,140
all of the mock properties that the store needs are satisfied, even if this specific test is not going

56
00:03:32,140 --> 00:03:33,370
to rely on this one right here.

57
00:03:33,550 --> 00:03:33,880
All right.

58
00:03:34,150 --> 00:03:39,280
So we're honoring this contract right here, and thus our mock store is good enough to play the role

59
00:03:39,280 --> 00:03:40,810
of our real view store.

60
00:03:41,200 --> 00:03:41,530
All right.

61
00:03:41,830 --> 00:03:44,020
The next step, of course, is mounting our component.

62
00:03:44,920 --> 00:03:50,890
So right here, content wrapper is going to be shallow, mounting our job builder sidebar scale's component.

63
00:03:51,340 --> 00:03:54,580
And then the next thing I want to do is actually find my input right here.

64
00:03:54,940 --> 00:03:57,730
So I'm going to find it by using my data test attribute.

65
00:03:58,060 --> 00:04:07,000
So right here I'm going to say skills search input is going to be the invocation of wrapper find and

66
00:04:07,000 --> 00:04:08,380
I'm going to pass a string argument.

67
00:04:08,650 --> 00:04:10,930
I'm going to look for an attribute called data test.

68
00:04:11,560 --> 00:04:14,530
And of course the value I provide to look for is up to us.

69
00:04:14,560 --> 00:04:16,900
Let's just call it skills search input.

70
00:04:18,400 --> 00:04:20,980
Of course, that does not exist just yet, but that's not a problem.

71
00:04:21,430 --> 00:04:28,720
And then what the test utils is going to do is it's going to find this input as a DOM node and in order

72
00:04:28,720 --> 00:04:35,020
to actually test that its value has been populated, what I basically to do is go to the actual HTML

73
00:04:35,260 --> 00:04:38,500
element that is found within that DOM note.

74
00:04:38,710 --> 00:04:42,250
Basically this goes back to kind of vanilla JavaScript in the browser.

75
00:04:42,430 --> 00:04:44,980
We don't have the core value here.

76
00:04:45,070 --> 00:04:51,340
We have the entire input object and I need to actually reach into that DOM node and extract the actual

77
00:04:51,340 --> 00:04:52,840
core HTML element.

78
00:04:53,200 --> 00:04:56,560
Basically what I'm going to do here is declare a concept called input element.

79
00:04:58,230 --> 00:05:01,410
An on skill search input, which is going to be that view wrapper.

80
00:05:01,650 --> 00:05:02,250
On that.

81
00:05:02,250 --> 00:05:04,110
I have a property called element.

82
00:05:04,620 --> 00:05:08,940
An element is going to be that actual input itself, this thing right here.

83
00:05:09,300 --> 00:05:09,690
All right.

84
00:05:10,020 --> 00:05:13,400
Now, TypeScript has no clue what we're working with here.

85
00:05:13,680 --> 00:05:15,660
So it knows that it's going to get some kind of element.

86
00:05:15,810 --> 00:05:18,240
But it can be any HTML element in the world.

87
00:05:18,240 --> 00:05:22,230
It can be an input, it can be a paragraph, it can be a list item.

88
00:05:22,230 --> 00:05:22,470
Right.

89
00:05:22,710 --> 00:05:27,570
So in order to tell TypeScript what this is, so it knows what properties it supports, I'm going to

90
00:05:27,570 --> 00:05:30,870
use the as keyword, the exact same thing we're using here.

91
00:05:31,080 --> 00:05:36,450
And I'm going to tell TypeScript that I know something it does not that this is an H to not input element.

92
00:05:36,750 --> 00:05:40,860
So right here this is a built in type into it built into TypeScript.

93
00:05:41,010 --> 00:05:47,370
I can simply say this will be an HTML input element and there's a whole bunch of these defined in the

94
00:05:47,370 --> 00:05:50,010
documentation for things like HTML image element.

95
00:05:50,820 --> 00:05:51,630
Let's go down here.

96
00:05:51,630 --> 00:05:52,890
They're going to be a whole bunch of other ones.

97
00:05:53,100 --> 00:05:59,310
HTML paragraph element, I'm sure basically a here html i element html input element, H2 time a label

98
00:05:59,310 --> 00:05:59,610
element.

99
00:05:59,610 --> 00:05:59,850
Right.

100
00:06:00,000 --> 00:06:05,670
So within the internals of TypeScript, it has all these preexisting types for those DOM nodes that

101
00:06:05,670 --> 00:06:06,870
it can find in the browser.

102
00:06:07,020 --> 00:06:11,010
And now we're explicitly telling TypeScript that this is not just a regular HTML element.

103
00:06:11,190 --> 00:06:18,900
Please try type as specifically being of an input element, and that is what allows us to take that

104
00:06:18,900 --> 00:06:22,350
input element and extract a special property on it called value.

105
00:06:22,590 --> 00:06:27,240
Value is going to be the property on the input that actually represents what is currently entered into

106
00:06:27,240 --> 00:06:28,140
that input box.

107
00:06:28,590 --> 00:06:31,590
So once again, we're starting from the view wrapper around the DOM node.

108
00:06:31,770 --> 00:06:35,220
We're getting that DOM node itself, which is the HTML input element.

109
00:06:35,430 --> 00:06:40,710
And then from that DOM object representing an HTML input element or getting its value, which is the

110
00:06:40,710 --> 00:06:42,960
text that is entered into the input right now.

111
00:06:43,620 --> 00:06:48,870
And of course, what we expect is the value that is populated here should be the exact same value that

112
00:06:48,870 --> 00:06:49,440
the input has.

113
00:06:49,440 --> 00:06:51,810
Read it from my view store.

114
00:06:51,840 --> 00:06:53,820
This is this logic right here.

115
00:06:54,150 --> 00:06:58,740
So if everything is wired up correctly, we expect this to be the string programmer.

116
00:06:59,550 --> 00:06:59,910
All right.

117
00:06:59,910 --> 00:07:03,630
So whatever we provide here is exactly what the input should have inside it.

118
00:07:03,960 --> 00:07:07,470
So of course this test will fail because we do not have the data test actually.

119
00:07:07,800 --> 00:07:14,910
So let's go up and right here on my input, I'm going to provide that to test and then provide the exact

120
00:07:14,910 --> 00:07:18,030
value that my test expects, which is skills, search input.

121
00:07:18,480 --> 00:07:24,240
So that should allow my test to find this element rabbit interview wrapper object, then get the actual

122
00:07:24,240 --> 00:07:29,880
domino, then get the value property on that object and that is indeed equal to the string programmer.

123
00:07:29,970 --> 00:07:31,200
And our test is passing.

124
00:07:31,470 --> 00:07:35,520
We can see right here that if I change it to something differently, like programmers, we're going

125
00:07:35,520 --> 00:07:36,300
to see a failure.

126
00:07:36,810 --> 00:07:41,160
And that's the failure we expect, which is just telling us, Hey, you told me to expect programmer,

127
00:07:41,280 --> 00:07:43,080
but instead I'm receiving programmers.

128
00:07:43,260 --> 00:07:48,870
So that is verifying that just end the component are correctly reading from this slice of the view store

129
00:07:48,870 --> 00:07:51,180
state, which we have provided using a mock storm.

130
00:07:51,540 --> 00:07:51,840
All right.

131
00:07:51,840 --> 00:07:56,790
So I'm going to return this back to a passing test, and that is all there is to cover in this lesson.

132
00:07:56,910 --> 00:07:58,380
So I will see the next one.
