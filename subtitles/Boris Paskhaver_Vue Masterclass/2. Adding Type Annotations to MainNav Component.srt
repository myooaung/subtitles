1
00:00:00,540 --> 00:00:01,020
Okay.

2
00:00:01,020 --> 00:00:05,250
So let's continue practicing with the ideas we introduced in the previous lesson.

3
00:00:05,490 --> 00:00:10,920
And as always, I hope that by introducing more components, we're going to get a chance to be exposed

4
00:00:10,920 --> 00:00:16,020
to more types of problems that we may run into when integrating TypeScript into a view component.

5
00:00:16,440 --> 00:00:19,500
So the next component that I want to focus on is Main NAV.

6
00:00:19,740 --> 00:00:24,090
So I'm going to open up Main Navigate View and here is that component right here.

7
00:00:24,090 --> 00:00:29,310
This is our top level menu at the top of our app and you can see that we're still utilizing the options

8
00:00:29,310 --> 00:00:31,050
API in our script section.

9
00:00:31,050 --> 00:00:34,170
Right here we have our data method, our computed properties, etc..

10
00:00:34,590 --> 00:00:37,650
So let's go ahead and add TypeScript type checking to this component.

11
00:00:37,920 --> 00:00:39,570
So we know it's a two step process.

12
00:00:39,570 --> 00:00:42,180
The first thing I need to do is to add Lang right here.

13
00:00:42,600 --> 00:00:46,290
So script, we're going to add the Lang attribute and set it to TTS.

14
00:00:46,590 --> 00:00:48,780
And then the next thing I'm going to do is import.

15
00:00:49,970 --> 00:00:51,170
Define component.

16
00:00:52,070 --> 00:00:54,650
And that's going to come from our top level view library.

17
00:00:54,950 --> 00:00:59,840
And then I need to make sure that I invoke this function and pass in my configuration object right here

18
00:00:59,840 --> 00:01:01,190
as my default export.

19
00:01:01,700 --> 00:01:03,350
So right here, define component.

20
00:01:03,830 --> 00:01:07,000
I'm going to open up my parentheses here and make sure I close it off below.

21
00:01:08,750 --> 00:01:13,730
Save that and it looks like we have no errors, which means TypeScript is going to be working out of

22
00:01:13,730 --> 00:01:14,150
the box.

23
00:01:14,480 --> 00:01:19,940
I do want to show you that TypeScript is indeed working and as as just like in the previous lesson that

24
00:01:19,940 --> 00:01:22,330
you do not have to follow along with this code I'm about to write.

25
00:01:22,340 --> 00:01:23,450
This is just for example.

26
00:01:23,750 --> 00:01:27,610
But what I'm going to do here is I'm going to add a new method called nonsense.

27
00:01:28,400 --> 00:01:34,940
And you'll notice up above that we have a menu items array in our data, and each object within menu

28
00:01:34,940 --> 00:01:36,860
items has a specific object type.

29
00:01:37,070 --> 00:01:41,870
It has a text property set to a string and it has a URL property set to a string as well.

30
00:01:42,230 --> 00:01:46,670
So let's see what happens when I tried to push in a different type of value into my menu items.

31
00:01:46,670 --> 00:01:47,030
Right.

32
00:01:47,390 --> 00:01:52,550
So right here, I'm going to access this that menu items and that's totally valid syntax in the options

33
00:01:52,550 --> 00:01:54,950
API and menu items is an array.

34
00:01:55,130 --> 00:01:58,850
So push is going to be an absolutely valid method to invoke on that array.

35
00:01:59,120 --> 00:01:59,630
But let's see.

36
00:01:59,630 --> 00:02:01,730
I try to put in a value like five.

37
00:02:02,000 --> 00:02:06,620
As soon as I do this, you can see the typescript violation pops up and if I have my mouse over it,

38
00:02:06,620 --> 00:02:11,570
it will say argument of type number is not assignable to parameter of this type.

39
00:02:11,810 --> 00:02:12,740
And what is that type?

40
00:02:12,920 --> 00:02:17,210
It's the exact object type that TypeScript has inferred from our menu items.

41
00:02:17,210 --> 00:02:17,510
Right.

42
00:02:17,810 --> 00:02:22,670
So Typekit says, Hey, I looked at all the objects in that array and I know they have this shape.

43
00:02:22,670 --> 00:02:27,350
They have a text value that is set to a string and they have a URL property that is set to a string

44
00:02:27,350 --> 00:02:27,740
as well.

45
00:02:27,950 --> 00:02:28,570
Five.

46
00:02:28,790 --> 00:02:32,270
That type of number does not match this type of object you've given me.

47
00:02:32,420 --> 00:02:35,720
So I'm going to raise a concern that this is not a valid operation.

48
00:02:36,020 --> 00:02:38,630
So this is proof to us that TypeScript is indeed working.

49
00:02:38,930 --> 00:02:42,230
So I'm going to get rid of this nonsense method, since it was just for the sake of example.

50
00:02:42,980 --> 00:02:45,380
And that should make these errors disappear as well.

51
00:02:45,560 --> 00:02:48,920
I'm not quite sure why they're appearing, but as soon as you get rid of that method, they're going

52
00:02:48,920 --> 00:02:50,030
to be back to normal.

53
00:02:50,600 --> 00:02:52,610
Okay, so everything is looking good in this component.

54
00:02:52,610 --> 00:02:56,510
So the next thing I want to do is update the corresponding test suite as well.

55
00:02:56,810 --> 00:03:01,730
So I'm going to open up Main now that test that just opened that file on the right.

56
00:03:02,090 --> 00:03:06,650
And of course, the first thing we're going to do here is open up our file explorer, which will identify

57
00:03:06,650 --> 00:03:07,160
the file.

58
00:03:07,280 --> 00:03:11,090
And I, of course, want to change its extension from just to TSP.

59
00:03:11,780 --> 00:03:14,810
Let's do that and let's see what kind of errors we encounter.

60
00:03:15,140 --> 00:03:19,670
It looks like TypeScript is only going to show us one thing it's unsatisfied with, and that is in our

61
00:03:19,670 --> 00:03:21,290
create config factory function.

62
00:03:21,560 --> 00:03:24,830
As a reminder, we are still using the options API in this component.

63
00:03:25,040 --> 00:03:29,840
So that's we're using the older way we introduced to mark out the View Store, which is represented

64
00:03:29,840 --> 00:03:33,830
by the Dollar Sign Store property on this keyword within the component.

65
00:03:34,040 --> 00:03:39,950
So this is how we were mocking it out earlier and the way we set up this logic is that every test right

66
00:03:39,950 --> 00:03:43,670
here can pass in the custom object that is represented by store here.

67
00:03:43,880 --> 00:03:46,190
So each test can specify what it cares about.

68
00:03:46,460 --> 00:03:49,340
And of course, TypeScript is unhappy because it doesn't know what store is.

69
00:03:49,460 --> 00:03:54,050
It says parameter dollar sign store implicitly has an any type, so we have to be a little bit more

70
00:03:54,050 --> 00:03:55,460
specific about what this is.

71
00:03:55,850 --> 00:04:01,610
So as always, even though even though we have things available from the view and the view libraries

72
00:04:01,610 --> 00:04:07,160
like an official store interface, I argue we don't need to use the real store interface because it's

73
00:04:07,160 --> 00:04:10,850
only going to add more complexity than we care about in this test.

74
00:04:11,210 --> 00:04:15,740
In these tests, if we look, for example, at our very first test right here, all that dollar sign

75
00:04:15,740 --> 00:04:20,420
store needs to be is an object with a state property and that state property needs to have a certain

76
00:04:20,420 --> 00:04:21,230
shape as well.

77
00:04:21,410 --> 00:04:24,020
And that is going to be actually our global state interface.

78
00:04:24,020 --> 00:04:26,540
I can show you as a reminder what that interface looks like.

79
00:04:26,870 --> 00:04:31,730
It's that interface with four properties is logged in jobs, selected organizations like the job that

80
00:04:32,090 --> 00:04:36,710
they can see here for the purposes of what the main NAV component cares about, it only cares about

81
00:04:36,710 --> 00:04:41,840
the is large and properties and I don't want to require it to always have to use the global state interface

82
00:04:42,020 --> 00:04:46,460
because then in every test I'll have to provide these three additional properties which have nothing

83
00:04:46,460 --> 00:04:48,140
to do with the component under test.

84
00:04:48,860 --> 00:04:49,100
Right.

85
00:04:49,340 --> 00:04:55,160
Similarly, if we think about the actual Vue store interface, the store and not the state, remember

86
00:04:55,160 --> 00:05:00,770
that the store is this complex object that has a state property and also has methods like commit, methods

87
00:05:00,770 --> 00:05:02,090
like dispatch, right?

88
00:05:02,090 --> 00:05:07,160
It has the getters property and all of those things matter to the real Vue store in its official interface.

89
00:05:07,370 --> 00:05:13,580
But for the purposes of this test, we don't want to say that this has to be a honoring the view store

90
00:05:13,580 --> 00:05:18,890
interface, because if it did, we'd have to provide all of those additional properties, commit dispatch

91
00:05:18,890 --> 00:05:23,030
getters, etc., even though they're completely irrelevant to this test.

92
00:05:23,630 --> 00:05:23,990
Right?

93
00:05:24,200 --> 00:05:29,150
And we don't want to make this test big and bloated and have to define all of these definitions and

94
00:05:29,150 --> 00:05:32,780
parameters for things that are completely useless to what May Naifeh cares about.

95
00:05:33,140 --> 00:05:35,180
So here's what we're going to do to solve this problem.

96
00:05:35,990 --> 00:05:41,510
We're going to define an interface right here for this store parameter, and I'm going to call my interface

97
00:05:41,510 --> 00:05:42,200
mock store.

98
00:05:42,620 --> 00:05:44,600
I'm going to keep this in this file for now.

99
00:05:44,600 --> 00:05:48,200
But if we later on determine that it's reusable, we can certainly move it to a helper file.

100
00:05:48,560 --> 00:05:50,390
And so what does our mock store need to have?

101
00:05:50,660 --> 00:05:54,740
All it needs to have as I look through all of these tests to confirm that they are pretty similar,

102
00:05:55,040 --> 00:05:58,490
all that are store needs to have is a state property, right?

103
00:05:58,760 --> 00:06:00,890
And then what is our state property going to be equal to?

104
00:06:01,010 --> 00:06:02,780
It's going to be equal to our global state.

105
00:06:02,930 --> 00:06:07,520
However, to ensure that I'm able to feed and things like this where it's only one out of the for profit.

106
00:06:07,840 --> 00:06:11,440
Instead of all four, I'm going to use the partial global state.

107
00:06:11,710 --> 00:06:17,560
I'm going to use the partial type from TypeScript to make all of these properties optional so that TypeScript

108
00:06:17,560 --> 00:06:22,510
can validate that is logged in, is a valid property still and still set to the right type of boolean,

109
00:06:22,690 --> 00:06:26,500
but not mandate that all of these have to be present in every test that I write.

110
00:06:26,860 --> 00:06:29,950
So the syntax is going to look like this right here.

111
00:06:30,460 --> 00:06:35,290
I know that I'm going to need to have a state property and what is going to be the type of that state

112
00:06:35,290 --> 00:06:35,650
property?

113
00:06:35,650 --> 00:06:41,740
In my Mac store, I'm going to use the partial keyword, provide my brackets right here and here.

114
00:06:41,740 --> 00:06:44,950
I need to import global state, which is this interface on the file on the left.

115
00:06:45,340 --> 00:06:52,480
So right here I'm going to import global state and that is going to come from my source directory store

116
00:06:52,480 --> 00:06:52,930
types.

117
00:06:53,530 --> 00:06:55,630
And so right here I'm going to provide a global state.

118
00:06:56,940 --> 00:06:59,260
It's the mock store interface right here.

119
00:06:59,290 --> 00:07:00,240
Make sure I take this correctly.

120
00:07:00,240 --> 00:07:00,690
Global.

121
00:07:00,960 --> 00:07:01,320
All right.

122
00:07:01,380 --> 00:07:06,930
So my mock store interface is going to be an object that just has a single state property, which must

123
00:07:06,930 --> 00:07:09,150
be an object that is going to resemble this shape.

124
00:07:09,300 --> 00:07:12,180
However, all the properties are going to be optional, right?

125
00:07:12,180 --> 00:07:16,060
So all that's left to do is right here to type out this dollar sign store parameter.

126
00:07:16,200 --> 00:07:19,380
I'm going to say it's going to follow the type of mock store above.

127
00:07:20,010 --> 00:07:21,180
It's going to implement that type.

128
00:07:21,180 --> 00:07:22,170
And there we go.

129
00:07:22,410 --> 00:07:24,990
So now there's no other errors because TypeScript validates.

130
00:07:25,170 --> 00:07:28,950
Yes, this store fits the mock store interface you told me to expect.

131
00:07:29,130 --> 00:07:34,740
It has a state property and it has an object right here that honors the partial global state interface

132
00:07:34,740 --> 00:07:35,280
right here.

133
00:07:35,490 --> 00:07:39,900
Again, the partial keyword is critical because if we didn't have partial, it would be fully global

134
00:07:39,900 --> 00:07:40,230
state.

135
00:07:40,380 --> 00:07:44,970
And then TypeScript would complain that we don't have jobs, selected organizations and selected job

136
00:07:44,970 --> 00:07:47,460
type properties right here on this declaration.

137
00:07:47,580 --> 00:07:51,720
And we don't care about those properties in this test because they're not relevant to me now.

138
00:07:51,840 --> 00:07:53,220
So I don't want to include them here.

139
00:07:53,640 --> 00:07:53,910
All right.

140
00:07:53,910 --> 00:07:55,500
So with that, we can save the file.

141
00:07:55,500 --> 00:07:57,690
It doesn't look like there are any other violations.

142
00:07:57,960 --> 00:08:00,720
And right here, I can run, NPM, run, test, call and watch.

143
00:08:02,180 --> 00:08:07,070
And since I make commit at the end of every lesson, this should only identify that our main test failed

144
00:08:07,430 --> 00:08:08,990
because that is the component that we've changed.

145
00:08:08,990 --> 00:08:11,060
And you can see all of our tests are still passing.

146
00:08:11,390 --> 00:08:11,780
All right.

147
00:08:12,080 --> 00:08:15,470
That's one more example of converting a component to utilize.

148
00:08:15,470 --> 00:08:17,990
TypeScript and I will see you in the next lesson.
