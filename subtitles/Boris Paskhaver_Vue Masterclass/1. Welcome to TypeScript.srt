1
00:00:00,270 --> 00:00:01,200
All right.

2
00:00:01,200 --> 00:00:05,700
So welcome to the next section of the course which is entitled Intro to TypeScript.

3
00:00:05,970 --> 00:00:11,100
In this section, we're going to take a break from our job search project to learn about the basics

4
00:00:11,100 --> 00:00:13,050
of the typescript programming language.

5
00:00:13,350 --> 00:00:18,300
Now, as a heads up, if you are already familiar with the basics of TypeScript, you can feel free

6
00:00:18,300 --> 00:00:22,980
to skip this section and move on to the next one where we're going to pick back up on the project.

7
00:00:23,160 --> 00:00:28,260
In this section, we're going to focus on TypeScript by itself in a separate, isolated environment

8
00:00:28,410 --> 00:00:30,570
so we can learn the basics of the language by itself.

9
00:00:30,990 --> 00:00:35,160
Now, if you're brand new to TypeScript, the first thought you may have is, Wait a minute, wait a

10
00:00:35,160 --> 00:00:35,370
minute.

11
00:00:35,370 --> 00:00:37,680
I don't want to learn another whole programming language.

12
00:00:37,680 --> 00:00:41,640
That's a lot to take on in a view course, but it's okay.

13
00:00:41,640 --> 00:00:42,840
And let me let me tell you why.

14
00:00:43,080 --> 00:00:48,420
The first thing is, if you're familiar with JavaScript, you already know a lot about TypeScript.

15
00:00:48,420 --> 00:00:54,090
Believe it or not, the way I can describe TypeScript is almost like an extension of JavaScript.

16
00:00:54,090 --> 00:00:56,700
It's like an enhanced version of JavaScript.

17
00:00:56,970 --> 00:00:59,640
It's not a brand new language with different syntax.

18
00:00:59,820 --> 00:01:05,280
It's really the core JavaScript language, but with some extra syntax related to types.

19
00:01:05,480 --> 00:01:05,710
All right.

20
00:01:05,730 --> 00:01:07,260
And that's what I'm going to talk about in this section.

21
00:01:07,260 --> 00:01:10,980
We're going to introduce what TypeScript is and what problems it helps us to solve.

22
00:01:11,130 --> 00:01:12,570
That JavaScript does not.

23
00:01:12,900 --> 00:01:17,190
So we're going to focus on this language in the section, just the basics, just what you need to get

24
00:01:17,190 --> 00:01:17,520
going.

25
00:01:17,640 --> 00:01:20,760
And then we're going to apply it to our View project in the next section.

26
00:01:21,030 --> 00:01:26,190
The reason I wanted to include TypeScript in this course is because it's becoming very popular in frontend

27
00:01:26,190 --> 00:01:31,530
development or in general, wherever you have JavaScript projects, a lot of developers are moving them

28
00:01:31,530 --> 00:01:34,530
to TypeScript because of the benefits that TypeScript provides.

29
00:01:34,860 --> 00:01:36,060
So let's talk about those benefits.

30
00:01:36,360 --> 00:01:39,780
So first up, we have the word typescript and it has the word type in it.

31
00:01:39,780 --> 00:01:40,710
What is a type?

32
00:01:41,520 --> 00:01:44,670
So a type is just a type of data, a kind of data.

33
00:01:45,000 --> 00:01:51,660
So JavaScript has many different types of data strings, numbers, booleans, arrays, objects, undefined,

34
00:01:51,660 --> 00:01:53,220
null, etc., right?

35
00:01:53,550 --> 00:01:57,840
So a type is just a category that a value belongs to, right?

36
00:01:57,840 --> 00:02:02,100
It's kind of like this family of values that you belong to.

37
00:02:02,280 --> 00:02:07,500
A type is abstract, it's not a concrete value, and that can be a kind of a vague expression.

38
00:02:07,500 --> 00:02:09,450
So let's take a look at a couple examples here.

39
00:02:09,690 --> 00:02:12,900
The integer or the number of five is a value.

40
00:02:12,900 --> 00:02:14,730
It is concrete, it is specific.

41
00:02:14,730 --> 00:02:20,430
It has some kind of value in the real world in a program five means something number in comparison is

42
00:02:20,430 --> 00:02:25,380
what we might call the type of five it is the data type of what five is.

43
00:02:25,380 --> 00:02:27,660
It is the family that five belongs to.

44
00:02:27,660 --> 00:02:29,790
Five is a example of a number.

45
00:02:29,940 --> 00:02:32,820
Ten is an example of a number 20 is an example of a number.

46
00:02:32,970 --> 00:02:34,260
So number is the type.

47
00:02:34,350 --> 00:02:35,340
It's the category.

48
00:02:35,340 --> 00:02:36,570
It's the kind of data.

49
00:02:36,930 --> 00:02:41,220
Similarly true is a concrete value while boolean is its type.

50
00:02:41,730 --> 00:02:46,710
Similarly, the string hello is a specific string value, but its type is string.

51
00:02:47,490 --> 00:02:53,460
Okay, so when we're writing plain JavaScript, JavaScript has no idea about what kind of type we're

52
00:02:53,460 --> 00:02:53,970
working with.

53
00:02:54,210 --> 00:02:59,010
If we have a variable and we assign it to a string, JavaScript doesn't know that that's a string.

54
00:02:59,010 --> 00:03:04,050
It just knows that the variable is a name that's pointing to some kind of object which may be whatever

55
00:03:04,050 --> 00:03:04,470
we want.

56
00:03:04,830 --> 00:03:05,130
Right?

57
00:03:05,250 --> 00:03:11,370
And so the problem with that is we can run into situations where we try to execute operations on invalid

58
00:03:11,370 --> 00:03:16,950
objects and JavaScript won't discover that error until the program runs.

59
00:03:17,280 --> 00:03:22,830
And that's because we don't have type declarations, which means we don't tell the language what type

60
00:03:22,830 --> 00:03:23,640
something is.

61
00:03:23,940 --> 00:03:29,130
And as as simple as that may sound, what that actually helps a language like TypeScript to do is to

62
00:03:29,130 --> 00:03:31,200
help you figure out a whole bunch of errors.

63
00:03:31,500 --> 00:03:37,140
So let me take you to an official example from the actual TypeScript website on the next slide.

64
00:03:37,890 --> 00:03:42,240
So this is a example from the actual front page of the TypeScript website.

65
00:03:42,420 --> 00:03:46,050
And you can see it says TypeScript is JavaScript with syntax for types.

66
00:03:46,320 --> 00:03:50,550
So as I mentioned earlier, TypeScript is not some kind of brand new language with a totally different

67
00:03:50,550 --> 00:03:50,970
syntax.

68
00:03:51,180 --> 00:03:53,820
It's just like an enhanced version of JavaScript.

69
00:03:54,000 --> 00:03:59,160
It's all the features that JavaScript has, plus some more features on top of it that help you avoid

70
00:03:59,160 --> 00:04:01,320
a certain category of errors in your program.

71
00:04:01,650 --> 00:04:07,440
To take a look at the example on the right hand side, we have a user object with three properties first

72
00:04:07,440 --> 00:04:09,060
name, last name and role.

73
00:04:09,330 --> 00:04:13,890
And more importantly than just having three properties, TypeScript can recognize that this object's

74
00:04:13,890 --> 00:04:15,270
properties have certain types.

75
00:04:15,540 --> 00:04:20,670
So TypeScript understands that the user object has a first name property that is a string, a last name

76
00:04:20,670 --> 00:04:23,580
property that is a string and a row property that is a string.

77
00:04:23,910 --> 00:04:26,130
Now take a look at what happens when we console.log.

78
00:04:26,190 --> 00:04:27,150
User Name.

79
00:04:27,450 --> 00:04:32,880
If this was a regular JavaScript program, the program would run just fine, but JavaScript would have

80
00:04:32,880 --> 00:04:37,140
value to undefined and that might cause a problem in our program.

81
00:04:37,320 --> 00:04:42,390
Most likely, this kind of error would occur when the developer is really trying to access either the

82
00:04:42,390 --> 00:04:44,820
first name property or the last name property.

83
00:04:44,820 --> 00:04:48,720
But they may accidentally forget and think it's called name and a JavaScript.

84
00:04:48,840 --> 00:04:51,360
The language won't give you any concerns about it.

85
00:04:51,360 --> 00:04:53,670
It won't tell you that that's an error in comparison.

86
00:04:53,670 --> 00:04:58,590
In a language like TypeScript, it's going to warn you about this kind of error or this kind of potential

87
00:04:58,590 --> 00:04:59,640
violation you can.

88
00:04:59,700 --> 00:05:05,310
See here in the red error message on the right typescript will tell you the property name does not exist

89
00:05:05,310 --> 00:05:10,500
on the type of object that I think user is an object with a first name property of string, a last name,

90
00:05:10,500 --> 00:05:12,030
property of string and a roll of string.

91
00:05:12,210 --> 00:05:14,570
It's going to say, Hey, I have three properties.

92
00:05:14,580 --> 00:05:15,900
Name is not one of them.

93
00:05:15,900 --> 00:05:20,700
That's problematic and you should look into this and that's all that type checking is and that's all

94
00:05:20,700 --> 00:05:21,870
the typescript adds.

95
00:05:22,050 --> 00:05:24,600
It's JavaScript with syntax for types.

96
00:05:25,350 --> 00:05:30,630
In addition to that, TypeScript is also going to allow us to perform certain operations and prohibit

97
00:05:30,630 --> 00:05:31,320
other operations.

98
00:05:31,560 --> 00:05:36,210
For example, if it knows we're working with a string, it's going to allow us to use a string method

99
00:05:36,210 --> 00:05:38,250
like two uppercase in comparison.

100
00:05:38,250 --> 00:05:39,930
If it knows it, we have a number.

101
00:05:40,050 --> 00:05:45,330
It's going to say you can't execute a method like two uppercase on a number because that's not a valid

102
00:05:45,330 --> 00:05:45,980
method, right?

103
00:05:46,170 --> 00:05:50,670
In JavaScript, again, these errors will pop up, but they're only going to pop up when we run the

104
00:05:50,670 --> 00:05:51,180
program.

105
00:05:51,330 --> 00:05:55,980
In comparison in TypeScript, we're going to be able to identify them earlier as we're actually coding

106
00:05:55,980 --> 00:05:56,790
in our editor.

107
00:05:57,030 --> 00:06:01,740
And I hope that the advantages of TypeScript become clear as we actually work more with it, because

108
00:06:01,740 --> 00:06:06,480
sometimes it can be hard to understand the initial benefits simply from these kind of introductory examples.

109
00:06:07,410 --> 00:06:12,270
So let's also talk about what a compiler is, because in order to use TypeScript, we're going to need

110
00:06:12,270 --> 00:06:13,710
to use a TypeScript compiler.

111
00:06:14,070 --> 00:06:17,010
So the first thing is TypeScript does not run in our browser.

112
00:06:17,010 --> 00:06:21,660
We only use the language in our code editor like the code for the benefits of development.

113
00:06:21,870 --> 00:06:25,470
So TypeScript exists to help us as developer, as developers.

114
00:06:25,470 --> 00:06:28,620
It helps us catch bugs, it helps us reduce the chance of errors.

115
00:06:28,770 --> 00:06:30,720
It's not for the end user of the product.

116
00:06:30,720 --> 00:06:35,910
It's for us as developers now because our web browser, like Chrome, does not recognize TypeScript,

117
00:06:36,090 --> 00:06:37,860
it only recognizes JavaScript.

118
00:06:37,980 --> 00:06:42,990
We need something that's going to convert our TypeScript code into plain vanilla JavaScript that the

119
00:06:42,990 --> 00:06:44,370
browser can understand.

120
00:06:44,610 --> 00:06:47,520
And that piece of software, that program is the compiler.

121
00:06:47,730 --> 00:06:53,550
A compiler is a basic piece of software that converts our TypeScript to JavaScript so that it runs in

122
00:06:53,550 --> 00:06:54,150
our browser.

123
00:06:54,390 --> 00:06:58,500
It's basically the exact same principle we have in our job search project when it comes to things like

124
00:06:58,500 --> 00:06:58,980
Babel.

125
00:06:59,130 --> 00:07:04,710
Babel looks at our view components and says, Hey, you have this file with a template section, a script

126
00:07:04,710 --> 00:07:05,850
section and a style section.

127
00:07:06,000 --> 00:07:07,940
That's not a regular HTML file.

128
00:07:07,950 --> 00:07:09,300
But no, don't worry about that.

129
00:07:09,300 --> 00:07:14,790
I'm going to take that and I'm going to convert it into plain HTML, CSS in JavaScript that your browser

130
00:07:14,790 --> 00:07:15,300
can run.

131
00:07:15,420 --> 00:07:17,130
It's the exact same idea here.

132
00:07:17,340 --> 00:07:21,810
The compiler is just a program that takes one thing that the browser does not understand in this case

133
00:07:21,810 --> 00:07:25,170
TypeScript, and then converts it into a language that it can understand.

134
00:07:26,070 --> 00:07:26,430
All right.

135
00:07:26,760 --> 00:07:30,820
So for this section, what we're going to do is rather than set up anything on our computer, because

136
00:07:30,820 --> 00:07:34,620
that's always going to be a little bit more complex, we're simply going to be learning JavaScript on

137
00:07:34,620 --> 00:07:37,470
its official typescript, that is on its official website.

138
00:07:37,710 --> 00:07:40,650
The official TypeScript website has a really helpful playground.

139
00:07:40,890 --> 00:07:45,060
Basically, it's going to be a window where we can type in TypeScript on the left hand side, we can

140
00:07:45,060 --> 00:07:50,010
execute it and we can also see the corresponding compiled JavaScript on the right hand side.

141
00:07:50,310 --> 00:07:54,870
I'll show you this in the next lesson, but the key takeaway here is it's going to make it super simple

142
00:07:54,870 --> 00:07:59,490
for us to get started playing around with the language, because all you need to do is access the website

143
00:07:59,490 --> 00:08:00,480
and type in some code.

144
00:08:00,510 --> 00:08:03,450
You don't need to install any modules or set up anything in your code.

145
00:08:03,450 --> 00:08:04,380
Editor All right.

146
00:08:04,380 --> 00:08:08,310
And then in the next section, I'll actually show you how to add TypeScript specifically to our View

147
00:08:08,310 --> 00:08:08,700
project.

148
00:08:09,030 --> 00:08:13,320
So for now, to close this lesson off, what I'd like you to do is to go to this link that you see on

149
00:08:13,320 --> 00:08:15,990
your screen, TypeScript Lang Dawgs play.

150
00:08:16,260 --> 00:08:20,070
And then in the next section I'll show you the basics of how this playground works and we'll get started

151
00:08:20,070 --> 00:08:22,830
exploring the basic syntax of TypeScript, I promise.

152
00:08:22,830 --> 00:08:26,580
It's not that crazy, it's the syntax isn't difficult and it's not that much more.

153
00:08:26,760 --> 00:08:28,710
You're not going to be learning a brand new language.

154
00:08:28,800 --> 00:08:33,390
You're going to be learning what I think is an enhanced, better version of JavaScript that helps us

155
00:08:33,390 --> 00:08:35,490
avoid a lot of errors as developers.

156
00:08:35,610 --> 00:08:40,230
All right, so I hope you're excited to learn this really popular tool in the JavaScript ecosystem,

157
00:08:40,350 --> 00:08:42,210
and I will see you in the next lesson.
