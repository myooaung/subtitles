1
00:00:00,690 --> 00:00:01,230
Okay.

2
00:00:01,230 --> 00:00:07,590
So let's see how we can fix the problems that we identified with global success from the previous lesson.

3
00:00:07,890 --> 00:00:10,620
So here I have my Hello World Dot view component.

4
00:00:10,620 --> 00:00:12,990
That is this chunk of the page right here.

5
00:00:13,290 --> 00:00:18,180
And in this file I'm going to scroll all the way down to the bottom where we have the style section.

6
00:00:18,420 --> 00:00:24,000
And you're going to notice a special keyword and it is going to be scoped right here.

7
00:00:24,270 --> 00:00:27,900
So this is actually the magical keyword that's going to do the trick.

8
00:00:28,050 --> 00:00:33,450
As you can see in the comment right here, it says, add the scoped attribute to limit access to this

9
00:00:33,450 --> 00:00:34,440
component only.

10
00:00:34,800 --> 00:00:41,430
So what we can do in a view file is add the scoped keyword immediately after our opening style tag.

11
00:00:41,700 --> 00:00:45,390
Now what this does is it takes all of the seasons declarations in here.

12
00:00:45,540 --> 00:00:51,180
It doesn't matter whether they are element tags or class selectors or ID selectors any in here.

13
00:00:51,390 --> 00:00:59,160
And it's going to limit the scope or the boundaries to which these styles are applied to only this component,

14
00:00:59,280 --> 00:01:00,780
to only this file.

15
00:01:01,050 --> 00:01:08,400
So what this basically means is this H3 will now only apply these styles to H3 in helloworld dot view,

16
00:01:08,520 --> 00:01:10,620
not to any other component file.

17
00:01:10,860 --> 00:01:16,290
Similarly, the styles for these lists and list items and anchor tags, these styles are only going

18
00:01:16,290 --> 00:01:22,410
to be applied to, you know, ally and elements in the template section in this component.

19
00:01:22,530 --> 00:01:24,390
They are not going to leak out.

20
00:01:24,810 --> 00:01:25,140
All right.

21
00:01:25,830 --> 00:01:28,320
So let's try this approach in APP.

22
00:01:28,530 --> 00:01:32,550
But I also want to make an important point here, because you might be curious if we have this scoped

23
00:01:32,550 --> 00:01:33,450
keyword right here.

24
00:01:33,510 --> 00:01:39,150
Why are we still seeing the purple styles from the app component filter in and effect this thing right

25
00:01:39,150 --> 00:01:39,450
here?

26
00:01:39,630 --> 00:01:45,930
As a reminder, we have a hello world here and that is being rendered in this H1 right here with a class

27
00:01:45,930 --> 00:01:46,560
of header.

28
00:01:46,710 --> 00:01:49,410
And that header class is coming from our app to view file.

29
00:01:49,710 --> 00:01:56,040
Well, remember, just because we have scopes in here does not mean that another component styles can't

30
00:01:56,040 --> 00:01:58,200
pollute or come into this component.

31
00:01:58,470 --> 00:02:03,300
So what I mean by that is these helloworld styles are scoped to this file.

32
00:02:03,480 --> 00:02:06,600
These declarations cannot escape to another file.

33
00:02:06,810 --> 00:02:12,000
However, another component styles can still make their way into the Hello World file.

34
00:02:12,150 --> 00:02:13,710
And that's exactly what we're seeing here.

35
00:02:13,920 --> 00:02:17,220
This purple styling is not coming from any anything here.

36
00:02:17,430 --> 00:02:23,790
It's coming from this declaration in another file where we have not scoped the contents, and thus these

37
00:02:23,790 --> 00:02:27,840
declarations are escaping across the code base and affecting the Helloworld component.

38
00:02:28,320 --> 00:02:28,620
All right.

39
00:02:28,620 --> 00:02:33,630
So to restate, the scoped keyword is going to limit the styles from escaping the current component

40
00:02:33,630 --> 00:02:34,350
that you are in.

41
00:02:34,470 --> 00:02:39,090
It's not going to prevent other components and their styles from polluting the current component.

42
00:02:39,720 --> 00:02:46,020
So in our app file, let's return this back to a basic H1 right here in H1 and right here, we're going

43
00:02:46,020 --> 00:02:50,910
to change this to an H1 as well and save this and everything is going to stay the exact same way because

44
00:02:50,910 --> 00:02:57,540
again, this style of applying the purple color is still affecting every H1 in the app because it has

45
00:02:57,540 --> 00:02:59,010
not been scoped to this component.

46
00:02:59,010 --> 00:03:02,220
It is not been limited or bound to just this template.

47
00:03:02,550 --> 00:03:05,400
So we are going to add the scoped keyword right here.

48
00:03:06,510 --> 00:03:10,320
And when we saved this, just a quick heads up, there's going to be a lot of changes on the page.

49
00:03:10,470 --> 00:03:15,390
And for now, I just want you to focus your eyes on the H1 and then we'll talk about all the other changes

50
00:03:15,390 --> 00:03:15,930
after that.

51
00:03:16,260 --> 00:03:16,770
So here I go.

52
00:03:16,780 --> 00:03:17,820
I'm going to save it right now.

53
00:03:18,980 --> 00:03:22,550
And wow, that's a pretty big change compared to the page we saw previously.

54
00:03:22,760 --> 00:03:25,490
Notice that we have accomplished what we originally wanted to do.

55
00:03:25,640 --> 00:03:33,740
Now only this H1 is going to have the Purple Star because this is the H1 that is in the template section

56
00:03:33,740 --> 00:03:35,600
of the app component.

57
00:03:35,870 --> 00:03:43,160
So we have scoped this style of H1 to apply only to elements and tags within the app component.

58
00:03:43,400 --> 00:03:48,200
So because we have limited the boundaries, view only applies the style to this H1 right here.

59
00:03:48,320 --> 00:03:53,480
It can no longer apply the style to the H1 and Helloworld because these styles are now scoped.

60
00:03:53,630 --> 00:03:57,650
They are prohibited from escaping this component and polluting styles elsewhere.

61
00:03:57,980 --> 00:04:02,330
So then you might be curious why did we lose all of the pre formatting that we had throughout the app?

62
00:04:02,660 --> 00:04:05,150
Well, think about this declaration right here.

63
00:04:05,810 --> 00:04:10,190
This is a bunch of CSR styles targeting an element with an IDF app.

64
00:04:10,490 --> 00:04:14,810
And if you scroll up, you'll notice there is no actual element here with an idea of app.

65
00:04:14,990 --> 00:04:16,370
So what was this applying to you?

66
00:04:16,640 --> 00:04:21,380
Well, you may recall that in our index, that HTML file, that's where we bootstrap the entire of the

67
00:04:21,380 --> 00:04:22,010
application.

68
00:04:22,160 --> 00:04:23,980
We have this div right here.

69
00:04:24,020 --> 00:04:26,510
And this is the actual div with an idea of app.

70
00:04:26,930 --> 00:04:32,090
So before when we did not have the scoped keyword, these styles were allowed to be global.

71
00:04:32,240 --> 00:04:39,770
So Vue was able to find this div right here in our index file and apply these styles right here because

72
00:04:39,770 --> 00:04:42,680
they were valid because they matched the ID selector app.

73
00:04:42,950 --> 00:04:47,840
As soon as we added scoped, we created a boundary to prohibit these styles from escaping.

74
00:04:47,990 --> 00:04:54,140
And thus these styles could no longer affect anything throughout the app, anywhere that has an ID of

75
00:04:54,140 --> 00:04:56,450
app, and that includes our index H2 Mafa.

76
00:04:56,570 --> 00:05:01,700
And that's why we lost all our styles, because we're no longer applying all this logic to all the content

77
00:05:01,700 --> 00:05:02,210
right here.

78
00:05:02,860 --> 00:05:03,080
Right.

79
00:05:03,260 --> 00:05:08,330
So, as you might guess, scoped is generally considered best practice because it honors the intent

80
00:05:08,330 --> 00:05:09,960
of what a component is supposed to do.

81
00:05:09,980 --> 00:05:12,170
It's supposed to be isolated, independent.

82
00:05:12,350 --> 00:05:17,750
You don't want to edit one component styles and have it reverberate and cascade into ten other components.

83
00:05:17,930 --> 00:05:21,320
And then you're going to be completely confused about where a given style is coming from.

84
00:05:21,530 --> 00:05:27,320
Rather, you want each component to be isolated, independent, reusable puzzle piece that takes care

85
00:05:27,320 --> 00:05:29,150
of all of its own needs by itself.

86
00:05:29,360 --> 00:05:33,320
So throughout the course, we're basically going to be applying, scoped just about everywhere whenever

87
00:05:33,320 --> 00:05:36,350
we do clarity styles, CSR styles here in the style section.

88
00:05:36,410 --> 00:05:36,710
All right.

89
00:05:37,010 --> 00:05:41,030
So that's really the key take away from this lesson and make sure to memorize this keyword and make

90
00:05:41,030 --> 00:05:46,790
sure to remember to add it after your opening style tag right here to limit the CSR styles and scope

91
00:05:46,790 --> 00:05:50,210
them to only the component that those styles are declared within.

92
00:05:50,540 --> 00:05:50,840
All right.

93
00:05:50,840 --> 00:05:52,370
That's all there is to cover in this lesson.

94
00:05:52,370 --> 00:05:53,930
So I will see you in the next one.
