WEBVTT
1
00:00:00.500 --> 00:00:01.190
Okay.

2
00:00:01.190 --> 00:00:08.060
So now that we have a basic view store set up, let's try to read from the store state from within a

3
00:00:08.090 --> 00:00:08.990
view component.

4
00:00:09.350 --> 00:00:12.050
So I'm going to open up my main nav component.

5
00:00:12.380 --> 00:00:17.900
And as a reminder, this is the component that has that is logged in data property, which affects the

6
00:00:17.900 --> 00:00:23.000
rendering of a lot of elements of this component, such as the profile image and the sub nav.

7
00:00:23.210 --> 00:00:29.150
And our goal here is to replace this reference with a reference to our View X Store State.

8
00:00:29.180 --> 00:00:31.400
We ultimately want to replace this entirely.

9
00:00:31.760 --> 00:00:33.380
So let's take it step by step.

10
00:00:33.380 --> 00:00:35.120
How can we read from a store?

11
00:00:35.420 --> 00:00:38.680
So what I'm going to do is I'm going to define a new computed property.

12
00:00:38.690 --> 00:00:42.410
This is just so that we have some kind of method in which we can show you the syntax.

13
00:00:42.680 --> 00:00:47.390
And the name of this computed property is totally arbitrary because it's just for the sake of example.

14
00:00:47.640 --> 00:00:48.920
So I'm just going to call it example.

15
00:00:50.070 --> 00:00:50.490
All right.

16
00:00:50.760 --> 00:00:53.460
And right here is where we can access the store.

17
00:00:53.790 --> 00:00:59.760
So you may recall from earlier in the course that when we were talking about view router, we saw how

18
00:00:59.760 --> 00:01:06.540
view router went into every component and added those available properties like dollar sign root and

19
00:01:06.540 --> 00:01:07.950
dollar sign router.

20
00:01:07.980 --> 00:01:08.310
Right.

21
00:01:08.460 --> 00:01:13.140
And that, of course, spares the need for us to import the router into any component file because every

22
00:01:13.140 --> 00:01:16.500
component has those global properties that it can do things with.

23
00:01:16.830 --> 00:01:19.440
Well, view works the exact same way.

24
00:01:19.650 --> 00:01:25.500
It gives every single component in our app access to a property called Dollar Sign Store.

25
00:01:25.770 --> 00:01:31.640
So right here I'm going to console.log directly on the this keyword which references this component

26
00:01:31.640 --> 00:01:32.700
to this specific instance.

27
00:01:32.880 --> 00:01:35.010
I can access dollar sign store.

28
00:01:35.310 --> 00:01:40.410
Now again, the dollar sign is just a regular symbol in JavaScript, but the reason that the View X

29
00:01:40.410 --> 00:01:44.820
development team went with this dollar sign is because it's highly unlikely that you're going to create

30
00:01:44.820 --> 00:01:50.880
your own data property called Dollar Sign Store, and thus it avoids the possibility of naming conflicts.

31
00:01:50.880 --> 00:01:51.090
Right.

32
00:01:51.270 --> 00:01:55.890
It's a lot more common that you would call a data property something like store without a dollar sign.

33
00:01:56.130 --> 00:02:01.710
And so by using dollar sign, it makes it highly unlikely that I'll conflict with anything you have.

34
00:02:01.890 --> 00:02:06.600
But otherwise, the dollar sign is just a regular JavaScript character, no different than an alphabetic

35
00:02:06.600 --> 00:02:06.960
character.

36
00:02:07.260 --> 00:02:09.570
And again, every component has access to this right now.

37
00:02:09.900 --> 00:02:13.260
So there's two things we need to do in order to see this in our browser console.

38
00:02:13.290 --> 00:02:16.170
The first thing is our computed property access to return something.

39
00:02:16.350 --> 00:02:20.310
So for now, I'm just going to return an arbitrary value, let's say return five, for example.

40
00:02:20.580 --> 00:02:24.870
And then in order to get this computed property to run it, we actually have to use it somewhere in

41
00:02:24.870 --> 00:02:25.350
our template.

42
00:02:25.680 --> 00:02:27.000
So how about right here?

43
00:02:27.930 --> 00:02:29.250
Let's say below our sub nav.

44
00:02:29.430 --> 00:02:33.300
I'm just going to use my double curly braces and output, whatever example is.

45
00:02:33.450 --> 00:02:38.310
And the only reason we're doing this again is because we want this to run so we can take a look at our

46
00:02:38.310 --> 00:02:39.090
console.log.

47
00:02:39.450 --> 00:02:46.010
So if I navigate back to my browser and I open up my console here, we're going to see our store.

48
00:02:46.020 --> 00:02:50.340
And if I expand this, you can see it is our complete store object right here.

49
00:02:50.520 --> 00:02:55.110
Every component is going to have access to it via this dot dollar sign store.

50
00:02:55.470 --> 00:03:02.490
What we're seeing right here is the exact same store that we are exporting right here from our index,

51
00:03:02.490 --> 00:03:03.180
such as file.

52
00:03:03.420 --> 00:03:05.700
It's this exact same object.

53
00:03:05.850 --> 00:03:10.440
In fact, we could import this store directly into any component if we wanted to.

54
00:03:10.500 --> 00:03:17.220
But that is a bad practice because each component already has access to this exact object right here

55
00:03:17.340 --> 00:03:18.630
via this property.

56
00:03:19.110 --> 00:03:19.500
All right.

57
00:03:19.830 --> 00:03:25.680
Now, on that store object, we have access to all of those properties and methods that we saw a few

58
00:03:25.680 --> 00:03:26.280
lessons ago.

59
00:03:26.460 --> 00:03:29.160
So, for example, we have access to the commit method.

60
00:03:29.310 --> 00:03:29.640
Right.

61
00:03:29.640 --> 00:03:35.040
We saw that earlier that the commit method is what we use in order to commit a mutation to the store.

62
00:03:35.280 --> 00:03:37.650
We also have access to the actual store state.

63
00:03:37.920 --> 00:03:43.260
So you may recall from when we were writing this code manually with console.log in index that yes.

64
00:03:43.470 --> 00:03:50.010
That on our store we have a property called state and that state is what stores are store state and

65
00:03:50.010 --> 00:03:53.040
we have a property on state called is logged in.

66
00:03:53.910 --> 00:03:58.800
And so that's going to be the actual value that we currently have in our store.

67
00:03:59.100 --> 00:04:05.190
And this design is completely reactive, which means as soon as we commit a mutation and change the

68
00:04:05.190 --> 00:04:11.730
value of a property such as is logged in view X will alert any component that is reading from the store

69
00:04:11.940 --> 00:04:13.410
that its state has changed.

70
00:04:13.680 --> 00:04:18.690
And that's how we're able to extract that global component logic outside of any given component.

71
00:04:18.930 --> 00:04:24.630
If we have five different components that are reading from the is logged in property and the is logged

72
00:04:24.630 --> 00:04:30.570
in property changes the you will tell all five of those components that they need to update because

73
00:04:30.570 --> 00:04:32.280
the stores state has changed.

74
00:04:32.640 --> 00:04:36.510
So what I'm going to do is I'm going to remove this console.log and I'm just going to return this thing

75
00:04:36.510 --> 00:04:42.150
right here so we can actually see that true or false directly in our inner output.

76
00:04:42.150 --> 00:04:45.540
So if I navigate here, we're going to see here, here.

77
00:04:45.540 --> 00:04:46.290
Is that false?

78
00:04:46.290 --> 00:04:49.280
That is the starting value of our is logged in property.

79
00:04:49.380 --> 00:04:54.030
It is displaying right here so we can use the store state in order to render something to the screen

80
00:04:54.240 --> 00:05:00.000
or we can use it for some kind of conditional logic or any any kind of similar view concepts that we've

81
00:05:00.000 --> 00:05:05.580
used before for iteration, using V4, for conditionals, using VRF, all of that is completely valid.

82
00:05:05.760 --> 00:05:09.120
The only difference here is we're not reaching into the components own data.

83
00:05:09.270 --> 00:05:14.700
We're reaching out to this global store, this View X store that you can almost think of as this cloud

84
00:05:14.700 --> 00:05:17.820
that is floating around our app that any component can talk to.

85
00:05:18.270 --> 00:05:18.630
All right.

86
00:05:18.900 --> 00:05:23.580
So that's an introduction to how we can work with the dollar sign store property.

87
00:05:23.670 --> 00:05:26.610
We're going to continue chipping away at this idea in the very next lesson.
