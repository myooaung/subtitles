1
00:00:00,270 --> 00:00:01,020
Okay.

2
00:00:01,020 --> 00:00:08,340
So with our discovery of the slot feature in view, we have moved the accordion component one step closer

3
00:00:08,340 --> 00:00:14,850
to being very reusable, but there's still one bit of it that is hardcoded and that is the header right

4
00:00:14,850 --> 00:00:15,180
here.

5
00:00:15,420 --> 00:00:21,270
We are always hard coding organizations, which means no matter how many accordions we render, we're

6
00:00:21,270 --> 00:00:23,520
always going to have this text of organizations.

7
00:00:23,670 --> 00:00:27,660
And obviously this is something that we want to vary in our browser.

8
00:00:27,660 --> 00:00:32,940
For example, when we render multiple accordions right here, we want one for organizations, then one

9
00:00:32,940 --> 00:00:35,700
for education, then one for job type, etc..

10
00:00:36,030 --> 00:00:41,910
So what I'd like to do is to remove this hardcoded code and make it a little bit more flexible.

11
00:00:42,600 --> 00:00:46,710
And that of course raises a good question, which is how do we solve this?

12
00:00:46,710 --> 00:00:46,950
Right.

13
00:00:47,220 --> 00:00:53,190
And that leads to another follow up question, which is, do we want to use slots or do we want to use

14
00:00:53,190 --> 00:00:53,670
props?

15
00:00:53,910 --> 00:00:56,340
You may recall props from earlier in the course.

16
00:00:56,340 --> 00:00:59,550
Props allow us to provide inputs to our components.

17
00:00:59,850 --> 00:01:02,610
So what is the key difference between the props and slots?

18
00:01:02,610 --> 00:01:07,920
They're kind of similar in the sense that the parent component can provide some kind of information

19
00:01:07,920 --> 00:01:10,650
down to a child component like an accordion.

20
00:01:11,010 --> 00:01:15,750
Well, you typically want to use props whenever you have a simple value that is not HTML.

21
00:01:16,080 --> 00:01:21,660
So in this scenario, we want the parent component in this case job filter sidebar to be able to pass

22
00:01:21,660 --> 00:01:26,280
a simple string down to our accordion that we're going to be able to dynamically use here.

23
00:01:26,460 --> 00:01:32,820
It's a basic string like organizations or job type or education for simple inputs like that, a prop

24
00:01:32,820 --> 00:01:33,510
works great.

25
00:01:33,690 --> 00:01:39,420
You can use a prop to pass down a string value, a number, a boolean, even something like an array

26
00:01:39,420 --> 00:01:40,890
or a JavaScript object, right?

27
00:01:41,850 --> 00:01:45,720
The difference between that and props is props allow you are slots.

28
00:01:45,720 --> 00:01:49,980
Rather slots allow you to pass that a whole chunks of HTML.

29
00:01:50,190 --> 00:01:52,680
Here we can see a perfect use case of slots.

30
00:01:52,830 --> 00:01:59,670
We are able to pass down this complex bundle of HTML with a div and a field to an unordered list and

31
00:01:59,670 --> 00:02:03,300
we automatically can tell Vue to inject it right here with the slot component.

32
00:02:03,660 --> 00:02:10,020
So whenever we want to pass down custom HTML, we use slots whenever we want to pass down just a custom

33
00:02:10,020 --> 00:02:15,300
piece of information, like a string or a number or a boolean, we use props instead, right?

34
00:02:15,390 --> 00:02:18,480
When you're dealing with JavaScript constructs, use props.

35
00:02:18,570 --> 00:02:21,300
When you're dealing with HTML constructs, use slots.

36
00:02:21,480 --> 00:02:22,500
That's the key difference here.

37
00:02:22,800 --> 00:02:27,390
So in this case, I simply want to allow the parent component to pass dummy prop, let's call it header

38
00:02:27,570 --> 00:02:30,330
and whatever that header will be, I'm going to render it right here.

39
00:02:30,660 --> 00:02:37,230
So the first thing I'm going to do is I'm going to define a section in my script section where I'm going

40
00:02:37,230 --> 00:02:40,530
to specify the props that the accordion component is going to receive.

41
00:02:40,860 --> 00:02:43,050
So, for example, let's maybe do it right here.

42
00:02:43,080 --> 00:02:46,740
We'll let the East London producer tell us if it's the wrong location.

43
00:02:47,010 --> 00:02:49,050
Let's define a props object right here.

44
00:02:50,400 --> 00:02:50,760
All right.

45
00:02:51,060 --> 00:02:54,600
And in our props object, I'm going to specify the props this component will receive.

46
00:02:54,630 --> 00:02:55,930
We've done this before in the course.

47
00:02:55,950 --> 00:02:57,210
This is just for validation.

48
00:02:57,510 --> 00:03:01,200
I will expect the accordion component to receive ahead of a prop.

49
00:03:01,770 --> 00:03:05,670
We provide this with a validation object where we specify what hetero will be.

50
00:03:05,670 --> 00:03:11,190
As a prop, we can provide the type property to specify that header will be a string and then we can

51
00:03:11,190 --> 00:03:15,480
use the required property to specify that the header prop is required.

52
00:03:15,600 --> 00:03:20,520
The parent needs to pass in the header prop whenever it renders an accordion component.

53
00:03:20,880 --> 00:03:26,070
And remember, whenever we have header now we can reference it the exact same way that we would reference

54
00:03:26,070 --> 00:03:29,550
a computed property or a data property we can render in line.

55
00:03:29,670 --> 00:03:33,870
We can use it for a directive like this if it works the exact same way as local data.

56
00:03:33,990 --> 00:03:38,970
The difference being that a prop is not local data, it is data that we get from our parent component.

57
00:03:39,390 --> 00:03:44,730
So right here, instead of hard coding the text organizations, I'm going to use my double curly brace

58
00:03:44,730 --> 00:03:48,810
syntax to output whatever value I get for my header prop.

59
00:03:50,340 --> 00:03:50,730
All right.

60
00:03:51,000 --> 00:03:57,210
So we have taken care of the problem on one side, but obviously we also need to take care of it right

61
00:03:57,210 --> 00:04:00,090
here because here is where we're rendering the accordion.

62
00:04:00,180 --> 00:04:03,690
So here is where we need to provide a valid value for that header prop.

63
00:04:03,900 --> 00:04:09,630
So right here in line, I'm going to do a header and I'm going to provide it with an argument of organization's

64
00:04:10,230 --> 00:04:12,630
it's the exact same value as we had previously.

65
00:04:12,630 --> 00:04:17,850
But now obviously we can render as many different accordions as we want and give each one a different

66
00:04:17,850 --> 00:04:18,450
header prop.

67
00:04:18,810 --> 00:04:21,360
So if I go back to the browser, nothing should have broken.

68
00:04:21,480 --> 00:04:23,490
And indeed we have the exact thing we want.

69
00:04:23,670 --> 00:04:26,220
However, and this is hopefully where it all comes together.

70
00:04:26,550 --> 00:04:31,680
Here is where we use both the power of props and the power of slots at the same time.

71
00:04:31,950 --> 00:04:36,990
What I'm going to do is create another accordion component immediately above my organization's one.

72
00:04:37,260 --> 00:04:43,140
So I'm going to render another accordion, and this one will also have a closing tag, and we're going

73
00:04:43,140 --> 00:04:45,240
to provide this accordion with its own header prop.

74
00:04:45,630 --> 00:04:48,900
So let's say this is going to be something different like job types.

75
00:04:50,020 --> 00:04:53,050
It's going to be another criteria by which the user can filter the jobs.

76
00:04:53,230 --> 00:04:57,640
And here I can put whatever custom content I want for my slots.

77
00:04:57,850 --> 00:05:02,230
So for example, I can put a paragraph tag and just say something like placeholder for now.

78
00:05:03,450 --> 00:05:06,360
Save this, go back to the browser.

79
00:05:06,480 --> 00:05:08,310
And now we have the best of all worlds.

80
00:05:08,430 --> 00:05:14,010
We have a very reusable accordion component for the simple variations like the header text right here.

81
00:05:14,130 --> 00:05:20,010
We can it in our custom prop like we did with header and we have that difference now between these two

82
00:05:20,220 --> 00:05:23,640
and for the nested children that we wanted to render.

83
00:05:23,640 --> 00:05:29,550
We now use slots to render completely different content for each one of those accordion components,

84
00:05:29,790 --> 00:05:35,400
while still retaining the reusable aspects of the collapse ability and the expandability and all of

85
00:05:35,400 --> 00:05:38,970
that logic that deals with, for example, the care icon and its replacement.

86
00:05:39,270 --> 00:05:45,090
So we have isolated all of that logic to the accordion component, but also made it flexible enough

87
00:05:45,210 --> 00:05:48,690
to support all of the variation in header and child content.

88
00:05:49,050 --> 00:05:55,410
So that is how you can mix and match props and slots for a really, really powerful view experience.

89
00:05:55,650 --> 00:05:56,010
All right.

90
00:05:56,340 --> 00:05:58,620
So with that, we have made tremendous progress.

91
00:05:58,620 --> 00:06:03,750
But one thing that we have completely neglected to talk about is how we test for slots.

92
00:06:03,990 --> 00:06:05,850
I'm going to talk about that in the very next lesson.
