1
00:00:00,330 --> 00:00:01,320
All right.

2
00:00:01,320 --> 00:00:06,280
So in this lesson, we're going to introduce the idea of computed properties in view.

3
00:00:06,540 --> 00:00:11,910
Computed properties sometimes can be a little bit confusing, not because they're difficult to understand,

4
00:00:12,030 --> 00:00:15,930
but because they function pretty similarly to how our data properties work.

5
00:00:16,140 --> 00:00:19,020
But they are reserved for a specific use case in view.

6
00:00:19,290 --> 00:00:26,100
And that use case is whenever we have data that is dependent on other pieces of data or put in other

7
00:00:26,100 --> 00:00:29,820
words, data that is derived from other pieces of data.

8
00:00:30,120 --> 00:00:36,690
So what that means is in our data object right here, we want to put our independent properties, our

9
00:00:36,690 --> 00:00:40,950
properties that are independent, meaning they don't depend on anything else.

10
00:00:41,160 --> 00:00:44,250
They exist totally separately from anything else.

11
00:00:44,580 --> 00:00:50,310
In comparison, our computed properties is where we want to put any pieces of information that are dependent

12
00:00:50,310 --> 00:00:57,000
on other pieces of data that change, but only change as other pieces of data change around them that

13
00:00:57,000 --> 00:01:02,880
are derived, or in other words, that come from calculations based on other pieces of information.

14
00:01:03,120 --> 00:01:06,930
So computed data is dependent on some other data.

15
00:01:07,110 --> 00:01:14,220
And the reason we use computed is to not duplicate the original data in an alternate format.

16
00:01:14,490 --> 00:01:15,600
That's a lot to take in.

17
00:01:15,600 --> 00:01:20,400
So let me give you an example in this lesson, and this example has nothing to do with our specific

18
00:01:20,400 --> 00:01:24,030
job app, so you do not need to copy the code that I am writing.

19
00:01:24,030 --> 00:01:25,710
It's just for the purposes of example.

20
00:01:26,370 --> 00:01:32,550
So imagine that we are modeling the idea of a square on our screen and as you know, a square is going

21
00:01:32,550 --> 00:01:36,660
to have a width and height, which is going to be some kind of numeric measurement.

22
00:01:36,930 --> 00:01:39,090
So let's say I have two pieces of data here.

23
00:01:39,420 --> 00:01:44,670
I'll set a width of ten and a height of five, and those values are just arbitrary.

24
00:01:44,670 --> 00:01:49,380
Again, we're pretending that we're modeling a square on screen and let's say what we want our view

25
00:01:49,380 --> 00:01:54,000
app to do is to render the area of the square on screen.

26
00:01:54,240 --> 00:01:59,310
Well, the area of the square is not an independent, a piece of data, quote unquote.

27
00:01:59,310 --> 00:02:02,070
It is a dependent or derived piece of data.

28
00:02:02,280 --> 00:02:03,600
It is always the same.

29
00:02:03,600 --> 00:02:07,290
It is dependent on the product of the width and the height.

30
00:02:07,470 --> 00:02:11,730
If we multiply the width and the height of a square together, we get the squares area.

31
00:02:12,060 --> 00:02:14,760
Well, here's sort of the wrong way to go about it in view.

32
00:02:14,970 --> 00:02:22,380
Let's say if I want to output my area on the screen, I decide to add an area property to my data object

33
00:02:22,530 --> 00:02:24,330
and set it to a value of 50.

34
00:02:24,600 --> 00:02:24,990
All right.

35
00:02:25,260 --> 00:02:28,530
And what I want to do, of course, is display this area on the screen.

36
00:02:28,680 --> 00:02:31,020
So I'm just going to copy this button right here.

37
00:02:31,200 --> 00:02:32,940
Again, you do not have to follow along.

38
00:02:32,940 --> 00:02:37,290
And the only reason I'm copying and pasting it is just so we have a little bit of separation with our

39
00:02:37,290 --> 00:02:38,610
original code right here.

40
00:02:38,850 --> 00:02:42,900
So let's say right here, I'll have a second button and I will render the area of our square on the

41
00:02:42,900 --> 00:02:43,290
screen.

42
00:02:43,590 --> 00:02:49,740
So if I go back to my web browser, you'll see this second button right here and it has a text of 50.

43
00:02:49,860 --> 00:02:51,540
All right, so that looks great.

44
00:02:51,540 --> 00:02:54,300
But let me introduce a caveat to our design.

45
00:02:54,570 --> 00:02:57,090
Let's say we want this button to be clickable.

46
00:02:57,870 --> 00:03:01,440
And when we click the button, we want to double the height.

47
00:03:01,710 --> 00:03:03,840
We want to double the height of the square.

48
00:03:04,020 --> 00:03:04,350
All right.

49
00:03:04,620 --> 00:03:08,610
So how do we how would we implement something like this knowing the features that we know in view?

50
00:03:08,850 --> 00:03:14,760
Well, we can, for example, add a method that will double the value of the height data attribute.

51
00:03:14,970 --> 00:03:20,940
So, for example, I can add a methods key to my view configuration object and I can define a method

52
00:03:20,940 --> 00:03:22,770
of my choosing such as double height.

53
00:03:24,120 --> 00:03:29,640
And we know that in these view methods we can access any property on our data object using the this

54
00:03:29,640 --> 00:03:30,090
keyword.

55
00:03:30,390 --> 00:03:36,630
So I can take whatever is the value of my height attribute and I can multiply it by two to double it.

56
00:03:36,810 --> 00:03:39,150
And the reason we're doubling it is totally arbitrary.

57
00:03:39,150 --> 00:03:43,590
It's just to come up with some example where we are modifying the height property and then of course

58
00:03:43,590 --> 00:03:48,600
this will get us the new height, but we need to save it back to the height property on our data object.

59
00:03:48,810 --> 00:03:53,970
So I'm going to access this start height and I'm going to overwrite it with its new height value.

60
00:03:54,210 --> 00:03:55,620
So this will double the height.

61
00:03:55,900 --> 00:04:00,240
Now, this will create a method to do that, but we obviously need to trigger that method and we can

62
00:04:00,240 --> 00:04:01,770
do that with the V on directive.

63
00:04:01,950 --> 00:04:06,720
So right here I'm going to use the shortcut syntax, which is act click as a reminder.

64
00:04:06,720 --> 00:04:09,030
This is a shortcut for V on click.

65
00:04:09,240 --> 00:04:14,580
It means that whenever the user clicks the button, we tell view which method to run and we want to

66
00:04:14,580 --> 00:04:16,320
run the double height method.

67
00:04:16,530 --> 00:04:18,960
Once again, we're going to write that method without any parentheses.

68
00:04:19,140 --> 00:04:21,510
We just specify the method for view to execute.

69
00:04:21,840 --> 00:04:27,990
So obviously what we want to do here is click the button and double the height, which should in turn

70
00:04:28,170 --> 00:04:36,030
in a dream scenario, update the area as well, because the area is a dependent calculation on the width

71
00:04:36,030 --> 00:04:37,470
and height updating.

72
00:04:37,680 --> 00:04:41,370
So of course if I go back to my browser, this is not what's going to happen.

73
00:04:41,370 --> 00:04:47,370
As I click this button, our height is going to update, but our area that we display here is not going

74
00:04:47,370 --> 00:04:53,370
to and I can actually show you this in The View DevTools If I go to my View DevTools and I find my action

75
00:04:53,370 --> 00:04:59,010
button and I update it right here with this little refresh icon, and I click the button again and refresh

76
00:04:59,010 --> 00:04:59,910
again, you can see.

77
00:04:59,970 --> 00:05:02,280
My height just doubled from 80 to 160.

78
00:05:02,370 --> 00:05:03,870
But my area did not.

79
00:05:03,930 --> 00:05:04,230
Right.

80
00:05:04,440 --> 00:05:10,920
So in other words, our area property is dependent or derived from these two properties of height and

81
00:05:10,920 --> 00:05:11,220
width.

82
00:05:11,430 --> 00:05:16,620
But of course, it's not going to change alongside the height and width because view has no clue the

83
00:05:16,620 --> 00:05:18,990
area is actually a derived property of these two.

84
00:05:19,260 --> 00:05:24,930
From views perspective, we just added this arbitrary area property to data that is its own piece of

85
00:05:24,930 --> 00:05:27,660
information set to 50 and nothing is changing it.

86
00:05:27,660 --> 00:05:27,960
Right?

87
00:05:28,650 --> 00:05:31,140
So how do we handle something like this in view?

88
00:05:31,140 --> 00:05:36,750
How do we have a property that automatically updates as another property updates?

89
00:05:36,990 --> 00:05:42,030
Well, you could say, can't we manually hardcoded this in our double height method?

90
00:05:42,030 --> 00:05:43,350
Can we do something like this?

91
00:05:43,350 --> 00:05:47,850
That area is going to be this height, times this that width.

92
00:05:48,030 --> 00:05:51,000
And the answer is technically we absolutely can.

93
00:05:51,180 --> 00:05:55,560
But if we go with this approach, we are following a more imperative approach.

94
00:05:55,560 --> 00:05:59,670
And what imperative means is we're being a lot more manual, we're writing a lot more code.

95
00:05:59,880 --> 00:06:08,280
We now have to remember that any time, either height or with changes, we need view to recalculate

96
00:06:08,400 --> 00:06:11,160
the the value of the area property.

97
00:06:11,220 --> 00:06:14,310
And that can be problematic because we may forget, right?

98
00:06:14,310 --> 00:06:20,610
We may have a method that modifies the width attribute and totally forget that area is dependent on

99
00:06:20,610 --> 00:06:20,700
it.

100
00:06:20,970 --> 00:06:26,640
And you can imagine in a more complex application, we may have six pieces of data that determine another

101
00:06:26,640 --> 00:06:27,420
piece of information.

102
00:06:27,570 --> 00:06:32,700
And thus any time any of those six properties change, we would similarly have to update the dependent

103
00:06:32,700 --> 00:06:33,180
property.

104
00:06:33,450 --> 00:06:39,240
And the beautiful part of view is Vue offers us a solution for this exact problem where we don't have

105
00:06:39,240 --> 00:06:41,850
to manually keep track of this kind of information.

106
00:06:42,120 --> 00:06:48,990
So in other words, we can tell you to compute the value of area from scratch every time that either

107
00:06:48,990 --> 00:06:50,970
width or height changes.

108
00:06:51,380 --> 00:06:51,660
All right.

109
00:06:51,660 --> 00:06:53,190
That's what computed properties do.

110
00:06:53,340 --> 00:06:54,420
They are computed.

111
00:06:54,420 --> 00:07:01,410
They are re-evaluated by view based on some kind of dependency or some kind of other piece of information

112
00:07:01,410 --> 00:07:02,130
changing.

113
00:07:02,370 --> 00:07:06,720
They are derived data because they are dependent on something else changing.

114
00:07:06,720 --> 00:07:09,600
They are not original independent pieces of data.

115
00:07:09,810 --> 00:07:16,380
Rather, computed properties are a alternate representation or a piece of information that is dependent

116
00:07:16,380 --> 00:07:18,720
on some other piece of information throughout the app.

117
00:07:19,110 --> 00:07:23,700
So in this case, our computed property can be something like our area property.

118
00:07:23,880 --> 00:07:29,850
Instead of making it a piece of data, we can make it a computed property that changes any time, either

119
00:07:29,850 --> 00:07:30,870
width or height.

120
00:07:30,870 --> 00:07:37,530
Change view will keep track of those changes and automatically update area whenever we update either

121
00:07:37,530 --> 00:07:38,550
width or height.

122
00:07:38,700 --> 00:07:39,060
All right.

123
00:07:39,660 --> 00:07:42,420
So how can we make something like that happen technically?

124
00:07:42,420 --> 00:07:43,830
So here's what I'm going to do.

125
00:07:43,830 --> 00:07:51,360
I'm going to remove my area property from my data and right below my data I'm going to add my computed

126
00:07:51,360 --> 00:07:53,610
property to my view configuration object.

127
00:07:53,910 --> 00:07:56,310
So again, the computed name is not up to us.

128
00:07:56,310 --> 00:08:00,960
It is a built in name, much like data, much like methods, much like props.

129
00:08:00,960 --> 00:08:02,040
It has to be called this.

130
00:08:02,280 --> 00:08:04,950
So it is going to be a plain JavaScript object.

131
00:08:04,950 --> 00:08:07,740
And I'm going to add a comma here just so we don't have an error.

132
00:08:08,010 --> 00:08:15,570
And this works the exact same way as our methods object does in that we define methods in here, not

133
00:08:15,570 --> 00:08:17,130
properties, but methods.

134
00:08:17,370 --> 00:08:20,460
So I'm going to define a method called area.

135
00:08:21,420 --> 00:08:21,810
All right?

136
00:08:21,810 --> 00:08:29,130
So I'm going to do this and I'm going to provide the function body right here and in this area, method

137
00:08:29,130 --> 00:08:29,640
body.

138
00:08:29,700 --> 00:08:36,210
We have access to our data properties as well, just like we do in our methods down below.

139
00:08:36,510 --> 00:08:42,660
So all we have to do here is return some kind of evaluation, some kind of value can be a string can

140
00:08:42,660 --> 00:08:48,120
be a number, a boolean, an array, etc. It's kind of like a piece of data, but a piece of data that

141
00:08:48,120 --> 00:08:51,540
is computed or derived from another piece of data.

142
00:08:51,870 --> 00:08:58,620
So if I want to calculate the area, what I want to return is this dot with which I can access using

143
00:08:58,620 --> 00:09:02,160
the this keyword times, this dot height.

144
00:09:03,550 --> 00:09:03,910
All right.

145
00:09:04,210 --> 00:09:11,680
So what we do when we write a computed method in this case, in View's terminology, is Vue says, I'm

146
00:09:11,680 --> 00:09:15,280
going to keep track of anything you reference in the body of this method.

147
00:09:15,610 --> 00:09:19,420
So in this scenario, we are referencing the width and height data properties.

148
00:09:19,660 --> 00:09:27,790
So Vue knows that whenever either the width property or the height property update or both, but really

149
00:09:27,790 --> 00:09:34,450
just either one view will rerun the area method, whatever it's being used to get.

150
00:09:34,450 --> 00:09:36,610
The new calculation of area.

151
00:09:36,910 --> 00:09:43,390
And the beautiful part of this approach is we no longer need this logic and Line 30 view will handle

152
00:09:43,390 --> 00:09:44,860
this automatically for us.

153
00:09:45,130 --> 00:09:50,530
And now, irrespective of whether we change, whether height view knows, that area depends on those

154
00:09:50,530 --> 00:09:51,580
two pieces of information.

155
00:09:51,820 --> 00:09:57,670
And similarly, if we had six pieces of data here, view would know that any time any of those six values

156
00:09:57,670 --> 00:10:00,130
change, area should be updated.

157
00:10:00,340 --> 00:10:00,670
All right.

158
00:10:01,300 --> 00:10:05,230
Now, luckily, the syntax is not going to change in our templates.

159
00:10:05,230 --> 00:10:11,710
You'll see here we're using our a curly brace syntax, our interpolation syntax, which we've used previously

160
00:10:11,710 --> 00:10:12,590
for data properties.

161
00:10:12,760 --> 00:10:18,280
But we can treat our computed methods the exact same as our data properties.

162
00:10:18,430 --> 00:10:20,170
So right here we have area.

163
00:10:20,200 --> 00:10:22,200
Notice that I'm not invoking that method.

164
00:10:22,210 --> 00:10:25,630
I'm writing it as if it's a regular data property.

165
00:10:25,960 --> 00:10:32,710
The difference is, is that this is a dynamic computed value that will automatically update when anything

166
00:10:32,710 --> 00:10:33,400
here changes.

167
00:10:33,700 --> 00:10:35,850
So now I'm going to keep the code exactly as is.

168
00:10:35,860 --> 00:10:37,360
I'm going to go back to my browser.

169
00:10:37,570 --> 00:10:43,900
When I click this button, we're going to execute the double height method view will first update the

170
00:10:43,900 --> 00:10:49,510
height data attribute, which is independent, and then because the computed properties know to track

171
00:10:49,510 --> 00:10:54,010
the changes in height, it will automatically recalculate the value of area.

172
00:10:54,280 --> 00:10:59,800
And once those changes are done, view of course, will re render the canal and the new area will now

173
00:10:59,800 --> 00:11:01,690
appear in our template.

174
00:11:02,570 --> 00:11:02,770
Right.

175
00:11:02,770 --> 00:11:07,420
So we use it the exact same way as we do a data property, but it is a derived or dependent piece of

176
00:11:07,420 --> 00:11:07,750
data.

177
00:11:07,990 --> 00:11:13,750
So now if I go back to my browser, we're going to start off here with an area 50 and a height of 160.

178
00:11:13,750 --> 00:11:14,740
In fact, let me refresh.

179
00:11:14,740 --> 00:11:16,300
So we go back to our original values.

180
00:11:16,600 --> 00:11:21,000
So here we're going to have our height of five and our width of ten.

181
00:11:21,050 --> 00:11:24,340
You'll notice that Vue will calculate the initial value to be 50.

182
00:11:24,550 --> 00:11:27,310
And as I click this button one time, beautiful.

183
00:11:27,520 --> 00:11:32,620
Our height has been updated to ten, which means our computed property of area has been recalculated

184
00:11:32,620 --> 00:11:35,470
to be 100 and once again going to double my height.

185
00:11:35,710 --> 00:11:40,810
My height is now going to go to 20, 20 times ten is 200, an area becomes 200.

186
00:11:40,990 --> 00:11:46,930
And our template, which is rendering the area you can see right here is updating every single time

187
00:11:46,930 --> 00:11:48,550
I click the button.

188
00:11:48,910 --> 00:11:51,280
So that is the beautiful part about computed properties.

189
00:11:51,460 --> 00:11:56,770
They are re-evaluating or recalculating or re computing any time something changes.

190
00:11:57,460 --> 00:12:01,840
Another perfect use case of this in a real world is something like currency.

191
00:12:02,080 --> 00:12:06,840
You can imagine, for example, if we are storing a piece of data that represents some amount of money,

192
00:12:06,850 --> 00:12:12,550
let's say, you know, $2, but in sense, right, let's say we're storing our data in sense so we have

193
00:12:12,550 --> 00:12:13,270
200 cents.

194
00:12:13,600 --> 00:12:19,630
But let's say on the screen, we want to model an alternate representation of that data, such as a

195
00:12:19,630 --> 00:12:21,940
dollar amount for that amount of sense.

196
00:12:22,180 --> 00:12:27,100
While the dollar amount is not an independent piece of data, it's not a separate, distinct piece of

197
00:12:27,100 --> 00:12:27,670
information.

198
00:12:27,910 --> 00:12:34,240
Rather, it's an alternate representation or a derived representation from an actual piece of data.

199
00:12:34,360 --> 00:12:36,190
That piece of data being the number of sets.

200
00:12:36,400 --> 00:12:42,160
So we do not want to create a duplicate copy of that data, just an alternate representation of it,

201
00:12:42,310 --> 00:12:44,530
because then we have to track two pieces of data.

202
00:12:44,710 --> 00:12:49,090
And in any time one of them changes, we have to change the other one, rather, that is a perfect use

203
00:12:49,090 --> 00:12:49,300
case.

204
00:12:49,300 --> 00:12:54,760
To use something like a computed property, we can keep a piece of data that tracks the sense and we

205
00:12:54,760 --> 00:13:00,280
can make a computed property that represents that amount of sense in dollars because that piece of data

206
00:13:00,280 --> 00:13:05,950
is not duplicated, then it is simply recalculated or re derived from the original piece of data.

207
00:13:06,160 --> 00:13:08,590
So that is when we use computed in view.

208
00:13:08,800 --> 00:13:12,580
It's very similar to data because we can do the same things with it.

209
00:13:12,580 --> 00:13:15,370
We can put it in our template visually.

210
00:13:15,370 --> 00:13:19,090
We can use it to bind to a attribute using something like the bind.

211
00:13:19,180 --> 00:13:24,730
We use it the exact same way as we use data, but the difference is when we use it, we use computed

212
00:13:24,730 --> 00:13:28,990
when the data is not independent, when it is derived from something else.

213
00:13:29,200 --> 00:13:29,430
All right.

214
00:13:29,620 --> 00:13:31,300
So hopefully that's a good explanation.

215
00:13:31,300 --> 00:13:35,740
And in the very next lesson, we're going to see how we can use the computer property to deal with our

216
00:13:35,740 --> 00:13:37,940
access costs for our original button.
