WEBVTT
1
00:00:00.460 --> 00:00:04.750
All right, so here I am, back in the job listings component.

2
00:00:04.930 --> 00:00:10.420
And the next thing that I want to move to a composable function is this logic right here, the logic

3
00:00:10.420 --> 00:00:16.840
that talks to the View store and then also dispatches the asynchronous action to fetch the jobs to make

4
00:00:16.840 --> 00:00:18.430
the API call to our back.

5
00:00:18.910 --> 00:00:24.310
So right now, this is the only component in our app that is making that request to get those jobs.

6
00:00:24.550 --> 00:00:29.620
And you could argue that keeping this code in here is okay for now because no other component needs

7
00:00:29.620 --> 00:00:30.130
to use this.

8
00:00:30.430 --> 00:00:35.590
But again, we don't just get the benefits of reusability when we move this logic to composable functions,

9
00:00:35.800 --> 00:00:39.490
we also get the benefits of breaking up logic into smaller pieces.

10
00:00:39.730 --> 00:00:46.390
So even though it's only has one use case right now, we don't need to repeat this logic and do it in

11
00:00:46.390 --> 00:00:47.180
any other component.

12
00:00:47.200 --> 00:00:51.400
I still think that can be a benefit to moving this logic to its own composable function.

13
00:00:51.610 --> 00:00:54.490
It's also going to enable us to have simpler tests up ahead.

14
00:00:54.850 --> 00:00:57.550
So let's move these two lines to a new composable function.

15
00:00:57.850 --> 00:01:00.750
So I'm going to open up composable.

16
00:01:02.260 --> 00:01:05.620
And right here, what I'm going to do is add a another function down here.

17
00:01:05.890 --> 00:01:10.510
I kind of want to differentiate the functions that I have up above from the one that I'm going to add,

18
00:01:10.720 --> 00:01:16.390
because these functions are all specifically related to the getters in view while this new one is related

19
00:01:16.390 --> 00:01:17.890
to actions.

20
00:01:18.190 --> 00:01:19.570
So let me drag this to the right.

21
00:01:19.940 --> 00:01:24.460
And one simple way to do that is I'm simply going to create a little comment here that says Getters.

22
00:01:26.140 --> 00:01:31.660
And down below, I'm going to create a separate section for actions just so the arrow functions don't

23
00:01:31.660 --> 00:01:35.620
become clumped up with each other, and it becomes too hard to figure out kind of the category that

24
00:01:35.620 --> 00:01:36.220
they belong to.

25
00:01:36.730 --> 00:01:37.000
All right.

26
00:01:37.000 --> 00:01:43.390
So what I'm going to define here is a new arrow function, and I'll call it use fetch jobs dispatch.

27
00:01:43.390 --> 00:01:46.120
I don't know if there's a better name, but that kind of makes sense.

28
00:01:47.840 --> 00:01:49.010
And what am I going to do here?

29
00:01:49.160 --> 00:01:52.580
I'm going to basically copy the logic I have right here.

30
00:01:52.610 --> 00:01:54.860
So let me copy lines 54 to 55.

31
00:01:55.370 --> 00:01:57.380
I'm going to put it right here.

32
00:01:58.070 --> 00:02:01.230
So we already have you story imported right here.

33
00:02:01.250 --> 00:02:11.330
Fetch jobs is a is a function that returns the invocation of the dispatch method being invoked and store.

34
00:02:11.600 --> 00:02:16.580
So what I'm going to do here is I'm just simply going to invoke store dispatch on its own.

35
00:02:16.970 --> 00:02:20.520
Now, in order for this to work, we need the fetch jobs constant in this file.

36
00:02:20.540 --> 00:02:22.700
So if I scroll up here, I'm going to need to import it.

37
00:02:22.700 --> 00:02:25.820
And it's coming from this file constants in the store directory.

38
00:02:26.150 --> 00:02:27.740
So right here, I'm going to do fetch jobs.

39
00:02:28.820 --> 00:02:33.950
And so this composable is not going to return any kind of value.

40
00:02:34.610 --> 00:02:38.630
Technically, in JavaScript terms, it's going to return undefined behind the scenes, but it doesn't

41
00:02:38.630 --> 00:02:43.610
need to return any value because the whole intent of us using this function eventually is to pass it

42
00:02:43.610 --> 00:02:48.920
in here to on mounted and have on mounted, invoke it, trigger the action to fetch the API jobs.

43
00:02:49.070 --> 00:02:53.630
We don't actually need the jobs in our actual response or anything like that because remember, it's

44
00:02:53.630 --> 00:02:57.860
going to live in the future store once the API responds completes and then we're going to be able to

45
00:02:57.860 --> 00:03:00.530
access those jobs using, for example, our getters, right?

46
00:03:00.800 --> 00:03:02.080
So this is just the function.

47
00:03:02.090 --> 00:03:03.890
It's going to kick everything off, right?

48
00:03:04.340 --> 00:03:08.810
So let's create immediately a test for this new composable.

49
00:03:09.170 --> 00:03:13.490
So right here, I'm going to open up my composable test that she has found.

50
00:03:15.000 --> 00:03:20.640
Drag it over here to the right and let's import a new function which is called Use Fetch Jobs Dispatch.

51
00:03:21.090 --> 00:03:23.880
And on the bottom here, let's describe a new section for it.

52
00:03:24.330 --> 00:03:24.970
It's right here.

53
00:03:24.990 --> 00:03:25.800
Describe.

54
00:03:26.340 --> 00:03:26.840
Use.

55
00:03:26.940 --> 00:03:28.020
Fetch jobs.

56
00:03:28.020 --> 00:03:28.740
Dispatch.

57
00:03:30.880 --> 00:03:34.750
All right, so our new function is using the use store function.

58
00:03:34.750 --> 00:03:36.220
So that's how we're going to need to mark out.

59
00:03:36.580 --> 00:03:39.280
So right here, let's make sure we have an it call.

60
00:03:39.550 --> 00:03:43.510
It sends call to fetch jobs from API.

61
00:03:43.520 --> 00:03:45.550
Seems like a good description in here.

62
00:03:45.550 --> 00:03:46.690
We can set up our mark.

63
00:03:46.960 --> 00:03:53.140
So I want to take you store which is already imported above and mocked out above as well so I can mock

64
00:03:53.140 --> 00:03:58.360
return value and I know that I'm going to need to have dispatch on the object that I return, because

65
00:03:58.360 --> 00:04:00.970
that's what I'm invoking right here on the store right here.

66
00:04:01.360 --> 00:04:05.950
So dispatch is something I need to keep track of, because what I really want to worry about in this

67
00:04:05.950 --> 00:04:10.060
action is that I call the dispatch method with the right argument of fetch jobs.

68
00:04:10.330 --> 00:04:16.090
So what I'm going to do here is define dispatch as a constant in line, as a just mock function that's

69
00:04:16.090 --> 00:04:18.340
going to allow me to track how many times it's been invoked.

70
00:04:19.210 --> 00:04:24.280
And so down below, I'm going to simply invoke my new composable function to use fetch job's dispatch.

71
00:04:24.520 --> 00:04:28.540
And after that function is done running, I'm going to expect that dispatch.

72
00:04:29.730 --> 00:04:32.640
Was invoked and invoked with the right argument.

73
00:04:32.940 --> 00:04:37.650
So for that, remember, there is a matter to have been called with.

74
00:04:39.580 --> 00:04:40.210
It's right here.

75
00:04:40.210 --> 00:04:41.800
And what string do I expect it to get?

76
00:04:42.040 --> 00:04:43.150
Fetch jobs.

77
00:04:43.870 --> 00:04:45.330
So this is going to verify two things.

78
00:04:45.340 --> 00:04:51.580
Number one, that this mock function that is returned by the used store object or in the use or object,

79
00:04:51.790 --> 00:04:53.670
that that function has been invoked.

80
00:04:53.680 --> 00:04:54.730
We're verifying that.

81
00:04:54.730 --> 00:04:58.240
And number two, we're verifying that it's been invoked with the right arguments.

82
00:04:58.480 --> 00:04:59.890
So we're basically testing right here.

83
00:04:59.890 --> 00:05:01.450
Is this logic in line 30?

84
00:05:01.600 --> 00:05:03.790
This logic in line 29 is kind of necessary.

85
00:05:03.790 --> 00:05:05.950
So that's why we need to prepare for it.

86
00:05:06.130 --> 00:05:09.610
But it doesn't actually have any of our own special business logic to our app.

87
00:05:09.790 --> 00:05:12.350
The core heart of this function right here is line number three.

88
00:05:12.810 --> 00:05:17.350
All right, so if I scroll up, it looks like actually we are getting a passing test.

89
00:05:17.350 --> 00:05:21.640
We in composable is that test that yes, the reason we still have failing test weights is because they're

90
00:05:21.640 --> 00:05:23.500
coming from the job listings component.

91
00:05:23.740 --> 00:05:24.640
That's totally fine.

92
00:05:24.640 --> 00:05:25.810
We'll fix those in a lesson or two.

93
00:05:25.960 --> 00:05:27.430
This test is passing.

94
00:05:27.700 --> 00:05:31.630
So with that we are good to add this composable to our job listings component.

95
00:05:32.530 --> 00:05:35.230
So let's import our new composable.

96
00:05:35.650 --> 00:05:36.220
So.

97
00:05:36.730 --> 00:05:39.700
Right, let's see if we have a thing here.

98
00:05:39.700 --> 00:05:39.940
Yes.

99
00:05:39.940 --> 00:05:43.210
So we already have an import from the store composable file on the right.

100
00:05:43.450 --> 00:05:44.890
So here I can add another one.

101
00:05:45.160 --> 00:05:48.430
Use fetch jobs dispatch and then down below.

102
00:05:48.670 --> 00:05:49.900
What does that allow me to do?

103
00:05:49.900 --> 00:05:52.030
Do I need this store anymore?

104
00:05:52.030 --> 00:05:52.480
No.

105
00:05:52.480 --> 00:05:55.690
The only reason this store exists is to be used in fetch jobs below.

106
00:05:55.930 --> 00:06:01.270
The only reason we have such jobs is to have an uninvolved function that we pass to the on mounted function

107
00:06:01.420 --> 00:06:02.200
from view.

108
00:06:02.260 --> 00:06:04.840
Remember, this is the function that's going to run when the component mounts.

109
00:06:05.050 --> 00:06:07.780
But now we don't want the component to run fetch jobs.

110
00:06:07.930 --> 00:06:11.320
We want the component to run our new use, fetch jobs, dispatch function.

111
00:06:11.560 --> 00:06:12.940
So right here we have an imported.

112
00:06:12.940 --> 00:06:14.470
I'm going to provide it as an argument.

113
00:06:14.650 --> 00:06:16.180
Remember, do not invoke it.

114
00:06:16.180 --> 00:06:17.200
So no parentheses.

115
00:06:17.320 --> 00:06:22.270
We're simply providing the function or in other words, the recipe or procedure that we want view to

116
00:06:22.270 --> 00:06:23.500
run for us when it mounts.

117
00:06:23.770 --> 00:06:27.520
So when view mounts job listings, it's going to run, use, fetch, jobs, dispatch.

118
00:06:27.850 --> 00:06:29.290
That function will run right here.

119
00:06:29.290 --> 00:06:34.810
That function will talk to the U.S. store and dispatch and action which will take care of the API request.

120
00:06:35.230 --> 00:06:35.470
All right.

121
00:06:35.470 --> 00:06:39.280
So with that, we can remove this form or two lines up here.

122
00:06:39.280 --> 00:06:40.630
We can remove fetch jobs.

123
00:06:40.630 --> 00:06:45.880
We no longer need that constant because we now have that constant right here in the file where it matters.

124
00:06:46.150 --> 00:06:46.720
Remove this.

125
00:06:46.900 --> 00:06:51.550
And because we're no longer using our store anywhere as well, we can simply remove it in this file

126
00:06:51.550 --> 00:06:52.240
import as well.

127
00:06:52.540 --> 00:06:57.490
Our store is obviously being used but is being used across all of these other composable functions that

128
00:06:57.490 --> 00:06:59.980
the jobless component itself is relying on.

129
00:07:00.370 --> 00:07:00.760
All right.

130
00:07:00.760 --> 00:07:04.930
So obviously, you can see the filter or the setup method has gotten significantly easier.

131
00:07:04.930 --> 00:07:09.220
It's kind of delegated responsibilities in different sections, but we still have a whole bunch of failing

132
00:07:09.220 --> 00:07:09.550
tests.

133
00:07:09.730 --> 00:07:11.890
So let's go ahead and fix those in the very next lesson.
