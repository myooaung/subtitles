WEBVTT
1
00:00:00.500 --> 00:00:01.400
All right.

2
00:00:01.400 --> 00:00:06.920
So let's introduce a solution to the problem we encountered in the previous lesson, the problem of

3
00:00:06.920 --> 00:00:12.110
the structuring properties of a reactive object and getting the original primitive values.

4
00:00:12.410 --> 00:00:17.180
The first additional function that I'd like to introduce you to is called to ref.

5
00:00:17.450 --> 00:00:19.490
So let's go ahead and import it right here.

6
00:00:19.490 --> 00:00:21.380
I'm going to import to ref.

7
00:00:22.010 --> 00:00:26.870
Now, this name might be kind of familiar to you because you may recall we started off this section

8
00:00:26.870 --> 00:00:28.640
with the ref function.

9
00:00:28.790 --> 00:00:34.970
And what that does is it takes a primitive value or any value for that matter, such as a string or

10
00:00:34.970 --> 00:00:40.610
a number, and it wraps it in a reactive object and makes that value accessible through the value property.

11
00:00:40.910 --> 00:00:43.400
So what two ref does for us is something very similar.

12
00:00:43.520 --> 00:00:50.330
It creates a similar a reactive object, but its whole purpose is exactly for these kinds of situations

13
00:00:50.330 --> 00:00:54.920
when we want to make a reactive property from a reactive object.

14
00:00:55.130 --> 00:01:00.770
So our original source is a reactive object and we want to make just one of its properties reactive

15
00:01:00.890 --> 00:01:02.510
so then we can use it by itself.

16
00:01:02.750 --> 00:01:05.030
That's when we use the two ref function.

17
00:01:05.300 --> 00:01:08.990
So unfortunately we will not be able to use the regular destruction syntax.

18
00:01:09.140 --> 00:01:14.270
But we can get something like this in our program where we have first name and lasting values available

19
00:01:14.390 --> 00:01:17.120
that will come from a reactive object of person.

20
00:01:17.360 --> 00:01:21.020
So I'm going to remove this line right here and then we're going to try to emulate it.

21
00:01:21.320 --> 00:01:26.870
So I'm going to have a constant called first name and we're going to use the two ref function.

22
00:01:27.260 --> 00:01:30.650
The first argument is going to be a reactive object.

23
00:01:30.980 --> 00:01:37.490
Okay, so we have a reactive object available in our person constant that is returned to us by our reactive

24
00:01:37.490 --> 00:01:37.970
function.

25
00:01:37.970 --> 00:01:41.120
So I'm simply going to pass in the whole object of person.

26
00:01:41.630 --> 00:01:48.590
The second argument is going to be a string representing the property that we want to take off that

27
00:01:48.590 --> 00:01:50.030
object and make reactive.

28
00:01:50.240 --> 00:01:53.210
So I'm going to provide a string of first name.

29
00:01:53.780 --> 00:01:54.200
Okay.

30
00:01:54.410 --> 00:02:00.920
So what this is going to do is equivalent to taking first name right here and wrapping it in a ref.

31
00:02:02.070 --> 00:02:02.430
Right.

32
00:02:02.430 --> 00:02:05.280
It's taking that property and making it reactive.

33
00:02:05.550 --> 00:02:05.790
Right.

34
00:02:05.790 --> 00:02:07.680
So this is now a reactive object.

35
00:02:07.890 --> 00:02:08.370
Who's that?

36
00:02:08.370 --> 00:02:12.690
Who's storing a value of first name from the reactive person object?

37
00:02:12.900 --> 00:02:16.490
I'm going to repeat the syntax down below for my last name property.

38
00:02:16.500 --> 00:02:17.340
Same syntax.

39
00:02:17.340 --> 00:02:18.270
So last name.

40
00:02:18.480 --> 00:02:20.760
We're going to invoke the two raft function.

41
00:02:20.940 --> 00:02:23.400
The first argument is a reactive object.

42
00:02:23.550 --> 00:02:25.380
We only have one right now, which is person.

43
00:02:25.530 --> 00:02:29.970
The second argument is the property that I want to take from that object and make reactive.

44
00:02:30.150 --> 00:02:32.730
I want to target the last thing property this time around.

45
00:02:33.150 --> 00:02:37.500
Now, when I run this, you might think this is going to work because now we have first name assigned

46
00:02:37.500 --> 00:02:39.720
and we have last name assigned and we're using it here.

47
00:02:39.870 --> 00:02:41.960
But we're actually going to get a little bit of a surprise.

48
00:02:41.970 --> 00:02:44.130
So let's take a look at what happens when I run this file.

49
00:02:45.000 --> 00:02:45.750
Here we go.

50
00:02:47.010 --> 00:02:47.640
Interesting.

51
00:02:47.640 --> 00:02:49.980
We get object, object, object, object.

52
00:02:49.980 --> 00:02:51.660
The great what is going on here?

53
00:02:51.990 --> 00:02:57.120
While remember what to ref does is it returns a regular view reactive object.

54
00:02:57.360 --> 00:03:00.390
So this is not some kind of magic reactive string.

55
00:03:00.660 --> 00:03:06.240
It is that familiar object that we've talked about before that has a value property equal to whatever

56
00:03:06.240 --> 00:03:07.950
first name was, which was Burrus.

57
00:03:08.190 --> 00:03:12.660
And yes, this object will update whenever, for example, this object updates.

58
00:03:12.840 --> 00:03:17.100
However, it's still going to store that change in a value property.

59
00:03:17.310 --> 00:03:22.650
What we are referencing here in first name now is not that reactive string that's stored internally,

60
00:03:22.800 --> 00:03:27.750
but the complete object that is the kind of wrapper around that core value.

61
00:03:27.990 --> 00:03:34.140
So once again, just like when we used our ref function in the early lessons of the section, we have

62
00:03:34.140 --> 00:03:37.950
to reference first name dot value and last name dot value.

63
00:03:39.120 --> 00:03:39.540
All right.

64
00:03:39.540 --> 00:03:42.090
So now we created a reactive object.

65
00:03:42.180 --> 00:03:46.860
We were able to get references to its to its properties and make them reactive using the two ref function

66
00:03:46.980 --> 00:03:53.160
that created its own separate, smaller reactive objects that we now can reference right here and notice

67
00:03:53.160 --> 00:03:53.970
what we're going to do here.

68
00:03:54.120 --> 00:03:56.970
We're going to change a property on person.

69
00:03:57.000 --> 00:03:58.350
That's this reactive object.

70
00:03:58.530 --> 00:04:05.430
However, this creates a connection or a reactivity to that original person object so that when we change

71
00:04:05.430 --> 00:04:08.280
this, this will immediately update.

72
00:04:08.460 --> 00:04:13.890
And thus the computed function right here, which is looking at first name, which now is a reactive

73
00:04:13.890 --> 00:04:15.390
object, will also update.

74
00:04:15.540 --> 00:04:18.150
So now we should get back to normal code.

75
00:04:18.150 --> 00:04:20.850
So when I run this, we are indeed going to see Boris pass.

76
00:04:20.850 --> 00:04:22.290
Give her the Napoleon Pass.

77
00:04:22.290 --> 00:04:23.610
Give her the Napoleon Griffin.

78
00:04:23.610 --> 00:04:23.910
Right.

79
00:04:24.180 --> 00:04:27.390
So once again, we're changing properties on our original reactive object.

80
00:04:28.110 --> 00:04:34.080
We used to have to maintain a reference to a property on a reactive object.

81
00:04:34.200 --> 00:04:36.720
Keep in mind this returns its own reactive objects.

82
00:04:37.440 --> 00:04:41.730
And then because we have these objects now, we can't just reference first thing and last name.

83
00:04:41.910 --> 00:04:49.590
We have to use dot value on those reactive objects to properly get that reactive value and tell you

84
00:04:49.590 --> 00:04:50.220
to track it.

85
00:04:50.230 --> 00:04:50.490
Right?

86
00:04:50.790 --> 00:04:56.550
So this is the solution to working with these structuring properties from a reactive object.

87
00:04:56.670 --> 00:05:01.050
We're going to take a look at a slightly more elegant solution to this problem in the very next lesson.
