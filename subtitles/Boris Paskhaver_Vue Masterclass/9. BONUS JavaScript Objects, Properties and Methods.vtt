WEBVTT
1
00:00:00.210 --> 00:00:01.170
All right.

2
00:00:01.170 --> 00:00:08.550
In this optional bonus lesson, I want to do a quick review of JavaScript objects, properties and methods.

3
00:00:08.820 --> 00:00:13.560
If you are comfortable with these ideas, you can skip this lesson and move on to the next one.

4
00:00:13.860 --> 00:00:20.160
So as you may recall, we do have a playground JS file in our view project and this is where we're going

5
00:00:20.160 --> 00:00:26.250
to experiment with various JavaScript and view concepts throughout the course whenever we just need

6
00:00:26.250 --> 00:00:28.980
a scratch pad or a playground to play with.

7
00:00:28.980 --> 00:00:30.770
So go ahead and open up playground.

8
00:00:31.050 --> 00:00:33.840
Yes, you may have some content in it for a previous lesson.

9
00:00:34.080 --> 00:00:36.060
In that case, you can feel free to delete it.

10
00:00:36.060 --> 00:00:36.690
We don't need it.

11
00:00:37.140 --> 00:00:42.180
And of course, in order to run this JavaScript file, I'm going to need to use the node runtime environment

12
00:00:42.180 --> 00:00:44.100
and I can do so from my terminal.

13
00:00:44.370 --> 00:00:49.800
So what I'm going to do here is go to terminal, new terminal in V code that's going to open up my terminal

14
00:00:49.800 --> 00:00:54.420
on the right hand side, and I'll be able to run the file momentarily with Node here.

15
00:00:54.870 --> 00:00:55.140
All right.

16
00:00:55.140 --> 00:00:57.600
So let's talk quickly about JavaScript objects.

17
00:00:57.600 --> 00:01:04.170
A object in JavaScript is called a hash map in other languages or a dictionary in other languages.

18
00:01:04.530 --> 00:01:06.030
It all represents the same idea.

19
00:01:06.180 --> 00:01:11.340
It's a data structure, and its purpose is to associate keys with values.

20
00:01:11.700 --> 00:01:17.370
A key is basically an identifier, something that serves as a name for a corresponding value.

21
00:01:17.610 --> 00:01:22.080
So for example, let's say we're trying to model a real world developer like you and me.

22
00:01:22.320 --> 00:01:27.600
I can declare a constant called developer, and I could set it equal to a JavaScript object using the

23
00:01:28.140 --> 00:01:28.860
curly braces.

24
00:01:28.860 --> 00:01:30.330
This creates an empty object.

25
00:01:30.510 --> 00:01:37.110
Right now it has no properties and values, or equivalently no key value pairs, but I can start to

26
00:01:37.110 --> 00:01:39.780
create them within the confines of these curly braces.

27
00:01:40.020 --> 00:01:46.020
For example, I can say that our developer has a salary of 100,000.

28
00:01:46.800 --> 00:01:49.050
So in this case we have one key value pair.

29
00:01:49.440 --> 00:01:56.430
The key or the property is called salary, and it is associated with a corresponding value of 100,000.

30
00:01:56.610 --> 00:02:02.220
So we use these key value pairs to provide information about this developer object, right?

31
00:02:02.730 --> 00:02:08.310
The keys must be unique so we cannot have another salary, property or key within developer.

32
00:02:08.580 --> 00:02:10.920
But the values can be duplicates.

33
00:02:10.920 --> 00:02:16.140
So we can have another thing here, like, you know, income or something set to 100,000 as well.

34
00:02:16.140 --> 00:02:21.990
There's no requirement for uniqueness on values, but there is a requirement for uniqueness among the

35
00:02:21.990 --> 00:02:27.840
properties or the keys because they are, again, identifiers for some kind of internal state about

36
00:02:27.840 --> 00:02:28.500
the object.

37
00:02:28.800 --> 00:02:34.800
So I'm going to remove my income and I'm going to write some additional key value pairs or equivalently

38
00:02:34.800 --> 00:02:35.820
properties in here.

39
00:02:36.090 --> 00:02:41.190
So for example, our developer may have an experienced level which can be represented in years and I

40
00:02:41.190 --> 00:02:43.320
can make that year a floating point value.

41
00:02:43.320 --> 00:02:46.140
So maybe they have 4.5 years of experience.

42
00:02:46.380 --> 00:02:52.020
And you'll notice that what I've done here is separate every two key value pairs with a comma that is

43
00:02:52.020 --> 00:02:53.400
a critical necessity.

44
00:02:53.610 --> 00:02:59.850
This last comma right here is actually not necessary because there is no extra key value pair after

45
00:02:59.850 --> 00:03:00.150
line.

46
00:03:00.150 --> 00:03:00.660
There were three.

47
00:03:00.810 --> 00:03:04.710
However, this is acceptable syntax and prettier actually prefers it.

48
00:03:04.710 --> 00:03:09.450
It ensures consistency and actually makes it a little bit easier for your version control system.

49
00:03:09.450 --> 00:03:14.490
Like get to figure out which line was added in a new commit.

50
00:03:14.490 --> 00:03:19.530
It's a little bit more of a separate technical topic, but the point is we always need commas separate

51
00:03:19.560 --> 00:03:20.400
in key value pairs.

52
00:03:20.490 --> 00:03:24.960
And if you want to place them after every key value pair, that will guarantee that you've accomplished

53
00:03:24.960 --> 00:03:25.290
that.

54
00:03:25.590 --> 00:03:25.890
All right.

55
00:03:26.130 --> 00:03:28.620
So we have a key set to a integer.

56
00:03:28.620 --> 00:03:31.200
We have a key set to a floating point value.

57
00:03:31.200 --> 00:03:34.200
We can provide any kind of value that we want, however.

58
00:03:34.440 --> 00:03:38.100
So, for example, our developer may have a tech stack that they feel comfortable with.

59
00:03:38.400 --> 00:03:43.410
So I'm going to write that tech stack property with camel case, meaning the T is going to be lowercase

60
00:03:43.410 --> 00:03:44.880
and the S is going to be capital.

61
00:03:45.060 --> 00:03:46.560
That is convention in JavaScript.

62
00:03:46.560 --> 00:03:51.930
Whenever you have two words in a property name and here I'm going to set the value equal to an array.

63
00:03:52.200 --> 00:03:58.410
And let's say our developer is knowledgeable of course in view maybe HTML and CSS as well.

64
00:03:59.250 --> 00:04:01.470
And one more property value.

65
00:04:01.470 --> 00:04:04.440
Let's say we have a property called Looking for work.

66
00:04:06.190 --> 00:04:10.690
Like so and we're going to set that to a boolean of true and I'm going to say this again and prettier

67
00:04:10.690 --> 00:04:12.850
is going to automatically populate our commas.

68
00:04:13.180 --> 00:04:17.650
So this is an example of an object with four properties or four key value pairs.

69
00:04:17.800 --> 00:04:23.020
Again, each one provides some kind of information about the developer and this is how we can model

70
00:04:23.020 --> 00:04:28.090
real world ideas within the confines of a programming language like JavaScript.

71
00:04:28.090 --> 00:04:33.970
We can make the construct of a developer exist in JavaScript because JavaScript doesn't know what a

72
00:04:33.970 --> 00:04:37.090
developer is, it only knows what integers and arrays are.

73
00:04:37.240 --> 00:04:43.180
But now we have this kind of real world idea that we can model in this language by telling JavaScript

74
00:04:43.180 --> 00:04:44.950
everything that a developer entails.

75
00:04:44.950 --> 00:04:49.420
They have a salary, they have experience, they have a tech stack and a status of looking for work.

76
00:04:49.570 --> 00:04:54.550
All right, so what I can do is console.log in here to output anything to my terminal.

77
00:04:54.700 --> 00:04:56.920
And we could take a look at the entire developer object.

78
00:04:56.920 --> 00:04:59.590
So let me just console.log the developer object.

79
00:04:59.590 --> 00:05:05.680
And right here in my terminal in this code I can run node followed by the file that I want to run,

80
00:05:05.680 --> 00:05:09.940
which of course is inside my source directory and it's called Playground Dot.

81
00:05:09.990 --> 00:05:13.810
J.S. went around that we're going to see our object output on the right hand side.

82
00:05:14.110 --> 00:05:21.430
What I can also do is access any specific property on my object by using dot syntax so I can write a

83
00:05:21.430 --> 00:05:26.650
dot after developer and then select whatever key I want to locate inside that object.

84
00:05:26.890 --> 00:05:32.830
So for example, if I want to find out the value of the salary key or the salary property, if I rerun

85
00:05:32.830 --> 00:05:38.920
this on the right hand side, we're going to access that key, that identifier, that name, and that

86
00:05:38.920 --> 00:05:43.960
value for salary is going to be 100,000, which we're going to output and see right here on the right

87
00:05:43.960 --> 00:05:44.500
hand side.

88
00:05:44.710 --> 00:05:49.840
As another example, if I want to find out what my developer's tech stack is, I can just write in dot

89
00:05:49.930 --> 00:05:52.300
tech, stack dot followed by the property.

90
00:05:52.450 --> 00:05:56.800
And on the right hand side, we're going to see the value for that property output.

91
00:05:56.950 --> 00:06:00.880
That is, of course, an array of view to mount and access.

92
00:06:01.270 --> 00:06:05.470
Okay, one more thing that I want to cover, which is methods.

93
00:06:05.740 --> 00:06:12.550
So the properties that we have here comprise the object's state, which means its internal data, the

94
00:06:12.550 --> 00:06:15.850
internal details or characteristics that it needs to keep track of.

95
00:06:16.150 --> 00:06:18.610
Now that data can change over time.

96
00:06:18.790 --> 00:06:25.240
For example, when our developer gets a new job, we can imagine that their salary will double and perhaps

97
00:06:25.240 --> 00:06:26.140
they're looking for work.

98
00:06:26.140 --> 00:06:27.850
Status will now be false.

99
00:06:27.850 --> 00:06:29.710
They will no longer be in the job market.

100
00:06:29.950 --> 00:06:35.980
So what we can do is define a method and a method is effectively like a function that belongs to an

101
00:06:35.980 --> 00:06:36.460
object.

102
00:06:36.460 --> 00:06:44.350
It's a command or a behavior that we can give to the object that may change some of its internal state.

103
00:06:44.350 --> 00:06:49.180
And the reason I want to introduce methods is because they have a different syntax than regular properties

104
00:06:49.180 --> 00:06:55.000
do any index and we're going to be using methods a lot when we construct the view configuration objects

105
00:06:55.210 --> 00:06:56.320
for our components.

106
00:06:56.620 --> 00:07:00.520
So what I'm going to do here is define a method that's going to do as described.

107
00:07:00.520 --> 00:07:06.370
It's going to double the salary and it's going to flip the looking for work flag.

108
00:07:06.550 --> 00:07:08.740
So it's going to call this method double salary.

109
00:07:09.730 --> 00:07:15.070
And the way this works in modern ESX is we can write the name of the method, then a pair of parentheses

110
00:07:15.070 --> 00:07:19.060
in which we can put any potential arguments that this method will receive.

111
00:07:19.060 --> 00:07:23.740
And arguments are operate the exact same way they do to a plain JavaScript function.

112
00:07:23.920 --> 00:07:26.140
In this case, we don't need to provide any kind of arguments.

113
00:07:26.390 --> 00:07:30.400
Then we provide our method body, which operates just like a function body.

114
00:07:30.820 --> 00:07:37.330
So within here we can't just write salary like so, because within the confines of this method, JavaScript

115
00:07:37.330 --> 00:07:38.980
doesn't know what salary means.

116
00:07:38.980 --> 00:07:42.610
It's not a defined variable, it's not a defined constant.

117
00:07:42.790 --> 00:07:49.360
We need to reference the salary that is available within this developer object in which our double salary

118
00:07:49.360 --> 00:07:50.410
method is defined.

119
00:07:50.710 --> 00:07:55.990
The way we can reference any of these external properties right here is by using a special keyword in

120
00:07:55.990 --> 00:07:57.880
JavaScript called this.

121
00:07:58.270 --> 00:08:02.970
So you can almost think of this within the confines of this developer object as being equivalent to

122
00:08:02.990 --> 00:08:11.050
developer right here, but within the constructs or confines or kind of walled in world of developer,

123
00:08:11.050 --> 00:08:11.320
right?

124
00:08:11.320 --> 00:08:16.720
Because at this point JavaScript needs to define what developer is and we need to reference ourselves,

125
00:08:16.780 --> 00:08:20.590
this object that we are in and that is represented of course by this.

126
00:08:20.800 --> 00:08:23.470
So this developer object, what do I want to do?

127
00:08:23.590 --> 00:08:27.190
I want to get the salary property on it.

128
00:08:27.610 --> 00:08:28.210
All right.

129
00:08:28.300 --> 00:08:30.640
What do I want to do with this salary property?

130
00:08:30.640 --> 00:08:32.860
I of course, I'm going to get 100,000 here.

131
00:08:32.860 --> 00:08:36.370
I want to double it so I can multiply it by two and by itself.

132
00:08:36.370 --> 00:08:43.030
This is going to give us a value of 200,000, but we have not yet overridden our internal salary state.

133
00:08:43.030 --> 00:08:47.890
So we have performed a mathematical calculation, but we haven't changed anything about the developer.

134
00:08:48.130 --> 00:08:53.320
So what we need to do is overwrite the value of our salary property and the way we can do that is by

135
00:08:53.320 --> 00:08:57.940
writing it on the left hand side, this, that salary and then providing an equal sign.

136
00:08:58.780 --> 00:09:01.300
And this is totally valid syntax in JavaScript.

137
00:09:01.540 --> 00:09:05.370
The way it works, in case you're confused, is always evaluate the rights.

138
00:09:05.450 --> 00:09:07.400
Side of an equal sign first.

139
00:09:07.610 --> 00:09:12.530
So when JavaScript looks at this code and evaluates the right side first, it says, What is my current

140
00:09:12.530 --> 00:09:15.110
value of salary and is 100,000?

141
00:09:15.230 --> 00:09:20.180
I'm going to multiply it by two to get 200,000, and then I'm going to set this that salary equal to

142
00:09:20.180 --> 00:09:21.170
200,000.

143
00:09:21.530 --> 00:09:29.030
So the salary will be set to 200,000, but only after we run the double salary method, the object will

144
00:09:29.030 --> 00:09:36.080
start off with a salary of 100,000 and then it's going to double that when we run this method.

145
00:09:36.080 --> 00:09:40.370
And if we run it again, then it's going to double it one more time to 400,000 and so on.

146
00:09:40.610 --> 00:09:44.060
And of course, what I also want to do here is flip my looking for work flag.

147
00:09:44.210 --> 00:09:45.980
It's going to be the exact same syntax.

148
00:09:46.160 --> 00:09:48.050
I can reference this object with this.

149
00:09:48.290 --> 00:09:53.780
The property that I want to change is looking for work and of course I want to flip that to now be a

150
00:09:53.780 --> 00:09:56.060
false because our developer has found a job.

151
00:09:56.440 --> 00:09:58.400
So let's take a look at how this works in action.

152
00:09:58.400 --> 00:10:03.080
So what I'm going to do first is output the value of salary, and then I'm going to output the value

153
00:10:03.080 --> 00:10:06.620
of looking for work when it was going to run this file from scratch.

154
00:10:06.620 --> 00:10:11.180
So we can see they are indeed 100,000 and true, as is expected.

155
00:10:11.360 --> 00:10:20.210
When the object starts out, then what I want to do is invoke or call or run or execute my method called

156
00:10:20.210 --> 00:10:21.080
double salary.

157
00:10:21.260 --> 00:10:23.090
So how do I invoke that method?

158
00:10:23.090 --> 00:10:28.490
I have the reference, my object that I want to invoke it on, which is developer put a dot and instead

159
00:10:28.490 --> 00:10:32.150
of accessing a property I want to access my double salary method.

160
00:10:32.420 --> 00:10:36.920
And since it is almost like a function, we need to actually invoke it with parentheses.

161
00:10:37.760 --> 00:10:43.370
So after I run the double salary method, these properties will change to their new values and I can

162
00:10:43.370 --> 00:10:46.190
prove that they've changed by copying my console.log.

163
00:10:47.360 --> 00:10:53.360
And only after we run the double salary method will the salary change to 200,000 and the looking for

164
00:10:53.360 --> 00:10:55.310
work property change to false.

165
00:10:55.310 --> 00:11:00.590
All right, so right here, I'm going to run my file and we can see on the right hand side those values

166
00:11:00.590 --> 00:11:03.260
have indeed changed to their expected values.

167
00:11:03.320 --> 00:11:03.620
All right.

168
00:11:03.950 --> 00:11:07.880
So that is a quick review of JavaScript objects, properties and methods.

169
00:11:08.030 --> 00:11:09.830
An object is a data structure.

170
00:11:09.830 --> 00:11:11.210
It's a container for data.

171
00:11:11.390 --> 00:11:18.440
It consists of key value pairs or equivalently property value pairs, which means pairs that connect

172
00:11:18.440 --> 00:11:26.180
a key, which is an identifier like salary, experienced text like etc. to a corresponding value for

173
00:11:26.180 --> 00:11:34.130
that attribute for that key such as 100,000, 4.5, etc. Our properties or our keys must be unique because

174
00:11:34.130 --> 00:11:38.660
we can only have one identifier, we can only have one salary, otherwise we wouldn't be able to know

175
00:11:38.690 --> 00:11:39.860
which value to reference.

176
00:11:40.040 --> 00:11:45.200
So our keys must be unique, but our values can be duplicated and our values can be any kind of valid

177
00:11:45.200 --> 00:11:50.690
JavaScript value strings, integers, floats, arrays, even other objects actually.

178
00:11:51.440 --> 00:11:56.030
And then of course we have methods and we explore the syntax for that on line, sixth line, there are

179
00:11:56.030 --> 00:12:01.670
basically functions that belong to an object, their actions or commands that we ask the object to perform,

180
00:12:01.760 --> 00:12:06.680
and they can modify the object's internal state to access any piece of internal state.

181
00:12:06.800 --> 00:12:08.180
We use the this keyword.

182
00:12:08.510 --> 00:12:10.220
That's all there is to cover in this lesson.

183
00:12:10.220 --> 00:12:11.720
So I will see you in the next one.
