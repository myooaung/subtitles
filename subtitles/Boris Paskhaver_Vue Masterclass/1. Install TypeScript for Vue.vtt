WEBVTT
1
00:00:00.650 --> 00:00:01.420
Okay.

2
00:00:01.420 --> 00:00:03.750
So welcome to the next section of the course.

3
00:00:03.760 --> 00:00:09.190
In this section we're going to incorporate TypeScript into our View project and see how it interacts

4
00:00:09.190 --> 00:00:15.130
with various features such as components, such as functions, such as the UK's features, etc..

5
00:00:15.550 --> 00:00:18.790
So we're going to use the view SQLite to set up TypeScript.

6
00:00:18.790 --> 00:00:23.890
So wherever you are running your view server, make sure to shut that down and you can use the command

7
00:00:23.890 --> 00:00:30.280
control key to bring down your server, make sure you are still in your central project directory.

8
00:00:30.280 --> 00:00:36.010
The top level and one other thing that I want you to do, what we're about to do is going to create

9
00:00:36.010 --> 00:00:38.050
some additional files in the project.

10
00:00:38.290 --> 00:00:43.690
Most of them are going to be beneficial, but unfortunately what this will also do is replace a critical

11
00:00:43.690 --> 00:00:47.200
file in our app and it is the home view.

12
00:00:49.250 --> 00:00:49.710
Component.

13
00:00:49.820 --> 00:00:52.760
So if you go to home view that view, here's the component.

14
00:00:53.060 --> 00:00:56.630
So what we're about to do is going to replace the contents of this file.

15
00:00:56.840 --> 00:01:03.110
What I'm going to do later on isn't going to use get in order to revert the changes that the view Celia

16
00:01:03.110 --> 00:01:03.920
makes this file.

17
00:01:04.070 --> 00:01:10.280
So we return back to what we have right here as an alternative to using GET which I will show you later

18
00:01:10.280 --> 00:01:14.330
this lesson you can simply copy and paste the contents of this file.

19
00:01:14.540 --> 00:01:19.130
So later on you'll be able to overwrite what The View Seelye over wrote.

20
00:01:19.310 --> 00:01:22.100
I know it's kind of confused the confusing and we'll talk more about it later.

21
00:01:22.340 --> 00:01:27.590
The short takeaway here is this file is going to be replaced with the contents and we want to preserve

22
00:01:27.590 --> 00:01:29.270
what we have in here right now.

23
00:01:29.450 --> 00:01:34.850
So make sure you have this file or at least its contents somewhere secure because the contents are about

24
00:01:34.850 --> 00:01:35.570
to be overwritten.

25
00:01:35.990 --> 00:01:36.290
All right.

26
00:01:36.530 --> 00:01:38.210
So with that, let's execute the code.

27
00:01:38.210 --> 00:01:41.330
We're going to need to execute in our terminal to add TypeScript.

28
00:01:41.540 --> 00:01:43.400
So right here, you may recall, we have our view.

29
00:01:43.400 --> 00:01:44.630
Seelye Which is view.

30
00:01:44.930 --> 00:01:49.580
Then we use the add command to add a new feature to our project.

31
00:01:49.760 --> 00:01:55.190
Earlier on, we use this to add view, ax, view, root or tailwind, etc. In order to add TypeScript

32
00:01:55.190 --> 00:02:01.490
super simple, we just save you, add TypeScript to execute that command and the Seelye is going to

33
00:02:01.490 --> 00:02:07.070
use NPM to fetch the correct packages from the NPM repository.

34
00:02:07.220 --> 00:02:09.500
And then it's going to give us a couple of questions.

35
00:02:10.040 --> 00:02:10.280
All right.

36
00:02:10.280 --> 00:02:11.390
So here's the very first question.

37
00:02:11.390 --> 00:02:14.030
Do we want to use a class style component syntax?

38
00:02:14.030 --> 00:02:19.250
This is a special syntax that we can use entitled correct in TypeScript in combination with components.

39
00:02:19.460 --> 00:02:20.900
We want to say no here.

40
00:02:22.380 --> 00:02:26.490
For the next question, it's going to ask us if we want to use Babel alongside TypeScript, basically

41
00:02:26.490 --> 00:02:27.960
combining those two technologies.

42
00:02:28.170 --> 00:02:33.330
TypeScript is going to compiler code from TypeScript to JavaScript, and then BABBEL also has to deal

43
00:02:33.330 --> 00:02:40.020
with, for example, converting our view files to constructs in JavaScript that the browser can understand.

44
00:02:40.260 --> 00:02:42.660
Basically, it's asking us whether we want to combine those two.

45
00:02:42.780 --> 00:02:44.250
The answer here is going to be yes.

46
00:02:44.520 --> 00:02:47.670
So put in a Y for yes and then press enter again.

47
00:02:48.630 --> 00:02:49.800
The next one is pretty simple.

48
00:02:50.010 --> 00:02:53.640
Do we want to automatically convert all JavaScript files to TypeScript files?

49
00:02:53.880 --> 00:02:56.910
TypeScript files, by the way, have a dot TSC extension.

50
00:02:57.120 --> 00:03:02.100
We're going to eventually move all of our JavaScript files to TypeScript and have these extensions.

51
00:03:02.280 --> 00:03:04.290
But I do not want this to happen right now.

52
00:03:04.290 --> 00:03:05.490
I want to do it manually.

53
00:03:05.670 --> 00:03:08.610
So for now we want to tell the CI and for.

54
00:03:08.610 --> 00:03:10.710
No, no, do not convert all the files.

55
00:03:11.830 --> 00:03:12.130
All right.

56
00:03:12.310 --> 00:03:15.390
The next question, do we want to allow JavaScript files to be compiled?

57
00:03:15.400 --> 00:03:16.390
The answer is yes.

58
00:03:16.900 --> 00:03:22.480
We can allow TypeScript to process and compile regular JavaScript files that don't have any TypeScript

59
00:03:22.480 --> 00:03:23.380
syntax in them.

60
00:03:23.560 --> 00:03:24.970
So here we're going to press Y for.

61
00:03:24.970 --> 00:03:25.270
Yes.

62
00:03:25.570 --> 00:03:29.560
And the final question, script type, checking for all declaration files for this one.

63
00:03:29.560 --> 00:03:33.280
You can also press a Y for yes and press enter.

64
00:03:33.580 --> 00:03:38.290
So with that, we're going to get the C allowed to run a generator, which is basically just a set script.

65
00:03:38.530 --> 00:03:40.360
So it's going to fetch a whole bunch of stuff for us.

66
00:03:40.540 --> 00:03:44.200
And as I scroll down, you're going to see we're going to get two errors here.

67
00:03:44.410 --> 00:03:49.060
One is from a new component that it created for us called Helloworld World View, which we do not care

68
00:03:49.060 --> 00:03:49.360
about.

69
00:03:49.600 --> 00:03:52.990
And the second one is the more important one, which is s lint rc that yes.

70
00:03:52.990 --> 00:03:54.310
Having a duplicate key.

71
00:03:54.580 --> 00:03:56.080
We're going to solve that in just a moment.

72
00:03:56.410 --> 00:04:02.080
But I do want to show you right here that using GZIP, I'm going to do get status to see all the files

73
00:04:02.080 --> 00:04:03.550
that were changed or added.

74
00:04:03.940 --> 00:04:08.020
And here's the complete list and we're going to go through these files one by one, talk about what

75
00:04:08.020 --> 00:04:14.110
they've done and what they've contributed to the project, and also modify the ones that that we need

76
00:04:14.110 --> 00:04:14.380
to.

77
00:04:14.410 --> 00:04:14.710
All right.

78
00:04:14.980 --> 00:04:17.710
So let's start with the one that I talked about in the beginning of this lesson.

79
00:04:17.710 --> 00:04:19.810
You can see we have Source View's home view.

80
00:04:19.810 --> 00:04:21.970
That view has been modified right here.

81
00:04:22.240 --> 00:04:24.550
And if I open up home view that view again.

82
00:04:25.930 --> 00:04:32.080
You can see that unfortunately what the CLIA did is it overrode all of our former contents with the

83
00:04:32.080 --> 00:04:32.710
new contents.

84
00:04:32.710 --> 00:04:34.030
We do not want that.

85
00:04:34.270 --> 00:04:39.550
So an easy way to get it back to its original version is to provide the command, get restore right

86
00:04:39.550 --> 00:04:42.670
here, get restore on earlier versions of get.

87
00:04:42.670 --> 00:04:45.220
If this doesn't work, by the way, you can use get check out instead.

88
00:04:45.400 --> 00:04:49.300
But if you're running a modern version of get something in the last year or so, this should work.

89
00:04:49.510 --> 00:04:52.120
So get restore and then you provide the name of the file.

90
00:04:52.120 --> 00:04:57.730
In this case, it's source views, home view view and then execute that you're going to see it's going

91
00:04:57.730 --> 00:05:00.010
to return it back to its original implementation.

92
00:05:00.190 --> 00:05:02.710
And this is the code we saw in the beginning of the lesson.

93
00:05:02.950 --> 00:05:08.110
So once again, if you don't want to use get simply copy the code that you put aside and put it back

94
00:05:08.110 --> 00:05:10.960
into this file and return back to what you had.

95
00:05:11.110 --> 00:05:15.850
Or alternatively, if you just lost all your code, just pause the video at this moment and go ahead

96
00:05:15.850 --> 00:05:18.010
and copy and paste what we have right here.

97
00:05:18.400 --> 00:05:18.610
All right.

98
00:05:18.610 --> 00:05:21.370
So with that, let's run get status again.

99
00:05:21.760 --> 00:05:21.940
All right.

100
00:05:21.940 --> 00:05:23.110
So here's what we have currently.

101
00:05:23.380 --> 00:05:26.890
The next thing I want to do is delete the newly created Hello world component.

102
00:05:26.890 --> 00:05:27.940
It's completely useless.

103
00:05:27.940 --> 00:05:30.730
It's unfortunately one of those extra components that it created for us.

104
00:05:31.060 --> 00:05:36.550
So what I'm going to do is head to the source components directory and just delete helloworld.

105
00:05:36.550 --> 00:05:37.930
It's not being used anymore.

106
00:05:37.930 --> 00:05:42.070
It's just an extra component that DCI created for us completely and utterly useless.

107
00:05:43.200 --> 00:05:45.660
And once again, we can use get status to track where we are.

108
00:05:45.810 --> 00:05:46.590
And there we go.

109
00:05:47.340 --> 00:05:54.750
Okay, so let's walk through all the files that the vehicle either created or modified for us from top

110
00:05:54.750 --> 00:05:55.170
to bottom.

111
00:05:55.410 --> 00:05:58.890
So let's start with S led RC dogs, which we see right here.

112
00:05:59.160 --> 00:06:02.460
So I'm going to open that up in my voice code editor.

113
00:06:02.760 --> 00:06:06.930
And just as a heads up, apologies if some of this text is unreadable.

114
00:06:07.080 --> 00:06:10.190
I'm going to try to highlight it so you can easily see which files we're targeting here.

115
00:06:10.200 --> 00:06:12.060
So that is lint RC database.

116
00:06:12.330 --> 00:06:18.510
As a reminder, this is the file that configures our s lint or which looks for violations throughout

117
00:06:18.510 --> 00:06:19.830
our code in the project.

118
00:06:20.040 --> 00:06:24.600
And we actually saw an issue earlier in our terminal and we can see it right here as well that we have

119
00:06:24.600 --> 00:06:26.550
to extends key is right here.

120
00:06:26.550 --> 00:06:29.160
We have an extends key right here for me on line number eight.

121
00:06:29.430 --> 00:06:35.460
And here we also have an extends key with basically a duplicate key.

122
00:06:35.580 --> 00:06:40.320
This is an array of all the additional extensions or in other words, plug ins that we are adding.

123
00:06:40.560 --> 00:06:47.040
And now we have the new one that DCI was attempting to add that also provides support for TypeScript.

124
00:06:47.250 --> 00:06:50.670
So the easy way to fix this, of course, is we simply remove our first extends.

125
00:06:50.670 --> 00:06:54.210
This was our old one, and now we're just going to get the benefits of the new one.

126
00:06:54.360 --> 00:06:57.270
So notice the first three elements in both arrays are the same.

127
00:06:57.390 --> 00:06:58.920
We get our view three support.

128
00:06:58.920 --> 00:07:03.210
We get our basic Eastland support, we get prettier support, and then we also get TypeScript support

129
00:07:03.210 --> 00:07:03.510
now.

130
00:07:03.720 --> 00:07:10.260
So with that we can go ahead and remove our first occurrence of extends right here and that should fix

131
00:07:10.260 --> 00:07:11.190
the issue down below.

132
00:07:11.460 --> 00:07:15.180
When I save this prettier should also modify all the keys so they have everything correctly.

133
00:07:15.360 --> 00:07:17.760
And that takes care of excellent architecture.

134
00:07:17.760 --> 00:07:18.000
Yes.

135
00:07:18.450 --> 00:07:18.720
All right.

136
00:07:18.720 --> 00:07:21.810
The next one in line on the left is going to be just config that.

137
00:07:21.810 --> 00:07:27.480
Yes, if I open that one up and this one, there's nothing different or nothing that we have to worry

138
00:07:27.480 --> 00:07:27.750
about.

139
00:07:27.750 --> 00:07:32.730
The only thing worth noting here is this preset property has changed to be TypeScript in Babel.

140
00:07:32.940 --> 00:07:39.180
Basically, all I have to realize here is that the client configured our just test suite to be able

141
00:07:39.180 --> 00:07:42.960
to recognize TypeScript files and run them accordingly.

142
00:07:43.470 --> 00:07:46.740
So it had to modify this key right here so it understands what's going on.

143
00:07:46.920 --> 00:07:48.750
But we don't have to edit anything in this file.

144
00:07:48.750 --> 00:07:50.970
I'm just explaining everything that it did for us.

145
00:07:50.970 --> 00:07:53.370
And there's nothing more we have to do in this file, right?

146
00:07:53.370 --> 00:07:55.020
We have two more files modified here.

147
00:07:55.020 --> 00:07:57.690
Package, lock, JSON and package that JSON.

148
00:07:57.930 --> 00:08:03.390
Of course, package JSON is the one that keeps track of all of our projects dependencies.

149
00:08:03.600 --> 00:08:10.530
And if I look for TypeScript in this file, we're going to see that it is now in our project type TypeScript

150
00:08:10.530 --> 00:08:13.170
and there we see a whole bunch of things related to TypeScript.

151
00:08:13.170 --> 00:08:15.150
Here is the actual language version right here.

152
00:08:15.450 --> 00:08:17.460
So nothing we have to modify here as well.

153
00:08:17.460 --> 00:08:20.940
This is just letting you know that it's now a project dependency package lock.

154
00:08:20.940 --> 00:08:26.580
That JSON is a more specific file that we never modify that deals with more specific project dependencies,

155
00:08:26.760 --> 00:08:30.540
this library with this library at this library, etc., we never modify it.

156
00:08:30.540 --> 00:08:33.780
It's just automatically generated for us so we don't have to worry about it.

157
00:08:34.430 --> 00:08:36.690
All right, so what else is left?

158
00:08:36.960 --> 00:08:37.320
Oh, yeah.

159
00:08:37.620 --> 00:08:40.770
So we have source that source in the source directory.

160
00:08:40.770 --> 00:08:41.820
A file called Main that.

161
00:08:41.820 --> 00:08:42.150
Yes.

162
00:08:42.150 --> 00:08:45.630
And you could see it's been deleted, but it hasn't actually really been deleted.

163
00:08:45.840 --> 00:08:51.150
What it has actually done is renamed it to have a typescript file extension.

164
00:08:51.330 --> 00:08:57.240
So in TypeScript files have a DOT extension and here you can see a new file called Source Main that.

165
00:08:57.240 --> 00:08:57.540
Yes.

166
00:08:57.750 --> 00:08:59.670
So if I open up a main that's.

167
00:09:01.590 --> 00:09:07.830
This is still our old man, that J.S. File, but that UCLA automatically renamed it to be a TypeScript

168
00:09:07.830 --> 00:09:08.160
file.

169
00:09:08.370 --> 00:09:10.230
So here you can see the dots extension.

170
00:09:10.350 --> 00:09:15.180
Here you can see for me in this code, we had that little blue box with tips in the bottom right corner.

171
00:09:15.360 --> 00:09:16.650
That means TypeScript.

172
00:09:16.830 --> 00:09:21.150
Similarly, if I open up my file Explorer and I look at this far right here, it's going to have that

173
00:09:21.150 --> 00:09:24.600
same TS extension and this logo.

174
00:09:24.810 --> 00:09:27.600
Basically, there's nothing that's changed within this file.

175
00:09:27.810 --> 00:09:30.480
The only difference is that it now has a different extension.

176
00:09:30.600 --> 00:09:35.430
There's no TypeScript specific code in this file, so we'll be just fine keeping it as it is, we don't

177
00:09:35.430 --> 00:09:35.970
need to touch it.

178
00:09:36.240 --> 00:09:39.150
But just as a heads up, that's what DCI did for us.

179
00:09:39.690 --> 00:09:40.020
All right.

180
00:09:40.680 --> 00:09:43.200
So two more files worth talking about.

181
00:09:43.950 --> 00:09:45.900
These are two new files that it created for us.

182
00:09:45.930 --> 00:09:50.490
Luckily, the good news is that when we once again don't have to worry about editing anything in them.

183
00:09:50.640 --> 00:09:52.800
But I do want to quickly talk about what we did here.

184
00:09:53.100 --> 00:09:55.110
So next file is called Shims View.

185
00:09:56.290 --> 00:10:03.310
This is basically a typescript specific file that enables TypeScript to recognise different aspects

186
00:10:03.310 --> 00:10:04.870
and components in view.

187
00:10:05.080 --> 00:10:10.940
Again, don't worry about it, just realize it's something that's required to integrate view with TypeScript.

188
00:10:10.960 --> 00:10:11.200
Right.

189
00:10:11.200 --> 00:10:14.950
Because TypeScript is a separate language, it doesn't have to be used with view.

190
00:10:15.130 --> 00:10:17.680
It can be used in general to build JavaScript programs.

191
00:10:17.830 --> 00:10:21.310
It can be used with other frontend frameworks like React for Angular.

192
00:10:21.460 --> 00:10:26.570
So this is kind of the a little bit of the glue layer that specifically emerges.

193
00:10:26.680 --> 00:10:29.710
Our view project with TypeScript so that it works without complaints.

194
00:10:30.010 --> 00:10:35.590
And finally, every TypeScript project in general, not just in view but in any TypeScript project,

195
00:10:35.950 --> 00:10:39.040
we're going to have a file called CONFIG that JSON.

196
00:10:39.040 --> 00:10:41.170
So here I have it highlighted and if I open it up.

197
00:10:43.170 --> 00:10:44.610
Here is to confirm that, Jason.

198
00:10:44.730 --> 00:10:49.110
And basically, this is a set of options for TypeScript.

199
00:10:49.410 --> 00:10:49.680
All right.

200
00:10:49.680 --> 00:10:52.440
So this is specific configurations for how TypeScript works.

201
00:10:52.650 --> 00:10:55.860
We generally do not have to worry about this file or modify anything in it.

202
00:10:56.070 --> 00:10:58.980
Just realize it's a requirement for any TypeScript project.

203
00:10:59.220 --> 00:11:06.600
And so now what's happening is usually says, I know you have a TypeScript project and thus I'm going

204
00:11:06.600 --> 00:11:10.680
to need to generate this for you because it's a requirement of everything.

205
00:11:11.370 --> 00:11:14.100
It's a requirement of any project whatsoever that you just have it.

206
00:11:14.400 --> 00:11:14.750
All right.

207
00:11:14.760 --> 00:11:16.860
So this is just configurations for how Typekit works.

208
00:11:16.980 --> 00:11:17.760
Don't worry about it.

209
00:11:17.880 --> 00:11:23.490
Vue knows that you have a view project, so it knows how to configure this file with a bunch of reasonable

210
00:11:23.490 --> 00:11:25.320
defaults for Vue developers.

211
00:11:25.530 --> 00:11:25.890
All right.

212
00:11:26.370 --> 00:11:32.130
So for example, we can see here it's setting up our source directory to be able to recognize any files

213
00:11:32.130 --> 00:11:33.390
with a dot vue extension.

214
00:11:33.750 --> 00:11:38.970
Anything with a dot TSA extension in our test directory, etc., basically saying, hey, just be sure

215
00:11:38.970 --> 00:11:44.460
to recognize all of these Vue files, these JavaScript files, these touch ID files in various folders

216
00:11:44.460 --> 00:11:47.790
in our project, you know, stick with these options, etc..

217
00:11:48.210 --> 00:11:48.420
All right.

218
00:11:48.420 --> 00:11:50.370
So that's all the new files that we have created.

219
00:11:51.590 --> 00:11:58.580
So you should go ahead and start running the start up script which is NPM, run, serve and hopefully

220
00:11:58.580 --> 00:12:00.710
now we should have no problem building everything up.

221
00:12:01.840 --> 00:12:02.920
Starting the development server.

222
00:12:02.920 --> 00:12:08.200
We have addressed all of the warnings that we saw when we ran our original View Ad TypeScript Command.

223
00:12:08.560 --> 00:12:13.480
This might take a little bit to compile, but if you see the regular grain successful error message

224
00:12:13.480 --> 00:12:15.070
that everything is working just fine.

225
00:12:15.070 --> 00:12:15.970
So that's what you should see.

226
00:12:16.000 --> 00:12:20.470
Compiled successfully, no issues found and you should still see the app running just fine in your browser

227
00:12:20.470 --> 00:12:21.820
at localhost 88.

228
00:12:22.300 --> 00:12:22.510
All right.

229
00:12:22.510 --> 00:12:24.070
That's all there is to cover in this lesson.

230
00:12:24.070 --> 00:12:25.660
So I will see you in the next one.
