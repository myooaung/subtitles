WEBVTT
1
00:00:00.420 --> 00:00:07.020
All right, so let's practice the concepts of test driven development or TDD in this code.

2
00:00:07.350 --> 00:00:09.110
So here I have my playground.

3
00:00:09.150 --> 00:00:09.470
Yes.

4
00:00:09.480 --> 00:00:10.770
File open on the left.

5
00:00:10.950 --> 00:00:12.270
I have my playground.

6
00:00:12.540 --> 00:00:14.850
Test that jazz file open on the right.

7
00:00:15.120 --> 00:00:18.900
And I've moved my terminal to a panel at the bottom of the screen.

8
00:00:19.080 --> 00:00:23.880
If you want to do the same thing, by the way, you can always right click on the window that holds

9
00:00:23.880 --> 00:00:26.280
your terminal and choose one of these options.

10
00:00:26.280 --> 00:00:27.360
Move panel left.

11
00:00:27.360 --> 00:00:27.930
Move panel.

12
00:00:27.930 --> 00:00:28.290
Right.

13
00:00:28.980 --> 00:00:33.990
Previously I clicked Move panel to the bottom to orient where your terminal is on the screen.

14
00:00:34.140 --> 00:00:36.540
That just buys the more space to do our work.

15
00:00:36.720 --> 00:00:38.630
Okay, so here's what I want to do.

16
00:00:38.640 --> 00:00:45.240
I want to write a test for a new function called Multiply, and its responsibility will be to multiply

17
00:00:45.240 --> 00:00:46.900
two numbers together.

18
00:00:47.160 --> 00:00:52.530
So of course, we're going to follow the TDD approach so we can imagine as if this function exists,

19
00:00:52.530 --> 00:00:56.910
we're going to import it in our test file, we're going to write a test for it, and then we're going

20
00:00:56.910 --> 00:01:03.300
to use the failures and our output from GEST in the terminal to guide our implementation and eventually

21
00:01:03.300 --> 00:01:04.320
our refactor.

22
00:01:04.560 --> 00:01:11.010
So let's get started right here in playground that test that yes, I'm going to import a multiply function

23
00:01:11.010 --> 00:01:12.450
from our playground file.

24
00:01:12.780 --> 00:01:17.280
So obviously multiply does not exist yet, but that is exactly the point.

25
00:01:17.280 --> 00:01:19.890
We are writing our test as if it did exist.

26
00:01:20.040 --> 00:01:21.900
This is how we wish our code works.

27
00:01:22.080 --> 00:01:27.810
We hope that there is a function called multiply that we can import from playground right below here.

28
00:01:27.810 --> 00:01:29.100
After this describe block.

29
00:01:29.100 --> 00:01:30.480
I'm going to add another describe.

30
00:01:31.720 --> 00:01:36.850
In fact, what you can do if you want to keep things a little bit lighter on your screen is if you hover

31
00:01:36.850 --> 00:01:40.690
your mouse to the left hand side of it describe, you'll see these collapse buttons.

32
00:01:40.900 --> 00:01:43.930
And if you click this one, it's going to collapse even or odd.

33
00:01:43.930 --> 00:01:48.430
It's not going to delete the content, it's just going to hide it so that we can go ahead and see more

34
00:01:48.430 --> 00:01:52.960
of the file by kind of collapsing or hiding the internals of that function.

35
00:01:52.960 --> 00:01:56.740
BLOCK So here I want to describe a new function called the multiply.

36
00:01:57.190 --> 00:02:01.150
And of course, we're going to provide a function right here in line and arrow function.

37
00:02:01.900 --> 00:02:02.200
All right.

38
00:02:02.200 --> 00:02:04.300
And here we're going to provide our actual test.

39
00:02:04.310 --> 00:02:06.790
So we're going to invoke the ID function and provide a description.

40
00:02:07.030 --> 00:02:09.580
It multiplies two numbers together.

41
00:02:10.000 --> 00:02:12.670
Notice here that I'm not talking about the implementation.

42
00:02:12.670 --> 00:02:16.270
I'm talking about what the function should do when I invoke it.

43
00:02:16.600 --> 00:02:22.780
And here is where we decide how we would like the multiply function to work in an ideal world.

44
00:02:23.050 --> 00:02:27.880
So we sort of kind of start to think about implementation here, but we're not super concerned with

45
00:02:28.090 --> 00:02:29.110
the actual details.

46
00:02:29.110 --> 00:02:31.750
All we're concerned about is the inputs and the outputs.

47
00:02:32.080 --> 00:02:38.110
So I'm going to expect that I'm going to have a function called multiply and I expect to give it to

48
00:02:38.110 --> 00:02:40.720
arguments and sum multiplying two numbers together.

49
00:02:41.020 --> 00:02:43.060
Say I feed in two and three.

50
00:02:43.360 --> 00:02:48.340
And of course when I multiply these two numbers together, I expect the result, the return value to

51
00:02:48.340 --> 00:02:50.120
be equal to six.

52
00:02:50.120 --> 00:02:53.200
So I'm going to put expect multiply to be six.

53
00:02:53.200 --> 00:02:53.530
All right.

54
00:02:53.770 --> 00:02:56.890
So we do not have our implementation written and that's fine.

55
00:02:57.070 --> 00:03:02.770
We're actually going to run our test suite right now with NPM run test unit in our terminal and we're

56
00:03:02.770 --> 00:03:05.590
going to follow the errors and see where they lead us.

57
00:03:05.890 --> 00:03:12.190
Let's take a look at what the very first error is going to be from from our just the first error we

58
00:03:12.190 --> 00:03:13.900
can see is type error.

59
00:03:14.110 --> 00:03:16.570
A playground multiply is not a function.

60
00:03:16.570 --> 00:03:20.650
So what just is telling us here is it cannot find a name called Multiply in our program.

61
00:03:20.890 --> 00:03:26.560
So before we even start defining the logic for a function, the first thing is we're importing it.

62
00:03:26.740 --> 00:03:31.900
So we need to be able to make sure that multiply is defined within our playground file.

63
00:03:32.140 --> 00:03:37.630
So what I'm going to do is simply export a concept called multiply and I'll make it a function.

64
00:03:39.080 --> 00:03:43.010
So right here, I'm just going to provide an empty arrow function and I'm intentionally keeping things

65
00:03:43.010 --> 00:03:43.970
very literally.

66
00:03:43.970 --> 00:03:49.760
TDD Right now, I'm not adding any additional content inside the multiply function because I want the

67
00:03:49.760 --> 00:03:54.620
test failures to guide me to the next small thing that I need to add.

68
00:03:54.620 --> 00:03:54.980
Right?

69
00:03:55.250 --> 00:04:00.560
So not only are we using TDD to arrive to a working implementation, we're using TDD to guide us to

70
00:04:00.560 --> 00:04:02.780
the next small problem that we need to solve.

71
00:04:02.960 --> 00:04:08.660
So I'm going to rerun the test and hopefully now we're going to be able to successfully import multiply.

72
00:04:08.660 --> 00:04:10.400
So we've confirmed that that is correct.

73
00:04:10.640 --> 00:04:17.600
And you're going to see we're going to receive undefined inside our actual final return value when we

74
00:04:17.600 --> 00:04:19.430
expect it to receive six.

75
00:04:19.490 --> 00:04:19.820
Right?

76
00:04:20.000 --> 00:04:25.370
So now we have the permission to actually build up an implementation for the multiply function.

77
00:04:25.550 --> 00:04:30.200
So what I'm going to do instead of using the asterisk multiplication symbol, I'm going to come up with

78
00:04:30.200 --> 00:04:35.480
an intentionally bad or much more complex solution than needs to be.

79
00:04:35.480 --> 00:04:39.740
And this is just for the purposes of example, when it comes to refactoring, when you're when you're

80
00:04:39.740 --> 00:04:43.340
building out real code, obviously you should build the simplest thing that you can think of.

81
00:04:43.520 --> 00:04:48.200
But many times the first solution that comes to mind isn't the best one, but it's the first one that

82
00:04:48.200 --> 00:04:48.860
makes sense.

83
00:04:48.860 --> 00:04:53.990
And so imagine that I'm here and I decide, okay, I know my function needs to arguments.

84
00:04:53.990 --> 00:04:55.490
I'm going to say number one and number two.

85
00:04:55.760 --> 00:05:02.660
And the way that we traditionally multiply is to add up each number, the number of times that the other

86
00:05:02.660 --> 00:05:03.350
number says.

87
00:05:03.350 --> 00:05:10.220
So, for example, I can iterate up up from zero to number one and that many times I can add number

88
00:05:10.220 --> 00:05:11.840
two to a running total.

89
00:05:11.930 --> 00:05:13.760
And that's basically what multiplication is.

90
00:05:13.760 --> 00:05:15.590
It's a bunch of additions together.

91
00:05:15.830 --> 00:05:17.540
So I might write code that looks like this.

92
00:05:17.540 --> 00:05:22.370
I'm going to have a cumulative total, which I'll have in a total variable let total equals zero.

93
00:05:22.610 --> 00:05:29.150
And then I'm going to do a four loop here to iterate from I equals zero up to number one.

94
00:05:29.330 --> 00:05:34.970
I'm going to increment I by one each loop and that many number of times I'm going to increment total

95
00:05:35.270 --> 00:05:36.170
by number two.

96
00:05:37.170 --> 00:05:42.650
So in this case, of course, if we have two and three, we're going to iterate from zero up to two.

97
00:05:42.660 --> 00:05:45.030
So we're going to have two total loops, zero and one.

98
00:05:45.240 --> 00:05:50.280
And for each of those two loops, we're going to add the value of NUM two, which is 3 to 0.

99
00:05:50.310 --> 00:05:52.440
So we're adding three once to get to three.

100
00:05:52.590 --> 00:05:54.780
We're adding three a second time to get the six.

101
00:05:55.050 --> 00:06:01.380
So now at the end of this four loop, our total variable stores are multiplied product and at the very

102
00:06:01.380 --> 00:06:02.820
end I can return total.

103
00:06:04.300 --> 00:06:04.660
All right.

104
00:06:04.900 --> 00:06:07.210
So this is now the red phase.

105
00:06:07.240 --> 00:06:10.480
Let's see if we can enter the green phase, if we can get our tests to pass.

106
00:06:12.600 --> 00:06:15.070
And indeed they do.

107
00:06:15.090 --> 00:06:20.820
So now we know that our functions implementation is indeed solving the problem of multiplying two numbers

108
00:06:20.820 --> 00:06:21.240
together.

109
00:06:21.480 --> 00:06:22.650
Everything is correct.

110
00:06:22.890 --> 00:06:26.880
So now we enter our third stage of TDD, which is the refactor stage.

111
00:06:27.060 --> 00:06:31.770
So this is where we can try to tweak our implementation without breaking the existing test.

112
00:06:31.980 --> 00:06:34.770
And the idea is that we're trying to come up with a better solution.

113
00:06:34.920 --> 00:06:41.010
But now we always have this test available to keep us honest and make sure that we are fulfilling the

114
00:06:41.010 --> 00:06:42.750
responsibility of the multiply function.

115
00:06:42.960 --> 00:06:49.170
If we did not do TDD, this test might not exist and we might not have the validation as we refactor

116
00:06:49.410 --> 00:06:51.480
that we are actually covering all of our bases.

117
00:06:51.720 --> 00:06:56.250
Now, again, with a problem like this, it's super small, so you might not see the benefit immediately.

118
00:06:56.460 --> 00:07:01.140
But you can imagine if you're testing a complex class and you have a method that does three or four

119
00:07:01.140 --> 00:07:03.360
different things and you start to refactor.

120
00:07:03.480 --> 00:07:08.670
It's very easy to, for example, delete a line or add an extra line or do something redundant.

121
00:07:08.670 --> 00:07:13.650
And if your tests aren't there to validate that all of your original functionality is preserved.

122
00:07:13.770 --> 00:07:18.270
You might actually do extra work or accidentally remove something or introduce a hidden bug.

123
00:07:18.570 --> 00:07:21.990
So the benefit of TDD is we have our tests available first.

124
00:07:22.200 --> 00:07:26.520
So they're always going to be there to provide validation that our code works and does what it's supposed

125
00:07:26.520 --> 00:07:26.790
to do.

126
00:07:27.090 --> 00:07:32.370
So obviously maybe somebody will come up to us and say, Hey, that's not a really good solution.

127
00:07:32.370 --> 00:07:34.290
You know, you can just use the multiply operator, right?

128
00:07:34.590 --> 00:07:37.290
And we might say, Oh yeah, of course, I don't need this complex solution.

129
00:07:38.160 --> 00:07:43.640
I can go ahead and say I can just return number one times and I'm to save this.

130
00:07:43.650 --> 00:07:49.140
And the beautiful part is now we're in the refactor stage so we can keep running these tests to confirm

131
00:07:49.140 --> 00:07:49.980
that our code works.

132
00:07:50.250 --> 00:07:54.510
And when we do, we see that excellent multiply still multiplies two numbers together.

133
00:07:54.660 --> 00:07:57.150
So now we feel comfortable that everything is working correctly.

134
00:07:57.300 --> 00:08:02.400
We can even refactor this further and say, Oh, if you're familiar with JavaScript, E6 syntax and

135
00:08:02.400 --> 00:08:07.410
you have a very simple expression like this, you can do an automatic return in a function by getting

136
00:08:07.410 --> 00:08:08.910
rid of these curly braces.

137
00:08:09.120 --> 00:08:10.140
Getting rid of that.

138
00:08:10.470 --> 00:08:11.940
Getting rid of the return keyword.

139
00:08:11.940 --> 00:08:14.070
And just moving all this up to a single line.

140
00:08:14.250 --> 00:08:15.360
This is all valid.

141
00:08:15.390 --> 00:08:20.370
JavaScript is syntax is going to automatically return the product of these two inputs.

142
00:08:20.610 --> 00:08:25.800
And once again, if in case I forget even the basics of JavaScript and forget whether this is valid,

143
00:08:25.980 --> 00:08:30.400
I have a really good way to check without ever needing to go and look up anything on Google.

144
00:08:30.420 --> 00:08:35.430
I can just run my test suite and if it works then I know the code is delivering on its expectation of

145
00:08:35.430 --> 00:08:38.850
multiplying two and three together and resulting in six.

146
00:08:38.970 --> 00:08:39.270
All right.

147
00:08:39.510 --> 00:08:41.430
So that's really all there is to cover in this lesson.

148
00:08:41.430 --> 00:08:43.170
This is an example of TDD in action.

149
00:08:43.290 --> 00:08:49.050
We write a failing test, we write the implementation, and then we refactor that until we get it into

150
00:08:49.050 --> 00:08:49.800
an ideal shape.

151
00:08:49.920 --> 00:08:54.360
And if we ever want to come back to this function, you know, six months from now, we have a test

152
00:08:54.360 --> 00:08:56.400
suite that shows us how it's supposed to be used.

153
00:08:56.580 --> 00:09:02.370
So we have really great documentation and we can always feel comfortable diving right into the refactor

154
00:09:02.520 --> 00:09:07.170
because we know we have a good test suite that is going to cover us in case we make a mistake as we

155
00:09:07.170 --> 00:09:08.880
fix up the code and make it better.

156
00:09:08.880 --> 00:09:09.150
Right.

157
00:09:09.270 --> 00:09:14.580
And if we want to add a new feature, we write a new test, make sure it fails and then continue writing

158
00:09:14.580 --> 00:09:15.200
the new code.

159
00:09:15.210 --> 00:09:15.540
Right.

160
00:09:15.580 --> 00:09:20.100
We only write code in TDD as long as it fixes a broken test.

161
00:09:20.100 --> 00:09:21.750
We never write code otherwise.

162
00:09:21.930 --> 00:09:24.600
And that validates that we've properly tested everything.

163
00:09:24.780 --> 00:09:25.050
All right.

164
00:09:25.320 --> 00:09:26.850
That's all there is to cover in this lesson.

165
00:09:26.910 --> 00:09:28.410
So I will see the next one.
