WEBVTT
1
00:00:00.540 --> 00:00:04.590
In this lesson, I'd like to talk about multiple levels of reactivity.

2
00:00:04.830 --> 00:00:11.550
What I mean by that is having computed functions that depend on objects returned by other computed functions.

3
00:00:11.970 --> 00:00:17.940
So what this allows us to do is to have this domino effect throughout our program, where we begin with

4
00:00:17.940 --> 00:00:23.130
a change in one location, with one reactive object, and that change spreads to somewhere else.

5
00:00:23.310 --> 00:00:29.170
And then that triggers another update to a third object somewhere else.

6
00:00:29.190 --> 00:00:35.190
So we can create a whole chain of reactivity, a chain of dependencies, so that the beginning change

7
00:00:35.280 --> 00:00:37.830
triggers all these subsequent changes in a row.

8
00:00:38.160 --> 00:00:39.150
Let me show you what I mean.

9
00:00:39.150 --> 00:00:44.370
Here I have the code from the previous lesson where we are dynamically creating this concatenated string

10
00:00:44.370 --> 00:00:45.350
of firstname.

11
00:00:45.390 --> 00:00:48.600
Last name the great based on my person reactive object.

12
00:00:49.350 --> 00:00:57.930
So what if I wanted the reactive length of my title string or to be more specific, the title value?

13
00:00:58.170 --> 00:01:04.410
So what I mean by that is whenever we have this string and an update, I want to recalculate the length

14
00:01:04.410 --> 00:01:08.040
of this string and store it in some kind of constant in my program.

15
00:01:08.310 --> 00:01:09.660
So here's what I'm going to do.

16
00:01:10.530 --> 00:01:16.050
I'm going to say title length, and I'm going to once again use the computed function.

17
00:01:16.530 --> 00:01:19.170
And we know that we passed it a arrow function.

18
00:01:19.170 --> 00:01:20.760
So I'm going to pass it in arrow function here.

19
00:01:20.880 --> 00:01:25.800
And this will rerun whenever anything in the internals of the arrow function changes.

20
00:01:25.980 --> 00:01:27.690
So what do I want to track here?

21
00:01:27.690 --> 00:01:29.160
What change do I want to track?

22
00:01:29.490 --> 00:01:32.810
Well, I want to track whenever title changes.

23
00:01:32.820 --> 00:01:33.180
Right.

24
00:01:33.420 --> 00:01:37.020
So if I look at title titles, going to be my reactive object right here.

25
00:01:37.320 --> 00:01:42.960
And what I can look at is its value property, which will be this concatenated string.

26
00:01:43.200 --> 00:01:47.130
And furthermore, what I actually want is the length of this string.

27
00:01:47.460 --> 00:01:52.170
And so I can attach the length property on a string in JavaScript, and that will give me the length.

28
00:01:52.530 --> 00:01:57.480
Now, by itself, if I just used Title II that length and assigned it to title length, it would only

29
00:01:57.480 --> 00:01:58.950
perform the logic once.

30
00:01:59.190 --> 00:02:05.610
But because I've wrapped it in this arrow function inside computed, it will actually re-evaluate whenever

31
00:02:05.610 --> 00:02:08.340
the title object's value property changes.

32
00:02:08.790 --> 00:02:14.910
So in other words, whenever we change the person properties right here that will cascade or affect

33
00:02:14.910 --> 00:02:20.820
this function right here because it will rerun because a person property has changed that it cares about.

34
00:02:21.120 --> 00:02:26.340
And then because this title length knows the track, the value of the title reactive object that we

35
00:02:26.340 --> 00:02:26.880
get here.

36
00:02:27.120 --> 00:02:33.930
As soon as this string changes, then this computed function will rerun giving us the latest length.

37
00:02:34.440 --> 00:02:41.580
Okay, so let me show you this in action I'm going to console.log title length, dot value.

38
00:02:41.590 --> 00:02:45.870
Remember, the computed function is going to give us a reactive object with a value property.

39
00:02:45.990 --> 00:02:49.830
So we can't just output title length to get the length we need to add on that value.

40
00:02:50.190 --> 00:02:54.360
So if I execute this file, we can see that it's going to be 25.

41
00:02:54.720 --> 00:02:58.500
I'm actually going to change the property here from Peter to Napoleon.

42
00:02:58.650 --> 00:03:02.900
The only reason I'm going to do this is because Peter actually has the exact same length as Boris,

43
00:03:02.910 --> 00:03:05.880
so we would have no way of confirming whether our code actually worked.

44
00:03:06.090 --> 00:03:08.100
But I am going to change it to something like Napoleon.

45
00:03:09.000 --> 00:03:10.590
And that's going to be our first name property.

46
00:03:10.830 --> 00:03:14.070
So again, what's going to happen is Vue is going to rerun this function.

47
00:03:14.070 --> 00:03:17.460
It's now going to get Napoleon passed over the great as the string.

48
00:03:17.760 --> 00:03:23.850
And then because this function is keeping track of title, this is going to rerun and get the new string

49
00:03:23.850 --> 00:03:25.950
length of Napoleon passing over the great.

50
00:03:26.310 --> 00:03:32.820
So once again, we can see now I actually forgot to put the value of title length that value below rookie

51
00:03:32.820 --> 00:03:33.150
error.

52
00:03:33.150 --> 00:03:34.080
I apologize.

53
00:03:34.530 --> 00:03:36.750
Let me add that here and rerun the file.

54
00:03:37.500 --> 00:03:40.500
And now we can see it has changed to 28, right?

55
00:03:40.500 --> 00:03:46.440
Because Napoleon adds three more letters to the length and same concept applies when we change the last

56
00:03:46.440 --> 00:03:48.210
name property on the person object.

57
00:03:48.450 --> 00:03:50.550
So we're going to change the last name to Griffin.

58
00:03:50.730 --> 00:03:51.770
This will rerun.

59
00:03:51.780 --> 00:03:55.710
It's going to give us a new title, which forces this to rerun and give us a new length.

60
00:03:55.980 --> 00:04:02.250
And if I put this console.log title length, my reactive object and its value property, we're now going

61
00:04:02.250 --> 00:04:05.120
to have a new length of 26.

62
00:04:05.130 --> 00:04:10.890
So you can see here that the computed function and what it's tracking can depend on other reactive objects

63
00:04:10.890 --> 00:04:12.330
that come from computer functions.

64
00:04:12.480 --> 00:04:13.760
And there's no limit to this.

65
00:04:13.780 --> 00:04:19.160
We can have something that depends on title length and calculates its own reactive value as a result.

66
00:04:19.170 --> 00:04:19.440
Right.

67
00:04:19.680 --> 00:04:22.350
This is similar to ideas that are possible in Google sheets.

68
00:04:22.350 --> 00:04:28.500
We can track changes in one cell and have it reverberate or reflect in another cell and then have another

69
00:04:28.500 --> 00:04:30.630
cell track that cell and update as well.

70
00:04:30.720 --> 00:04:37.320
We can continue layering this multiple steps down and we can continue or emulate the same idea in view.

71
00:04:37.530 --> 00:04:42.300
The only important thing to remember, of course, is that we still have to wrap each of those new computations

72
00:04:42.480 --> 00:04:47.880
in the computed function because that is the actual view functionality that enables us to keep track

73
00:04:47.880 --> 00:04:48.540
of those changes.

74
00:04:48.750 --> 00:04:54.690
Just because title is a reactive object with a value property does not mean we can do something like

75
00:04:54.690 --> 00:04:55.110
this.

76
00:04:56.010 --> 00:04:57.120
This will not work.

77
00:04:57.120 --> 00:04:59.580
This is just going to give us a one time value.

78
00:04:59.890 --> 00:05:04.240
Or whatever it happens to be at that moment in time during the program's execution.

79
00:05:04.420 --> 00:05:10.210
If you want it to automatically recalculate, just like those cells in Google sheets, you have to wrap

80
00:05:10.210 --> 00:05:15.220
the logic in a function that you pass to the computed function from the View Library.

81
00:05:15.550 --> 00:05:15.910
All right.

82
00:05:16.090 --> 00:05:17.700
That's all there is to cover in this lesson.

83
00:05:17.710 --> 00:05:19.180
So I will see you in the next one.
