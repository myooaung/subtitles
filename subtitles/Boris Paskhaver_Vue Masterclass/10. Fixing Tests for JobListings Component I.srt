1
00:00:00,430 --> 00:00:01,240
Okay.

2
00:00:01,240 --> 00:00:05,650
So we have made some pretty significant changes to our job listings component.

3
00:00:05,830 --> 00:00:11,650
We are now fully reliant on the View X Store in order to read the Jobs property, which was formerly

4
00:00:11,650 --> 00:00:13,480
part of the data of this component.

5
00:00:13,810 --> 00:00:16,570
So let's run our test suite and see if anything has broken.

6
00:00:16,840 --> 00:00:22,840
So right here I'm going to execute NPM, run at Tesco and watch and I am making a commit after every

7
00:00:22,840 --> 00:00:23,230
lesson.

8
00:00:23,230 --> 00:00:26,350
So I am going to get this message right here that says no tests found.

9
00:00:26,560 --> 00:00:30,620
In this situation, you can always press the key to run all of your tests.

10
00:00:31,090 --> 00:00:37,000
And when we run through all of our tests, we do see that we have one failing test suite and eight failing

11
00:00:37,000 --> 00:00:37,390
tests.

12
00:00:37,720 --> 00:00:42,550
And if I scroll all the way up to the top of this output, we will see that they're all coming from

13
00:00:42,550 --> 00:00:46,630
our job listings dot test, dot file, which sort of makes sense.

14
00:00:46,660 --> 00:00:51,460
So for example, if I look at this first output, this is coming from the computed property where we

15
00:00:51,460 --> 00:00:56,230
are trying to slice the disk that jobs array, which now comes from the view store.

16
00:00:56,500 --> 00:00:59,110
But in our test, we don't have any of U.S. store.

17
00:00:59,170 --> 00:01:00,940
We don't have this property present.

18
00:01:01,090 --> 00:01:04,480
And thus that creates an error when we try to slice on undefined.

19
00:01:04,750 --> 00:01:09,940
So basically what we're going to need to do in our test suite is replace the view store with a mock

20
00:01:09,940 --> 00:01:15,850
object that can play the role of a View store so that the jobless component will be able to work in

21
00:01:15,850 --> 00:01:16,420
our test suite.

22
00:01:16,750 --> 00:01:21,880
So let me open up job listings, dot, test, dot, J.S. And I'm going to drag that to the right hand

23
00:01:21,880 --> 00:01:22,180
side.

24
00:01:23,380 --> 00:01:25,330
So we'll begin with a little bit of cleanup.

25
00:01:25,330 --> 00:01:30,250
You'll notice here in this test suite we are importing Axios and then marking it out.

26
00:01:30,430 --> 00:01:32,080
We no longer need to do that.

27
00:01:32,260 --> 00:01:37,300
The reason we were doing this before is because we were using Axios in job listings in order to make

28
00:01:37,300 --> 00:01:40,210
the initial API request in our mounted lifecycle.

29
00:01:40,210 --> 00:01:40,450
Look.

30
00:01:40,810 --> 00:01:46,600
Now that logic is in our get jobs function so we don't care about Axios in regards to job listings.

31
00:01:46,600 --> 00:01:46,870
All right.

32
00:01:47,170 --> 00:01:51,400
So what I'm going to do is I'm going to start by removing lines two and three, the import of Axios

33
00:01:51,400 --> 00:01:56,320
and the mocking of Axios, which also allows us to clean up the before and after each.

34
00:01:56,320 --> 00:02:01,360
Here's where we were mocking out the resolved value of the Axios get method to simulate a response.

35
00:02:01,600 --> 00:02:05,470
We no longer need any of this or this, so let me delete that.

36
00:02:05,800 --> 00:02:09,430
There's also going to be a couple sections down below where we are using Axios.

37
00:02:09,730 --> 00:02:13,030
So for example, right here in this test, it fetches jobs.

38
00:02:13,330 --> 00:02:15,880
This is no longer the responsibility of this component.

39
00:02:16,060 --> 00:02:21,640
In fact, we have a test very similar to this for our get jobs tests themselves.

40
00:02:21,790 --> 00:02:26,920
You can see here we're simply testing that Axios get has been called again this is now deprecated logic

41
00:02:27,040 --> 00:02:30,190
so we can remove this entire fetch as job test.

42
00:02:31,510 --> 00:02:35,490
Moving on forward, we can remove any references to Axios dot, get in further tests.

43
00:02:35,500 --> 00:02:37,440
So right here I'm going to remove that line.

44
00:02:37,900 --> 00:02:40,600
I'm going to remove any further lines.

45
00:02:40,600 --> 00:02:43,690
I'm just looking for those red squiggles to indicate an incorrect reference.

46
00:02:43,930 --> 00:02:46,000
So right here and right here.

47
00:02:47,360 --> 00:02:47,670
All right.

48
00:02:47,670 --> 00:02:49,160
So that moves us one step closer.

49
00:02:49,490 --> 00:02:55,190
So now what we need to do is simulate a view store being available to this component of remember.

50
00:02:55,200 --> 00:03:00,050
The way that View X makes his store available is via the dollar sign store property.

51
00:03:00,320 --> 00:03:06,440
So what we can do is use the exact same strategy we used to mark out the dollar sign root object which

52
00:03:06,440 --> 00:03:07,490
is provided by the router.

53
00:03:07,610 --> 00:03:13,820
We simply use the Mocs property on our global property, on our configuration object, and we can provide

54
00:03:13,970 --> 00:03:15,800
an object to represent the store.

55
00:03:16,160 --> 00:03:21,710
So in every test we are running this create config function and currently we are allowing every test

56
00:03:21,710 --> 00:03:23,270
to provide a simple route object.

57
00:03:23,450 --> 00:03:29,900
And now my intent will be to make every test pass in a sample store object as well, so every test can

58
00:03:29,900 --> 00:03:33,230
customize how it would like its own store to look for that test.

59
00:03:33,560 --> 00:03:38,060
Of course, if we want to create a default value, we can right here in our parameter list.

60
00:03:38,330 --> 00:03:41,870
But for now I'm going to make each test, have to provide its own store.

61
00:03:42,500 --> 00:03:45,470
So I'm going to modify the create config function right here.

62
00:03:45,470 --> 00:03:50,300
I'm going to add another parameter of dollar sign store and this will be the JavaScript object that

63
00:03:50,300 --> 00:03:53,090
is supposed to represent our of the U.S. store.

64
00:03:53,360 --> 00:03:58,010
So right here I'm going to add that dollar sign store to our max object.

65
00:03:58,010 --> 00:03:59,360
I'm using elastic syntax.

66
00:03:59,360 --> 00:04:04,730
So now my max object will have a dollar sign store property set to whatever object we pass in.

67
00:04:05,000 --> 00:04:09,560
And that means we have to modify every test now to give two arguments to create config.

68
00:04:09,950 --> 00:04:12,890
So in this lesson I just want to fix one failing test.

69
00:04:12,890 --> 00:04:15,410
And then in the very next lesson we can focus on the rest of them.

70
00:04:15,740 --> 00:04:20,450
So what I'm going to do here is for this very first test of it creates a job listing for a maximum of

71
00:04:20,450 --> 00:04:20,960
ten jobs.

72
00:04:21,140 --> 00:04:25,610
I'm going to focus on this test by using the fit function instead of the ID function.

73
00:04:25,900 --> 00:04:26,870
So I'm going to save this.

74
00:04:26,870 --> 00:04:29,990
And we should see just one failing test for the jobless test component.

75
00:04:30,230 --> 00:04:30,830
There it is.

76
00:04:30,890 --> 00:04:31,880
Can see one failed.

77
00:04:32,120 --> 00:04:38,660
If I scroll up, we have just this one test and we can try to get it to pass and that'll be our experiment

78
00:04:38,660 --> 00:04:40,220
before we adjust the other failures.

79
00:04:40,580 --> 00:04:43,160
Okay, so what do we need in this test?

80
00:04:43,160 --> 00:04:46,790
We need to create a store object that we can provide it to create config.

81
00:04:47,120 --> 00:04:52,790
So right here, after our root object, I'm going to create a icons called Dollar Sign Store and I'm

82
00:04:52,790 --> 00:04:54,080
going to set this equal to an object.

83
00:04:54,290 --> 00:04:57,140
And this object will play the role of a view store.

84
00:04:57,380 --> 00:05:02,540
Again, going back to all the ideas we talked about earlier, we could create a view store in line here,

85
00:05:02,540 --> 00:05:07,100
but we don't need to because all we fundamentally need is something that is good enough to be a store.

86
00:05:07,490 --> 00:05:09,950
So the first thing I want you to focus on is map state.

87
00:05:09,950 --> 00:05:15,470
As a reminder, Map State takes the view store and it maps its properties to the components computer

88
00:05:15,470 --> 00:05:15,890
properties.

89
00:05:16,160 --> 00:05:20,390
So in order to do that, we're going to need to have a jobs property on our object.

90
00:05:20,660 --> 00:05:26,410
But remember as well, we do not make that property a top level property because within our view store

91
00:05:26,510 --> 00:05:31,970
there is also a state property and it is that state property that is an object with the actual view

92
00:05:32,090 --> 00:05:32,780
store state.

93
00:05:33,620 --> 00:05:38,450
You may have forgotten this because you may not recall it, but remember this store right here is the

94
00:05:38,450 --> 00:05:39,920
top level big object.

95
00:05:39,920 --> 00:05:43,070
It has methods like commit, it has methods like dispatch.

96
00:05:43,340 --> 00:05:47,060
It's not the actual object that we define of our own view x global data.

97
00:05:47,120 --> 00:05:50,420
We have to access the nested state property to get that.

98
00:05:50,630 --> 00:05:55,220
So right here I'm going to define that state property and I'm going to have to give it a jobs property

99
00:05:55,220 --> 00:05:57,500
so that my maps state will work over here.

100
00:05:57,830 --> 00:06:00,770
Now what we set equal to jobs can be whatever we want.

101
00:06:01,100 --> 00:06:04,340
So for now, what I'm just going to do is I'm going to use a technique we used earlier.

102
00:06:04,370 --> 00:06:06,740
I'm going to use this capital array syntax.

103
00:06:06,950 --> 00:06:12,410
I'm going to provide it an argument of 15, which means I'm going to create an array of 15 spots or

104
00:06:12,410 --> 00:06:13,250
15 elements.

105
00:06:13,430 --> 00:06:19,610
And then to specify what I want each element to be, I can invoke the fill method and provided a sample

106
00:06:19,610 --> 00:06:20,060
argument.

107
00:06:20,360 --> 00:06:26,270
So for example, if I simply provide an empty object, what I'm going to create is an array of 15 empty

108
00:06:26,270 --> 00:06:29,930
objects, an array with 15 elements, each of which is an empty object.

109
00:06:30,200 --> 00:06:31,820
So is this a real job?

110
00:06:31,970 --> 00:06:37,460
No, but it doesn't have to be, because for the purposes of Map State to work, all we care about is

111
00:06:37,460 --> 00:06:42,320
that Map State needs a jobs property and it needs to be something that it can iterate over because later

112
00:06:42,320 --> 00:06:44,690
on it's going to slice it using this logic right here.

113
00:06:44,810 --> 00:06:49,970
So I do need an array because an array has a slice method, but what that array contains doesn't really

114
00:06:49,970 --> 00:06:52,250
matter for the purposes of what this component is doing.

115
00:06:52,370 --> 00:06:55,640
It just needs an array it can slice an array of anything should suffice.

116
00:06:55,790 --> 00:07:02,180
Okay, so now I need to provide that stored to my create config factory function and that will of course

117
00:07:02,180 --> 00:07:02,780
feed it in.

118
00:07:03,200 --> 00:07:05,270
And when it feeds it in, it's going to provide it to our max.

119
00:07:05,270 --> 00:07:10,400
And so we're going to mark out this the dollar sign store in the component as this test is running.

120
00:07:10,750 --> 00:07:11,270
All right.

121
00:07:11,570 --> 00:07:13,160
So that moves us one step closer.

122
00:07:13,160 --> 00:07:16,970
And if I scroll up, we should see that our original failure went away.

123
00:07:16,970 --> 00:07:20,630
So we're having we're not having a problem with the slice functionality anymore.

124
00:07:20,780 --> 00:07:26,120
However, you will see that we have another issue right here and it says this that stored that dispatch

125
00:07:26,120 --> 00:07:27,110
is not a function.

126
00:07:27,440 --> 00:07:32,720
So remember when our job listings component is mounted, it automatically runs the mounted lifecycle

127
00:07:32,720 --> 00:07:38,690
hook, which turns to the dollars and store property, and it expects it to have a method called dispatch,

128
00:07:38,690 --> 00:07:39,590
which it can invoke.

129
00:07:39,830 --> 00:07:44,450
Now of course, in the real world, view X will give us the store object and it will have a dispatch

130
00:07:44,450 --> 00:07:44,750
method.

131
00:07:44,960 --> 00:07:46,790
But the problem in our test is our.

132
00:07:46,910 --> 00:07:52,700
Mark store our JavaScript object that is pretending to be you doesn't have the dispatch method, so

133
00:07:52,700 --> 00:07:57,230
it evaluates to undefined and thus it cannot invoke it and thus says Hey, that's not a function.

134
00:07:57,500 --> 00:08:03,770
So all we have to do here is to make sure that our fig store does indeed have a dispatch property and

135
00:08:03,770 --> 00:08:07,070
we get set that equal to an arrow function to any kind of function we want.

136
00:08:07,190 --> 00:08:11,870
I think one of the simplest things that we can do here is simply make it equal to a just function that's

137
00:08:11,870 --> 00:08:15,350
a perfect little replacement for a function, and that should do it.

138
00:08:15,560 --> 00:08:16,940
So right here, I'm going to save this.

139
00:08:17,120 --> 00:08:20,090
So now our component has a dollar sign store object.

140
00:08:20,240 --> 00:08:24,500
That object will have a dispatch, which means our mounted lifecycle hunk will run.

141
00:08:24,620 --> 00:08:30,860
It'll no longer have undefined because it will be able to find the dispatch method on our store object.

142
00:08:31,070 --> 00:08:37,010
Granted, dispatch will be the just function, but that's totally fine because in this test all we really

143
00:08:37,010 --> 00:08:39,710
care about is that we see the proper amount of job listings.

144
00:08:39,860 --> 00:08:46,130
And so now we can see we have a view fake store with 15 jobs and we're double checking that we are rendering

145
00:08:46,160 --> 00:08:47,570
ten job listings on the screen.

146
00:08:47,720 --> 00:08:52,820
And that is exactly the original intent of this component and what the original test was testing for.

147
00:08:52,970 --> 00:08:53,270
All right.

148
00:08:53,510 --> 00:08:59,090
So this is a good walkthrough of our new implementation of a mock store and our new create config function,

149
00:08:59,090 --> 00:09:00,920
which is expanded to use two arguments.

150
00:09:01,070 --> 00:09:03,410
So using this approach, we're going to fix the remaining tests.

151
00:09:03,650 --> 00:09:07,970
So before I call it a day, let me just get rid of this fit function and change it back to it.

152
00:09:08,150 --> 00:09:12,470
And then in the very next lesson, we're going to continue hacking away at the other failing tests.
