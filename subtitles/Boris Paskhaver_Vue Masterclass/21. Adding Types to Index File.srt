1
00:00:00,500 --> 00:00:01,330
Okay.

2
00:00:01,330 --> 00:00:03,520
So we have made a lot of progress.

3
00:00:03,670 --> 00:00:09,280
And the good news is there's only one file remaining in our source store directory that needs to be

4
00:00:09,280 --> 00:00:12,700
converted to TypeScript and it is our index file.

5
00:00:13,030 --> 00:00:19,540
Just like in JavaScript, if we have an index that's found in a folder, TypeScript will think of that

6
00:00:19,540 --> 00:00:23,140
file almost as the default entry point into that folder.

7
00:00:23,290 --> 00:00:27,010
If we ever reference that folder in an import, it's right here.

8
00:00:27,010 --> 00:00:30,550
I'm going to change index dogs to index dot tips.

9
00:00:31,570 --> 00:00:35,620
And luckily on the right hand side, we're going to see that there's going to be no violations.

10
00:00:35,830 --> 00:00:38,110
So this file is good as is.

11
00:00:38,440 --> 00:00:43,900
One super cool thing I want to show you is if I hover my mouse over store, we're going to see it's

12
00:00:43,900 --> 00:00:47,170
going to have this store interface that represents our view store.

13
00:00:47,440 --> 00:00:54,070
And you can see the generic type that it is storing within or that it's accepting is our global state

14
00:00:54,070 --> 00:00:54,610
interface.

15
00:00:54,820 --> 00:00:58,060
And you might be curious, how is TypeScript able to figure that out?

16
00:00:58,360 --> 00:01:03,160
Well, remember, in our configuration object that we are passing to the create store function from

17
00:01:03,160 --> 00:01:08,140
the UX, we have our state function and it is in the state function if I go to that file.

18
00:01:09,200 --> 00:01:10,640
If it works, let me try this approach.

19
00:01:10,640 --> 00:01:11,090
There we go.

20
00:01:11,390 --> 00:01:16,400
In that state function, we specified that the return value is going to be above type global state.

21
00:01:16,700 --> 00:01:22,910
So somewhere in the internals of the type of create store, the View X team wrote the logic to say,

22
00:01:23,090 --> 00:01:29,930
hey, whatever the state function returns is also going to be the shape of the final store, or at least

23
00:01:29,930 --> 00:01:30,980
it's state property.

24
00:01:31,220 --> 00:01:37,340
So in other words, all of our typing throughout various parts of the code base in various files all

25
00:01:37,340 --> 00:01:42,200
comes together because the more type annotations that we provide, the more that TypeScript is able

26
00:01:42,200 --> 00:01:47,690
to understand how all these pieces work together and is thus more likely to identify any potential errors

27
00:01:47,840 --> 00:01:53,090
or mismatches as far as types or incorrect methods or incorrect argument types, etc..

28
00:01:53,180 --> 00:01:55,490
And we're all kind of starting to see it come together.

29
00:01:55,850 --> 00:01:57,320
So congratulations with that.

30
00:01:57,320 --> 00:02:02,570
Our source store directory is now completely in TypeScript and moving on in the next section, we're

31
00:02:02,570 --> 00:02:07,250
going to talk about how we can convert our component files to be in TypeScript as well.

32
00:02:07,520 --> 00:02:11,600
So lots of fun up ahead and I will see you in the next lesson for a quick section reveal.
