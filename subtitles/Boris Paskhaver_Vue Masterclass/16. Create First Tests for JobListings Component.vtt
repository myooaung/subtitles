WEBVTT
1
00:00:00.460 --> 00:00:05.270
All right, so let's write a couple tests for our job listings component.

2
00:00:05.290 --> 00:00:07.810
This component really has two responsibilities.

3
00:00:08.050 --> 00:00:14.560
The first is making an API request to this endpoint, and the second is rendering as many job listings

4
00:00:14.560 --> 00:00:17.500
as there are jobs in the API response.

5
00:00:17.950 --> 00:00:22.690
So with that said, we can remove this code we have from the previous lesson, this invocation of yep,

6
00:00:22.840 --> 00:00:27.820
we still want to keep the import of Axios and the mocking of that library because this will affect the

7
00:00:27.820 --> 00:00:29.110
component when we mount it.

8
00:00:29.470 --> 00:00:33.490
But for now, let's proceed with the import of our mount function as well as our component.

9
00:00:33.910 --> 00:00:36.400
So for this test I'm actually going to import shallow mount.

10
00:00:36.400 --> 00:00:41.800
I see no reason to do a full mount of the job listings component because we already have a separate

11
00:00:41.800 --> 00:00:43.960
test suite just for the job listing component.

12
00:00:44.170 --> 00:00:49.930
And I really only care that job listings renders as many job listing components as there are jobs.

13
00:00:50.080 --> 00:00:52.750
I don't really care about the internal details of this component.

14
00:00:52.750 --> 00:00:53.980
I don't care if it's a stub.

15
00:00:54.190 --> 00:00:59.650
So I'm totally fine stubbing out all of my children in this component by using the shallow mount function.

16
00:00:59.920 --> 00:01:02.890
So right here, shallow mount from view test utils.

17
00:01:04.420 --> 00:01:05.200
That looks good.

18
00:01:05.200 --> 00:01:10.240
Let's also import our actual job listings component that is going to come from the source directory

19
00:01:10.450 --> 00:01:11.320
components.

20
00:01:11.320 --> 00:01:12.310
Job Results.

21
00:01:12.340 --> 00:01:13.480
Job listings.

22
00:01:15.170 --> 00:01:17.480
Let's describe our job listings component.

23
00:01:19.200 --> 00:01:21.570
Let's provide an arrow function as the second argument.

24
00:01:23.020 --> 00:01:23.380
All right.

25
00:01:23.710 --> 00:01:28.600
So the first test that I'd like to write is simply going to test that we have made the right request

26
00:01:28.600 --> 00:01:30.550
to the right endpoint to get the jobs.

27
00:01:30.760 --> 00:01:32.680
We don't care about running a real server.

28
00:01:32.890 --> 00:01:38.350
So all we really care about is if we mount the component, do we properly call the get method on the

29
00:01:38.350 --> 00:01:43.900
access object and do we give it this argument of HTP localhost, 3000 jobs?

30
00:01:44.410 --> 00:01:46.120
So right here I'm going to write a test.

31
00:01:46.690 --> 00:01:48.210
It fetches jobs.

32
00:01:49.570 --> 00:01:54.310
Recall that the mounted lifecycle hook automatically runs when the component is mounted.

33
00:01:54.490 --> 00:01:58.810
So as soon as I'm multi-component, it should automatically make this request.

34
00:01:58.810 --> 00:02:03.580
And because we have marked out Axios, we can simply test after we mount the component.

35
00:02:03.730 --> 00:02:07.420
Has this mark been properly invoked and called with the right argument?

36
00:02:07.720 --> 00:02:10.660
So right here I'm going to shallow mount my job listings component.

37
00:02:10.960 --> 00:02:14.980
I don't even need to assign it to a wrapper constant or anything like that.

38
00:02:15.280 --> 00:02:21.730
And then below, I'm going to expect that if I talk to my Axios get method, which is going to be a

39
00:02:21.730 --> 00:02:23.290
just mock function at this point.

40
00:02:23.560 --> 00:02:28.390
You may recall from earlier in the course that if we provide a mock function to expect, there is a

41
00:02:28.390 --> 00:02:35.410
special assertion called to have been called with that validates that that mock function first has been

42
00:02:35.410 --> 00:02:41.050
invoked or called, and secondly, that it has been invoked with a specific argument or arguments.

43
00:02:41.380 --> 00:02:43.750
So here I want just to test that.

44
00:02:43.750 --> 00:02:48.700
Yes, we have called the get method, which should happen automatically right here mounted, but also

45
00:02:48.700 --> 00:02:56.740
that it has been invoked with the expected URL, which is HTP call in slash slash localhost, 3000 slash

46
00:02:56.740 --> 00:02:57.280
jobs.

47
00:02:58.360 --> 00:02:59.230
I'm going to save this.

48
00:02:59.440 --> 00:03:01.560
And we do have a passing test.

49
00:03:01.570 --> 00:03:05.020
We have a couple of warnings here, which we will get back to in just a second.

50
00:03:05.230 --> 00:03:09.250
But just to show you that this test is testing for the right thing, I'm just going to make this test

51
00:03:09.250 --> 00:03:13.540
fail by, let's say, removing a character right here and saving it and rerunning it.

52
00:03:13.750 --> 00:03:19.210
And you can see right now that we're now going to get a test failure because the test is expecting a

53
00:03:19.330 --> 00:03:21.340
endpoint to be hit of slash job.

54
00:03:21.520 --> 00:03:27.400
But now we are actually receiving an end point from our actual implementation of slash jobs.

55
00:03:27.580 --> 00:03:32.500
And what that tells me is that indeed, when we are mounting job listings, the code is running through

56
00:03:32.500 --> 00:03:33.010
mounted.

57
00:03:33.160 --> 00:03:38.230
It is successfully calling our get mock function with this string and just as properly saying, hey,

58
00:03:38.230 --> 00:03:43.870
I got slash job's not slash job, which is kind of our certainty, our validation that this code is

59
00:03:43.870 --> 00:03:44.650
properly running.

60
00:03:44.980 --> 00:03:49.270
So with that, I can change this back to jobs to make this a passing test.

61
00:03:49.520 --> 00:03:55.270
And now let's take a look at our actual warning right here on Handle the promise rejection warning cannot

62
00:03:55.270 --> 00:03:57.220
read property data of undefined.

63
00:03:57.610 --> 00:04:00.280
So there's actually a couple issues here.

64
00:04:00.520 --> 00:04:06.790
Number one, you'll notice that the response object that we get back from this get method call has a

65
00:04:06.790 --> 00:04:07.750
data property.

66
00:04:07.750 --> 00:04:10.600
So it is an object fundamentally at the end of the day.

67
00:04:10.960 --> 00:04:18.610
Now, when Gest mocks out any of the live libraries methods, and when I say library, I mean Axios.

68
00:04:18.910 --> 00:04:24.460
What just does by default is it creates a mock function that returns undefined by default.

69
00:04:24.760 --> 00:04:29.950
So when we have an object, when we return, undefined, obviously there is no data.

70
00:04:29.950 --> 00:04:32.230
Property cannot read property data of undefined.

71
00:04:32.410 --> 00:04:34.270
And that's why we're getting this issue.

72
00:04:34.540 --> 00:04:40.510
So we can get a little bit more technical when it comes to our box and we can tell the Axios library

73
00:04:40.510 --> 00:04:46.600
or just more specifically that when the get method is called, don't just use your standard, just mock

74
00:04:46.600 --> 00:04:46.990
function.

75
00:04:47.140 --> 00:04:50.680
Use a mock function that returns an object with a data property.

76
00:04:50.980 --> 00:04:56.440
But we have to be a little bit more careful here because it's not just a return value like a regular

77
00:04:56.440 --> 00:05:02.770
function, it's actually a resolved value because the get method is asynchronous and returns a promise.

78
00:05:02.980 --> 00:05:07.750
That's why we have to use this a weight keyword in front of it, because it's some kind of asynchronous

79
00:05:07.750 --> 00:05:10.120
operation which will take some amount of time.

80
00:05:10.360 --> 00:05:14.710
So we need our test to simulate an async function, not a plane function.

81
00:05:15.010 --> 00:05:16.810
So right here, let me just show you the syntax.

82
00:05:17.350 --> 00:05:19.300
I can go into my Axios object.

83
00:05:19.300 --> 00:05:23.620
I can get my get method, which is now a just mock function.

84
00:05:23.770 --> 00:05:26.290
And that mock function is a whole bunch of methods on it.

85
00:05:26.530 --> 00:05:32.140
So for example, one of those methods is mock return value, which allows me to specify the return value

86
00:05:32.140 --> 00:05:34.570
that the function should return when it's invoked.

87
00:05:34.840 --> 00:05:38.110
So for example, if I put in five here and then I did Axios.

88
00:05:39.080 --> 00:05:40.820
Got get below and invoked it.

89
00:05:40.820 --> 00:05:42.170
Let me just show you this in the test.

90
00:05:44.130 --> 00:05:46.720
You're going to see that that function is going to return five.

91
00:05:46.740 --> 00:05:47.070
Right.

92
00:05:47.080 --> 00:05:53.550
So that's that's going to work, however, to more closely simulate the idea of an actual asynchronous

93
00:05:53.550 --> 00:05:54.840
function that returns a promise.

94
00:05:54.960 --> 00:05:57.990
We should change this to mock resolved value.

95
00:05:58.320 --> 00:06:05.130
That basically means, hey, just treat Axios dot get as a function that returns a promise that resolves

96
00:06:05.130 --> 00:06:06.360
to a value of five.

97
00:06:06.570 --> 00:06:06.900
All right.

98
00:06:07.110 --> 00:06:09.300
Now, in this case, of course, we don't want the value five.

99
00:06:09.300 --> 00:06:14.760
We want an object that is similar to the object that the real get method returns to us, which is going

100
00:06:14.760 --> 00:06:16.440
to be an object with a data property.

101
00:06:16.620 --> 00:06:19.680
And of course that data property is going to be an array of our jobs.

102
00:06:19.830 --> 00:06:22.170
We don't really care about the jobs for this test.

103
00:06:22.170 --> 00:06:23.310
We don't care about the response.

104
00:06:23.520 --> 00:06:25.400
So a simple array should suffice.

105
00:06:25.410 --> 00:06:28.170
We can almost pretend as if the back end returned nothing.

106
00:06:28.320 --> 00:06:33.900
For the purposes of this test, if we are caring about the the calling of the Axios get method with

107
00:06:33.900 --> 00:06:36.450
the right argument, we don't care what the response is.

108
00:06:36.570 --> 00:06:42.420
We just need some kind of asynchronous value that has a data property so we can extract it right here

109
00:06:42.420 --> 00:06:43.350
in the implementation.

110
00:06:43.680 --> 00:06:48.900
So with that, I'm going to remove my console.log, save this and you can see our test passes and we

111
00:06:48.900 --> 00:06:50.520
also get rid of the warning.

112
00:06:50.940 --> 00:06:51.300
All right.

113
00:06:51.630 --> 00:06:54.270
So now we can go ahead and write our second test.

114
00:06:54.270 --> 00:07:01.560
So right here, the second responsibility of the job listings component is that it creates a job listing

115
00:07:02.700 --> 00:07:04.770
for each received job.

116
00:07:06.720 --> 00:07:10.020
So right here, what I'm going to do is I'm going to copy the first two lines from above.

117
00:07:10.590 --> 00:07:15.480
And this time around I am going to assign my wrapper to a constant called wrapper.

118
00:07:16.370 --> 00:07:20.630
And this is where we have to be a little bit more clever because we want to test that.

119
00:07:20.630 --> 00:07:27.440
We are rendering as many job listing components as there are jobs in the data that we get back from

120
00:07:27.440 --> 00:07:32.750
the response rate because we are iterating over the job slice of data and we are writing the job slice

121
00:07:32.750 --> 00:07:36.530
of data from that response object that comes from Axios.

122
00:07:36.890 --> 00:07:42.290
So in this case, if we have an array with no objects in it, we're going to have zero job listing components.

123
00:07:42.590 --> 00:07:45.830
So we have to pick some kind of arbitrary number.

124
00:07:45.980 --> 00:07:49.190
Let's say I'm going to choose 15 just to have a nice healthy number.

125
00:07:49.430 --> 00:07:56.060
And so if we have an array of 15 objects, then we expect that we're going to have 15 job listing components.

126
00:07:56.450 --> 00:08:00.440
So instead of populating an array with 15 objects, which is going to take a lot of time, there is

127
00:08:00.440 --> 00:08:02.540
actually a JavaScript shortcut we can use.

128
00:08:02.900 --> 00:08:09.140
So if you write array with a capital A and then provide a pair of parentheses, you can actually create

129
00:08:09.140 --> 00:08:10.880
an array of a given length.

130
00:08:11.090 --> 00:08:15.620
So for example, if I provide 15, that's going to create an array of 15 elements.

131
00:08:15.890 --> 00:08:18.290
The question is, what is a single element?

132
00:08:18.290 --> 00:08:21.140
What are those 15 items that are going to go into the array?

133
00:08:21.500 --> 00:08:28.250
While in order to specify that I can invoke a method on this called fill and to fill I provide a sample

134
00:08:28.250 --> 00:08:34.100
element and JavaScript is going to emulate or copy that element 15 times throughout this array.

135
00:08:34.400 --> 00:08:39.740
So for now, for it to represent a job, let's just do a simple empty JavaScript object.

136
00:08:39.980 --> 00:08:44.330
So what I have here is an array of 15 empty JavaScript objects.

137
00:08:44.720 --> 00:08:48.100
Now, why don't I care about the specifics of the object?

138
00:08:48.110 --> 00:08:52.370
Why don't I care if it actually has a title property and a description property like a real job?

139
00:08:52.760 --> 00:08:56.210
Well, for the purposes of this test, I don't think this test really cares.

140
00:08:56.420 --> 00:08:59.330
We really care about 15 job listing components.

141
00:08:59.510 --> 00:09:02.810
I don't really care whether each job is the real job object.

142
00:09:02.990 --> 00:09:05.990
I really just care about 15 job listings being rendered.

143
00:09:06.140 --> 00:09:08.660
So as long as I have an array with 15 of anything.

144
00:09:08.750 --> 00:09:14.330
This V for loop should work properly and we should still test the implementation without getting super

145
00:09:14.330 --> 00:09:19.130
deep into what this object has to be and making the test more convoluted and larger.

146
00:09:19.220 --> 00:09:25.430
I don't need to write 15 sample job objects here and fill up 50 lines of space when I really need for

147
00:09:25.430 --> 00:09:27.230
this v4 to work is just an array.

148
00:09:27.500 --> 00:09:29.060
That's really all I need for the for it to work.

149
00:09:29.300 --> 00:09:30.890
So this is good enough for this test.

150
00:09:31.070 --> 00:09:35.930
And the reader or the other developer who is reading after us can see, okay, you have an array of

151
00:09:35.930 --> 00:09:36.620
15 items.

152
00:09:36.620 --> 00:09:41.000
I understand where your assertion that you have 15 job listing components is coming from.

153
00:09:41.000 --> 00:09:42.140
The numbers must match.

154
00:09:42.590 --> 00:09:49.010
So below what I want to do is look for my job listings and of course what I'm going to do here.

155
00:09:50.000 --> 00:09:55.490
Instead of invoking the find a method which is going to find the first occurrence of whatever we specify

156
00:09:55.550 --> 00:09:58.640
either an element or a CSC class or a dataset attribute.

157
00:09:58.910 --> 00:10:04.580
Instead of that, I'm going to invoke the find all method, which is going to find all occurrences of

158
00:10:04.580 --> 00:10:05.690
whatever we specify.

159
00:10:05.990 --> 00:10:12.620
So here I want to find all occurrences of a data test attribute, and that data test attribute is going

160
00:10:12.620 --> 00:10:14.730
to be job listing.

161
00:10:14.750 --> 00:10:16.170
Again, that name is up to me.

162
00:10:16.190 --> 00:10:21.110
I'm going to expect some number of occurrences of something in my template that's going to have this

163
00:10:21.110 --> 00:10:22.280
attribute of job listing.

164
00:10:22.580 --> 00:10:26.270
And so once I have that, this is going to be basically like an array like object.

165
00:10:26.510 --> 00:10:31.280
I want to validate that that array has 15 items in it.

166
00:10:31.760 --> 00:10:35.570
Because remember, this array represents all occurrences of a job listing.

167
00:10:35.780 --> 00:10:41.120
Technically, it represents all occurrences of something that has a dot, a test attribute of job listing,

168
00:10:41.240 --> 00:10:42.830
but it's the same conceptual idea.

169
00:10:43.220 --> 00:10:50.090
So in order to validate and erase length, we can, of course take job listings and get its length property

170
00:10:50.090 --> 00:10:52.430
and check that that is equal to 15.

171
00:10:52.640 --> 00:10:57.110
But there's actually a complimentary just nature that does this all in a single assertion.

172
00:10:57.320 --> 00:11:00.140
And that assertion is to have length.

173
00:11:01.310 --> 00:11:05.120
So that's going to take the object or the array and validate that it has a given length.

174
00:11:05.300 --> 00:11:07.370
And of course, what do I want this length to be?

175
00:11:07.580 --> 00:11:08.810
I want it to be 15.

176
00:11:09.110 --> 00:11:13.700
I want 15 elements or aspects or whatever you want to call it.

177
00:11:13.700 --> 00:11:18.830
15 things in my template that are going to have this data test attribute of job listing.

178
00:11:19.250 --> 00:11:21.980
So when I save this and run this test, we're going to have a failure.

179
00:11:22.100 --> 00:11:25.920
We expected a length of 15, but we received a length of zero.

180
00:11:26.120 --> 00:11:26.720
Makes sense.

181
00:11:26.720 --> 00:11:30.800
It was not able to find anything in our template with a data test of job listing.

182
00:11:31.070 --> 00:11:36.740
So of course, right here for our job listing component, as we iterate 15 times, we're going to create

183
00:11:36.740 --> 00:11:37.550
15 of those.

184
00:11:37.670 --> 00:11:42.050
And to each one of those 15 job listings, I'm going to add the same data test attribute.

185
00:11:42.230 --> 00:11:45.080
It's totally okay if it's duplicate because we're looking for the same one.

186
00:11:45.350 --> 00:11:49.550
I'm going to give each job listing component the data test attribute of job listing.

187
00:11:49.730 --> 00:11:55.340
And so we expect this test to passed based expect this test to pass, but it does not.

188
00:11:55.580 --> 00:11:58.100
Don't worry, our test is pretty much close to done.

189
00:11:58.100 --> 00:12:01.760
There's one thing we're missing, and I'm going to show you what it is in the very next lesson.
