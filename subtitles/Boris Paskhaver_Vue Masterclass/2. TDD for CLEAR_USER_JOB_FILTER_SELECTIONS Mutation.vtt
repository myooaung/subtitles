WEBVTT
1
00:00:00.870 --> 00:00:01.410
Okay.

2
00:00:01.410 --> 00:00:07.860
So now that we have a better grasp on what we're building, I want to open up the state's file and remind

3
00:00:07.860 --> 00:00:12.480
you that there are three properties that are keeping track of the users filter selections.

4
00:00:12.720 --> 00:00:18.030
We have selected organizations for the organizations, selected job types for the job types strings

5
00:00:18.210 --> 00:00:20.490
and selected degrees for the degree strings.

6
00:00:20.850 --> 00:00:25.740
And of course, when the user clicks the clear filters button, what I ultimately want to happen is

7
00:00:25.740 --> 00:00:31.950
I want to clear all three of these arrays, and then I also want to remove all of the checkboxes that

8
00:00:31.950 --> 00:00:32.820
are on the screen.

9
00:00:33.210 --> 00:00:35.310
So let's begin on the view side of things.

10
00:00:35.460 --> 00:00:39.000
We want to modify a piece of state in our view store.

11
00:00:39.090 --> 00:00:43.080
And of course, in order to do that, we're going to need to write a new mutation.

12
00:00:43.290 --> 00:00:48.720
We're going to need to add a mutation whose responsibility it will be to clear these three arrays.

13
00:00:49.050 --> 00:00:51.720
So I'm going to open up my mutations test file.

14
00:00:52.470 --> 00:00:53.040
There it is.

15
00:00:53.220 --> 00:00:58.740
And you can see all of our current mutations mostly receive some new state and override a property.

16
00:00:58.980 --> 00:01:03.750
But there's nothing stopping us from clearing our property as well, or setting it back to its original

17
00:01:03.750 --> 00:01:07.440
state, or even having a mutation that affects multiple properties.

18
00:01:07.470 --> 00:01:09.210
That's going to be a new thing we cover here.

19
00:01:09.450 --> 00:01:12.960
All of our other mutations affect only one property on our state.

20
00:01:13.140 --> 00:01:14.580
But that's not a requirement, right?

21
00:01:14.580 --> 00:01:19.530
Because a mutation is simply a method that updates the state and a mutation can certainly update more

22
00:01:19.530 --> 00:01:20.250
than one property.

23
00:01:20.580 --> 00:01:24.270
So with that said, I'm going to open up my test file and we're going to write a test for this.

24
00:01:24.840 --> 00:01:25.500
So right here.

25
00:01:27.000 --> 00:01:29.250
We have our describe block for mutations.

26
00:01:29.280 --> 00:01:34.140
This is in our mutations that test that's false and I'm going to scroll all the way down and create

27
00:01:34.140 --> 00:01:36.270
a new described block for my new mutation.

28
00:01:36.660 --> 00:01:43.890
We're going to follow a test driven development approach, and let's call this one clear user job filter

29
00:01:43.890 --> 00:01:44.520
selections.

30
00:01:46.100 --> 00:01:50.690
All right, so right here, I'm going to provide my arrow function, and in here I'll provide my function

31
00:01:50.690 --> 00:01:51.260
for it.

32
00:01:51.650 --> 00:01:57.110
It removes all job filters that user has chosen.

33
00:01:58.020 --> 00:02:00.340
And if you can think of a better description, feel free.

34
00:02:00.420 --> 00:02:01.350
Nothing wrong with that.

35
00:02:01.350 --> 00:02:04.320
I'm just trying my best to describe the user value of this mutation.

36
00:02:05.070 --> 00:02:07.350
So of course we're going to need to have a starting state.

37
00:02:07.740 --> 00:02:11.490
So going to follow the exact same paradigm I've followed with all the tests above.

38
00:02:11.730 --> 00:02:13.710
I'm going to create a concept called Starting State.

39
00:02:14.010 --> 00:02:16.610
We're going to use our create state helper function.

40
00:02:16.620 --> 00:02:22.170
Remember that what that function does is it utilizes our original state function to create a starting

41
00:02:22.170 --> 00:02:26.130
point for a valid U.S. store state following the global state interface.

42
00:02:26.430 --> 00:02:30.780
But we can also provide whatever properties we want here to customize at the starting state.

43
00:02:31.110 --> 00:02:36.600
So in this case, I want to show to a future reader that my three arrays, selected organizations,

44
00:02:36.600 --> 00:02:40.170
selected job types and selected degrees are not starting on empty.

45
00:02:40.380 --> 00:02:45.210
Then I'm going to run the mutation and confirm that they are indeed empty after the mutation completes.

46
00:02:45.510 --> 00:02:50.010
So what I'm going to do here is do selected organizations, and I'm going to start that off with an

47
00:02:50.010 --> 00:02:50.400
array.

48
00:02:50.700 --> 00:02:53.910
It doesn't matter what that array has, as long as it has at least one string.

49
00:02:54.210 --> 00:02:56.790
So maybe here I'll put something like random organization.

50
00:02:58.200 --> 00:02:59.730
Then I'll add another property here.

51
00:02:59.730 --> 00:03:01.260
Selected job types.

52
00:03:01.260 --> 00:03:04.470
And these are all valid properties on my state, so that's totally fine.

53
00:03:04.680 --> 00:03:06.090
This will also be an array.

54
00:03:06.300 --> 00:03:08.580
And right here I'll say something like random job type.

55
00:03:09.000 --> 00:03:12.480
It can be whatever string you want as long as we have a non empty array.

56
00:03:12.810 --> 00:03:16.020
And finally we're going to have selected degrees and that's going to be an array as well.

57
00:03:16.230 --> 00:03:18.420
And let's populate this with something like random degree.

58
00:03:19.500 --> 00:03:19.740
All right.

59
00:03:19.740 --> 00:03:23.130
So now I have a state that is a little bit different compared to having empty arrays.

60
00:03:23.130 --> 00:03:24.990
I now have three populated arrays.

61
00:03:25.200 --> 00:03:29.820
So you can almost imagine this being like the user has selected one checkbox in each of our three checkbox

62
00:03:29.820 --> 00:03:32.340
groups for an organization, a job type and a degree.

63
00:03:32.640 --> 00:03:34.350
Then I want to run my new mutation.

64
00:03:34.680 --> 00:03:40.080
So right here I have my mutations object imported and I'm going to assume that I have my mutation available

65
00:03:40.080 --> 00:03:42.600
and it's going to be called the clear user.

66
00:03:42.680 --> 00:03:48.000
Job filter selections and all mutation methods, of course, accept the current store state as the first

67
00:03:48.000 --> 00:03:48.420
argument.

68
00:03:48.420 --> 00:03:49.920
So I'm going to pass in starting state.

69
00:03:51.270 --> 00:03:53.600
And after that mutation runs, what do I expect?

70
00:03:53.610 --> 00:03:56.790
I expect that those three properties should be empty arrays.

71
00:03:57.060 --> 00:03:58.810
So right here I'm going to write three assertions.

72
00:03:59.100 --> 00:04:02.940
Expect that state that selected organizations.

73
00:04:04.160 --> 00:04:08.480
After the mutation runs, this should equal an empty array and remember ingest.

74
00:04:08.480 --> 00:04:13.610
Whenever you are comparing array equality you want to use the to equal matcher, not that to be matcher,

75
00:04:13.880 --> 00:04:15.010
so to equal an empty right.

76
00:04:15.350 --> 00:04:17.810
I also expect and sorry, this is not going to be state.

77
00:04:17.810 --> 00:04:19.130
This is going to be starting state.

78
00:04:20.390 --> 00:04:20.990
There we go.

79
00:04:21.590 --> 00:04:23.810
And I also am going to expect starting state.

80
00:04:25.190 --> 00:04:27.020
Dot selected job types.

81
00:04:27.020 --> 00:04:29.690
I want that property to also equal an empty array.

82
00:04:30.260 --> 00:04:32.570
And finally I expect starting state.

83
00:04:33.500 --> 00:04:34.970
Dot selected degrees.

84
00:04:34.970 --> 00:04:36.530
That's the third and final array.

85
00:04:36.800 --> 00:04:38.590
I want that to also be emptied out.

86
00:04:38.900 --> 00:04:43.970
So in one test, I'm going to validate that the mutation is going to clear all of these arrays, clear

87
00:04:43.970 --> 00:04:48.440
all of the user's selections, which is exactly what the purpose of that Clear Filters button is going

88
00:04:48.440 --> 00:04:51.050
to be as far as it comes to the View Store State.

89
00:04:51.380 --> 00:04:52.130
I'm going to save that.

90
00:04:52.130 --> 00:04:57.590
Of course we're going to fail because we do not have that named mutation method in our file.

91
00:04:57.830 --> 00:04:58.880
Let's go ahead and add that.

92
00:04:58.880 --> 00:05:00.980
So I'm going to open up my constants file right here.

93
00:05:02.420 --> 00:05:06.470
And this is kind of an interesting one because it's kind of global and applies to multiple categories.

94
00:05:06.470 --> 00:05:09.740
It kind of relates to organizations to job types and degrees.

95
00:05:10.070 --> 00:05:14.510
I think a reasonable place to put it for now is going to be right here since it relates to the content

96
00:05:14.510 --> 00:05:19.700
of all jobs are filtering all jobs, maybe there's a better place to put it, maybe a separate category

97
00:05:19.700 --> 00:05:20.570
as far as comments.

98
00:05:20.570 --> 00:05:22.040
But for now, I think this is okay.

99
00:05:22.520 --> 00:05:24.410
So right here I'm going to say export constant.

100
00:05:24.710 --> 00:05:29.480
And of course our mutation method is called the clear user job filter selections and that's going to

101
00:05:29.480 --> 00:05:31.700
be a string equal to the exact same thing.

102
00:05:31.970 --> 00:05:34.130
Clear user job filter selections.

103
00:05:35.640 --> 00:05:36.090
There we go.

104
00:05:36.480 --> 00:05:41.050
That allows me to open up my mutation file, and we're importing all of our constants up here.

105
00:05:41.070 --> 00:05:43.290
So I'm going to import that new constant right here.

106
00:05:43.650 --> 00:05:46.830
And immediately down below, I'm going to define a method with that name.

107
00:05:47.070 --> 00:05:50.580
So I'm going to provide square brackets to reference the constants value as the name.

108
00:05:50.850 --> 00:05:54.960
And right here, of course, I'm going to provide my first parameter for every mutation method.

109
00:05:55.170 --> 00:05:57.360
It's always going to be the current bookstore state.

110
00:05:57.660 --> 00:06:02.070
That parameter I call State and I'll tell TypeScript that it is going to be of type of global state,

111
00:06:02.370 --> 00:06:04.860
same as always, and then provide my method body.

112
00:06:05.280 --> 00:06:09.990
So if I save this just to allow my test to rerun and follow true test driven development, we should

113
00:06:09.990 --> 00:06:14.640
now see the correct failure, which is not no longer that the method doesn't exist, but rather that

114
00:06:14.640 --> 00:06:16.320
my arrays are not correct.

115
00:06:16.530 --> 00:06:21.600
So my output is telling me just the still seeing an array of random organization when we told it to

116
00:06:21.600 --> 00:06:22.780
expect an empty array.

117
00:06:22.800 --> 00:06:24.060
That's exactly what we expect.

118
00:06:24.450 --> 00:06:26.700
So right here, it's going to be exactly as you expect.

119
00:06:26.700 --> 00:06:30.330
We're going to access those three properties and set them back to the empty arrays.

120
00:06:30.660 --> 00:06:33.210
So state is our view store state.

121
00:06:33.390 --> 00:06:35.610
It has a selected organization's property.

122
00:06:35.790 --> 00:06:37.470
We're going to set that to be an empty array.

123
00:06:37.980 --> 00:06:40.950
We're going to do the exact same thing with selected job types.

124
00:06:41.310 --> 00:06:45.120
No matter how many values are in that array, we're simply going to overwrite it with a new array.

125
00:06:45.420 --> 00:06:47.790
And right here, state that's selected degrees as well.

126
00:06:48.060 --> 00:06:49.920
Set that back to an empty array.

127
00:06:50.880 --> 00:06:51.270
All right.

128
00:06:51.480 --> 00:06:56.070
So when this mutation runs, we're going to basically clear out all of the user selections as far as

129
00:06:56.220 --> 00:07:01.110
them being stored in the view store, which of course affects all of the getters that do the filter,

130
00:07:01.110 --> 00:07:02.700
jobs, etc., all that logic.

131
00:07:02.820 --> 00:07:05.910
That's why it's so important to take care of the view side of things as well.

132
00:07:06.060 --> 00:07:07.830
And then we'll get to the component a little bit later.

133
00:07:08.190 --> 00:07:08.460
All right.

134
00:07:08.460 --> 00:07:10.230
So with that, everything is clearing out.

135
00:07:10.230 --> 00:07:12.600
We have a mutation that gets us back to the state we want.

136
00:07:12.780 --> 00:07:16.450
Assuming the user clicks on the clear filters button.

137
00:07:16.470 --> 00:07:16.720
Right.

138
00:07:16.980 --> 00:07:18.060
So everything is looking good.

139
00:07:18.060 --> 00:07:19.830
And I will see you in the next lesson.
