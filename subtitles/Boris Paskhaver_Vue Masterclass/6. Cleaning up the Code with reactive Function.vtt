WEBVTT
1
00:00:00.510 --> 00:00:06.450
All right, in this lesson, I'll introduce you to another function from the View Library called reactive.

2
00:00:06.660 --> 00:00:13.650
Reactive works very similarly to how RAF does, but it is built and optimized specifically for objects.

3
00:00:13.830 --> 00:00:17.400
So we can only use the reactive function with objects.

4
00:00:17.460 --> 00:00:20.820
We cannot use it with primitive values like strings or numbers.

5
00:00:21.150 --> 00:00:26.850
So let's do a quick review on why the value development team wraps everything in an object with a value

6
00:00:26.850 --> 00:00:29.940
property whenever we provide an argument to the ref function.

7
00:00:30.270 --> 00:00:36.780
So if we take a simple value like let's say a number of five or a string like Hello, these are what

8
00:00:36.780 --> 00:00:39.030
are called primitive values in JavaScript.

9
00:00:39.030 --> 00:00:42.840
They are simple data types, which means they are not objects.

10
00:00:43.020 --> 00:00:47.520
And when I say they are not objects, that means that they do not have properties, they do not have

11
00:00:47.520 --> 00:00:48.000
methods.

12
00:00:48.000 --> 00:00:49.950
They are a much more lightweight context.

13
00:00:50.310 --> 00:00:54.300
So you might be curious if a string like Hello does not have methods.

14
00:00:54.300 --> 00:00:58.470
How can we call a method like two uppercase on a string in JavaScript?

15
00:00:58.770 --> 00:01:04.740
Well, behind the scenes, what this syntax actually does is it refers to a separate string object that

16
00:01:04.740 --> 00:01:06.990
is available in JavaScript.

17
00:01:06.990 --> 00:01:10.200
That is a totally different idea from a string primitive.

18
00:01:10.440 --> 00:01:11.850
It creates that object.

19
00:01:11.850 --> 00:01:14.340
It calls the two upper case method on it.

20
00:01:14.850 --> 00:01:19.980
Then it takes that return value and it throws that string object out of memory and returns it to you,

21
00:01:20.280 --> 00:01:20.460
right?

22
00:01:20.460 --> 00:01:25.380
So it's kind of an illusion because when we do a method like this, it's actually processing that request

23
00:01:25.500 --> 00:01:28.350
to a totally separate idea within the JavaScript language.

24
00:01:28.710 --> 00:01:34.320
But if we return back to the basics, if we look at a value like five or Hello, these are simple primitive

25
00:01:34.320 --> 00:01:40.320
data types that do not have more complex technical infrastructure around them, like methods or properties,

26
00:01:40.650 --> 00:01:45.060
which of course is problematic because if you want to build out some kind of functionality that's going

27
00:01:45.060 --> 00:01:51.060
to keep track of reactivity, keeping track of if something changes or doesn't change, and relaying

28
00:01:51.060 --> 00:01:57.000
that message to other objects in our program, we need the idea of methods and we need the idea of object

29
00:01:57.000 --> 00:01:57.510
state.

30
00:01:57.510 --> 00:02:00.930
We need to keep track of some data that is changing over time.

31
00:02:00.930 --> 00:02:06.810
That is why we use objects in an object oriented programming language, but yet we don't have that functionality

32
00:02:06.930 --> 00:02:08.130
with these simple data pips.

33
00:02:08.370 --> 00:02:14.730
So what the new development team does, of course, is they take whatever value we give to the ref function

34
00:02:14.730 --> 00:02:19.320
and they say, okay, I'm going to keep track of whatever value gave these setters hello.

35
00:02:19.500 --> 00:02:22.980
And then I'm going to add on all of these additional methods for reactivity.

36
00:02:23.460 --> 00:02:28.620
So you may have a method for reactivity, you may have another method for reactivity, whatever are

37
00:02:28.620 --> 00:02:33.450
the internal details and implementations that they need in order to keep track of this value changing.

38
00:02:33.630 --> 00:02:39.120
They add that on top, so they take an object and they wrap your core value and they are able to add

39
00:02:39.120 --> 00:02:42.600
on all of these additional functionalities by making it an object, right?

40
00:02:42.600 --> 00:02:47.400
That's why we always have this consistent interface where we invoke the ref function, we give it a

41
00:02:47.400 --> 00:02:52.470
value, and then we access that value through the value property on the object that the function returns

42
00:02:52.470 --> 00:02:53.010
back to us.

43
00:02:53.370 --> 00:02:59.790
Now you'll notice in the previous lesson we did this approach with an actual JavaScript object, right?

44
00:02:59.910 --> 00:03:01.530
And the results were the exact same.

45
00:03:01.530 --> 00:03:06.810
We had to access the value property in order to get that object and then access its internal property

46
00:03:06.810 --> 00:03:07.350
like name.

47
00:03:07.710 --> 00:03:13.860
But in comparison, if we start with a basic object like imagine we have an object with the value we

48
00:03:13.860 --> 00:03:15.630
have above like name Boris.

49
00:03:15.630 --> 00:03:22.590
Right, this object is a JavaScript object, so it already supports the ability to add methods and add

50
00:03:22.590 --> 00:03:23.970
behavior and add state.

51
00:03:23.970 --> 00:03:24.270
Right.

52
00:03:24.270 --> 00:03:25.590
It's a regular object.

53
00:03:25.590 --> 00:03:30.540
It's a more complex data type compared to a simple primitive like a number or a strength.

54
00:03:30.870 --> 00:03:36.330
So the reactive function is the view development team recognizing that rather than wrapping this whole

55
00:03:36.330 --> 00:03:42.660
thing up in a value property like so right and then adding all of this additional logic outside wrapped

56
00:03:42.660 --> 00:03:47.310
in its own higher level object instead of doing what we just did in the previous lesson with our ref

57
00:03:47.310 --> 00:03:52.980
functions that are making it more complex, what they said is, Hey, if you already have this object

58
00:03:52.980 --> 00:03:57.780
with a name property of Boris, why don't we add all of this reactive functions or reactive methods

59
00:03:57.780 --> 00:04:03.000
to be more specific inside here, because we already have the object that we need to be able to add

60
00:04:03.000 --> 00:04:04.680
and inject that extra behavior in.

61
00:04:04.860 --> 00:04:09.510
And the advantage of this is that it spares the need to use that value property because they can just

62
00:04:09.510 --> 00:04:12.870
inject that functionality into your plane JavaScript object.

63
00:04:12.870 --> 00:04:18.150
It has the support, the foundation, the infrastructure to enable that kind of behavior.

64
00:04:18.390 --> 00:04:20.670
So that is exactly what reactive it gives us.

65
00:04:20.670 --> 00:04:26.880
The reactive function which I'm going to import right here, is only meant to be used with objects because

66
00:04:26.880 --> 00:04:32.580
that is the only type of data, structure or object that supports this kind of behavior.

67
00:04:32.790 --> 00:04:36.810
So what I'm going to do here is instead of using ref, I'm going to change this to reactive.

68
00:04:37.230 --> 00:04:43.200
And again, reactive can only support objects that we never want to provide a string or a boolean or

69
00:04:43.620 --> 00:04:45.480
a number or anything like that to reactive.

70
00:04:45.480 --> 00:04:47.190
We only want to provide an object.

71
00:04:47.430 --> 00:04:53.040
And of course the advantage of this approach is whenever we are referencing person moving forward,

72
00:04:53.040 --> 00:04:56.670
it's still going to be a reactive object, it's still going to have the same idea.

73
00:04:56.910 --> 00:05:00.060
However, we can access the normal properties that we had.

74
00:05:00.090 --> 00:05:02.400
Defined directly on that object.

75
00:05:02.610 --> 00:05:05.550
So we no longer need to do person, dot value, dot name.

76
00:05:05.670 --> 00:05:09.450
We can shrink this to just person dot name, right?

77
00:05:09.450 --> 00:05:14.220
So person is going to be our reactive object, but somewhere in it it's still going to have our original

78
00:05:14.220 --> 00:05:16.140
name property that we defined, right?

79
00:05:16.410 --> 00:05:21.960
So now if I go here and I output the value of title and then right here, I'm also going to remove the

80
00:05:21.960 --> 00:05:27.330
value because if I want to overwrite the name property, I do it the regular way I do in JavaScript.

81
00:05:27.540 --> 00:05:32.760
Now, if I run this file, you're going to see we're going to have the same result we wanted, which

82
00:05:32.760 --> 00:05:38.490
is we have a computed function that recalculate the string whenever the value of the name property on

83
00:05:38.490 --> 00:05:39.270
person changes.

84
00:05:39.450 --> 00:05:45.300
So we change that from Boris to Peter and the computed property changed immediately as a result.

85
00:05:45.540 --> 00:05:51.390
But the best part about this design is we don't have to get that granular or that deep with that value

86
00:05:51.390 --> 00:05:51.840
property.

87
00:05:51.840 --> 00:05:54.690
So it's a little bit of a more elegant syntax.

88
00:05:55.760 --> 00:05:58.500
And that is everything there is to cover in this lesson.

89
00:05:58.560 --> 00:06:02.690
We talked about the reactive function, which is a sibling to the RAF function.

90
00:06:02.930 --> 00:06:08.420
The reactive function is optimized specifically for JavaScript objects, and that's the only type of

91
00:06:08.420 --> 00:06:09.710
data that you want to use it with.

92
00:06:09.980 --> 00:06:15.920
If you have a primitive value, like a number or a string or a boolean, you should continue using RAF

93
00:06:16.070 --> 00:06:20.450
and you must access that property using the value property on the reactive object.

94
00:06:20.720 --> 00:06:25.970
In comparison with the reactive function, it only accepts an object as its argument and once you provide

95
00:06:25.970 --> 00:06:28.820
it that you can still access your original properties normally.

96
00:06:28.940 --> 00:06:32.930
But Vue will keep track of their reactivity, as we did right here.

97
00:06:33.230 --> 00:06:33.500
All right.

98
00:06:33.500 --> 00:06:35.080
That's all there is to cover in this lesson.

99
00:06:35.090 --> 00:06:36.620
So I will see you in the next one.
