WEBVTT
1
00:00:00.600 --> 00:00:01.160
Okay.

2
00:00:01.170 --> 00:00:04.260
So let's pick up right where we left off in the previous lesson.

3
00:00:04.500 --> 00:00:10.590
So I still have my five lines of code and we're declaring a variable as well as a type on each line.

4
00:00:10.950 --> 00:00:15.790
In this lesson, I want to talk about a special TypeScript feature called Type Inference.

5
00:00:16.110 --> 00:00:21.330
Now the word infer means to deduce or to figure out from evidence.

6
00:00:21.630 --> 00:00:24.150
So what does type inference mean in regards to TypeScript?

7
00:00:24.360 --> 00:00:30.540
It means that TypeScript can figure out a type if we give it some data, if we give it something to

8
00:00:30.570 --> 00:00:31.020
work with.

9
00:00:31.350 --> 00:00:34.380
So let's focus on this first example right here on line number one.

10
00:00:35.190 --> 00:00:40.230
And what I'm going to do is remove my explicit type annotation from the previous lesson.

11
00:00:40.230 --> 00:00:45.210
So I'm just going to get rid of the colon syntax and the string and what we can do to any value either

12
00:00:45.210 --> 00:00:50.400
in this editor or in verse code when we're working with TypeScript, is we can hover our mouse over

13
00:00:50.400 --> 00:00:55.800
a name and it'll pop up with this little modal and it'll tell us what the data type is.

14
00:00:56.040 --> 00:01:00.060
So you can see that TypeScript has already figured out that first name is a string.

15
00:01:00.330 --> 00:01:05.790
And of course the reason it's been able to do that is because we've provided first name with an initial

16
00:01:05.790 --> 00:01:06.540
starter value.

17
00:01:06.690 --> 00:01:12.030
So once TypeScript sees a string of Borris or any string for that matter, it knows that first names

18
00:01:12.030 --> 00:01:12.750
should be a string.

19
00:01:12.900 --> 00:01:17.970
It doesn't need to be told explicitly because it can figure it out logically and the same rules apply

20
00:01:17.970 --> 00:01:18.840
from the previous lesson.

21
00:01:19.050 --> 00:01:23.880
So TypeScript is going to complain if we try to assign first name to an invalid type like a number,

22
00:01:24.150 --> 00:01:24.960
it's going to complain.

23
00:01:24.960 --> 00:01:30.090
For example, if we try to invoke a method that does not exist, like push and it's going to complain

24
00:01:30.090 --> 00:01:33.750
if we try to do a illegal operation like multiplication, right?

25
00:01:33.960 --> 00:01:39.150
Same rules apply because the first name is still a string type in typescript understanding.

26
00:01:39.150 --> 00:01:43.020
And thus, you know, it's good enough to proceed with the same annotation on the same logic, right?

27
00:01:43.320 --> 00:01:47.940
And so the general rule, the general best practice that you'll hear people say is if TypeScript is

28
00:01:47.940 --> 00:01:53.250
able to figure it out correctly, and there's really no reason to explicitly annotate a type in comparison

29
00:01:53.250 --> 00:01:57.870
if TypeScript is unable to figure it out or if it gets it incorrect, that's when it's a really good

30
00:01:57.870 --> 00:02:03.390
idea to be explicit and use the colon annotation to tell TypeScript, to tell it to be a little bit

31
00:02:03.390 --> 00:02:04.080
smarter, right.

32
00:02:04.080 --> 00:02:07.320
To to make it understand something that we we understand that it does not.

33
00:02:07.710 --> 00:02:10.740
So as another example here with age aid is another perfect example.

34
00:02:10.890 --> 00:02:12.950
We are assigning a value of 30.

35
00:02:12.960 --> 00:02:17.160
That's enough for TypeScript to figure out that age is a number so we can get rid of that syntax.

36
00:02:17.160 --> 00:02:19.800
And right here you can see TypeScript understands that it's a number.

37
00:02:20.130 --> 00:02:22.410
Now, here's an interesting example here with our Boolean.

38
00:02:23.280 --> 00:02:26.490
This is a different example because we do not have an initial value.

39
00:02:26.730 --> 00:02:32.100
And the Boolean here is critical because it tells TypeScript that is handsome will be of type boolean.

40
00:02:32.280 --> 00:02:39.000
If we remove the type annotation and we do not provide a starter value, then there is no way for TypeScript

41
00:02:39.000 --> 00:02:43.440
to figure out that is handsome is a boolean and if I hover my mouse you're going to see it thinks the

42
00:02:43.440 --> 00:02:47.370
type is a special type called any which we'll talk about in a lesson or two.

43
00:02:47.550 --> 00:02:52.530
But the key takeaway is it's not a boolean because TypeScript has no way of knowing its ability.

44
00:02:52.740 --> 00:02:58.260
So in this situation, this is the kind of scenario where if if we're not providing an additional value,

45
00:02:58.260 --> 00:02:59.790
it really makes sense to communicate.

46
00:02:59.820 --> 00:03:04.650
TypeScript that we expect is handsome to be a boolean even if we cannot provide the initial starter

47
00:03:04.650 --> 00:03:05.040
value.

48
00:03:05.280 --> 00:03:05.640
All right.

49
00:03:05.940 --> 00:03:12.180
Now, undefined and null are another two interesting situations because it turns out if we remove that

50
00:03:12.180 --> 00:03:18.330
type annotations right here, TypeScript is also going to assume the any type and that is because undefined

51
00:03:18.330 --> 00:03:23.760
another kind of these values that are designed to indicate the absence of something or the the like,

52
00:03:23.760 --> 00:03:25.860
the lack of something being present in your program.

53
00:03:25.980 --> 00:03:31.590
And sometimes that lack of absence can then be replaced with a solid value, a concrete value, like

54
00:03:31.590 --> 00:03:33.000
a number or an integer, etc..

55
00:03:33.240 --> 00:03:37.380
So when it comes to defining things like undefined and null, you have to be careful when you remove

56
00:03:37.410 --> 00:03:41.430
your type annotations because otherwise TypeScript may assume that they have the any type.

57
00:03:41.700 --> 00:03:45.180
So I'm going to keep this code from lines 3 to 5 to serve as an example.

58
00:03:45.360 --> 00:03:50.100
As always, if you're unsure, what you can do is hover your mouse over any name in your program and

59
00:03:50.100 --> 00:03:53.760
it will tell you what TypeScript thinks it is or what we've told it it is.

60
00:03:53.880 --> 00:03:57.090
And if it's correct, then you do not need to do the additional annotation.

61
00:03:57.210 --> 00:04:01.620
And if it's incorrect, then you can provide more clarity by using the colon syntax that we talked about.

62
00:04:01.770 --> 00:04:02.130
All right.

63
00:04:02.310 --> 00:04:03.750
That's all there is to cover in this lesson.

64
00:04:03.840 --> 00:04:05.310
So I will see you in the next one.
