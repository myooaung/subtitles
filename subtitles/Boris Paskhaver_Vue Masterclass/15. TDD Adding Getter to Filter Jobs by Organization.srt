1
00:00:00,440 --> 00:00:01,370
Okay.

2
00:00:01,370 --> 00:00:08,000
So our View Store now has a selected organization's property that's going to be an array of the user's

3
00:00:08,000 --> 00:00:10,250
chosen organizations to filter by.

4
00:00:10,460 --> 00:00:16,730
And of course, we also have the corresponding mutation to receive that array and overwrite that property

5
00:00:16,730 --> 00:00:17,600
in our view store.

6
00:00:17,900 --> 00:00:24,080
So now we have everything we need in our view X Store in order to filter our array of 100 jobs down

7
00:00:24,080 --> 00:00:29,330
to only those that have an organization that is in our selected organization's array.

8
00:00:29,720 --> 00:00:32,810
So what we have here is ultimately derived data.

9
00:00:32,960 --> 00:00:38,960
We need to take our original array of jobs and we need to filter it down to a smaller array of jobs

10
00:00:39,140 --> 00:00:40,760
that is derived data.

11
00:00:40,760 --> 00:00:42,770
It is not an original piece of data.

12
00:00:42,920 --> 00:00:45,260
It is not something that we are creating from scratch.

13
00:00:45,500 --> 00:00:50,090
Rather, it is something that is dependent on other pieces of our view stored data.

14
00:00:50,420 --> 00:00:54,920
So for these kinds of situations, the optimal thing that we need is a getter.

15
00:00:55,220 --> 00:00:58,880
Because remember, a getter is like a computed property on a component.

16
00:00:59,090 --> 00:01:03,800
It exists to watch other pieces of data and react whenever they change.

17
00:01:04,010 --> 00:01:05,720
And that's exactly what we want to do here.

18
00:01:05,960 --> 00:01:11,690
Whenever the user selects a checkbox, we're going to update the View Store State to have a updated

19
00:01:11,690 --> 00:01:16,370
array for selected organizations, and we want that to be able to filter our jobs array.

20
00:01:16,550 --> 00:01:21,740
And that filter array is ultimately the jobs that we want to present on the right hand side of the page.

21
00:01:22,040 --> 00:01:26,360
So no new data here, just derived or calculated or computed data.

22
00:01:26,510 --> 00:01:30,680
So we're going to write a letter to capture those jobs that fit that criteria.

23
00:01:31,430 --> 00:01:36,560
And as always, now we're going to use TDD, so we're going to write our test first for our getter and

24
00:01:36,560 --> 00:01:37,760
then we're going to implement it.

25
00:01:38,060 --> 00:01:41,270
So on the left hand side, I have my store and all of the view stuff.

26
00:01:41,450 --> 00:01:46,280
On the left hand side I have my index that test, that just file and I'm going to scroll down here.

27
00:01:46,310 --> 00:01:48,140
We're going to find our getter section.

28
00:01:48,140 --> 00:01:50,720
So here's mutations and here's getters.

29
00:01:50,720 --> 00:01:53,000
Right now we only have one for unique organizations.

30
00:01:53,300 --> 00:01:55,370
So within this, getters describe.

31
00:01:55,370 --> 00:01:57,140
BLOCK I'm going to write another describe.

32
00:01:58,480 --> 00:02:01,030
And we can come up with a simple name for our getter.

33
00:02:01,270 --> 00:02:05,410
Let's call it filter jobs by organization.

34
00:02:06,190 --> 00:02:11,080
This is going to represent the jobs that we're going to filter based on having a matching organization.

35
00:02:11,740 --> 00:02:12,100
All right.

36
00:02:12,100 --> 00:02:14,620
So right here, I'm going to provide my arrow function.

37
00:02:16,010 --> 00:02:17,030
And then my description.

38
00:02:17,030 --> 00:02:18,650
So what does this getter do?

39
00:02:19,040 --> 00:02:26,510
It identifies jobs that are associated with the given organizations.

40
00:02:29,000 --> 00:02:29,450
Okay.

41
00:02:30,020 --> 00:02:35,810
So as a reminder, we're going to need to use two pieces of the View Store State in order to arrive

42
00:02:35,810 --> 00:02:37,310
at our final filter jobs.

43
00:02:37,310 --> 00:02:37,530
Right.

44
00:02:37,760 --> 00:02:41,390
We need a jobs property and we need a selected organization's property.

45
00:02:41,630 --> 00:02:46,760
So I'm going to need to create a sample view store state here as a JavaScript object that has those

46
00:02:46,760 --> 00:02:49,580
two properties we don't really care about is logged in.

47
00:02:49,580 --> 00:02:52,490
So we're not going to worry about that, but we do need to worry about these two.

48
00:02:52,790 --> 00:02:57,020
So right here I'm going to create a JavaScript object called State.

49
00:02:58,160 --> 00:03:01,190
And we know that our state object is going to need to have a jobs array.

50
00:03:02,220 --> 00:03:05,340
And it's also going to need to have a selected organization's array.

51
00:03:06,240 --> 00:03:06,630
Okay.

52
00:03:07,110 --> 00:03:11,580
Now, as a reminder, selected organizations is going to be a array of strings.

53
00:03:11,880 --> 00:03:14,670
So, for example, let's just populated with two sample companies.

54
00:03:14,700 --> 00:03:17,280
Let's do Google and let's do Microsoft.

55
00:03:18,740 --> 00:03:21,890
And that means in our jobs, Ray, we're going to need a couple objects here.

56
00:03:22,280 --> 00:03:27,140
And as you might guess, what we want to check is if we have a job that has an organization of either

57
00:03:27,140 --> 00:03:28,190
Google or Microsoft.

58
00:03:28,310 --> 00:03:29,570
We want to include it.

59
00:03:29,780 --> 00:03:34,460
And if it has an organization that is not one of those two, we do not want to include it.

60
00:03:34,760 --> 00:03:37,640
So, for example, I can just define a job object.

61
00:03:37,970 --> 00:03:43,310
And of course, we could give it all of the properties that a real job has, like an I.D., like a title.

62
00:03:43,460 --> 00:03:47,540
But we don't really care about those properties because after all, we're ultimately going to be using

63
00:03:47,540 --> 00:03:50,280
to filter is going to be the organization property.

64
00:03:50,300 --> 00:03:53,480
That's the way it is in debate at JSON and that's the way it's going to work in the real world.

65
00:03:53,810 --> 00:03:58,940
So for these job objects, in my opinion, I don't think we need to add anything beyond an organization

66
00:03:58,940 --> 00:04:03,860
property that is enough to verify that the test and the getter are going to work as they're supposed

67
00:04:03,860 --> 00:04:04,040
to.

68
00:04:04,490 --> 00:04:07,100
For example, I can have a job with an organization of Google.

69
00:04:08,390 --> 00:04:12,980
And later on and on the next line, I want a job that has an organization that is neither Google or

70
00:04:12,980 --> 00:04:17,720
Microsoft just to verify that we are correctly removing this object from our filter to.

71
00:04:18,200 --> 00:04:20,780
So maybe I'll have a organization of Amazon.

72
00:04:21,140 --> 00:04:23,120
So this object should not be included.

73
00:04:23,480 --> 00:04:28,040
And finally, for our third object, I'll have an organization of Microsoft.

74
00:04:29,890 --> 00:04:34,780
So as you might guess, what we're going to test for here is ultimately that we filter down this jobs

75
00:04:34,780 --> 00:04:39,220
array to just two objects, the organization with Google and the organization with Microsoft.

76
00:04:39,400 --> 00:04:43,810
So we are testing the we are correctly using this arrest strings to filter this array of objects.

77
00:04:44,020 --> 00:04:44,380
All right.

78
00:04:44,800 --> 00:04:45,430
So down below.

79
00:04:46,780 --> 00:04:51,190
I'm going to say that I'm going to assume on my getters object, which is already imported into this

80
00:04:51,190 --> 00:04:57,010
file, that I'm eventually going to have a getter called filter jobs by organization.

81
00:04:57,250 --> 00:05:00,100
The exact same name we gave our test description of above.

82
00:05:00,490 --> 00:05:05,620
And this getter, like all getters, is going to be past the current view store state.

83
00:05:05,860 --> 00:05:11,110
So this is going to be the current state which we have represented by our sample JavaScript object above.

84
00:05:11,410 --> 00:05:13,510
And what do we want this getter to return to us?

85
00:05:13,600 --> 00:05:18,010
We want it to return an array of jobs that fit this criteria.

86
00:05:18,070 --> 00:05:18,460
Right?

87
00:05:18,760 --> 00:05:21,160
So right here, I can simply write something like.

88
00:05:22,210 --> 00:05:23,080
Filter jobs.

89
00:05:24,820 --> 00:05:25,240
All right.

90
00:05:25,480 --> 00:05:30,130
And then what do I expect that filter jobs rate to be just an array of two organizations.

91
00:05:30,130 --> 00:05:36,100
So right here, I expect my filter jobs to equal an array.

92
00:05:37,360 --> 00:05:40,840
And it's going to be a derived piece of data dependent on this jobs array.

93
00:05:41,020 --> 00:05:45,040
I want to have my original object with an organization of Google because that should be included.

94
00:05:45,370 --> 00:05:49,460
And then I also expect to filter this job with an organization of Microsoft.

95
00:05:50,020 --> 00:05:52,630
So that is what I want the final result to be.

96
00:05:52,840 --> 00:05:54,560
I'm not writing the implementation yet.

97
00:05:54,580 --> 00:05:56,260
I'm just writing what it should return.

98
00:05:56,290 --> 00:05:57,700
That is the whole point of TDI.

99
00:05:57,880 --> 00:06:02,950
We don't know how our eventual getters going to implement this logic, but we know that our logic is

100
00:06:02,950 --> 00:06:05,360
successfully implemented if we're getting this result.

101
00:06:05,650 --> 00:06:10,900
If we if we start out with our entire view store state and what we get back is an array of the jobs

102
00:06:10,900 --> 00:06:16,090
that fit the criteria of belonging to an organization that the user has selected, which is represented

103
00:06:16,090 --> 00:06:17,650
by these selected organizations.

104
00:06:17,650 --> 00:06:19,150
Array of strings right here.

105
00:06:19,510 --> 00:06:21,580
So if we get this, we know that our logic is correct.

106
00:06:22,030 --> 00:06:26,560
So now we can follow TDD to get to our working solution.

107
00:06:26,860 --> 00:06:30,910
So right here we can see the very first error that JavaScript is telling us is we don't have a function

108
00:06:30,910 --> 00:06:31,960
by that name defined.

109
00:06:32,200 --> 00:06:36,220
So we can start by defining it in our actual view file.

110
00:06:36,490 --> 00:06:41,740
So right here, we're going to need to define a constant since we're going to be using constants all

111
00:06:41,740 --> 00:06:43,660
over the place to define our method names.

112
00:06:43,960 --> 00:06:48,850
So right here I'm going to write another export ID constant, and this one will be called the filter

113
00:06:48,850 --> 00:06:54,790
jobs by organization, the exact same name we chose in our test and the string value of that constant

114
00:06:54,820 --> 00:06:58,300
will be the exact same filter jobs by organization.

115
00:07:00,800 --> 00:07:06,770
In fact, the more I think about it, we're actually filtering jobs by more than one organization organizations.

116
00:07:06,980 --> 00:07:08,990
So I think let's change this all to be plural.

117
00:07:08,990 --> 00:07:15,830
So right here, filter jobs by organizations, filter jobs by organizations right here or organizations

118
00:07:15,830 --> 00:07:16,220
right here.

119
00:07:16,220 --> 00:07:20,870
We have plural and right here filter jobs by organizations as well, because in theory, we can filter

120
00:07:20,870 --> 00:07:22,790
multiple jobs by multiple organizations.

121
00:07:22,790 --> 00:07:25,460
So I think this is a little bit more technically accurate.

122
00:07:25,790 --> 00:07:26,150
Okay.

123
00:07:26,330 --> 00:07:31,460
So we now we have the constant and we can use it in our getters object right here, which is just a

124
00:07:31,460 --> 00:07:32,330
bunch of getter methods.

125
00:07:32,570 --> 00:07:36,140
So our getter is going to be called filter jobs by organization.

126
00:07:36,410 --> 00:07:41,660
It's going to be a method and it's always going to accept the current store state as the first argument

127
00:07:41,660 --> 00:07:44,360
view is going to automatically pass it that information.

128
00:07:44,720 --> 00:07:46,430
So we're going to get the real state object.

129
00:07:46,730 --> 00:07:49,910
So for the purposes of our test, you can think of it as this object right here.

130
00:07:50,720 --> 00:07:55,580
So we have our state and now we need to use that state as it is to filter to get to this array that

131
00:07:55,580 --> 00:07:56,360
we want right here.

132
00:07:56,810 --> 00:07:57,800
So how do we do this?

133
00:07:58,070 --> 00:08:03,080
Well, we know on our state object either right here or right here that we have our jobs property.

134
00:08:03,080 --> 00:08:05,180
So let's start by accessing state to jobs.

135
00:08:06,410 --> 00:08:10,700
And how do we filter down an array to a smaller subset of elements in a new array?

136
00:08:10,940 --> 00:08:12,710
Well, we talked about it in the previous lesson.

137
00:08:12,710 --> 00:08:14,030
We can use the filter method.

138
00:08:14,420 --> 00:08:19,340
So right here I want to invoke filter to get back a brand new array and I'm going to iterate over every

139
00:08:19,340 --> 00:08:21,670
individual job object in the real world.

140
00:08:21,680 --> 00:08:24,690
It's going to be an array of 100 jobs in our test suite.

141
00:08:24,710 --> 00:08:27,320
It's going to be an array of three jobs, but no problem.

142
00:08:27,320 --> 00:08:28,040
Same concept.

143
00:08:28,280 --> 00:08:30,530
We're going to be iterating over one job at a time.

144
00:08:31,610 --> 00:08:32,000
Okay.

145
00:08:32,300 --> 00:08:34,070
What do I want to do with every job?

146
00:08:34,250 --> 00:08:37,400
Remember that every job is going to have an organization property.

147
00:08:37,640 --> 00:08:39,980
I want to access that organization property.

148
00:08:40,100 --> 00:08:45,860
I want to get Google, for example, and I want to check whether this string is included in my selected

149
00:08:45,860 --> 00:08:46,970
organization's array.

150
00:08:47,480 --> 00:08:50,900
The way I can do that is by using the includes method on an array.

151
00:08:51,140 --> 00:08:54,050
The includes method in JavaScript is invoked on an array.

152
00:08:54,170 --> 00:08:59,030
It accepts an argument and it tells you whether that argument is in the array.

153
00:08:59,060 --> 00:09:00,260
It returns true or false.

154
00:09:00,620 --> 00:09:03,230
So from my state, my view is state.

155
00:09:03,470 --> 00:09:07,670
I have on that state a property called selected organizations.

156
00:09:07,700 --> 00:09:08,840
That's my array of strings.

157
00:09:09,050 --> 00:09:15,620
And on that array I want to invoke my includes method that will return true or false depending on whether

158
00:09:15,620 --> 00:09:17,390
the argument is in the array or not.

159
00:09:17,690 --> 00:09:20,060
And my filter method expects a true or false.

160
00:09:20,270 --> 00:09:22,580
So includes is a perfectly valid thing to use here.

161
00:09:22,880 --> 00:09:27,260
And what string do I want to look for in my selected organization's array of strings?

162
00:09:27,500 --> 00:09:30,320
I want to take the current job object I'm iterating over.

163
00:09:30,470 --> 00:09:36,110
I want to get its organization string, and I want to see whether my selected organization's rate includes

164
00:09:36,230 --> 00:09:37,280
that organization.

165
00:09:37,670 --> 00:09:43,790
So of the 100 jobs that I iterate over, go to each jobs organization property, get that string and

166
00:09:43,790 --> 00:09:46,970
double check whether that string is in the array of selected organizations.

167
00:09:47,450 --> 00:09:48,340
So I'm going to save this.

168
00:09:49,100 --> 00:09:52,460
And then the other very important thing to do here, because our test is going to fail in just a moment,

169
00:09:52,460 --> 00:09:57,230
you're going to see that is, of course, we are filtering correctly, but we're not actually returning

170
00:09:57,230 --> 00:09:59,240
this returned array that filter gives to us.

171
00:09:59,510 --> 00:10:03,320
So the filter method is going to return an array of the jobs that fit the criteria.

172
00:10:03,530 --> 00:10:06,020
I'm going to return that.

173
00:10:06,410 --> 00:10:09,290
Save that and we'll see if that works.

174
00:10:10,980 --> 00:10:11,850
And indeed it does.

175
00:10:12,060 --> 00:10:20,610
So now we are correctly filtering our original jobs array from out of state to only those arrays that

176
00:10:20,760 --> 00:10:22,290
have an organization.

177
00:10:22,300 --> 00:10:27,570
It's only those jobs, rather, that have an organization that is a string that is also found in our

178
00:10:27,570 --> 00:10:29,010
selected organizations array.

179
00:10:29,340 --> 00:10:33,060
And in the real world, of course, each job is going to be much more complex than this.

180
00:10:33,060 --> 00:10:37,470
It's going to have ten or 11 or so properties, however many we defined in DB in our JSON.

181
00:10:37,680 --> 00:10:43,410
But we don't care because this logic in this test verifies that the core structure of how our implementation

182
00:10:43,410 --> 00:10:44,190
works is valid.

183
00:10:44,400 --> 00:10:49,320
If we added 11 more properties to each job object, it wouldn't make a difference to how our garner

184
00:10:49,320 --> 00:10:54,420
is filtering because all our Gardner cares about is the organization, property and any given job object.

185
00:10:54,600 --> 00:10:54,930
All right.

186
00:10:55,230 --> 00:11:01,320
So with that, we now have a getter to get these filter jobs based on the current view extra state.

187
00:11:01,560 --> 00:11:05,610
So of course, the next step is finally rendering on the right hand side of the page.

188
00:11:05,820 --> 00:11:06,990
The filter jobs.

189
00:11:06,990 --> 00:11:12,030
As soon as the user has selected a checkbox, we're going to take care of that in the very next lesson.
