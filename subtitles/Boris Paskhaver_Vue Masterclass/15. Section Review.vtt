WEBVTT
1
00:00:00.330 --> 00:00:01.380
All right.

2
00:00:01.380 --> 00:00:05.760
So as always, congratulations on reaching the end of another course section.

3
00:00:05.970 --> 00:00:10.140
In this section, we explored the basics of the typescript programming language.

4
00:00:10.290 --> 00:00:15.600
And of course, with this knowledge we can immediately jump into the project again in the next section

5
00:00:15.810 --> 00:00:19.410
and learn about how we can incorporate TypeScript into our view app.

6
00:00:19.830 --> 00:00:21.570
So what did we learn in this section?

7
00:00:21.780 --> 00:00:24.480
TypeScript is just JavaScript with types.

8
00:00:24.630 --> 00:00:30.330
It is a new language, but it's the same JavaScript we already know, so there's not that much to learn.

9
00:00:30.330 --> 00:00:36.450
On top of the core language, you can think of TypeScript like an enhanced or expanded version of JavaScript

10
00:00:36.630 --> 00:00:37.740
with type checking.

11
00:00:38.040 --> 00:00:38.670
And what is type?

12
00:00:38.730 --> 00:00:43.830
I mean, it means that the language checks that we are operating on the right kind of type, that we

13
00:00:43.830 --> 00:00:50.160
are performing valid operations, that we are invoking valid methods, that we are accessing valid properties,

14
00:00:50.160 --> 00:00:50.670
etc..

15
00:00:51.000 --> 00:00:53.730
So TypeScript will do its best to help us as much as we can.

16
00:00:53.760 --> 00:00:59.010
We can also help it by declaring the types of various JavaScript constructs in our program.

17
00:00:59.640 --> 00:01:04.410
We can tell TypeScript the type of a variable, the type of a constant, the type of a parameter, the

18
00:01:04.410 --> 00:01:05.610
type of return value.

19
00:01:05.880 --> 00:01:08.370
So TypeScript is not implementation specific.

20
00:01:08.370 --> 00:01:11.760
We're not writing any actual core business logic in TypeScript.

21
00:01:11.940 --> 00:01:18.120
Rather, we're almost annotating or providing additional metadata around our existing code so the TypeScript

22
00:01:18.120 --> 00:01:20.490
can validate that we are doing the right thing.

23
00:01:20.670 --> 00:01:23.400
TypeScript does not exist for the benefit of the end user.

24
00:01:23.400 --> 00:01:25.710
It exists for the benefit of us as developers.

25
00:01:25.890 --> 00:01:29.970
So we are able to catch more errors or lapses in judgment earlier.

26
00:01:30.120 --> 00:01:30.510
All right.

27
00:01:31.320 --> 00:01:36.510
TypeScript infers a type of a value based on its original assignment or its internal logic.

28
00:01:36.690 --> 00:01:41.070
So an example of internal logic is if we have a function that accepts two parameters and they're both

29
00:01:41.070 --> 00:01:46.230
numbers and the function, it returns the product of them types who can infer that the return value

30
00:01:46.230 --> 00:01:47.570
will also be a number, right?

31
00:01:47.820 --> 00:01:52.710
However, we saw many times that its inference is not perfect, so feel free to correct the language

32
00:01:52.710 --> 00:01:53.610
whenever it is wrong.

33
00:01:53.760 --> 00:01:56.820
The syntax for declaring a type is kind of easy to remember.

34
00:01:56.940 --> 00:02:01.740
You just put a colon after whatever thing it is that you're targeting and then provide the type right

35
00:02:01.740 --> 00:02:02.400
there in line.

36
00:02:03.360 --> 00:02:03.690
All right.

37
00:02:03.960 --> 00:02:08.670
We learned about a lot of different types, string number, boolean, etc. We also learned about the

38
00:02:08.670 --> 00:02:11.070
any type which can represent any type of value.

39
00:02:11.310 --> 00:02:15.390
And it's generally considered an anti pattern because it defeats the purpose of JavaScript.

40
00:02:15.570 --> 00:02:19.740
If you use any, anywhere, everywhere, you're basically turning TypeScript into JavaScript.

41
00:02:20.190 --> 00:02:25.710
So if you want to skip typing and sometimes that's a necessity because you may not know the exact type

42
00:02:25.890 --> 00:02:30.210
or it's a very difficult, complex type and you just want to, for example, finish a feature and then

43
00:02:30.210 --> 00:02:31.950
come back later and add the proper type.

44
00:02:32.220 --> 00:02:37.770
If you are tempted to use any, consider using the unknown type instead because the unknown type will

45
00:02:37.770 --> 00:02:40.740
require a type guard before you perform an operation.

46
00:02:41.010 --> 00:02:46.620
And remember, a type card is just the basic if statement that validates that you have something of

47
00:02:46.620 --> 00:02:47.250
a given type.

48
00:02:47.250 --> 00:02:51.600
You're basically saying, hey, if you have a string, then you have permission to call string methods,

49
00:02:51.780 --> 00:02:55.590
even though you can't guarantee that that type is actually going to be a string.

50
00:02:55.830 --> 00:02:58.260
So unknown should be generally preferred over any.

51
00:02:58.410 --> 00:03:01.470
I'm not going to say that any is should never be used.

52
00:03:01.470 --> 00:03:05.970
Obviously the real world presents all kinds of complex problems and sometimes you just need to make

53
00:03:05.970 --> 00:03:07.560
TypeScript happy enough to compile.

54
00:03:07.770 --> 00:03:11.340
But these two types do exist, and it's worth knowing the differences between them.

55
00:03:12.240 --> 00:03:12.570
All right.

56
00:03:12.810 --> 00:03:17.610
In addition to those basic primitive types, we can declare types for arrays, objects, functions as

57
00:03:17.610 --> 00:03:17.880
well.

58
00:03:18.090 --> 00:03:20.520
And of course, the more detail, the better that type checking.

59
00:03:20.730 --> 00:03:24.870
So we saw that, for example, a string array is a different type than a number array.

60
00:03:24.900 --> 00:03:28.890
They're arrays that hold different elements or different types of values inside them.

61
00:03:29.130 --> 00:03:32.940
And similarly, a more precise definition of an object type.

62
00:03:32.940 --> 00:03:35.340
For example, an object with a name property.

63
00:03:35.340 --> 00:03:41.790
Such a string is a different type and a more specific type than the generic object type that is available

64
00:03:41.790 --> 00:03:42.540
within Typekit.

65
00:03:42.540 --> 00:03:42.810
Right.

66
00:03:43.050 --> 00:03:46.560
So the more detail you can provide, the more effective typescript will be.

67
00:03:46.800 --> 00:03:51.240
So sometimes, even when it comes to inference, TypeScript may get something that is kind of the correct

68
00:03:51.240 --> 00:03:53.310
value but not always the best value.

69
00:03:53.310 --> 00:03:58.200
And sometimes you can help it out by giving a more clear or precise type annotation.

70
00:03:59.210 --> 00:03:59.510
All right.

71
00:03:59.720 --> 00:04:01.950
We also learned about optional object properties.

72
00:04:01.970 --> 00:04:02.840
That's pretty simple.

73
00:04:02.840 --> 00:04:07.760
You just add the question mark symbol at the end of the property name and that declares that that property

74
00:04:07.760 --> 00:04:08.960
is not required.

75
00:04:09.380 --> 00:04:13.790
And of course, we can declare these properties in our object types, and we can do that, of course,

76
00:04:13.790 --> 00:04:18.380
in line, for example, when we're accepting, for example, a function parameter that happens to be

77
00:04:18.380 --> 00:04:18.800
an object.

78
00:04:19.040 --> 00:04:24.500
But many times to keep our code pretty concise, what most typescript developers will do is define interfaces

79
00:04:24.500 --> 00:04:30.080
or types, and an interface or type allows us to define a name for a reusable object type.

80
00:04:30.290 --> 00:04:34.130
For example, an interface can say this object type will always have three properties.

81
00:04:34.280 --> 00:04:35.780
The first property will be a number.

82
00:04:35.810 --> 00:04:39.860
The second property will be a boolean, and the third optional property will be a string, etc..

83
00:04:40.070 --> 00:04:44.600
And that allows you to consolidate and capture that logic its own named type.

84
00:04:44.810 --> 00:04:47.060
You can then reuse many times throughout the program.

85
00:04:47.180 --> 00:04:49.610
And we tend to use objects a lot in JavaScript.

86
00:04:49.730 --> 00:04:51.500
That's why interfaces exist for those.

87
00:04:52.760 --> 00:04:53.030
All right.

88
00:04:53.030 --> 00:04:54.420
We also learned about generics.

89
00:04:54.440 --> 00:05:01.070
A generic is a generic type whose exact specific type will be provided later when a function is actually

90
00:05:01.070 --> 00:05:01.520
invoked.

91
00:05:01.820 --> 00:05:06.260
So you use generics when you are defining an actual type for things like a function.

92
00:05:06.500 --> 00:05:09.770
And what they allow us to do is to craft more reusable pieces of code.

93
00:05:10.040 --> 00:05:15.140
And the reason they're more reusable and spares duplication is because the generic allows us to have

94
00:05:15.140 --> 00:05:20.870
a single reusable function that can substitute a type later rather than creating a duplicate function

95
00:05:20.870 --> 00:05:22.910
for each possible type variation.

96
00:05:23.180 --> 00:05:28.010
So we saw an earlier lesson instead of creating a function to deal with a number array and then a string

97
00:05:28.010 --> 00:05:32.360
array and then a boolean array, even though the function body does the same logic, instead we can

98
00:05:32.360 --> 00:05:37.520
create a more generic function that says accept some kind of type T, which I promise to provide to

99
00:05:37.520 --> 00:05:39.350
you later when I run this function.

100
00:05:39.470 --> 00:05:45.380
And that way we can only define one function that is reusable and spares us the duplication of having

101
00:05:45.380 --> 00:05:47.660
a lot more functions that have concrete types.

102
00:05:47.930 --> 00:05:53.480
So a generic is almost like a parameter for a type in the same way that we have regular parameters that

103
00:05:53.480 --> 00:05:55.040
represent inputs into our function.

104
00:05:55.250 --> 00:05:57.560
A generic is a parameter for a type.

105
00:05:57.830 --> 00:06:03.470
So whenever we use that function, the invocation will provide the argument for that type, for it to

106
00:06:03.470 --> 00:06:07.010
be used in the type checking for that invocation of that function.

107
00:06:07.880 --> 00:06:08.210
All right.

108
00:06:08.480 --> 00:06:11.000
And with that, there is all there is to cover in this lesson.

109
00:06:11.000 --> 00:06:13.100
So I hope you've had fun joining at a typescript.

110
00:06:13.280 --> 00:06:15.260
This language really is taking off.

111
00:06:15.260 --> 00:06:20.540
It's highly likely and probable that over time a lot of JavaScript code bases will eventually convert

112
00:06:20.540 --> 00:06:26.210
to TypeScript because there are benefits and there are even studies, by the way, of studies from academia

113
00:06:26.330 --> 00:06:31.790
that demonstrate how much TypeScript helps to reduce not just TypeScript, but how much typed languages

114
00:06:31.790 --> 00:06:36.290
help to reduce a certain class of errors that you are able to run into whenever you're dealing with

115
00:06:36.290 --> 00:06:38.210
dynamically typed languages like JavaScript.

116
00:06:38.510 --> 00:06:41.270
That doesn't mean that I'm here to tell you that TypeScript is always the right answer.

117
00:06:41.360 --> 00:06:44.150
I just hope that you see the benefits of what this language can provide.

118
00:06:44.270 --> 00:06:50.180
And since it is such a modern and powerful and popular part of frontend development in JavaScript,

119
00:06:50.330 --> 00:06:55.490
I do want to introduce it here so that I can show you how to incorporate it into view starting in the

120
00:06:55.490 --> 00:06:56.180
next section.

121
00:06:56.480 --> 00:06:56.720
All right.

122
00:06:56.720 --> 00:06:59.240
So I hope you had fun and I will see you in the next lesson.
