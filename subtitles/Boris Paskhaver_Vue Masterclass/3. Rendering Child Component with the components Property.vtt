WEBVTT
1
00:00:00.240 --> 00:00:00.990
Okay.

2
00:00:00.990 --> 00:00:05.250
So why is our main nav component not rendering in the browser?

3
00:00:05.520 --> 00:00:11.340
Well, just because we've created a component, just because we've created this reusable chunk of the

4
00:00:11.340 --> 00:00:15.720
user interface doesn't mean that view is going to automatically put it on the screen.

5
00:00:16.050 --> 00:00:21.330
After all, our app may have dozens, if not hundreds of different view components, and view doesn't

6
00:00:21.330 --> 00:00:25.560
know where to render each one or in what order or how many times.

7
00:00:25.830 --> 00:00:29.520
So we kind of have this template, but it's sitting unused in our app.

8
00:00:29.790 --> 00:00:32.430
So how can we get this header up onto our screen?

9
00:00:32.850 --> 00:00:38.160
Well, one component that we know is actually being rendered on the screen is app view.

10
00:00:38.520 --> 00:00:41.010
As a reminder, this is our launching point.

11
00:00:41.020 --> 00:00:42.330
This is our first component.

12
00:00:42.720 --> 00:00:45.120
It's an H1 that has the text hello view.

13
00:00:45.360 --> 00:00:50.580
And if I navigate back to my browser, we can see that that's what's being displayed on the screen.

14
00:00:51.060 --> 00:00:58.050
As a quick reminder, the way this is happening is we have our main JS file right here and this is the

15
00:00:58.050 --> 00:01:02.820
file that is mounting the view app into our plain HTML document.

16
00:01:03.090 --> 00:01:06.630
So right here we are importing our app component from app app view.

17
00:01:06.870 --> 00:01:11.760
And then this syntax right here is mounting it into the div with an idea of app.

18
00:01:11.760 --> 00:01:17.250
We talked about that a little bit earlier in the course, but the key takeaway here is that app is being

19
00:01:17.250 --> 00:01:18.480
rendered on the screen.

20
00:01:18.810 --> 00:01:24.630
So if we can find a way to tell the app component to render main nav, then we'll get what we want.

21
00:01:24.630 --> 00:01:26.820
We'll get Main NAV render to the screen.

22
00:01:27.100 --> 00:01:30.180
It's going to be a two step process to enable this.

23
00:01:30.180 --> 00:01:31.410
In fact, I think even more than that.

24
00:01:31.410 --> 00:01:37.140
But it's going to take a couple steps for us to import May NAV into this file, register it with our

25
00:01:37.140 --> 00:01:40.140
app component and then actually display it in the HTML.

26
00:01:40.530 --> 00:01:43.890
So the first step is to import the main nav component.

27
00:01:44.100 --> 00:01:47.670
And whenever you hear the words import, you're probably thinking JavaScript.

28
00:01:47.880 --> 00:01:53.250
And hopefully by now, whenever you hear the words JavaScript, your mind should immediately say, okay,

29
00:01:53.250 --> 00:01:56.400
that's something that's going to live in the script section, right?

30
00:01:56.550 --> 00:02:01.650
This is where we're going to write any JavaScript that we need for a view component, right?

31
00:02:01.800 --> 00:02:05.430
In comparison to the template tags where we have any HTML.

32
00:02:05.700 --> 00:02:06.720
So this is JavaScript.

33
00:02:06.720 --> 00:02:11.640
So we're going to put it inside our script tags and we're going to import our main nav component.

34
00:02:13.060 --> 00:02:19.360
And as a reminder, we have this app symbol available that represents the top of our SIRC or source

35
00:02:19.360 --> 00:02:19.840
directory.

36
00:02:20.110 --> 00:02:25.990
Inside that folder we have a components folder and inside our components folder we have a single component

37
00:02:26.170 --> 00:02:29.140
which is main NAV and I'm just going to let it auto complete.

38
00:02:29.410 --> 00:02:33.130
You'll notice that it auto completed with the file extension dot view.

39
00:02:33.280 --> 00:02:34.350
That's totally fine.

40
00:02:34.360 --> 00:02:39.460
It's actually optional view will recognize view components even if you exclude the extension.

41
00:02:39.640 --> 00:02:43.090
But I like to leave it on just to remind myself that it is a view component.

42
00:02:43.270 --> 00:02:43.570
All right.

43
00:02:43.570 --> 00:02:44.920
I'm going to add a semicolon here.

44
00:02:45.160 --> 00:02:46.390
Just quiet, prettier down.

45
00:02:46.870 --> 00:02:47.200
Okay.

46
00:02:47.950 --> 00:02:51.520
So we have imported May nav, but we are not yet using it.

47
00:02:51.520 --> 00:02:57.700
So we have to configure our app component to be able to render main nav onto the screen.

48
00:02:57.910 --> 00:02:58.240
All right.

49
00:02:58.570 --> 00:03:03.280
So whenever you hear the words configuration for any kind of view component, immediately you should

50
00:03:03.280 --> 00:03:06.580
think about the object that we're exporting here out of this file.

51
00:03:06.850 --> 00:03:10.990
Remember, every view component is going to have some bit of HTML and it's going to have some bit of

52
00:03:10.990 --> 00:03:12.760
logic that we write in JavaScript.

53
00:03:13.000 --> 00:03:18.190
So here is our configuration object for the app component and here I can add an additional property

54
00:03:18.190 --> 00:03:20.410
and its name is pretty logical actually.

55
00:03:20.410 --> 00:03:22.330
Its name is going to be components.

56
00:03:23.050 --> 00:03:27.280
And so this is where we're going to register other components with our app component.

57
00:03:27.520 --> 00:03:33.280
And when I use the word register, what I mean is I'm going to enable the app component to render whatever

58
00:03:33.280 --> 00:03:36.160
components I put here inside this component's key.

59
00:03:36.460 --> 00:03:43.300
The value here is actually going to be a JavaScript object, and the way it works is like this the property

60
00:03:43.300 --> 00:03:50.350
where the key is going to be a string and a name that represents what we want to write in our HTML in

61
00:03:50.350 --> 00:03:52.660
order to render a given component.

62
00:03:53.080 --> 00:03:58.960
So for example, if I want to render my main nav component, but I want to write it out as whatever

63
00:03:59.050 --> 00:03:59.650
I could write.

64
00:03:59.650 --> 00:04:04.990
For example, whatever has my key, then provide a value of the main nav component.

65
00:04:05.230 --> 00:04:12.340
And what that means is in my channel right here I can write whatever like so and that will be my view

66
00:04:12.340 --> 00:04:13.900
component name, right?

67
00:04:14.080 --> 00:04:18.340
So we can give it whatever name we want to in the context of this app component.

68
00:04:18.700 --> 00:04:25.180
But obviously, since it's generally not a good idea to give one component two names, you're typically

69
00:04:25.180 --> 00:04:30.340
going to render it in the HTML with the exact same name as it's actually named, because that just avoids

70
00:04:30.340 --> 00:04:31.690
the unneeded complexity.

71
00:04:32.020 --> 00:04:37.450
So what I'm going to do is provide it with a name of May now, and I'm going to set the value of this

72
00:04:37.450 --> 00:04:41.470
property to be the actual imported main nav component that we have right here.

73
00:04:41.830 --> 00:04:47.890
So by registering this, we now say that the app component can render a main nav component somewhere

74
00:04:47.890 --> 00:04:48.760
in its HTML.

75
00:04:49.150 --> 00:04:53.050
You'll notice, of course, that we have a little bit of an East Island violation, and if I hover my

76
00:04:53.050 --> 00:04:59.140
mouse over, it says the main nav component has been registered, which is great news but not used.

77
00:04:59.140 --> 00:05:01.090
And view, of course here makes sense.

78
00:05:01.090 --> 00:05:05.590
It says, hey, you've told app that it can do something with May nav, it can render it, but you're

79
00:05:05.590 --> 00:05:06.550
not actually rendering it.

80
00:05:06.550 --> 00:05:09.400
That's a waste of imports and that's a waste of registrations.

81
00:05:09.700 --> 00:05:14.200
So obviously the next step is to take this me NAV and render it somewhere in our template.

82
00:05:14.500 --> 00:05:16.810
So I'm going to remove our former H1.

83
00:05:17.750 --> 00:05:22.100
And there's actually several different, different ways that we can render a view component.

84
00:05:22.100 --> 00:05:24.200
We'll talk about those variations in the next lesson.

85
00:05:24.440 --> 00:05:30.220
But for now, the easiest way to think about it is no different than your typical HTML element.

86
00:05:30.230 --> 00:05:35.420
So if you have a div, we know that we have an opening div and automatically a closing div with the

87
00:05:35.420 --> 00:05:36.290
slash, right?

88
00:05:36.320 --> 00:05:39.410
Different elements work differently, but this is a very common thing.

89
00:05:39.620 --> 00:05:41.900
And for now, let's let's treat it this way.

90
00:05:42.020 --> 00:05:48.650
For our main nav component so we can think of May now, now almost like its own new HTML element that

91
00:05:48.650 --> 00:05:50.360
we've introduced into the app.

92
00:05:50.480 --> 00:05:53.840
And we're going to write it out the exact same way as we write any other environment.

93
00:05:53.850 --> 00:06:00.290
So we're going to open it up, we're going to write Main NAV, then we're going to put a closing bracket

94
00:06:00.290 --> 00:06:04.250
and you can see automatically the V code has filled in the second half for me.

95
00:06:04.250 --> 00:06:07.160
I'm just going to write it out myself just so we practice, right?

96
00:06:07.340 --> 00:06:11.690
We're going to start with almost our opening tag, like our opening div, but it's going to be main

97
00:06:11.690 --> 00:06:17.750
nav and then we're going to provide the closing slash and may nav and close it.

98
00:06:17.780 --> 00:06:21.650
Now make sure the spelling here is the exact same as it is right here.

99
00:06:21.650 --> 00:06:26.060
So I have a capital M and a capital and so I'm going to write it out this way right here.

100
00:06:26.060 --> 00:06:30.230
I'm going to save the file and prettier is going to add some additional things like commas here.

101
00:06:30.470 --> 00:06:34.880
But now we are rendering a single main nav component in app that view.

102
00:06:35.060 --> 00:06:36.470
And what does main nav render?

103
00:06:36.560 --> 00:06:39.050
It renders that header with the text of May nav.

104
00:06:39.350 --> 00:06:41.090
So if I go back to my browser.

105
00:06:42.270 --> 00:06:45.170
Now we have the main nav component up here, right here.

106
00:06:45.180 --> 00:06:46.800
This is a tremendous success.

107
00:06:46.800 --> 00:06:54.960
We have gotten our app component to render our main nav component and thus render its may now into a

108
00:06:54.960 --> 00:06:55.320
browser.

109
00:06:55.500 --> 00:06:55.770
Right.

110
00:06:56.040 --> 00:07:02.820
Now here's the beautiful part of view, and the idea of reusable components is that components can be

111
00:07:03.540 --> 00:07:07.080
reused often and repeatedly as often as you need them.

112
00:07:07.260 --> 00:07:13.560
So, for example, if I copy and paste this code below and just paste it three times and save this file

113
00:07:13.740 --> 00:07:19.830
and then go back to look at my browser, we now have three main nav components being rendered, which

114
00:07:19.830 --> 00:07:24.360
of course equivalently is three HTML header elements being rendered in to out.

115
00:07:24.480 --> 00:07:24.710
Right.

116
00:07:24.870 --> 00:07:30.870
And obviously this is a very simple and stupid example, but the idea here is that now we can use components

117
00:07:30.870 --> 00:07:36.660
to create these reusable small chunks of business logic and the corresponding chunk of each HTML, the

118
00:07:36.660 --> 00:07:42.570
corresponding chunk of the user interface, and then reuse them as often as needed and even customize

119
00:07:42.570 --> 00:07:47.160
or tweak each one a little bit slightly if we needed to be somewhat different from the others.

120
00:07:47.160 --> 00:07:51.780
Right now, these are all identical, but the idea is we have a reusable chunk of code, almost like

121
00:07:51.840 --> 00:07:56.880
we've created a new HTML element that does something for us in this case, render a header.

122
00:07:57.090 --> 00:07:57.390
All right.

123
00:07:57.750 --> 00:07:58.710
That's all there is to cover.

124
00:07:58.710 --> 00:08:01.350
In this lesson, we imported our main nav component.

125
00:08:01.500 --> 00:08:08.010
We registered it with our app component by using the components key on the app components configuration

126
00:08:08.010 --> 00:08:08.280
object.

127
00:08:08.490 --> 00:08:13.890
We talked about the key here, representing the text that's going to be rendered here inside the actual

128
00:08:14.070 --> 00:08:14.460
HTML.

129
00:08:14.640 --> 00:08:19.560
So again, if this is whatever we would write, whatever here instead and the value for the property

130
00:08:19.560 --> 00:08:23.910
is going to be the actual component that Vue should render whenever we use this value.

131
00:08:24.660 --> 00:08:29.400
And then of course, one other thing I of course, forgot to mention is here we have a convenient use

132
00:08:29.400 --> 00:08:33.660
of ES6 syntax where our property name is the same as our value name.

133
00:08:33.660 --> 00:08:39.990
And if you're familiar with E6, you know that you can actually simplify this down to this expression,

134
00:08:39.990 --> 00:08:41.730
which is going to be just the name by itself.

135
00:08:41.730 --> 00:08:47.610
This tells E6 create a property with a key of May NAV and associate it with some kind of name, like

136
00:08:47.610 --> 00:08:49.410
a variable or an import in your program.

137
00:08:49.560 --> 00:08:53.910
There's also called May now, so that's a little bit of a simpler way to accomplish what we just did,

138
00:08:54.150 --> 00:08:55.980
and that keeps the same result.

139
00:08:56.190 --> 00:08:56.430
All right.

140
00:08:56.670 --> 00:08:58.170
That's all there is to cover in this lesson.

141
00:08:58.170 --> 00:08:59.700
So I will see you in the next one.
