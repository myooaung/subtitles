1
00:00:00,700 --> 00:00:01,630
Okay.

2
00:00:01,630 --> 00:00:06,550
So there's still one super small feature that I would like to add in this section.

3
00:00:06,760 --> 00:00:11,890
And this is going to be a throwback because it's been forever since we talked about this.

4
00:00:12,250 --> 00:00:17,470
So what I'm going to do here is I'm going to expand my organization's accordion and I'm going to select

5
00:00:17,470 --> 00:00:18,520
a sample company.

6
00:00:18,550 --> 00:00:19,510
Let's do the You and me.

7
00:00:19,960 --> 00:00:23,290
We can see that on the right hand side, the jobs are correctly filtering.

8
00:00:23,680 --> 00:00:26,140
Now, what I'm going to do is click the sign in button.

9
00:00:26,260 --> 00:00:29,530
And as a reminder, what that does is it opens up the sub nav.

10
00:00:29,830 --> 00:00:36,280
And you may recall, because it's been forever ago that our subnet has a section that has the number

11
00:00:36,280 --> 00:00:37,270
of jobs matched.

12
00:00:37,540 --> 00:00:41,110
When we were starting out, we were building our page top to bottom.

13
00:00:41,290 --> 00:00:47,560
So what we actually did in this sub nav component is we wrote down hardcoded the number of 1653.

14
00:00:47,920 --> 00:00:53,410
And of course, in the real world, the way this page is supposed to work is as the user clicks, filters

15
00:00:53,410 --> 00:00:55,630
and we filter the jobs on the right hand side.

16
00:00:55,870 --> 00:00:58,990
That number of jobs should be reflected right here.

17
00:00:59,320 --> 00:01:01,660
So in our example, we get 100 jobs.

18
00:01:01,840 --> 00:01:07,420
So when the page loads for the first time, we want the sub now to have 100 jobs match displayed.

19
00:01:07,780 --> 00:01:13,090
And then when we filter down those jobs by selecting an organization, we want this number to update

20
00:01:13,180 --> 00:01:16,180
to show the number of jobs that we now have a match with.

21
00:01:16,390 --> 00:01:21,610
Of course, as we filter, we should expect to see a lower number than 100 because we are only selecting

22
00:01:21,610 --> 00:01:22,090
a subset.

23
00:01:22,330 --> 00:01:26,920
But the key idea is that this number should update as the user clicks organizations.

24
00:01:27,190 --> 00:01:33,040
And the beautiful part about this is we actually have just about everything we need to make this a reality.

25
00:01:33,340 --> 00:01:40,210
Because remember, we have a getter called filter jobs by organizations that is a getter that returns

26
00:01:40,210 --> 00:01:44,290
to us the array of applicable filter jobs that we're rendering on the right hand side.

27
00:01:45,100 --> 00:01:52,000
If we use that getter to get that array and we simply take its length how many filter jobs it has,

28
00:01:52,270 --> 00:01:55,720
that is the exact number that we want to display here in green.

29
00:01:55,750 --> 00:01:56,110
Right.

30
00:01:56,410 --> 00:02:01,240
If we have 100 jobs and there's 40 point of view jobs in this array, we'll have 40 jobs.

31
00:02:01,330 --> 00:02:03,280
And the length of that array will be 40.

32
00:02:03,280 --> 00:02:05,710
And that's exactly what I want to put in here.

33
00:02:06,070 --> 00:02:11,770
So all we need to do is introduce our existing getter into this component of sub nav, get that array

34
00:02:11,770 --> 00:02:13,660
and take its length and display it right here.

35
00:02:13,900 --> 00:02:19,720
And then we're going to utilize the full beauty of UCS because as soon as the View Store State updates,

36
00:02:19,870 --> 00:02:25,300
we're going to update all over the page because our new filter jobs by organizations array will be new.

37
00:02:25,420 --> 00:02:29,230
We're going to update here on the right and we're also going to update the number right here.

38
00:02:29,350 --> 00:02:35,380
And that is a perfect use case for view X whenever you have multiple parts of your screen that are dependent

39
00:02:35,380 --> 00:02:39,580
on the same piece of data that you want to update, that you want to keep in sync.

40
00:02:39,790 --> 00:02:45,970
That's why you use View X, because you extract all of that change to a higher level View X store.

41
00:02:46,120 --> 00:02:51,160
So you are able to automatically update components as that store changes, right?

42
00:02:51,370 --> 00:02:57,040
So what I'd like to do is to write a test for our subnet to display the dynamic number of jobs that

43
00:02:57,040 --> 00:03:01,510
it's going to get from the filter jobs by organizations, array, length.

44
00:03:01,870 --> 00:03:03,550
So let me transition back to this code.

45
00:03:04,860 --> 00:03:07,320
And what I'm going to do is open up our sub nav component.

46
00:03:07,620 --> 00:03:09,810
It's been a while since we've been in here, but here it is.

47
00:03:10,140 --> 00:03:12,060
And here is my test suite for it.

48
00:03:12,060 --> 00:03:12,570
And sub.

49
00:03:12,570 --> 00:03:13,340
Now that test?

50
00:03:13,530 --> 00:03:13,890
Yes.

51
00:03:15,580 --> 00:03:21,010
And as a reminder, because it's been a while, here is our span and here is where we are hard coding

52
00:03:21,010 --> 00:03:26,140
the number of 1653 or perhaps you chose a different number, but here we are hard coding that value.

53
00:03:26,290 --> 00:03:27,760
So it's always going to be this.

54
00:03:27,760 --> 00:03:31,620
We want this number to be dynamic and we want it to come from view X.

55
00:03:31,930 --> 00:03:38,260
So currently in our components test that we have a create config function that creates the configuration

56
00:03:38,260 --> 00:03:40,330
object for our mount function right here.

57
00:03:40,630 --> 00:03:45,520
And right now we're only locking out one global property on the component, which is dollar sign root.

58
00:03:45,670 --> 00:03:48,760
We now also want to mark out dollar sign store.

59
00:03:48,940 --> 00:03:55,090
We need to provide a store because it is on that story that we're going to have our getters object with

60
00:03:55,090 --> 00:04:00,460
the expected filter jobs like organization getter that we're eventually going to use in this component.

61
00:04:00,580 --> 00:04:05,650
We're doing a TDD approach, so we're wiring up our tests first before we actually wire up the implementation.

62
00:04:05,800 --> 00:04:09,790
We know eventually that we want to use that getter here, so we need to make sure we're providing that

63
00:04:09,790 --> 00:04:11,470
getter on a mock store object.

64
00:04:11,860 --> 00:04:16,690
So what I'm going to do here is I'm going to provide a second argument after root name, and it's just

65
00:04:16,690 --> 00:04:19,750
going to be a sample store this time around.

66
00:04:19,750 --> 00:04:23,050
Let me just provide a default fallback of an empty object.

67
00:04:23,770 --> 00:04:28,120
So there's many different ways we can approach this, we can restructure the store properties, etc.

68
00:04:28,330 --> 00:04:32,980
But what I want to do here is just provide that store right here in line as Dollar Signs Store.

69
00:04:33,370 --> 00:04:38,620
So if the user does not give me a custom store, I'm just going to fall back to a store of an empty

70
00:04:38,620 --> 00:04:39,040
object.

71
00:04:39,190 --> 00:04:43,600
All right, then what I want to do is in each test, I want to wire up that store.

72
00:04:43,990 --> 00:04:48,490
So I know eventually that to create config, in addition to passing a route name, I'm going to need

73
00:04:48,490 --> 00:04:49,570
to pass a store.

74
00:04:49,960 --> 00:04:51,250
So I'm going to define that store.

75
00:04:51,250 --> 00:04:52,510
Constant right above here.

76
00:04:52,510 --> 00:04:53,950
Constant dollar sign store.

77
00:04:55,640 --> 00:04:58,130
And now we think about what our component is going to need.

78
00:04:58,460 --> 00:05:03,650
Well, in order to talk to the filter jobs by organizations getter, we're going to need to have a getters

79
00:05:03,650 --> 00:05:04,850
property our store.

80
00:05:04,880 --> 00:05:11,540
Just like the real view X Store, we're emulating that API, we're emulating that interface on our smaller

81
00:05:11,540 --> 00:05:12,320
JavaScript object.

82
00:05:12,590 --> 00:05:14,180
So we're going to need a getters property.

83
00:05:14,360 --> 00:05:19,370
And on that we're going to need to have the getter that we expect to use, which is filter jobs by organizations.

84
00:05:20,340 --> 00:05:22,350
And that is going to give me an array.

85
00:05:22,690 --> 00:05:23,910
So let me provide an array here.

86
00:05:23,910 --> 00:05:26,280
And again, we can fill it up with arbitrary values.

87
00:05:26,490 --> 00:05:29,010
But for now, let me just provide two sample objects.

88
00:05:30,290 --> 00:05:33,320
Let's do this object right here and this object right here.

89
00:05:33,320 --> 00:05:34,880
And just to make it a little bit less confusing.

90
00:05:35,060 --> 00:05:39,500
Let's just give an object, a sample property, just so it doesn't come off as kind of empty and lifeless.

91
00:05:39,740 --> 00:05:42,170
Let's just say ID one and ID two.

92
00:05:42,590 --> 00:05:47,930
This is perhaps not necessarily necessary because as long as our array has two filter jobs, then we

93
00:05:48,260 --> 00:05:50,960
should be able to take that array of two objects and get a length of two.

94
00:05:51,170 --> 00:05:52,760
But still, just to provide some context.

95
00:05:52,790 --> 00:05:55,040
These are supposed to be job like objects.

96
00:05:55,190 --> 00:06:00,470
Okay, so now I'm going to provide that filter jobs by organizations getter on my store.

97
00:06:00,500 --> 00:06:01,820
They passed down to my component.

98
00:06:02,870 --> 00:06:04,430
And here we can see it.

99
00:06:04,430 --> 00:06:10,220
Display's Job Count is currently testing that the job count exists and that test would still pass once

100
00:06:10,220 --> 00:06:10,790
we implement this.

101
00:06:10,940 --> 00:06:12,800
But I want to be a little bit more specific.

102
00:06:12,980 --> 00:06:19,210
I want to validate that we are not just seeing a job count, but that that job count is equal to two.

103
00:06:19,460 --> 00:06:19,800
Why?

104
00:06:19,930 --> 00:06:20,360
Two?

105
00:06:20,420 --> 00:06:23,420
Because that's the exact number of filtered jobs I have in my array.

106
00:06:23,720 --> 00:06:30,500
So what I'm going to do is instead of using the exists method, I'm going to instead invoke on my job

107
00:06:30,500 --> 00:06:31,190
count wrapper.

108
00:06:31,190 --> 00:06:33,710
I'm going to call the text method as a reminder.

109
00:06:33,710 --> 00:06:36,890
That's going to give me the text that is displayed to the user.

110
00:06:37,220 --> 00:06:41,960
So it's going to find all the text within this job count, which is going to be the actually the div

111
00:06:41,960 --> 00:06:46,100
right here with a data test of job count is what I'm finding right here on line 29.

112
00:06:46,340 --> 00:06:53,990
I'm going to get the text inside that div and I expect that text to match the expression of two jobs

113
00:06:53,990 --> 00:06:54,470
matched.

114
00:06:55,910 --> 00:06:58,430
So we have the jobs match text right here.

115
00:06:58,580 --> 00:07:03,920
But I want the 1653 to be instead expressed as a dynamic value of two.

116
00:07:04,130 --> 00:07:07,400
Two being the number of jobs in my array right here.

117
00:07:07,910 --> 00:07:08,300
All right.

118
00:07:08,600 --> 00:07:11,780
So right now, our test is going to fail, which is to be expected.

119
00:07:12,290 --> 00:07:17,240
And for the second test, we don't actually need to modify anything because remember, create config

120
00:07:17,300 --> 00:07:19,400
can accept the second argument of the store.

121
00:07:19,610 --> 00:07:22,550
But we have a default fallback right here, so we don't need to worry about it.

122
00:07:22,910 --> 00:07:26,840
So, okay, so we are good to write our implementation and let's take a look at what we're getting right

123
00:07:26,840 --> 00:07:27,090
here.

124
00:07:27,110 --> 00:07:29,540
We get the exact same failure that we expect.

125
00:07:29,780 --> 00:07:36,710
We expected a substring of two jobs matched, but instead we're getting a substring of 1653 jobs matched,

126
00:07:36,860 --> 00:07:39,320
which makes sense because we hardcoded that value.

127
00:07:39,560 --> 00:07:41,660
So let's make that value dynamic.

128
00:07:41,960 --> 00:07:49,010
So what we're going to need to do is start by importing the getter that we want to utilize import filter

129
00:07:49,010 --> 00:07:49,640
jobs.

130
00:07:50,670 --> 00:07:52,050
By organizations.

131
00:07:52,800 --> 00:07:58,230
And that is going to come from the top level source directory and the store folder.

132
00:07:58,410 --> 00:08:03,150
And remember Node will look for the index just file and that is our view, a set of file that has this

133
00:08:03,150 --> 00:08:03,600
concept.

134
00:08:03,840 --> 00:08:09,600
And then in order to enable this getter to exist, not just as a getter method, but as a component

135
00:08:09,600 --> 00:08:15,030
method that runs the getter, I can also import my map getters helper function.

136
00:08:15,330 --> 00:08:20,310
So map getters from view x and I have everything I need.

137
00:08:20,340 --> 00:08:26,500
So in computed, what I'm going to do is the structure, the return value of map getters invoke and

138
00:08:26,500 --> 00:08:27,860
make sure to provide a common the end.

139
00:08:27,870 --> 00:08:32,400
And as always, what I'm going to do is provide an array of the getters that I want to make available

140
00:08:32,400 --> 00:08:33,270
to this component.

141
00:08:33,600 --> 00:08:35,430
So I'm going to provide that constant right here.

142
00:08:36,240 --> 00:08:41,880
And by using the map getters function, I'm now going to have a filter jobs by organization's computed

143
00:08:41,880 --> 00:08:44,400
property on this sub nav component.

144
00:08:44,910 --> 00:08:51,180
Now, in previous usages, like the ones we just did in our sidebar, we wanted to take this array and

145
00:08:51,180 --> 00:08:52,980
iterate over and render a job listing.

146
00:08:53,130 --> 00:08:57,000
Now we don't actually care about this array in terms of its job objects.

147
00:08:57,150 --> 00:08:58,890
We just want its length.

148
00:08:59,250 --> 00:09:03,300
However, we have the filter jobs by organizations computed property available.

149
00:09:03,630 --> 00:09:07,740
If we're using it in the script section, we have to prefix it with the this keyword.

150
00:09:07,980 --> 00:09:12,450
But remember, if we want to use it in our template, we can simply reference it without this, and

151
00:09:12,450 --> 00:09:17,550
it will operate no differently than a regular computed property like a regular data property.

152
00:09:17,760 --> 00:09:20,040
So right here where we have 1653.

153
00:09:21,180 --> 00:09:23,160
We do a line break just so it's easier to read.

154
00:09:24,350 --> 00:09:28,010
And what I'm going to do here is use my double curly braces to interpolate a string value.

155
00:09:28,310 --> 00:09:33,650
I'm going to reference filter jobs by organizations which I have available to me as a computed property

156
00:09:33,650 --> 00:09:37,850
because I use map getters and this is the whole array, right?

157
00:09:38,000 --> 00:09:40,610
Is the array of however many jobs we have in our test.

158
00:09:40,610 --> 00:09:42,010
It's going to be two.

159
00:09:42,620 --> 00:09:44,900
In the real world, it's going to be however many we filter.

160
00:09:45,170 --> 00:09:47,700
But I don't want to obviously render this array.

161
00:09:47,720 --> 00:09:52,910
I want to render a number that is its length because that is the number of filter jobs.

162
00:09:53,090 --> 00:09:58,910
So all I have to do is on that array, I'm going to access the length property, save that, and now

163
00:09:58,910 --> 00:10:01,970
we're going to do is render however many elements we have in the array.

164
00:10:02,120 --> 00:10:08,960
We can see our tests pass, which means the test is finding two jobs matched in the template, and that's

165
00:10:08,960 --> 00:10:09,860
exactly what we want.

166
00:10:10,310 --> 00:10:15,170
So now we're reusing this getter in two parts of our code base to render the jobs in the right and to

167
00:10:15,170 --> 00:10:19,160
render the dynamic number of jobs that are matched in our step.

168
00:10:19,160 --> 00:10:22,350
Now, let's now transition to our browser and see it in action.

169
00:10:22,740 --> 00:10:26,120
So let's go to Chrome and let me refresh the page.

170
00:10:26,120 --> 00:10:27,110
So we start from scratch.

171
00:10:27,680 --> 00:10:29,360
All right, I'm going to expand to organizations.

172
00:10:29,360 --> 00:10:30,950
You can see we have nothing selected here.

173
00:10:31,310 --> 00:10:32,300
I'm going to click sign in.

174
00:10:32,360 --> 00:10:34,580
We can see we have 100 jobs matched.

175
00:10:34,760 --> 00:10:36,020
That is perfect, right?

176
00:10:36,020 --> 00:10:39,470
Because we know that is the number of jobs that we are getting from our backend.

177
00:10:39,770 --> 00:10:42,500
So when we start out, there are no filter jobs.

178
00:10:42,710 --> 00:10:48,050
And remember we wrote that logic in the very couple lessons ago where if we didn't have any organization

179
00:10:48,060 --> 00:10:52,130
selected, we are going to present all 100 jobs on the right hand side.

180
00:10:52,220 --> 00:10:55,010
We did that to fix that bug where we weren't seeing anything.

181
00:10:55,190 --> 00:11:00,380
If the user has no selected organizations, our filter jobs by organizations getter is going to return

182
00:11:00,380 --> 00:11:02,180
the original array of 100 jobs.

183
00:11:02,420 --> 00:11:03,920
And that's what we're seeing right here on the right.

184
00:11:04,130 --> 00:11:07,850
And notice, because we're taking the length of that array, we're getting 100 right here.

185
00:11:08,300 --> 00:11:13,190
Now, what's going to happen when I click View Tube, when I click View Tube, we're going to commit

186
00:11:13,190 --> 00:11:14,660
the mutation to the View Store.

187
00:11:14,870 --> 00:11:22,190
That's going to cause the selected organization's slice of global data to be updated, which in turn

188
00:11:22,190 --> 00:11:24,080
is going to force the getter to rerun.

189
00:11:24,080 --> 00:11:25,910
Because the getter is watching that update.

190
00:11:26,150 --> 00:11:29,960
The getter is going to arrive at a new derived array of filter jobs.

191
00:11:30,290 --> 00:11:30,620
Right.

192
00:11:30,620 --> 00:11:36,290
And because we've now connected two components to that getter, our sub now right here and our job listings

193
00:11:36,290 --> 00:11:38,330
component right here, the getter updates.

194
00:11:38,330 --> 00:11:42,590
Therefore, our view X knows to communicate to both of these components that they should update and

195
00:11:42,590 --> 00:11:46,550
both of these things update simultaneously the jobs in the right and the number right here.

196
00:11:46,850 --> 00:11:47,390
Take a look.

197
00:11:47,390 --> 00:11:48,860
I'm going to select YouTube right now.

198
00:11:49,280 --> 00:11:49,820
Beautiful.

199
00:11:49,970 --> 00:11:51,560
We see everything on the right hand side.

200
00:11:51,560 --> 00:11:53,000
We see the number of jobs that have matched.

201
00:11:53,210 --> 00:11:55,490
Once again, I'm going to select another value like point of view.

202
00:11:55,820 --> 00:11:56,300
Perfect.

203
00:11:56,300 --> 00:11:57,980
Our jobs, expand on the right hand side.

204
00:11:58,100 --> 00:11:59,570
We now have 32 jobs matched.

205
00:11:59,750 --> 00:12:03,380
I'm now going to d select youtube a jobs in the right update.

206
00:12:03,380 --> 00:12:04,640
Our number of jobs matched.

207
00:12:04,970 --> 00:12:09,500
And one way I can prove to you that all this is working is if we filter by every single organization

208
00:12:09,650 --> 00:12:11,690
that will obviously capture every single job.

209
00:12:11,870 --> 00:12:15,230
So if we add all those results back up, we're going to be back to 100.

210
00:12:16,100 --> 00:12:17,390
And that's how the page starts out.

211
00:12:17,390 --> 00:12:21,980
By default, having all of them checked is basically the user equivalent of having none of them checked

212
00:12:22,160 --> 00:12:26,420
because we're filtering for every possible organization, which inherently includes every single possible

213
00:12:26,420 --> 00:12:27,650
job, right?

214
00:12:27,650 --> 00:12:31,550
So as we do, all this will notice that that number is updating.

215
00:12:32,270 --> 00:12:38,330
So after several dozen and several dozens of hours apart from this feature, it's finally a reality.

216
00:12:38,330 --> 00:12:43,790
We finally implemented the sudden have to have a dynamic number, but hopefully more importantly that

217
00:12:43,790 --> 00:12:50,930
demonstrates the purpose of view X and how it really helps us to connect different parts of the UI,

218
00:12:51,050 --> 00:12:56,510
to be able to automatically react to changes instead of having to have this component somehow interact

219
00:12:56,510 --> 00:13:01,970
with this component to keep track of each other, we simply export that logic that state to this higher

220
00:13:01,970 --> 00:13:02,990
level view store.

221
00:13:03,200 --> 00:13:08,060
I initially described it as like a cloud that is hovering over your app and keeping track of all those

222
00:13:08,060 --> 00:13:08,390
changes.

223
00:13:08,540 --> 00:13:09,650
And that's exactly what it is.

224
00:13:09,830 --> 00:13:14,810
By simply extracting that logic upwards, these two components don't have to interact with each other.

225
00:13:14,990 --> 00:13:17,090
They simply have to talk to The View Store.

226
00:13:17,300 --> 00:13:18,080
Same thing here.

227
00:13:18,230 --> 00:13:22,820
This organization's collection of checkboxes doesn't need to tell this, its collection of job listings

228
00:13:22,820 --> 00:13:26,450
that it needs to change, or this number that needs to change.

229
00:13:26,600 --> 00:13:29,120
It simply tells you that it has a new organization.

230
00:13:29,270 --> 00:13:30,830
View X three runs getters.

231
00:13:30,830 --> 00:13:32,630
We run components render.

232
00:13:32,630 --> 00:13:33,260
We have this.

233
00:13:33,260 --> 00:13:33,800
We have that.

234
00:13:34,800 --> 00:13:35,130
All right.

235
00:13:35,130 --> 00:13:37,560
And we have that in a pretty simple, terse syntax.

236
00:13:37,950 --> 00:13:38,340
All right.

237
00:13:38,490 --> 00:13:40,280
So this is a good place to leave off.

238
00:13:40,290 --> 00:13:41,310
We've accomplished a lot.

239
00:13:41,310 --> 00:13:45,900
We've accomplished our original user goal of allowing the user to filter the jobs that they're interested

240
00:13:45,900 --> 00:13:47,820
by by their organization.

241
00:13:48,060 --> 00:13:52,570
We're going to type the section with a little bit of a refactor, and then we'll proceed on to another

242
00:13:52,570 --> 00:13:52,710
one.
