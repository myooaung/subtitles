1
00:00:00,270 --> 00:00:01,260
All right.

2
00:00:01,260 --> 00:00:06,360
So in this lesson, I want to introduce you to another data type called unknown.

3
00:00:06,570 --> 00:00:11,400
And I also want to introduce you to a technique in TypeScript called type guarding.

4
00:00:11,730 --> 00:00:14,100
So I have some code from the previous lesson.

5
00:00:14,100 --> 00:00:19,320
I have my chameleon variable, which I have given an explicit any type which allows me to assign it

6
00:00:19,320 --> 00:00:20,490
a value like five.

7
00:00:20,910 --> 00:00:27,540
So unfortunately with this approach, TypeScript basically ignores whatever value we have and thus knowing

8
00:00:27,540 --> 00:00:32,880
that it cannot confirm that it is a number as opposed to something like a string, it's going to allow

9
00:00:32,880 --> 00:00:35,940
basically any behavior that we want on it.

10
00:00:36,180 --> 00:00:41,040
So for example, on a string in JavaScript we have a method called two uppercase.

11
00:00:41,280 --> 00:00:43,380
On a number we do not.

12
00:00:43,650 --> 00:00:49,260
So take a look at what happens when I try to take my chameleon variable and try to invoke two uppercase

13
00:00:49,260 --> 00:00:49,560
on it.

14
00:00:50,010 --> 00:00:52,320
We're actually not going to get an error.

15
00:00:52,320 --> 00:00:52,590
Right?

16
00:00:52,590 --> 00:00:56,010
And this is sort of reinstating the point that we mentioned.

17
00:00:56,010 --> 00:01:01,290
The previous lesson is when we use any, we defeat the entire purpose of TypeScript because TypeScript,

18
00:01:01,770 --> 00:01:06,900
which should know, hey, if you have a number, that number doesn't have a two uppercase method.

19
00:01:06,900 --> 00:01:08,370
That's something that belongs to a string.

20
00:01:08,910 --> 00:01:14,670
But because we used any, we basically overrode TypeScript and said treat it like regular JavaScript,

21
00:01:14,820 --> 00:01:16,010
treat it like a variable.

22
00:01:16,020 --> 00:01:17,010
It can be anything at all.

23
00:01:17,190 --> 00:01:22,590
So TypeScript cannot validate that our chameleon variable has or does not have a to uppercase method.

24
00:01:22,770 --> 00:01:27,060
And obviously when we run this code, we're going to get the error in our window right here.

25
00:01:27,060 --> 00:01:30,960
This is the exact and we expect chameleon to uppercase is not a function.

26
00:01:31,140 --> 00:01:37,050
This is a common failure in JavaScript and this is what we're trying to avoid by using TypeScript,

27
00:01:37,050 --> 00:01:37,290
right?

28
00:01:37,440 --> 00:01:41,760
But because we used any TypeScript was not able to solve that problem for us.

29
00:01:42,090 --> 00:01:48,090
So let me introduce you to another type of type that we can use instead of any here.

30
00:01:48,210 --> 00:01:49,890
I'm going to use the word unknown.

31
00:01:49,890 --> 00:01:51,750
An unknown is itself a type.

32
00:01:51,930 --> 00:01:56,730
And just like that word means in the English language, unknown sort of means we don't know.

33
00:01:57,120 --> 00:01:57,420
Right?

34
00:01:57,600 --> 00:02:01,500
And unknown is actually a little less flexible than any.

35
00:02:01,500 --> 00:02:06,720
And that's a good thing because any is too permissive, it's allows too many bad things to happen.

36
00:02:06,930 --> 00:02:12,510
Unknown is going to say, Hey, you're telling me, TypeScript, that you don't know everything about

37
00:02:12,510 --> 00:02:13,140
this type.

38
00:02:13,320 --> 00:02:18,720
However, I'm going to force you to be a little bit stricter in double checking things before you execute

39
00:02:18,720 --> 00:02:18,930
them.

40
00:02:19,080 --> 00:02:24,630
I'm going to force you to prove to me that an operation is allowed before I let you do it.

41
00:02:24,990 --> 00:02:31,440
So notice here we're now getting an error when we try to invoke to uppercase and you can see the description

42
00:02:31,440 --> 00:02:33,240
here is object is of type unknown.

43
00:02:33,540 --> 00:02:38,610
So a typescript is basically trying to tell us, I don't know whether Chameleon is allowed to have two

44
00:02:38,610 --> 00:02:39,540
uppercase or not.

45
00:02:39,540 --> 00:02:45,780
It may or it may not, but prove to me first that it can before I allow you to perform this operation.

46
00:02:46,110 --> 00:02:52,200
Keep in mind the similarity that Unknown has with something like any is that we can totally reassign

47
00:02:52,200 --> 00:02:53,280
to any other values.

48
00:02:53,280 --> 00:02:58,470
For example, here I can totally assign chameleon to true, and on the next line I can assign chameleon

49
00:02:58,470 --> 00:03:05,040
to something like an array of one to all of that remains valid, so unknown shares that with the any

50
00:03:05,040 --> 00:03:05,370
type.

51
00:03:05,550 --> 00:03:07,290
However, here's where things get different.

52
00:03:07,290 --> 00:03:13,110
It's when we try to invoke something like any kind of method, that's when TypeScript will complain.

53
00:03:13,350 --> 00:03:15,810
Okay, so how do we fix this issue?

54
00:03:15,810 --> 00:03:21,960
How do we communicate a typescript that we do indeed have something like a string in the program?

55
00:03:21,960 --> 00:03:28,740
And only if we have a string then do we want to invoke to uppercase, because only then we will know

56
00:03:28,740 --> 00:03:30,570
with certainty that we have a string.

57
00:03:30,860 --> 00:03:32,130
Let me show you how this is going to work.

58
00:03:32,850 --> 00:03:38,670
You may be familiar that in JavaScript and also in TypeScript you have a special operator called Type

59
00:03:38,670 --> 00:03:39,000
of.

60
00:03:39,240 --> 00:03:43,920
When I use the word operator, what I mean is it can be written basically like any mathematical symbol,

61
00:03:43,920 --> 00:03:44,940
like plus or minus.

62
00:03:44,940 --> 00:03:49,410
It's not a function or a method that you invoke with parentheses is simply write it out.

63
00:03:49,680 --> 00:03:51,420
So we have an operator called Type.

64
00:03:51,750 --> 00:03:53,070
It's literally written like this.

65
00:03:53,370 --> 00:03:58,170
And if you provided the name of any value in your program, such as our chameleon variable, it will

66
00:03:58,170 --> 00:04:01,050
tell you the type of that value.

67
00:04:01,350 --> 00:04:06,840
So when I run this file and I'm using console.log here to print out the value, you'll see this is our

68
00:04:06,840 --> 00:04:07,440
old failure.

69
00:04:07,440 --> 00:04:08,100
So ignore this.

70
00:04:08,310 --> 00:04:12,630
You'll see that it's telling us that the type of chameleon is a number.

71
00:04:12,870 --> 00:04:16,560
So basically it's telling us the type that that value currently has.

72
00:04:16,920 --> 00:04:22,590
So what we can do is wrap this kind of logic in something like an if statement and let me write it out

73
00:04:22,590 --> 00:04:24,150
and I'll explain what we're doing here.

74
00:04:24,420 --> 00:04:31,110
So I'm going to put an if statement here and I'm seeing if the type of chameleon at that given moment

75
00:04:31,110 --> 00:04:35,100
of execution in our program is equal to string.

76
00:04:36,440 --> 00:04:45,170
So remember that type of operator will give me a a string that describes the type that I have and I'm

77
00:04:45,170 --> 00:04:47,450
going to check if that's strings literal.

78
00:04:47,450 --> 00:04:49,970
Actual content is the string string.

79
00:04:50,240 --> 00:04:55,070
I know it's a little bit confusing and kind of multilayer, but here, for example, we got the type

80
00:04:55,070 --> 00:04:56,480
of as a string of number.

81
00:04:56,480 --> 00:05:01,520
Because of the type of number, if the type of the chameleon variable is literally a string which are

82
00:05:01,520 --> 00:05:07,790
validating by comparing to the string string, then inside these curly braces, I know that chameleon

83
00:05:07,790 --> 00:05:12,200
is a string and thus I'm going to be allowed to invoke two uppercase on it.

84
00:05:13,160 --> 00:05:13,460
Right.

85
00:05:13,640 --> 00:05:19,130
And notice when we do this, then TypeScript no longer complains even though we used unknown.

86
00:05:19,430 --> 00:05:23,270
So what we have here is called a type guard, right?

87
00:05:23,480 --> 00:05:27,770
And the reason why it's called a type card, the name may be intuitive and may not, but the idea is

88
00:05:27,770 --> 00:05:30,260
that it's guarding against certain operations.

89
00:05:30,260 --> 00:05:36,380
It's protecting us from doing something unless we validate that we have the correct type for it.

90
00:05:36,710 --> 00:05:42,590
So TypeScript says, I don't know right here on line two if you have a string, but on line number three,

91
00:05:42,590 --> 00:05:48,410
if this evaluates to true and you tell me in this validation that this is indeed a string, I know that

92
00:05:48,410 --> 00:05:53,660
if we reach line number four, I guarantee that I have a string because you've proven it to me in this

93
00:05:53,660 --> 00:05:59,360
conditional and thus I feel confident allowing you to execute to uppercase that method on it.

94
00:05:59,570 --> 00:05:59,840
Right.

95
00:06:00,110 --> 00:06:02,930
So what we have right here is an example of a type guard.

96
00:06:03,110 --> 00:06:06,890
It's a technique where we basically check the type of something in our program.

97
00:06:07,010 --> 00:06:12,290
And only once you validate that we have something that we can do an operation with, only then do we

98
00:06:12,290 --> 00:06:17,540
perform the actual operation in the actual conditional in the curly braces belonging to that if statement.

99
00:06:18,080 --> 00:06:18,350
Right.

100
00:06:18,500 --> 00:06:23,960
And this is one advantage that unknown offered us over any and that's why many people recommend using

101
00:06:23,960 --> 00:06:29,540
unknown in place of any everywhere is that it forces you into writing a little bit more of these stricter

102
00:06:29,540 --> 00:06:29,900
checks.

103
00:06:30,110 --> 00:06:34,490
Now, granted, of course, the best approach is to give the explicit type like in this example, obviously

104
00:06:34,490 --> 00:06:36,980
we know it's a number, so numbers better than unknown.

105
00:06:37,160 --> 00:06:40,760
But once again, as we mentioned in the previous lesson, if you're running through a program and you

106
00:06:40,760 --> 00:06:43,940
just want to get it to work, but you also want to write in a little bit of stability.

107
00:06:44,000 --> 00:06:49,730
Stability unknown is a better choice than any because it will force you to write type guards that will

108
00:06:49,730 --> 00:06:51,080
enable protections like this.

109
00:06:51,410 --> 00:06:55,700
So once again, when I run this, we're not going to get any actual output and we're not going to get

110
00:06:55,700 --> 00:07:00,740
any actual output because the type of chameleon on line three is going to execute to be the string of

111
00:07:00,740 --> 00:07:01,160
number.

112
00:07:01,310 --> 00:07:03,890
Number is not equal to the string of string.

113
00:07:04,070 --> 00:07:06,110
So our if statement will evaluate to false.

114
00:07:06,260 --> 00:07:08,810
This logic will never run in comparison.

115
00:07:08,810 --> 00:07:13,140
If I change chameleon to something else like Bobby, right?

116
00:07:13,190 --> 00:07:14,720
In that case, our logic will run.

117
00:07:14,720 --> 00:07:17,180
Rex, you're not going to see it because we're not console.log lists.

118
00:07:17,420 --> 00:07:18,500
So let's console.log this.

119
00:07:18,800 --> 00:07:24,110
But now we're going to see because our type guard on line number three will permit the action.

120
00:07:24,200 --> 00:07:28,340
We're still going to watch for it, but now our conditional is going to evaluate to true.

121
00:07:28,550 --> 00:07:31,700
So we're going to run this logic right here and we know it's a string.

122
00:07:31,700 --> 00:07:35,960
So we know that we are allowed to to invoke the two uppercase method on a string.

123
00:07:36,170 --> 00:07:38,330
And we are going to see the output of Bobby right here.

124
00:07:38,900 --> 00:07:39,230
All right.

125
00:07:39,230 --> 00:07:44,150
So two things we learned in this lesson, the type of unknown we declared the same way we do with any

126
00:07:44,150 --> 00:07:46,160
other type, a colon followed by its name.

127
00:07:46,340 --> 00:07:49,550
It's very similar to any in the sense that it permits any value.

128
00:07:49,700 --> 00:07:51,380
We can make chameleon a string.

129
00:07:51,380 --> 00:07:57,110
We can make chameleon a, a boolean, a number, an array and object afterwards and change its value

130
00:07:57,110 --> 00:07:57,890
throughout the program.

131
00:07:58,040 --> 00:08:01,850
Not saying that that's a good thing in terms of design, but saying that it is possible.

132
00:08:02,150 --> 00:08:06,380
But one advantage of using unknown over any is that it forces you to use type guards.

133
00:08:06,560 --> 00:08:07,520
What does it type guard?

134
00:08:07,520 --> 00:08:10,820
It's basically a check to validate that we have the right type.

135
00:08:10,820 --> 00:08:18,140
We guard right we protect to make sure we have the right type of type before we execute any kind of

136
00:08:18,140 --> 00:08:25,070
behavior on that value and in the in the actual body or the block belonging to the if statement.

137
00:08:25,250 --> 00:08:27,170
So this is an example of a type guard.

138
00:08:27,170 --> 00:08:30,830
It's not some kind of fancy, you know, syntax or anything like that.

139
00:08:30,980 --> 00:08:35,780
It's just an idea in TypeScript to guard against the type that you're working with to make sure what

140
00:08:35,780 --> 00:08:37,580
you're doing is valid and allowed.

141
00:08:37,700 --> 00:08:43,010
Another way to decrease the chance that you have the kind of error we saw in the beginning of this lesson.

142
00:08:43,400 --> 00:08:43,700
All right.

143
00:08:43,700 --> 00:08:45,380
So that's all there is to cover in this lesson.

144
00:08:45,380 --> 00:08:46,940
So I will see you in the next one.
