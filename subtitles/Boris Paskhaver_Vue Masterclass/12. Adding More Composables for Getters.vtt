WEBVTT
1
00:00:00.300 --> 00:00:01.290
All right.

2
00:00:01.290 --> 00:00:08.040
So the next component that I'd like to refactor is going to be the job filter side bar job types component.

3
00:00:08.340 --> 00:00:13.620
This is the component that renders the checkboxes on the left hand side with the different job types.

4
00:00:13.980 --> 00:00:16.410
So here's a reminder of what this component looks like.

5
00:00:16.620 --> 00:00:22.470
And as I scroll down here, we'll notice that it has some familiar ideas data which we know how to deal

6
00:00:22.470 --> 00:00:24.030
with in the composition API.

7
00:00:24.210 --> 00:00:27.150
Computed properties which we know how to deal with map getters.

8
00:00:27.400 --> 00:00:30.360
There's also some new ideas here, like map mutations.

9
00:00:30.480 --> 00:00:37.290
So that will offer us a new opportunity to incrementally learn more about the composition API.

10
00:00:37.650 --> 00:00:42.090
So with that said, you'll notice that we have our unique job types getter being used here.

11
00:00:42.240 --> 00:00:46.980
And I propose that we write a new composable function to access that getter.

12
00:00:47.220 --> 00:00:52.180
That's exactly the same idea that we did earlier with our filter jobs getter.

13
00:00:52.200 --> 00:00:57.660
We created a composable function because we imagine that that getter would be reused in multiple components.

14
00:00:57.870 --> 00:01:03.600
And even if it's not, it offers us a nice way to isolate the store reading logic to its own function

15
00:01:03.810 --> 00:01:06.300
that we can then mock out for our component tests.

16
00:01:06.600 --> 00:01:10.290
So what I propose we do is a very similar idea for this component.

17
00:01:10.530 --> 00:01:14.040
We're going to write a composable function to run this getter.

18
00:01:14.250 --> 00:01:19.530
And as always, to keep things a little bit interesting, we're going to switch things up by using TDD.

19
00:01:19.890 --> 00:01:25.680
So I'm going to go to my composable so far right here and I'm going to open up my composable test that

20
00:01:25.680 --> 00:01:26.190
gs4.

21
00:01:26.430 --> 00:01:31.770
And I'd like to run a test for a new composable function called use unique job types.

22
00:01:31.980 --> 00:01:38.970
And the responsibility of that composable function will be to talk to the correct getter property or

23
00:01:38.970 --> 00:01:41.190
getter method, which is unique job types.

24
00:01:41.460 --> 00:01:44.250
So our test is going to be very similar to the one above.

25
00:01:44.280 --> 00:01:46.080
So let's use that for inspiration.

26
00:01:46.410 --> 00:01:50.070
So right here, I'm going to describe my eventual composable function.

27
00:01:50.340 --> 00:01:52.680
It's going to be called use unique job types.

28
00:01:53.220 --> 00:01:56.010
Composable is are typically going to begin with the use keyword.

29
00:01:56.550 --> 00:01:58.050
So use unique job types.

30
00:01:59.100 --> 00:02:00.120
And what is it going to do?

31
00:02:00.510 --> 00:02:05.030
It retrieves unique job types from store.

32
00:02:06.120 --> 00:02:06.540
All right.

33
00:02:06.900 --> 00:02:12.420
So as always, we can imagine that we're going to use you store somewhere in the body of that composable.

34
00:02:12.450 --> 00:02:14.180
That's exactly what we did right here.

35
00:02:14.190 --> 00:02:15.270
Unused filter jobs.

36
00:02:15.480 --> 00:02:19.290
We need the view store in order to get its getters property and the right getter.

37
00:02:19.620 --> 00:02:22.020
So in order to do that, we're going to invoke you store.

38
00:02:22.200 --> 00:02:27.810
So I can assume I'm going to use it in my implementation and thus mock it out in my actual test.

39
00:02:28.140 --> 00:02:31.980
So right here use store is already imported and already adjust mock function.

40
00:02:32.220 --> 00:02:34.020
So I'm going to mock return value here.

41
00:02:34.410 --> 00:02:36.660
We're going to need an object with the getters property.

42
00:02:37.050 --> 00:02:41.520
But the getter we care about this time around is called unique job types.

43
00:02:42.440 --> 00:02:44.130
That was the name of our original getter.

44
00:02:44.340 --> 00:02:47.790
And as you may recall, what it actually returns is a set object.

45
00:02:48.030 --> 00:02:53.370
So right here I will instantiate a set, so new set, and I'll provide an argument of an array with

46
00:02:53.370 --> 00:02:54.720
a single value of full time.

47
00:02:55.290 --> 00:03:00.330
Technically speaking, we don't actually need to make this a set because in order to validate that we're

48
00:03:00.330 --> 00:03:05.010
accessing the right object properties, this can technically be whatever we want and our test would

49
00:03:05.010 --> 00:03:05.610
still work.

50
00:03:05.880 --> 00:03:11.610
The ultimate value that we are storing in our reactive object, as long as it's the exact same one as

51
00:03:11.610 --> 00:03:17.610
we're accessing from the object, then we have validated that our code is properly reading the store

52
00:03:17.730 --> 00:03:19.110
and asking the right properties.

53
00:03:19.230 --> 00:03:23.220
What the final value at the end of that road is is kind of irrelevant.

54
00:03:23.400 --> 00:03:28.800
But in order to keep it similar to our actual real world implementation, that's why I'm using a set

55
00:03:28.800 --> 00:03:29.130
here.

56
00:03:29.280 --> 00:03:30.450
But you can use whatever you want.

57
00:03:30.450 --> 00:03:32.040
An array, a number boolean.

58
00:03:32.220 --> 00:03:34.290
The logic of the test would remain the same.

59
00:03:35.220 --> 00:03:35.580
All right.

60
00:03:35.790 --> 00:03:36.840
So afterwards, we're going to.

61
00:03:36.840 --> 00:03:37.470
Of course.

62
00:03:39.160 --> 00:03:44.980
Invoke our eventual composable function, which is going to be called use unique job types.

63
00:03:45.790 --> 00:03:47.890
And this name does not exist in this file yet.

64
00:03:47.890 --> 00:03:53.050
So I'm going to scroll up and import it and I know we are importing something that does not exist yet,

65
00:03:53.050 --> 00:03:58.240
but that is the whole point of TDD is we just write our tests first, so we're going to assume we're

66
00:03:58.240 --> 00:04:00.520
going to be able to import it from our composable file.

67
00:04:00.760 --> 00:04:04.300
We're going to assume that it's going to return a value to us, will store that in result.

68
00:04:04.570 --> 00:04:09.490
And we're going to assume that's going to be a reactive view value with a value property or reactive

69
00:04:09.490 --> 00:04:10.540
object to be more specific.

70
00:04:10.900 --> 00:04:15.940
So on my results reactive object, I'm going to access the value property and I'm going to expect that

71
00:04:15.940 --> 00:04:18.430
to equal my set object from above.

72
00:04:19.710 --> 00:04:24.960
And if it is, then I can validate that we are accessing the right properties on my View X store.

73
00:04:25.470 --> 00:04:27.150
So paste that right here.

74
00:04:27.270 --> 00:04:31.770
Except of course my keyboard never works when I need it to always embarrasses me.

75
00:04:31.770 --> 00:04:34.110
Let me try copying and pasting again right here.

76
00:04:34.950 --> 00:04:35.550
There we go.

77
00:04:35.580 --> 00:04:35.880
All right.

78
00:04:36.180 --> 00:04:36.750
Save that.

79
00:04:36.750 --> 00:04:40.540
And we are, of course, going to get the failure so we can go ahead and write that function.

80
00:04:40.560 --> 00:04:42.450
So right here, export const.

81
00:04:43.440 --> 00:04:47.430
It's another composable function which I will call use unique job types.

82
00:04:48.360 --> 00:04:48.750
All right.

83
00:04:48.780 --> 00:04:54.930
In this function body, we're going to need to get access to our view store, which we can get which

84
00:04:54.930 --> 00:04:57.840
we can get, of course, by invoking our use store function.

85
00:04:57.840 --> 00:05:02.460
So right here can store equals use store basically going to be a replica from above.

86
00:05:02.760 --> 00:05:09.450
And in order to return a reactive object, I'm going to use the computed function from view and on my

87
00:05:09.450 --> 00:05:15.060
store I know that there is a getters object and that the object I want to access the correct getter.

88
00:05:15.180 --> 00:05:20.070
We already have the getter name saved to a constant, so let's import it right here from our constants

89
00:05:20.070 --> 00:05:20.490
file.

90
00:05:21.120 --> 00:05:23.130
It's called the unique job types getter.

91
00:05:23.310 --> 00:05:28.290
So right here, instead of using dot syntax to access, I'm going to use square brackets so I can provide

92
00:05:28.290 --> 00:05:35.130
a constant here and JavaScript is simply going to get that property from the dynamic constant name.

93
00:05:35.610 --> 00:05:40.370
So save that, let it run and we can see everything is still going to pass.

94
00:05:40.660 --> 00:05:41.010
All right.

95
00:05:41.010 --> 00:05:44.160
Before we close off this lesson, though, I want to do one more thing.

96
00:05:44.340 --> 00:05:50.670
You may remember that our job filter, sidebar job types component is very similar in nature to another

97
00:05:50.670 --> 00:05:54.690
component, and that component is job filter sidebar organizations.

98
00:05:54.930 --> 00:06:00.480
This is another combination of checkboxes that we render for the users to filter and basically works

99
00:06:00.480 --> 00:06:01.800
very, very similarly.

100
00:06:01.950 --> 00:06:07.500
The only exception, of course, is the getter that this component uses as well as the mutation that

101
00:06:07.500 --> 00:06:07.890
it runs.

102
00:06:08.160 --> 00:06:14.640
So this component uses the unique organization's getter in order to get a set of the unique organizations.

103
00:06:14.820 --> 00:06:16.830
Remember, this is the two separate components.

104
00:06:17.040 --> 00:06:22.050
Each of them renders a different collection of checkboxes, one for job types and one for organizations.

105
00:06:22.320 --> 00:06:28.350
So since I imagine using very similar logic when I refactor this component, let's write that composable

106
00:06:28.350 --> 00:06:31.830
right now that's going to talk to the unique organizations getter.

107
00:06:32.100 --> 00:06:34.260
So basically the exact same thing that we did right here.

108
00:06:34.260 --> 00:06:40.320
But for the unique organizations getter, so right here on the right hand side, very similar test.

109
00:06:40.320 --> 00:06:45.450
I'm going to describe my eventual composable function, which is called Use Unique Organizations.

110
00:06:47.570 --> 00:06:55.910
Right here it's going to retrieves unique job organizations from store.

111
00:06:57.330 --> 00:06:57.990
Right here.

112
00:06:57.990 --> 00:06:59.880
I'm going to mark my return value.

113
00:07:00.180 --> 00:07:03.000
In fact, for the most part, we can copy most of the code right here.

114
00:07:03.010 --> 00:07:04.050
So let me copy this.

115
00:07:04.560 --> 00:07:05.580
Place it down below.

116
00:07:05.910 --> 00:07:08.370
And of course, we don't care about this getter in this test.

117
00:07:08.370 --> 00:07:10.710
We care about our unique organization's getter.

118
00:07:11.040 --> 00:07:12.690
So right here, unique organizations.

119
00:07:13.470 --> 00:07:17.640
And of course, that is still a set object, but full time doesn't really make sense logically, since

120
00:07:17.640 --> 00:07:19.650
this is supposed to store company names.

121
00:07:20.010 --> 00:07:22.620
So let's provide a sample company string here like Apple.

122
00:07:23.880 --> 00:07:27.750
And of course, if we do that, that means that we also need to compare it to a set containing the single

123
00:07:27.750 --> 00:07:28.870
value apple right here.

124
00:07:29.520 --> 00:07:34.380
And since we are using a different composable, this, of course, is going to be used unique.

125
00:07:34.740 --> 00:07:37.920
Organizations that function does not exist in this file.

126
00:07:37.920 --> 00:07:39.690
So let's scroll up top and import it.

127
00:07:40.230 --> 00:07:42.330
Use unique organizations.

128
00:07:42.840 --> 00:07:43.620
Save that.

129
00:07:44.650 --> 00:07:45.110
All right.

130
00:07:45.110 --> 00:07:49.630
So everything is failing because it's unable to import that name and recognize it makes sense to write

131
00:07:49.630 --> 00:07:50.710
here on the left hand side.

132
00:07:50.980 --> 00:07:54.700
Create a new composable function called use unique organizations.

133
00:07:54.910 --> 00:07:56.140
I'll play an arrow function.

134
00:07:56.380 --> 00:07:58.690
How are we going to get access to the View Store?

135
00:07:58.810 --> 00:07:59.380
Simple.

136
00:07:59.380 --> 00:08:05.520
We simply use the used store helper function from the View Library.

137
00:08:05.830 --> 00:08:11.050
Then we return a computer function, which in turn will give us a reactive object that we're going to

138
00:08:11.050 --> 00:08:11.920
spit back out.

139
00:08:12.310 --> 00:08:12.670
All right.

140
00:08:12.670 --> 00:08:14.320
So we want to talk to our view store.

141
00:08:14.350 --> 00:08:19.720
We want to get its getters in which getter do we want unique organizations which we need to import from

142
00:08:19.720 --> 00:08:20.860
our constants file.

143
00:08:21.130 --> 00:08:21.880
So there we go.

144
00:08:22.120 --> 00:08:23.800
And provide that in square brackets here.

145
00:08:23.830 --> 00:08:25.870
Unique organizations save that.

146
00:08:27.290 --> 00:08:28.010
And there we go.

147
00:08:28.040 --> 00:08:32.690
So we now have three composable functions and each one is simply going to talk to the store and run

148
00:08:32.690 --> 00:08:38.210
a getter to get that reactive piece of data to be able to be used in one or many components.

149
00:08:38.360 --> 00:08:43.640
And again, when the store updates, view is going to know to track that because our composable function

150
00:08:43.640 --> 00:08:45.560
references that reactive object in here.

151
00:08:45.800 --> 00:08:51.800
So if our view x store updates our getters will rerun or the ones that are relevant and this function

152
00:08:51.800 --> 00:08:52.310
will know.

153
00:08:52.310 --> 00:08:57.590
And thus if we use this function in the component and return its return value in the object that we

154
00:08:57.590 --> 00:09:03.110
make available to the component in the setup method, we will get those changes when Vue changes or

155
00:09:03.110 --> 00:09:04.460
when its store state changes.

156
00:09:04.850 --> 00:09:05.210
All right.

157
00:09:05.210 --> 00:09:07.880
So things are looking good and I will see you in the next lesson.
