WEBVTT
1
00:00:00.450 --> 00:00:01.280
Okay.

2
00:00:01.280 --> 00:00:04.940
So the next component that I want to target is going to be Action Button.

3
00:00:05.210 --> 00:00:11.690
So let's open up that component file in action button view and let's go through the usual protocol to

4
00:00:11.690 --> 00:00:13.610
update this component to use TypeScript.

5
00:00:13.850 --> 00:00:17.050
Right here, I'm going to add the lagging attribute and set it to press.

6
00:00:17.570 --> 00:00:23.330
And right here I'm going to import, define component and I'm going to wrap my entire object right here

7
00:00:23.330 --> 00:00:25.370
in a defined component of function call.

8
00:00:26.210 --> 00:00:28.130
And we're going to see some new errors right here.

9
00:00:28.940 --> 00:00:29.240
All right.

10
00:00:29.240 --> 00:00:30.790
So we have two violations here.

11
00:00:30.800 --> 00:00:34.690
The first one is coming from this value, a check right here.

12
00:00:34.700 --> 00:00:37.910
As a reminder, this is where we set up our prop type checking.

13
00:00:38.090 --> 00:00:43.010
So that view in the browser console validates that we're getting a prop of the right type.

14
00:00:43.310 --> 00:00:47.750
So this is something very similar to what TypeScript does for us, but this is specifically for Vue

15
00:00:47.750 --> 00:00:48.920
sake in the browser.

16
00:00:49.220 --> 00:00:54.470
So the syntax is different, but in a way it's kind of serving the same purpose as Type four does.

17
00:00:54.740 --> 00:00:59.780
So here we're specifying that we're actually going to have a prop call type that is going to be of type

18
00:00:59.780 --> 00:01:00.170
string.

19
00:01:00.530 --> 00:01:05.120
Now, the problem is here, when we define this validator method, if I hover my mouse over value,

20
00:01:05.390 --> 00:01:09.320
the problem is TypeScript does not understand what value is going to be.

21
00:01:09.590 --> 00:01:15.410
We know that value is going to be the actual value of the type prop that is flowing in and that is going

22
00:01:15.410 --> 00:01:21.020
to be a string of either primary or secondary, depending on what the parent component provides when

23
00:01:21.020 --> 00:01:21.980
it renders action button.

24
00:01:22.190 --> 00:01:27.110
And here what we're validating is that string must be either primary or secondary in order for this

25
00:01:27.110 --> 00:01:28.430
validation check to pass.

26
00:01:28.700 --> 00:01:33.110
So for our sake, we can tell TypeScript right here that we know value is going to be a string.

27
00:01:34.460 --> 00:01:36.920
And you can see the violation is going to go away.

28
00:01:37.220 --> 00:01:41.570
So you might be curious, how come TypeScript was not able to figure out that the value is a string?

29
00:01:41.720 --> 00:01:43.760
Even though we said the type is a string right here.

30
00:01:44.080 --> 00:01:47.480
Remember, this kind of validation is Vue specific.

31
00:01:47.480 --> 00:01:51.860
It is specific object structure that is that Vue knows how to deal with.

32
00:01:52.010 --> 00:01:54.860
But TypeScript is a totally separate, independent language.

33
00:01:54.860 --> 00:01:56.120
It's not a part of you.

34
00:01:56.360 --> 00:01:57.770
It's a totally separate language.

35
00:01:57.770 --> 00:02:00.320
You can use TypeScript in regular JavaScript projects.

36
00:02:00.470 --> 00:02:03.980
You can use it with Vue projects, with React projects, with Angular projects.

37
00:02:04.220 --> 00:02:09.380
So just because Vue understands that its own prop validation object will have a type property set to

38
00:02:09.380 --> 00:02:14.720
a string, TypeScript doesn't understand that this line means that the validator value right here will

39
00:02:14.720 --> 00:02:15.620
be a string as well.

40
00:02:15.860 --> 00:02:20.660
We have to connect the lines between Vue and TypeScript because they're not always going to connect

41
00:02:20.660 --> 00:02:21.290
perfectly.

42
00:02:21.290 --> 00:02:26.780
They're two totally separate independent projects developed by two separate independent teams.

43
00:02:27.020 --> 00:02:30.950
So as much as we're going to that, we're going to try to make them work with each other and hope that

44
00:02:30.950 --> 00:02:32.000
they many times do.

45
00:02:32.180 --> 00:02:36.680
Other times, as we saw, the differences are not going to be perfect or are not going to be correct,

46
00:02:36.680 --> 00:02:38.150
and it's up to us to correct them.

47
00:02:38.930 --> 00:02:43.370
So we also have another issue here, this type not being properly recognized.

48
00:02:43.520 --> 00:02:49.700
And unfortunately, when I hover my mouse over this, we're going to see an absolutely frightening description

49
00:02:49.700 --> 00:02:49.910
here.

50
00:02:50.090 --> 00:02:56.240
Property type does not exist on this type, which is some kind of really complex type declaration using

51
00:02:56.270 --> 00:02:57.290
two rafts right here.

52
00:02:57.290 --> 00:02:59.330
I'm guessing that's the starter interface right here.

53
00:02:59.720 --> 00:03:05.060
So what I did here is I basically Googled for this type of error, basically to structuring a property

54
00:03:05.060 --> 00:03:10.880
off of reactive props where a reactive object passed to the two Raf's function and having TypeScript

55
00:03:10.880 --> 00:03:11.720
have problems with it.

56
00:03:12.020 --> 00:03:16.850
And on one StackOverflow page I found and I'll provide a link to that as a resource to this lesson.

57
00:03:17.090 --> 00:03:22.130
A simple solution I found, and I'm not exactly sure why it works, but a simple solution I found was

58
00:03:22.130 --> 00:03:29.000
to turn the validator function right here into a arrow function, and the syntax for that looks like

59
00:03:29.000 --> 00:03:29.300
this.

60
00:03:29.300 --> 00:03:34.160
Instead of providing this parameter list directly after the validator name, what you do is you provide

61
00:03:34.160 --> 00:03:39.470
a colon right here, and then we have to provide our arrow function syntax after our parameter list,

62
00:03:39.680 --> 00:03:43.610
which is of course the arrow syntax right here with the equals sign and the greater sign.

63
00:03:43.820 --> 00:03:49.430
And as soon as I added that for some reason that made the logic here be understood better by TypeScript.

64
00:03:49.520 --> 00:03:52.430
I honestly don't know what the issue is here.

65
00:03:52.430 --> 00:03:54.890
I wish I could be a perfect teacher and explain this to you.

66
00:03:54.890 --> 00:03:59.270
But I also got to be honest, when I have no clue what's going on, I simply found a solution and I

67
00:03:59.270 --> 00:04:00.290
used it and it works.

68
00:04:00.470 --> 00:04:00.830
All right.

69
00:04:01.100 --> 00:04:05.720
So remember, props is going to be a reactive object as it flows in, but it's individual properties

70
00:04:05.720 --> 00:04:10.730
are not reactive, which is why we pass it into two refs to make it a object with reactive properties.

71
00:04:10.910 --> 00:04:16.130
So when we do structure type, it's not just the original string, it's a reactive object dealing with

72
00:04:16.130 --> 00:04:17.660
a string or holding a string.

73
00:04:17.840 --> 00:04:20.060
That's why we have to access type that value here.

74
00:04:20.210 --> 00:04:24.800
And I'm guessing somewhere in that complexity of having everything wrapped in a reactive object somewhere,

75
00:04:24.800 --> 00:04:25.940
TypeScript got confused.

76
00:04:26.120 --> 00:04:26.480
All right.

77
00:04:26.750 --> 00:04:28.040
But that solves the problem for us.

78
00:04:28.040 --> 00:04:31.760
And of course, the only other thing left to do is to update the corresponding test suite.

79
00:04:32.120 --> 00:04:33.470
So we're going to head to action button.

80
00:04:33.470 --> 00:04:36.650
That test is right here.

81
00:04:36.680 --> 00:04:37.430
Let's go ahead.

82
00:04:37.430 --> 00:04:41.090
And as always, change this file to have a Dot's extension.

83
00:04:41.300 --> 00:04:42.800
It is now a TypeScript file.

84
00:04:43.100 --> 00:04:47.390
We're going to see a familiar error, which is that we need to add a dot view extension right here,

85
00:04:47.750 --> 00:04:48.410
save that.

86
00:04:48.650 --> 00:04:51.830
And as I scroll down, it doesn't look like anything else is creating a problem.

87
00:04:52.040 --> 00:04:58.160
So I can run NPM, run test, colon, watch and I am as a reminder, making a git commit at the end

88
00:04:58.160 --> 00:04:58.790
of every lesson.

89
00:04:58.940 --> 00:05:03.890
So my test watch command will only run the files that have changed or related to files that have changed.

90
00:05:04.280 --> 00:05:06.860
So here we can see we are going to run the tests for action button.

91
00:05:07.040 --> 00:05:11.480
And I'm guessing for these two test files, those are files that are also utilizing the action button

92
00:05:11.480 --> 00:05:12.350
component in some way.

93
00:05:12.740 --> 00:05:14.630
So with that you can see everything is still passing.

94
00:05:14.630 --> 00:05:16.490
So everything is looking at all right.

95
00:05:16.640 --> 00:05:18.140
So that's all there is to cover in this one.

96
00:05:18.140 --> 00:05:19.640
So I will see you in the next lesson.
