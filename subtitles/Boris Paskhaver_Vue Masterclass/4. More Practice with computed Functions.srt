1
00:00:00,560 --> 00:00:01,550
All right.

2
00:00:01,550 --> 00:00:07,640
So the next thing that we're going to do is replace all of our former computed properties with computed

3
00:00:07,640 --> 00:00:08,180
functions.

4
00:00:08,420 --> 00:00:14,480
So we have four that we need to recreate current page, previous page, next page and displayed jobs.

5
00:00:14,690 --> 00:00:17,510
And most of the logic is going to be basically the same.

6
00:00:17,690 --> 00:00:22,550
We just have to be very careful with our references because there's a lot of things here that referred

7
00:00:22,550 --> 00:00:27,380
to the this keyword and we have to update it to be using our new more up to date reference.

8
00:00:27,710 --> 00:00:32,630
So for example, here in our current page computed property, we're using this dot dollar sign root

9
00:00:32,630 --> 00:00:33,560
from the router.

10
00:00:33,710 --> 00:00:39,350
We no longer have access to this, but we can get the root object from the use root function from view

11
00:00:39,350 --> 00:00:39,770
router.

12
00:00:39,920 --> 00:00:40,910
So let's import that.

13
00:00:41,240 --> 00:00:45,860
So I'm going to go all the way to the top here and right below use store.

14
00:00:45,860 --> 00:00:51,200
I will also import use root and that is going to come from view router.

15
00:00:52,340 --> 00:00:58,010
And down below in my setup method, I can go ahead and get my route by invoking use route.

16
00:00:58,790 --> 00:00:59,180
All right.

17
00:00:59,480 --> 00:01:02,520
While we're at it, there's something I forgot to do in the previous lesson.

18
00:01:02,540 --> 00:01:06,920
We are no longer using this filter job's constant, so let's go ahead and remove that.

19
00:01:07,250 --> 00:01:08,750
That's just a little bit left over.

20
00:01:09,380 --> 00:01:14,060
Okay, so now we have a route and we're good to create our four computed properties, but that also

21
00:01:14,060 --> 00:01:17,690
means we're going to need our computed function from view.

22
00:01:17,930 --> 00:01:21,230
So right here I will also import computed from view.

23
00:01:22,390 --> 00:01:22,760
All right.

24
00:01:23,080 --> 00:01:24,490
So let's begin with current page.

25
00:01:24,490 --> 00:01:26,160
Current pages currently computed property.

26
00:01:26,170 --> 00:01:31,990
What I'm going to do is make current page a constant, and it's going to hold the return value of my

27
00:01:31,990 --> 00:01:33,490
computed function invocation.

28
00:01:33,940 --> 00:01:39,160
Remember, what I passed to computed is going to be a function that I was going to rerun every time

29
00:01:39,160 --> 00:01:41,620
the values that it is tracking inside a change.

30
00:01:41,890 --> 00:01:43,870
So here we have this two liner right here.

31
00:01:43,870 --> 00:01:47,650
I'm going to express this two liner in one line because it is possible to do that.

32
00:01:47,920 --> 00:01:53,230
What we're doing fundamentally is we're calling pass into the number object in JavaScript and then we're

33
00:01:53,230 --> 00:02:00,340
passing in root, dot query, dot page or the fallback string value of one.

34
00:02:00,670 --> 00:02:04,930
So just as a reminder, because I'm speeding a little bit quickly through this, I'm basically copying

35
00:02:04,930 --> 00:02:09,910
the exact logic I have in this computed property, but I'm replacing all of my former references to

36
00:02:09,910 --> 00:02:10,360
the new one.

37
00:02:10,360 --> 00:02:15,040
So this dot root right here becomes replaced with my new root, which I have access to.

38
00:02:15,160 --> 00:02:18,370
Otherwise I access the query property and the page property.

39
00:02:18,550 --> 00:02:24,040
If we don't have that, I fall back to a string of one and the ultimate string that I end up with here,

40
00:02:24,040 --> 00:02:30,880
either this one or the fallback of one, is what I passed back into this helper function to get an integer,

41
00:02:31,000 --> 00:02:34,030
and then I'm going to wrap that integer in its own computed functionality.

42
00:02:34,150 --> 00:02:39,940
So we're going to get a reactive current page object with a value property set to whatever the page

43
00:02:39,940 --> 00:02:42,940
string is or the query proven to be more specific.

44
00:02:43,420 --> 00:02:43,690
All right.

45
00:02:43,690 --> 00:02:48,850
So that's going to eliminate current page right here that we can move on to doing something very similar

46
00:02:48,850 --> 00:02:49,810
for previous page.

47
00:02:50,140 --> 00:02:54,430
So right here I'm going to say contact previous page.

48
00:02:54,850 --> 00:02:56,830
We need to re compute this every time.

49
00:02:56,830 --> 00:02:58,420
One, it's dependent on changes.

50
00:02:58,420 --> 00:03:03,580
So once again, I want to wrap all my logic inside a computed function and pass the function we want

51
00:03:03,580 --> 00:03:04,540
to rerun each time.

52
00:03:04,840 --> 00:03:10,570
What I'm going to do here actually, is I'm going to cut and paste our old code from here into here,

53
00:03:11,200 --> 00:03:14,530
and then we're simply going to modify because this should be good enough to update itself.

54
00:03:14,950 --> 00:03:19,450
So in our previous implement implementation, we were using this dot current page.

55
00:03:19,630 --> 00:03:23,800
Obviously this no longer exists, but now current page exists above.

56
00:03:23,980 --> 00:03:25,270
So we're going to access current page.

57
00:03:25,450 --> 00:03:29,170
You'll notice we're going to get a really helpful error from yes lint.

58
00:03:29,170 --> 00:03:34,330
And he will tell us, hey, you must use dot value to read or write the value wrap by computed.

59
00:03:34,600 --> 00:03:38,770
So s lint recognizes that we're getting a reactive object here that's storing the number.

60
00:03:38,770 --> 00:03:40,270
It's not the number itself.

61
00:03:40,420 --> 00:03:44,320
So we can subtract minus one from a reactive object.

62
00:03:44,320 --> 00:03:45,970
We need to get the actual number it's storing.

63
00:03:46,150 --> 00:03:48,640
So right here I'm going to do current page dot value.

64
00:03:49,660 --> 00:03:50,020
All right.

65
00:03:50,320 --> 00:03:54,130
So again, to reiterate, we can use computed things in other computer things.

66
00:03:54,370 --> 00:03:57,580
And root, which we got right here is a reactive object.

67
00:03:57,850 --> 00:04:03,190
So because we're referencing root right here in this computer function, every time the root object

68
00:04:03,190 --> 00:04:08,410
changes, more specifically the query object inside it and the page property, the current page computed

69
00:04:08,410 --> 00:04:10,120
function right here will rerun.

70
00:04:10,390 --> 00:04:15,490
And because we're referencing current page in our next computed function, every time current page changes.

71
00:04:15,640 --> 00:04:22,030
So will so will this function rerun right here, thus updating the value of the previous page computed

72
00:04:22,030 --> 00:04:22,480
object.

73
00:04:22,840 --> 00:04:23,200
All right.

74
00:04:23,200 --> 00:04:29,590
So we can totally nest computed reactive objects in other functions, pass to other computer functions,

75
00:04:29,590 --> 00:04:31,390
and you can go as many levels down as we need.

76
00:04:31,630 --> 00:04:32,020
All right.

77
00:04:32,350 --> 00:04:34,270
So we've taken care of previous page.

78
00:04:34,300 --> 00:04:38,320
Let's do something very similar for our next computer property, which is next page.

79
00:04:38,710 --> 00:04:45,670
So right here I'm going to say next page and we're going to utilize the computed function provided a

80
00:04:45,670 --> 00:04:46,900
function as an argument.

81
00:04:47,050 --> 00:04:54,430
And in here, I'll copy and paste our former implementation right here and modify it accordingly.

82
00:04:54,820 --> 00:04:58,440
So once again, in here, we're referencing we're referencing this dot current page.

83
00:04:58,450 --> 00:05:03,730
This no longer exists, but current page does as a reactive object with a value property.

84
00:05:05,470 --> 00:05:08,350
All right, once again, this does not exist, so I can get rid of that.

85
00:05:08,590 --> 00:05:14,920
We no longer have filter jobs in all caps, but we do have filter jobs right here from our composable

86
00:05:14,920 --> 00:05:15,310
function.

87
00:05:15,310 --> 00:05:16,990
And this is the exact same thing we want.

88
00:05:17,170 --> 00:05:20,380
This is our reactive object, storing our array of filter jobs.

89
00:05:20,680 --> 00:05:23,920
So instead of referencing this constant, I'm just going to reference filter jobs.

90
00:05:24,160 --> 00:05:27,160
But once again, this is not going to be enough in this case.

91
00:05:27,160 --> 00:05:30,580
S lint is not going to help us because this logic is coming from another file.

92
00:05:30,910 --> 00:05:36,760
But remember, use filter jobs is a composable that returns its own computed reactive object.

93
00:05:36,940 --> 00:05:41,860
Thus, filter jobs right here does not represent an array.

94
00:05:41,860 --> 00:05:45,220
It represents a reactive object holding an array.

95
00:05:45,370 --> 00:05:50,710
So I need to make sure I get that underlying array by doing dot value and then I want to take the length

96
00:05:50,710 --> 00:05:54,910
of that actual array, not as my filter jobs reactive object.

97
00:05:55,180 --> 00:06:00,310
So once again, because we're referencing filter jobs here whenever this composable function reruns

98
00:06:00,310 --> 00:06:02,620
and that will happen whenever the getter updates.

99
00:06:02,890 --> 00:06:07,060
So whenever we get our updates, this composable function will rerun, it's going to re compute the

100
00:06:07,060 --> 00:06:12,550
filtered jobs which we're referencing right here, which means we're going to rerun this computed function

101
00:06:12,550 --> 00:06:16,600
and calculate the next value of the next page object to the reactive value.

102
00:06:16,780 --> 00:06:18,310
As soon as those changes happen.

103
00:06:18,310 --> 00:06:23,890
So it's almost like this propagation and event sets everything off and it is re computed by the next

104
00:06:23,890 --> 00:06:28,750
thing line which forces the re computation of the next thing line, so on and so forth.

105
00:06:29,260 --> 00:06:29,620
All right.

106
00:06:29,620 --> 00:06:31,450
So with that, we have taken care of next page.

107
00:06:31,450 --> 00:06:34,270
And the last one we have to take care of is display jobs.

108
00:06:34,540 --> 00:06:39,880
So right here, very similarly, I'm going to declare displayed jobs and that's going to be the return

109
00:06:39,880 --> 00:06:41,320
value of my computed function.

110
00:06:41,560 --> 00:06:43,270
This is going to be the standard protocol.

111
00:06:43,270 --> 00:06:48,100
Whenever we are replacing the computed properties in the composition API, we're simply going to do

112
00:06:48,100 --> 00:06:49,630
computed function calls instead.

113
00:06:49,990 --> 00:06:50,980
Let me once again.

114
00:06:52,000 --> 00:06:52,660
Cut this.

115
00:06:53,730 --> 00:06:54,720
Paste this right here.

116
00:06:55,560 --> 00:06:55,920
All right.

117
00:06:55,920 --> 00:07:00,820
Once again, we no longer have current page or this not current page, but we do have current page that

118
00:07:00,840 --> 00:07:01,350
value.

119
00:07:02,550 --> 00:07:02,970
All right.

120
00:07:02,970 --> 00:07:06,570
Page number at this juncture is going to be a number because we got it from values.

121
00:07:06,570 --> 00:07:07,400
So this is fine.

122
00:07:07,410 --> 00:07:08,100
This is fine.

123
00:07:08,310 --> 00:07:10,320
This start filter jobs is no longer.

124
00:07:10,320 --> 00:07:13,620
Okay, so we're going to replace this with filter jobs from above.

125
00:07:13,860 --> 00:07:16,890
Once again, filter jobs is our reactive object.

126
00:07:16,890 --> 00:07:22,560
We need to get the array because it is the array that has the slice method, not our reactive object,

127
00:07:22,560 --> 00:07:24,990
storing the array and tracking changes to it.

128
00:07:25,200 --> 00:07:28,290
So make sure you access that value before invoking slice.

129
00:07:29,130 --> 00:07:29,460
All right.

130
00:07:29,460 --> 00:07:34,860
That allows us to clear up computed, but we are not done quite yet because while we declared all of

131
00:07:34,860 --> 00:07:39,000
these computed function calls right here, the last thing we need to do, of course, is to make them

132
00:07:39,000 --> 00:07:40,470
available to our template.

133
00:07:40,590 --> 00:07:44,340
And of course, the way we do that is by returning an object with all the things we need.

134
00:07:44,730 --> 00:07:45,060
All right.

135
00:07:45,060 --> 00:07:48,210
So in our template, we're obviously going to need previous page and next page.

136
00:07:48,360 --> 00:07:50,220
We're doing them right here, previous page.

137
00:07:50,370 --> 00:07:51,000
Next page.

138
00:07:51,120 --> 00:07:52,740
We're going to need current page as well.

139
00:07:52,860 --> 00:07:58,440
And finally, we're going to need display jobs in order to iterate over that array of sliced jobs.

140
00:07:58,650 --> 00:08:00,930
So we're going to need four properties in our template.

141
00:08:00,930 --> 00:08:03,360
So we need to make sure we return all of them right here.

142
00:08:03,660 --> 00:08:07,320
So right here, it's going to be displayed at jobs.

143
00:08:07,380 --> 00:08:08,670
That's the one we're iterating over.

144
00:08:08,940 --> 00:08:15,270
Then we have our previous page, then we have our current page, and finally our next page.

145
00:08:15,510 --> 00:08:20,700
If you ever forget what your template needs it, just scroll up and see all the names that we use throughout

146
00:08:20,850 --> 00:08:23,880
and then make sure you're returning all those properties from your object.

147
00:08:24,120 --> 00:08:25,290
This should take care of it.

148
00:08:25,290 --> 00:08:27,330
So if I navigate to my browser.

149
00:08:29,060 --> 00:08:29,330
All right.

150
00:08:29,330 --> 00:08:31,310
We just saw that error, but it went away, which is great.

151
00:08:31,580 --> 00:08:32,270
That means you re.

152
00:08:32,870 --> 00:08:34,070
Let me go to the jobs page.

153
00:08:34,280 --> 00:08:37,640
We can scroll down and see that our next button is here.

154
00:08:37,830 --> 00:08:42,260
If I click that and scroll down, we can see previous and next are working just fine.

155
00:08:42,410 --> 00:08:44,840
So it looks looks like everything is still functional.

156
00:08:45,050 --> 00:08:50,690
So we have completely replaced our former component implementation from using the options API to now

157
00:08:50,690 --> 00:08:52,220
using the composition API.

158
00:08:52,550 --> 00:08:56,810
Now, unfortunately, our setup method is getting a little bit bulky, but that's fine because a lot

159
00:08:56,810 --> 00:08:58,880
of similar logic is close to each other.

160
00:08:59,090 --> 00:09:04,490
We're going to talk more in the next lesson about how we can simplify this setup method by moving some

161
00:09:04,490 --> 00:09:07,950
of this logic to separate composable functions in other files.

162
00:09:07,980 --> 00:09:08,240
All right.

163
00:09:08,240 --> 00:09:11,510
So we are going to start to break down this complex setup method in the next lesson.

164
00:09:11,750 --> 00:09:15,440
But the good news for now is that we have refactored that old complexity.

165
00:09:15,560 --> 00:09:20,600
We've kind of isolated it to a single method and we are using the most latest features in view by now

166
00:09:20,720 --> 00:09:21,920
the composition API.

167
00:09:22,250 --> 00:09:25,280
So with that, I will leave you here and I will see you in the next lesson.
