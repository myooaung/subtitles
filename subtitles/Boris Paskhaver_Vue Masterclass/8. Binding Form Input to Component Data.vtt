WEBVTT
1
00:00:00.730 --> 00:00:01.630
All right.

2
00:00:01.640 --> 00:00:07.930
So in this lesson, we'll learn about how to create two way data binding between our components data

3
00:00:08.050 --> 00:00:09.580
and our text input.

4
00:00:09.790 --> 00:00:11.980
What is the benefit of two way data binding?

5
00:00:12.070 --> 00:00:17.050
It ensures that our components, data and the input field are always in sync.

6
00:00:17.320 --> 00:00:22.060
So whenever our data changes, we're going to update the value in the input field, and that's what

7
00:00:22.060 --> 00:00:23.170
we saw in the previous lesson.

8
00:00:23.350 --> 00:00:26.800
And now we're going to ensure that that process works in reverse.

9
00:00:26.980 --> 00:00:32.560
Whenever we update the input field in the browser, we want to automatically change our components data

10
00:00:32.560 --> 00:00:37.720
property so they are aligned and equal to each other, which creates less of a chance for error.

11
00:00:37.900 --> 00:00:39.430
Okay, so how do we do that?

12
00:00:40.060 --> 00:00:45.040
Well, what we need to do is to react to a user typing a value into an input field.

13
00:00:45.310 --> 00:00:50.800
Well, whenever we react to some kind of event, you may recall that we use the V on directive.

14
00:00:51.100 --> 00:00:56.290
Earlier in the course when we were building our action button, we talked about the vision directive

15
00:00:56.500 --> 00:00:57.400
and it looks like this.

16
00:00:57.580 --> 00:01:02.770
And then what we do afterwards is we put a colon and then the event that we want to react to.

17
00:01:03.010 --> 00:01:08.380
So for example, when we were building an action button, we said that we could react to a user click

18
00:01:08.380 --> 00:01:08.800
event.

19
00:01:09.010 --> 00:01:14.140
And a click event is one type of event that is possible when the user clicks on something.

20
00:01:14.440 --> 00:01:19.030
Now, when we're dealing with an input field, we obviously don't care about the user clicking on to

21
00:01:19.030 --> 00:01:19.180
it.

22
00:01:19.240 --> 00:01:21.370
We care about the user typing into it.

23
00:01:21.610 --> 00:01:27.520
And so whenever the user types a single character into an input field, it automatically emits an event.

24
00:01:27.700 --> 00:01:29.830
And that event is called input.

25
00:01:29.950 --> 00:01:30.250
All right.

26
00:01:30.280 --> 00:01:33.670
It's a little bit confusing because our HTML element is called input.

27
00:01:33.850 --> 00:01:37.450
And the event that it emits whenever a user types is also called input.

28
00:01:37.660 --> 00:01:39.910
But it makes sense because that's what the user is doing.

29
00:01:39.910 --> 00:01:41.650
They are inputting a value.

30
00:01:42.040 --> 00:01:46.720
So the syntax is von colon followed by the event.

31
00:01:46.720 --> 00:01:48.310
Our event is called input.

32
00:01:49.090 --> 00:01:54.700
As you may also recall from earlier in the course, the shortcut for this syntax, instead of writing

33
00:01:54.700 --> 00:01:58.990
all this out verbosity is to simply put an ATM sign before the event.

34
00:01:59.260 --> 00:02:03.190
So an input is the exact same as V on input.

35
00:02:03.460 --> 00:02:08.920
And the way this works is we provide an equal sign and the name of a method to execute and view will

36
00:02:08.920 --> 00:02:12.670
automatically execute that method whenever this event is triggered.

37
00:02:12.880 --> 00:02:13.180
Right?

38
00:02:13.480 --> 00:02:18.040
So for example, we can define our method here and I'm going to call it update roll.

39
00:02:18.730 --> 00:02:20.800
Where is that method going to be defined?

40
00:02:20.800 --> 00:02:23.950
It's going to be defined in our view configuration object.

41
00:02:23.950 --> 00:02:26.740
Hopefully, this is a little bit of a review of what we did earlier.

42
00:02:27.010 --> 00:02:33.580
So as you may recall, in order to define that method, we defined a separate slice of our view configuration

43
00:02:33.580 --> 00:02:38.410
object and that section is called methods and we set that equal to an object.

44
00:02:38.680 --> 00:02:41.170
And in that object we define whatever methods we want.

45
00:02:41.410 --> 00:02:45.580
So in a just above, I defined a method called update roll.

46
00:02:45.910 --> 00:02:48.520
So I'm going to define a method with the same name here.

47
00:02:48.520 --> 00:02:49.210
Update Roll.

48
00:02:49.510 --> 00:02:54.910
And as you may recall, whenever a view is going to invoke this method, it's going to pass it an argument.

49
00:02:55.090 --> 00:02:57.940
And that argument is going to represent the event object.

50
00:02:58.270 --> 00:03:03.490
The event object is a plain JavaScript object that keeps information about what just happened.

51
00:03:03.490 --> 00:03:03.760
Right?

52
00:03:03.850 --> 00:03:06.970
More metadata and information on that event.

53
00:03:07.300 --> 00:03:13.270
So because view is going to pass in that event object as the very first argument, we can define a parameter

54
00:03:13.270 --> 00:03:14.020
for it here.

55
00:03:14.230 --> 00:03:16.150
So I'm just going to call that object event.

56
00:03:16.930 --> 00:03:21.160
And for now what I'd like to do is just console.log the event object in my browser.

57
00:03:21.910 --> 00:03:23.860
So we'll save that and we'll head to our browser.

58
00:03:25.050 --> 00:03:26.310
And just to show you what this looks like.

59
00:03:26.460 --> 00:03:30.990
Let me refresh the page and I'm going to go into my role input and I'm going to type a couple times

60
00:03:31.200 --> 00:03:37.800
and you'll notice with each letter that I write, Vue is going to trigger that input event, which means

61
00:03:37.800 --> 00:03:41.370
View is going to run that update roll method.

62
00:03:41.640 --> 00:03:47.460
So for example, if I type in Soft for Software Engineer, we're going to see four letters typed.

63
00:03:47.460 --> 00:03:50.160
So four separate input event objects.

64
00:03:50.160 --> 00:03:54.510
And this is coming from our console.log in that method called update roll that we defined.

65
00:03:54.900 --> 00:04:00.720
So on this event object, if I expand it, there's going to be another nested object called Target.

66
00:04:00.990 --> 00:04:03.570
So here is the target object on my event object.

67
00:04:03.960 --> 00:04:08.430
And if I scroll down here, there's going to be a whole bunch of properties and some of these deal with

68
00:04:08.430 --> 00:04:14.250
accessibility and where on the screen the event is and all kinds of additional details that the browser

69
00:04:14.250 --> 00:04:16.140
keeps track of that we really don't care about.

70
00:04:16.470 --> 00:04:18.630
But if I scroll all the way down here.

71
00:04:19.760 --> 00:04:23.540
We're going to find a property called value.

72
00:04:24.170 --> 00:04:29.840
So on the event object there is a target object and on that object there is a value property and that

73
00:04:29.840 --> 00:04:34.490
value property holds the up to date version of what the user has just typed.

74
00:04:34.820 --> 00:04:39.620
So just to reiterate, there's going to be four events triggered, which means on the very first event

75
00:04:39.620 --> 00:04:44.000
object, the target value property is going to be the letter S, then on the next one is going to be

76
00:04:44.150 --> 00:04:46.790
so then so F and finally so forth.

77
00:04:47.210 --> 00:04:49.410
So whatever it is that the user has entered so far.

78
00:04:49.640 --> 00:04:54.590
And if we were to, for example, remove a letter, if I was to press the backspace keep, then that

79
00:04:54.590 --> 00:04:57.620
would trigger another input event and then the value would be so.

80
00:04:57.620 --> 00:05:03.080
F So the most recent event will always have the most recent version of whatever it is that the user

81
00:05:03.080 --> 00:05:03.800
has typed in.

82
00:05:04.190 --> 00:05:08.270
So the key takeaway here, if I returned back to my text editor.

83
00:05:09.360 --> 00:05:10.870
Is that on the event object?

84
00:05:10.890 --> 00:05:16.980
I will have a target object and on the value property I'm going to have whatever is what the user just

85
00:05:16.980 --> 00:05:17.310
typed.

86
00:05:17.610 --> 00:05:20.490
And of course, once I have that value, what do I want to do?

87
00:05:20.640 --> 00:05:23.400
Well, I want to overwrite my components data with it.

88
00:05:23.580 --> 00:05:23.880
Right.

89
00:05:24.060 --> 00:05:26.970
And how can we overwrite a data property in a method?

90
00:05:27.120 --> 00:05:29.670
We access that property using the this keyword.

91
00:05:29.940 --> 00:05:36.420
So in this situation, I want to access this scroll and assign it the value of event that target that

92
00:05:36.420 --> 00:05:36.780
value.

93
00:05:37.230 --> 00:05:42.210
So once again, when the user types right here, even a single character, we're going to invoke the

94
00:05:42.210 --> 00:05:47.430
update roll method which we defined below and pass it the event object which view will automatically

95
00:05:47.430 --> 00:05:47.880
generate.

96
00:05:48.270 --> 00:05:50.480
We're going to receive that object right here is event.

97
00:05:50.490 --> 00:05:54.150
We're going to get the piece of information that we want from it, which is the actual text value.

98
00:05:54.360 --> 00:05:59.940
And then we're going to overwrite our role data property to have the most recent data, the most recent

99
00:05:59.940 --> 00:06:00.240
value.

100
00:06:00.540 --> 00:06:05.670
So again, we are keeping our data and our and our component error template in sync.

101
00:06:05.880 --> 00:06:07.140
So our template is changing.

102
00:06:07.290 --> 00:06:11.730
But as it's changing, we are triggering methods that will in turn update our data.

103
00:06:12.660 --> 00:06:19.890
So let's now do this in reverse, but now we're going to do it for our location property or our location

104
00:06:19.890 --> 00:06:22.080
data property, and we're going to start with our method.

105
00:06:22.380 --> 00:06:28.050
So similarly, we can say, I'm going to have a method called update location and I'm going to assume

106
00:06:28.050 --> 00:06:32.790
it's similarly going to be past an event object, and that event object will be an input event.

107
00:06:32.970 --> 00:06:36.420
So I know it's going to have a target object on it with a value property.

108
00:06:36.690 --> 00:06:42.220
Once I have the user's entered value, which data property do I want to overwrite when the user updates

109
00:06:42.220 --> 00:06:42.840
the location?

110
00:06:43.140 --> 00:06:48.930
That is going to be the location data property which I can access on this dot location and overwrite.

111
00:06:49.410 --> 00:06:54.390
So now we have a method defined in our view configuration object, but obviously we're not using it

112
00:06:54.390 --> 00:06:55.680
anywhere in our template.

113
00:06:55.980 --> 00:06:57.180
So let's wired up.

114
00:06:57.420 --> 00:06:59.010
So right here, I'm going to scroll up.

115
00:07:00.310 --> 00:07:03.520
And right here, we're going to have our input for the location.

116
00:07:03.730 --> 00:07:07.990
So once again, we want to use our VON directive, which is Von.

117
00:07:08.170 --> 00:07:11.140
We then put a colon and the event that we want to react to.

118
00:07:11.290 --> 00:07:12.850
In this case, it is an input event.

119
00:07:13.120 --> 00:07:18.010
However, there is a shortcut to this approach which is just replacing the Von and the colon with an

120
00:07:18.010 --> 00:07:18.640
add sign.

121
00:07:18.910 --> 00:07:23.860
So whenever the input element triggers an input event, what method do we want to run?

122
00:07:23.980 --> 00:07:28.120
We want to run the method we just defined, which is update location.

123
00:07:28.780 --> 00:07:32.380
Once again, within the double quotes we write the method name.

124
00:07:32.390 --> 00:07:33.940
We do not invoke it.

125
00:07:33.940 --> 00:07:34.930
So do not do this.

126
00:07:34.930 --> 00:07:36.100
Just put the method name.

127
00:07:36.100 --> 00:07:42.670
View will automatically invoke it and we will automatically pass it the the event object.

128
00:07:42.820 --> 00:07:43.150
All right.

129
00:07:44.050 --> 00:07:47.680
So before we proceed, there's one more thing I'd like to show you, and then we'll move to the browser.

130
00:07:47.920 --> 00:07:53.950
And that is, if you don't want to define a separate method down below, you can actually do this logic

131
00:07:53.950 --> 00:07:54.570
in line.

132
00:07:54.580 --> 00:07:57.850
And when I say this logic, I mean the overwriting of a data property.

133
00:07:58.180 --> 00:08:03.490
So what I can do instead here is instead of invoking a method, I can write an expression where the

134
00:08:03.490 --> 00:08:06.730
left hand side will be my data property that I want to overwrite.

135
00:08:06.790 --> 00:08:11.800
So in this case, I want to overwrite location and then I do not need to use the this keyword because

136
00:08:11.800 --> 00:08:16.000
I'm using it in my template the exact same way that I can just reference location here.

137
00:08:16.300 --> 00:08:18.370
I can reference location like so in here.

138
00:08:18.610 --> 00:08:20.680
And then to override it, I use an equal sign.

139
00:08:21.610 --> 00:08:29.770
And then instead of instead of passing my event object into a method view is going to give me access

140
00:08:29.770 --> 00:08:31.120
to it right here in line.

141
00:08:31.330 --> 00:08:37.240
But there is one caveat, and that caveat is Vue is going to give it a specific name and that name is

142
00:08:37.240 --> 00:08:40.240
going to be event, but with a dollar sign.

143
00:08:40.450 --> 00:08:45.570
So I'm going to write event right here and then I'm of course going to access the exact same property.

144
00:08:45.580 --> 00:08:47.410
So target and then value.

145
00:08:48.400 --> 00:08:54.280
So just to reiterate the differences here, whenever we do an inline assignment like this, we will

146
00:08:54.310 --> 00:08:58.420
automatically give the event object this name of dollar sign event.

147
00:08:58.630 --> 00:09:00.810
There is nothing special about the dollar sign.

148
00:09:00.820 --> 00:09:04.000
It is a valid JavaScript character that we can use in any name.

149
00:09:04.270 --> 00:09:09.370
But the reason that the view developers want to put it there is for it to be distinct, for you to notice

150
00:09:09.370 --> 00:09:13.780
it and say, Hey, there's something probably special here because as a developer, I'm probably not

151
00:09:13.780 --> 00:09:18.400
going to put a dollar sign in front of any of my variables, which serves to kind of communicate that

152
00:09:18.400 --> 00:09:19.930
this is a view related thing.

153
00:09:20.380 --> 00:09:26.260
So the difference between this and our methods down below is in our methods view will automatically

154
00:09:26.260 --> 00:09:28.360
pass the event object to the method.

155
00:09:28.540 --> 00:09:33.880
But given that we can define the parameter name, we can call this whatever we want, we can call this

156
00:09:33.880 --> 00:09:37.120
event, we can call this E, the name is up to us, right?

157
00:09:37.330 --> 00:09:39.610
But up here the name is not up to us.

158
00:09:39.610 --> 00:09:41.380
We have to write dollar sign event.

159
00:09:41.800 --> 00:09:46.810
Now, what you might see in some code base is because developers would like consistency between the

160
00:09:46.810 --> 00:09:53.410
inline option and the method option is many times they will call the parameter here dollar sign event

161
00:09:53.620 --> 00:09:55.930
just to remind themselves that that is coming from view.

162
00:09:56.140 --> 00:10:01.690
Again, when it comes to us defining our parameter names, we can call this whatever we want, but it's

163
00:10:01.690 --> 00:10:05.320
going to be kind of common to see it actually called Dollar Sign event.

164
00:10:05.620 --> 00:10:07.090
There's nothing wrong with event.

165
00:10:07.090 --> 00:10:11.590
And if you see that strategy in your code base, feel free to stick with it and follow what other developers

166
00:10:11.590 --> 00:10:12.010
are doing.

167
00:10:12.220 --> 00:10:15.700
But I'm going to stick with dollar sign event just to keep it consistent.

168
00:10:15.940 --> 00:10:20.950
And of course, moving back up here, instead of doing this in line, I am going to return it back to

169
00:10:20.950 --> 00:10:25.420
its original implementation, which is calling the update location method.

170
00:10:25.780 --> 00:10:31.720
What I generally prefer to do is to move as much of my business logic outside of my HTML, outside of

171
00:10:31.720 --> 00:10:34.690
my template and store it in my actual JavaScript.

172
00:10:34.690 --> 00:10:36.360
And I think that is a general best practice.

173
00:10:36.580 --> 00:10:41.260
The simpler that your template is to read, the more just focuses on the channel and the structure and

174
00:10:41.260 --> 00:10:41.710
the layout.

175
00:10:41.890 --> 00:10:44.950
While your JavaScript focuses on the business logic, the better.

176
00:10:45.130 --> 00:10:49.900
So while that approach is valid, and I did want to show it to you to give you a more well-rounded understanding

177
00:10:49.900 --> 00:10:51.610
of you in case you see that syntax.

178
00:10:51.850 --> 00:10:57.100
I generally prefer to connect my events to explicit method definitions down below.

179
00:10:57.430 --> 00:11:00.100
So once again, input event will invoke update location.

180
00:11:00.280 --> 00:11:02.440
So let me save this and head to my browser.

181
00:11:03.890 --> 00:11:08.390
And let me refresh the page just to make sure we're on a clean slate and I'm going to open up my view

182
00:11:08.420 --> 00:11:11.090
devtools sled to go to my job search form.

183
00:11:11.090 --> 00:11:14.480
And let's start with our role once again to make sure everything is still working.

184
00:11:14.480 --> 00:11:15.650
I'll enter a role here.

185
00:11:15.890 --> 00:11:21.320
Let's do something like developer and I'm going to save and we're going to see it populate in our input

186
00:11:21.320 --> 00:11:21.530
field.

187
00:11:21.650 --> 00:11:22.340
That is great.

188
00:11:22.520 --> 00:11:27.050
But what is going to happen when I enter a character here, when I update the actual template?

189
00:11:27.290 --> 00:11:31.970
Well, let me add a character here like let's say the exclamation point and you'll notice as soon as

190
00:11:31.970 --> 00:11:36.800
I type it here, it's also going to appear right here in my role data property.

191
00:11:36.980 --> 00:11:41.660
Similarly, if I remove a couple of characters, you might give it a second, but you'll see our role

192
00:11:41.660 --> 00:11:42.440
is going to update.

193
00:11:42.440 --> 00:11:46.220
And then if I add another character back in, it's similarly going to update.

194
00:11:46.490 --> 00:11:50.630
And of course, if I transition here to my location, same rules apply.

195
00:11:50.810 --> 00:11:56.690
So for example, if I type New York City, you'll notice every single time I'm typing that input event

196
00:11:56.690 --> 00:12:01.700
is triggering, which in turn is triggering the respective method to run, which is updating the respective

197
00:12:01.700 --> 00:12:02.420
data properties.

198
00:12:02.420 --> 00:12:06.050
So even something like a space here will automatically trigger that input event.

199
00:12:06.200 --> 00:12:09.680
And you're going to see that space right here in my location data property.

200
00:12:09.950 --> 00:12:12.230
So now we have two way data binding.

201
00:12:12.380 --> 00:12:16.760
The reason it's called two way or bidirectional is because it flows in both directions.

202
00:12:16.970 --> 00:12:21.410
The first direction is from our components data to our template, and the second direction is from our

203
00:12:21.410 --> 00:12:22.820
template to our components data.

204
00:12:22.970 --> 00:12:27.170
Now they are always in sync, they are aligned, they're always going to be equal.

205
00:12:27.350 --> 00:12:32.180
It is now not going to be the case that we're going to have a different data property value compared

206
00:12:32.180 --> 00:12:34.310
to what our input value is on the screen.

207
00:12:34.430 --> 00:12:36.560
We had that problem in the previous lesson.

208
00:12:36.740 --> 00:12:38.360
Now we no longer have it.

209
00:12:38.450 --> 00:12:38.690
All right.

210
00:12:38.690 --> 00:12:41.690
So this is a basic example of two way data binding.

211
00:12:41.930 --> 00:12:47.930
But as you may likely have seen or felt from this lesson, it was kind of a I would say not difficult,

212
00:12:47.930 --> 00:12:55.220
but a verbose kind of explicit way to write out this idea of connecting a piece of data to an input

213
00:12:55.220 --> 00:12:55.490
field.

214
00:12:55.670 --> 00:12:59.960
In the very next lesson, we're going to see a shortcut that you offers us to accomplish the exact same

215
00:12:59.960 --> 00:13:00.260
result.

216
00:13:00.530 --> 00:13:01.460
So I will see you there.
