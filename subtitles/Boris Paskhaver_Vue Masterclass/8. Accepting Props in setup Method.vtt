WEBVTT
1
00:00:00.500 --> 00:00:01.550
All right.

2
00:00:01.550 --> 00:00:08.330
So in this lesson, I want to refactor another component, and it's going to be our action button component.

3
00:00:08.690 --> 00:00:11.540
So let's open up action button dot view.

4
00:00:11.930 --> 00:00:14.390
And as a reminder, this component is pretty simple.

5
00:00:14.390 --> 00:00:18.290
It's a single button, but there are two styles for that button.

6
00:00:18.290 --> 00:00:23.750
There is a primary style and a secondary style, and that affects the success for the button.

7
00:00:24.020 --> 00:00:29.000
And the type of style that we render is determined by this type prop right here.

8
00:00:29.300 --> 00:00:33.590
There's also a text prop, and that is the actual text that we display in the button.

9
00:00:34.370 --> 00:00:40.220
Now, the important thing here is, well, notice there's only one part of the options API that we have

10
00:00:40.220 --> 00:00:40.940
to replace here.

11
00:00:40.940 --> 00:00:43.550
And it is this computed property of button class.

12
00:00:43.820 --> 00:00:50.810
But notice that button class is using this type here and type in this scenario refers to the type prop.

13
00:00:51.170 --> 00:00:55.970
So in other words, we're using props as the basis for some kind of computed state.

14
00:00:56.240 --> 00:00:59.240
We're not using the components data for the computed property.

15
00:00:59.330 --> 00:01:03.890
We're using a prop flowing into the component as the basis for a computed property.

16
00:01:04.190 --> 00:01:09.500
So in this lesson, we're going to learn how we can create a similar design using our new composition

17
00:01:09.500 --> 00:01:09.950
API.

18
00:01:10.310 --> 00:01:13.130
So just like we did last time, let's comment out computed.

19
00:01:14.590 --> 00:01:19.810
The other logic we're going to keep, because the name property and the props configuration is totally

20
00:01:19.810 --> 00:01:26.050
fine with our new composition API, we only replace things like data computed in methods using setup.

21
00:01:26.530 --> 00:01:28.450
So now let's use the composition API.

22
00:01:28.450 --> 00:01:30.190
So we'll define our setup method.

23
00:01:31.480 --> 00:01:36.430
And how do we get access to props in the body of this setup method?

24
00:01:36.760 --> 00:01:43.030
While Vue is actually going to provide props as the very first argument to the setup method, so right

25
00:01:43.030 --> 00:01:46.750
here I can define the props as my very first argument.

26
00:01:46.750 --> 00:01:52.600
And this is going to be a reactive object with the props that the parent passes in to this action button

27
00:01:52.600 --> 00:01:53.050
component.

28
00:01:53.440 --> 00:01:58.180
So at this point, all we have to do is implement the exact same functionality we have here when the

29
00:01:58.180 --> 00:01:59.890
prop called type changes.

30
00:02:00.100 --> 00:02:04.630
We want to apply it as the dynamic key here in this object we return.

31
00:02:04.990 --> 00:02:08.740
So we want this to be able to recalculate itself in case the prop changes.

32
00:02:08.980 --> 00:02:15.640
So in order to make a computed property in the new composition API, we need to use a computed function.

33
00:02:16.000 --> 00:02:17.620
So right here I'm going to import.

34
00:02:18.980 --> 00:02:19.610
Computed.

35
00:02:20.840 --> 00:02:22.790
And that is going to come from view.

36
00:02:24.350 --> 00:02:25.370
So just like so.

37
00:02:25.730 --> 00:02:29.450
And then right here, of course, we know at the end of the day that we're going to need to return an

38
00:02:29.450 --> 00:02:29.870
object.

39
00:02:30.290 --> 00:02:33.470
And if we want to follow the exact same interface as we have here.

40
00:02:33.590 --> 00:02:39.290
Here we are using a name of button class and we are using that button class right here as the object

41
00:02:39.290 --> 00:02:42.500
that we are binding using v bind to the class attribute right here.

42
00:02:42.770 --> 00:02:46.490
So we know at some point that we need to return a similar name of button class here.

43
00:02:46.880 --> 00:02:49.070
The question is how we arrive at that name.

44
00:02:49.400 --> 00:02:50.070
It's right here.

45
00:02:50.090 --> 00:02:52.220
What is button class going to be equal to?

46
00:02:52.580 --> 00:02:56.270
It's actually going to be equal to an invocation of our computed function.

47
00:02:56.630 --> 00:03:01.190
So, again, whenever you have some kind of computed evaluation, whenever you have data that is dependent

48
00:03:01.190 --> 00:03:04.000
on other data, such as props, right?

49
00:03:04.040 --> 00:03:08.000
It's a little bit different because it's not dependent on the components data, but there's still the

50
00:03:08.000 --> 00:03:09.500
still the same principle applies.

51
00:03:09.680 --> 00:03:16.160
It's computed because it is a access class or access class object that is dependent on some other piece

52
00:03:16.160 --> 00:03:16.640
of data.

53
00:03:16.880 --> 00:03:18.290
This time around, it is props.

54
00:03:18.470 --> 00:03:23.030
So still we're going to use computed, we're going to provide computed with a function and that function

55
00:03:23.030 --> 00:03:23.930
is going to rerun.

56
00:03:24.110 --> 00:03:27.170
Any time anything that's reactive in here changes.

57
00:03:27.620 --> 00:03:29.660
So what I'm going to do here is return an object.

58
00:03:30.660 --> 00:03:32.990
And we're going to follow the exact same protocol we have here.

59
00:03:33.000 --> 00:03:38.340
We want an object where the key is going to be the name of this SS class and then we're going to return.

60
00:03:38.340 --> 00:03:39.090
True to apply.

61
00:03:39.090 --> 00:03:39.990
That's yes, that's class.

62
00:03:40.260 --> 00:03:45.150
Now, formally, we were doing this that type because our type prop right here was available under this

63
00:03:45.150 --> 00:03:45.480
keyword.

64
00:03:45.720 --> 00:03:51.420
We no longer have the this keyword in our setup method, but we have our props argument right here so

65
00:03:51.420 --> 00:03:55.530
I can simply write props that type and this will work.

66
00:03:55.770 --> 00:04:03.240
So because props is a reactive object, if the props change, this computed function will rerun and

67
00:04:03.240 --> 00:04:10.850
thus return a new object which will thus force the binding to update and render a different style of.

68
00:04:10.860 --> 00:04:14.790
But so this right here is how we replace our former implementation right here.

69
00:04:15.030 --> 00:04:20.100
Basically, whenever you have a computer property, use a computer function in the composition API and

70
00:04:20.100 --> 00:04:23.640
give it basically the same argument or the same logic.

71
00:04:23.640 --> 00:04:24.660
That is the same behavior.

72
00:04:24.900 --> 00:04:28.950
The only difference, of course, is we do not have access to the this keyword, but we do have access

73
00:04:28.950 --> 00:04:30.990
to our props still as the first argument.

74
00:04:31.140 --> 00:04:34.140
So we can use props that type here instead of this, that type.

75
00:04:34.470 --> 00:04:37.710
So with that, we are good to remove our former computed property.

76
00:04:38.940 --> 00:04:41.880
And let me show you this in our browser, everything is going to work just fine.

77
00:04:42.570 --> 00:04:46.140
So here on the top right corner is an example of our action button.

78
00:04:46.410 --> 00:04:54.030
Let me show you by bringing up our view devtools right here that here in my main nav I have my action

79
00:04:54.030 --> 00:04:59.940
button and we can see it's currently getting a prop type of primary and that is the primary button style

80
00:04:59.940 --> 00:05:00.540
we have here.

81
00:05:00.780 --> 00:05:06.120
What I'm going to do is change this type value from a string of primary to a string of secondary.

82
00:05:06.540 --> 00:05:12.870
So because my props object is reactive, whenever I change this prop, the computed function that we

83
00:05:12.870 --> 00:05:16.680
defined is going to re-evaluate, which means it's going to rerun.

84
00:05:16.830 --> 00:05:19.590
It's going to return back a brand new class object.

85
00:05:19.740 --> 00:05:24.690
And now we're going to have a secondary key because the type prop is equal to secondary, we're going

86
00:05:24.690 --> 00:05:28.860
to have secondary set to true instead of the former object where primary was set to true.

87
00:05:29.040 --> 00:05:32.190
And this will in turn update the button styles.

88
00:05:32.340 --> 00:05:37.410
So right here, I'm going to save this and you'll notice the button is going to update to have our secondary

89
00:05:37.410 --> 00:05:44.130
styles once again, if I change the props flowing in again, if I change this back to primary, this

90
00:05:44.130 --> 00:05:50.160
will force a change to my reactive props object, which will force a rerunning of my computed function,

91
00:05:50.250 --> 00:05:54.930
which will generate a new returned object which we're using the bind to connect to in our template,

92
00:05:55.110 --> 00:06:00.090
which will force the rendering of a different status class, which will change the style we see on the

93
00:06:00.090 --> 00:06:00.330
button.

94
00:06:00.600 --> 00:06:01.110
It's right here.

95
00:06:01.110 --> 00:06:04.500
I'm going to change this to primary, save that and we're back to our original implementation.

96
00:06:04.770 --> 00:06:09.900
The key takeaway is we have all of our original functionality of the action button, but now we're using

97
00:06:09.900 --> 00:06:11.370
the composition API.

98
00:06:11.640 --> 00:06:16.980
So in summary, if you need to work with props in your setup method, simply provide them as the first

99
00:06:16.980 --> 00:06:17.490
argument.

100
00:06:17.490 --> 00:06:23.220
They're always going to flow in as the very first parameter view will pass in any props from the parent

101
00:06:23.370 --> 00:06:25.500
as the very first argument to the set up method.

102
00:06:25.770 --> 00:06:29.250
If you don't need to use props, then you don't need to define that parameter.

103
00:06:29.370 --> 00:06:33.940
But if you do it and simply define it in line, as we did in this lesson, that's all there is to cover

104
00:06:33.960 --> 00:06:34.560
in this one.

105
00:06:34.560 --> 00:06:36.150
So I will see you in the next lesson.
