1
00:00:00,900 --> 00:00:01,440
Okay.

2
00:00:01,440 --> 00:00:05,670
So the next component in line is going to be our job listings component.

3
00:00:06,030 --> 00:00:10,410
So let's open up job listings, dot view listings with the S at the end.

4
00:00:10,740 --> 00:00:15,600
And as a reminder, this is the component that actually renders the individual job listing components.

5
00:00:15,840 --> 00:00:19,230
Once it gets that list of filtered jobs from view.

6
00:00:19,950 --> 00:00:24,540
So as I scroll down here, we can see we still need to incorporate TypeScript into this component.

7
00:00:24,780 --> 00:00:30,000
And of course, we've been moving towards a reality where just about every file in our code base is

8
00:00:30,000 --> 00:00:30,780
using TypeScript.

9
00:00:31,080 --> 00:00:35,280
So apologies if some of these lessons or some of these concepts are repeated.

10
00:00:35,430 --> 00:00:41,550
That is the end goal is to move as much or just about all of the code base to TypeScript as possible.

11
00:00:41,820 --> 00:00:46,410
So sometimes it's going to introduce new ideas and sometimes it's going to be more of the same.

12
00:00:46,440 --> 00:00:46,800
All right.

13
00:00:46,980 --> 00:00:49,600
So in this case, this component should be more of the same.

14
00:00:49,620 --> 00:00:53,160
We're just going to follow the exact same protocol as always right here.

15
00:00:53,190 --> 00:00:55,080
Let's add Lang and let's add.

16
00:00:56,400 --> 00:00:58,290
Let's import, define component.

17
00:00:58,890 --> 00:01:05,130
And right here, we're going to invoke that defined component function passing in our object.

18
00:01:05,790 --> 00:01:11,610
And before I say that, everything is good because it looks like there are no violations.

19
00:01:11,820 --> 00:01:16,920
One helper thing that you can do is just hover your mouse over some of these constants to verify that

20
00:01:16,920 --> 00:01:18,540
the types of annotation is correct.

21
00:01:18,780 --> 00:01:23,580
Because remember, TypeScript is going to go into the actual composable that we're utilizing here and

22
00:01:23,580 --> 00:01:27,120
use those return values as the basis for what these constants should be.

23
00:01:27,450 --> 00:01:30,780
So for example, filter jobs is going to be a computed ref.

24
00:01:30,780 --> 00:01:34,770
We know that is the type for a view reactive object and we can see it inside.

25
00:01:34,770 --> 00:01:37,500
It's going to wrap an array of job objects, which is perfect.

26
00:01:37,800 --> 00:01:41,520
Current page is going to be a number wrapped in a reactive object grade.

27
00:01:41,760 --> 00:01:43,380
Max Page is the same thing.

28
00:01:43,530 --> 00:01:45,210
Previous page is going to be the same.

29
00:01:45,210 --> 00:01:49,950
Remember, it can be either number or undefined because it may either be the number of the previous

30
00:01:49,950 --> 00:01:54,630
page or if there is no previous page it will be undefined instead.

31
00:01:54,900 --> 00:02:01,170
Same thing with next page and display jobs right here is similarly going to be a array of jobs wrapped

32
00:02:01,170 --> 00:02:02,310
in a view reactive object.

33
00:02:02,520 --> 00:02:07,770
So it looks like all the infinities look relatively correct by typescript initial guess.

34
00:02:08,010 --> 00:02:10,260
So really there's nothing more left to do in this file.

35
00:02:10,560 --> 00:02:12,840
So with that we can move on to our test file.

36
00:02:12,840 --> 00:02:17,250
So job listings that test docs drag that over to the right.

37
00:02:18,640 --> 00:02:19,660
Scroll up here.

38
00:02:19,660 --> 00:02:22,870
And as always, let's change the extension here to T.S..

39
00:02:24,040 --> 00:02:25,850
So job listings that test that.

40
00:02:25,910 --> 00:02:26,350
Yes.

41
00:02:26,890 --> 00:02:31,060
And we can see down here we're going to get the familiar mock return value issues, not a problem.

42
00:02:31,390 --> 00:02:36,280
So we have three composable is being imported here and we are marking out each one.

43
00:02:36,550 --> 00:02:39,490
So we basically have to use that as keyword three times.

44
00:02:39,760 --> 00:02:44,530
So right here, just to make sure we organize this related code next to each other, I'm going to say,

45
00:02:45,610 --> 00:02:46,670
do we need to mark this one out?

46
00:02:46,690 --> 00:02:47,080
Yes, we do.

47
00:02:47,080 --> 00:02:49,960
Some const use filter jobs.

48
00:02:49,960 --> 00:02:54,520
Mark is going to be use filter jobs as just mark.

49
00:02:54,790 --> 00:03:02,620
And now below that const use fetch jobs dispatch mark is going to be used fetch jobs dispatch as just

50
00:03:02,620 --> 00:03:09,430
mark as well right here we're going to say const use current page mark is going to be the use current

51
00:03:09,430 --> 00:03:14,860
page, imported function above, but with a different type of just mark right here.

52
00:03:14,860 --> 00:03:18,310
We're going to do const use previous and next pages.

53
00:03:18,310 --> 00:03:24,850
Mark is going to be our use previous index pages function but with a manually declared type of just

54
00:03:24,850 --> 00:03:25,210
mark.

55
00:03:25,330 --> 00:03:25,690
All right.

56
00:03:25,870 --> 00:03:30,730
So now we have these ideas, constants and everywhere where we're using the functionality below like

57
00:03:30,730 --> 00:03:36,310
mark return value, we want to include the new references to the objects that TypeScript recognizes

58
00:03:36,310 --> 00:03:38,320
as having a just mark type.

59
00:03:38,590 --> 00:03:44,800
So right here, use filter jobs mark use current page mark, use previous index pages mark.

60
00:03:45,310 --> 00:03:45,910
There we go.

61
00:03:46,660 --> 00:03:48,790
Scrolling down, basically going to be the same thing everywhere.

62
00:03:48,790 --> 00:03:53,890
So this is going to be a little bit of just scrolling through and adding mark to the end of all these

63
00:03:53,890 --> 00:03:54,400
things.

64
00:03:55,600 --> 00:04:01,030
Looks like it's not happy about use current page never mind my editors is slow apologies right here

65
00:04:01,030 --> 00:04:01,780
same thing.

66
00:04:02,230 --> 00:04:07,300
In fact, I could probably start copying a couple of these, but for now, let's write it out.

67
00:04:07,960 --> 00:04:08,950
Let me copy one of them.

68
00:04:08,950 --> 00:04:10,450
Like use filter jobs, mark.

69
00:04:12,050 --> 00:04:14,450
Let me go ahead and replace that right here.

70
00:04:14,750 --> 00:04:15,110
Let me add.

71
00:04:15,110 --> 00:04:15,990
Mark here.

72
00:04:16,010 --> 00:04:17,270
Let me add Mark here.

73
00:04:18,610 --> 00:04:24,100
And a couple more left to go right here, Mark, at the end.

74
00:04:24,100 --> 00:04:25,360
Right here, Mark at the end.

75
00:04:25,360 --> 00:04:26,110
Right here.

76
00:04:27,120 --> 00:04:28,410
Right here, Mark.

77
00:04:29,530 --> 00:04:30,880
Mark and Mark.

78
00:04:32,620 --> 00:04:33,190
All right.

79
00:04:34,060 --> 00:04:34,900
There we go.

80
00:04:34,910 --> 00:04:35,830
And one more.

81
00:04:36,190 --> 00:04:38,530
Always, always one more at the very end of the scroll.

82
00:04:39,220 --> 00:04:43,750
So three more mock functions here that we have to replace with the correct constant references with

83
00:04:43,750 --> 00:04:44,530
the right types.

84
00:04:45,040 --> 00:04:45,760
There we go.

85
00:04:46,030 --> 00:04:50,400
And now it looks like our file does not have any types of violations.

86
00:04:50,410 --> 00:04:52,600
So we can run NPM run, test, watch.

87
00:04:54,160 --> 00:04:56,950
And see if everything is working correctly.

88
00:05:01,760 --> 00:05:03,560
And it looks like everything is working correctly.

89
00:05:03,680 --> 00:05:08,960
From our test suite, it also looks like we're not actually using the the used fetch jobs dispatch function

90
00:05:08,960 --> 00:05:14,840
below to to mock it out in order to call a method like mock resolve value or mock return value.

91
00:05:14,930 --> 00:05:18,620
We can see here that my editor is saying it's declared its values, never read.

92
00:05:18,830 --> 00:05:20,180
So I think we can remove this.

93
00:05:20,990 --> 00:05:24,560
We don't actually need to mock it out or rather declare its type.

94
00:05:25,010 --> 00:05:29,470
And let's let the test suite be run again and everything still works perfect.

95
00:05:29,600 --> 00:05:29,930
All right.

96
00:05:29,930 --> 00:05:32,540
So that completes our refactor of the job listings component.

97
00:05:32,540 --> 00:05:34,160
And I will see you in the next lesson.
