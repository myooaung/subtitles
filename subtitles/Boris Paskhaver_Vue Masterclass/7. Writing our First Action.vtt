WEBVTT
1
00:00:00.540 --> 00:00:01.410
Okay.

2
00:00:01.410 --> 00:00:05.610
So in this lesson, we're going to wire up a View X action.

3
00:00:05.610 --> 00:00:08.160
It's going to be the first action method that we write.

4
00:00:08.460 --> 00:00:14.160
The difference between an action and a mutation is that an action is allowed to be asynchronous.

5
00:00:14.430 --> 00:00:19.440
So what we're going to do in our action is we're going to make the call to our API to get jobs.

6
00:00:19.590 --> 00:00:26.040
And then once we receive those jobs, then we're going to commit a mutation, this one right here,

7
00:00:26.280 --> 00:00:31.320
so that our View X Store can receive the jobs that we now have from our API.

8
00:00:31.500 --> 00:00:36.120
So it is in the action method that we're going to do the asynchronous operation and then we're going

9
00:00:36.120 --> 00:00:38.790
to transfer control to an existing mutation.

10
00:00:39.090 --> 00:00:43.350
And since this is our first time writing an action, we're not going to do TDD right now.

11
00:00:43.470 --> 00:00:46.740
We're going to write the implementation first and then I'll show you how to test it later.

12
00:00:47.130 --> 00:00:53.850
So at the very top of this file, I'm going to start by importing our get jobs function that we defined

13
00:00:53.850 --> 00:00:54.780
a few lessons ago.

14
00:00:54.780 --> 00:01:02.580
So right here, import get jobs and that is in a come from the source directory API get jobs.

15
00:01:04.440 --> 00:01:04.830
Perfect.

16
00:01:05.340 --> 00:01:10.750
Then what I'm going to do is I'm going to follow a similar naming structure to what I have with our

17
00:01:10.770 --> 00:01:11.720
mutations object.

18
00:01:11.730 --> 00:01:16.560
So I'm going to define a constant for every action method that we're going to write, because later

19
00:01:16.560 --> 00:01:21.810
on when we run those action methods, we're going to similarly need to have a name for them that we're

20
00:01:21.810 --> 00:01:23.400
going to import in another file.

21
00:01:23.580 --> 00:01:26.700
So I'm going to follow that same protocol as we do with mutations.

22
00:01:27.150 --> 00:01:31.890
The advantage of having constants is that we avoid typos whenever we are calling these actions from

23
00:01:31.890 --> 00:01:32.490
another file.

24
00:01:32.820 --> 00:01:37.230
So right here, I'm going to create another constant that I'm going to export and I'm going to call

25
00:01:37.230 --> 00:01:38.730
this one fetch jobs.

26
00:01:39.270 --> 00:01:42.390
And this is going to be a string of fetch jobs.

27
00:01:43.260 --> 00:01:48.810
So again, just to make sure it's clear fetch jobs is going to represent the initial API request, receive

28
00:01:48.810 --> 00:01:54.300
jobs is going to represent the mutation to our View X Store that says, hey, I have jobs, please save

29
00:01:54.300 --> 00:01:55.260
them to the store state.

30
00:01:55.920 --> 00:02:00.900
Okay, the next thing I want to do is wire up a separate object that's going to store all of our view

31
00:02:00.900 --> 00:02:01.530
X actions.

32
00:02:01.710 --> 00:02:05.880
We're again going to follow the exact same principle we have here where we've separated all of these

33
00:02:06.360 --> 00:02:10.590
constructs into smaller objects that we can then import and test in our test suite.

34
00:02:10.890 --> 00:02:16.110
So right here I'm going to export a new object and I'm going to call it actions.

35
00:02:17.450 --> 00:02:18.910
Let's make an end to it for now.

36
00:02:19.060 --> 00:02:21.670
And before we forget, we do have to add this.

37
00:02:21.670 --> 00:02:23.800
Actions object to our view.

38
00:02:23.800 --> 00:02:24.820
X are sorry.

39
00:02:24.900 --> 00:02:27.910
Our view indeed our view x store configuration.

40
00:02:28.180 --> 00:02:33.340
So right here after mutations, I'm going to provide another key here called actions and we're going

41
00:02:33.340 --> 00:02:36.730
to use E6 in text so that it connects to this object right here.

42
00:02:36.970 --> 00:02:39.850
As a reminder, we use Create Store to create a view store.

43
00:02:40.000 --> 00:02:44.710
Then we have a configuration object where we provide the store, state the mutations and now the actions.

44
00:02:45.040 --> 00:02:49.900
Okay, so in here I'm going to define in my first action method and it's going to be the fetch jobs

45
00:02:49.900 --> 00:02:50.770
when we have right here.

46
00:02:51.040 --> 00:02:54.010
So I'm going to provide that constant in square brackets.

47
00:02:54.010 --> 00:02:59.710
So now I have a method called fetch jobs and we know that this method will have an asynchronous event.

48
00:02:59.710 --> 00:03:02.530
It's going to have the reaching out to our API.

49
00:03:02.800 --> 00:03:07.930
So I'm immediately going to make this method async, I'm going to provide my parentheses and then my

50
00:03:08.140 --> 00:03:08.830
method body.

51
00:03:09.490 --> 00:03:11.470
And of course we need to do two things here.

52
00:03:11.470 --> 00:03:17.290
We need to reach out to our API and then we need to commit the mutation to run this receive jobs logic

53
00:03:17.290 --> 00:03:17.710
right here.

54
00:03:18.040 --> 00:03:21.460
So let's invoke our get jobs function right here.

55
00:03:21.460 --> 00:03:23.470
It is asynchronous, so we need to await it.

56
00:03:24.160 --> 00:03:25.870
So I'm going to do a way to get jobs.

57
00:03:26.170 --> 00:03:32.800
And then as a reminder, this returns back to us, a promise that resolves to have the actual job listings

58
00:03:32.800 --> 00:03:33.310
array.

59
00:03:33.340 --> 00:03:36.430
We're going to do structure all of that information from the Axios object.

60
00:03:36.670 --> 00:03:39.550
So what we get back here is going to be an array of job listings.

61
00:03:41.690 --> 00:03:42.050
Okay.

62
00:03:42.410 --> 00:03:48.170
So we now can imagine that view X is going to wait until this completes and then that asynchronous operation

63
00:03:48.170 --> 00:03:48.560
is done.

64
00:03:48.620 --> 00:03:53.810
We have our job listings now that we have these jobs in an array in our JavaScript program.

65
00:03:53.900 --> 00:03:55.700
We now want to run this mutation.

66
00:03:55.730 --> 00:03:56.960
The question is how?

67
00:03:57.440 --> 00:04:03.950
Well, for every action method that we defined, view or view X is going to pass in an additional helper

68
00:04:03.950 --> 00:04:09.740
object called context, and we can provide that as the very first parameter to view X whenever we run

69
00:04:09.740 --> 00:04:14.840
an action will automatically provide the context object in the exact same way as right here.

70
00:04:14.840 --> 00:04:19.340
Whenever we run a mutation view X will always provide the current state of the view store.

71
00:04:19.490 --> 00:04:20.570
Same idea here.

72
00:04:20.630 --> 00:04:24.200
Behind the scenes, the code and you x will give us this special context object.

73
00:04:24.560 --> 00:04:29.990
This context object is basically similar to a store and it has the exact same API.

74
00:04:30.290 --> 00:04:35.870
So you may recall that when we had our view x store we can call a method on it called commit and that

75
00:04:35.870 --> 00:04:40.700
is the exact same method that we can call on this context object in order to run a mutation.

76
00:04:40.970 --> 00:04:43.460
Remember the commit method runs a mutation.

77
00:04:43.700 --> 00:04:46.490
So right here we're going to do context.

78
00:04:46.490 --> 00:04:47.240
That's our object.

79
00:04:47.240 --> 00:04:48.740
We're going to call a method called commit.

80
00:04:49.010 --> 00:04:50.690
This is a synchronous operation.

81
00:04:50.690 --> 00:04:52.790
It runs immediately, so we don't need to await it.

82
00:04:53.480 --> 00:04:57.410
And of course the first argument to commit is the mutation that we want to run.

83
00:04:57.410 --> 00:04:57.710
Right.

84
00:04:57.710 --> 00:04:58.340
It's a string.

85
00:04:58.550 --> 00:04:59.700
Which one do we want to run?

86
00:04:59.720 --> 00:05:00.740
This one right here.

87
00:05:00.920 --> 00:05:03.980
We have a constant for that mutation right in this file.

88
00:05:04.190 --> 00:05:06.020
So we can go ahead and simply put it in line.

89
00:05:06.050 --> 00:05:07.490
We want to run, receive jobs.

90
00:05:08.780 --> 00:05:12.440
And then, of course, the second thing we want to provide is the actual array of job listings.

91
00:05:12.440 --> 00:05:14.150
We need to give that state to our store.

92
00:05:14.540 --> 00:05:20.750
So remember in our Mutations method right here, we provided the View X Store State.

93
00:05:20.900 --> 00:05:22.220
That's always the first argument.

94
00:05:22.310 --> 00:05:27.500
And then any subsequent arguments we defined in line and the way it works is any subsequent arguments

95
00:05:27.500 --> 00:05:32.150
that we provide to the commit method will flow in as the second and third and so on.

96
00:05:32.150 --> 00:05:33.530
Arguments after state.

97
00:05:33.830 --> 00:05:39.650
So if I provide my job listings as my argument right here, that means that this is going to be what

98
00:05:39.650 --> 00:05:41.390
Jobs represents right here.

99
00:05:41.660 --> 00:05:46.370
It's a little bit of a confusing concept because this method is called commit and this method is called

100
00:05:46.370 --> 00:05:47.060
receive jobs.

101
00:05:47.240 --> 00:05:52.370
But the way that view X works is it says this is the method that I need to run and then anything afterwards

102
00:05:52.370 --> 00:05:57.740
that you give me as arguments, I'm going to pass in after I pass in the state to your mutation.

103
00:05:57.950 --> 00:06:04.190
So you, you says, okay, I need to run, receive jobs and I always need to provide my U.S. store state

104
00:06:04.190 --> 00:06:05.570
as my first argument always.

105
00:06:05.750 --> 00:06:11.120
And then anything you give me after the mutation name in this commit method, I'm going to pass in.

106
00:06:11.360 --> 00:06:13.130
So here I'm going to pass in my job listings.

107
00:06:13.340 --> 00:06:18.260
And similarly, if we add additional parameters here like B and C, then you actually pass them in like

108
00:06:18.260 --> 00:06:18.560
so.

109
00:06:19.040 --> 00:06:20.990
So we can write mutations with multiple methods.

110
00:06:21.140 --> 00:06:25.220
Right now we only need one, which is our job listings.

111
00:06:25.220 --> 00:06:25.490
All right.

112
00:06:25.760 --> 00:06:26.090
All right.

113
00:06:26.420 --> 00:06:27.950
So that's that's all there is to it.

114
00:06:27.950 --> 00:06:30.590
This is a separate new object full of methods.

115
00:06:30.860 --> 00:06:32.600
The methods can be asynchronous.

116
00:06:32.600 --> 00:06:34.880
That is the big difference between actions and mutations.

117
00:06:35.090 --> 00:06:40.610
So actions can do something like do an asynchronous operation to get jobs and then simply run an existing

118
00:06:40.610 --> 00:06:42.740
mutation to receive that data.

119
00:06:42.890 --> 00:06:45.170
So your mutations will always be synchronous.

120
00:06:45.200 --> 00:06:50.720
They always have to be plain JavaScript code that can run instantaneously while your actions can be

121
00:06:50.720 --> 00:06:51.530
asynchronous.

122
00:06:51.530 --> 00:06:53.540
All right, so that takes care of our first action.

123
00:06:53.540 --> 00:06:55.880
In the very next lesson, we're going to see how we can test it.
