WEBVTT
1
00:00:00.300 --> 00:00:01.020
Okay.

2
00:00:01.030 --> 00:00:05.610
So to kick this lesson off, I just want to point out that there's something I missed in the previous

3
00:00:05.610 --> 00:00:08.970
lesson here in our get degrees that test that yes.

4
00:00:08.970 --> 00:00:11.760
File, I forgot to update this description right here.

5
00:00:11.880 --> 00:00:13.770
It should obviously be get degrees.

6
00:00:13.980 --> 00:00:15.000
That's what we're testing.

7
00:00:15.000 --> 00:00:18.030
And this, of course, is always the danger of copying and pasting.

8
00:00:18.210 --> 00:00:23.940
You might forget to adjust one of your unnecessary changes, but luckily our tests are correct as far

9
00:00:23.940 --> 00:00:27.330
as using the right function right here with get degrees and right here.

10
00:00:27.660 --> 00:00:33.000
So this should be the final change in this file to replace all of the former occurrences of job with

11
00:00:33.000 --> 00:00:33.390
degree.

12
00:00:33.780 --> 00:00:34.170
All right.

13
00:00:34.320 --> 00:00:36.780
So now let's move on to what I want to do in this lesson.

14
00:00:37.050 --> 00:00:41.550
I want to follow a very similar approach to what I've done with earlier data, and that is that I want

15
00:00:41.550 --> 00:00:47.040
to store this array of degrees that I'm going to get from my back end in my view store.

16
00:00:47.400 --> 00:00:54.480
So you may recall we have our state dots file and in here we have a state arrow function that returns

17
00:00:54.480 --> 00:00:56.960
the initial state of our view store.

18
00:00:57.270 --> 00:01:02.070
So in the same way that we're storing jobs which are eventually going to be populated by the array of

19
00:01:02.070 --> 00:01:07.260
jobs we receive from the jobs end point, I want to similarly create a property called Degrees.

20
00:01:07.260 --> 00:01:09.450
I want to initialize it to be an empty array.

21
00:01:09.630 --> 00:01:16.020
And then later on I'm going to write up the logic to receive our actual array of degrees and overwrite

22
00:01:16.020 --> 00:01:21.540
the view store state from an empty array of degrees to an actual valid array of degrees once the API

23
00:01:21.540 --> 00:01:22.380
request completes.

24
00:01:22.470 --> 00:01:26.460
And then of course that's going to be advantageous because our view store is going to have that data

25
00:01:26.640 --> 00:01:29.190
and then we can connect it to as many components as we'd like.

26
00:01:29.640 --> 00:01:35.310
So again, to follow a TDD approach, I'm going to first write a test for this new property on my View

27
00:01:35.440 --> 00:01:36.060
Store State.

28
00:01:36.360 --> 00:01:40.530
So I'm going to open up state that test that yes, we're about to that's apologies.

29
00:01:40.530 --> 00:01:41.340
We're now in TypeScript.

30
00:01:41.730 --> 00:01:42.000
All right.

31
00:01:42.000 --> 00:01:46.440
And here we have all of our tests checking for the individual properties that should be on the store

32
00:01:46.590 --> 00:01:50.250
and their initial values when the store and the state initialize.

33
00:01:50.580 --> 00:01:51.570
So how about right here?

34
00:01:51.570 --> 00:01:58.620
We'll add a new test and I'm going to say it's stores all degrees that jobs may require.

35
00:02:00.480 --> 00:02:00.980
All right.

36
00:02:00.990 --> 00:02:04.860
And right here, it's going to be a very similar test to what we have everywhere in this file.

37
00:02:04.890 --> 00:02:09.900
I'm going to have a contest called Starting State, and I'm going to invoke the state function, which

38
00:02:09.900 --> 00:02:11.280
is the function on the left hand side.

39
00:02:11.580 --> 00:02:14.190
And I'm going to expect that that's going to return an object.

40
00:02:14.370 --> 00:02:18.750
And on that starting state object, I'm going to access a property that does not exist yet, but that

41
00:02:18.750 --> 00:02:22.020
I will implement and I expect there to be a degree as property.

42
00:02:22.200 --> 00:02:24.270
And that, of course, should be equal to an empty array.

43
00:02:24.780 --> 00:02:28.740
Now, of course, the reason that our test is complaining is because we are in TypeScript.

44
00:02:28.740 --> 00:02:33.690
So TypeScript, of course, will say, hey, property degrees does not exist on type global state.

45
00:02:33.900 --> 00:02:37.950
And that is fantastic because TypeScript is actually telling us, hey, you don't actually have this

46
00:02:37.950 --> 00:02:38.580
implemented yet.

47
00:02:38.730 --> 00:02:43.140
It's one more additional thing that will have to fix in order to get everything to run effectively.

48
00:02:43.530 --> 00:02:47.790
So you'll notice, by the way, if I move over here and say, okay, now that I have my failing test,

49
00:02:47.790 --> 00:02:49.680
I don't obviously have this degrees property.

50
00:02:49.890 --> 00:02:56.250
What I can do is move on over here and provide degrees and provide it as an empty array and save it

51
00:02:56.250 --> 00:02:57.750
and try to get the test to pass.

52
00:02:57.990 --> 00:03:02.340
Unfortunately, we're going to see that TypeScript is still going to be very unhappy because even though

53
00:03:02.340 --> 00:03:08.460
our test should technically pass, the reason why it doesn't is because TypeScript is unhappy, because

54
00:03:08.460 --> 00:03:09.750
it knows that there's a mismatch.

55
00:03:10.080 --> 00:03:14.430
So it's telling to us right here the type that it's getting where we have an is logged in property,

56
00:03:14.430 --> 00:03:20.730
a jobs property, a degree is property is not assignable to the type that it expects to be returned

57
00:03:20.730 --> 00:03:23.100
from these state function, which is a global state.

58
00:03:23.430 --> 00:03:28.050
So we've told TypeScript that we want to return an object of type global state, which is of course

59
00:03:28.050 --> 00:03:29.130
this type right here.

60
00:03:29.160 --> 00:03:30.210
I'm going to drag it to the right.

61
00:03:30.570 --> 00:03:32.310
So this is what we promised TypeScript.

62
00:03:32.310 --> 00:03:34.050
Our state function would return.

63
00:03:34.230 --> 00:03:39.360
And of course this interface has four properties, while our actual object right here has five.

64
00:03:39.510 --> 00:03:41.790
And so Typekit says something is extra here.

65
00:03:41.790 --> 00:03:43.710
You're giving me a property that I don't know about.

66
00:03:43.860 --> 00:03:45.300
Please tell me what this thing is.

67
00:03:45.630 --> 00:03:50.790
So, of course, what we need to do here is to update the interface here as well, so that TypeScript

68
00:03:50.790 --> 00:03:53.880
understands what a global state looks like right now.

69
00:03:54.180 --> 00:03:59.310
So in order to have a degree's property, we're going to need to set it to have a type of a degree array,

70
00:03:59.490 --> 00:04:03.690
which means we're going to need to import the degree interface that we declared in the previous lesson.

71
00:04:03.960 --> 00:04:06.840
Luckily, that is already available in this type's far right here.

72
00:04:07.110 --> 00:04:12.270
So here I'm simply going to add a comma and import my degree interface as a reminder that is that interface

73
00:04:12.270 --> 00:04:14.700
with two properties, ID and degree.

74
00:04:15.060 --> 00:04:20.100
And so now I'm going to add my new property that should exist on this type of object.

75
00:04:20.100 --> 00:04:24.480
It's going to be called degrees and it is going to be a type degree array.

76
00:04:25.440 --> 00:04:25.710
All right.

77
00:04:25.710 --> 00:04:30.810
So an array consisting of those degree objects, each object within this array must implement that interface.

78
00:04:31.200 --> 00:04:33.270
So now you'll notice the issue here goes away.

79
00:04:33.600 --> 00:04:38.220
You'll also notice the issue right here goes away and goes away, because now it understands that we're

80
00:04:38.220 --> 00:04:42.570
getting a global state object here, and it's totally fair for it to have a degree's property because

81
00:04:42.570 --> 00:04:46.050
we said so that it would in this types file right here.

82
00:04:46.260 --> 00:04:49.620
We said that the state function would return an object of type global state.

83
00:04:49.860 --> 00:04:54.540
That type of object represented by this global state interface has a degrees property.

84
00:04:54.690 --> 00:04:57.690
So TypeScript is happy and thus the entire error goes away.

85
00:04:57.810 --> 00:05:00.300
And you can see all of our tests pass as well.

86
00:05:00.600 --> 00:05:05.670
So hopefully that gives you a better sense of how TypeScript again tries to enforce better code practices

87
00:05:06.090 --> 00:05:10.920
and again, kind of force us to provide types when necessary and shows us the disconnect.

88
00:05:10.950 --> 00:05:16.710
Maybe one object here has an additional property or one less property or the same number of properties.

89
00:05:16.710 --> 00:05:21.990
But there's a mismatch between types or even a more deeper mismatch and types like two properties may

90
00:05:21.990 --> 00:05:27.420
have or on two different objects may both have an array of objects, but the object inside those arrays

91
00:05:27.570 --> 00:05:29.940
aren't matching types as they should.

92
00:05:30.150 --> 00:05:32.520
And so TypeScript can get that many levels deep.

93
00:05:32.520 --> 00:05:34.410
And that's where its true power shines.

94
00:05:34.410 --> 00:05:38.550
It's going to help you avoid all those errors by pointing out those inconsistencies throughout your

95
00:05:38.550 --> 00:05:39.000
code base.

96
00:05:39.390 --> 00:05:39.660
All right.

97
00:05:39.660 --> 00:05:43.530
So with that, we've covered all this in this lesson, and I will see you in the next one.
