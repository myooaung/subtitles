WEBVTT
1
00:00:00.330 --> 00:00:01.470
All right.

2
00:00:01.470 --> 00:00:08.280
So now that we have introduced our first user story, let's start building out our top level navigation

3
00:00:08.280 --> 00:00:08.850
menu.

4
00:00:09.120 --> 00:00:12.850
The menu feels like an isolated chunk of responsibility.

5
00:00:12.870 --> 00:00:15.840
It's a distinct part of the user interface.

6
00:00:16.140 --> 00:00:20.730
So I propose that we place its contents inside a new view component.

7
00:00:20.940 --> 00:00:22.950
Let's create that component right now.

8
00:00:23.280 --> 00:00:27.340
Inside my project directory, we have our source folder where all of our code lives.

9
00:00:27.360 --> 00:00:30.060
And then inside there we have our components directory.

10
00:00:30.300 --> 00:00:35.130
And right in here, I'm going to create a new main NAV, that view component.

11
00:00:35.700 --> 00:00:41.880
What I'm using here is something called pass cow case, which means I'm capitalizing the first letter

12
00:00:41.880 --> 00:00:43.050
of each word.

13
00:00:43.290 --> 00:00:46.550
So in this case, the M in main and the end enough.

14
00:00:46.800 --> 00:00:51.090
So how do you name your files in view is up to you or up to your team?

15
00:00:51.300 --> 00:00:54.040
The most important aspect, though, is consistency.

16
00:00:54.060 --> 00:00:57.120
It doesn't really matter how you name them or with what casing.

17
00:00:57.240 --> 00:01:01.980
As long as you maintain the same consistency for the various components in your code base.

18
00:01:02.070 --> 00:01:06.660
So I'm going to stick with Pascal case as we create multiple components throughout the course.

19
00:01:07.080 --> 00:01:07.350
All right.

20
00:01:07.350 --> 00:01:11.160
So here we have main NAV and now we can start writing some code inside of it.

21
00:01:11.730 --> 00:01:15.480
Okay, so every Vue component needs a template tag.

22
00:01:15.480 --> 00:01:22.290
And of course, the contents of that template tag is the HTML that that component will render when we

23
00:01:22.290 --> 00:01:22.620
use it.

24
00:01:22.920 --> 00:01:27.090
So right up here, I'm going to write a template, HTML tag, all right.

25
00:01:27.090 --> 00:01:32.550
And then I'm going to add a line break here and we're immediately going to get a small, easy lint violation.

26
00:01:32.550 --> 00:01:38.850
If I hover my mouse over template, we can see it says the template requires child element.

27
00:01:39.060 --> 00:01:39.900
Pretty obvious.

28
00:01:39.900 --> 00:01:44.910
It's telling us, hey, you need to actually give me some HTML that's going to represent what a main

29
00:01:44.910 --> 00:01:47.650
NAV means in the context of this view app.

30
00:01:48.000 --> 00:01:55.440
So for now, I'll just add an HTML five header element and inside there I'll add the words main nav

31
00:01:55.440 --> 00:01:59.550
just so that we can confirm there's some text on the screen when we render this component.

32
00:01:59.970 --> 00:02:04.230
Just in case you're unfamiliar, html five's header element is a new element.

33
00:02:04.230 --> 00:02:09.900
It's basically the exact same as it did technically, but it's a little bit more semantically accurate.

34
00:02:10.110 --> 00:02:15.930
The header component should be used for introductory content to the page, including things like navigational

35
00:02:15.930 --> 00:02:17.370
aids, like menus.

36
00:02:17.580 --> 00:02:24.960
So it represents a better element to use than just a div, especially for things like SEO and accessibility.

37
00:02:25.170 --> 00:02:25.380
All right.

38
00:02:25.710 --> 00:02:27.180
So here we have our header.

39
00:02:27.510 --> 00:02:32.160
Next up, what I want to do is add a couple tailwind CS6 classes to it.

40
00:02:32.400 --> 00:02:37.440
Now, as far as the styles that we're going to add, I just want to give you a little bit into how my

41
00:02:37.440 --> 00:02:38.490
thought process here worked.

42
00:02:38.700 --> 00:02:45.120
All that I really did was go to the Google Careers website, open up my inspector in Chrome and observe

43
00:02:45.120 --> 00:02:47.220
the CSR styles that that website used.

44
00:02:47.610 --> 00:02:54.660
Then I took those styles, went to the Tailwind documentation and found the corresponding CSS classes.

45
00:02:54.660 --> 00:02:54.900
Right?

46
00:02:54.900 --> 00:03:01.980
So our final app is going to look pretty similar like 95% of like to the actual real life Google Careers

47
00:03:01.980 --> 00:03:02.280
app.

48
00:03:02.460 --> 00:03:04.830
Of course, it's not going to be pixel perfect, but close enough.

49
00:03:05.070 --> 00:03:08.310
So I'm no Sisi wizard, I'm no design genius.

50
00:03:08.490 --> 00:03:11.790
All I really did was copy the existing styles entertainment, right?

51
00:03:11.790 --> 00:03:13.680
So that's where I'm going to be getting these classes from.

52
00:03:13.890 --> 00:03:17.640
And of course, as I introduce them, I'm going to talk you through what they're actually doing.

53
00:03:17.820 --> 00:03:18.120
All right.

54
00:03:18.390 --> 00:03:21.070
So right here, let's add two classes to our header.

55
00:03:21.420 --> 00:03:25.050
The first is going to be a tailwind class called W full.

56
00:03:25.200 --> 00:03:26.790
That stands for with full.

57
00:03:26.970 --> 00:03:33.930
Of course, as you can see here, it's simply going to make the header container take up 100% of its

58
00:03:33.930 --> 00:03:35.370
parent container in terms of width.

59
00:03:35.370 --> 00:03:37.890
So full width in this case across the screen.

60
00:03:38.250 --> 00:03:41.820
The next thing I want to add is a class called Text Small.

61
00:03:41.820 --> 00:03:43.900
That's going to be text dash m.

62
00:03:44.160 --> 00:03:50.190
We can see on the right here, it adds a font size of 0.8 75 REM, which is equivalent to 14 pixels.

63
00:03:50.190 --> 00:03:51.960
So we're just going to have a really small text here.

64
00:03:52.110 --> 00:03:54.720
Eventually, this is where I want to put my company name.

65
00:03:54.810 --> 00:03:56.460
For now, we'll stick with Main NAV.

66
00:03:57.310 --> 00:03:57.910
Okay.

67
00:03:57.910 --> 00:03:59.020
So this is everything.

68
00:03:59.020 --> 00:04:04.810
We need to have a functional view component, but I want to add some additional metadata, some additional

69
00:04:04.810 --> 00:04:10.240
information for this component that will help it and help us identify it in the browser.

70
00:04:10.480 --> 00:04:15.490
So as we know below our template tag, we can also add script tags.

71
00:04:16.030 --> 00:04:19.300
All right, so I'm going to add a script tag right here and inside here.

72
00:04:19.300 --> 00:04:22.690
We can write any valid JavaScript that we would like.

73
00:04:22.930 --> 00:04:28.510
What you're typically going to see here is you're going to see an export default state statement, almost

74
00:04:28.510 --> 00:04:34.690
like you're exporting kind of a standard output out of a regular JavaScript file, except in this case,

75
00:04:34.690 --> 00:04:40.090
it's going to be inside the script tag and then you're going to export default a JavaScript object.

76
00:04:40.360 --> 00:04:47.680
And the way to think about this is this JavaScript object is a configuration object for this view component.

77
00:04:48.010 --> 00:04:48.310
All right.

78
00:04:48.310 --> 00:04:53.680
So just for Main NAV, this object is going to allow us to customize how this component works.

79
00:04:53.950 --> 00:04:58.930
I set up a bunch of settings, provided data, etc. We're going to talk more about the properties that

80
00:04:58.930 --> 00:05:01.840
we can add to this object as we progress through the course.

81
00:05:02.020 --> 00:05:07.330
But the central idea here is just about every Vue component is going to export default this JavaScript

82
00:05:07.330 --> 00:05:11.380
object, and each object will configure how that component works.

83
00:05:11.740 --> 00:05:17.680
So one property that we can add here is name, and hopefully this name is pretty self-explanatory.

84
00:05:17.680 --> 00:05:23.170
It allows us to simply give a formal name to the component because the file name is not enough for Vue.

85
00:05:23.350 --> 00:05:28.060
There's nowhere where we've actually said, Hey, view, this component should be called Main NAV.

86
00:05:28.330 --> 00:05:31.690
So right here I'll provide a string called Main.

87
00:05:31.780 --> 00:05:36.880
Now and this is going to appear in our view, dev tools, which will be able to see in just a moment.

88
00:05:37.780 --> 00:05:38.110
All right.

89
00:05:38.470 --> 00:05:43.420
So you'll notice a couple more squiggles appear here that is simply, again, prettier, complaining

90
00:05:43.420 --> 00:05:45.850
about the fact that it doesn't like how things look.

91
00:05:46.060 --> 00:05:51.310
But luckily in our project we can just save our file and we can see prettier apply all of those additional

92
00:05:51.310 --> 00:05:54.670
things like extra commas and semicolons and fix up.

93
00:05:54.880 --> 00:05:56.440
There's one more issue right here.

94
00:05:56.440 --> 00:06:01.300
And if I hover my mouse, you can see s lint wants an extra line break at the end, so I'm just going

95
00:06:01.300 --> 00:06:05.680
to add it and save the file and that completes our main nav component.

96
00:06:06.310 --> 00:06:06.850
Okay.

97
00:06:06.850 --> 00:06:11.530
So at this point, let's head to our browser and see if this component is successfully rendering on

98
00:06:11.530 --> 00:06:12.010
the page.

99
00:06:12.310 --> 00:06:18.010
So I'm going to flip over to Google Chrome and we do not see our new main NAV component.

100
00:06:18.280 --> 00:06:19.810
So what is going on here?

101
00:06:19.840 --> 00:06:21.730
We'll find out in the very next lesson.
