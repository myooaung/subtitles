1
00:00:00,560 --> 00:00:01,340
Okay.

2
00:00:01,340 --> 00:00:05,120
So let's write a test for our new accordion component.

3
00:00:05,480 --> 00:00:11,330
So in my file Explorer, I'm going to go to the tests directory that components then shared.

4
00:00:11,510 --> 00:00:13,820
And here I'm going to create a new file.

5
00:00:14,060 --> 00:00:15,380
Accordion dot.

6
00:00:15,380 --> 00:00:16,190
Test dot.

7
00:00:16,210 --> 00:00:16,610
Yes.

8
00:00:17,180 --> 00:00:22,700
And as always, let me drag it over to the right side so we can see it alongside our implementation.

9
00:00:23,120 --> 00:00:26,090
So let's begin by importing everything we need from you test utils.

10
00:00:26,300 --> 00:00:32,570
In this scenario, given that I am going to potentially render some child components within my slot,

11
00:00:32,750 --> 00:00:37,670
I think I'm going to keep it safe and use the mount function instead of shallow amount.

12
00:00:37,700 --> 00:00:40,970
Again, that can be personal preference, but for now I'm just going to stick with Mount.

13
00:00:41,300 --> 00:00:45,530
That is going to come from the view organization test utils package.

14
00:00:45,950 --> 00:00:48,590
Then of course, we need to import our component itself.

15
00:00:48,800 --> 00:00:54,440
So accordion is going to come from the source directory components shared accordion.

16
00:00:56,040 --> 00:00:59,020
And let me just add the extension here, even though it's technically not needed.

17
00:00:59,440 --> 00:01:02,830
I'm going to create a described block for my accordion component.

18
00:01:03,580 --> 00:01:09,100
And what do I want to validate that this component does it renders child?

19
00:01:10,120 --> 00:01:16,210
So basically what I want to validate here is that if I give my accordion some slot content, it should

20
00:01:16,210 --> 00:01:16,970
render it right.

21
00:01:16,990 --> 00:01:19,330
That's really the heart of what this accordion is doing.

22
00:01:19,840 --> 00:01:25,870
So let's begin by using our mount function to render an accordion component.

23
00:01:26,880 --> 00:01:31,620
And as we know, the second argument to mount and shallow mount is a configuration object.

24
00:01:32,040 --> 00:01:37,770
And it is in this configuration object that we're going to explore how we can specify slots in our test.

25
00:01:38,190 --> 00:01:44,460
Before we get there though, remember that our accordion component requires a prop of header, right?

26
00:01:44,670 --> 00:01:50,550
So normally we would render this accordion as a child within a larger parent like the component we were

27
00:01:50,550 --> 00:01:53,250
exploring in the previous lesson, the job filter sidebar.

28
00:01:53,550 --> 00:01:58,500
In the context of a test, we don't have a parent component, so we have to specify all of those details

29
00:01:58,500 --> 00:02:01,200
right here in the Mount function.

30
00:02:01,500 --> 00:02:07,500
So you may recall that in a test that we can provide a props object to the configuration object and

31
00:02:07,500 --> 00:02:10,200
here is where we specify the value of those props.

32
00:02:10,410 --> 00:02:14,760
So we need a header prop and let's provide a sample string value.

33
00:02:14,760 --> 00:02:18,540
Doesn't matter what it is, maybe something like test header and that should work.

34
00:02:18,990 --> 00:02:19,320
Okay.

35
00:02:19,320 --> 00:02:20,940
So that's going to specify the header prop.

36
00:02:21,120 --> 00:02:26,820
How do we specify slot content in order to do that in our configuration object?

37
00:02:26,970 --> 00:02:32,070
You guessed it, there's going to be an available slots property and we're going to set that equal to

38
00:02:32,070 --> 00:02:32,730
an object.

39
00:02:33,150 --> 00:02:38,400
Now, as it turns out, this is a little bit of a spoiler, but we can actually have multiple slots

40
00:02:38,400 --> 00:02:39,450
in a component.

41
00:02:39,450 --> 00:02:44,940
We're going to talk about how we can do that in the very next section, but the way we do it really

42
00:02:45,180 --> 00:02:49,460
is that each slot we can give its own custom name, right?

43
00:02:49,740 --> 00:02:51,420
We didn't use this feature right here.

44
00:02:51,420 --> 00:02:54,000
We just used the plain slot syntax right here.

45
00:02:54,270 --> 00:02:59,790
And whenever we do this view automatically gives our slot a name of default.

46
00:03:00,240 --> 00:03:07,500
Okay, so the way this works in this object is the properties represent the slots and the value represents

47
00:03:07,500 --> 00:03:11,610
the HTML that we want to insert or inject into that slot.

48
00:03:12,030 --> 00:03:17,730
So again, the slot on the left, we did not give a name, so Vue will give it the name default.

49
00:03:18,000 --> 00:03:21,810
So my slot that I want to target here is the slot named default.

50
00:03:22,140 --> 00:03:27,270
And again, my value for this property is what I want to be injected as that child content.

51
00:03:27,570 --> 00:03:32,820
So for example here I can put something like an H three and this is all a string by the way, in here

52
00:03:32,820 --> 00:03:34,650
I can put something like minus the child.

53
00:03:36,510 --> 00:03:36,930
Okay.

54
00:03:37,170 --> 00:03:42,900
So basically what we're doing here is the equivalent of rendering an accordion, right?

55
00:03:42,900 --> 00:03:45,660
And putting an H3 here with minus the child.

56
00:03:45,870 --> 00:03:50,610
The only difference is we obviously can't render a view component like this in our test.

57
00:03:50,760 --> 00:03:53,970
So we have to configure using this JavaScript object right here.

58
00:03:54,480 --> 00:03:54,780
Okay.

59
00:03:54,780 --> 00:04:00,630
So we're specifying that minus the child in an H three element is what we want as our kind of slotted

60
00:04:00,630 --> 00:04:01,170
content.

61
00:04:01,320 --> 00:04:06,240
And in order to specify which slot it goes into, we use default because that is the name that view

62
00:04:06,240 --> 00:04:08,610
assigns to a slot that doesn't have a custom name.

63
00:04:08,760 --> 00:04:12,840
We will talk more about how we assign a custom name to a slot up ahead.

64
00:04:13,350 --> 00:04:16,590
There's really no reason to give a slot a name if we only have one.

65
00:04:16,710 --> 00:04:18,810
It only really makes sense if you have more than one.

66
00:04:18,990 --> 00:04:22,290
Okay, so now we have our mounted accordion.

67
00:04:22,290 --> 00:04:23,340
What do we want to test?

68
00:04:23,670 --> 00:04:29,580
Well, I propose what we do is that we first test that we are not able to find this content anywhere

69
00:04:29,580 --> 00:04:30,900
in our component.

70
00:04:31,200 --> 00:04:35,550
Then I'd like to use my test to click on this div right here.

71
00:04:36,270 --> 00:04:41,970
So I want to target this div, click it in order to trigger all of this logic to run, to make our component

72
00:04:41,970 --> 00:04:42,480
open.

73
00:04:42,750 --> 00:04:49,650
And then after I do the click, I want to verify that this lot of content then appears after I have

74
00:04:49,650 --> 00:04:52,350
interacted with my component in the expected fashion.

75
00:04:52,770 --> 00:04:54,690
So let me show you what the code for that is going to look like.

76
00:04:55,020 --> 00:05:00,240
The first thing I'm going to do is I'm going to expect that we do not see the content.

77
00:05:00,510 --> 00:05:05,520
So I'm going to invoke a method on my wrapper called text that, as a reminder, is going to give me

78
00:05:05,520 --> 00:05:10,560
all of the text content that is within my accordion component.

79
00:05:10,560 --> 00:05:14,070
And by text I mean any text that the user sees on the screen.

80
00:05:14,400 --> 00:05:16,770
And then I'm going to use a special just syntax here.

81
00:05:16,920 --> 00:05:23,340
Instead of using the to match matcher, I'm going to first invoke a method called not and on the object

82
00:05:23,340 --> 00:05:28,350
that returns a rather access to property called not and on the object that that property gives me.

83
00:05:28,590 --> 00:05:31,410
That is going to have its own method called to match.

84
00:05:31,680 --> 00:05:37,530
What I'm basically doing here is I'm testing a negative, I'm testing and a wrapper text will not have

85
00:05:37,530 --> 00:05:39,900
when I specify here not to match.

86
00:05:40,200 --> 00:05:45,750
So what I expect here is that in my wrapper text I do not want to see the text minus the child.

87
00:05:45,990 --> 00:05:52,140
It should not be visible yet because it's going to be hidden because of the VRF right here and it should

88
00:05:52,140 --> 00:05:55,650
only be exposed whenever I click on the devil right here.

89
00:05:55,920 --> 00:06:00,630
So first I'm going to validate that it does match and then at some point I can copy this and paste the

90
00:06:00,630 --> 00:06:04,320
below at the very end of this operation that we're going to do in the middle.

91
00:06:04,470 --> 00:06:05,970
I do want it to match.

92
00:06:07,080 --> 00:06:07,320
All right.

93
00:06:07,320 --> 00:06:12,540
So we're going to have kind of like a before and after the starting state and then some kind of interaction

94
00:06:12,540 --> 00:06:13,380
and then the ending state.

95
00:06:13,710 --> 00:06:14,880
So what do I want to do here?

96
00:06:14,880 --> 00:06:16,650
I want to click on my clickable area.

97
00:06:17,040 --> 00:06:21,300
So what I'm going to do is create a contact called clickable area, for lack of a better name.

98
00:06:22,620 --> 00:06:26,190
And in my wrapper, I'm going to attempt to find a dot, a test attribute.

99
00:06:26,490 --> 00:06:32,700
So right here, I'm going to provide a string with a data test attribute, let's call it something like

100
00:06:32,910 --> 00:06:33,810
clickable area.

101
00:06:34,710 --> 00:06:38,700
Again, it doesn't matter because this attribute will exist purely for the purpose of a test.

102
00:06:39,030 --> 00:06:41,310
And then, of course, I want to trigger a click.

103
00:06:41,580 --> 00:06:48,480
You may recall that the way I do this in a test is that I take my clickable thing and I invoke a method

104
00:06:48,480 --> 00:06:49,590
on it called trigger.

105
00:06:50,190 --> 00:06:56,860
And then to trigger I pass a string representing the event that I want to trigger or run on this dip.

106
00:06:57,240 --> 00:07:00,540
So eventually we're going to have this data first attribute on this day right here.

107
00:07:00,750 --> 00:07:05,580
So when we trigger a click, we're really triggering this logic to run, which will trigger our open

108
00:07:05,580 --> 00:07:06,240
method to run.

109
00:07:06,540 --> 00:07:13,290
So here I want to trigger a click on whatever element my test finds that has this data test attribute

110
00:07:13,290 --> 00:07:15,150
on it right now.

111
00:07:15,150 --> 00:07:20,430
This is actually going to be an asynchronous event because we need to wait for the clicks to complete

112
00:07:20,430 --> 00:07:22,920
and then wait for the component to re render itself.

113
00:07:23,250 --> 00:07:26,490
So the trigger method actually returns a promise.

114
00:07:26,730 --> 00:07:27,810
So we need to await it.

115
00:07:28,020 --> 00:07:33,330
And if we're going to use the await syntax, we know that we need to make the test function itself asynchronous.

116
00:07:33,360 --> 00:07:34,920
So I'm going to add async right here.

117
00:07:35,550 --> 00:07:35,880
All right.

118
00:07:36,270 --> 00:07:37,740
So this should be our test.

119
00:07:37,740 --> 00:07:38,640
I'm going to save this.

120
00:07:38,880 --> 00:07:46,410
I'm going to open up our terminal, and let's go ahead and run our tests using NPM run, test, colon,

121
00:07:46,410 --> 00:07:46,710
watch.

122
00:07:46,920 --> 00:07:51,270
We should get a failure because we do not have that data test attribute anywhere.

123
00:07:51,270 --> 00:07:52,740
So there is no clickable area.

124
00:07:53,460 --> 00:07:54,390
So we're going to fail.

125
00:07:54,600 --> 00:07:59,030
And then what I'm going to do is add my appropriate data test attribute.

126
00:07:59,040 --> 00:08:04,500
So right here after my class, I'm going to add my new data test attribute, giving it the exact value

127
00:08:04,500 --> 00:08:07,980
that we're looking for in our test, which is clickable area.

128
00:08:09,300 --> 00:08:11,640
Save that and let's see what we get.

129
00:08:13,920 --> 00:08:14,310
Okay.

130
00:08:14,310 --> 00:08:16,590
So the good news is our test is passing.

131
00:08:16,620 --> 00:08:18,330
So everything is working as expected.

132
00:08:18,510 --> 00:08:20,310
We are not finding this text.

133
00:08:20,460 --> 00:08:23,230
We are then clicking on the clickable dev right here.

134
00:08:23,280 --> 00:08:28,770
It can really be any element whatsoever as long as it has the expected data first attribute and then

135
00:08:28,770 --> 00:08:32,670
we are verifying that we are seeing this content and where is this content coming from?

136
00:08:32,820 --> 00:08:38,580
It is coming from our slot, so we are validating that everything is working exactly as expected, both

137
00:08:38,580 --> 00:08:44,660
in terms of the collapse ability aspect of our recording as well as the use of the slot that we provide

138
00:08:44,660 --> 00:08:45,360
it to the accordion.

139
00:08:45,660 --> 00:08:50,640
We are still getting a warning right here and you're going to see it's a warning that we are very familiar

140
00:08:50,640 --> 00:08:56,130
with by now failed to resolve component, font, OSM icon that is coming again because we are using

141
00:08:56,130 --> 00:09:00,180
this global font awesome icon component that we registered with our main view app.

142
00:09:00,360 --> 00:09:04,740
But again, in the context of our test, we the test doesn't know what this component is.

143
00:09:04,890 --> 00:09:05,880
So it gets confused.

144
00:09:06,150 --> 00:09:07,320
How do we fix this problem?

145
00:09:07,320 --> 00:09:13,170
The exact same way we fixed it before, right here in my configuration object that I passed to mount.

146
00:09:13,320 --> 00:09:18,150
I'm going to use the global property and here what I want to provide is a stubs property.

147
00:09:18,150 --> 00:09:22,500
We are stubbing out or replacing that global component with something simpler.

148
00:09:22,740 --> 00:09:26,490
So right here I'm going to do font awesome icon as my property.

149
00:09:26,610 --> 00:09:32,220
That is the component that I want to replace and to simply use the view test, utils, default stub

150
00:09:32,340 --> 00:09:33,570
or default replacement.

151
00:09:33,720 --> 00:09:34,920
We can simply do true.

152
00:09:35,160 --> 00:09:39,840
So any time the test finds a font awesome like a component, it's going to replace it with something

153
00:09:39,840 --> 00:09:42,240
lighter and leaner and simpler.

154
00:09:42,600 --> 00:09:46,590
So some kind of stub that the view test utils library wants to provide.

155
00:09:46,800 --> 00:09:51,450
And if I save and force a test rerun, we're going to see that we're going to get a passing test.

156
00:09:51,630 --> 00:09:54,960
And in addition to that, we're not going to get any warnings in our console.

157
00:09:55,230 --> 00:09:55,650
All right.

158
00:09:55,950 --> 00:10:02,880
So that is an example of how we can test for a slot component or a slot element, some kind of injectable

159
00:10:02,880 --> 00:10:05,280
content from the perspective of a test.

160
00:10:05,610 --> 00:10:05,910
All right.

161
00:10:06,150 --> 00:10:07,660
That's all there is to cover in this lesson.

162
00:10:07,680 --> 00:10:09,470
So I will see you in next one.
