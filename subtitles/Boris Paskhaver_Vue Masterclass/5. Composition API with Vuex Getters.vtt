WEBVTT
1
00:00:00.950 --> 00:00:01.430
Okay.

2
00:00:01.430 --> 00:00:03.740
So here we are in our sub nav component.

3
00:00:03.740 --> 00:00:10.070
And in the previous lesson we replaced the former reference to this dot dollar sign root with our new

4
00:00:10.070 --> 00:00:12.590
invocation of the user out helper function.

5
00:00:12.860 --> 00:00:16.040
The next thing I want to take care of is replacing map getters.

6
00:00:16.400 --> 00:00:20.480
But remember, map getters itself is its own helper function.

7
00:00:20.480 --> 00:00:23.570
It's its own syntactic sugar over something else.

8
00:00:23.870 --> 00:00:30.980
Remember that on every single component in our app we have access to this dollar sign store and that

9
00:00:30.980 --> 00:00:32.690
represents our View X store.

10
00:00:32.960 --> 00:00:39.470
And on that store object we have a getters property and that's where we have all of our getters like

11
00:00:39.470 --> 00:00:40.400
filter jobs.

12
00:00:40.850 --> 00:00:47.600
So whenever we use map getters, all we're basically doing behind the scenes is asking view to get this

13
00:00:47.600 --> 00:00:54.110
getter from this location in the store and then make it available as a direct computed property or a

14
00:00:54.110 --> 00:00:55.700
method on this component.

15
00:00:55.940 --> 00:01:02.180
So now this component is going to be able to use this dot filter jobs, which is really just referencing

16
00:01:02.180 --> 00:01:04.700
the filter jobs getter on the store.

17
00:01:04.820 --> 00:01:07.970
And that's what map getters is doing for us behind the scenes.

18
00:01:08.360 --> 00:01:14.090
The key takeaway here, though, is it's pretty much the same problem as we had with router and root

19
00:01:14.270 --> 00:01:19.910
in that this logic is coming from a dependence on a property on the component called Dollar Sign Store,

20
00:01:20.030 --> 00:01:21.470
which we no longer have.

21
00:01:21.770 --> 00:01:24.290
So once again, hopefully get the strategy here.

22
00:01:24.470 --> 00:01:29.150
Can you guess how we're going to be able to get the store inside of our setup method?

23
00:01:29.360 --> 00:01:32.480
We're going to use a helper function from view X.

24
00:01:32.630 --> 00:01:33.740
Can you guess what it's called?

25
00:01:33.950 --> 00:01:34.940
You're absolutely right.

26
00:01:34.940 --> 00:01:36.800
It's called use store.

27
00:01:37.040 --> 00:01:45.410
So right here, below view, I'm going to import a named export called Use Store and this is going to

28
00:01:45.410 --> 00:01:46.790
come from View X.

29
00:01:47.120 --> 00:01:51.770
Remember, these are all separate libraries, so they're each giving us their own helper functions related

30
00:01:51.770 --> 00:01:52.880
to their functionalities.

31
00:01:53.090 --> 00:01:55.490
Root and router belong to view router.

32
00:01:55.610 --> 00:01:58.070
That's why they're going to give us use route and use router.

33
00:01:58.220 --> 00:02:02.420
The View Store belongs to the U.S., so that's why we import that from the U.S..

34
00:02:02.810 --> 00:02:09.050
Now, just as a quick heads up, these functions that we are importing here are called composable.

35
00:02:09.290 --> 00:02:14.750
That is the technical name for a helper function, basically a helper function that returns some bit

36
00:02:14.750 --> 00:02:17.810
of reactive state in the view ecosystem.

37
00:02:17.810 --> 00:02:21.950
This is called a composable function, but I'm just going to continue to use the word helper function

38
00:02:21.950 --> 00:02:22.370
for now.

39
00:02:22.460 --> 00:02:26.930
I mean that in the most general sense, a function that helps us accomplish something that we need to

40
00:02:26.930 --> 00:02:27.170
do.

41
00:02:27.650 --> 00:02:28.100
All right.

42
00:02:28.280 --> 00:02:30.320
So what are we going to do in our setup method?

43
00:02:31.280 --> 00:02:33.530
We're going to invoke the use store.

44
00:02:34.970 --> 00:02:35.480
Function.

45
00:02:35.720 --> 00:02:39.260
And what is that going to give us that's going to give us access to The View Store?

46
00:02:39.740 --> 00:02:40.190
All right.

47
00:02:40.580 --> 00:02:46.490
So this is a reactive object, which is great because whenever the getter updates or whenever the store

48
00:02:46.790 --> 00:02:50.660
updates and reruns, the getter, we want to re compute something in our component.

49
00:02:50.660 --> 00:02:53.630
We want that to be the filter jobs name that we have here.

50
00:02:54.020 --> 00:02:59.030
So remember, our component is dependent on the filter jobs array because it wants to take its length.

51
00:02:59.210 --> 00:03:04.640
So whenever a filter jobs updates that get a rerun because some original state has changed on the View

52
00:03:04.730 --> 00:03:05.090
Store.

53
00:03:05.360 --> 00:03:11.780
So once again, whenever we have this derived data and basically all all getters that we use on our

54
00:03:11.780 --> 00:03:17.450
components are technically derived data because it's basically just a component method that is a reflection

55
00:03:17.450 --> 00:03:20.000
of another method on the View Store, right?

56
00:03:20.000 --> 00:03:23.000
It's not original data, it's a getter belonging to something else.

57
00:03:23.270 --> 00:03:26.930
So basically any getter we use is intrinsically derived.

58
00:03:27.050 --> 00:03:30.410
It's just a duplicate copy of that method on our component.

59
00:03:30.710 --> 00:03:34.580
So in order to get this to work, we're going to need to use our familiar computed function.

60
00:03:34.910 --> 00:03:39.890
So right here, in order to have filter jobs available online, we're going to need to have a name here

61
00:03:39.890 --> 00:03:43.130
called Filter Jobs and then we're going to need to return it in the object below.

62
00:03:43.640 --> 00:03:46.700
So for filter jobs, I'm going to invoke the computed function.

63
00:03:47.570 --> 00:03:49.820
I'm going to pass in a function that's going to rerun.

64
00:03:50.270 --> 00:03:53.570
And whatever I provide, here is what viewers are going to watch for changes.

65
00:03:53.750 --> 00:03:55.850
And remember, our store is reactive.

66
00:03:56.060 --> 00:04:01.250
So simply, if we provide store anywhere in line here, we're going to be able to rerun this computed

67
00:04:01.250 --> 00:04:03.560
function that we pass whenever the store changes.

68
00:04:03.860 --> 00:04:06.710
So remember on our store we have our getters property.

69
00:04:06.830 --> 00:04:11.930
This is the exact same thing we have right here because dollar sign store and store right here are the

70
00:04:11.930 --> 00:04:13.010
same object.

71
00:04:13.100 --> 00:04:14.930
We're just getting it from a different place.

72
00:04:15.050 --> 00:04:19.880
We're getting it from use store instead of getting it directly embedded in our component via the dollar

73
00:04:19.880 --> 00:04:20.720
sign store property.

74
00:04:20.870 --> 00:04:24.410
But it's the same view store object fundamentally.

75
00:04:24.560 --> 00:04:26.480
So it's still going to have a getters property.

76
00:04:26.480 --> 00:04:28.820
And on that getters property we're going to have all of our getters.

77
00:04:28.940 --> 00:04:32.450
And one of our getters, of course, is filter jobs, right?

78
00:04:32.450 --> 00:04:34.160
So I'm going to access it directly like so.

79
00:04:34.520 --> 00:04:39.410
And most importantly, just because we've defined it here doesn't mean it's available in our template.

80
00:04:39.530 --> 00:04:42.890
We also need to make sure that we return it as a named property in this object.

81
00:04:43.160 --> 00:04:45.920
So filter jobs right here, save that.

82
00:04:46.070 --> 00:04:52.130
And with that we essentially have replaced all of our former functionality in the Options API and our

83
00:04:52.130 --> 00:04:53.300
component will still work.

84
00:04:53.570 --> 00:04:56.900
So let's remove our former imports of map getters and filter jobs.

85
00:04:58.370 --> 00:05:03.200
Let's import our compute or remove our computed properties right here and there we go.

86
00:05:03.500 --> 00:05:06.950
So does this make the component a little bit easier to read and understand?

87
00:05:07.130 --> 00:05:07.910
I think so.

88
00:05:08.030 --> 00:05:12.650
For example, this is our first component where we sort of have two separate pieces of functionality.

89
00:05:12.830 --> 00:05:15.470
One is related to the store and one is related to the root.

90
00:05:15.620 --> 00:05:17.810
And we have computed logic related to both.

91
00:05:18.020 --> 00:05:20.540
But notice how we can organize our code together.

92
00:05:20.720 --> 00:05:22.370
So here is where we create the store.

93
00:05:22.400 --> 00:05:27.410
And down below, we can immediately show that filter jobs is related to the store and its getters.

94
00:05:27.620 --> 00:05:32.630
And here we show that we have a reactive object called Root, and immediately below we can lumped together

95
00:05:32.630 --> 00:05:34.400
or organize related code.

96
00:05:34.580 --> 00:05:37.640
This piece of code is dependent on the reactive root and its name.

97
00:05:37.940 --> 00:05:43.100
So going back to the original principles we talked about as to why the composition API is beneficial.

98
00:05:43.280 --> 00:05:46.550
It's beneficial like this for reasons like this.

99
00:05:46.550 --> 00:05:52.250
Instead of scattering related functionality across data methods, computed properties and having them

100
00:05:52.250 --> 00:05:57.830
live further apart, we can bring them closer together in the Senate method and organize them together

101
00:05:57.950 --> 00:06:02.030
so that people can more closely follow the logic of what depends on what right.

102
00:06:02.030 --> 00:06:06.500
We sort of have this understanding of reactive state very similar to the ref function, but coming from

103
00:06:06.500 --> 00:06:10.190
somewhere else and then computed state that is dependent on that reactive state.

104
00:06:10.460 --> 00:06:11.780
This is one bit of functionality.

105
00:06:11.900 --> 00:06:13.400
This is another bit of functionality.

106
00:06:13.430 --> 00:06:16.040
We are then returning an object with the properties that we care about.

107
00:06:16.220 --> 00:06:21.500
So now we have on job results page available, we have filter jobs available and this should work in

108
00:06:21.500 --> 00:06:22.070
the browser.

109
00:06:22.340 --> 00:06:28.280
So I'm going to transition back to Chrome and let's expand job types in organizations, sign in, just

110
00:06:28.280 --> 00:06:31.580
show the sub nav and let's take a look at what happens when I select part time.

111
00:06:31.730 --> 00:06:36.980
Perfect it updates YouTube point of view temporary full time intern.

112
00:06:36.980 --> 00:06:40.130
If the number doesn't update, it simply means there's no jobs that fit the criteria.

113
00:06:40.400 --> 00:06:44.990
But as I continue to add or subtract, you're going to see that the number is generally an update,

114
00:06:45.050 --> 00:06:50.450
which means all of our logic is still working, which means our connection to the View Store is intact.

115
00:06:50.690 --> 00:06:52.760
Our connection to the router is intact.

116
00:06:52.880 --> 00:06:58.040
We're now just using functions to get those reactive objects instead of getting them directly as component

117
00:06:58.040 --> 00:06:59.540
properties under this keyword.

118
00:06:59.660 --> 00:07:00.290
That's it.

119
00:07:00.560 --> 00:07:05.160
So hopefully that jump to the composition API so far has not been crazy difficult.

120
00:07:05.180 --> 00:07:07.160
It sort of feels pretty logical to me.

121
00:07:07.310 --> 00:07:09.980
We're now just using functions in place of properties.

122
00:07:10.100 --> 00:07:10.490
All right.

123
00:07:10.820 --> 00:07:12.560
So that's all there is to cover in this lesson.

124
00:07:12.560 --> 00:07:14.180
And I will see you in the next one.
