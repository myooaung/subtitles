1
00:00:00,580 --> 00:00:01,280
Okay.

2
00:00:01,280 --> 00:00:03,550
So our component is in a really good state.

3
00:00:03,560 --> 00:00:10,010
We are rendering an input of a checkbox for every one of our unique organizations and the user is certainly

4
00:00:10,010 --> 00:00:14,450
welcome to click and select and deselect that checkbox in our browser.

5
00:00:14,720 --> 00:00:20,390
The only problem right now is we're not capturing any of that information anywhere, not in our component

6
00:00:20,390 --> 00:00:21,410
and not in view X.

7
00:00:21,680 --> 00:00:26,750
So the next thing that I'd like to do is to start wiring up our component, to be able to store that

8
00:00:26,750 --> 00:00:27,380
information.

9
00:00:27,710 --> 00:00:33,200
Keep in mind, the user should be able to select more than one checkbox at a time because they're able

10
00:00:33,200 --> 00:00:35,180
to filter by more than one organization.

11
00:00:35,390 --> 00:00:39,260
So we need some kind of data structure that will be able to store more than one thing.

12
00:00:39,500 --> 00:00:42,740
So obviously the first one that jumps to mind is an array.

13
00:00:43,100 --> 00:00:48,350
So what I'm going to do is I'm going to begin by defining some local component data, and that component

14
00:00:48,350 --> 00:00:53,450
data will be an array that will store all of the organizations that the user has selected.

15
00:00:53,690 --> 00:00:56,480
So once they make a selection, I'm going to add it to the array.

16
00:00:56,480 --> 00:01:00,380
If they d select that checkbox, I'm going to remove it from the array and view.

17
00:01:00,380 --> 00:01:02,930
Makes this very easy with the V model directory.

18
00:01:03,320 --> 00:01:07,370
So right here below components, I'm going to define a data method.

19
00:01:07,640 --> 00:01:11,660
This is defining local component data not to be confused with view x data.

20
00:01:12,140 --> 00:01:17,960
And here as a reminder, we return a object and that object represents the properties available on this

21
00:01:17,960 --> 00:01:18,410
component.

22
00:01:18,680 --> 00:01:24,260
And I'm going to define a single property, I'm going to call it selected organizations, just like

23
00:01:24,260 --> 00:01:25,130
the name suggests.

24
00:01:25,130 --> 00:01:29,630
This is the organizations or the companies the user has selected from the checkboxes.

25
00:01:29,870 --> 00:01:34,100
And when that page loads, I don't want any of my checkboxes selected or put.

26
00:01:34,100 --> 00:01:38,570
In other words, I can start off this data structure as having nothing inside it, so I'm just going

27
00:01:38,570 --> 00:01:40,520
to initialize it with an empty array.

28
00:01:41,630 --> 00:01:41,960
All right.

29
00:01:42,230 --> 00:01:46,670
Now, the other part of the equation is we have to connect this piece of data to our inputs above.

30
00:01:47,000 --> 00:01:50,900
So if I scroll up, here is our input of type checkbox.

31
00:01:50,900 --> 00:01:56,630
And just as a reminder, we have a single input right here, but we're using this in the body of a V4

32
00:01:56,630 --> 00:01:57,170
directive.

33
00:01:57,320 --> 00:02:01,070
So we're actually going to have as many inputs as there are unique organizations.

34
00:02:01,340 --> 00:02:03,530
However, the syntax remains the same in view.

35
00:02:03,770 --> 00:02:06,290
What I can do is I can use the V model directive.

36
00:02:06,440 --> 00:02:10,730
We did this earlier in the course, but we did it with a input text field.

37
00:02:11,030 --> 00:02:13,730
But we can do it the same with a checkbox as well.

38
00:02:13,760 --> 00:02:15,230
View is smart enough to handle that.

39
00:02:15,530 --> 00:02:20,510
So what I'm going to do is use the V model directive and the argument that I give it here is the name

40
00:02:20,510 --> 00:02:24,020
of the piece of data that I would like to connect this input to.

41
00:02:24,320 --> 00:02:29,090
So I want to connect it to my selected organization's data property that I just defined.

42
00:02:29,480 --> 00:02:33,080
And what the model is going to do for us is create two way data binding.

43
00:02:33,320 --> 00:02:40,310
As a reminder, what that means is we've created connectivity or reactivity between both the data and

44
00:02:40,370 --> 00:02:41,240
the template.

45
00:02:41,480 --> 00:02:46,130
So when the data changes, the template will update and when the template updates, for example, when

46
00:02:46,130 --> 00:02:48,500
the user interacts with it, so will the data.

47
00:02:48,710 --> 00:02:50,560
So it flows in both directions.

48
00:02:50,570 --> 00:02:53,210
Data Updates Template and template updates data.

49
00:02:53,330 --> 00:02:55,310
It is bound in both directions.

50
00:02:55,490 --> 00:02:57,320
That's why it's called two way data binding.

51
00:02:57,950 --> 00:03:02,600
And the reason we're using this approach of local component data with the model is because this is the

52
00:03:02,600 --> 00:03:07,550
simplest way that I can think of to connect these checkboxes to some bit of data that the component

53
00:03:07,550 --> 00:03:08,120
is storing.

54
00:03:08,570 --> 00:03:08,960
All right.

55
00:03:09,230 --> 00:03:14,030
So with this, we're going to capture the user clicking into a checkbox.

56
00:03:14,240 --> 00:03:19,400
However, we still need to tell you what we wanted to actually populate the array with.

57
00:03:19,400 --> 00:03:19,700
Right?

58
00:03:19,880 --> 00:03:23,090
Because obviously we want the name of the organization.

59
00:03:23,570 --> 00:03:25,280
However, Vue is not aware of this.

60
00:03:25,280 --> 00:03:30,170
In order to make it aware, what we need to do is to provide a value attribute to our input.

61
00:03:30,590 --> 00:03:36,410
And I'm going to use the V bind syntax because the value that I want to push into my selected organization's

62
00:03:36,410 --> 00:03:41,750
array is going to be the organization string that I'm currently iterating over in my V4.

63
00:03:42,110 --> 00:03:43,670
So I'm going to write organization here.

64
00:03:44,480 --> 00:03:48,680
So again, we're using V bind syntax because it's not literally the string organization.

65
00:03:48,830 --> 00:03:52,490
It's whatever is the dynamic organization that we're iterating over from our set.

66
00:03:52,640 --> 00:03:54,830
This can be YouTube, this can be Vue, can do it.

67
00:03:54,980 --> 00:04:00,320
Whatever is the other unique organizations we have and providing that string to my value attribute,

68
00:04:00,530 --> 00:04:06,620
just so that when the user selects this checkbox, we're going to add this thing to my selected organization's

69
00:04:06,620 --> 00:04:06,920
array.

70
00:04:06,950 --> 00:04:09,350
We now tell you what to add to that array.

71
00:04:09,740 --> 00:04:14,840
So the beautiful part about V model is Vue will take care of a lot of it, a lot of this logic for us.

72
00:04:15,020 --> 00:04:19,190
Let me show you this in the browser Vue model makes things remarkably easy.

73
00:04:19,460 --> 00:04:20,930
So right here I have my page.

74
00:04:21,710 --> 00:04:22,490
I'm going to expand.

75
00:04:22,490 --> 00:04:28,710
Organization's nothing is checked right now and in my view DevTools I'm going to go to my job filter

76
00:04:28,730 --> 00:04:34,190
sidebar organization's component and you can see we have our data here, selected organizations.

77
00:04:34,190 --> 00:04:35,270
It's an empty array.

78
00:04:35,600 --> 00:04:38,630
Take a look at what happens when I select a checkbox like view YouTube.

79
00:04:39,140 --> 00:04:44,270
Because we used this model, we have created a connection between the template and a piece of data.

80
00:04:44,510 --> 00:04:47,630
So Vue knows because we gave a D model to a checkbox.

81
00:04:47,750 --> 00:04:52,520
It knows that when the user checks that checkbox, it should add something to the array.

82
00:04:52,790 --> 00:04:53,990
How does it know what to add?

83
00:04:53,990 --> 00:04:57,290
It knows what to add based on the value attribute that we defined.

84
00:04:57,530 --> 00:04:58,730
So we made it YouTube.

85
00:04:58,790 --> 00:05:02,570
So it added Vue to look what happens when we click something else like you can do it.

86
00:05:03,320 --> 00:05:08,330
It's automatically going to add that string to the selected organization's data array.

87
00:05:08,690 --> 00:05:11,300
Take a look at what happens when I select a checkbox.

88
00:05:11,300 --> 00:05:15,410
Exactly what you might expect Vue is going to figure out, Hey, Vue Tube is no longer checked.

89
00:05:15,590 --> 00:05:19,910
I should remove that value of YouTube from my selected organization's array.

90
00:05:20,300 --> 00:05:21,320
And that's the beautiful part.

91
00:05:21,320 --> 00:05:26,960
Using V model and local components state, we can very easily create this flow where we're capturing

92
00:05:26,960 --> 00:05:29,570
all of the user's inputs through checkboxes.

93
00:05:29,570 --> 00:05:34,160
And as the user selects or D selects, we can modify the selected organization's array accordingly.

94
00:05:34,580 --> 00:05:37,460
So this is an example of data flowing in one direction.

95
00:05:37,460 --> 00:05:42,320
The user interacting with the template updates the data, but it also goes the other way.

96
00:05:42,500 --> 00:05:48,500
If something on the JavaScript side of things updates our data array, the template, the view that

97
00:05:48,500 --> 00:05:50,850
the user sees in the browser will update as well.

98
00:05:51,110 --> 00:05:54,920
So let me show you that in action, I'm going to navigate back to this code.

99
00:05:55,070 --> 00:05:58,520
You do not have to write this code out because it's simply for the sake of example.

100
00:05:58,730 --> 00:06:03,260
But I just want to show you that if we go in the other direction, if we go to the JavaScript side of

101
00:06:03,260 --> 00:06:09,500
things and we, for example, provide a string here like YouTube, which is one of my sample organizations

102
00:06:09,500 --> 00:06:14,840
from my response by saving this, we're saying, hey, this is our starting data.

103
00:06:15,050 --> 00:06:18,830
So Vue is going to say, I have this two way connection between the data and the template.

104
00:06:19,040 --> 00:06:25,010
Since you gave me some data that is reflective on the template, I need to update the template accordingly.

105
00:06:25,340 --> 00:06:30,110
So if I provide a starting value here of YouTube and I go back to my browser, the page is going to

106
00:06:30,110 --> 00:06:30,620
refresh.

107
00:06:30,620 --> 00:06:34,280
And when I expand organizations you're going to see that YouTube is going to be checked.

108
00:06:34,910 --> 00:06:37,190
So this is data binding in the opposite direction.

109
00:06:37,190 --> 00:06:40,520
Our component data is effect is affecting what the template looks.

110
00:06:40,590 --> 00:06:44,700
Like and then the users interaction with the template affects what the data looks like.

111
00:06:44,820 --> 00:06:47,190
That's the way that the data flows in both directions.

112
00:06:47,370 --> 00:06:49,380
Data to template and template to data.

113
00:06:49,650 --> 00:06:52,590
So right here, you can see here is our selected organizations, right?

114
00:06:52,740 --> 00:06:53,790
It starts with YouTube.

115
00:06:53,910 --> 00:06:55,500
I can very easily select that.

116
00:06:56,250 --> 00:06:57,770
And now we can see if view update to.

117
00:06:58,380 --> 00:06:58,620
All right.

118
00:06:58,620 --> 00:07:03,330
So the good news is here at the very end of this lesson, by using V model and that directive, we have

119
00:07:03,660 --> 00:07:09,360
created a data binding between local component data and these six checkboxes that we have on the screen.

120
00:07:09,510 --> 00:07:12,480
So now we are capturing what the user cares about.

121
00:07:12,630 --> 00:07:14,550
We're capturing what the user wants to filter by.

122
00:07:14,760 --> 00:07:20,340
So of course, the next step is sending this data to view X so that you can say, okay, you selected

123
00:07:20,340 --> 00:07:22,890
these two companies of YouTube and view beauty.

124
00:07:23,100 --> 00:07:28,230
I got to take those companies and use that to filter the jobs on the right hand side to only show the

125
00:07:28,230 --> 00:07:30,570
jobs that belong to these two organizations.

126
00:07:30,780 --> 00:07:34,890
So in the follow up lessons, we're gonna start talking about how we can communicate this data back

127
00:07:34,890 --> 00:07:35,730
to View X.
