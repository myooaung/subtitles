WEBVTT
1
00:00:00.330 --> 00:00:01.230
All right.

2
00:00:01.230 --> 00:00:05.250
So at the end of the previous lesson, we made a shocking discovery.

3
00:00:05.460 --> 00:00:12.780
We observed that we could not see our new hero component visibly on the screen because it was hidden

4
00:00:12.780 --> 00:00:14.700
behind our fixed header.

5
00:00:14.940 --> 00:00:15.300
Okay.

6
00:00:15.570 --> 00:00:20.970
Now, as I warned you at the very beginning of the course, I am not access expert and I'm sure there

7
00:00:20.970 --> 00:00:24.090
is a more optimal solution to this problem.

8
00:00:24.330 --> 00:00:28.650
But I want to show you how I solved this problem using what we know about view.

9
00:00:28.860 --> 00:00:34.320
And that will also allow us to introduce some new view concepts, specifically as it deals with classes.

10
00:00:34.680 --> 00:00:42.480
So what we can do, or one solution that we can apply in order to push this main element down, which

11
00:00:42.480 --> 00:00:48.780
is the hero component, is we can apply a fixed height to our header element right here.

12
00:00:48.780 --> 00:00:54.210
The header element right here is the one that wraps everything in our NAV and our sub now.

13
00:00:54.930 --> 00:00:59.490
So let me just show you in the browser, I'm going to select this header element right here and I'm

14
00:00:59.490 --> 00:01:04.950
just going to apply a manual fixed height of let's say 150 pixels.

15
00:01:05.340 --> 00:01:11.790
And you'll notice what happens is if I hover my mouse now, I can see that 150 pixel box specified by

16
00:01:11.790 --> 00:01:17.100
my height, and that will push the content or any other content further down.

17
00:01:17.310 --> 00:01:20.030
So now you can see that my main appears right here.

18
00:01:20.040 --> 00:01:26.190
Here is our I Can Be Your Hero Baby text and that is 150 pixels down from the top because our header

19
00:01:26.190 --> 00:01:28.860
is pushing it down that number of pixels.

20
00:01:29.250 --> 00:01:31.050
Now here's where things get really interesting.

21
00:01:31.050 --> 00:01:38.130
Let's say we wanted to follow the same approach and we wanted to push down our our main content a certain

22
00:01:38.130 --> 00:01:38.760
number of pixels.

23
00:01:38.760 --> 00:01:39.000
Right.

24
00:01:39.180 --> 00:01:42.210
And we know that this height right here is 64 pixels.

25
00:01:42.420 --> 00:01:48.510
So we might say something like find the Tailwind class that represents a height of 64 pixels and apply

26
00:01:48.510 --> 00:01:48.660
it.

27
00:01:48.780 --> 00:01:51.570
And that should push this down 64 pixels.

28
00:01:51.570 --> 00:01:53.520
So it would look something like this.

29
00:01:53.910 --> 00:01:59.430
Let me just hardcoded 64 pixels here in browser and it would look like that and that's exactly what

30
00:01:59.430 --> 00:01:59.880
we want.

31
00:02:00.240 --> 00:02:05.070
However, we run into a little problem when we introduce the sub nav.

32
00:02:05.250 --> 00:02:11.550
So let me go ahead and apply the sub nav and you'll see that now the sub nav is going to hide our main

33
00:02:11.550 --> 00:02:13.830
content, which is right here.

34
00:02:13.830 --> 00:02:21.480
Our content is successfully pushed down 64 pixels, but this sub nav is now overlaying it, right?

35
00:02:21.750 --> 00:02:27.480
So we kind of have an interesting conditional circumstance where if we just have our primary NAV and

36
00:02:27.480 --> 00:02:32.730
we do not have a sub nav, then pushing the main content down at 64 pixels is totally fine.

37
00:02:33.030 --> 00:02:41.040
However, if we do have a sub nav, what we want to do is push it down 128 pixels because our main nav

38
00:02:41.040 --> 00:02:43.980
is 64 and our sub nav is 64.

39
00:02:43.980 --> 00:02:46.260
So that is a total of 128 pixels.

40
00:02:46.530 --> 00:02:51.420
So if I change this to 128, we are going to get what we want right here.

41
00:02:51.750 --> 00:02:56.310
That's what we want, but that's what we want only when we have a sub nav.

42
00:02:56.490 --> 00:02:58.350
So we have a little bit of conditional logic.

43
00:02:58.500 --> 00:03:03.690
But luckily, just like our profile image and our subnet, this bit of conditional logic is something

44
00:03:03.690 --> 00:03:08.160
that is dependent on the user's logged in status, which we are tracking.

45
00:03:08.430 --> 00:03:13.020
So let's go ahead and see how we can create something like this automatically using view.

46
00:03:13.380 --> 00:03:19.110
So I'm going to transition back to this code and the component that I actually want to open is called

47
00:03:19.110 --> 00:03:20.280
Main now.

48
00:03:21.180 --> 00:03:21.570
All right.

49
00:03:21.780 --> 00:03:28.320
And here I want to create a computed property and I'll explain all of my logic, or rather it'll come

50
00:03:28.320 --> 00:03:29.400
together over time.

51
00:03:29.580 --> 00:03:32.190
But let's begin with creating a computed property.

52
00:03:32.340 --> 00:03:37.050
Right now, this component doesn't have any computed properties, so I have to create that property.

53
00:03:37.200 --> 00:03:40.190
In my view, configuration object and the S.

54
00:03:40.200 --> 00:03:45.420
Led Style Guide prefers that we place it between our data method and our methods object.

55
00:03:45.600 --> 00:03:48.240
So right here I'm going to add my computed property.

56
00:03:48.930 --> 00:03:52.200
We played around with this earlier in the course, but on a different component.

57
00:03:52.500 --> 00:04:00.660
And here as a reminder, we define methods and I'm going to call my method header height class and just

58
00:04:00.660 --> 00:04:05.730
like when we worked with this the previous time, what I want this method to return is an object.

59
00:04:06.480 --> 00:04:12.600
And just like the last time the keys in this object, the properties are going to be six classes and

60
00:04:12.600 --> 00:04:18.450
the values are going to be booleans that reflect whether that class should or should not be applied.

61
00:04:18.600 --> 00:04:21.540
True means apply, false means do not apply.

62
00:04:21.780 --> 00:04:25.650
And what I'm going to do here is actually use tailwind CSS as classes.

63
00:04:25.920 --> 00:04:32.700
So there is a Tailwind CSS class called H 16 and that creates a height of 64 pixels.

64
00:04:33.120 --> 00:04:36.540
So when do I want to have a header height of 64 pixels?

65
00:04:36.750 --> 00:04:41.670
This is when I only have the primary nav and when I do not have the sub nav.

66
00:04:41.880 --> 00:04:42.210
Right.

67
00:04:42.630 --> 00:04:45.030
64 pixels will cover just one of those.

68
00:04:45.030 --> 00:04:47.700
And we're focusing on the main navigation menu.

69
00:04:48.390 --> 00:04:55.140
So when are we only showing the main navigation menu when the user is not logged in, when the page

70
00:04:55.140 --> 00:04:55.860
initially loads.

71
00:04:56.220 --> 00:04:59.940
So we have access as you may recall, to our data properties.

72
00:04:59.970 --> 00:05:00.480
Right here.

73
00:05:00.600 --> 00:05:02.940
And we have this property called is locked in.

74
00:05:03.810 --> 00:05:09.810
So what I can do is say when the user is not logged in, which means the inverse of is logged in.

75
00:05:11.360 --> 00:05:17.360
Well, give me the Boolean that reflects whether I should apply this class, which is age 16, which

76
00:05:17.360 --> 00:05:18.800
represents 64 pixels.

77
00:05:19.070 --> 00:05:24.050
This can be a little bit confusing, but hopefully it makes more sense when I provide the second class

78
00:05:24.050 --> 00:05:26.150
here, which is age 32.

79
00:05:27.330 --> 00:05:33.030
So age 32 is a tailwind class that declares a height of 128 pixels.

80
00:05:33.270 --> 00:05:35.600
When do we want 128 pixels?

81
00:05:35.610 --> 00:05:37.770
When the user is logged in.

82
00:05:37.950 --> 00:05:43.680
Because when the user is logged in, we want to show the primary NAV at 64, the sub nav at another

83
00:05:43.680 --> 00:05:49.960
64 for a total of 128 pixels that we want to add as a height to create separation from our hero.

84
00:05:50.250 --> 00:05:56.910
So we know that when the user is logged in, this is logged in, which will be true when the user is

85
00:05:56.910 --> 00:05:57.420
logged in.

86
00:05:57.600 --> 00:06:01.110
When the user is logged in, we know we will have a sub nav.

87
00:06:01.230 --> 00:06:10.560
So we want a total of 128 pixel height for our header, 64 for our primary nav and 64 for our sat nav.

88
00:06:10.680 --> 00:06:11.850
So hopefully that makes sense.

89
00:06:11.850 --> 00:06:14.130
But we haven't actually widening anything up yet.

90
00:06:14.130 --> 00:06:15.630
We just have this computed class.

91
00:06:15.960 --> 00:06:21.210
So I want to scroll back up and I want to add this height to our header.

92
00:06:21.360 --> 00:06:24.150
We just did this in the browser manually in Chrome.

93
00:06:24.150 --> 00:06:31.320
I just hardcoded those pixel values as you may recall, 150, 64, 128 We did the same idea here, but

94
00:06:31.320 --> 00:06:37.140
we have an interesting scenario where we already have some hardcoded tail and classes here w full for

95
00:06:37.140 --> 00:06:39.360
width and text sem for small text.

96
00:06:39.540 --> 00:06:46.680
But now we want to add our computed class, which is an object and there is actually a syntax in view

97
00:06:46.680 --> 00:06:48.210
that supports both of these options.

98
00:06:48.540 --> 00:06:52.530
So the first thing I'm going to do is to use my V bind syntax.

99
00:06:52.530 --> 00:06:55.260
So I'm going to bind to this class attribute.

100
00:06:55.410 --> 00:06:59.100
And as a reminder, we can do either this or this.

101
00:07:00.350 --> 00:07:06.140
And then what I'm actually going to provide here is an array and we can just write it inline within

102
00:07:06.140 --> 00:07:11.180
our double quotes because remember when we use V bind, Vue is smart enough to understand that we are

103
00:07:11.180 --> 00:07:13.460
not using a string, we're using an array.

104
00:07:13.820 --> 00:07:20.360
And the first values in my arrays are going to be the strings representing the classes that I always

105
00:07:20.360 --> 00:07:21.560
want to have.

106
00:07:21.830 --> 00:07:29.320
So the two classes that we just remove from here were w doubtful and text dash.

107
00:07:29.520 --> 00:07:30.860
So, all right.

108
00:07:31.130 --> 00:07:37.430
So by simply creating an array and binding it to class, what I'm saying is these classes go ahead and

109
00:07:37.430 --> 00:07:40.010
always apply them no matter what.

110
00:07:40.220 --> 00:07:40.580
Right.

111
00:07:40.850 --> 00:07:46.250
Now, of course, this syntax is a lot more confusing than simply having class and writing two of those

112
00:07:46.250 --> 00:07:47.060
classes in line.

113
00:07:47.180 --> 00:07:50.060
So this is not a better approach than what we just had.

114
00:07:50.390 --> 00:07:56.480
The advantage of this approach is in this array we can also provide the name of any computed property

115
00:07:56.480 --> 00:07:56.930
we want.

116
00:07:57.200 --> 00:08:02.270
And so here is where I can reference this computed property of header height class.

117
00:08:03.020 --> 00:08:05.630
So I'm just going to write it in line and we'll talk more about it.

118
00:08:05.660 --> 00:08:10.010
We do not need to surround this in quotes, so we're going to write header high class.

119
00:08:10.760 --> 00:08:12.750
So to reiterate what is going on here.

120
00:08:12.770 --> 00:08:18.970
These are strings representing Tailwind CC's classes that will always be applied in comparison.

121
00:08:18.980 --> 00:08:25.160
Header high class is a computed property, which is really a method that's going to return a a JavaScript

122
00:08:25.160 --> 00:08:25.580
object.

123
00:08:25.790 --> 00:08:28.010
And Vue is actually pretty flexible.

124
00:08:28.010 --> 00:08:33.950
So it's totally fine if we give it a array here with two strings and a JavaScript object, it's just

125
00:08:33.950 --> 00:08:35.300
going to do the exact same thing.

126
00:08:35.300 --> 00:08:36.050
It's always done.

127
00:08:36.200 --> 00:08:40.790
It's going to look at this object and say, which classes are in this object?

128
00:08:40.790 --> 00:08:43.070
Which properties have a value of true?

129
00:08:43.220 --> 00:08:47.210
And I'm always going to are only going to apply those.

130
00:08:47.660 --> 00:08:55.970
So in other words, we're always going to get this, this and whatever classes here have a boolean value

131
00:08:55.970 --> 00:08:56.750
of true.

132
00:08:57.470 --> 00:09:02.450
So for example, when this component first loads is logged in is going to be set to false, which means

133
00:09:02.450 --> 00:09:07.070
the 16 property here is the only one that's going to have a value of true.

134
00:09:07.370 --> 00:09:13.970
That means that view is going to apply age 16 here as well as w fall as well as text.

135
00:09:14.480 --> 00:09:23.300
So when the value of the is logged in property switches to True View reruns or re calculates the computed

136
00:09:23.300 --> 00:09:23.810
property.

137
00:09:24.050 --> 00:09:30.710
So now this is going to be equal to true, which means the only property in this object that has a value

138
00:09:30.710 --> 00:09:37.700
of true is H 32, which means Vue will apply age 32 right here and text esim and W4.

139
00:09:38.000 --> 00:09:44.600
So these are constants and these are conditionals based on a property that we have configured in our

140
00:09:45.140 --> 00:09:46.400
computed object.

141
00:09:46.490 --> 00:09:46.820
All right.

142
00:09:47.000 --> 00:09:49.850
Pretty complex idea, but hopefully it makes sense what we're doing here.

143
00:09:49.850 --> 00:09:53.660
I know the syntax can be a little bit tricky, but this should actually do it.

144
00:09:53.660 --> 00:09:56.390
So if I go back to my browser now, save this work.

145
00:09:57.320 --> 00:10:01.700
When the page loads, the user is not logged in.

146
00:10:01.820 --> 00:10:08.540
So because the user is not logged in, we apply the age 16 class which applies 64 pixels of height to

147
00:10:08.540 --> 00:10:09.440
this had an element.

148
00:10:09.650 --> 00:10:11.720
I can show that to you right here by selecting it.

149
00:10:12.790 --> 00:10:17.770
And you can see here they had a now has that age 16 class alongside the two that are always going to

150
00:10:17.770 --> 00:10:18.270
be present.

151
00:10:18.280 --> 00:10:18.580
Right.

152
00:10:18.910 --> 00:10:24.160
And then as soon as I click the sign in button we flipped the value of that is logged in property to

153
00:10:24.160 --> 00:10:28.840
true which forces this class to change to age 32.

154
00:10:29.020 --> 00:10:34.630
Because remember the computed property re computes view gets a new object so it knows to look at the

155
00:10:34.630 --> 00:10:42.010
header class and where we've bound that data to this HTML attribute attribute class so it knows to swap

156
00:10:42.010 --> 00:10:42.130
it.

157
00:10:42.340 --> 00:10:48.370
You'll see that the first two classes still remain, but now we have 32 and because we now have that

158
00:10:48.370 --> 00:10:53.680
Tailwind class providing 128 pixels of height, we can now push down.

159
00:10:53.680 --> 00:10:55.510
I can be our hero baby to here.

160
00:10:55.810 --> 00:11:02.410
So once again, to show you this in action, we now see our hero when we have a regular primary nav

161
00:11:02.590 --> 00:11:07.480
and when we sign in, we can see the hero as well when we have our Somnath.

162
00:11:07.690 --> 00:11:08.020
All right.

163
00:11:08.500 --> 00:11:09.850
Hopefully this has been a lot of fun.

164
00:11:09.850 --> 00:11:14.560
This was definitely an interesting problem for me to tackle with view, but I will see you in the next

165
00:11:14.560 --> 00:11:14.890
lesson.
