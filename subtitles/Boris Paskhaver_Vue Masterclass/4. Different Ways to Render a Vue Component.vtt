WEBVTT
1
00:00:00.360 --> 00:00:01.290
In this lesson.

2
00:00:01.290 --> 00:00:07.470
I want to show you a couple different ways that we can render a view component within another view component.

3
00:00:07.710 --> 00:00:13.140
We saw one example in the previous lesson and we see it on lines two through four, but there are actually

4
00:00:13.140 --> 00:00:16.380
several options available syntactically in view.

5
00:00:16.650 --> 00:00:21.300
So I'm going to clear lines three and four here, which is my second and third usage of the main NAV

6
00:00:21.300 --> 00:00:21.780
component.

7
00:00:22.110 --> 00:00:24.930
And I'm going to keep the first one just so we have it to compare.

8
00:00:25.260 --> 00:00:29.220
And what we see here, of course, is an opening tag and a closing tag.

9
00:00:29.370 --> 00:00:33.780
The closing tag is the same, except it has the slash at the very beginning.

10
00:00:34.080 --> 00:00:37.060
And the way this works is very much like an h html element.

11
00:00:37.080 --> 00:00:38.370
Like a div works.

12
00:00:38.370 --> 00:00:43.770
We have our opening tag, our closing tag, and sometimes we can put content in the middle and we'll

13
00:00:43.770 --> 00:00:46.440
talk about why we might want to do that in view later on.

14
00:00:46.740 --> 00:00:52.720
But whenever we have no content inside, we can have a single self-closing tag.

15
00:00:52.740 --> 00:00:58.980
It's the exact same idea in HTML where we have something like an input tag where we do not need a complementary

16
00:00:58.980 --> 00:00:59.700
closing tag.

17
00:00:59.700 --> 00:01:03.480
We can just have a single tag and we put the slash at the very end.

18
00:01:03.720 --> 00:01:05.430
So that syntax looks like this.

19
00:01:05.430 --> 00:01:10.770
I'm going to write out Main NAV again, but instead of writing both an opening and closing tag, I'm

20
00:01:10.770 --> 00:01:15.390
going to put the slash at the end here and then the bracket to close off this component.

21
00:01:15.390 --> 00:01:19.560
So this syntax on line number three is equivalent to what we have on line number two.

22
00:01:19.710 --> 00:01:25.170
And it should only be used if there is no actual internal content to place in between the opening and

23
00:01:25.170 --> 00:01:25.980
closing tags.

24
00:01:26.160 --> 00:01:31.410
So line number three is actually preferred because it's a little bit lighter and shorter, but it accomplishes

25
00:01:31.410 --> 00:01:33.780
the exact same tactical result as line number two.

26
00:01:33.780 --> 00:01:40.320
And I can prove this to you in our browser, we have now two instances of our main NAV component being

27
00:01:40.320 --> 00:01:43.400
rendered onto the screen, but it doesn't end there.

28
00:01:43.410 --> 00:01:45.150
There's a couple of more options available to us.

29
00:01:45.510 --> 00:01:51.000
So earlier in the previous lesson, we talked about this component's property on our view configuration

30
00:01:51.000 --> 00:01:56.520
object and we talked about the name that we defined here being available directly to use in our template

31
00:01:56.520 --> 00:01:57.360
and indeed it is.

32
00:01:57.360 --> 00:02:03.570
We have main NAV here, but Vue also takes this name right here and converts it into a couple different

33
00:02:03.570 --> 00:02:06.420
casings that we can also use in our template.

34
00:02:06.660 --> 00:02:08.940
One example is kabob case.

35
00:02:09.180 --> 00:02:15.690
So what we have here is called the pass cow case, and that means the first letter of every word is

36
00:02:15.690 --> 00:02:16.470
capitalized.

37
00:02:16.470 --> 00:02:18.420
So the Amman main and the end.

38
00:02:18.420 --> 00:02:26.580
And now in kabob case we turn the entire word lowercase and then between every two subsequent words

39
00:02:26.820 --> 00:02:29.460
we put a dash or a hyphen.

40
00:02:29.700 --> 00:02:33.150
So it looks like this if you can imagine lowercase the entire word.

41
00:02:33.300 --> 00:02:34.320
So main nav.

42
00:02:34.470 --> 00:02:39.870
And then instead of separating main and nav with capitalization, we separate it with a dash.

43
00:02:39.990 --> 00:02:44.520
All right, I'm just going to write an opening tag, and as soon as I put my closing bracket here,

44
00:02:44.520 --> 00:02:48.270
you'll see that this code will automatically populate my closing tag.

45
00:02:48.540 --> 00:02:51.090
This syntax is also valid, right?

46
00:02:51.270 --> 00:02:53.310
So we can't just choose whatever name we want here.

47
00:02:53.310 --> 00:02:56.880
It is still dependent on what we defined in our components object.

48
00:02:57.060 --> 00:03:03.810
However, A, you will take this and allow us to use this or equivalently the kabob case version of

49
00:03:03.810 --> 00:03:04.740
whatever we have here.

50
00:03:04.740 --> 00:03:07.380
So this will work as well as identical.

51
00:03:07.740 --> 00:03:13.920
And as you might have guessed, if we have no content within our tags, we can similarly use a kabob

52
00:03:13.920 --> 00:03:20.250
cased single self-closing tags so we can write main dash nav, all lowercase with a hyphen in between

53
00:03:20.250 --> 00:03:23.940
words and close it off with a self-closing tag just like this.

54
00:03:24.090 --> 00:03:25.740
And if I check back in my browser.

55
00:03:26.910 --> 00:03:27.810
You're going to see that now.

56
00:03:27.810 --> 00:03:32.250
We have four instances of the main NAF component being rendered.

57
00:03:33.360 --> 00:03:35.340
And that's the beautiful part of view.

58
00:03:35.370 --> 00:03:41.220
Each component is an independent, reusable chunk of the user interface, and we can render as many

59
00:03:41.220 --> 00:03:42.600
of these components as we need.

60
00:03:42.960 --> 00:03:47.100
As always, the most important thing is consistency, and what I'm going to be using throughout the

61
00:03:47.100 --> 00:03:49.260
course is the kabob case version.

62
00:03:49.260 --> 00:03:54.480
So I'm going to be using what we have on lines four and five, following again the rule of if we have

63
00:03:54.480 --> 00:03:59.070
any content to place in between the tags, we're going to use both the opening and closing tags.

64
00:03:59.250 --> 00:04:04.020
And if we have no content between the tags, we're just going to do this single version line number

65
00:04:04.020 --> 00:04:06.960
five with a closing slash at the end.

66
00:04:07.140 --> 00:04:12.280
So I'm going to remove the first three lines here and I'm just going to stick with May now save this.

67
00:04:12.280 --> 00:04:17.130
So when I go back to my browser, I should see only one component being rendered.

68
00:04:17.130 --> 00:04:17.700
There it is.

69
00:04:17.880 --> 00:04:22.170
And the last thing I want to do to close this lesson off is to show you how this component is going

70
00:04:22.170 --> 00:04:23.340
to appear in our view.

71
00:04:23.580 --> 00:04:27.420
DevTools It's been a little while since we explored those, so I want to show you how that works.

72
00:04:27.420 --> 00:04:32.530
So if you are in Chrome, the way you can access your devtools is you go to this little hamburger dot

73
00:04:32.580 --> 00:04:34.140
icon on the very top, right?

74
00:04:34.500 --> 00:04:37.650
And then you can go to more tools and developer tools.

75
00:04:37.650 --> 00:04:42.750
And before you click this, whatever operating system you're on, I recommend taking a look at the shortcut

76
00:04:42.750 --> 00:04:45.660
that you see here and memorizing it moving forward.

77
00:04:45.660 --> 00:04:46.920
I'm not going to go through the menu.

78
00:04:46.920 --> 00:04:50.310
I'm just going to use my keyboard shortcut to access my developer tools.

79
00:04:51.060 --> 00:04:52.950
All right, so here's my developer tools.

80
00:04:52.950 --> 00:04:57.330
And after we install the view dev tools, we should see a separate view tab right here.

81
00:04:57.690 --> 00:05:02.400
And when we load this, it's going to load our view app and show us all of the components inside it.

82
00:05:02.580 --> 00:05:07.980
And what we can actually do here is select this little bullseye icon and that will allow us to click

83
00:05:07.980 --> 00:05:10.110
on a component on our page to select it.

84
00:05:10.290 --> 00:05:13.080
And I of course, want to select this main nav component.

85
00:05:13.080 --> 00:05:14.580
As I hover my mouse over it.

86
00:05:14.730 --> 00:05:19.350
We can actually see the view component appear in that little box as well as its height width.

87
00:05:19.560 --> 00:05:22.950
And if I click on this, it doesn't seem like it's at effect anything.

88
00:05:22.950 --> 00:05:23.820
Let me try to.

89
00:05:24.980 --> 00:05:27.410
Click components here and see if I can expand this.

90
00:05:27.440 --> 00:05:29.870
Let me try even refreshing the page.

91
00:05:30.860 --> 00:05:31.730
Sometimes there are errors.

92
00:05:31.730 --> 00:05:32.150
There we go.

93
00:05:32.150 --> 00:05:33.050
That's what I was looking for.

94
00:05:33.290 --> 00:05:37.820
So now when I refresh the page, you'll notice we have this app component and we also have this little

95
00:05:37.820 --> 00:05:39.410
collapse icon right here.

96
00:05:39.620 --> 00:05:44.720
And if I click add this down, you're going to see all of the components that are nested within our

97
00:05:44.720 --> 00:05:45.470
app component.

98
00:05:45.680 --> 00:05:48.980
And when we use the word nested, I mean that it lives inside it.

99
00:05:48.980 --> 00:05:52.370
So may now lives inside of our app component.

100
00:05:52.580 --> 00:05:57.950
It does so because we rendered main now within the template for our app component.

101
00:05:58.160 --> 00:06:01.190
So we call this relationship a parent child relationship.

102
00:06:01.190 --> 00:06:07.610
May NAV is a child component being rendered within the app parent component, right.

103
00:06:07.610 --> 00:06:14.270
We are rendering it within and in turn main NAV can render its own view components and those view components

104
00:06:14.270 --> 00:06:16.850
can in turn render their own child components.

105
00:06:16.970 --> 00:06:22.760
And the view dev tools will show us that entire heart hierarchy all the way down from the very top level

106
00:06:22.760 --> 00:06:28.340
component where our app kicks things off to all of the smaller components that it renders along the

107
00:06:28.340 --> 00:06:28.670
way.

108
00:06:28.790 --> 00:06:32.420
And of course, each time we use a component, it'll show up here in our dev tool.

109
00:06:32.450 --> 00:06:33.710
So if I go back to my.

110
00:06:35.020 --> 00:06:41.050
These code and I let's say copy and paste this to two lines below and I go back to my dovetails.

111
00:06:41.230 --> 00:06:47.680
You'll see now that we have the three main nav components appear in our DevTools and as I navigate and

112
00:06:47.680 --> 00:06:53.710
hover my mouse over, each option will see the equivalent may now highlight in the actual html right

113
00:06:53.710 --> 00:06:53.980
here.

114
00:06:53.980 --> 00:06:54.640
So here I am.

115
00:06:54.910 --> 00:06:58.300
And on the first one, here's the second one and here's the third one.

116
00:06:58.390 --> 00:06:58.720
All right.

117
00:06:58.720 --> 00:07:03.550
That's how we can select or preview any of our components that we're rendering as children.

118
00:07:03.670 --> 00:07:08.650
And then later on in DevTools will be able to adjust their configuration and see the immediate impact

119
00:07:08.650 --> 00:07:10.480
of our changes on the screen.

120
00:07:10.510 --> 00:07:12.340
That's the advantage of the view dev tools.

121
00:07:12.460 --> 00:07:15.340
It's like a debugging environment within our browser.

122
00:07:15.460 --> 00:07:17.860
All right, let's go back to our component.

123
00:07:17.860 --> 00:07:23.020
And the last thing I want to do to close this lesson off, of course, is return back to just one main

124
00:07:23.170 --> 00:07:24.610
component with an app view.

125
00:07:24.820 --> 00:07:28.150
Save this file, and that's all there is to cover in this lesson.

126
00:07:28.390 --> 00:07:29.680
I will see you next time.
