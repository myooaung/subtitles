WEBVTT
1
00:00:00.150 --> 00:00:07.110
All right, so in this lesson, we'll learn how to use our just testing library to mock out a complete

2
00:00:07.110 --> 00:00:07.800
module.

3
00:00:07.980 --> 00:00:11.750
Or, in other words, a complete library such as Axios.

4
00:00:12.090 --> 00:00:14.820
So here's a reminder of our job listings component.

5
00:00:14.820 --> 00:00:22.170
In this component, we are using the Access Library to fetch the list of 100 jobs from our mock backend

6
00:00:22.170 --> 00:00:23.310
running on JSON server.

7
00:00:23.730 --> 00:00:27.300
So this part is an asynchronous request to a separate service.

8
00:00:27.510 --> 00:00:34.380
And it's very important in our unit test for the job listings component that we do not actually go to

9
00:00:34.380 --> 00:00:39.300
this extremity when it comes to testing what the job listings component is supposed to do.

10
00:00:39.480 --> 00:00:46.050
We do not want to have a second service up and running just for a test because it's going to be slow,

11
00:00:46.320 --> 00:00:49.110
because it's going to create a coupling with this second service.

12
00:00:49.110 --> 00:00:55.020
It just makes the test a lot more difficult to set up and diagnose, and there's ways that we can simplify

13
00:00:55.020 --> 00:00:55.650
the unit test.

14
00:00:55.710 --> 00:00:59.850
So we really focus on what the responsibility of job listings is.

15
00:01:00.120 --> 00:01:06.000
The responsibility of job listings is to issue an API request, but we don't have to complete that whole

16
00:01:06.000 --> 00:01:06.930
API request.

17
00:01:06.930 --> 00:01:09.570
The test, the job listings has done its job.

18
00:01:09.690 --> 00:01:15.990
Instead, we can simply assert that job listings has talked to Axios, invoked its get method and provided

19
00:01:15.990 --> 00:01:16.950
the right URL.

20
00:01:17.160 --> 00:01:23.460
We can then fake the actual API request so that our test acts as if it made a full API request.

21
00:01:23.610 --> 00:01:25.260
But it doesn't instantaneously.

22
00:01:25.440 --> 00:01:30.630
It does it in an isolated environment and it does it again without coupling it to any kind of extra

23
00:01:30.630 --> 00:01:31.140
server.

24
00:01:31.140 --> 00:01:36.810
So our test is small, loose, lightweight and singularly focused on the job listings component.

25
00:01:37.110 --> 00:01:42.690
So the key takeaway here is we don't want to actually test the actual Axios library right here.

26
00:01:42.840 --> 00:01:47.130
We just want to test the interaction with it by the job listings component.

27
00:01:47.430 --> 00:01:51.510
But how can we simulate the Axios environment within a test?

28
00:01:51.780 --> 00:01:52.500
Well, let me show you.

29
00:01:52.830 --> 00:01:56.820
So let's begin by creating the test file for this job listings component.

30
00:01:57.120 --> 00:02:05.070
So right here, I'm going to go to tests unit and this is a component and we have our job results directory

31
00:02:05.070 --> 00:02:05.640
right here.

32
00:02:05.880 --> 00:02:11.790
And here's where I want to create my new job listings that test that JSE test suite.

33
00:02:12.750 --> 00:02:17.460
So we're going to come back to writing the actual test for the component in the next lesson.

34
00:02:17.460 --> 00:02:20.010
I just want to show you some cool features on AuntJess.

35
00:02:20.400 --> 00:02:24.780
So what I'm going to do here is I'm going to import the Axios library.

36
00:02:24.780 --> 00:02:30.030
This is the exact same library that we are importing in job listings, and then immediately after I'm

37
00:02:30.030 --> 00:02:35.700
going to console.log Axios and when the test runs, you're going to see what that object looks like

38
00:02:36.000 --> 00:02:37.080
in my terminal.

39
00:02:37.080 --> 00:02:42.330
So right here, if I expand this, you're going to see that this is the entire Axios object that we

40
00:02:42.330 --> 00:02:44.610
get when we import the Axios library.

41
00:02:44.790 --> 00:02:48.600
So this is the actual implementation of the library as it is built.

42
00:02:48.600 --> 00:02:53.340
If you were to go, for example, to the Axios GitHub or to dive into your node modules directory and

43
00:02:53.340 --> 00:02:56.400
look at the source code, it would be this exact Axios object.

44
00:02:56.790 --> 00:03:00.480
Now, again, we don't care about the complexities of this Axios object.

45
00:03:00.630 --> 00:03:05.040
We really just care that it has a get method right here that we can invoke.

46
00:03:05.640 --> 00:03:10.500
So you may recall that earlier in the course we talked about the idea of just mock functions.

47
00:03:10.500 --> 00:03:14.730
We can create them by simply just doing this just fine, which is short for function.

48
00:03:14.880 --> 00:03:16.440
And this creates a mock function.

49
00:03:16.650 --> 00:03:21.870
It's basically a function that can keep track of how many times it's been invoked with what arguments

50
00:03:21.870 --> 00:03:23.340
it's been invoked, etc..

51
00:03:23.730 --> 00:03:31.260
So wouldn't it be really cool if we could somehow take this existing access object and tell just to

52
00:03:31.290 --> 00:03:34.380
mock out every available functionality within it?

53
00:03:34.410 --> 00:03:34.740
Right.

54
00:03:34.950 --> 00:03:38.820
We would tell just, hey, we need an object that has a get method.

55
00:03:38.820 --> 00:03:43.530
That is a requirement because that is the actual public interface of the access library.

56
00:03:43.740 --> 00:03:47.910
So we need a get method, but I don't want to use the real Axios implementation.

57
00:03:48.120 --> 00:03:52.470
I just want you to replace the get method with the sample mock function.

58
00:03:52.710 --> 00:03:58.680
And in fact just wouldn't it be great if you could just go through this entire access object and replace

59
00:03:58.680 --> 00:04:02.130
every single one of these methods with your own just function.

60
00:04:02.130 --> 00:04:05.910
So replace request replace get your I replace delete replace.

61
00:04:05.910 --> 00:04:07.500
Get everything we see here.

62
00:04:07.680 --> 00:04:12.540
Wouldn't it be great if we can just get just to automate this and so we don't have to go through manually

63
00:04:12.540 --> 00:04:17.160
and you know, overwrite these properties and get into the internals of the access library.

64
00:04:17.310 --> 00:04:21.180
We can just tell access to or just rather to do it for us in one line.

65
00:04:21.180 --> 00:04:22.470
So let me show you how that's going to work.

66
00:04:22.470 --> 00:04:26.550
It's actually one of my favorite parts of the just library right here.

67
00:04:26.820 --> 00:04:33.090
What I'm going to do is I'm going to take my global just object, which is available in every just file.

68
00:04:33.390 --> 00:04:37.980
And on this object we have a method called mock.

69
00:04:38.490 --> 00:04:44.340
And to mock we can provide an argument of a string representing the library in a project that we would

70
00:04:44.340 --> 00:04:45.330
like to mock out.

71
00:04:45.570 --> 00:04:48.480
So in this case, I'd like to mock out my access library.

72
00:04:48.660 --> 00:04:51.700
So I'm just going to provide a string of Axios, all right.

73
00:04:51.700 --> 00:04:56.250
And I'm to save this file and take a look at what we have right here in our terminal right now.

74
00:04:56.250 --> 00:04:57.780
You'll notice it's a different output.

75
00:04:57.780 --> 00:04:58.950
It's going to be a little bit longer.

76
00:04:58.950 --> 00:04:59.850
But as I scroll up.

77
00:05:01.020 --> 00:05:06.030
You're going to see the beginning of this output and you'll notice it's basically the exact same object

78
00:05:06.030 --> 00:05:12.030
that we just saw from Axios, except that Gest has automatically replaced all of its properties and

79
00:05:12.030 --> 00:05:14.310
methods with its own custom functions.

80
00:05:14.550 --> 00:05:17.490
So here is that request method that we were just talking about.

81
00:05:17.730 --> 00:05:18.210
Here's that.

82
00:05:18.210 --> 00:05:19.500
Get your I method.

83
00:05:19.650 --> 00:05:20.730
Right here is delete.

84
00:05:20.730 --> 00:05:26.070
We were just talking about these methods a few moments ago, but we were seeing the original Axios object

85
00:05:26.070 --> 00:05:34.380
and the original methods now just has loop through all of that complexity and it has replaced that functionality

86
00:05:35.040 --> 00:05:36.330
with its own mock function.

87
00:05:36.630 --> 00:05:39.780
So in the test suite we can use Axios regularly.

88
00:05:39.780 --> 00:05:44.790
We can still, for example, do Axios that get, which is an available method and we can invoke it just

89
00:05:44.790 --> 00:05:46.440
like a regular.

90
00:05:47.930 --> 00:05:48.960
Axios get method.

91
00:05:49.130 --> 00:05:53.360
But keep in mind, what we're working with here is no longer the original Axios library.

92
00:05:53.510 --> 00:06:00.140
It is now a marked out version of that library with fake mock functions attached in place of the original

93
00:06:00.140 --> 00:06:00.500
methods.

94
00:06:00.740 --> 00:06:05.510
And so if we could do this for the purposes of our test, this would be great, because now when we

95
00:06:05.510 --> 00:06:11.210
mount our component, we're going to swap the real Axios with this fake Axios, and we can test the

96
00:06:11.210 --> 00:06:14.720
interaction with the get method, which we're using in the real component.

97
00:06:14.930 --> 00:06:20.090
But now GET is going to be a mock function that can track how many times it's been called.

98
00:06:20.390 --> 00:06:26.000
So all we can do is mount the component and verify that Axios get has been called with the right API

99
00:06:26.000 --> 00:06:31.580
address and we're going to successfully test the interaction of the component with our Axios library

100
00:06:31.700 --> 00:06:38.990
without using the real Axios library, but rather a smaller substitute that is good enough to play that

101
00:06:38.990 --> 00:06:39.350
role.

102
00:06:39.830 --> 00:06:40.160
All right.

103
00:06:40.340 --> 00:06:44.720
So we're going to see how we can write an appropriate test for this component in the very next lesson.
