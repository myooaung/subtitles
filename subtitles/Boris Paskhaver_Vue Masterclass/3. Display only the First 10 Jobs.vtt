WEBVTT
1
00:00:00.240 --> 00:00:01.200
All right.

2
00:00:01.200 --> 00:00:08.280
So now that we know about this slice method on an array, we can use it on our jobs array in the job

3
00:00:08.310 --> 00:00:09.540
listings component.

4
00:00:09.840 --> 00:00:13.800
What I propose we do is just display the first ten jobs for now.

5
00:00:13.920 --> 00:00:19.290
And then later on, we'll figure out how to display a certain batch of ten based on the page that we're

6
00:00:19.290 --> 00:00:19.530
on.

7
00:00:19.680 --> 00:00:26.100
For now, let's just limit our original results set of 100 jobs to ten to think about how we might build

8
00:00:26.100 --> 00:00:27.270
this architecture out.

9
00:00:27.630 --> 00:00:31.710
So where is a good place to slice the original jobs array?

10
00:00:32.040 --> 00:00:38.400
Well, I would argue a bad place to do it is right here in the mounted lifecycle hook because if we

11
00:00:38.400 --> 00:00:43.080
slice the array that we receive right here, we're going to lose all of the original data.

12
00:00:43.230 --> 00:00:48.710
We might get an array of 100, but then it will limit it to an array of ten and save the jobs.

13
00:00:48.870 --> 00:00:54.510
And it will have no way of getting back the original 90 unless we make another API request.

14
00:00:54.690 --> 00:00:56.330
And that's generally not a good idea.

15
00:00:56.340 --> 00:01:01.080
We want to reduce the amount of requests we send and if we're going to get a batch of 100 up front,

16
00:01:01.230 --> 00:01:06.330
I think we should find some way to keep it or to cash it, in other words, and then simply go into

17
00:01:06.330 --> 00:01:11.940
that array and take out a fresh batch of ten jobs from that existing data as the user navigates to a

18
00:01:11.940 --> 00:01:12.570
different page.

19
00:01:12.840 --> 00:01:17.190
So right here, I don't think it's a good place for us to use the sliced method.

20
00:01:17.610 --> 00:01:23.550
So what we fundamentally have is a job's slice of data, and we have something else that is a smaller

21
00:01:23.550 --> 00:01:28.980
subset of it, or in other words, a derived smaller section of the original data.

22
00:01:29.340 --> 00:01:33.330
So what I'm looking for here is a computed property, right?

23
00:01:33.540 --> 00:01:37.170
Because a computed property is designed precisely for this kind of purpose.

24
00:01:37.170 --> 00:01:39.210
We don't want to duplicate the original data.

25
00:01:39.390 --> 00:01:45.360
And even if we take a subset of ten elements out of an original array, we're still fundamentally duplicating

26
00:01:45.360 --> 00:01:46.280
the original data.

27
00:01:46.290 --> 00:01:46.520
Right?

28
00:01:46.530 --> 00:01:48.990
It's just a smaller view of an original object.

29
00:01:49.170 --> 00:01:54.900
We don't want to do that because then we have to separate identical batches of ten job objects floating

30
00:01:54.900 --> 00:01:56.250
around somewhere in an application.

31
00:01:56.460 --> 00:02:01.110
We only want one source of truth, which is going to be our jobs array of 100 jobs.

32
00:02:01.320 --> 00:02:07.470
But our computed property can be a dynamic derived calculation that is always looking at the jobs array

33
00:02:07.470 --> 00:02:12.750
and using that as the basis from which to extract a smaller array of ten elements.

34
00:02:13.020 --> 00:02:19.080
And then in our V for loop right here, if we iterate over that computed property of jobs instead of

35
00:02:19.080 --> 00:02:24.870
the original batch of 100, we'll be able to iterate over whatever ten jobs that computed property returns.

36
00:02:25.200 --> 00:02:28.860
So let me show you how that's going to work right here below our data method.

37
00:02:28.860 --> 00:02:30.570
I'll define my computed object.

38
00:02:30.840 --> 00:02:34.980
So computed is going to be an object and I'll define a method on here.

39
00:02:35.980 --> 00:02:38.110
Called displayed jobs.

40
00:02:38.680 --> 00:02:43.570
Because the difference between this these jobs, rather, and these jobs is this is all my original

41
00:02:43.570 --> 00:02:43.930
jobs.

42
00:02:44.080 --> 00:02:46.300
These are the jobs that I want to display.

43
00:02:46.660 --> 00:02:52.300
So what I'm going to do is I'm going to return and I'm going to reference my jobs that are property

44
00:02:52.300 --> 00:02:53.920
which I can do via this keyword.

45
00:02:53.930 --> 00:02:59.530
So this that jobs gives me that array of 100 jobs once the back end returns its data and I save it.

46
00:02:59.800 --> 00:03:03.550
And what I want to do is invoke the slice method to get just the first ten.

47
00:03:03.880 --> 00:03:09.760
So what I can do here is start at index zero and pull up to but not including index position ten.

48
00:03:10.030 --> 00:03:10.360
All right.

49
00:03:10.570 --> 00:03:13.090
Remember that index ten will not be included.

50
00:03:13.120 --> 00:03:17.170
So this will actually be an array of just the first ten jobs index positions.

51
00:03:17.320 --> 00:03:21.560
0123456789.

52
00:03:21.580 --> 00:03:23.510
That is a total of ten jobs.

53
00:03:23.530 --> 00:03:23.950
All right.

54
00:03:24.310 --> 00:03:31.510
So then up here, instead of iterating over my regular job's array of 100, I now want to iterate over

55
00:03:31.510 --> 00:03:37.780
my display jobs computed array, which is still an array so we can still iterate over it using v four.

56
00:03:38.020 --> 00:03:41.680
And we don't have to change anything else because the jobs id can be the key.

57
00:03:41.920 --> 00:03:46.720
The job object is still the prop that we want to pass into the job listing opponent.

58
00:03:46.840 --> 00:03:49.240
Nothing has changed except what we are iterating over.

59
00:03:49.360 --> 00:03:53.560
And now it's a smaller subset of ten jobs instead of the original 100.

60
00:03:53.860 --> 00:03:56.350
So I do want to head to the browser to look at this.

61
00:03:56.620 --> 00:04:01.330
But before I do that, I actually want to run a test sweep because we're going to discover that a certain

62
00:04:01.330 --> 00:04:02.350
test is failing.

63
00:04:02.620 --> 00:04:08.290
So right here, I'm going to open up my terminal and I'm going to run NPM, run, test watch.

64
00:04:08.740 --> 00:04:12.550
That's going to take a look at anything that has changed and any tests that are related to it.

65
00:04:12.820 --> 00:04:14.680
So this should run the relevant test files.

66
00:04:14.890 --> 00:04:17.590
In our case, it's going to be the job listings, that test component.

67
00:04:17.740 --> 00:04:20.190
And your note, you'll notice we're going to have a failure.

68
00:04:20.200 --> 00:04:22.510
So I'm going to open up that file.

69
00:04:22.810 --> 00:04:24.940
Job listings, plural.

70
00:04:25.150 --> 00:04:25.740
Test that.

71
00:04:25.760 --> 00:04:26.160
Yes.

72
00:04:26.500 --> 00:04:30.700
And it's actually going to come if we scroll up, it's going to come from this one.

73
00:04:30.700 --> 00:04:33.340
Creates a job listing for each received jobs.

74
00:04:33.610 --> 00:04:39.820
You'll notice here in our test we expect job listings to have a length of 15, which is the original

75
00:04:40.210 --> 00:04:42.280
array of data that we specify right here.

76
00:04:42.290 --> 00:04:46.780
We created an array of 15 elements and thus we expect to display 15.

77
00:04:46.930 --> 00:04:49.960
But now our apps logic does not work in that way.

78
00:04:50.110 --> 00:04:56.020
If we receive an array of 15 elements, we only want to display the first ten, right?

79
00:04:56.200 --> 00:05:00.340
So instead of keeping the original description, I think I'm going to change this one instead of it

80
00:05:00.340 --> 00:05:02.350
creates a job listing for each received job.

81
00:05:02.500 --> 00:05:05.410
I can say something like creates a job listing.

82
00:05:07.500 --> 00:05:10.170
For a maximum of ten jobs.

83
00:05:11.190 --> 00:05:12.930
Because that is our actual business logic.

84
00:05:12.930 --> 00:05:14.940
So I'm comfortable putting it here in the description.

85
00:05:15.270 --> 00:05:21.360
So if I get an array of 15 objects, I only expect to get ten elements on my component with this data

86
00:05:21.360 --> 00:05:24.360
test attribute or in other words, ten job listing components.

87
00:05:24.570 --> 00:05:28.800
So if I save this, hopefully the tests pass and indeed they do.

88
00:05:28.800 --> 00:05:29.880
And indeed we have.

89
00:05:30.390 --> 00:05:30.660
We do.

90
00:05:30.750 --> 00:05:35.100
We now do have a test that is capturing that core bit of business logic that has now changed.

91
00:05:35.340 --> 00:05:40.050
So with that, I feel good and I can navigate back to my browser and we could take a look at this page.

92
00:05:40.050 --> 00:05:41.430
Let me just refresh it to be safe.

93
00:05:42.240 --> 00:05:42.690
All right.

94
00:05:42.810 --> 00:05:43.660
And we scroll down.

95
00:05:43.680 --> 00:05:49.680
One, two, three, four, five, six, seven, eight, nine, ten.

96
00:05:49.830 --> 00:05:54.930
And perfectly we have reached the end of the page and we only show the first ten jobs.

97
00:05:55.140 --> 00:06:01.380
Now, if I had to view dev tools, just so you don't worry and let me bring this down to my bottom right

98
00:06:01.380 --> 00:06:01.710
here.

99
00:06:02.160 --> 00:06:02.400
All right.

100
00:06:02.400 --> 00:06:05.310
If I go to my view dev tools and I take a look at my components.

101
00:06:06.360 --> 00:06:14.010
In my job results view in my job listings, you'll notice we have our data with the 100 array 100 element

102
00:06:14.010 --> 00:06:16.920
array of jobs, so we have not lost the original data.

103
00:06:16.980 --> 00:06:18.630
It is still here, it is available.

104
00:06:18.750 --> 00:06:21.540
We can create a new slice from it as we need to.

105
00:06:21.720 --> 00:06:27.060
However, our completed property now has a subset of that the ten jobs that we are displaying right

106
00:06:27.060 --> 00:06:27.900
here on our page.

107
00:06:28.290 --> 00:06:33.090
So moving forward, as you can probably guess, the steps for creating page two is to simply tell our

108
00:06:33.090 --> 00:06:39.150
computed property to calculate a different batch of ten jobs, the next sequence of ten from our original

109
00:06:39.360 --> 00:06:40.380
jobs data rate.

110
00:06:40.500 --> 00:06:43.980
And we never have to make another request to the back end to get the original data.

111
00:06:44.100 --> 00:06:47.670
It is preserved, it is cached, is stored in our job listings component.

112
00:06:47.880 --> 00:06:52.980
We're just going to change what is shown on the screen by using the computed property displayed jobs.

113
00:06:53.130 --> 00:06:53.520
All right.

114
00:06:53.760 --> 00:06:55.320
That's all there is to cover in this lesson.

115
00:06:55.320 --> 00:06:56.820
So I will see you in the next one.
