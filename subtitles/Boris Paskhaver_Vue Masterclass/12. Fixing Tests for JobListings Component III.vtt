WEBVTT
1
00:00:00.420 --> 00:00:01.260
Okay.

2
00:00:01.260 --> 00:00:06.570
So in this lesson, we're going to do a small refactor for our job listings test suite.

3
00:00:06.840 --> 00:00:12.570
We're going to create a new factory function to create a sample mock store object.

4
00:00:12.870 --> 00:00:17.520
It's going to work very similarly to how our create root factory function works.

5
00:00:17.760 --> 00:00:25.260
Our create root function creates a sample root mock object, which we then provide to our create config

6
00:00:25.260 --> 00:00:30.690
function so that that object can represent the dollar sign root property in our component.

7
00:00:30.990 --> 00:00:37.110
And the idea behind a factory function like this is if a component simply wants some kind of root object

8
00:00:37.110 --> 00:00:43.380
to exist and it doesn't care about its details, it can invoke create root and it can provide no argument

9
00:00:43.560 --> 00:00:48.390
because query params right here, it will fall back to an empty object and then it's just going to get

10
00:00:48.390 --> 00:00:55.410
the sample root object with a query property, a page property, etc. However, if a test does care

11
00:00:55.410 --> 00:01:01.230
about the query params, it can provide its own object here and customize what those nested properties

12
00:01:01.230 --> 00:01:01.500
are.

13
00:01:01.830 --> 00:01:07.500
So if I scroll down here, we can see here is a test that customizes how create root works and provide

14
00:01:07.510 --> 00:01:08.460
some sample params.

15
00:01:08.670 --> 00:01:14.910
And if I scroll further down here we'll see a different use of the query params etc. So we kind of have

16
00:01:14.910 --> 00:01:21.240
a fallback factory object to go back to, but we can also allow each test to customize it.

17
00:01:21.240 --> 00:01:27.120
If it cares about a specific property, we're going to do the exact same approach for our store creation

18
00:01:27.120 --> 00:01:30.750
and we're going to see how that can reduce some of the lines in our tests.

19
00:01:31.140 --> 00:01:36.540
So right below, Create Root, I'm going to create a new arrow function called Create Store.

20
00:01:37.990 --> 00:01:43.960
And create store is going to accept a single parameter and I'm going to call it config and I'm going

21
00:01:43.960 --> 00:01:48.160
to set config to have a default argument of an empty JavaScript object.

22
00:01:48.520 --> 00:01:52.870
And then from Create Store, I'm going to return a JavaScript object.

23
00:01:53.080 --> 00:01:57.910
So in order to automatically return it, I can use the parentheses and the curly braces here for my

24
00:01:57.910 --> 00:01:58.390
object.

25
00:01:58.990 --> 00:02:04.630
And what I'm going to put in this store is the exact same properties we have right here.

26
00:02:04.660 --> 00:02:06.580
So I'm just going to copy this code directly.

27
00:02:08.080 --> 00:02:09.490
And I'm going to put it in here.

28
00:02:10.360 --> 00:02:13.600
So we're always going to return an object with state and dispatch properties.

29
00:02:13.780 --> 00:02:20.080
However, what I'm going to do on the next line is I'm going to D structure the config object that a

30
00:02:20.080 --> 00:02:23.050
test has the has the opportunity to pass in.

31
00:02:23.410 --> 00:02:29.170
So the advantage of this approach is if some test wants to give me a configuration object with its own

32
00:02:29.170 --> 00:02:33.550
state property or with its own dispatch property, it totally can.

33
00:02:33.670 --> 00:02:39.490
And then we're going to overwrite these default values for those properties using the values from config.

34
00:02:39.820 --> 00:02:43.780
So I am still going to allow each test to customize what a store looks like.

35
00:02:44.020 --> 00:02:49.420
However, if a test does not care about those properties, then I'm going to fall back to a reasonable

36
00:02:49.420 --> 00:02:49.900
default.

37
00:02:49.930 --> 00:02:55.690
I'm going to have a state with a jobs property with an array of 15 and a dispatch method are set to

38
00:02:55.690 --> 00:02:56.460
adjust function.

39
00:02:56.470 --> 00:02:56.760
Right.

40
00:02:56.950 --> 00:03:02.710
So in theory, a test could simply use create store with no arguments and use that store and it would

41
00:03:02.710 --> 00:03:03.310
still work.

42
00:03:03.460 --> 00:03:06.010
But if it wants to go a little bit more custom, it can.

43
00:03:06.460 --> 00:03:10.480
Okay, so now let's use this create store function wherever we'd like.

44
00:03:10.510 --> 00:03:16.390
So I'm going to scroll down and as we go through every test we have to think about, do we want that

45
00:03:16.390 --> 00:03:19.330
test to specify what the state looks like?

46
00:03:19.330 --> 00:03:19.510
Right.

47
00:03:19.540 --> 00:03:20.470
Do we care about that?

48
00:03:20.800 --> 00:03:26.500
So in this first test, you'll notice we have a store constant right here.

49
00:03:26.650 --> 00:03:33.790
So we could totally replace this by simply doing const dollar sign store and invoking that create store

50
00:03:33.790 --> 00:03:35.770
function that we just created above.

51
00:03:35.890 --> 00:03:39.880
And this function will return this exact same object that we have right here.

52
00:03:40.180 --> 00:03:45.700
And I can prove to you that if I save this and the we re runs, we're still going to get a passing test

53
00:03:45.700 --> 00:03:45.970
suite.

54
00:03:46.210 --> 00:03:48.340
So that that works exactly as expected.

55
00:03:48.340 --> 00:03:51.490
And we can remove some of this redundancy from this test.

56
00:03:51.730 --> 00:03:58.060
However, I still would like to ask the question does the in line declaration of a store, even if it

57
00:03:58.060 --> 00:04:04.900
is the exact same as the one in our default factory up above, does it help a future reader understand

58
00:04:04.900 --> 00:04:07.000
the context of the test?

59
00:04:07.300 --> 00:04:13.300
So in this test, for example, we want to verify that we are only displaying ten jobs no matter how

60
00:04:13.300 --> 00:04:15.100
many jobs we actually have in our store.

61
00:04:15.370 --> 00:04:22.150
And so if a reader doesn't understand, they have to scroll back up to see that our store has 15 jobs

62
00:04:22.150 --> 00:04:26.680
right here in order to verify that we are only displaying ten.

63
00:04:26.920 --> 00:04:30.730
So I think it is actually beneficial to tell the reader that we have 15.

64
00:04:30.940 --> 00:04:37.450
So I propose that instead of simply invoking Create Store, we invoke it with our sample configuration

65
00:04:37.450 --> 00:04:38.050
object, right?

66
00:04:38.290 --> 00:04:43.270
This is the argument that we're going to pass in right here where we can customize the properties we

67
00:04:43.270 --> 00:04:43.840
care about.

68
00:04:44.080 --> 00:04:50.470
And I'm going to provide it the exact same state I have right here, which is the exact same state I

69
00:04:50.470 --> 00:04:52.000
have in my store anyway.

70
00:04:52.240 --> 00:04:53.680
I understand the redundancy.

71
00:04:53.830 --> 00:05:00.490
However, I feel that this better communicates that we have 15 jobs and better explains why the test

72
00:05:00.490 --> 00:05:02.920
matters and why and how it's set up.

73
00:05:03.040 --> 00:05:05.140
We have 15 jobs were only displaying ten.

74
00:05:05.410 --> 00:05:08.200
Do I want to provide a custom value for dispatch?

75
00:05:08.380 --> 00:05:13.810
In this scenario, I argue no, because this test doesn't care about what the dispatch property is.

76
00:05:14.020 --> 00:05:17.590
However, it's still going to fall back to the default right here.

77
00:05:17.770 --> 00:05:22.390
And that's going to be great because our mounted lifecycle hook, which needs a dispatch method, will

78
00:05:22.390 --> 00:05:23.230
still work.

79
00:05:23.440 --> 00:05:26.400
However, this test doesn't care about dispatch.

80
00:05:26.410 --> 00:05:28.660
It just cares about how many jobs are in the store.

81
00:05:28.960 --> 00:05:34.540
So what I'm trying to do here is have whatever information I care about still in line, even if it is

82
00:05:34.540 --> 00:05:37.660
duplicated, even if I'm using my trade store factory function.

83
00:05:37.840 --> 00:05:43.570
I want to allow future developers to not have to scroll up to understand what is going on.

84
00:05:43.750 --> 00:05:44.050
Right.

85
00:05:44.200 --> 00:05:50.350
In fact, if I want it to be even more specific, one thing we can do here is provide a variable for

86
00:05:50.350 --> 00:05:54.280
this value right here, because otherwise this is what's called a magic number.

87
00:05:54.460 --> 00:05:58.930
A future reader might be looking at this and saying, What does 15 represent and why does it matter?

88
00:05:59.110 --> 00:06:06.370
I could, for example, simply add a constant here like number of jobs in store set to 15, and even

89
00:06:06.370 --> 00:06:08.770
a test like this, I argue, is better off.

90
00:06:09.580 --> 00:06:13.660
And the reason it's better is because now I'm kind of communicating a story, right?

91
00:06:13.690 --> 00:06:18.910
We have a certain number of jobs in store in our view X Store, which is 15, but I'm only displaying

92
00:06:18.910 --> 00:06:21.670
ten and the reader doesn't have to scroll up or scroll down.

93
00:06:21.850 --> 00:06:23.750
They just know we're creating some kind of store.

94
00:06:23.830 --> 00:06:29.440
But we are customizing part of a state, so hopefully and communicate exactly what the benefit is of

95
00:06:29.440 --> 00:06:30.070
this approach.

96
00:06:30.610 --> 00:06:33.550
What I'm trying to just explain what's exactly is going on.

97
00:06:33.740 --> 00:06:33.970
Right.

98
00:06:34.210 --> 00:06:37.540
Let me give you a comparison example that scroll down to the next test.

99
00:06:38.780 --> 00:06:42.980
We can see when create params exclude page number, it displays page number one.

100
00:06:43.190 --> 00:06:47.780
So this in my mind is a test that doesn't even care about how many jobs there are in the store.

101
00:06:47.960 --> 00:06:50.240
It doesn't care about a dispatch method.

102
00:06:50.240 --> 00:06:50.450
Right?

103
00:06:50.570 --> 00:06:55.370
It just needs some store to exist because we need some amount of jobs in order to be able to slice that

104
00:06:55.370 --> 00:06:57.680
array and in order to have a dispatch method.

105
00:06:57.830 --> 00:06:59.900
But this test doesn't care about any of that.

106
00:07:00.080 --> 00:07:06.200
So this is a perfect example where in this test we can totally simply call the create store factory

107
00:07:06.200 --> 00:07:09.080
function and not care about its internals.

108
00:07:09.320 --> 00:07:13.790
We're just going to assume that that helper factory is setting up whatever we need for create config

109
00:07:13.790 --> 00:07:14.210
to work.

110
00:07:14.390 --> 00:07:19.130
But this test still reads logically and communicates to the reader what matters.

111
00:07:19.130 --> 00:07:21.200
We need a root object for dollar sign root.

112
00:07:21.350 --> 00:07:23.390
We need a store object for dollar sign store.

113
00:07:23.510 --> 00:07:26.570
We're creating it somewhere in a wrapper around our component.

114
00:07:26.570 --> 00:07:27.920
We need the text page one.

115
00:07:28.070 --> 00:07:28.430
Right.

116
00:07:28.610 --> 00:07:31.370
And that to me still reads logically and communicates the intent.

117
00:07:31.520 --> 00:07:35.240
We communicate that the story doesn't really affect the fact that we're going to see page one.

118
00:07:35.360 --> 00:07:37.100
We're going to see page one no matter what.

119
00:07:37.280 --> 00:07:37.610
Right.

120
00:07:38.300 --> 00:07:41.930
Same principle for the test below if I scroll down.

121
00:07:43.700 --> 00:07:44.270
Right here.

122
00:07:44.420 --> 00:07:48.920
This one has to deal with when create params in our URL bar include page number.

123
00:07:49.010 --> 00:07:51.320
We don't care about what the store looks like in this shape.

124
00:07:51.740 --> 00:07:53.150
We don't care what the method looks like.

125
00:07:53.150 --> 00:07:54.320
We just need some store.

126
00:07:54.530 --> 00:07:57.590
So perfectly use case to simply invoke create store right here.

127
00:07:59.390 --> 00:07:59.810
All right.

128
00:08:00.170 --> 00:08:02.630
Same deal for the thing below.

129
00:08:02.660 --> 00:08:08.990
When the user's on the first page of job results, it does not have link to the the previous page.

130
00:08:09.050 --> 00:08:09.680
Perfect.

131
00:08:09.800 --> 00:08:10.770
We don't care about here.

132
00:08:10.790 --> 00:08:12.050
So right here, I'm gonna replace this.

133
00:08:12.050 --> 00:08:13.340
Will they call it to create store?

134
00:08:15.840 --> 00:08:18.330
Now the test down below is a little bit more tricky.

135
00:08:18.570 --> 00:08:21.470
This is when the user is on the first page of job results.

136
00:08:21.480 --> 00:08:23.220
Its show is linked to the next page.

137
00:08:23.430 --> 00:08:26.730
This is only true if we have extra jobs to show, right?

138
00:08:26.940 --> 00:08:33.660
So in this scenario, I do think it is beneficial to tell the reader that we have 15 jobs so that on

139
00:08:33.660 --> 00:08:39.030
page one the reader can understand, oh, we still have five more jobs to show on page two.

140
00:08:39.150 --> 00:08:40.980
That's why the next page exists.

141
00:08:41.220 --> 00:08:47.010
So again, we can kind of debate whether it is necessary to repeat our state in every test.

142
00:08:47.190 --> 00:08:49.110
I always air on the side of caution.

143
00:08:49.110 --> 00:08:51.810
If I think it can help somebody, I tend to leave it in.

144
00:08:52.140 --> 00:08:57.840
So right here I'm going to invoke create store and I'm going to pass in this object.

145
00:08:57.930 --> 00:09:00.750
And again, do we care about dispatch when it comes to the store?

146
00:09:00.930 --> 00:09:01.440
No.

147
00:09:01.470 --> 00:09:04.280
So this is kind of misleading our fellow reader.

148
00:09:04.290 --> 00:09:06.090
They shouldn't care about what dispatch does.

149
00:09:06.240 --> 00:09:11.160
For the purposes of this test, they only care that we have at least 15 jobs to communicate, that we

150
00:09:11.160 --> 00:09:12.330
will have a page, too.

151
00:09:12.600 --> 00:09:15.330
So this is kind of how I would structure a test like this.

152
00:09:15.570 --> 00:09:17.450
Obviously, this is not a science.

153
00:09:17.460 --> 00:09:21.180
It is sort of up to each person to determine where they think they should include this data.

154
00:09:21.360 --> 00:09:23.970
But I'm always there on the side of caution.

155
00:09:24.710 --> 00:09:30.110
Finally, let's scroll down to our last described block when the users on the last page of job results.

156
00:09:30.320 --> 00:09:36.050
In this scenario, I think that I do want to once again include the information about having 15 jobs.

157
00:09:36.290 --> 00:09:41.210
Then I sort of communicate that I am on page two right here and the user can figure out that they have

158
00:09:41.210 --> 00:09:41.900
15 jobs.

159
00:09:42.020 --> 00:09:44.120
So we must be on the last page of results.

160
00:09:44.330 --> 00:09:49.550
There is some amount of assumption to be made and maybe, like I said earlier, I can extract things

161
00:09:49.550 --> 00:09:52.850
like this to a helper constant that communicates my intent.

162
00:09:53.030 --> 00:09:57.410
But again, those are all optimizations that you can think about if you want to get, you know, the

163
00:09:57.410 --> 00:09:58.820
best possible test what you can.

164
00:09:59.090 --> 00:10:01.550
For now, I'm just going to remove this dispatch call.

165
00:10:01.730 --> 00:10:03.620
I'm going to wrap this in a create store call.

166
00:10:05.640 --> 00:10:06.450
And leave it like.

167
00:10:06.450 --> 00:10:08.790
So I do want to communicate that I have 15 jobs.

168
00:10:08.880 --> 00:10:10.920
So that page two represents the final page.

169
00:10:11.130 --> 00:10:16.080
Same deal here when the users on the last page of job results, it shows links to previous page.

170
00:10:16.230 --> 00:10:19.800
I do want to communicate that I'm on the last page of job results, so I do want to communicate that

171
00:10:19.800 --> 00:10:20.850
I have 15 jobs.

172
00:10:21.150 --> 00:10:26.280
So I'm going to wrap this in a create store function called and I'm going to remove my dispatch since

173
00:10:26.280 --> 00:10:27.390
I don't care about that.

174
00:10:28.300 --> 00:10:28.930
Save that.

175
00:10:30.260 --> 00:10:32.120
And everything should pass perfect.

176
00:10:32.450 --> 00:10:37.910
So again, technically, we can get every single test in this test we to pass by simply invoking create

177
00:10:37.910 --> 00:10:44.150
store with no custom arguments because we're simply going to fall back to the default implementation

178
00:10:44.150 --> 00:10:45.860
of having this logic right here.

179
00:10:45.980 --> 00:10:47.390
And every test would still pass.

180
00:10:47.570 --> 00:10:51.740
I'm going to leave it up to you as far as whether you want to do that, to have less lines of code.

181
00:10:52.040 --> 00:10:54.080
But I would I will leave you with the final thought.

182
00:10:54.120 --> 00:10:58.780
As I mentioned before, I don't always worry about having the smallest lines of code.

183
00:10:58.790 --> 00:11:00.650
I don't think that's a good metric to measure by.

184
00:11:00.860 --> 00:11:02.390
I worry about readability.

185
00:11:02.540 --> 00:11:07.730
I worry whether my tests are communicating to myself and other developers what we're testing, how it's

186
00:11:07.730 --> 00:11:10.610
being set up, which pieces matter, etc..

187
00:11:10.850 --> 00:11:14.330
So I'm not always going to try to cut down to the smallest number of lines of code.

188
00:11:14.480 --> 00:11:17.540
I'm going to try to write the best descriptive test that I can.

189
00:11:17.720 --> 00:11:17.990
All right.

190
00:11:18.140 --> 00:11:22.070
And that's why I prefer to repeat this logic right here in a test.

191
00:11:22.250 --> 00:11:26.420
If I feel that a better communicates what is needed for that test to pass.

192
00:11:26.690 --> 00:11:27.020
All right.

193
00:11:27.260 --> 00:11:28.850
That's all there is to cover in this lesson.

194
00:11:28.910 --> 00:11:30.470
So I will see you in the next one.
