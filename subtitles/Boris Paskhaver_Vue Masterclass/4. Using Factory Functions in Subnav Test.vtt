WEBVTT
1
00:00:00.210 --> 00:00:01.050
All right.

2
00:00:01.050 --> 00:00:06.810
So while we are here in this sub NAB, that test file, we can do a small refactor, we can try to get

3
00:00:06.810 --> 00:00:10.470
rid of the duplication by creating another factory function.

4
00:00:10.740 --> 00:00:15.480
As a reminder, a factory function is just a function that produces a consistent output.

5
00:00:15.750 --> 00:00:21.660
In this case, I want to produce whatever the two tests have in common, and once again, the majority

6
00:00:21.660 --> 00:00:24.750
of that shared code is really this chunk right here.

7
00:00:24.930 --> 00:00:30.330
It is the set up of the configuration object with the global property and the Marx property, etc..

8
00:00:30.660 --> 00:00:37.320
Now the key difference between this configuration object and this one is of course, the root property.

9
00:00:37.470 --> 00:00:43.290
Here we have a name property set to home, and here we have a name property set to job results.

10
00:00:43.470 --> 00:00:46.470
And I do need to preserve that difference between the two tests.

11
00:00:46.710 --> 00:00:50.340
But other than that, the config objects are identical.

12
00:00:50.550 --> 00:00:53.250
So here's how I can address that issue right here.

13
00:00:53.820 --> 00:00:58.830
Outside of both of my described blocks, because I want this function to be invoked both from any one

14
00:00:58.830 --> 00:01:03.390
of those described blocks, I'll create a new function, I'll call it create config.

15
00:01:03.960 --> 00:01:09.330
And what I'll allow it to receive as a parameter will be the root name.

16
00:01:10.360 --> 00:01:10.630
All right.

17
00:01:10.630 --> 00:01:14.710
And that allows me to feed in a custom route name from every test.

18
00:01:15.130 --> 00:01:19.330
So here I'm going to use my syntax to implicitly return an object.

19
00:01:19.330 --> 00:01:24.490
So it's going to be the parentheses followed by the curly braces for a JavaScript object.

20
00:01:24.670 --> 00:01:29.080
So I am returning an object as the return value of the create config function.

21
00:01:29.380 --> 00:01:31.510
And I'm just going to copy this thing right here.

22
00:01:32.860 --> 00:01:33.880
And paste in here.

23
00:01:34.390 --> 00:01:39.430
So we have just about our whole config object, except of course we need to provide a value for this

24
00:01:39.430 --> 00:01:41.110
dollar sign root property.

25
00:01:41.440 --> 00:01:43.210
And what I can do is make this an object.

26
00:01:44.260 --> 00:01:48.130
And in that object, I know I'm going to need to have a name, property.

27
00:01:48.130 --> 00:01:48.880
So name.

28
00:01:49.270 --> 00:01:55.630
And I will set name equal to the value coming from my root name parameter.

29
00:01:55.900 --> 00:02:00.430
So the user is just going to give me a single string as the argument and then we're going to set that

30
00:02:00.430 --> 00:02:02.710
string as the value for the name of property.

31
00:02:03.040 --> 00:02:06.310
So the way it's going to look below is I can now do this.

32
00:02:06.580 --> 00:02:08.110
I can get rid of this root right here.

33
00:02:09.520 --> 00:02:11.980
And I can define a constant like root name.

34
00:02:11.980 --> 00:02:15.100
And it'll just be this single string of job results.

35
00:02:15.910 --> 00:02:22.090
And here, instead of providing the entire configuration object, I will invoke the helper function

36
00:02:22.090 --> 00:02:28.120
from above, which is create config and I'll invoke it and pass in my root name, which in this case

37
00:02:28.120 --> 00:02:29.140
will be job results.

38
00:02:29.470 --> 00:02:33.940
So it'll create the complete object and provide job results right here in line ten.

39
00:02:34.120 --> 00:02:37.190
Otherwise, we have the exact same config object as we as we use.

40
00:02:37.210 --> 00:02:40.310
So nothing is changing as far as the logic of the tests.

41
00:02:40.330 --> 00:02:45.880
We're just removing some of that duplication and isolating it to this helper helper factory function.

42
00:02:46.150 --> 00:02:51.190
And the reason I like this approach, as I mentioned earlier, is I'm keeping my mount in my test so

43
00:02:51.190 --> 00:02:52.660
I know what it is that I'm doing.

44
00:02:52.900 --> 00:02:54.610
I know what it is that I'm testing.

45
00:02:54.850 --> 00:02:59.770
And I'm still providing another reader with the context that what matters here is the root name being

46
00:02:59.770 --> 00:03:00.610
job results.

47
00:03:00.880 --> 00:03:05.650
The reader doesn't really have to worry about this complex configuration object and all those internals.

48
00:03:05.890 --> 00:03:08.890
If they're curious about it, they can scroll up and find out more.

49
00:03:09.160 --> 00:03:13.120
But for the purposes of communicating the test, I'm saying, Hey, there's a root name.

50
00:03:13.240 --> 00:03:14.920
We're going to feed that into our config.

51
00:03:14.920 --> 00:03:20.500
So it probably makes a difference and the user can ascertain that the root name has an impact on the

52
00:03:20.500 --> 00:03:22.360
actual assertion that we're making later on.

53
00:03:23.200 --> 00:03:25.510
So right here, I'm going to do the exact same thing.

54
00:03:25.750 --> 00:03:28.360
I'm going to create a constant called the root name.

55
00:03:28.660 --> 00:03:33.040
And this one I will set to home the exact same implementation as we have here.

56
00:03:33.280 --> 00:03:35.200
So I can remove this round object.

57
00:03:35.500 --> 00:03:39.190
I can remove the actual object in line here.

58
00:03:39.550 --> 00:03:45.760
I can once again invoke the create config factory function, give it a root name to provide like.

59
00:03:45.760 --> 00:03:50.050
So save this file and our tests will rerun and everything is still passing.

60
00:03:50.050 --> 00:03:51.740
So I think it's a little bit cleaner.

61
00:03:51.760 --> 00:03:52.350
Our tests.

62
00:03:52.390 --> 00:03:54.010
Tests are nice and short, but yet.

63
00:03:54.640 --> 00:04:00.910
Well, describing of the problem and of course we've isolated that common set up to this factory function

64
00:04:00.910 --> 00:04:01.270
up here.

65
00:04:01.480 --> 00:04:07.360
If somebody wants to get into the nitty gritty details of how we provide a configuration to the mounting

66
00:04:07.360 --> 00:04:08.620
of the component for the test.

67
00:04:08.980 --> 00:04:09.250
All right.

68
00:04:09.250 --> 00:04:13.000
So I think this is a step in the right direction and we will continue in the next lesson.
