1
00:00:00,730 --> 00:00:07,720
In the previous lesson, we saw how we could use the two ref function to restructure a single reactive

2
00:00:07,720 --> 00:00:10,330
property from a reactive object.

3
00:00:10,570 --> 00:00:16,600
So just to reiterate, because it is a tough concept to explain, this entire object is reactive, but

4
00:00:16,600 --> 00:00:19,840
that doesn't mean that its individual properties are reactive.

5
00:00:20,020 --> 00:00:25,810
When we reference person dot, first name view knows that that property is part of that object and it

6
00:00:25,810 --> 00:00:27,670
knows that it has to track its reactivity.

7
00:00:27,880 --> 00:00:32,830
But when we do structure first name by itself from person, that property is not reactive.

8
00:00:32,830 --> 00:00:38,830
Vue doesn't automatically apply reactivity to that individual property that we take off the object.

9
00:00:39,160 --> 00:00:41,320
So we saw this solution in the previous lesson.

10
00:00:41,320 --> 00:00:43,450
But this is obviously pretty laborious, right?

11
00:00:43,600 --> 00:00:46,600
What if our reactive object has ten different properties?

12
00:00:46,600 --> 00:00:52,390
Do we really want to use ten different variables here and ten different invocations of the two ref function?

13
00:00:52,750 --> 00:00:56,530
So because of that, there is another help helpful function in view.

14
00:00:56,740 --> 00:01:02,140
It's a little bit confusing because it's very similarly named, but it's called two refs.

15
00:01:02,380 --> 00:01:03,850
So I'm going to add an S here.

16
00:01:04,180 --> 00:01:06,970
So, so so far we've learned ref, right?

17
00:01:06,970 --> 00:01:11,080
We've learned to ref in the previous lesson and now we're learning two refs.

18
00:01:11,240 --> 00:01:11,610
Okay.

19
00:01:11,620 --> 00:01:14,470
So a little bit confusing because they all sound very similar.

20
00:01:14,470 --> 00:01:15,970
But let me remove this code right here.

21
00:01:16,390 --> 00:01:22,300
And the two refs function also accepts a reactive object like person.

22
00:01:23,450 --> 00:01:30,710
But it's going to return an object where every individual property is going to be reactive.

23
00:01:30,980 --> 00:01:38,240
And because every individual property is going to be reactive, we can restructure properties from this

24
00:01:38,240 --> 00:01:40,970
object and have that original desired result.

25
00:01:41,330 --> 00:01:50,240
So from here I can, for example, restructure first name and last name from the object returned by

26
00:01:50,240 --> 00:01:51,410
the to Raf's function.

27
00:01:51,530 --> 00:01:55,280
When we pass ID the complete person reactive object.

28
00:01:55,940 --> 00:01:59,400
So this will work but with one caveat.

29
00:01:59,670 --> 00:02:00,110
Okay.

30
00:02:00,380 --> 00:02:05,310
And that caveat is first name is still not going to be the value.

31
00:02:05,330 --> 00:02:05,940
Boris.

32
00:02:06,170 --> 00:02:06,650
Right.

33
00:02:06,980 --> 00:02:10,280
First name now is going to be again an object.

34
00:02:10,280 --> 00:02:13,940
A reactive object with a value property is set to Boris.

35
00:02:14,450 --> 00:02:19,730
So what this does behind the scenes is it takes this entire object we passed in and it basically goes

36
00:02:19,730 --> 00:02:25,590
through every single property in this object, wraps it in its own reactive object, just like RAF does,

37
00:02:25,610 --> 00:02:27,830
and then gives us back that new object.

38
00:02:28,520 --> 00:02:30,950
So behind the scenes, it does something like this.

39
00:02:32,960 --> 00:02:33,380
Right.

40
00:02:34,640 --> 00:02:38,690
And then it wraps all of these together in that single object and returns.

41
00:02:38,870 --> 00:02:44,120
So when we're do structuring first name, we are getting this reactive object with a value property.

42
00:02:44,360 --> 00:02:47,360
So the code we have on line 12 will work right now.

43
00:02:47,720 --> 00:02:50,890
But you cannot simply use first name or last thing by itself.

44
00:02:50,900 --> 00:02:54,020
You have to use that value to get that nested value of boards passed.

45
00:02:54,650 --> 00:02:58,880
So when I run this file, you'll notice our code works as expected.

46
00:02:59,060 --> 00:03:05,090
Every time we change a property on a person reactive object by reaching into the full property like

47
00:03:05,090 --> 00:03:05,720
we do here.

48
00:03:06,050 --> 00:03:11,900
That will in turn get first name and last name to update, which will in turn get the computed function

49
00:03:11,900 --> 00:03:14,420
to rerun and calculate the new string.

50
00:03:14,690 --> 00:03:19,490
Just to show you once again, if I get rid of value right here, we're going to get that original object

51
00:03:19,490 --> 00:03:20,300
object reference.

52
00:03:20,300 --> 00:03:20,990
So here we go.

53
00:03:21,260 --> 00:03:26,000
We're going to see it no longer returns a reactive string because there is no such thing in JavaScript.

54
00:03:26,150 --> 00:03:31,670
It's always going to have to be an object built by the view team that encapsulates or wraps that actual

55
00:03:31,910 --> 00:03:34,700
string or a value, whatever it is that is changing.

56
00:03:35,000 --> 00:03:38,000
So I'm going to return this back to its original implementation.

57
00:03:38,180 --> 00:03:43,460
And just because this concept can be pretty confusing, I want to remove all of this code down below.

58
00:03:44,030 --> 00:03:49,940
And what I want to do is I want to show you the differences between the person object and the full reactive

59
00:03:49,940 --> 00:03:52,490
object that the two are after the function returns.

60
00:03:52,670 --> 00:03:54,770
So I'm going to call this ref person.

61
00:03:56,310 --> 00:03:56,580
Okay.

62
00:03:56,580 --> 00:04:00,990
So we can totally and fully understand the differences between what we're doing here, because it seems

63
00:04:00,990 --> 00:04:01,650
very similar.

64
00:04:01,650 --> 00:04:01,890
Right?

65
00:04:02,070 --> 00:04:06,960
What's the difference between a reactive object versus an object where every single property is reactive?

66
00:04:07,230 --> 00:04:14,790
So if I take a look at person dot first name right now, what we're going to see is going to be the

67
00:04:14,790 --> 00:04:15,630
original string.

68
00:04:15,750 --> 00:04:19,230
It's not some kind of complex object that's keeping track of reactivity.

69
00:04:19,380 --> 00:04:23,430
Vue is only keeping track of the larger person object as a whole.

70
00:04:23,700 --> 00:04:24,930
And it's reactivity.

71
00:04:25,170 --> 00:04:29,640
If we change a property on it through a reference like person that first name, it will know.

72
00:04:29,820 --> 00:04:34,740
But if we simply take first name from it, it will simply think that that's a regular old reference

73
00:04:34,740 --> 00:04:35,400
to the string.

74
00:04:35,670 --> 00:04:44,850
In comparison, if I console.log ref person dot first name, what we're going to see is that complex

75
00:04:44,850 --> 00:04:50,760
object that the View team built that wraps that core, a value that is dynamically changing, which

76
00:04:50,760 --> 00:04:51,930
is Borris Right.

77
00:04:52,110 --> 00:04:54,690
So that's the difference between what two refs does for us.

78
00:04:54,900 --> 00:05:00,250
It gives us an object where every single key, whether it be first name here or here's another example

79
00:05:00,250 --> 00:05:01,830
I'm going to replace this with last name.

80
00:05:02,340 --> 00:05:07,500
No matter which property I referenced on my ref person object, it's going to return another reactive

81
00:05:07,500 --> 00:05:14,640
object, that story, its own internal value and tracking its changes in comparison to this syntax right

82
00:05:14,640 --> 00:05:18,930
here, which is a single reactive object with a bunch of properties nested inside it.

83
00:05:18,930 --> 00:05:21,510
First name does not link to a reactive value of Borris.

84
00:05:21,690 --> 00:05:28,230
It's just a first name property inside an object that as a whole is reactive to view.

85
00:05:28,470 --> 00:05:32,220
I know it's a pretty confusing concept, but hopefully this example of printing out the differences

86
00:05:32,220 --> 00:05:37,170
between person and the ref person make sense and I will see you in the next lesson.
