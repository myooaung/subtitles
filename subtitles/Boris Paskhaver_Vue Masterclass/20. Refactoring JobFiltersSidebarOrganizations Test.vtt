WEBVTT
1
00:00:00.330 --> 00:00:01.130
Okay.

2
00:00:01.140 --> 00:00:08.220
So in this lesson, I want to do a quick refactor of our test suite for our job filters, sidebar organizations

3
00:00:08.220 --> 00:00:08.670
component.

4
00:00:08.910 --> 00:00:14.340
As always, we're going to write a factory function and it's kind of up to us what we want that factory

5
00:00:14.340 --> 00:00:15.210
function to produce.

6
00:00:15.420 --> 00:00:19.020
In this case, what I'm going to do is target this configuration object.

7
00:00:19.200 --> 00:00:24.180
It takes up a large chunk of each test, and I think it can help us simplify the tests a little bit,

8
00:00:24.360 --> 00:00:30.990
while as always, removing a lot of the logic that we don't care about in an individual test such as

9
00:00:30.990 --> 00:00:32.730
stubbing out the font awesome icon.

10
00:00:32.880 --> 00:00:38.070
That's kind of a dependency that we need in order to avoid warnings, but we don't really care about

11
00:00:38.070 --> 00:00:39.930
each test displaying this information.

12
00:00:40.140 --> 00:00:44.970
So this is the perfect kind of stuff that we want to move out of an individual test to a factory.

13
00:00:45.330 --> 00:00:53.640
So right here I'm going to say const create config and just to do a little bit of a different thing,

14
00:00:53.640 --> 00:00:56.100
what I'm going to do here is provide a store.

15
00:00:57.530 --> 00:01:02.960
Argument, and I'm not going to provide a default fallback value, which basically means that every

16
00:01:02.960 --> 00:01:06.200
test is going to need to provide a store argument.

17
00:01:06.440 --> 00:01:08.420
I'm okay with that later on.

18
00:01:08.420 --> 00:01:13.550
If we have more than two tests in this file and we want to add a lot of customization to how we construct

19
00:01:13.550 --> 00:01:16.640
this config or to a store, we may add that functionality.

20
00:01:16.820 --> 00:01:22.040
But for now, I will demand that every time we invoke create config, I have to pass in a sample store.

21
00:01:22.490 --> 00:01:25.940
So right here I'm going to implicitly return a JavaScript object.

22
00:01:27.890 --> 00:01:32.930
And what I'm going to do is basically copy this content right here, starting from global all the way

23
00:01:32.930 --> 00:01:34.010
to the end of that object.

24
00:01:34.250 --> 00:01:36.200
I'm going to copy that and paste that right here.

25
00:01:36.680 --> 00:01:40.910
So now I'm going to have my configuration object with a global property, with a marked object.

26
00:01:41.120 --> 00:01:45.140
And whatever store that the test wants to pass in is what I'm going to use.

27
00:01:45.350 --> 00:01:48.780
And then I'm also going to take care of the stubbing out of awesome icons.

28
00:01:49.100 --> 00:01:49.460
All right.

29
00:01:49.790 --> 00:01:54.620
So right here, for example, we have our store set up in the dollar sign store variable.

30
00:01:54.620 --> 00:01:58.220
That's exactly what I want to pass to create config and it'll take care of the rest.

31
00:01:58.520 --> 00:02:04.070
So right here, instead of providing this complex object in line here, I can simply invoke my create

32
00:02:04.070 --> 00:02:05.210
store function from above.

33
00:02:05.390 --> 00:02:10.590
We are now requiring that this function must get a argument from wherever it's being invoked.

34
00:02:10.610 --> 00:02:12.290
So now I have to provide my store.

35
00:02:12.500 --> 00:02:14.030
I will provide it from the line above.

36
00:02:15.430 --> 00:02:16.150
And let's see why.

37
00:02:16.150 --> 00:02:17.780
Creek not Creek Store.

38
00:02:17.800 --> 00:02:18.310
My apologies.

39
00:02:18.460 --> 00:02:20.320
Creek config is what we're looking for here.

40
00:02:20.650 --> 00:02:22.780
Creek config because we're creating a config object.

41
00:02:23.140 --> 00:02:27.100
So we're going to create config and we're going to give it a store and we're going to create the configuration

42
00:02:27.100 --> 00:02:32.410
object for our mount function down below same principle we have our store set up with our getters and

43
00:02:32.410 --> 00:02:34.060
our commit method right here.

44
00:02:34.060 --> 00:02:38.890
Instead of providing that object, align that configuration object, we're simply going to generate

45
00:02:38.890 --> 00:02:43.570
it using the create config function from up above and we're going to pass in our store.

46
00:02:45.320 --> 00:02:46.310
And that should take care of it.

47
00:02:46.320 --> 00:02:47.090
So I'm going to run that.

48
00:02:47.090 --> 00:02:51.500
We can see nothing has broken, everything is still passing and everything is looking good.

49
00:02:51.500 --> 00:02:54.200
We've isolated a little bit of this logic outside of each test.

50
00:02:54.350 --> 00:02:58.220
Each test is now a little bit more tighter, a little bit more leaner and meaner.

51
00:02:58.250 --> 00:03:00.140
So I like where we've headed with this.

52
00:03:00.560 --> 00:03:00.870
All right.

53
00:03:00.870 --> 00:03:03.740
So that completes our small refactor of this component.

54
00:03:03.740 --> 00:03:04.460
And it's tests.

55
00:03:04.700 --> 00:03:06.530
And I will see you in the next lesson.
