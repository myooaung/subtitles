WEBVTT
1
00:00:00.210 --> 00:00:01.260
All right.

2
00:00:01.260 --> 00:00:07.590
So we concluded our previous lesson by observing a little bit of a problem, and that is that our team's

3
00:00:07.590 --> 00:00:15.690
menu item is listed twice on our navigation menu, and that is to be expected because we have it declared

4
00:00:15.690 --> 00:00:16.260
twice.

5
00:00:16.500 --> 00:00:23.700
The first is right here in our separate ally, and the second is during our actual iteration with our

6
00:00:23.700 --> 00:00:29.400
V4 directive over our menu items array, which also includes the team's value.

7
00:00:29.700 --> 00:00:35.790
Now the reason why we kept this original list item is because it's actually slightly different from

8
00:00:35.790 --> 00:00:43.290
all subsequent list items in that it doesn't have this M9 utility class because we don't want any margin

9
00:00:43.290 --> 00:00:47.760
on the left of our first last item and only our first list item.

10
00:00:48.090 --> 00:00:53.460
So we have a little bit of a problem here in that if we got rid of this one, we would we would correctly

11
00:00:53.460 --> 00:00:58.740
render those six menu items, but we would add some additional margin on the left of the first one.

12
00:00:58.830 --> 00:01:00.540
And that's not what we want.

13
00:01:00.570 --> 00:01:00.870
Right?

14
00:01:01.140 --> 00:01:02.910
So how can we solve this problem?

15
00:01:02.910 --> 00:01:10.980
How can we have a distinct success class on our very first menu item and a totally different sizes class

16
00:01:10.980 --> 00:01:14.730
and every subsequent menu item or ally in this case?

17
00:01:15.030 --> 00:01:21.630
Well, one way to think about it is to almost try to get these allies as close to each other as possible.

18
00:01:21.840 --> 00:01:27.420
And one way that we can do that is to imagine that we have an additional class on our very first ally,

19
00:01:27.600 --> 00:01:28.500
the teams ally.

20
00:01:28.740 --> 00:01:35.580
And that class can be something like an ML zero, the ML zero tail one class applies a margin left of

21
00:01:35.580 --> 00:01:36.420
zero pixels.

22
00:01:36.600 --> 00:01:39.000
That's basically the same thing as doing nothing at all.

23
00:01:39.240 --> 00:01:45.660
But at least in this case, we have kind of assigned an explicit access class to each one of our list

24
00:01:45.660 --> 00:01:46.020
items.

25
00:01:46.020 --> 00:01:51.120
We're now going to bring these allies closer to each other in terms of how they look.

26
00:01:51.120 --> 00:01:53.730
And I'm going to show you how that's going to help us in just a second.

27
00:01:54.000 --> 00:02:00.900
Of course, our ultimate goal is to remove this list item entirely and just allow us to render six list

28
00:02:00.900 --> 00:02:02.730
items using the V4 directive.

29
00:02:02.970 --> 00:02:07.410
But in order to do that, we're going to need to merge the logic here and the logic here.

30
00:02:07.680 --> 00:02:07.950
All right.

31
00:02:07.950 --> 00:02:09.210
And here's how we're going to do this.

32
00:02:09.270 --> 00:02:14.400
The first thing we're going to do is open up our tailwind configuration file.

33
00:02:14.700 --> 00:02:20.370
We're going to need to modify some settings here to enable us to use some special success properties

34
00:02:20.370 --> 00:02:21.960
within our actual template.

35
00:02:22.230 --> 00:02:29.670
So CSC actually has this logic built into it where we can apply a class, but only to the first element

36
00:02:29.850 --> 00:02:32.490
or the first child element within a group.

37
00:02:32.610 --> 00:02:34.350
And that's exactly what we want here.

38
00:02:34.350 --> 00:02:41.130
Our list items are child elements within our larger unordered list, and we want to apply a distinct

39
00:02:41.130 --> 00:02:45.480
CSS class to just our first element, but not the other ones.

40
00:02:45.480 --> 00:02:45.840
All right.

41
00:02:45.930 --> 00:02:48.870
And that's the asset class deals with margin.

42
00:02:48.870 --> 00:02:49.260
Okay.

43
00:02:49.530 --> 00:02:51.450
So here's what we're going to do in this file.

44
00:02:51.690 --> 00:02:57.330
What we want to look for is this variance section, which has an extend object.

45
00:02:57.540 --> 00:03:01.860
And what we're going to do here is we're going to write some syntax that is going to enable tailwind

46
00:03:01.860 --> 00:03:08.520
to generate some additional utility classes for us that it doesn't give us by default just when the

47
00:03:08.640 --> 00:03:09.570
library starts up.

48
00:03:09.570 --> 00:03:12.600
So we're going to ask it to generate some more CC classes.

49
00:03:12.780 --> 00:03:19.410
Knowing what we now know about having to need to apply only access classes to the first element within

50
00:03:19.410 --> 00:03:19.920
a group.

51
00:03:20.190 --> 00:03:26.910
So right here, I'm going to add a key of margin because we want to enable this related to margin classes.

52
00:03:26.910 --> 00:03:33.480
Star M classes is like an AL for margin left and M are for margin right, etc. And here I'm going to

53
00:03:33.480 --> 00:03:38.130
provide an array and in the array I'm going to provide a string of first.

54
00:03:38.760 --> 00:03:39.090
All right.

55
00:03:39.090 --> 00:03:40.920
And that is all we need to do in this file.

56
00:03:41.070 --> 00:03:49.200
This is going to enable us to apply a different margin class to the first element in our iteration.

57
00:03:49.230 --> 00:03:49.470
All right.

58
00:03:49.470 --> 00:03:51.300
We're going to see the syntax for this in just a second.

59
00:03:51.570 --> 00:03:56.760
As always, whenever you modify your tailwind config file, if you run into any kind of issues at the

60
00:03:56.760 --> 00:04:02.040
end of this lesson, I recommend shutting down your view server and starting it up, and that just ensures

61
00:04:02.040 --> 00:04:04.380
that these changes are registered by The View.

62
00:04:04.380 --> 00:04:05.340
SEELYE All right.

63
00:04:05.580 --> 00:04:10.830
So let's come back now to our actual main nav class or main nav component right here.

64
00:04:11.100 --> 00:04:15.060
And we can go ahead and remove this because we're no longer going to need it.

65
00:04:15.270 --> 00:04:21.210
But remember, we still need to account for this l0 class that we want to apply to the first flight

66
00:04:21.210 --> 00:04:22.860
and to the first flight only.

67
00:04:23.190 --> 00:04:25.710
So right here, here's what the syntax is going to look like.

68
00:04:25.920 --> 00:04:30.660
Remember, I need my m l0 class but only for the first one.

69
00:04:30.810 --> 00:04:35.940
And what we can do now is add this first colon m zero.

70
00:04:36.240 --> 00:04:41.790
The reason we're able to use first here is because we added that setting in our tailwind config file

71
00:04:41.790 --> 00:04:48.030
just a second ago and otherwise MLA zero is your regular typical tailwind class.

72
00:04:48.030 --> 00:04:50.700
It adds zero pixels of margin on the left side.

73
00:04:51.060 --> 00:04:57.300
So what we're saying here is for every single ally that we create with our V4 directive, as we iterate,

74
00:04:57.480 --> 00:04:59.910
we want to apply a class of EML nine.

75
00:05:00.310 --> 00:05:08.710
The only exception is our first ally where we want to attach the CC class eml zero from tailwind instead.

76
00:05:09.040 --> 00:05:09.460
All right.

77
00:05:09.580 --> 00:05:11.170
And that's going to do the exact same thing.

78
00:05:11.170 --> 00:05:16.440
So when I save this and I head back to my browser, you're going to see we now have everything as expected.

79
00:05:16.450 --> 00:05:20.230
We have our six menu items that they're each represented only once.

80
00:05:20.230 --> 00:05:25.180
And if I right click here and inspect it, we're going to see the differences in margin.

81
00:05:25.420 --> 00:05:29.650
So right here, you'll notice that we still have all of the class supplied to each one.

82
00:05:29.740 --> 00:05:29.990
Right?

83
00:05:30.010 --> 00:05:32.410
We can see mine and first Emma zero.

84
00:05:32.590 --> 00:05:39.430
But View and Tailwind and CCS can identify which element is actually first and apply the ML zero class

85
00:05:39.520 --> 00:05:40.300
to only that.

86
00:05:40.570 --> 00:05:47.230
So you'll notice as I navigate through the second and the third and the left and the fourth class,

87
00:05:47.230 --> 00:05:52.030
you'll notice that we have margin on the left and I can even show you this computed property and show

88
00:05:52.030 --> 00:05:58.060
that it is 36 pixels as I navigate here in comparison when I get back to my first class, if you'll

89
00:05:58.060 --> 00:06:01.330
notice, we have no actual margin on the left hand side.

90
00:06:01.480 --> 00:06:07.660
That again is being added by the ML zero class, which we've only applied to the first ally in this

91
00:06:07.660 --> 00:06:08.020
list.

92
00:06:08.230 --> 00:06:13.540
Again, it doesn't need margin because we have margin on the top level NAV that is holding all of these

93
00:06:13.540 --> 00:06:14.500
list items together.

94
00:06:14.590 --> 00:06:19.500
So we don't want to add some additional spacing between that orange block and the start of teams.

95
00:06:19.510 --> 00:06:19.810
All right.

96
00:06:20.050 --> 00:06:26.590
So that is how we combined tailwind and some complex access kind of identifiers in order to change up

97
00:06:26.590 --> 00:06:31.660
the tailwind classes that we apply to various children within our you.

98
00:06:31.870 --> 00:06:32.140
All right.

99
00:06:32.140 --> 00:06:37.810
So now we solved that problem, and we can have a single V4 iteration to take care of all of our menu

100
00:06:37.810 --> 00:06:38.140
items.

101
00:06:38.380 --> 00:06:38.980
Pretty cool.

102
00:06:39.250 --> 00:06:39.580
All right.

103
00:06:39.580 --> 00:06:41.290
That's all there is to cover in this lesson.

104
00:06:41.290 --> 00:06:42.880
So I will see in the next one.
