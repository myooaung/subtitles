WEBVTT
1
00:00:00.480 --> 00:00:01.350
All right.

2
00:00:01.350 --> 00:00:06.720
So now that we have made our changes to our main NAV component, let's go ahead and run our test suite

3
00:00:06.720 --> 00:00:08.100
to make sure nothing is broken.

4
00:00:08.430 --> 00:00:14.550
So I'm going to execute NPM run test colon unit and we're just going to double check that everything

5
00:00:14.550 --> 00:00:15.540
is still passing.

6
00:00:15.570 --> 00:00:17.460
And it does, which is great.

7
00:00:17.700 --> 00:00:23.040
But I still want to refactor our test suite, and I want to open up that file to remind you what my

8
00:00:23.040 --> 00:00:24.300
concerns about it are.

9
00:00:24.540 --> 00:00:32.010
So I'm going to open up main navigate test docs right here and I'm going to open it on the right hand

10
00:00:32.010 --> 00:00:35.070
side so we can compare the code and the tests alongside.

11
00:00:35.490 --> 00:00:40.770
I'm really not super happy still about these last two tests, and these are the tests that are checking

12
00:00:40.770 --> 00:00:45.000
for the presence or the absence of our log in button and our profile image.

13
00:00:45.300 --> 00:00:49.950
As I mentioned earlier, my least favorite part about them is the fact that they know a lot about the

14
00:00:49.980 --> 00:00:55.310
data property of our main, that they know a lot, in other words, about the implementation.

15
00:00:55.320 --> 00:01:00.500
They know that there is and is logged in property and they know it has to be of a certain value, a

16
00:01:00.510 --> 00:01:04.170
certain Boolean value in order for some change to happen on the screen.

17
00:01:04.170 --> 00:01:04.410
Right.

18
00:01:04.650 --> 00:01:09.450
And the reason this is dangerous is imagine tomorrow that we change the name of this property to something

19
00:01:09.450 --> 00:01:11.160
like user is logged in.

20
00:01:11.400 --> 00:01:16.590
Well, when we change the implementation, our tests are now going to break not because the core functionality

21
00:01:16.590 --> 00:01:22.680
or logic has broken, but simply because we are closely connected or coupled to the idea of a name.

22
00:01:23.370 --> 00:01:25.410
Property existing called is logged in.

23
00:01:25.420 --> 00:01:25.620
Right.

24
00:01:25.620 --> 00:01:29.730
So the more that I can remove that reliance, the more stable our tests will be in the long term.

25
00:01:29.970 --> 00:01:34.880
So let's go ahead and try to make that happen by removing the second argument to the Mt. function in

26
00:01:34.890 --> 00:01:36.000
each of these two tests.

27
00:01:36.270 --> 00:01:40.890
So starting on this top one, I'm just going to remove that second argument and now it's going to read

28
00:01:40.890 --> 00:01:41.910
a lot simpler.

29
00:01:41.910 --> 00:01:43.610
We're simply mounting our main NAV.

30
00:01:43.620 --> 00:01:46.500
We're rendering in view test utils terms.

31
00:01:46.620 --> 00:01:48.450
We are rendering our main now to the screen.

32
00:01:48.750 --> 00:01:51.480
And I even think here there were over testing a little bit.

33
00:01:51.480 --> 00:01:56.250
I really think the core thing that I want to test here is simply that my log in button exists because

34
00:01:56.610 --> 00:02:01.140
if we look at the test description, what we want to test is when the user's logged out, we prompt

35
00:02:01.140 --> 00:02:02.850
the user to sign in in some way.

36
00:02:03.090 --> 00:02:08.250
Now I think it's totally fine if you want to leave a test for the profile image here or the absence

37
00:02:08.250 --> 00:02:09.150
of a profile image.

38
00:02:09.360 --> 00:02:13.740
But the one thing I would recommend is if you're going to test for that, I would move it to a separate

39
00:02:13.770 --> 00:02:14.220
test.

40
00:02:14.490 --> 00:02:19.770
I would recommend keeping one expectation per test because that generally ensures that you're testing

41
00:02:19.770 --> 00:02:21.240
just one bit of functionality.

42
00:02:21.510 --> 00:02:27.390
I think it's generally best to have a lot of small, simple tests that are easy to read and each test

43
00:02:27.390 --> 00:02:33.270
for one behavior versus trying to stack a whole bunch of expectations in a test that makes it longer

44
00:02:33.270 --> 00:02:34.840
and many times more difficult to set up.

45
00:02:35.100 --> 00:02:39.450
So if you want to have a separate test, you can write a separate assertion in a separate IT function.

46
00:02:39.660 --> 00:02:43.530
But for me, I'm just going to test for the presence of the log in button and I'll show you how that

47
00:02:43.530 --> 00:02:48.330
gels with the test that we're about to change down below where I will actually check for the presence

48
00:02:48.330 --> 00:02:49.110
of the profile image.

49
00:02:49.380 --> 00:02:52.380
So I'm going to delete this line and delete this line.

50
00:02:53.160 --> 00:02:57.420
And now if we look at this test, I think it's pretty elegant and simple to read where mounting our

51
00:02:57.420 --> 00:02:58.380
main nav component.

52
00:02:58.470 --> 00:03:00.570
We know nothing about what's going on inside it.

53
00:03:00.570 --> 00:03:05.280
As far as implementation details, we're looking for something in the template that has an attribute

54
00:03:05.280 --> 00:03:07.710
of data, a test equal to log in button.

55
00:03:07.860 --> 00:03:09.120
We don't know what that is.

56
00:03:09.120 --> 00:03:10.110
That could be a button.

57
00:03:10.260 --> 00:03:11.430
That could be a div.

58
00:03:11.430 --> 00:03:13.020
That can be a view component.

59
00:03:13.020 --> 00:03:13.920
We don't know what it is.

60
00:03:13.920 --> 00:03:18.330
We just care about this attribute that exists purely for the purposes of tests, which means as well

61
00:03:18.330 --> 00:03:22.830
that if we change the implementation, it's much more likely the test will still pass because we're

62
00:03:22.830 --> 00:03:24.900
not coupling ourselves to any of those things.

63
00:03:25.080 --> 00:03:29.430
Now granted, I have given it the name login button, but I think that's okay because in this case I'm

64
00:03:29.430 --> 00:03:34.650
using log in button not to indicate a literal H to no button, but just to provide user context.

65
00:03:34.650 --> 00:03:37.440
That's some kind of button that's going to log the user into our site.

66
00:03:37.620 --> 00:03:41.040
And then I'm simply testing that it exists in our components.

67
00:03:41.040 --> 00:03:45.120
So when we mount the component, there's some kind of invitation to log in through a button, right?

68
00:03:45.120 --> 00:03:52.020
So very simple to read, very simple to set up three lines and a pretty agnostic and pretty non knowledgeable

69
00:03:52.020 --> 00:03:53.110
of our implementation.

70
00:03:53.130 --> 00:03:53.460
All right.

71
00:03:53.790 --> 00:03:56.310
Let's now move down to our second test right here.

72
00:03:56.310 --> 00:04:00.960
And once again, we're going to remove the second argument to the mount function.

73
00:04:01.920 --> 00:04:02.880
There we go immediately.

74
00:04:02.880 --> 00:04:03.630
It's a lot cleaner.

75
00:04:03.840 --> 00:04:05.310
And let's take a look at this description.

76
00:04:05.310 --> 00:04:08.940
When the user logs in it displays the user profile picture.

77
00:04:09.330 --> 00:04:14.910
So here is where I actually want to test for the profile image and I want to do two expectations here.

78
00:04:14.910 --> 00:04:17.970
So I'm going to contradict myself compared to what I said a minute ago.

79
00:04:18.150 --> 00:04:23.670
But the reason I want to do two expectations here is because I want to test what I consider to be functionally

80
00:04:23.670 --> 00:04:27.930
the same behavior, and that is either the presence or the absence of the profile image.

81
00:04:28.170 --> 00:04:34.170
And the way I want to test it is by interacting with my component in the exact same way as a user would.

82
00:04:34.530 --> 00:04:36.840
So what I want to test here is going to look like this.

83
00:04:36.990 --> 00:04:42.780
I'm going to render my main nav, I'm going to test that my profile image is not present.

84
00:04:43.710 --> 00:04:48.270
Then what I want to do is simulate a click on my action button, right?

85
00:04:48.270 --> 00:04:50.700
So notice here, I'm not changing the data properly.

86
00:04:50.700 --> 00:04:52.530
I'm not changing technical view details.

87
00:04:52.740 --> 00:04:58.800
Rather, I'm interacting with my mounted main nav component as a user would by simulating a click on

88
00:04:58.800 --> 00:04:59.580
an action button.

89
00:04:59.640 --> 00:04:59.940
We're going to.

90
00:05:00.050 --> 00:05:01.100
How do you test utils?

91
00:05:01.310 --> 00:05:04.100
How to click on an action button and I'll show you the syntax to do that.

92
00:05:04.430 --> 00:05:08.210
So we're interacting in the with the component in the exact same way at the user.

93
00:05:08.210 --> 00:05:14.870
Well, and after that happens then I'll test that the profile image is present, so check that it's

94
00:05:14.870 --> 00:05:15.500
not present.

95
00:05:15.620 --> 00:05:18.200
Interact with the component, then check that it is present.

96
00:05:18.410 --> 00:05:21.110
In other words, the exact same flow that the user goes through.

97
00:05:21.380 --> 00:05:26.420
So right here, what I'm going to do is copy this line or rather even cut it because I'm going to need

98
00:05:26.420 --> 00:05:27.320
it just once.

99
00:05:27.320 --> 00:05:29.700
Right now, I'm going to search for my profile image.

100
00:05:29.720 --> 00:05:33.220
Once again, I'm going to check for the presence of a data test attribute.

101
00:05:33.350 --> 00:05:37.070
I don't specifically know what it is that a profile images here.

102
00:05:37.070 --> 00:05:38.720
This is just for human context.

103
00:05:38.720 --> 00:05:44.270
It's not a knowledgeable about the technical details of what it is, whether it's a div or a header

104
00:05:44.270 --> 00:05:44.690
or whatever.

105
00:05:44.780 --> 00:05:46.550
I just care about the data test attribute.

106
00:05:46.790 --> 00:05:52.970
And of course what I want to check for is if I call the exists method, which is going to exist on the

107
00:05:52.970 --> 00:05:56.780
object that the find method returns, I want this to be false.

108
00:05:57.590 --> 00:06:04.730
So if Vue is unable to find any element with a data test attribute on it, this will evaluate to false.

109
00:06:04.880 --> 00:06:09.770
And that should be the case because when the component renders is logged in of course is going to be

110
00:06:09.770 --> 00:06:16.130
set to false, which means the VRF will not evaluate to true, which means we're going to not render

111
00:06:16.130 --> 00:06:21.860
the profile image, which means it's not going to be seen in our find method call when the view test

112
00:06:21.860 --> 00:06:24.740
utils traverses our code and looks for this attribute.

113
00:06:24.920 --> 00:06:25.280
All right.

114
00:06:25.610 --> 00:06:30.440
The next thing I want to do, of course, is to simulate our click on the log in button so I can actually

115
00:06:30.440 --> 00:06:35.390
keep this code right here, which is going to find our login button using the same data test attribute

116
00:06:35.390 --> 00:06:35.810
logic.

117
00:06:35.960 --> 00:06:39.890
So we're going to make Vue test utils look for this action button right here.

118
00:06:40.130 --> 00:06:43.310
And now we want to talk about how we can actually simulate a click.

119
00:06:43.310 --> 00:06:48.410
And when I use the word simulate, I basically just mean trigger a click in our tests, just like as

120
00:06:48.410 --> 00:06:49.220
if we were a user.

121
00:06:49.460 --> 00:06:53.990
The reason it's not technically a real click is because we're not operating in a browser environment.

122
00:06:53.990 --> 00:06:59.270
This is kind of a fictional rendering environment, right, where viewed test details is mounting this

123
00:06:59.270 --> 00:07:03.590
component not literally on a web page, but kind of instantiating this view object.

124
00:07:03.800 --> 00:07:09.170
So we're going to basically simulate, quote unquote, a click, but you can think of it as basically

125
00:07:09.170 --> 00:07:12.410
the same thing as clicking on the log in in our browser.

126
00:07:12.620 --> 00:07:16.850
The way it actually works behind the scenes is we're going to tell you to find the action button, and

127
00:07:16.850 --> 00:07:20.870
when we tell it to click, it's actually going to find this von click directive.

128
00:07:21.050 --> 00:07:26.030
And since we associated that directive with log in user, it's going to say, okay, you are telling

129
00:07:26.030 --> 00:07:27.800
me to behave as if a click occurred.

130
00:07:27.980 --> 00:07:32.300
I know that when the user clicks an action button, I should run this log in user method.

131
00:07:32.480 --> 00:07:36.230
So it's going to run the log in user method, which is going to change the is log and property.

132
00:07:36.500 --> 00:07:37.370
So here's how we do that.

133
00:07:37.370 --> 00:07:39.020
I'm going to take my log in button.

134
00:07:39.830 --> 00:07:43.790
And this, of course, is assuming that it's going to find it using the find method.

135
00:07:43.790 --> 00:07:45.830
And if it doesn't, don't worry, the test will fail.

136
00:07:45.830 --> 00:07:51.050
But it will tell us that it was unable to trigger a click on the log in button because it wasn't able

137
00:07:51.050 --> 00:07:52.070
to find that log in button.

138
00:07:52.070 --> 00:07:57.650
So there's, there's, there's plenty of helpful feedback that the test will tell us in case we're unable

139
00:07:57.650 --> 00:07:58.070
to find it.

140
00:07:58.280 --> 00:08:00.380
But for now, we should be able to find the log in button.

141
00:08:00.560 --> 00:08:03.830
And the method I want to call here is a brand new one called Trigger.

142
00:08:04.100 --> 00:08:07.280
And what Trigger does is simulate an event just like a user event.

143
00:08:07.610 --> 00:08:12.140
And if I put my parentheses here to invoke it, you'll see that the very first argument is an event

144
00:08:12.140 --> 00:08:14.570
string, and that is exactly as it sounds.

145
00:08:14.570 --> 00:08:20.660
It's a string where we specify what kind of event we want to simulate or what kind of event that Vue

146
00:08:20.660 --> 00:08:22.340
should pretend just happened.

147
00:08:22.490 --> 00:08:26.930
And of course, what we want to simulate or trigger on the log in button is a click.

148
00:08:27.890 --> 00:08:28.280
All right.

149
00:08:28.280 --> 00:08:31.400
So Vue is going to say you want to trigger click on the log in button.

150
00:08:31.550 --> 00:08:31.970
Okay.

151
00:08:31.970 --> 00:08:33.740
I'm looking for something like Von Click.

152
00:08:33.890 --> 00:08:34.280
Okay.

153
00:08:34.280 --> 00:08:35.360
I found it right here.

154
00:08:35.360 --> 00:08:35.780
Perfect.

155
00:08:35.780 --> 00:08:37.280
That matches what I'm looking to trigger.

156
00:08:37.430 --> 00:08:40.160
So I'm going to trigger this, which is going to invoke logging user.

157
00:08:40.490 --> 00:08:46.850
Now, an important thing to note here is that because the trigger method is asynchronous, meaning it

158
00:08:46.850 --> 00:08:52.190
takes some time because Vue needs to change the data properly than it needs to re render the component

159
00:08:52.190 --> 00:08:52.940
with the new changes.

160
00:08:53.120 --> 00:08:54.560
It takes some amount of time.

161
00:08:54.740 --> 00:08:59.480
So if we were to run through the remainder of the test right now, the assertions would technically

162
00:08:59.480 --> 00:09:06.800
fail because the rendering process is not guaranteed to be complete by the time that we run these assertions.

163
00:09:07.010 --> 00:09:12.740
So we want to basically pause the execution or in other words, wait until Vue is done re rendering

164
00:09:12.740 --> 00:09:17.360
everything and has completed the process of the trigger and everything that resulted from it.

165
00:09:17.480 --> 00:09:22.310
Before we do any further assertions, in order to do that, we need to make this in a synchronous function.

166
00:09:22.520 --> 00:09:27.160
So right here I'm going to add the async keyword that indicates that something will happen in the body

167
00:09:27.170 --> 00:09:31.280
of this function that will be asynchronous or in other words, taking some amount of time.

168
00:09:31.460 --> 00:09:32.690
And that of course, is our trigger.

169
00:09:32.870 --> 00:09:37.640
And then in order to wait until it's done, I'm going to put the a keyword in front of it.

170
00:09:37.850 --> 00:09:38.210
All right.

171
00:09:38.810 --> 00:09:44.690
So this will wait for the the consequences of the trigger to complete.

172
00:09:44.690 --> 00:09:51.140
So after the await we have a component and its new state with the is logged in property properly updated.

173
00:09:51.350 --> 00:09:56.360
So now what I want to do of course is search for my profile image again and make sure that it exists.

174
00:09:56.570 --> 00:09:59.870
Now, unfortunately, we cannot simply use this line.

175
00:09:59.910 --> 00:10:06.510
Right here, because this profile image is a constant variable that is storing a static saved reference

176
00:10:06.510 --> 00:10:08.840
to the old, quote unquote node.

177
00:10:09.060 --> 00:10:10.840
So in other words, it's still searching.

178
00:10:10.850 --> 00:10:16.410
It's still keeping rather the original search value that it found when we call the find on line 38.

179
00:10:16.590 --> 00:10:21.060
And when the Find method ran right here, we did not have a profile image.

180
00:10:21.180 --> 00:10:26.400
So profile image kind of exists as this view helper object that represents nothingness or absence.

181
00:10:26.610 --> 00:10:31.500
And if we re-use it right here, we're still going to get that reference to that null node.

182
00:10:31.770 --> 00:10:38.010
So basically what we need to do is run the find method again because now we're going to research the

183
00:10:38.010 --> 00:10:39.720
template for this data test.

184
00:10:39.720 --> 00:10:46.350
Actually, it was not here when we searched online 38, but after we trigger a click, it should now

185
00:10:46.350 --> 00:10:46.980
be present.

186
00:10:47.280 --> 00:10:50.160
So what I'm going to do here is I'm going to actually make this a let.

187
00:10:50.490 --> 00:10:54.180
And the reason I'm going to make it a let is just so I can overwrite profile image below.

188
00:10:54.360 --> 00:10:58.560
And then I'm going to copy and paste this line from line 38 right here.

189
00:10:59.800 --> 00:11:00.190
All right.

190
00:11:00.430 --> 00:11:05.860
So what I'm basically going to do is once again use the find method to try to search for an element

191
00:11:05.860 --> 00:11:08.970
or something on our template that's going to have this data test.

192
00:11:08.980 --> 00:11:14.350
Actually, it's basically a refresh in a sense to make sure that we are working with the latest version

193
00:11:14.350 --> 00:11:17.980
of the template, which is going to be different because of our triggered click.

194
00:11:18.280 --> 00:11:18.610
All right.

195
00:11:18.880 --> 00:11:21.760
A lot of complexity, but hopefully it should make a big picture sense.

196
00:11:21.760 --> 00:11:25.180
In fact, I've kind of isolated this test into its logical sections.

197
00:11:25.180 --> 00:11:30.670
We are setting up the component, then we are taking some kind of action or triggering some kind of

198
00:11:30.670 --> 00:11:31.900
change, which is our button click.

199
00:11:32.020 --> 00:11:34.270
And then after that change we are testing that.

200
00:11:34.270 --> 00:11:39.760
We are seeing the result, which is that our profile image existing should now be equal to true instead

201
00:11:39.760 --> 00:11:41.380
of false before the click.

202
00:11:41.710 --> 00:11:42.070
All right.

203
00:11:42.370 --> 00:11:46.210
So with that, we are good to run our tests one more time.

204
00:11:46.210 --> 00:11:47.770
NPM Run Test Colon Unit.

205
00:11:49.230 --> 00:11:50.490
Let's see what that gives us.

206
00:11:51.520 --> 00:11:54.070
And our tests fully pass.

207
00:11:54.070 --> 00:11:57.580
And we can see right here as well that we have perfect test coverage, which is great.

208
00:11:57.790 --> 00:12:03.690
So once again, I think and I would argue that these tests are a lot better than the ones that we had.

209
00:12:03.700 --> 00:12:08.020
There are a lot simpler and shorter because we're not manually hard coding any data properties.

210
00:12:08.260 --> 00:12:13.240
We are not coupled to the implementation of our component or certainly less coupled because we're not

211
00:12:13.240 --> 00:12:18.430
depending on the search for specific age to know attributes or access classes or view components.

212
00:12:18.640 --> 00:12:23.200
Rather, we're looking for a specific data test strip and we're testing the component as it will be

213
00:12:23.200 --> 00:12:24.310
used by the user.

214
00:12:24.490 --> 00:12:28.850
We want the user to see a log in button when they load the page or in other words, when the main nav

215
00:12:28.870 --> 00:12:30.130
component appears in front of them.

216
00:12:30.310 --> 00:12:35.050
And here we want the user to click a log in button and to see a profile image.

217
00:12:35.200 --> 00:12:40.390
And we're testing the component as it's meant to be used without obsessing over whether the data property

218
00:12:40.390 --> 00:12:46.360
exists and what it's called and how it implements it, whether it's a valid data property and is logged

219
00:12:46.360 --> 00:12:49.250
in property or a is user logged out property.

220
00:12:49.270 --> 00:12:51.370
We don't care about all those component details.

221
00:12:51.460 --> 00:12:55.600
We just care about simply interacting with the base component and making sure it does everything it's

222
00:12:55.600 --> 00:12:56.080
supposed to.

223
00:12:56.110 --> 00:12:56.410
All right.

224
00:12:56.560 --> 00:12:58.870
So I think these tests have moved us in a better direction.

225
00:12:59.020 --> 00:13:00.520
And we also have pretty good test coverage.

226
00:13:00.520 --> 00:13:01.540
So that makes me feel good.

227
00:13:01.720 --> 00:13:05.110
There were generally testing everything that we should be.

228
00:13:05.110 --> 00:13:07.180
And one more time if I head back to my browser.

229
00:13:08.420 --> 00:13:12.680
Just to refresh this page one more time, I'm going to make sure everything works and it indeed does

230
00:13:12.680 --> 00:13:15.110
is logged in, is being swapped through when we click the button.

231
00:13:15.470 --> 00:13:15.770
All right.

232
00:13:15.770 --> 00:13:18.050
So that's all there is to cover in this lesson.

233
00:13:18.050 --> 00:13:20.780
And in the very next one, we can go ahead and wrap up this section.
