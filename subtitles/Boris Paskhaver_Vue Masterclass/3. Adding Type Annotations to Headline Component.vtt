WEBVTT
1
00:00:00.270 --> 00:00:01.080
Okay.

2
00:00:01.080 --> 00:00:03.390
So let's move on to our next component.

3
00:00:03.390 --> 00:00:05.550
It's going to be the headline component.

4
00:00:05.880 --> 00:00:08.970
Let's open up that component file in headline dot view.

5
00:00:09.510 --> 00:00:15.210
And as a reminder, this is the component that appears on the front page that invites the user to apply

6
00:00:15.210 --> 00:00:15.950
to a company.

7
00:00:15.960 --> 00:00:21.510
And it uses a variety of action verbs right there that swap at a constant interval.

8
00:00:21.840 --> 00:00:25.060
So you can remember that one of our action verbs, for example, is build.

9
00:00:25.080 --> 00:00:26.670
I think another one is design.

10
00:00:26.960 --> 00:00:27.930
I can scroll down here.

11
00:00:27.930 --> 00:00:28.600
Will find them all.

12
00:00:28.620 --> 00:00:28.860
Yep.

13
00:00:29.160 --> 00:00:30.840
Build, create design code.

14
00:00:30.960 --> 00:00:34.560
And we have an interval that swaps that word every 3 seconds.

15
00:00:34.950 --> 00:00:38.780
All right, so let's convert this component to TypeScript, and then we're going to run into a couple

16
00:00:38.790 --> 00:00:40.710
issues and we'll talk about how we can fix them.

17
00:00:41.130 --> 00:00:47.520
So right here, I'm going to start by providing a lang of types, and right here I'm going to import

18
00:00:47.520 --> 00:00:49.980
my defined component function.

19
00:00:51.100 --> 00:00:54.520
And that's going to come from the top level view library.

20
00:00:55.060 --> 00:00:57.160
And of course I have to utilize of that function.

21
00:00:57.160 --> 00:01:04.390
So right here to find component provide that make sure to close it right here and we can see we start

22
00:01:04.390 --> 00:01:06.940
to get a couple issues arising in this component.

23
00:01:07.330 --> 00:01:09.460
Let's kind of tackle them from top to bottom.

24
00:01:09.730 --> 00:01:15.010
So right here, as a reminder, we have a computed property called action classes and action classes

25
00:01:15.010 --> 00:01:21.040
returns an object that we're binding to a class property up above to dynamically set the access class

26
00:01:21.040 --> 00:01:21.820
that's being applied.

27
00:01:22.120 --> 00:01:26.980
And so what we have is this, that action being referenced, which is the string right here, like build,

28
00:01:26.980 --> 00:01:31.960
although it can be another one of those four strings that we see down below, then we are lower casing

29
00:01:31.960 --> 00:01:35.410
that string and providing that as the property name set to true.

30
00:01:35.650 --> 00:01:39.790
And of course each one of these four actions corresponds to a yes that's class.

31
00:01:39.790 --> 00:01:40.390
Here they are.

32
00:01:40.720 --> 00:01:46.150
And that applies the different color style to that action verb as it appears on the is your screen.

33
00:01:46.390 --> 00:01:51.430
Then when we swap it to the next verb in 3 seconds, it applies a totally different yes class to it.

34
00:01:52.070 --> 00:01:52.390
All right.

35
00:01:52.600 --> 00:01:57.400
So whenever you're going to see Type two violations in a view component, a common reason why that's

36
00:01:57.400 --> 00:02:02.050
going to happen is because the typescript inference didn't work exactly as it should have.

37
00:02:02.050 --> 00:02:07.990
And in those scenarios, the simplest fix is to just explicitly and manually tell TypeScript the correct

38
00:02:07.990 --> 00:02:08.260
type.

39
00:02:08.680 --> 00:02:14.380
So, for example, if I hover my mouse over action classes, we can see the type the typescript inferred

40
00:02:14.560 --> 00:02:16.570
or in other words, what it thinks it's working with.

41
00:02:16.960 --> 00:02:19.410
So this might be a little bit of an unconventional syntax.

42
00:02:19.420 --> 00:02:24.040
Notice before the colon, we have the square brackets and we have X colon number.

43
00:02:24.460 --> 00:02:30.280
So that X is not a literal property with the name of X, that is just an arbitrary name that it's providing.

44
00:02:30.520 --> 00:02:35.380
And what the syntax is trying to say is TypeScript thinks that we're going to have some kind of property.

45
00:02:35.380 --> 00:02:40.090
It doesn't really matter what its actual value is, except it's going to be a number.

46
00:02:40.210 --> 00:02:44.170
So that property is going to be a number and then its value is going to be a boolean.

47
00:02:44.440 --> 00:02:50.350
So in other words, what TypeScript thinks we have here is going to look like this a property with a

48
00:02:50.380 --> 00:02:52.660
numeric value set to a boolean like true.

49
00:02:52.870 --> 00:02:56.260
This is what TypeScript thinks we have, but that's not necessarily true.

50
00:02:56.470 --> 00:03:01.450
This that action is going to be a string in this case, let's say build two lowercase.

51
00:03:01.660 --> 00:03:06.400
So our property type is still going to be a string rather than a number.

52
00:03:06.520 --> 00:03:09.970
So TypeScript is simply not correctly inferring what we're going to have here.

53
00:03:10.300 --> 00:03:11.620
So how can we solve this problem?

54
00:03:11.890 --> 00:03:14.140
Well, we have to declare the correct type right here.

55
00:03:14.260 --> 00:03:18.640
And in order to make this really easy to read, I'm just going to declare an interface up above that

56
00:03:18.640 --> 00:03:23.380
I can then provide as the type of the return value of my action classes computed method.

57
00:03:23.770 --> 00:03:25.450
So right here I'll define an interface.

58
00:03:25.960 --> 00:03:27.430
I'll call it action classes.

59
00:03:28.820 --> 00:03:32.270
And I'm going to use basically the exact same syntax that we have right here.

60
00:03:32.540 --> 00:03:36.590
I'm going to use the square brackets, which indicates that this property can have whatever name we

61
00:03:36.590 --> 00:03:36.860
want.

62
00:03:37.040 --> 00:03:41.870
And I'm just going to use X as a generic placeholder because we need something in order to place the

63
00:03:41.870 --> 00:03:47.240
call in syntax after the X to signify what is going to be the type of that property itself.

64
00:03:47.630 --> 00:03:51.710
So what we're saying here when we do square brackets is we're not caring about the specific property

65
00:03:51.710 --> 00:03:52.100
name.

66
00:03:52.250 --> 00:03:54.050
Just make sure that it's of a certain type.

67
00:03:54.290 --> 00:03:57.140
So here I'm going to say X just as an arbitrary placeholder.

68
00:03:57.320 --> 00:04:02.000
And I'm going to say whatever property that is, it must be a string rather than a number.

69
00:04:02.180 --> 00:04:05.270
So that's where I'm breaking, apart from this syntax down below.

70
00:04:05.570 --> 00:04:10.910
The other half of it is going to be the same or correct because I want the properties value to be of

71
00:04:10.910 --> 00:04:11.870
type boolean.

72
00:04:13.120 --> 00:04:13.450
All right.

73
00:04:13.660 --> 00:04:17.770
So what I'm saying here is we're going to have an object, and in the object are keys.

74
00:04:17.770 --> 00:04:20.950
Whatever they are must be strings, and our values must be booleans.

75
00:04:21.100 --> 00:04:25.660
And that is very similar to this, except this thinks that the properties must be numbers and the values

76
00:04:25.660 --> 00:04:26.290
must be booleans.

77
00:04:26.530 --> 00:04:28.420
So how do we connect this interface to this thing?

78
00:04:28.510 --> 00:04:29.200
Pretty simple.

79
00:04:29.920 --> 00:04:33.460
We provide the colon right here to specify the type of the return value.

80
00:04:33.610 --> 00:04:36.580
And we're going to provide, of course, of action classes, interface from above.

81
00:04:36.850 --> 00:04:37.530
And there we go.

82
00:04:37.540 --> 00:04:38.830
We can see the problem goes way.

83
00:04:39.720 --> 00:04:40.170
All right.

84
00:04:40.170 --> 00:04:41.070
So that is one problem.

85
00:04:41.070 --> 00:04:45.210
Down at the next problem we're going to encounter is in our before amount method.

86
00:04:45.210 --> 00:04:49.770
This is an example of a lifecycle hook and it's going to run right before the component is removed from

87
00:04:49.770 --> 00:04:50.220
the screen.

88
00:04:50.490 --> 00:04:53.280
And as a reminder, what this does is it clears our interval.

89
00:04:53.490 --> 00:04:59.010
Our interval is that thing that is keeping track of the 3/2 interval, at which point we want to change

90
00:04:59.010 --> 00:05:01.110
the action verb on the view component.

91
00:05:01.290 --> 00:05:06.690
And so when we remove our component from the screen, we want to make sure that we remove that time

92
00:05:06.690 --> 00:05:11.640
or that ticker that's kind of going in the background because we don't want it to keep running and consuming

93
00:05:11.640 --> 00:05:16.620
and taking up memory as we move on to other components that have nothing to do with the headline.

94
00:05:16.950 --> 00:05:17.220
Right?

95
00:05:17.370 --> 00:05:18.360
So what's the problem here?

96
00:05:18.360 --> 00:05:23.790
If I hover my mouse over a clear interval, we'll see that clear interval in its typescript type definition

97
00:05:24.000 --> 00:05:26.160
expects a handle parameter that is optional.

98
00:05:26.370 --> 00:05:30.810
But if we provide that handle parameter, it should be of type number or undefined.

99
00:05:31.050 --> 00:05:36.720
And another way of thinking about it is it must be either a number or we provide no value because remember

100
00:05:36.720 --> 00:05:42.090
undefined is what is the default value whenever we don't provide anything for something like a parameter.

101
00:05:42.480 --> 00:05:42.720
Right.

102
00:05:42.720 --> 00:05:43.680
And what is the issue with this?

103
00:05:43.770 --> 00:05:48.990
Well, the issue with this is clear interval expects a number are undefined, but this interval is something

104
00:05:48.990 --> 00:05:50.790
that TypeScript thinks is null.

105
00:05:50.790 --> 00:05:55.440
And it makes sense why it thinks it's now, because in our definition right here, we define it as null.

106
00:05:55.710 --> 00:05:57.300
First, it's going to be null right here.

107
00:05:57.450 --> 00:05:59.520
Then our hope is in the change title method.

108
00:05:59.520 --> 00:06:04.410
We're going to replace it with an actual set interval return value.

109
00:06:04.410 --> 00:06:04.680
Right?

110
00:06:04.800 --> 00:06:09.060
And if you look at the type definition for say interval and you look at the right hand side of this

111
00:06:09.060 --> 00:06:13.740
box that pops up, you can see that set interval returns a number and that's what we're setting for

112
00:06:13.740 --> 00:06:14.460
this interval.

113
00:06:14.760 --> 00:06:20.040
So in other words, we are going to provide clear interval with a number when this logic runs, when

114
00:06:20.040 --> 00:06:20.880
this method executes.

115
00:06:21.090 --> 00:06:26.580
But if this interval kicks off with an initial value of null and we feel null and declare interval,

116
00:06:26.700 --> 00:06:31.650
that is not a valid value for clear interval because it can only be undefined or number.

117
00:06:31.800 --> 00:06:32.130
Right?

118
00:06:32.160 --> 00:06:33.990
NULL is not the same thing as undefined.

119
00:06:34.290 --> 00:06:39.600
So right here to say the argument you're giving me by by this start interval, that argument could be

120
00:06:39.600 --> 00:06:44.840
of type null and that type null is not assignable to the type that I expect for the parameter of clear

121
00:06:44.850 --> 00:06:49.770
interval, which must be either number or undefined, either a number or basically undefined, which

122
00:06:49.770 --> 00:06:54.690
means either the literal value, undefined or passing, and no argument at all when the function is

123
00:06:54.690 --> 00:06:55.050
invoked.

124
00:06:55.440 --> 00:06:55.770
All right.

125
00:06:55.920 --> 00:06:57.510
So how are we going to fix this problem?

126
00:06:58.290 --> 00:07:03.390
Well, what I'm going to do is I'm going to clarify to TypeScript that interval can now be either a

127
00:07:03.390 --> 00:07:05.040
number or undefined.

128
00:07:05.280 --> 00:07:09.330
So NULL isn't quite correct here because well, now is correct is it's the initial value.

129
00:07:09.420 --> 00:07:14.790
But TypeScript is inference of this as being only now rather than as being some kind of absent value

130
00:07:14.910 --> 00:07:15.900
or a number.

131
00:07:15.900 --> 00:07:19.440
Eventually when set interval runs, this is the part attached.

132
00:07:19.480 --> 00:07:23.880
It is not grasping because it's in a separate method and thus I have to communicate to it.

133
00:07:24.150 --> 00:07:28.410
That interval does have the ability to be a number at some point in the program's execution.

134
00:07:28.740 --> 00:07:33.600
So what I'm going to do is define an interface to describe the return value of this object that is returned

135
00:07:33.780 --> 00:07:35.040
by my data method.

136
00:07:35.340 --> 00:07:37.530
So right here, I'm going to define my new interface.

137
00:07:37.530 --> 00:07:38.550
I'm going to call it data.

138
00:07:39.960 --> 00:07:44.280
And we know that my object is going to have an action property and that is always going to be a string.

139
00:07:45.390 --> 00:07:47.550
And it's also going to have an interval property.

140
00:07:47.910 --> 00:07:53.700
And here, in order to make the type of interval match, the expected types that can flow into the clear

141
00:07:53.700 --> 00:07:55.650
interval function right here.

142
00:07:55.830 --> 00:08:00.000
I'm going to start off by giving it a type of either number or undefined.

143
00:08:00.330 --> 00:08:05.010
So the way that we can say either or in TypeScript is we write our first type and then if we want to

144
00:08:05.010 --> 00:08:08.250
say this or that, we provide a pipe.

145
00:08:08.250 --> 00:08:12.270
So this vertical symbol on your keyboard, for me, it's right above my return key.

146
00:08:12.270 --> 00:08:17.340
If you press shift, this means either or so right here I'm going to write number or undefined.

147
00:08:17.730 --> 00:08:21.630
So what that basically means is interval can be either number or undefined.

148
00:08:22.110 --> 00:08:22.470
All right.

149
00:08:22.840 --> 00:08:29.670
Next thing I'm going to do is I'm going to provide that as the explicit return type of my data method.

150
00:08:29.790 --> 00:08:31.830
I'm going to provide the data interface from up above.

151
00:08:32.130 --> 00:08:36.270
And you can see TypeScript is immediately going to complain because it says, hey, interval, you told

152
00:08:36.270 --> 00:08:40.250
me, can be either number or undefined, but you're actually telling me that intervals of type.

153
00:08:40.260 --> 00:08:40.650
No now.

154
00:08:41.040 --> 00:08:43.560
All right so now on undefined are kind of similar.

155
00:08:43.560 --> 00:08:47.700
They're not exactly the same in JavaScript, but for the purposes of what this thing needs, it's going

156
00:08:47.700 --> 00:08:50.790
to be just fine to replace null with undefined right here.

157
00:08:52.290 --> 00:08:57.060
So now what TypeScript is going to say is you told me that interval is going to be either number or

158
00:08:57.060 --> 00:09:03.150
undefined and then clear interval expects a argument of either number of undefined, which is exactly

159
00:09:03.150 --> 00:09:07.470
what I know this that interval is because you told me it was going to be either number or undefined

160
00:09:07.470 --> 00:09:08.040
as its type.

161
00:09:08.280 --> 00:09:10.860
So now that matches up with what clear interval expects.

162
00:09:11.040 --> 00:09:12.870
And I'm not going to complain anymore.

163
00:09:13.380 --> 00:09:13.610
All right.

164
00:09:13.630 --> 00:09:15.420
We have solved this problem right now.

165
00:09:15.690 --> 00:09:18.720
There's a couple of caveats and a couple of things worth talking about here.

166
00:09:19.020 --> 00:09:19.890
The first is this.

167
00:09:20.730 --> 00:09:25.380
Remember, as I talked about earlier with clear interval, whenever we have something that is either

168
00:09:25.380 --> 00:09:30.810
a type or another type of undefined, what that basically means is that the value is optional.

169
00:09:31.020 --> 00:09:36.750
In other words, if we provide a value for interval, it can be either a number or we don't provide

170
00:09:36.750 --> 00:09:38.220
anything for interval at all.

171
00:09:38.370 --> 00:09:43.440
Because in JavaScript, whenever we access a property that does not exist on an object, the default

172
00:09:43.590 --> 00:09:45.540
value for that will be undefined.

173
00:09:45.900 --> 00:09:50.500
So what I'm trying to get to is an alternative way to write the syntax, instead of saying it's either

174
00:09:50.500 --> 00:09:57.210
a number or undefined, is alternatively saying that interval is simply an optional property, that

175
00:09:57.210 --> 00:10:03.180
my data object may have an interval property and if it is present it is going to be of type number,

176
00:10:03.540 --> 00:10:03.780
right?

177
00:10:03.900 --> 00:10:10.320
And that, you can see is still going to work right here because undefined is is the same thing as basically

178
00:10:10.320 --> 00:10:12.240
not writing interval out at all.

179
00:10:12.510 --> 00:10:17.820
So in other words, this syntax on line 34 is exactly the same as if I just simply didn't include interval

180
00:10:17.820 --> 00:10:18.210
at all.

181
00:10:18.450 --> 00:10:23.760
And you'll notice that if I comma this out, nothing will break below because writing number or undefined

182
00:10:23.760 --> 00:10:28.110
is the exact same thing as making interval an optional property that happens to be a number.

183
00:10:28.500 --> 00:10:28.890
All right.

184
00:10:29.070 --> 00:10:33.900
You'll notice even if I hover my mouse over interval, it will say number or undefined, because that's

185
00:10:33.900 --> 00:10:36.450
how JavaScript works if you don't provide a value.

186
00:10:36.450 --> 00:10:40.920
In other words, if it's optional and you don't actually give it a valid value, it will fall back to

187
00:10:40.920 --> 00:10:45.330
this kind of undefined keyword, undefined value that exists in the language.

188
00:10:46.050 --> 00:10:47.850
So that is totally fine to do here.

189
00:10:48.120 --> 00:10:53.640
And similarly right here, it is up to us as developers to decide which of these two syntactical options

190
00:10:53.640 --> 00:10:54.150
we prefer.

191
00:10:54.330 --> 00:10:59.340
We can either write interval with an explicit value of undefined, which is kind of weird and probably

192
00:10:59.340 --> 00:11:04.170
not recommended in one in one sense of the term because we're saying Here's a property that kind of

193
00:11:04.170 --> 00:11:05.100
doesn't exist.

194
00:11:05.100 --> 00:11:08.310
We're kind of explicitly telling you that it doesn't have a concrete value.

195
00:11:08.310 --> 00:11:09.300
It's undefined, right?

196
00:11:09.480 --> 00:11:12.630
It's basically the same thing as simply leaving it out entirely.

197
00:11:12.870 --> 00:11:17.880
However, one one advantage of explicitly stating that is that another reader can go to this component

198
00:11:17.880 --> 00:11:22.710
and say, okay, so there is this property called interval in the data that is optional, that does

199
00:11:22.710 --> 00:11:27.090
have some importance later because it's going to be used right here and now at least have an understanding

200
00:11:27.090 --> 00:11:31.800
of my initial components data state, even if I understand that one of those properties is kind of this

201
00:11:31.920 --> 00:11:37.620
weird a thing that's not quite has a, doesn't quite have a concrete value, it's undefined and it will

202
00:11:37.620 --> 00:11:39.450
be populated a little bit later.

203
00:11:39.690 --> 00:11:45.240
It's almost like saying this thing will have a valid number some point down the line later, but not

204
00:11:45.240 --> 00:11:46.770
when the data method initializes.

205
00:11:47.010 --> 00:11:48.570
So again, either approach is fine.

206
00:11:48.570 --> 00:11:52.110
I would say that the overall JavaScript community would say that this is not good.

207
00:11:52.110 --> 00:11:56.310
If something is going to be undefined, just leave it out entirely because it accomplishes the same

208
00:11:56.310 --> 00:11:57.390
result for me.

209
00:11:57.390 --> 00:12:01.860
I'm going to leave it in because I think it communicates to future readers what exactly represents and

210
00:12:01.860 --> 00:12:06.570
anything that can help out somebody else in the future, in my mind, is worth the tradeoff of violating

211
00:12:06.570 --> 00:12:08.070
some JavaScript best practice.

212
00:12:08.070 --> 00:12:08.280
Right?

213
00:12:08.460 --> 00:12:11.580
At the end of the day, it's the same tactical result, so language doesn't care.

214
00:12:11.820 --> 00:12:16.290
So at that point, the best thing comes down to how effectively am I communicating what this is doing

215
00:12:16.380 --> 00:12:17.760
to somebody else reading my code.

216
00:12:18.000 --> 00:12:20.760
So I'm going to keep interval explicitly set to undefined.

217
00:12:21.570 --> 00:12:25.830
We can see here that everything else is passing just fine, or at least no violations.

218
00:12:26.100 --> 00:12:28.200
So let's go ahead and also update the test file.

219
00:12:28.440 --> 00:12:34.590
So I'm going to open up headline that test that Jess dragged it to my right and right here, I'm going

220
00:12:34.590 --> 00:12:38.460
to open my file Explorer and change the extension of that file to T.S..

221
00:12:40.230 --> 00:12:40.800
There we go.

222
00:12:40.980 --> 00:12:43.560
Looks like the only issue is on the import of the component.

223
00:12:43.560 --> 00:12:44.940
We've seen this issue before.

224
00:12:45.020 --> 00:12:47.330
All we have to do is make sure it has a dot view extension.

225
00:12:47.630 --> 00:12:52.700
Sometimes view and TypeScript can't understand that it's not a typescript file, it's a view file because

226
00:12:52.700 --> 00:12:57.200
by default TypeScript is going to look for a headline that's so you have to tell it its headline that

227
00:12:57.200 --> 00:12:57.860
view instead.

228
00:12:58.220 --> 00:12:58.910
Save that.

229
00:12:59.090 --> 00:13:03.440
As I scroll down, it doesn't look like there are any other issues in this file, which clears me to

230
00:13:03.440 --> 00:13:05.830
run the test itself.

231
00:13:05.840 --> 00:13:06.470
Then PM run.

232
00:13:06.470 --> 00:13:07.190
Test watch.

233
00:13:08.200 --> 00:13:09.170
I'm going to run that.

234
00:13:09.520 --> 00:13:13.570
And let's see if all of our headline tests pass and.

235
00:13:14.570 --> 00:13:15.130
Drum roll.

236
00:13:15.140 --> 00:13:15.920
Indeed they do.

237
00:13:16.040 --> 00:13:16.370
All right.

238
00:13:16.550 --> 00:13:18.410
So everything is looking good for headline.

239
00:13:18.650 --> 00:13:24.080
And we have moved one more component to TypeScript and of course, encountered some new problems that

240
00:13:24.080 --> 00:13:25.610
we had to fix along the way as well.

241
00:13:25.880 --> 00:13:30.530
So to summarize, whenever you have TypeScript, make the wrong inference, whether it be about a computed

242
00:13:30.530 --> 00:13:36.230
method or the data method, etc. What you can do is either define an inline type annotation or to keep

243
00:13:36.230 --> 00:13:41.420
things a little bit cleaner, just define an interface above that final return value where you describe

244
00:13:41.420 --> 00:13:44.030
the correct proper shape of that data.

245
00:13:44.030 --> 00:13:48.920
So that TypeScript inference is replaced by your more explicit manual declaration, which of course

246
00:13:48.920 --> 00:13:52.340
will help it understand that its original yes was not correct.

247
00:13:52.520 --> 00:13:56.690
And it's going to eliminate the errors because now it has a better understanding of what it is that

248
00:13:56.690 --> 00:13:57.620
it's actually working with.

249
00:13:58.040 --> 00:13:58.340
All right.

250
00:13:58.340 --> 00:13:59.840
That's all there is to cover in this lesson.

251
00:13:59.840 --> 00:14:01.490
So I will see you in the next one.
