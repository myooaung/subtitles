1
00:00:00,450 --> 00:00:00,930
Okay.

2
00:00:00,930 --> 00:00:02,490
So super cool lesson here.

3
00:00:02,490 --> 00:00:07,800
In this lesson, I'm going to introduce a new view concept called input modifiers.

4
00:00:08,160 --> 00:00:14,520
So just like the name suggests, an input modifier allows us to modify how an input works.

5
00:00:14,850 --> 00:00:21,060
It's something we actually add to the V model syntax right here that customizes or modifies how this

6
00:00:21,060 --> 00:00:21,750
input works.

7
00:00:22,120 --> 00:00:23,310
So let me give you an example.

8
00:00:23,850 --> 00:00:28,170
And in order to introduce the example, I want to introduce a problem that we currently have.

9
00:00:28,830 --> 00:00:34,110
So the way our logic is currently set up, every single time the user types, a character, we're going

10
00:00:34,110 --> 00:00:36,540
to rerun this logic right here.

11
00:00:36,870 --> 00:00:42,570
So for example, if the user is searching for the term view, they're going to type the letter V and

12
00:00:42,570 --> 00:00:45,570
viewers are going to detect that there has been some change to the V model.

13
00:00:45,750 --> 00:00:50,190
And because the V model knows that whenever there's a change, it needs to run this logic, it's going

14
00:00:50,190 --> 00:00:56,250
to commit a mutation to the View X store with the value of V, then the user types, the letter U and

15
00:00:56,250 --> 00:01:00,540
this logically runs and then the user types, the letter E and this logic rewrites.

16
00:01:00,810 --> 00:01:03,510
And so a user today can be pretty quick and typing.

17
00:01:03,510 --> 00:01:07,080
So those three characters can happen in less than half a second.

18
00:01:07,320 --> 00:01:12,120
And thus we're going to run at three separate mutations immediately, one after another.

19
00:01:12,130 --> 00:01:12,420
Right.

20
00:01:12,780 --> 00:01:17,850
And as you might probably guess, this is not super efficient, because if we could be a little bit

21
00:01:17,850 --> 00:01:23,580
smarter, we could probably give the user the same experience while at the same time reducing the total

22
00:01:23,580 --> 00:01:25,110
amount of work our app has to do.

23
00:01:25,440 --> 00:01:30,210
For example, we could simply wait until the user's done is done typing and as soon as they're done

24
00:01:30,210 --> 00:01:36,780
typing then we can simply commit one mutation to the store with the most up to date value and that would

25
00:01:36,780 --> 00:01:41,730
accomplish the exact same thing but not have to make the app work so hard by committing all of these

26
00:01:41,730 --> 00:01:43,380
smaller mutations along the way.

27
00:01:43,410 --> 00:01:43,740
Right.

28
00:01:44,520 --> 00:01:46,620
Especially users typing a lot of different characters.

29
00:01:46,620 --> 00:01:47,850
Like ten characters, right?

30
00:01:47,850 --> 00:01:49,350
For a big A name.

31
00:01:49,740 --> 00:01:54,570
Do we really want to commit ten mutations if we can make the app feel faster and speedier by just waiting

32
00:01:54,570 --> 00:01:56,880
until the user's done and then committing one right?

33
00:01:57,000 --> 00:02:02,610
It's kind of smart and there's actually a technical term for this that exists outside of you.

34
00:02:02,610 --> 00:02:06,530
And that technical terminology for this concept is called deep bouncing.

35
00:02:06,540 --> 00:02:12,900
If you want to look it up, it's D and then bounce like bouncing a ball blue and C and all that D bounce

36
00:02:12,900 --> 00:02:19,680
means is basically delaying an operation up until a right moment or after a given interval interval.

37
00:02:19,860 --> 00:02:21,180
And that's exactly what we want to do here.

38
00:02:21,540 --> 00:02:24,460
And the good news is, is that view makes it super simple.

39
00:02:24,480 --> 00:02:28,170
This is something that is so common that Vue builds it directly into its library.

40
00:02:28,500 --> 00:02:31,470
And it's going to look like this right here after V model.

41
00:02:31,800 --> 00:02:36,600
We're going to put a dot and immediately you're going to see that V code offers me this prompt.

42
00:02:36,780 --> 00:02:42,540
This is actually all of the input modifiers that are available on our text, the v model for this text

43
00:02:42,540 --> 00:02:42,870
input.

44
00:02:42,870 --> 00:02:43,140
Right.

45
00:02:43,380 --> 00:02:46,230
And the one we want right here is the very first one lazy.

46
00:02:46,440 --> 00:02:48,160
So I'm just going to press enter to confirm it.

47
00:02:48,510 --> 00:02:53,730
And that's going to be the syntax V model, then a dot, then the input modifier which is called lazy,

48
00:02:53,730 --> 00:02:56,820
and then the actual reference to the reactive object that is changing.

49
00:02:57,480 --> 00:03:00,180
So you might be curious, why is it called lazy?

50
00:03:00,390 --> 00:03:03,780
Well, if you think about a lazy person in real life, what is a lazy person?

51
00:03:03,900 --> 00:03:07,770
It's someone who doesn't want to do any work until the last possible second.

52
00:03:07,770 --> 00:03:08,040
Right.

53
00:03:08,310 --> 00:03:11,790
So it's actually a pretty fitting term because it's very descriptive of what's going on here.

54
00:03:12,000 --> 00:03:16,860
Vue is going to delay doing any of this reactive updating until the typing is done.

55
00:03:17,070 --> 00:03:21,300
And more specifically, I think it's going to be when the user clicks out of the actual input.

56
00:03:21,540 --> 00:03:25,500
So the user is going to type five letters, then they're going to click out and then Vue says, okay,

57
00:03:25,650 --> 00:03:26,520
I'm going to be lazy.

58
00:03:26,520 --> 00:03:29,100
I'm going to wait until the very last possible moment to do work.

59
00:03:29,250 --> 00:03:30,870
Now I know the user is done typing.

60
00:03:30,870 --> 00:03:35,070
Now I'm going to run this logic here which is going to commit the mutation.

61
00:03:35,340 --> 00:03:38,940
So it really is as simple as adding this dot lazy in our code.

62
00:03:39,240 --> 00:03:42,360
So let's save that and let's transition to Chrome to see this in action.

63
00:03:43,280 --> 00:03:47,780
So I'm going to go to Chrome and just to be super safe, I'm also going to refresh because I have seen

64
00:03:47,780 --> 00:03:50,900
this not work earlier when I did not refresh.

65
00:03:51,290 --> 00:03:55,910
So here I have skills and qualifications and we saw earlier in the previous lesson, of course, that

66
00:03:55,910 --> 00:04:01,250
as we typed multiple characters, they would immediately appear right here in skill search term because

67
00:04:01,250 --> 00:04:06,650
every single character, again issued a new mutation, committed a new mutation with the most up to

68
00:04:06,650 --> 00:04:08,570
date value here, which updated this.

69
00:04:08,810 --> 00:04:12,560
Now notice what happens is I type, for example, five characters in a row.

70
00:04:12,890 --> 00:04:15,890
You're going to notice the skill search term is not going to update immediately.

71
00:04:16,070 --> 00:04:16,760
So here we go.

72
00:04:16,760 --> 00:04:18,020
Here is five random characters.

73
00:04:18,260 --> 00:04:21,920
And notice on the right hand side that skill search term has not updated.

74
00:04:22,070 --> 00:04:24,020
So we have not yet committed a mutation.

75
00:04:24,320 --> 00:04:30,950
But as soon as the user either clicks out of this box or presses enter, then that lazy modifier is

76
00:04:30,950 --> 00:04:34,760
going to click in the gear and I'm going to click right here and notice there it is.

77
00:04:34,880 --> 00:04:40,220
So as soon as I click out of that box, then View says, okay, I've been lazy, I don't want to do

78
00:04:40,220 --> 00:04:40,670
any work.

79
00:04:40,700 --> 00:04:42,050
Okay, now I have to do some work.

80
00:04:42,200 --> 00:04:44,630
Now I'm going to commit one mutation, right?

81
00:04:44,900 --> 00:04:47,720
The same exact rules are going to apply if the user presses enter.

82
00:04:47,900 --> 00:04:53,660
So for example, if I remove a couple of characters here, notice that none of those issues mutation

83
00:04:53,660 --> 00:04:59,600
you can see my skill search from in the view X store is the same but as soon as I press enter that immediately

84
00:04:59,600 --> 00:05:01,610
registers that and that's typically what users do.

85
00:05:01,610 --> 00:05:03,860
They either press enter or tab or they click out.

86
00:05:04,070 --> 00:05:09,500
As soon as Vue detects those things that indicate the user is done expressing their thought and entering

87
00:05:09,500 --> 00:05:10,400
their input.

88
00:05:10,640 --> 00:05:15,110
Then we're going to update that thing right here, and that's really all there is to cover in this lesson.

89
00:05:15,110 --> 00:05:16,820
It's called an input modifier.

90
00:05:16,820 --> 00:05:20,270
That's the actual view feature because it modifies how an input works.

91
00:05:20,450 --> 00:05:27,110
In this case, we used the lazy input modifier, which delays updating the reactive data until the user

92
00:05:27,110 --> 00:05:29,960
is done typing and indicates so with a manual action.

93
00:05:30,200 --> 00:05:31,340
Why do we want to do this?

94
00:05:31,340 --> 00:05:35,690
Because it means the app is probably going to run faster and more efficiently because we do not need

95
00:05:35,690 --> 00:05:39,860
to commit a mutation for every individual character that the user types.

96
00:05:40,220 --> 00:05:40,520
All right.

97
00:05:40,520 --> 00:05:42,410
That's all there is to cover in this lesson.

98
00:05:42,410 --> 00:05:43,940
So I will see you in the next one.
