WEBVTT
1
00:00:00.390 --> 00:00:01.200
Okay.

2
00:00:01.200 --> 00:00:07.800
So now that we have adjusted our text input component implementation to accept a value prop, we obviously

3
00:00:07.800 --> 00:00:12.450
have to feed that value prop to the text input component wherever we render it.

4
00:00:12.660 --> 00:00:15.450
And we are currently rendering it twice in job search form.

5
00:00:15.690 --> 00:00:17.280
So here is the first location.

6
00:00:17.280 --> 00:00:18.990
This is for the job role.

7
00:00:19.650 --> 00:00:23.010
And so of course, I do need to provide a value prop right now.

8
00:00:23.310 --> 00:00:26.190
Now, I do want to provide a dynamic reference.

9
00:00:26.370 --> 00:00:32.040
And the dynamic reference that I want to provide is going to be whatever is the current value of the

10
00:00:32.040 --> 00:00:34.470
role data property.

11
00:00:34.710 --> 00:00:36.660
So I'm going to write value equals role.

12
00:00:36.870 --> 00:00:42.750
But we know of course, that this will not work because this will provide the actual string role role.

13
00:00:43.140 --> 00:00:48.840
We want a dynamic reference to whatever the role data property happens to be at that moment.

14
00:00:49.140 --> 00:00:52.500
So of course, in order to do that, we need to use the V bind syntax.

15
00:00:52.740 --> 00:00:55.560
So I need to put a colon in front of this value prop.

16
00:00:56.190 --> 00:00:58.410
We're going to talk about the entire flow in just a second.

17
00:00:58.650 --> 00:01:03.810
But we are providing the value prop to my text input component, and it's going to be whatever is the

18
00:01:03.810 --> 00:01:07.320
value of the role data property on my job search form.

19
00:01:07.890 --> 00:01:12.240
Let's now apply the exact same logic to this text input component down below.

20
00:01:12.570 --> 00:01:18.000
We demanded in the previous lesson that we have to get a required value prop in text input.

21
00:01:18.180 --> 00:01:20.320
So I have to provide it right here in the parent.

22
00:01:20.340 --> 00:01:22.620
Any time I render a text input.

23
00:01:22.920 --> 00:01:24.480
So we need to give a value prop.

24
00:01:25.500 --> 00:01:28.590
And of course, if we wanted to provide any generic string, we could.

25
00:01:28.770 --> 00:01:30.420
And we would not need to use V bind.

26
00:01:30.570 --> 00:01:36.720
But since you want to bind this to the location data property down below and that is again this value

27
00:01:36.720 --> 00:01:40.770
right here because that is a dynamic reference to a data property.

28
00:01:40.770 --> 00:01:41.760
We need to v bind.

29
00:01:41.970 --> 00:01:45.930
We can do either this syntax or the shortcut of colon value.

30
00:01:46.590 --> 00:01:47.210
Okay.

31
00:01:47.370 --> 00:01:49.140
And this should work.

32
00:01:49.350 --> 00:01:49.680
All right.

33
00:01:49.680 --> 00:01:52.320
So let's talk about the flow of how this thing works.

34
00:01:53.100 --> 00:01:59.850
So we have created a connection between the value prop and whatever the role property is on job search

35
00:01:59.850 --> 00:02:00.120
form.

36
00:02:00.330 --> 00:02:06.060
So when job search form renders for the first time, the role that a property is an empty string, right?

37
00:02:06.330 --> 00:02:10.830
So we're going to pass in an empty string for the value prop right here.

38
00:02:11.610 --> 00:02:14.850
What does the text input component do with that empty string?

39
00:02:15.060 --> 00:02:21.570
Well, it binds that prop a value with the value attribute on the input element.

40
00:02:21.870 --> 00:02:27.230
So because we pass an empty string, the input will render with nothing inside it.

41
00:02:27.230 --> 00:02:29.340
It's an empty string, which basically means blank text.

42
00:02:30.590 --> 00:02:31.820
What does the user do next?

43
00:02:31.820 --> 00:02:35.690
They click into the input and they type a character.

44
00:02:35.960 --> 00:02:39.530
What does that do that causes the browser to trigger an input event?

45
00:02:39.920 --> 00:02:47.180
We react to that v to that event by using the VON Directive, which is the shortcut of the sign.

46
00:02:47.390 --> 00:02:53.690
And whenever the user types a character, we invoke the handle input method on the text input component.

47
00:02:54.050 --> 00:02:55.940
So that's going to run this method down below.

48
00:02:55.940 --> 00:02:59.210
And of course Vue is going to pass the event object to the method.

49
00:02:59.510 --> 00:03:04.700
From that event object, we can access this event, target that value property to get whatever is the

50
00:03:04.700 --> 00:03:08.090
current value that the users typed into the input.

51
00:03:08.390 --> 00:03:10.760
So the very first event of course will be a single character.

52
00:03:11.330 --> 00:03:16.580
What we're going to do at that point is we're not going to overwrite any local data on text input because

53
00:03:16.580 --> 00:03:18.200
we no longer have any local data.

54
00:03:18.440 --> 00:03:23.210
We're simply going to emit an event upwards that we call the handle input, and we're going to provide

55
00:03:23.210 --> 00:03:25.490
whatever is the current value in that input field.

56
00:03:26.210 --> 00:03:32.270
So in the parent in job search form, we're going to receive and react to that handle input event right

57
00:03:32.270 --> 00:03:37.220
here using the same beyond syntax vision directive syntax to be more precise.

58
00:03:37.640 --> 00:03:42.410
And as we talked about, what we're going to do is we're going to get that payload from the dollar sign

59
00:03:42.410 --> 00:03:48.350
event, a name which of course represents this thing right here, the actual argument of the string

60
00:03:48.350 --> 00:03:49.880
representing the user entry.

61
00:03:50.180 --> 00:03:56.330
And then we're going to overwrite the role data property in line with the current input entry.

62
00:03:57.110 --> 00:04:02.990
Now what we have done is effectively change role from an empty string to whatever character the user

63
00:04:02.990 --> 00:04:03.560
has provided.

64
00:04:03.590 --> 00:04:08.570
So behind the scenes, what Vue does is effectively change this role data property to be something like

65
00:04:08.570 --> 00:04:09.150
this, right?

66
00:04:09.170 --> 00:04:10.610
It's going to have some kind of character in it.

67
00:04:11.120 --> 00:04:12.770
Now what happens then?

68
00:04:12.980 --> 00:04:19.970
Well, Vue says you have changed something in my data, something called role, which means I need to

69
00:04:19.970 --> 00:04:21.620
re render the template.

70
00:04:22.190 --> 00:04:28.580
Well, when you read renders that template, it knows that the role data property is still attached

71
00:04:28.580 --> 00:04:33.650
using v bind to the value prop on my text input component.

72
00:04:34.130 --> 00:04:40.250
So because the value of role has changed and we have bound the value prop, Vue says I need to pass

73
00:04:40.250 --> 00:04:48.320
the new value of role to my value prop of my text input component data has changed up here, so I need

74
00:04:48.320 --> 00:04:49.940
to flow it down to my child.

75
00:04:50.390 --> 00:04:54.920
So the new value of role is that single character.

76
00:04:55.160 --> 00:04:56.900
It flows down to the value prop.

77
00:04:57.110 --> 00:04:59.000
And what do we do with that value prop?

78
00:04:59.000 --> 00:05:06.020
In my text input child component, we populate the value attribute on the input element with whatever

79
00:05:06.200 --> 00:05:07.250
the user has typed.

80
00:05:07.760 --> 00:05:12.440
So it's actually a more roundabout way of getting data to the child.

81
00:05:12.440 --> 00:05:17.990
So just to reiterate the user, let's say types the letter A, we send the string A up to the parent

82
00:05:17.990 --> 00:05:20.060
via the handle input event.

83
00:05:20.360 --> 00:05:24.830
We react to that and then up here we save the value a to the role.

84
00:05:24.890 --> 00:05:31.850
Property view detects that change and then passes the value of an A string to the value prop of the

85
00:05:31.850 --> 00:05:32.330
child.

86
00:05:32.510 --> 00:05:39.170
The child receives that string of A and it populates that prop right here because it knows to keep the

87
00:05:39.170 --> 00:05:44.720
value attribute on my input element dynamic to whatever is the value of the value prop.

88
00:05:45.080 --> 00:05:51.860
That value prop is now the string at a so we rewrite the value attribute and now our input reflects

89
00:05:51.860 --> 00:05:52.610
that character.

90
00:05:53.270 --> 00:05:59.300
So we're going to do a full journey to our parent and back down before the browser is going to re render

91
00:05:59.300 --> 00:06:00.500
the A in the input field.

92
00:06:00.650 --> 00:06:04.940
Of course, this all takes place in a matter of milliseconds, so it's instantaneous.

93
00:06:05.210 --> 00:06:09.470
But the key takeaway here is at no point is text input actually storing that data locally.

94
00:06:09.620 --> 00:06:14.090
It just sends a message up, the parent updates, the parent gets some new values, passes it down,

95
00:06:14.090 --> 00:06:16.490
and we immediately see that change render in text input.

96
00:06:16.640 --> 00:06:19.070
But text input is not storing any data of its own.

97
00:06:20.110 --> 00:06:20.470
All right.

98
00:06:20.770 --> 00:06:23.830
So let me transition to the browser and we can take a look at this in action.

99
00:06:23.830 --> 00:06:24.760
So let me bring up my view.

100
00:06:24.760 --> 00:06:25.360
Dev tools.

101
00:06:27.870 --> 00:06:29.790
And let's see, here's our job search form.

102
00:06:29.790 --> 00:06:30.570
Here's our text input.

103
00:06:30.580 --> 00:06:31.410
Let's start with this one.

104
00:06:31.410 --> 00:06:31.620
Right?

105
00:06:31.620 --> 00:06:33.420
So notice it's prop.

106
00:06:33.420 --> 00:06:35.520
A value has nothing right now.

107
00:06:35.520 --> 00:06:39.000
It's an empty string and it has no local data.

108
00:06:39.060 --> 00:06:41.250
So when I type a letter here like S.

109
00:06:42.280 --> 00:06:43.810
Well notice that this as populates.

110
00:06:44.050 --> 00:06:48.850
But of course, what happens is this text input emits the handle input event upwards.

111
00:06:49.180 --> 00:06:51.490
Job search form receives that event.

112
00:06:51.670 --> 00:07:00.370
It overwrites its own role data property and that change flows down back to the text input via the prop

113
00:07:00.370 --> 00:07:03.820
called value that the job search form gives it right.

114
00:07:04.090 --> 00:07:10.210
So first thing happens here, flow is up to here and job search form this updates and flows back down

115
00:07:10.210 --> 00:07:13.450
to text input and that rule applies every time we type a character.

116
00:07:13.450 --> 00:07:18.820
So software right here, here we'll do something like let's do Houston once again.

117
00:07:18.820 --> 00:07:24.280
Every time we do this for triggering an event, that event in our method triggers the handle input event

118
00:07:24.640 --> 00:07:28.060
upwards, the job search form, it updates its data properties.

119
00:07:28.210 --> 00:07:33.700
Each one of these properties is bound using v bind to a prop and that flows down to the respective text

120
00:07:33.700 --> 00:07:35.380
input component and it's value prop.

121
00:07:35.590 --> 00:07:35.950
Okay.

122
00:07:36.130 --> 00:07:40.480
I apologize for the endless repetition in this lesson, but it is kind of a complex idea to understand.

123
00:07:40.720 --> 00:07:45.850
Hopefully this all makes sense and this allows us to remove any local data storage from text input and

124
00:07:45.850 --> 00:07:47.980
also solve the data duplication problem.

125
00:07:48.160 --> 00:07:52.390
There is only one place where we are storing that data and that is in our job search form.

126
00:07:52.390 --> 00:07:58.150
And if our other components need that data, such as our text inputs, we're just flowing it down through

127
00:07:58.150 --> 00:07:59.980
props without actually duplicating it.

128
00:08:00.010 --> 00:08:01.540
So there's only a single source of truth.

129
00:08:01.750 --> 00:08:02.080
All right.

130
00:08:02.320 --> 00:08:08.200
This is almost like a reference to our parents data through the form of props, but it's not a duplication.

131
00:08:08.350 --> 00:08:11.350
It's just a reference to that original data property on our parent.

132
00:08:12.100 --> 00:08:12.490
All right.

133
00:08:12.730 --> 00:08:14.290
That's all there is to cover in this lesson.

134
00:08:14.290 --> 00:08:15.760
So I will see you in the next one.
