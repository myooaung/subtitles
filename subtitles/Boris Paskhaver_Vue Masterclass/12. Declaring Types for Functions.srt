1
00:00:00,530 --> 00:00:01,520
All right.

2
00:00:01,520 --> 00:00:07,940
So in this lesson, we'll talk about declaring types for functions, both traditional functions and

3
00:00:07,940 --> 00:00:08,900
arrow functions.

4
00:00:09,170 --> 00:00:11,570
And there's actually two pieces we have to worry about.

5
00:00:11,810 --> 00:00:17,570
The first is declaring types for the parameters of the function, and the second is declaring the type

6
00:00:17,570 --> 00:00:19,460
of the functions return value.

7
00:00:19,850 --> 00:00:21,230
So let's dive right into it.

8
00:00:21,440 --> 00:00:27,170
Let's say I'm going to define a function called Multiply, which will accept two numbers, multiply

9
00:00:27,170 --> 00:00:28,700
them and return their product.

10
00:00:29,030 --> 00:00:34,910
So in traditional JavaScript that would look like this, I would have a function, I would call it multiply.

11
00:00:35,660 --> 00:00:38,900
I'm going to provide it with two parameters and let's call them A and B.

12
00:00:39,140 --> 00:00:44,480
And here in the body of this function, I'm going to return the product, which means multiplying A

13
00:00:44,630 --> 00:00:48,860
by B, so immediately you can see that TypeScript is not happy.

14
00:00:48,860 --> 00:00:52,160
And if I hover my mouse over the two violations, it's going to tell us.

15
00:00:52,340 --> 00:00:57,890
Parameter A implicitly has an any type and parameter B also implicitly has an any type.

16
00:00:58,160 --> 00:01:03,530
In other words, TypeScript is unable to infer what the type of these values is, which affects its

17
00:01:03,530 --> 00:01:08,180
ability to calculate whether the body of the function is performing its logic correctly.

18
00:01:08,540 --> 00:01:14,450
So the syntax for declaring parameter types is basically the exact same as declaring types for variables

19
00:01:14,450 --> 00:01:15,020
or constants.

20
00:01:15,230 --> 00:01:17,990
We're going to put a colon followed by the actual type.

21
00:01:18,260 --> 00:01:23,210
So right here for a I'm going to provide a colon in a space and then tell TypeScript that A is going

22
00:01:23,210 --> 00:01:23,870
to be a number.

23
00:01:24,170 --> 00:01:27,920
And right here for B, the exact same thing, a colon and a space.

24
00:01:27,920 --> 00:01:29,240
And then this is a number as well.

25
00:01:29,780 --> 00:01:35,390
So now I'm going to hover my mouse over, multiply, and we're going to see the exact same types.

26
00:01:35,390 --> 00:01:37,250
We're going to see a number, B number.

27
00:01:37,430 --> 00:01:42,410
You'll also notice on the right hand side, we're going to have a colon and number as well.

28
00:01:42,590 --> 00:01:46,670
And what that is telling us is the type of the return value.

29
00:01:46,880 --> 00:01:50,930
So in other words, the multiply function is going to return a value of type number.

30
00:01:51,230 --> 00:01:56,630
And even though we didn't explicitly declare that the reason TypeScript is able to figure it out is

31
00:01:56,630 --> 00:01:58,910
because it just does the logical thinking, right?

32
00:01:58,910 --> 00:02:03,530
It says You're going to give me A and B, which I know our numbers in the body of this function are

33
00:02:03,530 --> 00:02:04,610
going to multiply them.

34
00:02:04,730 --> 00:02:09,260
So knowing that and B, our numbers, when you multiply two numbers together, I'm going to get a number

35
00:02:09,260 --> 00:02:10,640
and then you're returning that.

36
00:02:10,760 --> 00:02:14,960
So I can infer that the return value of multiply will be a number as well.

37
00:02:15,050 --> 00:02:17,300
And that's how TypeScript reduces that for you.

38
00:02:17,900 --> 00:02:23,930
Now, if you want to explicitly declare that the return value of the multiply function will be of type

39
00:02:23,930 --> 00:02:29,990
number, we simply provide a colon after the parameter list and then declare the type of the return

40
00:02:29,990 --> 00:02:30,920
value afterwards.

41
00:02:31,160 --> 00:02:34,250
So right here, if I do colon then number.

42
00:02:34,250 --> 00:02:38,960
What I'm saying is that the multiply function must return a value of type A number.

43
00:02:39,350 --> 00:02:43,910
So if I hover my mouse over multiply, we're going to get the exact same thing we saw a minute ago.

44
00:02:44,060 --> 00:02:49,460
However, right now we are explicitly manually declaring in line at the return value of multiply will

45
00:02:49,460 --> 00:02:50,450
be a number.

46
00:02:50,740 --> 00:02:51,110
All right.

47
00:02:51,110 --> 00:02:53,060
The same rules will apply for arrow function.

48
00:02:53,060 --> 00:02:54,320
So let me show you how that's going to work.

49
00:02:54,560 --> 00:02:55,760
So I'm going to comment this out.

50
00:02:56,180 --> 00:03:00,140
So right here, I'm going to create a concept called multiply right here.

51
00:03:00,140 --> 00:03:04,460
I'm going to declare a arrow function and in here I'm going to return something.

52
00:03:04,640 --> 00:03:06,080
Let's say I have two parameters.

53
00:03:06,080 --> 00:03:10,040
They're going to be A and B, and right here I'm going to return eight times B, we're going to get

54
00:03:10,040 --> 00:03:11,600
the exact same problem.

55
00:03:11,780 --> 00:03:13,040
That's no issue for us.

56
00:03:13,040 --> 00:03:17,990
The exact same syntax applies provide a colon and the type provide a colon and the type.

57
00:03:18,200 --> 00:03:24,500
And now TypeScript is happy if we want to also explicitly state the return value of my arrow function

58
00:03:24,500 --> 00:03:27,140
right here I provided after my parameter list.

59
00:03:27,320 --> 00:03:29,270
So right here colon number.

60
00:03:29,450 --> 00:03:34,820
This multiply function will produce a return value that has other type number and this syntax will also

61
00:03:34,820 --> 00:03:39,920
work by the way, if we do implicit returns, remember in JavaScript, in and in TypeScript as well,

62
00:03:40,070 --> 00:03:45,140
if we have a one line evaluation and we want that one line evaluation to be the final return value,

63
00:03:45,290 --> 00:03:48,380
we can actually skip the curly braces and the return keyword.

64
00:03:48,530 --> 00:03:54,200
We can simply do a times V and the syntax is totally valid and it's also going to be totally valid if

65
00:03:54,200 --> 00:03:59,150
we leave out this number, because TypeScript can infer, given that we're feeding in two numbers and

66
00:03:59,150 --> 00:04:05,150
then we're multiplying them, it can infer that the return value of multiply is also going to be a number

67
00:04:05,150 --> 00:04:05,690
as well.

68
00:04:05,810 --> 00:04:07,340
So this part is kind of optional.

69
00:04:07,340 --> 00:04:10,580
I know some developers prefer to keep things as light as possible.

70
00:04:10,580 --> 00:04:13,880
Other developers like to be explicit, to remind readers of what's going on.

71
00:04:14,150 --> 00:04:14,990
But there you have it.

72
00:04:15,260 --> 00:04:15,560
All right.

73
00:04:15,560 --> 00:04:20,210
And once again, just like always, TypeScript is going to be helpful in many different ways.

74
00:04:20,450 --> 00:04:25,550
So if we invoke multiply correctly with two arguments of the right type, like three and five, we're

75
00:04:25,550 --> 00:04:26,570
not going to have any issues.

76
00:04:26,750 --> 00:04:29,930
But as soon as we commit any kind of violation, TypeScript will warn us.

77
00:04:30,170 --> 00:04:34,440
So for example, if I accidentally provide a string of five, we're going to see it's going to it's

78
00:04:34,460 --> 00:04:39,680
going to say, hey, argument of type string is not assignable to a parameter of type number.

79
00:04:39,890 --> 00:04:45,020
You told me this parameter of B was going to be a number and now you're giving me a string, so I'm

80
00:04:45,020 --> 00:04:47,060
going to be unhappy and complain about that.

81
00:04:47,330 --> 00:04:52,550
Similarly, TypeScript is going to complain if we provide too many arguments or not enough arguments.

82
00:04:52,820 --> 00:04:58,100
So for example, if I try to provide three by itself, we can see it's going to say you I expected two

83
00:04:58,100 --> 00:04:59,450
arguments, but I got one.

84
00:04:59,480 --> 00:05:00,050
You told me.

85
00:05:00,130 --> 00:05:03,220
That you're going to give me two values, A and B, but I only got one.

86
00:05:03,310 --> 00:05:06,370
And it says here, an argument for B was not provided.

87
00:05:06,580 --> 00:05:11,200
So it's validating the right number of arguments and it's also validating the right type of argument.

88
00:05:11,500 --> 00:05:16,720
Similarly, if I provide too many arguments like three, five, eight, even though our multiply definition

89
00:05:16,720 --> 00:05:17,590
expects only two.

90
00:05:17,920 --> 00:05:22,480
Same thing types of statute is going to say, hey, I expected two arguments, but I got three instead

91
00:05:22,480 --> 00:05:22,810
from you.

92
00:05:23,020 --> 00:05:27,640
So once again, it's going to raise these complaints until you rearrange your code to a solution that

93
00:05:27,640 --> 00:05:28,990
is actually proper.

94
00:05:29,260 --> 00:05:29,620
All right.

95
00:05:29,890 --> 00:05:33,450
That's how we declare types for functions, and it's all there is to cover in this lesson.

96
00:05:33,460 --> 00:05:34,960
So I will see you next one.
