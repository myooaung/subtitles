1
00:00:00,240 --> 00:00:01,170
All right.

2
00:00:01,170 --> 00:00:07,980
So we are back in our action button component and now we have everything we need to wire up our secondary

3
00:00:07,980 --> 00:00:08,900
button style.

4
00:00:09,150 --> 00:00:14,400
This is going to be the second version of the button, which is going to have a white background and

5
00:00:14,400 --> 00:00:15,180
blue font.

6
00:00:15,360 --> 00:00:20,340
And those two colors are going to be inverted whenever we hover our mouse over the button.

7
00:00:20,760 --> 00:00:24,930
So the first thing I want to do is scroll down to the style section of my action button.

8
00:00:24,930 --> 00:00:27,990
And here we have our button styles and our primary class styles.

9
00:00:28,320 --> 00:00:31,740
And I'm going to add a new class here called Secondary.

10
00:00:33,450 --> 00:00:37,410
And I'm once again going to use the tailwind to apply directive.

11
00:00:37,440 --> 00:00:43,830
This is going to allow us to write down some tailwind access classes in line here, which will be applied

12
00:00:43,830 --> 00:00:48,210
whenever we use the secondary access class on any of our HTML elements.

13
00:00:48,570 --> 00:00:50,740
So let's begin with our text color.

14
00:00:50,760 --> 00:00:53,670
So we're going to make our text brand blue one.

15
00:00:54,420 --> 00:00:57,510
Then I want to make sure my background is going to be transparent.

16
00:00:57,510 --> 00:01:00,630
So I'll use the big transparent class right here.

17
00:01:00,960 --> 00:01:05,160
And then the only other detail we have to take over is our hover state.

18
00:01:05,430 --> 00:01:11,370
So as a reminder, whenever we want to apply a tailwind class on hover, we need to prefix that class

19
00:01:11,370 --> 00:01:12,480
with the hover keyword.

20
00:01:12,780 --> 00:01:18,620
So on Hover, I want to have my new blue color serve as my background.

21
00:01:18,630 --> 00:01:21,960
So I'm going to say here big brand blue too.

22
00:01:22,350 --> 00:01:28,260
So as a reminder, in the previous lesson, we added this brand blue to color to our tailwind config

23
00:01:28,920 --> 00:01:36,600
file, which means tailwind will automatically generate a new CSR class called Big Dash, whatever the

24
00:01:36,600 --> 00:01:38,760
color is that we provided automatically.

25
00:01:38,910 --> 00:01:44,910
And then we'll also prefix it with hover to make sure we only apply this whenever we hover our mouse

26
00:01:44,910 --> 00:01:47,370
over whatever element where applying this class to.

27
00:01:47,400 --> 00:01:53,310
So only on hover will we show a background that is our brand blue to color that we defined.

28
00:01:53,370 --> 00:01:53,670
All right.

29
00:01:53,880 --> 00:01:57,300
And also on hover, we want to switch up the text color.

30
00:01:57,480 --> 00:01:59,520
And so we're going to have text dash white.

31
00:02:00,270 --> 00:02:03,120
This is a built in tailwind utility class.

32
00:02:03,120 --> 00:02:03,780
Makes sense.

33
00:02:03,780 --> 00:02:05,280
It makes the text color white.

34
00:02:05,610 --> 00:02:06,750
So I'm going to save this.

35
00:02:06,750 --> 00:02:09,180
And now we have our secondary button style.

36
00:02:09,360 --> 00:02:13,500
But of course, it's not being applied anywhere in our our template.

37
00:02:13,500 --> 00:02:13,710
Right?

38
00:02:14,010 --> 00:02:18,720
So in our template, we have this reference to button class, which is a computed property that returns

39
00:02:18,720 --> 00:02:19,830
this JavaScript object.

40
00:02:20,040 --> 00:02:27,210
And as a reminder, the way this works with the binding to the class attribute is if a given key here

41
00:02:27,210 --> 00:02:36,090
has a value of true, then tailwind or rather view will apply that XSS class to the given element.

42
00:02:36,330 --> 00:02:42,480
So if we have primary set to true, then the primary class will be applied to our button and then these

43
00:02:42,480 --> 00:02:44,340
styles will be applied to the button.

44
00:02:44,640 --> 00:02:49,320
Similarly, if we write down secondary right here and if we were to, for example, give it true and

45
00:02:49,320 --> 00:02:55,830
hard code that then we would automatically always apply these secondary styles right here to the button.

46
00:02:56,580 --> 00:03:02,580
Now, of course, what we want to do is to have only one of these two styles be applied.

47
00:03:02,880 --> 00:03:08,730
We're always going to have either the primary styles, which is the first version of the button or the

48
00:03:08,730 --> 00:03:14,040
secondary styles for the button, which is the alternate font color and background color, but never

49
00:03:14,040 --> 00:03:15,720
both at the same time.

50
00:03:15,870 --> 00:03:16,110
Right?

51
00:03:16,110 --> 00:03:18,270
So we never want this to both be true.

52
00:03:18,570 --> 00:03:24,480
So, for example, if I were to set this to this that primary, then right now the component would start

53
00:03:24,480 --> 00:03:31,230
off with primary being evaluated to true, which means the evaluation here would lead to both the primary

54
00:03:31,230 --> 00:03:34,770
and the secondary classes being applied, which is not what we want.

55
00:03:35,130 --> 00:03:40,970
So what we can do is to invert the value that we provide to our secondary property.

56
00:03:40,980 --> 00:03:45,930
So what I can do here is invert the Boolean with an exclamation point.

57
00:03:46,290 --> 00:03:51,180
So the way this works is whatever boolean we have, the exclamation point will give you the opposite

58
00:03:51,180 --> 00:03:51,480
one.

59
00:03:51,810 --> 00:03:56,670
So for example, if primary is such a true right here as our initial data property, then this would

60
00:03:56,670 --> 00:03:57,510
value to true.

61
00:03:57,750 --> 00:04:05,130
And this will evaluate to the inverse or the opposite of true, which is false, which means view will

62
00:04:05,130 --> 00:04:09,660
apply the primary class but not the secondary class to our button.

63
00:04:10,050 --> 00:04:17,340
Conversely, if the primary data is set to false, well, this would lead to false and the inversion

64
00:04:17,340 --> 00:04:19,560
of a boolean of false will be true.

65
00:04:20,070 --> 00:04:25,140
So if the primary data key is set to false, we're going to get the secondary version of the button.

66
00:04:25,320 --> 00:04:29,190
And if our primary key is set to true, then we're going to get the primary version of the button.

67
00:04:29,400 --> 00:04:34,680
We're going to have two completely different styles be rendered by view based on the changing of the

68
00:04:34,680 --> 00:04:36,840
primary data property.

69
00:04:36,840 --> 00:04:37,140
Right.

70
00:04:37,350 --> 00:04:40,710
And at each time, we're always going to apply these styles.

71
00:04:40,710 --> 00:04:45,720
By the way, these generic button styles of padding and rounded corners will always be applied.

72
00:04:45,840 --> 00:04:51,480
But now with this setup, we're only going to ever apply either one, but not both of the primary and

73
00:04:51,480 --> 00:04:52,410
secondary classes.

74
00:04:52,710 --> 00:04:54,810
So we can take a look at this in our browser.

75
00:04:54,810 --> 00:05:00,270
I'm going to remove all these comments and go back to our browser and open up my view devtools.

76
00:05:00,450 --> 00:05:03,960
So we start off of course with our primary version of the button.

77
00:05:04,230 --> 00:05:11,070
And if I go to my view dev tools and I look at my component, we'll see that our data is primary set

78
00:05:11,070 --> 00:05:11,670
to true.

79
00:05:11,760 --> 00:05:16,770
So true activates the primary access class, which applies the traditional buttons down.

80
00:05:17,040 --> 00:05:22,080
But let's look at what's going to happen when I edit this primary data property to false.

81
00:05:22,350 --> 00:05:24,840
So a couple of changes are going to cascade.

82
00:05:25,050 --> 00:05:31,470
Number one, our computed property will repeat because it is tracking the changes to our primary key

83
00:05:31,740 --> 00:05:32,010
which.

84
00:05:32,090 --> 00:05:35,510
Means these two properties in our button class will invert.

85
00:05:35,660 --> 00:05:37,190
Primary will become false.

86
00:05:37,370 --> 00:05:43,550
Secondary will become true as a result of data and the computed property changing view will rewrite

87
00:05:43,550 --> 00:05:44,300
under the template.

88
00:05:44,480 --> 00:05:50,270
And it's going to look at the newly generated button class and then it will know to apply the new secondary

89
00:05:50,270 --> 00:05:53,270
class because now secondary will have a value of true.

90
00:05:53,530 --> 00:05:54,800
Let's take a look at this in action.

91
00:05:54,800 --> 00:05:56,570
We're going to see our button class flip.

92
00:05:57,350 --> 00:05:57,860
There we go.

93
00:05:57,860 --> 00:06:02,330
We can see these two values became inverted and now you can see we have the new button style appear

94
00:06:02,480 --> 00:06:03,500
in the top right corner.

95
00:06:03,500 --> 00:06:06,650
So here is the second version of the button, the secondary version.

96
00:06:06,800 --> 00:06:10,910
And if I hover my mouse over it, we're going to see that now on hover.

97
00:06:10,910 --> 00:06:16,730
It has those secondary styles applied, that new blue color background as well as the white font.

98
00:06:17,000 --> 00:06:17,270
Right.

99
00:06:17,270 --> 00:06:21,380
It's going to start off with a blue font on a white background and it's going to transition on hover

100
00:06:21,380 --> 00:06:24,080
to a white font on a blue background.

101
00:06:24,110 --> 00:06:28,460
This is big brand by big brand blue, too.

102
00:06:28,460 --> 00:06:31,730
By the way, this is our second blue color that we added in the previous lesson.

103
00:06:32,000 --> 00:06:36,860
And once again, if I again change my data back to true, once again, the computed properties will

104
00:06:36,860 --> 00:06:37,550
reevaluate.

105
00:06:37,670 --> 00:06:42,680
So our button class object that we're providing to our class attribute through the use of the buying

106
00:06:42,680 --> 00:06:48,590
directive will update as well, which will again trigger a view to apply a different class class.

107
00:06:48,740 --> 00:06:55,160
It's going to reapply the primary class, which will in turn apply some different tailwind asset classes

108
00:06:55,160 --> 00:06:57,830
and once again change the value of this button back.

109
00:06:57,950 --> 00:06:58,160
Right.

110
00:06:58,160 --> 00:07:03,110
So we're starting to see how a button can be pretty dynamic, can be one of either of those two buttons,

111
00:07:03,110 --> 00:07:08,720
either primary or secondary, but not both, while keeping the core structure of the button the same.

112
00:07:08,720 --> 00:07:08,960
Right.

113
00:07:08,960 --> 00:07:11,510
So we're kind of allowing it to serve two purposes.

114
00:07:11,510 --> 00:07:16,880
Now, we haven't seen this button be used in two different scenarios one for primary, one for secondary.

115
00:07:17,030 --> 00:07:22,520
But we are moving in that direction by building in the code to enable that kind of logic and also that

116
00:07:22,520 --> 00:07:23,300
kind of switching.

117
00:07:23,390 --> 00:07:23,720
All right.

118
00:07:23,990 --> 00:07:25,550
So lots more to cover in this section.

119
00:07:25,550 --> 00:07:27,050
And I will see you in the next lesson.
