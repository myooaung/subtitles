1
00:00:00,330 --> 00:00:01,080
Okay.

2
00:00:01,080 --> 00:00:08,070
So let's write a second test for our get jobs function as a reminder when we call the get method on

3
00:00:08,070 --> 00:00:09,220
the Axios object.

4
00:00:09,420 --> 00:00:16,050
Axios returns a promise and a promise is just an object that represents an asynchronous event that will

5
00:00:16,050 --> 00:00:17,640
take some time to complete.

6
00:00:17,910 --> 00:00:20,550
And when that event completes, it gives us something back.

7
00:00:20,640 --> 00:00:22,940
And that is called the promise resolved.

8
00:00:23,220 --> 00:00:28,710
What the promise resolves to is basically the value we get at the very end of that asynchronous event.

9
00:00:29,070 --> 00:00:34,620
So in the case of a get request, we reach out to a euro such as our you all right here.

10
00:00:34,920 --> 00:00:40,110
Access is going to give us a promise that's going to resolve to be an object with a data property.

11
00:00:40,110 --> 00:00:41,490
And let me just wrap this in a comment.

12
00:00:41,490 --> 00:00:47,790
So it's very easy to see Axios and it gives us a promise that resolves to be an object with a data property,

13
00:00:47,790 --> 00:00:51,480
and that data property holds the actual jobs that we care about.

14
00:00:51,750 --> 00:00:56,460
The reason it wraps it in a larger object is because there's also these additional properties that basically

15
00:00:56,460 --> 00:00:59,310
represent metadata about the request and the response.

16
00:00:59,460 --> 00:01:04,160
But the actual value that we want from our backend is nestled in this data actually.

17
00:01:04,470 --> 00:01:11,520
So the next test that I want to write wants to make sure that what we get back from the get jobs function

18
00:01:11,520 --> 00:01:13,410
will be the actual array of jobs.

19
00:01:13,410 --> 00:01:19,350
I basically want to parse out the information that I want from the complexity of the Axios object that

20
00:01:19,350 --> 00:01:19,770
I get.

21
00:01:19,890 --> 00:01:25,230
So kind of I'll let this function make the request and take care of worrying about the Axios knowledge

22
00:01:25,410 --> 00:01:29,280
so that when my component calls get jobs or something else, Collins gets jobs.

23
00:01:29,610 --> 00:01:31,200
It's just going to get back that array of jobs.

24
00:01:31,200 --> 00:01:33,870
It doesn't have to worry about how the internals of this function work.

25
00:01:34,260 --> 00:01:40,800
So I'm going to delete this comment and in my test suite I'll add another assertion.

26
00:01:41,130 --> 00:01:44,580
It extracts jobs from response.

27
00:01:44,580 --> 00:01:45,540
That's what I want to test.

28
00:01:46,470 --> 00:01:46,770
All right.

29
00:01:46,770 --> 00:01:51,540
So very similarly to our previous test, we're going to have an async test right here.

30
00:01:51,540 --> 00:01:56,790
So in async function and we're going to again await get jobs are going to wait until that asynchronous

31
00:01:56,790 --> 00:01:57,540
function completes.

32
00:01:58,800 --> 00:02:03,480
And then I expect that that is going to give me back my jobs, my data.

33
00:02:03,690 --> 00:02:09,240
So I'm going to sign the return value of my get jobs, asynchronous function to a constant call data.

34
00:02:09,540 --> 00:02:12,600
And then I'm going to expect my data to be equal to some.

35
00:02:13,320 --> 00:02:16,260
Now, you might be curious, what are we going to provide here?

36
00:02:16,440 --> 00:02:18,630
Well, it doesn't really matter what we provide here.

37
00:02:18,750 --> 00:02:24,150
As long as we mock out Axios dot, get in this test file to return the same thing.

38
00:02:24,570 --> 00:02:30,090
Basically, I'm just going to replace this implementation with my own version of Axios and then verify

39
00:02:30,090 --> 00:02:31,740
that whatever get gives back.

40
00:02:31,740 --> 00:02:32,100
To me.

41
00:02:32,250 --> 00:02:36,830
That's exactly the same thing that I'm extracting from my get jobs function.

42
00:02:36,840 --> 00:02:40,650
It's kind of a complex idea, but let me show you the code and I think at that point it will make sense.

43
00:02:40,950 --> 00:02:45,930
So let's just create this hypothetical array of one job that we're going to get back from our back end.

44
00:02:46,050 --> 00:02:50,820
Again, we have no back end when it comes to tests, but let's imagine that we're going to intercept

45
00:02:50,820 --> 00:02:53,850
that request to a backend and give us back a certain return value.

46
00:02:54,060 --> 00:02:58,500
And let's say that's going to be an array here and that array is going to be an array with one job object.

47
00:02:58,920 --> 00:03:03,690
And I'm just going to give that job object to properties, just so another reader looking at my code

48
00:03:03,690 --> 00:03:04,980
can understand what I have here.

49
00:03:05,310 --> 00:03:09,990
So I'm just going to say ID one and title of Java engineer.

50
00:03:10,440 --> 00:03:15,840
Again, this is not the exact same properties that a real job may have in terms of what we defined in

51
00:03:15,840 --> 00:03:18,120
DB that JSON, but we don't really care.

52
00:03:18,120 --> 00:03:19,560
And I'll show you why in just a second.

53
00:03:19,890 --> 00:03:25,680
So again, this test right now will will fail because obviously we have no nothing here that guarantees

54
00:03:25,680 --> 00:03:26,820
that we're returning anything.

55
00:03:27,120 --> 00:03:37,080
So what I'd like to do now is define a before each in my test file and here is where I'm going to set

56
00:03:37,080 --> 00:03:40,410
up how my get method on my access object works.

57
00:03:40,620 --> 00:03:46,080
Remember by default because we marked out Axios, if we simply were to invoke Axios target get right

58
00:03:46,080 --> 00:03:51,960
here, we would invoke the just mock function that has replaced the original implementation and by default

59
00:03:51,960 --> 00:03:54,330
any just mock function returns undefined.

60
00:03:54,510 --> 00:03:55,710
That's not what we want.

61
00:03:55,770 --> 00:04:02,130
We want a function that doesn't return undefined, but rather returns a promise that resolves to have

62
00:04:02,130 --> 00:04:04,020
an object with a data property.

63
00:04:04,020 --> 00:04:06,840
And that data property should be an array representing this.

64
00:04:07,170 --> 00:04:12,870
So basically what we're doing is we're emulating how Axios works without actually using Axios.

65
00:04:13,380 --> 00:04:13,740
All right.

66
00:04:13,890 --> 00:04:18,000
So the way we can do this is remember Axios dot get is a just mock function.

67
00:04:18,180 --> 00:04:19,710
On a just mock function.

68
00:04:19,710 --> 00:04:24,570
We can define, for example, its return value if we want to, for example, give this get method,

69
00:04:24,570 --> 00:04:29,100
whatever return value we want, we can use a method here called mock return value.

70
00:04:30,180 --> 00:04:32,190
For example, I could provide a value like five.

71
00:04:32,340 --> 00:04:37,860
And what that would mean is whenever my test is invoking Axios target, it would substitute five as

72
00:04:37,860 --> 00:04:40,200
the return value of that Axios get method.

73
00:04:40,560 --> 00:04:46,410
Now, in this scenario, I don't want a return value because that is just a regular asynchronous method.

74
00:04:46,590 --> 00:04:51,840
I want an asynchronous return value or in other words, a resolution of a promise.

75
00:04:52,080 --> 00:04:56,940
So right here, instead of mock return value, I'm going to use another shortcut called mock resolved

76
00:04:56,940 --> 00:04:57,510
value.

77
00:04:58,110 --> 00:05:01,140
So what this is saying is mock out Axios get.

78
00:05:01,530 --> 00:05:08,850
And when you when you invoke that method, have it return a promise that resolves to hold a specific

79
00:05:08,850 --> 00:05:09,210
value.

80
00:05:09,480 --> 00:05:12,180
And what value do I want that promise to resolve to hold?

81
00:05:12,390 --> 00:05:17,550
I want it to be very similar to the exact object that Axios gives me, which is an object with a data

82
00:05:17,550 --> 00:05:18,120
property.

83
00:05:18,360 --> 00:05:23,370
And that data property is going to be an array with the exact same information I have here.

84
00:05:24,440 --> 00:05:26,150
I'm going to copy that array right here.

85
00:05:26,780 --> 00:05:32,240
So now I'm still going to get a failing test because I have successfully mocked that Axios and I've

86
00:05:32,240 --> 00:05:38,300
verified or I've written an assertion to ensure that I'm pulling out the right information, but in

87
00:05:38,300 --> 00:05:45,080
my implementation, I'm still not pulling out that actual information from the real Axios response object,

88
00:05:45,140 --> 00:05:47,930
which I have faked out with a mock object right here.

89
00:05:48,230 --> 00:05:48,610
Okay.

90
00:05:48,890 --> 00:05:51,200
So what do we do to get this to pass?

91
00:05:51,470 --> 00:05:54,530
Well, right here, we know that this is going to give us back a promise.

92
00:05:54,740 --> 00:05:58,160
So what we can do is we can await this promise to resolve.

93
00:05:58,310 --> 00:06:00,440
So I'm going to use the await keyword right here.

94
00:06:00,440 --> 00:06:03,370
And as soon as we use await, we need to make this asynchronous.

95
00:06:03,380 --> 00:06:05,000
So I'm going to make the function asynchronous.

96
00:06:05,420 --> 00:06:09,230
So remember, what a wait is going to do is it's going to wait until that promise resolves and gives

97
00:06:09,230 --> 00:06:12,680
us back a value which is going to be the Axios response object.

98
00:06:12,860 --> 00:06:15,620
So I'm going to assign this to a constant called response.

99
00:06:17,090 --> 00:06:22,820
And remember, response is still not our data response is that JavaScript object that has a data property.

100
00:06:22,940 --> 00:06:28,010
How do I get that data property and return it as my final return value of get jobs?

101
00:06:28,280 --> 00:06:34,190
Well, I need to take my response object from Axios and access its data property that has the array

102
00:06:34,190 --> 00:06:34,670
we want.

103
00:06:34,910 --> 00:06:38,300
And if I save this, we're going to see we're going to get a passing test.

104
00:06:38,660 --> 00:06:43,460
So if this is confusing, let me just demonstrate what went on here, because I know it's kind of tough

105
00:06:43,460 --> 00:06:45,230
to explain and it can be tough to wrap your head around.

106
00:06:45,560 --> 00:06:50,510
Basically what I wrote right here in the before each which runs before every test says whenever we call

107
00:06:50,510 --> 00:06:54,290
Axios got get give us back this object as the resolution of the promise.

108
00:06:54,500 --> 00:06:59,210
So when this test is running, what response represents when the test suite is running?

109
00:06:59,390 --> 00:07:02,760
Is this exact object right here that we set up in our before.

110
00:07:03,440 --> 00:07:07,460
So when our test is running, we get this JavaScript object with a data property.

111
00:07:07,640 --> 00:07:12,650
Of course, in the real world we get back a real Axios object that also has a data property.

112
00:07:12,920 --> 00:07:15,920
So it's the same mark idea that we have tested throughout the course.

113
00:07:15,920 --> 00:07:20,120
We're just replacing the real world object with an object that is good enough to play the role of an

114
00:07:20,120 --> 00:07:21,650
Axios response object.

115
00:07:21,890 --> 00:07:26,930
And then what we're doing is we're accessing the data property of that mock object the exact same way

116
00:07:26,930 --> 00:07:28,640
we would in a real Axios object.

117
00:07:28,790 --> 00:07:32,780
And verifying that from this data property, we're pulling out just the array.

118
00:07:32,900 --> 00:07:34,550
And that's what we care about right here.

119
00:07:34,820 --> 00:07:39,380
That might get jobs function, which is asynchronous when invoked, will ultimately give me back the

120
00:07:39,380 --> 00:07:39,800
array.

121
00:07:39,830 --> 00:07:45,020
It's going to take care of the responsibility of not just using actions to fetch the response, but

122
00:07:45,020 --> 00:07:49,280
pass the correct attribute or property from that Axios response object.

123
00:07:49,520 --> 00:07:49,880
All right.

124
00:07:50,240 --> 00:07:54,190
So with that, I feel pretty good about our test suite.

125
00:07:55,140 --> 00:08:00,510
And moving forward, we can start starting to sync this up with our view store.
