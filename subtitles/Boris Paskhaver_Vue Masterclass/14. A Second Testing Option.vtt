WEBVTT
1
00:00:00.670 --> 00:00:01.450
Okay.

2
00:00:01.450 --> 00:00:06.670
So after all of these hours spent together learning Vue, I'm pretty sure you know me quite well.

3
00:00:06.730 --> 00:00:09.130
And you know that I generally prefer Macs.

4
00:00:09.130 --> 00:00:15.160
I prefer to use smaller, more lightweight objects that allow us to replace the original implementations

5
00:00:15.340 --> 00:00:19.360
so that we can test our own code, our own components in isolation.

6
00:00:19.660 --> 00:00:25.930
So my goal in this lesson will be to refactor the tests in our main test suite so that we're never actually

7
00:00:25.930 --> 00:00:28.990
relying on a real view X store.

8
00:00:30.100 --> 00:00:31.600
Now, why is this possible?

9
00:00:31.600 --> 00:00:32.410
How can we do this?

10
00:00:32.710 --> 00:00:37.960
Well, because if you look at our component, these are fundamentally the two lines right here where

11
00:00:37.960 --> 00:00:40.060
we are relying on the View X Store.

12
00:00:40.570 --> 00:00:48.280
And if you think about it, we don't need a real View X Store to test this logic and how it interacts

13
00:00:48.550 --> 00:00:49.660
with our component.

14
00:00:50.290 --> 00:00:54.190
Imagine that a view store has 100 methods and 100 properties.

15
00:00:54.190 --> 00:00:59.680
It probably doesn't in the real world, but imagine that it does for the sake of the main nav component

16
00:00:59.680 --> 00:01:01.480
and for it to be able to run.

17
00:01:01.660 --> 00:01:06.820
All it needs is to have a store property which is going to be an object with a state property which

18
00:01:06.820 --> 00:01:09.100
is going to be an object with an is logged in property.

19
00:01:09.370 --> 00:01:12.610
That's all it needs in order to test that.

20
00:01:12.610 --> 00:01:16.540
The VRF that relies on this is logged and computed property works.

21
00:01:16.840 --> 00:01:18.760
This just needs to be some kind of boolean.

22
00:01:19.030 --> 00:01:25.120
But this object and this complex nested relationship doesn't literally need to be a view object and

23
00:01:25.120 --> 00:01:25.750
its internals.

24
00:01:26.350 --> 00:01:31.150
Similarly, we don't need a view object with a commit method.

25
00:01:31.150 --> 00:01:36.790
In order to test this, we just need any object with a commit method that we're going to be able to

26
00:01:36.790 --> 00:01:40.990
access via the dollar store dollar sign store property on our component.

27
00:01:41.860 --> 00:01:47.080
So once we realize that we can use to much simpler object for the respective tests here, we realize

28
00:01:47.080 --> 00:01:51.850
that this component in the test world doesn't need to know anything about view existing.

29
00:01:52.450 --> 00:01:53.430
It doesn't, right?

30
00:01:53.440 --> 00:02:00.380
In the real world we will feed in a real book store and that's what will represent this property.

31
00:02:00.400 --> 00:02:03.430
And these properties will still hold and this method will still exist.

32
00:02:03.670 --> 00:02:08.860
But in the test, we're going to have a similar parallel universe where we're going to have similar

33
00:02:08.860 --> 00:02:14.440
objects that can play the role of a view store without actually using the real implementation.

34
00:02:15.190 --> 00:02:15.520
Right?

35
00:02:15.700 --> 00:02:20.290
And thus our tests will be faster, they'll be lightweight, and they'll be isolated from view.

36
00:02:20.290 --> 00:02:24.430
And we can be sure that if something is breaking, it's breaking because of our code and not because

37
00:02:24.430 --> 00:02:25.600
of a foreign dependency.

38
00:02:25.990 --> 00:02:28.950
So let's refactor our test suite to use a mock store.

39
00:02:29.290 --> 00:02:33.040
So right here I'm going to remove my former code that registered to plug in.

40
00:02:33.040 --> 00:02:36.160
We're not using a real world plug in like The View Store.

41
00:02:36.580 --> 00:02:40.870
And now what I'm going to do is bring it back that familiar MOX property.

42
00:02:40.930 --> 00:02:42.190
That's how we set up a mock.

43
00:02:42.460 --> 00:02:45.070
And on my component, what do I want to mock out?

44
00:02:45.250 --> 00:02:51.640
I want to replace any reference to the store global property that's going to be available on the this

45
00:02:51.640 --> 00:02:52.090
keyword.

46
00:02:52.120 --> 00:02:53.230
So this thing right here.

47
00:02:53.650 --> 00:02:59.140
So what I'd like to do is be able to feed in that store as my argument to the create config factory

48
00:02:59.140 --> 00:02:59.530
function.

49
00:02:59.740 --> 00:03:03.670
So I'm just going to change this parameter name to Dollar Sign Store and that's going to allow me to

50
00:03:03.670 --> 00:03:05.950
use the E6 syntax right here.

51
00:03:06.220 --> 00:03:12.550
So basically I'm going to feed in my create config factory function, whatever store I want that component

52
00:03:12.550 --> 00:03:14.230
in that mounted test to have.

53
00:03:14.680 --> 00:03:15.100
Okay.

54
00:03:15.730 --> 00:03:21.250
So for example, if I scroll down in this test, all I really need for this test, which is just displaying

55
00:03:21.250 --> 00:03:26.200
the company name is some kind of basic object, so I can simply provide an empty object.

56
00:03:26.200 --> 00:03:30.220
Let's save this and see if our test suite still runs and we can see it's not going to be enough.

57
00:03:30.220 --> 00:03:35.710
When you scroll up a little bit here and we're going to see cannot read property is logged in of undefined

58
00:03:35.950 --> 00:03:38.530
which tells me that this part is correctly registering.

59
00:03:38.680 --> 00:03:43.990
And then what Vue is trying to do is read state and it's getting undefined because state does not exist

60
00:03:43.990 --> 00:03:47.230
on this object and thus it cannot read is logged in off that.

61
00:03:47.500 --> 00:03:53.290
So because every computed property in every mounted component needs an object with a state property

62
00:03:53.290 --> 00:03:56.740
and in is logged in property, we can set up that logic right here.

63
00:03:56.980 --> 00:03:59.770
Technically, all we really need is state, but let's be property here.

64
00:03:59.770 --> 00:04:02.440
So what I'm going to do is I'm just going to add a state property.

65
00:04:03.220 --> 00:04:09.160
I'm going to set it to be a an object and I'm just going to provide an is logged in property set to

66
00:04:09.190 --> 00:04:09.880
let's say false.

67
00:04:09.880 --> 00:04:11.500
It really doesn't matter for this test.

68
00:04:11.890 --> 00:04:16.420
And you can see with that we have completely removed the view store.

69
00:04:16.630 --> 00:04:18.310
In fact, to make this a little bit better.

70
00:04:18.310 --> 00:04:22.570
Let's change this to Dollar Sign Store and let's pass in Dollar Signs Store here as well.

71
00:04:22.570 --> 00:04:23.860
Same exact implementation.

72
00:04:24.130 --> 00:04:28.450
So we're going to feed in this mock store to our create config factory function right here.

73
00:04:28.720 --> 00:04:33.460
It's going to use it right here, which means whenever our component references this dot dollar same

74
00:04:33.460 --> 00:04:36.070
store, it's going to reference this thing right here.

75
00:04:36.280 --> 00:04:41.170
And we have an object with the exact properties we need in order to test what this component cares about.

76
00:04:41.770 --> 00:04:42.070
All right.

77
00:04:42.370 --> 00:04:46.750
So with that, we can proceed through the rest of our tests and do the exact same logic.

78
00:04:46.750 --> 00:04:51.010
In fact, I'm going to copy this store because I imagine we're going to need to use it a couple of times

79
00:04:51.250 --> 00:04:51.850
later on.

80
00:04:52.570 --> 00:04:54.910
So let me scroll down right here.

81
00:04:54.910 --> 00:04:56.170
We need an empty store as well.

82
00:04:56.170 --> 00:05:00.370
So I'm just going to paste that and make sure we provide a dollar sign store here as well.

83
00:05:01.350 --> 00:05:04.050
Scroll down here, an empty store here as well.

84
00:05:04.050 --> 00:05:06.600
So I'm going to use that barebones one that I set up above.

85
00:05:07.650 --> 00:05:09.180
Make sure you dollar sign story here.

86
00:05:09.390 --> 00:05:12.330
There's one thing I'd like to fix here, by the way, before we continue.

87
00:05:12.600 --> 00:05:18.270
I actually realized in the previous lesson because I noticed the exact same categorical header right

88
00:05:18.270 --> 00:05:18.540
here.

89
00:05:18.660 --> 00:05:24.630
We actually have the same described block twice in our file of when users logged out right here and

90
00:05:24.630 --> 00:05:26.340
when users logged out right here.

91
00:05:26.550 --> 00:05:30.600
So I'm just going to cut and paste this test to the upper level describe.

92
00:05:31.320 --> 00:05:35.970
So I'm going to paste a right here because we already have that category above and then down below.

93
00:05:35.970 --> 00:05:37.860
I'm going to remove that former described block.

94
00:05:37.950 --> 00:05:40.740
Our test output is still going to be the exact same right here.

95
00:05:41.550 --> 00:05:47.610
So going back to our original refactor, I'm going to copy this store when the user's logged out.

96
00:05:47.610 --> 00:05:49.080
We know the state is logged in.

97
00:05:49.080 --> 00:05:49.770
Should be false.

98
00:05:49.770 --> 00:05:51.840
Although for the purposes of this test, we really don't care.

99
00:05:52.140 --> 00:05:54.180
Now, notice here what I'm going to do.

100
00:05:55.440 --> 00:05:56.610
As I'm going to provide my story.

101
00:05:56.790 --> 00:06:01.470
And later on on my store, we write my my commit method.

102
00:06:01.650 --> 00:06:06.180
We can actually do this directly in our initialization of the object right here.

103
00:06:06.420 --> 00:06:08.370
So I'm going to move this commit up right here.

104
00:06:09.770 --> 00:06:12.770
And then right here, I'm going to provide that commit method in line.

105
00:06:13.340 --> 00:06:17.600
Let me remove this line and pass in dollar sign store and then we can talk about what we did here.

106
00:06:17.870 --> 00:06:23.530
So here I'm once again creating a mock view store or in other words, a JavaScript object.

107
00:06:23.540 --> 00:06:28.760
I will pretend to be the store in my test and I need a state property with an is lodged in property

108
00:06:28.760 --> 00:06:30.680
to satisfy this logic right here.

109
00:06:30.950 --> 00:06:36.200
And then I need a commit method in order to, to be able to invoke the log in user method and have it

110
00:06:36.200 --> 00:06:36.950
run this logic.

111
00:06:37.250 --> 00:06:42.590
And so I'm just going to set that up in the initial mock store that I provide into my create config.

112
00:06:43.430 --> 00:06:49.480
Same exact approach except now our whole object is a is a JavaScript object.

113
00:06:49.490 --> 00:06:53.750
Previously we had a real view store and we just mocked out its commit method.

114
00:06:53.840 --> 00:06:56.270
Now we just have a complete mock object in its form.

115
00:06:56.270 --> 00:06:58.850
Replace all right to scroll down.

116
00:06:58.850 --> 00:07:01.220
Let me in fact copy this object from above.

117
00:07:02.180 --> 00:07:02.810
Scroll down.

118
00:07:03.050 --> 00:07:07.340
When user is logged in, we no longer need this complex create store function.

119
00:07:07.340 --> 00:07:09.770
We can just have a regular store.

120
00:07:09.800 --> 00:07:14.450
But keep in mind, in order for this to work we need is logged in set to true because that's what we

121
00:07:14.450 --> 00:07:19.910
need this property to evaluate to in order for the VRF directive to have true to render the user profile

122
00:07:19.910 --> 00:07:20.330
picture.

123
00:07:20.600 --> 00:07:22.520
So we need to make sure that that is set to true.

124
00:07:22.670 --> 00:07:27.380
But we still don't need to use a real store, just an object that is good enough to be like the store.

125
00:07:27.680 --> 00:07:32.900
Same thing below here we only want to display the navigation menu when the user's logged in, which

126
00:07:32.900 --> 00:07:38.720
is reflected by the is logged in property on our store state being such a true this logic right here.

127
00:07:38.990 --> 00:07:40.670
And then I'm going to feed in the store right here.

128
00:07:40.970 --> 00:07:42.020
Dollar Sign Store.

129
00:07:43.470 --> 00:07:43.940
Do that.

130
00:07:43.950 --> 00:07:44.940
And there we go.

131
00:07:44.970 --> 00:07:47.110
Our test is still passing.

132
00:07:47.130 --> 00:07:48.090
Everything's still good.

133
00:07:48.090 --> 00:07:49.350
Everything's running pretty quickly.

134
00:07:49.350 --> 00:07:54.450
We're running something like six tests in less than half a second, and we're not relying on view at

135
00:07:54.450 --> 00:07:55.200
all at this point.

136
00:07:55.380 --> 00:07:57.570
So I can actually scroll up all the way to the top.

137
00:07:57.570 --> 00:07:59.360
We're no longer using Create Store.

138
00:07:59.370 --> 00:08:01.910
That's what V code is telling me right here declared.

139
00:08:01.920 --> 00:08:03.030
But its values never read.

140
00:08:03.330 --> 00:08:03.780
Perfect.

141
00:08:03.780 --> 00:08:09.240
So we can remove that former import saved that file and now we have everything working perfectly.

142
00:08:09.450 --> 00:08:15.360
In fact, if you wanted to, you could consider moving this to its own separate factory function to

143
00:08:15.360 --> 00:08:18.390
keep a lot of that logic in place.

144
00:08:18.390 --> 00:08:23.730
You can then for example pass in a simple is logged in boolean to customize how that object is constructed.

145
00:08:23.880 --> 00:08:24.930
It's really up to you.

146
00:08:25.140 --> 00:08:31.650
But the key takeaway here is that we have replaced the big dependency view X with smaller mock store

147
00:08:31.650 --> 00:08:36.360
objects that play the role of the View X store, the exact same testing principles that we've talked

148
00:08:36.360 --> 00:08:37.860
about throughout the entire course.

149
00:08:38.250 --> 00:08:38.580
All right.

150
00:08:38.580 --> 00:08:40.140
That's all there is to cover in this lesson.

151
00:08:40.140 --> 00:08:41.670
So I will see you in the next one.
