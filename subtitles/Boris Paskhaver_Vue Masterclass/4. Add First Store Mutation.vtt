WEBVTT
1
00:00:00.390 --> 00:00:01.230
Okay.

2
00:00:01.230 --> 00:00:04.500
So in this lesson, we'll talk about mutations.

3
00:00:04.560 --> 00:00:05.670
What is a mutation?

4
00:00:05.970 --> 00:00:09.870
Well, we cannot modify the view store state directly.

5
00:00:10.080 --> 00:00:16.290
In other words, a component can't just say, take this object and flip the is logic property to true.

6
00:00:16.590 --> 00:00:21.960
We don't want to give components that much freedom because any component in the app can then do something

7
00:00:21.960 --> 00:00:22.560
destructive.

8
00:00:22.560 --> 00:00:28.290
For example, a component may misspell a property name or a component may accidentally add a new property,

9
00:00:28.290 --> 00:00:29.160
delete a property.

10
00:00:29.490 --> 00:00:36.420
What we want to do is limit the possible ways that we can change the store state to a predefined limited

11
00:00:36.420 --> 00:00:37.740
set of operations.

12
00:00:37.920 --> 00:00:39.810
And we call those mutations.

13
00:00:40.050 --> 00:00:44.160
It sounds like a complex word, but the word mutate basically means to change.

14
00:00:44.370 --> 00:00:49.890
So a mutation is just a method that changes the view store state in some way.

15
00:00:50.160 --> 00:00:53.820
It's an instruction that we give to the store that tells it how to update.

16
00:00:54.060 --> 00:01:01.590
And a component can only update these store state by calling a specific set or a specific mutation.

17
00:01:01.890 --> 00:01:05.190
So you can imagine we have a mutation, a mutation, B mutation.

18
00:01:05.190 --> 00:01:10.920
See, what we've done there is define three different ways that a component can modify the store state

19
00:01:11.130 --> 00:01:16.380
and prohibited it from accidentally modifying the store state in a way that we don't want to.

20
00:01:16.560 --> 00:01:16.860
All right.

21
00:01:17.100 --> 00:01:19.890
So let me show you how this is going to work here.

22
00:01:19.890 --> 00:01:25.830
In my configuration object for my store, I'm going to define a new property called mutations, and

23
00:01:25.830 --> 00:01:28.350
I'm going to make this equal to a JavaScript object.

24
00:01:28.620 --> 00:01:34.470
In this object, we define methods that are going to modify or update the state that we see above.

25
00:01:34.740 --> 00:01:39.240
So this approach is analogous to the methods property in a given component.

26
00:01:39.480 --> 00:01:42.510
Remember, a component may have a methods property.

27
00:01:42.750 --> 00:01:44.160
Let me see if I can find it right here.

28
00:01:44.340 --> 00:01:50.400
And this component has a method called log and user that modifies this components is logged in data

29
00:01:50.400 --> 00:01:50.940
property.

30
00:01:50.970 --> 00:01:54.210
It's the exact same analogous example in our store.

31
00:01:54.360 --> 00:01:59.670
The difference is the store state is right here and mutations represents the methods that are going

32
00:01:59.670 --> 00:02:01.950
to modify this state right here.

33
00:02:02.460 --> 00:02:08.160
Okay, so right here I'm going to define a mutation, just a plane method and a common convention.

34
00:02:08.160 --> 00:02:14.640
You might see in the view hex community is to give your mutations names that are all uppercase.

35
00:02:14.790 --> 00:02:17.970
It sort of represents the constant nature of this operation.

36
00:02:17.970 --> 00:02:23.550
Many times in JavaScript you write things that are constant or fixed in uppercase letters, and that

37
00:02:23.550 --> 00:02:29.100
sort of indicates that this is constant, that these are the only ways that you can actually modify

38
00:02:29.100 --> 00:02:29.970
the store state.

39
00:02:29.970 --> 00:02:34.230
There's no other way that you should reach into the state besides through these mutations.

40
00:02:34.560 --> 00:02:36.240
It's just a common convention that we follow.

41
00:02:36.240 --> 00:02:37.560
It's not a technical requirement.

42
00:02:37.860 --> 00:02:45.000
So here I'm going to create a mutation called log in user, and every single mutation that you define

43
00:02:45.000 --> 00:02:48.810
is going to receive the state, the store state as the first argument.

44
00:02:49.050 --> 00:02:53.760
So here I'm going to provide state and what state represents is this object.

45
00:02:53.760 --> 00:02:55.980
Right here is the complete store.

46
00:02:55.980 --> 00:02:58.950
State is the complete state that we chose to define above.

47
00:02:59.190 --> 00:03:05.190
And then of course in the method body, we can modify that store state in any way that we want, right?

48
00:03:05.520 --> 00:03:11.580
So if state represents this object and we want to log the user in, we of course want to take our state

49
00:03:11.580 --> 00:03:18.120
object, we want to access the IS logged in property that we have above and it exists because we defined

50
00:03:18.120 --> 00:03:18.540
it here.

51
00:03:18.840 --> 00:03:22.290
And then what we want to do, of course, is to overwrite this value to be true.

52
00:03:23.280 --> 00:03:23.610
All right.

53
00:03:23.910 --> 00:03:27.750
A couple of things to note here, because the syntax may be a little bit weird to people or you may

54
00:03:27.750 --> 00:03:29.460
be coming from another framework.

55
00:03:29.610 --> 00:03:31.290
There's a lot of things that I'd like to add here.

56
00:03:31.530 --> 00:03:37.860
First up, a mutation must be synchronous, so there can be no asynchronous code in here that runs for

57
00:03:37.860 --> 00:03:38.970
a certain amount of time.

58
00:03:39.180 --> 00:03:44.640
So this is not the place where you can do things like make an API call or read a file from the file

59
00:03:44.640 --> 00:03:44.970
system.

60
00:03:45.150 --> 00:03:50.370
Any asynchronous operation, anything that takes some amount of time, you have to do it in a separate

61
00:03:50.970 --> 00:03:53.940
place in the View Store, which we'll talk about later in this section.

62
00:03:54.450 --> 00:03:56.190
All mutations must be synchronous.

63
00:03:56.190 --> 00:04:01.740
They must be automatic JavaScript code that basically executes instantaneously, such as basic property

64
00:04:01.740 --> 00:04:02.820
assignments like this.

65
00:04:03.300 --> 00:04:08.610
If you're coming from the React or Redux ecosystem, you may be used to a functional pattern where you

66
00:04:08.610 --> 00:04:14.610
have to always return a new store state and rather than modify existing properties like we're doing

67
00:04:14.610 --> 00:04:14.850
here.

68
00:04:15.000 --> 00:04:18.210
This approach is actually totally valid and encouraged by view.

69
00:04:18.300 --> 00:04:23.430
There's nothing wrong in the view design principles with modifying your existing state like so.

70
00:04:23.600 --> 00:04:23.880
Okay.

71
00:04:24.120 --> 00:04:26.460
Just as a heads up if you're coming from React Redux.

72
00:04:26.760 --> 00:04:31.440
So again, state represents this object right here and we're modifying the is logged in property right

73
00:04:31.440 --> 00:04:31.680
here.

74
00:04:32.400 --> 00:04:32.740
Okay.

75
00:04:33.030 --> 00:04:37.830
Generally speaking, it's also a good practice to not create any new properties in your mutations.

76
00:04:37.830 --> 00:04:38.070
Right.

77
00:04:38.280 --> 00:04:41.590
So we don't want to ever say like states bought new property here.

78
00:04:41.610 --> 00:04:43.080
We never really want to do that.

79
00:04:43.260 --> 00:04:46.890
We always should have the default starting state of the store right here.

80
00:04:47.040 --> 00:04:52.530
And if you don't have an initial value to provide for a property, just provide undefined or null or

81
00:04:52.530 --> 00:04:54.240
the empty equivalent of something.

82
00:04:54.240 --> 00:04:54.480
Right?

83
00:04:54.480 --> 00:04:57.360
If something is supposed to be an array, then give it an empty array.

84
00:04:57.360 --> 00:04:59.850
If something is supposed to be an object and give it an empty object.

85
00:05:00.060 --> 00:05:02.700
If something is supposed to be a string, give it an empty string.

86
00:05:02.880 --> 00:05:05.120
We never really want to create or delete properties.

87
00:05:05.130 --> 00:05:09.750
We always want to start off with a base state and then modify its values through mutation.

88
00:05:09.870 --> 00:05:10.200
All right.

89
00:05:10.500 --> 00:05:14.730
Before we conclude this lesson, there's another thing that I'd like to add here, and it's called strict

90
00:05:14.730 --> 00:05:15.030
mode.

91
00:05:15.300 --> 00:05:17.550
That's another setting that we can configure in our store.

92
00:05:17.790 --> 00:05:21.360
So below mutations here, I'm going to add a key called strict.

93
00:05:22.290 --> 00:05:26.580
And strict has to be set to a Boolean value, either true or false.

94
00:05:26.910 --> 00:05:32.250
So if we enable strict mode by providing a value of true view is going to be a lot more strict when

95
00:05:32.250 --> 00:05:38.370
it comes to making sure that we don't have any place where we are accidentally modifying the store state

96
00:05:38.580 --> 00:05:39.810
outside of a mutation.

97
00:05:39.990 --> 00:05:41.850
That was a really long blurb of text.

98
00:05:41.880 --> 00:05:46.710
Let me reiterate what I mean to talk about the practices we discussed earlier in this lesson.

99
00:05:46.920 --> 00:05:54.090
A mutation is the only place and the only way that we are allowed to modify a view store.

100
00:05:54.150 --> 00:05:56.310
That is the design principle behind this library.

101
00:05:56.520 --> 00:06:01.050
So what's strict is going to do when set to true is it's going to be much more picky if you ever try

102
00:06:01.050 --> 00:06:05.050
to modify states elsewhere outside of a mutation.

103
00:06:05.070 --> 00:06:09.750
For example, if a component tries to reach into the state and modify it manually and strict mode is

104
00:06:09.750 --> 00:06:13.740
set to true, your console will give you a big red warning that says, No, this is not good.

105
00:06:13.740 --> 00:06:14.790
I'm not happy about this.

106
00:06:15.150 --> 00:06:20.670
So typically what you want to do is you want to enable strict mode in development mode, but never actually

107
00:06:20.670 --> 00:06:22.140
enable it in production mode.

108
00:06:22.290 --> 00:06:26.670
And the reason is because strict mode actually takes up a lot of memory and it could slow down the speed

109
00:06:26.670 --> 00:06:27.150
of your app.

110
00:06:27.360 --> 00:06:30.540
However, in development mode, it's pretty helpful because it can catch errors.

111
00:06:30.690 --> 00:06:35.790
It can show you if you're not using view the way it's supposed to be used, if you've accidentally modified

112
00:06:35.940 --> 00:06:37.890
the store state somewhere where you're not supposed to.

113
00:06:38.100 --> 00:06:41.940
So here's what we're going to do to enable the setting, but only in development mode.

114
00:06:42.210 --> 00:06:47.730
You may recall from an earlier section that we have this process global node object, and on it we have

115
00:06:47.730 --> 00:06:48.750
an EMV object.

116
00:06:48.900 --> 00:06:53.700
This is where we, for example, can receive our environment variables that we defined in our EMV file.

117
00:06:54.000 --> 00:06:59.160
Well, there's also predefined environment variables on this EMV object that are not defined by us,

118
00:06:59.280 --> 00:07:01.710
but are defined by node or defined by view.

119
00:07:01.980 --> 00:07:09.510
So one of them is called Node EMV, and this is actually the name of the development mode in which we

120
00:07:09.510 --> 00:07:09.870
are running.

121
00:07:10.080 --> 00:07:11.580
To be more specific, the environment.

122
00:07:11.820 --> 00:07:18.000
So we talked earlier about how view runs in three possible environments, development, test and production.

123
00:07:18.000 --> 00:07:18.240
Right.

124
00:07:18.420 --> 00:07:21.480
And this is going to be a string that represents that value.

125
00:07:21.600 --> 00:07:23.520
So this is going to be one of three string values.

126
00:07:23.760 --> 00:07:29.550
So what I'm going to do here is I'm going to say when the environment is not equal to the lowercase

127
00:07:29.550 --> 00:07:33.090
string of production, that's when I want to enable stick node.

128
00:07:33.300 --> 00:07:38.670
So if we are running in development mode as we are right now in the browser, this is going to evaluate

129
00:07:38.670 --> 00:07:44.460
to true because the string of development is not equal to the string of production.

130
00:07:44.670 --> 00:07:48.390
So this will value to true and we will enable strict mode when we're developing.

131
00:07:48.570 --> 00:07:54.210
However, if we ever deploy this app to the web, well then the node environment will be set to production

132
00:07:54.420 --> 00:08:00.240
and then strict as a result will be set to false because production not equal to production will be

133
00:08:00.240 --> 00:08:02.850
false and thus strict will be set to that.

134
00:08:03.480 --> 00:08:06.610
And this is something that you basically set once, and you never have to worry about it.

135
00:08:07.410 --> 00:08:12.750
This is just, again, a more robust way to make sure that we're using View X as it's supposed to be

136
00:08:12.750 --> 00:08:18.930
used, which is ensuring that only mutations are modifying our store state right here.

137
00:08:19.200 --> 00:08:19.500
All right.

138
00:08:19.770 --> 00:08:22.380
So to sum up everything we've learned, we've defined our initial.

139
00:08:22.570 --> 00:08:23.080
Or state.

140
00:08:23.090 --> 00:08:25.240
This is like the data section of a component.

141
00:08:25.480 --> 00:08:31.630
We've defined ways to modify that store state using mutations, and we've told you to check that we're

142
00:08:31.630 --> 00:08:32.800
doing it the way we're supposed to.

143
00:08:33.040 --> 00:08:37.000
And now, of course, the next question you may have is, how do I actually run one of these mutations?

144
00:08:37.000 --> 00:08:38.560
How do I use this method?

145
00:08:38.560 --> 00:08:43.840
How do I tell you to accept this log in user method and actually flip the value of the is logged in

146
00:08:43.840 --> 00:08:44.230
property?

147
00:08:44.380 --> 00:08:46.240
We're going to see how to do that in the very next lesson.
