1
00:00:00,370 --> 00:00:01,200
Okay.

2
00:00:01,200 --> 00:00:07,530
So let's attach some query params to our job search form on the home page when the user submits it.

3
00:00:07,920 --> 00:00:11,280
So I'm going to open up the job search form component.

4
00:00:11,580 --> 00:00:17,130
As a reminder, this is where we build out the form that has the two input fields for the role and the

5
00:00:17,130 --> 00:00:19,950
location and then the action button to submit.

6
00:00:20,250 --> 00:00:25,530
And finally, it's storing the data that actually keeps track of the user's entered value for those

7
00:00:25,530 --> 00:00:26,340
two input fields.

8
00:00:26,490 --> 00:00:33,580
In these role and location data properties, so as a quick and obvious review view allows us to build

9
00:00:33,600 --> 00:00:35,320
single page applications.

10
00:00:35,340 --> 00:00:38,640
That means that we want to avoid complete page refreshes.

11
00:00:38,650 --> 00:00:43,920
The goal is to give the user whatever JavaScript they need upfront and give them a seamless experience

12
00:00:43,920 --> 00:00:48,420
by loading in information as they need it without forcing a complete page refresh.

13
00:00:48,490 --> 00:00:48,720
Right.

14
00:00:48,960 --> 00:00:52,940
And that's why the View Library gives us tools to prevent refreshes.

15
00:00:53,310 --> 00:00:54,430
So by default.

16
00:00:54,450 --> 00:00:59,970
Back in the old school web days before single page web apps, whenever you submitted a form that would

17
00:00:59,970 --> 00:01:04,710
either reload the page or direct to a new page based on that form submission.

18
00:01:04,920 --> 00:01:06,630
But we don't actually want that to happen.

19
00:01:06,630 --> 00:01:11,400
We don't want the form to reload the page or take us anywhere else because that will force a refresh

20
00:01:11,400 --> 00:01:13,620
or a reload of the entire view app.

21
00:01:14,370 --> 00:01:21,480
So what we need to do is we need to react to the form being submitted but prevent the browser from actually

22
00:01:21,480 --> 00:01:27,000
going with its natural flow and navigating the browser to a new page.

23
00:01:27,000 --> 00:01:27,240
Right.

24
00:01:27,450 --> 00:01:28,350
And I'll show you how to do that.

25
00:01:28,680 --> 00:01:31,410
So we want to react to an event.

26
00:01:31,410 --> 00:01:33,210
That event is a form submission.

27
00:01:33,450 --> 00:01:38,580
Whenever you think about reacting to an event in view, you should always think about the VON Directive,

28
00:01:38,580 --> 00:01:38,880
right?

29
00:01:39,060 --> 00:01:44,910
Previously we used that directive to react to a button, click to a user typing a character into an

30
00:01:44,910 --> 00:01:45,480
input field.

31
00:01:45,660 --> 00:01:46,710
Those are all events.

32
00:01:46,710 --> 00:01:48,810
Those are all examples of user interaction.

33
00:01:48,960 --> 00:01:53,130
A user clicking a button to submit a form is also an example of an event.

34
00:01:53,130 --> 00:01:54,270
It's a form submission event.

35
00:01:54,540 --> 00:01:58,620
So we want to react to this event and it's actually going to come from our form.

36
00:01:58,770 --> 00:02:01,770
So we're going to put it on our form h HTML element.

37
00:02:02,010 --> 00:02:08,700
So right here we can either use the V on syntax or you may recall the shortcut is the app sign and then

38
00:02:08,700 --> 00:02:11,880
we follow it up with the actual event that the browser will tell us.

39
00:02:12,210 --> 00:02:15,750
So when a form is submitted, it emits an event called submit.

40
00:02:16,530 --> 00:02:18,240
So that's what I want to react to.

41
00:02:18,510 --> 00:02:23,580
But if we simply do this, as I mentioned, we're going to force the page navigation or the page refresh.

42
00:02:23,820 --> 00:02:28,470
So there is a special syntax we can do here to prevent the browser from doing that.

43
00:02:28,620 --> 00:02:32,140
And that is going to be a dot followed by prevent.

44
00:02:32,670 --> 00:02:33,000
Okay.

45
00:02:33,300 --> 00:02:37,200
So what this is called is an event modifier in view.

46
00:02:37,320 --> 00:02:43,890
And the name kind of makes sense because submit is an event and this is a modifier which means it modifies

47
00:02:43,890 --> 00:02:47,520
or changes or affects how that event works.

48
00:02:47,790 --> 00:02:56,100
So it's still a submission event, but we are modifying it to prevent it from forcing that page reloading

49
00:02:56,100 --> 00:02:57,570
or that page navigation.

50
00:02:57,780 --> 00:03:00,870
And as far as the name Prevent, it's nice and short and sweet, really.

51
00:03:00,990 --> 00:03:04,740
You know, if they went with something like Prevent, you know, page refresh, it would have been a

52
00:03:04,740 --> 00:03:05,370
lot longer.

53
00:03:05,520 --> 00:03:10,590
But that's why it's called Prevent, because it's preventing that natural form submission action from

54
00:03:10,590 --> 00:03:10,980
happening.

55
00:03:11,100 --> 00:03:12,800
We're still going to get the submit event.

56
00:03:12,810 --> 00:03:15,870
We're still going to react to it by providing a method in just a second.

57
00:03:16,050 --> 00:03:21,180
But we're going to prevent that browser page refresh, and that is why we need that event modifier.

58
00:03:21,540 --> 00:03:26,490
So if you recall the VON Directive, what we provide, it is an equal sign and then the name of a method

59
00:03:26,700 --> 00:03:30,030
in the double quotes and will define that method on our methods.

60
00:03:30,030 --> 00:03:33,030
Object below in the JavaScript section of the component.

61
00:03:33,360 --> 00:03:39,450
So let's call this method search for jobs, since that is fundamentally what the user means when they

62
00:03:39,450 --> 00:03:40,440
click the submit the form.

63
00:03:40,770 --> 00:03:42,870
So I'm going to navigate all the way down.

64
00:03:43,840 --> 00:03:44,350
To hear.

65
00:03:44,560 --> 00:03:49,300
And of course we want to define a methods property, honor, view, configuration, object, and we

66
00:03:49,300 --> 00:03:51,820
need a method name that matches what we just wrote.

67
00:03:51,970 --> 00:03:53,830
So that is going to be a search for jobs.

68
00:03:54,400 --> 00:03:59,170
And so when the user submits the form, we're going to prevent a page refresh and we're going to instead

69
00:03:59,170 --> 00:04:00,190
invoke this method.

70
00:04:01,030 --> 00:04:03,100
Okay, so what do we want to do in this method?

71
00:04:03,100 --> 00:04:08,980
We want to navigate the user to the job results view, and we also want to attach the role and location

72
00:04:08,980 --> 00:04:15,250
from the data as query params so that the job results view has that information and can use it to filter

73
00:04:15,250 --> 00:04:16,360
the relevant jobs.

74
00:04:16,660 --> 00:04:19,420
So how do we navigate the user from a JavaScript perspective?

75
00:04:19,630 --> 00:04:24,940
While you may recall that we have a router object and that router object has a push method.

76
00:04:25,690 --> 00:04:29,500
So what I can do here is access that router object on my this keyword.

77
00:04:30,040 --> 00:04:33,670
And of course that property begins with a dollar sign dollar sign router.

78
00:04:33,910 --> 00:04:35,710
That again is a view detail.

79
00:04:35,710 --> 00:04:39,700
It's the dollar sign is not technically relevant, it's just part of the name to differentiate it from

80
00:04:39,700 --> 00:04:43,600
your own data and properties, etc. So that is the object.

81
00:04:43,600 --> 00:04:48,510
That object is the same view router that we defined in our router index DSL.

82
00:04:48,880 --> 00:04:51,160
And that object has a method called push.

83
00:04:52,030 --> 00:04:57,250
Push navigates the user to a new URL you can even see in the description on the right programmatically

84
00:04:57,250 --> 00:04:58,720
navigate to a new URL.

85
00:04:59,080 --> 00:05:01,000
So we're going to invoke this method.

86
00:05:01,000 --> 00:05:03,970
And as you may recall, it actually takes a variety of arguments.

87
00:05:03,970 --> 00:05:06,430
We can give it a string, we can give it an object.

88
00:05:06,550 --> 00:05:08,320
Let's go with the object approach.

89
00:05:08,320 --> 00:05:13,750
So we'll provide a JavaScript object and there is a property we can provide called name and we could

90
00:05:13,750 --> 00:05:16,360
set name equal to the name of a route.

91
00:05:16,360 --> 00:05:21,910
So I'm going to go back to my router index that she has found and I want to go with this route name

92
00:05:21,910 --> 00:05:25,630
job results right here to go to the job results page.

93
00:05:26,080 --> 00:05:30,280
So it's going to put this right here and make sure we wrap it in double quotes.

94
00:05:31,150 --> 00:05:36,190
And I think that is more stable and more reliable than providing a path or a URL because the path or

95
00:05:36,190 --> 00:05:39,550
URL is more likely to change than the name of the route.

96
00:05:39,970 --> 00:05:44,350
So this is a good place to start and this is what we did earlier in the course.

97
00:05:44,350 --> 00:05:47,860
But how do we attach the query params to that URL?

98
00:05:48,070 --> 00:05:54,400
Well, luckily for us if you can do it automatically so we do not need to create the concatenated string

99
00:05:54,400 --> 00:05:59,410
with the dollar sign and the ampersand, the equal signs, all of that complexity of you can take care

100
00:05:59,410 --> 00:06:00,310
of for us.

101
00:06:00,460 --> 00:06:03,460
But we do need to provide a key here called query.

102
00:06:04,330 --> 00:06:10,330
And for that property we provide a JavaScript object and the way it works is the key value pairs or

103
00:06:10,330 --> 00:06:17,350
the properties in this object is what view will will combine together to attach as query params to the

104
00:06:17,350 --> 00:06:19,360
end of this path, this URL.

105
00:06:19,690 --> 00:06:25,900
So for example, if I want a query param of role as my key as my property, I simply provide role.

106
00:06:25,900 --> 00:06:31,030
And then the value that I want to attach to that key will of course, the value that I want to attach

107
00:06:31,030 --> 00:06:36,580
to that key is going to come from my data property of role, which I can access via the this keyword.

108
00:06:36,820 --> 00:06:43,270
So this role will give me the role which is whatever the user has entered into that input fields at

109
00:06:43,270 --> 00:06:48,070
that moment of form submission, I'm going to attach that as the value for that query parameter role

110
00:06:48,250 --> 00:06:53,020
so this name can be entirely up to us, but I see no reason to keep it different from what we have in

111
00:06:53,020 --> 00:06:53,620
this component.

112
00:06:53,830 --> 00:06:55,960
That way it's the same terminology around the app.

113
00:06:56,290 --> 00:06:57,700
So this will attach the role.

114
00:06:57,700 --> 00:07:02,230
And the other thing that I want to attach to my query params is the location that the user searched

115
00:07:02,230 --> 00:07:02,470
for.

116
00:07:02,710 --> 00:07:07,690
So we'll add another property here of location and then of course that will be equal to whatever the

117
00:07:07,690 --> 00:07:12,700
user has entered for the location input which were storing in the location data property which we can

118
00:07:12,700 --> 00:07:15,130
access by this dot location.

119
00:07:16,490 --> 00:07:16,910
All right.

120
00:07:17,090 --> 00:07:17,750
And that is it.

121
00:07:17,930 --> 00:07:22,760
Whenever the user submits a form, the form will emit an event called submit.

122
00:07:22,910 --> 00:07:26,150
We're going to react to it by preventing it from forcing a page reload.

123
00:07:26,330 --> 00:07:29,080
We're going to tell you to invoke the search for jobs method.

124
00:07:29,420 --> 00:07:34,230
The search for jobs method is going to use the route or object to navigate the user to a new path and

125
00:07:34,230 --> 00:07:38,840
new yourself are going to tell it to go to the route called job results and we're going to tell it to

126
00:07:38,840 --> 00:07:40,430
attach to query params.

127
00:07:40,550 --> 00:07:41,780
Role and location.

128
00:07:41,780 --> 00:07:44,210
And you is going to create that necessary strength.

129
00:07:44,520 --> 00:07:45,310
Let's take a look at this.

130
00:07:45,320 --> 00:07:51,170
In the browser, we're going to navigate to our app and here we are and let's go ahead and type view

131
00:07:51,170 --> 00:07:55,310
developer and let's say I want to look for that job in New York.

132
00:07:55,640 --> 00:07:58,480
So I'm going to click the search button and here we go.

133
00:07:58,490 --> 00:08:02,750
We do not have this page built out yet, but if we look at our URL, take a look.

134
00:08:02,750 --> 00:08:05,330
We are indeed add slash job slash results.

135
00:08:05,330 --> 00:08:05,990
That is great.

136
00:08:06,170 --> 00:08:09,440
And notice at the very end we have that exact same familiar syntax.

137
00:08:09,620 --> 00:08:15,170
We have the question mark, we have the key where the property, which is role, and then we have the

138
00:08:15,170 --> 00:08:16,490
value which is view developer.

139
00:08:16,610 --> 00:08:23,180
And this scenario notice that it's using a plus sign instead of the percentage time sign.

140
00:08:23,180 --> 00:08:24,020
Don't worry about that.

141
00:08:24,020 --> 00:08:25,790
That's just another internal detail of you.

142
00:08:25,790 --> 00:08:26,690
It works either way.

143
00:08:27,080 --> 00:08:33,440
And so we have attached the role key right here and we've also attached the location key right here.

144
00:08:33,590 --> 00:08:35,720
And notice that that value is New York.

145
00:08:35,930 --> 00:08:38,600
So viewers taking care of the creation of this string.

146
00:08:38,990 --> 00:08:40,070
Here's the question mark.

147
00:08:40,100 --> 00:08:41,000
Here is the key.

148
00:08:41,000 --> 00:08:46,820
The equals sign, the separation of the spaces and the ampersand to separate the subsequent key value

149
00:08:46,820 --> 00:08:47,210
params.

150
00:08:47,210 --> 00:08:48,920
So it took care of everything for us.

151
00:08:48,950 --> 00:08:54,140
All we needed to do was provide a object with a query property to that push method and it took care

152
00:08:54,140 --> 00:08:54,680
of that for us.

153
00:08:54,860 --> 00:09:00,170
Now, obviously we don't have any jobs on this page yet, so we can't filter it using our query params.

154
00:09:00,170 --> 00:09:04,520
But we have set up everything we need to later in order to do that and we will do that later in the

155
00:09:04,520 --> 00:09:04,880
course.

156
00:09:05,150 --> 00:09:09,290
So with that, we are going to proceed to the next couple of lessons where we're going to test what

157
00:09:09,290 --> 00:09:10,130
we just built out.
