1
00:00:00,830 --> 00:00:01,340
Okay.

2
00:00:01,340 --> 00:00:04,370
So here I am in our DB dot JSON file.

3
00:00:04,550 --> 00:00:10,550
And as a reminder, this is the file that we use in combination with the JSON server package to define

4
00:00:10,550 --> 00:00:11,510
our mock backend.

5
00:00:11,840 --> 00:00:15,290
So each key here in this JSON object represents an end point.

6
00:00:15,500 --> 00:00:19,220
So we currently have to slash spotlight's right here and slash jobs.

7
00:00:19,400 --> 00:00:24,410
And then of course, the value for that key is the return that we're going to get from that end point

8
00:00:24,410 --> 00:00:25,490
when we hit it in our app.

9
00:00:25,940 --> 00:00:30,980
So previously, when we were building the filters of organizations as well as job types, what we did

10
00:00:30,980 --> 00:00:36,790
inside our app is receive the jobs and then iterate over certain properties here, like for example,

11
00:00:36,800 --> 00:00:43,940
job type and organization in order to come up with those unique values that the user was filtering by.

12
00:00:44,180 --> 00:00:48,050
And we certainly could do the same right here by using the degree property right here.

13
00:00:48,320 --> 00:00:53,000
But just to keep things a little bit interesting and do things a little bit differently, let's now

14
00:00:53,000 --> 00:00:58,640
say that it's a product requirement or a management requirement that we actually reach out to a brand

15
00:00:58,640 --> 00:01:00,320
new end point called degrees.

16
00:01:00,470 --> 00:01:03,410
That's going to provide us with all of the unique degree types.

17
00:01:03,590 --> 00:01:03,920
All right.

18
00:01:04,160 --> 00:01:06,290
So there's no necessary reason to do this.

19
00:01:06,320 --> 00:01:11,900
Let's assume as frontend developers that this is simply a requirement or a constraint that we have to

20
00:01:11,900 --> 00:01:12,350
deal with.

21
00:01:12,680 --> 00:01:17,180
So imagine somebody comes to you and says, Hey, I'd like you to use this slash degrees, end point.

22
00:01:17,180 --> 00:01:21,290
We've already built it out in some language, whatever language, you don't have to worry about it.

23
00:01:21,290 --> 00:01:26,870
But we're going to give you this URL, reach out to this end point to get the JSON of degrees and use

24
00:01:26,870 --> 00:01:28,340
that as your basis for filtering.

25
00:01:28,700 --> 00:01:29,060
All right.

26
00:01:29,270 --> 00:01:34,760
So in the previous lesson, I attached the new code that I'd like you to add to DB that JSON.

27
00:01:35,030 --> 00:01:37,070
So I'm going to do that same thing right here.

28
00:01:37,100 --> 00:01:40,580
It's a new degrees end point and I'm going to copy it over from my other screen.

29
00:01:41,570 --> 00:01:42,200
So there we go.

30
00:01:42,410 --> 00:01:46,970
Make sure when you add this degrees end point set to an array that you also provide a comma right here

31
00:01:47,210 --> 00:01:49,850
to separate it from the next end point, which is spotlights.

32
00:01:50,090 --> 00:01:55,520
And as you can see, all these slash degrees, end point will return is going to be an array of objects.

33
00:01:55,670 --> 00:02:01,340
Each object or each degree object will have an ID set to a number and a degree property that's set to

34
00:02:01,340 --> 00:02:05,300
the actual string representing the degree name like associate or bachelor's.

35
00:02:05,330 --> 00:02:05,630
All right.

36
00:02:05,930 --> 00:02:11,150
And we can already test that this is working in our browser because our JSON server is running in watch

37
00:02:11,150 --> 00:02:11,450
mode.

38
00:02:11,600 --> 00:02:17,150
So as soon as you save the DB that JSON file, it should relaunch itself and register these changes

39
00:02:17,360 --> 00:02:18,710
and allow you to hit this end point.

40
00:02:18,950 --> 00:02:24,110
If for some reason the following step does not work, you can simply go to that terminal tab that is

41
00:02:24,110 --> 00:02:29,900
running your JSON server, shut it down and launch it again with the command NPM, run it back in.

42
00:02:30,290 --> 00:02:36,500
But what I'm going to do is head to my browser and currently I have of course my view app running on

43
00:02:36,500 --> 00:02:38,570
localhost and the AT&amp;T port.

44
00:02:38,810 --> 00:02:44,660
Our JSON server is running on a separate port, which is going to be 3000 and then that's our actual

45
00:02:44,660 --> 00:02:45,020
app.

46
00:02:45,020 --> 00:02:51,110
And then remember our end point is going to be slash followed by the property that we designed in our

47
00:02:51,590 --> 00:02:52,400
DB that Jason.

48
00:02:52,580 --> 00:02:55,020
So we just call that end point slash degrees.

49
00:02:55,020 --> 00:02:59,660
So I'm going to enter that and if everything relaunch correctly and we reach out, there we go, I'm

50
00:02:59,660 --> 00:03:00,290
going to zoom in.

51
00:03:00,410 --> 00:03:05,390
We can see it's the exact same array of objects that we just declared in DB that JSON.

52
00:03:05,660 --> 00:03:07,010
So it looks like everything is working.

53
00:03:07,010 --> 00:03:11,600
And now we have this mock backend providing this mock response from this zero.

54
00:03:11,870 --> 00:03:16,520
And so in the next lesson we can start wiring up all the types of code to make the request.

55
00:03:16,520 --> 00:03:19,820
Then of course register it with our components and view, etc..

56
00:03:20,090 --> 00:03:21,800
All right, so I will see you in the next lesson.
