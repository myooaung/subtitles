1
00:00:00,330 --> 00:00:01,080
Okay.

2
00:00:01,080 --> 00:00:07,290
So in this lesson, we'll practice adding TypeScript to a component that utilizes the new composition

3
00:00:07,290 --> 00:00:07,830
API.

4
00:00:08,220 --> 00:00:10,320
So let's start with our accordion component.

5
00:00:10,590 --> 00:00:12,330
I'm going to open up accordion view.

6
00:00:12,750 --> 00:00:17,610
And the good news here is that the process is going to be very similar to what we just did with the

7
00:00:17,610 --> 00:00:19,950
components that used the options API.

8
00:00:20,340 --> 00:00:23,010
So scrolling down here we have our new setup method.

9
00:00:23,010 --> 00:00:28,410
This is our proof that everything is utilizing the new composition API, but we're going to apply the

10
00:00:28,410 --> 00:00:29,760
exact same two steps.

11
00:00:29,970 --> 00:00:34,470
Step one, we're going to add a Lang attribute right here set to test.

12
00:00:34,800 --> 00:00:41,850
And step two, we're going to import, define component and wrap our complete configuration object with

13
00:00:41,850 --> 00:00:43,020
that function invocation.

14
00:00:43,350 --> 00:00:48,060
So that's coming directly from view and we already have two imports from the View Library.

15
00:00:48,270 --> 00:00:54,720
So right here I'm going to add define component and right here I'm going to invoke defined component

16
00:00:55,170 --> 00:01:00,210
and pass in our configuration object as the first argument to that function invocation.

17
00:01:00,510 --> 00:01:01,140
There we go.

18
00:01:01,470 --> 00:01:02,820
And if I save this, we'll see.

19
00:01:02,820 --> 00:01:04,410
There are no TypeScript violations.

20
00:01:04,590 --> 00:01:10,470
And furthermore, if I hover my mouse over some of these constants, for example, we're going to see

21
00:01:10,470 --> 00:01:13,200
and be able to verify the right types.

22
00:01:13,440 --> 00:01:18,780
So for example, here we can see that is open is a graph which is the view reactive object or at least

23
00:01:18,810 --> 00:01:23,580
one of the one of the types for it and you can see it in the generic is also properly inferred.

24
00:01:23,790 --> 00:01:28,320
The idea that it is wrapping a boolean because we provided the initial false value.

25
00:01:28,530 --> 00:01:28,800
Right.

26
00:01:29,130 --> 00:01:32,700
Same logic here are open function is a function that returns nothing.

27
00:01:32,700 --> 00:01:33,690
That's why it has returned.

28
00:01:33,690 --> 00:01:34,410
I avoid it.

29
00:01:34,410 --> 00:01:35,070
That is correct.

30
00:01:35,460 --> 00:01:38,760
Here we have our computer graph and you can see it's calculating.

31
00:01:38,760 --> 00:01:43,440
Not just that we have a computed RAF, which is basically a reactive object type, but also that it

32
00:01:43,440 --> 00:01:48,960
is wrapping a value of a string array, which is correct because no matter what we return here, it's

33
00:01:48,960 --> 00:01:51,450
either going to be a string array or another string, right?

34
00:01:51,660 --> 00:01:56,070
And thus if I look at the entire set method, this is not really helpful, but we're going to see that

35
00:01:56,070 --> 00:02:00,840
the object and its respective properties and when I say the object, I need the return object.

36
00:02:01,110 --> 00:02:05,280
All of these properties have the exact types that that it should have.

37
00:02:05,280 --> 00:02:09,720
So in other words, these inferences from RAF and computed etc. were all correct.

38
00:02:10,140 --> 00:02:10,410
All right.

39
00:02:10,410 --> 00:02:11,820
That's all we have to do in this component.

40
00:02:11,820 --> 00:02:14,010
Let's also update the corresponding test file.

41
00:02:14,340 --> 00:02:19,560
So accordion dot test that just moved out to the right.

42
00:02:20,160 --> 00:02:23,490
And let's go ahead and change the extension to test.

43
00:02:26,300 --> 00:02:26,840
All right.

44
00:02:27,140 --> 00:02:31,420
In case you import an accordion regularly and you have an error here, just make sure to add a short

45
00:02:31,520 --> 00:02:32,210
view extension.

46
00:02:32,570 --> 00:02:32,870
All right.

47
00:02:32,870 --> 00:02:35,670
And as we scroll down here, everything looks just fine.

48
00:02:35,690 --> 00:02:37,910
It doesn't seem like we have any violations here at all.

49
00:02:38,300 --> 00:02:42,950
So I'm going to be able to simply say and run, test, call and watch.

50
00:02:45,010 --> 00:02:49,180
If we wanted to, we could probably add a little bit more of a better type for config right here than

51
00:02:49,180 --> 00:02:51,550
just an empty object which is assuming from the default.

52
00:02:52,180 --> 00:02:53,590
But for now, I think this is okay.

53
00:02:54,010 --> 00:02:54,460
There we go.

54
00:02:54,470 --> 00:02:56,500
So everything is still passing perfect.

55
00:02:56,530 --> 00:03:01,090
So that's how simple it is to update a composition API component to using TypeScript.

56
00:03:01,270 --> 00:03:05,880
Of course, things might not always go as easy as it did in this lesson, but that's not a problem.

57
00:03:05,890 --> 00:03:09,730
All we have to do then is just provide the right types here in line for wherever.

58
00:03:09,730 --> 00:03:14,590
TypeScript does not get the right inference, and we basically fix the problem the exact same way we

59
00:03:14,590 --> 00:03:16,720
do with an options API component.

60
00:03:17,080 --> 00:03:17,380
All right.

61
00:03:17,380 --> 00:03:18,760
That's all there is to cover in this lesson.

62
00:03:18,760 --> 00:03:20,440
So I will see you in the next one.
