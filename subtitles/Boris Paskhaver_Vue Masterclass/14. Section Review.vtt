WEBVTT
1
00:00:00.590 --> 00:00:01.430
Okay.

2
00:00:01.430 --> 00:00:05.210
So congratulations on reaching the end of another core section.

3
00:00:05.210 --> 00:00:09.050
And as always, let's do a quick review of everything that we learned.

4
00:00:09.320 --> 00:00:12.410
In this section, we introduced the concept of slots.

5
00:00:12.620 --> 00:00:21.170
A slot allows a parent component to inject dynamic aged HTML content into a specified location in the

6
00:00:21.170 --> 00:00:22.940
template of the child component.

7
00:00:23.240 --> 00:00:28.340
The advantage is that in the child component, we can create some bits of the template that are the

8
00:00:28.340 --> 00:00:34.310
same and reusable, while still allowing the parent to customize some section of the template.

9
00:00:34.550 --> 00:00:41.210
We saw a perfect use case with our accordion component because that way the parent component can specify

10
00:00:41.270 --> 00:00:48.050
which content we want it to be hidden or collapsible by the accordion component while still building

11
00:00:48.050 --> 00:00:53.420
out all of the initial expansion and collapse logic in the heart of the accordion component.

12
00:00:53.600 --> 00:00:59.570
We can keep one part the same and we can customize another part of that component by allowing the parent

13
00:00:59.570 --> 00:01:03.110
to inject that dynamic channel directly in line.

14
00:01:03.380 --> 00:01:04.220
So how does this work?

15
00:01:04.400 --> 00:01:07.460
Well, inside the child component, we use the slot component.

16
00:01:07.760 --> 00:01:13.400
And if we want to provide some kind of default or fallback content, we can provide it within the opening

17
00:01:13.400 --> 00:01:16.400
slot and the closing slot tags in the child.

18
00:01:16.760 --> 00:01:18.230
Then we move on to the parent.

19
00:01:18.230 --> 00:01:21.290
We render our child component an independent component.

20
00:01:21.530 --> 00:01:28.760
We write our custom HTML in between the opening and closing tags of the child component and view will

21
00:01:28.760 --> 00:01:33.770
take everything between those opening and closing tags, and it's going to inject it wherever we use

22
00:01:33.830 --> 00:01:36.440
the slot keyword in our child component.

23
00:01:37.640 --> 00:01:38.000
All right.

24
00:01:38.240 --> 00:01:42.060
So we use slots whenever we'd like the parent to inject custom age to help.

25
00:01:42.410 --> 00:01:46.190
Now, an important note here is the differences between slots and props.

26
00:01:46.400 --> 00:01:51.200
We want to use props when we want the parent to provide data to the child component.

27
00:01:51.470 --> 00:01:55.100
So an easy way to think about it is slots is for injecting HTML.

28
00:01:55.310 --> 00:01:58.280
Props is for injecting anything related to JavaScript.

29
00:01:58.400 --> 00:02:02.270
A number of value, a string, a boolean, an array, an object, etc..

30
00:02:02.510 --> 00:02:07.520
They're both kind of similar because they both relate to a parent passing something down to a child,

31
00:02:07.730 --> 00:02:10.250
but they're different as far as their use cases in view.

32
00:02:10.430 --> 00:02:12.490
A slot is for HTML content.

33
00:02:12.500 --> 00:02:16.610
A prop is for some kind of custom data that you would like to pass down to the child.

34
00:02:16.850 --> 00:02:20.900
Both of these features allow us to make a component a lot more reusable.

35
00:02:21.680 --> 00:02:26.840
Finally, when it comes to testing, we saw that the amount or shallow amount function's configuration

36
00:02:26.840 --> 00:02:30.110
object, that is the second argument that we passed to those function.

37
00:02:30.860 --> 00:02:36.830
The configuration object accepts a slots property where we can provide sample HTML for that component

38
00:02:36.830 --> 00:02:38.540
when it is mounted in our test.

39
00:02:38.930 --> 00:02:41.550
Now it's important to note that each slot has a name.

40
00:02:41.570 --> 00:02:44.060
We'll talk more about this concept in the very next section.

41
00:02:44.360 --> 00:02:50.360
But whenever we just use the plain slot syntax, Vue will assign a name of default to that slot.

42
00:02:50.570 --> 00:02:53.960
So if we use slot by itself, that slot gets a name of default.

43
00:02:54.260 --> 00:02:59.750
Thus in our slots object in our test we have to remember to use the property name default that is the

44
00:02:59.750 --> 00:03:03.650
property and then the value is a string representing the HTML.

45
00:03:03.920 --> 00:03:09.380
We would like the test to inject wherever our component is using that slot keyword.

46
00:03:09.560 --> 00:03:09.980
All right.

47
00:03:10.220 --> 00:03:12.440
So with that, that's all there is to cover in this section.

48
00:03:12.440 --> 00:03:15.470
In the very next section, going to talk more about named slots.

49
00:03:15.620 --> 00:03:16.520
So I will see you there.
