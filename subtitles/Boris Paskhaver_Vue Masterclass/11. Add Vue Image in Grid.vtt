WEBVTT
1
00:00:00.350 --> 00:00:01.170
Okay.

2
00:00:01.170 --> 00:00:06.330
So in this lesson, what I'd like to do is to add an image on the right hand side here, just so that

3
00:00:06.330 --> 00:00:10.080
we don't have this empty block of white space on the right hand side of the screen.

4
00:00:10.290 --> 00:00:14.310
We're just going to add a single static image here, and it's going to be the View logo.

5
00:00:14.580 --> 00:00:19.650
The official Google Careers website actually has a changing image here, and we could implement it,

6
00:00:19.650 --> 00:00:23.550
but it'd be the exact same idea that we have previously done with our text right here.

7
00:00:23.820 --> 00:00:26.520
So I'm just going to stick a single image right here.

8
00:00:26.880 --> 00:00:29.340
So let me go ahead and head back to VS Code.

9
00:00:30.460 --> 00:00:35.770
In the previous lesson, I gave you a URL that you can use to provide the source for our image tag the

10
00:00:35.770 --> 00:00:36.520
we're about to add.

11
00:00:36.910 --> 00:00:39.610
So let's open up our hero dot view component.

12
00:00:39.880 --> 00:00:40.840
So here I got view.

13
00:00:41.140 --> 00:00:48.280
As a reminder, here we have our access grid set up and the way our grid is made up is we have one column

14
00:00:48.280 --> 00:00:55.330
out of 12, then a chunk that occupies five columns out of 12, then another chunk that occupies another

15
00:00:55.330 --> 00:00:57.700
five elements or five columns out of 12.

16
00:00:57.910 --> 00:01:01.330
And then finally, the last div is just one column out of 12.

17
00:01:01.330 --> 00:01:07.360
And these are divs at the very beginning and at the very end are just a little bit of space between

18
00:01:07.360 --> 00:01:08.350
the edges of the screen.

19
00:01:08.650 --> 00:01:13.120
These two sections of five columns each are really the primary focal points.

20
00:01:13.330 --> 00:01:16.450
So in the very first one, we have our form and our headline.

21
00:01:16.600 --> 00:01:19.510
And then the second one is where I want to render my image.

22
00:01:19.840 --> 00:01:25.780
So right here I'm going to use my image tag and of course I need to provide the source and I'm going

23
00:01:25.780 --> 00:01:29.200
to copy this source URL from another screen.

24
00:01:30.250 --> 00:01:31.210
And here we go.

25
00:01:32.540 --> 00:01:33.020
There we go.

26
00:01:33.200 --> 00:01:36.280
And then I want to apply a couple tailwind styles right here.

27
00:01:36.290 --> 00:01:38.030
So I'm going to do my class here.

28
00:01:38.300 --> 00:01:40.070
I'm going to do W 80.

29
00:01:40.070 --> 00:01:46.970
That is going to set a width of 320 pixels and I'll do a similar height, class H for height and 80

30
00:01:47.150 --> 00:01:48.590
and 320 pixels.

31
00:01:48.770 --> 00:01:54.620
So I've now created this box of 320 pixels by 320 pixels, but that doesn't mean that our source image

32
00:01:54.620 --> 00:01:58.190
is going to fit within those confines, within those dimensions.

33
00:01:58.400 --> 00:02:03.830
In order to make it fit, I can apply another class called Object Contain, but that is going to do,

34
00:02:03.830 --> 00:02:08.870
as you can see in the right hand documentation is it's going to apply the object fit property with a

35
00:02:08.870 --> 00:02:09.800
value of contain.

36
00:02:09.980 --> 00:02:15.890
And what that does is it resizes the elements content or in other words the picture to fit those dimensions

37
00:02:15.890 --> 00:02:17.960
to fit that width and height.

38
00:02:18.170 --> 00:02:18.430
All right.

39
00:02:18.770 --> 00:02:21.710
So let's save this and see what we have in the browser.

40
00:02:21.710 --> 00:02:23.150
It's not going to be perfect just yet.

41
00:02:24.550 --> 00:02:29.230
So here we have our image being rendered and it's looking fine and looking just the right size.

42
00:02:29.500 --> 00:02:34.840
However, it is a little bit off because obviously it's kind of still enabling this white space over

43
00:02:34.840 --> 00:02:35.140
here.

44
00:02:35.320 --> 00:02:40.270
I'd really like to be able to center this image amongst it's five columns in the grid.

45
00:02:40.660 --> 00:02:42.420
So let's just show you where we are right now.

46
00:02:42.430 --> 00:02:48.700
If I go inside, my main content in my section here is my grid and we can see the 12 columns laid out

47
00:02:48.700 --> 00:02:49.330
in the screen.

48
00:02:49.720 --> 00:02:56.590
We can actually see where the top left edge of my view logo begins is the start of the first column.

49
00:02:56.890 --> 00:03:03.040
So it stretches across two columns, but we still have those three additional columns that are that

50
00:03:03.040 --> 00:03:04.000
section of the grid.

51
00:03:04.180 --> 00:03:10.060
And what I'd really like to do is to center it both horizontally and vertically in those five columns

52
00:03:10.060 --> 00:03:11.890
belonging to my 12 column grid.

53
00:03:12.190 --> 00:03:18.250
And in order to do that, we have to apply some help to the asset classes from Tailwind onto our DIV

54
00:03:18.260 --> 00:03:22.300
that's actually creating that collection of five columns in the grid.

55
00:03:23.110 --> 00:03:29.350
So back in verse code right here on this div that is holding our image element, I'm going to add two

56
00:03:29.350 --> 00:03:30.040
more classes.

57
00:03:30.550 --> 00:03:35.680
One is going to be self center and that is going to apply the aligned self properties set to center

58
00:03:35.890 --> 00:03:41.920
and the other one is going to be justify self center and that is going to apply the justified self property

59
00:03:41.920 --> 00:03:42.760
set to center.

60
00:03:43.000 --> 00:03:47.350
So these are more complex properties directly available to grid children within a grid.

61
00:03:47.530 --> 00:03:53.290
And basically what they do is center the element on both the column axis and the row axis within its

62
00:03:53.290 --> 00:03:56.920
respective column chunk of the larger grid.

63
00:03:57.190 --> 00:04:01.420
So basically, if we apply these two classes, we're going to be able to center the image within this

64
00:04:01.420 --> 00:04:02.260
section of the grid.

65
00:04:02.650 --> 00:04:04.540
So if I save this and head back to the page.

66
00:04:05.440 --> 00:04:05.860
All right.

67
00:04:05.860 --> 00:04:07.750
We even saw that change instantaneously.

68
00:04:08.050 --> 00:04:09.460
This is looking a lot better.

69
00:04:09.460 --> 00:04:13.720
Looks a little cleaner, looks pretty good to me, although I do not come from a design background.

70
00:04:13.960 --> 00:04:21.400
It looks nice and clean and if I open up my view devtools we can see the component being rendered here.

71
00:04:21.520 --> 00:04:22.930
In fact, there is no actual components.

72
00:04:22.930 --> 00:04:24.280
We can only look in the elements.

73
00:04:24.640 --> 00:04:29.050
My mistake right there, if we go into the main section here is our div.

74
00:04:29.290 --> 00:04:36.430
Here we have a top level grid and we can see how now the view image is aligned horizontally and vertically

75
00:04:36.430 --> 00:04:40.900
centered in the confines of that five column section of the grid.

76
00:04:41.350 --> 00:04:44.470
And here is the actual image itself.

77
00:04:45.280 --> 00:04:45.610
Perfect.

78
00:04:45.880 --> 00:04:47.080
So that is looking nice.

79
00:04:47.080 --> 00:04:51.640
That was just a little aesthetic touch to add to make sure the screen is not too boring, but things

80
00:04:51.640 --> 00:04:52.570
are looking pretty good.

81
00:04:52.810 --> 00:04:54.040
Our headlines looking great.

82
00:04:54.040 --> 00:04:55.090
Our prompt is looking good.

83
00:04:55.090 --> 00:04:57.130
Our form is functional working.

84
00:04:57.130 --> 00:05:00.550
So we've made a lot of progress and I will see you in the next lesson.
