WEBVTT
1
00:00:00.210 --> 00:00:01.110
All right.

2
00:00:01.110 --> 00:00:08.430
So now in our main NAV component, we are successfully reading from the View Store using the store property

3
00:00:08.430 --> 00:00:09.090
that is available.

4
00:00:09.240 --> 00:00:14.880
Now I want to tackle the other half of the equation, which is writing to or updating the store.

5
00:00:15.180 --> 00:00:18.600
Well, as a reminder, how do we update a store state?

6
00:00:18.780 --> 00:00:20.910
We have to do it using a mutation.

7
00:00:21.060 --> 00:00:22.800
And how can we issue a mutation?

8
00:00:23.010 --> 00:00:25.950
We do so via the commit method on the store.

9
00:00:26.250 --> 00:00:31.680
Well, we already have a store object in every component referenced by the dollar sign store property.

10
00:00:32.040 --> 00:00:37.410
So in this log in user method, which runs automatically whenever the user clicks the login button,

11
00:00:37.710 --> 00:00:40.260
I'm going to take my store reference.

12
00:00:40.260 --> 00:00:41.430
This is my store object.

13
00:00:41.610 --> 00:00:46.020
We know that we have a commit method and what message do I want to commit?

14
00:00:46.020 --> 00:00:47.760
Which mutation do I want to run?

15
00:00:48.060 --> 00:00:51.240
This one right here called log in user.

16
00:00:52.720 --> 00:00:53.350
And that's it.

17
00:00:53.380 --> 00:00:56.020
We don't have to change anything else in this component.

18
00:00:56.320 --> 00:01:00.520
So I know it may be redundant, but I really want to run through the logic of everything that's going

19
00:01:00.520 --> 00:01:03.160
to go on before we look at this in the browser.

20
00:01:03.370 --> 00:01:08.080
So the browser is going to start up, it's going to load the View X App Store, it's going to load the

21
00:01:08.080 --> 00:01:13.180
View App, and we're going to start with a state with a single property of is login set to false?

22
00:01:13.420 --> 00:01:17.980
The component is immediately going to read that state and see is logged in to set the false.

23
00:01:18.220 --> 00:01:21.010
So it's going to use that for the V of properties or the attributes.

24
00:01:21.010 --> 00:01:21.880
Sorry, the directives.

25
00:01:22.060 --> 00:01:25.780
It's going to use that for the V if directives right here are going to be set to false.

26
00:01:25.780 --> 00:01:28.860
So we're not going to see the profile image and we're not going to see the sub now.

27
00:01:29.230 --> 00:01:33.370
Then when the user clicks the action button, we're going to run the log in user method.

28
00:01:33.670 --> 00:01:37.210
The log in user method will issue a mutation to the store.

29
00:01:37.570 --> 00:01:44.560
This method will run which will change the value of the is logged in property on my view x store.

30
00:01:44.920 --> 00:01:47.740
Now remember, the entire idea is reactivity.

31
00:01:47.800 --> 00:01:53.440
Whenever the View Store state changes, it informs all components that are reading from the store.

32
00:01:53.680 --> 00:01:57.880
Right now we only have the main nav component reading, but the same logic applies.

33
00:01:58.030 --> 00:02:03.160
The UX will say hey may nav my is logged and property has updated.

34
00:02:03.460 --> 00:02:04.900
So what is me now going to do?

35
00:02:05.080 --> 00:02:10.750
It's going to rerun the is logged in computed property because the store has reactively changed.

36
00:02:11.020 --> 00:02:17.170
This will now evaluate to true which is the new value of the is logged in store property.

37
00:02:17.320 --> 00:02:23.170
And because this is now true, Vue will then re render the template and now VF is going to have a value

38
00:02:23.170 --> 00:02:24.970
of true right here and true right here.

39
00:02:25.210 --> 00:02:30.550
The V of directive receives a boolean of true, so it's now going to render profile, image and subnet.

40
00:02:30.760 --> 00:02:33.730
It's the exact same design we previously had.

41
00:02:33.880 --> 00:02:40.300
The only difference is we've removed this logic from being stored in local components, state i.e. data

42
00:02:40.450 --> 00:02:44.320
and moved it entirely to being dependent on the view store.

43
00:02:44.650 --> 00:02:46.810
So let's take a look at this in the browser right here.

44
00:02:47.560 --> 00:02:48.340
We're going to start out.

45
00:02:48.550 --> 00:02:49.690
We are not signed in.

46
00:02:49.690 --> 00:02:54.040
When I click this, we're going to issue a mutation, the view store is going to update and then our

47
00:02:54.040 --> 00:02:54.940
components going to update.

48
00:02:54.940 --> 00:02:58.720
It's going to be instantaneous, but that is exactly what's happening there in that moment.

49
00:02:58.750 --> 00:03:04.510
Let me refresh the page to show you again once again when I refresh our view store has a single property

50
00:03:04.510 --> 00:03:06.130
is logged in is set to false.

51
00:03:06.340 --> 00:03:10.360
When I press this button, we issue a mutation to the store.

52
00:03:10.420 --> 00:03:16.000
The store knows how to react to the log in user mutation and knows to flip the is logged in property

53
00:03:16.000 --> 00:03:21.400
at true that updates the store which updates the component which we renders that template and gives

54
00:03:21.400 --> 00:03:23.200
us the sub nav and the profile image.

55
00:03:23.740 --> 00:03:24.010
All right.

56
00:03:24.220 --> 00:03:25.870
So hopefully this has been a fun lesson.

57
00:03:25.870 --> 00:03:31.210
And in the very next next lesson, we're going to see how we can observe this view store change in our

58
00:03:31.210 --> 00:03:31.840
DevTools.
