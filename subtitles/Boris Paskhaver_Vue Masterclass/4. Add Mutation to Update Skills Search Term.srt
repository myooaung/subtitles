1
00:00:00,580 --> 00:00:01,570
All right.

2
00:00:01,570 --> 00:00:07,960
So in the previous lesson, we defined a new property on our view store state called skills search term.

3
00:00:08,260 --> 00:00:11,740
And of course the intent there is for it to start out as an empty string.

4
00:00:12,010 --> 00:00:17,800
And whenever the user is going to type a character into our input field in our new component, we want

5
00:00:17,800 --> 00:00:21,250
to update our skill search term to reflect what they have just typed.

6
00:00:21,610 --> 00:00:25,990
And so of course, in order to make changes to the View Store State, we're going to need to write a

7
00:00:25,990 --> 00:00:32,080
mutation, a mutation that's going to take the most up to date skills search term and update the string

8
00:00:32,080 --> 00:00:33,820
that is stored within our view X Star State.

9
00:00:34,210 --> 00:00:36,460
So on the left hand side, I have my mutations file.

10
00:00:37,120 --> 00:00:39,550
On the right hand side I have my mutations test file.

11
00:00:39,790 --> 00:00:42,850
And of course I want to write a test for my new mutation.

12
00:00:43,150 --> 00:00:46,360
I'm going to call my mutation update skills search term.

13
00:00:46,810 --> 00:00:50,860
Let me scroll down a little bit here and let's see where I want to put it.

14
00:00:50,860 --> 00:00:51,940
It doesn't really matter.

15
00:00:51,940 --> 00:00:56,710
How about right here in between add selected degrees and clear user job filter selections.

16
00:00:57,220 --> 00:00:58,990
So I'm going to describe the new mutation.

17
00:00:58,990 --> 00:01:03,640
I want to add it's going to be called update skills search term.

18
00:01:05,410 --> 00:01:06,520
And here's the arrow function.

19
00:01:07,210 --> 00:01:10,900
And I'm going to say it receives search term.

20
00:01:14,080 --> 00:01:16,990
For skills the user has.

21
00:01:18,500 --> 00:01:18,610
Right.

22
00:01:18,730 --> 00:01:21,750
And of course, if you come up with a better description, feel free to utilize it.

23
00:01:21,760 --> 00:01:22,900
This is just my best shot.

24
00:01:23,410 --> 00:01:23,680
All right.

25
00:01:23,680 --> 00:01:25,840
So we're going to start out with a starting state.

26
00:01:27,160 --> 00:01:30,400
Which we're going to get by invoking our create state helper function.

27
00:01:30,820 --> 00:01:36,040
Remember, our Create State Helper function is relying on the original state function which we modified

28
00:01:36,040 --> 00:01:41,800
in the previous lesson, so it will automatically have a skills search term property set to an empty

29
00:01:41,800 --> 00:01:42,910
string out of the box.

30
00:01:43,210 --> 00:01:47,020
However, I do want to provide it in line here just to communicate what this test does.

31
00:01:47,480 --> 00:01:52,450
So right here I'm going to provide my skills, search term property set to an empty string, and then

32
00:01:52,450 --> 00:01:55,210
we can better explain what this mutation is supposed to do.

33
00:01:55,570 --> 00:01:57,160
So right here I have my mutations.

34
00:01:57,160 --> 00:01:57,970
Object imported.

35
00:01:59,170 --> 00:02:04,660
And I'm going to assume that it's going to have my mutation called update skills search term, and I'm

36
00:02:04,660 --> 00:02:07,690
going to assume that that mutation is going to accept the starting state.

37
00:02:08,230 --> 00:02:10,090
That's always the first argument to mutation.

38
00:02:10,330 --> 00:02:15,010
Then the second argument is up to us, and I'm going to assume it's going to receive a search term,

39
00:02:15,010 --> 00:02:18,520
a string of the search term that the user has entered in the box.

40
00:02:19,300 --> 00:02:21,610
So let's say this is going to be something like the string view.

41
00:02:22,750 --> 00:02:23,270
All right.

42
00:02:23,290 --> 00:02:28,990
And then what I expect to happen after this mutation runs is if I look at my starting state and I look

43
00:02:28,990 --> 00:02:35,590
at it skills, search term property, this should be equal to the string view, which means we've received

44
00:02:35,590 --> 00:02:38,710
that string that the users typed and we've now saved it to the View Store.

45
00:02:39,220 --> 00:02:39,610
Perfect.

46
00:02:39,970 --> 00:02:42,050
So now we can go ahead and implement our solution.

47
00:02:42,100 --> 00:02:44,920
The first thing I'm going to do is to open up my constants file.

48
00:02:46,480 --> 00:02:49,060
And here we have sections for each kind of category.

49
00:02:49,300 --> 00:02:54,850
So I'm going to create a new comment here for my new category, which I'll call skills and qualifications.

50
00:02:56,020 --> 00:03:01,150
And right here I will export a new concept with the name of my mutation, which is update skills, a

51
00:03:01,150 --> 00:03:04,330
search term set to a string with the exact same value.

52
00:03:04,330 --> 00:03:06,340
Update Skills Search term.

53
00:03:07,770 --> 00:03:11,430
Save that and that allows me to move back to my mutations for.

54
00:03:12,370 --> 00:03:18,700
And right here, I'm going to import that new constant, which is called update skills search term.

55
00:03:19,030 --> 00:03:21,040
And then, of course, I can utilize that below.

56
00:03:21,340 --> 00:03:24,430
So scrolling down, I'm going to add it right here.

57
00:03:24,670 --> 00:03:28,300
Update skills, search term, provide my function body.

58
00:03:28,630 --> 00:03:29,170
There we go.

59
00:03:29,590 --> 00:03:33,100
And of course, we're going to provide the exact parameters that this mutation expects.

60
00:03:33,100 --> 00:03:36,640
The first parameter to mutation is always going to be the current view extra state.

61
00:03:37,150 --> 00:03:40,870
So I'll call that parameter state and say that has a type of global state.

62
00:03:41,800 --> 00:03:48,130
Then the second argument that we want here, as we defined in our desired implementation or desired

63
00:03:48,130 --> 00:03:50,860
kind of happy path in the test suite is going to be a string.

64
00:03:51,190 --> 00:03:56,560
So I will call that the skills search term and I will tell TypeScript that it should be of type string.

65
00:03:57,130 --> 00:04:00,160
And then what are we going to do in the body of this actual method?

66
00:04:00,490 --> 00:04:05,230
We're going to, of course, take our existing state and we want to overwrite it skills, search term

67
00:04:05,230 --> 00:04:11,680
property to be whatever string skills search term represents, which again will be passed in by the

68
00:04:11,680 --> 00:04:13,480
component when we commit this mutation.

69
00:04:13,780 --> 00:04:16,330
So our goal eventually is that as the user types.

70
00:04:17,530 --> 00:04:20,890
You just get this to save as these are types, we're going to commit the mutation.

71
00:04:20,890 --> 00:04:22,690
Hey, the users type this new string.

72
00:04:22,870 --> 00:04:24,580
Please take it and save it to the store.

73
00:04:24,790 --> 00:04:30,040
And each time these are types we're going to commit a new mutation, get that updated string and update

74
00:04:30,040 --> 00:04:31,390
that property and if you store.

75
00:04:31,870 --> 00:04:32,290
All right.

76
00:04:32,290 --> 00:04:35,920
So with that, our test is passing and that's all there is to cover in this lesson.

77
00:04:35,920 --> 00:04:37,450
So I will see you in the next one.
