1
00:00:00,210 --> 00:00:01,050
Okay.

2
00:00:01,050 --> 00:00:07,080
So we made lots of progress in the previous lesson refactoring our job filter sidebar component and

3
00:00:07,080 --> 00:00:10,710
creating three new smaller child components right here.

4
00:00:11,040 --> 00:00:16,350
And what we're going to discover in this lesson as we refactor the test suite is that this design is

5
00:00:16,350 --> 00:00:18,840
also going to lead to simpler tests.

6
00:00:18,930 --> 00:00:19,350
All right.

7
00:00:19,650 --> 00:00:20,580
Let me show you what I mean.

8
00:00:20,820 --> 00:00:24,540
So on the right hand side, I have my test file for the jobs of the sidebar.

9
00:00:24,840 --> 00:00:27,030
And here we have three distinct tests.

10
00:00:27,450 --> 00:00:32,370
They allow the user to filter their jobs by job types, by organizations, as well as by degrees.

11
00:00:32,670 --> 00:00:36,390
So we're basically validating the functionality that each one of these components was doing.

12
00:00:37,050 --> 00:00:42,390
But previously, when we were capturing all of our composable in the setup method right here, we needed

13
00:00:42,390 --> 00:00:44,670
to mock them all out for any given test.

14
00:00:44,880 --> 00:00:46,170
We had three composable.

15
00:00:46,200 --> 00:00:48,300
Thus we did three mock return values.

16
00:00:48,630 --> 00:00:54,810
Now, the beautiful part about our new design is each one of these three components relies on its own

17
00:00:54,900 --> 00:01:00,720
single composable function, which means when we break up these tests into smaller test suites for these

18
00:01:00,720 --> 00:01:05,910
components in each test suite, we're only going to need to mark out one composable, right?

19
00:01:05,910 --> 00:01:11,580
Because in any one of these components, for example, let me open up degrees right here, job filter

20
00:01:11,580 --> 00:01:12,300
side by degrees.

21
00:01:12,480 --> 00:01:15,840
In this one, we're now only using one composable.

22
00:01:15,870 --> 00:01:18,210
Use unique degrees we no longer care about.

23
00:01:18,210 --> 00:01:24,570
Use unique job types or use unique organizations because that logic is filtered out or captured in the

24
00:01:24,570 --> 00:01:26,220
other smaller components.

25
00:01:26,220 --> 00:01:26,490
Right.

26
00:01:26,700 --> 00:01:32,340
So that's going to allow us to both copy the tests we have right here from sidebar to this new component

27
00:01:32,340 --> 00:01:35,670
test, but also allow us to simplify the logic we have right here.

28
00:01:36,000 --> 00:01:39,360
So with that said, let's begin by going back to our sidebar.

29
00:01:40,230 --> 00:01:44,040
And what I'm going to do in the test file is I'm going to comment out all of this code for now.

30
00:01:44,400 --> 00:01:46,650
Later on, we're going to commit it back in.

31
00:01:46,650 --> 00:01:49,530
And then what we're going to do is copy these tests to new test sales.

32
00:01:49,950 --> 00:01:55,020
But for now, what I want to do is write one very, very simple test, basically just a sanity check

33
00:01:55,020 --> 00:01:58,920
to ensure the job filter sidebar is mounting correctly with no issues.

34
00:01:59,070 --> 00:02:03,690
In fact, I'm going to use shallow amount right here because we don't really care about all the internals

35
00:02:03,690 --> 00:02:04,640
of these child components.

36
00:02:04,830 --> 00:02:09,930
We just basically want to get the cyber component up and running and make sure there is no problems

37
00:02:09,930 --> 00:02:10,170
there.

38
00:02:10,560 --> 00:02:15,960
So what I'm going to do right here is add a new test above my comment ID code.

39
00:02:16,590 --> 00:02:26,010
It sets up a panel for a user to filter jobs by one or more criteria.

40
00:02:26,640 --> 00:02:27,030
All right.

41
00:02:27,390 --> 00:02:29,880
So that is a good place to start.

42
00:02:29,880 --> 00:02:32,340
And this is simply going to be a two line test.

43
00:02:32,640 --> 00:02:38,460
The first thing is I'm going to shallow amount my actual component, which is called job filter sidebar.

44
00:02:38,760 --> 00:02:43,620
And on the next line, you may recall that this view wrapper object that the test utils library gives

45
00:02:43,620 --> 00:02:49,440
us, it has an existing method which returns a boolean and that simply verifies that the wrapper exists,

46
00:02:49,620 --> 00:02:52,050
which basically means that there was no issues.

47
00:02:52,260 --> 00:02:56,490
There was no issues as far as instantiating the component, initializing it and mounting it.

48
00:02:56,760 --> 00:03:01,320
So it's kind of a very simple dumb test to verify that the wrapper exists, that, in other words,

49
00:03:01,320 --> 00:03:03,690
line 19 executed without any error.

50
00:03:04,020 --> 00:03:08,310
So right here the exist method will return a boolean and I'm going to check whether that boolean is

51
00:03:08,310 --> 00:03:08,700
true.

52
00:03:08,910 --> 00:03:10,930
And if it's true, it means the component exists.

53
00:03:10,950 --> 00:03:12,510
So everything worked as expected.

54
00:03:13,260 --> 00:03:17,100
All right, let me save this file and we'll see if my test passes.

55
00:03:18,700 --> 00:03:19,300
All right.

56
00:03:19,300 --> 00:03:20,770
Give it a couple seconds to run.

57
00:03:21,370 --> 00:03:21,640
All right.

58
00:03:21,650 --> 00:03:22,330
And it's passing.

59
00:03:22,510 --> 00:03:26,050
And now we can move on to creating test files for each of our new components.

60
00:03:26,380 --> 00:03:28,000
So let's start with these tests.

61
00:03:28,270 --> 00:03:30,130
From the from the top and moving on down.

62
00:03:30,520 --> 00:03:33,860
So this first one is allows users to filter jobs by job types.

63
00:03:33,910 --> 00:03:38,020
So the first component that is responsible for this is going to be our job types component.

64
00:03:38,350 --> 00:03:41,680
So let me open up job builder sidebar, job type stock view.

65
00:03:42,040 --> 00:03:45,850
And immediately what I'm going to do is create a corresponding test file.

66
00:03:46,270 --> 00:03:52,780
So right here in my test unit components directory, I'm going to find job results, job filter, sidebar.

67
00:03:52,810 --> 00:03:56,440
And here I'm going to create job filters.

68
00:03:57,490 --> 00:04:01,260
Sidebar job types that test.

69
00:04:01,270 --> 00:04:03,430
That's all right.

70
00:04:03,910 --> 00:04:05,590
And let me keep this file here.

71
00:04:05,890 --> 00:04:11,530
And what I'm going to try to do is basically copy and paste the lines that I care about right here into

72
00:04:11,530 --> 00:04:12,490
my new test file.

73
00:04:12,730 --> 00:04:15,490
And the hope is eventually to take this test as well.

74
00:04:15,820 --> 00:04:16,930
So let's start from the very top.

75
00:04:16,930 --> 00:04:19,340
We're obviously going to need our shallow amount functions.

76
00:04:19,340 --> 00:04:20,080
So let me copy that.

77
00:04:20,080 --> 00:04:20,380
Over.

78
00:04:21,700 --> 00:04:26,560
Then what I'm going to do, just to keep things really simple is I'm going to copy over all of the imports

79
00:04:26,560 --> 00:04:32,290
of the composable, as well as the mocking out of them or the type assignment for TypeScript for me.

80
00:04:32,290 --> 00:04:33,680
Copy that over here as well.

81
00:04:34,330 --> 00:04:39,310
And then, of course, we're going to clean it up because we no longer need all of these imports in

82
00:04:39,310 --> 00:04:41,230
our job types component.

83
00:04:41,410 --> 00:04:44,020
All we're relying on is this composable right here.

84
00:04:44,020 --> 00:04:45,760
Use unique job types.

85
00:04:46,060 --> 00:04:51,520
So right here, all I need to mark out is use unique job types so we can get rid of these two imports

86
00:04:52,030 --> 00:04:58,170
and we can also get rid of these two mock assignments right here and keep it super simple like so.

87
00:04:58,950 --> 00:05:02,440
So now we're going to have the composable, we're going to mock it out, and then we're going to create

88
00:05:02,440 --> 00:05:05,550
a new icons to give it the right type for typescript sake.

89
00:05:05,950 --> 00:05:07,930
Then let's actually import our new component.

90
00:05:07,930 --> 00:05:15,250
And that is going to be the job filters, sidebar, job type's component, and that is going to come

91
00:05:15,250 --> 00:05:16,570
from the source directory.

92
00:05:16,960 --> 00:05:21,430
Let me take a look at my notes here because it has a pretty long file path.

93
00:05:21,730 --> 00:05:23,410
So source components.

94
00:05:23,410 --> 00:05:24,520
Job results.

95
00:05:24,520 --> 00:05:25,330
Job filters.

96
00:05:25,330 --> 00:05:25,990
Sidebar.

97
00:05:27,010 --> 00:05:30,400
And then finally, jobs, other sidebar job types.

98
00:05:31,720 --> 00:05:32,260
There we go.

99
00:05:32,620 --> 00:05:39,280
Next thing I'm going to do is provide a describe block for my job filter is sidebar job types component

100
00:05:39,640 --> 00:05:41,200
one of our three new components.

101
00:05:41,680 --> 00:05:45,220
And in here, the basic tasks we want is this one right here.

102
00:05:45,220 --> 00:05:47,950
It allows users to filter jobs by job types.

103
00:05:48,310 --> 00:05:54,670
So let me commit this test back in in my job, just sidebar tester and then what I'm immediately going

104
00:05:54,670 --> 00:05:59,860
to do is cut it and simply paste it right here because it's now applying for this logic.

105
00:06:00,730 --> 00:06:01,030
All right.

106
00:06:01,300 --> 00:06:04,540
So with that written, let me go ahead and drag this far back to the right.

107
00:06:04,900 --> 00:06:09,760
So now we can compare the test file on the right with my component and then we can adjust it accordingly.

108
00:06:10,090 --> 00:06:13,240
So do we need to mark out use unique job types?

109
00:06:13,240 --> 00:06:17,920
We do because we're importing it, mocking it out here and we are using it in the component body.

110
00:06:18,220 --> 00:06:23,170
But here is where we gain the benefits of splitting up that logic that was formerly in the sidebar component.

111
00:06:23,380 --> 00:06:26,920
We no longer need these marks on lines 12 and 13.

112
00:06:27,280 --> 00:06:32,500
Those organizations and Degrees Logic is now captured in our two other components that we created in

113
00:06:32,500 --> 00:06:37,510
the previous lesson, and we don't need to mock it out because these are not utilized in the setup method

114
00:06:37,720 --> 00:06:42,370
of our job filter, sidebar job types component, so we can immediately get rid of these two lines.

115
00:06:43,440 --> 00:06:47,070
All right, then, of course, we're no longer mounting a sidebar component.

116
00:06:47,070 --> 00:06:50,010
We're doing a job filter, sidebar, job types, component.

117
00:06:50,370 --> 00:06:50,910
There we go.

118
00:06:51,270 --> 00:06:53,190
And there's a couple more changes we have to implement.

119
00:06:53,370 --> 00:06:54,840
And let me talk through them one by one.

120
00:06:55,140 --> 00:07:00,960
So you'll notice here that we are passing down two props, unique values and mutation while our tests

121
00:07:00,960 --> 00:07:02,310
are checking for three.

122
00:07:02,580 --> 00:07:08,400
So Header was a former prop that we were passing down to a checkbox group so that that component could

123
00:07:08,400 --> 00:07:11,550
pass down the header prop to our accordion.

124
00:07:11,880 --> 00:07:16,620
But remember in our jobs filter sidebar, we now transferred this accordion up one level.

125
00:07:16,860 --> 00:07:22,620
So our sidebar degrees component which renders a checkbox group no longer needs to pass down a header.

126
00:07:22,620 --> 00:07:24,750
We are now capturing that outside of this component.

127
00:07:25,110 --> 00:07:28,470
So in other words, this header logic is a test that we no longer need.

128
00:07:28,470 --> 00:07:30,570
It's no longer reflective of our implementation.

129
00:07:30,840 --> 00:07:35,130
So immediately I'm going to get rid of Header right here and I'm also going to get rid of this first

130
00:07:35,130 --> 00:07:36,570
assertion that validates the header.

131
00:07:36,570 --> 00:07:38,460
Prop receives the value of job types.

132
00:07:39,660 --> 00:07:40,230
So it were valid.

133
00:07:40,230 --> 00:07:44,280
And here is that we are finding our job types filter component using fine component.

134
00:07:44,550 --> 00:07:45,710
We're getting its props.

135
00:07:45,720 --> 00:07:46,830
We're getting two of the props.

136
00:07:46,830 --> 00:07:51,240
We care about unique values and mutation, these two right here and we're validating that they get the

137
00:07:51,240 --> 00:07:51,930
correct values.

138
00:07:52,140 --> 00:07:54,870
The unique values right here should be coming from our composable.

139
00:07:55,020 --> 00:07:59,880
And since we provided a mock return value right here of a set of two strings, that is the exact same

140
00:07:59,880 --> 00:08:01,860
value we expect to pass down to that prop.

141
00:08:02,070 --> 00:08:07,050
And then mutations should be a basic string coming right here from our ADD selected job types mutation

142
00:08:07,440 --> 00:08:11,130
or a string constant representing that mutation name to be more specific.

143
00:08:11,580 --> 00:08:17,070
Now when I save this, we're going to discover that our test is not going to pass and that is okay.

144
00:08:17,820 --> 00:08:19,250
And what's actually going to happen here?

145
00:08:19,270 --> 00:08:23,730
This is something that's a little bit weird, but what's happening here when I did a little bit of research

146
00:08:23,730 --> 00:08:29,520
is I discovered that our data test attribute here was not actually working, even though it is job types

147
00:08:29,520 --> 00:08:31,020
filter here and it is job type.

148
00:08:31,020 --> 00:08:36,600
So here for some reason, when I transfer this logic over to this new test file, it was no longer working.

149
00:08:36,930 --> 00:08:41,400
So what I decided to do here, since I wanted a simple solution that still utilized shallow amount,

150
00:08:41,610 --> 00:08:46,350
which means I don't want to render the full checkbox to component and have to deal with its complexity.

151
00:08:46,560 --> 00:08:51,450
I just want to render a stub or a replacement and then validate that I'm passing the right props.

152
00:08:51,840 --> 00:08:56,520
What I decided is to simply search literally for a checkbox group component in my test.

153
00:08:56,820 --> 00:09:01,200
Now, earlier in the course I mentioned, that's not really the best practice because it ties itself

154
00:09:01,200 --> 00:09:02,880
very closely to the implementation.

155
00:09:03,000 --> 00:09:08,040
And that's why data test is better, is because we can replace this component with any other component.

156
00:09:08,040 --> 00:09:12,750
And as long as it has a date of this attribute, that's still equal to job types filter, this logic

157
00:09:12,750 --> 00:09:13,380
would still work.

158
00:09:13,650 --> 00:09:18,480
So I understand that the test that we're about to write is less reliable and more flaky.

159
00:09:18,720 --> 00:09:24,720
But given how closely we are connected to using a singular component in this job text component, it's

160
00:09:24,720 --> 00:09:27,000
basically just a wrapper around a checkbox group.

161
00:09:27,000 --> 00:09:33,480
Anyway, I'm okay with directly checking for a checkbox script component literally in my find component

162
00:09:33,900 --> 00:09:34,320
filter.

163
00:09:34,590 --> 00:09:38,730
So what I'm doing here is instead of searching for a component with this dataset attribute in order

164
00:09:38,730 --> 00:09:43,800
to search for a actual view component directly, what we can do is provide an object here as an argument,

165
00:09:44,040 --> 00:09:45,840
and then we provide a name property.

166
00:09:46,050 --> 00:09:49,410
And that name property represents the name we assigned to that component.

167
00:09:49,650 --> 00:09:54,420
So in the case of our job filter signed by our checkbox group, that component has a name that we defined

168
00:09:54,420 --> 00:09:58,770
in its script section called Job Filters Sidebar.

169
00:10:00,270 --> 00:10:01,470
CheckBox group.

170
00:10:02,920 --> 00:10:05,190
And so I'm going to find a component by its literal name.

171
00:10:05,200 --> 00:10:07,750
There's only one component that matches that, which is this thing right here.

172
00:10:08,170 --> 00:10:10,270
And if this works, let me save this and let it run.

173
00:10:10,510 --> 00:10:13,990
Then what should happen is the test file should find the component.

174
00:10:14,290 --> 00:10:16,540
It's able to locate it, it's able to get its props.

175
00:10:16,540 --> 00:10:18,760
And I can see our tests are passing again.

176
00:10:18,760 --> 00:10:23,860
The reason I had to make this change is when I was playing around with this lesson before I instructed

177
00:10:23,860 --> 00:10:30,190
it, I discovered that using our data test attribute was the test utils was not able to find this component

178
00:10:30,190 --> 00:10:34,180
or maybe it was able to find it, but for some reason it wasn't able to get the prop script.

179
00:10:34,450 --> 00:10:38,380
This line right here was simply not working while this approach didn't work.

180
00:10:38,620 --> 00:10:44,260
So again, data test is what I prefer because it's less flaky and less brittle, it's more sustainable

181
00:10:44,260 --> 00:10:45,790
and it's more adaptive to change.

182
00:10:45,970 --> 00:10:50,380
But this was a solution I had to implement simply so that I can do structure the correct props and check

183
00:10:50,380 --> 00:10:50,920
their values.

184
00:10:50,920 --> 00:10:53,200
And that's what we're going to do for our other test as well.

185
00:10:54,010 --> 00:10:54,340
All right.

186
00:10:54,640 --> 00:10:56,530
So that takes care of our job types test.

187
00:10:56,530 --> 00:10:57,510
And you know the drill.

188
00:10:57,520 --> 00:11:00,460
We're going to have to write similar tests for our other two components.

189
00:11:00,760 --> 00:11:03,520
So once again, let's go back to sidebar.

190
00:11:03,580 --> 00:11:06,430
Our next thing in line is going to be filter jobs by organizations.

191
00:11:06,430 --> 00:11:08,230
So let's create a test file for that component.

192
00:11:08,680 --> 00:11:14,200
So right here in our tests unit components, job results, job filter, sidebar directory, I'm going

193
00:11:14,200 --> 00:11:15,130
to create my test file.

194
00:11:15,460 --> 00:11:17,590
So this is going to be job filters.

195
00:11:17,590 --> 00:11:18,370
Sidebar.

196
00:11:19,740 --> 00:11:21,750
Organisations is our new component.

197
00:11:21,750 --> 00:11:27,600
And then of course that test that yes, there we go very similarly to what we did earlier, we're going

198
00:11:27,600 --> 00:11:30,930
to copy over basically everything here is let's copy over shallow amount.

199
00:11:33,200 --> 00:11:35,720
Then let's copy over all of our imports and mocks.

200
00:11:37,280 --> 00:11:42,710
And of course for our organizations component, that one is relying on the use of unique organizations

201
00:11:42,710 --> 00:11:43,250
composable.

202
00:11:43,430 --> 00:11:47,030
So we do need to import that one and mock it out, but we don't care about the other two.

203
00:11:47,270 --> 00:11:50,180
So let's eliminate this job types one and this degrees one.

204
00:11:50,540 --> 00:11:53,840
And that allows us to, of course, get rid of this line and this line.

205
00:11:55,100 --> 00:12:00,530
So now we're only caring about the composable that we utilize in that component.

206
00:12:00,860 --> 00:12:02,500
So right here, I'm going to import that component.

207
00:12:02,510 --> 00:12:08,420
It's once again called job filters, sidebar organizations.

208
00:12:08,990 --> 00:12:12,380
And that's going to come from the source directory components.

209
00:12:12,440 --> 00:12:13,310
Job Results.

210
00:12:13,310 --> 00:12:13,880
Job Filter.

211
00:12:13,880 --> 00:12:14,450
Sidebar.

212
00:12:14,930 --> 00:12:15,560
Job Filter.

213
00:12:15,560 --> 00:12:17,060
Sidebar Organizations.

214
00:12:18,120 --> 00:12:18,810
Dot view.

215
00:12:19,960 --> 00:12:20,530
There we go.

216
00:12:21,070 --> 00:12:22,780
And right here, I'm going to describe.

217
00:12:22,840 --> 00:12:23,970
Job filters.

218
00:12:23,980 --> 00:12:25,210
Sidebar organizations.

219
00:12:27,170 --> 00:12:31,370
And I can copy over the test I have in my sidebar, Tesla.

220
00:12:31,730 --> 00:12:37,730
So right here, once again, I'm going to comment in this block of code and then I'm going to cut it

221
00:12:37,730 --> 00:12:38,780
and paste it right here.

222
00:12:39,860 --> 00:12:41,510
We're following the exact same protocol.

223
00:12:41,660 --> 00:12:43,910
So I think I can move a little bit quicker through this test file.

224
00:12:44,090 --> 00:12:47,930
Once again, we're not utilizing these composable and thus there mocks.

225
00:12:48,110 --> 00:12:49,460
So we can remove line 11.

226
00:12:49,790 --> 00:12:52,280
We can also remove the marking out of use unique degrees.

227
00:12:53,030 --> 00:12:53,390
All right.

228
00:12:53,570 --> 00:12:54,290
Right here.

229
00:12:54,290 --> 00:12:55,850
We're going to mount not job.

230
00:12:55,850 --> 00:12:58,460
They'll just sidebar the jobs with the sidebar organizations.

231
00:12:59,840 --> 00:13:03,560
And one thing I realize, this is actually a mistake that's been lingering for a while in the course

232
00:13:03,830 --> 00:13:08,810
because I was copying and pasting these tests earlier, we still kept this constant of job types filter,

233
00:13:08,810 --> 00:13:14,540
probably because we based this test off our original test for job types, and that's no longer a fitting

234
00:13:14,540 --> 00:13:14,960
name.

235
00:13:14,990 --> 00:13:17,840
So let's change this right here to organizations filter instead.

236
00:13:18,020 --> 00:13:19,070
Apologies for that.

237
00:13:19,070 --> 00:13:24,590
That was once again a a mistake that comes from what happens when you copy and paste and are not careful.

238
00:13:24,600 --> 00:13:28,850
That's why some developers even advocate to never copy and paste, but to write everything out manually

239
00:13:28,850 --> 00:13:30,410
to make sure you avoid those mistakes.

240
00:13:30,890 --> 00:13:31,160
All right.

241
00:13:31,160 --> 00:13:33,500
With that said, let's follow the exact same protocol.

242
00:13:33,500 --> 00:13:36,980
We no longer need a header prop, so we no longer need this test.

243
00:13:37,700 --> 00:13:42,950
All right, once again, let me open up my component just so we can take a look at it.

244
00:13:42,950 --> 00:13:44,360
Let me open it up on the right.

245
00:13:44,780 --> 00:13:46,940
So let's open up the organizations component.

246
00:13:47,240 --> 00:13:48,110
So here's a reminder.

247
00:13:48,110 --> 00:13:52,460
We're using use unique organizations, so we're providing a mock return value or shallow mounting.

248
00:13:52,580 --> 00:13:59,440
We want once again run into a problem of not being able to find the database attribute on this checkbox

249
00:13:59,450 --> 00:14:00,020
or component.

250
00:14:00,020 --> 00:14:04,190
So I'm going to look for this component manually and that should still work with the fine component

251
00:14:04,190 --> 00:14:04,910
method right here.

252
00:14:05,150 --> 00:14:08,390
But in order to search for component by its name, we can't just provide a string.

253
00:14:08,390 --> 00:14:13,070
We have to provide an object and specify that we're looking for a component by its name and there's

254
00:14:13,070 --> 00:14:13,940
only going to be one of them.

255
00:14:13,940 --> 00:14:18,470
So this is super safe and the components name that we're looking for within our organizations component

256
00:14:18,740 --> 00:14:20,360
is job filters.

257
00:14:20,360 --> 00:14:21,080
Sidebar.

258
00:14:22,260 --> 00:14:23,310
CheckBox group.

259
00:14:25,560 --> 00:14:26,610
That's what we're looking for.

260
00:14:26,880 --> 00:14:27,630
It's right here.

261
00:14:27,660 --> 00:14:28,970
Organizations filter right here.

262
00:14:28,980 --> 00:14:33,750
Organizations filter checking the values of the unique values and mutation props that are flowing in.

263
00:14:33,930 --> 00:14:35,070
And that's correct.

264
00:14:35,070 --> 00:14:38,070
And that's really to repeat what our component cares about.

265
00:14:38,250 --> 00:14:43,020
The responsibility of the organization's component is basically to render a checkbox group and pass

266
00:14:43,020 --> 00:14:47,580
in the correct props so it doesn't care about how checkbox group is going to execute its logic.

267
00:14:47,790 --> 00:14:53,520
All the cares about is gathering up the required pieces, which is the mutation name and the unique

268
00:14:53,520 --> 00:14:54,990
organization's to pass down.

269
00:14:55,170 --> 00:14:56,790
And that's why I'm testing the props here.

270
00:14:56,880 --> 00:15:00,600
I'm simply verifying then passing down the right values for the data.

271
00:15:00,750 --> 00:15:03,900
And I'm going to test the logic for CheckBox Group in it's test.

272
00:15:04,110 --> 00:15:09,000
The only responsibility of this organization's component is to pass down the right data for that component

273
00:15:09,000 --> 00:15:09,750
to do its job.

274
00:15:10,110 --> 00:15:15,000
So I'm basically testing the architecture, the setting up of the logic without worrying about the actual

275
00:15:15,000 --> 00:15:15,960
checkboxes themselves.

276
00:15:16,380 --> 00:15:16,740
All right.

277
00:15:16,740 --> 00:15:19,020
So that completes two of our new test suites.

278
00:15:19,940 --> 00:15:23,720
Finally, step three, we're going to need to do the same thing for our new degrees component.

279
00:15:24,050 --> 00:15:27,440
So right here in that same test directory, I'm going to create a new file.

280
00:15:27,650 --> 00:15:30,500
I'm going to call it job filters, sidebar.

281
00:15:31,340 --> 00:15:33,920
And this is going to be degrees dot test.

282
00:15:34,110 --> 00:15:34,580
That's.

283
00:15:36,220 --> 00:15:36,520
All right.

284
00:15:36,520 --> 00:15:37,340
There we go.

285
00:15:37,360 --> 00:15:41,800
Let me move this to the left, claps my panel and once again, same logic.

286
00:15:41,800 --> 00:15:43,360
Let me copy over shallow amount.

287
00:15:44,420 --> 00:15:49,970
Let me copy over our imports of our composable and their mocks.

288
00:15:50,660 --> 00:15:51,110
There we go.

289
00:15:51,320 --> 00:15:55,630
So for our degrees component, we're using the use unique degrees composable.

290
00:15:55,640 --> 00:16:00,760
So we don't need job types or organizations, which means we don't need these two lines saved up.

291
00:16:01,220 --> 00:16:06,260
And we also, of course, need to import a new component that is going to be our job filters, sidebar

292
00:16:06,590 --> 00:16:13,610
degrees component that is going to come from the source directory components, job results, job filter,

293
00:16:13,610 --> 00:16:17,270
sidebar, job filter, sidebar degrees right here.

294
00:16:17,270 --> 00:16:21,560
And I'm also going to double check that I add the view extension at the end right here.

295
00:16:21,560 --> 00:16:26,600
I'm going to invoke my described function, tell the test utils ingest that I am testing it sidebar

296
00:16:26,600 --> 00:16:33,050
degrees provide my arrow function and of course here I can copy over the final test we have right here

297
00:16:33,650 --> 00:16:35,540
and make as always the necessary adjustments.

298
00:16:35,930 --> 00:16:39,400
So comment that in cut it paste it right here.

299
00:16:40,530 --> 00:16:40,920
All right.

300
00:16:41,070 --> 00:16:43,290
Once again, we no longer need these two masks.

301
00:16:43,320 --> 00:16:45,270
Those are now tested in separate components.

302
00:16:45,270 --> 00:16:47,580
So delete the first two lines right here.

303
00:16:47,580 --> 00:16:49,620
We are no longer mounting the sidebar.

304
00:16:49,620 --> 00:16:51,630
We're mounting the John's other sidebar degrees.

305
00:16:52,080 --> 00:16:54,030
Once again, we have a little bit of a throwback.

306
00:16:54,030 --> 00:16:55,880
This is not really a job types filter.

307
00:16:55,890 --> 00:16:57,540
This is actually a degrees filter.

308
00:16:57,750 --> 00:16:59,610
So let me change that constant name right here.

309
00:17:00,090 --> 00:17:04,620
Again, you know, a warning to all developers about the dangers of copying and pasting.

310
00:17:04,860 --> 00:17:08,670
Once again, what I'm going to do here is look for a component by name instead of a data.

311
00:17:08,670 --> 00:17:09,360
Just attribute.

312
00:17:09,600 --> 00:17:14,580
The component we're looking for is once again going to be job filters, sidebar, checkbox group.

313
00:17:15,930 --> 00:17:19,890
And just to prove that to you, of course I can open up the component that would probably be helpful.

314
00:17:20,280 --> 00:17:23,370
So here is our job filter sidebar degrees component, same deal.

315
00:17:23,370 --> 00:17:29,310
It orchestrates and fetches the required data that it needs to render a specific instance of checkbox

316
00:17:29,310 --> 00:17:29,550
group.

317
00:17:29,670 --> 00:17:33,690
And all we care about is the passing of the right data via props to this component.

318
00:17:34,020 --> 00:17:36,990
So we no longer care about the header prop because that doesn't exist.

319
00:17:36,990 --> 00:17:38,940
We only care about unique values in mutation.

320
00:17:39,300 --> 00:17:42,750
Let me delete my former line that was testing the value of header.

321
00:17:43,320 --> 00:17:49,470
All right, so now we have the exact same test here and everything is passing perfect.

322
00:17:49,650 --> 00:17:52,650
So now we have tests for our three new components.

323
00:17:52,650 --> 00:17:57,870
And also in our sidebar test, this one has become a lot simpler, which of course also allows us to

324
00:17:57,870 --> 00:17:59,280
clean up some logic right here.

325
00:17:59,520 --> 00:18:04,920
So let's go ahead and remove all of our former imports and mocks were no longer using these marks anywhere

326
00:18:05,160 --> 00:18:10,620
because again in our sidebar that composable logic is captured in these components, not at this top

327
00:18:10,620 --> 00:18:11,010
level.

328
00:18:11,100 --> 00:18:15,090
And because we are shallow mounting, we don't need to worry about what these chopped components are

329
00:18:15,090 --> 00:18:16,260
doing inside their bodies.

330
00:18:16,500 --> 00:18:18,360
So right here, I can get rid of that.

331
00:18:19,590 --> 00:18:20,190
Right here.

332
00:18:20,700 --> 00:18:21,150
Perfect.

333
00:18:21,390 --> 00:18:24,360
And then let's see if we actually still need to mark out view.

334
00:18:24,660 --> 00:18:29,430
I think we will need to do that in order to mark out use store right here in order to get this logic

335
00:18:29,430 --> 00:18:29,730
to work.

336
00:18:29,910 --> 00:18:31,500
So I am going to keep the short amount.

337
00:18:31,500 --> 00:18:33,930
I am going to keep out, keep the mark of UCS.

338
00:18:34,140 --> 00:18:39,810
But you can see how this component has also simplified significantly and also the tests for it have

339
00:18:39,990 --> 00:18:40,800
simplified as well.

340
00:18:41,100 --> 00:18:44,040
So once again, have we really built anything different?

341
00:18:44,040 --> 00:18:45,050
Not necessarily.

342
00:18:45,060 --> 00:18:48,960
All we really did was split up the logic and the complexity of the setup method.

343
00:18:49,080 --> 00:18:54,210
It's a much smaller, simpler components, and thus that allows us to write much simpler, smaller tests

344
00:18:54,390 --> 00:18:56,610
that don't need to mock out that many variables.

345
00:18:56,610 --> 00:18:56,820
Right.

346
00:18:57,030 --> 00:19:00,750
If you're writing a test and you're discovering that you're marking out five or six different things,

347
00:19:00,960 --> 00:19:03,270
you have to ask yourself, why are you doing that?

348
00:19:03,270 --> 00:19:09,420
Can those five or six different mocks really be put into smaller units, smaller classes, smaller functions,

349
00:19:09,420 --> 00:19:10,470
smaller components?

350
00:19:10,740 --> 00:19:15,510
And that will allow you to mock out one thing or two things, right in a given test instead of having

351
00:19:15,510 --> 00:19:17,430
to bundle all this logic up top.

352
00:19:17,790 --> 00:19:22,170
So hopefully by playing around with this component and trying to, you know, figure out the right balance

353
00:19:22,170 --> 00:19:23,790
of what do we put in a component file.

354
00:19:24,300 --> 00:19:29,100
Hopefully this exercise of coming full circle of starting with three separate components, then building

355
00:19:29,100 --> 00:19:33,630
a reusable checkbox group and then going back to having three separate components each one rendering

356
00:19:33,630 --> 00:19:34,780
a specific checkbox group.

357
00:19:35,040 --> 00:19:40,380
Hopefully, it's been a fun experience to see how these three factors help us build a cleaner and better

358
00:19:40,380 --> 00:19:40,890
components.

359
00:19:40,890 --> 00:19:41,100
Right.

360
00:19:41,350 --> 00:19:45,510
It's a really tough question to answer, which is what is the right size of a component or what is a

361
00:19:45,510 --> 00:19:46,830
single responsibility component?

362
00:19:46,830 --> 00:19:51,390
That it's not something that you can always capture in a view tutorial which can just teach you about,

363
00:19:51,390 --> 00:19:53,640
you know, the options API or composition API.

364
00:19:53,850 --> 00:19:57,090
These are more higher level architectural design decisions.

365
00:19:57,300 --> 00:20:01,680
And hopefully by reasoning through a lot of this logic, you can see how we've arrived, the components

366
00:20:01,860 --> 00:20:05,000
that I certainly think are better off than what we had.

367
00:20:05,010 --> 00:20:05,280
Right.

368
00:20:05,460 --> 00:20:07,050
This is a lot easier to understand.

369
00:20:07,170 --> 00:20:08,820
This is a lot simpler a setup method.

370
00:20:08,940 --> 00:20:12,860
It's a lot simpler of a test suite to reason about right here, for example, etc..

371
00:20:12,870 --> 00:20:18,000
So the amount of code we're writing and the simplicity with which we can read it is sort of communicating

372
00:20:18,000 --> 00:20:20,550
to me that this is a better design than what we have.

373
00:20:20,880 --> 00:20:21,150
All right.

374
00:20:21,150 --> 00:20:24,090
So hopefully this has been fun and I will see you in the next lesson.
