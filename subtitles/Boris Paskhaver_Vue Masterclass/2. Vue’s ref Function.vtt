WEBVTT
1
00:00:00.960 --> 00:00:01.920
All right.

2
00:00:01.930 --> 00:00:07.530
So in this lesson will introduce the ref function which ships with Vue 3.0.

3
00:00:07.890 --> 00:00:11.580
So I'd like to take a step back here and talk about what our goal is.

4
00:00:11.910 --> 00:00:20.580
Our goal is to emulate the exact kind of behavior that we saw in Google sheets within a JavaScript file.

5
00:00:21.000 --> 00:00:25.200
Now, we're not going to necessarily be able to do it right now with plain JavaScript, but we're going

6
00:00:25.200 --> 00:00:30.990
to be able to import some helper view functions that are going to allow us to have that level of reactivity.

7
00:00:31.650 --> 00:00:37.230
And that's going to demonstrate to us that we can use these view functions outside the confines of a

8
00:00:37.230 --> 00:00:38.550
specific component.

9
00:00:38.820 --> 00:00:44.610
We have seen similar reactivity ideas before throughout the course, such as computed properties that

10
00:00:44.610 --> 00:00:46.430
re-evaluated when data changes.

11
00:00:46.440 --> 00:00:46.710
Right.

12
00:00:46.980 --> 00:00:53.370
But that is an example of a property that is connected to a view configuration object tied to a component.

13
00:00:53.730 --> 00:00:58.560
Previously, there was no way to take that logic, that reactivity, and take it out of the component.

14
00:00:58.680 --> 00:01:00.090
So it can be used independently.

15
00:01:00.330 --> 00:01:07.080
But now, with the available helper functions in Vue 3.0 and the composition API, we can utilize that

16
00:01:07.080 --> 00:01:12.210
reactivity without even needing a component attached, which is why we're going to be able to emulate

17
00:01:12.210 --> 00:01:14.850
these concepts in a plain JavaScript file.

18
00:01:15.270 --> 00:01:17.490
All right, that is our ultimate end goal.

19
00:01:17.700 --> 00:01:19.680
So to give it a more precise definition.

20
00:01:19.980 --> 00:01:26.430
What I want to happen here is whenever the value of A or B changes, I want to I want C to automatically

21
00:01:26.430 --> 00:01:29.220
update without us having to explicitly tell it to.

22
00:01:29.370 --> 00:01:29.670
Right.

23
00:01:29.850 --> 00:01:36.180
I want to connect, create a connection between C and and B so that C reacts to any changes between

24
00:01:36.180 --> 00:01:39.600
A and B and recalculate the sum of those two numbers.

25
00:01:40.080 --> 00:01:40.420
All right.

26
00:01:40.740 --> 00:01:47.640
So with that, let's import a function that is available in Vue 3.0 and it is called Ref RDF.

27
00:01:47.850 --> 00:01:52.410
Now, because we are working with a plain JavaScript file here and depending on the version of Node

28
00:01:52.410 --> 00:01:56.700
you have, we may not necessarily have the import syntax available here.

29
00:01:56.910 --> 00:02:03.840
So we're going to use the more older way to import exports from another file, and that is going to

30
00:02:03.840 --> 00:02:05.280
be the require syntax.

31
00:02:05.520 --> 00:02:10.650
So right here I'm going to say const and I'm going to import a named export called Ref.

32
00:02:11.520 --> 00:02:14.130
And on the right side, I'm going to use the word require.

33
00:02:14.280 --> 00:02:18.480
And here as a string, I'm going to provide the library from which I'm importing this from.

34
00:02:18.720 --> 00:02:20.490
And that is going to be viewed.

35
00:02:20.790 --> 00:02:21.120
All right.

36
00:02:21.270 --> 00:02:26.910
This is actually the syntax behind the scenes that something like this would evaluate to in a view component

37
00:02:26.910 --> 00:02:27.210
file.

38
00:02:27.390 --> 00:02:30.060
But again, we don't have Webpack in the vehicle.

39
00:02:30.060 --> 00:02:31.110
I'm running through this code.

40
00:02:31.290 --> 00:02:35.370
So we do not have the ability to use something like line number three behind the scenes.

41
00:02:35.370 --> 00:02:37.070
This is what it's doing anyway.

42
00:02:37.080 --> 00:02:38.520
So we're going to use this alternate syntax.

43
00:02:38.850 --> 00:02:42.810
So now we have this raft function available within our playground file.

44
00:02:43.050 --> 00:02:49.080
And what I'd like to do is pass in our values of one into two invocations of the ref function.

45
00:02:49.350 --> 00:02:53.580
So right here I'm going to invoke the ref function and it accepts a single value.

46
00:02:53.960 --> 00:02:56.760
Our single argument and I'm going to pass in a value of one.

47
00:02:57.120 --> 00:02:59.730
And right here I'm going to provide a value of two.

48
00:03:00.940 --> 00:03:02.590
All right, so what does this do?

49
00:03:02.620 --> 00:03:05.050
Let me separate the content so we can look at it independently.

50
00:03:05.320 --> 00:03:08.680
What this does is it creates a reactive object.

51
00:03:08.920 --> 00:03:14.110
And when I use the words reactive object, I'm in an object that's able to communicate about its own

52
00:03:14.110 --> 00:03:16.870
changes as well as track other objects.

53
00:03:17.020 --> 00:03:18.490
Reactive changes.

54
00:03:18.580 --> 00:03:18.910
Right.

55
00:03:19.150 --> 00:03:22.030
So right now, it's kind of hard to understand how these concepts come together.

56
00:03:22.270 --> 00:03:28.660
But the simplest way is RAF is going to give us back a plane JavaScript object, and that object knows

57
00:03:28.660 --> 00:03:30.850
how to track changes to its own state.

58
00:03:31.510 --> 00:03:31.840
So.

59
00:03:33.370 --> 00:03:37.720
Just like any JavaScript object, it's going to have properties, it's going to have methods, and it's

60
00:03:37.720 --> 00:03:39.760
going to have ways to interact with that object.

61
00:03:40.150 --> 00:03:46.150
So one thing that's going to be available on the object that the ref function returns to us is going

62
00:03:46.150 --> 00:03:51.820
to be a property called value, and that value is going to be the original value that we passed in.

63
00:03:52.000 --> 00:03:59.120
So for example, for our a variable online, number one, that object is going to have a property called

64
00:03:59.140 --> 00:04:01.240
value that is going to be equal to one.

65
00:04:01.420 --> 00:04:05.560
Of course, it's going to have a whole bunch of other methods and things like that that deal with reactivity.

66
00:04:05.830 --> 00:04:09.880
But it's also going to have fundamentally a property called value, which is going to be one.

67
00:04:10.210 --> 00:04:15.280
An important thing to note here is that this one is the original non-reactive value.

68
00:04:15.280 --> 00:04:17.950
So this is just the literal number one.

69
00:04:18.040 --> 00:04:20.020
Nothing magic or special about it.

70
00:04:20.020 --> 00:04:22.630
No additional functionality, just the number one.

71
00:04:22.960 --> 00:04:27.910
This entire reactive object is going to have that special functionality, but the value property is

72
00:04:27.910 --> 00:04:31.530
going to expose the original non-reactive value that we passed in.

73
00:04:32.020 --> 00:04:40.890
So what I can do right here, let me go ahead and -- delete this code below is console.log a dot

74
00:04:40.900 --> 00:04:43.810
value and console.log be the value.

75
00:04:44.800 --> 00:04:49.750
All right, I'm going to run this file node source playground J.S. And we're going to see one in two,

76
00:04:49.750 --> 00:04:51.070
which is exactly what we expect.

77
00:04:51.070 --> 00:04:52.660
Those are the values we passed in, right?

78
00:04:52.930 --> 00:04:57.910
So we basically passed in data and then we verify that we can access that data within that reactive

79
00:04:57.910 --> 00:04:58.240
object.

80
00:04:58.240 --> 00:04:58.510
Right?

81
00:04:58.840 --> 00:05:00.880
So kind of simple, kind of stupid.

82
00:05:00.880 --> 00:05:04.810
But you know, these are still ideas that we have to remember and memorize about view.

83
00:05:05.290 --> 00:05:05.620
Okay.

84
00:05:05.830 --> 00:05:12.400
So now going back to our original goal of trying to have a variable called C that was keeping track

85
00:05:12.430 --> 00:05:18.880
of the changes to N.B., you might think since we have a reactive object represented in A and B, that

86
00:05:18.880 --> 00:05:19.990
we can do something like this.

87
00:05:19.990 --> 00:05:25.600
I could say, Well, a dot value will give me that original value, plus B that value will give me whatever

88
00:05:25.600 --> 00:05:29.590
be a storing is c going to update whenever A or B changes.

89
00:05:29.890 --> 00:05:32.500
Now, the answer here is actually going to be no.

90
00:05:32.500 --> 00:05:34.660
So let me console.log the value of C right now.

91
00:05:36.630 --> 00:05:40.890
And later on the file, we're going to see that sea is indeed going to store the value of three, which

92
00:05:40.890 --> 00:05:43.440
makes sense because a value is going to give us one.

93
00:05:43.890 --> 00:05:45.720
B, that value is going to give us two.

94
00:05:46.020 --> 00:05:50.730
But nothing has changed compared to the code that we ran in the previous lesson, because we are not

95
00:05:50.730 --> 00:05:56.160
using the reactive object, we are referencing its value property and getting the original non-reactive

96
00:05:56.160 --> 00:05:56.970
number values.

97
00:05:57.210 --> 00:06:02.460
So this is just a value adding to one plus one, which is equal to three, which is what C is storing.

98
00:06:02.460 --> 00:06:03.600
C is during the plane.

99
00:06:03.600 --> 00:06:07.140
Number three, it still has no fundamental connection to A and B.

100
00:06:07.500 --> 00:06:07.920
All right.

101
00:06:08.250 --> 00:06:14.490
So, for example, if I want to change the value of A or rather the value that is being stored inside

102
00:06:14.490 --> 00:06:19.290
that reactive object, we know that that value is available on the value property.

103
00:06:19.560 --> 00:06:24.690
So I can similarly overwrite it just like any other object property in JavaScript, I can reference

104
00:06:24.690 --> 00:06:31.080
a that value and set it to something different like ten and if I console.log, see after the fact we're

105
00:06:31.080 --> 00:06:34.410
going to see that C is still equal to three.

106
00:06:34.710 --> 00:06:36.780
Forgive my poetry, right?

107
00:06:36.780 --> 00:06:41.430
We're still going to have the idea of three because we actually have not established a link between

108
00:06:41.460 --> 00:06:49.290
C and the A and B objects, the reactive objects themselves that are internally storing these primitive

109
00:06:49.290 --> 00:06:49.740
values.

110
00:06:49.950 --> 00:06:52.260
And if this is super confusing, I apologize.

111
00:06:52.260 --> 00:06:56.220
But it's one of those things that's going to click in due time as we play around with it.

112
00:06:56.220 --> 00:07:02.490
Moore The key takeaway right now is that RAF returns a JavaScript object that is able to deal with reactivity,

113
00:07:02.490 --> 00:07:06.540
and it hides the value that we passed in under its value property.

114
00:07:06.660 --> 00:07:08.970
And that value property gives us the original value.

115
00:07:09.000 --> 00:07:13.890
NON-REACTIVE So if we simply access it and reuse it elsewhere, that doesn't mean that we're going to

116
00:07:13.890 --> 00:07:18.240
add reactivity to see that is our key takeaway from this lesson.

117
00:07:18.570 --> 00:07:24.060
So similarly, this might be another idea that we get if we're feeling creative, we might say, Well,

118
00:07:24.060 --> 00:07:30.660
can I make a ref function call by passing in the values of A value and B the value.

119
00:07:30.930 --> 00:07:36.240
So again, we're trying to communicate somehow with some syntax to view that we want to keep track of

120
00:07:36.240 --> 00:07:38.280
A's value and B's value, right?

121
00:07:38.460 --> 00:07:41.480
And whenever change is, please update C, right?

122
00:07:41.490 --> 00:07:42.960
And we're still learning the right syntax.

123
00:07:43.200 --> 00:07:47.790
But I want to talk about why some of these syntactic options are not going to work, because it requires

124
00:07:47.790 --> 00:07:50.820
us to think more critically about what JavaScript is doing behind the scenes.

125
00:07:51.240 --> 00:07:56.820
So what's going to happen in this scenario is we're going to evaluate this two one, we're going to

126
00:07:56.820 --> 00:07:57.810
do this to two.

127
00:07:57.990 --> 00:08:02.250
So this is going to be equivalent to calling RAF with a plane number of three.

128
00:08:02.940 --> 00:08:08.670
So that is again going to return a reactive object so we can no longer log out C by itself because C

129
00:08:08.670 --> 00:08:12.210
by itself is actually going to be that reactive object here.

130
00:08:12.210 --> 00:08:17.160
You can see right here is that reactive object that the view function raff has set up for us.

131
00:08:17.430 --> 00:08:22.380
And on that object we are going to have our value property, which is going to give us the original

132
00:08:22.380 --> 00:08:26.220
value that we passed into RAF, which is going to be three, right.

133
00:08:26.220 --> 00:08:27.750
The sum of these two values.

134
00:08:27.990 --> 00:08:34.020
So similarly, if I go to my object and change its value property to let's say ten and console.log,

135
00:08:34.020 --> 00:08:39.870
see that value once again, see that value is going to remain unchanged.

136
00:08:40.230 --> 00:08:40.590
Okay.

137
00:08:40.950 --> 00:08:46.860
So we have not made much progress here, but we are we are making small steps towards the solution,

138
00:08:47.010 --> 00:08:49.200
which we will take a look at in the very next lesson.
