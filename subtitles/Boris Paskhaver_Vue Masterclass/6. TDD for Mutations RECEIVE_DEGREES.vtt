WEBVTT
1
00:00:00.090 --> 00:00:01.020
All right.

2
00:00:01.020 --> 00:00:04.890
So we've now defined a slice of U.S. estate to store all degrees.

3
00:00:05.100 --> 00:00:10.980
And of course, it's going to start out as an empty array that will then be populated by the array we

4
00:00:10.980 --> 00:00:12.840
receive from our degrees end point.

5
00:00:13.170 --> 00:00:18.630
But of course, in order to update the View Store State, we're going to need to write a mutation.

6
00:00:18.930 --> 00:00:24.120
So here in our mutations test file in our source store directory, we're going to need a mutation to

7
00:00:24.120 --> 00:00:27.450
receive our degrees and overwrite that existing degrees property.

8
00:00:27.750 --> 00:00:30.180
As always, I want to follow a TDD approach.

9
00:00:30.360 --> 00:00:31.830
So let's first write a test.

10
00:00:32.130 --> 00:00:35.450
So I'm going to open up my mutations test.

11
00:00:35.490 --> 00:00:36.300
That's file.

12
00:00:37.530 --> 00:00:43.050
And here you can see we have tests for all of our mutations, log in, user, receive jobs, etc. And

13
00:00:43.050 --> 00:00:46.530
I imagine that our new mutation is going to be very similar to this one.

14
00:00:46.650 --> 00:00:51.330
This is our test for the mutation that receives an array of jobs, which is similarly something we're

15
00:00:51.330 --> 00:00:53.550
getting from reaching out to our mock back end.

16
00:00:53.760 --> 00:00:58.560
So why don't we create a new test that's going to be very similar to this one, except of course, it's

17
00:00:58.560 --> 00:01:01.230
going to receive an array of degree objects.

18
00:01:01.500 --> 00:01:06.030
So right here I'm going to describe a new mutation that I want to have called receive degrees.

19
00:01:07.690 --> 00:01:09.250
And I'm going to find an area function.

20
00:01:09.610 --> 00:01:15.640
And instead of receiving jobs from an API response, it of course is going to receive degrees from the

21
00:01:15.640 --> 00:01:16.390
API response.

22
00:01:17.400 --> 00:01:19.020
Keep in mind, this is the mutation.

23
00:01:19.020 --> 00:01:22.080
This is not the action where we're actually making the API call.

24
00:01:22.230 --> 00:01:24.330
This is what the action will eventually run.

25
00:01:24.480 --> 00:01:28.200
The mutation, rather, or commit is the technical view terminology.

26
00:01:28.440 --> 00:01:34.410
This is the mutation that the action will eventually commit in order to take the data that it receives

27
00:01:34.410 --> 00:01:38.790
from the backend and actually provide it to this mutation to update The View Star State.

28
00:01:39.060 --> 00:01:43.200
So in other words, this is the part where we already have the data and it's simply going to flow into

29
00:01:43.200 --> 00:01:44.340
this mutation method.

30
00:01:44.880 --> 00:01:45.120
All right.

31
00:01:45.120 --> 00:01:47.250
So I'm going to start out with a starting state.

32
00:01:48.820 --> 00:01:49.420
Right here.

33
00:01:49.840 --> 00:01:52.930
And I'm going to use the helper function called create state.

34
00:01:53.740 --> 00:01:56.720
And why don't I open that up and show it to you on the left hand side here?

35
00:01:56.750 --> 00:01:57.580
So let me drag that.

36
00:01:57.880 --> 00:02:00.400
That's coming from our utils file in our test directory.

37
00:02:00.610 --> 00:02:05.470
And remember that what create state does is it simply invokes the existing state function that initializes

38
00:02:05.470 --> 00:02:06.730
the state of our view store.

39
00:02:06.970 --> 00:02:09.400
So that's going to automatically have a degree's property.

40
00:02:09.610 --> 00:02:13.690
But then we can also provide the config object right here to customize any specific properties.

41
00:02:14.020 --> 00:02:19.180
So even though this is already going to have a degrees property set to an empty array, I'm going to

42
00:02:19.210 --> 00:02:24.580
explicitly specified here as well as having a degrees property set to an empty array because I better

43
00:02:24.580 --> 00:02:26.770
want to communicate what is going on in this test.

44
00:02:26.980 --> 00:02:31.480
I want to communicate that my state is starting out with degrees empty or being an empty array, and

45
00:02:31.480 --> 00:02:32.800
then the array will be populated.

46
00:02:33.010 --> 00:02:36.730
So a reader has a better understanding of my starting state and my ending state.

47
00:02:36.790 --> 00:02:37.120
All right.

48
00:02:37.270 --> 00:02:41.410
So this doesn't change the tactical result of this thing right here, but it makes it more explicit

49
00:02:41.410 --> 00:02:42.550
what is going on in our test.

50
00:02:42.990 --> 00:02:43.240
Right.

51
00:02:43.390 --> 00:02:47.440
So the next thing I obviously need to do is to create a degree object and invoke my eventual mutation

52
00:02:47.440 --> 00:02:52.270
and pass in an array of that degree to make sure that the degrees property is set to that array.

53
00:02:52.630 --> 00:02:57.010
So you'll notice that we have this create job helper function also defined on the file on the left.

54
00:02:57.340 --> 00:03:02.020
And while I can define a degree object in line here, I think it'd be really smart right now to just

55
00:03:02.020 --> 00:03:04.960
define a helper function as well to create a degree.

56
00:03:05.200 --> 00:03:09.790
Because I can definitely see multiple tests having to rely on the need for a degree object.

57
00:03:09.970 --> 00:03:14.980
So why not have this helper function that is then reusable across many parts of the app if needed?

58
00:03:15.370 --> 00:03:19.630
So what I'm going to do here is follow a very similar approach to my create job helper function below.

59
00:03:19.930 --> 00:03:22.270
I'm going to define a concept called create degree.

60
00:03:23.490 --> 00:03:25.230
And it's going to accept a config.

61
00:03:26.120 --> 00:03:28.220
And I can think, of course, will be an empty object.

62
00:03:28.550 --> 00:03:32.930
And of course, what I want this to return is ultimately going to be an object of type degree.

63
00:03:33.080 --> 00:03:35.270
So let's import our degree interface.

64
00:03:35.510 --> 00:03:39.950
Luckily, we're already importing the job interface from the types file, and that's exactly where we

65
00:03:39.950 --> 00:03:41.480
have our degree interface as well.

66
00:03:41.930 --> 00:03:48.590
So right here I'm going to have my degree interface and remember that my config is going to be a object

67
00:03:48.590 --> 00:03:50.100
of type partial degree.

68
00:03:50.120 --> 00:03:55.220
The reason I'm going to do that is remember the Typekit partial type takes an interface and it makes

69
00:03:55.220 --> 00:03:56.630
all of its properties optional.

70
00:03:56.840 --> 00:04:02.360
I don't want to force a test to give me all the times a valid degree, because then a test may require

71
00:04:02.930 --> 00:04:04.760
that that implementation would require a test.

72
00:04:04.790 --> 00:04:07.310
Have many properties that perhaps I don't care about.

73
00:04:07.460 --> 00:04:11.690
I want the test to be as flexible as possible and only have to feed in the properties that it wants

74
00:04:11.690 --> 00:04:13.220
to care about or communicate about.

75
00:04:13.550 --> 00:04:15.380
So I'm not going to make this a degree.

76
00:04:15.380 --> 00:04:19.730
I'm going to make this a partial degree, which again is going to take our degree interface, which

77
00:04:19.730 --> 00:04:22.700
has two properties and make both of them optional.

78
00:04:23.450 --> 00:04:28.130
Then what I'm going to do is promise TypeScript that the create degree function itself is going to return

79
00:04:28.130 --> 00:04:29.510
an object of type degree.

80
00:04:29.740 --> 00:04:29.980
All right.

81
00:04:29.990 --> 00:04:31.310
That's going to be the return date type.

82
00:04:31.640 --> 00:04:33.900
Then finally, I'm going to actually provide my arrow function.

83
00:04:34.130 --> 00:04:38.540
And in order to make an implicit return value here, I'm going to do my parentheses and my curly braces.

84
00:04:38.750 --> 00:04:42.020
So I'm going to return an object from my create degree function.

85
00:04:42.200 --> 00:04:46.010
And of course, TypeScript is unhappy because it says, Hey, you promised me a degree.

86
00:04:46.130 --> 00:04:50.000
And that empty object you're giving me now needs these two properties, ID and degree.

87
00:04:50.360 --> 00:04:51.890
So let's have an ID property.

88
00:04:51.890 --> 00:04:52.760
That should be a number.

89
00:04:52.760 --> 00:04:54.170
So let's give it a value like one.

90
00:04:54.410 --> 00:04:58.280
And we also need a degree property and let's give that a value like bachelors.

91
00:04:59.450 --> 00:05:04.130
And finally, of course, we need to allow a test to override either of these two properties if it wants

92
00:05:04.130 --> 00:05:04.400
to.

93
00:05:04.550 --> 00:05:10.340
So if the test passes those properties into me or into the create degree function in a config object,

94
00:05:10.340 --> 00:05:15.440
I wanted to structure those config object properties right here so they overwrite idea degree.

95
00:05:15.710 --> 00:05:20.240
If a test doesn't give me a config object or if it gives me an empty config object, we're simply going

96
00:05:20.240 --> 00:05:21.110
to return the default.

97
00:05:21.260 --> 00:05:23.570
But we allow each test to customize what it cares about.

98
00:05:23.990 --> 00:05:24.260
All right.

99
00:05:24.260 --> 00:05:28.760
So with that, we are able to import this create degree helper function in our mutations test file.

100
00:05:29.030 --> 00:05:36.290
So right here I will add create degree and right here I can create a sample degree by using my helper

101
00:05:36.410 --> 00:05:38.450
create degree function.

102
00:05:39.050 --> 00:05:39.320
All right.

103
00:05:39.320 --> 00:05:39.950
So there we go.

104
00:05:40.130 --> 00:05:42.740
And of course, the next step is to run an actual mutation.

105
00:05:42.750 --> 00:05:46.310
So I'm going to say on my mutations object, which is already imported.

106
00:05:46.910 --> 00:05:48.050
Here's what it looks like right now.

107
00:05:48.140 --> 00:05:52.820
I'm going to assume that I'm going to have a new function and that new function or method should be

108
00:05:52.820 --> 00:05:54.110
called that received degrees.

109
00:05:55.590 --> 00:06:00.110
And of course, whenever we have a mutation, the first argument will always be the existing view X

110
00:06:00.180 --> 00:06:05.430
Store State, and that is represented by our starting state constant right here.

111
00:06:05.670 --> 00:06:11.130
And then of course the second parameter is or any subsequent parameters are any custom arguments that

112
00:06:11.130 --> 00:06:12.030
we want to pass in.

113
00:06:12.270 --> 00:06:14.550
So the first parameter is always the view store state.

114
00:06:14.550 --> 00:06:15.870
Afterwards, it's up to us.

115
00:06:16.140 --> 00:06:21.690
So I obviously want to invoke this mutation with an argument of the actual degrees that we're receiving.

116
00:06:21.870 --> 00:06:26.540
So what I'm going to do here is make an array just consisting of my single degree, because remember

117
00:06:26.550 --> 00:06:31.110
from the API perspective, it's going to be an array of degrees in maybe one degree or three or five

118
00:06:31.110 --> 00:06:32.850
or ten, but it's always going to be an array.

119
00:06:33.030 --> 00:06:36.810
So even though I'm creating one degree here, I'm going to store it in an array because that's what

120
00:06:36.810 --> 00:06:38.220
I expect the mutation to receive.

121
00:06:38.640 --> 00:06:43.740
I finally, after my mutation has done running, I will expect that on my starting state object.

122
00:06:44.610 --> 00:06:50.100
There is of course that degrees property and it should be updated to equal the array of degrees that

123
00:06:50.100 --> 00:06:51.390
I provided to the mutation.

124
00:06:51.600 --> 00:06:55.530
So this should be the exact same array of a single degree if everything worked out correctly.

125
00:06:56.010 --> 00:06:56.220
All right.

126
00:06:56.220 --> 00:07:00.540
So now, of course, our test will fail because it's going to say, hey, I don't have a received degrees

127
00:07:01.440 --> 00:07:03.930
method on my mutations object right here.

128
00:07:04.050 --> 00:07:05.910
And this is actually a TypeScript violation.

129
00:07:05.910 --> 00:07:07.050
It's not even just violation.

130
00:07:07.230 --> 00:07:11.280
TypeScript says, Hey, you gave me this mutations object, which I know you imported from right here.

131
00:07:11.460 --> 00:07:15.180
That object doesn't have that received degrees property, so something is going wrong.

132
00:07:15.420 --> 00:07:17.040
So of course let's make that a reality.

133
00:07:17.040 --> 00:07:21.450
So the first thing I'm going to do is we need to create a new constant to store the name of the mutation.

134
00:07:21.720 --> 00:07:26.850
So I'm going to go into my constants file and right here let's create a new section down below.

135
00:07:26.850 --> 00:07:28.110
I'm going to call it degrees.

136
00:07:29.120 --> 00:07:32.120
And we'll create a new constant for our mutation names to export.

137
00:07:32.120 --> 00:07:36.950
Konst will call it receive degrees and it'll be equal to a string of received degrees.

138
00:07:37.790 --> 00:07:38.300
There we go.

139
00:07:38.540 --> 00:07:39.230
Save that.

140
00:07:39.440 --> 00:07:44.510
Move back to our mutations file and here I'm going to import my receive degrees constant.

141
00:07:44.540 --> 00:07:45.020
There it is.

142
00:07:45.260 --> 00:07:49.610
And that allows me to, of course, define a method with that name using the constant as the dynamic

143
00:07:49.610 --> 00:07:50.180
method name.

144
00:07:50.540 --> 00:07:55.580
So right here, just to keep it close to our receive jobs mutation as well, I'm going to provide my

145
00:07:55.580 --> 00:07:57.500
mutation name in square brackets.

146
00:07:57.740 --> 00:08:02.450
So of course, TypeScript is going to substitute that constant value, that string as the name.

147
00:08:02.780 --> 00:08:04.490
Then I'm going to define my actual method.

148
00:08:05.500 --> 00:08:08.770
And of course, my method will accept two parameters, just like right here.

149
00:08:08.950 --> 00:08:14.050
The first is going to be the store state, and of course that is going to be a type global state which

150
00:08:14.050 --> 00:08:15.070
we already have imported.

151
00:08:15.790 --> 00:08:18.680
And then my second parameter is going to be that array of degrees.

152
00:08:18.730 --> 00:08:20.380
So we can call that parameter degrees.

153
00:08:20.800 --> 00:08:21.640
And what is that going to be?

154
00:08:21.640 --> 00:08:24.520
A type of it's going to be an array of degree objects.

155
00:08:24.730 --> 00:08:27.340
Well, that means we need to import our degree interface.

156
00:08:27.400 --> 00:08:31.840
But luckily, we have our types file right here in line ten, and that is the file that also happens

157
00:08:31.840 --> 00:08:33.310
to have our degree interface.

158
00:08:33.580 --> 00:08:37.540
And it's singular because it's remember, it's an interface representing one degree object.

159
00:08:37.780 --> 00:08:42.550
And my degrees parameter right here will be of type array of those degrees.

160
00:08:42.790 --> 00:08:44.860
So right here, I'm going to say degree array.

161
00:08:45.190 --> 00:08:45.580
All right.

162
00:08:45.820 --> 00:08:50.470
And then in the body of this, let me just say this to show you that our test to now update, we should

163
00:08:50.470 --> 00:08:54.670
get a new error that says, hey, the state is not actually what it should be at the end of the mutation

164
00:08:54.670 --> 00:08:56.260
because we obviously didn't overwrite the property.

165
00:08:56.590 --> 00:09:00.580
So now you can see it's going to say, hey, you told me that it should be an array of that one degree.

166
00:09:00.730 --> 00:09:04.390
Instead, I'm still getting an empty array, which makes sense because we're not doing anything in the

167
00:09:04.390 --> 00:09:05.560
received degrees mutation.

168
00:09:05.560 --> 00:09:09.940
So our original starting state of an empty array for the degrees property stays the same.

169
00:09:10.150 --> 00:09:13.300
So of course we're using TDD here to drive to our eventual solution.

170
00:09:13.480 --> 00:09:18.220
And that means we have to take our state, we have to overwrite its degrees properties with the degrees

171
00:09:18.220 --> 00:09:19.300
array that is flying in.

172
00:09:19.600 --> 00:09:23.620
Of course, that will eventually be provided by my action, but right now it's being provided by my

173
00:09:23.620 --> 00:09:23.980
test.

174
00:09:24.310 --> 00:09:25.300
So I'm going to save that.

175
00:09:26.200 --> 00:09:26.920
Let it run.

176
00:09:27.490 --> 00:09:29.680
Let all my tests execute.

177
00:09:30.620 --> 00:09:32.630
And with that, I think we should be in a good spot.

178
00:09:32.660 --> 00:09:33.140
There we go.

179
00:09:33.410 --> 00:09:33.650
All right.

180
00:09:33.650 --> 00:09:35.840
So now we've added our received degrees mutation.

181
00:09:35.840 --> 00:09:36.770
It's well tested.

182
00:09:36.770 --> 00:09:42.200
We also created our helper create degree function that we can utilize if we do any other work with degrees

183
00:09:42.200 --> 00:09:42.770
in other tests.

184
00:09:43.040 --> 00:09:46.340
And so I'd say we've made a lot of progress in this lesson.

185
00:09:46.640 --> 00:09:46.880
All right.

186
00:09:46.880 --> 00:09:47.990
That's all there is to cover here.

187
00:09:47.990 --> 00:09:49.490
So I will see you in the next one.
