WEBVTT
1
00:00:00.810 --> 00:00:01.650
Okay.

2
00:00:01.650 --> 00:00:07.770
So in this lesson, I want us to practice a little bit more with using the raft function inside our

3
00:00:07.770 --> 00:00:09.210
components set up method.

4
00:00:09.570 --> 00:00:15.900
So you may recall from our original accordion implementation using the options API that we used, this

5
00:00:15.900 --> 00:00:20.610
is open property right here to conditionally display the slot content.

6
00:00:20.880 --> 00:00:24.300
So whenever this is open property is set to true.

7
00:00:24.570 --> 00:00:30.900
This part is revealed and it shows the actual content that the parent provides in the slot.

8
00:00:31.080 --> 00:00:37.170
So in other words, this is what we show whenever the component is in its expanded state and then when

9
00:00:37.170 --> 00:00:42.720
is open is set to false because of the V if directive we don't render this at all and that's what we

10
00:00:42.720 --> 00:00:46.170
see when the component is in its closed or collapsed state.

11
00:00:46.560 --> 00:00:52.290
So as a quick reminder, the way we implemented this is we had and is open property in our data and

12
00:00:52.290 --> 00:00:56.340
then we had our open method and that was the one that flipped or inverted.

13
00:00:56.340 --> 00:00:59.010
The value of whatever is open was currently.

14
00:00:59.280 --> 00:01:04.770
And so the idea here is that we can go from collapsed to expanded back to collapsed then to expand it

15
00:01:04.770 --> 00:01:05.580
with every click.

16
00:01:05.970 --> 00:01:11.220
So we take the boolean value and is open, we flip it around and then we save it and that's how we end

17
00:01:11.220 --> 00:01:12.270
up with the next value.

18
00:01:12.270 --> 00:01:17.250
And that process continues because we always keep flip flipping from false to true and to false and

19
00:01:17.250 --> 00:01:22.680
true again, etc. So I want to implement this exact same functionality, but now using a rest.

20
00:01:22.920 --> 00:01:24.180
So here's how we're going to do that.

21
00:01:25.480 --> 00:01:29.500
We're expecting and is open property right here for our VFR directive.

22
00:01:29.710 --> 00:01:35.710
So I need to make sure that in the object I return from, my setup method I need to have is open in

23
00:01:35.710 --> 00:01:35.950
there.

24
00:01:36.280 --> 00:01:38.140
So let's define is open right here.

25
00:01:40.340 --> 00:01:44.960
And what I'm going to do is provide false inside my invocation of RAF.

26
00:01:45.200 --> 00:01:49.340
The reason I'm using RAF is because I expect this value to change over time.

27
00:01:49.580 --> 00:01:55.280
And furthermore, I want to capture that reactivity because that reactivity is going to be presented

28
00:01:55.280 --> 00:01:56.660
somewhere in my template.

29
00:01:56.840 --> 00:02:01.700
It's going to, in this case, not be something we interpolate like header, but something we use in

30
00:02:01.700 --> 00:02:07.790
VRF, which means it has to be open and receptive to change and also has to be able to tell the template

31
00:02:07.790 --> 00:02:08.900
that something has changed.

32
00:02:09.140 --> 00:02:10.970
So we need the concept of reactivity.

33
00:02:11.300 --> 00:02:16.250
Basically, whenever we're going to be using any data that is going to change in our component, instead

34
00:02:16.250 --> 00:02:21.440
of using the data property like an options API, we're going to be using RAF in the new composition

35
00:02:21.440 --> 00:02:21.890
API.

36
00:02:22.280 --> 00:02:25.520
So I'm going to declare is open with a starter value false.

37
00:02:25.700 --> 00:02:31.790
And before I forget, let's immediately include it as one of our properties inside the object that we

38
00:02:31.790 --> 00:02:32.240
return.

39
00:02:32.240 --> 00:02:38.210
So now we have had our open and is open available to be used in our template but in our actual open

40
00:02:38.210 --> 00:02:39.080
function right here.

41
00:02:39.230 --> 00:02:41.420
Previously we were modifying the value of header.

42
00:02:41.420 --> 00:02:42.920
That was just for the sake of example.

43
00:02:43.070 --> 00:02:49.190
Here is where we want to actually do the logic to flip the current value of the is open property.

44
00:02:49.490 --> 00:02:53.180
So remember is open is now a reactive object with the value property.

45
00:02:53.330 --> 00:02:58.880
So if I want to overwrite it when this function runs, in other words, when the user clicks on this

46
00:02:58.880 --> 00:03:05.660
div right here, I want to take my reactive object, I want to access its value property and then I

47
00:03:05.660 --> 00:03:08.240
want to invert the current property that I have.

48
00:03:08.450 --> 00:03:13.370
So how do I get the current property I take my is open object, my reactive object.

49
00:03:13.550 --> 00:03:18.980
I use the value property to get the current boolean and then I can flip it around with an exclamation

50
00:03:18.980 --> 00:03:19.280
point.

51
00:03:19.700 --> 00:03:22.610
So take whatever the value is and then give me the opposite.

52
00:03:22.610 --> 00:03:24.470
If it's true, give me false.

53
00:03:24.650 --> 00:03:30.290
If it's false, give me true and then save that value to my is open reactive object.

54
00:03:30.530 --> 00:03:34.760
Make sure to export it and that is going to do everything as we want it to do.

55
00:03:35.450 --> 00:03:41.450
So now we're going to provide is open once again is open now is actually going to be a reactive object.

56
00:03:41.630 --> 00:03:47.090
However, Vue knows that what we really want is the Boolean inside that object, which is the value

57
00:03:47.090 --> 00:03:48.440
of either false or true.

58
00:03:48.560 --> 00:03:52.580
So Vue is going to substitute true or false here, not just a reactive object.

59
00:03:52.790 --> 00:03:56.300
So just like with the interpolation, it's going to take care of that logic behind the scenes.

60
00:03:56.600 --> 00:03:59.360
So with that, let's take us to the browser.

61
00:04:00.710 --> 00:04:02.600
And we're going to see that when I click this.

62
00:04:02.990 --> 00:04:03.530
There we go.

63
00:04:03.560 --> 00:04:06.870
We are expanding each one of these and we can see they are expanding.

64
00:04:06.890 --> 00:04:09.470
When I click again, we're going to collapse it again.

65
00:04:10.100 --> 00:04:14.570
So now we have our original expanding and collapsing functionality.

66
00:04:14.810 --> 00:04:20.840
When we click on it, we run the open method, we invert the is open ref to be the alternative value

67
00:04:20.840 --> 00:04:23.030
which modifies the VRF to render this.

68
00:04:23.240 --> 00:04:29.990
When we click this again, we once again, once again trigger the click handler to rerun the open function,

69
00:04:29.990 --> 00:04:30.740
the open method.

70
00:04:31.130 --> 00:04:38.900
And what happens then is it once again inverts the value of the is open ref value, thus changing the

71
00:04:38.900 --> 00:04:42.500
VRF and thus removing the formerly rendered content.

72
00:04:42.800 --> 00:04:45.290
The same logic applies to any accordion we have here.

73
00:04:46.190 --> 00:04:50.990
All right, so now we've captured three of the original properties in our template.

74
00:04:50.990 --> 00:04:53.660
In the next lesson, we'll finally take care of the fourth.
