1
00:00:01,020 --> 00:00:01,590
Okay.

2
00:00:01,590 --> 00:00:08,220
So in the previous lesson, we used the V model directive to connect our checkbox input to a local piece

3
00:00:08,220 --> 00:00:11,490
of component data called selected organizations.

4
00:00:11,790 --> 00:00:17,580
And if we go back long enough, way back in the course when we introduced the idea v model, remember,

5
00:00:17,580 --> 00:00:23,220
what V model is doing for us is it's abstracting away a little bit of the complexity of working with

6
00:00:23,220 --> 00:00:23,730
an input.

7
00:00:23,970 --> 00:00:30,480
We can manually set up the logic of a V model using a couple other syntax options in view, but the

8
00:00:30,480 --> 00:00:31,980
model makes it super simple.

9
00:00:32,220 --> 00:00:38,130
It abstracts away the complexity of reacting to the browser's change event, and as a reminder, the

10
00:00:38,130 --> 00:00:42,510
browser emits a change event whenever the user interacts with an input component.

11
00:00:42,780 --> 00:00:45,540
So the model is basically just a layer above that.

12
00:00:45,540 --> 00:00:50,790
It's an abstraction that hides away the complexity of capturing the browsers event and then saving it

13
00:00:50,790 --> 00:00:55,080
to a local piece of data and then also making that direction a bi directional meaning.

14
00:00:55,080 --> 00:00:56,970
Data Effects Template Template Effects Data.

15
00:00:57,300 --> 00:01:02,970
However, just because we have a V model directive A doesn't prevent us from actually adding our own

16
00:01:03,150 --> 00:01:09,630
event handler manually reacting to a change event and doing some additional logic whenever the user

17
00:01:09,630 --> 00:01:10,650
interacts with an input.

18
00:01:10,950 --> 00:01:15,900
And that's exactly what we need to do in this scenario because unfortunately, as as great as the model

19
00:01:15,900 --> 00:01:19,110
is, it's still connected to local data in our component.

20
00:01:19,290 --> 00:01:24,330
And we're going to need to find a way to get this data to view X because view X is the place where we

21
00:01:24,330 --> 00:01:29,970
actually have our 100 jobs, and that is the collection of jobs that we're going to need to filter based

22
00:01:29,970 --> 00:01:32,190
on the organizations that the user has selected.

23
00:01:32,190 --> 00:01:32,490
Right.

24
00:01:32,730 --> 00:01:36,870
Right now, this data is kind of scoped or bound or limited to this component.

25
00:01:37,110 --> 00:01:39,840
So in here, it has no way of interacting with view X.

26
00:01:40,200 --> 00:01:45,330
So we're going to need to communicate with View X and we're going to need to do that in a method and

27
00:01:45,330 --> 00:01:48,780
we're going to need to update view X, obviously, whenever the user makes a change.

28
00:01:48,960 --> 00:01:53,580
So if the user updates a checkbox, we need to tell that to the U.S. If the user selects another checkbox,

29
00:01:53,700 --> 00:01:55,650
we need to react again, right?

30
00:01:55,650 --> 00:02:01,080
As many times as the user interacts with a checkbox, we need to talk to the U.S., so we need to add

31
00:02:01,080 --> 00:02:03,300
a event handler to our input component.

32
00:02:03,990 --> 00:02:10,470
As a reminder, the way this works in view is we use a special directive called V on we provide a colon

33
00:02:10,470 --> 00:02:12,990
and then the event that we want to react to.

34
00:02:13,290 --> 00:02:15,780
In this case, I want to react to a change event.

35
00:02:15,990 --> 00:02:20,700
And again, a change event is an event that occurs whenever the user interacts with an input in, in

36
00:02:20,700 --> 00:02:21,150
any way.

37
00:02:21,390 --> 00:02:26,190
So in regards to a checkbox, it means checking it, I'm checking it, etc. The way the syntax works

38
00:02:26,190 --> 00:02:31,500
is we provide an equal sign and in double quotes we provide the name of a method for view to execute

39
00:02:31,530 --> 00:02:32,850
whenever this event occurs.

40
00:02:33,210 --> 00:02:36,990
So what I'm going to do here is define a method called select organization.

41
00:02:38,070 --> 00:02:40,050
And of course this method does not yet exist.

42
00:02:40,050 --> 00:02:43,440
But we're going to write it out in just a few moments in the methods object below.

43
00:02:43,710 --> 00:02:49,140
But for now we're going to say, have you whenever a change event occurs on that change event, please

44
00:02:49,140 --> 00:02:50,940
run this select organization method.

45
00:02:51,360 --> 00:02:55,890
The reason we're getting an excellent violation here is because there is a shorthand syntax to do this

46
00:02:55,890 --> 00:03:00,870
in view and that is replacing the VON Directive and the colon with an ADD sign.

47
00:03:01,110 --> 00:03:03,600
It's still actually the vision directive behind the scenes.

48
00:03:03,600 --> 00:03:05,730
There is no technical difference between the two.

49
00:03:05,730 --> 00:03:07,950
Syntax is this one is just a little bit shorter.

50
00:03:08,100 --> 00:03:10,110
The key idea remains the same.

51
00:03:10,110 --> 00:03:14,880
We're telling view whenever a change event occurs, please run a select organization.

52
00:03:15,240 --> 00:03:18,990
So with that we can scroll down below and we can define our methods.

53
00:03:19,020 --> 00:03:19,980
Object right here.

54
00:03:21,120 --> 00:03:26,370
And since we called our Method Select Organization above, we have to obviously call it select our organization

55
00:03:26,370 --> 00:03:27,120
here as well.

56
00:03:27,990 --> 00:03:32,670
So this is the method that you will run whenever the user interacts with a checkbox in any way.

57
00:03:32,910 --> 00:03:37,740
We're still going to utilize the V model functionality, so Vue is still going to use the model to populate

58
00:03:37,740 --> 00:03:39,240
the selected organization's array.

59
00:03:39,480 --> 00:03:43,320
Here is where we're going to do some additional logic on top of that.

60
00:03:43,650 --> 00:03:49,440
What I want to show you in this lesson is that we actually have the selected organization's data array.

61
00:03:50,070 --> 00:03:53,580
It's going to be automatically updated by the time this method runs.

62
00:03:53,730 --> 00:03:56,400
So in other words, our V model logic is going to run first.

63
00:03:56,700 --> 00:04:01,530
And I want to show you that because I want to demonstrate that we're going to have our selected organizations

64
00:04:01,530 --> 00:04:07,260
array populated with the values we care about, populated with the organization strings that we want

65
00:04:07,260 --> 00:04:08,760
to send to our View X Store.

66
00:04:09,090 --> 00:04:13,500
So for now, I just want to console.log this that selected organizations.

67
00:04:13,890 --> 00:04:17,700
Remember every data property is available on the component via the this keyword.

68
00:04:17,850 --> 00:04:21,870
I'm just logging out the value of the array as it currently is.

69
00:04:22,320 --> 00:04:26,400
All right, so I'm going to save this and I'm going to transition to my browser.

70
00:04:27,350 --> 00:04:29,600
And I'm going to refresh this page.

71
00:04:29,870 --> 00:04:31,160
And here is my console.

72
00:04:31,310 --> 00:04:34,200
And I want to show you what happens when I choose a checkbox.

73
00:04:34,220 --> 00:04:38,540
We're going to click a checkbox, which means that we're going to trigger a change event, which means

74
00:04:38,540 --> 00:04:42,860
we're going to run this select organization method that we justified, and we're going to see that output

75
00:04:42,860 --> 00:04:43,790
in our console.

76
00:04:44,210 --> 00:04:45,350
So here it is.

77
00:04:45,470 --> 00:04:50,090
And you might be a little bit surprised because it's a proxy object rather than an array object.

78
00:04:50,390 --> 00:04:55,730
But remember, the data structure that we provide to view is not the end of the line.

79
00:04:55,730 --> 00:05:01,190
View needs to take that data structure and wrap it with additional functionality to enable the reactivity

80
00:05:01,190 --> 00:05:04,940
right to connect it to our template and automatically update the template.

81
00:05:05,180 --> 00:05:10,640
So in order to build the logic that watches for change, it needs to wrap our core data structure,

82
00:05:10,640 --> 00:05:13,010
in this case, an array in this proxy object.

83
00:05:13,280 --> 00:05:17,450
So basically to sum it up, this is an implementation detail, a view.

84
00:05:17,990 --> 00:05:23,720
It is an array under the hood, but it's wrapped in a special helper object around it that adds extra

85
00:05:23,720 --> 00:05:24,320
functionality.

86
00:05:24,560 --> 00:05:28,610
However, we can still see that YouTube is present within this proxy object.

87
00:05:28,850 --> 00:05:30,950
That means that we are console.log in that array.

88
00:05:31,010 --> 00:05:33,890
We are seeing that it is storing the value that we care about.

89
00:05:34,130 --> 00:05:39,410
And similarly, if I select another one like point of view, we can see that that proxy object updates

90
00:05:39,410 --> 00:05:41,090
to have these two elements.

91
00:05:41,090 --> 00:05:43,970
In fact, I think the numbers here represent the arrays index position.

92
00:05:43,980 --> 00:05:48,740
So if YouTube in point of view are here and then if I remove YouTube, that's still an interaction,

93
00:05:48,860 --> 00:05:50,210
that's still a change in that.

94
00:05:50,300 --> 00:05:52,670
That's still going to run my select organization method.

95
00:05:52,850 --> 00:05:55,980
So we're going to see that that output updates that just have the one that's selected.

96
00:05:56,330 --> 00:06:01,820
So the key takeaway is whenever this method runs, our array is already going to store the most up to

97
00:06:01,820 --> 00:06:03,770
date collection of organization strings.

98
00:06:03,980 --> 00:06:08,960
And we want to take that array of organization strings and ship it off to the U.S., because as soon

99
00:06:08,960 --> 00:06:15,290
as this change occurs right here, the U.S. needs to get the data and then run its filter logic to filter

100
00:06:15,290 --> 00:06:19,520
its 100 jobs to only the ones that are going to have the organizations listed here.

101
00:06:19,820 --> 00:06:25,310
So obviously, when we select point of view, we only want to see jobs on the right hand side that belong

102
00:06:25,310 --> 00:06:26,780
to the point of view organization.

103
00:06:27,020 --> 00:06:32,540
These jobs live in view X, so we're going to need to send a message to say, Hey, view X, you're

104
00:06:32,540 --> 00:06:35,660
responsible for displaying these jobs, you're storing this data.

105
00:06:35,810 --> 00:06:40,460
I'm going to need you to filter these 100 jobs based on this new selection of point of view.

106
00:06:40,670 --> 00:06:45,350
And later on, if somebody selects view can do it, we need to once again send a message to view X to

107
00:06:45,350 --> 00:06:50,600
say, Hey, the user now has two organizations point of view, and if you can do it, this is your new

108
00:06:50,600 --> 00:06:51,650
array of true values.

109
00:06:51,650 --> 00:06:54,650
Please use it to again filter what you see on the right hand side.

110
00:06:54,890 --> 00:06:59,630
Because remember, every time the user interacts, every single time they select or select, we want

111
00:06:59,630 --> 00:07:05,450
to automatically re render the right hand side to show only the jobs that fit that search criteria.

112
00:07:05,720 --> 00:07:06,080
All right.

113
00:07:06,350 --> 00:07:09,710
So now we've wired up a basic method that's going to run on every event.

114
00:07:09,920 --> 00:07:13,340
And the next lesson, we're going to talk about how we can start connecting it to View X.
