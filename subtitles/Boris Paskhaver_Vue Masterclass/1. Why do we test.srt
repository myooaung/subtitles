1
00:00:00,210 --> 00:00:03,600
All right, welcome to the next section of the course.

2
00:00:03,720 --> 00:00:09,780
This section is dedicated to testing where first going to learn about the Just Test Runner library.

3
00:00:09,780 --> 00:00:14,460
And we're going to learn its syntax and its ins and outs, and then we're going to learn how to integrate

4
00:00:14,460 --> 00:00:15,180
it with view.

5
00:00:15,480 --> 00:00:21,600
And the advantage of this is that we will be able to write tests for our view components outside of

6
00:00:21,600 --> 00:00:22,980
our browser environment.

7
00:00:23,220 --> 00:00:27,420
So we're going to talk about the benefits of testing, we're going to talk about the syntax of testing.

8
00:00:27,510 --> 00:00:32,130
We're going to learn about something called test driven development in a couple lessons, lots of fun

9
00:00:32,130 --> 00:00:34,170
testing, focused ideas in the section.

10
00:00:34,410 --> 00:00:39,600
But before we get to all that, we have to define some key terms and terminology that I'll be using

11
00:00:39,780 --> 00:00:40,950
throughout the upcoming lessons.

12
00:00:41,250 --> 00:00:46,620
So there's actually a variety of different tests that we can write, and the one there are primarily

13
00:00:46,620 --> 00:00:48,660
going to be writing is called a unit test.

14
00:00:49,380 --> 00:00:50,730
So what is a unit test?

15
00:00:51,030 --> 00:00:57,750
Well, a unit test tests a single piece of a program in isolation, and that definition is actually

16
00:00:57,750 --> 00:01:03,690
subject to some degree of debate because developers disagree about what a single piece of our program

17
00:01:03,690 --> 00:01:04,740
literally means.

18
00:01:04,920 --> 00:01:06,570
Does it mean a single class?

19
00:01:06,570 --> 00:01:08,940
Does it mean a single function or method?

20
00:01:08,940 --> 00:01:10,770
Does it mean a single view component?

21
00:01:11,070 --> 00:01:15,690
And I think it's important not to lose yourself in the semantics of what it is.

22
00:01:15,960 --> 00:01:22,740
To me, a unit test simply means a small lightweight test that gives you some comfort and some feedback

23
00:01:22,740 --> 00:01:26,340
that what you built is built correctly and it should run fast.

24
00:01:26,450 --> 00:01:26,790
All right.

25
00:01:27,000 --> 00:01:32,160
Another key feature of a unit test, besides the small scope of what it's covering, is that if there

26
00:01:32,160 --> 00:01:36,330
are dependencies, the unit test should mock them or stub them out.

27
00:01:36,600 --> 00:01:40,440
Now, if you're unfamiliar with what these terms mean, let me give you an example.

28
00:01:41,070 --> 00:01:48,630
To mock or to stub something out means to replace a dependency with a substitute or a replacement that

29
00:01:48,630 --> 00:01:50,640
pretends to be that thing.

30
00:01:51,000 --> 00:01:58,500
So imagine that you have a view component and it reaches out to some kind of API, gets a JSON response

31
00:01:58,500 --> 00:02:00,240
and renders that to the screen.

32
00:02:00,510 --> 00:02:05,310
Now I know we haven't built that logic into our app yet, but we will in the future and you can sort

33
00:02:05,310 --> 00:02:07,140
of imagine the process for how it works.

34
00:02:07,470 --> 00:02:13,770
Well, we don't want our test to have to set up a view component and make sure the API is running and

35
00:02:13,770 --> 00:02:18,840
test the entire flow because the test becomes very complex and very coupled.

36
00:02:18,840 --> 00:02:23,460
A lot of things need to work correctly in order for the test to work right.

37
00:02:23,520 --> 00:02:25,050
We need the API to be running.

38
00:02:25,170 --> 00:02:27,210
We need to be able to make a request successfully.

39
00:02:27,300 --> 00:02:30,390
We need to be able to get a response successfully and we need to be able to render it.

40
00:02:30,540 --> 00:02:36,450
So we're testing a lot of different things and we have dependencies or other things that the view component

41
00:02:36,450 --> 00:02:38,160
is dependent on in order to run.

42
00:02:38,430 --> 00:02:43,590
So what we might do in a test like that to make it a unit test is say, well, our core unit is the

43
00:02:43,590 --> 00:02:45,600
view component and we just want to test that.

44
00:02:45,600 --> 00:02:48,360
Once it gets data, it's going to render it to the screen.

45
00:02:48,630 --> 00:02:55,860
So what we might do is we might set up a fake API or pretend as if there is an API, not set up a real

46
00:02:55,860 --> 00:02:56,910
one, but a fake one.

47
00:02:57,150 --> 00:03:03,180
So that when our component makes a request to the API, we kind of intercept that call and just immediately

48
00:03:03,180 --> 00:03:06,570
give it a plain, you know, JSON or JavaScript response.

49
00:03:06,570 --> 00:03:08,880
We don't actually make any kind of asynchronous request.

50
00:03:09,090 --> 00:03:14,310
We just pretend as if we did, and then we make sure that given the data, the view component renders

51
00:03:14,310 --> 00:03:15,750
it correctly to the screen.

52
00:03:15,930 --> 00:03:21,480
That way we've kept our scope small, we've removed the coupling with the API in our tests, and our

53
00:03:21,480 --> 00:03:26,070
tests again are lightweight, they're focused and they should run fast because they're not dependent

54
00:03:26,070 --> 00:03:31,800
on all of these additional factors or variables or dependencies hovering around our core unit.

55
00:03:32,040 --> 00:03:36,390
So to me, a unit is just a small, testable piece of functionality in our program.

56
00:03:36,630 --> 00:03:40,800
Again, it's not super important to get into the nitty gritty of is it a class is a function, etc.

57
00:03:40,980 --> 00:03:45,150
We're going to see how we write tests and we're always going to come back to you, not whether it's

58
00:03:45,150 --> 00:03:49,590
a proper unit, quote unquote, but rather is it providing some kind of value to us?

59
00:03:49,770 --> 00:03:53,400
Is it giving us comfort that our view component is working as expected?

60
00:03:53,580 --> 00:03:58,470
And is it reading well so that other developers can understand what we're testing and the benefits of

61
00:03:58,470 --> 00:03:59,040
those tests?

62
00:03:59,050 --> 00:03:59,340
Right.

63
00:03:59,970 --> 00:04:05,910
So on this next slide, I have something famous called the testing pyramid, and it describes how your

64
00:04:05,910 --> 00:04:09,630
app should incorporate various kinds of tests throughout.

65
00:04:09,870 --> 00:04:15,240
So you'll notice the very bottom you have unit tests, and that comprises the largest chunk of the pyramid,

66
00:04:15,480 --> 00:04:22,560
which suggests that unit tests should be the vast chunk or the biggest pie slice of the tests in your

67
00:04:22,560 --> 00:04:22,950
app.

68
00:04:22,950 --> 00:04:26,190
The majority of your tests in your app should be unit tests.

69
00:04:26,190 --> 00:04:31,920
They should be small, lightweight, fast, independent tests that focus on small bits of functionality.

70
00:04:32,250 --> 00:04:35,370
One level higher up than that, we have integration tests.

71
00:04:35,610 --> 00:04:40,020
So as an example of what might be considered an integration testing of your app, if you have, for

72
00:04:40,020 --> 00:04:45,930
example, a whole page being rendered and it renders 20 different view components together, that is

73
00:04:45,930 --> 00:04:52,680
kind of its own distinct feature within the app that requires multiple different units to interact with

74
00:04:52,680 --> 00:04:53,160
each other.

75
00:04:53,820 --> 00:04:59,010
So in that scenario, you might say instead of just testing one view component by itself, I might render

76
00:04:59,010 --> 00:04:59,910
a whole bunch of them.

77
00:04:59,960 --> 00:05:05,780
Together in my tests just to see how the entire ecosystem of them works, how the integration or the

78
00:05:05,780 --> 00:05:09,410
connections between the pieces of my program are interacting.

79
00:05:09,440 --> 00:05:16,760
So integration is kind of one level higher just to incorporate multiple units interacting with each

80
00:05:16,760 --> 00:05:16,970
other.

81
00:05:17,150 --> 00:05:21,530
And of course, the more that different units are interacting with each other, the more there's a chance

82
00:05:21,530 --> 00:05:27,020
for coupling, which means that there's more fault points, there's more places where something can

83
00:05:27,020 --> 00:05:29,510
break, and thus the entire app could break down.

84
00:05:29,720 --> 00:05:33,920
So integration tests are going to be what are called more flaky than unit tests.

85
00:05:34,040 --> 00:05:35,900
There's simply more chances for error.

86
00:05:36,050 --> 00:05:38,510
And so they're going to be more coupled.

87
00:05:38,600 --> 00:05:42,920
They're generally going to run slower because they have to deal with more moving pieces and bringing

88
00:05:42,920 --> 00:05:44,390
them up so that we can test them.

89
00:05:44,630 --> 00:05:48,470
And so, as a result, you generally don't want as many of these tests in your app.

90
00:05:48,650 --> 00:05:49,790
They're not going to be as fast.

91
00:05:49,790 --> 00:05:51,470
They're more coupled, they're more difficult debug.

92
00:05:51,680 --> 00:05:56,300
But you do want a couple of them to make sure your program is working as it's supposed to work with

93
00:05:56,300 --> 00:05:59,120
all these little pieces talking to each other.

94
00:05:59,180 --> 00:05:59,540
Right.

95
00:06:00,140 --> 00:06:03,740
So the way you could think about it is a unit test is almost like a jigsaw puzzle.

96
00:06:03,920 --> 00:06:05,060
It's like a little piece.

97
00:06:05,180 --> 00:06:07,190
And you're just testing that piece of the puzzle.

98
00:06:07,400 --> 00:06:08,600
Looks good by itself.

99
00:06:08,780 --> 00:06:13,100
Then the integration test is adding a whole bunch of puzzle pieces together and making sure that you're

100
00:06:13,100 --> 00:06:16,150
seeing the full picture and that it's working as expected.

101
00:06:16,160 --> 00:06:16,370
Right.

102
00:06:16,640 --> 00:06:20,450
And then at one level, higher up than that is what are called end to end tests.

103
00:06:20,450 --> 00:06:26,360
And you could see UI testing and this is perhaps the most complex and slowest and most couple of tests

104
00:06:26,600 --> 00:06:27,050
there are.

105
00:06:27,260 --> 00:06:32,990
So an example of something like this might be rendering a full view app in an actual simulated browser

106
00:06:32,990 --> 00:06:38,520
like Chrome, and then having a computer click through your app and walk through, for example, a feature.

107
00:06:38,540 --> 00:06:43,640
Let's say you're building some kind of e-commerce site and you want the user to click on a product,

108
00:06:43,850 --> 00:06:46,460
add it to their cart, go to the cart and check out.

109
00:06:46,460 --> 00:06:51,380
And you want to simulate an actual user clicking through the app and navigating through multiple pieces,

110
00:06:52,070 --> 00:06:57,130
you know, entering all their credentials correctly, checking out basically and tests are the slowest

111
00:06:57,350 --> 00:07:01,910
and you really should use them for the most critical parts of your app, such as a checkout experience,

112
00:07:01,910 --> 00:07:07,280
where it is imperative that everything work correctly and you really want that extra layer of testing

113
00:07:07,280 --> 00:07:09,980
and security to make sure things are working proper.

114
00:07:10,130 --> 00:07:16,760
You really can't cover usually your entire app and end to end tests because there's just a lot of potential

115
00:07:16,760 --> 00:07:18,620
for them to break and become outdated.

116
00:07:18,800 --> 00:07:22,130
There's so many points of failure that they're just become very brittle.

117
00:07:22,130 --> 00:07:23,840
You really just want to keep them small.

118
00:07:23,890 --> 00:07:31,190
And the number of entities small and focused on the most critical parts of your app, while the smaller

119
00:07:31,190 --> 00:07:35,690
tests, like the unit tests, focus on the individual elements, the view components, the classes,

120
00:07:35,690 --> 00:07:36,890
the functions, etc..

121
00:07:37,040 --> 00:07:40,640
And then of course, in that little bubble above our testing pyramid, we have manual tests.

122
00:07:40,820 --> 00:07:45,860
Those are the tests that we run ourselves by going into the browser and plugging into our app and making

123
00:07:45,860 --> 00:07:47,090
sure everything works correctly.

124
00:07:47,210 --> 00:07:51,920
Basically, the way that we've been testing so far throughout the course has been only manual testing,

125
00:07:52,100 --> 00:07:56,090
and the idea of adding all these tests is we're going to automate some of that functionality.

126
00:07:56,090 --> 00:08:02,360
We're going to let the computer or just run some tests to make sure our components are doing exactly

127
00:08:02,360 --> 00:08:03,200
what they're supposed to.

128
00:08:03,320 --> 00:08:06,650
And whenever we make changes, we don't have to go back and test every little thing.

129
00:08:06,800 --> 00:08:12,050
We can just ensure that all of our components have not broken and are still doing their part to make

130
00:08:12,050 --> 00:08:13,940
the app functional and cohesive.

131
00:08:14,000 --> 00:08:14,360
All right.

132
00:08:15,350 --> 00:08:18,010
So as a reminder, what tools are we going to use?

133
00:08:18,060 --> 00:08:21,830
We're going to use that just testing library that is developed by Facebook.

134
00:08:21,950 --> 00:08:23,540
It is agnostic of you.

135
00:08:23,540 --> 00:08:27,500
So it's a testing library that you can use for other projects in JavaScript.

136
00:08:27,500 --> 00:08:31,520
You can use it for testing React and you can use it for testing other types of technologies.

137
00:08:31,610 --> 00:08:35,180
It's not specifically tied to view, it's just a general testing library.

138
00:08:35,390 --> 00:08:40,220
And then in combination with that, we're going to introduce a library called Vue Test Utils.

139
00:08:40,400 --> 00:08:45,560
And what that is going to allow us to do is set up our components within our testing files.

140
00:08:45,560 --> 00:08:50,630
We're going to mount our components, which means we're going to basically render them just like our

141
00:08:50,630 --> 00:08:51,380
browser does.

142
00:08:51,470 --> 00:08:56,960
But in a non browser environment, in a node environment where we can simulate the component as if it

143
00:08:56,960 --> 00:09:02,540
exists and then test it without actually having to open up a browser page and see the resulting HTML.

144
00:09:03,200 --> 00:09:06,770
So those are going to be our tools throughout the project, and that's really all there is to cover

145
00:09:06,950 --> 00:09:07,730
in this lesson.

146
00:09:07,730 --> 00:09:11,690
And the very next lesson we're going to start exploring the syntax of just.

147
00:09:11,700 --> 00:09:11,960
All right.

148
00:09:12,110 --> 00:09:13,310
Hopefully this has been helpful.

149
00:09:13,310 --> 00:09:14,840
So I will see you in the next lesson.
