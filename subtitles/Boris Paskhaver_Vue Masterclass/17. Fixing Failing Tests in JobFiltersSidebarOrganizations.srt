1
00:00:00,740 --> 00:00:01,790
All right.

2
00:00:01,790 --> 00:00:07,430
So the changes that we introduced in the previous lesson are going to predictably break our tests for

3
00:00:07,430 --> 00:00:10,040
the job filter sidebar organizations component.

4
00:00:10,280 --> 00:00:14,780
So as always, let's reuse the same techniques we've learned to get these tests passed.

5
00:00:15,080 --> 00:00:16,430
It's right here in my test suite.

6
00:00:16,430 --> 00:00:19,850
Let's import all of our dependencies and mocked import for our tests.

7
00:00:20,240 --> 00:00:25,370
So I'm going to import use store and that's going to come from view X.

8
00:00:25,550 --> 00:00:32,090
Immediately after that, I'm going to mark out the U.S. then I'm going to import use router and that's

9
00:00:32,090 --> 00:00:34,010
going to come from Vue router.

10
00:00:34,640 --> 00:00:39,830
Make sure I spell this with a lowercase V, then I'm going to mark out the router.

11
00:00:40,880 --> 00:00:47,540
Then my component is relying on my use unique organizations composable function that is coming from

12
00:00:47,540 --> 00:00:50,090
that directory or that file store comparables.

13
00:00:50,510 --> 00:00:52,850
So in the next line, I'm going to mock that out as well.

14
00:00:53,240 --> 00:00:57,140
So at slash store, slash composable is awesome.

15
00:00:57,560 --> 00:01:00,200
So now we have our create config factory function.

16
00:01:00,200 --> 00:01:06,110
This was formally mocking out the dollar sign store and dollar sign router properties under this object

17
00:01:06,110 --> 00:01:09,350
representing the or the this keyword of representing the component.

18
00:01:09,590 --> 00:01:11,750
We're no longer using this so we can remove that.

19
00:01:12,880 --> 00:01:19,480
And thus remove the parameters right here and now we can move through our tests and refactor them to

20
00:01:19,480 --> 00:01:20,380
use our new marks.

21
00:01:20,740 --> 00:01:25,240
So right here, what this test cares about is rendering a unique list of organizations for filtering

22
00:01:25,240 --> 00:01:25,630
jobs.

23
00:01:25,870 --> 00:01:30,790
So all this really cares about is that our composable function right here gives it a set that it can

24
00:01:30,790 --> 00:01:31,180
work with.

25
00:01:31,510 --> 00:01:33,640
We no longer need the full store and getters.

26
00:01:33,910 --> 00:01:38,170
So what I'm going to do here is, say, use unique organizations.

27
00:01:39,480 --> 00:01:41,940
And I want that to make return value.

28
00:01:42,210 --> 00:01:45,270
And that is going to be my set that I formerly had right here.

29
00:01:46,600 --> 00:01:47,530
Let's copy that.

30
00:01:47,530 --> 00:01:48,490
Paste out right here.

31
00:01:49,730 --> 00:01:51,170
Remove my former store.

32
00:01:52,100 --> 00:01:56,630
As far as the router, I don't think we're going to need it at all because the default mac function

33
00:01:56,630 --> 00:01:58,640
returning undefined is going to be fine.

34
00:01:58,880 --> 00:02:03,890
The only place where the router needs a push method as a reminder is right here in this function.

35
00:02:04,070 --> 00:02:07,940
But in this test, we're not running this function, so we're never going to get to this code.

36
00:02:08,150 --> 00:02:11,750
So even though we don't have push on undefined, we're never going to reach this code.

37
00:02:11,930 --> 00:02:13,490
So this test doesn't have to worry about it.

38
00:02:13,790 --> 00:02:15,490
So I'm not going to need a router here.

39
00:02:15,500 --> 00:02:17,060
The default use router.

40
00:02:17,240 --> 00:02:20,380
Return value of undefined will work for this test right here.

41
00:02:20,390 --> 00:02:22,670
Remove these two arguments that are no longer needed.

42
00:02:22,880 --> 00:02:23,570
Save that.

43
00:02:23,600 --> 00:02:24,110
There we go.

44
00:02:25,130 --> 00:02:25,470
All right.

45
00:02:25,490 --> 00:02:30,560
Moving on to the next one below, I'm going to copy my unique use, unique organization's marking from

46
00:02:30,560 --> 00:02:30,980
above.

47
00:02:31,760 --> 00:02:32,390
There we go.

48
00:02:32,900 --> 00:02:36,350
This test does care about the commit method right here.

49
00:02:36,350 --> 00:02:39,500
So I am going to keep commit right here as a named constant.

50
00:02:39,740 --> 00:02:41,900
But I'm going to change where it is coming from.

51
00:02:42,140 --> 00:02:44,030
So I'm going to take you store.

52
00:02:44,030 --> 00:02:49,340
I'm going to mark its return value to give you back a sample store object or a mark that's going to

53
00:02:49,340 --> 00:02:52,700
have a commit method that's going to be our just mock function above.

54
00:02:53,060 --> 00:02:54,950
Thus we no longer need dollar sign store.

55
00:02:56,390 --> 00:03:02,030
Now we will need router to be a somewhat valid object here because here we are testing in the test the

56
00:03:02,030 --> 00:03:03,320
user clicking the checkbox.

57
00:03:03,530 --> 00:03:07,820
We can see here we are clicking which means we are going to run through these two lines.

58
00:03:08,030 --> 00:03:13,580
So even though our focus is the commit method, we do care about having push because if we have undefined,

59
00:03:13,580 --> 00:03:17,690
the test will simply break because it's not going to reach the end of this function without an error.

60
00:03:17,960 --> 00:03:22,850
So I do in this test need to make sure that I do provide a valid value for your router.

61
00:03:23,210 --> 00:03:26,900
So I'm just going to do the simplest thing that makes sense, which is providing an object with a push

62
00:03:26,900 --> 00:03:32,870
function or push method set to a basic just function that is going to be good enough to get this test

63
00:03:32,870 --> 00:03:33,410
to pass.

64
00:03:34,660 --> 00:03:36,070
Get rid of that line.

65
00:03:36,070 --> 00:03:41,650
We no longer need it and get rid of these two arguments to the create config factory function.

66
00:03:41,650 --> 00:03:42,880
We no longer need them.

67
00:03:43,340 --> 00:03:43,960
There we go.

68
00:03:44,560 --> 00:03:45,760
Same logic down below.

69
00:03:45,760 --> 00:03:48,820
So I'm going to copy this mocking out from above.

70
00:03:50,770 --> 00:03:56,380
Now this test is similarly going to click on the check box, but this one cares about the router, not

71
00:03:56,680 --> 00:03:57,430
the store.

72
00:03:57,460 --> 00:04:03,730
So for you store, I'm going to make a return value and all I care about is that I have some comment

73
00:04:03,730 --> 00:04:07,840
method on it, but I don't need to assign it to a separate constant because I'm never going to check

74
00:04:07,840 --> 00:04:08,920
in on it on it later.

75
00:04:09,310 --> 00:04:13,270
So just like that, that takes care of this thing that we formerly had.

76
00:04:13,270 --> 00:04:14,140
So let's delete that.

77
00:04:15,240 --> 00:04:19,740
We still want to keep push as a constant because we're going to reference it later right here.

78
00:04:19,980 --> 00:04:22,740
However, we're no longer going to wrap it up in Dollar Sign Rooter.

79
00:04:22,890 --> 00:04:27,300
We're simply going to provide it in our use router mock return object.

80
00:04:27,690 --> 00:04:32,790
Make return value is going to be an object with a push method set to adjust function that we defined

81
00:04:32,790 --> 00:04:33,240
above.

82
00:04:33,510 --> 00:04:35,520
Delete this line because we no longer need it.

83
00:04:35,790 --> 00:04:38,490
Delete these two arguments because we no longer need them.

84
00:04:38,940 --> 00:04:41,580
Everything is becoming a little bit cleaner and written on one line.

85
00:04:41,850 --> 00:04:44,330
Save that, let everything run and beautiful.

86
00:04:44,340 --> 00:04:48,780
We have 22 passing test suites and 68 passing tests in less than 3 seconds.

87
00:04:49,080 --> 00:04:53,490
So hopefully you can also get a sense of how these three factors that no longer require us to come up

88
00:04:53,490 --> 00:04:58,710
with these complex mock objects for the store are making our tests even simpler and shorter.

89
00:04:58,710 --> 00:05:04,140
Right, because now these simple one liners can kind of get to the heart of what we need without needing

90
00:05:04,140 --> 00:05:09,480
to get super knowledgeable about all those nested things that we've extracted, for example, to composable.

91
00:05:09,480 --> 00:05:14,580
So our test suite has also become a little bit leaner and meaner as a result of the composition API.

92
00:05:14,760 --> 00:05:19,650
Everything is kind of just one basic line of code as far as the set up of the interaction and then the

93
00:05:19,650 --> 00:05:20,130
assertion.

94
00:05:20,610 --> 00:05:22,320
All right, that's all there is to cover in this lesson.

95
00:05:22,320 --> 00:05:23,940
So I will see you in the next one.
