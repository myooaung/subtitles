1
00:00:00,960 --> 00:00:01,500
Okay.

2
00:00:01,500 --> 00:00:07,320
So in this lesson, we're going to fix up our last four failing tests for our job listings component.

3
00:00:07,560 --> 00:00:13,470
And as we can see here, these tests all deal with showing a link to either the previous page or the

4
00:00:13,470 --> 00:00:15,510
next page in certain scenarios.

5
00:00:15,750 --> 00:00:21,570
And all of this logic is now dependent on the previous page and next page properties that we get from

6
00:00:21,570 --> 00:00:24,090
our used previous and next pages composable.

7
00:00:24,300 --> 00:00:29,970
So this is going to be the most critical composable to mock out in these tests because these values

8
00:00:29,970 --> 00:00:36,270
affect the logic up here that works with the VRF to determine whether we render a link to the previous

9
00:00:36,270 --> 00:00:38,370
page and to the next page.

10
00:00:38,730 --> 00:00:43,650
So once again, let me copy a sample section of marks from above.

11
00:00:43,650 --> 00:00:44,970
So let's go to our first test.

12
00:00:45,270 --> 00:00:46,530
I'm just going to copy this right here.

13
00:00:46,830 --> 00:00:51,060
And once again, we're just going to need to modify it so it fits the current test that we are in.

14
00:00:51,450 --> 00:00:55,770
So let's scroll down right here and paste this right here and think about what this test is telling

15
00:00:55,770 --> 00:00:59,790
us self when the user is on the first page of job results.

16
00:00:59,790 --> 00:01:05,190
So immediately what that tells me is our use current page composable right here can not have a value

17
00:01:05,190 --> 00:01:05,550
of two.

18
00:01:05,550 --> 00:01:06,840
It needs to have a value of one.

19
00:01:07,170 --> 00:01:11,580
And once again, as we saw in the previous lesson, just to be safe right here, because this is something

20
00:01:11,580 --> 00:01:16,560
that is going to be rendered to the DOM, instead of providing a mock object, I am going to use a real

21
00:01:16,560 --> 00:01:21,330
rough object right here, a reactive object created by ref and I'm going to provide a value of one.

22
00:01:21,600 --> 00:01:26,970
So this is honoring the scenario I've described in my describe when the user's on the first page of

23
00:01:26,970 --> 00:01:29,790
job results and it does not show link to the previous page.

24
00:01:29,880 --> 00:01:30,240
All right.

25
00:01:30,510 --> 00:01:32,130
So do I care about filter jobs?

26
00:01:32,130 --> 00:01:32,940
Not really.

27
00:01:32,940 --> 00:01:38,040
My logic here for rendering that previous page is not dependent on filter jobs, so it can be an empty

28
00:01:38,040 --> 00:01:38,940
array, not a problem.

29
00:01:39,240 --> 00:01:45,480
Now use previous and next pages does matter because again I want to communicate to a reader a real world

30
00:01:45,480 --> 00:01:45,960
scenario.

31
00:01:46,170 --> 00:01:51,240
So if I'm currently on page one of job results, my previous page is not going to be one.

32
00:01:51,240 --> 00:01:55,740
It's going to be undefined, and my next page is going to be whatever we want.

33
00:01:55,740 --> 00:01:59,550
Let's say to in this scenario, it can also be undefined if we don't have a next page.

34
00:01:59,760 --> 00:02:01,740
But in this case, let's do two.

35
00:02:02,040 --> 00:02:06,480
Now, once again to remind you, if we want it to be super realistic, previous page would not just

36
00:02:06,480 --> 00:02:07,440
be undefined.

37
00:02:07,440 --> 00:02:12,810
It would be a reactive object with a value of undefined, and next page would not just be the number

38
00:02:12,810 --> 00:02:13,230
two.

39
00:02:13,230 --> 00:02:18,900
It would be a reactive object with a value of two, or at a bare minimum, any JavaScript object with

40
00:02:18,900 --> 00:02:20,310
a value property set to two.

41
00:02:20,610 --> 00:02:25,350
And if we get to that point where we have to use something like Ref, I'm okay with that, just like

42
00:02:25,350 --> 00:02:28,380
we did in the previous lesson with use current page and using ref right here.

43
00:02:28,620 --> 00:02:34,110
However, if I'm able to also get the test to pass without involving a real view reactive object and

44
00:02:34,110 --> 00:02:39,660
instead relying on objects in my own domain, under my own control, my own mocks, I consider that

45
00:02:39,660 --> 00:02:40,200
a victory.

46
00:02:40,470 --> 00:02:44,130
So let's start out with this basic object and see if it's good enough to play the role.

47
00:02:44,340 --> 00:02:49,980
Because in theory, if we simply do structure right here undefined for previous page and two for next

48
00:02:49,980 --> 00:02:55,050
page, if we're not using this anywhere else where we need a value property and we're simply returning

49
00:02:55,050 --> 00:03:00,000
those properties right here and then using them for a VRF, even if they're playing values like undefined

50
00:03:00,000 --> 00:03:04,560
in to view, will still know how to deal with them in the same way that view will know how to deal with

51
00:03:04,560 --> 00:03:07,740
the real reactive objects when we actually use the real composable.

52
00:03:07,740 --> 00:03:07,950
Right.

53
00:03:08,130 --> 00:03:13,020
But for the purposes of this test, it's okay to simply return the basic primitives that the reactive

54
00:03:13,020 --> 00:03:14,910
object is covering up or wrapping.

55
00:03:14,910 --> 00:03:15,150
Right?

56
00:03:15,810 --> 00:03:19,290
So let's see if our test pass and if that in if it does, then that's great.

57
00:03:19,320 --> 00:03:20,850
No need to make it more complex.

58
00:03:21,180 --> 00:03:23,490
So right here we no longer care about query params.

59
00:03:23,940 --> 00:03:26,640
We no longer care about our route or our create store.

60
00:03:26,970 --> 00:03:32,670
We no longer care about the two arguments we are passing to our create config function.

61
00:03:32,850 --> 00:03:36,030
Let's focus on this test and let's see what we get.

62
00:03:37,480 --> 00:03:38,050
You can do that.

63
00:03:38,320 --> 00:03:39,330
And it passes.

64
00:03:39,340 --> 00:03:39,820
Wonderful.

65
00:03:40,000 --> 00:03:42,010
So now let's repeat this exact same logic.

66
00:03:42,010 --> 00:03:43,600
So I'm going to copy this one below.

67
00:03:44,020 --> 00:03:47,080
And remember, our describe lock is once again the same.

68
00:03:47,080 --> 00:03:49,360
So when users on the first page of job results.

69
00:03:49,690 --> 00:03:56,080
So I'm going to keep most of this logic and let's see what's going to be different here in this test.

70
00:03:56,770 --> 00:03:57,310
Okay.

71
00:03:57,310 --> 00:03:59,710
So this test is concerned about the next page.

72
00:03:59,710 --> 00:04:05,230
So it's looking for a totally different data test attribute of next page link in comparison to previous

73
00:04:05,230 --> 00:04:05,620
page link.

74
00:04:05,830 --> 00:04:10,720
So I actually think the good news here is that our set up remains exactly the same when user is on first

75
00:04:10,720 --> 00:04:14,470
page of job results, we've got that covered with use current page returning one.

76
00:04:14,800 --> 00:04:20,050
If the user is on page one and there is a next page too, then we should show a link to that next page

77
00:04:20,050 --> 00:04:20,350
too.

78
00:04:20,560 --> 00:04:23,140
So all of our set up here in our mocks looks good to me.

79
00:04:23,350 --> 00:04:25,930
So all we can do here is clear out all of this former code.

80
00:04:25,930 --> 00:04:27,520
We do not need the query params.

81
00:04:27,730 --> 00:04:28,870
We don't need create root.

82
00:04:28,870 --> 00:04:30,400
Here's our former mock store.

83
00:04:30,640 --> 00:04:33,610
See how much we're cleaning up here and how easier it's making the test.

84
00:04:33,850 --> 00:04:40,870
And so right here we can remove these two arguments, focus on this test right here with zip and save

85
00:04:40,870 --> 00:04:41,140
that.

86
00:04:41,430 --> 00:04:42,250
Let's see how that works.

87
00:04:42,880 --> 00:04:44,560
And indeed, it passes, which is great news.

88
00:04:44,890 --> 00:04:45,160
Okay.

89
00:04:45,190 --> 00:04:50,200
And I just want to reiterate here, because we did kind of move from a factory function architecture

90
00:04:50,200 --> 00:04:51,970
to a marking out in every test.

91
00:04:52,240 --> 00:04:57,160
If for some reason you had a really complex object here that you wanted to use as your mock return value,

92
00:04:57,340 --> 00:05:02,440
you're totally welcome to create a factory function that serves the exact purpose as it did earlier

93
00:05:02,440 --> 00:05:02,920
in the course.

94
00:05:03,130 --> 00:05:08,830
It may have, for example, five properties with default values, but also allow the acceptance of an

95
00:05:08,830 --> 00:05:14,920
object whose properties you to structure so that each test has a reasonable default, but also can provide

96
00:05:14,920 --> 00:05:17,350
custom values for properties that it cares about.

97
00:05:17,620 --> 00:05:19,990
So we don't have to mark out everything in here.

98
00:05:20,110 --> 00:05:24,130
We don't have to write and duplicate all of this logic in line.

99
00:05:24,130 --> 00:05:25,840
We can totally extract it to you.

100
00:05:26,500 --> 00:05:27,280
Factory functions.

101
00:05:27,430 --> 00:05:31,660
At this point, I hope you've had enough experience seeing how we establish those earlier in the course

102
00:05:31,840 --> 00:05:33,070
so that we don't have to worry about it.

103
00:05:33,910 --> 00:05:38,230
But I'm just saying that as as a general take away, once again, if you see duplication and you think

104
00:05:38,230 --> 00:05:43,660
that you can move it elsewhere and you don't require the user to scroll up to have to understand what

105
00:05:43,660 --> 00:05:44,770
it means for the given test.

106
00:05:44,920 --> 00:05:46,780
I think that's a victory and that's totally fine.

107
00:05:46,960 --> 00:05:52,300
For now, these tests are to me at least pretty clean, pretty short, pretty easy to read.

108
00:05:52,300 --> 00:05:58,000
And so I don't mind if I'm manually writing out all these marks and all the objects they return, the

109
00:05:58,000 --> 00:05:58,690
reactive objects.

110
00:05:58,690 --> 00:06:01,570
That is, I don't mind in line because they're not that complex.

111
00:06:01,990 --> 00:06:03,760
And I still think it's pretty easy to read.

112
00:06:03,910 --> 00:06:09,190
That's in comparison to our previous case where we had, for example, a really complex mock store which

113
00:06:09,190 --> 00:06:12,340
had a getters property, you know, with its own complex object.

114
00:06:12,550 --> 00:06:16,060
Or another example is our config object for these shall amount, right?

115
00:06:16,060 --> 00:06:22,240
There's so many possible nested properties that we had there, a global mock stubs, props, etc.,

116
00:06:22,540 --> 00:06:25,120
that it made sense to extract it to something like this.

117
00:06:26,290 --> 00:06:29,260
But again, it's sort of your own value call when you want to make that move.

118
00:06:29,540 --> 00:06:29,890
All right.

119
00:06:30,220 --> 00:06:32,710
So let's go ahead and remove fit right here.

120
00:06:32,710 --> 00:06:35,050
And now we only have two more tests to address.

121
00:06:35,440 --> 00:06:37,930
So I'm going to copy what we have right here.

122
00:06:39,000 --> 00:06:40,080
And bring it on down.

123
00:06:40,560 --> 00:06:42,270
So what is the difference with this test?

124
00:06:42,270 --> 00:06:46,020
This one is when a user is on the last page of job results.

125
00:06:46,020 --> 00:06:47,490
So we kind of have to flip things around.

126
00:06:47,790 --> 00:06:51,900
When the user is on the last page of job results, it does not show link to next page.

127
00:06:52,140 --> 00:06:54,270
So let's say our current page is going to be two.

128
00:06:54,900 --> 00:06:56,610
We do not care about filter jobs.

129
00:06:56,790 --> 00:07:01,650
If the user is on page two, what we can say is the previous page is going to be one.

130
00:07:02,400 --> 00:07:06,750
And if we want the user to be on the last page of job results, then there should be no next page.

131
00:07:06,750 --> 00:07:11,100
We can't be on page two and also have a next page of two.

132
00:07:11,280 --> 00:07:16,920
So as you may recall, from our implementation of use previous next pages, it returns undefined whenever

133
00:07:16,920 --> 00:07:22,380
there is no next page in the same way that right here it returns undefined whenever there is no previous

134
00:07:22,380 --> 00:07:22,620
page.

135
00:07:22,890 --> 00:07:28,500
Now technically in JavaScript terms, I forgot to mention this having a property manually assigned to

136
00:07:28,500 --> 00:07:32,550
undefined is the exact same as if we never included it in the first place.

137
00:07:32,760 --> 00:07:34,170
So we could totally do this.

138
00:07:34,170 --> 00:07:35,730
Just remove line eight.

139
00:07:35,940 --> 00:07:39,990
But I want to be a little bit more explicit here, even if it's not JavaScript.

140
00:07:39,990 --> 00:07:41,700
Best practice to write undefined.

141
00:07:41,700 --> 00:07:46,350
Mainly just because once again, I care more about readability and making sure it's understood that

142
00:07:46,350 --> 00:07:51,990
next page is undefined and that that is important for this test versus letting that be implicit logic

143
00:07:52,170 --> 00:07:55,830
that the person has to know about the JavaScript programming language to understand.

144
00:07:56,160 --> 00:08:00,840
All right, so even though accessing next page on an object without a next page property will always

145
00:08:00,840 --> 00:08:03,690
get undefined, I'm going to manually define it right here.

146
00:08:03,690 --> 00:08:08,370
So that reminds the person that there is no next page and that this composable is what's responsible

147
00:08:08,370 --> 00:08:11,490
for why the component does not render a link to the next page.

148
00:08:11,880 --> 00:08:12,180
All right.

149
00:08:12,180 --> 00:08:16,500
So with that, once again, remove all this wonderful code.

150
00:08:17,280 --> 00:08:17,820
Good to know.

151
00:08:17,820 --> 00:08:18,180
Yeah.

152
00:08:18,210 --> 00:08:20,940
And right here, we don't need these two parameters.

153
00:08:21,390 --> 00:08:22,140
Save that.

154
00:08:22,830 --> 00:08:23,880
Focus on it with fit.

155
00:08:24,940 --> 00:08:27,520
Let's see if that works and indeed does.

156
00:08:27,520 --> 00:08:28,300
Let's look fit.

157
00:08:28,510 --> 00:08:30,080
Let's copy this logic below.

158
00:08:30,100 --> 00:08:34,690
I think it's going to stay the exact same because once again, our setup logic is the same.

159
00:08:34,690 --> 00:08:38,290
When user is on last page of job results, it shows link to previous page.

160
00:08:38,560 --> 00:08:40,630
Our last page in this scenario is page two.

161
00:08:40,720 --> 00:08:45,040
We have a previous page of one and that's ultimately what we're testing for that we are going to see

162
00:08:45,040 --> 00:08:46,690
that link render somewhere.

163
00:08:46,930 --> 00:08:52,120
So once again, let's remove query params, root our store and our two functions right here.

164
00:08:52,990 --> 00:08:56,440
Once again, apologies not to functions, but to arguments to our function.

165
00:08:56,740 --> 00:08:57,400
Save that.

166
00:08:59,400 --> 00:09:02,460
And it looks like everything is passing right in my test window.

167
00:09:02,460 --> 00:09:07,530
I'm just going to press you and press a we're going to run all of my tests that I have throughout my

168
00:09:07,530 --> 00:09:13,410
entire test suite and now across 23 test suites, in other words, 23 files and 71 tests.

169
00:09:13,620 --> 00:09:17,460
Everything is passing and on my end everything is passing in two and a half seconds.

170
00:09:17,460 --> 00:09:21,270
So our tests are all running pretty quickly, which is a good sign, by the way, that we are marking

171
00:09:21,270 --> 00:09:24,520
things out effectively and not dealing with a lot of complex operations.

172
00:09:24,520 --> 00:09:29,210
This is, I think, pretty good to run 75 assertions or almost 75 assertions in less than two one half

173
00:09:29,220 --> 00:09:29,550
seconds.

174
00:09:30,000 --> 00:09:30,300
All right.

175
00:09:30,300 --> 00:09:34,950
So that completes our fixing of the failing jobless things test sweep.

176
00:09:35,100 --> 00:09:36,780
And I will see you in the next lesson.
