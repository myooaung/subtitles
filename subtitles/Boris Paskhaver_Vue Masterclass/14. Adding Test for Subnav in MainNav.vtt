WEBVTT
1
00:00:00.270 --> 00:00:01.200
All right.

2
00:00:01.200 --> 00:00:06.660
So before we close this lesson off, there is one more test that I'd like to add for our main nav.

3
00:00:06.690 --> 00:00:10.590
I notice that we're not actually testing this VRF logic for our sub.

4
00:00:10.590 --> 00:00:15.390
Now we conditionally render the sub nav based on the user being logged in.

5
00:00:15.600 --> 00:00:21.090
That's very similar to how we conditionally render our profile image, but we're not testing that anywhere

6
00:00:21.090 --> 00:00:21.810
in our code.

7
00:00:22.050 --> 00:00:25.530
The reason we're getting perfect test coverage is in some of our tests.

8
00:00:25.530 --> 00:00:27.090
This is an outing to true.

9
00:00:27.810 --> 00:00:31.050
So the sub nav or at least its stub is being rendered.

10
00:00:31.260 --> 00:00:36.260
So the testing tells us saying I am running through this code, I am running through line 43.

11
00:00:36.540 --> 00:00:39.720
So I'm assuming that some code has run through it and nothing is broken.

12
00:00:39.720 --> 00:00:45.420
So it's okay, but it doesn't necessarily mean that we have tested it, that we have asserted that something

13
00:00:45.420 --> 00:00:47.880
exists or asserted that something is valid.

14
00:00:48.180 --> 00:00:50.970
So we have no actual tests for this sub nav logic.

15
00:00:50.970 --> 00:00:55.920
And I want to add that in this lesson, the test is going to be very similar to the one we have right

16
00:00:55.920 --> 00:00:58.290
here for our user profile picture.

17
00:00:58.380 --> 00:00:58.650
Right?

18
00:00:58.830 --> 00:01:03.600
Because what we're doing is we're looking for the profile image and we're checking that it does not

19
00:01:03.600 --> 00:01:09.570
exist when the component is first shallow mounted, then we are interacting with the component the way

20
00:01:09.570 --> 00:01:16.350
that the user will, which is looking for the login button and triggering a click action on it or a

21
00:01:16.350 --> 00:01:16.950
click event.

22
00:01:17.190 --> 00:01:22.680
And after that click event completes, we are then verifying that a profile image exists.

23
00:01:22.950 --> 00:01:28.290
Now again, just to reiterate and repeat myself ad nauseum, notice in this test that we don't know

24
00:01:28.290 --> 00:01:33.180
the exact kind of component that a profile image is or the exact kind of component or element that a

25
00:01:33.180 --> 00:01:34.140
login button is.

26
00:01:34.260 --> 00:01:38.910
We're just looking for something that has those data test attributes, which allows this test to be

27
00:01:38.910 --> 00:01:44.730
independent of the implementation and what we eventually choose to actually implement in the main NAV.

28
00:01:44.910 --> 00:01:47.760
So we're going to follow a very similar approach for our new test.

29
00:01:48.090 --> 00:01:50.340
So right here I'm going to create a new test.

30
00:01:50.340 --> 00:01:52.320
It's still going to be within that top level.

31
00:01:52.320 --> 00:01:57.480
Describe of when the user logs in because that is a good parent category to describe this test.

32
00:01:57.750 --> 00:02:02.460
When the user logs in, we're going to display the user profile picture and what else are we going to

33
00:02:02.460 --> 00:02:02.760
do?

34
00:02:03.000 --> 00:02:06.960
We're going to write it displays sub nav with additional information.

35
00:02:08.370 --> 00:02:12.720
Keep in mind here, I mentioned earlier that I think it's a good idea to write test descriptions that

36
00:02:12.720 --> 00:02:16.470
are not specific to the implementation that actually describe the user value.

37
00:02:16.680 --> 00:02:21.960
So when I'm using the word seven out here, I'm not literally saying a actual view sub nav component.

38
00:02:22.110 --> 00:02:26.670
I'm using sub nav in the more general user sense of a sub navigation menu.

39
00:02:27.150 --> 00:02:31.740
In fact, if we want to make this more explicit, let's actually write out displays sub navigation menu.

40
00:02:31.750 --> 00:02:33.240
So there is no confusion there.

41
00:02:33.600 --> 00:02:35.550
We are describing the value to the user.

42
00:02:35.940 --> 00:02:36.270
All right.

43
00:02:36.480 --> 00:02:39.750
So let's begin with our usual shallow mounting of our component.

44
00:02:39.750 --> 00:02:43.140
So content wrapper equals shallow amount of our main NAV.

45
00:02:44.250 --> 00:02:49.380
And we're again going to look for some kind of data test activity and I'm going to assign a value of

46
00:02:49.380 --> 00:02:50.040
sub nav.

47
00:02:50.190 --> 00:02:55.230
This does not exist anywhere in our component yet, but we're going to assume something will eventually

48
00:02:55.230 --> 00:02:56.100
exist, right?

49
00:02:56.280 --> 00:03:01.320
So we're kind of doing a half TDD half not to the approach yet because we do have our sub nav in here,

50
00:03:01.410 --> 00:03:03.180
but we don't have any actual activity on it.

51
00:03:03.540 --> 00:03:08.580
So I'm going to use my left keyword here because I am going to overwrite this later when I research

52
00:03:08.580 --> 00:03:09.300
for the sub now.

53
00:03:09.690 --> 00:03:12.720
So I'm going to say let's sub nav equals wrapper dot find.

54
00:03:12.720 --> 00:03:14.520
We're going to look for something within our template.

55
00:03:14.880 --> 00:03:17.370
And here I'm going to provide that square bracket syntax.

56
00:03:17.370 --> 00:03:23.640
I want to look for an attribute called data test and specifically that attribute with a value of sub

57
00:03:23.640 --> 00:03:24.150
nav.

58
00:03:24.570 --> 00:03:24.840
All right.

59
00:03:25.020 --> 00:03:28.410
And at this point, whatever we find should not exist.

60
00:03:28.410 --> 00:03:30.690
So in other words, we should not find it, right?

61
00:03:30.690 --> 00:03:37.530
So a little bit of a mind trip, but we should not have any element in our main NAV that has this attribute.

62
00:03:37.710 --> 00:03:42.030
So the find a method will return an object that kind of represents nothingness.

63
00:03:42.210 --> 00:03:49.410
And of course we can call the exists method on that object and it'll tell us a value of false if it

64
00:03:49.410 --> 00:03:54.270
is not able to find anything that matches this description, which at this point it should not.

65
00:03:54.690 --> 00:03:57.180
Okay, so how do we trigger the sub nav to exist?

66
00:03:57.330 --> 00:03:59.850
We want the user to interact with our login button.

67
00:04:00.150 --> 00:04:04.170
Well, we can actually copy the code that we have right here because it's going to be the exact same

68
00:04:04.710 --> 00:04:05.220
action.

69
00:04:05.220 --> 00:04:08.040
We're going to have the user click the login button.

70
00:04:09.180 --> 00:04:13.980
So as a reminder here, we are finding some element with a data test, a login button and we are triggering

71
00:04:14.010 --> 00:04:15.570
a click action, right?

72
00:04:15.570 --> 00:04:21.180
So whatever we are clicking on must have that at click a handler, which as a reminder is a shortcut

73
00:04:21.360 --> 00:04:22.740
for the VON Directive.

74
00:04:23.070 --> 00:04:28.410
Now remember, we're using the a wait keyword here because we need to wait until this process is done

75
00:04:28.530 --> 00:04:35.490
and until view re renders that component before we can check again for the now presence of a sub nav.

76
00:04:35.730 --> 00:04:39.810
But if we're using the a wait keyword here, that means that the test is asynchronous.

77
00:04:40.080 --> 00:04:42.630
So we have to add the async keyword right here.

78
00:04:43.770 --> 00:04:44.130
Okay.

79
00:04:44.430 --> 00:04:50.400
So at this point we have triggered a change in the component hopefully so we can research for the sub

80
00:04:50.400 --> 00:04:50.670
nav.

81
00:04:50.670 --> 00:04:54.150
So we're going to execute the exact same code we have right here in line 50.

82
00:04:54.330 --> 00:04:55.590
I'm just going to copy this.

83
00:04:55.980 --> 00:04:59.310
We do not need the LAT since we are just reassigning that somehow variable.

84
00:04:59.490 --> 00:05:03.710
I'm now going to ask view test utils to perform another search.

85
00:05:03.720 --> 00:05:07.680
Try again to find something with this data test attribute equal to sat nav.

86
00:05:07.860 --> 00:05:12.150
And now I should expect that that sub nav exists.

87
00:05:12.150 --> 00:05:13.170
Method should return.

88
00:05:13.170 --> 00:05:18.000
True, because at that point the view test utils should be able to find that attribute.

89
00:05:18.780 --> 00:05:19.080
All right.

90
00:05:19.350 --> 00:05:24.150
So let me go ahead and run NPM, run, test, colon, watch to run just in watch mode.

91
00:05:24.510 --> 00:05:26.370
And right now, our test is going to fail.

92
00:05:27.540 --> 00:05:32.210
Because of course, we are not going to be able to find the data, test it.

93
00:05:32.490 --> 00:05:36.240
Somehow notice here that we are failing on line number 57.

94
00:05:36.390 --> 00:05:41.640
And the reason we're not failing on line number of 50 and 51 is at this point, we're validating that

95
00:05:41.640 --> 00:05:45.090
view is not able to find an attribute with a data test of subset.

96
00:05:45.240 --> 00:05:50.230
And that is indeed the case because we have not added that data test attribute yet anywhere.

97
00:05:50.250 --> 00:05:51.480
So it's not found.

98
00:05:51.660 --> 00:05:53.340
So it should properly not exist.

99
00:05:53.580 --> 00:06:00.000
But where it is failing is where we expect it to fail, where we do expect it to exist after the user

100
00:06:00.000 --> 00:06:00.670
clicks the button.

101
00:06:00.700 --> 00:06:01.860
But it's nowhere to be found.

102
00:06:02.100 --> 00:06:06.570
So of course, the simple solution to this is to add our data test attribute to our expected element

103
00:06:06.570 --> 00:06:06.870
here.

104
00:06:06.870 --> 00:06:09.000
It's going to be my sub nav view component.

105
00:06:09.300 --> 00:06:10.260
So data test.

106
00:06:11.800 --> 00:06:12.760
Equals sub nav.

107
00:06:13.060 --> 00:06:18.730
Save that our tests should be run and we should get a passing suite and we do so just to very quickly

108
00:06:18.730 --> 00:06:25.150
review what is happening when the component is mounted for the very first time, is logged in, is going

109
00:06:25.150 --> 00:06:30.400
to be set to false, which means the sub nav will not render within the template, which means the date

110
00:06:30.400 --> 00:06:33.940
of test attribute attached to that sub will not render either.

111
00:06:34.210 --> 00:06:39.220
So view and view test utils will not be able to find it on lines 50 through 51.

112
00:06:39.580 --> 00:06:41.830
Then we're going to click the log in button.

113
00:06:41.980 --> 00:06:45.130
Once again, we're not going to manually change the data of the component.

114
00:06:45.130 --> 00:06:49.840
We're going to interact with the component the way the user will by clicking the log in button that

115
00:06:49.840 --> 00:06:54.130
will internally change some details about the component that we don't care about in the tests.

116
00:06:54.340 --> 00:06:59.050
But that should trigger the state of the user being logged in, which should make the sub name appear

117
00:06:59.350 --> 00:07:00.070
behind the scenes.

118
00:07:00.070 --> 00:07:05.650
We know that we're going to trigger this method which is going to flip the value of the as logged in

119
00:07:05.650 --> 00:07:11.200
data property to true that will force the template to render and now because is logged in is set to

120
00:07:11.200 --> 00:07:11.590
true.

121
00:07:11.740 --> 00:07:17.500
We will have a sub nav view component, which means we will have a data test attribute somewhere in

122
00:07:17.500 --> 00:07:18.010
our template.

123
00:07:18.220 --> 00:07:21.850
So the view test utils will be able to find it with the find method.

124
00:07:22.060 --> 00:07:26.920
And then because it's a valid object rather than nothing, the exists method will return.

125
00:07:26.920 --> 00:07:27.280
True.

126
00:07:27.760 --> 00:07:28.060
Right.

127
00:07:28.360 --> 00:07:30.040
That's all there is to cover in this lesson.

128
00:07:30.040 --> 00:07:35.020
I feel pretty good with our coverage for Main NAV and we can move on to the next section of the course.
