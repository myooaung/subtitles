WEBVTT
1
00:00:00.500 --> 00:00:01.310
All right.

2
00:00:01.310 --> 00:00:07.970
So now that we have installed our required NPM libraries, we can configure the font awesome icons to

3
00:00:07.970 --> 00:00:09.560
work with our view application.

4
00:00:09.800 --> 00:00:13.250
We're actually going to register them as global components.

5
00:00:13.430 --> 00:00:18.200
And I want to talk about the differences between global components versus local components.

6
00:00:18.560 --> 00:00:24.380
So what I have opened here is main navigate view and we see here that we are importing our three different

7
00:00:24.380 --> 00:00:29.750
components action button, profile, image and sub nav and we are registering them here with our main

8
00:00:29.750 --> 00:00:35.540
nav component using this components key, which allows us to use these components within the template

9
00:00:35.540 --> 00:00:36.410
of the main NAV.

10
00:00:36.650 --> 00:00:42.890
This is an example of local components because we are registering these components to be used with a

11
00:00:42.920 --> 00:00:46.940
within a local scope, within a singular scope, within a boundary.

12
00:00:46.940 --> 00:00:47.210
Right.

13
00:00:47.330 --> 00:00:51.440
In other words, we cannot use these components outside of the main nav file.

14
00:00:51.590 --> 00:00:56.720
If we wanted to use these components in another file, we'd have to follow the same boilerplate code.

15
00:00:56.720 --> 00:01:01.790
We'd have to import the component we want to use registered as a child component using the components

16
00:01:01.790 --> 00:01:04.520
key, and then we use it in that respective component.

17
00:01:04.520 --> 00:01:06.530
So each time we have to duplicate that code.

18
00:01:06.680 --> 00:01:11.990
And so we're limiting the usage of these child components to the local component, to the one that we

19
00:01:11.990 --> 00:01:13.520
are actually using these components.

20
00:01:13.520 --> 00:01:17.120
Again, that's in comparison to a global component.

21
00:01:17.420 --> 00:01:21.170
What we can do is register a component at the top level of the View app.

22
00:01:21.170 --> 00:01:27.050
When we are setting up the whole View app and we're going to be able to use that component in any other

23
00:01:27.050 --> 00:01:30.110
view component without having to go through this process.

24
00:01:30.350 --> 00:01:35.180
In the JavaScript section of the component, we're going to be able to just go to a template of any

25
00:01:35.180 --> 00:01:38.330
Vue component and reuse a global component.

26
00:01:38.450 --> 00:01:39.580
We don't even have to import it.

27
00:01:39.890 --> 00:01:44.900
So of course, one disadvantage of that approach is that you may not be sure where that global component

28
00:01:44.900 --> 00:01:48.740
is coming from because it's just going to be something we right here, you know, some global component

29
00:01:48.980 --> 00:01:51.260
and somebody may not know where it's coming from.

30
00:01:51.260 --> 00:01:53.030
It may be coming from one library or another.

31
00:01:53.300 --> 00:01:54.350
That's one disadvantage.

32
00:01:54.470 --> 00:01:58.340
But of course, the big advantage is that it spares us writing a whole bunch of code down below.

33
00:01:59.150 --> 00:02:00.680
Where would you use global components?

34
00:02:00.890 --> 00:02:04.250
Well, typically you're going to use it when you have something that truly is used.

35
00:02:04.250 --> 00:02:06.980
Very often you need it in a lot of different places.

36
00:02:07.160 --> 00:02:11.270
It's typically going to be something small and lightweight, such as an icon service.

37
00:02:11.480 --> 00:02:16.610
That way you can use an icon of this values, an icon in that file and not have to go through that boilerplate

38
00:02:16.610 --> 00:02:20.720
of re importing re-import the disadvantage of global components.

39
00:02:21.470 --> 00:02:23.960
Because you might be saying, well, why don't we just make everything global?

40
00:02:23.960 --> 00:02:26.690
Why don't we just make any component reusable in any other component?

41
00:02:27.020 --> 00:02:30.950
Well, because that's actually going to bloat or increase the size of your view bundle.

42
00:02:31.160 --> 00:02:36.140
The more that you limit the scope of where things are used, the more the builder knows how to optimize

43
00:02:36.140 --> 00:02:38.600
where certain imports are needed and where they're not.

44
00:02:38.780 --> 00:02:44.150
And if it splits your view up into smaller files, it can optimize and say, this page needs this,

45
00:02:44.240 --> 00:02:45.500
but it doesn't need that.

46
00:02:45.740 --> 00:02:51.740
And so we typically will have better build architectures when we don't bloat and put a lot of unnecessary

47
00:02:51.740 --> 00:02:53.540
things in at the top level.

48
00:02:53.690 --> 00:02:57.920
If we put something as a global component, we're basically indicating that this is going to be something

49
00:02:57.920 --> 00:03:01.520
that's so common and so reusable that it's basically going to be used everywhere.

50
00:03:01.640 --> 00:03:07.250
If we stuff everything in that global component collection, well, then every every file on any page

51
00:03:07.250 --> 00:03:10.730
in our view that they use as anything will use those components, even if they're not actually being

52
00:03:10.730 --> 00:03:11.540
used in a template.

53
00:03:11.750 --> 00:03:13.430
And that doesn't lead to the best bundle.

54
00:03:13.700 --> 00:03:15.200
So it's a mixed bag, right?

55
00:03:15.200 --> 00:03:17.120
There's advantages and there's disadvantages.

56
00:03:17.270 --> 00:03:22.070
But for something like Font Awesome, which I anticipate us using in a lot of different places, that's

57
00:03:22.070 --> 00:03:22.700
pretty lightweight.

58
00:03:22.880 --> 00:03:27.350
I think it's okay to add it as a global component and also gives us, of course, the opportunity to

59
00:03:27.350 --> 00:03:29.270
talk about global components in the first place.

60
00:03:29.360 --> 00:03:29.660
All right.

61
00:03:29.960 --> 00:03:31.400
So what are we going to do here?

62
00:03:31.400 --> 00:03:35.960
Well, we are going to go to a file called Main that J.

63
00:03:35.960 --> 00:03:39.200
S This is the bootstrapping of our view application.

64
00:03:39.200 --> 00:03:40.820
This is where everything kicks off.

65
00:03:41.000 --> 00:03:42.920
As far as the launching of The View app.

66
00:03:43.130 --> 00:03:47.690
As a reminder, what we're doing here is importing the create app function from view, and then we're

67
00:03:47.690 --> 00:03:53.150
importing our most top level component, the parent of all parents, the top of the hierarchy, the

68
00:03:53.150 --> 00:03:55.310
top of the pyramid, our app component.

69
00:03:55.580 --> 00:04:00.890
We're creating a view app starting from that app component, and then we're mounting it into a div in

70
00:04:00.890 --> 00:04:03.650
the HTML page that has an ID of app.

71
00:04:03.860 --> 00:04:04.100
All right.

72
00:04:04.100 --> 00:04:07.040
As a reminder, that HTML page is in the public folder.

73
00:04:07.040 --> 00:04:09.140
It has a div with an idea of app.

74
00:04:09.140 --> 00:04:11.210
This is where we're telling the view app to hook into.

75
00:04:11.900 --> 00:04:17.390
So because we want our font awesome icons to be globally available, we're going to register them here.

76
00:04:17.420 --> 00:04:22.790
We're going to make the whole view app aware of them right here, and that's going to allow it to cascade

77
00:04:22.790 --> 00:04:28.880
the knowledge and that global component to any other component that is within app within our larger

78
00:04:28.880 --> 00:04:31.010
view hierarchy of components.

79
00:04:31.370 --> 00:04:36.350
So we're going to begin by importing three imports from the three libraries that we installed in the

80
00:04:36.350 --> 00:04:37.010
previous lesson.

81
00:04:37.280 --> 00:04:43.940
We're going to start by importing font, awesome icon, capital F and I and this is going to come from

82
00:04:43.940 --> 00:04:47.450
the for awesome library called Vue Font Awesome.

83
00:04:48.470 --> 00:04:50.810
Next line, we're going to import another named export.

84
00:04:50.990 --> 00:04:59.570
This one is an object called library and that's going to come from four awesome font, awesome SVG core.

85
00:05:00.060 --> 00:05:00.660
CVG Court.

86
00:05:01.230 --> 00:05:02.610
Just to give you a little bit of context.

87
00:05:02.760 --> 00:05:06.960
Library is an object that you can almost think of it like a library in the real world where a library

88
00:05:06.960 --> 00:05:08.100
is a collection of books.

89
00:05:08.370 --> 00:05:11.490
In this case, our library is a collection of available icons.

90
00:05:11.520 --> 00:05:14.460
So we're importing a library that is starting out as empty.

91
00:05:14.610 --> 00:05:19.630
And what we need to do is register any icon that we may want to use with this library.

92
00:05:19.650 --> 00:05:21.120
I'll show you that syntax in just a second.

93
00:05:21.420 --> 00:05:26.460
Then I want to import the actual icon that I want to make globally available.

94
00:05:26.520 --> 00:05:29.340
We're not going to make every single font awesome icon available.

95
00:05:29.460 --> 00:05:32.790
We're just going to start with that search icon, that magnifying glass.

96
00:05:33.060 --> 00:05:39.420
So I'm going to import a named export called F, a search with a capital S, and this is going to come

97
00:05:39.420 --> 00:05:46.570
from the for awesome library called free dash, solid dash SVG dash icons.

98
00:05:46.650 --> 00:05:47.010
All right.

99
00:05:47.340 --> 00:05:51.250
So it's going to follow a similar naming convention for all of these icons.

100
00:05:51.270 --> 00:05:54.630
It's always going to begin with F a, which is short for font.

101
00:05:54.660 --> 00:05:58.140
Awesome, followed by the name of that icon.

102
00:05:58.290 --> 00:06:03.720
And the name is going to match the exact name of the icon as you'll find it on the font awesome website.

103
00:06:03.930 --> 00:06:08.400
So you can use that website to start your search and see the actual image in your browser and then import

104
00:06:08.400 --> 00:06:10.740
the similarly named icon.

105
00:06:10.890 --> 00:06:12.930
Import from this library.

106
00:06:13.140 --> 00:06:14.520
In fact, you don't have to do this.

107
00:06:14.520 --> 00:06:20.010
But what I'm going to do is press control, click into this f search to go into the internal library

108
00:06:20.010 --> 00:06:24.540
definitions and you're going to see all of the available find awesome icons here.

109
00:06:24.570 --> 00:06:30.000
So we have things like search, search, dollar, and here is a school f, a school F, a screwdriver

110
00:06:30.660 --> 00:06:31.830
f a ruler right through.

111
00:06:31.850 --> 00:06:33.870
There's all kinds of different available icons here.

112
00:06:33.870 --> 00:06:36.480
If I scroll down, you can see there's literally more than a thousand here.

113
00:06:37.710 --> 00:06:39.780
So we're going to import just the ones we need for now.

114
00:06:39.960 --> 00:06:41.580
All we need is search.

115
00:06:42.000 --> 00:06:42.330
Okay.

116
00:06:42.540 --> 00:06:45.270
So two more lines that we need to add to this file.

117
00:06:45.570 --> 00:06:50.310
The next thing we need to do, as I mentioned, is registering our search icon with our library.

118
00:06:50.430 --> 00:06:52.830
Our library is our collection of available icons.

119
00:06:53.100 --> 00:06:57.990
So on this library object, there is a method called ADD pretty good name for method.

120
00:06:57.990 --> 00:07:05.940
We are adding a icon or a icon definition and I for now just want to add the F8 search icon to my library.

121
00:07:06.120 --> 00:07:11.100
Now by itself we have not yet connected anything to view yet we have just set up the infrastructure

122
00:07:11.100 --> 00:07:13.410
to have a library with one icon available.

123
00:07:13.620 --> 00:07:18.000
Now we have to connect that library to our actual view app.

124
00:07:18.330 --> 00:07:22.890
So here on this line where we are creating the view up and mounting before the Mount method, I want

125
00:07:22.890 --> 00:07:25.380
to call another method called component.

126
00:07:25.710 --> 00:07:27.540
So I'm going to call that method component.

127
00:07:27.540 --> 00:07:31.020
I'm going to invoke it and then I'm going to call mount on the return value.

128
00:07:31.320 --> 00:07:37.380
So this is actually a special design pattern in case you're unfamiliar, where the methods that are

129
00:07:37.380 --> 00:07:41.790
available on this view object will always return the same object itself.

130
00:07:42.030 --> 00:07:48.630
And the benefit of that design is that we can invoke as many methods in a row and we're can rest assured

131
00:07:48.630 --> 00:07:50.850
that we're always getting the same app object back.

132
00:07:50.850 --> 00:07:54.840
So we're going to get an app object we're going to call the component method on it.

133
00:07:55.080 --> 00:07:59.730
That is going to give me back the app object itself, which is what allows me to call mount on that,

134
00:07:59.730 --> 00:08:02.490
on it the exact same way as we had it a minute ago.

135
00:08:03.150 --> 00:08:09.230
So we have this component method that is going to register a global component within our whole view

136
00:08:09.240 --> 00:08:09.510
app.

137
00:08:09.750 --> 00:08:16.560
And this method takes two arguments and it functions very similarly to the way our components key works

138
00:08:16.590 --> 00:08:22.410
in any typical view file so far where we have registered local components, the first argument is going

139
00:08:22.410 --> 00:08:28.470
to be a string that represents what you want the name of the component to be whenever we are using it

140
00:08:28.470 --> 00:08:29.430
throughout the app.

141
00:08:29.490 --> 00:08:32.820
So this is what we're going to be putting within our template, within our HTML.

142
00:08:33.120 --> 00:08:37.560
So I'm going to call our component font dash awesome dash icon.

143
00:08:37.560 --> 00:08:40.890
This name is up to me, but this is a common community convention.

144
00:08:40.980 --> 00:08:43.620
This is what we're going to be using in our HTML file.

145
00:08:43.630 --> 00:08:49.650
So anytime we are in our components in the template section, we're going to be writing font dash,

146
00:08:49.650 --> 00:08:50.880
awesome dash icon.

147
00:08:51.030 --> 00:08:53.310
That's basically what we declared there with the first argument.

148
00:08:53.940 --> 00:08:59.520
The second argument, of course, is the actual component that's going to render when we use that syntax

149
00:08:59.520 --> 00:09:04.590
and that is going to be our font awesome icon that we imported from line number two.

150
00:09:04.760 --> 00:09:04.940
Right?

151
00:09:05.250 --> 00:09:06.900
And that's all there is to do in this lesson.

152
00:09:06.900 --> 00:09:13.200
This configures a global component, a font awesome icon and it's available library of icons will include

153
00:09:13.200 --> 00:09:15.150
just the search icon.

154
00:09:15.450 --> 00:09:17.430
So we have everything we need to get started.

155
00:09:17.430 --> 00:09:22.560
In the very next lesson, we're going to actually use font awesome to render that search icon that magnifying

156
00:09:22.560 --> 00:09:23.910
glass in our subnet.
