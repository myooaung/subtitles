1
00:00:00,270 --> 00:00:04,470
Welcome to the next section of the course which is entitled Reactivity.

2
00:00:04,770 --> 00:00:10,320
In this section, we're actually going to take a break from our big project, from our job search website,

3
00:00:10,590 --> 00:00:16,500
and we're going to explore a lot of view reactivity, ideas in depth, especially as they pertain to

4
00:00:16,500 --> 00:00:20,610
the composition API that was introduced in Vue three point out.

5
00:00:20,940 --> 00:00:27,270
Now to give you a big picture overview, what the composition API gives us is a bunch of helper functions

6
00:00:27,480 --> 00:00:34,410
from the View Library that allow us to emulate the same reactivity ideas that we've previously explored,

7
00:00:34,650 --> 00:00:38,790
but do so outside the confines of a specific component.

8
00:00:39,090 --> 00:00:44,430
So now we can use these functions in plain JavaScript files, for example, but get the same benefits

9
00:00:44,430 --> 00:00:45,720
of view reactivity.

10
00:00:45,990 --> 00:00:50,550
And so throughout the upcoming lessons, we are going to be writing code, we're going to be doing it

11
00:00:50,550 --> 00:00:55,620
in our Playground Digest file, which is our scratch pad for just experimenting with ideas.

12
00:00:55,740 --> 00:01:00,960
And we're going to see how we can incorporate existing view functions, but not necessarily within the

13
00:01:00,960 --> 00:01:02,250
context of a web app.

14
00:01:02,700 --> 00:01:09,750
So let's begin with an actual review of what reactivity is and how JavaScript doesn't necessarily capture

15
00:01:09,750 --> 00:01:13,950
all of that, and how view can help us capture that concept of reactivity.

16
00:01:14,220 --> 00:01:19,710
So what I actually have open here is a Google Sheets spreadsheet, and this is identical to a piece

17
00:01:19,710 --> 00:01:25,530
of software like Excel on a Windows Machine or numbers if you're on a mac computer.

18
00:01:25,710 --> 00:01:30,630
This is a basic spreadsheet software, and this is actually one of the best examples I've ever seen

19
00:01:30,630 --> 00:01:31,710
of reactivity.

20
00:01:32,040 --> 00:01:36,360
So what I'm going to do here is place a couple of values in a bunch of cells.

21
00:01:36,360 --> 00:01:38,890
And if you have never played around with spreadsheet software, don't worry.

22
00:01:38,890 --> 00:01:40,170
It's it's a pretty simple idea.

23
00:01:40,170 --> 00:01:45,300
I'm sure you'll grasp it quickly in this cell right here on the top left corner cell a one.

24
00:01:45,510 --> 00:01:50,550
I'm going to put the number one and in the cell to the right of it, I'm going to put another value,

25
00:01:50,550 --> 00:01:51,270
which is two.

26
00:01:51,870 --> 00:01:52,230
All right.

27
00:01:52,550 --> 00:01:57,840
I'm just going to center these values right here, if I can, just so they're pretty easy for us to

28
00:01:57,840 --> 00:01:58,110
see.

29
00:01:59,070 --> 00:01:59,430
All right.

30
00:01:59,640 --> 00:02:01,940
And in this cell right here, see one?

31
00:02:02,250 --> 00:02:09,450
What I want to do is create a formula that's going to add the two numbers on the left hand side.

32
00:02:09,810 --> 00:02:13,440
So the way we do this in a program like Google Sheets is we put an equal sign.

33
00:02:13,650 --> 00:02:15,990
We use a function in Google sheets called sum.

34
00:02:16,170 --> 00:02:20,130
And here we can specify the cells that we want to sum the values of.

35
00:02:20,400 --> 00:02:26,820
So I'm going to click into cell A1, put a comma here and specify cell be one, closed my sum function

36
00:02:27,000 --> 00:02:30,300
and we're going to get a value of three to be expected, right?

37
00:02:30,330 --> 00:02:31,470
This is basic math.

38
00:02:31,500 --> 00:02:36,120
Hopefully you're not learning this for the very first time, but here is where the reactivity element

39
00:02:36,120 --> 00:02:38,580
of Google sheets comes into play.

40
00:02:38,910 --> 00:02:45,120
If we look at this cell right here, it's actually maintaining this idea of a permanent connection to

41
00:02:45,120 --> 00:02:46,870
cells A1 and B1.

42
00:02:46,890 --> 00:02:51,420
It's not just the static, constant final value of three.

43
00:02:51,630 --> 00:02:56,070
It's actually retaining the idea of the sum of the two cells to the left.

44
00:02:56,430 --> 00:03:02,130
And thus, if I change any of these values, take a look at what's going to happen in cell C one.

45
00:03:02,430 --> 00:03:08,610
So, for example, if I go to my cell and I decided to change this to eight, as soon as I press enter

46
00:03:08,610 --> 00:03:14,250
to lock this value into the cell, you'll notice that my value in C1 changes to ten.

47
00:03:14,910 --> 00:03:16,230
So what is going on here?

48
00:03:16,260 --> 00:03:24,060
Well, the cell here has recalculated or reacted to the change here because it knows to watch for the

49
00:03:24,060 --> 00:03:31,260
values in A1 and B1 and whenever either one of them changes, it re calculates the subsequent sum.

50
00:03:31,500 --> 00:03:31,800
Right.

51
00:03:32,430 --> 00:03:38,130
So similarly, if I go into cell B one and I make this four, you'll see this evaluate to 12.

52
00:03:38,130 --> 00:03:38,430
Right?

53
00:03:38,610 --> 00:03:44,880
This is an example of reactivity because our cell C1 is reacting to a change elsewhere.

54
00:03:45,030 --> 00:03:49,650
It's reacting to an event, an occurrence of something somewhere else in the spreadsheet.

55
00:03:49,650 --> 00:03:49,920
Right.

56
00:03:50,100 --> 00:03:54,560
And when it comes to things like data analysis, this is super helpful because we don't have to go back

57
00:03:54,570 --> 00:04:01,040
to cell C one and re execute it every time we have this dynamic calculation that automatically recalculate

58
00:04:01,920 --> 00:04:02,910
whenever something happens.

59
00:04:03,060 --> 00:04:06,780
It's a very similar idea to what we have with computed properties in view.

60
00:04:07,020 --> 00:04:11,850
For example, many times throughout the course we've connected our computed properties to data properties

61
00:04:12,000 --> 00:04:17,610
and we saw that whenever the data property changed, the computed property re-evaluated itself.

62
00:04:17,850 --> 00:04:24,840
So these concepts again already exist in view and the composition API gives us more of an API, more

63
00:04:24,840 --> 00:04:30,690
available functions to emulate those same ideas, but outside the scope of components by themselves.

64
00:04:30,810 --> 00:04:31,230
All right.

65
00:04:31,500 --> 00:04:36,780
So we're going to separate this idea of reactivity specifically from being connected to our view configuration

66
00:04:36,780 --> 00:04:37,290
objects.

67
00:04:37,290 --> 00:04:40,560
That's the core benefit of the view composition API.

68
00:04:40,890 --> 00:04:47,400
So what I'd like to do now is the transition to the code, and I want to open our Playground Digest

69
00:04:47,400 --> 00:04:47,790
file.

70
00:04:47,790 --> 00:04:52,800
This is as a reminder, our little scratch pad or little experimental file where we just write code

71
00:04:52,800 --> 00:04:55,770
to experiment with with various features of JavaScript and view.

72
00:04:56,010 --> 00:04:58,140
And if you have any code in here, feel free to delete it.

73
00:04:58,140 --> 00:04:59,700
We're going to start from scratch here.

74
00:04:59,700 --> 00:05:04,290
I want to compare what we just saw in Google sheets with how JavaScript works.

75
00:05:04,290 --> 00:05:08,100
So I'm going to open up my terminal here just so I can run a node file.

76
00:05:09,790 --> 00:05:11,890
Right here, and let's write out some quick code.

77
00:05:11,890 --> 00:05:16,960
So I'm going to declare a variable and I'm going to call it a and the reason I'm using a letter here

78
00:05:16,960 --> 00:05:19,570
is because I intend to change the value of a in just a moment.

79
00:05:19,930 --> 00:05:24,940
And just like we did in the spreadsheet, I'm going to make a equal to one and I'm going to have another

80
00:05:24,940 --> 00:05:29,950
variable called B, which I'll make equal to two, and then I'll declare a variable C, which I'll make

81
00:05:29,950 --> 00:05:34,540
equal to the sum of A plus B, and I'm going to console.log the value of C.

82
00:05:35,710 --> 00:05:40,390
So as you might expect, when we run this file and we output the value of C, we're going to get the

83
00:05:40,390 --> 00:05:42,880
sum of A and B, which is the sum of one and two.

84
00:05:43,180 --> 00:05:46,270
So we're going to get the value three output, right?

85
00:05:46,270 --> 00:05:50,800
So on initial first glance, this works exactly the same way as it does in the spreadsheet.

86
00:05:51,100 --> 00:05:56,470
But actually what JavaScript does behind the scenes is it does not establish this relationship with

87
00:05:56,470 --> 00:06:02,320
the C variable in terms of saying C is always going to be equal to whatever A and B is.

88
00:06:02,320 --> 00:06:03,910
That's not how JavaScript works.

89
00:06:04,180 --> 00:06:09,190
Instead, the way JavaScript works is it evaluates the right side of the equals sign first.

90
00:06:09,370 --> 00:06:11,650
So it looks for the value of a in our program.

91
00:06:11,650 --> 00:06:13,930
It knows that the a variable is equal to one.

92
00:06:14,650 --> 00:06:16,720
It knows that the B variable is equal to two.

93
00:06:17,110 --> 00:06:18,610
So it comes up with one plus two.

94
00:06:18,820 --> 00:06:24,700
It evaluates the right side A to a dynamic or to a value of three, a final value of three, and it

95
00:06:24,700 --> 00:06:27,040
assigns the variable C to three.

96
00:06:27,250 --> 00:06:32,710
So once C is assigned to three, C doesn't have any kind of connection to the original values of A and

97
00:06:32,710 --> 00:06:36,310
B and B were just placeholders for actual numbers.

98
00:06:36,580 --> 00:06:44,560
So thus if I change, for example, my value A to eight and we console.log, the value of C C is not

99
00:06:44,560 --> 00:06:47,890
going to change to reflect the value of eight plus three.

100
00:06:47,890 --> 00:06:52,870
Now the new value of a plus, the existing value of B, it's not going to update.

101
00:06:53,020 --> 00:06:57,610
Instead, it's going to be its original value at the time that C was assigned, which is three.

102
00:06:57,910 --> 00:07:04,010
So if I re execute this code, we're going to see if the C variable is still equal to three online.

103
00:07:04,010 --> 00:07:09,970
At number seven, the changing of either the A variable or even the B variable, none of this is going

104
00:07:09,970 --> 00:07:12,370
to edit or alter the value of C.

105
00:07:12,460 --> 00:07:14,110
So C is not reactive.

106
00:07:14,110 --> 00:07:20,050
It is not reacting to the changes in A and B, because this syntax in JavaScript does not mean connect

107
00:07:20,050 --> 00:07:24,460
C to the permanent idea of whatever A's plus whatever B is.

108
00:07:24,550 --> 00:07:30,040
It just simply does a one time some of the present value of A plus the present value of B.

109
00:07:30,250 --> 00:07:34,690
So that is the difference between vanilla JavaScript and what we just saw in Google Sheets and in the

110
00:07:34,690 --> 00:07:35,380
upcoming lessons.

111
00:07:35,380 --> 00:07:40,750
We're going to see how we can use some helper functions from the Use Composition API to start mimicking

112
00:07:40,750 --> 00:07:44,350
that behavior, that reactivity that we just saw in Google Sheets.

113
00:07:44,620 --> 00:07:45,370
So I'll see you there.
