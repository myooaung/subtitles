WEBVTT
1
00:00:00.460 --> 00:00:05.170
All right, so let's start wiring up our first Vue component tests.

2
00:00:05.190 --> 00:00:10.780
We currently have two components in our app, app, dot view and main NAV that view.

3
00:00:10.990 --> 00:00:14.410
So let's write our first test for the main nav component.

4
00:00:14.650 --> 00:00:21.340
So right here within my tests directory, I have a unit directory and here I want to create yet another

5
00:00:21.340 --> 00:00:23.890
folder which I'm going to call components.

6
00:00:24.280 --> 00:00:29.230
My goal here is to mimic the directory structure of my SLC folder.

7
00:00:29.440 --> 00:00:35.500
Eventually I'm going to have more than just unit tests and within my unit tests I'm going to have tests

8
00:00:35.500 --> 00:00:37.150
for more than just components.

9
00:00:37.330 --> 00:00:41.020
So I want to make sure I isolate those different parts of my app that I'm testing.

10
00:00:41.260 --> 00:00:46.240
So I'm going to create a components directory here, just like an S or C and within components, I'm

11
00:00:46.240 --> 00:00:50.290
typically going to create one test file per view component.

12
00:00:50.530 --> 00:00:53.380
So let's create our test file for our main nav component.

13
00:00:53.590 --> 00:00:59.140
So right in here, I'm going to create a file called Main NAV dot test dot.

14
00:00:59.140 --> 00:01:01.240
J.S. All right.

15
00:01:01.240 --> 00:01:02.950
Notice how we've named the file.

16
00:01:02.950 --> 00:01:07.920
It has the exact same name as our component, except our extension is dot test.

17
00:01:08.290 --> 00:01:16.180
J.S. Remember, we need our test files to have either a dot test jazz or dot spec just extension in

18
00:01:16.180 --> 00:01:19.180
order for just to recognize them as test files.

19
00:01:19.900 --> 00:01:26.050
So remember, just is going to make its functions available to us immediately when we run our tests.

20
00:01:26.050 --> 00:01:31.600
So we don't need to import anything from Gest, but we do need to import a extra method that we're going

21
00:01:31.600 --> 00:01:34.660
to use from a library called Vue Test Utils.

22
00:01:34.960 --> 00:01:40.990
The View Test Utils Library provides several utility functions for testing Vue components.

23
00:01:41.290 --> 00:01:46.750
It's methods allow us to mount and interact with Vue components outside the browser.

24
00:01:47.020 --> 00:01:51.640
So when I use the word amount, what I really mean is get it up and running.

25
00:01:51.700 --> 00:01:57.190
When I mount a view component, I'm going to simulate that component as if it exists in the real world,

26
00:01:57.430 --> 00:02:01.420
except we're going to be able to interact with it outside of the browser.

27
00:02:01.420 --> 00:02:04.090
We're going to treat it just like a plain JavaScript object.

28
00:02:04.300 --> 00:02:11.080
We're going to see how we can see that components output such as its HTML, such as the text that it

29
00:02:11.080 --> 00:02:14.830
renders, but all outside of our visual browser environment.

30
00:02:14.830 --> 00:02:20.980
So I'm going to need to import a function from the view tested to library called Mount.

31
00:02:21.190 --> 00:02:27.130
So right here I'm going to import a named export called Mount and it's going to come from a library

32
00:02:27.130 --> 00:02:32.050
called Act View Slash Test Dash utils.

33
00:02:32.050 --> 00:02:32.380
All right.

34
00:02:32.470 --> 00:02:37.540
And in case you're curious about this little prefix, that's totally normal, that's just an NPM convention

35
00:02:37.750 --> 00:02:43.300
to recognize that the test utils library belongs to the View organization.

36
00:02:43.450 --> 00:02:48.910
That's just to avoid any confusion with any other NPM package that may also be called test utils.

37
00:02:48.910 --> 00:02:49.210
All right.

38
00:02:49.330 --> 00:02:55.630
And this package is automatically available in our project because when we were using The View Seelye,

39
00:02:55.720 --> 00:02:58.660
we specified that we would like to include unit testing.

40
00:02:58.780 --> 00:03:02.500
So that view included this package as part of our dependencies.

41
00:03:03.250 --> 00:03:09.070
So now that I have my mount function imported, I also need to import the component that I'm going to

42
00:03:09.070 --> 00:03:11.320
be testing, which of course is Main NAV.

43
00:03:11.560 --> 00:03:16.000
So right here I'm going to import Main now and where can we find it?

44
00:03:16.000 --> 00:03:21.640
It is inside our SLC directory which I can reference with that at sign and then inside components.

45
00:03:21.940 --> 00:03:24.190
I'm going to be able to find main nav.

46
00:03:25.750 --> 00:03:25.990
All right.

47
00:03:25.990 --> 00:03:29.200
In fact, I'm going to add the doc view extension just to be extra safe here.

48
00:03:29.350 --> 00:03:32.400
All right, so now we've imported our main nav component.

49
00:03:32.410 --> 00:03:34.540
Let's create a new described block.

50
00:03:34.750 --> 00:03:36.910
So we're going to use just described function.

51
00:03:37.120 --> 00:03:40.330
The first argument, of course, is a string that describes what we're testing.

52
00:03:40.450 --> 00:03:43.090
We are going to be testing our main NAV component.

53
00:03:43.300 --> 00:03:48.400
And the reason I'm repeating that here is if you can imagine a big just test suite running, we're going

54
00:03:48.400 --> 00:03:49.600
to have lots of components.

55
00:03:49.750 --> 00:03:55.570
And so this creates a nice level of organization in my test output where I can see the tests that belong

56
00:03:55.690 --> 00:04:01.060
to the main nav component rather than having them all at the same level of indentation and being confused

57
00:04:01.060 --> 00:04:03.300
about which test belongs to which component.

58
00:04:03.310 --> 00:04:06.730
So we're going to start with this top level organization of May now.

59
00:04:07.000 --> 00:04:09.070
Then we're going to provide our function.

60
00:04:10.750 --> 00:04:15.370
And here I'm going to skip any additional described blocks because there's no nested information I want

61
00:04:15.370 --> 00:04:15.850
to provide.

62
00:04:16.000 --> 00:04:19.090
I'm going to jump straight to my test and I'm going to write it.

63
00:04:19.480 --> 00:04:22.330
And then let's think about what it is that we want to test here.

64
00:04:22.570 --> 00:04:28.600
So ideally, as I've mentioned earlier, the test descriptions should describe the user value and or

65
00:04:28.600 --> 00:04:31.150
the technical purpose of a piece of code.

66
00:04:31.330 --> 00:04:36.910
Without specifying the implementation or getting too much into the nitty gritty details of how it is

67
00:04:36.910 --> 00:04:37.660
going to be built.

68
00:04:37.930 --> 00:04:43.540
So you can imagine a product owner or another developer reading this file and imagine them reading our

69
00:04:43.540 --> 00:04:45.730
described blocks and our IT functions.

70
00:04:45.910 --> 00:04:51.670
And if you can describe what the component is doing in a way that a non-technical person would understand,

71
00:04:51.790 --> 00:04:54.220
I think that's the best way to structure our tests.

72
00:04:54.520 --> 00:04:59.980
So from a business perspective or from a business logic perspective, what is the responsibility of

73
00:04:59.980 --> 00:05:00.730
the main now?

74
00:05:00.940 --> 00:05:05.230
Well, obviously it's to display a bunch of menu items, but we haven't built that functionality out

75
00:05:05.230 --> 00:05:05.440
yet.

76
00:05:05.710 --> 00:05:09.610
The first responsibility of this is to display our company name.

77
00:05:09.730 --> 00:05:11.190
So I'm just going to write that right here.

78
00:05:11.200 --> 00:05:13.090
It displays the company name.

79
00:05:13.810 --> 00:05:16.810
Notice I'm describing the value of this component to the user.

80
00:05:16.960 --> 00:05:20.380
I'm not talking about how I'm going to implement this solution, right?

81
00:05:20.710 --> 00:05:26.560
Then of course, as we know, our IT function is going to take a second argument of a arrow function.

82
00:05:26.560 --> 00:05:27.910
So I'm going to create that right here.

83
00:05:28.240 --> 00:05:31.480
And here is where we can mount our main nav component.

84
00:05:31.690 --> 00:05:35.890
So we're going to use that mount function that we imported from the view test utils.

85
00:05:36.130 --> 00:05:36.910
We're going to invoke it.

86
00:05:37.090 --> 00:05:41.770
And as you might have guessed, the very first argument that we give it is going to be the component

87
00:05:41.770 --> 00:05:44.680
that we would like to mount to get up and running.

88
00:05:44.920 --> 00:05:47.860
And that, of course, is going to be our main nav component.

89
00:05:48.640 --> 00:05:53.230
So I'm going to provide main nav as my first argument, and this is what our code currently looks like.

90
00:05:53.530 --> 00:05:59.020
This is going to return a special object and we typically are going to give it the constant name in

91
00:05:59.020 --> 00:06:00.370
our test of wrapper.

92
00:06:00.550 --> 00:06:03.910
So I'm just going to write out const wrapper equals.

93
00:06:04.150 --> 00:06:06.330
Now the name is totally up to you.

94
00:06:06.340 --> 00:06:11.650
The reason the view documentation recommends wrapper and the reason why a lot of developers use it is

95
00:06:11.650 --> 00:06:13.990
because it's descriptive of what Mount returns.

96
00:06:14.500 --> 00:06:20.860
Mount returns a object that is a wrapper around the view component in this case Main NAV.

97
00:06:21.010 --> 00:06:27.460
It's not just main now by itself, it's main nav wrapped with a bunch of extra functionality that the

98
00:06:27.460 --> 00:06:30.610
View Test Utils library gives to us that we can utilize.

99
00:06:30.700 --> 00:06:36.370
And wrapper reminds us that it's an additional layer on top, an additional sheet above an additional

100
00:06:36.370 --> 00:06:40.450
wrapper above the main nav view component by itself.

101
00:06:40.450 --> 00:06:44.650
It's not just the component, it's the component with some expanded functionality.

102
00:06:44.890 --> 00:06:48.340
So let me show you an example of what some of that functionality is.

103
00:06:48.550 --> 00:06:54.790
So right here, I'm going to console.log and I'm going to take my wrapper object and I'm going to see

104
00:06:54.790 --> 00:06:56.770
what available methods we have on it.

105
00:06:56.950 --> 00:07:02.320
One of those methods is HTML and we're going to make sure to invoke it with parentheses because it is

106
00:07:02.320 --> 00:07:02.770
a method.

107
00:07:02.950 --> 00:07:06.890
And right now let's go ahead and run our test wheat and see what this outputs.

108
00:07:07.090 --> 00:07:12.850
So right here we have our NPM run test, colon unit command that's going to run all of the tests in

109
00:07:12.850 --> 00:07:16.390
our project and hopefully just we'll find our test file.

110
00:07:16.480 --> 00:07:17.110
There we go.

111
00:07:17.230 --> 00:07:17.980
It's going to run it.

112
00:07:17.990 --> 00:07:20.710
We're going to get a pass because there's no actual assertions.

113
00:07:20.710 --> 00:07:21.790
So there are no failures.

114
00:07:22.000 --> 00:07:26.410
But more importantly, below our test, we're going to see the console.log that we just put.

115
00:07:26.650 --> 00:07:31.180
And you can see it's going to be the HTML from our main nav component.

116
00:07:31.390 --> 00:07:32.740
So here we have our header.

117
00:07:32.830 --> 00:07:38.410
We have those divs that we defined with the Tailwind classes and here we have a company name of Bobo

118
00:07:38.410 --> 00:07:38.890
careers.

119
00:07:39.070 --> 00:07:40.870
So notice the beauty of this view.

120
00:07:40.870 --> 00:07:43.450
Test utils is outside of the browser.

121
00:07:43.450 --> 00:07:47.680
We can sort of get this component up and running and see what it's made out.

122
00:07:47.680 --> 00:07:51.880
Out of, out of, without having to launch this full execution environment like Chrome.

123
00:07:52.780 --> 00:07:58.150
So there's one more method I want to show you in this lesson, just to give you a general sense of what

124
00:07:58.150 --> 00:08:03.880
this wrapper object allows us to do and how it allows us to inspect the view component that it mounts.

125
00:08:04.150 --> 00:08:10.240
As another example, if we just want to see the text that the component contains instead of writing

126
00:08:10.510 --> 00:08:14.080
HTML, we can invoke a different method called text.

127
00:08:14.620 --> 00:08:19.120
And what text is going to do is it's not going to focus on the actual HTML markup.

128
00:08:19.240 --> 00:08:24.280
It's going to focus on the actual user text that is written anywhere inside the component.

129
00:08:24.550 --> 00:08:26.440
So when I execute this.

130
00:08:27.870 --> 00:08:30.060
And we take a look at our console.log from our test.

131
00:08:30.330 --> 00:08:33.870
Instead of seeing the full markup, we're just going to see Bobo careers.

132
00:08:34.050 --> 00:08:37.980
Just to remind you what this looks like, I'm going to flip back to Main now right here.

133
00:08:38.340 --> 00:08:43.980
And you can see that between all of this HTML here is where we are injecting the value of company,

134
00:08:44.040 --> 00:08:48.300
which again comes from our data object right here and its values bubble careers.

135
00:08:48.390 --> 00:08:50.570
And that is exactly what the test recognizes.

136
00:08:50.800 --> 00:08:55.710
There's some kind of text somewhere in there component called bubble careers and it prints it out.

137
00:08:55.710 --> 00:09:02.070
Right now, the test doesn't care about whether that text is hardcoded into HTML or whether it's interpolated

138
00:09:02.160 --> 00:09:05.460
in based on a value coming from our data object.

139
00:09:05.550 --> 00:09:09.990
It just knows that it is somewhere in that final view component and so it outputs it for us.

140
00:09:10.170 --> 00:09:14.460
And as you might have guessed, in order to finalize the assertion here, I'm displaying the company

141
00:09:14.460 --> 00:09:14.790
name.

142
00:09:14.940 --> 00:09:20.370
I think a really basic test that we can do is checking that our wrapper text includes our company name

143
00:09:20.370 --> 00:09:26.250
of bubble careers, and that will validate that somehow, some way our container, our main nav, rather

144
00:09:26.250 --> 00:09:32.100
a component is displaying our company name, our brand, which is what we care about on our main navigation

145
00:09:32.100 --> 00:09:32.400
menu.

146
00:09:32.670 --> 00:09:35.730
So we're going to wire up this assertion in the very next lesson.

147
00:09:35.850 --> 00:09:36.570
I'll see you there.
