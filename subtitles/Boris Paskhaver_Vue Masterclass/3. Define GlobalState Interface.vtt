WEBVTT
1
00:00:00.630 --> 00:00:01.380
Okay.

2
00:00:01.380 --> 00:00:06.150
So we have now defined and exported an interface for a job object.

3
00:00:06.330 --> 00:00:09.150
So now let's utilize it somewhere else in our app.

4
00:00:09.600 --> 00:00:14.130
So I'm going to open up my file explorer and in my source.

5
00:00:15.180 --> 00:00:16.460
Store directory.

6
00:00:16.470 --> 00:00:18.240
We have our state gas file.

7
00:00:18.420 --> 00:00:23.610
And as a reminder, here is where we set up the state function that's going to return our initial view

8
00:00:23.760 --> 00:00:24.480
store state.

9
00:00:24.870 --> 00:00:28.650
So the first thing I want to do is change this file to be a typescript file.

10
00:00:28.830 --> 00:00:34.770
So I'm going to right click right here, click rename and then change the extension from JSS to test

11
00:00:35.070 --> 00:00:35.730
for TypeScript.

12
00:00:36.180 --> 00:00:39.630
Change that and we can see there's no errors so far in the file.

13
00:00:39.630 --> 00:00:40.350
So all good.

14
00:00:40.740 --> 00:00:45.510
Let me go ahead and collapse my file explorer and then drag this to the right hand side so we can see

15
00:00:45.510 --> 00:00:47.550
it side by side with my job interface.

16
00:00:48.540 --> 00:00:55.440
And what I want to do here is hover my mouse over my state function so I can see what TypeScript infers

17
00:00:55.440 --> 00:01:00.870
the return value of this function to be, which will also be the type of this object right here that

18
00:01:00.870 --> 00:01:03.510
I'm actually returning from the body of my state function.

19
00:01:03.870 --> 00:01:08.520
So if I hover my mouse over state, you could see it gets some things right.

20
00:01:08.520 --> 00:01:14.400
TypeScript, for example, correctly infers that is logged in is a boolean, but for the other three

21
00:01:14.400 --> 00:01:17.490
properties of my state object, those are not correct.

22
00:01:17.700 --> 00:01:21.210
For example, selected organizations should be a string array.

23
00:01:21.360 --> 00:01:27.150
Selected job types should be a string array, and jobs is actually going to be an array of job objects.

24
00:01:27.450 --> 00:01:33.000
Remember, that array is going to start out empty and then when our API request completes itself, we're

25
00:01:33.000 --> 00:01:38.160
going to overwrite it with an array of job objects and each job is going to have the properties that

26
00:01:38.160 --> 00:01:43.860
we see on the left hand side, so that never a keyword that you're seeing there simply means that TypeScript

27
00:01:43.860 --> 00:01:46.170
thinks that array is never going to be populated.

28
00:01:46.170 --> 00:01:49.530
In other words, it's always going to be empty, and that's not quite correct.

29
00:01:49.740 --> 00:01:55.380
So the inference is not perfect, and we can tell TypeScript more specifically explicitly what we expect

30
00:01:55.380 --> 00:01:57.780
these properties to be and what their types are.

31
00:01:58.440 --> 00:02:04.170
So what I'm going to do here is I'm going to define an interface and that interface is going to represent

32
00:02:04.170 --> 00:02:06.600
the state of my view X Store.

33
00:02:06.780 --> 00:02:07.110
All right.

34
00:02:07.410 --> 00:02:14.130
So I'm going to call this interface global state and I'm going to describe how my view X Store looks

35
00:02:14.400 --> 00:02:14.820
now.

36
00:02:14.820 --> 00:02:17.220
My global state choice of name is up to me.

37
00:02:17.220 --> 00:02:18.750
I can call that global state.

38
00:02:18.930 --> 00:02:23.190
I can call that view, store state, store, state, whatever we want, it's up to us.

39
00:02:23.370 --> 00:02:28.650
The key takeaway here is in trying to describe to TypeScript what my view store will look like from

40
00:02:28.650 --> 00:02:33.390
a type perspective, not from an implementation perspective, but from a type perspective.

41
00:02:33.690 --> 00:02:38.520
So all I have to do is look at the four properties I have below, write them out and then write out

42
00:02:38.520 --> 00:02:39.810
the types that they're going to be.

43
00:02:40.170 --> 00:02:41.280
So is logged in.

44
00:02:42.090 --> 00:02:48.120
We know that is going to be a boolean and then we're going to come to our jobs property below.

45
00:02:48.420 --> 00:02:49.710
So what is jobs going to be?

46
00:02:49.710 --> 00:02:53.400
Is it going to be an array of strings, an array of numbers, an array of booleans?

47
00:02:53.670 --> 00:02:54.060
Nope.

48
00:02:54.060 --> 00:03:00.090
It's going to be an array of job objects, not just any object, but jobs that implement or objects

49
00:03:00.090 --> 00:03:02.730
that implement this interface right here on the left.

50
00:03:03.060 --> 00:03:08.580
So what I want to do is import this interface so that I can use it within my global state interface.

51
00:03:08.880 --> 00:03:15.450
So in this file I'm going to import my named job interface and that is going to come from the file on

52
00:03:15.450 --> 00:03:20.250
the left, which is my source directory, the API folder, and then the types file.

53
00:03:20.430 --> 00:03:22.560
That is a typescript file, but that's totally fine.

54
00:03:22.830 --> 00:03:25.140
So now we have the interface from the left imported.

55
00:03:25.320 --> 00:03:29.880
And the way I'm going to specify it is the same way I declare any other type of array in TypeScript.

56
00:03:30.420 --> 00:03:34.590
You know, if I was to do something like String Array, it would of course be string array, right?

57
00:03:34.860 --> 00:03:40.290
But what I have is a job array, so I'm going to write the word job and then these square brackets for

58
00:03:40.290 --> 00:03:40.740
an array.

59
00:03:41.100 --> 00:03:47.160
So this syntax uses a custom interface, a custom object type definition that I have to describe what

60
00:03:47.160 --> 00:03:50.850
each value in this jobs array will consist of.

61
00:03:51.060 --> 00:03:56.940
So just to clarify, I apologize if this is obvious, but jobs is not going to be a job property.

62
00:03:56.940 --> 00:03:58.920
It's going to be a job array property.

63
00:03:59.340 --> 00:04:02.340
It's it's type is an array holding job objects.

64
00:04:02.490 --> 00:04:08.790
Each job object in this job array will have this shape that I have on the file on the left.

65
00:04:09.240 --> 00:04:12.990
All right, then we move on to our other two properties, selected organizations.

66
00:04:13.320 --> 00:04:17.010
That is going to be a string array, sort of like so.

67
00:04:17.370 --> 00:04:22.050
And then finally selected job types is also going to be a string array.

68
00:04:22.890 --> 00:04:23.190
All right.

69
00:04:23.190 --> 00:04:23.640
There we go.

70
00:04:23.880 --> 00:04:30.210
Now, what I want to do is specify that the return value of my state function down below is going to

71
00:04:30.210 --> 00:04:33.270
have an object that fulfills the global state interface.

72
00:04:33.600 --> 00:04:38.670
So instead of this default object that it thinks it's going to be, I'm going to tell it more explicitly

73
00:04:38.820 --> 00:04:40.590
that this object right here is incorrect.

74
00:04:40.680 --> 00:04:45.150
It's actually an object, the return value that satisfies this thing right here.

75
00:04:45.450 --> 00:04:50.760
So the reminder, the way we do that is we put a colon after our initial parentheses definition.

76
00:04:50.910 --> 00:04:52.890
And right here, I'm going to write Global State.

77
00:04:53.280 --> 00:04:59.730
So now if I hover my mouse over the state function definition, you can see it realizes that it has

78
00:04:59.730 --> 00:05:00.450
global state.

79
00:05:00.450 --> 00:05:04.590
And if I have my mouse over a global state, unfortunate it's not showing up for me, but kind of makes

80
00:05:04.590 --> 00:05:04.890
sense.

81
00:05:04.890 --> 00:05:07.440
It represents this global state interface right here.

82
00:05:07.650 --> 00:05:08.010
All right.

83
00:05:08.280 --> 00:05:09.660
So that has been a lot of progress.

84
00:05:09.660 --> 00:05:15.410
But now what I actually want to do is I want to move this entire interface to a separate types file.

85
00:05:15.420 --> 00:05:21.030
I think sometimes it's a good idea to store your implementations and your actual interfaces and TypeScript

86
00:05:21.030 --> 00:05:22.740
related contracts in separate files.

87
00:05:23.040 --> 00:05:28.500
So here's what I want to do in my stored directory right here where I have all these files, I'm going

88
00:05:28.500 --> 00:05:30.360
to create my new types.

89
00:05:30.360 --> 00:05:31.380
That's file.

90
00:05:32.820 --> 00:05:33.150
All right.

91
00:05:33.150 --> 00:05:34.110
And then types that.

92
00:05:34.110 --> 00:05:37.860
Yes, same name as my original types file in the API folder.

93
00:05:37.860 --> 00:05:40.470
But of course this is types related to my view store.

94
00:05:40.650 --> 00:05:41.760
That's why I'm putting it in here.

95
00:05:42.030 --> 00:05:45.960
Here is where I'm going to move all of the logic that I have currently in the file on the right.

96
00:05:46.290 --> 00:05:52.620
So let's move all this logic right here to right here and make sure that since we're declaring this

97
00:05:52.620 --> 00:05:56.120
interface and we want to use it in my state, that's file I after.

98
00:05:56.130 --> 00:05:58.110
I also have to make sure I export it right here.

99
00:05:58.650 --> 00:06:00.480
So export interface, global state.

100
00:06:01.200 --> 00:06:01.760
There we go.

101
00:06:01.770 --> 00:06:06.750
We have job imported in this file, so we're able to use it in line like so we're using one interface

102
00:06:06.750 --> 00:06:08.940
in another interface definition, totally fine.

103
00:06:09.150 --> 00:06:12.090
And then in my actual state, that's file.

104
00:06:12.090 --> 00:06:14.610
I now have to import my new global state interface.

105
00:06:14.880 --> 00:06:18.960
So right here I'm going to import global state and that is going to come from the types folder.

106
00:06:18.960 --> 00:06:23.190
But I want to give a specific import or an explicit top import.

107
00:06:23.370 --> 00:06:28.680
So instead of the dot slash, what I'm going to do is the source directory store types.

108
00:06:29.550 --> 00:06:30.750
Save that and there we go.

109
00:06:31.020 --> 00:06:36.570
So now we are importing an interface from a Tapscott file and we're telling our new states TypeScript

110
00:06:36.570 --> 00:06:42.830
file that our view state, the initial starting state and not just the starting state, but the entire

111
00:06:42.840 --> 00:06:48.120
view store state as it's updated throughout the interaction with the program, for example, as we receive

112
00:06:48.120 --> 00:06:54.480
jobs, as we receive selected organizations, selected job types, etc., that state that shape of that

113
00:06:54.480 --> 00:06:57.390
JavaScript object will be of type global state.

114
00:06:57.480 --> 00:06:58.530
And what is global state?

115
00:06:58.650 --> 00:07:04.320
It is this object right here with for properties and specific type declarations for each and every property.

116
00:07:04.500 --> 00:07:08.580
And we're going to see how by telling TypeScript this information, it's going to enable us to have

117
00:07:08.580 --> 00:07:12.210
a lot of checks throughout our application to make sure we're doing everything correctly.

118
00:07:12.540 --> 00:07:12.810
All right.

119
00:07:12.990 --> 00:07:16.230
So moving in a really good direction and I will see you in the next lesson.
