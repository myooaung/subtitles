WEBVTT
1
00:00:01.310 --> 00:00:02.210
All right.

2
00:00:02.210 --> 00:00:07.220
So in this lesson, we'll do a quick introduction to this slice method on an array.

3
00:00:07.430 --> 00:00:11.330
If you are comfortable with the slice method, you can feel free to skip this lesson.

4
00:00:11.600 --> 00:00:15.920
Otherwise join me in our playground JS file in our source folder.

5
00:00:16.040 --> 00:00:21.710
As a reminder, this is our little playground, our scratch pad for playing around with various JavaScript

6
00:00:21.710 --> 00:00:22.820
and view concepts.

7
00:00:23.150 --> 00:00:25.100
So what does the slice method do?

8
00:00:25.310 --> 00:00:31.760
The slice method it returns a copy of an original array, but it can limit the elements in the original

9
00:00:31.760 --> 00:00:35.180
array based on our specified index positions.

10
00:00:35.480 --> 00:00:42.500
So if we want to extract a subsection or a subset of an original array in a copy, we can do that with

11
00:00:42.500 --> 00:00:43.400
this slice method.

12
00:00:43.730 --> 00:00:44.900
So let me show you an example.

13
00:00:44.900 --> 00:00:47.300
I'll begin by defining an array of sushi.

14
00:00:47.720 --> 00:00:52.310
I'm just going to call it const sushi, and let's populate this with some of my favorite fish.

15
00:00:52.310 --> 00:01:02.540
So let's do tuna, let's do salmon, let's do yellowtail, let's do eel, let's do shrimp, let's do

16
00:01:02.540 --> 00:01:04.310
octopus and let's do uni.

17
00:01:05.330 --> 00:01:08.420
So I have an array of seven strings.

18
00:01:08.750 --> 00:01:14.240
Let me show you what happens if I take the sushi array and I invoke the sliced method on it.

19
00:01:14.600 --> 00:01:19.660
Technically, we can invoke slice with either zero arguments, one argument or two arguments.

20
00:01:19.670 --> 00:01:21.500
And let me show you all syntax options.

21
00:01:21.770 --> 00:01:28.260
So if I invoke slice with no arguments, I'm simply going to get a copy of the original array.

22
00:01:28.280 --> 00:01:31.680
So right here, I'm going to use Node to run source playground.

23
00:01:31.720 --> 00:01:32.110
Yes.

24
00:01:32.390 --> 00:01:34.880
And I'm going to console.log my new copied array.

25
00:01:34.880 --> 00:01:36.560
And so we're going to get the original array.

26
00:01:36.590 --> 00:01:37.520
Nothing fancy here.

27
00:01:37.520 --> 00:01:38.150
Nothing crazy.

28
00:01:38.150 --> 00:01:40.640
But it's an easy way to create a copy of an array.

29
00:01:41.180 --> 00:01:43.360
Now, what happens when we provide arguments?

30
00:01:43.370 --> 00:01:49.250
When we provide arguments, we specify the boundaries from where we'd like to extract certain values

31
00:01:49.250 --> 00:01:50.960
from the original array.

32
00:01:51.290 --> 00:01:55.640
So if we provide one argument, we specify the lower bound.

33
00:01:55.940 --> 00:02:00.650
The lower bound is the index from which we want to pull values from.

34
00:02:01.040 --> 00:02:07.310
So, for example, if I put a value of two here, what I am saying is pull values from index position

35
00:02:07.310 --> 00:02:09.770
two until the end of the array.

36
00:02:10.490 --> 00:02:14.150
So in this scenario, index position two is yellowtail.

37
00:02:14.420 --> 00:02:19.910
So we're going to get a new array that's going to hold all elements from yellowtail to the end of the

38
00:02:19.910 --> 00:02:21.200
original array of sushi.

39
00:02:21.470 --> 00:02:26.150
So here, if I rerun the file, you're going to see we're going to get a new array of five elements,

40
00:02:26.240 --> 00:02:31.910
starting with the element that was at index position, too, of my original sushi array.

41
00:02:32.390 --> 00:02:39.080
Similarly, if I provide an argument of four that says slice or take from index position four to the

42
00:02:39.080 --> 00:02:42.650
end of my array index position four is shrimp right here.

43
00:02:42.830 --> 00:02:45.680
So that means an array of shrimp, octopus and uni.

44
00:02:45.920 --> 00:02:46.550
Right here.

45
00:02:47.510 --> 00:02:48.830
We see that array.

46
00:02:49.010 --> 00:02:49.430
All right.

47
00:02:49.640 --> 00:02:51.440
Now, what about two arguments?

48
00:02:51.800 --> 00:02:57.830
Two arguments provide the lower bound or the starting index and the upper bound, which is the ending

49
00:02:57.830 --> 00:02:58.310
index.

50
00:02:58.460 --> 00:03:05.330
But here is a very important caveat to remember the lower bound or the starting index is inclusive.

51
00:03:05.600 --> 00:03:11.420
That means that JavaScript will include the value at that index position, the exact same way that we

52
00:03:11.420 --> 00:03:13.010
just saw with a single argument.

53
00:03:13.340 --> 00:03:19.970
However, the upper bound, which is the ending index or the second argument, a slice is the index

54
00:03:19.970 --> 00:03:26.240
that we're going to end at, but that is exclusive, which means the value there is not going to be

55
00:03:26.240 --> 00:03:26.780
included.

56
00:03:26.990 --> 00:03:31.850
We're going to go up to that index, but not actually include the value at that index.

57
00:03:31.860 --> 00:03:38.450
So if I, for example, provide arguments of two and four, I am telling JavaScript to make a copy of

58
00:03:38.450 --> 00:03:42.440
sushi starting from index positions two and going all the way to four.

59
00:03:42.650 --> 00:03:46.580
However, index position force element will not be included.

60
00:03:46.820 --> 00:03:52.670
So this will simply be an array of two elements the elements at index positions two and three.

61
00:03:52.790 --> 00:03:55.460
And that is going to be yellowtail and eel.

62
00:03:55.670 --> 00:03:59.990
So if I save that file and run it, you're going to see we're going to get yellowtail and eel.

63
00:04:00.290 --> 00:04:06.920
So if I wanted to include shrimp, which is that index position for I have to go up to five because

64
00:04:06.920 --> 00:04:11.900
that way I'm going to tell JavaScript to go up to index position five but not include it, which includes

65
00:04:11.900 --> 00:04:16.970
index positions two, three, four, that is yellowtail, eel and shrimp.

66
00:04:17.180 --> 00:04:18.680
And that's what I'm going to get right here.

67
00:04:19.610 --> 00:04:19.970
All right.

68
00:04:20.180 --> 00:04:26.030
As one more example, if I change this to three and six, what I'm saying is started in next position

69
00:04:26.030 --> 00:04:30.710
three and pull all the way up to but not including index position six.

70
00:04:31.010 --> 00:04:33.710
So index position three is this eel right here?

71
00:04:33.830 --> 00:04:35.890
Three, four, five.

72
00:04:35.900 --> 00:04:38.130
We're not going to include the unit at position six.

73
00:04:38.300 --> 00:04:42.620
So this is going to be a three element array of eel, shrimp and octopus.

74
00:04:42.840 --> 00:04:43.190
All right.

75
00:04:43.430 --> 00:04:45.170
So that is how the sliced method works.

76
00:04:45.170 --> 00:04:49.760
And hopefully you get a sense of how we can apply this to our view project, because if we have an array

77
00:04:49.760 --> 00:04:56.420
of 100 job objects, we can use slice to figure out which batch of ten we want to pull out in a sub

78
00:04:56.420 --> 00:04:58.880
array in order to display on a given page.

79
00:04:59.090 --> 00:05:03.680
For example, on the first page we can pull out indexed positions zero through ten or in other words,

80
00:05:03.680 --> 00:05:04.610
the first ten jobs.

81
00:05:04.790 --> 00:05:09.980
On the next page we can pull out indexed positions ten, two through 20 or the second batch of ten jobs

82
00:05:10.100 --> 00:05:11.840
and so on, all the way to the end.

83
00:05:12.050 --> 00:05:16.420
So in the very next lesson, we're going to see how we can use the slice method within our component.

84
00:05:16.430 --> 00:05:17.300
So I will see you there.
