1
00:00:00,420 --> 00:00:01,620
All right.

2
00:00:01,620 --> 00:00:07,710
So the first thing that I want to do in this lesson is to create a new file inside our source directory,

3
00:00:07,980 --> 00:00:10,350
and I'm going to call it Playground Dot.

4
00:00:10,350 --> 00:00:17,850
JS So the purpose of playground dogs throughout this course will be to be a playground where we can

5
00:00:17,850 --> 00:00:24,480
test out different JavaScript and view concepts outside the scope of our actual job search project.

6
00:00:24,810 --> 00:00:30,720
So as we introduce certain concepts that I think would benefit from some additional explanation or examples,

7
00:00:30,990 --> 00:00:33,840
we're going to write out those examples within Playground.

8
00:00:34,170 --> 00:00:39,930
Yes, most of these lessons that are going to use the playground that just file are pretty optional

9
00:00:40,140 --> 00:00:44,010
because they're going to depend on whether you know, the concept or not.

10
00:00:44,370 --> 00:00:50,340
So for example, in this case, in this lesson, we're going to talk about the E6 spread syntax for

11
00:00:50,340 --> 00:00:51,060
arrays.

12
00:00:51,270 --> 00:00:55,170
That's the dot, dot, dot that you place before an array in your program.

13
00:00:55,290 --> 00:00:59,010
And we're going to utilize this E6 concept in the very next lesson.

14
00:00:59,280 --> 00:01:03,000
So if you're unfamiliar with it, stick around.

15
00:01:03,090 --> 00:01:08,040
If you're are familiar with it, if you've seen this before, you can feel free to skip this lesson.

16
00:01:08,070 --> 00:01:08,370
All right.

17
00:01:08,550 --> 00:01:12,140
But we're going to write out an actual practice code within playground doctrine.

18
00:01:12,140 --> 00:01:12,350
Yes.

19
00:01:12,480 --> 00:01:15,870
So let me hide my file explorer, and let's write some code.

20
00:01:16,650 --> 00:01:17,280
Okay.

21
00:01:17,280 --> 00:01:19,530
So let's declare two arrays.

22
00:01:19,530 --> 00:01:23,910
One is going to be an array of fruits and one is going to be an array of vegetables.

23
00:01:24,180 --> 00:01:30,180
So right here I'll do const fruits and I'll do a three element array of strings.

24
00:01:30,210 --> 00:01:34,590
Let's do apple, let's do banana and let's do orange.

25
00:01:35,310 --> 00:01:41,850
And on the line below I'll declare a similar array of vegetables and we can put just two strings in

26
00:01:41,850 --> 00:01:42,180
here.

27
00:01:42,210 --> 00:01:43,410
Let's do cucumber.

28
00:01:44,420 --> 00:01:45,590
And let's do radish.

29
00:01:46,530 --> 00:01:52,050
You'll notice the little orange squiggly lines at the very end that's actually prettier, complaining

30
00:01:52,050 --> 00:01:53,340
that we don't have semicolons.

31
00:01:53,580 --> 00:01:56,340
Not a problem if we save our gas file.

32
00:01:56,640 --> 00:02:01,710
You can see that we format on save and automatically prettier will add those beautiful styles for us.

33
00:02:02,010 --> 00:02:07,080
We still have these red squiggles, but of course that's coming from the fact that we are not using

34
00:02:07,080 --> 00:02:09,120
our fruits and vegetables arrays.

35
00:02:09,690 --> 00:02:11,750
Okay, so here is our challenge.

36
00:02:11,760 --> 00:02:17,430
What I want to do is to merge together the strings within my two arrays.

37
00:02:17,700 --> 00:02:24,360
So in other words, I want a new array that's going to consist of five elements apple, banana, orange,

38
00:02:24,360 --> 00:02:25,470
cucumber and radish.

39
00:02:25,710 --> 00:02:30,030
How can I merge or combine these two arrays together?

40
00:02:30,480 --> 00:02:35,460
Well, here's what a beginner might think, which is a solution that actually will not work.

41
00:02:35,490 --> 00:02:41,010
And by the way, in order to output any text which we're going to need to do when we run this program

42
00:02:41,010 --> 00:02:46,800
with Node from our terminal on the right hand side, we can use console console dialogue just like we

43
00:02:46,800 --> 00:02:47,610
do in our browser.

44
00:02:47,940 --> 00:02:52,710
So for example, I'm going to put a console that log here and I might think to myself, Well, I know

45
00:02:52,710 --> 00:02:57,540
I need a new array, so can I just put fruits in here and can I just put vegetables in here?

46
00:02:57,540 --> 00:02:59,370
And will that accomplish what we want?

47
00:03:00,240 --> 00:03:01,350
And the answer is no.

48
00:03:01,590 --> 00:03:03,400
So let's take a look at what this gives us.

49
00:03:03,400 --> 00:03:09,630
So in the right hand side, I'm going to use Node to run my file and my file is within the Astro C directory

50
00:03:09,720 --> 00:03:11,760
and it's called Playground Dot J.S..

51
00:03:12,000 --> 00:03:15,370
So right here, node source, playground dogs.

52
00:03:15,390 --> 00:03:18,030
And when I run this, you're going to see I'm going to expand this.

53
00:03:18,030 --> 00:03:22,500
That's a little bit easier to see that we actually do not get an array of five elements.

54
00:03:22,680 --> 00:03:25,560
We get an array of two arrays.

55
00:03:25,560 --> 00:03:25,920
Right?

56
00:03:25,930 --> 00:03:33,210
We've kept the original boundary, the original array of fruits and vegetables inside, right here and

57
00:03:33,210 --> 00:03:37,470
right here, inside this new array that we have generated right here.

58
00:03:37,470 --> 00:03:38,760
And that's not what we want.

59
00:03:38,910 --> 00:03:42,990
We want to extract those original elements and store them in a new array.

60
00:03:43,380 --> 00:03:49,020
So in order to accomplish that, we need to use a special syntax and it's the dot, dot, dot syntax.

61
00:03:49,320 --> 00:03:53,400
So I'm going to put it right here before fruits and then talk a little bit about what it does.

62
00:03:53,730 --> 00:04:00,030
What this effectively does is it extracts all of the elements of fruits in line here.

63
00:04:00,240 --> 00:04:06,510
So imagine literally just copying these elements right here and putting them inside right here where

64
00:04:06,510 --> 00:04:07,650
we have dot dot fruits.

65
00:04:07,890 --> 00:04:13,080
We are not making an exact copy of the array because we are not keeping the outer array itself.

66
00:04:13,350 --> 00:04:15,840
We're just taking the internal elements.

67
00:04:15,930 --> 00:04:19,350
In this case, the internal strings from the fruits array.

68
00:04:19,500 --> 00:04:26,220
And then we're basically spreading them out in this position, in this spot, inside this new array

69
00:04:26,400 --> 00:04:30,180
that we've declared with this opening and closing square bracket.

70
00:04:30,570 --> 00:04:37,110
So now we're going to spread out the values from our original fruits array in our new arrays.

71
00:04:37,110 --> 00:04:38,690
Let's explore the differences right here.

72
00:04:38,700 --> 00:04:42,750
I'm going to rerun the file and you can see the difference between these two.

73
00:04:42,750 --> 00:04:44,070
Syntax is side by side.

74
00:04:44,320 --> 00:04:51,690
I've spread out the fruits array so it's elements appear as they should in my new generated array,

75
00:04:51,990 --> 00:04:58,950
but I have not spread out the vegetables array so I have the complete original array inside this array

76
00:04:58,950 --> 00:04:59,820
that's being output.

77
00:05:00,150 --> 00:05:04,770
So of course, to complete this assignment, to get all of the elements merged in together, I need

78
00:05:04,770 --> 00:05:08,970
to apply the same spread syntax to my vegetables array as well.

79
00:05:09,210 --> 00:05:14,790
So right here again to practice whenever you have an array and you have it assigned to a variable,

80
00:05:14,790 --> 00:05:17,910
in this case, you can place a dot, dot, dot in front of it.

81
00:05:18,060 --> 00:05:24,450
And that will take not crypto but that tuck that that is going to take the elements of that array and

82
00:05:24,450 --> 00:05:30,810
spread them out effectively, copy them to a new destination, to a new data source, but not keeping

83
00:05:30,810 --> 00:05:32,640
the original array that they are in.

84
00:05:32,730 --> 00:05:33,030
Right.

85
00:05:33,330 --> 00:05:38,400
So we're basically copying apple, banana, orange, and then after that, we're copying cucumber and

86
00:05:38,400 --> 00:05:43,200
radish and then we're going to consolidate all of those and store them in the new array that we have

87
00:05:43,200 --> 00:05:44,880
right here with square brackets.

88
00:05:45,180 --> 00:05:47,580
So I remove this right here and we run this file.

89
00:05:48,660 --> 00:05:50,590
Now we've accomplished our original goal.

90
00:05:50,760 --> 00:05:55,350
We have merged together the elements of the fruits and vegetables arrays into a new array.

91
00:05:55,710 --> 00:06:01,230
So that's what you use the spread syntax for, primarily used to copy elements from other arrays into

92
00:06:01,320 --> 00:06:05,430
new arrays while getting rid of the original array structure.

93
00:06:05,610 --> 00:06:05,880
All right.

94
00:06:06,000 --> 00:06:10,500
And fruits and vegetables, by the way, have not been modified or mutated in any way throughout the

95
00:06:10,500 --> 00:06:10,950
process.

96
00:06:11,100 --> 00:06:14,490
We still have access to them and they remain the same original arrays.

97
00:06:14,670 --> 00:06:18,300
This is a brand new array that we have generated just for this line.

98
00:06:18,450 --> 00:06:20,520
Fruits and vegetables remain as they are.

99
00:06:20,580 --> 00:06:20,850
All right.

100
00:06:21,210 --> 00:06:22,770
That's all there is to cover in this lesson.

101
00:06:22,770 --> 00:06:24,420
So I will see you in the next one.
