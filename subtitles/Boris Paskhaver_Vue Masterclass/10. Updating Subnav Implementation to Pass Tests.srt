1
00:00:00,440 --> 00:00:03,710
All right, so let's make our failing tests pass.

2
00:00:03,740 --> 00:00:09,410
I'm going to drag this terminal window down just a little bit, and I'm going to open up my sub nav

3
00:00:09,410 --> 00:00:12,470
test alongside my sub nav component.

4
00:00:12,980 --> 00:00:14,900
There is my implementation on the left.

5
00:00:14,900 --> 00:00:16,250
And what do we need to do?

6
00:00:16,280 --> 00:00:21,170
Well, the first thing we need to do is to make sure we have the correct data property available.

7
00:00:21,380 --> 00:00:29,420
So right here, I'm going to create a data method and that is going to return an object as always.

8
00:00:29,630 --> 00:00:34,520
This specifies the data for the component, and I'm just going to copy the exact property we expect

9
00:00:34,520 --> 00:00:37,070
to have here on the job results page.

10
00:00:37,310 --> 00:00:42,710
And I'm going to start it off with a starter value of true just because I need some place to start.

11
00:00:43,490 --> 00:00:45,860
Obviously, we're not going to have any way to change this.

12
00:00:46,070 --> 00:00:51,560
And in the real world, we have to find a way to make this change as the user navigates from page to

13
00:00:51,560 --> 00:00:51,950
page.

14
00:00:52,220 --> 00:00:55,130
The browser and view should automatically figure this out.

15
00:00:55,280 --> 00:00:59,150
But again, we don't know how to do that yet, so let's just pretend we have this property and it's

16
00:00:59,150 --> 00:01:03,050
somehow been calculated and once we have it, we can use it in our template.

17
00:01:03,320 --> 00:01:06,320
Let me actually shrink the size of this so we can see everything perfect.

18
00:01:06,650 --> 00:01:15,080
And if we see here, we have this top level div that is encapsulating the font awesome icon as well

19
00:01:15,080 --> 00:01:17,060
as the actual number of jobs matched.

20
00:01:17,300 --> 00:01:23,780
And if you look at the Google Careers Web page, both of them are hidden whenever the user is not on

21
00:01:23,780 --> 00:01:30,800
the job search results page or in other words, they are only present when the user is on the job results

22
00:01:30,800 --> 00:01:31,100
page.

23
00:01:31,190 --> 00:01:35,990
So when this is equal to true, so what we can do is add AVF here.

24
00:01:36,920 --> 00:01:41,780
This will make this bit of HTML and all of its children only conditionally render.

25
00:01:41,930 --> 00:01:46,730
And we're going to connect that to which property to our on job results page property.

26
00:01:46,970 --> 00:01:48,600
So only if this is true.

27
00:01:48,620 --> 00:01:54,890
In other words, only if the user is on the job results page do we want to render this logic right here.

28
00:01:55,160 --> 00:01:56,570
So that is a good first step.

29
00:01:56,570 --> 00:02:01,430
But that, of course, is not going to be enough because our tests are still looking for this data.

30
00:02:01,460 --> 00:02:06,470
Test attribute on something in our template so that I can find it and make sure it is present.

31
00:02:06,740 --> 00:02:10,190
So what we want to do is add our data test attribute right here.

32
00:02:11,090 --> 00:02:14,930
And of course, I have to give it the expected value, which is job count.

33
00:02:15,410 --> 00:02:21,050
So once again, this entire div will only render if the V.F. evaluates the true.

34
00:02:21,290 --> 00:02:27,050
So in our very first test, it's only going to be able to find a valid job count element if it's able

35
00:02:27,050 --> 00:02:29,060
to find that date of test attribute.

36
00:02:29,270 --> 00:02:34,300
And it's only going to be able to find that that test attribute if we if has something that is true.

37
00:02:34,430 --> 00:02:38,200
Because otherwise the way view is going to see this component is basically like this.

38
00:02:38,210 --> 00:02:40,190
It's not going to see it at all.

39
00:02:40,190 --> 00:02:42,620
It's going to be blank for from the test perspective.

40
00:02:42,740 --> 00:02:44,690
And thus the first test is going to fail.

41
00:02:44,930 --> 00:02:51,770
But now it's going to correctly find the job can attribute if the VFW it's the true which it will in

42
00:02:51,770 --> 00:02:56,780
this case, because we are manually specifying that the data property on job results page is such a

43
00:02:56,780 --> 00:02:57,110
true.

44
00:02:57,410 --> 00:02:59,720
So this should get both tests to pass.

45
00:02:59,720 --> 00:03:02,150
And indeed, if we look down here, it does.

46
00:03:02,930 --> 00:03:08,240
However, we run into an issue which we saw in the previous lesson, and this is actually coming from

47
00:03:08,420 --> 00:03:12,470
multiple tests, both our sub nav test and our main nav test.

48
00:03:12,650 --> 00:03:18,440
And that is that our tests don't know what this font awesome icon is, right?

49
00:03:18,650 --> 00:03:21,380
Because remember, there's going to be at least one test in this case.

50
00:03:21,380 --> 00:03:29,450
It's the sub nav one right here where we are indeed going to render the div with the job match.

51
00:03:29,480 --> 00:03:30,590
In fact, I misspoke.

52
00:03:30,590 --> 00:03:32,480
Forgive me, it's going to be this one right here.

53
00:03:32,780 --> 00:03:40,010
Whenever we have the sub nav being rendered and we have the job results being rendered, those job results

54
00:03:40,010 --> 00:03:43,850
are using something called the font awesome icon global component.

55
00:03:44,180 --> 00:03:50,660
But within our test ecosystem, as we're testing this, the tests don't know about our bigger picture

56
00:03:50,660 --> 00:03:56,630
view app that we configured in main that yes, from the test perspective, we are mounting this sub

57
00:03:56,630 --> 00:03:58,610
nav component in isolation.

58
00:03:58,880 --> 00:04:03,200
So the tests have no clue about what font awesome icon is here.

59
00:04:03,380 --> 00:04:05,450
And that's exactly what the message here is.

60
00:04:05,450 --> 00:04:06,400
It's a warning.

61
00:04:06,410 --> 00:04:11,510
It's not a failure, but it's a warning that says, hey, I failed to resolve this component that you're

62
00:04:11,510 --> 00:04:11,870
using.

63
00:04:11,870 --> 00:04:13,040
Font Awesome icon.

64
00:04:13,250 --> 00:04:19,190
You are referencing some kind of component named font awesome icon, but I can't figure out what it

65
00:04:19,190 --> 00:04:19,520
is.

66
00:04:20,260 --> 00:04:20,570
Right.

67
00:04:20,660 --> 00:04:25,940
And that makes sense because again, our tests are separate from our main view app where we've registered

68
00:04:25,940 --> 00:04:28,460
the font awesome icon as a global component.

69
00:04:28,670 --> 00:04:31,700
So we're going to talk about how to fix this problem in the upcoming lessons.
