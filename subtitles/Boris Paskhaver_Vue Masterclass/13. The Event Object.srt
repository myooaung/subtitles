1
00:00:00,620 --> 00:00:01,670
All right.

2
00:00:01,670 --> 00:00:07,910
So in the previous lessons we learned about the VON Directive, which allows us to react to a user event.

3
00:00:08,150 --> 00:00:14,870
In this case, we reacted to a user click and we told Vue to invoke a method called Handle Click whenever

4
00:00:14,870 --> 00:00:20,510
the user clicked on our button, our optimal button inside our action button component.

5
00:00:20,960 --> 00:00:26,660
Now, as it turns out, whenever Vue invokes any method that we provide to the VON Directive, it will

6
00:00:26,660 --> 00:00:32,510
automatically pass in an event object as the very first argument to that method.

7
00:00:32,810 --> 00:00:37,670
So when I was first starting out with any kind of front end library and I heard the word event object,

8
00:00:37,670 --> 00:00:39,140
I started to get kind of confused.

9
00:00:39,140 --> 00:00:41,930
It seemed kind of bigger, overwhelming in scope.

10
00:00:42,170 --> 00:00:44,500
But an event object is actually pretty simple.

11
00:00:44,510 --> 00:00:51,920
It's a plain JavaScript object that just has a lot of information about the event that just happened.

12
00:00:51,950 --> 00:00:52,280
Right.

13
00:00:52,520 --> 00:00:58,340
So you may not think there's a lot of information going on whenever we click on a button in a page.

14
00:00:58,490 --> 00:01:02,060
But there is actually a lot that the browser and JavaScript are keeping track of.

15
00:01:02,330 --> 00:01:08,570
For example, the event object for a click event will have information like the coordinates of where

16
00:01:08,570 --> 00:01:12,890
the user clicked, the x and y coordinates where the user actually clicked on the button.

17
00:01:13,010 --> 00:01:18,410
If you think of the the browser window as a two dimensional plane, right, you can click on the top

18
00:01:18,410 --> 00:01:23,510
right corner or the bottom left corner, and the click event will keep track of the exact coordinate

19
00:01:23,510 --> 00:01:24,320
where you click.

20
00:01:24,560 --> 00:01:29,810
Now, that isn't specifically important to us right now, but it just goes to illustrate what an event

21
00:01:29,810 --> 00:01:30,820
object is storing.

22
00:01:30,830 --> 00:01:35,870
It's just information, it's just metadata, some additional information about what happened in that

23
00:01:35,870 --> 00:01:38,350
event, and sometimes you may care about that.

24
00:01:38,360 --> 00:01:44,090
So, for example, if we're dealing with another kind of event like let's say a user typing text into

25
00:01:44,090 --> 00:01:50,030
an input field, each time the user presses a character on their keyboard, that is an event, right?

26
00:01:50,030 --> 00:01:51,980
It's not a click event, but it's still an event.

27
00:01:51,980 --> 00:01:57,230
It's some kind of change or some kind of thing that is happening on an application, on a web page.

28
00:01:57,500 --> 00:02:03,230
And in that type of scenario, in an input event, we may want to talk to the input or the event object

29
00:02:03,440 --> 00:02:06,890
in order to find out what it is that the user just typed, right?

30
00:02:07,070 --> 00:02:09,830
Because the event object is in a store, that kind of information.

31
00:02:10,040 --> 00:02:15,050
So depending on what kind of event it is, the event object will have different characteristics, different

32
00:02:15,050 --> 00:02:15,650
properties.

33
00:02:15,830 --> 00:02:19,760
But the at the end of the day it's just a plain JavaScript object with that information.

34
00:02:20,000 --> 00:02:23,510
So right now there's nothing that I want to extract from this event object.

35
00:02:23,510 --> 00:02:26,560
There's no data that I need from it, but I just want to show you how it works.

36
00:02:26,840 --> 00:02:33,140
So again, as a reminder, Vue will automatically pass in the event object as the very first argument

37
00:02:33,140 --> 00:02:34,550
to any method we define.

38
00:02:34,670 --> 00:02:38,570
We simply did not write that parameter out, so you didn't do anything with it.

39
00:02:38,780 --> 00:02:43,760
But right now I can type an event and this parameter name is totally up to us.

40
00:02:43,760 --> 00:02:46,610
We can call it whatever we want, but it must be the first argument.

41
00:02:46,790 --> 00:02:51,020
So I'm going to call this event and I'm just going to console.log the event object so we can see it

42
00:02:51,020 --> 00:02:52,310
in our browser console.

43
00:02:52,490 --> 00:02:52,850
All right.

44
00:02:53,570 --> 00:02:57,890
So I'm going to save this and I'm going to transition back to Google Chrome and I'm going to click the

45
00:02:57,890 --> 00:03:01,220
sign in button and we're going to see this pointer event.

46
00:03:01,220 --> 00:03:03,680
So this is views representation of a click.

47
00:03:03,890 --> 00:03:08,120
And if I open this object, you'll see it's just plain key value pairs, right?

48
00:03:08,120 --> 00:03:11,210
Properties and values just like we're used to in JavaScript.

49
00:03:11,210 --> 00:03:16,280
So if I scroll down, you're going to see properties like client X and client Y which look to be some

50
00:03:16,280 --> 00:03:17,120
kind of coordinates.

51
00:03:17,300 --> 00:03:20,960
There's also layer X and layer Y, offset x, offset Y.

52
00:03:20,960 --> 00:03:26,240
These are all, of course, dealing with the two dimensional plane and the idea of axes right x axis,

53
00:03:26,240 --> 00:03:29,300
which moves left to right and y axis which moves up and down.

54
00:03:29,540 --> 00:03:32,870
So there's a whole bunch of these additional pieces of information that we have here.

55
00:03:33,020 --> 00:03:35,600
Most of them even I don't know what they do.

56
00:03:35,780 --> 00:03:39,200
The important thing is to understand that they're all bundled up here in this event object.

57
00:03:39,200 --> 00:03:40,790
That's all an event object is.

58
00:03:40,790 --> 00:03:42,890
It's just information about what transpired.

59
00:03:43,220 --> 00:03:49,970
And every time that we use the vision directive and we provide a method name view is going to pass in

60
00:03:50,060 --> 00:03:53,090
that event object automatically as the very first argument.

61
00:03:53,210 --> 00:03:57,980
And then we can take that event, that object, and do something with it in the body of the method if

62
00:03:57,980 --> 00:03:58,610
we want to.

63
00:03:58,640 --> 00:04:02,390
We're going to see this more in action later in the course when we deal with input events.

64
00:04:02,390 --> 00:04:02,690
All right.

65
00:04:02,930 --> 00:04:08,540
But for now, we don't need anything here so we can go ahead and get rid of this console.log event and

66
00:04:08,540 --> 00:04:12,830
get rid of the event parameter as well and just leave it like so.

67
00:04:12,830 --> 00:04:16,820
And we'll come back to this method in the next lesson when we add more functionality to it.

68
00:04:17,210 --> 00:04:17,480
All right.

69
00:04:17,480 --> 00:04:18,950
That's all there is to cover in this lesson.

70
00:04:18,950 --> 00:04:20,360
So I will see you in the next one.
