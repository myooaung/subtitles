1
00:00:00,270 --> 00:00:06,150
In this lesson, I want to do a quick review of the map method on a JavaScript array.

2
00:00:06,360 --> 00:00:09,330
If you're comfortable with map, feel free to skip this lesson.

3
00:00:09,510 --> 00:00:14,520
Otherwise, stick around because we're going to be using this method in the next lesson on testing.

4
00:00:14,850 --> 00:00:17,560
So I'm going to open up my playground digest file.

5
00:00:17,580 --> 00:00:22,290
As a reminder, this file is just a little bit of a scratch pad for us to play around with JavaScript

6
00:00:22,290 --> 00:00:24,660
and view concepts outside of our project.

7
00:00:24,990 --> 00:00:28,060
What I'm going to begin with here is declaring an array of numbers.

8
00:00:28,080 --> 00:00:33,900
I'm going to call it const numbers, and I'm going to provide it with five elements one, two, three,

9
00:00:33,900 --> 00:00:34,710
four, five.

10
00:00:35,070 --> 00:00:36,180
And here's what I want to do.

11
00:00:36,420 --> 00:00:41,020
I'd like to create a new array consisting of the squares of these numbers.

12
00:00:41,070 --> 00:00:43,590
So I want to multiply each number by itself.

13
00:00:44,040 --> 00:00:50,460
So what I need to do here is apply the same operation to every single element within an array and then

14
00:00:50,460 --> 00:00:53,250
return those results in a brand new array.

15
00:00:53,640 --> 00:00:58,620
So of course, the old school way to do this is to use a four loop and iterate over every element.

16
00:00:58,830 --> 00:01:03,030
Do some kind of calculation and then push the result into a brand new array.

17
00:01:03,300 --> 00:01:07,650
The map method offers us a really convenient way to do this in a single line.

18
00:01:07,920 --> 00:01:13,470
So right here I'm going to declare a new constant called squares, and I know that I need to form my

19
00:01:13,470 --> 00:01:16,020
squares array from my starter numbers.

20
00:01:16,020 --> 00:01:16,350
Right.

21
00:01:16,620 --> 00:01:21,420
And then in order to iterate over every element, two numbers and then return the result of some kind

22
00:01:21,420 --> 00:01:22,890
of operation in a new array.

23
00:01:23,010 --> 00:01:24,630
I'm going to use the map method.

24
00:01:25,050 --> 00:01:31,050
The map method accepts a function as the argument, and that function is going to specify what to do

25
00:01:31,050 --> 00:01:33,090
with every single individual element.

26
00:01:33,330 --> 00:01:39,060
So right here, I'm going to provide a inline arrow function and I'm going to be iterating over each

27
00:01:39,060 --> 00:01:40,710
number one at a time.

28
00:01:40,710 --> 00:01:43,590
So right here I'm going to put the singular number.

29
00:01:43,890 --> 00:01:49,710
So a number is going to represent one on the first loop, then two, then three, then four and five.

30
00:01:49,980 --> 00:01:56,220
And from the body of this function, I specify what I want to return for that position in our brand

31
00:01:56,220 --> 00:01:56,940
new array.

32
00:01:57,270 --> 00:02:03,900
So if I want to return the square of each number that I iterate over, I can return number times number,

33
00:02:04,830 --> 00:02:05,490
save this.

34
00:02:05,670 --> 00:02:10,080
And so I'm going to iterate over every number one at a time, take it square and return it.

35
00:02:10,200 --> 00:02:15,690
And then JavaScript is going to take those five return values and store them in a new array called squares.

36
00:02:16,020 --> 00:02:23,670
So if I output squares below and then I run this file using node inside our source directory, there

37
00:02:23,670 --> 00:02:25,290
is our playground dot just filed.

38
00:02:25,770 --> 00:02:32,460
We're going to get the squares array 149, 16, 25 and of course we can simplify the syntax as long

39
00:02:32,460 --> 00:02:37,650
as we get a or as long as we provide rather a function inside the map method.

40
00:02:37,830 --> 00:02:39,210
Any syntax here will work.

41
00:02:39,450 --> 00:02:45,300
So for example, you may know that we can use an implicit return in a one line arrow function.

42
00:02:45,310 --> 00:02:49,680
So for example, I can return number by number automatically.

43
00:02:49,770 --> 00:02:50,250
Just like.

44
00:02:50,250 --> 00:02:55,650
So I'm going to remove the return keyword, remove the curly braces around my function body.

45
00:02:55,830 --> 00:03:02,700
And this syntax is valid whenever we have a one line evaluation and we want to implicitly return a calculation.

46
00:03:02,820 --> 00:03:05,010
So this will give us the exact same result.

47
00:03:05,340 --> 00:03:07,140
I can prove that by rerunning the file.

48
00:03:07,170 --> 00:03:07,980
Totally valid.

49
00:03:08,160 --> 00:03:13,830
And then if you also know in arrow functions that if you only have one parameter in this case we do

50
00:03:13,830 --> 00:03:14,880
have only one parameter.

51
00:03:14,970 --> 00:03:17,520
We do not need the extra parameters around it.

52
00:03:17,520 --> 00:03:19,860
So I can actually write a function like this.

53
00:03:20,130 --> 00:03:25,710
Just a number followed by my pointer sign the arrow sign.

54
00:03:25,710 --> 00:03:28,290
It looks like it looks like my prettier is actually auto correcting me.

55
00:03:28,470 --> 00:03:30,270
But this is totally valid syntax.

56
00:03:30,690 --> 00:03:34,140
It's just that when I save the file, prettier is returning it back to its preferred approach.

57
00:03:34,140 --> 00:03:36,600
But this is also valid JavaScript code.

58
00:03:36,960 --> 00:03:38,940
The point is that we're feeding a function to map.

59
00:03:39,090 --> 00:03:43,680
Map is running that function for every single element and then taking all of those return values and

60
00:03:43,680 --> 00:03:46,830
packaging them up in a brand new array called squares.

61
00:03:47,100 --> 00:03:48,700
That's all there is to cover in this lesson.

62
00:03:48,720 --> 00:03:50,190
So I will see in the next one.
