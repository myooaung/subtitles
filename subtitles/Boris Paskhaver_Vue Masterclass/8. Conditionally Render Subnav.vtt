WEBVTT
1
00:00:00.630 --> 00:00:01.530
All right.

2
00:00:01.530 --> 00:00:07.710
So to kick this lesson off, I'd like to discuss two separate details that are worth knowing about how

3
00:00:07.710 --> 00:00:11.370
the sub nav works on the official Google Careers Web page.

4
00:00:11.370 --> 00:00:14.070
And we're going to try to emulate these features throughout our app.

5
00:00:14.460 --> 00:00:21.030
The first thing to note is that the sub nav appears on both the primary main page and the jobs page.

6
00:00:21.210 --> 00:00:27.030
Now in our app, we don't really have the concept of pages yet or navigating between pages.

7
00:00:27.180 --> 00:00:29.520
But rest assured, we will get there eventually.

8
00:00:29.760 --> 00:00:36.570
But the important thing to note is that only on the jobs page right here do we see the actual number

9
00:00:36.570 --> 00:00:39.780
of jobs matched as well as that search icon.

10
00:00:39.900 --> 00:00:45.630
If I go back to the main page, which I can get to just by clicking this icon, this is our home page

11
00:00:45.630 --> 00:00:47.220
where the user searches for a job.

12
00:00:47.400 --> 00:00:51.360
You'll notice that the sub nav has nothing here, so it's completely empty.

13
00:00:51.570 --> 00:00:57.330
We still have a sub nav on this page, and that's why we've been able to get away with simply having

14
00:00:57.330 --> 00:01:01.860
a sub nav and not worrying at all about the page that we're on a quote unquote.

15
00:01:02.040 --> 00:01:08.640
However, it's important to note that on the jobs page only is where we see this sub nav appear.

16
00:01:08.890 --> 00:01:11.790
Okay, that's the first important detail to note.

17
00:01:12.120 --> 00:01:17.280
The second important detail to note, and this is a little bit harder to find, is that this sub nav

18
00:01:17.280 --> 00:01:20.730
is only present when the user is logged in.

19
00:01:20.910 --> 00:01:24.810
So I'm currently logged into my Google account, which is why I'm seeing the sub nav.

20
00:01:24.960 --> 00:01:27.330
But let me show you what happens when I log out.

21
00:01:27.350 --> 00:01:32.940
So I'm going to go here and click sign out and you'll notice when I get to this page we don't actually

22
00:01:32.940 --> 00:01:34.680
see a sub nav, right?

23
00:01:34.920 --> 00:01:39.960
So the sub nav is conditional or dependent on being logged in.

24
00:01:39.990 --> 00:01:44.550
That should be a hint for how we can actually implement this kind of logic on our side of things.

25
00:01:44.760 --> 00:01:49.980
So in this lesson, let's focus on this design aspect and we'll come back to the other aspect, the

26
00:01:50.190 --> 00:01:55.560
other one being the presentation of the number of job results only on the jobs page.

27
00:01:55.770 --> 00:01:57.300
We'll come back to that in a second.

28
00:01:57.390 --> 00:02:03.180
In this lesson, I want to focus on this conditional rendering of the sub nav only if we are logged

29
00:02:03.180 --> 00:02:04.080
in as a user.

30
00:02:04.770 --> 00:02:06.390
So right now here's our app.

31
00:02:06.390 --> 00:02:11.790
You can see similarly it's always appearing and we only want the sub nav to appear when we are signed

32
00:02:11.790 --> 00:02:12.000
in.

33
00:02:12.330 --> 00:02:16.920
So if I go back to my text editor, here we are in our sub nav.

34
00:02:17.040 --> 00:02:20.030
Where I really want to go is our main nav component.

35
00:02:20.880 --> 00:02:27.240
And here you'll notice we are always rendering a sub nav no matter what, and we need to conditionally

36
00:02:27.240 --> 00:02:27.730
render it.

37
00:02:27.930 --> 00:02:33.180
So whenever you hear that word conditional meaning there's two pathways of logic or two branches of

38
00:02:33.570 --> 00:02:34.410
ways we can go.

39
00:02:34.740 --> 00:02:38.100
The immediate thing that should come to mind is a V if directive.

40
00:02:38.340 --> 00:02:45.800
Remember the V if directive gets a boolean value and only if it's true will view render that element.

41
00:02:45.810 --> 00:02:48.850
It can be an HTML element or it can be a component in this case.

42
00:02:49.140 --> 00:02:55.560
And if I scroll down in my main nav component, you'll notice that in my data object we actually already

43
00:02:55.560 --> 00:02:58.560
have and is logged in a data property.

44
00:02:58.560 --> 00:03:04.170
We're using it to conditionally render either the action button to log in or the profile image when

45
00:03:04.170 --> 00:03:05.010
the user's logged in.

46
00:03:05.640 --> 00:03:10.170
So now that we have this actual infrastructure in place, it's going to be super simple to add it to

47
00:03:10.170 --> 00:03:10.740
our sub nav.

48
00:03:10.980 --> 00:03:14.100
So right here I'm again going to use the V if directive.

49
00:03:14.340 --> 00:03:16.740
So I'm telling you only render the sub nav.

50
00:03:16.740 --> 00:03:21.750
If this evaluates the true and the property that I want to associate this with is going to be this one

51
00:03:21.750 --> 00:03:23.550
right here is logged in.

52
00:03:23.790 --> 00:03:25.710
So I'm going to say is logged in.

53
00:03:26.620 --> 00:03:31.200
So let's talk about how this is going to work and then we'll test it out in our browser when the page

54
00:03:31.200 --> 00:03:37.530
loads the is logged in data property is set to false, which means this will add value to false, which

55
00:03:37.530 --> 00:03:39.990
means our sub nav will not render.

56
00:03:40.380 --> 00:03:46.620
Afterwards, the user will click on the sign in button that is going to trigger the log in user method

57
00:03:46.620 --> 00:03:48.690
to run that method as defined right here.

58
00:03:48.960 --> 00:03:55.110
This is going to flip the value of the is logged in data property to true forcing view to re render

59
00:03:55.320 --> 00:04:01.530
which will force this vehicle to re-evaluate to true which will then render this sub nav once the user

60
00:04:01.530 --> 00:04:02.300
is logged in.

61
00:04:02.310 --> 00:04:07.110
So this is going to emulate the exact same behavior we see on the Google career site.

62
00:04:07.380 --> 00:04:08.700
So let's go to my browser.

63
00:04:09.510 --> 00:04:10.020
Here we are.

64
00:04:10.020 --> 00:04:12.060
I'm just going to refresh this page just to be safe.

65
00:04:12.480 --> 00:04:15.930
And when I click Sign in Beautiful, now we are signed in.

66
00:04:15.930 --> 00:04:20.010
It's going to take a second for the image to load, but you'll see the seven have only appears on the

67
00:04:20.010 --> 00:04:25.920
user is signed in and if we were to code this in reverse, in other words, if we were to create a way

68
00:04:25.920 --> 00:04:31.800
for the user to log out, all we would have to do is flip that is logged in property back to false and

69
00:04:31.800 --> 00:04:35.340
that would make the sub nef disappear because view would once again be render.

70
00:04:35.340 --> 00:04:39.690
So we would emulate the exact same behavior as we have on the official careers website.

71
00:04:39.930 --> 00:04:44.400
Right now, we don't have a logged in, logged out capacity because we're not really logging in, we're

72
00:04:44.400 --> 00:04:48.090
not actually doing anything with the backend, but hopefully you understand the idea.

73
00:04:48.330 --> 00:04:48.570
All right.

74
00:04:48.750 --> 00:04:50.250
That's all there is to cover in this lesson.

75
00:04:50.250 --> 00:04:51.660
So I will see you in the next one.
