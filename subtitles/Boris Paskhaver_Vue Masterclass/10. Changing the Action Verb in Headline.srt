1
00:00:00,430 --> 00:00:01,330
All right.

2
00:00:01,330 --> 00:00:03,630
So I am super excited for this lesson.

3
00:00:03,640 --> 00:00:05,200
This is going to be a special one.

4
00:00:05,410 --> 00:00:10,810
In this lesson, we're finally going to wire up the logic to dynamically change our action verb every

5
00:00:10,810 --> 00:00:13,210
couple of seconds when our app loads.

6
00:00:13,600 --> 00:00:18,850
So the first thing I'd like you to focus on in our new headline component is this H1 right here.

7
00:00:18,850 --> 00:00:20,860
It has the text build for everyone.

8
00:00:21,160 --> 00:00:25,360
And what we want to do is swap this action verb every number of seconds.

9
00:00:25,540 --> 00:00:31,030
We actually have four available options and they are build, create, design and code.

10
00:00:31,420 --> 00:00:37,270
But what's interesting is if you look at the Google Careers website, this text afterwards does not

11
00:00:37,270 --> 00:00:37,870
change.

12
00:00:37,870 --> 00:00:39,220
It stays constant.

13
00:00:39,520 --> 00:00:45,250
So the only part of the template that's actually dynamic is the very first word, the action verb.

14
00:00:45,550 --> 00:00:50,230
All right, so let's start wiring up our logic to be able to replace that dynamically.

15
00:00:50,230 --> 00:00:55,750
So if it's dynamic, we obviously need to use some bit of our JavaScript view component logic here.

16
00:00:56,410 --> 00:01:03,010
So in our data object, instead of having a property called sample, I'm going to have a property called

17
00:01:03,010 --> 00:01:05,770
Action Owl started off with the value built.

18
00:01:06,800 --> 00:01:11,990
So now, instead of literally hard coding the word building here, I will of course reference our action

19
00:01:11,990 --> 00:01:12,770
data property.

20
00:01:12,950 --> 00:01:13,790
How do we do that?

21
00:01:13,820 --> 00:01:18,110
Well, hopefully you should know by now it's going to be our double curly braces in here.

22
00:01:18,260 --> 00:01:19,400
I'll render action.

23
00:01:20,400 --> 00:01:20,730
All right.

24
00:01:20,940 --> 00:01:21,810
So this should work.

25
00:01:21,810 --> 00:01:23,850
This should display the text, build for everyone.

26
00:01:24,000 --> 00:01:26,910
But of course, we're not actually doing anything to change it.

27
00:01:26,920 --> 00:01:28,560
So now let's build that logic up.

28
00:01:29,040 --> 00:01:31,740
So what I'm going to do is in created.

29
00:01:32,910 --> 00:01:35,460
I could potentially put this logic.

30
00:01:35,640 --> 00:01:43,050
But what I want to do is I want to incorporate into a component method and then have my created lifecycle

31
00:01:43,110 --> 00:01:44,220
call that method.

32
00:01:44,430 --> 00:01:48,570
So in here I'm going to call a method called change title.

33
00:01:50,320 --> 00:01:56,140
So what this communicates to somebody reading this is whenever the component is created, I want the

34
00:01:56,140 --> 00:02:01,030
view lifecycle hook to automatically register and trigger and it's going to run a method called this

35
00:02:01,030 --> 00:02:01,990
that change title.

36
00:02:02,170 --> 00:02:06,220
We know that we can define methods on a component methods property.

37
00:02:06,460 --> 00:02:13,720
So right here I'm going to define a methods object and here I'll define a method with that name change

38
00:02:13,720 --> 00:02:14,110
title.

39
00:02:14,170 --> 00:02:18,460
So the name is entirely up to us, but change title feels like an appropriate name to me.

40
00:02:18,580 --> 00:02:22,630
And again, the only reason why I did this is this method is going to take five or six lines.

41
00:02:22,780 --> 00:02:24,910
And I don't want to cram all this logic into here.

42
00:02:24,940 --> 00:02:26,800
I want to describe what I'm actually doing.

43
00:02:26,980 --> 00:02:29,950
And this to me, is a little bit more elegant approach for organization.

44
00:02:30,400 --> 00:02:30,700
Okay.

45
00:02:31,090 --> 00:02:36,220
So let's begin by defining an array of strings and I'll call it actions.

46
00:02:36,220 --> 00:02:40,720
And this will be the four action verbs that I want to alternate between.

47
00:02:40,930 --> 00:02:46,930
So I'll start with build right here, then create, then design, then code.

48
00:02:48,570 --> 00:02:48,900
Okay.

49
00:02:49,260 --> 00:02:50,820
So what do I want to do?

50
00:02:50,850 --> 00:02:57,680
Well, what I want to do is I want to find the current verb within my array.

51
00:02:57,720 --> 00:03:03,870
So, for example, if my current action is build, I want to find build within my array and then I want

52
00:03:03,870 --> 00:03:04,980
to move to the next one.

53
00:03:04,990 --> 00:03:06,780
So if it's build, I move to create.

54
00:03:06,780 --> 00:03:08,640
If it's create, I move to design.

55
00:03:08,910 --> 00:03:14,370
The tricky part, of course, is towards the end, because when it's code, I want to move back to build

56
00:03:14,370 --> 00:03:15,690
back to the beginning of the array.

57
00:03:16,050 --> 00:03:19,860
So for now, let's define a constant called the current action index.

58
00:03:21,210 --> 00:03:25,230
So this will be the index in the array of my current action verb.

59
00:03:25,440 --> 00:03:31,320
So what I'm going to do is call in method available in JavaScript on an array called index of and that

60
00:03:31,320 --> 00:03:33,480
will return the index of a given element.

61
00:03:33,720 --> 00:03:34,980
What do I want to search for?

62
00:03:34,990 --> 00:03:41,340
I want to search for my current action verb, which I have available on my action property in data which

63
00:03:41,340 --> 00:03:42,990
I can access using the this keyword.

64
00:03:43,260 --> 00:03:45,510
So I want to put in this dot action.

65
00:03:46,350 --> 00:03:49,470
For example, when the component starts up, the action will be build.

66
00:03:49,590 --> 00:03:54,960
So this will return an index of zero because that is the array index where build is.

67
00:03:55,170 --> 00:03:55,470
All right.

68
00:03:55,710 --> 00:03:58,860
The next thing I want to do is get the next action index.

69
00:03:58,860 --> 00:04:00,960
So the index of the next action in line.

70
00:04:01,350 --> 00:04:07,860
So you might think it would be as simple as saying, take my current action index and add one.

71
00:04:08,010 --> 00:04:09,150
And that would work.

72
00:04:09,270 --> 00:04:13,290
But that would only work some of the time because it would not work for code.

73
00:04:13,560 --> 00:04:15,780
Code is index position three.

74
00:04:15,900 --> 00:04:20,580
And if we add one, we're going to get to index position four, which does not exist in the array.

75
00:04:20,790 --> 00:04:22,980
So this would only work for the first couple of elements.

76
00:04:23,250 --> 00:04:25,710
So we can use a little bit of a mathematical trick here.

77
00:04:26,690 --> 00:04:30,800
Which is I can wrap this in parentheses and I can do modulo four.

78
00:04:31,340 --> 00:04:33,220
Okay, let me just show you how this is going to work.

79
00:04:33,230 --> 00:04:37,220
But this is just going to ensure that we don't escape the confines of the array.

80
00:04:37,550 --> 00:04:42,800
If we are on an action of code, then our current action index will be three.

81
00:04:43,840 --> 00:04:44,170
Right.

82
00:04:44,290 --> 00:04:47,410
Which means when we add one, two, three, we're going to get four.

83
00:04:48,190 --> 00:04:50,600
But that index does not exist.

84
00:04:50,620 --> 00:04:56,230
However, we're going to take the modulo of four, which means the remainder when four is divided by

85
00:04:56,230 --> 00:04:56,530
four.

86
00:04:56,710 --> 00:04:59,830
The remainder one four is divided by four is zero.

87
00:05:00,670 --> 00:05:06,180
And zero is the actual array index we want, which is the array index of our built string.

88
00:05:06,610 --> 00:05:10,480
So this will work when we're on code and if it's anything else, it's going to work as well.

89
00:05:10,510 --> 00:05:15,430
So for example, let's imagine we're on the create string right here that sits at index one.

90
00:05:15,850 --> 00:05:20,110
In that case, we're going to get index one plus one, which is going to be two.

91
00:05:20,530 --> 00:05:23,110
Two modulo four is going to be the evaluation.

92
00:05:23,770 --> 00:05:28,900
Whenever you have a situation like this where the left hand operand is smaller than the right hand operand,

93
00:05:29,110 --> 00:05:34,780
the remainder when two is divided by four is actually two because four doesn't go into two at all.

94
00:05:34,990 --> 00:05:38,350
So the closest full value that it goes into is technically zero.

95
00:05:38,530 --> 00:05:41,320
So John Johnson says four goes into zero.

96
00:05:41,410 --> 00:05:43,490
The remainder is going to be two.

97
00:05:43,660 --> 00:05:46,480
So two modulo four is going to be two.

98
00:05:46,750 --> 00:05:49,840
Three, modulo four is going to be three, etc. and four.

99
00:05:49,840 --> 00:05:52,420
Modulo four will evaluate to zero, which is what we want.

100
00:05:52,720 --> 00:05:57,790
So in short, this bit of logic right here will ensure that we always have a value between zero and

101
00:05:57,790 --> 00:06:01,420
three inclusive, which means we're never going to escape the confines of the array.

102
00:06:02,380 --> 00:06:07,240
So now that I have my next action index, I want to get my actual next action, my next string.

103
00:06:07,600 --> 00:06:09,700
So what I want to do is say next action.

104
00:06:10,150 --> 00:06:16,270
And given that I have my index, I can take my actions array and simply index into the next action index

105
00:06:16,480 --> 00:06:18,670
and that'll get me my next string.

106
00:06:18,790 --> 00:06:19,860
But we're not done yet.

107
00:06:19,870 --> 00:06:24,910
We have to, of course, overwrite our action data property.

108
00:06:25,120 --> 00:06:30,430
So of course, we can do that by referencing the this keyword, getting my action data property and

109
00:06:30,430 --> 00:06:32,260
overriding it to my next action.

110
00:06:33,760 --> 00:06:34,150
Okay.

111
00:06:34,420 --> 00:06:38,440
So this is a good start, but we are not done quite yet.

112
00:06:38,470 --> 00:06:39,040
Why not?

113
00:06:39,250 --> 00:06:44,890
Well, the way it currently works is our created life cycle hook will run once, which means it's going

114
00:06:44,890 --> 00:06:51,160
to run change title, which means we're going to change the data property from the action property to

115
00:06:51,160 --> 00:06:53,440
be more specific from build to create.

116
00:06:53,560 --> 00:06:55,910
But that's only going to run once.

117
00:06:55,930 --> 00:06:57,280
We don't want it to run once.

118
00:06:57,280 --> 00:06:58,750
We want it to continue running.

119
00:06:59,050 --> 00:07:02,950
So how do we allow a bit of code to run on an interval?

120
00:07:03,190 --> 00:07:03,970
That's a big hint.

121
00:07:04,150 --> 00:07:08,440
We want to use the built in set interval JavaScript function.

122
00:07:08,650 --> 00:07:13,150
So right here within change title, I'm going to say set interval.

123
00:07:14,160 --> 00:07:14,640
All right.

124
00:07:14,970 --> 00:07:17,130
And in here, I'm going to put my function.

125
00:07:17,670 --> 00:07:23,190
And the second argument to say interval, of course, is the amount of milliseconds I want to wait between

126
00:07:23,190 --> 00:07:24,060
each execution.

127
00:07:24,240 --> 00:07:27,690
I believe on the official Google Google Careers website, just 5 seconds.

128
00:07:27,870 --> 00:07:32,250
But just to keep it a little bit simpler and quicker for us in the browser, I'm going to do 3 seconds,

129
00:07:32,430 --> 00:07:34,680
so I'll put 3000 milliseconds.

130
00:07:34,920 --> 00:07:41,490
And of course what I want to do is create a line break here and copy this logic into my set interval

131
00:07:41,580 --> 00:07:43,770
function like so.

132
00:07:44,130 --> 00:07:44,430
All right.

133
00:07:44,430 --> 00:07:51,360
So every 3 seconds, immediately consecutively, non stopping, we're going to tell JavaScript to rerun

134
00:07:51,360 --> 00:07:57,960
this logic which will get the current action, whatever it is, get the next one or Intel view.

135
00:07:57,960 --> 00:08:03,930
I'm changing the data property which should automatically render and keep this action changing every

136
00:08:03,930 --> 00:08:05,010
3 seconds.

137
00:08:05,340 --> 00:08:10,920
So this is a great place to start, but we are not done quite yet because as we talked about in the

138
00:08:10,920 --> 00:08:14,910
previous lesson, if we just leave set animal like this, it's going to continue running.

139
00:08:14,910 --> 00:08:20,490
We're not actually saving this interval anywhere and thus we can't force this component to stop this

140
00:08:20,490 --> 00:08:25,830
logic whenever this component is, for example, uncounted when the user goes to another page and that

141
00:08:25,830 --> 00:08:26,610
can lead to errors.

142
00:08:26,850 --> 00:08:30,540
Whenever we start an interval, we always want to make sure that we shut it down.

143
00:08:31,200 --> 00:08:32,550
But how can we shut it down?

144
00:08:32,850 --> 00:08:35,070
Given that we don't have a reference to this interval?

145
00:08:35,160 --> 00:08:39,690
We can, of course, get the return value of this and save it to a constant or a variable.

146
00:08:39,870 --> 00:08:44,820
But that is going to be done running as soon as the change title method is done running well.

147
00:08:44,820 --> 00:08:50,220
What we can do to solve this problem is save this interval as part of the components state.

148
00:08:50,730 --> 00:08:51,990
So let me show you how that's going to work.

149
00:08:52,230 --> 00:08:55,350
Let's imagine we have another data property called Interval.

150
00:08:56,630 --> 00:09:01,400
And when the component is first starting up, I need some initial value and I'm just going to provide

151
00:09:01,400 --> 00:09:04,640
the JavaScript value of now, which is sort of like nothing, right?

152
00:09:04,850 --> 00:09:06,350
Interval is going to be set to two now.

153
00:09:06,680 --> 00:09:13,100
And then when this change tidal method runs in, it's only going to run once this set interval function

154
00:09:13,100 --> 00:09:17,030
is going to give me back an interval and I can save it in the component states.

155
00:09:17,060 --> 00:09:20,060
I can reuse it later by simply doing this.

156
00:09:20,060 --> 00:09:23,780
That interval equals that interval object that I get back.

157
00:09:23,960 --> 00:09:28,970
And when I'm referencing this, that interval, I'm simply referencing this data property that is available

158
00:09:28,970 --> 00:09:29,990
for me to write to.

159
00:09:30,930 --> 00:09:34,030
I just want to reiterate, so because it's a little bit confusing here.

160
00:09:34,270 --> 00:09:38,590
Change title is only going to run once when the component is created.

161
00:09:38,920 --> 00:09:44,980
However, Change Title will invoke this interval JavaScript function, which behind the scenes will

162
00:09:44,980 --> 00:09:46,690
tell JavaScript every 3 seconds.

163
00:09:46,810 --> 00:09:51,190
Run this logic and that interval object will handle all of that execution.

164
00:09:51,430 --> 00:09:57,550
We're going to save that interval object within this interval data property so we can always access

165
00:09:57,550 --> 00:10:00,160
it in any other component method that we want.

166
00:10:00,700 --> 00:10:05,800
So as you might guess, the final thing that we need to do is when the component is being encountered,

167
00:10:05,800 --> 00:10:11,020
when the user, let's say, navigates away from this page, we want to get that interval and tell JavaScript

168
00:10:11,020 --> 00:10:11,650
to clear it.

169
00:10:11,980 --> 00:10:14,260
So I'm going to add another lifecycle hook.

170
00:10:15,010 --> 00:10:20,350
We have not seen this one before, but it's before an amount and that's before the component is removed

171
00:10:20,350 --> 00:10:22,270
from the DOM from the HTML.

172
00:10:22,540 --> 00:10:23,680
What do we want to do here?

173
00:10:23,920 --> 00:10:26,050
We want to clear our interval.

174
00:10:26,350 --> 00:10:29,860
And how do we get reference to an interval if we defined it in this method?

175
00:10:30,070 --> 00:10:33,580
Well, we save that interval object to this property on data.

176
00:10:33,820 --> 00:10:36,400
So we can simply reference this interval right here.

177
00:10:38,080 --> 00:10:38,830
And that is it.

178
00:10:39,040 --> 00:10:43,990
So whenever our component is removed, we will clear this interval to ensure this logic doesn't continue

179
00:10:43,990 --> 00:10:45,100
running in the background.

180
00:10:45,340 --> 00:10:48,550
Now that it's no longer needed to change our properties.

181
00:10:49,150 --> 00:10:52,890
All right, lots taken in this lesson, but that is everything there is to cover.

182
00:10:52,900 --> 00:10:55,780
So let's see our results in the browser.

183
00:10:55,780 --> 00:10:57,550
I'm going to navigate to our browser page.

184
00:10:58,000 --> 00:10:59,080
Let me refresh quickly.

185
00:11:00,590 --> 00:11:02,440
And build for everyone.

186
00:11:02,450 --> 00:11:03,410
Let's wait a couple seconds.

187
00:11:03,410 --> 00:11:04,130
There it is.

188
00:11:04,130 --> 00:11:06,200
Create for everyone automatically.

189
00:11:06,200 --> 00:11:07,970
Ooh, and there's design for everyone.

190
00:11:07,970 --> 00:11:09,140
Can we wait a couple more seconds?

191
00:11:09,380 --> 00:11:10,460
There is code for everyone.

192
00:11:10,460 --> 00:11:11,090
Beautiful.

193
00:11:11,300 --> 00:11:14,990
And let me just show you how this is working in our elements and in our dev tool.

194
00:11:15,000 --> 00:11:16,160
So if I go to my.

195
00:11:17,600 --> 00:11:18,920
Element of spectre here.

196
00:11:18,920 --> 00:11:22,040
You can see here every 3 seconds, this word will change automatically.

197
00:11:22,040 --> 00:11:23,120
Viewers going to inject it.

198
00:11:23,120 --> 00:11:28,970
Because remember, our property, our action property on our data object is changing, which is forcing

199
00:11:28,970 --> 00:11:32,780
view to re render every 3 seconds and thus it does the work for us.

200
00:11:32,780 --> 00:11:33,020
Right?

201
00:11:33,020 --> 00:11:37,100
We don't need to worry about how it's replacing elements and injecting elements.

202
00:11:37,100 --> 00:11:38,780
It's going to take care of all that for us.

203
00:11:39,020 --> 00:11:41,660
But we've made a lot of progress into getting what we want.

204
00:11:41,660 --> 00:11:44,840
We start to worry about the color, by the way, but we'll get there eventually.

205
00:11:45,170 --> 00:11:47,420
But now let me show you what's going on in The View DevTools.

206
00:11:48,500 --> 00:11:54,980
If I go into my headline component, you can see the action here is changing every couple of seconds.

207
00:11:55,100 --> 00:12:00,170
So there's design, there's code, etc. You'll notice that this interval is set to four.

208
00:12:00,170 --> 00:12:04,850
You can ignore that it's actually storing the complete interval object, which we can clear whenever

209
00:12:04,850 --> 00:12:06,680
we announced this component.

210
00:12:06,710 --> 00:12:10,790
There's no real way for me to demonstrate this right now because we just have a single page and there's

211
00:12:10,790 --> 00:12:14,750
no way for me to force the tear down of this, such as by navigating to another page.

212
00:12:14,960 --> 00:12:21,650
But rest assured, whenever we remove or on mount this headline component from our DOM, then we're

213
00:12:21,650 --> 00:12:26,390
going to run that clear interval function to clear this consecutive change in code so we can see our

214
00:12:26,390 --> 00:12:29,270
action changing, we can see the results changing in the browser.

215
00:12:29,270 --> 00:12:31,010
And this is a huge step forward.

216
00:12:31,250 --> 00:12:32,630
So I hope you've had a lot of fun.

217
00:12:32,630 --> 00:12:34,070
I certainly have done in this hour.

218
00:12:34,310 --> 00:12:38,570
And we're going to continue chipping away at this and start working on the colors and the upcoming lessons.
