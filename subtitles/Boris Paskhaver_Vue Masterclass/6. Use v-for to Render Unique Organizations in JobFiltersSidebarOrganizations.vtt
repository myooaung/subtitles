WEBVTT
1
00:00:00.670 --> 00:00:01.430
Okay.

2
00:00:01.440 --> 00:00:07.830
So now we have a computed property called Unique Organizations, which is a set of strings, unique

3
00:00:07.830 --> 00:00:11.890
strings representing the unique organizations across all of my jobs.

4
00:00:12.210 --> 00:00:18.390
So what I want to do in this lesson is use the V4 directive to iterate over that set of strings and

5
00:00:18.390 --> 00:00:20.460
render a list item for each one.

6
00:00:20.760 --> 00:00:23.640
Previously we hardcoded a bunch of list items here.

7
00:00:23.820 --> 00:00:29.220
Now I want to dynamically generate them based on however many unique organizations I have.

8
00:00:29.640 --> 00:00:31.110
Now, a few things to note here.

9
00:00:31.290 --> 00:00:33.630
A set is technically unordered.

10
00:00:33.660 --> 00:00:35.100
There is no concept of order.

11
00:00:35.400 --> 00:00:41.580
So what that means is we can still iterate over it, but we can't guarantee a deterministic order of

12
00:00:41.580 --> 00:00:42.180
iteration.

13
00:00:42.420 --> 00:00:46.830
When you iterate over an array, you can guarantee yourself that JavaScript is going to go through it

14
00:00:46.830 --> 00:00:50.940
in the same order each time with a set that's not technically guaranteed.

15
00:00:51.240 --> 00:00:55.500
With that said, we don't really care about iterating over the set in any kind of order.

16
00:00:55.650 --> 00:01:00.840
As long as we go over all of its elements, all of its unique organizations, in other words, we should

17
00:01:00.840 --> 00:01:01.260
be good.

18
00:01:01.500 --> 00:01:06.960
Even if the user, for example, refreshes the page and sees the six organizations in a different order

19
00:01:06.960 --> 00:01:07.800
in the checkboxes.

20
00:01:07.980 --> 00:01:12.540
That really doesn't concern me too much because it's not that large of a number and the user really

21
00:01:12.540 --> 00:01:16.950
doesn't care about the order so much as they care about spotting which organization they care about

22
00:01:16.950 --> 00:01:18.120
and clicking that checkbox.

23
00:01:18.330 --> 00:01:23.460
So I'm okay with this approach and using a set for the purposes of uniqueness really helped us solve

24
00:01:23.460 --> 00:01:24.600
this problem pretty simply.

25
00:01:24.930 --> 00:01:28.650
So let's get to it in my job, just your sidebar organization's component.

26
00:01:28.890 --> 00:01:31.590
I'm going to remove my last three list items.

27
00:01:32.560 --> 00:01:36.790
I'm going to keep my first one because I want it to be the basis of my V4 directive.

28
00:01:36.970 --> 00:01:39.250
We have to specify what we want to replicate.

29
00:01:39.430 --> 00:01:41.020
However many times we are iterating.

30
00:01:41.230 --> 00:01:45.850
So I want to replicate this ally for however many unique organizations I have.

31
00:01:46.150 --> 00:01:50.860
So right here I'm going to use the V4 directive and they have to provide a variable and then what I'm

32
00:01:50.860 --> 00:01:51.520
iterating over.

33
00:01:51.790 --> 00:01:57.540
So I want to iterate over every organization in and what do I reference here?

34
00:01:57.550 --> 00:01:59.190
I'm going to reference a set.

35
00:01:59.500 --> 00:01:59.830
All right.

36
00:01:59.830 --> 00:02:01.120
And where am I going to get that set?

37
00:02:01.120 --> 00:02:05.350
And I'm going to get that from my computed property below called Unique Organizations.

38
00:02:05.590 --> 00:02:07.010
And where is that going to get it set?

39
00:02:07.030 --> 00:02:11.260
It's going to get it by talking to the getter, which is going to perform some calculations in the store

40
00:02:11.260 --> 00:02:11.650
state.

41
00:02:11.980 --> 00:02:16.360
I know this logic is now pretty complex, or at least pretty, pretty couple levels deep.

42
00:02:16.360 --> 00:02:16.690
Right.

43
00:02:16.840 --> 00:02:18.580
But I don't think it's super complicated.

44
00:02:18.580 --> 00:02:20.380
It's just multilayered in a sense.

45
00:02:20.770 --> 00:02:21.130
All right.

46
00:02:21.340 --> 00:02:27.040
So whenever we use V4 as a reminder, we have to provide a key attribute, and that represents a unique

47
00:02:27.040 --> 00:02:31.780
identifier by which Vue can identify these different allies and separate them.

48
00:02:32.050 --> 00:02:37.030
So luckily, we are iterating over a set of strings and a set guarantees uniqueness, so we might as

49
00:02:37.030 --> 00:02:39.580
well use each string as our unique identifier.

50
00:02:39.820 --> 00:02:43.480
So right here I'm going to use V bind to bind to the key.

51
00:02:43.810 --> 00:02:47.230
And the reason I'm doing this, of course, is so that I don't give a literal string here.

52
00:02:47.440 --> 00:02:53.530
What I want to provide as my dynamic key is the organization string that I'm iterating over in the current

53
00:02:53.530 --> 00:02:53.830
loop.

54
00:02:54.810 --> 00:02:57.540
So this is going to be one of my six organizations in order.

55
00:02:57.750 --> 00:02:58.170
All right.

56
00:02:58.470 --> 00:02:59.680
That takes care of the lie.

57
00:02:59.700 --> 00:03:06.030
The only thing that's left to do now is to replace some of our old hardcoded values here with our our

58
00:03:06.030 --> 00:03:08.040
new dynamic reference of organization.

59
00:03:08.310 --> 00:03:12.450
So right here, for this ID attribute, I'm going to make this bound.

60
00:03:12.450 --> 00:03:15.840
I'm going to use V bind to bind it to whatever is the value of organization.

61
00:03:17.270 --> 00:03:20.750
So again, this is going to be a string like YouTube or whatever it happens to be.

62
00:03:20.750 --> 00:03:21.440
We're iterating over it.

63
00:03:21.710 --> 00:03:23.120
I'm going to do the same thing for this.

64
00:03:23.120 --> 00:03:27.560
For attribute, we can use V bind to bind to any attribute on any HTML element.

65
00:03:27.950 --> 00:03:32.090
So I want to provide a dynamic value here, which is again going to be whatever organization we have

66
00:03:32.090 --> 00:03:32.420
to be.

67
00:03:32.750 --> 00:03:38.180
We happen to be iterating over in my V for loop and finally instead of hard coding a string, what we're

68
00:03:38.180 --> 00:03:42.410
going to do is dynamically render the organization string that we are iterating over.

69
00:03:44.120 --> 00:03:44.420
All right.

70
00:03:44.420 --> 00:03:48.410
So once again, to reiterate, we can totally use the V4 directive with a set.

71
00:03:48.620 --> 00:03:53.240
We can use it with any kind of editable data structure, like an array, like an object, like a set.

72
00:03:53.420 --> 00:03:55.460
The only thing here is because a set is unordered.

73
00:03:55.460 --> 00:04:01.100
We can't guarantee the order in which view is going to traverse those set elements, but we don't really

74
00:04:01.100 --> 00:04:01.460
care.

75
00:04:01.760 --> 00:04:05.810
So with that, we can transition back to our browser and see if we have what we expect.

76
00:04:06.590 --> 00:04:08.060
And here is my page.

77
00:04:08.060 --> 00:04:11.270
Here is my organization's accordion and tada!

78
00:04:11.300 --> 00:04:12.110
There it is.

79
00:04:12.380 --> 00:04:19.520
So we now have these six unique organizations from the hundred jobs that we received from our mock back

80
00:04:19.520 --> 00:04:20.960
end being rendered right here.

81
00:04:21.140 --> 00:04:26.540
And the beautiful part tomorrow is that if somebody on our mock backend and adds a new job, right,

82
00:04:26.600 --> 00:04:31.670
with a new organization that has not previously been seen before, our logic now is adaptable.

83
00:04:31.670 --> 00:04:34.100
It's simply going to create a set with an additional element.

84
00:04:34.340 --> 00:04:38.870
Our V4 directive is going to iterate over one more element in the set and it's going to render one more

85
00:04:38.870 --> 00:04:39.410
checkbox.

86
00:04:39.620 --> 00:04:44.660
So the design is really flexible no matter how many organizations we have, if we add some, if we lose

87
00:04:44.660 --> 00:04:45.410
some, etc..

88
00:04:45.650 --> 00:04:50.990
And again, one advantage with the getter approach is we've moved a lot of this logic away from our

89
00:04:50.990 --> 00:04:51.920
actual component.

90
00:04:51.920 --> 00:04:54.830
It's now living in that separate index Jast file.

91
00:04:54.890 --> 00:04:56.700
It's tested independently.

92
00:04:57.530 --> 00:04:58.430
It's pretty lightweight.

93
00:04:58.520 --> 00:05:03.380
We just have a single computed property that gets this for us and we just iterate over whatever it returns

94
00:05:03.380 --> 00:05:03.950
to us, right?

95
00:05:03.960 --> 00:05:05.780
So everything is looking really good.

96
00:05:05.930 --> 00:05:07.740
And now, of course, the user can check these.

97
00:05:07.760 --> 00:05:09.950
Nothing is going to happen right now, but that's fine.

98
00:05:10.100 --> 00:05:12.350
We're going to wire all that up later in the course.

99
00:05:12.470 --> 00:05:12.770
All right.

100
00:05:13.100 --> 00:05:16.910
That covers the V4 directive with a set as well as a little bit more on getters.

101
00:05:17.060 --> 00:05:19.430
In the very next lesson, we're going to see how we can test this.
