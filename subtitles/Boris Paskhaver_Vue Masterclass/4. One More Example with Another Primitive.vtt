WEBVTT
1
00:00:00.450 --> 00:00:01.380
All right.

2
00:00:01.380 --> 00:00:07.950
So in this lesson, I'd like to walk through one more example of using the ref function and the computed

3
00:00:07.950 --> 00:00:09.420
function from the View Library.

4
00:00:09.690 --> 00:00:14.250
And we'll deal with a totally different data type here, which is a string.

5
00:00:14.520 --> 00:00:17.640
So I'm going to remove all of the code I have here.

6
00:00:17.640 --> 00:00:22.020
I'm going to keep my ref and computed imports because I am going to need those.

7
00:00:22.260 --> 00:00:27.330
So let me introduce a similar problem to the one we encountered early, earlier, but now we're going

8
00:00:27.330 --> 00:00:28.410
to deal with strings.

9
00:00:28.710 --> 00:00:38.010
So let's say I have a name variable set to Boris and let's say I have a title variable and I want that

10
00:00:38.010 --> 00:00:44.460
to be equal to whatever is stored in name and plus the concatenated string, the great.

11
00:00:45.180 --> 00:00:45.630
All right.

12
00:00:45.870 --> 00:00:53.820
So obviously if I take a look at console.log title now, we're going to see that my title is going to

13
00:00:53.820 --> 00:00:55.470
be equal to Boris the Great.

14
00:00:55.470 --> 00:00:57.600
I've simply added together those two strings.

15
00:00:58.020 --> 00:01:04.320
Now, let's say what I'd like this program to do is watch for whenever my name variable changes.

16
00:01:04.530 --> 00:01:12.000
For example, if name changes to Peter, I'd like for my title string to now be updated to reflect the

17
00:01:12.000 --> 00:01:12.600
new name.

18
00:01:12.720 --> 00:01:16.920
So I'd like for title to be Peter the Great now.

19
00:01:17.160 --> 00:01:22.170
But of course with traditional JavaScript, if I run this file, you'll see we're still going to get

20
00:01:22.170 --> 00:01:23.310
Boris the Great.

21
00:01:23.610 --> 00:01:27.990
So let's reuse the ideas that we introduced in the previous lessons.

22
00:01:27.990 --> 00:01:28.290
All right.

23
00:01:28.590 --> 00:01:35.010
So to begin, whenever we want some kind of initial data that we're going to eventually watch, we use

24
00:01:35.010 --> 00:01:37.050
the ref function, right?

25
00:01:37.290 --> 00:01:45.000
So here, instead of using a plain string of Boris, I'm going to pass this string as an argument to

26
00:01:45.000 --> 00:01:46.080
the ref function.

27
00:01:46.320 --> 00:01:51.690
And what that is going to return to me is going to be a reactive object that the view function or the

28
00:01:51.690 --> 00:01:53.340
view library will construct for us.

29
00:01:53.640 --> 00:01:58.410
And that's object will have a value property set to my original string of Boris.

30
00:01:58.770 --> 00:02:02.160
Now keep in mind, this is something I forgot to mention the previous lesson.

31
00:02:02.370 --> 00:02:08.400
Because we have an object here, we can actually stick to a contract right here.

32
00:02:08.850 --> 00:02:09.180
Right?

33
00:02:09.180 --> 00:02:13.830
Because we're not actually going to ever reassign a variable anymore.

34
00:02:13.980 --> 00:02:19.890
We're going to reassign a value property on an object so we can maintain a constant reference to the

35
00:02:19.890 --> 00:02:23.160
same object throughout our program later on.

36
00:02:23.160 --> 00:02:28.890
If we ever want to do something like name value equals, we don't need to have a new variable in order

37
00:02:28.890 --> 00:02:30.990
to do that because we have this existing object.

38
00:02:31.230 --> 00:02:36.900
So now we can use cards to store our objects here instead of using LAT to store our original strings.

39
00:02:37.080 --> 00:02:39.870
All right, so what's the next thing that we want to do?

40
00:02:40.080 --> 00:02:41.940
Well, we want our title.

41
00:02:43.300 --> 00:02:50.080
To be something that is dynamically calculated based on whatever the current value is of name.

42
00:02:50.200 --> 00:02:57.340
So it is computed, it is derived, it is whatever the name is, plus d concatenated string of the great.

43
00:02:57.640 --> 00:03:04.750
So whenever I have that idea of a derived value or a calculated value, a computed value, a dependent

44
00:03:04.750 --> 00:03:11.410
value, whatever you want to call it, we want to use our computed function and we pass computed a function

45
00:03:11.410 --> 00:03:12.100
of our own.

46
00:03:12.310 --> 00:03:14.860
So I'm going to do a arrow function right here.

47
00:03:15.070 --> 00:03:20.770
And that arrow function specifies what we want view to run any time something changes.

48
00:03:20.950 --> 00:03:27.100
And when I say something, I mean whatever it is that we reference here in the body of this arrow function.

49
00:03:27.370 --> 00:03:34.690
So simply by referencing name dot value, what that means is whenever the value property on my name

50
00:03:34.690 --> 00:03:41.560
reactive object changes to anything other than Borris, this computed function will reevaluate itself.

51
00:03:41.860 --> 00:03:47.500
So right now all I'm going to return is the exact same value as whatever I have on the name reactive

52
00:03:47.500 --> 00:03:47.950
object.

53
00:03:48.160 --> 00:03:50.620
What I obviously want to do is make this derived.

54
00:03:50.770 --> 00:03:57.100
So it's going to be the current name I have, plus the appended string of the great.

55
00:03:57.970 --> 00:03:58.300
All right.

56
00:03:58.300 --> 00:04:00.770
And that is going to allow us to have the design that we want.

57
00:04:01.000 --> 00:04:07.060
So when the program kicks off and I look at title value because remember, we have to reference any

58
00:04:07.060 --> 00:04:11.950
of those pieces of information through the value property on the respective object.

59
00:04:12.100 --> 00:04:14.110
Same thing with name dot value by the way.

60
00:04:14.110 --> 00:04:16.090
We can't just simply console.log name.

61
00:04:16.270 --> 00:04:17.830
We have to do name dot value.

62
00:04:18.100 --> 00:04:22.090
So we're going to see the values Boris and Boris the great respectively.

63
00:04:22.420 --> 00:04:28.060
And those again, are the outputs of this reactive object's value property and this reactive object's

64
00:04:28.060 --> 00:04:28.780
value property.

65
00:04:29.080 --> 00:04:34.240
But the advantage of this approach, of course, is if we change our name value.

66
00:04:34.300 --> 00:04:39.310
So on this name object, I'm going to access the value property and I'm going to overwrite it to something

67
00:04:39.310 --> 00:04:39.610
else.

68
00:04:39.850 --> 00:04:41.030
Such as Peter.

69
00:04:41.360 --> 00:04:41.920
Then.

70
00:04:42.970 --> 00:04:49.390
This computer function will reevaluate and view will automatically assign the value property on my title

71
00:04:49.390 --> 00:04:56.740
reactive object so that when I console.log title that value we'll see that it has indeed updated to

72
00:04:56.890 --> 00:04:58.000
Peter the Great.

73
00:04:58.840 --> 00:05:02.920
And there we see it's gone from Boris the Great to Peter the Great.

74
00:05:03.040 --> 00:05:03.430
All right.

75
00:05:03.730 --> 00:05:10.450
So this is an example of passing in a string to our ref function to create a reactive object around

76
00:05:10.450 --> 00:05:10.900
a string.

77
00:05:11.200 --> 00:05:16.720
The reason, by the way, why the View Development Team needs an object is because it needs a complex

78
00:05:16.720 --> 00:05:20.380
data structure that enables it to support things like methods and properties.

79
00:05:20.650 --> 00:05:26.950
So a simple primitive in JavaScript like a string or a boolean or a number doesn't have the necessary

80
00:05:26.950 --> 00:05:32.590
functionality, even the technical foundation, to enable those kinds of complex methods that watch

81
00:05:32.590 --> 00:05:33.250
for changes.

82
00:05:33.490 --> 00:05:40.450
So no matter what you pass in to ref view is always going to wrap it in this big helper object, what

83
00:05:40.450 --> 00:05:43.870
we call the reactive object that's going to keep track of that state.

84
00:05:43.870 --> 00:05:44.200
Right.

85
00:05:44.350 --> 00:05:49.540
And of course, there's a lot of internals and complications to how that object works, but we don't

86
00:05:49.540 --> 00:05:50.740
really need to worry about it.

87
00:05:50.740 --> 00:05:56.620
We just need to know how to reference its current value as well as how we can set up something to watch

88
00:05:56.620 --> 00:05:59.980
for changes in that object which we do with the computed function.

89
00:06:00.280 --> 00:06:06.760
By the way, we can also pass complex objects to ref such as arrays or regular JavaScript objects and

90
00:06:06.760 --> 00:06:08.470
it's going to work the exact same way.

91
00:06:08.620 --> 00:06:15.730
Just keep in mind that we're going to always have a value property on the reactive object returned by

92
00:06:15.730 --> 00:06:18.790
ref that's going to give us the reference to the original object.

93
00:06:18.910 --> 00:06:21.340
We're going to see more of that in the very next lesson.
