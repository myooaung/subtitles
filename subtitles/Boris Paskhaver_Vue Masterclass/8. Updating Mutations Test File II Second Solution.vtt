WEBVTT
1
00:00:00.240 --> 00:00:00.960
Okay.

2
00:00:00.960 --> 00:00:05.740
So on the left hand side of my screen, I've opened up our state, that TSA file.

3
00:00:06.060 --> 00:00:11.550
And as a reminder, this is the file where we have our state arrow function, which returns an object

4
00:00:11.550 --> 00:00:14.310
that represents our initial view, text or state.

5
00:00:14.730 --> 00:00:19.830
Well, the beautiful part about this function is that it returns an object that fulfills the global

6
00:00:19.830 --> 00:00:20.670
state interface.

7
00:00:20.970 --> 00:00:26.850
So in other words, it returns that type of object that each one of our mutations expects to accept

8
00:00:27.090 --> 00:00:27.960
right here as well.

9
00:00:28.200 --> 00:00:32.850
And that kind of makes sense because of course, the way that view works is that always invokes a mutation

10
00:00:33.030 --> 00:00:36.480
and always passes in the existing store state as the first argument.

11
00:00:36.690 --> 00:00:42.300
And so what we have here is a sample store state that fulfills all of the properties of that interface

12
00:00:42.300 --> 00:00:44.490
and has all the right types as well.

13
00:00:44.940 --> 00:00:48.120
While the beautiful part here is we have this function, it's available to use.

14
00:00:48.420 --> 00:00:54.300
So what we can do is imported into our mutations test file and simply utilize it in line to give us

15
00:00:54.300 --> 00:00:57.510
a valid object that fulfills the global state interface.

16
00:00:57.660 --> 00:01:03.660
And then we don't need to cast any of our more simple objects like this to try to pretend to be something

17
00:01:03.660 --> 00:01:04.500
they're really not.

18
00:01:04.860 --> 00:01:06.270
So let me show you how this is going to work.

19
00:01:06.270 --> 00:01:11.280
I'm going to comment out my former implementation from the previous lesson, because I just want to

20
00:01:11.280 --> 00:01:12.960
compare these two approaches side by side.

21
00:01:13.380 --> 00:01:15.060
So right here I'm going to import.

22
00:01:16.340 --> 00:01:18.560
My state function from the left.

23
00:01:18.850 --> 00:01:24.530
That's going to come from our source directory than the store directory, than the state file.

24
00:01:25.480 --> 00:01:25.990
There we go.

25
00:01:26.260 --> 00:01:28.960
And here in line, I'm going to define a constant.

26
00:01:28.960 --> 00:01:30.430
I'm going to call it starting state.

27
00:01:30.430 --> 00:01:34.420
The only reason I'm not going to call it state is because that name is now taken in our file by our

28
00:01:34.420 --> 00:01:34.870
import.

29
00:01:35.180 --> 00:01:41.140
So let's call this starting state and then I'm going to invoke my state function to get back a valid

30
00:01:41.680 --> 00:01:44.800
global state object if object looks exactly like this.

31
00:01:45.190 --> 00:01:51.190
And then of course here for my mutation, I can pass in starting state and our assertion is probably

32
00:01:51.190 --> 00:01:56.590
going to be a little bit different because now we are we have a full object with these four properties

33
00:01:56.590 --> 00:01:59.410
and in this test we only care about is logged in.

34
00:01:59.650 --> 00:02:04.030
So this will not work because our state object is not just going to be an is logged in property, it's

35
00:02:04.030 --> 00:02:06.340
going to be that plus these other properties.

36
00:02:06.610 --> 00:02:12.910
But we can modify this test to be something like this expect state that is logged in to equal true.

37
00:02:13.360 --> 00:02:13.630
Right.

38
00:02:13.630 --> 00:02:14.830
That's something that we can do right here.

39
00:02:14.830 --> 00:02:18.250
Or sorry not state but starting state because that is our actual constant.

40
00:02:18.730 --> 00:02:21.160
So I could simply check that and that could be our test.

41
00:02:21.310 --> 00:02:21.640
All right.

42
00:02:21.970 --> 00:02:26.320
So once again, as always, let's talk about the advantages and the disadvantages of this approach.

43
00:02:26.740 --> 00:02:30.220
The obvious advantage is that we're using something that is closer to the real world.

44
00:02:30.460 --> 00:02:34.810
Now, I know that may sound like a contradiction, because I've often talked about the values of marking

45
00:02:34.810 --> 00:02:38.980
throughout the course, and I still stand by the benefits of marking, especially if it's an object

46
00:02:38.980 --> 00:02:43.750
that is complex, or especially if it's an object that's coming from another library and is sort of

47
00:02:43.750 --> 00:02:44.980
outside of our domain.

48
00:02:45.310 --> 00:02:47.860
But in this case, this global state is our object.

49
00:02:47.860 --> 00:02:49.360
It's something that belongs to us.

50
00:02:49.360 --> 00:02:51.130
It's something that we have control over.

51
00:02:51.490 --> 00:02:56.200
And for the purposes of the mutation, it's kind of intrinsically connected to what a mutation does.

52
00:02:56.200 --> 00:03:00.760
The mutation has to accept the state object in order to do some kind of manipulation on it.

53
00:03:01.060 --> 00:03:05.890
So is this object right here really that different from this object right here?

54
00:03:06.100 --> 00:03:07.600
I would argue not really.

55
00:03:07.600 --> 00:03:09.490
They're both plain JavaScript objects.

56
00:03:09.490 --> 00:03:13.870
This one just has a couple more properties that we don't care about for the purposes of this test.

57
00:03:13.870 --> 00:03:14.050
Right.

58
00:03:14.050 --> 00:03:20.110
But it's not like the most offensive case of, you know, involving two units working together, the

59
00:03:20.110 --> 00:03:22.030
state function, as well as our mutation method.

60
00:03:22.240 --> 00:03:24.730
They're kind of intrinsically connected in how they work.

61
00:03:24.970 --> 00:03:29.830
So I don't feel a strong, severe obligation to separate them as separate units in their respective

62
00:03:29.830 --> 00:03:30.160
tests.

63
00:03:30.790 --> 00:03:31.690
If it works, it works.

64
00:03:31.690 --> 00:03:34.930
But if it doesn't, it's not like the biggest offense to me either.

65
00:03:35.300 --> 00:03:35.620
All right.

66
00:03:35.800 --> 00:03:37.570
But what don't I like about this test?

67
00:03:37.570 --> 00:03:42.280
Well, that goes back to what I talked about in the previous lesson, is I feel like the story of what

68
00:03:42.280 --> 00:03:47.680
this test is trying to say has been hurt in the process, because while I understand that is logged

69
00:03:47.680 --> 00:03:53.290
in, should be true after the mutation runs, that doesn't tell me the story that they're supposed to

70
00:03:53.290 --> 00:03:58.510
change because imagine, for example, that our mutation does nothing with our is lodged in property,

71
00:03:58.510 --> 00:04:03.340
let's say our is lodged in property starts out as true and our mutation does nothing to it.

72
00:04:03.580 --> 00:04:08.080
Well, in that case, this test would also pass and tell the exact same story as it does right now.

73
00:04:08.410 --> 00:04:09.340
Here's another example.

74
00:04:09.490 --> 00:04:13.180
Imagine our mutation ads the is logged in property.

75
00:04:13.330 --> 00:04:15.520
I'm not saying that's something you should ever do in view.

76
00:04:15.520 --> 00:04:18.010
I'm just saying imagine that's what the implementation does.

77
00:04:18.010 --> 00:04:21.700
It creates and is logged in property and initialize it to a value of true.

78
00:04:22.300 --> 00:04:28.780
Once again, a test like this doesn't communicate as effectively that is logged in is switching that

79
00:04:28.780 --> 00:04:31.510
it's inverting that it's starting out as false.

80
00:04:31.780 --> 00:04:32.860
Then it's going to true.

81
00:04:33.070 --> 00:04:38.050
This story that I previously had, even though I was coercing or typecasting the object to me is a little

82
00:04:38.050 --> 00:04:43.240
bit better because I'm saying, hey, future developer look I'm starting out with is logged in set to

83
00:04:43.240 --> 00:04:47.590
false I'm running this mutation with that object and now is logged in is set to true.

84
00:04:47.770 --> 00:04:54.250
I'm instantly communicating the before and the after and the in-between is the actual code that I'm

85
00:04:54.250 --> 00:04:55.300
running here.

86
00:04:55.300 --> 00:04:59.980
There's definitely a before, but my before is as simple as invoking a state function.

87
00:05:00.130 --> 00:05:05.230
And in theory, if a developer wants to read this test file and never open this file on the left, which

88
00:05:05.230 --> 00:05:09.610
they technically shouldn't, because you should be able to tell as effectively a story as you can without

89
00:05:09.610 --> 00:05:12.370
having the developer have to go through as many files as possible.

90
00:05:12.640 --> 00:05:18.250
So if we just evaluate these three lines of code in the right, our setup, our beginning, our exposition,

91
00:05:18.250 --> 00:05:21.460
the start of the movie, if you will, is us invoking the state function.

92
00:05:21.460 --> 00:05:23.020
And we know not that much about it.

93
00:05:23.020 --> 00:05:23.320
Right?

94
00:05:23.530 --> 00:05:26.470
We can probably hover our mouse over it and find out that it's global state.

95
00:05:26.470 --> 00:05:27.370
But what does that tell us?

96
00:05:27.520 --> 00:05:27.910
I don't know.

97
00:05:27.910 --> 00:05:29.890
It's some kind of interface called global state, right?

98
00:05:30.160 --> 00:05:32.140
Imagine that we don't have this file on the left open.

99
00:05:32.440 --> 00:05:36.460
So similarly, I have some kind of object and then I'm passing it in and then some property on that

100
00:05:36.460 --> 00:05:37.900
object now has a value, right?

101
00:05:38.230 --> 00:05:39.520
There's still an assertion.

102
00:05:39.520 --> 00:05:43.570
There's still a value that is validating that the test that the mutation is doing what it's supposed

103
00:05:43.570 --> 00:05:43.750
to.

104
00:05:43.900 --> 00:05:49.870
But the story that I'm telling as a developer is not as ideal, not as clear as I wish it could be.

105
00:05:49.930 --> 00:05:50.170
Right.

106
00:05:50.170 --> 00:05:53.440
So I like the fact that this starts out and tells me where I am.

107
00:05:53.650 --> 00:05:58.600
I'm not a super big fan of the typecasting because it's kind of like TypeScript, but it has its own

108
00:05:58.600 --> 00:05:58.990
advantage.

109
00:05:59.200 --> 00:06:05.110
This one, I like that it fulfills TypeScript obligations for what it wants, but my story is not as

110
00:06:05.110 --> 00:06:05.650
well told.

111
00:06:06.010 --> 00:06:09.010
So let's see if we can take a little breather in the next lesson.

112
00:06:09.010 --> 00:06:12.550
We're going to go into our playground file and I'm going to introduce you to a new TypeScript idea.

113
00:06:12.790 --> 00:06:16.660
And we're going to see if that idea is going to help us be able to write a test that combines the best

114
00:06:16.660 --> 00:06:17.650
of both of these worlds.

115
00:06:18.010 --> 00:06:19.240
So I'll see you in the next lesson.
