WEBVTT
1
00:00:00.560 --> 00:00:01.630
All right.

2
00:00:01.640 --> 00:00:07.160
So in this lesson, we'll talk about optional properties on object type definitions.

3
00:00:07.580 --> 00:00:12.920
So let's say I have a variable, I'm going to call it character, and I'm not going to provide character

4
00:00:12.920 --> 00:00:14.960
with its initial value assignment.

5
00:00:15.140 --> 00:00:18.710
In other words, I'm not going to provide the equal sign yet and the actual object.

6
00:00:18.980 --> 00:00:21.890
All I want to do is provide a type for a character.

7
00:00:22.040 --> 00:00:28.250
So TypeScript knows what kind of object to expect, what shape it's going to have, what properties

8
00:00:28.250 --> 00:00:29.930
and the types of those properties.

9
00:00:30.260 --> 00:00:37.250
So as always, what I'm going to do is provide a colon and my square curly braces here to provide those

10
00:00:37.250 --> 00:00:40.400
types, but I'm not going to provide the actual value yet.

11
00:00:40.700 --> 00:00:44.540
And to keep this easy to read, I'm going to break this up across several lines.

12
00:00:44.900 --> 00:00:49.850
So let's say my eventual character object must have a name property and that's going to be a string.

13
00:00:50.880 --> 00:00:56.910
And we can separate every property and its type using either a comma or another common convention you'll

14
00:00:56.910 --> 00:00:58.110
see as a semicolon.

15
00:00:58.290 --> 00:00:59.010
Same idea.

16
00:00:59.310 --> 00:01:03.390
So my eventual character object will have a name property that's going to be a string.

17
00:01:03.630 --> 00:01:06.720
It's going to have a skill property that's also going to be a string.

18
00:01:07.470 --> 00:01:09.570
And here's what I want to show you in this lesson.

19
00:01:09.720 --> 00:01:12.270
We can also provide optional properties.

20
00:01:12.540 --> 00:01:13.980
So what is an optional property?

21
00:01:14.130 --> 00:01:17.700
It is a property that is optional that is not required.

22
00:01:18.030 --> 00:01:22.590
It is possible to have it, but we are not going to mandate that it exists.

23
00:01:22.770 --> 00:01:23.100
Right.

24
00:01:23.430 --> 00:01:29.160
So for example, let's say I want to have a likes mushrooms property, which I want to be a boolean.

25
00:01:29.340 --> 00:01:35.460
However, I do not want to require that a character object has a likes mushrooms property.

26
00:01:35.580 --> 00:01:42.990
I can I can only say that it is optional, but if the object provides it then it must still be a boolean.

27
00:01:43.320 --> 00:01:49.470
So the way that I make an property optional is by adding a question mark at the end of the property

28
00:01:49.470 --> 00:01:49.740
name.

29
00:01:50.070 --> 00:01:55.470
So simply by putting a question mark right here before the colon, I am saying that my character object

30
00:01:55.620 --> 00:02:00.960
does not need a likes mushrooms property in order to be a valid character.

31
00:02:01.260 --> 00:02:07.170
It can have that and if it does have that, it must provide a boolean, but it is not a required property.

32
00:02:07.500 --> 00:02:09.450
So down below, let me show you here.

33
00:02:09.450 --> 00:02:12.450
I'm going to actually assign my character variable to an object.

34
00:02:13.530 --> 00:02:18.390
So right here, you can see when I hover my mouse over the violation, it's going to say that type you

35
00:02:18.390 --> 00:02:22.830
gave me, that type of an empty object is missing the following properties from type name.

36
00:02:22.890 --> 00:02:23.880
String skill.

37
00:02:23.880 --> 00:02:29.970
String and notice likes mushrooms shows up, but now its type is listed as either boolean or undefined.

38
00:02:30.150 --> 00:02:31.830
That's what that vertical type means.

39
00:02:31.980 --> 00:02:33.810
It means either boolean or undefined.

40
00:02:33.990 --> 00:02:38.700
And the reason it can be undefined is because that is the default value for a property that does not

41
00:02:38.700 --> 00:02:39.870
exist on a given object.

42
00:02:40.230 --> 00:02:44.460
So let me show you that if I provide a name here, let's set that to a string of link.

43
00:02:45.150 --> 00:02:49.230
And here I have to provide commas because this is regular object declaration syntax.

44
00:02:49.230 --> 00:02:50.910
It's not type declaration syntax.

45
00:02:51.210 --> 00:02:51.720
So let's break.

46
00:02:51.750 --> 00:02:54.900
Let's say I provide a name of link and a skill of sword fighting.

47
00:02:55.260 --> 00:03:00.330
Notice as soon as I provide those two required properties and they both have the appropriate type of

48
00:03:00.330 --> 00:03:01.290
string right here.

49
00:03:01.470 --> 00:03:03.270
Notice the error goes away.

50
00:03:03.540 --> 00:03:09.570
So TypeScript is not going to complain about the likes mushrooms property being absent because it is

51
00:03:09.750 --> 00:03:10.350
optional.

52
00:03:10.740 --> 00:03:11.550
So can I.

53
00:03:11.550 --> 00:03:13.650
Provided I absolutely can write here.

54
00:03:13.650 --> 00:03:17.610
I can add likes mushrooms if I want to and I can give it a value like a true.

55
00:03:17.730 --> 00:03:21.210
And still we have a valid object, but it is not required.

56
00:03:21.210 --> 00:03:22.710
It is an optional property.

57
00:03:23.070 --> 00:03:28.590
Keep in mind, if we do provide it, as I mentioned, we still have to provide the right type.

58
00:03:28.830 --> 00:03:34.170
So for example, if I do likes mushrooms here, it still has to be either a true or false to satisfy

59
00:03:34.170 --> 00:03:35.070
this boolean type.

60
00:03:35.370 --> 00:03:37.050
I cannot provide anything else.

61
00:03:37.050 --> 00:03:39.120
Like let's say I provide an array of one or two.

62
00:03:39.510 --> 00:03:39.870
Right?

63
00:03:39.960 --> 00:03:41.040
This is invalid.

64
00:03:41.250 --> 00:03:43.680
Even though likes mushrooms is optional.

65
00:03:43.800 --> 00:03:46.590
If it is present it must still be a boolean.

66
00:03:46.890 --> 00:03:51.450
So if I hover my mouse you can see it's going to say your type of number array is not assignable to

67
00:03:51.450 --> 00:03:56.730
the type you told me to expect, which is either boolean, which means true or false or undefined,

68
00:03:56.730 --> 00:04:02.010
which is how JavaScript and TypeScript deal with non-existent values, which is exactly what an optional

69
00:04:02.010 --> 00:04:02.640
property is.

70
00:04:02.760 --> 00:04:04.410
It's a property that doesn't have to exist.

71
00:04:04.530 --> 00:04:04.800
Right.

72
00:04:05.130 --> 00:04:08.280
So I'm going to return it back to true once again.

73
00:04:08.280 --> 00:04:08.940
That's going to pass.

74
00:04:09.090 --> 00:04:11.640
And once again, if I remove it as well, it's going to pass as well.

75
00:04:11.910 --> 00:04:16.290
So the key takeaway is if you're going to have some kind of property that is not required for an object

76
00:04:16.290 --> 00:04:20.160
to be of a certain type is simply provide a question mark at the end of it.

77
00:04:20.220 --> 00:04:24.720
You can apply this to as many properties as you want on an object or none at all.

78
00:04:24.720 --> 00:04:25.350
It's up to you.

79
00:04:25.470 --> 00:04:30.300
It depends on what your program needs, whether a property is required for an object to be itself,

80
00:04:30.450 --> 00:04:33.270
or whether it is not required or in other words, optional.

81
00:04:33.480 --> 00:04:34.530
All of that is possible.

82
00:04:34.530 --> 00:04:39.120
Just add a question mark to the end of the property name right before the colon.

83
00:04:39.330 --> 00:04:40.830
That's all there is to cover in this lesson.

84
00:04:40.830 --> 00:04:42.390
So I will see you in the next one.
