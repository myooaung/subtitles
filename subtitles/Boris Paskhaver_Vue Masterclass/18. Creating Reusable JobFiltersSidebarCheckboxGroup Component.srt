1
00:00:00,240 --> 00:00:04,770
All right, so in this code, I have opened two components side by side.

2
00:00:04,980 --> 00:00:10,710
On the left, I have job filter sidebar organizations, and on the right I have job the sidebar job

3
00:00:10,710 --> 00:00:11,070
types.

4
00:00:11,340 --> 00:00:14,790
And as a reminder, these both render a collection of checkboxes.

5
00:00:14,910 --> 00:00:21,120
When the user selects the checkbox, they send a message to the View store to collect the array of strings

6
00:00:21,120 --> 00:00:24,060
representing the user's choices and commit salutations.

7
00:00:24,300 --> 00:00:29,490
And every single time we've had to edit one file here, we've basically added the other one as well

8
00:00:29,670 --> 00:00:30,990
to make similar changes.

9
00:00:31,200 --> 00:00:34,980
And obviously this is starting to become a pretty laborious and monotonous process.

10
00:00:35,220 --> 00:00:41,940
So I think the time has come to make an effort to consolidate these two very similar components into

11
00:00:41,940 --> 00:00:44,460
one reusable, more generic component.

12
00:00:44,790 --> 00:00:49,740
Now, it may strike you as being a little bit late in the process, almost like we've had this frustration

13
00:00:49,740 --> 00:00:50,970
or pain earlier.

14
00:00:51,180 --> 00:00:53,730
But I would argue that's not necessarily a bad thing.

15
00:00:53,730 --> 00:00:59,700
I would rather have duplication first and make sure we're feeling the pain of something and kind of

16
00:00:59,700 --> 00:01:04,410
confirm that two components are very similar and can be consolidated into one.

17
00:01:04,770 --> 00:01:12,270
I'd rather do that than try to prematurely optimize, try to make one component early on, because I

18
00:01:12,270 --> 00:01:17,670
tend to find that that leads to worse code in the long run than simply having a little bit of duplication.

19
00:01:17,880 --> 00:01:20,010
Duplication isn't the worst thing in the world.

20
00:01:20,010 --> 00:01:25,620
Duplication allows you to confirm that two things actually work the exact same way, thus allowing you

21
00:01:25,620 --> 00:01:27,210
to combine them many times.

22
00:01:27,210 --> 00:01:31,740
What you think is duplication isn't really duplication, it just has the illusion of that.

23
00:01:31,980 --> 00:01:36,390
So you want to make sure that you're actually repeating behavior, not just lines of code.

24
00:01:36,540 --> 00:01:42,630
It's when you have duplicate behavior that you can remove that duplication and isolate it to just one

25
00:01:42,630 --> 00:01:45,450
element, for example, one component or one function.

26
00:01:45,780 --> 00:01:51,240
So in this case, I think we do have sort of the confidence now to say that this is very similar so

27
00:01:51,240 --> 00:01:53,160
we can try to build a reasonable component.

28
00:01:53,520 --> 00:01:56,190
So what I'm going to do is I'm just going to pick one of these components.

29
00:01:56,190 --> 00:01:59,490
Let's do the one on the left, and I'm going to create a new file.

30
00:01:59,520 --> 00:02:05,910
I'm going to call my new component job filter sidebar checkbox group, which is a nice generic name.

31
00:02:06,150 --> 00:02:10,860
And I'm basically going to copy the code here into that new component and then I'm going to navigate

32
00:02:10,860 --> 00:02:13,930
through the file and anything that is specific for it.

33
00:02:14,040 --> 00:02:18,780
For the organizations component, I'm going to try to make it more generic in the new component.

34
00:02:19,080 --> 00:02:23,970
So basically I'm going to have my template here on the left where I'm starting from and the right I

35
00:02:23,970 --> 00:02:29,100
hope to arrive at a more generic component that isn't using specific things related to this original

36
00:02:29,100 --> 00:02:31,890
one, such as the concept of organizations, for example.

37
00:02:32,250 --> 00:02:32,520
All right.

38
00:02:32,520 --> 00:02:38,250
So with that said, let me create a new component in my job builder sidebar directory right here in

39
00:02:38,250 --> 00:02:39,360
components job results.

40
00:02:39,690 --> 00:02:46,320
So right here I will create job filters, sidebar, checkbox group, dot view.

41
00:02:47,890 --> 00:02:50,680
And immediately what I'm going to do is drag it to my right.

42
00:02:51,710 --> 00:02:53,810
And I'm going to collapse my navigation.

43
00:02:53,810 --> 00:02:59,900
And as I mentioned, I'm going to copy and paste all of my content that I have on the left hand side.

44
00:03:00,050 --> 00:03:00,370
All right.

45
00:03:00,380 --> 00:03:03,350
And then we'll simply keep them up so we can kind of compare them as we move along.

46
00:03:03,860 --> 00:03:04,160
All right.

47
00:03:04,160 --> 00:03:06,980
So online, too, we run into our very first specific thing.

48
00:03:07,190 --> 00:03:11,450
The accordion is the component that provides the collapse ability and expanded body.

49
00:03:11,810 --> 00:03:17,330
And when we are rendering the accordion in this original component, we are providing a prop called

50
00:03:17,330 --> 00:03:19,610
header, which is the title that appears at the top.

51
00:03:19,940 --> 00:03:25,520
Well, now we can no longer use the string organizations because that is only specific to one of our

52
00:03:25,520 --> 00:03:27,980
actual checkbox groups, the organizations one.

53
00:03:28,130 --> 00:03:30,800
We need a way to make this a lot more dynamic and flexible.

54
00:03:31,070 --> 00:03:36,770
So given that this is a simple piece of text, one really easy way that we can enable this to be dynamic

55
00:03:36,950 --> 00:03:38,930
is to allow it to be a prop.

56
00:03:39,200 --> 00:03:44,480
So the parent that is going to render my job filled your sidebar checkbox through component will provide

57
00:03:44,480 --> 00:03:49,580
a header prop and that's what I will pass down to my accordion component and that's going to allow it

58
00:03:49,580 --> 00:03:51,140
to have whatever text we want.

59
00:03:51,470 --> 00:03:55,580
So right here, I'm going to replace organizations with header.

60
00:03:55,940 --> 00:03:59,960
And of course that by itself will not work because that's going to provide a string of header.

61
00:04:00,200 --> 00:04:03,890
So I'm going to bind this using the colon syntax V bind.

62
00:04:04,130 --> 00:04:09,470
And we have not defined the prop definition for header just yet, but let's put that on our to do list.

63
00:04:09,470 --> 00:04:14,540
We need to make sure that now this component is going to accept a header prop which will be a string,

64
00:04:14,690 --> 00:04:19,220
and we're simply going to pass down that dynamic prop value to the next component, which is accordion.

65
00:04:19,490 --> 00:04:21,020
All right, let's move on down.

66
00:04:21,320 --> 00:04:22,130
So we have our div.

67
00:04:22,130 --> 00:04:22,780
That's fine.

68
00:04:22,790 --> 00:04:24,690
All of this setup is basically just tailwinds.

69
00:04:24,690 --> 00:04:25,670
So that's totally fine.

70
00:04:25,850 --> 00:04:29,840
And here we get to our list item iteration using the V4 directive.

71
00:04:30,080 --> 00:04:33,980
So obviously the concept of an organization is not generic enough, it is too specific.

72
00:04:34,250 --> 00:04:36,110
So let's change this to something more flexible.

73
00:04:36,350 --> 00:04:39,500
So I propose that we simply replace this with the word value.

74
00:04:39,740 --> 00:04:44,180
And for this thing that we're iterating over instead of unique organizations, I'm simply going to call

75
00:04:44,180 --> 00:04:49,760
it unique values because I eventually imagine that this component will do, for example, both unique

76
00:04:49,760 --> 00:04:51,530
organizations and unique job types.

77
00:04:51,740 --> 00:04:57,680
So kind of a more parent term for that that's more generic and reusable is something like unique values.

78
00:04:57,830 --> 00:05:01,280
And then we'll talk a little bit later about how we're going to get those values into the component

79
00:05:01,430 --> 00:05:01,610
of.

80
00:05:01,610 --> 00:05:05,870
For now, we're just taking care of renaming the words the terms in our template.

81
00:05:06,170 --> 00:05:08,360
So right here, I'm going to change this organization.

82
00:05:08,360 --> 00:05:12,430
And how about the one on the next line as well to be value.

83
00:05:12,710 --> 00:05:15,980
So right here, value and value for the key.

84
00:05:16,940 --> 00:05:20,120
And this is going to be value in unique values.

85
00:05:21,190 --> 00:05:25,910
And again, if you're confused, we have not yet defined what unique values is, where it's coming from.

86
00:05:25,930 --> 00:05:27,460
I'm just setting up everything I need.

87
00:05:27,610 --> 00:05:30,700
So I'm going to assume that I'm going to iterate over something called unique values.

88
00:05:30,850 --> 00:05:33,550
And I'm probably going to assume at this point that it's going to be a string as well.

89
00:05:33,730 --> 00:05:38,230
And I'm simply using that as the basis for my V for variable name and as my unique key.

90
00:05:38,590 --> 00:05:39,280
It's right here.

91
00:05:39,310 --> 00:05:42,850
Similarly, everywhere where we have organization, I need to change that to value.

92
00:05:42,850 --> 00:05:44,860
So right here we're going to do value.

93
00:05:45,190 --> 00:05:47,080
Right here we're going to do value right here.

94
00:05:47,080 --> 00:05:49,840
We're going to do value right here.

95
00:05:49,840 --> 00:05:51,880
Our label is going to be for value right here.

96
00:05:51,880 --> 00:05:54,100
A data test attribute is going to be value.

97
00:05:54,400 --> 00:05:57,490
The thing we're going to interpolate is going to be our value variable from above.

98
00:05:57,490 --> 00:05:58,330
So there we go.

99
00:05:58,870 --> 00:06:01,810
And we also have a couple of things like our V model association.

100
00:06:01,810 --> 00:06:03,370
This is selected organizations.

101
00:06:03,580 --> 00:06:06,490
So I'm going to change this now to be selected values.

102
00:06:07,660 --> 00:06:12,510
And right here in sort of select organization, which is our method we invoke when a change event occurs.

103
00:06:12,520 --> 00:06:16,210
In other words, when the user clicks the input, I'm going to change this, the select value.

104
00:06:17,190 --> 00:06:21,000
So we can pause here for just a quick second to compare the left and right hand side.

105
00:06:21,210 --> 00:06:22,400
Hopefully, that all make sense.

106
00:06:22,410 --> 00:06:29,250
Basically, whenever I have a more specific thing on the left here, I replaced it with a more generic

107
00:06:29,250 --> 00:06:30,120
term value.

108
00:06:30,360 --> 00:06:30,660
All right.

109
00:06:30,660 --> 00:06:31,350
That's all I've done.

110
00:06:31,530 --> 00:06:36,240
The reason this now looks a little bit different is because the cleanup or the replacement of organization

111
00:06:36,240 --> 00:06:38,820
with value has also caused pretty hard to remove some lines.

112
00:06:39,000 --> 00:06:40,350
That's why it looks a little bit shorter.

113
00:06:40,440 --> 00:06:42,480
But fundamentally, the code is really the same here.

114
00:06:42,630 --> 00:06:44,580
I've just changed the term that I'm using in line.

115
00:06:45,000 --> 00:06:45,240
All right.

116
00:06:45,240 --> 00:06:49,410
So with that, we can move on to the script sections when you scroll down in our original component

117
00:06:49,680 --> 00:06:50,700
and scroll down here as well.

118
00:06:51,910 --> 00:06:52,240
All right.

119
00:06:52,420 --> 00:06:55,870
So for now, I'm going to keep all these imports and then I'll remove them as needed.

120
00:06:56,290 --> 00:07:01,250
So starting here with our actual configuration object, we obviously need to update things here as well.

121
00:07:01,600 --> 00:07:07,240
So we can no longer have a name of sidebar organizations, but we can add a name of checkbox group right

122
00:07:07,240 --> 00:07:07,480
here.

123
00:07:08,800 --> 00:07:13,720
We are still going to need to keep our accordion components because that's going to enable the collapse

124
00:07:13,720 --> 00:07:14,770
ability up top.

125
00:07:14,770 --> 00:07:16,370
So that's totally fine to keep in here.

126
00:07:16,870 --> 00:07:19,740
And then for our setup method, let's take a look at what we can do here.

127
00:07:19,750 --> 00:07:21,570
So we're still going to need a store.

128
00:07:21,580 --> 00:07:26,260
And the reason we're going to need a store is because in both components we are committing a mutation.

129
00:07:26,380 --> 00:07:29,200
We'll talk about how we can make that dynamic in just a second.

130
00:07:29,380 --> 00:07:33,790
But we still need the store in order to invoke the commit method, and we still need the router in order

131
00:07:33,790 --> 00:07:35,260
to invoke the push method.

132
00:07:35,620 --> 00:07:40,040
So here, instead of selected organizations, obviously I now want this to be selected values.

133
00:07:40,060 --> 00:07:41,680
This is going to be my starter starter.

134
00:07:41,680 --> 00:07:41,980
Right.

135
00:07:42,400 --> 00:07:46,690
And here we run into another issue where formally we're using the composable function.

136
00:07:46,870 --> 00:07:49,180
Here, we're using use unique organizations.

137
00:07:49,180 --> 00:07:53,380
And in the other component, which is job types, we're getting we're using use unique job types.

138
00:07:53,620 --> 00:07:59,890
So we once again have a problem here where we have a dynamic piece of data that we need to iterate over

139
00:07:59,890 --> 00:08:03,130
the iterable collection that we're using right here in the V4.

140
00:08:03,400 --> 00:08:08,890
So once again, because we have dynamic content here, what I'm going to do is feed it in as a prop.

141
00:08:09,070 --> 00:08:14,620
So the parent that is going to render job filter side by checkbox group will figure out how to provide

142
00:08:14,620 --> 00:08:19,180
something called unique values to my component when it's being rendered.

143
00:08:19,420 --> 00:08:21,880
So we're not going to leave that responsibility in this component.

144
00:08:21,880 --> 00:08:23,980
We're going to make this component except that as a prop.

145
00:08:24,400 --> 00:08:24,660
All right.

146
00:08:24,680 --> 00:08:25,870
I'm going to remove this line.

147
00:08:26,920 --> 00:08:27,250
All right.

148
00:08:27,250 --> 00:08:29,350
So now we have two things we have to remember to make props.

149
00:08:29,560 --> 00:08:31,300
The first is that unique values.

150
00:08:31,480 --> 00:08:35,110
And the second, of course, is going to be the header that we just talked about a few minutes ago.

151
00:08:35,770 --> 00:08:36,130
All right.

152
00:08:36,130 --> 00:08:36,910
Let's move on down.

153
00:08:36,910 --> 00:08:37,990
So we have selected values.

154
00:08:38,260 --> 00:08:40,630
Now we get to the select organization function.

155
00:08:40,630 --> 00:08:43,240
Obviously, this can no longer be called select organization.

156
00:08:43,240 --> 00:08:44,530
Let's call it select value.

157
00:08:45,670 --> 00:08:47,980
We have our store and we want to call the commit method.

158
00:08:48,160 --> 00:08:52,570
But of course, our our mutation name here is not guaranteed.

159
00:08:52,570 --> 00:08:57,310
It's not going to be necessarily add selected organizations, for example, in the job type's component,

160
00:08:57,310 --> 00:08:58,990
it's ads selected job types.

161
00:08:59,290 --> 00:09:04,630
So once again, we have basically a string that is varying from every eventual component that we want

162
00:09:04,630 --> 00:09:06,460
to to use this thing.

163
00:09:06,730 --> 00:09:12,430
So I propose one more time that we allow the parent component that renders the checkbox group to provide

164
00:09:12,430 --> 00:09:14,890
me one more prop that's going to represent the mutation.

165
00:09:15,220 --> 00:09:22,240
So let's say I'm going to get this prop and how can we configure are set up method to receive props.

166
00:09:22,480 --> 00:09:25,990
Remember that is going to be the very first parameter in the setup method.

167
00:09:26,200 --> 00:09:32,260
So here I'll define props and again I'll expect my component from the parent component to pass in that

168
00:09:32,270 --> 00:09:32,620
string.

169
00:09:32,830 --> 00:09:38,800
So let's assume for now that our props object is going to have a mutation property and that is going

170
00:09:38,800 --> 00:09:43,850
to be the string, and we're going to commit that mutation, whatever the parent tells me to commit.

171
00:09:43,870 --> 00:09:45,280
That's the mutation I'm going to commit.

172
00:09:46,130 --> 00:09:50,990
And here, of course, we know no longer have selected organizations, but we do have selected values.

173
00:09:51,290 --> 00:09:54,800
Keep in mind that is still a reactive object because we're using RAF here.

174
00:09:54,920 --> 00:09:59,810
So we do need selected values that value a little bit confusing because we have values that value.

175
00:10:00,020 --> 00:10:01,040
But this is still correct.

176
00:10:01,760 --> 00:10:08,360
And finally, luckily, this logic of invoking push with this path of the job results page is going

177
00:10:08,360 --> 00:10:14,270
to stay consistent because no matter which checkbox the user is using or in other words, whatever filter

178
00:10:14,270 --> 00:10:16,760
they're applying, we always want to bring them back to this page.

179
00:10:16,760 --> 00:10:17,450
So this looks good.

180
00:10:17,990 --> 00:10:18,320
All right.

181
00:10:18,320 --> 00:10:21,050
So here we obviously have some names that no longer exist.

182
00:10:21,050 --> 00:10:23,930
We obviously want to make selected values available.

183
00:10:25,140 --> 00:10:26,670
That's what we defined right here.

184
00:10:26,820 --> 00:10:29,610
And that is directly connected to our remodel right here.

185
00:10:30,150 --> 00:10:35,490
And that is going to be the array that stores the actual strings and then obviously sends them off to

186
00:10:35,490 --> 00:10:37,230
the relevant mutation.

187
00:10:37,650 --> 00:10:38,010
All right.

188
00:10:38,010 --> 00:10:42,780
Unique organizations is no longer going to exist, and unique values which we replace that with is going

189
00:10:42,780 --> 00:10:44,640
to be a prop, will define that in just a moment.

190
00:10:45,030 --> 00:10:49,110
And finally, select organization no longer exists as a function, but select value does.

191
00:10:49,380 --> 00:10:52,890
So I'm going to replace this with select value and that makes sense.

192
00:10:52,890 --> 00:10:54,710
So select value right here.

193
00:10:54,720 --> 00:10:59,340
This change event will invoke this function that we're now making available as a direct property on

194
00:10:59,340 --> 00:11:00,150
a return object.

195
00:11:01,200 --> 00:11:01,530
All right.

196
00:11:01,830 --> 00:11:06,990
So with that, we can see that these former imports are no longer being used, which makes sense because

197
00:11:06,990 --> 00:11:10,530
they were directly from our organization's component when we copied it.

198
00:11:10,620 --> 00:11:16,110
We obviously can have a generic component that knows about this specific composable function or this

199
00:11:16,110 --> 00:11:21,790
specific mutation because that is too closed end, that is too focused on this functionality rather

200
00:11:21,790 --> 00:11:23,220
than than the generic when we want.

201
00:11:23,550 --> 00:11:26,670
So we can go ahead and remove these former imports that are no longer used.

202
00:11:27,120 --> 00:11:31,380
And then the final thing that I want to do, of course, is to set up that props object, because as

203
00:11:31,380 --> 00:11:37,830
a reminder, everywhere where we had a little bit of specific content, we want to now make that dynamic

204
00:11:37,830 --> 00:11:40,110
and customizable by having the parent provide it.

205
00:11:40,380 --> 00:11:46,200
So whenever we set up props, remember we create a props object right here, and that's where we specify

206
00:11:46,200 --> 00:11:48,780
everything that the parent component will be able to provide for us.

207
00:11:48,900 --> 00:11:51,750
And props can be required or they can be optional.

208
00:11:51,750 --> 00:11:53,820
In this case, we will make all of our props required.

209
00:11:54,150 --> 00:11:56,040
So starting from the top, just reviewing.

210
00:11:56,370 --> 00:12:00,360
Remember the first thing our parent needs to give us is some kind of header string and that's what we're

211
00:12:00,360 --> 00:12:03,600
going to take and immediately pass down to the accordion component.

212
00:12:03,900 --> 00:12:08,850
So our parent will pass in a prop to checkbox group and checkbox group will take that prop and pass

213
00:12:08,850 --> 00:12:09,720
it down to accordion.

214
00:12:10,080 --> 00:12:13,440
So right here, the first thing my parent will give me is a prop called header.

215
00:12:14,070 --> 00:12:17,100
Remember, we can provide a configuration object for each prop here.

216
00:12:17,100 --> 00:12:21,990
I can say that the type, the data type of header will be a string and then I can provide a required

217
00:12:21,990 --> 00:12:27,750
key set to true, which mandates that whenever a parent component renders checkbox group, it must give

218
00:12:27,750 --> 00:12:30,120
me that prop is not optional, is required.

219
00:12:30,630 --> 00:12:31,020
All right.

220
00:12:31,350 --> 00:12:35,970
The next two things I'm going to need are unique values, which is going to be the thing we're iterating

221
00:12:35,970 --> 00:12:36,360
over.

222
00:12:36,900 --> 00:12:40,230
And then the last thing is going to be the actual mutation, which we're using right here.

223
00:12:40,560 --> 00:12:43,680
So unique values is the next prop.

224
00:12:44,430 --> 00:12:45,840
Provide the configuration object.

225
00:12:45,840 --> 00:12:50,340
I'm also going to make this required and the reason we need to make it required is because we're going

226
00:12:50,340 --> 00:12:54,480
to need something to iterate over here for this v4 to render the checkboxes.

227
00:12:54,480 --> 00:12:57,540
So the whole purpose of this component is to render checkboxes.

228
00:12:57,690 --> 00:13:01,380
If we don't give it anything to iterate over, then there's nothing for this component to do by itself.

229
00:13:01,620 --> 00:13:04,050
So we will mandate that this prop is required.

230
00:13:04,500 --> 00:13:04,860
All right.

231
00:13:04,860 --> 00:13:12,060
Now, as far as the type, remember, we're only using this twice, once for our organizations, once

232
00:13:12,060 --> 00:13:12,810
for our job types.

233
00:13:12,990 --> 00:13:17,310
And both of those those scenarios, we're iterating over a set of strings.

234
00:13:17,430 --> 00:13:19,470
So for now, we're going to leave this to be set.

235
00:13:19,950 --> 00:13:25,770
That technical implementation may not be perfect because later on we may want to iterate over something

236
00:13:25,770 --> 00:13:31,050
else like an array, but we'll worry about that later because for now, our two implementations or in

237
00:13:31,050 --> 00:13:35,940
other words, the two components that were replacing this one as well as job, they'll just sidebar

238
00:13:35,970 --> 00:13:37,890
job types, they both use sets.

239
00:13:38,040 --> 00:13:42,780
So this reusable component is good enough for now to solve the duplication we have right now.

240
00:13:42,870 --> 00:13:47,760
We don't want to super optimize it to solve every possible future problem, especially those that don't

241
00:13:47,760 --> 00:13:48,270
exist yet.

242
00:13:48,450 --> 00:13:49,920
So this is good enough for now.

243
00:13:49,920 --> 00:13:52,110
It'll replace our two existing components just fine.

244
00:13:52,500 --> 00:13:58,920
And finally, we want to make sure that the parent component provides me my mutation and whatever string

245
00:13:58,920 --> 00:13:59,720
the parent gives me.

246
00:13:59,730 --> 00:14:04,530
The mutation name is exactly what I'll get from my props object and tell this store to commit.

247
00:14:04,800 --> 00:14:08,740
And that will allow each parent to customize the mutation, which again will make this component more

248
00:14:08,740 --> 00:14:09,210
reusable.

249
00:14:09,480 --> 00:14:11,040
So this is going to be a string.

250
00:14:13,160 --> 00:14:16,460
And once again, it's going to be required because I need a mutation.

251
00:14:16,470 --> 00:14:18,830
I need to be able to tell the view next door what has changed.

252
00:14:19,310 --> 00:14:19,640
All right.

253
00:14:19,640 --> 00:14:21,500
So this is a good place to start in this lesson.

254
00:14:21,500 --> 00:14:27,590
We kind of created this reusable component, and we can obviously try to make it a reality and actually

255
00:14:27,590 --> 00:14:29,540
use it properly in the very next lesson.
