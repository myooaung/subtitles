WEBVTT
1
00:00:00.390 --> 00:00:01.170
Okay.

2
00:00:01.170 --> 00:00:07.230
So in the previous lesson, we wrote a test that focused on reading correctly from The View next door.

3
00:00:07.590 --> 00:00:12.630
Now, in this lesson, I want to add our second test, which is going to check writing to the bookstore.

4
00:00:12.960 --> 00:00:19.020
Of course, the way that works is the user types an entry into this input which triggers this commit

5
00:00:19.020 --> 00:00:21.960
method to run with this mutation and the data.

6
00:00:22.770 --> 00:00:27.990
And that's the exact same way I want to write my test, I want to mount my component, I want to interact

7
00:00:27.990 --> 00:00:33.630
with my input field, I want to set a text value there and then confirm that my commit method has been

8
00:00:33.630 --> 00:00:37.890
invoked with the right mutation name as well as the value from the input.

9
00:00:38.280 --> 00:00:39.960
So right here I'm going to add a new test.

10
00:00:41.510 --> 00:00:48.680
It tells store that the user has entered skills search term.

11
00:00:50.360 --> 00:00:53.660
So right here we're going to have a very similar setup to what we have above.

12
00:00:53.810 --> 00:01:00.320
In fact, I'm going to copy our entire mock of the View store, except I'm going to need to keep track

13
00:01:00.320 --> 00:01:05.030
of this commit right here, because later on I'm going to check that it's been invoked with the right

14
00:01:05.030 --> 00:01:05.540
arguments.

15
00:01:05.810 --> 00:01:11.510
So instead of writing that just function in line, I'm going to simply say content commit equals that

16
00:01:11.510 --> 00:01:12.200
just function.

17
00:01:12.500 --> 00:01:15.710
And then I'm going to use six right here to reference my comment above.

18
00:01:16.250 --> 00:01:16.580
All right.

19
00:01:16.580 --> 00:01:19.130
The next thing I'm going to do is shallow amount, my component.

20
00:01:19.430 --> 00:01:20.120
So there we go.

21
00:01:21.720 --> 00:01:26.010
Once again, I want to find my input and I'm going to find it using my data testis.

22
00:01:26.010 --> 00:01:29.010
I'm going to copy line 18 from above.

23
00:01:29.820 --> 00:01:35.160
And once I have my skill search input, what I now want to do rather than read the value, I want to

24
00:01:35.160 --> 00:01:36.030
set the value.

25
00:01:36.300 --> 00:01:41.250
And luckily this represents my DOM wrapper which is coming from our view test utils.

26
00:01:41.460 --> 00:01:47.940
And on that view object there is a method called set value which I can use to populate this input with

27
00:01:47.940 --> 00:01:48.450
a value.

28
00:01:48.750 --> 00:01:55.050
So right here, if I take my skills search input, I can invoke a method called set value and that is

29
00:01:55.050 --> 00:02:01.140
going to go into the domino and actually set the text input in the exact same way that a user would

30
00:02:01.140 --> 00:02:02.430
interact with it in a browser.

31
00:02:02.550 --> 00:02:08.760
I'm doing this within a test, so let's say I look for a term like view developer and just to not confuse

32
00:02:08.760 --> 00:02:12.660
a future programmer, let's actually make this skill search term blank.

33
00:02:12.990 --> 00:02:15.480
So it's almost like I'm starting with an empty string.

34
00:02:15.480 --> 00:02:21.120
Thus the input is blank and then I'm entering the text view developer Now this set value method is actually

35
00:02:21.120 --> 00:02:21.840
asynchronous.

36
00:02:21.840 --> 00:02:27.030
It returns a promise, therefore I need to await it and if I'm awaiting it, I need to make sure that

37
00:02:27.030 --> 00:02:28.620
my test function is async.

38
00:02:30.210 --> 00:02:30.570
All right.

39
00:02:30.870 --> 00:02:35.010
So after we enter that text into the input, what do we expect to happen?

40
00:02:35.160 --> 00:02:40.530
We expect that we're going to run this logic because it is connected to our V model right here.

41
00:02:40.830 --> 00:02:47.430
So after this logic is done, I expect the MC commit just function above should have been invoked and

42
00:02:47.430 --> 00:02:49.980
in addition it should have been invoked with these two arguments.

43
00:02:50.220 --> 00:02:56.760
So right here I'm going to say to have been called with which tests both invocation and arguments.

44
00:02:57.150 --> 00:03:02.340
My first argument is the name of the mutation, which should be update skills search term.

45
00:03:03.800 --> 00:03:09.020
And my second argument is whatever I entered into the input field, which from a test perspective here

46
00:03:09.020 --> 00:03:10.930
is a view developer is right here.

47
00:03:10.940 --> 00:03:13.430
My second argument should be view developer.

48
00:03:14.480 --> 00:03:16.520
I'm going to save that and let that test run.

49
00:03:18.570 --> 00:03:22.410
And in theory we already have the implementation because we did not write the tests first.

50
00:03:22.410 --> 00:03:23.580
We wrote the implementation first.

51
00:03:23.850 --> 00:03:25.410
So you can see everything is passing.

52
00:03:25.560 --> 00:03:27.570
But just to verify that it works correctly.

53
00:03:27.600 --> 00:03:31.890
What I'm going to do is to simply comment out this line of code right here, and let's see if that gets

54
00:03:31.890 --> 00:03:34.650
it to fail, because of course, this logic will not run.

55
00:03:34.800 --> 00:03:37.260
And thus you can see we're getting the expected error.

56
00:03:37.440 --> 00:03:43.080
The just testing framework is telling us, Hey, I expected to receive these two arguments, but I never

57
00:03:43.080 --> 00:03:45.630
actually called the commit method, which is now just function.

58
00:03:45.780 --> 00:03:48.300
So I have no calls, zero calls.

59
00:03:48.300 --> 00:03:49.440
I never received that logic.

60
00:03:49.650 --> 00:03:52.650
So that is confirming that our test is testing the right thing.

61
00:03:52.950 --> 00:03:57.470
So I'm going to come at this back end, get our test back to green, and that is all there is to cover

62
00:03:57.480 --> 00:03:58.200
in this lesson.

63
00:03:58.200 --> 00:03:59.640
So I will see you in the next one.
