WEBVTT
1
00:00:00.480 --> 00:00:01.260
Okay.

2
00:00:01.260 --> 00:00:07.590
So in the previous lesson, we wrote a new mutation that's going to update the View Store State to clear

3
00:00:07.590 --> 00:00:09.330
all of the user's selections.

4
00:00:09.660 --> 00:00:15.960
So of course, the next thing we need to do is to actually issue that mutation, commit that mutation

5
00:00:15.960 --> 00:00:17.520
when something happens in the app.

6
00:00:17.790 --> 00:00:21.960
And of course, that something is the user clicking the clear filters button.

7
00:00:22.410 --> 00:00:25.590
So let's open up our job filters sidebar component.

8
00:00:26.460 --> 00:00:27.060
There it is.

9
00:00:27.060 --> 00:00:28.840
And let me scroll all the way up here.

10
00:00:29.190 --> 00:00:32.610
And as a reminder, here are our three checkbox groups right here.

11
00:00:32.880 --> 00:00:37.260
And directly above that, we have this little section which we haven't worried about in a while.

12
00:00:37.470 --> 00:00:40.770
And it is here that we are rendering an action button called Component.

13
00:00:41.070 --> 00:00:45.840
It has the text clear, clear filters, and it also accepts an additional prompt called type.

14
00:00:45.990 --> 00:00:49.830
And that secondary value simply sets the styles of this action.

15
00:00:50.460 --> 00:00:55.890
So what we need to do is to commit our mutation whenever the user clicks this action button.

16
00:00:56.220 --> 00:00:58.830
So it's actually been a while since we set up a click handler.

17
00:00:58.830 --> 00:01:06.030
As a reminder, we need to use the VON Directive and so we can either use V on directly or the shortcut

18
00:01:06.030 --> 00:01:08.520
for that is the app sign right here.

19
00:01:09.360 --> 00:01:13.650
So after that, we provide the name of the event that we want to react to.

20
00:01:13.860 --> 00:01:15.690
We want to react to a click.

21
00:01:16.050 --> 00:01:19.680
So whenever the user clicks this action button, we're going to run some bit of logic.

22
00:01:19.860 --> 00:01:25.830
And of course, we provide that here inside the double quotes after an equal sign and with the old options

23
00:01:25.830 --> 00:01:26.460
API.

24
00:01:26.490 --> 00:01:32.520
This would typically be a method defined in our methods object and with the newer composition API.

25
00:01:32.670 --> 00:01:38.250
This can simply be a function that we define in our setup method and also make available to the template

26
00:01:38.250 --> 00:01:40.560
in our returned object.

27
00:01:40.890 --> 00:01:45.870
So let's call this function clear user job filter selections.

28
00:01:47.560 --> 00:01:47.860
All right.

29
00:01:47.860 --> 00:01:49.990
And of course, that function does not exist yet.

30
00:01:50.020 --> 00:01:52.450
So before we forget, let's immediately make it available.

31
00:01:52.780 --> 00:01:55.660
So I'm going to scroll all the way down here to the setup method.

32
00:01:56.290 --> 00:01:57.340
And right here in line.

33
00:01:57.340 --> 00:01:58.690
I will define that constant.

34
00:01:59.380 --> 00:02:00.280
And I will call it.

35
00:02:01.290 --> 00:02:03.570
Clear user job filter selections.

36
00:02:03.750 --> 00:02:08.130
For now, I'll make it an arrow function and an empty arrow function so it doesn't do anything.

37
00:02:08.340 --> 00:02:11.220
And then I'll immediately make it available to the template right here.

38
00:02:11.610 --> 00:02:14.310
Clear user job filter selections.

39
00:02:15.000 --> 00:02:18.090
And so what we have done now is we have wired up a click handler.

40
00:02:18.090 --> 00:02:22.290
When the user clicks the action button above, we're going to run this function.

41
00:02:22.560 --> 00:02:27.030
Of course, this function does nothing now, but that sets up the entire template to work with our values

42
00:02:27.030 --> 00:02:27.630
right here.

43
00:02:28.020 --> 00:02:28.290
All right.

44
00:02:28.290 --> 00:02:31.140
That is how we set up functions to be available to our template.

45
00:02:31.500 --> 00:02:34.500
So what do we actually want to do in the body of this arrow function?

46
00:02:34.500 --> 00:02:35.970
We want to commit a mutation.

47
00:02:36.240 --> 00:02:40.440
In order to commit a mutation, we're going to need access to the store object because that is what

48
00:02:40.440 --> 00:02:41.910
has the commit method on it.

49
00:02:42.240 --> 00:02:46.410
And in order to get access to the store, we're going to need to use our use store helper function.

50
00:02:46.710 --> 00:02:50.580
So I'm going to scroll up here and I'm going to import use store.

51
00:02:52.010 --> 00:02:54.080
So you store is going to come from view.

52
00:02:55.010 --> 00:02:58.850
And as a reminder, in order to use the store, we're also going to need the key.

53
00:02:58.850 --> 00:03:02.540
We provide the key there to enable type checking from type scripts perspective.

54
00:03:02.840 --> 00:03:07.850
And that key is going to come from the source directory and the stored directory in there.

55
00:03:07.860 --> 00:03:11.210
And that of course has an index file where we define this key.

56
00:03:11.630 --> 00:03:17.810
So immediately in line in our setup method, I can get access to the store by invoking you store and

57
00:03:17.810 --> 00:03:18.710
passing in the key.

58
00:03:19.280 --> 00:03:21.890
So now we're going to get access to our typed of you store.

59
00:03:21.890 --> 00:03:23.960
And this of course is going to be our type global state.

60
00:03:24.200 --> 00:03:29.180
But it also has other things like a method like commit and where we want to invoke that method, of

61
00:03:29.180 --> 00:03:31.820
course is going to be in the body of this function.

62
00:03:32.150 --> 00:03:35.300
So right here I'm going to invoke the commit method on my store.

63
00:03:36.250 --> 00:03:42.310
And of course the first argument we pass the commit is the name, the string name of the mutation that

64
00:03:42.310 --> 00:03:43.780
we want to run at that moment.

65
00:03:43.780 --> 00:03:44.050
Right.

66
00:03:44.440 --> 00:03:50.380
So we have that mutation name saved as a constant and I would prefer to use it here to avoid any chance

67
00:03:50.380 --> 00:03:50.980
of typos.

68
00:03:51.310 --> 00:03:55.300
So right here, we're already importing a bunch of constants from our constants file.

69
00:03:55.510 --> 00:04:00.550
I want to add in the new one we defined in the previous lesson, which is called the clear user job

70
00:04:00.550 --> 00:04:01.310
filter selections.

71
00:04:01.510 --> 00:04:03.970
That is our constant name represented as a string.

72
00:04:04.240 --> 00:04:08.350
So right here, I'm going to pass in that constant right here, which is basically the same thing as

73
00:04:08.350 --> 00:04:11.830
passing in a string and here representing the mutation that I want to run.

74
00:04:12.190 --> 00:04:17.680
So once again, to walk through the entire flow, when the user clicks on an action button, we're going

75
00:04:17.680 --> 00:04:19.870
to react to that click using the Beyond Directive.

76
00:04:20.080 --> 00:04:25.510
We're going to run the clear user job filter selections function, which we defined down below in our

77
00:04:25.510 --> 00:04:26.140
setup method.

78
00:04:26.440 --> 00:04:31.030
When that function runs, we're going to take our existing store, which we have access to via the used

79
00:04:31.030 --> 00:04:31.660
store function.

80
00:04:31.930 --> 00:04:36.070
We're going to invoke the commit method to run a mutation and then we're going to specify which mutation

81
00:04:36.070 --> 00:04:38.830
we want to run it, which is clear user job filter selections.

82
00:04:39.160 --> 00:04:42.250
That, of course, is going to be this mutation right here.

83
00:04:42.490 --> 00:04:47.130
It does not accept any additional arguments, so we don't need to provide anything to the commit method,

84
00:04:47.140 --> 00:04:47.830
just the name.

85
00:04:48.040 --> 00:04:50.950
And in theory, that should clear all of these three race.

86
00:04:51.400 --> 00:04:51.700
All right.

87
00:04:51.700 --> 00:04:54.910
So with that, let's transition to the browser and see how our work looks.

88
00:04:55.750 --> 00:04:59.740
We're going to discover that's not going to be fully complete, but we're going to make a lot of progress,

89
00:04:59.740 --> 00:05:02.110
and of course, we'll complete the rest of it in upcoming lessons.

90
00:05:02.530 --> 00:05:04.150
So let me bring up the view dev tools.

91
00:05:04.540 --> 00:05:06.610
Let me make sure I select a View X right here.

92
00:05:06.610 --> 00:05:09.340
And we're going to see all of our properties right here.

93
00:05:09.400 --> 00:05:13.570
Right now, all of the arrays are empty because we're starting out from the beginning.

94
00:05:13.780 --> 00:05:17.450
So let me check a couple of degrees, a couple job types in a couple organizations.

95
00:05:17.470 --> 00:05:23.980
So, for example, Bachelor and PhDs will do part time and full time and maybe view and me and point

96
00:05:23.980 --> 00:05:24.280
of view.

97
00:05:25.330 --> 00:05:31.480
So notice now right here, in my view, dev tools, we have populated those three properties with our

98
00:05:31.480 --> 00:05:32.870
checkbox selected values.

99
00:05:32.890 --> 00:05:33.280
All right.

100
00:05:33.580 --> 00:05:36.700
So now take a look at what's going to happen when we click Clear Filters.

101
00:05:37.630 --> 00:05:37.990
All right.

102
00:05:37.990 --> 00:05:45.010
So really good news will notice that the three arrays right here were clear and in turn, because our

103
00:05:45.640 --> 00:05:51.730
filter jobs getter is relying on these three values because our filter jobs get a reran because it's

104
00:05:51.730 --> 00:05:52.960
tracking these changes as well.

105
00:05:53.140 --> 00:05:56.590
You also noticed that the jobs on the right hand side updated.

106
00:05:56.920 --> 00:05:59.980
So we are indeed showing the jobs on the right hand side of that.

107
00:06:00.220 --> 00:06:03.130
Basically all 100 jobs because we no longer have any filters.

108
00:06:03.430 --> 00:06:06.700
So this part correctly updated are getter correctly we reran.

109
00:06:06.910 --> 00:06:08.230
So everything is in a good shape.

110
00:06:08.410 --> 00:06:13.600
Of course, the part that's missing is that we didn't actually clear any of these checkboxes, so we

111
00:06:13.600 --> 00:06:16.090
took care of the filtering on the view side of things.

112
00:06:16.090 --> 00:06:19.810
And you can certainly click on this multiple times if you want, when in fact check this again.

113
00:06:20.050 --> 00:06:22.360
So now we have three values inside two degrees.

114
00:06:22.450 --> 00:06:25.210
If I clear filters, you'll notice it is going back to an empty right.

115
00:06:25.480 --> 00:06:26.590
So it is indeed working.

116
00:06:26.590 --> 00:06:30.970
But of course, the other half of the equation for a seamless user experience is not just showing them

117
00:06:30.970 --> 00:06:33.480
the updated jobs, but clearing all the checkboxes.

118
00:06:33.550 --> 00:06:35.500
We're going to focus on that in the upcoming lessons.

119
00:06:35.740 --> 00:06:36.310
I'll see you there.
