WEBVTT
1
00:00:01.050 --> 00:00:07.110
All right, so we only have two tests for our job listing component, but I'm already seeing a lot of

2
00:00:07.110 --> 00:00:13.410
duplication between our tests, primarily in this configuration object that we provide as the second

3
00:00:13.410 --> 00:00:14.820
argument to the mount function.

4
00:00:15.120 --> 00:00:20.190
So if possible, I'd like to move as much of this logic outside of each individual test.

5
00:00:20.430 --> 00:00:24.720
I want each test to only worry about the details that it cares about for its assertion.

6
00:00:25.020 --> 00:00:29.970
So for example, information like the stabbing of the router link is something that we really don't

7
00:00:29.970 --> 00:00:32.790
care if another reader sees in our test.

8
00:00:32.790 --> 00:00:36.930
That's just something that we need to take care of for the purposes of the test being able to run it

9
00:00:36.930 --> 00:00:37.380
normally.

10
00:00:37.740 --> 00:00:40.920
So what I propose we do is to create a factory function.

11
00:00:41.130 --> 00:00:43.170
We did this strategy earlier in the course.

12
00:00:43.320 --> 00:00:47.220
A factory function operates just like a factory does in real life.

13
00:00:47.220 --> 00:00:48.480
It produces something.

14
00:00:48.750 --> 00:00:53.910
And in our case, it's just going to produce the configuration object that we want to pass as the second

15
00:00:53.910 --> 00:00:55.140
argument to mount.

16
00:00:55.440 --> 00:01:00.090
One reason that we might want to use a function instead of a regular object, by the way, is because

17
00:01:00.090 --> 00:01:05.520
the function guarantees that we're always getting a new object which prevents accidental mutation from

18
00:01:05.520 --> 00:01:06.540
one test to the other.

19
00:01:06.780 --> 00:01:11.700
If we have an object somewhere in our file and we accidentally change one of its properties in one test

20
00:01:11.940 --> 00:01:14.370
that can cascade into another test accidentally.

21
00:01:14.610 --> 00:01:19.650
In comparison, a function will always return a new object, even if it has the same properties, and

22
00:01:19.650 --> 00:01:23.550
that makes it much less likely that one test will accidentally influence another.

23
00:01:24.000 --> 00:01:29.160
So let me show you what I'm thinking with my factory function right here in my described block, I'm

24
00:01:29.160 --> 00:01:30.330
going to put it at this level.

25
00:01:30.330 --> 00:01:33.120
So every test below has access to this function.

26
00:01:33.360 --> 00:01:36.120
I'm going to create an arrow function called create config.

27
00:01:37.020 --> 00:01:40.020
And for now it's going to affect or accept no arguments.

28
00:01:40.260 --> 00:01:46.110
And I'm going to implicitly return an object which I can do in E6 using a pair of parentheses, and

29
00:01:46.110 --> 00:01:48.930
then my object syntax right here and here.

30
00:01:48.930 --> 00:01:52.710
I'm going to copy everything I have for my configuration object right here.

31
00:01:52.710 --> 00:01:56.440
So I'm going to copy it from a sample test and it's going to look like this.

32
00:01:56.490 --> 00:02:00.600
So right here we have our props and we have our global property as well.

33
00:02:00.870 --> 00:02:06.300
Now we copied it from our first test where we set up the job object with a title property.

34
00:02:06.570 --> 00:02:11.010
But keep in mind our second test depends on a job with an organization property.

35
00:02:11.220 --> 00:02:17.370
So to make sure that that factory object can fulfill any test, I'm going to copy this organization

36
00:02:17.370 --> 00:02:18.930
property up top as well.

37
00:02:19.320 --> 00:02:22.800
So now it's going to have both a title and an organization.

38
00:02:23.760 --> 00:02:24.150
Perfect.

39
00:02:24.420 --> 00:02:29.160
So now that allows me to invoke the create config function in every one of my tests.

40
00:02:29.460 --> 00:02:35.880
So right here I can remove this complex object and simply replace it with an invocation of the create

41
00:02:35.880 --> 00:02:36.750
config function.

42
00:02:36.750 --> 00:02:41.220
Above that is going to return the object that we have right here and that's what we're going to substitute

43
00:02:41.220 --> 00:02:46.290
as our configuration object for the amount function and the test becomes a lot shorter, right?

44
00:02:46.560 --> 00:02:48.150
We're going to do the exact same thing below.

45
00:02:48.240 --> 00:02:53.130
So I'm going to replace this whole big object with a call to my create config function.

46
00:02:55.390 --> 00:02:58.000
And I'm going to make sure to invoke it right here.

47
00:02:58.210 --> 00:03:04.900
Save the file, let our tests run and our tests are passing so everything is going fine as far as.

48
00:03:04.900 --> 00:03:06.130
And nothing has broken.

49
00:03:06.350 --> 00:03:07.780
Everything is still functioning.

50
00:03:08.080 --> 00:03:13.330
Now, this definitely reduces the size of the two tests, but I wonder if we can do better.

51
00:03:13.330 --> 00:03:15.880
And I would still argue there's some potential issues here.

52
00:03:16.210 --> 00:03:21.490
For one, I don't like that the tests don't provide any context and require us to scroll up.

53
00:03:21.880 --> 00:03:27.760
So what I mean by that is imagine we have this view right now and a developer looks at this job description

54
00:03:27.760 --> 00:03:33.310
or this test description and it says it renders job title, and they see that somewhere there's supposed

55
00:03:33.310 --> 00:03:34.720
to be a text, a view developer.

56
00:03:34.990 --> 00:03:38.470
They have no context as far as where a view developer is coming from.

57
00:03:38.470 --> 00:03:39.400
What what?

58
00:03:39.400 --> 00:03:40.630
Where is that coming from?

59
00:03:41.260 --> 00:03:42.120
Why does it matter?

60
00:03:42.130 --> 00:03:43.180
Why is it this string?

61
00:03:43.420 --> 00:03:48.600
Now, normally, if we're if we're not obsessing over the implementation, this would be something fine.

62
00:03:48.610 --> 00:03:54.160
If our component renders this text on screen manually, I would be okay with just testing right here.

63
00:03:54.460 --> 00:04:00.580
But in this case it's a specific interaction, which is a prop called job flowing into our component

64
00:04:00.790 --> 00:04:05.830
and it is a property on that job object that influences the text that this component displays.

65
00:04:06.070 --> 00:04:10.660
So in this case, I would like something that communicates at least something a little bit better as

66
00:04:10.660 --> 00:04:12.970
far as where this string is coming from.

67
00:04:13.060 --> 00:04:18.100
So the user does doesn't have to scroll up and look at this props and look at this job and figure it

68
00:04:18.100 --> 00:04:20.500
out that it's coming from this property right here.

69
00:04:20.770 --> 00:04:26.140
So how can we kind of get the best of both worlds where we reduce the duplication but allow each test

70
00:04:26.140 --> 00:04:30.160
to express the information that it needs to arrive at its assertion?

71
00:04:30.490 --> 00:04:31.870
Well, here's what I propose we do.

72
00:04:32.680 --> 00:04:38.170
I propose that we create a separate factory function just for the job props.

73
00:04:38.350 --> 00:04:44.230
So just for this object right here, I propose that we create a separate function, and we're going

74
00:04:44.230 --> 00:04:49.540
to be able to write that function in such a way that each test can provide custom properties that it

75
00:04:49.540 --> 00:04:55.720
cares about while still having a reasonable set of default properties that we can fall back to if a

76
00:04:55.720 --> 00:04:58.870
test doesn't care about a given set of properties.

77
00:04:58.950 --> 00:05:02.920
So let me show you how this is going to work and hopefully it makes sense when you see it as an actual

78
00:05:02.920 --> 00:05:03.460
example.

79
00:05:03.790 --> 00:05:08.980
So right here, I'm going to create another arrow function called create job props.

80
00:05:10.430 --> 00:05:17.360
And for this area function, I'm going to provide a job props parameter and this ideally will be a JavaScript

81
00:05:17.360 --> 00:05:19.460
object that the test will pass in.

82
00:05:19.700 --> 00:05:24.290
But I want to make this argument optional so the tests don't have to provide anything if they don't

83
00:05:24.290 --> 00:05:24.760
want to.

84
00:05:25.010 --> 00:05:29.990
So in order to provide a default value for this parameter, I can just put an equal sign and then an

85
00:05:29.990 --> 00:05:31.340
empty JavaScript object.

86
00:05:31.610 --> 00:05:37.220
So if a invocation of create job prompts doesn't give me an argument, we're going to fall back to an

87
00:05:37.220 --> 00:05:39.260
empty JavaScript object here.

88
00:05:39.260 --> 00:05:41.840
I'm going to implicitly return another object as well.

89
00:05:42.140 --> 00:05:44.300
So parentheses and my object syntax.

90
00:05:44.480 --> 00:05:47.420
And what I'm going to return is these two properties right here.

91
00:05:47.780 --> 00:05:50.330
So this represents basically a sample job.

92
00:05:50.330 --> 00:05:56.600
In fact, we might even call this function create job that would be just as well on a good name as create

93
00:05:56.600 --> 00:05:57.170
job props.

94
00:05:57.350 --> 00:06:02.270
So basically it's a sample job with a title, with an organization, maybe with other properties if

95
00:06:02.270 --> 00:06:03.710
we later determine that we need them.

96
00:06:03.920 --> 00:06:06.200
But it's kind of a standard job that we can use.

97
00:06:06.470 --> 00:06:12.050
However, what I'm going to do with that job props argument, which is going to be a object, is I'm

98
00:06:12.050 --> 00:06:14.750
going to do structure, it's properties right here in line.

99
00:06:14.990 --> 00:06:18.590
So in order to do that, I'm going to write three dots and then job of props.

100
00:06:19.730 --> 00:06:25.820
So what this allows us to do is if a test invokes create job props and passes in an argument with a

101
00:06:25.820 --> 00:06:31.820
different value for title or organization or any additional properties as well, because we're going

102
00:06:31.820 --> 00:06:37.010
to de structure the properties here, they're going to overwrite anything that already exists here.

103
00:06:37.280 --> 00:06:42.050
So in other words, if we provide an object with a title property, we're going to overwrite view developer

104
00:06:42.050 --> 00:06:46.100
right here with whatever we pass in, but we're still going to keep the organization.

105
00:06:46.340 --> 00:06:49.880
So we're going to kind of isolate a lot of these properties right here.

106
00:06:50.000 --> 00:06:55.310
But we're also going to going to allow each test to pass in whichever properties they care about to

107
00:06:55.310 --> 00:06:56.000
substitute.

108
00:06:56.150 --> 00:06:58.730
And that way the tests can communicate what matters.

109
00:06:58.760 --> 00:06:59.030
All right.

110
00:06:59.030 --> 00:07:00.590
We're going to see how this works in just a second.

111
00:07:00.890 --> 00:07:07.700
So right here in Create Config, I'm going to make this function now accept a parameter called job props.

112
00:07:08.840 --> 00:07:13.730
And for this job object right here, instead of hard putting all these values in line, I'm going to

113
00:07:13.790 --> 00:07:17.420
structure the value of the job props argument here as well.

114
00:07:17.720 --> 00:07:20.390
So this is going to be an object and this is going to be an object as well.

115
00:07:20.720 --> 00:07:23.570
So let me show you how the syntax is going to work in a sample test.

116
00:07:23.570 --> 00:07:27.660
So right here in our first one, the first thing I need to do is to create some job props.

117
00:07:27.660 --> 00:07:31.460
So I'm going to invoke that create job props method that I defined above.

118
00:07:32.300 --> 00:07:38.150
And what I care about in this test is the title because the title property on the job is where we are

119
00:07:38.150 --> 00:07:40.400
getting this text that you developer from.

120
00:07:40.700 --> 00:07:45.800
So I'm going to provide an object with a single title property and let's give it a different value.

121
00:07:45.800 --> 00:07:48.170
Let's say view programmer instead of your developer.

122
00:07:49.460 --> 00:07:49.850
All right.

123
00:07:50.150 --> 00:07:55.580
So now I have this function returning a object of job properties, a basic job.

124
00:07:55.790 --> 00:07:57.620
So I'm going to save this to job props.

125
00:07:59.570 --> 00:08:04.730
And then what I'm going to do is when I mount my job listing opponent, my create config function now

126
00:08:04.730 --> 00:08:10.040
expects to get that job object right here is job props so that it can take its properties and restructure

127
00:08:10.040 --> 00:08:11.060
them here into job.

128
00:08:11.360 --> 00:08:13.670
So I'm going to pass in my job props right here.

129
00:08:15.490 --> 00:08:16.180
So why?

130
00:08:16.180 --> 00:08:17.790
Why is this a good strategy, in my opinion?

131
00:08:17.800 --> 00:08:24.910
Well, now the test communicates that view programmer is the value of the title property and that's

132
00:08:24.910 --> 00:08:29.680
flowing in as a prop into our component called job and that is going to affect what the component render.

133
00:08:29.680 --> 00:08:32.740
So obviously we're failing right now because our title is You Programmer.

134
00:08:32.890 --> 00:08:34.750
So this should be view programmer as well.

135
00:08:35.020 --> 00:08:40.780
But now somebody else reading it can see a better association about what data is involved in making

136
00:08:40.780 --> 00:08:41.440
this assertion.

137
00:08:41.530 --> 00:08:46.240
Instead of wondering where is view programmer coming from, they can now look two lines above and realize

138
00:08:46.240 --> 00:08:50.920
Oh, it's something related to title that has something to do with our job prop that is flowing in.

139
00:08:51.400 --> 00:08:56.860
Now, if a test doesn't care about any custom props because it wants to fall back to these default values

140
00:08:56.860 --> 00:09:02.260
right here, that's totally fine because we can totally invoke create job props by itself and that will

141
00:09:02.260 --> 00:09:07.360
give us a reasonable job object with some kind of title in organization, property view developer and

142
00:09:07.360 --> 00:09:08.560
Airbnb respectively.

143
00:09:08.770 --> 00:09:14.440
And we're going to pass in no an empty object because we're going to fall back to this default and thus

144
00:09:14.440 --> 00:09:16.270
we're going to have kind of the standard job.

145
00:09:16.360 --> 00:09:20.350
And then the test communicates that it doesn't really care about any properties on the job object.

146
00:09:20.470 --> 00:09:24.940
It just needs some job object to exist in order to pass into the component, right?

147
00:09:24.940 --> 00:09:29.020
So it kind of allows each test to express which job properties it cares about.

148
00:09:29.740 --> 00:09:34.840
So similarly below here we currently have an issue where we don't know what Airbnb is and where it's

149
00:09:34.840 --> 00:09:37.840
coming from, and we don't want the user to scroll up and look for it.

150
00:09:38.080 --> 00:09:44.590
So what we can do is write another contact job props and we'll invoke that create job props function

151
00:09:44.590 --> 00:09:47.860
to generate a sample job or sample job props for us.

152
00:09:48.100 --> 00:09:52.060
But this time around, the property that we care about that's going to influence the actual appearance

153
00:09:52.060 --> 00:09:55.990
of Airbnb is of course the organization property owner job object.

154
00:09:56.260 --> 00:10:01.960
So right here I'm going to write organization, let's say Airbnb here to keep it consistent and then

155
00:10:01.960 --> 00:10:07.060
we need to make sure we pass that job props object into our create config function because it's going

156
00:10:07.060 --> 00:10:12.940
to take that object right here in the structure, those job properties into the job object right here,

157
00:10:12.940 --> 00:10:13.990
this flowing in as a prop.

158
00:10:14.110 --> 00:10:19.570
So we've kind of isolated the complexity of all the component needs in order to mount the stubbing out

159
00:10:19.570 --> 00:10:22.270
and the existence of a job prop, which is always required.

160
00:10:22.540 --> 00:10:29.050
But the details of the job object itself and the variations in that job object, which is really what

161
00:10:29.050 --> 00:10:34.360
affects the actual assertions in these tests, we've kept that within our test while isolating the things

162
00:10:34.360 --> 00:10:35.260
that we don't care about.

163
00:10:35.260 --> 00:10:40.420
A little further above, if the if the other user that is reading this file doesn't read this, I don't

164
00:10:40.420 --> 00:10:42.070
necessarily think that it's a loss.

165
00:10:42.280 --> 00:10:45.760
Rather, they can look at this test, they can figure out that title has some significance.

166
00:10:45.940 --> 00:10:50.380
They can assume that the create config function is doing some kind of configuration that is needed for

167
00:10:50.380 --> 00:10:51.130
the test to run.

168
00:10:51.220 --> 00:10:54.610
And they don't necessarily need to scroll up to see the content above.

169
00:10:54.760 --> 00:11:00.460
And I know it may not seem obvious or beneficial yet because our our test suite is so small.

170
00:11:00.580 --> 00:11:05.290
But you can imagine if we have ten different assertions and the file becomes 100 lines long, it can

171
00:11:05.290 --> 00:11:08.290
become pretty annoying to have the scroll back up to remember what everything means.

172
00:11:08.500 --> 00:11:08.890
Now.

173
00:11:08.890 --> 00:11:13.720
Each test better communicates which property matters and how it affects what we're testing.

174
00:11:13.990 --> 00:11:18.730
So I think this is a good refactor, again, subject to debate depending on which developer you talk

175
00:11:18.730 --> 00:11:20.740
to, but I think it keeps the tests clean.

176
00:11:20.980 --> 00:11:22.510
Each test has a single assertion.

177
00:11:22.660 --> 00:11:26.090
The description describes the value and the implement.

178
00:11:26.170 --> 00:11:32.140
The test implementation shows you how we actually arrive at that assertion, at that validation, at

179
00:11:32.140 --> 00:11:33.760
the component is doing what it's supposed to.

180
00:11:34.120 --> 00:11:35.740
That's all there is to cover in this lesson.

181
00:11:35.740 --> 00:11:37.270
So I will see you next one.
