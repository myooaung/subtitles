1
00:00:00,450 --> 00:00:00,960
Okay.

2
00:00:00,960 --> 00:00:05,010
So the next file that I want to target is going to be our actions file.

3
00:00:05,220 --> 00:00:10,680
So right here I have actions, J.S. and this is available in the source store directory.

4
00:00:10,860 --> 00:00:13,590
And as always, let's convert this file to TypeScript.

5
00:00:13,830 --> 00:00:20,760
So I'm going to change its extension from J.S. to T.S. and as we'll see, this will cause just one single

6
00:00:20,760 --> 00:00:21,390
violation.

7
00:00:21,390 --> 00:00:24,690
And it is that TypeScript does not understand what context is.

8
00:00:24,930 --> 00:00:28,290
You can see here parameter context implicitly has an any type.

9
00:00:28,560 --> 00:00:30,270
So we have to be a little bit more specific.

10
00:00:30,660 --> 00:00:34,650
So all we really need context to be is an object with a commit method.

11
00:00:34,650 --> 00:00:39,120
And we need to make sure that that commit method has the right type definition for these two arguments

12
00:00:39,120 --> 00:00:39,630
right here.

13
00:00:39,960 --> 00:00:44,070
Now, in reality, the context object is a little bit more complex than that.

14
00:00:44,280 --> 00:00:46,960
It actually has a lot more properties and methods on it.

15
00:00:47,250 --> 00:00:52,080
But I would argue for the purpose of this method, all it really cares about is having the commit method

16
00:00:52,080 --> 00:00:53,040
be properly defined.

17
00:00:53,310 --> 00:00:58,290
And the smaller that you can keep your interfaces out, rather than committing to very large interfaces

18
00:00:58,290 --> 00:01:03,840
that demand a lot, generally the smaller interfaces that you commit to, the more flexible and adaptable

19
00:01:03,840 --> 00:01:04,560
your code will be.

20
00:01:04,950 --> 00:01:10,350
So what I'm going to do is actually import an interface that's available from the View Library.

21
00:01:10,620 --> 00:01:15,960
So the View Library, The View Library, The View or library, all of the dependencies that we've added

22
00:01:16,020 --> 00:01:21,360
will have their own interfaces defined within them just for our use in TypeScript.

23
00:01:21,600 --> 00:01:25,650
So previously we've defined all of our interfaces ourselves within our project.

24
00:01:25,830 --> 00:01:30,480
But there's also other ones that we can simply reuse, and there's no need to type them from scratch.

25
00:01:30,750 --> 00:01:37,170
So right here at the very top, I'm going to import an interface and it's called Commit and it's going

26
00:01:37,170 --> 00:01:39,630
to come from the View Library.

27
00:01:40,020 --> 00:01:44,670
Now, if you want to see what this interface looks like, what you can do is hold your command key and

28
00:01:44,670 --> 00:01:45,840
then click on to commit.

29
00:01:46,080 --> 00:01:50,640
And on a Windows computer, this may be the control key, but once you click into this, it'll actually

30
00:01:50,640 --> 00:01:53,040
take you to the what's called the definition file.

31
00:01:53,190 --> 00:01:59,340
And this is actually going to be within our view repository, repository or view Xcode based within

32
00:01:59,340 --> 00:02:00,630
our Node modules directory.

33
00:02:00,930 --> 00:02:05,820
So you can see right here we are going straight to the definition of the interface for commit.

34
00:02:06,090 --> 00:02:07,920
So this is not code that we have written.

35
00:02:07,950 --> 00:02:12,120
This is code from the Official View Library that we downloaded from NPM.

36
00:02:12,390 --> 00:02:17,520
And this is the interface that defines the COMMIT method and defines its parameters and return value.

37
00:02:17,700 --> 00:02:21,000
So for example, the first argument to commit is the mutation you want to run.

38
00:02:21,150 --> 00:02:22,320
Here is the definition.

39
00:02:22,320 --> 00:02:26,610
That parameter is called type and it expects a type of string, right?

40
00:02:26,610 --> 00:02:29,070
So the parameter is called type and this type is string.

41
00:02:29,070 --> 00:02:30,720
A little bit confusing, but there you go.

42
00:02:30,900 --> 00:02:34,260
So basically, this is the exact same typescript code that we've been used to writing.

43
00:02:34,350 --> 00:02:36,150
However, somebody else has written it for us.

44
00:02:36,510 --> 00:02:41,130
Now down below, you'll see there is an interface specifically for the context object.

45
00:02:41,370 --> 00:02:46,290
So this is something we could import if we really wanted to use it to define the context parameter that

46
00:02:46,290 --> 00:02:47,580
we have in our actions file.

47
00:02:47,760 --> 00:02:52,920
But I argue this interface is a little too big and bloated for the simple implementation we have now.

48
00:02:53,130 --> 00:02:59,430
So instead of using this one, which itself uses the commit property, I'm going to define my own smaller

49
00:02:59,430 --> 00:03:04,650
interface that also has a commit property or a commit method, but I'm still going to use the commit

50
00:03:04,650 --> 00:03:08,280
interface from the view X type definition file.

51
00:03:08,610 --> 00:03:10,200
So let me show you how that's going to work.

52
00:03:10,200 --> 00:03:12,240
Instead of using this context right here.

53
00:03:12,510 --> 00:03:17,700
Instead, in my actions test file, I'll define my own interface called context.

54
00:03:18,990 --> 00:03:24,210
And the only thing my context object is going to need for my fetch jobs action to work is to have a

55
00:03:24,210 --> 00:03:25,260
commit method right here.

56
00:03:25,530 --> 00:03:27,720
So right here I'll say that I want a commit method.

57
00:03:27,960 --> 00:03:32,190
And for my type, that's obviously going to be a function or equivalently a method.

58
00:03:32,370 --> 00:03:37,200
But rather than write out all of that in line, I'm simply going to use the commit interface that I

59
00:03:37,200 --> 00:03:38,340
imported from view.

60
00:03:38,700 --> 00:03:44,070
Because this is itself an interface that defines a specific function, that takes specific parameters

61
00:03:44,070 --> 00:03:46,800
with specific types and returns a specific value.

62
00:03:46,980 --> 00:03:51,600
So this is the exact interface of the commit method that we're utilizing here.

63
00:03:51,630 --> 00:03:52,750
It's coming directly from view.

64
00:03:53,160 --> 00:03:56,190
So it's better than anything I could type here in line and more reliable.

65
00:03:56,520 --> 00:04:00,720
It's right here for context and going to provide my context interface from above.

66
00:04:00,990 --> 00:04:04,290
So I'm simply saying this context object will be of type context.

67
00:04:04,440 --> 00:04:05,220
And what does that mean?

68
00:04:05,340 --> 00:04:08,250
That means this context object will have a commit method.

69
00:04:08,610 --> 00:04:14,940
Keep in mind if we do anything else with the context object such as invoke another method are our implementation

70
00:04:14,940 --> 00:04:19,830
or our definitions will no longer work because TypeScript will say, You've only told me about a commit

71
00:04:19,830 --> 00:04:20,240
method.

72
00:04:20,250 --> 00:04:22,950
You haven't told me about your second method that you're invoking.

73
00:04:23,160 --> 00:04:29,250
In that case, we may rely indeed on the actual action, context, implementation or rather interface

74
00:04:29,250 --> 00:04:31,800
that we have right here from the View Library.

75
00:04:31,980 --> 00:04:35,810
But for now, the simplest interface is enough to get everything to work.

76
00:04:35,820 --> 00:04:40,860
And since we're only using the commit method, I want to create the smallest possible applicable interface

77
00:04:40,860 --> 00:04:45,900
I can, which is just a basic interface with a single method rather than the comparable interface that

78
00:04:45,900 --> 00:04:47,070
we just saw in the other file.

79
00:04:47,130 --> 00:04:52,350
With six different properties and methods that I don't care about, the more I lodge that complexity

80
00:04:52,350 --> 00:04:54,600
into my type definition, the more difficult it will be.

81
00:04:54,600 --> 00:04:59,340
For example, in our tests, because our tests will have to honor the real world interface rather than

82
00:04:59,340 --> 00:05:02,610
this smaller, simpler one that can also fulfill the same role.

83
00:05:03,000 --> 00:05:03,300
All right.

84
00:05:03,300 --> 00:05:08,040
So with that, the violations in our actions test file go away and we are going to proceed to the next

85
00:05:08,040 --> 00:05:08,400
lesson.

86
00:05:08,610 --> 00:05:09,210
I'll see you there.
