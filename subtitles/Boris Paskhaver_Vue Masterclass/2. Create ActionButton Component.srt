1
00:00:00,860 --> 00:00:01,820
All right.

2
00:00:01,820 --> 00:00:06,980
So now we know the next feature that we're going to be building, we're going to be adding a sign in

3
00:00:06,980 --> 00:00:09,260
button on our main navigation menu.

4
00:00:09,590 --> 00:00:15,980
So we might be tempted to open up our main nav component and start writing the HTML and the logic there.

5
00:00:16,190 --> 00:00:21,800
And I don't think that that's necessarily a bad idea, but what I propose we do instead is create a

6
00:00:21,800 --> 00:00:23,990
new component called Action Button.

7
00:00:24,320 --> 00:00:30,080
The thing about buttons is they tend to be pretty common and very frequently used across the website.

8
00:00:30,380 --> 00:00:35,600
So if you take a look at the Google Careers site, you'll see the same button style, the same button

9
00:00:35,600 --> 00:00:40,760
design used all over the website, because many times there's many different buttons that a user can

10
00:00:40,760 --> 00:00:44,960
click on to accomplish different things, different calls to different actions.

11
00:00:44,960 --> 00:00:45,170
Right?

12
00:00:45,530 --> 00:00:51,920
And so the whole purpose of you is to build lots of small reusable components, small chunks of the

13
00:00:51,920 --> 00:00:55,250
UI that we can place here and there and there and there.

14
00:00:55,520 --> 00:01:00,500
And I think a button is a perfect little small, reusable chunk of the UI, and so it makes sense to

15
00:01:00,500 --> 00:01:02,390
package it into its own component.

16
00:01:02,630 --> 00:01:07,730
So the point at which you decide, Hey, I need a new separate component, there's no right or wrong

17
00:01:07,730 --> 00:01:08,210
answer.

18
00:01:08,210 --> 00:01:10,610
It really depends on where, where you feel right about it.

19
00:01:10,850 --> 00:01:15,830
Sometimes you can start wiring up a button into a component and then maybe you start building out a

20
00:01:15,830 --> 00:01:19,250
second component and realize you need the same button with the same styles.

21
00:01:19,400 --> 00:01:22,820
And at that point, you may extract that to its own separate component.

22
00:01:23,000 --> 00:01:28,250
And there's nothing wrong with that waiting until you have duplication before you isolate what is common,

23
00:01:28,250 --> 00:01:29,120
that's totally fine.

24
00:01:29,360 --> 00:01:34,010
But in this case, I think I feel comfortable creating a new action button component already.

25
00:01:34,010 --> 00:01:34,310
All right.

26
00:01:34,610 --> 00:01:37,340
So let's go ahead and head to our components folder.

27
00:01:38,150 --> 00:01:42,500
And here we're going to create a file called Action Button Dot View.

28
00:01:42,530 --> 00:01:44,210
It's another view component file.

29
00:01:44,600 --> 00:01:46,790
And what do we need in a file like this?

30
00:01:46,790 --> 00:01:49,760
Well, of course, we start with our template tags at the very top.

31
00:01:50,120 --> 00:01:55,700
Here is where we define the HTML for the view component and we need to place something inside here so

32
00:01:55,700 --> 00:01:57,140
our s lynch doesn't complain.

33
00:01:57,410 --> 00:02:03,890
So let's place a basic button and here I'll put the text sign in for now just to put something on the

34
00:02:03,890 --> 00:02:04,190
button.

35
00:02:04,520 --> 00:02:06,170
And this is really all we need.

36
00:02:06,170 --> 00:02:11,300
But as always, it's a good idea to set up our basic configuration object for this component.

37
00:02:11,630 --> 00:02:14,630
So right below our template tags, we're going to write our script tags.

38
00:02:15,110 --> 00:02:17,720
Here is where we can write any JavaScript that we want.

39
00:02:18,020 --> 00:02:23,960
And of course our standard protocol by now, which we followed in May now as well, is to export default

40
00:02:24,230 --> 00:02:25,670
a plain object.

41
00:02:25,880 --> 00:02:29,570
And this will be our configuration object for our action button component.

42
00:02:29,960 --> 00:02:36,290
The only thing I want to add here now is a name property and I'm going to set that equal to action button.

43
00:02:37,160 --> 00:02:41,930
And again, the reason I'm doing this is so that this name is going to appear, in my view.

44
00:02:41,930 --> 00:02:47,660
DevTools Whenever I look at my app in the browser, it makes it easier to distinguish which components

45
00:02:47,660 --> 00:02:49,460
are actually appearing on our screen.

46
00:02:49,790 --> 00:02:53,960
I do have one small Iceland violation at the end here and all that it really wants.

47
00:02:53,960 --> 00:02:55,070
Here is a line break.

48
00:02:55,070 --> 00:02:55,940
So I'm going to add that.

49
00:02:56,180 --> 00:02:58,280
Save the file and we are all good to go.

50
00:02:59,460 --> 00:03:05,220
So now that we've created our action button component, we can go ahead and render it once within main

51
00:03:05,220 --> 00:03:05,640
NAV.

52
00:03:05,910 --> 00:03:09,820
Remember, we can render view components within other view components.

53
00:03:09,840 --> 00:03:12,270
In fact, that's what we're doing in our app component.

54
00:03:12,510 --> 00:03:15,990
This is where we imported main NAV and rendered it for the first time.

55
00:03:16,170 --> 00:03:21,450
We're going to do the exact same thing, but in main NAV we're going to import action button and then

56
00:03:21,450 --> 00:03:22,590
use it here in the template.

57
00:03:22,920 --> 00:03:26,190
So you may have forgotten what that process looks like, but it's pretty simple.

58
00:03:26,400 --> 00:03:30,150
Here in our script section, we're going to import our view component.

59
00:03:30,510 --> 00:03:33,090
So right here I'm going to import action button.

60
00:03:34,530 --> 00:03:39,360
Let's provide the from keyword and we want to start at the top of our SIRC directory.

61
00:03:39,360 --> 00:03:44,550
So I'm going to place that at sign and then I want to look inside my components folder and in there

62
00:03:44,550 --> 00:03:45,800
I'll find my action button.

63
00:03:45,810 --> 00:03:46,950
That view component.

64
00:03:46,980 --> 00:03:50,910
Right now, importing a component is not enough by itself.

65
00:03:50,910 --> 00:03:57,120
We have to configure it to work with Main NAV and we do that with an additional property on main navs

66
00:03:57,300 --> 00:04:00,750
configuration object and that property is components.

67
00:04:01,840 --> 00:04:06,030
I'm going to put components here that I'm going to set to a JavaScript object.

68
00:04:06,240 --> 00:04:12,660
And as you may recall, the way this works is the key or the property that I write here will represent

69
00:04:12,660 --> 00:04:15,630
the tag that I use in my HTML template.

70
00:04:15,870 --> 00:04:21,870
So for example, if I put something like block here and set it equal to main nav, then wherever or

71
00:04:21,870 --> 00:04:22,800
rather action button.

72
00:04:22,800 --> 00:04:29,130
My apologies then wherever I want to render an action button, I would simply write the tag block with

73
00:04:29,130 --> 00:04:31,860
the opening and closing brace.

74
00:04:31,860 --> 00:04:36,480
Right now, typically what you want to do is give your component the exact same name as it's actually

75
00:04:36,480 --> 00:04:37,920
called, just to avoid confusion.

76
00:04:38,130 --> 00:04:43,890
So what a lot of people do is just put something like action button like so and then we don't need the

77
00:04:43,890 --> 00:04:46,920
quotes here and then we end up with something like this.

78
00:04:46,920 --> 00:04:52,080
And of course using s syntax we can consolidate this to just action button.

79
00:04:52,170 --> 00:04:56,070
And this is basically the protocol we're going to be following for the remainder of the course.

80
00:04:56,070 --> 00:04:59,610
I'm just going to be giving my components the same tag name as the component name.

81
00:04:59,760 --> 00:05:02,550
So I'm going to write all of my components like this.

82
00:05:02,760 --> 00:05:07,860
But just as a heads up again, this is a JavaScript shortcut for a more complex operation where we are

83
00:05:07,860 --> 00:05:12,090
assigning the tag name to the component that we're going to render in our template.

84
00:05:12,090 --> 00:05:12,390
All right.

85
00:05:12,720 --> 00:05:17,400
So this gives us permission to render as many action buttons as we want in our main NAV.

86
00:05:17,640 --> 00:05:18,720
But we have an issue.

87
00:05:18,720 --> 00:05:20,250
And the issue here is kind of obvious.

88
00:05:20,670 --> 00:05:25,650
The yes lint launcher is going to tell us you've registered action button, but you're not actually

89
00:05:25,650 --> 00:05:26,190
using it.

90
00:05:26,190 --> 00:05:30,330
So it's kind of wasteful because we're importing it and registering it, but not actually doing anything

91
00:05:30,330 --> 00:05:30,600
with it.

92
00:05:30,930 --> 00:05:33,450
So let's go ahead and render this action button on to the screen.

93
00:05:33,780 --> 00:05:34,890
So I'm going to scroll up here.

94
00:05:36,240 --> 00:05:38,360
And what I want to do is find my nav section.

95
00:05:38,370 --> 00:05:44,490
This is where we have a navigation menu and I actually want to add my button after the entire navigation

96
00:05:44,490 --> 00:05:44,940
section.

97
00:05:45,270 --> 00:05:49,230
So I'm going to add a div here just to create a container for my new action button.

98
00:05:49,470 --> 00:05:52,110
And I'm going to apply some tailwind styles to this div.

99
00:05:52,800 --> 00:05:54,780
I'm, I'm going to make it a Flexbox.

100
00:05:54,780 --> 00:05:58,980
I'm going to vertically align the items within the Flexbox using items center.

101
00:06:00,170 --> 00:06:04,910
I'm going to play the full class to give it 100% of height compared to its parent.

102
00:06:05,210 --> 00:06:10,520
And then in order to actually push this div to the right side of the screen, give it space between

103
00:06:10,520 --> 00:06:13,010
our menu items and the right hand side of the screen.

104
00:06:13,160 --> 00:06:15,710
I'm going to apply a class called MLA Auto.

105
00:06:15,950 --> 00:06:18,220
What that does is apply margin left auto.

106
00:06:18,350 --> 00:06:24,110
That basically means, as it applies enough margin automatically on the left hand side to push this

107
00:06:24,110 --> 00:06:27,560
element, this div to the end of its parent container.

108
00:06:27,560 --> 00:06:32,540
And its parent container, of course, is this top level div that stores the hyperlink with the company's

109
00:06:32,540 --> 00:06:33,860
name, the nav bar.

110
00:06:33,860 --> 00:06:35,540
And now finally this right hand div.

111
00:06:35,540 --> 00:06:40,730
So this will just push this div all the way to the right hand side of our main top level nav bar.

112
00:06:40,790 --> 00:06:41,090
All right.

113
00:06:41,390 --> 00:06:44,270
And then here we can go ahead and render our action by component.

114
00:06:44,540 --> 00:06:51,050
Now, remember, we registered it as action button, so we can totally use this syntax when we render

115
00:06:51,050 --> 00:06:53,780
this component meaning capital A, capital B.

116
00:06:53,990 --> 00:06:59,390
But Vue also creates a kabob case version of the component name behind the scenes.

117
00:06:59,630 --> 00:07:07,070
So we can either write this action button or we can write this action button all lowercase with a dash

118
00:07:07,070 --> 00:07:08,840
between every two subsequent words.

119
00:07:08,840 --> 00:07:09,110
Right?

120
00:07:09,350 --> 00:07:15,860
And of course, we can have either an opening tag and a closing tag, just like an element.

121
00:07:16,070 --> 00:07:21,020
But in this case, since we don't have anything to render in between the tags, we don't need the closing

122
00:07:21,020 --> 00:07:21,500
tags.

123
00:07:21,500 --> 00:07:26,330
We can make this a little bit simpler by just rendering one and then putting the slash at the very end

124
00:07:26,510 --> 00:07:28,400
that accomplishes the exact same thing.

125
00:07:28,610 --> 00:07:31,630
So we're going to render one action button onto our screen.

126
00:07:31,820 --> 00:07:33,470
Let's take a look at what this looks like.

127
00:07:33,470 --> 00:07:37,520
So I'm going to navigate back to my browser and there we go.

128
00:07:37,610 --> 00:07:42,260
We have bubble careers, our NAV and right here perfectly, we have a very plain button.

129
00:07:42,410 --> 00:07:44,570
It's not styled yet, it's not dynamic yet.

130
00:07:44,570 --> 00:07:48,530
It doesn't react to user clicks yet, but it displays the sign in text.

131
00:07:48,650 --> 00:07:50,420
So this is a good first step.

132
00:07:50,570 --> 00:07:50,900
All right.

133
00:07:51,110 --> 00:07:53,690
So we've created a new action button component.

134
00:07:53,690 --> 00:07:55,160
We've rendered it in our main NAV.

135
00:07:55,280 --> 00:08:00,050
Next step, we're going to go ahead and style it and then start working on the actual logic to sign

136
00:08:00,050 --> 00:08:02,660
in and replace it with a profile image.

137
00:08:02,870 --> 00:08:04,370
So I'll see you in the upcoming license.
