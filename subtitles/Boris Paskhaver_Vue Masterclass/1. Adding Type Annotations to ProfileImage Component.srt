1
00:00:00,330 --> 00:00:03,780
All right, so welcome to the next section of the course.

2
00:00:03,990 --> 00:00:08,580
In this section, we're going to start applying TypeScript to our actual view components.

3
00:00:08,940 --> 00:00:10,890
So let's start with a really simple component.

4
00:00:10,890 --> 00:00:13,260
We're going to begin with profile, image, dot view.

5
00:00:13,560 --> 00:00:15,030
This is a good one to practice with.

6
00:00:15,390 --> 00:00:17,850
Profile image view is a pretty simple component.

7
00:00:17,850 --> 00:00:18,630
You can see here.

8
00:00:18,630 --> 00:00:25,110
It still utilizes our old options API and this is the component that renders that little circular profile

9
00:00:25,110 --> 00:00:27,390
image on the top right of our main now.

10
00:00:27,780 --> 00:00:28,080
All right.

11
00:00:28,230 --> 00:00:34,800
So the good news is we're able to use TypeScript with either the options API components or the composition

12
00:00:34,800 --> 00:00:35,550
API components.

13
00:00:35,790 --> 00:00:39,300
And the other bit of good news is we do not need to change the file name.

14
00:00:39,390 --> 00:00:42,180
We only need to add a couple of lines of syntax.

15
00:00:42,900 --> 00:00:48,180
Let me first show you here that TypeScript will not be enabled by default, and I'm going to prove this

16
00:00:48,180 --> 00:00:53,580
to you by defining a method that's going to attempt to change the image linked property to a different

17
00:00:53,580 --> 00:00:54,180
data type.

18
00:00:54,420 --> 00:00:57,990
You do not have to follow along here because this is just for the sake of example.

19
00:00:58,290 --> 00:00:59,580
So what I'm going to do right here.

20
00:01:00,620 --> 00:01:02,270
Is type out my methods property.

21
00:01:02,930 --> 00:01:04,870
This is my old options API.

22
00:01:05,150 --> 00:01:06,850
And so here I can define a method.

23
00:01:06,860 --> 00:01:08,690
I'm going to call it change image link.

24
00:01:10,650 --> 00:01:15,660
And in the body of this method, I'm going to access my image link data property on this keyword.

25
00:01:15,990 --> 00:01:20,730
So this, that image link and I'm going to assign it to an arbitrary number like five.

26
00:01:21,210 --> 00:01:23,640
And notice that there are no violations in the file.

27
00:01:23,760 --> 00:01:28,860
And this, of course, would not be promised permissible in TypeScript because TypeScript would say,

28
00:01:29,010 --> 00:01:31,770
hey, you gave image link an initial string value.

29
00:01:31,860 --> 00:01:36,600
Therefore, image like must stay a string and it would complain about it changing to a different data

30
00:01:36,600 --> 00:01:38,070
type such as a number.

31
00:01:38,280 --> 00:01:42,510
The fact that there are no errors in this file means we haven't configured TypeScript quite yet.

32
00:01:42,960 --> 00:01:45,060
So how do we properly configure TypeScript?

33
00:01:45,210 --> 00:01:46,510
We need to do two things.

34
00:01:46,800 --> 00:01:50,600
The first is on the script tag right here on line number five.

35
00:01:50,610 --> 00:01:57,000
We need to add an additional attribute and that attribute will be Lang Lang is short for language and

36
00:01:57,000 --> 00:02:02,700
it allows us to specify the language that the TypeScript compiler and the View compiler as well will

37
00:02:02,700 --> 00:02:04,140
interpret the section as having.

38
00:02:04,440 --> 00:02:06,780
So by default, it thinks it's going to be JavaScript.

39
00:02:06,960 --> 00:02:09,570
Now we're going to tell it that it's going to be TypeScript instead.

40
00:02:09,870 --> 00:02:11,240
So it's always going to be lang.

41
00:02:11,250 --> 00:02:12,750
And then we provide an equal sign.

42
00:02:12,750 --> 00:02:17,340
And in double quotes we're always going to type T.S. That is short for TypeScript.

43
00:02:17,760 --> 00:02:21,010
Notice that as soon as I write that, we now have the expected error.

44
00:02:21,030 --> 00:02:26,670
And if I hover my mouse over this, you can see TypeScript will tell us, Hey, type number is not assignable

45
00:02:26,670 --> 00:02:27,390
to type string.

46
00:02:27,690 --> 00:02:32,130
So it has correctly inferred that image length should be a string from its original assignment.

47
00:02:32,520 --> 00:02:35,430
And that's complaining that this is not a valid type.

48
00:02:35,700 --> 00:02:39,810
So immediately you can see the benefits of TypeScript start to come out in components as well because

49
00:02:39,930 --> 00:02:41,820
we avoid costly mistakes like this.

50
00:02:42,180 --> 00:02:42,450
All right.

51
00:02:42,450 --> 00:02:44,100
So that was strictly for the sake of example.

52
00:02:44,100 --> 00:02:46,660
So we can go ahead and remove our methods object right here.

53
00:02:47,910 --> 00:02:51,900
And there's one more thing we need to add to properly integrate TypeScript into a component.

54
00:02:52,260 --> 00:02:57,300
What we need to do is to import a special function from the view library called define component.

55
00:02:57,630 --> 00:02:58,770
So I'm going to do that right here.

56
00:02:59,460 --> 00:03:02,520
Import define component.

57
00:03:02,520 --> 00:03:03,840
And that is coming from view.

58
00:03:05,960 --> 00:03:12,290
And what we need to do is we need to wrap our configuration object right here in the defined component

59
00:03:12,290 --> 00:03:13,070
function call.

60
00:03:13,340 --> 00:03:18,320
So the most common way you're going to see this is export default, followed by the invocation of defined

61
00:03:18,320 --> 00:03:21,740
component passing in the object.

62
00:03:22,410 --> 00:03:22,610
Right.

63
00:03:22,610 --> 00:03:27,980
So as far as why we do this, I think the reason why we do this is to provide better typing or better

64
00:03:27,980 --> 00:03:29,930
type safety for TypeScript.

65
00:03:30,170 --> 00:03:31,620
Let me give you a very simple example.

66
00:03:31,640 --> 00:03:38,420
If you think about the options API, which has things like name data, methods, etc., and you compare

67
00:03:38,420 --> 00:03:43,670
it to the composition API, which has a single setup method which accepts its own set of parameters,

68
00:03:43,910 --> 00:03:48,830
those are two completely different types of return values for our view configuration object.

69
00:03:49,130 --> 00:03:54,800
So I think what divine component does behind the scenes is it provides all of those complex types and

70
00:03:54,800 --> 00:04:00,650
all of those either or scenarios, either options API or Composition API, these properties which may

71
00:04:00,650 --> 00:04:02,660
be optional, these properties which may be required.

72
00:04:02,810 --> 00:04:07,970
It does all of that and just does a better job at communicating to TypeScript that we're working with

73
00:04:07,970 --> 00:04:14,180
a specific view component configuration object rather than a regular JavaScript object that just happens

74
00:04:14,180 --> 00:04:17,600
to have, for example, a name, property and a data method.

75
00:04:18,350 --> 00:04:23,720
So it will validate, for example, that you provide values here that are valid to use in the options

76
00:04:23,720 --> 00:04:28,460
API, because otherwise it's just going to be a plain JavaScript object and be interpreted as TypeScript

77
00:04:28,460 --> 00:04:34,820
as such rather than a specific Vue configuration object that requires its own set of things that it

78
00:04:34,820 --> 00:04:36,200
needs to have in order to work.

79
00:04:37,100 --> 00:04:42,110
The key takeaway is anytime we're adding TypeScript to a component, we need to make the line equal

80
00:04:42,110 --> 00:04:47,990
to T.S. and we need to import, define component and wrap the actual object in the defined component

81
00:04:47,990 --> 00:04:48,590
function column.

82
00:04:49,100 --> 00:04:49,340
All right.

83
00:04:49,340 --> 00:04:51,410
A couple more things I want to talk about in this lesson.

84
00:04:51,590 --> 00:04:58,880
We are able to use TypeScript syntax now within the body of this entire section, because we told TypeScript

85
00:04:58,880 --> 00:05:01,640
that the entire section has a language of task.

86
00:05:01,940 --> 00:05:07,100
So, for example, if I wanted to specify the return value of my data method, I can totally provide

87
00:05:07,100 --> 00:05:10,160
a type annotation in line.

88
00:05:10,400 --> 00:05:14,960
For example, I can put a colon right here and say that this will produce a return value of an object

89
00:05:15,110 --> 00:05:17,450
with an image like property set to a string.

90
00:05:18,630 --> 00:05:18,870
All right.

91
00:05:18,870 --> 00:05:19,860
That's one way I can do it.

92
00:05:20,100 --> 00:05:23,130
Alternatively, what I can do is provide a manual interface.

93
00:05:23,340 --> 00:05:28,260
So, for example, right here I can define an interface called data, and data will look exactly the

94
00:05:28,260 --> 00:05:28,650
same.

95
00:05:28,650 --> 00:05:33,780
I'm going to say that a data object in this scenario will be an object with an image like property set

96
00:05:33,780 --> 00:05:34,440
to a string.

97
00:05:35,460 --> 00:05:40,380
And that allows me to use data right here and say that that is the return value of my data method.

98
00:05:40,710 --> 00:05:45,660
However, what you'll come to discover is that TypeScript is actually going to be pretty good at correctly

99
00:05:45,660 --> 00:05:50,640
identifying the return values of things like the data method, especially if it's really simple data

100
00:05:50,640 --> 00:05:52,200
types like a simple string.

101
00:05:52,530 --> 00:05:55,260
So technically we don't need this, it's not really required.

102
00:05:55,530 --> 00:06:00,330
I do want to point out that if we hover our mouse over data, we're going to get this really, really

103
00:06:00,330 --> 00:06:03,900
nasty output in this code that doesn't really communicate much.

104
00:06:04,080 --> 00:06:08,340
But I'm going to show you later on how we can sort of identify that TypeScript has inferred the wrong

105
00:06:08,340 --> 00:06:08,610
types.

106
00:06:08,760 --> 00:06:10,800
In this case, it's inverted the correct types.

107
00:06:11,070 --> 00:06:15,660
So technically speaking, we don't even need to tell it manually, explicitly that we have an image

108
00:06:15,660 --> 00:06:18,930
like attribute set to a string because it's going to be able to figure that out.

109
00:06:19,200 --> 00:06:20,100
So I'm going to remove this.

110
00:06:20,100 --> 00:06:25,350
It's just to show you how we would add an interface or how we would add a general type annotation to

111
00:06:25,350 --> 00:06:26,640
something like our data method.

112
00:06:26,760 --> 00:06:31,710
And we can apply that to any one of our other things here, whether it be our props, whether it can

113
00:06:31,710 --> 00:06:37,740
be our methods, object, etc. We can annotate as much as we want to specify the parameters, the return

114
00:06:37,740 --> 00:06:38,790
values, etc..

115
00:06:39,180 --> 00:06:39,570
All right.

116
00:06:39,690 --> 00:06:43,950
Before we finish this lesson off, there's one more thing I want to do, of course, and that is update

117
00:06:43,950 --> 00:06:44,520
the test suite.

118
00:06:44,760 --> 00:06:47,700
Since we updated our component, I also want to update the test suite.

119
00:06:48,030 --> 00:06:52,520
So I'm going to open up the corresponding test in profile image test that.

120
00:06:52,530 --> 00:06:54,720
Yes, let me drag that to my right.

121
00:06:55,260 --> 00:06:59,910
And then of course, we're going to change this component test file to be a typescript file.

122
00:07:00,270 --> 00:07:01,830
So let's give it a test extension.

123
00:07:02,820 --> 00:07:05,250
And one potential issue you may see is this one right here.

124
00:07:05,250 --> 00:07:07,200
I saw this a lot when I was building this course out.

125
00:07:07,410 --> 00:07:09,180
It's going to complain about the import.

126
00:07:09,360 --> 00:07:12,480
It's going to say cannot find module components, navigation, profile, image.

127
00:07:12,810 --> 00:07:17,850
All that is the problem here is that by default it's going to be looking for a test file because TypeScript

128
00:07:17,850 --> 00:07:19,800
by default doesn't look for a short view file.

129
00:07:20,460 --> 00:07:25,740
So what we can do to simply remove this error is to be more explicit here in our import and tell TypeScript

130
00:07:25,740 --> 00:07:27,660
that the file has a dot view extension.

131
00:07:27,900 --> 00:07:31,470
So right here I'm just going to add that view and that will make the problem go away.

132
00:07:31,500 --> 00:07:36,600
TypeScript will understand that it's now importing a view component from a view file and that should

133
00:07:36,600 --> 00:07:36,870
be up.

134
00:07:37,050 --> 00:07:38,670
And with that, everything should still pass.

135
00:07:38,670 --> 00:07:40,410
Let me quickly run our test suite right here.

136
00:07:42,100 --> 00:07:46,030
I mean, do you and PM run test watch to see if we're able to get just this file.

137
00:07:49,030 --> 00:07:52,900
Even a second all so there is profile image and I'm guessing main nav is running because may nav is

138
00:07:52,900 --> 00:07:54,160
also mounting the profile image.

139
00:07:54,310 --> 00:07:56,140
And you can see all of our tests are still passing.

140
00:07:56,570 --> 00:07:56,830
Right.

141
00:07:57,010 --> 00:08:01,330
So to summarize, the good news is whenever we are adding TypeScript to a component, we do not need

142
00:08:01,330 --> 00:08:02,830
to change its file extension.

143
00:08:03,010 --> 00:08:07,810
All we have to do is change the script section to have a lag of types and make sure to import, define

144
00:08:07,810 --> 00:08:13,840
component and wrap your configuration object as the first argument to that define component invoked

145
00:08:13,840 --> 00:08:19,240
function that just allows TypeScript to have a better understanding of what a view configuration object

146
00:08:19,240 --> 00:08:19,900
can entail.

147
00:08:20,170 --> 00:08:26,230
It can also notice here in this pop up, we finally get a somewhat reasonable message from TypeScript

148
00:08:26,230 --> 00:08:29,710
and you can see here it understands that image length is going to be indeed a string.

149
00:08:29,950 --> 00:08:33,310
So somewhere behind the scenes, there's a lot of complexity obviously going on.

150
00:08:33,460 --> 00:08:37,600
But TypeScript understands that our data is going to have an image like property set to a string.

151
00:08:37,810 --> 00:08:38,140
All right.

152
00:08:38,800 --> 00:08:40,240
That's all there is to cover in this lesson.

153
00:08:40,420 --> 00:08:41,890
So I will see you in the next one.
