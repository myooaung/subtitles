1
00:00:00,570 --> 00:00:05,610
All right, so let's add a test suite for our job listing view component.

2
00:00:05,850 --> 00:00:11,580
As a reminder, this component is found in the job results directory and we have not created that directory

3
00:00:11,580 --> 00:00:13,230
yet in our tests folder.

4
00:00:13,560 --> 00:00:14,280
It's right here.

5
00:00:14,280 --> 00:00:20,610
I want to go to tests unit components and here's where we have all of our feature folders that match

6
00:00:20,610 --> 00:00:22,860
the folder layout in the associate directory.

7
00:00:23,040 --> 00:00:26,880
And here is where I want to create a job results folder.

8
00:00:27,600 --> 00:00:34,140
And in there just like an S or C is where I want to put my test file for the job listing component.

9
00:00:34,440 --> 00:00:36,930
So this will be job listing forecast.

10
00:00:37,340 --> 00:00:44,040
J.S. And as always, I'm going to move the test far to the right so we can see it alongside the implementation.

11
00:00:44,430 --> 00:00:46,380
All right, so let's begin with our usual code.

12
00:00:46,380 --> 00:00:50,940
I'm going to import the mount function from view test utils.

13
00:00:53,110 --> 00:00:57,730
And then I'm going to import my component under test, which is the job listing component that is going

14
00:00:57,730 --> 00:01:04,930
to come from these source directory components, job results and job listing dot view.

15
00:01:05,680 --> 00:01:06,190
Perfect.

16
00:01:06,220 --> 00:01:11,590
Then I'm going to write a describe function and describe that we are testing the job listing component.

17
00:01:12,400 --> 00:01:16,060
And let's take a look at the component and think about what we want to test.

18
00:01:16,360 --> 00:01:22,840
To me, the heart of this component is basically rendering the individual properties of the job object

19
00:01:22,840 --> 00:01:24,490
that we passed in as a prop.

20
00:01:24,700 --> 00:01:28,510
Now, this component doesn't care about where job comes from.

21
00:01:28,510 --> 00:01:33,330
This component doesn't need to know that a job object is coming from a foreign API.

22
00:01:33,340 --> 00:01:33,730
Right?

23
00:01:33,970 --> 00:01:39,280
Because from this components perspective, all it knows is it's going to receive a prop called job.

24
00:01:39,520 --> 00:01:45,040
That job object is going to have properties on it and it's going to take those properties and render

25
00:01:45,040 --> 00:01:46,240
them to the screen.

26
00:01:46,390 --> 00:01:48,190
And that's really all we need to test.

27
00:01:48,430 --> 00:01:51,310
So I propose that we write a test where we mount this component.

28
00:01:51,490 --> 00:01:53,590
We give it a sample job object.

29
00:01:53,740 --> 00:01:58,840
And we test that we see on the screen exactly what that job object provides.

30
00:01:59,050 --> 00:02:04,780
For example, we can provide a job object with a title argument or property, and then double check

31
00:02:04,780 --> 00:02:08,120
that whatever title we provide is somewhere in this component's text.

32
00:02:08,140 --> 00:02:14,230
And I think that captures the heart of this, which is really the primary part of this component logic.

33
00:02:14,530 --> 00:02:16,120
So let me show you how that's going to work right here.

34
00:02:16,990 --> 00:02:21,100
I'm going to write a small, simple test that are focused on one thing at a time.

35
00:02:21,310 --> 00:02:22,900
So let's just first focus on this.

36
00:02:22,900 --> 00:02:28,870
The job title, the job listing component will do what it renders job title.

37
00:02:29,410 --> 00:02:35,320
So I'm going to provide my arrow function and I'm going to use my wrapper and I'm going to mount my

38
00:02:35,350 --> 00:02:36,490
job listing component.

39
00:02:37,120 --> 00:02:39,750
So how can we provide props to a test?

40
00:02:39,760 --> 00:02:43,810
Well, we have to provide that second argument to mount, which is our configuration object.

41
00:02:44,020 --> 00:02:48,580
And here we can provide a props property and that is going to be an object.

42
00:02:48,730 --> 00:02:53,320
And there is where we can match the props that we expect this component to receive.

43
00:02:53,440 --> 00:02:58,820
In this case, our component needs a job prop, so we need to provide a job right prop right here.

44
00:02:59,320 --> 00:03:04,060
And for the purposes of testing title, we don't really need to pass in a full job.

45
00:03:04,060 --> 00:03:04,360
Right.

46
00:03:04,510 --> 00:03:07,360
We only want to make sure that this part renders correctly.

47
00:03:07,570 --> 00:03:12,340
So all our job object needs to have in this test is just a title property.

48
00:03:12,670 --> 00:03:16,600
And I'm just going to make it a view developer, although it can be whatever you want.

49
00:03:17,650 --> 00:03:18,010
All right.

50
00:03:18,250 --> 00:03:20,770
So, yes, the other properties are going to be missing.

51
00:03:20,770 --> 00:03:24,850
So, yes, this, for example, is going to evaluate to undefined and it's not going to render.

52
00:03:25,060 --> 00:03:28,630
But that's fine because in this test we only care about checking this thing.

53
00:03:28,810 --> 00:03:34,060
And in a subsequent test, that's where we can write the logic to check for an organization or a location,

54
00:03:34,060 --> 00:03:40,090
etc. We keep our test small with a single focus and ideally a single assertion and just validate that

55
00:03:40,090 --> 00:03:43,840
it does everything kind of piecemeal, one small test at a time.

56
00:03:43,990 --> 00:03:45,490
So I'm just testing the title right here.

57
00:03:45,760 --> 00:03:53,050
So what I can do on my wrapper is I can invoke the text method that's going to give me all of the text

58
00:03:53,050 --> 00:03:58,030
that is within the DOM, within the actual view that the user sees.

59
00:03:58,180 --> 00:04:00,790
So just look at the actual text that's being rendered to the screen.

60
00:04:01,030 --> 00:04:07,930
And I want to use the two match nature to validate that that text has some kind of string or substring

61
00:04:07,930 --> 00:04:08,410
within it.

62
00:04:08,680 --> 00:04:11,680
So somewhere in my text, what do I expect?

63
00:04:11,680 --> 00:04:12,910
I expect my title.

64
00:04:13,120 --> 00:04:16,000
So somewhere in here I should see the string view developer.

65
00:04:16,180 --> 00:04:18,250
I don't care where, I just care that it's present.

66
00:04:18,490 --> 00:04:19,510
That's exactly the point.

67
00:04:19,510 --> 00:04:22,420
We just care that our job title is rendered somewhere.

68
00:04:22,780 --> 00:04:28,410
So let me go ahead and bring up my terminal and we'll run our just tests in watch mode.

69
00:04:28,420 --> 00:04:34,630
So right here and PM run, test, colon watch and let's see what we get.

70
00:04:36,940 --> 00:04:38,110
It's running right now.

71
00:04:38,800 --> 00:04:39,190
All right.

72
00:04:39,190 --> 00:04:41,590
So we do have a passing test, which is great.

73
00:04:41,770 --> 00:04:43,300
We do have a warning right here.

74
00:04:43,300 --> 00:04:46,210
And that warning has failed to resolve component router link.

75
00:04:46,360 --> 00:04:48,250
We have seen this issue before.

76
00:04:48,280 --> 00:04:54,460
That is because we are not mounting our job listing component within our whole view app.

77
00:04:54,640 --> 00:04:58,720
So our test suite has no clue about Vue router and what router link represents.

78
00:04:58,930 --> 00:04:59,740
That's simple enough.

79
00:04:59,740 --> 00:05:01,270
We can simply stub it out.

80
00:05:01,280 --> 00:05:07,780
So as a reminder, in order to do that, we're going to import a second thing from our test utils library

81
00:05:07,780 --> 00:05:09,130
and that is going to be our router link.

82
00:05:09,130 --> 00:05:14,950
So it is a smaller, more lightweight component that can play the role of a stub or a specifically a

83
00:05:14,950 --> 00:05:19,210
router link stub more effectively than the generic stub that the test provides to us.

84
00:05:19,480 --> 00:05:26,410
And here, after the props property, I will provide a global property and here I will provide a stubs

85
00:05:26,410 --> 00:05:27,790
property of set to an object.

86
00:05:28,030 --> 00:05:33,670
Here, I'm going to state that I'd like to stub out the router link component wherever it occurs, and

87
00:05:33,670 --> 00:05:38,620
I'd like the test to replace it with my router link stub that I imported about.

88
00:05:39,430 --> 00:05:42,070
I'm going to save that let prettier at its commas.

89
00:05:42,070 --> 00:05:45,580
And now our test passes and we have no warnings.

90
00:05:45,910 --> 00:05:46,240
All right.

91
00:05:46,240 --> 00:05:51,790
So going on this approach, let's write a very similar test for our organization.

92
00:05:51,790 --> 00:05:56,950
In fact, I think we can even copy this test and paste it below and then modify it accordingly.

93
00:05:57,220 --> 00:05:59,860
So right here, it renders job organization.

94
00:06:00,970 --> 00:06:03,550
So now we need to provide a prop of job.

95
00:06:03,760 --> 00:06:05,320
And we don't care about the title here.

96
00:06:05,320 --> 00:06:08,740
We care about the organization property because that's what it's going to render.

97
00:06:09,010 --> 00:06:11,740
And let's give a sample organization like Airbnb.

98
00:06:13,090 --> 00:06:13,630
All right.

99
00:06:13,990 --> 00:06:18,010
And we will keep this global code because we still need to stub out the router link.

100
00:06:18,160 --> 00:06:22,810
And here somewhere in the wrappers text, we now care about seeing the organization, which is going

101
00:06:22,810 --> 00:06:23,860
to be Airbnb.

102
00:06:24,670 --> 00:06:27,130
So I'm going to save that.

103
00:06:27,130 --> 00:06:28,990
Let's see if that works again.

104
00:06:28,990 --> 00:06:30,430
Our tests are small and lightweight.

105
00:06:30,430 --> 00:06:31,120
We're testing that.

106
00:06:31,120 --> 00:06:36,340
The job listing renders a job title vendor is a job organization, so things are looking pretty good.

107
00:06:36,490 --> 00:06:39,820
But I do think we are starting to see some redundancy from test the test.

108
00:06:40,000 --> 00:06:43,780
So in the very next lesson, we're going to start with a little refactor of this test suite.
