WEBVTT
1
00:00:00.530 --> 00:00:01.360
Okay.

2
00:00:01.370 --> 00:00:06.860
So our test suite is in a really good spot right now, but I still want to add one more test for our

3
00:00:06.860 --> 00:00:10.100
job filter is sidebar organizations component.

4
00:00:10.460 --> 00:00:15.140
So I have the component open here on the left hand side and the test suite for it open on the right

5
00:00:15.140 --> 00:00:15.620
hand side.

6
00:00:15.980 --> 00:00:22.190
As a reminder, this is the actual collapsible collection of organizational checkboxes that the user

7
00:00:22.190 --> 00:00:23.900
sees on the left hand sidebar.

8
00:00:24.230 --> 00:00:28.010
So here we are, iterating over something called unique organizations.

9
00:00:28.190 --> 00:00:33.170
That is a getter that returns a set of the unique organizations from our jobs.

10
00:00:33.440 --> 00:00:38.750
And as iterating over each one, we are rendering a checkbox and input checkbox for each one.

11
00:00:39.170 --> 00:00:42.830
And so in our current test right now, we are successfully testing that.

12
00:00:42.830 --> 00:00:45.920
We are rendering those checkboxes for the filtering process.

13
00:00:46.160 --> 00:00:51.350
However, there is still one bit of component logic that we are not testing so far in our test suite.

14
00:00:51.680 --> 00:00:54.350
And that is when the user selects a checkbox.

15
00:00:54.500 --> 00:00:59.360
We're going to run this select organization method right here, and that's defined down below and methods.

16
00:00:59.660 --> 00:01:02.810
And what that method does is it commits a mutation right here.

17
00:01:03.020 --> 00:01:08.120
Add selected organizations is the name of the mutation, also the name of the method that we configured

18
00:01:08.120 --> 00:01:11.210
on this component using the map mutations, helper function.

19
00:01:11.480 --> 00:01:17.030
And then to that mutation, we're passing this selected organization's local data array right here,

20
00:01:17.210 --> 00:01:22.640
which of course will have all of the strings from the checkboxes that the user has selected.

21
00:01:22.850 --> 00:01:23.210
Right.

22
00:01:23.480 --> 00:01:30.020
So we are not yet testing the interaction of this component with the store as far as this mutation.

23
00:01:30.260 --> 00:01:32.570
We have to write a test that captures two things.

24
00:01:32.780 --> 00:01:37.370
Number one, that we are committing the correct mutation, which is add selected organizations.

25
00:01:37.550 --> 00:01:39.800
And number two, that we are passing that mutation.

26
00:01:39.800 --> 00:01:44.750
The right argument, which is an array of local data representing the checkbox organizations at the

27
00:01:44.750 --> 00:01:46.430
user, has checked at that moment.

28
00:01:46.790 --> 00:01:52.070
So what I want to do is write a test where I will render the component, have the user click on a given

29
00:01:52.070 --> 00:01:56.390
checkbox and verify that we have invoked the correct method which is going to be commit.

30
00:01:56.450 --> 00:02:01.070
That is the method on our view store that that mutation is going to run for us behind the scenes.

31
00:02:01.280 --> 00:02:06.470
And I want to make sure that commit has been called with the correct mutation name, add selected organizations

32
00:02:06.650 --> 00:02:10.760
and the correct argument, which will be an array of whatever organization I select.

33
00:02:11.180 --> 00:02:11.510
All right.

34
00:02:11.810 --> 00:02:18.590
So let's go ahead and in our file, what I'm going to do is copy the entire test I have up above, because

35
00:02:18.590 --> 00:02:21.050
a lot of it is going to be very similar to what I'm about to write.

36
00:02:21.350 --> 00:02:23.990
So I'm going to copy our first test and paste it down below.

37
00:02:25.040 --> 00:02:27.830
The first thing I'm going to do, of course, is to change the test description.

38
00:02:28.400 --> 00:02:37.340
So what I want to verify with this component is that it communicates that user has selected checkbox

39
00:02:37.850 --> 00:02:39.110
for organization.

40
00:02:39.620 --> 00:02:44.120
Again, the thing that it's communicating with is viewed through the form of mutation.

41
00:02:44.330 --> 00:02:49.130
However, I want to avoid specific technical details in my test description if I can.

42
00:02:49.370 --> 00:02:53.900
I just want to communicate that the component wants to communicate to something else whenever the user

43
00:02:53.900 --> 00:02:54.710
selects a checkbox.

44
00:02:54.710 --> 00:02:59.750
I don't want to be too coupled to my implementation, so we're still going to need a collection of getters

45
00:02:59.750 --> 00:03:04.070
here, specifically unique organizations, because that's what our component is going to iterate over

46
00:03:04.220 --> 00:03:05.480
to render checkboxes.

47
00:03:05.690 --> 00:03:08.630
So in this case, we have two organizations we're going to render to checkboxes.

48
00:03:08.930 --> 00:03:15.050
But the other thing that you may recall that is available on a view store is a commit method and that

49
00:03:15.050 --> 00:03:19.610
is the method that Matt Mutations is going to automatically invoke for us behind the scenes passing

50
00:03:19.610 --> 00:03:21.500
in a string with the mutation name.

51
00:03:21.830 --> 00:03:27.050
So in order to represent that commit method, which Matt mutations is going to invoke for us when we

52
00:03:27.050 --> 00:03:31.220
click on a checkbox in our test, I need to make sure that I mark out my commit method.

53
00:03:31.550 --> 00:03:37.970
So what I'm going to do is define a concept here called commit and it's going to be a just function.

54
00:03:38.300 --> 00:03:39.710
Why am I using a just function?

55
00:03:39.710 --> 00:03:44.660
Because they just function can track how many times it's been invoked and with what arguments.

56
00:03:44.660 --> 00:03:46.280
And that's exactly what I want to do here.

57
00:03:46.430 --> 00:03:53.030
I want to click a checkbox and make sure that the component has invoked the commit method on my store

58
00:03:53.030 --> 00:03:55.880
and passed in the mutation and passed in the array of organizations.

59
00:03:56.180 --> 00:04:01.100
So right here I need to make sure that I configure it as an available method on my store.

60
00:04:01.370 --> 00:04:07.130
And my store right now is simply being fed into my Mocs property here in my Mt. function in the configuration

61
00:04:07.130 --> 00:04:07.400
object.

62
00:04:07.580 --> 00:04:12.560
So this will be what the component will have available via the Vista dollar same store property.

63
00:04:12.860 --> 00:04:18.260
So now in my component, if I were to access this that dollar sign stalker commit, I would have access

64
00:04:18.260 --> 00:04:19.190
to this just function.

65
00:04:19.280 --> 00:04:22.250
And that's exactly what Matt mutations will invoke behind the scenes.

66
00:04:22.250 --> 00:04:23.990
Whatever the commit method happens to be.

67
00:04:24.260 --> 00:04:27.740
Again, in the real world, the commit method will be the real method it talks to view.

68
00:04:28.280 --> 00:04:32.000
In our test, the world commit is a mock function that is playing that role.

69
00:04:32.180 --> 00:04:37.370
However, because it occupies that commit method slot on a store object, that's what map mutations

70
00:04:37.370 --> 00:04:37.790
will commit.

71
00:04:38.600 --> 00:04:40.280
So we're going to have a wrapper.

72
00:04:40.280 --> 00:04:44.870
We're going to mark out our store, we're going to have our font awesome icon stubbed out.

73
00:04:44.870 --> 00:04:45.380
That's good.

74
00:04:45.740 --> 00:04:48.320
Then we still need to keep this logic for clickable area.

75
00:04:48.320 --> 00:04:53.330
As a reminder, our entire component is a child of our accordion component.

76
00:04:53.330 --> 00:04:54.620
It's actually slot content.

77
00:04:54.860 --> 00:04:58.580
The accordion component is the one that enables that collapse ability functionality.

78
00:04:58.760 --> 00:04:59.570
So we first need to.

79
00:05:00.080 --> 00:05:02.120
And this organization's component.

80
00:05:02.300 --> 00:05:06.050
We need to expand the collapse ability so that we see those two checkboxes.

81
00:05:06.230 --> 00:05:08.780
So we need to make sure we find that area and click it.

82
00:05:08.960 --> 00:05:12.560
And here after those two lines is where we're actually going to customize what we're looking for in

83
00:05:12.560 --> 00:05:13.010
this test.

84
00:05:13.400 --> 00:05:16.370
Previously, we were looking for all of the organizations to be present.

85
00:05:16.850 --> 00:05:19.010
In this case, we have two now.

86
00:05:19.010 --> 00:05:20.750
I just want to click on one of them.

87
00:05:21.080 --> 00:05:27.290
So let's say I want to click on the Google one and then I want to verify that I'm going to invoke the

88
00:05:27.290 --> 00:05:31.310
COMMIT method with ADD selected organizations and an array of Google.

89
00:05:31.700 --> 00:05:32.840
So what I'm going to do here.

90
00:05:33.870 --> 00:05:36.150
Isn't going to create a concept called Google Input.

91
00:05:36.510 --> 00:05:41.970
And that's simply to just indicate that I'm trying to find the checkbox, the input for specifically

92
00:05:41.970 --> 00:05:44.370
my Google organization.

93
00:05:44.370 --> 00:05:45.420
There's going to be two checkboxes.

94
00:05:45.420 --> 00:05:46.350
I want to find the Google one.

95
00:05:46.800 --> 00:05:53.220
So I'm going to invoke the find method of my wrapper and I'm going to look for a data test attribute.

96
00:05:54.370 --> 00:05:59.110
Which does not yet exist on my component, and I'm going to assume that it's going to be just the organization's

97
00:05:59.110 --> 00:05:59.380
name.

98
00:05:59.380 --> 00:05:59.980
So Google.

99
00:06:00.920 --> 00:06:07.080
So my goal here is to assign each checkbox a unique data test identifier, eventually in my iteration.

100
00:06:07.220 --> 00:06:10.010
So the first one will have Google and the second one will have Amazon.

101
00:06:10.220 --> 00:06:14.120
And that data test actually allows us to find whichever one it is and then click it.

102
00:06:14.540 --> 00:06:21.950
So in this case we can click it, but there's actually a helper method available to us in view or rather

103
00:06:21.950 --> 00:06:24.800
the view test utils and that is called set checked.

104
00:06:25.010 --> 00:06:28.970
So if the find method returns an input, in this case it does.

105
00:06:28.970 --> 00:06:31.310
And that input is a checkbox on that.

106
00:06:31.310 --> 00:06:33.290
We can call a method called set checked.

107
00:06:33.590 --> 00:06:38.720
And what that is going to do is automatically emulate the checking of this checkbox right here, which

108
00:06:38.720 --> 00:06:44.240
of course will react or force the change event, which will force the select organization method to

109
00:06:44.240 --> 00:06:44.540
run.

110
00:06:44.720 --> 00:06:46.940
That's going to run our logic and that's what we want to test.

111
00:06:47.720 --> 00:06:51.800
So set checked is actually going to be an asynchronous operation.

112
00:06:51.800 --> 00:06:52.850
It returns a promise.

113
00:06:53.090 --> 00:06:57.140
So we need to make sure we await it so everything completes first and then we're going to wait for the

114
00:06:57.140 --> 00:06:59.570
component to render and run all of its logic.

115
00:06:59.780 --> 00:07:06.260
So once we check the Google checkbox, we at that point expect our commit method to have been invoked

116
00:07:06.260 --> 00:07:11.030
by that point because at that point, select organizations should have been run, which means we ran

117
00:07:11.030 --> 00:07:17.510
this a mutations method which we have defined right here, which in turn behind the scenes will run

118
00:07:17.510 --> 00:07:20.480
the commit method on our store and then we'll pass it the right arguments.

119
00:07:20.720 --> 00:07:26.570
So right here we're going to expect Commit, which is our Jess function up above.

120
00:07:26.750 --> 00:07:30.740
We can check that it has been invoked and we can do that with to have been called.

121
00:07:31.310 --> 00:07:35.570
And then to make it more specific, I don't just want to check that it's been invoked by Nat mutations.

122
00:07:35.810 --> 00:07:38.480
I want to check that it's been invoked with the right arguments.

123
00:07:38.690 --> 00:07:40.880
So I'm going to use to have been called width.

124
00:07:41.240 --> 00:07:46.220
And to this we pass the arguments that we expect the mutation to have or in this case the commit method

125
00:07:46.400 --> 00:07:50.570
to have been called with the first argument is going to be the name of the mutation.

126
00:07:50.720 --> 00:07:53.870
So we expect that we're going to invoke add selected organizations.

127
00:07:55.560 --> 00:08:00.690
And then finally, the second argument is going to be the argument we're passing to the mutation, and

128
00:08:00.690 --> 00:08:04.020
that is going to be our array of organizations.

129
00:08:04.170 --> 00:08:09.150
So if we just selected the Google checkbox, we should have a single item in this array and that will

130
00:08:09.150 --> 00:08:09.810
be Google.

131
00:08:11.020 --> 00:08:11.320
All right.

132
00:08:11.590 --> 00:08:13.600
So let's run this and it's going to fail.

133
00:08:13.900 --> 00:08:19.420
The reason it's going to fail is it's not able to set a check mark or click a checkbox because it's

134
00:08:19.420 --> 00:08:23.590
not able to find anything in our template with this data test of Google.

135
00:08:23.950 --> 00:08:27.940
So I'm going to scroll up and I'm going to add that data test to our input.

136
00:08:28.210 --> 00:08:32.560
Remember, we're going to have two inputs because we're going to have two checkboxes, one for each

137
00:08:32.560 --> 00:08:35.320
of our unique organizations, Google and Amazon.

138
00:08:35.680 --> 00:08:42.850
So what I'm going to do is bind using the colon syntax and I'm going to bind it to data test.

139
00:08:42.880 --> 00:08:43.480
Let's do it.

140
00:08:43.510 --> 00:08:44.770
How about right here?

141
00:08:45.100 --> 00:08:48.880
I'm going to bind it to data test because I want to provide a dynamic value.

142
00:08:49.300 --> 00:08:54.130
And what I'm going to bind to data test is going to be the organization string that I'm currently iterating

143
00:08:54.130 --> 00:08:54.460
over.

144
00:08:54.850 --> 00:08:56.350
So let me put organization here.

145
00:08:58.390 --> 00:09:02.860
So we're going to use the same string for our ID to dynamically bind to the idea attribute whatever

146
00:09:02.860 --> 00:09:04.270
that string is, in this case, Google.

147
00:09:04.410 --> 00:09:05.740
Google is going to be ready.

148
00:09:05.860 --> 00:09:10.240
Google is going to be the value that we provide to our array to store.

149
00:09:10.360 --> 00:09:14.320
And Google is also going to be the value for our data, this attribute.

150
00:09:14.560 --> 00:09:19.660
Then on the second iteration, as we're moving over the string of Amazon in our tests, once again,

151
00:09:19.660 --> 00:09:25.330
we're going to dynamically bind the ID attribute to the Amazon and bind the value actually to the Amazon

152
00:09:25.330 --> 00:09:27.550
and then bind the data just actually to the Amazon.

153
00:09:27.760 --> 00:09:31.930
And the reason we're doing this is now we have a unique data test on each of our two inputs, which

154
00:09:31.930 --> 00:09:36.910
allows us to run this logic right here that finds only the Google one and clicks only that to verify

155
00:09:36.910 --> 00:09:38.140
that our should have exactly one.

156
00:09:38.380 --> 00:09:43.750
So I'm going to save this and you can see that everything is successfully working.

157
00:09:44.020 --> 00:09:46.390
So we are expanding our accordion.

158
00:09:46.510 --> 00:09:50.620
We are finding one of our two inputs, the one with the data test of Google because there's only going

159
00:09:50.620 --> 00:09:51.040
to be one.

160
00:09:51.220 --> 00:09:54.280
We are checking that input using set checked.

161
00:09:54.460 --> 00:09:58.720
We're emulating the user, clicking on it and selecting it, which should automatically trigger a change

162
00:09:58.720 --> 00:10:00.970
event which will run select organization.

163
00:10:01.120 --> 00:10:06.760
The Select Organization method below will run an automatic mutation method called ADD Selected Organizations,

164
00:10:06.940 --> 00:10:10.780
which we have available because we have mapped mutations used right here.

165
00:10:11.050 --> 00:10:15.970
What this method is going to do is automatically run the commit method on our store.

166
00:10:16.510 --> 00:10:17.650
This is what it's doing right here.

167
00:10:17.650 --> 00:10:20.280
It's running this method and it's going to pass it first.

168
00:10:20.290 --> 00:10:25.180
The name of the mutation is the first argument, which is add selected organizations and then afterwards

169
00:10:25.180 --> 00:10:27.280
it's going to pass any arguments we give right here.

170
00:10:27.460 --> 00:10:31.330
So we are passing an array right here of whatever the data is.

171
00:10:31.450 --> 00:10:34.840
So that array at this juncture should be an array of Google.

172
00:10:34.990 --> 00:10:39.550
I know it's a little bit confusing because there's things going on behind the scenes that were we have

173
00:10:39.550 --> 00:10:40.200
to be aware of.

174
00:10:40.210 --> 00:10:42.700
We have to know that commit is what's being called.

175
00:10:42.820 --> 00:10:46.930
We have to know that commit is being called with the name and then the arguments here.

176
00:10:46.930 --> 00:10:50.440
It's a little bit confusing because we're calling at select organizations and we're only passing in

177
00:10:50.440 --> 00:10:51.050
one argument.

178
00:10:51.310 --> 00:10:57.070
But remember, this is a method created for us by Nat mutations that is doing that extra junk underneath

179
00:10:57.070 --> 00:10:57.490
the hood.

180
00:10:57.760 --> 00:11:03.280
We could totally wire this up manually by doing things like this, that dollar sign store not commit

181
00:11:03.970 --> 00:11:04.810
and doing this.

182
00:11:04.810 --> 00:11:07.420
This is basically doing the exact same thing as what we're doing.

183
00:11:08.750 --> 00:11:11.420
With not mutations, but this is what's running underneath the hood.

184
00:11:11.570 --> 00:11:12.800
So that is what we're testing.

185
00:11:13.280 --> 00:11:16.400
And we're the reason we're doing this approach is because it's a little bit cleaner too, right?

186
00:11:16.580 --> 00:11:19.130
And utilizes the available functions in view.

187
00:11:19.730 --> 00:11:20.870
So I'm going to remove that.

188
00:11:21.650 --> 00:11:24.260
We're testing that, save that everything is still running.

189
00:11:24.260 --> 00:11:25.790
So we are successfully testing that.

190
00:11:25.790 --> 00:11:30.620
We are rendering our unique organizations and that the component is sending out the right message whenever

191
00:11:30.620 --> 00:11:31.580
we click on a checkbox.

192
00:11:31.730 --> 00:11:34.840
And that, I argue, is everything that this component is responsible for.

193
00:11:34.850 --> 00:11:36.920
It doesn't really have much else to take care of.

194
00:11:37.100 --> 00:11:42.380
So with that, I am pretty happy with this test suite and we can move on in the next lesson to refactoring

195
00:11:42.380 --> 00:11:42.980
it a little bit.
