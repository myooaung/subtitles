WEBVTT
1
00:00:00.340 --> 00:00:01.020
Okay.

2
00:00:01.020 --> 00:00:08.100
So this is going to be a fun lesson because we're going to use TDD to wire up a part of our View X Store

3
00:00:08.130 --> 00:00:08.550
State.

4
00:00:08.880 --> 00:00:14.910
So as a reminder of what our goal is, we ultimately want to move the storage of our jobs away from

5
00:00:14.910 --> 00:00:21.540
being a local piece of data on our job listings component to being a piece of state on our View X Store.

6
00:00:21.750 --> 00:00:22.050
Right?

7
00:00:22.290 --> 00:00:26.280
So let's open up our View X Store file that's going to be in a store index state.

8
00:00:26.280 --> 00:00:26.700
Yes.

9
00:00:27.240 --> 00:00:31.260
And so here is our current state of the store and we have a single property of is logged in.

10
00:00:31.410 --> 00:00:36.270
And obviously we want here to be a new property, which I think we can call jobs.

11
00:00:36.270 --> 00:00:36.900
That makes sense.

12
00:00:36.900 --> 00:00:37.110
Right.

13
00:00:37.290 --> 00:00:39.960
And it's going to be the exact same idea as we have in job listings.

14
00:00:40.080 --> 00:00:44.460
It's going to start out as an empty array and then we're going to make an API request, get a bunch

15
00:00:44.460 --> 00:00:51.810
of jobs from our backend and then populate that jobs slice of the view state with our new array of actual

16
00:00:51.810 --> 00:00:52.200
jobs.

17
00:00:52.200 --> 00:00:52.440
Right.

18
00:00:52.650 --> 00:00:54.660
But we're going to do a TDD approach first.

19
00:00:54.660 --> 00:00:56.820
So let's actually write our test first.

20
00:00:57.150 --> 00:01:01.260
So I'm going to open up the test fund that I have for my store.

21
00:01:01.260 --> 00:01:02.880
So I think it should be in store.

22
00:01:03.150 --> 00:01:04.310
Index that, test that.

23
00:01:04.320 --> 00:01:05.170
Yes, there we go.

24
00:01:05.190 --> 00:01:09.840
You should find this file right here it is in test unit, store index that test that.

25
00:01:09.840 --> 00:01:10.110
Yes.

26
00:01:10.350 --> 00:01:13.920
And here we have a separate describe the block for the state of the store.

27
00:01:14.190 --> 00:01:19.440
Here we have our very first test that checks for the is logged in property and describes the user value.

28
00:01:19.650 --> 00:01:21.360
So I'm going to do the exact same thing here.

29
00:01:21.570 --> 00:01:22.800
I'm going to write a test.

30
00:01:23.160 --> 00:01:25.560
And what is the responsibility of the View store?

31
00:01:25.560 --> 00:01:30.120
It's going to store job listing its stores job listings.

32
00:01:31.280 --> 00:01:31.640
Okay.

33
00:01:31.940 --> 00:01:34.500
So we're going to follow a very similar protocol to what we did above.

34
00:01:34.520 --> 00:01:38.210
We're going to invoke our state function that we imported from the file on the left.

35
00:01:38.420 --> 00:01:44.000
And I'm going to assign it to a constant called starting state, and I'm going to check for just one

36
00:01:44.000 --> 00:01:45.990
property on that starting state object.

37
00:01:46.010 --> 00:01:47.200
It doesn't exist yet.

38
00:01:47.210 --> 00:01:48.610
That is the whole point of TDD.

39
00:01:48.710 --> 00:01:50.180
We talk about how it should work.

40
00:01:50.390 --> 00:01:56.630
So I expect that on my view store starting state, I should have a property called Jobs and it should

41
00:01:56.630 --> 00:01:57.860
equal an empty array.

42
00:01:57.980 --> 00:02:00.140
When the store starts out right.

43
00:02:01.130 --> 00:02:03.110
So this is going to fail as it should.

44
00:02:03.260 --> 00:02:06.410
And then we could basically use this to influence our implementation.

45
00:02:06.710 --> 00:02:11.180
So right now, of course, our test failure is saying, hey, I expected to receive an empty array,

46
00:02:11.330 --> 00:02:16.790
but I'm actually receiving undefined when I access the jobs property on this object that I get back,

47
00:02:17.060 --> 00:02:17.770
which makes sense.

48
00:02:17.780 --> 00:02:23.180
So our implementation in this case is kind of the exact same as our test, which is silly, but it actually

49
00:02:23.180 --> 00:02:25.910
makes sense because now we have our store state fully tested.

50
00:02:26.150 --> 00:02:28.610
So right here we're going to add that jobs property.

51
00:02:28.910 --> 00:02:30.170
We're going to add our empty array.

52
00:02:30.560 --> 00:02:31.370
We're going to save that.

53
00:02:31.370 --> 00:02:32.030
Let it rerun.

54
00:02:34.260 --> 00:02:38.160
It's looking like it's taking a little bit of time on my computer for seconds that that, I assure you,

55
00:02:38.160 --> 00:02:40.950
is not anything bad in our test design.

56
00:02:40.950 --> 00:02:44.850
That is my slow MacBook running, particularly offensively slow right now.

57
00:02:45.060 --> 00:02:51.330
But we can see that everything passed and so we now added a new slice of state to our Veeck store.

58
00:02:51.540 --> 00:02:55.860
So the next thing we want to do in the next lesson is to write the mutation that's going to receive

59
00:02:55.860 --> 00:03:00.330
those jobs and update this jobs property of the U.S. store state.
