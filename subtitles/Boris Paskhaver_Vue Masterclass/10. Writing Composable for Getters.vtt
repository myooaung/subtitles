WEBVTT
1
00:00:00.900 --> 00:00:01.660
Okay.

2
00:00:01.670 --> 00:00:03.890
So we are still in the sub NAF component.

3
00:00:03.890 --> 00:00:07.700
And now I'd like you to focus on these two lines of code right here.

4
00:00:07.970 --> 00:00:09.770
Lines 26 through 27.

5
00:00:10.160 --> 00:00:16.130
And my question to you is, if another component needed to use the exact same filter jobs getter, which

6
00:00:16.130 --> 00:00:17.450
we know is the case.

7
00:00:17.450 --> 00:00:22.520
Right, because in sub nav, we're using filter jobs to get the amount of jobs, but we're also using

8
00:00:22.520 --> 00:00:28.040
this filter jobs getter to determine the actual array of jobs that we render on the right hand side,

9
00:00:28.040 --> 00:00:29.450
the actual filter job listings.

10
00:00:29.750 --> 00:00:32.900
So we know that we have to use this getter in multiple locations.

11
00:00:33.170 --> 00:00:38.480
And my question to you is, if we had another component that needed the same logic, what would the

12
00:00:38.480 --> 00:00:39.500
code look like?

13
00:00:39.890 --> 00:00:43.790
So if you take a look at what we're doing here, we're using use store to get a store, and then we're

14
00:00:43.790 --> 00:00:47.090
using the computed function to talk to that reactive store object.

15
00:00:47.210 --> 00:00:51.440
And we have to know that that has a getters property and we have to know that there is a filter jobs

16
00:00:51.440 --> 00:00:52.520
property on that.

17
00:00:53.150 --> 00:00:58.580
And if we were to repeat this logic in another component, the actual implementation code would look

18
00:00:58.580 --> 00:00:59.870
exactly the same.

19
00:01:00.410 --> 00:01:01.550
In our first example.

20
00:01:01.550 --> 00:01:06.520
For this one, we at least have to provide a custom argument of the string we want to match here.

21
00:01:06.530 --> 00:01:10.460
The code for accent getter would look the exact same in any other component.

22
00:01:10.730 --> 00:01:16.670
So I argue this is a perfect piece of code to refactor and move into its own composable function, a

23
00:01:16.670 --> 00:01:22.700
simple composable function that gets the York store and knows how to talk to a getter and return a reactive

24
00:01:22.700 --> 00:01:26.420
object, holding that piece of information that any component is welcome to use.

25
00:01:26.810 --> 00:01:28.340
So let's turn that into a reality.

26
00:01:28.610 --> 00:01:30.710
So right here, I'm going to open up my file Explorer.

27
00:01:31.070 --> 00:01:36.500
And in the source directory, we're, we're storing all of our view X related functionality in the store

28
00:01:36.500 --> 00:01:38.390
directory here, all of our files.

29
00:01:38.630 --> 00:01:42.670
So in here, I'm going to create a new file called Composable.

30
00:01:44.210 --> 00:01:44.630
Yes.

31
00:01:45.560 --> 00:01:47.330
I'm going to drag this over to the right hand side.

32
00:01:48.930 --> 00:01:51.690
When I'm basically going to do is copy this exact implementation.

33
00:01:51.990 --> 00:01:56.160
So I know that I'm going to need a computed function from view.

34
00:01:56.880 --> 00:02:00.870
I know that I'm going to need the use store function from view X.

35
00:02:02.490 --> 00:02:06.030
And here actually we were accessing the property directly to filter jobs.

36
00:02:06.180 --> 00:02:07.500
That actually is a mistake.

37
00:02:07.500 --> 00:02:13.050
We kind of kind of defeats the entire purpose of creating those constants that we export to avoid the

38
00:02:13.050 --> 00:02:14.460
chance of typos.

39
00:02:14.610 --> 00:02:20.070
So in our actual implementation here, let's correct that mistake by importing our filter jobs name

40
00:02:20.070 --> 00:02:21.270
from our Constance file.

41
00:02:21.600 --> 00:02:25.650
So right here I'll import the actual filter jobs constant name.

42
00:02:26.040 --> 00:02:32.340
And that is going to come from not this relative import but rather the source directory store constants.

43
00:02:32.640 --> 00:02:34.290
And here I can describe my function.

44
00:02:34.290 --> 00:02:39.390
So right here I'm going to export const since I anticipate there's not going to be a single default

45
00:02:39.390 --> 00:02:42.060
export but rather multiple composable later on.

46
00:02:42.150 --> 00:02:43.830
I'm just going to do a regular export here.

47
00:02:44.130 --> 00:02:48.180
I'm going to export a function called use filter jobs.

48
00:02:49.820 --> 00:02:55.040
And the responsibility of this composable function will be to talk to view acts and get me my filter

49
00:02:55.040 --> 00:02:55.490
jobs.

50
00:02:55.760 --> 00:02:56.400
So right here.

51
00:02:56.420 --> 00:02:58.400
How do I get access to my future store?

52
00:02:58.580 --> 00:02:59.720
By using use store.

53
00:03:00.140 --> 00:03:04.190
So let me invoke that and assign that to a constant called store.

54
00:03:05.060 --> 00:03:07.830
And then we're going to do the exact same thing we did right here.

55
00:03:07.850 --> 00:03:09.440
We're going to run our computed function.

56
00:03:09.800 --> 00:03:13.640
We're going to provide it the function we want to rerun whenever the store changes.

57
00:03:13.820 --> 00:03:16.790
And in the store, I specifically want to watch the getters.

58
00:03:17.000 --> 00:03:19.610
And which getter do I care about the filter jobs getter.

59
00:03:19.910 --> 00:03:24.410
Instead of using the dot syntax as we're doing right here, I'm going to use the square bracket syntax

60
00:03:24.410 --> 00:03:25.850
which is valid in JavaScript.

61
00:03:26.030 --> 00:03:31.460
And the only way that we can provide a dynamic key such as this filter jobs constant right here, which

62
00:03:31.460 --> 00:03:33.320
of course is just a string filter jobs.

63
00:03:33.530 --> 00:03:36.500
But the reason we do this is just to avoid any chance of typos.

64
00:03:36.680 --> 00:03:41.420
Whatever this constant is, is the exact same name we gave the getter in our actual definition file.

65
00:03:41.570 --> 00:03:43.490
So this will ensure no chance of typos.

66
00:03:43.730 --> 00:03:45.470
And final thing, that's very important.

67
00:03:45.470 --> 00:03:53.390
I need to make sure that I return that computed function or that computed reactive object as the final

68
00:03:53.390 --> 00:03:57.500
return value of my use filter jobs function.

69
00:03:57.710 --> 00:03:58.010
All right.

70
00:03:58.220 --> 00:04:01.940
So obviously we can now use this composable function in our component.

71
00:04:01.940 --> 00:04:05.570
But before we do that, I want to very quickly add a test suite for this thing as well.

72
00:04:05.930 --> 00:04:07.970
So let's open up our explorer.

73
00:04:08.360 --> 00:04:15.170
And in the tests unit, store directory, I'm going to create a new test file just for composable and

74
00:04:15.170 --> 00:04:16.920
I'll call it composable.

75
00:04:17.360 --> 00:04:18.040
Test that.

76
00:04:18.050 --> 00:04:18.440
Yes.

77
00:04:19.970 --> 00:04:20.330
All right.

78
00:04:20.330 --> 00:04:22.550
Let me drag that over here to the left hand side.

79
00:04:22.550 --> 00:04:24.110
So we're going to swap things a little bit.

80
00:04:24.110 --> 00:04:25.400
Our implementation is on the right.

81
00:04:25.760 --> 00:04:27.950
So I'm going to apply the exact same principles here.

82
00:04:27.950 --> 00:04:29.960
I'm not going to use a real view store.

83
00:04:30.110 --> 00:04:35.120
I'm just going to import, use, store and mock it out and have it be whatever object is good enough

84
00:04:35.120 --> 00:04:37.420
to fulfill what this function needs to run.

85
00:04:37.580 --> 00:04:42.830
So I need a plain JavaScript object that's going to have a getters property set to another object with

86
00:04:42.830 --> 00:04:44.150
a filter jobs property.

87
00:04:44.150 --> 00:04:47.990
And that should be good enough to test that this function is doing everything it's supposed to.

88
00:04:48.380 --> 00:04:54.620
So right here I'm going to import the used store function and that is going to come from view X.

89
00:04:55.560 --> 00:04:57.090
Then immediately afterwards.

90
00:04:58.150 --> 00:04:59.800
I'm going to mock our view.

91
00:05:00.010 --> 00:05:04.390
So now Jess has gone through and created mock functions for everything, including use store.

92
00:05:04.810 --> 00:05:11.140
Then I'm going to import the actual thing I'm testing, which is the use filter jobs function and that

93
00:05:11.140 --> 00:05:15.100
is coming from source store composable.

94
00:05:15.550 --> 00:05:19.930
Here I'm going to describe that I am testing my use filter jobs composable.

95
00:05:20.320 --> 00:05:25.630
In fact, why don't we wrap this in a larger category of composable, since I imagine there's going

96
00:05:25.630 --> 00:05:27.100
to be multiple ones later on.

97
00:05:27.490 --> 00:05:29.980
Zoom is going to create a composable described block.

98
00:05:32.320 --> 00:05:38.860
Provide my arrow function here and nest this test or rather this described lock inside here.

99
00:05:40.120 --> 00:05:40.570
All right.

100
00:05:40.570 --> 00:05:44.830
And what is the use filter jobs composable function responsible for doing?

101
00:05:45.040 --> 00:05:49.900
I can just say something like it retrieves filter jobs from store.

102
00:05:52.200 --> 00:05:57.190
So as always, I'm going to remind you that a just mock function by default returns undefined.

103
00:05:57.200 --> 00:06:02.730
So if we were to invoke use store right here or in our in our actual function, when we run it, we're

104
00:06:02.730 --> 00:06:03.630
going to get undefined.

105
00:06:03.780 --> 00:06:06.330
That's not good enough because we need a more complex object.

106
00:06:06.570 --> 00:06:11.880
So right here, I'm going to mark my return value and I'm going to make it a JavaScript object.

107
00:06:11.880 --> 00:06:16.350
We know that we need a getters property and then we know that we need to filter jobs here because we're

108
00:06:16.350 --> 00:06:17.070
going to access it.

109
00:06:17.370 --> 00:06:23.250
So I'm going to write filter jobs and here I'm going to provide a sample return value or a sample value.

110
00:06:23.250 --> 00:06:26.820
It doesn't really matter what we put as long as we test for it below.

111
00:06:27.060 --> 00:06:32.130
But right here I'm just going to say an array and let's provide a sample object in here with an idea

112
00:06:32.130 --> 00:06:35.100
of one just so we have something somewhat close to a job.

113
00:06:35.760 --> 00:06:38.790
All right, so now we've marked out what used store is going to return to us.

114
00:06:39.600 --> 00:06:46.170
So now I can invoke my use filter jobs, composable function, capture that return value in a result

115
00:06:46.710 --> 00:06:51.060
and remember result is going to be this computed reactive object.

116
00:06:51.210 --> 00:06:55.680
So in order to get what it's storing inside it, we once again have to access the value property.

117
00:06:55.950 --> 00:06:57.840
So we don't want to check what result is.

118
00:06:57.840 --> 00:06:59.670
We want to check what result that value is.

119
00:06:59.970 --> 00:07:05.880
And if our logic ran correctly and we properly extracted using the store object and access getters and

120
00:07:06.150 --> 00:07:10.110
access filter jobs, what we expect to get back is this array right here.

121
00:07:10.350 --> 00:07:16.860
So this should equal an array with a single object, with an idea of one which proves we access the

122
00:07:16.860 --> 00:07:17.910
right piece of information.

123
00:07:18.240 --> 00:07:23.940
Save that and it works perfect in our test works and we are good to incorporate our new composable function.

124
00:07:24.210 --> 00:07:30.180
So let's return back to sub nav and we can import our new composable function.

125
00:07:30.480 --> 00:07:32.430
So right here, I'm just going to place it right here.

126
00:07:32.640 --> 00:07:34.500
I'm going to import use, filter jobs.

127
00:07:34.500 --> 00:07:37.410
It is a named export, so we do need curly braces.

128
00:07:37.680 --> 00:07:42.630
So use filter jobs that is going to come from the source directory store.

129
00:07:42.630 --> 00:07:45.420
Composable is basically the file I have on the right hand side.

130
00:07:45.660 --> 00:07:51.750
And now we know that we need a constant here called a filter jobs or at least a name called filter jobs

131
00:07:51.990 --> 00:07:53.640
because that's what we're using right here.

132
00:07:54.060 --> 00:07:59.010
So instead of calculating it on these two lines, I'm going to comment this out so we can compare the

133
00:07:59.010 --> 00:07:59.760
before and after.

134
00:08:00.150 --> 00:08:02.520
And right here, const filter jobs.

135
00:08:02.700 --> 00:08:06.600
We technically don't even have to keep this name, but for now, let's keep it since our template has

136
00:08:06.600 --> 00:08:06.750
it.

137
00:08:07.080 --> 00:08:08.280
And what am I going to do?

138
00:08:08.460 --> 00:08:12.600
I'm just simply going to invoke the use filter jobs composable function.

139
00:08:12.780 --> 00:08:18.210
We don't even have to provide any additional arguments because this function has everything it needs

140
00:08:18.210 --> 00:08:18.930
to do its job.

141
00:08:19.050 --> 00:08:20.550
It's just going to talk to the store.

142
00:08:20.730 --> 00:08:23.250
It's going to access the right property of getters in a store.

143
00:08:23.400 --> 00:08:28.080
It's going to access the right names constant or the right getter name.

144
00:08:28.080 --> 00:08:29.700
In other words, on that getters object.

145
00:08:29.910 --> 00:08:34.830
And it's going to wrap it in its own reactivity so that whenever it changes, our seventh component

146
00:08:34.830 --> 00:08:35.610
will be alerted.

147
00:08:35.880 --> 00:08:38.790
So with that, we can remove our former two lines here.

148
00:08:39.570 --> 00:08:42.900
So now we have two simple lines that are using two composable functions.

149
00:08:43.050 --> 00:08:47.460
They're each getting a return value, which are then returning as properties on this object.

150
00:08:47.610 --> 00:08:49.110
Very simple, very clean.

151
00:08:49.110 --> 00:08:53.490
In fact, I can probably even remove this line break to show you how simple our setup method is.

152
00:08:53.790 --> 00:08:58.830
That also means that we no longer need computed a new store right here, since that logic is now in

153
00:08:58.830 --> 00:08:59.880
our composable function.

154
00:09:00.150 --> 00:09:03.870
So remove that, scroll up and there we go.

155
00:09:03.870 --> 00:09:10.650
This is a very beautiful, clean, simple, elegant, well-tested view component.

156
00:09:10.980 --> 00:09:13.170
Look how simple and beautiful and elegant.

157
00:09:13.170 --> 00:09:19.350
Our composition API syntax, coupled with the availability of composition functions, are saying composable

158
00:09:19.350 --> 00:09:19.680
functions.

159
00:09:19.920 --> 00:09:26.250
How easy that has made it, how easy that has made it for us to write clean set of methods and also

160
00:09:26.310 --> 00:09:31.560
to extract common reusable logic to separate smaller functions in the code base.

161
00:09:31.770 --> 00:09:37.020
If there's any other component that needs our filter jobs getter, which there definitely is in this

162
00:09:37.020 --> 00:09:43.230
code base, it's as simple as importing this helper composable function and importing it once and using

163
00:09:43.230 --> 00:09:44.610
it once in our setup method.

164
00:09:44.790 --> 00:09:47.640
And we gain the exact same benefits as this component does.

165
00:09:47.820 --> 00:09:51.300
And we've isolated that logic of talking to the store right here.

166
00:09:51.360 --> 00:09:55.110
We don't have to worry about use store, we don't have to worry about computed, we don't have to worry

167
00:09:55.110 --> 00:09:57.840
about the getters property or the exact name of the getter.

168
00:09:57.840 --> 00:10:03.330
It's all isolated and locked away in this file, ready to be reused in as many components as we need.

169
00:10:03.510 --> 00:10:07.560
That is the beauty of the composition API, and that is the beauty of composable functions.

170
00:10:07.890 --> 00:10:08.220
All right.

171
00:10:08.220 --> 00:10:09.870
That's all there is to cover in this lesson.

172
00:10:09.870 --> 00:10:11.400
So I will see you in the next one.
