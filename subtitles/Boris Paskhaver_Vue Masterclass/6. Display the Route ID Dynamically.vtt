WEBVTT
1
00:00:00.300 --> 00:00:01.170
Alright.

2
00:00:01.170 --> 00:00:08.310
So in the previous lesson we created a new route for a single job page and we gave it the path slash

3
00:00:08.310 --> 00:00:15.180
jobs, slash results, slash colon ID and that ID represents a dynamic wild card.

4
00:00:15.180 --> 00:00:20.310
It is a small subsection of the path that we can extract within our component.

5
00:00:20.610 --> 00:00:23.880
So let's see how we can do that within our job view component.

6
00:00:23.880 --> 00:00:27.990
This is the top level parent component that we render on that page.

7
00:00:28.320 --> 00:00:33.660
So what I will do here is create some computed properties, so I'll add the computed key and provided

8
00:00:33.660 --> 00:00:34.830
a JavaScript object.

9
00:00:35.100 --> 00:00:39.000
And the reason we're using computed properties, by the way, is because this is data that is based

10
00:00:39.000 --> 00:00:39.750
off something else.

11
00:00:39.750 --> 00:00:41.010
It's based off the route.

12
00:00:41.220 --> 00:00:45.090
It doesn't really make sense to make this part of the components data because it's not something that

13
00:00:45.090 --> 00:00:47.550
is internal to the mechanics of the job view component.

14
00:00:47.790 --> 00:00:52.800
Rather, this is a computed property that should watch the route and produce some kind of value from

15
00:00:52.800 --> 00:00:52.920
it.

16
00:00:53.130 --> 00:00:56.490
So dependent data, derive data, etc. We put it in computer.

17
00:00:56.850 --> 00:01:04.290
So here we define methods and I'll define a method called current job ID, since that is fundamentally

18
00:01:04.290 --> 00:01:08.220
what that section of the URL is supposed to give me the idea of the current job.

19
00:01:08.670 --> 00:01:12.180
So for now let's just console.log our root object.

20
00:01:12.180 --> 00:01:16.290
So this dot root and remember to prefix that root property with a dollar sign.

21
00:01:16.290 --> 00:01:17.640
That's just the part of its name.

22
00:01:17.850 --> 00:01:20.250
That's just the internals of how the View team built it out.

23
00:01:20.610 --> 00:01:26.010
And View requires us to return some kind of value from a computed property or a computed method.

24
00:01:26.250 --> 00:01:28.440
So I'm going to return an arbitrary value.

25
00:01:28.440 --> 00:01:31.890
It doesn't really matter what we return here, but I will just return five.

26
00:01:32.910 --> 00:01:37.350
And then furthermore, we need to use this computed property somewhere in our template.

27
00:01:37.350 --> 00:01:42.000
Otherwise view will never end up running this code and we're never going to see the console.log.

28
00:01:42.240 --> 00:01:48.720
So right here I'm going to write out Job Page for Job and I'm going to provide my curly brace syntax

29
00:01:48.720 --> 00:01:52.560
and I'm going to write the name of my computed property which is current job ID.

30
00:01:52.830 --> 00:01:57.930
Again, we do not need to invoke that method, we just provide its name and view will invoke it automatically.

31
00:01:58.170 --> 00:02:01.800
Our goal here is to simply see what the root object looks like.

32
00:02:01.950 --> 00:02:07.350
But by the end of the lesson, our goal, of course, is to display the actual job ID, which we're

33
00:02:07.350 --> 00:02:10.260
going to get from the URL from this section.

34
00:02:10.620 --> 00:02:12.150
So let me head back to the browser.

35
00:02:13.380 --> 00:02:14.960
Let us navigate to that page.

36
00:02:14.970 --> 00:02:20.540
Let me open up my chrome console and let us navigate to slash jobs, slash results.

37
00:02:20.550 --> 00:02:23.460
And at this point, it doesn't matter what we enter here.

38
00:02:23.610 --> 00:02:29.430
I'm just going to enter five just for some argument and I'll execute and we're going to see our object.

39
00:02:29.430 --> 00:02:32.280
This is our root object, right?

40
00:02:32.550 --> 00:02:38.250
And here you're going to notice we have a params property and that params property is set to an object.

41
00:02:38.430 --> 00:02:45.510
And you'll notice we have the exact key or property here that we specified as our wildcard name in our

42
00:02:45.510 --> 00:02:46.140
roots file.

43
00:02:46.140 --> 00:02:49.530
So we said call this thing ID and capture its value.

44
00:02:49.530 --> 00:02:55.860
So here it is view as captured as ID and told us that the value at the end of that URL, that dynamic

45
00:02:55.860 --> 00:02:57.960
little section is indeed the value.

46
00:02:57.960 --> 00:02:58.380
Five.

47
00:02:58.620 --> 00:03:02.940
Let me just show you, for example, you do not have to follow along with this, but if I decided to

48
00:03:02.940 --> 00:03:08.490
call this something like job, ID save this and refresh in my browser.

49
00:03:09.510 --> 00:03:12.300
You'll notice here if it is a full refresh.

50
00:03:12.330 --> 00:03:12.630
Yep.

51
00:03:12.840 --> 00:03:14.730
You'll notice that now it's called job ID.

52
00:03:15.150 --> 00:03:20.880
So the name is up to us, but whatever we give as a name to that wild card is what view is going to

53
00:03:20.880 --> 00:03:24.540
populate in the params property of my root object.

54
00:03:24.720 --> 00:03:27.180
All right, so let me switch that back to ID.

55
00:03:28.970 --> 00:03:30.200
It represents the same thing.

56
00:03:30.200 --> 00:03:30.740
My job I.

57
00:03:31.430 --> 00:03:32.900
And of course, what I can do here.

58
00:03:33.890 --> 00:03:36.080
Is take this ID and do something with it.

59
00:03:36.080 --> 00:03:36.390
Right?

60
00:03:36.410 --> 00:03:41.990
Like if I want to get the information for a specific job, if I have its ID, which is typically going

61
00:03:41.990 --> 00:03:47.870
to be its database identifier, I can make an API request to the back end and say I want the job with

62
00:03:47.870 --> 00:03:48.710
an idea five.

63
00:03:48.740 --> 00:03:50.060
Give me this piece of information.

64
00:03:50.240 --> 00:03:51.710
But the route remains the same.

65
00:03:51.890 --> 00:03:56.330
And if the user navigates to another root, let's say they go to slash jobs, slash results, maybe

66
00:03:56.330 --> 00:03:57.890
they go to ten, right?

67
00:03:57.910 --> 00:04:00.260
In that case, we're going to get a totally different object right here.

68
00:04:00.500 --> 00:04:04.070
And it has the same params, the same property, but a different value of ten.

69
00:04:04.220 --> 00:04:10.160
I can then take that idea and make a fresh API request so our path stays the same, our route stays

70
00:04:10.160 --> 00:04:13.460
the same, and our fundamental component of the job view stays the same.

71
00:04:13.850 --> 00:04:16.640
But we're getting that dynamic data in the URL.

72
00:04:16.910 --> 00:04:22.070
So right now we're consistently rendering job page for Job five because we returned a value of five

73
00:04:22.070 --> 00:04:23.990
consistently from our computed property.

74
00:04:24.200 --> 00:04:25.640
But let's now make this dynamic.

75
00:04:25.640 --> 00:04:28.910
Let's make our view reflect the actual ID of our job.

76
00:04:29.150 --> 00:04:36.440
So right here, instead of returning five, I want to get my root object and I want to return the value

77
00:04:36.440 --> 00:04:39.050
of its params object.

78
00:04:39.050 --> 00:04:42.320
And then there we know we should have that ID property.

79
00:04:42.320 --> 00:04:43.090
We just saw it.

80
00:04:43.090 --> 00:04:44.750
It's the exact same one as we have here.

81
00:04:45.050 --> 00:04:51.980
So going to that object, go into its root, go into its params, get that ID, return that as my computed

82
00:04:51.980 --> 00:04:53.960
property and we're going to put that into our template.

83
00:04:54.260 --> 00:05:00.440
So now if I go back to my browser, you'll notice we have job page for Job ten and let's say the user

84
00:05:00.440 --> 00:05:03.050
navigates to another, another job 15.

85
00:05:03.050 --> 00:05:09.230
Well now it's job for job 15 and if they have something at the end like 15, you know, account manager

86
00:05:09.230 --> 00:05:11.870
Denver not a problem.

87
00:05:11.870 --> 00:05:17.690
You're going to see that entire section after the slash is going to be captured by that ID pram, which

88
00:05:17.690 --> 00:05:23.210
is available via the root object for us to use in our template or for us to use just general purpose.

89
00:05:23.210 --> 00:05:26.750
As I mentioned, we don't have to necessarily display it for the user to see.

90
00:05:26.900 --> 00:05:32.240
We just have access to that identifier, that part of the URL that makes it unique and we can do something

91
00:05:32.240 --> 00:05:32.660
with it.

92
00:05:33.140 --> 00:05:33.470
All right.

93
00:05:33.470 --> 00:05:37.400
So that is how we create wild cards in our view routes in view router.

94
00:05:37.610 --> 00:05:39.260
And I will see you in the next lesson.
