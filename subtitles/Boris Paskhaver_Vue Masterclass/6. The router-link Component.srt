1
00:00:00,120 --> 00:00:06,240
In this lesson, I'd like to introduce another global component from the View Router Library, and that

2
00:00:06,240 --> 00:00:07,620
is router link.

3
00:00:07,950 --> 00:00:13,770
Router Link allows us to create a fake hyperlink to navigate to a different path.

4
00:00:14,100 --> 00:00:20,550
Remember, we have a single page app, so we don't technically have pages, we don't technically have

5
00:00:20,550 --> 00:00:27,960
URLs and thus we can't actually use the native HTML anchor tag, the a tag because that will force a

6
00:00:27,960 --> 00:00:30,510
navigation which forces a page refresh.

7
00:00:30,780 --> 00:00:35,880
So how do we provide the user with the impression of links that they can click to navigate elsewhere?

8
00:00:36,000 --> 00:00:36,510
Elsewhere?

9
00:00:36,720 --> 00:00:42,510
Well, we have to replace our anchor tags with these router link components, and that's all they do.

10
00:00:42,510 --> 00:00:47,850
The router link component creates a fake hyperlink, so the user has the impression of navigation.

11
00:00:48,000 --> 00:00:55,650
So the user has the impression of seeing the URL change, but it handles the actual concept of not refreshing

12
00:00:55,650 --> 00:01:03,090
the page and simply allowing the router view to dynamically inject the correct component based on that

13
00:01:03,090 --> 00:01:03,600
path.

14
00:01:03,840 --> 00:01:10,140
So what router link does is it actually allows us to navigate to that path while router view swaps the

15
00:01:10,140 --> 00:01:10,920
components there.

16
00:01:11,250 --> 00:01:15,720
So let me show you an example here in our app component, what I'm going to do is I'm going to create

17
00:01:15,720 --> 00:01:22,200
a div right above my router view and in here I'm going to use two router link components.

18
00:01:22,410 --> 00:01:24,180
Again, these are global components.

19
00:01:24,180 --> 00:01:28,530
They were made available to us with view router so we can use them in line.

20
00:01:28,530 --> 00:01:31,020
We do not need to import them, we do not need to register.

21
00:01:31,470 --> 00:01:36,720
So I'm going to do a router link and this one is not going to be a self-closing component.

22
00:01:36,720 --> 00:01:39,810
So I do need to have both an opening and a closing component.

23
00:01:40,050 --> 00:01:44,340
And the way it works is just like an opening and closing an anchor tag.

24
00:01:44,340 --> 00:01:50,520
So in here, in between the opening and closing tag, I can put the text that I want to display.

25
00:01:50,730 --> 00:01:55,800
So let's make a router link to go to our home page and another one to go to our job results page.

26
00:01:56,070 --> 00:02:02,580
So for the first one, I want the text home and let me copy and paste this below and here is where I

27
00:02:02,580 --> 00:02:06,570
can put the text that appears on the second link, and this text will be job results.

28
00:02:07,020 --> 00:02:12,180
And then of course, the other key detail that we need to provide is the actual new URL that we're going

29
00:02:12,180 --> 00:02:13,890
to be able to navigate to.

30
00:02:14,100 --> 00:02:20,100
So how can we tell this rattling component where to take the user when the user clicks on it?

31
00:02:20,430 --> 00:02:22,980
We do that using a special prop, right?

32
00:02:22,980 --> 00:02:28,260
Because as we know, whenever we have to provide a component, any custom data, we do that via props

33
00:02:28,410 --> 00:02:31,650
and props work exactly the same way as HTML attributes.

34
00:02:31,650 --> 00:02:38,010
We just enter them in line and the prop we're looking for here is two, which sort of makes sense because

35
00:02:38,010 --> 00:02:41,550
this is the path that we want to direct the user to.

36
00:02:41,820 --> 00:02:43,710
This is where we want to go to.

37
00:02:44,460 --> 00:02:49,560
So our route route, our home route is available simply by typing in a slash.

38
00:02:49,920 --> 00:02:51,090
So what have I done here?

39
00:02:51,090 --> 00:02:57,150
I've created this fake hyperlink that will have the text home that when clicked, will direct the user

40
00:02:57,150 --> 00:02:59,400
to slash in the URL.

41
00:02:59,820 --> 00:03:01,410
We are not refreshing the page.

42
00:03:01,410 --> 00:03:06,420
We are not really navigating in a traditional browser sense, but the user doesn't know that these are

43
00:03:06,420 --> 00:03:09,840
just simply sees the URL change, at which point what happens?

44
00:03:09,840 --> 00:03:15,480
The router view component tracks that change and says okay, now I have the slash out.

45
00:03:15,480 --> 00:03:16,980
I need to render the home view.

46
00:03:17,610 --> 00:03:21,060
The exact same protocol is going to apply for our second router link.

47
00:03:21,270 --> 00:03:23,610
We're similarly going to give it a two prop.

48
00:03:23,820 --> 00:03:28,590
And of course the page we want to link to here is slash jobs, slash results.

49
00:03:29,950 --> 00:03:31,400
So once again, what's going to happen?

50
00:03:31,510 --> 00:03:35,030
We're going to have a bunch of text appear on the screen that looks like a hyperlink.

51
00:03:35,050 --> 00:03:38,920
It's going to have the text job results when the user clicks on it.

52
00:03:39,040 --> 00:03:46,390
Router link will navigate to slash jobs slash results as our path router view will observe that change

53
00:03:46,690 --> 00:03:49,450
and render the dynamic component right here.

54
00:03:49,840 --> 00:03:55,480
Keep in mind because our router links are right here in app view they will always render.

55
00:03:55,570 --> 00:03:57,970
Much like the one in the previous lesson.

56
00:03:58,090 --> 00:04:03,430
We're always going to have these two links and immediately below the two links we're going to render

57
00:04:03,430 --> 00:04:09,070
whichever dynamic component the router view component wants to render based on the current path.

58
00:04:09,670 --> 00:04:10,060
Okay.

59
00:04:10,240 --> 00:04:11,930
And one more thing as a quick review.

60
00:04:12,070 --> 00:04:17,470
The reason we do not need to use V bind syntax here with the two prop is because we're passing in a

61
00:04:17,470 --> 00:04:18,490
JavaScript string.

62
00:04:18,580 --> 00:04:24,040
It is not changing, it is not dynamic, it is not an array or an object or connected to the components,

63
00:04:24,040 --> 00:04:25,600
data or computed properties.

64
00:04:25,720 --> 00:04:30,760
It's a plain string and when you have a plain string, you can just use the regular prop syntax without

65
00:04:30,760 --> 00:04:35,320
the colon because we're not binding anything, we're providing a single hardcoded value.

66
00:04:35,710 --> 00:04:38,230
So with that, if we navigate back to our browser.

67
00:04:39,860 --> 00:04:41,000
And refresh the page.

68
00:04:41,990 --> 00:04:45,110
Now we have the two links up top.

69
00:04:45,110 --> 00:04:48,680
Now it's not very pretty, but these are indeed two router links.

70
00:04:48,680 --> 00:04:49,700
I have them right here.

71
00:04:49,700 --> 00:04:52,520
Here's the very first one and here is the second one.

72
00:04:52,670 --> 00:04:56,120
And when I click this link right here, it'll take me to the home view.

73
00:04:56,120 --> 00:04:59,870
It's not very impressive or flashy, but it still takes me to the slash root.

74
00:05:00,440 --> 00:05:06,350
And now when I click on this one, which is job results, notice how the URL above is going to change

75
00:05:06,680 --> 00:05:08,540
to slash job slash results.

76
00:05:08,750 --> 00:05:15,260
And then the the router view component takes over and says, I'm going to render the job results view

77
00:05:15,470 --> 00:05:18,050
because now I'm on a different page, I'm on a different route.

78
00:05:18,050 --> 00:05:21,080
Rather, the Chrome Web browser is not refreshing.

79
00:05:21,080 --> 00:05:26,450
You'll notice as I switch back and forth, the result is instantaneous because the page is in actually

80
00:05:26,660 --> 00:05:29,570
refreshing and no additional JavaScript is being loaded.

81
00:05:29,840 --> 00:05:35,390
But the user gets the impression that they are navigating because if they observe the URL bar they can

82
00:05:35,390 --> 00:05:37,640
see that it is changing in front of them.

83
00:05:38,480 --> 00:05:42,920
I notice that the clicking here is an absolutely perfect, but there it is a couple of times back and

84
00:05:42,920 --> 00:05:43,280
forth.

85
00:05:43,280 --> 00:05:48,770
As I navigate, you'll notice how quickly view just observes the changes and replaces what is on screen,

86
00:05:49,040 --> 00:05:52,640
and that is really the core heart of what the router does for us.

87
00:05:52,640 --> 00:05:56,810
It just keeps track of changes and renders something differently, which gives the user the impression

88
00:05:56,810 --> 00:05:58,550
of navigating a regular website.

89
00:05:58,880 --> 00:06:03,860
But behind the scenes they've already gotten all the view code they need and view is just swapping different

90
00:06:03,860 --> 00:06:04,850
elements on the screen.

91
00:06:04,850 --> 00:06:10,850
It's just reacting again to a user event, a user clicking on a router link component and changing the

92
00:06:10,850 --> 00:06:11,300
URL.

93
00:06:11,420 --> 00:06:13,850
All right, that's all there is to cover in this lesson.

94
00:06:13,850 --> 00:06:15,410
So I will see you in the next one.
