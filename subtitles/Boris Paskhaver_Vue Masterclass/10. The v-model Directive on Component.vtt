WEBVTT
1
00:00:00.390 --> 00:00:01.200
All right.

2
00:00:01.200 --> 00:00:04.140
So it looks like a new implementation is working out well.

3
00:00:04.170 --> 00:00:10.290
We are feeding in a prop and we are reacting to an event emitted by our child component, which is text

4
00:00:10.290 --> 00:00:10.680
input.

5
00:00:10.980 --> 00:00:13.290
But I think we could do even better.

6
00:00:13.770 --> 00:00:20.730
Wouldn't it be great if we could use the View V model directive, but instead of using it on an input

7
00:00:20.730 --> 00:00:22.050
element for HTML?

8
00:00:22.260 --> 00:00:27.990
Wouldn't it be great if we could apply it to our own custom component such as text input?

9
00:00:28.530 --> 00:00:33.960
Wouldn't it be great if we could replace these two lines right here, which are a lot more declarative,

10
00:00:33.960 --> 00:00:38.040
which are a lot more explicit with a simple V model directive?

11
00:00:38.760 --> 00:00:44.880
And it would be great if we could thus react to both situations, both the change of data up here flowing

12
00:00:44.880 --> 00:00:52.470
down as props to the text input component and the event emission from our child component reaching us

13
00:00:52.470 --> 00:00:53.040
up here.

14
00:00:53.190 --> 00:00:57.690
Wouldn't it be great if we could replace these two lines with a V model directive that would do the

15
00:00:57.690 --> 00:00:58.830
exact same thing?

16
00:00:59.220 --> 00:01:05.070
Well, turns out we can, and it is based on the exact same implementation that we have currently in

17
00:01:05.070 --> 00:01:05.850
our text input.

18
00:01:06.030 --> 00:01:08.640
We only have to change a couple details.

19
00:01:09.060 --> 00:01:16.650
So in order for Vue to be able to allow us to apply a V model directive to a custom component, we need

20
00:01:16.650 --> 00:01:22.140
to have an exact product name and we need to emit an exact message.

21
00:01:22.500 --> 00:01:29.100
And if we set those boundaries, if we give you what it wants as far as the names of the messages and

22
00:01:29.100 --> 00:01:35.520
the prop that it expects, then it's going to allow us to implement V model on the parent component.

23
00:01:36.150 --> 00:01:38.370
So let's start with text input.

24
00:01:38.580 --> 00:01:44.100
We're going to keep the exact same logic that we have the exact same implementation of having the parent

25
00:01:44.100 --> 00:01:47.280
provide the prop with a value and then emitting an event upwards.

26
00:01:47.460 --> 00:01:51.630
But we're only going to change the name of the prop and the name of the message.

27
00:01:52.560 --> 00:01:52.980
Okay.

28
00:01:53.250 --> 00:01:59.100
So in order for a view to permit us to use the model, we have to call our prop model value.

29
00:01:59.490 --> 00:02:05.340
So right here, we're going to tell our text input component that instead of having a prop called value,

30
00:02:05.460 --> 00:02:08.190
we need a prop called model value.

31
00:02:08.490 --> 00:02:11.130
So lowercase M, capital V.

32
00:02:11.700 --> 00:02:17.850
So obviously if we make that change up here, we need to make sure that this prop is still bound to

33
00:02:17.850 --> 00:02:20.310
the value attribute on our input element.

34
00:02:20.430 --> 00:02:25.500
So right here, instead of referencing the value prop, we need to reference the model value prop,

35
00:02:25.920 --> 00:02:27.900
same exact technical detail.

36
00:02:27.900 --> 00:02:30.990
The only thing that's changed is the exact name of the prop.

37
00:02:30.990 --> 00:02:33.630
We've changed it from value to model value.

38
00:02:33.990 --> 00:02:35.910
Okay, that is half of the equation.

39
00:02:36.150 --> 00:02:40.560
The other half of the equation is the name of the message that we emit.

40
00:02:41.340 --> 00:02:45.570
So currently we are emitting an event or a message called handle input.

41
00:02:45.930 --> 00:02:52.320
What we can do is change this to this string update, colon model value.

42
00:02:52.590 --> 00:02:55.980
And again, the reason we're using this is because this is what Vue expects.

43
00:02:56.220 --> 00:03:01.800
If we want to get permission to use the model on the parent component, we are totally welcome to use

44
00:03:01.800 --> 00:03:02.970
this approach right here.

45
00:03:03.150 --> 00:03:09.150
But if we want to replace this implementation with the model, we have to call the prop model value

46
00:03:09.150 --> 00:03:11.910
and we have to call this message update colon model value.

47
00:03:12.210 --> 00:03:18.480
Now to be fair, I believe there is a set up where we can use the model and we can keep whatever prop

48
00:03:18.480 --> 00:03:22.740
name and event name that we want, but it requires more configuration.

49
00:03:22.950 --> 00:03:27.960
So what I prefer to do is just follow what Vue expects and, you know, make the least amount of effort

50
00:03:27.960 --> 00:03:29.460
necessary to get this feature done.

51
00:03:29.790 --> 00:03:35.730
So we changed the prop name to model value and we change the event name to update colon model value,

52
00:03:35.850 --> 00:03:41.580
which makes sense because it represents an update to the value that's going to populate the model value

53
00:03:41.580 --> 00:03:41.910
prop.

54
00:03:42.600 --> 00:03:48.630
So now that we created that, we can transition in job search form to using V model.

55
00:03:48.810 --> 00:03:55.860
So I'm going to remove these two pieces and right above placeholder, I'm going to use the V model directive

56
00:03:55.980 --> 00:04:00.270
and it works the exact same way it does with a regular HTML input element.

57
00:04:00.270 --> 00:04:05.820
We simply provide an equal sign and in a string the name of the data property that we want to attach.

58
00:04:06.030 --> 00:04:12.600
So we want to attach this to our role data property and behind the scenes view will know that when we

59
00:04:12.600 --> 00:04:18.060
use V model with a custom component, it should create a prop called model value.

60
00:04:18.060 --> 00:04:19.980
That's what it knows how to do behind the scenes.

61
00:04:19.980 --> 00:04:22.830
That's why we told this component to call that prop model value.

62
00:04:23.100 --> 00:04:30.510
And it will also know that the omission of the event update model value means update the value overall.

63
00:04:30.720 --> 00:04:35.760
So we have made it a lot more declarative instead of imperatively writing out how we wanted those two

64
00:04:35.760 --> 00:04:41.070
pieces to function, the binding between the parent and child, we're now letting Vue take care of everything

65
00:04:41.070 --> 00:04:45.660
behind the scenes, which view is more than capable of doing, which spares us the complexity.

66
00:04:45.810 --> 00:04:50.130
The only thing we have to know is that the property has to be this and the event name has to be this.

67
00:04:50.520 --> 00:04:53.400
So right down below we can repeat the exact same thing.

68
00:04:53.400 --> 00:04:59.910
We can remove this binding to the value prop and we can remove the reaction to the handle input if.

69
00:05:00.170 --> 00:05:00.830
From the child.

70
00:05:01.100 --> 00:05:07.220
And here we're going to use the model and we're going to connect it to the location, data, property

71
00:05:07.220 --> 00:05:08.480
on job search form.

72
00:05:08.660 --> 00:05:11.720
And with that, we have completed our refactor.

73
00:05:11.730 --> 00:05:14.300
So now notice how clean text input is.

74
00:05:14.480 --> 00:05:20.270
Notice how we've isolated some logic, such as the styling of the text input to its own reusable shared

75
00:05:20.270 --> 00:05:20.750
component.

76
00:05:21.080 --> 00:05:25.460
Notice how now we can reuse that input anywhere we want in any other component.

77
00:05:25.460 --> 00:05:30.740
We just need to provide a V model to it in order to connect it to the parent's data property, which

78
00:05:30.740 --> 00:05:32.300
is actually going to store the value.

79
00:05:32.690 --> 00:05:37.400
And then we simply need to provide an optional placeholder prop if we want to customize the starting

80
00:05:37.880 --> 00:05:39.590
value that's rendered as the placeholder.

81
00:05:39.800 --> 00:05:43.910
But this is a lot cleaner than having to render this every single time.

82
00:05:44.510 --> 00:05:47.270
We want to use a text input that is consistent throughout our app.

83
00:05:47.690 --> 00:05:55.010
So with that, we can transition to our browser and notice that now the way the model syntax is going

84
00:05:55.010 --> 00:05:55.350
to work.

85
00:05:55.370 --> 00:05:56.480
So what am I looking for?

86
00:05:56.690 --> 00:06:01.010
I'm looking for a job as a programmer in, let's say, New City.

87
00:06:01.010 --> 00:06:01.820
Let's do Orlando.

88
00:06:02.630 --> 00:06:07.820
So right here you'll notice in job search form we're going to have those data properties correctly populate.

89
00:06:08.090 --> 00:06:14.210
And within the job search form, in the text input, we're going to see Vue pass down the correct prop

90
00:06:14.210 --> 00:06:15.140
of model value.

91
00:06:15.260 --> 00:06:18.080
That's what it knows to use behind the scene and scenes.

92
00:06:18.080 --> 00:06:23.690
And you can see it populate programmer down here, which in turn is going to populate the visual input

93
00:06:23.690 --> 00:06:28.370
field on the page, which is bound to the value of that model value prop.

94
00:06:28.970 --> 00:06:29.240
All right.

95
00:06:29.240 --> 00:06:32.240
So I think this is the cleanest implementation we have so far.

96
00:06:32.480 --> 00:06:35.990
I'm really happy with how far we've come and we'll continue in the very next lesson.
