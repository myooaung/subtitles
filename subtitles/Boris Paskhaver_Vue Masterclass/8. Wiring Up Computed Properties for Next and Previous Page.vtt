WEBVTT
1
00:00:00.430 --> 00:00:01.200
Okay.

2
00:00:01.200 --> 00:00:05.670
So we are now showing the user the current job results page that they are on.

3
00:00:05.910 --> 00:00:10.680
So the next thing that I'd like to start working on is the previous and next buttons to take them to

4
00:00:10.680 --> 00:00:14.790
either the previous job results page or the next job results page.

5
00:00:15.090 --> 00:00:20.670
Now, you might think that it's as simple as taking the current page and subtracting or adding one to

6
00:00:20.670 --> 00:00:24.240
it, but it's not actually that simple because there are some edge cases.

7
00:00:24.480 --> 00:00:30.600
So for example, if they are on the very first page, there is no previous button and there is no previous

8
00:00:30.600 --> 00:00:34.680
page, there is no other job results because we are on the very first page.

9
00:00:34.800 --> 00:00:36.810
There is nowhere we can go back to.

10
00:00:37.200 --> 00:00:42.930
Similarly, if we are on the last page of job results, there is no next button, right?

11
00:00:42.930 --> 00:00:46.530
If we have 100 jobs and the user is on page ten.

12
00:00:46.710 --> 00:00:48.900
So they are seeing jobs 90 through 100.

13
00:00:49.050 --> 00:00:53.940
There is no more jobs to show, so there should be no next page and no next button.

14
00:00:54.360 --> 00:00:55.740
So here's what we're going to do.

15
00:00:55.770 --> 00:01:00.420
We're going to define two computed properties, and that our job will be to figure out the previous

16
00:01:00.420 --> 00:01:01.760
page and the next page.

17
00:01:02.010 --> 00:01:06.900
If that is a valid number, because that page is valid, we are going to return that number.

18
00:01:07.230 --> 00:01:12.660
But if there is no previous page where there is no next page because it logically doesn't make sense,

19
00:01:12.840 --> 00:01:15.180
we're going to return undefined instead.

20
00:01:15.420 --> 00:01:20.640
And then I'm going to show you how to use those computed properties in the next lesson in our template.

21
00:01:20.970 --> 00:01:23.270
So let's begin by defining our computed properties.

22
00:01:23.280 --> 00:01:28.500
The first one I'm going to add is called the previous page, and its job will be to calculate the previous

23
00:01:28.500 --> 00:01:31.260
page based on wherever we currently are.

24
00:01:31.710 --> 00:01:34.740
So the first thing I'm going to do is just begin with the basic logic.

25
00:01:34.860 --> 00:01:39.480
In order to get the previous page, we have to get the current page and subtract one right.

26
00:01:39.690 --> 00:01:44.730
So if we are on page two of the job results, obviously the previous page is going to be page one.

27
00:01:45.090 --> 00:01:48.360
So right here I'll define a constant called previous page.

28
00:01:48.810 --> 00:01:54.390
And in order to reference my current page computed property above, it's as simple as simply doing this

29
00:01:54.390 --> 00:01:55.320
dot current page.

30
00:01:55.620 --> 00:02:00.030
We did the exact same thing in the previous lesson, and I'm going to subtract one from this.

31
00:02:00.270 --> 00:02:00.660
All right.

32
00:02:01.470 --> 00:02:06.780
So the next thing I want to do is I'm going to define another constant called first page, and I'm going

33
00:02:06.780 --> 00:02:08.580
to define it as equal to one.

34
00:02:08.790 --> 00:02:12.360
This is just to provide other readers with some context with what one represents.

35
00:02:12.480 --> 00:02:18.180
It is my first page, and now what I want to do is compare my previous page to my first page.

36
00:02:18.420 --> 00:02:22.320
If my previous page is greater than or equal to one.

37
00:02:22.440 --> 00:02:27.690
In other words, if it is one or higher, then I know that it is valid and thus I should return it.

38
00:02:27.780 --> 00:02:30.720
So I'm going to do a ternary expression here.

39
00:02:31.170 --> 00:02:37.320
So I'm going to compare whether previous page is greater than or equal to my first page.

40
00:02:37.320 --> 00:02:44.280
If it is at least one one or higher, then I know it's a valid previous page and thus I want to return

41
00:02:44.280 --> 00:02:46.080
the previous page in that scenario.

42
00:02:46.440 --> 00:02:50.490
If it is not, then I want to return undefined instead.

43
00:02:50.790 --> 00:02:53.880
Now this could be something more of a specific value, like NULL.

44
00:02:54.000 --> 00:02:57.720
Maybe null is even better in this scenario, but for now I'm just going to stick with undefined.

45
00:02:58.050 --> 00:02:59.070
So this is going to work.

46
00:02:59.070 --> 00:03:04.020
And let me show you how it's going to work in a scenario where we are on page one, if our current page

47
00:03:04.200 --> 00:03:09.240
is going to be one, then our previous page is going to be one minus one, which is zero.

48
00:03:09.600 --> 00:03:14.280
And so we're going to compare the previous page of zero and see, is that greater than or equal to one

49
00:03:14.430 --> 00:03:15.540
that is false.

50
00:03:15.720 --> 00:03:17.550
And thus we're going to return undefined.

51
00:03:17.880 --> 00:03:23.880
So if we are on the first page, the previous page computed property will return undefined.

52
00:03:23.910 --> 00:03:25.320
There is no previous page.

53
00:03:25.680 --> 00:03:31.440
Otherwise, if, for example, our current pages two, then our previous page is going to be one, one

54
00:03:31.440 --> 00:03:32.820
is greater than or equal to one.

55
00:03:32.820 --> 00:03:33.660
So that is valid.

56
00:03:33.660 --> 00:03:36.480
So we want to return one as the previous page.

57
00:03:36.690 --> 00:03:38.160
If our current pages too.

58
00:03:38.820 --> 00:03:44.760
So this scenario should work for all scenarios, including if we're on the first page or if we're on

59
00:03:44.760 --> 00:03:45.570
any other page.

60
00:03:45.810 --> 00:03:48.890
If there is a valid previous page, we're going to give you that number.

61
00:03:48.900 --> 00:03:51.460
Otherwise, we're going to give you undefined, right?

62
00:03:51.900 --> 00:03:55.440
Next, let's wire up the computed property for our next page.

63
00:03:55.530 --> 00:03:59.040
It's going to be a little bit different here, but same logic intrinsically.

64
00:03:59.520 --> 00:04:01.390
So how do I get my next page?

65
00:04:01.410 --> 00:04:03.090
Well, it's going to be the process in reverse.

66
00:04:03.330 --> 00:04:07.770
I want to take my current page value and I want to add one to it.

67
00:04:08.250 --> 00:04:12.750
Now, that doesn't necessarily mean that that is a valid page number, just like zero here is not a

68
00:04:12.750 --> 00:04:14.970
valid page number, but this is our first step.

69
00:04:15.660 --> 00:04:19.650
The next thing I need to do is to figure out what is my max page number?

70
00:04:19.650 --> 00:04:21.810
What is the largest page of this could be right.

71
00:04:21.990 --> 00:04:27.690
If we have 100 jobs, then our max pages, page number ten and we don't want to go above that.

72
00:04:28.110 --> 00:04:30.810
So I'm going to define a constant called Max Page.

73
00:04:32.400 --> 00:04:36.150
And what I'm actually going to do here is I'm going to write some code that I initially wrote and we're

74
00:04:36.150 --> 00:04:39.250
actually going to discover later that this code has a bug in it.

75
00:04:39.270 --> 00:04:43.350
It isn't fully perfect, but for now we're going to stick with it because I do want to show you the

76
00:04:43.350 --> 00:04:46.890
real world and how we can encounter bugs in view and figure them out.

77
00:04:47.220 --> 00:04:48.780
So here was my thought process.

78
00:04:48.780 --> 00:04:51.450
Here I was literally thinking about our actual example.

79
00:04:51.660 --> 00:04:55.320
I thought to myself, Well, I have a certain number of jobs from the back end.

80
00:04:55.320 --> 00:04:57.150
I can get that with this nut jobs.

81
00:04:57.480 --> 00:05:00.330
So in my scenario, that is an array of 100 jobs.

82
00:05:00.570 --> 00:05:07.710
And I thought to myself, if I divide that number by ten, then I'm going to get my max page number

83
00:05:07.950 --> 00:05:11.580
because each page is going to have ten jobs on it.

84
00:05:11.790 --> 00:05:17.910
So for example, if my array has 100 jobs and each page shows ten jobs, then my last page, my max

85
00:05:17.910 --> 00:05:19.440
page is going to be ten.

86
00:05:19.650 --> 00:05:23.940
If I have 110 jobs, then my max page is going to be 11 and so on.

87
00:05:24.180 --> 00:05:26.370
So I said, Let me take this to jobs.

88
00:05:26.520 --> 00:05:32.010
Let me take the length of that array and let me divide that by ten, because every page has ten job

89
00:05:32.010 --> 00:05:37.920
results, and that's going to give me my last page or alternatively, my max page, the greatest number

90
00:05:37.920 --> 00:05:39.660
that I can have in my app.

91
00:05:39.930 --> 00:05:40.290
All right.

92
00:05:40.290 --> 00:05:44.310
So I figured, okay, 100 divided by ten, my max page is ten.

93
00:05:44.310 --> 00:05:44.880
That's correct.

94
00:05:44.880 --> 00:05:46.470
That's exactly what I want for my app.

95
00:05:46.590 --> 00:05:48.840
There is a bug here and we are going to come back to it later.

96
00:05:49.560 --> 00:05:52.620
So right here I'm going to return another ternary expression.

97
00:05:52.890 --> 00:05:59.190
And if my next page is less than or equal to max page, in other words, in this case, if it's either

98
00:05:59.190 --> 00:06:04.890
ten or nine or eight, if it's equal to or less than the greatest possible number I could have, which

99
00:06:04.890 --> 00:06:07.590
is Max Page, than it is a valid page number.

100
00:06:07.680 --> 00:06:12.540
I don't care whether it's one, two, three, four or five or even ten, as long as it's less than or

101
00:06:12.540 --> 00:06:17.100
equal to ten, it's a valid previous page or next page in this example.

102
00:06:17.370 --> 00:06:22.530
So if my next page is less than my max page, I do want to return my next page.

103
00:06:23.430 --> 00:06:26.850
Otherwise, if it is way too high, I want to return undefined.

104
00:06:27.750 --> 00:06:33.840
So for example, if my current page is ten and I have 100 job results, then my next page will evaluate

105
00:06:33.840 --> 00:06:40.320
to 11, my max page will evaluate to ten, and thus I'm going to say, is next page less than or equal

106
00:06:40.320 --> 00:06:40.800
to ten?

107
00:06:40.920 --> 00:06:41.550
False.

108
00:06:41.580 --> 00:06:43.920
11 is not less than or equal to ten.

109
00:06:44.100 --> 00:06:46.890
So because I had zero to false, I'm going to return undefined.

110
00:06:46.920 --> 00:06:52.380
There is no next page and that's exactly what I want for this scenario when we are on the last page

111
00:06:52.380 --> 00:06:53.640
possible for our job results.

112
00:06:53.820 --> 00:06:54.180
All right.

113
00:06:54.450 --> 00:06:56.310
So these are our two computed properties.

114
00:06:56.310 --> 00:07:01.830
And now in the very next lesson, we can actually use them in the view to conditionally render our previous

115
00:07:01.830 --> 00:07:03.360
and next buttons when needed.
