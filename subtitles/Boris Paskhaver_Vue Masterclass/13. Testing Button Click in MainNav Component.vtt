WEBVTT
1
00:00:00.300 --> 00:00:01.260
All right.

2
00:00:01.260 --> 00:00:07.650
So in the previous lesson we fixed some failing tests that were relying on the is logged in property

3
00:00:07.650 --> 00:00:09.030
on our view X Store.

4
00:00:09.420 --> 00:00:15.120
Now there's just one bit of functionality related to our View X Store that we are not yet testing in

5
00:00:15.120 --> 00:00:16.260
our main NAV component.

6
00:00:16.530 --> 00:00:19.320
And it is this log in user method right here.

7
00:00:19.620 --> 00:00:26.070
This method also interacts with our View X Store by invoking the commit method on it and sending it

8
00:00:26.070 --> 00:00:28.230
a single argument of log in user.

9
00:00:28.590 --> 00:00:34.260
Now the difference between this method and the computed property above is that this method is actually

10
00:00:34.260 --> 00:00:36.450
invoked by a user interaction.

11
00:00:36.600 --> 00:00:40.110
We run this method only when the user clicks the action button.

12
00:00:40.380 --> 00:00:44.760
So as a reminder, we wired up that event handler right here on our action button.

13
00:00:45.090 --> 00:00:51.870
So when we mount this main nav component in our test suite, we're not actually running this method

14
00:00:51.870 --> 00:00:52.560
at any point.

15
00:00:52.710 --> 00:00:55.380
So there's no way to really test that it's working yet.

16
00:00:55.650 --> 00:01:01.560
In comparison, our computed property automatically runs whenever the component mounts, which is why

17
00:01:01.560 --> 00:01:07.530
the test suite was able to detect that the state property was not defined and give us the warnings we

18
00:01:07.530 --> 00:01:08.730
saw in the previous lesson.

19
00:01:09.030 --> 00:01:12.390
So we're kind of accidentally skipping over this logic right now.

20
00:01:12.390 --> 00:01:14.880
And I'd like to add a test for this logic.

21
00:01:15.240 --> 00:01:17.460
Now, the question here is how do we test this?

22
00:01:17.670 --> 00:01:23.160
And I propose that we really only have to test one thing, that the main NAV component is sending the

23
00:01:23.160 --> 00:01:26.160
right message to the store object.

24
00:01:26.160 --> 00:01:26.460
Right?

25
00:01:26.550 --> 00:01:32.970
We care that the may not component is talking to view x and invoking the commit method and invoking

26
00:01:32.970 --> 00:01:34.830
the commit method with the right argument.

27
00:01:35.040 --> 00:01:40.470
We don't really care about how view deals with that message in its internals, in its mutations, right?

28
00:01:40.620 --> 00:01:43.590
We don't really care about what the state is.

29
00:01:43.710 --> 00:01:45.630
We care about the state right here.

30
00:01:45.810 --> 00:01:50.250
But for the purposes of testing this method, we don't really care about the state of the store.

31
00:01:50.550 --> 00:01:54.210
We just care that we are invoking the right method and passing it the right argument.

32
00:01:54.420 --> 00:02:00.480
And what that does is it decouples our test from accidentally over testing the view X implementation.

33
00:02:00.660 --> 00:02:03.270
We don't want to test the code that the View X team wrote.

34
00:02:03.390 --> 00:02:06.420
We want to test the code that is going on in our main NAV component.

35
00:02:06.720 --> 00:02:10.560
Main component responsibility is to talk to the store.

36
00:02:10.710 --> 00:02:13.350
It's not to run the store or to handle its internals.

37
00:02:13.680 --> 00:02:20.190
So I propose that we add a new test where we replace this commit method with a just mock function.

38
00:02:20.490 --> 00:02:25.890
Because remember, a just mock function is able to track how many times it's been called and with what

39
00:02:25.890 --> 00:02:26.430
arguments.

40
00:02:26.730 --> 00:02:31.230
So what we can do is we can manage our component, we can replace the commit here with a just function.

41
00:02:31.410 --> 00:02:37.320
We can then simulate the user pressing the action button and then verify that commit has been called

42
00:02:37.320 --> 00:02:39.300
with the right argument of log in user.

43
00:02:39.750 --> 00:02:42.150
All right, so let me show you how that's going to work right here.

44
00:02:42.930 --> 00:02:47.100
Before I write this test, I just want to change a little bit of a description here.

45
00:02:47.310 --> 00:02:48.000
Right here.

46
00:02:48.000 --> 00:02:53.190
We previously had the described block of when the user logs in because our tests went through the whole

47
00:02:53.190 --> 00:02:56.910
flow of the user clicking the button and comparing the before and after.

48
00:02:57.210 --> 00:03:03.210
Now, in this state, in this world in which we live, in which the view store has and is logged in

49
00:03:03.210 --> 00:03:08.070
property set to true, this is technically at the point that the user is already logged in.

50
00:03:08.400 --> 00:03:11.670
So I'm just going to change this to when user is logged in.

51
00:03:12.960 --> 00:03:16.140
And that will allow me to put a complimentary describe block below.

52
00:03:16.410 --> 00:03:17.800
So after that, describe block.

53
00:03:17.820 --> 00:03:23.940
But within my top level one, I'm going to add another describe block that says when user is logged

54
00:03:23.940 --> 00:03:29.010
out, because that's when I anticipate the user will click the button that's going to log them in.

55
00:03:29.700 --> 00:03:33.270
And so for my test description, I'm going to violate one of my own principles.

56
00:03:33.270 --> 00:03:38.090
I'm going to write a description here that is going to be a little bit technical in implementation or

57
00:03:38.130 --> 00:03:38.850
in detail.

58
00:03:39.090 --> 00:03:44.040
And I'm going to say it issues call to view X to log into user.

59
00:03:44.730 --> 00:03:49.410
Now, if you don't want to talk about the technical details of your solution, you can always remove

60
00:03:49.440 --> 00:03:52.920
this line and simply say it issues call to log in user.

61
00:03:53.220 --> 00:03:57.570
Because as we talked about earlier, we always want our test descriptions to be describing the user

62
00:03:57.570 --> 00:03:57.990
value.

63
00:03:58.140 --> 00:04:00.000
This to me is not really the user value.

64
00:04:00.000 --> 00:04:01.890
It is a technical implementation detail.

65
00:04:02.100 --> 00:04:04.320
But for now, I think it's it's okay.

66
00:04:04.680 --> 00:04:09.840
So following the protocol that we set up earlier, I'm going to create a view next door.

67
00:04:10.260 --> 00:04:13.470
So I'm going to invoke the create store function that we imported from View X.

68
00:04:13.830 --> 00:04:18.510
And I'm not going to give it any arguments because I don't need it to have any actual state.

69
00:04:18.690 --> 00:04:24.900
For the purposes of this test, yes, in the real world for this to work our view store needs and is

70
00:04:24.900 --> 00:04:27.540
logged in property so that our mutation can flip it.

71
00:04:27.540 --> 00:04:27.930
Right.

72
00:04:28.290 --> 00:04:33.450
And you could say if we were trying to run a full test where we allowed view X to do its thing, where

73
00:04:33.450 --> 00:04:38.130
we issued a mutation, made sure that you updated the chain, then checked it on our component to see

74
00:04:38.130 --> 00:04:43.020
the change, then we would absolutely have to provide that data property and as well as the mutation.

75
00:04:43.200 --> 00:04:48.180
But that would require us to fully integrate view X into our main NAV component.

76
00:04:48.360 --> 00:04:53.280
That means we would be using the complete, full real world implementation of view X.

77
00:04:53.550 --> 00:04:58.500
And while that is a good in a certain way because we're using the real world thing, it also creates

78
00:04:58.500 --> 00:05:00.120
a lot more points of failure.

79
00:05:00.120 --> 00:05:06.120
It becomes less of a unit test because we're integrating a totally separate library into our test for

80
00:05:06.120 --> 00:05:07.290
a main nav component.

81
00:05:07.500 --> 00:05:11.700
So if something in view breaks, for example, then this test here will break.

82
00:05:11.880 --> 00:05:16.380
Even though we haven't, it has nothing to do with our code and it has everything to do with how View

83
00:05:16.380 --> 00:05:17.130
X works, right?

84
00:05:17.370 --> 00:05:23.490
So the more that we can separate ourselves, decouple us from view as much as possible, the more stable

85
00:05:23.490 --> 00:05:25.030
our own tests will be.

86
00:05:25.230 --> 00:05:32.190
That's why I'm generally not a fan of bringing all of you X into a test so we don't care about the is

87
00:05:32.190 --> 00:05:38.130
logged in property because for the purposes of this test we only care about the log in user invoking

88
00:05:38.130 --> 00:05:40.290
the commit method on the store.

89
00:05:40.380 --> 00:05:41.340
That's all we care about.

90
00:05:41.340 --> 00:05:43.080
We don't care about the store's internals.

91
00:05:43.470 --> 00:05:47.460
So what I'm going to do here is I'm going to create a constant called Commit and I'm going to assign

92
00:05:47.460 --> 00:05:48.570
it to a just function.

93
00:05:49.260 --> 00:05:55.140
And what I'm going to do below is I have my view X Store and we know that we have a commit method on

94
00:05:55.140 --> 00:05:56.040
my do x store.

95
00:05:56.070 --> 00:05:58.500
This is how we issue a mutation to a bookstore.

96
00:05:58.710 --> 00:06:02.790
And what I'm going to do is I'm going to take that existing method and I'm going to overwrite it.

97
00:06:03.060 --> 00:06:07.140
I'm going to replace that method with a reference to my just mock function.

98
00:06:07.650 --> 00:06:11.640
So I'm basically taking that method and I've replaced it with a totally different mock method.

99
00:06:12.090 --> 00:06:16.860
So in a sense, I'm still using the principles of marking here, but instead of marking out my entire

100
00:06:16.860 --> 00:06:21.240
store, I just mocked out the commit method on a real view X store.

101
00:06:21.990 --> 00:06:28.980
So now what I'm going to do is I'm going to shallow amount my main nav component and I'm going to invoke

102
00:06:28.980 --> 00:06:30.210
my create config function.

103
00:06:30.210 --> 00:06:31.440
I'm going to pass in that store.

104
00:06:32.730 --> 00:06:35.520
And then what I want to do is the same protocol that I did earlier.

105
00:06:35.520 --> 00:06:41.100
I want to find the actual login button right here and we have that former data test attribute available.

106
00:06:41.460 --> 00:06:48.510
So I'm going to say const login button and I'm going to find the data test attribute.

107
00:06:49.700 --> 00:06:55.370
With a value of log in button, which we already have, and then I'm going to simulate a user clicking

108
00:06:55.370 --> 00:06:56.300
on this button.

109
00:06:56.600 --> 00:07:01.100
The way we do that is we do log in button and we trigger an event, and that event is going to be a

110
00:07:01.100 --> 00:07:01.520
click.

111
00:07:01.910 --> 00:07:04.340
This is going to be an asynchronous action.

112
00:07:04.340 --> 00:07:08.720
So we need to make sure that we put the a weight keyword in front of here to make sure we block the

113
00:07:08.730 --> 00:07:14.000
test from continuing while the click completes and while the component renders and deals with all of

114
00:07:14.000 --> 00:07:14.660
its internals.

115
00:07:15.050 --> 00:07:18.680
So in order to use a weight here, we also need to make the test asynchronous.

116
00:07:18.950 --> 00:07:21.830
So I'll make this an async function right now.

117
00:07:21.830 --> 00:07:25.610
What do I care that happens after the user clicks the button?

118
00:07:25.880 --> 00:07:28.730
I care that the log in user method is going to run.

119
00:07:28.730 --> 00:07:29.990
And what is that going to do?

120
00:07:30.170 --> 00:07:35.810
It's going to invoke the commit method on my store, which I now have represented, as is just the mock

121
00:07:35.810 --> 00:07:36.260
function.

122
00:07:36.590 --> 00:07:43.400
So I can say after the user clicks, the log in button is that I expect my commit just function and

123
00:07:43.400 --> 00:07:47.420
I can I can also play an argument here of to have been called with.

124
00:07:48.510 --> 00:07:52.020
And what I expected it to be called with log in underscore user.

125
00:07:52.230 --> 00:07:53.270
Let's see if this works.

126
00:07:53.280 --> 00:07:54.330
So I'm going to save this.

127
00:07:56.000 --> 00:07:58.220
And you can see it does indeed pass.

128
00:07:59.000 --> 00:08:03.110
So let me show you how our test would fail if our implementation was incorrect.

129
00:08:03.350 --> 00:08:09.590
So, for example, if we had the wrong mutation here, like log in users and I saved that, then we

130
00:08:09.590 --> 00:08:14.510
would catch that because our mock would know, Hey, I was invoked with an argument of log in users

131
00:08:14.510 --> 00:08:16.520
and you told me it should be log in user.

132
00:08:16.760 --> 00:08:22.760
So now we are verifying that we are sending the right mutation to the store by sending the commit method,

133
00:08:22.760 --> 00:08:23.630
the right string.

134
00:08:23.840 --> 00:08:27.410
But notice that we're not actually dealing with the real world commit method.

135
00:08:27.410 --> 00:08:29.150
We are using our own just function.

136
00:08:29.420 --> 00:08:36.590
Similarly, if I completely commit this code out, then when I run my test and we click the log in button,

137
00:08:36.800 --> 00:08:43.490
then this logic will never run and my code on my test will tell me, Hey, I got a number of calls of

138
00:08:43.490 --> 00:08:43.970
zero.

139
00:08:44.120 --> 00:08:50.930
You were telling me to expect that my commit method on my store was going to be called with an argument

140
00:08:50.930 --> 00:08:52.550
and I didn't receive any calls.

141
00:08:52.550 --> 00:08:53.510
I got zero.

142
00:08:53.780 --> 00:08:59.210
So now we are verifying that we are number one interacting with the store by invoking the correct method

143
00:08:59.210 --> 00:08:59.660
of commit.

144
00:08:59.900 --> 00:09:04.220
And number two, not just that we're invoking commit, but that we're passing it the right argument

145
00:09:04.340 --> 00:09:05.300
of log in user.

146
00:09:05.480 --> 00:09:09.830
And that, I argue, is the main half components, entire responsibility.

147
00:09:10.160 --> 00:09:16.730
That is the line I want to draw between how much may NAV is responsible for and how much view X is responsible

148
00:09:16.730 --> 00:09:17.030
for it.

149
00:09:17.330 --> 00:09:22.820
I'm just saying in my test, my component is going to give you this information, view, this method

150
00:09:22.820 --> 00:09:23.690
and this string.

151
00:09:23.780 --> 00:09:27.230
You take care of all of your store updates and I don't care how you do it.

152
00:09:27.470 --> 00:09:32.450
And when you update your store and you have a different state inside of it, how am I going to test

153
00:09:32.450 --> 00:09:38.540
the that interaction is correctly represented in my component in these tests above where I create a

154
00:09:38.540 --> 00:09:40.670
store with the exact state that I want.

155
00:09:41.300 --> 00:09:46.970
So I'm testing the interaction with the store and then I'm testing the store and how it affects my component

156
00:09:46.970 --> 00:09:52.460
in these separate, smaller, leaner tests, each with a single assertion and each with a lightweight

157
00:09:52.460 --> 00:09:55.850
store that is optimized for just what I'm testing right here.

158
00:09:56.860 --> 00:09:57.190
All right.

159
00:09:57.430 --> 00:09:58.680
So hopefully that has been helpful.

160
00:09:58.690 --> 00:10:02.500
This is an approach that allows us to use the real app, real view store in our tests.

161
00:10:02.740 --> 00:10:07.750
In the very next lesson, we're going to see how we can create an even leaner set of tests by relying

162
00:10:07.780 --> 00:10:09.000
on mock objects.

163
00:10:09.010 --> 00:10:12.760
So he know that's my favorite strategy and I'm going to show you how to do it in the very next lesson.
