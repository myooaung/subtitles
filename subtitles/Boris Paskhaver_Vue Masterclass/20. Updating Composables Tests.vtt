WEBVTT
1
00:00:00.360 --> 00:00:01.200
Okay.

2
00:00:01.200 --> 00:00:05.830
So the next file that we want to update is going to be our test file for a composable.

3
00:00:06.240 --> 00:00:14.480
So right here in tests unit store, I'm going to rename my file from composable dot tasks to composable.

4
00:00:14.490 --> 00:00:18.270
So that test that's it's now a typescript test file.

5
00:00:18.570 --> 00:00:23.490
And you'll see we're going to encounter a couple violations, but they are going to come from the exact

6
00:00:23.490 --> 00:00:28.890
same reason that we just saw a couple of lessons ago, and that is that TypeScript does not understand

7
00:00:29.070 --> 00:00:30.210
that at this point.

8
00:00:30.210 --> 00:00:36.630
Use Store is no longer the original use store function from the UX, but rather a just mock function

9
00:00:36.750 --> 00:00:38.030
that we created online.

10
00:00:38.040 --> 00:00:38.580
Number two.

11
00:00:38.880 --> 00:00:42.330
So we're going to solve this problem the exact same way as we did earlier.

12
00:00:42.510 --> 00:00:49.320
We're going to tell TypeScript using the as keyword to treat, use store as a just mock function or

13
00:00:49.380 --> 00:00:55.770
to be of that type, rather than telling TypeScript to stick with its default inference and its own

14
00:00:55.770 --> 00:00:56.910
parsing of use store.

15
00:00:57.180 --> 00:01:00.390
So right here, what I'm going to say is let's actually do it right here.

16
00:01:00.390 --> 00:01:03.660
After all the imports concept, use, store, mock.

17
00:01:04.200 --> 00:01:09.630
And the only reason I'm picking a different name is so that there's no name conflict with the original

18
00:01:09.630 --> 00:01:11.160
use store import up above.

19
00:01:11.580 --> 00:01:15.300
So my use store mock constant will be use store.

20
00:01:15.330 --> 00:01:21.270
So basically I'm referencing the exact same function, except I'm going to use that as keyword to communicate

21
00:01:21.270 --> 00:01:24.720
that TypeScript should interpret this as having a different type.

22
00:01:24.930 --> 00:01:25.650
What type?

23
00:01:25.650 --> 00:01:28.260
It's going to be a just mock object.

24
00:01:29.040 --> 00:01:29.400
All right.

25
00:01:29.550 --> 00:01:33.870
So once again, you store mock and you store are referencing the same mock function.

26
00:01:34.080 --> 00:01:41.160
However, with use store mock, TypeScript is aware that that is now being treated as a just mock function,

27
00:01:41.160 --> 00:01:43.740
which has methods like mock return value.

28
00:01:44.100 --> 00:01:47.850
So right here instead of use store, I'm going to replace this with you store mock.

29
00:01:48.450 --> 00:01:53.370
And now TypeScript understands that that method is valid and its argument is valid and it won't complain

30
00:01:53.370 --> 00:01:53.850
anymore.

31
00:01:54.210 --> 00:01:57.210
So scrolling down, I'm going to replace this with use store mock as well.

32
00:01:57.780 --> 00:01:59.700
Replace this with use store mock as well.

33
00:02:00.450 --> 00:02:04.290
And finally down here, replace, use store with you, store mock as well.

34
00:02:05.070 --> 00:02:05.760
Save that.

35
00:02:06.030 --> 00:02:08.520
Let's run our complete test suite as always.

36
00:02:09.060 --> 00:02:11.610
So right here and PM run test colon unit.

37
00:02:13.170 --> 00:02:14.520
And let's see where that gets us.

38
00:02:16.190 --> 00:02:16.880
All right.

39
00:02:17.540 --> 00:02:19.520
No other violations in this file.

40
00:02:20.550 --> 00:02:21.930
Everything's looking good.

41
00:02:22.080 --> 00:02:23.250
Give it a couple of seconds.

42
00:02:24.790 --> 00:02:25.750
And.

43
00:02:27.940 --> 00:02:29.320
Getting to all that stuff.

44
00:02:29.320 --> 00:02:29.760
Perfect.

45
00:02:29.770 --> 00:02:31.000
Everything is passing.

46
00:02:31.330 --> 00:02:34.810
All right, so now our composable test file is in TypeScript as well.

47
00:02:35.020 --> 00:02:36.220
I'll see you in the next lesson.
