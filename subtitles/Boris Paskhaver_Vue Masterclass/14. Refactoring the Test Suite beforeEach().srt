1
00:00:00,620 --> 00:00:01,700
Alright.

2
00:00:01,700 --> 00:00:07,430
So in the previous lesson we got rid of the warnings that were appearing when we were running our test

3
00:00:07,430 --> 00:00:09,290
suite for our main nav component.

4
00:00:09,590 --> 00:00:14,690
And that was because our main nav component was rendering a global router link component.

5
00:00:14,930 --> 00:00:21,050
We replaced that global router link component with a stub, with a substitute with a replacement, which

6
00:00:21,050 --> 00:00:25,790
was this router link stub component that we can get directly from view test utils.

7
00:00:26,000 --> 00:00:30,920
Of course, the reason why it is available is because this is such a common operation that the test

8
00:00:30,920 --> 00:00:33,380
utils team felt it was a good idea to include it.

9
00:00:33,770 --> 00:00:39,890
Now what we have now is pretty decent, but one issue that a person may have with it is the duplication.

10
00:00:39,890 --> 00:00:45,980
We have this extensive setup in every single test that involves us shallow, mounting the same component

11
00:00:46,100 --> 00:00:47,840
and then providing that configuration.

12
00:00:48,110 --> 00:00:53,090
Now, as I've mentioned earlier in the course, duplication is not necessarily a problem, especially

13
00:00:53,090 --> 00:00:54,920
if it makes the test easier to read.

14
00:00:55,220 --> 00:01:00,740
So in this scenario, we understand what each test is doing and we understand it without having to scroll

15
00:01:00,740 --> 00:01:02,150
up or down in the file.

16
00:01:02,150 --> 00:01:07,640
We can just see what we are setting up, what are the configuration settings and then the actual assertion

17
00:01:07,640 --> 00:01:08,210
that we're making.

18
00:01:08,480 --> 00:01:13,280
With that said, if you're adamant about reducing duplication, there are a couple of ways that we can

19
00:01:13,280 --> 00:01:13,700
do so.

20
00:01:13,910 --> 00:01:19,220
And one option is the before each function, which we explored earlier in the course, what before each

21
00:01:19,220 --> 00:01:23,840
allows us to do is to run some kind of function before each test.

22
00:01:24,050 --> 00:01:25,880
So before each function call.

23
00:01:26,090 --> 00:01:32,480
And what we can do in that, before each function is set up our components, set up our wrapper, basically

24
00:01:32,480 --> 00:01:34,520
extract this duplicated code.

25
00:01:34,700 --> 00:01:38,690
So we only have to write it once in our test file instead of in every test.

26
00:01:39,290 --> 00:01:41,000
So here's how it's going to work right here.

27
00:01:41,000 --> 00:01:43,970
I'm going to declare a before each function invocation.

28
00:01:44,210 --> 00:01:49,100
This is a function built into Gest and it accepts a function as its argument.

29
00:01:49,430 --> 00:01:54,830
So I'm going to provide an arrow function in line, and this is the function that we're going to run

30
00:01:54,920 --> 00:01:56,630
once before each test.

31
00:01:56,750 --> 00:01:59,900
More specifically, this is the function that Gest will run for us.

32
00:02:00,170 --> 00:02:04,340
So let's begin by copying and pasting our code from any test below.

33
00:02:04,340 --> 00:02:09,920
So this consort wrapper code that starts up the shallow mounting of our main nav component.

34
00:02:10,250 --> 00:02:14,960
Now the issue here is that we are in a function scope, which is a block scope.

35
00:02:15,200 --> 00:02:20,060
And when you think of the words block, all that really means is the start and end of a pair of curly

36
00:02:20,060 --> 00:02:20,600
braces.

37
00:02:20,840 --> 00:02:26,930
So the function body of the arrow function is an example of a block, and any variables are constants

38
00:02:26,930 --> 00:02:32,780
that we declare in the body of a function are only going to last as long as that block exists.

39
00:02:33,020 --> 00:02:39,470
So while we will run this code every single time before a test, we're not going to have any way to

40
00:02:39,470 --> 00:02:46,190
get access to our wrapper constant because it's going to be gone as soon as the before each function

41
00:02:46,190 --> 00:02:46,670
concludes.

42
00:02:46,940 --> 00:02:49,280
So we need a way to preserve this wrapper.

43
00:02:49,280 --> 00:02:54,380
We need a way to preserve this return value of the shell amount function so that we can reference it

44
00:02:54,380 --> 00:03:00,320
in every test because we can't simply start using wrapper here in line because just in JavaScript are

45
00:03:00,320 --> 00:03:01,970
not going to know what wrapper is.

46
00:03:02,120 --> 00:03:07,310
It's a constant that only exists as long as this function is done running, but not afterwards.

47
00:03:07,550 --> 00:03:13,820
So a very common solution that you'll see is that people will declare a variable in an outer scope because

48
00:03:13,820 --> 00:03:19,940
a function will retain access to variables in any outer scopes, which means scopes that are at a higher

49
00:03:19,940 --> 00:03:20,600
level up.

50
00:03:20,900 --> 00:03:26,660
So outside of the ID function here, we have our described function and its function body.

51
00:03:26,870 --> 00:03:32,660
So anything that we put here will be available in any of our IT functions.

52
00:03:33,020 --> 00:03:35,120
They're going to be able to outreach outside.

53
00:03:35,210 --> 00:03:37,490
To have access to that variable are constant.

54
00:03:37,790 --> 00:03:43,910
So what people typically do is they just say let wrapper, so they declare a variable but do not assign

55
00:03:43,910 --> 00:03:44,780
it a value.

56
00:03:44,960 --> 00:03:52,160
And then indeed before each function they overwrite that wrapper variable with the invocation of the

57
00:03:52,160 --> 00:03:53,240
shallow mount function.

58
00:03:53,540 --> 00:03:58,760
So what's going to happen here is every single time before each runs, once before each test, it's

59
00:03:58,760 --> 00:04:04,640
going to overwrite this variable at a higher scope with the new component that's been shallow mounted.

60
00:04:04,790 --> 00:04:10,640
So we're still going to have independence between our test files or our test suites or our tests more

61
00:04:10,640 --> 00:04:16,130
specifically, because each time we're going to create a new, shallow mounted main nav component and

62
00:04:16,130 --> 00:04:21,590
that new mounted component we're going to keep reassigning back to this wrapper variable.

63
00:04:21,740 --> 00:04:27,110
So we ensure that there's no pollution between tests because for every new test we just create a new

64
00:04:27,110 --> 00:04:29,690
wrapper and reassign it to an existing variable.

65
00:04:29,930 --> 00:04:35,030
The variable stays the same, but the reference that it's storing stays different for every test.

66
00:04:35,120 --> 00:04:38,510
It's a brand new component, so we can do whatever we want with that component.

67
00:04:38,810 --> 00:04:42,170
So with this approach, we now have this wrapper variable that is available.

68
00:04:42,380 --> 00:04:47,000
So in every test we can get rid of the mounting of our component.

69
00:04:47,750 --> 00:04:53,810
So in this test you can see we now have expect wrapper text to match and this wrapper is going to reference

70
00:04:53,810 --> 00:04:59,660
this variable which will have the assignment of the shallow mounted main nav component from the before.

71
00:05:00,120 --> 00:05:02,510
And so we've reduced this test down to a single line.

72
00:05:02,820 --> 00:05:03,840
And same thing here.

73
00:05:03,840 --> 00:05:08,970
We can remove the manual instantiation here in our and our test body.

74
00:05:09,180 --> 00:05:14,010
So we're just going to assume that rapport is going to exist because the before each will set it up

75
00:05:14,010 --> 00:05:14,550
from above.

76
00:05:14,910 --> 00:05:15,690
So let's do that.

77
00:05:15,960 --> 00:05:19,260
Let's also get rid of this content wrapper right here.

78
00:05:19,800 --> 00:05:21,990
Get rid of this content wrapper right here.

79
00:05:23,860 --> 00:05:26,170
And get rid of this concert rapper right here.

80
00:05:27,160 --> 00:05:32,200
I'm going to save this file and hopefully everything will pass and it looks like everything is good.

81
00:05:32,380 --> 00:05:37,930
So once again, whenever any test references rapper, what they are referencing is this variable that

82
00:05:37,930 --> 00:05:44,230
is declared way above here whose value is being assigned in the before each function that is running

83
00:05:44,230 --> 00:05:46,540
once before each test executes.

84
00:05:46,790 --> 00:05:51,370
Okay, so there are, of course, advantages and disadvantages to this approach.

85
00:05:51,610 --> 00:05:56,350
As I mentioned, the reduction of duplication can be argued to be an advantage because the test suite

86
00:05:56,350 --> 00:05:56,920
is shorter.

87
00:05:57,220 --> 00:06:02,320
But whenever somebody is trying to understand what a test is doing, they may scroll down and look at

88
00:06:02,320 --> 00:06:06,940
this and say and say, okay, I'm working with something called a wrapper, but what is that wrapper?

89
00:06:07,030 --> 00:06:09,280
What is the actual component that I'm working with?

90
00:06:09,280 --> 00:06:10,120
I may have forgotten.

91
00:06:10,330 --> 00:06:13,420
How have I configured the settings for that wrapper?

92
00:06:13,540 --> 00:06:14,680
What did I provide?

93
00:06:14,680 --> 00:06:15,910
What stubs did I set up?

94
00:06:16,120 --> 00:06:22,270
And if you ever get confused or you forget, you have to scroll up all the way to the top to remember

95
00:06:22,270 --> 00:06:23,140
what is going on.

96
00:06:23,350 --> 00:06:26,380
Now, if you have a short test file, that may not be a problem.

97
00:06:26,500 --> 00:06:31,780
But in the real world I have seen where this approach can get pretty nasty, where a file may have 300

98
00:06:31,780 --> 00:06:36,760
lines of test code and they may even nest different variables at different levels of execution.

99
00:06:36,940 --> 00:06:41,530
And it becomes difficult to figure out what a value actually means, where it's coming from, where

100
00:06:41,530 --> 00:06:42,250
it's declared.

101
00:06:42,340 --> 00:06:43,630
You have to scroll up and down.

102
00:06:43,750 --> 00:06:50,590
And I would argue the benefit is sometimes the cure is worse than the actual problem, because you have

103
00:06:50,680 --> 00:06:55,180
you may have you may potentially have less duplication, but you may still make the test suite harder

104
00:06:55,180 --> 00:06:57,130
to read and reason about.

105
00:06:57,400 --> 00:06:57,610
Right.

106
00:06:57,640 --> 00:07:01,950
Duplication is prominent, but it's a kind of a simple problem to understand.

107
00:07:01,960 --> 00:07:05,650
You can see the commonalities between tests in every test.

108
00:07:06,280 --> 00:07:11,230
Here you have solved one problem, but you've also in many ways created a different one, which is that

109
00:07:11,230 --> 00:07:16,000
you may potentially make the test suite harder to interpret and understand and require a development

110
00:07:16,000 --> 00:07:22,480
of the piece together the parts of how or what a test needs in order to be able to execute.

111
00:07:22,690 --> 00:07:25,900
So it's a system of tradeoffs and advantages and disadvantages.

112
00:07:25,910 --> 00:07:30,250
I'm not going to always advocate for one thing as being the absolute best way.

113
00:07:30,370 --> 00:07:35,560
I want to expose you to as many different thoughts and methodologies as I can, but that is one way

114
00:07:35,560 --> 00:07:36,910
that we can reduce duplication.

115
00:07:36,910 --> 00:07:39,580
And in the very next lesson, I'll show you another way.
