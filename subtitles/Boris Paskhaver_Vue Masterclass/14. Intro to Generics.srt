1
00:00:00,420 --> 00:00:01,140
Okay.

2
00:00:01,140 --> 00:00:07,440
So in this lesson, I want to introduce you to a super cool feature of TypeScript, and it is generics.

3
00:00:07,740 --> 00:00:12,000
And the easiest way to understand generics is to see the problem that they solve.

4
00:00:12,270 --> 00:00:17,220
So I want to immediately get into writing the code and then we'll provide the more in-depth explanation

5
00:00:17,220 --> 00:00:17,580
later.

6
00:00:17,970 --> 00:00:22,500
Before we get there, though, there's one configuration setting you have to make in your playground

7
00:00:22,650 --> 00:00:25,500
to ensure the code that we're about to write doesn't trigger an error.

8
00:00:25,860 --> 00:00:29,250
So go ahead and click on this button right here, test config.

9
00:00:29,520 --> 00:00:33,960
And that's going to bring up a configuration screen where we can set some of the settings for the playground.

10
00:00:34,260 --> 00:00:36,750
And you should see a category called Gsx.

11
00:00:36,990 --> 00:00:42,150
And most likely when this playground initializes, it's probably going to have a value of react right

12
00:00:42,150 --> 00:00:42,450
here.

13
00:00:42,750 --> 00:00:46,290
That's not a problem, but make sure that you switch it to the value none.

14
00:00:46,470 --> 00:00:48,450
So Gsx should be equal to none.

15
00:00:48,690 --> 00:00:53,040
And once that is complete you can close out of the configuration window and everything should work in

16
00:00:53,040 --> 00:00:53,520
this lesson.

17
00:00:53,940 --> 00:00:56,160
Okay, so on to the problem.

18
00:00:56,400 --> 00:00:56,940
Let's see.

19
00:00:56,940 --> 00:01:03,120
The problem we have here is we want to write a function that accepts an array as an argument and then

20
00:01:03,120 --> 00:01:05,370
returns a copy of that array.

21
00:01:05,650 --> 00:01:05,850
Right?

22
00:01:05,850 --> 00:01:10,050
So basically clones the contents of the array, very common operation, especially if you're dealing

23
00:01:10,050 --> 00:01:11,460
with something like functional programming.

24
00:01:11,880 --> 00:01:16,290
So if I was a regular JavaScript programmer, I might write my implementation like this.

25
00:01:16,560 --> 00:01:23,400
I can say content copy array is going to be an arrow function and it's going to accept a parameter,

26
00:01:23,400 --> 00:01:24,450
let's call it array.

27
00:01:24,840 --> 00:01:30,390
And what it's going to do is copy the values of that array into a brand new array.

28
00:01:30,510 --> 00:01:34,380
And one really easy way to do this in E6 is to implicitly return an array.

29
00:01:34,530 --> 00:01:39,660
And right here I'm going to use the spread operator to spread out all of the elements or values in my

30
00:01:39,660 --> 00:01:43,050
array parameter, put them into this new array and then immediately return it.

31
00:01:43,380 --> 00:01:43,650
All right.

32
00:01:43,650 --> 00:01:46,950
So it's a really simple, elegant one line way to copy and array.

33
00:01:47,370 --> 00:01:50,970
The JavaScript interpreter would say, This is totally fine.

34
00:01:50,970 --> 00:01:53,370
Unfortunately, TypeScript is not going to be happy with this.

35
00:01:53,640 --> 00:01:58,620
And the reason it's not happy is, of course, because it doesn't know what the array parameter is.

36
00:01:58,620 --> 00:02:03,660
It says parameter array implicitly has an any type, and because we haven't told it that it's an array,

37
00:02:03,690 --> 00:02:07,140
it can't validate that something like this spreading operation is valid.

38
00:02:07,620 --> 00:02:11,820
So let's see today, our problem that we're trying to solve is that we're trying to make a copy of a

39
00:02:11,820 --> 00:02:12,450
string array.

40
00:02:12,660 --> 00:02:17,670
So our simple solution might be to say, okay, this array parameter is going to be a string array,

41
00:02:18,750 --> 00:02:20,370
and that solves the problem for the day.

42
00:02:20,370 --> 00:02:21,420
And so we're very happy.

43
00:02:21,750 --> 00:02:24,510
But let's imagine we run into another problem the very next day.

44
00:02:24,810 --> 00:02:30,510
Let's say our boss comes to us and says, Well, I'd like you to write a new function or use your existing

45
00:02:30,510 --> 00:02:36,180
function, but I want it to accept an array of numbers and I want it to create a copy of that array

46
00:02:36,180 --> 00:02:36,660
of numbers.

47
00:02:36,960 --> 00:02:41,430
Well, we have a function now that's going to have a very similar implementation, but it accepts a

48
00:02:41,430 --> 00:02:44,670
different type of array, an array of numbers versus an array of strings.

49
00:02:45,000 --> 00:02:46,470
So how would we solve that problem?

50
00:02:46,770 --> 00:02:48,180
Well, there's two solutions.

51
00:02:48,180 --> 00:02:51,150
And one of them and neither of them really is actually that great.

52
00:02:51,420 --> 00:02:56,040
One option is we could tell TypeScript that array right here is going to be either a string array or

53
00:02:56,040 --> 00:02:56,550
a number.

54
00:02:56,550 --> 00:02:56,820
Right.

55
00:02:57,120 --> 00:02:59,130
And there's a way to do that syntactically.

56
00:02:59,310 --> 00:03:04,260
But that's obviously not scalable because what happens the next day, if we have an array of booleans

57
00:03:04,260 --> 00:03:09,160
or an array of arrays or an array of objects or an array of job objects, right?

58
00:03:09,180 --> 00:03:10,920
Each type of object is different in TypeScript.

59
00:03:11,160 --> 00:03:16,460
So if we keep saying all of these either or situations, we're quickly going to balloon this function.

60
00:03:16,490 --> 00:03:18,210
It's going to be pretty complex to understand.

61
00:03:18,510 --> 00:03:23,940
And the second solution, which is just as well not as great and not scalable, is to simply make multiple

62
00:03:23,940 --> 00:03:24,390
functions.

63
00:03:24,600 --> 00:03:29,010
So maybe the simple solution I might think of as, Oh, I'll make this function called the copy string

64
00:03:29,010 --> 00:03:33,570
array, which will allow me to create a separate arrow function called the copy number array.

65
00:03:34,050 --> 00:03:37,050
And it's going to be the exact same except for my array parameter.

66
00:03:37,050 --> 00:03:42,660
I'll change that to be a number array and then I'll simply write the exact same logic to make a copy

67
00:03:42,660 --> 00:03:43,440
of that number array.

68
00:03:43,740 --> 00:03:46,770
So once again, the problem with this approach is it's not scalable.

69
00:03:46,770 --> 00:03:48,810
What happens if we want to copy a boolean array?

70
00:03:49,020 --> 00:03:53,400
What happens if we want to copy a array of objects and so on and so forth?

71
00:03:53,400 --> 00:03:58,470
We can't just write a a new function every single time we have an array of something else, right?

72
00:03:58,470 --> 00:04:00,300
It's not scalable, it's redundant.

73
00:04:00,630 --> 00:04:05,610
And it's for these kinds of situations where we have functions that have the exact same implementation

74
00:04:06,300 --> 00:04:11,700
but only vary in the type of some of its parameters that we can use generics to solve this problem.

75
00:04:12,120 --> 00:04:13,830
So why are they called generics?

76
00:04:13,830 --> 00:04:15,570
Well, the name is actually kind of ingenious.

77
00:04:15,570 --> 00:04:19,020
And I want you to think about what the word generic means in the real world.

78
00:04:19,290 --> 00:04:22,110
The word generic basically means not specific.

79
00:04:22,260 --> 00:04:22,560
Right.

80
00:04:22,560 --> 00:04:25,100
When you think about the words like generic cereal, right.

81
00:04:25,140 --> 00:04:29,130
Or generic newspaper, you're talking about something that is not special, right?

82
00:04:29,250 --> 00:04:30,390
It's not specific.

83
00:04:30,390 --> 00:04:31,410
It's not known.

84
00:04:31,410 --> 00:04:32,520
It's kind of generic.

85
00:04:32,520 --> 00:04:32,690
Right.

86
00:04:32,700 --> 00:04:34,200
It's meant you don't care about it.

87
00:04:34,440 --> 00:04:35,910
It's sort of the same principle here.

88
00:04:36,180 --> 00:04:40,740
What generics allow us to do is to define a function that's going to accept a generic type.

89
00:04:40,980 --> 00:04:46,110
And basically a generic type is a nonspecific type that we don't know in advance.

90
00:04:46,260 --> 00:04:49,770
And we're only going to know it when we're going to invoke that function.

91
00:04:50,130 --> 00:04:50,370
All right.

92
00:04:50,370 --> 00:04:51,300
That's a lot to take in.

93
00:04:51,300 --> 00:04:53,640
So let me show you the syntax and how it's going to work.

94
00:04:53,820 --> 00:04:58,230
So I'm going to remove this second function right here and I'm going to change this back to being copy

95
00:04:58,230 --> 00:04:58,590
array.

96
00:05:00,090 --> 00:05:05,970
And what I want to do is I want to allow my copy array function to accept a generic type argument.

97
00:05:06,360 --> 00:05:11,910
So rather than being specific about string right here, I want string to be some kind of type that I

98
00:05:11,910 --> 00:05:13,170
cannot predict in advance.

99
00:05:13,380 --> 00:05:16,770
Rather than being a specific type like string or number or boolean.

100
00:05:16,920 --> 00:05:21,150
I just want to call it a generic type, some type that I don't know yet.

101
00:05:21,570 --> 00:05:21,870
Right.

102
00:05:22,020 --> 00:05:26,820
And in order to specify the my copy array function will accept a generic type as an argument.

103
00:05:27,030 --> 00:05:31,670
What I do is before the parameter list, I provide this pair of brackets.

104
00:05:31,680 --> 00:05:34,170
It's the less than sine followed by the greater than sine.

105
00:05:34,440 --> 00:05:39,690
And in here what I define is the parameters for the expected generic types.

106
00:05:40,200 --> 00:05:40,500
All right.

107
00:05:40,680 --> 00:05:44,640
Now you can actually define whatever name you want, and here you can almost think of it as being very

108
00:05:44,640 --> 00:05:49,200
similar to the parameter, the parameters you define within the parentheses.

109
00:05:49,350 --> 00:05:53,850
So this can be whatever you want, but the common community convention you're going to see is to give

110
00:05:53,850 --> 00:05:56,550
each type a single letter name.

111
00:05:56,850 --> 00:05:59,850
And the most common one you're going to see is Capital T.

112
00:06:00,060 --> 00:06:03,060
And the reason that is common is because T is short for type.

113
00:06:03,900 --> 00:06:05,280
So what have we done here?

114
00:06:05,430 --> 00:06:10,800
We've said that whenever anybody invokes copy array later, we're going to expect that invocation to

115
00:06:10,800 --> 00:06:17,640
give me a more specific type than just capital T, give me a concrete type like string, like number,

116
00:06:17,640 --> 00:06:18,540
like Boolean, etc..

117
00:06:18,810 --> 00:06:23,700
I don't know what that's going to be in the future, but t is going to be its generic representation,

118
00:06:23,700 --> 00:06:26,790
almost like the standard for that eventual real type value.

119
00:06:27,210 --> 00:06:33,420
Now, whatever that eventual invocation gives me as T, I can then utilize in, for example, my parameter

120
00:06:33,420 --> 00:06:34,170
list right here.

121
00:06:34,350 --> 00:06:36,210
And for example, in my return value.

122
00:06:36,570 --> 00:06:39,630
So let's get rid of this string right here and let's think about this problem.

123
00:06:40,050 --> 00:06:45,900
Whenever I invoke copy array later, I promise to provide something of type T, an actual type like

124
00:06:45,900 --> 00:06:46,290
string.

125
00:06:46,650 --> 00:06:53,040
If I know that T is that, then I can say that the parameter array will be of type t array.

126
00:06:53,400 --> 00:06:53,670
Right.

127
00:06:53,910 --> 00:06:58,590
So once again, I don't know what T is going to be in advance, but I'm going to expect an invocation

128
00:06:58,590 --> 00:07:03,890
to tell me and I'm going to say that this is going to be an array of some type called T, right?

129
00:07:03,900 --> 00:07:07,290
T is my generic name for something that will be specific later.

130
00:07:07,980 --> 00:07:14,550
And I also know that whatever t is, the array that I accept will be an array of t, and then the array

131
00:07:14,550 --> 00:07:18,120
I return will also be an array of t, whatever it happens to be.

132
00:07:18,360 --> 00:07:22,920
So if I want to explicitly declare a return value here, I can do a colon and then say the return value

133
00:07:22,920 --> 00:07:24,900
will be of type array of t.

134
00:07:25,750 --> 00:07:26,080
All right.

135
00:07:26,200 --> 00:07:27,450
So this is generic.

136
00:07:27,460 --> 00:07:28,270
Why is it generic?

137
00:07:28,270 --> 00:07:29,380
Because it's not specific.

138
00:07:29,380 --> 00:07:31,030
We don't know what it is.

139
00:07:31,270 --> 00:07:37,300
But what I'm telling TypeScript is whatever t will be, understand that array is going to be an array

140
00:07:37,300 --> 00:07:41,920
of that and the final return value will be an array of that type as well.

141
00:07:42,460 --> 00:07:47,050
I don't know what t is, but I'm going to say whatever it is, you're going to have an array of it as

142
00:07:47,050 --> 00:07:50,560
a parameter and an array of it as the return value of this function.

143
00:07:51,010 --> 00:07:55,270
So now down below, as I mentioned, we can invoke copyright.

144
00:07:56,170 --> 00:08:00,670
And before we provide the parentheses to provide the parameter, what we need to do is to specify what

145
00:08:00,700 --> 00:08:01,570
T is going to be.

146
00:08:01,930 --> 00:08:04,840
So right here, I'm going to provide the exact same pair of brackets.

147
00:08:05,050 --> 00:08:08,560
And here is where I provide a more concrete value.

148
00:08:08,930 --> 00:08:14,350
So, for example, let's say I now want T and this invocation to be the concrete type of number.

149
00:08:14,590 --> 00:08:19,990
So moving from a generic type of T, which is kind of ambiguous to a more specific type of number.

150
00:08:20,380 --> 00:08:25,720
So what TypeScript is going to do behind the scenes is going to basically look at copy array and substitute

151
00:08:25,750 --> 00:08:27,610
number wherever it sees T.

152
00:08:27,880 --> 00:08:32,440
So behind the scenes type type, which is going to say, okay, now I have a copy array function.

153
00:08:32,680 --> 00:08:38,200
My array is going to be of number or my array parameter is going to be number eight and my return value

154
00:08:38,200 --> 00:08:40,150
is going to be of type number array as well.

155
00:08:40,420 --> 00:08:45,640
And all of that happens because we told TypeScript to substitute T right here with this number.

156
00:08:45,760 --> 00:08:51,970
Number is the specific type argument for this generic T type argument that we specified here.

157
00:08:52,330 --> 00:08:52,990
So now.

158
00:08:54,760 --> 00:09:01,480
We've we've told TypeScript that the the type will be number, which means this array parameter will

159
00:09:01,480 --> 00:09:03,370
be expected to be a number array.

160
00:09:03,670 --> 00:09:06,160
So right here, I'll be able to provide something like a number array.

161
00:09:06,170 --> 00:09:10,100
You can see even in the highlight that TypeScript understands it should be a number.

162
00:09:10,100 --> 00:09:10,330
Right.

163
00:09:10,380 --> 00:09:11,430
And that will return a number.

164
00:09:11,430 --> 00:09:11,680
Right.

165
00:09:11,920 --> 00:09:16,480
So I can provide a sample array like one, two and you can see the function is going to work just fine.

166
00:09:16,690 --> 00:09:17,440
No errors.

167
00:09:17,890 --> 00:09:22,630
But what is the beautiful part of this approach is we can substitute any specific type to replace the

168
00:09:22,630 --> 00:09:23,590
generic type.

169
00:09:23,830 --> 00:09:26,410
So for example, what if I want to copy an array of strings?

170
00:09:26,680 --> 00:09:27,520
Not a problem.

171
00:09:27,520 --> 00:09:28,930
I'm still going to use copy array.

172
00:09:29,050 --> 00:09:31,900
But now for the specific type to replace teh above.

173
00:09:32,050 --> 00:09:38,290
I'm going to say that for this invocation I want to be literally a string type rather than the my generic.

174
00:09:38,590 --> 00:09:39,430
I want to be a string.

175
00:09:39,640 --> 00:09:43,300
So once again, TypeScript is going to say, okay, you've told me that this is straight, that this

176
00:09:43,300 --> 00:09:44,330
is a type string.

177
00:09:44,590 --> 00:09:49,480
So I know the array parameter will be a string array and I know the return value must be a string array

178
00:09:49,480 --> 00:09:49,900
as well.

179
00:09:49,960 --> 00:09:54,070
They can perform the same validation as if we had simply written out string in line.

180
00:09:54,610 --> 00:09:54,910
All right.

181
00:09:54,910 --> 00:09:58,810
So right here I can say invoke this copy array function.

182
00:09:58,900 --> 00:10:03,760
You can see it now expects a string array and I can provide an array with values like Hello and world.

183
00:10:04,540 --> 00:10:04,810
Right.

184
00:10:04,810 --> 00:10:05,550
And you guessed it.

185
00:10:05,560 --> 00:10:07,020
How would we treat a boolean array?

186
00:10:07,030 --> 00:10:08,170
Exactly as you might expect.

187
00:10:08,350 --> 00:10:13,090
I have to tell TypeScript that the value of my T type is going to be a more specific type of boolean.

188
00:10:13,390 --> 00:10:17,740
And so now when we invoke this, you can see TypeScript figures out that it needs an array parameter

189
00:10:17,740 --> 00:10:21,900
of type boolean array and a return value should also be boolean array.

190
00:10:21,910 --> 00:10:24,880
And it's going to validate that our logic holds as we run.

191
00:10:24,880 --> 00:10:29,020
This function's right here an array of true false, and you can see our errors go out.

192
00:10:29,440 --> 00:10:29,680
All right.

193
00:10:29,680 --> 00:10:31,090
So that is the benefit of generics.

194
00:10:31,120 --> 00:10:33,760
They allow us to write more reusable functions.

195
00:10:33,940 --> 00:10:38,530
And the way they allow us to make more usable functions is by providing generic type parameters.

196
00:10:38,710 --> 00:10:44,770
We say, hey, whenever we're going to run this function later, we must provide a more specific type

197
00:10:44,950 --> 00:10:46,390
for some parameter.

198
00:10:46,390 --> 00:10:48,310
That is a type that I would define here.

199
00:10:48,490 --> 00:10:51,370
It's not the same thing as our regular parameters right here.

200
00:10:51,370 --> 00:10:54,730
Right, because our regular parameters are inputs to the function here.

201
00:10:54,850 --> 00:11:00,700
This think this t is a more generic typescript thing where typescript needs to be told what the more

202
00:11:00,700 --> 00:11:03,130
specific value of this generic t will be.

203
00:11:03,190 --> 00:11:04,660
Whenever we invoke the function.

204
00:11:04,900 --> 00:11:07,100
As far as the name right here, this can be anything else.

205
00:11:07,120 --> 00:11:08,050
This could be whatever we want.

206
00:11:08,200 --> 00:11:10,690
It can be type, it can be, you know, kind of type.

207
00:11:10,690 --> 00:11:11,770
It can be whatever we want.

208
00:11:11,950 --> 00:11:16,150
But the common convention you're going to see is a single character, and most often it's going to be

209
00:11:16,150 --> 00:11:18,460
T because T is kind of short for type.

210
00:11:18,880 --> 00:11:19,240
All right.

211
00:11:19,930 --> 00:11:20,890
That's what we're doing here.

212
00:11:21,130 --> 00:11:26,740
Hopefully this makes sense and hopefully it helps explain the benefits of how generics can offer a lot

213
00:11:26,740 --> 00:11:27,970
of reusability in your code.

214
00:11:28,180 --> 00:11:31,960
Again, the reason the call generic is because this type of T is generic.

215
00:11:31,960 --> 00:11:35,800
It's not specific, it's not concrete, it's abstract, it's generic.

216
00:11:36,070 --> 00:11:40,810
And we provide a more concrete type when we actually run the logic of the function.

217
00:11:41,170 --> 00:11:41,520
All right.

218
00:11:41,530 --> 00:11:43,060
That's all there is to cover in this lesson.

219
00:11:43,060 --> 00:11:44,590
So I will see you in the next one.
