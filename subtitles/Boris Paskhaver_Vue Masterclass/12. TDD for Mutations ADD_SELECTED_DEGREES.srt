1
00:00:00,730 --> 00:00:01,460
Okay.

2
00:00:01,470 --> 00:00:02,780
So moving right along.

3
00:00:02,790 --> 00:00:08,940
The next thing I want to do is to write a test for the mutation that I want to add that's going to actually

4
00:00:08,940 --> 00:00:16,590
accept the array of selected degrees and then overwrite the selected degree's property on my view store

5
00:00:16,590 --> 00:00:16,950
state.

6
00:00:17,310 --> 00:00:22,650
Now over the course of the last couple of lessons, I realize it may seem like we've been doing a lot

7
00:00:22,650 --> 00:00:29,130
of work on the bookstore side of things the state, the mutations, the getters, etc. But I argue that

8
00:00:29,130 --> 00:00:30,720
that is actually a good sign.

9
00:00:30,960 --> 00:00:36,840
The fact that we haven't gotten to our component yet is a sign that we've moved a lot of this complexity

10
00:00:36,960 --> 00:00:43,560
away from the component upwards, from the component into the bookstore state, where it can live as

11
00:00:43,560 --> 00:00:48,780
much more simpler JavaScript functions and methods that can also be tested in isolation.

12
00:00:49,050 --> 00:00:54,810
We are effectively decoupling ourselves more and more from the idea of a view component specifically

13
00:00:54,960 --> 00:01:00,570
and storing all of our logic is in there, which overall is a pretty good thing because even though

14
00:01:00,570 --> 00:01:06,000
we are relying on View X, which is its own dependency, all of this is, at the end of the day is just

15
00:01:06,000 --> 00:01:11,880
core JavaScript or TypeScript code, and it would be a lot easier to migrate this into another library,

16
00:01:11,880 --> 00:01:16,980
for example, because it's just vanilla JavaScript typescript, it's just a core language compared to

17
00:01:16,980 --> 00:01:20,040
coupling ourselves to the actual view component itself.

18
00:01:20,310 --> 00:01:25,290
So the fact that we've been mostly working in TypeScript files instead of view component files, I argue

19
00:01:25,290 --> 00:01:26,130
is a good thing.

20
00:01:26,730 --> 00:01:31,050
With that said, let's go ahead and wire up our new ADD selected degrees mutation.

21
00:01:31,230 --> 00:01:37,290
And of course that will accept a string array of degrees based on the checkboxes that the user has currently

22
00:01:37,290 --> 00:01:39,530
selected from our eventual component.

23
00:01:39,540 --> 00:01:41,610
We don't have it yet, but we will have it shortly.

24
00:01:41,820 --> 00:01:46,590
And then of course, we're going to overwrite our selected degrees property on the View Store State.

25
00:01:46,800 --> 00:01:51,450
Remember, the way we designed this earlier is every time the user clicks a checkbox, it's going to

26
00:01:51,450 --> 00:01:54,900
generate a brand new array with the most up to date selections.

27
00:01:55,080 --> 00:01:57,300
And so we can always just overwrite the property.

28
00:01:57,390 --> 00:02:02,160
We don't need to merge it with our previous selected degrees array or anything like that.

29
00:02:02,160 --> 00:02:04,350
We can simply override it and it should just work.

30
00:02:04,830 --> 00:02:07,860
All right, so right here in my mutations test, that's fine.

31
00:02:07,870 --> 00:02:08,730
I'm going to scroll down.

32
00:02:09,810 --> 00:02:15,750
And we have two very similar tests for our other mutations to add to the user selections.

33
00:02:15,990 --> 00:02:17,940
So let's add another described block right here.

34
00:02:18,330 --> 00:02:22,980
And I would call this eventual mutation add selected degrees.

35
00:02:24,700 --> 00:02:27,130
And what will this mutation be responsible for?

36
00:02:28,130 --> 00:02:37,700
It keeps track of which degrees the user has chosen to filter jobs by.

37
00:02:38,420 --> 00:02:38,810
All right.

38
00:02:39,410 --> 00:02:41,040
It's going to be very similar to what we have above.

39
00:02:41,040 --> 00:02:42,440
We're going to have a starting state.

40
00:02:42,770 --> 00:02:44,090
So I can say starting state.

41
00:02:44,870 --> 00:02:50,600
For some reason, I think the O key on my keyboard is a little rebellious today, but we're going to

42
00:02:50,600 --> 00:02:51,550
have a starting state.

43
00:02:51,560 --> 00:02:53,810
We're going to use our create state helper function.

44
00:02:54,080 --> 00:02:58,100
And of course, the property that we care about for this test is going to be selected degrees.

45
00:02:58,520 --> 00:03:03,080
And we're going to clarify to a future reader that it's going to start out as an empty array, even

46
00:03:03,080 --> 00:03:03,860
though that's the default.

47
00:03:04,130 --> 00:03:08,090
And then, of course, I want to run my eventual mutation to mutations.

48
00:03:08,300 --> 00:03:12,380
I'm going to run my new mutation, which doesn't exist yet, which is going to be called add selected

49
00:03:12,380 --> 00:03:12,830
degrees.

50
00:03:13,740 --> 00:03:18,860
And we know that mutation accepts as its first argument the current state as it is.

51
00:03:18,950 --> 00:03:24,090
I'm going to pass in my starting state and then my second argument can be whatever I want and obviously

52
00:03:24,090 --> 00:03:27,660
I want it to be my array of strings representing the selected degrees.

53
00:03:27,960 --> 00:03:33,240
So maybe here I can provide an array of strings like masters and bachelors.

54
00:03:35,560 --> 00:03:35,920
All right.

55
00:03:36,160 --> 00:03:38,690
And then after the mutation runs, what do I expect?

56
00:03:38,710 --> 00:03:44,590
I expect that my starting state's selected degrees property will be updated from an empty array to an

57
00:03:44,590 --> 00:03:47,500
array of these two strings that I provided right here.

58
00:03:47,710 --> 00:03:49,570
Expect starting state.

59
00:03:51,100 --> 00:03:58,150
Dot selected degrees to now equal an array with the exact same values of master's and bachelor's.

60
00:04:00,240 --> 00:04:00,600
All right.

61
00:04:00,600 --> 00:04:04,060
So again, TypeScript is going to first complain that it doesn't realize this name.

62
00:04:04,080 --> 00:04:04,800
Not a problem.

63
00:04:04,810 --> 00:04:05,520
We need to add it.

64
00:04:05,640 --> 00:04:06,120
Which means?

65
00:04:06,190 --> 00:04:08,730
Which means we need to go to our constants file and add it.

66
00:04:09,090 --> 00:04:10,410
Let's open up constants.

67
00:04:10,410 --> 00:04:11,070
That's.

68
00:04:12,740 --> 00:04:13,070
All right.

69
00:04:13,070 --> 00:04:16,340
And in here, we can add a new one, and let's do it.

70
00:04:16,370 --> 00:04:17,510
How about right here?

71
00:04:17,960 --> 00:04:24,560
Export const, add selected degrees is going to be a string of add selected degrees.

72
00:04:27,050 --> 00:04:27,590
There we go.

73
00:04:27,590 --> 00:04:28,610
Save that file.

74
00:04:28,610 --> 00:04:30,580
And that allows us to import it right here.

75
00:04:30,860 --> 00:04:34,550
So right here I can add selected degrees as an import.

76
00:04:34,550 --> 00:04:38,300
So now I have that constant name to represent my mutation method name.

77
00:04:38,720 --> 00:04:44,960
So right here I'm going to add that method name, add selected degrees, and here I'm going to define

78
00:04:44,960 --> 00:04:46,580
the body of my mutation method.

79
00:04:46,790 --> 00:04:51,800
The first argument to any mutation is always going to be the current view or state that is so that the

80
00:04:51,800 --> 00:04:53,290
mutation can update it.

81
00:04:53,300 --> 00:04:56,180
That's the whole point of a mutation is to mutate, store state.

82
00:04:56,510 --> 00:04:58,670
So that of course is going to be uptight global state.

83
00:04:59,060 --> 00:05:03,470
And then the second and third parameters or however many we want is up to us.

84
00:05:03,710 --> 00:05:08,540
Obviously, in this case I want to receive a string array and that is going to represent my degrees

85
00:05:08,540 --> 00:05:11,150
that the user has selected it from the eventual checkboxes.

86
00:05:11,450 --> 00:05:15,950
So right here I will say I will expect an array of degrees which is going to be a string array.

87
00:05:16,820 --> 00:05:21,170
And then of course all that's left to do in the body is to overwrite the correct property.

88
00:05:21,350 --> 00:05:26,450
So on my state, I'm going to have a certain amount of properties which TypeScript is also going to

89
00:05:26,450 --> 00:05:27,170
validate for me.

90
00:05:27,380 --> 00:05:32,930
So I know I have a selected degrees array and I'm simply going to overwrite it with my new degrees string.

91
00:05:32,930 --> 00:05:37,610
A rate selected degrees, remember is not an array of degree objects, it is an array of strings.

92
00:05:37,790 --> 00:05:42,410
So TypeScript says you're trying to overwrite an array of strings with a new array of strings that's

93
00:05:42,410 --> 00:05:44,000
totally valid, the types match.

94
00:05:44,210 --> 00:05:45,230
So I'm going to allow that.

95
00:05:45,440 --> 00:05:48,770
And when I save that, we should now get a passing test.

96
00:05:48,770 --> 00:05:48,950
We.

97
00:05:50,710 --> 00:05:51,850
Give it a second to run.

98
00:05:52,330 --> 00:05:53,030
And there we go.

99
00:05:53,050 --> 00:05:53,830
Everything is passing.

100
00:05:54,070 --> 00:05:54,340
All right.

101
00:05:54,340 --> 00:05:57,100
So there is our mutation to actually update selected degrees.

102
00:05:57,280 --> 00:06:02,290
Once we update the selected degrees array, we know that our getters will rerun, which includes the

103
00:06:02,290 --> 00:06:04,810
filter jobs getter that we worked on in the previous lesson.

104
00:06:05,020 --> 00:06:05,890
It will rerun.

105
00:06:06,070 --> 00:06:11,620
It will now have a new selected degrees array to rely on in those helper getters that are checking whether

106
00:06:11,920 --> 00:06:17,500
the actual array of selected degrees includes a given job's degree, etc..

107
00:06:17,650 --> 00:06:21,970
So now all of the puzzle pieces are kind of starting to come together, all right?

108
00:06:21,970 --> 00:06:25,420
And hopefully very soon we're going to be able to get to our actual component implementation.

109
00:06:25,570 --> 00:06:29,890
And you're going to see how easy it's going to be, because so much of the logic is already written

110
00:06:29,890 --> 00:06:31,150
on the view side of things.

111
00:06:31,480 --> 00:06:34,960
So with that, I'll leave you to enjoy what we learned this lesson.

112
00:06:35,110 --> 00:06:36,550
And I will see you in the next one.
