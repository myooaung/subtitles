WEBVTT
1
00:00:00.500 --> 00:00:01.340
Okay.

2
00:00:01.340 --> 00:00:05.060
So let's talk about the bug that we encountered in the previous lesson.

3
00:00:05.330 --> 00:00:10.430
We saw that when the page loaded, we did not see any jobs on the right hand side.

4
00:00:10.640 --> 00:00:15.500
And the issue is actually coming from our filter jobs by organizations getter.

5
00:00:15.830 --> 00:00:21.530
So here in my store index that's filed, I want to show you our getter implementation and then show

6
00:00:21.530 --> 00:00:22.610
you what's wrong with it.

7
00:00:22.940 --> 00:00:29.480
So let's imagine that we have 100 jobs that we received from our backend, but also that the user has

8
00:00:29.480 --> 00:00:32.390
not selected any organizations to filter by.

9
00:00:32.810 --> 00:00:37.550
So in that scenario, our selected organization's array is going to be empty.

10
00:00:37.640 --> 00:00:39.380
It's going to look exactly like this.

11
00:00:39.830 --> 00:00:41.150
So what's the problem with this?

12
00:00:41.420 --> 00:00:47.780
Well, the problem is when we run the includes method on an array, we are asking JavaScript to check

13
00:00:47.780 --> 00:00:50.900
whether we are finding a certain string within that array.

14
00:00:50.900 --> 00:00:53.840
And that string, of course, is the current jobs organization.

15
00:00:54.230 --> 00:00:59.570
The only problem is if our array is empty, then obviously we're not going to find any string in there.

16
00:00:59.900 --> 00:01:04.910
So if we have an empty array and we call the includes method on it, we're always going to get false,

17
00:01:05.270 --> 00:01:05.540
right?

18
00:01:05.540 --> 00:01:11.330
So for example, if we're running this getter and we have a sample job with, let's say an organization

19
00:01:11.330 --> 00:01:17.660
of let's save YouTube, then this filter function is going to ask, Hey, selected organizations, empty

20
00:01:17.660 --> 00:01:19.910
array, do you have the value of YouTube in it?

21
00:01:20.060 --> 00:01:23.130
And the JavaScript is going to say, No, I don't have YouTube.

22
00:01:23.150 --> 00:01:24.050
The answer is false.

23
00:01:24.320 --> 00:01:28.630
So we're going to get back false, which means we're not going to include that job in these filtered

24
00:01:28.680 --> 00:01:29.060
jobs.

25
00:01:29.060 --> 00:01:29.270
Right.

26
00:01:29.480 --> 00:01:34.640
And no matter what string we have here, whether it be YouTube or you can do it because we have an empty

27
00:01:34.640 --> 00:01:36.530
array, we're always going to get a false.

28
00:01:36.920 --> 00:01:41.810
So in summary, for every single job that we're going to iterate over in this getter, we're always

29
00:01:41.810 --> 00:01:42.830
going to return false.

30
00:01:43.070 --> 00:01:48.260
And since we're always going to return false, what this getter is ultimately going to return when selected

31
00:01:48.260 --> 00:01:52.010
organizations as empty is going to be a final return value of an empty array.

32
00:01:52.220 --> 00:01:58.460
We literally have no jobs that satisfy this criteria because there are no jobs that can.

33
00:01:59.000 --> 00:02:00.680
So we get back and empty right?

34
00:02:00.860 --> 00:02:06.080
Then when we jump to our original component, our original component says, okay, I'm going to take

35
00:02:06.080 --> 00:02:07.850
the first ten jobs of an empty array.

36
00:02:07.970 --> 00:02:09.530
And that's going to be nothing.

37
00:02:09.530 --> 00:02:09.770
Right?

38
00:02:09.890 --> 00:02:11.720
And so it has no jobs to iterate over.

39
00:02:11.900 --> 00:02:13.700
So V four has nothing to iterate over.

40
00:02:13.790 --> 00:02:15.440
So we get nothing on the right hand side.

41
00:02:15.830 --> 00:02:19.280
Why does this problem fix itself whenever we select an organization?

42
00:02:19.490 --> 00:02:23.450
Well, whenever we do that, remember that our view store receives the changes.

43
00:02:23.630 --> 00:02:28.340
So selected organizations then becomes an array that actually has a value in it, like YouTube.

44
00:02:28.580 --> 00:02:31.400
And because that part of the store state has changed.

45
00:02:31.550 --> 00:02:37.370
Our getter now runs and because our gallery runs, it repeats the filter logic again for every job.

46
00:02:37.550 --> 00:02:42.290
And now because it has a selected organization's array with Let's Save YouTube, that's only going to

47
00:02:42.290 --> 00:02:44.090
find the jobs that have YouTube in it.

48
00:02:44.480 --> 00:02:49.520
So in summary, this logic will work as soon as the user has selected one or more organizations.

49
00:02:49.670 --> 00:02:54.380
But it's not going to work whenever the user has not selected any organizations because this array is

50
00:02:54.380 --> 00:02:55.040
going to be empty.

51
00:02:55.790 --> 00:02:59.750
So what behavior do we want when the user does not have any organization selected?

52
00:02:59.960 --> 00:03:02.060
Well, there's no filters being applied.

53
00:03:02.150 --> 00:03:05.420
So I think the most logical thing is exactly what we've had so far.

54
00:03:05.510 --> 00:03:08.900
We simply show the user all of the jobs, all 100 of them.

55
00:03:09.050 --> 00:03:10.160
We load the page.

56
00:03:10.190 --> 00:03:12.950
We show them every possible job our company has to offer.

57
00:03:13.070 --> 00:03:18.650
And then when they select an organization or two of them or remove one or etc., then we update the

58
00:03:18.650 --> 00:03:19.610
jobs issue on the right.

59
00:03:19.640 --> 00:03:23.660
But we should always have something to show them either everything or a filtered subset.

60
00:03:23.960 --> 00:03:28.250
So our solution to this is going to be to add a pretty simple if statement to our getter, and it's

61
00:03:28.250 --> 00:03:31.460
going to say if there are no selected organizations at all.

62
00:03:31.490 --> 00:03:34.670
If the length of that array zero, then simply show all of the jobs.

63
00:03:34.760 --> 00:03:38.870
Simply return the current jobs array from the View Store state as it is.

64
00:03:39.260 --> 00:03:39.620
All right.

65
00:03:39.770 --> 00:03:42.130
So in order to implement that, let's first write a test.

66
00:03:42.140 --> 00:03:47.210
So I'm going to open up my index, that test, that just file in my store.

67
00:03:47.600 --> 00:03:50.090
I'm going to drag it over here to the right hand side.

68
00:03:50.570 --> 00:03:53.540
And I'm also going to open up my terminal so I can run my tests.

69
00:03:54.690 --> 00:03:55.160
All right.

70
00:03:55.460 --> 00:03:59.060
And so let me just start it up with NPM, run, test, call and watch.

71
00:04:00.470 --> 00:04:04.250
And so we want to write an additional test for an existing getter.

72
00:04:04.250 --> 00:04:07.610
So I'm going to scold way all the way down to my getter.

73
00:04:07.610 --> 00:04:12.050
S.E. here is my filter jobs by organizations test that we previously wrote.

74
00:04:12.260 --> 00:04:16.700
And this test, of course, assumes that we have a selected organization's array of values.

75
00:04:16.910 --> 00:04:22.040
Let's add an additional describe inside of our filter jobs by organizations.

76
00:04:22.040 --> 00:04:25.670
Describe to explain a different scenario, a different context.

77
00:04:25.670 --> 00:04:29.000
And that context is there are there are no organizations selected.

78
00:04:29.270 --> 00:04:30.890
So right here, I'm going to describe.

79
00:04:32.260 --> 00:04:36.340
When the user has not selected any organizations.

80
00:04:38.510 --> 00:04:39.610
What do we want to happen?

81
00:04:39.620 --> 00:04:42.920
We want to get back the array of all of the original jobs.

82
00:04:43.250 --> 00:04:45.320
So what I'm going to do is first write my test description.

83
00:04:45.800 --> 00:04:47.750
What is what should the U.S. store do?

84
00:04:47.780 --> 00:04:48.770
What should the getter do?

85
00:04:49.010 --> 00:04:51.680
It should return all jobs.

86
00:04:52.070 --> 00:04:56.150
There are no filters to be applied, so we want to show the user all of the original jobs.

87
00:04:57.580 --> 00:05:01.780
So I'm going to do is copy most of the code that we have above and then I'm going to modify it.

88
00:05:01.780 --> 00:05:05.560
So I'm going to copy and paste this code from above, paste inside my it.

89
00:05:06.040 --> 00:05:06.430
All right.

90
00:05:06.670 --> 00:05:09.550
So what is going to be different about the situation right now?

91
00:05:09.550 --> 00:05:13.120
We still need to provide a state object and we can still have three jobs in it.

92
00:05:13.270 --> 00:05:18.550
However, the difference in this test is, of course, we don't want any values in our selected organizations

93
00:05:18.550 --> 00:05:18.940
array.

94
00:05:19.180 --> 00:05:21.340
So this is how the page is going to start out.

95
00:05:21.340 --> 00:05:23.890
We're going to start out with the user not choosing anything.

96
00:05:24.100 --> 00:05:26.200
So the data is not passed up to the U.S. yet.

97
00:05:26.200 --> 00:05:31.240
So we're going to go to the default view state, which of course is just an empty array of selected

98
00:05:31.240 --> 00:05:31.870
organisations.

99
00:05:32.290 --> 00:05:37.150
So then we're going to call the exact same getter filter jobs by organisations passing in the state.

100
00:05:37.360 --> 00:05:39.790
So what do we expect to get back from our filter jobs?

101
00:05:40.000 --> 00:05:44.200
Our filter jobs is really just going to be our original complete array of jobs.

102
00:05:44.200 --> 00:05:46.030
In this case, we're going to start out with three.

103
00:05:46.120 --> 00:05:48.520
So we want to get back three, right?

104
00:05:48.520 --> 00:05:52.210
We're still going to use the getter in our component and the getter is still going to be responsible

105
00:05:52.210 --> 00:05:56.440
for filtering the batch of jobs whenever we get a select organization.

106
00:05:56.650 --> 00:06:01.510
But it's okay if we also filter and end up with the exact same number of jobs because the getter is

107
00:06:01.510 --> 00:06:07.000
still a derived piece of data and our derived piece of data is however many jobs we want to show, or

108
00:06:07.160 --> 00:06:09.820
the filtered subset of jobs that fit our criteria.

109
00:06:09.970 --> 00:06:15.010
In this case, we have no jobs that fit the criteria, but that's still a filter operation that still

110
00:06:15.010 --> 00:06:16.600
requires our filter method to run.

111
00:06:17.320 --> 00:06:22.390
So right here, I'm going to copy my Amazon job right here because we want to get back.

112
00:06:23.510 --> 00:06:24.890
An array of those jobs.

113
00:06:25.010 --> 00:06:29.180
And keep in mind, we're still technically reducing the state to something simpler.

114
00:06:29.180 --> 00:06:29.360
Right?

115
00:06:29.370 --> 00:06:33.230
Because in this complex you store state, we have a selected organization's property, right?

116
00:06:33.410 --> 00:06:34.460
We have a jobs property.

117
00:06:34.640 --> 00:06:37.610
What we're getting back from our getter is an array of jobs.

118
00:06:37.730 --> 00:06:40.610
So we're still not returning to the original View Store State.

119
00:06:40.790 --> 00:06:46.520
We're returning a smaller subset, a focused property of this array right here, which is the array

120
00:06:46.520 --> 00:06:50.090
of jobs that have now not been filtered because there's no need to filter.

121
00:06:50.150 --> 00:06:50.480
All right.

122
00:06:50.750 --> 00:06:54.590
So I'm going to save this and let's see what we get.

123
00:06:54.680 --> 00:06:55.780
We're going to get a failure.

124
00:06:55.790 --> 00:07:00.650
If I scroll up, we're going to see, hey, we are getting actually an array of nothing, which is what

125
00:07:00.650 --> 00:07:02.390
we're actually getting in the real world implementation.

126
00:07:02.600 --> 00:07:06.710
But our test says that we should be getting an array of all three organizations, right?

127
00:07:06.890 --> 00:07:08.690
That's exactly the failure that we expect.

128
00:07:08.990 --> 00:07:14.450
So now I can move on down to my original getter implementation right here, filter jobs by organization.

129
00:07:14.660 --> 00:07:17.300
And I'm going to add a simple if statement above my return.

130
00:07:17.600 --> 00:07:18.290
I'm going to say.

131
00:07:19.710 --> 00:07:25.770
If state that's selected organizations, that's going to be my property, my array representing the

132
00:07:25.770 --> 00:07:26.490
user selections.

133
00:07:26.730 --> 00:07:31.680
If the length of that array is zero and there could be several circumstances where this is true, this

134
00:07:31.680 --> 00:07:37.020
can be when the page loads, but also, for example, when the user selects, let's say an organization

135
00:07:37.020 --> 00:07:38.100
and then dyslexic.

136
00:07:38.130 --> 00:07:40.920
We're going to go back to an empty selected organization's array.

137
00:07:41.040 --> 00:07:45.090
And each time the user does that, we're going to rerun this getter and this logic is going to capture

138
00:07:45.090 --> 00:07:46.230
any one of those scenarios.

139
00:07:46.500 --> 00:07:50.100
If there are no selected organizations, there is nothing to filter by.

140
00:07:50.280 --> 00:07:55.860
So my filter jobs by organizations array is simply going to be my original array of jobs which I can

141
00:07:55.860 --> 00:08:01.560
get by talking to the jobs property on my drugstore store state, which I get as my first property or

142
00:08:01.560 --> 00:08:04.080
my first argument rather to this getter method.

143
00:08:04.380 --> 00:08:05.280
So I'm going to save this.

144
00:08:05.430 --> 00:08:06.810
We are going to get a failure here.

145
00:08:08.160 --> 00:08:11.460
Because we're going to see this not fill their jobs, their organizations is going to fail a little

146
00:08:11.460 --> 00:08:12.270
bit in job listings.

147
00:08:12.390 --> 00:08:15.090
We're going to come back to this error in just a second.

148
00:08:15.330 --> 00:08:18.990
However, if I focused on just my getter tests, if I scroll up here.

149
00:08:20.910 --> 00:08:24.300
We should see that that failure is actually gone.

150
00:08:24.390 --> 00:08:30.240
If I scroll up long enough, you can see here in tests unit, store index that test that, yes, this

151
00:08:30.240 --> 00:08:36.360
code has made the logic pass and I can show you in my browser, even though we are getting tests failures

152
00:08:36.360 --> 00:08:38.640
in our test suite if I go back to my browser.

153
00:08:40.000 --> 00:08:45.310
Everything is working just fine, so I can start out by going back to my job results page when the page

154
00:08:45.310 --> 00:08:46.300
loads for the first time.

155
00:08:46.300 --> 00:08:52.780
We do have ten jobs on the right hand side and now when I select an organization like YouTube, we're

156
00:08:52.780 --> 00:08:53.950
going to filter out of YouTube.

157
00:08:54.070 --> 00:08:58.060
When I select another one, like if you can do it, we're going to get YouTube and then you can do it.

158
00:08:58.270 --> 00:09:02.490
When I select one like YouTube, we're going to see only the ones that belong to you.

159
00:09:02.500 --> 00:09:03.130
You can do it.

160
00:09:03.310 --> 00:09:03.880
Here we go.

161
00:09:03.880 --> 00:09:04.810
It's all of you can do it.

162
00:09:04.960 --> 00:09:06.520
And then when I dislike it, you can do it.

163
00:09:06.520 --> 00:09:11.410
We go back to having no selected organizations and we go back to the original implementation.

164
00:09:11.680 --> 00:09:14.680
So the really good news is everything in our browser is working.

165
00:09:14.680 --> 00:09:18.130
This was the original feature that we wanted to show to the user.

166
00:09:18.340 --> 00:09:20.290
So we're making really, really, really good progress.

167
00:09:20.500 --> 00:09:23.760
Of course, we still have a couple of test failures that we need to address in our test.

168
00:09:23.770 --> 00:09:26.140
We we're going to take care of that in the very next lesson.
