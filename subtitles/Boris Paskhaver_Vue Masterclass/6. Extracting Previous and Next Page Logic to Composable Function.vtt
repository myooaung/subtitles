WEBVTT
1
00:00:00.180 --> 00:00:01.080
All right.

2
00:00:01.080 --> 00:00:06.660
So the next thing that I want to do is to move this logic for the previous and next page into its own

3
00:00:06.660 --> 00:00:07.650
composable function.

4
00:00:07.890 --> 00:00:13.530
And just to keep things fresh, let's have a single composable function that's going to return an object

5
00:00:13.530 --> 00:00:15.000
with two reactive properties.

6
00:00:15.210 --> 00:00:19.980
One of those properties will be a reactive object, storing the value for the previous page, and the

7
00:00:19.980 --> 00:00:23.430
other value will be a reactive object during the value for the next page.

8
00:00:23.670 --> 00:00:25.950
I'll show you how all of that's going to work in just a second.

9
00:00:26.250 --> 00:00:31.440
But before we get to working on that composable function, I do want to mention one point, and that

10
00:00:31.440 --> 00:00:34.890
is we're going to keep most of the code here for our composable.

11
00:00:35.160 --> 00:00:40.590
But what I'm going to extract so that it doesn't belong in the body of the composable function is this

12
00:00:40.590 --> 00:00:47.340
line right here of the max ceiling taken on the length of the filter jobs array because I don't want

13
00:00:47.340 --> 00:00:52.620
to move the filter jobs array logic into my new composable function.

14
00:00:52.800 --> 00:00:56.190
I want it to be generally a lot more reusable and flexible.

15
00:00:56.370 --> 00:01:01.830
So if it's simply a function that's going to take a number and for example, incremented by one or decrement

16
00:01:01.830 --> 00:01:02.320
it by one.

17
00:01:02.520 --> 00:01:07.170
That's the kind of logic I can easily see working on many other applications throughout the site.

18
00:01:07.530 --> 00:01:11.400
In comparison, this is kind of specific to what job listings cares about.

19
00:01:11.610 --> 00:01:16.950
Job listings cares about that there is a filter jobs array and that it only wants to have ten jobs on

20
00:01:16.950 --> 00:01:17.400
the page.

21
00:01:17.610 --> 00:01:20.280
And that's what it's using to calculate the max page logic.

22
00:01:20.460 --> 00:01:25.860
This logic is kind of more exclusive to job listings and less concerned about previous page and next

23
00:01:25.860 --> 00:01:26.130
page.

24
00:01:26.460 --> 00:01:28.140
Here's another way I can make that argument.

25
00:01:28.380 --> 00:01:34.830
Imagine you had another component that wanted to also render filter jobs but wanted to render 15 per

26
00:01:34.830 --> 00:01:35.190
page.

27
00:01:35.190 --> 00:01:35.460
Right.

28
00:01:35.730 --> 00:01:40.830
In that scenario, if we hardcoded this logic, including the division by ten into a composable, then

29
00:01:40.830 --> 00:01:42.030
it would be stuck at ten.

30
00:01:42.030 --> 00:01:43.920
There would be no way to customize that.

31
00:01:44.220 --> 00:01:49.770
So in order to extract that and not let the composable function be so specific, I'm going to move this

32
00:01:49.770 --> 00:01:50.460
logic out.

33
00:01:50.790 --> 00:01:56.010
So right here, what I'm going to do is I'm going to declare Max Page and it's going to be a computed

34
00:01:56.010 --> 00:01:58.230
property or a computed function to be more specific.

35
00:01:58.500 --> 00:02:03.780
And it's simply going to calculate the max page based on the relationship that this component cares

36
00:02:03.780 --> 00:02:04.020
about.

37
00:02:04.470 --> 00:02:06.690
So we're going to copy that logic from below.

38
00:02:07.020 --> 00:02:11.430
And this is pretty simple because we have our filter jobs array right here.

39
00:02:11.820 --> 00:02:17.100
And so we're getting the value of the actual ray and it's length divided by ten and we're storing that

40
00:02:17.100 --> 00:02:18.150
in a computed function.

41
00:02:18.150 --> 00:02:23.130
So whenever our filter jobs rate changes, so will this function, it's going to rerun.

42
00:02:23.490 --> 00:02:28.680
Basically, the key takeaway here is that there's nothing specific to this max page logic that is directly

43
00:02:28.680 --> 00:02:30.180
related to next page here.

44
00:02:30.490 --> 00:02:34.470
And so once again, Max Page is not intrinsically related to next page.

45
00:02:34.650 --> 00:02:37.170
Next page needs something called Max Page.

46
00:02:37.170 --> 00:02:39.690
Determine whether there is room to go to next page.

47
00:02:39.870 --> 00:02:45.540
But the specific logic of what that calculation or relationship is is exclusive to just job listings

48
00:02:45.540 --> 00:02:45.900
component.

49
00:02:46.350 --> 00:02:46.620
All right.

50
00:02:46.620 --> 00:02:49.250
It'll kind of come together when we make our composable function.

51
00:02:49.260 --> 00:02:50.250
So let's do that right now.

52
00:02:50.610 --> 00:02:59.100
So I'm going to whip open my file explorer and in my source composable folder, I'm going to create

53
00:02:59.100 --> 00:03:03.030
my new file called Use Previous and Next Pages.

54
00:03:04.940 --> 00:03:05.390
Doctor.

55
00:03:05.390 --> 00:03:08.870
Yes, and of course, I can maybe split this into two composable functions.

56
00:03:08.870 --> 00:03:09.600
Totally fine.

57
00:03:09.620 --> 00:03:12.830
I just want to try a little bit of a different approach to keep things fresh.

58
00:03:13.190 --> 00:03:16.610
So in here, I'm going to define my arrow function.

59
00:03:16.610 --> 00:03:19.730
I'm going to call it use previous and next pages.

60
00:03:20.390 --> 00:03:23.810
And for now, we won't have any parameters, but we'll add some momentarily.

61
00:03:24.080 --> 00:03:28.190
And very quickly, let's remember to export default that new function.

62
00:03:28.790 --> 00:03:33.830
So what I'm going to do in the body of this function is basically copy all the logic I have right here.

63
00:03:33.980 --> 00:03:39.860
So I'm just going to copy and paste everything I have from line 62 to 72, our declaration of previous

64
00:03:39.860 --> 00:03:43.670
page and next page into the body of this new composable function.

65
00:03:44.090 --> 00:03:44.330
All right.

66
00:03:44.330 --> 00:03:46.700
So we're immediately going to need some things in order for this to work.

67
00:03:46.730 --> 00:03:49.130
First up, we're going to need to import our computed function.

68
00:03:50.890 --> 00:03:52.330
And that is going to come from view.

69
00:03:52.870 --> 00:03:53.220
All right.

70
00:03:53.230 --> 00:03:54.160
That takes care of that.

71
00:03:54.490 --> 00:03:56.620
The next thing we're going to worry about is here.

72
00:03:56.620 --> 00:03:58.210
We're depending on current page.

73
00:03:58.210 --> 00:03:58.870
Current pages.

74
00:03:58.870 --> 00:04:04.180
A reminder is calculated from our composable function that we defined in the previous lesson.

75
00:04:04.450 --> 00:04:08.140
So how do I get access to the current page reactive object in this composable?

76
00:04:08.290 --> 00:04:13.600
I'm going to need to pass it in as a parameter so we can have a composable function like this that is

77
00:04:13.600 --> 00:04:15.400
going to return reactive objects.

78
00:04:15.550 --> 00:04:18.730
But remember, our functions can also accept reactive objects.

79
00:04:19.000 --> 00:04:25.450
So let's say that our use previous and next pages composable function is going to receive a parameter

80
00:04:25.930 --> 00:04:30.160
called current page, and current page is going to be a reactive object and thus it's going to have

81
00:04:30.160 --> 00:04:31.090
a value property.

82
00:04:31.180 --> 00:04:34.240
And all of the logic in this section will continue to hold true.

83
00:04:35.170 --> 00:04:35.530
All right.

84
00:04:35.890 --> 00:04:38.020
Now this looks good to me.

85
00:04:38.200 --> 00:04:39.430
Let's move on to next page.

86
00:04:39.640 --> 00:04:46.600
For next page, we were relying on Max Page and having that former relationship or that former formula

87
00:04:46.600 --> 00:04:49.090
of dividing, filter, jobs, etc., by ten.

88
00:04:49.090 --> 00:04:49.360
Right.

89
00:04:49.570 --> 00:04:53.470
We no longer care about this, but we're going to need something called Max Page in order to do this

90
00:04:53.470 --> 00:04:54.550
comparison right here.

91
00:04:54.880 --> 00:04:57.970
So what I'm going to do is once again provide Max Page.

92
00:04:59.120 --> 00:05:00.200
As a parameter.

93
00:05:01.110 --> 00:05:03.330
And that allows me to delete this right here.

94
00:05:04.020 --> 00:05:10.170
The only caveat here is that remember or not remember, but realize that I intend Max Page to be not

95
00:05:10.170 --> 00:05:13.380
just a number but a reactive object storing a number.

96
00:05:13.500 --> 00:05:15.850
We can see that right here from line 61.

97
00:05:15.870 --> 00:05:19.440
This is going to be the value we pass in as an argument to the new composable.

98
00:05:19.650 --> 00:05:23.310
So Max Page is not just a number, it's a reactive object that stores a number.

99
00:05:23.580 --> 00:05:27.800
So because in passing in a reactive object, I can't simply do a max page right here.

100
00:05:27.810 --> 00:05:31.860
I have to do max page dot value, right for next page.

101
00:05:31.860 --> 00:05:32.070
Right.

102
00:05:32.100 --> 00:05:36.660
Here we can keep next page because on the previous line I am getting it from the current pages value

103
00:05:36.660 --> 00:05:37.410
property instead.

104
00:05:37.410 --> 00:05:41.880
So this will be a number and I'm going to compare a number to a number to determine whether there is

105
00:05:41.880 --> 00:05:44.550
a next page or whether there isn't, which is marked by undefined.

106
00:05:44.760 --> 00:05:45.060
All right.

107
00:05:45.390 --> 00:05:50.550
So now we have two computed function calls that are returning to reactive objects, but we're not returning

108
00:05:50.550 --> 00:05:51.810
anything from the composable.

109
00:05:52.110 --> 00:05:58.050
So what I'm going to return is going to be a plain JavaScript object with those two properties, both

110
00:05:58.050 --> 00:05:59.760
of which are storing my reactive objects.

111
00:06:00.000 --> 00:06:03.630
So right here, I'm going to do previous page and next page.

112
00:06:04.380 --> 00:06:04.740
All right.

113
00:06:04.920 --> 00:06:08.820
It's very important to note here that I am not returning a reactive object.

114
00:06:09.040 --> 00:06:12.150
I'm returning a regular object with two reactive properties.

115
00:06:12.390 --> 00:06:18.570
Thus, if I de structure previous page and next page in my job listings component, I am already going

116
00:06:18.570 --> 00:06:19.950
to get reactive objects.

117
00:06:20.190 --> 00:06:22.590
Thus I do not need to use two refs.

118
00:06:23.160 --> 00:06:23.580
All right.

119
00:06:23.640 --> 00:06:27.930
This is not a reactive object whose properties I need to this structure and make reactive.

120
00:06:28.080 --> 00:06:29.080
It is the opposite.

121
00:06:29.100 --> 00:06:33.350
It is a plane JavaScript object, but it's individual to properties.

122
00:06:33.390 --> 00:06:36.270
Previous page and next page are holding reactive objects.

123
00:06:36.720 --> 00:06:40.160
All right, so with that written out, we can go ahead and import this.

124
00:06:40.160 --> 00:06:42.360
So right here, I'm going to import.

125
00:06:44.550 --> 00:06:47.160
Use previous and next pages.

126
00:06:48.510 --> 00:06:50.340
That's going to come from the source directory.

127
00:06:50.430 --> 00:06:53.470
Composable use at previous and next pages.

128
00:06:53.850 --> 00:06:58.770
And right here, let's begin once again by commenting out everything we previously had right here.

129
00:06:58.770 --> 00:06:59.970
Previous page in next page.

130
00:07:00.210 --> 00:07:00.600
All right.

131
00:07:01.140 --> 00:07:02.430
And what are we going to do?

132
00:07:02.850 --> 00:07:06.770
We're going to invoke our used previous and next pages composable function.

133
00:07:06.780 --> 00:07:11.790
It takes two arguments current page and max page, both of which are reactive objects.

134
00:07:11.790 --> 00:07:12.060
Right.

135
00:07:12.330 --> 00:07:17.070
So for current page, we have that object returned from the use current page composable.

136
00:07:17.310 --> 00:07:19.710
So we're using the return value of one composable.

137
00:07:19.950 --> 00:07:24.810
Remember, use current page, returns a reactive object as created by the computed function.

138
00:07:24.960 --> 00:07:30.180
So that makes it a perfect argument to pass into here because it's going to have a value property.

139
00:07:30.510 --> 00:07:35.280
So in other words, when we invoke use previous next pages and we provide current page from this component

140
00:07:35.430 --> 00:07:37.080
that is going to be a reactive object.

141
00:07:37.560 --> 00:07:40.530
And then the second argument that is expected here is Max Page.

142
00:07:40.710 --> 00:07:42.210
Max Page's on the line above.

143
00:07:42.210 --> 00:07:44.760
It is also a reactive object coming from computed.

144
00:07:44.970 --> 00:07:47.790
So we can fit it in exactly as is as well.

145
00:07:48.300 --> 00:07:48.540
All right.

146
00:07:48.540 --> 00:07:52.350
This is one of the most common mistakes that a lot of people make when working with the composition

147
00:07:52.350 --> 00:07:52.770
API.

148
00:07:53.040 --> 00:07:54.150
They forget that.

149
00:07:54.780 --> 00:07:56.550
They forget the relationship in both directions.

150
00:07:56.550 --> 00:08:01.230
They forget that they have a reactive object that is a value that needs a value property that needs

151
00:08:01.230 --> 00:08:01.740
to be accessed.

152
00:08:02.010 --> 00:08:06.420
So they sometimes think they have a reactive object when what they have is a plain JavaScript value,

153
00:08:06.600 --> 00:08:11.250
or alternatively they think they have a JavaScript value and what they have is a reactive object, right?

154
00:08:11.580 --> 00:08:16.440
In this case, our composable is dependent on getting to reactive objects.

155
00:08:16.800 --> 00:08:20.160
And because they're reactive objects from view, they're going to have the value property.

156
00:08:20.250 --> 00:08:25.230
And that's exactly what we have being returned by use current page and computed right here.

157
00:08:26.040 --> 00:08:26.370
All right.

158
00:08:26.640 --> 00:08:28.860
So with that, we are able to do this.

159
00:08:28.860 --> 00:08:35.310
And then keep in mind that what we're needing from here is these two properties, previous page and

160
00:08:35.310 --> 00:08:40.450
next page, because that's what we are returning here in the return object from the setup method.

161
00:08:40.770 --> 00:08:44.640
So in order for the template to have previous page and next page, I'm going to just structure these

162
00:08:44.640 --> 00:08:45.630
two return properties.

163
00:08:46.020 --> 00:08:51.300
So right here I'm going to, to structure previous page and next page.

164
00:08:52.380 --> 00:08:58.530
And once again, because we are getting them already as reactive properties, these are already computed

165
00:08:59.100 --> 00:09:03.510
function calls, they're already wrapped in that we do not need to pass this object into to Raf's.

166
00:09:03.720 --> 00:09:09.570
These are already going to be reactive properties and thus they're going to update automatically when

167
00:09:09.570 --> 00:09:12.810
the entire combination of changes occurs.

168
00:09:13.080 --> 00:09:19.500
So once again, for example, when the use current page composable function reruns, it will in turn

169
00:09:19.500 --> 00:09:21.950
trigger a change to this function to rerun.

170
00:09:21.960 --> 00:09:27.330
Same thing if Max Page changes, which will of course force all of this to rerun re execute their own

171
00:09:27.330 --> 00:09:32.850
computed functions which are keeping track of those respective properties on the current page, right,

172
00:09:32.850 --> 00:09:33.870
and the max page as well.

173
00:09:34.140 --> 00:09:38.820
And whenever those change, the return values here will be different and our template will update accordingly.

174
00:09:39.120 --> 00:09:44.550
The key takeaway here is everything that we had isolated to these manual computed function calls that

175
00:09:44.550 --> 00:09:46.050
were in the job listings component.

176
00:09:46.170 --> 00:09:52.260
We still have all the benefits of that, but we've now isolated it in smaller, more lightweight, reusable,

177
00:09:52.260 --> 00:09:54.870
separate functions in separate files that we can test.

178
00:09:55.200 --> 00:10:00.990
So with that, we can go ahead and remove this logic right here and now that's going to be left is going

179
00:10:00.990 --> 00:10:02.070
to be displayed a job.

180
00:10:02.070 --> 00:10:02.970
So I'm going to save that.

181
00:10:02.970 --> 00:10:05.070
Let's see if there's anything we can remove from up here.

182
00:10:05.310 --> 00:10:07.770
It doesn't look like there is everything is still being used.

183
00:10:08.040 --> 00:10:12.810
So with that, you can sort of immediately start to tell how our setup method is starting to become

184
00:10:12.960 --> 00:10:17.070
smaller and how its individual responsibilities are isolated away.

185
00:10:17.250 --> 00:10:22.380
And it's really easy for us to open up that composable function, see what that thing is doing, check

186
00:10:22.380 --> 00:10:25.320
out the test for that and see how that is supposed to work.

187
00:10:25.710 --> 00:10:30.030
Well, while job listings is simply saying, I'm going to talk to these things and get some reactive

188
00:10:30.030 --> 00:10:36.510
values from them and simply use them as either values in my template or as values to pass to other composable

189
00:10:36.630 --> 00:10:39.060
that themselves are going to give me more reactive values.

190
00:10:39.510 --> 00:10:44.730
So we've kind of extracted a lot of the method logic from setup into smaller functions and that is the

191
00:10:44.730 --> 00:10:46.710
whole benefit of the composition API.

192
00:10:47.130 --> 00:10:47.460
All right.

193
00:10:47.580 --> 00:10:49.080
That's all there is to cover in this lesson.

194
00:10:49.080 --> 00:10:50.610
So I will see you in the next one.
