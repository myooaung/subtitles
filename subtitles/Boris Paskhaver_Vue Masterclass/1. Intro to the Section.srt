1
00:00:00,150 --> 00:00:01,140
All right.

2
00:00:01,140 --> 00:00:03,800
So welcome to the next section of the course.

3
00:00:03,840 --> 00:00:08,220
This section will continue our exploration of the View X Library.

4
00:00:08,580 --> 00:00:09,660
So let's get right to it.

5
00:00:09,900 --> 00:00:15,420
In this section, we don't have a new user story since most of our work is going to be pretty technical

6
00:00:15,420 --> 00:00:17,190
as far as configuring view.

7
00:00:17,640 --> 00:00:22,500
So I do want to give you a general sense of what we're trying to accomplish here and the new concepts

8
00:00:22,500 --> 00:00:23,490
that we're going to introduce.

9
00:00:23,850 --> 00:00:28,620
So so far we explored the idea of Store State and we explored the idea of mutations.

10
00:00:28,830 --> 00:00:33,120
A mutation is a synchronous update that updates the stores state.

11
00:00:33,420 --> 00:00:36,930
So when I say synchronous, what I'm saying is that it has to be immediate.

12
00:00:36,940 --> 00:00:41,160
It has to be plain JavaScript code that doesn't take an amount of time to run.

13
00:00:41,170 --> 00:00:46,290
So a mutation can absolutely set, for example, an object property to be a new value.

14
00:00:46,410 --> 00:00:50,580
That is the kind of instantaneous operation that is synchronous that we are talking about.

15
00:00:50,940 --> 00:00:55,680
Now, the question I have for you is how do we use Vue ex to handle asynchronous operations?

16
00:00:55,950 --> 00:01:01,620
For example, what if we want to reach out to an API, get some data, and then once we receive that

17
00:01:01,620 --> 00:01:04,200
data, store it in our view X Store.

18
00:01:04,530 --> 00:01:09,570
Well, we cannot actually have asynchronous events happen in a mutation.

19
00:01:09,570 --> 00:01:11,160
A mutation has to be synchronous.

20
00:01:11,460 --> 00:01:17,040
So in order to accomplish anything asynchronous, we have to introduce a new idea called actions to

21
00:01:17,040 --> 00:01:17,910
our View Store.

22
00:01:18,120 --> 00:01:23,640
And action is going to be a method that commits a mutation, which sounds kind of silly because it's

23
00:01:23,640 --> 00:01:27,720
just a method that commits a mutation that does something that we already know how to do.

24
00:01:27,750 --> 00:01:28,530
What's the point?

25
00:01:28,830 --> 00:01:33,630
Well, the general idea is that actions allow for asynchronous operations.

26
00:01:33,810 --> 00:01:35,880
So you're typically going to do something.

27
00:01:36,000 --> 00:01:42,120
And once that something completes, that's when you can tell the method to commit another mutation to

28
00:01:42,120 --> 00:01:46,590
the store that will actually receive the data and do something with it in the store state.

29
00:01:46,890 --> 00:01:51,840
So going back to our original example, let's say we want to make an API call, we want to fetch data

30
00:01:52,140 --> 00:01:54,960
in the action which will learn how to write in this section.

31
00:01:55,140 --> 00:01:59,520
That's where we make an API call and we can await it until we get the data.

32
00:01:59,820 --> 00:02:03,360
Then once we have the data, we can commit a mutation.

33
00:02:03,480 --> 00:02:07,870
We can issue a change to of the store that says, Hey, I now have this data already.

34
00:02:07,980 --> 00:02:10,440
It's no longer an asynchronous operation.

35
00:02:10,440 --> 00:02:11,760
I already have the data fetched.

36
00:02:12,000 --> 00:02:14,460
Take this data and update the stores state.

37
00:02:14,700 --> 00:02:20,580
So in summary, an action is a different construct that allows us to deal with asynchronous operations,

38
00:02:20,580 --> 00:02:23,550
and that's how we're going to learn about in this section.

39
00:02:23,790 --> 00:02:25,920
So what's the actual problem we're going to solve?

40
00:02:25,920 --> 00:02:27,900
What's the refactor we're going to make to an app?

41
00:02:28,620 --> 00:02:35,100
Well, currently our job listings component makes the request to our JSON server to get the job listings

42
00:02:35,100 --> 00:02:36,750
array of 100 jobs.

43
00:02:36,750 --> 00:02:37,020
Right.

44
00:02:37,350 --> 00:02:43,020
What we're going to do is we're going to move our jobs array from being stored in the local data of

45
00:02:43,020 --> 00:02:46,350
the job listings component to being stored in our view X Store.

46
00:02:46,830 --> 00:02:47,130
Right.

47
00:02:47,370 --> 00:02:52,380
So what we're going to do is we're going to actually isolate the API fetching logic to a separate tested

48
00:02:52,380 --> 00:02:55,020
helper function that's going to reach out to the JSON server.

49
00:02:55,380 --> 00:03:02,160
And then we're going to talk about how we can write a more an action rather that is going to use that

50
00:03:02,160 --> 00:03:04,790
API fetch function to get our jobs array.

51
00:03:04,800 --> 00:03:10,110
And once it receives the data, it's going to commit a mutation to save that to our store.

52
00:03:10,260 --> 00:03:14,850
And once the store updates that change is going to reflect in our job listings component.

53
00:03:15,120 --> 00:03:17,730
I know this is a lot to take in and it can be confusing.

54
00:03:17,910 --> 00:03:23,070
The short story here is that we're going to move our data fetching and we're going to move our jobs

55
00:03:23,070 --> 00:03:28,050
away from being stored locally in job listings to being stored more globally in the view store.

56
00:03:28,200 --> 00:03:31,980
And that change is going to allow us to introduce all of the concepts that we care about.

57
00:03:32,280 --> 00:03:32,610
All right.

58
00:03:32,610 --> 00:03:33,870
So lots of fun up ahead.

59
00:03:33,870 --> 00:03:35,610
And I will see you in the next lesson.
