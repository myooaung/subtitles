WEBVTT
1
00:00:00.660 --> 00:00:01.310
Okay.

2
00:00:01.320 --> 00:00:07.050
So now we have a single mutation that can overwrite a piece of our view, text or state.

3
00:00:07.320 --> 00:00:11.670
And so in this lesson, we're going to see how we can run or execute that mutation.

4
00:00:12.000 --> 00:00:16.920
So what I'd like to show you is a before and after we're going to take a look at our store state before

5
00:00:17.100 --> 00:00:19.350
we run the mutation and afterwards.

6
00:00:19.500 --> 00:00:24.720
And if we've set up everything correctly, then we should see the value of the is logged in property

7
00:00:24.720 --> 00:00:26.280
change from false to true.

8
00:00:26.730 --> 00:00:30.030
So right below my store I'm going to apply a console.log.

9
00:00:30.630 --> 00:00:35.640
And of course we have our store right here and this is a complex store object with lots of properties

10
00:00:35.640 --> 00:00:36.240
and methods.

11
00:00:36.240 --> 00:00:40.800
So it's very important that you don't just try to access is logged in on this store.

12
00:00:41.010 --> 00:00:44.610
You actually need to go into a nested property here called state.

13
00:00:45.120 --> 00:00:50.940
So this state object holds all of our store state and of course we have a single property on that state

14
00:00:50.970 --> 00:00:53.790
object and it is is logged in.

15
00:00:55.110 --> 00:00:55.470
Okay.

16
00:00:55.800 --> 00:00:59.040
Now I want to run or execute my mutation.

17
00:00:59.220 --> 00:01:03.030
And the technical word for this in the view ecosystem is commit.

18
00:01:03.390 --> 00:01:09.360
Commit is also the name of the method that I have to invoke on my store object to run a mutation.

19
00:01:09.600 --> 00:01:15.780
So right here on my store object, I'll invoke the commit method and commit takes a single argument

20
00:01:15.780 --> 00:01:20.280
representing the mutation that I want to run as a string.

21
00:01:20.550 --> 00:01:24.720
So in this case I'm going to pass in log in, underscore user.

22
00:01:25.020 --> 00:01:29.790
It's very important that you type this out exactly as we called it right here.

23
00:01:29.910 --> 00:01:30.210
Right.

24
00:01:30.360 --> 00:01:33.060
And this is sort of the entire point of mutations.

25
00:01:33.270 --> 00:01:39.090
We have limited the set of operations or ways in which we can modify the store state.

26
00:01:39.360 --> 00:01:44.790
We have told View X that the only way that we can change the store state right now is by running a log

27
00:01:44.790 --> 00:01:45.840
in user mutation.

28
00:01:46.050 --> 00:01:52.110
Of course, later on we can add many different mutations, but the fact remains that mutations are the

29
00:01:52.500 --> 00:01:57.660
desired way and really the only way that we should be modifying the view store state.

30
00:01:58.020 --> 00:02:02.100
So commit is really the way that you should be modifying the store state.

31
00:02:02.100 --> 00:02:05.820
You should never be reaching into state and manually adjusting a property.

32
00:02:06.000 --> 00:02:12.000
You should always be issuing a message or in this case, a method, a mutation to the store in order

33
00:02:12.000 --> 00:02:13.890
to get it to change its internal state.

34
00:02:14.280 --> 00:02:14.670
All right.

35
00:02:14.940 --> 00:02:19.050
So we're going to tell the store to update its state using the log in user mutation.

36
00:02:19.410 --> 00:02:20.580
So it's going to run this code.

37
00:02:20.670 --> 00:02:26.070
And of course, after this, we expect that if we console.log stored that state that is logged in,

38
00:02:26.250 --> 00:02:29.250
we should see it be the opposite value of true.

39
00:02:29.580 --> 00:02:31.260
So now if I go to my browser.

40
00:02:32.670 --> 00:02:34.830
And I open up my console here.

41
00:02:34.830 --> 00:02:37.380
We can see we have the initial starting value of false.

42
00:02:37.560 --> 00:02:43.980
Then in between we ran that mutation using the commit method and we swapped the value using true.

43
00:02:44.410 --> 00:02:49.530
And let me just show you what's going to happen if we accidentally type in a run mutation name.

44
00:02:49.530 --> 00:02:52.290
So let's say I actually misspell this and say log in use.

45
00:02:52.590 --> 00:02:58.860
If I go to my browser, we're going to see a false and we can see at the end that false has also remained

46
00:02:59.010 --> 00:02:59.940
the original value.

47
00:03:00.180 --> 00:03:04.290
We can see View X is going to tell us unknown mutation type log in use.

48
00:03:04.530 --> 00:03:09.300
So that's one of the benefits is it's going to keep track of the existing mutations that we've registered

49
00:03:09.420 --> 00:03:14.200
and tell us, hey, this is not a valid way that you've allowed to update the store.

50
00:03:14.250 --> 00:03:16.410
Please give me a valid mutation.

51
00:03:16.680 --> 00:03:17.040
All right.

52
00:03:17.250 --> 00:03:20.370
So with that, we can delete all of these lines.

53
00:03:20.370 --> 00:03:21.260
We no longer need them.

54
00:03:21.270 --> 00:03:23.490
That is just the key takeaway from this lesson.

55
00:03:23.610 --> 00:03:29.700
To issue a mutation to the store in order to update its store state, we call the commit method and

56
00:03:29.700 --> 00:03:35.460
we give it a string with the name of a valid mutation that we've defined in our mutations object.

57
00:03:35.580 --> 00:03:38.520
When configuring the create store function.

58
00:03:38.610 --> 00:03:38.930
All right.

59
00:03:38.940 --> 00:03:41.040
Or the object that we passed to it to be more specific.

60
00:03:41.410 --> 00:03:41.680
All right.

61
00:03:41.700 --> 00:03:43.200
That's all there is to cover in this lesson.

62
00:03:43.200 --> 00:03:44.640
So I will see next one.
