1
00:00:00,270 --> 00:00:04,770
In this lesson, we'll add two more tests for our headline component.

2
00:00:05,100 --> 00:00:11,010
Our first test will verify that the component is correctly interacting with the set interrupt function.

3
00:00:11,310 --> 00:00:18,150
And our second test will verify that after one interval we expect the text to have changed from the

4
00:00:18,150 --> 00:00:23,400
original value of build for everyone to the new value of create for everyone.

5
00:00:23,790 --> 00:00:25,650
So let's begin by writing our new test.

6
00:00:25,950 --> 00:00:33,030
Here, I'll declare my ID function call and I'll say it changes action verb at a consistent interval.

7
00:00:34,050 --> 00:00:39,990
So this is more about confirming the interaction between the headline component and the set interval

8
00:00:39,990 --> 00:00:44,640
function without worrying about the effect that that has on my actual template.

9
00:00:44,970 --> 00:00:48,200
So as always, will copy these two methods from the previous test.

10
00:00:48,210 --> 00:00:54,840
We want to invoke the use fake timer's method to replace JavaScript timer functions with just mock functions.

11
00:00:55,170 --> 00:01:00,990
And then we want to return everything back to the original implementation by using the use real timers

12
00:01:00,990 --> 00:01:02,700
method at the very end of our test.

13
00:01:03,390 --> 00:01:06,180
And in between of course, is where we'll write our assertions.

14
00:01:06,600 --> 00:01:09,870
So what I need to do in this test is mount my headline component.

15
00:01:10,470 --> 00:01:15,210
And this time around, I'm not actually going to assign it to any constant or any variable because I

16
00:01:15,210 --> 00:01:17,520
don't need that wrapper object for anything.

17
00:01:17,820 --> 00:01:21,750
So what do we want to test here if we're not going to use the specifics of the headline component?

18
00:01:22,110 --> 00:01:28,560
All I really want to test is that at some moment during my mounting of the component, I expect the

19
00:01:28,560 --> 00:01:34,320
set interval function to have been interacted with, to have been invoked or called by my component.

20
00:01:34,680 --> 00:01:39,120
The reason I expect that behavior to happen, of course, is because we have this created lifecycle

21
00:01:39,120 --> 00:01:42,060
hook which will invoke the change title method.

22
00:01:43,140 --> 00:01:48,300
And the change title method will interact with the set interval JavaScript function and pass it.

23
00:01:48,660 --> 00:01:53,400
This these arguments of a function and a add duration in those things.

24
00:01:53,580 --> 00:01:59,940
And all I really want to check at the most basic level is at some point the component has called set

25
00:01:59,940 --> 00:02:00,340
interval.

26
00:02:00,360 --> 00:02:01,830
That's really all I want to test.

27
00:02:02,130 --> 00:02:06,390
Now, you may recall from the previous lesson that when we played around with our just mock function,

28
00:02:06,840 --> 00:02:13,110
we were able to call an assertion like to have been called on this mock function because the mock function

29
00:02:13,110 --> 00:02:16,590
tracks how it has been invoked, how it has been interacted with.

30
00:02:16,950 --> 00:02:18,750
Well, the same concept applies here.

31
00:02:18,930 --> 00:02:24,690
The only difference, of course, is that when we use fake timers, just will automatically create those

32
00:02:24,690 --> 00:02:28,470
mock functions for these built in JavaScript functions.

33
00:02:28,770 --> 00:02:36,270
So here I can say expect set interval, which at this juncture due to my use of the use fake timers

34
00:02:36,270 --> 00:02:42,210
method should not be the original set interval JavaScript function, but its mock function replacement.

35
00:02:42,210 --> 00:02:44,220
It's substitute at this point in the test.

36
00:02:44,490 --> 00:02:50,100
And given that I mounted the component on the line before, if everything ran correctly and the component

37
00:02:50,100 --> 00:02:55,320
ran through this code, then I should expect that it ran through this change title method and thus I

38
00:02:55,320 --> 00:03:00,720
should expect set interval to have been invoked at this point by now at least once.

39
00:03:00,720 --> 00:03:01,020
Right.

40
00:03:01,350 --> 00:03:05,190
So I can say here expect set interval to have been called.

41
00:03:05,400 --> 00:03:10,560
This is the same assertion we used earlier when we established a base mock function two lessons ago,

42
00:03:10,650 --> 00:03:16,350
but now we're using it on a mock function that just will automatically set up for us.

43
00:03:16,650 --> 00:03:20,610
So you'll notice when I run this test, our test will pass.

44
00:03:20,610 --> 00:03:23,160
We're going to see changes action verb at a consistent interval.

45
00:03:23,400 --> 00:03:28,470
However, notice that if I comment out the mounting of the headline component now our test will fail

46
00:03:28,620 --> 00:03:34,770
because the test will see no use of set interval anywhere, not in its test body, not in the components

47
00:03:34,770 --> 00:03:35,130
body.

48
00:03:35,250 --> 00:03:36,120
It doesn't see that.

49
00:03:36,120 --> 00:03:41,100
So it says, you told me that it was going to be called at least once, but I actually received zero

50
00:03:41,100 --> 00:03:41,670
calls.

51
00:03:42,060 --> 00:03:45,660
Our usages of or invocations of the set interval function.

52
00:03:45,750 --> 00:03:46,080
Right.

53
00:03:46,320 --> 00:03:50,640
So that's why we need the mounting of the headline component in order to trigger that set interval to

54
00:03:50,640 --> 00:03:51,000
be hit.

55
00:03:51,210 --> 00:03:55,410
But we don't actually need to save this to a constant because we're not doing anything with that mounted

56
00:03:55,410 --> 00:03:55,890
component.

57
00:03:56,040 --> 00:04:01,680
It just a bit of logic that needs to run in order for us to test that the component in its in its mounting

58
00:04:01,770 --> 00:04:04,650
and its instantiation is interacting with set interval.

59
00:04:05,130 --> 00:04:05,490
Okay.

60
00:04:06,180 --> 00:04:07,230
So that was a tricky test.

61
00:04:07,500 --> 00:04:10,350
And the next one's going to be even more trickier, but we're almost there.

62
00:04:10,650 --> 00:04:12,570
So let's go ahead and write our next test.

63
00:04:12,570 --> 00:04:14,930
And here's where I actually want to test that.

64
00:04:14,940 --> 00:04:19,170
After a given interval passes, we should see new text appear in our template.

65
00:04:19,470 --> 00:04:25,290
So I'm going to say it swaps action verb after first interval.

66
00:04:25,590 --> 00:04:28,920
So I'm just going to test one interval because obviously we can go on forever.

67
00:04:28,920 --> 00:04:33,800
The component is going to keep changing the action text every 3 seconds.

68
00:04:33,810 --> 00:04:38,970
I just want to check one occurrence to make sure that it starts off one way and then in the next interval

69
00:04:38,970 --> 00:04:39,750
it is something else.

70
00:04:39,750 --> 00:04:43,320
And that to me gives me the confidence that the component is doing what it's supposed to do.

71
00:04:43,650 --> 00:04:47,910
So as always will copy our use fake timer's method call.

72
00:04:47,910 --> 00:04:51,240
And then at the very end we will use our use real timer's method call.

73
00:04:51,990 --> 00:04:54,990
And then of course, we also want to manage a component.

74
00:04:55,350 --> 00:05:00,600
So I'm going to copy this line right here where we are mounting it and assigning it to our wrapper constant.

75
00:05:00,870 --> 00:05:06,390
And then if you think about it, what we want to do is we later on want to find our action phrase,

76
00:05:06,390 --> 00:05:11,310
and that's going to be the text and we expect it to be create for everyone after an interval.

77
00:05:11,320 --> 00:05:13,800
So what I'm going to do is copy this action phrase.

78
00:05:15,290 --> 00:05:16,280
Put it right down below.

79
00:05:16,430 --> 00:05:18,470
And let's just write our assertion right now.

80
00:05:18,470 --> 00:05:21,680
Even though it will fail, we will talk about it and why it's failing.

81
00:05:21,950 --> 00:05:29,510
So at some point we do expect our action phrase node and its text method, which returns the inner text

82
00:05:29,720 --> 00:05:30,410
to be.

83
00:05:32,040 --> 00:05:36,060
The text create for everyone instead of the starting one of Build for Everyone.

84
00:05:36,480 --> 00:05:41,610
So you'll notice this test is identical to our very first test because we're not actually forcing the

85
00:05:41,610 --> 00:05:43,590
component to move forward one interval.

86
00:05:43,590 --> 00:05:48,270
We're basically just mounting it and we're looking at its initial state, what it looks like when it's

87
00:05:48,270 --> 00:05:49,260
up for the first time.

88
00:05:49,440 --> 00:05:54,600
And of course, the test tells us that it's actually receiving a string for of a build for everyone,

89
00:05:54,750 --> 00:05:59,640
which is exactly what we expect, because build is the very first action verb that we start out with

90
00:05:59,640 --> 00:06:02,130
right here in our data property.

91
00:06:02,340 --> 00:06:05,010
So in other words, we are correctly launching the component.

92
00:06:05,160 --> 00:06:11,610
We do have the right assertion in mind, but because we have mocked out the actual implementation of

93
00:06:11,610 --> 00:06:18,210
set interval using the use fake timer's method, we no longer actually have a legitimate interval running

94
00:06:18,210 --> 00:06:24,060
right because this is not technically in the component anymore, just has intercepted this call and

95
00:06:24,060 --> 00:06:26,880
replaced that interval with its own mock function.

96
00:06:27,180 --> 00:06:34,230
So what we need to do is to simulate the idea of that interval passing of that timer running, right?

97
00:06:34,470 --> 00:06:39,780
And so there's a function or a method that we can call on just and I'm going to do that right after

98
00:06:39,780 --> 00:06:40,230
mounting.

99
00:06:40,410 --> 00:06:44,640
And it is called run only pending timers.

100
00:06:45,740 --> 00:06:51,620
So just like the name suggests, it runs the timers, it runs something in your application that is

101
00:06:51,620 --> 00:06:53,270
dependent on the passage of time.

102
00:06:53,270 --> 00:06:59,720
It simulates the same idea as an actual 3/2 interval happening in the real world in our headline component.

103
00:06:59,990 --> 00:07:04,460
So you can almost think of this method as saying, move forward to the next interval, move forward

104
00:07:04,460 --> 00:07:08,090
to that next moment in time, as if an interval has passed.

105
00:07:08,420 --> 00:07:14,180
Keeping in mind, of course, that we're not using a real interval because Gest has faked it out, you

106
00:07:14,180 --> 00:07:16,010
know, intercepted it and substituted it.

107
00:07:16,220 --> 00:07:21,290
However, because we have a pretty flexible, powerful object that can play the role of anything, we

108
00:07:21,290 --> 00:07:27,050
can also get it to simulate the idea of a passage of time, of an actual interval gone by.

109
00:07:27,440 --> 00:07:34,160
So when I run this, we're actually going to see that the test still does not pass and we're going to

110
00:07:34,160 --> 00:07:35,360
talk a little bit about why.

111
00:07:35,390 --> 00:07:42,230
So we're still seeing the original text of build for everyone in our action phrase element, which as

112
00:07:42,230 --> 00:07:44,480
a reminder, is this H one right here.

113
00:07:44,480 --> 00:07:46,210
That's where we have the data test, actually.

114
00:07:46,640 --> 00:07:52,400
So I want to show you a little bit about the internals of our wrapper component, which is really our

115
00:07:52,400 --> 00:07:53,210
headline component.

116
00:07:53,210 --> 00:07:58,430
And this is not something you have to copy, but it is it is a little bit of a cool feature here in

117
00:07:58,430 --> 00:07:58,880
the test.

118
00:07:59,240 --> 00:08:06,620
So if you have your wrapper object from the amount function on that object, you have a property called

119
00:08:06,650 --> 00:08:14,810
VM and VM is short for view model and that is just an industry term or a general kind of higher level

120
00:08:14,810 --> 00:08:20,180
term that basically refers to what a component is, not specifically just a view component, but any

121
00:08:20,180 --> 00:08:25,820
kind of component from any Frontier Library view model basically means that you have some kind of model

122
00:08:25,820 --> 00:08:29,990
or some kind of logic or data that manages how the view works, right?

123
00:08:30,170 --> 00:08:35,630
It's a similar idea here where we have our view right here in our template section and our JavaScript

124
00:08:35,630 --> 00:08:39,860
configuration object right here, which is sort of the model behind the scenes, the logic.

125
00:08:40,040 --> 00:08:47,270
So the view model is kind of a higher level term that's used among JavaScript developers to define this

126
00:08:47,270 --> 00:08:51,980
kind of component in a kind of a higher level category description, if that makes sense.

127
00:08:52,160 --> 00:08:53,660
So that's where VM comes from.

128
00:08:53,660 --> 00:08:59,120
But if you don't care about those details, just remember it's VM to get access to the actual nested

129
00:08:59,120 --> 00:09:02,180
component that the wrapper is wrapping around.

130
00:09:03,270 --> 00:09:06,510
The reason I want to access VM is on this object.

131
00:09:06,630 --> 00:09:11,430
We can actually access any of the headline components data properties, right?

132
00:09:11,670 --> 00:09:18,510
So if I do, for example, VM dot action, we can see the current value of the action data property.

133
00:09:18,600 --> 00:09:18,960
All right.

134
00:09:19,230 --> 00:09:22,290
So if I refresh this, save the file, we can run here.

135
00:09:22,290 --> 00:09:25,240
And of course, our text is still build for everyone.

136
00:09:25,260 --> 00:09:26,940
That's what just is telling us.

137
00:09:27,180 --> 00:09:34,590
But notice here in the console.log, we see that the the action data property is in fact create.

138
00:09:34,980 --> 00:09:40,770
So what that means is, after the running of the interval, the internals of our component are actually

139
00:09:40,770 --> 00:09:46,110
storing the right piece of data, which is create, write the next one in line after bill.

140
00:09:46,470 --> 00:09:48,000
So what is the problem here?

141
00:09:48,240 --> 00:09:55,860
The problem is that there is a mismatch between the data that the component is storing internally versus

142
00:09:55,860 --> 00:09:58,390
what is actually rendered in the template.

143
00:09:58,650 --> 00:10:03,600
The template has actually not been refreshed from the tests perspective.

144
00:10:03,990 --> 00:10:09,090
So remember when we were first introducing this idea of what Vue does for us in the browser, we talked

145
00:10:09,090 --> 00:10:15,660
about this idea that we change a property on data which forces view to re render the template.

146
00:10:15,670 --> 00:10:17,280
That's like the second step.

147
00:10:17,670 --> 00:10:23,550
What has happened in our test so far, because of the disconnect between the just test runner and the

148
00:10:23,550 --> 00:10:31,440
View Library, which are two separate pieces of software, is just says go ahead and run the timer,

149
00:10:31,440 --> 00:10:37,350
run the interval to which JavaScript and just understand what has happened and so does our view component,

150
00:10:37,350 --> 00:10:39,180
at least this JavaScript section of it.

151
00:10:39,450 --> 00:10:44,040
So it runs through this equivalent logic and moves on to the next array element, which is create,

152
00:10:44,370 --> 00:10:48,510
but none of that triggers the component to actually refresh.

153
00:10:48,510 --> 00:10:48,840
Right.

154
00:10:48,990 --> 00:10:52,020
Remember, there is no Dom here, there is no actual browser.

155
00:10:52,140 --> 00:10:56,820
So in our tests, when we mount, we're sort of simulating a browser like environment where we can bring

156
00:10:56,820 --> 00:11:00,420
up this component, but it's not actually a real visual environment, right?

157
00:11:00,510 --> 00:11:02,310
It's sort of a sandbox for us to plan.

158
00:11:02,670 --> 00:11:07,890
So to summarize, what's happened is we have changed the components in turn data, but we haven't actually

159
00:11:07,890 --> 00:11:13,360
told it yet to update the template and the HTML to reflect that new data.

160
00:11:13,560 --> 00:11:19,830
So because our action here is not refreshed, it's simply as the original template that that was there

161
00:11:19,830 --> 00:11:23,130
when the component first mounted, which has the text build for everyone.

162
00:11:23,370 --> 00:11:29,040
When our test checks for that data test attribute, it finds the original template, it finds the original

163
00:11:29,040 --> 00:11:33,240
H2 now and says, Hey, I'm still getting build for everyone, not create forever.

164
00:11:33,960 --> 00:11:38,730
So obviously we need to do is we need to trigger the component to refresh.

165
00:11:38,850 --> 00:11:45,060
We need to trigger the component to look at the data and update the corresponding HTML template to have

166
00:11:45,090 --> 00:11:46,590
those latest changes.

167
00:11:46,920 --> 00:11:52,230
And the way we're going to do that is actually by importing a view function from the view library.

168
00:11:52,950 --> 00:11:59,370
So right here, I'm going to go to the very top of my file and I'm going to import a function called

169
00:11:59,370 --> 00:12:00,390
Next Tick.

170
00:12:01,950 --> 00:12:04,530
And this is actually going to come from the Core View Library.

171
00:12:04,530 --> 00:12:07,410
So just from view right here.

172
00:12:07,650 --> 00:12:07,980
Okay.

173
00:12:08,250 --> 00:12:12,410
Next tick is a little bit confusing, but you can almost think of a tick as a refresh.

174
00:12:12,420 --> 00:12:16,830
It's sort of the next moment in a component's existence.

175
00:12:17,040 --> 00:12:21,840
In fact, I think the easiest thing for me to do right now is to go to the official view documentation

176
00:12:22,080 --> 00:12:28,740
I have here, the the documentation for next tick, which can be a complicated thing to understand.

177
00:12:28,740 --> 00:12:34,080
And even I sometimes struggle with it and I really would focus us on this sentence right here, which

178
00:12:34,080 --> 00:12:36,060
tells you when to use the next tick function.

179
00:12:36,270 --> 00:12:42,780
And it says use it immediately after you've changed some data to wait for the DOM to update.

180
00:12:42,810 --> 00:12:43,140
Right.

181
00:12:43,260 --> 00:12:45,450
And that's exactly what our tests have done so far.

182
00:12:45,600 --> 00:12:51,690
We have updated the data and that that has been sort of on the sidelines because that's what the set

183
00:12:51,690 --> 00:12:55,530
interval function did for us behind the scenes, or at least our mock function did.

184
00:12:55,740 --> 00:13:01,600
But remember, we triggered the passage of time and thus behind the scenes we triggered view to change

185
00:13:01,600 --> 00:13:02,130
its data.

186
00:13:02,400 --> 00:13:08,790
However, we still have not had the complimentary DOM update, and when we run the next tick function,

187
00:13:08,880 --> 00:13:16,830
what that does is it moves forward too after Vue has successfully updated the HTML, the DOM equivalent

188
00:13:16,830 --> 00:13:18,270
of the component.

189
00:13:18,570 --> 00:13:18,770
All right.

190
00:13:18,780 --> 00:13:20,460
Or the DOM element of the component.

191
00:13:20,610 --> 00:13:23,730
Because remember, a component is both the template and the JavaScript.

192
00:13:23,850 --> 00:13:26,220
We've updated half of that, the JavaScript.

193
00:13:26,370 --> 00:13:28,080
We have not yet updated that template.

194
00:13:28,410 --> 00:13:35,220
So it's pretty simple as far as syntax right here, after we run our pending timers, after we advance

195
00:13:35,460 --> 00:13:39,450
our set interval interval by one interval, we want to update the DOM.

196
00:13:39,630 --> 00:13:45,660
So all I need to do is to invoke that next tick function that I imported from the View Library.

197
00:13:45,930 --> 00:13:50,280
Now, this is an asynchronous action because this process takes a little bit of time.

198
00:13:50,280 --> 00:13:56,370
Vue needs to scan the HTML and it needs to compare it with the data and see, for example, the fact

199
00:13:56,370 --> 00:14:01,470
that we're using action here means it needs to place a new value there based on the current value of

200
00:14:01,470 --> 00:14:02,460
the action data property.

201
00:14:02,700 --> 00:14:04,710
That process may take a certain amount of time.

202
00:14:04,950 --> 00:14:10,530
So if we don't wait for this to finish, it's possible for a test to continue running and end before

203
00:14:10,530 --> 00:14:12,000
this process is done.

204
00:14:12,300 --> 00:14:17,640
So what I'm saying or what all this is leading to is we actually need to use the async, await syntax

205
00:14:17,760 --> 00:14:19,560
whenever we're using next tick.

206
00:14:19,560 --> 00:14:25,800
We need to basically pause execution of this test until the next tick function concludes, which means

207
00:14:25,800 --> 00:14:31,320
we're going to have the latest version of our HTML template, which means when we query that template

208
00:14:31,590 --> 00:14:36,210
for our data test attribute, then we'll have the latest and greatest HTML.

209
00:14:36,300 --> 00:14:39,840
And that's the thing that we actually want to make our assertion on.

210
00:14:40,230 --> 00:14:43,170
So I'm going to make this test function.

211
00:14:43,170 --> 00:14:48,840
The second argument here, async, and then I'm going to put the wave keyword before next tick.

212
00:14:49,020 --> 00:14:55,650
And that basically tells just and the view test utils library to say refresh the components H2 now and

213
00:14:55,650 --> 00:15:01,260
wait wait until that is done, await it until it's complete and then continue running through the rest

214
00:15:01,260 --> 00:15:03,420
of the code to make sure that the assertions work.

215
00:15:03,660 --> 00:15:09,330
So when I saved this, now we're finally going to get a passing test suite, and that's all there is

216
00:15:09,330 --> 00:15:10,400
to cover in this lesson.

217
00:15:10,410 --> 00:15:15,840
I know it's been a lot of complexity, but these are all really helpful functions and techniques that

218
00:15:15,840 --> 00:15:19,410
you can utilize in your just and Vue test suites.

219
00:15:19,620 --> 00:15:26,940
So just as a very quick reminder and a quick review, we use the use fake timer's method to mock out

220
00:15:26,940 --> 00:15:33,300
real JavaScript timer functions like set timeout and set interval with just mock functions, replacements,

221
00:15:33,300 --> 00:15:34,320
write substitutes.

222
00:15:34,980 --> 00:15:40,020
But since we're not using the real thing, we also need to tell just to simulate the passage of time.

223
00:15:40,170 --> 00:15:46,530
Simulate the passage of a time interval which we do using this run only appending timers method right

224
00:15:46,530 --> 00:15:46,770
here.

225
00:15:47,100 --> 00:15:52,050
So that takes care of the JavaScript side of things where everything updates, but that does not inherently

226
00:15:52,050 --> 00:15:55,110
tell the view component to refresh its HTML.

227
00:15:55,320 --> 00:16:01,620
We do that with the next tick function that we import directly from the view library that is asynchronous.

228
00:16:01,620 --> 00:16:09,090
So we need to await we need to wait until this process is complete and done before we proceed to our

229
00:16:09,090 --> 00:16:09,510
assertions.

230
00:16:09,660 --> 00:16:14,310
Once the template is updated, then of course we can find the data test attribute, which is going to

231
00:16:14,310 --> 00:16:15,530
be this H1 right here.

232
00:16:15,720 --> 00:16:19,350
Then we can confirm that its new text is now create for everyone.

233
00:16:19,620 --> 00:16:25,500
And then finally we will return back to the original JavaScript real time or implementations by using

234
00:16:25,500 --> 00:16:27,720
our use real timers method.

235
00:16:27,960 --> 00:16:32,070
All right, that's been a lot to cover, but I hope it hasn't been too crazy and we will certainly review

236
00:16:32,070 --> 00:16:33,600
many of these concepts throughout the course.

237
00:16:33,870 --> 00:16:35,100
So that's all there is to cover here.

238
00:16:35,100 --> 00:16:36,720
And I will see you in the next lesson.
