WEBVTT
1
00:00:00.270 --> 00:00:06.280
All right, so let's once again use factory functions to refactor the code in our job listings test

2
00:00:06.280 --> 00:00:09.720
suite, just so that we make each test a little bit leaner and smaller.

3
00:00:10.020 --> 00:00:15.510
Now it's up to us to determine what kind of factory functions we want and what objects they produce.

4
00:00:15.630 --> 00:00:20.040
We could have, for example, one factory function that just returns this complete object.

5
00:00:20.310 --> 00:00:25.560
But to make things a little bit more lightweight and composable, I proposed that we actually create

6
00:00:25.560 --> 00:00:32.130
two factory functions one to generate a sample root object like this one, and one to generate a sample

7
00:00:32.130 --> 00:00:34.020
config object like this one.

8
00:00:34.050 --> 00:00:38.160
I'm going to separate those responsibilities because I think it might prove helpful to just have them

9
00:00:38.160 --> 00:00:43.320
be in separate functions and we can use whichever one we want or both of them if a test needs it.

10
00:00:43.650 --> 00:00:50.520
So right here I'll define a new factory function, a new function in line in my described block, and

11
00:00:50.520 --> 00:00:52.290
I'm going to call it create root.

12
00:00:54.000 --> 00:01:00.660
And for this a factory function, I'm going to allow it to accept query params just in case any component

13
00:01:00.660 --> 00:01:03.270
wants to customize the query params that it's received with.

14
00:01:03.450 --> 00:01:05.640
I'm going to allow it to provide it right here.

15
00:01:05.970 --> 00:01:10.920
And as well, if a component doesn't care about the query params, I don't want them to have to provide

16
00:01:10.920 --> 00:01:13.230
something as an argument if it doesn't want to.

17
00:01:13.470 --> 00:01:18.060
So I'm going to provide an empty object as a fallback as a fallback value.

18
00:01:18.060 --> 00:01:22.560
If the invoker doesn't give an argument to the create root function when it's invoked.

19
00:01:23.010 --> 00:01:26.970
Then from this function, I'm going to implicitly return a JavaScript object.

20
00:01:26.970 --> 00:01:32.250
So right here I'm going to use the parentheses and my JavaScript object syntax, and then I'm going

21
00:01:32.250 --> 00:01:35.760
to basically have what we have right here, an object with a query property.

22
00:01:36.970 --> 00:01:42.550
And in here I am going to put a page property just so that we have a reasonable default in this case.

23
00:01:42.550 --> 00:01:45.480
Let's see, I'm going to put a page of five, just an arbitrary number.

24
00:01:45.730 --> 00:01:51.670
But if a test wants to give me a different page number, they're going to provide it in this query params

25
00:01:51.670 --> 00:01:52.060
object.

26
00:01:52.270 --> 00:01:56.230
So I want to make sure I take that object and structure it right here.

27
00:01:57.190 --> 00:02:03.280
So if any test gives me a queer params object with a page property and a different value than five,

28
00:02:03.400 --> 00:02:06.550
that page property will overwrite what we have right here.

29
00:02:06.730 --> 00:02:12.340
So each test can still customize not just the page number, but any query params that they care about.

30
00:02:12.610 --> 00:02:16.720
But if they don't care about it, they're just going to fall back to a reasonable value of five.

31
00:02:16.900 --> 00:02:17.130
Right?

32
00:02:17.140 --> 00:02:19.850
Some arbitrary value just so we have a decent fallback.

33
00:02:19.870 --> 00:02:20.230
All right.

34
00:02:20.830 --> 00:02:25.510
Afterwards, I'm going to create another factory function called create config.

35
00:02:25.750 --> 00:02:30.250
And this will be the one that generates the configuration for our shallow mt. function.

36
00:02:30.550 --> 00:02:35.920
So right here, I'm going to make this accept a dollar sign root, which is going to represent my global

37
00:02:35.920 --> 00:02:37.270
root property right here.

38
00:02:37.990 --> 00:02:41.290
And this will similarly return a JavaScript object.

39
00:02:42.010 --> 00:02:44.330
And we're going to have the exact same setup as we have below.

40
00:02:44.350 --> 00:02:46.660
We're going to have a global property set to an object.

41
00:02:47.110 --> 00:02:52.870
That object is going to have a max property and that one will have the dollar sign root global property.

42
00:02:52.880 --> 00:02:56.350
So this is what this dot dollar sign root will be on the mounted component.

43
00:02:56.680 --> 00:03:01.380
Here, I'm not going to provide any kind of reasonable fallback.

44
00:03:01.390 --> 00:03:05.320
I could, for example, try to have it invoke, create root and have it fall back.

45
00:03:05.320 --> 00:03:06.160
That's totally fine.

46
00:03:06.250 --> 00:03:09.400
It's really up to you to determine what you think gives you the most flexibility.

47
00:03:09.700 --> 00:03:15.670
But in this case, I'm mandating that every test give me some kind of root object just so the test communicates

48
00:03:15.670 --> 00:03:18.640
that that is needed and that it's going to provide it manually.

49
00:03:18.640 --> 00:03:18.820
Right.

50
00:03:18.820 --> 00:03:24.360
So I'm requiring any test that invokes create config to give me some kind of root object to the test

51
00:03:24.370 --> 00:03:26.620
and communicate what that root object entails.

52
00:03:26.740 --> 00:03:28.270
And what matters for the given root.

53
00:03:28.540 --> 00:03:28.930
All right.

54
00:03:29.590 --> 00:03:33.040
Let me show you how this is going to work over our next two tests and you'll see the difference.

55
00:03:33.370 --> 00:03:38.140
So right here, we want to replace our former code right here with our factory functions above.

56
00:03:38.470 --> 00:03:40.900
So first I want to replace this code right here.

57
00:03:41.290 --> 00:03:41.620
Right?

58
00:03:41.620 --> 00:03:44.800
So it can invoke the create root function, and I think we will.

59
00:03:45.040 --> 00:03:51.460
And for this test, which only cares about the Axios get method being invoked with the right URL, we

60
00:03:51.460 --> 00:03:55.060
don't really care what page Ron, whether on page one or page two.

61
00:03:55.300 --> 00:03:58.810
For the purposes of testing this logic, we don't really care about the root.

62
00:03:59.080 --> 00:04:05.860
So in this scenario, I'm okay simply invoking create root above and getting some root with some page

63
00:04:05.860 --> 00:04:07.900
number that I technically don't care about.

64
00:04:08.020 --> 00:04:12.190
It is going to be five, but I don't really care about it for the purposes of this test, so I don't

65
00:04:12.190 --> 00:04:12.970
have to scroll up.

66
00:04:12.970 --> 00:04:18.710
I just can assume that Create Root will give me a valid root object which I can assign to Constellation

67
00:04:18.720 --> 00:04:25.690
Dollar Sign Root and then to create my config object right here, I can simply shallow out my job listings

68
00:04:25.690 --> 00:04:31.240
component and instead of providing the configuration object in line, I can invoke my create config

69
00:04:31.240 --> 00:04:36.400
function from above that needs a sample root object, but I have one available from the line above,

70
00:04:36.670 --> 00:04:38.500
so I'm just going to provide dollar sign root.

71
00:04:39.590 --> 00:04:45.230
So we sort of communicate in this test that the route doesn't really matter if the user wants to scroll

72
00:04:45.230 --> 00:04:46.910
up to find out what that object is.

73
00:04:47.090 --> 00:04:47.690
They can.

74
00:04:47.840 --> 00:04:51.650
But I think what I'm trying to communicate here is it doesn't really matter.

75
00:04:51.660 --> 00:04:57.320
We just need some kind of route because we need this property to exist on the component, because that's

76
00:04:57.320 --> 00:04:58.790
what's needed for a computer to work.

77
00:04:58.970 --> 00:05:02.470
But for the purposes of this test, we don't care what this is.

78
00:05:02.510 --> 00:05:04.160
We just need it to exist.

79
00:05:04.310 --> 00:05:05.960
So there's no failure in the terminal.

80
00:05:06.200 --> 00:05:09.260
And that's what I'm sort of trying to represent in my code right here.

81
00:05:09.380 --> 00:05:10.220
I need a route.

82
00:05:10.220 --> 00:05:13.370
I'm going to need it to create the config, but I don't care what that route is.

83
00:05:13.910 --> 00:05:19.820
Right now on the second test, we have a slightly different scenario because I can say that the query

84
00:05:20.000 --> 00:05:21.170
and the page matters, right?

85
00:05:21.170 --> 00:05:27.170
If I'm getting 15 jobs from the backend, if I'm on page one, I'm going to see the first ten.

86
00:05:27.290 --> 00:05:29.810
If I'm on page two, I'm going to see the last five.

87
00:05:29.990 --> 00:05:34.580
So here is where the actual page number matters that you want to communicate that if we're testing for

88
00:05:34.580 --> 00:05:38.720
a maximum of ten jobs, the user does have to be on page number one.

89
00:05:38.930 --> 00:05:45.530
So having a query operand with a page equal to a string of one does matter for this test to be true.

90
00:05:45.890 --> 00:05:46.190
Right.

91
00:05:46.190 --> 00:05:48.410
There is some variation in how this logic works.

92
00:05:48.650 --> 00:05:51.490
So if we want to show a ten jobs, we do have to be on page one.

93
00:05:51.500 --> 00:05:53.180
I want to communicate that to the reader.

94
00:05:53.540 --> 00:05:58.400
So once again, I'm going to invoke my create root function from above.

95
00:05:59.450 --> 00:06:03.740
And this object or this function rather accepts an argument of query params.

96
00:06:03.890 --> 00:06:06.470
So let's provide some custom create plan params below.

97
00:06:06.740 --> 00:06:12.770
So right here I'll create a constant called query params and I'll provide params with a custom page

98
00:06:12.770 --> 00:06:17.780
property set to one that's going to allow me to overwrite this fallback right here.

99
00:06:18.170 --> 00:06:22.940
So now that I have my custom create params, I'm going to pass them into my create root factory function.

100
00:06:23.270 --> 00:06:24.890
So they're going to flow in right here.

101
00:06:25.040 --> 00:06:27.860
They're going to override the page property right here.

102
00:06:28.010 --> 00:06:31.100
And they're going to give us back a sample valid root object.

103
00:06:31.490 --> 00:06:34.760
So I can assign this to const dollar sign root.

104
00:06:35.630 --> 00:06:38.890
And now we have a root object, so we no longer need this former one.

105
00:06:39.530 --> 00:06:44.210
We have still communicated that the page property matters, that the value of one matters, but we've

106
00:06:44.210 --> 00:06:49.520
kind of isolated the rest of that view test utils setup to a factory function above that somebody does

107
00:06:49.520 --> 00:06:50.800
not have to scroll up to see.

108
00:06:51.080 --> 00:06:51.530
All right.

109
00:06:51.920 --> 00:06:53.120
Same rules apply here.

110
00:06:53.120 --> 00:06:57.650
Instead of having this complex configuration object, we can simply invoke create config.

111
00:06:58.460 --> 00:07:01.940
That create config factory function needs a sample root object.

112
00:07:02.090 --> 00:07:06.290
We can provide the one from above that has our custom page property set to one.

113
00:07:06.770 --> 00:07:10.790
Save that, let's run our test suite and everything passes.

114
00:07:11.120 --> 00:07:11.480
Perfect.

115
00:07:11.780 --> 00:07:13.490
So I really like the approach where this is going.

116
00:07:13.490 --> 00:07:15.050
I think our tests are pretty reasonable.

117
00:07:15.260 --> 00:07:16.010
They're pretty short.

118
00:07:16.010 --> 00:07:18.860
They're kind of all a bunch of small lines that proceed in order.

119
00:07:19.100 --> 00:07:24.440
We are mocking our API call, we're creating some sample params, we're creating a sample root that

120
00:07:24.440 --> 00:07:26.180
we need in order for this to be satisfied.

121
00:07:26.300 --> 00:07:27.860
We are caring about what it is.

122
00:07:28.100 --> 00:07:32.030
We're shallow, mounting and creating some kind of config that involves that root.

123
00:07:32.360 --> 00:07:36.440
Then we are using, of course, flush promises to complete all the promises and then we're verifying

124
00:07:36.440 --> 00:07:42.920
that we see indeed ten job listings given that we have ten jobs returning from the back end.

125
00:07:43.100 --> 00:07:43.400
All right.

126
00:07:43.640 --> 00:07:47.150
So with this factory function approach, I think we have the best of all worlds where once again, the

127
00:07:47.150 --> 00:07:48.740
tests can communicate what matters.

128
00:07:48.890 --> 00:07:53.990
And the tests that don't care about something can simply use those factory functions and expect a reasonable

129
00:07:53.990 --> 00:07:55.400
default that they can use.

130
00:07:55.730 --> 00:07:56.120
All right.

131
00:07:56.300 --> 00:07:57.890
That's all there is to cover in this lesson.

132
00:07:57.890 --> 00:07:59.480
So I will see you in the next one.
