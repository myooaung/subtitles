WEBVTT
1
00:00:00.410 --> 00:00:01.340
All right.

2
00:00:01.340 --> 00:00:04.820
So how can we improve on the tests from the previous lesson?

3
00:00:05.120 --> 00:00:10.550
Well, what I really don't like about the fine component method is that we're once again coupling ourselves

4
00:00:10.550 --> 00:00:11.930
to our implementation.

5
00:00:12.200 --> 00:00:18.800
Our test right here for the main nav component depends on another component existing that is specifically

6
00:00:18.800 --> 00:00:20.480
called action button.

7
00:00:20.840 --> 00:00:25.700
So if we were to change the name of the action button component tomorrow to something else like Fancy

8
00:00:25.700 --> 00:00:31.310
Button, if we were just to change the name, not the implementation, the code for the main nav test

9
00:00:31.310 --> 00:00:34.610
would break because it would no longer be able to find that component.

10
00:00:34.820 --> 00:00:41.480
So it's highly dependent or highly coupled on a specific name existing in the NAV and the name that's

11
00:00:41.480 --> 00:00:42.530
possible to change.

12
00:00:42.530 --> 00:00:42.800
Right.

13
00:00:42.950 --> 00:00:47.600
So is there a way we can improve this test to make it less brittle and more adaptable to change?

14
00:00:47.840 --> 00:00:53.690
Well, we can follow the exact same strategy we did earlier where we can attach an attribute to whatever

15
00:00:53.690 --> 00:00:56.090
it is that we're looking for in our tests.

16
00:00:56.270 --> 00:01:01.790
Now, previously, we attached the data test attribute to an HTML element, and we talked about the

17
00:01:01.790 --> 00:01:04.420
idea that that attribute was totally arbitrary.

18
00:01:04.430 --> 00:01:09.380
Our name for it was totally arbitrary, but it was an attribute that existed purely for our tests,

19
00:01:09.500 --> 00:01:15.260
and thus we can drag that attribute around to any other HTML element and a test would continue to pass.

20
00:01:15.470 --> 00:01:17.200
What's the exact same idea here?

21
00:01:17.210 --> 00:01:21.800
Because we can apply arbitrary attributes to our view components as well.

22
00:01:22.010 --> 00:01:23.630
So let's see that in action right here.

23
00:01:23.630 --> 00:01:24.770
I'm going to change our test.

24
00:01:25.010 --> 00:01:29.440
I'm going to change this from a fine component method call to a find method call.

25
00:01:30.260 --> 00:01:34.950
And right here I'm going to provide a string argument and we want to search for an attribute as a reminder.

26
00:01:34.970 --> 00:01:40.430
The way we do that, using this view test util syntax is to provide a pair of square brackets, then

27
00:01:40.430 --> 00:01:42.580
specify the attribute that we want to look for.

28
00:01:42.590 --> 00:01:45.350
In that case, the attribute is called data test.

29
00:01:45.860 --> 00:01:50.900
Then we provide an equal sign and then the value that we're looking for for that data test attribute.

30
00:01:51.140 --> 00:01:55.040
So not just looking for an attribute, but for an attribute with a specific value.

31
00:01:55.250 --> 00:02:00.020
And since that value is going to be a string and we need to provide that string within this other string

32
00:02:00.020 --> 00:02:02.300
in our test, we have to use single quotes here.

33
00:02:02.510 --> 00:02:07.220
So I'm going to put a pair of single quotes and here we can choose an arbitrary name for our login button.

34
00:02:07.220 --> 00:02:09.920
And I'm just going to say log in, dash button.

35
00:02:10.880 --> 00:02:11.150
All right.

36
00:02:11.150 --> 00:02:14.030
This again, does not exist in our implementation yet.

37
00:02:14.240 --> 00:02:16.490
It's just something that I expect to exist.

38
00:02:16.610 --> 00:02:22.370
But notice now it doesn't care about whether it's looking for a HTML element or a view component.

39
00:02:22.550 --> 00:02:27.860
All it cares about is something in my main NAV template that has this actually called data test equal

40
00:02:27.860 --> 00:02:28.790
to log in button.

41
00:02:28.790 --> 00:02:29.150
Right.

42
00:02:29.240 --> 00:02:30.860
Specifically for the purposes of testing.

43
00:02:31.130 --> 00:02:35.930
And I'm going to follow the exact same logic for the profile image below.

44
00:02:35.930 --> 00:02:39.320
So instead of using fine component, I'm again going to use the find method.

45
00:02:39.610 --> 00:02:45.800
I'm going to provide my string with the square brackets, provide my data test attribute, just keeping

46
00:02:45.800 --> 00:02:52.210
a consistent name just because, you know, why would we choose a different one for each element or

47
00:02:52.220 --> 00:02:53.570
view component that we attach to?

48
00:02:53.690 --> 00:02:55.970
It makes sense to have a consistent naming scheme here.

49
00:02:56.150 --> 00:03:00.350
So I'm going to call the attribute down test as well, but I'm going to provide a different value,

50
00:03:00.350 --> 00:03:02.390
which is profile, dash image.

51
00:03:03.730 --> 00:03:04.120
All right.

52
00:03:04.330 --> 00:03:05.770
So let me go ahead and run this test.

53
00:03:05.770 --> 00:03:06.580
They're going to do NPM.

54
00:03:06.580 --> 00:03:07.360
Run, test.

55
00:03:07.390 --> 00:03:08.230
Watch here.

56
00:03:09.710 --> 00:03:15.650
That's going to start up my test runner ingest and we'll see whether the test passes or fails.

57
00:03:15.650 --> 00:03:21.920
And of course, it fails because if we scroll up here, it's unable to find the login button.

58
00:03:21.920 --> 00:03:26.090
And the reason it's unable to find the log in button is because it's unable to find anything in our

59
00:03:26.090 --> 00:03:28.490
template with this data test after all.

60
00:03:28.490 --> 00:03:28.790
Right.

61
00:03:29.830 --> 00:03:31.690
So what can we do to fix this problem?

62
00:03:31.720 --> 00:03:35.590
Well, we have to scroll back up here to where we're rendering the profile image component.

63
00:03:35.710 --> 00:03:39.190
And here's where I'm going to attach my data test attribute.

64
00:03:39.400 --> 00:03:45.130
So the key takeaway or lesson to be learned here is that we can apply these arbitrary attributes not

65
00:03:45.130 --> 00:03:48.280
just to HTML elements, but to our view components as well.

66
00:03:48.460 --> 00:03:50.350
So right here, data test.

67
00:03:51.850 --> 00:03:52.450
Equals.

68
00:03:52.450 --> 00:03:54.580
And this is going to be my profile dash image.

69
00:03:55.090 --> 00:03:59.980
And right here, even though this is a VLS and is conditionally being rendered only if the profile image

70
00:04:00.250 --> 00:04:04.390
is not being rendered, we can still attach a data test attribute here.

71
00:04:04.390 --> 00:04:08.620
So data test at the very end equals log in dash button.

72
00:04:10.040 --> 00:04:14.960
Let me go ahead and run this again after I make those changes and now everything is going to pass.

73
00:04:15.680 --> 00:04:16.310
All right.

74
00:04:16.310 --> 00:04:19.430
So let's go ahead and make the same changes to our other test below.

75
00:04:19.430 --> 00:04:23.930
In fact, I can probably copy the code from above, so I'm going to copy this log in button code right

76
00:04:23.930 --> 00:04:28.340
here and replace this code below where we're using the fine component method.

77
00:04:28.580 --> 00:04:29.390
Same idea.

78
00:04:29.390 --> 00:04:35.540
We still want to search for something in our, in our template that has an attribute of data test equal

79
00:04:35.540 --> 00:04:36.230
to log in button.

80
00:04:36.500 --> 00:04:38.510
Same rules apply for the profile image.

81
00:04:38.510 --> 00:04:41.750
So I'm going to copy this line and replace this line over here.

82
00:04:43.200 --> 00:04:48.600
And now when I rerun it, our test should still pass because this test is simply testing for the inverse

83
00:04:48.810 --> 00:04:49.670
of the test above.

84
00:04:49.680 --> 00:04:55.890
This test is testing for the fact that when the data property has a is logged in value of true, then

85
00:04:55.890 --> 00:04:59.430
we should see the profile image and not see the log in button.

86
00:04:59.610 --> 00:04:59.940
All right.

87
00:05:00.210 --> 00:05:04.320
So this moves us in a better direction and this is definitely a better test, in my opinion.

88
00:05:04.560 --> 00:05:10.440
But there's still one detail that I don't like, which is that we are manually setting up the data of

89
00:05:10.440 --> 00:05:12.450
our view component right here.

90
00:05:12.480 --> 00:05:12.780
All right.

91
00:05:12.930 --> 00:05:18.150
It does make the test perhaps easier to read and understand because the reader understands which property

92
00:05:18.150 --> 00:05:19.470
is affecting the result.

93
00:05:19.800 --> 00:05:23.640
However, it's a sign, again, that we are coupled to our implementation.

94
00:05:23.640 --> 00:05:29.850
Our tests specifically know that there is a data property on the main nav component called is logged

95
00:05:29.850 --> 00:05:34.350
in and what its value needs to be in order to see something on the screen.

96
00:05:34.350 --> 00:05:34.620
Right.

97
00:05:34.770 --> 00:05:41.010
We wouldn't be able to write a TDD test with this kind of implementation specific detail if we started

98
00:05:41.010 --> 00:05:41.910
of course, with TDD.

99
00:05:41.910 --> 00:05:42.120
Right.

100
00:05:42.120 --> 00:05:46.980
So that's another sign that is very closely coupled to exactly the way that we've built the component.

101
00:05:47.310 --> 00:05:50.790
So we have to ask ourselves, what is the real value of this test to the user?

102
00:05:51.120 --> 00:05:56.280
Well, the real purpose of the main component, or at least this chunk of it, is kind of obvious.

103
00:05:56.280 --> 00:06:02.220
It's to display something different when the user logs in and how does the user log in, they click

104
00:06:02.220 --> 00:06:02.910
a button.

105
00:06:02.910 --> 00:06:03.270
Right.

106
00:06:03.360 --> 00:06:05.550
That's the core component that's missing here.

107
00:06:05.700 --> 00:06:07.350
We want to render the component.

108
00:06:07.620 --> 00:06:09.090
We want to check what exists.

109
00:06:09.270 --> 00:06:12.180
Then we want to simulate a button press right.

110
00:06:12.180 --> 00:06:14.550
Just how the user would interact with our component.

111
00:06:14.550 --> 00:06:18.480
Ah user is not going to change a data property honor view component.

112
00:06:18.480 --> 00:06:21.870
The user is technically oblivious to our implementation.

113
00:06:21.990 --> 00:06:23.340
What is the user going to do?

114
00:06:23.400 --> 00:06:27.450
They're going to click our action button and then they're going to expect to see a profile image.

115
00:06:27.720 --> 00:06:34.200
So the closer that our components can mirror that real life usage, our component, the better.

116
00:06:34.320 --> 00:06:39.720
And that is also testing the behavior that irrespective of, you know, a specific implementation,

117
00:06:39.720 --> 00:06:42.600
the user clicks a login button and they see a profile image.

118
00:06:42.840 --> 00:06:47.730
But unfortunately, we don't yet know how to simulate the idea of a click and how to actually make a

119
00:06:47.730 --> 00:06:49.590
click action on our component.

120
00:06:49.800 --> 00:06:53.940
So before we fix this test, we have to learn that, and that's what we're going to tackle in the very

121
00:06:53.940 --> 00:06:54.540
next lesson.

122
00:06:54.660 --> 00:07:01.020
But then we're going to come back to this test and fix it to make it a little bit more not non knowing

123
00:07:01.200 --> 00:07:02.670
of the implementation.

124
00:07:02.910 --> 00:07:03.240
All right.

125
00:07:03.240 --> 00:07:04.800
That's all there is to cover in this lesson.

126
00:07:04.890 --> 00:07:06.300
So I will see you in the next one.
