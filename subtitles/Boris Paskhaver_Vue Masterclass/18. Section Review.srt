1
00:00:00,870 --> 00:00:01,500
Okay.

2
00:00:01,500 --> 00:00:05,310
So congratulations on reaching the end of another core section.

3
00:00:05,490 --> 00:00:07,590
We did a lot in this section.

4
00:00:07,740 --> 00:00:14,490
We built a brand new feature entirely in TypeScript, and there may not have been that many new view

5
00:00:14,490 --> 00:00:19,980
concepts that we explored, but we certainly got a lot of opportunity to practice with existing view

6
00:00:19,980 --> 00:00:24,660
concepts and view concepts and of course, write all of our code in TypeScript.

7
00:00:25,110 --> 00:00:25,410
All right.

8
00:00:25,410 --> 00:00:29,760
So with that, we have completed our user story, which we introduced in the first lesson.

9
00:00:29,940 --> 00:00:35,880
As a user, I'd like to filter jobs by my level of education so that I can apply to positions for which

10
00:00:35,880 --> 00:00:37,020
I am qualified.

11
00:00:37,350 --> 00:00:41,880
So let's quickly review all the steps that we took in order to complete this user story.

12
00:00:42,330 --> 00:00:48,210
The first thing we did is we built a degrees endpoint using JSON server and that simply returns an array

13
00:00:48,210 --> 00:00:49,380
of degree objects.

14
00:00:49,590 --> 00:00:53,430
This was a little bit of a different approach compared to our previous implementations.

15
00:00:54,120 --> 00:01:00,810
For example, for job types and organizations, we simply iterated over the existing jobs.

16
00:01:01,020 --> 00:01:06,090
Here we imagined that we had a business constraint and needing a separate endpoint that would provide

17
00:01:06,090 --> 00:01:10,590
us with the data that would form the basis of the checkboxes that we rendered onto the screen.

18
00:01:10,890 --> 00:01:16,320
Of course, in order to store the degrees that we got from our API function call, we also needed to

19
00:01:16,320 --> 00:01:18,010
add some new properties to our bookstore.

20
00:01:18,300 --> 00:01:21,960
So we created a degrees property to store the actual array of degrees.

21
00:01:22,170 --> 00:01:28,170
And then we also created a selected degrees array in order to store the user's actual checkbox selections.

22
00:01:28,350 --> 00:01:33,480
All right, so multiple pieces of your store state that we added in order to accommodate this feature.

23
00:01:33,900 --> 00:01:34,260
All right.

24
00:01:34,350 --> 00:01:39,000
In order, of course, to change those pieces of your store state, we needed to write mutations.

25
00:01:39,210 --> 00:01:41,670
Mutations are methods that update the bookstore store state.

26
00:01:41,940 --> 00:01:46,860
So we needed to write a mutation to update our degrees array and also to operate update our selected

27
00:01:46,860 --> 00:01:47,220
degrees.

28
00:01:47,220 --> 00:01:47,520
All right.

29
00:01:47,790 --> 00:01:49,110
We also wrote New Getters.

30
00:01:49,110 --> 00:01:55,260
One of our sample getters was the include job by degree getter, which validated whether or not a job

31
00:01:55,260 --> 00:01:58,200
fit the criteria of inclusion in the filter jobs.

32
00:01:58,230 --> 00:01:58,640
Right.

33
00:01:58,890 --> 00:02:04,410
Remember that Filter Jobs was its own getter that relied on a bunch of smaller helper getters to do

34
00:02:04,410 --> 00:02:05,400
its responsibility.

35
00:02:05,820 --> 00:02:07,890
We also wrote new async action.

36
00:02:08,490 --> 00:02:13,290
It was called Fetch Degrees, I believe, and the responsibility of that asynchronous view action was

37
00:02:13,290 --> 00:02:16,230
to actually make the API request to the degrees endpoint.

38
00:02:16,440 --> 00:02:21,630
So again, an action does an asynchronous operation like reaching out to an API or maybe reading from

39
00:02:21,630 --> 00:02:22,200
the file disk.

40
00:02:22,380 --> 00:02:26,730
And when it's done, it commits a synchronous mutation to update the View Store State.

41
00:02:27,090 --> 00:02:27,510
All right.

42
00:02:27,810 --> 00:02:30,950
We also wrote new composable functions to interact with View X.

43
00:02:30,960 --> 00:02:33,300
We did that, for example, to interact with our new getters.

44
00:02:33,810 --> 00:02:39,570
We also did a couple composable functions to actually send off or dispatch the action to make the API

45
00:02:39,570 --> 00:02:39,990
request.

46
00:02:40,320 --> 00:02:46,530
And so we saw how those composable functions can either interact with vue's reactivity system or return

47
00:02:46,680 --> 00:02:49,140
completely reactive objects using things like computed.

48
00:02:49,440 --> 00:02:54,150
And those reactive objects and those composable functions, we can reuse across multiple components.

49
00:02:54,450 --> 00:02:57,600
In fact, speaking of reuse, we also reused general components.

50
00:02:57,840 --> 00:03:02,730
So earlier in the course we tried our best to make the job the filter sidebar checkbox group component

51
00:03:02,910 --> 00:03:08,010
pretty reusable, and we saw how easy it was to add another instantiation of that component in this

52
00:03:08,010 --> 00:03:08,370
section.

53
00:03:08,640 --> 00:03:14,190
This new checkbox group component that we added was of course responsible for rendering the degrees

54
00:03:14,190 --> 00:03:14,790
checkboxes.

55
00:03:15,090 --> 00:03:19,680
And we also saw how we could test those components while marking out their dependencies, such as their

56
00:03:19,680 --> 00:03:22,590
own composable functions that we used in the setup method.

57
00:03:22,890 --> 00:03:26,390
Finally, perhaps what I'm most proud of in this section is this entire section.

58
00:03:26,400 --> 00:03:29,850
We used TDD or test driven development the entire way through.

59
00:03:30,060 --> 00:03:33,090
So we used test driven development to drive every implementation.

60
00:03:33,300 --> 00:03:34,500
We wrote the test first.

61
00:03:34,650 --> 00:03:39,060
We described what the function or the method or the component was responsible for doing.

62
00:03:39,210 --> 00:03:43,740
And only after we wrote a failing test, then we actually introduced a working implementation.

63
00:03:44,040 --> 00:03:44,310
All right.

64
00:03:44,310 --> 00:03:49,650
So hopefully we were able to move through the section a lot faster than previous sections because we

65
00:03:49,650 --> 00:03:54,300
already built a lot of good infrastructure and reusability earlier on, a lot of good patterns that

66
00:03:54,300 --> 00:03:59,940
were very easy to simply copy and kind of adjust slightly in order to accommodate a brand new user feature.

67
00:04:00,240 --> 00:04:00,480
All right.

68
00:04:00,480 --> 00:04:03,160
So I'm really proud of the work that we've done in this section.

69
00:04:03,180 --> 00:04:06,240
I really hope you've learned a lot and I will see you in the next lesson.
