WEBVTT
1
00:00:00.630 --> 00:00:01.470
Okay.

2
00:00:01.470 --> 00:00:07.850
So in this lesson, we'll introduce a helper function from the view library called Maps State.

3
00:00:08.160 --> 00:00:15.840
What Maps State helps us do is map or in other words, connect, view state properties to component

4
00:00:15.840 --> 00:00:16.450
properties.

5
00:00:16.830 --> 00:00:23.190
So in order to introduce that, I want you to focus your attention on this is logged in computed property

6
00:00:23.190 --> 00:00:30.360
or method right here we have a computed property called is logged in and all it does is reference a

7
00:00:30.360 --> 00:00:36.570
property on our view x store state called is logged in a property with the exact same name.

8
00:00:37.050 --> 00:00:44.520
This operation is so common that the maps state helper function exists to simplify the syntax that we

9
00:00:44.520 --> 00:00:45.150
have here.

10
00:00:45.810 --> 00:00:49.740
So you might be a little bit curious because you might be looking at this and saying, Wait a minute,

11
00:00:49.740 --> 00:00:51.600
this is not even that much code to write.

12
00:00:51.600 --> 00:00:53.820
And you'd be correct, it's not really that much code.

13
00:00:54.120 --> 00:01:01.680
But imagine that our component relies on five different state properties on our store, right?

14
00:01:01.860 --> 00:01:05.910
So imagine, for example, we have property A, property B for each one.

15
00:01:05.910 --> 00:01:09.300
You need to write out a separate computed property like computed property.

16
00:01:09.300 --> 00:01:15.510
A would reference this that's stored at state that a right and then below we might have computed property

17
00:01:15.510 --> 00:01:20.670
B which would reference this that stored that state that B And so very quickly, you can start getting

18
00:01:20.670 --> 00:01:26.040
a lot of these additional lines of code simply because you want to define computed properties with the

19
00:01:26.040 --> 00:01:29.790
exact same name as existing store properties.

20
00:01:29.790 --> 00:01:30.180
Right?

21
00:01:30.390 --> 00:01:35.250
And so even something like this, you now have nine or ten lines, but the maps state helper function

22
00:01:35.250 --> 00:01:39.000
is going to allow us to represent the same idea in a single line.

23
00:01:39.210 --> 00:01:40.200
And that's the advantage.

24
00:01:40.320 --> 00:01:45.270
It's not so readily apparent when we're only referencing one property as we are with is logged in.

25
00:01:45.420 --> 00:01:48.690
But it is a general good practice and a very powerful function.

26
00:01:48.810 --> 00:01:50.370
So I do want to show you how it works.

27
00:01:50.700 --> 00:01:56.100
So what that said, let me remove this and what I'm going to do is I'm going to comment out is logged

28
00:01:56.100 --> 00:01:59.340
in just so we can compare its syntax side by side with Map State.

29
00:01:59.640 --> 00:02:01.890
And then I'm going to import Map State somewhere.

30
00:02:01.890 --> 00:02:07.590
Scroll up to the very top here of my script section and this is going to be an import from view X.

31
00:02:07.650 --> 00:02:12.480
I'm going to place it above my project related imports because it is an NPM library.

32
00:02:12.750 --> 00:02:19.680
So right here I'm going to import a named export from view called Map State and I'm going to import

33
00:02:19.680 --> 00:02:21.480
it not from view but from the U.S..

34
00:02:21.780 --> 00:02:24.690
And just to reiterate here, the word map means connect.

35
00:02:24.690 --> 00:02:30.720
So if you think about, for example, the map method on an array in JavaScript, the goal is to go over

36
00:02:30.720 --> 00:02:36.000
each element and map it to or connect it to the next value, the follow up value.

37
00:02:36.240 --> 00:02:37.860
And that's the exact same idea here.

38
00:02:38.040 --> 00:02:40.020
When we use the word map, we mean connect.

39
00:02:40.020 --> 00:02:45.390
So we want to connect, view, store, state to component properties.

40
00:02:45.390 --> 00:02:51.090
Wherever we use this function, we want to map our store state to existing component properties.

41
00:02:51.420 --> 00:02:56.790
So I'm going to scroll down here back to Computed and I'm going to show you how Map State works.

42
00:02:56.790 --> 00:03:01.710
It actually has a couple syntactical options and we're going to start with sort of the ugliest one and

43
00:03:01.710 --> 00:03:07.440
then simplify it to the cleanest one because there are actually several ways that you can use this function.

44
00:03:07.830 --> 00:03:13.260
So the first thing to know is that map state is going to return a JavaScript object and that JavaScript

45
00:03:13.260 --> 00:03:16.830
object is going to have essentially computed methods on it.

46
00:03:17.070 --> 00:03:21.240
So you can almost imagine that whatever maps the returns is going to be like a JavaScript object.

47
00:03:21.390 --> 00:03:27.330
It has computed property A and has computed property B, etc. So whenever we get the return value,

48
00:03:27.330 --> 00:03:31.140
we don't want to simply pluck this object into our computed properties.

49
00:03:31.320 --> 00:03:37.380
We want to de structure the properties on the object that maps state, returns to us and make those

50
00:03:37.380 --> 00:03:39.840
regular computed methods in our computed object.

51
00:03:40.200 --> 00:03:45.210
So the takeaway from all of this is whenever we invoke Map State and Line, it's going to return an

52
00:03:45.210 --> 00:03:51.510
object to us and we want to make sure to de structure that objects properties in our computed object

53
00:03:51.510 --> 00:03:52.050
right here.

54
00:03:52.290 --> 00:03:55.920
So make sure you're in your computed object right here in line.

55
00:03:55.920 --> 00:04:01.800
You invoke Map State and you make sure to structure it using that triple dot E6 JavaScript syntax.

56
00:04:02.070 --> 00:04:06.570
So if Map state returns an object with three properties, then we're going to take those three properties,

57
00:04:06.570 --> 00:04:10.470
each of which is going to be a method and we're going to stick them back into the top level computed

58
00:04:10.470 --> 00:04:10.830
object.

59
00:04:11.100 --> 00:04:15.630
Similarly, if Map State returns an object with ten properties, we're going to take those ten properties,

60
00:04:15.630 --> 00:04:20.610
i.e. those ten methods, and we're going to stick them in the top level computed object that we have

61
00:04:20.610 --> 00:04:21.060
right here.

62
00:04:21.840 --> 00:04:22.230
Okay.

63
00:04:22.560 --> 00:04:25.680
So the maps state function can take a variety of inputs.

64
00:04:25.680 --> 00:04:28.290
And the first one I want to show you is a JavaScript object.

65
00:04:29.230 --> 00:04:29.560
All right.

66
00:04:29.560 --> 00:04:31.390
And here's our first syntactical option.

67
00:04:31.690 --> 00:04:36.940
When we provide this object, we can provide a property representing the computed property that we want

68
00:04:36.940 --> 00:04:39.190
to have on our main nav component.

69
00:04:39.550 --> 00:04:45.130
So on my main nav component, I want to be able to access and is logged in property.

70
00:04:45.460 --> 00:04:50.680
This name is entirely up to us, but typically you're going to give it the exact same name as the property

71
00:04:50.680 --> 00:04:53.530
on your store because why would you give it a different name?

72
00:04:53.530 --> 00:04:53.770
Right?

73
00:04:53.890 --> 00:04:55.900
Otherwise we'd have two names for the same thing.

74
00:04:56.080 --> 00:04:57.070
And it can be confusing.

75
00:04:57.700 --> 00:04:59.500
But the key takeaway is you can do that.

76
00:04:59.500 --> 00:05:00.880
And that's why this syntax exists.

77
00:05:01.120 --> 00:05:05.740
You can specify a property representing what you want to exist on Main NAV.

78
00:05:06.010 --> 00:05:11.110
So I'm telling view that I want a is logged in computed property on my main nav component.

79
00:05:11.650 --> 00:05:18.160
The value that I provide is an inline arrow function and that inline arrow function is going to receive

80
00:05:18.220 --> 00:05:22.240
the store state as the singular argument.

81
00:05:22.570 --> 00:05:28.930
So I'm going to write State in here and let me open up my store index tags file so we can remind ourselves

82
00:05:28.930 --> 00:05:30.370
what our store state looks like.

83
00:05:30.670 --> 00:05:37.420
So what I'm getting in this inline function is going to be this thing right here and where I can specify

84
00:05:37.420 --> 00:05:41.860
using and the return here is what property I want to get from my state.

85
00:05:42.190 --> 00:05:46.840
So in that case, I'm getting my state and on my state I want my is logged in property.

86
00:05:48.150 --> 00:05:48.600
All right.

87
00:05:48.900 --> 00:05:49.860
So I'm going to save that.

88
00:05:49.950 --> 00:05:54.900
And what we're doing here is basically the exact same thing as we're doing above right here.

89
00:05:55.050 --> 00:06:00.510
We are defining an is logged in computed property that is going to be a reference to the view store

90
00:06:00.510 --> 00:06:02.460
states is logged in property.

91
00:06:02.700 --> 00:06:04.560
It's the exact same thing we have here.

92
00:06:04.860 --> 00:06:10.170
The advantage of this approach is there's several Denver's number one, if we have other properties,

93
00:06:10.710 --> 00:06:14.070
it's as easy as defining them like so right.

94
00:06:14.070 --> 00:06:16.170
So we can do it all in a single method call.

95
00:06:16.350 --> 00:06:20.730
So imagine we have a store with properties and B all we have to do is do that.

96
00:06:21.210 --> 00:06:26.250
And it does save us a couple of lines compared to the implementation we saw earlier where we can define

97
00:06:26.250 --> 00:06:33.030
all of the properties that we want to take from our store and also map that store state to the corresponding

98
00:06:33.030 --> 00:06:35.460
properties that we want on our main NAV component.

99
00:06:35.940 --> 00:06:41.040
And of course, because we have an object here, we can customize what those component properties are

100
00:06:41.040 --> 00:06:41.610
going to be.

101
00:06:41.820 --> 00:06:47.490
So for example, if you did want a different name, if you wanted this to be user is logged in, we

102
00:06:47.490 --> 00:06:48.330
can totally do that.

103
00:06:48.390 --> 00:06:51.540
If we want this to be property A, we can totally do that.

104
00:06:51.810 --> 00:06:57.210
So if we do this syntax, we're now going to have this that user is logged in available on the main

105
00:06:57.210 --> 00:06:57.900
nav component.

106
00:06:58.110 --> 00:07:01.980
We're going to have this DOT property available on our main nav component.

107
00:07:02.160 --> 00:07:07.470
But behind the scenes, those computed properties on our main nav component are going to be referencing

108
00:07:07.470 --> 00:07:10.050
these properties on our View Store State.

109
00:07:10.680 --> 00:07:16.350
So this is just a simple syntax to consolidate the exact same logic we have here to define a computed

110
00:07:16.350 --> 00:07:20.850
property that is a reference to a view X store state property.

111
00:07:21.450 --> 00:07:24.960
Okay, so you might be thinking, can we make this even cleaner?

112
00:07:25.170 --> 00:07:26.580
The answer is we absolutely can.

113
00:07:26.820 --> 00:07:29.760
So let me remove my fake properties right here.

114
00:07:29.790 --> 00:07:31.860
Let me return this back to is logged in.

115
00:07:33.850 --> 00:07:40.000
And if you don't want to work with this area function syntax, if you want to reference a top level

116
00:07:40.000 --> 00:07:45.790
property on your view store, you can simply reference it using a string.

117
00:07:46.030 --> 00:07:50.710
So right here, instead of providing the arrow function in the property syntax, I can simply write

118
00:07:51.100 --> 00:07:52.900
that I want it to be is logged in.

119
00:07:53.260 --> 00:07:59.230
So what this is saying again is create an is logged in computed property on my main nav that is going

120
00:07:59.230 --> 00:08:04.720
to be a reference to the top level is logged in property on my view store state.

121
00:08:05.750 --> 00:08:07.460
All right, so I'm referencing this thing right here.

122
00:08:07.580 --> 00:08:09.110
Once again, we can customize this.

123
00:08:09.110 --> 00:08:15.140
We can say create a computed property called user is logged in that references the is logged in property

124
00:08:15.290 --> 00:08:16.850
on my view X store state.

125
00:08:17.880 --> 00:08:18.180
All right.

126
00:08:18.180 --> 00:08:19.680
So same principle we have right here.

127
00:08:19.860 --> 00:08:24.670
This syntax that we have right here is basically equivalent to if we call the computed property user

128
00:08:24.690 --> 00:08:25.590
is logged in above.

129
00:08:26.340 --> 00:08:30.570
But obviously it works a little bit better when we have many properties because it consolidates all

130
00:08:30.570 --> 00:08:31.500
that method syntax.

131
00:08:31.840 --> 00:08:32.200
Okay.

132
00:08:32.670 --> 00:08:35.510
They are thinking again, can we do even better?

133
00:08:35.520 --> 00:08:36.780
And the answer is yes, we can.

134
00:08:36.820 --> 00:08:41.040
So I'm going to show you the third and final option, which is the one I tend to use most often when

135
00:08:41.040 --> 00:08:41.850
working in the view.

136
00:08:42.450 --> 00:08:48.600
Typically speaking, usually I don't want to give a different property name to the component compared

137
00:08:48.600 --> 00:08:53.040
to the View Store, because as I mentioned, I think it only makes things more confusing, right?

138
00:08:53.070 --> 00:08:58.080
Whatever I call it in my view store is probably what I want to call it in my component because I don't

139
00:08:58.080 --> 00:09:00.570
want to give two names to the same thing and create confusion.

140
00:09:00.990 --> 00:09:08.190
So if we have a situation where we want to create a computed property with the exact same name as a

141
00:09:08.190 --> 00:09:11.790
view store property, I can provide an array here.

142
00:09:12.240 --> 00:09:19.800
And in that array I provide strings representing the top level view X store properties that I want to

143
00:09:19.800 --> 00:09:24.240
pull out and make available as computed properties on Main NAV.

144
00:09:24.630 --> 00:09:27.480
So it's simply going to be a string of is logged in.

145
00:09:29.060 --> 00:09:29.390
All right.

146
00:09:29.630 --> 00:09:35.090
And of course, the beautiful part about the syntax is, again, imagine I have four different computed

147
00:09:35.090 --> 00:09:39.170
properties that I want to create based on four different view store properties.

148
00:09:39.350 --> 00:09:43.040
At that point, it's as simple as adding additional string arguments to the array.

149
00:09:43.190 --> 00:09:45.290
I want property a pulled off.

150
00:09:45.290 --> 00:09:50.360
I want property B, I want property C from my view X store and I want them all available as computed

151
00:09:50.360 --> 00:09:53.360
properties called A, B and C on my main F component.

152
00:09:53.540 --> 00:09:58.850
And so instead of having a method for each one of those and having, you know, 12 lines of code, I

153
00:09:58.850 --> 00:10:03.500
can now pack them into this single array on a single line and consolidate all that code.

154
00:10:03.800 --> 00:10:08.870
So this is basically helping us write these functions, but Vue is going to do that work for us or view

155
00:10:08.870 --> 00:10:10.460
X more specifically in Map State.

156
00:10:10.610 --> 00:10:15.770
It's going to do that work for us and spare us writing all this additional boilerplate code for this

157
00:10:15.770 --> 00:10:17.210
very common operation.

158
00:10:17.600 --> 00:10:23.090
So with that said, I'm going to remove my fake properties and with that even this is beneficial, right?

159
00:10:23.090 --> 00:10:25.100
We have one line of code where there used to be three.

160
00:10:25.340 --> 00:10:30.500
This line of code is doing the exact same thing as our former implementation was doing right here,

161
00:10:30.830 --> 00:10:31.910
the exact same thing.

162
00:10:31.910 --> 00:10:36.920
It's returning a computed object with a property called is logged in where destruction that computed

163
00:10:36.920 --> 00:10:41.900
reference right here and that allows us to remove this form implementation and make it a little bit

164
00:10:41.900 --> 00:10:45.020
lighter and cleaner and spare us the need to write that extra code.

165
00:10:45.260 --> 00:10:48.470
You can see all of our tests are still passing, so this is totally valid.

166
00:10:48.680 --> 00:10:51.050
It's basically doing the exact same thing.

167
00:10:51.050 --> 00:10:56.840
So I'm not introducing anything new in this lesson, but it is a much cleaner and faster way to use

168
00:10:56.840 --> 00:11:03.080
the helper functions in view X to accomplish the common operations we do, such as creating a computed

169
00:11:03.080 --> 00:11:07.850
component property that is a reference to a view store state property.

170
00:11:07.940 --> 00:11:08.240
All right.

171
00:11:08.240 --> 00:11:09.620
That's what maps state helps us with.

172
00:11:09.740 --> 00:11:15.800
It helps us map or in other words, connect the store state to the components computed properties.

173
00:11:16.100 --> 00:11:16.430
All right.

174
00:11:16.670 --> 00:11:18.200
That's all there is to cover in this lesson.

175
00:11:18.200 --> 00:11:19.760
So I will see you in the next one.
