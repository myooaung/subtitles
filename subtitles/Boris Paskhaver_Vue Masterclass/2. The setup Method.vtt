WEBVTT
1
00:00:01.090 --> 00:00:01.900
Okay.

2
00:00:01.900 --> 00:00:08.740
So in order to learn the new composition API, what we're going to do is refactor an old component so

3
00:00:08.740 --> 00:00:13.990
that instead of using the options API, it's going to use the new composition API.

4
00:00:14.320 --> 00:00:18.070
And the component that we're going to target is the accordion component.

5
00:00:18.370 --> 00:00:21.730
Now, as a reminder, the accordion component is this one right here.

6
00:00:21.730 --> 00:00:23.440
In fact, that appears three times.

7
00:00:23.770 --> 00:00:29.590
The accordion component is the one that enables the expandability and collapse ability of the content

8
00:00:29.590 --> 00:00:30.280
that we see here.

9
00:00:30.700 --> 00:00:36.550
So this thing right here and this thing right here, these are all examples of the accordion component.

10
00:00:36.790 --> 00:00:38.500
And if I take you back to this code.

11
00:00:39.640 --> 00:00:42.160
And I open up the accordion view component.

12
00:00:42.910 --> 00:00:44.140
You can see here it is.

13
00:00:44.140 --> 00:00:45.070
It's a basic div.

14
00:00:45.280 --> 00:00:48.550
We have a click event that invokes an open method.

15
00:00:48.820 --> 00:00:55.180
That open method right here alters and is open data property right here and that determines whether

16
00:00:55.180 --> 00:01:00.100
the accordion is open or not, depending on whether it is open or closed.

17
00:01:00.100 --> 00:01:05.650
We present a different font awesome icon, which is a computed property right here and then right here.

18
00:01:05.650 --> 00:01:11.530
We also have the slot content which allows the parent to specify what to place in this section of the

19
00:01:11.530 --> 00:01:18.700
component, and we only reveal that expanded portion of the accordion component if the is open data

20
00:01:18.700 --> 00:01:20.020
property is set to true.

21
00:01:20.280 --> 00:01:20.740
All right.

22
00:01:21.040 --> 00:01:25.540
So the reason this is a really good component to start with is because it's relatively small in its

23
00:01:25.540 --> 00:01:30.190
scope, but it still utilizes a lot of the old options API features.

24
00:01:30.340 --> 00:01:36.070
It has a prop section and as data it has computed properties and it has methods and we're going to see

25
00:01:36.100 --> 00:01:42.430
how we're going to be able to replace all of these old options API concepts using the new syntax in

26
00:01:42.430 --> 00:01:43.660
the composition API.

27
00:01:44.020 --> 00:01:44.410
All right.

28
00:01:45.160 --> 00:01:51.190
So to begin, as I mentioned in the previous lesson, we're going to need a single method called setup.

29
00:01:51.340 --> 00:01:57.310
And that's where we're going to place all of our setup or all of our initialization logic for this according

30
00:01:57.310 --> 00:01:57.790
to component.

31
00:01:58.060 --> 00:02:02.470
So a lot of the logic that we currently have captured across all these different categories, we're

32
00:02:02.470 --> 00:02:04.480
going to pack that all into setup.

33
00:02:04.670 --> 00:02:07.210
We're going to take it incrementally one step at a time.

34
00:02:07.540 --> 00:02:13.630
So the first thing I'd like to do is to comment out everything we have here except for name.

35
00:02:13.870 --> 00:02:15.340
The name property is going to stay.

36
00:02:15.490 --> 00:02:19.960
The rest we're going to comment out and then we're slowly going to replace all of these old features

37
00:02:20.140 --> 00:02:22.960
with the new way of doing things in the composition API.

38
00:02:23.460 --> 00:02:23.770
Right?

39
00:02:24.010 --> 00:02:29.320
So as I mentioned, we're now going to write all of our new logic within a single method called setup.

40
00:02:29.560 --> 00:02:31.150
So I'm going to write the setup method.

41
00:02:31.150 --> 00:02:32.350
It must be called this.

42
00:02:32.590 --> 00:02:35.200
I'm going to provide my method of parentheses and then.

43
00:02:36.280 --> 00:02:37.270
My method body.

44
00:02:37.360 --> 00:02:37.720
All right.

45
00:02:37.870 --> 00:02:40.090
So this is where all of our new logic will go.

46
00:02:40.420 --> 00:02:43.780
Now, view is going to execute this setup method only once.

47
00:02:44.290 --> 00:02:49.080
It's going to do that before it creates the component, but after it deals with the props.

48
00:02:49.090 --> 00:02:50.800
We'll talk more about that in a later lesson.

49
00:02:51.010 --> 00:02:56.170
But the key idea is it is going to run this setup method before it actually puts your component on the

50
00:02:56.170 --> 00:02:56.590
screen.

51
00:02:57.160 --> 00:03:03.430
Another important thing to note here is within this setup method, we can no longer use the this keyword.

52
00:03:03.760 --> 00:03:08.410
So notice here, for example, in the computed property, we're using this to access our piece of data

53
00:03:08.650 --> 00:03:09.530
called is open.

54
00:03:09.580 --> 00:03:11.140
Same thing in our method right here.

55
00:03:11.290 --> 00:03:13.660
We no longer have access to the this keyword.

56
00:03:13.720 --> 00:03:15.700
We are not able to use it yet.

57
00:03:16.630 --> 00:03:21.820
And the technical reason for this is because this usually refers to the current object in JavaScript,

58
00:03:21.820 --> 00:03:22.600
the current reference.

59
00:03:22.810 --> 00:03:29.080
But when the setup method is running, the current component doesn't fully exist yet, so we can't reference

60
00:03:29.080 --> 00:03:29.170
it.

61
00:03:29.680 --> 00:03:30.010
All right.

62
00:03:30.280 --> 00:03:35.710
Another thing to note is that this setup method is going to run before the create, created and mounted

63
00:03:35.710 --> 00:03:36.760
lifecycle hooks.

64
00:03:37.000 --> 00:03:41.320
Now, this component doesn't utilize those lifecycle hooks, but that's just something to think about.

65
00:03:41.560 --> 00:03:47.050
Basically, in summary, Vue is going to run the setup method once before everything in the component

66
00:03:47.050 --> 00:03:49.690
kind of initializes and appears in your browser.

67
00:03:50.050 --> 00:03:50.380
Okay.

68
00:03:51.370 --> 00:03:56.110
So let's begin very slowly and then will build up incrementally over the course of the next couple lessons.

69
00:03:56.470 --> 00:04:02.590
The next thing you should note is that in our setup method, we must always return an object.

70
00:04:03.700 --> 00:04:08.590
And in this object, we're going to define the properties that we want to make available throughout

71
00:04:08.590 --> 00:04:10.000
the HTML template.

72
00:04:10.630 --> 00:04:10.900
All right.

73
00:04:10.900 --> 00:04:16.540
So for example, if I were to define a property here like a of want equal to one and be equal to two

74
00:04:17.020 --> 00:04:22.810
simply by returning an object like this from the setup method view is going to enable us to have properties

75
00:04:22.810 --> 00:04:27.160
called A and B and they're going to be available to be used in the template.

76
00:04:27.520 --> 00:04:33.070
So you can think of this as almost being equivalent to what we had in data right here or computed right

77
00:04:33.070 --> 00:04:33.310
here.

78
00:04:33.490 --> 00:04:38.650
As soon as we declare these properties in the return object, view is going to make them available in

79
00:04:38.650 --> 00:04:39.400
our template.

80
00:04:40.150 --> 00:04:42.490
So let's see a more practical example of this.

81
00:04:42.850 --> 00:04:47.980
You'll notice on line eight we are outputting the value of something that has a name of header.

82
00:04:48.010 --> 00:04:53.640
Right now, the way this component actually works is header is a prop that flows in from the parent.

83
00:04:53.650 --> 00:04:57.790
It's it's a field which is a string that the parent component provides.

84
00:04:57.910 --> 00:05:00.880
And it represents the text that appears at the top of the accordion.

85
00:05:01.240 --> 00:05:04.330
So for now, let's pretend we we let's ignore that.

86
00:05:04.330 --> 00:05:09.190
Let's pretend it doesn't exist and let's pretend header is just going to be a piece of text that exists

87
00:05:09.190 --> 00:05:10.180
on this component.

88
00:05:10.510 --> 00:05:13.300
So let's say we're going to have a header piece of text right here.

89
00:05:15.690 --> 00:05:20.700
And what I'm going to do is create this header as a constant within my setup method.

90
00:05:20.970 --> 00:05:23.040
So right here I'll just use plain JavaScript.

91
00:05:23.310 --> 00:05:26.610
I'll define my header constant and I'll set it equal to be a string.

92
00:05:27.000 --> 00:05:28.110
And let's say I do.

93
00:05:28.140 --> 00:05:29.760
Cool title right here.

94
00:05:30.510 --> 00:05:36.780
So because we return an object with a header property, that means that we're able to use the header

95
00:05:36.780 --> 00:05:38.970
keyword anywhere in my template.

96
00:05:39.270 --> 00:05:44.400
So right now we're going to render or interpolate the value of that header property right here in my

97
00:05:44.400 --> 00:05:45.000
age three.

98
00:05:45.270 --> 00:05:51.120
So what I expect to see when I go back to my browser is we should see the string value cool title displayed

99
00:05:51.120 --> 00:05:51.960
right here.

100
00:05:52.470 --> 00:05:52.770
All right.

101
00:05:52.770 --> 00:05:53.880
So let me go to my browser.

102
00:05:55.350 --> 00:05:58.980
And we'll get see on the left hand side here, everything works as expected.

103
00:05:58.980 --> 00:06:04.770
We see it cool title three times because we've made that the text that we are displaying or interpolating

104
00:06:04.980 --> 00:06:07.800
onto the screen using the double curly brace syntax.

105
00:06:08.520 --> 00:06:08.880
All right.

106
00:06:08.970 --> 00:06:10.380
So let's leave it off here.

107
00:06:10.410 --> 00:06:14.730
We're going to continue chipping away at this over the next couple of lessons and building this component

108
00:06:14.730 --> 00:06:16.500
up back to its original implementation.

109
00:06:16.770 --> 00:06:22.500
But the key thing to remember from this lesson is in the new composition API, we must always define

110
00:06:22.500 --> 00:06:27.270
a setup method in the script section in our component configuration object.

111
00:06:27.630 --> 00:06:33.000
That set up method is going to return a plane JavaScript object, and any properties that we provide

112
00:06:33.000 --> 00:06:37.050
inside that object are going to be available to be used in our template.

113
00:06:37.290 --> 00:06:42.720
The one example we've seen so far is using them directly by interpolating them here as actual text for

114
00:06:42.720 --> 00:06:43.440
the user to see.

115
00:06:43.680 --> 00:06:48.420
But later on, we're going to see how we can also use them in other places, such as directives.

116
00:06:48.450 --> 00:06:48.780
All right.

117
00:06:49.050 --> 00:06:50.040
So lots more to cover.

118
00:06:50.040 --> 00:06:51.690
And I will see you in the next lesson.
