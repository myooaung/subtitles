1
00:00:00,460 --> 00:00:01,390
All right.

2
00:00:01,390 --> 00:00:06,130
So in the previous lesson, we teased the idea of object reactivity.

3
00:00:06,130 --> 00:00:09,700
So let's see how that works with our ref and computed functions.

4
00:00:09,970 --> 00:00:15,130
So let's repeat the same problem that we solved in the previous lesson, but I'll make it a little bit

5
00:00:15,130 --> 00:00:16,090
more complex.

6
00:00:16,420 --> 00:00:22,960
Let's say I have an object called person and person is going to have a name property set to my name

7
00:00:22,960 --> 00:00:23,590
of Boris.

8
00:00:24,160 --> 00:00:30,550
And right below here I'll use Lat and I'll create a variable called title and I want title to be my

9
00:00:30,550 --> 00:00:37,440
name, which I can reference from the person object using dot syntax plus the concatenated prefix or

10
00:00:37,450 --> 00:00:40,600
post fix or however we call it suffix of the great.

11
00:00:40,960 --> 00:00:44,710
So of course if I console.log title right now we'll see Boris the Great.

12
00:00:44,710 --> 00:00:46,900
There's nothing surprising there.

13
00:00:47,200 --> 00:00:54,820
However, if I change the value of person, not name to Peter, predictably, my title will not update.

14
00:00:54,820 --> 00:00:57,040
It's still going to be Boris the Great.

15
00:00:57,430 --> 00:01:02,050
So once again, I want to create the same kind of solution as we had in the previous lesson.

16
00:01:02,260 --> 00:01:09,070
I want to be able to be updating the name property on my person object and have that reflect in something

17
00:01:09,070 --> 00:01:10,750
like a title variable.

18
00:01:10,750 --> 00:01:11,020
Right?

19
00:01:11,380 --> 00:01:17,110
So what I'm going to do is pass this entire object to my ref function from view.

20
00:01:17,560 --> 00:01:19,120
So what is this going to do?

21
00:01:19,420 --> 00:01:27,970
It's going to return the reactive object and that reactive object is going to have a value property

22
00:01:28,240 --> 00:01:33,640
and that value property is going to be this whole object that I passed in.

23
00:01:33,640 --> 00:01:34,720
So let me just show this to you.

24
00:01:34,720 --> 00:01:42,790
I'm going to console.log person dot value and that is going to be my original non reactive object.

25
00:01:42,970 --> 00:01:48,400
This is where it gets a little bit more complicated and confusing because we actually have two objects

26
00:01:48,400 --> 00:01:49,300
floating around here.

27
00:01:49,510 --> 00:01:54,580
The first one is the person object, which is what the raft function returns to us.

28
00:01:54,820 --> 00:01:58,330
That's this complex view object that is tracking reactivity.

29
00:01:58,660 --> 00:02:04,180
And on that person object we have a value property, which is another JavaScript object.

30
00:02:04,300 --> 00:02:07,240
This one is the one that we provide it to the ref function.

31
00:02:07,480 --> 00:02:12,610
It's the exact same idea as we saw in the previous lessons with strings and numbers, but a little bit

32
00:02:12,610 --> 00:02:17,170
more layered, a little bit more multidimensional, which is why I can get a little bit confusing.

33
00:02:17,950 --> 00:02:18,280
All right.

34
00:02:18,550 --> 00:02:24,970
So what do you think is going to happen when we say let title equals person, which is our reactive

35
00:02:24,970 --> 00:02:29,350
object dot value, which is our kind of nested object in there.

36
00:02:29,650 --> 00:02:35,170
That object is going to have a name property and I'm going to add on the grade at the end I'm going

37
00:02:35,170 --> 00:02:41,680
to console.log title and that of course should give us more s great, which is to be expected because

38
00:02:41,680 --> 00:02:43,690
our first calculation tends to be accurate.

39
00:02:43,930 --> 00:02:51,250
But now what happens if I do person dot value that name again reaching into my person reactive object

40
00:02:51,250 --> 00:02:57,310
from view by accessing its value property which gives me my original object which has a name property

41
00:02:57,400 --> 00:03:05,140
which I want to set to Peter and if I console.log title, we're going to see no change and hopefully

42
00:03:05,140 --> 00:03:10,300
that should be expected by now because we know that whenever we want to have a derived calculation,

43
00:03:10,420 --> 00:03:14,290
we have to involve the computed function somehow.

44
00:03:14,710 --> 00:03:15,010
All right.

45
00:03:15,010 --> 00:03:16,270
So how are we going to make that happen?

46
00:03:16,270 --> 00:03:22,420
Well, instead of simply writing this line of code, which is always going to evaluate only once, we

47
00:03:22,420 --> 00:03:28,630
need to tell you to keep re-evaluating some bit of logic whenever our person object changes.

48
00:03:28,900 --> 00:03:29,260
All right.

49
00:03:29,440 --> 00:03:32,230
So we can do that again with our computed function.

50
00:03:32,530 --> 00:03:33,970
What do we pass to computed?

51
00:03:33,970 --> 00:03:40,690
We pass an arrow function and we specify what we want to track or the logic that we want to reevaluate.

52
00:03:40,690 --> 00:03:46,240
And the simple act of placing any dependencies in here means Vue is automatically going to track them.

53
00:03:46,570 --> 00:03:49,960
So how do I get to my name property with my string of Boris?

54
00:03:50,170 --> 00:03:52,960
I have to begin with my person reactive object.

55
00:03:53,110 --> 00:03:55,330
I cannot do person not name.

56
00:03:55,330 --> 00:03:56,770
This is a very common mistake.

57
00:03:57,040 --> 00:04:03,190
Name is not going to be available on person in this case because our ref function always returns a reactive

58
00:04:03,190 --> 00:04:09,310
object that has a value property that gives you the original thing that you said to the ref function.

59
00:04:09,550 --> 00:04:15,820
So in order to get my object with the name property, I have to reference the value property on person

60
00:04:16,030 --> 00:04:19,060
person, dot value, dot name.

61
00:04:19,390 --> 00:04:21,070
What do I want to do with that string?

62
00:04:21,070 --> 00:04:26,230
Whatever it is I want to concatenate the string the great to the end of that.

63
00:04:27,010 --> 00:04:27,310
Right.

64
00:04:27,520 --> 00:04:32,560
And again, this is going to return a very similar reactive object with its own value properties.

65
00:04:32,560 --> 00:04:35,080
So we can actually not use the left here.

66
00:04:35,080 --> 00:04:41,500
We can use cons too, because this object and the title constants reference to that object will not

67
00:04:41,500 --> 00:04:42,820
change throughout the program.

68
00:04:43,060 --> 00:04:45,370
The contents of that object will change.

69
00:04:45,580 --> 00:04:52,360
The value property in that object will change, but the constant title will still continue referencing

70
00:04:52,360 --> 00:04:54,460
the same object in the computer's memory.

71
00:04:54,460 --> 00:04:56,860
So that's why we can get away with Const here.

72
00:04:57,160 --> 00:04:57,430
All right.

73
00:04:57,550 --> 00:04:59,690
So now this should work if I console.

74
00:04:59,780 --> 00:05:05,900
A blog titled dot value because titles that value property is going to be a string.

75
00:05:06,140 --> 00:05:11,690
That string is going to be Boris the Great because this is a value linked to a plain string.

76
00:05:12,020 --> 00:05:21,200
Now if I change this name property again by doing person dot value, that name equals Peter.

77
00:05:21,680 --> 00:05:28,970
Now if I console.log title that value my computed function will rerun view is going to get the fresh

78
00:05:28,970 --> 00:05:34,160
value of person that value, that name, which is now Peter it's going to append Peter the Great.

79
00:05:34,310 --> 00:05:39,500
And so we're going to go from Boris to Great to Peter in the Great and there you go.

80
00:05:39,740 --> 00:05:44,510
So it's the exact same concepts that we've explored in the previous two lessons, but now of course

81
00:05:44,510 --> 00:05:50,330
a little bit more complex because we're passing in an object to ref instead of a primitive value, like

82
00:05:50,330 --> 00:05:51,590
a string or a number.
