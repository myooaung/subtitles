1
00:00:00,610 --> 00:00:01,330
Okay.

2
00:00:01,330 --> 00:00:04,180
So we have a mystery on our hands.

3
00:00:04,180 --> 00:00:09,670
The very last test for our job listings component is failing this one right here.

4
00:00:09,970 --> 00:00:11,470
So let's try to debug it.

5
00:00:11,770 --> 00:00:18,280
The very first thing I did is I focused exclusively on this test by changing this function from it to

6
00:00:18,430 --> 00:00:18,910
fit.

7
00:00:19,120 --> 00:00:22,930
And that, of course, just simply stands for focus on this test.

8
00:00:23,170 --> 00:00:29,050
So what we're telling just here is whenever it runs this file only run this test right here.

9
00:00:29,140 --> 00:00:31,000
Don't worry about running the other ones.

10
00:00:31,240 --> 00:00:36,250
We don't want to run the other ones when we're debugging because that of course slows down the feedback

11
00:00:36,250 --> 00:00:36,490
loop.

12
00:00:36,640 --> 00:00:42,220
By focusing exclusively on this test, we can only have just rerun this one and then quickly test whether

13
00:00:42,220 --> 00:00:45,400
our change or our solution fixes the problem.

14
00:00:45,700 --> 00:00:50,380
So I'm going to save this and we're going to see the test rerun and it's still failing.

15
00:00:50,590 --> 00:00:56,350
And another benefit of focusing exclusively on this test is we can eliminate the possibility of pollution.

16
00:00:56,530 --> 00:01:01,840
So now it's a lot less likely that some other tests setup is affecting this test because why don't we

17
00:01:01,840 --> 00:01:03,910
run it in isolation by itself?

18
00:01:03,910 --> 00:01:05,800
It's still failing, right?

19
00:01:06,010 --> 00:01:07,660
So something must be going wrong here.

20
00:01:08,020 --> 00:01:13,630
So my first thought was let me try using console.log to look at a couple values right here that might

21
00:01:13,630 --> 00:01:15,850
be relevant, such as next page or max page.

22
00:01:16,090 --> 00:01:22,900
I began with the jobs property because of course, as a reminder, this next page computed property

23
00:01:23,050 --> 00:01:29,200
is the one that determines whether this router link that we want to render does it's dependent on this

24
00:01:29,200 --> 00:01:30,250
v if directive.

25
00:01:30,460 --> 00:01:34,270
If the scenario is to a truth value, then this router link will render.

26
00:01:34,360 --> 00:01:37,230
And that of course is what we're looking for in this data test strip.

27
00:01:37,540 --> 00:01:43,510
So my first guess was VRF for some reason is evaluating to false and that's why this thing is not rendering

28
00:01:43,510 --> 00:01:44,020
in our test.

29
00:01:44,500 --> 00:01:51,280
Well, if we scroll down to this implementation, we'll see that the way that it can return false or

30
00:01:51,280 --> 00:01:54,910
a false value is if this expression evaluates to false.

31
00:01:55,120 --> 00:01:59,590
Because if this ternary expression evaluates the false, then we are returning undefined.

32
00:01:59,590 --> 00:02:02,230
And that of course will cause the VRF to not render.

33
00:02:02,410 --> 00:02:05,590
So I thought that something was going funky here in this implementation.

34
00:02:05,860 --> 00:02:11,560
The very first thing I did is I console.log this the jobs that left because I was just curious what

35
00:02:11,560 --> 00:02:12,340
that value was.

36
00:02:13,490 --> 00:02:18,680
Even though we tried doing the Flush Promises solution, I was just wanted to make sure that we were

37
00:02:18,680 --> 00:02:19,970
not, you know, going crazy here.

38
00:02:20,330 --> 00:02:25,250
So here you can see we have two console.log values and they're what we expect when the component first

39
00:02:25,250 --> 00:02:30,000
mounts, mounts as it's making that fake API request, it has zero jobs.

40
00:02:30,200 --> 00:02:36,050
And then we can see here when the component receives those jobs from the promised resolution, the job's

41
00:02:36,050 --> 00:02:37,730
property updates to 15.

42
00:02:37,940 --> 00:02:41,180
And remember, that happens when we call flush promises right here.

43
00:02:41,480 --> 00:02:47,870
So by the time we run this code on line 82 to look for next page link this that jobs should already

44
00:02:47,870 --> 00:02:51,470
be an array with a length of 15 of those job objects.

45
00:02:51,480 --> 00:02:52,820
So something is going wrong here.

46
00:02:53,090 --> 00:02:53,460
All right.

47
00:02:53,480 --> 00:02:55,760
But we do have the correct jobs.

48
00:02:55,760 --> 00:02:56,960
We've correctly received them.

49
00:02:57,260 --> 00:03:02,960
So, of course, my next thing, my next step was to look at the values of next page and max page.

50
00:03:03,170 --> 00:03:09,260
So right here, I'm going to console.log next page and I'm going to output it with next page.

51
00:03:09,770 --> 00:03:12,800
And then right below it, I'm going to console.log Max Page.

52
00:03:13,770 --> 00:03:15,270
And I want to take a look at Max Page.

53
00:03:16,480 --> 00:03:20,740
And in case there are multiple outputs, I always want to make sure I look at the last one because that

54
00:03:20,740 --> 00:03:24,310
reflects what happens when I resolve the promise and get my jobs.

55
00:03:24,580 --> 00:03:26,160
So here is where our bug is.

56
00:03:26,170 --> 00:03:28,840
Take a look here for a second and see if you can figure it out.

57
00:03:29,200 --> 00:03:33,430
So we are on page one, of course, and we're getting 15 total jobs, right?

58
00:03:33,700 --> 00:03:36,460
So our next page is simply one more than our current page.

59
00:03:36,460 --> 00:03:37,870
So one plus one is two?

60
00:03:37,960 --> 00:03:38,740
That's correct.

61
00:03:38,750 --> 00:03:39,880
Our next page is two.

62
00:03:40,180 --> 00:03:45,760
Then we do the check here to check if the next page is permissible because it happens to be less than

63
00:03:45,760 --> 00:03:47,440
or equal to the max page.

64
00:03:47,590 --> 00:03:52,690
So if our next page is less than or equal to the next, the max page, which should be two in this case.

65
00:03:52,690 --> 00:03:54,310
Right, because we have 15 jobs.

66
00:03:54,310 --> 00:03:58,060
So there should be up to two pages because each page can have ten jobs.

67
00:03:58,210 --> 00:04:00,160
Our max page should be two.

68
00:04:00,460 --> 00:04:04,720
However, you'll notice here that our Max page is actually 1.5.

69
00:04:05,020 --> 00:04:06,010
So what's going on here?

70
00:04:06,310 --> 00:04:12,010
Well, this evaluation right here, JavaScript is performing floating point division.

71
00:04:12,220 --> 00:04:18,280
So the length of the jobs array is 15 and 15 divided by ten is 1.5.

72
00:04:18,970 --> 00:04:19,180
Right?

73
00:04:19,180 --> 00:04:25,330
So this is where our mathematical logic is wrong because if we have 15 jobs, in fact, if we have 11

74
00:04:25,330 --> 00:04:31,690
or 12 or 13 or 14 or 15 jobs, etc., our max page should not be 1.1 or 1.2.

75
00:04:31,870 --> 00:04:34,000
It should actually be rounded up to two.

76
00:04:34,030 --> 00:04:38,230
Right, because we can have as many as 20 jobs on two total pages.

77
00:04:38,560 --> 00:04:43,390
So what's happening here is this floating point division is not rounding up to the next integer to the

78
00:04:43,390 --> 00:04:46,420
next whole number, to the actual max page of two.

79
00:04:46,660 --> 00:04:53,440
And thus when JavaScript is evaluating, it's saying, well, two is not less than or equal to 1.5,

80
00:04:53,440 --> 00:04:54,310
it is greater than.

81
00:04:54,490 --> 00:05:00,260
So this is a value adding to false, which of course returns the undefined, which makes Vaf evaluate

82
00:05:00,280 --> 00:05:02,350
a false and not render the router link.

83
00:05:02,500 --> 00:05:07,750
So the data test attribute is never present, which means our test does not find it, and thus our test

84
00:05:07,750 --> 00:05:08,140
fails.

85
00:05:08,470 --> 00:05:13,450
So what we need to do in JavaScript terms is we need to take this floating point number and we need

86
00:05:13,450 --> 00:05:16,720
to round it up to the next hole number, the next integer.

87
00:05:16,960 --> 00:05:22,870
The reason we missed this earlier is just a matter of coincidence, because in the real world our jobs

88
00:05:23,110 --> 00:05:29,950
are array from our fake back end was returning 100 jobs and 100 is perfectly divisible by ten, so there

89
00:05:29,950 --> 00:05:30,880
was nothing left over.

90
00:05:31,090 --> 00:05:32,280
This is a situation.

91
00:05:32,310 --> 00:05:33,700
We have some jobs left over.

92
00:05:33,820 --> 00:05:37,360
We have 15, so only five can fit on the second page.

93
00:05:37,510 --> 00:05:40,210
But that doesn't mean that the max page is 1.5.

94
00:05:40,210 --> 00:05:41,700
The max page is still two.

95
00:05:42,040 --> 00:05:48,430
So in JavaScript, the way that we can round a floating point number up to the next integer is by using

96
00:05:48,430 --> 00:05:51,370
the seal or ceiling method on the math object.

97
00:05:51,580 --> 00:05:58,570
So right here on the math object, capital M there is a method called seal and you could see it returns

98
00:05:58,570 --> 00:06:02,350
the smallest integer greater than or equal to the numeric argument.

99
00:06:02,560 --> 00:06:06,940
So if we give it 1.1, we give it 1.2, we give it 1.51, 1.6.

100
00:06:07,180 --> 00:06:11,200
It's going to rounded up to the next whole number in this case, two, and that's going to solve our

101
00:06:11,200 --> 00:06:12,310
exact problem for us.

102
00:06:12,310 --> 00:06:17,710
So I save this Max Page is going to properly evaluate it to the next page is now going to be two.

103
00:06:17,710 --> 00:06:19,090
Two is still equal to two.

104
00:06:19,210 --> 00:06:22,120
So this evaluates to true we return the next page.

105
00:06:22,240 --> 00:06:25,990
That is a truth value that makes the f value to true.

106
00:06:26,170 --> 00:06:28,900
Render this root or link with the data test attribute.

107
00:06:29,110 --> 00:06:35,380
Our test is able to find it and thus this exists now evaluates the true and we can see this is all passing.

108
00:06:35,620 --> 00:06:40,210
So if I remove my focus and try to run everything all at once, there we go.

109
00:06:40,210 --> 00:06:45,670
Everything in our job listings component is passing and this is a great example of how tests can really

110
00:06:45,760 --> 00:06:49,660
help you capture something that the real world may not always make a parent.

111
00:06:49,660 --> 00:06:49,930
Right?

112
00:06:50,050 --> 00:06:52,600
We just happen to have 100 jobs being returned.

113
00:06:52,810 --> 00:06:57,250
So we missed this detail of what happens when we have a couple jobs that we can render on a given page.

114
00:06:57,460 --> 00:07:03,670
But we were able to identify this issue by having a lot of diverse, different tests that test for different

115
00:07:03,670 --> 00:07:04,030
things.

116
00:07:04,030 --> 00:07:04,390
All right.

117
00:07:04,660 --> 00:07:05,950
So super happy with this bug.

118
00:07:05,950 --> 00:07:09,460
This is a really fun bug to debug and I will see you in the next lesson.
