1
00:00:00,570 --> 00:00:01,230
Okay.

2
00:00:01,230 --> 00:00:07,320
So now we have our font awesome icon registered as a global component, which means we can use it in

3
00:00:07,320 --> 00:00:09,990
any of our own components, including sub nav.

4
00:00:10,320 --> 00:00:14,880
So here I have sub nav open and I'm going to add this icon right here in this div.

5
00:00:15,210 --> 00:00:17,530
So let's remove this placeholder text.

6
00:00:17,550 --> 00:00:19,590
I'm going to break this up onto a new line.

7
00:00:19,770 --> 00:00:25,230
And as I mentioned, we can simply render our font awesome icon here in line.

8
00:00:25,230 --> 00:00:27,420
We do not need to import anything.

9
00:00:27,420 --> 00:00:28,740
We do not need to register components.

10
00:00:29,100 --> 00:00:33,660
One thing I do want to do though is I want to add another div just to form a box around what I'm going

11
00:00:33,660 --> 00:00:39,300
to add because I'm going to add both the icon and then the text next to it that's going to say some

12
00:00:39,300 --> 00:00:40,530
number of jobs matched.

13
00:00:40,920 --> 00:00:46,860
So as I mentioned in the previous lesson, we registered a component using this syntax font.

14
00:00:46,890 --> 00:00:47,670
Dash Awesome.

15
00:00:47,670 --> 00:00:48,480
Dash icon.

16
00:00:48,480 --> 00:00:50,610
That was the first argument to the component method.

17
00:00:50,850 --> 00:00:56,130
So we can use it right here and I'm going to make it a self-closing component like so again, take a

18
00:00:56,130 --> 00:01:01,530
second to notice that we can now use this component right here in line in our template with no additional

19
00:01:01,530 --> 00:01:02,910
imports in the script section.

20
00:01:03,090 --> 00:01:04,860
This is not a local component.

21
00:01:04,860 --> 00:01:07,050
This is a globally registered component.

22
00:01:07,440 --> 00:01:13,680
Now by itself, of course, if we render this font awesome, icon font awesome has no clue which component

23
00:01:13,680 --> 00:01:14,610
we want to use.

24
00:01:14,610 --> 00:01:14,940
Right?

25
00:01:14,940 --> 00:01:17,820
On the website we saw that there were 7000 potential options.

26
00:01:18,150 --> 00:01:23,790
So in this case, we have a parent component of sub nav rendering a child component of font.

27
00:01:23,820 --> 00:01:24,510
Awesome icon.

28
00:01:24,780 --> 00:01:30,150
Well, if you think back to the previous section of the course, how can a parent component customize

29
00:01:30,240 --> 00:01:32,130
details of how the child renders?

30
00:01:32,400 --> 00:01:34,590
Well, you may recall something called props.

31
00:01:34,590 --> 00:01:41,370
Write props are inputs or arguments that we can pass to a component, much in the same way that we pass

32
00:01:41,370 --> 00:01:42,510
arguments to functions.

33
00:01:42,810 --> 00:01:46,440
And the prop that we're going to need here is conveniently called icon.

34
00:01:46,590 --> 00:01:51,480
And the way you can find this, of course, is by reading the documentation for this view implementation

35
00:01:51,480 --> 00:01:52,110
of font.

36
00:01:52,140 --> 00:01:52,530
Awesome.

37
00:01:52,800 --> 00:01:56,850
So I'm going to have a prop called Icon.

38
00:01:57,060 --> 00:02:01,980
And the argument for this prop is actually going to be an array right now.

39
00:02:01,980 --> 00:02:06,600
As a reminder, whenever you have a complex argument here, that is not a string, right?

40
00:02:06,600 --> 00:02:13,380
If it's an array or an object or a boolean, remember that we need to use the v bind syntax because

41
00:02:13,380 --> 00:02:16,380
if we don't view is going to interpret as a plain string.

42
00:02:16,590 --> 00:02:22,590
So for example, if I tried to specify an array here like so and I do not provide my v bind syntax,

43
00:02:22,590 --> 00:02:27,660
my v bind directive view is going to think we're passing in a string with a square bracket and another

44
00:02:27,660 --> 00:02:28,320
square bracket.

45
00:02:28,350 --> 00:02:28,590
Right?

46
00:02:28,590 --> 00:02:30,270
So we need to use the V bind directive.

47
00:02:30,510 --> 00:02:33,300
And as a reminder, there's two syntactical options available.

48
00:02:33,480 --> 00:02:35,400
We can either do this v bind.

49
00:02:35,580 --> 00:02:39,480
That is the long form way, but the shortcut is to simply use the colon.

50
00:02:39,870 --> 00:02:45,360
So colon icon makes this prop a dynamic value which allows us to feed in whatever we want, such as

51
00:02:45,360 --> 00:02:45,780
an array.

52
00:02:46,380 --> 00:02:51,990
Now this is going to be an array of two strings, and given that we have double quotes around it, in

53
00:02:51,990 --> 00:02:56,880
order to write out these strings and avoid any issues with the JavaScript interpreter, we need to actually

54
00:02:56,880 --> 00:03:00,420
write our strings in single quotes, which is totally valid in JavaScript.

55
00:03:00,720 --> 00:03:03,870
Our first argument in the array is going to be f a s.

56
00:03:04,110 --> 00:03:05,490
That is simply short for font.

57
00:03:05,520 --> 00:03:05,970
Awesome.

58
00:03:06,150 --> 00:03:10,320
I think the reason they do this is because they have their free tier and their premium tier.

59
00:03:10,440 --> 00:03:14,040
And here I believe you might be specifying which one of those you want to use.

60
00:03:14,160 --> 00:03:17,160
They're sort of like different folders or categories of icons.

61
00:03:17,520 --> 00:03:22,500
And then the second argument here is going to be the actual font awesome icon that we want to use within

62
00:03:22,500 --> 00:03:23,190
that category.

63
00:03:23,340 --> 00:03:28,170
And for us, of course, we only have one registered with our library and that is search.

64
00:03:28,380 --> 00:03:33,360
So we can write out search in all lowercase and that by itself should render our icons.

65
00:03:33,360 --> 00:03:37,560
So I'm going to go back to my browser and lo and behold, it's as simple as that.

66
00:03:37,740 --> 00:03:41,480
We have our font awesome icon appearing right here on our sub nav.

67
00:03:41,490 --> 00:03:42,600
That looks awesome.

68
00:03:43,290 --> 00:03:47,190
Okay, so to close this lesson off, let's go ahead and add a few more things here.

69
00:03:47,610 --> 00:03:51,660
What I want to add to the right hand side of that icon is a little bit of margin.

70
00:03:51,660 --> 00:03:56,760
I want to separate it from the text that's going to tell me how many jobs I've matched so I can actually

71
00:03:56,760 --> 00:04:02,340
apply a Tailwind class or any CSS class on an existing view component.

72
00:04:02,580 --> 00:04:06,240
So it's going to write out class here and write out a sample margin, right?

73
00:04:06,240 --> 00:04:06,690
Class.

74
00:04:06,690 --> 00:04:12,300
So there is a tailwind collection of classes called AMR, which apply margin on only the right side.

75
00:04:12,510 --> 00:04:15,930
And I'm going to do an R three, which is 12 pixels.

76
00:04:16,620 --> 00:04:18,240
So you might be curious, how does this work?

77
00:04:18,540 --> 00:04:23,760
The way it works, since we're dealing with a component is view is going to take our styles and it's

78
00:04:23,760 --> 00:04:28,890
going to apply them to the first actual element within the component.

79
00:04:29,100 --> 00:04:36,300
So however the developers built the font awesome icon component, whatever its most top level HTML element

80
00:04:36,300 --> 00:04:41,850
is sort of like we have div in this file, whatever they configured, we're going to apply this class

81
00:04:42,030 --> 00:04:42,780
to that.

82
00:04:43,080 --> 00:04:49,020
So it's not really applying the styles to a component since a component is kind of our own view of specific

83
00:04:49,020 --> 00:04:50,160
related thing.

84
00:04:50,370 --> 00:04:57,000
But it is going to transfer those styles to the top level element of that component, which is sort

85
00:04:57,000 --> 00:04:58,470
of doing the same thing that way.

86
00:04:58,470 --> 00:04:59,820
We don't have to know the internals.

87
00:05:00,110 --> 00:05:03,260
Of how the developers built the font awesome icon component.

88
00:05:03,440 --> 00:05:07,940
However they built it, whether it's a divan there or an H1 or a P, we don't really care.

89
00:05:08,090 --> 00:05:10,160
We're just going to add this class to that.

90
00:05:10,160 --> 00:05:13,790
And that's what we accomplished by applying the class to the component itself.

91
00:05:14,300 --> 00:05:14,660
Awesome.

92
00:05:14,660 --> 00:05:16,250
So that's going to add a little bit of spacing.

93
00:05:16,940 --> 00:05:22,580
And then obviously the next thing I want to add is going to be the actual words that say how many jobs

94
00:05:22,580 --> 00:05:23,060
we matched.

95
00:05:23,060 --> 00:05:28,490
So I'm going to follow the HTML elements structure that I saw on the Google Careers website, which

96
00:05:28,490 --> 00:05:31,220
is we're going to begin with a span and a closing span.

97
00:05:31,460 --> 00:05:34,010
And within that span we're going to have another span.

98
00:05:34,790 --> 00:05:42,200
This inner span is specifically going to be the green colored text that has the number of jobs.

99
00:05:42,200 --> 00:05:48,290
So it says something like a thousand jobs matched and that thousand is going to be in a green color

100
00:05:48,290 --> 00:05:51,050
while the jobs matched is going to be an irregular color.

101
00:05:51,170 --> 00:05:54,020
So this internal span is is covering that number.

102
00:05:54,320 --> 00:06:00,680
So here I'm going to apply a class and that class is going to be text dash brand green one.

103
00:06:00,890 --> 00:06:07,880
Once again, as a reminder, brand green one is a color that we configured in our Tailwind configs class.

104
00:06:08,120 --> 00:06:11,180
So Tailwind gives us this CSS class out of the box.

105
00:06:11,510 --> 00:06:16,340
And as I mentioned, we have not built the infrastructure yet to actually have jobs and filters.

106
00:06:16,550 --> 00:06:19,970
So what I'm going to do right now is just hard code, an arbitrary value.

107
00:06:19,970 --> 00:06:22,580
And here I'm going to choose 16 of 53.

108
00:06:23,000 --> 00:06:27,590
I promise you later in the course, we're going to come back and make this number dynamic based on the

109
00:06:27,590 --> 00:06:29,570
actual number of jobs that the user is filtered.

110
00:06:29,750 --> 00:06:33,290
But obviously, we're not quite there yet, and we're building our Web page from top to bottom.

111
00:06:33,410 --> 00:06:34,670
So we will come back to this.

112
00:06:34,670 --> 00:06:37,250
This is just a placeholder, placeholder value.

113
00:06:37,820 --> 00:06:38,150
All right.

114
00:06:38,330 --> 00:06:42,200
So after this, I'm just going to put a space here and write jobs matched.

115
00:06:43,680 --> 00:06:44,250
Save this.

116
00:06:44,250 --> 00:06:48,450
It looks like it's going to break it up onto a single line, or rather not break it up, but consolidate.

117
00:06:48,690 --> 00:06:51,960
I'm going to remove the space at the end because I know spans can be pretty picky.

118
00:06:52,230 --> 00:06:54,210
I'm going to remove this space right here as well.

119
00:06:54,220 --> 00:06:56,320
I don't think it's necessary and that should be good.

120
00:06:56,340 --> 00:07:01,590
So we have an inner span with our green font for the number and then we have the outer span contain

121
00:07:01,590 --> 00:07:03,660
the additional text of jobs matched.

122
00:07:03,990 --> 00:07:04,290
Okay.

123
00:07:04,290 --> 00:07:07,980
So let's see what this looks like in the browser transition back.

124
00:07:07,980 --> 00:07:08,960
And there we go.

125
00:07:09,180 --> 00:07:13,440
We have our font awesome icon, which is a global view component from another library.

126
00:07:13,560 --> 00:07:17,820
And now we've combined it with our own code and now we have that special styling for that number.

127
00:07:18,030 --> 00:07:19,890
1653 job is matched.

128
00:07:19,920 --> 00:07:21,180
Things are looking pretty good.

129
00:07:21,180 --> 00:07:24,510
I can also give you a side by side comparison.

130
00:07:25,970 --> 00:07:31,730
If I go to careers dot Google here and I go to jobs, we can see here what it looks like in the real

131
00:07:31,730 --> 00:07:32,060
world.

132
00:07:32,300 --> 00:07:36,470
It's looking, you know, pretty close, not perfect, but good enough for me.

133
00:07:36,500 --> 00:07:37,670
So things are looking pretty good.

134
00:07:37,670 --> 00:07:38,690
We're making lots of progress.

135
00:07:38,960 --> 00:07:40,820
And I will see you in the next lesson.
