WEBVTT
1
00:00:00.360 --> 00:00:01.320
All right.

2
00:00:01.320 --> 00:00:05.040
So let's move one step closer to dynamic pagination.

3
00:00:05.340 --> 00:00:09.510
The way that we're going to enable pagination is using query params.

4
00:00:09.690 --> 00:00:16.050
We're going to add a key value pair to the end of the URL of the jobs results page that's going to tell

5
00:00:16.050 --> 00:00:18.360
us what page the user is on.

6
00:00:18.720 --> 00:00:24.900
And when they're on a given page, we're going to use that number to select a subset of ten jobs from

7
00:00:24.900 --> 00:00:26.130
our jobs array.

8
00:00:26.490 --> 00:00:28.020
So let me show you how this is going to work.

9
00:00:28.020 --> 00:00:33.600
The first thing I'd like to do is in my display jobs computed property, and the only reason I'm doing

10
00:00:33.600 --> 00:00:37.890
it here is because it's probably the best place to do it, because it's just some kind of method that

11
00:00:37.890 --> 00:00:38.490
we can use.

12
00:00:38.760 --> 00:00:43.890
I just want to console.log the value of this dot root.

13
00:00:44.250 --> 00:00:50.070
As a reminder, when we added Vue router, Vue router went through every component and it gave us access

14
00:00:50.070 --> 00:00:51.500
to this root object.

15
00:00:51.540 --> 00:00:54.480
I just want to show you what it looks like in the browser as a review.

16
00:00:54.840 --> 00:00:59.850
So if I go back to my browser, here is what that object looks like right here, and you'll notice that

17
00:00:59.850 --> 00:01:06.060
it has this query object and that query object is going to hold any query params that I provide in the

18
00:01:06.060 --> 00:01:06.600
URL.

19
00:01:06.870 --> 00:01:12.810
So for example, if I reload this page and I add a query pram at the end and the way that I can do that

20
00:01:12.810 --> 00:01:15.840
is by putting a question mark and then my key value pairs.

21
00:01:16.170 --> 00:01:21.330
So let's call our key page since that represents the page that the user is going to be on.

22
00:01:21.600 --> 00:01:23.670
And then I provide a value with an equal sign.

23
00:01:23.910 --> 00:01:26.340
So let's say the user's going to be on page three.

24
00:01:26.400 --> 00:01:31.620
So I'll do page equals three and I'll execute this and we'll get this new root object.

25
00:01:31.950 --> 00:01:36.180
You'll notice in this round object we're going to have that query property and that's going to have

26
00:01:36.180 --> 00:01:37.830
all of those key value pairs.

27
00:01:38.040 --> 00:01:43.230
So because we called our key page, we're going to see the value page right here and its corresponding

28
00:01:43.230 --> 00:01:44.400
value is three.

29
00:01:44.640 --> 00:01:49.950
Notice that that comes in as a string because this is all text when it comes to the browser and view

30
00:01:49.950 --> 00:01:50.640
interpreting it.

31
00:01:50.940 --> 00:01:52.710
But we still have the value we need.

32
00:01:52.710 --> 00:01:58.350
If we know that we are on page three, then we know we need the third batch of ten jobs, right?

33
00:01:58.620 --> 00:02:05.100
So we can use that logic in the computed property to calculate which batch of ten we want to display

34
00:02:05.100 --> 00:02:05.850
to the user.

35
00:02:05.850 --> 00:02:07.200
So let me show you how that's going to work.

36
00:02:07.200 --> 00:02:09.570
We're going to transition back to this code.

37
00:02:11.650 --> 00:02:14.200
And let's remove this line since we no longer need it.

38
00:02:15.250 --> 00:02:17.440
And here's what our code is going to look like.

39
00:02:17.440 --> 00:02:25.450
Let's first get that value from the query params so we know we have the root object on every view component.

40
00:02:25.690 --> 00:02:30.640
We know that we have the query property on it, which gives me a nested object and I'm going to assume

41
00:02:30.640 --> 00:02:34.210
that that query object is going to have a page property on it.

42
00:02:34.210 --> 00:02:35.890
That page name will be up to us.

43
00:02:36.220 --> 00:02:36.610
Now.

44
00:02:36.760 --> 00:02:40.930
It is possible that the user will not have the page query params.

45
00:02:41.110 --> 00:02:43.840
In that case this is going to evaluate to undefined.

46
00:02:44.080 --> 00:02:47.710
So what I'd like to do is to provide a reasonable fallback value.

47
00:02:47.710 --> 00:02:53.170
If the user does not provide query params, I probably want to show them the first batch of ten jobs.

48
00:02:53.440 --> 00:02:59.440
So what I can do here is provide a fallback string using the OR operator and I'll provide a fallback

49
00:02:59.440 --> 00:03:00.430
string of one.

50
00:03:00.760 --> 00:03:05.230
So let me assigned this to a constant called page string and just reiterate what we're doing here.

51
00:03:05.560 --> 00:03:10.630
We're going to try to access the page property on the query object, which we are going to assume is

52
00:03:10.630 --> 00:03:13.330
going to be some kind of string representing the page, right?

53
00:03:13.480 --> 00:03:18.220
A string of one, a string of two or a string of three, etc. The exact same thing we just saw in the

54
00:03:18.220 --> 00:03:18.700
browser.

55
00:03:18.700 --> 00:03:20.080
We're going to try to extract that.

56
00:03:20.350 --> 00:03:26.440
If for some reason the page property doesn't exist on a query object, we're going to fall back to this

57
00:03:26.440 --> 00:03:31.660
value because this will evaluate to undefined, which means JavaScript will take the value on the right

58
00:03:31.660 --> 00:03:33.910
hand side and that's going to be a string of one.

59
00:03:34.090 --> 00:03:38.590
So the end of the day, we're always going to have some kind of number here, either either one as a

60
00:03:38.590 --> 00:03:43.870
fallback or whatever the user actually provides in the query params, one, two, three, etc..

61
00:03:44.050 --> 00:03:44.410
All right.

62
00:03:44.650 --> 00:03:46.450
So now I have a number as a string.

63
00:03:46.450 --> 00:03:50.020
I want to get that a string as a actual number.

64
00:03:50.230 --> 00:03:53.020
So in order to do that, I'll create a constant called page number.

65
00:03:53.440 --> 00:04:00.730
And in JavaScript I can invoke the pass int method on my number class or my number object and here I

66
00:04:00.730 --> 00:04:02.140
can pass in my page string.

67
00:04:02.530 --> 00:04:06.640
So now I have a number, I have something like the number two, let's say here.

68
00:04:06.640 --> 00:04:06.940
All right.

69
00:04:06.940 --> 00:04:07.840
Or the number one.

70
00:04:08.380 --> 00:04:08.650
Okay.

71
00:04:08.650 --> 00:04:10.270
So what do I want to do with that number?

72
00:04:10.450 --> 00:04:15.190
Well, that number is going to represent the batch of jobs that I want to get.

73
00:04:15.190 --> 00:04:17.680
If I'm on page one, I want the first ten jobs.

74
00:04:17.890 --> 00:04:21.100
If I'm on page two, I want the second batch of ten jobs.

75
00:04:21.100 --> 00:04:22.480
So jobs ten through 20.

76
00:04:22.660 --> 00:04:26.410
If I'm on page three, I want the third batch of jobs and so on.

77
00:04:26.680 --> 00:04:29.980
And in order to do that, of course, we're still going to need to use the slice method.

78
00:04:30.160 --> 00:04:34.870
We're going to need to calculate the dynamic starting index and the dynamic ending index.

79
00:04:34.930 --> 00:04:36.880
So let me show you the formulas we're going to do for that.

80
00:04:36.880 --> 00:04:40.900
I'm just going to create two constants called First Job Index and last job index.

81
00:04:41.200 --> 00:04:43.210
So the first one is going to be first job index.

82
00:04:44.400 --> 00:04:47.550
And here's going to be the formula for finding the starting index.

83
00:04:47.700 --> 00:04:49.420
I'm going to take my page number.

84
00:04:49.920 --> 00:04:53.880
I'm going to subtract one and I'm going to multiply that by ten.

85
00:04:54.330 --> 00:04:59.400
Now, make sure you wrap this in parentheses, because we want this operation to take place first before

86
00:04:59.400 --> 00:05:00.570
the multiplication.

87
00:05:00.870 --> 00:05:02.890
So let me give you an example of how this is going to work.

88
00:05:02.910 --> 00:05:05.280
We're always going to start in at least page one.

89
00:05:05.550 --> 00:05:10.050
If we start on page one, then it's going to be one minus one, which is going to value it two zero

90
00:05:10.200 --> 00:05:11.880
times ten, which is still zero.

91
00:05:12.060 --> 00:05:14.600
So we're going to start on index position zero.

92
00:05:14.610 --> 00:05:18.360
So the first job in the original array.

93
00:05:18.600 --> 00:05:20.940
Conversely, let's say we're on page number two.

94
00:05:20.940 --> 00:05:22.200
If we're in page number two.

95
00:05:22.320 --> 00:05:23.940
Two minus one is going to be one.

96
00:05:24.120 --> 00:05:25.650
One times ten is going to be ten.

97
00:05:25.800 --> 00:05:28.590
So our first job index is going to be ten.

98
00:05:28.980 --> 00:05:29.280
Right.

99
00:05:29.280 --> 00:05:34.440
Which represents the technically the 11th item in the array, but the 11th job in the array is what

100
00:05:34.440 --> 00:05:37.080
we do want to display on page number two.

101
00:05:37.350 --> 00:05:37.620
Right.

102
00:05:37.620 --> 00:05:39.510
Because the first ten jobs are on page one.

103
00:05:39.660 --> 00:05:41.790
The 11th job starts on page two.

104
00:05:41.910 --> 00:05:44.220
And this logic will continue all the way to the end.

105
00:05:44.430 --> 00:05:44.790
All right.

106
00:05:45.090 --> 00:05:45.810
Now, what about.

107
00:05:46.940 --> 00:05:50.000
Our last job index for a given page.

108
00:05:50.180 --> 00:05:53.780
That's just going to be page number, times ten.

109
00:05:54.170 --> 00:06:02.510
So for on page one, for example, then our last job index is going to be one times ten, which is ten,

110
00:06:02.510 --> 00:06:06.830
which is exactly what we want is going to be starting an index zero and going all the way up to index

111
00:06:06.830 --> 00:06:09.920
ten, which means we're going to have the first ten jobs.

112
00:06:10.190 --> 00:06:15.470
If we're on page number two, then this is going to be starting an index ten page two means page number

113
00:06:15.470 --> 00:06:18.500
of two times ten, meaning the last job index is 20.

114
00:06:18.680 --> 00:06:21.710
So we're going to go from jobs ten through 2010.

115
00:06:21.710 --> 00:06:23.240
Up two, but not including 20.

116
00:06:23.360 --> 00:06:25.550
Gives me the next batch of ten jobs.

117
00:06:25.730 --> 00:06:27.590
Same thing with page number three.

118
00:06:27.590 --> 00:06:31.610
That's going to be starting at index 20 and proceeding to index 30, etc..

119
00:06:31.670 --> 00:06:37.670
So we're always going to have a subset of two or ten jobs in between these two index values if we use

120
00:06:37.670 --> 00:06:38.270
these formulas.

121
00:06:38.570 --> 00:06:44.210
So now that I have that logic calculated, of course what we can do is we can pass those two indexes

122
00:06:44.210 --> 00:06:46.040
to our slice method.

123
00:06:46.040 --> 00:06:52.610
So I'm going to start pulling out my first array element and my first job index, and then I'm going

124
00:06:52.610 --> 00:06:55.700
to go up to but not include my last job index.

125
00:06:55.700 --> 00:06:58.490
And this, again, as a reminder, will be just ten jobs.

126
00:06:58.550 --> 00:06:58.910
All right.

127
00:06:59.210 --> 00:07:03.770
So let's go to the browser and let's make sure everything is working so right here if I refresh the

128
00:07:03.770 --> 00:07:04.190
page.

129
00:07:05.070 --> 00:07:06.180
And I scroll down.

130
00:07:06.180 --> 00:07:07.350
We do still have.

131
00:07:08.950 --> 00:07:09.690
Ten jobs.

132
00:07:09.700 --> 00:07:11.110
We are, in fact, on page three.

133
00:07:11.110 --> 00:07:12.040
So let me remove this.

134
00:07:12.040 --> 00:07:15.580
Let me remove the query parameter entirely and just go to slash job slash results.

135
00:07:15.880 --> 00:07:18.190
We're going to get first the first ten jobs.

136
00:07:18.190 --> 00:07:24.030
One, two, three, four, five, six, seven, eight, nine, ten.

137
00:07:24.040 --> 00:07:24.790
That looks good.

138
00:07:25.000 --> 00:07:29.740
Now, notice that if I go to page equals one, I provide the exact same query params.

139
00:07:29.890 --> 00:07:33.910
Nothing is going to change because we're still going to get the same batch of ten, right?

140
00:07:33.910 --> 00:07:37.810
Because we're passing one and we're doing that formula to calculate the first ten jobs.

141
00:07:38.050 --> 00:07:43.060
But now notice if I provide page equals two, immediately the jobs change, right?

142
00:07:43.060 --> 00:07:46.960
So we calculate the new starting index of ten, the new ending index of 20.

143
00:07:47.140 --> 00:07:53.460
We slice using the computed property a different batch of ten jobs from our original hundred job array.

144
00:07:53.650 --> 00:07:57.190
And now we get a different batch of ten jobs on page two.

145
00:07:57.190 --> 00:08:00.550
So by scroll down, this will be another pair of ten jobs.

146
00:08:00.790 --> 00:08:06.340
And if I, for example, go to page six, so page equals six, it's going to be its own set of ten jobs.

147
00:08:06.340 --> 00:08:08.020
We can see the titles change right here.

148
00:08:08.260 --> 00:08:11.590
Here's page five, here's page four, etc..

149
00:08:11.590 --> 00:08:12.880
So things are looking pretty good.

150
00:08:13.030 --> 00:08:17.920
We are of course navigating manually using the URL and we want to give the user a button to do that

151
00:08:17.920 --> 00:08:18.400
in our app.

152
00:08:18.580 --> 00:08:20.680
But this moves us in a really good direction.

153
00:08:20.680 --> 00:08:24.250
It's a nice, good step that we took to enable pagination.

154
00:08:24.250 --> 00:08:29.560
Now we just have to give the user the interface to interact with these automatic URLs.

155
00:08:29.560 --> 00:08:34.660
So we're going to generate them for the user and have them navigate from page to page by simply swapping

156
00:08:34.660 --> 00:08:39.970
that query param at the end of our core root of slash jobs slash results.

157
00:08:40.270 --> 00:08:43.690
So lots of good progress in this lesson and I will see you in the next one.
