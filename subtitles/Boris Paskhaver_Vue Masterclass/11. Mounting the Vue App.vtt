WEBVTT
1
00:00:00.660 --> 00:00:01.620
All right.

2
00:00:01.620 --> 00:00:07.350
So in this lesson, I want to talk a little more about how our view app is mounted in the browser.

3
00:00:07.650 --> 00:00:13.800
In the previous lesson, we explored the index that each HTML file within our public folder, and this

4
00:00:13.800 --> 00:00:19.470
is the core HTML page, this is the basic barebones HTML structure of our page.

5
00:00:19.650 --> 00:00:25.200
You'll also notice when I save this file, prettier will go to work on this HTML file as well and adjust

6
00:00:25.200 --> 00:00:25.920
it accordingly.

7
00:00:26.250 --> 00:00:31.260
But the fact remains that we have a whole bunch of information here in the head element, and that's

8
00:00:31.260 --> 00:00:35.490
all the stuff that pulls in, for example, the navigation and sets the device with.

9
00:00:35.730 --> 00:00:40.800
But the core heart of the content that the user sees, which is within the body tag, is basically just

10
00:00:40.800 --> 00:00:44.430
a single div with an idea of app and there's nothing within this div.

11
00:00:44.610 --> 00:00:49.200
So by default, this HTML isn't really rendering anything significant to the screen.

12
00:00:49.860 --> 00:00:53.640
So how are we able to see the view after we just saw in our browser?

13
00:00:53.940 --> 00:00:57.840
So that happens in the source directory and the main JS file.

14
00:00:58.080 --> 00:01:04.680
So I'm going to open this file side by side with indexed that HTML and there is a whole bunch of JavaScript

15
00:01:04.680 --> 00:01:05.430
code in here.

16
00:01:05.430 --> 00:01:10.440
And what I'm actually going to do is delete it and we're actually going to write back that code from

17
00:01:10.440 --> 00:01:10.950
scratch.

18
00:01:10.950 --> 00:01:14.880
And the reason we're going to do that is just so we can talk a little bit more about what it's doing.

19
00:01:15.030 --> 00:01:19.680
This is some sample code that the client generated for us, but I want to make sure we don't simply

20
00:01:19.680 --> 00:01:21.330
gloss over it and assume that it works.

21
00:01:21.330 --> 00:01:24.000
I want to talk more about what exactly is going on.

22
00:01:24.210 --> 00:01:26.850
And in order to do that, we're going to write that same code from scratch.

23
00:01:27.270 --> 00:01:31.500
So what we're going to try to do is we're going to try to create a view application right here, and

24
00:01:31.500 --> 00:01:35.040
then we're going to try to connect it so that it renders or mounts.

25
00:01:35.040 --> 00:01:37.440
In other words, right here what this div is.

26
00:01:37.710 --> 00:01:42.630
So we want to have this view application, which is basically just a complex JavaScript configuration,

27
00:01:42.900 --> 00:01:45.480
and we want to kind of plug it into this section right here.

28
00:01:45.870 --> 00:01:50.550
The first thing I'm going to do is to import a function from the View Library called Create App, and

29
00:01:50.550 --> 00:01:51.840
that is a named export.

30
00:01:52.170 --> 00:01:57.600
So right here in my main just file, I'm going to write import create app from view.

31
00:01:58.410 --> 00:02:00.780
They named export from the view library.

32
00:02:01.140 --> 00:02:01.470
All right.

33
00:02:01.620 --> 00:02:07.140
And when we call Create App, we're going to need to invoke that function and provide it with a root

34
00:02:07.140 --> 00:02:07.710
component.

35
00:02:07.950 --> 00:02:10.140
Which brings us to the question, what is a component?

36
00:02:10.470 --> 00:02:11.040
For now?

37
00:02:11.040 --> 00:02:15.780
The easiest way to think about a component is just a slice of your user interface.

38
00:02:15.990 --> 00:02:18.550
So it's a chunk of the page, right?

39
00:02:18.550 --> 00:02:21.690
It's some it's some section of your web page.

40
00:02:21.960 --> 00:02:27.390
So if you think about a typical web app, it may have something like a navigation menu than a main content

41
00:02:27.390 --> 00:02:28.770
area and then a footer.

42
00:02:29.490 --> 00:02:35.100
And you could say that maybe that page consists of three distinct components the navigation menu, the

43
00:02:35.100 --> 00:02:36.630
main content and the footer.

44
00:02:36.960 --> 00:02:41.220
Now, there's no right or wrong answer about what a single component should be.

45
00:02:41.220 --> 00:02:44.190
Some developers can say, Well, a button is a single component.

46
00:02:44.430 --> 00:02:46.680
It's a chunk of the user interface, right?

47
00:02:46.920 --> 00:02:50.280
So it's not some kind of technical idea that has a perfect definition.

48
00:02:50.490 --> 00:02:56.160
It's kind of just a unit that we use to describe some section or some chunk or some piece of the web

49
00:02:56.160 --> 00:02:56.700
page, right?

50
00:02:57.060 --> 00:03:00.630
So a view component is going to kind of render itself.

51
00:03:00.780 --> 00:03:04.740
And in that view component, we might have other components being rendered as well.

52
00:03:05.040 --> 00:03:08.730
It's actually the exact same idea as we have in HTML, right?

53
00:03:08.910 --> 00:03:13.980
If we think about HTML, for example, we may have something like a DIV and you do not need to copy

54
00:03:13.980 --> 00:03:14.850
along with this.

55
00:03:14.850 --> 00:03:19.230
By the way, we may have a div and in that div we may have something like an unordered list.

56
00:03:19.440 --> 00:03:21.690
And in that unordered list we may have a list item.

57
00:03:21.690 --> 00:03:21.930
Right.

58
00:03:22.620 --> 00:03:23.910
And sort of a similar idea.

59
00:03:23.910 --> 00:03:29.520
This can be considered a chunk of code on our screen and we have this sort of top level container within

60
00:03:29.520 --> 00:03:29.760
there.

61
00:03:29.760 --> 00:03:34.170
We have its child elements and within that we have its own child elements as well.

62
00:03:34.350 --> 00:03:36.420
And Vue components work the exact same way.

63
00:03:36.690 --> 00:03:42.540
For example, we may have a component to represent a navigation menu and then it may render a separate

64
00:03:42.930 --> 00:03:46.530
component within itself to represent each navigation item.

65
00:03:46.680 --> 00:03:50.640
It's the exact same idea that we have with structuring HTML elements.

66
00:03:50.850 --> 00:03:52.380
That's just a very basic introduction.

67
00:03:52.380 --> 00:03:56.490
We're going to go more into components in a later lesson, but the key takeaway here is that a view

68
00:03:56.490 --> 00:04:02.100
component is just a chunk of the interface, and in order to run the app function, it needs at least

69
00:04:02.100 --> 00:04:06.000
some component that it's going to use as the basis to kick everything off with.

70
00:04:06.000 --> 00:04:06.240
Right.

71
00:04:06.540 --> 00:04:11.220
So you can almost think of it in equivalent terms, h, html, h and that sort of begins with this top

72
00:04:11.220 --> 00:04:12.780
level HTML tag right here.

73
00:04:12.960 --> 00:04:17.100
That's sort of the parent that gives birth to all of these other children right here.

74
00:04:17.370 --> 00:04:18.750
It's sort of the same idea here.

75
00:04:18.870 --> 00:04:24.060
This function needs the root component, the starter component, almost like the grandfather component

76
00:04:24.060 --> 00:04:29.160
that's going to start rendering all these other smaller components underneath it that form the hierarchy

77
00:04:29.160 --> 00:04:30.570
of what we see on the page.

78
00:04:30.870 --> 00:04:36.900
So in our app we have a view component and all of the components, by the way, will be in files with

79
00:04:36.900 --> 00:04:37.950
a dot view extension.

80
00:04:38.160 --> 00:04:42.630
So right here we have this app dot view component in the same source directory as Main.

81
00:04:42.660 --> 00:04:42.990
Yes.

82
00:04:43.260 --> 00:04:48.420
So what I want to do is import this component right here and pass in that component as the argument

83
00:04:48.420 --> 00:04:49.050
to create app.

84
00:04:49.260 --> 00:04:54.660
When I'm telling viewers I want to create an app and I want this app component to be its kind of starting

85
00:04:54.660 --> 00:04:58.290
basis, its foundation, it's first thing to render on the screen.

86
00:04:58.710 --> 00:04:59.070
All right.

87
00:04:59.220 --> 00:04:59.790
And then all.

88
00:05:00.020 --> 00:05:04.490
Later on, of course in APP is where we start rendering all of the other smaller components that each

89
00:05:04.520 --> 00:05:06.890
handled their own chunks of the screen and so on.

90
00:05:07.280 --> 00:05:14.570
So what I'm going to do here is I'm going to import the app component from the app dot view file in

91
00:05:14.570 --> 00:05:15.490
the same directory.

92
00:05:15.500 --> 00:05:17.500
So I'm just going to use relative imports right here.

93
00:05:17.510 --> 00:05:24.110
I'm just going to say from the same directory, which is what this dot slash is import the app component

94
00:05:24.110 --> 00:05:25.730
and it's going to be a default export.

95
00:05:25.730 --> 00:05:26.960
So written just like this.

96
00:05:27.080 --> 00:05:27.410
All right.

97
00:05:27.740 --> 00:05:31.520
And then what I'm going to do is I'm going to pass in that app component right here.

98
00:05:31.790 --> 00:05:34.910
So by itself, this will actually create a view app.

99
00:05:35.180 --> 00:05:41.030
Unfortunately, it's not connected to our HTML in any way now that we have this sort of view app with

100
00:05:41.030 --> 00:05:46.640
all its logic baked in and it's rendering this app component purely in JavaScript terms we now need

101
00:05:46.640 --> 00:05:52.490
to do is we need to take that logic, that view component and this representation and say, hey, plug

102
00:05:52.490 --> 00:05:56.420
it into right here where you have this dim with an idea of app.

103
00:05:56.720 --> 00:06:02.120
Take this app component and kind of inject it in there, put it there, render it there and place it

104
00:06:02.120 --> 00:06:02.420
there.

105
00:06:02.540 --> 00:06:08.060
So we see this app component rendered within here because remember, our HTML right now has a single

106
00:06:08.060 --> 00:06:10.790
empty div which is going to show up as nothing on the screen.

107
00:06:11.000 --> 00:06:13.580
We want this content to show up right here.

108
00:06:13.910 --> 00:06:20.090
So in order to do that, the object that we get back from Create App has a method called Mount and Mount

109
00:06:20.090 --> 00:06:25.130
describes where we want to actually mount or in other words, put the component on the screen.

110
00:06:25.370 --> 00:06:29.390
So if you think about mounting a picture on the wall, it's the exact same idea.

111
00:06:29.390 --> 00:06:34.070
Except in this case the app is our picture and our HTML file is our wall.

112
00:06:34.220 --> 00:06:38.330
So we have to say exactly where we want to mount this app or equivalently, this painting.

113
00:06:38.540 --> 00:06:42.500
So where do we want to put this app component right here in this dinner with an idea of app?

114
00:06:42.710 --> 00:06:47.000
The way we can target this div is by using its ID, which is also conveniently app.

115
00:06:47.300 --> 00:06:52.130
So the way we do that is we provide a string and in order to target an element by its ID, we use this

116
00:06:52.130 --> 00:06:52.730
hash tag.

117
00:06:52.730 --> 00:06:53.960
So hash tag app.

118
00:06:54.860 --> 00:06:55.180
Okay.

119
00:06:55.430 --> 00:06:57.980
Just again, to clarify, this can be whatever we want.

120
00:06:58.190 --> 00:07:00.440
So if this ID, for example, was whatever.

121
00:07:00.620 --> 00:07:01.730
That would be totally fine.

122
00:07:01.730 --> 00:07:05.780
As long as we say target the HTML element with a ID of whatever.

123
00:07:05.790 --> 00:07:06.110
Right.

124
00:07:06.320 --> 00:07:09.560
So as long as this matches what this is right here, we should be fine.

125
00:07:09.770 --> 00:07:12.640
However, the common community convention is going to be absence.

126
00:07:12.650 --> 00:07:13.670
That just makes sense.

127
00:07:14.090 --> 00:07:14.390
All right.

128
00:07:14.390 --> 00:07:16.700
I'm going to switch this back to app and this to app as well.

129
00:07:16.880 --> 00:07:20.690
And so I know it can be a little bit confusing because we're using the word app to mean many different

130
00:07:20.690 --> 00:07:21.020
things.

131
00:07:21.200 --> 00:07:24.080
In this case, create app means our view application.

132
00:07:24.230 --> 00:07:29.390
In this case, app as the argument is our app component, which is just a chunk of user interface.

133
00:07:29.600 --> 00:07:35.690
And in this case, this idea of app is simply using the element or ID selector in order to target this

134
00:07:35.690 --> 00:07:36.920
specific div right here.

135
00:07:37.100 --> 00:07:42.530
So that view knows that it's going to take that app component and inject it or mounted right here.

136
00:07:42.710 --> 00:07:45.220
And that's how these two files are connected to each other.

137
00:07:45.230 --> 00:07:51.140
The index HTML file loads, the web page and the barebones HTML, then it loads in the JavaScript file

138
00:07:51.140 --> 00:07:52.160
containing the view.

139
00:07:52.430 --> 00:07:57.260
View kicks everything off by launching the app component, and then it looks for where to inject itself

140
00:07:57.260 --> 00:07:58.310
into the HTML page.

141
00:07:58.520 --> 00:08:00.980
We told it to look for the element with an idea of app.

142
00:08:01.160 --> 00:08:03.740
So it takes the view app and it kind of places it in there.

143
00:08:03.890 --> 00:08:08.460
And for that point, the View app takes over and JavaScript is completely in control.

144
00:08:08.690 --> 00:08:13.460
The JavaScript bundle determines how to put up elements on the screen, how to tear down elements,

145
00:08:13.460 --> 00:08:17.810
how to replace elements, how to replace elements as we navigate from one page to another.

146
00:08:17.990 --> 00:08:24.440
It's a single page app because it's still fundamentally a single HTML file that never changes everything.

147
00:08:24.440 --> 00:08:29.960
The user sees that updates on screen is handled entirely by the view and by JavaScript.

148
00:08:29.960 --> 00:08:30.220
All right.

149
00:08:30.230 --> 00:08:31.820
And this is where we kick everything off.

150
00:08:32.060 --> 00:08:33.680
So this is where the process begins.

151
00:08:33.860 --> 00:08:35.480
This is where the view app mounts.

152
00:08:35.720 --> 00:08:36.050
All right.

153
00:08:36.230 --> 00:08:37.460
So hopefully that has been helpful.

154
00:08:37.460 --> 00:08:41.120
And later on, we'll talk more about what a component is in Vue terms.

155
00:08:41.390 --> 00:08:42.530
I'll see you in the next lesson.
