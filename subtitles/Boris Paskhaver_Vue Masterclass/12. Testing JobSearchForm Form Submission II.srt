1
00:00:00,770 --> 00:00:01,640
All right.

2
00:00:01,640 --> 00:00:07,580
So at the end of the previous lesson, we saw that we were still seeing an error in this code whenever

3
00:00:07,580 --> 00:00:09,870
we were testing our job search form component.

4
00:00:10,160 --> 00:00:14,540
And to be honest, when I was developing these lessons, I was a little bit confused myself.

5
00:00:14,540 --> 00:00:18,020
I wasn't sure what was going on because the test looked good to me.

6
00:00:18,350 --> 00:00:20,510
So of course I did what any good developer does.

7
00:00:20,510 --> 00:00:24,560
I went to Google and I tried to find some help on a site like Stack Overflow.

8
00:00:24,830 --> 00:00:32,990
So the term I searched for was Vue test form submit because one I want to test is the submission form

9
00:00:33,710 --> 00:00:34,670
specifically in Vue.

10
00:00:34,970 --> 00:00:37,790
And of course I found this page right here in StackOverflow.

11
00:00:38,780 --> 00:00:42,140
And let me show you exactly the process that I followed to solve this issue.

12
00:00:42,440 --> 00:00:47,720
I read through this a query or question that a user posted and it said, Is there a way to actually

13
00:00:47,720 --> 00:00:52,820
trigger the submission of a form by clicking on a submit button in a view unit test?

14
00:00:53,120 --> 00:00:54,610
Let's take this simple component.

15
00:00:54,620 --> 00:00:57,350
They have a template with a form and a button.

16
00:00:57,410 --> 00:01:02,960
You can see they're also using that submit prevent event modifier and they say, I want to test that

17
00:01:02,960 --> 00:01:07,010
submit prevents gets triggered when the button is clicked and therefore the event is emitted.

18
00:01:07,370 --> 00:01:10,070
When I run this in the browser, everything works as expected.

19
00:01:10,070 --> 00:01:11,720
The exact same thing is true for us.

20
00:01:11,960 --> 00:01:13,970
But the following test fails.

21
00:01:14,270 --> 00:01:14,630
Right?

22
00:01:15,020 --> 00:01:19,040
And we can sort of see that the problem is very similar to ours.

23
00:01:19,340 --> 00:01:25,100
So I scroll down a little bit, looked at the very first solution, and I said, the issue is that Vue

24
00:01:25,100 --> 00:01:29,290
test utils does not attach DOM nodes to the document by default.

25
00:01:29,300 --> 00:01:34,790
I'm guessing because the idea of a form submission has something to do with rendering this actual view

26
00:01:34,790 --> 00:01:36,050
component in the browser.

27
00:01:36,290 --> 00:01:42,740
We're not technically doing that in a view test utils test because it's kind of mounting the component

28
00:01:42,740 --> 00:01:45,350
in isolation, not necessarily in the browser environment.

29
00:01:46,280 --> 00:01:48,110
That's kind of what the issue is coming from.

30
00:01:48,110 --> 00:01:51,530
And I actually didn't even read through most of this statement.

31
00:01:51,530 --> 00:01:56,930
I saw that there was a link to this complementary helper method called Attach to document.

32
00:01:57,230 --> 00:02:02,630
So I went to this link which actually took me to the view test utils documentation and unfortunately

33
00:02:02,630 --> 00:02:07,880
the recommended approach which was attached to document is deprecated and it will be removed in future

34
00:02:07,880 --> 00:02:08,260
releases.

35
00:02:08,270 --> 00:02:13,430
So I was thinking to myself, great, whatever the recommended approaches is apparently deprecated,

36
00:02:13,730 --> 00:02:17,630
but I saw here that it said is deprecated.

37
00:02:17,810 --> 00:02:24,860
However we can use attached to instead, for example, if you need to attach the component to the document

38
00:02:24,860 --> 00:02:25,340
body.

39
00:02:25,610 --> 00:02:28,920
So the document of course is the core object within a browser.

40
00:02:28,920 --> 00:02:30,080
It represents the web page.

41
00:02:30,260 --> 00:02:35,840
And I think what this is trying to do is to force the component to simulate the mounting of it to an

42
00:02:35,840 --> 00:02:41,780
actual element in a simulated document, in a simulated browser environment, which of course doesn't

43
00:02:41,780 --> 00:02:43,730
actually practically exist in our test.

44
00:02:44,060 --> 00:02:49,550
So I just saw this code right here attached to a document body in the configuration object that was

45
00:02:49,550 --> 00:02:50,630
passed to a mount function.

46
00:02:50,810 --> 00:02:52,610
And I said to myself, Let me try this out.

47
00:02:52,610 --> 00:02:54,890
Let me see if this actually works in my tests.

48
00:02:55,220 --> 00:02:58,940
So I simply copy this code and I went back to my component.

49
00:02:59,270 --> 00:03:05,180
And right here, this is not within my global object, this is still part of our configuration object,

50
00:03:05,180 --> 00:03:06,830
but not inside that nested one.

51
00:03:07,160 --> 00:03:13,310
So I simply attach to document that body, save the file and we ran and was able to get the to pass.

52
00:03:13,700 --> 00:03:19,430
So I think my hunch is that this is somehow attaching this mounted component to a simulated browser

53
00:03:19,430 --> 00:03:19,910
document.

54
00:03:19,910 --> 00:03:23,630
I'm not exactly sure, but it did get the test to pass.

55
00:03:23,630 --> 00:03:29,000
And furthermore, I think it's not it wasn't super important for me to understand every nitty gritty

56
00:03:29,000 --> 00:03:31,970
detail of what it did as long as it made the test pass.

57
00:03:31,970 --> 00:03:37,880
And as long as I could verify that the test was testing exactly what I expected, then I would feel

58
00:03:37,880 --> 00:03:41,270
pretty good that we were testing the right functionality of the component.

59
00:03:41,600 --> 00:03:45,230
And by the way, whenever you have a situation like this, when a test is passing, it's generally a

60
00:03:45,230 --> 00:03:50,300
good idea to try to modify your test suite to make sure that it fails, just to make sure that you're

61
00:03:50,300 --> 00:03:51,680
not getting a false positive.

62
00:03:51,950 --> 00:03:57,140
So for example, I can add an extra Z here and save this just to make sure that we do get a proper failure.

63
00:03:57,320 --> 00:04:03,290
We can see here that we do have a number of calls equal to one, which means our push method is correctly

64
00:04:03,290 --> 00:04:04,850
being invoked at least once.

65
00:04:05,090 --> 00:04:11,060
And then right here we can see that the view or rather the view test utils ingest can identify that

66
00:04:11,060 --> 00:04:16,570
the issue is that we were expecting to get Vue developers with a Z, but the actual component gave us

67
00:04:16,580 --> 00:04:18,110
view developer as expected.

68
00:04:18,110 --> 00:04:25,490
So by seeing this failure, we can be certain that our positive assertion or our test passing is working

69
00:04:25,490 --> 00:04:28,490
as expected rather than just accidentally passing.

70
00:04:28,700 --> 00:04:34,120
For example, if you have sometimes an asynchronous problem where the test finishes up before the actual

71
00:04:34,130 --> 00:04:36,260
session is run, I'd seen that happen before.

72
00:04:36,380 --> 00:04:37,940
That can give you a false positive.

73
00:04:37,940 --> 00:04:41,540
That can give you a green test that is passing, that is not actually testing anything.

74
00:04:41,750 --> 00:04:47,030
By ensuring that we have the expected failure here, we can sort of be certain that our test is running

75
00:04:47,030 --> 00:04:52,040
through the component, properly setting the values, invoking the push method, etc. And once we have

76
00:04:52,040 --> 00:04:57,110
that confidence that it is failing properly, then we can indeed get it to pass as expected.

77
00:04:57,110 --> 00:05:03,200
So I'm going to remove that Z, bring us back to a passing test and that is where we want to be with

78
00:05:03,200 --> 00:05:04,460
the job search form test.

79
00:05:04,880 --> 00:05:07,580
So I think this is a good place to leave off this section.

80
00:05:07,580 --> 00:05:09,380
We have built this job search form component.

81
00:05:09,590 --> 00:05:13,430
We have correctly captured the user's input in these text input components.

82
00:05:13,640 --> 00:05:18,320
We have packaged it up and routed it to our next page, which is the job results page.

83
00:05:18,500 --> 00:05:25,340
And we have attached those properties which exist as data on this component as part of the query params

84
00:05:25,340 --> 00:05:27,200
on that other route.

85
00:05:27,200 --> 00:05:33,380
So we have found a way to transfer information from one view to the other and we have also tested it.

86
00:05:33,470 --> 00:05:33,790
All right.

87
00:05:34,100 --> 00:05:37,490
So this is a good place to leave off, and I will see you in the next lesson.
