1
00:00:00,440 --> 00:00:01,240
Okay.

2
00:00:01,240 --> 00:00:03,440
So here is a fun question for you.

3
00:00:03,460 --> 00:00:08,230
This is going to be a good chance to review the concepts that we learned about in the previous section.

4
00:00:08,560 --> 00:00:14,320
We know that Props is a reactive object and we're getting it as the very first argument in our setup

5
00:00:14,320 --> 00:00:14,710
method.

6
00:00:15,070 --> 00:00:21,560
We also know that we want to use the type property on that reactive props object right here.

7
00:00:21,910 --> 00:00:29,050
So my question for you is, can I do structure type right here in order to use it below if I simply

8
00:00:29,050 --> 00:00:30,000
use ESX.

9
00:00:30,000 --> 00:00:31,240
So structuring syntax.

10
00:00:31,510 --> 00:00:32,350
Can I do this?

11
00:00:32,500 --> 00:00:34,030
And then use type below.

12
00:00:35,200 --> 00:00:37,240
The answer is going to be no.

13
00:00:37,240 --> 00:00:40,480
And in fact, Iceland is going to give us this warning right here.

14
00:00:40,690 --> 00:00:46,600
If I hover my mouse over it, you can see it's going to say getting a value from the props in the root

15
00:00:46,600 --> 00:00:50,830
scope of setup will cause the value to lose reactivity.

16
00:00:51,160 --> 00:00:54,460
Remember, we talked about this in the reactivity section of the course.

17
00:00:54,760 --> 00:01:01,690
Just because we have a reactive object does not mean that any individual property that we do structure

18
00:01:01,690 --> 00:01:03,250
is reactive in itself.

19
00:01:03,640 --> 00:01:07,030
So when we do structure type from props, this will work.

20
00:01:07,240 --> 00:01:09,250
But type is going to be the string.

21
00:01:09,250 --> 00:01:13,600
It's going to be the string of primary or secondary that's passed from the parent.

22
00:01:13,900 --> 00:01:20,230
It's not going to be a reactive object that is able to track changes to its state or to its value over

23
00:01:20,230 --> 00:01:20,770
time.

24
00:01:21,130 --> 00:01:25,420
So we're basically going to do structure a string here instead of a reactive object.

25
00:01:25,600 --> 00:01:26,020
All right.

26
00:01:26,380 --> 00:01:29,140
So how do we solve this problem?

27
00:01:29,380 --> 00:01:36,760
Whenever we have a reactive object and we want to make all of its individual properties reactive, we

28
00:01:36,760 --> 00:01:40,870
have to pass that reactive object to the to Raf's function.

29
00:01:41,230 --> 00:01:43,210
So let's import two refs right here.

30
00:01:44,870 --> 00:01:48,080
And remember to refs only accepts a reactive object.

31
00:01:48,090 --> 00:01:54,530
It does not accept a plain JavaScript object, but in our case props is already a reactive object so

32
00:01:54,530 --> 00:01:57,050
we can pass in props to two refs.

33
00:01:58,150 --> 00:01:58,490
Okay.

34
00:01:58,510 --> 00:02:03,760
So this is going to make the lint warning go away, but unfortunately, it's not going to get us to

35
00:02:03,760 --> 00:02:04,900
a working solution.

36
00:02:04,910 --> 00:02:08,400
So let's save this code and let's take a look in the browser.

37
00:02:08,770 --> 00:02:11,080
We're going to see if I navigate back to Chrome.

38
00:02:12,440 --> 00:02:13,310
Here is my page.

39
00:02:13,460 --> 00:02:17,670
It looks like we have lost just about all of our styles completely in our button.

40
00:02:17,690 --> 00:02:20,540
This isn't even the primary or the secondary styles.

41
00:02:20,810 --> 00:02:22,050
So what is going on?

42
00:02:22,070 --> 00:02:23,540
What is wrong with our code?

43
00:02:24,080 --> 00:02:30,170
Well, you may recall that when we use two refs, we do indeed get a reactive object with reactive properties

44
00:02:30,380 --> 00:02:33,080
and we are successfully just structuring a property.

45
00:02:33,290 --> 00:02:37,190
But remember, now that type is no longer a string.

46
00:02:37,370 --> 00:02:42,890
Type is a reactive object that is storing a string and its changes over time.

47
00:02:43,220 --> 00:02:49,460
So what we're providing here in square brackets as the dynamic name of our object key here is not a

48
00:02:49,460 --> 00:02:49,940
string.

49
00:02:49,940 --> 00:02:55,760
It's actually a complete reactive object in order to get the actual property or the value that it is

50
00:02:55,760 --> 00:02:58,610
storing inside it that it is keeping track of.

51
00:02:58,820 --> 00:03:02,540
We need to access the dot value property on that object.

52
00:03:02,810 --> 00:03:09,170
So remember when you do structure using the object return from two FS, you are more than able to do

53
00:03:09,170 --> 00:03:09,680
structured.

54
00:03:09,680 --> 00:03:14,660
This is valid syntax, but what you are going to do structure what you're going to get back in your

55
00:03:14,660 --> 00:03:19,280
assignment right here is going to be an object, a reactive object with a value property.

56
00:03:19,520 --> 00:03:24,470
So right here, if I'm doing the two refs approach, I have to do Typekit value.

57
00:03:25,160 --> 00:03:25,460
All right.

58
00:03:25,460 --> 00:03:29,750
Now, this is going to get me the string and it's going to keep the original implementation that we

59
00:03:29,750 --> 00:03:31,040
had in the previous lesson.

60
00:03:31,280 --> 00:03:36,800
So when our props change, we're going to be able to observe the changes to the type of prop and we're

61
00:03:36,800 --> 00:03:38,780
going to able to rerun our computed function.

62
00:03:38,900 --> 00:03:41,540
So we're going to get the exact same functionality in our browser.

63
00:03:41,540 --> 00:03:46,400
So if I go back to take a look now, we can see our original styles are back.

64
00:03:46,550 --> 00:03:50,510
And if I go to action button right here, we see if it works right here.

65
00:03:50,510 --> 00:03:52,190
Looks like I'm having a little bit of issues.

66
00:03:52,610 --> 00:03:53,900
Forgive the troubleshooting.

67
00:03:53,900 --> 00:03:55,670
Let me refresh the page just to be safe.

68
00:03:57,620 --> 00:03:58,370
All right, here we go.

69
00:03:58,380 --> 00:03:59,660
So now we have our action button.

70
00:03:59,660 --> 00:04:00,650
Here is our type.

71
00:04:00,650 --> 00:04:05,030
Let me select the type prop and change it secondary.

72
00:04:05,240 --> 00:04:08,600
Save that you can see it indeed does update here we go.

73
00:04:08,600 --> 00:04:10,070
Changing it back to primary.

74
00:04:10,220 --> 00:04:16,520
We can see the styles are changing, which means the CAC class object is re computing, which means

75
00:04:16,520 --> 00:04:20,450
our view component is recognizing the change in prompts.

76
00:04:20,870 --> 00:04:26,360
So the key takeaway here is if you ever wanted to structure props or to structure any reactive object

77
00:04:26,360 --> 00:04:31,190
for that matter, and you want to be able to use the syntax, you must pass the reactive object to the

78
00:04:31,190 --> 00:04:32,540
two Raf's function first.

79
00:04:32,810 --> 00:04:34,250
That's the first thing you need to remember.

80
00:04:34,430 --> 00:04:40,790
The second thing you need to remember is that that thing you do structure is not going to be the regular

81
00:04:40,790 --> 00:04:43,520
value, like a boolean or a string or whatever it is.

82
00:04:43,640 --> 00:04:48,290
It's always going to be an object with a value property, storing the original value that you want.

83
00:04:48,680 --> 00:04:53,630
So if you prefer this approach, it requires a little bit more code in one way and a little bit less

84
00:04:53,690 --> 00:04:58,700
on another, because if we were to simply use props, that type right here, that would work because

85
00:04:58,700 --> 00:05:00,530
that entire object is reactive.

86
00:05:00,530 --> 00:05:04,100
So you can keep track of any properties on it that change.

87
00:05:04,310 --> 00:05:09,290
If you wanted to structure original properties in order to get this kind of syntax, that's totally

88
00:05:09,290 --> 00:05:10,010
fine as well.

89
00:05:10,220 --> 00:05:16,040
But you have to remember to pass the object to the two refs function and to provide value whenever you

90
00:05:16,040 --> 00:05:21,110
are accessing any of those the structure properties, they are now reactive objects.

91
00:05:21,260 --> 00:05:21,740
All right.

92
00:05:21,740 --> 00:05:26,240
They're the exact same thing basically that we return back from the ref function just automatically

93
00:05:26,240 --> 00:05:27,380
generated by Vue.

94
00:05:27,800 --> 00:05:28,160
All right.

95
00:05:28,160 --> 00:05:29,780
So that's all there is to cover in this lesson.

96
00:05:29,780 --> 00:05:31,430
And I will see you in the next one.
