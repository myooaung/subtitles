WEBVTT
1
00:00:00.360 --> 00:00:02.610
All right, so congratulations.

2
00:00:02.610 --> 00:00:05.610
We have reached the end of another course section.

3
00:00:05.760 --> 00:00:09.480
So, as always, let's review the concepts that we learned in this section.

4
00:00:09.660 --> 00:00:16.410
There was quite a lot of content to absorb, so this section was focused on the View X Library.

5
00:00:16.420 --> 00:00:22.350
It's a totally separate library from the Core View Library, which focuses on the view layer, but it's

6
00:00:22.350 --> 00:00:27.570
part of the larger view ecosystem and that is developed by the same team of core contributors.

7
00:00:27.930 --> 00:00:28.980
So what is View X?

8
00:00:28.980 --> 00:00:34.410
It's a library for managing global state, and when we say state, we simply mean data.

9
00:00:34.740 --> 00:00:37.020
What does it mean that that data is global?

10
00:00:37.110 --> 00:00:39.840
It means that it extends beyond one component.

11
00:00:39.840 --> 00:00:43.530
It has data that multiple components rely on or care about.

12
00:00:43.830 --> 00:00:47.550
So an example from our app was the user's logged in status.

13
00:00:47.760 --> 00:00:53.550
Typically, that's a piece of information that many different components or parts of the UI will care

14
00:00:53.550 --> 00:00:53.850
about.

15
00:00:54.030 --> 00:00:57.000
When it updates, we want to alert many different components.

16
00:00:57.210 --> 00:01:02.400
And so when you have that kind of problem, you can solve it by moving that data to view X.

17
00:01:02.550 --> 00:01:09.630
When view X updates its state, then that change reflects in all of the components that are reading

18
00:01:09.720 --> 00:01:11.250
from that view X State.

19
00:01:12.060 --> 00:01:12.420
All right.

20
00:01:12.750 --> 00:01:17.670
So another example we might cite is something like dark mode or the language of the app.

21
00:01:18.060 --> 00:01:23.670
Basically, anything that is data that multiple components rely on, it's a good idea to move it to

22
00:01:23.670 --> 00:01:24.060
view U.S..

23
00:01:24.330 --> 00:01:26.700
Okay, how do we create a View X store?

24
00:01:26.910 --> 00:01:29.300
We use the create store function from View X.

25
00:01:29.310 --> 00:01:36.120
We did this in the index file of our store folder and a store is just the technical library term for

26
00:01:36.120 --> 00:01:39.510
the object that is going to be managing our state, our global data.

27
00:01:39.870 --> 00:01:44.580
Now that create store function accepts a configuration object and that's where we configure how the

28
00:01:44.580 --> 00:01:45.390
store is going to work.

29
00:01:45.780 --> 00:01:51.420
So we started off with a state method where we return an object that represents the view X store's initial

30
00:01:51.420 --> 00:01:52.350
starting state.

31
00:01:52.530 --> 00:01:58.230
So we just define simple properties and their initial values, and then we can modify that state by

32
00:01:58.230 --> 00:02:01.670
issuing mutations to the View Store.

33
00:02:01.950 --> 00:02:07.860
The way we define our available mutations is by defining that mutations object in the configuration

34
00:02:07.860 --> 00:02:09.870
object that we passed to the create store function.

35
00:02:10.140 --> 00:02:15.600
And a mutation is just a simple JavaScript method that receives one argument, and that is the current

36
00:02:15.600 --> 00:02:21.120
store state and the body of the method takes the store state and it modifies it.

37
00:02:21.360 --> 00:02:25.190
So it may take an existing property, for example, and give it a new value.

38
00:02:25.200 --> 00:02:29.850
That's exactly what we did with the is logged in the property with our log in user mutation.

39
00:02:30.120 --> 00:02:33.630
The word mutate means to change and that's exactly what we're doing.

40
00:02:33.630 --> 00:02:35.880
We're changing the existing store state.

41
00:02:36.270 --> 00:02:37.800
Why do we use mutations?

42
00:02:38.010 --> 00:02:44.850
We do it because we want to limit the available scope or boundary or ways that any component can update

43
00:02:44.850 --> 00:02:45.600
the store state.

44
00:02:45.750 --> 00:02:48.870
We want our state changes to be predictable and trackable.

45
00:02:49.080 --> 00:02:54.570
We don't want any component to be able to just reach into our View Store State and rename a property

46
00:02:54.570 --> 00:02:59.310
or delete a property, etc. We want to isolate all of our operations to a single file.

47
00:02:59.460 --> 00:03:04.500
We want them all to be together and we want to prevent the components that are talking to the store

48
00:03:04.620 --> 00:03:06.030
from doing anything accidental.

49
00:03:06.270 --> 00:03:11.970
So you can almost think of mutations as creating a smaller set of possible operations so that we can

50
00:03:11.970 --> 00:03:16.380
only modify the view store state in a predictable fashion.

51
00:03:16.560 --> 00:03:22.140
And it's important to do that because now we are really having, you know, global data that may have

52
00:03:22.140 --> 00:03:23.760
a lot of impact throughout the app.

53
00:03:23.760 --> 00:03:25.410
It's not just limited to one component.

54
00:03:25.950 --> 00:03:30.630
A mistake in the store can all of a sudden cause many different components to work incorrectly.

55
00:03:30.750 --> 00:03:34.890
So we want to be very careful with what we prohibit, and that's why we have mutations.

56
00:03:34.890 --> 00:03:37.080
That's where that design standard comes from.

57
00:03:37.980 --> 00:03:39.750
Okay, how do we run a mutation?

58
00:03:39.930 --> 00:03:45.960
We do so by invoking the commit method on a view store and we pass it a string with the mutation name.

59
00:03:46.170 --> 00:03:50.580
We will run that mutation method, which of course will alter the store state.

60
00:03:50.970 --> 00:03:53.850
Okay, so from any given component, how do we do this?

61
00:03:53.850 --> 00:04:00.000
Well, luckily, Vue X adds a dollar sign store property to every Vue component in the app.

62
00:04:00.300 --> 00:04:05.580
This is the exact same thing that Vue router does where it adds the dollar sign route and dollar sign

63
00:04:05.600 --> 00:04:06.510
router properties.

64
00:04:06.660 --> 00:04:12.390
It's basically a property that every component has and the dollar sign store property is the same store

65
00:04:12.390 --> 00:04:15.720
object that we export from our indexed GST file in store.

66
00:04:15.840 --> 00:04:21.300
We could technically import that store object in the script section of our component and use it, but

67
00:04:21.300 --> 00:04:24.090
that of course is redundant and requires a lot of importing.

68
00:04:24.240 --> 00:04:27.180
That's why the View X team did this design decision.

69
00:04:27.330 --> 00:04:32.130
So every component now has access to the store and it can do whatever it wants, it can read from it,

70
00:04:32.130 --> 00:04:34.470
it can send a mutation to right to it, etc..

71
00:04:34.890 --> 00:04:40.350
So speaking of reading from the View X Store, we typically read using a computed property within the

72
00:04:40.350 --> 00:04:41.490
actual Vue component.

73
00:04:42.090 --> 00:04:48.870
The reason we use a computed property is because that represents derived data or data that is dependent

74
00:04:48.870 --> 00:04:49.650
on something else.

75
00:04:49.890 --> 00:04:54.120
Our View X Store sort of becomes our global source of truth for that data.

76
00:04:54.330 --> 00:04:59.640
So we're sort of just borrowing that data for the purposes of our component to display it or to use

77
00:04:59.640 --> 00:04:59.760
it.

78
00:05:00.030 --> 00:05:04.020
So that's why we put it in the computer section of our individual component.

79
00:05:04.110 --> 00:05:08.970
It doesn't make sense to put it in data because it's not part of the components innate original data.

80
00:05:09.090 --> 00:05:15.390
It's a derived piece of data that we're sort of mirroring or copying from the original view store.

81
00:05:15.480 --> 00:05:15.660
Right.

82
00:05:16.110 --> 00:05:19.890
And we know the benefit of all this is views powerful reactivity system.

83
00:05:20.040 --> 00:05:25.590
So when the View Store updates a property, if a component is using it in any fashion, whether it's

84
00:05:25.590 --> 00:05:30.340
rendering it to the DOM or it's using it in something like a VRF conditional or it's iterating over

85
00:05:30.340 --> 00:05:32.100
it in a V for a directive.

86
00:05:32.430 --> 00:05:39.360
As long as the store state updates, any component that relies on a given property will be informed

87
00:05:39.360 --> 00:05:44.040
of that change and then we'll re render to incorporate that latest change in global state.

88
00:05:45.220 --> 00:05:45.580
Okay.

89
00:05:45.880 --> 00:05:52.660
So we started out by writing these computer are computed functions as well as methods that would issue

90
00:05:52.660 --> 00:05:54.370
mutations in individual components.

91
00:05:54.670 --> 00:05:56.620
And that's a totally fine approach.

92
00:05:56.830 --> 00:06:02.410
But we do have some helper functions that help make the process a lot easier by reducing the total amount

93
00:06:02.410 --> 00:06:03.670
of code that we have to write.

94
00:06:04.000 --> 00:06:09.220
So for example, if we need to read five different properties on our View X Store instead of defining

95
00:06:09.220 --> 00:06:13.900
five computed methods in our component, we can use something like the maps state helper function.

96
00:06:14.080 --> 00:06:19.690
What it does is it creates component properties on our individual view component that map or connect

97
00:06:19.690 --> 00:06:21.220
to view state properties.

98
00:06:21.490 --> 00:06:26.860
Typically we're going to give those component properties the exact same name as those properties have

99
00:06:26.860 --> 00:06:28.450
on the View X Store.

100
00:06:28.480 --> 00:06:33.760
So in our example we had the property of is logged in and makes sense to use that exact same property

101
00:06:33.760 --> 00:06:34.030
name.

102
00:06:34.270 --> 00:06:39.250
So by simply using the map state helper function and passing an array with that string of is logged

103
00:06:39.250 --> 00:06:43.690
in, what the function did for us is create that component property automatically.

104
00:06:43.810 --> 00:06:50.740
So then our component has had access to is logged in on the this keyword so it can use it in-line exactly

105
00:06:50.740 --> 00:06:53.680
as if it were a regular data property on the component.

106
00:06:53.950 --> 00:06:57.040
So map state is is not required, but it makes things simpler.

107
00:06:57.040 --> 00:06:58.690
It requires you to write less code.

108
00:06:58.840 --> 00:07:03.790
It is a shortcut to instead of manually defining multiple computed properties.

109
00:07:03.880 --> 00:07:05.470
It does all of that for you.

110
00:07:05.770 --> 00:07:08.860
And of course the complementary helper function is map mutations.

111
00:07:09.040 --> 00:07:14.680
What it does is it makes you have to write less component methods that issue views storm mutations.

112
00:07:14.890 --> 00:07:20.080
What Matt mutations does is it automatically creates methods that invoke specific mutations.

113
00:07:20.080 --> 00:07:26.770
So for example, we had the log in user mutation and we, we used that mutations and we passed in that

114
00:07:27.040 --> 00:07:27.540
mutation.

115
00:07:27.550 --> 00:07:33.520
And so then we automatically had access to a log in user method within our individual component where

116
00:07:33.520 --> 00:07:34.750
we used mapped mutations.

117
00:07:34.990 --> 00:07:38.320
So behind the scenes view X still follows the same protocol.

118
00:07:38.320 --> 00:07:43.690
It takes the store, it invokes the commit method on the store and it gives it the mutation name that

119
00:07:43.690 --> 00:07:44.200
it expects.

120
00:07:44.830 --> 00:07:49.930
However, it's obviously a shortcut because instead of having to define, for example, three different

121
00:07:49.930 --> 00:07:55.450
methods that each invoke a different mutation, we can use the map mutations helper, give it an array

122
00:07:55.450 --> 00:08:01.660
with those mutation names and automatically have three methods defined for us with a simple line, single

123
00:08:01.660 --> 00:08:02.770
line of code.

124
00:08:03.130 --> 00:08:09.550
As a reminder, both maps, state and map mutations return objects, reactive objects with either reactive

125
00:08:09.550 --> 00:08:10.090
methods on them.

126
00:08:10.300 --> 00:08:15.790
So we have to make sure that we do structure those properties, those nested methods into our original

127
00:08:15.790 --> 00:08:20.050
component constructs, such as the computed properties or the methods.

128
00:08:20.170 --> 00:08:22.750
So don't just invoke map mutations or map state.

129
00:08:22.750 --> 00:08:27.520
Make sure you use that triple dot sequence before it to properly get it to work.

130
00:08:28.600 --> 00:08:28.960
All right.

131
00:08:29.170 --> 00:08:32.380
Let's talk about testing as we saw a few stories.

132
00:08:32.380 --> 00:08:36.970
State method and mutations are things that use plane JavaScript constructs.

133
00:08:36.970 --> 00:08:40.210
They use regular JavaScript objects, regular JavaScript methods.

134
00:08:40.510 --> 00:08:47.350
So all of this is to say we can test those ideas in isolation without worrying about how the View store

135
00:08:47.350 --> 00:08:48.820
uses it in the internals.

136
00:08:49.030 --> 00:08:54.610
So for example, a mutation is just a method that takes a single parameter that represents the store

137
00:08:54.610 --> 00:08:56.350
state and then it does something to it.

138
00:08:56.350 --> 00:09:00.430
It, for example, modifies the value of a property in order to test that.

139
00:09:00.430 --> 00:09:02.830
CoreLogic We don't need a view store.

140
00:09:02.980 --> 00:09:08.380
We just need to invoke the mutation, give it a sample argument to represent that parameter and make

141
00:09:08.380 --> 00:09:11.560
sure that it does the right thing in that method body right?

142
00:09:11.800 --> 00:09:16.840
So in other words, we can simply invoke the appropriate state method or mutation method and simply

143
00:09:16.840 --> 00:09:18.730
test its return value ingest.

144
00:09:19.120 --> 00:09:19.420
Right?

145
00:09:19.540 --> 00:09:25.600
We later on feed these contracts into the create store function because Vue needs them in order to do

146
00:09:25.660 --> 00:09:26.770
its internals in view.

147
00:09:27.100 --> 00:09:28.840
But our tests shouldn't care about that.

148
00:09:28.960 --> 00:09:34.420
Our test can keep things simple and just focus on what the mutation methods are supposed to do by themselves.

149
00:09:34.510 --> 00:09:37.930
They're basically just methods that change properties and objects, right?

150
00:09:37.990 --> 00:09:42.130
We can test that without having to involve the UX and making things more complicated.

151
00:09:42.670 --> 00:09:44.170
What about testing on components?

152
00:09:44.380 --> 00:09:47.680
Well, we saw earlier that components can use a real view X door.

153
00:09:47.800 --> 00:09:50.650
We can create a view X store and we can provide it in every test.

154
00:09:50.890 --> 00:09:56.920
But my preference is to make things simpler and less co-dependent on Vue X by simply using a mock object,

155
00:09:57.070 --> 00:10:03.580
a simpler, more lightweight JavaScript object that can play the role of a view store that has everything

156
00:10:03.580 --> 00:10:08.620
we need to be able to emulate a view store without being the real thing.

157
00:10:09.190 --> 00:10:10.870
And that way we can customize it more.

158
00:10:10.990 --> 00:10:13.810
We don't have to know about the deep internals of how UCS works.

159
00:10:14.020 --> 00:10:17.410
We don't need to open ourselves up to the possibility that view X will fail.

160
00:10:17.650 --> 00:10:19.780
We don't know at that point where the error occurred.

161
00:10:19.870 --> 00:10:25.330
We limit the scope to simply testing our component, its responsibilities and its communications with

162
00:10:25.330 --> 00:10:29.200
View X rather than having to involve the actual library in our test suite.

163
00:10:29.380 --> 00:10:34.840
It also, by the way, speeds up how our tests run because we're using simpler JavaScript objects instead

164
00:10:34.840 --> 00:10:37.090
of the more complex view X store object.

165
00:10:37.450 --> 00:10:41.680
So the JavaScript objects should hold the properties methods that your component uses from the real

166
00:10:41.680 --> 00:10:42.220
back store.

167
00:10:42.280 --> 00:10:43.870
But you don't need the actual view.

168
00:10:44.310 --> 00:10:44.530
Object.

169
00:10:44.730 --> 00:10:45.780
That is my opinion.

170
00:10:45.900 --> 00:10:51.150
You might talk to other developers who disagree because they might argue that a real view store resembles

171
00:10:51.150 --> 00:10:52.920
the real world more accurately.

172
00:10:53.040 --> 00:10:56.040
At that point, it just becomes a matter of opinion and debate.

173
00:10:57.190 --> 00:10:57.520
All right.

174
00:10:57.730 --> 00:11:03.070
And if we want to use that mock approach, we need to replace that dollar sign store property that is

175
00:11:03.070 --> 00:11:04.270
available on every component.

176
00:11:04.450 --> 00:11:09.970
And we do that using the global marks property in the configuration object that we pass as a second

177
00:11:09.970 --> 00:11:13.660
argument to our Mount Shallow Mount functions from view test utils.

178
00:11:13.870 --> 00:11:19.600
And again, as we saw, if you have a lot of common configuration such as building up that configuration

179
00:11:19.600 --> 00:11:24.940
object, what we can do is simplify the test setup by extracting a lot of that configuration to factory

180
00:11:24.940 --> 00:11:31.330
functions and then simply having each test specify the properties that matter for that specific test.

181
00:11:31.840 --> 00:11:32.140
All right.

182
00:11:32.470 --> 00:11:34.380
That's all there is to cover in this section.

183
00:11:34.390 --> 00:11:38.200
The next section, we're going to continue learning more about the various features in view.

184
00:11:38.620 --> 00:11:41.230
It's a very powerful library and we still got lots to cover.

185
00:11:41.470 --> 00:11:44.230
So I hope you're excited and I will see you in the next section.
