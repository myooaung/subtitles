WEBVTT
1
00:00:00.270 --> 00:00:01.200
All right.

2
00:00:01.210 --> 00:00:06.570
So on the left hand side of this code, I have opened the job filter sidebar component.

3
00:00:06.870 --> 00:00:12.360
And as a reminder, this is the component where we are rendering our job filter, sidebar, job types

4
00:00:12.360 --> 00:00:16.110
component and our job filter, sidebar organization's component.

5
00:00:16.380 --> 00:00:23.070
And my hope is that I will be able to replace these two component instantiation right here with instantiation

6
00:00:23.070 --> 00:00:26.250
of my new checkbox group, Reusable Component.

7
00:00:26.610 --> 00:00:32.640
My hope is that by using this component twice and simply providing it different prop values for header

8
00:00:32.820 --> 00:00:38.880
unique values and mutation, I'm going to get the usage or functionality of these former two components

9
00:00:39.030 --> 00:00:41.940
while only relying on one total component.

10
00:00:42.360 --> 00:00:47.460
And that's going to of course remove the duplication from these two and consolidate all of that business

11
00:00:47.460 --> 00:00:50.970
logic in a single reusable component, the one we have on the right.

12
00:00:51.450 --> 00:00:51.810
All right.

13
00:00:51.810 --> 00:00:53.970
So let's tackle this process step by step.

14
00:00:53.970 --> 00:00:58.440
In order to add this component, I'm going to, of course, need to first import it and register as

15
00:00:58.440 --> 00:00:59.280
a local component.

16
00:00:59.730 --> 00:01:03.000
So right here, I'm going to import my new.

17
00:01:04.150 --> 00:01:10.660
Job filters, sidebar, checkbox, group component, and that's going to come from these source directory

18
00:01:10.780 --> 00:01:18.850
components, job results, job filter, sidebar and finally, job filter, sidebar, checkbox group.

19
00:01:19.450 --> 00:01:22.210
So there is the fully imported component from the path.

20
00:01:22.450 --> 00:01:28.960
And before I forget, make sure to register it as part of the local components object right here checkbox

21
00:01:28.960 --> 00:01:29.230
group.

22
00:01:29.500 --> 00:01:32.320
So with that we are now able to use it in our template.

23
00:01:32.650 --> 00:01:37.330
But before we do that, remember that when we instantiate this twice, we're going to need to provide

24
00:01:37.330 --> 00:01:40.540
each instantiation with three different prop values.

25
00:01:40.840 --> 00:01:42.790
We'll come back to header in just a second.

26
00:01:42.790 --> 00:01:44.650
Let's first talk about unique values.

27
00:01:45.010 --> 00:01:50.290
So unique values, again, is going to be the iterable that we're going to iterate over in our V4 directive

28
00:01:50.530 --> 00:01:56.500
and in both of our previous implementations, the two original components, those Iterable collections.

29
00:01:56.500 --> 00:02:03.730
Of course, in this case this was unique organizations you can see that came from the respective composable

30
00:02:03.730 --> 00:02:04.180
function.

31
00:02:04.450 --> 00:02:10.060
So in this component we relied on the use unique organizations composable and in the other component,

32
00:02:10.060 --> 00:02:15.580
the job types component, we relied on the use unique job types composable instead.

33
00:02:15.850 --> 00:02:21.550
So now it's going to be the parent components responsibility to get that data and pass it down to the

34
00:02:21.550 --> 00:02:24.130
checkbox group as the unique values prop.

35
00:02:24.340 --> 00:02:29.020
It's going to need to pass down that set, which means it's going to be jobs or just sidebar that's

36
00:02:29.020 --> 00:02:34.540
going to be responsible now for invoking those two composable functions, getting those reactive objects,

37
00:02:34.540 --> 00:02:40.980
holding the sets and passing them down as the unique values prop for each instantiation of the checkbox

38
00:02:40.990 --> 00:02:41.590
group component.

39
00:02:41.920 --> 00:02:46.090
So in order to invoke those composable functions, we're of course going to need to import them and

40
00:02:46.090 --> 00:02:47.980
also set up a setup method.

41
00:02:48.310 --> 00:02:51.310
So right here, let's import those two composable functions.

42
00:02:52.450 --> 00:02:57.730
So that's going to be use unique job types and use unique organizations.

43
00:02:58.600 --> 00:03:03.370
And that, of course is going to come from the source directory, the store folder and the composable

44
00:03:03.430 --> 00:03:03.790
file.

45
00:03:04.300 --> 00:03:04.810
All right.

46
00:03:04.990 --> 00:03:06.310
Importing them is not enough.

47
00:03:06.310 --> 00:03:07.960
We need to add a set up method.

48
00:03:09.110 --> 00:03:11.840
And in the body of this setup method, we need to invoke them.

49
00:03:12.260 --> 00:03:20.030
So right here I'm going to get my unique job types by invoking V use unique job types function.

50
00:03:20.210 --> 00:03:25.370
And as a reminder, this is going to return back a reactive object from the computed function and that

51
00:03:25.370 --> 00:03:29.450
reactive object is going to store inside it that value of this set of strings.

52
00:03:29.450 --> 00:03:31.520
And that's what I want to provide right here eventually.

53
00:03:31.910 --> 00:03:37.550
And similarly, I'm going to get my unique organization's that's going to come from invoking use unique

54
00:03:37.550 --> 00:03:38.330
organizations.

55
00:03:39.720 --> 00:03:42.990
And by itself, of course, it's great that we're invoking this, but this is not enough.

56
00:03:42.990 --> 00:03:45.180
In order to make it eventually available to the template.

57
00:03:45.390 --> 00:03:48.780
We have to make sure we return these as properties on the returned object.

58
00:03:49.050 --> 00:03:52.860
So right here I'm going to add unique job types and unique organizations.

59
00:03:54.130 --> 00:03:54.520
Okay.

60
00:03:54.730 --> 00:03:58.360
So our hope is that this will take care of the unique values prop.

61
00:03:58.540 --> 00:04:03.370
We also need to worry about the mutation prop because each time we instantiate check box group, we're

62
00:04:03.370 --> 00:04:08.830
going to need to tell it which mutation we want it to run because that mutation prop is what the component

63
00:04:08.830 --> 00:04:11.920
is going to use right here when the select value function runs.

64
00:04:12.190 --> 00:04:17.350
So our intent is for the user to click a checkbox in one checkbox group and have it one one mutation,

65
00:04:17.470 --> 00:04:21.910
and then the user clicks a checkbox in another checkbox group component and it can run a totally different

66
00:04:21.910 --> 00:04:22.450
mutation.

67
00:04:22.690 --> 00:04:24.040
That's how we get that reusability.

68
00:04:24.370 --> 00:04:29.350
So our mutations are going to be the exact same ones we used in our former components.

69
00:04:29.350 --> 00:04:34.630
In this one, it's going to be add selected organizations and the one that we're replacing in job types

70
00:04:34.630 --> 00:04:36.340
is going to be ads like the job types.

71
00:04:36.610 --> 00:04:41.800
So similarly, we're going to import those two constants in this file and then we're going to make them

72
00:04:41.800 --> 00:04:45.820
available from the set of methods so that we can use them in our template.

73
00:04:46.120 --> 00:04:47.680
So right here, I'm going to import.

74
00:04:49.100 --> 00:04:50.780
Ad selected job types.

75
00:04:52.460 --> 00:05:01.280
And add selected organizations and that's going to come from the source directory store constants.

76
00:05:01.880 --> 00:05:02.210
All right.

77
00:05:02.360 --> 00:05:06.530
Now, in this case, we just need these to be available to the template and they're available in this

78
00:05:06.530 --> 00:05:06.950
scope.

79
00:05:07.130 --> 00:05:12.320
So we can simply make them properties on this object right here in the setup method.

80
00:05:12.320 --> 00:05:13.490
And this will work just fine.

81
00:05:13.760 --> 00:05:15.410
We don't need to do anything extra in setup.

82
00:05:15.650 --> 00:05:20.240
So right here I'm going to provide adds like the job types, which is just a string from above and then

83
00:05:20.240 --> 00:05:21.650
add selected organizations.

84
00:05:22.400 --> 00:05:23.030
Save that.

85
00:05:23.240 --> 00:05:23.930
And there we go.

86
00:05:24.260 --> 00:05:24.620
All right.

87
00:05:24.620 --> 00:05:28.190
So we've taken care of unique values and we've taken care of mutation.

88
00:05:28.340 --> 00:05:32.630
We also need to provide each instantiation of checkbox group with a header prop.

89
00:05:32.780 --> 00:05:35.900
But we're going to be able to do that inline in our HTML template.

90
00:05:35.900 --> 00:05:37.910
We're not going to need anything in our set of method.

91
00:05:38.180 --> 00:05:39.410
So this should be good enough.

92
00:05:39.800 --> 00:05:40.160
All right.

93
00:05:40.430 --> 00:05:43.310
So let me scroll up here and I will delete these two eventually.

94
00:05:43.310 --> 00:05:47.720
But let's replace them side by side so we can compare the new code with the old code.

95
00:05:48.020 --> 00:05:50.270
So first step, I'm going to replace job types right here.

96
00:05:50.540 --> 00:05:55.490
So now I want to use my new component, which is called Job Filter, Sidebar, CheckBox Group.

97
00:05:55.790 --> 00:06:00.590
Make sure that you either autocomplete or if you write it out, make sure you include the checkbox or

98
00:06:00.590 --> 00:06:03.140
that the dashes, rather the hyphens in the right location.

99
00:06:03.680 --> 00:06:04.010
All right.

100
00:06:04.220 --> 00:06:06.740
And of course, we need to make this a self-closing component.

101
00:06:06.750 --> 00:06:07.880
There's nothing to render inside it.

102
00:06:08.870 --> 00:06:09.230
All right.

103
00:06:09.440 --> 00:06:12.140
And now we want to provide the three props that we care about.

104
00:06:12.150 --> 00:06:13.790
So, header, unique values, mutation.

105
00:06:14.060 --> 00:06:15.370
For this first checkbox group.

106
00:06:15.380 --> 00:06:16.490
I'm going to provide a header.

107
00:06:18.300 --> 00:06:25.140
And if this is our header for the job types, then the header can be the exact same thing it was in

108
00:06:25.140 --> 00:06:26.220
our job types components.

109
00:06:26.220 --> 00:06:30.870
So for example, in job types, our header was simply the string of job types.

110
00:06:31.080 --> 00:06:35.730
And remember the reason we need the header is because when it flows down into the checkbox group it's

111
00:06:35.730 --> 00:06:38.670
going to be passed down to A and to render that as the accordion header.

112
00:06:39.000 --> 00:06:40.380
So this can be a plain string.

113
00:06:40.380 --> 00:06:45.000
So we do not need to use any kind of v bind syntax we can simply as job types that string is going to

114
00:06:45.000 --> 00:06:51.690
flow down as a problem to here and then will flow down an additional level into accordion and all of

115
00:06:51.690 --> 00:06:52.320
that should work.

116
00:06:52.680 --> 00:06:53.040
All right.

117
00:06:53.250 --> 00:06:54.600
So that takes care of the header prop.

118
00:06:54.600 --> 00:06:55.650
It's going to be a plain string.

119
00:06:55.650 --> 00:06:58.440
Then we need to provide our unique values prop.

120
00:06:59.640 --> 00:07:03.630
And of course, for this first one, which is going to be our first checkbox group, this is for job

121
00:07:03.630 --> 00:07:03.960
types.

122
00:07:04.140 --> 00:07:08.220
So we can provide the set we have in unique job types.

123
00:07:08.400 --> 00:07:13.890
So I'm going to provide that complete reactive object as a prop value right here.

124
00:07:13.890 --> 00:07:14.610
Save that.

125
00:07:15.260 --> 00:07:15.540
All right.

126
00:07:15.540 --> 00:07:20.130
And we can see right here, remember that we want to make this a dynamic reference to the reactive computer

127
00:07:20.130 --> 00:07:20.850
computed object.

128
00:07:21.060 --> 00:07:24.180
And then we also want to use the colon to make that V bind.

129
00:07:24.180 --> 00:07:24.480
All right.

130
00:07:24.480 --> 00:07:26.970
Because we don't want to provide a string of unique job types.

131
00:07:27.180 --> 00:07:32.220
We want to provide the name that refers to our reactive object right here that's available that has

132
00:07:32.220 --> 00:07:33.060
the set inside it.

133
00:07:33.360 --> 00:07:34.500
So we're going to pass that down.

134
00:07:34.500 --> 00:07:38.400
And this set is what's going to flow down into this component as unique values.

135
00:07:38.640 --> 00:07:43.290
And then that set, that dynamic collection of iterative values, is what it's going to iterate over

136
00:07:43.290 --> 00:07:44.670
using the V for directive.

137
00:07:45.240 --> 00:07:45.540
All right.

138
00:07:45.540 --> 00:07:49.860
So the beautiful part about this design is for every instantiation of the checkbox group component,

139
00:07:49.980 --> 00:07:54.510
we can provide a totally different collection of unique values for this thing to iterate over and create

140
00:07:54.510 --> 00:07:55.410
checkboxes for.

141
00:07:55.770 --> 00:08:00.930
Now, the only thing that S Lynch doesn't like here is that it prefers that we use hyphenated prop names

142
00:08:00.930 --> 00:08:03.180
instead of a camel case.

143
00:08:03.420 --> 00:08:05.070
So either either approach will work.

144
00:08:05.070 --> 00:08:09.060
But I'm just going to change this to unique values so it satisfies.

145
00:08:09.060 --> 00:08:09.510
Excellent.

146
00:08:09.690 --> 00:08:14.970
Whenever you have a camel case prop like we do here, it's totally fine to either provide camel case

147
00:08:15.000 --> 00:08:21.090
or the kabob case, the the dash case, the you use them as identical as we've seen throughout the course.

148
00:08:21.240 --> 00:08:23.880
Same thing, by the way, with the instantiation of the component name.

149
00:08:24.030 --> 00:08:25.680
This works, but so this camel case.

150
00:08:26.070 --> 00:08:28.830
All right so we've taken care of header and we've taken care of unique values.

151
00:08:28.830 --> 00:08:30.690
The other thing we need to provide is mutation.

152
00:08:30.960 --> 00:08:33.030
So right here, I'm going to provide my mutation.

153
00:08:35.380 --> 00:08:35.740
All right.

154
00:08:35.740 --> 00:08:40.010
And remember, if I simply do this, it's going to be a string, and that's not what I want.

155
00:08:40.030 --> 00:08:45.910
I want to reference a constant below that is available right here, which is my ADD selected job types

156
00:08:45.910 --> 00:08:46.510
constant.

157
00:08:46.750 --> 00:08:50.950
So yes, technically the constant is the exact same as the string value, right?

158
00:08:50.950 --> 00:08:54.970
Because this constant is just a name for a string that has the exact same content.

159
00:08:55.210 --> 00:08:59.620
So technically we could get away with this, but that would defeat the entire value of importing it

160
00:08:59.620 --> 00:09:01.060
and making it available below.

161
00:09:01.180 --> 00:09:02.980
We want to use this specific constant.

162
00:09:03.160 --> 00:09:07.750
So to reference that piece of dynamic named content, we want to use V bind here.

163
00:09:08.320 --> 00:09:09.580
All right, so there we go.

164
00:09:09.580 --> 00:09:13.720
This should take care of our very first checkbox group and this should replace the former functionality

165
00:09:13.720 --> 00:09:15.700
that we had with our job types component.

166
00:09:16.060 --> 00:09:16.960
So let's remove that.

167
00:09:17.950 --> 00:09:22.990
And now we need to create another checkbox group to replace our former organizations component right

168
00:09:22.990 --> 00:09:23.290
here.

169
00:09:23.590 --> 00:09:24.490
So same idea.

170
00:09:24.490 --> 00:09:28.480
I'm going to use another job filter sidebar checkbox group make itself closing.

171
00:09:28.480 --> 00:09:31.990
We need the same three props header can be a plain string.

172
00:09:31.990 --> 00:09:33.820
This is what we're going to pass down to the accordion.

173
00:09:34.120 --> 00:09:36.430
And I'm guessing that this one is organization.

174
00:09:36.450 --> 00:09:37.990
So let me provide that right here.

175
00:09:38.230 --> 00:09:39.160
Organizations.

176
00:09:39.280 --> 00:09:43.720
And just to double check, we can go into our old component that we're replacing, scroll up.

177
00:09:43.870 --> 00:09:48.760
And yes, indeed, the value that we want to pass down to the accordion is just these string organizations.

178
00:09:48.760 --> 00:09:49.840
So this will work just great.

179
00:09:50.260 --> 00:09:54.760
And then we need to provide the unique values for this component to iterate over in the v4.

180
00:09:55.000 --> 00:09:57.280
So once again, colon unique values to bind.

181
00:09:57.490 --> 00:10:01.330
Except this time we don't want unique job types, we want the unique organizations.

182
00:10:01.720 --> 00:10:06.580
Again, the only reason we're able to use these names in the template is because we return them in the

183
00:10:06.580 --> 00:10:07.480
object below.

184
00:10:07.810 --> 00:10:11.080
That's very critical that we all return them here so that we are able to use them.

185
00:10:11.500 --> 00:10:15.850
Okay, so for the second stage creation, we have the header, we have the unique values, we also need

186
00:10:15.850 --> 00:10:16.510
the mutation.

187
00:10:16.780 --> 00:10:21.640
So right here I'm going to use the bind to dynamically provide a value to the mutation prop and that

188
00:10:21.640 --> 00:10:26.800
is going to be our ADD selected organization's constant that we also made available down below.

189
00:10:27.640 --> 00:10:28.450
Save that.

190
00:10:28.930 --> 00:10:31.030
And with that we can remove this thing.

191
00:10:31.870 --> 00:10:32.350
All right.

192
00:10:32.350 --> 00:10:36.340
And with that, of course, we're going to get a new series of complaints because Iceland is telling

193
00:10:36.340 --> 00:10:40.690
us, hey, you're no longer using your former job types and organizations components anywhere in your

194
00:10:40.690 --> 00:10:41.080
template.

195
00:10:41.080 --> 00:10:42.010
And it's absolutely right.

196
00:10:42.340 --> 00:10:47.980
So we can go ahead and delete this, delete this, delete the corresponding imports for those two components,

197
00:10:48.280 --> 00:10:49.000
save that.

198
00:10:49.360 --> 00:10:53.470
And with that, I'm going to transition to my browser and we can see if everything still works.

199
00:10:53.740 --> 00:10:54.670
Let's do that right now.

200
00:10:57.090 --> 00:10:57.750
And there we go.

201
00:10:57.750 --> 00:10:57.950
It is.

202
00:10:57.960 --> 00:10:59.220
Refresh the page quickly.

203
00:10:59.610 --> 00:11:04.740
And all right, so we have our jobs in the right hand side, and here we have our new components allegedly.

204
00:11:04.740 --> 00:11:06.780
So let's double check our view dev tools.

205
00:11:07.050 --> 00:11:08.340
I'm going to go into view.

206
00:11:08.520 --> 00:11:10.110
I'm going to make sure that I'm in components.

207
00:11:10.110 --> 00:11:13.080
Let me just refresh, because I know this thing can be a little flaky sometimes.

208
00:11:13.440 --> 00:11:13.800
All right.

209
00:11:13.800 --> 00:11:18.210
So in my job results view, if I go into the job filter sidebar, take a look.

210
00:11:18.210 --> 00:11:21.960
We have a checkbox do component now and then another one right below it.

211
00:11:22.290 --> 00:11:26.640
If I click into this, we're going to see the props it's receiving and take a look what it's getting.

212
00:11:26.640 --> 00:11:28.110
It's getting a header of job types.

213
00:11:28.110 --> 00:11:29.230
That's a plain string.

214
00:11:29.260 --> 00:11:30.570
That's the easiest thing to understand.

215
00:11:30.870 --> 00:11:34.470
But the mutation is coming from the imported constant in the top component.

216
00:11:34.740 --> 00:11:39.780
And similarly here, it's getting the set of the four values that it's going to use as the unique values

217
00:11:39.780 --> 00:11:44.340
prop to iterate over and of course to make four checkboxes for right here.

218
00:11:44.640 --> 00:11:47.700
But the beautiful part is for a second checkbox script component.

219
00:11:47.880 --> 00:11:52.860
Because of the reusability, we can simply give it a different set for the unique values prop in this

220
00:11:52.860 --> 00:11:57.990
case the set of six unique organizations which going to get from the composable function which is talking

221
00:11:57.990 --> 00:12:00.480
to view x, lots of different levels and layers here.

222
00:12:00.720 --> 00:12:06.680
And lo and behold, we have the exact same principle, six different checkboxes that are going to render

223
00:12:06.840 --> 00:12:12.360
simply from the component, repeating the same logic and applying the same tailwind styles, etc. And

224
00:12:12.360 --> 00:12:16.170
the final thing that makes it all come together, of course, is the mutation, because whenever we

225
00:12:16.170 --> 00:12:21.840
select a value here, we need to make sure that we commit the right mutation so that we overwrite the

226
00:12:21.840 --> 00:12:26.700
right part of the book store, which of course triggers a state update, triggers the getter to be run

227
00:12:26.820 --> 00:12:28.680
that updates the jobs on the right hand side.

228
00:12:28.890 --> 00:12:30.780
So let's take a look in this first component.

229
00:12:30.780 --> 00:12:31.890
When I check part time.

230
00:12:32.670 --> 00:12:34.530
Well, notice the jobs on the right updated.

231
00:12:34.740 --> 00:12:40.260
You'll notice here that in our selected values local data array, this is the generic name we used here.

232
00:12:40.290 --> 00:12:44.040
That component is storing its local state of having that array of part time.

233
00:12:44.250 --> 00:12:48.600
This is not going to affect the other checkbox group because it's a totally separate, independent component.

234
00:12:48.900 --> 00:12:51.480
But we're using the generic name Selected Values, which applies.

235
00:12:51.840 --> 00:12:56.970
And given that everything is updating, we can be confident that we're sending the right mutation to

236
00:12:56.970 --> 00:12:57.450
view X.

237
00:12:57.690 --> 00:13:03.690
In fact, I can confirm by taking a look at this and you can see right here are selected job types array

238
00:13:03.810 --> 00:13:09.120
has been updated with part time and the fact that that state has correctly updated means we're running

239
00:13:09.120 --> 00:13:13.800
the right mutation and properly invoking it, even though we're doing it in a kind of generic manner,

240
00:13:13.920 --> 00:13:18.930
because the mutation that we want to run, we're actually passing into our checkbox group from the parent

241
00:13:18.930 --> 00:13:20.520
component of job filter sidebar.

242
00:13:20.850 --> 00:13:22.890
The exact same rules apply for the second one.

243
00:13:22.890 --> 00:13:24.600
So let me just check something like YouTube.

244
00:13:24.870 --> 00:13:28.470
The fact that we do something like the you and me, we can see the jobs and the right update.

245
00:13:28.650 --> 00:13:35.250
If I look inside that component, we can see it's local selected values state its own local data that

246
00:13:35.250 --> 00:13:38.760
we got using the ref function this time that's being updated.

247
00:13:38.940 --> 00:13:43.920
And because the mutation is add selected organizations that's the mutation work committing whenever

248
00:13:43.920 --> 00:13:45.390
we click on a box here.

249
00:13:45.690 --> 00:13:47.910
So once again, we're going to commit that same mutation right here.

250
00:13:48.150 --> 00:13:53.550
That mutation name is passed in from job filter sidebar that mutation runs and thus we update the view

251
00:13:53.670 --> 00:13:55.020
store and there we go.

252
00:13:55.020 --> 00:14:00.660
We have selected organizations that is going to now be an array of two strings mirroring the exact structure

253
00:14:00.660 --> 00:14:01.200
we have here.

254
00:14:01.380 --> 00:14:07.020
So it looks like everything is working perfectly and now we have a beautiful, more generic, reusable

255
00:14:07.020 --> 00:14:11.040
checkbox for the component that works very well with all it's supposed to do.

256
00:14:11.280 --> 00:14:15.900
So we finally got to the point where we were able to consolidate these former two components which were

257
00:14:15.900 --> 00:14:20.160
very, very similar, but just had a different couple of small differences, right?

258
00:14:20.310 --> 00:14:26.640
The header name right here, the actual set of values that we wanted to iterate over and which view

259
00:14:27.810 --> 00:14:28.980
X mutation to run.

260
00:14:29.100 --> 00:14:31.260
Those were the three elements that differed.

261
00:14:31.380 --> 00:14:36.960
And in order to account for that dynamic difference, we simply made that props and that allowed us

262
00:14:36.960 --> 00:14:39.210
to create a more general reusable component.

263
00:14:39.390 --> 00:14:45.090
And by having the parent the jobs of their sidebar provide those different pieces of information, we

264
00:14:45.090 --> 00:14:48.630
were able to make a much more effective, reusable component.

265
00:14:48.630 --> 00:14:50.880
And now we don't need to write to test three.

266
00:14:50.880 --> 00:14:51.930
We can simply write one.

267
00:14:52.050 --> 00:14:58.020
And then later on, if you want to add another checkbox group that similarly is going to talk to The

268
00:14:58.020 --> 00:15:01.410
View Store and similarly is going to run a different mutation.

269
00:15:01.590 --> 00:15:04.710
We can basically reuse this and it's now all built out of the box.

270
00:15:04.800 --> 00:15:05.160
All right.

271
00:15:05.160 --> 00:15:06.510
So no more need for duplication.

272
00:15:06.690 --> 00:15:09.450
I'm really happy with this because this was a long time coming.

273
00:15:09.450 --> 00:15:14.160
I remember when we started building out these components, we kind of built them intentionally as duplicates

274
00:15:14.340 --> 00:15:19.410
just so we can kind of, you know, build them out and get a chance to see the duplication, feel the

275
00:15:19.410 --> 00:15:19.800
pain.

276
00:15:20.010 --> 00:15:25.000
And I'm really glad that now we were able to come up with a solution that moves the code based in a

277
00:15:25.000 --> 00:15:26.400
in a better, stronger direction.

278
00:15:26.820 --> 00:15:27.180
All right.

279
00:15:27.180 --> 00:15:28.860
So that's all there is to cover it in this lesson.

280
00:15:28.860 --> 00:15:30.480
So I will see you in the next one.
