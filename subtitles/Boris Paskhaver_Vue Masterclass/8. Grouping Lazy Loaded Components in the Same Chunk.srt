1
00:00:00,360 --> 00:00:01,260
All right.

2
00:00:01,260 --> 00:00:05,470
So I do want to show you one more advanced feature related to lazy loading.

3
00:00:05,490 --> 00:00:10,170
It's not particularly helpful for our app because we have a really small number of components and views.

4
00:00:10,380 --> 00:00:14,610
But you can imagine that this would be pretty helpful if you have 100 different views in your app.

5
00:00:15,030 --> 00:00:22,830
So what we can do is we can tell View Seelye and Webpack to gather up multiple views into a pre-configured

6
00:00:22,830 --> 00:00:23,310
chunk.

7
00:00:23,550 --> 00:00:27,450
And what we really mean by the word chunk is just a JavaScript file.

8
00:00:27,720 --> 00:00:33,780
So the way that Vue works by default, as we saw in the previous lesson, is it creates a separate JavaScript

9
00:00:33,780 --> 00:00:35,040
file for every Vue.

10
00:00:35,190 --> 00:00:38,250
So one for home, one for job results, one for job.

11
00:00:38,580 --> 00:00:44,640
But maybe we figure out, based on analyzing traffic to our website, that the job results, Vue and

12
00:00:44,640 --> 00:00:46,590
the job view are very closely related.

13
00:00:46,590 --> 00:00:50,190
So a user will always visit the first and then the second.

14
00:00:50,430 --> 00:00:55,350
If we find, for example, that pattern and we say, Hey, both of these views are pretty lightweight,

15
00:00:55,350 --> 00:01:01,920
for example, and we may want to consolidate them into a single JavaScript file so that if the user

16
00:01:01,920 --> 00:01:05,850
visits the first one, they'll get the code for all of those components immediately.

17
00:01:06,060 --> 00:01:11,220
And obviously if they have the code cached, then when they navigate to the second view, we don't need

18
00:01:11,220 --> 00:01:16,020
to make an extra request for a new JavaScript file and it will be a little bit of a smoother and faster

19
00:01:16,020 --> 00:01:16,590
experience.

20
00:01:16,890 --> 00:01:20,430
Again, when you want to do this is sort of a matter of tradeoffs, right?

21
00:01:20,440 --> 00:01:26,610
Do you want to put more code in the file to increase its size for a user benefit in certain situations?

22
00:01:26,610 --> 00:01:29,310
If you discover, for example, that both files are really small?

23
00:01:29,550 --> 00:01:34,020
Or do you want to hold off because the user may not visit any of those second pages?

24
00:01:34,020 --> 00:01:34,230
Right.

25
00:01:34,290 --> 00:01:37,740
It's really up to you to decide when is a good idea to do this.

26
00:01:37,740 --> 00:01:43,830
But I do want to show you how we can consolidate multiple imports and multiple views and lazy loads

27
00:01:43,830 --> 00:01:49,680
into a single JavaScript file to break from the convention that we saw in the previous lesson of one

28
00:01:49,680 --> 00:01:51,030
file per view.

29
00:01:51,330 --> 00:01:52,260
So here's what we do.

30
00:01:52,590 --> 00:01:58,170
What we do is inside our import function we can provide a comment.

31
00:01:58,170 --> 00:02:05,010
And that comment is actually what Webpack uses to identify the separation of the chunks or in other

32
00:02:05,010 --> 00:02:06,540
words, the JavaScript files.

33
00:02:06,780 --> 00:02:13,080
So right here before the string that specifies the component, I'm going to use this syntax, the JavaScript

34
00:02:13,080 --> 00:02:16,770
comment syntax with a slash and a star, right?

35
00:02:17,010 --> 00:02:19,920
And this is the exact syntax that Webpack is looking for.

36
00:02:20,190 --> 00:02:23,970
And what I do here is I provide a property name, which is not up to us.

37
00:02:23,970 --> 00:02:26,790
It's going to be web webpack chunk name.

38
00:02:27,690 --> 00:02:33,000
And then I provide a colon very much like JavaScript objects in text and then in double quotes or a

39
00:02:33,000 --> 00:02:33,450
string.

40
00:02:33,450 --> 00:02:39,780
I provide the name of the JavaScript file here that I want this view to be included in.

41
00:02:40,200 --> 00:02:43,620
So let's say I decide to call this file jobs, right?

42
00:02:43,620 --> 00:02:47,370
Because this is sort of related to the concept of jobs on my site, right?

43
00:02:47,370 --> 00:02:54,390
So this chunk, this code, the view JavaScript that is needed to render the job results view is now

44
00:02:54,390 --> 00:02:56,820
in its own chunk, in web part called jobs.

45
00:02:57,180 --> 00:03:03,030
And what I want to do is I also want to include my job view in that same JavaScript file, in that same

46
00:03:03,030 --> 00:03:03,390
chunk.

47
00:03:03,720 --> 00:03:08,670
Well, all I have to do is copy this code and put it in the import statement here as well.

48
00:03:08,670 --> 00:03:18,660
So let me just copy this right here and put it here again as a comment before our actual import component

49
00:03:18,870 --> 00:03:20,670
and make sure you close the comment off.

50
00:03:20,670 --> 00:03:24,300
Otherwise view and JavaScript will think that the rest of the line is also a comment.

51
00:03:24,630 --> 00:03:25,560
So it's going to look like that.

52
00:03:25,740 --> 00:03:32,430
And because we gave both of these functions and both of these views, the same Webpack chunk name,

53
00:03:33,300 --> 00:03:36,030
Webpack knows to associate them together.

54
00:03:36,690 --> 00:03:41,520
And similarly, if we added a third view and we gave it the same Webpack chunk name, it would know

55
00:03:41,520 --> 00:03:43,890
to associate them with this Jobs JavaScript file.

56
00:03:44,130 --> 00:03:48,990
And later on, if we wanted to consolidate three other files in their own separate chunk, let's say

57
00:03:48,990 --> 00:03:51,480
we have like a user page write user profile.

58
00:03:51,690 --> 00:03:56,280
We might have a Webpack chunk name of user and that's its own separate category.

59
00:03:56,490 --> 00:04:01,800
And whichever imports we put in that category view, Seelye and Webpack will bundle up.

60
00:04:02,040 --> 00:04:05,310
So this is almost like the parent folder, even though it represents a file.

61
00:04:05,460 --> 00:04:11,550
But you can almost think of this as the kind of organizational tool that we use to tell Webpack which

62
00:04:11,550 --> 00:04:13,440
views to include together, right?

63
00:04:13,440 --> 00:04:18,390
So you can have more than one Webpack chunk name, but those are the parent categories under which you

64
00:04:18,390 --> 00:04:20,850
want to include those given files.

65
00:04:21,180 --> 00:04:24,840
Now, in the case of home view, I'm not going to give a Webpack chunk name.

66
00:04:24,840 --> 00:04:29,670
So it's just going to go back to its default implementation and that default file name that we saw in

67
00:04:29,670 --> 00:04:30,180
the browser.

68
00:04:30,330 --> 00:04:36,270
But for these two, I'm going to load a single file containing the code for both of these components.

69
00:04:36,360 --> 00:04:41,370
Whenever the user accesses either of these two routes, they're going to get that single jobs JASS file,

70
00:04:41,460 --> 00:04:43,470
and that's going to hold the code for both of these components.

71
00:04:43,770 --> 00:04:45,420
So let's see how this works in my browser.

72
00:04:45,420 --> 00:04:47,760
So I'm going to go to Chrome.

73
00:04:48,540 --> 00:04:54,810
Let me clear all this and let me go to my home page and refresh and we're going to see our app file.

74
00:04:54,810 --> 00:04:57,780
That is the core of your code and here is the home view code.

75
00:04:57,960 --> 00:04:59,730
That's the exact same thing we saw in the.

76
00:04:59,800 --> 00:05:00,480
Previous lesson.

77
00:05:00,810 --> 00:05:05,730
And now when we go to the jobs page, number one, we're going to lazy load, add that new file.

78
00:05:06,390 --> 00:05:07,080
So there it is.

79
00:05:07,080 --> 00:05:10,770
And notice that it has the exact same name as we gave to the Web park.

80
00:05:10,950 --> 00:05:11,880
Chunk name property.

81
00:05:11,880 --> 00:05:12,660
It's called jobs.

82
00:05:12,660 --> 00:05:13,020
Yes.

83
00:05:13,260 --> 00:05:20,010
And this file will include the component code for both this page and the individual jobs page.

84
00:05:20,220 --> 00:05:26,730
So if I go to an individual jobs page like slash jobs, slash results, slash six, when I go to this

85
00:05:26,730 --> 00:05:31,650
page, you'll notice that we don't have anything new in the network tab because we already have this

86
00:05:31,650 --> 00:05:34,920
file loaded and this file already has this content.

87
00:05:35,160 --> 00:05:41,940
Again, I can prove that to you by searching in this file for sample text like job, page for job and

88
00:05:41,940 --> 00:05:46,740
you'll see there is a match and here is that text that is being rendered on to the screen.

89
00:05:47,040 --> 00:05:52,860
So this chunk, which is basically just a JavaScript file, includes everything we need based on what

90
00:05:52,860 --> 00:05:54,210
we specify in the router file.

91
00:05:54,420 --> 00:05:59,610
If we had another component and we gave it the same comment, it would also be included in this jobs

92
00:05:59,610 --> 00:05:59,970
file.

93
00:06:00,330 --> 00:06:02,730
And so we can have as many web pack chunks as we want.

94
00:06:02,730 --> 00:06:08,160
We simply specify the category files that we'd like to use to store components, and obviously it makes

95
00:06:08,160 --> 00:06:13,290
sense to group components together that are likely to be used together, which means the user is likely

96
00:06:13,290 --> 00:06:14,880
to go from one component to the other.

97
00:06:15,060 --> 00:06:19,860
It doesn't make sense to put in components that are super far from each other, like the jobs page in

98
00:06:19,860 --> 00:06:24,390
the help page, because it's unlikely that the user is going to go from one to the other at that point.

99
00:06:24,390 --> 00:06:30,320
You can lazy load smaller components as needed, but still bundle up related content in one file so

100
00:06:30,330 --> 00:06:32,220
the user gets everything up front again.

101
00:06:32,220 --> 00:06:33,390
It's a matter of balance.

102
00:06:33,390 --> 00:06:38,550
It's a matter of looking at your file sizes and your user traffic and how the user navigates your site.

103
00:06:38,910 --> 00:06:43,440
Again, that's kind of an advanced feature because it's mostly analytical and dependent on team and

104
00:06:43,440 --> 00:06:49,110
code base and product, etc. But I hope that at least the syntax has been easy to understand and the

105
00:06:49,110 --> 00:06:52,920
value and benefit has been easy to understand as well.

106
00:06:52,950 --> 00:06:57,300
Obviously for a project this size not really that important because it's pretty lightweight as it is.

107
00:06:57,510 --> 00:07:01,710
But when you're dealing with huge view apps with hundreds of components and hundreds of views, it may

108
00:07:01,710 --> 00:07:04,890
make sense to consolidate and organize your code like so.

109
00:07:05,220 --> 00:07:05,550
All right.

110
00:07:05,550 --> 00:07:07,050
That's all there is to cover in this lesson.

111
00:07:07,050 --> 00:07:08,670
So I will see you in the next one.
