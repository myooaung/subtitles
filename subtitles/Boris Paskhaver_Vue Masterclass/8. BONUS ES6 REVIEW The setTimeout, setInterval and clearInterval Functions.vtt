WEBVTT
1
00:00:00.510 --> 00:00:07.950
All right in this lesson will introduce or reveal three core JavaScript functions and they are set time

2
00:00:07.950 --> 00:00:10.620
out set interval and clear interval.

3
00:00:10.890 --> 00:00:14.490
If you feel comfortable with these functions, you can feel free to skip this lesson.

4
00:00:14.640 --> 00:00:18.540
Otherwise, stay here and join me in our Playground Digest file.

5
00:00:18.750 --> 00:00:24.420
As a reminder, this is the file we created where we can play around with core JavaScript and view ideas

6
00:00:24.570 --> 00:00:25.920
outside of our project.

7
00:00:26.220 --> 00:00:30.390
Now, just to set the stage as to why we're learning these core functions, this is what we're going

8
00:00:30.390 --> 00:00:37.020
to utilize within our view components in order to render that dynamic text that changes every 5 seconds.

9
00:00:37.290 --> 00:00:42.600
So as you may recall from the Google Careers website, when the page loads, the user sees text like

10
00:00:42.600 --> 00:00:48.570
code for everyone, and then within 5 seconds that primary verb changes to something like Designed for

11
00:00:48.570 --> 00:00:49.020
everyone.

12
00:00:49.230 --> 00:00:52.680
And then there's another 5 seconds, and then it changes to build for everyone.

13
00:00:52.890 --> 00:00:57.630
And there's actually four different words that it alternates between, but it runs on this consistent

14
00:00:57.630 --> 00:01:00.690
interval, this consistent cycle of every 5 seconds.

15
00:01:00.810 --> 00:01:04.620
It keeps changing that word, and it doesn't stop as long as you're on the page.

16
00:01:04.800 --> 00:01:08.760
And we're going to see how we can use JavaScript to emulate that behavior in this lesson.

17
00:01:08.910 --> 00:01:12.720
Then we're going to take this JavaScript logic and add it to our components in the upcoming list.

18
00:01:13.530 --> 00:01:17.520
So first up, the first function I'd like to introduce you to is set timeout.

19
00:01:17.850 --> 00:01:21.030
So I'm going to write its name here and invoke it set timeout with a capital T.

20
00:01:21.940 --> 00:01:24.160
And this actually takes two arguments.

21
00:01:24.160 --> 00:01:29.590
The first is going to be a function, and the second is going to be a number which represents the number

22
00:01:29.590 --> 00:01:31.000
of milliseconds to wait.

23
00:01:31.000 --> 00:01:36.100
And I'll explain what this means in just a second, but let's write a core arrow function here, and

24
00:01:36.100 --> 00:01:38.170
I'll provide my second argument first.

25
00:01:38.440 --> 00:01:40.240
And what I'm going to do here is 2000.

26
00:01:41.220 --> 00:01:42.780
So here's how set timeout works.

27
00:01:43.110 --> 00:01:50.160
Set time out waits a certain amount of time, a given duration before it runs the logic of your function

28
00:01:50.160 --> 00:01:51.870
that you provide as the first argument.

29
00:01:52.290 --> 00:01:59.250
So the second argument represents how long to wait in milliseconds, and as a reminder, 1000 milliseconds

30
00:01:59.250 --> 00:02:00.780
is equal to 1/2.

31
00:02:01.140 --> 00:02:05.070
So when I put 2000 here, I put effectively 2 seconds.

32
00:02:05.310 --> 00:02:11.790
So what I'm telling set timeout is wait 2 seconds and then JavaScript will automatically run whatever

33
00:02:11.790 --> 00:02:13.500
I put into this function body.

34
00:02:13.800 --> 00:02:20.490
So for now we can do something simple like a console.log and I will say I will print 2 seconds after

35
00:02:20.490 --> 00:02:21.420
the program starts.

36
00:02:22.500 --> 00:02:24.180
She can almost think of it like a pause.

37
00:02:24.180 --> 00:02:24.420
Right?

38
00:02:24.430 --> 00:02:31.050
So we're saying JavaScript pause for this amount of time, then run this function so I can run a program

39
00:02:31.050 --> 00:02:31.290
here.

40
00:02:31.290 --> 00:02:32.850
It's found within the source directory.

41
00:02:32.850 --> 00:02:34.200
The file is playground dogs.

42
00:02:34.410 --> 00:02:40.180
And notice here, when I run this, we have what appears to be a pause and then it finally gets to 2

43
00:02:40.180 --> 00:02:40.530
seconds.

44
00:02:40.530 --> 00:02:44.640
It runs that function, including the console.log, and then the program finally ends.

45
00:02:45.030 --> 00:02:50.220
So this might be a good start for us because for example, we can get the page to load and we can tell

46
00:02:50.280 --> 00:02:56.130
you, hey, wait 5 seconds and then change the verb that you are using in front of the text.

47
00:02:56.130 --> 00:03:01.470
And if we attach that to something like a data property, well then we can get a view to automatically

48
00:03:01.470 --> 00:03:03.480
re render that new word on screen.

49
00:03:03.810 --> 00:03:04.830
And that's a good idea.

50
00:03:04.830 --> 00:03:10.230
But the only problem is, of course, is that it's only going to run once, set time out, waits a certain

51
00:03:10.230 --> 00:03:12.240
amount of time, then runs the function.

52
00:03:12.240 --> 00:03:13.650
We provide it only once.

53
00:03:13.890 --> 00:03:16.020
So that will change our verb exactly once.

54
00:03:16.020 --> 00:03:17.280
And that's not what we want.

55
00:03:17.280 --> 00:03:21.090
We want it to consistently be changing every 5 seconds.

56
00:03:21.840 --> 00:03:27.630
So how can we do that while there's a complimentary built in function in JavaScript called a set interval?

57
00:03:27.870 --> 00:03:30.660
So I'm going to replace set timeout here with set interval.

58
00:03:31.260 --> 00:03:34.020
And both of these functions, by the way, are global functions.

59
00:03:34.020 --> 00:03:38.640
And what that means is we can run them from the top level of JavaScript as we've done so already.

60
00:03:38.820 --> 00:03:43.620
That means we don't need to import them from anywhere, they don't come from any NPM library or anything

61
00:03:43.620 --> 00:03:44.130
like that.

62
00:03:44.310 --> 00:03:49.110
They are built into JavaScript and we can use them in any JavaScript file we want, just like self.

63
00:03:49.590 --> 00:03:51.750
So how to set interval work?

64
00:03:51.990 --> 00:03:55.020
Well, it accepts the exact same arguments as set timeout.

65
00:03:55.020 --> 00:03:58.770
It accepts a function and a duration in milliseconds.

66
00:03:58.920 --> 00:04:01.890
And I'm still going to leave 2000, which represents 2 seconds.

67
00:04:02.160 --> 00:04:06.660
But the way that interval works is it runs the function every time.

68
00:04:06.690 --> 00:04:12.540
It doesn't stop, it runs it at a consistent interval, which is where the name comes from.

69
00:04:12.810 --> 00:04:19.920
So in simpler terms, what I'm saying is every 2 seconds JavaScript will run the function that we provided

70
00:04:19.920 --> 00:04:26.220
as the first argument set timeout will only run the function once, while set interval will set an interval

71
00:04:26.220 --> 00:04:30.420
of time, at which point to run the function consecutively consistently.

72
00:04:30.690 --> 00:04:33.360
So what we're saying here is run every 2 seconds.

73
00:04:33.630 --> 00:04:38.040
So I'm going to change this to just simply saying I will print every 2 seconds.

74
00:04:38.970 --> 00:04:44.460
That's the difference between set interval, which runs forever basically, and versus set timeout which

75
00:04:44.460 --> 00:04:45.450
runs once.

76
00:04:45.720 --> 00:04:46.650
So let's see how this works.

77
00:04:46.650 --> 00:04:53.700
I'm going to start this program up and you'll notice in 2 seconds the first console.log appears and

78
00:04:53.700 --> 00:04:55.830
then the next 2 seconds it continues.

79
00:04:55.890 --> 00:04:59.730
And actually if you were to walk away from your computer for an hour, this would actually continue

80
00:04:59.730 --> 00:05:00.030
running.

81
00:05:00.030 --> 00:05:05.850
There's nothing telling JavaScript to stop, which means in JavaScript mind the program is still consistently

82
00:05:05.850 --> 00:05:08.790
running and it's still printing this out every 2 seconds.

83
00:05:09.390 --> 00:05:10.710
So I'm going to terminate this program.

84
00:05:11.520 --> 00:05:14.720
I'm actually in a press control C just to make sure we terminate it.

85
00:05:15.060 --> 00:05:18.030
And this is kind of moving us in the right direction, right?

86
00:05:18.030 --> 00:05:25.230
Because every 5 seconds, let's say in the browser, we can change the view components data and we can

87
00:05:25.230 --> 00:05:28.530
effectively for say re render that will get the text that we want on the screen.

88
00:05:28.570 --> 00:05:28.830
Right.

89
00:05:29.010 --> 00:05:30.630
This is a step in the right direction.

90
00:05:30.630 --> 00:05:34.950
However, as you see here, we had to manually terminate this process.

91
00:05:35.040 --> 00:05:40.080
We had to actually force know to stop running in order to get this to terminate.

92
00:05:40.080 --> 00:05:41.790
And that can actually problematic, right.

93
00:05:42.030 --> 00:05:48.300
Because we want a more elegant way to get our program to to stop this execution.

94
00:05:48.510 --> 00:05:53.010
So imagine, for example, that we are on the main page where we have this verb changing, but then

95
00:05:53.010 --> 00:05:54.960
the user navigates to another page.

96
00:05:55.080 --> 00:05:57.450
At that point, we don't want to shut down our node process.

97
00:05:57.450 --> 00:06:00.450
We don't want to shut down our browser or our console in the browser.

98
00:06:00.660 --> 00:06:06.510
We want to just terminate this bit of logic as the user navigates to the other page.

99
00:06:06.780 --> 00:06:11.490
A common problem that many developers run into when working with set interval is this logic can actually

100
00:06:11.490 --> 00:06:15.270
accidentally keep running in the background even when you want it to be terminated.

101
00:06:15.480 --> 00:06:15.780
Right?

102
00:06:15.780 --> 00:06:20.790
So you may, for example, navigate to a new page in view, but have it consistently be trying to change

103
00:06:21.000 --> 00:06:26.160
the data property every couple of seconds if we accidentally don't shut down this interval or tear it

104
00:06:26.160 --> 00:06:26.550
down.

105
00:06:27.240 --> 00:06:28.680
So how do we tear down this interval?

106
00:06:28.980 --> 00:06:34.860
Well, there's a complimentary function called Clear Interval, and it accepts an interval object and

107
00:06:34.860 --> 00:06:38.910
it knows how to shut down that interval object or in other words, make it stop running.

108
00:06:39.210 --> 00:06:41.670
So where do we get that interval object from?

109
00:06:41.850 --> 00:06:45.930
We actually get it as the return value of the set interval function.

110
00:06:46.200 --> 00:06:49.380
So right here, I'm going to assign this to a contact called Interval.

111
00:06:50.780 --> 00:06:53.630
And I'm just going to print out an email right here with a console.log.

112
00:06:54.110 --> 00:06:55.820
So let's save this file and run this.

113
00:06:55.820 --> 00:06:59.810
And we're going to see something interesting, which is that the interval object is going to be printed

114
00:06:59.810 --> 00:07:03.770
first and then we're actually going to see that consecutive printing every 2 seconds.

115
00:07:04.010 --> 00:07:09.470
So there we see our interval object print and then you can see we go back to this, I will print every

116
00:07:09.470 --> 00:07:10.070
2 seconds.

117
00:07:10.370 --> 00:07:14.690
That brings up an important JavaScript point, which is actually it used to be a common question in

118
00:07:14.690 --> 00:07:18.650
JavaScript interviews, which is why do we see this timeout object first?

119
00:07:18.980 --> 00:07:23.900
And the answer is because JavaScript does not stop the execution of the remainder of the file.

120
00:07:23.990 --> 00:07:25.310
Just because there is an interval.

121
00:07:25.490 --> 00:07:31.730
The interval kind of exists in its own separate world, in a sense, where JavaScript says, okay,

122
00:07:31.730 --> 00:07:36.080
I'm going to run this every 2 seconds, but I'm not going to block anything else from running.

123
00:07:36.350 --> 00:07:39.910
So JavaScript says, I'm keeping track of this timer of every 2 seconds.

124
00:07:39.920 --> 00:07:42.650
I'll get there eventually, but it continues through the rest of the file.

125
00:07:42.800 --> 00:07:48.440
And before we're at that first 2 seconds, it gets to line number five and it prints out that interval

126
00:07:48.440 --> 00:07:48.920
object.

127
00:07:49.040 --> 00:07:53.300
Then it comes back to its original promise to execute the interval every 2 seconds.

128
00:07:53.390 --> 00:07:59.330
And that's why we continue to see the output after our actual initial console.log of the interval object.

129
00:07:59.630 --> 00:08:04.880
That's just some helpful JavaScript knowledge, but it's not important to know all the details about

130
00:08:04.880 --> 00:08:06.290
how this time that object works.

131
00:08:06.440 --> 00:08:11.750
Just know that this is the object that JavaScript is using to keep track of this timer that's running

132
00:08:11.750 --> 00:08:12.830
every 2 seconds.

133
00:08:12.830 --> 00:08:13.040
Right.

134
00:08:13.130 --> 00:08:16.460
Or however long we specify and we have it available in this interval.

135
00:08:16.460 --> 00:08:19.490
Constant, it's the return value of the set interval function.

136
00:08:19.820 --> 00:08:25.370
So as long as you have this interval object, which you must keep a reference to by saying saving it

137
00:08:25.370 --> 00:08:30.260
to something like a variable or constant, then there is a helpful function called clear interval in

138
00:08:30.260 --> 00:08:35.690
JavaScript, and if you pass it an interval object, it knows to shut it down, right?

139
00:08:35.720 --> 00:08:39.320
To stop whatever it's running, stop the execution of the function that we passed it.

140
00:08:39.620 --> 00:08:43.070
Now, if I run this for right now, you're actually going to see that nothing is going to happen.

141
00:08:43.730 --> 00:08:47.660
And if you think about it for a second, you might realize why this makes sense, knowing what we just

142
00:08:47.660 --> 00:08:47.960
learned.

143
00:08:48.230 --> 00:08:53.150
And the reason is JavaScript says, okay, in 2 seconds, I'm going to run this interval consecutively,

144
00:08:53.150 --> 00:08:55.940
consistent consistently until forever.

145
00:08:56.180 --> 00:09:01.130
But then while it's still waiting for the first 2 seconds, we get to line number five and we immediately

146
00:09:01.130 --> 00:09:03.230
clear that interval so there's nothing left to run.

147
00:09:03.230 --> 00:09:08.840
So the program concludes and we have nothing actually printed in our terminal.

148
00:09:08.840 --> 00:09:12.890
We never actually get to the console.log function at all because 2 seconds haven't passed.

149
00:09:12.890 --> 00:09:13.190
Right?

150
00:09:13.550 --> 00:09:17.780
So just to show you this in action, I'm going to combine a couple ideas that we learned in this lesson.

151
00:09:17.960 --> 00:09:24.500
I'm going to use set time out here, which we introduced first, and that is a function that runs something

152
00:09:24.500 --> 00:09:26.330
once after a given amount of time.

153
00:09:26.540 --> 00:09:32.090
So I'm going to pass it a arrow function and I'm going to pass it an argument of 10,000 milliseconds,

154
00:09:32.090 --> 00:09:32.990
which is 10 seconds.

155
00:09:33.200 --> 00:09:39.500
And in the body of this function, I'm going to run my clear interval function.

156
00:09:39.710 --> 00:09:44.780
So what I'm basically saying is in 10000 seconds, once go ahead and clear the interval.

157
00:09:45.050 --> 00:09:49.820
So before we get to 10,000, we're obviously going to have a couple of executions of 2 seconds or that

158
00:09:49.820 --> 00:09:52.880
time span is going to fit in a couple of times within that 10 seconds.

159
00:09:53.090 --> 00:09:55.640
So we're going to run this function a couple of times.

160
00:09:55.850 --> 00:09:59.090
Now, you may think that 10,000 divided by 2000 means five.

161
00:09:59.210 --> 00:10:04.340
And so we might expect to see the console on five times, but it's actually only going to run four.

162
00:10:04.340 --> 00:10:10.670
And that is just due to the different amount of they're sort of running on different starting points,

163
00:10:10.670 --> 00:10:11.540
if you will, it in time.

164
00:10:11.540 --> 00:10:13.490
And it's not exactly going to be perfect.

165
00:10:13.490 --> 00:10:15.740
Division, let me just show you how this is going to work.

166
00:10:15.740 --> 00:10:19.820
The general idea should be apparent, though, so I'm going to start this and we're going to start the

167
00:10:19.820 --> 00:10:25.910
interval and every 2 seconds we're going to set our clear interval logic in 10 seconds so that 10/2

168
00:10:25.910 --> 00:10:27.710
timer is running down, counting down.

169
00:10:27.860 --> 00:10:31.960
And then once we get there, we clear the interval and the program officially ends.

170
00:10:31.990 --> 00:10:32.330
Right.

171
00:10:32.690 --> 00:10:38.360
And the reason why this is important is the way this is going to work in the browser is we're going

172
00:10:38.360 --> 00:10:40.400
to do a very similar approach to what we have here.

173
00:10:40.640 --> 00:10:44.540
We're going to start an interval and we're going to say every 5 seconds, change the view components

174
00:10:44.540 --> 00:10:49.340
data to whatever is the next verb in line, such as design or build or code.

175
00:10:49.640 --> 00:10:54.350
And then we're also going to build the logic to say if this component is ever on mounted, if it ever

176
00:10:54.380 --> 00:10:58.310
is brought down or destroyed, we have to remember to clear that original interval.

177
00:10:58.310 --> 00:10:59.210
We don't want to run it.

178
00:10:59.490 --> 00:11:05.150
We don't have to leave that running around somewhere in the background of our browser as the user navigates

179
00:11:05.150 --> 00:11:06.020
to a different component.

180
00:11:06.020 --> 00:11:06.290
Right?

181
00:11:06.380 --> 00:11:10.340
We especially don't want the user to come back to the same component and then potentially have multiple

182
00:11:10.340 --> 00:11:13.070
timers running in totally different animals that can.

183
00:11:13.070 --> 00:11:17.450
That's where the potential for a lot of errors pops up.

184
00:11:17.720 --> 00:11:23.270
The key takeaway here is whenever you use set interval, you want to also implement the logic to tear

185
00:11:23.270 --> 00:11:28.820
down that interval, to shut it down, to clear it, to tell JavaScript in the browser, stop this consecutive

186
00:11:28.820 --> 00:11:31.640
running execution that I told you to do every number of seconds.

187
00:11:31.640 --> 00:11:32.710
So be wary.

188
00:11:32.720 --> 00:11:37.340
Whenever you use set interval, there should usually be a complimentary clear interval function call

189
00:11:37.550 --> 00:11:38.540
very close by.

190
00:11:38.780 --> 00:11:39.110
All right.

191
00:11:39.770 --> 00:11:40.070
All right.

192
00:11:40.280 --> 00:11:44.690
So at that, we reviewed the functions that we need to know, set time out, set interval and clear

193
00:11:44.690 --> 00:11:47.210
interval, and we're going to be utilizing them in the very next lesson.
