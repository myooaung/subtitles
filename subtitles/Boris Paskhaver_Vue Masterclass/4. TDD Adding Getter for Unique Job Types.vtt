WEBVTT
1
00:00:00.440 --> 00:00:01.280
Okay.

2
00:00:01.280 --> 00:00:07.850
So we have defined a new property on our View Store State and we've also defined a complimentary mutation

3
00:00:07.850 --> 00:00:10.790
method to update that state property.

4
00:00:11.060 --> 00:00:14.220
The next thing I want to focus on is writing a bunch of getters.

5
00:00:14.570 --> 00:00:19.850
So I've opened up my getters Jast file on the left and the complimentary test suite of getters that

6
00:00:19.850 --> 00:00:21.290
test that Jess on the right.

7
00:00:21.650 --> 00:00:27.320
And as a reminder, when we were building out our organization's selection feature in the previous section,

8
00:00:27.470 --> 00:00:29.720
we actually ended up writing Two Getters.

9
00:00:29.960 --> 00:00:35.600
The first getter here is the one that returned a set of all of the unique organizations by iterating

10
00:00:35.600 --> 00:00:38.180
over our array of jobs in The View Star State.

11
00:00:38.450 --> 00:00:45.350
So that was simply returning the set of organizations that we then used to create a checkbox for each

12
00:00:45.350 --> 00:00:46.610
one on the left hand panel.

13
00:00:46.850 --> 00:00:51.860
And then the second getter was filter jobs by organizations, and that was the one that actually iterated

14
00:00:51.860 --> 00:00:58.100
over the jobs and returned a subset array of just the jobs with organizations that belong to the users

15
00:00:58.100 --> 00:00:59.150
selected organizations.

16
00:00:59.450 --> 00:01:05.180
So following this protocol, this design, this implementation, I think it makes sense to copy it.

17
00:01:05.480 --> 00:01:07.730
So I can see us defining two new getters.

18
00:01:07.910 --> 00:01:12.860
The first will be unique job types to get a set of all of the unique job types from the jobs.

19
00:01:13.100 --> 00:01:18.110
And then the second one will be filter jobs by job types, which will do similar logic to what we have

20
00:01:18.110 --> 00:01:18.440
here.

21
00:01:18.620 --> 00:01:22.400
But again, filter jobs not by organization, but by job type.

22
00:01:22.550 --> 00:01:27.620
And then later on, we'll see how we can consolidate these getters together to work hand-in-hand to

23
00:01:27.620 --> 00:01:29.840
filter jobs by both criteria.

24
00:01:30.500 --> 00:01:34.340
And again, we're kind of approaching this problem from a different direction in this section.

25
00:01:34.520 --> 00:01:40.610
We're kind of writing all of our view Xcode first before we even define a component, before we even

26
00:01:40.610 --> 00:01:43.310
wire up any slice of the user interface.

27
00:01:43.430 --> 00:01:45.980
We're just taking care of all of our View X features first.

28
00:01:46.160 --> 00:01:51.590
And that's totally fine because at the end of the day, all of this UX functionality is just JavaScript.

29
00:01:51.740 --> 00:01:54.260
So there's nothing preventing us from writing a bunch of tests for it.

30
00:01:54.710 --> 00:01:55.010
All right.

31
00:01:55.130 --> 00:02:00.170
One more thing before we get to our unique job types getter, I just want to remind you in our debate

32
00:02:00.170 --> 00:02:06.650
that Jason File that we have these 100 jobs that are going to come from our mock API and so on, every

33
00:02:06.650 --> 00:02:12.080
single job object, we're going to get the job type from this property right here, job type, lowercase

34
00:02:12.080 --> 00:02:16.970
j, capital T, for example, here it's intern and here it's part time.

35
00:02:16.980 --> 00:02:18.440
Later on, you'll find a full time.

36
00:02:18.710 --> 00:02:21.640
So what we want to do is basically the same thing we did with organization.

37
00:02:21.650 --> 00:02:25.280
We want to loop through these jobs which are going to be, in our view, store state.

38
00:02:25.520 --> 00:02:31.220
And we want to add all of these job types to a JavaScript set object because a JavaScript set object

39
00:02:31.220 --> 00:02:32.960
will prohibit duplication.

40
00:02:32.960 --> 00:02:37.070
And that's going to be a really easy way that we can get a data structure of just all of the unique

41
00:02:37.070 --> 00:02:37.640
job types.

42
00:02:37.790 --> 00:02:42.140
And later on, we're going to, of course, iterate over that set and render a checkbox for each job

43
00:02:42.140 --> 00:02:42.350
type.

44
00:02:42.800 --> 00:02:43.250
So.

45
00:02:44.240 --> 00:02:48.650
With that said, I wanted to find a test for my unique job types getter.

46
00:02:48.650 --> 00:02:54.170
I want to use TDD and I can imagine that our implementation and our test is going to be pretty similar

47
00:02:54.170 --> 00:02:55.310
to this one right here.

48
00:02:55.460 --> 00:02:58.760
The one we have for unique organizations that I'm going to do here.

49
00:02:58.910 --> 00:03:01.130
Let me collapse my other test right here.

50
00:03:01.340 --> 00:03:05.990
I'm just going to copy and paste this test from line four to line 16 down below.

51
00:03:06.440 --> 00:03:09.440
Still inside, might get as described, but a little bit below here.

52
00:03:09.680 --> 00:03:14.270
And I'm just going to modify it to work for my new unique job types getter.

53
00:03:14.480 --> 00:03:19.070
So we're still using TDD because we're still going to use a test failure to drive our implementation.

54
00:03:19.340 --> 00:03:23.570
But since this one is going to be very similar, I see no problem with copying and pasting the test

55
00:03:23.570 --> 00:03:24.080
from above.

56
00:03:24.230 --> 00:03:27.110
We just have to be really careful here as we make our adjustments.

57
00:03:27.470 --> 00:03:31.730
So the first adjustment of course is that we're no longer going to be testing our unique organization's

58
00:03:31.730 --> 00:03:32.030
getter.

59
00:03:32.240 --> 00:03:35.750
We're going to be testing a new one that we're about to write, call, unique job types.

60
00:03:36.890 --> 00:03:38.750
And it's not going to find the unique organizations.

61
00:03:38.750 --> 00:03:42.770
It's going to find the unique job types from a list of jobs.

62
00:03:43.340 --> 00:03:47.690
Then what we have here is a mock view store state, and here we have a jobs property.

63
00:03:47.900 --> 00:03:52.130
Our jobs property is still going to stay the same because we're still going to iterate over our jobs

64
00:03:52.130 --> 00:03:55.880
in the real world and filter for their unique job types.

65
00:03:56.090 --> 00:04:00.380
However, we no longer care about the organization property on any given job object.

66
00:04:00.500 --> 00:04:02.360
We care about the job type property.

67
00:04:02.570 --> 00:04:05.420
So I'm going to replace all of these organizations with job type.

68
00:04:05.420 --> 00:04:10.010
In fact, I'm going to use a shortcut in this code, which is I'm going to select the first one and

69
00:04:10.010 --> 00:04:15.650
then on a mac, I'm going to Press Command D to select the next occurrence and command to select the

70
00:04:16.130 --> 00:04:17.060
next occurrence as well.

71
00:04:17.300 --> 00:04:21.680
I believe on a windows this might be controlled D, but in case it doesn't work, just feel free to

72
00:04:21.680 --> 00:04:22.760
delete them all manually.

73
00:04:23.120 --> 00:04:27.260
So here I'm just going to press escape to delete them all at the same time and I'm going to write in

74
00:04:27.260 --> 00:04:28.430
job type here.

75
00:04:29.120 --> 00:04:32.000
That is the property that I just showed you in the DB that Jason filed.

76
00:04:32.390 --> 00:04:35.720
So of course, the string we have on the right here doesn't really matter, but let's make it a little

77
00:04:35.720 --> 00:04:38.240
bit more realistic because Google isn't really a job type.

78
00:04:38.600 --> 00:04:42.140
So how about we make the the first job type a string of full time?

79
00:04:42.920 --> 00:04:48.170
The second one will be a string of temporary, and the third one will be a string of full time as well.

80
00:04:49.200 --> 00:04:53.520
And the reason I'm going to have three job objects is just to verify that we are removing our duplication

81
00:04:53.520 --> 00:04:53.760
here.

82
00:04:54.270 --> 00:04:58.230
So here, instead of our together being called unique organizations, we can obviously give it a more

83
00:04:58.230 --> 00:04:58.980
appropriate name.

84
00:04:59.220 --> 00:05:02.880
And I think the most obvious name here would be a getter like unique job types.

85
00:05:03.630 --> 00:05:07.230
We're still going to pass in our mock view store state, which is this thing right here.

86
00:05:07.410 --> 00:05:08.760
And what do we expect it to do?

87
00:05:08.910 --> 00:05:14.000
To iterate over all those jobs and to get a set object of all the unique job types that they.

88
00:05:14.040 --> 00:05:19.920
At the end, what this getter should return is a set with two strings, full time and temporary.

89
00:05:20.160 --> 00:05:24.540
It's going to remove all the duplicates for us, and the final return value of this getter will be a

90
00:05:24.540 --> 00:05:24.900
set.

91
00:05:25.290 --> 00:05:27.080
So when I save this, it's going to fail.

92
00:05:27.090 --> 00:05:30.870
Obviously, a lot of things are not going to work, starting with the fact that we do not have a getter

93
00:05:30.870 --> 00:05:31.890
called unique job types.

94
00:05:32.640 --> 00:05:37.260
Then later on, if we were to follow TDD, it would tell us that we're not returning a set, basically

95
00:05:37.260 --> 00:05:39.180
driving us to our final implementation.

96
00:05:39.360 --> 00:05:41.520
But as I mentioned earlier, we can speed up a little bit here.

97
00:05:41.850 --> 00:05:46.020
So what I want to do here is define my constant for my unique job types getter.

98
00:05:46.050 --> 00:05:48.360
So let's first head to my constants, just file.

99
00:05:49.500 --> 00:05:53.340
And in here, luckily we already have a section for the job types constants.

100
00:05:53.610 --> 00:06:00.360
So right here I can define a new a new one called unique job types exactly what my test expects.

101
00:06:01.020 --> 00:06:02.490
So let's define that right here.

102
00:06:03.750 --> 00:06:08.520
Save that file and we can transition to our getters vault here at the very top.

103
00:06:08.520 --> 00:06:12.210
I can start by importing our new unique job types constant.

104
00:06:12.210 --> 00:06:13.230
I'm going to do that.

105
00:06:13.620 --> 00:06:14.760
How about below here?

106
00:06:14.790 --> 00:06:20.610
So unique job types is now in my constants file, which means down below we can define a new getter

107
00:06:20.910 --> 00:06:22.980
called unique job types.

108
00:06:23.550 --> 00:06:30.150
Like any getter, it's going to be a method that receives the View Store State as the very first argument.

109
00:06:30.160 --> 00:06:34.110
So we can do that and it's going to be very similar to our implementation above.

110
00:06:34.110 --> 00:06:39.510
So once again, I'm going to begin by creating a new set object which are defined to assign to a constant

111
00:06:39.930 --> 00:06:42.210
called unique job types.

112
00:06:43.810 --> 00:06:45.490
And I'm going to make that a set.

113
00:06:46.090 --> 00:06:49.660
Then I want to iterate over all the jobs in my view store state.

114
00:06:49.870 --> 00:06:55.990
So on my view x state, I'm going to have a jobs property and I'm going to iterate over each one using

115
00:06:55.990 --> 00:06:58.240
a for each loop or a for each method.

116
00:06:58.480 --> 00:07:03.400
And to this we provide a function that is the function that JavaScript is going to run for every job

117
00:07:03.400 --> 00:07:03.820
object.

118
00:07:04.090 --> 00:07:07.060
So I'm going to provide job as my parameter to this function.

119
00:07:07.990 --> 00:07:10.060
And what do I want to do in each of those iterations?

120
00:07:10.240 --> 00:07:17.740
I want to take my unique job types set, and I want to add whatever string I have in that jobs job type

121
00:07:17.740 --> 00:07:18.370
of property.

122
00:07:18.640 --> 00:07:20.710
And we just saw this in a DVD JSON file.

123
00:07:20.950 --> 00:07:22.780
So we're going to iterate over 100 jobs.

124
00:07:22.780 --> 00:07:26.770
For example, we're going to push or add 100 job types into the set.

125
00:07:26.920 --> 00:07:30.340
But of course, the set is going to not care about duplicates.

126
00:07:30.340 --> 00:07:31.300
It's going to discard them.

127
00:07:31.450 --> 00:07:36.700
So at the end of the day, our set is going to have just the unique values from all of the hundred jobs

128
00:07:36.700 --> 00:07:39.310
that we iterate over in the real world or in our test world.

129
00:07:39.430 --> 00:07:43.060
There's obviously only three jobs to iterate over, but the exact same idea.

130
00:07:43.270 --> 00:07:48.010
And finally, very importantly, I have to make sure to return to my unique job type set at the very

131
00:07:48.010 --> 00:07:48.460
end here.

132
00:07:48.790 --> 00:07:49.460
Save that.

133
00:07:50.500 --> 00:07:55.810
Let's let all of our tests run because we modified the constants file and hopefully we get what we want

134
00:07:55.810 --> 00:08:00.700
in our test and we do our getters that test, that Jess file is passing right here, which means we

135
00:08:00.700 --> 00:08:03.280
are correctly iterating over the jobs property.

136
00:08:03.340 --> 00:08:06.430
We are correctly accessing the job type property from each job.

137
00:08:06.550 --> 00:08:08.830
We are correctly gathering them in a set.

138
00:08:08.830 --> 00:08:10.300
We are correctly removing duplicates.

139
00:08:10.510 --> 00:08:15.070
So this test is capturing a lot and our implementation works and hopefully it was obviously a little

140
00:08:15.070 --> 00:08:19.510
bit easier to implement because we're simply following the inspiration from our previous example with

141
00:08:19.510 --> 00:08:20.200
organizations.

142
00:08:20.440 --> 00:08:23.860
So the very next lesson, when I do something similar, we're going to follow that implementation to

143
00:08:23.860 --> 00:08:28.150
create a new getter for filtering the jobs by the unique job types.

144
00:08:28.420 --> 00:08:29.020
I'll see there.
