1
00:00:00,490 --> 00:00:05,020
All right, so congratulations on reaching the end of another core section.

2
00:00:05,200 --> 00:00:09,160
So, as always, let's take a few minutes to review everything that we've learned.

3
00:00:09,430 --> 00:00:13,720
This section was focused on getters in the U.S. What is a getter?

4
00:00:13,960 --> 00:00:21,070
A getter is a method that uses the view store the state to arrive at some kind of computed derived data.

5
00:00:21,430 --> 00:00:26,230
So the benefit of a getter is that when the view state updates, the getter will rerun.

6
00:00:26,500 --> 00:00:30,850
So it is analogous or comparable to a computed component property.

7
00:00:31,060 --> 00:00:36,100
You don't use it to store the primary data, you use it to store something that is dependent on the

8
00:00:36,100 --> 00:00:36,910
primary data.

9
00:00:37,060 --> 00:00:40,570
They also want to update whenever that original data changes.

10
00:00:40,900 --> 00:00:45,130
A getter should not mutate or change or update view state.

11
00:00:45,310 --> 00:00:47,620
That is the responsibility of a mutation.

12
00:00:47,950 --> 00:00:50,770
So what is an example of a use case for a getter?

13
00:00:50,770 --> 00:00:56,320
Well, we saw in the section that we can use the getter to get the user's filter jobs because that is

14
00:00:56,320 --> 00:00:59,710
a subset of the original array of 100 jobs.

15
00:00:59,980 --> 00:01:04,900
So we do not want to create a separate part of the store state such as filter jobs.

16
00:01:05,110 --> 00:01:10,930
In other words, we don't want duplicate data or subset data or anything that creates multiple sources

17
00:01:10,930 --> 00:01:11,440
of truth.

18
00:01:11,440 --> 00:01:17,680
In our view X Store, we don't want an array of 100 jobs and an array of 60 filter jobs because if for

19
00:01:17,680 --> 00:01:22,660
some reason one of those objects change, let's say, for example, somehow the job's name changes.

20
00:01:22,870 --> 00:01:26,920
Well, then you have two places where you need to make sure that change is reflected.

21
00:01:26,920 --> 00:01:30,580
And you never want to do that because that data quickly gets out of sync with each other.

22
00:01:30,760 --> 00:01:33,970
You only want to have one source of truth in your view store state.

23
00:01:34,210 --> 00:01:38,590
But if you need something that is dependent or calculated from it, you should use getters.

24
00:01:38,800 --> 00:01:43,990
So Filter Jobs is a perfect example of when you should use getters, just like in a component, when

25
00:01:43,990 --> 00:01:48,250
you should use computed properties whenever you want something that is coming from something else that

26
00:01:48,250 --> 00:01:49,060
you want to update.

27
00:01:49,660 --> 00:01:54,550
As far as testing, get our methods from view X, you test them like plain JavaScript methods.

28
00:01:54,550 --> 00:01:59,200
You provide an input which is going to represent the store state and then you test for the correct output,

29
00:01:59,320 --> 00:02:03,550
which is the getter doing its magic on the store state to arrive at some kind of new output.

30
00:02:03,760 --> 00:02:05,320
That output can be whatever you want.

31
00:02:05,320 --> 00:02:07,720
It can be a number, it can be a boolean, it can be an array.

32
00:02:07,900 --> 00:02:11,830
In our example, we had a set being produced that came from an array.

33
00:02:11,830 --> 00:02:15,100
That's totally fine because our getter does not reflect permanent data.

34
00:02:15,310 --> 00:02:17,440
So we're not changing or mutating anything.

35
00:02:17,440 --> 00:02:19,990
We're just producing new data based on existing data.

36
00:02:21,100 --> 00:02:26,440
As far as the components we saw that we can use the map getters function to wire up our computed component

37
00:02:26,440 --> 00:02:29,380
properties to be references to those of you x getter methods.

38
00:02:29,680 --> 00:02:33,430
So view X and map getters will automatically create those methods.

39
00:02:33,580 --> 00:02:38,620
Those methods will automatically invoke the correct getters passing in the store state as it currently

40
00:02:38,620 --> 00:02:43,690
is as the first argument it does all of that behind the scenes and then we have access to those getters

41
00:02:43,870 --> 00:02:45,070
via the this keyword.

42
00:02:45,250 --> 00:02:49,000
It's the exact same design as we have with map actions and map mutations.

43
00:02:49,210 --> 00:02:55,120
Of course, the only difference is we pass map getters, an array of getter names from the actual real

44
00:02:55,120 --> 00:02:55,750
view store.

45
00:02:56,140 --> 00:03:02,410
As we know, we have that a dollar sign store property on any view our view component and that represents

46
00:03:02,410 --> 00:03:03,400
our whole view store.

47
00:03:03,580 --> 00:03:08,110
So that has the getters that has the commit method to dispatch method, the state method if we ever

48
00:03:08,110 --> 00:03:13,120
want the getters, we just access the getters property so we can do for example, dot getters dot filter

49
00:03:13,120 --> 00:03:13,540
jobs.

50
00:03:13,750 --> 00:03:18,490
However, it's much easier to use map getters because it takes care of all of that wiring up for us

51
00:03:18,490 --> 00:03:21,730
behind the scenes and our tests will pass either way.

52
00:03:22,480 --> 00:03:27,610
Speaking of tests, in component tests, in my personal view, you rarely have to use a real view store.

53
00:03:27,790 --> 00:03:31,780
We're testing the view, logic and separate method calls for the view tests.

54
00:03:31,990 --> 00:03:37,120
In our component tests, I recommend you mark out the dollar sign store global property.

55
00:03:37,120 --> 00:03:42,000
You can do do that via the mock property of your configuration object that you pass to mount or shall

56
00:03:42,010 --> 00:03:42,220
mount.

57
00:03:42,490 --> 00:03:46,990
And then you can provide the getters property with a plain object and then have it be whatever you want.

58
00:03:47,020 --> 00:03:48,160
It doesn't even have to be a method.

59
00:03:48,160 --> 00:03:49,270
It can be an object.

60
00:03:50,360 --> 00:03:55,760
What are value rather for that property that has whatever you need in order for that test to pass?

61
00:03:56,060 --> 00:03:59,810
So you want to test the interaction between the component and the view store.

62
00:03:59,960 --> 00:04:04,580
You don't need to go the full trip and test that the book stores doing everything internally because

63
00:04:04,580 --> 00:04:07,970
then you're just double testing the view logic in your component tests.

64
00:04:08,120 --> 00:04:12,620
We already have that logic tested in our separate, independent getter tests.

65
00:04:12,890 --> 00:04:17,060
So all you really care about is that the component is talking to the right getter, getting the right

66
00:04:17,060 --> 00:04:19,880
information from it, and then doing something with it in the component.

67
00:04:20,210 --> 00:04:24,980
You do not have to use a real view store to capture that logic and to have that kind of test.

68
00:04:25,160 --> 00:04:25,550
All right.

69
00:04:26,240 --> 00:04:28,610
Similar concepts to what I've been preaching the entire course.

70
00:04:29,390 --> 00:04:33,980
Finally, we saw at the very end of the section that winner view logic gets a little bit too complex.

71
00:04:34,190 --> 00:04:36,650
What we can do is break it up by either responsibility.

72
00:04:36,680 --> 00:04:41,510
In this case, we can have separate files for actions, mutations, getters, or what I've seen in some

73
00:04:41,510 --> 00:04:42,080
code bases.

74
00:04:42,080 --> 00:04:47,090
When that becomes too bloated in itself is you can start breaking things up by feature.

75
00:04:47,270 --> 00:04:51,530
So you might have a users folder and then you'll have user actions, user getters, user mutations.

76
00:04:51,710 --> 00:04:56,420
You don't have a jobs folder where you have job actions, job getters, job mutations, etc. So you

77
00:04:56,420 --> 00:05:00,890
keep breaking it up into what feels appropriate for the size of your code base and your complexity.

78
00:05:01,130 --> 00:05:05,900
As always, just follow the standard teams code base, work with what you have while identifying the

79
00:05:05,900 --> 00:05:07,370
strengths and weaknesses that you see.

80
00:05:07,460 --> 00:05:08,990
What makes the code hard to work with?

81
00:05:09,200 --> 00:05:13,700
And then when it does become too difficult to run maintainable, then you can propose a solution, whatever

82
00:05:13,700 --> 00:05:14,360
works best.

83
00:05:14,540 --> 00:05:18,410
As far as organization, there's no single one size fits all view solution.

84
00:05:18,560 --> 00:05:21,830
It's the same common sense solutions that you apply in any coding project.

85
00:05:21,950 --> 00:05:27,440
Just break things up into smaller function, smaller classes, smaller files, and that will tend to

86
00:05:27,650 --> 00:05:29,840
get better as a codebase scales in size.

87
00:05:29,960 --> 00:05:30,350
All right.

88
00:05:30,680 --> 00:05:32,660
That's all there is to cover in this section.

89
00:05:32,660 --> 00:05:36,980
In the very next section, we're going to review a lot of the view concepts we've come to know and love

90
00:05:37,130 --> 00:05:39,170
by building another feature in our app.

91
00:05:39,410 --> 00:05:40,220
So I will see you there.
