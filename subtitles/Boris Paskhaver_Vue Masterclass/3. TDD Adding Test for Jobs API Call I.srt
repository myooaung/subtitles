1
00:00:00,270 --> 00:00:06,210
All right, so let's use test driven development or TDD to build out the next feature.

2
00:00:06,480 --> 00:00:12,270
So as a reminder, what TDD means is that we're going to write a test first and intentionally failing

3
00:00:12,270 --> 00:00:14,700
test that's going to test what we want.

4
00:00:14,820 --> 00:00:19,770
And then using the failures that we see in our console, we're going to use that to actually implement

5
00:00:19,770 --> 00:00:24,660
the real world test, and that's going to validate that we are testing the right thing, that we are

6
00:00:24,660 --> 00:00:28,710
writing a test that describes the value rather than the implementation.

7
00:00:29,070 --> 00:00:29,460
Okay.

8
00:00:29,700 --> 00:00:33,900
So in my get jobs test file, I'm going to get rid of this console.log.

9
00:00:34,110 --> 00:00:38,760
And the reason of course I have access to imported and here is because I need to mark it out.

10
00:00:38,910 --> 00:00:44,340
I can assume that in my eventual implementation I'm going to be using Axios to make a request and I

11
00:00:44,340 --> 00:00:45,810
need to make sure that I mark it out.

12
00:00:45,810 --> 00:00:50,610
So we're not using the real Axios library when we run the test for this helper function.

13
00:00:51,090 --> 00:00:54,690
So what I'd like to do is import the eventual function that we're going to write.

14
00:00:54,690 --> 00:00:59,460
I'm going to assume that it exists already, because remember, with test driven development, we don't

15
00:00:59,460 --> 00:01:02,670
have any actual code yet, but we write it as if we do.

16
00:01:02,940 --> 00:01:08,400
So I'm going to assume that I can import a get jobs function and where is it going to come from?

17
00:01:08,400 --> 00:01:09,930
It's going to come from the file on the left.

18
00:01:10,170 --> 00:01:16,020
So from the source directory, the API folder, we have a get jobs file and I'm going to assume that

19
00:01:16,020 --> 00:01:18,900
I'm going to have a default export, which is my get jobs function.

20
00:01:19,260 --> 00:01:24,840
And below I'm going to describe that I'm test and get jobs and I'm going to provide an arrow function.

21
00:01:25,230 --> 00:01:29,670
And here I can write a test description that is not specific to the implementation.

22
00:01:29,910 --> 00:01:32,820
So what is the responsibility of this function?

23
00:01:32,820 --> 00:01:38,430
Without knowing how it's going to work, this function should fetch the jobs the candidate can apply

24
00:01:38,430 --> 00:01:38,670
to.

25
00:01:38,910 --> 00:01:43,410
So right here it fetches jobs that candidates can apply to.

26
00:01:43,800 --> 00:01:49,530
I provide the business value and the value to a user as well as to a product manager who might read

27
00:01:49,530 --> 00:01:52,470
this without worrying about exactly how I'm going to build it out.

28
00:01:53,780 --> 00:01:54,200
All right.

29
00:01:54,710 --> 00:01:59,360
So right here, I'm going to assume, of course, that I'm going to invoke the get jobs method.

30
00:01:59,600 --> 00:02:04,440
And I'm going to assume that this method or function, to be more specific, is going to be asynchronous.

31
00:02:04,460 --> 00:02:09,710
It's going to reach out to an API, which is an asynchronous operation that's going to take some amount

32
00:02:09,710 --> 00:02:10,160
of time.

33
00:02:10,370 --> 00:02:13,850
So I'm going to assume that this function is going to return a promise.

34
00:02:14,090 --> 00:02:19,280
And when I use the word assume, I'm basically saying I write the test in the way that I would like

35
00:02:19,280 --> 00:02:21,680
to interact with my eventual implementation.

36
00:02:21,800 --> 00:02:27,020
That's sort of the fun part, is that using TDD, we can sketch out how we would like this function

37
00:02:27,020 --> 00:02:27,420
to work.

38
00:02:27,740 --> 00:02:31,100
So I'm going to assume that get jobs is going to return me a promise.

39
00:02:31,310 --> 00:02:34,010
And so I'm going to assume that I can await it right here.

40
00:02:34,280 --> 00:02:38,030
And if we're using the await keyword right here, I can use async right here.

41
00:02:40,010 --> 00:02:40,370
Okay.

42
00:02:40,370 --> 00:02:45,830
So we have an asynchronous test that's going to run the get jobs function that will eventually define

43
00:02:46,010 --> 00:02:48,500
and wait for it to complete and give us back a promise.

44
00:02:48,770 --> 00:02:50,300
So what do we want to test here?

45
00:02:50,510 --> 00:02:55,580
Well, if we go back to our original implementation in job listings, we really want to test that.

46
00:02:55,580 --> 00:02:58,130
It's hitting this new URL right here.

47
00:02:58,310 --> 00:03:02,300
In a way, we sort of cheated TDD because we have our eventual code right here.

48
00:03:02,480 --> 00:03:06,260
But this is eventually going to be the code that we write in our get jobs function.

49
00:03:06,500 --> 00:03:11,840
So what I really want to test now that I have mocked at Axios is that I have called the get method on

50
00:03:11,840 --> 00:03:16,100
the Axios object and that I have provided the right URL to hit.

51
00:03:16,640 --> 00:03:22,610
Now as a reminder, we are getting this URL by concatenating slash jobs to our base URL, which is coming

52
00:03:22,610 --> 00:03:26,390
from an environment variable that we configure in our test environment.

53
00:03:26,480 --> 00:03:32,870
As a reminder, we configured that environment variable in the dot envy that test, that local file.

54
00:03:33,200 --> 00:03:40,580
So here we set up that environment variable of view our API URL to be HTP, my fake API icon.

55
00:03:40,790 --> 00:03:48,020
So we should expect that Axios dot get is going to reach out to Mike, my fake API icon slash jobs.

56
00:03:48,560 --> 00:03:48,860
Right.

57
00:03:49,100 --> 00:03:54,980
That's combining this setup for our test with what we know will be the slash jobs endpoint that we defined

58
00:03:54,980 --> 00:03:55,880
in JSON server.

59
00:03:56,180 --> 00:03:59,690
So right here I'm going to write expect Axios dot get.

60
00:04:00,410 --> 00:04:05,720
And in order to test that, a mock function has been invoked as a reminder, we can use a helper method

61
00:04:05,720 --> 00:04:12,230
here called to have been called with which will test not just that Axios target has been invoked, but

62
00:04:12,230 --> 00:04:14,390
that it has been invoked with the correct argument.

63
00:04:14,600 --> 00:04:22,340
So what I, what I expect here, I expect http, Colin slash, slash, the exact same thing I have right

64
00:04:22,340 --> 00:04:22,610
here.

65
00:04:22,610 --> 00:04:23,800
In fact, I can even copy it.

66
00:04:23,810 --> 00:04:25,160
That will probably be the better way.

67
00:04:25,520 --> 00:04:31,490
So I expect htp, colon, slash, slash my fake API, nbc.com slash jobs.

68
00:04:31,730 --> 00:04:35,510
And that's my first test simply that I am reaching out to the right endpoint.

69
00:04:35,890 --> 00:04:38,950
Okay, so we're going to get a whole bunch of failures and that's totally fine.

70
00:04:38,960 --> 00:04:44,090
We can now use TDD to follow these failures to an eventual implementation that works.

71
00:04:44,480 --> 00:04:47,850
So right here we can see our first issue is get jobs.

72
00:04:47,870 --> 00:04:49,340
Default is not a function.

73
00:04:49,340 --> 00:04:54,590
So what's happening is the test suite right here is trying to import get jobs, but obviously there's

74
00:04:54,590 --> 00:04:56,720
nothing in this file, so it's running into an error.

75
00:04:56,990 --> 00:04:57,830
So pretty simple.

76
00:04:57,830 --> 00:05:01,070
We can just define a simple get jobs error function.

77
00:05:01,940 --> 00:05:06,380
And I'm not going to go any further than that because I don't want to violate TDD, I just want to define

78
00:05:06,390 --> 00:05:11,300
this function and I also need to export it because otherwise the file will not be able to import it

79
00:05:11,480 --> 00:05:12,500
and that's the test fault.

80
00:05:12,740 --> 00:05:18,650
So all I'm doing is writing the bare minimum code to get my failure to go away and move on to the next

81
00:05:18,650 --> 00:05:19,010
failure.

82
00:05:19,250 --> 00:05:24,530
My first error is that we cannot import a get jobs function, so now I am defining it and exporting

83
00:05:24,530 --> 00:05:24,650
it.

84
00:05:24,740 --> 00:05:30,290
So now we move on to the next failure and we follow that approach until we get a passing test.

85
00:05:30,590 --> 00:05:35,900
So that way we can kind of solve one small problem, one small issue at a time until we get to a valid

86
00:05:35,900 --> 00:05:36,560
implementation.

87
00:05:36,920 --> 00:05:37,280
Okay.

88
00:05:37,490 --> 00:05:44,330
So now we're getting that we expected to hit my fake API dot com slash jobs one time, but instead we

89
00:05:44,330 --> 00:05:45,460
had no calls.

90
00:05:45,500 --> 00:05:45,770
Right.

91
00:05:46,040 --> 00:05:47,180
So what are we testing?

92
00:05:47,180 --> 00:05:52,220
That Axios stat get has been called so we can do that in our in our implementation.

93
00:05:52,460 --> 00:05:57,830
So in my in my get jobs file, I'm going to import the Axios library from Axios.

94
00:05:59,510 --> 00:06:05,630
Right and right here in the body, I'm going to use Axios target, which in our test will be mocked

95
00:06:05,630 --> 00:06:07,250
out with a just mock function.

96
00:06:07,670 --> 00:06:07,910
Right.

97
00:06:07,910 --> 00:06:11,180
So for example, if I do simply Axios target and I provide nonsense.

98
00:06:12,190 --> 00:06:13,240
Let's see where this gets us.

99
00:06:13,510 --> 00:06:19,450
We're going to see now that the test output is telling us, hey, I did get get invoked.

100
00:06:19,450 --> 00:06:24,820
The Axios get method was invoked, but I got an argument of nonsense when I was expecting this.

101
00:06:25,090 --> 00:06:28,510
So once again, we can use the failure here to drive us to the right implementation.

102
00:06:28,510 --> 00:06:34,750
We know that we need a specific URL, not just that get was invoked, but that get was invoked with

103
00:06:34,750 --> 00:06:36,280
a specific string argument.

104
00:06:36,580 --> 00:06:38,740
So right here I'm going to write out the exact argument.

105
00:06:38,740 --> 00:06:45,910
I expect htp, colon, slash, slash my fake API, ecom slash jobs.

106
00:06:46,480 --> 00:06:49,540
Save that and we're going to get a passing test.

107
00:06:49,870 --> 00:06:58,270
So as you may recall, we have a a protocol in test driven development called red green refactor.

108
00:06:58,510 --> 00:07:02,800
So we were first in our red stage, which means we have a passing error failing test.

109
00:07:02,950 --> 00:07:03,920
That's why it's red.

110
00:07:03,940 --> 00:07:04,690
Like a stoplight.

111
00:07:04,720 --> 00:07:06,000
Basically means stop.

112
00:07:06,310 --> 00:07:11,320
Then we go into the green stage, which means we get the bare minimum to get a passing test.

113
00:07:11,560 --> 00:07:18,310
And then the final stage is the refactor stage where we make the implementation better while keeping

114
00:07:18,310 --> 00:07:23,680
an eye on the existing test runner to make sure that we haven't broken our original working implementation.

115
00:07:24,040 --> 00:07:31,480
So the reason this is not perfect is because now we've hardwired a constant URL of my fake API.

116
00:07:31,630 --> 00:07:36,580
This is not going to work in the real world because remember, my fake API is something that is only

117
00:07:36,580 --> 00:07:37,750
valid for our test suite.

118
00:07:38,080 --> 00:07:43,630
So in our job listings component, remember we are relying on this environment variable to specify the

119
00:07:43,630 --> 00:07:49,810
beginning of that of that string representing our backend, whatever it happens to be.

120
00:07:49,960 --> 00:07:55,420
It can be a fake API for our test suite, but it needs to be the real JSON server for our real life

121
00:07:55,420 --> 00:07:59,290
implementation and it needs to be something else if we're hosting our view up in production.

122
00:07:59,590 --> 00:08:04,330
So what I'm going to do is I'm going to copy this code right here and I'm going to paste it right here,

123
00:08:04,570 --> 00:08:10,540
and then I'm going to use the exact same interpolation syntax I used in job listings instead of manually

124
00:08:10,540 --> 00:08:11,200
writing out.

125
00:08:12,240 --> 00:08:14,070
The actual my fake API right here.

126
00:08:14,190 --> 00:08:20,190
I'm going to get it from my base URL constant above, which is going to get that URL from this environment

127
00:08:20,190 --> 00:08:23,400
variable which we've defined to be this value in this file.

128
00:08:23,760 --> 00:08:31,140
So right here I'm going to swap this with F6 template strings and I'm going to replace this with a dollar

129
00:08:31,140 --> 00:08:33,180
sign and then a reference to base URL.

130
00:08:33,630 --> 00:08:37,350
So our test was passing and when I save this, our test should still pass.

131
00:08:37,530 --> 00:08:39,270
So our core implementation is valid.

132
00:08:39,450 --> 00:08:43,230
However, this is the refactor because this is the correct approach.

133
00:08:43,440 --> 00:08:48,660
Now when we run this in production or when we run this in development, even when we look at our view

134
00:08:48,660 --> 00:08:51,810
up in the browser, this is going to be a totally different string.

135
00:08:51,810 --> 00:08:53,250
When we're running in development mode.

136
00:08:53,460 --> 00:08:59,760
In development mode, it's going to be this string which we defined in the end v development local file.

137
00:08:59,880 --> 00:09:04,920
It's going to be the URL we need to hit JSON server, which we're also running on our computer.

138
00:09:05,160 --> 00:09:10,770
However, for our test files, for our test environment, we have a totally different value for the

139
00:09:10,770 --> 00:09:12,000
same environment variable.

140
00:09:12,330 --> 00:09:12,600
All right.

141
00:09:12,780 --> 00:09:18,540
So if we simply kept my fake API here, we would reach out to my fake API in our browser in development

142
00:09:18,540 --> 00:09:21,090
mode, and that would not exist and we would run into a failure.

143
00:09:21,270 --> 00:09:28,140
Now we can dynamically test this part of the URL or dynamically customize it while testing the core

144
00:09:28,170 --> 00:09:34,110
logic of the get jobs function, which is that it is invoking Axios get with the correct URL based on

145
00:09:34,110 --> 00:09:37,350
the configuration that we provided for the test environment.

146
00:09:37,950 --> 00:09:38,310
All right.

147
00:09:38,580 --> 00:09:40,050
So this is a good place to leave off.

148
00:09:40,050 --> 00:09:45,600
In the very next lesson, we're going to continue using TDD to further our implementation of our get

149
00:09:45,600 --> 00:09:46,290
jobs function.
