WEBVTT
1
00:00:00.420 --> 00:00:01.200
All right.

2
00:00:01.200 --> 00:00:03.930
So that brings us to the end of yet another section.

3
00:00:03.930 --> 00:00:08.730
So let's take a moment to celebrate this little victory and review everything that we learned.

4
00:00:09.000 --> 00:00:15.420
This section was focused on view router and we started off by adding it to our app using the View Seeley

5
00:00:15.600 --> 00:00:22.200
We executed the command view add router and that enabled our app to have that separate NPM library or

6
00:00:22.200 --> 00:00:24.240
package added to our project.

7
00:00:24.240 --> 00:00:26.880
So View Router is a totally separate library.

8
00:00:26.970 --> 00:00:32.550
It is not part of the core view library which is just concerned with the view layer in your browser.

9
00:00:32.640 --> 00:00:37.530
Routing is a totally separate feature and the beautiful part about the view ecosystem is these tools

10
00:00:37.530 --> 00:00:41.520
are built to work with each other, but you're not obligated to use them if you don't want to.

11
00:00:41.790 --> 00:00:43.860
So what does view router add to our app?

12
00:00:43.860 --> 00:00:50.190
Well, it allows us to navigate the user to different pages of the app at different routes or paths.

13
00:00:50.370 --> 00:00:56.790
So the view router observes wherever you currently are, and based on that route, it renders a component

14
00:00:56.790 --> 00:00:57.120
right?

15
00:00:57.450 --> 00:01:00.510
And that in turn can render a whole component tree underneath it.

16
00:01:00.750 --> 00:01:05.490
And what happens when you navigate is view tiers down and replaces components at that given route.

17
00:01:05.670 --> 00:01:08.610
So the actual website or page never really refreshes.

18
00:01:08.610 --> 00:01:11.790
It just gives the user the impression of navigating a website.

19
00:01:12.030 --> 00:01:15.030
But behind the scenes, it's all just a single bundle of JavaScript.

20
00:01:15.030 --> 00:01:21.450
A view app is a single page app and loads once, and then it gives the user the impression of a of a

21
00:01:21.450 --> 00:01:23.700
real non single page app website.

22
00:01:23.880 --> 00:01:29.100
And of course because the user already has on the JavaScript, the time to load the next page is actually

23
00:01:29.700 --> 00:01:34.800
rather quick compared to making a fresh request sometimes because the user just needs to tear down the

24
00:01:34.800 --> 00:01:39.350
browser, rather needs to tear down that JavaScript and build up the next component in its place.

25
00:01:39.370 --> 00:01:44.040
It does need to make a fresh server request for anything like extra data or extra JavaScript.

26
00:01:44.700 --> 00:01:49.650
So how do we create a new router where we wire it up in our main address file and then we create that

27
00:01:49.650 --> 00:01:50.880
router in a separate file?

28
00:01:50.880 --> 00:01:57.540
We did that in our router index JASS file and we also specified an array of routes and each route declares

29
00:01:57.540 --> 00:02:02.670
a path which is just the URL, a name, which is a unique identifier for that route.

30
00:02:02.850 --> 00:02:06.720
And then the parent component that we want to render at that given route.

31
00:02:06.990 --> 00:02:12.120
And we typically store our page components, the ones that kick everything off for a given page in The

32
00:02:12.120 --> 00:02:15.750
View's directory to differentiate them from smaller view components.

33
00:02:15.900 --> 00:02:20.580
At the end of the day, those views are still regular view components.

34
00:02:20.580 --> 00:02:23.370
They have the exact same architecture, the exact same syntax.

35
00:02:23.580 --> 00:02:27.630
But we specify that these are sort of the starting point for a given page.

36
00:02:27.630 --> 00:02:32.940
We have the home view, we have the job results view, and they each render their own component tree

37
00:02:33.150 --> 00:02:36.690
using those other smaller components that are in our components folder.

38
00:02:37.590 --> 00:02:37.860
All right.

39
00:02:37.860 --> 00:02:41.730
We also talked about the global components that Vue router gives us out of the box.

40
00:02:41.730 --> 00:02:46.830
For example, the router view component is the one that actually watches the path and renders the correct

41
00:02:46.830 --> 00:02:49.350
dynamic component as the path changes.

42
00:02:49.530 --> 00:02:55.020
And we saw that we can actually mix that dynamic component with static, constant content.

43
00:02:55.230 --> 00:03:00.390
So for example, we decided that no matter what the route was, we always wanted to have our main NAV.

44
00:03:00.600 --> 00:03:06.300
But the component that appears below the main nav is the one that we want to be dynamically rendered

45
00:03:06.420 --> 00:03:08.070
based on the path.

46
00:03:08.250 --> 00:03:13.740
So we simply put our main nav component and then we put the router view component below it so that it

47
00:03:13.740 --> 00:03:18.660
can take care of that substitution and that swapping when we navigate and we don't have to worry about

48
00:03:18.660 --> 00:03:18.780
it.

49
00:03:18.780 --> 00:03:23.520
So the router view component isn't anything visual in our browser, but it's the one that keeps track

50
00:03:23.520 --> 00:03:26.250
of the route and changes to the proper component.

51
00:03:26.610 --> 00:03:26.910
All right.

52
00:03:27.120 --> 00:03:32.370
We also learned about the router link component, which we can use, and that is one that does appear

53
00:03:32.370 --> 00:03:37.200
in our template and it is the one that simulates a hyperlink and anchor tag the attack.

54
00:03:37.440 --> 00:03:43.980
So we no longer have a tags because that will force a page refresh that is a navigation to another website

55
00:03:44.010 --> 00:03:44.780
URL, right?

56
00:03:44.790 --> 00:03:48.990
Even if it's our own URL, it's navigating to our own website and it will force a refresh.

57
00:03:49.230 --> 00:03:50.880
So we don't want that anymore.

58
00:03:50.910 --> 00:03:54.750
But we do get we do want to give the user the impression of navigating.

59
00:03:54.900 --> 00:03:59.640
So anywhere where we have an anchor tag, we typically replace it with a router link upon it because

60
00:03:59.640 --> 00:04:04.620
that is what plays the role of our actual link, quote unquote from page to page, right?

61
00:04:04.620 --> 00:04:08.400
The user clicks it just like anything else, and then we navigate them to a different path.

62
00:04:08.400 --> 00:04:11.670
And the router view detects that and renders the correct component.

63
00:04:12.570 --> 00:04:12.900
All right.

64
00:04:13.170 --> 00:04:14.790
And what else does your router do for us?

65
00:04:14.820 --> 00:04:19.560
Well, it injects some properties that are going to be available on every single component in or out.

66
00:04:19.770 --> 00:04:23.440
For example, every component gains access to a root property.

67
00:04:23.460 --> 00:04:25.950
And remember, these properties start with dollar sign.

68
00:04:25.950 --> 00:04:31.050
And that's just a visual indicator to remind you that they are part of you or part of your router.

69
00:04:31.170 --> 00:04:33.470
There's nothing technically special about the dollar sign.

70
00:04:33.480 --> 00:04:34.680
It's just a regular character.

71
00:04:34.980 --> 00:04:39.300
And so the root property will give you information about the current route that you are on.

72
00:04:39.510 --> 00:04:44.310
So you can use that in a given component to, for example, conditionally render something based on

73
00:04:44.310 --> 00:04:45.030
a given route.

74
00:04:45.780 --> 00:04:50.670
And similarly, every component gains access to a router property with an R at the end.

75
00:04:50.880 --> 00:04:54.180
And we can use that router, which is the full view router object.

76
00:04:54.360 --> 00:04:56.910
We can use that to force navigation to a new path.

77
00:04:57.150 --> 00:05:02.310
For example, when the user clicks a button, we can invoke the push method on that router object and

78
00:05:02.310 --> 00:05:06.240
specify the new path that we want to direct the user to navigate to.

79
00:05:06.240 --> 00:05:10.770
And we will take care of that movement and also that component replacement.

80
00:05:11.690 --> 00:05:12.110
All right.

81
00:05:12.290 --> 00:05:16.100
So Router Lincoln Waterview, as I mentioned, are registered as global components.

82
00:05:16.100 --> 00:05:17.930
We can use them in any of our view components.

83
00:05:18.140 --> 00:05:19.400
We do not need to import them.

84
00:05:19.400 --> 00:05:20.990
We do not need to register them locally.

85
00:05:21.260 --> 00:05:26.420
However, that creates an issue for our tests because our tests do not know the entire context of our

86
00:05:26.420 --> 00:05:26.870
view app.

87
00:05:27.050 --> 00:05:33.050
Our tests focus on a single component mounted in isolation so they do not understand where these components

88
00:05:33.050 --> 00:05:33.740
are coming from.

89
00:05:33.980 --> 00:05:38.750
And so we talked about this idea of we could stub out things like root or link with a generic stub that

90
00:05:38.750 --> 00:05:39.950
comes from view test utils.

91
00:05:40.220 --> 00:05:46.400
But a better solution, a more optimal solution is to use the router link stub component that is available

92
00:05:46.700 --> 00:05:50.360
in Vue test utils and it's a more specialized stop.

93
00:05:50.360 --> 00:05:55.610
It's like a better version of a replacement because it more effectively plays the role of a real router

94
00:05:55.610 --> 00:05:55.970
link.

95
00:05:56.060 --> 00:06:00.830
It's still not the actual real component, but it's an implementation that is close enough to it.

96
00:06:00.980 --> 00:06:07.520
For example, it accepts the same props it can render its child text, etc. So we kind of simulate the

97
00:06:07.520 --> 00:06:11.210
real thing very closely, but we don't actually involve that separate library.

98
00:06:11.210 --> 00:06:13.940
We don't test the actual mechanics of the writerly component.

99
00:06:14.030 --> 00:06:19.730
We still have a more lightweight replacement, but just a more specialized lightweight replacement compared

100
00:06:19.730 --> 00:06:21.500
to the regular stub you get.

101
00:06:21.920 --> 00:06:27.170
If you were to provide a boolean of true in that stubs object that we configure whenever we're mounting

102
00:06:27.170 --> 00:06:27.830
a component.

103
00:06:28.670 --> 00:06:29.000
All right.

104
00:06:29.180 --> 00:06:34.220
Whenever we added all of those configuration objects with the stubs, we saw that we had a lot of duplication,

105
00:06:34.430 --> 00:06:38.540
a lot of kind of commonality when it came to setting up the wrapper.

106
00:06:38.720 --> 00:06:41.900
That wraps our component and gives it all of this additional functionality.

107
00:06:42.170 --> 00:06:47.240
So to reduce that duplication, we first tried the before each function, which is a part of just and

108
00:06:47.240 --> 00:06:53.000
what just will do is it will run the function that we give to before each once before each test.

109
00:06:53.180 --> 00:06:58.970
So you can use that to, for example, set up a wrapper by using the shallow mount function in there

110
00:06:59.150 --> 00:07:04.310
and then storing that new wrapper in a variable and then using that variable throughout the test suite.

111
00:07:04.550 --> 00:07:08.870
However, as I mentioned, sometimes that can be a little bit deceiving because a person may not understand

112
00:07:08.870 --> 00:07:12.680
what wrapper represents, they may get confused, and so it's fine.

113
00:07:12.680 --> 00:07:17.720
I'm not saying it's bad, it's just one approach and you can choose whichever one best fits your style

114
00:07:17.720 --> 00:07:21.050
or which one you think best communicates your intent with the test.

115
00:07:21.440 --> 00:07:27.110
An alternative approach we tried is to keep our shallow amount function in every test, but move the

116
00:07:27.110 --> 00:07:32.630
creation of the configuration object with the global property and the stubs property to its own factory

117
00:07:32.630 --> 00:07:33.110
function.

118
00:07:33.260 --> 00:07:38.690
A factory function is just a plain function that spits out a consistent output, and we try that approach

119
00:07:38.690 --> 00:07:44.030
to also reduce duplication, but also have each test, know exactly what wrapper represents, how each

120
00:07:44.030 --> 00:07:47.750
test represent or know which component is actually under test.

121
00:07:47.750 --> 00:07:47.920
Right.

122
00:07:47.930 --> 00:07:49.340
And that's an alternative approach.

123
00:07:49.790 --> 00:07:54.540
Just to get you thinking about different ways that we can consolidate code in our test.

124
00:07:54.560 --> 00:07:55.100
We All right.

125
00:07:55.370 --> 00:07:56.840
That's all there is to cover in this section.

126
00:07:56.840 --> 00:07:57.830
I hope you've had fun.

127
00:07:57.950 --> 00:08:02.060
In the very next section, we're going to continue chipping away at the more advanced features of your

128
00:08:02.060 --> 00:08:02.450
router.
