1
00:00:00,560 --> 00:00:01,360
Okay.

2
00:00:01,360 --> 00:00:07,630
So now that we have a better sense of how your state and mutations work together, I think now is a

3
00:00:07,630 --> 00:00:12,550
good time to write some basic tests for the functionality we have in this file.

4
00:00:12,910 --> 00:00:15,460
So I'm going to go to my file Explorer right here.

5
00:00:16,780 --> 00:00:22,690
I'm going to collapse everything in my project folder and in my test directory in my unit folder, I'm

6
00:00:22,690 --> 00:00:24,790
going to create a new folder called Store.

7
00:00:25,120 --> 00:00:30,970
I'm basically going to mirror the exact directory structure I have in my source directory and in this

8
00:00:30,970 --> 00:00:31,750
store folder.

9
00:00:31,750 --> 00:00:34,600
I'm going to create a test file for this far right here.

10
00:00:34,960 --> 00:00:41,980
So I'm going to name this test file index that test that J.S. And I'm going to open it side by side

11
00:00:41,980 --> 00:00:45,700
with my implementation, and then we're going to write our tests.

12
00:00:45,970 --> 00:00:50,260
So let's begin by importing the core functionality that we wrote in this file.

13
00:00:50,380 --> 00:00:55,810
This is really the logic that belongs to us because the rest is really the create store function which

14
00:00:55,810 --> 00:00:57,160
belongs to View X.

15
00:00:57,370 --> 00:01:03,130
This is the heart of our app and this of course is in another advantage of moving this configuration

16
00:01:03,220 --> 00:01:04,870
to separate functions in the file.

17
00:01:05,020 --> 00:01:10,270
We can now import just this logic without having to worry about the store creation right here.

18
00:01:10,630 --> 00:01:16,480
So I'm going to import our named exports, which is the state function and the mutations object.

19
00:01:16,720 --> 00:01:21,940
And that is going to come of course from the source directory and the store folder in there.

20
00:01:21,940 --> 00:01:27,490
As a reminder, if you have an index file in a given directory, you can simply write the directory

21
00:01:27,490 --> 00:01:31,870
name and node knows to look for a index that just file in there.

22
00:01:32,290 --> 00:01:35,080
Okay, so here's the beautiful part about testing.

23
00:01:35,080 --> 00:01:41,800
It's actually going to be remarkably easy because all this is is a plain JavaScript function and a plain

24
00:01:41,800 --> 00:01:43,600
JavaScript object, right?

25
00:01:43,750 --> 00:01:49,870
We don't need to incorporate all of the complexity of the View X Store in order to test this logic.

26
00:01:49,870 --> 00:01:50,140
Right.

27
00:01:50,350 --> 00:01:56,950
At the end of the day, View X needs a function that returns a JavaScript object, but to us it's a

28
00:01:56,950 --> 00:02:01,630
basic JavaScript error function and we can test just that aspect alone.

29
00:02:02,050 --> 00:02:09,640
So right here I'm going to describe that I'm testing state and I'm going to write a very simple assertion.

30
00:02:09,640 --> 00:02:12,160
I'm just going to check for one property at a time.

31
00:02:12,340 --> 00:02:16,810
I think it's a best practice to have simple tests that test for one thing at a time.

32
00:02:17,050 --> 00:02:21,880
So I would not recommend having a test, for example, that tests for every single property.

33
00:02:22,060 --> 00:02:23,380
In your view, X Store State.

34
00:02:24,070 --> 00:02:29,980
Eventually, as your app scales, you might have a view store that has 20 properties, and I don't think

35
00:02:29,980 --> 00:02:33,190
it's a good idea to have one large test that checks for all those properties.

36
00:02:33,430 --> 00:02:36,940
Rather, I think it's better to have one test basically per property.

37
00:02:37,180 --> 00:02:38,770
So here's what that test is going to look like.

38
00:02:38,770 --> 00:02:44,560
I'm going to say here, it keeps track of whether user is logged in.

39
00:02:46,240 --> 00:02:50,500
And all I'm going to do in the body of this test is I'm going to invoke my state function, which I

40
00:02:50,500 --> 00:02:51,250
have in my left.

41
00:02:51,250 --> 00:02:57,160
So concept and let's assign is to a constant called starting state and that is going to be the return

42
00:02:57,160 --> 00:02:59,380
value of my state function application.

43
00:02:59,680 --> 00:03:04,120
And then I'm simply going to assume that starting state is going to return an object to me.

44
00:03:04,420 --> 00:03:09,880
And on that starting state object, I expect there to be a property called is logged in and that should

45
00:03:09,880 --> 00:03:11,380
be equal to false.

46
00:03:12,070 --> 00:03:17,020
So the advantage of this test is that it's going to double check that the property exists and also that

47
00:03:17,020 --> 00:03:18,820
it has the right starting value of false.

48
00:03:19,030 --> 00:03:24,070
If I was writing this test, this would be a reasonable TDD test to write in order to get this code

49
00:03:24,070 --> 00:03:25,390
that we have on the left hand side.

50
00:03:25,810 --> 00:03:28,810
So let me go ahead and bring up my terminal window.

51
00:03:29,980 --> 00:03:33,580
And now I'm going to run NPM, run, test, colon.

52
00:03:33,580 --> 00:03:33,970
Watch.

53
00:03:33,970 --> 00:03:34,600
Let's run.

54
00:03:34,960 --> 00:03:36,670
We have right now pretty simple tests.

55
00:03:36,670 --> 00:03:38,030
They don't expect any failures.

56
00:03:38,380 --> 00:03:40,320
And it passes.

57
00:03:40,330 --> 00:03:40,840
That's great.

58
00:03:41,020 --> 00:03:47,530
And now I'm going to add a similar test for our current single mutation method, which is log in user.

59
00:03:47,830 --> 00:03:53,500
So for this, I'm simply going to add another separate describe on the same high level we can nest describes

60
00:03:53,500 --> 00:03:54,260
within each other.

61
00:03:54,310 --> 00:03:59,500
We can also have multiple top level describe function calls in the same test file as well.

62
00:03:59,830 --> 00:04:04,540
So right here, I'll add a separate describe because it's a separate, independent category.

63
00:04:04,780 --> 00:04:07,030
And here I'm going to test all of my mutations.

64
00:04:08,680 --> 00:04:11,170
And then I'm going to try my arrow function as the second argument.

65
00:04:11,350 --> 00:04:17,080
And here I'm going to write another describe for this specific mutation that I'm testing here, which

66
00:04:17,080 --> 00:04:18,340
is log in user.

67
00:04:18,610 --> 00:04:24,160
And the reason I'm doing this, of course, is later on, I anticipate that I might have multiple mutations.

68
00:04:24,250 --> 00:04:30,640
And so I want a separate described block for each mutation that I'm testing within the larger level

69
00:04:30,700 --> 00:04:33,070
described category of mutations.

70
00:04:33,490 --> 00:04:33,810
All right.

71
00:04:34,210 --> 00:04:36,640
So here's where we have another question about testing.

72
00:04:37,240 --> 00:04:41,560
Do we need the the complete view X state object in order to test?

73
00:04:41,830 --> 00:04:45,940
Right now, this may not be super difficult because we have a very simple store.

74
00:04:45,970 --> 00:04:47,620
But I want you to imagine this scenario.

75
00:04:47,920 --> 00:04:49,750
Imagine our view X Store State.

76
00:04:49,780 --> 00:04:52,840
This object right here has 20 properties.

77
00:04:53,230 --> 00:04:59,620
Do we need to feed in in our test a an object that actually has the full state with all 20 properties

78
00:04:59,620 --> 00:05:02,200
in order to test what log in user is doing.

79
00:05:02,590 --> 00:05:04,630
My answer is absolutely not.

80
00:05:04,930 --> 00:05:12,250
All that this mutation is going to do is modify the value of a property on our state object called is

81
00:05:12,250 --> 00:05:12,790
logged in.

82
00:05:13,120 --> 00:05:18,790
So whether state has 20 properties or 40 properties or 100 properties doesn't matter because we know

83
00:05:18,810 --> 00:05:23,030
the heart of this logic is just writing one property and giving it a value.

84
00:05:23,050 --> 00:05:23,350
Right.

85
00:05:23,950 --> 00:05:29,170
And that's sort of the beautiful part is we don't have to even care about Vue and how it processes mutations

86
00:05:29,410 --> 00:05:32,380
from the perspective of what this log in user method is.

87
00:05:32,530 --> 00:05:37,870
It's a method that accepts some kind of state argument which has to be an object because we're accessing

88
00:05:37,870 --> 00:05:40,930
property and then it sets a property on that object.

89
00:05:41,050 --> 00:05:43,680
And that's as complex as our test needs to be.

90
00:05:43,690 --> 00:05:46,750
It doesn't need to go beyond that to start thinking about Vue review.

91
00:05:47,110 --> 00:05:50,080
It just needs to be testing this core functionality right here.

92
00:05:50,440 --> 00:05:54,550
So, for example, right here, I'm going to write the simplest test I possibly can and I'm going to

93
00:05:54,550 --> 00:06:01,660
describe the value of this mutation it logs the user in, and I'm going to create a simple object to

94
00:06:01,660 --> 00:06:02,830
represent my state.

95
00:06:03,070 --> 00:06:03,340
Right.

96
00:06:03,340 --> 00:06:05,380
So right here I'm going to say current state.

97
00:06:05,890 --> 00:06:11,080
And I'm just going to say it's going to be a simple object called with a property rather of is logged

98
00:06:11,080 --> 00:06:12,880
in set to false.

99
00:06:13,090 --> 00:06:15,940
And you might be thinking, well, that's the exact same thing as we have right here.

100
00:06:15,950 --> 00:06:16,540
What's the difference?

101
00:06:16,810 --> 00:06:21,940
Again, imagine a scenario where we have an object here with 20 different properties, even if this

102
00:06:21,940 --> 00:06:24,220
real life implementation has 20 different properties.

103
00:06:24,370 --> 00:06:30,880
In my test, I'm still going to feed in this small object with just the one property that I care about.

104
00:06:31,360 --> 00:06:31,630
Right.

105
00:06:32,020 --> 00:06:36,760
And the next thing I'm going to do is simply pass it into my log user mutation.

106
00:06:36,850 --> 00:06:38,880
We do not need to import a real life store.

107
00:06:38,890 --> 00:06:43,030
We do not need to get a store involved because all we're testing is a basic JavaScript method.

108
00:06:43,360 --> 00:06:49,480
So on my mutations import right here, which is this object, I'm going to say my mutations object has

109
00:06:49,480 --> 00:06:54,010
a log in user method and I need some kind of argument to represent the state parameter.

110
00:06:54,220 --> 00:06:57,370
So I'm going to feed in this state object that I defined above.

111
00:06:57,790 --> 00:07:00,280
And after this method runs, what do I expect?

112
00:07:00,610 --> 00:07:06,760
I expect that my state is now going to be a different type of object, so I'm going to use that to equal,

113
00:07:07,000 --> 00:07:10,300
just match or I can't use to be when I'm using JavaScript objects.

114
00:07:10,540 --> 00:07:12,730
And here I'm going to provide a new object.

115
00:07:12,730 --> 00:07:19,240
I'm going to state that it should have an is logged in property set to true and alternative approaches.

116
00:07:19,240 --> 00:07:24,430
You can simply say expect state that is logged in and compare that that equals now value equal to true.

117
00:07:24,640 --> 00:07:25,930
Either approach works here.

118
00:07:25,930 --> 00:07:29,260
I'm simply comparing the whole object and double checking that a different way.

119
00:07:29,470 --> 00:07:32,290
So when I save this you can see everything is running.

120
00:07:32,290 --> 00:07:36,880
We have a nice level of categorization here in my tests and that is actually it in my opinion.

121
00:07:37,000 --> 00:07:42,700
This is a perfect, small, lightweight unit test that runs super quick and we don't need to know all

122
00:07:42,700 --> 00:07:45,880
the details of how the View Store is dealing with its complexity.

123
00:07:45,880 --> 00:07:51,160
When it gets this, mutations object in the shape because to us it's a simple JavaScript object and

124
00:07:51,160 --> 00:07:55,600
we have everything we need here in order to test that it is doing exactly what it's supposed to do.

125
00:07:55,930 --> 00:07:56,290
All right.

126
00:07:56,590 --> 00:08:02,440
So that's a basic some basics on how we can test some aspects of the state and mutations in a just test

127
00:08:02,440 --> 00:08:02,710
file.

128
00:08:02,890 --> 00:08:07,840
Now, we can take a look at how we can connect to this view store state within a component in the very

129
00:08:07,840 --> 00:08:08,410
next lesson.
