1
00:00:00,450 --> 00:00:01,530
All right.

2
00:00:01,540 --> 00:00:07,860
So in the previous lesson, we added a new composable function called Use Filter Jobs, which talks

3
00:00:07,860 --> 00:00:10,890
to our View X Store and gets the filter jobs getter.

4
00:00:11,160 --> 00:00:14,940
We then used the composable function in our sub nav component.

5
00:00:15,330 --> 00:00:21,030
Now if you check up on your test suite, you'll find that our sub nav tests are still passing.

6
00:00:21,360 --> 00:00:26,280
So what's happening is whenever we mount our sub nav component in a test, we're running through the

7
00:00:26,280 --> 00:00:30,330
setup method and we're using the real use filter jobs composable.

8
00:00:30,630 --> 00:00:35,400
So this logic right here and in our tests we are marking out use store.

9
00:00:35,520 --> 00:00:40,860
So we're basically intercepting this call on line number seven whenever we're mounting a component and

10
00:00:40,860 --> 00:00:44,640
we're replacing it with an object and thus our entire test is passing.

11
00:00:45,000 --> 00:00:49,830
But as you can probably guess, I want to perform the exact same refactor we did a couple lessons ago.

12
00:00:50,040 --> 00:00:53,850
I now don't want to worry about the internals of use filter jobs.

13
00:00:54,120 --> 00:01:00,180
Rather, I just want to let it do its own business which is already tested and in the tests for subnet.

14
00:01:00,330 --> 00:01:04,920
I now want to mark out, not use store but rather use filter jobs.

15
00:01:05,100 --> 00:01:09,450
So rather than than marking out two steps away from where I am, I'm just going to mark out right where

16
00:01:09,450 --> 00:01:09,840
I am.

17
00:01:09,990 --> 00:01:13,410
Mock out the exact dependency that subnet is dependent on.

18
00:01:13,720 --> 00:01:15,410
It's right here in my sub nav test.

19
00:01:15,420 --> 00:01:19,460
We I'm no longer going to use you store and mark our view x.

20
00:01:19,680 --> 00:01:21,330
So let's go ahead and remove that right here.

21
00:01:22,470 --> 00:01:26,820
Instead, I'm going to mark out my own function, which has already been tested in a separate file.

22
00:01:27,180 --> 00:01:30,640
So I'm going to import use filter jobs.

23
00:01:30,660 --> 00:01:35,040
That is the exact same thing we introduced into our component in the previous lesson.

24
00:01:35,040 --> 00:01:40,350
And this is going to come from the source store composable directory and by default that will import

25
00:01:40,350 --> 00:01:43,560
it, which will allow us to, for example, set properties on it and things like that.

26
00:01:43,800 --> 00:01:49,530
But it's not actually marked until we call just mark and we provide the directory or more specifically

27
00:01:49,530 --> 00:01:53,190
the file name, which is the source directory store composable.

28
00:01:53,610 --> 00:01:56,360
So with that once again just is going to loop through that file.

29
00:01:56,370 --> 00:02:02,190
It's going to take use filter jobs and it's going to make it a mock just function that returns undefined

30
00:02:02,190 --> 00:02:02,700
when invoked.

31
00:02:03,090 --> 00:02:08,640
So now all we have to do is update our jobs to mark out the return value of use, filter jobs instead

32
00:02:08,640 --> 00:02:10,170
of making out you store.

33
00:02:10,440 --> 00:02:13,620
So as I scroll down, here is our first test.

34
00:02:13,620 --> 00:02:18,630
You can see we were previously marking out the store to be an object that has a getters property, which

35
00:02:18,630 --> 00:02:20,580
is an object that has a filter jobs property.

36
00:02:20,820 --> 00:02:25,560
Now this logic is captured in our use filter jobs composable function.

37
00:02:25,740 --> 00:02:29,430
We've abstracted away the knowledge of having to know all these details.

38
00:02:29,700 --> 00:02:34,920
So all that use filter job is going to return to us is a reactive object holding an array of jobs.

39
00:02:35,160 --> 00:02:39,930
Thus we can actually reduce this entire thing instead of marking out use store.

40
00:02:40,080 --> 00:02:43,560
I want to instead mark out this thing right here.

41
00:02:43,770 --> 00:02:45,870
So I'm going to say use filter jobs.

42
00:02:47,090 --> 00:02:48,530
Mark the return value.

43
00:02:49,130 --> 00:02:50,750
And we no longer need this object.

44
00:02:50,750 --> 00:02:52,190
We no longer need the getters key.

45
00:02:52,190 --> 00:02:54,020
We no longer need filter jobs.

46
00:02:54,590 --> 00:02:55,820
So here is our array.

47
00:02:56,420 --> 00:03:02,750
And again, going back to the discussion we had a couple lessons ago, if we wanted to, we could wrap

48
00:03:02,810 --> 00:03:09,560
this array in the ref function call to make it a reactive object whose value property will be this array.

49
00:03:09,800 --> 00:03:15,050
But remember, for the purposes of how this component works, this component simply expects some kind

50
00:03:15,050 --> 00:03:21,170
of either iterable array or reactive object, holding an iterable right for what filter jobs represents.

51
00:03:21,350 --> 00:03:26,630
The reason it has filter jobs is just because it needs an object who for whom it could take the length.

52
00:03:26,930 --> 00:03:32,630
Remember, whenever we use a reactive object in the template view is going to automatically get the

53
00:03:32,630 --> 00:03:34,160
underlying value being stored.

54
00:03:34,400 --> 00:03:39,860
So filter jobs in this case is not a reactive object holding our array, it is the regular array.

55
00:03:40,220 --> 00:03:40,580
Right?

56
00:03:40,670 --> 00:03:45,620
So the point of that is we can actually get away in our test with using a plain array and everything

57
00:03:45,620 --> 00:03:49,820
will still work because for the purposes of what set up needs, this will work and for the purposes

58
00:03:49,820 --> 00:03:50,840
of what the template needs.

59
00:03:50,990 --> 00:03:53,960
This template is just fine with filter jobs being an array.

60
00:03:54,110 --> 00:03:59,480
We don't need to go through that extra step of having a reactive object, wrapping an array inside it.

61
00:03:59,960 --> 00:04:00,350
All right.

62
00:04:00,350 --> 00:04:05,120
So this, again, is a little bit of a sidestep of how the real world works, right?

63
00:04:05,120 --> 00:04:11,030
Because in the real world, our use filter jobs function will return a reactive object from view that

64
00:04:11,030 --> 00:04:12,260
is storing an array.

65
00:04:12,380 --> 00:04:18,650
But for the purposes of our template in our test suite, a simple array not wrapped in a reactive object

66
00:04:18,740 --> 00:04:21,890
is enough to verify that this test is going to pass.

67
00:04:22,070 --> 00:04:27,170
So I argue there's no need to make it more complex by passing the array into a ref function call.

68
00:04:27,290 --> 00:04:31,610
Although you're more than welcome to do that if you want to stay really close to how it works in the

69
00:04:31,610 --> 00:04:34,940
exact component in the real world, same principle applies right here.

70
00:04:34,940 --> 00:04:37,880
We're no longer going to need to mark out our use store.

71
00:04:38,030 --> 00:04:39,800
We are no longer using use store.

72
00:04:39,950 --> 00:04:41,990
Instead, we are using use filter jobs.

73
00:04:42,800 --> 00:04:45,710
That is a just function so we can call mock return value.

74
00:04:46,040 --> 00:04:49,520
So what should this return to our component in the setup method when it's invoked?

75
00:04:49,790 --> 00:04:51,530
Well, we no longer care about this object.

76
00:04:51,650 --> 00:04:53,780
We no longer care about the getters property.

77
00:04:53,780 --> 00:04:56,150
We took care of that in the actual composable function.

78
00:04:56,330 --> 00:05:00,080
We no longer care about the name of the getter that's all abstracted away.

79
00:05:00,080 --> 00:05:04,040
It's all isolated in the separate composable function, which we tested in the last lesson.

80
00:05:04,340 --> 00:05:08,510
All that we care about for the purposes of this component is what that getter actually returns, which

81
00:05:08,510 --> 00:05:10,160
for this is just going to be an empty array.

82
00:05:10,400 --> 00:05:14,960
So you'll notice if I just provide an empty array as my mock return value, that's what it's going to

83
00:05:14,960 --> 00:05:16,100
return to the setup method.

84
00:05:16,280 --> 00:05:18,200
Remove this collection of lines.

85
00:05:20,000 --> 00:05:20,810
Save this.

86
00:05:21,500 --> 00:05:23,600
Let the test run and everything passes.

87
00:05:23,810 --> 00:05:31,310
And now notice how, by removing the former dependency on store and simply marking out our own composable

88
00:05:31,310 --> 00:05:34,220
functions, even our tests become a lot more lightweight.

89
00:05:34,430 --> 00:05:38,660
Not just our setup method right here, which is super simple three three lines of code.

90
00:05:38,840 --> 00:05:43,850
But even our setup here has become a little bit simpler because instead of having to provide that deeply

91
00:05:43,850 --> 00:05:49,310
nested mock store object in every test, we now just simply provide a simpler data structure, like

92
00:05:49,310 --> 00:05:51,830
an array of objects or a simple array, right?

93
00:05:52,100 --> 00:05:58,520
So we've kind of split up this test from just being in sub nav to being in subnet and in the tests for

94
00:05:58,520 --> 00:06:00,080
the use filter jobs composable.

95
00:06:00,080 --> 00:06:00,410
Right.

96
00:06:00,680 --> 00:06:06,200
And since that is tested in the other test file, if we ever want to use use filter jobs in another

97
00:06:06,200 --> 00:06:11,240
component, we can similarly follow this exact same approach and not have to worry about what use filter

98
00:06:11,240 --> 00:06:14,030
jobs is doing in its own file in its own logic.

99
00:06:14,270 --> 00:06:19,430
So even our tests become simpler with this approach super simple to read, we simply say, Hey, we

100
00:06:19,430 --> 00:06:22,040
have two functions that we're using in our component use.

101
00:06:22,040 --> 00:06:23,840
Confirm now use filter jobs.

102
00:06:24,200 --> 00:06:26,150
Pretend as if they return these two things.

103
00:06:26,150 --> 00:06:30,500
We're going to replace the real world implementation, substitute it with these mock functions that

104
00:06:30,500 --> 00:06:33,650
are going to return values that are good enough to get the component to function.

105
00:06:33,860 --> 00:06:39,170
Assuming you get those return values from those mock functions, test the actual logic of what the component

106
00:06:39,170 --> 00:06:39,980
is supposed to be doing.

107
00:06:40,130 --> 00:06:42,530
It's supposed to be displaying some text call to jobs matched.

108
00:06:42,710 --> 00:06:46,370
If we give it an array of two objects, we're still verifying that we have two jobs matched.

109
00:06:46,580 --> 00:06:50,690
That is testing the core logic of what this component is supposed to be doing on line eight.

110
00:06:51,080 --> 00:06:51,290
Right?

111
00:06:51,290 --> 00:06:55,400
So just because we're marking does not mean that we are running away from the real world and how the

112
00:06:55,410 --> 00:06:56,570
component is supposed to work.

113
00:06:56,750 --> 00:07:01,970
We're still testing the heart of this component, which is supposed to display how many jobs that have

114
00:07:01,970 --> 00:07:07,040
been matched based on what filter jobs it has, based on what use filter jobs gives to it.

115
00:07:07,700 --> 00:07:08,000
All right.

116
00:07:08,000 --> 00:07:12,410
So hopefully all of this has been a really good exercise in teaching about how to create proper unit

117
00:07:12,410 --> 00:07:17,990
tests that focus on one single unit, the smallest bit of functionality that we can target if we are

118
00:07:17,990 --> 00:07:19,130
testing a component.

119
00:07:19,130 --> 00:07:24,650
I just want to focus as much as I can on that component and not worry about all of the dependencies

120
00:07:24,650 --> 00:07:29,030
that it has and all of the dependencies that those dependencies have and so on, because that could

121
00:07:29,030 --> 00:07:29,810
go on forever.

122
00:07:29,870 --> 00:07:34,850
You can have a component called function A which calls function B, which calls function C, you don't

123
00:07:34,850 --> 00:07:39,920
want to let all those real functions run and makes a test slower and it makes more points of failure

124
00:07:39,920 --> 00:07:40,580
in that chain.

125
00:07:40,700 --> 00:07:43,820
Instead, you just intercept the very first one that your component uses.

126
00:07:44,120 --> 00:07:47,720
Tell the test suite what it should return in its place and test the component.

127
00:07:47,720 --> 00:07:49,970
Does the right thing with that data.

128
00:07:50,300 --> 00:07:50,600
All right.

129
00:07:50,600 --> 00:07:52,880
We still capture the heart of the components responsibility.

130
00:07:53,210 --> 00:07:54,920
That's all there is to cover in this lesson.

131
00:07:55,010 --> 00:07:56,720
So I will see you in the next one.
