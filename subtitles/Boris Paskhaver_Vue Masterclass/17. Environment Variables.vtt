WEBVTT
1
00:00:00.210 --> 00:00:01.050
Okay.

2
00:00:01.050 --> 00:00:04.830
So in this lesson I'd like to introduce environment variables.

3
00:00:05.010 --> 00:00:10.230
And in order to introduce that topic, I want to talk about the problems that environment variables

4
00:00:10.230 --> 00:00:11.190
help us solve.

5
00:00:11.490 --> 00:00:17.370
The short answer is that environment variables help us whenever there is variation in our app that is

6
00:00:17.370 --> 00:00:20.790
due to the environment in which we are running.

7
00:00:21.060 --> 00:00:23.640
Okay, so what do we mean when we say environment?

8
00:00:23.880 --> 00:00:27.720
What we're really saying is the mode in which we are running our view app.

9
00:00:28.020 --> 00:00:31.860
So let me just create some space here and I'm just going to is regular JavaScript comments here just

10
00:00:31.860 --> 00:00:34.260
so I can have a little canvas to write things out.

11
00:00:34.680 --> 00:00:39.570
Typically, we are going to have at least three environments in our typical view app.

12
00:00:39.780 --> 00:00:42.420
And again, environment is just a mode of execution.

13
00:00:43.050 --> 00:00:45.990
So we're going to have our development, environment and development.

14
00:00:45.990 --> 00:00:48.600
You can think of as basically what we've been working in right now.

15
00:00:48.600 --> 00:00:53.040
This is an environment that is specifically suited for the developer writing additional code.

16
00:00:53.430 --> 00:00:58.530
And the whole idea of environments is that each one is optimized for the specific use case.

17
00:00:58.800 --> 00:01:03.840
So for example, when we're in development mode, we've noticed that whenever we make changes in our

18
00:01:03.840 --> 00:01:10.830
code, the view SQLite understands those changes and automatically reloads the page so that we see those

19
00:01:10.830 --> 00:01:15.010
changes in the browser that is called hot module reloading or Amara.

20
00:01:15.150 --> 00:01:21.360
And that is a feature that only exists in development mode whenever we run NPM, run, serve this view

21
00:01:21.360 --> 00:01:26.910
app knows that we're running in development mode and thus it knows to enable those development specific

22
00:01:26.910 --> 00:01:31.440
features like hot module reloading that help make it a better development experience for us.

23
00:01:31.590 --> 00:01:31.860
Right.

24
00:01:32.010 --> 00:01:34.380
But that is not the only environment that we run in.

25
00:01:34.710 --> 00:01:37.500
So for example, this another environment is production.

26
00:01:37.560 --> 00:01:40.200
When we decide to bundle this view app up.

27
00:01:40.380 --> 00:01:45.660
What we can do is run a command from usually that will get all of our code inside a single JavaScript

28
00:01:45.660 --> 00:01:49.290
file and then we go to some server on the Internet and we deploy that code.

29
00:01:49.290 --> 00:01:54.150
We basically put an HTML page with a link to this JavaScript file that has our whole app, right?

30
00:01:54.420 --> 00:01:58.110
And then the user is able to access that server in that page and see our view app.

31
00:01:58.110 --> 00:02:00.090
That is it running in production, right?

32
00:02:00.450 --> 00:02:05.190
So in production, you have other optimizations for speed, for caching, for things like that.

33
00:02:05.340 --> 00:02:09.630
And for example, we don't need hot module reloading and production because we're not going to be going

34
00:02:09.630 --> 00:02:13.410
and changing our code and developing on the server where we're hosting our app.

35
00:02:13.680 --> 00:02:13.950
Right.

36
00:02:14.310 --> 00:02:16.920
A third example of an environment is test.

37
00:02:17.160 --> 00:02:26.070
Whenever we run our test suite using NPM run test, we we tell the vehicle its use specific configuration

38
00:02:26.070 --> 00:02:30.390
settings, specific optimizations that make the test suite run faster.

39
00:02:30.810 --> 00:02:33.630
So Vue still kind of knows this is what I need for development.

40
00:02:33.630 --> 00:02:34.320
This is what I need.

41
00:02:34.320 --> 00:02:38.670
If I'm running this in production, this is what I need for a test suite and, you know, flex on and

42
00:02:38.670 --> 00:02:41.340
off different configuration settings that it may need.

43
00:02:41.340 --> 00:02:41.700
Right.

44
00:02:41.970 --> 00:02:44.580
So that's just the basic introduction to the idea of environments.

45
00:02:44.850 --> 00:02:48.810
And when we look at this URL right here, we are reaching out to this.

46
00:02:48.810 --> 00:02:52.080
You're all right here in order to get our listing of 100 jobs.

47
00:02:52.440 --> 00:02:56.700
The only problem is this URL is only going to work when we are in development.

48
00:02:56.700 --> 00:02:56.970
Right?

49
00:02:57.120 --> 00:03:01.770
If we were to bundle up this view app and put it on a server on the internet, we wouldn't wanted to

50
00:03:01.770 --> 00:03:06.380
reach out to local host 3000 because local host would simply be its own computer.

51
00:03:06.390 --> 00:03:08.880
Whatever computer or server this app is running on.

52
00:03:09.150 --> 00:03:14.970
We instead would typically tell the app to reach out to some other URL on the internet that represents

53
00:03:14.970 --> 00:03:15.660
the API.

54
00:03:15.960 --> 00:03:21.870
So to summarize what I'm what I'm trying to see here in development, a URL here like localhost, 3000

55
00:03:22.200 --> 00:03:27.420
slash jobs is totally fine because it's just for development and local host is our computer and we can

56
00:03:27.420 --> 00:03:30.690
ask our computer to be both the view app and our mock backend.

57
00:03:30.690 --> 00:03:30.930
Right.

58
00:03:31.140 --> 00:03:33.390
But in the real world, that's not going to work in production.

59
00:03:33.540 --> 00:03:36.720
You may ask the View app to hit up another API.

60
00:03:36.720 --> 00:03:42.330
For example, you might have something like API that my company Bcom slash jobs, right?

61
00:03:42.510 --> 00:03:47.700
So at the end of the day, it's still the same slash job's URL, but the kind of primary URL here is

62
00:03:47.700 --> 00:03:48.740
something totally different.

63
00:03:48.750 --> 00:03:52.740
This is a real location on the internet that your app can reach out to in production.

64
00:03:52.920 --> 00:03:58.650
And this is a URL on our own computer that the app reaches out to only when it's in development mode

65
00:03:58.770 --> 00:04:00.240
in a different environment.

66
00:04:00.420 --> 00:04:00.690
Right?

67
00:04:00.930 --> 00:04:05.460
So this problem that we have here is that we need this link to be a lot more dynamic.

68
00:04:05.460 --> 00:04:10.050
We need to be able to customize it when it's in development mode, and we need to be able to customize

69
00:04:10.050 --> 00:04:12.570
it when it's in production mode to be something totally different.

70
00:04:12.570 --> 00:04:12.840
Right?

71
00:04:13.050 --> 00:04:14.310
And same thing goes for test.

72
00:04:14.310 --> 00:04:19.590
If we wanted test to have a different URL or a specific URL, we could customize that as well.

73
00:04:19.830 --> 00:04:23.430
The question is, where do we bundle up these kinds of configuration settings?

74
00:04:23.700 --> 00:04:30.900
We do this in plain text files and all these files are is really just a collection of key value pairs.

75
00:04:31.200 --> 00:04:35.910
To think of key value pairs, you can simply think of JavaScript objects, right?

76
00:04:36.060 --> 00:04:39.300
There is a key and it corresponds to some kind of value.

77
00:04:39.600 --> 00:04:44.370
And so we can have a whole bunch of textiles in our, in our code base.

78
00:04:44.520 --> 00:04:46.090
One of them can be for development.

79
00:04:46.110 --> 00:04:47.370
One of them can be for production.

80
00:04:47.370 --> 00:04:48.330
One of them can be for test.

81
00:04:48.630 --> 00:04:52.470
And what the UCLA can do for us is based on the environment that we're running in.

82
00:04:52.620 --> 00:04:55.620
It can look for the corresponding file of key value pairs.

83
00:04:55.830 --> 00:04:57.090
Load that file.

84
00:04:57.210 --> 00:04:59.760
Load those key value pairs and thus.

85
00:04:59.830 --> 00:05:06.010
We can allow that configuration file to store custom information pertaining to that environment, such

86
00:05:06.010 --> 00:05:08.920
as a custom URL that we're trying to reach out to.

87
00:05:09.550 --> 00:05:09.850
All right.

88
00:05:10.060 --> 00:05:11.230
So let me show you how this is going to work.

89
00:05:11.260 --> 00:05:12.400
I'm going to save this file for now.

90
00:05:12.430 --> 00:05:13.750
We're going to come back in just a second.

91
00:05:13.990 --> 00:05:15.550
I'm going to go to my file Explorer.

92
00:05:15.850 --> 00:05:21.370
I'm going to collapse everything here and I'm going to create three files on the top level of my code

93
00:05:21.370 --> 00:05:23.530
base and each file is going to represent.

94
00:05:23.560 --> 00:05:27.280
You can think of it like the settings for just one environment.

95
00:05:28.060 --> 00:05:28.810
So here's how it works.

96
00:05:28.810 --> 00:05:32.290
I'm going to create a new file and I want to talk to you about all of the options that are available

97
00:05:32.290 --> 00:05:32.830
in view.

98
00:05:33.250 --> 00:05:36.400
So the first thing is you can create a file called Dot Envy.

99
00:05:37.240 --> 00:05:38.770
This is going to be a plain text file.

100
00:05:38.900 --> 00:05:41.740
And EMV, of course, stands for environment, right?

101
00:05:42.010 --> 00:05:46.840
If you create a file like this, it will apply to every single environment that you're running.

102
00:05:46.960 --> 00:05:52.210
So development, production, test, any other environments that you configure, the key value pairs

103
00:05:52.210 --> 00:05:56.680
that you register in this file, the settings, in other words, will be available no matter which environment

104
00:05:56.770 --> 00:05:57.330
you're running in.

105
00:05:57.700 --> 00:06:02.380
If you want to get more custom and you only want certain settings to be available in certain environments,

106
00:06:02.530 --> 00:06:06.640
what you have to do is add another dot here and then write your environment afterwards.

107
00:06:06.910 --> 00:06:11.350
So for example, if I want something to only be available in development or to be more specific, if

108
00:06:11.350 --> 00:06:17.410
I want to customize a specific setting in development, I can write dot envy, dot development.

109
00:06:18.310 --> 00:06:18.610
All right.

110
00:06:18.610 --> 00:06:20.320
So that's the second option available to us.

111
00:06:20.500 --> 00:06:26.590
We can either write dot envy or we can write dot envy, followed by a dot in the name of an environment.

112
00:06:26.770 --> 00:06:31.240
And the three environments I have listed here development, production and test are the three default

113
00:06:31.240 --> 00:06:33.940
ones that are available from UCI.

114
00:06:34.000 --> 00:06:36.610
Right now there's one more available option here.

115
00:06:36.970 --> 00:06:41.370
If we save our file like this, it will be saved to our source control.

116
00:06:41.380 --> 00:06:47.170
In other words, to get whenever we commit, if we want our environment file to not be saved to get,

117
00:06:47.320 --> 00:06:53.860
we can give the file another dot and then the word local and usually knows that this is something that

118
00:06:53.860 --> 00:06:56.890
should not be added to get or to source control.

119
00:06:57.220 --> 00:06:59.440
Typically the way it's going to work is you can.

120
00:06:59.650 --> 00:07:04.420
There's not like a single singular right answer as far as whether a file should have, you know, should

121
00:07:04.420 --> 00:07:06.160
be committed to source control or not.

122
00:07:06.490 --> 00:07:11.350
But you should know that in your EMV file that you commit to source control, you should not have any

123
00:07:11.350 --> 00:07:12.730
private information.

124
00:07:12.970 --> 00:07:17.920
So something like a URL to access an API I think is fairly public information.

125
00:07:17.920 --> 00:07:20.860
That's exactly what your users are going to be heading in your website.

126
00:07:20.860 --> 00:07:25.120
And they can you know, they can go to the network tab and see where they're hitting, which URL they're

127
00:07:25.120 --> 00:07:25.360
hitting.

128
00:07:25.540 --> 00:07:27.460
It's not some kind of sensitive private data.

129
00:07:27.730 --> 00:07:33.430
In comparison, something like an API key or some kind of password or something that's enabling you

130
00:07:33.430 --> 00:07:35.290
to get access to sensitive information.

131
00:07:36.460 --> 00:07:40.720
That kind of data should never be committed to source control because then some other developer could

132
00:07:40.720 --> 00:07:45.730
be able to open that environment file and say, Oh, here's the password to our SQL database, or here's

133
00:07:45.730 --> 00:07:48.220
the password to get to some server that I can access, right?

134
00:07:48.400 --> 00:07:52.510
So anything that's sensitive, you never want to put into these files, that's the big heads up.

135
00:07:52.690 --> 00:07:55.780
For now, we're just going to put a bunch of URLs so there's no real harm here.

136
00:07:56.110 --> 00:08:01.510
So I'm going to create this file and this will store the configuration or environment settings for my

137
00:08:01.510 --> 00:08:02.740
development environment.

138
00:08:03.100 --> 00:08:03.490
All right.

139
00:08:03.820 --> 00:08:07.810
So I'm going to leave this file empty and I'm going to create the complementary files for my other two

140
00:08:07.810 --> 00:08:08.400
environments.

141
00:08:08.440 --> 00:08:13.390
I'm going to create a file right here once again, dot EMV to make a file for environment variables.

142
00:08:13.630 --> 00:08:14.350
Another dot.

143
00:08:14.500 --> 00:08:20.350
My next environment is going to be called production and then I also do not want this committed to source

144
00:08:20.350 --> 00:08:20.770
control.

145
00:08:21.010 --> 00:08:25.000
So I'm going to add the dot local at the end and that's just a part of the file name.

146
00:08:25.510 --> 00:08:27.520
And then I'm going to create one more file as well.

147
00:08:27.790 --> 00:08:30.970
Dot EMV, dot test, dot local.

148
00:08:30.970 --> 00:08:36.070
So EMV for environment variables, test for my environment local to not committed to source control.

149
00:08:36.520 --> 00:08:36.850
All right.

150
00:08:36.850 --> 00:08:38.920
So let me save that.

151
00:08:39.160 --> 00:08:41.740
Let me now open these file side by side.

152
00:08:42.370 --> 00:08:46.120
Let's see if I can even split it up into three panels in Fiasco.

153
00:08:46.120 --> 00:08:46.990
And it appears I can.

154
00:08:47.140 --> 00:08:52.150
And here's what we're going to do in order to define any kind of environment variable that you want

155
00:08:52.150 --> 00:08:55.030
available in your view app.

156
00:08:55.030 --> 00:09:02.140
It needs to begin with a certain prefix which is going to be view all capital letters underscore app.

157
00:09:02.620 --> 00:09:07.690
So any environment variable that you want to be available in your view app must start with this prefix

158
00:09:07.900 --> 00:09:13.170
and then you provide it the follow up actual variable name that you want to provide.

159
00:09:13.180 --> 00:09:17.680
You can almost think of this like a constant and is going to be available throughout your view app.

160
00:09:17.800 --> 00:09:22.390
And whichever file is loaded is the constants that view is going to load and make available in your

161
00:09:22.390 --> 00:09:22.660
code.

162
00:09:22.990 --> 00:09:29.230
So I'm going to call my environment variable API URL because that's really the one piece of dynamic

163
00:09:29.230 --> 00:09:31.870
data that I now want to customize between different environments.

164
00:09:32.440 --> 00:09:40.780
For example, if we're in development, what we can do is basically keep the exact same URL we have

165
00:09:40.780 --> 00:09:43.150
here because local host is going to represent our machine.

166
00:09:43.150 --> 00:09:47.140
We know that we're going to be running JSON server, so it's totally fine to have something like this.

167
00:09:47.500 --> 00:09:53.620
So right here in double quotes, because it's actually I think when we're dealing with environment variables,

168
00:09:53.620 --> 00:09:54.580
you don't need double quotes.

169
00:09:54.580 --> 00:09:57.820
You can actually just write out plain strings on the right side of the equals sign.

170
00:09:58.240 --> 00:09:59.450
You're going to write HTP.

171
00:10:00.450 --> 00:10:04.740
Colon slash slash local host colon 3000.

172
00:10:04.770 --> 00:10:07.930
This is the exact same thing that we have in our job listings that view.

173
00:10:08.160 --> 00:10:12.390
We're not going to put the slash jobs because that is the specific endpoint we want to hit.

174
00:10:12.390 --> 00:10:14.580
But this is our base API URL.

175
00:10:15.210 --> 00:10:19.140
So what do you think we're going to do in our corresponding files right here?

176
00:10:19.350 --> 00:10:24.030
We're going to use the exact same environment variable because we're eventually going to access this

177
00:10:24.030 --> 00:10:24.700
in our app.

178
00:10:24.720 --> 00:10:27.840
So this is also going to be view app API URL.

179
00:10:28.110 --> 00:10:33.210
But here we can customize what the production API URL is going to be.

180
00:10:33.630 --> 00:10:40.710
So for example, HTTP, colon, slash, slash, this can be something like my real API dotcom, right?

181
00:10:40.770 --> 00:10:46.320
Obviously this website doesn't exist in the real world, but when whatever it is, when you bundle up

182
00:10:46.320 --> 00:10:50.970
your view app and you put into production and you have an envy file there, you may not even go into

183
00:10:50.970 --> 00:10:55.710
that server that's hosting your your view app, create any envy file and put this logic in there.

184
00:10:55.830 --> 00:11:02.280
This is where you can provide the link to the real world API URL that your app is going to hit in production.

185
00:11:03.090 --> 00:11:03.390
Right.

186
00:11:03.480 --> 00:11:08.640
And the advantage of this environment variables which we saw on this file is that we can customize this

187
00:11:08.640 --> 00:11:14.100
configuration, setting, this arbitrary name that we called it, view app API, a URL we're going to

188
00:11:14.100 --> 00:11:16.380
be able to use in our view app.

189
00:11:16.530 --> 00:11:22.140
But depending on which environment view loads, it's going to be a different string value, right?

190
00:11:22.470 --> 00:11:29.460
So right here in my test environment variables file, I can similarly create view app API URL and assign

191
00:11:29.480 --> 00:11:30.620
its own value.

192
00:11:30.630 --> 00:11:36.240
So let's say http, colon, slash, slash and let's make this something different again.

193
00:11:36.240 --> 00:11:46.200
So maybe my fake API icon is going to be the u URL or the value of this environment variable when we

194
00:11:46.200 --> 00:11:49.770
run view in test mode or in the test environment.

195
00:11:50.190 --> 00:11:50.610
All right.

196
00:11:50.910 --> 00:11:53.730
So when we go to job listings dot view.

197
00:11:53.730 --> 00:11:58.170
Now as a reminder, let me in fact close these files right here.

198
00:11:58.350 --> 00:12:00.120
We had this previous hardcoded.

199
00:12:01.090 --> 00:12:01.540
String.

200
00:12:01.540 --> 00:12:06.250
And we can now make this a dynamic reference based on the environment variables that we're going to

201
00:12:06.250 --> 00:12:06.580
have.

202
00:12:07.000 --> 00:12:10.030
So what I'm going to do here is I'm going to create a concept called base URL.

203
00:12:10.390 --> 00:12:14.860
And the next question you might have is, how do I get that piece of information that I store in my

204
00:12:14.860 --> 00:12:16.090
environment variable file?

205
00:12:16.420 --> 00:12:20.440
Well, it's going to be available on a global node object called process.

206
00:12:20.830 --> 00:12:26.740
And on that object you're going to have another object called the process is automatically available.

207
00:12:26.740 --> 00:12:29.770
Whenever you're running a node app, you do not need to import it from anywhere.

208
00:12:29.980 --> 00:12:31.120
It's automatically available.

209
00:12:31.330 --> 00:12:36.100
And then on its EMV object, which stands for environment, you're going to have access to whatever

210
00:12:36.100 --> 00:12:42.010
environment variables you defined in the environment variable file that that was loaded in.

211
00:12:42.280 --> 00:12:48.460
So no matter which file we load in, we're going to have access to that view app API.

212
00:12:49.970 --> 00:12:50.750
You, Al.

213
00:12:51.920 --> 00:12:52.820
Value, right?

214
00:12:52.910 --> 00:12:55.280
What this is is going to be dynamic.

215
00:12:55.460 --> 00:12:59.000
It can be one of three values depending on which environment we're running in.

216
00:12:59.210 --> 00:13:04.220
But because we defined this environment variable in all three of our environment files, we're always

217
00:13:04.220 --> 00:13:08.300
going to have some valid string value here to represent our base URL.

218
00:13:08.480 --> 00:13:13.460
It's either going to be localhost 3000 or it's going to be my fake API or my real API.

219
00:13:13.460 --> 00:13:16.220
Write the exact three values that we configured in those files.

220
00:13:16.550 --> 00:13:18.980
So now all that's left here is right here.

221
00:13:18.980 --> 00:13:24.710
Instead of using this hardcoded value, I'm going to use ES6 template strings and I'm going to use the

222
00:13:25.040 --> 00:13:28.100
dollar sign to interpolate whatever base URLs.

223
00:13:29.030 --> 00:13:30.530
And then slash jobs.

224
00:13:31.190 --> 00:13:31.550
All right.

225
00:13:31.850 --> 00:13:36.230
So if we're loading this app in development mode, things should still work because we're just going

226
00:13:36.230 --> 00:13:39.230
to load in localhost, 3000 and then run to get slash jobs.

227
00:13:39.440 --> 00:13:43.070
And if we're running this in production and we're going to have a real URL here, then we're going to

228
00:13:43.070 --> 00:13:46.760
take that base API URL and concatenate jobs to the end of that.

229
00:13:46.760 --> 00:13:49.580
And it should still work in those two separate environments.

230
00:13:49.880 --> 00:13:50.110
All right.

231
00:13:50.120 --> 00:13:51.080
That's all we need to do.

232
00:13:51.470 --> 00:13:53.060
So there's two things we want to do here.

233
00:13:53.060 --> 00:13:56.660
We want to test this in test mode, and we also want to test this in our browser.

234
00:13:56.990 --> 00:14:00.200
So right here, I'm going to run NPM, run, test, colon, watch.

235
00:14:00.410 --> 00:14:02.030
And we're actually going to get a failure.

236
00:14:02.510 --> 00:14:05.900
And it's actually going to be a good failure because it's going to offer us a chance to learn more about

237
00:14:05.900 --> 00:14:06.680
how all this works.

238
00:14:07.640 --> 00:14:08.410
You're going to see here.

239
00:14:08.650 --> 00:14:11.470
We are failing in job listings.

240
00:14:11.770 --> 00:14:13.420
That component fetches jobs.

241
00:14:13.450 --> 00:14:16.130
So let me open job listings that test that.

242
00:14:16.150 --> 00:14:18.040
Yes, let me open it on the right hand side.

243
00:14:18.490 --> 00:14:21.040
And we are failing right here in the first test to test them.

244
00:14:21.040 --> 00:14:21.760
It fetches jobs.

245
00:14:22.030 --> 00:14:23.620
So why is this failing?

246
00:14:23.770 --> 00:14:29.260
Well, because localhost 3000 is no longer the URL that we set up for our test environment.

247
00:14:29.410 --> 00:14:31.180
We set up my fake API.

248
00:14:31.360 --> 00:14:37.660
That's why you can see here what Jess is actually receiving is my fake API scam slash jobs.

249
00:14:37.930 --> 00:14:41.200
Again, that is coming from dot envy that tests that local.

250
00:14:41.380 --> 00:14:47.290
We said that whenever the view app accesses this value right here in test mode, this is what it's going

251
00:14:47.290 --> 00:14:47.650
to be.

252
00:14:47.920 --> 00:14:54.070
So when we run this test in test mode, that environment variable right here evaluates to my fake API

253
00:14:54.070 --> 00:14:55.120
icon, right?

254
00:14:55.240 --> 00:15:00.190
So now we can customize what this is not just for production and for development, but for testing as

255
00:15:00.190 --> 00:15:00.440
well.

256
00:15:00.730 --> 00:15:08.430
So now we can change this to be the correct value, which is going to be my fake API dot com.

257
00:15:08.740 --> 00:15:09.550
Let's save that.

258
00:15:09.550 --> 00:15:10.720
Let's let the file rerun.

259
00:15:11.930 --> 00:15:12.860
Let's see if that passes.

260
00:15:12.860 --> 00:15:13.460
And it does.

261
00:15:13.730 --> 00:15:19.010
And then what I also recommend you do on your end is if you're running your vehicle service, I recommend

262
00:15:19.010 --> 00:15:24.830
you stop it so you can press control C to shut it down and then go ahead and restart it using NPM run

263
00:15:24.830 --> 00:15:25.160
search.

264
00:15:25.190 --> 00:15:30.530
That's what I'm doing in my other screen and that just ensures that the vehicle I will properly register

265
00:15:30.680 --> 00:15:34.160
the changes and the new files that you have added to the code base, right?

266
00:15:34.400 --> 00:15:37.970
So nothing will change in the browser, but we're just going to ensure that everything, everything

267
00:15:37.970 --> 00:15:44.390
still works, that our developed development file provides this URL which allows job listings to reach

268
00:15:44.390 --> 00:15:45.800
out to our mock backend.

269
00:15:45.800 --> 00:15:48.770
That JSON server is serving at local office 3000.

270
00:15:49.040 --> 00:15:52.550
And if everything worked correctly, then nothing should break in the browser.

271
00:15:52.940 --> 00:15:59.120
So if I go back to Chrome and I refresh this page, we should still see all of our results.

272
00:15:59.120 --> 00:16:00.080
And indeed we do.

273
00:16:00.080 --> 00:16:04.910
We can still see in the network tab, in fact, that we should be reaching out to localhost 3000.

274
00:16:05.510 --> 00:16:06.500
Let me refresh this.

275
00:16:07.560 --> 00:16:09.330
And you can see here we are indeed.

276
00:16:10.350 --> 00:16:16.230
Reaching out to local hosts 3000 so we are correctly accepting the value of that view.

277
00:16:16.230 --> 00:16:23.910
App API, you are environment variable that we configured in our environment variable file for this

278
00:16:23.910 --> 00:16:25.020
development environment.

279
00:16:25.620 --> 00:16:25.890
All right.

280
00:16:25.890 --> 00:16:28.800
So as a quick review, an environment variable is just some kind of setting.

281
00:16:28.800 --> 00:16:29.970
It's a key value pair.

282
00:16:30.090 --> 00:16:32.030
It's a name followed by an equal sign.

283
00:16:32.030 --> 00:16:36.570
And the value you can give it whatever name you want, but it must start with View App and then you're

284
00:16:36.570 --> 00:16:42.390
going to have access to those variables on the process that EMV global object node, and you can use

285
00:16:42.390 --> 00:16:48.600
that to customize different data that flows into your view app that may differ based on the environment

286
00:16:48.600 --> 00:16:50.580
in which you are running the View app.

287
00:16:50.880 --> 00:16:51.270
All right.

288
00:16:51.540 --> 00:16:53.010
That's all there is to cover in this lesson.

289
00:16:53.010 --> 00:16:54.540
So I will see you in the next one.
