WEBVTT
1
00:00:00.620 --> 00:00:01.430
All right.

2
00:00:01.430 --> 00:00:07.490
So before we proceed to writing new tests, I do actually want to show you a small issue that is hiding

3
00:00:07.730 --> 00:00:08.660
in our test suite.

4
00:00:08.660 --> 00:00:11.660
It's not readily apparent right now, but it is there.

5
00:00:11.660 --> 00:00:16.040
And I want to explain what is causing this issue and why it is a bad thing.

6
00:00:16.460 --> 00:00:22.520
So just allows us to use a very special function called f, i, t or fit instead of it.

7
00:00:22.790 --> 00:00:27.650
And what it allows us to do is to run one test in the file in isolation.

8
00:00:27.920 --> 00:00:32.750
So instead of running the entire job listings file, I can focus on only one test.

9
00:00:32.960 --> 00:00:37.970
And of course, the advantage of that is that that one test will run quicker than the entire test suite.

10
00:00:38.210 --> 00:00:41.540
And the other benefit is that I can run that test in isolation.

11
00:00:41.810 --> 00:00:46.380
So let me show you what happens when I run the test from the previous lesson in isolation.

12
00:00:46.400 --> 00:00:49.040
This one right here displays page number one.

13
00:00:49.310 --> 00:00:51.500
I'm going to change this function from it.

14
00:00:51.500 --> 00:00:55.280
To fit at the F, by the way, is short for focus.

15
00:00:55.280 --> 00:00:58.160
So focus on this IT function.

16
00:00:58.160 --> 00:00:59.150
That's what we're basically telling.

17
00:00:59.170 --> 00:01:01.450
Just just focus on this test.

18
00:01:01.460 --> 00:01:02.600
Don't worry about anything else.

19
00:01:02.810 --> 00:01:06.650
Let me save this file, which will trigger the test suite to rerun.

20
00:01:07.040 --> 00:01:08.750
And you're going to notice our test pass.

21
00:01:08.870 --> 00:01:11.330
But now we get a console warning.

22
00:01:11.870 --> 00:01:13.340
Very interesting, right.

23
00:01:13.580 --> 00:01:18.800
The first question we must have here is why are we getting this console warning when we run this test

24
00:01:18.800 --> 00:01:19.940
in isolation?

25
00:01:20.270 --> 00:01:24.380
But we don't get this warning when we run the entire test suite as a whole.

26
00:01:24.710 --> 00:01:31.040
This is generally a very, very bad thing because this is a big hint that we have something called test

27
00:01:31.040 --> 00:01:31.820
pollution.

28
00:01:32.090 --> 00:01:33.320
What is test pollution?

29
00:01:33.500 --> 00:01:40.580
It means that something that we have left over from a previous test is affecting the result in the next

30
00:01:40.580 --> 00:01:40.970
test.

31
00:01:41.840 --> 00:01:46.730
The reason we weren't seeing this warning when we were running the test suite as a whole is because

32
00:01:46.730 --> 00:01:52.920
some previous test was changing some kind of setting that was allowing this test to run without warning.

33
00:01:53.240 --> 00:01:57.920
And of course, the issue about this, the problem with this is that our tests are not independent.

34
00:01:58.130 --> 00:02:02.420
They're dependent on some kind of additional setup that is coming from a previous test.

35
00:02:02.630 --> 00:02:04.640
And this can become very hard to debug.

36
00:02:04.850 --> 00:02:06.770
Imagine somebody in our situation.

37
00:02:06.770 --> 00:02:12.350
Imagine somebody seeing a test suite that is perfectly green with no warnings focusing on one test and

38
00:02:12.350 --> 00:02:13.610
now see a warning like this.

39
00:02:13.610 --> 00:02:18.890
They have no clue what is enabling this warning right now, where it's coming from, which previous

40
00:02:18.890 --> 00:02:25.010
test set up this scenario that now does no longer exist when we're running this test in isolation.

41
00:02:25.010 --> 00:02:25.250
Right.

42
00:02:25.520 --> 00:02:28.250
So this is an issue and I want to show you how to fix it.

43
00:02:28.320 --> 00:02:30.890
Well, let's read the warning that we get here.

44
00:02:31.580 --> 00:02:34.730
And it says On handled error during execution of mounted hook.

45
00:02:34.730 --> 00:02:41.060
And if I scroll a little bit up, we see an error we've actually seen before on handle the promise rejection

46
00:02:41.060 --> 00:02:44.660
warning type error cannot be property data of undefined.

47
00:02:44.900 --> 00:02:47.930
Where are we reading the property data?

48
00:02:48.170 --> 00:02:49.300
Anywhere in our component.

49
00:02:49.310 --> 00:02:51.470
It's right here in our mounted lifecycle.

50
00:02:51.470 --> 00:02:56.390
Look, as a reminder, this is the function where we make a call to the API to get jobs.

51
00:02:56.630 --> 00:03:02.570
Axios gives us an object with a data property and then we get our jobs away from that data property.

52
00:03:02.630 --> 00:03:08.540
Right in earlier tests to mock out Axios, what we did is this syntax right here.

53
00:03:08.540 --> 00:03:15.800
We said to just go to the get method and pretend as if you're a promise it's going to resolve to give

54
00:03:15.800 --> 00:03:19.700
me an object with a data property that's going to be an array of 15 items.

55
00:03:20.000 --> 00:03:24.680
Or alternatively, give me a data property that is an array of an empty array.

56
00:03:24.860 --> 00:03:27.380
It doesn't really matter what kind of array we have.

57
00:03:27.380 --> 00:03:32.690
What matters is that we have an object that we are getting back as the kind of promise resolved value

58
00:03:32.810 --> 00:03:33.740
from the get method.

59
00:03:34.130 --> 00:03:38.720
Well, what was happening earlier is when we were running the test suite, these tests were running

60
00:03:38.720 --> 00:03:39.110
first.

61
00:03:39.290 --> 00:03:40.910
So they were setting up this logic.

62
00:03:41.120 --> 00:03:48.290
And thus when we were mounting our job listings component in this test, this one new from this logic

63
00:03:48.290 --> 00:03:53.030
right here that it had to replace Axios, get with that mock resolved value, right?

64
00:03:53.300 --> 00:03:55.850
So in other words, this is the line that is polluting.

65
00:03:55.850 --> 00:03:59.810
This is the line that is continuing after this test is done running.

66
00:04:00.080 --> 00:04:06.950
We have overridden the Get method to make resolve to this a return value or this resolved value to be

67
00:04:06.950 --> 00:04:12.560
more specific because it is asynchronous and this logic is persisting or holding on after this test

68
00:04:12.560 --> 00:04:13.010
is done.

69
00:04:13.250 --> 00:04:19.160
And it was that persistence that allowed this test to run without warning because if it ran in order

70
00:04:19.160 --> 00:04:21.470
to the whole test suite, this still exists.

71
00:04:21.710 --> 00:04:27.800
Thus this test doesn't have any issue getting a resolved value from get and thus it was still passing.

72
00:04:27.920 --> 00:04:33.140
But now that we are running this test in isolation, this line from the previous test no longer ran,

73
00:04:33.530 --> 00:04:39.200
and thus this test is saying, Hey, in my mounted lifecycle, look, I don't know, I don't know what

74
00:04:39.200 --> 00:04:40.580
get is it returning back to me.

75
00:04:40.580 --> 00:04:47.090
It is still knocked out by the way, because we are using just mock up above, but it is marked out

76
00:04:47.090 --> 00:04:52.980
with the just default implementation of what a mark is supposed to return rather than our own custom

77
00:04:52.980 --> 00:04:53.630
one right here.

78
00:04:53.840 --> 00:04:59.390
So when that happens, whatever just returns our test says I can't read the property date of that of

79
00:04:59.390 --> 00:05:00.140
undefined I.

80
00:05:00.170 --> 00:05:00.920
I know what that is.

81
00:05:01.250 --> 00:05:03.320
And that's that is the issue we have here.

82
00:05:03.510 --> 00:05:04.730
The issue is is pollution.

83
00:05:05.000 --> 00:05:10.190
So obviously a really simple issue that we can do, a solution that we can do is to copy and paste this

84
00:05:10.190 --> 00:05:12.410
code below, and we can do that in every single test.

85
00:05:12.710 --> 00:05:17.420
But it's important that we also think about how we can make this test suite a little bit better so that

86
00:05:17.420 --> 00:05:19.490
we can avoid this issue in the future.

87
00:05:19.760 --> 00:05:25.220
One way that we can make this issue better is by cleaning up after every test.

88
00:05:25.580 --> 00:05:31.040
So in other words, after each IT function runs, what I can say is, hey, go back to the Axios, get

89
00:05:31.040 --> 00:05:33.770
method and make sure it is the default mark.

90
00:05:34.010 --> 00:05:38.870
Don't, don't give it the new resolved value that I provided in any given test.

91
00:05:39.020 --> 00:05:42.830
Return it back to the just default resolved value, which is undefined.

92
00:05:43.220 --> 00:05:47.660
So what I'd like to do is to run a little bit of logic after each test.

93
00:05:47.930 --> 00:05:52.310
And the way I can do that ingest is by using a special function called after each.

94
00:05:52.760 --> 00:05:59.900
Earlier in the course we use the before each function in order to run some kind of code before each

95
00:05:59.900 --> 00:06:00.170
test.

96
00:06:00.320 --> 00:06:01.430
This is the inverse.

97
00:06:01.430 --> 00:06:08.210
This allows us to run something after each test, and that's what allows us to clean up any mocks that

98
00:06:08.210 --> 00:06:11.450
we have set up in any of our individual tests.

99
00:06:11.720 --> 00:06:13.880
So I'm going to scroll to the very top of this file.

100
00:06:14.860 --> 00:06:17.950
Above all my logic here, and I'm going to write after each.

101
00:06:19.650 --> 00:06:24.900
And after each is invoked and we provide it with a function and this is a function that just is going

102
00:06:24.900 --> 00:06:27.600
to run once after each test.

103
00:06:27.900 --> 00:06:31.350
So when I say test, I mean this thing right here, it's going to run that.

104
00:06:31.350 --> 00:06:32.880
It's going to run the function after each.

105
00:06:33.120 --> 00:06:37.710
This is another test that is going to run and it's going to follow that up by running after each function.

106
00:06:37.890 --> 00:06:39.030
Same thing here.

107
00:06:39.180 --> 00:06:41.550
So we have a total of four tests in this file.

108
00:06:41.730 --> 00:06:47.640
So in this scenario, Jess is going to run the after each function right here four times, once after

109
00:06:47.640 --> 00:06:48.930
each one of those test runs.

110
00:06:49.260 --> 00:06:54.960
So what I want to do here is I want to get my Axios object, I want to get its get method because that's

111
00:06:54.960 --> 00:07:01.800
the one that we currently are marking out or specifying a different result value for in the test below.

112
00:07:02.070 --> 00:07:06.360
And in order to return it back to the default, just mock implementation.

113
00:07:06.570 --> 00:07:09.780
What I can do is invoke a method called mock reset.

114
00:07:10.620 --> 00:07:16.530
So to clarify what this is doing, we are not bringing Axios and the get method back to the original

115
00:07:16.530 --> 00:07:18.660
Axios implementation.

116
00:07:18.660 --> 00:07:20.640
We're still not using the real access object.

117
00:07:20.850 --> 00:07:26.220
What we are doing instead is clearing this thing right here or this line right here.

118
00:07:26.400 --> 00:07:33.060
We are clearing our custom implementation that we may have set up in our own test that specifies what

119
00:07:33.060 --> 00:07:37.470
the get method will resolve or return whenever it is invoked in our component.

120
00:07:38.440 --> 00:07:38.710
All right.

121
00:07:38.710 --> 00:07:40.960
So we are still separating ourselves from Axios.

122
00:07:41.110 --> 00:07:46.810
We are now protecting ourselves from ourselves, from our own custom implementations of how we want

123
00:07:46.810 --> 00:07:48.580
get to work for any given test.

124
00:07:48.940 --> 00:07:50.560
So I'm going to save this.

125
00:07:51.770 --> 00:07:57.730
And we're going to see now that if I get rid of the the fight here and go back to the regular function

126
00:07:57.740 --> 00:08:00.350
call, we're now going to run the entire test as a whole.

127
00:08:00.470 --> 00:08:05.120
But now we're going to get the council warnings even as we run the test as a whole.

128
00:08:05.300 --> 00:08:11.450
And that's a good thing, because now we've ensured that this problem is apparent and present in the

129
00:08:11.450 --> 00:08:12.290
right circumstance.

130
00:08:12.290 --> 00:08:12.530
Right.

131
00:08:12.980 --> 00:08:18.020
Because what's happening now is even if the test runs in order, well, this logic is going to run.

132
00:08:18.170 --> 00:08:22.340
We're going to mock the resolve value right here to be an object with a data property.

133
00:08:22.460 --> 00:08:28.490
But at the end of this test, we're going to bring it back to the default just implementation of Axios

134
00:08:28.490 --> 00:08:31.130
get, which is just a basic function that returns undefined.

135
00:08:31.370 --> 00:08:37.280
And thus this test right here starts off without knowing anything about what Axios get is supposed to

136
00:08:37.280 --> 00:08:37.580
do.

137
00:08:38.600 --> 00:08:43.940
To be more specific, it falls back to the digest way of doing things and thus because just does not

138
00:08:43.940 --> 00:08:45.560
give an object with a data property.

139
00:08:45.560 --> 00:08:48.140
It gives us the warning that we want right here.

140
00:08:48.440 --> 00:08:53.960
So of course, the very simple way that we can now continue is to copy this code and paste it right

141
00:08:53.960 --> 00:08:54.250
here.

142
00:08:55.590 --> 00:08:56.820
And paste the right here as well.

143
00:08:58.080 --> 00:08:58.440
All right.

144
00:08:58.440 --> 00:09:03.540
So now we are setting up our custom results value in each independent test.

145
00:09:03.720 --> 00:09:09.270
And then after each test, we're going ahead and we're clearing up that implementation right here to

146
00:09:09.270 --> 00:09:13.410
guarantee that our tests are independent and isolated from each other.

147
00:09:13.890 --> 00:09:20.580
Now, you might notice that just about in every test we are using this logic at the very beginning of

148
00:09:20.610 --> 00:09:21.600
the respective test.

149
00:09:21.990 --> 00:09:29.340
So what we can do now is move that duplication to its own separate before each function called because

150
00:09:29.340 --> 00:09:33.180
remember we can use before each to run some logic before each test.

151
00:09:33.900 --> 00:09:35.270
So let me show you how that's going to work.

152
00:09:35.280 --> 00:09:40.410
I'm going to copy this line right here, and I'm going to go all the way to the top of the file and

153
00:09:40.410 --> 00:09:45.540
right here above the of after each, I'm going to write my before each function again.

154
00:09:45.540 --> 00:09:51.690
This is a function built into just we pass it, a function that just will run before each test.

155
00:09:52.050 --> 00:09:58.260
So before each test, I want to tell just to go to the Axios, get method wherever it's being used and

156
00:09:58.260 --> 00:09:59.130
whenever it's invoked.

157
00:09:59.130 --> 00:10:05.970
I want just to treat it like it's a promise that resolves to return a value that's going to be an object

158
00:10:05.970 --> 00:10:09.210
with a data properties set to an array of 15 items.

159
00:10:09.630 --> 00:10:15.000
And of course, I am going to clear this after every test, just to be sure that we are returning everything

160
00:10:15.000 --> 00:10:18.150
back to its original just implementation.

161
00:10:18.270 --> 00:10:22.920
I know it might seem redundant because we are setting things up, running our test and in tearing things

162
00:10:22.920 --> 00:10:25.790
down only to set them up again in the next test.

163
00:10:26.010 --> 00:10:31.080
But the reason this is beneficial is because it ensures true isolation and independence between the

164
00:10:31.080 --> 00:10:31.470
tests.

165
00:10:31.740 --> 00:10:37.110
There's no way that we can now have pollution because we are guaranteed to be resetting everything after

166
00:10:37.110 --> 00:10:42.900
each individual test runs, only to start things up again from the beginning for the subsequent test

167
00:10:42.900 --> 00:10:43.860
that runs afterwards.

168
00:10:44.010 --> 00:10:48.060
All right, so if I save this, everything is still going to pass.

169
00:10:48.060 --> 00:10:53.220
But now we can clean up some of the duplication in an individual test because we know that before each

170
00:10:53.220 --> 00:10:55.170
logic will handle it.

171
00:10:55.500 --> 00:11:00.240
With that said, as I've talked about many times earlier, duplication is not the worst thing in the

172
00:11:00.240 --> 00:11:00.600
world.

173
00:11:00.600 --> 00:11:00.890
Right.

174
00:11:00.900 --> 00:11:03.810
So let me show you a scenario where I think that that is the case.

175
00:11:03.810 --> 00:11:10.200
If I scroll down here in my first test, I care that this test checks that the component fetches jobs

176
00:11:10.440 --> 00:11:11.730
by hitting the.

177
00:11:13.630 --> 00:11:21.490
The this API right here, this URL do I care about what Axios get is specifically returning to me?

178
00:11:21.500 --> 00:11:25.780
Do I care that it is a an object with a data property set to an empty array?

179
00:11:25.930 --> 00:11:32.260
Or is it okay if it happens to be this default implementation right here with a data property set to

180
00:11:32.260 --> 00:11:33.220
an array of 15 items?

181
00:11:33.490 --> 00:11:39.430
To be honest, I don't really care what my fake function returns to me, I just care that it's invoked.

182
00:11:39.700 --> 00:11:43.800
So for me, in this scenario, I think that we can remove this line right here.

183
00:11:44.760 --> 00:11:45.000
All right.

184
00:11:45.000 --> 00:11:50.160
We don't need to override our before each implementation because it doesn't really matter for what this

185
00:11:50.160 --> 00:11:51.000
test cares about.

186
00:11:51.480 --> 00:11:56.760
Here we have the exact same code as we have an hour before each, so we technically don't need this

187
00:11:56.760 --> 00:11:57.170
line.

188
00:11:57.180 --> 00:12:00.330
I can comment out this line and this test will still pass.

189
00:12:00.330 --> 00:12:00.630
Right?

190
00:12:01.050 --> 00:12:06.540
However, I prefer to keep this duplication in here because instead of the user having to scroll to

191
00:12:06.540 --> 00:12:12.930
the top to figure out what Axios get is, I can keep this in here to communicate to them that I am getting

192
00:12:12.930 --> 00:12:16.890
an array of 15 items, but I'm only showing ten job listings.

193
00:12:17.100 --> 00:12:23.520
I think this context is important to understanding the actual assertion we're making down here, and

194
00:12:23.520 --> 00:12:30.870
I don't want the user to scroll all the way back up to find out that this 15 has relevance in this test

195
00:12:30.870 --> 00:12:31.380
right here.

196
00:12:31.710 --> 00:12:33.390
So yes, this is duplication.

197
00:12:33.390 --> 00:12:38.190
In fact, it's making JavaScript do the same thing twice because the before each is going to do this

198
00:12:38.190 --> 00:12:42.090
logic and then my function or my assertion here is going to do it again.

199
00:12:42.420 --> 00:12:48.180
However, I'm okay with this duplication because I think it benefits readability and comprehension for

200
00:12:48.180 --> 00:12:49.140
other developers.

201
00:12:49.230 --> 00:12:49.680
Right.

202
00:12:50.190 --> 00:12:56.640
Right here when we are testing whether our query params display the relevant page number, I don't really

203
00:12:56.640 --> 00:12:59.040
care what the get method returns at all.

204
00:12:59.040 --> 00:13:01.800
It's not pertinent or relevant to this logic right here.

205
00:13:02.010 --> 00:13:09.510
So I do need actions that get to give me a valid object so that my mounted hook does not fail or give

206
00:13:09.510 --> 00:13:10.190
me the warning.

207
00:13:10.200 --> 00:13:15.360
But I don't care what this is, so I don't care if the user scrolls up to look at it because it's something

208
00:13:15.360 --> 00:13:20.850
that's secondary and not specifically important to this test right here, which cares about the display

209
00:13:20.850 --> 00:13:23.400
of page one when there are no query params.

210
00:13:23.700 --> 00:13:29.760
Similarly for this test down below, I don't care what the Axios get promise resolves to.

211
00:13:30.220 --> 00:13:32.100
The user can scroll up and find out.

212
00:13:32.250 --> 00:13:37.050
But for the purposes of understanding this test, this is not important information so I can remove

213
00:13:37.050 --> 00:13:37.170
it.

214
00:13:37.950 --> 00:13:44.760
So in the before each to summarize, I've put the logic that a test may need to have in order to have

215
00:13:44.760 --> 00:13:47.430
a normal mount with no errors or warnings.

216
00:13:47.640 --> 00:13:54.870
However, I have put the logic there that I don't really care if another user sees or worries about

217
00:13:54.870 --> 00:13:55.100
right.

218
00:13:55.110 --> 00:14:01.410
I want each test to read like an independent chunk of logic describing some user value and the before

219
00:14:01.410 --> 00:14:07.980
age can be like complementary information or supplementary data that you may want to know about the

220
00:14:07.980 --> 00:14:08.310
test.

221
00:14:08.310 --> 00:14:12.660
But that isn't critical for you to know in order for you to understand how this test runs.

222
00:14:12.930 --> 00:14:19.290
So that kind of determines the line that I draw as far as what I put into the before each and what I

223
00:14:19.290 --> 00:14:21.120
put into an individual test.

224
00:14:21.120 --> 00:14:21.420
Right?

225
00:14:21.630 --> 00:14:27.540
In this test, I do care about informing the user that this array of 15 items has relevance to my assertion.

226
00:14:27.750 --> 00:14:31.410
So I am going to keep this duplicate code here for all my other tests.

227
00:14:31.410 --> 00:14:35.250
I'm going to move that same piece of logic upwards to them before each function.

228
00:14:35.400 --> 00:14:35.670
All right.

229
00:14:35.820 --> 00:14:40.170
And then, of course, for any test, I'm still going to keep my after each because I do want to make

230
00:14:40.170 --> 00:14:46.020
sure I clean up anything that the Axios get Mark does for me right here.

231
00:14:46.020 --> 00:14:50.340
I'm always going to clean it up after every test to ensure we don't have any pollution.

232
00:14:50.640 --> 00:14:55.770
This has been a super, super complex issue and a super complex lesson, but I hope it all makes sense

233
00:14:55.770 --> 00:14:57.240
and I will see you in the next one.
