WEBVTT
1
00:00:00.330 --> 00:00:01.250
All right.

2
00:00:01.260 --> 00:00:03.420
Welcome to the next section of the course.

3
00:00:03.510 --> 00:00:09.690
This section is called Emitting Events, so we're not going to build out any new user features in this

4
00:00:09.690 --> 00:00:10.500
section of the course.

5
00:00:10.500 --> 00:00:13.260
But we are going to learn about a feature, a view called events.

6
00:00:13.590 --> 00:00:20.160
Events allow a child component to send out a message that is intercepted by its parent.

7
00:00:20.550 --> 00:00:25.920
So we know that a parent component can pass data down to a child using props, but we never learned

8
00:00:25.920 --> 00:00:27.720
about that relationship in reverse.

9
00:00:27.720 --> 00:00:32.160
How can a child inform a parent component of some kind of change?

10
00:00:32.400 --> 00:00:36.780
And the way it does that in view is using a special feature called Events.

11
00:00:37.140 --> 00:00:40.890
So here's how we're going to get to a lesson where we can actually utilize events.

12
00:00:41.280 --> 00:00:46.470
Here I am in my job search form component, and you'll notice that we have two separate input fields

13
00:00:46.470 --> 00:00:50.010
for our job role as well as our job location.

14
00:00:50.340 --> 00:00:56.100
And let's say I propose that we move this input to its own separate reusable component.

15
00:00:56.430 --> 00:00:59.040
I'd like to call that component text input.

16
00:00:59.370 --> 00:01:06.030
So one advantage of doing so is that we can isolate the common styles for a specific text input to its

17
00:01:06.030 --> 00:01:08.010
own reusable shared view component.

18
00:01:08.310 --> 00:01:13.620
Remember, the goal of you or any component library is to build lots of small things that we can then

19
00:01:13.620 --> 00:01:14.790
reuse over and over.

20
00:01:15.090 --> 00:01:19.860
And you'll notice here, for example, that every time we write our manual input in line here, we have

21
00:01:19.860 --> 00:01:26.220
to, for example, configure the same styles we can see here on line 22 and here on line 44 that we

22
00:01:26.220 --> 00:01:27.750
have the exact same styles.

23
00:01:28.020 --> 00:01:33.390
So if we decide to create ten inputs all over the app and they have the same style, we are creating

24
00:01:33.390 --> 00:01:38.640
lots of duplication and if tomorrow we decide that the styles have to change, well then we'd have to

25
00:01:38.640 --> 00:01:40.140
edit them in ten different places.

26
00:01:40.350 --> 00:01:45.180
In comparison, if we create a reusable component and use it in ten different places, well then we

27
00:01:45.180 --> 00:01:47.880
only have to edit the styles once in that actual component.

28
00:01:48.150 --> 00:01:52.890
It's the same exact idea as with our action button component, which we worked on a few sections ago

29
00:01:53.130 --> 00:01:58.740
for those kind of common elements, such as buttons or inputs, many developers like to create separate,

30
00:01:58.740 --> 00:02:02.790
shared, reusable components, and I propose for now that we do the same thing here.

31
00:02:03.060 --> 00:02:07.470
Now, is it really worth doing this when you only have two uses of input throughout the app?

32
00:02:07.680 --> 00:02:08.640
Not really.

33
00:02:08.640 --> 00:02:13.200
Maybe in the real world you might wait for a couple more cases where the duplication starts to become

34
00:02:13.200 --> 00:02:14.610
a problem and a pain point.

35
00:02:14.790 --> 00:02:19.770
But of course this is not exactly the real world and this will allow us to actually learn more about

36
00:02:20.040 --> 00:02:21.060
a key view concept.

37
00:02:21.060 --> 00:02:25.800
So for now, let's say we will create a reusable input component and I'm going to call it text input.

38
00:02:26.160 --> 00:02:31.680
So right here, I think a really good place to put this new component is in our shared directory because

39
00:02:31.680 --> 00:02:36.870
this is where we put all of those kind of common, shared universal components that can appear in lots

40
00:02:36.870 --> 00:02:38.640
of different other locations or features.

41
00:02:39.000 --> 00:02:41.940
So here I'm going to create my text input, that view component.

42
00:02:43.640 --> 00:02:46.250
And of course, in there, I'm going to create a template tag.

43
00:02:47.660 --> 00:02:50.180
And I'm going to open this component on the right hand side.

44
00:02:51.110 --> 00:02:56.450
And I think the easiest thing to do for now is to copy over a sample input from our job search form

45
00:02:56.450 --> 00:02:56.980
component.

46
00:02:57.010 --> 00:02:59.120
So I'm going to copy over this one as a sample one.

47
00:02:59.450 --> 00:03:01.340
And we, of course will modify it in just a second.

48
00:03:01.340 --> 00:03:02.570
But this is a good place to start.

49
00:03:02.930 --> 00:03:08.930
And before we forget, let's also create our script section and export default our configuration object.

50
00:03:08.930 --> 00:03:09.800
For this component.

51
00:03:09.810 --> 00:03:11.920
I will give it a name of text input.

52
00:03:13.990 --> 00:03:14.400
Okay.

53
00:03:14.740 --> 00:03:19.480
So what can we keep and what can we customize with what we have right here in our template?

54
00:03:19.750 --> 00:03:25.510
Well, I propose that we actually get rid of the model for now and go with our more old school approach

55
00:03:25.510 --> 00:03:27.850
of using the manual to a data binding.

56
00:03:28.000 --> 00:03:34.510
So we'll set up the V bind to a data property on this data on this text input component.

57
00:03:34.780 --> 00:03:38.560
And we also will set up an event handler using the V on directive.

58
00:03:38.740 --> 00:03:44.920
And this will allow us to isolate for now the logic of the data and a changing to just an individual

59
00:03:44.920 --> 00:03:45.970
text input component.

60
00:03:46.210 --> 00:03:51.520
I know V model is a little bit cleaner, but the advantage of the more long form way is that it offers

61
00:03:51.520 --> 00:03:55.240
us an ability to customize more of those operations that happen.

62
00:03:55.450 --> 00:03:57.010
We'll see how we do that in a lesson or two.

63
00:03:57.250 --> 00:04:00.970
So for now, just trust me and believe that my intentions are good.

64
00:04:01.180 --> 00:04:07.390
So we're going to get rid of the model here and we're going to introduce a data property to store the

65
00:04:07.390 --> 00:04:08.860
components entered value.

66
00:04:09.190 --> 00:04:12.670
So right here I will create a data method.

67
00:04:13.510 --> 00:04:16.330
And in here we're going to return our JavaScript object.

68
00:04:16.330 --> 00:04:21.250
And for now, I'm going to call the property that's going to store whatever happens to be entered.

69
00:04:21.490 --> 00:04:23.890
I'm going to store that in a property called value.

70
00:04:24.130 --> 00:04:26.890
And of course, I will initialize it to an empty string.

71
00:04:27.220 --> 00:04:34.350
So right here, what I'm going to do is create a V bind directive using the colon syntax.

72
00:04:34.600 --> 00:04:41.230
And I want to connect to the input elements, value attribute, and I want that to be dynamically set

73
00:04:41.230 --> 00:04:41.800
by Vue.

74
00:04:41.800 --> 00:04:46.150
And I want Vue to bind it to the value of my value data property.

75
00:04:46.330 --> 00:04:51.820
Kind of confusing again because the attribute in HTML is called value and the name of our data property

76
00:04:51.820 --> 00:04:52.840
is also called value.

77
00:04:52.990 --> 00:04:56.770
But hopefully this makes sense from the multiple times we've used v bind before.

78
00:04:57.190 --> 00:04:57.520
Okay.

79
00:04:57.790 --> 00:04:59.530
Then we get to placeholder.

80
00:05:00.250 --> 00:05:04.720
Placeholder is an interesting one because we can no longer always have the string software engineer

81
00:05:04.900 --> 00:05:09.310
because the placeholder text is going to vary for every input component that we render.

82
00:05:09.610 --> 00:05:14.590
Well, when we have that kind of variance, much like when we had that variance in the action button

83
00:05:14.590 --> 00:05:20.020
text a few seconds ago, the way we can solve this problem is by providing a prop to the component.

84
00:05:20.290 --> 00:05:25.240
Remember, a prop is just an argument that we pass from the parent component to the child component.

85
00:05:25.510 --> 00:05:30.970
So every time job search form renders a text input, for example, it can provide the placeholder value.

86
00:05:31.300 --> 00:05:33.010
All right, so how do we set up props?

87
00:05:33.040 --> 00:05:34.750
Well, there's a couple steps we need to take.

88
00:05:34.990 --> 00:05:36.950
First step, we need to set up our validation.

89
00:05:36.970 --> 00:05:40.500
So right here, in my view, configuration object, I can set up my props.

90
00:05:40.510 --> 00:05:40.840
Keep.

91
00:05:41.930 --> 00:05:42.320
All right.

92
00:05:42.530 --> 00:05:48.110
And as a reminder, the way we do this is we have a property here for every prop that we expect to get

93
00:05:48.110 --> 00:05:49.090
or receive.

94
00:05:49.850 --> 00:05:51.530
Inside the text input component.

95
00:05:51.800 --> 00:05:54.350
So I expect to get a prop called placeholder.

96
00:05:54.650 --> 00:05:57.020
That makes sense since it matches what I want to populate.

97
00:05:57.350 --> 00:06:03.350
So the parent will provide a placeholder prop and we can provide a JavaScript object here to configure

98
00:06:03.350 --> 00:06:04.610
how this prop works.

99
00:06:05.090 --> 00:06:08.990
We can provide the type property to specify that the placeholder will be a string.

100
00:06:09.920 --> 00:06:10.850
So type string.

101
00:06:11.240 --> 00:06:15.920
Then you may recall we have this required property which specifies if it is required or not.

102
00:06:16.190 --> 00:06:21.020
Let's say that a placeholder is optional because we don't always need to provide it to an input field.

103
00:06:21.020 --> 00:06:23.240
And input field can work without a placeholder.

104
00:06:23.570 --> 00:06:29.390
So I will make this false and whenever I set required to false, I do have to provide a default value

105
00:06:29.390 --> 00:06:31.550
just in case the parent does not provide anything.

106
00:06:31.850 --> 00:06:34.100
So for default I'll just do an empty string.

107
00:06:34.370 --> 00:06:39.470
So if the parent component does not provide a placeholder prop, we're going to fall back to an empty

108
00:06:39.470 --> 00:06:39.890
string.

109
00:06:40.010 --> 00:06:43.400
And that placeholder will just be basically nothing within the input field.

110
00:06:43.400 --> 00:06:46.490
So the user will see no actual placeholder whatsoever.

111
00:06:46.770 --> 00:06:46.970
All right.

112
00:06:47.660 --> 00:06:55.580
So now we want to connect this placeholder prop to this placeholder attribute on our HTML element.

113
00:06:55.880 --> 00:06:59.960
So how do we connect a piece of data to an H HTML attribute?

114
00:07:00.080 --> 00:07:01.620
We do that using V bind.

115
00:07:01.640 --> 00:07:07.130
It's the exact same thing we did with value right here, except we're no longer binding to a data property.

116
00:07:07.220 --> 00:07:10.640
We're binding to a prop that we're going to get from our parent.

117
00:07:10.970 --> 00:07:13.640
So let me, in fact, drag this placeholder a little bit up.

118
00:07:14.750 --> 00:07:17.810
And we're going to bind using the V bind syntax of a colon.

119
00:07:18.080 --> 00:07:22.610
And so here I can provide some kind of dynamic reference to some kind of dynamic property.

120
00:07:22.790 --> 00:07:24.680
It can be on our data.

121
00:07:24.680 --> 00:07:25.550
That's totally fine.

122
00:07:25.760 --> 00:07:29.780
But in this case, it's going to be on our props and it's going to be called placeholder.

123
00:07:30.590 --> 00:07:35.090
So whatever is the current value of the placeholder prop that we get from the parent, we're going to

124
00:07:35.090 --> 00:07:39.620
connect that to the placeholder attribute on our input element so that it will display that from the

125
00:07:39.620 --> 00:07:39.980
parent.

126
00:07:40.670 --> 00:07:41.000
All right.

127
00:07:41.750 --> 00:07:43.610
We're going to keep the class the way it is.

128
00:07:43.610 --> 00:07:44.600
That's the style we want.

129
00:07:44.840 --> 00:07:50.240
And then, of course, the only other thing we need to add is the handling whenever the user types a

130
00:07:50.240 --> 00:07:57.530
value because we need to manually sync the data property and our and our HTML element.

131
00:07:57.530 --> 00:07:57.770
Right.

132
00:07:57.890 --> 00:08:03.140
We talked about this issue earlier in the course where we are going to sync our data with our value.

133
00:08:03.150 --> 00:08:06.680
So if we change our data, our value inside the input will change.

134
00:08:06.800 --> 00:08:08.540
But it doesn't work the same way in reverse.

135
00:08:08.900 --> 00:08:15.800
So as a reminder, the way we do that is by creating a V on event and we can do V on followed by the

136
00:08:15.800 --> 00:08:16.790
name of the event.

137
00:08:16.790 --> 00:08:18.080
And that event is called input.

138
00:08:18.740 --> 00:08:23.360
And of course the way we can create a shortcut for this is replacing this with an app sign.

139
00:08:23.660 --> 00:08:29.300
So at input, whenever the user types a letter, the input element will trigger an input event.

140
00:08:29.480 --> 00:08:32.870
And then we specify the method that Vue should invoke in that scenario.

141
00:08:33.080 --> 00:08:35.390
We're going to call that method handle input.

142
00:08:35.690 --> 00:08:38.660
The name is entirely up to us, but let's call it handle input.

143
00:08:38.660 --> 00:08:39.590
That makes sense to me.

144
00:08:40.400 --> 00:08:43.550
And so we need to define a method called handle input.

145
00:08:43.760 --> 00:08:48.110
We do so in a special methods property within my view configuration object.

146
00:08:48.710 --> 00:08:52.580
So here in my methods object, I define a handle input method.

147
00:08:53.270 --> 00:08:57.530
And as you may recall, Vue will automatically pass an event object to this method.

148
00:08:57.740 --> 00:09:02.840
We can give that argument whatever parameter we want, but we typically will call it event with a dollar

149
00:09:02.840 --> 00:09:08.780
sign, and on that event object we're going to have a target object and on that object we're going to

150
00:09:08.780 --> 00:09:09.950
have a value property.

151
00:09:09.950 --> 00:09:15.410
And that represents the latest string that the user has typed into the input field, whatever it is.

152
00:09:15.650 --> 00:09:18.590
So the first time, these are types of character, it's just going to be one character.

153
00:09:18.770 --> 00:09:22.970
When the user types another character, we're going to trigger another event with the latest string

154
00:09:22.970 --> 00:09:28.610
of two characters, etc. So once we get this, we need to of course overwrite our component's local

155
00:09:28.610 --> 00:09:30.620
data with that value.

156
00:09:30.830 --> 00:09:36.770
So of course using the this keyword, I can reference any data property and I want my value data property

157
00:09:36.890 --> 00:09:43.730
and that's what I want to overwrite with the latest event information, the latest event input that

158
00:09:43.730 --> 00:09:46.250
video is going to give to me in the event object.

159
00:09:46.640 --> 00:09:50.900
Okay, so this is our basic configuration for our text input component.

160
00:09:51.080 --> 00:09:55.520
And the very next lesson, we're going to start using it within our job search form.
