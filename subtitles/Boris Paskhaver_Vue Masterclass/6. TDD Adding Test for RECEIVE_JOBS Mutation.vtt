WEBVTT
1
00:00:00.450 --> 00:00:01.260
Okay.

2
00:00:01.260 --> 00:00:06.570
So in this lesson, we're going to use test driven development to create a new mutation.

3
00:00:06.840 --> 00:00:12.870
The responsibility of our new mutation will be to receive an array of jobs and overwrite the existing

4
00:00:12.870 --> 00:00:14.450
jobs data property.

5
00:00:14.790 --> 00:00:20.910
So our goal is that this mutation is going to be run once we've received the API response of the jobs

6
00:00:20.910 --> 00:00:22.470
in our view, action.

7
00:00:22.740 --> 00:00:27.480
Now we have not yet written that asynchronous action, but that doesn't matter because we can still

8
00:00:27.480 --> 00:00:28.440
write the mutation.

9
00:00:28.620 --> 00:00:34.260
We can still write the actual function or method that's going to overwrite the view, text or state

10
00:00:34.440 --> 00:00:37.470
before we write the action that's going to commit that mutation.

11
00:00:38.100 --> 00:00:43.740
So right here in my corresponding test file index, that test that Jess inside my mutations block I'm

12
00:00:43.740 --> 00:00:48.150
going to add a new describe and let's call our new mutation receive jobs.

13
00:00:48.390 --> 00:00:49.750
That's exactly what it's going to do.

14
00:00:49.770 --> 00:00:53.370
It's going to receive an array of jobs and save it to the view, text or state.

15
00:00:53.820 --> 00:00:55.800
So what is this mutation going to do?

16
00:00:55.830 --> 00:00:59.460
It receives jobs from API response.

17
00:00:59.970 --> 00:01:05.610
Now I can make an argument that the mutation doesn't really care where it's getting the jobs from so

18
00:01:05.610 --> 00:01:11.550
we can consolidate this to it receives jobs and that makes the mutation kind of oblivious and not caring

19
00:01:11.550 --> 00:01:13.020
about this detail.

20
00:01:13.470 --> 00:01:17.880
But at the same time, I think for other developers and for product managers, for example, if they're

21
00:01:17.880 --> 00:01:21.630
reading through this test suite, it might provide a little bit more context to explain to them that

22
00:01:21.750 --> 00:01:26.520
not only is this an array of jobs, but this is really an array of jobs that are out expects to receive

23
00:01:26.550 --> 00:01:28.440
from an API from hitting an end point.

24
00:01:28.440 --> 00:01:28.650
Right.

25
00:01:28.830 --> 00:01:33.660
There's no logic in here that's going to be related to making the API call, but it does provide some

26
00:01:33.810 --> 00:01:37.680
higher level information about where all these pieces fit together.

27
00:01:38.400 --> 00:01:44.130
So moving on to the test, we're going to begin with our state and we're going to have a very similar

28
00:01:44.130 --> 00:01:45.870
shape to what we have on the left hand side.

29
00:01:46.050 --> 00:01:49.020
So we're going to have a jobs property set to an empty array.

30
00:01:49.230 --> 00:01:54.210
And of course, our expectation is when we run the mutation, we want this jobs property to be updated

31
00:01:54.210 --> 00:01:55.500
to be our array of jobs.

32
00:01:55.750 --> 00:01:58.440
It's right here on my imported mutations object.

33
00:01:58.440 --> 00:02:02.240
I'm going to expect there's going to be a mutation called receive jobs.

34
00:02:02.250 --> 00:02:05.850
It does not exist yet because we're using TDD, but that's fine.

35
00:02:05.850 --> 00:02:06.960
We hope that it will exist.

36
00:02:07.170 --> 00:02:12.510
And the first argument to any mutation method is always going to be our view X Store State.

37
00:02:13.380 --> 00:02:18.120
Now this presents us with an interesting problem that we have not dealt with before, and that is how

38
00:02:18.120 --> 00:02:21.600
can we provide additional arguments to our mutation methods?

39
00:02:21.870 --> 00:02:25.770
The additional argument that we need right here is the actual array of jobs, right?

40
00:02:25.920 --> 00:02:31.560
Because if we only provide the state, then how is you supposed to know what to overwrite this jobs

41
00:02:31.560 --> 00:02:32.190
property with?

42
00:02:32.190 --> 00:02:34.050
It doesn't have that new array of jobs.

43
00:02:34.380 --> 00:02:40.050
So in order to provide additional arguments to a mutation, we simply provide them as additional parameters.

44
00:02:40.290 --> 00:02:44.520
So right here, what I'm going to provide as my second argument is going to be an array of jobs.

45
00:02:44.820 --> 00:02:46.230
So right here, I'm just going provide an array.

46
00:02:46.470 --> 00:02:52.170
And furthermore, for this test, I don't really care about having full job objects with all those properties

47
00:02:52.170 --> 00:02:53.220
like idea and title.

48
00:02:53.370 --> 00:02:57.870
If anything, I think that's going to bloat the test and to test the fundamental responsibility that

49
00:02:57.870 --> 00:03:00.120
this mutation is going to overwrite the jobs array.

50
00:03:00.300 --> 00:03:02.970
I really just need an array of anything, right?

51
00:03:03.120 --> 00:03:08.070
Because as long as I validate that jobs moves from being an empty array to whatever array I pass in

52
00:03:08.070 --> 00:03:11.820
here, then I validated that that mutation is correctly overwriting that property.

53
00:03:12.060 --> 00:03:14.910
So for now, I'm just going to say job one and job two.

54
00:03:15.960 --> 00:03:21.030
As long as this is the array of jobs at the end of my mutation, then a mutation is doing its job.

55
00:03:21.120 --> 00:03:22.920
It doesn't really matter what these things are.

56
00:03:22.920 --> 00:03:24.390
In fact, they don't even need to be strings.

57
00:03:24.390 --> 00:03:25.890
They can be whatever you want, right?

58
00:03:26.220 --> 00:03:32.490
So my expectation is when I'm done running this mutation, if I check in on my state, I now expected

59
00:03:32.490 --> 00:03:38.010
to equal an object with a jobs property that has been updated from being an empty array to being this

60
00:03:38.010 --> 00:03:38.940
array right here.

61
00:03:39.240 --> 00:03:43.260
And that by itself will validate that my mutation is doing exactly what it's supposed to do.

62
00:03:43.830 --> 00:03:44.130
All right.

63
00:03:44.400 --> 00:03:49.620
So just to reiterate what we learned here, whenever we invoke a mutation, the first argument must

64
00:03:49.620 --> 00:03:51.510
always be that you store state.

65
00:03:51.510 --> 00:03:52.800
That is non-negotiable.

66
00:03:52.810 --> 00:03:54.840
That is part of how the View Library works.

67
00:03:55.140 --> 00:03:59.910
However, any subsequent parameters, the second parameter, the third parameter, as many as we want,

68
00:04:00.120 --> 00:04:05.040
that can be our own parameters and that can allow us to customize whatever we want to pass into the

69
00:04:05.040 --> 00:04:05.610
mutation.

70
00:04:05.850 --> 00:04:10.320
And the most common thing we're going to be passing into a mutation is, of course, the next piece

71
00:04:10.320 --> 00:04:13.800
of data that we want to save to some piece of the View Store state.

72
00:04:14.010 --> 00:04:19.410
So the mutation is going to need to know which property to overwrite, but what to override it with

73
00:04:19.590 --> 00:04:22.260
is what we're typically going to pass in as the second parameter.

74
00:04:23.010 --> 00:04:25.320
So right here, let's now make this test pass.

75
00:04:25.560 --> 00:04:29.540
So we're going to first begin by defining a constant for our mutation name.

76
00:04:29.550 --> 00:04:31.200
It's going to be called receive jobs.

77
00:04:31.470 --> 00:04:37.080
And right here I'm going to provide the constant with a string with the same thing, the same value.

78
00:04:37.200 --> 00:04:41.460
And of course, as a reminder, the reason we're doing this is so that we can reference these mutation

79
00:04:41.460 --> 00:04:46.980
names whenever we are committing these mutations to the bookstore to ensure that we have no chance of

80
00:04:46.980 --> 00:04:47.400
typos.

81
00:04:47.760 --> 00:04:51.750
So right here, I'm going to provide my constant inside square brackets.

82
00:04:51.900 --> 00:04:55.650
So we are creating a mutation method with that same name of receive jobs.

83
00:04:55.830 --> 00:04:57.690
And here I define my parameter list.

84
00:04:57.990 --> 00:04:59.940
And as we just mentioned, we're always going to.

85
00:04:59.980 --> 00:05:05.560
You provide the state as the first parameter view acts will actually automatically pass in the current

86
00:05:05.560 --> 00:05:11.440
store state as the first parameter automatically, but then the subsequent parameters are up to us.

87
00:05:11.620 --> 00:05:17.050
So here, just like in our test, what we expect the parameter to be is our new array of jobs.

88
00:05:17.350 --> 00:05:21.730
And later on, I'm going to show you how this works when we actually invoke the commit method on a store.

89
00:05:21.970 --> 00:05:25.120
As a reminder, we invoke commit to issue imitation to the store.

90
00:05:25.270 --> 00:05:31.570
We can pass the commit method additional arguments and you is going to relay them right here to be these

91
00:05:31.570 --> 00:05:32.500
subsequent parameters.

92
00:05:32.500 --> 00:05:36.370
After the book store state, we're going to show that commit syntax in just the lesson or two.

93
00:05:36.520 --> 00:05:40.170
But for now, just realize the first parameter must always be the store state.

94
00:05:40.360 --> 00:05:45.100
The subsequent parameters are up to us, and in this mutation we care about getting the array of jobs.

95
00:05:45.430 --> 00:05:49.450
So all that's left to do, of course, is to reference the correct data property that we care about.

96
00:05:49.450 --> 00:05:51.880
We want to overwrite the jobs property.

97
00:05:51.880 --> 00:05:53.320
It starts out as an empty array.

98
00:05:53.560 --> 00:05:58.090
We want to take the array of jobs we're going to receive here and overwrite our jobs, property and

99
00:05:58.090 --> 00:05:58.960
the View Store State.

100
00:05:59.650 --> 00:06:00.460
We're going to save this.

101
00:06:00.670 --> 00:06:03.280
We're going to let our test run it and we see that everything passes.

102
00:06:03.460 --> 00:06:08.170
So that validates that the mutation is doing its job, it is receiving the store state, it is receiving

103
00:06:08.170 --> 00:06:12.430
the new array of jobs, and it is overwriting the correct property with that array.

104
00:06:12.620 --> 00:06:12.940
All right.

105
00:06:13.060 --> 00:06:15.880
So now we have our new slice of state and we have a way to modify it.

106
00:06:16.060 --> 00:06:20.800
So the next thing we're going to do is wire up the asynchronous action that's going to make the API

107
00:06:20.800 --> 00:06:26.260
request, get that array of jobs that commit this mutation, giving it the array of jobs that it has

108
00:06:26.260 --> 00:06:29.080
already snatched from our mock backend in JSON, sir.

109
00:06:29.410 --> 00:06:29.740
All right.

110
00:06:29.980 --> 00:06:32.860
So lots of progress in this lesson and I will see you next.
