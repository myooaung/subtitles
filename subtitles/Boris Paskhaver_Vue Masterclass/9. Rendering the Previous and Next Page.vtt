WEBVTT
1
00:00:00.520 --> 00:00:01.390
All right.

2
00:00:01.390 --> 00:00:07.270
So now that we have our previous page and next page computed properties, we can use them in our template

3
00:00:07.270 --> 00:00:11.530
to dynamically render our previous and next page buttons as needed.

4
00:00:11.920 --> 00:00:17.320
So I'm going to scroll up to my template for the job listings component and below this P tag, this

5
00:00:17.320 --> 00:00:19.370
paragraph tag, I'm going to add another div.

6
00:00:19.690 --> 00:00:24.550
This is going to be a box that's going to show up on the right side of the screen right after all of

7
00:00:24.550 --> 00:00:25.360
my job listings.

8
00:00:25.660 --> 00:00:27.760
And immediately, let me add some classes here.

9
00:00:28.120 --> 00:00:29.650
I'm going to make this a Flexbox.

10
00:00:29.950 --> 00:00:34.660
I'm going to vertically align the children of the Flexbox using the items center property.

11
00:00:34.840 --> 00:00:40.300
And then I'm also going to use justify a center that's going to apply the excess attribute, justify

12
00:00:40.300 --> 00:00:41.490
common center basic.

13
00:00:41.500 --> 00:00:46.630
And it's going to center these items vertically and horizontally within the box that's going to be on

14
00:00:46.630 --> 00:00:48.610
the right hand side of this of Flexbox.

15
00:00:49.060 --> 00:00:49.450
All right.

16
00:00:49.630 --> 00:00:53.680
And in this div, I'm going to add two router link components.

17
00:00:53.680 --> 00:00:57.700
One is going to be for my previous page and one is going to be for my next page.

18
00:00:58.030 --> 00:00:59.590
So I'm going to create a router link here.

19
00:00:59.620 --> 00:01:05.320
Remember, that is a component that Vue router gives to us that allows us to navigate across our view

20
00:01:05.320 --> 00:01:08.500
app without forcing a page refresh so the app doesn't reload.

21
00:01:08.860 --> 00:01:14.200
So this one is going to have the text previous and the other one is going to have the text of next.

22
00:01:14.560 --> 00:01:18.520
And of course, if we were to leave this in right now, they would both render at all times.

23
00:01:18.730 --> 00:01:19.720
So that's not good.

24
00:01:19.720 --> 00:01:24.160
We need to conditionally render them if they're available, and we also need to specify where they're

25
00:01:24.160 --> 00:01:25.960
actually going to lead the user to.

26
00:01:26.170 --> 00:01:26.530
All right.

27
00:01:26.920 --> 00:01:31.360
So for the very first one, what I'm going to do is use my VFR directive.

28
00:01:31.360 --> 00:01:36.700
I only want to conditionally render this router link if there is a previous page to go to.

29
00:01:37.090 --> 00:01:43.480
Well, the previous page computed property will either give me a number or the value undefined.

30
00:01:44.320 --> 00:01:49.780
So the way it actually works in JavaScript is undefined is a false value, which means it is as good

31
00:01:49.780 --> 00:01:56.650
as false in a if statement, context and any number in JavaScript is truthful.

32
00:01:56.980 --> 00:01:58.300
I think it might even be.

33
00:01:58.300 --> 00:01:59.470
Perhaps zero is false.

34
00:01:59.470 --> 00:02:00.280
Yeah, I'm not really sure.

35
00:02:00.460 --> 00:02:03.940
But any positive number one, two, three, four is truth.

36
00:02:04.210 --> 00:02:07.210
So it is as good as true in an if statement context.

37
00:02:07.210 --> 00:02:11.710
And this previous page computed property will only return numbers that are one and above.

38
00:02:12.070 --> 00:02:17.650
So in other words, if I have one, two, three or four, any kind of numeric value and I provide it

39
00:02:17.650 --> 00:02:20.350
to a VRF, it is going to evaluate to true.

40
00:02:20.350 --> 00:02:21.550
It's going to evaluate to.

41
00:02:22.210 --> 00:02:24.850
Yes, go ahead and render this in comparison.

42
00:02:24.850 --> 00:02:30.940
If my previous page computed property returns undefined, that's going to evaluate to false and thus

43
00:02:31.030 --> 00:02:35.350
this router length will not render because the VRF directive evaluates the false.

44
00:02:35.620 --> 00:02:40.720
So in other words, just to reiterate a value like one, two, three, four, five is as good as true

45
00:02:40.720 --> 00:02:41.290
right here.

46
00:02:41.410 --> 00:02:44.200
JavaScript interprets those values as truth.

47
00:02:44.740 --> 00:02:49.270
All right, so what I'm going to do is provide a reference to my previous page computed property.

48
00:02:49.510 --> 00:02:52.240
If that gives me undefined, I'm not going to render this.

49
00:02:52.390 --> 00:02:56.470
If it gives me any valid number or integer, I am going to render this.

50
00:02:56.800 --> 00:03:02.020
So for router link below, I'm going to apply the exact same logic with my VRF directive, except I'm

51
00:03:02.020 --> 00:03:05.680
going to connect this conditionally to whatever my next page computed.

52
00:03:05.680 --> 00:03:06.850
Property returns below.

53
00:03:07.090 --> 00:03:12.760
If next page gives me undefined, I will not render that button without link to navigate the user to

54
00:03:12.760 --> 00:03:13.330
the next page.

55
00:03:13.690 --> 00:03:17.140
And if next page gives me a number instead, a number is true.

56
00:03:17.190 --> 00:03:17.480
Three.

57
00:03:17.530 --> 00:03:19.000
So this will add value to true.

58
00:03:19.030 --> 00:03:21.670
So Vue will render this router link.

59
00:03:21.940 --> 00:03:22.300
Okay.

60
00:03:22.990 --> 00:03:27.760
So now we have the text, we have the conditional render, but we obviously have to tell the router

61
00:03:27.760 --> 00:03:31.180
like where to go to the previous page versus the next page.

62
00:03:31.180 --> 00:03:31.480
Right.

63
00:03:31.750 --> 00:03:37.480
So what I'm going to do here is I'm going to provide my two prop and to my two prop I want to provide

64
00:03:37.480 --> 00:03:41.500
a JavaScript object because that is a complex value that is beyond a string.

65
00:03:41.620 --> 00:03:48.070
We also need to use our V bind syntax so the colon in front of the two in order to be able to provide

66
00:03:48.070 --> 00:03:52.510
a JavaScript object and have you understand that it is an object and not a string.

67
00:03:52.870 --> 00:03:56.800
So we're going to use a syntax that we explored earlier in regards to View Router.

68
00:03:57.100 --> 00:04:02.860
One way that we can specify a route to go to is not by actually providing the URL, but by providing

69
00:04:02.860 --> 00:04:05.950
the name that we set up in our router file.

70
00:04:05.950 --> 00:04:12.640
So as a reminder, if I go to router index that yes, remember we gave every route a name and we want

71
00:04:12.640 --> 00:04:17.500
to take the user to this route slash job slash results, which has the name of job results.

72
00:04:17.620 --> 00:04:20.260
It's going to be the exact same route each time.

73
00:04:20.440 --> 00:04:25.810
The only difference is the actual query param, which will tell the component which set of jobs to show.

74
00:04:25.870 --> 00:04:26.200
Right?

75
00:04:26.530 --> 00:04:33.820
So here I'm going to specify that the name of the route that I want this button to go to or this router

76
00:04:33.820 --> 00:04:40.390
link is going to be job results and this has to match the exact same name I provided in the router index.

77
00:04:40.390 --> 00:04:41.080
That's useful.

78
00:04:41.380 --> 00:04:44.620
So this is not enough because this will go to slash job slash results.

79
00:04:44.770 --> 00:04:50.350
I need to provide an additional query param and I can do that by providing the query key right here

80
00:04:50.560 --> 00:04:52.870
and making that equal to a JavaScript object.

81
00:04:53.140 --> 00:04:58.780
And in this object I provide whatever query params I want and Vue will automatically add them to the

82
00:04:58.780 --> 00:05:00.040
URL and set up all the.

83
00:05:00.100 --> 00:05:04.240
Proper concatenation and symbols and all that stuff automatically for me.

84
00:05:04.570 --> 00:05:09.730
So of course, this component is dependent on a query property, a query param called page.

85
00:05:09.880 --> 00:05:11.560
So I have to use page right here.

86
00:05:12.640 --> 00:05:15.580
And what is going to be the value that I want to provide for that query?

87
00:05:15.580 --> 00:05:19.660
Param It's going to be whatever my previous page is.

88
00:05:20.440 --> 00:05:25.270
So for example, if we are on page number two, then my previous page will be one.

89
00:05:25.540 --> 00:05:31.090
So if I have one, then this vehicle will evaluate to true and I will navigate the user to slash job

90
00:05:31.100 --> 00:05:34.810
slash results with a page query param equal to one.

91
00:05:35.230 --> 00:05:40.540
Once that happens, this component will detect that that query has changed that page property.

92
00:05:40.750 --> 00:05:41.980
So it's going to reevaluate.

93
00:05:42.400 --> 00:05:47.770
Display jobs is also going to re-evaluate and give me a different set of ten jobs using the logic that

94
00:05:47.770 --> 00:05:48.820
we previously defined.

95
00:05:49.210 --> 00:05:49.630
All right.

96
00:05:50.440 --> 00:05:53.800
So for my second matter link, I want the exact same logic.

97
00:05:53.800 --> 00:05:56.410
So right here, I'm going to bind to the two prop.

98
00:05:56.590 --> 00:05:59.170
I'm going to provide a JavaScript object and double quotes.

99
00:05:59.440 --> 00:06:03.610
I still want to go to the same root, so job results is still my root.

100
00:06:04.000 --> 00:06:04.330
Right?

101
00:06:04.360 --> 00:06:09.310
However, I'm going to customize the query params, so I'm going to provide an object to query params.

102
00:06:09.550 --> 00:06:13.960
And of course here we still need to provide the page property, but instead of going to the previous

103
00:06:13.960 --> 00:06:15.970
page, I want to go to the next page.

104
00:06:16.480 --> 00:06:18.910
So imagine, for example, that we are on page two.

105
00:06:19.150 --> 00:06:24.340
In that case, the next page computed property is going to go to three, v, f is going to be true.

106
00:06:24.520 --> 00:06:30.130
And this is going to be an object that goes to slash job slash results with a query param of page set

107
00:06:30.130 --> 00:06:30.730
to three.

108
00:06:31.120 --> 00:06:34.150
So in the browser that's going to be page equals three.

109
00:06:34.870 --> 00:06:39.880
That's what view is automatically going to add to the end of the URL, which is the exact same URL and

110
00:06:39.880 --> 00:06:40.900
root as the one above.

111
00:06:41.020 --> 00:06:45.280
The only thing that is different is the query that we are putting together for it to navigate.

112
00:06:45.610 --> 00:06:50.470
And that's important because that is what our component needs in order to figure out which jobs to render.

113
00:06:51.160 --> 00:06:55.240
The final thing that I want to add to both of these writer links, of course, is a bunch of classes

114
00:06:55.240 --> 00:06:56.620
are going to be the exact same.

115
00:06:56.980 --> 00:07:01.540
So for my tail one classes here, I want to add a little bit of margin on the x axis.

116
00:07:01.540 --> 00:07:05.830
So next three to add 12 pixels of margin on the left and 12 pixels on the right.

117
00:07:06.160 --> 00:07:09.640
I want to use text as some to make the text small at 14 pixels.

118
00:07:09.910 --> 00:07:11.520
I want to make it a little bit bold.

119
00:07:11.530 --> 00:07:15.280
So I'm going to do font semi bold that's going to add a font weight of 600.

120
00:07:15.520 --> 00:07:21.430
And then I want to use one of the colors that's available in my tailwind config file and it is brand

121
00:07:21.430 --> 00:07:22.270
blue one.

122
00:07:22.570 --> 00:07:27.120
So in order for it to effect the text color, I'm going to use the text classes and it's going to be

123
00:07:27.120 --> 00:07:29.260
text dash followed by my color.

124
00:07:29.470 --> 00:07:31.600
We called it Brand Blue one.

125
00:07:31.960 --> 00:07:33.770
So that's the one that I want to use right here.

126
00:07:34.000 --> 00:07:38.590
And I'm just going to copy this line and paste that below for the other router link.

127
00:07:38.770 --> 00:07:40.000
And that should do it.

128
00:07:40.210 --> 00:07:42.520
So with that, I'm going to navigate to my browser.

129
00:07:44.120 --> 00:07:44.870
And here we are.

130
00:07:44.960 --> 00:07:46.190
Let me refresh this page.

131
00:07:47.120 --> 00:07:47.450
All right.

132
00:07:47.450 --> 00:07:48.050
And here we are.

133
00:07:48.120 --> 00:07:49.910
We are on page six right here.

134
00:07:50.200 --> 00:07:51.170
Everything is looking fine.

135
00:07:51.170 --> 00:07:52.520
And if I scroll to the bottom.

136
00:07:53.480 --> 00:07:53.960
Perfect.

137
00:07:53.960 --> 00:07:54.740
We are on page six.

138
00:07:54.740 --> 00:07:56.780
We have a previous button and we have a next button.

139
00:07:56.930 --> 00:08:00.170
If I click next notice, we navigate to page seven.

140
00:08:00.260 --> 00:08:04.280
We get the next batch of job results and we still have our previous next buttons.

141
00:08:04.520 --> 00:08:08.600
So I'm going to click it again to go to page eight, our quick params update up here.

142
00:08:08.690 --> 00:08:11.930
We are updating our current page property right here as well.

143
00:08:12.140 --> 00:08:13.670
These recalculate as well.

144
00:08:14.000 --> 00:08:14.660
Still good.

145
00:08:14.660 --> 00:08:15.800
As I move to page nine.

146
00:08:15.800 --> 00:08:22.310
As I move to page ten, notice we no longer have a next button because there is no more pages to go

147
00:08:22.310 --> 00:08:22.580
to.

148
00:08:22.700 --> 00:08:23.060
All right.

149
00:08:23.240 --> 00:08:25.250
Let us check that in the opposite direction.

150
00:08:25.250 --> 00:08:29.930
So I'm going to manually type in page two here to go to my second page of job results.

151
00:08:30.110 --> 00:08:32.750
There's still a previous page and a next page that is good.

152
00:08:32.930 --> 00:08:35.540
But when I go to the previous page, we are now on page one.

153
00:08:35.810 --> 00:08:37.520
There is no more previous page.

154
00:08:37.670 --> 00:08:40.850
So our previous page, a computed property is returning undefined.

155
00:08:41.030 --> 00:08:46.970
Thus our VRF is not rendering and we have no router link for the previous page, only for the next one.

156
00:08:47.210 --> 00:08:51.980
So everything is working in all three scenarios where we have no previous button, where we have no

157
00:08:51.980 --> 00:08:53.900
next button and we have both.

158
00:08:54.110 --> 00:08:57.110
All right, so everything is looking absolutely perfect.

159
00:08:57.110 --> 00:09:01.280
I really like where this is going and we will continue chipping away at this in the very next lesson.
