1
00:00:00,530 --> 00:00:01,330
Okay.

2
00:00:01,330 --> 00:00:07,570
So now that we have our text input component, let's import it in our job search form and then use it

3
00:00:07,570 --> 00:00:09,640
to replace our two text inputs.

4
00:00:10,120 --> 00:00:15,130
So right here, I'm going to scroll down to the script section of my job search form and I'm going to

5
00:00:15,130 --> 00:00:17,440
import my new text input component.

6
00:00:17,800 --> 00:00:24,430
So import text input from our top level source directory, the component sub directory, we have our

7
00:00:24,430 --> 00:00:28,930
shared folder and in there we have our new text input that view component file.

8
00:00:29,230 --> 00:00:34,450
I also have to register the text input with my components object here to make it a local component.

9
00:00:34,870 --> 00:00:36,700
So I'm going to add text input right here.

10
00:00:37,390 --> 00:00:42,340
And that of course enables me to use this anywhere in the template of job search form in either the

11
00:00:42,340 --> 00:00:45,190
upper camel case format or the kabob case format.

12
00:00:45,670 --> 00:00:48,240
So let me scroll up and find my very first input.

13
00:00:48,250 --> 00:00:51,610
This is for the job role and I will delete this in just a second.

14
00:00:51,610 --> 00:00:54,160
But for now, let's write out its replacement.

15
00:00:54,430 --> 00:00:58,250
So we are going to render our new text input component right here.

16
00:00:58,570 --> 00:01:01,330
I'm going to render it with a self-closing tag.

17
00:01:01,630 --> 00:01:06,700
And as a reminder, the component takes a placeholder prop and that is what it is going to populate

18
00:01:06,700 --> 00:01:08,650
for the placeholder text in the input.

19
00:01:08,980 --> 00:01:13,570
So right here I'm going to provide that placeholder prop and I'm going to feed in the same value of

20
00:01:13,570 --> 00:01:14,500
software engineer.

21
00:01:15,250 --> 00:01:20,410
In this scenario, we do not have any kind of dynamic value coming from data or any kind of array or

22
00:01:20,410 --> 00:01:20,820
object.

23
00:01:20,830 --> 00:01:21,910
We have a simple string.

24
00:01:22,060 --> 00:01:26,350
And as a reminder, in those scenarios we do not need to use V bind with placeholder.

25
00:01:26,350 --> 00:01:28,960
We can just pass in the prop and it's regular string argument.

26
00:01:29,290 --> 00:01:34,600
So with that we can remove our former input and immediately we can start to see some.

27
00:01:34,600 --> 00:01:40,810
Some of the benefits of a reusable component is that we have a lot less space being used up here and

28
00:01:40,810 --> 00:01:48,190
we've sort of transferred the logic of storing the value and its changing value to this isolated text

29
00:01:48,190 --> 00:01:48,940
input component.

30
00:01:49,180 --> 00:01:53,110
Here is where we're keeping track of the user's interaction with the input field.

31
00:01:53,230 --> 00:01:58,510
And so in the parent component, we can sort of delegate that responsibility to the text input and not

32
00:01:58,510 --> 00:02:01,690
worry about anything besides rendering it and giving it a placeholder.

33
00:02:01,960 --> 00:02:06,970
We also don't have to remember the styles and duplicating the styles, etc. We've isolated all of that

34
00:02:06,970 --> 00:02:08,050
to this reusable component.

35
00:02:08,320 --> 00:02:12,070
So it makes it, in my mind right now, a little bit cleaner, a little bit better.

36
00:02:12,400 --> 00:02:15,190
So let's do the exact same thing for our input below.

37
00:02:15,460 --> 00:02:21,970
So right here, well render not a plain HTML input, but our text input reusable view component.

38
00:02:22,150 --> 00:02:23,830
And this also needs a placeholder.

39
00:02:24,220 --> 00:02:27,550
And I, of course I'm going to give it the string of Los Angeles just like below.

40
00:02:27,940 --> 00:02:31,600
And that clears me to remove the former input that was in its place.

41
00:02:32,230 --> 00:02:33,120
So there we go.

42
00:02:33,130 --> 00:02:38,110
We've cleaned it up a little bit and now we have our two text input components being used within job

43
00:02:38,110 --> 00:02:38,620
search form.

44
00:02:38,920 --> 00:02:41,020
So let me go to my browser and try this out.

45
00:02:41,950 --> 00:02:43,180
So here we have the page.

46
00:02:43,180 --> 00:02:43,970
Let me refresh.

47
00:02:44,020 --> 00:02:48,340
You rarely actually need to refresh, but I'm going to do it just to be safe and I'm going to open up

48
00:02:48,340 --> 00:02:48,640
my view.

49
00:02:48,640 --> 00:02:52,300
DevTools And let me type a couple characters in both of these input boxes.

50
00:02:52,310 --> 00:02:57,880
So in my role, let's say I'm looking for a view developer job and let's say in the city, I'm going

51
00:02:57,880 --> 00:02:59,140
to look for Dallas.

52
00:03:00,110 --> 00:03:06,500
So if I expand my job search form will notice we now have those two text input child components and

53
00:03:06,710 --> 00:03:12,350
if I check into text input here, we'll notice we are indeed getting the placeholder value from the

54
00:03:12,350 --> 00:03:12,710
parent.

55
00:03:12,710 --> 00:03:13,250
And that's great.

56
00:03:13,370 --> 00:03:19,160
And here, here's the data value property that we configured in the previous lesson and it has indeed

57
00:03:19,160 --> 00:03:20,720
populated to be view developer.

58
00:03:20,720 --> 00:03:24,960
And if I add something else to the end here like the developers, it will update accordingly.

59
00:03:25,190 --> 00:03:28,130
And if I go into text input right here, same deal.

60
00:03:28,130 --> 00:03:33,920
We have the value of the text box being kept and we've sort of isolated the responsibility of keeping

61
00:03:33,920 --> 00:03:39,650
track and storing that value into our individual text input component.

62
00:03:39,650 --> 00:03:39,860
Right?

63
00:03:39,860 --> 00:03:43,820
So this is kind of a good sign because we've split up a problem into a lot of smaller pieces.

64
00:03:44,150 --> 00:03:46,640
However, this does present us with a new problem.

65
00:03:46,850 --> 00:03:52,730
Remember that our job search form component is the one that is actually storing the data property for

66
00:03:52,730 --> 00:03:54,080
the location and the role.

67
00:03:54,260 --> 00:03:57,200
And notice that these strings have not been updated.

68
00:03:57,200 --> 00:04:02,630
Right, because we've delegated the entire storage functionality to these individual text input components

69
00:04:02,900 --> 00:04:08,030
and just because they are changing values within them that doesn't meet our parent component of job

70
00:04:08,030 --> 00:04:11,840
search form is being alerted to the changes in our children.

71
00:04:12,230 --> 00:04:17,150
So once again, our children, our text input components are changing and they are keeping track of

72
00:04:17,150 --> 00:04:22,850
those changes, but they're not relaying that message that change that event to the parent.

73
00:04:23,180 --> 00:04:29,420
So we need to find a way to get the data upwards from the child text input component upwards to the

74
00:04:29,420 --> 00:04:31,610
job search form parent component.

75
00:04:31,880 --> 00:04:34,100
We're going to figure out how to do that in the very next lesson.
