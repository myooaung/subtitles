WEBVTT
1
00:00:00.270 --> 00:00:01.170
All right.

2
00:00:01.170 --> 00:00:06.990
So hopefully by now we feel more comfortable navigating the user around our app using view router.

3
00:00:07.170 --> 00:00:08.910
We have several ways to do so.

4
00:00:08.910 --> 00:00:14.880
Of course, we can use the router link component to establish a fake hyperlink that will navigate the

5
00:00:14.880 --> 00:00:17.880
user to a different route or path on our website.

6
00:00:18.180 --> 00:00:24.420
And we can also force navigation in the JavaScript section or components by accessing the router property

7
00:00:24.420 --> 00:00:29.970
on a component via this keyword and then invoking the push method on the router object.

8
00:00:30.390 --> 00:00:36.210
So the next thing that I'd like to do is to head to our main nav component, and we'll notice that this

9
00:00:36.210 --> 00:00:39.630
component still has a couple hyperlinks scattered throughout.

10
00:00:39.930 --> 00:00:46.650
For example, this one right here on line 13 is the company name that appears in the top left corner

11
00:00:46.650 --> 00:00:47.340
of our website.

12
00:00:47.340 --> 00:00:53.520
So as a reminder, it is this thing right here and currently it is an actual hyperlink to the official

13
00:00:53.520 --> 00:00:55.860
Google Web page, the careers web page.

14
00:00:55.980 --> 00:01:01.110
And so I want to replace this to be a link to my own app's home page, the root route.

15
00:01:01.530 --> 00:01:07.380
So of course whenever we use view router, we no longer want to have hyperlinks because we don't want

16
00:01:07.380 --> 00:01:11.220
to force a page refresh or an actual browser navigation.

17
00:01:11.400 --> 00:01:14.460
We want to simulate that navigation within our app.

18
00:01:14.820 --> 00:01:20.080
So the first thing I'm going to do here is replace this anchor tag with a router link component.

19
00:01:20.100 --> 00:01:25.170
The router link is views the view router component equivalent of a hyperlink.

20
00:01:25.380 --> 00:01:30.870
So the user has the same impression of navigation, but we navigate them within the confines and boundaries

21
00:01:30.870 --> 00:01:31.560
of our view app.

22
00:01:31.920 --> 00:01:37.950
So right here our place this a tag with a router link and here I'm going to close it off with the closing

23
00:01:37.950 --> 00:01:38.340
tag.

24
00:01:38.520 --> 00:01:40.650
So slash router link as well.

25
00:01:41.310 --> 00:01:43.110
There's a couple of things that I'd like to change here.

26
00:01:43.410 --> 00:01:48.840
First up, we are interpolating the value of the company data property right here.

27
00:01:49.110 --> 00:01:53.670
If I scroll down to my component setup, we can see that is a string of bubble careers.

28
00:01:53.970 --> 00:01:59.040
And this was purely done in the beginning of the course to introduce you to the concept of interpolating

29
00:01:59.040 --> 00:01:59.430
data.

30
00:01:59.700 --> 00:02:03.720
And really the reason you would want to do this is if your data is changing.

31
00:02:03.870 --> 00:02:08.820
In this case, since bubble careers is hard coded and there's no way for it to change, I don't see

32
00:02:08.820 --> 00:02:11.040
any real reason to have it in our data.

33
00:02:11.220 --> 00:02:17.640
I can just imagine ourselves putting it directly in line in our tunnel and cleaning up some of our data.

34
00:02:17.850 --> 00:02:19.050
So let's go with that approach.

35
00:02:19.050 --> 00:02:25.020
I'm going to remove the company data property right here and right here where we used to interpolate

36
00:02:25.020 --> 00:02:26.790
the value of the company data property.

37
00:02:26.790 --> 00:02:32.070
I'm just going to hard code Bobo careers and you of course, can write whatever company name you would

38
00:02:32.070 --> 00:02:34.060
like to have for your career site.

39
00:02:34.440 --> 00:02:34.780
All right.

40
00:02:35.070 --> 00:02:40.350
The other thing that we're doing here is we're binding, using V bind to the ref attribute and we no

41
00:02:40.350 --> 00:02:44.220
longer have an attribute on our router link component.

42
00:02:44.220 --> 00:02:49.380
What we do have is a two prop, so let's replace this with the two prop.

43
00:02:49.650 --> 00:02:55.020
And then of course one argument that we can provide to the two prop is a string representing the URL

44
00:02:55.020 --> 00:02:56.070
that we want to go to.

45
00:02:56.370 --> 00:03:01.020
And in this case, again, instead of hard coding the URL to come from data, I'm just going to write

46
00:03:01.020 --> 00:03:02.160
a string in line.

47
00:03:02.160 --> 00:03:06.360
I'm just going to do the literal forward slash, which is the root, root or the home page.

48
00:03:06.840 --> 00:03:11.520
And what that allows us to do is to get rid of the URL property below as well.

49
00:03:11.520 --> 00:03:18.450
So right here we're going to get rid of the URL property that provided the link that would go to Google.

50
00:03:18.660 --> 00:03:21.030
We're just going to do everything in line for now, I think.

51
00:03:21.120 --> 00:03:26.220
I think we can still keep the menu items array that we are using for V4 because I think the syntax is

52
00:03:26.220 --> 00:03:31.350
a little bit cleaner than copying and pasting all of those list items that represent our menu items,

53
00:03:31.560 --> 00:03:33.780
but we might come back to that later time for now.

54
00:03:33.780 --> 00:03:39.360
I think this is okay and we still need is logged in because that is a piece of data that is changing

55
00:03:39.450 --> 00:03:42.600
as the user logs into our site by pressing the action button.

56
00:03:42.840 --> 00:03:43.920
So this feels good to me.

57
00:03:44.340 --> 00:03:45.450
So if I scroll back up.

58
00:03:46.960 --> 00:03:47.640
We have this.

59
00:03:47.650 --> 00:03:50.970
And as far as the class right here, that is totally fine.

60
00:03:50.980 --> 00:03:56.650
We can apply the class attribute to view components as we know, because what Vue does is it takes these

61
00:03:56.650 --> 00:04:00.280
classes and it applies it to the root element inside that component.

62
00:04:00.550 --> 00:04:05.710
So we don't know how the router link component is built, but inside you can imagine some kind of root

63
00:04:05.710 --> 00:04:06.730
element like a div.

64
00:04:06.940 --> 00:04:13.410
And what this does is it just takes these top level classes and it applies it to that root element,

65
00:04:13.420 --> 00:04:14.710
whatever it is, right?

66
00:04:14.710 --> 00:04:19.240
So we are not technically applying the classes to the view component, it just is that visual impression

67
00:04:19.360 --> 00:04:23.410
we are actually applying, applying them to an H2 element under the hood.

68
00:04:23.500 --> 00:04:27.580
We just don't know what that element happens to be because we don't know the exact implementation of

69
00:04:27.580 --> 00:04:28.180
root or link.

70
00:04:28.360 --> 00:04:28.690
All right.

71
00:04:29.020 --> 00:04:30.550
So with that, we can head to our browser.

72
00:04:31.990 --> 00:04:33.580
And let's head to our job.

73
00:04:34.920 --> 00:04:36.390
Slash results page.

74
00:04:36.390 --> 00:04:38.850
In fact, let me refresh, because it looks like my menu disappeared.

75
00:04:38.880 --> 00:04:39.420
There we go.

76
00:04:39.810 --> 00:04:41.460
That might just be a problem from compilation.

77
00:04:41.470 --> 00:04:43.920
So here is my jobs slash results page.

78
00:04:43.920 --> 00:04:47.280
And now you'll notice we have the exact same style right here.

79
00:04:47.520 --> 00:04:50.390
But when I click this, we're not going to force the page refresh.

80
00:04:50.400 --> 00:04:55.740
We're going to use that router link component to simulate going to the slash root, which of course

81
00:04:55.740 --> 00:04:59.510
will trigger the router view component to render something differently.

82
00:04:59.520 --> 00:05:01.560
And that's going to lead us to our home page.

83
00:05:01.830 --> 00:05:03.480
So that works as expected.

84
00:05:03.480 --> 00:05:05.730
We've replaced that hyperlink in our app.

85
00:05:06.030 --> 00:05:13.080
There's one more thing I'd like to show you in this lesson, and it is an alternate form of or an alternate

86
00:05:13.080 --> 00:05:15.990
argument, rather, that we can use for the two prop.

87
00:05:16.290 --> 00:05:17.580
This is one option.

88
00:05:17.760 --> 00:05:23.940
But what we what we can also provide is very similar arguments to what we provided the push method in

89
00:05:23.940 --> 00:05:25.140
the previous lessons.

90
00:05:25.380 --> 00:05:32.130
So you may remember that we can also provide a object to the push method and in that object we can have

91
00:05:32.130 --> 00:05:38.820
a property like name and that name allows us to link to an established route name from our router file.

92
00:05:39.030 --> 00:05:41.040
So if I go to a router index that yes.

93
00:05:41.040 --> 00:05:46.920
As a reminder, we gave all of our routes a name and we called our slash route a route route.

94
00:05:46.920 --> 00:05:48.570
We call that the home route.

95
00:05:48.870 --> 00:05:54.270
So I can provide the name property here and make this equal the home route.

96
00:05:54.420 --> 00:05:58.860
And that allows us to avoid knowing the details about what this actual URL is.

97
00:05:59.010 --> 00:06:02.610
We're just going to let view router figure that out based on our router configuration.

98
00:06:02.910 --> 00:06:08.040
However, the key takeaway if we use this syntax is we're now providing an object, right?

99
00:06:08.190 --> 00:06:14.640
And an object is not a an argument that we can simply provide as a string into the two prop, because

100
00:06:14.640 --> 00:06:19.920
when we provide a regular string to a prop, it's going to think that this is actually a string rather

101
00:06:19.920 --> 00:06:22.020
than a JavaScript object with a name property.

102
00:06:22.200 --> 00:06:25.800
The way we have to enable that dynamism is by using the V bind syntax.

103
00:06:26.040 --> 00:06:32.100
So if we provide this form of argument to the two prop, we do need to bind using the colon syntax in

104
00:06:32.100 --> 00:06:32.460
front of it.

105
00:06:32.460 --> 00:06:35.100
This is equivalent to V bind by the way.

106
00:06:35.280 --> 00:06:36.720
So either that or that.

107
00:06:36.930 --> 00:06:40.710
And if the argument is not a plain string, if it is an object, we have to bind.

108
00:06:40.710 --> 00:06:45.600
And you can immediately see in this code how it recognizes that now we have an object rather than a

109
00:06:45.600 --> 00:06:46.020
string.

110
00:06:46.260 --> 00:06:50.850
And so it shows us the property and the value for that property.

111
00:06:51.060 --> 00:06:57.300
And if I head back to my browser and I head back to Job's results and click on this again, you can

112
00:06:57.300 --> 00:06:58.380
see everything still works.

113
00:06:58.650 --> 00:07:00.390
So you're more than welcome to use either approach.

114
00:07:00.390 --> 00:07:03.930
You can either provide a string or an object here with a configuration setting.

115
00:07:04.050 --> 00:07:09.210
I believe the other property we explored here is Path, which also works, but these are different ways

116
00:07:09.210 --> 00:07:14.490
and different arguments that we can provide to the two prop of the router like component to enable navigation.

117
00:07:14.700 --> 00:07:16.170
That's all there is to cover in this lesson.

118
00:07:16.170 --> 00:07:17.760
So I will see you in the next one.
