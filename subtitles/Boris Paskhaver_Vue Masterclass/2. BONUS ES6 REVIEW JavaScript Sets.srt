1
00:00:00,630 --> 00:00:01,470
Okay.

2
00:00:01,480 --> 00:00:05,580
So in this lesson we're going to introduce JavaScript set objects.

3
00:00:05,790 --> 00:00:10,140
A set is a special data structure that was first introduced in E6.

4
00:00:10,440 --> 00:00:15,120
So if you are comfortable with sets, you can feel free to skip this lesson and in the next one we're

5
00:00:15,120 --> 00:00:17,280
going to apply these concepts to view.

6
00:00:17,550 --> 00:00:22,080
But in this lesson, if you're unfamiliar with sets, you can join me in our Playground Digest file,

7
00:00:22,230 --> 00:00:25,050
and I want to show you how this object works in general.

8
00:00:25,260 --> 00:00:30,930
As a reminder, our playground file is where we simply play around with JavaScript and new ideas outside

9
00:00:30,930 --> 00:00:32,460
of the scope of our project.

10
00:00:32,670 --> 00:00:37,560
All right, so feel free to empty this file in case it has any content in it already.

11
00:00:37,980 --> 00:00:38,310
All right.

12
00:00:38,310 --> 00:00:42,030
So let's talk first about the problems that sets are supposed to solve.

13
00:00:42,360 --> 00:00:47,970
And I want to do that by talking about problems that other data structures in jobs could solve.

14
00:00:48,300 --> 00:00:53,730
So we know that we have arrays in JavaScript, and the problem that arrays solve is keeping things in

15
00:00:53,730 --> 00:00:54,150
order.

16
00:00:54,420 --> 00:00:59,130
The advantage of an array is that it maintains that certain things follow another right.

17
00:00:59,130 --> 00:01:00,540
That's why we have index positions.

18
00:01:00,540 --> 00:01:06,630
That's why we have the concept of order arrays exists that we can keep things in align objects in JavaScript

19
00:01:06,840 --> 00:01:09,930
exists for another reason and that is association.

20
00:01:10,230 --> 00:01:15,540
So the whole idea of having a property and a value is that we are associating two things together.

21
00:01:15,540 --> 00:01:21,270
We're creating a connection between an identifier, a key or a property with the corresponding value.

22
00:01:21,570 --> 00:01:24,420
So those are the two problems that arrays and objects solve.

23
00:01:24,840 --> 00:01:30,630
A set solves a different problem in programming, and that problem is uniqueness.

24
00:01:31,200 --> 00:01:34,350
Neither an array or an object can guarantee uniqueness, right?

25
00:01:34,350 --> 00:01:39,480
An array can store the same value multiple times, and an object can store values that are duplicates

26
00:01:39,480 --> 00:01:39,930
as well.

27
00:01:40,290 --> 00:01:45,720
So we need some kind of object that will allow us to very easily have uniqueness, which means prohibit

28
00:01:45,720 --> 00:01:49,830
duplication, prohibit duplicate elements from being stored within it.

29
00:01:50,250 --> 00:01:51,630
So that is all a set does.

30
00:01:51,630 --> 00:01:56,580
It's a data structure that can store things but maintain that there are no duplicates within it.

31
00:01:57,150 --> 00:01:57,450
All right.

32
00:01:57,660 --> 00:02:02,730
A set should be assumed to be unordered, so you should not assume that you can, you know, keep some

33
00:02:02,730 --> 00:02:06,480
kind of order in line or that you can index into it based on a certain index.

34
00:02:06,630 --> 00:02:10,980
It has no concept of that, like an array, but it does have a concept of uniqueness.

35
00:02:11,220 --> 00:02:17,430
And one other advantage of a set is it's a lot quicker to look up the presence of an item in a set than

36
00:02:17,430 --> 00:02:18,480
it is in an array.

37
00:02:18,660 --> 00:02:23,640
The way that it's coded under the hood because it doesn't have to worry about maintaining order is it's

38
00:02:23,640 --> 00:02:29,340
a lot easier to find whether an element exists in a set than whether it exists in an array.

39
00:02:29,520 --> 00:02:34,020
I don't want to go super deep into the computer science ideas and the data structures and algorithms

40
00:02:34,020 --> 00:02:35,790
ideas on why that is.

41
00:02:35,790 --> 00:02:41,760
But just trust me that it's a lot faster to find whether an element does or does not exist in a set

42
00:02:42,390 --> 00:02:43,290
compared to an array.

43
00:02:43,560 --> 00:02:43,890
All right.

44
00:02:44,190 --> 00:02:47,700
So with that said, let's just show you the basic syntax of a set in JavaScript.

45
00:02:47,700 --> 00:02:50,670
So right here, I'm going to declare a concept called numbers.

46
00:02:51,240 --> 00:02:56,220
And in order to create a set, there's no special syntax like, you know, curly braces for an object

47
00:02:56,220 --> 00:02:57,570
or square brackets for an array.

48
00:02:57,780 --> 00:03:00,000
We have to use the built in constructor function.

49
00:03:00,300 --> 00:03:03,630
So I'm going to use the new keyword and I'm going to create a new set.

50
00:03:03,630 --> 00:03:07,980
So capital S set and then make sure that you provide the parentheses.

51
00:03:07,980 --> 00:03:10,610
This creates a set object from the base.

52
00:03:10,650 --> 00:03:11,850
Good asset class, right?

53
00:03:12,150 --> 00:03:14,730
So we have an empty set object that has nothing in it.

54
00:03:14,970 --> 00:03:18,810
The way we can add elements to a set is by invoking a method called ADD.

55
00:03:19,140 --> 00:03:22,740
So right here I'm going to invoke ADD and I'm going to provide whatever value I want.

56
00:03:22,980 --> 00:03:24,330
So this will be a set of numbers.

57
00:03:24,330 --> 00:03:29,490
So let's start by adding the value five and on the line below I can re invoke the add method and add

58
00:03:29,490 --> 00:03:30,630
another number like ten.

59
00:03:30,960 --> 00:03:36,630
And finally on the line after that I can add another value like 15 and then afterwards I'm going to

60
00:03:36,630 --> 00:03:43,020
console.log numbers so we can see the set in our console and I'm going to run this file using node and

61
00:03:43,020 --> 00:03:46,170
then the file is within the source directory playground docs.

62
00:03:46,770 --> 00:03:47,160
Okay.

63
00:03:47,430 --> 00:03:52,710
So in this output we're going to see set three and that three in parentheses indicates the number of

64
00:03:52,710 --> 00:03:54,600
unique elements in my set.

65
00:03:54,810 --> 00:03:56,640
So my set has three unique elements.

66
00:03:56,790 --> 00:03:57,750
What are they?

67
00:03:57,750 --> 00:04:00,150
We can see that in the curly braces here on the right.

68
00:04:00,150 --> 00:04:01,500
Don't confuse this for an object.

69
00:04:01,500 --> 00:04:05,190
This is just a syntax that Node uses to output the set.

70
00:04:05,430 --> 00:04:08,550
The unique elements in our set are five, ten and 15.

71
00:04:09,030 --> 00:04:13,410
Okay, so what happens when we try to add a duplicate element to our set?

72
00:04:13,650 --> 00:04:16,770
Well, JavaScript is simply not going to add it right.

73
00:04:16,770 --> 00:04:18,270
We're not going to get any kind of error.

74
00:04:18,270 --> 00:04:19,440
We're not going to crash the program.

75
00:04:19,620 --> 00:04:22,470
JavaScript is simply going to say, I already have this value.

76
00:04:22,590 --> 00:04:26,700
My responsibility is to keep the set's elements unique, so I'm not going to add it.

77
00:04:26,940 --> 00:04:31,770
So right here, numbers that add, I'm going to try to add five again and on the line below, I'm going

78
00:04:31,770 --> 00:04:33,060
to try to add 15 again.

79
00:04:33,330 --> 00:04:38,970
And if I console.log, the value of my numbers set afterwards and I rerun this file, you're going to

80
00:04:38,970 --> 00:04:44,910
see we have the exact same set as we did originally, because the whole idea is that a set maintains

81
00:04:44,910 --> 00:04:45,450
uniqueness.

82
00:04:45,450 --> 00:04:48,180
It prohibits any duplicate values from being added.

83
00:04:48,540 --> 00:04:50,760
That doesn't prevent me from adding a new value, right?

84
00:04:50,760 --> 00:04:53,850
I can totally add, for example, a new value like 25.

85
00:04:54,030 --> 00:04:59,370
And if I take a look at this operation afterwards, once again, we're going to see a new set.

86
00:04:59,370 --> 00:05:00,030
And now we have the.

87
00:05:00,060 --> 00:05:00,840
Value 25.

88
00:05:01,050 --> 00:05:06,810
So totally okay to add new values, but JavaScript is going to prohibit duplicate values from being

89
00:05:06,810 --> 00:05:07,170
added.

90
00:05:07,350 --> 00:05:11,430
That is the whole reason why we use a set and it's a really great data structure for maintaining that

91
00:05:11,430 --> 00:05:16,470
and also for looking up the presence of a value within that collection of unique items.

92
00:05:16,590 --> 00:05:16,920
All right.

93
00:05:17,190 --> 00:05:21,570
So with that said, we can move to the very next lesson where we're going to use sex in order to create

94
00:05:21,570 --> 00:05:25,770
a unique collection of the organizations that our jobs belong to.

95
00:05:26,010 --> 00:05:26,670
I'll see you there.
