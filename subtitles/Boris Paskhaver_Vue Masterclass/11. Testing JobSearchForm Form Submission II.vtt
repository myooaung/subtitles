WEBVTT
1
00:00:00.470 --> 00:00:01.240
Okay.

2
00:00:01.240 --> 00:00:05.210
So I am feeling pretty good about our job search form component.

3
00:00:05.230 --> 00:00:08.950
So the next thing that I'd like to do is add a test file for it.

4
00:00:09.400 --> 00:00:16.060
So right here in my project Explorer, I'll look for my tests unit components directory and there we

5
00:00:16.060 --> 00:00:21.670
have all of our feature folders and in job search is where I want to create my test file.

6
00:00:22.060 --> 00:00:27.820
So I'm going to call it job search form after my component and then the dot test dot just.

7
00:00:28.570 --> 00:00:34.090
And what I'm going to do is move this test file to the right so we can have it alongside our implementation.

8
00:00:34.480 --> 00:00:40.630
So we'll follow the usual steps for our tests will begin by importing the mount function that's going

9
00:00:40.630 --> 00:00:47.740
to come from the view test utils package will also import our job search form component that is going

10
00:00:47.740 --> 00:00:51.760
to come from these source directory components, job search.

11
00:00:51.760 --> 00:00:54.760
And then finally job search form is the view component file.

12
00:00:55.150 --> 00:00:59.650
Then I'll begin what they describe, like what are we testing and what are we describing?

13
00:00:59.860 --> 00:01:02.470
We are testing the job search form component.

14
00:01:03.250 --> 00:01:09.130
And what I'll actually do inside my arrow function is add another described block and this will be just

15
00:01:09.130 --> 00:01:12.970
to provide the context under which I'm testing the job search form.

16
00:01:13.330 --> 00:01:19.570
The general rule that I try to follow is if I have an expression that begins with the word, when I

17
00:01:19.570 --> 00:01:27.190
think to myself that I am describing a scenario or a circumstance, and in order to not store too much

18
00:01:27.190 --> 00:01:33.310
information in my IT function call, I'd like to capture that scenario information in its own described.

19
00:01:33.310 --> 00:01:39.460
BLOCK So here, for example, I'll add another describe and I'll say when the user submits the form.

20
00:01:40.830 --> 00:01:45.930
When something is the case, when something is the scenario, that's when I can use my aid function

21
00:01:45.930 --> 00:01:48.370
call to actually declare what should happen.

22
00:01:48.600 --> 00:01:51.330
Because the logic here shouldn't just happen regularly.

23
00:01:51.450 --> 00:01:53.940
It happens in a certain situation.

24
00:01:54.180 --> 00:01:58.950
And that's when I think it's really good to use a describe rather than saying something like It does

25
00:01:58.950 --> 00:02:00.890
this when the user submits form.

26
00:02:00.900 --> 00:02:04.970
I take that when the section and I move it into its own outer described block.

27
00:02:04.980 --> 00:02:06.150
I generally like that approach.

28
00:02:06.150 --> 00:02:08.910
I think it breaks down the test suite in a better fashion.

29
00:02:09.270 --> 00:02:12.930
So what do we really want to test in our job search form component?

30
00:02:13.320 --> 00:02:15.690
Really, the heart of it is this thing right here.

31
00:02:16.320 --> 00:02:22.230
It's the proper indication of the search for jobs method and the interaction with our global view router

32
00:02:22.230 --> 00:02:22.770
object.

33
00:02:23.160 --> 00:02:27.510
So of course the question for you is do we need a real view router in our test?

34
00:02:27.750 --> 00:02:29.970
And as always, I will argue for a unit test.

35
00:02:30.690 --> 00:02:31.470
Not really.

36
00:02:31.470 --> 00:02:34.320
We just need an object that can play the role of a router.

37
00:02:34.620 --> 00:02:36.270
So what does a router really need?

38
00:02:36.510 --> 00:02:38.250
Well, it just needs a push method.

39
00:02:38.280 --> 00:02:43.860
As long as we have any object that has a push method, we can simulate a real router and we can tell

40
00:02:43.860 --> 00:02:51.420
our test to replace or mock out the reference to this dot router with a complementary object that we

41
00:02:51.420 --> 00:02:53.460
put there for its right.

42
00:02:53.880 --> 00:02:58.470
Furthermore, the way I'd like to interact with this component in our test would will be just as the

43
00:02:58.470 --> 00:03:00.870
user will interact with the component in our browser.

44
00:03:01.140 --> 00:03:03.030
So what I'd like to do is mount the component.

45
00:03:03.360 --> 00:03:09.870
Then I want to fill out both input fields, the role input field and then the location input field.

46
00:03:10.080 --> 00:03:14.820
And then I want to simulate the clicking of the action button, which should submit the form.

47
00:03:15.090 --> 00:03:21.720
And then afterwards I want to test that my component properly issued the right method call to my router

48
00:03:22.500 --> 00:03:27.120
property and provided it with the right arguments right here for name and query.

49
00:03:27.240 --> 00:03:30.600
And that will capture the heart of the component as the user interacts with it.

50
00:03:30.600 --> 00:03:34.530
So there's a lot of steps to do in this test, but hopefully it makes logical sense.

51
00:03:34.530 --> 00:03:39.300
It's just interacting with it in the exact same order and way that the user will in our browser.

52
00:03:39.720 --> 00:03:41.760
So right here I'll write for my description.

53
00:03:42.060 --> 00:03:49.020
It directs user to job results page with user's search parameters.

54
00:03:50.890 --> 00:03:54.490
That's really the responsibility of our job search form component.

55
00:03:54.850 --> 00:04:01.660
So let's begin as always will have a wrapper constant and we will mount our job search form component.

56
00:04:02.560 --> 00:04:03.610
That's a good place to start.

57
00:04:03.910 --> 00:04:08.450
And by the way, we do have a font awesome icon being used right here.

58
00:04:08.470 --> 00:04:13.690
So I do want to immediately take care of stubbing it out so it doesn't cause any problems as a global

59
00:04:13.690 --> 00:04:14.890
component in our tests.

60
00:04:15.160 --> 00:04:20.290
So immediately I will set up my second argument the options object.

61
00:04:20.290 --> 00:04:23.080
And in here we're going to have our global key.

62
00:04:23.560 --> 00:04:27.400
And in our global key, we're going to have an object with a stubs property.

63
00:04:27.700 --> 00:04:33.970
And in that object, sorry for the little popups in that stub stubs object, we provide the properties

64
00:04:33.970 --> 00:04:36.970
representing the child components that we would like to stub out.

65
00:04:37.240 --> 00:04:42.940
So in this case, I'd like to stub out my font awesome icon component and remember to just replace it

66
00:04:42.940 --> 00:04:45.760
with the default stub that Vue test utils gives us.

67
00:04:45.940 --> 00:04:50.860
We can just provide a true argument here because we don't really care what we started out with, we

68
00:04:50.860 --> 00:04:51.730
just want to replace it.

69
00:04:51.730 --> 00:04:56.800
So Vue doesn't get confused about the the real font awesome icon component being used.

70
00:04:57.400 --> 00:04:58.670
Okay, so what is next for us?

71
00:04:58.690 --> 00:05:05.170
Well, let's try to find these sample inputs, the one with the row and the one with the location and

72
00:05:05.170 --> 00:05:06.500
populate them with values.

73
00:05:06.520 --> 00:05:12.010
So right here, I'm going to say I'm going to find my role in putting a sign into a constant and I'll

74
00:05:12.010 --> 00:05:16.840
use my find method under wrapper and I'll go back to my data test attribute approach.

75
00:05:16.840 --> 00:05:22.330
So I'm going to tell my view test utils to find some element or some component something in my template

76
00:05:22.330 --> 00:05:24.280
that has the right data test attribute.

77
00:05:24.670 --> 00:05:30.250
So right here, I will look for a dot test of, let's say, role input.

78
00:05:30.970 --> 00:05:31.390
All right.

79
00:05:31.630 --> 00:05:35.770
And what do I want to do with that input field or whatever it is?

80
00:05:35.770 --> 00:05:38.020
I want to set a value in it.

81
00:05:38.020 --> 00:05:39.640
I want to simulate a user type.

82
00:05:39.880 --> 00:05:43.830
The way I can do that is by calling a method called set value.

83
00:05:43.840 --> 00:05:48.460
We did this a little bit earlier in the course and then I can provide it the value that I want to populate

84
00:05:48.460 --> 00:05:49.450
in that input field.

85
00:05:49.630 --> 00:05:56.680
And this will work with our text input, even though it isn't a vanilla add browser input component

86
00:05:56.890 --> 00:05:59.320
because at the end of the day we are doing a full amount.

87
00:05:59.470 --> 00:06:04.390
So this will be an input under the hood when we render the full text input component.

88
00:06:04.600 --> 00:06:08.500
And because we set up the V model association, this will actually work just fine.

89
00:06:08.770 --> 00:06:13.510
So in short, I'm eventually going to add the data test right here, but we are going to find this component

90
00:06:13.510 --> 00:06:15.100
and we are going to write in the value to it.

91
00:06:15.430 --> 00:06:19.960
So for a sample role, let's say we search for a role of you developer.

92
00:06:21.190 --> 00:06:25.330
The next thing I'm going to do is repeat this complete logic for our location inputs.

93
00:06:25.330 --> 00:06:30.220
So we're going to find our location input wrapper, dot find.

94
00:06:30.520 --> 00:06:35.500
We'll also look for a data test attribute, but this one, of course, will have a different value.

95
00:06:35.500 --> 00:06:38.350
Let's say it is going to be location, input.

96
00:06:38.860 --> 00:06:43.930
And once I find that input, I similarly want to take it and I want to set some kind of value in it,

97
00:06:43.930 --> 00:06:45.400
some kind of sample location.

98
00:06:45.670 --> 00:06:47.980
So let's do a string of Dallas.

99
00:06:48.990 --> 00:06:49.320
Okay.

100
00:06:49.320 --> 00:06:51.650
So now we have populated our two input fields.

101
00:06:51.660 --> 00:06:56.520
The next thing I want to do is to submit the form, and I can assume that there's going to be some kind

102
00:06:56.520 --> 00:06:57.570
of submission button.

103
00:06:57.990 --> 00:07:01.620
So I can say I want to have a constant called submit button.

104
00:07:02.130 --> 00:07:07.950
And once again, I want to find something in my template that's going to have a date, a test attribute,

105
00:07:08.160 --> 00:07:11.790
and let's make this one equal to form submit button.

106
00:07:12.510 --> 00:07:14.250
Again, these values are arbitrary.

107
00:07:14.250 --> 00:07:18.420
They're kind of up to us, but they should generally describe what it is that we're searching for in

108
00:07:18.420 --> 00:07:21.600
a way that is not specific to the implementation.

109
00:07:22.140 --> 00:07:26.520
Okay, then then what I want to do with this button, I don't want to set a value on it because it is

110
00:07:26.520 --> 00:07:27.090
not an input.

111
00:07:27.090 --> 00:07:29.040
I want to stimulate a click on it.

112
00:07:29.280 --> 00:07:36.000
Now, you may recall the way we do this is we take that submit button and then we can trigger a click

113
00:07:36.000 --> 00:07:36.840
event on it.

114
00:07:36.960 --> 00:07:42.450
It doesn't necessarily have to be a button, it just has to be some kind of thing or element in our

115
00:07:42.450 --> 00:07:49.020
template that has a on click directive or Avon Directive with the Click event.

116
00:07:49.170 --> 00:07:51.900
So that view knows to simulate that thing.

117
00:07:52.110 --> 00:07:57.810
So in this case right here, we do have an action button and we will be able to simulate a click on

118
00:07:57.810 --> 00:07:59.790
it once we add the data test attribute on it.

119
00:07:59.790 --> 00:08:00.240
Of course.

120
00:08:00.780 --> 00:08:01.110
Okay.

121
00:08:01.320 --> 00:08:03.450
So a couple of things worth knowing here.

122
00:08:03.690 --> 00:08:09.720
The first is these methods right here, set value and trigger are actually asynchronous, so we will

123
00:08:09.720 --> 00:08:12.900
need to wait them using the async await syntax.

124
00:08:13.140 --> 00:08:18.240
Now if you have a good memory, you may recall that earlier on when we use the set value method, we

125
00:08:18.240 --> 00:08:20.490
use that in our text input component.

126
00:08:20.760 --> 00:08:21.510
Right here.

127
00:08:21.510 --> 00:08:24.510
We were able to invoke set value and not make it asynchronous.

128
00:08:24.720 --> 00:08:31.620
And the reason here is because we weren't particularly concerned with the component taking time to react

129
00:08:31.620 --> 00:08:36.690
to all these changes and affect its internal data and effect the template here.

130
00:08:36.690 --> 00:08:42.540
When we invoke set value, we just want it to interact with the emitted object and double check that

131
00:08:42.540 --> 00:08:46.020
what we sent to our input was emitted here.

132
00:08:46.020 --> 00:08:50.880
When we actually have to do is wait until the component is fully done re rendering which means populating

133
00:08:50.880 --> 00:08:55.470
its own data and re rendering that template to show the latest value that we gave it.

134
00:08:55.470 --> 00:08:56.850
A view developer Dallas.

135
00:08:56.850 --> 00:08:57.330
ET cetera.

136
00:08:57.570 --> 00:09:03.780
So in short, we do have to await all of these three operations in order to be able to use the async

137
00:09:03.780 --> 00:09:08.850
await syntax, we have to make our test function right here, asynchronous start right here.

138
00:09:08.850 --> 00:09:10.650
I will add the async keyword.

139
00:09:10.890 --> 00:09:17.310
And before these set value methods and before the trigger method, I will put the await keyword.

140
00:09:17.610 --> 00:09:22.470
And the way you can always figure this out is you can Google for the set value and trigger methods in

141
00:09:22.470 --> 00:09:27.450
the view test utils and you will see an example on the page that will always use the async await keyword

142
00:09:27.450 --> 00:09:32.430
and that can be your that can be how you can find out in case the test is failing for some reason and

143
00:09:32.430 --> 00:09:36.180
you forget that you can always Google that and find out because sometimes I forget myself.

144
00:09:36.810 --> 00:09:42.870
Okay, so the next thing that I'd like to do is to test the interaction with my router property.

145
00:09:43.020 --> 00:09:46.050
So how can we simulate the component having a router property?

146
00:09:46.380 --> 00:09:54.150
Well, earlier on we were able to mark out the root property by using the Mark's setup on our global

147
00:09:54.150 --> 00:09:55.440
test object right here.

148
00:09:55.740 --> 00:10:00.570
Well, it turns out we can do the exact same thing with whatever global property or whatever global

149
00:10:00.570 --> 00:10:01.710
injection we prefer.

150
00:10:02.100 --> 00:10:08.640
So what we can say here is whenever the component references this dot router, we can tell it any object

151
00:10:08.640 --> 00:10:12.630
that we want to simulate the role of that actual real world router.

152
00:10:12.780 --> 00:10:15.030
It doesn't have to be the real view router object.

153
00:10:15.180 --> 00:10:17.580
It just has to be something close enough that can play the role.

154
00:10:17.820 --> 00:10:20.130
Now there has to be some similarity, right?

155
00:10:20.310 --> 00:10:25.530
So for example, in our component, if we are invoking the push method, we do need an object that will

156
00:10:25.530 --> 00:10:28.110
have a push method, otherwise the code will still break.

157
00:10:28.410 --> 00:10:31.560
But we do not need an actual router object.

158
00:10:31.560 --> 00:10:34.350
We just need something that can play the role that is called a mark.

159
00:10:34.620 --> 00:10:40.050
So right here I can create an object and really what I'm going to do instead is create it in a constant

160
00:10:40.050 --> 00:10:42.990
above just so I can break up this code a little bit.

161
00:10:43.320 --> 00:10:49.560
So right here I'm going to create that const router and that is just going to be a plain JavaScript

162
00:10:49.560 --> 00:10:52.110
object and it's going to have a push method.

163
00:10:52.440 --> 00:10:53.970
The question is, what do I sign?

164
00:10:54.000 --> 00:10:54.630
What do I sign?

165
00:10:54.630 --> 00:10:57.240
Push two, it has to be some kind of invoke able method.

166
00:10:57.420 --> 00:11:02.910
And furthermore, we need to be able to test the interaction of our component with this push method.

167
00:11:03.150 --> 00:11:09.210
Well, remember, whenever we need a function that can track how many times it's been invoked and with

168
00:11:09.210 --> 00:11:13.680
what arguments it's been invoked, we can always turn to just mock function.

169
00:11:13.950 --> 00:11:20.160
Remember this syntax earlier in the course we can ask just to generate a mock function for us like so.

170
00:11:20.310 --> 00:11:25.740
And this function will be able to track how many times it's been called, what arguments it's been called

171
00:11:25.740 --> 00:11:31.860
with, etc. and thus in our test will be able to assert that once we submit the form, this function

172
00:11:31.950 --> 00:11:35.820
will have been invoked with the expected properties right here.

173
00:11:35.850 --> 00:11:37.140
So let me show you how this is going to work.

174
00:11:37.140 --> 00:11:43.950
I'm going to assign this to a constant called push, so push as a mock function, and then I'm going

175
00:11:43.950 --> 00:11:48.510
to make our router be a plain JavaScript object with a push property the course.

176
00:11:48.590 --> 00:11:52.640
Bonds to this function or in more technical terms to this method.

177
00:11:53.270 --> 00:11:59.120
So we have basically swapped this thing right here with basically that.

178
00:11:59.240 --> 00:12:01.040
That's exactly what our tests are doing.

179
00:12:02.000 --> 00:12:02.420
All right.

180
00:12:02.720 --> 00:12:10.790
So after we have completed the clicking of the submit button and we have waited for everything to promulgate

181
00:12:10.790 --> 00:12:17.360
throughout the the component, at that point, we can reach back out to our push function and we can

182
00:12:17.360 --> 00:12:19.580
assert that it has been properly called.

183
00:12:19.940 --> 00:12:24.200
So you may recall that we can pass a mock function into the expected function.

184
00:12:24.200 --> 00:12:29.750
So I expect my push mock function to have been called with.

185
00:12:30.050 --> 00:12:32.360
You may recall this assertion earlier in the course.

186
00:12:32.360 --> 00:12:36.350
This is going to confirm for us that this method has been invoked.

187
00:12:36.620 --> 00:12:42.530
And then what we provide here inside this matcher is what argument we expect push to have been called

188
00:12:42.530 --> 00:12:44.090
with, to have been invoked with.

189
00:12:44.480 --> 00:12:47.480
So we expect it to have been invoked with an object.

190
00:12:47.630 --> 00:12:54.410
And that object, of course, is going to have our name of job results matching what we see on the left

191
00:12:54.410 --> 00:12:55.010
hand side there.

192
00:12:55.190 --> 00:12:57.620
And then furthermore, I think I have a little typo here.

193
00:12:57.620 --> 00:12:58.100
There we go.

194
00:12:58.370 --> 00:13:03.710
Furthermore, we expect that query object to be generated and that query object should have role and

195
00:13:03.710 --> 00:13:04.790
location properties.

196
00:13:05.150 --> 00:13:10.940
So our role property should be view developer if everything worked out successfully.

197
00:13:10.940 --> 00:13:18.920
So if we successfully populated the role property based on the value of the real input, it should be

198
00:13:18.920 --> 00:13:21.350
view developer, which is just what we entered right here.

199
00:13:21.350 --> 00:13:27.530
So this should be V developer and then the location property on my query object should be this thing

200
00:13:27.530 --> 00:13:28.850
right here, which is Dallas.

201
00:13:30.670 --> 00:13:35.740
And like that we are able to test our components, interaction with our view router without actually

202
00:13:35.740 --> 00:13:41.170
involving a view router and by walking through the component in a way that a typical user will interact

203
00:13:41.170 --> 00:13:42.010
with it as well.

204
00:13:42.520 --> 00:13:42.880
All right.

205
00:13:42.880 --> 00:13:44.320
So I am happy with this test.

206
00:13:44.320 --> 00:13:46.360
Let's see it fail and then let's try to fix it.

207
00:13:46.360 --> 00:13:53.830
So right here, I'm going to open up a terminal and I'm going to run just in watch mode with NPM, run,

208
00:13:53.830 --> 00:13:55.060
test, colon watch.

209
00:13:55.600 --> 00:14:01.250
And the errors that I expect to see are going to be related to being unable to find the data test at

210
00:14:01.250 --> 00:14:01.350
two.

211
00:14:01.360 --> 00:14:03.910
It's right here so we can start by fixing those issues.

212
00:14:03.910 --> 00:14:09.370
So right here we can see it's unable to call set value on an empty wrapper.

213
00:14:09.580 --> 00:14:15.310
That means that raw input is not storing a valid DOM element because of course the test is not able

214
00:14:15.310 --> 00:14:20.050
to find any element in our job search form template with this data test attribute.

215
00:14:20.320 --> 00:14:26.020
So of course we can scroll up and we can head to our first text input component right here where we

216
00:14:26.020 --> 00:14:26.680
enter the role.

217
00:14:26.890 --> 00:14:31.570
And all we have to do is provide our data test attribute and make sure it's equal to the exact value

218
00:14:31.570 --> 00:14:34.060
we're looking for in our test, which is role input.

219
00:14:34.960 --> 00:14:35.680
Save that.

220
00:14:36.520 --> 00:14:38.080
Let's see what the next error is.

221
00:14:38.080 --> 00:14:39.190
And things are looking good.

222
00:14:39.190 --> 00:14:44.050
We are able to proceed through our role input code right here and the next error is the exact same error

223
00:14:44.050 --> 00:14:45.100
on the allocation input.

224
00:14:45.340 --> 00:14:51.370
That gives me confidence that we were successfully able to populate role input with that text of view

225
00:14:51.370 --> 00:14:51.880
developer.

226
00:14:51.880 --> 00:14:55.840
So we are successfully interacting with our text input child component.

227
00:14:56.170 --> 00:15:00.880
So the next thing I'm going to do is go to my next text input and give it the expected data test attribute

228
00:15:01.090 --> 00:15:02.290
that the test is looking for.

229
00:15:02.650 --> 00:15:07.150
So this time around, our data test attribute is going to be equal to this thing right here, location,

230
00:15:07.150 --> 00:15:07.540
input.

231
00:15:08.710 --> 00:15:11.140
That's what we want the test to look for in our template.

232
00:15:11.530 --> 00:15:14.860
That should bring us to our next error, hopefully, and indeed we do.

233
00:15:14.860 --> 00:15:16.420
Once again, we have the same error.

234
00:15:16.420 --> 00:15:21.460
But moving on to the next part of our test, the test is now not able to find a submit button.

235
00:15:21.670 --> 00:15:26.050
In other words, it's not able to find any element with a data test of form submit button.

236
00:15:26.320 --> 00:15:31.210
So we can go to our action button component right here and add that data test attribute and make it

237
00:15:31.210 --> 00:15:34.030
equal to form submit button with those dashes.

238
00:15:34.390 --> 00:15:38.020
Save this and we're actually going to get another error.

239
00:15:38.200 --> 00:15:38.590
All right.

240
00:15:38.590 --> 00:15:41.740
So we are getting this error right here, and that is totally fine.

241
00:15:41.920 --> 00:15:46.600
We can see here that we are expecting to get the invocation with that argument.

242
00:15:46.810 --> 00:15:50.110
But instead the test is telling us that push has never been invoked.

243
00:15:50.110 --> 00:15:55.990
It says number of calls, zero, which means we have never invoked the push function, which means for

244
00:15:55.990 --> 00:16:01.030
some reason this code right here is not successfully running when we submit the form.

245
00:16:01.240 --> 00:16:05.560
So we're going to see how we can fix this issue with a little bit of Googling in the very next lesson.
