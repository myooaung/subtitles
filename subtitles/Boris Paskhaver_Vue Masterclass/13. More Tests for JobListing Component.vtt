WEBVTT
1
00:00:00.400 --> 00:00:06.460
All right, so let's add some more tests and see if they work well with our factory function architecture.

2
00:00:06.730 --> 00:00:10.740
So, so far we've tested for the title and the organization of the job.

3
00:00:10.930 --> 00:00:17.020
And the other two things I'd like to test is the locations right here as well as the job qualifications.

4
00:00:17.350 --> 00:00:22.570
So let's see if we can write a new test and not have to add any additional code up here in order to

5
00:00:22.570 --> 00:00:23.710
get the test to work.

6
00:00:23.980 --> 00:00:25.960
I think you're going to be pleasantly surprised.

7
00:00:26.230 --> 00:00:34.720
So right here, down below, I want to say it renders job locations and I can pretend as if I'm creating

8
00:00:34.720 --> 00:00:35.950
a new job object.

9
00:00:35.950 --> 00:00:42.370
So job props and I'm going to invoke that create job props method above and I'm going to assume that

10
00:00:42.370 --> 00:00:44.080
it's going to take care of some details.

11
00:00:44.080 --> 00:00:47.620
I really don't care which ones because they're kind of above the test.

12
00:00:47.860 --> 00:00:52.900
And the reason I really don't care is, is because right here in line, I can provide the properties

13
00:00:52.900 --> 00:00:55.180
that I do care about for the purposes of this test.

14
00:00:55.420 --> 00:00:59.230
So I do know that I'm going to need to have locations to iterate over right here.

15
00:00:59.470 --> 00:01:03.070
So I'll provide a location's property and set it equal to an array.

16
00:01:03.400 --> 00:01:05.350
Let's say it's going to be an array of two strings.

17
00:01:05.350 --> 00:01:10.240
I'll just provide Orlando and Jacksonville to random cities.

18
00:01:10.660 --> 00:01:19.420
Then below there I can mount my job listing component and I can invoke my create config function pass

19
00:01:19.420 --> 00:01:26.500
in my job props from the line above and I can follow the exact same protocol I did above by invoking

20
00:01:26.500 --> 00:01:29.380
the text method and double checking that it has some piece of text.

21
00:01:29.650 --> 00:01:32.920
In this case, I am going to do two assertions one for each string.

22
00:01:33.100 --> 00:01:37.030
I think it's okay to have two assertions because they're fundamentally testing the same thing.

23
00:01:37.360 --> 00:01:44.260
So right here, expect rapper act text invoke that method and somewhere in that bunch of text I expect

24
00:01:44.260 --> 00:01:48.280
to see the string Orlando and I'm going to copy this assertion down below.

25
00:01:48.430 --> 00:01:51.190
And I also expect to see the string Jacksonville.

26
00:01:52.990 --> 00:01:58.570
So notice without editing any of the code above this test is going to pass and that's what's great.

27
00:01:58.750 --> 00:02:03.850
We built our factory functions in such a way that they support the old code as well as the new code.

28
00:02:04.090 --> 00:02:09.400
The reason why it works is because we're adding this location's property, and even though locations

29
00:02:09.400 --> 00:02:14.170
doesn't exist up here, we are just structuring whatever we pass in from the tests as a job.

30
00:02:14.170 --> 00:02:14.590
Props.

31
00:02:14.830 --> 00:02:20.320
So JavaScript is adding a new property of locations here because we provided it right here.

32
00:02:20.500 --> 00:02:23.050
So each test can provide exactly what it needs to work.

33
00:02:23.200 --> 00:02:29.020
And it's kind of a good sign that our code is flexible and not failing whenever we try to add a new

34
00:02:29.020 --> 00:02:30.880
kind of test or new kind of properties.

35
00:02:31.210 --> 00:02:36.340
With that said, if we want to add a location's array here, just so that other tests have access to

36
00:02:36.460 --> 00:02:39.970
some array that they can iterate over for this ally, we certainly can.

37
00:02:39.970 --> 00:02:42.190
So right here we can provide locations.

38
00:02:42.190 --> 00:02:47.050
And let's say it's going to be an array of one city, let's say something like Indianapolis.

39
00:02:48.640 --> 00:02:53.710
And that way, if some other test doesn't care about locations but wants an array that it can iterate

40
00:02:53.710 --> 00:02:56.350
over to have a component that is closer to reality.

41
00:02:56.470 --> 00:02:57.400
Well, now it does.

42
00:02:57.550 --> 00:03:01.810
And for the tests that actually care about that property and what it represents, well, then we'll

43
00:03:01.810 --> 00:03:02.170
pass.

44
00:03:02.170 --> 00:03:05.260
And the owner has the own custom data that we need for that test.

45
00:03:05.440 --> 00:03:06.970
So that's why I really like this approach.

46
00:03:07.090 --> 00:03:11.830
And the test itself is pretty short for lines and communicates exactly what it's testing and how it's

47
00:03:11.830 --> 00:03:16.060
testing it and how all of these parts influence the actual implementation.

48
00:03:16.420 --> 00:03:16.720
All right.

49
00:03:16.720 --> 00:03:17.980
So let's do one more test here.

50
00:03:17.980 --> 00:03:21.670
We're going to say it renders job qualifications.

51
00:03:23.410 --> 00:03:26.290
For the most part, we can copy most of what we have above, as always.

52
00:03:26.290 --> 00:03:27.760
So cons job props.

53
00:03:28.090 --> 00:03:33.160
We're going to create job props and the property that we care about on the job object this time is going

54
00:03:33.160 --> 00:03:35.140
to be minimum qualifications.

55
00:03:35.140 --> 00:03:40.450
I'm going to copy it from right here, minimum qualifications and that is going to be an array.

56
00:03:41.050 --> 00:03:44.290
And let's just provide two sample strings code and develop.

57
00:03:45.750 --> 00:03:48.180
And once again, I'm going to copy this line.

58
00:03:48.180 --> 00:03:54.750
So we're going to mount our job listing component, passing the create config and or passing the job

59
00:03:54.750 --> 00:03:56.850
procs props to the create config function.

60
00:03:57.150 --> 00:04:03.870
Let me copy these two assertions from above and we can just change the text here to code as well as

61
00:04:04.890 --> 00:04:11.400
develop save those files, see if if it works and it does for now.

62
00:04:11.400 --> 00:04:16.500
And what I can do is scroll up and once again, just in case I want to have a complete job object here

63
00:04:16.500 --> 00:04:22.680
as a default return value, I can add that minimum qualifications array here and let's just do some

64
00:04:22.680 --> 00:04:24.760
string here like succeed again.

65
00:04:24.760 --> 00:04:25.500
It really doesn't matter.

66
00:04:25.500 --> 00:04:29.820
It's kind of a fallback object that we can overwrite any properties of in our tests.

67
00:04:29.820 --> 00:04:31.860
But I really like what we have here.

68
00:04:31.860 --> 00:04:37.710
I think we have covered a lot of the functionality of the component, primarily based on the job object

69
00:04:37.710 --> 00:04:39.720
that is flowing in and all the details it provides.

70
00:04:39.900 --> 00:04:44.730
And we've done all of this, by the way, of course, without actually having to implement Vue router

71
00:04:45.420 --> 00:04:52.440
or any of those complexities, we're just passing us or making HDP requests either, right?

72
00:04:52.530 --> 00:04:57.650
We just pass in a sample object or a section of an object that we care about, and we just validate

73
00:04:57.820 --> 00:05:00.570
that the component does what it's supposed to do with that data.

74
00:05:00.930 --> 00:05:02.280
That's all there is to cover in this lesson.

75
00:05:02.280 --> 00:05:03.750
So I will see you in the next one.
