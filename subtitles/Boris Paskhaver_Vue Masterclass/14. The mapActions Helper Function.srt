1
00:00:00,610 --> 00:00:01,420
Okay.

2
00:00:01,420 --> 00:00:07,810
So in this lesson I'd like to introduce another helper function from the View Library and it is called

3
00:00:07,810 --> 00:00:09,130
map actions.

4
00:00:09,430 --> 00:00:12,370
So you may have noticed there is this trend of helper functions.

5
00:00:12,380 --> 00:00:18,580
They all begin with the word map and then they help us do something with translating the view store,

6
00:00:18,580 --> 00:00:24,730
whether it be the state, the mutations, etc. to app properties on our component.

7
00:00:24,730 --> 00:00:24,970
Right.

8
00:00:25,180 --> 00:00:29,380
So earlier on we explored map state and map mutations.

9
00:00:29,410 --> 00:00:32,200
Let's just do a quick review of what those to do for us here.

10
00:00:32,200 --> 00:00:34,420
In this component, we can see we're using map state.

11
00:00:34,600 --> 00:00:42,100
What that does is it maps or in other words, connects the view store state to local properties on our

12
00:00:42,100 --> 00:00:45,760
job listings component local computed properties to be more specific.

13
00:00:46,030 --> 00:00:53,050
So when we do this code, we're letting view X help us by defining a this dot jobs property immediately

14
00:00:53,050 --> 00:00:56,350
on job listings so we don't have the manually defined a method to do that.

15
00:00:56,740 --> 00:00:59,110
Similarly, what does map mutations help us do?

16
00:00:59,230 --> 00:01:02,800
It helps us connect existing mutations to a component.

17
00:01:02,800 --> 00:01:07,420
Let me just open up our actual store files so we remember, right?

18
00:01:07,420 --> 00:01:09,490
So Map State connects these things right here.

19
00:01:09,700 --> 00:01:16,120
If we were to use map mutations that allows us to have automatic methods in our component that basically

20
00:01:16,120 --> 00:01:17,590
will run mutations for us.

21
00:01:17,620 --> 00:01:22,690
So if we use map mutations and we for example, provide the log in user constant, we're going to have

22
00:01:22,690 --> 00:01:28,570
a method on a component called this, that log in user that's going to run this mutation for us.

23
00:01:28,810 --> 00:01:34,840
Right now, when it comes to actions, we have a single action called fetch jobs and we are dispatching

24
00:01:34,960 --> 00:01:37,000
that action in our mountain lifecycle.

25
00:01:37,060 --> 00:01:41,350
But as you might guess, this is a very common operation in view.

26
00:01:41,620 --> 00:01:47,170
We will always call the dispatch method with the name of some kind of action that we want to run.

27
00:01:47,470 --> 00:01:53,050
So wouldn't it be really convenient if we had a method on our component called fetch jobs?

28
00:01:53,200 --> 00:02:00,130
And that method would know that it should simply call the dispatch method on our store and pass in this

29
00:02:00,130 --> 00:02:01,570
string argument of fetch jobs.

30
00:02:01,870 --> 00:02:07,450
Well, as it turns out, View provides us with a function called map actions that does the exact same

31
00:02:07,450 --> 00:02:07,780
thing.

32
00:02:08,050 --> 00:02:13,240
The reason it's called map actions is it because it maps or connects view store actions.

33
00:02:13,240 --> 00:02:16,990
These things right here two methods on our component.

34
00:02:17,500 --> 00:02:23,320
So we're simply translating something from our view store to our component wherever we use them.

35
00:02:23,320 --> 00:02:23,530
Right.

36
00:02:23,770 --> 00:02:27,640
Map State connects this stuff to our component as computed properties.

37
00:02:28,060 --> 00:02:34,450
Map mutations connects these methods to component methods and map actions connects these methods to

38
00:02:34,450 --> 00:02:35,530
our component methods.

39
00:02:35,950 --> 00:02:41,020
So let me show you how this is going to work and scroll up and I'm going to import map actions.

40
00:02:41,020 --> 00:02:45,340
It's also going to come as a named export from the top level of view X.

41
00:02:45,820 --> 00:02:48,460
And right here, let me show you this code side by side.

42
00:02:48,460 --> 00:02:50,470
So what I'm going to do is I'm going to come at this out.

43
00:02:51,520 --> 00:02:56,560
What I'm going to do below is I'm going to define my methods object.

44
00:02:56,560 --> 00:02:58,090
This is regular view syntax.

45
00:02:58,090 --> 00:03:02,740
Here is where we can define our component methods and here I'm going to invoke map actions.

46
00:03:03,220 --> 00:03:09,580
And just like map state and map mutations, this function returns an object with properties and I want

47
00:03:09,580 --> 00:03:11,440
to make sure ID structure those properties.

48
00:03:11,620 --> 00:03:16,360
So what this object returns is going to be a bunch of methods and I'm going to make those top level

49
00:03:16,360 --> 00:03:17,590
methods in my methods.

50
00:03:17,590 --> 00:03:19,840
Object for the job listings component.

51
00:03:20,710 --> 00:03:27,700
What I provide to map actions is an array of the actions that I want to make available to the job listings

52
00:03:27,700 --> 00:03:28,150
component.

53
00:03:28,300 --> 00:03:31,720
It's the exact same API as we saw earlier from Maps State.

54
00:03:31,720 --> 00:03:34,000
Here's an example of Map State with jobs.

55
00:03:34,750 --> 00:03:38,110
Here's we're going to do map actions, an array of the available actions.

56
00:03:38,290 --> 00:03:44,680
We currently only have one action represented by the fetch job's name or constant, which we already

57
00:03:44,680 --> 00:03:46,330
have imported into this file.

58
00:03:46,540 --> 00:03:49,030
So I'm simply going to provide fetch jobs here.

59
00:03:50,170 --> 00:03:50,560
Okay.

60
00:03:50,950 --> 00:03:52,210
So I know this is confusing.

61
00:03:52,210 --> 00:03:54,070
So let me reiterate what this is doing.

62
00:03:54,250 --> 00:04:01,990
What this is doing is creating an automatic method on our component called this dot fetch jobs.

63
00:04:02,230 --> 00:04:02,530
Right?

64
00:04:02,680 --> 00:04:07,810
And if I provided an additional argument here like A or B, assuming we had those actions, we would

65
00:04:07,810 --> 00:04:14,350
then have similar methods on our job listings component of this dot A and this that B, so this creates

66
00:04:14,350 --> 00:04:18,340
an automatic fetch jobs method on my job listings component.

67
00:04:18,760 --> 00:04:21,190
And what does that method do?

68
00:04:21,310 --> 00:04:24,460
It does exactly what we're doing here on line 73 for us.

69
00:04:24,550 --> 00:04:29,890
Behind the scenes, what we're telling view is, Hey, we're going to need a fetch jobs method.

70
00:04:29,890 --> 00:04:34,120
It's going to be an action, which means it's going to be some message you dispatched to the store and

71
00:04:34,120 --> 00:04:36,190
it's going to have this name so view.

72
00:04:36,190 --> 00:04:38,860
And you know, okay, you're giving me an action.

73
00:04:38,860 --> 00:04:41,440
The only thing I can do with that is talk to The View Store.

74
00:04:41,620 --> 00:04:43,810
How do I dispatch an action to the bookstore?

75
00:04:43,930 --> 00:04:46,420
I need to call the Dispatch method on my store object.

76
00:04:46,630 --> 00:04:53,290
This is basically a syntactic sugar or in other words, a simpler and cleaner way to doing this view

77
00:04:53,290 --> 00:04:59,890
X will create a method on job listings called this that fetch jobs which will dispatch the fetch jobs.

78
00:05:00,020 --> 00:05:01,760
Action to our view store.

79
00:05:02,090 --> 00:05:06,110
So just because we've defined that method doesn't mean we're actually doing anything with it.

80
00:05:06,230 --> 00:05:08,840
We need to invoke it in our mountain lifecycle.

81
00:05:08,840 --> 00:05:09,140
Look.

82
00:05:09,380 --> 00:05:16,400
So here, instead of dispatching the fetch jobs action directly, we're going to do it indirectly by

83
00:05:16,400 --> 00:05:22,160
simply invoking my fetch jobs method, which is automatically defined for me on the component.

84
00:05:22,250 --> 00:05:27,260
With this code right here, I would not have this method if this line did not exist.

85
00:05:27,470 --> 00:05:32,270
Now we have a fetch jobs method that will dispatch the effects jobs action to the store.

86
00:05:32,660 --> 00:05:32,960
All right.

87
00:05:33,080 --> 00:05:34,160
You have to be careful here.

88
00:05:34,160 --> 00:05:37,850
You have to make sure here you do not provide any state or any mutations.

89
00:05:38,000 --> 00:05:41,510
You have to provide actions in the same way as with map state.

90
00:05:41,510 --> 00:05:46,070
You have to provide a valid piece of state in the same way that with map mutations, you have to provide

91
00:05:46,070 --> 00:05:47,120
valid mutation names.

92
00:05:47,210 --> 00:05:50,440
So don't accidentally pass the wrong thing with map actions.

93
00:05:50,450 --> 00:05:57,110
We only provide action names and you create methods with equivalent names, honor component so we can

94
00:05:57,110 --> 00:05:57,980
get rid of this line.

95
00:05:58,220 --> 00:06:02,120
It leads us to a little bit of a cleaner code because we don't need to worry about the dispatch method

96
00:06:02,240 --> 00:06:03,350
or how this store operates.

97
00:06:03,530 --> 00:06:08,390
And if I save this, you're going to see all of our test bill pass, because under the hood view X is

98
00:06:08,390 --> 00:06:09,770
doing the exact same thing for us.

99
00:06:09,770 --> 00:06:15,350
It's still talking to the store, it's still invoking the dispatch method, and it's still passing the

100
00:06:15,350 --> 00:06:16,730
argument to fetch jobs to it.

101
00:06:16,910 --> 00:06:22,340
But it's doing it automatically in a method that it auto defines for us called fetch jobs available

102
00:06:22,340 --> 00:06:24,620
on this component via this keyword.

103
00:06:24,740 --> 00:06:26,120
That's what map actions does.

104
00:06:26,390 --> 00:06:29,150
Hopefully that has been helpful and I will see you in the next lesson.
