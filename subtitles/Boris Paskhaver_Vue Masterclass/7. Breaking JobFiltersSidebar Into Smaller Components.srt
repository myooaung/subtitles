1
00:00:00,700 --> 00:00:01,230
Okay.

2
00:00:01,240 --> 00:00:06,850
So to kick this lesson off, I've opened up my job filter, sidebar component and also that test we

3
00:00:06,850 --> 00:00:12,010
on the right hand side and as always, the goal of our refactor is to make our code a little bit easier

4
00:00:12,010 --> 00:00:12,580
to work with.

5
00:00:12,910 --> 00:00:18,010
So one of the reasons why these tests are pretty complex is because we're marking out three different

6
00:00:18,010 --> 00:00:23,740
things, three different composable functions that we're utilizing right here in our setup method.

7
00:00:23,980 --> 00:00:28,930
And of course, the reason all of these composable is exist is to provide one of these values right

8
00:00:28,930 --> 00:00:31,870
here unique job types, unique organizations, unique degrees.

9
00:00:32,230 --> 00:00:37,330
And you'll notice that the only reason they exist is to be passed down as props to their respective

10
00:00:37,330 --> 00:00:38,260
checkbox group.

11
00:00:38,860 --> 00:00:43,810
Unfortunately, when we render our full job filter sidebar, even though, for example, in this test

12
00:00:43,810 --> 00:00:49,150
we want to only check that we're getting the checkbox group for filtering by job types, we do have

13
00:00:49,150 --> 00:00:53,830
to provide our mocked up value for that use unique job types composable which makes sense.

14
00:00:54,070 --> 00:01:00,010
However, all of this logic right here of mocking exists simply so that the set up method can run without

15
00:01:00,010 --> 00:01:00,610
failure.

16
00:01:00,850 --> 00:01:06,850
Even though this logic has nothing to do with what we're testing in here, it's simply a necessity of

17
00:01:06,850 --> 00:01:12,250
wanting to test our very first checkbox group, which requires job types or to be more specific, our

18
00:01:12,250 --> 00:01:12,820
second one.

19
00:01:13,060 --> 00:01:15,580
But the same logic applies for every other test, right?

20
00:01:15,790 --> 00:01:20,320
So right here, for example, we're running a test to check for organizations, which means we need

21
00:01:20,320 --> 00:01:26,170
to provide a mock for use, unique organizations, our composable function, which returns a value that

22
00:01:26,170 --> 00:01:29,590
we then pass down for our unique organizations right here.

23
00:01:29,800 --> 00:01:35,560
But we also need to provide mock return values for these things so that our setup method can run it

24
00:01:35,560 --> 00:01:36,040
correctly.

25
00:01:36,040 --> 00:01:36,250
Right?

26
00:01:36,970 --> 00:01:39,040
So basically, how can we simplify this?

27
00:01:39,040 --> 00:01:43,330
How can we make this easier to understand and also simplify our test suite?

28
00:01:43,690 --> 00:01:45,040
So here's what I propose.

29
00:01:45,160 --> 00:01:51,280
I think that we can break up the logic in our setup method by having multiple smaller components.

30
00:01:51,580 --> 00:01:57,550
And I propose that we create a separate component for job types, for organizations and for degrees.

31
00:01:57,850 --> 00:02:03,490
Now, in a sense, this may be coming full circle because you may remember that originally we had three

32
00:02:03,490 --> 00:02:07,720
separate components and then we tried to refactor them into our checkbox group component.

33
00:02:08,020 --> 00:02:12,820
But the good news here is I think we can still keep our checkbox group component while still creating

34
00:02:12,820 --> 00:02:17,230
three separate components one for job types, one for organizations and one for degrees.

35
00:02:17,500 --> 00:02:23,020
And the responsibility of each one of those three components will be to simply render a checkbox group

36
00:02:23,230 --> 00:02:29,980
and talk to the right composable functions to get the data that it needs in order to render this instantiation

37
00:02:29,980 --> 00:02:30,460
right here.

38
00:02:31,150 --> 00:02:32,050
So let me repeat that.

39
00:02:32,260 --> 00:02:36,760
What I'd like to do, for example, is to create a new component, and that component will still use

40
00:02:36,790 --> 00:02:42,280
the used unique degrees composable, and it will know the right mutation, but that components responsibility

41
00:02:42,280 --> 00:02:46,540
will be just to render this checkbox group and provide it with the correct data.

42
00:02:46,900 --> 00:02:52,090
That way, what we can do in that new component setup method is take the composable that we care about

43
00:02:52,090 --> 00:02:57,460
one of these three and the mutation that we care about one of these three and simply isolate that in

44
00:02:57,460 --> 00:02:58,450
that separate component.

45
00:02:58,720 --> 00:03:03,220
And that way, when we test that component, we only need to mark out one composable, right?

46
00:03:03,220 --> 00:03:07,600
And we don't need to worry about all the other components and then we can repeat the exact same logic

47
00:03:07,690 --> 00:03:09,220
for the other two instantiation.

48
00:03:09,430 --> 00:03:14,830
So in other words, create a second component to store this logic right here, the instantiation of

49
00:03:14,830 --> 00:03:20,500
this checkbox group that needs its own unique job types, which comes from a composable that I will

50
00:03:20,500 --> 00:03:21,700
mock out in that test.

51
00:03:21,910 --> 00:03:26,260
But of course, for that component test, I won't need to worry about degrees and organizations.

52
00:03:26,500 --> 00:03:31,690
And finally, in my third component, that third component will render this checkbox group and talk

53
00:03:31,690 --> 00:03:34,690
to the composable that it needs in order to get the unique organizations.

54
00:03:34,870 --> 00:03:40,510
And in that test, we will have to mock out that unis use unique organizations composable, but we won't

55
00:03:40,510 --> 00:03:43,870
have to worry about the composable for job types and unique degrees.

56
00:03:44,200 --> 00:03:48,340
So what we're basically doing is splitting up the logic of the set setup method across multiple set

57
00:03:48,340 --> 00:03:51,250
of methods across three different view components.

58
00:03:51,850 --> 00:03:56,200
So the whole story of kind of the refactor that we've been through, where we've come full circle is

59
00:03:56,200 --> 00:04:00,850
we're trying to find the right balance of how much a component should know and how much it should do.

60
00:04:01,030 --> 00:04:06,190
And ideally, if you have a small setup method and the component has a singular responsibility, the

61
00:04:06,190 --> 00:04:11,680
simpler it will be to test and the simpler it will be to understand this job filter side of our component

62
00:04:11,680 --> 00:04:17,230
does a lot, and that's why the setup method needs to talk to three separate composable functions because

63
00:04:17,230 --> 00:04:22,450
it needs to gather data for three separate responsibilities, rendering the checkbox group for degrees,

64
00:04:22,570 --> 00:04:25,300
the checkbox group for job types and for organizations.

65
00:04:25,480 --> 00:04:30,970
And I think by breaking it up across three different components, we're going to get all the same benefits

66
00:04:31,150 --> 00:04:35,230
and the same functionality, but making it much easier to test and reasonable.

67
00:04:35,500 --> 00:04:35,770
All right.

68
00:04:35,770 --> 00:04:38,680
So if that doesn't make false sense just yet, don't worry.

69
00:04:38,680 --> 00:04:42,130
I hope it's going to become clearer as we actually do this implementation.

70
00:04:42,730 --> 00:04:46,000
So let's make this a reality and you'll get a better sense of what I'm trying to do here.

71
00:04:46,300 --> 00:04:49,000
So let's start with this degrees logic right here.

72
00:04:49,030 --> 00:04:51,820
This section is what I want to extract to a brand new component.

73
00:04:52,180 --> 00:04:57,880
So what I'm going to do is create a new component in my job filter sidebar directory, and I'm going

74
00:04:57,880 --> 00:04:59,710
to call it job filter side.

75
00:04:59,790 --> 00:05:01,230
R degrees.

76
00:05:03,040 --> 00:05:03,250
All right.

77
00:05:03,250 --> 00:05:06,610
I'm going to make that of you component and I'm going to drag it over to the right hand side.

78
00:05:06,850 --> 00:05:10,600
And a lot of this logic is simply going to be copy and paste, and that is the good news.

79
00:05:10,840 --> 00:05:14,770
So the first thing I'm going to do is I'm going to write my template tag and then what I'm going to

80
00:05:14,770 --> 00:05:20,140
copy over is going to be this entire section right here, this job builder, sidebar, checkbox group.

81
00:05:20,860 --> 00:05:24,670
So if we simply look at what we have right here on the right hand side, what does that tell us?

82
00:05:24,880 --> 00:05:29,380
That tells us that this component needs to figure out how to provide to the template something called

83
00:05:29,380 --> 00:05:32,020
unique degrees and something called ADD selected degrees.

84
00:05:32,290 --> 00:05:37,960
Well, that logic all exists down here, and we simply have to extract the bits and pieces of this logic

85
00:05:38,080 --> 00:05:39,700
that relate to our degrees.

86
00:05:40,000 --> 00:05:44,260
So as always and right to begin by copying most of this logic right here, let's copy the script.

87
00:05:44,260 --> 00:05:46,600
Lang and the defined component.

88
00:05:47,580 --> 00:05:48,690
I'm going to put that right here.

89
00:05:49,290 --> 00:05:51,390
And what else are we going to need?

90
00:05:51,420 --> 00:05:56,040
We're going to need our job filters checkbox for component because we're entering it right here.

91
00:05:56,310 --> 00:05:59,700
So let me do that and import that copy from the left.

92
00:05:59,700 --> 00:06:00,390
Put it on the right.

93
00:06:01,710 --> 00:06:02,170
All right.

94
00:06:02,640 --> 00:06:04,140
Then what are we going to need to do?

95
00:06:04,170 --> 00:06:05,670
We're going to need to export default.

96
00:06:06,970 --> 00:06:13,420
And we're going to need to provide the instantiation of defined component passing in our configuration

97
00:06:13,420 --> 00:06:13,690
object.

98
00:06:13,930 --> 00:06:19,690
Before we forget, let's give it a name and this one will be called Job Filters Sidebar Degrees.

99
00:06:20,050 --> 00:06:25,000
It's a component that is responsible for getting all the information we need to provide in order to

100
00:06:25,000 --> 00:06:26,110
filter by degrees.

101
00:06:26,470 --> 00:06:32,350
Then we're going to provide a component section because we are using a job filter, sidebar, checkbox,

102
00:06:32,350 --> 00:06:34,090
group component up here in the template.

103
00:06:34,300 --> 00:06:36,130
So we're going to provide that right here as well.

104
00:06:36,880 --> 00:06:39,040
Now we're able to use it in our template.

105
00:06:39,340 --> 00:06:42,490
And then of course, the other thing we need is to provide these names right here.

106
00:06:42,760 --> 00:06:44,440
So I'm going to provide my setup method.

107
00:06:46,510 --> 00:06:46,900
All right.

108
00:06:46,900 --> 00:06:50,770
And what do we need to provide unique degrees as well as add selected degrees?

109
00:06:51,010 --> 00:06:55,330
So what I'm going to copy from this file is going to be the import of add selected degrees.

110
00:06:55,360 --> 00:06:59,410
So let me copy this entire import right here and let's put it right here.

111
00:06:59,740 --> 00:07:03,310
And of course, the only one we care about right now is going to be add selected degrees.

112
00:07:03,430 --> 00:07:04,120
So there we go.

113
00:07:04,930 --> 00:07:06,040
That's going to take care of this thing.

114
00:07:06,250 --> 00:07:10,870
And of course, the other function I'm going to need is use unique degrees, because that is going to

115
00:07:10,870 --> 00:07:15,370
provide the unique degrees constant that I'm making available as well.

116
00:07:15,610 --> 00:07:18,520
So let's find where use unique degrees is being imported right here.

117
00:07:18,850 --> 00:07:21,190
So copy this logic over to here.

118
00:07:22,340 --> 00:07:22,760
All right.

119
00:07:23,030 --> 00:07:26,120
Except, of course, the only one we care about is use unique degrees.

120
00:07:26,480 --> 00:07:28,100
So I'm just going to get rid of these first two.

121
00:07:28,610 --> 00:07:28,970
All right.

122
00:07:28,970 --> 00:07:29,630
Save that.

123
00:07:29,930 --> 00:07:32,510
And then in our set up method, what are we going to do?

124
00:07:32,810 --> 00:07:35,660
We're going to follow the exact same logic that we have right here.

125
00:07:35,930 --> 00:07:38,300
So we're going to need to get our unique degrees.

126
00:07:38,450 --> 00:07:40,910
So I'm going to copy this line 83 over.

127
00:07:41,390 --> 00:07:46,850
So we're getting our unique degrees and then all we need to do is return an object here.

128
00:07:47,750 --> 00:07:51,110
And we're going to provide unique degrees, which we have from our composable above.

129
00:07:51,470 --> 00:07:55,730
And I'm also going to provide my constant add selected degrees.

130
00:07:56,880 --> 00:08:00,390
All right, we're importing it above or making it available on this return object.

131
00:08:00,570 --> 00:08:05,340
So now we have two properties that we're going to make available in our template unique degrees and

132
00:08:05,340 --> 00:08:10,680
add selected degrees, which is exactly what this instantiation of checkbox group needs to work.

133
00:08:11,340 --> 00:08:11,580
All right.

134
00:08:11,580 --> 00:08:16,920
So hopefully this is starting to make sense as to how we've extracted one third basically of the setup

135
00:08:16,920 --> 00:08:23,190
method to the smaller component that is just responsible for one checkbox group and gathering the data

136
00:08:23,190 --> 00:08:27,450
from the composable that it needs to render this specific checkbox group right here.

137
00:08:28,300 --> 00:08:28,710
All right.

138
00:08:29,010 --> 00:08:34,020
So with that all, of course, we need to do is emulate a very similar process for the remaining two

139
00:08:34,260 --> 00:08:34,980
checkbox groups.

140
00:08:34,980 --> 00:08:39,630
And then we can replace this complex logic right here with these smaller components.

141
00:08:39,930 --> 00:08:45,930
So once again, I'm going to create a new component, and this one is going to be called job filters,

142
00:08:45,930 --> 00:08:48,060
sidebar, job type stock view.

143
00:08:48,900 --> 00:08:49,200
All right.

144
00:08:49,200 --> 00:08:51,350
So it's going to be very similar to what we just did.

145
00:08:51,360 --> 00:08:53,190
We're going to practice this logic three times.

146
00:08:53,490 --> 00:08:58,650
So right here, I'm going to provide a template tag and I'm going to copy over this checkbox group.

147
00:09:00,130 --> 00:09:02,440
All right, so what is this checkbox group needs?

148
00:09:02,470 --> 00:09:07,240
It needs its own set of names, unique job types and ads like the job tips.

149
00:09:07,540 --> 00:09:08,590
So let's set that up.

150
00:09:08,600 --> 00:09:11,260
So I'm going to copy this logic right here.

151
00:09:12,420 --> 00:09:13,570
There's our script section.

152
00:09:13,590 --> 00:09:15,090
Let's make sure we also close it off.

153
00:09:15,570 --> 00:09:18,300
Let me in fact confirm that I closed that off right here as well.

154
00:09:18,300 --> 00:09:18,870
We did not.

155
00:09:18,870 --> 00:09:20,670
So let me make sure I add that script.

156
00:09:20,970 --> 00:09:21,780
And right here.

157
00:09:21,840 --> 00:09:22,320
There we go.

158
00:09:22,830 --> 00:09:23,220
All right.

159
00:09:23,220 --> 00:09:24,690
So now we have our script section.

160
00:09:24,690 --> 00:09:25,710
We have defined component.

161
00:09:25,710 --> 00:09:31,800
Let me immediately export default, the invocation of defined component passing in a name property.

162
00:09:31,800 --> 00:09:36,420
And this one will be job filters, sidebar job types.

163
00:09:37,560 --> 00:09:38,220
All right.

164
00:09:38,370 --> 00:09:41,130
So what does this one need in order to run?

165
00:09:41,310 --> 00:09:43,710
Well, it's also going to need the checkbox group, right?

166
00:09:43,710 --> 00:09:45,060
Because we're rendering that right here.

167
00:09:45,300 --> 00:09:50,790
So as always, let me copy this code from line 58, from the job filter, sidebar file.

168
00:09:51,030 --> 00:09:54,030
Put that right here and right here under components.

169
00:09:55,710 --> 00:09:59,430
I'm going to provide an object and make sure that this component can use a checkbox script.

170
00:09:59,850 --> 00:10:02,340
The next thing I'm going to need is going to be a setup method.

171
00:10:03,750 --> 00:10:07,440
And in here, I'm going to need to wire up an object that returns these two things.

172
00:10:07,800 --> 00:10:13,590
So, of course, to get unique job types, that is the return value of using the use unique job types

173
00:10:13,590 --> 00:10:14,100
composable.

174
00:10:14,400 --> 00:10:21,300
So let me copy this line 81 over to here, which means we also need to import the specific composable.

175
00:10:21,600 --> 00:10:26,370
So let me copy lines 60 through 70 here on the left, over to the right, and then we'll remove the

176
00:10:26,370 --> 00:10:27,330
ones we don't care about.

177
00:10:27,870 --> 00:10:30,700
So obviously we are going to need using these job types.

178
00:10:30,720 --> 00:10:32,550
We don't need these two other composable.

179
00:10:33,210 --> 00:10:37,360
And here, the one we're going to care about is going to be add selected job types.

180
00:10:37,380 --> 00:10:39,270
So we're not going to need these three constants.

181
00:10:40,230 --> 00:10:40,800
There we go.

182
00:10:41,130 --> 00:10:44,340
And of course, for our return right here, same principle.

183
00:10:44,340 --> 00:10:45,500
We're going to return an object.

184
00:10:45,510 --> 00:10:50,400
We're going to make sure we have unique job types available right here and also provide the add selected

185
00:10:50,400 --> 00:10:52,800
job types constant that we imported above.

186
00:10:53,770 --> 00:10:54,370
There we go.

187
00:10:54,460 --> 00:10:56,380
So now we have an object with two properties.

188
00:10:56,380 --> 00:10:58,720
We're utilizing both of those properties right here.

189
00:10:58,930 --> 00:11:04,120
And the checkbox strip component that we're rendering, we also are making available by importing it

190
00:11:04,120 --> 00:11:06,520
right here and providing it under the components key.

191
00:11:07,150 --> 00:11:07,420
All right.

192
00:11:07,420 --> 00:11:10,240
So hopefully, once again, the second step has made it even clearer.

193
00:11:10,540 --> 00:11:13,640
Well, now let's repeat the exact same logic for organizations.

194
00:11:13,660 --> 00:11:19,330
So right here, a third new component called job filter sidebar.

195
00:11:19,690 --> 00:11:23,710
Organizations that view once again.

196
00:11:23,710 --> 00:11:28,420
I will provide a template tag once again inside the template tag.

197
00:11:28,420 --> 00:11:30,430
I'm going to copy this checkbox group.

198
00:11:31,840 --> 00:11:32,420
There we go.

199
00:11:32,470 --> 00:11:34,270
Let me make sure I copy it correctly.

200
00:11:34,360 --> 00:11:34,900
There we go.

201
00:11:35,260 --> 00:11:35,980
Pasted here.

202
00:11:38,070 --> 00:11:41,460
All right, let's make sure we have an opening and closing script tag.

203
00:11:41,820 --> 00:11:44,280
Let's make sure we add Lang equal that he has.

204
00:11:44,830 --> 00:11:48,270
Here, I'm going to copy this import defined component syntax.

205
00:11:49,720 --> 00:11:51,280
We're going to export default.

206
00:11:51,280 --> 00:11:54,250
The invocation of defined component passing in an object.

207
00:11:54,520 --> 00:11:59,290
The name of this component is going to be job filters, sidebar organizations.

208
00:12:00,250 --> 00:12:03,910
We're going to need to import the component we're using above, which is the checkbox group.

209
00:12:04,210 --> 00:12:07,210
So let me copy line 58 from the left, provide it right here.

210
00:12:07,960 --> 00:12:13,870
And under the components key, I'm going to provide an object and then register the checkbox group.

211
00:12:14,230 --> 00:12:15,730
Then we're going to need a setup method.

212
00:12:17,050 --> 00:12:17,470
All right.

213
00:12:17,650 --> 00:12:19,270
And what are we going to need to do in here?

214
00:12:19,300 --> 00:12:26,350
We're going to need to rely on our use unique organizations, composable, as well as the ADD selected

215
00:12:26,350 --> 00:12:29,410
organizations constant, which we're referencing right here on line four.

216
00:12:29,710 --> 00:12:33,580
So once again, let me copy these ten lines and then remove the ones we don't care about.

217
00:12:34,030 --> 00:12:35,260
So right here, I'm going to do that.

218
00:12:35,710 --> 00:12:36,070
Okay.

219
00:12:36,070 --> 00:12:40,420
So we care about use unique organizations.

220
00:12:40,420 --> 00:12:41,530
That's going to be our composable.

221
00:12:42,160 --> 00:12:44,650
And right here, we care about ADD selected organizations.

222
00:12:44,650 --> 00:12:45,640
That's going to be our constant.

223
00:12:46,150 --> 00:12:48,340
There we go in the set method.

224
00:12:48,520 --> 00:12:54,040
I'm going to get my unique organizations by invoking the use unique organizations composable function.

225
00:12:54,310 --> 00:13:00,220
And then I'm going to return that reactive object referenced by unique organizations as well as my ADD

226
00:13:00,220 --> 00:13:04,100
selected organizations property or to be more specific, string constant.

227
00:13:04,120 --> 00:13:04,720
There we go.

228
00:13:05,110 --> 00:13:06,730
And that's what we're referencing right here.

229
00:13:07,270 --> 00:13:07,660
All right.

230
00:13:07,660 --> 00:13:09,670
So I think with that, things are looking pretty good.

231
00:13:09,700 --> 00:13:11,230
Let me one more time double check.

232
00:13:11,230 --> 00:13:13,060
That script is provided everywhere here.

233
00:13:13,450 --> 00:13:14,800
So everything is looking pretty good.

234
00:13:14,830 --> 00:13:17,440
Use unique degrees and add selected degrees.

235
00:13:17,650 --> 00:13:19,210
Right here, it's using it job types.

236
00:13:19,210 --> 00:13:20,290
Add selected job types.

237
00:13:20,500 --> 00:13:23,890
Right here, it's using organizations and add selected organizations.

238
00:13:24,160 --> 00:13:26,290
I think we also have a slightly different import order.

239
00:13:26,290 --> 00:13:30,340
So let me move this logic a little bit above just to be consistent.

240
00:13:31,120 --> 00:13:31,570
There we go.

241
00:13:31,840 --> 00:13:35,740
So now we can actually incorporate these components into job filter sidebar.

242
00:13:35,740 --> 00:13:36,880
And this is going to be a lot of fun.

243
00:13:37,240 --> 00:13:42,010
So right here, let's begin by importing the components that we care about.

244
00:13:42,310 --> 00:13:47,640
So our new components, we're going to have job filters, sidebar degrees, right?

245
00:13:47,650 --> 00:13:53,920
And that is going to come from these source directory components, job results, job filters, sidebar

246
00:13:54,970 --> 00:13:58,370
and finally, job filter, sidebar, degrees, dot view.

247
00:13:58,900 --> 00:14:05,470
Next line is going to be import job filters, sidebar, job types, and that's going to come from the

248
00:14:05,470 --> 00:14:06,240
same directory.

249
00:14:06,250 --> 00:14:12,850
So source components, job results, job filter, sidebar, job filter, sidebar, job types.

250
00:14:13,090 --> 00:14:13,660
There we go.

251
00:14:13,930 --> 00:14:19,390
And our third one that we just created is job filters, sidebar organizations.

252
00:14:19,600 --> 00:14:23,830
That's going to come from the source directory components, job results, jobs.

253
00:14:23,830 --> 00:14:25,750
Other sidebar, job filters.

254
00:14:27,020 --> 00:14:29,900
Sidebar organizations that deal.

255
00:14:31,630 --> 00:14:32,260
There we go.

256
00:14:32,500 --> 00:14:36,850
And now we need to register all of these components with our components right here.

257
00:14:37,060 --> 00:14:43,960
So I'm going to do a job filter, sidebar, degrees and jobs, which the sidebar job types and jobs,

258
00:14:43,960 --> 00:14:45,430
other sidebar organizations.

259
00:14:45,640 --> 00:14:48,400
And now we can start the cleanup process throughout the component.

260
00:14:48,670 --> 00:14:53,560
So we're no longer going to need any of these composable because we've moved their logic to the three

261
00:14:53,560 --> 00:14:54,310
new components.

262
00:14:55,000 --> 00:15:00,400
We're also not going to need three of these constants, which is which is the ADD selected constants.

263
00:15:00,400 --> 00:15:02,920
We're still going to need to keep clear user jobs, which are selections.

264
00:15:03,280 --> 00:15:03,820
So there we go.

265
00:15:04,660 --> 00:15:09,910
And so we no longer are going to need a checkbox rule component because it's no longer going to exist

266
00:15:09,910 --> 00:15:10,760
once we replace it.

267
00:15:10,820 --> 00:15:13,310
Let's move that right here.

268
00:15:13,330 --> 00:15:18,370
We're no longer going to be using these composable because we've moved each one of them to an individual

269
00:15:18,370 --> 00:15:23,710
component on the right hand side, which means right here, we're no longer going to need these return

270
00:15:23,710 --> 00:15:24,860
values from the composable.

271
00:15:25,390 --> 00:15:28,180
And we're no longer going to need these constants right here.

272
00:15:28,870 --> 00:15:29,500
So there we go.

273
00:15:29,650 --> 00:15:32,230
So now we should get something super simple like this.

274
00:15:32,230 --> 00:15:36,670
We only have a single thing we care about, which is clear user java filter selections.

275
00:15:37,720 --> 00:15:38,080
All right.

276
00:15:38,470 --> 00:15:44,770
And now all that's left to do is to remove this checkbox right here and replace all of our four former

277
00:15:44,770 --> 00:15:45,250
components.

278
00:15:45,520 --> 00:15:49,900
So right here, instead of all of this logic, I'm simply going to render my new component, which is

279
00:15:49,900 --> 00:15:52,000
called job filters sidebar.

280
00:15:52,000 --> 00:15:54,340
And this is going to be the sidebar degrees component.

281
00:15:54,580 --> 00:15:55,690
It can be self-closing.

282
00:15:55,930 --> 00:16:00,790
So basically what we're rendering here is this component right here, which knows all the logic for

283
00:16:00,790 --> 00:16:06,720
which composable to use to get the degrees and which mutation name it needs to pass down to the checkbox

284
00:16:06,730 --> 00:16:08,430
rule component right here.

285
00:16:08,440 --> 00:16:13,780
We're going to replace this with a job filter, sidebar, job types, self-closing.

286
00:16:14,080 --> 00:16:19,660
And right here, we're going to replace all of this with job, other sidebar organizations, self-closing.

287
00:16:20,350 --> 00:16:22,810
All right, so things are looking pretty good.

288
00:16:22,810 --> 00:16:25,000
We can see it definitely becomes a lot easier to read.

289
00:16:25,210 --> 00:16:29,200
We sort of have this understanding that there's an accordion with a header, that it is rendering its

290
00:16:29,200 --> 00:16:33,940
own component that's responsible for doing something with degrees, with job types and with organizations.

291
00:16:34,270 --> 00:16:36,790
As I scroll down, it looks like everything is correct here.

292
00:16:36,790 --> 00:16:38,620
We still need our accordion because we're using it.

293
00:16:38,830 --> 00:16:45,670
We still need our action button because we're rendering it right here and we are keeping our setup method

294
00:16:45,670 --> 00:16:46,810
now a lot cleaner.

295
00:16:46,810 --> 00:16:51,550
We can immediately see the benefit because the setup method becomes a lot easier to understand.

296
00:16:51,730 --> 00:16:56,920
Now all we're doing is talking to the store and wiring up a function to run as a click handler to commit

297
00:16:56,920 --> 00:16:58,330
the mutation to clear selections.

298
00:16:58,510 --> 00:17:04,960
But now all of that complex logic that was in here has now been spread across three different components.

299
00:17:05,320 --> 00:17:09,430
So hopefully it makes sense how this makes our design a little bit simpler and we'll continue chipping

300
00:17:09,430 --> 00:17:10,930
away at this in the very next lesson.
