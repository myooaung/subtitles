WEBVTT
1
00:00:00.670 --> 00:00:01.360
Okay.

2
00:00:01.360 --> 00:00:05.200
So I am pretty happy with the tests for the job listing component.

3
00:00:05.470 --> 00:00:11.920
The one detail that I think we're missing is the computed property right here job page link that represents

4
00:00:11.920 --> 00:00:17.830
the dynamic URL that we are generating based on the job objects ID property.

5
00:00:17.980 --> 00:00:19.410
We're not testing this anywhere.

6
00:00:19.420 --> 00:00:24.430
So I'd like to write a test for this logic, which of course means we can pass any job object with an

7
00:00:24.430 --> 00:00:30.430
ID of our choosing and where we are using this computed property is in the router link components right

8
00:00:30.430 --> 00:00:30.760
here.

9
00:00:31.000 --> 00:00:36.550
We're passing that computed property to the two prop of the router and component, and that's really

10
00:00:36.550 --> 00:00:38.150
the interaction I want to test.

11
00:00:38.170 --> 00:00:43.900
I want to test that job listing gives the right value to the two property of a separate component.

12
00:00:44.020 --> 00:00:48.940
I don't care how the component deals with that value, I just care that I'm giving that component the

13
00:00:48.940 --> 00:00:49.540
right value.

14
00:00:49.840 --> 00:00:55.600
So I say, let's write a test where we mount job listing, where we find the router line component,

15
00:00:55.810 --> 00:01:01.090
where we check its props, where we find the value of the two prop, and we ensure that it is the right

16
00:01:01.090 --> 00:01:04.930
URL string based on the idea of the job that we pass in.

17
00:01:05.260 --> 00:01:05.890
So right here.

18
00:01:07.060 --> 00:01:14.500
I'm going to add a new test and it's going to be it links to individual jobs page.

19
00:01:15.370 --> 00:01:17.460
I'm going to provide my arrow function here.

20
00:01:17.470 --> 00:01:22.150
And as always, we're going to start by coming up with our job object or specifically the properties

21
00:01:22.150 --> 00:01:22.840
that we care about.

22
00:01:23.260 --> 00:01:23.800
So right here.

23
00:01:24.340 --> 00:01:25.240
Job props.

24
00:01:25.630 --> 00:01:30.340
I'm going to invoke my create job props function from above and I'm going to pass in an object with

25
00:01:30.340 --> 00:01:31.660
the properties I want to define.

26
00:01:31.780 --> 00:01:38.050
I really only care about the ID property here, so I'll provide an ID property and I'll give it an arbitrary

27
00:01:38.050 --> 00:01:39.640
value of 15.

28
00:01:40.360 --> 00:01:43.120
Down below we can mount our job listing component.

29
00:01:43.120 --> 00:01:48.370
So content wrapper is going to be mounting our job listing component and then we're going to create

30
00:01:48.370 --> 00:01:53.560
a configuration object by invoking the create config function passing in our job props.

31
00:01:53.830 --> 00:01:57.700
So now we have the exact job object that we want for that component.

32
00:01:58.090 --> 00:02:02.320
The next thing I want to do is to find a router link right here.

33
00:02:02.560 --> 00:02:07.810
So we're going to try our original approach of looking for a data test attribute, but as we'll find

34
00:02:07.810 --> 00:02:08.890
out, it's not going to work.

35
00:02:09.070 --> 00:02:12.760
I still want to show you the error we encounter and then we'll talk about why it's happening.

36
00:02:13.000 --> 00:02:18.610
But let's for now, pretend that we're going to search for some element in our template with that data

37
00:02:18.610 --> 00:02:19.430
test attribute.

38
00:02:19.450 --> 00:02:22.990
So right here, I'm going to call it job page link.

39
00:02:23.020 --> 00:02:27.820
I'm assuming somewhere in my template there's going to be a link to the individual job page, and I'm

40
00:02:27.820 --> 00:02:36.160
going to assume that that element is going to have a data test attribute equal to job page link.

41
00:02:36.730 --> 00:02:38.460
Again, this value is totally up to me.

42
00:02:38.470 --> 00:02:44.060
Just remember the syntax for the data test attribute is square brackets, then the data test.

43
00:02:44.060 --> 00:02:47.800
Then single single quotes for the string in line right there.

44
00:02:48.250 --> 00:02:53.680
Then when we have a certain view test utils wrapper object just like we have here in wrapper.

45
00:02:53.830 --> 00:02:55.810
And our hope is we have a very similar one here.

46
00:02:56.050 --> 00:02:59.260
We can call a method on that object called props.

47
00:02:59.410 --> 00:03:07.060
And props is going to give us access to that components props and we can pass that method a string representing

48
00:03:07.060 --> 00:03:09.850
the prop whose value we want to pull out.

49
00:03:10.150 --> 00:03:14.980
So if we have our job page link and we assume that's going to be our router link component right here,

50
00:03:15.310 --> 00:03:20.080
we can try to access its props and specifically we want to get its to prop.

51
00:03:20.080 --> 00:03:21.340
We can see it right here.

52
00:03:21.640 --> 00:03:26.500
So I'm going to pass the props method, the string of to representing that to prop.

53
00:03:26.860 --> 00:03:29.410
So I'm going to save this to a constant call to prop.

54
00:03:29.860 --> 00:03:34.060
And my hope is that this is a string that is equal to my dynamic URL.

55
00:03:34.390 --> 00:03:41.290
So in the next line I will assert that I expect to prop to be and what is the string that we expect?

56
00:03:41.560 --> 00:03:48.490
We expect it to be slash jobs, slash results, followed by the idea of the job which we get from the

57
00:03:48.490 --> 00:03:49.360
job object.

58
00:03:49.360 --> 00:03:50.740
In this case, it's 15.

59
00:03:51.040 --> 00:03:54.910
So our final URL should be slash jobs, slash results, slash 15.

60
00:03:55.330 --> 00:03:57.490
So I'm going to save this and let's see what happens.

61
00:03:57.730 --> 00:03:59.100
We should get a test failure.

62
00:03:59.110 --> 00:04:00.220
And we do indeed.

63
00:04:00.220 --> 00:04:06.400
We can see cannot call props on an empty DOM wrapper, which tells us this line right here that the

64
00:04:06.400 --> 00:04:11.080
test utils was not able to find anything in our template with that attribute.

65
00:04:11.290 --> 00:04:12.820
So let's go ahead and add it up top.

66
00:04:12.820 --> 00:04:18.220
So right here, I'll go to my first router link component and right here I will add data test.

67
00:04:19.530 --> 00:04:23.220
Jab page link, making sure to match exactly what I have on the right hand side.

68
00:04:23.550 --> 00:04:28.170
And when I save this, we're going to see we're still not actually passing.

69
00:04:28.500 --> 00:04:33.510
So you can see here we're getting to this different type of error, a type error that says job page

70
00:04:33.510 --> 00:04:36.840
link props is not a function, so it is finding something.

71
00:04:36.840 --> 00:04:40.230
But that object that it is returning does not have the props methods.

72
00:04:40.230 --> 00:04:41.200
So what is going on here?

73
00:04:41.550 --> 00:04:47.220
Well, unfortunately, the code we have here doesn't work with a data test implementation because what

74
00:04:47.220 --> 00:04:51.150
this find method returns is the native HTML dom element.

75
00:04:51.450 --> 00:04:57.090
So however, the view router team developed rattling under the hood like maybe it's a dev or maybe it's

76
00:04:57.090 --> 00:04:58.590
an anchor tag, we don't know.

77
00:04:58.740 --> 00:05:03.090
But this code right here is finding that native HTML element.

78
00:05:03.240 --> 00:05:06.540
It's not actually identifying the concept of a component.

79
00:05:06.720 --> 00:05:12.810
In Vue terms, this is a little bit too close to the final HTML that we are going to see in our browser.

80
00:05:13.080 --> 00:05:17.730
So we need a way to tell our test to find a specific component.

81
00:05:17.970 --> 00:05:20.580
And in order to do that, we're going to do a slightly different approach.

82
00:05:20.580 --> 00:05:25.830
Instead of using a data test, actually, we're going to find we're going to use rather a method that

83
00:05:25.830 --> 00:05:30.540
is available directly on any wrapper and that is find component right here.

84
00:05:30.540 --> 00:05:32.400
I'm going to write find component.

85
00:05:32.790 --> 00:05:36.330
And there's actually a variety of different arguments we can pass to find component.

86
00:05:36.330 --> 00:05:38.850
And one of them is the component that we're looking for.

87
00:05:39.150 --> 00:05:42.810
And the test is going to find that view component in our template.

88
00:05:42.810 --> 00:05:45.750
It's going to find the first occurrence of it to be more exact.

89
00:05:46.020 --> 00:05:48.990
So in this case, this is our first occurrence of the OR component.

90
00:05:49.290 --> 00:05:52.260
But how do we specify to search for that component?

91
00:05:52.620 --> 00:05:58.590
Well, we already have imported into this test file the router link stub, which we are using in our

92
00:05:58.590 --> 00:06:01.860
configuration to stub out the router link component.

93
00:06:02.130 --> 00:06:07.380
So remember that whenever our test suite mounts our job listing component, whenever it sees a router

94
00:06:07.380 --> 00:06:09.900
link, it is replacing it with the router link stub.

95
00:06:10.170 --> 00:06:14.880
So from the tests perspective, it's not seeing router link, it's seeing router link stub.

96
00:06:15.120 --> 00:06:17.760
So this is the component that we can actually search for.

97
00:06:17.940 --> 00:06:23.250
And since we have this component available directly in this file, we can actually pass that component

98
00:06:23.250 --> 00:06:29.130
as an argument to my job page link or rather find component method right here.

99
00:06:29.130 --> 00:06:35.940
So router link stub, we're going to tell our view test utils in our wrapper for the job listing component,

100
00:06:36.120 --> 00:06:37.920
find the rattling stub component.

101
00:06:38.130 --> 00:06:42.360
And because that is a component, it is going to have the props method available.

102
00:06:42.540 --> 00:06:48.660
The two prop will be available and we're going to double check and see that it is indeed this string.

103
00:06:48.930 --> 00:06:50.940
We can see that our test is passing right here.

104
00:06:50.940 --> 00:06:52.310
And just to show you it fail.

105
00:06:52.500 --> 00:06:54.720
I'm going to change this to something like ten.

106
00:06:55.900 --> 00:07:00.700
And we're going to see now that Jess is going to tell us that it expected to get slashed ten, but it's

107
00:07:00.700 --> 00:07:06.160
getting slashed 15, which is exactly the URL that we expect, given that our object for the job has

108
00:07:06.160 --> 00:07:07.120
an idea of 15.

109
00:07:07.150 --> 00:07:11.440
So that confirms that we are getting to the right task, that we are finding the right component, that

110
00:07:11.440 --> 00:07:14.560
we are extracting the right prop, and it's simply a string mismatch.

111
00:07:14.560 --> 00:07:15.970
So that's exactly what we expect.

112
00:07:16.270 --> 00:07:21.760
I'm going to change this back to 15 and because we do not need the data test attribute anymore, we

113
00:07:21.760 --> 00:07:22.840
can remove it right here.

114
00:07:23.860 --> 00:07:29.050
So with that, I think we really are testing all of the properties of the job object that flows in as

115
00:07:29.050 --> 00:07:30.100
a prop anywhere.

116
00:07:30.100 --> 00:07:35.170
It's being used right here with job page link, which we generate dynamically right here with the title

117
00:07:35.170 --> 00:07:39.520
property organization, locations and minimum qualifications.

118
00:07:40.010 --> 00:07:41.380
This job link is the same thing.

119
00:07:41.560 --> 00:07:44.170
So we have really captured, I think, the heart of this component.

120
00:07:44.320 --> 00:07:47.080
And notice how each test is kind of small and short.

121
00:07:47.320 --> 00:07:51.430
And once again, customizing the specific job object to focus on what that test cares about.

122
00:07:51.730 --> 00:07:53.560
So I like where we are now.

123
00:07:53.560 --> 00:07:58.090
And then the very next lesson, we can move on to testing the higher level parent component, which

124
00:07:58.090 --> 00:08:03.940
is the job listings component, where we fetch all of the original jobs and render the job listing components

125
00:08:03.940 --> 00:08:04.780
in the first place.

126
00:08:05.020 --> 00:08:06.100
So I will see you there.
