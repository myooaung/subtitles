WEBVTT
1
00:00:00.540 --> 00:00:00.990
Okay.

2
00:00:00.990 --> 00:00:06.960
So now that we have built out our checkbox group component, we are good to remove our former two components

3
00:00:07.170 --> 00:00:11.730
and to update the tests for one of them to now serve our check box group.

4
00:00:12.120 --> 00:00:13.740
So let's open up our file explorer.

5
00:00:14.850 --> 00:00:21.870
And right here in source components, job results, job filter, sidebar, we can select our job types

6
00:00:21.870 --> 00:00:24.840
component right here and the organizations component as well.

7
00:00:25.050 --> 00:00:27.750
I'm going to use the shift key to select both of them.

8
00:00:28.050 --> 00:00:29.550
Right click that and delete.

9
00:00:30.180 --> 00:00:30.810
There we go.

10
00:00:31.260 --> 00:00:38.490
Those files are now gone and in the corresponding tests, unit directory components, job results,

11
00:00:38.490 --> 00:00:39.780
job filter, sidebar.

12
00:00:40.050 --> 00:00:41.340
We have two tests here.

13
00:00:41.350 --> 00:00:42.570
Let's remove one of them.

14
00:00:42.780 --> 00:00:44.010
Let's remove the organizations.

15
00:00:44.010 --> 00:00:44.310
One.

16
00:00:45.480 --> 00:00:50.340
I'm going to remove that test file and for my other one for the job tax component, which no longer

17
00:00:50.340 --> 00:00:50.820
exists.

18
00:00:51.090 --> 00:00:56.040
I'm simply going to rename this to be Job Builder Sidebar CheckBox Group.

19
00:00:57.680 --> 00:00:58.220
Test that?

20
00:00:58.220 --> 00:00:58.550
Yes.

21
00:00:58.550 --> 00:01:02.180
And we'll make this test suite work for our new component.

22
00:01:02.490 --> 00:01:06.620
Somebody drag that over here on the right hand side and we're basically going to go from top to bottom

23
00:01:06.620 --> 00:01:08.870
and adjust accordingly for what this component needs.

24
00:01:09.200 --> 00:01:10.760
So we're still going to need the mount function.

25
00:01:10.760 --> 00:01:14.390
We're still going to need to import and mark out, use store and use router.

26
00:01:14.390 --> 00:01:19.190
Because remember, even though we are passing in the mutation now, we still have the logic of a store

27
00:01:19.190 --> 00:01:21.950
and a router down here coming from the helper functions.

28
00:01:21.960 --> 00:01:24.230
So we will need to make it out in our test at some point.

29
00:01:24.590 --> 00:01:26.600
We no longer need the composable.

30
00:01:26.600 --> 00:01:28.130
Our top level job builder.

31
00:01:28.130 --> 00:01:33.830
The sidebar is now taking care of invoking the composable function and passing in the result as a prop.

32
00:01:33.830 --> 00:01:35.540
So we no longer need this logic in here.

33
00:01:37.030 --> 00:01:41.020
Which means you could probably scroll down and remove the former uses of it as well right here.

34
00:01:41.020 --> 00:01:42.310
But we'll come back to that in a second.

35
00:01:42.880 --> 00:01:43.270
All right.

36
00:01:43.270 --> 00:01:45.970
So up here, we can also rename the components.

37
00:01:45.970 --> 00:01:50.080
So instead of job types, this, of course, is going to be checkbox group.

38
00:01:51.220 --> 00:01:54.910
And that means we're importing it as well from checkbox group dot view.

39
00:01:56.960 --> 00:02:00.820
And I'm going to just click this and copy and paste it wherever it's needed.

40
00:02:00.830 --> 00:02:05.060
So right here we are obviously describing not job types now, but checkbox group.

41
00:02:05.630 --> 00:02:05.990
All right.

42
00:02:05.990 --> 00:02:11.090
So one big difference with our new checkbox group component is we're accepting three props.

43
00:02:11.390 --> 00:02:16.190
So what I'm going to do is I'm going to modify my create config factory function to have some default

44
00:02:16.190 --> 00:02:21.740
values for those props, but also allow any given test to provide whatever prop values it wants.

45
00:02:21.950 --> 00:02:26.360
So to kind of have a reasonable fallback, but also to allow customization in any given test.

46
00:02:26.690 --> 00:02:31.960
So as a reminder, the way that we can enable props in our configuration object is we simply add a props

47
00:02:31.970 --> 00:02:32.440
property.

48
00:02:32.720 --> 00:02:33.770
So right here, props.

49
00:02:35.280 --> 00:02:36.490
And we need three props.

50
00:02:36.510 --> 00:02:39.900
The first one is header and here's where we can provide a default value.

51
00:02:40.140 --> 00:02:41.760
So I'm just going to provide some header.

52
00:02:42.760 --> 00:02:49.210
And then for my unique value set, I'm going to use the basic instantiation syntax right here to create

53
00:02:49.210 --> 00:02:49.820
a new set.

54
00:02:50.710 --> 00:02:53.210
Let's give it a set of two values.

55
00:02:53.230 --> 00:02:55.150
Value A and value B.

56
00:02:55.180 --> 00:02:56.920
These are all just completely arbitrary.

57
00:02:57.190 --> 00:03:02.140
And as a reminder, if we pass an array of values to the set constructor right here, we're simply going

58
00:03:02.140 --> 00:03:04.330
to get a set object with these two values right here.

59
00:03:04.690 --> 00:03:09.430
And then finally, we need a mutation prop, and I'm just going to give this an arbitrary string value

60
00:03:09.430 --> 00:03:10.840
of some mutation.

61
00:03:12.190 --> 00:03:17.320
And finally, to allow every test to customize these props, I'm going to provide a props parameter

62
00:03:17.320 --> 00:03:17.920
right here.

63
00:03:18.220 --> 00:03:22.750
But I am going to make it optional by giving it a default value of an empty object.

64
00:03:22.960 --> 00:03:28.210
And then whatever that object is, either an empty object or a custom props object that each test will

65
00:03:28.210 --> 00:03:28.720
pass in.

66
00:03:28.930 --> 00:03:31.330
I'm going to do structure those props right here.

67
00:03:31.540 --> 00:03:34.300
So any test can customize what we have right here.

68
00:03:35.200 --> 00:03:35.530
All right.

69
00:03:35.830 --> 00:03:39.550
And with that, we are good to move through these tests and get them to work.

70
00:03:39.910 --> 00:03:42.720
So right now, we have one failing test suite and three failing tests.

71
00:03:42.730 --> 00:03:43.450
That is perfect.

72
00:03:43.840 --> 00:03:46.980
So moving on down here, we can obviously remove this former mocking out.

73
00:03:46.990 --> 00:03:47.800
We no longer need it.

74
00:03:48.550 --> 00:03:51.430
And this, of course, is going to be a checkbox root right here.

75
00:03:54.340 --> 00:03:54.850
All right.

76
00:03:55.300 --> 00:03:58.630
And we can see here we are clicking on the clickable area in the accordion.

77
00:03:58.630 --> 00:03:59.370
That makes sense.

78
00:03:59.380 --> 00:04:02.700
But here we are going for something with a data test of job type.

79
00:04:02.710 --> 00:04:04.950
This is no longer up to date.

80
00:04:04.960 --> 00:04:10.590
This is now going to be the actual value data test attribute right here, which is always going to be

81
00:04:10.590 --> 00:04:11.020
a value.

82
00:04:11.170 --> 00:04:14.170
That's not to be confused with the dynamic value right here.

83
00:04:14.170 --> 00:04:17.200
That is going to be the string in the set that we are earning over.

84
00:04:17.440 --> 00:04:21.460
This is what we're targeting right here because we want to get the labels to make sure we're displaying

85
00:04:21.460 --> 00:04:22.120
the right text.

86
00:04:22.390 --> 00:04:27.070
So right here, I'm going to look for all occurrences of the data test attribute set to value.

87
00:04:27.160 --> 00:04:29.230
We are using the find all method here.

88
00:04:29.530 --> 00:04:31.840
So this is no longer going to be job type labels.

89
00:04:31.840 --> 00:04:36.070
This is going to be something like checkbox labels or maybe input labels to be more generic.

90
00:04:36.400 --> 00:04:41.170
And right here I'm going to invoke map on those input labels that it finds and get the text inside each

91
00:04:41.170 --> 00:04:44.200
of these so we can maybe put this as input values.

92
00:04:46.000 --> 00:04:50.770
And so input values here is going to be the strings next to each checkbox, and that's going to be dependent

93
00:04:50.770 --> 00:04:52.960
on what I provide here in my sample set.

94
00:04:53.230 --> 00:04:58.510
So here, this is going to be, of course, value A and value B.

95
00:05:00.130 --> 00:05:04.900
Now just because I don't want the user to scroll up and have to understand where these values are going

96
00:05:04.900 --> 00:05:05.530
to come from.

97
00:05:05.680 --> 00:05:10.540
I'm once again going to declare my props in line here, so I'm going to declare a props object right

98
00:05:10.540 --> 00:05:10.900
here.

99
00:05:11.140 --> 00:05:16.060
And the only prop that I'm going to care about in this test is going to be a unique values, and I'm

100
00:05:16.060 --> 00:05:18.190
going to make it the exact same set here.

101
00:05:18.640 --> 00:05:22.300
And just to reiterate what we talked about earlier in the course, you might be thinking, but Boris,

102
00:05:22.300 --> 00:05:26.500
you're overwriting the prop unique values with a prop of unique values.

103
00:05:26.500 --> 00:05:27.880
That is the exact same value.

104
00:05:28.120 --> 00:05:28.930
And that is true.

105
00:05:28.930 --> 00:05:32.770
But the advantage of this approach is that the entire test becomes readable by itself.

106
00:05:33.040 --> 00:05:38.350
A reader has a better understanding that the value A and value B that we're testing for here is directly

107
00:05:38.350 --> 00:05:40.930
connected to the props and the prop called unique values.

108
00:05:41.110 --> 00:05:45.610
Imagine this test gets moved around and moves to the bottom of the file and the user sees value and

109
00:05:45.610 --> 00:05:48.640
value b they might have no clue where it's coming from here.

110
00:05:48.640 --> 00:05:50.620
We're giving them a little bit more of a hint in line.

111
00:05:50.740 --> 00:05:52.690
So I'm okay with this duplication.

112
00:05:52.690 --> 00:05:53.020
All right.

113
00:05:53.230 --> 00:05:57.400
Now, if we're using this props right here, we do have to pass that in here to our create config function.

114
00:05:57.610 --> 00:05:58.900
So make sure to do that right here.

115
00:05:59.230 --> 00:06:00.220
I'm going to pass in props.

116
00:06:00.610 --> 00:06:01.240
Save that.

117
00:06:01.240 --> 00:06:03.100
And now we are down to two failing tests.

118
00:06:04.000 --> 00:06:06.130
All right, let's move on to the next test.

119
00:06:06.130 --> 00:06:10.390
When User Clicks CheckBox, it communicates that user has selected checkbox for job type.

120
00:06:10.600 --> 00:06:11.710
That's no longer value.

121
00:06:11.710 --> 00:06:14.110
It's selected checkbox for value.

122
00:06:15.870 --> 00:06:16.260
All right.

123
00:06:16.260 --> 00:06:17.670
This was our former composed of all.

124
00:06:17.670 --> 00:06:20.770
We no longer need it so we can get rid of it here.

125
00:06:20.800 --> 00:06:23.840
Of course, we're going to mount not job types, but checkbox group.

126
00:06:25.680 --> 00:06:31.290
And this test is worried about calling the commit method, the mock commit method on our store with

127
00:06:31.290 --> 00:06:33.150
the right mutation and the right arguments.

128
00:06:33.150 --> 00:06:33.540
All right.

129
00:06:33.810 --> 00:06:38.820
So this mutation that we have right here is going to be dependent on the mutation that we provide in

130
00:06:38.820 --> 00:06:39.810
our props object.

131
00:06:40.020 --> 00:06:45.630
So right here, once again, I'm going to declare a props object and I'm going to give it a mutation

132
00:06:45.630 --> 00:06:46.140
property.

133
00:06:46.290 --> 00:06:48.510
And this can be whatever string you want.

134
00:06:48.510 --> 00:06:53.360
This could literally be anything we want as long as what we have here is what we put right here.

135
00:06:53.370 --> 00:06:56.760
And that way, once again, all of our logic is wrapped away in this test.

136
00:06:57.030 --> 00:07:01.980
So maybe I'll do something here, something different, like some mutation in all caps, just so we

137
00:07:01.980 --> 00:07:04.260
can test some mutation down below right here.

138
00:07:05.820 --> 00:07:08.250
All right, so we're going to mount the checkbox group.

139
00:07:08.250 --> 00:07:10.860
Let's make sure we also pass props to our create config function.

140
00:07:10.860 --> 00:07:11.610
That's very important.

141
00:07:11.970 --> 00:07:13.500
We're going to click up clickable area.

142
00:07:13.500 --> 00:07:17.100
We're going to click our according to expand it here.

143
00:07:17.100 --> 00:07:20.010
We're once again looking for a data test value of full time.

144
00:07:20.130 --> 00:07:21.810
So this is one of our set values.

145
00:07:22.020 --> 00:07:25.770
So if I want to use one of the set values, I want to make sure I have a set with those values.

146
00:07:25.980 --> 00:07:28.410
So how about we actually provide a set right here?

147
00:07:28.710 --> 00:07:32.850
So I'll do unique values and I'll provide a new set.

148
00:07:32.850 --> 00:07:38.460
And how about I keep an actual value full time to kind of give it a more real life scenario?

149
00:07:38.460 --> 00:07:42.150
This is an example of us using our new checkbox group for job types.

150
00:07:42.420 --> 00:07:46.380
So since I have something like full time here, it will be able to find that data test attribute right

151
00:07:46.380 --> 00:07:50.850
here and keep the rest of the logic here, including the array of full time.

152
00:07:51.000 --> 00:07:55.620
So all that we've basically altered is the logic of what the mutation name is, the mutation prop that

153
00:07:55.620 --> 00:08:00.420
we are passing into this component and we're verifying that when the user clicks the checkbox, this

154
00:08:00.420 --> 00:08:05.070
logic is going to run right here and commit that right mutation, providing the correct array of values.

155
00:08:05.100 --> 00:08:05.490
All right.

156
00:08:05.700 --> 00:08:07.980
And that is going to be enough for us to get this test to pass.

157
00:08:08.280 --> 00:08:09.930
Let's move on to the final test.

158
00:08:10.170 --> 00:08:15.270
This test cares about the push method being called, so it's testing the second half of our select value

159
00:08:15.270 --> 00:08:20.130
function that the router objects push method is called with the right argument once again that we can

160
00:08:20.130 --> 00:08:22.500
get rid of this form or composable.

161
00:08:22.500 --> 00:08:26.220
We're no longer importing it, so we do not need to mock it out once.

162
00:08:26.640 --> 00:08:27.570
Once again here.

163
00:08:27.570 --> 00:08:29.070
This is no longer job types.

164
00:08:29.070 --> 00:08:30.630
This is going to be checkbox group.

165
00:08:31.930 --> 00:08:36.460
Here we say navigates user to job results page to see fresh batch of filter jobs.

166
00:08:36.640 --> 00:08:40.630
There's really no reason for that to change because that still feels appropriate for what we're doing

167
00:08:40.630 --> 00:08:40.900
here.

168
00:08:41.260 --> 00:08:46.450
We still want to have a push constant so that we can reference it later as a just mock function to check

169
00:08:46.450 --> 00:08:48.400
whether it has been called with the right arguments.

170
00:08:48.730 --> 00:08:49.450
So that makes sense.

171
00:08:49.720 --> 00:08:54.490
The only thing that we're doing here once again, is we're using a data test, checking for full time.

172
00:08:54.580 --> 00:08:57.670
So I want to communicate to the reader where this is coming from.

173
00:08:57.970 --> 00:09:04.300
So once again, I'm going to declare a props object and I'm going to provide my unique values key here,

174
00:09:04.840 --> 00:09:07.120
and I'm going to have a new set with the value full time.

175
00:09:07.390 --> 00:09:09.610
Do I really care about the mutation here?

176
00:09:09.640 --> 00:09:10.420
Not really.

177
00:09:10.630 --> 00:09:15.940
This logic is going to run just fine with the default mutation I have defined right here.

178
00:09:16.210 --> 00:09:21.220
What this test really cares about is the push method being called, so I don't really care.

179
00:09:21.400 --> 00:09:25.780
The only reason that I'm caring about the unique values is because we're referencing full time right

180
00:09:25.780 --> 00:09:26.110
here.

181
00:09:26.320 --> 00:09:29.110
So I don't want the reader to be confused as to where that's coming from.

182
00:09:29.380 --> 00:09:31.040
So here I'm going to define my props.

183
00:09:31.060 --> 00:09:32.350
I'm going to pass them in right here.

184
00:09:33.730 --> 00:09:38.440
That's going to allow the component to have the full time data that's actually defined on one of the

185
00:09:38.440 --> 00:09:38.800
inputs.

186
00:09:38.980 --> 00:09:43.660
I'm going to check it and then I'm going to verify that push has been called with the right name of

187
00:09:43.660 --> 00:09:44.200
job result.

188
00:09:44.560 --> 00:09:44.860
All right.

189
00:09:44.860 --> 00:09:47.110
So with that, we can see that our test is passing.

190
00:09:47.110 --> 00:09:50.860
So now we have a wonderful test suite for our new checkbox group component.

191
00:09:51.100 --> 00:09:55.510
And you can see it was pretty simple to move from our previous test to this generic one, and now we

192
00:09:55.510 --> 00:10:00.070
get the benefits of this generic component that can basically do any kind of checkbox script we want

193
00:10:00.070 --> 00:10:02.350
on the left hand side of our page.

194
00:10:02.740 --> 00:10:03.040
All right.

195
00:10:03.040 --> 00:10:06.040
That's all there is to cover in this lesson and also in this section.

196
00:10:06.040 --> 00:10:08.530
So let's wrap up everything in the very next lesson.

197
00:10:08.740 --> 00:10:09.370
I'll see you there.
