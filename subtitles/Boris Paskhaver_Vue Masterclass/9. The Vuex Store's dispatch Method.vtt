WEBVTT
1
00:00:00.450 --> 00:00:01.260
Okay.

2
00:00:01.260 --> 00:00:05.430
So I have two files open in voice code on the right hand side.

3
00:00:05.430 --> 00:00:11.640
I have our index case file in our store folder where we have configured all of our logic regarding view

4
00:00:11.670 --> 00:00:12.020
X.

5
00:00:12.300 --> 00:00:15.810
And on the left hand side I have our job listings component.

6
00:00:16.170 --> 00:00:20.670
Now as a reminder, this is the component where we are currently fetching our jobs.

7
00:00:20.820 --> 00:00:23.940
We're doing so in this mounted lifecycle hook right here.

8
00:00:24.150 --> 00:00:27.540
This is now the logic that we also have in our get jobs function.

9
00:00:27.780 --> 00:00:33.540
And once we receive that array of jobs, we are writing it to a local data property or in other words,

10
00:00:33.660 --> 00:00:34.950
local component state.

11
00:00:35.100 --> 00:00:39.990
Right here we have this jobs array, it starts out empty and they are overwriting it here.

12
00:00:40.260 --> 00:00:46.980
And our initial goal was to move all of this logic away from job listings and now into view X and now

13
00:00:46.980 --> 00:00:48.780
we have that functionality to do that.

14
00:00:49.050 --> 00:00:54.420
So what I'd like to do in this lesson is swap this so that we're no longer relying on local state,

15
00:00:54.540 --> 00:00:57.420
but rather relying on this array right here.

16
00:00:57.960 --> 00:01:01.830
All right, so let's start putting those pieces together and we'll talk through them step by step.

17
00:01:02.190 --> 00:01:07.560
So the first thing I'm going to do is right here, I'm going to import that helper function called Map

18
00:01:07.560 --> 00:01:07.980
State.

19
00:01:08.490 --> 00:01:12.600
The reason we're going to need Map State is because we're going to need to map or connect part of our

20
00:01:12.600 --> 00:01:14.880
view store state to our component.

21
00:01:15.180 --> 00:01:16.650
So this is going to come from View X.

22
00:01:17.040 --> 00:01:22.470
And what we need to connect to, of course, is this jobs data property right here in our view X Store.

23
00:01:22.920 --> 00:01:26.100
So right here, I'm going to comment out our data.

24
00:01:26.100 --> 00:01:27.960
We're going to remove it entirely just a second.

25
00:01:28.560 --> 00:01:34.410
But just to show you everything side by side here I have this and then computed right at the bottom

26
00:01:34.410 --> 00:01:34.680
here.

27
00:01:34.980 --> 00:01:37.980
What I'm going to do is invoke that map state helper function.

28
00:01:38.190 --> 00:01:42.900
And as a reminder, the way this works is this returns an object and we want to make sure to do structure

29
00:01:42.900 --> 00:01:44.280
those properties in that object.

30
00:01:44.520 --> 00:01:47.250
So they all are part of our top level computed properties.

31
00:01:47.550 --> 00:01:52.920
And then the simplest way to use Map State is to provide an array, and then that array has strings

32
00:01:52.920 --> 00:01:58.470
representing or the view store properties that we want to make available as computed properties on this

33
00:01:58.470 --> 00:01:58.950
component.

34
00:01:59.250 --> 00:02:06.240
So by simply writing jobs right here, I am referencing this jobs array right here and now this component

35
00:02:06.240 --> 00:02:11.640
will have access to this dot jobs in this component, but it's no longer referencing this thing.

36
00:02:11.760 --> 00:02:14.730
It's referencing our view X store jobs array.

37
00:02:15.210 --> 00:02:22.200
All right and whenever this piece updates so well the computed property right here okay similarly we

38
00:02:22.200 --> 00:02:27.300
no longer want to make this API call anymore in our mounted lifecycle hook.

39
00:02:27.300 --> 00:02:28.290
What do we want to do?

40
00:02:28.500 --> 00:02:34.890
We want to run this action, the fetch jobs action, because what is this asynchronous action going

41
00:02:34.890 --> 00:02:35.280
to do?

42
00:02:35.550 --> 00:02:37.470
It's going to run our get jobs function.

43
00:02:38.400 --> 00:02:40.740
It's going to get that array of jobs asynchronously.

44
00:02:40.740 --> 00:02:42.180
It's going to wait as long as it needs.

45
00:02:42.390 --> 00:02:48.540
Then it's automatically going to commit a mutation which will save the new array of jobs to our UCS

46
00:02:48.540 --> 00:02:48.870
store.

47
00:02:49.110 --> 00:02:54.180
And once that updates what's going to happen, our computed property will update and this component

48
00:02:54.180 --> 00:02:55.410
will get those changes.

49
00:02:55.770 --> 00:03:00.240
And once it has those jobs, it'll be able to do the exact same thing it's always been doing, which

50
00:03:00.240 --> 00:03:01.680
is iterating over all of them.

51
00:03:01.680 --> 00:03:04.530
In this case, it's displayed jobs, but the same logic will apply.

52
00:03:04.770 --> 00:03:08.670
It's going to be able to iterate over them and render those job listings as a reminder.

53
00:03:08.790 --> 00:03:13.440
Display Jobs is reliant on this type jobs, and this type jobs will still exist.

54
00:03:13.440 --> 00:03:15.120
We're just going to get it from a different place.

55
00:03:15.120 --> 00:03:15.810
The View Store.

56
00:03:16.170 --> 00:03:21.180
So right here in our mounted lifecycle, look, I'm going to remove this code.

57
00:03:21.510 --> 00:03:25.830
And you may recall that every component has access to a dollar sign store property.

58
00:03:26.910 --> 00:03:29.700
And the only thing that's left to learn is how do we run an action?

59
00:03:29.940 --> 00:03:34.470
What we learned earlier in the course that if we want to run a mutation, we have to call the commit

60
00:03:34.470 --> 00:03:36.210
method for an action.

61
00:03:36.210 --> 00:03:40.500
We have a similar method, but a different name, and that method is dispatch.

62
00:03:41.640 --> 00:03:45.810
And what dispatch accepts is the name of an action as a string.

63
00:03:46.050 --> 00:03:51.300
It works basically the exact same way as Commit does, except commit is for mutations and dispatch is

64
00:03:51.300 --> 00:03:52.560
for asynchronous actions.

65
00:03:52.800 --> 00:03:58.020
So we have to give this method the name of the action we want to run, which is fetch jobs, which you

66
00:03:58.170 --> 00:04:02.130
which we have conveniently available as an export of the string constant right here.

67
00:04:02.370 --> 00:04:06.840
So to avoid typing this in line and making any accidental mistakes, I'm going to scroll back up.

68
00:04:08.160 --> 00:04:10.860
And here what I'm going to do is I'm going to import.

69
00:04:12.400 --> 00:04:15.070
My thatch job's constant.

70
00:04:15.250 --> 00:04:18.160
And that's going to come from our index just file in our store folder.

71
00:04:18.340 --> 00:04:23.620
So right here, the source directory, the store directory in there that's going to reference the index

72
00:04:23.740 --> 00:04:24.200
asphalt.

73
00:04:24.220 --> 00:04:25.480
We're going to import this constant.

74
00:04:25.840 --> 00:04:28.870
And right here, we're going to dispatch fetch jobs.

75
00:04:29.230 --> 00:04:33.220
So what this is telling is view X, run the fetch jobs action.

76
00:04:33.220 --> 00:04:35.200
And that will make our asynchronous request.

77
00:04:35.410 --> 00:04:35.710
All right.

78
00:04:35.980 --> 00:04:39.760
With that, we can delete our former reference to data right here.

79
00:04:39.770 --> 00:04:40.120
We know, know.

80
00:04:40.420 --> 00:04:43.970
Look, we no longer have this local component data we don't care about.

81
00:04:44.290 --> 00:04:46.810
And this component is no longer using Axios.

82
00:04:47.020 --> 00:04:48.520
So we can remove Axios right here.

83
00:04:50.080 --> 00:04:50.770
And that's it.

84
00:04:50.800 --> 00:04:51.160
All right.

85
00:04:51.250 --> 00:04:53.230
One more time before we go to the browser.

86
00:04:53.230 --> 00:04:56.950
I know I'm being a little redundant, but I just want to explain the entire flow of how this is going

87
00:04:56.950 --> 00:04:59.020
to work from step one to step ten.

88
00:04:59.350 --> 00:05:04.960
So step one, this component is going to render in a browser, which means Vue is going to run the mounted

89
00:05:04.960 --> 00:05:10.450
lifecycle look, that mounted lifecycle hook is going to talk to the book store and dispatch an action

90
00:05:10.450 --> 00:05:16.090
of fetch jobs that's going to kick off this fetch jobs action, which is basically just an asynchronous

91
00:05:16.090 --> 00:05:20.740
method that Vue X will pass a context object to this asynchronous method.

92
00:05:20.740 --> 00:05:27.070
It will rely on our get jobs function to fetch our data from our backend, in this case Jason server.

93
00:05:27.250 --> 00:05:32.200
And once it receives that data, no matter how long it takes, it's then going to commit a mutation.

94
00:05:32.200 --> 00:05:37.810
It's going to run the receive jobs mutation right here, passing in the new array of valid job listings.

95
00:05:38.170 --> 00:05:43.200
What's going to happen when the mutation launch is it's going to overwrite the View Store State.

96
00:05:43.210 --> 00:05:47.890
So now it's going to set the jobs property to our new array, which means this state is now going to

97
00:05:47.890 --> 00:05:48.850
be an actual right.

98
00:05:49.180 --> 00:05:54.610
And now our map state function is going to realize, hey, the view store state changed this to jobs

99
00:05:54.610 --> 00:05:55.690
is now something different.

100
00:05:55.870 --> 00:05:57.760
It used to be a regular array, an empty.

101
00:05:57.760 --> 00:05:59.800
Right now it's an array of 100 jobs.

102
00:06:00.040 --> 00:06:04.990
So it's going to recalculate itself, which means the state jobs will be something new, which means

103
00:06:04.990 --> 00:06:10.810
our displayed jobs computed property, which depends on the state jobs, will also have to rerun and

104
00:06:10.810 --> 00:06:13.090
reevaluate because this value is changed.

105
00:06:13.330 --> 00:06:16.210
Any time state changes Vue reruns, right?

106
00:06:16.210 --> 00:06:17.740
That's the whole reactivity principle.

107
00:06:17.860 --> 00:06:22.530
When Thing A updates, thing B notices and updates itself as well.

108
00:06:22.540 --> 00:06:28.120
That's the whole idea of reactivity display jobs will re update to have this slice of the first ten

109
00:06:28.120 --> 00:06:29.920
jobs of our new array of 100 values.

110
00:06:30.070 --> 00:06:32.230
We're going to render that and that's what we're going to see in the browser.

111
00:06:32.530 --> 00:06:34.870
So let's head back to Chrome.

112
00:06:36.010 --> 00:06:38.170
Let's refresh this page now with our new code.

113
00:06:39.210 --> 00:06:41.010
And we can see that everything is still working.

114
00:06:41.490 --> 00:06:41.880
All right.

115
00:06:42.150 --> 00:06:48.360
Let me show you as well that if I open up my view DevTools and I go and explore my job listings component

116
00:06:48.480 --> 00:06:51.150
if this thing will work, which sometimes it does not.

117
00:06:51.570 --> 00:06:54.600
Let me see if I can refresh here and get some changes going.

118
00:06:55.830 --> 00:06:56.070
All right.

119
00:06:56.070 --> 00:06:57.630
Give me just a minute to figure this out.

120
00:06:58.380 --> 00:06:58.950
Okay.

121
00:06:58.950 --> 00:07:00.150
So I think I figured it out.

122
00:07:00.150 --> 00:07:03.270
I moved from the View X panel to the components panel.

123
00:07:03.300 --> 00:07:03.880
There we go.

124
00:07:03.900 --> 00:07:05.610
Here we have a list of all of our components.

125
00:07:05.880 --> 00:07:07.170
Very silly mistake by me.

126
00:07:07.410 --> 00:07:12.180
And of course, in my job results view, in that component, I have all of my components.

127
00:07:12.420 --> 00:07:16.920
And in the top level job listings component, you'll notice we have all of our computed properties,

128
00:07:17.160 --> 00:07:20.400
and below we have this new section called the View X Bindings.

129
00:07:20.580 --> 00:07:27.150
And this is our reference to the jobs property coming from View X, coming from our store.

130
00:07:27.360 --> 00:07:30.960
So by expand this, it's going to be the exact same hundred jobs that we saw earlier.

131
00:07:31.110 --> 00:07:35.760
But now they're residing within our View X Store and we are connected to them in this component.

132
00:07:36.000 --> 00:07:38.670
And all we're doing is slicing the first ten jobs from that.

133
00:07:39.420 --> 00:07:39.610
All right.

134
00:07:39.630 --> 00:07:40.650
Everything still works.

135
00:07:40.650 --> 00:07:45.510
If I navigate to my next page and fill going to slice the next ten jobs, but I'm going to slice them

136
00:07:45.510 --> 00:07:49.900
from a different set of ten from the exact same view array.

137
00:07:50.220 --> 00:07:51.370
So nothing has changed.

138
00:07:51.390 --> 00:07:54.810
We're just changing where our data is being stored.

139
00:07:54.840 --> 00:07:57.270
It's now in view X, it's now not in a component.

140
00:07:57.750 --> 00:08:00.630
So now this component has no local job state.

141
00:08:00.630 --> 00:08:02.310
It's only a computed property coming from you.

142
00:08:02.310 --> 00:08:04.860
X Your view x devtools will tell you this, by the way.

143
00:08:05.040 --> 00:08:05.400
All right.

144
00:08:05.610 --> 00:08:07.770
And just to show that everything worked, if I go to view X.

145
00:08:08.920 --> 00:08:09.940
Here's the U.S. state.

146
00:08:10.120 --> 00:08:15.730
We can see we have our jobs array right here, which means that our entire async process worked.

147
00:08:15.730 --> 00:08:16.780
We ran the action.

148
00:08:16.870 --> 00:08:17.920
We got the jobs.

149
00:08:17.920 --> 00:08:21.280
We committed to the synchronous mutation to get this right here.

150
00:08:21.460 --> 00:08:26.320
And the beautiful part of this approach, again, is of ten other components, care about what jobs

151
00:08:26.320 --> 00:08:26.620
is.

152
00:08:26.800 --> 00:08:31.240
As soon as this updates, all ten of those components will be aware of that change.

153
00:08:31.630 --> 00:08:31.960
All right.

154
00:08:32.140 --> 00:08:35.080
So this is sort of our centralized source of truth.

155
00:08:35.260 --> 00:08:40.300
This is where we keep all that global data and that components can rely on it and send messages that

156
00:08:40.300 --> 00:08:46.030
they want to update it, such as mutations or actions, etc. And any component can talk to you and you

157
00:08:46.180 --> 00:08:48.520
will distribute those changes to anybody who cares.

158
00:08:48.670 --> 00:08:51.070
That is the genius part of this view X design.

159
00:08:51.550 --> 00:08:54.460
All right, so we see that everything is working in our browser.

160
00:08:54.460 --> 00:08:58.480
Unfortunately, our new implementation will break some of our tests, so we're going to go ahead and

161
00:08:58.480 --> 00:08:59.770
fix them in the very next lesson.
