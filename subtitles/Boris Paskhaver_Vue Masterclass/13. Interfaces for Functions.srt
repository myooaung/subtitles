1
00:00:00,470 --> 00:00:01,490
All right.

2
00:00:01,490 --> 00:00:07,400
So a couple lessons ago, we learned about interfaces and how they can help us reduce duplication.

3
00:00:07,550 --> 00:00:14,450
When it comes to shared object types, as it turns out, we can also use interfaces to reduce duplication

4
00:00:14,450 --> 00:00:17,120
when it comes to function type definitions.

5
00:00:17,420 --> 00:00:18,710
So let me give you an example.

6
00:00:18,950 --> 00:00:22,120
Let's say I have a program where I have two functions.

7
00:00:22,130 --> 00:00:25,220
My functions are going to be multiply and sum.

8
00:00:25,520 --> 00:00:31,370
My multiply function will accept two number parameters, multiply them together and return the product,

9
00:00:31,580 --> 00:00:37,190
while my sum function will accept two number parameters, add them together and return the sum.

10
00:00:37,490 --> 00:00:39,140
So my code would look something like this.

11
00:00:39,440 --> 00:00:44,600
Here is my multiply arrow function and here I'm going to declare two parameters A and B.

12
00:00:44,780 --> 00:00:46,520
They're both going to be of type number.

13
00:00:47,500 --> 00:00:51,370
And then my return value of this error function will be number as well.

14
00:00:51,640 --> 00:00:58,870
And right here I'm going to use an implicit return to return the value of eight times B, so I'm multiplying

15
00:00:58,870 --> 00:00:59,860
A and B together.

16
00:00:59,890 --> 00:01:00,940
This is totally valid.

17
00:01:00,940 --> 00:01:01,930
TypeScript syntax.

18
00:01:02,290 --> 00:01:07,930
Now below I'll define a very similar function called Sum, and sum is going to have a very similar type

19
00:01:07,930 --> 00:01:08,470
definition.

20
00:01:08,470 --> 00:01:10,090
It's going to accept two parameters.

21
00:01:10,450 --> 00:01:13,900
The first is going to be a number, and the second is also going to be a number.

22
00:01:14,200 --> 00:01:18,130
And the final return value of my sum function is also going to be a number.

23
00:01:18,460 --> 00:01:23,110
The only difference is we're going to add A and B together instead of multiplying them.

24
00:01:23,500 --> 00:01:27,070
So once again, as always, we can see a little bit of duplication.

25
00:01:27,280 --> 00:01:31,630
And the duplication here is not in the actual logic of the implementation of the function.

26
00:01:31,930 --> 00:01:33,970
The duplication is in the type definition.

27
00:01:34,150 --> 00:01:36,550
Both of these functions have a very similar type.

28
00:01:36,820 --> 00:01:41,590
They are both a function that has a parameter list that is two parameters long.

29
00:01:41,980 --> 00:01:44,230
It takes a first parameter, which is a number.

30
00:01:44,380 --> 00:01:49,000
A second parameter that is a number, and then it produces a return value that is also a number.

31
00:01:49,270 --> 00:01:53,320
So that in itself is a specific type of function definition, right?

32
00:01:53,470 --> 00:01:55,680
Because there's many different ways that we can have a function.

33
00:01:55,690 --> 00:01:58,840
We can have a function with three arguments or five arguments.

34
00:01:59,020 --> 00:02:04,180
We can have a function with a number of return value, a string return value, an array of return value.

35
00:02:04,390 --> 00:02:09,670
So even this combination of types right here is its own unique kind of type definition.

36
00:02:09,820 --> 00:02:14,830
In the same way that we saw a couple lessons ago with our interface, how a video game character objects

37
00:02:14,830 --> 00:02:16,780
shape was something that was reusable.

38
00:02:16,960 --> 00:02:18,520
The same principle applies here.

39
00:02:18,640 --> 00:02:25,630
This combination of types is in itself a reusable definition, and so we can extract it to an interface.

40
00:02:25,780 --> 00:02:30,430
And the benefit of doing that is that we can then reuse that interface in many different places throughout

41
00:02:30,430 --> 00:02:34,930
our app and not have to retype all of this code and also get the benefits of type safety.

42
00:02:35,200 --> 00:02:37,420
So let me show you how that's going to work right here.

43
00:02:37,420 --> 00:02:39,010
I'm going to use my interface word.

44
00:02:39,820 --> 00:02:44,260
Remember, that is a built in TypeScript keyword and then we have to give each interface a name.

45
00:02:44,470 --> 00:02:51,160
So I'm going to call my interface to number math func basically a function that has a math function

46
00:02:51,160 --> 00:02:52,870
that involves two numbers, right?

47
00:02:52,870 --> 00:02:57,010
A nice descriptive term that can describe what I want to apply it to below.

48
00:02:57,370 --> 00:02:57,590
Right?

49
00:02:57,820 --> 00:03:03,040
The way that we provide a type definition for a function is inside these curly braces.

50
00:03:03,160 --> 00:03:10,390
We write our parentheses to represent our function arguments and their types, and then afterwards we

51
00:03:10,390 --> 00:03:14,470
provide a colon and then provide the return value of my function.

52
00:03:14,710 --> 00:03:18,250
So here what I'm going to do is I'm going to say the exact same thing as below.

53
00:03:18,430 --> 00:03:22,240
My function is going to have a parameter called A, which is going to be a number.

54
00:03:22,510 --> 00:03:25,990
And then the second argument will be parameter B also of type number.

55
00:03:26,200 --> 00:03:29,860
And then the function is going to produce a return value of type number as well.

56
00:03:30,430 --> 00:03:30,820
All right.

57
00:03:31,000 --> 00:03:35,890
So I'm using the interface keyword, I'm giving it a name and I'm describing what a type of function

58
00:03:35,890 --> 00:03:37,090
definition could look like.

59
00:03:37,420 --> 00:03:37,660
Right.

60
00:03:37,660 --> 00:03:39,790
There's many different ways a function definition could look.

61
00:03:39,880 --> 00:03:43,420
This is an example of a two number math func right.

62
00:03:43,690 --> 00:03:50,290
So now the advantage of this approach is we can get rid of all of these explicit types by simply telling

63
00:03:50,320 --> 00:03:55,900
TypeScript that Multiply is going to implement or honor the two number math func interface.

64
00:03:56,140 --> 00:03:58,090
So let me show you how that's going to work right here.

65
00:03:58,090 --> 00:04:03,970
I'm going to get rid of this explicit declaration of number and same thing right here and same thing

66
00:04:03,970 --> 00:04:06,160
right here for my functions, return, value type.

67
00:04:06,430 --> 00:04:10,570
And notice that TypeScript complains because by default it doesn't know what A and B is.

68
00:04:10,570 --> 00:04:13,060
It's going to assume that it's an any type and that's not good.

69
00:04:13,210 --> 00:04:16,810
That's a TypeScript violation that defeats the entire purpose of TypeScript.

70
00:04:17,110 --> 00:04:22,300
But what I can do is tell TypeScript right here that Multiply is going to honor this interface right

71
00:04:22,330 --> 00:04:22,600
here.

72
00:04:22,870 --> 00:04:26,920
The way I do that is providing a colon and then of course writing the name of my type.

73
00:04:26,920 --> 00:04:28,480
In this case, it's the interface above.

74
00:04:28,720 --> 00:04:31,930
So this is going to be a two number math func.

75
00:04:33,280 --> 00:04:38,440
So notice automatically that the errors are going to go away because TypeScript now knows that A and

76
00:04:38,440 --> 00:04:40,360
B are not going to be of the any type.

77
00:04:40,600 --> 00:04:46,390
TypeScript now knows that these are going to be of type number because multiply must honor the two number

78
00:04:46,390 --> 00:04:49,030
math that I told TypeScript it was going to be.

79
00:04:49,330 --> 00:04:54,310
So if I hover my mouse over multiply you can see it's going to be of type to number math func and what

80
00:04:54,310 --> 00:04:54,910
does that type?

81
00:04:55,030 --> 00:04:59,860
It is a function right here that accepts two parameters of type number and also returns a number.

82
00:05:00,040 --> 00:05:05,380
So TypeScript understands that this function is going to live up to this contract, this promise.

83
00:05:05,650 --> 00:05:09,700
And the advantage, of course, is we can have a lot less code, a lot less typing, and also a lot

84
00:05:09,700 --> 00:05:10,540
more reusability.

85
00:05:10,750 --> 00:05:13,060
So some is also a two number math func.

86
00:05:13,210 --> 00:05:16,150
So we can once again provide to number math link right here.

87
00:05:16,270 --> 00:05:20,770
And that spares us the need to explicitly declare all of these types right here because TypeScript is

88
00:05:20,770 --> 00:05:22,480
automatically going to infer them.

89
00:05:22,870 --> 00:05:23,680
So just like that.

90
00:05:24,910 --> 00:05:25,840
And there we go.

91
00:05:26,080 --> 00:05:32,020
So whenever we have a situation where a, a function has a very similar signature or rather multiple

92
00:05:32,020 --> 00:05:36,100
functions or multiple methods in your program have a very similar signature.

93
00:05:36,280 --> 00:05:43,450
You can extract that common in, you can extract a common type definition that common function logic,

94
00:05:43,570 --> 00:05:45,970
the parameters and their types and the return value.

95
00:05:46,000 --> 00:05:51,130
It's type to its own interface that you can then reuse throughout all of those multiple functions,

96
00:05:51,250 --> 00:05:54,550
sparing you the need to duplicate that code and duplicate that logic.

97
00:05:54,910 --> 00:05:55,300
All right.

98
00:05:55,420 --> 00:05:56,980
That's interfaces for functions.

99
00:05:56,980 --> 00:05:58,210
That's all there is to cover here.

100
00:05:58,210 --> 00:05:59,770
And I will see you in the next lesson.
