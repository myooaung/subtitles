WEBVTT
1
00:00:00.570 --> 00:00:01.500
Okay.

2
00:00:01.510 --> 00:00:06.850
So the next Gardner method we're going to define is going to be very similar to this getter right here.

3
00:00:07.120 --> 00:00:13.450
But instead of filter jobs by organizations, we're obviously going to have filter jobs by job types

4
00:00:13.660 --> 00:00:18.490
once again copying the implementation we used in the previous section for organizations.

5
00:00:18.850 --> 00:00:23.710
So here in my getters that test that Yes file, I'm just going to collapse this test right here.

6
00:00:24.010 --> 00:00:29.560
We have this whole section for filter jobs by organizations and we have the benefit in that.

7
00:00:29.560 --> 00:00:32.710
We discovered a bug earlier on in the previous section.

8
00:00:32.920 --> 00:00:39.100
Remember that we first needed to check that the user, if the user had no selected organizations because

9
00:00:39.100 --> 00:00:44.620
if that was the case, we wanted to return all the jobs and that would avoid a bug right here when we

10
00:00:44.620 --> 00:00:48.130
were iterating over a selected organization's array that was empty.

11
00:00:48.430 --> 00:00:54.460
So now knowing that we can use that to our benefit by basically copying these exact two tests, except

12
00:00:54.460 --> 00:00:59.050
making them for a brand new getter called filter jobs by job types.

13
00:00:59.350 --> 00:01:05.980
So I'm going to do here is I'm going to copy this entire describe section for my filter jobs by organizations

14
00:01:06.160 --> 00:01:10.270
and I'm going to modify it because our tests and our implementation are going to be very similar.

15
00:01:10.630 --> 00:01:15.010
So right here, I'm going to copy this entire section from lines 18 to 55.

16
00:01:15.190 --> 00:01:16.480
There are things collapsed here.

17
00:01:16.780 --> 00:01:20.560
And then right below my unique job types tests, I'm going to paste this.

18
00:01:21.130 --> 00:01:21.490
All right.

19
00:01:21.790 --> 00:01:26.260
And let me scroll up and we're just going to alter a couple of these text fields right here.

20
00:01:26.620 --> 00:01:31.000
So instead of organizations, obviously, this is going to be job types that's going to be the name

21
00:01:31.000 --> 00:01:32.530
for a new getter here.

22
00:01:32.530 --> 00:01:35.620
Identifies jobs that are associated with the given organizations.

23
00:01:35.800 --> 00:01:38.110
No, we want the given job types.

24
00:01:39.800 --> 00:01:40.160
Here.

25
00:01:40.160 --> 00:01:42.380
We no longer care about the organization once again.

26
00:01:42.380 --> 00:01:44.150
We actually just care about the job type.

27
00:01:44.360 --> 00:01:46.010
So, once again, let me do a job type.

28
00:01:47.300 --> 00:01:49.730
Let me quickly change these two instead of Google here.

29
00:01:50.000 --> 00:01:56.300
We'll have full time here, will have temporary here, will have a job type of part time.

30
00:01:58.100 --> 00:01:59.510
So we have three different job types.

31
00:01:59.840 --> 00:02:05.660
And in my selected job types array right here, we can provide some sample selection.

32
00:02:05.670 --> 00:02:09.410
So let's say the user selects full time and part time.

33
00:02:09.830 --> 00:02:14.360
In that case, we want to filter to only have the first two jobs here and here.

34
00:02:14.780 --> 00:02:19.850
So of course filter jobs are still valid, but instead of calling these filter jobs by organizations

35
00:02:19.850 --> 00:02:25.250
getter, what I want to call is these filter jobs by job types getter which we have not yet defined.

36
00:02:25.700 --> 00:02:29.750
We're going to pass in our state object and we're going to get back an array of filter jobs.

37
00:02:29.750 --> 00:02:34.550
And of course, we want this for the first job right here with a job type of full time.

38
00:02:35.630 --> 00:02:40.310
And we want this job type right here with a job type of part time.

39
00:02:40.490 --> 00:02:44.810
And that's going to verify that we are filtering based on what we have in this array right here.

40
00:02:45.050 --> 00:02:46.940
So very similar test to what we have above.

41
00:02:47.090 --> 00:02:53.420
We're using one slice of the view store state selected job types to filter from this master array of

42
00:02:53.420 --> 00:02:56.780
100 jobs in the real world to just the ones that fit the criteria.

43
00:02:56.990 --> 00:02:59.630
So full time and part time belong in this array.

44
00:02:59.720 --> 00:03:04.130
So I want those two to be my filter jobs that are returned by this eventual getter.

45
00:03:04.370 --> 00:03:05.390
Why is it a getter?

46
00:03:05.390 --> 00:03:11.030
Because we're working with initial data from jobs that is derived data, computed data, calculated

47
00:03:11.030 --> 00:03:11.360
data.

48
00:03:11.540 --> 00:03:16.040
We're just getting a subset of our original jobs array so we can define this in a getter.

49
00:03:16.040 --> 00:03:19.040
We don't want to duplicate the state and have something like a filter.

50
00:03:19.040 --> 00:03:19.530
Jobs.

51
00:03:19.790 --> 00:03:21.410
Slice of view state.

52
00:03:21.410 --> 00:03:22.160
We don't want that.

53
00:03:22.160 --> 00:03:24.110
We use getters for this exact same reason.

54
00:03:25.060 --> 00:03:31.060
So down below, when the user has not selected any job types, it returns all jobs.

55
00:03:31.300 --> 00:03:33.850
So what I can do here is actually copy the state from above.

56
00:03:35.640 --> 00:03:36.550
Down below.

57
00:03:36.570 --> 00:03:38.130
Let's replace the state right here.

58
00:03:38.310 --> 00:03:43.710
Except, of course, when the user has not selected any job types, these selected job types array is

59
00:03:43.710 --> 00:03:45.060
going to be empty.

60
00:03:45.510 --> 00:03:52.680
So right here we're going to invoke a getter called filter jobs by job types passing in state.

61
00:03:53.040 --> 00:03:57.810
And then our filter jobs, of course, is going to be the complete original array of jobs.

62
00:03:58.050 --> 00:04:01.170
So I can simply copy and paste these three objects from above.

63
00:04:01.440 --> 00:04:07.650
There are no filters to apply, so we should get all of our original jobs.

64
00:04:08.550 --> 00:04:10.260
All right, so those are going to be our two tests.

65
00:04:10.500 --> 00:04:15.060
Again, we're just sort of copying and pasting and modifying the previous tests for organizations.

66
00:04:15.210 --> 00:04:15.510
All right.

67
00:04:15.840 --> 00:04:18.660
So when the user is not selecting any job types, it returns all jobs.

68
00:04:18.870 --> 00:04:21.300
And with that, we are good to right our implementation.

69
00:04:21.540 --> 00:04:24.590
So the first thing I'm going to do is go to my constants file.

70
00:04:24.600 --> 00:04:28.050
I want to define the constant that's going to be the name of my eventual getter.

71
00:04:28.410 --> 00:04:30.720
And let's put it right here under job types.

72
00:04:31.110 --> 00:04:38.910
I'm going to call it filtered jobs by job types, very similar to my naming scheme above.

73
00:04:39.180 --> 00:04:44.220
And here we're going to have my filter jobs by job types string.

74
00:04:44.230 --> 00:04:45.960
Make sure to remember that s at the end.

75
00:04:46.410 --> 00:04:47.400
So let's save that.

76
00:04:47.700 --> 00:04:50.850
Let's go back to our getters far right here at the very top.

77
00:04:50.850 --> 00:04:54.300
We can import filter jobs by job types.

78
00:04:54.300 --> 00:04:59.880
That is the newly defined constant, and we can use that as the basis of defining my new getter right

79
00:04:59.880 --> 00:05:02.760
here called filter jobs by job type.

80
00:05:04.230 --> 00:05:05.040
By job types.

81
00:05:05.430 --> 00:05:10.260
Keep in mind, the latter is a method that will always receive the view store state as the first argument.

82
00:05:10.470 --> 00:05:11.700
What do we want to do here?

83
00:05:11.820 --> 00:05:14.280
Something very similar to what we're doing right here.

84
00:05:14.520 --> 00:05:17.070
The first thing we want to do is return all the jobs.

85
00:05:17.880 --> 00:05:20.250
If the user has not selected any job types.

86
00:05:20.610 --> 00:05:25.290
So on my view store state, I will have my selected job types array.

87
00:05:26.280 --> 00:05:26.700
All right.

88
00:05:26.700 --> 00:05:29.700
And if the array has no elements in its length will be zero.

89
00:05:29.970 --> 00:05:32.370
So I'm going to check if the length of that area is zero.

90
00:05:32.400 --> 00:05:38.130
The user has no selected job types, so I want to return every job I have in my array.

91
00:05:38.130 --> 00:05:39.850
So just return state to jobs.

92
00:05:41.130 --> 00:05:43.800
And then later on, we're going to do something very similar to what we do above.

93
00:05:43.950 --> 00:05:49.200
We're going to take our jobs array and we're going to filter it to those jobs that have a job type that

94
00:05:49.200 --> 00:05:52.290
has found within these selected job types array.

95
00:05:52.680 --> 00:05:55.920
So right here, I'm going to return state type jobs.

96
00:05:56.200 --> 00:05:56.760
Filter.

97
00:05:57.060 --> 00:06:01.050
Filter, as a reminder, is an array method that returns a new array.

98
00:06:01.230 --> 00:06:06.210
So whatever array we return, here is what we're going to return as the final return value of the getter,

99
00:06:06.360 --> 00:06:08.340
which is exactly what I have in my test in the right.

100
00:06:08.730 --> 00:06:10.830
We're going to iterate over every single job.

101
00:06:12.110 --> 00:06:14.990
What I want to do here is I want to take my state.

102
00:06:15.470 --> 00:06:19.670
I want to get these selected job types array on my viewers state.

103
00:06:19.970 --> 00:06:26.420
And on that array I have my includes method that's going to verify whether that array has the an element

104
00:06:26.420 --> 00:06:27.140
that I'm looking for.

105
00:06:27.230 --> 00:06:28.790
What element do I want to look for?

106
00:06:28.910 --> 00:06:34.370
I want to take my job object and I want to get its job type property that is going to get me the string

107
00:06:34.370 --> 00:06:35.210
with the job type.

108
00:06:35.360 --> 00:06:40.400
I'm going to check whether that job tied string is found in my selected job type array.

109
00:06:40.550 --> 00:06:42.710
If it is found, I do want to keep the job.

110
00:06:42.830 --> 00:06:47.870
So this function that I passed the filter method, it will return true and I will keep that.

111
00:06:48.080 --> 00:06:51.620
And if it returns false JavaScript will not keep it or exclude it.

112
00:06:51.830 --> 00:06:56.480
And my final return value will be an array that stores just the jobs that match the criteria.

113
00:06:56.780 --> 00:07:01.550
So I'm going to save this let prettier work its magic and we're going to let the test run and hopefully

114
00:07:01.550 --> 00:07:06.920
it should pass because this implementation obviously is very similar to the one above and indeed it

115
00:07:06.920 --> 00:07:07.250
does.

116
00:07:07.580 --> 00:07:08.360
So there we go.

117
00:07:08.360 --> 00:07:14.330
We now have a new getter to filter the jobs by their job types using the values that the user will eventually

118
00:07:14.330 --> 00:07:17.750
populate in the UI, which will make their way to view X.

119
00:07:17.990 --> 00:07:21.170
But of course we have not built any part of the user interface yet.

120
00:07:21.170 --> 00:07:24.170
We haven't built any Vue components, but that's totally fine.

121
00:07:24.170 --> 00:07:28.970
We can follow our protocol from the previous section to kind of build something very similar for job

122
00:07:28.970 --> 00:07:29.210
types.

123
00:07:30.020 --> 00:07:30.380
Okay.

124
00:07:30.650 --> 00:07:33.860
So I think we've basically taken care of just about everything we need.

125
00:07:33.860 --> 00:07:39.080
On the view X side of things, we have a new slice of state, we have a mutation to modify it, we have

126
00:07:39.080 --> 00:07:42.200
a new getters to get the unique job types and the filter jobs.

127
00:07:42.410 --> 00:07:47.750
So the next thing we can start doing in the next lesson is used TDD to start building out the new component

128
00:07:47.750 --> 00:07:49.460
that's going to render those checkboxes.

129
00:07:49.640 --> 00:07:51.080
So I will see in the next lesson.
