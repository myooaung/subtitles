1
00:00:00,300 --> 00:00:01,230
All right.

2
00:00:01,230 --> 00:00:07,440
So the changes that we added in the previous lesson will get our existing test for our job filter sidebar

3
00:00:07,440 --> 00:00:07,980
to fail.

4
00:00:08,220 --> 00:00:14,220
So in this lesson, I want to fix this failing test and I also want to add a new one for the functionality

5
00:00:14,220 --> 00:00:15,030
that we just added.

6
00:00:15,420 --> 00:00:21,360
So the reason that our existing test in this file job filter sidebar, that test that's the reason why

7
00:00:21,360 --> 00:00:26,010
it's going to fail is because we now introduced the idea of use, root and use store.

8
00:00:26,250 --> 00:00:31,290
And even though the wrapped up in this function, this function will run because we are passing it to

9
00:00:31,290 --> 00:00:32,730
our on mounted lifecycle hook.

10
00:00:32,940 --> 00:00:37,050
So this logic will run as view test utils as mounting a component.

11
00:00:37,290 --> 00:00:40,500
But of course we don't have a real store and we don't have a real route.

12
00:00:40,680 --> 00:00:43,320
And so this logic is being broken, right?

13
00:00:43,770 --> 00:00:44,610
There is no browser.

14
00:00:44,910 --> 00:00:50,490
So what we need to do here is simply import those functions, mock them out, and have them return suitable

15
00:00:50,490 --> 00:00:52,810
objects to play the role of a root and a store.

16
00:00:52,830 --> 00:00:54,690
The same story we've told throughout the course.

17
00:00:54,960 --> 00:00:58,870
So right here we're already marking out view X from an earlier example.

18
00:00:58,890 --> 00:01:00,890
So right here, I'm going to import you store.

19
00:01:02,190 --> 00:01:05,490
Just to be more specific and allow myself to mock it out specifically later.

20
00:01:05,790 --> 00:01:10,920
So the use store is going to come from view X, then I'm going to mock our view X and then I'm also

21
00:01:10,920 --> 00:01:17,280
going to declare you store mock, which is going to be used store as a type of just mock.

22
00:01:17,610 --> 00:01:24,450
Then in order for coverage of my use root function right here, I'm also going to need to import use

23
00:01:24,450 --> 00:01:27,360
route that is going to come from view router.

24
00:01:27,720 --> 00:01:28,990
Same logic right here.

25
00:01:29,010 --> 00:01:34,230
I'm going to mock out the entire view router library and then I'm going to tell TypeScript that there

26
00:01:34,230 --> 00:01:39,240
is going to be a concept called user out mock, which is our existing just mock function represented

27
00:01:39,240 --> 00:01:43,830
by user out, but with TypeScript explicitly knowing that its type is just mock.

28
00:01:44,790 --> 00:01:45,210
All right.

29
00:01:45,480 --> 00:01:48,500
So first up, let's get this existing test to pass.

30
00:01:48,720 --> 00:01:54,000
All I'm going to do is basically provide mock return values for use store news route that are good enough

31
00:01:54,000 --> 00:01:55,260
to fulfill this contract.

32
00:01:55,440 --> 00:01:59,160
Because all this test is testing for is that the component can be rendered normally.

33
00:01:59,460 --> 00:02:04,500
So right here, let's begin with use store mock and I'm going to invoke mock return value.

34
00:02:04,830 --> 00:02:08,870
And all we really need for this object is for it to have a commit method.

35
00:02:08,880 --> 00:02:10,530
So that line 63 works.

36
00:02:10,800 --> 00:02:14,820
So right here, I'm going to provide a commit method and that can just be a basic just function.

37
00:02:15,120 --> 00:02:17,640
That's a perfect little way to take care of that responsibility.

38
00:02:18,000 --> 00:02:22,790
Now, as far as our route object, we can mock out as well.

39
00:02:22,800 --> 00:02:28,710
So user out mock dot mock return value providing an object.

40
00:02:29,820 --> 00:02:34,980
And remember that we don't actually need to have a real property that's optional, but we do need to

41
00:02:34,980 --> 00:02:39,990
have a query property that's always going to exist and we do need to be able to access it in order to

42
00:02:39,990 --> 00:02:42,270
be able to potentially reference a row property.

43
00:02:42,570 --> 00:02:46,020
So we can almost test this side of the logic in this test.

44
00:02:46,290 --> 00:02:52,050
So what I'm going to do here is just provide a query object set to an empty object that's going to allow

45
00:02:52,050 --> 00:02:55,470
role to evaluate undefined and fall back to an empty string.

46
00:02:55,680 --> 00:03:00,150
And then in the second test that I add in just a moment, we can actually double check that the extraction

47
00:03:00,150 --> 00:03:03,900
is actually working logically and correctly by providing a valid real property.

48
00:03:04,260 --> 00:03:08,820
So you can see that this is enough to get my former test to pass and now we can write our new one.

49
00:03:09,150 --> 00:03:21,300
So right here I'm going to say it reads query params to filter initial jobs for user pass and an arrow

50
00:03:21,300 --> 00:03:22,230
function right here.

51
00:03:23,220 --> 00:03:23,720
All right.

52
00:03:23,730 --> 00:03:26,010
And it's going to be very similar to what I have above.

53
00:03:26,220 --> 00:03:28,050
So I think what I'm going to do is just copy.

54
00:03:29,350 --> 00:03:30,820
My first three lines right here.

55
00:03:31,240 --> 00:03:32,690
We're going to modify them slightly.

56
00:03:32,740 --> 00:03:36,080
We do want to make sure that we are committing the right arguments.

57
00:03:36,100 --> 00:03:40,330
So what I'm going to do is make sure that this reference is available as a constant above.

58
00:03:40,630 --> 00:03:47,200
So content commit is going to be a just mock function and I'm going to use S six referencing here to

59
00:03:47,200 --> 00:03:48,760
just reference my constant above.

60
00:03:49,240 --> 00:03:54,970
For my query object, I will provide a row property and just to celebrate, of course, let's make our

61
00:03:54,970 --> 00:03:58,780
role view because the user is of course always interested in finding view jobs.

62
00:03:59,200 --> 00:04:01,480
Then I'm going to show them out my component.

63
00:04:01,720 --> 00:04:05,050
And what I expect to have happen is this function will run on mount.

64
00:04:05,230 --> 00:04:08,260
So I expect that my commit method should have been called.

65
00:04:08,590 --> 00:04:12,340
So I'm going to say that just mock function should have been called with arguments.

66
00:04:12,610 --> 00:04:17,660
The first argument is going to be update skills search term, which is my mutation, right?

67
00:04:17,680 --> 00:04:18,730
That's this logic right here.

68
00:04:18,910 --> 00:04:24,100
And the second value of role, of course, is going to come from my query object in the row property.

69
00:04:24,220 --> 00:04:30,010
So because that is set to view right here and the second argument for the search term should be view.

70
00:04:30,920 --> 00:04:31,790
It's a save that.

71
00:04:33,180 --> 00:04:34,890
And that should get the entire test to pass.

72
00:04:35,950 --> 00:04:37,090
Give it a few seconds to run.

73
00:04:38,310 --> 00:04:39,150
And there we go.

74
00:04:39,240 --> 00:04:43,710
In fact, this code is giving me a little bit of a warning here that I'm not using wrapper, which makes

75
00:04:43,710 --> 00:04:46,170
sense because we don't actually need to reference rapper later.

76
00:04:46,410 --> 00:04:48,990
So I think we'll get away with just doing a regular shallow now.

77
00:04:49,530 --> 00:04:51,960
So let's remove that just to be a little bit cleaner.

78
00:04:52,740 --> 00:04:56,010
And that's kind of a better communicator that we don't really care about the return value.

79
00:04:56,040 --> 00:05:00,540
We just want a shallow amount, the component to force the mutation to run from the on mounted life

80
00:05:00,540 --> 00:05:00,990
cycle hook.

81
00:05:01,440 --> 00:05:04,950
All right, so everything is passing, and I feel much better about this component.

82
00:05:05,310 --> 00:05:05,700
All right.

83
00:05:05,700 --> 00:05:07,980
So let's wrap this section up in the very next lesson.
