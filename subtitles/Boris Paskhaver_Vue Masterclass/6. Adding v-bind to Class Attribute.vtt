WEBVTT
1
00:00:00.300 --> 00:00:01.260
All right.

2
00:00:01.260 --> 00:00:07.830
In this lesson, we'll take a look at how we can combine the V bind directive with the class attribute

3
00:00:07.830 --> 00:00:08.700
in HTML.

4
00:00:09.030 --> 00:00:16.110
So as a reminder, the V bind directive allows us to connect some slice of our component data to an

5
00:00:16.110 --> 00:00:23.820
h HTML attribute so that as the data changes, the corresponding attribute will update its value as

6
00:00:23.820 --> 00:00:24.300
well.

7
00:00:24.480 --> 00:00:24.750
Right.

8
00:00:25.020 --> 00:00:28.560
And we talked about the two syntactical options for V bind earlier.

9
00:00:28.560 --> 00:00:32.070
We have V bind colon as well as just the colon by itself.

10
00:00:32.370 --> 00:00:35.880
And remember, this is applicable to any single HTML attribute.

11
00:00:36.150 --> 00:00:43.050
So for example, if we want to dynamically connect some kind of data to this class attribute, we can

12
00:00:43.050 --> 00:00:44.910
do so using V bind.

13
00:00:45.120 --> 00:00:46.650
So let's write that syntax right here.

14
00:00:46.650 --> 00:00:47.370
V bind.

15
00:00:49.360 --> 00:00:50.430
Followed by a colon.

16
00:00:50.440 --> 00:00:55.300
And we need we need to put the colon to specify that we want to connect to the class attribute because

17
00:00:55.300 --> 00:00:58.000
there's many different attributes that we can apply to a button.

18
00:00:58.240 --> 00:01:01.840
In this case, we're connecting to class, and the way it's going to work here is going to be a little

19
00:01:01.840 --> 00:01:02.410
bit different.

20
00:01:02.590 --> 00:01:07.570
Instead of writing Primary, what I'm going to provide is a plain JavaScript object.

21
00:01:07.660 --> 00:01:15.820
All right, so like so and in here, what we can do is provide key value pairs where the key can represent

22
00:01:15.820 --> 00:01:21.040
an available sixth class such as primary, which we have defined in styles down below.

23
00:01:21.370 --> 00:01:28.240
And the value will be a boolean, either true or false, that reflects whether that class should be

24
00:01:28.240 --> 00:01:30.580
applied or should not be applied.

25
00:01:31.150 --> 00:01:31.450
All right.

26
00:01:31.450 --> 00:01:32.320
It's a lot to take in.

27
00:01:32.320 --> 00:01:33.430
So let me give you an example.

28
00:01:33.610 --> 00:01:38.680
We have one Caesar's class that's available, which is primary on line 19.

29
00:01:38.980 --> 00:01:42.490
So our CSS classes are going to be our keys.

30
00:01:42.490 --> 00:01:44.170
So I'm going to write primary.

31
00:01:45.510 --> 00:01:47.880
Our values are going to be booleans.

32
00:01:48.030 --> 00:01:51.180
A true means apply this class.

33
00:01:51.360 --> 00:01:54.090
A false means do not apply this class.

34
00:01:54.330 --> 00:01:57.270
So right now I'm going to hard code a value of true.

35
00:01:57.660 --> 00:02:02.910
And what that is going to do is apply the styles from the primary class to this button.

36
00:02:03.240 --> 00:02:07.200
So I'm going to save this file and I'm going to go back to my browser and we're going to see the same

37
00:02:07.200 --> 00:02:10.170
button that we're used to seeing the blue button right here.

38
00:02:10.560 --> 00:02:17.190
However, if I hardcoded a different boolean value, which is false because we have a false, we will

39
00:02:17.190 --> 00:02:19.980
not apply the primary scissors class.

40
00:02:20.190 --> 00:02:23.250
So these styles will not be applied to the button.

41
00:02:23.550 --> 00:02:28.050
However, we're still going to have these styles right here because they apply to the general button

42
00:02:28.350 --> 00:02:29.040
HTML element.

43
00:02:29.100 --> 00:02:33.120
All right, so I'm going to save this file and it's going to look a little bit different in the browser.

44
00:02:33.330 --> 00:02:38.100
Here we have our button with the padding that we specified and the font specified, etc..

45
00:02:38.310 --> 00:02:45.250
But as you can see, we lost all of the blue background and the text color that we got from our primary

46
00:02:45.870 --> 00:02:46.380
styles.

47
00:02:46.500 --> 00:02:46.860
All right.

48
00:02:47.100 --> 00:02:52.740
So I'm going to go back to my editor and just one more thing to show you in this lesson, which is,

49
00:02:52.740 --> 00:02:58.080
of course, the easy lynch violence violation that we see here, is that we can use the shortcut for

50
00:02:58.080 --> 00:03:01.450
the V bind directive, which is just the colon syntax.

51
00:03:01.450 --> 00:03:04.530
So I'm going to remove this and just leave this as colon class.

52
00:03:04.680 --> 00:03:06.660
And this creates the exact same thing.

53
00:03:06.960 --> 00:03:09.990
So you might be curious as to why we would ever use this.

54
00:03:10.200 --> 00:03:14.280
Well, this is a very basic introduction to show you the syntax for how it works.

55
00:03:14.490 --> 00:03:18.450
Obviously, there is no dynamic data anywhere to be found here.

56
00:03:18.510 --> 00:03:22.680
We are simply hard coding the value of true and false right here in line.

57
00:03:22.950 --> 00:03:29.670
However, there is nothing preventing us from providing this boolean value from something like a data

58
00:03:29.670 --> 00:03:31.560
property on our view component.

59
00:03:31.830 --> 00:03:38.220
And of course, as you might guess, if that data property switches its boolean value, then the value

60
00:03:38.220 --> 00:03:45.000
that we attach to the primary access class will also change, which will change whether or not Vue applies

61
00:03:45.150 --> 00:03:47.850
those primary class styles to the button.

62
00:03:48.150 --> 00:03:52.110
So the key takeaway here is now we can apply dynamic access.

63
00:03:52.290 --> 00:03:57.360
We can apply a class conditionally based on some piece of data that we have in our component.

64
00:03:57.480 --> 00:04:04.410
We can sometimes enable styles and alternatively, we can add another style based from a different CSS

65
00:04:04.410 --> 00:04:06.480
class simply by flipping booleans.

66
00:04:06.720 --> 00:04:10.380
And there's nothing stopping us from having multiple CAC classes in here.

67
00:04:10.560 --> 00:04:16.440
So I can have an object with three properties and we can conditionally choose which ones to add at any

68
00:04:16.440 --> 00:04:20.070
given moment based on some kind of business logic in our component.

69
00:04:20.310 --> 00:04:22.800
So we're going to get to that logic in just a few lessons.

70
00:04:22.920 --> 00:04:29.550
But this is just to introduce the dynamic syntax that we can use to bind to the class attribute on any

71
00:04:29.760 --> 00:04:30.300
HTML element.

72
00:04:30.480 --> 00:04:35.820
Again, this is V bind, which means we are connecting JavaScript or view logic to an existing HTML

73
00:04:35.820 --> 00:04:40.950
attribute, which means Vue is going to monitor anything that we provide here for when it's changing.

74
00:04:41.580 --> 00:04:46.470
Again, in this scenario, this will never change because this is a static object that always will have

75
00:04:46.470 --> 00:04:48.630
a primary property, always set to false.

76
00:04:48.780 --> 00:04:54.750
But later on we'll see how we can dynamically populate the values in here so that when the data changes,

77
00:04:54.900 --> 00:05:01.200
the V bind directive tells Vue to observe those changes and react to them by re rendering the button

78
00:05:01.350 --> 00:05:03.120
and its appropriate styles.

79
00:05:03.270 --> 00:05:07.870
So I hope that explanation makes sense as to explaining why we would ever use a style like this and

80
00:05:07.950 --> 00:05:09.030
or an approach like this.

81
00:05:09.150 --> 00:05:12.240
And we're going to see more on how to use this in upcoming lessons.

82
00:05:12.390 --> 00:05:13.320
So I will see you there.
