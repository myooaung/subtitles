1
00:00:00,390 --> 00:00:01,200
Okay.

2
00:00:01,200 --> 00:00:08,070
So we just ran into a bug in our browser where whenever we selected either an organization or a job

3
00:00:08,070 --> 00:00:12,600
type by itself, we saw that we got no jobs on the right hand side.

4
00:00:12,960 --> 00:00:19,770
So I'm assuming that the bug is going to come from our getter because all our component is doing is

5
00:00:19,770 --> 00:00:22,890
really iterating over that filter job's getter anyway.

6
00:00:23,040 --> 00:00:25,800
So I don't think this bug is going to come from job listings.

7
00:00:25,950 --> 00:00:29,550
I think it's coming from our filter logic right here in this getter.

8
00:00:29,880 --> 00:00:34,470
So at that point, I did a little bit of thinking and I figured out exactly what was going wrong here.

9
00:00:34,740 --> 00:00:36,120
So let me show you the problem here.

10
00:00:36,570 --> 00:00:41,910
I kind of thought about the exact scenario that we had in our browser where we had, for example, a

11
00:00:41,910 --> 00:00:44,640
selected job type, but no selected organization.

12
00:00:44,940 --> 00:00:47,370
So imagine we have a scenario like this in our state.

13
00:00:47,670 --> 00:00:54,360
Imagine for a selected organizations, we have an empty array because the user has not yet selected

14
00:00:54,360 --> 00:00:55,440
any organizations.

15
00:00:55,770 --> 00:01:02,220
Then imagine for the job types, the user selects a job type like let's say, full time.

16
00:01:02,550 --> 00:01:04,200
So we're going to populate that Iran.

17
00:01:04,830 --> 00:01:10,230
We'll think about the logic that's going to happen here whenever we perform this this getter method.

18
00:01:10,620 --> 00:01:16,380
So first, we're going to check if both the lengths of the selected organizations and the selected job

19
00:01:16,380 --> 00:01:18,390
types array are equal to zero.

20
00:01:18,600 --> 00:01:21,080
In this case, only one of them is equal to zero.

21
00:01:21,090 --> 00:01:22,590
These selected organizations one.

22
00:01:22,860 --> 00:01:24,090
But here we're doing it.

23
00:01:24,090 --> 00:01:29,730
And a check, which means no selected organizations will be true, but no selected job types will be

24
00:01:29,730 --> 00:01:32,520
false because we do have an actual job type.

25
00:01:32,520 --> 00:01:33,720
The length of this array is one.

26
00:01:34,410 --> 00:01:40,110
So because this if statement is going to validate to false, we're not going to return all of the jobs.

27
00:01:40,230 --> 00:01:42,660
We're going to proceed to the filter operation down below.

28
00:01:43,110 --> 00:01:44,820
So then we're going to get to this filter method.

29
00:01:45,060 --> 00:01:49,500
But at this juncture, our selected organizations array is still empty.

30
00:01:49,740 --> 00:01:52,890
And what happens when we call the includes method on empty array?

31
00:01:53,040 --> 00:01:55,440
We saw this bug in a section or two ago.

32
00:01:55,560 --> 00:01:59,850
We're always going to get false because an empty array cannot include any element.

33
00:01:59,850 --> 00:02:01,200
It doesn't have any content.

34
00:02:01,590 --> 00:02:05,280
So what happens is on this first filter method, call on line 47.

35
00:02:05,490 --> 00:02:10,980
When we run this 100 times for our jobs, each one of those function invocations returns false.

36
00:02:11,220 --> 00:02:15,270
So what we end up with at the end of this is going to be an array of nothing.

37
00:02:15,480 --> 00:02:16,860
Then we call the filter method.

38
00:02:16,860 --> 00:02:19,380
Here on an array of nothing, there's nothing left to filter.

39
00:02:19,740 --> 00:02:21,210
So we end up with an array of nothing.

40
00:02:21,210 --> 00:02:23,160
And that's what we return from this getter.

41
00:02:23,340 --> 00:02:27,750
And when we have an array of nothing to iterate over on the right hand side, we have no jobs.

42
00:02:28,290 --> 00:02:29,280
So that's the issue.

43
00:02:29,280 --> 00:02:35,940
The problem is this check right here is not really capturing the scenario where we have just one category

44
00:02:35,940 --> 00:02:40,290
of filter selected, such as either job types or either organizations.

45
00:02:40,470 --> 00:02:45,120
It only works for when the page loads and there's nothing selected for both of them.

46
00:02:45,210 --> 00:02:48,840
But when the user selects either one of them, then it breaks.

47
00:02:49,140 --> 00:02:54,450
So why did our code work whenever the user selected both an organization and a job type?

48
00:02:54,660 --> 00:02:59,220
Well, in that case, as soon as the user selected an organization, this array had something.

49
00:02:59,520 --> 00:03:02,600
So once again, this thing would still evaluate to false.

50
00:03:02,610 --> 00:03:04,260
So we would not return to states jobs.

51
00:03:04,440 --> 00:03:10,170
But now we actually had an array of selected organizations to invoke includes on and an array of job

52
00:03:10,170 --> 00:03:11,400
types to invoke includes on.

53
00:03:11,550 --> 00:03:15,450
So when we had both of these selected, this logic would work as expected.

54
00:03:15,840 --> 00:03:21,330
So we're basically handling two out of three scenarios correctly when the page loads and the user has

55
00:03:21,330 --> 00:03:25,620
nothing selected and when the user selects for both an organization and the job type.

56
00:03:25,800 --> 00:03:30,150
However, we do not have the correct logic for when the user selects either one.

57
00:03:30,540 --> 00:03:32,010
So here's how I fix this problem.

58
00:03:33,210 --> 00:03:39,510
What I decided to do is to expand each one of my filter methods to incorporate the check that was in

59
00:03:39,510 --> 00:03:42,360
the original getters right here and right here.

60
00:03:42,660 --> 00:03:47,460
So I removed this if statement, which was kind of an incorrect logic from the beginning.

61
00:03:47,820 --> 00:03:49,190
And instead I did this.

62
00:03:49,200 --> 00:03:51,270
I expanded my function right here.

63
00:03:52,240 --> 00:03:54,010
So I'm going to expand up using curly braces.

64
00:03:54,280 --> 00:03:58,140
So make sure you put a curly brace right here and a curly brace before the final practices.

65
00:03:58,480 --> 00:04:05,860
And then I still want to return whether my selected organization's array includes the current jobs organization.

66
00:04:06,100 --> 00:04:08,770
However, I put my F statement in here.

67
00:04:09,130 --> 00:04:15,460
I said, if there are no selected organizations at all, if the user has not checked any organization

68
00:04:15,460 --> 00:04:20,800
that they want to filter by, I know automatically that this job is something I should include.

69
00:04:21,250 --> 00:04:22,990
Very similar to how we said right here.

70
00:04:22,990 --> 00:04:28,000
If the user has no selected organizations, we want to include all the jobs because there are no filters

71
00:04:28,000 --> 00:04:28,570
to apply.

72
00:04:28,900 --> 00:04:34,660
Similar thing here I am in a filter method, which means I have to return a boolean either true or false

73
00:04:34,840 --> 00:04:40,480
for the given job, but for any given job, for any of the 100 jobs that I'm iterating over.

74
00:04:40,660 --> 00:04:47,080
If the user has not selected an organization for this filter for this check, I do always want to include

75
00:04:47,080 --> 00:04:48,940
the job because I don't want to lose it.

76
00:04:49,210 --> 00:04:52,960
So right here I said if no selected organizations always return.

77
00:04:52,960 --> 00:04:53,290
True.

78
00:04:54,500 --> 00:04:59,720
So if we have no selected organizations, this filter function will run 100 times and it's always going

79
00:04:59,720 --> 00:05:02,450
to be caught online 44 and it's always going to return.

80
00:05:02,450 --> 00:05:02,840
True.

81
00:05:02,960 --> 00:05:05,240
So all of our jobs will pass the filter test.

82
00:05:05,510 --> 00:05:10,820
Otherwise, if the user does have selected organizations, then we'll check whether they include the

83
00:05:10,820 --> 00:05:12,170
current jobs organization.

84
00:05:12,950 --> 00:05:13,400
All right.

85
00:05:13,610 --> 00:05:16,310
And I'm going to apply the exact same logic for the filter below.

86
00:05:16,340 --> 00:05:20,940
So right here, I'm going to expand this to a proper function instead of doing implicit returns.

87
00:05:20,960 --> 00:05:22,310
So add the curly brace here.

88
00:05:22,550 --> 00:05:23,990
Add the curly brace at the end.

89
00:05:24,800 --> 00:05:31,250
Then I'm going to return this evaluation to check whether the current job's job type exists in the users

90
00:05:31,250 --> 00:05:32,120
selected job types.

91
00:05:32,330 --> 00:05:36,650
But I only want this line to run if there are actually selected job types.

92
00:05:36,890 --> 00:05:42,230
If the user does not have any jobs have selected, I want the job that I'm iterating over to always

93
00:05:42,230 --> 00:05:43,550
pass this filter function.

94
00:05:43,850 --> 00:05:46,760
So if no selected job types.

95
00:05:48,390 --> 00:05:49,140
I'm going to return.

96
00:05:49,140 --> 00:05:49,470
True.

97
00:05:50,310 --> 00:05:55,950
So now this is going to cover the scenario where the user has just organization filters or just job

98
00:05:55,950 --> 00:05:57,510
filters or both or neither.

99
00:05:57,750 --> 00:06:03,090
For example, if the user only has job type filters selected, well then I'm going to evaluate to true

100
00:06:03,090 --> 00:06:06,810
right here 100 times for the first for all 100 jobs.

101
00:06:07,080 --> 00:06:11,250
Then I'm going to get an array of hundred jobs right here and then I'm going to filter by just the job

102
00:06:11,250 --> 00:06:12,730
types in reverse.

103
00:06:12,750 --> 00:06:19,260
If the user has selected an organizational filter but not a job to filter, then for the organizational

104
00:06:19,260 --> 00:06:25,440
filters, we're going to run this logic in line 45 for each job, then however many jobs we get and

105
00:06:25,440 --> 00:06:26,250
the resulting array.

106
00:06:26,400 --> 00:06:31,470
Since we have no job types as we filter that array, this line is going to always return true.

107
00:06:31,650 --> 00:06:35,880
And so we're always going to get back the same array that we got from the previous filter operation.

108
00:06:36,210 --> 00:06:40,590
And then if there are both selected organizations and select the job types, then we're simply going

109
00:06:40,590 --> 00:06:44,760
to run this logic here and this logic right here for each of those hundred jobs.

110
00:06:44,940 --> 00:06:49,620
More specifically, we're going to run it first here, get the smaller array, the smaller batch, the

111
00:06:49,620 --> 00:06:50,430
smaller subset.

112
00:06:50,610 --> 00:06:51,960
Then call filter on that array.

113
00:06:52,200 --> 00:06:56,610
So we're going to get all the jobs that fit all the criteria or either one.

114
00:06:56,790 --> 00:06:58,110
So this solution will work.

115
00:06:58,890 --> 00:07:01,200
So if I transition back to my browser.

116
00:07:02,340 --> 00:07:03,960
And now we can see we have a fresh page.

117
00:07:03,960 --> 00:07:08,730
And if I go to job types and I select for something like part time, we can see it works exactly as

118
00:07:08,730 --> 00:07:09,270
we expect.

119
00:07:09,780 --> 00:07:14,310
And then if I go to something like organizations and do something like YouTube, we can see of YouTube

120
00:07:14,310 --> 00:07:14,760
right here.

121
00:07:14,760 --> 00:07:15,540
Everything is working.

122
00:07:15,660 --> 00:07:20,860
And now when I select more ones like Intern, you can see that works part time temporary.

123
00:07:20,880 --> 00:07:22,320
You can do it, you and me.

124
00:07:22,590 --> 00:07:26,520
Everything seems to be updating on the right hand side as I remove these options.

125
00:07:26,730 --> 00:07:28,020
So it looks like everything is working.

126
00:07:28,020 --> 00:07:33,660
We're able to filter by just one filter, by both filter, and, of course, by none of them at all

127
00:07:33,660 --> 00:07:34,020
as well.

128
00:07:34,380 --> 00:07:34,800
All right.

129
00:07:35,040 --> 00:07:36,150
So everything is looking great.

130
00:07:36,150 --> 00:07:37,680
And I will see in the next lesson.
