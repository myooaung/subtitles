WEBVTT
1
00:00:00.590 --> 00:00:01.390
Okay.

2
00:00:01.400 --> 00:00:06.250
So just to put things into perspective, I've opened up two files side by side.

3
00:00:06.430 --> 00:00:12.580
On the left hand side, I have my job filters, sidebar organizations component where we are currently

4
00:00:12.580 --> 00:00:16.330
storing the users selected organizations in a local piece of data.

5
00:00:16.630 --> 00:00:23.050
And on the right hand side, I have my index file in my stored directory and here is where we have all

6
00:00:23.050 --> 00:00:24.940
of our configuration for the View X Store.

7
00:00:25.150 --> 00:00:30.910
We need to find a way to connect these two pieces or in other words, to get this piece of data to our

8
00:00:30.910 --> 00:00:31.630
View X Store.

9
00:00:31.810 --> 00:00:36.970
Because the View Store is going to need this piece of data which organizations the user has selected

10
00:00:37.180 --> 00:00:40.840
in order to filter the 100 jobs that it's going to get from the backend.

11
00:00:41.320 --> 00:00:43.990
Okay, now here's where things get a little bit tricky.

12
00:00:43.990 --> 00:00:48.160
I'm going to describe the approach we're going to take and I'm going to talk a little bit about its

13
00:00:48.160 --> 00:00:48.970
disadvantages.

14
00:00:49.300 --> 00:00:54.850
What we're going to do in the next couple of lessons is we're going to define a new piece of state to

15
00:00:54.850 --> 00:00:57.700
store this information selected organizations.

16
00:00:58.030 --> 00:01:01.660
So we're basically going to have a very similar property owner of U.S. store state.

17
00:01:01.990 --> 00:01:07.450
Now, the reason this is a bad idea is because it kind of violates the idea of having a single source

18
00:01:07.450 --> 00:01:07.900
of truth.

19
00:01:07.900 --> 00:01:09.250
We're going to duplicate data.

20
00:01:09.520 --> 00:01:11.770
We're going to have this data locally in our component.

21
00:01:11.920 --> 00:01:16.180
And then whenever it updates, we're going to send a message to The View Store that it should update

22
00:01:16.180 --> 00:01:17.470
its own data as well.

23
00:01:17.710 --> 00:01:21.880
So we're going to have two places where we're basically storing copies or duplicates of this data.

24
00:01:22.090 --> 00:01:23.980
Local component, end of York store.

25
00:01:24.190 --> 00:01:25.630
That is not ideal.

26
00:01:25.900 --> 00:01:31.900
However, the reason we wound up with this approach is because local data works really easily and really

27
00:01:31.900 --> 00:01:33.490
well with V model, right?

28
00:01:33.490 --> 00:01:38.410
We use that in the first place because it makes it super simple to configure all our inputs and have

29
00:01:38.410 --> 00:01:40.840
you take care of creating that array.

30
00:01:40.840 --> 00:01:45.250
With all of the currently active selections, we just now need to find a way to do the next step, which

31
00:01:45.250 --> 00:01:47.710
is sending this information to view X.

32
00:01:47.920 --> 00:01:53.110
So while it is a violation, we're going to try to forgive ourselves for now and move forward because

33
00:01:53.110 --> 00:01:55.330
I think it makes sense the most logically, right?

34
00:01:55.330 --> 00:01:59.560
We're going to store data locally and any time it changes, we're just going to alert View X that this

35
00:01:59.560 --> 00:02:00.220
thing has happened.

36
00:02:00.550 --> 00:02:05.980
Ultimately, it'd be great if we perhaps had a global piece of state called selected organizations that

37
00:02:05.980 --> 00:02:08.290
we directly connected this V model to.

38
00:02:08.290 --> 00:02:09.610
And there is a way to do that.

39
00:02:09.850 --> 00:02:15.460
However, it's a little bit more complex and tricky compared to simply connecting a V model to a local

40
00:02:15.460 --> 00:02:16.840
piece of component data.

41
00:02:16.840 --> 00:02:17.110
Right.

42
00:02:17.110 --> 00:02:21.670
This is sort of the beauty of view is how simple it makes the model work with just a piece of local

43
00:02:21.670 --> 00:02:22.060
data.

44
00:02:22.330 --> 00:02:26.470
I want to keep that beauty and simplicity, but in order to keep it, we also need to accommodate the

45
00:02:26.470 --> 00:02:29.860
fact that we need to get this data elsewhere to view X on the right.

46
00:02:30.040 --> 00:02:33.340
And so we're going to need to send this data to our store.

47
00:02:34.030 --> 00:02:38.020
Now, as far as your question, you might say, okay, I understand we need to send this data to the

48
00:02:38.020 --> 00:02:40.900
store, but do we need to save it as part of the store state?

49
00:02:40.900 --> 00:02:43.930
Can't we just, for example, use it in a method like a getter?

50
00:02:44.230 --> 00:02:46.630
And the answer is, I think that's a reasonable approach.

51
00:02:46.630 --> 00:02:51.520
And maybe if we were building this out on our first attempt, I think that would be a totally reasonable

52
00:02:51.520 --> 00:02:52.180
path to take.

53
00:02:52.480 --> 00:02:59.080
However, if I go back to my browser, just to show you remember that our organizations are part of

54
00:02:59.080 --> 00:03:00.760
a larger collection of filters.

55
00:03:00.760 --> 00:03:03.280
We have job types, we have degrees eventually.

56
00:03:03.460 --> 00:03:08.410
And the intent of this web app is the user is going to select checkboxes across all of these different

57
00:03:08.410 --> 00:03:13.570
places, and then we want to accommodate every single filter that the user has selected for that in

58
00:03:13.570 --> 00:03:15.700
order to filter the jobs in the right hand side.

59
00:03:16.060 --> 00:03:21.850
The problem is if we store all of this data locally in each component and even in a method, if we pass

60
00:03:21.850 --> 00:03:25.720
the data up, that data is only going to last as long as that method is running.

61
00:03:25.930 --> 00:03:28.510
So imagine the user does a click for organizations.

62
00:03:28.510 --> 00:03:34.120
We might send the data for that checkbox to view X, but then we need to keep track of that data and

63
00:03:34.120 --> 00:03:34.570
what it is.

64
00:03:34.690 --> 00:03:40.810
As the user selects a job type, as the user selects a degree, as the user D selects a job type, there's

65
00:03:40.810 --> 00:03:46.270
a lot of components that are going to play a role in influencing what jobs we see on the right.

66
00:03:46.480 --> 00:03:51.100
And whenever you have that tangled web of complexity where there's multiple things that are influencing

67
00:03:51.100 --> 00:03:57.100
a final result, I found that the easiest way to handle that is to try to move all that complexity way

68
00:03:57.100 --> 00:03:59.260
up above the components to the view X layer.

69
00:03:59.590 --> 00:04:04.660
That way, all of that filtering logic can live up there, and if you access all the data it needs to

70
00:04:04.660 --> 00:04:09.580
run any kind of filter logic, it can have the selected organizations, it can have the selected job

71
00:04:09.580 --> 00:04:14.980
types, the selection degrees, it has the jobs array that needs to use the filter so it can do all

72
00:04:14.980 --> 00:04:20.350
of that up there, knowing that it has up to date data and it has all the pieces it needs in comparison,

73
00:04:20.350 --> 00:04:24.040
trying to get these components to alert each other and talk to each other.

74
00:04:24.220 --> 00:04:29.050
For example, the job type section saying, hey, the user has selected a job type that they like to

75
00:04:29.050 --> 00:04:29.590
filter by.

76
00:04:29.710 --> 00:04:34.000
Oh, but also, if you remember, the organizations component has these two checkboxes check.

77
00:04:34.270 --> 00:04:39.910
Keeping that kind of communication happening without resorting to simply sending everything to view

78
00:04:39.910 --> 00:04:41.170
X becomes a lot trickier.

79
00:04:41.440 --> 00:04:46.300
So by storing this selected organization's data in View X, we're going to make it a little bit easier

80
00:04:46.300 --> 00:04:52.000
later on for View X to be able to have everything it needs, including additional data later in order

81
00:04:52.000 --> 00:04:53.620
to be able to perform its filtering.

82
00:04:53.830 --> 00:04:54.190
All right.

83
00:04:54.430 --> 00:04:59.320
So with that in mind, I apologize if that's not a perfect explanation, but the short take away right

84
00:04:59.320 --> 00:05:00.040
now is that.

85
00:05:00.090 --> 00:05:04.860
We're going to save this piece of data as a part of the Global View Store State.

86
00:05:05.040 --> 00:05:07.140
So it's going to live in this component for now.

87
00:05:07.140 --> 00:05:11.160
And then we're also going to send a message to the folks to save it to the U.S., to our state.

88
00:05:11.400 --> 00:05:15.730
Later on, we'll see if we can possibly refactor it to eventually remove this local data.

89
00:05:15.750 --> 00:05:20.010
But right now, this is the simplest approach and I hopefully make sense as far as the logical sequence.

90
00:05:20.310 --> 00:05:22.950
So we're going to have three steps that we need to do here.

91
00:05:23.640 --> 00:05:28.680
The first step is going to be to create a new property on our view store to store the user selected

92
00:05:28.680 --> 00:05:29.400
organizations.

93
00:05:29.850 --> 00:05:34.290
The second step is we're going to need to be able to receive the data from this component and overwrite

94
00:05:34.290 --> 00:05:35.040
the store state.

95
00:05:35.280 --> 00:05:39.330
And whenever we're going to mutate the store state, we're going to need to have a mutation method.

96
00:05:39.600 --> 00:05:44.250
So that mutation method is going to get the array of selected organizations from a component that's

97
00:05:44.250 --> 00:05:48.090
going to overwrite the newly created property on our on our View X Store.

98
00:05:48.420 --> 00:05:52.980
And then finally, once we have the state and the mutation set up, we actually have to run the mutation,

99
00:05:52.980 --> 00:05:58.140
commit the mutation in our job filter side of our organization's component, passing in the value of

100
00:05:58.140 --> 00:06:04.050
the current array so that we send the new array of organization strings every time the user clicks a

101
00:06:04.050 --> 00:06:04.560
checkbox.

102
00:06:05.040 --> 00:06:05.370
All right.

103
00:06:05.760 --> 00:06:10.290
So with that said, what I'm going to do is drag this file here to the left.

104
00:06:11.990 --> 00:06:17.860
And I'm going to open up our test file for view and that is found in store index that test that.

105
00:06:17.890 --> 00:06:18.280
Yes.

106
00:06:18.590 --> 00:06:20.210
Here is our test file.

107
00:06:20.570 --> 00:06:25.400
And as a reminder, we have separate sections here for the state, the galleries, the mutations, etc..

108
00:06:25.670 --> 00:06:32.180
So I'm going to follow a TDD approach once again to wire up our new piece of state and eventually our

109
00:06:32.180 --> 00:06:33.590
new mutation as well.

110
00:06:33.920 --> 00:06:39.800
So right here in my state section, I'm going to describe the new property that I'm about to add to

111
00:06:39.800 --> 00:06:41.030
my View Store State.

112
00:06:41.390 --> 00:06:45.560
So this will basically be our property to store these selected organizations.

113
00:06:45.980 --> 00:06:49.760
So this is going to say it's stores organizations.

114
00:06:51.570 --> 00:06:55.290
That the user would like to filter jobs by.

115
00:06:56.610 --> 00:06:59.820
And right here, we're going to follow a very similar protocol to the tests above.

116
00:07:00.150 --> 00:07:05.430
We're going to get our starting state by simply invoking these state function on the right on the left

117
00:07:05.430 --> 00:07:05.850
hand side.

118
00:07:05.850 --> 00:07:06.540
My apologies.

119
00:07:06.840 --> 00:07:11.850
And we're going to expect that on that returned object that that function gives to us, we're going

120
00:07:11.850 --> 00:07:17.550
to see a new property called Selected Organizations, and one view starts up for the first time.

121
00:07:17.550 --> 00:07:20.970
I think it's reasonable to expect that this is going to be an array that is empty.

122
00:07:22.010 --> 00:07:27.800
And once again, the purpose is going to be that whenever the component updates its own state, it'll

123
00:07:27.800 --> 00:07:32.960
send a message to the UX to say, Hey, selected organizations on the UX store, please update yourself

124
00:07:32.960 --> 00:07:33.860
to what I have.

125
00:07:34.340 --> 00:07:34.730
All right.

126
00:07:35.120 --> 00:07:38.770
So we're going to save this and we're going to run our test suite.

127
00:07:38.780 --> 00:07:42.740
It should expectedly fail because that property does not exist.

128
00:07:43.040 --> 00:07:45.560
So right here, NPM run, test, colon, watch.

129
00:07:46.490 --> 00:07:49.010
We should get a failure because that property does not exist.

130
00:07:50.900 --> 00:07:52.040
And there we go.

131
00:07:52.340 --> 00:07:55.250
We can see here we expected it to be an array.

132
00:07:55.250 --> 00:08:00.110
Instead view received undefined, which makes sense because when we access a property that does not

133
00:08:00.110 --> 00:08:01.580
exist, we get undefined.

134
00:08:01.820 --> 00:08:06.470
So in order to make this pass on our view store state, we're going to define our property called the

135
00:08:06.470 --> 00:08:07.970
selected organizations.

136
00:08:08.690 --> 00:08:10.400
And we're going to set it to be.

137
00:08:11.480 --> 00:08:12.540
An empty array.

138
00:08:12.560 --> 00:08:13.970
That's going to be a starting value.

139
00:08:14.060 --> 00:08:15.710
Of course, we're going to update that later.

140
00:08:15.890 --> 00:08:19.190
When we run a mutation, so save that.

141
00:08:19.460 --> 00:08:22.040
It looks like my tests are taking a little bit to run, but here we go.

142
00:08:22.040 --> 00:08:23.900
Everything is passing great.

143
00:08:23.900 --> 00:08:29.540
So now we've wired up a slice of the view store that's going to store the users selected organizations,

144
00:08:29.690 --> 00:08:32.360
just the strings of those companies based on the checkboxes.

145
00:08:32.600 --> 00:08:37.010
And so the very next thing we need to do in the next lesson is to wire up the mutation that's going

146
00:08:37.010 --> 00:08:41.240
to receive that array of strings from the component and overwrite the view store state.
