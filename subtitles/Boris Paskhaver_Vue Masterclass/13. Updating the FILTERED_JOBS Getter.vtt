WEBVTT
1
00:00:00.510 --> 00:00:01.380
Okay.

2
00:00:01.380 --> 00:00:03.960
So now we have a new store property.

3
00:00:04.080 --> 00:00:06.240
We have a mutation to right to it.

4
00:00:06.360 --> 00:00:10.830
We have a new getter that's going to allow us to filter an individual job.

5
00:00:11.070 --> 00:00:14.670
We have our new component talking to The View Store.

6
00:00:14.940 --> 00:00:20.760
The only thing that's left to do to complete this feature is to update our filter jobs getter so that

7
00:00:20.760 --> 00:00:25.350
it filters now by the skill, which again is coming from the user input.

8
00:00:25.650 --> 00:00:30.510
So on the left I've opened up my getters test file and on the right hand side I have my getters that

9
00:00:30.510 --> 00:00:31.560
test, that's file.

10
00:00:32.310 --> 00:00:35.430
And luckily we already have a test for filter jobs.

11
00:00:35.610 --> 00:00:38.400
And so all we need to do is update this logic right here.

12
00:00:38.700 --> 00:00:46.260
So now filter jobs is going to filter jobs by organization, job type degree and skills.

13
00:00:47.190 --> 00:00:52.890
And as a reminder, we don't really need to add a test for include job by skill because we already have

14
00:00:52.890 --> 00:00:54.870
that test captured right here.

15
00:00:55.080 --> 00:01:00.660
So the only responsibility of the filter jobs getter is to aggregate all the other individual getters

16
00:01:00.870 --> 00:01:02.670
to determine the final array of jobs.

17
00:01:02.940 --> 00:01:08.820
So right here following the protocol, I'm going to create a new concept called include job by skill.

18
00:01:10.020 --> 00:01:13.500
That is going to be a just mock function that simply returns the value.

19
00:01:13.500 --> 00:01:13.950
True.

20
00:01:14.700 --> 00:01:18.210
So we can pretend that every single job is going to fit all of these criteria.

21
00:01:18.480 --> 00:01:22.770
I'm going to add it to my object of mock getters right here include job by skill.

22
00:01:24.180 --> 00:01:24.540
That's right.

23
00:01:24.570 --> 00:01:25.840
Here we are creating a job.

24
00:01:25.860 --> 00:01:29.520
We are creating a new store state where there is only one job.

25
00:01:29.850 --> 00:01:34.710
And then we are calling our filter jobs getter passing in the state as well as our marketers, which

26
00:01:34.710 --> 00:01:37.050
are just four mock functions that always return.

27
00:01:37.050 --> 00:01:37.440
True.

28
00:01:37.710 --> 00:01:44.280
So if all of them return true, the latter should simply return the one job that is in the jobs rate

29
00:01:44.280 --> 00:01:45.870
because it has passed all of our tests.

30
00:01:46.170 --> 00:01:51.060
And what we also want to validate is that that process will invoke this getter at least once.

31
00:01:51.330 --> 00:01:58.050
So right here, I'm going to expect that include job by skill should have been called so to have been

32
00:01:58.050 --> 00:02:04.530
called with and I want to verify that it has been invoked and been passed the individual job that is

33
00:02:04.530 --> 00:02:06.360
being iterated over from our state.

34
00:02:07.230 --> 00:02:12.300
So of course that is going to fail because we are not implementing that getter in our implementation.

35
00:02:12.540 --> 00:02:14.190
So you can guess what we're going to do now.

36
00:02:14.280 --> 00:02:16.080
We're going to add that getter right here.

37
00:02:16.350 --> 00:02:21.720
Before we do that, don't remember that we are providing a type here of include job getters, which

38
00:02:21.720 --> 00:02:23.010
is this interface up above.

39
00:02:23.400 --> 00:02:29.970
What I'm going to do here is add that new potential getter so that we avoid a typescript violation below.

40
00:02:30.270 --> 00:02:35.760
So now this mock getters object or the real getters object in the implementation is going to have a

41
00:02:35.760 --> 00:02:43.410
possibility of having an include job by skill method that will accept a job of type job and that will

42
00:02:43.410 --> 00:02:44.370
return a boolean.

43
00:02:45.090 --> 00:02:50.580
So now I'm able to use this method because it is available on this type right here.

44
00:02:50.880 --> 00:02:52.950
So right here, I'm going to filter once again.

45
00:02:55.020 --> 00:02:59.610
I mean, I've applied basically four filter operations in a row on the consecutive arrays that I get.

46
00:02:59.940 --> 00:03:05.340
And this filter operation is going to begin by having a job in what do I want to do with that individual

47
00:03:05.340 --> 00:03:08.760
job for each job remaining in this filtered array?

48
00:03:08.970 --> 00:03:14.160
I want to take my getters and on there I'm going to have an include job by skill getter and I want to

49
00:03:14.160 --> 00:03:16.620
pass in my individual job.

50
00:03:16.860 --> 00:03:19.240
So we're going to start with an array of jobs.

51
00:03:19.260 --> 00:03:21.390
We're going to first filter them by organization.

52
00:03:21.420 --> 00:03:24.580
So we're going to run this as many times as we need to.

53
00:03:24.600 --> 00:03:27.300
So in our real world scenario, we have 100 jobs.

54
00:03:27.510 --> 00:03:29.070
So we're going to run this 100 times.

55
00:03:29.370 --> 00:03:34.470
That's going to result in an array that is smaller than we're going to run this getter on all those

56
00:03:34.470 --> 00:03:35.190
remaining jobs.

57
00:03:35.370 --> 00:03:36.960
Then we're going to get a brand new array.

58
00:03:37.020 --> 00:03:42.660
We're going to filter them by degree, get back a brand new array and filter that final array by skill.

59
00:03:42.840 --> 00:03:48.780
And then that final array that is the result of all of those filter operations is what we return out

60
00:03:48.780 --> 00:03:49.890
of the filter jobs getter.

61
00:03:50.760 --> 00:03:54.360
I'm going to save that and double check that everything has passed.

62
00:03:54.840 --> 00:03:58.860
It looks like this does affect quite a few tests in our code base, which is to be expected.

63
00:03:59.980 --> 00:04:00.970
So everything is passing.

64
00:04:01.180 --> 00:04:03.550
And with that, I think we have a complete feature.

65
00:04:03.550 --> 00:04:07.180
So let's navigate to Chrome and double check that the feature is working.

66
00:04:07.450 --> 00:04:09.190
As always, I'm going to refresh the page.

67
00:04:10.460 --> 00:04:11.210
Just to be safe.

68
00:04:11.510 --> 00:04:15.590
And I'm going to first begin by simply searching for a search term by itself.

69
00:04:15.830 --> 00:04:19.320
So right here I can search for a term like Java Press enter.

70
00:04:19.340 --> 00:04:22.220
And lo and behold, it looks like it is working.

71
00:04:22.430 --> 00:04:23.480
Java Coder.

72
00:04:23.480 --> 00:04:24.590
Java Engineer.

73
00:04:24.710 --> 00:04:25.850
JavaScript Ninja.

74
00:04:25.850 --> 00:04:26.780
JavaScript Manager.

75
00:04:26.780 --> 00:04:29.150
You can see Java is everywhere in the title.

76
00:04:29.360 --> 00:04:34.190
And then if I want to filter further down, for example, I want to filter the jobs to only be YouTube

77
00:04:34.190 --> 00:04:35.020
and view and me.

78
00:04:35.300 --> 00:04:36.920
You can see these jobs are changing.

79
00:04:37.130 --> 00:04:39.660
I can look for different job types like full time.

80
00:04:39.710 --> 00:04:41.710
Looks like there are no results, but maybe part time that.

81
00:04:41.720 --> 00:04:42.320
There we go.

82
00:04:42.470 --> 00:04:43.220
Temporary.

83
00:04:43.280 --> 00:04:44.150
You can see the changes.

84
00:04:44.330 --> 00:04:45.470
And finally degrees.

85
00:04:45.470 --> 00:04:51.560
I can filter for bachelors and you can see our results are indeed expanding as I click and select these

86
00:04:51.560 --> 00:04:51.740
things.

87
00:04:51.750 --> 00:04:56.990
So our search term is working alongside our degrees, our job types and our organizations.

88
00:04:57.170 --> 00:05:02.690
So now we have implemented filtering by both checkboxes as well as a search term.

89
00:05:02.840 --> 00:05:07.220
And again, if we provide something like Java with spaces around it, not a problem.

90
00:05:08.860 --> 00:05:10.510
It's going to automatically adjust it.

91
00:05:11.080 --> 00:05:14.790
So here we go, Java space based space enter.

92
00:05:14.830 --> 00:05:18.250
You can see it immediately removes the white space and still filters for the jobs.

93
00:05:18.400 --> 00:05:21.460
You can also notice that case sensitivity is working as well here.

94
00:05:21.460 --> 00:05:26.110
I entered Java in a lower case, but it is matching these jobs because we took care of that responsibility

95
00:05:26.110 --> 00:05:26.890
in our getter.

96
00:05:27.280 --> 00:05:33.580
So lots of good, helpful user features that we have implemented it using those various view input modifiers.

97
00:05:33.910 --> 00:05:34.240
All right.

98
00:05:34.240 --> 00:05:35.380
So there is our feature.

99
00:05:35.380 --> 00:05:38.110
Congratulations and I will see you in the next lesson.
