WEBVTT
1
00:00:00.380 --> 00:00:01.140
Okay.

2
00:00:01.140 --> 00:00:06.810
So now that we have our new job filter signed by prompt component, I think it'd be a good idea to add

3
00:00:06.810 --> 00:00:08.610
at least a basic test for it.

4
00:00:08.880 --> 00:00:10.230
So let's create a test suite.

5
00:00:10.560 --> 00:00:16.620
So right here in my file Explorer, I'm going to go to my tests unit directory, the components folder,

6
00:00:16.620 --> 00:00:18.600
job results, job filter, sidebar.

7
00:00:18.780 --> 00:00:21.870
And in here I can create job filters.

8
00:00:21.870 --> 00:00:22.650
Sidebar.

9
00:00:22.890 --> 00:00:25.860
Prompt is the name of my component.

10
00:00:26.370 --> 00:00:27.520
And then test that.

11
00:00:27.900 --> 00:00:28.140
Yes.

12
00:00:28.890 --> 00:00:29.400
There we go.

13
00:00:30.270 --> 00:00:30.870
And.

14
00:00:32.070 --> 00:00:33.570
We'll begin with the usual.

15
00:00:33.660 --> 00:00:37.900
So we'll start by importing our mount function.

16
00:00:37.920 --> 00:00:42.150
Let's start with Mount four now and that's going to come from view test utils.

17
00:00:42.660 --> 00:00:47.040
I do want to kind of render this action button because I think it's a pretty lightweight component to

18
00:00:47.040 --> 00:00:50.460
render in the full mount this child component right here on line number five.

19
00:00:50.760 --> 00:00:52.800
So I see no problem with the full mount for now.

20
00:00:53.250 --> 00:00:57.570
Then of course, the heart of this component is what happens when we click on that action button.

21
00:00:57.570 --> 00:01:03.780
We invoke the clear user job filter selections function right here, and that commits a mutation to

22
00:01:03.780 --> 00:01:07.890
the View Store, which is provided by the use store composable.

23
00:01:08.070 --> 00:01:11.880
So of course I will need to mark out use store, which means we need to import it.

24
00:01:12.180 --> 00:01:19.020
So right here I'm going to import the use store function and that's going to come from view X and immediately

25
00:01:19.020 --> 00:01:21.690
on the line below I will mark out all of you X.

26
00:01:21.690 --> 00:01:27.330
So now I have the default implementation and after that I will define use store mock, which will simply

27
00:01:27.330 --> 00:01:30.780
be use store but as a different type of just the mock.

28
00:01:32.160 --> 00:01:36.780
Then of course I want to import my actual component, which is called job filters.

29
00:01:37.230 --> 00:01:38.730
Sidebar prompt.

30
00:01:39.480 --> 00:01:47.100
That's going to come from the source directory components, job results, job filter, sidebar, and

31
00:01:47.100 --> 00:01:50.220
then job filter, sidebar, prompt type view.

32
00:01:50.850 --> 00:01:51.390
Here we go.

33
00:01:52.290 --> 00:01:54.600
And we can create a new described block for it.

34
00:01:54.600 --> 00:01:57.690
So we are describing the job filter sidebar prompt.

35
00:01:59.990 --> 00:02:00.770
Here we go.

36
00:02:01.430 --> 00:02:06.030
And I want to add another bit of context here so somebody understands what is going on.

37
00:02:06.050 --> 00:02:11.930
So I'm going to add another describe that says when your user clicks clear filters button.

38
00:02:12.830 --> 00:02:17.930
So I kind of define the scenario that I'm in and then actually define the responsibility of the component

39
00:02:17.930 --> 00:02:19.160
in the IT function call.

40
00:02:19.640 --> 00:02:26.840
So I'm going to say it sends message to clear all of users job search filters.

41
00:02:27.080 --> 00:02:31.130
And I'm using the generic terminology of sends message because I don't want to specifically talk about

42
00:02:31.130 --> 00:02:31.610
the wax.

43
00:02:31.610 --> 00:02:35.720
I want to make it kind of agnostic of the implementation and just describe the value.

44
00:02:36.170 --> 00:02:40.430
So we're going to need to have a customer return value for our user.

45
00:02:40.430 --> 00:02:42.470
Max, right here, I'm going to invoke mock return value.

46
00:02:42.920 --> 00:02:46.880
And what I really want to test here is I want to mount the component.

47
00:02:46.880 --> 00:02:49.580
I want to trigger a click on this action button.

48
00:02:49.760 --> 00:02:53.960
And I want to make sure that we invoke the commit method and provide it with the right string argument.

49
00:02:54.230 --> 00:02:57.950
So in order to do that, I'm going to need to track what commit is invoked with.

50
00:02:58.130 --> 00:03:02.810
And in order to do that, I'm going to need to make sure that commit is a just function which can track

51
00:03:02.810 --> 00:03:05.180
its own invocations as well as arguments.

52
00:03:05.420 --> 00:03:08.600
So right here, what I'm going to do is define a concept called commit.

53
00:03:08.930 --> 00:03:15.170
That will be a just mock function, and the object that I return from a use store will have a commit

54
00:03:15.170 --> 00:03:18.830
method and that will reference my commit just function up above.

55
00:03:19.070 --> 00:03:22.820
So when this function runs, it's going to call commit, which is really going to call this thing on

56
00:03:22.820 --> 00:03:23.570
line number 12.

57
00:03:24.050 --> 00:03:26.330
And with that, we are good to mount our component.

58
00:03:26.330 --> 00:03:29.840
So const wrapper is going to mount my.

59
00:03:30.950 --> 00:03:32.630
Job filter, sidebar prompt.

60
00:03:33.080 --> 00:03:33.350
All right.

61
00:03:33.410 --> 00:03:37.430
The next thing I want to do is search for this nested component and click on it.

62
00:03:37.580 --> 00:03:40.220
I'm going to try to use the data test approach once again.

63
00:03:40.550 --> 00:03:41.960
So I'm going to say const button.

64
00:03:43.390 --> 00:03:48.400
And on my wrapper, I'm going to invoke the find method and say that I am looking for something with

65
00:03:48.700 --> 00:03:51.760
a data test attribute equal to some string.

66
00:03:51.760 --> 00:03:55.900
And let's say this, this will simply be called clear user job filters.

67
00:03:56.950 --> 00:03:57.280
Again.

68
00:03:57.280 --> 00:04:00.310
The name doesn't matter as long as you provide the exact same thing in your template.

69
00:04:00.670 --> 00:04:05.050
Then what I want to do is assuming I have a button, I want to trigger a click on it as a reminder.

70
00:04:05.050 --> 00:04:10.210
The way I can do that on this view wrapper object that I get back is that's going to have a trigger

71
00:04:10.210 --> 00:04:15.520
method and I provide trigger with a string representing the event that I want to trigger.

72
00:04:15.520 --> 00:04:15.790
Right.

73
00:04:16.000 --> 00:04:18.220
So in this case, I want to trigger a click on the button.

74
00:04:18.460 --> 00:04:20.890
This is going to be an asynchronous event.

75
00:04:20.910 --> 00:04:24.400
It takes a or an asynchronous method in the test file.

76
00:04:24.400 --> 00:04:26.890
It's going to take a little bit of time for the test to actually click.

77
00:04:27.190 --> 00:04:30.640
So I need to make sure I await this because it returns a promise.

78
00:04:30.640 --> 00:04:35.140
And if I await this, then I also need to make sure that I make the actual test function right here

79
00:04:35.440 --> 00:04:36.130
async.

80
00:04:36.310 --> 00:04:36.640
All right.

81
00:04:36.640 --> 00:04:39.160
So I'm going to make this second argument in async function.

82
00:04:39.160 --> 00:04:42.760
I'm going to use await and after I click and all the logic run runs through.

83
00:04:42.910 --> 00:04:46.330
That means we have if everything were correctly, we have click the button.

84
00:04:46.480 --> 00:04:51.130
We have thus run this logic and that means the commit method should have been invoked and it should

85
00:04:51.130 --> 00:04:52.150
have been invoked with this.

86
00:04:52.420 --> 00:04:58.390
So here we have reference to commit on line number 12 and I'm going to say that I expect commit to have

87
00:04:58.390 --> 00:04:59.440
been called with.

88
00:05:00.750 --> 00:05:04.080
And remember, that's not just testing that it's been invoked, but testing that it's been invoked with

89
00:05:04.080 --> 00:05:05.610
the exact argument we expect.

90
00:05:05.880 --> 00:05:12.240
And of course, what we expect is a string of clear user job filter selections.

91
00:05:13.720 --> 00:05:14.800
All right, so let's save that.

92
00:05:15.040 --> 00:05:17.980
And of course, it should fail because it's not able to find the button.

93
00:05:17.980 --> 00:05:21.730
And the reason it's not able to find the button is because there's nothing with that data assist attribute.

94
00:05:22.030 --> 00:05:24.930
So luckily, the solution here should be pretty simple right here.

95
00:05:24.940 --> 00:05:29.680
I'm going to add the data test attribute said, of course, to the exact same thing I have on the right,

96
00:05:29.680 --> 00:05:37.120
which is clear user job filters with all those dashes, whatever name you gave the data test is exactly

97
00:05:37.120 --> 00:05:38.310
what you must type out here.

98
00:05:38.650 --> 00:05:43.060
It looks like Iceland is happy with me right here and it looks as well like our tests are passing.

99
00:05:43.390 --> 00:05:43.660
All right.

100
00:05:43.660 --> 00:05:46.390
And that really, I think, is the heart of everything we need to test.

101
00:05:46.390 --> 00:05:49.310
As far as the prompt component, this is all basic time.

102
00:05:49.330 --> 00:05:54.550
al-Qazzaz It's really the user's interaction with the action button and how that communicates with the

103
00:05:54.550 --> 00:05:56.740
view store and what mutation it sends.

104
00:05:56.950 --> 00:05:58.720
That's really the responsibility of this component.

105
00:05:58.900 --> 00:06:01.660
So I think this one test is enough to capture all that logic.

106
00:06:02.080 --> 00:06:02.380
All right.

107
00:06:02.380 --> 00:06:04.960
So more progress, and I will see you in the next lesson.
