WEBVTT
1
00:00:00.430 --> 00:00:01.150
Okay.

2
00:00:01.150 --> 00:00:07.510
So we ended the previous lesson by observing the warnings that we were seeing in our terminal test output.

3
00:00:07.840 --> 00:00:12.940
And what's happening is the view test utils is telling us that it's running into a component called

4
00:00:12.940 --> 00:00:15.910
Find Awesome Icon and it doesn't know what that is.

5
00:00:16.210 --> 00:00:23.050
Our globally registered font Awesome Icon component is not available when we mount the sub nav component

6
00:00:23.050 --> 00:00:28.400
in isolation in our tests, and that's exactly what our tests are warning us about.

7
00:00:28.750 --> 00:00:34.240
So I'd like you to think about the font awesome icon here in line number five and it's relevant.

8
00:00:34.660 --> 00:00:41.200
And what I mean by that is, is it really important that the tests care about what font awesome icon

9
00:00:41.200 --> 00:00:41.680
is?

10
00:00:42.250 --> 00:00:46.240
And I would argue the answer is no for the purposes of the tests.

11
00:00:46.240 --> 00:00:52.390
The tests only care about two details whether we are displaying the job count and whether we are not

12
00:00:52.390 --> 00:00:53.590
displaying the job count.

13
00:00:53.830 --> 00:00:59.380
So the tests really care about this outer div or at least some element that's going to have the data

14
00:00:59.380 --> 00:01:00.460
test attribute on it.

15
00:01:00.670 --> 00:01:06.880
And whether it is present or not present for the purposes of the user experience and for the tests,

16
00:01:07.000 --> 00:01:10.270
we don't really care about this component right here.

17
00:01:10.450 --> 00:01:15.310
We don't care about whether it's a font awesome icon or an icon from another library.

18
00:01:15.550 --> 00:01:20.050
We don't really care about whether it's a magnifying glass or some kind of other font.

19
00:01:20.050 --> 00:01:22.630
Awesome icon, like a refrigerator or a giraffe.

20
00:01:22.870 --> 00:01:28.990
We don't care for the purposes of this test, but unfortunately our implementation is always trying

21
00:01:28.990 --> 00:01:33.940
to render this font awesome icon component because the test details are trying to render everything

22
00:01:33.940 --> 00:01:35.530
that they see in this template.

23
00:01:36.130 --> 00:01:39.490
So what we can use here is a feature called Stubs.

24
00:01:40.210 --> 00:01:47.530
So what a stub is, is basically a replacement or a stand in for an existing component.

25
00:01:47.950 --> 00:01:51.760
The analogy that I like to use is a stuntman in a movie.

26
00:01:51.760 --> 00:01:56.110
Whenever you're shooting in a movie and you have some kind of dangerous stunt, you don't have the real

27
00:01:56.110 --> 00:01:57.520
actor perform the job.

28
00:01:57.640 --> 00:02:03.310
You put in a stand in a replacement, a stuntman who takes care of that dangerous work.

29
00:02:03.610 --> 00:02:05.590
It's sort of a similar idea here.

30
00:02:05.860 --> 00:02:12.670
What we can do with a stub is tell Vue and the view test utils that whenever it sees a font awesome

31
00:02:12.670 --> 00:02:16.360
icon, we want it to replace it with something else.

32
00:02:16.720 --> 00:02:22.870
Now we can actually get pretty granular, granular in our tests and tell you what to replace it with.

33
00:02:23.110 --> 00:02:28.660
For example, we can say whenever you run into a font, awesome icon, replace it with an H one element

34
00:02:28.810 --> 00:02:31.030
or AP element or a dip.

35
00:02:31.210 --> 00:02:38.140
We can get that granular, but in this scenario, since we don't really care what we can tell, view

36
00:02:38.140 --> 00:02:43.600
is, hey, just replace it with anything, whatever you want as a testing library, whatever you want

37
00:02:43.600 --> 00:02:47.680
to replace this font awesome icon with, just replace it with your choice.

38
00:02:47.680 --> 00:02:47.950
Right?

39
00:02:48.100 --> 00:02:53.320
And to be honest, I don't know under the hood what vue test utils is going to replace this font awesome

40
00:02:53.320 --> 00:02:58.750
icon component width, but it's going to replace it with some kind of valid code or valid HTML.

41
00:02:59.020 --> 00:03:04.300
And thus whenever the component mounts, we're no longer going to be referencing the original font,

42
00:03:04.330 --> 00:03:06.040
awesome icon, global component.

43
00:03:06.250 --> 00:03:11.020
We're going to be rendering or referencing that replacement, which we call a stub.

44
00:03:11.320 --> 00:03:16.810
And thus because Vue and Vue test utils will know what that stub is, it's going to be something local

45
00:03:16.810 --> 00:03:20.590
to the test rather than the separate global component from a totally different library.

46
00:03:20.770 --> 00:03:23.680
The tests will no longer give us this warning.

47
00:03:24.340 --> 00:03:29.650
So again, to summarize, a stub is simply a simple replacement for an existing component.

48
00:03:29.650 --> 00:03:32.350
In another component, we're going to swap them out.

49
00:03:32.350 --> 00:03:33.460
We're going to replace them.

50
00:03:33.610 --> 00:03:37.780
We're going to find all occurrences of font, awesome icon and swap it with something else.

51
00:03:38.260 --> 00:03:38.620
Okay.

52
00:03:38.710 --> 00:03:40.810
And that is going to ensure that our warnings go away.

53
00:03:40.960 --> 00:03:46.000
And again, the reason why we have permission to do this is because for these tests, we don't care

54
00:03:46.000 --> 00:03:47.710
about font awesome icon being here.

55
00:03:47.830 --> 00:03:50.530
We're not testing that this aspect exists.

56
00:03:50.800 --> 00:03:52.990
We are just testing that the job count is present.

57
00:03:53.350 --> 00:03:58.330
So here in our configuration, we're not going to edit anything about our assertions.

58
00:03:58.480 --> 00:04:00.970
It's all going to happen in our set up of our mount.

59
00:04:01.270 --> 00:04:07.000
So in our data configuration object or rather in our component configuration object, which is the second

60
00:04:07.000 --> 00:04:12.070
argument to mount above data, I'm going to provide another property name which is global.

61
00:04:12.460 --> 00:04:14.380
And again, this name is not up to us.

62
00:04:14.380 --> 00:04:17.980
It's a requirement and I'm going to make this an object and provide the comma here.

63
00:04:18.370 --> 00:04:21.910
And this is set in kind of the global settings of the component.

64
00:04:22.090 --> 00:04:26.170
You can almost think of it the same way as we're setting a global components.

65
00:04:26.170 --> 00:04:30.820
When we registered the font awesome icon in the actual implementation, we're setting some higher level

66
00:04:30.820 --> 00:04:37.150
settings for the global A component or the global view application that governs this smaller subset

67
00:04:37.150 --> 00:04:37.600
of component.

68
00:04:37.900 --> 00:04:40.210
And in here we're going to have a key called Stubs.

69
00:04:40.210 --> 00:04:44.350
Again, that name is not up to us and this is going to be set to an object.

70
00:04:44.560 --> 00:04:48.460
And here in this object is where we can actually write our own specification.

71
00:04:48.760 --> 00:04:55.240
So the way this works is the properties or the keys in this object represent the components that we

72
00:04:55.240 --> 00:04:59.520
want to stub out that we want to replace whenever the test you.

73
00:04:59.630 --> 00:05:01.460
LS mount a submarine component.

74
00:05:01.760 --> 00:05:05.450
So what I'm going to write here is a key, a font, awesome icon.

75
00:05:06.260 --> 00:05:13.850
Now I know that I am using a spelling of this component that is different from what we have on line

76
00:05:13.850 --> 00:05:17.360
number five on the sub nav component file on the left.

77
00:05:17.480 --> 00:05:23.900
But that is totally fine because remember Vue is able to differentiate between upper camel case as well

78
00:05:23.900 --> 00:05:27.170
as kebab case with hyphens and it treats them as equivalent.

79
00:05:27.180 --> 00:05:33.290
So this is the way the arm, the component appears when we're importing it and main that yes.

80
00:05:33.290 --> 00:05:35.780
And this is also fine for us to reference it this way here.

81
00:05:36.020 --> 00:05:41.780
Vue will be able to tell that we want to replace this font awesome icon simply by using this terminology

82
00:05:41.780 --> 00:05:42.020
here.

83
00:05:42.290 --> 00:05:43.700
But of course this is an object.

84
00:05:43.700 --> 00:05:47.750
So we have to provide a value and the value we provide is simply true.

85
00:05:48.530 --> 00:05:54.830
So the reason why we have a boolean set up here is if we have multiple different components being rendered

86
00:05:54.830 --> 00:05:59.570
and we want to set out some of them but not others, we can put a true for the ones that we do want

87
00:05:59.570 --> 00:06:04.760
to stub out or in other words, the ones we do want to replace and a false for the ones that we do not.

88
00:06:05.030 --> 00:06:09.830
And again, if we were to go deeper into the view test utils documentation, we can find ways to customize

89
00:06:09.950 --> 00:06:12.470
what we actually replace font awesome icon with.

90
00:06:12.770 --> 00:06:14.840
But again, we don't care about that right now.

91
00:06:14.990 --> 00:06:17.600
So a simple value of true will tell the test.

92
00:06:17.600 --> 00:06:19.940
Hey, just replace it with something.

93
00:06:19.940 --> 00:06:22.580
I don't care about what but don't use the real font.

94
00:06:22.580 --> 00:06:22.940
Awesome.

95
00:06:22.940 --> 00:06:24.770
I component use a replacement.

96
00:06:25.100 --> 00:06:30.590
So I'm going to copy this logic and of course I'm going to place it down below in this test as well.

97
00:06:30.860 --> 00:06:35.990
So once again, in our configuration object, which is the second argument to our mount function, I'm

98
00:06:35.990 --> 00:06:40.970
going to place this object with a global key, or rather add the global key inside that object.

99
00:06:40.970 --> 00:06:43.160
I have a stubs key set to another object.

100
00:06:43.340 --> 00:06:44.930
Our property is going to be the component.

101
00:06:44.930 --> 00:06:47.450
We want to step out and the value is going to be true.

102
00:06:48.200 --> 00:06:48.530
All right.

103
00:06:48.710 --> 00:06:54.200
And if we look at our running tests, you'll actually see that those warnings from our sub nav tests

104
00:06:54.200 --> 00:06:55.130
have gone away.

105
00:06:55.280 --> 00:07:01.100
We are still left with the same warning from our main nav test that she has file.

106
00:07:01.190 --> 00:07:04.010
And we're going to come back to that test in an upcoming lesson.

107
00:07:04.190 --> 00:07:09.440
But for now, we have resolved the issues in our subnet component and our tests are focusing on what

108
00:07:09.440 --> 00:07:13.340
they really care about the conditional rendering of our job results.

109
00:07:13.400 --> 00:07:13.610
Right?

110
00:07:13.850 --> 00:07:18.620
So that's when you could use stubs and tests whenever you want to replace a child component being rendered.

111
00:07:18.890 --> 00:07:23.390
And in this case, when you don't care about what you replace it with, you just don't need it for the

112
00:07:23.390 --> 00:07:26.540
purposes of the test and the business logic that you are testing.

113
00:07:26.870 --> 00:07:27.200
All right.

114
00:07:27.200 --> 00:07:28.670
That's all there is to cover in this lesson.

115
00:07:28.670 --> 00:07:30.170
So I will see you in the next one.
