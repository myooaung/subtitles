1
00:00:00,210 --> 00:00:01,020
All right.

2
00:00:01,020 --> 00:00:03,800
So I think you can guess what we're going to do next.

3
00:00:03,810 --> 00:00:10,140
We're going to overwrite our job search, form data properties to store the data or the payload that

4
00:00:10,140 --> 00:00:12,930
we receive from our child text input component.

5
00:00:13,290 --> 00:00:19,260
So right now, whenever our child emits the handle input event, we're going to react to it by invoking

6
00:00:19,260 --> 00:00:20,550
the update roll method.

7
00:00:20,850 --> 00:00:22,680
And here is our update roll method.

8
00:00:22,860 --> 00:00:24,870
It will receive a payload argument.

9
00:00:24,870 --> 00:00:29,940
And that represents the second argument we provided right here in text input, which is just going to

10
00:00:29,940 --> 00:00:32,070
be the string with the actual text input.

11
00:00:32,460 --> 00:00:34,200
So what do I want to do with that payload?

12
00:00:34,350 --> 00:00:39,450
I want to override this component role data property with that parent payload.

13
00:00:39,780 --> 00:00:44,490
So this that role will get me that property and I will override it with payload.

14
00:00:44,790 --> 00:00:50,340
Payload represents the string of what the user has entered because that is what I'm sending along with

15
00:00:50,340 --> 00:00:51,960
the handle input event.

16
00:00:52,440 --> 00:00:52,860
All right.

17
00:00:53,190 --> 00:00:59,130
And while we're at it, we can practice this syntax again for our other text input component, because

18
00:00:59,130 --> 00:01:02,910
remember, we have the second runtime right here and this is for the location.

19
00:01:03,180 --> 00:01:07,020
Now, an important thing to note here is that these components are isolated.

20
00:01:07,260 --> 00:01:13,680
So just because this text input is handling the handle input event does not mean that this one is going

21
00:01:13,680 --> 00:01:14,880
to react to it as well.

22
00:01:15,000 --> 00:01:17,670
And similarly invoke the update roll method.

23
00:01:17,910 --> 00:01:18,870
Quite the opposite.

24
00:01:18,900 --> 00:01:25,020
Each component is independent and isolated and they're only going to react to that component.

25
00:01:25,020 --> 00:01:30,180
What I mean by that is this text input will know when it's itself.

26
00:01:30,180 --> 00:01:34,440
This child is going to send up the handle input event, right?

27
00:01:34,620 --> 00:01:37,800
It's a totally separate text input from right here.

28
00:01:38,010 --> 00:01:44,640
This text input knows about only this method shooting off in its own text input component.

29
00:01:44,640 --> 00:01:49,740
It is totally oblivious to what is going on to any other text input anywhere in our app.

30
00:01:50,220 --> 00:01:57,630
So right here for our text input for our location, we still have to react to the exact same emitted

31
00:01:57,630 --> 00:01:59,910
event and that is going to be called handle input.

32
00:02:00,150 --> 00:02:06,870
So I still want to use my VON Directive syntax, so I'm going to react to my handle input emitted event

33
00:02:06,960 --> 00:02:08,460
for this text input.

34
00:02:08,940 --> 00:02:14,340
And unlike the first one, I want to invoke a totally different method because for this one I do not

35
00:02:14,340 --> 00:02:17,400
want to invoke my update roll method that is totally different.

36
00:02:17,550 --> 00:02:20,490
I want to invoke a different method to update my location.

37
00:02:20,760 --> 00:02:23,220
So I'm going to call that method, update location.

38
00:02:24,210 --> 00:02:30,060
So once again, in case I kind of spoke too quickly, these are totally separate text input components.

39
00:02:30,270 --> 00:02:36,150
They're both going to react to the emission of the handle input event, but this text input is only

40
00:02:36,150 --> 00:02:38,520
going to react to its own handle input event.

41
00:02:38,730 --> 00:02:44,760
So whatever happens in the text input right here for this instantiation of that component, nothing

42
00:02:44,760 --> 00:02:48,810
here is going to affect anything in our second text input and vice versa.

43
00:02:48,990 --> 00:02:56,280
Nothing with the user typing in and a letter into the location input field will affect the text input

44
00:02:56,280 --> 00:02:57,210
that is storing the role.

45
00:02:57,450 --> 00:02:59,280
They're totally isolated and independent.

46
00:02:59,760 --> 00:03:02,340
So right here we have our update location method.

47
00:03:02,340 --> 00:03:08,610
So we must define a method with the same name update location, and it will similarly take a payload

48
00:03:08,700 --> 00:03:12,390
parameter and we're still reusing this text input component.

49
00:03:12,390 --> 00:03:17,970
But of course for our other text input for the location, this, that value in that circumstance will

50
00:03:17,970 --> 00:03:22,230
reflect the input for that text input, which is the user's location.

51
00:03:22,440 --> 00:03:27,990
So same payload, same string argument, but a totally separate text input instantiate component.

52
00:03:28,350 --> 00:03:33,450
So right here, instead of overriding this, that role, we want to update this not location, which

53
00:03:33,450 --> 00:03:36,210
is another data property on job search form.

54
00:03:36,420 --> 00:03:38,340
So this, that location equals payload.

55
00:03:39,750 --> 00:03:44,790
Three using the same text input component, but we are of course rendering two of them to handle the

56
00:03:44,790 --> 00:03:48,150
separate responsibilities of storing the role and the location.

57
00:03:48,360 --> 00:03:48,780
All right.

58
00:03:49,050 --> 00:03:52,320
And with that, we can transition to our browser and take a look at what we have.

59
00:03:53,160 --> 00:03:56,460
So right here, we have our role and our location.

60
00:03:56,490 --> 00:03:57,950
Let's start by typing to the role.

61
00:03:57,960 --> 00:04:03,480
Let me, in fact open up my first text input and we should see this value property on the text inputs

62
00:04:03,480 --> 00:04:04,140
data update.

63
00:04:04,150 --> 00:04:07,440
So let me for example, type, let's see, programmer.

64
00:04:09,130 --> 00:04:11,070
And we should see maybe this is a little bit slow.

65
00:04:11,080 --> 00:04:12,070
Let me refresh this.

66
00:04:13,180 --> 00:04:15,250
We should see programming appear and there it does.

67
00:04:15,250 --> 00:04:17,530
Apologies for a few dev tools not behaving.

68
00:04:17,780 --> 00:04:22,150
We should see that programmer updates in VI type s here and refresh this automatically.

69
00:04:22,150 --> 00:04:27,430
We can see that programmers is present right here, but if we transition to our job search form component

70
00:04:27,610 --> 00:04:32,200
will notice that its role data property has also updated.

71
00:04:32,470 --> 00:04:35,320
This is coming from the update roll method.

72
00:04:35,590 --> 00:04:41,380
We are taking the payload from that emitted event from the child and we are overwriting the raw property

73
00:04:41,380 --> 00:04:42,340
on the parent.

74
00:04:42,970 --> 00:04:49,570
Similarly, if I go into this field right here and let's say a type of city like Seattle, and I'm going

75
00:04:49,570 --> 00:04:52,570
to force a refresh right here, we'll see that.

76
00:04:52,570 --> 00:04:56,440
Now, our job search form will have that location, data, property populated.

77
00:04:56,830 --> 00:04:59,770
And remember, this is going to happen every time we type a character.

78
00:05:00,010 --> 00:05:04,900
So when we type the S here, the text input component will overwrite its value and then it's going to

79
00:05:04,900 --> 00:05:10,510
invoke a new or non invoke, but send out a new event called handle input with the payload of the letter.

80
00:05:10,510 --> 00:05:17,530
S Our job search form will receive that event and that payload and overwrite its own data property for

81
00:05:17,560 --> 00:05:19,120
location to have letter s.

82
00:05:19,390 --> 00:05:22,690
Then when we type the letter E, the exact same process occurs.

83
00:05:22,900 --> 00:05:26,890
The child text input component emits a handle input event.

84
00:05:27,070 --> 00:05:28,870
It gives it the payload of the characters.

85
00:05:29,020 --> 00:05:36,220
See, the parent job search form receives and reacts to that event and invokes its own method, which

86
00:05:36,220 --> 00:05:40,930
in turn updates the location data property to BSD.

87
00:05:41,230 --> 00:05:45,160
And that occurs every single time we type a character within our child.

88
00:05:45,160 --> 00:05:49,990
Our child emits a message upward, the parent receives it and does something to react to it.

89
00:05:50,440 --> 00:05:50,770
All right.

90
00:05:50,980 --> 00:05:52,960
So that is all there is to cover in this lesson.

91
00:05:52,960 --> 00:05:54,550
So I will see you in the next one.
