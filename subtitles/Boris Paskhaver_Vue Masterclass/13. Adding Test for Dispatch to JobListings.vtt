WEBVTT
1
00:00:00.420 --> 00:00:01.230
Okay.

2
00:00:01.230 --> 00:00:07.080
So in this lesson, I'd like to add one more test for our job listings component and it is going to

3
00:00:07.080 --> 00:00:08.890
be for this mounted lifecycle.

4
00:00:08.890 --> 00:00:14.580
Look, we actually do not have a test yet that is testing the interaction between the component and

5
00:00:14.580 --> 00:00:20.550
the dispatch method on the view next store or in our scenario, the mock object that is playing the

6
00:00:20.550 --> 00:00:21.540
role of the store.

7
00:00:21.870 --> 00:00:23.550
What do we want to verify here?

8
00:00:23.760 --> 00:00:25.050
I argue two things.

9
00:00:25.080 --> 00:00:29.820
Number one, that we are invoking the dispatch method, and number two, that we are passing at the

10
00:00:29.820 --> 00:00:31.080
right string argument.

11
00:00:31.230 --> 00:00:31.590
All right.

12
00:00:31.770 --> 00:00:33.870
We really don't care about what the store is doing.

13
00:00:33.870 --> 00:00:36.600
We just care that we are communicating with the store.

14
00:00:36.900 --> 00:00:41.220
We had a very similar test a while ago when we had an Axios method call in here.

15
00:00:41.400 --> 00:00:44.300
We were simply testing the interaction with Axios, right?

16
00:00:44.460 --> 00:00:46.800
But we obviously we move that logic to review store.

17
00:00:46.920 --> 00:00:52.230
So now we have that additional layer in between and we have to test that connection, the connection

18
00:00:52.230 --> 00:00:54.600
between job listings and our store.

19
00:00:55.380 --> 00:01:00.480
So right here in my job listings component file, let's create this test a little bit further up, maybe

20
00:01:00.480 --> 00:01:02.460
right below the create config function.

21
00:01:02.670 --> 00:01:05.520
The only reason I'm doing this is because it kind of makes logical sense.

22
00:01:05.520 --> 00:01:07.410
This is one of the earliest things that happens.

23
00:01:07.410 --> 00:01:11.400
The component mounts first before it does any of these responsibilities.

24
00:01:11.610 --> 00:01:12.750
So I'm just going to put it right here.

25
00:01:12.750 --> 00:01:14.310
It really doesn't matter where we put it.

26
00:01:14.670 --> 00:01:16.230
I'm just going to add a new described look.

27
00:01:16.620 --> 00:01:22.830
And this is describing what happens when the component mounts, some describing this scenario or context

28
00:01:22.830 --> 00:01:25.350
under which I'm declaring my assertion.

29
00:01:25.560 --> 00:01:26.790
And what do we want to assert?

30
00:01:27.150 --> 00:01:33.360
How about it makes call to fetch jobs from API?

31
00:01:34.860 --> 00:01:40.530
Maybe the second half of that test description knows a little bit too much about what the component

32
00:01:40.530 --> 00:01:45.450
is doing, because really the line of separation to me is simply that the component is talking to View

33
00:01:45.450 --> 00:01:45.680
X.

34
00:01:45.690 --> 00:01:47.700
It doesn't know what fetch jobs technically means.

35
00:01:48.000 --> 00:01:52.410
But again, from a human readable perspective, this describes the value of the component and what view

36
00:01:52.410 --> 00:01:53.520
X is going to do for us.

37
00:01:53.850 --> 00:01:58.620
So even though it requires, it almost reaches a little bit too much into view X to know what it's doing.

38
00:01:58.800 --> 00:02:03.420
I think from a reader perspective, it benefits somebody who wants to understand what job listings is

39
00:02:03.420 --> 00:02:04.290
doing when it mounts.

40
00:02:04.590 --> 00:02:09.570
So I think it's okay to be a little bit over descriptive here and know a little bit too much about the

41
00:02:09.570 --> 00:02:09.870
U.S..

42
00:02:09.870 --> 00:02:10.530
I think it's okay.

43
00:02:11.160 --> 00:02:11.520
Okay.

44
00:02:11.730 --> 00:02:15.840
So we're going to need to shell out our job listings component and we're going to need to pass that

45
00:02:15.840 --> 00:02:21.510
a configuration object using our create config factory function, which itself will require a route

46
00:02:21.510 --> 00:02:23.310
object and a store object.

47
00:02:23.700 --> 00:02:26.040
So let's begin by creating a route object.

48
00:02:26.040 --> 00:02:31.230
So constant dollar sign route and we're going to use the create root factory function that we have above.

49
00:02:31.500 --> 00:02:37.200
If I scroll up as a reminder, here it is and we don't care about any of these additional params or

50
00:02:37.230 --> 00:02:37.890
properties.

51
00:02:37.890 --> 00:02:39.990
We don't want to specify them, we don't care about them.

52
00:02:40.200 --> 00:02:42.840
So we can just rely on the default factory function.

53
00:02:42.840 --> 00:02:47.520
And that is the beauty of our factory design is we need some kind of route for the component, but we

54
00:02:47.520 --> 00:02:48.780
don't care about it specifics.

55
00:02:48.780 --> 00:02:51.930
So I'm just going to use that factory function and let it take care of that responsibility.

56
00:02:52.410 --> 00:02:56.970
Now, in regards to my store, what I am going to do here is I'm going to create a constant to reference

57
00:02:56.970 --> 00:02:58.590
my eventual dispatch method.

58
00:02:58.860 --> 00:03:04.650
Technically speaking, we do have reference to that dispatch just function right here in the return

59
00:03:04.650 --> 00:03:10.650
store, but I want to write it in line just so I communicate to my future reader that dispatch has some

60
00:03:10.650 --> 00:03:12.630
importance in this in this specific test.

61
00:03:12.960 --> 00:03:13.890
So here's what I'm going to do.

62
00:03:13.890 --> 00:03:16.290
I'm going to declare a dispatch constant.

63
00:03:17.100 --> 00:03:17.910
I'm going to set it evil.

64
00:03:17.910 --> 00:03:20.130
Trade equals equal, not evil.

65
00:03:20.310 --> 00:03:22.290
Set an equal to a just marked function.

66
00:03:22.410 --> 00:03:24.120
Why are we using a just mock function?

67
00:03:24.210 --> 00:03:27.960
Because it can track if it's been invoked and with what arguments.

68
00:03:27.960 --> 00:03:29.280
And that's what we want to test.

69
00:03:29.400 --> 00:03:33.930
We want to mount the component and make sure that the dispatch method has been called with the right

70
00:03:33.930 --> 00:03:34.620
string argument.

71
00:03:34.950 --> 00:03:41.190
So what I'm going to do here is I'm going to create my mock store, and in order to do that, I'm going

72
00:03:41.190 --> 00:03:43.290
to use my create store factory function.

73
00:03:43.680 --> 00:03:49.170
And in previous lessons, we were really concerned with modifying the state right here in this test.

74
00:03:49.170 --> 00:03:52.800
We don't care about the state, so we're totally fine going with this default option.

75
00:03:53.010 --> 00:03:58.410
But we do want to overwrite dispatch to be our own local version of dispatch just because we have that

76
00:03:58.410 --> 00:03:59.400
constant in line.

77
00:03:59.490 --> 00:04:02.850
And then we can very easily test that, that exact just function.

78
00:04:02.850 --> 00:04:06.210
The one referenced by our dispatch constant has been invoked.

79
00:04:06.210 --> 00:04:06.540
Right?

80
00:04:06.900 --> 00:04:12.360
So right here I'm going to provide my config argument to create store and I'm going to make sure I pass

81
00:04:12.360 --> 00:04:17.370
in a property of dispatch, which is of course going to be our dispatch mock function that we declared

82
00:04:17.370 --> 00:04:17.760
in line.

83
00:04:17.760 --> 00:04:23.220
I'm using that Essex index here, so we're going to get a store with some jobs on it, but also a dispatch

84
00:04:23.220 --> 00:04:23.610
method.

85
00:04:23.610 --> 00:04:25.110
That is this thing right here.

86
00:04:25.530 --> 00:04:25.920
Okay.

87
00:04:26.160 --> 00:04:30.750
The next thing I'm going to do, of course, is shallow amount, my job listings component.

88
00:04:30.990 --> 00:04:34.200
Then I need to provide my configuration object for my just test.

89
00:04:34.500 --> 00:04:36.990
So I'm going to invoke the create config factory function.

90
00:04:36.990 --> 00:04:37.860
What does that need?

91
00:04:37.860 --> 00:04:39.780
It needs a route object and a store.

92
00:04:40.110 --> 00:04:43.440
So now we're going to provide dollar sign root and dollar sign store.

93
00:04:43.620 --> 00:04:48.600
Those will become the respective properties on the component, this dollar sign root and this the dollar

94
00:04:48.600 --> 00:04:49.170
sign store.

95
00:04:49.380 --> 00:04:54.500
Again, they're not real objects as we're going to use in the real world from view router and view ax.

96
00:04:54.600 --> 00:04:59.820
Rather they're simpler mock JavaScript objects that will play the role of those things and we don't

97
00:04:59.820 --> 00:05:05.190
even need to assign the return value shall amount to any constant or variable because we don't care

98
00:05:05.190 --> 00:05:06.060
about doing anything.

99
00:05:06.180 --> 00:05:11.490
We just care that after this show amount we expect this life cycle hook to have been run.

100
00:05:11.730 --> 00:05:16.560
And if it ran, then we know that we should have talked to the dispatch method on our store, which

101
00:05:16.560 --> 00:05:18.420
of course is this function right here.

102
00:05:18.780 --> 00:05:26.910
So immediately after this component runs, I can simply say expect dispatch to have been called with.

103
00:05:28.420 --> 00:05:32.830
As a reminder, this verifies not only that dispatch has been called, but that it's been called with

104
00:05:32.830 --> 00:05:33.790
the correct arguments.

105
00:05:34.540 --> 00:05:38.140
And we, of course, expect the argument of fetch underscore jobs.

106
00:05:38.800 --> 00:05:43.630
The reason I don't want to import this constant right here and use it in my tests is because if we were

107
00:05:43.630 --> 00:05:47.530
using a real TDD approach, we wouldn't have our code ready beforehand.

108
00:05:47.530 --> 00:05:51.070
We would write a test just like this and then make the implementation happen.

109
00:05:51.250 --> 00:05:53.650
So I want to make sure I write exactly what I want.

110
00:05:53.800 --> 00:05:56.500
Independent of my actual real world implementation code.

111
00:05:56.510 --> 00:05:57.940
So I'm going to write this string in line.

112
00:05:58.210 --> 00:06:00.160
I'm going to save this and let's see what happens.

113
00:06:02.480 --> 00:06:03.890
And we do get a passing test.

114
00:06:04.040 --> 00:06:06.440
Let's verify that it's not a false positive.

115
00:06:06.590 --> 00:06:11.150
The way we can do that, of course, is by commenting out this line that will prevent dispatch from

116
00:06:11.150 --> 00:06:12.200
ever having been called.

117
00:06:12.500 --> 00:06:14.630
If I save this and let my test we rerun.

118
00:06:14.630 --> 00:06:18.240
We should get the expected error of exactly what we see here.

119
00:06:18.260 --> 00:06:19.210
Number of calls.

120
00:06:19.220 --> 00:06:19.680
Zero.

121
00:06:19.880 --> 00:06:24.860
Just is telling us, hey, you told me this batch should be invoked with the argument fetch jobs.

122
00:06:25.010 --> 00:06:26.960
But I did not see any calls.

123
00:06:26.960 --> 00:06:27.530
That function.

124
00:06:27.530 --> 00:06:29.150
That function was never invoked.

125
00:06:29.390 --> 00:06:34.670
So that confirms that logic is correctly working because we do see an actual failure that we can then

126
00:06:34.670 --> 00:06:36.320
correct by bringing this code back in.

127
00:06:36.650 --> 00:06:40.640
That's always a good idea to make sure you see a failure before you see the pass.

128
00:06:40.790 --> 00:06:45.230
Just to make sure it's not an accidental false positive that is passing for some random reason that

129
00:06:45.230 --> 00:06:46.430
is not related to the test.

130
00:06:46.430 --> 00:06:46.670
Right.

131
00:06:46.880 --> 00:06:50.480
If we wrote TDD, we would never have this functionality from the first place.

132
00:06:50.630 --> 00:06:54.410
So we would verify that and then verify that our solution solves the problem for us.

133
00:06:54.410 --> 00:06:54.620
Right.

134
00:06:54.830 --> 00:06:59.120
This was just another way, a more roundabout way of doing it, but keeping in the spirit of test driver

135
00:06:59.140 --> 00:06:59.540
development.

136
00:06:59.990 --> 00:07:00.260
All right.

137
00:07:00.260 --> 00:07:01.820
That's all there is to cover in this lesson.

138
00:07:01.820 --> 00:07:03.410
So I will see you in the next one.
