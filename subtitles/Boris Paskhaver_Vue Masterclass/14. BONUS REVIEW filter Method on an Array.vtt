WEBVTT
1
00:00:00.690 --> 00:00:01.530
Okay.

2
00:00:01.530 --> 00:00:08.070
So in this lesson, I'd like to do a quick review of the filter method on an array in JavaScript.

3
00:00:08.340 --> 00:00:13.080
If you are comfortable with filter, you can feel free to skip this lesson and move on to the next one.

4
00:00:13.410 --> 00:00:18.000
Otherwise, join me in the playground dot js file in our source directory.

5
00:00:18.270 --> 00:00:21.930
As a reminder, this playground file is just a scratch pad file.

6
00:00:21.930 --> 00:00:28.170
It's a throwaway file where we can practice various JavaScript and view concepts outside of our main

7
00:00:28.170 --> 00:00:28.620
project.

8
00:00:28.890 --> 00:00:33.360
So I'm just going to write some code here and then run it using Node so we can observe the output.

9
00:00:33.630 --> 00:00:37.350
If you have any content in this file already, you can feel free to delete it.

10
00:00:37.350 --> 00:00:40.590
It's just, for example, for a previous explanation throughout the course.

11
00:00:41.070 --> 00:00:44.250
So let's talk about the filter method on an array.

12
00:00:44.550 --> 00:00:46.170
Let's begin by declaring an array.

13
00:00:46.200 --> 00:00:51.420
I'm just going to declare an array of numbers and I'm going to populate it with a bunch of random numbers.

14
00:00:51.420 --> 00:00:58.500
Let's do 135729 11 and let's do six.

15
00:00:59.630 --> 00:01:00.050
Okay.

16
00:01:00.530 --> 00:01:07.670
So let's say I want to filter or narrow this array down to the numbers that are greater than the number

17
00:01:07.670 --> 00:01:08.270
six.

18
00:01:08.660 --> 00:01:08.990
All right.

19
00:01:09.230 --> 00:01:12.440
So there's only a couple elements that are going to fit that criteria.

20
00:01:12.550 --> 00:01:15.830
Now, seven, nine and 11 are greater than six.

21
00:01:16.190 --> 00:01:23.240
What I want to do is to create a new array consisting of only the elements from the numbers array that

22
00:01:23.240 --> 00:01:28.190
fit that criteria that satisfy that condition of being greater than six.

23
00:01:28.610 --> 00:01:32.000
So using the filter method in JavaScript, I can do just that.

24
00:01:32.180 --> 00:01:34.730
I can filter my original array.

25
00:01:35.030 --> 00:01:39.410
I can create a subset of my original elements based on some criteria.

26
00:01:39.800 --> 00:01:43.880
So the way it works is we call the filter method on an array object.

27
00:01:44.000 --> 00:01:46.910
So numbers that filter, we're going to invoke that method.

28
00:01:47.210 --> 00:01:50.270
And what we pass filter is actually going to be a function.

29
00:01:50.540 --> 00:01:52.310
It's called a predicate function.

30
00:01:52.580 --> 00:01:55.370
So right here, I'm going to declare an arrow function right in line.

31
00:01:56.750 --> 00:02:01.280
And what I'm going to do is I'm going to provide a single parameter to this arrow function.

32
00:02:01.580 --> 00:02:07.910
What JavaScript is going to do is it's going to run this function on every single element of the array

33
00:02:07.910 --> 00:02:09.710
that the filter method is being invoked on.

34
00:02:10.010 --> 00:02:16.260
So in other words, this function that I provide is going to be run on one, then three, then five,

35
00:02:16.280 --> 00:02:19.550
then seven, then two, etc. every element of the array.

36
00:02:19.940 --> 00:02:25.850
And so what I want to provide as my parameter to this function is a name that represents an individual

37
00:02:25.850 --> 00:02:26.930
element in this array.

38
00:02:27.140 --> 00:02:30.650
So I can call this element, I can call this item, I can call this value.

39
00:02:30.890 --> 00:02:36.020
Given that we're iterating over an array of numbers and this parameter name here might be number because

40
00:02:36.020 --> 00:02:37.880
it's the singular version of the plural.

41
00:02:38.120 --> 00:02:39.320
So I'm just going to call it number.

42
00:02:39.890 --> 00:02:43.040
So we're going to iterate over one array element, one number at a time.

43
00:02:43.310 --> 00:02:47.990
What this function must return is a boolean, either true or false.

44
00:02:48.350 --> 00:02:55.310
If the function returns true, then JavaScript will include that element that we're iterating over in

45
00:02:55.310 --> 00:02:57.110
the final array that it constructs.

46
00:02:57.440 --> 00:03:03.140
In comparison, if this function that we provide it returns false, then JavaScript will exclude, or

47
00:03:03.140 --> 00:03:06.560
in other words, leave out the current element that we're iterating over.

48
00:03:07.100 --> 00:03:12.530
So what I want to do here is use automatic returns in JavaScript, and what I simply want to do is use

49
00:03:12.530 --> 00:03:17.060
the greater than operator in JavaScript to compare my number to the value six.

50
00:03:17.330 --> 00:03:19.040
So whatever number I'm iterating over.

51
00:03:20.080 --> 00:03:23.110
I'm going to check whether it is greater than six.

52
00:03:23.530 --> 00:03:28.930
And because I am doing a single line expression, this will be an automatic return in JavaScript.

53
00:03:28.930 --> 00:03:32.560
So right here this will be the automatic implicit return of this function.

54
00:03:32.740 --> 00:03:36.490
So this will evaluate to true or false and that will be immediately returned.

55
00:03:36.730 --> 00:03:40.900
It's no different than if I were to put curly braces here and use the return keyword manually.

56
00:03:40.990 --> 00:03:42.430
It's just a shortcut for doing that.

57
00:03:43.000 --> 00:03:43.360
All right.

58
00:03:43.630 --> 00:03:48.850
So what we're saying here is iterate over every number in our array and filter for only those numbers

59
00:03:48.850 --> 00:03:51.340
that satisfy the condition of being greater than six.

60
00:03:51.670 --> 00:03:53.140
So if I console.log.

61
00:03:54.240 --> 00:03:55.590
The returned value.

62
00:03:55.590 --> 00:03:58.920
It's going to be a new array, a completely new array.

63
00:04:00.160 --> 00:04:06.250
I'm going to run this with node source playgrounds and it's going to be a new array of the number of

64
00:04:06.250 --> 00:04:07.360
seven, nine, 11.

65
00:04:07.570 --> 00:04:11.590
They're going to appear in the exact same order as they were in the original numbers.

66
00:04:11.590 --> 00:04:11.890
Right?

67
00:04:12.040 --> 00:04:17.260
Because JavaScript is literally iterating from element element 135729.

68
00:04:17.440 --> 00:04:20.800
For each one, it's running this function that we passed the filter.

69
00:04:20.980 --> 00:04:25.960
If that function is returning true, which it will for seven, nine and 11, it's going to keep those

70
00:04:25.960 --> 00:04:27.190
elements in a new array.

71
00:04:27.580 --> 00:04:29.260
So we are literally filtering, right?

72
00:04:29.290 --> 00:04:35.830
If you think about the word filter in real life, it means to select a certain subset or limit something,

73
00:04:35.830 --> 00:04:36.010
right?

74
00:04:36.010 --> 00:04:37.600
If you think about a filter in a drain.

75
00:04:37.600 --> 00:04:37.810
Right.

76
00:04:37.810 --> 00:04:38.900
Or a water filter.

77
00:04:38.900 --> 00:04:39.060
Right.

78
00:04:39.080 --> 00:04:44.350
A water filter prevents certain bad things from getting into your water at the same idiots it's filtering

79
00:04:44.350 --> 00:04:49.900
out or selecting, choosing which components are going to make it through and which ones are not.

80
00:04:50.200 --> 00:04:53.800
So in this case, it's choosing which numbers are going to make it through those that are greater than

81
00:04:53.800 --> 00:04:54.190
six.

82
00:04:54.670 --> 00:04:55.990
So how does this apply to us?

83
00:04:56.020 --> 00:04:59.710
Well, let me give you another example that's going to be a little bit more relevant for us in what

84
00:04:59.710 --> 00:05:00.340
we're working on.

85
00:05:00.580 --> 00:05:05.560
Let's say I have an array, but instead of numbers, it's going to be an array of objects and I'm going

86
00:05:05.560 --> 00:05:09.490
to call it jobs, very similar to what we have in the real world.

87
00:05:09.820 --> 00:05:12.700
And let's say each job object is going to have two properties.

88
00:05:12.880 --> 00:05:14.470
Title and organization.

89
00:05:14.770 --> 00:05:16.270
So let's write out three jobs here.

90
00:05:16.330 --> 00:05:19.810
My first one is going to have a title of Angular Developer.

91
00:05:20.470 --> 00:05:23.860
My organization here is going to be Microsoft.

92
00:05:25.700 --> 00:05:28.910
And on the next line I will create another job object.

93
00:05:29.390 --> 00:05:34.580
The title for this job will be programmer and the organization is going to be Google.

94
00:05:35.570 --> 00:05:43.010
And then finally, for my third job object on a separate line, I'll have a title of developer and I

95
00:05:43.010 --> 00:05:45.440
will have an organization of Microsoft.

96
00:05:47.040 --> 00:05:53.760
So let's say that I wanted to filter this array of job objects to only those jobs that have an organization

97
00:05:53.760 --> 00:05:55.110
of Microsoft.

98
00:05:55.410 --> 00:05:56.970
So I want to create a subset.

99
00:05:56.970 --> 00:06:05.040
I want to filter this jobs array down from an array of three jobs to a new array of two jobs, two jobs

100
00:06:05.040 --> 00:06:07.080
that both have the organization of Microsoft.

101
00:06:07.320 --> 00:06:09.360
So the object is going to be the exact same.

102
00:06:09.360 --> 00:06:12.840
I'm going to call the filter method on my jobs array.

103
00:06:13.110 --> 00:06:17.730
What I provide to filter is a function for JavaScript to invoke on every individual element.

104
00:06:17.820 --> 00:06:20.700
In this case, every individual element is a whole object.

105
00:06:20.940 --> 00:06:22.650
But I'm going to give it the name job.

106
00:06:23.840 --> 00:06:24.230
All right.

107
00:06:24.590 --> 00:06:26.150
And then what do I want to do with Job?

108
00:06:26.180 --> 00:06:30.200
I want to write some kind of condition here that's going to value it to a boolean.

109
00:06:30.320 --> 00:06:30.650
Right.

110
00:06:30.860 --> 00:06:36.380
So what I want to do is whatever job object I'm editing over at the time, I want to take a look at

111
00:06:36.380 --> 00:06:42.470
its organization property and I want to use the equality operator to check if it is equal to Microsoft.

112
00:06:43.100 --> 00:06:47.330
If this condition evaluates to true, then I want to keep it.

113
00:06:47.330 --> 00:06:50.690
And if this evaluates the false, we're telling JavaScript to not keep it.

114
00:06:51.290 --> 00:06:51.740
Okay.

115
00:06:52.130 --> 00:06:55.610
So again, the function here that you passed the filter must return a boolean.

116
00:06:55.610 --> 00:06:57.950
I'm just implicitly returning it here using yes.

117
00:06:58.040 --> 00:06:58.490
Syntax.

118
00:06:58.700 --> 00:07:01.670
But you're more than welcome to provide curly braces and the return keyword.

119
00:07:02.030 --> 00:07:06.110
So right here I'm going to console.log this new array.

120
00:07:06.860 --> 00:07:10.380
We're not modifying the original array in any way and we're getting back a brand new array.

121
00:07:10.640 --> 00:07:16.100
And when I run this file, you're going to see we're going to get a new array with just two objects.

122
00:07:16.310 --> 00:07:17.720
And what do those two objects have?

123
00:07:17.750 --> 00:07:19.520
They have an organization of Microsoft.

124
00:07:19.880 --> 00:07:21.910
So a JavaScript did is it iterated?

125
00:07:21.920 --> 00:07:25.970
It went over each element in my jobs array and said, hey, object one.

126
00:07:26.090 --> 00:07:27.890
Is your organization equal to Microsoft?

127
00:07:27.950 --> 00:07:28.550
True.

128
00:07:28.570 --> 00:07:30.770
Okay, I'm going to keep you object two.

129
00:07:30.770 --> 00:07:32.510
Is your organization equal to Microsoft?

130
00:07:32.660 --> 00:07:34.340
No, your organization is Google.

131
00:07:34.700 --> 00:07:35.840
That returns false.

132
00:07:35.840 --> 00:07:36.980
I'm going to not keep you.

133
00:07:37.220 --> 00:07:39.920
Third job object is your organization Microsoft?

134
00:07:40.010 --> 00:07:40.660
Yes, it is.

135
00:07:40.670 --> 00:07:41.030
Okay.

136
00:07:41.030 --> 00:07:42.320
I'm going to keep you now.

137
00:07:42.320 --> 00:07:43.250
I have two objects.

138
00:07:43.250 --> 00:07:44.840
I'm going to package them in a new array.

139
00:07:44.960 --> 00:07:47.210
And that's what I'm going to return from the filter method.

140
00:07:47.690 --> 00:07:47.990
Right.

141
00:07:48.170 --> 00:07:52.400
And this is the exact same technique that we're going to use in the very next lesson to filter our big

142
00:07:52.400 --> 00:07:53.780
array of 100 jobs.

143
00:07:54.020 --> 00:07:54.800
So I will see you there.
