1
00:00:00,480 --> 00:00:01,370
Okay.

2
00:00:01,380 --> 00:00:06,000
So I have a good feeling that this is going to be the last one where it all comes together.

3
00:00:06,180 --> 00:00:11,970
We're going to be able to filter the jobs on the right hand side of the screen as the user selects a

4
00:00:12,000 --> 00:00:12,630
checkbox.

5
00:00:12,990 --> 00:00:19,110
So on the right hand side here, I have my view store file in index stacks, and on the left hand side

6
00:00:19,110 --> 00:00:21,660
I've opened up my job listings component.

7
00:00:21,900 --> 00:00:27,390
It's been a little while since we've been in here, so let me just do a quick recap right here on line

8
00:00:27,390 --> 00:00:33,420
number five, we are using the V four directive to iterate over something called display jobs and to

9
00:00:33,420 --> 00:00:36,450
render a job listing component for each job.

10
00:00:36,720 --> 00:00:41,820
A job listing component is just that card that we display on the on the page that has the title, the

11
00:00:41,820 --> 00:00:43,680
location, the bullet points, etc..

12
00:00:44,040 --> 00:00:45,750
So what is display jobs?

13
00:00:45,930 --> 00:00:48,360
Well, if I scroll down to my script section.

14
00:00:49,300 --> 00:00:50,500
We'll see that display.

15
00:00:50,500 --> 00:00:52,330
Jobs is a computed property.

16
00:00:52,600 --> 00:00:58,390
And what it's doing is it's selecting the first ten jobs from this jobs right here.

17
00:00:58,690 --> 00:01:00,580
Now, where is this that jobs coming from?

18
00:01:00,790 --> 00:01:07,390
That property is coming from maps state as a reminder map state as a helper function from view X that

19
00:01:07,390 --> 00:01:13,120
connects our view X store state properties directly to component computed properties.

20
00:01:13,360 --> 00:01:19,210
So this job string right here allows us to have access to this jobs array right here on the right hand

21
00:01:19,210 --> 00:01:25,780
side, we take this array of 100 jobs and we make it available as this dot jobs in our job listings

22
00:01:25,780 --> 00:01:26,200
component.

23
00:01:26,590 --> 00:01:32,590
So for example, if we have 100 jobs here, we get that array via this type jobs, then we use the slice

24
00:01:32,590 --> 00:01:36,130
method on that array of 100 jobs to get the first ten.

25
00:01:36,640 --> 00:01:42,160
So now our situation is a little bit different because we still want to show ten jobs per page.

26
00:01:42,370 --> 00:01:48,340
However, we only want to show ten jobs from the original batch of filtered jobs, right?

27
00:01:48,490 --> 00:01:53,360
We want the jobs that matched the organization that the user has filtered by.

28
00:01:53,590 --> 00:01:58,450
So just to give you a hypothetical example, let's say we have 100 original jobs.

29
00:01:58,690 --> 00:02:04,300
Then when the user selects an organization, let's say 40 of the original 100 fit the criteria.

30
00:02:04,510 --> 00:02:09,460
We're going to get those 40 jobs in this component eventually and we still want to get the first ten

31
00:02:09,460 --> 00:02:10,510
of that batch.

32
00:02:11,260 --> 00:02:16,290
So we still need to keep this logic somehow, but we're no longer going to be able to rely on this type

33
00:02:16,300 --> 00:02:21,730
jobs because we're going to replace this with our filter jobs rather than our original array of 100

34
00:02:21,730 --> 00:02:22,030
jobs.

35
00:02:22,300 --> 00:02:25,330
The same principle applies in this computed property right here.

36
00:02:25,510 --> 00:02:30,040
Here we're using the the length of the jobs rate to calculate the next page.

37
00:02:30,190 --> 00:02:35,530
We need this because we need to figure out if there is a next page based on there being any more jobs

38
00:02:35,530 --> 00:02:36,220
left to show.

39
00:02:36,400 --> 00:02:38,410
We still have the exact same logic.

40
00:02:38,410 --> 00:02:43,600
We want the user to be able to navigate back and forth between pages, but now we don't care about the

41
00:02:43,600 --> 00:02:45,460
length of the original jobs array.

42
00:02:45,640 --> 00:02:50,860
We want the length of our filtered jobs array because that is what's going to determine how many pages

43
00:02:50,860 --> 00:02:52,330
there are that we want to show.

44
00:02:53,080 --> 00:02:58,510
So let's start refactoring this component and moving it in a direction where we are relying on our filter

45
00:02:58,510 --> 00:03:00,310
jobs instead of our original jobs.

46
00:03:00,610 --> 00:03:03,940
So I'm going to begin by commenting out this line of Map State.

47
00:03:04,780 --> 00:03:07,360
It's just going to be a reminder that we eventually want to remove this.

48
00:03:07,570 --> 00:03:11,950
And when I scroll up here, I'm going to remove Map State because we're no longer using it.

49
00:03:14,160 --> 00:03:20,040
So instead of using Map State to connect a piece of components state to a view store property, in this

50
00:03:20,040 --> 00:03:20,670
case jobs.

51
00:03:20,880 --> 00:03:27,270
I want to use my getter, my filter jobs by organization getter, because this getter is going to give

52
00:03:27,270 --> 00:03:30,570
me this smaller array of jobs that I want to display.

53
00:03:30,870 --> 00:03:33,780
I no longer want to show this array of jobs.

54
00:03:33,960 --> 00:03:36,210
I want to show this array of jobs.

55
00:03:36,480 --> 00:03:40,800
It's still an array of job objects at the end of the day, because we're calling filter right here on

56
00:03:40,800 --> 00:03:41,610
state jobs.

57
00:03:41,730 --> 00:03:43,290
But it's a smaller subset.

58
00:03:43,440 --> 00:03:44,840
It's a smaller collection.

59
00:03:44,850 --> 00:03:49,140
It's an array that's going to have a smaller number of jobs because when the user filters, they're

60
00:03:49,140 --> 00:03:53,040
going to select a smaller collection of the original larger collection.

61
00:03:53,310 --> 00:03:55,170
So I know I'm going to need to use this getter.

62
00:03:55,320 --> 00:04:01,200
And the easiest way to connect a view X getter method to a component method is by using the map getters

63
00:04:01,200 --> 00:04:01,920
helper function.

64
00:04:02,190 --> 00:04:04,680
So right here I'm going to import map getters.

65
00:04:06,640 --> 00:04:12,100
And then I want to import the constant with the getter that I want to connect to this component.

66
00:04:12,340 --> 00:04:14,120
So that's going to be this getter right here.

67
00:04:14,140 --> 00:04:15,850
Filter jobs by organizations.

68
00:04:16,150 --> 00:04:20,650
So right here where I'm importing fetch jobs from my store index, just file.

69
00:04:20,740 --> 00:04:24,160
I also want to import my filter jobs by organizations constant.

70
00:04:24,400 --> 00:04:29,950
And as a reminder, we can still keep fetch jobs because fetch jobs is simply the action we're calling

71
00:04:29,950 --> 00:04:33,760
right here to do the original API request to get that batch of 100.

72
00:04:34,090 --> 00:04:37,090
So we're still going to keep map actions and we're still going to keep fetch jobs.

73
00:04:37,240 --> 00:04:39,070
That's just for the original API request.

74
00:04:39,550 --> 00:04:39,910
All right.

75
00:04:40,690 --> 00:04:43,960
So now we need to use this getter in my component.

76
00:04:44,200 --> 00:04:48,790
So the easiest way to establish this getter as a component method is by using map getters.

77
00:04:49,000 --> 00:04:55,150
So right here, I'm going to restructure the properties or alternatively destructor the methods that

78
00:04:55,150 --> 00:04:57,730
are on the object that map getters returns to me.

79
00:04:58,030 --> 00:05:03,700
So I'm going to invoke map getters and then I'm going to provide map getters with an array of the getters

80
00:05:03,700 --> 00:05:08,710
that I want to make available on this component as computed properties or computed methods.

81
00:05:08,950 --> 00:05:13,690
So of course, the getter that I care about here is called filter jobs by organizations.

82
00:05:14,050 --> 00:05:20,080
So simply by using map getters, what I've done here is now this component has a this that filter jobs

83
00:05:20,080 --> 00:05:23,380
by organization's computed property or method, however you want to call it.

84
00:05:23,620 --> 00:05:28,330
And that is going to be this return dye right here, this filtered array of jobs.

85
00:05:29,230 --> 00:05:29,620
All right.

86
00:05:29,890 --> 00:05:36,110
So now I want to use this throughout my other computed properties that we're formally relying on this

87
00:05:36,110 --> 00:05:36,670
to jobs.

88
00:05:36,970 --> 00:05:42,430
So, for example, in next page, this computed property, I was referencing this the jobs which I got

89
00:05:42,430 --> 00:05:43,220
from Maps State.

90
00:05:43,360 --> 00:05:47,850
I no longer have this state jobs available because we committed our maps state.

91
00:05:48,100 --> 00:05:56,800
However, because I used map getters above online 50, I now do have this dot filter jobs by organization.

92
00:05:57,830 --> 00:05:58,100
Right.

93
00:05:58,310 --> 00:06:02,030
And it is a computed property, so we can simply reference it as a regular property.

94
00:06:02,030 --> 00:06:06,080
It's technically a method that's going to run behind the scenes, but we do not need to provide the

95
00:06:06,080 --> 00:06:06,650
parentheses.

96
00:06:06,950 --> 00:06:09,410
So we filter jobs by organizations.

97
00:06:09,410 --> 00:06:13,370
Array is what we're going to get here and then we're going to take it's land and divided by ten, and

98
00:06:13,370 --> 00:06:18,710
that's going to calculate the max the max page that we can show similarly right here displayed jobs.

99
00:06:18,860 --> 00:06:22,220
We want to slice the first ten jobs from a given array.

100
00:06:22,430 --> 00:06:24,080
But what is that given array?

101
00:06:24,230 --> 00:06:27,570
It's no longer our original jobs array that we got from View X.

102
00:06:27,740 --> 00:06:31,880
It's now our filtered jobs rate that we're going to get from our getter.

103
00:06:31,970 --> 00:06:32,840
Which getter?

104
00:06:32,840 --> 00:06:38,840
The one that we have available now under this keyword called filter jobs by organization, the exact

105
00:06:38,840 --> 00:06:40,850
same one that we enabled right here.

106
00:06:41,180 --> 00:06:46,730
So just to reiterate, if we did not have line 50, if we did not use map getters, we would not be

107
00:06:46,730 --> 00:06:49,340
able to write line 62 or line 69.

108
00:06:49,490 --> 00:06:51,440
We need to make that getter available.

109
00:06:51,530 --> 00:06:55,790
And the easiest way to do that is to use map getters and this structure, that method that you X will

110
00:06:55,790 --> 00:06:56,240
give to us.

111
00:06:56,480 --> 00:07:00,680
And of course what that method is going to do behind the scenes is automatically run the getter for

112
00:07:00,680 --> 00:07:02,600
us and pass it to View Store State.

113
00:07:03,500 --> 00:07:03,860
All right.

114
00:07:04,130 --> 00:07:06,380
So with that, we are good to remove maps.

115
00:07:06,380 --> 00:07:13,610
They were no longer using it and we don't actually need to alter anything within our template because

116
00:07:13,610 --> 00:07:19,430
display jobs, which is what we're using v4 to iterate over that property is still the same name.

117
00:07:19,430 --> 00:07:23,360
So right here we're still iterating over displayed jobs the computed property.

118
00:07:23,540 --> 00:07:29,270
However, how displayed jobs arrives as at its array is different and that's what we've altered.

119
00:07:29,270 --> 00:07:34,880
So right here, instead of relying on jobs, we're now referring to filter jobs by organizations.

120
00:07:35,120 --> 00:07:39,350
So our template doesn't need to change because our template was simply iterating over whatever array

121
00:07:39,350 --> 00:07:39,860
we gave it.

122
00:07:40,040 --> 00:07:44,780
Now we're just giving it a smaller array that we're getting from a getter instead of from the original

123
00:07:44,780 --> 00:07:46,550
view text store jobs state.

124
00:07:47,030 --> 00:07:49,940
And with that, we have made a significant amount of progress.

125
00:07:50,120 --> 00:07:52,820
So let me take you to the browser and show you how this is going to work.

126
00:07:54,000 --> 00:07:56,250
And we are going to actually run into a bug.

127
00:07:56,280 --> 00:07:57,330
Let me refresh this page.

128
00:07:57,570 --> 00:07:58,800
We are going to run into a bug.

129
00:07:58,980 --> 00:08:03,030
And the bug right now is that we do not actually see anything on the page.

130
00:08:03,060 --> 00:08:03,390
Okay.

131
00:08:03,510 --> 00:08:06,660
We're going to talk about why this bug exists in the very next lesson.

132
00:08:06,870 --> 00:08:09,390
However, let me show you something else that's interesting.

133
00:08:09,600 --> 00:08:16,020
If I expand my organization section right here and I select an organization like YouTube, lo and behold,

134
00:08:16,080 --> 00:08:17,940
all of a sudden we get what we want.

135
00:08:18,210 --> 00:08:19,890
Take a look at these jobs right here.

136
00:08:19,890 --> 00:08:20,580
View tube.

137
00:08:20,820 --> 00:08:22,410
View tube, view tube.

138
00:08:22,440 --> 00:08:22,890
View tube.

139
00:08:23,190 --> 00:08:24,060
Keep scrolling down.

140
00:08:24,270 --> 00:08:27,370
You can see we're getting all the YouTube jobs and then we have our next page.

141
00:08:27,390 --> 00:08:29,850
If I go to page two, scroll all the way to the top.

142
00:08:29,940 --> 00:08:32,880
Once again, we get YouTube of YouTube, YouTube, etc..

143
00:08:33,180 --> 00:08:38,700
If I select another organization here like Point of View, once again, if I scroll down, we can see

144
00:08:38,700 --> 00:08:41,610
that every job belongs to one of those two organizations.

145
00:08:41,850 --> 00:08:42,870
So here's YouTube.

146
00:08:43,020 --> 00:08:44,190
Here's point of view.

147
00:08:44,220 --> 00:08:46,020
Here's YouTube, YouTube, YouTube.

148
00:08:46,260 --> 00:08:47,880
Let's see if I can find another point of view.

149
00:08:47,910 --> 00:08:48,450
Here it is.

150
00:08:48,630 --> 00:08:51,230
So we are seemingly correctly filtering.

151
00:08:51,240 --> 00:08:55,560
And similarly, if I scroll back up and I eliminate an organization like YouTube.

152
00:08:56,460 --> 00:08:59,760
Well, now we only see the point of view jobs instantaneously.

153
00:09:00,210 --> 00:09:00,510
All right.

154
00:09:00,510 --> 00:09:01,890
So it looks like our code is working.

155
00:09:01,890 --> 00:09:05,430
We're going to talk more about the error and or the bug in the next lesson.

156
00:09:05,640 --> 00:09:09,790
But I just want to take a quick second to walk through the flow of how everything is working.

157
00:09:09,810 --> 00:09:11,670
So the page loads right.

158
00:09:11,880 --> 00:09:15,090
And the component makes a request to get the 100 jobs.

159
00:09:15,090 --> 00:09:17,670
It stores them locally in the store state.

160
00:09:17,820 --> 00:09:18,150
Right.

161
00:09:18,420 --> 00:09:22,200
Then what happens is we as a user select a sample organization.

162
00:09:22,440 --> 00:09:25,230
We use V model to store that information.

163
00:09:25,230 --> 00:09:29,010
I believe our component was the job filter, a sidebar organization's component.

164
00:09:29,280 --> 00:09:34,510
We store that information locally and then we also ship that data up to the U.S..

165
00:09:34,650 --> 00:09:36,150
We run our mutation.

166
00:09:36,150 --> 00:09:40,980
We give it that new array, in this case, an array of one string, and we save it to our view store.

167
00:09:41,760 --> 00:09:47,250
So whenever the View Store state changes, whenever we run this add selected organizations mutation

168
00:09:47,520 --> 00:09:52,590
and we get this store to update to have a new state for these selected organizations property.

169
00:09:52,830 --> 00:09:54,930
Our getter is keeping track of that.

170
00:09:55,050 --> 00:10:01,320
And because our getter is reliant on jobs and selected organizations, as soon as any one of those changes,

171
00:10:01,320 --> 00:10:03,840
it knows to be reactive and it knows to rerun.

172
00:10:04,170 --> 00:10:08,200
So the getter says, Hey, you changed the selected organization's rate.

173
00:10:08,220 --> 00:10:11,190
I'm going to rerun this, gather this getter reruns.

174
00:10:11,310 --> 00:10:15,060
And at that point of view access, which component is relying on my getter?

175
00:10:15,240 --> 00:10:17,430
And that is our job listings component.

176
00:10:17,700 --> 00:10:23,490
So because our job listings component is connected to this getter, using the map getters function whenever

177
00:10:23,490 --> 00:10:26,760
the filter jobs by organizations getter array changes.

178
00:10:26,910 --> 00:10:29,010
This component knows to render.

179
00:10:29,310 --> 00:10:31,720
So it says, okay, I started out with 100 jobs.

180
00:10:31,740 --> 00:10:32,820
The user then filtered.

181
00:10:32,970 --> 00:10:35,850
I now have, let's say, 40 filter jobs.

182
00:10:36,060 --> 00:10:37,350
That logic has changed.

183
00:10:37,500 --> 00:10:43,200
So now I need to rerun this logic, which of course changes the array that displayed jobs returns.

184
00:10:43,320 --> 00:10:48,990
Because displayed jobs shows the first ten of the filter jobs by organizations array, which itself

185
00:10:48,990 --> 00:10:55,710
is a getter array that has changed and thus the component changes this it renders and now what we iterate

186
00:10:55,710 --> 00:11:01,860
over in display jobs is the new batch of ten that is its own subset of ten from the subset of filtered

187
00:11:01,860 --> 00:11:02,550
organizations.

188
00:11:02,640 --> 00:11:06,720
That is a subset of our original view store state in the jobs property.

189
00:11:07,170 --> 00:11:07,500
All right.

190
00:11:07,500 --> 00:11:13,130
So it's a really complex sequence of events that happens, but hopefully it makes logical sense.

191
00:11:13,140 --> 00:11:18,630
There's a lot of steps, but hopefully the logic makes sense that the View Store updates it communicates

192
00:11:18,630 --> 00:11:20,840
those changes to any component that cares about it.

193
00:11:21,060 --> 00:11:26,490
The component renders and now our getter is influencing what we are seeing on the screen.

194
00:11:26,950 --> 00:11:27,240
Right.

195
00:11:27,450 --> 00:11:30,240
So our implementation is very, very, very close to working.

196
00:11:30,330 --> 00:11:35,070
And the very next lesson, we're going to talk about why we saw that bug of not seeing any jobs when

197
00:11:35,070 --> 00:11:36,090
the page first loaded.
