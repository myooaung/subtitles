1
00:00:00,540 --> 00:00:01,110
Okay.

2
00:00:01,110 --> 00:00:07,110
So our sub nav component is looking really good in my opinion, but I argue that we can make it even

3
00:00:07,110 --> 00:00:07,560
better.

4
00:00:07,920 --> 00:00:11,310
So I'd like you to focus your eyes on these two lines right here.

5
00:00:11,340 --> 00:00:13,560
Lines 28 and 29.

6
00:00:14,100 --> 00:00:19,260
And I want you to think about what these lines would look like if we had to replicate them in another

7
00:00:19,260 --> 00:00:19,800
component.

8
00:00:20,160 --> 00:00:25,260
So imagine that we wanted to build another component that was going to conditionally render something

9
00:00:25,260 --> 00:00:31,050
in the template based on the user being on another route like home, we have our home page which has

10
00:00:31,050 --> 00:00:32,070
a route name of home.

11
00:00:32,370 --> 00:00:37,260
Let's say we wanted another component that wanted to do something very similar to what we're doing here.

12
00:00:37,410 --> 00:00:41,850
Use a VRF based on a reactive boolean value and render some template.

13
00:00:42,270 --> 00:00:47,640
If we created that component, these two lines would look very, very similar.

14
00:00:47,640 --> 00:00:52,770
In that component, we would need to import use route from view router because we would need to invoke

15
00:00:52,770 --> 00:00:54,930
that to get access to our reactive route object.

16
00:00:55,290 --> 00:01:00,030
We would still access the name property on that route object because that is not changing.

17
00:01:00,030 --> 00:01:01,350
That is coming from view router.

18
00:01:01,710 --> 00:01:06,420
The only thing that would change is we would compare the actual route that we care about.

19
00:01:06,420 --> 00:01:11,220
So this string would be different, but we would still return it in a computed function so that we can

20
00:01:11,220 --> 00:01:13,440
use it as a reactive value in our template.

21
00:01:13,590 --> 00:01:15,840
That's the exact same practice we've been using right here.

22
00:01:15,840 --> 00:01:16,140
Right.

23
00:01:16,560 --> 00:01:22,290
So a lot of this logic, even though it's not that long, a lot of this logic is actually reusable.

24
00:01:22,950 --> 00:01:29,190
And the cool part about Vue three is that the whole design aspect of the composition API is trying to

25
00:01:29,190 --> 00:01:34,890
move a lot of logic outside of a component into simpler basic JavaScript functions.

26
00:01:35,190 --> 00:01:39,810
So in this lesson, we're going to write one of those functions which are called in the view ecosystem

27
00:01:39,990 --> 00:01:42,870
that called composable or composable functions.

28
00:01:43,140 --> 00:01:48,930
A composable function is a plain JavaScript function that uses the reactivity aspects that Vue gives

29
00:01:48,930 --> 00:01:49,140
us.

30
00:01:49,410 --> 00:01:55,500
And we saw this a couple of sections ago when we were exploring functions like ref and computed in our

31
00:01:55,500 --> 00:01:56,010
playground.

32
00:01:56,010 --> 00:01:56,280
Yes.

33
00:01:56,280 --> 00:02:01,800
File, we saw that we can use these pieces of functionality outside of any given component.

34
00:02:02,070 --> 00:02:06,930
And the beautiful part of being able to do that and move the logic to functions is we have a lot of

35
00:02:06,930 --> 00:02:13,020
these small, really lightweight plane JavaScript functions that are really easy to test, and then

36
00:02:13,020 --> 00:02:15,390
we also gain the benefits of reusability.

37
00:02:15,450 --> 00:02:20,820
We can reuse that logic in many components and really, really make a really slim set up method.

38
00:02:21,210 --> 00:02:25,380
So as always, I think showing you an example will do a better job convincing you.

39
00:02:26,040 --> 00:02:27,930
So let's create a new composable function.

40
00:02:28,320 --> 00:02:33,690
Our first one and its whole responsibility will be talking to the root object and confirming whether

41
00:02:33,690 --> 00:02:35,640
or not we are on a given route.

42
00:02:35,910 --> 00:02:39,210
All right, so what I'm going to do is open up my file explorer.

43
00:02:40,520 --> 00:02:45,860
And I'm going to collapse everything here and in my source directory, SIRC, I'll create a new folder

44
00:02:45,860 --> 00:02:47,210
called Composable.

45
00:02:47,660 --> 00:02:51,350
So this folder will house all of our composable JavaScript functions.

46
00:02:51,740 --> 00:02:57,200
And here I'll create a file from my first function which I'll call use confirm route.

47
00:02:57,770 --> 00:03:00,830
So our file will be called use confirm root access.

48
00:03:01,910 --> 00:03:05,660
All right, so let me close this and drag this new file to the right.

49
00:03:06,410 --> 00:03:07,980
And so let's start out with the basics.

50
00:03:07,980 --> 00:03:11,840
So I'll define an arrow function in line and immediately export it out of this file.

51
00:03:12,110 --> 00:03:13,790
So right here, I'll call my function.

52
00:03:13,790 --> 00:03:14,720
Use confirm now.

53
00:03:16,580 --> 00:03:19,730
And then right below it I will export default use conform route.

54
00:03:20,090 --> 00:03:22,520
So this is a regular E6 arrow function.

55
00:03:23,360 --> 00:03:25,580
So how do I want this composable function to work?

56
00:03:25,940 --> 00:03:30,710
I want to isolate the elements that are the same from the elements that vary.

57
00:03:31,010 --> 00:03:36,200
So again, if we were trying to re-use this logic in another component, the only thing the component

58
00:03:36,200 --> 00:03:41,000
really cares about is the route that it wants to compare where the user is too.

59
00:03:41,270 --> 00:03:46,340
So our sub nav component only wants to render specific things on the job results page.

60
00:03:46,550 --> 00:03:50,420
So all he really cares about is saying this is the name of the route that I care about.

61
00:03:50,660 --> 00:03:53,390
All this logic it really doesn't care about.

62
00:03:53,390 --> 00:03:54,680
This is the reusable part.

63
00:03:54,980 --> 00:03:58,610
So let's transfer all of this logic to our new use.

64
00:03:58,610 --> 00:04:04,610
Confirm not function, but also give the function the ability to provide any route name that it wants.

65
00:04:04,970 --> 00:04:07,430
So what I'm going to do is start out with the very first line here.

66
00:04:07,430 --> 00:04:11,900
So if we want to use use route in our composable, well, you guessed it, we're going to need to import

67
00:04:11,900 --> 00:04:12,020
it.

68
00:04:12,410 --> 00:04:19,520
So import use route from view router and right here, how do I get access to my route object?

69
00:04:19,640 --> 00:04:23,330
We invoke that function and we're going to get access to our route object.

70
00:04:23,510 --> 00:04:24,770
And it's as simple as that.

71
00:04:24,980 --> 00:04:27,740
We do not need to do this in the body of a component.

72
00:04:27,740 --> 00:04:29,600
We do not need to do this in a setup method.

73
00:04:29,810 --> 00:04:35,210
This is the beauty of three and the composition API is all of this reactivity can exist in plain JavaScript

74
00:04:35,210 --> 00:04:35,690
functions.

75
00:04:35,900 --> 00:04:39,110
So now we have access to the route object within the body of this function.

76
00:04:39,380 --> 00:04:40,310
What do we want to do?

77
00:04:40,310 --> 00:04:42,110
We want to use the exact same logic here.

78
00:04:42,440 --> 00:04:47,390
We're going to use the computed function in order to get a reactive object that's going to track the

79
00:04:47,390 --> 00:04:50,690
route, reactive objects, name property and compare it to something.

80
00:04:50,930 --> 00:04:56,150
So because I need a little bit of dynamic content here, what job results is here, I am going to provide

81
00:04:56,150 --> 00:05:01,250
a single parameter to my composable and it's going to be called the route name and this will be a string

82
00:05:01,250 --> 00:05:03,740
representing the route that we want to compare ourselves to.

83
00:05:04,340 --> 00:05:06,110
I'm also going to import computed.

84
00:05:08,610 --> 00:05:11,380
And I'm going to get that from my view library.

85
00:05:12,060 --> 00:05:15,450
And so right here, we're going to do exactly what we did and the component on the left.

86
00:05:15,660 --> 00:05:16,950
I'm going to invoke computed.

87
00:05:17,640 --> 00:05:23,070
And we know that that is going to take a function and it's going to rerun that function whenever whatever

88
00:05:23,070 --> 00:05:24,060
its tracking changes.

89
00:05:24,210 --> 00:05:29,090
In this case, what we're changing or tracking, rather what we're tracking the change of is the route

90
00:05:29,100 --> 00:05:29,490
object.

91
00:05:29,610 --> 00:05:31,590
More specifically, it's name property.

92
00:05:31,860 --> 00:05:35,700
So whenever the name property changes computed will rerun this function.

93
00:05:35,970 --> 00:05:41,940
And what we want to do is return the latest boolean representing if the root objects current name property

94
00:05:42,090 --> 00:05:46,590
is equal to whatever root name string I provide to this composable function.

95
00:05:47,490 --> 00:05:47,850
All right.

96
00:05:48,090 --> 00:05:49,590
Now, by itself, this is great.

97
00:05:49,590 --> 00:05:51,720
And this is very similar to what a component is doing.

98
00:05:51,930 --> 00:05:55,680
However, remember that used confirmed root is not actually returning anything.

99
00:05:55,890 --> 00:05:59,970
So what I'm going to do is return the return value of the computed function.

100
00:06:00,300 --> 00:06:04,950
Remember, we saw this a couple of seconds ago that what the computed function returns back to us is

101
00:06:04,950 --> 00:06:07,530
its own reactive object with its own value property.

102
00:06:07,680 --> 00:06:12,120
And that value property in this case will be a boolean, either true or false if the given condition

103
00:06:12,120 --> 00:06:12,480
is met.

104
00:06:12,720 --> 00:06:18,180
But now we're simply going to determine that true or false, based on whatever root name we get passed

105
00:06:18,180 --> 00:06:20,670
into this composable function, wherever it's used.

106
00:06:20,880 --> 00:06:26,130
And the beautiful part about this approach is different components can re utilize this use confirmed

107
00:06:26,130 --> 00:06:31,410
root function but pass in a different route, name in different components and yet get the benefits

108
00:06:31,410 --> 00:06:35,340
of all of this repeated logic isolated to just one function.

109
00:06:35,430 --> 00:06:37,650
One composable function in the code base.

110
00:06:38,040 --> 00:06:40,110
So let me show you how this is going to work in our sub now.

111
00:06:40,140 --> 00:06:42,510
Let's use it immediately right here.

112
00:06:42,780 --> 00:06:45,960
What I'm going to do is to import our new composable function.

113
00:06:46,230 --> 00:06:48,150
It is called use confirm root.

114
00:06:49,200 --> 00:06:50,250
It's a default export.

115
00:06:50,250 --> 00:06:51,930
So we do not need curly braces.

116
00:06:52,260 --> 00:06:54,330
We're going to get that from our source directory.

117
00:06:54,660 --> 00:06:57,450
The composable folder and our file is used.

118
00:06:57,450 --> 00:06:58,050
Confirm now.

119
00:06:58,320 --> 00:07:00,150
So now we imported this function right here.

120
00:07:00,330 --> 00:07:03,750
Let's use it in line here, in place of our former implementation.

121
00:07:03,990 --> 00:07:06,240
So I'm going to comment out lines 30 and 31.

122
00:07:06,240 --> 00:07:12,120
We no longer need this, but remember, we still need our object to return something called on job results

123
00:07:12,120 --> 00:07:14,070
page because that's what we're using right here.

124
00:07:14,460 --> 00:07:21,270
So I'm still going to use the cost of on job results page, which formerly was a computed object or

125
00:07:21,270 --> 00:07:22,500
computed reactive object.

126
00:07:22,500 --> 00:07:22,710
Right.

127
00:07:22,720 --> 00:07:23,970
That's what we assigned right here.

128
00:07:24,240 --> 00:07:26,790
Well, how can we get the exact same computed object?

129
00:07:26,970 --> 00:07:29,400
We can get it as the return value of use confirm route.

130
00:07:29,700 --> 00:07:32,070
So I'm going to invoke use confirmed route right here.

131
00:07:32,610 --> 00:07:36,150
And we need to provide a parameter representing the route name that we want to compare to.

132
00:07:36,360 --> 00:07:37,320
And what that what is that?

133
00:07:37,340 --> 00:07:38,280
In our scenario?

134
00:07:38,460 --> 00:07:39,060
You guessed it.

135
00:07:39,060 --> 00:07:41,190
It's just going to be our job results string.

136
00:07:43,020 --> 00:07:44,040
So you might be thinking.

137
00:07:44,040 --> 00:07:46,660
But Boris, we had two lines and now we have one.

138
00:07:46,680 --> 00:07:48,450
Is that really that much of a benefit?

139
00:07:48,720 --> 00:07:53,040
Well, I argue it absolutely is a benefit because there's actually a couple of things that we've gained

140
00:07:53,040 --> 00:07:54,900
from this approach besides just last lines.

141
00:07:55,200 --> 00:07:58,470
We have now isolated the logic of talking to the root.

142
00:07:58,680 --> 00:08:04,470
Specifically its name property and that likely reusable logic to its own function.

143
00:08:04,620 --> 00:08:10,740
Now any component in our app can reuse, use, confirm route and simply give it a string without having

144
00:08:10,740 --> 00:08:15,480
to know the internal details of how use root works, without having to worry about the name property,

145
00:08:15,570 --> 00:08:19,080
without having to duplicate this logic in every single component.

146
00:08:19,590 --> 00:08:20,940
That's one benefit we've gained.

147
00:08:21,120 --> 00:08:25,380
Another benefit we've gained is that this use confirmed root function, as we'll see in a in a follow

148
00:08:25,380 --> 00:08:29,070
up lesson, is actually going to be pretty simple to test because it's nice and lightweight.

149
00:08:29,610 --> 00:08:30,000
All right.

150
00:08:30,690 --> 00:08:33,270
So in here, we can remove these two lines.

151
00:08:33,270 --> 00:08:34,200
We no longer need them.

152
00:08:34,530 --> 00:08:39,510
So our set up method gets even smaller and we no longer need to import use root because our use confirm

153
00:08:39,510 --> 00:08:42,660
root function will take care of that import and that usage of the root.

154
00:08:43,110 --> 00:08:43,830
So there we go.

155
00:08:43,950 --> 00:08:45,990
Now we've super simplified our setup method.

156
00:08:46,170 --> 00:08:49,860
And if I save this, if you go checking the browser, everything will still work just fine.

157
00:08:50,040 --> 00:08:51,750
And if we run our whole test suite.

158
00:08:53,360 --> 00:08:53,770
We'll see.

159
00:08:53,780 --> 00:08:55,280
Everything will work just as well.

160
00:08:55,640 --> 00:09:00,020
And the reason that everything is going to work just as well is because in a way, we haven't even really

161
00:09:00,020 --> 00:09:01,220
changed the implementation.

162
00:09:01,490 --> 00:09:07,880
Instead, we've simply isolated what what we were previously doing exclusively here to a reusable use

163
00:09:07,880 --> 00:09:10,700
confirming our function, but still using the same logic.

164
00:09:10,700 --> 00:09:15,530
It's still using use route and it's still giving us a computed object, which we're then returning right

165
00:09:15,530 --> 00:09:17,900
here, a reactive object with a value property.

166
00:09:18,020 --> 00:09:22,580
We're still returning fundamentally the same object here for our template use, but we're getting it

167
00:09:22,580 --> 00:09:23,690
from a helper function.

168
00:09:24,020 --> 00:09:30,020
And so now we've extracted and isolated the thing that varies or isolated, the thing that is the same

169
00:09:30,020 --> 00:09:35,420
right here, while allowing each individual component that wants to reuse the use confirmed and composable

170
00:09:35,630 --> 00:09:38,120
to specify its own string that it cares about.

171
00:09:38,360 --> 00:09:41,150
The only thing that have cares about is comparing job results.

172
00:09:41,360 --> 00:09:46,580
The rest of this logic is reusable and repeatable, so we do not want to duplicate it in any other component

173
00:09:46,580 --> 00:09:48,740
that wants to have the exact same logic.

174
00:09:48,950 --> 00:09:49,310
All right.

175
00:09:49,490 --> 00:09:54,110
So hopefully this is giving you a better sense of what composable is allow us to do and how they work

176
00:09:54,110 --> 00:09:54,590
really well.

177
00:09:54,710 --> 00:09:59,720
They're basically going to be playing JavaScript functions that allow us to use use reactive ideas,

178
00:09:59,780 --> 00:10:04,820
whether it be the reactive store from view, the reactive route, the reactive router, or even our

179
00:10:04,820 --> 00:10:05,810
own reactive objects.

180
00:10:05,930 --> 00:10:10,340
We're going to be able to isolate small bits of logic into small helper functions and then reuse them

181
00:10:10,340 --> 00:10:15,440
across multiple components, which again moves more logic out of the components and lets the components

182
00:10:15,440 --> 00:10:16,940
be as dumb as possible.

183
00:10:17,030 --> 00:10:20,600
So they're just getting data from somewhere and simply rendering it in the template.

184
00:10:20,750 --> 00:10:22,400
Whenever you have those kinds of components.

185
00:10:22,580 --> 00:10:23,840
They become easier to read.

186
00:10:23,990 --> 00:10:25,060
They become shorter.

187
00:10:25,070 --> 00:10:26,420
They become easier to test.

188
00:10:26,510 --> 00:10:30,980
And they are just focused on their primary responsibility, which is just rendering a bunch of HTML

189
00:10:30,980 --> 00:10:31,520
to the screen.

190
00:10:31,760 --> 00:10:32,090
All right.

191
00:10:32,660 --> 00:10:34,160
That's all there is to cover in this lesson.

192
00:10:34,340 --> 00:10:35,870
So I will see you in the next one.
