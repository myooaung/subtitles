WEBVTT
1
00:00:00.550 --> 00:00:01.570
All right.

2
00:00:01.580 --> 00:00:08.560
So in this lesson, we're going to introduce a complementary helper function from view called map mutations.

3
00:00:08.740 --> 00:00:10.900
And you can probably guess what it helps us do.

4
00:00:11.230 --> 00:00:15.700
Map State helps us connect view store state to component properties.

5
00:00:15.940 --> 00:00:22.720
Map mutations helps us connect mutations to the View Store two methods on our main NAV component.

6
00:00:23.140 --> 00:00:29.440
So before we get there, I do want to do one thing in our main nav component to set up our refactor.

7
00:00:29.710 --> 00:00:33.310
You'll notice here that we have our log in user method and all that.

8
00:00:33.310 --> 00:00:38.650
The log in user method does is commit a mutation to our store called log and user.

9
00:00:38.650 --> 00:00:42.040
This is a reference to this string right here, which is defined right here.

10
00:00:42.040 --> 00:00:48.790
It is log and user and we are referencing log in user right here as the click event to run whenever

11
00:00:48.790 --> 00:00:50.120
the user clicks the action vote.

12
00:00:50.470 --> 00:00:53.470
So when the user clicks log in, we're going to run this log in user method.

13
00:00:53.980 --> 00:00:56.230
Here's what I'd like to do just to set things up.

14
00:00:56.500 --> 00:01:03.610
Let's rename this method so it has the exact same name as our constant right here though, or more specifically,

15
00:01:03.610 --> 00:01:04.480
this string right here.

16
00:01:04.660 --> 00:01:09.700
So all that basically means is instead of calling it log in user in camel case, I'm just going to make

17
00:01:09.700 --> 00:01:11.410
it all caps log in user.

18
00:01:11.950 --> 00:01:12.400
Right.

19
00:01:12.400 --> 00:01:18.790
And since we're now invoking this method down below, I'm going to change this method name to be log

20
00:01:18.790 --> 00:01:20.560
in user all caps.

21
00:01:20.650 --> 00:01:23.290
We're not changing anything specific to the implementation.

22
00:01:23.410 --> 00:01:24.910
We're just changing the method name.

23
00:01:25.120 --> 00:01:25.450
All right.

24
00:01:25.840 --> 00:01:27.250
So now what do we have?

25
00:01:27.400 --> 00:01:34.570
We have an implementation where we have a method name that is the exact same name as a mutation that

26
00:01:34.570 --> 00:01:36.400
we want to run on our View X Store.

27
00:01:36.730 --> 00:01:41.140
It's very similar to the set up we had in the previous lesson with our computed property.

28
00:01:41.290 --> 00:01:47.140
We had a computed property called Is Logged In, which was referencing a property of the exact same

29
00:01:47.140 --> 00:01:50.800
name on our state in our store called is logged in.

30
00:01:51.040 --> 00:01:53.680
Now we have a setup where we have a very similar idea.

31
00:01:53.800 --> 00:02:02.140
We have a method that is the exact same name as a store mutation and this is totally valid syntax because

32
00:02:02.140 --> 00:02:07.720
we want a method honor component and that method is going to invoke the commit method on the store to

33
00:02:07.720 --> 00:02:09.790
give it a mutation of a certain type.

34
00:02:10.300 --> 00:02:17.710
This syntax again is so common in our view that there is the helper method to help you consolidate it

35
00:02:17.710 --> 00:02:22.570
the exact same way that maps state helps you consolidate state properties on our component.

36
00:02:22.840 --> 00:02:27.880
And the reason this is common is because you're typically going to give your component method a name

37
00:02:28.030 --> 00:02:31.210
that is very similar or equal to your mutation name.

38
00:02:31.480 --> 00:02:32.980
Because what does the mutation do?

39
00:02:32.980 --> 00:02:34.180
It logs in the user.

40
00:02:34.270 --> 00:02:36.370
So what is the user clicking the button represent?

41
00:02:36.520 --> 00:02:38.410
It represents a log in of the user, right?

42
00:02:38.410 --> 00:02:39.910
So why give it two different names?

43
00:02:40.030 --> 00:02:42.880
Just call your method with the same name as the mutation.

44
00:02:43.060 --> 00:02:48.040
And when you have syntax like this, we can consolidate all of these methods that commit mutations by

45
00:02:48.040 --> 00:02:49.300
using the map mutations.

46
00:02:49.300 --> 00:02:51.190
Helper So I'm going to scroll up.

47
00:02:52.270 --> 00:02:53.770
And also from view X.

48
00:02:53.830 --> 00:02:57.550
In addition to importing maps state, I'm going to import map mutations.

49
00:02:57.550 --> 00:03:02.560
In fact, let me do it as the first import just because I want it to be in alphabetical order.

50
00:03:02.560 --> 00:03:08.500
So map mutations and map state and I'm going to scroll down and I'm going to comment out this code right

51
00:03:08.500 --> 00:03:11.350
here simply because I want you to see the before and after.

52
00:03:11.680 --> 00:03:14.080
So I'm going to use map mutations here.

53
00:03:14.080 --> 00:03:16.810
It's going to have the exact same structure as Map State.

54
00:03:16.960 --> 00:03:19.060
So it's going to return an object of methods.

55
00:03:19.060 --> 00:03:24.310
And I want to restructure those methods so they are available in my top level methods object right here.

56
00:03:24.520 --> 00:03:30.760
So I'm always going to use this syntax for the return value of the map mutations function and the map

57
00:03:30.760 --> 00:03:37.210
mutations function takes the exact same arguments as map state, so we could provide a object here with

58
00:03:37.420 --> 00:03:41.290
properties as well as functions or an object with properties as well as strings.

59
00:03:41.500 --> 00:03:48.460
But as we saw, the easiest approach is typically an array, and in that array we provide the mutations

60
00:03:48.670 --> 00:03:50.470
that we want to make available.

61
00:03:50.650 --> 00:03:55.240
And what NAT mutations is going to do is it's going to take those mutation names and it's going to make

62
00:03:55.240 --> 00:03:58.930
them available as methods on my main nav component.

63
00:03:59.260 --> 00:04:04.870
So if I type in my log in user constant, that is a reference to some mutation on my store.

64
00:04:05.110 --> 00:04:10.780
And so now I'm going to have a this that logging user method available on main.

65
00:04:10.780 --> 00:04:15.700
Now we are going to have a failing test that we're going to talk about that in the very next lesson.

66
00:04:16.030 --> 00:04:19.660
But this is replacing what we have right here.

67
00:04:19.660 --> 00:04:22.840
It's the exact same thing but expressed in one line.

68
00:04:23.080 --> 00:04:27.820
So obviously if you have five different methods that all have the same name as a mutation, you can

69
00:04:27.820 --> 00:04:29.590
simply say map mutations.

70
00:04:29.740 --> 00:04:36.310
Take this array of five mutations that I know exist and make those five mutations available as methods

71
00:04:36.310 --> 00:04:37.810
on my main nav component.

72
00:04:38.050 --> 00:04:42.850
So now I will have a this log user method available on my component.

73
00:04:43.060 --> 00:04:49.000
And what that is going to do is run this mutation not automatically, but by of course running the commit

74
00:04:49.000 --> 00:04:52.330
method and passing that logging user mutation to it.

75
00:04:52.960 --> 00:04:55.960
So behind the scenes we're still going to call the commit method on the store.

76
00:04:56.170 --> 00:05:01.210
This is just a little bit of a syntactical shortcut, some syntactic sugar to do what we're doing here.

77
00:05:01.900 --> 00:05:08.020
You do map mutations, you do an array and you provide the mutation names here and view and map mutations

78
00:05:08.020 --> 00:05:10.840
makes that available as a method.

79
00:05:11.140 --> 00:05:18.550
So when I remove this, we can still reference log in user here because log in user will be a valid

80
00:05:18.550 --> 00:05:20.830
method defined in my main nav component.

81
00:05:20.980 --> 00:05:24.370
It is defined by my map mutations helper function.

82
00:05:24.550 --> 00:05:27.640
We we take that method in an object and then we restructure it.

83
00:05:27.640 --> 00:05:29.080
So it's available in a top of all methods.

84
00:05:29.350 --> 00:05:31.270
We're going to come back to this test in a second.

85
00:05:31.390 --> 00:05:37.810
But I do want to show you in the browser, in the browser, if I refresh this page and I click sign

86
00:05:37.810 --> 00:05:39.640
in, we can see everything still works.

87
00:05:39.790 --> 00:05:45.550
Remember when I click sign in, that's when I issue the mutation to the View store to update the IS

88
00:05:45.550 --> 00:05:46.330
logged in property.

89
00:05:46.510 --> 00:05:51.670
This tells me that I'm still correctly shoot at shooting off the mutation, which means that I am running

90
00:05:51.670 --> 00:05:56.560
that method which is defined by nat mutations, which is invoked by the user clicking this button.

91
00:05:56.890 --> 00:05:58.090
So everything is still working.

92
00:05:58.180 --> 00:06:04.120
We've simply created a shortcut for our former more verbose syntax.

93
00:06:04.330 --> 00:06:08.350
So let me remove this comment right here and the very next lesson, and we'll see how we can fix our

94
00:06:08.350 --> 00:06:09.070
test failure.
