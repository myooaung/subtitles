1
00:00:00,790 --> 00:00:01,540
Okay.

2
00:00:01,540 --> 00:00:06,280
So in this lesson, I'd like to refactor our test suite for this sub nav component.

3
00:00:06,610 --> 00:00:09,070
So on the left hand side, I have my sub nav component.

4
00:00:09,280 --> 00:00:11,800
And on the right hand side, I have my sub now test suite.

5
00:00:12,070 --> 00:00:15,790
Now we're good to refactor because all of our tests are still green.

6
00:00:15,970 --> 00:00:17,890
In other words, they're all passing.

7
00:00:18,160 --> 00:00:21,070
So what issue do I currently have with our sub nav test suite?

8
00:00:21,370 --> 00:00:28,570
Well, our sub nav test suite is still relying on our former implementation of the solution in subnet.

9
00:00:28,780 --> 00:00:32,620
Here you'll notice that we are marking out use route by doing this.

10
00:00:32,620 --> 00:00:37,450
Just mock call the router and then we're specifying what use route mock returns right here.

11
00:00:37,870 --> 00:00:42,490
So what's actually happening is we are not mocking out use confirming out our composable.

12
00:00:42,790 --> 00:00:49,030
So when the test utils mount our sub nav component, we're still invoking use confirmed route, which

13
00:00:49,030 --> 00:00:52,720
is going to the real actual implemented function in our code base, this one.

14
00:00:52,930 --> 00:00:59,680
And because we have marked out use route, this is where we're actually mock returning and thus we are

15
00:00:59,680 --> 00:01:05,320
running through the logic of this composable with the mock root object.

16
00:01:05,530 --> 00:01:05,800
Right.

17
00:01:06,160 --> 00:01:13,570
Now I argue that this is one step too far as far as I want to go, because the logic of the use confirmed

18
00:01:13,570 --> 00:01:14,290
root function.

19
00:01:14,410 --> 00:01:17,290
We already tested that in the previous lesson.

20
00:01:17,470 --> 00:01:22,390
We confirmed through our test suite that this logic does exactly what it's supposed to do.

21
00:01:22,570 --> 00:01:26,530
And in order to do that, of course, we marked out use route because we don't want to worry about how

22
00:01:26,530 --> 00:01:27,940
the router is doing its things.

23
00:01:28,120 --> 00:01:30,070
We just verified what this function is doing.

24
00:01:30,520 --> 00:01:36,420
Well, similarly in sub nav, our sub nav component is not using use route anywhere.

25
00:01:36,430 --> 00:01:40,660
It's only using a function that itself is using use route in its internals.

26
00:01:40,960 --> 00:01:42,640
But it's not the sub nav components.

27
00:01:42,640 --> 00:01:48,370
Responsibility to care or to know about how use confirmed route is performing its logic.

28
00:01:48,730 --> 00:01:53,320
All the sub nav component cares about is I'm going to use the use confirming out function.

29
00:01:53,470 --> 00:01:58,690
I'm going to give you a string and you're just going to give me back an object that I can use that I

30
00:01:58,690 --> 00:02:00,550
can use in my V.F. directive.

31
00:02:00,880 --> 00:02:06,730
So the subtext component shouldn't care about use confirmed in how it does its own internal logic.

32
00:02:06,910 --> 00:02:11,260
All that cares about is its own dependence on the right function and giving it the right argument.

33
00:02:11,560 --> 00:02:15,610
So even though our test suite is still passing, I argue that we can make it even better.

34
00:02:15,850 --> 00:02:17,920
Instead of mocking out use route.

35
00:02:18,100 --> 00:02:20,980
Let's instead mark out use confirm route.

36
00:02:21,280 --> 00:02:24,790
Let's mock out our own composable function.

37
00:02:25,150 --> 00:02:30,940
And by giving that a mock return value, we can still verify that sub nav is using it correctly without

38
00:02:30,940 --> 00:02:32,860
having to worry about its details.

39
00:02:33,250 --> 00:02:33,730
All right.

40
00:02:34,030 --> 00:02:36,190
So what am I going to do right here in my test suite?

41
00:02:36,280 --> 00:02:39,070
The first thing I'm going to do is remove my import of user out.

42
00:02:40,120 --> 00:02:44,380
Then I'm going to delete my mocking out of view router because we no longer care about that.

43
00:02:44,800 --> 00:02:48,400
And instead, what I'm going to important Mark out is going to be our new composable.

44
00:02:48,760 --> 00:02:52,650
So right here I'm going to import used confirm route so that I can reference it later.

45
00:02:52,660 --> 00:02:55,660
And that is coming from source composable to use confirm route.

46
00:02:56,050 --> 00:02:58,360
Then on the line below, I'm going to call just Mark.

47
00:02:58,360 --> 00:03:03,430
But instead of passing in a NPM library like I did with View X here, I'm just going to pass in the

48
00:03:03,430 --> 00:03:06,280
complete path from for my composable.

49
00:03:06,280 --> 00:03:11,350
So right here it's going to be a source composable use confirm route.

50
00:03:11,530 --> 00:03:13,870
Basically the exact same thing is on the line above.

51
00:03:14,260 --> 00:03:20,830
So now just has looped through our own file and it's replaced use confirm route with a default mock

52
00:03:20,830 --> 00:03:22,720
just function that returns undefined.

53
00:03:23,080 --> 00:03:24,550
Well, we don't want it to do that.

54
00:03:24,550 --> 00:03:27,490
We want it to return to match our implementation.

55
00:03:27,610 --> 00:03:31,390
A reactive object that stores an internal value of a boolean.

56
00:03:31,720 --> 00:03:36,700
Well, one really easy way that we can have a reactive object with a value of a boolean is by using

57
00:03:36,700 --> 00:03:38,230
vue's ref function.

58
00:03:38,500 --> 00:03:44,560
So what I'm going to do is import ref right here, import ref from view.

59
00:03:45,910 --> 00:03:50,980
And all that's left to do is to modify our old markings so that instead of mocking out, use root and

60
00:03:50,980 --> 00:03:54,710
telling it what it should return, we're simply going to mark out, use, confirm root.

61
00:03:55,000 --> 00:03:59,380
So now we don't need to worry about the details of having an object with a name property and matching

62
00:03:59,380 --> 00:04:02,260
it, because that is the responsibility of our composable function.

63
00:04:02,800 --> 00:04:04,330
All this thing needs all use.

64
00:04:04,330 --> 00:04:09,730
Confirmed root needs is a reactive object that has a boolean inside it because on job results page is

65
00:04:09,730 --> 00:04:11,710
fundamentally a boolean in its heart.

66
00:04:11,710 --> 00:04:12,040
Right?

67
00:04:12,430 --> 00:04:16,750
So right here, what I'm going to do is say use confirm root.

68
00:04:17,830 --> 00:04:19,510
That's my new thing that I'm marking out.

69
00:04:19,520 --> 00:04:23,080
Use, confirm, root, dot, mark, return value invoke that method.

70
00:04:23,320 --> 00:04:28,300
And in order to provide a reactive object with a value property, which is what we're getting from computed

71
00:04:28,300 --> 00:04:29,110
from use confirm.

72
00:04:29,110 --> 00:04:32,470
Now I'm simply going to invoke ref right here and providing a boolean of true.

73
00:04:33,820 --> 00:04:35,130
All right for the test.

74
00:04:35,130 --> 00:04:36,120
The low we were.

75
00:04:36,270 --> 00:04:38,490
This was when the user is not on the job page.

76
00:04:38,490 --> 00:04:40,110
So it does not display job count.

77
00:04:40,290 --> 00:04:43,440
So this was providing a route that did not match job results.

78
00:04:43,650 --> 00:04:47,250
So in other words we need to mark out used confirm route to return a false.

79
00:04:47,280 --> 00:04:49,260
This is the inverse scenario that we're testing.

80
00:04:49,560 --> 00:04:52,710
So right here I'm going to say use confirm route.

81
00:04:53,600 --> 00:04:55,430
And then I'm going to say make return value.

82
00:04:55,430 --> 00:05:00,410
And I need a reactive object with a value property to match the return value in the actual implementation.

83
00:05:00,680 --> 00:05:03,230
So right here I'm going to write ref and here I'm going to provide false.

84
00:05:04,280 --> 00:05:10,250
So now we've decoupled ourselves from the logic that used confirming out is using all we're verifying

85
00:05:10,250 --> 00:05:13,880
is that we are getting some kind of right thing from it and that we're using it correctly.

86
00:05:14,060 --> 00:05:18,500
In fact, if you want to write an additional test, you can simply write a test that checks that use

87
00:05:18,500 --> 00:05:21,380
confirm route was called with an argument of job results.

88
00:05:21,380 --> 00:05:26,720
That is a totally valid thing to to write a test for but we're basically saying as long as use confirm

89
00:05:26,720 --> 00:05:32,300
or out gives me a object back that works, then I'm going to verify how it works with my component.

90
00:05:32,300 --> 00:05:32,600
Right.

91
00:05:32,810 --> 00:05:37,700
The whole idea of this test actually is basically testing that the f it's doing is doing its job or

92
00:05:37,700 --> 00:05:43,430
simply testing for the lack of presence of job count, which means we're testing that VRF is getting

93
00:05:43,430 --> 00:05:44,870
a value that is false here.

94
00:05:45,230 --> 00:05:45,440
Right.

95
00:05:45,440 --> 00:05:49,640
And that's the subject of component's responsibility because that is the heart of its HTML.

96
00:05:49,970 --> 00:05:55,130
But the worry or concern about the root handling, we already got that in a composable function.

97
00:05:55,280 --> 00:06:00,410
We do not need to again test that logic here because we wrote a test for it in the previous lesson.

98
00:06:00,670 --> 00:06:01,070
All right.

99
00:06:01,280 --> 00:06:03,860
We can see all of our tests are still passing.

100
00:06:04,610 --> 00:06:07,400
And here is where I'm going to do one more slight refactor.

101
00:06:07,670 --> 00:06:10,460
So I think that what we have on the right is totally valid.

102
00:06:10,460 --> 00:06:14,300
If you submitted this code in a code review, I think that would be totally appropriate.

103
00:06:14,570 --> 00:06:20,840
But I'm going to deviate slightly from the original use confirmed out implementation because even though

104
00:06:20,840 --> 00:06:26,810
in the real world we are getting a reactive object that storing a boolean, if we were to pretend that

105
00:06:26,810 --> 00:06:30,710
use confirm route returns a plain boolean either true or false.

106
00:06:31,040 --> 00:06:36,590
This logic would actually still work because on job results page would be a boolean.

107
00:06:36,590 --> 00:06:37,190
True or false.

108
00:06:37,430 --> 00:06:40,940
It would register with our VRF and it would render or not render.

109
00:06:41,120 --> 00:06:46,130
Granted, it would no longer be reactive, but for purposes of a single test, a single test is not

110
00:06:46,130 --> 00:06:48,560
currently testing how things are changing.

111
00:06:48,650 --> 00:06:54,090
Rather, we have one test for displaying given a certain return value and one test for not displaying

112
00:06:54,110 --> 00:06:55,910
given the other return value of false.

113
00:06:56,210 --> 00:07:02,390
So given our test setup, if we actually mock return value the basic value of true right here and the

114
00:07:02,390 --> 00:07:04,040
basic value of false right here.

115
00:07:05,470 --> 00:07:09,220
Our test would still pass and I argue makes it a little bit easier to read.

116
00:07:09,400 --> 00:07:13,510
We're basically just communicating here that we are confirming that we are not on the route that we

117
00:07:13,510 --> 00:07:14,020
care about.

118
00:07:14,200 --> 00:07:19,900
And this test confirms that we are on the route that we care about and that we see or do not see content

119
00:07:19,900 --> 00:07:20,500
based on it.

120
00:07:20,980 --> 00:07:25,780
Now, if you wanted to run a test that, for example, received a reactive object and then somehow the

121
00:07:25,780 --> 00:07:30,340
component interacted with it and got a brand new value, then absolutely you would have to mark return

122
00:07:30,340 --> 00:07:33,460
a reactive object from the wrath function.

123
00:07:33,460 --> 00:07:34,540
That's the easiest way to do it.

124
00:07:34,780 --> 00:07:38,380
But given the set up of our current test, a true or false will suffice.

125
00:07:38,500 --> 00:07:43,450
We can prove that simply by making these changes and showing you that the tests do not fail.

126
00:07:43,750 --> 00:07:45,510
So I'm okay with this implementation.

127
00:07:45,520 --> 00:07:51,040
It isn't exactly like the real world, like the real implementation, but it is good enough and good

128
00:07:51,040 --> 00:07:55,990
enough for what this component needs in order to work and in order for us to validate that it works

129
00:07:55,990 --> 00:07:56,650
as expected.

130
00:07:57,040 --> 00:08:00,880
So with that change, I'm going to remove RAF from here because we're no longer using it.

131
00:08:01,630 --> 00:08:03,910
But now you know that that is a valid solution as well.

132
00:08:04,390 --> 00:08:04,720
All right.

133
00:08:04,720 --> 00:08:09,670
So there is our simplified test for our sub nav component, and I will see you in the next lesson.
