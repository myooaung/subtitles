1
00:00:01,110 --> 00:00:07,110
In this optional lesson, I'd like to talk about the three most popular front end libraries and frameworks

2
00:00:07,110 --> 00:00:13,620
in use today which are React, Vue and Angular and talk about the differences between them, especially

3
00:00:13,620 --> 00:00:15,330
when it comes to technical development.

4
00:00:15,720 --> 00:00:20,760
Now, one element that makes Vue unique is that it's developed entirely by volunteers.

5
00:00:21,030 --> 00:00:26,790
React, whose icon you can see on the left there, is supported by Facebook and Angular, whose icon

6
00:00:26,790 --> 00:00:29,340
you can see on the right here is supported by Google.

7
00:00:29,580 --> 00:00:35,550
While Vue is entirely a community effort, but a better way to differentiate between these libraries

8
00:00:35,670 --> 00:00:40,500
is on a scale of an opinionated versus opinionated Vue creator.

9
00:00:40,500 --> 00:00:47,190
Evan, you even stated himself that Vue falls in between and react in Angular on this scale.

10
00:00:47,490 --> 00:00:49,680
So let's talk a little bit about what that means.

11
00:00:51,000 --> 00:00:56,670
So let's start with the right side here, the angular side, the opinionated side.

12
00:00:56,910 --> 00:00:59,310
What does it mean to be opinionated, right?

13
00:00:59,640 --> 00:01:01,660
Well, it means that you have opinions.

14
00:01:01,680 --> 00:01:05,400
It means that you have beliefs on how things should work.

15
00:01:05,760 --> 00:01:11,640
So Angular has a certain set of conventions, or we can also call them rules or standards.

16
00:01:11,880 --> 00:01:17,160
And it demands that you follow those conventions in order to use the framework effectively.

17
00:01:17,490 --> 00:01:21,150
A simple way that I can describe it is my way or the highway.

18
00:01:21,360 --> 00:01:24,330
You have to use things the way that I tell you to use them.

19
00:01:24,510 --> 00:01:29,040
And then if you promise me you're going to do that, I'm going to give you a whole bunch of efficiencies

20
00:01:29,370 --> 00:01:30,330
as a result of that.

21
00:01:30,750 --> 00:01:35,280
So Angular is a lot larger in scope than just view or react.

22
00:01:35,520 --> 00:01:42,360
For example, Angular automatically ships with a library to make HTTP requests, to make API requests

23
00:01:42,360 --> 00:01:43,650
to get data from some server.

24
00:01:44,040 --> 00:01:45,780
So it comes pre-configured with that.

25
00:01:45,990 --> 00:01:48,480
It comes pre-configured with a testing library.

26
00:01:48,780 --> 00:01:52,500
It enforces certain design patterns for building pieces of the app.

27
00:01:52,860 --> 00:01:58,020
For example, Angular requires you to write your code in TypeScript, so you're going to hear that word

28
00:01:58,020 --> 00:01:58,380
a lot.

29
00:01:58,380 --> 00:02:04,620
When it comes to opinionated write, it requires certain ways to write your code and there's no single

30
00:02:04,620 --> 00:02:05,790
right way or wrong way.

31
00:02:05,880 --> 00:02:08,820
There's just advantages and disadvantages to each approach.

32
00:02:09,120 --> 00:02:15,210
So the advantage of being opinionated is that you're going to have somewhat consistent code from code

33
00:02:15,210 --> 00:02:15,900
base to code base.

34
00:02:15,930 --> 00:02:18,150
Angular wants you to do things a certain way.

35
00:02:18,390 --> 00:02:22,740
So if you go from one Angular code base to another, you're going to start to see the same patterns.

36
00:02:23,100 --> 00:02:24,770
You do have to learn more.

37
00:02:24,780 --> 00:02:26,190
You have a larger learning curve.

38
00:02:26,190 --> 00:02:28,770
For example, you have to learn TypeScript to use Angular.

39
00:02:29,010 --> 00:02:33,180
But once you do learn that and you move to another Angular code base, you're going to be working with

40
00:02:33,180 --> 00:02:38,640
the same technology, and it's used in a much more similar fashion, as I mentioned earlier.

41
00:02:38,760 --> 00:02:44,160
Angular chooses the HTP request library and the testing library, but it's the same one.

42
00:02:44,310 --> 00:02:49,860
So you don't have to worry about picking and choosing from project to project, but you do have to learn

43
00:02:49,890 --> 00:02:51,210
with a one way of doing things.

44
00:02:52,330 --> 00:02:54,460
And you kind of stick with it as you move along.

45
00:02:54,490 --> 00:02:54,730
Right.

46
00:02:54,970 --> 00:03:01,090
So it has a larger learning curve upfront and it gives you less freedom, less flex, less flexibility

47
00:03:01,720 --> 00:03:04,480
because of its kind of standardized approach.

48
00:03:04,720 --> 00:03:05,050
Right.

49
00:03:05,560 --> 00:03:08,040
So it's kind of both a blessing and a curse.

50
00:03:08,050 --> 00:03:11,200
The problem with opinionated software is that it's standardized and enforced.

51
00:03:11,440 --> 00:03:12,460
It's less fun.

52
00:03:12,730 --> 00:03:17,770
You're less likely to choose which technology you want to work with, how you want to do things, how

53
00:03:17,770 --> 00:03:18,610
you want to build things.

54
00:03:18,880 --> 00:03:19,720
It's angular.

55
00:03:19,960 --> 00:03:21,190
It's my way or the highway.

56
00:03:21,430 --> 00:03:21,740
Right.

57
00:03:22,060 --> 00:03:26,410
On the opposite end of that side, you have the UN opinionated software, which is React.

58
00:03:26,410 --> 00:03:29,410
React at its core is just a view library.

59
00:03:29,410 --> 00:03:31,900
It's just responsible for rendering things in your browser.

60
00:03:32,200 --> 00:03:36,240
So that means it has no opinions on how you should make API requests.

61
00:03:36,250 --> 00:03:40,930
What API library request library should use, what testing library you should use.

62
00:03:41,170 --> 00:03:46,570
React doesn't even have an opinion on routing, which means when you navigate from one page to another

63
00:03:46,570 --> 00:03:49,860
in your app, how is that going to render different things on the screen?

64
00:03:49,870 --> 00:03:51,070
There's multiple solutions.

65
00:03:51,220 --> 00:03:54,910
React doesn't have an opinion on whether you should or should not use TypeScript.

66
00:03:55,060 --> 00:03:56,830
You can, but you don't have to.

67
00:03:57,130 --> 00:04:00,160
So the way to describe it is almost like the Wild West.

68
00:04:00,160 --> 00:04:01,270
It's kind of a free for all.

69
00:04:01,390 --> 00:04:05,770
You can mix and match a whole bunch of different libraries, whether it be testing or API requests.

70
00:04:05,980 --> 00:04:07,430
You can mix and match them with React.

71
00:04:07,630 --> 00:04:12,580
There's a lot of freedom that comes with that and a lot of flexibility, but also a lot of responsibility

72
00:04:12,760 --> 00:04:17,200
because many times there's lots of competing different ways on how to do something.

73
00:04:17,200 --> 00:04:18,790
And you have to do extra research.

74
00:04:19,180 --> 00:04:24,730
You have to debate pros and cons of different solutions and going from one React code base to another.

75
00:04:25,000 --> 00:04:28,180
There's not so much of a guarantee that you're going to have similar looking code.

76
00:04:28,360 --> 00:04:33,790
The core React code, of course, is going to be pretty similar, but the surrounding ecosystem that

77
00:04:33,790 --> 00:04:39,610
you surround react with is not going to have the same level of consistency as it would with an opinionated

78
00:04:39,610 --> 00:04:41,140
choice like Angular.

79
00:04:41,440 --> 00:04:41,770
Right.

80
00:04:42,460 --> 00:04:47,950
So again, advantages and disadvantages with with the and opinionated react, you get more flexibility,

81
00:04:47,950 --> 00:04:48,730
you get more fun.

82
00:04:48,730 --> 00:04:54,580
You can play with the new library that came into fashion this year and PM, but next year might be replaced

83
00:04:54,580 --> 00:04:59,590
by a different library and the React community may go that way and debate this way and choose this.

84
00:04:59,740 --> 00:05:04,900
And then all of a sudden it may not be popular anymore and things change a lot more rapidly as a result

85
00:05:04,900 --> 00:05:05,380
of that.

86
00:05:05,590 --> 00:05:05,890
All right.

87
00:05:06,190 --> 00:05:12,220
So Vue kind of lines up right in the middle and let me talk about how it's able to achieve that balance.

88
00:05:12,730 --> 00:05:15,940
So Vue has a very extensive ecosystem.

89
00:05:16,270 --> 00:05:20,710
That means there's a bunch of additional tools that are complementary to view.

90
00:05:20,950 --> 00:05:26,860
And unlike in the React ecosystem, there are built by the View Core team, that same team that develops

91
00:05:26,860 --> 00:05:27,220
Vue.

92
00:05:27,730 --> 00:05:29,980
So Vue has a solution for routing.

93
00:05:29,980 --> 00:05:31,000
It's called Vue router.

94
00:05:31,000 --> 00:05:32,560
We're going to be learning about it later in the course.

95
00:05:33,190 --> 00:05:38,620
Another example is state management, which is storing data that is global above your app, right?

96
00:05:38,950 --> 00:05:42,490
Vue has a solution for that called Vue X that is developed by the Blue Team.

97
00:05:42,940 --> 00:05:47,920
If you want to test Vue components or the view code that we're going to be writing, Vue has a recommended

98
00:05:47,920 --> 00:05:53,020
test library that it develops called Vue Test Utils, again developed by the View Core Team.

99
00:05:53,440 --> 00:05:55,450
So what's the difference between that and Angular?

100
00:05:55,540 --> 00:06:01,990
Well, View doesn't require you to use these tools in the ecosystem, but those ecosystem tools are

101
00:06:01,990 --> 00:06:06,670
built with Vue in mind specifically for working with Vue.

102
00:06:07,390 --> 00:06:13,090
And so when you want to expand to add those new features to your app, there is a recommended set of

103
00:06:13,090 --> 00:06:13,900
technologies.

104
00:06:14,200 --> 00:06:19,060
So you sort of get the benefits of the angular ecosystem where you have some consistency because these

105
00:06:19,060 --> 00:06:23,920
are the tools that the View team recommends that you use and that you have in conjunction with, in

106
00:06:23,920 --> 00:06:24,910
conjunction with Vue.

107
00:06:25,120 --> 00:06:30,820
However, there are still other options available in the open source community that work with view that

108
00:06:30,820 --> 00:06:36,190
you can also use if you're looking for to try something different or had a bad experience with the way

109
00:06:36,190 --> 00:06:37,840
Vue does things and wants to try something else.

110
00:06:38,050 --> 00:06:39,910
So you sort of get the best of all worlds.

111
00:06:40,180 --> 00:06:44,770
You have the core Vue library, which is just like react pretty and opinionated.

112
00:06:44,890 --> 00:06:48,040
But then when you want to add more features and functionality to your app.

113
00:06:48,160 --> 00:06:54,010
You have a way to gradually add them to your app and know that they have the support of the view team

114
00:06:54,010 --> 00:07:01,360
behind them and thus have consistency and obviously optimizations for working with each other and as

115
00:07:01,360 --> 00:07:02,830
you continue building out your project.

116
00:07:02,840 --> 00:07:07,330
So in that way, Vue sort of accomplishes the best of all worlds and that's one of my favorite features

117
00:07:07,330 --> 00:07:07,720
about it.

118
00:07:08,050 --> 00:07:11,980
So the next slide that I'm going to take you to is from a slide deck by Evan.

119
00:07:11,980 --> 00:07:18,880
You add a view conference that he spoke at and it reflects sort of the entire review ecosystem.

120
00:07:19,030 --> 00:07:23,380
And of course, a lot of these terms may be pretty unfamiliar to you, but the way it works is like

121
00:07:23,380 --> 00:07:23,650
this.

122
00:07:23,650 --> 00:07:27,340
You can imagine that this bright red circle right here, this is declarative rendering.

123
00:07:27,670 --> 00:07:30,760
It really is the core heart of what the View Library gives you.

124
00:07:30,760 --> 00:07:33,340
And I would also say the component system around it as well.

125
00:07:33,580 --> 00:07:36,910
So this red circle here is what's kind of the core view library.

126
00:07:36,910 --> 00:07:39,340
If you just install view, this is what you're going to get.

127
00:07:39,640 --> 00:07:46,030
And these are additional features that are commonly needed in modern frontend web apps, right?

128
00:07:46,270 --> 00:07:51,070
So the angular approach of course is giving you all of these features in the singular, in a single

129
00:07:51,070 --> 00:07:51,700
angular.

130
00:07:51,970 --> 00:07:56,170
Framework and saying you have to use it, you have to use our solution for client side routing, you

131
00:07:56,170 --> 00:08:01,510
have to use our large scale state management solution, etc., our build system, etc. React solution

132
00:08:01,510 --> 00:08:05,620
is to say, Well, I'm going to give you the spread circle and it's up to you to figure out how you

133
00:08:05,620 --> 00:08:07,420
want to handle all of these other elements.

134
00:08:07,420 --> 00:08:10,450
There's a bunch of different solutions and options choose which one works.

135
00:08:10,450 --> 00:08:13,000
And of course there's a lot of inconsistency.

136
00:08:13,000 --> 00:08:18,310
Thus from React code base to React codebase, what Vue says is we're going to just give you this core

137
00:08:18,310 --> 00:08:23,080
part, and if you're interested in these other features, we're going to build them and we're going

138
00:08:23,080 --> 00:08:24,040
to make them optional.

139
00:08:24,040 --> 00:08:29,740
So you're not required to add them like Angular does, but if you want to add them, you can and you

140
00:08:29,740 --> 00:08:34,360
can add them with the confidence that they are going to work well with with Vue because they're developed

141
00:08:34,360 --> 00:08:35,800
by the exact same team.

142
00:08:36,370 --> 00:08:36,670
Right.

143
00:08:36,820 --> 00:08:41,800
React doesn't have the comfort because the core React library is developed by Facebook, but all of

144
00:08:41,800 --> 00:08:46,720
its additional supplemental libraries in its ecosystem are developed by a whole bunch of different teams

145
00:08:46,870 --> 00:08:51,730
some open source, some from other companies, etc. So it's a lot more fragmented, right?

146
00:08:51,850 --> 00:08:56,080
You're probably going to get a lot more innovation there, a lot more competition, etc., but a lot

147
00:08:56,080 --> 00:08:57,250
more inconsistency as well.

148
00:08:57,850 --> 00:09:00,250
And angular on the other end is a total opposite.

149
00:09:00,250 --> 00:09:01,750
It's we're going to give you all of this.

150
00:09:01,810 --> 00:09:04,960
You choose if you don't want it, then Anglo's not the right thing for you.

151
00:09:05,590 --> 00:09:09,790
We'll in comparison kind of again merges the best of all worlds.

152
00:09:09,940 --> 00:09:12,490
It gives you this option, which is the core of your library.

153
00:09:12,610 --> 00:09:18,460
It gives you the options for anything beyond that, including the view recommended approach or the view

154
00:09:18,470 --> 00:09:23,500
supported approach developed by the core team or your choice of whatever open source libraries that

155
00:09:23,500 --> 00:09:26,200
you'd like to use if you prefer something different.

156
00:09:26,770 --> 00:09:29,830
So that's kind of the differences between View, React and Angular.

157
00:09:29,830 --> 00:09:34,450
Hopefully that's helped to clarify that opinionated versus underpinning it at scale and probably giving

158
00:09:34,450 --> 00:09:39,220
you a better sense of which one you should pick for your project or for your team as you're building

159
00:09:39,220 --> 00:09:40,240
your next app, right?

160
00:09:40,480 --> 00:09:41,890
That's all there is to cover in this lesson.

161
00:09:41,890 --> 00:09:47,050
And now we can move forward with officially installing view and getting started with the framework.
