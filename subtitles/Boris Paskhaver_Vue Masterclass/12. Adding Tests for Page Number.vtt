WEBVTT
1
00:00:00.640 --> 00:00:01.460
Okay.

2
00:00:01.460 --> 00:00:07.160
So the first new feature that I'd like to test from our job listings component is our display of the

3
00:00:07.160 --> 00:00:08.330
current page number.

4
00:00:08.600 --> 00:00:12.410
And as a reminder, this comes from our current page computed property.

5
00:00:12.710 --> 00:00:17.990
If I scroll down to look at that properties code, we can see there's actually two scenarios under which

6
00:00:17.990 --> 00:00:18.710
it can operate.

7
00:00:18.920 --> 00:00:24.980
The first is if our query object has a page property, that is what happens when we provide a query

8
00:00:24.980 --> 00:00:26.720
pram of page in the URL.

9
00:00:26.990 --> 00:00:32.630
And the second scenario is if that page property does not exist, or in other words, if that page query

10
00:00:32.630 --> 00:00:35.660
param does not exist, we fall back to this string of one.

11
00:00:35.930 --> 00:00:40.760
So these are both branches of logic that is possible for our component to go through.

12
00:00:40.940 --> 00:00:44.000
So we need to make sure that we have a test for each scenario.

13
00:00:44.360 --> 00:00:47.480
And of course, I always want to bring it back to the user experience.

14
00:00:47.510 --> 00:00:50.450
What is the user seeing in the actual interface?

15
00:00:50.630 --> 00:00:53.690
The user doesn't care about the current page computed property.

16
00:00:53.690 --> 00:00:55.010
We don't want to test that directly.

17
00:00:55.220 --> 00:01:01.130
We want to test that the user sees the right thing right here, given the right circumstance or situation

18
00:01:01.130 --> 00:01:03.770
or context that we provide in our test setup.

19
00:01:03.950 --> 00:01:04.310
All right.

20
00:01:04.970 --> 00:01:10.220
So what I'm going to do here is in my test suite, in my first described block of job listings.

21
00:01:10.460 --> 00:01:14.210
If I scroll all the way to the bottom, I'm going to add another describe block.

22
00:01:14.420 --> 00:01:20.720
And typically, we nest our describe function calls whenever we want to provide additional context or

23
00:01:20.900 --> 00:01:25.640
to set up a scenario or a situation under which we want to make an assertion.

24
00:01:25.910 --> 00:01:30.890
So these IT function calls above kind of exist no matter what the situation is.

25
00:01:31.100 --> 00:01:36.350
This scenario that I want to test exists under a more specific circumstance or context.

26
00:01:36.590 --> 00:01:41.240
So what I'm going to do is I'm going to add a describe function call and I'm going to say when params

27
00:01:41.240 --> 00:01:43.160
exclude page number.

28
00:01:44.320 --> 00:01:49.390
In fact, let's make this even more explicit and say when query params exclude page number.

29
00:01:49.870 --> 00:01:50.170
Right.

30
00:01:50.290 --> 00:01:55.180
So instead of adding this kind of logic to the end of an IT function call, I like to categorize and

31
00:01:55.180 --> 00:02:00.850
organize my assertions by putting this logic into a separate described function block.

32
00:02:01.000 --> 00:02:06.760
So a really easy tip that you can follow here is if your test assertion includes the word when, if

33
00:02:06.760 --> 00:02:11.530
you're describing the circumstance under which you're testing, it's a better idea to extract it to

34
00:02:11.530 --> 00:02:13.090
a separate describe function call.

35
00:02:13.270 --> 00:02:16.480
And then inside that describe you can put this specific assertion.

36
00:02:16.750 --> 00:02:20.740
So right here when create params exclude page number, what should my component do?

37
00:02:21.070 --> 00:02:23.500
It displays page number one.

38
00:02:25.020 --> 00:02:29.280
So I'm going to provide my function here, and here's where we're going to write our assertion.

39
00:02:29.850 --> 00:02:32.360
So let's set up our component.

40
00:02:32.370 --> 00:02:33.780
We're going to need query params.

41
00:02:33.990 --> 00:02:37.260
We're going to need a root object, we're going to need a config object, and then we're going to need

42
00:02:37.260 --> 00:02:38.280
our mounted component.

43
00:02:38.670 --> 00:02:45.090
So what we might think of doing is simply creating a query params constant set to an empty object.

44
00:02:45.090 --> 00:02:45.390
Right?

45
00:02:45.390 --> 00:02:51.750
Because our situation that we're testing under here is one under which the component has no query params

46
00:02:51.750 --> 00:02:54.180
and thus no page query params.

47
00:02:54.180 --> 00:02:54.390
Right.

48
00:02:54.390 --> 00:02:57.390
None of this thing right here.

49
00:02:57.660 --> 00:03:00.030
Now this is actually a good idea and I like this.

50
00:03:00.030 --> 00:03:05.700
However, unfortunately we do have a small flaw in our test design and that is if I scroll back up,

51
00:03:06.330 --> 00:03:12.930
you're going to see that we have hardcoded the value page in our query object right here to have a fallback

52
00:03:12.930 --> 00:03:15.090
value of a string of file.

53
00:03:15.330 --> 00:03:20.100
So if we provide an empty object right here for create params, we're not actually ever going to overwrite

54
00:03:20.100 --> 00:03:25.530
this page property and thus we're going to keep that queer param in our test through this implicit create

55
00:03:25.530 --> 00:03:27.060
root function that we're using.

56
00:03:27.060 --> 00:03:27.300
Right.

57
00:03:27.900 --> 00:03:31.920
And we could of course skip this function entirely and pass in a custom root object right here.

58
00:03:32.040 --> 00:03:33.930
There are many different ways we can solve this problem.

59
00:03:34.020 --> 00:03:38.730
We can also get rid of this property entirely right here, but that would require us to specify in every

60
00:03:38.730 --> 00:03:39.390
test below.

61
00:03:39.660 --> 00:03:44.730
I think the simplest solution that we can do to get around this is to simply overwrite this page property.

62
00:03:44.940 --> 00:03:50.400
And one way we can do that, while still honoring the idea of page not existing, is if I define the

63
00:03:50.400 --> 00:03:54.930
page property right here, but explicitly define it as undefined.

64
00:03:55.740 --> 00:04:00.060
So this is as good as the page property not existing in my query object.

65
00:04:00.270 --> 00:04:02.010
So that's when I pass this to the root.

66
00:04:02.010 --> 00:04:07.050
It's going to give us the exact same scenario that we want here where this page property does not exist

67
00:04:07.050 --> 00:04:10.110
because undefined is going to be what we evaluated right here.

68
00:04:10.230 --> 00:04:11.170
That is going to be false.

69
00:04:11.220 --> 00:04:15.750
So we're going to jump to this string of one, which is the exact scenario that we're testing here when

70
00:04:15.750 --> 00:04:18.270
creep rams exclude that page number.

71
00:04:18.420 --> 00:04:18.750
All right.

72
00:04:18.870 --> 00:04:22.770
And this is, again, just to be consistent with the way that we've set up all of our tests prior to

73
00:04:22.770 --> 00:04:23.160
this one.

74
00:04:23.490 --> 00:04:27.900
So now that we have our query params, what I'm going to do is create my root object, which I can do

75
00:04:27.900 --> 00:04:33.240
by invoking my create root function from above and we can pass in my create params right here.

76
00:04:34.590 --> 00:04:34.890
Right.

77
00:04:35.160 --> 00:04:39.210
So now we have that root object that looks like this, right?

78
00:04:39.330 --> 00:04:43.470
And we want to pass this root object to our create config function because it's going to use it to set

79
00:04:43.470 --> 00:04:44.100
up the mock.

80
00:04:44.100 --> 00:04:48.300
So we have something to represent this dot dollar sign root in our test component.

81
00:04:48.750 --> 00:04:50.430
So right here I'm going to.

82
00:04:52.550 --> 00:04:53.360
Create a rapper.

83
00:04:53.630 --> 00:04:58.250
I'm going to shallow mount my job listings component and to provide its configuration object.

84
00:04:58.250 --> 00:05:02.720
I'm going to invoke create config and I'm going to pass it my route object from above.

85
00:05:03.950 --> 00:05:06.120
All right, so what do we want to test?

86
00:05:06.140 --> 00:05:09.980
We want to test that in this wrapper, we have a piece of text that displays the page number.

87
00:05:10.130 --> 00:05:13.310
And without any params, this should be page one.

88
00:05:13.310 --> 00:05:17.960
Current page should have value to one because it should fall back to this string of one right here.

89
00:05:18.260 --> 00:05:24.560
So what I'm going to do is invoke my wrapper text method to get all of the text that the user is going

90
00:05:24.560 --> 00:05:25.610
to see in the DOM.

91
00:05:25.610 --> 00:05:27.290
So forget all the elements.

92
00:05:27.290 --> 00:05:28.220
Forget all the components.

93
00:05:28.220 --> 00:05:33.980
Just give me the text that we're going to show to the user in the DOM in the actual display that they

94
00:05:33.980 --> 00:05:34.250
see.

95
00:05:34.460 --> 00:05:38.000
And somewhere in this text I expect there to be a substring of page one.

96
00:05:38.270 --> 00:05:43.160
So I'm going to use that to match assertion and I'm going to provide a string here of page one.

97
00:05:43.190 --> 00:05:46.490
That substring of page one should exist somewhere in my wrappers.

98
00:05:46.490 --> 00:05:46.880
Text.

99
00:05:47.330 --> 00:05:48.230
I'm going to save this.

100
00:05:49.680 --> 00:05:52.410
And we're going to see if this works and indeed it does.

101
00:05:52.560 --> 00:05:56.490
Again, apologies for the fact that we have this slightly awkward JavaScript syntax.

102
00:05:56.490 --> 00:05:59.390
We typically don't explicitly write out undefined.

103
00:05:59.400 --> 00:06:02.740
It's meant to be more of an implicit fallback to represent a missing value.

104
00:06:02.970 --> 00:06:07.170
But in this scenario, we do need to make it explicit just so that we overwrite this property right

105
00:06:07.170 --> 00:06:12.030
here to give us a query object that is good enough to play the role of this thing right here.

106
00:06:12.060 --> 00:06:18.030
And that is a query object that technically does not have a page property, which we can get to by explicitly

107
00:06:18.030 --> 00:06:19.680
assigning page two undefined.

108
00:06:20.070 --> 00:06:20.340
All right.

109
00:06:20.350 --> 00:06:22.470
Our next test is going to be a little bit simpler.

110
00:06:22.770 --> 00:06:26.610
So what we can do here is write another described function block.

111
00:06:27.330 --> 00:06:28.680
This is the alternate scenario.

112
00:06:28.680 --> 00:06:37.890
So when query params include page number, we can write a description like it displays page number.

113
00:06:39.840 --> 00:06:44.490
Kind of communicating that the clear params here play a role as far as determining what we want the

114
00:06:44.490 --> 00:06:45.120
user to see.

115
00:06:45.630 --> 00:06:49.020
So for the most part, I can copy most of the code from up above.

116
00:06:49.020 --> 00:06:50.490
So I'm going to copy and paste the right here.

117
00:06:50.790 --> 00:06:52.770
We're going to need to modify this test.

118
00:06:52.980 --> 00:06:57.540
So obviously, instead of providing a page value of undefined, I do want to give a valid value here.

119
00:06:57.810 --> 00:06:59.730
So how about we do page three.

120
00:07:00.030 --> 00:07:00.300
Right.

121
00:07:00.300 --> 00:07:02.250
So our create params are now existent.

122
00:07:02.550 --> 00:07:05.040
They're now existent, existing, whatever is the right word.

123
00:07:05.340 --> 00:07:07.470
We are going to have a page queer pram.

124
00:07:07.470 --> 00:07:08.910
It is going to have a value of three.

125
00:07:09.060 --> 00:07:10.860
We're going to create the right root object.

126
00:07:11.040 --> 00:07:14.970
So that means our code is going to go through this logic right here and it's going to get the string

127
00:07:14.970 --> 00:07:15.420
of three.

128
00:07:15.720 --> 00:07:22.110
And so we expect when we execute all this logic, our wrappers text should match page three instead

129
00:07:22.110 --> 00:07:22.830
of page one.

130
00:07:23.130 --> 00:07:25.440
Let me execute this and let's see how we are doing.

131
00:07:26.910 --> 00:07:31.110
All right, so everything is looking good and I'm pretty happy with our result here.

132
00:07:31.120 --> 00:07:36.900
So we have successfully tested for the queer params, both when they're present and when they're not

133
00:07:36.900 --> 00:07:40.500
present, and how they affect the user's experience of seeing the current page.

134
00:07:40.770 --> 00:07:45.000
So I'm happy with these tests and now we can move on to the tests for our router link.
