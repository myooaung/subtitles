1
00:00:00,530 --> 00:00:01,320
Okay.

2
00:00:01,320 --> 00:00:04,650
So now we are back inside our main nav component.

3
00:00:04,650 --> 00:00:10,470
And the next thing that I want to show you how to do is how to connect our view instance data, our

4
00:00:10,470 --> 00:00:14,730
JavaScript, in other words, to our template, to our HTML.

5
00:00:15,120 --> 00:00:21,690
So what we can do inside our script tag is define certain pieces of data that are going to be available

6
00:00:21,690 --> 00:00:23,910
to use within our HTML.

7
00:00:24,180 --> 00:00:27,270
And the beautiful part about that design is the reactivity.

8
00:00:27,480 --> 00:00:34,290
When our data changes, Vue will automatically update the corresponding h html.

9
00:00:34,590 --> 00:00:38,610
So let's take a look at this in action in my configuration object for this component.

10
00:00:38,610 --> 00:00:41,550
Right now we only have a single property called Name.

11
00:00:41,820 --> 00:00:44,940
What I want to add here is a new method called data.

12
00:00:45,750 --> 00:00:48,000
So this method name is not up to us.

13
00:00:48,000 --> 00:00:49,470
It is a view requirement.

14
00:00:49,620 --> 00:00:50,700
At this call data.

15
00:00:50,940 --> 00:00:54,360
It's going to be a method that does not accept any parameters right now.

16
00:00:54,990 --> 00:00:58,290
And here we're going to provide the curly braces to define the method.

17
00:00:58,680 --> 00:01:04,140
And all this method is going to to do is return a plain JavaScript object.

18
00:01:04,440 --> 00:01:07,470
So I'm going to return a JavaScript object right here.

19
00:01:07,740 --> 00:01:16,320
And in this object, the properties that we define will be available to be added or injected or interpolated

20
00:01:16,320 --> 00:01:17,490
whatever word you want to use.

21
00:01:18,090 --> 00:01:23,700
We're going to have these keys available to reference within our HTML template.

22
00:01:24,090 --> 00:01:29,640
So for example, right now on our screen, we only have a single bit of text which is Bobo Careers.

23
00:01:29,970 --> 00:01:36,270
I would like to be able to define bubble careers as some kind of JavaScript data piece, a piece of

24
00:01:36,270 --> 00:01:41,340
information that lives with our JavaScript and have you be responsible for taking that piece of data

25
00:01:41,460 --> 00:01:46,230
and rendering it onto the screen so we do not have to manually type out Bobo careers.

26
00:01:46,590 --> 00:01:52,740
So right here, let's say I have a property called the company and I'm going to set its value to Bobo

27
00:01:52,740 --> 00:01:53,280
careers.

28
00:01:54,740 --> 00:02:01,190
So what we're doing here in our configuration object is configuring any kind of data that this component

29
00:02:01,190 --> 00:02:02,060
may need.

30
00:02:02,060 --> 00:02:03,380
And this data can be anything.

31
00:02:03,380 --> 00:02:08,360
It can be strings, it can be numbers, it can be arrays, it can be data that we get from the API.

32
00:02:08,510 --> 00:02:11,690
It can be data that we, for example, me read off a disk somewhere.

33
00:02:11,870 --> 00:02:16,880
The point is that we have some kind of piece of information, some data that is living in JavaScript.

34
00:02:16,880 --> 00:02:20,870
And now I want to bind that data to the view.

35
00:02:20,960 --> 00:02:25,490
I want to connect some piece of data to my actual HTML.

36
00:02:25,640 --> 00:02:26,000
All right.

37
00:02:26,300 --> 00:02:28,580
So obviously, the goal here is clear.

38
00:02:28,580 --> 00:02:34,970
I want to replace Bobo Careers with some reference to this piece of information that I have called company.

39
00:02:35,330 --> 00:02:39,620
So you might think that we might be able to get away with writing something like company here.

40
00:02:39,950 --> 00:02:41,270
That, of course, will not work.

41
00:02:41,270 --> 00:02:42,590
If I go back to my browser.

42
00:02:43,580 --> 00:02:47,180
What we are instead going to see is the literal word company, right?

43
00:02:47,180 --> 00:02:52,340
And that's why we can't just arbitrarily reference anything within our view, because view does not

44
00:02:52,340 --> 00:02:57,830
know that we want to reference something specifically called company inside our data.

45
00:02:58,100 --> 00:03:02,420
So how can we make that connection between our configuration object and our HTML?

46
00:03:02,630 --> 00:03:10,760
We use a special syntax in view that consists of two curly braces before and after what we want to inject

47
00:03:10,760 --> 00:03:11,930
into our timeout.

48
00:03:12,140 --> 00:03:18,080
So right here I'm going to add to a opening pair of a curly braces and then a closing pair of curly

49
00:03:18,080 --> 00:03:18,440
braces.

50
00:03:18,710 --> 00:03:20,120
And the way it works is like this.

51
00:03:20,450 --> 00:03:27,500
Any single property that we have in the object that we returned from our data method that is available

52
00:03:27,530 --> 00:03:28,910
to use in our HTML.

53
00:03:29,120 --> 00:03:33,710
So in other words, company is available to use within these curly braces too.

54
00:03:33,710 --> 00:03:34,280
Right here.

55
00:03:34,280 --> 00:03:35,900
I'm going to right company.

56
00:03:36,590 --> 00:03:39,920
I'm going to save this file and I'm going to navigate back to the browser.

57
00:03:41,000 --> 00:03:43,790
And we can see that Bobo Careers has appeared.

58
00:03:43,970 --> 00:03:51,110
So we have bound the data from our JavaScript, from our view configuration to our HTML to our DOM.

59
00:03:51,320 --> 00:03:54,170
This feature is called interpolation.

60
00:03:54,200 --> 00:03:59,450
I just want to show you here the difference between how this appears in view and how it will appear

61
00:03:59,450 --> 00:04:00,260
within our web page.

62
00:04:00,290 --> 00:04:05,580
So what I'm going to do is I'm going to bring up my developer tools and I'm going to go to my view dev

63
00:04:05,630 --> 00:04:08,990
tools right here, and we can navigate into our main nav component.

64
00:04:09,170 --> 00:04:13,550
Previously, when we clicked into any component, we didn't see anything on the right hand side because

65
00:04:13,670 --> 00:04:15,290
none of our components had data.

66
00:04:15,620 --> 00:04:20,660
They only had a name property, which by the way, corresponds to what we see right here.

67
00:04:20,810 --> 00:04:26,300
The reason we see it labeled as main nav right here is because we gave this component a name property

68
00:04:26,300 --> 00:04:28,100
of Main NAV within that view file.

69
00:04:28,130 --> 00:04:30,200
That's why it's important to give each component a name.

70
00:04:30,470 --> 00:04:35,540
And once I click into my main nav will be able to see its data right here on the screen.

71
00:04:35,540 --> 00:04:41,570
So we can see that the company property belonging to the main NAV component has a value of bubble careers.

72
00:04:41,750 --> 00:04:43,760
And that is what is rendering onto the screen.

73
00:04:44,000 --> 00:04:46,100
And here's the beautiful part about view.

74
00:04:46,880 --> 00:04:53,270
If I change the data, which I can do right here through the view, dev tools view and its whole responsibility

75
00:04:53,270 --> 00:04:55,670
is to track those changes and react to them.

76
00:04:55,880 --> 00:05:02,030
So if we've told the HTML to always render the value of the company property, if the company property

77
00:05:02,030 --> 00:05:05,240
changes, then the view will also update to reflect that.

78
00:05:05,510 --> 00:05:12,410
So if I change this to, for example, something else, and then I click this little diskette to save.

79
00:05:13,520 --> 00:05:19,460
Lo and behold, as our view component date has changed, so has our actual representation on the page,

80
00:05:19,460 --> 00:05:24,980
and that is the core of what view does for us and allows us to configure JavaScript and business logic

81
00:05:24,980 --> 00:05:27,560
within a programming language and have view.

82
00:05:27,560 --> 00:05:34,430
Take care of rendering any of those differences and changes to our HTML in a variety of different ways.

83
00:05:34,580 --> 00:05:38,630
Here, it's literally outputting some text to the screen, but there's other ways that we can use this

84
00:05:38,630 --> 00:05:44,960
to customize attributes, conditional components, appearing all kinds of different ways that we can

85
00:05:44,960 --> 00:05:50,060
leverage the power of JavaScript and then have you take care of the actual visual results of that within

86
00:05:50,060 --> 00:05:51,210
our template, right?

87
00:05:51,410 --> 00:05:53,840
So that is what it looks like from the view side of the world.

88
00:05:53,840 --> 00:06:00,080
However, if I go to my Elements tab and I click into here, we'll see that something else is written

89
00:06:00,080 --> 00:06:01,280
in line right here.

90
00:06:01,490 --> 00:06:05,720
So from the browsers perspective, the browser has no clue what Vue is doing for us.

91
00:06:05,720 --> 00:06:10,520
The browser just sees an anchor tag that has the text of something else rendered inside it.

92
00:06:10,760 --> 00:06:16,610
So Vue just injects the right content and takes care of that, and our browser has no clue about Vue

93
00:06:16,760 --> 00:06:18,890
or whatever frontend library we happen to be using.

94
00:06:18,980 --> 00:06:24,830
It just sees the final regular HTML and JavaScript that it knows how to parse and understand.

95
00:06:24,920 --> 00:06:28,070
All right, that's the conversion that Vue takes care of for us.

96
00:06:28,400 --> 00:06:28,700
All right.

97
00:06:28,910 --> 00:06:30,350
That's all there is to cover in this lesson.

98
00:06:30,350 --> 00:06:31,790
So I will see you in the next one.
