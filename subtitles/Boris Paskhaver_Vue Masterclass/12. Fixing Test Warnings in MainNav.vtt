WEBVTT
1
00:00:00.330 --> 00:00:01.230
Okay.

2
00:00:01.230 --> 00:00:04.480
So we still have one test warning in our terminal.

3
00:00:04.650 --> 00:00:11.340
And this is actually a pretty curious one because you can see it's coming from the main NAV tests,

4
00:00:11.520 --> 00:00:14.160
which are mounting the main nav component.

5
00:00:14.520 --> 00:00:16.350
But here's where things get really interesting.

6
00:00:16.380 --> 00:00:23.850
If I open up my main nav component and I scroll down, you'll notice we're not actually using the font

7
00:00:23.850 --> 00:00:27.090
awesome icon anywhere in this component.

8
00:00:27.330 --> 00:00:27.750
Right.

9
00:00:28.410 --> 00:00:29.550
So what is going on?

10
00:00:29.790 --> 00:00:35.760
Well, let me go ahead and open up my main nav tests on the right hand side and scroll to the top.

11
00:00:35.760 --> 00:00:39.600
And you can see here we are indeed mounting the main nav component in every test.

12
00:00:40.020 --> 00:00:40.290
Right.

13
00:00:40.290 --> 00:00:45.240
And nowhere are we using the font awesome icon, but the tests are still complaining.

14
00:00:45.600 --> 00:00:47.340
So let me explain what's going on here.

15
00:00:47.370 --> 00:00:52.380
And in order to do so, we need to talk about the mount function that we've been using so far.

16
00:00:52.740 --> 00:00:59.400
There's actually two options available to us from view test utils regarding how we can mount a component.

17
00:00:59.640 --> 00:01:05.160
The first is this mount function, and the second option is a shallow mount function.

18
00:01:05.460 --> 00:01:08.910
Let's start with going into more detail about what Mount does.

19
00:01:09.300 --> 00:01:16.560
The mount function renders a component or mounts a component, but it also goes ahead and mounts all

20
00:01:16.560 --> 00:01:17.610
of its children.

21
00:01:18.000 --> 00:01:21.750
And if the children has children, it's going to mount all of those as well.

22
00:01:22.440 --> 00:01:27.150
So it's trying to simulate the component, the way it's supposed to be used in the real world, in the

23
00:01:27.150 --> 00:01:27.750
browser.

24
00:01:28.110 --> 00:01:36.300
So what's actually going on here is our main NAV is rendering a sub nav right here on line 43 and our

25
00:01:36.300 --> 00:01:41.190
sub nav component is the one that is rendering a awesome icon component.

26
00:01:41.580 --> 00:01:47.460
So because the mount function is rendering the entire component hierarchy, the entire component tree,

27
00:01:47.550 --> 00:01:53.850
which means everything main nav has and all of its children and all of its grandchildren and great grandchildren,

28
00:01:54.030 --> 00:01:59.130
no matter how many level down levels down it goes, the mount function will render the entire thing

29
00:01:59.130 --> 00:02:00.870
using the original component code.

30
00:02:01.260 --> 00:02:06.840
When we are rendering the sub nav, we are rendering the global font awesome icon registered component

31
00:02:07.080 --> 00:02:10.560
and thus our tests once again say, I don't know what that is.

32
00:02:11.190 --> 00:02:15.390
So that brings up an interesting question, which is how do we solve this problem?

33
00:02:15.540 --> 00:02:20.160
And the first thought that you may have is, well, can we use the strategy from the previous lesson?

34
00:02:20.340 --> 00:02:23.940
Can we stub out the font awesome icon component?

35
00:02:24.570 --> 00:02:30.930
And the answer is, I'm sure we can, but I would ask whether that is the best solution, because imagine

36
00:02:30.930 --> 00:02:33.300
that we use the code here to stub out the font.

37
00:02:33.330 --> 00:02:38.070
Awesome icon and other developer may look at this file and say okay, you're stubbing out this font

38
00:02:38.070 --> 00:02:41.610
awesome icon, but I'm not seeing it anywhere here in this May.

39
00:02:41.610 --> 00:02:43.200
Now where is it coming from?

40
00:02:43.470 --> 00:02:47.100
And of course, they could do some extra digging and discover in a sub nav component.

41
00:02:47.280 --> 00:02:52.140
But imagine that our main nav is rendering six or seven different child components.

42
00:02:52.140 --> 00:02:52.380
Right?

43
00:02:52.560 --> 00:02:56.730
At that point, you'd have to do a lot more digging to discover where that error is coming from.

44
00:02:56.910 --> 00:03:01.410
And I'd argue we don't really care, at least for the purposes of this test right now.

45
00:03:01.590 --> 00:03:07.680
We don't really care about the sub nav component and what its internal details are.

46
00:03:07.800 --> 00:03:10.890
And when I say internal details, I mean what is its template?

47
00:03:11.190 --> 00:03:16.650
We care that our main NAV renders a component called sub nav right here because there is some conditional

48
00:03:16.650 --> 00:03:17.610
logic attached to it.

49
00:03:17.820 --> 00:03:21.660
But we don't care about the details of what sub nav includes.

50
00:03:21.840 --> 00:03:22.200
Right.

51
00:03:22.620 --> 00:03:29.100
So I would argue that it'd be great if our tests didn't care at all about the fun awesome icon and didn't

52
00:03:29.100 --> 00:03:32.130
care at all about what the sub nav was doing.

53
00:03:32.940 --> 00:03:37.980
So what we can say is, well, could we stub out the sub nav component instead?

54
00:03:38.550 --> 00:03:38.910
Right.

55
00:03:38.920 --> 00:03:39.990
Would that work?

56
00:03:40.320 --> 00:03:45.420
And I would argue it would, but it would be a little bit more work for us to manually have to.

57
00:03:45.480 --> 00:03:51.150
Hard code that object that says global subs find the sub nav component and stub it out.

58
00:03:51.510 --> 00:03:57.510
And because this is such a common kind of test, the view test util library gives us a second function

59
00:03:57.510 --> 00:03:58.800
called shallow mount.

60
00:03:59.010 --> 00:04:04.830
And what shallow mount does is it automatically stubs out all of your child components.

61
00:04:05.490 --> 00:04:11.100
So if we use the shallow mount function and we mount a main nav, it's going to go through this code

62
00:04:11.100 --> 00:04:15.720
right here on the left and it's going to say, Oh, you have another component being used here, sub

63
00:04:15.720 --> 00:04:19.650
nav, I'm going to automatically replace it with something fake.

64
00:04:19.920 --> 00:04:26.250
And if we have six other child components, whatever they are, it's similarly going to do that as well.

65
00:04:26.430 --> 00:04:30.750
And we don't have to explicitly write out those component names and we don't have to come up with that

66
00:04:30.750 --> 00:04:32.220
complex configuration object.

67
00:04:32.340 --> 00:04:37.410
We can automatically have view and the test details stub them out for us.

68
00:04:38.100 --> 00:04:42.330
So just very quickly, I want to talk about the advantages and the disadvantages of that approach.

69
00:04:42.630 --> 00:04:48.030
The advantages are hopefully there are apparent by now is that we decouple or separate the parent component

70
00:04:48.030 --> 00:04:53.460
from all of its children, which means that mistakes or errors or warnings that happen in the children

71
00:04:53.610 --> 00:04:55.830
will not bubble up to the parent.

72
00:04:56.040 --> 00:04:57.690
In this case, this is a perfect example.

73
00:04:57.720 --> 00:04:59.690
We're seeing a warning here that's not actually.

74
00:04:59.820 --> 00:05:04.380
Coming from May nav, it's coming from sub nav and that's a hard issue to debug.

75
00:05:04.620 --> 00:05:07.440
And it gets even more complicated as our component grows.

76
00:05:07.770 --> 00:05:13.470
If we simply stub out all of our child components, we create that separation and we can test may NAV

77
00:05:13.470 --> 00:05:19.260
in a more unit test perspective, just focused and isolated on just this component without caring about

78
00:05:19.260 --> 00:05:23.730
all of these other components that it needs to render and their internal details.

79
00:05:24.420 --> 00:05:29.400
The disadvantage of this approach, because you're going to hear multiple opinions, is that we are

80
00:05:29.670 --> 00:05:32.910
testing this component in a way that's not reflective of the real world.

81
00:05:33.120 --> 00:05:34.290
In the real world.

82
00:05:34.320 --> 00:05:39.420
The main NAV component is going to render the sub nav component for the user and now we are replacing

83
00:05:39.420 --> 00:05:44.220
sub nav with something fake a stub, a not real version of that thing.

84
00:05:44.220 --> 00:05:44.490
Right.

85
00:05:44.700 --> 00:05:49.170
So it could be that our tests are testing something that isn't reflective of the real world and our

86
00:05:49.170 --> 00:05:54.390
tests may pass, but in the real world, that thing, that functionality, that feature may still be

87
00:05:54.390 --> 00:06:00.090
breaking because we're not testing all of these pieces as they work in combination in tandem with one

88
00:06:00.090 --> 00:06:00.390
another.

89
00:06:00.540 --> 00:06:02.100
We have split them up.

90
00:06:02.100 --> 00:06:07.020
We have isolated them so we can test may now by itself so that our strengths and weaknesses to this

91
00:06:07.020 --> 00:06:10.650
approach and I do want to make sure you are aware of both them so you can speak about it.

92
00:06:10.650 --> 00:06:15.450
Whenever somebody asks you about your testing preferences or why you followed a certain approach in

93
00:06:15.450 --> 00:06:16.230
a code change.

94
00:06:16.890 --> 00:06:22.980
So for now, what I propose we do is indeed replace our mount function calls here with shallow mount,

95
00:06:23.160 --> 00:06:27.810
and that again is going to render all of this code, but not the sub nav explicitly.

96
00:06:27.810 --> 00:06:30.450
It's going to stub it out and that will make this warning go away.

97
00:06:30.690 --> 00:06:35.580
So right here, instead of importing mount, I'm going to import an alternative function called Shallow

98
00:06:35.580 --> 00:06:38.220
Mount and it's going to work the exact same way.

99
00:06:38.370 --> 00:06:41.760
Instead of writing mount here, I'm simply going to write shallow mount.

100
00:06:41.880 --> 00:06:43.710
All right, lowercase s capital.

101
00:06:43.710 --> 00:06:47.490
And we similarly give it a component to mount.

102
00:06:47.490 --> 00:06:48.540
It's going to do the same thing.

103
00:06:48.780 --> 00:06:50.760
So I'm going to replace Mount here.

104
00:06:50.970 --> 00:06:54.270
I'm going to replace Mount here anywhere where we are using Mount.

105
00:06:54.540 --> 00:06:59.400
And by the way, in the real world, I have seen it sync a single test file where developers combine

106
00:06:59.610 --> 00:07:00.480
both of these options.

107
00:07:00.480 --> 00:07:00.660
Right.

108
00:07:00.660 --> 00:07:03.480
Depending on what you're searching for, depending on what you're testing for.

109
00:07:03.750 --> 00:07:05.070
It's totally fine to combine.

110
00:07:05.190 --> 00:07:10.440
You have to think about really what you care about and what tests give you comfort that the software

111
00:07:10.440 --> 00:07:12.540
is working as it's supposed to.

112
00:07:13.170 --> 00:07:16.800
So for the purposes of what we're testing here, if we look here, we care about the company name being

113
00:07:16.800 --> 00:07:23.220
displayed, the menu items, the user being logged out, being shown, the log in button and the profile

114
00:07:23.220 --> 00:07:23.490
image.

115
00:07:23.610 --> 00:07:26.160
None of these tests care about the sub nav, right?

116
00:07:26.190 --> 00:07:27.630
None of them right now care about the sub.

117
00:07:27.960 --> 00:07:29.160
So I'm totally fine.

118
00:07:29.160 --> 00:07:31.860
Shallow, mounting it to not worry about the sub.

119
00:07:31.860 --> 00:07:36.240
Now, for the purposes of these tests, if there is another test where I do care about the sub nav,

120
00:07:36.420 --> 00:07:41.210
then in that test I can fully mount may nav and then stub out my font.

121
00:07:41.250 --> 00:07:43.320
Awesome icon in that test.

122
00:07:43.530 --> 00:07:43.860
Right.

123
00:07:43.980 --> 00:07:48.450
And that will communicate to a reader that that concept matters for that test specifically.

124
00:07:48.750 --> 00:07:51.180
So I have replaced all of my calls here.

125
00:07:51.180 --> 00:07:56.790
So if I save this file and we rerun all of our tests, we're going to see everything passes right here,

126
00:07:56.790 --> 00:08:00.570
and we're going to see a fully passing test suite with no warnings.

127
00:08:00.900 --> 00:08:07.110
One final detail to close this lesson off is shallow amount may actually lead to faster tests because

128
00:08:07.110 --> 00:08:12.720
instead of having to render the entire component tree or hierarchy the view test, utils knows to just

129
00:08:12.720 --> 00:08:15.690
swap a component when it sees it with something else.

130
00:08:16.110 --> 00:08:19.530
Right now our components are pretty small and lightweight, so you're probably not going to see that

131
00:08:19.530 --> 00:08:20.940
tangible difference play out.

132
00:08:21.150 --> 00:08:22.710
But it sometimes does make a difference.

133
00:08:22.710 --> 00:08:27.570
The less you render, obviously, the the more that you render just one component rather than all of

134
00:08:27.570 --> 00:08:32.580
its children and grandchildren, the smaller the scope, and thus, probably the quicker that the test

135
00:08:32.580 --> 00:08:34.710
utils can mount that component and test it.

136
00:08:34.710 --> 00:08:34.920
Right.

137
00:08:34.950 --> 00:08:36.000
That's another thing worth noting.

138
00:08:36.690 --> 00:08:38.370
That's really all there is to cover in this lesson.

139
00:08:38.550 --> 00:08:43.880
We talked about the differences between the mount and the shallow mount functions from our view test

140
00:08:43.890 --> 00:08:44.610
utils library.

141
00:08:44.790 --> 00:08:50.310
The mount function fully renders the component tree, all of its children and all of their specific

142
00:08:50.310 --> 00:08:54.840
implementation details, including their actual templates, right, and all of their view configuration

143
00:08:54.840 --> 00:08:55.710
objects, etc..

144
00:08:55.950 --> 00:09:01.500
In comparison, the shallow mount function only mounts the component that you care about that you pass

145
00:09:01.500 --> 00:09:06.660
in as the first argument, and whenever it sees a child component being rendered, it swaps it out.

146
00:09:06.660 --> 00:09:11.760
It replaces it with something else, not the real world implementation, but a substitute.

147
00:09:11.910 --> 00:09:14.070
And we call that substitute the setup.

148
00:09:14.430 --> 00:09:14.760
All right.

149
00:09:14.880 --> 00:09:16.590
That's all there is to cover in this lesson.

150
00:09:16.590 --> 00:09:18.060
So I will see you in the next one.
