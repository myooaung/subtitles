WEBVTT
1
00:00:00.660 --> 00:00:01.460
Okay.

2
00:00:01.460 --> 00:00:03.890
So I like what we added in the previous lesson.

3
00:00:04.190 --> 00:00:09.350
But there are some limitations to using an is primary prop with a value of true or false.

4
00:00:09.680 --> 00:00:12.740
For one, it's only limited to two possible values.

5
00:00:12.980 --> 00:00:16.890
So imagine that our action button decides to have a third style.

6
00:00:16.910 --> 00:00:22.200
It'll have a primary, a secondary, and potentially a third tertiary style of.

7
00:00:22.370 --> 00:00:22.850
Yes.

8
00:00:23.180 --> 00:00:28.670
Well, now our approach will no longer work because is primary can only provide either value a true

9
00:00:28.670 --> 00:00:29.240
or a false.

10
00:00:29.450 --> 00:00:33.260
And it has no way of indicating a third value, a tertiary value.

11
00:00:33.560 --> 00:00:38.390
So I'm curious if we can try a different design and we'll do that in this lesson.

12
00:00:38.720 --> 00:00:44.360
So once again, let's start with what I call wish driven development, which means writing out the code

13
00:00:44.360 --> 00:00:45.620
that we wish we had.

14
00:00:46.040 --> 00:00:49.010
So imagine instead of passing in and is primary prop.

15
00:00:49.340 --> 00:00:51.320
Imagine I deleted all of this right here.

16
00:00:51.530 --> 00:00:55.370
Imagine we had a single prop here called type.

17
00:00:56.270 --> 00:00:58.550
And for tight we can pass in a string.

18
00:00:58.550 --> 00:01:02.420
And that string would specify the type of action button that we would want to render.

19
00:01:02.690 --> 00:01:08.570
For example, I might render a primary action button, and if I wanted a secondary action button, I

20
00:01:08.570 --> 00:01:11.090
would provide a type of secondary.

21
00:01:11.090 --> 00:01:15.800
And if I wanted a third type of action button, I would provide a type of tertiary.

22
00:01:16.010 --> 00:01:21.800
Or in another world where we have, for example, not types like primary and secondary, but types like

23
00:01:21.920 --> 00:01:25.280
success button or warning button or info button.

24
00:01:25.910 --> 00:01:31.070
We get several similarly passed in a type with a string specifying the type of button that we would

25
00:01:31.070 --> 00:01:31.700
like to render.

26
00:01:32.120 --> 00:01:33.770
So a couple of things to note here.

27
00:01:33.770 --> 00:01:40.370
If I were to decide to use a prop like type notice here that our value is a string and that string is

28
00:01:40.370 --> 00:01:43.790
supposed to be a string, either primary or secondary or whatever we want.

29
00:01:44.060 --> 00:01:47.180
So we no longer need to use the V bind direct.

30
00:01:47.180 --> 00:01:53.210
We do not need to provide that colon syntax or use the V bind keyword literally because for a string,

31
00:01:53.960 --> 00:01:58.280
a string being passed to a prop as a value, we do not need that dynamic binding.

32
00:01:58.280 --> 00:02:00.170
We can just pass it in like so.

33
00:02:00.950 --> 00:02:04.040
So that takes care of it on our parent component level.

34
00:02:04.040 --> 00:02:08.390
But obviously we need to update our action bind component to react to this change.

35
00:02:08.630 --> 00:02:13.160
And the reason I think this this approach that we're going to follow is going to be a little bit better

36
00:02:13.310 --> 00:02:16.970
is because it's going to allow us to clean up some of our action button code.

37
00:02:17.360 --> 00:02:19.430
So let's begin here in action button.

38
00:02:19.430 --> 00:02:25.070
We now need to modify this props array to tell action button what props it can expect it's no longer

39
00:02:25.070 --> 00:02:30.980
going to receive and is primary prop, but it will receive a type prop, the exact name we chose right

40
00:02:30.980 --> 00:02:31.220
here.

41
00:02:31.610 --> 00:02:36.740
And now you'll notice we have our data method and we'll have our computed property.

42
00:02:37.100 --> 00:02:43.010
Well, as I mentioned in the previous lesson, we can use our props in either the body of the data object

43
00:02:43.190 --> 00:02:45.290
or within our computed properties.

44
00:02:45.500 --> 00:02:50.330
And the way that we're setting things up now is a little bit roundabout because we're setting a primary

45
00:02:50.330 --> 00:02:56.630
data key based on the value of the prop, and then we're using that data key of primary to set this

46
00:02:56.630 --> 00:02:58.850
configuration object for our success.

47
00:02:59.210 --> 00:03:04.070
But there's nothing stopping us from using any prop within our computed properties.

48
00:03:04.250 --> 00:03:09.650
And I would argue we don't actually need anything from data because we'll be able to reference this,

49
00:03:09.650 --> 00:03:14.570
that type within our computed property and figure out the kind of styles we should apply.

50
00:03:14.870 --> 00:03:16.250
Let me show you how this is going to work.

51
00:03:16.250 --> 00:03:19.670
So the first thing I'm going to do is remove data entirely.

52
00:03:20.990 --> 00:03:25.970
And that, of course, would break computed as it currently stands because this type primary does not

53
00:03:25.970 --> 00:03:26.390
exist.

54
00:03:26.660 --> 00:03:33.500
But instead of using this that primary, we can reference this that type, which is not a boolean value,

55
00:03:33.500 --> 00:03:34.400
it is a string.

56
00:03:34.550 --> 00:03:39.650
However, we can turn it into a boolean value by doing a simple equality comparison.

57
00:03:39.920 --> 00:03:47.420
So if I compare the value of type with a string like primary, then I'm going to evaluate here to a

58
00:03:47.480 --> 00:03:48.140
boolean.

59
00:03:48.470 --> 00:03:48.920
Okay?

60
00:03:49.280 --> 00:03:54.920
So what I'm going to do here, you might think that I want to add a comparison check here of this that

61
00:03:54.950 --> 00:03:59.510
type not equal to primary, but I'm actually going to do a different approach and I'll talk to you a

62
00:03:59.510 --> 00:04:01.220
little bit about why I think it's a better approach.

63
00:04:01.220 --> 00:04:01.730
In a second.

64
00:04:02.090 --> 00:04:03.890
I'm going to write out this that type.

65
00:04:05.290 --> 00:04:07.270
Equals secondary.

66
00:04:08.450 --> 00:04:14.060
So I'm going to assume there's one of two values that the action button can be provided for the type

67
00:04:14.240 --> 00:04:14.660
prop.

68
00:04:14.870 --> 00:04:16.760
It can be either primary or secondary.

69
00:04:17.090 --> 00:04:22.790
But the beautiful part about this design is if we want to add a third type like tertiary or error or

70
00:04:22.790 --> 00:04:27.530
whatever, we can simply add it on as another key in this button class with its own check.

71
00:04:27.920 --> 00:04:31.910
So this approach will actually work and let's talk about how it would work.

72
00:04:32.210 --> 00:04:37.220
So in this scenario, on the left hand side, we're passing in a type prop with a value of primary.

73
00:04:37.520 --> 00:04:44.870
That means view is now going to calculate the computed property based on the value of the type prop

74
00:04:45.020 --> 00:04:49.280
no longer the primary data key, just the type prop, which is totally fine.

75
00:04:49.460 --> 00:04:55.460
And if the value of the prop changes by the way, in other words, if the parent component of main now

76
00:04:55.610 --> 00:05:01.760
somehow swaps this value and passes in something different, then the computed property would re-evaluate

77
00:05:01.760 --> 00:05:05.960
or rerun the same way it does with your data properties.

78
00:05:06.320 --> 00:05:11.150
So in this scenario, we're passing in a type of primary, which means this is going to value to true

79
00:05:12.020 --> 00:05:13.610
and this is going to go to false.

80
00:05:13.850 --> 00:05:15.200
And that's exactly what we want.

81
00:05:15.410 --> 00:05:20.300
We're going to apply the primary season class if the type is primary.

82
00:05:20.630 --> 00:05:25.820
Conversely, if the user passes in a string of secondary here, these two will be flipped around.

83
00:05:25.850 --> 00:05:30.230
This is going to value to false and the string secondary will be equal to secondary.

84
00:05:30.240 --> 00:05:31.490
So this will add value to true.

85
00:05:31.790 --> 00:05:36.710
So now we're going to have the secondary styles applied instead, and we can scale this if we want to

86
00:05:36.710 --> 00:05:40.190
add a third style or a third just as class down the road.

87
00:05:40.520 --> 00:05:43.450
So let me remove these comments and we'll take a look at this in our browser.

88
00:05:43.460 --> 00:05:45.740
So we're going to start off with our type of primary.

89
00:05:46.070 --> 00:05:50.630
And just as we expect when I navigate that back to my browser, let me refresh the page.

90
00:05:50.930 --> 00:05:52.940
We're going to see our primary star right here.

91
00:05:53.690 --> 00:05:59.540
If I click on my action button component in my view DevTools, you'll see we are passing in a prop of

92
00:06:00.140 --> 00:06:02.480
type with a value of primary.

93
00:06:02.570 --> 00:06:07.730
We no longer have any data on an action by any component, but we are still using the computed properties

94
00:06:07.730 --> 00:06:12.680
to calculate this JavaScript object that's applied to our button.

95
00:06:12.890 --> 00:06:15.800
Once again, why are we using computed here instead of data?

96
00:06:16.010 --> 00:06:19.280
Well, because computed is intended for derived values.

97
00:06:19.280 --> 00:06:24.710
And just because where our our data source is different now, our data source is our prop, it doesn't

98
00:06:24.710 --> 00:06:30.680
change the core reason for why computed properties exist, which is to make derived data data that is

99
00:06:30.680 --> 00:06:32.660
based off another piece of data.

100
00:06:32.900 --> 00:06:36.890
Our core independent data here is this type prop of primary.

101
00:06:36.890 --> 00:06:39.050
It exists separately from everything else.

102
00:06:39.260 --> 00:06:45.470
In comparison, this button class computed property is dependent on what type is so it is computed.

103
00:06:45.470 --> 00:06:46.280
It is derived.

104
00:06:46.430 --> 00:06:51.380
Therefore, it makes sense to put this logic in the computed properties of the action button component.

105
00:06:52.100 --> 00:06:53.960
So this works exactly as you might expect.

106
00:06:54.290 --> 00:07:00.620
And then if I go back to my browser or my code editor rather, and I change this to secondary, make

107
00:07:00.620 --> 00:07:02.480
sure to spell that correctly all lowercase.

108
00:07:02.810 --> 00:07:06.320
And if I look at this page now, we're going to have the secondary style.

109
00:07:06.320 --> 00:07:06.920
That's great.

110
00:07:07.160 --> 00:07:11.810
And of course, action button will have a different value for the type prop, which will cause a different

111
00:07:11.810 --> 00:07:16.880
computed property of button class, which will apply a different case class of secondary, which will

112
00:07:16.880 --> 00:07:18.290
lead us to this button version.

113
00:07:18.590 --> 00:07:18.950
All right.

114
00:07:19.190 --> 00:07:23.270
So this is, I think, a little bit of a cleaner approach because we now don't have a data property,

115
00:07:23.630 --> 00:07:25.280
but it's the same principle in action, right?

116
00:07:25.280 --> 00:07:32.000
We're passing in some kind of data or input from our parent component of main NAV to our child component

117
00:07:32.000 --> 00:07:32.750
at action button.

118
00:07:32.900 --> 00:07:37.910
Whenever you need to pass that kind of data or information from the parent to the child, usually to

119
00:07:37.910 --> 00:07:43.340
customize how the child works, either looks or works or what it renders for those types of use cases,

120
00:07:43.340 --> 00:07:44.600
we use props.

121
00:07:44.840 --> 00:07:45.140
All right.

122
00:07:45.350 --> 00:07:47.000
That's all there is to cover in this lesson.

123
00:07:47.000 --> 00:07:48.440
So I will see you in the next one.
