WEBVTT
1
00:00:00.520 --> 00:00:01.240
Okay.

2
00:00:01.240 --> 00:00:07.420
So let's finally address the S lynch violations that have been within the action button component since

3
00:00:07.420 --> 00:00:10.870
we declared this perhaps key on our view configuration object.

4
00:00:10.870 --> 00:00:16.540
We have this array here where we declare the props that action button expects to receive.

5
00:00:16.660 --> 00:00:18.760
In this case, it's going to be text and type.

6
00:00:19.000 --> 00:00:22.570
And if I hover my mouse over either of these strings, we'll see.

7
00:00:22.570 --> 00:00:23.830
This s lint description.

8
00:00:23.830 --> 00:00:26.680
Prop text should define at least its type.

9
00:00:26.890 --> 00:00:28.390
That's not the best description.

10
00:00:28.390 --> 00:00:31.720
But if you go and click into the link, you'll see a more detailed rundown.

11
00:00:32.080 --> 00:00:36.970
Basically, what s lint is telling us is that there's a better way that we can declare our props.

12
00:00:37.750 --> 00:00:42.820
So if you think about it, all that we're telling viewers right now is that we're going to receive two

13
00:00:42.820 --> 00:00:48.490
props, text and type, but we can be a lot more explicit in telling view what to expect.

14
00:00:48.700 --> 00:00:53.500
For example, we can tell view the data type of these props, right?

15
00:00:53.500 --> 00:00:54.640
What what are they going to be?

16
00:00:54.640 --> 00:00:57.040
Are they going to be a string or a number or a boolean?

17
00:00:57.190 --> 00:00:58.720
We haven't told that to view yet.

18
00:00:58.720 --> 00:01:00.340
We just told them the prop names.

19
00:01:00.730 --> 00:01:06.280
Similarly, we can tell view whether a prop is required or optional.

20
00:01:06.430 --> 00:01:12.280
In other words, whether the parent component needs to give a value for that prop or whether it's arbitrary

21
00:01:12.280 --> 00:01:13.390
and not needed.

22
00:01:13.480 --> 00:01:13.750
Right.

23
00:01:13.750 --> 00:01:18.670
If it's something that the component doesn't need to work but can benefit from, we can make it optional.

24
00:01:19.420 --> 00:01:25.000
And finally, we can also configure additional details like a fallback value for a prop.

25
00:01:25.240 --> 00:01:32.530
So if a parent component does not provide a prop value, we can provide a default to fall back to or

26
00:01:32.530 --> 00:01:34.450
to rely on in the case.

27
00:01:34.450 --> 00:01:36.640
The the parent component does not give us the value.

28
00:01:36.940 --> 00:01:42.190
So there is a syntax that we can use here instead of an array that is going to allow us to set up all

29
00:01:42.190 --> 00:01:46.450
of that additional configuration for props, which is of course going to be better for view because

30
00:01:46.450 --> 00:01:51.670
it has more information to work with and it can alert you of certain violations in your app.

31
00:01:51.670 --> 00:01:56.140
For example, it can tell you, hey, this prop is a string, but you're giving me a number.

32
00:01:56.140 --> 00:01:57.310
That's a problem, right?

33
00:01:57.520 --> 00:02:02.770
Or alternatively, it can say this prop is required, but you're not giving me a value from the parent,

34
00:02:02.770 --> 00:02:03.040
right?

35
00:02:03.040 --> 00:02:07.150
So the more validation that we can give you to double check, the better.

36
00:02:07.330 --> 00:02:10.450
And this is kind of the simplest way, but there's a better way that we can do it.

37
00:02:10.690 --> 00:02:14.650
So instead of an array here, we're instead going to declare an object.

38
00:02:14.650 --> 00:02:18.910
So I'm going to have placed this object here, provide my comma here, and break it up.

39
00:02:19.660 --> 00:02:25.780
The way this object works is that our properties or our keys are going to be our props, right?

40
00:02:26.020 --> 00:02:30.070
So my first prop that I want to target is text, right?

41
00:02:30.070 --> 00:02:35.350
So text is going to be my first prop and the value for each prop is going to be its own object.

42
00:02:35.350 --> 00:02:37.210
So here I'm going to add another nested object.

43
00:02:37.390 --> 00:02:44.350
And you can think of this as the configuration object or the validation object for the text prop and

44
00:02:44.350 --> 00:02:45.550
only the text prop.

45
00:02:45.760 --> 00:02:51.420
Later on, what we're going to do is add a similar configuration object for our type prop.

46
00:02:51.430 --> 00:02:52.480
So let me go ahead and write that out.

47
00:02:52.480 --> 00:02:54.880
Right now, we're going to have type with its own object.

48
00:02:55.000 --> 00:02:58.540
So each prop is going to have its own nested object right here.

49
00:02:58.780 --> 00:02:59.860
So let's start with text.

50
00:03:00.580 --> 00:03:04.330
So the properties that we write inside this nested object are not up to us.

51
00:03:04.570 --> 00:03:09.040
They are they have to be written exactly as Vue expects them.

52
00:03:09.160 --> 00:03:10.870
So that view knows what we're working with.

53
00:03:11.110 --> 00:03:14.230
So the first property here that we can use is type.

54
00:03:15.100 --> 00:03:18.880
This is going to be a little bit confusing, I understand, because this property is called type, which

55
00:03:18.880 --> 00:03:21.730
is coincidentally the same name as our type prop.

56
00:03:21.880 --> 00:03:23.470
Don't get confused by the two.

57
00:03:23.470 --> 00:03:25.000
This is view's type.

58
00:03:25.180 --> 00:03:28.240
And of course what this specifies is the type of the prop.

59
00:03:28.480 --> 00:03:34.210
So our text prop is going to be a string so we can write here with the capital string.

60
00:03:34.450 --> 00:03:39.880
And the reason this works is because this is actually referencing JavaScript internal string object,

61
00:03:39.880 --> 00:03:40.960
its own implementation.

62
00:03:40.960 --> 00:03:43.840
So we can simply write the word string, no quotes.

63
00:03:43.840 --> 00:03:46.750
This is a reference to a core object in JavaScript.

64
00:03:47.050 --> 00:03:47.290
All right.

65
00:03:47.290 --> 00:03:50.170
So that's declaring the type of the text prop.

66
00:03:50.320 --> 00:03:56.920
In fact, we can copy this code right here to type as well, because the type of type is going to be

67
00:03:56.920 --> 00:03:57.340
string.

68
00:03:57.610 --> 00:03:57.910
All right.

69
00:03:57.910 --> 00:04:02.890
And just to clarify, when I when I'm talking about oops, when I'm talking about this type right here,

70
00:04:02.890 --> 00:04:06.070
I'm talking about this prop, which is coincidentally called type.

71
00:04:06.310 --> 00:04:10.510
And when I'm referencing this type right here, I'm talking about the JavaScript type of that prop.

72
00:04:10.720 --> 00:04:11.050
All right.

73
00:04:11.470 --> 00:04:14.080
So type is an example of one thing we can put in here.

74
00:04:14.080 --> 00:04:17.380
Another thing that we can put in here is a property called Required.

75
00:04:17.650 --> 00:04:23.860
And just like the name suggests, that tells you whether that property is required from the parent component.

76
00:04:24.160 --> 00:04:26.110
So for example, I can put true here.

77
00:04:27.180 --> 00:04:32.790
And that means that whenever a parent component renders action button anywhere in the app, the parent

78
00:04:32.790 --> 00:04:35.400
component must give a text prop.

79
00:04:35.610 --> 00:04:40.290
And if it doesn't do that, then Vue is going to output a warning in our chrome console.

80
00:04:40.560 --> 00:04:42.880
So for our text prop, we need that.

81
00:04:42.900 --> 00:04:47.730
It kind of makes sense to need that because we want some kind of text to display within our button.

82
00:04:47.820 --> 00:04:50.330
So let's make that required in comparison.

83
00:04:50.340 --> 00:04:53.120
Let's make our type for sorry.

84
00:04:53.180 --> 00:04:55.440
Let's make our type prop not required.

85
00:04:55.620 --> 00:04:58.620
So we're going to write the required property here and set it to false.

86
00:04:59.490 --> 00:05:01.500
So our type prop is not required.

87
00:05:01.800 --> 00:05:09.710
So what can we do if we make the type property not required and the user does not provide a value for

88
00:05:09.710 --> 00:05:09.750
it?

89
00:05:09.780 --> 00:05:10.910
How do we know which yes.

90
00:05:10.920 --> 00:05:11.640
Class to apply?

91
00:05:11.670 --> 00:05:17.760
Well, if I hover my mouse over here, we're going to see prop type requires default value to be set.

92
00:05:17.760 --> 00:05:20.930
So this is another example of Eastland helping us.

93
00:05:20.940 --> 00:05:25.170
It's saying if this is not required, can you give me a fallback value?

94
00:05:25.200 --> 00:05:31.260
Can you give me a default value to use just in case the parent component doesn't give me a type prop?

95
00:05:31.620 --> 00:05:36.720
So the way that we can specify a default value is by using the keyword default right here, the default

96
00:05:36.870 --> 00:05:37.440
property.

97
00:05:37.680 --> 00:05:41.580
And of course, this is going to be whatever you want the value of the type prop to be.

98
00:05:41.850 --> 00:05:44.610
In the case that the parent does not give it.

99
00:05:44.970 --> 00:05:48.120
So for example, here I can set a string of primary.

100
00:05:49.380 --> 00:05:51.450
So just you explain how this is going to work.

101
00:05:51.780 --> 00:05:55.230
If the parent component gives me a type prop.

102
00:05:55.560 --> 00:05:57.480
We're going to use its regular value.

103
00:05:57.510 --> 00:06:00.120
Whatever value the parent gives me, I'm going to use.

104
00:06:00.420 --> 00:06:08.070
But given that the prop is not required, if the parent component does not give me a type prop, then

105
00:06:08.250 --> 00:06:10.980
you will say, okay, I'm going to fall back to the default.

106
00:06:11.010 --> 00:06:15.620
I'm going to substitute what you told me to use in the case that I don't have a type prop.

107
00:06:15.630 --> 00:06:17.580
I'm going to use this primary string right here.

108
00:06:17.910 --> 00:06:19.500
So if I go back to my browser.

109
00:06:20.610 --> 00:06:22.440
Everything is going to work as expected.

110
00:06:22.620 --> 00:06:25.080
And if I refresh the page, we're going to see right here.

111
00:06:26.050 --> 00:06:30.070
Now we are actually literally feeding in the type of primary, so we're getting our primary button.

112
00:06:30.250 --> 00:06:36.880
But now, technically speaking, we actually do not need to provide a type right here in our main NAV

113
00:06:36.880 --> 00:06:37.510
component.

114
00:06:37.900 --> 00:06:40.300
It doesn't necessarily hurt because we're being explicit.

115
00:06:40.300 --> 00:06:45.820
But just to show you, if we get rid of this line right here, we are not passing in a type to action

116
00:06:45.840 --> 00:06:46.060
one.

117
00:06:46.180 --> 00:06:51.610
But that's not a problem because action but knows to use the primary style by default.

118
00:06:51.970 --> 00:06:55.680
However, we do need to provide a text prop at all times.

119
00:06:55.840 --> 00:06:57.580
So we are going to still keep this right here.

120
00:06:57.610 --> 00:07:03.370
So if I go back to my browser, let me refresh just for safety's sake and I go to my view devtools.

121
00:07:03.550 --> 00:07:09.550
You can see that the type is set to primary, even though we took that prop away from the main nav component.

122
00:07:09.730 --> 00:07:14.560
And that's because view is going to fall back to that default value that we assign.

123
00:07:14.560 --> 00:07:17.230
And if I go to my console, we should see no errors right here.

124
00:07:17.410 --> 00:07:21.970
Let me try to trigger an error right here by removing our text prop as well.

125
00:07:21.970 --> 00:07:25.480
So I'm going to remove it temporarily and go back to my browser.

126
00:07:25.630 --> 00:07:30.350
And now you're going to see this view warning pop up missing required prop text.

127
00:07:30.350 --> 00:07:34.870
And it's going to tell you that action button that's being rendered within the main nav component,

128
00:07:34.870 --> 00:07:36.130
within the app component.

129
00:07:36.340 --> 00:07:41.560
So these are the helpful warnings that this is going to give you that we enabled using that more complex

130
00:07:41.560 --> 00:07:44.330
prop configuration and validation in the action.

131
00:07:44.350 --> 00:07:47.140
One component view is going to tell us which props were missing.

132
00:07:47.320 --> 00:07:52.360
It's also going to warn us if we're using the wrong data, types of text somehow ends up being something

133
00:07:52.360 --> 00:07:52.690
different.

134
00:07:52.720 --> 00:07:54.550
Let me try that just to show you again.

135
00:07:54.980 --> 00:07:56.200
I'm going to bring it back.

136
00:07:56.200 --> 00:08:00.340
So I'm going to bring back the texting, but I'm going to use my V bind syntax and I'm going to give

137
00:08:00.340 --> 00:08:01.540
it a value like false.

138
00:08:01.780 --> 00:08:03.030
You do not have to follow along.

139
00:08:03.040 --> 00:08:05.530
This is just for example, if I go back here.

140
00:08:06.680 --> 00:08:11.120
And I refresh here we're going to see now invalid prop type check failed.

141
00:08:11.330 --> 00:08:17.000
You told me to expect a string, but given that we use the V binds index, we're now getting a boolean

142
00:08:17.000 --> 00:08:18.020
with the value false.

143
00:08:18.230 --> 00:08:19.790
So that's another helpful check.

144
00:08:19.790 --> 00:08:24.260
The view is going to tell us we're giving the wrong data type for a prop and that's something that can

145
00:08:24.260 --> 00:08:30.110
actually happen, especially when data is flowing down, props down a very long chain, like from parent

146
00:08:30.110 --> 00:08:32.150
to child and from child to grandchild.

147
00:08:32.300 --> 00:08:36.860
Or if you're getting these values from something like an API, so they're arriving dynamically in the

148
00:08:36.860 --> 00:08:39.470
app and then cascading down a component tree.

149
00:08:39.560 --> 00:08:41.270
It's possible to have that mismatch.

150
00:08:41.270 --> 00:08:46.340
Maybe your server will return a boolean, while a component may expect a string.

151
00:08:46.490 --> 00:08:51.080
These checks are really helpful and they would not be possible without this validation that we added

152
00:08:51.080 --> 00:08:51.740
in this lesson.

153
00:08:52.040 --> 00:08:57.470
So with that said, let me return back to my normal functioning state of having a text prop set to a

154
00:08:57.470 --> 00:08:57.830
string.

155
00:08:57.830 --> 00:09:01.460
We're going to leave out the type for now, and that is all there is to cover in this lesson.
