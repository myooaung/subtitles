WEBVTT
1
00:00:00.510 --> 00:00:01.530
All right.

2
00:00:01.530 --> 00:00:06.600
So in the previous lesson, we defined our new include job by degree getter.

3
00:00:06.870 --> 00:00:12.840
And the next step, of course, is to use this getter in our filter jobs getter, because this is the

4
00:00:12.840 --> 00:00:19.080
getter that ultimately iterates over all of the jobs and uses the helper getter functions to determine

5
00:00:19.080 --> 00:00:25.080
whether or not a job should be included in the filter jobs array, which eventually becomes the complete

6
00:00:25.080 --> 00:00:27.330
collection of filter jobs on the right hand side.

7
00:00:27.780 --> 00:00:33.210
And so what I ultimately want to do here is to add another filter method call to the array that is being

8
00:00:33.210 --> 00:00:36.300
produced here and use my new getter to filter it.

9
00:00:36.690 --> 00:00:39.810
So before we get there, of course I want to write a corresponding test.

10
00:00:40.080 --> 00:00:44.820
And luckily we already have that basic test structure set up right here in filter jobs.

11
00:00:45.090 --> 00:00:47.610
So here in my getters, that test, that's false.

12
00:00:47.730 --> 00:00:51.360
We're just going to update this test right here to now include my new getter.

13
00:00:51.720 --> 00:00:53.610
So here I'm going to start with the description.

14
00:00:53.880 --> 00:00:59.190
It now is going to filter jobs by organization, job type and degree.

15
00:01:00.610 --> 00:01:04.840
And you can see here the set up we're doing here is we're creating an object of mock getters.

16
00:01:05.110 --> 00:01:09.080
The reason we're doing this is because I don't want to test the individual getters.

17
00:01:09.100 --> 00:01:14.560
These three that I have right here in my getter for filter jobs, because that creates a whole bunch

18
00:01:14.560 --> 00:01:17.110
of branching logic for what could happen.

19
00:01:17.110 --> 00:01:23.110
And that logic is already tested in my individual tests for these getters above in this file.

20
00:01:23.440 --> 00:01:28.810
So the only responsibility of filter jobs is to really talk to these getters and use them.

21
00:01:28.810 --> 00:01:30.310
And that's what I want to validate.

22
00:01:30.490 --> 00:01:36.400
And by using just mock functions here, I can track what has been invoked and how many times and with

23
00:01:36.400 --> 00:01:37.540
what arguments, etc..

24
00:01:37.900 --> 00:01:42.970
So what I'm going to do here is create a new just mock function to replace the real world getter that

25
00:01:42.970 --> 00:01:45.100
I have called include job by degree.

26
00:01:45.520 --> 00:01:47.890
So right here I'm going to say include job by degree.

27
00:01:49.120 --> 00:01:54.270
And just like the two above, this is going to now be a just mock function by default.

28
00:01:54.280 --> 00:01:57.130
A just the mock function returns undefined.

29
00:01:57.130 --> 00:02:01.480
And that's not going to be good because I eventually need that getter when being used right here in

30
00:02:01.480 --> 00:02:03.400
the filter method to return a boolean.

31
00:02:03.610 --> 00:02:08.770
So I'm going to provide a mock return value and it's going to be the simple boolean of true.

32
00:02:09.190 --> 00:02:13.960
Then I'm going to include my new getter right here in this mock getters object include job by degree,

33
00:02:14.380 --> 00:02:16.630
and then most of the other logic should stay the same.

34
00:02:16.870 --> 00:02:22.270
So right here I'm creating a sample job and then I'm creating a sample array of jobs, in my view,

35
00:02:22.320 --> 00:02:22.930
extra state.

36
00:02:23.110 --> 00:02:28.960
So you can almost imagine it like are back and returns a single array of one job and we want to ensure

37
00:02:28.960 --> 00:02:33.880
that this job is going to pass through all of our getters as it flows through the filter jobs getter.

38
00:02:34.180 --> 00:02:40.030
So right here you can see we are invoking the filter jobs getter method that is going to accept the

39
00:02:40.030 --> 00:02:41.860
view text or state as the first argument.

40
00:02:42.040 --> 00:02:47.530
And then the second optional argument to a getter is always a collection of the existing getters.

41
00:02:47.800 --> 00:02:52.180
So in this scenario, instead of providing the real world getters, I'm providing this object right

42
00:02:52.180 --> 00:02:56.780
here, which has the three getters that my implementation will eventually utilize.

43
00:02:57.040 --> 00:03:01.720
But of course, instead of using the real world implementation right here, all I'm saying is these

44
00:03:01.720 --> 00:03:04.690
getters are basic, simple functions that will always return true.

45
00:03:04.990 --> 00:03:10.240
So right here as filter runs, for example, this getter I include job by organization is now going

46
00:03:10.240 --> 00:03:14.500
to be a just mock function that always returns true, which will allow the job to pass here.

47
00:03:14.740 --> 00:03:19.540
Same rules are going to apply for include job by job type and that's going to allow the job to flow

48
00:03:19.540 --> 00:03:20.620
through here, etc..

49
00:03:21.430 --> 00:03:26.530
So right here, we're checking at the very end that our final result or our final return value is going

50
00:03:26.530 --> 00:03:31.030
to be the array of the original job, which implies that this job that we created right here is going

51
00:03:31.030 --> 00:03:36.430
to pass all of our tests or all of our checks right here in the filter logic and down below.

52
00:03:36.430 --> 00:03:38.680
This is kind of the heart of the assertions that I care about.

53
00:03:38.860 --> 00:03:41.800
I am validating that each of my getters has been properly called.

54
00:03:42.100 --> 00:03:47.500
So right now everything is passing because we are indeed invoking these two getters respectively as

55
00:03:47.500 --> 00:03:48.550
we run through filter jobs.

56
00:03:48.790 --> 00:03:54.790
So what I want to add here as well is that I expect my included job by degree getter to also have been

57
00:03:54.790 --> 00:03:59.770
called and not just called in the sense of invoked, but called specifically with the job argument.

58
00:04:00.100 --> 00:04:00.370
Right.

59
00:04:00.370 --> 00:04:05.050
So I do not need an array of 100 jobs to verify that include job by degree has been called.

60
00:04:05.290 --> 00:04:10.660
Rather, I can come up with a simple scenario an array of just one job from the backend and therefore

61
00:04:10.660 --> 00:04:15.820
my include job by degree getter should still be invoked assuming that the job is going to be passed

62
00:04:15.820 --> 00:04:18.670
to it by the filter jobs getter as it's filtering.

63
00:04:18.970 --> 00:04:20.020
So I'm going to save this.

64
00:04:20.020 --> 00:04:25.510
And this of course, is going to fail because we are not indeed calling this getter right here.

65
00:04:25.510 --> 00:04:29.710
So you can see right here, expect include job by degree, that just mock function has not been called.

66
00:04:29.890 --> 00:04:32.560
So it's saying, hey, you've given me number of calls, zero.

67
00:04:32.890 --> 00:04:33.310
All right.

68
00:04:33.430 --> 00:04:38.140
So what I'm going to do here is take my array that I have after these two filter method calls.

69
00:04:38.380 --> 00:04:41.020
And of course, an array is still going to have a filter method.

70
00:04:41.230 --> 00:04:46.480
So on that around going to call filter, it's once again going to receive a job as an argument.

71
00:04:46.720 --> 00:04:51.850
And how do I determine whether I should or should not include this job in the final array of filter

72
00:04:51.850 --> 00:04:52.210
jobs?

73
00:04:52.420 --> 00:04:58.960
I'm going to rely on my getters, which I have available as the second argument to this getter itself

74
00:04:59.080 --> 00:05:00.700
right here, this parameter called Getters.

75
00:05:00.970 --> 00:05:02.770
So this is my full object of getters.

76
00:05:02.770 --> 00:05:07.060
And then on it I'm going to have my new include job by degree getter.

77
00:05:08.490 --> 00:05:12.810
And I'm going to invoke it and pass at the job that I'm currently iterating over in my field today,

78
00:05:12.930 --> 00:05:16.980
which is going to be the argument that has passed into here, and that is going to give me back a true

79
00:05:16.980 --> 00:05:20.610
in the real world, in our test world, it's not going to be this implementation.

80
00:05:20.610 --> 00:05:22.560
Of course, it's going to be this one right here.

81
00:05:23.010 --> 00:05:23.310
All right.

82
00:05:23.310 --> 00:05:25.260
So we're going to see if this test passes.

83
00:05:25.260 --> 00:05:27.900
My guess is it will not and I'll explain why in just a second.

84
00:05:28.140 --> 00:05:33.180
But you'll immediately see this violation that says property include job by degree does not exist on

85
00:05:33.180 --> 00:05:34.500
type include job getters.

86
00:05:34.830 --> 00:05:39.870
Remember what we did is provide an interface here called include job getters that specifies what the

87
00:05:39.870 --> 00:05:45.850
objects properties will be on this object that is passed in as the argument and this include job getters

88
00:05:45.870 --> 00:05:46.830
comes from right here.

89
00:05:47.670 --> 00:05:51.900
And the reason we set up a separate interface is because of that kind of chicken or the egg problem

90
00:05:52.050 --> 00:05:56.760
of having to reference this real getter object, but having to do so in the body of it itself.

91
00:05:57.000 --> 00:06:01.410
So what we decided is just to separate a separate interface for the actual getters we care about, and

92
00:06:01.410 --> 00:06:06.870
that's going to be the object type that we provide as the second argument for my filter job's getter

93
00:06:06.870 --> 00:06:07.200
below.

94
00:06:07.500 --> 00:06:12.420
So of course all we need to do here is say that object is now going to have an include job by degree

95
00:06:12.420 --> 00:06:12.840
method.

96
00:06:13.920 --> 00:06:14.250
Right.

97
00:06:14.490 --> 00:06:20.700
And that method is going to have a job parameter that is going to be a type job, and that boolean is

98
00:06:20.700 --> 00:06:24.390
that getter method on the second.

99
00:06:24.750 --> 00:06:28.360
On the second argument, the object will be a method that returns a boolean.

100
00:06:28.800 --> 00:06:32.790
It is really hard to sometimes capture all this in words, but I hope that the idea here makes sense.

101
00:06:33.030 --> 00:06:38.190
We're saying that this is going to be the object type or the object shape of this argument right here,

102
00:06:38.340 --> 00:06:43.890
which allows types to validate that include job by degree is a valid method name because we said it's

103
00:06:43.890 --> 00:06:45.420
going to be included right here.

104
00:06:45.810 --> 00:06:46.080
All right.

105
00:06:46.080 --> 00:06:48.840
So with that, we make all of our Typekit violations go away.

106
00:06:49.080 --> 00:06:54.510
All of our tests are passing, which means we are validating in our filter jobs test that we are correctly

107
00:06:54.510 --> 00:06:59.820
invoking the include job by degree getter and passing it the right argument of the job without actually

108
00:06:59.820 --> 00:07:01.500
relying on the real world getter.

109
00:07:01.620 --> 00:07:07.530
Rather, we are relying on this mock right here in line 113 in order to simply validate the interaction

110
00:07:07.530 --> 00:07:10.200
between these two units rather than test them fully.

111
00:07:10.470 --> 00:07:10.800
All right.

112
00:07:10.890 --> 00:07:16.620
We already have the tests for this logic, so I see no need to replicate those tests in filter jobs.

113
00:07:16.620 --> 00:07:20.640
Otherwise, we would simply be duplicating really the same test at the end of the day.

114
00:07:21.060 --> 00:07:21.390
All right.

115
00:07:21.390 --> 00:07:23.130
So that's all there is to cover in this lesson.

116
00:07:23.130 --> 00:07:24.750
And I will see you in the next one.
