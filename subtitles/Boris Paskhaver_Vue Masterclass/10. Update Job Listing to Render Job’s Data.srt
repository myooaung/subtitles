1
00:00:00,400 --> 00:00:01,330
All right.

2
00:00:01,330 --> 00:00:03,130
So this should be a fun lesson.

3
00:00:03,130 --> 00:00:10,540
In this lesson, we're finally going to see 100 different dynamic jobs populate on our job results page.

4
00:00:10,840 --> 00:00:16,690
So all that is left to do is to walk through our job list and component and replace all of our former

5
00:00:16,690 --> 00:00:24,340
hardcoded text with the dynamic properties available on the job object that flows in as a prop to this

6
00:00:24,340 --> 00:00:25,510
job listing component.

7
00:00:25,810 --> 00:00:31,240
In the previous lesson, we set up the validation for that job prop, so now we can use the job prop

8
00:00:31,240 --> 00:00:32,320
anywhere in our template.

9
00:00:32,530 --> 00:00:39,220
And we also set up this computed property of job page link to generate a dynamic URL to the individual

10
00:00:39,220 --> 00:00:42,250
job page when the user clicks on the job listing.

11
00:00:42,550 --> 00:00:45,550
So let's take care of this job page link computed property.

12
00:00:45,550 --> 00:00:49,780
First, I'm going to scroll up and find my first router link right here.

13
00:00:49,930 --> 00:00:53,680
The router link wraps basically all of the content in my job listing.

14
00:00:53,680 --> 00:00:57,730
So if the user clicks anywhere in this box, it's going to navigate them to that page.

15
00:00:58,030 --> 00:01:03,460
Right now we are navigating the user to a hardcoded root of slash job, slash result, slash one.

16
00:01:03,610 --> 00:01:04,630
That's not what we want.

17
00:01:04,870 --> 00:01:10,420
We want to navigate them to whatever the value of the job page link computed property happens to be.

18
00:01:10,840 --> 00:01:15,820
Of course this will not work because view is going to think we're providing an actual string of job

19
00:01:15,820 --> 00:01:16,300
page link.

20
00:01:16,480 --> 00:01:21,310
We need to make this a dynamic reference to the computed property below, and in order to do that,

21
00:01:21,310 --> 00:01:25,630
we have to bind to this to prop that the router link component expects.

22
00:01:25,870 --> 00:01:31,090
So right here I'm going to add a colon and immediately you can see the syntax change my my voice code

23
00:01:31,090 --> 00:01:35,260
editor recognizes that we're referencing the job page link computed property below.

24
00:01:35,620 --> 00:01:37,270
We're going to do the exact same thing below.

25
00:01:37,270 --> 00:01:42,700
There's one more router link right here, so I'm going to replace this to prop with a dynamic bound

26
00:01:42,700 --> 00:01:46,060
to prop that is going to reference the job page link imputed property.

27
00:01:46,510 --> 00:01:46,840
All right.

28
00:01:47,170 --> 00:01:52,810
So the next thing we'd like to do is replace all of our former hardcoded text with properties from the

29
00:01:52,810 --> 00:01:53,770
job object.

30
00:01:54,040 --> 00:01:57,880
So right here, instead of technical program manager, I'm going to remove that.

31
00:01:58,510 --> 00:02:03,910
And of course the way we can display or interpolate some kind of text on screen is by using the double

32
00:02:03,910 --> 00:02:04,630
curly braces.

33
00:02:04,840 --> 00:02:10,900
And here, how do we reference that object that we want while it is available as a prop called job and

34
00:02:10,900 --> 00:02:16,750
we can reference that prop the same way that we would reference a data property or a computed property,

35
00:02:16,750 --> 00:02:18,130
it's just available in line.

36
00:02:18,400 --> 00:02:19,720
So here's my job prop.

37
00:02:19,720 --> 00:02:20,560
That is an object.

38
00:02:20,680 --> 00:02:26,050
And on that object we have a property called Title and that is going to give me the job title.

39
00:02:26,230 --> 00:02:31,300
Now as a reminder, if you forget what properties are available on those job objects, you can either

40
00:02:31,300 --> 00:02:37,150
look in the browser or you can navigate to the DB that JSON file and find all of those properties available

41
00:02:37,150 --> 00:02:37,720
right here.

42
00:02:37,750 --> 00:02:42,520
So this is all we're using and each one of these objects will flow down to one job listing component.

43
00:02:43,180 --> 00:02:43,540
All right.

44
00:02:43,780 --> 00:02:44,950
So that takes care of the title.

45
00:02:44,950 --> 00:02:49,780
The next thing is going to be the organization, which is kind of the smaller company within the larger

46
00:02:49,780 --> 00:02:50,650
company here.

47
00:02:50,650 --> 00:02:52,180
I have hardcoded the text logo.

48
00:02:52,420 --> 00:02:57,520
Instead I'm going to interpolate another property from my job object and that property is organization.

49
00:02:58,600 --> 00:02:58,990
Great.

50
00:02:58,990 --> 00:03:00,610
Let's move on a little bit further down.

51
00:03:00,910 --> 00:03:07,450
So below what we formerly had is this hardcoded city of San Francisco, and that was made with the assumption

52
00:03:07,450 --> 00:03:09,370
that a job would be limited to one city.

53
00:03:09,670 --> 00:03:14,740
Well, it turns out from our data that we're actually going to be able to have jobs in multiple cities

54
00:03:14,740 --> 00:03:19,240
or in other words, the same job can have a position open in two or three different cities.

55
00:03:19,540 --> 00:03:24,310
So we're actually going to receive an array of cities and we need to iterate over that array and render

56
00:03:24,310 --> 00:03:25,600
each of the jobs there.

57
00:03:25,870 --> 00:03:31,360
So whenever you hear the word iteration and whenever you need to render a corresponding slice of HTML,

58
00:03:31,720 --> 00:03:34,900
the immediate directive you should think about is the V for directive.

59
00:03:35,200 --> 00:03:37,600
So right here I'm going to eliminate this former span.

60
00:03:37,870 --> 00:03:43,450
I'm going to add an unordered list and I want to create a list item for each location that is available

61
00:03:43,450 --> 00:03:44,620
in my locations array.

62
00:03:44,950 --> 00:03:47,680
So I'm going to add an ally element, a list item.

63
00:03:47,920 --> 00:03:51,820
I'm going to use the V for directive and what do I want to iterate over?

64
00:03:51,820 --> 00:03:57,400
I want to iterate over each location and here's where I have to provide the actual collection or array

65
00:03:57,400 --> 00:03:58,360
that I'm iterating over.

66
00:03:58,630 --> 00:04:04,630
Well, now this collection of locations will come from the locations property on my job object.

67
00:04:04,870 --> 00:04:07,420
So in job dot locations.

68
00:04:07,750 --> 00:04:12,400
So it's the exact same v four directive that we're used to, except this time we're iterating over an

69
00:04:12,400 --> 00:04:14,260
array that we get from a prop.

70
00:04:14,680 --> 00:04:18,040
Usually we've been iterating over an array that we get from data.

71
00:04:18,700 --> 00:04:21,670
We're in the previous lessons, we did it based on the API response.

72
00:04:21,880 --> 00:04:24,520
This is another similar application, same idea.

73
00:04:24,550 --> 00:04:29,170
We're just iterating over some array, but we're providing a different place or source for that array.

74
00:04:29,290 --> 00:04:32,080
In this case, it's a prop that is flowing into job listing.

75
00:04:32,470 --> 00:04:37,870
So whenever we use V four, we of course need to bind to a key property to give it a dynamic reference

76
00:04:37,870 --> 00:04:40,930
to something that Vue could use as a unique identifier.

77
00:04:41,200 --> 00:04:46,450
In this case, the location represents a string of a city, and that string is a perfect, unique identifier

78
00:04:46,480 --> 00:04:49,840
because we're not going to have the same city represented twice in the same array.

79
00:04:50,110 --> 00:04:55,330
So I'm just going to bind to location, which represents the dynamic string that I'm iterating over

80
00:04:55,330 --> 00:04:55,840
right here.

81
00:04:56,020 --> 00:04:59,770
Since I defined this variable right here, I can use that for my.

82
00:04:59,960 --> 00:05:01,670
Binding to the key attribute.

83
00:05:02,030 --> 00:05:04,820
There's a couple of classes I would like to add here just for style.

84
00:05:05,150 --> 00:05:06,860
The first thing I want to add is in line.

85
00:05:06,860 --> 00:05:12,140
BLOCK That's just going to ensure that the ally doesn't take up the whole width of the box, so it doesn't

86
00:05:12,140 --> 00:05:13,940
force everything down onto the next line.

87
00:05:14,240 --> 00:05:17,750
And between each city, I'd also like to add a little bit of margin.

88
00:05:17,960 --> 00:05:22,970
So I'm going to add a right margin to each list item with the more five class from tailwind that is

89
00:05:22,970 --> 00:05:25,220
going to add 20 pixels of margin on the right.

90
00:05:25,820 --> 00:05:31,250
So because we are using V four, we're going to create however many list items there are for however

91
00:05:31,250 --> 00:05:34,940
many locations we get, but we still need to render the location on the screen.

92
00:05:35,180 --> 00:05:38,180
We have reference to this location variable that we defined.

93
00:05:38,300 --> 00:05:39,530
This name is up to us.

94
00:05:39,830 --> 00:05:44,750
And so given that we have access to that, I'm going to interpolate it or render it in our template

95
00:05:44,900 --> 00:05:45,950
using curly braces.

96
00:05:46,190 --> 00:05:47,690
So I'm going to use location here.

97
00:05:48,230 --> 00:05:52,850
So again, you get to define whatever name you want to use here, but whatever you choose, here is

98
00:05:52,850 --> 00:05:57,020
what you have to put inside curly braces because that's what V will recognize.

99
00:05:57,290 --> 00:05:57,680
All right.

100
00:05:58,220 --> 00:05:58,580
All right.

101
00:05:58,580 --> 00:06:02,300
So moving on, the next thing that we need to take care of is our qualifications.

102
00:06:02,300 --> 00:06:04,370
We previously had these three list items.

103
00:06:04,370 --> 00:06:07,610
Those are all going to go now because we're not going to hard core them.

104
00:06:07,850 --> 00:06:11,450
And once again, we're going to need to iterate over a property on our job object.

105
00:06:11,600 --> 00:06:14,630
And that property is called minimum qualifications.

106
00:06:14,630 --> 00:06:16,220
That is also an array of strings.

107
00:06:16,550 --> 00:06:21,800
So once again, I'm going to add an ally and I'm going to use the V directive to iterate over every

108
00:06:21,800 --> 00:06:26,450
qualification in job dot minimum qualifications.

109
00:06:26,870 --> 00:06:31,070
So again, I think in case it isn't obvious, if I have an array of three items, I'm going to create

110
00:06:31,070 --> 00:06:31,910
three list items.

111
00:06:32,150 --> 00:06:35,750
If I have an array of two strings, I'm going to create two list items.

112
00:06:35,750 --> 00:06:40,160
If I have an array of ten strings, I'm going to create ten list items, etc. Once again, I need to

113
00:06:40,160 --> 00:06:41,960
provide some kind of unique identifier.

114
00:06:41,960 --> 00:06:47,870
To my key attribute, I'm going to again use the V bind syntax to provide a dynamic value, and I'm

115
00:06:47,870 --> 00:06:53,000
just going to provide my qualification in this case because my qualification is a unique string.

116
00:06:53,000 --> 00:06:57,590
It's a unique job requirement that is long and lengthy and definitely unique because I'm guessing the

117
00:06:57,590 --> 00:07:01,160
same job is not going to have two bullet points that are the exact same string.

118
00:07:01,400 --> 00:07:07,370
So this should serve as enough of a unique identifier for you to establish each list item as unique.

119
00:07:07,370 --> 00:07:10,790
Remember, we just need to provide it some kind of identifier that is unique.

120
00:07:10,790 --> 00:07:14,150
Typically a simple value, like a string or a number.

121
00:07:15,020 --> 00:07:15,380
All right.

122
00:07:15,560 --> 00:07:21,350
And then I also need to actually render that qualification bullet on screen so I have access to my qualification

123
00:07:21,350 --> 00:07:21,800
variable.

124
00:07:21,920 --> 00:07:27,170
And right here, I'm going to interpolate it using the double curly braces within my list item.

125
00:07:27,590 --> 00:07:27,950
All right.

126
00:07:27,950 --> 00:07:31,910
And if I scroll from top to bottom, we already took care of this or link.

127
00:07:32,090 --> 00:07:34,880
So I think that is all there is to change.

128
00:07:34,880 --> 00:07:36,200
Everything now is dynamic.

129
00:07:36,200 --> 00:07:39,350
We have no more hardcoded text or hardcoded links.

130
00:07:39,530 --> 00:07:43,160
So let's check in in our browser and see what things are currently looking like.

131
00:07:44,360 --> 00:07:44,870
All right.

132
00:07:44,870 --> 00:07:45,800
And here we go.

133
00:07:45,800 --> 00:07:49,640
Let me just refresh this page and there we go.

134
00:07:49,640 --> 00:07:51,890
You can see all of these jobs are now different.

135
00:07:51,890 --> 00:07:55,190
We have angular developer, Java coder, svelte ninja.

136
00:07:55,190 --> 00:08:02,120
And if I scroll down, we're going to see 100 different jobs based on the array of 100 different job

137
00:08:02,120 --> 00:08:04,100
listings that we got from our backend.

138
00:08:04,340 --> 00:08:07,670
So now we're starting to see the power of view in action.

139
00:08:07,940 --> 00:08:11,750
You'll notice that a couple of things are different from each listing to the following listing.

140
00:08:11,930 --> 00:08:17,450
If I hover my mouse over the actual job listing, you'll notice in the bottom left corner of Chrome

141
00:08:17,600 --> 00:08:20,810
we have the URL that is generated by job page link.

142
00:08:21,050 --> 00:08:26,420
So this one is slash one, this one is slash two, this one is slash three, this one is slash four.

143
00:08:26,540 --> 00:08:33,440
Again, it's using the ID property from each job object to generate the individual job show page so

144
00:08:33,440 --> 00:08:35,000
each one will lead to a different page.

145
00:08:35,000 --> 00:08:36,140
That's exactly what we want.

146
00:08:36,440 --> 00:08:38,360
You'll notice that each one has a different title.

147
00:08:38,360 --> 00:08:40,160
That's because we're interpolating that value.

148
00:08:40,370 --> 00:08:42,140
Each one is a different organization.

149
00:08:42,140 --> 00:08:45,140
That's going to be the very first item you see here down below.

150
00:08:45,140 --> 00:08:50,240
So viewing me as a company View Tube, these are all puns, by the way, if you can do it, these are

151
00:08:50,240 --> 00:08:50,810
all companies.

152
00:08:51,410 --> 00:08:57,110
And then to the right we have the cities, so we use the V4 directive to iterate over that locations,

153
00:08:57,110 --> 00:08:57,440
right?

154
00:08:57,590 --> 00:09:01,580
So in this case, we have one city of Lisbon, so we render it right here in this array.

155
00:09:01,580 --> 00:09:04,430
We have two cities in this array we have four cities.

156
00:09:04,430 --> 00:09:09,230
So you can see we are using V4 to generate as much as we need in order to render all of those things

157
00:09:09,230 --> 00:09:09,770
sequentially.

158
00:09:09,770 --> 00:09:15,530
So view is powerful enough with that v four directive to dynamically react to however large that array

159
00:09:15,530 --> 00:09:15,800
is.

160
00:09:16,460 --> 00:09:19,250
Same thing goes with our qualifications bullets.

161
00:09:19,460 --> 00:09:24,470
So right here we have an array from the back end with four strings, so we render four qualifications.

162
00:09:24,710 --> 00:09:29,000
Here we have an array of three strings, so we get three of them rendered in that ally.

163
00:09:29,000 --> 00:09:34,790
The V four is automatically dynamically reacting and rendering as much as it needs to based on however

164
00:09:34,790 --> 00:09:38,960
many items or elements are in the array that we provide to v four.

165
00:09:39,320 --> 00:09:41,840
So with that, if we scroll down, we can enjoy our handiwork.

166
00:09:41,840 --> 00:09:42,710
Everything looks good.

167
00:09:42,710 --> 00:09:48,110
We have 100 different jobs being rendered just like a real job site and it's looking pretty good.

168
00:09:48,470 --> 00:09:51,050
So things are looking happy to me.

169
00:09:51,050 --> 00:09:54,650
And in the very next lesson, we're going to talk a little bit about how we can test this.
