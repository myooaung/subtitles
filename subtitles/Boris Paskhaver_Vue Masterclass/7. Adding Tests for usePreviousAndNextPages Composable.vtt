WEBVTT
1
00:00:00.330 --> 00:00:01.430
All right.

2
00:00:01.440 --> 00:00:05.430
The next thing I want to do is to add a test suite for our new composable.

3
00:00:05.640 --> 00:00:07.380
So let's create that test file right now.

4
00:00:07.410 --> 00:00:09.000
I'm going to go to my file explorer.

5
00:00:09.450 --> 00:00:17.400
And in the tests unit directory in composable, I'll create a new test file and I'll call it use previous

6
00:00:17.400 --> 00:00:24.960
and next pages that test dot just let me drag that file over to the right and begin with an import of

7
00:00:24.960 --> 00:00:27.000
the composable I have on the left hand side.

8
00:00:27.330 --> 00:00:33.960
So import use previous and next page from the source directory composable is use previous and next pages.

9
00:00:33.960 --> 00:00:36.540
Looks like it is plural, but everything looks correct in my file name.

10
00:00:36.900 --> 00:00:37.320
Perfect.

11
00:00:37.530 --> 00:00:43.260
Then I want to create a described block for my new composable use previous and next pages.

12
00:00:43.770 --> 00:00:49.590
And as a reminder, we have a composable function that returns an object with two computed properties

13
00:00:49.590 --> 00:00:50.610
to reactive properties.

14
00:00:50.910 --> 00:00:54.540
And each one of those computed properties also has different branches of logic.

15
00:00:54.540 --> 00:00:57.270
So in this one, for example, we have a ternary operation.

16
00:00:57.270 --> 00:00:59.070
So there are two possible return values.

17
00:00:59.340 --> 00:01:01.680
And here there are also two possible return values.

18
00:01:01.980 --> 00:01:07.080
And again, maybe, you know, in the grand scheme, maybe it is better to break this into two composable

19
00:01:07.080 --> 00:01:12.120
functions like use previous pages and use next pages and feed each one just what they need.

20
00:01:12.390 --> 00:01:13.320
Totally valid.

21
00:01:13.320 --> 00:01:14.400
I wouldn't hold it against you.

22
00:01:14.400 --> 00:01:16.020
I would say thumbs up for now.

23
00:01:16.020 --> 00:01:20.100
I just wanted to keep a different approach to have a function that return an object of reactive properties

24
00:01:20.250 --> 00:01:21.720
just to show you what that would be like.

25
00:01:21.930 --> 00:01:25.950
And so in our tests for this one composable function that we're going to have to tackle all of those

26
00:01:25.950 --> 00:01:29.730
scenarios, previous page, next page, and all of their possible return values.

27
00:01:30.120 --> 00:01:31.080
So let's begin with this one.

28
00:01:32.010 --> 00:01:34.980
It calculates page before current one.

29
00:01:35.310 --> 00:01:37.710
So this is going to be for my previous page section.

30
00:01:38.400 --> 00:01:43.860
So what I'm going to do here is define what is going to be my current page and max page arguments that

31
00:01:43.860 --> 00:01:45.540
I pass into this function my invoke.

32
00:01:45.990 --> 00:01:48.810
So once again, we do not need an actual new reactive object.

33
00:01:48.810 --> 00:01:52.350
We just need an object with a value property because that will be good enough to play the role.

34
00:01:52.800 --> 00:01:56.540
So let's say I have a current page object and I'll give it a value.

35
00:01:56.560 --> 00:01:57.570
Property set to eight.

36
00:01:58.500 --> 00:02:03.840
And let's see, I have a max page object and that will be an object with a value property set to ten.

37
00:02:04.170 --> 00:02:09.420
And this is the case if our Max page is ten and our current page is eight, then our next page in line

38
00:02:09.420 --> 00:02:11.400
should be nine if our logic is correct.

39
00:02:11.850 --> 00:02:16.350
So I'm going to use previous in next page and when I invoke that function, I'm going to pass in current

40
00:02:16.350 --> 00:02:18.360
page and max page.

41
00:02:18.810 --> 00:02:24.120
What that is going to give back to me is an object and I want to restructure the previous page property

42
00:02:24.420 --> 00:02:27.840
from that object that's going to be this thing right here.

43
00:02:28.080 --> 00:02:32.010
And remember previous page by itself is going to be a reactive object.

44
00:02:32.010 --> 00:02:37.830
So I need to make sure to access the value property and that of course should be equal to actually I

45
00:02:37.830 --> 00:02:38.370
made a mistake.

46
00:02:38.370 --> 00:02:41.490
Apologies if my current page's eight and my max page is ten.

47
00:02:41.610 --> 00:02:42.810
My next page is nine.

48
00:02:42.810 --> 00:02:45.690
But this one is concerned about the previous one before current one.

49
00:02:45.930 --> 00:02:47.670
So my previous page is going to be seven.

50
00:02:48.270 --> 00:02:49.230
Seven comes before eight.

51
00:02:49.680 --> 00:02:49.980
All right.

52
00:02:50.010 --> 00:02:50.400
There we go.

53
00:02:50.400 --> 00:02:50.970
That's going to work.

54
00:02:51.090 --> 00:02:51.420
All right.

55
00:02:51.630 --> 00:02:55.470
Now, for my second scenario, I'm going to add a describe here.

56
00:02:55.680 --> 00:02:58.800
When current page is the first page.

57
00:02:59.070 --> 00:03:02.850
In that scenario, we are not going to have a previous page.

58
00:03:03.090 --> 00:03:07.770
So we can see in this ternary operator that we are instead going to get the value undefined, undefined

59
00:03:07.770 --> 00:03:10.500
wrapped in a reactive object, but still undefined.

60
00:03:10.770 --> 00:03:18.300
So right here, I'm going to say it does not provide previous page code to be very similar to our last

61
00:03:18.330 --> 00:03:18.670
task.

62
00:03:18.670 --> 00:03:20.190
So let me copy a lot of that set up.

63
00:03:20.640 --> 00:03:24.990
So right here, I'm going to copy a lot of this set up right here pasted down below.

64
00:03:25.530 --> 00:03:29.760
So for my current page to be the first page, I have to make this value equal to one.

65
00:03:30.120 --> 00:03:31.860
So my current page is the first page.

66
00:03:32.010 --> 00:03:33.900
My max page, let's say, is going to be one.

67
00:03:34.350 --> 00:03:38.750
So if my current page's one, my max paid is one, I'm on the first page, there is no previous page.

68
00:03:38.760 --> 00:03:39.540
Navigate two.

69
00:03:39.810 --> 00:03:42.420
So what I really want to check is that this is going to be undefined.

70
00:03:42.690 --> 00:03:47.970
So in jest we can do this, we can compare if it's going to be undefined, but the better approach is

71
00:03:47.970 --> 00:03:52.200
to actually use a built in matcher, a built in method that's a little bit more precise and checking

72
00:03:52.200 --> 00:03:52.500
for it.

73
00:03:52.770 --> 00:03:55.230
And that method is literally called to be undefined.

74
00:03:55.620 --> 00:04:00.990
So I'm simply basically checking that the value property on previous page returns undefined and that

75
00:04:00.990 --> 00:04:02.880
takes care of this logic of undefined.

76
00:04:03.210 --> 00:04:08.430
And I'm going to write two complementary tests for my, my other half of the object that I return,

77
00:04:08.430 --> 00:04:09.870
which is the next page property.

78
00:04:10.350 --> 00:04:14.220
So right here it calculates page after current one.

79
00:04:16.000 --> 00:04:16.330
All right.

80
00:04:16.330 --> 00:04:18.190
And once again, our setup is going to be pretty similar.

81
00:04:18.190 --> 00:04:19.960
So let me copy this logic right here.

82
00:04:21.110 --> 00:04:23.510
At least the first three lines right here.

83
00:04:24.600 --> 00:04:25.140
All right.

84
00:04:25.140 --> 00:04:28.260
And let me fix the tape I have here calculates.

85
00:04:28.950 --> 00:04:29.310
Okay.

86
00:04:29.460 --> 00:04:31.320
So our current page is eight hour max.

87
00:04:31.320 --> 00:04:32.280
Page is ten.

88
00:04:32.290 --> 00:04:34.690
We care about our next page in this test.

89
00:04:34.690 --> 00:04:37.830
So I'm going to swap this destruction to be next page.

90
00:04:38.370 --> 00:04:42.780
And here I'm going to check in on the value property on that reactive object.

91
00:04:43.050 --> 00:04:45.210
And once again, this is the mistake I made earlier.

92
00:04:45.210 --> 00:04:50.100
If a current page's eight and our Max page is not as ten, then our next page is going to be nine.

93
00:04:50.100 --> 00:04:51.330
That is the correct one in line.

94
00:04:51.660 --> 00:04:53.700
I'm going to save that and we are going to get a passing test.

95
00:04:54.600 --> 00:04:59.190
Then once again, I'll add another described block for the alternate scenario, which is when current

96
00:04:59.190 --> 00:05:05.190
page is the last page, then there is no next page to go to and I should get undefined.

97
00:05:05.430 --> 00:05:07.110
So I'm going to copy most of this logic.

98
00:05:08.550 --> 00:05:10.280
Right except down below.

99
00:05:10.280 --> 00:05:13.730
Let's say my current page's eight and my max page is also eight.

100
00:05:13.940 --> 00:05:15.770
That fulfills the description.

101
00:05:15.770 --> 00:05:17.390
Here went current pages, the last page.

102
00:05:17.570 --> 00:05:22.940
I do have to write this in an actual test right here so it does not provide next page.

103
00:05:23.150 --> 00:05:26.630
I have to wrap my actual assertions in an IT function call or we're going to get errors.

104
00:05:26.630 --> 00:05:31.160
And just so let me just cut and paste that another rookie mistake by yours truly.

105
00:05:31.580 --> 00:05:32.600
I'm going to paste the right here.

106
00:05:32.960 --> 00:05:36.020
So once again, current pages eight, max page is eight.

107
00:05:36.020 --> 00:05:37.130
We are on the last page.

108
00:05:37.130 --> 00:05:41.690
So next page is not going to have a value of nine, it's going to have a value of undefined.

109
00:05:41.690 --> 00:05:44.300
There is no next page after the last page.

110
00:05:44.690 --> 00:05:45.350
Save that.

111
00:05:45.350 --> 00:05:47.030
And with that, we have a passing test.

112
00:05:47.510 --> 00:05:47.900
All right.

113
00:05:47.900 --> 00:05:49.100
So feeling pretty good.

114
00:05:49.100 --> 00:05:50.690
We have the composable tested.

115
00:05:50.840 --> 00:05:55.100
And once again, I know I've repeated this point a million times, but the cool thing about this is

116
00:05:55.100 --> 00:06:00.950
now the logic of calculating whether we're subtracting correctly, adding correctly, determining whether

117
00:06:00.950 --> 00:06:02.540
it's undefined or valid value.

118
00:06:02.690 --> 00:06:05.900
That logic is now isolated in a single composable function.

119
00:06:06.080 --> 00:06:11.570
So there's no reason for every component that is using this function to retest this logic in its own

120
00:06:11.570 --> 00:06:12.020
test suite.

121
00:06:12.410 --> 00:06:12.620
Right.

122
00:06:12.620 --> 00:06:14.240
We've isolated this responsibility.

123
00:06:14.240 --> 00:06:17.600
We've made sure that if something is wrong here, our tests should catch it.

124
00:06:17.840 --> 00:06:22.130
So from our components responsibility, a component only cares that it's using previous next pages,

125
00:06:22.280 --> 00:06:24.770
and then it's getting a valid value from it that it can use.

126
00:06:24.980 --> 00:06:30.290
The internals of how I use previous index pages works is now captured in this test suite and that's

127
00:06:30.290 --> 00:06:32.120
the whole benefit of the composition API.

128
00:06:32.210 --> 00:06:35.690
We isolate, we reuse, and we make it super easy to test.

129
00:06:35.900 --> 00:06:36.260
All right.

130
00:06:36.380 --> 00:06:37.670
That's all there is to cover in this lesson.

131
00:06:37.670 --> 00:06:39.170
So I will see you in the next one.
