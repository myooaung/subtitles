WEBVTT
1
00:00:00.330 --> 00:00:01.290
All right.

2
00:00:01.290 --> 00:00:05.910
So congratulations, as always, for reaching the end of another course section.

3
00:00:06.060 --> 00:00:08.280
So let's review everything that we learned.

4
00:00:08.520 --> 00:00:11.140
This section focused on named slots.

5
00:00:11.400 --> 00:00:17.850
By giving each slot a name, by using the name of prop, we can have multiple slots within a single

6
00:00:17.850 --> 00:00:18.750
child component.

7
00:00:19.020 --> 00:00:19.860
And what does that mean?

8
00:00:20.010 --> 00:00:27.300
That means we have multiple places or slots where the parent component can provide custom HTML content

9
00:00:27.300 --> 00:00:28.320
to inject.

10
00:00:28.620 --> 00:00:30.060
Why do we do this approach?

11
00:00:30.060 --> 00:00:33.240
Because it allows us to create really reusable components.

12
00:00:33.510 --> 00:00:38.940
In this section, for example, our header container component could capture the logic of creating a

13
00:00:38.940 --> 00:00:45.450
box that spans the whole width of the screen and centers its text content while still allowing the parent

14
00:00:45.450 --> 00:00:47.910
component to specify the text value.

15
00:00:48.090 --> 00:00:54.150
The HTML elements such as an H2 or an H3 and customize how it wants that content to look.

16
00:00:54.360 --> 00:00:59.940
So we get the reusability while still getting the customization element that is the benefit of slots,

17
00:01:00.180 --> 00:01:03.990
both in a single form and when we use multiple ones with names.

18
00:01:04.410 --> 00:01:10.680
Keep in mind, if we do not give a slot component, a name view will assign it the name default and

19
00:01:10.680 --> 00:01:17.460
you can only use one slot component without a name in the component that you are using slots or a single

20
00:01:17.460 --> 00:01:17.850
slot.

21
00:01:18.170 --> 00:01:23.340
Right now my preference as always, is if you are using more than one slot, I would prefer to give

22
00:01:23.340 --> 00:01:28.860
each one a name because it better communicates which slot you're targeting in the parent component and

23
00:01:28.860 --> 00:01:32.370
it doesn't have to make another developer guess what the word default means?

24
00:01:33.390 --> 00:01:33.780
All right.

25
00:01:34.050 --> 00:01:36.030
How does the parent component use those slots?

26
00:01:36.210 --> 00:01:42.810
Uses this template syntax and the v slot directive v slot followed by a colon and the exact slot name

27
00:01:42.960 --> 00:01:46.440
that we specified when we declared that slot in the child component.

28
00:01:46.620 --> 00:01:46.920
All right.

29
00:01:47.070 --> 00:01:52.020
And we need to use the syntax because we need to tell you where to inject specific bits of content.

30
00:01:52.020 --> 00:01:52.260
Right.

31
00:01:52.440 --> 00:01:56.880
Imagine we have five different slots and five different pieces of HTML content.

32
00:01:57.150 --> 00:01:59.370
If you can't guess where we want to place each one.

33
00:01:59.580 --> 00:02:05.160
So we have to tell you, hey, this slot a put this content here, this slot be put this content here,

34
00:02:05.160 --> 00:02:11.280
etc. Now as a shortcut, we can also use template followed by the hash tag symbol, the Octo Thorp,

35
00:02:11.460 --> 00:02:15.870
followed by the name of the slot that we gave it through the name prop on the slot component.

36
00:02:16.020 --> 00:02:21.240
And S Lynch generally prefers this approach because it tends to be a little bit tercer and just requires

37
00:02:21.240 --> 00:02:21.750
less writing.

38
00:02:22.650 --> 00:02:27.570
Finally, when it comes to testing, you know this already, but provide these slots property in the

39
00:02:27.570 --> 00:02:30.930
configuration object which is the second argument to mount and challenge.

40
00:02:31.410 --> 00:02:36.660
And the properties on the slots object will be the slot names, the exact same ones that you configured

41
00:02:36.720 --> 00:02:42.120
when you declared the slot in the component and then the values in that configuration object will be

42
00:02:42.120 --> 00:02:49.440
strings representing the HTML content that you want the test utils to inject or place into that slot

43
00:02:49.620 --> 00:02:51.600
into that place in the template.

44
00:02:51.840 --> 00:02:56.340
Of course, the reason we have to do this is because we don't have the benefits of our regular template

45
00:02:56.340 --> 00:02:57.450
syntax in a test.

46
00:02:57.630 --> 00:03:02.880
We have to wire up everything using JavaScript, so that includes slots and mocks and stubs and global

47
00:03:02.880 --> 00:03:05.040
things, etc. So we do have to do this approach.

48
00:03:05.040 --> 00:03:10.680
We have to provide our H2 not as a string, and then you can simply verify that the component is rendering

49
00:03:10.680 --> 00:03:12.480
the slot content as expected.

50
00:03:12.660 --> 00:03:14.640
That's exactly what we did in our tests.

51
00:03:15.060 --> 00:03:15.390
All right.

52
00:03:15.390 --> 00:03:17.580
And with that, we have reached the end of another section.

53
00:03:17.760 --> 00:03:20.850
In our very next section, we're going to go even deeper into slots.

54
00:03:20.850 --> 00:03:25.560
It's going to be our last section on slots, and we're going to see another use case for them.

55
00:03:25.890 --> 00:03:27.570
And I will see you in the next lesson.
