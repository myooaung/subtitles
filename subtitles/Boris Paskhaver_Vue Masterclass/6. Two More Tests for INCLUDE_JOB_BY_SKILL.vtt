WEBVTT
1
00:00:00.470 --> 00:00:01.450
All right.

2
00:00:01.460 --> 00:00:06.500
So in the previous lesson, we started implementing our include job by skill getter.

3
00:00:06.800 --> 00:00:12.230
And in this lesson, I want to make sure that we account for two possible edge cases when it comes to

4
00:00:12.230 --> 00:00:12.800
this getter.

5
00:00:13.100 --> 00:00:18.860
The first is the case of character casing and more specifically, character casing mismatches.

6
00:00:19.190 --> 00:00:25.130
So imagine for a second that the user has a skills search term that is the string view, but in all

7
00:00:25.130 --> 00:00:25.790
lowercase.

8
00:00:26.000 --> 00:00:32.300
In that case, this code will not work because JavaScript and TypeScript cares about character casing

9
00:00:32.540 --> 00:00:37.370
and the includes method will not find a match if there is a mismatch in casing.

10
00:00:37.610 --> 00:00:43.700
So what I mean by that is a lowercase string like the UI is not going to be found in this string because

11
00:00:43.700 --> 00:00:48.770
the checker is going to say a capital V is not equal to a lowercase v.

12
00:00:49.040 --> 00:00:54.620
So I want to make sure that whatever the user types, I account for any potential mismatches in the

13
00:00:54.620 --> 00:00:55.670
casing of their characters.

14
00:00:55.790 --> 00:01:00.200
I don't want the user to worry about whether it's lowercase or uppercase or an exact match.

15
00:01:00.470 --> 00:01:05.120
I just want them to enter the technology they're passionate about and felt are the right jobs for them.

16
00:01:05.510 --> 00:01:11.510
So what I'm going to do here is add a new test and that test is going to be it handles inconsistent

17
00:01:12.860 --> 00:01:14.420
character casing.

18
00:01:15.050 --> 00:01:20.120
And for this test, I'm basically going to copy what I have above, since the test logic is going to

19
00:01:20.120 --> 00:01:25.610
be very similar and all that I'm going to modify is going to be my skills search firm and let's make

20
00:01:25.610 --> 00:01:26.540
it something wacky.

21
00:01:26.780 --> 00:01:28.130
So how about Vue?

22
00:01:28.130 --> 00:01:32.450
But I'm going to do Vue and then Capital E, just something super crazy.

23
00:01:32.600 --> 00:01:36.280
You know, maybe the user's having a broken keyboard or a bad typing day.

24
00:01:36.290 --> 00:01:41.150
I've certainly had many of those and probably captured them on camera for this course many times as

25
00:01:41.150 --> 00:01:41.420
well.

26
00:01:41.750 --> 00:01:43.250
So let's pretend the user types this.

27
00:01:43.250 --> 00:01:46.790
I want to make the experience as seamless and as comfortable for them as possible.

28
00:01:46.970 --> 00:01:49.130
So I want to make sure we do match the job right there.

29
00:01:49.400 --> 00:01:54.770
And of course, if I run this test, we're going to see it's not going to pass, because the title right

30
00:01:54.770 --> 00:01:59.480
here in this case, the capital title of you developer, is not going to include the lowercase string

31
00:01:59.480 --> 00:02:02.150
of you or this specific string of view with a capital E.

32
00:02:02.570 --> 00:02:07.790
So one very simple common solution for a problem like this is to normalize both of the strings that

33
00:02:07.790 --> 00:02:08.390
we're comparing.

34
00:02:08.690 --> 00:02:14.270
And all that normalized means is we take care of any casing issues by forcing the string to be of a

35
00:02:14.270 --> 00:02:15.050
specific type.

36
00:02:15.410 --> 00:02:20.930
So what I mean by that is we can lowercase our job title right here, which will force all of the characters

37
00:02:20.930 --> 00:02:21.650
to be in lowercase.

38
00:02:21.920 --> 00:02:25.640
And we can also lowercase this skills search term string right here.

39
00:02:25.880 --> 00:02:30.060
And then we're going to be guaranteed to comparing two lowercase strings with each other.

40
00:02:30.170 --> 00:02:36.470
We're going to basically get rid of these disparities and thus allow JavaScript to do a match on to

41
00:02:36.470 --> 00:02:37.280
lowercase strings.

42
00:02:37.520 --> 00:02:40.580
An alternative solution, of course, is making both strings uppercase.

43
00:02:40.730 --> 00:02:43.730
It doesn't really matter which one you do, as long as it's consistent.

44
00:02:43.970 --> 00:02:48.650
And that way we're going to get rid of things like this by simply lowercase in both of these strings.

45
00:02:48.890 --> 00:02:53.450
So we're going to basically compare a view to view developer in this scenario, and that's not going

46
00:02:53.450 --> 00:02:55.040
to be a problem for the includes method.

47
00:02:55.430 --> 00:02:55.700
All right.

48
00:02:55.700 --> 00:03:00.770
So to do that, I have to rely on a trusty string method available in JavaScript and TypeScript called

49
00:03:00.770 --> 00:03:01.670
two lowercase.

50
00:03:01.940 --> 00:03:06.230
So first up on my title string right here, I'm going to call the two lowercase method.

51
00:03:07.540 --> 00:03:09.220
That's going to return a new string.

52
00:03:09.370 --> 00:03:12.280
And on that return string, I'm going to call the includes method.

53
00:03:12.520 --> 00:03:18.100
And here I'm not just going to pass in this skills search term string, I'm going to pass it in in lowercase

54
00:03:18.100 --> 00:03:21.910
as well by calling the two lowercase method on it as well.

55
00:03:22.270 --> 00:03:26.710
And in case you're worried, don't worry, the two lowercase method does not mutate.

56
00:03:26.920 --> 00:03:29.170
It simply returns a new string object.

57
00:03:29.830 --> 00:03:31.300
Technically a new string primitive.

58
00:03:31.300 --> 00:03:34.810
But that's getting super nitty gritty into the details of JavaScript.

59
00:03:34.810 --> 00:03:35.260
In TypeScript.

60
00:03:35.470 --> 00:03:38.320
The point is we're not going to accidentally mutate the state.

61
00:03:38.320 --> 00:03:40.840
This is going to return a brand new string as well.

62
00:03:40.840 --> 00:03:45.070
This so we're not going to accidentally make any changes to our view store in our getter.

63
00:03:45.460 --> 00:03:48.310
And you can see with that our test is passing.

64
00:03:48.640 --> 00:03:53.530
One other thing that I want to account for is very similar to what we accounted for in our previous

65
00:03:53.530 --> 00:03:54.310
getters right here.

66
00:03:54.550 --> 00:03:59.710
I want to make sure that if the user has not entered any skill, in other words, if they have not put

67
00:03:59.710 --> 00:04:06.190
anything into that input box, I do want to include that job because if I do not do that, then every

68
00:04:06.190 --> 00:04:11.080
job will fail this getter, and if it does that, then there will be no filter jobs, the shell on the

69
00:04:11.080 --> 00:04:11.770
right hand side.

70
00:04:12.100 --> 00:04:16.150
So I'm going to add a new test and if it fails, then we'll figure out a way to fix it.

71
00:04:16.360 --> 00:04:20.620
And if it succeeds, then we'll know that our current implementation is covering that case and I don't

72
00:04:20.620 --> 00:04:21.580
need to worry about it.

73
00:04:21.880 --> 00:04:24.220
So right here, I'm going to describe.

74
00:04:25.200 --> 00:04:29.370
When the user has not entered any skill.

75
00:04:32.340 --> 00:04:33.630
What do I expect to happen?

76
00:04:34.630 --> 00:04:38.020
I expect that it should include the jobs that it includes job.

77
00:04:39.740 --> 00:04:44.450
Once again, what I can do is copy basically the test they have right here because it's going to be

78
00:04:44.450 --> 00:04:45.050
very similar.

79
00:04:45.230 --> 00:04:50.570
The only thing we're going to modify, of course, is that we no longer want the skills search term

80
00:04:50.570 --> 00:04:51.980
property to have a string.

81
00:04:51.980 --> 00:04:57.590
We're going to have it empty, which is a starting state, and we expect that this job should be included

82
00:04:57.770 --> 00:05:02.720
because if the user's not entered anything, this job is valid and so should every other job.

83
00:05:02.780 --> 00:05:03.080
All right.

84
00:05:03.380 --> 00:05:06.350
Now, the good news is our test is already passing this.

85
00:05:06.380 --> 00:05:10.520
We don't need to add anything else, in other words, so we don't need to add any other if statement

86
00:05:10.520 --> 00:05:14.090
like if, you know, state that skill search term, that length equals zero.

87
00:05:14.270 --> 00:05:18.710
It looks like this logic by itself is good enough and I'm guessing that has something to do with how

88
00:05:18.980 --> 00:05:20.170
JavaScript looks for it.

89
00:05:20.180 --> 00:05:21.560
The includes method in a string.

90
00:05:21.770 --> 00:05:27.020
I believe the way it works is when we call includes on a string like this and we check for the presence

91
00:05:27.020 --> 00:05:32.750
of an empty string that will always return true and thus this scenario is already accounted for.

92
00:05:32.960 --> 00:05:38.060
However, I feel good about leaving this test in here because it gives me again a little bit of confidence

93
00:05:38.210 --> 00:05:41.180
that we've accounted for this scenario and we have a test to prove it.

94
00:05:41.930 --> 00:05:42.260
All right.

95
00:05:42.470 --> 00:05:48.050
So that makes our include job by skill getter be a lot more better, a lot more well-rounded and capture

96
00:05:48.050 --> 00:05:49.670
these two potential edge cases.

97
00:05:49.670 --> 00:05:49.970
All right.

98
00:05:50.210 --> 00:05:51.890
So more progress on the scatter.

99
00:05:51.890 --> 00:05:53.690
And I will see you in the next lesson.
