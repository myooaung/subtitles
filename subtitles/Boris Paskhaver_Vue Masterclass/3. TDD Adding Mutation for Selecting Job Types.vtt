WEBVTT
1
00:00:00.620 --> 00:00:01.430
Okay.

2
00:00:01.430 --> 00:00:06.200
So we now have a new property called Selected Job Types in our view X Store State.

3
00:00:06.440 --> 00:00:10.640
And so the next thing I want to add is the mutation that's going to update that state.

4
00:00:10.910 --> 00:00:16.970
And obviously this mutation is going to be committed or triggered by the user clicking a checkbox on

5
00:00:16.970 --> 00:00:17.630
a component.

6
00:00:17.930 --> 00:00:21.800
So we're sort of building this feature in reverse to what we did in the previous section.

7
00:00:21.800 --> 00:00:24.110
In the previous section, we built our components first.

8
00:00:24.350 --> 00:00:29.120
Now we're taking care of the view logic first and then moving on to the eventual component.

9
00:00:29.270 --> 00:00:30.590
And either way is fine.

10
00:00:30.590 --> 00:00:31.940
It's kind of a matter of preference.

11
00:00:32.120 --> 00:00:35.750
I think this is kind of beneficial because we're going to try to do things a little bit differently

12
00:00:35.930 --> 00:00:38.330
just to introduce some variety from the previous section.

13
00:00:38.720 --> 00:00:42.200
So with that said, let's open up our mutations test file.

14
00:00:42.200 --> 00:00:47.210
We created a separate test file in the previous section and it was called Mutations that test stock.

15
00:00:47.210 --> 00:00:50.630
Just so you can see all of our mutations here.

16
00:00:50.630 --> 00:00:55.340
And as I scroll down, we have a test for our ADD selected organizations mutation.

17
00:00:55.610 --> 00:01:01.880
And in my opinion, we can basically copy and paste this test and modify it because our logic for receiving

18
00:01:01.880 --> 00:01:04.460
job types is probably going to be very similar.

19
00:01:04.730 --> 00:01:08.840
Once again, imagine we're brand new employees and we're simply following the principles that we have

20
00:01:08.840 --> 00:01:10.250
found in our code base.

21
00:01:10.370 --> 00:01:12.620
We may agree with them, we may disagree with them.

22
00:01:12.620 --> 00:01:14.210
We may think they can be built better.

23
00:01:14.360 --> 00:01:17.660
But let's say it's our first day on the job and we just want to get this feature done.

24
00:01:17.870 --> 00:01:21.500
So we're going to follow whatever we see in the code base just to allow us to iterate quicker.

25
00:01:21.860 --> 00:01:27.470
So let's say I'm going to copy this test right here and then modify it accordingly.

26
00:01:27.890 --> 00:01:32.900
So if our mutation is going to have a name of ad followed by what we're adding in this case, we're

27
00:01:32.900 --> 00:01:35.000
not going to add new selected organizations.

28
00:01:35.180 --> 00:01:37.580
We're going to add new selected job types.

29
00:01:37.580 --> 00:01:42.680
So let's do ads, selected job types, and it's not going to update the organizations that the user

30
00:01:42.680 --> 00:01:44.160
would like to filter the jobs by.

31
00:01:44.420 --> 00:01:50.030
It's going to update the job types the user would like to filter by their jobs by.

32
00:01:50.720 --> 00:01:55.670
Similarly, our state that we're concerned about in this case, the mutation is not going to be selected

33
00:01:55.670 --> 00:02:00.380
organizations instead of we're going to be updating the property that we defined in the previous lesson,

34
00:02:00.620 --> 00:02:02.030
which is just going to be job types.

35
00:02:02.750 --> 00:02:07.460
We're going to start out with a state with an empty array, and we expect that when we call this mutation,

36
00:02:07.460 --> 00:02:13.250
which we have not defined yet, but when we call this mutation, our mutation is going to be called

37
00:02:13.280 --> 00:02:15.680
add selected job types, just like our description.

38
00:02:16.010 --> 00:02:19.550
And we're going to provide the state as well as an array of some job types.

39
00:02:19.850 --> 00:02:23.750
So just to make this a little bit clearer, let's say instead of org one in work, two, we're going

40
00:02:23.750 --> 00:02:25.490
to provide two sample job types.

41
00:02:25.790 --> 00:02:30.200
So for example, we'll do full time and let's do part time.

42
00:02:31.580 --> 00:02:37.100
And then what we expect is after we run this mutation, we'll expect our original state object to have

43
00:02:37.100 --> 00:02:37.880
been modified.

44
00:02:38.270 --> 00:02:43.130
So on my state object, my selected job types property course update.

45
00:02:43.130 --> 00:02:48.470
This will be the array that we received as the mutation second argument.

46
00:02:48.480 --> 00:02:52.880
So this thing right here, so very similar to the test above, we're just going to receive an array

47
00:02:52.880 --> 00:02:57.020
and we're going to override our selected job types to hold that information.

48
00:02:57.830 --> 00:03:02.900
And as the user assume it, you know, we're assuming in the future the user is going to select a bunch

49
00:03:02.900 --> 00:03:05.420
of checkboxes, we're going to get an array of those up to date values.

50
00:03:05.600 --> 00:03:07.340
We're going to overwrite that part of our state.

51
00:03:07.760 --> 00:03:09.800
So we're going to need to define a mutation.

52
00:03:09.800 --> 00:03:13.070
But before we do that, we're going to store a constant for this thing.

53
00:03:13.070 --> 00:03:16.580
So first, let's head to our constants docs file.

54
00:03:17.540 --> 00:03:23.840
And here I'm going to create a new section of constants, let's call it job types in a comment.

55
00:03:24.620 --> 00:03:29.690
And of course, we're going to call our constant ads selected job types, which is the exact same thing

56
00:03:29.690 --> 00:03:30.920
we defined in our tests.

57
00:03:31.280 --> 00:03:33.590
So add selected job types.

58
00:03:34.900 --> 00:03:35.860
Save that or test.

59
00:03:35.860 --> 00:03:37.450
They're not going to pass just by that alone.

60
00:03:37.750 --> 00:03:41.560
However, what we can do afterwards is open up our mutations file.

61
00:03:41.770 --> 00:03:44.260
That's where we are defining all of our mutations.

62
00:03:44.500 --> 00:03:47.860
We can start by importing our newly defined constants to right here.

63
00:03:48.280 --> 00:03:51.190
Add selected job types is the constant we just defined.

64
00:03:51.670 --> 00:03:53.500
And then let's define the mutation for it.

65
00:03:53.530 --> 00:03:59.140
So right here I'm going to use my constant n line reference, its string value as the name of my method.

66
00:03:59.390 --> 00:04:04.600
Any mutation method will always receive the view, text or state as its first argument, and then any

67
00:04:04.600 --> 00:04:07.000
secondary arguments or third arguments are up to us.

68
00:04:07.240 --> 00:04:13.210
We can see in our intended design on the right hand side in our test, that we want the argument here

69
00:04:13.210 --> 00:04:15.550
to be an array of these selected job types.

70
00:04:15.790 --> 00:04:17.620
So let's call it something like job types.

71
00:04:19.270 --> 00:04:20.320
And then what are we going to do?

72
00:04:20.320 --> 00:04:22.690
The exact same thing we did with organizations above.

73
00:04:22.720 --> 00:04:27.700
We're going to take our View Store State, which has a property called Selected Job Types, and we're

74
00:04:27.700 --> 00:04:31.300
simply going to replace the array there with the new array that we are receiving.

75
00:04:31.570 --> 00:04:35.950
And this logic is presumably going to run every single time the user selects a checkbox.

76
00:04:36.400 --> 00:04:37.990
So we're going to let our tests rerun.

77
00:04:37.990 --> 00:04:42.610
I think all of them are rerunning because we modified the constants file and a lot of files are dependent

78
00:04:42.610 --> 00:04:42.850
on it.

79
00:04:43.150 --> 00:04:45.400
But once everything runs, we can see that everything passes.

80
00:04:45.640 --> 00:04:46.810
So things are looking great.

81
00:04:46.820 --> 00:04:51.910
We have a new slice of your store state and then we're going to have the mutation to receive the user

82
00:04:51.930 --> 00:04:58.390
selected job types, which means in theory, in our state, once all of these are up to date, we have

83
00:04:58.390 --> 00:05:03.670
all the information we need to write a getter that's going to use this information and this information

84
00:05:03.760 --> 00:05:05.350
to filter the jobs right here.

85
00:05:05.590 --> 00:05:09.730
And we can technically build that logic out without even worrying about the component yet, because

86
00:05:09.730 --> 00:05:12.640
in theory, we're going to have everything on the view side of things.

87
00:05:12.850 --> 00:05:17.230
So we're going to start wiring up the test for that getter, or maybe a modified getter in the very

88
00:05:17.230 --> 00:05:17.860
next lesson.
