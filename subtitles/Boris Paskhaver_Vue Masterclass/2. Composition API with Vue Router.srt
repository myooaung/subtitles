1
00:00:00,610 --> 00:00:01,300
Okay.

2
00:00:01,300 --> 00:00:04,360
So here I am back in our job search form component.

3
00:00:04,630 --> 00:00:10,510
And as a reminder, when the user submits the form, in other words, when the user provides a role

4
00:00:10,510 --> 00:00:16,360
and the location and clicks the search button, we run a method right here called Search for Jobs.

5
00:00:16,600 --> 00:00:19,840
And that method down below is right here.

6
00:00:20,050 --> 00:00:25,510
And what it does is it talks to the view router, which is available via the dollar sign router property

7
00:00:25,720 --> 00:00:31,840
and it evokes the push method on the router to navigate the user to the job results page and also create

8
00:00:31,840 --> 00:00:37,510
some query params based on the values that they have entered into the input fields which have also made

9
00:00:37,510 --> 00:00:39,820
their way into the components data.

10
00:00:40,210 --> 00:00:46,180
So they're basically wiring up the URL that they need to navigate the user to to show them the job results

11
00:00:46,180 --> 00:00:47,050
that they care about.

12
00:00:47,440 --> 00:00:52,960
So this presents an interesting challenge for us because we know in our setup method that we do not

13
00:00:52,960 --> 00:00:58,720
have access to the this keyword and we also thus don't have access to the dollar sign router property

14
00:00:58,900 --> 00:01:00,610
which represents the view router.

15
00:01:00,610 --> 00:01:00,910
Right.

16
00:01:01,150 --> 00:01:07,120
Remember in our old implementation, what Vue router does is it automatically makes itself available

17
00:01:07,150 --> 00:01:13,330
on every component via this property the exact same way that, for example, view X makes its store

18
00:01:13,330 --> 00:01:16,030
available via a this Vista dollar sign store.

19
00:01:16,210 --> 00:01:18,250
But now we don't have the this keyword.

20
00:01:18,400 --> 00:01:23,050
So where are we going to get our router from in order to emulate this functionality?

21
00:01:23,410 --> 00:01:29,020
Well, as it turns out, we're going to be able to use helper functions from other libraries to give

22
00:01:29,020 --> 00:01:31,960
us access to the pieces of data that we need.

23
00:01:32,320 --> 00:01:34,960
So let me show you the solution right up top here.

24
00:01:35,230 --> 00:01:40,180
I'm going to import a function not from view, but from the view router library.

25
00:01:40,390 --> 00:01:44,470
And that function is called use router.

26
00:01:45,820 --> 00:01:51,400
And make sure to import it from the View Router Library because it is not part of the core view library.

27
00:01:51,400 --> 00:01:55,360
It is specifically related to view router, which is how we navigate around the app.

28
00:01:55,810 --> 00:01:59,110
So these functions, these helper functions are called composable.

29
00:01:59,320 --> 00:02:04,960
And basically what they allow us to do is get access to important pieces of information within our set

30
00:02:04,960 --> 00:02:05,530
up method.

31
00:02:05,800 --> 00:02:11,020
There's sort of these helper utility functions that we can invoke as needed in as many components as

32
00:02:11,020 --> 00:02:11,350
needed.

33
00:02:11,350 --> 00:02:16,330
They are reusable, so it works like you might expect in our setup method right here.

34
00:02:16,630 --> 00:02:19,360
I'm going to invoke the use router function.

35
00:02:19,810 --> 00:02:24,220
And what that is going to give back to me is the view router object automatically.

36
00:02:24,490 --> 00:02:28,690
So I can simply assign this to a variable like connect router.

37
00:02:30,380 --> 00:02:37,040
So this is the exact same object that I have represented here with this, the same router, and I can

38
00:02:37,040 --> 00:02:38,900
use it in the exact same way.

39
00:02:39,440 --> 00:02:43,190
So knowing that the rest of the steps should hopefully be pretty clear.

40
00:02:43,580 --> 00:02:49,070
So we know that our component needs a search for jobs method or function to exist.

41
00:02:49,340 --> 00:02:54,470
So we need to make sure we export or return something called search for jobs from this object right

42
00:02:54,470 --> 00:02:54,710
here.

43
00:02:55,070 --> 00:02:56,930
So right here, let's define that.

44
00:02:57,230 --> 00:03:04,100
And as we know, to replace methods in the options API, we use plain JavaScript functions in the composition

45
00:03:04,100 --> 00:03:04,520
API.

46
00:03:04,790 --> 00:03:07,130
So right here, I'll define an arrow function in line.

47
00:03:07,400 --> 00:03:09,020
I'll call it Search for jobs.

48
00:03:10,550 --> 00:03:11,750
There's my arrow function.

49
00:03:12,530 --> 00:03:18,170
And before we even write the body so we don't forget, let's just automatically provide search for jobs

50
00:03:18,170 --> 00:03:20,630
right here so that it becomes available to the template.

51
00:03:21,320 --> 00:03:21,650
All right.

52
00:03:21,650 --> 00:03:22,580
It's as easy as that.

53
00:03:22,590 --> 00:03:27,290
So now when the user submits the form, we're going to run these search for jobs logic that we define

54
00:03:27,290 --> 00:03:28,460
in this function's body.

55
00:03:28,850 --> 00:03:31,930
And here we want to copy the logic we have right here.

56
00:03:31,940 --> 00:03:36,200
So we're going to take our router, we're going to call the push method, and then we're going to provide

57
00:03:36,200 --> 00:03:37,550
the object that we see below.

58
00:03:37,790 --> 00:03:41,710
So name represents the route name that we want to direct the user to.

59
00:03:41,720 --> 00:03:49,280
We want to take him to the job results root and then remember the query property here creates the automatic

60
00:03:49,280 --> 00:03:51,470
query params at the end of the URL.

61
00:03:51,500 --> 00:03:59,270
So this is how we provide things like role equals, you know, developer and location equals New York.

62
00:03:59,300 --> 00:04:03,710
This is what we attach to the end of the URL string when we go to the job results page.

63
00:04:04,880 --> 00:04:09,710
So we're going to need to create the exact same two properties that we see below role and location.

64
00:04:10,130 --> 00:04:14,390
The question is how do we get the current piece of information that we need right here?

65
00:04:14,510 --> 00:04:19,340
While you might think it would be as simple as role, and that's a good way to start.

66
00:04:19,370 --> 00:04:25,130
Unfortunately, it's not quite correct because remember, role is not just the plain string from what

67
00:04:25,130 --> 00:04:26,570
the users type into the input.

68
00:04:26,750 --> 00:04:33,830
Role is a reactive object that is monitoring a string in order to actually get the up to date value

69
00:04:33,830 --> 00:04:35,990
of that string inside that reactive object.

70
00:04:36,140 --> 00:04:38,240
We have to use the dot value property.

71
00:04:39,090 --> 00:04:44,190
So that value will give us the actual string whenever a search for jobs executes, which will be whenever

72
00:04:44,190 --> 00:04:49,260
the user submits the form, at which point the role and location reactive objects will have the most

73
00:04:49,260 --> 00:04:53,430
up to date string from the most up to date user input in the text fields.

74
00:04:53,880 --> 00:04:59,070
So similarly, I'm going to add on location and to get that piece of information, I'm going to talk

75
00:04:59,070 --> 00:05:02,460
to my location reactive object that's returned by the ref function.

76
00:05:02,700 --> 00:05:05,820
On that object we have a value property to get what we what we care about.

77
00:05:06,570 --> 00:05:12,420
And once again, even though we're using value here, when we use role and location in our template

78
00:05:12,420 --> 00:05:18,360
right here, we do not need to provide the value extension because view knows automatically how to make

79
00:05:18,360 --> 00:05:20,880
that connection with the actual HTML template.

80
00:05:21,000 --> 00:05:24,810
We only need to use that value right here in our JavaScript section.

81
00:05:25,140 --> 00:05:27,870
So with that we have defined the function that's going to run.

82
00:05:27,870 --> 00:05:31,170
When we submit the form, we have made sure to return it right here.

83
00:05:31,320 --> 00:05:34,470
So we have replaced all of the original functionality that we have here.

84
00:05:34,650 --> 00:05:40,080
So we can go ahead and remove the data method and the methods object right here and there we go.

85
00:05:40,680 --> 00:05:43,920
Now the component is using the new composition API.

86
00:05:44,370 --> 00:05:47,280
And once again the benefit is that we can see a lot of the data together.

87
00:05:47,400 --> 00:05:49,560
We can see that it's being used right here.

88
00:05:49,800 --> 00:05:54,360
We can lump together pieces of functionality together and just to show you that everything is working,

89
00:05:54,480 --> 00:05:56,220
I'm going to take you to the browser right now.

90
00:05:57,690 --> 00:05:58,620
So here's my role.

91
00:05:58,620 --> 00:06:00,270
Let's type in something like developer.

92
00:06:00,570 --> 00:06:02,580
Let's type in a location like NYC.

93
00:06:02,850 --> 00:06:05,910
And when I navigate using the search button, everything is still working.

94
00:06:05,910 --> 00:06:10,890
We are correctly navigating the user using Vue router, which means that use router function worked

95
00:06:10,890 --> 00:06:14,010
as expected and we are still creating the correct query params.

96
00:06:14,220 --> 00:06:19,920
Using that app object, we provide it to the query property and also that means that we are getting

97
00:06:19,920 --> 00:06:25,080
the right most up to date string values from the text inputs on the previous page and providing them

98
00:06:25,080 --> 00:06:25,620
right here.

99
00:06:25,950 --> 00:06:31,890
So we haven't created any new functionality, but we have updated our old component to now use the composition

100
00:06:31,890 --> 00:06:32,370
API.

101
00:06:32,580 --> 00:06:33,930
Everything is still working.

102
00:06:34,260 --> 00:06:39,570
All right, so whenever you need to use router functionality in a component is simply import the use

103
00:06:39,570 --> 00:06:45,420
router function from Vue router, you invoke it in the body of your setup method and it's going to give

104
00:06:45,420 --> 00:06:50,070
you a reactive router object that you can then work with in the body of your setup method.

105
00:06:50,400 --> 00:06:52,590
And with that, I will see you in the next lesson.
