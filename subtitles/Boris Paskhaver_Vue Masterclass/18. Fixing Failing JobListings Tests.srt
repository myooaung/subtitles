1
00:00:00,390 --> 00:00:01,410
All right.

2
00:00:01,410 --> 00:00:05,700
So we saw in the previous lesson that we had some failing tests in our test suite.

3
00:00:05,970 --> 00:00:10,980
So what I want to do now is run the entire test suite, not just the changed files.

4
00:00:11,280 --> 00:00:17,520
So I'm going to run NPM, run test colon unit, and that is going to run every single test that just

5
00:00:17,520 --> 00:00:18,120
can find.

6
00:00:18,240 --> 00:00:19,890
And we're going to see what's failing.

7
00:00:20,700 --> 00:00:24,090
So I'm going to let this run for a couple of seconds and we're going to see right here.

8
00:00:24,100 --> 00:00:26,880
The good news is, is we have one failing test suite.

9
00:00:27,060 --> 00:00:30,900
What that means is we only have one file where the tests are failing.

10
00:00:30,900 --> 00:00:33,030
So just about everything is working correctly.

11
00:00:33,180 --> 00:00:38,070
We just have one failing test suite and in the test file we have eight tests that are failing.

12
00:00:38,370 --> 00:00:43,620
The good news about it being one file is that it likely means that it's isolated to just that component

13
00:00:43,620 --> 00:00:44,910
or that section of the code base.

14
00:00:45,120 --> 00:00:47,670
And we could fix it by fixing something in this file.

15
00:00:48,060 --> 00:00:52,200
So if I scroll up all the way to the top here, we're going to ignore all of this output for now.

16
00:00:52,590 --> 00:00:57,480
You're going to see that the failure is coming from the job listings that test, that file.

17
00:00:57,750 --> 00:01:02,430
The good news here is that it's not coming from our tests for the View Store.

18
00:01:02,640 --> 00:01:05,520
So all of our getter logic, all that stuff is still correct.

19
00:01:05,670 --> 00:01:10,200
Something is going wrong in the job listings component, and that's the one that we were just working

20
00:01:10,200 --> 00:01:10,380
on.

21
00:01:10,710 --> 00:01:11,510
So let me show you this.

22
00:01:11,520 --> 00:01:12,720
I'm going to open up the component.

23
00:01:12,720 --> 00:01:16,140
Here it is, job listings, plural dot view.

24
00:01:16,860 --> 00:01:21,610
And then I'm also going to open up the corresponding test suite and that's going to be job listings

25
00:01:21,610 --> 00:01:22,410
dot test.

26
00:01:22,710 --> 00:01:25,200
Yes, I'm going to drag it over to the right hand side.

27
00:01:26,100 --> 00:01:31,020
And I want you to focus your eyes here on this create store factory function on line 13.

28
00:01:31,320 --> 00:01:35,190
So it might have been a little while since we've been in this test file.

29
00:01:35,430 --> 00:01:40,290
But as a reminder, we use these factory functions to create mock view objects.

30
00:01:40,290 --> 00:01:45,300
We're not using a real store in our tests because we want to keep things really simple.

31
00:01:45,480 --> 00:01:50,580
And so we typically create mock stores which are just plain JavaScript objects that play the role of

32
00:01:50,580 --> 00:01:51,270
a view store.

33
00:01:51,480 --> 00:01:55,680
For example, they may have a state property, they may have a dispatch method, they may have a commit

34
00:01:55,680 --> 00:01:56,880
method, etc..

35
00:01:57,690 --> 00:02:01,920
And so this is the factory function that is creating our sample view store.

36
00:02:02,280 --> 00:02:03,240
Now take a look here.

37
00:02:03,270 --> 00:02:08,010
In this mock view store, we have a state property and we have a jobs property inside it.

38
00:02:08,280 --> 00:02:13,680
The reason we have this is because in our former implementation, you may recall that we were using

39
00:02:13,680 --> 00:02:19,590
the map state helper function and we were providing it with a string of jobs because we wanted to reference

40
00:02:19,590 --> 00:02:25,050
the jobs property, honor, view X Store and make that available via this state jobs.

41
00:02:25,260 --> 00:02:30,120
So even though we were using a mock JavaScript object, we still needed the same setup.

42
00:02:30,270 --> 00:02:35,460
So that map state could say, look at the state property, look at jobs, take that property and make

43
00:02:35,460 --> 00:02:38,400
it a part of the component via the this keyword, this state jobs.

44
00:02:38,810 --> 00:02:43,400
We're now we're no longer using the jobs property on the state object.

45
00:02:43,410 --> 00:02:47,520
It doesn't matter whether that state object is coming from view or from a mock object, we're not using

46
00:02:47,520 --> 00:02:48,150
it at all.

47
00:02:48,870 --> 00:02:52,050
Instead, we're relying on a getter notice here.

48
00:02:52,050 --> 00:02:55,170
We're relying everywhere on filter jobs by organizations.

49
00:02:55,380 --> 00:02:57,900
That is not a piece of state that is a getter.

50
00:02:57,900 --> 00:03:01,530
We're now using map getters to get that getter that's going to give us an array.

51
00:03:01,650 --> 00:03:03,960
And we're using that array here to calculate the length.

52
00:03:04,110 --> 00:03:07,230
We're using that array here to slice the first ten jobs, etc..

53
00:03:07,560 --> 00:03:09,690
So the problem here is not a big one.

54
00:03:09,690 --> 00:03:14,460
The problem is that our tests are suited for our previous implementation, which was relying on state

55
00:03:14,640 --> 00:03:17,850
and we're no longer relying on state, relying on getters.

56
00:03:18,210 --> 00:03:23,520
So all we need to do is fix up our create store function here and perhaps any future references down

57
00:03:23,520 --> 00:03:26,750
below to state to instead rely on a getter, right?

58
00:03:26,790 --> 00:03:28,680
Or at least a mocked up version of a getter.

59
00:03:29,040 --> 00:03:35,460
So you may recall earlier in the course I showed you that on any single component, we have access to

60
00:03:35,460 --> 00:03:36,750
this the dollar sign store.

61
00:03:37,110 --> 00:03:39,390
And of course, that is our view store object.

62
00:03:39,570 --> 00:03:42,030
And on that object we have, for example, a state property.

63
00:03:42,270 --> 00:03:46,350
We are we have a commit method, we have a dispatch method, etc. These are all the things that we've

64
00:03:46,350 --> 00:03:47,070
been marking out.

65
00:03:47,370 --> 00:03:53,460
Well, we similarly have on a real view store we have a getters property that gets us access to the

66
00:03:53,460 --> 00:03:55,260
entire Getters object of methods.

67
00:03:55,440 --> 00:03:59,970
We showed you this a little bit earlier in the course, so all we need to do is we need to modify our

68
00:03:59,970 --> 00:04:02,670
mock store right here to have a getters property.

69
00:04:02,820 --> 00:04:08,160
Because if we have a getters property and if that object has a filter jobs by organization's property,

70
00:04:08,340 --> 00:04:13,650
then we're going to be able to suit this component's implementation again without relying on the real

71
00:04:13,650 --> 00:04:14,340
view store.

72
00:04:14,730 --> 00:04:20,070
So if we know that in the real world View X has a store that has a getters property, in our mock store

73
00:04:20,070 --> 00:04:24,300
right here, we no longer need a state property so we can delete that.

74
00:04:24,450 --> 00:04:26,190
We just need a getters property.

75
00:04:26,460 --> 00:04:30,060
And of course we can have multiple getters, which is why getters is going to be an object.

76
00:04:30,210 --> 00:04:34,470
This is the exact same design that they have in view X, but again, we're just keeping it simple by

77
00:04:34,470 --> 00:04:36,060
using a simple JavaScript object.

78
00:04:36,420 --> 00:04:41,160
So in order for a component to work, we just need a single getter to exist.

79
00:04:41,340 --> 00:04:45,090
What getter do we need to exist in order for map getters to work right here?

80
00:04:45,330 --> 00:04:47,040
Well, we need to have a getter exactly.

81
00:04:47,040 --> 00:04:50,280
Called filter jobs by organizations.

82
00:04:51,570 --> 00:04:55,050
And in the real world, what is this getter going to return to us when we use it?

83
00:04:55,050 --> 00:04:59,550
On The Real View Store, it's going to give us back an array of filter job objects.

84
00:04:59,900 --> 00:05:02,300
Well, for now, let's just provide an empty array.

85
00:05:02,420 --> 00:05:04,310
Just a sample array.

86
00:05:04,430 --> 00:05:06,190
Because we need something to return, right?

87
00:05:06,200 --> 00:05:07,640
We need some kind of property to assign.

88
00:05:07,730 --> 00:05:12,950
And let's see how far this gets us, because as long as we have this getter right here, then this map

89
00:05:12,950 --> 00:05:13,670
getters should work.

90
00:05:13,820 --> 00:05:15,500
We're going to get back an array from it.

91
00:05:15,710 --> 00:05:20,720
And so this that filter jobs that organizations right here should now evaluate to an empty array, which

92
00:05:20,720 --> 00:05:22,940
is fine because the length property will exist on it.

93
00:05:23,150 --> 00:05:28,040
And right here, filter jobs by organizations is going to be this empty array, which is also fine because

94
00:05:28,040 --> 00:05:30,860
we're still going to be able to call the slice method on an empty array.

95
00:05:31,220 --> 00:05:36,680
So I'm going to save this and right here I'm going to run NPM, run, test, colon, watch.

96
00:05:37,160 --> 00:05:39,080
We're going to run just again and watch mode.

97
00:05:40,290 --> 00:05:44,310
You're going to see it's going to rerun the job listings component file, which is the exact one that

98
00:05:44,310 --> 00:05:44,670
we want.

99
00:05:44,850 --> 00:05:48,630
And you'll notice we've reduced it down from eight failures down to two.

100
00:05:48,930 --> 00:05:53,550
So simply by changing this store detail that our component needs to work, we've already eliminated

101
00:05:53,550 --> 00:05:54,810
six of those errors.

102
00:05:55,140 --> 00:05:58,650
So if I scroll up, we're going to see we still have a couple failing tests right here.

103
00:05:58,860 --> 00:06:03,960
This one creates a job listing for a maximum of ten jobs, and this one shows a link to next page.

104
00:06:04,260 --> 00:06:07,050
So let's scroll down to those specific tests and fix those errors.

105
00:06:07,290 --> 00:06:08,370
So if I scroll down here.

106
00:06:09,790 --> 00:06:10,720
This one is fine.

107
00:06:10,870 --> 00:06:12,030
This one is where we're failing.

108
00:06:12,040 --> 00:06:14,560
It creates a job listing for a maximum of ten jobs.

109
00:06:14,590 --> 00:06:19,330
Okay, so here's where we have to get a little bit more specific because our getter needs to actually

110
00:06:19,330 --> 00:06:22,540
return a certain amount of jobs in order to test that.

111
00:06:22,540 --> 00:06:27,270
We have exactly ten jobs rendered right now are filter jobs by organizations.

112
00:06:27,280 --> 00:06:29,440
Getter is going to return an array of zero.

113
00:06:29,470 --> 00:06:32,590
So we obviously cannot check that we have ten job listings on the page.

114
00:06:32,830 --> 00:06:37,720
So all we need to do is customize the getter to instead return an array of 15 objects.

115
00:06:37,720 --> 00:06:37,930
Right?

116
00:06:38,110 --> 00:06:43,150
So luckily we created our create store function right here to be very customizable.

117
00:06:43,240 --> 00:06:47,530
Remember, we can provide the config object right here and we do structure its properties so we can

118
00:06:47,530 --> 00:06:53,080
provide a configuration object with its own getters property with its own filter jobs by organizations

119
00:06:53,080 --> 00:06:58,690
array set to whatever we want, and that will override this default implementation in our factory.

120
00:06:58,990 --> 00:07:01,540
So scroll down right here.

121
00:07:01,660 --> 00:07:03,580
We're no longer going to need the state, right?

122
00:07:03,580 --> 00:07:04,750
Because we don't care about the state.

123
00:07:05,020 --> 00:07:10,540
What we instead need is going to be a getters property and that's going to be an object.

124
00:07:10,840 --> 00:07:16,060
And in our object we're going to have our filter jobs by organizations, property, the exact same one

125
00:07:16,060 --> 00:07:17,500
we have above, but that's by intent.

126
00:07:17,740 --> 00:07:23,680
And here I'm going to copy this property that I have right here, because previously we were using this

127
00:07:23,680 --> 00:07:27,430
idea of having 15 jobs to populate the original U.S. store state.

128
00:07:27,610 --> 00:07:31,390
Now, I just need 15 jobs to get from filter jobs by organizations.

129
00:07:31,810 --> 00:07:34,000
And if I cut and paste this right here.

130
00:07:35,270 --> 00:07:37,250
And remove this and save.

131
00:07:37,250 --> 00:07:40,520
We should see that this test is going to pass and indeed it does right here.

132
00:07:40,940 --> 00:07:45,320
So just as a reminder of what we're doing here, this test is testing that we create a job listing for

133
00:07:45,320 --> 00:07:46,550
a maximum of ten jobs.

134
00:07:46,880 --> 00:07:53,510
So we get some kind of array, let's say 215 jobs, and we need to narrow that down to slice it down

135
00:07:53,510 --> 00:07:54,470
to ten.

136
00:07:54,800 --> 00:07:59,480
So previously we were getting that array of jobs from our state, from the jobs property.

137
00:07:59,600 --> 00:08:02,690
Now we're getting it from our filter jobs by organizations get it.

138
00:08:02,990 --> 00:08:04,400
But the logic remains the same.

139
00:08:04,400 --> 00:08:08,660
We're going to create that getter to return exactly 15 jobs in this case.

140
00:08:08,810 --> 00:08:11,000
We're going to fill an array with 15 empty objects.

141
00:08:11,000 --> 00:08:14,100
But that is good enough because we don't care about what those objects hold.

142
00:08:14,210 --> 00:08:15,890
We just need an array of 15 of them.

143
00:08:16,130 --> 00:08:19,460
So our V4 directive is going to end right over something instead of an empty array.

144
00:08:19,700 --> 00:08:24,290
And then we're simply going to test this slice logic here that's going to use the index to select the

145
00:08:24,290 --> 00:08:30,140
first ten elements and the first ten jobs from that array and iterate over them to create ten job listings

146
00:08:30,140 --> 00:08:30,500
component.

147
00:08:30,800 --> 00:08:33,650
So the core heart of this logic remains the same.

148
00:08:33,770 --> 00:08:34,940
We're managing a component.

149
00:08:35,090 --> 00:08:39,350
We're finding a given data test attribute, which represents a job listing component.

150
00:08:40,070 --> 00:08:43,010
This one right here, and we should still expect to see ten from them.

151
00:08:43,190 --> 00:08:48,860
The only thing that we needed to alter is the setup to get the component to such a state where it would

152
00:08:48,860 --> 00:08:51,140
have an array of something to select.

153
00:08:51,140 --> 00:08:57,710
Ten from our original implementation up here is not good because we can't filter ten from an array of

154
00:08:57,950 --> 00:08:58,760
empty jobs.

155
00:08:59,030 --> 00:09:02,360
Here we can filter ten from an array of 15 jobs.

156
00:09:02,600 --> 00:09:06,950
But the key differential is we're getting the jobs from a getter instead of from our original state

157
00:09:06,950 --> 00:09:07,400
property.

158
00:09:07,550 --> 00:09:10,670
It was that big change in our component that broke all of our tests.

159
00:09:10,790 --> 00:09:16,580
And so we need to update any one of our reliance here on the state to now rely on a getter that is sufficient

160
00:09:16,580 --> 00:09:17,690
for what that test needs.

161
00:09:18,050 --> 00:09:24,320
So if I scroll down here, we're not doing anything unique with our getters right here or right here.

162
00:09:24,470 --> 00:09:29,840
And if I scroll down to the failing test, which is shows link to next page right here, we can see

163
00:09:29,840 --> 00:09:34,430
once again we are failing because we are relying on our default getter up top.

164
00:09:34,580 --> 00:09:38,270
In order to have a next page, we need to have at least 11 jobs.

165
00:09:38,420 --> 00:09:39,950
We need to have more than ten.

166
00:09:40,250 --> 00:09:43,150
So right here I can follow the exact same approach as I did above.

167
00:09:43,160 --> 00:09:51,560
I can provide my getters property, I can provide my getter that I need to exist called filter jobs

168
00:09:51,560 --> 00:09:52,310
by organizations.

169
00:09:52,520 --> 00:09:55,190
This needs to be an array of at least 11 jobs.

170
00:09:55,370 --> 00:09:57,470
So I'm going to copy my former logic here.

171
00:09:57,470 --> 00:09:58,700
To create an array of 15.

172
00:09:58,880 --> 00:10:00,140
15 is just arbitrary.

173
00:10:00,140 --> 00:10:02,420
This would work with 11 or 12 or however many.

174
00:10:02,630 --> 00:10:06,110
I'm just going to do 15 here and I'm going to remove my former state reference.

175
00:10:07,130 --> 00:10:10,460
So right here we now have a getter for the component to rely on.

176
00:10:10,550 --> 00:10:14,360
That getter is going to give the component an array that fulfills the requirements for this test to

177
00:10:14,360 --> 00:10:14,750
pass.

178
00:10:14,960 --> 00:10:16,100
And everything is working great.

179
00:10:16,400 --> 00:10:18,850
Now all of our tests are now passing just fine.

180
00:10:18,860 --> 00:10:23,000
However, I do want to scroll down to show you that there is one more test right here.

181
00:10:23,000 --> 00:10:27,530
In fact, two more, I think that are still relying on the former implementation of state.

182
00:10:27,800 --> 00:10:32,990
So it looks like the default implementation of the getter is okay, but I just want to copy our code

183
00:10:32,990 --> 00:10:36,110
from above to remove any form a reference to this former implementation.

184
00:10:36,410 --> 00:10:41,210
So I'm just going to copy this logic right here of store equals create store and I'm going to replace

185
00:10:41,210 --> 00:10:43,880
this reliance on our mock store state.

186
00:10:44,750 --> 00:10:46,970
And right here, I'm going to do the exact same thing.

187
00:10:48,500 --> 00:10:49,400
I'm going to save that.

188
00:10:49,400 --> 00:10:50,390
Let everything we run for.

189
00:10:50,390 --> 00:10:52,790
All of our tests and job listings are passing.

190
00:10:52,970 --> 00:10:56,840
I'm going to shut this process down using control C on a mac.

191
00:10:57,050 --> 00:10:58,610
It might be the same on windows.

192
00:10:58,850 --> 00:11:03,890
And then I'm going to once again run NPM run test colon unit because I once again want to run everything.

193
00:11:04,010 --> 00:11:06,890
Make sure that all of our tests are passing completely.

194
00:11:08,560 --> 00:11:10,570
Let's give it a couple of seconds to run and there we go.

195
00:11:10,600 --> 00:11:15,520
So we have 16 test suites or 16 test files, which have a total of 53 tests.

196
00:11:15,670 --> 00:11:16,930
All of them are passing.

197
00:11:17,230 --> 00:11:21,550
So again, to summarize what we learned in this lesson, the reason that our tests for the job listings

198
00:11:21,550 --> 00:11:26,680
component broke is because previously job listings was relying on that state and a piece of York state.

199
00:11:26,890 --> 00:11:32,320
Now job listings is relying on map getters and a getter from our view store.

200
00:11:32,500 --> 00:11:39,100
So in order to have a mock store that satisfies that implementation, that satisfies that interface

201
00:11:39,100 --> 00:11:44,410
that this thing needs in order to run, we need to have a store with a getters property with the getter

202
00:11:44,410 --> 00:11:47,410
that this component needs, which is filtered jobs by organizations.

203
00:11:47,560 --> 00:11:53,530
We can customize it to be an array of an empty array and an array of one job ten jobs, however much

204
00:11:53,530 --> 00:11:53,980
we need.

205
00:11:54,100 --> 00:12:00,610
The point is, we need this getter to exist so that this line right here works to give some kind of

206
00:12:00,610 --> 00:12:05,020
object that has a length property right here and a slice method right here.

207
00:12:05,230 --> 00:12:09,040
As long as we provide an array, we do not need to use a real view store.

208
00:12:09,160 --> 00:12:13,990
We can just use an object with a getters property that has a filter jobs by organizations property set

209
00:12:13,990 --> 00:12:14,500
to an array.

210
00:12:14,680 --> 00:12:17,830
We do not need to involve the real complexity of the book store.

211
00:12:18,010 --> 00:12:23,860
We just need an object that is good enough to play that role, to play that part, to be sufficient

212
00:12:23,860 --> 00:12:26,320
enough to satisfy what the component is looking for.

213
00:12:26,620 --> 00:12:31,330
And because we switched our implementation so drastically, our old tests were expecting something totally

214
00:12:31,330 --> 00:12:31,720
different.

215
00:12:31,870 --> 00:12:34,840
They were expecting the component to be reliant on the store state.

216
00:12:35,020 --> 00:12:36,970
Now we're relying on the store getters.

217
00:12:37,150 --> 00:12:40,810
Once we updated that, you can see most of our tests changed pretty easily.

218
00:12:40,810 --> 00:12:46,450
We just had to change the set up, but the assertions themselves stayed the same and that is a good

219
00:12:46,450 --> 00:12:50,620
sign that we are testing for the right thing, that we are testing the rendering of the correct thing,

220
00:12:50,830 --> 00:12:55,660
the presence of the correct element, etc. All we needed to change was the setup in our test, which

221
00:12:55,660 --> 00:12:59,170
is perfect because that is a reflection of the real world implementation.

222
00:12:59,170 --> 00:13:03,090
That's similarly changed to rely on something totally different from View X.

223
00:13:03,280 --> 00:13:08,800
So I'm really happy with that rather limited amount of work that we needed to do to get all of our tests

224
00:13:08,800 --> 00:13:09,520
passing again.

225
00:13:09,970 --> 00:13:10,330
All right.

226
00:13:10,510 --> 00:13:14,290
So with that, we have completed fixing our failing errors and in the very next lesson, we can write

227
00:13:14,290 --> 00:13:15,160
some more tests.
