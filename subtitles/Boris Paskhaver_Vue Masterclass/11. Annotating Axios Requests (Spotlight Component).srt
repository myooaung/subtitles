1
00:00:00,490 --> 00:00:01,240
Okay.

2
00:00:01,240 --> 00:00:05,320
So the next component we're going to focus on will be our spotlight component.

3
00:00:05,680 --> 00:00:11,280
So let's open up spotlight that view and I will immediately open up to test we as well, which is in

4
00:00:11,300 --> 00:00:12,910
spotlight that test that.

5
00:00:12,910 --> 00:00:18,480
Yes, let me move that over to the right hand side and let's focus on our component first.

6
00:00:18,490 --> 00:00:22,600
As always, we're going to need to add a lang output here and set it to test.

7
00:00:24,100 --> 00:00:30,670
And we're also going to need to import, define component and make sure to wrap our object right here

8
00:00:30,670 --> 00:00:34,150
in a defined component function call like so.

9
00:00:34,720 --> 00:00:35,410
And there we go.

10
00:00:35,740 --> 00:00:42,070
Now, we don't actually have any errors that TypeScript will show us in the outer, but I also think

11
00:00:42,070 --> 00:00:45,730
that we can improve on the typing here because we can discover that it's not perfect.

12
00:00:46,090 --> 00:00:51,400
So, for example, if I hover my mouse over spotlights, you'll see that TypeScript is assuming that

13
00:00:51,400 --> 00:00:56,530
the array is going to be an array of never objects, which basically means it thinks it's an array that

14
00:00:56,530 --> 00:00:57,700
will never be populated.

15
00:00:57,910 --> 00:00:59,320
Now that is not true.

16
00:00:59,320 --> 00:01:03,910
This is actually going to be an array of spotlight objects that we're going to get back from our backend.

17
00:01:04,090 --> 00:01:09,010
Whenever this get spotlight's request executes, which is going to happen when that component mounts,

18
00:01:09,190 --> 00:01:11,890
it's going to receive that array of spotlight objects.

19
00:01:12,080 --> 00:01:15,520
It's going to overwrite our existing empty array with the data.

20
00:01:15,730 --> 00:01:22,090
And as a reminder of what a spotlight looks like, I can always go to my DB that JSON file and here

21
00:01:22,090 --> 00:01:23,380
we have our spotlights and points.

22
00:01:23,680 --> 00:01:28,660
So we are eventually going to have an array of objects like this, not an array of never.

23
00:01:28,900 --> 00:01:32,110
And so as always, it's going to be beneficial if we tell TypeScript this.

24
00:01:32,290 --> 00:01:35,470
So it understands these details that it may not be able to infer.

25
00:01:35,800 --> 00:01:40,360
So what I'm going to do is define an interface called spotlight in my component, and I'm just going

26
00:01:40,360 --> 00:01:40,720
to tell it.

27
00:01:40,720 --> 00:01:46,690
It's going to have these properties I'd set to a number and image title and description set two strings.

28
00:01:46,990 --> 00:01:53,470
So right here in my component and maybe later on, if this is reused in many other places, we may move

29
00:01:53,470 --> 00:01:56,110
this interface to its own separate TypeScript types file.

30
00:01:56,230 --> 00:01:58,210
But for now, I think it's okay to keep it in here.

31
00:01:58,360 --> 00:02:02,230
This, by the way, is valid TypeScript because we declared this on line 13.

32
00:02:02,410 --> 00:02:05,650
So we can write any kind of valid TypeScript code in line here as well.

33
00:02:05,770 --> 00:02:08,260
It's no longer just JavaScript code that's valid.

34
00:02:08,260 --> 00:02:13,630
It's now TypeScript, so we can totally declare an interface right here in the script section and I'll

35
00:02:13,630 --> 00:02:14,470
call it Spotlight.

36
00:02:14,920 --> 00:02:19,960
And I will say that a spotlight object is going to have an ID, which is going to be a number, an IMG

37
00:02:19,960 --> 00:02:26,230
or image property set to a string, a title property also set to a string and finally a description

38
00:02:26,230 --> 00:02:27,670
property also set to a string.

39
00:02:28,480 --> 00:02:33,550
And the way that I can clarify to view what the array is going to hold here is actually by providing

40
00:02:33,550 --> 00:02:36,730
a generic argument type to this raft function call.

41
00:02:37,030 --> 00:02:41,260
So with the way we provide a generic argument, remember when we learned how to do this with our own

42
00:02:41,260 --> 00:02:46,750
functions is when we invoke the function, we provide the type so that TypeScript can provide that type

43
00:02:46,750 --> 00:02:49,510
into the function definition and do type checking that way.

44
00:02:49,720 --> 00:02:55,570
So where we invoke the function, we provide these brackets so the less than sine and the greater than

45
00:02:55,570 --> 00:02:55,870
sine.

46
00:02:56,020 --> 00:03:02,050
And in this case, the generic type argument we provide here will represent the type of the array that

47
00:03:02,050 --> 00:03:03,910
the reactive object is going to wrap.

48
00:03:04,150 --> 00:03:09,430
So right here I want not just a spotlight object, but a array of spotlight objects.

49
00:03:09,430 --> 00:03:12,400
So at the very end here, I'm going to provide my square bracket syntax.

50
00:03:12,640 --> 00:03:17,380
So what I'm saying here is this is always going to be an array of spotlight objects, and every spotlight

51
00:03:17,410 --> 00:03:19,210
object must implement this interface.

52
00:03:19,210 --> 00:03:20,710
So it must have these four properties.

53
00:03:20,920 --> 00:03:25,810
And just because it's an empty array doesn't present a problem because Spotlight just says, okay,

54
00:03:25,810 --> 00:03:27,880
this is an array with zero spotlight objects.

55
00:03:28,120 --> 00:03:33,430
But right now we can see that it recognizes that it's going to be a ref that's during an array of objects

56
00:03:33,430 --> 00:03:36,700
that have this type of shape ID image title description.

57
00:03:37,030 --> 00:03:43,150
One additional place where we can provide more description to TypeScript about what it's receiving is

58
00:03:43,150 --> 00:03:44,800
right here in the get method call.

59
00:03:44,950 --> 00:03:49,810
By default, TypeScript is only looking at your code in the editor before it's actually running in the

60
00:03:49,810 --> 00:03:50,290
browser.

61
00:03:50,530 --> 00:03:56,080
So TypeScript cannot make an API request for you in this code and figure out what the shape of the response

62
00:03:56,080 --> 00:03:57,400
from our end point is going to look like.

63
00:03:57,640 --> 00:03:59,980
However, we know it's going to be this exact thing.

64
00:03:59,980 --> 00:04:04,540
It's going to be a spotlight array so we can tell this to TypeScript, we can fill in the blanks.

65
00:04:04,540 --> 00:04:06,820
The typescript is not able to figure out by itself.

66
00:04:07,120 --> 00:04:12,850
So right here the get method from the Access Library also accepts a generic argument right here, and

67
00:04:12,850 --> 00:04:18,790
it specifies what is going to be the a type of the response that we're going to get back from this spotlight's

68
00:04:18,790 --> 00:04:19,150
endpoint.

69
00:04:19,300 --> 00:04:21,040
And that's going to be the exact same thing as above.

70
00:04:21,040 --> 00:04:23,020
It's going to be an array of spotlight objects.

71
00:04:23,290 --> 00:04:24,760
So right here, spotlight like that.

72
00:04:25,450 --> 00:04:29,890
And now we're basically validating with TypeScript that we're going to get this type of array back and

73
00:04:29,890 --> 00:04:35,800
we are writing it to a reactive object that expects a data value of the exact same shape.

74
00:04:35,920 --> 00:04:40,240
So we're allowing TypeScript to perform that check and if it finds any mismatches, then it will let

75
00:04:40,240 --> 00:04:40,630
us know.

76
00:04:40,720 --> 00:04:41,110
All right.

77
00:04:41,350 --> 00:04:44,080
So that we can save this file and we are all set here.

78
00:04:44,380 --> 00:04:47,290
Now, let's move on to our test file, the usual protocol.

79
00:04:47,560 --> 00:04:53,260
So right here, I'm going to change the test to have a test extension that may present its own share

80
00:04:53,260 --> 00:04:53,710
of problems.

81
00:04:53,980 --> 00:04:57,520
We can see here it's the usual one of Microsoft value not working.

82
00:04:57,730 --> 00:04:58,840
This is coming from us.

83
00:05:00,040 --> 00:05:03,160
Mark resolving the value of the Axios get method.

84
00:05:03,280 --> 00:05:06,850
We are marking out Axios right here after we imported online number two.

85
00:05:07,120 --> 00:05:09,700
So I'm going to follow the same approach as always right here.

86
00:05:09,970 --> 00:05:15,790
I'll declare a concept called Axios, get Mark and I'm going to get not just the Axios object, but

87
00:05:15,790 --> 00:05:17,800
more specifically the get method on it.

88
00:05:18,070 --> 00:05:22,720
And I will tell TypeScript to not treat it as its general inferred type, but rather to interpret it

89
00:05:22,720 --> 00:05:23,800
as being of type.

90
00:05:23,800 --> 00:05:24,700
Just Mark.

91
00:05:25,300 --> 00:05:30,220
And that means down below here I have to replace Axios, get with my Axios, get mark reference.

92
00:05:30,460 --> 00:05:32,620
Keeping in mind this is still the same object.

93
00:05:32,620 --> 00:05:37,210
But with this constant, the advantage is that TypeScript interprets it as having a different type,

94
00:05:37,540 --> 00:05:42,820
same object, but interpreted differently, understood differently by TypeScript as having this type

95
00:05:42,820 --> 00:05:43,450
of just Mark.

96
00:05:43,660 --> 00:05:49,570
And TypeScript knows that an object of type just Mark has a microsoft value, so that is a valid method

97
00:05:49,570 --> 00:05:50,260
to invoke on it.

98
00:05:50,590 --> 00:05:53,830
Scrolling down, it doesn't look like there are any more issues to be found here.

99
00:05:54,040 --> 00:06:01,000
So I'm going to run NPM, run, test, call and watch to see if everything is good with our spotlight

100
00:06:01,000 --> 00:06:01,390
component.

101
00:06:02,580 --> 00:06:03,620
And there it is.

102
00:06:03,630 --> 00:06:06,190
It's running and fingers crossed.

103
00:06:06,210 --> 00:06:08,610
Give my slow computer a few seconds and there we go.

104
00:06:08,790 --> 00:06:09,750
Everything is passing.

105
00:06:09,990 --> 00:06:10,290
All right.

106
00:06:10,290 --> 00:06:12,660
So that completes our refactor of the spotlight component.

107
00:06:12,660 --> 00:06:14,220
And I will see you in the next lesson.
