WEBVTT
1
00:00:00.760 --> 00:00:01.270
Okay.

2
00:00:01.270 --> 00:00:07.000
So let's continue our discussion from the previous lesson on type literals and more specifically apply

3
00:00:07.000 --> 00:00:08.590
that idea to objects.

4
00:00:08.920 --> 00:00:14.980
So objects are very interesting in JavaScript and in TypeScript and they can often be a point of confusion.

5
00:00:15.370 --> 00:00:20.740
So here I have the code from a couple lessons ago where we are assigning an object to a concept called

6
00:00:20.740 --> 00:00:21.130
plumber.

7
00:00:21.550 --> 00:00:27.820
So what the constant keyword means is that we cannot reassign plumber to be any other value, right?

8
00:00:27.820 --> 00:00:34.500
So in other words, we can't take plumber and reassign it to be something else, like an array, right?

9
00:00:34.510 --> 00:00:40.330
Or a brand new object or even an object with name properties, skill properties, likes mushroom properties,

10
00:00:40.330 --> 00:00:40.840
etc..

11
00:00:41.050 --> 00:00:46.480
The point is the association between the plumber name in our program must stay the same.

12
00:00:46.480 --> 00:00:49.180
It must always reference this object right here.

13
00:00:49.330 --> 00:00:50.530
That cannot change.

14
00:00:50.650 --> 00:00:53.470
We can never reassign plumber to be anything else.

15
00:00:53.740 --> 00:00:54.460
And that is true.

16
00:00:54.460 --> 00:00:59.980
Whenever we use the keyword with any kind of data type, whether it be in JavaScript object or for example,

17
00:00:59.980 --> 00:01:01.150
a number or a string.

18
00:01:01.540 --> 00:01:07.060
However, that does not change the fact that our plumber object is mutable.

19
00:01:07.180 --> 00:01:12.160
In other words, the properties we have on the plumber object, they can change.

20
00:01:12.580 --> 00:01:17.920
So what that means is, even though we can't reassign plumber, we're still able to, for example,

21
00:01:17.920 --> 00:01:22.540
take plumber, take its name, property, and reassign it to something else like warrior.

22
00:01:23.420 --> 00:01:27.590
And the reason is because the plumber constant must reference the same object.

23
00:01:27.620 --> 00:01:31.760
That is true, but the internals of that object can still change.

24
00:01:32.700 --> 00:01:38.520
The plumber name must always reference the object, but the name property on that same object is totally

25
00:01:38.520 --> 00:01:39.030
mutable.

26
00:01:39.150 --> 00:01:42.480
It's totally capable of changing, as evidenced right here.

27
00:01:43.290 --> 00:01:43.590
All right.

28
00:01:43.800 --> 00:01:50.640
So no matter whether we use this syntax right here or we let TypeScript infer the object type we have

29
00:01:50.640 --> 00:01:51.750
and all the properties and types.

30
00:01:51.960 --> 00:01:55.290
This kind of syntax is still valid as a syntax like this.

31
00:01:55.290 --> 00:01:56.970
Plumber likes mushrooms.

32
00:01:57.420 --> 00:01:58.220
Set to false.

33
00:01:58.230 --> 00:02:01.200
That's totally valid because we have likes mushrooms property.

34
00:02:01.260 --> 00:02:02.550
TypeScript verifies that.

35
00:02:02.670 --> 00:02:07.680
It verifies that likes mushrooms must be a boolean and thus false is still a boolean.

36
00:02:07.680 --> 00:02:10.020
So we are totally able to change that.

37
00:02:10.440 --> 00:02:12.810
Now here's where I'm going to introduce something very interesting.

38
00:02:13.500 --> 00:02:19.590
What happens if I change like mushrooms type annotation here from being a boolean to more specifically

39
00:02:19.590 --> 00:02:20.670
being true?

40
00:02:20.970 --> 00:02:21.300
Right.

41
00:02:21.690 --> 00:02:25.050
The point is, I'm not assigning a value of true technically.

42
00:02:25.230 --> 00:02:30.690
Instead, what I'm telling TypeScript is likes mushrooms is going to be a property on this object.

43
00:02:30.810 --> 00:02:32.430
That must always be true.

44
00:02:33.210 --> 00:02:33.570
All right.

45
00:02:33.570 --> 00:02:37.380
So that's the difference between having Boolean here, which can be either true or false.

46
00:02:37.590 --> 00:02:42.360
In comparison, this syntax tells TypeScript that this must always be true.

47
00:02:42.660 --> 00:02:48.090
So even in the initial object declaration, if I try to set this to false, we're going to get a problem

48
00:02:48.090 --> 00:02:53.010
because TypeScript is going to tell us the type false is not assignable to the type true.

49
00:02:53.190 --> 00:02:54.570
It's beyond just a boolean.

50
00:02:54.570 --> 00:02:56.880
It's a more specific type of boolean, which is true.

51
00:02:57.150 --> 00:02:58.800
So this must always be true.

52
00:03:00.000 --> 00:03:04.890
And since we've given the name property and the scale property, a string type, that means we're able

53
00:03:04.890 --> 00:03:08.370
to change plumber's name property and plumber skill property.

54
00:03:08.460 --> 00:03:09.960
There's nothing wrong with that.

55
00:03:10.170 --> 00:03:15.870
However, likes mushrooms must always stay true and thus this is going to cause an error because it's

56
00:03:15.870 --> 00:03:19.150
going to tell us, hey, type false is not assignable to type true.

57
00:03:19.770 --> 00:03:20.070
All right.

58
00:03:20.070 --> 00:03:20.820
So that's how.

59
00:03:21.300 --> 00:03:27.240
More specific, more precise, more restricting, perhaps we can get with our types whenever we do explicit

60
00:03:27.240 --> 00:03:27.810
declarations.

61
00:03:28.020 --> 00:03:34.500
If we were to leave this out, TypeScript would assume or infer that likes mushrooms is a boolean.

62
00:03:34.620 --> 00:03:39.060
Using an explicit declaration, we can be a little bit more granular and say, Hey, likes mushrooms.

63
00:03:39.060 --> 00:03:42.350
It's not just a boolean, it's more specifically a type of true.

64
00:03:42.360 --> 00:03:43.560
It's always going to be true.

65
00:03:43.560 --> 00:03:46.350
As this program runs, you should never be allowed to change it.

66
00:03:46.740 --> 00:03:46.980
All right.

67
00:03:46.980 --> 00:03:51.570
So that could be one of the advantages to explicitly writing out the type rather than allowing TypeScript

68
00:03:51.570 --> 00:03:52.080
to infer it.

69
00:03:52.170 --> 00:03:56.580
We can be a little bit more specific, a little bit more precise whenever the typescript inference does

70
00:03:56.580 --> 00:03:58.050
not fit what we're looking for.

71
00:03:58.320 --> 00:03:58.650
All right.

72
00:03:59.250 --> 00:04:04.290
So once again, to summarize, the plumber constant stays the same so we can not reassign the plumber

73
00:04:04.290 --> 00:04:09.450
name to any other object or anything else in our program, even if that object fits this criteria.

74
00:04:09.660 --> 00:04:14.940
Because using the cons keyword, we have permanently associated this name in our program with this object

75
00:04:14.940 --> 00:04:16.290
and specifically this object.

76
00:04:16.530 --> 00:04:21.480
However, just because that association is constant doesn't mean the object's individual properties

77
00:04:21.480 --> 00:04:22.320
have to be constant.

78
00:04:22.530 --> 00:04:27.810
We are still able to change the name and scale properties on this exact plumber object.

79
00:04:27.870 --> 00:04:29.730
The cons must always reference.

80
00:04:30.090 --> 00:04:34.320
All right, so the reference is constant, but the properties themselves are not constant.

81
00:04:34.320 --> 00:04:38.580
They are mutable, as is assuming that we give them the appropriate types right here.

82
00:04:38.760 --> 00:04:41.880
Here we specifically made likes mushrooms immutable.

83
00:04:42.000 --> 00:04:44.130
We said that it must always be true.

84
00:04:44.460 --> 00:04:44.820
All right.

85
00:04:44.820 --> 00:04:49.020
So that's how we can specifically target individual object properties and declare that they must always

86
00:04:49.020 --> 00:04:53.760
be something specific beyond just a general type like string number or boy.

87
00:04:54.210 --> 00:04:54.480
All right.

88
00:04:54.480 --> 00:04:55.950
That's all there is to cover in this lesson.

89
00:04:55.950 --> 00:04:57.510
So I will see you in next one.
