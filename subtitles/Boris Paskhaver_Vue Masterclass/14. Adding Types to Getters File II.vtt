WEBVTT
1
00:00:00.210 --> 00:00:01.170
All right.

2
00:00:01.170 --> 00:00:08.040
So we have one typescript violation remaining in our GETTERS file, and it is a very funny and peculiar

3
00:00:08.040 --> 00:00:12.610
one because it presents what I would call a chicken or the egg problem.

4
00:00:12.960 --> 00:00:19.350
So notice that TypeScript wants a type definition for this getters argument, which is the second argument

5
00:00:19.350 --> 00:00:21.360
for our filter jobs getter method.

6
00:00:21.660 --> 00:00:23.700
In fact, that's the way it always works.

7
00:00:23.910 --> 00:00:29.640
If we provide a second argument to a getter method, what Vue X will provide is always going to be the

8
00:00:29.640 --> 00:00:32.340
same object of getters that we are in.

9
00:00:32.670 --> 00:00:37.140
And that kind of presents a problem because we have a little bit of a circular dependency.

10
00:00:37.410 --> 00:00:41.910
So what I mean by that is imagine we try to define the type for this getters object.

11
00:00:42.060 --> 00:00:47.490
Imagine we try to define and explain to TypeScript that we have an object with five methods.

12
00:00:47.610 --> 00:00:52.980
The methods are unique organizations, unique job types, etc. If we were defining that those methods,

13
00:00:52.980 --> 00:00:55.230
we'd also have to define the types of their parameters.

14
00:00:55.470 --> 00:01:02.040
So when we get to filter jobs, we'd say, Well, getters is an object that is basically the object

15
00:01:02.040 --> 00:01:03.050
that we are in.

16
00:01:03.060 --> 00:01:05.490
It is this object with these exact five methods.

17
00:01:05.790 --> 00:01:10.320
But in order to do that, we have to have that object with its five methods defined.

18
00:01:10.530 --> 00:01:16.410
But we can't do that because in order to define the fifth method filter jobs we already need, the getters

19
00:01:16.410 --> 00:01:18.390
object to already exist with its types.

20
00:01:18.810 --> 00:01:19.050
Right.

21
00:01:19.050 --> 00:01:23.970
So getters needs this method to have its types defined to be able to use it.

22
00:01:24.150 --> 00:01:28.680
But in order for this method to have this type defined, we need to reference the actual getter object

23
00:01:28.680 --> 00:01:29.430
we are in.

24
00:01:29.910 --> 00:01:30.260
Right.

25
00:01:30.270 --> 00:01:31.500
And we cannot do that.

26
00:01:32.190 --> 00:01:36.570
So it kind of is an interesting dependency because this depends on the object and the object, or at

27
00:01:36.570 --> 00:01:39.090
least that's type definition depends on this method.

28
00:01:39.450 --> 00:01:44.430
So I got into a really, really bad place over thinking how to solve this problem and thinking if there

29
00:01:44.430 --> 00:01:48.900
was some kind of type that I was missing from the View Library and how I could solve this.

30
00:01:49.110 --> 00:01:54.000
And then I realized, why don't I just go for the super simple and the easiest solution that I could

31
00:01:54.000 --> 00:01:54.450
come up with?

32
00:01:54.660 --> 00:01:57.660
And so I said, Why don't I just use the basic features of TypeScript?

33
00:01:57.810 --> 00:02:00.210
Why don't I declare an interface in this file?

34
00:02:00.450 --> 00:02:02.610
And my interface will describe an object.

35
00:02:02.820 --> 00:02:05.760
And that object will have the getter methods that I care about.

36
00:02:06.030 --> 00:02:10.230
Do I really need to define the types for all five of my getter methods?

37
00:02:10.500 --> 00:02:13.920
Well, for the sake of this parameter right here, I argue we don't need to.

38
00:02:14.160 --> 00:02:16.980
All we need to have is an object that has two properties.

39
00:02:17.160 --> 00:02:21.270
One is going to be an include job by organization method that accepts a job object.

40
00:02:21.480 --> 00:02:26.910
And the second is going to be a method that that is called include job by job type that also accepts

41
00:02:26.910 --> 00:02:27.660
a job object.

42
00:02:27.870 --> 00:02:32.730
And if both of those methods are returned, Booleans and I capture both of those method definitions

43
00:02:32.730 --> 00:02:38.430
in a object type definition that will be enough for this parameter to have an appropriate type for it

44
00:02:38.430 --> 00:02:39.930
that TypeScript can decipher.

45
00:02:40.230 --> 00:02:41.430
So let me show you what I did here.

46
00:02:41.700 --> 00:02:42.240
Right here.

47
00:02:42.240 --> 00:02:43.470
I declared an interface.

48
00:02:43.770 --> 00:02:46.930
And as a reminder, whenever we do an interface, we have to give it a name.

49
00:02:47.130 --> 00:02:52.860
And I called my interface include job getters because I don't want it to really represent all my getters,

50
00:02:52.980 --> 00:02:55.410
just the ones that have to deal with, including a job.

51
00:02:56.190 --> 00:03:01.350
And then I knew if I want to use this interface right here for this getters parameter, I have to make

52
00:03:01.350 --> 00:03:07.080
sure that I tell TypeScript that the object called Getters right here is going to have these two properties,

53
00:03:07.080 --> 00:03:08.130
which are going to be methods.

54
00:03:08.460 --> 00:03:13.110
So the way we can define a method and it's type definitions in an interface is we simply write the name

55
00:03:13.110 --> 00:03:17.050
out and then provide the types of the parameters and the return type.

56
00:03:17.280 --> 00:03:21.840
And it looks like this inside this object that is going to be of type include job getters.

57
00:03:22.020 --> 00:03:25.350
I'm going to have a method called include job by organization.

58
00:03:26.070 --> 00:03:27.180
That's going to be my method name.

59
00:03:27.300 --> 00:03:32.070
Then I'm going to provide a colon and then I'm going to provide its parameters as well as its return

60
00:03:32.070 --> 00:03:32.370
value.

61
00:03:32.700 --> 00:03:36.120
So we know that this getter is going to receive a job.

62
00:03:37.200 --> 00:03:39.810
And we have our job interface imported above.

63
00:03:40.050 --> 00:03:42.240
So it's going to be a job object.

64
00:03:42.360 --> 00:03:44.010
And then what is this going to return to me?

65
00:03:44.040 --> 00:03:45.420
It's going to return a boolean.

66
00:03:45.570 --> 00:03:50.550
And the way I actually signify this in an interface is by using the arrow syntax right here, not the

67
00:03:50.550 --> 00:03:54.480
colon, and specifying that this is going to return a Boolean value.

68
00:03:54.930 --> 00:03:55.200
All right.

69
00:03:55.200 --> 00:03:58.830
So the syntax here is a little bit new to us, but it hopefully makes sense.

70
00:03:59.010 --> 00:04:04.860
We're saying that the object of type include job getters is going to include and include job by organization

71
00:04:04.860 --> 00:04:05.220
method.

72
00:04:05.430 --> 00:04:10.500
That method accepts a single parameter called job, which is a type job, and the return value of that

73
00:04:10.500 --> 00:04:12.060
method is going to be a boolean.

74
00:04:12.360 --> 00:04:16.830
Now a little point of confusion is you might be looking at include job by organization here and saying,

75
00:04:16.950 --> 00:04:22.470
hey, that doesn't match this signature right here isn't include job by organization, a method that

76
00:04:22.470 --> 00:04:29.220
actually accepts this state as the first parameter and then returns a function that accepts job as the

77
00:04:29.220 --> 00:04:29.930
first parameter.

78
00:04:29.970 --> 00:04:30.930
And you would be correct.

79
00:04:31.140 --> 00:04:36.960
But remember, behind the scenes view, Vue automatically gives us the state and automatically invokes

80
00:04:36.960 --> 00:04:39.720
the getter with the state as the first argument.

81
00:04:39.870 --> 00:04:44.160
And if that getter method returns a function, it provides the function automatically.

82
00:04:44.310 --> 00:04:50.250
That's why right here we can simply call include job by organization on my getters object and we never

83
00:04:50.250 --> 00:04:51.900
have to provide state at all.

84
00:04:52.170 --> 00:04:56.070
So View X knows whenever we're referencing the include job by organization getter.

85
00:04:56.220 --> 00:05:00.660
We're not just referencing this function right here because it will take care of the first function

86
00:05:00.660 --> 00:05:01.560
and passing state.

87
00:05:01.800 --> 00:05:06.180
What we're really referencing is this function right here that that original method returns.

88
00:05:06.420 --> 00:05:07.920
And that's what I'm referencing right here.

89
00:05:08.370 --> 00:05:08.730
All right.

90
00:05:08.850 --> 00:05:11.510
Same rules are going to apply for my other method.

91
00:05:11.520 --> 00:05:16.530
So in order for this to be a valid interface to apply to my getters parameter here, I'm going to be

92
00:05:16.530 --> 00:05:20.790
using a method called include job by job type on this getters object.

93
00:05:20.970 --> 00:05:26.910
So this interface that I'm going to apply later must have my include job by job type method.

94
00:05:27.330 --> 00:05:31.970
That's going to be a method that accepts a single parameter called job and it's going to be a type job

95
00:05:32.220 --> 00:05:34.080
and it's also going to return a volume.

96
00:05:34.890 --> 00:05:39.690
And these are the only two methods I need to exist in order for filter jobs to be able to run.

97
00:05:39.870 --> 00:05:45.780
I could define these type definitions for my other getters, but there's really no need to do so because

98
00:05:45.780 --> 00:05:48.990
this is all I need to be able to provide a type definition here.

99
00:05:49.230 --> 00:05:53.490
So for getters, I'm going to say that's going to be an object and the interface or in other words,

100
00:05:53.490 --> 00:05:59.160
the object type that it promises to fulfill is going to be my include job getters definition above.

101
00:05:59.340 --> 00:06:03.750
So all I'm saying to TypeScript is getters is going to be an object that's going to have two methods

102
00:06:03.870 --> 00:06:08.520
and those methods will accept job as an argument and both will return booleans and that is going to

103
00:06:08.520 --> 00:06:10.140
match what we're going for here.

104
00:06:10.440 --> 00:06:14.580
So you can see it's going to understand that it's going to be a method that accepts a job, returns

105
00:06:14.580 --> 00:06:18.870
boolean, which is a totally valid value to return for a filter method on an array.

106
00:06:19.110 --> 00:06:25.230
So now you can see if I look at the entire definition and I look at filter at filter jobs, it understands

107
00:06:25.440 --> 00:06:30.270
that it accepts state, which is the global state interface, it accepts getters which is going to match

108
00:06:30.270 --> 00:06:32.070
our include job getters interface.

109
00:06:32.250 --> 00:06:37.320
And because it properly understands that we're invoking filter on an array of jobs, it's going to understand

110
00:06:37.320 --> 00:06:42.840
that the final return value of the filter jobs getter is going to be a job array.

111
00:06:43.080 --> 00:06:47.670
So we could manually specify in line that it's going to be a job array, but TypeScript has correctly

112
00:06:47.670 --> 00:06:52.020
inferred the proper return value and the same thing is true for all of our other getters.

113
00:06:52.170 --> 00:06:58.650
You can see include job above is going to properly be a function that returns boolean and unique organizations

114
00:06:58.650 --> 00:07:02.490
and unique job types are both going to return sets consisting of strings.

115
00:07:02.670 --> 00:07:07.200
So all of our types look correct here with TypeScript inferring the proper return values.

116
00:07:07.380 --> 00:07:12.630
So I see no need right now to explicitly add those return value types manually in our code.

117
00:07:13.020 --> 00:07:15.330
All right, so now our getters file is looking pretty good.

118
00:07:15.330 --> 00:07:16.170
I can save that.

119
00:07:16.350 --> 00:07:21.390
And in the next lesson, we can move on to updating the corresponding test file for our getters.

120
00:07:21.540 --> 00:07:22.200
I'll see you there.
