1
00:00:00,710 --> 00:00:01,640
All right.

2
00:00:01,640 --> 00:00:06,680
So there's one more thing that I forgot to do in the previous lesson, and that is clean up our action

3
00:00:06,680 --> 00:00:07,040
button.

4
00:00:07,190 --> 00:00:09,590
We no longer need the methods property.

5
00:00:09,590 --> 00:00:11,810
We introduced it solely for the sake of example.

6
00:00:11,870 --> 00:00:14,450
And right now we have a method that does nothing in it.

7
00:00:14,720 --> 00:00:18,130
So we can go ahead and remove the entire methods property right here.

8
00:00:18,440 --> 00:00:24,530
And since we no longer have a handle click method, we can go ahead and remove this von click handler

9
00:00:24,530 --> 00:00:25,250
here as well.

10
00:00:25,250 --> 00:00:30,650
So I'm going to remove this line, save this file, and that clears us to go back to our main NAV.

11
00:00:30,650 --> 00:00:35,330
We're going to practice the same concepts that we just talked about in the previous couple of lessons.

12
00:00:35,630 --> 00:00:41,630
So I'm going to scroll down here to our configuration object for our main nav component and here below

13
00:00:41,630 --> 00:00:42,950
our data method.

14
00:00:43,100 --> 00:00:47,780
I'm going to define my methods property, just like we did an action button a few lessons ago.

15
00:00:47,780 --> 00:00:51,860
So I'm going to define methods and going to set it to be an object.

16
00:00:51,860 --> 00:00:57,860
And in this object I'm going to define any methods that I want to be available to my main component.

17
00:00:57,860 --> 00:00:58,190
All right.

18
00:00:58,460 --> 00:01:00,020
So what method do we want here?

19
00:01:00,020 --> 00:01:03,770
Well, I want a method that is going to log the user in.

20
00:01:04,070 --> 00:01:05,990
And how is it effectively going to do that?

21
00:01:05,990 --> 00:01:12,980
Well, it needs to access the is logged in property on my data object and flip it to true because once

22
00:01:12,980 --> 00:01:17,900
this becomes true, then the component will re render and it will display the profile image instead

23
00:01:17,900 --> 00:01:18,650
of the action button.

24
00:01:19,040 --> 00:01:22,070
So I'm going to define a method here called log in user.

25
00:01:22,070 --> 00:01:23,570
Again, this name is up to me.

26
00:01:24,750 --> 00:01:30,630
And then here in this method body I need to find a way to reference this property of is logged in.

27
00:01:30,960 --> 00:01:35,820
The way that we can do this is by referencing it directly on the this keyword.

28
00:01:35,910 --> 00:01:38,760
So I'm going to write it out first and then we're going to talk a little bit about it.

29
00:01:39,060 --> 00:01:44,460
So this followed by a dot and then the property which is is logged in.

30
00:01:44,520 --> 00:01:44,910
All right.

31
00:01:45,150 --> 00:01:51,630
So this is a common point of confusion in JavaScript because what that word refers to can change or

32
00:01:51,630 --> 00:01:54,630
vary depending on the context in which it's used.

33
00:01:54,870 --> 00:02:01,620
Usually when you're defining a class, this will refer to the instance of the class, the actual object

34
00:02:01,620 --> 00:02:04,110
that we're going to create from the class template.

35
00:02:04,440 --> 00:02:10,320
Now in this situation, if this was a regular JavaScript setup, this would actually not work.

36
00:02:10,320 --> 00:02:16,710
We would not be able to access an arbitrary is logged in property that is coincidentally existing on

37
00:02:16,710 --> 00:02:19,470
the returned object from another method.

38
00:02:19,470 --> 00:02:19,800
Right.

39
00:02:19,800 --> 00:02:21,960
This this would not work in traditional JavaScript.

40
00:02:22,140 --> 00:02:27,840
The reason it works here is because Vue takes a look at everything that we've wired up within our data

41
00:02:27,840 --> 00:02:28,230
method.

42
00:02:28,350 --> 00:02:33,480
And by that I mean the properties that we've configured here, and it makes them available at the top

43
00:02:33,480 --> 00:02:38,250
level of the view object itself, the view configuration object to be more specific.

44
00:02:38,550 --> 00:02:44,640
So on to this keyword here, we can access any of these properties, we can do this, accompany this

45
00:02:44,850 --> 00:02:51,330
URL, this, that menu items, this that logged in, etc. And if we want to overwrite any of these values,

46
00:02:51,330 --> 00:02:54,960
all we have to do is provide an equal sign and assign a new value.

47
00:02:55,290 --> 00:02:55,560
All right.

48
00:02:55,560 --> 00:02:59,910
This is no different than how we would overwrite these properties if we defined them on a custom class.

49
00:03:00,120 --> 00:03:05,280
What is different is that we can access this is logged in property, even though we're not automatically

50
00:03:05,280 --> 00:03:06,960
assigning it to this instance.

51
00:03:07,620 --> 00:03:10,320
Manually view is doing that behind the scenes for us.

52
00:03:10,500 --> 00:03:14,310
So again, View behind the scenes is looking at what we return from the data method.

53
00:03:14,490 --> 00:03:19,290
It's taking all of these properties and it's making them available on the this keyword, which refers

54
00:03:19,290 --> 00:03:20,730
to the view configuration object.

55
00:03:21,060 --> 00:03:24,360
So this is how I can reference any piece of data which is logged in.

56
00:03:24,570 --> 00:03:27,450
And now of course what I want to do is flip it to true.

57
00:03:27,690 --> 00:03:31,110
So I'm going to provide an equal sign here and flip it to true.

58
00:03:31,800 --> 00:03:35,370
Now, just like we saw in the previous lesson, this is not going to change anything.

59
00:03:35,370 --> 00:03:40,500
Honor UI because just because we have a method doesn't mean that view is going to run it or invoke it

60
00:03:40,500 --> 00:03:41,220
automatically.

61
00:03:41,310 --> 00:03:45,960
We have to get view to run or invoke this method based on a user action.

62
00:03:46,170 --> 00:03:47,790
Well, what is that action going to be?

63
00:03:47,790 --> 00:03:50,610
It's going to be the user clicking on our action button.

64
00:03:51,440 --> 00:03:52,870
So let's do that right now.

65
00:03:52,880 --> 00:03:59,150
I'm going to scroll back up to where I have my action button right here and I'm going to add my von

66
00:03:59,180 --> 00:04:00,170
click syntax.

67
00:04:00,170 --> 00:04:03,410
It's the exact same syntax that we talked about in the previous lessons.

68
00:04:03,620 --> 00:04:10,310
The difference here, of course, is that we're applying it on a view component rather than on an HTML

69
00:04:10,310 --> 00:04:10,760
element.

70
00:04:10,760 --> 00:04:13,820
In the previous lesson, we applied it to a button h HTML element.

71
00:04:14,000 --> 00:04:16,670
Now we are applying it to an action button view component.

72
00:04:16,910 --> 00:04:18,710
However, the same logic applies.

73
00:04:18,920 --> 00:04:23,820
Basically what Vue says is if you click on anything that belongs to this action button component.

74
00:04:24,410 --> 00:04:29,060
So if we had, for example, this component consisted of a div with another div with a button inside

75
00:04:29,060 --> 00:04:29,180
it.

76
00:04:29,420 --> 00:04:35,630
Anything that we click that comprises the action button will trigger the event representing a user click.

77
00:04:35,930 --> 00:04:43,520
So the key takeaway is that we can add the VON Directive to either a view component or a core H2 element.

78
00:04:43,580 --> 00:04:47,630
All right, the syntax is the exact same and let's practice it in both options right here.

79
00:04:47,630 --> 00:04:54,320
So the first option is the on followed by the click event that we want to react to, followed by an

80
00:04:54,320 --> 00:04:57,230
equal sign and then the string.

81
00:04:57,350 --> 00:05:02,360
And here, of course, we provide the method that we want the click to invoke or to run for us.

82
00:05:02,570 --> 00:05:06,710
So when the user clicks anywhere in an action button component, what do we want to run?

83
00:05:06,860 --> 00:05:08,540
We want this method to run.

84
00:05:08,570 --> 00:05:09,680
Log in the user.

85
00:05:09,830 --> 00:05:12,860
So we're going to put log in user right here without parentheses.

86
00:05:13,070 --> 00:05:13,970
We do not invoke it.

87
00:05:13,970 --> 00:05:18,380
We told you that it should invoke it whenever the user clicks the button.

88
00:05:18,650 --> 00:05:23,450
Once again, this is totally valid syntax, but View and the view style guide prefers that we use the

89
00:05:23,450 --> 00:05:23,990
shortcut.

90
00:05:24,170 --> 00:05:26,420
And again, the shortcut is going to be this app sign.

91
00:05:26,420 --> 00:05:31,880
So I'm going to remove the von colon and just put the ad click here, save this and prettier will adjust

92
00:05:31,880 --> 00:05:34,650
it back to one line and that should do it.

93
00:05:34,650 --> 00:05:37,190
So let's now head to Chrome and observe this in action.

94
00:05:38,310 --> 00:05:39,270
All right.

95
00:05:39,270 --> 00:05:40,680
So let's see this change in action.

96
00:05:40,690 --> 00:05:42,960
I'm going to go ahead and click on the sign in button.

97
00:05:42,960 --> 00:05:48,720
And this is going to invoke the logon user method, which is going to change the value of the is logged

98
00:05:48,720 --> 00:05:54,270
in data property which will force the component to re render which will trigger the AVF and v else directives

99
00:05:54,270 --> 00:05:59,220
to swap in terms of which one is going to value to true, which in turn is going to replace the blue

100
00:05:59,220 --> 00:06:01,980
action button component with our profile image component.

101
00:06:02,220 --> 00:06:02,640
Here I go.

102
00:06:02,640 --> 00:06:05,220
3 to 1 and.

103
00:06:06,260 --> 00:06:06,830
There we go.

104
00:06:06,830 --> 00:06:10,780
It's loading a little bit slowly on my computer, but let me refresh and try again.

105
00:06:10,790 --> 00:06:12,260
Hopefully it'll be a little faster this time.

106
00:06:12,500 --> 00:06:13,020
There we go.

107
00:06:13,040 --> 00:06:14,810
That slowdown was not due to view.

108
00:06:14,810 --> 00:06:17,030
It was due to my Internet connection fetching that image.

109
00:06:17,240 --> 00:06:18,740
But now you can see it is working.

110
00:06:18,890 --> 00:06:22,040
When I click the button view renders and the image pops up.

111
00:06:22,310 --> 00:06:25,260
We can also observe this change in our actual elements panels.

112
00:06:25,290 --> 00:06:31,700
If I go back again by refreshing the page and I take a look at my header component and keep expanding

113
00:06:31,700 --> 00:06:34,250
this, we're going to be able to find eventually our button right here.

114
00:06:34,430 --> 00:06:39,170
Keep your eye on this HTML element as I click the button in 3 to 1.

115
00:06:39,500 --> 00:06:44,630
You can see the automatic swapping that occurred if you replace that with the image tag in each HTML.

116
00:06:44,750 --> 00:06:50,840
Again, that is the root HTML that lives inside our profile image component because view components

117
00:06:50,840 --> 00:06:52,220
the browser does not understand.

118
00:06:52,460 --> 00:06:59,060
But what a view does is translate those components into pure HTML that the browser does understand.

119
00:06:59,090 --> 00:06:59,390
All right.

120
00:06:59,570 --> 00:07:03,360
And one more place where I want to show you how this change works is, in our view, devtools.

121
00:07:03,390 --> 00:07:05,240
So once again, I'm going to refresh the page.

122
00:07:05,510 --> 00:07:09,710
And the reason I'm refreshing the page, of course, is because I have no way of getting back to my

123
00:07:09,710 --> 00:07:10,550
original state.

124
00:07:10,760 --> 00:07:16,180
Right now, there's no way for me to, quote, log out and bring my is logged in property back.

125
00:07:16,190 --> 00:07:21,290
But of course we can define another method to do that that will flip that is log in property backed

126
00:07:21,530 --> 00:07:22,760
back to false.

127
00:07:22,970 --> 00:07:26,870
So I have to refresh the page to reset all of my data properties to their original values.

128
00:07:27,110 --> 00:07:33,860
And now let me click on May now and we can see here the is logged in property is set to false.

129
00:07:34,010 --> 00:07:38,480
Previously we were we were modifying it directly from the view DevTools, which again is not ideal in

130
00:07:38,480 --> 00:07:41,630
the real world because there's no way for the user to do that or to know that.

131
00:07:41,930 --> 00:07:46,760
But now, from a user perspective, when the user clicks this, which is logical, we're going to see

132
00:07:46,760 --> 00:07:47,720
this value change.

133
00:07:47,720 --> 00:07:49,460
So this should change from false to true.

134
00:07:49,730 --> 00:07:50,570
And there we go.

135
00:07:50,570 --> 00:07:55,580
We can see it changes this property, which again forces view to re render whenever view observes that

136
00:07:55,580 --> 00:07:57,470
any property on our data has changed.

137
00:07:57,590 --> 00:07:59,000
It doesn't have to be is logged in.

138
00:07:59,000 --> 00:08:00,620
It could be any of these four properties.

139
00:08:01,010 --> 00:08:02,750
And that is true for any component.

140
00:08:02,900 --> 00:08:08,300
Whenever Vue sees that the data properties have changed, it re renders that corresponding template

141
00:08:08,390 --> 00:08:14,600
swapping in or re-evaluating anywhere where that data property is being used, whether it's being interpolated

142
00:08:14,720 --> 00:08:20,360
or whether it's being used as a part of a logic for such as RDF statement, right, or a V force statement

143
00:08:20,870 --> 00:08:25,910
anywhere where it's being used, it reevaluates that bit of HTML and dynamically replaces the correct

144
00:08:25,910 --> 00:08:27,460
elements in your page.

145
00:08:27,470 --> 00:08:27,800
All right.

146
00:08:28,010 --> 00:08:33,440
So that is the vision directive used on a view component and also an example of how it can overwrite

147
00:08:33,440 --> 00:08:35,630
a component's data using a method.
