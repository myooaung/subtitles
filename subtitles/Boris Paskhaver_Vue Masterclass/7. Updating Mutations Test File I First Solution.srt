1
00:00:00,410 --> 00:00:01,110
Okay.

2
00:00:01,110 --> 00:00:04,200
So our mutations file is now a typescript file.

3
00:00:04,350 --> 00:00:10,410
And the next thing I want to do is to convert the corresponding test file for mutations to a typescript

4
00:00:10,410 --> 00:00:11,100
file as well.

5
00:00:11,460 --> 00:00:14,850
We're going to discover that that is going to create some issues in our tests.

6
00:00:15,030 --> 00:00:19,170
And over the course of the next couple of lessons, we're going to talk about different ways that we

7
00:00:19,170 --> 00:00:21,180
can resolve those typescript issues.

8
00:00:21,540 --> 00:00:25,770
So let's head to tests, then a unit, then store.

9
00:00:26,070 --> 00:00:29,720
And right here we're going to have our mutations that test, that just file.

10
00:00:29,730 --> 00:00:35,830
I'm going to open it up and I'm going to change the extension of this file from test just to test that

11
00:00:35,830 --> 00:00:36,330
tests.

12
00:00:36,330 --> 00:00:38,250
So we're going to make it a typescript file.

13
00:00:38,730 --> 00:00:39,020
All right.

14
00:00:39,030 --> 00:00:43,260
I'm going to save that collapse my sidebar and move this to the right.

15
00:00:43,650 --> 00:00:47,550
And you can immediately see we're going to get a couple issues right here.

16
00:00:47,550 --> 00:00:49,350
We can see that TypeScript is not happy.

17
00:00:49,710 --> 00:00:52,860
So for now, let's focus on this first test right here.

18
00:00:52,860 --> 00:00:55,140
It's targeting our log in user mutation.

19
00:00:55,140 --> 00:01:01,650
Our log in using mutation simply takes the view store state and it flips the is logged in property to

20
00:01:01,650 --> 00:01:02,730
have a boolean of true.

21
00:01:03,150 --> 00:01:07,770
So here we have our state object with an is logged in property of false and then we're verifying that

22
00:01:07,770 --> 00:01:10,320
after the mutation runs it has a value of true.

23
00:01:10,620 --> 00:01:11,370
So that looks good.

24
00:01:11,550 --> 00:01:13,350
So what is TypeScript unhappy about?

25
00:01:13,380 --> 00:01:19,650
Well, if I hover my mouse over, you can see it says argument of type is logged in having a boolean.

26
00:01:19,650 --> 00:01:26,070
So an object with a single property of is logged in at such a boolean is not assignable to a parameter

27
00:01:26,070 --> 00:01:27,360
of the type global state.

28
00:01:27,660 --> 00:01:32,310
So remember on the left hand side, we told TypeScript that our log in user mutation is going to take

29
00:01:32,310 --> 00:01:35,670
an object, it's going to implement the global state interface.

30
00:01:35,850 --> 00:01:38,340
And what does the global state interface has have?

31
00:01:38,340 --> 00:01:41,460
It has some additional properties we can see right here type.

32
00:01:41,700 --> 00:01:47,580
This object is missing the following properties from type global state jobs, selected organisations

33
00:01:47,580 --> 00:01:48,690
and selected job types.

34
00:01:48,990 --> 00:01:54,960
So we told TypeScript that the mutation method would take a global state object with four properties,

35
00:01:55,140 --> 00:01:58,920
jobs, selected organisations, selected job types and is logged in.

36
00:01:59,070 --> 00:02:02,400
But we're providing an object that only has one of those properties, right?

37
00:02:02,400 --> 00:02:06,630
So TypeScript says that as a mismatch you have extra properties and I'm going to complain.

38
00:02:07,290 --> 00:02:12,480
Now here's where we run into an interesting scenario because from TypeScript perspective, it's absolutely

39
00:02:12,480 --> 00:02:12,900
correct.

40
00:02:13,170 --> 00:02:17,550
But from our perspective as testers, I would argue that a test like this is just fine.

41
00:02:17,820 --> 00:02:18,840
Why is it just fine?

42
00:02:19,020 --> 00:02:22,080
Well, because this test only cares about a single property.

43
00:02:22,230 --> 00:02:27,180
And for the sake of readability and for the sake of communicating what the mutation does, I think it's

44
00:02:27,180 --> 00:02:30,300
fine to focus on what the property is, that it's changing.

45
00:02:30,510 --> 00:02:33,540
Imagine that our View Store State had 25 properties.

46
00:02:33,780 --> 00:02:39,930
Do we really want to define is logged in here alongside 24 other properties and have that super long

47
00:02:39,960 --> 00:02:45,360
object in this test just so that we can verify that the mutation affected only one property.

48
00:02:45,660 --> 00:02:45,900
Right.

49
00:02:45,900 --> 00:02:48,420
So for the purposes of testing, I like the way this reads.

50
00:02:48,420 --> 00:02:52,680
I have the starting state, I have the mutation that modifies it and I have the ending state.

51
00:02:52,860 --> 00:02:59,490
Unfortunately, our starting state doesn't fulfill the exact contract that our real world mutation has.

52
00:02:59,640 --> 00:03:04,170
And I still want to keep this interface right here because it's going to help us type check in other

53
00:03:04,170 --> 00:03:05,510
locations throughout the app.

54
00:03:05,520 --> 00:03:10,590
The places that use our mutations or for example, components are going to know what's available in

55
00:03:10,590 --> 00:03:14,190
the state, they're going to know what they can work with, etc..

56
00:03:14,190 --> 00:03:18,510
So I want to keep this right here, but how can we make our tests a little bit more flexible?

57
00:03:18,720 --> 00:03:20,550
So there's a couple solutions available here.

58
00:03:20,730 --> 00:03:24,300
The first one that I want to introduce in this lesson is called type casting.

59
00:03:24,600 --> 00:03:26,610
What type casting is is what?

60
00:03:26,610 --> 00:03:31,740
What we can do is tell TypeScript, TypeScript, please trust us, trust that we know what we're doing

61
00:03:31,860 --> 00:03:37,230
and treat this data type as another data, type something, write out the syntax and then we'll see

62
00:03:37,230 --> 00:03:38,430
the error is going to go away.

63
00:03:38,760 --> 00:03:43,440
So what I'm going to do is I'm going to import my global state interface, the same one we have on the

64
00:03:43,440 --> 00:03:44,100
left hand side.

65
00:03:44,310 --> 00:03:46,140
I'm going to import it into my test file.

66
00:03:46,440 --> 00:03:51,390
So import global state and as we can see on the left, it's going to come from the source directory

67
00:03:51,390 --> 00:03:55,740
store types and then I'm going to apply a special syntax right here.

68
00:03:55,740 --> 00:04:01,560
After this object, I'm going to use the as keyword and then write out my interface, which is global

69
00:04:01,560 --> 00:04:01,980
state.

70
00:04:03,240 --> 00:04:07,110
And we're going to see that as soon as I add that this error on line number eight will go away.

71
00:04:07,380 --> 00:04:08,670
So what does this syntax do?

72
00:04:08,850 --> 00:04:11,700
Well, it sort of reads kind of logically from left to right.

73
00:04:11,850 --> 00:04:15,120
We're telling TypeScript, treat this object right here.

74
00:04:15,120 --> 00:04:20,940
This object with an is logged in boolean property as if it were a complete global state object.

75
00:04:21,180 --> 00:04:23,070
It is not in fact that object.

76
00:04:23,070 --> 00:04:23,250
Right?

77
00:04:23,250 --> 00:04:25,650
Which is why we need to explicitly tell TypeScript.

78
00:04:25,830 --> 00:04:27,000
TypeScript, forgive us.

79
00:04:27,000 --> 00:04:28,170
We know what we're doing.

80
00:04:28,290 --> 00:04:30,000
We're accepting the ramifications.

81
00:04:30,090 --> 00:04:34,080
We know it's not a global state object, but treat it as if it were one.

82
00:04:34,470 --> 00:04:38,520
Forgive us and treat this object as if it's a real global state object.

83
00:04:38,700 --> 00:04:44,100
We understand that later on we may access properties that do not exist because we don't have a legitimate

84
00:04:44,100 --> 00:04:44,940
global state object.

85
00:04:44,940 --> 00:04:48,480
We have one that is playing that role, but we're basically telling TypeScript that we know what we're

86
00:04:48,480 --> 00:04:48,840
doing.

87
00:04:49,080 --> 00:04:53,790
And in this test, I think that's a reasonable assumption because we really do only care about this

88
00:04:53,790 --> 00:04:54,720
is logged in property.

89
00:04:54,720 --> 00:04:59,520
We don't really care for this mutation about all of the other properties on the global state interface.

90
00:05:00,110 --> 00:05:04,310
So for the purposes of testing, I think this is okay, but this is one available solution that we can

91
00:05:04,310 --> 00:05:09,260
use to solve the problem that TypeScript expects a more strict interface.

92
00:05:09,470 --> 00:05:12,860
And our tests don't really need that for the sake of having a readable test.

93
00:05:13,220 --> 00:05:13,460
All right.

94
00:05:13,460 --> 00:05:18,830
So we use that as keyword followed by the type that we want Typekit to believe that this thing is or

95
00:05:18,830 --> 00:05:20,930
except that this thing is Asimov.

96
00:05:20,930 --> 00:05:21,230
Sorry.

97
00:05:21,380 --> 00:05:25,910
So because on line number eight, TypeScript believes at that point that our state constant referencing

98
00:05:25,910 --> 00:05:30,890
this object, which TypeScript now has been told it should treat as if it's global state, TYPEKIT says,

99
00:05:30,890 --> 00:05:34,220
okay, state at this point is something I interpret as being like global state.

100
00:05:34,430 --> 00:05:36,710
That's what this log in user mutation expects.

101
00:05:36,890 --> 00:05:38,050
Okay, I have a match.

102
00:05:38,060 --> 00:05:39,260
I'm not going to complain.

103
00:05:39,710 --> 00:05:39,950
All right.

104
00:05:39,950 --> 00:05:41,720
So that's one possible solution to the problem.

105
00:05:41,720 --> 00:05:43,890
In the very next lesson, we'll take a look at another one.

106
00:05:43,910 --> 00:05:44,570
I'll see you there.
