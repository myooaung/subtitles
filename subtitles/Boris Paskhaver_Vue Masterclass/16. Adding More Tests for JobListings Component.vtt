WEBVTT
1
00:00:00.390 --> 00:00:01.140
Okay.

2
00:00:01.140 --> 00:00:06.330
So the next batch of tests that I'd like to add will cover the other side of the equation.

3
00:00:06.450 --> 00:00:10.530
What happens when the user is on the last page of job results?

4
00:00:10.800 --> 00:00:14.760
So right here, I'm going to add another describe on the same level as my previous one.

5
00:00:15.090 --> 00:00:19.500
So when the user is on last page of job results, what do we expect?

6
00:00:19.590 --> 00:00:22.630
It's almost like the inverse of what we previously tested for.

7
00:00:23.070 --> 00:00:23.610
We.

8
00:00:24.920 --> 00:00:34.490
We'll say it does not show link to next page because there is no next page and similarly it shows link

9
00:00:34.730 --> 00:00:38.660
to previous page because from the last page we can always move backwards.

10
00:00:39.140 --> 00:00:46.490
So in this scenario, I'm going to pretend that I have, let's say, two pages of job results, 15 jobs,

11
00:00:46.730 --> 00:00:48.260
and we are on page two.

12
00:00:48.290 --> 00:00:52.580
So we should not have a link to page three and we should have a link back to page one.

13
00:00:52.970 --> 00:00:59.840
So just to help communicate how many jobs we actually have, because we do want to sort of tell somebody

14
00:00:59.840 --> 00:01:01.810
in the future, hey, we have 15 jobs.

15
00:01:01.820 --> 00:01:04.670
That's how you can figure out that you're on the last page or on page two.

16
00:01:04.940 --> 00:01:09.380
I'm going to scroll up and I'm going to copy this code right here.

17
00:01:09.470 --> 00:01:14.110
We are executing it in the before each and we're going to execute it in our tests.

18
00:01:14.120 --> 00:01:16.100
So this is not technically necessary.

19
00:01:16.310 --> 00:01:21.230
But again, I think it helps future readers figure out what's going on because it just immediately tells

20
00:01:21.230 --> 00:01:24.650
them, hey, this is a scenario where you have 15 jobs.

21
00:01:24.830 --> 00:01:29.960
So now if I tell the user that they're on page two, they can sort of figure out ten jobs to a page,

22
00:01:29.960 --> 00:01:33.080
page to I know the users on the last page.

23
00:01:33.260 --> 00:01:38.210
This description helps them verbally and this gives them the actual technical implementation.

24
00:01:38.540 --> 00:01:43.550
So right here, contact query params are going to be on the second page of results.

25
00:01:43.550 --> 00:01:45.590
So page properties set to a string of two.

26
00:01:46.130 --> 00:01:54.200
I'm going to create my root object, create root query params, I'm going to create my wrapper, I'm

27
00:01:54.200 --> 00:01:55.700
going to invoke shallow amount.

28
00:01:55.700 --> 00:02:00.620
I'm going to shell them out my job listings component, create a configuration using my factory function,

29
00:02:00.890 --> 00:02:02.360
pass in my route right here.

30
00:02:02.660 --> 00:02:08.720
I'm going to copy these three lines below because it's the same setup we're simulating as if we're on

31
00:02:08.720 --> 00:02:09.920
the last page of job results.

32
00:02:10.310 --> 00:02:15.740
And just to be safe here, I'm going to use the syntax that we previously used of Flushing Promises.

33
00:02:15.890 --> 00:02:20.930
I'm just going to make sure once again that this thing is completely resolved and that we can be comfortable

34
00:02:20.930 --> 00:02:24.050
that our jobs data property has an array of 15 objects.

35
00:02:24.320 --> 00:02:29.630
So I'm going to make both of these tests right here async, make sure you apply the async to the IT

36
00:02:29.630 --> 00:02:31.310
function, not to the described block.

37
00:02:31.520 --> 00:02:33.200
So async here, async here.

38
00:02:34.260 --> 00:02:36.340
And then I'm going to copy this code from above.

39
00:02:36.360 --> 00:02:39.360
I'm going to flash my promise after the component mounts right here.

40
00:02:39.660 --> 00:02:44.250
So at this point, we can assume that we have our jobs data property up to date.

41
00:02:44.550 --> 00:02:47.970
And I'm basically going to do something very similar to what I did in the previous test.

42
00:02:47.970 --> 00:02:51.180
I'm going to look for the next page link, and it should not exist.

43
00:02:51.420 --> 00:02:55.020
And here I'm going to look for the previous page link and assert that it does exist.

44
00:02:55.380 --> 00:02:58.950
So in fact, we can copy this section of the previous test right here.

45
00:03:00.090 --> 00:03:01.830
So here it says next page.

46
00:03:01.830 --> 00:03:06.360
We're trying to find this densest attribute when the user is on the last page of job results.

47
00:03:06.390 --> 00:03:08.610
This root or link should not exist.

48
00:03:08.820 --> 00:03:10.890
So I'm going to change this to false.

49
00:03:12.250 --> 00:03:12.610
All right.

50
00:03:12.880 --> 00:03:17.290
And then for the final test, I'm going to scroll up and copy these two lines right here.

51
00:03:17.320 --> 00:03:18.970
This is looking for a previous page.

52
00:03:19.330 --> 00:03:21.610
So I'm going to scroll down to the final one.

53
00:03:21.910 --> 00:03:27.460
After we flush promises, we want to look for something in our HTML template with a data test attribute

54
00:03:27.460 --> 00:03:28.500
of previous page link.

55
00:03:28.690 --> 00:03:32.260
That is something that allows us to go back to the previous page of results.

56
00:03:32.470 --> 00:03:37.600
We are on page two, so there should be a link to the previous page of page one.

57
00:03:37.780 --> 00:03:40.480
So this should exist, so this should be true.

58
00:03:40.810 --> 00:03:45.730
As a reminder, you have to be very careful when copying, but I think we have everything go to here's.

59
00:03:45.730 --> 00:03:46.660
I'm going to save this.

60
00:03:48.050 --> 00:03:51.590
Let it all run and it looks like everything is passing perfect.

61
00:03:51.830 --> 00:03:57.230
So if you take a look here for our job listings component, we have covered quite a lot of functionality.

62
00:03:57.230 --> 00:04:01.460
It fetches jobs, it creates a job listing for a maximum of ten jobs.

63
00:04:01.460 --> 00:04:03.590
Maybe I can clarify this and add per page.

64
00:04:03.590 --> 00:04:05.300
That might be a little bit more of a better description.

65
00:04:05.600 --> 00:04:10.070
And then we talk about all of the different scenarios when the query params exclude the page number,

66
00:04:10.250 --> 00:04:14.810
when they do include the page number, when user is on the first page of job results, when users on

67
00:04:14.810 --> 00:04:16.190
the last page of job results.

68
00:04:16.190 --> 00:04:20.060
So we're talking about all these different scenarios and I think our tests are really covering them

69
00:04:20.180 --> 00:04:21.050
pretty well.

70
00:04:21.470 --> 00:04:21.740
All right.

71
00:04:21.740 --> 00:04:23.420
So that's all there is to cover in this lesson.

72
00:04:23.420 --> 00:04:24.950
So I will see you in the next one.
