WEBVTT
1
00:00:00.520 --> 00:00:01.340
Okay.

2
00:00:01.340 --> 00:00:06.920
So we are actually going to begin this lesson by reading through the official view documentation because

3
00:00:06.920 --> 00:00:10.040
the problem that we are encountering is not unique to our app.

4
00:00:10.280 --> 00:00:12.050
It's not like we've done anything wrong.

5
00:00:12.260 --> 00:00:17.780
There's just a special step by step process that we need to follow in order to enable the use store

6
00:00:17.780 --> 00:00:24.770
function to return a store type that is much more accurate, much more precise, and honoring the specifics

7
00:00:24.770 --> 00:00:27.530
of our app, which is that global state interface.

8
00:00:27.530 --> 00:00:27.800
Right.

9
00:00:28.070 --> 00:00:32.000
So here, check out this documentation and what it tells us the U.S. provides.

10
00:00:32.000 --> 00:00:35.360
It's typing so you can use TypeScript to write a stored definition.

11
00:00:35.600 --> 00:00:41.000
And we saw that earlier in the course that it was as simple as declaring a basic TypeScript interface

12
00:00:41.000 --> 00:00:43.520
and connecting it to our create store function.

13
00:00:43.700 --> 00:00:44.630
That's totally fine.

14
00:00:44.780 --> 00:00:47.750
You don't need any special typescript configuration for view.

15
00:00:48.290 --> 00:00:54.350
However, if you're writing your view components in TypeScript, there are a few steps to follow, and

16
00:00:54.350 --> 00:00:59.570
I think this is grammatically correct, a few steps to follow that require for you to correctly provide

17
00:00:59.600 --> 00:01:00.650
typing for a store.

18
00:01:00.950 --> 00:01:05.120
So to summarize, there's a few steps that we need to follow in order to correctly provide the type

19
00:01:05.120 --> 00:01:08.030
things for a store wherever we use the user function.

20
00:01:08.330 --> 00:01:12.890
So this first section right here is talking about the global dollar sign store property, but we know

21
00:01:12.890 --> 00:01:14.840
that's only with the options API.

22
00:01:15.080 --> 00:01:20.210
So if I scroll down here, we're going to see typing the use store composition function, which is for

23
00:01:20.210 --> 00:01:21.740
the use with the composition API.

24
00:01:22.100 --> 00:01:27.020
So right here, when you're writing your view component with the composition API, you will most likely

25
00:01:27.020 --> 00:01:32.420
want you store to return to type store for you store to correctly return the type store.

26
00:01:32.510 --> 00:01:33.830
You must take three steps.

27
00:01:34.070 --> 00:01:36.890
Number one, define the typed injection key.

28
00:01:37.190 --> 00:01:42.620
Number two, provide this injection key when installing a store to the view app and then finally pass

29
00:01:42.620 --> 00:01:45.380
the typed injection key to the use store method.

30
00:01:45.800 --> 00:01:47.450
All right, so here goes through it step by step.

31
00:01:47.450 --> 00:01:49.520
And I want to quickly walk through these examples.

32
00:01:49.700 --> 00:01:53.870
But don't worry if it all doesn't click yet, because we're all going to make it happen in our code

33
00:01:53.870 --> 00:01:55.010
editor in just a minute.

34
00:01:55.760 --> 00:02:01.280
So first off, we have to define the key using Vue's injection key interface along with your own store

35
00:02:01.280 --> 00:02:02.060
typing definition.

36
00:02:02.360 --> 00:02:07.160
So in this example, in the actual configuration for the store, you can see it's importing an interface

37
00:02:07.160 --> 00:02:09.020
called injection key from view.

38
00:02:09.290 --> 00:02:14.990
And right here it is creating a constant called key, which is of type injection key injection key accepts

39
00:02:14.990 --> 00:02:20.270
a generic and that generic type is actually going to be the store interface which itself comes from

40
00:02:20.270 --> 00:02:20.510
view.

41
00:02:20.810 --> 00:02:25.820
You can see it important here on the second line and then the store interface itself requires a generic

42
00:02:26.000 --> 00:02:27.530
which is going to be in this case state.

43
00:02:27.710 --> 00:02:32.840
But all that state is in this example is the actual interface that stores the interface or the type

44
00:02:32.840 --> 00:02:34.160
for our View Store State.

45
00:02:34.370 --> 00:02:39.020
So in our example, we're going to replace state with our global state interface with those four properties.

46
00:02:39.350 --> 00:02:42.980
And then you can see that is the type of this constant called key which is exported.

47
00:02:43.190 --> 00:02:45.350
But all of the value is, is a symbol.

48
00:02:45.950 --> 00:02:50.780
So symbol is something that I myself was not particularly familiar with before recording this course.

49
00:02:50.960 --> 00:02:56.690
Symbol is a brand new primitive type in ESX, so primitive meaning it's one of the more lightweight

50
00:02:56.690 --> 00:03:02.390
data types in JavaScript like number, string, boolean, etc. and all that it represents is basically

51
00:03:02.390 --> 00:03:10.640
an immutable key, an immutable structure that you can use usually as a property for an object that

52
00:03:10.640 --> 00:03:14.120
you want to stay immutable, which means unchangeable or irreplaceable.

53
00:03:14.420 --> 00:03:18.770
To be quite honest, I don't know all the semantic details about how this all works under the hood and

54
00:03:18.770 --> 00:03:22.750
how it connects with the use of this unnamed, anonymous, immutable symbol.

55
00:03:22.940 --> 00:03:25.280
The point is, this is how the View team would like us to do it.

56
00:03:25.280 --> 00:03:27.050
And the good news is we only have to do this once.

57
00:03:27.050 --> 00:03:31.820
We have to define this key that is going to be this immutable, primitive data type that is primarily

58
00:03:31.820 --> 00:03:35.360
used for identification, which is sort of what this key here is supposed to represent.

59
00:03:35.480 --> 00:03:38.360
Just like a key opens a door or opens a safe.

60
00:03:38.570 --> 00:03:43.580
This is going to be a key that's going to enable us to access the store and that's going to allow us

61
00:03:43.580 --> 00:03:45.890
to connect it to our components.

62
00:03:46.280 --> 00:03:46.520
All right.

63
00:03:46.520 --> 00:03:50.450
So we're going to define this content called Key, which is going to be our type symbol or more specifically,

64
00:03:50.450 --> 00:03:52.580
an injection key, storing all this information.

65
00:03:52.910 --> 00:03:59.690
Then we're going to import that key wherever we are actually configuring our view application.

66
00:03:59.840 --> 00:04:04.580
So right here and in our app, that is going to be the main that's fab and where we are creating our

67
00:04:04.580 --> 00:04:08.600
view app, you're going to see that we currently have the code to add the U.S. store.

68
00:04:08.780 --> 00:04:12.650
We're also going to add the injection key as the second argument to the use method.

69
00:04:13.010 --> 00:04:13.280
All right.

70
00:04:13.280 --> 00:04:15.410
We're going to show you how to do this in this code in just a second.

71
00:04:16.040 --> 00:04:19.610
So both of these steps, step one, step two, we only have to do once.

72
00:04:19.790 --> 00:04:21.230
We have to create the injection key.

73
00:04:21.350 --> 00:04:26.450
And then wherever we configure view X to connect to our actual view app, we provide the key which sort

74
00:04:26.450 --> 00:04:28.160
of establishes the connection between the two.

75
00:04:28.490 --> 00:04:34.370
Then finally, in any view component that we actually want to use, you store and it says you can pass

76
00:04:34.370 --> 00:04:36.890
the key to the use store method to retrieve that type store.

77
00:04:37.190 --> 00:04:42.290
So right here we're using you store, we're going to import that same key that we defined in the first

78
00:04:42.290 --> 00:04:45.380
step and we're going to provide it as the first argument to the use star function.

79
00:04:45.560 --> 00:04:49.580
And simply by doing that, each time we're going to have access to the full type store.

80
00:04:49.880 --> 00:04:54.230
So here you can see, for example, on stored that state account, it is typed as a number and that

81
00:04:54.230 --> 00:04:59.300
goes back to this interface that is defined in this example where count is a number which proves the

82
00:04:59.300 --> 00:04:59.900
whole idea.

83
00:04:59.980 --> 00:05:05.290
That this component right here, this view component, is able to access the exact store and the exact

84
00:05:05.290 --> 00:05:07.820
shape that it has right under the hood.

85
00:05:07.840 --> 00:05:12.370
View X installs the store to the view app using views provide inject feature, which is why the injection

86
00:05:12.370 --> 00:05:13.330
key is an important factor.

87
00:05:13.990 --> 00:05:17.830
I don't want to go too much deeper into what this is doing, to be quite honest.

88
00:05:17.830 --> 00:05:18.820
We really don't care.

89
00:05:18.940 --> 00:05:23.470
It's an abstraction or a solution that the View X Development Team has built for us, and we can simply

90
00:05:23.470 --> 00:05:27.280
utilize the recommended approach that they give to us and then never have to worry about it again.

91
00:05:27.460 --> 00:05:31.330
The only thing is, wherever we're going to use use store moving forward, we're simply going to import

92
00:05:31.330 --> 00:05:34.480
that key that we define and pass it in as the first argument to use store.

93
00:05:34.840 --> 00:05:36.040
So let's make that a reality.

94
00:05:36.040 --> 00:05:39.400
So let's walk through the exact same three steps except in our code base.

95
00:05:39.730 --> 00:05:42.330
So I'm going to begin by going to our store index.

96
00:05:42.340 --> 00:05:43.090
That's fine.

97
00:05:43.840 --> 00:05:47.890
This is where we actually create our view store and it's here that I'm going to create my injection

98
00:05:47.890 --> 00:05:48.190
key.

99
00:05:48.460 --> 00:05:49.090
It's right here.

100
00:05:49.090 --> 00:05:55.690
I'm going to import an interface called Injection Key, and that is going to come from view, not view

101
00:05:55.690 --> 00:05:56.740
X but from view.

102
00:05:56.800 --> 00:05:58.480
So we don't have any other imports from view.

103
00:05:58.480 --> 00:05:59.650
So it's going to be a separate line.

104
00:06:00.070 --> 00:06:05.950
Then in addition to importing the create store function from view, I'm also going to import the store

105
00:06:06.760 --> 00:06:07.210
type.

106
00:06:07.210 --> 00:06:10.240
You can actually see if I hover my mouse over store.

107
00:06:10.540 --> 00:06:14.560
I believe one of these options is going to show store as the actual type right here.

108
00:06:14.560 --> 00:06:19.810
So you can see that Typekit correctly infers that create store will return a store type, but we're

109
00:06:19.810 --> 00:06:23.920
going to import it explicitly here because we're going to need to provide it for our key.

110
00:06:24.700 --> 00:06:29.800
So we have these two interfaces and both of them of course require generic arguments.

111
00:06:29.800 --> 00:06:36.700
You can see here interface injection injection key has that T in the brackets immediately after, which

112
00:06:36.700 --> 00:06:39.340
means that it requires a generic type wherever it's used.

113
00:06:39.580 --> 00:06:42.460
And right here you can see store also has that generic.

114
00:06:42.460 --> 00:06:47.470
It has a different name of S, but it's still a generic and we can tell by the use of those brackets.

115
00:06:47.620 --> 00:06:47.980
All right.

116
00:06:48.220 --> 00:06:50.170
So right here, I'm going to export const.

117
00:06:51.070 --> 00:06:52.870
I'm going to call my constant key.

118
00:06:53.080 --> 00:06:54.580
And here I'm going to provide the type.

119
00:06:54.760 --> 00:06:59.260
It's going to be IV type injection key, which is the interface we import it from view and remember

120
00:06:59.260 --> 00:07:04.630
injection key accepts a generic and that is going to be the store interface that we also imported a

121
00:07:04.630 --> 00:07:05.230
line to.

122
00:07:05.440 --> 00:07:14.020
And store requires its own generic type argument, which is going to be our actual store state type.

123
00:07:14.260 --> 00:07:17.010
And that of course is represented by our global state interface.

124
00:07:17.010 --> 00:07:23.950
So I'm going to import that right here, import global state from and that's coming from the source

125
00:07:23.950 --> 00:07:25.360
directory store types.

126
00:07:26.110 --> 00:07:31.120
And I'm going to provide that right here as my generic type argument for the store interface, which

127
00:07:31.120 --> 00:07:36.640
itself is the entire complete generic type argument for the injection key interface.

128
00:07:36.910 --> 00:07:37.120
All right.

129
00:07:37.120 --> 00:07:39.970
And this is just declaring the type of key for the actual value.

130
00:07:39.970 --> 00:07:41.800
We're simply going to create a symbol.

131
00:07:41.980 --> 00:07:45.190
And we don't need to import this because this is not a part of your view.

132
00:07:45.190 --> 00:07:47.800
X This is a regular part of S JavaScript.

133
00:07:48.220 --> 00:07:48.490
All right.

134
00:07:48.490 --> 00:07:51.640
As a reminder to see you remember a global state, is this thing on the right?

135
00:07:51.820 --> 00:07:53.950
It is our interface with the four properties.

136
00:07:54.100 --> 00:07:58.990
And now we have connected all this logic together just because we already have global state imported.

137
00:07:58.990 --> 00:08:00.730
Let's just be more explicit here.

138
00:08:00.910 --> 00:08:06.010
Even though Create Store understands that it's working with a global state interface as the generic

139
00:08:06.700 --> 00:08:08.950
to represent what the shape of the state property will be.

140
00:08:09.130 --> 00:08:12.400
We can also explicitly add it since we already have an important in this file.

141
00:08:12.730 --> 00:08:18.400
So let's add our brackets here for the generic type argument and provide a global state here as well

142
00:08:18.820 --> 00:08:19.840
just because it doesn't hurt.

143
00:08:19.840 --> 00:08:24.550
And it reminds us where this logic is coming from and we can easily command click into it and go into

144
00:08:24.550 --> 00:08:26.230
that type definition right here on the right.

145
00:08:26.710 --> 00:08:27.010
Okay.

146
00:08:27.010 --> 00:08:29.650
So that completes step one and we never have to worry about it again.

147
00:08:29.890 --> 00:08:33.220
The next thing we want to do is open up our main Dot's file.

148
00:08:33.490 --> 00:08:36.340
So this is the file where we kick off everything in the app.

149
00:08:36.340 --> 00:08:38.890
So this is the file where we mount the actual view app.

150
00:08:38.890 --> 00:08:39.880
We create it right here.

151
00:08:40.120 --> 00:08:44.960
And notice we have these use method calls where we are using the store and a route.

152
00:08:44.980 --> 00:08:47.260
So this is where all the configuration takes place.

153
00:08:47.680 --> 00:08:50.350
So right here from my store directory.

154
00:08:50.350 --> 00:08:55.510
And remember by default TypeScript is reading the index file, which is the file on the left here we're

155
00:08:55.510 --> 00:08:57.460
importing store, which is the default export.

156
00:08:57.610 --> 00:09:02.860
I also want to additionally import the named export here, which is called key.

157
00:09:03.280 --> 00:09:05.920
So I'm importing that symbol that we just declared right here.

158
00:09:06.100 --> 00:09:10.480
And as the documentation, documentation tells us, wherever we are using the use method and providing

159
00:09:10.480 --> 00:09:15.490
store as the first argument here, I also want to write key as a second argument, and that is almost

160
00:09:15.490 --> 00:09:18.040
like providing the key that is needed to access the store.

161
00:09:18.430 --> 00:09:18.790
All right.

162
00:09:19.200 --> 00:09:20.290
So I'm going to save that.

163
00:09:20.290 --> 00:09:23.290
And once again, this is a step we only have to do one time.

164
00:09:23.290 --> 00:09:24.670
We never have to worry about it again.

165
00:09:25.030 --> 00:09:25.240
All right.

166
00:09:25.240 --> 00:09:28.090
So finally, we have these initial two steps completed.

167
00:09:28.300 --> 00:09:32.410
We can come back to the component that we were worried about in the previous lesson, which is our checkbox

168
00:09:32.410 --> 00:09:33.070
script component.

169
00:09:33.460 --> 00:09:39.040
So right here it's going to be the job filter sidebar checkbox grouped that view component and the protocol

170
00:09:39.040 --> 00:09:39.850
moving forward.

171
00:09:39.850 --> 00:09:43.540
These are the steps that we're going to need to repeat wherever we're using your store is now, we're

172
00:09:43.540 --> 00:09:48.220
going to need to import that key and provide it as an argument to use store wherever we want to use

173
00:09:48.220 --> 00:09:48.340
it.

174
00:09:48.610 --> 00:09:52.720
So right here, I'm going to import my key, which is a named export.

175
00:09:52.720 --> 00:09:58.330
So I have to write curly braces and that's going to come from the source directory and the store directory.

176
00:09:58.330 --> 00:09:59.700
And more specifically, it's indexed.

177
00:09:59.790 --> 00:10:00.360
He has filed.

178
00:10:00.420 --> 00:10:01.250
That's totally fine.

179
00:10:01.410 --> 00:10:03.570
And right here, I just want to show you the before and after.

180
00:10:03.840 --> 00:10:09.090
If I hover my mouse over the store constant, you can see it realizes that we have a view store, but

181
00:10:09.090 --> 00:10:13.020
it doesn't understand the generic type, so it doesn't know the exact shape of that store.

182
00:10:13.230 --> 00:10:18.180
So it assumes it has anything which defeats the entire purpose because it can't verify what are the

183
00:10:18.180 --> 00:10:19.380
properties in our store state.

184
00:10:19.620 --> 00:10:25.050
Now, as soon as I provide key right here, which is our import from line number 29 and I hover my mouse

185
00:10:25.050 --> 00:10:30.090
to restore right now you can see it recognizes that it's a store whose state is going to be represented

186
00:10:30.090 --> 00:10:31.500
by a specific type.

187
00:10:31.650 --> 00:10:32.640
What type is that?

188
00:10:32.640 --> 00:10:37.440
Our interface called global state, and that is the interface that has the four properties that we care

189
00:10:37.440 --> 00:10:37.680
about.

190
00:10:37.890 --> 00:10:42.570
So now we're going to be able to store that state and whenever we access any property on it, we're

191
00:10:42.570 --> 00:10:46.620
going to make sure and TypeScript is going to tell us that it must be all of the four properties that

192
00:10:46.620 --> 00:10:49.350
we actually have available on our global state interface.

193
00:10:50.100 --> 00:10:50.310
All right.

194
00:10:50.310 --> 00:10:53.130
So with that, we have performed a little bit better type checking here.

195
00:10:53.460 --> 00:10:56.400
One other thing I want to fix up before we close this lesson off.

196
00:10:56.580 --> 00:11:02.160
You'll notice here when I hover my mouse over selected values, it thinks it is a reactive object,

197
00:11:02.160 --> 00:11:03.750
wrapping a never array.

198
00:11:03.900 --> 00:11:04.800
That is not correct.

199
00:11:04.800 --> 00:11:10.260
Our selected values will always actually be an array of strings, of course, wrapped up in view's reactive

200
00:11:10.260 --> 00:11:11.640
object, which is created by ref.

201
00:11:11.850 --> 00:11:15.420
Of course, there's no way for TypeScript to figure this out because we're simply giving it an empty

202
00:11:15.420 --> 00:11:18.330
array and an empty array can be an empty array of any kind of type.

203
00:11:18.570 --> 00:11:21.780
So to be more specific here, I'm once again going to provide a generic type.

204
00:11:21.810 --> 00:11:25.980
We do that with the brackets right here, the less than sign and the greater sign.

205
00:11:26.100 --> 00:11:30.540
And then I'm just going to clarify that selected values is going to be a type string array.

206
00:11:30.570 --> 00:11:33.750
So a reactive object wrapping an array of strings.

207
00:11:34.530 --> 00:11:38.670
So now selected values is correct, and that's going to be a little bit better right here.

208
00:11:38.820 --> 00:11:43.350
We can see when I hover my mouse or select values and now understands it's a reactive object, wrapping

209
00:11:43.350 --> 00:11:43.770
a string.

210
00:11:43.770 --> 00:11:44.040
Right.

211
00:11:44.370 --> 00:11:44.730
All right.

212
00:11:44.730 --> 00:11:50.970
So that completes our proper connection of The View next door and it's typing more specifically to the

213
00:11:50.970 --> 00:11:52.080
checkbox to component.

214
00:11:52.290 --> 00:11:56.760
So now in the very next lesson, we can wrap up the refactor of this component by taking care of its

215
00:11:56.760 --> 00:11:57.270
test suite.

216
00:11:57.420 --> 00:11:58.140
So I'll see you there.
