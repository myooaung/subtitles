WEBVTT
1
00:00:01.080 --> 00:00:06.390
All right, so let's write some tests for our new V.F. and Valse directives.

2
00:00:06.630 --> 00:00:12.390
So on the left hand side, I have my main nav component, and on the right hand side I have its corresponding

3
00:00:12.420 --> 00:00:18.570
test file, which is main nav dot test dot J.S. So I want to scroll down a little bit here to the end

4
00:00:18.900 --> 00:00:22.250
and I want to first begin with another describe function.

5
00:00:22.440 --> 00:00:27.660
Remember, we can just describe functions within other described functions and we use that to provide

6
00:00:27.660 --> 00:00:30.600
some kind of context or simulate a scenario.

7
00:00:30.810 --> 00:00:32.970
And so now I kind of have two scenarios.

8
00:00:32.970 --> 00:00:36.870
One is the user's logged out and the other is that the user's logged in.

9
00:00:36.990 --> 00:00:43.770
And I want to communicate that to my reader and specify that the next test is a kind of undertaken under

10
00:00:43.770 --> 00:00:45.870
a certain scenario, under a certain condition.

11
00:00:46.170 --> 00:00:48.300
So let's begin with the user being logged out.

12
00:00:48.300 --> 00:00:53.490
So I'm going to create another describe here and say when user is logged out.

13
00:00:54.900 --> 00:00:55.290
All right.

14
00:00:55.290 --> 00:00:58.200
And I'm going to provide a function to my describe right here.

15
00:00:59.070 --> 00:01:01.200
And here is where I can actually add a test.

16
00:01:01.200 --> 00:01:05.460
So when the user is logged in or logged out, rather, what do we want to test?

17
00:01:05.700 --> 00:01:10.710
Well, I'm going to create a test here with it that says it prompts user to sign in.

18
00:01:11.430 --> 00:01:11.730
All right.

19
00:01:11.730 --> 00:01:14.370
I'm trying to avoid any kind of implementation details.

20
00:01:14.370 --> 00:01:17.750
I'm just talking about the value to the user when they're not logged in.

21
00:01:17.770 --> 00:01:20.010
We want to invite them to sign into our site.

22
00:01:20.010 --> 00:01:24.510
I'm not super focused now how that's going to happen, whether it's going to be a button or something

23
00:01:24.510 --> 00:01:28.020
else, because we can test that directly in our actual test itself.

24
00:01:28.230 --> 00:01:30.330
The description is just for readability.

25
00:01:30.450 --> 00:01:30.780
All right.

26
00:01:31.140 --> 00:01:36.270
So of course, we know that we have to begin by mounting our main nav component.

27
00:01:37.440 --> 00:01:43.410
And what I'm going to do now is actually use that second argument to mount to customize the data belonging

28
00:01:43.410 --> 00:01:44.220
to the component.

29
00:01:44.220 --> 00:01:48.930
Now, I'm still not a fan of this approach, and we're going to improve this test in a later lesson.

30
00:01:49.140 --> 00:01:55.080
But for now, since we have no way to change the data within our component, we kind of have to go with

31
00:01:55.080 --> 00:01:57.480
this approach to simulate both of our scenarios.

32
00:01:57.630 --> 00:02:02.010
One where is logged in is set to true and one where is logged in is set to false.

33
00:02:02.280 --> 00:02:07.320
Obviously, in the real world the user is going to click on the button and that will eventually trigger

34
00:02:07.320 --> 00:02:10.500
the changing of this, which will change the rendering of this.

35
00:02:10.650 --> 00:02:16.140
And that's ultimately what we want to test in our test because that is how the user interacts with our

36
00:02:16.140 --> 00:02:16.620
component.

37
00:02:16.830 --> 00:02:21.000
But we haven't yet learned how to trigger a click and how to have that change our data.

38
00:02:21.210 --> 00:02:26.850
So for now, we're going to write our test with the tools that we do have at our disposal, and that

39
00:02:26.850 --> 00:02:30.840
is customizing the data using the second argument to the mount function.

40
00:02:31.110 --> 00:02:34.830
So right here I'm going to define my data method, just like in my component.

41
00:02:35.730 --> 00:02:36.840
We talked about this earlier.

42
00:02:36.840 --> 00:02:39.960
We could return an object here with whatever data properties we want.

43
00:02:40.290 --> 00:02:46.110
And of course I want to simulate the is logged in property right here and I'm going to set it equal

44
00:02:46.110 --> 00:02:47.220
to false.

45
00:02:48.650 --> 00:02:53.060
Now you may be curious and say, well, if this is the default starting state of the component, right,

46
00:02:53.240 --> 00:02:55.880
do we really need to do this or can we just render it normally?

47
00:02:56.030 --> 00:03:01.700
And the answer is we could just mount May now without this additional information, because this is

48
00:03:01.700 --> 00:03:02.840
the default starting state.

49
00:03:03.080 --> 00:03:08.330
But in order to help other developers understand what this test is doing and show them how the implementation

50
00:03:08.330 --> 00:03:13.490
is coupled to our component or to our test, rather, I am going to write this explicitly here, just

51
00:03:13.490 --> 00:03:17.540
so I'm reminded of, well, what does it mean to be logged out for the user?

52
00:03:17.540 --> 00:03:19.130
What property is actually affecting this?

53
00:03:19.310 --> 00:03:24.770
I know this contradicts what I said earlier about having the tests, not know about the implementation,

54
00:03:24.890 --> 00:03:29.570
but for now, given that we've accepted that we have to use this approach, that we have to use the

55
00:03:29.570 --> 00:03:34.280
second argument, I figure why not be a little bit more explicit in our tests with what is going on

56
00:03:34.280 --> 00:03:39.710
in the actual implementation so that the reader can see oh the is logged in properties set to false

57
00:03:39.800 --> 00:03:42.320
and that's why we are seeing a log in button.

58
00:03:42.440 --> 00:03:42.830
All right.

59
00:03:43.130 --> 00:03:48.530
So what I want to do here is use another method available on our wrapper.

60
00:03:48.530 --> 00:03:52.730
Earlier on we saw defined method and we saw the find all method.

61
00:03:52.880 --> 00:03:58.070
There is also a convenient method called find component and that's what we want to do because we want

62
00:03:58.070 --> 00:04:04.070
to check for the presence of an actual component within our template if the is logged in property is

63
00:04:04.070 --> 00:04:04.730
set to false.

64
00:04:04.910 --> 00:04:10.640
In this case, if the is logged in property is false, we want to ensure that the user sees the action

65
00:04:10.640 --> 00:04:14.930
button component and doesn't see the profile image component.

66
00:04:15.230 --> 00:04:16.820
So here's what the syntax is going to look like.

67
00:04:16.820 --> 00:04:17.540
I'm going to.

68
00:04:18.940 --> 00:04:27.370
Create a variable here called login button and I'm going to call the find component method on my wrapper.

69
00:04:28.420 --> 00:04:33.220
And right here in order to actually find the component by its name, because we can find a component

70
00:04:33.220 --> 00:04:38.470
by a wide variety of things, we can invoke this method and provide a JavaScript object.

71
00:04:38.470 --> 00:04:44.530
It's a configuration object and here we'll provide a name property and then the name of the component.

72
00:04:44.530 --> 00:04:49.540
And this is the name that we assign to the component in its configuration object in the file.

73
00:04:49.810 --> 00:04:53.650
So if we're looking for the log in button, that is the action button component.

74
00:04:53.770 --> 00:04:58.630
We call that action button in its name property within the action button, that view file.

75
00:04:58.870 --> 00:05:00.430
So here we can write action button.

76
00:05:00.520 --> 00:05:01.990
That's exactly what I have there.

77
00:05:02.440 --> 00:05:02.830
All right.

78
00:05:03.130 --> 00:05:07.630
And then on the next line, I want to repeat the exact same logic, but for our profile image component.

79
00:05:07.870 --> 00:05:10.660
So right here, I'm going to look for the profile image.

80
00:05:11.560 --> 00:05:16.960
I'm going to invoke defined component method and its name is going to be profile image.

81
00:05:17.770 --> 00:05:20.380
All right, let me save this and prettier will make it a little bit cleaner.

82
00:05:20.410 --> 00:05:20.770
All right.

83
00:05:21.040 --> 00:05:27.250
So now I have attempted to find a component somewhere in May now that has this name, and I've done

84
00:05:27.250 --> 00:05:28.510
it for my two different components.

85
00:05:28.780 --> 00:05:29.860
So what do we expect here?

86
00:05:30.070 --> 00:05:36.280
Well, we expect that our login button is going to exist and our profile image is not going to exist.

87
00:05:36.520 --> 00:05:43.180
So what I can do is actually invoke a helpful method on the respective component that I find or perhaps

88
00:05:43.180 --> 00:05:43.960
non component.

89
00:05:44.170 --> 00:05:48.940
And there is a method available on this object that we get back which is this view wrapper object called

90
00:05:48.940 --> 00:05:52.600
exists and exists operates exactly as you might think.

91
00:05:52.750 --> 00:05:59.590
It's going to give you back a boolean that determines whether or not that component exists in the template.

92
00:05:59.800 --> 00:06:06.670
So if the wrapper has a component with the name of action button somewhere in here, then the easiest

93
00:06:06.670 --> 00:06:07.630
method is going to return.

94
00:06:07.630 --> 00:06:08.050
True.

95
00:06:08.200 --> 00:06:09.970
Otherwise it's going to return false.

96
00:06:10.240 --> 00:06:15.760
So we want our login button to exist if the user is logged out, which they are in this case because

97
00:06:15.780 --> 00:06:17.140
is logged in is set to false.

98
00:06:17.380 --> 00:06:20.950
So I'm going to use my to be matcher and put a value of true.

99
00:06:21.760 --> 00:06:30.190
We expect our login button to exist when the user is logged out and we expect our profile image to not

100
00:06:30.190 --> 00:06:30.670
exist.

101
00:06:30.670 --> 00:06:36.190
So I'm going to invoke the same exists method on profile image and I expect this to return false.

102
00:06:36.610 --> 00:06:41.890
So again, the exists method is going to return a boolean either true or false, depending on whether

103
00:06:41.890 --> 00:06:48.220
our test was able to find the given component in the actual markup of our main NAV component.

104
00:06:48.550 --> 00:06:48.820
All right.

105
00:06:49.030 --> 00:06:50.230
So that is our first test.

106
00:06:50.230 --> 00:06:54.100
And now I want to write the inverse test when the user is logged in.

107
00:06:54.430 --> 00:06:58.690
So right here below that describe, I'm going to add a very similar test.

108
00:06:58.990 --> 00:07:05.770
But here I'm going to describe when a user logs in once again, I'm going to provide my function here

109
00:07:06.340 --> 00:07:12.520
and now my test is going to be it displays user profile picture.

110
00:07:13.180 --> 00:07:19.090
That's the responsibility of our main nav component when our user logs in all right now for the most

111
00:07:19.090 --> 00:07:24.280
part our test is going to be pretty simple a similar so I'm going to copy and paste this code right

112
00:07:24.280 --> 00:07:26.470
here and then modify it slightly.

113
00:07:27.610 --> 00:07:28.870
So what are the differences here?

114
00:07:28.870 --> 00:07:35.080
Well, when the user logs in, we expect that somehow the is logged in that a property will be true.

115
00:07:35.320 --> 00:07:39.730
We haven't talked about how to change data yet, but of course we can and I will show you how to do

116
00:07:39.730 --> 00:07:44.320
that in a few lessons, but we'll assume that somehow that is logged in property will be true.

117
00:07:44.770 --> 00:07:45.100
Right.

118
00:07:45.310 --> 00:07:49.780
And we're still going to find these respective components, but now they're going to be inverted.

119
00:07:49.780 --> 00:07:51.910
So our login button should not exist.

120
00:07:52.150 --> 00:07:57.880
So we expect this to be false and our profile image should exist if our login property is such a true

121
00:07:58.540 --> 00:08:03.160
because of course the is logged in property being true will cause this to be true.

122
00:08:03.160 --> 00:08:06.550
The VIF the vrf, which should render our profile image.

123
00:08:06.850 --> 00:08:11.800
All right, so let's go ahead and run this test using NPM run test colon unit that's going to run our

124
00:08:11.800 --> 00:08:12.790
entire test sweep.

125
00:08:13.390 --> 00:08:15.310
And we're going to see if these two tests work.

126
00:08:15.670 --> 00:08:17.620
And I believe they should be perfect.

127
00:08:17.830 --> 00:08:19.720
So everything is working as expected.

128
00:08:19.720 --> 00:08:24.010
We are finding the respective components within our main now.

129
00:08:24.160 --> 00:08:28.810
Now there are two things that I don't like about this test and we talked about some of these things

130
00:08:28.810 --> 00:08:29.170
earlier.

131
00:08:29.320 --> 00:08:33.580
Number one is the manual hard coding of the implementation of the component.

132
00:08:33.730 --> 00:08:37.000
So our tests know a lot about how Main NAV is configured.

133
00:08:37.240 --> 00:08:41.950
It knows about its data and knows about a property called is logged in and knows that that property

134
00:08:41.950 --> 00:08:45.700
has to be a certain way in order to render a certain component.

135
00:08:45.700 --> 00:08:45.970
Right.

136
00:08:45.970 --> 00:08:50.080
And from a user's perspective, accessing our app, they don't care about any of this.

137
00:08:50.230 --> 00:08:55.180
So this is testing a lot of technical details that doesn't actually test the user value of what Main

138
00:08:55.180 --> 00:08:56.110
now is supposed to do.

139
00:08:56.170 --> 00:08:56.500
Right.

140
00:08:57.130 --> 00:09:03.970
And the second issue is using our find component method very similarly to how we talked about the idea

141
00:09:03.970 --> 00:09:06.280
of looking for an HTML element or a class.

142
00:09:06.490 --> 00:09:12.040
This is a lot more brittle because we're connected to the name of an actual component here, like action

143
00:09:12.040 --> 00:09:13.270
button or profile image.

144
00:09:13.540 --> 00:09:17.830
So if tomorrow we go into our action button component and we change its.

145
00:09:18.080 --> 00:09:21.950
Name two something different like super action button or mega button.

146
00:09:22.100 --> 00:09:26.930
Well, all of a sudden, this test, which is totally separate from the from the action button component,

147
00:09:27.020 --> 00:09:27.800
will fail.

148
00:09:27.890 --> 00:09:28.240
Right.

149
00:09:28.400 --> 00:09:33.100
It's going to fail because we're connected to our component name now instead of an HTML element name.

150
00:09:33.320 --> 00:09:36.020
So we're going to attempt to fix these issues in the very next lesson.

151
00:09:36.170 --> 00:09:38.240
But this is a good introductory test.

152
00:09:38.420 --> 00:09:43.160
It's the simplest test that we can write to verify that our code works as expected, and now we can

153
00:09:43.160 --> 00:09:44.840
make it better in the very next lesson.
