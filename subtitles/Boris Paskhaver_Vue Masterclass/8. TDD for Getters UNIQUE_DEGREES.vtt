WEBVTT
1
00:00:00.760 --> 00:00:01.330
Okay.

2
00:00:01.330 --> 00:00:04.630
So the next thing we're going to create is going to be a new getter.

3
00:00:04.900 --> 00:00:10.630
Notice in our getters test file on the left that we have a getter for unique organizations as well as

4
00:00:10.630 --> 00:00:11.530
unique job types.

5
00:00:11.740 --> 00:00:17.260
And both of these getters exist in order to provide, in this case, a set of unique strengths for us

6
00:00:17.260 --> 00:00:21.160
to iterate over in a component in order to render checkboxes for.

7
00:00:21.490 --> 00:00:24.700
And we need to do something very similar for our unique degrees.

8
00:00:24.880 --> 00:00:30.430
We need some kind of collection of degree strings that we can iterate over to render checkboxes for.

9
00:00:30.760 --> 00:00:32.440
So as always, let's start with a test.

10
00:00:32.500 --> 00:00:37.300
So on the right hand side here, I have my getters that test, that test file and we in here we can

11
00:00:37.300 --> 00:00:38.950
start wiring up a sample test.

12
00:00:39.310 --> 00:00:40.480
So how about below this?

13
00:00:40.480 --> 00:00:42.280
Describe like four unique job types.

14
00:00:42.280 --> 00:00:47.560
I'm going to describe my new getter, and it will predictably be called unique degrees.

15
00:00:48.910 --> 00:00:55.690
And here for the description for the IT function, I can say it extracts unique degree values.

16
00:00:57.370 --> 00:00:57.670
All right.

17
00:00:57.670 --> 00:01:01.390
Now, this is going to be a little bit different compared to our previous implementations, because,

18
00:01:01.390 --> 00:01:07.000
remember, for our organizations and our job types, we were iterating over our actual jobs that we

19
00:01:07.000 --> 00:01:07.330
had.

20
00:01:07.570 --> 00:01:12.490
And in this case, we don't need to do that because we already have a whole array of degrees.

21
00:01:12.670 --> 00:01:17.110
And each of those degree objects, as a reminder, has an ID property and a degree property.

22
00:01:17.380 --> 00:01:22.570
So if we can simply iterate over that collection of degrees and just get a degree property from each

23
00:01:22.570 --> 00:01:27.100
one, we're going to have a unique list of the actual degrees themselves.

24
00:01:27.280 --> 00:01:29.680
In fact, we're not even going to need to have a set here.

25
00:01:29.680 --> 00:01:34.540
We can stick with something simple like an array, because we can assume that our degrees end point

26
00:01:34.690 --> 00:01:36.640
will provide a unique set of degrees.

27
00:01:36.640 --> 00:01:39.790
Or when I use the word set, I mean a unique collection of degrees.

28
00:01:40.120 --> 00:01:43.120
In other words, let's create an array of degree objects here.

29
00:01:43.270 --> 00:01:44.530
So I'm going to say con's degrees.

30
00:01:45.430 --> 00:01:51.430
And before I populate this array, recall that we do have a create degree helper function and we can

31
00:01:51.430 --> 00:01:53.800
import it directly from this utils file right here.

32
00:01:54.070 --> 00:01:55.840
So what I'm going to do here is create.

33
00:01:56.780 --> 00:01:57.410
Degree.

34
00:01:57.650 --> 00:01:58.940
Simply import that function.

35
00:01:58.940 --> 00:02:04.100
And now here in this array I can invoke that helper function and pass in whatever properties I want.

36
00:02:04.430 --> 00:02:09.170
So once again, to communicate what this test is doing, I can specify that this degree will have a

37
00:02:09.170 --> 00:02:15.350
degree property set to something like masters, and afterwards I can create another degree object in

38
00:02:15.350 --> 00:02:18.650
the line below, and this one can have a degree value like bachelor's.

39
00:02:19.220 --> 00:02:25.040
And then all I need to verify is that my getter is going to extract these two values in whatever data

40
00:02:25.040 --> 00:02:25.790
structure I want.

41
00:02:25.940 --> 00:02:29.720
As I mentioned, let's just do an array this time around to keep things a little bit different from

42
00:02:29.720 --> 00:02:31.820
our previous implementations, which relied on a set.

43
00:02:32.210 --> 00:02:35.150
So what I'm going to do here is I'm going to create my view store state.

44
00:02:35.150 --> 00:02:42.170
We have our helper create state function and that also accepts a config and we do not have to provide

45
00:02:42.380 --> 00:02:44.270
all the properties, only the ones we care about.

46
00:02:44.450 --> 00:02:49.700
In this case, I care about the degrees property that does exist on our state, so that is totally valid

47
00:02:49.850 --> 00:02:51.800
and we'll provide this array right here.

48
00:02:52.250 --> 00:02:54.620
Then what I want to do, of course, is rely on my getter.

49
00:02:54.770 --> 00:02:59.570
So I have my getters object imported and I'm going to assume my getter will exist at that point.

50
00:02:59.810 --> 00:03:02.240
And I assume it's going to have the name of unique degrees.

51
00:03:02.870 --> 00:03:07.250
And of course, every getter method accepts the View Store State as its first argument.

52
00:03:07.400 --> 00:03:12.440
So here I'm going to pass in my existing state and I expect that that getter will return to me some

53
00:03:12.440 --> 00:03:15.980
kind of data structure that's going to store all of my unique degree values.

54
00:03:16.220 --> 00:03:16.460
All right.

55
00:03:16.460 --> 00:03:19.910
So this is kind of the two D part where we can determine what we want to get back.

56
00:03:20.090 --> 00:03:24.500
And previously, for example, here we had a set, etc., but in this case, we can already guarantee

57
00:03:24.500 --> 00:03:25.110
uniqueness.

58
00:03:25.130 --> 00:03:26.990
So in my mind, there's no need to use a set.

59
00:03:27.170 --> 00:03:31.550
Let's just assume we're going to get a array and then we'll match our implementation to what the tests

60
00:03:31.550 --> 00:03:32.000
expect.

61
00:03:32.360 --> 00:03:34.670
So right here I'm going to sign this to a content called Result.

62
00:03:36.150 --> 00:03:40.380
And I expect results on the next line to be an array.

63
00:03:41.100 --> 00:03:45.030
And of course, that array should have all of my unique degree values, which of course are going to

64
00:03:45.030 --> 00:03:46.620
be master's and bachelor's.

65
00:03:46.890 --> 00:03:51.630
So right here I expect Masters to be my first one and bachelors to be my second one.

66
00:03:52.970 --> 00:03:53.300
All right.

67
00:03:53.510 --> 00:03:56.060
So with that, we can start wiring up the actual implementation.

68
00:03:56.240 --> 00:04:02.030
Of course, all of our getter names, all of our general UX names start with a constant, which means

69
00:04:02.030 --> 00:04:04.280
we're going to need to start in our Constance far right here.

70
00:04:04.640 --> 00:04:07.950
And it is right here that we can add a new concept.

71
00:04:07.970 --> 00:04:11.150
So let's export a concept called unique degrees.

72
00:04:11.390 --> 00:04:15.380
This is going to be our eventual getter name, so I'm going to put that right here.

73
00:04:16.990 --> 00:04:21.610
And that means in our letters file right here, I can include that constant right here.

74
00:04:22.180 --> 00:04:23.980
So let's import unique degrees.

75
00:04:24.340 --> 00:04:28.450
So we now have the constant imported and we can use it as the name of a getter.

76
00:04:28.780 --> 00:04:31.900
So right here, I'm going to define my unique degrees getter method.

77
00:04:32.290 --> 00:04:34.130
We're going to provide its body right here.

78
00:04:34.390 --> 00:04:37.030
Of course, the very first parameter to every getter, Matthew.

79
00:04:37.030 --> 00:04:37.360
Right.

80
00:04:37.360 --> 00:04:39.610
Will be the store state as it currently is.

81
00:04:39.760 --> 00:04:43.450
And that will be the type global state, which is an interface we defined earlier.

82
00:04:43.900 --> 00:04:50.740
And so here it is our responsibility in this unique, degrees getter method to get an array like this

83
00:04:50.740 --> 00:04:52.060
from our existing state.

84
00:04:52.810 --> 00:04:57.070
Luckily, it's going to be pretty simple because we already have an array of degrees.

85
00:04:57.280 --> 00:05:02.350
So once again, if I simply go to my state that's filed to remind you we have a degrees array and that

86
00:05:02.350 --> 00:05:05.380
degrees array is of type degree object.

87
00:05:05.500 --> 00:05:09.490
And every degree object, of course, has an ID and a degree property.

88
00:05:09.820 --> 00:05:15.050
So what I'm going to do here is I'm going to return the first thing I'm going to do is take my view

89
00:05:15.070 --> 00:05:17.950
extra state and on and I have my degrees property.

90
00:05:18.130 --> 00:05:20.580
That's going to give me an array of degree degree objects.

91
00:05:20.770 --> 00:05:23.860
And from an array of degree objects, I want an array of strings.

92
00:05:24.040 --> 00:05:28.660
So whenever you have an array and you want a new array of the exact same ones, you can call the map

93
00:05:28.660 --> 00:05:31.240
method and that expects a function.

94
00:05:31.390 --> 00:05:34.450
And so we're going to be iterating over every single degree object.

95
00:05:35.410 --> 00:05:39.550
And then what we want from every degree object is its degree property right here.

96
00:05:39.850 --> 00:05:44.620
So the degree object were iterating over which has these two properties, idea and degree.

97
00:05:44.830 --> 00:05:47.320
I want to access the exact degree property.

98
00:05:47.530 --> 00:05:52.600
I understand it's a little bit confusing because both the object right here is of type degree this thing,

99
00:05:52.720 --> 00:05:55.510
but the individual property itself is also called degree.

100
00:05:55.690 --> 00:06:00.100
So in this case, we're going to do degree dot degree, although this first one is up to you depending

101
00:06:00.100 --> 00:06:01.180
on what the parameter name is.

102
00:06:01.480 --> 00:06:05.860
You'll also notice because TypeScript knows we're iterating over an array of degrees, it can figure

103
00:06:05.860 --> 00:06:09.330
out right here that the degree parameter is of type degree.

104
00:06:09.340 --> 00:06:10.420
It's this thing right here.

105
00:06:10.660 --> 00:06:15.340
So we do not need to provide an explicit annotation because TypeScript already knows and thus it can

106
00:06:15.340 --> 00:06:17.230
validate that degree exist on that.

107
00:06:17.470 --> 00:06:21.490
So for example, if I tried to access a property that did not exist like degrees, you can see it's

108
00:06:21.490 --> 00:06:26.380
going to say, hey, property degrees does not exist on your type or your interface called degree.

109
00:06:26.530 --> 00:06:30.280
And then it's going to make a recommendation for the actual property it thinks we meant, which in this

110
00:06:30.280 --> 00:06:31.130
case is correct.

111
00:06:31.150 --> 00:06:35.950
So I'm going to change this to degree, much simpler implementation that does not require us to create

112
00:06:35.950 --> 00:06:36.520
a new set.

113
00:06:36.850 --> 00:06:40.820
And now if I'm if I allow my test to run, we'll see that everything passes.

114
00:06:41.110 --> 00:06:41.470
All right.

115
00:06:41.470 --> 00:06:42.730
So making a lot of progress.

116
00:06:42.760 --> 00:06:44.290
We now have a new slice of state.

117
00:06:44.560 --> 00:06:47.140
We now have a mutation to overwrite that state.

118
00:06:47.320 --> 00:06:51.820
We have an action to trigger the API request and then commit the mutation to override the state.

119
00:06:52.060 --> 00:06:56.620
And once that all populates, we now have a getter to talk to that degrees array in our view, extra

120
00:06:56.620 --> 00:06:59.110
state and get me an array of strings.

121
00:06:59.350 --> 00:07:02.070
So on the view side of things, we're basically close to done.

122
00:07:02.110 --> 00:07:07.540
The next thing we're going to need to transition to is, of course, rendering checkboxes for all of

123
00:07:07.540 --> 00:07:09.130
these unique degrees strings.

124
00:07:09.370 --> 00:07:09.610
All right.

125
00:07:09.610 --> 00:07:11.260
So we'll start on that in the very next lesson.
