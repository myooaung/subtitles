1
00:00:01,100 --> 00:00:01,670
Okay.

2
00:00:01,670 --> 00:00:04,550
So welcome to the official TypeScript playground.

3
00:00:04,790 --> 00:00:11,420
As a reminder, you can access this web page by going to typescript lang dawg slash play.

4
00:00:11,690 --> 00:00:13,670
And here's how this application works.

5
00:00:13,880 --> 00:00:20,540
On the left hand side, we have a code editor, and in here we can write valid typescript code immediately

6
00:00:20,540 --> 00:00:22,640
as soon as we write our typescript code.

7
00:00:22,850 --> 00:00:26,810
The right hand side will show us the resulting compiled JavaScript.

8
00:00:27,020 --> 00:00:30,890
So this on the right hand side is the JavaScript coming from our typescript.

9
00:00:31,190 --> 00:00:37,550
Keep in mind there is a lot of valid TypeScript code that is going to look very similar to existing

10
00:00:37,760 --> 00:00:38,810
a JavaScript code.

11
00:00:38,930 --> 00:00:43,490
So here's a perfect example and here you can see they're declaring a concept and then they're console.log

12
00:00:43,580 --> 00:00:46,580
it and the JavaScript equivalent is exactly the same.

13
00:00:46,790 --> 00:00:50,360
So many times TypeScript and JavaScript will look virtually identical.

14
00:00:50,540 --> 00:00:55,790
However, as a reminder, TypeScript allows us additional syntax that we can do, and that syntax will

15
00:00:55,790 --> 00:00:58,880
not be shown in the JavaScript side of things.

16
00:00:59,300 --> 00:01:03,800
In addition, on this right hand panel here, there's a couple of helpful things you can do here.

17
00:01:04,010 --> 00:01:08,660
So right here we can see there's an errors tab where you can see any violations in TypeScript in your

18
00:01:08,660 --> 00:01:08,960
code.

19
00:01:09,170 --> 00:01:10,940
And here is the logs section.

20
00:01:11,120 --> 00:01:16,280
Whenever you run the file on the left, all the console logs will appear here on the right.

21
00:01:16,490 --> 00:01:20,480
So, for example, if I press the run button right here, we're going to see that console log of Hello

22
00:01:20,480 --> 00:01:21,860
World appear right here.

23
00:01:21,980 --> 00:01:22,280
All right.

24
00:01:22,460 --> 00:01:26,450
But the most important part of this page is really looking at the resulting JavaScript.

25
00:01:26,540 --> 00:01:26,930
Okay.

26
00:01:27,290 --> 00:01:32,660
One other thing before we start writing some code, you'll notice here there is the choice of the TypeScript

27
00:01:32,660 --> 00:01:33,830
version that you want to run.

28
00:01:34,100 --> 00:01:39,530
Most modern versions of TypeScript introduce new features, but the coarse syntax of the language,

29
00:01:39,530 --> 00:01:43,220
the real fundamentals that we care about are basically going to stay the same.

30
00:01:43,490 --> 00:01:46,000
So we don't really have to worry about the exact version number.

31
00:01:46,010 --> 00:01:48,560
And if yours doesn't match mine, that's totally fine.

32
00:01:48,710 --> 00:01:53,120
Just select the latest version you see here, because why not work with the the latest and greatest,

33
00:01:53,120 --> 00:01:53,360
right?

34
00:01:53,720 --> 00:01:59,060
So with that said, let's delete all the code on the left hand side and let's write a sample JavaScript

35
00:01:59,060 --> 00:02:00,050
variable assignment.

36
00:02:00,380 --> 00:02:05,170
So what I'm going to do here is declare a first name variable and I'll assign it to my name of Burrus.

37
00:02:05,450 --> 00:02:06,860
You are more than welcome to you.

38
00:02:07,040 --> 00:02:08,840
Of course, write your own name instead.

39
00:02:09,200 --> 00:02:13,850
So notice again on the right hand side that the equivalent JavaScript is exactly the same.

40
00:02:14,210 --> 00:02:17,330
So what can we do in TypeScript that we cannot do in JavaScript?

41
00:02:17,540 --> 00:02:20,930
What we could do is assign types or annotate types.

42
00:02:21,170 --> 00:02:26,030
Basically what that means is we're going to tell the programming language, the type of something in

43
00:02:26,030 --> 00:02:26,480
our program.

44
00:02:26,750 --> 00:02:31,550
So if I want to tell TypeScript that first name is a string and will always be a string.

45
00:02:31,700 --> 00:02:36,020
Here's what that syntax looks like, and it's going to be a uniform syntax for all of TypeScript.

46
00:02:36,320 --> 00:02:41,630
After the thing that we are declaring, we put a colon and then a space, and that space is just for

47
00:02:41,630 --> 00:02:42,170
aesthetics.

48
00:02:42,350 --> 00:02:44,330
And then we write the actual data type.

49
00:02:44,570 --> 00:02:47,960
So in this case, this is a string which I'm going to write in all lowercase.

50
00:02:48,800 --> 00:02:52,400
So again, a type like a string is not a concrete value, right?

51
00:02:52,550 --> 00:02:54,230
Boris is a concrete value.

52
00:02:54,350 --> 00:02:58,940
String is a type five is a concrete value number is a type.

53
00:02:59,060 --> 00:03:00,890
We're describing the data type.

54
00:03:00,890 --> 00:03:02,510
We're not describing the implementation.

55
00:03:02,750 --> 00:03:06,080
So in this case, we have told TypeScript that first name will always be a strength.

56
00:03:06,320 --> 00:03:11,600
So take a look at what happens if I try to reassign first name to some something else of a wrong data

57
00:03:11,600 --> 00:03:14,210
type, such as a number in JavaScript.

58
00:03:14,210 --> 00:03:18,110
This would be totally valid code, but in TypeScript it is not permitted.

59
00:03:18,320 --> 00:03:23,300
So if I hover my mouse, you can see TypeScript tells us that type number, which is the type of five,

60
00:03:23,540 --> 00:03:25,700
is not assignable to the type of string.

61
00:03:25,730 --> 00:03:29,810
That's what you promised me when you declared what first name was going to be right.

62
00:03:30,050 --> 00:03:34,640
As another example, if we try to do some kind of operation with a string that is not promise, permissive

63
00:03:34,850 --> 00:03:37,250
or allowed, TypeScript is going to complain.

64
00:03:37,460 --> 00:03:42,530
So for example, if we tried to multiply our string by a number, this is totally valid code in JavaScript.

65
00:03:42,740 --> 00:03:45,680
And when I say valid, I don't mean that it's not going to trigger an error.

66
00:03:45,830 --> 00:03:49,700
It probably will trigger an error, but not until we actually run the code.

67
00:03:49,820 --> 00:03:54,530
In comparison, TypeScript will tell us there's an error before the file even runs and we have to fix

68
00:03:54,530 --> 00:03:57,740
it in order for TypeScript to compile and allow itself to be run.

69
00:03:58,040 --> 00:04:02,720
So right here you can see it's going to say the left hand side of an arithmetic operation must be of

70
00:04:02,720 --> 00:04:04,190
some type, including number.

71
00:04:04,310 --> 00:04:06,890
So a string is not a valid thing that we can multiply by.

72
00:04:07,220 --> 00:04:12,680
As another example, let's say we have a file that is 100 lines long and we declared first name way

73
00:04:12,680 --> 00:04:13,100
up above.

74
00:04:13,250 --> 00:04:16,850
And let's see, we get confused and think that it is an array instead of a string.

75
00:04:17,060 --> 00:04:20,570
We may try to invoke a method like push which only exists on an array.

76
00:04:20,720 --> 00:04:26,000
And once again TypeScript will tell us, Hey, the property push does not exist on the type string which

77
00:04:26,000 --> 00:04:27,170
you told me first name.

78
00:04:27,170 --> 00:04:27,710
It's right.

79
00:04:27,890 --> 00:04:29,450
And that's where TypeScript really shines.

80
00:04:29,780 --> 00:04:33,290
Now, of course, you might be looking at a really simple and contrived example like this and saying,

81
00:04:33,290 --> 00:04:34,520
Yeah, but that's kind of obvious.

82
00:04:34,520 --> 00:04:38,780
I'm not going to make stupid mistakes, like reassigning first name to a value of five, and you are

83
00:04:38,780 --> 00:04:39,740
absolutely correct.

84
00:04:39,920 --> 00:04:45,200
But where TypeScript is really going to shine is when we have a lot of complex nested data structures.

85
00:04:45,380 --> 00:04:47,570
That's where it becomes really easy to get confused.

86
00:04:47,840 --> 00:04:53,030
So imagine you have, for example, a function that returns a promise that resolves to be an array of

87
00:04:53,030 --> 00:04:53,570
objects.

88
00:04:53,750 --> 00:04:58,040
Each of those objects having ten properties and one of those properties being an array of strings.

89
00:04:58,040 --> 00:04:58,280
Right?

90
00:04:58,460 --> 00:05:00,320
It's in those situations where you might.

91
00:05:00,380 --> 00:05:05,180
Make mistakes like accessing a property on the wrong object or forgetting that you have an array instead

92
00:05:05,180 --> 00:05:06,920
of an object here, or vice versa.

93
00:05:07,160 --> 00:05:11,240
It's when you're dealing in that nested complexity that TypeScript is going to be a lot smarter than

94
00:05:11,240 --> 00:05:13,700
us and warned us when we're making simple mistakes like this.

95
00:05:13,880 --> 00:05:17,900
Obviously, when we have two lines in our editor, it's not as apparent, but promise.

96
00:05:18,140 --> 00:05:20,990
But I promise you, believe me, I'm really large projects.

97
00:05:21,080 --> 00:05:23,110
TypeScript is going to catch you a lot of times.

98
00:05:23,120 --> 00:05:27,380
There's many times where I've been coding and typed which are told me, Hey, that thing that you think

99
00:05:27,380 --> 00:05:30,110
is, you know, type X is actually type Y.

100
00:05:30,110 --> 00:05:33,560
And it forced me to recalibrate and realize where my mistake was.

101
00:05:33,770 --> 00:05:34,130
All right.

102
00:05:34,370 --> 00:05:37,970
So let me show you a couple more examples of this annotation syntax.

103
00:05:38,000 --> 00:05:42,920
Let's say I have a number and let's call it age and assign it to the age variable.

104
00:05:42,950 --> 00:05:43,970
I'm just going to make it 30.

105
00:05:44,120 --> 00:05:48,350
Once again, the way we annotate a type is we put a colon, then the type afterwards.

106
00:05:48,590 --> 00:05:51,170
So for example, for a number we just write lowercase number.

107
00:05:51,470 --> 00:05:53,450
For a boolean, it's the exact same syntax.

108
00:05:53,480 --> 00:05:55,970
So for example, I can have a variable called is handsome.

109
00:05:56,210 --> 00:06:01,340
I'll set that to a boolean boolean like so and then I'll sign it to a value of true.

110
00:06:01,340 --> 00:06:02,480
And the same rules apply.

111
00:06:02,490 --> 00:06:07,700
So if I try to assign as handsome to false, that's going to be totally valid because that is a boolean.

112
00:06:07,880 --> 00:06:12,080
If I tried to assign a to something like an array, then TypeScript is going to complain because it's

113
00:06:12,080 --> 00:06:15,830
going to say, hey, an array is not of type boolean, so I'm not going to permit it.

114
00:06:16,250 --> 00:06:16,580
All right.

115
00:06:16,610 --> 00:06:18,440
One other cool thing about this annotation.

116
00:06:18,440 --> 00:06:21,300
Syntax is we don't need to assign an initial value.

117
00:06:21,320 --> 00:06:26,630
If we give it a type annotation, for example, this syntax in line three, TypeScript knows it has

118
00:06:26,630 --> 00:06:28,580
a variable that must be a boolean.

119
00:06:28,760 --> 00:06:31,140
So it's not going to allow anything else.

120
00:06:31,160 --> 00:06:34,850
It's just going to complain because now we've told it that it has to be a boolean throughout the program,

121
00:06:35,000 --> 00:06:36,560
so we can't make mistakes like this.

122
00:06:37,070 --> 00:06:41,750
Finally, to close this lesson off, I just want to show you two special examples, which is undefined

123
00:06:41,750 --> 00:06:42,350
and null.

124
00:06:42,590 --> 00:06:48,320
The thing that makes those two unique is that the type is actually going to be the exact same as the

125
00:06:48,320 --> 00:06:48,770
value.

126
00:06:48,770 --> 00:06:54,740
That is an exception to this example right here because undefined is both an actual value in JavaScript

127
00:06:54,860 --> 00:06:57,830
and it's type in TypeScript is undefined as well.

128
00:06:58,070 --> 00:07:02,810
There is no parent category, right in the same way that you can have infinite strings and they're all

129
00:07:02,810 --> 00:07:06,650
going to have different numbers of characters and say different words, but they're all strings where

130
00:07:06,650 --> 00:07:12,470
similarly an infinite number of numeric values, but they're all a type number undefined in JavaScript

131
00:07:12,470 --> 00:07:14,000
is kind of its own construct.

132
00:07:14,000 --> 00:07:18,320
There's nothing that is, you know, it doesn't have a parent category or any related siblings or anything

133
00:07:18,320 --> 00:07:18,740
like that.

134
00:07:18,980 --> 00:07:21,590
So the type of undefined is undefined.

135
00:07:21,860 --> 00:07:24,260
The way that's going to look is the exact same as the syntax above.

136
00:07:24,260 --> 00:07:27,710
So for example, if I have a variable like what the future holds.

137
00:07:29,140 --> 00:07:34,000
I can assign it a type of undefined and then actually give it the value of undefined and that will work

138
00:07:34,000 --> 00:07:34,450
just fine.

139
00:07:34,540 --> 00:07:36,400
And the exact same rules apply for NULL.

140
00:07:36,700 --> 00:07:38,710
So for example, if I have available call nothing.

141
00:07:38,710 --> 00:07:41,950
I'm going to assign another type of null and assign a value of no.

142
00:07:42,130 --> 00:07:45,880
So these are kind of general exceptions to the rule that a type is not the same thing as a value.

143
00:07:46,030 --> 00:07:50,170
In this in this two scenarios, it's kind of little bit more blurry, but it hopefully makes sense because

144
00:07:50,170 --> 00:07:54,820
these are JavaScript related constructs, while string number and even boolean is a little bit more

145
00:07:54,820 --> 00:07:55,330
open ended.

146
00:07:55,330 --> 00:08:01,150
Even Boolean has two possible values true and false, undefined and null can only really be themselves.

147
00:08:01,330 --> 00:08:04,330
So that's why the type is the exact same as the value.

148
00:08:04,450 --> 00:08:04,780
All right.

149
00:08:05,080 --> 00:08:06,650
That's really all there is to cover in this lesson.

150
00:08:06,650 --> 00:08:08,710
And that's really the heart of what TypeScript helps you with.

151
00:08:08,710 --> 00:08:13,300
And we're going to keep exploring more of this language in this playground over the course of the next

152
00:08:13,300 --> 00:08:13,870
couple of lessons.

153
00:08:13,870 --> 00:08:14,830
So I'll see you there.
