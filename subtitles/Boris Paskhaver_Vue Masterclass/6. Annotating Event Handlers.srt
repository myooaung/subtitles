1
00:00:00,720 --> 00:00:01,170
Okay.

2
00:00:01,170 --> 00:00:06,930
So the next component we're going to update to support TypeScript is going to be our text input component.

3
00:00:07,290 --> 00:00:09,570
So I'm going to open up a text input to view.

4
00:00:10,530 --> 00:00:11,240
And here it is.

5
00:00:11,250 --> 00:00:17,310
It's just the basic HTML input element with a whole bunch of bindings for things like props.

6
00:00:17,310 --> 00:00:21,510
For example, here we are binding the placeholder attribute to a placeholder prop.

7
00:00:21,810 --> 00:00:27,570
And as another quick reminder in this component, we are emitting an event up to the parent component

8
00:00:27,810 --> 00:00:34,770
so that whenever the user types a value into this text input, we are invoking this handle input method

9
00:00:34,890 --> 00:00:40,620
and emitting a message with this name and this payload, which happens to be the actual value in the

10
00:00:40,620 --> 00:00:41,520
input field itself.

11
00:00:41,820 --> 00:00:43,470
That's just a quick reminder of what this does.

12
00:00:43,680 --> 00:00:46,590
Let's see what happens when we add TypeScript support.

13
00:00:46,840 --> 00:00:51,900
So right here, as always, we're going to add our land attributes, set the test and down below I'm

14
00:00:51,900 --> 00:00:54,420
going to import define component.

15
00:00:55,050 --> 00:01:02,160
And that is going to come from our view library and I'm going to invoke defined component and pass in

16
00:01:02,160 --> 00:01:04,920
my actual configuration object.

17
00:01:05,950 --> 00:01:06,490
All right.

18
00:01:06,490 --> 00:01:08,200
So we have only one violation.

19
00:01:08,200 --> 00:01:11,230
And it is, of course, related to this dollar sign event parameter.

20
00:01:11,410 --> 00:01:13,630
And we can see TypeScript has no clue what this is.

21
00:01:13,840 --> 00:01:16,720
So it says parameter event implicitly has an any type.

22
00:01:17,110 --> 00:01:20,230
So what is the proper type for this event parameter.

23
00:01:20,230 --> 00:01:20,440
Right.

24
00:01:20,680 --> 00:01:26,920
Well remember this represents a browser generated event and an event is just an object that stores something

25
00:01:26,920 --> 00:01:31,390
that has happened in the browser and it stores a whole bunch of information related to that event.

26
00:01:31,780 --> 00:01:38,440
So luckily the core typescript language includes built in interfaces for browser events.

27
00:01:38,710 --> 00:01:43,720
So it's going to be as simple as referencing an interface that is going to be globally available in

28
00:01:43,720 --> 00:01:46,030
every file to us directly from TypeScript.

29
00:01:46,150 --> 00:01:48,070
And it is a capital E event.

30
00:01:48,310 --> 00:01:51,580
So right here, a colon to declare the proper type.

31
00:01:51,730 --> 00:01:57,190
And I'm going to use the word event, all capital and on a mac here, what I can do is click this using

32
00:01:57,190 --> 00:01:58,210
the command button.

33
00:01:58,210 --> 00:02:02,590
So hold command, press, press into this and you're going to go into the fireworks defined.

34
00:02:02,590 --> 00:02:04,270
I'm also going to press enter to bring this up.

35
00:02:04,570 --> 00:02:05,980
You do not have to follow along with this.

36
00:02:05,980 --> 00:02:08,260
By the way, I'm going to drag this over to the right.

37
00:02:09,220 --> 00:02:10,780
And this is the actual definition file.

38
00:02:10,900 --> 00:02:15,130
And you can see all that event is is an interface the exact same kind of interface.

39
00:02:15,130 --> 00:02:19,540
We've talked about writing manually and you can see here it represents an event which takes place in

40
00:02:19,540 --> 00:02:21,280
the DOM, which means in the browser window.

41
00:02:21,640 --> 00:02:21,910
All right.

42
00:02:21,910 --> 00:02:26,200
So that takes care of our first violation, but unfortunately, it creates another one right here.

43
00:02:26,410 --> 00:02:30,790
You can see if I hover my mouse over here, it says object is possibly null.

44
00:02:31,090 --> 00:02:36,670
And to explain what's going on here in my event interface, I'm going to find the actual target property

45
00:02:36,670 --> 00:02:37,390
that we're accessing.

46
00:02:37,690 --> 00:02:42,100
So if I scroll down all the way here because I believe these are mostly alphabetical, there should

47
00:02:42,100 --> 00:02:42,700
be a target.

48
00:02:42,700 --> 00:02:43,180
There it is.

49
00:02:43,390 --> 00:02:47,200
And you can see Target is going to be either of type event target or.

50
00:02:47,290 --> 00:02:49,120
No, that's what that pipe means.

51
00:02:49,120 --> 00:02:50,080
It means either or.

52
00:02:50,350 --> 00:02:55,030
And unfortunately, if it's in that target, that it might have a value property, but if it's null,

53
00:02:55,030 --> 00:02:55,720
it will not.

54
00:02:56,140 --> 00:02:56,410
Right.

55
00:02:56,410 --> 00:03:00,460
So basically, TypeScript is saying it could be one of these two options and one of them doesn't support

56
00:03:00,460 --> 00:03:00,970
value.

57
00:03:00,970 --> 00:03:02,170
And thus I'm going to complain.

58
00:03:02,920 --> 00:03:08,470
However, this is the kind of scenario where we absolutely know that when handle input runs we're going

59
00:03:08,470 --> 00:03:10,060
to have a target defined.

60
00:03:10,210 --> 00:03:15,430
And the reason is it's a method that is literally connected to an actual input element right here.

61
00:03:15,430 --> 00:03:20,530
And this input will of course have to exist on the page in order for the user to type into it and trigger

62
00:03:20,530 --> 00:03:23,590
the handle input method drone in the first place.

63
00:03:23,830 --> 00:03:28,810
So this is another scenario where we absolutely know something that TypeScript does not and thus we

64
00:03:28,810 --> 00:03:33,220
need to tell it something that it does not know so it can better types type check for us.

65
00:03:33,550 --> 00:03:38,260
So typically, as we've seen before, whenever we have to tell TypeScript to recognize a different type,

66
00:03:38,470 --> 00:03:40,090
we need to use the as keyword.

67
00:03:40,480 --> 00:03:40,780
All right.

68
00:03:40,780 --> 00:03:42,040
So that's exactly what I'm going to do.

69
00:03:42,040 --> 00:03:45,190
And this is going to require us to split this logic up across two lines.

70
00:03:45,520 --> 00:03:51,640
So right here, what I'm going to say is target, I'm going to target, pardon the pun.

71
00:03:51,650 --> 00:03:56,980
I'm going to specifically focus on the target property, on my event object.

72
00:03:57,370 --> 00:04:01,120
And by itself, this is not creating any extra copy or anything, it's just creating a reference.

73
00:04:01,390 --> 00:04:06,640
But remember, I can tell TypeScript to treat this target object as something of a different type,

74
00:04:06,760 --> 00:04:08,920
and I can do that by using the as keyword.

75
00:04:09,220 --> 00:04:11,830
The question is, what do I use here as that thing?

76
00:04:12,130 --> 00:04:16,090
So what I want to do is in this file on the right where I have all of my definitions related to the

77
00:04:16,090 --> 00:04:17,800
DOM, I'm going to collapse everything.

78
00:04:19,090 --> 00:04:25,570
And I just want to show you that if I go to a prefix of HTML, for example, h10 or element, if I can

79
00:04:25,570 --> 00:04:31,060
find it right here, there's going to be a whole bunch of different elements that are HTML related.

80
00:04:31,060 --> 00:04:36,220
So for example, here we have an interface for an H HTML area, element h, html audio element h, html

81
00:04:36,250 --> 00:04:37,750
b, r or line break element.

82
00:04:37,960 --> 00:04:39,910
We have things for the HTML body element.

83
00:04:40,120 --> 00:04:45,640
So there's basically an interface for every single type of element that we can write in HTML to think

84
00:04:45,640 --> 00:04:48,730
things like header, div, ally, etc..

85
00:04:48,730 --> 00:04:53,860
There is an interface for each one of those types of elements because each one of those has a different

86
00:04:54,280 --> 00:05:00,010
number of properties accessible in the DOM when we have access to those objects as JavaScript representations,

87
00:05:00,010 --> 00:05:00,250
right?

88
00:05:00,640 --> 00:05:07,270
So to summarize this event, that target is going to give us an actual element from the DOM represented

89
00:05:07,270 --> 00:05:08,650
as a JavaScript object.

90
00:05:08,830 --> 00:05:13,960
And what we can provide here is a variety of inputs or a variety of interfaces to be more specific.

91
00:05:14,200 --> 00:05:18,700
And the one we're going to want here is a specific one called HTML input element.

92
00:05:19,570 --> 00:05:25,030
And that should hopefully make sense because an input element is what we know that Target will be referencing.

93
00:05:25,150 --> 00:05:30,730
Target will always be referencing a valid HTML element, but types of cannot know which one it is.

94
00:05:30,730 --> 00:05:33,760
It can't simply deduce that from this logic right here.

95
00:05:33,940 --> 00:05:38,170
But we know for certain that it's going to be an HTML input element, and so we're going to provide

96
00:05:38,170 --> 00:05:42,790
this interface to tell TypeScript that we know for certain that what you're going to reference with

97
00:05:42,790 --> 00:05:47,200
this target property is not just going to be any random HTML element, it's going to be specifically

98
00:05:47,200 --> 00:05:48,850
an HTML input element.

99
00:05:49,180 --> 00:05:54,250
And that's important because now TypeScript knows that if it can guarantee that that's the case and

100
00:05:54,490 --> 00:05:57,880
HTML input element will always have a value property.

101
00:05:58,180 --> 00:06:02,530
So we're basically saying don't treat this as your former thing where you thought it was one thing or

102
00:06:02,530 --> 00:06:05,500
now treat this as being certain of being.

103
00:06:05,530 --> 00:06:12,270
An HTML input element or of being of that type, whatever target is on line 30, we are promising TypeScript.

104
00:06:12,280 --> 00:06:13,750
We are telling it we know something.

105
00:06:13,750 --> 00:06:16,930
You don't treat this as this type to not input element.

106
00:06:17,260 --> 00:06:21,430
So right here on the line below, instead of doing that at Target, I'm simply going to do Target now.

107
00:06:22,540 --> 00:06:28,060
And TypeScript is treating the target constant as an edge to my input element, which it knows and can

108
00:06:28,060 --> 00:06:30,400
validate has a valid value property.

109
00:06:30,550 --> 00:06:35,410
And because it knows this, it's going to be able to confirm that value is a valid property that we

110
00:06:35,410 --> 00:06:41,620
can extract on that target object because it knows that the target object is living up to this interface

111
00:06:41,620 --> 00:06:46,150
or this type, whatever properties or shape of this interface.

112
00:06:46,150 --> 00:06:51,280
In other words, whatever it's defined as, it has a value property in there and TypeScript now knows

113
00:06:51,280 --> 00:06:53,950
that and thus it validates line 31 as well.

114
00:06:54,430 --> 00:06:54,790
All right.

115
00:06:55,000 --> 00:06:56,320
So that should solve this problem.

116
00:06:56,320 --> 00:07:00,010
And of course, all that's left to do is to update the test suite as well.

117
00:07:00,280 --> 00:07:09,100
So I'm going to open up text input that test that just move this over, open my file explorer and update

118
00:07:09,100 --> 00:07:09,730
this to be.

119
00:07:09,970 --> 00:07:12,490
Yes, we're making really good progress.

120
00:07:12,490 --> 00:07:16,150
I can see all of these files are moving in the TypeScript direction right here.

121
00:07:16,150 --> 00:07:19,750
There's only one issue which is we need to provide a dot view extension right here.

122
00:07:20,500 --> 00:07:21,100
There we go.

123
00:07:21,370 --> 00:07:25,600
Save that and let's run our changed files using NPM run, test, colon.

124
00:07:25,600 --> 00:07:26,020
Watch.

125
00:07:27,830 --> 00:07:31,670
And it should detect the changes in text input as well as the corresponding tests.

126
00:07:31,670 --> 00:07:34,190
We rerun them and.

127
00:07:35,460 --> 00:07:35,960
There we go.

128
00:07:35,970 --> 00:07:36,810
Everything is passing.

129
00:07:37,050 --> 00:07:37,440
Awesome.

130
00:07:37,460 --> 00:07:42,240
So one more component moved to TypeScript and now we understand a little bit more about how we can provide

131
00:07:42,240 --> 00:07:43,500
type checking for events.

132
00:07:43,740 --> 00:07:49,170
So for general browser events such as clicks, such as inputs, etc., anything that we react to with

133
00:07:49,170 --> 00:07:54,390
the VR directive in view, you're going to define a method that's going to accept that browser event,

134
00:07:54,540 --> 00:07:59,880
and you can immediately provide it with the type of event which should be available immediately in TypeScript.

135
00:08:00,060 --> 00:08:03,240
And as a reminder, event is just an interface that is globally available.

136
00:08:03,300 --> 00:08:06,150
You can see here interface event, an event which takes place in the DOM.

137
00:08:06,420 --> 00:08:09,090
You don't need to import it from TypeScript or anything like that.

138
00:08:09,100 --> 00:08:12,750
It's going to be available globally in any project that implements TypeScript.

139
00:08:12,990 --> 00:08:17,760
And then furthermore, the target property on that event object can be many different things because

140
00:08:17,760 --> 00:08:23,850
there are many different HTML elements available right paragraphs, allies, devs, etc..

141
00:08:24,030 --> 00:08:28,380
And so TypeScript doesn't know what it is and thus it doesn't know what properties it has.

142
00:08:28,620 --> 00:08:33,330
So what we're communicating here at TypeScript is we know that event target is going to reference whatever

143
00:08:33,570 --> 00:08:36,900
HTML element the event is storing or has reference to.

144
00:08:36,990 --> 00:08:42,330
We know specifically that this is an input element which we know for certain because we've built it

145
00:08:42,330 --> 00:08:43,170
out to be an input.

146
00:08:43,180 --> 00:08:45,060
We know something that TypeScript does not.

147
00:08:45,300 --> 00:08:50,790
So we can tell TypeScript treat it like an h html input element, not just a generic H2 element that

148
00:08:50,790 --> 00:08:51,690
you don't know about.

149
00:08:51,870 --> 00:08:56,880
And thus typed, TypeScript says, okay, I know it is an input element and I know that that has a value

150
00:08:56,880 --> 00:08:57,360
property.

151
00:08:57,450 --> 00:08:58,680
So I'm going to trust that.

152
00:08:58,680 --> 00:09:03,300
Since I know this type that you've told me, I'm going to listen to you and respect your wishes and

153
00:09:03,300 --> 00:09:08,370
can then validate that that HTML input element interface will indeed have a value property.

154
00:09:08,370 --> 00:09:10,020
I know that and I can validate that.

155
00:09:10,680 --> 00:09:11,040
All right.

156
00:09:11,250 --> 00:09:14,490
So with that, we have made a lot of progress, and I will see you in the next lesson.
