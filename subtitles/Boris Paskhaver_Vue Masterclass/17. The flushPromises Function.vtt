WEBVTT
1
00:00:00.270 --> 00:00:00.930
Okay.

2
00:00:00.930 --> 00:00:04.570
So we left off the previous lesson on a bit of a cliffhanger.

3
00:00:04.590 --> 00:00:11.430
We have a failing test where we are expecting an array with a length of 15 and instead the test is finding

4
00:00:11.430 --> 00:00:13.740
an array with an actual length of zero.

5
00:00:14.100 --> 00:00:21.360
So it's almost like Vue or our test suite isn't registering the return value of this Axios get call.

6
00:00:21.600 --> 00:00:23.850
We simulated this API request.

7
00:00:23.850 --> 00:00:28.860
We simulated the response of an array of 15 objects, but it's almost like it's not registering with

8
00:00:28.860 --> 00:00:29.490
the component.

9
00:00:29.640 --> 00:00:35.130
The component is not updating, and if it doesn't have an array to update, obviously it still thinks

10
00:00:35.130 --> 00:00:36.480
it has an array of zero.

11
00:00:36.480 --> 00:00:39.540
And that's coming from the initial value of the jobs data property.

12
00:00:39.720 --> 00:00:44.570
And because it has an empty array, the V4 right here is iterating over an array of zero.

13
00:00:44.580 --> 00:00:48.810
It's not rendering any job listing components with a data test attribute, and that's why we're getting

14
00:00:48.810 --> 00:00:49.590
that mismatch.

15
00:00:49.770 --> 00:00:50.130
All right.

16
00:00:50.400 --> 00:00:51.660
So what is going on here?

17
00:00:51.720 --> 00:00:54.330
Well, to be honest, at this point, I was actually confused.

18
00:00:54.510 --> 00:00:58.260
So I decided to search through the view documentation.

19
00:00:58.540 --> 00:01:01.260
So let me take you exactly to the page that I located.

20
00:01:02.130 --> 00:01:02.910
And it was right here.

21
00:01:02.910 --> 00:01:04.890
I basically search for asynchronous behavior.

22
00:01:04.890 --> 00:01:06.870
You can see Vue test utils in depth.

23
00:01:07.020 --> 00:01:11.370
There was a section that specifically deals with asynchronous behavior and we can read this together.

24
00:01:11.700 --> 00:01:17.100
You'll notice you may recall we used a function earlier on in the course called Next HIC and that was

25
00:01:17.100 --> 00:01:22.710
designed to update the view component to proceed at one tick forward.

26
00:01:22.860 --> 00:01:28.320
I think we used this in our headline component whenever we needed to simulate the passage of time from

27
00:01:28.500 --> 00:01:32.820
the set interval function running one cycle so we could see the change in our headline.

28
00:01:33.150 --> 00:01:34.500
Well, it's a very similar idea.

29
00:01:34.680 --> 00:01:41.670
It's almost like our view component is not proceeding forward to the moment where our fake request is

30
00:01:41.670 --> 00:01:47.220
resolving that promise and giving that array of 15 items back to the component to work with.

31
00:01:47.250 --> 00:01:48.660
So let's read this together.

32
00:01:48.930 --> 00:01:54.420
Next tick is useful to ensure some change in reactive data is reflected in the DOM before continuing

33
00:01:54.420 --> 00:01:54.960
the test.

34
00:01:54.960 --> 00:01:56.040
And that's promising.

35
00:01:56.040 --> 00:01:57.900
That may sound like something we're interested in.

36
00:01:58.260 --> 00:02:03.690
However, sometimes you may want to ensure other non view related asynchronous behavior is completed

37
00:02:03.690 --> 00:02:04.020
too.

38
00:02:04.320 --> 00:02:10.020
So our request to an API is technically outside of the scope of the view component.

39
00:02:10.200 --> 00:02:16.560
The view component takes that response and then overwrites its internal data which renders it.

40
00:02:16.680 --> 00:02:20.910
And if our components data was out of date, that might be the problem.

41
00:02:20.920 --> 00:02:24.690
If we wanted to re render it, that might be a situation where we would use next take.

42
00:02:24.930 --> 00:02:26.070
But this is something different.

43
00:02:26.080 --> 00:02:31.710
This is the view test utils not understanding that we have this promise floating around that is not

44
00:02:31.710 --> 00:02:32.250
resolving.

45
00:02:32.250 --> 00:02:36.360
So right here it says a common example is a function that returns a promise.

46
00:02:36.570 --> 00:02:40.350
Perhaps you mocked your axios htp client using just mock.

47
00:02:40.680 --> 00:02:46.530
So the syntax that you see here is actually exactly the same as we have in our test suite.

48
00:02:46.530 --> 00:02:48.480
It's just a little bit more of a different syntax.

49
00:02:48.780 --> 00:02:52.170
So right here you'll notice they're mocking out the Axios library, as we did.

50
00:02:52.410 --> 00:02:58.260
And this secondary argument is just an alternate way to do what we did with that Axios dot, get that

51
00:02:58.260 --> 00:02:59.910
mock resolved value method.

52
00:03:00.090 --> 00:03:01.260
They're doing the same thing.

53
00:03:01.410 --> 00:03:08.400
They're saying when we call Axios dot, get beat B, make that a function that returns a promise that

54
00:03:08.400 --> 00:03:11.280
resolves to an object with a data property.

55
00:03:11.370 --> 00:03:14.940
We're doing the exact same thing when we use mock resolved value.

56
00:03:14.970 --> 00:03:18.300
That is just syntactic sugar for what this is doing right here.

57
00:03:18.750 --> 00:03:22.680
So as it says in this case, Vue has no knowledge of the unresolved promise.

58
00:03:22.680 --> 00:03:24.900
It has no clue that this thing is going on separately.

59
00:03:25.170 --> 00:03:27.360
So calling next tech will not work.

60
00:03:28.080 --> 00:03:31.110
Your assertion may run before the promise resolves.

61
00:03:31.290 --> 00:03:36.930
So in other words, the component is operating and it's it's going through your test, it's running

62
00:03:36.930 --> 00:03:37.530
that assertion.

63
00:03:37.740 --> 00:03:42.750
But this fake asynchronous thing that we have set up to run has not resolved yet.

64
00:03:42.780 --> 00:03:45.210
Now, granted, it's not a real asynchronous thing.

65
00:03:45.210 --> 00:03:46.440
We're just faking it out.

66
00:03:46.650 --> 00:03:51.660
But things run so instantaneously in this test suite that basically the test finishes up before the

67
00:03:51.660 --> 00:03:52.470
promise resolves.

68
00:03:52.650 --> 00:03:59.430
And when if the promise hasn't resolved yet, the test still sees a data array of zero elements and

69
00:03:59.430 --> 00:04:00.390
that's the test sales.

70
00:04:00.750 --> 00:04:08.580
So for scenarios like this view test utils exposes flush promises which causes all outstanding promises

71
00:04:08.580 --> 00:04:09.930
to resolve immediately.

72
00:04:10.200 --> 00:04:11.130
So that's what we want.

73
00:04:11.130 --> 00:04:12.080
We want to tell our test.

74
00:04:12.090 --> 00:04:17.730
We complete all the promises, or in other words, pretend as if all of those asynchronous operations

75
00:04:17.730 --> 00:04:18.720
have completed.

76
00:04:18.900 --> 00:04:24.210
Even those that aren't specifically related to updates to the component and its reactivity in its template.

77
00:04:24.420 --> 00:04:29.190
If there's any kind of asynchronous operation that's running in the background, even a fake one like

78
00:04:29.190 --> 00:04:31.680
we have, go ahead and finish it up.

79
00:04:32.160 --> 00:04:37.590
That's what the flush promises function does, causes all outstanding promises to resolve immediately.

80
00:04:37.710 --> 00:04:40.980
Outstanding in this scenario means still running, still working.

81
00:04:41.220 --> 00:04:44.730
It causes all still working promises to resolve immediately.

82
00:04:45.060 --> 00:04:51.120
So you can see right here they invoke the flush promises function which they import directly from view

83
00:04:51.150 --> 00:04:57.240
test utils and then when they do this await it simulates as if the Axios promise is resolved immediately.

84
00:04:57.240 --> 00:04:59.700
It basically says that asynchronous operation is.

85
00:04:59.870 --> 00:05:00.290
Done.

86
00:05:00.740 --> 00:05:03.380
Let's try this approach in our test suite right here.

87
00:05:04.250 --> 00:05:07.100
I'm going to import that flush promises function.

88
00:05:07.100 --> 00:05:08.890
And I know this is confusing, by the way.

89
00:05:09.110 --> 00:05:11.750
It still confuses me many times from time to time.

90
00:05:12.020 --> 00:05:16.970
But the basic idea is we have something right here that's going to resolve all of our promises, and

91
00:05:17.390 --> 00:05:22.670
we shoot off that promise after we shall amount our component, because it's going to run in this mountain

92
00:05:22.670 --> 00:05:23.330
hook right here.

93
00:05:23.660 --> 00:05:24.830
So I need to await.

94
00:05:26.260 --> 00:05:30.400
The Flush promises invocation, which is going to resolve all those promises.

95
00:05:30.580 --> 00:05:36.190
And if I'm using that await syntax right here, I have to make my just function right here asynchronous

96
00:05:36.430 --> 00:05:39.870
because this will take some amount of time and also force blocking.

97
00:05:40.030 --> 00:05:45.530
So in other words, I want the test to block right here, finish up all the promises, finish up all

98
00:05:45.530 --> 00:05:50.770
of the async behavior, and then once all that's done, then the components should be updated.

99
00:05:50.860 --> 00:05:55.780
And then I can actually ask my test to find that data test attribute array.

100
00:05:55.870 --> 00:06:00.940
And at that point, now that we resolve their promises, now that the component has updated, we should

101
00:06:00.940 --> 00:06:05.560
have 15 job listings because we should have a jobs array of 15 elements.

102
00:06:05.950 --> 00:06:07.090
So if I save this.

103
00:06:08.700 --> 00:06:11.250
We now have everything passing with no warnings.

104
00:06:11.370 --> 00:06:11.700
All right.

105
00:06:11.970 --> 00:06:18.420
So the takeaway from this lesson is whenever you have some kind of mock or even really any kind of asynchronous

106
00:06:18.420 --> 00:06:24.090
operation in your code, and you notice that it is not directly related to the components, asynchronous

107
00:06:24.090 --> 00:06:28.740
things like rendering the time, but maybe something totally separate, such as making an API requester,

108
00:06:28.740 --> 00:06:33.150
such as making a database call when it's outside the scope of a component directly.

109
00:06:33.150 --> 00:06:35.400
But it's doing some kind of action that takes some time.

110
00:06:35.640 --> 00:06:41.190
If you're noticing in your tests that things do not appear to be working out, it could be that the

111
00:06:41.190 --> 00:06:44.310
tests don't realize that that operation is not yet completed.

112
00:06:44.520 --> 00:06:49.650
And in that scenario, you can invoke the flush promise function to flush your promises.

113
00:06:49.650 --> 00:06:50.040
Flush.

114
00:06:50.280 --> 00:06:52.620
Unfortunately, the best analogy I can think of is a bathroom.

115
00:06:52.800 --> 00:06:54.390
Flush them out means throw them out.

116
00:06:54.390 --> 00:06:55.140
Finish them up.

117
00:06:55.170 --> 00:06:55.500
Right.

118
00:06:56.010 --> 00:07:00.120
That's what it's going to do to all the promises that are still pending, that are waiting to be resolved

119
00:07:00.120 --> 00:07:02.190
in our test, that's going to flush them out.

120
00:07:02.190 --> 00:07:03.240
It's going to finish them up.

121
00:07:03.510 --> 00:07:08.310
So only when that completes can we then assert that the component has everything that we need.

122
00:07:08.550 --> 00:07:08.850
All right.

123
00:07:09.090 --> 00:07:13.770
So with that, we have tested the two responsibilities of job listings that it makes the right request

124
00:07:13.950 --> 00:07:17.460
and that it renders a job listing for everything and gets from that request.

125
00:07:17.760 --> 00:07:20.700
So with that, I think we are good to wrap up this section.
