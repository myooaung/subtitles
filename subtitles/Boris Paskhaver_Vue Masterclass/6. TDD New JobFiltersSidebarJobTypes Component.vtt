WEBVTT
1
00:00:00.670 --> 00:00:01.630
Okay.

2
00:00:01.640 --> 00:00:05.180
So I am feeling pretty good about the view side of things.

3
00:00:05.420 --> 00:00:11.270
So now we can move on to building the component that's going to display all of the unique job types

4
00:00:11.450 --> 00:00:16.190
and communicate to view X whenever the user selects one of those checkboxes.

5
00:00:16.550 --> 00:00:21.830
So as you might guess, that component that we're about to build is going to be really similar to our

6
00:00:21.830 --> 00:00:25.100
job filters, sidebar organizations component.

7
00:00:25.460 --> 00:00:26.670
So I've opened this one up.

8
00:00:26.690 --> 00:00:31.610
On the left, we built this out in the very last section, and on the right hand side, I've opened

9
00:00:31.610 --> 00:00:33.350
up the corresponding test file.

10
00:00:33.710 --> 00:00:38.240
So just as a reminder of what this component looks like, we start with the accordion, which is the

11
00:00:38.240 --> 00:00:42.290
component that allows us to have that expandability the collapse ability as well.

12
00:00:42.620 --> 00:00:47.630
And so we're going to need to modify something like the text here for the header to be job types instead

13
00:00:47.630 --> 00:00:48.350
of organizations.

14
00:00:48.650 --> 00:00:51.890
But otherwise, a lot of the logic is going to be mostly the same.

15
00:00:52.070 --> 00:00:54.800
We're still going to iterate over something to make a list item.

16
00:00:55.070 --> 00:01:00.740
Except instead of iterating over the unique organizations, we want to iterate over the unique job types.

17
00:01:01.010 --> 00:01:05.480
We want to render an input for each unique job type and a label for it as well.

18
00:01:05.870 --> 00:01:10.100
So we can basically reuse just about all of the logic in this component.

19
00:01:10.490 --> 00:01:14.930
Even down to here, we can see we're using map getters and map mutations in this component.

20
00:01:14.930 --> 00:01:18.590
We are, of course, using map getters to get the unique organizations getter.

21
00:01:18.770 --> 00:01:23.600
But in a brand new component, we can use map getters to get our unique job types getter, which we

22
00:01:23.600 --> 00:01:25.130
defined in the last couple lessons.

23
00:01:25.460 --> 00:01:30.560
Similarly, in this select organization method, that method is running the mutation of ADD.

24
00:01:30.560 --> 00:01:35.120
Selected organizations in our brand new component will have a similar method that's going to commit

25
00:01:35.120 --> 00:01:37.730
the mutation called ADD selected job types.

26
00:01:37.970 --> 00:01:44.330
So we've built our view stored to be very similar for our new job types feature as we did for our organizations

27
00:01:44.330 --> 00:01:45.500
feature in the previous section.

28
00:01:45.740 --> 00:01:52.040
So I see no reason to not copy what we already have granted whenever we're copying things, that's a

29
00:01:52.040 --> 00:01:53.600
sign that we are duplicating code.

30
00:01:53.810 --> 00:01:58.460
But as I always say, you should have the duplication present before you attempt a refactor.

31
00:01:58.730 --> 00:02:02.430
So for now, I'm just going to create copies of my implementation and of my test.

32
00:02:02.870 --> 00:02:04.610
Then we're going to build it into reality.

33
00:02:04.610 --> 00:02:09.410
And maybe later in the course we'll talk about if there's a way to consolidate these, to duplicate

34
00:02:09.410 --> 00:02:13.280
or at least very similar components so that they become one component.

35
00:02:13.490 --> 00:02:18.110
For now, we're just going to stick with copying and duplication because having duplication in two components

36
00:02:18.320 --> 00:02:19.700
isn't the worst thing in the world.

37
00:02:20.120 --> 00:02:23.780
So let's begin with our test suite because I want to follow a TDD approach.

38
00:02:24.200 --> 00:02:29.780
So I'm going to close my component and here is my job filter side of our organizations test file.

39
00:02:30.200 --> 00:02:35.000
So I'm going to open up my explorer and in the exact same folder, I'm going to create a new test file

40
00:02:35.330 --> 00:02:42.710
called Job Filters Sidebar Job Types dot test that test.

41
00:02:43.550 --> 00:02:48.020
I'm going to follow a very similar naming scheme for this component where I'm going to prefix it with

42
00:02:48.020 --> 00:02:52.910
job filter sidebar, which is kind of the common parent category of feature.

43
00:02:53.090 --> 00:02:56.030
And then I'm going to actually name the components specifically job types.

44
00:02:56.210 --> 00:02:57.860
And this is the test file for that.

45
00:02:57.860 --> 00:03:00.790
So it's the full component name followed by test that.

46
00:03:00.800 --> 00:03:01.150
Yes.

47
00:03:01.850 --> 00:03:02.210
All right.

48
00:03:02.210 --> 00:03:09.260
So what I'm going to do is go to my original sidebar organization's test file and copy and paste all

49
00:03:09.260 --> 00:03:10.820
of this code in the other file.

50
00:03:10.820 --> 00:03:12.770
And we're going to modify it, of course, in just a second.

51
00:03:13.310 --> 00:03:17.870
So I'm going to paste that code in here, close my sidebar, and we can basically walk through all of

52
00:03:17.870 --> 00:03:21.860
this code and change every occurrence of organizations to be job types.

53
00:03:22.100 --> 00:03:27.530
So this will again be tests for a component that does not yet exist, but most of the components responsibility

54
00:03:27.530 --> 00:03:29.030
will be similar to our previous one.

55
00:03:29.180 --> 00:03:30.380
So I don't have a problem with that.

56
00:03:30.740 --> 00:03:34.700
So the first step, our import, instead of importing organizations at the end here, I want it to be

57
00:03:34.700 --> 00:03:41.240
the job filter, sidebar, job types component right here it's going to be job filter, sidebar, job

58
00:03:41.240 --> 00:03:41.990
types component.

59
00:03:42.930 --> 00:03:47.660
When I'm going to do immediately is just cut or either copy and paste this component name and replace

60
00:03:47.660 --> 00:03:48.650
it anywhere it occurs.

61
00:03:48.950 --> 00:03:52.010
So first up in this top level, describe I'm going to replace that.

62
00:03:52.370 --> 00:03:55.820
And as I scroll down, this test file only has two tests.

63
00:03:56.060 --> 00:04:01.190
So whenever we're using Mount, I want to replace our former usage of the organization's component with

64
00:04:01.190 --> 00:04:06.020
our new job types component like so right here and right here.

65
00:04:06.410 --> 00:04:07.940
All right, so we've replaced all the mounting.

66
00:04:07.940 --> 00:04:10.550
Now we just need to replace some of the specific details.

67
00:04:11.060 --> 00:04:14.980
So right here, if I take a look at it from top to bottom, create config looks good.

68
00:04:14.990 --> 00:04:18.530
This is our factory function that creates the configuration for our mount function.

69
00:04:18.770 --> 00:04:20.180
We're going to mark out the store.

70
00:04:20.360 --> 00:04:24.620
We're going to mark out font awesome or stub it out, which we need to do because we're eventually going

71
00:04:24.620 --> 00:04:28.550
to have the accordion component and then the accordion component, which we're going to fully mount.

72
00:04:28.560 --> 00:04:31.310
We are going to have that font awesome carrot pointing up and down.

73
00:04:31.550 --> 00:04:32.510
So this is perfect.

74
00:04:32.510 --> 00:04:37.730
We can keep this right here, obviously, instead of rendering a unique list of organizations for filtering

75
00:04:37.730 --> 00:04:40.670
jobs, this is a unique list of job types.

76
00:04:41.980 --> 00:04:42.400
All right.

77
00:04:42.700 --> 00:04:45.940
Then down below we can see the component is relying on a storm with getters.

78
00:04:46.180 --> 00:04:52.270
This component previously or the one that we're mimicking was relying on the getter called unique organizations.

79
00:04:52.300 --> 00:04:54.100
We no longer care about that getter.

80
00:04:54.220 --> 00:04:57.190
We're going to implement our new getter in the component we're about to build.

81
00:04:57.400 --> 00:05:01.600
So of course, we're going to rely on the getter that we set up in the couple lessons just behind us,

82
00:05:01.780 --> 00:05:06.730
which is called unique job types, just to make it a little bit more real world, let's make this full

83
00:05:06.730 --> 00:05:08.980
time and part time.

84
00:05:10.950 --> 00:05:11.340
All right.

85
00:05:11.340 --> 00:05:14.940
So then we're going to mount our job filter side of our job types component.

86
00:05:14.940 --> 00:05:20.730
We're going to use the create config factory to generate the config pass in the store.

87
00:05:20.910 --> 00:05:25.050
We're going to find the clickable area and click it, which is going to expand the accordion that is

88
00:05:25.050 --> 00:05:26.790
going to house the actual check boxes.

89
00:05:27.060 --> 00:05:27.930
That is still good.

90
00:05:28.200 --> 00:05:31.800
And then here, obviously, instead of looking for organizational labels, we're going to be looking

91
00:05:31.800 --> 00:05:34.140
for job types, label job type labels.

92
00:05:34.140 --> 00:05:38.160
So right here, let's change this constant name to be job type labels.

93
00:05:39.000 --> 00:05:42.990
And right here, I'm just going to replace on the line below as well because we're going to map over

94
00:05:42.990 --> 00:05:44.490
all of those labels and get their text.

95
00:05:44.880 --> 00:05:49.170
And obviously our data just add to it probably is not going to be organization at all.

96
00:05:49.200 --> 00:05:51.780
Right now let's changes to something like job type.

97
00:05:53.070 --> 00:05:57.870
And so after we find all of those labels and we iterate over them and get the text, we're going to

98
00:05:57.870 --> 00:06:03.990
get an array of job types right here and we're going to expect that array of job types to have the exact

99
00:06:03.990 --> 00:06:06.270
same string values as we saw in our getter.

100
00:06:06.480 --> 00:06:10.590
We're basically testing here that we are rendering the exact same number of checkboxes as we have any

101
00:06:10.600 --> 00:06:13.110
job types and they have the exact text that we expect.

102
00:06:13.110 --> 00:06:15.570
So full time and part time.

103
00:06:15.840 --> 00:06:20.340
So it is imperative that we provide the correct view store set up here, even if it is marked out,

104
00:06:20.520 --> 00:06:25.470
because this is directly going to affect the checkboxes that we render and that text that they display.

105
00:06:25.950 --> 00:06:27.360
So I'm going to save this and move on.

106
00:06:27.360 --> 00:06:30.900
Obviously this will fail because we no longer have this component, but that's fine.

107
00:06:30.930 --> 00:06:31.830
We're using TDD.

108
00:06:32.250 --> 00:06:33.780
Let's move on to the second test.

109
00:06:34.710 --> 00:06:38.580
This one is communicates that user has selected checkbox for organization.

110
00:06:38.760 --> 00:06:41.100
Now it's not organization, it's going to be job type.

111
00:06:42.670 --> 00:06:47.020
And very similarly here, we're going to mark out a just function and we want to test the interaction

112
00:06:47.020 --> 00:06:51.850
with this commit method, which is going to tell you X to run a mutation at some point when the user

113
00:06:51.850 --> 00:06:53.170
clicks on one of those checkboxes.

114
00:06:53.470 --> 00:06:56.500
So once again, I need to replace this former getter with our new getter.

115
00:06:56.620 --> 00:06:59.620
I'm just going to move up above and copy the exact when we have here.

116
00:07:00.190 --> 00:07:02.950
So it's going to copy this entire getter section and paste it down below.

117
00:07:03.640 --> 00:07:05.520
Make sure that you keep the commit here.

118
00:07:05.530 --> 00:07:10.540
However, because we need that reference to our just function we're going to test later that commit

119
00:07:10.540 --> 00:07:12.190
will have been invoked with the right arguments.

120
00:07:12.640 --> 00:07:15.990
So right here we're going to mount job for the sidebar job types looks good.

121
00:07:16.000 --> 00:07:17.620
We're going to click on it to expand it.

122
00:07:17.950 --> 00:07:22.210
And then right here, what we're doing previously in the organization's test is we were looking for

123
00:07:22.210 --> 00:07:23.920
one of our two checkboxes.

124
00:07:24.160 --> 00:07:27.820
We want to do the exact same thing here, but obviously it's no longer the Google input.

125
00:07:27.970 --> 00:07:31.240
It's going to be either the full time checkbox or the part time checkbox.

126
00:07:31.600 --> 00:07:36.710
So let's say I'm going to look for a checkbox with the full time data test attribute.

127
00:07:37.440 --> 00:07:42.220
I'm going to replace Google Input here with something like full time input.

128
00:07:44.120 --> 00:07:49.580
And of course I need to use the set checked method below to make sure I actually tell just to check

129
00:07:49.580 --> 00:07:53.150
it or more specifically the view test utils to check it.

130
00:07:53.420 --> 00:07:58.820
That's going to check the checkbox which in a perfect world in our event component will trigger a method

131
00:07:58.820 --> 00:08:05.150
to run which will commit a mutation to the view store that's going to send it the user's selected job

132
00:08:05.150 --> 00:08:05.540
types.

133
00:08:05.930 --> 00:08:10.760
So right here I expect my commit method to have been called with not this mutation, not add selected

134
00:08:10.760 --> 00:08:15.290
organizations, but the one that we just defined, which is called ADD selected job types.

135
00:08:15.680 --> 00:08:20.030
And of course, the second argument that we're going to expect to the mutation is not just the name

136
00:08:20.240 --> 00:08:25.640
but the actual array of strings representing the current user selections of the job types.

137
00:08:25.850 --> 00:08:32.390
So if the user clicked on the full time checkbox, we expect the array to have the value of full time.

138
00:08:33.080 --> 00:08:35.090
The exact same string that we provide in the getter.

139
00:08:35.300 --> 00:08:37.730
The exact same string is what we're going to pass right here.

140
00:08:38.420 --> 00:08:41.210
Okay, so total failure, but that's exactly what we expect.

141
00:08:41.450 --> 00:08:46.210
So I'm going to drag this file over to the right hand side and then to make this implementation happen,

142
00:08:46.220 --> 00:08:47.450
you guessed it, you guessed it.

143
00:08:47.450 --> 00:08:51.950
We're just going to copy our existing component and basically modify it accordingly.

144
00:08:52.250 --> 00:08:57.590
So let me open up my job filter, sidebar, organization's component right here in the exact same folder

145
00:08:57.590 --> 00:08:58.160
right here.

146
00:08:58.160 --> 00:09:00.050
This job filter sidebar folder.

147
00:09:00.260 --> 00:09:07.010
I want to create my new component, which is going to be job filters, sidebar, job types, dot view.

148
00:09:08.780 --> 00:09:12.260
And of course, what I can do is copy all of the code I have in my job.

149
00:09:12.270 --> 00:09:14.060
They'll just sidebar organization's file.

150
00:09:15.080 --> 00:09:19.190
So command a command C to copy paste it right here.

151
00:09:20.370 --> 00:09:21.450
All right, let me save that.

152
00:09:21.840 --> 00:09:28.770
And now all we have to do is walk through this implementation and then actually modify it to be reflected

153
00:09:28.770 --> 00:09:31.050
for job types instead of organizations.

154
00:09:31.320 --> 00:09:34.140
So this time around, let's start with the actual JavaScript section.

155
00:09:34.140 --> 00:09:36.720
Then we'll move back on up to the HTML template.

156
00:09:37.080 --> 00:09:41.100
So once again, we no longer want these two constants because this is for organizations.

157
00:09:41.280 --> 00:09:44.820
Instead, what we want is are two new constants.

158
00:09:45.090 --> 00:09:48.600
So instead of add selected organizations, we want ADD selected job types.

159
00:09:49.440 --> 00:09:53.850
And instead of unique organizations, we want unique job types that allows us to remove the former two

160
00:09:53.850 --> 00:09:54.540
constants here.

161
00:09:55.050 --> 00:09:56.760
We still want these two helper functions.

162
00:09:56.760 --> 00:10:01.410
We still want our accordion because our accordion is going to enable the collapse ability for jobs,

163
00:10:01.410 --> 00:10:02.790
which are sidebar organizations.

164
00:10:02.790 --> 00:10:07.140
We want to replace this name to be job types for our component section.

165
00:10:07.140 --> 00:10:08.460
We want to keep that accordion.

166
00:10:08.460 --> 00:10:11.520
That's part of registering the accordion component as a local component.

167
00:10:11.520 --> 00:10:13.740
That's just fine for the data section.

168
00:10:13.740 --> 00:10:15.780
We obviously don't want selected organizations.

169
00:10:15.780 --> 00:10:18.000
We now want selected job types.

170
00:10:19.520 --> 00:10:20.360
Format getters.

171
00:10:20.360 --> 00:10:24.830
We no longer care about getting access to the unique organizations getter we want the one we just imported,

172
00:10:24.830 --> 00:10:26.000
which is unique job types.

173
00:10:26.980 --> 00:10:32.290
For here in the methods section, we do want to map mutations, so we get access to mutations as methods

174
00:10:32.290 --> 00:10:32.980
on this component.

175
00:10:33.220 --> 00:10:36.460
But we don't want the ADD selected organizations mutation.

176
00:10:36.460 --> 00:10:39.130
We want the ADD selected job types mutation.

177
00:10:39.310 --> 00:10:40.810
This is the one that we just built out.

178
00:10:41.230 --> 00:10:45.310
So here in the method below, obviously it's no longer going to be select organization.

179
00:10:45.310 --> 00:10:51.130
It's now going to be something like select job type that is going to invoke the mutation that we are

180
00:10:51.130 --> 00:10:52.300
going to enable right here.

181
00:10:52.540 --> 00:10:57.190
So instead of add selected organizations, I want to invoke ADD selected job types.

182
00:10:57.190 --> 00:11:00.910
That is going to be the method right here that is going to run the corresponding mutation.

183
00:11:01.150 --> 00:11:02.860
And what do we want to pass the mutation?

184
00:11:02.860 --> 00:11:08.110
The local array of data represented by this got selected job types.

185
00:11:08.470 --> 00:11:13.420
So this is basically the exact same implementation we did in the previous section, but modified for

186
00:11:13.420 --> 00:11:15.310
job types instead of organizations.

187
00:11:15.490 --> 00:11:20.200
That's why I'm kind of flying through this content because it's basically a repetition or a variation.

188
00:11:20.200 --> 00:11:22.660
There's not much new content happening here.

189
00:11:23.020 --> 00:11:27.940
All right, so we still have to handle our actual template up above.

190
00:11:27.940 --> 00:11:28.930
So let's scroll up there.

191
00:11:29.890 --> 00:11:30.190
All right.

192
00:11:30.430 --> 00:11:33.730
We're going to start with our accordion and the header prop that we passed to it.

193
00:11:33.730 --> 00:11:39.010
This is the actual piece of text that appears next to the carrot that the user clicks to expand the

194
00:11:39.010 --> 00:11:39.400
box.

195
00:11:39.730 --> 00:11:44.710
So obviously, instead of a header of organizations, we want a header of job types.

196
00:11:46.510 --> 00:11:47.050
Right here.

197
00:11:47.050 --> 00:11:50.230
We can keep the div the field set, we can reuse the unordered list.

198
00:11:50.230 --> 00:11:52.450
All of these tailwind styles are great here.

199
00:11:52.450 --> 00:11:56.320
Obviously for our list item, we no longer want to iterate over each organization.

200
00:11:56.320 --> 00:11:58.720
We want to iterate over each job type.

201
00:11:59.230 --> 00:12:05.200
And now the available piece of computed property that we defined down below is no longer unique organizations.

202
00:12:05.440 --> 00:12:06.580
It's unique job types.

203
00:12:06.580 --> 00:12:10.960
We got that from our getter, which is going to provide a set which we can easily iterate over.

204
00:12:11.410 --> 00:12:15.370
So of course we need to provide a key for everything we're iterating over so we can once again provide

205
00:12:15.370 --> 00:12:18.340
the job type string dynamically using the vine syntax.

206
00:12:18.640 --> 00:12:20.110
And that should work here.

207
00:12:20.140 --> 00:12:24.010
What we're basically going to do is every place that we, your organization, we can replace this with

208
00:12:24.010 --> 00:12:26.290
job type because the same logic is going to apply.

209
00:12:26.290 --> 00:12:31.600
We want whatever job type we're iterating over, such as full time to be the ID to be the value we provide

210
00:12:31.600 --> 00:12:34.240
to our array, to save, to be the data test attribute.

211
00:12:34.240 --> 00:12:36.730
And I think those are the three occurrences.

212
00:12:36.730 --> 00:12:38.920
So any select organization here.

213
00:12:40.330 --> 00:12:42.520
And it's changed that to job type.

214
00:12:43.420 --> 00:12:47.450
Let me select it right here and change this to job type as well.

215
00:12:47.680 --> 00:12:51.490
Let me select this for the data test attribute and change this to be job type as well.

216
00:12:51.880 --> 00:12:56.550
Here are the model reflects the part of the component data that we want to connect to.

217
00:12:56.710 --> 00:12:59.890
It's now not selected organizations but selected job types.

218
00:13:00.220 --> 00:13:04.420
So let's change this to be selected job types.

219
00:13:05.290 --> 00:13:07.180
We're still going to keep the type of checkbox.

220
00:13:07.180 --> 00:13:10.480
We're still going to apply the tail when class we want this data test attribute.

221
00:13:10.660 --> 00:13:15.460
And then finally, right here, we're using the VEAN directive to react to the change event, which

222
00:13:15.460 --> 00:13:19.780
is basically the user clicking on the checkbox instead of running select organization.

223
00:13:19.780 --> 00:13:22.330
We obviously want to run select job type.

224
00:13:22.870 --> 00:13:27.790
Finally, right here in the label, we want to provide job type for our for attributes.

225
00:13:27.790 --> 00:13:31.330
So whatever string we're iterating over, we're going to have the four attribute have that value.

226
00:13:31.510 --> 00:13:37.030
A generally good idea for accessibility is to have the four acts would be the exact same string as the

227
00:13:37.030 --> 00:13:38.500
idea attribute for the input.

228
00:13:38.500 --> 00:13:41.440
That's why we kept those the same for our data test here.

229
00:13:41.440 --> 00:13:43.420
Our organization is going to be job type.

230
00:13:43.720 --> 00:13:51.340
Remember that this is not the specific data test for specific jobs, which is full time or part time.

231
00:13:51.340 --> 00:13:52.840
We're doing that right here.

232
00:13:53.060 --> 00:13:54.790
Here's what we're dynamically putting in.

233
00:13:54.790 --> 00:13:56.170
Whatever job time we're editing over.

234
00:13:56.320 --> 00:14:02.080
This is a more generic data test name of job dash type, which you are capturing right here in our test

235
00:14:02.080 --> 00:14:03.580
on line 26 on the right.

236
00:14:03.880 --> 00:14:07.900
And finally, instead of interpolating the value of organization, we obviously want to interpolate

237
00:14:08.050 --> 00:14:12.040
whatever string we're iterating over which is represented by job type.

238
00:14:12.400 --> 00:14:16.570
We're iterating over a set of strings and for each job type string, we're using it in a whole bunch

239
00:14:16.570 --> 00:14:20.650
of locations, including this interpolation and all of these values and going save that.

240
00:14:20.650 --> 00:14:22.960
And you can see all of our tests are passing.

241
00:14:23.320 --> 00:14:28.030
So simply by copying and pasting and modifying our old implementation, we've made a lot of progress.

242
00:14:28.030 --> 00:14:36.400
We now should have an expandable collection of checkboxes that are going to be rendered for the number

243
00:14:36.400 --> 00:14:41.950
of unique job types we have, which we're going to get dynamically from our array of jobs using our

244
00:14:41.950 --> 00:14:43.180
getters in view X.

245
00:14:43.360 --> 00:14:48.160
So we've kind of come full circle because once again we're repeating the same ideas we did in the previous

246
00:14:48.160 --> 00:14:50.260
section, but we're now doing them in reverse.

247
00:14:50.260 --> 00:14:51.940
We started on the view side of things.

248
00:14:51.940 --> 00:14:53.020
We wired up everything.

249
00:14:53.200 --> 00:14:58.660
Now we're back to the component and we have basically created this component to do that for us to talk

250
00:14:58.660 --> 00:15:04.210
to the View Store, to get data from the VC store, etc. So now we can go ahead and add this new job

251
00:15:04.210 --> 00:15:08.710
filter, sidebar job types component to another component so we can actually render it and we can take

252
00:15:08.710 --> 00:15:11.230
a look at how it looks in the browser in the very next lesson.
