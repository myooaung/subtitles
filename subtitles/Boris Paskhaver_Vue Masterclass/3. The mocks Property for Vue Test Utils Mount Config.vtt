WEBVTT
1
00:00:00.540 --> 00:00:07.230
All right, so in this lesson, I'd like to fix a bug that we intentionally added to our app a really

2
00:00:07.230 --> 00:00:08.220
long time ago.

3
00:00:08.550 --> 00:00:15.750
So here I am on the job results page, and if I display the sub now by signing in, you may recall we

4
00:00:15.750 --> 00:00:20.500
have the section where we display the number of jobs matched and that is totally fine.

5
00:00:20.520 --> 00:00:23.910
This is how things should work on our job results page.

6
00:00:24.120 --> 00:00:27.570
Even though this number is hardcoded will make it dynamic later on.

7
00:00:27.930 --> 00:00:31.860
The issue is what happens when we navigate to our home page?

8
00:00:32.100 --> 00:00:34.180
When we navigate to our home page.

9
00:00:34.200 --> 00:00:35.220
Our root root.

10
00:00:35.430 --> 00:00:41.910
We still have this information present and it should only appear on the jobs page.

11
00:00:42.240 --> 00:00:47.790
So this is a piece of information that is dependent on the route that we are on.

12
00:00:48.000 --> 00:00:48.300
Right.

13
00:00:48.330 --> 00:00:53.940
We talked earlier about how we can use information from the root to determine which part of the view

14
00:00:53.940 --> 00:00:54.420
renders.

15
00:00:54.570 --> 00:00:55.900
This is a perfect example.

16
00:00:55.920 --> 00:00:59.580
We should only render this when we are on this root.

17
00:01:00.330 --> 00:01:02.760
So what I'd like to do is fix this issue.

18
00:01:03.030 --> 00:01:07.620
And in addition to that, I'd like to follow a TDD approach, test driven development.

19
00:01:07.890 --> 00:01:11.940
So we're going to try to write our tests first and then come up with the solution.

20
00:01:12.240 --> 00:01:15.840
So let's do a quick review of what our code currently looks like.

21
00:01:16.110 --> 00:01:22.230
So I'm going to open up my sub nav component and I'm also going to open up my sub nav test file sub

22
00:01:22.230 --> 00:01:23.040
navigate test.

23
00:01:23.220 --> 00:01:23.580
Yes.

24
00:01:23.850 --> 00:01:25.680
And let me drag it here to the right hand side.

25
00:01:26.610 --> 00:01:32.730
So here, the way we currently built this out is we have a piece of data that we called on job results

26
00:01:32.730 --> 00:01:37.260
page and we just needed something to be the placeholder for our eventual implementation.

27
00:01:37.530 --> 00:01:41.550
And we're using that Boolean value here for this VFR directive.

28
00:01:41.670 --> 00:01:46.950
And it says if we're on the job results page, then we should render that font awesome icon, the magnifying

29
00:01:46.950 --> 00:01:48.750
glass and the number of jobs matched.

30
00:01:49.050 --> 00:01:53.940
The problem, of course, is that our data is always starting off as true, so there's no way to invert

31
00:01:53.940 --> 00:01:54.840
it or disable it.

32
00:01:55.140 --> 00:02:02.850
And that's why our jobs is appearing on every single root in our app, and we wrote our tests based

33
00:02:02.850 --> 00:02:03.900
on this implementation.

34
00:02:03.900 --> 00:02:06.000
So we have two tests in our in our test file.

35
00:02:06.240 --> 00:02:12.060
It displays the job count when the user is on the job page and when the user is not on the job page,

36
00:02:12.060 --> 00:02:13.530
it does not display the job count.

37
00:02:13.740 --> 00:02:19.800
And the way we were able to do two tests is by configuring the data in our component mount.

38
00:02:19.800 --> 00:02:24.540
And we've talked about this idea before that this is not really an ideal strategy because it knows a

39
00:02:24.540 --> 00:02:26.700
lot about the details of the implementation.

40
00:02:27.000 --> 00:02:30.730
So I think that the the structure of these two tests is still good.

41
00:02:30.750 --> 00:02:33.030
These are the two conditions that we want to test for.

42
00:02:33.630 --> 00:02:36.540
And the basic logic of our VRF is still good.

43
00:02:36.780 --> 00:02:41.310
But of course we need this idea of being on the job results page or not.

44
00:02:41.520 --> 00:02:47.190
Not to come from our data, but to come from a computed property that is going to look at our route.

45
00:02:47.520 --> 00:02:54.420
Now, you may recall that within every component in our app, we have access to our route via the this

46
00:02:54.420 --> 00:02:56.430
dot dollar sign root property.

47
00:02:56.730 --> 00:02:59.460
So I have access to that anywhere in my component.

48
00:02:59.730 --> 00:03:04.020
And of course, that is a complex object that Vue router is going to give to us.

49
00:03:04.290 --> 00:03:10.320
And so the question I have for you from a TDD perspective is do we need to add Vue router to our test

50
00:03:10.530 --> 00:03:12.450
in order to test that functionality?

51
00:03:12.870 --> 00:03:14.970
And I would argue that we do not.

52
00:03:15.150 --> 00:03:19.080
We just need an object that can play the role of a root.

53
00:03:19.530 --> 00:03:22.620
So just to reiterate, let me dive into the code right here.

54
00:03:22.920 --> 00:03:28.170
If we were to console.log the value of this dot root, as we did earlier in the course in our browser,

55
00:03:28.350 --> 00:03:32.730
we would see that it is a really, really complex object with something like ten different properties.

56
00:03:32.730 --> 00:03:35.970
There's path, there's name, there's a whole bunch of other things.

57
00:03:36.330 --> 00:03:40.630
But for the purposes of our test, we don't need the real life object.

58
00:03:40.650 --> 00:03:44.310
We just need an object that is close enough that can play the role.

59
00:03:45.090 --> 00:03:51.450
It's the exact same principle as what we do when we shallow mount a component and we replace the child

60
00:03:51.450 --> 00:03:52.770
components with something lighter.

61
00:03:52.980 --> 00:03:54.270
It's the same principle here.

62
00:03:54.450 --> 00:03:58.560
We don't need a real root object with all of its complexity.

63
00:03:58.650 --> 00:04:01.800
We just need an object that has the properties that we care about.

64
00:04:01.920 --> 00:04:07.710
And they can play the role of a round object and allow us to actually separate our tests from the exact

65
00:04:07.980 --> 00:04:09.510
Vue router implementation.

66
00:04:09.600 --> 00:04:15.150
So we don't have to drag that complexity into our into our tests.

67
00:04:15.540 --> 00:04:21.150
So the property that we're going to care about on that root object is called name.

68
00:04:21.450 --> 00:04:21.870
Okay.

69
00:04:22.140 --> 00:04:29.760
And just to remind you, if I go to my router index Doug's file, whenever we create roots, we give

70
00:04:29.760 --> 00:04:36.090
each root a name and that name is available on the dollar sign root object in in every component.

71
00:04:36.390 --> 00:04:41.640
So what we basically want to check is if the name is equal to job results, we know we're on the job

72
00:04:41.640 --> 00:04:46.380
results path or the job results page and that's when we want to render the job count.

73
00:04:46.560 --> 00:04:47.640
Otherwise, we do not.

74
00:04:48.060 --> 00:04:53.610
So if we have an object right here in our tests and we give it a name property, that is what we're

75
00:04:53.610 --> 00:04:54.210
looking for.

76
00:04:54.210 --> 00:04:59.940
That object with a name property is all we need in order to test the components, interact.

77
00:05:00.020 --> 00:05:01.820
You with the root property.

78
00:05:02.000 --> 00:05:03.590
All right, so I'm going to create an object here.

79
00:05:03.770 --> 00:05:06.980
I'm going to give it a name, property of job results.

80
00:05:07.730 --> 00:05:10.340
So I'm going to match the exact same name I have right here.

81
00:05:10.670 --> 00:05:15.260
And I'm going to assign this to a constant called dollar sign root.

82
00:05:16.280 --> 00:05:16.490
All right.

83
00:05:16.490 --> 00:05:18.770
Let me talk a little bit more about what we're trying to do here.

84
00:05:19.040 --> 00:05:23.700
So we have this object that we have assigned to DocuSign Route.

85
00:05:23.720 --> 00:05:25.100
It has a single name property.

86
00:05:25.580 --> 00:05:33.410
What I want to do is I want this sub nav component when it accesses the dollar root property instead

87
00:05:33.410 --> 00:05:37.100
of having the real object that Vue router will provide in the real world.

88
00:05:37.220 --> 00:05:41.120
I want it to access this object instead for several reasons.

89
00:05:41.330 --> 00:05:44.570
One is we can decouple our component from your router.

90
00:05:44.720 --> 00:05:49.070
We don't have to figure out how to incorporate view router into our tests because our tests don't know

91
00:05:49.070 --> 00:05:49.850
about the router.

92
00:05:50.000 --> 00:05:55.250
Remember, each component is mounted in isolation, so it doesn't know the global details of the new

93
00:05:55.250 --> 00:05:55.520
app.

94
00:05:55.610 --> 00:05:58.730
It doesn't know that Vue router has been configured in main bags.

95
00:05:58.880 --> 00:06:06.470
It's just rendering a sub nav component so it knows nothing about the root property or the router property,

96
00:06:06.680 --> 00:06:11.780
but we are going to eventually be accessing those properties in our implementation to get root information.

97
00:06:11.900 --> 00:06:14.390
So we need something to play the role of that property.

98
00:06:14.390 --> 00:06:17.660
We need a substitute and that is what I'm trying to create here.

99
00:06:17.660 --> 00:06:22.790
This is going to be the object that we're going to access when we do this that dollars say dollar sign

100
00:06:22.790 --> 00:06:24.320
root in our implementation.

101
00:06:25.130 --> 00:06:25.400
Right?

102
00:06:25.610 --> 00:06:31.790
So we've created that object above, but how do we actually configure it so that when we access dollar

103
00:06:31.790 --> 00:06:35.960
sign root in our implementation, the tests will replace that with this?

104
00:06:36.350 --> 00:06:41.780
Well, in order to do that, we have to add an additional property to our global object right here and

105
00:06:41.780 --> 00:06:43.850
that property is going to be MOX.

106
00:06:44.330 --> 00:06:48.440
So I'm going to declare that property and I'm going to set it equal to a JavaScript object.

107
00:06:48.680 --> 00:06:55.070
The way that marks work is the exact same way that Stubs work, except stubs are focused on child components,

108
00:06:55.220 --> 00:06:58.220
while mocks are focused on global injections.

109
00:06:58.220 --> 00:07:02.780
And when I mean global injections, I mean properties that the component is going to have access to

110
00:07:02.930 --> 00:07:06.470
that are going to be defined on it from some kind of global implementation.

111
00:07:06.680 --> 00:07:12.830
So for example, we added Vue router globally to our app and that automatically adds a dollar sign root

112
00:07:12.830 --> 00:07:14.480
and a dollar sign router property.

113
00:07:14.690 --> 00:07:20.270
So for those kinds of global properties that are that are now immediately available, this in this object

114
00:07:20.270 --> 00:07:22.400
is where we can mark them out.

115
00:07:22.610 --> 00:07:26.330
And when I use the word mock them out, what I mean is replace them with a substitute.

116
00:07:26.690 --> 00:07:30.890
And of course the goal is for that substitute to be a more lighter weight version of the real object

117
00:07:31.040 --> 00:07:34.550
so we can test in isolation with a much simpler scope.

118
00:07:35.300 --> 00:07:40.370
So what I want to do is whenever the component accesses dollar sign that root, I want to give it an

119
00:07:40.370 --> 00:07:42.950
object to replace the real world view router.

120
00:07:43.280 --> 00:07:48.710
Otherwise if we use this to dollar sign root in my component, our test is not going to know what that

121
00:07:48.710 --> 00:07:49.280
is referencing.

122
00:07:49.280 --> 00:07:50.870
What is that object supposed to be?

123
00:07:50.870 --> 00:07:52.220
What is that property equal to?

124
00:07:52.520 --> 00:07:58.610
So of course I want to make this dollar sign root property equal to the root object that I've defined

125
00:07:58.610 --> 00:07:59.000
above.

126
00:07:59.840 --> 00:08:03.920
And of course if you're familiar with ESX, you know that when you have a property and a value that

127
00:08:03.920 --> 00:08:07.340
is equal, we can just consolidate this to be just that.

128
00:08:08.060 --> 00:08:08.510
Okay.

129
00:08:08.870 --> 00:08:14.120
So we are going to say to this component or more specifically to our test, when you mount the sub nav

130
00:08:14.120 --> 00:08:19.790
component, if for any reason the user accesses or the implementation accesses, this the dollar sign

131
00:08:19.880 --> 00:08:20.150
out.

132
00:08:20.330 --> 00:08:23.570
Don't use the real life implementation because the test knows nothing about it.

133
00:08:23.720 --> 00:08:26.060
Use this sample object that we've provided.

134
00:08:26.480 --> 00:08:33.260
So of course this sample object should resemble the API or the interface of the real Vue router route

135
00:08:33.260 --> 00:08:33.800
object.

136
00:08:33.800 --> 00:08:36.080
And that root object does have a name property.

137
00:08:36.260 --> 00:08:38.630
So we can't just choose some arbitrary property here.

138
00:08:38.630 --> 00:08:43.730
We do have to match the real world implementation, but it doesn't have to be the actual real world

139
00:08:43.760 --> 00:08:44.210
object.

140
00:08:44.210 --> 00:08:49.550
It has to be something that is close enough that it can perform the function and do the responsibility

141
00:08:49.550 --> 00:08:52.430
of the real world object without being the real world thing.

142
00:08:52.610 --> 00:08:55.010
And thus our tests are oblivious to view router.

143
00:08:55.160 --> 00:08:55.910
They don't care.

144
00:08:55.910 --> 00:08:59.540
They just care about a property existing that gives them access to an object that they can use.

145
00:08:59.990 --> 00:09:00.380
All right.

146
00:09:00.650 --> 00:09:03.530
So we're going to follow this exact same approach for the test below.

147
00:09:03.530 --> 00:09:05.390
So I'm going to copy this code below.

148
00:09:06.170 --> 00:09:11.570
But of course, the difference here is this test is for when the user is not on the job page, it does

149
00:09:11.570 --> 00:09:12.770
not display the job count.

150
00:09:13.010 --> 00:09:17.810
So I need to give it a root name that is not equal to the job results page.

151
00:09:17.810 --> 00:09:18.050
Right?

152
00:09:18.050 --> 00:09:23.000
So for example, if I go into my router index that yes, let's say the user is on the home view and

153
00:09:23.000 --> 00:09:24.680
that root name is going to be home.

154
00:09:24.680 --> 00:09:30.080
So let's say the user is on the home root and then I'm going to configure that root within my component

155
00:09:30.080 --> 00:09:32.120
by again providing the max property.

156
00:09:32.120 --> 00:09:39.860
So Max set it equal to an object and I want to overwrite my this dollar sign root property with the

157
00:09:39.860 --> 00:09:41.090
root object above.

158
00:09:41.270 --> 00:09:42.530
And that's what we're going to do here.

159
00:09:42.980 --> 00:09:43.340
All right.

160
00:09:43.340 --> 00:09:44.270
So we've set that up.

161
00:09:44.420 --> 00:09:46.520
We have two different objects playing the role.

162
00:09:46.760 --> 00:09:51.050
And in one circumstance, if we have the right name, then we should render the job results.

163
00:09:51.230 --> 00:09:53.210
And in the other circumstance, we should not.

164
00:09:53.630 --> 00:09:58.730
So that allows us to do is to remove our former data implementation because we're not going to be relying

165
00:09:58.730 --> 00:09:59.990
on data any longer.

166
00:09:59.990 --> 00:10:01.010
We don't care about that.

167
00:10:01.520 --> 00:10:06.410
And even though again, we haven't created this code in our actual implementation, that's fine.

168
00:10:06.410 --> 00:10:11.420
That's the whole point of TDD is we're writing things as they should be, as we want them to be, and

169
00:10:11.420 --> 00:10:12.500
then we write the solution.

170
00:10:12.740 --> 00:10:14.360
So we're going to get rid of that data reference.

171
00:10:14.360 --> 00:10:15.680
We're going to get rid of that data reference.

172
00:10:15.730 --> 00:10:16.000
Here.

173
00:10:17.660 --> 00:10:21.590
And now we can run our tests and they should, of course, predictably fail.

174
00:10:21.980 --> 00:10:22.880
So right here.

175
00:10:23.840 --> 00:10:26.660
I'm going to do NPM run, test, colon, watch.

176
00:10:27.530 --> 00:10:29.720
We're going to start running our tests and they should fail.

177
00:10:33.690 --> 00:10:39.120
And of course they do fail because it's not able to find the job count reference on some component.

178
00:10:39.450 --> 00:10:43.980
So let's come back to our implementation and let's remove data fully.

179
00:10:44.970 --> 00:10:48.660
So again, matching the implementation to what our test expectations are.

180
00:10:48.840 --> 00:10:50.130
So now we still have our failure.

181
00:10:50.310 --> 00:10:57.930
So now we need to essentially configure our component to read the root object, get the name, and use

182
00:10:57.930 --> 00:11:02.460
that to determine whether we should render that section of the component.

183
00:11:02.790 --> 00:11:05.160
So this is going to be a computed property.

184
00:11:05.400 --> 00:11:10.710
The reason it's going to be a computed property is because it is derived or dependent on another piece

185
00:11:10.710 --> 00:11:11.130
of data.

186
00:11:11.280 --> 00:11:14.700
And that other piece of data is whatever route we happen to be on.

187
00:11:15.000 --> 00:11:21.300
And I'm going to give this method a name of on job results page, the exact same thing that this the

188
00:11:21.300 --> 00:11:23.250
if directive is expecting it to be called.

189
00:11:23.550 --> 00:11:24.990
So I'm going to copy that right here.

190
00:11:25.290 --> 00:11:26.340
I'm going to make that a method.

191
00:11:26.790 --> 00:11:31.500
And of course, because we're using AVF directive, this method has to return a boolean.

192
00:11:31.620 --> 00:11:32.190
True.

193
00:11:32.190 --> 00:11:35.370
If we are on the job results page and false if we are not.

194
00:11:35.670 --> 00:11:37.380
So how do we determine where we are?

195
00:11:37.650 --> 00:11:41.130
Well, what I can do is access the dollar sign root property.

196
00:11:41.340 --> 00:11:44.550
In the real world, we're going to get the real root object from your router.

197
00:11:44.670 --> 00:11:47.130
In our tests, we're going to get this object instead.

198
00:11:47.460 --> 00:11:53.160
And on that object we have a name property right in the real world and in our tests.

199
00:11:53.400 --> 00:11:55.800
And when is the user on the job results page?

200
00:11:55.950 --> 00:11:58.890
When the name property is equal to job results.

201
00:11:59.130 --> 00:12:02.370
So right here, I'm going to set this equal to job results.

202
00:12:02.910 --> 00:12:06.900
Compare the quality of those strings and return this value.

203
00:12:07.170 --> 00:12:13.020
So if we are on the job results route, this will evaluate to true and we are going to render this detail.

204
00:12:13.260 --> 00:12:15.990
If we are on any other route, we're going to get a false.

205
00:12:16.140 --> 00:12:20.280
This computed property will evaluate to false, which means we're going to have false right here and

206
00:12:20.280 --> 00:12:22.470
we're not going to render the number of jobs matched.

207
00:12:22.740 --> 00:12:24.750
Our tests pass, which is great.

208
00:12:24.900 --> 00:12:27.940
Our tests don't know about the details of your router.

209
00:12:27.960 --> 00:12:28.530
That's great.

210
00:12:28.530 --> 00:12:31.830
All they know about is we need some kind of object with a name property.

211
00:12:31.830 --> 00:12:32.880
Any object will do.

212
00:12:33.090 --> 00:12:34.950
And finally, if we go to our browser.

213
00:12:36.190 --> 00:12:36.950
Let's refresh.

214
00:12:37.240 --> 00:12:41.590
We are on the job results page, so we do expect to see this and that is fantastic.

215
00:12:41.830 --> 00:12:45.850
But when we navigate to our home page, perfect, we still have our sub nav.

216
00:12:46.000 --> 00:12:51.010
But that conditional rendering of the number of jobs matched is now gone, which is exactly what we

217
00:12:51.010 --> 00:12:51.400
expect.

218
00:12:51.580 --> 00:12:53.200
And when we navigate back to jobs.

219
00:12:54.130 --> 00:12:57.820
You'll notice that our route changes are computed property reevaluates.

220
00:12:57.820 --> 00:12:59.440
It checks the name of that route.

221
00:12:59.650 --> 00:13:03.580
It gets another match, it gets another true because we are on the job results route.

222
00:13:03.790 --> 00:13:06.850
So it renders that belief and renders the number of jobs matched.

223
00:13:07.180 --> 00:13:12.140
So as we navigate back and forth, we have the exact result that we expect from page to page.

224
00:13:12.400 --> 00:13:13.960
That's all there is to cover in this lesson.

225
00:13:13.960 --> 00:13:15.490
So I will see you next one.
