WEBVTT
1
00:00:00.210 --> 00:00:01.110
All right.

2
00:00:01.110 --> 00:00:06.200
So the code that we added in the previous lesson will actually break some of our existing tests.

3
00:00:06.210 --> 00:00:09.540
So let's go ahead and run our test suite so we can fix them immediately.

4
00:00:09.870 --> 00:00:13.200
So right here I'll run NPM, run test colon, watch.

5
00:00:13.950 --> 00:00:20.100
And I am making git commits every lesson and this Jess runner only looks at the code that's changed

6
00:00:20.130 --> 00:00:21.060
since the last commit.

7
00:00:21.360 --> 00:00:25.800
So if you ever get anything like this, just press the A button and that will run all of the tests.

8
00:00:26.220 --> 00:00:29.760
And that's a good thing to do in general to just make sure we are running everything.

9
00:00:30.150 --> 00:00:36.450
And if I scroll up, we'll see that we are failing in the job listings component and it's coming from

10
00:00:36.450 --> 00:00:37.350
this line.

11
00:00:37.590 --> 00:00:43.590
So this is a line that we added in the previous lesson and remember in the browser view router automatically

12
00:00:43.590 --> 00:00:46.410
adds the root property to every view component.

13
00:00:46.650 --> 00:00:49.350
However, in our tests that is not true.

14
00:00:49.590 --> 00:00:55.890
So therefore when our tests tried to access this dot root in the component that property does not exist,

15
00:00:56.070 --> 00:01:00.780
it gets undefined and then the test cannot read the property query on undefined.

16
00:01:00.930 --> 00:01:02.640
And so it fails right then and there.

17
00:01:02.640 --> 00:01:04.380
It never even gets to our assertions.

18
00:01:04.380 --> 00:01:06.810
This all happens in the actual mounting of the component.

19
00:01:07.290 --> 00:01:08.730
So how can we fix this problem?

20
00:01:08.880 --> 00:01:11.400
We can fix it the exact same way we've done before.

21
00:01:11.400 --> 00:01:17.790
We can replace the root property with a mock object, with a smaller JavaScript object that will play

22
00:01:17.790 --> 00:01:19.770
the role of the root object.

23
00:01:19.770 --> 00:01:24.450
We do not need to incorporate Vue router, we just need to incorporate something similar that can play

24
00:01:24.450 --> 00:01:24.870
the role.

25
00:01:25.140 --> 00:01:30.720
As a reminder, we did already solve this problem in our tests for the sub nav component.

26
00:01:30.990 --> 00:01:33.100
So if I open up sub nav that test that.

27
00:01:33.160 --> 00:01:39.810
Yes, as a reminder here is our create config factory function and here is the setup we used in order

28
00:01:39.810 --> 00:01:43.500
to mock out the global root property.

29
00:01:43.500 --> 00:01:49.110
So whenever you have a global property, which means a property that is on every component like root

30
00:01:49.110 --> 00:01:54.810
or router, in our case we can set up this setup in our configuration object for the test.

31
00:01:55.110 --> 00:02:01.560
So in mocks we say whenever the component references dollar sign root as a property, use this object

32
00:02:01.560 --> 00:02:04.620
right here in this case an object with a name property.

33
00:02:04.830 --> 00:02:08.280
So we want to emulate something very similar in our tests for job listings.

34
00:02:08.400 --> 00:02:14.400
We'll just tell our test to use a sample JavaScript object that will play the role of the dollar sign

35
00:02:14.400 --> 00:02:17.070
root object that your router normally provides.

36
00:02:17.350 --> 00:02:17.670
Right?

37
00:02:18.000 --> 00:02:23.190
So we can of course write our factory function up first, but I'd like to write some duplicate code

38
00:02:23.190 --> 00:02:23.550
first.

39
00:02:23.550 --> 00:02:27.840
First we want to solve the tests and only then do we want to refactor to a better solution.

40
00:02:27.840 --> 00:02:30.750
So for now we're just going to duplicate some code from test to test.

41
00:02:31.050 --> 00:02:31.440
Salemi.

42
00:02:31.440 --> 00:02:33.240
Open up my job listings.

43
00:02:34.720 --> 00:02:35.200
Test.

44
00:02:36.160 --> 00:02:37.450
I think that is our plural one.

45
00:02:37.450 --> 00:02:37.660
Yep.

46
00:02:37.810 --> 00:02:42.250
And let me open it alongside our job listings component just so we have a reference to our original

47
00:02:42.250 --> 00:02:42.940
implementation.

48
00:02:44.340 --> 00:02:45.060
So there we go.

49
00:02:45.330 --> 00:02:48.960
So right here, I want to follow the exact same set up that we just saw.

50
00:02:49.140 --> 00:02:51.810
We want to provide a configuration object right here.

51
00:02:52.500 --> 00:02:55.890
And to that object, we're going to provide our route object.

52
00:02:56.130 --> 00:03:00.000
So I'm going to assign it to a separate constant just so I have it in line.

53
00:03:00.000 --> 00:03:04.530
It just doesn't get too convoluted and too complex in our configuration object.

54
00:03:04.830 --> 00:03:07.830
So right here I'll create a content called Dollar Sign Root.

55
00:03:07.830 --> 00:03:10.150
That is the ultimate property that I want to overwrite.

56
00:03:10.680 --> 00:03:13.560
And this will be an object that's going to have a query property.

57
00:03:13.740 --> 00:03:17.370
We need this property to exist because that is what we're accessing right here.

58
00:03:17.670 --> 00:03:21.000
And of course, on the query object, we wanted to have a page property.

59
00:03:21.450 --> 00:03:23.100
So we follow what we have right here.

60
00:03:23.280 --> 00:03:26.610
And then, of course, Page is going to be a string representing some page number.

61
00:03:26.620 --> 00:03:28.380
It can be whatever we want for the test.

62
00:03:28.590 --> 00:03:31.760
I'm just going to put an arbitrary value of five now by itself.

63
00:03:31.770 --> 00:03:32.640
It doesn't do anything.

64
00:03:32.640 --> 00:03:37.590
We have to hook this up to our actual mounting of the job listings component.

65
00:03:37.860 --> 00:03:42.270
So right here, my configuration object that I passed is a second argument to shell amount.

66
00:03:42.600 --> 00:03:44.460
I'm going to provide the global property.

67
00:03:44.730 --> 00:03:46.650
That's going to be an object in here.

68
00:03:46.650 --> 00:03:49.980
I'm going to provide the MOX property that is going to be an object.

69
00:03:50.160 --> 00:03:57.420
And here I provide a key or a property representing which global MOC or which global object I want to

70
00:03:57.420 --> 00:03:57.930
mark out.

71
00:03:58.170 --> 00:04:01.200
I want to mark out dollar sign root on any component.

72
00:04:01.530 --> 00:04:06.570
So of course, I want to assign this to my dollar sign root object above.

73
00:04:06.570 --> 00:04:12.140
And whenever we have the syntax in Essex, of course what we can do is simply make it like this.

74
00:04:12.150 --> 00:04:16.740
If we have a property with the same name as a constant or a variable in our program, we can simply

75
00:04:16.740 --> 00:04:17.160
do this.

76
00:04:17.370 --> 00:04:23.340
And what that is going to do is provide this that dollar sign root to our component as this object right

77
00:04:23.340 --> 00:04:23.640
here.

78
00:04:23.790 --> 00:04:25.920
And now this code should no longer fail.

79
00:04:26.100 --> 00:04:26.460
All right.

80
00:04:26.700 --> 00:04:29.000
We want to repeat the exact same logic below.

81
00:04:29.000 --> 00:04:32.280
So I think I'm just going to copy this code down below.

82
00:04:33.360 --> 00:04:34.440
So let me move here.

83
00:04:34.450 --> 00:04:35.620
Let me paste a right here.

84
00:04:35.640 --> 00:04:39.480
After we mark out the Axios get call, I'm going to have a root object.

85
00:04:39.630 --> 00:04:43.140
Let's switch things up a little bit here and make the page equal to one.

86
00:04:43.680 --> 00:04:46.410
We're still going to shallow amount our job listings component.

87
00:04:46.410 --> 00:04:51.350
This line is a duplicate line so we can remove it and make sure that we assign the return value of shallow

88
00:04:51.360 --> 00:04:53.190
mount to a contact called Wrapper.

89
00:04:53.940 --> 00:04:56.220
Let's save that and see what we get.

90
00:04:57.690 --> 00:05:01.530
Our tests are all running and perfect, so we have a fully green test suite.

91
00:05:01.710 --> 00:05:02.700
Everything is passing.

92
00:05:02.700 --> 00:05:07.290
We have taken care of the problem of our tests, not being able to read the root property.

93
00:05:07.440 --> 00:05:14.460
That is a global property that we have mocked out or replaced or substituted with a simple object in

94
00:05:14.460 --> 00:05:15.660
our tests that can play the role.

95
00:05:15.900 --> 00:05:20.790
And so now that we have a sense of what the duplication is between our two tests, we can sort of start

96
00:05:20.790 --> 00:05:25.470
moving some of that duplication into a factory function, do a little bit of a refactor in the very

97
00:05:25.470 --> 00:05:26.070
next lesson.
