WEBVTT
1
00:00:00.330 --> 00:00:01.160
Okay.

2
00:00:01.170 --> 00:00:07.410
So the next file that I want to move to, TypeScript, is going to be our Mutations jazz file once again

3
00:00:07.410 --> 00:00:09.420
in the source store directory.

4
00:00:09.750 --> 00:00:15.050
So as always, let's right click it, let's click rename and let's change the extension to T.

5
00:00:15.090 --> 00:00:15.480
S.

6
00:00:16.570 --> 00:00:16.900
All right.

7
00:00:17.170 --> 00:00:20.770
So at this point, we're going to see some helpful errors coming from TypeScript.

8
00:00:20.770 --> 00:00:26.530
And if I hover my mouse over one of them, such as this one, we're going to say that TypeScript thinks

9
00:00:26.530 --> 00:00:29.470
that parameter state implicitly has an any type.

10
00:00:29.710 --> 00:00:36.910
Remember, any is not a good type to have because it basically loses the entire value of having TypeScript.

11
00:00:37.240 --> 00:00:43.480
So we need to explicitly tell TypeScript what state represents, what is going to be the shape or the

12
00:00:43.480 --> 00:00:45.040
type of that argument.

13
00:00:45.250 --> 00:00:50.590
Well, luckily, we already have a very helpful interface that describes exactly what state is going

14
00:00:50.590 --> 00:00:50.950
to be.

15
00:00:51.160 --> 00:00:53.470
We have our global state interface.

16
00:00:53.680 --> 00:01:00.190
This thing right here is exactly the kind of object that we're going to be receiving as the first argument

17
00:01:00.190 --> 00:01:01.090
to every mutation.

18
00:01:01.360 --> 00:01:07.180
Because remember, every mutation in view X always receives the current store state as the first parameter

19
00:01:07.390 --> 00:01:08.080
and a current.

20
00:01:08.230 --> 00:01:12.640
And in our current store state, we'll always have this interface right here.

21
00:01:12.640 --> 00:01:16.780
It's always going to have those four properties with those four types associated with them.

22
00:01:17.050 --> 00:01:18.250
So you guessed it.

23
00:01:18.250 --> 00:01:20.680
Let's go ahead and import global state and use it.

24
00:01:21.010 --> 00:01:27.700
So right here I'm going to import global state and that is going to come from our source directory,

25
00:01:27.940 --> 00:01:30.160
our store folder and then the types file.

26
00:01:30.160 --> 00:01:32.620
That's the exact same one we have on the right hand side.

27
00:01:32.890 --> 00:01:38.470
And then it's a simple matter of going to every state parameter definition, putting a colon and then

28
00:01:38.470 --> 00:01:42.610
describing what type that state parameter has.

29
00:01:42.610 --> 00:01:46.780
So this is going to be an object that has the global state interface.

30
00:01:47.080 --> 00:01:48.850
Same thing here for this mutation.

31
00:01:48.850 --> 00:01:52.060
This is also going to be global state, same thing here.

32
00:01:52.060 --> 00:01:55.270
This is also going to be global state and same thing here.

33
00:01:55.270 --> 00:01:56.710
This is also going to be a global state.

34
00:01:57.850 --> 00:01:58.900
It really is that easy.

35
00:01:59.140 --> 00:02:01.330
Now, here is the beautiful part about this design.

36
00:02:01.870 --> 00:02:08.830
By enabling this, we've told TypeScript that our mutations are receiving our state object that has

37
00:02:08.830 --> 00:02:10.360
this interface, this shape.

38
00:02:10.690 --> 00:02:15.730
So it's going to know which properties we have access to and what their values are going to be.

39
00:02:16.000 --> 00:02:21.040
So once again, if I accidentally have some kind of typo, like, for example, I miss type jobs here

40
00:02:21.040 --> 00:02:22.630
and do jobs with it with a Z.

41
00:02:22.930 --> 00:02:29.440
Now TypeScript knows that the state parameter flowing in only has a jobs property ending in S, it doesn't

42
00:02:29.440 --> 00:02:31.960
have a jobs property ending in Z.

43
00:02:32.170 --> 00:02:37.180
So if I hover my mouse, it's going to say, hey, that property jobs does not exist on type global

44
00:02:37.180 --> 00:02:37.510
state.

45
00:02:37.690 --> 00:02:41.890
And that, of course, convinces me that I should change it to a.

46
00:02:41.890 --> 00:02:42.240
S.

47
00:02:42.520 --> 00:02:46.690
Here's another example where it can help us and don't copy this, because this is just for the sake

48
00:02:46.690 --> 00:02:47.260
of example.

49
00:02:47.530 --> 00:02:53.950
Let's say I tried to assign this jobs array to an array of strings and b TypeScript is similarly going

50
00:02:53.950 --> 00:02:59.650
to give us an error because it's going to say, yes, jobs is an array, but jobs is an array of job

51
00:02:59.650 --> 00:03:04.930
objects and each job object has to implement the properties you promised me on a job interface.

52
00:03:05.050 --> 00:03:08.530
An array of strings is not equal to an array of jobs.

53
00:03:08.740 --> 00:03:12.700
Therefore it's going to say type string is not assignable to type job.

54
00:03:12.910 --> 00:03:16.870
This array can only hold objects that implement the job interface.

55
00:03:17.080 --> 00:03:21.220
So once again, TypeScript is helping us to identify potential errors in our program.

56
00:03:21.550 --> 00:03:21.850
Right.

57
00:03:21.970 --> 00:03:23.170
It's not just about typos.

58
00:03:23.170 --> 00:03:26.650
It's also about logical lapses of judgment that we can have on coding.

59
00:03:26.860 --> 00:03:31.960
Sometimes it's inevitable as our code base grows in size and complexity, that we make errors like this.

60
00:03:32.080 --> 00:03:36.610
TypeScript is really helpful when it comes to reminding us, Hey, that thing, that value that you

61
00:03:36.610 --> 00:03:38.390
thought it was, it's actually a different type.

62
00:03:38.410 --> 00:03:39.100
Be careful.

63
00:03:39.430 --> 00:03:44.380
So let me let me return this back to being an argument of of the parameter jobs.

64
00:03:45.130 --> 00:03:49.660
And then, of course, all that's left to do is to also update these parameters right here.

65
00:03:49.690 --> 00:03:51.730
Jobs, organizations and job types.

66
00:03:52.090 --> 00:03:54.630
Well, jobs, of course, is going to be an array of jobs.

67
00:03:54.640 --> 00:03:56.980
So let's go ahead and import our job interface.

68
00:03:57.280 --> 00:04:05.380
So right here, I'm going to import job and that is going to come from our source directory API types.

69
00:04:05.770 --> 00:04:08.410
That was one of the first interfaces we defined in our project.

70
00:04:08.590 --> 00:04:14.980
And right here, jobs of course, is going to flow in as a job array, an array of job objects.

71
00:04:15.190 --> 00:04:20.980
And once again, TypeScript is going to validate that this assignment on line 16 is totally valid because

72
00:04:20.980 --> 00:04:22.810
jobs has to be a job array.

73
00:04:22.840 --> 00:04:26.350
And what we're assigning to it, jobs, this parameter is also a job, right?

74
00:04:26.500 --> 00:04:29.830
So it validates that the types of the arrays match as well.

75
00:04:29.830 --> 00:04:31.540
And this is a totally valid assignment.

76
00:04:31.840 --> 00:04:32.110
Right.

77
00:04:32.380 --> 00:04:38.230
For example, just to show you this again in action, we know that selected organizations is an array

78
00:04:38.230 --> 00:04:42.550
of strings when it comes to our global state or in other words, our View X Store State.

79
00:04:42.880 --> 00:04:47.620
Take a look at what happens if I accidentally say that organization's here is an array of numbers.

80
00:04:47.980 --> 00:04:50.560
So still an array but an array of the wrong data type.

81
00:04:50.800 --> 00:04:52.720
Take a look at what TypeScript is going to tell us.

82
00:04:53.020 --> 00:04:58.270
It's going to say, hey, your type of number array that is represented by the organizations parameter

83
00:04:58.270 --> 00:05:03.340
that you're trying to assign that's not assignable to what's selected organizations is or supposed to

84
00:05:03.340 --> 00:05:08.470
be, which is a string array type number array is not assignable to type string array.

85
00:05:08.830 --> 00:05:09.070
All right.

86
00:05:09.070 --> 00:05:11.140
So that tells us there's something we have to fix, right?

87
00:05:11.320 --> 00:05:15.580
It could either be that our property is incorrect or as it is in this scenario, it's that our type

88
00:05:15.580 --> 00:05:18.040
declaration for our organization's parameter is incorrect.

89
00:05:18.250 --> 00:05:19.450
It's not a number array.

90
00:05:19.450 --> 00:05:20.740
It's going to be a string array.

91
00:05:21.160 --> 00:05:23.890
And now selected organizations is a string array.

92
00:05:23.980 --> 00:05:29.200
We're overwriting the current value of that property with our organization's parameter, which is also

93
00:05:29.200 --> 00:05:30.040
a string array.

94
00:05:30.130 --> 00:05:32.110
So TypeScript says, That looks good to me.

95
00:05:32.110 --> 00:05:32.980
Those types match.

96
00:05:33.190 --> 00:05:35.620
I'm really happy and I'm not going to raise any complaints.

97
00:05:36.040 --> 00:05:36.310
All right.

98
00:05:36.310 --> 00:05:40.450
So all we have left to do in this file is once again repeat the same logic for job types that's going

99
00:05:40.450 --> 00:05:43.870
to flow in from our component again whenever the user selects a checkbox.

100
00:05:44.050 --> 00:05:49.540
So once again, I'm simply going to label this a string array, save that TypeScript is happy with all

101
00:05:49.540 --> 00:05:50.860
the properties that were accessing.

102
00:05:51.040 --> 00:05:52.270
They're all correctly spelled.

103
00:05:52.480 --> 00:05:56.830
It's happy with what we're assigning to it to validate that it is receiving the correct data type for

104
00:05:56.830 --> 00:05:57.460
that property.

105
00:05:57.460 --> 00:06:01.510
And now using TypeScript, we've made our mutations checks a lot more robust.

106
00:06:01.900 --> 00:06:02.200
All right.

107
00:06:02.200 --> 00:06:03.760
That's all there is to cover in this lesson.

108
00:06:03.760 --> 00:06:05.260
So I will see you in the next one.
