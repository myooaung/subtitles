1
00:00:00,690 --> 00:00:01,170
Okay.

2
00:00:01,170 --> 00:00:05,010
So the next topic that I want to cover is declaring types for objects.

3
00:00:05,310 --> 00:00:09,990
So let's say I have an object, call the plumber and I'll assign it three properties.

4
00:00:10,170 --> 00:00:17,850
I'm going to have a name property set tomorrow, a skill, a property set to jumping and a likes mushrooms.

5
00:00:17,850 --> 00:00:19,100
Property is set to true.

6
00:00:20,700 --> 00:00:23,310
And so how do we assign a type to an object?

7
00:00:23,310 --> 00:00:26,820
The exact same way we assign a type to any type in TypeScript.

8
00:00:27,000 --> 00:00:30,450
We put a colon after the constant and then we describe what it is.

9
00:00:30,750 --> 00:00:34,200
Now there is a general object type, so I'm going to write it out.

10
00:00:34,410 --> 00:00:39,480
But this is not recommended because it is not as specific as we can be.

11
00:00:39,480 --> 00:00:44,040
And whenever we're not as specific as we can be, we lose many of the benefits of TypeScript.

12
00:00:44,370 --> 00:00:50,160
So an object is a general object in JavaScript which applies to, yes, this kind of data structure

13
00:00:50,160 --> 00:00:56,700
with key value pairs, but it also applies to things like arrays, functions, custom objects that we

14
00:00:56,700 --> 00:00:58,590
make from our own custom classes, etc..

15
00:00:58,860 --> 00:01:04,680
So in other words, this is an okay category, but it's way far away from being as descriptive and as

16
00:01:04,680 --> 00:01:06,240
explicit as we can be.

17
00:01:06,570 --> 00:01:09,210
This is not just a collection of key value pairs.

18
00:01:09,450 --> 00:01:13,020
This specifically is a collection of three key value pairs.

19
00:01:13,020 --> 00:01:13,290
Right?

20
00:01:13,300 --> 00:01:14,850
That's one specific detail.

21
00:01:15,030 --> 00:01:20,670
In addition, those three key values or those three properties specifically are name skill and likes

22
00:01:20,670 --> 00:01:21,150
mushrooms.

23
00:01:21,450 --> 00:01:26,520
And finally, we can also get even more granular and tell TypeScript we have a name property set to

24
00:01:26,520 --> 00:01:31,320
a string, we have a skill property set to a string and we have a likes mushrooms property set to a

25
00:01:31,320 --> 00:01:31,830
boolean.

26
00:01:32,040 --> 00:01:38,190
And all of those details are way more specific than this generic kind of parent parent category of object.

27
00:01:38,550 --> 00:01:43,050
So let me show you how type typescript is going to infer the type of this object.

28
00:01:43,050 --> 00:01:48,030
If I remove this annotation, I'm going to remove that and hover my mouse over my constant.

29
00:01:48,600 --> 00:01:53,790
And you can see right here that this is how TypeScript is going to infer the type of my object based

30
00:01:53,790 --> 00:01:55,290
on what I've given it on the right hand side.

31
00:01:55,440 --> 00:01:59,550
So it's not just a generic object in the sense of a generic collection of key value pairs.

32
00:01:59,760 --> 00:02:05,570
It's a specific annotation of three key value pairs names at a string skill set the string and let's

33
00:02:05,580 --> 00:02:07,500
mushroom set to a boolean, right?

34
00:02:07,680 --> 00:02:12,450
And we're going to reap all the benefits of having a more specific declaration or in this case, inference

35
00:02:12,720 --> 00:02:15,120
like so compared to a generic one like object.

36
00:02:15,360 --> 00:02:20,280
So for example, if I try to access a property on plumber that does not exist, for example, I'm a

37
00:02:20,280 --> 00:02:22,530
confused name and think it's actually first name.

38
00:02:23,250 --> 00:02:27,780
And of course, when I write this out, TypeScript is going to say, Hey, property first name does

39
00:02:27,780 --> 00:02:32,110
not exist on the type of object you've given me right here that only has name properties.

40
00:02:32,160 --> 00:02:36,210
String properties are a name property, a scale property and a likes mushrooms property.

41
00:02:36,420 --> 00:02:39,570
There's nothing there called first name, but it goes even further.

42
00:02:39,570 --> 00:02:40,130
Beyond that.

43
00:02:40,140 --> 00:02:44,850
Let's say I access my likes, mushrooms, property, and that's a totally valid reference.

44
00:02:45,090 --> 00:02:48,810
But let's say I as a developer make a mistake and assume that this is a string.

45
00:02:48,990 --> 00:02:52,800
And let's say I want to uppercase it by invoking the two uppercase method.

46
00:02:53,250 --> 00:02:57,510
So if I invoke two uppercase right here, once again, TypeScript is going to give me an error.

47
00:02:57,540 --> 00:03:02,940
It's going to say, Hey, I know on the plumber object that likes mushrooms is a boolean and a boolean

48
00:03:02,940 --> 00:03:04,740
does not have a to uppercase method.

49
00:03:04,980 --> 00:03:08,850
So the error is going to say property to uppercase does not exist and type boolean.

50
00:03:09,120 --> 00:03:10,650
And that's where TypeScript really shines.

51
00:03:10,650 --> 00:03:15,090
As I mentioned earlier, it's kind of hard to see when we're annotating something basic like a string,

52
00:03:15,330 --> 00:03:20,940
but when we have objects with other objects, with arrays with their own objects, and let's say that's

53
00:03:20,940 --> 00:03:25,830
the return value of a function, etc., it's really easy as a developer to lose track of all those relationships

54
00:03:25,830 --> 00:03:33,690
or have a typo or remember incorrectly the name of a property, or try to invoke a method that doesn't

55
00:03:33,690 --> 00:03:35,610
exist or access the property it doesn't exist.

56
00:03:35,760 --> 00:03:37,350
And this is where touch really shines.

57
00:03:37,350 --> 00:03:40,890
It understands what the types are, and thus it understands what you can do with them.

58
00:03:40,980 --> 00:03:43,110
And I'll show you warnings like this one right here.

59
00:03:44,040 --> 00:03:44,430
All right.

60
00:03:44,700 --> 00:03:49,320
So with that said, inference is totally fine and it saves us, obviously, a lot of typing.

61
00:03:49,410 --> 00:03:54,180
But just to show you how we would explicitly manually declare our type for this object, what we can

62
00:03:54,180 --> 00:03:56,250
do is provide a colon here as always.

63
00:03:56,460 --> 00:03:59,310
And then instead of the word object, what we provide is curly braces.

64
00:03:59,460 --> 00:04:02,700
And then we describe the shape of the object that we're about to assign.

65
00:04:03,090 --> 00:04:03,360
Right?

66
00:04:03,360 --> 00:04:07,980
So more specifically than just a general generic object, which doesn't tell us everything, it's an

67
00:04:07,980 --> 00:04:11,970
object with three properties with their own data types, and that's all we have to declare in here.

68
00:04:12,330 --> 00:04:17,040
So the first thing I'm going to do is declare a name property followed by a colon, and then it's type

69
00:04:17,040 --> 00:04:18,030
which is going to be string.

70
00:04:18,900 --> 00:04:22,920
Now you'll notice when I simply have this, typescript is already going to raise an error.

71
00:04:23,220 --> 00:04:24,360
And why is that the case?

72
00:04:24,570 --> 00:04:29,430
Well, because we've told TypeScript that plumber should be an object with only a name property.

73
00:04:29,430 --> 00:04:31,020
And that name property set a string.

74
00:04:31,320 --> 00:04:35,010
So type typescript says, yeah, of course I've gotten the name property, such a string.

75
00:04:35,160 --> 00:04:38,010
But what are these two extra properties of scale and likes mushrooms?

76
00:04:38,010 --> 00:04:41,790
You haven't told me to expect those, so I'm going to tell you that that is a mismatch.

77
00:04:42,030 --> 00:04:46,140
So if I have read my mouse over this, you can see it's going to say the type of object you've given

78
00:04:46,140 --> 00:04:50,790
me with a name set to a string, a skill set to a string and a likes mushrooms property set to a boolean.

79
00:04:50,970 --> 00:04:55,650
That's not assignable to the type of object you promised me, which is an object with the name property

80
00:04:55,650 --> 00:04:56,490
set to string.

81
00:04:56,850 --> 00:04:57,120
Right?

82
00:04:57,300 --> 00:05:00,630
So if it's one extra property or one less property, it doesn't matter.

83
00:05:00,750 --> 00:05:06,030
TypeScript will identify those mismatches in the expected type and the actual value and will warn you

84
00:05:06,030 --> 00:05:06,480
about them.

85
00:05:06,600 --> 00:05:13,590
And that specificity that you focus on having it exactly right is way better than having a generic declaration

86
00:05:13,590 --> 00:05:17,040
like just object which will apply to any kind of object in the world.

87
00:05:17,040 --> 00:05:18,690
You can declare ten properties.

88
00:05:18,690 --> 00:05:19,470
Five properties.

89
00:05:19,630 --> 00:05:23,140
15 properties, different values, etc. Now we're being more specific.

90
00:05:23,440 --> 00:05:28,150
So obviously to make this IRD go away, we can provide an additional property here and it's type.

91
00:05:28,330 --> 00:05:32,710
So I'm going to write a comma here the exact same way that we separate key value pairs in an object.

92
00:05:32,830 --> 00:05:35,980
We similarly separate them in a object type declaration.

93
00:05:36,220 --> 00:05:39,880
And I'm going to tell TypeScript that what I'm assigning here is also going to have a skill property

94
00:05:40,060 --> 00:05:41,290
also set to a string.

95
00:05:42,430 --> 00:05:43,400
So what happens then?

96
00:05:43,420 --> 00:05:45,490
Probably you can anticipate this error by now.

97
00:05:45,700 --> 00:05:49,840
TypeScript is going to say, okay, you've told me to expect a name of a string and a skill of a string,

98
00:05:50,110 --> 00:05:51,460
and I've gotten that.

99
00:05:51,550 --> 00:05:53,380
But what the heck is likes mushrooms.

100
00:05:53,380 --> 00:05:56,410
It's going to say that type of object with a likes mushrooms property.

101
00:05:56,420 --> 00:06:00,460
Such a boolean is not assignable to a type with just two properties of name and skill.

102
00:06:00,760 --> 00:06:06,160
So right here I'm going to apply likes mushrooms and I'm going to assign it to a type of a boolean.

103
00:06:06,490 --> 00:06:08,110
So now a problem goes away.

104
00:06:08,140 --> 00:06:14,410
So now we have the exact same three properties and just as well we have the exact expected values for

105
00:06:14,410 --> 00:06:14,610
them.

106
00:06:14,830 --> 00:06:15,970
So for example, let's take a look.

107
00:06:15,970 --> 00:06:20,830
If there's a mismatch, let's say I do have a likes mushrooms property, but here I told TypeScript

108
00:06:20,830 --> 00:06:21,850
to anticipate a boolean.

109
00:06:22,030 --> 00:06:24,820
Let's say instead that I provide a value like five.

110
00:06:25,060 --> 00:06:29,800
Once again, TypeScript is now going to say, okay, you told me there's going to be a likes mushrooms

111
00:06:29,800 --> 00:06:30,220
property.

112
00:06:30,220 --> 00:06:31,420
That's totally fine with me.

113
00:06:31,660 --> 00:06:34,990
But you told me it's going to be a boolean and you're trying to assign a number here.

114
00:06:35,230 --> 00:06:40,180
So it's going to say type number is not assignable to the type that I expect likes mushrooms to be,

115
00:06:40,300 --> 00:06:41,650
which should be boolean.

116
00:06:42,430 --> 00:06:42,730
Right?

117
00:06:42,940 --> 00:06:46,180
So if I return as back to true, that's going to be just fine.

118
00:06:46,300 --> 00:06:49,960
And furthermore, TypeScript is also going to catch these errors further down the line.

119
00:06:50,170 --> 00:06:54,850
So for example, if I try to take my plumber object and take its like mushrooms property and I try to

120
00:06:54,850 --> 00:06:59,770
set that to false, that's not going to be a problem because TypeScript says you told me likes mushrooms

121
00:06:59,770 --> 00:07:02,440
is going to be a boolean and properties can change in JavaScript.

122
00:07:02,560 --> 00:07:03,640
So that's totally fine.

123
00:07:03,640 --> 00:07:08,740
I'm going to permit that operation in comparison, if I try to change this something like five once

124
00:07:08,740 --> 00:07:13,870
again, same error, it's going to say, Hey, you can't assign that type of number that's not assignable

125
00:07:13,870 --> 00:07:14,830
to a type of boolean.

126
00:07:14,830 --> 00:07:19,740
Because you told me in the declaration and in your initial object values that that's going to be a boom

127
00:07:19,870 --> 00:07:23,650
and that's going to really help you identify these potential errors, which are really easy to skip

128
00:07:23,650 --> 00:07:25,270
as a developer down the line.

129
00:07:25,450 --> 00:07:25,780
All right.

130
00:07:26,080 --> 00:07:28,930
That's how we declare object type declarations in TypeScript.

131
00:07:29,110 --> 00:07:30,670
And I will see you in a next lesson.
