WEBVTT
1
00:00:00.570 --> 00:00:01.230
All right.

2
00:00:01.230 --> 00:00:06.900
So on the left hand side, I've opened up my job listings component, and on the right hand side, I've

3
00:00:06.900 --> 00:00:10.290
opened up its corresponding test suite in job listings.

4
00:00:10.590 --> 00:00:11.370
Test that?

5
00:00:11.370 --> 00:00:11.670
Yes.

6
00:00:12.150 --> 00:00:17.880
Now, as a reminder, what we're doing in this component for our jobs is we're using the on mounted

7
00:00:17.880 --> 00:00:18.750
lifecycle hook.

8
00:00:19.080 --> 00:00:25.050
The way it now works in our composition API is that every lifecycle hook has a corresponding function

9
00:00:25.260 --> 00:00:28.770
that we import from view and we use it in our setup method.

10
00:00:29.040 --> 00:00:34.950
So here we're importing on mounted from view and that lifecycle hook runs when the component mounts

11
00:00:35.160 --> 00:00:37.890
or in other words, when it's placed in the DOM in our browser.

12
00:00:38.190 --> 00:00:44.400
And what we provide to on mounted is a function to run at that moment of execution, at that moment

13
00:00:44.550 --> 00:00:45.960
in the components exists.

14
00:00:46.290 --> 00:00:50.700
So here what we're doing is we're providing that use fetch jobs dispatch function right here.

15
00:00:50.910 --> 00:00:56.730
And that is the one that dispatches the action to the View Store, which starts the process of running

16
00:00:56.730 --> 00:01:02.760
that asynchronous action, making the asynchronous API request, getting the jobs, saving them to the

17
00:01:02.760 --> 00:01:07.650
view store, which itself triggers, as we know, a whole bunch of things to run with getters and so

18
00:01:07.650 --> 00:01:07.770
on.

19
00:01:07.780 --> 00:01:12.990
It's a really long, complicated chain, but it all kicks off right here with this on mounted lifecycle

20
00:01:12.990 --> 00:01:13.200
look.

21
00:01:13.530 --> 00:01:17.820
And as it turns out, we can actually use the exact same lifecycle hook multiple times.

22
00:01:18.120 --> 00:01:23.340
So if we want, for example, two or three distinct independent functions to run, when the component

23
00:01:23.340 --> 00:01:30.420
mounts, all we have to do in our setup method is invoke or execute on mounted another time and pass

24
00:01:30.420 --> 00:01:31.800
in exactly what we want to do.

25
00:01:32.070 --> 00:01:36.420
So obviously what we want to do here is run on mounted one more time and then pass it.

26
00:01:36.420 --> 00:01:41.970
This function, this composable function, which is going to talk to the store and initiate the asynchronous

27
00:01:41.970 --> 00:01:43.890
action that's going to fetch our degrees.

28
00:01:44.640 --> 00:01:47.850
And once that happens, everything will roll through its usual chain.

29
00:01:48.030 --> 00:01:52.560
And then, of course, that should allow us to get the array of unique degrees from our getters, which

30
00:01:52.560 --> 00:01:55.710
should allow them to render properly on the left hand side a app.

31
00:01:55.950 --> 00:02:00.360
This is sort of where it all comes together, because we can't render any checkboxes until we have any

32
00:02:00.360 --> 00:02:05.130
degrees and we can't get those unique degrees until we get the API response and we can't get the API

33
00:02:05.130 --> 00:02:10.380
response until we kick off the action and we can't kick off the action until we say to do so when the

34
00:02:10.380 --> 00:02:11.760
job listings component mounts.

35
00:02:12.090 --> 00:02:13.950
So hopefully that chain of events makes sense.

36
00:02:13.950 --> 00:02:17.130
The only thing that we need to do now is to write a test to capture this logic.

37
00:02:17.310 --> 00:02:20.160
So we follow test driven development before we implement the solution.

38
00:02:20.490 --> 00:02:25.440
So right here in job listings, that test that's right here, I'm going to start by importing my new

39
00:02:25.440 --> 00:02:27.360
composable, which is called use.

40
00:02:27.390 --> 00:02:28.890
Fetch Degrees of dispatch.

41
00:02:29.130 --> 00:02:35.130
We actually do not need to provide any new type Typekit marking because we're never going to actually

42
00:02:35.250 --> 00:02:38.730
set the return value for this just mock function.

43
00:02:38.730 --> 00:02:40.470
It's totally fine being the default.

44
00:02:40.860 --> 00:02:46.110
So if I scroll down for my tests for job listings, there's luckily already a section here called When

45
00:02:46.110 --> 00:02:49.260
a Component Mounts and this is a good place to put our new test.

46
00:02:49.620 --> 00:02:52.770
So right here I'm just going to copy our existing test and modify it.

47
00:02:53.070 --> 00:02:56.100
So copy this test and here paste it down below.

48
00:02:56.100 --> 00:02:57.870
And now we'll just update all the words.

49
00:02:58.140 --> 00:03:01.590
So makes a call to fetch degrees from API.

50
00:03:01.740 --> 00:03:02.250
Perfect.

51
00:03:02.550 --> 00:03:07.650
And then you can see here we're simply marking out the return values of some of these composable that

52
00:03:07.650 --> 00:03:12.270
we need right here, that need to execute properly, to create the right values, to provide.

53
00:03:12.270 --> 00:03:14.850
And in the set methods return object.

54
00:03:15.030 --> 00:03:19.590
We don't really care about this, but what it basically does is sets up filter jobs, sets up the current

55
00:03:19.590 --> 00:03:22.350
page, the previous page, next page, so on and so forth.

56
00:03:22.560 --> 00:03:25.320
Then we actually shall amount the job listings component.

57
00:03:25.320 --> 00:03:26.280
That is what we care about.

58
00:03:26.460 --> 00:03:32.160
And then after the component mounts, we verify that a certain gest mark function has been invoked.

59
00:03:32.460 --> 00:03:36.060
So here, instead of verifying that use fetch jobs dispatch has been invoked.

60
00:03:36.270 --> 00:03:37.950
I want to test that.

61
00:03:37.950 --> 00:03:39.230
Use fetch degrees.

62
00:03:39.240 --> 00:03:45.000
Dispatch has been invoked and in theory, when Vue runs and mounts, whatever function we pass to the

63
00:03:45.000 --> 00:03:48.240
on mounted lifecycle hook, it should run for us automatically.

64
00:03:48.390 --> 00:03:52.830
So this is verifying that we have that lifecycle hook logic correctly implemented.

65
00:03:53.220 --> 00:03:54.210
So I'm going to save this.

66
00:03:55.300 --> 00:03:56.230
Let's let it run.

67
00:03:57.500 --> 00:03:58.470
It will, of course, fail.

68
00:03:58.490 --> 00:04:01.170
It says, Hey, I expected at least one call.

69
00:04:01.190 --> 00:04:06.140
I'm not seeing any calls, which means there's nothing that's actually invoking use fetch degrees dispatch.

70
00:04:06.350 --> 00:04:08.540
Totally fine, because we're not doing anything here.

71
00:04:08.810 --> 00:04:10.370
So let's make that now a reality.

72
00:04:10.580 --> 00:04:13.010
We're going to start by importing that composable function.

73
00:04:13.280 --> 00:04:16.190
So right here we are already importing from our composable.

74
00:04:16.310 --> 00:04:16.480
Yes.

75
00:04:16.520 --> 00:04:16.850
File.

76
00:04:17.060 --> 00:04:22.460
So I'm going to add use fetch degrees dispatched right here and then right here in our setup method,

77
00:04:22.460 --> 00:04:24.830
I'm going to use our on mounted function.

78
00:04:24.830 --> 00:04:30.980
This is imported from view and we can invoke it as many times as we want for however many operations

79
00:04:30.980 --> 00:04:36.890
we want to run at this moment in the components execution, in this lifecycle, right at this point

80
00:04:36.890 --> 00:04:42.620
of execution, when the component has been mounted, we're asking Vue to invoke the use fetch degrees

81
00:04:42.620 --> 00:04:47.690
dispatch that will run the composable function to trigger the asynchronous action to make the request

82
00:04:47.690 --> 00:04:48.350
for degrees.

83
00:04:48.500 --> 00:04:53.690
And then everything, of course, happens after we receive that statement to the View Store, our getters

84
00:04:53.690 --> 00:04:55.490
run, our screen updates, etc..

85
00:04:55.850 --> 00:04:56.120
All right.

86
00:04:56.120 --> 00:04:59.120
So we can see now that everything is passing for this component.

87
00:04:59.930 --> 00:05:01.100
So things are looking pretty good.

88
00:05:01.280 --> 00:05:05.840
And in the very next lesson we can try out our whole feature in the browser.

89
00:05:05.840 --> 00:05:08.000
So pretty exciting and I'll see you in the next lesson.
