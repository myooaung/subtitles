WEBVTT
1
00:00:00.550 --> 00:00:01.570
All right.

2
00:00:01.570 --> 00:00:04.220
So that marks the end of yet another section.

3
00:00:04.240 --> 00:00:07.510
So let's do a quick review of everything that we've learned.

4
00:00:07.870 --> 00:00:13.360
In this section, we started working with the View Test Utils library, which allows us to mount and

5
00:00:13.360 --> 00:00:16.150
interact with view components outside the browser.

6
00:00:16.390 --> 00:00:20.500
So we saw how we use this in combination with the Gest Testing Library.

7
00:00:20.620 --> 00:00:26.860
With Gest, we write our actual assertions and with view test utils, we mount and customize our view

8
00:00:26.860 --> 00:00:27.430
components.

9
00:00:27.670 --> 00:00:29.830
So this is specific to testing view.

10
00:00:29.920 --> 00:00:36.250
While Gest is a general JavaScript testing library, we saw a new matcher called to match which allows

11
00:00:36.250 --> 00:00:40.870
us to check for text or even regular expressions within another piece of text.

12
00:00:41.170 --> 00:00:46.570
We also introduced some helpful methods on the wrapper object that the view test utils library gives

13
00:00:46.570 --> 00:00:52.990
us, such as the channel method to see the raw HTML of the component and the text method to see the

14
00:00:52.990 --> 00:00:55.780
text that the component displays on the screen.

15
00:00:56.110 --> 00:01:00.280
We also saw how we could customize the data in our Mountain View component.

16
00:01:00.280 --> 00:01:06.010
In our test, we can either provide the second argument to the Mount function, where we customize the

17
00:01:06.010 --> 00:01:08.530
data method and the object that it returns.

18
00:01:08.530 --> 00:01:13.750
We can set whatever properties and whatever values we want there, or alternatively, we can use the

19
00:01:13.750 --> 00:01:18.310
set data method on the wrapper object after we have mounted that component.

20
00:01:18.640 --> 00:01:25.870
Now in regards to set data, that was an example of a test where we needed to use the S6 async await

21
00:01:25.870 --> 00:01:31.270
syntax because we had certain operations that take time to complete and we needed to wait for them to

22
00:01:31.270 --> 00:01:37.600
complete before we could actually run our just assertion the operation otherwise would not have completed

23
00:01:37.600 --> 00:01:41.890
in time for our assertion and we would have gotten a failure incorrectly.

24
00:01:41.890 --> 00:01:42.160
Right.

25
00:01:42.820 --> 00:01:48.550
And more importantly than all of that specific technical stuff, we also had higher level, almost philosophical

26
00:01:48.550 --> 00:01:49.900
discussions on testing.

27
00:01:50.110 --> 00:01:55.480
And the key takeaway that I'd like for you to have is that we want our tests to mirror the user's interaction

28
00:01:55.480 --> 00:01:56.500
with the component.

29
00:01:56.710 --> 00:02:02.350
As such, we'd like to generally avoid artificial changes to the component, such as calling the set

30
00:02:02.350 --> 00:02:03.070
data method.

31
00:02:03.280 --> 00:02:07.510
Now, I'm not saying that you should never use this and that, you know, under no scenario should you

32
00:02:07.510 --> 00:02:10.420
use this, because obviously these methods are available.

33
00:02:10.510 --> 00:02:14.530
And I do want to teach you as much a view and view test utils as we can.

34
00:02:14.740 --> 00:02:19.090
But I also want to just give you the general principles on what makes a good test.

35
00:02:19.090 --> 00:02:25.450
And whenever we interact with our components in a way that is not typical of how the user will interact,

36
00:02:25.570 --> 00:02:27.370
we're really not testing the real world.

37
00:02:27.430 --> 00:02:31.660
We're testing our own specific developer world instead, right?

38
00:02:31.840 --> 00:02:34.600
So we want to not trigger artificial changes.

39
00:02:34.780 --> 00:02:36.190
We want to keep the test simple.

40
00:02:36.280 --> 00:02:41.950
Ideally use TDD because the ultimate goal is to decouple the tests from our implementation.

41
00:02:41.950 --> 00:02:47.890
We want to almost imagine as if you doesn't exist and we're really just want to think if I render this

42
00:02:47.890 --> 00:02:51.130
component and if I mount this component, what is its responsibility?

43
00:02:51.130 --> 00:02:52.240
What should it be doing?

44
00:02:52.240 --> 00:02:53.260
What is its behavior?

45
00:02:53.410 --> 00:02:58.810
We're testing simple inputs and outputs where input is our instantiated component and our output is

46
00:02:58.810 --> 00:03:00.850
something that it's supposed to produce for us.

47
00:03:00.850 --> 00:03:02.740
So we want to test behavior.

48
00:03:02.860 --> 00:03:08.320
We don't want to test implementation because when we test implementation, our tests become very closely

49
00:03:08.320 --> 00:03:09.970
coupled to our actual code.

50
00:03:10.090 --> 00:03:14.290
So when our code changes, our tests will break because they're connected.

51
00:03:14.290 --> 00:03:22.450
Ideally, your tests should be able to stay stable and durable and maintain that that feeling that you

52
00:03:22.450 --> 00:03:26.170
are correctly testing something, even if you decide to change your implementation.

53
00:03:26.170 --> 00:03:31.570
So if your implementation changes five times but your test still pass, that's a good sign that your

54
00:03:31.570 --> 00:03:36.790
tests are checking the general behavior of what the piece of logic is supposed to do, and all of your

55
00:03:36.790 --> 00:03:42.820
changes as far as how you implement that behavior are up to you and are more separate from the tests.

56
00:03:43.030 --> 00:03:48.310
Again, that is easier said than done, but we introduced that principle and saw a variety of tests

57
00:03:48.310 --> 00:03:50.830
and discussed why some were better than others.

58
00:03:51.040 --> 00:03:51.370
All right.

59
00:03:51.520 --> 00:03:53.320
That's all there is to cover in this lesson.

60
00:03:53.320 --> 00:03:55.120
So I will see you in the next section.
