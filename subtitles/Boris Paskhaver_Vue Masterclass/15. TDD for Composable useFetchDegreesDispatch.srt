1
00:00:00,830 --> 00:00:01,460
Okay.

2
00:00:01,460 --> 00:00:06,200
So I think now is a good time for us to see how things are looking in the browser.

3
00:00:06,530 --> 00:00:11,840
But before we get there, there's one thing I forgot to do in the previous lesson in our job filter

4
00:00:11,850 --> 00:00:12,890
sidebar component.

5
00:00:13,130 --> 00:00:19,250
You'll notice on line 19 we have this accordion child component being rendered, and this was intended

6
00:00:19,250 --> 00:00:22,760
to be sort of the placeholder for the eventual checkbox group.

7
00:00:22,910 --> 00:00:27,560
It's basically just an accordion component that doesn't have anything inside it and it has a header

8
00:00:27,560 --> 00:00:28,220
of degree.

9
00:00:28,490 --> 00:00:32,990
So we've replaced this visual logic with our actual checkbox group right here.

10
00:00:33,290 --> 00:00:37,610
So we no longer really need this accordion, so I can go ahead and remove it right here.

11
00:00:38,420 --> 00:00:43,610
And if I scroll down, let me see if accordion is being used at all elsewhere in the component and it

12
00:00:43,610 --> 00:00:44,540
doesn't look like it is.

13
00:00:44,840 --> 00:00:48,110
You can see right here, if I hover my mouse, it says type.

14
00:00:48,530 --> 00:00:51,020
The accordion component has been registered but not used.

15
00:00:51,290 --> 00:00:56,060
So we can go ahead and remove accordion right here and remove accordion from the imports as well.

16
00:00:56,840 --> 00:00:57,380
All right.

17
00:00:57,530 --> 00:01:02,000
So we are still using accordions, but they are nested within the checkbox group component.

18
00:01:02,000 --> 00:01:02,690
Component.

19
00:01:02,960 --> 00:01:07,160
If I go in here, you can see here is where we're using accordion, so we'll keep it in here, but we

20
00:01:07,160 --> 00:01:10,010
no longer need it directly in job filter's sidebar.

21
00:01:10,400 --> 00:01:12,860
Okay, so with that, let's check in on our browser.

22
00:01:12,860 --> 00:01:16,940
So I'm going to navigate to Chrome and refresh the page just to be safe.

23
00:01:17,780 --> 00:01:18,710
And there we have that.

24
00:01:18,710 --> 00:01:20,660
We have our job types, we have our organizations.

25
00:01:20,900 --> 00:01:23,990
Let's see what happens when we unfold the accordion.

26
00:01:23,990 --> 00:01:24,650
Four degrees.

27
00:01:25,190 --> 00:01:25,700
All right.

28
00:01:25,700 --> 00:01:28,310
It doesn't look like we have any checkboxes.

29
00:01:28,310 --> 00:01:29,330
So what is going on here?

30
00:01:29,630 --> 00:01:32,720
Well, the good news is the page isn't crashing and we don't have any errors.

31
00:01:32,990 --> 00:01:39,200
So what's actually going on here is that we've never actually initiated the API request to fetch our

32
00:01:39,200 --> 00:01:43,930
degrees themselves and thus there are no unique degrees to render checkboxes for.

33
00:01:44,360 --> 00:01:47,390
So as a reminder, if I go back to my code base.

34
00:01:49,050 --> 00:01:51,720
We have an action in our actions to follow.

35
00:01:52,410 --> 00:01:53,160
It's right here.

36
00:01:53,160 --> 00:01:59,100
That action is called fetch degrees, and that is the asynchronous action that uses the Get Degrees

37
00:01:59,100 --> 00:02:04,260
API function call to get that array of degrees from an end point and then commit the receive degrees

38
00:02:04,260 --> 00:02:06,570
mutation to save it to the View Store.

39
00:02:06,840 --> 00:02:09,990
But there's nowhere where we're actually initiating this action.

40
00:02:10,200 --> 00:02:14,130
And remember, the technical word for initiating an action is dispatching it.

41
00:02:14,490 --> 00:02:18,480
So in other words, there's nowhere where we're dispatching the fetch degrees action, so we're never

42
00:02:18,480 --> 00:02:19,830
kicking off the API request.

43
00:02:20,220 --> 00:02:26,100
So we can perhaps use the Fetch Jobs Act action as an inspiration for what we want to do with fetch

44
00:02:26,100 --> 00:02:26,580
degrees.

45
00:02:26,910 --> 00:02:32,610
So the way that works as a reminder is if I open up my job listings, component listings with a plural

46
00:02:32,640 --> 00:02:38,700
s, what we're doing in this component is we're using a composable function called use, fetch jobs

47
00:02:38,700 --> 00:02:43,800
dispatch, and we're feeding it into our on mounted IT lifecycle hub in our set up method right here

48
00:02:43,800 --> 00:02:44,760
in line 52.

49
00:02:45,150 --> 00:02:49,800
If I go further into this actual composable function, what does this composable function do?

50
00:02:50,070 --> 00:02:55,260
It talks to the bookstore and it dispatches the exact action that it wants to do, which is fetch jobs.

51
00:02:55,500 --> 00:02:58,230
This is the exact same name as we have in our actions.

52
00:02:58,230 --> 00:02:59,850
File this action right here.

53
00:03:00,090 --> 00:03:04,020
So that's the composable function that kicks off the actual asynchronous actions.

54
00:03:04,030 --> 00:03:04,770
Fetch the jobs.

55
00:03:05,160 --> 00:03:09,420
So similarly, what we're going to need to do is to come up with a composable function, and its whole

56
00:03:09,420 --> 00:03:16,410
responsibility will be to actually kick off the or the dispatch of the asynchronous action, which will

57
00:03:16,410 --> 00:03:20,310
kick off the entire cycle of making the API request and saving the data.

58
00:03:20,640 --> 00:03:21,000
All right.

59
00:03:21,000 --> 00:03:26,430
So I'm once again going to open this file and I'm also going to open up my composable test that that's

60
00:03:26,520 --> 00:03:26,760
out.

61
00:03:27,900 --> 00:03:34,110
And luckily, we're already going to have tests for the use fetch jobs dispatch right here.

62
00:03:34,710 --> 00:03:37,350
And we can basically make a new test that's going to be very similar.

63
00:03:37,680 --> 00:03:40,380
So right here, I'm going to describe the new composable function.

64
00:03:40,380 --> 00:03:45,780
I'd like to define and let's call it use fetch degrees dispatch.

65
00:03:46,790 --> 00:03:47,150
All right.

66
00:03:47,150 --> 00:03:51,380
So it's going to dispatch an action to the U.S. store and that action is going to fetch degrees.

67
00:03:51,800 --> 00:03:52,070
All right.

68
00:03:52,070 --> 00:03:55,160
And what is this composable responsibility?

69
00:03:55,520 --> 00:03:59,960
It sends call to fetch degrees from API.

70
00:04:01,400 --> 00:04:01,640
All right.

71
00:04:01,640 --> 00:04:05,810
Our test is going to be very similar to the one above, because what we're basically testing here is

72
00:04:05,810 --> 00:04:09,890
that the dispatch method has been invoked on our store with the correct argument.

73
00:04:09,890 --> 00:04:14,660
And that argument, of course, is a string representing the action that we want to start running.

74
00:04:14,660 --> 00:04:14,990
Right.

75
00:04:15,260 --> 00:04:20,060
So right here, I'm going to define a dispatch, and that is simply going to be a just mock function

76
00:04:20,060 --> 00:04:22,760
that can track if it's been invoked and with what arguments.

77
00:04:23,150 --> 00:04:27,830
Then we have our use store mark to represent the return value of use store.

78
00:04:28,040 --> 00:04:33,020
We're going to mock return here so that we replace the default implementation with our own.

79
00:04:33,320 --> 00:04:36,590
And all I want to do here is have an object with a dispatch method.

80
00:04:36,860 --> 00:04:41,780
So right here on line 39, for example, in the previous test, we're returning an object with a dispatch

81
00:04:41,780 --> 00:04:44,960
method, and that dispatch method is a just mock function.

82
00:04:45,110 --> 00:04:50,270
So when line 40 runs, the test will run through that logic, and then the just mock function will understand

83
00:04:50,270 --> 00:04:53,240
that it has been invoked once with an argument of fetch jobs.

84
00:04:53,510 --> 00:04:55,080
So we're going to do something very similar here.

85
00:04:55,100 --> 00:04:57,320
We're going to invoke our new composable function.

86
00:04:57,500 --> 00:05:02,240
It doesn't yet exist, but we can assume it's going to be called something like used fetch degrees dispatch.

87
00:05:02,540 --> 00:05:08,150
So if I scroll up all the way to the top of this file, we can import that non-existent function right

88
00:05:08,150 --> 00:05:08,450
here.

89
00:05:08,780 --> 00:05:11,030
Use fetch degrees at dispatch.

90
00:05:11,510 --> 00:05:11,990
All right.

91
00:05:11,990 --> 00:05:16,400
And then down below, just like in the test above, I'm going to invoke it.

92
00:05:17,000 --> 00:05:19,610
So use fetch degrees of dispatch.

93
00:05:19,790 --> 00:05:23,060
And just by invoking it once, it should run through the eventual logic.

94
00:05:23,240 --> 00:05:28,790
And that eventual logic should have a communication with this dispatch mock function right here.

95
00:05:29,090 --> 00:05:34,850
So after my new composable is done running, what I expect is that my dispatch mock function above should

96
00:05:34,850 --> 00:05:36,140
have been invoked, number one.

97
00:05:36,320 --> 00:05:40,190
And number two, it should have been invoked with the right argument, which is the name of the action

98
00:05:40,190 --> 00:05:40,910
that I want to run.

99
00:05:41,150 --> 00:05:46,400
And with this composable, of course, the action that I want to initiate is going to be fetch degrees.

100
00:05:46,610 --> 00:05:51,320
So right here on my just mock function, I expect it to have been called with the following argument,

101
00:05:51,500 --> 00:05:53,750
and that's going to be a string of fetch degrees.

102
00:05:54,770 --> 00:05:55,160
All right.

103
00:05:55,490 --> 00:05:56,300
Save that.

104
00:05:56,630 --> 00:05:59,690
And with that, we can go ahead and create our implementation.

105
00:05:59,990 --> 00:06:06,230
So in order to dispatch this action to our UCS store, obviously we're going to need the action name

106
00:06:06,350 --> 00:06:08,450
and that is available, luckily, as a constant.

107
00:06:08,690 --> 00:06:13,160
So if I scroll up all the way to the top of the file, your notice, you'll notice here that we are

108
00:06:13,160 --> 00:06:14,540
importing Oliver constants.

109
00:06:14,540 --> 00:06:21,380
We already have a fetch degrees constant in this file because we wrote it in order to define the corresponding

110
00:06:21,380 --> 00:06:24,110
action in our actions test file right here.

111
00:06:24,470 --> 00:06:30,080
So in composable stats I'm going to import my fetch degrees constant and then down below.

112
00:06:30,290 --> 00:06:33,890
In this action section I'm going to define my new composable function.

113
00:06:34,130 --> 00:06:38,090
I'm going to call it the exact same way I called it on the right hand side.

114
00:06:38,330 --> 00:06:43,130
So my test expects it to be called use fetch degrees dispatch since that is what it is importing.

115
00:06:43,430 --> 00:06:45,800
It's going to be an arrow function that accepts no argument.

116
00:06:46,220 --> 00:06:51,980
And what I'm going to do in the body of this function is, of course, talk to my UCS store, which

117
00:06:51,980 --> 00:06:56,270
I can get access to using the use store composable function from view passing in the key.

118
00:06:56,630 --> 00:06:58,280
And so now I have a full store object.

119
00:06:58,490 --> 00:07:02,420
That store object is going to have a dispatch method, right?

120
00:07:02,420 --> 00:07:04,580
And in the real world, this is how we initiate an action.

121
00:07:04,580 --> 00:07:09,260
But in our tests, our dispatch method is now going to be replaced with a just mock function that can

122
00:07:09,260 --> 00:07:10,460
track that it has been invoked.

123
00:07:10,790 --> 00:07:16,100
And of course, I need to provide here a string representing the name of the action that I want to run.

124
00:07:16,280 --> 00:07:19,130
I want to run this action right here, fetch degrees.

125
00:07:19,370 --> 00:07:22,760
So right here, I'm going to provide the imported constant of fetch degrees.

126
00:07:23,060 --> 00:07:23,750
Save that.

127
00:07:24,590 --> 00:07:25,760
Let's let our tests run.

128
00:07:25,940 --> 00:07:27,650
And you can see everything is passing.

129
00:07:27,980 --> 00:07:28,400
All right.

130
00:07:28,400 --> 00:07:34,250
So now that we have our new composable function that initiates the action, that makes the request,

131
00:07:34,400 --> 00:07:38,450
we can then use it in our job listings component, and we're going to do that in the very next lesson.
