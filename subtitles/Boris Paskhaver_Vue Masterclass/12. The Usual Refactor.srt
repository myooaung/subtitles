1
00:00:00,330 --> 00:00:01,110
Okay.

2
00:00:01,110 --> 00:00:07,410
So as always, I think it'd be a good idea to refactor our test suite by relying on a factory function

3
00:00:07,560 --> 00:00:14,340
to generate our configuration object for the mount function that will allow us to remove some duplication

4
00:00:14,340 --> 00:00:19,770
from each test, such as this set up right here, which focuses on the stubbing of the font.

5
00:00:19,800 --> 00:00:20,580
Awesome icon.

6
00:00:20,790 --> 00:00:25,360
That is some required configuration that we really don't want each test to have to worry about.

7
00:00:25,680 --> 00:00:31,350
So here inside my first described block, I will create a new arrow function which I will call create

8
00:00:31,350 --> 00:00:31,890
config.

9
00:00:33,330 --> 00:00:39,420
I will allow my function to accept a single config parameter and I will give config a default argument

10
00:00:39,420 --> 00:00:41,550
of a empty JavaScript object.

11
00:00:41,760 --> 00:00:48,510
And then using this syntax, I will implicitly return a JavaScript object and I think we can start by

12
00:00:48,510 --> 00:00:50,940
copying this code from our very first test.

13
00:00:50,940 --> 00:00:56,130
This seems like a reasonable setup, so I'm going to paste that above and then of course I'm going to

14
00:00:56,130 --> 00:01:04,080
allow each test to customize its properties on my configuration object by structuring the config parameter

15
00:01:04,080 --> 00:01:04,890
that I pass in.

16
00:01:05,040 --> 00:01:10,470
So if any test wants to give me a custom global property or a custom props property or a custom slots

17
00:01:10,470 --> 00:01:12,000
property, it totally can.

18
00:01:12,420 --> 00:01:12,750
All right.

19
00:01:12,930 --> 00:01:13,860
So down below here.

20
00:01:15,050 --> 00:01:18,110
We can once again have a discussion in which things matter for this test.

21
00:01:18,290 --> 00:01:23,060
Do I really care about the stubbing out of awesome icon to test that the component renders the child?

22
00:01:23,240 --> 00:01:24,020
I do not.

23
00:01:24,230 --> 00:01:25,670
Do I really care about the props?

24
00:01:25,820 --> 00:01:26,510
I do not.

25
00:01:26,600 --> 00:01:31,880
What I really care about is the use of this section right here, that whatever slot I provide this component,

26
00:01:31,880 --> 00:01:34,330
it's able to render it within the accordion.

27
00:01:34,340 --> 00:01:34,660
Right.

28
00:01:34,970 --> 00:01:37,580
So what I'm going to do is come up with a compromise right here.

29
00:01:38,750 --> 00:01:41,390
I'm going to create a slots object.

30
00:01:42,050 --> 00:01:45,800
I'm going to give it this default property with our original H3 right here.

31
00:01:46,940 --> 00:01:52,820
And then I'm going to create my custom config object, which will just be my slots object above.

32
00:01:53,360 --> 00:01:57,860
And then finally, I'm going to create my wrapper and I'm going to mount my accordion.

33
00:01:58,310 --> 00:02:02,420
Invoke create config from above and pass in my custom config object.

34
00:02:02,780 --> 00:02:03,620
So what's going to happen?

35
00:02:03,620 --> 00:02:08,570
We're going to pass in an argument of slots, which means we're going to keep all of this original content.

36
00:02:08,690 --> 00:02:13,550
And then my config object destruction is going to overwrite the slots right here.

37
00:02:13,820 --> 00:02:19,430
Granted, I am overwriting it with the exact same thing as it is originally in my factory, but I'm

38
00:02:19,430 --> 00:02:20,810
totally okay with this.

39
00:02:20,900 --> 00:02:25,850
And the reason I'm okay with this is because I want the test to communicate what matters and what matters

40
00:02:25,850 --> 00:02:26,000
is.

41
00:02:26,150 --> 00:02:28,310
Here I have this content of my nested child.

42
00:02:28,460 --> 00:02:31,250
That's exactly what I'm testing for right here.

43
00:02:31,610 --> 00:02:36,230
And so I'm giving a future reader a better understanding of how this test is working.

44
00:02:36,590 --> 00:02:42,380
Okay, so with the elimination of our setup, we can remove our former assignment right here.

45
00:02:42,710 --> 00:02:43,970
Make it a little bit cleaner.

46
00:02:43,970 --> 00:02:48,500
Save that we can do something very similar down below in this test.

47
00:02:48,650 --> 00:02:53,570
I don't care about the idea of slots because the idea is I want to test that I'm falling back to a default.

48
00:02:53,840 --> 00:02:59,810
So right here I'm going to create a slots object, but this time it's simply going to be empty.

49
00:02:59,840 --> 00:03:04,020
I'm trying to communicate that the slots are irrelevant or not configured for this test.

50
00:03:04,310 --> 00:03:06,050
I'm going to create my config object.

51
00:03:06,230 --> 00:03:11,330
I'm similarly going to give it the slots property using s syntax to reference the empty object above.

52
00:03:11,600 --> 00:03:13,640
And then instead of our former code right here.

53
00:03:15,560 --> 00:03:21,850
I'm going to create a wrapper that is going to be the result of mounting my accordion and passing in

54
00:03:21,860 --> 00:03:27,230
a configuration object which I will generate using my create config function above passing in my custom

55
00:03:27,440 --> 00:03:29,720
config that I configured just for this test.

56
00:03:30,080 --> 00:03:35,000
Save this a test to become a little bit leaner, a little bit easier to read and are still communicating

57
00:03:35,000 --> 00:03:36,080
the importance of each one.

58
00:03:36,230 --> 00:03:37,910
In this one, the slots do not matter.

59
00:03:38,000 --> 00:03:43,250
In this one the slots do, and all of the other kind of redundant work like having to provide some kind

60
00:03:43,250 --> 00:03:45,350
of prop having to stop out the font.

61
00:03:45,350 --> 00:03:46,010
Awesome icon.

62
00:03:46,130 --> 00:03:47,840
I'm going to leave that up in the file.

63
00:03:48,080 --> 00:03:53,600
If a developer wants to scroll up and find out this extra information, it is helpful, but it is not

64
00:03:53,600 --> 00:03:56,990
required to understand what each individual test is doing.

65
00:03:57,350 --> 00:04:02,030
So with that, and I'm feeling pretty good about our accordion test, we and I will see in the next

66
00:04:02,030 --> 00:04:02,360
lesson.
