1
00:00:00,510 --> 00:00:01,470
All right.

2
00:00:01,470 --> 00:00:07,110
So the changes that we made to the sub nav component in the last two lessons are actually going to cause

3
00:00:07,110 --> 00:00:08,790
our sub nav tests to fail.

4
00:00:09,030 --> 00:00:13,110
But the good news is they're going to fail for what I hope is now a predictable reason.

5
00:00:13,380 --> 00:00:19,230
In our previous implementation, using the Options API, we were using the dollar sign root and dollar

6
00:00:19,230 --> 00:00:20,510
sign store properties.

7
00:00:20,520 --> 00:00:25,710
And that's exactly what we're marking out here in our sub nav, that test, that jazz file, we no longer

8
00:00:25,710 --> 00:00:30,630
have this idea of properties and that's what we're mocking out here is kind of useless.

9
00:00:30,930 --> 00:00:35,430
So what we're going to do instead to get these tests to pass again is we're going to mark out, use

10
00:00:35,430 --> 00:00:38,670
store and we're going to mark out use route in our test suite.

11
00:00:38,880 --> 00:00:44,250
And we're simply going to replace this store object and this route object with the previous store and

12
00:00:44,250 --> 00:00:48,990
route objects that we were still using but that we were providing to the dollar sign route and store

13
00:00:49,230 --> 00:00:51,540
property in our mock configuration.

14
00:00:51,750 --> 00:00:58,530
So again, same idea as far as our tests, but where we're actually intercepting those calls is changing.

15
00:00:58,710 --> 00:01:03,690
We're now going to intercept, use store and use route instead of intercepting dollar sign store and

16
00:01:03,690 --> 00:01:04,470
dollar sign route.

17
00:01:04,800 --> 00:01:07,920
So right here I'm going to run, NPM, run, test, call and watch.

18
00:01:09,570 --> 00:01:12,120
And I should have no changes since my last get commit.

19
00:01:12,120 --> 00:01:16,980
So just to show you this failure, I'm just going to add a line break in my test suite and save and

20
00:01:16,980 --> 00:01:18,690
that's going to force the rerunning of seven now.

21
00:01:18,810 --> 00:01:24,330
So you can see where we have one failing test suite and two tests and in fact, everything we have in

22
00:01:24,330 --> 00:01:24,660
this sub.

23
00:01:24,660 --> 00:01:26,970
Now, that test file is just to test.

24
00:01:27,330 --> 00:01:27,630
All right.

25
00:01:27,630 --> 00:01:28,890
So how do we fix this problem?

26
00:01:29,130 --> 00:01:31,020
Well, let's begin from the very top of the file.

27
00:01:31,050 --> 00:01:34,770
We know that we're going to need to import the functions that we want to mark out with.

28
00:01:34,770 --> 00:01:37,890
Just so let me, in fact, copy them directly from the component.

29
00:01:37,900 --> 00:01:42,410
So I'm going to copy these two lines right here, 19 and 20 in our test file.

30
00:01:42,430 --> 00:01:47,100
We're going to import, use, store and use route, and that's going to give us the names so that later

31
00:01:47,100 --> 00:01:50,100
on we can use them and set their mock return values.

32
00:01:50,280 --> 00:01:53,760
But first up, I need to tell just to mark these libraries in general.

33
00:01:54,060 --> 00:01:56,250
So down below, I'm going to do just that Mark.

34
00:01:56,550 --> 00:02:02,730
Let's mark out our full view library and then let's also invoke just Mark on the line below and mark

35
00:02:02,730 --> 00:02:04,170
out our view router library.

36
00:02:04,950 --> 00:02:09,570
So now once again use store and use root are no longer their original implementations.

37
00:02:09,780 --> 00:02:15,840
They are now just mark functions, but by default just mark functions that return undefined when invoked.

38
00:02:15,960 --> 00:02:17,730
And we want them to return something different.

39
00:02:17,910 --> 00:02:22,080
We want them to return objects that are going to be good enough to fulfill these properties right here.

40
00:02:22,320 --> 00:02:27,360
So our store object must have a getters property with filter jobs and our root object must have a name

41
00:02:27,360 --> 00:02:28,890
property and that should be good enough.

42
00:02:29,070 --> 00:02:32,040
In fact, that's very similar to what we previously did in our tests.

43
00:02:32,280 --> 00:02:32,520
Right?

44
00:02:32,520 --> 00:02:34,350
We still have the idea of a store right here.

45
00:02:34,470 --> 00:02:37,860
We're just going to need to replace and intercept our calls the first step.

46
00:02:37,860 --> 00:02:40,080
Let's start with our create config function right here.

47
00:02:40,200 --> 00:02:45,270
We're no longer going to be using this mark section since we're no longer marking out dollar sign root

48
00:02:45,270 --> 00:02:46,290
or dollar sign store.

49
00:02:46,560 --> 00:02:49,860
So let's remove this entire section of Mark's right here.

50
00:02:50,400 --> 00:02:55,080
So all that our config factory functions going to do now is basically just about ask them, which is

51
00:02:55,080 --> 00:02:58,650
okay, so that removes the need for any parameters right here.

52
00:02:58,830 --> 00:03:00,600
So I'm going to remove them completely.

53
00:03:01,320 --> 00:03:05,310
This was our former implementation and we no longer need this.

54
00:03:05,310 --> 00:03:05,610
All right.

55
00:03:05,610 --> 00:03:08,400
So create config is just going to return a basic configuration object.

56
00:03:08,880 --> 00:03:13,890
All right, so down below here, we're now going to need to intercept, use root and use store, right?

57
00:03:14,130 --> 00:03:19,230
So what we're going to need here is to reference use root, which is a mark just function.

58
00:03:19,380 --> 00:03:21,480
And I'm going to invoke mark return value.

59
00:03:22,750 --> 00:03:27,790
And here I'm going to provide in the parentheses, in the actual invocation, what I want to use root

60
00:03:27,790 --> 00:03:28,990
to return when invoked.

61
00:03:29,350 --> 00:03:33,340
Well, we can see right here that all we need is a basic object with a name property.

62
00:03:33,610 --> 00:03:35,620
So this is going to be an object with a name property.

63
00:03:36,010 --> 00:03:40,900
And as you may recall, this test is specifically relying on having a root name of job results.

64
00:03:41,170 --> 00:03:42,610
So I'm just going to copy that from below.

65
00:03:42,640 --> 00:03:43,360
Job results.

66
00:03:44,440 --> 00:03:47,840
And thus we can remove the need for this root name constant that was floating around.

67
00:03:48,670 --> 00:03:49,060
All right.

68
00:03:49,180 --> 00:03:51,550
So here is our mock view store.

69
00:03:51,670 --> 00:03:56,020
The good news is we can still keep it right, because this is still the store we need.

70
00:03:56,020 --> 00:03:58,970
We need a store with a getters property, with filter jobs.

71
00:03:58,990 --> 00:04:01,300
And that will work for this implementation right here.

72
00:04:01,540 --> 00:04:08,260
The only thing we need to change is we need to provide this mock store as our return value for the use

73
00:04:08,260 --> 00:04:09,010
store function.

74
00:04:09,190 --> 00:04:13,780
That way, if we return this object right here, then the rest of our setup method will work.

75
00:04:14,050 --> 00:04:19,750
So instead of using store here, I'm simply going to write you store, which is a mock function.

76
00:04:19,750 --> 00:04:21,520
Now, it's not the original implementation.

77
00:04:21,700 --> 00:04:26,110
And I want to invoke mock return value on this to set the return value when it's invoked.

78
00:04:26,350 --> 00:04:31,780
And so when my test uses use store in the setup method, I'm going to return our mock store right here.

79
00:04:31,990 --> 00:04:34,270
Still no need to use the real view store.

80
00:04:34,360 --> 00:04:37,420
Still the exact same mock object we set up earlier.

81
00:04:37,570 --> 00:04:42,550
We're just configuring it to be returned from a used store instead of being available via this the dollar

82
00:04:42,550 --> 00:04:45,250
sign store right here with create config.

83
00:04:45,280 --> 00:04:47,650
That factory function no longer takes any arguments.

84
00:04:47,860 --> 00:04:49,930
So we can simply remove the arguments right here.

85
00:04:50,650 --> 00:04:53,260
And that's going to be the refactor for our first test.

86
00:04:53,740 --> 00:04:54,100
All right.

87
00:04:54,310 --> 00:04:56,400
So let's move on down to our second test.

88
00:04:56,410 --> 00:04:57,640
It's going to be very similar.

89
00:04:57,940 --> 00:05:01,540
So right here, we have a route name of home and we need that on a route to object.

90
00:05:01,780 --> 00:05:05,970
So now we're going to get the root object by our setup method invoking use route.

91
00:05:06,220 --> 00:05:10,480
We're going to intercept that user out cold and we're going to make sure that when it's invoked, it's

92
00:05:10,480 --> 00:05:13,240
going to return a value that's going to be a route object.

93
00:05:13,240 --> 00:05:15,790
What does a route object need to have a name property?

94
00:05:15,970 --> 00:05:18,490
And what I what do I want it to be equal to for this test?

95
00:05:18,610 --> 00:05:23,230
We can see below this test was using a name value of home that takes care of that.

96
00:05:24,390 --> 00:05:24,780
All right.

97
00:05:25,080 --> 00:05:28,890
Now, in this case, if I save this, we can also make sure to get rid of config.

98
00:05:30,350 --> 00:05:33,690
This is going to be enough to actually get our code to work.

99
00:05:33,860 --> 00:05:37,490
But just to be safe, because I know that we are going to be using story getters here.

100
00:05:37,580 --> 00:05:42,500
I'm just going to copy this code from above just to make sure we remind people that we are marking out

101
00:05:42,500 --> 00:05:43,010
the store.

102
00:05:43,280 --> 00:05:46,820
Because I guess the way this is going to work is it's still going to work if you store as the default

103
00:05:46,820 --> 00:05:47,510
implementation.

104
00:05:47,720 --> 00:05:49,450
But let me just set up your store anyway.

105
00:05:49,470 --> 00:05:50,420
Make sure it has getters.

106
00:05:50,600 --> 00:05:51,980
Filter jobs don't really matter.

107
00:05:51,980 --> 00:05:53,330
So let me just make it an empty array.

108
00:05:54,590 --> 00:05:56,360
Save that and everything should still pass.

109
00:05:56,510 --> 00:05:59,870
All right, so now we got our test suite to pass once again.

110
00:06:00,050 --> 00:06:04,490
Once again, we're simply intercepting, intercepting something and replacing it with something else.

111
00:06:04,520 --> 00:06:05,450
That's all a mark is.

112
00:06:05,690 --> 00:06:10,130
However, we're now replacing these two function calls that our tests are using instead of using the

113
00:06:10,130 --> 00:06:14,720
original properties that Vue router and Vue made available on every component.

114
00:06:15,110 --> 00:06:15,410
All right.

115
00:06:15,800 --> 00:06:19,340
So with that, we are in much better shape and we can move on to the next lesson.
