WEBVTT
1
00:00:00.620 --> 00:00:01.360
Okay.

2
00:00:01.370 --> 00:00:07.820
So the only thing left to do in our job filter sidebar job types component to get it to use the composition

3
00:00:07.820 --> 00:00:10.760
API fully is to replace our former methods.

4
00:00:10.940 --> 00:00:12.830
We have two methods available here.

5
00:00:13.130 --> 00:00:18.320
The first one is add selected job types which we get automatically from our mapped mutations helper.

6
00:00:18.470 --> 00:00:24.950
So this is actually of course the name of a mutation and it creates an automatic method on this component

7
00:00:24.950 --> 00:00:30.260
that commits that mutation, that triggers that, that thing to run in the view store.

8
00:00:30.530 --> 00:00:36.020
And then we have our select job type method which runs the actual mutation right here on line 50.

9
00:00:36.170 --> 00:00:39.380
And then it also navigates the user using the view router.

10
00:00:39.590 --> 00:00:46.070
As a reminder, we invoke select job type right here whenever we react to a change event on our checkbox

11
00:00:46.070 --> 00:00:46.460
input.

12
00:00:46.820 --> 00:00:53.630
So as always, let's comment this out and we know that we have to replicate all of this logic within

13
00:00:53.630 --> 00:00:54.650
our setup method.

14
00:00:55.070 --> 00:01:00.950
So the first thing to remember is that map mutations is a helper method that does work for us that we're

15
00:01:00.950 --> 00:01:02.270
able to do manually.

16
00:01:02.450 --> 00:01:09.980
Remember that we have access in our old options API to the store on every component via this DOT dollars

17
00:01:09.980 --> 00:01:10.490
on store.

18
00:01:10.850 --> 00:01:17.030
But more importantly than that, on that store object, our view store, there is a method called commit

19
00:01:17.330 --> 00:01:22.280
and commit is the method to which we pass a mutation name and that is the thing that actually runs the

20
00:01:22.280 --> 00:01:22.880
mutation.

21
00:01:23.270 --> 00:01:27.620
All that this syntax does for us is wires up this logic automatically for us.

22
00:01:27.860 --> 00:01:33.530
But as long as we have access to a store object, we can still call, commit, still provide the mutation,

23
00:01:33.530 --> 00:01:38.000
and still provide any additional arguments to that mutation with this old manual approach.

24
00:01:38.210 --> 00:01:42.920
And of course we can get the store by using our use store helper function.

25
00:01:43.190 --> 00:01:44.840
So right here I'm going to import.

26
00:01:45.980 --> 00:01:46.700
You store.

27
00:01:47.510 --> 00:01:50.800
And that, of course, is going to come from view X.

28
00:01:51.520 --> 00:01:57.770
So right here at the very top of this setup method, I'm going to declare a concept called store, and

29
00:01:57.770 --> 00:01:59.570
that's going to be the return value of your store.

30
00:01:59.930 --> 00:02:04.430
And later on, we may find opportunities to move some of this logic to a composable function.

31
00:02:04.580 --> 00:02:08.060
But for now, let's keep everything in here and go with the simplest approach.

32
00:02:08.180 --> 00:02:08.600
All right.

33
00:02:08.990 --> 00:02:12.470
So that's going to be something we need in order to run this mutation eventually.

34
00:02:12.650 --> 00:02:17.120
We also have this line right here, 54, which is calling the push method on the router.

35
00:02:17.390 --> 00:02:23.230
Well, we know that we can also access a router using the use router function from your router.

36
00:02:23.240 --> 00:02:30.020
It's going to give us that that object as the return value of a function.

37
00:02:30.230 --> 00:02:33.110
So once again, we're going to use helper functions as we've previously done.

38
00:02:33.380 --> 00:02:39.680
So right here I'm going to import use router and that's going to come from view router.

39
00:02:40.370 --> 00:02:45.310
So it's always important to be careful here and make sure you're importing from the right library.

40
00:02:45.320 --> 00:02:45.680
Right.

41
00:02:45.860 --> 00:02:49.910
Because a store is not a view specific concept, it is a view X concept.

42
00:02:49.910 --> 00:02:51.620
So it has to be imported from that library.

43
00:02:51.830 --> 00:02:55.970
The root object and the router object similarly don't come from view.

44
00:02:56.120 --> 00:02:58.310
They come from a different library called View Router.

45
00:02:58.790 --> 00:03:03.950
All right, so here in our setup method, I'm going to get access to my view router by invoking the

46
00:03:03.950 --> 00:03:05.360
use router function.

47
00:03:06.940 --> 00:03:07.390
All right.

48
00:03:07.510 --> 00:03:12.220
And so now we have everything we need to emulate our former select select job type method.

49
00:03:12.520 --> 00:03:17.260
We know in the new composition API that we replace methods with basic function calls.

50
00:03:17.530 --> 00:03:20.020
So right here I can declare an error function in line.

51
00:03:20.230 --> 00:03:22.450
I'm going to call it select job type.

52
00:03:23.930 --> 00:03:25.570
And declare that arrow function in line.

53
00:03:25.580 --> 00:03:29.240
And before we forget, let's immediately add it to our returned object.

54
00:03:29.540 --> 00:03:35.210
So now our view is going to have access to a function that it previously had as a method same name,

55
00:03:35.240 --> 00:03:40.790
so nothing should break as long as we implement the logic in here the exact same way as we did in here.

56
00:03:41.180 --> 00:03:44.750
So this former method, now a function, has two responsibilities.

57
00:03:44.930 --> 00:03:47.240
The first is to run a mutation.

58
00:03:47.240 --> 00:03:48.350
To commit a mutation.

59
00:03:48.650 --> 00:03:50.300
Well, we know we have our store.

60
00:03:50.300 --> 00:03:52.250
It's available above the store.

61
00:03:52.520 --> 00:03:56.300
We know that the way we run a mutation is by invoking the commit method.

62
00:03:57.170 --> 00:03:58.130
So I'll invoke commit.

63
00:03:58.610 --> 00:04:00.430
Which mutation do we want to run?

64
00:04:00.440 --> 00:04:03.500
It's going to be this one that we formally passed to map mutations.

65
00:04:03.500 --> 00:04:09.380
It's ADD selected job types and we already have that constant imported for its former implementation.

66
00:04:09.650 --> 00:04:14.810
So right here I want to tell View X that I want to run this mutation which is going to make some change

67
00:04:14.810 --> 00:04:15.350
to the store.

68
00:04:15.680 --> 00:04:21.380
And as a reminder, if I open up my mutations that gas file and drag it over here to the right.

69
00:04:23.400 --> 00:04:29.340
You may recall, a mutation is always going to accept the view or state as the first parameter, and

70
00:04:29.340 --> 00:04:31.920
then any secondary parameters are up to us.

71
00:04:32.160 --> 00:04:37.890
So because we defined a job types argument right here, this mutation needs it and we simply provide

72
00:04:37.890 --> 00:04:41.820
it as the second argument to commit right here after the mutation name.

73
00:04:42.120 --> 00:04:46.470
So we do not need to provide the state because view X will do that automatically.

74
00:04:46.650 --> 00:04:52.260
But we do need to provide the commit method first with the name of the mutation and then with the arguments

75
00:04:52.380 --> 00:04:54.360
to that corresponding mutation method.

76
00:04:54.750 --> 00:05:00.450
So formally we were providing this that selected job types, which was our array stored in data.

77
00:05:00.660 --> 00:05:04.140
Well now that array of information is stored in selected job types.

78
00:05:04.320 --> 00:05:06.630
So we want to pass in selected job types.

79
00:05:07.020 --> 00:05:13.290
But be very careful here because remember, selected job types is a reactive object and we want to pass

80
00:05:13.290 --> 00:05:18.600
in not the reactive object, but the array that it's storing inside that it's keeping track of.

81
00:05:18.840 --> 00:05:23.160
Because we don't want to save that reactive object here to select the job types.

82
00:05:23.190 --> 00:05:26.940
We just want to save the array from the perspective of our view store.

83
00:05:27.210 --> 00:05:31.800
So in order to get that nested array, we need to make sure we access the value property.

84
00:05:33.200 --> 00:05:33.890
So there we go.

85
00:05:34.250 --> 00:05:39.440
Finally, the second thing we do in select job type right here is we invoke the push method on a router

86
00:05:39.440 --> 00:05:39.830
object.

87
00:05:40.040 --> 00:05:44.750
This logic will stay exactly the same, except router is going to come from above from our use router

88
00:05:44.750 --> 00:05:45.170
function.

89
00:05:45.440 --> 00:05:46.850
So there's my router object.

90
00:05:46.850 --> 00:05:47.870
I'm going to call push.

91
00:05:48.110 --> 00:05:49.760
I'm going to invoke that method.

92
00:05:49.760 --> 00:05:54.650
I'm going to call it with an argument of an object with a property of name set to job results.

93
00:05:56.580 --> 00:05:57.030
All right.

94
00:05:57.180 --> 00:06:03.150
And with that, we have basically completed moving this component to the composition API so we can remove

95
00:06:03.150 --> 00:06:04.170
all of our former code.

96
00:06:04.440 --> 00:06:07.070
So we no longer need this entire method section.

97
00:06:08.060 --> 00:06:08.660
There we go.

98
00:06:08.870 --> 00:06:10.760
And we no longer need our map mutations.

99
00:06:10.760 --> 00:06:11.240
Important.

100
00:06:12.730 --> 00:06:13.540
And take a look here.

101
00:06:13.540 --> 00:06:16.960
We have an object with three return properties inside it.

102
00:06:17.170 --> 00:06:20.350
Select a job types, unique job types, select job type.

103
00:06:20.530 --> 00:06:24.010
And you can see as I scroll up, all of those are present here and they're still going to work.

104
00:06:24.250 --> 00:06:26.380
So for example, here is selected job types.

105
00:06:26.380 --> 00:06:32.710
That is our array here, a select job type that is going to be the function that we just defined in

106
00:06:32.710 --> 00:06:35.020
the set of method that will run whenever the user clicks.

107
00:06:35.020 --> 00:06:40.750
The checkbox and finally unique job types is that set that we're iterating over to create each checkbox.

108
00:06:40.900 --> 00:06:45.550
We still have that defined right here, except of course it's coming from our composable function,

109
00:06:45.790 --> 00:06:50.530
which itself is taking care of talking to the View Store and the the getters inside it.

110
00:06:50.770 --> 00:06:51.190
All right.

111
00:06:51.520 --> 00:06:55.990
So once again, this refactor now is in good shape and we're going to continue in the very next lesson.
