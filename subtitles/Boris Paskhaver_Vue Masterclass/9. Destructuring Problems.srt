1
00:00:00,150 --> 00:00:05,970
In this lesson, I'd like to introduce you to a problem that you may encounter when working with a reactive

2
00:00:05,970 --> 00:00:08,910
object, and that problem is structuring.

3
00:00:09,240 --> 00:00:14,280
So let's begin by getting rid of our title length constant and all of the references to it since it

4
00:00:14,280 --> 00:00:15,180
no longer matters.

5
00:00:15,480 --> 00:00:20,370
So right here in line 11, I'll get rid of that and get rid of all of these references to title.

6
00:00:20,420 --> 00:00:24,300
And so we are back to where we started, where we have a person object.

7
00:00:24,480 --> 00:00:29,580
We have this computed function that is keeping track of the first name and last name properties on that

8
00:00:29,580 --> 00:00:34,080
person object and re-evaluating or re computing whenever those properties change.

9
00:00:34,470 --> 00:00:40,620
So if you are familiar with JavaScript, you might say, Hey, this syntax right here is kind of redundant.

10
00:00:40,620 --> 00:00:45,900
Can't we make it a little bit simpler by restructuring the first name and last name properties off of

11
00:00:45,900 --> 00:00:46,350
person?

12
00:00:46,680 --> 00:00:48,520
So let's see what happens if we do that instead.

13
00:00:48,540 --> 00:00:54,420
So right here, I'm going to restructure first name and last name from person.

14
00:00:54,600 --> 00:00:59,820
And again, this is valid because we passed an object to the reactive function, so we no longer need

15
00:00:59,820 --> 00:01:01,920
to reference dot value or anything like that.

16
00:01:01,920 --> 00:01:06,540
We should be able to d reference these properties like so like any regular JavaScript object.

17
00:01:06,810 --> 00:01:12,000
And then right here we can change this to first name, since we should have the name available and change

18
00:01:12,000 --> 00:01:16,410
this to last name right here and hope that everything will work out the exact same way.

19
00:01:16,410 --> 00:01:20,370
So we expect to see Napoleon the Great followed by Napoleon Griffin the Great.

20
00:01:20,670 --> 00:01:24,960
Well, when I run this file, we are going to see a perhaps unexpected result.

21
00:01:25,230 --> 00:01:29,640
We are actually going to get the original computed value of Boris Spassky by the great.

22
00:01:29,910 --> 00:01:31,080
So what is going on here?

23
00:01:31,320 --> 00:01:37,110
Well, when I do structure the first name and last name properties off the reactive person object,

24
00:01:37,320 --> 00:01:40,110
I do not get reactive properties.

25
00:01:40,770 --> 00:01:45,360
I have reference to a reactive object called person, which is why I'm able to reference person that

26
00:01:45,360 --> 00:01:47,460
first name in the previous implementation.

27
00:01:47,760 --> 00:01:53,130
But this syntax actually does not work when we do structure from an object view is going to give us

28
00:01:53,130 --> 00:01:56,430
the original values, which in this case are plane strings.

29
00:01:56,640 --> 00:02:00,450
In other words, we lose the reactivity of the whole person object.

30
00:02:00,630 --> 00:02:02,850
We go from an object to a primitive.

31
00:02:03,030 --> 00:02:07,170
And I'm view does not wrap that basic primitive, that string in reactivity.

32
00:02:07,200 --> 00:02:07,530
Right.

33
00:02:07,770 --> 00:02:10,620
So what happens next is we have these plane string values.

34
00:02:10,830 --> 00:02:16,380
So we say, here's a function computed that will always evaluate to whatever first name is and whatever

35
00:02:16,380 --> 00:02:17,040
last name is.

36
00:02:17,220 --> 00:02:20,790
Which are always going to be regular strings at this point of Boris pass giver.

37
00:02:21,060 --> 00:02:26,400
So no matter what we do with changing the first name and last name properties on person, which are

38
00:02:26,400 --> 00:02:29,610
actually still reactive, but these references to them are not.

39
00:02:29,880 --> 00:02:36,060
So whenever we change the first name property on person and the last name property on person, this

40
00:02:36,060 --> 00:02:44,040
does not actually rerun because it does not have a reference or a a link to the original person reactive

41
00:02:44,040 --> 00:02:44,370
object.

42
00:02:44,370 --> 00:02:47,490
It only has these regular primitive strings.

43
00:02:47,490 --> 00:02:47,720
Right?

44
00:02:47,910 --> 00:02:49,650
So this solution will not work.

45
00:02:49,860 --> 00:02:53,400
And this is just a internal implementation detail from Vue.

46
00:02:53,580 --> 00:02:56,700
We're going to take a look at how we can fix this problem in the next lesson.
