1
00:00:00,480 --> 00:00:01,290
All right.

2
00:00:01,290 --> 00:00:03,350
So we have made a lot of progress.

3
00:00:03,360 --> 00:00:07,470
We are now rendering a dynamic action verb every 3 seconds.

4
00:00:07,770 --> 00:00:13,500
So the next thing I want to do is to add a different font color to every one of our action verbs.

5
00:00:13,770 --> 00:00:18,900
So I'll begin by adding a style section to my view component, and that is the headline component.

6
00:00:19,290 --> 00:00:23,910
So right here I'll add my new style tags, make sure you have an opening and closing one.

7
00:00:24,180 --> 00:00:30,600
And as always, we'll add the scoped keyword in order to limit the styles to just this file.

8
00:00:30,990 --> 00:00:36,990
What I'm going to do here is define forces as classes and their names are going to match our for actions.

9
00:00:36,990 --> 00:00:43,350
So build, create, design and code and each success class will simply set one color.

10
00:00:43,740 --> 00:00:48,030
Now, you may be thinking, shouldn't we put these colors into our tailwind config file?

11
00:00:48,270 --> 00:00:50,160
And I think that that is totally fine.

12
00:00:50,370 --> 00:00:55,710
But for now, given that this is the only place in our website where we're going to be utilizing these

13
00:00:55,710 --> 00:01:01,380
four colors, I think it's okay to start out by defining them just here in this component and later

14
00:01:01,380 --> 00:01:07,590
on moving them to our tailwind config file if we find that they are more universal in nature for now,

15
00:01:07,590 --> 00:01:08,520
let's start here.

16
00:01:08,790 --> 00:01:15,510
So I'll begin by defining a build the class and I'll define its color property and I'll set that to

17
00:01:15,510 --> 00:01:16,440
this hashtag.

18
00:01:16,440 --> 00:01:20,550
It's going to be 1a73e8.

19
00:01:20,550 --> 00:01:27,090
It's going to be that blue color below there I will define a create class and same deal.

20
00:01:27,090 --> 00:01:33,720
Here I'll have a color property and I'll set it to hashtag 34853.

21
00:01:33,720 --> 00:01:37,200
That's going to be the green color for create then design.

22
00:01:37,830 --> 00:01:42,150
It's color is going to be F nine, a, b00.

23
00:01:42,180 --> 00:01:43,260
That's the orange color.

24
00:01:44,010 --> 00:01:50,880
And finally it will have a code class and its color will be dd93025.

25
00:01:50,910 --> 00:01:52,110
That's a red color.

26
00:01:52,560 --> 00:01:52,770
All right.

27
00:01:52,770 --> 00:01:53,940
So make sure we save that.

28
00:01:54,240 --> 00:01:58,380
And the next thing I want to do, of course, is to wire up my object.

29
00:01:58,380 --> 00:02:01,410
It's going to determine which class we're going to apply.

30
00:02:01,560 --> 00:02:06,810
We're going to follow the same protocol we've used throughout the course, which is will define a computed

31
00:02:06,810 --> 00:02:12,900
property, I'll call it action classes, and that property will return in object where the properties

32
00:02:12,900 --> 00:02:18,750
are going to be access classes and the values are going to be booleans that reflect whether or not those

33
00:02:18,750 --> 00:02:22,200
classes should be applied and to know which class will be applied.

34
00:02:22,380 --> 00:02:26,640
I'm going to take a look at the current value of my action data property.

35
00:02:26,850 --> 00:02:31,110
If it's build, for example, then we want to apply the Build CCS class.

36
00:02:31,290 --> 00:02:35,850
If it is create, then we want to apply the creates, yes, as class and so on.

37
00:02:36,180 --> 00:02:36,960
So let's begin.

38
00:02:36,960 --> 00:02:39,570
I'm going to define my computed property right here.

39
00:02:40,020 --> 00:02:47,100
And the view s land configuration prefers that we define computed after data but before our lifecycle

40
00:02:47,100 --> 00:02:47,370
hooks.

41
00:02:47,700 --> 00:02:48,690
So I'll define it right here.

42
00:02:49,950 --> 00:02:55,380
And given that we are customizing the classes for our action verb or our action property, I'm going

43
00:02:55,380 --> 00:02:57,000
to call my method here.

44
00:02:57,240 --> 00:02:58,440
Action classes.

45
00:02:59,220 --> 00:02:59,670
All right.

46
00:02:59,670 --> 00:03:01,440
So computed is an object, remember?

47
00:03:01,440 --> 00:03:03,450
And then in that object we define it methods.

48
00:03:03,720 --> 00:03:07,410
So in action classes, I'll return a plain JavaScript object.

49
00:03:07,770 --> 00:03:11,400
And here my keys of course will be my four sizes classes.

50
00:03:11,640 --> 00:03:16,860
So let's start with build and when do I want to apply these CSS as build class that I just defined?

51
00:03:17,040 --> 00:03:22,410
I want to do that when the value of my action data property is equal to the string built.

52
00:03:23,130 --> 00:03:25,830
So when the page loads, for example, we're going to start out with build.

53
00:03:25,950 --> 00:03:32,430
At that point this should have value to true and we should apply this color to our eventual header with

54
00:03:32,430 --> 00:03:33,120
the action verb.

55
00:03:33,480 --> 00:03:36,990
So we're going to define very similar logic for our other three classes.

56
00:03:36,990 --> 00:03:46,590
So for create, I only want this to be true when the action is create and for my design class and only

57
00:03:46,590 --> 00:03:49,830
want to apply that when the action data property is equal to design.

58
00:03:50,220 --> 00:03:55,650
Keep in mind here, our property names are lowercase because we're matching the class names here while

59
00:03:55,650 --> 00:03:59,910
the strings that we're matching with are going to be with the capital letter, because that's how we

60
00:03:59,910 --> 00:04:03,690
defined these options right here from the array that we're choosing from.

61
00:04:04,080 --> 00:04:08,700
And then finally we're going to have our code class and we want to apply that when the action is equal

62
00:04:08,700 --> 00:04:09,330
to code.

63
00:04:10,600 --> 00:04:16,270
So at any given moment in time during our complaints existence, the action properties only going to

64
00:04:16,270 --> 00:04:18,910
be equal to one string at a time such as build.

65
00:04:19,180 --> 00:04:25,210
So at any given moment, three of these properties will have a false value and one will have a true

66
00:04:25,210 --> 00:04:27,910
value, and that will be the colour that we end up applying.

67
00:04:28,360 --> 00:04:28,720
All right.

68
00:04:28,960 --> 00:04:33,640
So now that we have the computed property set up and we have our CSF classes set up, the only thing

69
00:04:33,640 --> 00:04:36,760
that's left to do is to wire up this logic in our template.

70
00:04:36,760 --> 00:04:42,700
And as always, we're going to use V, bind and connect to our class attribute on a given H two element

71
00:04:42,850 --> 00:04:44,380
in order to incorporate this logic.

72
00:04:44,680 --> 00:04:48,250
So what I'd like to do here is actually expand on our implementation on line three.

73
00:04:48,520 --> 00:04:52,900
So what I'm going to do is I'm going to wrap the action verb itself in its own span.

74
00:04:53,140 --> 00:04:58,150
So I'm actually going to break this up on a new line, and I'm going to create a span for the action

75
00:04:58,150 --> 00:05:01,150
verb, and I'm going to move the span afterwards.

76
00:05:01,420 --> 00:05:07,030
And then what they actually do on the Google website is they add a line break, they force a line break,

77
00:05:07,180 --> 00:05:09,880
and I'll do that by creating my B tag.

78
00:05:09,880 --> 00:05:14,200
That's a line break tag that forces the content onto the next line.

79
00:05:14,260 --> 00:05:14,620
All right.

80
00:05:14,830 --> 00:05:19,360
So inside our span, we're going to have a verb and then a line break and then a text for everyone.

81
00:05:19,600 --> 00:05:24,400
And when I want to apply my styles is actually going to be on the span itself because we only want to

82
00:05:24,400 --> 00:05:27,200
apply those colors to the action verb.

83
00:05:27,220 --> 00:05:30,310
The for everyone keeps the original styles of the page.

84
00:05:30,640 --> 00:05:35,110
So right here we know that we can either use a V bind or the shortcut, which is the colon.

85
00:05:35,290 --> 00:05:41,020
We want to bind to the class attribute on our span two element.

86
00:05:41,170 --> 00:05:46,660
And to this we can provide a JavaScript object and we know that Vue knows that it's going to apply that

87
00:05:46,660 --> 00:05:53,020
logic of looking for the properties with a value of true and looking for those properties as CSS classes.

88
00:05:53,020 --> 00:05:53,290
Right.

89
00:05:53,620 --> 00:05:57,370
So of course I want to apply my action class as property.

90
00:05:58,090 --> 00:05:58,780
That's a method.

91
00:05:58,780 --> 00:06:01,060
But don't worry, you will invoke it to get this object.

92
00:06:01,300 --> 00:06:08,140
And of course, because this computed property is dependent on the action data property, whenever the

93
00:06:08,140 --> 00:06:13,870
action property changes, which it will every 3 seconds, this will rerun, which will lead to a new

94
00:06:13,870 --> 00:06:20,380
access class and a new property having a value of true, which will in turn force you to re render this

95
00:06:20,380 --> 00:06:25,830
and apply the different surface class and the different font color to the current action group.

96
00:06:26,050 --> 00:06:27,040
So this should be enough.

97
00:06:27,040 --> 00:06:29,500
So let's transition to our browser and see what we've done.

98
00:06:30,220 --> 00:06:35,260
All right, so there's create in green and if we wait 3 seconds, beautiful, there is design in orange,

99
00:06:35,560 --> 00:06:37,060
there is code in red.

100
00:06:37,060 --> 00:06:38,740
And one more time we should see the other one.

101
00:06:38,740 --> 00:06:39,970
There is build in blue.

102
00:06:39,970 --> 00:06:40,540
Perfect.

103
00:06:40,810 --> 00:06:41,920
So looking pretty good.

104
00:06:42,070 --> 00:06:46,540
Of course we have to increase our font size and start emulating the actual look and feel of the real

105
00:06:46,540 --> 00:06:46,840
page.

106
00:06:47,020 --> 00:06:48,640
But this is exactly what we wanted.

107
00:06:48,670 --> 00:06:54,670
Notice that we are getting Vue to dynamically apply a different CAC class every 3 seconds based on the

108
00:06:54,670 --> 00:06:58,780
value of a data property, which is in turn dynamically altering the font color.

109
00:06:59,080 --> 00:06:59,500
Awesome.

110
00:06:59,500 --> 00:07:03,910
So we've made a lot of progress here and in the next couple of lessons, we can continue styling our

111
00:07:03,910 --> 00:07:04,780
headline component.
