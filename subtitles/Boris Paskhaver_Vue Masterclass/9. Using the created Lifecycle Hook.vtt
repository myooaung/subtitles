WEBVTT
1
00:00:00.180 --> 00:00:00.930
All right.

2
00:00:00.930 --> 00:00:04.650
So let's start building out the logic of our changing headline text.

3
00:00:04.890 --> 00:00:09.850
The first thing I'd actually like to do is to create a new component called headline, and headline

4
00:00:09.880 --> 00:00:12.840
will represent just that changing bit of text.

5
00:00:12.840 --> 00:00:18.090
The primary header that says things like Build for everyone or design for everyone, as well as the

6
00:00:18.090 --> 00:00:21.570
second header that says Find your next job at Baba Corp..

7
00:00:21.600 --> 00:00:28.500
So I want to isolate that piece of the DOM to its own component, just so we can not pack too much logic

8
00:00:28.500 --> 00:00:34.650
into our hero component, because our hero represents that entire primary section of the page and this

9
00:00:34.650 --> 00:00:36.870
is just our kind of header or a headline.

10
00:00:37.260 --> 00:00:41.820
So I'm going to create a new component and I'm going to call it headline view.

11
00:00:43.410 --> 00:00:44.610
And we know that drill by now.

12
00:00:44.610 --> 00:00:47.790
We need a template and we need a script section.

13
00:00:48.900 --> 00:00:54.570
And in my template, I'm just going to create a section tag and I'm going to add an H1.

14
00:00:54.570 --> 00:00:56.610
And for now we're just going to hard code.

15
00:00:56.610 --> 00:00:58.590
Some text later on will make it dynamic.

16
00:00:58.590 --> 00:00:59.190
So don't worry.

17
00:00:59.490 --> 00:01:01.410
I'm going to begin with build for everyone.

18
00:01:02.380 --> 00:01:08.410
And then below I'll put an H2 and that'll be find your next job at Baba Corp..

19
00:01:08.560 --> 00:01:10.130
That's the name of my fictional company.

20
00:01:10.150 --> 00:01:12.910
Feel free to give your company whatever name you want.

21
00:01:13.330 --> 00:01:13.600
All right.

22
00:01:13.600 --> 00:01:19.690
And down below here, I'm going to export default my JavaScript object, which represents my configuration

23
00:01:19.690 --> 00:01:20.380
for this component.

24
00:01:20.590 --> 00:01:26.200
As always, we want to use the name of property and I'll call this component headline and we're not

25
00:01:26.200 --> 00:01:27.490
going to be done just yet.

26
00:01:27.760 --> 00:01:29.620
There is a two things I want to show you here.

27
00:01:29.800 --> 00:01:35.380
The first is that we're going to use the created hook, which we talked about earlier, the created

28
00:01:35.380 --> 00:01:40.510
lifecycle hook, which runs automatically when the component is created, but before it's actually mounted

29
00:01:40.510 --> 00:01:41.140
in the browser.

30
00:01:41.290 --> 00:01:47.560
And that's eventually going to be where we want to kick off the logic to tell you to change our text

31
00:01:47.560 --> 00:01:48.580
every 5 seconds.

32
00:01:48.790 --> 00:01:52.000
So in order to do that, we're going to need to combine a couple of new ideas.

33
00:01:52.040 --> 00:01:57.490
We're going to need to have data, the data method in our component, because we're going to need some

34
00:01:57.490 --> 00:01:59.950
piece of data that will be changing every 5 seconds.

35
00:02:00.190 --> 00:02:05.800
And then in our lifecycle hook, we're actually going to need to wire up the logic to tell you to change

36
00:02:05.800 --> 00:02:08.440
that data every 5 seconds and to what.

37
00:02:08.770 --> 00:02:15.100
So to just start wiring up that plumbing, I'm going to add my data method and in here I'll return my

38
00:02:15.100 --> 00:02:16.090
JavaScript object.

39
00:02:16.570 --> 00:02:18.610
And for now this is not going to be permanent.

40
00:02:18.610 --> 00:02:23.770
But just to give you an example, I'm going to have a property called Sample and I'm going to make it

41
00:02:23.770 --> 00:02:27.580
equal to Hello, this is just a sample property set to a string of hello.

42
00:02:27.910 --> 00:02:34.690
And what I want to show you is that in our lifecycle cycle hooks we can actually reference our data.

43
00:02:34.690 --> 00:02:39.370
Properties are going to exist during certain lifecycle hooks and they're going to exist, for example,

44
00:02:39.520 --> 00:02:41.160
during our created lifecycle.

45
00:02:41.620 --> 00:02:42.790
So as we saw earlier.

46
00:02:43.870 --> 00:02:48.700
If we want to use a life cycle hook, we just write it's method name within our configuration object.

47
00:02:48.940 --> 00:02:52.000
So we're going to write our created lifecycle hook.

48
00:02:52.420 --> 00:02:58.210
And here all I want to do is console.log the value of the sample data property.

49
00:02:58.420 --> 00:03:08.080
So I'm going to console.log a string of Hey, I have been created, my data exists and maybe something

50
00:03:08.080 --> 00:03:13.270
funny like look and then we can actually provide multiple arguments to console.log, to print out multiple

51
00:03:13.270 --> 00:03:13.690
values.

52
00:03:13.870 --> 00:03:15.310
And what do I want to print out?

53
00:03:15.310 --> 00:03:21.340
I want to print out the value of sample and I can get that again using the this keyword, all of our

54
00:03:21.340 --> 00:03:23.800
data properties will be available under this keyword.

55
00:03:24.010 --> 00:03:29.800
So it's going to be this dot sample, save that, add a line break right here and that's the basics

56
00:03:29.800 --> 00:03:31.270
of our headline component.

57
00:03:31.480 --> 00:03:33.550
But of course we also need to render it.

58
00:03:33.820 --> 00:03:36.100
So what I'm going to do is head into my hero component.

59
00:03:37.110 --> 00:03:37.920
And scroll down.

60
00:03:38.340 --> 00:03:40.890
We no longer need these life cycle hooks.

61
00:03:40.890 --> 00:03:45.510
These were just, for example, and for educational purposes, so we can go ahead and remove them.

62
00:03:45.960 --> 00:03:50.580
And then, of course, I want to import my headline component, so I'll do that below my script tag.

63
00:03:50.940 --> 00:03:56.340
I'll import headline from act components, headline that view.

64
00:03:56.580 --> 00:04:02.800
And then of course, I need to register it as a local component by using my components key and providing

65
00:04:02.800 --> 00:04:07.740
it here using the S syntax, which enables us to use headline anywhere in this template.

66
00:04:07.950 --> 00:04:10.020
And I want to insert it right here.

67
00:04:10.020 --> 00:04:15.930
This is in our collection of five columns, or rather the box that spans the width of five columns of

68
00:04:15.930 --> 00:04:16.920
our 12 column grid.

69
00:04:17.250 --> 00:04:20.880
Since that of rendering this text, let's go ahead and start rendering our headline.

70
00:04:22.080 --> 00:04:23.760
That's going to be a self-closing component.

71
00:04:24.090 --> 00:04:25.080
So just like that.

72
00:04:25.260 --> 00:04:27.060
And now when I navigate to my browser.

73
00:04:28.370 --> 00:04:29.510
We should be able to see.

74
00:04:29.540 --> 00:04:30.590
There is a headline.

75
00:04:30.740 --> 00:04:33.230
We're starting to get things into the right position.

76
00:04:33.230 --> 00:04:34.120
Build for everyone.

77
00:04:34.310 --> 00:04:40.430
Find your next job at Bubba Corp. and if I go to my console and refresh, we're going to see that created

78
00:04:40.430 --> 00:04:45.710
life cycle hook run and it says Hello or Hey, I've been created, my data exists.

79
00:04:45.830 --> 00:04:46.850
Look, hello.

80
00:04:46.940 --> 00:04:52.490
And that's just proof that we're getting access to our data properties within the created lifecycle.

81
00:04:52.880 --> 00:04:57.800
That's a good piece of information to know because obviously we're going to need to not just get access

82
00:04:57.800 --> 00:05:04.010
to that data, but overwrite it and furthermore tell you to overwrite it every number of seconds.

83
00:05:04.190 --> 00:05:08.810
And our hope is that if we can set that up in the created hook and it's always running when the component

84
00:05:08.810 --> 00:05:11.900
starts, then every 5 seconds we'll get it to run.

85
00:05:12.140 --> 00:05:13.550
Vue will change its data.

86
00:05:13.760 --> 00:05:19.130
Vue will automatically re render and we should be able to get this text to change dynamically every

87
00:05:19.310 --> 00:05:20.210
a number of seconds.

88
00:05:20.210 --> 00:05:23.210
So we're going to continue chipping away at this idea in the very next lesson.
