1
00:00:00,330 --> 00:00:01,290
All right.

2
00:00:01,290 --> 00:00:07,860
So in this lesson, I want to show you how we can track the mutations to the view vector as well as

3
00:00:07,860 --> 00:00:13,560
the view store state changes in our view DevTools in Chrome, it's one of my favorite features because

4
00:00:13,560 --> 00:00:17,250
it allows us to debug the mutations as they flow through the app.

5
00:00:17,610 --> 00:00:22,740
So here I am in my view tab and you'll notice right here we have this section called Components and

6
00:00:22,740 --> 00:00:28,230
if I hover my mouse over it, we're going to see that we have this option called View X and if I click

7
00:00:28,230 --> 00:00:33,390
this and then I click on this route right here, we're going to see our entire view store right here.

8
00:00:33,570 --> 00:00:36,270
So here is our logged in property set to false.

9
00:00:36,480 --> 00:00:40,680
Now the cool thing here is we can actually edit this in line so we can, for example, change this to

10
00:00:40,680 --> 00:00:44,070
true and observe how the changes percolate through our app.

11
00:00:44,070 --> 00:00:48,870
So for example, when I change to true, we're going to see that our main now is going to read that

12
00:00:48,870 --> 00:00:51,030
new state and make these changes right here.

13
00:00:51,270 --> 00:00:53,580
And similarly, if I change it back to false.

14
00:00:54,660 --> 00:00:57,480
We can see how that returns it back to its original state.

15
00:00:57,810 --> 00:01:02,670
But of course, the better way to interact with it is the same way that a user would, which is finding

16
00:01:02,670 --> 00:01:06,870
ways to work with your app in the same way that somebody visiting your site would.

17
00:01:07,080 --> 00:01:11,340
So I just want to show you here, when we click the sign in button, we're going to automatically trigger

18
00:01:11,340 --> 00:01:15,180
that commit method to run and issue limitation of log in user.

19
00:01:15,360 --> 00:01:17,550
And we're going to see the state change automatically.

20
00:01:17,560 --> 00:01:18,780
So there we go.

21
00:01:18,810 --> 00:01:20,430
We can see it flipped from false to true.

22
00:01:20,670 --> 00:01:23,880
So of course, as you're playing around with your code and your implementation.

23
00:01:23,970 --> 00:01:29,610
You can use the browser to make sure that the state is properly adjusting itself to what it should be.

24
00:01:29,790 --> 00:01:34,230
Again, right now, these examples are kind of contrived because they're very simple and our story is

25
00:01:34,230 --> 00:01:34,770
very simple.

26
00:01:34,920 --> 00:01:41,160
We can obviously imagine if you have a very complex view store with 20 properties and multiple properties

27
00:01:41,160 --> 00:01:41,940
are changing.

28
00:01:42,060 --> 00:01:46,800
It's really helpful to look here and just double check that everything is working exactly as it should.

29
00:01:47,220 --> 00:01:47,520
Okay.

30
00:01:47,820 --> 00:01:49,590
There's one additional feature that I want to show you.

31
00:01:49,590 --> 00:01:52,710
I'm just going to refresh the page to get us back to our starting state.

32
00:01:53,520 --> 00:01:58,710
And right here, you'll notice we have this icon right here and this is called the timeline feature.

33
00:01:59,010 --> 00:02:03,390
So if I click on the timeline, the way it works is we're going to see a visual representation here

34
00:02:03,390 --> 00:02:04,470
of a timeline.

35
00:02:04,470 --> 00:02:08,460
So this is just a graphic of time flowing from left to right.

36
00:02:08,550 --> 00:02:14,550
You can see as I drag my mouse, you can see the time updating above down to the millisecond.

37
00:02:14,730 --> 00:02:20,010
So Vue is keeping track of everything that is happening in our app, such as the mouse moving keyboard

38
00:02:20,010 --> 00:02:26,730
events like the user typing component events like components, mounting lifecycle hooks, etc. And every

39
00:02:26,730 --> 00:02:32,490
time we issue a mutation, what the devils are actually going to do is keep track of that mutation and

40
00:02:32,490 --> 00:02:35,040
the corresponding change to your view store.

41
00:02:35,370 --> 00:02:39,420
So what I'm going to do here is I'm just going to select the View X Mutations category and then I'm

42
00:02:39,420 --> 00:02:40,800
going to click the sign in button.

43
00:02:41,850 --> 00:02:43,860
Let me see if I can select it again to refresh it.

44
00:02:43,890 --> 00:02:44,370
There we go.

45
00:02:44,640 --> 00:02:49,590
And you'll notice on the right hand side right here, we're going to see a list of all mutations in

46
00:02:49,590 --> 00:02:52,440
the sequential order in which they happened through the app.

47
00:02:52,710 --> 00:02:58,350
So before we because we clicked on that action button, we triggered the log in user mutation.

48
00:02:58,440 --> 00:03:03,530
So that's going to be here at the very top of the list and then we're going to see how it changed the

49
00:03:03,540 --> 00:03:04,620
View Store.

50
00:03:04,740 --> 00:03:09,060
So at the end of that mutation, running our is logged in property was such a true.

51
00:03:09,270 --> 00:03:13,830
And as we commit multiple mutations throughout the app, we're going to see them all laid out right

52
00:03:13,830 --> 00:03:15,930
here along with their corresponding time.

53
00:03:16,080 --> 00:03:21,420
So you're going to have a sense of how the app was used, what mutations were triggered, what it caused

54
00:03:21,420 --> 00:03:24,450
to the View Store to look like, etc..

55
00:03:24,630 --> 00:03:27,330
So obviously this can be a really cool tool for debugging.

56
00:03:27,510 --> 00:03:33,120
If something is not properly rendering or if something is going wrong, you can walk through the individual

57
00:03:33,120 --> 00:03:38,730
mutations in sequence and see, Oh, here's where I was expecting the store to be updated to this,

58
00:03:38,880 --> 00:03:40,120
but it obviously wasn't.

59
00:03:40,140 --> 00:03:41,910
So this is where something went wrong.

60
00:03:42,030 --> 00:03:44,130
This is where my logic may be incorrect.

61
00:03:44,250 --> 00:03:44,580
All right.

62
00:03:44,820 --> 00:03:51,450
So this view X mutations feature in the timeline as well as the store in the actual inspector mode.

63
00:03:51,570 --> 00:03:54,750
Inspector view is another way you can take a look at the state.

64
00:03:54,900 --> 00:04:00,180
Both of these are really great tools and really awesome features of the view tools in Chrome that allow

65
00:04:00,180 --> 00:04:02,130
you to debug your app very effectively.

66
00:04:02,310 --> 00:04:02,610
All right.

67
00:04:02,910 --> 00:04:04,980
So with that, I will see you next lesson.
