1
00:00:00,920 --> 00:00:01,880
All right.

2
00:00:01,880 --> 00:00:06,200
So while I was playing around with our application, I discovered a bug.

3
00:00:06,410 --> 00:00:08,510
So I want to show you that bug right now.

4
00:00:08,510 --> 00:00:11,870
And then we're going to spend this lesson and the next one fixing it.

5
00:00:12,200 --> 00:00:18,530
So as a reminder, we display only ten jobs on the right hand side, even when we have a filtered collection

6
00:00:18,530 --> 00:00:19,040
of jobs.

7
00:00:19,400 --> 00:00:22,250
So, for example, if I scroll down here, we'll see ten jobs.

8
00:00:22,490 --> 00:00:25,970
Then the user is able to navigate to the next page by clicking next.

9
00:00:26,360 --> 00:00:31,930
And the way that we keep track of what page the user's on is by using our query params right here.

10
00:00:31,940 --> 00:00:33,650
So we have page equal to two.

11
00:00:34,010 --> 00:00:38,180
So I'm going to use this feature to navigate us to, for example, page eight.

12
00:00:38,630 --> 00:00:41,030
So we're going to get to the eighth page of job results.

13
00:00:41,210 --> 00:00:46,250
And given that there are no filters now, everything still works because we have 100 jobs.

14
00:00:46,400 --> 00:00:48,650
So we have at least eight pages of results.

15
00:00:49,040 --> 00:00:54,710
But take a look at what happens when I expand job types and I filter for a job type.

16
00:00:54,890 --> 00:00:59,000
For example, I'm going to click part time on the right hand side.

17
00:00:59,180 --> 00:01:01,430
You'll notice we're going to get a blank page.

18
00:01:01,730 --> 00:01:03,170
So why is this happening?

19
00:01:03,380 --> 00:01:06,380
Will notice that there are only 25 jobs matched.

20
00:01:06,380 --> 00:01:11,210
That means that only 25 of our 100 original jobs are part time.

21
00:01:11,540 --> 00:01:15,590
Well, in order to show 25 jobs, we only need three pages.

22
00:01:15,740 --> 00:01:17,420
Page one, page two.

23
00:01:17,420 --> 00:01:19,490
And then the jobs end on page three.

24
00:01:19,850 --> 00:01:26,360
But we were originally on page eight when we made this filter selection, and there is no logic that

25
00:01:26,360 --> 00:01:32,630
forces the user back to the first page of job results to see the latest most up to date collection of

26
00:01:32,630 --> 00:01:33,530
filter jobs.

27
00:01:33,890 --> 00:01:40,070
So what we need to do as a very simple solution is any time the user selects any kind of filter, either

28
00:01:40,070 --> 00:01:45,500
in job types or in organizations, because the logic can also apply here, we need to make sure that

29
00:01:45,500 --> 00:01:48,770
we navigate them back to the first page of job results.

30
00:01:49,160 --> 00:01:55,310
Now, one really easy way to do that is by simply using the original URL link without any query params.

31
00:01:55,580 --> 00:02:00,950
So for example, if I just simply go to slash jobs, slash results, I'm always going to go to page

32
00:02:00,950 --> 00:02:01,310
one.

33
00:02:01,730 --> 00:02:08,360
So what we need to do is every time the user reacts to a click, every time the user checks a checkbox

34
00:02:08,360 --> 00:02:13,280
or uncheck set for that matter, any time we react to that change event, we simply need to force the

35
00:02:13,280 --> 00:02:16,940
router to navigate to this URL and that should solve our problem.

36
00:02:17,690 --> 00:02:20,420
So let's try it out and going to head to VS Code.

37
00:02:22,050 --> 00:02:24,930
And as a reminder, we have two components where we have this logic.

38
00:02:25,050 --> 00:02:28,260
Let's start with our job types collection of checkboxes.

39
00:02:28,500 --> 00:02:35,310
So I'm going to open our job filter, sidebar, job types, component right here and right here.

40
00:02:35,310 --> 00:02:37,470
We have this method called select job type.

41
00:02:37,500 --> 00:02:41,640
As a reminder, this method is what we invoke on every input change event.

42
00:02:41,850 --> 00:02:46,950
In other words, on every checkbox click we run this select job type method and here is where we commit

43
00:02:46,950 --> 00:02:51,660
the ADD selected job types mutation in order to send the data to the View X Store.

44
00:02:51,960 --> 00:02:54,900
So here is a perfect location for me to navigate the user.

45
00:02:55,170 --> 00:02:59,070
And luckily this is going way, way, way back when in the course.

46
00:02:59,310 --> 00:03:04,380
But you may recall that because we have view router in our project, every component is going to have

47
00:03:04,380 --> 00:03:07,020
access to a dollar sign router object.

48
00:03:07,170 --> 00:03:13,050
That is the view writer and we can use that to navigate the user around the app in order to navigate

49
00:03:13,050 --> 00:03:14,490
the user to a new route.

50
00:03:14,640 --> 00:03:20,190
We invoke the push method on that router object and then we can provide a variety of inputs here.

51
00:03:21,000 --> 00:03:27,840
One option is a plain JavaScript object with a name property set to the name of the route that we want

52
00:03:27,840 --> 00:03:29,040
to send the user to.

53
00:03:29,430 --> 00:03:35,270
So as a reminder, we can find all of our routes in a special file called the Router Index.

54
00:03:35,820 --> 00:03:38,520
More specifically, the index file in the router folder.

55
00:03:38,790 --> 00:03:44,460
I'm going to drag this over to the right hand side and we can see here we have an array of four routes.

56
00:03:44,610 --> 00:03:46,980
Every route has a path and that is the URL.

57
00:03:47,340 --> 00:03:50,190
So here is the one we want slash job slash results.

58
00:03:50,430 --> 00:03:52,680
And every route also has the name.

59
00:03:52,860 --> 00:03:55,920
So the name for this second route is job results.

60
00:03:56,130 --> 00:04:02,130
So if we provide that exact argument to this string right here, job results, that should do it every

61
00:04:02,130 --> 00:04:06,300
time the user clicks a checkbox for anything, selecting or selecting.

62
00:04:06,390 --> 00:04:11,310
We're going to run this logic to navigate them back to slash job slash results, which will always be

63
00:04:11,310 --> 00:04:12,050
page one.

64
00:04:12,390 --> 00:04:14,300
So this should be a working solution.

65
00:04:14,310 --> 00:04:18,870
The only problem, of course, is, as you can see here, it is getting our tests to fail.

66
00:04:19,080 --> 00:04:24,630
More specifically, our tests in the job filter, sidebar, job types component, which it sort of sort

67
00:04:24,630 --> 00:04:29,610
of makes sense because there's nowhere in our test suite currently where we are acknowledging this dollar

68
00:04:29,610 --> 00:04:33,420
sign root or property view route or adds it for us in the component.

69
00:04:33,630 --> 00:04:38,340
But of course in our test suite it's up to us to provide a mock object to represent that router.

70
00:04:38,550 --> 00:04:42,270
We previously were not doing that, so that's why we're running into an issue here.

71
00:04:42,960 --> 00:04:48,600
What our test is telling us is I cannot read the property push of undefined, which means this the dollar

72
00:04:48,600 --> 00:04:53,880
sign router is evaluating two undefined, which makes sense because we didn't define that mock object

73
00:04:53,880 --> 00:04:54,690
in our test suite.

74
00:04:55,140 --> 00:04:56,610
Let's go ahead and do that right now.

75
00:04:56,790 --> 00:05:00,840
So I'm going to open up my job filter sidebar job type's test file.

76
00:05:02,060 --> 00:05:06,920
And as a reminder, what we have here on the top is a create configure factory function and it currently

77
00:05:06,920 --> 00:05:10,940
accepts a mac store which we are providing to this mock object right now.

78
00:05:11,180 --> 00:05:16,880
As a reminder, anything that we pass to this mock property is going to be a global property on the

79
00:05:16,880 --> 00:05:17,330
component.

80
00:05:17,540 --> 00:05:22,790
So because we provide the same store here, the component will now have this dollar sign store.

81
00:05:23,120 --> 00:05:28,580
Well, similarly, if we want a Vista dollar sign rooter property, we need to provide one right here.

82
00:05:28,910 --> 00:05:31,670
So I'm going to go with the simplest solution I can here.

83
00:05:31,850 --> 00:05:37,580
I want to require each test to pass, create config, whatever router object it wants to use.

84
00:05:37,910 --> 00:05:43,640
So right here I'm going to provide a router parameter with no default argument and whatever.

85
00:05:43,640 --> 00:05:49,340
Any test gifts to me as the router object I'm going to provide right here as dollar sign router, which

86
00:05:49,340 --> 00:05:53,690
of course will ensure that whenever we mount the component, we're now going to have this thought dollar

87
00:05:53,690 --> 00:05:54,770
sign router available.

88
00:05:55,250 --> 00:05:59,720
So right here, for example, in our very first test, before we mount the component, we can create

89
00:05:59,720 --> 00:06:06,680
a dollar sign router object and by itself a single JavaScript object or an empty one is insufficient

90
00:06:06,860 --> 00:06:11,630
because it's still not going to be good enough to play the role of a real router, because a real router

91
00:06:11,630 --> 00:06:13,940
needs to be able to have a push method.

92
00:06:14,240 --> 00:06:17,480
So we need to make sure that our object is going to support a push method.

93
00:06:17,900 --> 00:06:19,820
So we're going to define push here and here.

94
00:06:19,820 --> 00:06:25,040
You can do something as simple as, for example, wiring up a basic JavaScript method, a basic arrow

95
00:06:25,040 --> 00:06:30,050
function, etc. But what I think is a really easy thing to do here is to simply use a just function,

96
00:06:30,200 --> 00:06:34,130
because that's a perfect way to introduce a mock function for situations like this.

97
00:06:34,430 --> 00:06:36,740
So right here, I'm going to make this a just function.

98
00:06:37,670 --> 00:06:39,140
Just fan with parentheses.

99
00:06:39,380 --> 00:06:43,130
And then as a reminder, we have two arguments to create config.

100
00:06:43,370 --> 00:06:49,040
So now that we've created a router in this test, we need to make sure we pass it in as a second argument

101
00:06:49,040 --> 00:06:49,820
to create config.

102
00:06:50,150 --> 00:06:54,820
So create config will take the router that we give it in this test and it's going to set it up as dollar

103
00:06:54,830 --> 00:07:00,170
sign router in the component saved up and we're going to basically repeat the exact same logic down

104
00:07:00,170 --> 00:07:00,560
below.

105
00:07:00,560 --> 00:07:05,060
So right here I'm going to say I need a dollar sign router object.

106
00:07:05,480 --> 00:07:08,150
It's going to be a plane JavaScript object with a push method.

107
00:07:08,390 --> 00:07:12,530
I'm going to make that a just function which is invoke able and thus can behave like a method.

108
00:07:12,830 --> 00:07:19,070
And I'm going to pass in that router object, save that and you can see our tests are both passing.

109
00:07:19,370 --> 00:07:20,600
So this is really great.

110
00:07:20,600 --> 00:07:22,700
We got our old failing test to pass.

111
00:07:22,910 --> 00:07:28,070
However, we are still not testing the new functionality on line of 52.

112
00:07:28,610 --> 00:07:34,100
We got our tests to pass because previously in our older tests we were clicking on a checkbox, so we

113
00:07:34,100 --> 00:07:36,050
were running through this method logic.

114
00:07:36,170 --> 00:07:40,490
So we needed dollar sign router to exist and our previous code is running through it.

115
00:07:40,700 --> 00:07:46,160
However, there's nowhere where we're actually testing line 52, so let's write a new test that's going

116
00:07:46,160 --> 00:07:47,060
to validate that.

117
00:07:47,060 --> 00:07:52,310
Whenever we click a checkbox, we are properly calling the push method on the router with the correct

118
00:07:52,310 --> 00:07:53,690
argument of this object.

119
00:07:54,500 --> 00:07:58,820
So this is going to be the second thing that happens when the user clicks the checkbox.

120
00:07:59,030 --> 00:08:00,800
The first is this test right here.

121
00:08:00,800 --> 00:08:04,280
It communicates that user has selected checkbox for job type.

122
00:08:04,490 --> 00:08:08,540
That is coming from our line 51 here that talks to the view next door.

123
00:08:08,960 --> 00:08:14,750
So the first thing I want to do here is I want to create a described above my second test just to make

124
00:08:14,750 --> 00:08:17,690
sure I encapsulate related tests within their own describe.

125
00:08:18,140 --> 00:08:25,040
So here I'm going to provide a describe of when user clicks checkbox.

126
00:08:26,330 --> 00:08:31,340
I'm going to provide my arrow function here and then I'm going to drag my second test here into that

127
00:08:31,340 --> 00:08:31,790
described.

128
00:08:31,790 --> 00:08:35,000
BLOCK So let's cut and paste it right here and let's.

129
00:08:36,070 --> 00:08:42,610
Paste it inside my describe save that it looks like I've lost a it's statements Let me return back make

130
00:08:42,610 --> 00:08:45,010
sure you include that actual test it right there.

131
00:08:45,310 --> 00:08:46,180
It right there.

132
00:08:46,420 --> 00:08:47,920
Apologies for that small mistake.

133
00:08:48,160 --> 00:08:49,110
Paste the right here.

134
00:08:49,120 --> 00:08:49,750
Save that.

135
00:08:49,930 --> 00:08:55,120
Okay, so we still have two tests passing, but notice we have now that top level describe description

136
00:08:55,270 --> 00:08:56,890
of when user clicks checkbox.

137
00:08:57,280 --> 00:09:03,430
So here is where I want to add my second test inside that when user clicks checkbox, describe for the

138
00:09:03,430 --> 00:09:06,250
second responsibility that's going to happen.

139
00:09:06,250 --> 00:09:15,490
Whenever the user selects a checkbox, we're going to navigate user to job results page to see fresh

140
00:09:15,490 --> 00:09:17,560
batch of filtered jobs.

141
00:09:19,360 --> 00:09:19,620
All right.

142
00:09:19,620 --> 00:09:21,210
So I'm going to provide an error function here.

143
00:09:21,820 --> 00:09:25,330
And our test here is going to be very similar to the one above.

144
00:09:25,630 --> 00:09:30,070
As a reminder, what we're doing in the test above is we're creating a mock store, we're creating a

145
00:09:30,070 --> 00:09:35,650
mock router, we're mounting the component, then we're expanding the accordion element right here.

146
00:09:35,660 --> 00:09:39,070
Because remember, all of our checkboxes are housed in that accordion.

147
00:09:39,340 --> 00:09:41,320
So we're revealing that content.

148
00:09:41,590 --> 00:09:47,170
Then we are finding a sample checkbox and checking it, or in other words, clicking on the logic that

149
00:09:47,170 --> 00:09:50,280
we want to do in our new test is going to be very similar.

150
00:09:50,290 --> 00:09:52,330
We still want to perform all of these actions.

151
00:09:52,570 --> 00:09:55,930
The only thing that we want to switch up is the actual assertion here.

152
00:09:56,230 --> 00:09:59,220
This test is worried about the commit method being called.

153
00:09:59,470 --> 00:10:03,040
We're going to worry about the push method being called on our router object.

154
00:10:03,430 --> 00:10:09,460
So let's copy most of this test starting from line 38 all the way down to line 53.

155
00:10:10,570 --> 00:10:12,650
I'm going to copy that and paste that below.

156
00:10:13,880 --> 00:10:16,340
And then modified slightly to fit our test.

157
00:10:16,790 --> 00:10:20,720
So right here, we're going to start by declaring a commit method that to be a just function.

158
00:10:20,930 --> 00:10:26,390
We still need this in order for the not mutations logic to work, but we no longer need to keep track

159
00:10:26,390 --> 00:10:27,890
of commit in a separate constant.

160
00:10:28,130 --> 00:10:33,110
So what I'm going to do is just remove this line and make the just function declaration in line like.

161
00:10:33,110 --> 00:10:38,720
So no difference in technical implementation, but it spares the need to avoid an extra constant that

162
00:10:38,720 --> 00:10:40,790
I don't want people to get confused by.

163
00:10:41,180 --> 00:10:41,480
Right.

164
00:10:41,510 --> 00:10:43,220
Here we have a router declaration.

165
00:10:43,220 --> 00:10:48,470
And what I'm going to do to isolate the push method, just to indicate to future readers that it probably

166
00:10:48,470 --> 00:10:51,410
has importance, is I'm going to assign it to a separate constant.

167
00:10:51,770 --> 00:10:52,960
So right here, I'll do content.

168
00:10:53,060 --> 00:10:53,420
Push.

169
00:10:54,560 --> 00:10:56,240
I'll make that a just function.

170
00:10:56,630 --> 00:10:59,150
And in the router object, set up a below.

171
00:10:59,150 --> 00:11:04,310
I'm just going to use S6 syntax to declare a push property that references our push.

172
00:11:04,310 --> 00:11:05,300
Just function above.

173
00:11:05,720 --> 00:11:07,490
I'm still going to mount my component.

174
00:11:07,640 --> 00:11:12,260
I'm still going to create a config with our Mac store and our Mac router and I'm still going to click

175
00:11:12,260 --> 00:11:13,640
on the accordion to expand it.

176
00:11:13,940 --> 00:11:16,850
That is an asynchronous operation we can see here.

177
00:11:16,850 --> 00:11:21,410
The click takes some time to run because we have an awake keyword, so we need to make sure that we

178
00:11:21,410 --> 00:11:23,540
make our test function async.

179
00:11:23,840 --> 00:11:26,890
So right here, I'm going to add the async keyword.

180
00:11:26,900 --> 00:11:27,590
Save that.

181
00:11:28,610 --> 00:11:31,220
Then we're finding a sample checkbox input.

182
00:11:31,370 --> 00:11:37,130
This is the full time checkbox that's coming from one of our available, unique job types of full time,

183
00:11:37,280 --> 00:11:38,300
and then we're checking you.

184
00:11:38,570 --> 00:11:43,940
So after all of this completes, we should expect that our select job type method will have run and

185
00:11:43,940 --> 00:11:47,450
that we will have invoked the push method on our router object.

186
00:11:47,870 --> 00:11:54,350
So luckily I have my push method above in a push constant so I can take that just mock function and

187
00:11:54,350 --> 00:11:58,670
I can test that it has been invoked by using to have then called width.

188
00:11:59,150 --> 00:12:04,730
Now this is not only going to check that the function has been run or invoked, it's also going to validate

189
00:12:04,730 --> 00:12:06,860
that it's been called with the correct argument.

190
00:12:07,190 --> 00:12:08,660
What argument do I care about?

191
00:12:09,110 --> 00:12:13,400
An object with a name property set to a string of job results?

192
00:12:14,240 --> 00:12:17,420
I'm going to save that and we're going to see that our test is passing.

193
00:12:17,510 --> 00:12:22,400
So we are correctly validating that if we wanted to follow a TDD approach, that's totally fine.

194
00:12:22,400 --> 00:12:26,930
We would have simply written this test first marking out our router, and then we would have introduced

195
00:12:26,930 --> 00:12:28,850
this line right here on line 52.

196
00:12:29,120 --> 00:12:34,640
In fact, we can temporarily comment out this line to show us that the test is failing, and that is

197
00:12:34,640 --> 00:12:41,090
a good sign because that means our new line here is providing the implementation the test is looking

198
00:12:41,090 --> 00:12:41,390
for.

199
00:12:41,570 --> 00:12:46,970
The test is looking to have pushed invoked with an argument of name set to job results.

200
00:12:47,090 --> 00:12:53,030
Instead, we're currently getting a failing test where just is telling us that it had no calls whatsoever.

201
00:12:53,300 --> 00:12:57,470
So this is what a TDD failure would have looked like, which would have prompted us to introduce the

202
00:12:57,470 --> 00:13:00,020
router available from Vue router right here.

203
00:13:00,200 --> 00:13:04,340
Make sure to call its push method and give it the right object representing the right path.

204
00:13:04,490 --> 00:13:06,590
And now we see all of our tests are passing.

205
00:13:06,950 --> 00:13:13,520
So let's navigate back to the browser to test this as a quick reminder, we do not have this functionality

206
00:13:13,520 --> 00:13:14,930
set up for organizations yet.

207
00:13:14,930 --> 00:13:17,840
We're going to do that in the next lesson, only for job types.

208
00:13:18,110 --> 00:13:23,420
So for example, what I can do very quickly is navigate to a certain page of results, let's say page

209
00:13:23,420 --> 00:13:24,980
two or maybe page three.

210
00:13:25,730 --> 00:13:30,590
And then notice whenever I select a job type like part time, you'll notice we're going to automatically

211
00:13:30,590 --> 00:13:33,350
navigate to page one at slash job slash results.

212
00:13:33,620 --> 00:13:35,150
So we're always going to go to page one.

213
00:13:35,360 --> 00:13:40,640
So if I select another job type here, like temporary and then go to something like page two, maybe

214
00:13:40,640 --> 00:13:46,430
even page three, no matter where we are, as soon as we deselect or select anything, we're always

215
00:13:46,430 --> 00:13:50,690
going to be taken back to the first page of results and there's always going to be some results there

216
00:13:51,110 --> 00:13:52,220
from our filter jobs.

217
00:13:52,460 --> 00:13:52,790
All right.

218
00:13:52,790 --> 00:13:55,910
So we've taken care of this bug, but only for one component.

219
00:13:56,060 --> 00:14:00,260
We're going to repeat this logic for organizations in the next lesson, and the logic is going to be

220
00:14:00,260 --> 00:14:01,070
pretty similar.

221
00:14:01,250 --> 00:14:02,270
So I will see you there.
