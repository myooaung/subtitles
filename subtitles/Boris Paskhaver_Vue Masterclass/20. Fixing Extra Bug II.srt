1
00:00:00,610 --> 00:00:01,390
Okay.

2
00:00:01,400 --> 00:00:08,450
So in the previous lesson we forced navigation whenever the user selected a checkbox in the job filter

3
00:00:08,450 --> 00:00:10,610
sidebar job types component.

4
00:00:10,790 --> 00:00:17,270
In this lesson, I want to repeat the exact same logic in the job filter sidebar organization's component.

5
00:00:17,570 --> 00:00:19,670
So I have that component open on the left.

6
00:00:19,670 --> 00:00:23,910
I have its test, we open on the right, and this time around let's switch the order.

7
00:00:23,960 --> 00:00:27,440
So let's first adjust our tests and then we'll alter the implementation.

8
00:00:27,620 --> 00:00:30,980
And it's basically going to be very similar to what we did in the previous lesson.

9
00:00:31,130 --> 00:00:37,190
In fact, this in and of itself is a sign that maybe these two components are so similar that they can

10
00:00:37,190 --> 00:00:39,800
eventually be refactored into just one component.

11
00:00:40,070 --> 00:00:41,870
But we'll get back to that at a later date.

12
00:00:42,140 --> 00:00:48,290
So right here in my test file, I'm going to update create config to accept a router object.

13
00:00:48,500 --> 00:00:52,490
I'm going to provide my dollar sign router right here to my max.

14
00:00:52,700 --> 00:00:58,220
Now every mounted component in my test suite will have access to this same router, but it's still up

15
00:00:58,220 --> 00:01:03,020
to every test to tell that config function what that router object needs to be.

16
00:01:03,380 --> 00:01:09,080
So right here, I'm just going to create a router object and I'm going to make sure it has a push method

17
00:01:09,710 --> 00:01:10,880
set to adjust function.

18
00:01:11,180 --> 00:01:15,830
Now you could argue that if you were using TDD, you wouldn't know that you would need a router object

19
00:01:15,830 --> 00:01:17,210
with a push method just yet.

20
00:01:17,390 --> 00:01:22,490
But later on, when you would implement your working solution, it would tell you because the push method

21
00:01:22,490 --> 00:01:27,350
invoked in the real component would not exist on your empty JavaScript object, for example.

22
00:01:27,470 --> 00:01:31,220
And we know this from our previous component, so I'm just going to go ahead and add it immediately

23
00:01:31,220 --> 00:01:31,730
right now.

24
00:01:32,030 --> 00:01:35,420
Then I'm going to provide my dollar sign router to my CRE config function.

25
00:01:36,320 --> 00:01:37,750
And there we go right here.

26
00:01:37,760 --> 00:01:40,910
What I'm going to do is wrap my second test in a new described lock.

27
00:01:41,210 --> 00:01:43,010
So right here I'm going to say describe.

28
00:01:43,910 --> 00:01:49,160
When the user clicks checkbox provide an arrow function right here.

29
00:01:49,460 --> 00:01:52,670
And then what I'm going to do, of course, is drag down.

30
00:01:54,010 --> 00:02:00,270
Rather drag up this entire test starting from the cut and paste it inside my describe block right here.

31
00:02:01,200 --> 00:02:03,690
That's the first thing that happens when the user clicks the checkbox.

32
00:02:03,900 --> 00:02:09,960
The second thing that I want to happen, and this will be my first failing test, is that it navigates

33
00:02:09,960 --> 00:02:17,460
user to job results page to see fresh batch of filter jobs.

34
00:02:19,100 --> 00:02:23,500
I in fact, I think I actually forgot up here to provide my route.

35
00:02:23,850 --> 00:02:24,320
Object objects.

36
00:02:24,330 --> 00:02:25,020
Let's take care of that.

37
00:02:25,020 --> 00:02:25,530
Right here.

38
00:02:25,530 --> 00:02:26,250
So right here.

39
00:02:26,640 --> 00:02:30,450
Connect router is going to be an object with a.

40
00:02:32,260 --> 00:02:33,880
Push method and adjust function.

41
00:02:33,880 --> 00:02:37,000
I'm going to provide that to my create config.

42
00:02:37,000 --> 00:02:39,850
Everything should still pass and indeed it does.

43
00:02:40,030 --> 00:02:45,010
And so what I can do is once again copy the majority of this test to the one that I just declared below

44
00:02:45,610 --> 00:02:46,210
right here.

45
00:02:48,120 --> 00:02:48,900
Just like last time.

46
00:02:48,900 --> 00:02:52,280
What I'm going to do is move this just function declaration in line.

47
00:02:52,290 --> 00:02:54,690
There's no reason to assign commit to a separate constant.

48
00:02:54,690 --> 00:03:00,690
And I don't want to confuse the future reader by having some kind of random constant floating around

49
00:03:00,960 --> 00:03:01,500
right here.

50
00:03:01,500 --> 00:03:05,190
I am going to move push to its own separate constants.

51
00:03:05,190 --> 00:03:10,270
So that has some relevance in my test, which means I'm going to make this an S6 reference and it's

52
00:03:10,290 --> 00:03:14,100
still going to provide the same router object to my create config factory function.

53
00:03:14,250 --> 00:03:18,060
We're using a weight here, so we need to make sure we make this function async.

54
00:03:19,640 --> 00:03:19,970
All right.

55
00:03:19,970 --> 00:03:21,540
So we're going to expand the accordion.

56
00:03:21,570 --> 00:03:26,210
We're going to click on a sample organization input that being a checkbox.

57
00:03:26,210 --> 00:03:30,470
In this case, it's the Google input because we have a sample organization of Google right here.

58
00:03:30,800 --> 00:03:33,320
And after we check that checkbox, what do we expect?

59
00:03:33,590 --> 00:03:37,940
We expect our push method above to have been called with.

60
00:03:40,270 --> 00:03:47,380
An object with a name property set to job results save that we are going to see a failure.

61
00:03:47,500 --> 00:03:55,270
We are getting the just to tell us that we and it was expecting an invocation of push with this argument

62
00:03:55,450 --> 00:03:56,380
but it didn't receive it.

63
00:03:56,620 --> 00:04:00,190
That gives us permission to create the implementation to pass the test.

64
00:04:00,520 --> 00:04:05,830
So right here in this component, I'm going to scroll down to the method called Select Organization.

65
00:04:05,980 --> 00:04:11,080
And here we're going to have access to this the dollar sign router automatically because view router

66
00:04:11,080 --> 00:04:12,100
is going to give it to us.

67
00:04:12,310 --> 00:04:16,780
That object is going to have a push method and we're going to navigate the user to the correct page

68
00:04:16,930 --> 00:04:20,800
by providing an object with a name property set to job results.

69
00:04:21,460 --> 00:04:23,470
Save that, let pretty do its thing.

70
00:04:23,530 --> 00:04:25,630
We can see all of our tests are passing.

71
00:04:25,840 --> 00:04:26,800
So there we go.

72
00:04:27,070 --> 00:04:30,220
We're going to navigate one more time to my browser to double check everything.

73
00:04:31,000 --> 00:04:34,780
I'm just going to cancel this and refresh the whole page to make sure everything is registered.

74
00:04:35,050 --> 00:04:41,440
So, for example, if I navigate to page two and I select a job type, we should navigate back to page

75
00:04:41,440 --> 00:04:41,860
one.

76
00:04:41,860 --> 00:04:42,760
And indeed we do.

77
00:04:43,000 --> 00:04:45,340
If I select it, we should go back to page one as well.

78
00:04:45,700 --> 00:04:52,210
If I go to another page like let's say page three here, and then I select a sample organization, like

79
00:04:52,210 --> 00:04:55,420
if you and me, once again, we're taking to the first page our job results.

80
00:04:55,630 --> 00:04:57,400
So we're always going to land on page one.

81
00:04:57,520 --> 00:05:02,410
There's definitely going to be jobs on the first page instead of a page like eight, which we saw in

82
00:05:02,410 --> 00:05:03,160
the previous lesson.

83
00:05:03,310 --> 00:05:05,500
So this will address the bug as well.

84
00:05:05,800 --> 00:05:06,130
All right.

85
00:05:06,130 --> 00:05:10,390
So we've taken care of the bug in both this accordion and this accordion.

86
00:05:10,540 --> 00:05:14,740
And with that, we are good to wrap up this section of the course in the very next lesson.
