1
00:00:00,360 --> 00:00:01,350
All right.

2
00:00:01,350 --> 00:00:07,980
So in this lesson, we're finally going to connect our new skills search term property from our View

3
00:00:07,980 --> 00:00:12,630
X Store directly to our new job filter sidebar skills component.

4
00:00:12,960 --> 00:00:17,550
Before we get there, though, I want to do a quick review of our checkbox group component.

5
00:00:17,850 --> 00:00:22,770
This is one we've been building out over a couple of sections and I want to talk about some of the design

6
00:00:22,800 --> 00:00:26,880
design decisions that we made that we weren't too happy with in the previous sections.

7
00:00:27,240 --> 00:00:33,570
So as a reminder of how this component works, the way it works is it creates a local piece of state.

8
00:00:33,570 --> 00:00:38,250
And when I say local state, I simply mean a component state existing on this component.

9
00:00:38,550 --> 00:00:40,440
And that state is called selected values.

10
00:00:40,680 --> 00:00:47,340
And as the user selects checkboxes, we send a mutation to the store to accept that array of checkboxes

11
00:00:47,490 --> 00:00:51,090
so that the view store can store it and utilize it to get the filter jobs.

12
00:00:51,480 --> 00:00:57,270
And so the problem with this approach is that it requires us to keep our data in sync, our data in

13
00:00:57,270 --> 00:01:01,140
our component, as well as our data in the view store.

14
00:01:01,320 --> 00:01:04,290
And that is not great because it's prone to error, right?

15
00:01:04,560 --> 00:01:10,110
So we have to remember that every single time the user selects a checkbox, we have to inform the store

16
00:01:10,320 --> 00:01:12,060
that that a change has occurred.

17
00:01:12,390 --> 00:01:17,850
We also have to deal with the situation in reverse whenever the user committed this mutation by clicking

18
00:01:17,850 --> 00:01:22,260
the Clear Filters button that cleared all of the data in the store.

19
00:01:22,440 --> 00:01:27,780
However, it did not update the checkboxes because our component still had the local selected value

20
00:01:27,790 --> 00:01:28,220
stored.

21
00:01:28,560 --> 00:01:35,160
Thus, we had to utilize this strategy of using the subscribe method to listen for this specific mutation

22
00:01:35,400 --> 00:01:40,080
and react accordingly by clearing that local array to update the checkboxes.

23
00:01:40,350 --> 00:01:45,210
So this is an example of having to communicate to the store when the component changes, and this is

24
00:01:45,210 --> 00:01:49,080
an example of having to communicate to the component when the store changes, right?

25
00:01:49,290 --> 00:01:54,180
And it's prone to error because we have to remember to manually instrument these two pieces of code.

26
00:01:54,540 --> 00:01:59,160
And so my question is, can we do better, especially when it comes to our new skills component?

27
00:01:59,430 --> 00:02:01,650
And my answer is going to be yes.

28
00:02:01,650 --> 00:02:04,620
So that is the first bit of good news to show you in this lesson.

29
00:02:05,000 --> 00:02:07,560
Let's begin by opening up our skills component.

30
00:02:09,110 --> 00:02:09,530
All right.

31
00:02:09,830 --> 00:02:15,980
And so what I'm going to do here is I'm going to begin by getting our store into this component.

32
00:02:16,340 --> 00:02:20,200
We know that we're going to need to commit a mutation as the user types.

33
00:02:20,210 --> 00:02:25,460
Every time the user writes a character, we want to commit a mutation in order to get that skill search

34
00:02:25,460 --> 00:02:27,560
term into the View X Store.

35
00:02:27,860 --> 00:02:30,230
So just as a reminder and a better explanation.

36
00:02:31,400 --> 00:02:36,860
Whenever the user types we want to commit this mutation update skill search term and we want to send

37
00:02:36,860 --> 00:02:42,370
the data from this input right here to this mutation so that it can store the data in the view store.

38
00:02:42,740 --> 00:02:42,950
All right.

39
00:02:42,950 --> 00:02:44,540
So we need to get the store in order to do that.

40
00:02:44,810 --> 00:02:46,400
So I'm going to start by importing.

41
00:02:47,680 --> 00:02:52,400
The use store function, and that's going to come from the U.S. in order to access the store.

42
00:02:52,420 --> 00:02:54,070
I'm also going to need my key.

43
00:02:54,400 --> 00:02:59,880
So I'm going to import key, and that is going to come from the source directory and the store folder

44
00:02:59,880 --> 00:03:01,090
of the index file there.

45
00:03:01,540 --> 00:03:05,230
And then I also know that at some point I'm going to need to commit this mutation.

46
00:03:05,230 --> 00:03:07,320
So let's import that constant right here.

47
00:03:07,720 --> 00:03:09,910
So that constant of course is update.

48
00:03:11,050 --> 00:03:17,140
Skills search term and that is going to come from the source directory store constants.

49
00:03:17,980 --> 00:03:18,480
All right.

50
00:03:18,490 --> 00:03:22,570
And then let's begin by writing our setup method using the composition API.

51
00:03:22,930 --> 00:03:24,730
And first, I'm going to get my store.

52
00:03:25,030 --> 00:03:28,210
So comp store equals use store passing in our key.

53
00:03:29,990 --> 00:03:31,760
And here is the next question.

54
00:03:31,760 --> 00:03:31,960
Right.

55
00:03:32,270 --> 00:03:33,980
So what do we want to do here?

56
00:03:34,010 --> 00:03:40,850
Well, we know, based on our earlier learnings in view that a very simple approach to creating two

57
00:03:40,850 --> 00:03:44,510
way data binding in our component is by using the V model directive.

58
00:03:44,870 --> 00:03:50,840
So let me scroll up here and I'm going to add a V model to this input and I'm going to provide a name

59
00:03:50,840 --> 00:03:53,930
here called Skills Search Term.

60
00:03:55,820 --> 00:04:02,150
Now I know that this name does not exist yet, so it's going to be our responsibility to return it right

61
00:04:02,150 --> 00:04:03,320
here from our setup method.

62
00:04:03,680 --> 00:04:09,050
But as a quick reminder of how the model works, it creates two way data binding, which means a connection

63
00:04:09,050 --> 00:04:11,420
between our template and our data.

64
00:04:11,690 --> 00:04:15,080
The reason it's called Two Way is because it flows in both directions.

65
00:04:15,260 --> 00:04:21,200
When the data updates on the JavaScript or Typekit side, that change is immediately reflected in the

66
00:04:21,200 --> 00:04:25,250
component and vice versa when a change is made from the template side.

67
00:04:25,370 --> 00:04:30,470
In other words, when the user types a character, that change becomes reflected in the data side of

68
00:04:30,470 --> 00:04:30,830
things.

69
00:04:31,100 --> 00:04:36,170
So the two components here, and when I say components, I mean pieces are the HTML, the template,

70
00:04:36,170 --> 00:04:37,940
and the data belong to the component.

71
00:04:38,150 --> 00:04:41,340
So almost like this template section and the script section, right?

72
00:04:41,370 --> 00:04:45,380
And two way data binding, which means we have a connection from this to this and from this to that

73
00:04:45,380 --> 00:04:46,190
both directions.

74
00:04:46,190 --> 00:04:46,480
Right.

75
00:04:47,270 --> 00:04:52,640
So previously we used the model to connect an input to something like local component state.

76
00:04:52,640 --> 00:04:52,970
Right.

77
00:04:53,090 --> 00:04:57,530
If we were using the options API, we would use the data method and we would define something that we

78
00:04:57,530 --> 00:04:58,730
would be able to overwrite.

79
00:04:59,030 --> 00:05:03,860
And if we were using the composition API, we would use something like the ref function in order to

80
00:05:03,860 --> 00:05:06,440
create a local piece of data that we can then update.

81
00:05:06,680 --> 00:05:11,570
So that's the exact same approach we used in our checkbox group, but we saw that that had its own issues.

82
00:05:11,990 --> 00:05:18,650
So what I'd like to do is to be able to connect the model and use the same logic, but I want to connect

83
00:05:18,650 --> 00:05:25,100
it to our view store instead of creating two way data binding between my components template and the

84
00:05:25,100 --> 00:05:25,670
data.

85
00:05:26,060 --> 00:05:32,840
I want to create a two way data binding between my components template and the view store data and going

86
00:05:32,840 --> 00:05:38,660
two ways, which means as the component updates as the user types, I want to immediately inform the

87
00:05:38,660 --> 00:05:45,350
View Store and if the View Store updates, I want to also immediately inform the component.

88
00:05:45,860 --> 00:05:51,620
So maybe a really easy visual way that I can describe this if I open it my state file is the traditional

89
00:05:51,620 --> 00:05:55,520
use of model is connecting this section of the file to this section of the file.

90
00:05:55,790 --> 00:05:59,330
I now want to connect this section of the file to this U.S. store.

91
00:05:59,780 --> 00:06:02,990
When the user does something here, I want to commit a mutation to change this.

92
00:06:03,200 --> 00:06:07,550
And when this changes is I want to make sure that information is reflected back to here.

93
00:06:08,420 --> 00:06:08,700
All right.

94
00:06:08,900 --> 00:06:12,650
And we're going to be able to solve that using a solution that we have not seen before.

95
00:06:12,960 --> 00:06:15,250
It's going to require us to use the computed functions.

96
00:06:15,260 --> 00:06:16,940
Let me begin by importing computed.

97
00:06:19,320 --> 00:06:24,900
And then we know that we're going to need a name in our template called Skills Search Term.

98
00:06:24,930 --> 00:06:29,590
So what I'm going to do here is just define that name skills search term, right?

99
00:06:29,690 --> 00:06:32,040
And we'll provide an assignment for it in just a second.

100
00:06:32,280 --> 00:06:36,870
But we know whatever we assign it to you, no matter what, we're going to need to ultimately return

101
00:06:36,870 --> 00:06:37,050
it.

102
00:06:37,470 --> 00:06:41,970
So it is available in our template because that is the thing that is going to connect to the model.

103
00:06:42,420 --> 00:06:42,750
All right.

104
00:06:43,500 --> 00:06:44,520
So here's what we're going to do.

105
00:06:45,000 --> 00:06:47,700
What I'm going to do is use my computed function.

106
00:06:47,700 --> 00:06:48,780
So I'm going to invoke it.

107
00:06:49,260 --> 00:06:54,390
And so far, every single time that we have used computed throughout the course, we have always passed

108
00:06:54,390 --> 00:06:55,800
that a function, right?

109
00:06:55,980 --> 00:06:58,530
That function represents the logic for future erosion.

110
00:06:58,530 --> 00:07:03,300
Whenever any part of the reactive object it references changes that function, he writes.

111
00:07:03,690 --> 00:07:09,390
However, there is an alternative syntax that we can utilize with the computed function and it is passing

112
00:07:09,390 --> 00:07:10,290
it an object.

113
00:07:11,670 --> 00:07:17,670
Now, if you choose to pass it an object, that object must have two methods and they must be named

114
00:07:17,670 --> 00:07:18,960
exactly this.

115
00:07:19,290 --> 00:07:24,450
The first method must be called get and the second method must be called set.

116
00:07:25,750 --> 00:07:26,110
Okay.

117
00:07:26,380 --> 00:07:32,710
And the way you can think of this is as a way to provide a more complex way to both read and write data

118
00:07:32,830 --> 00:07:36,040
to whatever this computed piece of state is going to be.

119
00:07:36,550 --> 00:07:41,500
So in our scenario, we want our computed piece of data to be something called skill search term, and

120
00:07:41,500 --> 00:07:45,460
we want to directly connected to this property right here.

121
00:07:46,210 --> 00:07:51,520
So what we need to do in get is to explain, to view how to get access to this thing right here.

122
00:07:51,880 --> 00:07:56,440
And in our set method, we need to explain, to view how to write to this thing right here.

123
00:07:56,710 --> 00:07:58,180
Getting means reading.

124
00:07:58,180 --> 00:07:59,410
Setting means writing.

125
00:07:59,740 --> 00:08:02,200
And remember, we have access to our store right here.

126
00:08:02,500 --> 00:08:03,520
So let's begin with get.

127
00:08:04,600 --> 00:08:07,810
How do we explain to you what we want to get access to?

128
00:08:07,960 --> 00:08:11,650
We want to get access to this specific property on our store.

129
00:08:11,710 --> 00:08:13,120
That is our read process.

130
00:08:13,450 --> 00:08:16,330
So what I'm going to do here is I'm going to return from this method.

131
00:08:16,660 --> 00:08:19,780
We know we have a reference to our store above on line 29.

132
00:08:19,990 --> 00:08:21,820
That is our complete view store.

133
00:08:22,120 --> 00:08:27,190
And we also know that the store has a state property and that it's going to return the state on the

134
00:08:27,190 --> 00:08:27,940
right hand side.

135
00:08:28,210 --> 00:08:31,720
And on my state, I have a property called Skills Search Term.

136
00:08:32,870 --> 00:08:33,270
Okay.

137
00:08:33,530 --> 00:08:40,160
So what I'm doing now is I'm providing this reference to this thing right here, and because I'm wrapping

138
00:08:40,160 --> 00:08:43,730
it in a computed function view is going to keep track of this thing right here.

139
00:08:44,150 --> 00:08:50,780
So in other words, if this term updates in my view store, this get method will rerun it to get that

140
00:08:50,780 --> 00:08:51,380
new value.

141
00:08:51,680 --> 00:08:54,980
And because we've connected get right here to our remodel.

142
00:08:55,130 --> 00:09:01,640
That means the component will render that value as the text input inside that input.

143
00:09:01,820 --> 00:09:07,130
In other words, if I were to manually change the skill search term to a string like developer because

144
00:09:07,130 --> 00:09:12,680
this logic would rerun and evaluate to developer, this input would then show the text developer.

145
00:09:13,100 --> 00:09:19,040
So what I've done here with the get is create a connection from my view store to my V model in this

146
00:09:19,040 --> 00:09:20,390
direction from right to left.

147
00:09:20,750 --> 00:09:26,300
Now what I need to do is create a connection in the opposite direction when the user types a character

148
00:09:26,300 --> 00:09:26,660
here.

149
00:09:26,810 --> 00:09:30,830
I want to set the new value for skill search term right here.

150
00:09:31,520 --> 00:09:33,320
Well, how do I set a new value?

151
00:09:33,470 --> 00:09:35,150
I need to commit a mutation.

152
00:09:35,540 --> 00:09:41,150
So in the set, I describe how this reactive piece of data called skill search term is going to update.

153
00:09:41,450 --> 00:09:43,730
So it's going to be read from the store.

154
00:09:43,910 --> 00:09:48,380
And in order to update it, we're going to update the store when we have access to our store.

155
00:09:49,450 --> 00:09:52,990
And we know that in order to run a mutation, we have to call the commit method.

156
00:09:54,200 --> 00:09:54,530
Right.

157
00:09:54,710 --> 00:09:58,100
The first argument to the commit method is going to be the mutation we want to run.

158
00:09:58,460 --> 00:10:01,700
And so the mutation we're going to want to run is update skills signature.

159
00:10:02,090 --> 00:10:06,620
Now, that mutation, of course, requires an additional argument right here, and that is going to

160
00:10:06,620 --> 00:10:08,070
be the actual skill search term.

161
00:10:08,090 --> 00:10:10,790
So where do we get that from since we don't have any local state?

162
00:10:11,210 --> 00:10:17,600
Well, if we follow this logic right here and we connect it to our V model view will automatically pass

163
00:10:17,600 --> 00:10:22,850
the string or the latest version of the string that the users typed as the first parameter to set.

164
00:10:23,240 --> 00:10:25,310
So I'm going to call that parameter value.

165
00:10:26,440 --> 00:10:28,540
And it is going to represent whatever the user has typed.

166
00:10:29,020 --> 00:10:34,990
So to reiterate, if the user, for example, types of letter A, then this logic will run passing in

167
00:10:34,990 --> 00:10:40,870
the letter A then if the user types in another letter like L, our new string strings al so this set

168
00:10:40,870 --> 00:10:43,540
method will run one more time with a value of a l.

169
00:10:43,810 --> 00:10:49,270
So value is going to represent the most latest up to date value from the user typing in into this thing

170
00:10:49,270 --> 00:10:49,510
here.

171
00:10:50,230 --> 00:10:54,730
Now what I want to do with that value is provide that as the argument for my skills search firm.

172
00:10:54,910 --> 00:10:57,970
So I'm going to pass it in as the second argument to the commit method.

173
00:10:59,470 --> 00:10:59,710
Okay.

174
00:10:59,710 --> 00:11:03,700
Looks like I have a little bit of a mismatch because this is skills at search term and this also needs

175
00:11:03,700 --> 00:11:06,700
to be skills search term and that makes that air go away.

176
00:11:07,120 --> 00:11:08,530
So what have we done here?

177
00:11:08,770 --> 00:11:15,220
We have emulated the exact same functionality as the model does with local data, but instead of using

178
00:11:15,220 --> 00:11:23,080
local component data with ref, we've now connected it to global data stored in the U.S. get explains

179
00:11:23,080 --> 00:11:27,730
how that react of data changes or where to read it from, where to get that value from.

180
00:11:27,850 --> 00:11:31,630
We told it use this property right here, know that it's this thing right here.

181
00:11:31,990 --> 00:11:35,680
And whenever the user types, the model is going to run this thing right here.

182
00:11:35,920 --> 00:11:40,840
And what that's going to do is commit a mutation each time the user types, a character that ships off

183
00:11:40,840 --> 00:11:46,510
the latest user entry, the latest user text, the latest user string to this mutation, which in turn

184
00:11:46,510 --> 00:11:52,120
will update this property right here because this property updates right here, the Get Method reruns,

185
00:11:52,240 --> 00:11:57,940
which in turn it renders that piece of text in our input feel set almost as a full trip around.

186
00:11:58,210 --> 00:12:02,380
I'm kind of drawing my mouse in the circle here to reflect the direction that this thing is happening.

187
00:12:02,380 --> 00:12:02,620
Right?

188
00:12:02,800 --> 00:12:07,000
The user is going to type a character, which is going to shoot off the set method, which is going

189
00:12:07,000 --> 00:12:12,340
to commit a mutation that is going to change the state, which will force get to rerun because this

190
00:12:12,340 --> 00:12:17,080
reactive reference changed, which will force this to get the latest skill search term saved right here,

191
00:12:17,200 --> 00:12:21,240
which will be whatever the user typed, which is connected to the model through this skill search term

192
00:12:21,240 --> 00:12:25,450
name and will thus reflect in the user's entry that they see on screen.

193
00:12:25,930 --> 00:12:26,230
All right.

194
00:12:26,230 --> 00:12:27,490
So hopefully it makes sense.

195
00:12:27,490 --> 00:12:31,510
Even though this is a complex syntax, we're basically using the same computer logic.

196
00:12:31,630 --> 00:12:33,010
We are reacting to change.

197
00:12:33,130 --> 00:12:38,140
We're just being a little bit more specific as to how we read that change and how we change that change

198
00:12:38,140 --> 00:12:39,130
or update that change.

199
00:12:39,460 --> 00:12:41,590
So let's see how this is going to work in my browser.

200
00:12:42,310 --> 00:12:44,020
So I'm going to transition to Chrome right now.

201
00:12:45,080 --> 00:12:49,580
And what I'd like to do here is open up my view developer tools.

202
00:12:50,780 --> 00:12:54,620
And what I want to do is keep track of the very store state.

203
00:12:54,950 --> 00:13:00,410
So right here in this panel, I'm going to select View X and you can see right here that our skill search

204
00:13:00,410 --> 00:13:01,370
term is empty.

205
00:13:01,880 --> 00:13:07,250
And you'll notice that as I type a character here, because we connected our set method from the computed

206
00:13:07,250 --> 00:13:13,310
property that's referenced by the model to this as I type the letter A that's going to commit the mutation

207
00:13:13,430 --> 00:13:18,740
sending off the value of A, which is then going to override skill search term with A, which will force

208
00:13:18,740 --> 00:13:21,170
that get method in our computed function to rerun.

209
00:13:21,710 --> 00:13:26,930
Thus updating this and as I type more characters here, each time we're going to commit that mutation

210
00:13:26,930 --> 00:13:31,100
again and thus it's going to affect the skill search term right here.

211
00:13:31,850 --> 00:13:35,390
Keep in mind that this relationship exists in two directions.

212
00:13:35,570 --> 00:13:39,320
We have two way data binding, and right now we're only seeing one way.

213
00:13:39,440 --> 00:13:45,020
We see that when the user edits the template, we are sending off that data to our View X Store.

214
00:13:45,170 --> 00:13:49,790
So the connection exists from here to here, but it also is going to exist in reverse.

215
00:13:50,000 --> 00:13:55,820
So right here, if I talk to the data, which is now not local component data but view stored data,

216
00:13:56,090 --> 00:14:02,300
if I change this to something else like Hello, because our get method knows that it's referencing this

217
00:14:02,300 --> 00:14:04,820
property, it will re-evaluate itself, right?

218
00:14:05,030 --> 00:14:09,320
Which in turn will update it and thus will update that template value right here.

219
00:14:09,530 --> 00:14:12,200
So as soon as I click save, take a look.

220
00:14:12,200 --> 00:14:13,730
This input field has changed.

221
00:14:14,420 --> 00:14:17,720
So two way data binding between our template and our data.

222
00:14:17,870 --> 00:14:21,140
When our template changes, so does our data right here in state.

223
00:14:21,320 --> 00:14:24,230
And when our state changes, so does our template right here.

224
00:14:24,410 --> 00:14:26,570
The connection goes in two directions.

225
00:14:26,780 --> 00:14:28,850
Therefore, it is two way data binding.

226
00:14:29,000 --> 00:14:30,470
Why is it called data binding?

227
00:14:30,590 --> 00:14:31,880
Because our data is bound.

228
00:14:31,880 --> 00:14:34,460
Bound means connected together to something.

229
00:14:34,730 --> 00:14:39,470
This template is connected to this and the state is connected to the template.

230
00:14:39,870 --> 00:14:40,340
All right.

231
00:14:40,430 --> 00:14:43,190
And by by doing the solution, what is the advantage here?

232
00:14:43,190 --> 00:14:48,290
We don't need to now keep our component state in sync with our of U.S. store state.

233
00:14:48,500 --> 00:14:51,140
That is the problem we had with our checkbox group.

234
00:14:51,320 --> 00:14:57,500
We needed to make sure that you store knew right here that when we check this that it also would update

235
00:14:57,500 --> 00:15:00,860
this selected degrees array and that's when this thing changed.

236
00:15:00,950 --> 00:15:06,710
We also needed to inform the the template that that our view store changed and now we've gotten rid

237
00:15:06,710 --> 00:15:11,900
of local component state and simply allowed the V model directive to depend on the view store state

238
00:15:11,900 --> 00:15:12,500
to start.

239
00:15:12,710 --> 00:15:16,400
There is no more data duplication, there is no more data sync issues.

240
00:15:16,910 --> 00:15:20,510
All right, so I know it's been a long lesson, but hopefully this has been helpful and it certainly

241
00:15:20,510 --> 00:15:26,330
is a very cool feature of computed and that function that was introduced into U three.

242
00:15:26,720 --> 00:15:27,020
All right.

243
00:15:27,020 --> 00:15:28,640
That's all there is to cover in this lesson.

244
00:15:28,730 --> 00:15:30,290
So I will see you in the next one.
