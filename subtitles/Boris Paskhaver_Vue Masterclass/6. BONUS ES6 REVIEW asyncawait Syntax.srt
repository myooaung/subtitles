1
00:00:00,530 --> 00:00:01,250
All right.

2
00:00:01,250 --> 00:00:07,130
So in this lesson, I want to do a quick review of async await syntax, which allows us to write this

3
00:00:07,130 --> 00:00:09,950
promise based syntax in a much cleaner format.

4
00:00:10,160 --> 00:00:15,530
If you are comfortable with async await, which we have used earlier in the course, primarily in our

5
00:00:15,530 --> 00:00:18,080
just tests, you can feel free to skip this lesson.

6
00:00:18,080 --> 00:00:22,250
Otherwise, feel free to stick around to take a look at what async await offers us.

7
00:00:22,580 --> 00:00:28,430
So the first thing to know is that async await is still the promise based then syntax under the hood.

8
00:00:28,640 --> 00:00:35,030
It is called syntactic sugar, which basically means that it is not offering any new functionality,

9
00:00:35,180 --> 00:00:40,880
but rather it is a shortcut or a simpler way to utilize an existing functionality.

10
00:00:40,880 --> 00:00:47,330
So under the hood JavaScript will look at our async, await syntax, and it's going to transform that

11
00:00:47,330 --> 00:00:49,370
into syntax that looks exactly like this.

12
00:00:49,580 --> 00:00:54,860
The only reason why async await is available is to make our lives as developers easier.

13
00:00:55,070 --> 00:00:57,950
So let me show you the two syntax options side by side.

14
00:00:57,950 --> 00:01:03,200
I'm going to wrap our existing functionality into a function just so I can create two separate functions

15
00:01:03,350 --> 00:01:07,190
one with the promise based syntax and one with the async await syntax.

16
00:01:07,520 --> 00:01:12,320
So right here I'm just going to create an arrow function called Fetch Jobs V1.

17
00:01:12,320 --> 00:01:14,270
V1 is just short for version one.

18
00:01:14,270 --> 00:01:19,520
It's the first way that we can make this request and in that function body, I'm just going to drag

19
00:01:19,520 --> 00:01:22,940
our previous code at the bottom of this file.

20
00:01:22,940 --> 00:01:27,800
I'm going to invoke Fetch Job Z one and we can just double check that it works as expected.

21
00:01:28,040 --> 00:01:35,030
So I'm going to bring up my terminal and I'm going to run my node command and I'm going to run my playground

22
00:01:35,030 --> 00:01:36,860
file in my source directory.

23
00:01:37,280 --> 00:01:42,290
So it takes a second, then it makes a request to my running JSON server and it gets the response perfect.

24
00:01:42,560 --> 00:01:46,460
Now let me show you how we can write the exact same function using async await syntax.

25
00:01:46,460 --> 00:01:53,090
So I'm going to declare another arrow function called Fetch Jobs v2 and I'm going to declare this arrow

26
00:01:53,090 --> 00:01:53,780
function volume.

27
00:01:54,110 --> 00:01:59,510
So an asynchronous function is one in which there is one or more asynchronous operations.

28
00:01:59,510 --> 00:02:01,310
What is an asynchronous operation?

29
00:02:01,520 --> 00:02:06,560
It is an operation that will take some amount of time that we cannot predict in advance.

30
00:02:06,560 --> 00:02:06,890
Right.

31
00:02:07,100 --> 00:02:11,120
So an example of something that is asynchronous is making a request to a server.

32
00:02:11,420 --> 00:02:15,290
We don't know whether it will take 1/2, 5 seconds, half a second.

33
00:02:15,500 --> 00:02:16,250
We don't know.

34
00:02:16,250 --> 00:02:21,020
And ultimately what we want to tell JavaScript is we can't predict how long it will take, but when

35
00:02:21,020 --> 00:02:24,470
that process completes, then run this additional piece of logic.

36
00:02:24,830 --> 00:02:27,170
So that's exactly what this syntax right here is doing.

37
00:02:27,380 --> 00:02:33,620
This promise based syntax allows us to execute some bit of JavaScript code, such as a console.log when

38
00:02:33,650 --> 00:02:35,330
the request is done running.

39
00:02:35,630 --> 00:02:41,000
And that is the asynchronous operation and the promise implementation is how JavaScript solves that

40
00:02:41,000 --> 00:02:45,020
problem of running some bit of code at some moment in the future.

41
00:02:45,740 --> 00:02:46,010
Right?

42
00:02:46,010 --> 00:02:48,920
Another example is reading a file from your file system.

43
00:02:49,010 --> 00:02:52,940
You don't know whether that will take a 10th of a second or 9/10 of a second.

44
00:02:52,940 --> 00:02:54,800
It's not a simple JavaScript operation.

45
00:02:54,950 --> 00:02:56,660
It can depend on your computer speed.

46
00:02:56,780 --> 00:02:58,430
It can depend on the size of the file.

47
00:02:58,580 --> 00:03:01,850
Whenever you read a file, you typically follow the exact same syntax.

48
00:03:01,850 --> 00:03:07,160
You use a promise and then tell JavaScript once, once what to do once it has successfully read that

49
00:03:07,160 --> 00:03:08,030
file into memory.

50
00:03:08,090 --> 00:03:08,360
Right?

51
00:03:08,750 --> 00:03:13,760
So when we use async await, we have to mark the function as being asynchronous.

52
00:03:13,760 --> 00:03:18,620
If the function is going to do something that is going to take some amount of time, we have to mark

53
00:03:18,620 --> 00:03:19,850
the function as async.

54
00:03:21,230 --> 00:03:25,460
Now keep in mind, some amount of time may be something that we as humans cannot perceive.

55
00:03:25,460 --> 00:03:25,760
Right?

56
00:03:25,940 --> 00:03:32,390
The request to the API may take 3/10 of a second or 1/10 of a second, and we may not be able to note

57
00:03:32,390 --> 00:03:33,680
that difference as human beings.

58
00:03:33,920 --> 00:03:37,880
The point is to communicate to the programming language that there will be something that, from its

59
00:03:37,880 --> 00:03:40,970
perspective, can take some unpredictable amount, amount of time.

60
00:03:41,210 --> 00:03:41,540
All right.

61
00:03:41,990 --> 00:03:46,820
So the way this works is wherever we are doing that asynchronous operation.

62
00:03:47,090 --> 00:03:52,760
In other words, whenever we have an operation that will return a promise such as the Axios get method,

63
00:03:52,940 --> 00:03:56,000
we're going to prefix that with the a weight keyword.

64
00:03:56,660 --> 00:04:00,800
So if you have an async function, you have to use the awake keyword somewhere.

65
00:04:00,950 --> 00:04:05,690
And alternatively, if you have the awake keyword somewhere in line, that means you're doing some kind

66
00:04:05,690 --> 00:04:09,350
of asynchronous operation and you need to make sure that you use the async keyword.

67
00:04:09,560 --> 00:04:11,700
So these two are meant to be used in tandem.

68
00:04:11,720 --> 00:04:14,990
You'll never find a function where you're going to have one, but not the other.

69
00:04:15,140 --> 00:04:16,550
They're meant to be used together.

70
00:04:16,940 --> 00:04:19,640
So right here I'm going to await Axios dot yet.

71
00:04:19,640 --> 00:04:24,830
So I have to await something that will return a promise and the get method on the Axios library, it

72
00:04:24,830 --> 00:04:25,800
returns a promise.

73
00:04:25,820 --> 00:04:27,200
So this is totally valid.

74
00:04:27,440 --> 00:04:30,140
Now, of course, we do have to provide get with a URL to fetch.

75
00:04:30,140 --> 00:04:34,160
So I'm going to provide the reference to the URL constant that we have right here.

76
00:04:34,580 --> 00:04:41,330
So this is going to get the request and it's going to return the final object, which is going to be

77
00:04:41,330 --> 00:04:42,590
this response object.

78
00:04:42,830 --> 00:04:46,100
So I'm going to assign this to a constant called response.

79
00:04:47,520 --> 00:04:47,880
All right.

80
00:04:48,060 --> 00:04:52,710
And then to emulate what I want, what I what I've done before in the previous implementation of the

81
00:04:52,710 --> 00:04:53,160
function.

82
00:04:53,340 --> 00:04:56,430
I'm just going to console.log response data.

83
00:04:58,550 --> 00:05:02,450
So why do most few people prefer the async await syntax?

84
00:05:02,570 --> 00:05:05,060
Because it tends to be a lot easier to read, right?

85
00:05:05,060 --> 00:05:10,730
It reads top down, there's less nesting and it kind of reads logically as a human being would perceive

86
00:05:10,730 --> 00:05:10,850
it.

87
00:05:10,850 --> 00:05:15,560
It's basically says, wait until this is done, wait until this is complete.

88
00:05:15,740 --> 00:05:20,510
And then whatever you get back from this asynchronous operation, save it to a response constant and

89
00:05:20,510 --> 00:05:21,590
then do something with it.

90
00:05:21,890 --> 00:05:27,650
The important thing to note is that JavaScript will block execution while this process completes.

91
00:05:27,650 --> 00:05:33,650
So when JavaScript reaches line 12, as it waits for Axios to finish that request, it is not going

92
00:05:33,650 --> 00:05:35,390
to run line 13.

93
00:05:35,450 --> 00:05:39,950
So that await syntax blocks the further execution until the process completes.

94
00:05:40,130 --> 00:05:44,390
So if this process fails or doesn't complete, then we're never going to actually get to line 13.

95
00:05:44,630 --> 00:05:49,490
But from a user perspective, from a developer perspective, I still think this is significantly easier

96
00:05:49,490 --> 00:05:51,320
to read than something like this.

97
00:05:51,740 --> 00:05:51,980
Right.

98
00:05:52,730 --> 00:05:58,430
So what I'm going to do below is I'm going to invoke our new function, fetch jobs v2, make sure to

99
00:05:58,430 --> 00:05:59,570
invoke it with parentheses.

100
00:05:59,570 --> 00:06:04,580
And when I run the file, it should give us the exact same output.

101
00:06:04,820 --> 00:06:10,460
Keep in mind that this async await syntax is only available in the more modern versions of Node.js,

102
00:06:10,460 --> 00:06:13,850
so you should make sure you're running a modern alts version of Node.

103
00:06:14,030 --> 00:06:18,550
If for some reason, Node gives you an error that says something like I don't understand async await,

104
00:06:18,560 --> 00:06:22,580
it probably means that you should update node, but let's see what happens when I run this.

105
00:06:22,940 --> 00:06:28,670
You can see we get the exact same result because under the hood this is the exact same as this.

106
00:06:28,670 --> 00:06:30,080
There's no technical difference.

107
00:06:30,290 --> 00:06:36,590
This is just a shorthand or a shortcut by which we can implement this exact same functionality using

108
00:06:36,590 --> 00:06:38,840
an alternate collection of keywords.

109
00:06:38,960 --> 00:06:44,930
It is called syntactic sugar because you could say it is sweeter or nicer than this version, but there's

110
00:06:44,930 --> 00:06:46,250
nothing actually new in it.

111
00:06:46,250 --> 00:06:52,610
It's just a a different way to write something else that is simpler and cleaner for the benefit of the

112
00:06:52,610 --> 00:06:53,090
developer.

113
00:06:53,090 --> 00:06:54,860
That is all that syntactic sugar means.

114
00:06:55,160 --> 00:07:01,610
Okay, so now that we are comfortable using the async await syntax, we can use it in our job listings

115
00:07:01,610 --> 00:07:04,530
component to modify our fetching of the jobs.

116
00:07:04,550 --> 00:07:05,930
We'll do that in the very next lesson.
