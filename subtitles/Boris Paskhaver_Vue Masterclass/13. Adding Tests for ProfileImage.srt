1
00:00:00,510 --> 00:00:01,410
All right.

2
00:00:01,410 --> 00:00:08,370
So let's begin this lesson by running our alternate test command, which is going to be NPM run test,

3
00:00:08,580 --> 00:00:09,540
colon unit.

4
00:00:09,810 --> 00:00:13,350
This, of course, is not going to run just in watch mode.

5
00:00:13,500 --> 00:00:17,100
But in this mode, we are going to see a code coverage report.

6
00:00:17,400 --> 00:00:24,180
And we can see right here that the profile image has a few uncovered lines, more specifically, line

7
00:00:24,180 --> 00:00:24,750
number nine.

8
00:00:25,080 --> 00:00:30,270
So what this is telling us is there is no test in our test suite currently that is running through line

9
00:00:30,270 --> 00:00:32,010
number nine in profile image.

10
00:00:32,190 --> 00:00:36,690
And to actually be more exact, this is a little bit of a distorted statement.

11
00:00:36,840 --> 00:00:40,620
There's really nothing that is going through profile image at all right now.

12
00:00:40,770 --> 00:00:47,040
And I want to talk about why that is, because the changes that we made in the previous lesson did affect

13
00:00:47,040 --> 00:00:47,880
our code coverage.

14
00:00:48,210 --> 00:00:54,120
So previously we were full mounting our main NAV, which means that all child components were being

15
00:00:54,120 --> 00:00:55,230
rendered in a test.

16
00:00:55,440 --> 00:00:58,470
And we of course were focused on sub nav in the previous lesson.

17
00:00:58,650 --> 00:01:05,010
But our main nav component also has this profile image and action button child components as well.

18
00:01:05,400 --> 00:01:12,060
So when we switched our tests to shallow mounts view stubbed out these components, right?

19
00:01:12,180 --> 00:01:18,420
And as a result the tests never fully rendered the profile image and never fully rendered the action

20
00:01:18,420 --> 00:01:20,880
button in the tests for the main NAV.

21
00:01:21,120 --> 00:01:26,190
Now that can be okay if we have separate tests for these components and their functionality.

22
00:01:26,430 --> 00:01:32,400
But given that we were previously rendering a profile image in May, now we had the coverage for that

23
00:01:32,400 --> 00:01:35,610
because our code was running through that components code.

24
00:01:35,880 --> 00:01:39,960
Once we shifted to shallow amount, we lost that code coverage.

25
00:01:40,380 --> 00:01:46,470
Now, as a quick reminder, 100% code coverage is an ideal, but it's not a perfect standard standard

26
00:01:46,470 --> 00:01:50,760
in the real world, there are certain situations where you don't necessarily have to feel guilty if

27
00:01:50,760 --> 00:01:56,220
you have, you know, 90% test coverage or 95, there's certain elements that are difficult to unit

28
00:01:56,220 --> 00:02:00,570
test or certain elements that don't really benefit from unit tests.

29
00:02:00,570 --> 00:02:02,190
So let me give you an example here.

30
00:02:02,220 --> 00:02:08,220
If I open up my profile image component, there's really not that much business logic that is going

31
00:02:08,220 --> 00:02:08,670
on here.

32
00:02:08,850 --> 00:02:14,910
We have used a component of view, which is the data, but it really is just a hard coded URL that is

33
00:02:14,910 --> 00:02:15,810
not changing.

34
00:02:15,930 --> 00:02:21,510
So there's really no difference between this design versus simply putting the image link right here

35
00:02:21,510 --> 00:02:23,250
as our direct is our C value.

36
00:02:23,430 --> 00:02:27,060
And if that was the case, we basically have a hardcoded image tag, right?

37
00:02:27,240 --> 00:02:31,310
There's no real variation or user interaction or any business logic.

38
00:02:31,320 --> 00:02:33,960
It's basically the equivalent of a DIV or an H1.

39
00:02:33,960 --> 00:02:36,630
It's just something static that is always going to stay the same.

40
00:02:36,840 --> 00:02:41,490
So if I were looking at something like this, I'd say, it's okay if the profile image isn't tested.

41
00:02:41,910 --> 00:02:45,480
It's not necessarily a bad thing if it is, but it's not the worst thing in the world if it isn't,

42
00:02:45,480 --> 00:02:51,300
because there's not that many ways that this component can go wrong or behave unexpectedly.

43
00:02:51,690 --> 00:02:56,820
With that said, if we want to achieve 100% test coverage, we can write a very basic test for profile

44
00:02:56,820 --> 00:02:59,310
image, and that's what we're going to do in this lesson.

45
00:02:59,520 --> 00:03:01,500
So let's go ahead and head to our.

46
00:03:03,150 --> 00:03:05,670
Tests, directory tests, unit components.

47
00:03:05,670 --> 00:03:08,610
And in here I'm going to create a test for our profile image.

48
00:03:08,910 --> 00:03:12,320
So I'll call this file profile image test dot js.

49
00:03:13,860 --> 00:03:15,600
And I'm going to put this on the right hand side.

50
00:03:15,960 --> 00:03:18,190
We should be pretty familiar with the drill by now.

51
00:03:18,210 --> 00:03:23,750
I'm going to import a function and there are no actual nested child components in here.

52
00:03:23,760 --> 00:03:26,580
So it doesn't really matter whether we use mount or shallow mount.

53
00:03:26,790 --> 00:03:32,730
I'm going to use shallow mount in this case and I'm going to import it from view test utils.

54
00:03:33,030 --> 00:03:37,710
I'm going to import the component I'm testing, which is called profile image that's going to come from

55
00:03:37,710 --> 00:03:41,880
the top at side, which is the source directory components profile image.

56
00:03:43,570 --> 00:03:45,670
Let me make sure I have that correctly profile image.

57
00:03:45,850 --> 00:03:49,030
Let me describe what I'm testing, which is going to be the profile image.

58
00:03:50,290 --> 00:03:55,960
And for a very simple test, you're going to see this sometimes in very various code bases.

59
00:03:56,170 --> 00:04:00,970
The simplest test you could write is basically checking that if you mount the component using view that

60
00:04:00,970 --> 00:04:05,950
it renders that it basically exists, that nothing has gone wrong in the mounting process, basically

61
00:04:06,310 --> 00:04:09,430
standing up this component and making sure that everything is A-OK.

62
00:04:09,790 --> 00:04:12,040
So here I'm going to write simply it renders.

63
00:04:14,100 --> 00:04:14,580
All right.

64
00:04:14,580 --> 00:04:19,920
So right here, we're going to do a concert rapper and we're going to shallow mount our profile image

65
00:04:19,920 --> 00:04:20,400
component.

66
00:04:21,240 --> 00:04:28,230
And as a reminder, this rapper is going to return a the component mounted and wrapped in a helper object

67
00:04:28,230 --> 00:04:30,870
that has a whole bunch of methods for interacting with that component.

68
00:04:31,110 --> 00:04:36,930
And as you may recall, one method that is available is exists that's simply going to return true if

69
00:04:36,930 --> 00:04:43,470
that value exists, whether it be a component or a node within the component, such as an HTML element

70
00:04:43,980 --> 00:04:45,030
when you're searching, right?

71
00:04:45,090 --> 00:04:49,710
It's basically just double checking that it's not a undefined or null or absent value.

72
00:04:49,710 --> 00:04:55,740
So if we successfully shallow mount the profile image component, the exists method on the wrapper should

73
00:04:55,740 --> 00:04:56,100
return.

74
00:04:56,100 --> 00:04:56,490
True.

75
00:04:56,760 --> 00:05:03,160
So I'm just going to put to be true here, save this file and let prettier do all that wonderful print

76
00:05:03,180 --> 00:05:03,840
ification.

77
00:05:03,840 --> 00:05:05,130
I don't even know what the right word is there.

78
00:05:05,370 --> 00:05:08,370
Let me go ahead and rerun NPM run test unit.

79
00:05:08,970 --> 00:05:13,560
And this should bring us to good test coverage for our profile of each component.

80
00:05:13,980 --> 00:05:14,250
All right.

81
00:05:14,250 --> 00:05:18,390
So we have perfect test coverage for all of our components, but this can be a little bit misleading

82
00:05:18,390 --> 00:05:20,010
as we'll find out in the next lesson.

83
00:05:20,160 --> 00:05:23,550
There is one more thing I'd like to test before we close off this section.
