1
00:00:00,330 --> 00:00:01,320
All right.

2
00:00:01,320 --> 00:00:04,020
In this lesson, we're going to learn about props.

3
00:00:04,200 --> 00:00:10,530
And props allow a parent component to feed in custom data to a child component.

4
00:00:10,800 --> 00:00:15,450
But before we get there, I want to introduce the problem that we currently have in action.

5
00:00:15,450 --> 00:00:22,620
But as we mentioned earlier, we have this hardcoded text sign in right here on line 14, which means

6
00:00:22,620 --> 00:00:27,570
every time we render an action button, we're going to have the same text on it, sign in.

7
00:00:27,810 --> 00:00:34,740
And of course we want this to be flexible so that we can reuse this action button and reuse it styles,

8
00:00:34,980 --> 00:00:39,840
but provide a different value for the text that the button is going to display.

9
00:00:39,960 --> 00:00:44,580
Otherwise, of course, we would have to create a new view component for every different type of text

10
00:00:44,580 --> 00:00:48,360
that we would have to render, and that would create a lot of duplication for no reason.

11
00:00:48,630 --> 00:00:51,150
So how can we customize this piece of text?

12
00:00:51,840 --> 00:00:55,500
Well, we can't do it here in action button because this is the actual component.

13
00:00:55,830 --> 00:00:58,950
So where we can do it is on the parent component.

14
00:00:59,220 --> 00:01:02,040
And just to explain the concepts of parent and child.

15
00:01:02,040 --> 00:01:08,160
So they're clear the component that is rendering another component is called the parent component,

16
00:01:08,340 --> 00:01:11,640
and the component that is actually being rendered is called the child.

17
00:01:11,910 --> 00:01:17,460
So in this scenario, in our main NAV component, we are rendering the action button component right

18
00:01:17,460 --> 00:01:18,780
here on line 34.

19
00:01:18,990 --> 00:01:23,670
So the main nav component is the parent of the action button component.

20
00:01:23,880 --> 00:01:26,820
You can almost think of it like a hierarchical relationship.

21
00:01:26,970 --> 00:01:30,300
Main nav is one level above the action button.

22
00:01:30,420 --> 00:01:34,770
So just like get an ancestry diagram, main nav is kind of one level higher.

23
00:01:34,770 --> 00:01:39,450
So it is the parent while the descendant of the child is the action button component.

24
00:01:39,660 --> 00:01:44,790
And of course if the action button component was rendering its own components, then those would be

25
00:01:44,790 --> 00:01:46,530
the children of Action button.

26
00:01:46,830 --> 00:01:50,220
So a view component can be both a parent and a child.

27
00:01:50,460 --> 00:01:54,870
The one that is rendering a component is the parent, and then the actual component component being

28
00:01:54,870 --> 00:01:56,070
rendered is the child.

29
00:01:56,430 --> 00:02:02,730
So what we really want to do is be able to pass in custom data to our child component to action button

30
00:02:02,940 --> 00:02:04,230
from the parent.

31
00:02:04,440 --> 00:02:07,800
And the way that we can do that is using a view feature called Props.

32
00:02:08,130 --> 00:02:14,760
You can think of a prop as an attribute that we pass to a component or alternatively an input that we

33
00:02:14,760 --> 00:02:17,970
can pass to a component from the parent that renders it.

34
00:02:18,240 --> 00:02:25,440
And when we pass a prop, it becomes available as a property that we can render in the template of our

35
00:02:25,440 --> 00:02:26,310
child component.

36
00:02:26,520 --> 00:02:32,430
It's the exact same syntax that we actually use for interpolation, the curly braces that we've used

37
00:02:32,430 --> 00:02:35,010
before for data, we can reuse that here.

38
00:02:35,160 --> 00:02:40,710
The only difference being here that we are not getting that value from our components data, we're getting

39
00:02:40,710 --> 00:02:47,940
it from our parent props for what's called a one way or a uni directional binding.

40
00:02:48,120 --> 00:02:53,640
The reason it's called unidirectional is it because it flows in one direction, it flows from the parent

41
00:02:53,640 --> 00:02:54,630
to the channel.

42
00:02:54,990 --> 00:03:00,750
And that's important to to note, because what that means is whenever the parent property updates,

43
00:03:00,960 --> 00:03:06,210
if the parent, for example, is feeding a dynamic value as a prop to the child, whenever the value

44
00:03:06,210 --> 00:03:11,520
changes in the parent, that change will flow downwards to the child component.

45
00:03:11,760 --> 00:03:16,020
The reason it's called unidirectional is because changes will only flow down.

46
00:03:16,050 --> 00:03:18,570
They're going to flow from the parent to the child.

47
00:03:18,750 --> 00:03:23,790
They will never flow in reverse, or, in other words, from the child to the parent.

48
00:03:23,970 --> 00:03:25,530
And if that's confusing, don't worry.

49
00:03:25,530 --> 00:03:28,230
We're going to talk more about it as we see more examples of props.

50
00:03:28,470 --> 00:03:33,900
But the basic just here is that we're going to provide action button with the text right here that we'd

51
00:03:33,900 --> 00:03:37,500
like the action by to render and by rendering it here.

52
00:03:37,680 --> 00:03:43,320
Every single time that we render an action by, we can provide a different piece of text for it to render.

53
00:03:44,040 --> 00:03:44,370
All right.

54
00:03:44,610 --> 00:03:46,650
So it's going to be a two step process.

55
00:03:46,650 --> 00:03:49,650
And let's actually start with action button right here.

56
00:03:49,890 --> 00:03:55,470
I'd like you to imagine that this component is going to get a prop from its parent or, in other words,

57
00:03:55,650 --> 00:03:59,700
an input, a piece of data from its parent that we're going to call text.

58
00:03:59,910 --> 00:04:00,240
All right.

59
00:04:00,270 --> 00:04:02,010
That's just an arbitrary name I've chosen.

60
00:04:02,010 --> 00:04:02,940
I'm going to call it text.

61
00:04:03,150 --> 00:04:09,930
And as I mentioned earlier, we can render a prop value just like we render any data value by using

62
00:04:09,930 --> 00:04:10,740
curly braces.

63
00:04:10,920 --> 00:04:15,270
So let's imagine right now that we've received a piece of data from our parent.

64
00:04:15,270 --> 00:04:18,270
You can almost think of it like a variable, and that variable is called text.

65
00:04:18,420 --> 00:04:20,940
I'm going to render it right here using curly braces.

66
00:04:21,150 --> 00:04:24,780
So I'm going to put the double curly braces and I'm going to write the word text in here.

67
00:04:25,020 --> 00:04:27,570
Now, I know it's not clear where text is coming from.

68
00:04:27,690 --> 00:04:32,610
And just to reiterate, it's going to come from our parent component, May NAV in just a second, but

69
00:04:32,610 --> 00:04:34,350
let's pretend we have it for the time being.

70
00:04:35,040 --> 00:04:40,200
So there's one more thing we need to do an action button to allow us to use this prop called text,

71
00:04:40,380 --> 00:04:45,330
and that is to add an additional property to our view configuration object called props.

72
00:04:46,310 --> 00:04:46,760
All right.

73
00:04:46,910 --> 00:04:53,090
And props is going to be an array where we provide strings representing the props or, in other words,

74
00:04:53,090 --> 00:04:56,750
the inputs that this component will receive from its parent.

75
00:04:56,990 --> 00:05:02,270
So obviously, if we're using a a piece of information called text in The View right here, we need

76
00:05:02,270 --> 00:05:04,910
to specify that our prop is going to be called text.

77
00:05:05,360 --> 00:05:09,350
If we had more than one prop than we would simply provide more than one.

78
00:05:10,410 --> 00:05:15,280
A value within this array, we can ignore this temporary s lint warning.

79
00:05:15,280 --> 00:05:16,960
We're going to come back to this in just a second.

80
00:05:16,960 --> 00:05:18,790
This is totally valid view syntax.

81
00:05:19,060 --> 00:05:24,130
So what we have specified here is that action button expects to receive an input from its parent, which

82
00:05:24,130 --> 00:05:27,550
we're going to call a prop, and that input is going to be called text.

83
00:05:27,760 --> 00:05:32,740
And then whatever the value of text is from the parent, we're going to render it right here as our

84
00:05:32,740 --> 00:05:34,510
button text within the timeout.

85
00:05:34,840 --> 00:05:36,940
So that takes care of one half of the equation.

86
00:05:37,180 --> 00:05:42,160
Obviously, the other half of the equation is going to our parent component right here, our main NAV,

87
00:05:42,160 --> 00:05:46,990
which is rendering our action one component and then specifying what the value of this text prop is

88
00:05:46,990 --> 00:05:47,530
going to be.

89
00:05:47,860 --> 00:05:54,400
The way we provide a prop to a component is the exact same way as we write an HTML attribute.

90
00:05:54,640 --> 00:05:57,970
So right here, after the values, I can provide the name of a prop.

91
00:05:57,970 --> 00:06:01,930
What is the name of the prop or the input that I want to give to my action button?

92
00:06:02,110 --> 00:06:08,500
I want it to be called text and then I provide an equal sign in a string and here is where I provide

93
00:06:08,500 --> 00:06:10,540
the value for that text prop.

94
00:06:10,900 --> 00:06:15,880
So in other words, this is the value that the action button will receive from its parent and render

95
00:06:15,880 --> 00:06:16,570
right here.

96
00:06:16,840 --> 00:06:20,890
So let's say right now, I'm just going to provide an arbitrary text of whatever I want.

97
00:06:22,130 --> 00:06:23,030
I'm going to save this.

98
00:06:23,030 --> 00:06:23,330
All right.

99
00:06:23,330 --> 00:06:25,520
And that's going to cause pretty or to reform it.

100
00:06:25,790 --> 00:06:27,710
And now I'm going to navigate back to my browser.

101
00:06:27,920 --> 00:06:33,320
And just as expected, we now have a custom text of whatever I want in the button.

102
00:06:33,560 --> 00:06:36,860
Let me go ahead and open up my view devtools so we can see how this works.

103
00:06:36,860 --> 00:06:41,750
I'm going to go to view and I'm going to select my main nav and my action button and you're going to

104
00:06:41,750 --> 00:06:46,910
see the view dev tools in addition to showing us the data on a component is going to show us the props.

105
00:06:47,090 --> 00:06:49,310
Props and data are not the same thing.

106
00:06:49,490 --> 00:06:54,770
The data is the data that lives inside the component which you specify using the data method.

107
00:06:54,950 --> 00:06:58,220
The props is the data that is flowing in from the parent.

108
00:06:58,400 --> 00:07:04,550
So again, our main parent is feeding in this prop called text to our action button component.

109
00:07:04,580 --> 00:07:04,970
All right.

110
00:07:04,970 --> 00:07:08,000
This component right here is going to feed in the prop to action.

111
00:07:08,000 --> 00:07:14,120
But so, of course, the beautiful part about this design is now we can reuse or action by the component

112
00:07:14,240 --> 00:07:15,920
and provide whatever text we want.

113
00:07:16,160 --> 00:07:21,140
So if I simply render action button below one more time, how can I provide a different value for the

114
00:07:21,140 --> 00:07:21,770
text prop?

115
00:07:21,980 --> 00:07:25,670
Well, I can simply provide a text prop and give it a totally different value.

116
00:07:25,670 --> 00:07:29,630
So right here I'll write something simple like different value, although it can be whatever string

117
00:07:29,630 --> 00:07:30,050
we want.

118
00:07:30,440 --> 00:07:33,530
All right, once again, this prop is going to flow into this component.

119
00:07:33,800 --> 00:07:38,690
And when we go back to my browser, we have our second action one right here, and it has a totally

120
00:07:38,690 --> 00:07:44,270
different prop of different value or a different text, that prop value of different values.

121
00:07:44,270 --> 00:07:47,810
If I refresh this, I should be able to see two action buttons in my view.

122
00:07:47,930 --> 00:07:48,470
Here it is.

123
00:07:48,590 --> 00:07:53,480
You can see it has a text prop with a totally different string value of different value.

124
00:07:53,540 --> 00:07:53,900
All right.

125
00:07:54,230 --> 00:07:55,850
So that's the core idea of props.

126
00:07:55,850 --> 00:08:01,550
It's some kind of information or data that we can pass down from a parent to a child, which gives us

127
00:08:01,550 --> 00:08:07,550
a lot of flexibility because that child doesn't have to hard code any a values such as a piece of text

128
00:08:07,550 --> 00:08:08,060
and a button.

129
00:08:08,180 --> 00:08:14,570
Rather, the parent can tell the button what it needs to do or what kind of data it should use through

130
00:08:14,570 --> 00:08:15,410
the form of props.

131
00:08:15,710 --> 00:08:20,990
So I'm going to remove my second rendering of the action button component because we don't need it.

132
00:08:21,200 --> 00:08:25,610
And then obviously to make a display in the original text, I can write sign in here.

133
00:08:25,820 --> 00:08:27,740
So right here we are going to right sign in.

134
00:08:27,950 --> 00:08:32,960
But the reason that this is a better approach is if we ever need to reuse the action by component,

135
00:08:33,110 --> 00:08:36,380
we can now customize whatever we fit in and the button will render it.

136
00:08:36,530 --> 00:08:39,950
Now our action button is more flexible, it's more dynamic.

137
00:08:39,980 --> 00:08:46,130
It can serve many different purposes now as a general action, but rather than specifically being just

138
00:08:46,130 --> 00:08:47,600
a sign in button.

139
00:08:47,930 --> 00:08:49,490
All right, so that is all there is to cover.

140
00:08:49,490 --> 00:08:51,710
In this lesson, we introduced the idea of props.

141
00:08:51,920 --> 00:08:55,730
A prop is just an input that a parent company provides to a child component.

142
00:08:56,060 --> 00:08:59,120
This data right now, this text prop is hardcoded.

143
00:08:59,120 --> 00:09:01,640
It's always going to be signed in in this case.

144
00:09:01,790 --> 00:09:04,400
But it can be dynamic, which we'll look at later.

145
00:09:04,580 --> 00:09:10,880
And the key takeaway is whenever this prop value changes, that change will flow down into the action

146
00:09:10,880 --> 00:09:11,570
button component.

147
00:09:11,840 --> 00:09:17,810
So if the value of text changes, action by will re render its button text to reflect the change that

148
00:09:17,810 --> 00:09:23,510
it got from its parent component, which just may now have now that flow of data is usually directional

149
00:09:23,510 --> 00:09:29,720
or one directional, which means it only flows one way from the parent to the child.

150
00:09:29,750 --> 00:09:34,280
There's no way the child can alter the value of text and send that back up to the parent.

151
00:09:34,280 --> 00:09:35,630
That is impossible in view.

152
00:09:35,870 --> 00:09:40,880
The only thing that is possible is for the parent component to render the value or change the value

153
00:09:41,090 --> 00:09:46,370
of the text prop, and that change will flow down into our action by component.

154
00:09:46,550 --> 00:09:46,850
All right.

155
00:09:47,060 --> 00:09:50,630
Lots more to talk about with props and of course, lots more practice up ahead.

156
00:09:50,810 --> 00:09:52,340
So I will see you in the next lesson.
