WEBVTT
1
00:00:00.510 --> 00:00:01.440
All right.

2
00:00:01.440 --> 00:00:07.200
So in this lesson will introduce a brand new view idea, which is lifecycle hooks.

3
00:00:07.590 --> 00:00:11.010
So a component goes through a life cycle.

4
00:00:11.040 --> 00:00:13.500
You can almost think of a human being going through their life.

5
00:00:13.830 --> 00:00:20.100
And what the life cycle represents is a series of events that a component goes through throughout its

6
00:00:20.100 --> 00:00:20.580
existence.

7
00:00:20.850 --> 00:00:26.280
Much like human beings may have certain significant events in our life, like, for example, are going

8
00:00:26.280 --> 00:00:29.160
to school or maybe getting married or our first child.

9
00:00:29.310 --> 00:00:33.820
Those are kind of significant events throughout our life in the realm of view components.

10
00:00:33.840 --> 00:00:40.890
They have a similar idea where there are moments during the components existence that it can recognize

11
00:00:40.890 --> 00:00:42.060
as happening.

12
00:00:42.270 --> 00:00:47.610
And what we can do is we can hook into those events and execute some extra code in that given moment

13
00:00:47.610 --> 00:00:49.310
in time in that event.

14
00:00:49.350 --> 00:00:49.710
Right.

15
00:00:49.950 --> 00:00:52.800
So the complete collection of events is called the Life Cycle.

16
00:00:52.950 --> 00:00:57.990
And a moment where we can sort of interject ourselves and write some code is called a life cycle hook.

17
00:00:58.800 --> 00:01:01.320
So here's a diagram from the official view website.

18
00:01:01.560 --> 00:01:02.850
And I just want to show you here.

19
00:01:02.850 --> 00:01:05.640
It's it's not important to understand all of these things all at once.

20
00:01:05.910 --> 00:01:08.400
But if you'll notice, these red boxes here.

21
00:01:08.550 --> 00:01:10.970
These all represent the life cycle hooks.

22
00:01:10.980 --> 00:01:14.430
So these are, again, different moments during the components existence.

23
00:01:14.760 --> 00:01:20.070
And what you can do here is you can follow this flow chart to see at which moment these life cycle hooks

24
00:01:20.070 --> 00:01:21.090
automatically run.

25
00:01:21.480 --> 00:01:25.620
So you can see here at the very beginning, we're creating a view component and we're mounting it.

26
00:01:25.830 --> 00:01:27.420
And let's say this is just one component.

27
00:01:27.630 --> 00:01:32.790
We can see here the very first thing you does is it initializes the component, kind of gets its base

28
00:01:32.790 --> 00:01:36.600
foundation up and running and then it encounters the before create hook.

29
00:01:36.840 --> 00:01:42.120
So before the component gets all of its reactive features, view will run this method.

30
00:01:42.120 --> 00:01:42.480
Right?

31
00:01:42.600 --> 00:01:48.450
And we can interject ourselves or step into this method and say, when you're at this moment in your

32
00:01:48.450 --> 00:01:51.390
life component, please run this extra logic for us.

33
00:01:51.400 --> 00:01:51.690
Right?

34
00:01:52.350 --> 00:01:56.010
And we might do something like make an API request at this moment, right?

35
00:01:56.010 --> 00:01:58.890
When we want to do something special outside the component.

36
00:01:59.040 --> 00:02:04.200
We may say, Hey, while you're busy building yourself up, get this extra data or read this file from

37
00:02:04.200 --> 00:02:04.530
disk.

38
00:02:04.650 --> 00:02:09.060
Those are just examples to represent why we might want to use a feature like this.

39
00:02:09.060 --> 00:02:09.330
Right?

40
00:02:09.600 --> 00:02:15.990
Similarly, we have a lifecycle hook called created that is run automatically by view whenever that

41
00:02:15.990 --> 00:02:18.720
component gets its initial reactivity functions right.

42
00:02:18.720 --> 00:02:24.090
So like data and computed and all that functionality after it gets all of that, well then view runs

43
00:02:24.090 --> 00:02:25.950
the created lifecycle hook.

44
00:02:26.670 --> 00:02:32.850
Similarly, there is a hook before it is mounted into the browser, before Vue actually adds the component

45
00:02:32.850 --> 00:02:34.440
into your page and its HTML.

46
00:02:34.620 --> 00:02:39.960
This hook runs right then once it's actually in the browser, there's a mounted function or a mounted

47
00:02:39.960 --> 00:02:41.550
lifecycle hook that runs right.

48
00:02:41.880 --> 00:02:47.070
There's also things like before update and update, which are lifecycle hooks that may run multiple

49
00:02:47.070 --> 00:02:49.080
times during a component's existence.

50
00:02:49.080 --> 00:02:54.630
So whenever the component updates, for example, let's say it's data property changes view says, I'm

51
00:02:54.630 --> 00:02:58.650
going to run before update, then I'm going to actually make the changes and then I'm going to run the

52
00:02:58.650 --> 00:02:59.430
updated hook.

53
00:02:59.430 --> 00:02:59.700
Right?

54
00:02:59.880 --> 00:03:05.940
And again, we can inject ourselves or kind of step in at any point during these hook processes and

55
00:03:05.940 --> 00:03:08.100
do some additional logic or do some additional code.

56
00:03:08.460 --> 00:03:13.560
In addition, when the component is on mounted, which means when it's removed from our DOM and that

57
00:03:13.560 --> 00:03:17.610
may happen, for example, later on we'll learn how we can navigate from page to page.

58
00:03:17.790 --> 00:03:23.340
So when you navigate from one page to another, view may tear down or bring down existing components

59
00:03:23.340 --> 00:03:25.380
in order to render other ones on the screen.

60
00:03:25.620 --> 00:03:29.020
So those original components are on mounted or brought down.

61
00:03:29.040 --> 00:03:31.530
You can almost think of on mounting a TV from the wall.

62
00:03:31.530 --> 00:03:31.740
Right.

63
00:03:31.740 --> 00:03:32.850
You're taking it down.

64
00:03:33.150 --> 00:03:39.300
Well, before that happens, you have similar before on mount lifecycle hooks and on mounted lifecycle

65
00:03:39.300 --> 00:03:40.290
hook when everything is done.

66
00:03:40.530 --> 00:03:45.110
So again, these are events through a view components life that we can step into.

67
00:03:45.150 --> 00:03:50.400
So let me show you a couple of these and we'll see how we can sort of configure them to run whatever

68
00:03:50.400 --> 00:03:51.360
logic we want.

69
00:03:51.660 --> 00:03:56.010
So I'm going to head back to this code and I'm going to make sure we're in a hero component.

70
00:03:56.280 --> 00:04:02.970
And the way we create these lifecycle hooks is we simply write their names as methods in our view configuration

71
00:04:02.970 --> 00:04:03.390
object.

72
00:04:03.690 --> 00:04:09.120
So for example, we saw that we had two lifecycle hooks called that before create and created.

73
00:04:09.390 --> 00:04:11.100
So I'm just going to write before create.

74
00:04:11.550 --> 00:04:13.290
That's the official name we must use.

75
00:04:13.560 --> 00:04:14.970
And so this is going to be a method.

76
00:04:15.150 --> 00:04:21.480
And here we can specify any additional logic that we want this component to do or execute before it's

77
00:04:21.480 --> 00:04:21.870
created.

78
00:04:21.880 --> 00:04:24.180
So we just put vanilla JavaScript code in here.

79
00:04:24.450 --> 00:04:28.380
So for now, I'm just going to do the simplest thing I can, which is console.log something to the browser

80
00:04:28.380 --> 00:04:28.860
council.

81
00:04:29.130 --> 00:04:31.590
I'm going to say component is about to be created.

82
00:04:33.890 --> 00:04:35.060
All right, then.

83
00:04:35.060 --> 00:04:37.920
Another life cycle hook we have access to is called created.

84
00:04:37.940 --> 00:04:43.280
That's when the component is created and it gets all of its original reactive functionality.

85
00:04:43.610 --> 00:04:46.970
So for example, we can write our created lifecycle hook here.

86
00:04:48.210 --> 00:04:51.390
And this of course will run after the before creates book.

87
00:04:51.510 --> 00:04:57.480
At some point later in the components life and so here I can do another console.log like component has

88
00:04:57.480 --> 00:05:06.780
been created and similarly the next thing that happens is the component waits to be mounted or placed

89
00:05:06.780 --> 00:05:09.090
within the browser's dom within the HTML.

90
00:05:09.420 --> 00:05:15.900
So there's two other lifecycle hooks called before mount and here we can just console.log.

91
00:05:15.900 --> 00:05:18.240
Something similar component is about to be mounted.

92
00:05:20.700 --> 00:05:25.950
And as one more example, we can add one more life cycle hook here, and I'll do the mounted life cycle

93
00:05:25.950 --> 00:05:26.710
hook once again.

94
00:05:26.730 --> 00:05:28.470
They're all just going to be basic methods.

95
00:05:28.620 --> 00:05:33.540
And in the body of those methods, we define what the components should do at this juncture, at this

96
00:05:33.540 --> 00:05:34.710
point, at this event.

97
00:05:35.100 --> 00:05:38.220
So let's console.log component has been mounted.

98
00:05:39.830 --> 00:05:40.550
In the dorm.

99
00:05:41.420 --> 00:05:41.750
All right.

100
00:05:41.750 --> 00:05:46.100
So the order that we wrote our life cycle hooks in this file is the order that you is actually going

101
00:05:46.100 --> 00:05:46.970
to run through them.

102
00:05:46.970 --> 00:05:48.200
And this is not all of them.

103
00:05:48.200 --> 00:05:52.610
Of course, we saw that there's a lot more, but this is just a good introduction to four of them.

104
00:05:52.910 --> 00:05:54.410
So if I go to my browser right now.

105
00:05:55.620 --> 00:05:56.880
And go back to my view app.

106
00:05:56.940 --> 00:06:01.080
Let me bring up this and our console and let me refresh just so we have a clean slate.

107
00:06:01.620 --> 00:06:06.960
We can see right here that all of those console logs appear in the order that we placed them in the

108
00:06:06.960 --> 00:06:08.220
respective lifecycle hooks.

109
00:06:08.220 --> 00:06:10.260
So component is about to be created.

110
00:06:10.290 --> 00:06:13.080
That was in our very first one, which was the before create hook.

111
00:06:13.410 --> 00:06:18.060
Then component has been created, component is about to be mounted and component has been mounted in

112
00:06:18.060 --> 00:06:18.510
the DOM.

113
00:06:18.780 --> 00:06:22.020
So obviously right now we did some very silly simple things.

114
00:06:22.020 --> 00:06:23.430
We just output text to the console.

115
00:06:23.610 --> 00:06:27.810
But again, the advantage of this is that we can interject ourselves and perform some additional logic.

116
00:06:28.170 --> 00:06:34.350
So for example, if we think about our Google Careers website will notice that the headline has that

117
00:06:34.350 --> 00:06:36.600
verb that changes every couple of seconds, right?

118
00:06:36.600 --> 00:06:39.630
Like design, then build, then code, etc..

119
00:06:39.930 --> 00:06:45.180
Well, something has to kick off the logic for changing that piece of text every couple of seconds.

120
00:06:45.180 --> 00:06:45.420
Right.

121
00:06:45.660 --> 00:06:50.960
Because otherwise we're going to be dependent on user interaction in order to change things like data.

122
00:06:51.090 --> 00:06:55.770
But we need something that is going to automatically kick off at some point during the components existence.

123
00:06:56.010 --> 00:07:02.100
So a lifecycle hook is a perfect place to kick off that logic because we know that Vue will automatically

124
00:07:02.100 --> 00:07:04.290
run it when it's starting up the component.

125
00:07:04.320 --> 00:07:06.330
We don't need to wait for the user to interact.

126
00:07:06.480 --> 00:07:11.100
We can just tell Vue, for example, whenever this component is starting up, please go ahead and start

127
00:07:11.100 --> 00:07:15.450
running this function that's going to change the text every 5 seconds.

128
00:07:15.450 --> 00:07:20.460
So that's going to be the strategy that we take in building out that thing, and we're going to continue

129
00:07:20.460 --> 00:07:22.140
working on this in the very next lesson.
