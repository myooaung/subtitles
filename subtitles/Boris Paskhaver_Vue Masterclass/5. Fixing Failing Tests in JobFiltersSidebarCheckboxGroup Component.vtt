WEBVTT
1
00:00:00.460 --> 00:00:01.540
All right.

2
00:00:01.540 --> 00:00:07.690
So the changes that we implemented in the previous lesson will get some of our tests for the job filter,

3
00:00:07.690 --> 00:00:10.240
sidebar, checkbox group component to fail.

4
00:00:10.390 --> 00:00:11.800
But that is totally fine.

5
00:00:12.070 --> 00:00:17.800
Remember, in most of these tests we are mocking out these store objects that is returned by you store.

6
00:00:18.100 --> 00:00:23.440
So of course one problem we're going to encounter with this new implementation is we now must support

7
00:00:23.440 --> 00:00:26.050
a subscribe method on that mock store.

8
00:00:26.200 --> 00:00:28.120
Otherwise we're going to run into an error.

9
00:00:28.360 --> 00:00:34.240
And so I took the time to run the test suite right here and you can see we're only getting one test

10
00:00:34.240 --> 00:00:37.480
suite failing that is indeed the checkbox group test file.

11
00:00:37.750 --> 00:00:43.450
And you'll notice if I scroll up to one of these failures and it'll tell us the exact same thing store

12
00:00:43.450 --> 00:00:45.400
that subscribe is not a function.

13
00:00:45.700 --> 00:00:49.360
So remember what we're doing in this file is we are importing you store right here.

14
00:00:49.600 --> 00:00:54.880
Then we are using TypeScript to declare it's type right here as just mock and we're getting access to

15
00:00:54.880 --> 00:01:01.720
this use store mark name with this correct type and down below, for example, right here we are providing

16
00:01:01.720 --> 00:01:04.930
this object to return as the return value of use store.

17
00:01:05.170 --> 00:01:09.040
However, this sample object right here does not have a subscribe method.

18
00:01:09.190 --> 00:01:13.810
It only has a commit method and thus the test says You're giving me an object that doesn't have the

19
00:01:13.810 --> 00:01:17.290
method I need to invoke when I set up the component and thus it complains.

20
00:01:17.620 --> 00:01:23.710
So all I need to do is wherever I'm using user mark, all I need to do is make sure that I provide an

21
00:01:23.710 --> 00:01:27.610
actual subscribe method and we can basically set it to whatever we want.

22
00:01:27.820 --> 00:01:32.410
So I propose we simply set it to our usual, which is just going to be a just mock function.

23
00:01:32.710 --> 00:01:37.090
So right here I'm simply going to add exactly a subscribe method.

24
00:01:37.390 --> 00:01:42.070
And so here's the property and I'm going to set it equal to a just function we don't need to track whether

25
00:01:42.070 --> 00:01:45.160
it's been invoked, even though that may come in handy later for another test.

26
00:01:45.370 --> 00:01:46.840
But for now, this should be just fine.

27
00:01:47.140 --> 00:01:48.730
I'm going to scroll down right here.

28
00:01:48.730 --> 00:01:50.320
We're also using Use Star Mark.

29
00:01:50.500 --> 00:01:51.460
It's right here as well.

30
00:01:51.460 --> 00:01:53.770
I'm going to provide subscribe as well.

31
00:01:53.770 --> 00:01:58.330
That method needs to exist on my mark so that it can better emulate the real world store.

32
00:01:58.720 --> 00:02:02.170
And that looks like the only other test that uses the user.

33
00:02:02.170 --> 00:02:07.330
Mark What I'm also going to do, however, is I'm going to copy this line right here, which provides

34
00:02:07.330 --> 00:02:10.780
a mock function for both the Commit method and the Subscribe method.

35
00:02:11.080 --> 00:02:14.020
And I'm going to scroll up to my very first test right here.

36
00:02:14.230 --> 00:02:18.910
We're not actually doing anything with use store mark right here, but just to be safe and ensure that

37
00:02:18.910 --> 00:02:23.560
the component can properly mount, I'm going to copy the code from below just to make sure that use

38
00:02:23.560 --> 00:02:29.620
Star Mark does have this implementation within the body of this test rather than the default implementation

39
00:02:29.620 --> 00:02:31.420
from just that which is returning undefined.

40
00:02:31.660 --> 00:02:36.100
Because even though this test doesn't care about this logic, it will still need an object that's going

41
00:02:36.100 --> 00:02:37.660
to have a subscribe method to work.

42
00:02:38.050 --> 00:02:42.580
So with that, I'm going to save this and we're going to let everything rerun and that should hopefully

43
00:02:42.580 --> 00:02:44.350
get all of the tests to pass.

44
00:02:44.530 --> 00:02:45.970
And indeed, it looks like they do.

45
00:02:45.970 --> 00:02:52.510
You can see here, test suites, 25 passed and 89 total tests or in other words, assertions or IT function

46
00:02:52.510 --> 00:02:53.140
calls passing.

47
00:02:53.350 --> 00:02:56.650
So we do have no more failing tests.

48
00:02:56.830 --> 00:03:02.110
However, if I scroll up, we're going to see that we are still getting a little bit of a warning.

49
00:03:02.110 --> 00:03:04.150
A warning is not a failure, it's just a warning.

50
00:03:04.360 --> 00:03:07.210
And this is actually going to be coming from a different test suite.

51
00:03:07.210 --> 00:03:11.680
If I scroll up, it's going to be coming from our job filter, cyber test suite.

52
00:03:12.010 --> 00:03:14.290
So if I open up job filter sidebar.

53
00:03:15.400 --> 00:03:20.110
I'm going to open up its test suite on the right and I'm going to open up John's other sidebar on the

54
00:03:20.110 --> 00:03:20.500
left.

55
00:03:20.770 --> 00:03:25.870
Recall that what we're doing here is we are using the use star function and we're providing that key,

56
00:03:26.020 --> 00:03:31.150
which of course is sort of the key to unlock the access to the store in its types so that we get access

57
00:03:31.150 --> 00:03:32.670
to a type store right here.

58
00:03:32.680 --> 00:03:37.480
You can see right here understands TypeScript that is understands that we have a store that implements

59
00:03:37.480 --> 00:03:38.530
the global state interface.

60
00:03:38.800 --> 00:03:43.270
Unfortunately, it looks like right here the issue is that injection is not being found, which means

61
00:03:43.270 --> 00:03:47.710
basically we're not actually making out use store in our test.

62
00:03:47.890 --> 00:03:52.210
So our test is trying to use the real use store function instead of a mark.

63
00:03:52.420 --> 00:03:55.090
And thus it's running into problems when it's trying to inject this key.

64
00:03:55.270 --> 00:04:00.790
Because remember, in our test suite, we don't actually have the view store configured in the same

65
00:04:00.790 --> 00:04:02.200
way we do in our actual View app.

66
00:04:02.380 --> 00:04:07.840
So this is kind of its own sandbox environment and in here it's trying to use the real store and that

67
00:04:07.840 --> 00:04:09.130
real store doesn't exist.

68
00:04:09.130 --> 00:04:13.480
So it's saying, Hey, I'm trying to access the store with this key you gave me, but it doesn't exist.

69
00:04:13.480 --> 00:04:14.350
I'm running into an issue.

70
00:04:14.680 --> 00:04:20.260
So basically what we need to say here is don't use the real use store, don't use the actual real implementation,

71
00:04:20.440 --> 00:04:24.010
but rather we're going to solve this problem the exact same way we did in any other component.

72
00:04:24.190 --> 00:04:26.020
We're going to mark out use store.

73
00:04:26.320 --> 00:04:26.650
All right.

74
00:04:26.770 --> 00:04:32.710
So what I'm going to do here right below my import is I'm simply going to write just Mark and I'm going

75
00:04:32.710 --> 00:04:33.520
to provide view.

76
00:04:34.540 --> 00:04:36.730
Now, do we need to actually import use store?

77
00:04:36.910 --> 00:04:41.650
Not really, because we don't need to actually mock it out to be any specific value.

78
00:04:41.860 --> 00:04:47.560
I think that simply by using just default return value, we should be able to avoid the problem.

79
00:04:47.830 --> 00:04:53.020
Granted, we do have this commit method being invoked on the store, but that that is only being triggered

80
00:04:53.020 --> 00:04:54.850
when the user actually clicks on this.

81
00:04:55.060 --> 00:05:00.580
So if we want to write a test for that, then in that test we can indeed import, use, store, mock

82
00:05:00.580 --> 00:05:04.600
it out and have it return a object with a commit method set to adjust function.

83
00:05:04.780 --> 00:05:07.540
But this function by itself will not be invoked.

84
00:05:07.540 --> 00:05:10.630
It will only be invoked when the user clicks on the action button.

85
00:05:10.900 --> 00:05:13.390
So this returning undefined should be just fine.

86
00:05:13.510 --> 00:05:18.010
And again, the purpose right now in this lesson is to simply get rid of all of our errors and warnings

87
00:05:18.250 --> 00:05:23.320
will hopefully add more tests for our new functionality later on and then introduce those features as

88
00:05:23.320 --> 00:05:23.590
needed.

89
00:05:23.920 --> 00:05:28.240
But for now, you can see we're running all of the test suites in our project and as I scroll up, they're

90
00:05:28.240 --> 00:05:30.760
all passing and there are no more warnings as well.

91
00:05:31.030 --> 00:05:36.430
So again, by simply mocking our View X, we're telling just to replace everything in view X, including

92
00:05:36.430 --> 00:05:41.410
you store with a just mock function by default, that just mock function will return undefined.

93
00:05:41.500 --> 00:05:46.780
But that is totally fine because the only use case for store in here is to call the commit method in

94
00:05:46.780 --> 00:05:51.670
a function called the clear user job filter selections that will not actually run when the component

95
00:05:51.670 --> 00:05:57.100
mounts, but will actually only run when the user interacts with it by clicking on the action button,

96
00:05:57.100 --> 00:05:59.050
which it looks like we're not doing yet here.

97
00:05:59.260 --> 00:05:59.560
All right.

98
00:05:59.560 --> 00:06:01.150
So that's why we're able to get away with that.

99
00:06:01.510 --> 00:06:01.810
All right.

100
00:06:01.810 --> 00:06:05.950
So with that, we have a fully passing test suite and the code is working in our browser.

101
00:06:06.160 --> 00:06:09.490
So we've made a lot of progress and I will see you next lesson.
