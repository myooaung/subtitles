1
00:00:00,860 --> 00:00:01,340
Okay.

2
00:00:01,340 --> 00:00:05,510
So we are now able to use TypeScript within our job search view app.

3
00:00:05,720 --> 00:00:11,780
And there's a lot of places that we want to add TypeScript code to our components, our composable functions,

4
00:00:11,780 --> 00:00:17,000
our test suite, our view logic, etc. There's a lot of ground to cover, but I think a good place to

5
00:00:17,000 --> 00:00:22,790
start is actually going to be in our DB JSON file and I want to bring this file up as a reminder.

6
00:00:23,600 --> 00:00:29,870
So this is our mock backend that we have configured with Jason Server and the whole app kicks off by

7
00:00:29,870 --> 00:00:33,020
making a request to get this array of job objects right here.

8
00:00:33,320 --> 00:00:39,410
So here is a sample job object and will notice that a job object has a similar shape.

9
00:00:39,410 --> 00:00:44,630
Each job object has a similar structure or as we said in the previous lesson or a previous section,

10
00:00:44,750 --> 00:00:46,460
we can call it a similar interface.

11
00:00:46,700 --> 00:00:48,920
Each job has an ID that is a number.

12
00:00:49,070 --> 00:00:51,110
Each job has a title that is a string.

13
00:00:51,320 --> 00:00:57,320
Each job has a minimum qualifications, property that is a string array, etc. And I think it'd be a

14
00:00:57,320 --> 00:01:03,200
really good idea to create an interface for a sample job because that job object, that job data type

15
00:01:03,350 --> 00:01:05,840
appears in many different locations within our app.

16
00:01:06,050 --> 00:01:11,930
It's used in our view store, it's used in our get jobs function that actually gets the response.

17
00:01:12,050 --> 00:01:15,890
It's used in our components which render a job listing for every job object.

18
00:01:16,130 --> 00:01:20,810
And so we're going to get a lot of benefits just by defining an interface and having view, validate

19
00:01:20,810 --> 00:01:21,830
that we're using it correctly.

20
00:01:21,830 --> 00:01:26,630
That, for example, whenever we access minimum qualifications, we have to use that as an array because

21
00:01:26,630 --> 00:01:27,860
it is an array, right?

22
00:01:28,640 --> 00:01:34,820
So let's define an interface for a simple job object and I'm going to do that right here in my source

23
00:01:34,820 --> 00:01:35,840
API directory.

24
00:01:35,990 --> 00:01:39,410
I'm going to create a new file here called Types that.

25
00:01:39,410 --> 00:01:39,740
Yes.

26
00:01:40,130 --> 00:01:45,530
And the purpose of this TypeScript file will be to simply store various TypeScript types, not necessarily

27
00:01:45,530 --> 00:01:49,700
for everything in my app, but for those functionalities that are related to my API.

28
00:01:49,910 --> 00:01:54,440
The definition of what a job looks like to me comes from the API.

29
00:01:54,440 --> 00:01:57,920
It comes from our mock backend, right, or our backend in the real world.

30
00:01:58,130 --> 00:02:03,500
And so to me it kind of makes sense to put this logic in a API folder and then types that yes is a very

31
00:02:03,500 --> 00:02:08,660
common name for a file that just has various TypeScript interfaces and things like that.

32
00:02:08,660 --> 00:02:10,250
There's not going to be any actual code in here.

33
00:02:10,400 --> 00:02:14,450
You're just going to be a lot of various types of related interface declarations, right?

34
00:02:14,750 --> 00:02:20,240
And so in most code bases you might see multiple types files, you might see types files at the top

35
00:02:20,240 --> 00:02:22,280
of the source directory within other folders.

36
00:02:22,460 --> 00:02:26,030
It's really up to you to define how you want to structure and organize these things.

37
00:02:26,570 --> 00:02:28,610
There's no single right answer to me.

38
00:02:28,610 --> 00:02:33,020
The idea of what a job is lives in our API, so I'm simply creating my types.

39
00:02:33,020 --> 00:02:34,130
That's file in there.

40
00:02:34,580 --> 00:02:38,000
All right, so I'm going to drag my DB, that JSON file over here to the right.

41
00:02:38,810 --> 00:02:40,940
I'm going to keep types that's open on my left.

42
00:02:41,510 --> 00:02:46,430
And all we have to do is look at a sample job object and describe what that shape looks like, what

43
00:02:46,430 --> 00:02:48,800
properties does it have, and what are their types.

44
00:02:49,190 --> 00:02:52,460
So right here, I'm going to begin by exporting an interface.

45
00:02:52,460 --> 00:02:57,320
The export keyword is just regular typescript, regular JavaScript to export something out of this file.

46
00:02:57,590 --> 00:02:58,880
And we're going to export an interface.

47
00:02:59,090 --> 00:03:05,390
And an interface, of course needs a name which we provide after this is a job interface and we provide

48
00:03:05,390 --> 00:03:06,590
a pair of curly braces.

49
00:03:06,590 --> 00:03:11,120
And as a reminder, the way this works is we put the property and then we put the type it has.

50
00:03:11,120 --> 00:03:11,960
It's a simple as that.

51
00:03:12,290 --> 00:03:17,330
So we're going to have an idea and every job and remember, we don't typically put the actual value

52
00:03:17,330 --> 00:03:19,280
in here, we put the type, right.

53
00:03:19,280 --> 00:03:24,980
So among all of our ideas, whether they are one or two or three down here below an idea is going to

54
00:03:24,980 --> 00:03:26,180
be a number three.

55
00:03:26,180 --> 00:03:27,560
Do ID call a number.

56
00:03:28,430 --> 00:03:33,500
You can put a semicolon at the end, but prettier should automatically add it for you anyway.

57
00:03:33,830 --> 00:03:37,670
And so that's an example of one field declaration or one property declaration.

58
00:03:37,850 --> 00:03:40,730
We're going to do the exact same thing for everything that we see on the right hand side.

59
00:03:41,000 --> 00:03:43,400
So title is going to be a string.

60
00:03:44,370 --> 00:03:49,890
Organization is going to be a strong as well degree on the right hand side is going to be a strong as

61
00:03:49,890 --> 00:03:54,900
well job type is going to have the data type of string as well.

62
00:03:55,290 --> 00:03:58,800
Locations is going to be a string array.

63
00:03:58,800 --> 00:04:04,620
And remember the way we write that is string followed by a pair of square brackets, string array.

64
00:04:04,650 --> 00:04:11,160
Just like we can see here, minimum qualifications on the right hand side is also going to be a string

65
00:04:11,160 --> 00:04:11,520
array.

66
00:04:12,930 --> 00:04:19,170
And then we also have preferred qualifications and that is also going to be a string array.

67
00:04:19,830 --> 00:04:24,960
Finally, we have a description which is also going to be a string array and then date added.

68
00:04:26,080 --> 00:04:27,310
Which is a regular string.

69
00:04:27,490 --> 00:04:27,790
All right.

70
00:04:27,790 --> 00:04:31,480
It's not technically a date because remember here, it's not a any kind of date object.

71
00:04:31,480 --> 00:04:32,740
It's just a string.

72
00:04:33,190 --> 00:04:33,430
All right.

73
00:04:33,430 --> 00:04:35,600
So this is a sample interface, right?

74
00:04:35,620 --> 00:04:39,490
We haven't used it anywhere, but we've declared the basic structure, what a job is going to look like.

75
00:04:39,640 --> 00:04:43,000
And now we can utilize this interface in various parts of our app.

76
00:04:43,270 --> 00:04:43,570
All right.

77
00:04:43,870 --> 00:04:44,890
So a good place to start.

78
00:04:44,890 --> 00:04:49,020
We're going to continue exploring how we can add TypeScript to various different features.

79
00:04:49,030 --> 00:04:54,280
Our app, both the components to the functions, to the compose, builds all of that in due time in

80
00:04:54,280 --> 00:04:56,800
this section are mostly going to focus on the view side of things.

81
00:04:56,980 --> 00:05:01,750
And we've made a really good start here in this lesson by defining the interface for a job and exporting

82
00:05:01,750 --> 00:05:06,520
it out of this file so it can be imported and used by many other places around the globe.

83
00:05:07,060 --> 00:05:07,330
All right.

84
00:05:07,510 --> 00:05:09,160
So that's all there is to cover in this lesson.

85
00:05:09,160 --> 00:05:10,780
So I will see you in the next one.
