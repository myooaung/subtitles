WEBVTT
1
00:00:00.390 --> 00:00:01.410
All right.

2
00:00:01.410 --> 00:00:04.770
So we have two more tests to fix in our mutations file.

3
00:00:04.890 --> 00:00:10.650
And luckily they shouldn't be that crazy because these two mutations add selected organizations and

4
00:00:10.650 --> 00:00:11.820
add selected job types.

5
00:00:11.940 --> 00:00:14.920
Expect second arguments of string arrays.

6
00:00:14.940 --> 00:00:16.350
Nothing more crazy than that.

7
00:00:16.590 --> 00:00:18.660
So most of our original tests should work.

8
00:00:19.350 --> 00:00:24.930
So right here we can see TypeScript is again complaining about the state object or the state argument

9
00:00:24.930 --> 00:00:28.080
to the mutation not being a valid global state object.

10
00:00:28.260 --> 00:00:33.420
That's not a problem that we can once again utilize our create state helper function from above.

11
00:00:33.720 --> 00:00:37.530
So right here, I'm going to change this name from state to starting state.

12
00:00:39.420 --> 00:00:44.730
And I'm going to invoke my create state function passing in the custom property that I care about for

13
00:00:44.730 --> 00:00:47.790
this test, which is selected organizations being an empty array.

14
00:00:48.210 --> 00:00:52.320
Then on the very next line, I of course need to make sure I pass in starting state.

15
00:00:53.720 --> 00:00:57.380
The actual mutation expects a ray of strength.

16
00:00:57.410 --> 00:00:59.750
That's exactly what we had in the initial test.

17
00:00:59.990 --> 00:01:01.040
So this will work just great.

18
00:01:01.250 --> 00:01:03.470
And all that's left to do is to just change my assertion.

19
00:01:03.710 --> 00:01:08.450
So instead of verifying the entire state object and all four of its properties, I want to target my

20
00:01:08.450 --> 00:01:09.290
starting state.

21
00:01:09.590 --> 00:01:10.670
That's our new name.

22
00:01:10.790 --> 00:01:14.180
And more specifically, I want to get its selected organizations property.

23
00:01:14.420 --> 00:01:21.050
And I want that to equal not an object, but now an array with those exact same strings that I provided

24
00:01:21.050 --> 00:01:21.440
above.

25
00:01:21.770 --> 00:01:22.460
So there we go.

26
00:01:22.760 --> 00:01:25.850
And it's going to be a very similar modification for this test right here.

27
00:01:26.060 --> 00:01:28.070
So right here, this is going to be starting state.

28
00:01:29.240 --> 00:01:32.030
We're going to pass in this custom object to create state.

29
00:01:32.420 --> 00:01:36.650
Because for this test, this test, we only care about the selected job types array being empty.

30
00:01:36.950 --> 00:01:37.460
Right here.

31
00:01:37.460 --> 00:01:39.170
Let's pass in starting state as well.

32
00:01:39.650 --> 00:01:40.130
Right here.

33
00:01:40.130 --> 00:01:41.840
Let's make sure this is starting state.

34
00:01:41.990 --> 00:01:45.350
And the property I care about this time is selected two job types.

35
00:01:45.680 --> 00:01:50.450
And now we don't care about the whole former partial state with the selected job types property.

36
00:01:50.660 --> 00:01:54.770
We only care about the array because we're accessing the selected job type property right here.

37
00:01:55.220 --> 00:01:58.850
So our array should be an array of two strings like so.

38
00:02:00.050 --> 00:02:00.710
Save that.

39
00:02:00.920 --> 00:02:02.030
Let prepared do its work.

40
00:02:02.060 --> 00:02:05.720
We can see that there are no more typescript violations in this file.

41
00:02:05.960 --> 00:02:11.440
And so what I can do is bring up our old trusty terminal and I'm going to run the entire test suite.

42
00:02:11.840 --> 00:02:18.260
So right here I'm going to execute NPM run test colon unit and that should capture all of our test files,

43
00:02:18.260 --> 00:02:23.720
our component files, our view X files, our GES test files, our typescript test files, etc..

44
00:02:24.140 --> 00:02:26.210
So we're going to let it run for a couple seconds.

45
00:02:26.690 --> 00:02:29.810
And the one that we care about right now is mutations that test that.

46
00:02:29.810 --> 00:02:30.140
Yes.

47
00:02:30.440 --> 00:02:33.560
And we can see if I scroll up here is mutations that test that.

48
00:02:33.560 --> 00:02:33.920
Yes.

49
00:02:33.920 --> 00:02:35.360
And it is passing with no problems.

50
00:02:35.600 --> 00:02:40.760
So all of our tests are passing, which means not just that the assertions are evaluating as they should,

51
00:02:40.940 --> 00:02:44.210
but also that TypeScript is not finding any violations in here.

52
00:02:44.420 --> 00:02:49.700
If TypeScript did find a violation, it would require you to fix it before it ran the test.

53
00:02:50.000 --> 00:02:53.480
So the fact that it is passing means that there's no actual violations here.

54
00:02:53.690 --> 00:02:57.170
This is just additional confirmation from what we see in our code editor.

55
00:02:57.620 --> 00:02:57.950
All right.

56
00:02:57.950 --> 00:03:01.370
So now we have upgraded the mutations test file and we are good to move on.

57
00:03:01.640 --> 00:03:03.260
So I will see you in the next lesson.
