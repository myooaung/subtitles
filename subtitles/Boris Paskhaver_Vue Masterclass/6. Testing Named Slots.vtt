WEBVTT
1
00:00:00.480 --> 00:00:01.260
Okay.

2
00:00:01.260 --> 00:00:05.250
So let's write a couple of tests for our new header container component.

3
00:00:05.730 --> 00:00:13.590
So I'm going to head to my tests directory and my unit folder, then components then shared and I'm

4
00:00:13.590 --> 00:00:19.650
going to create a new test file called header container dot test dot JSP.

5
00:00:21.260 --> 00:00:27.020
I'm going to drag it over to the right hand side and I'll begin by importing our mount function from

6
00:00:27.020 --> 00:00:28.070
view test utils.

7
00:00:28.520 --> 00:00:34.040
As far as why I'm using mount instead of shallow mount, I think it's a little bit safer here because

8
00:00:34.040 --> 00:00:38.010
I am dealing with the idea of components, potentially rendering other components.

9
00:00:38.120 --> 00:00:42.470
Slot is technically a component under the hood and I just want to be safe that I'm getting the full

10
00:00:42.470 --> 00:00:43.130
functionality.

11
00:00:43.310 --> 00:00:45.860
It may be possible that this could work with shallow mount.

12
00:00:45.890 --> 00:00:50.060
You're welcome to try it out, but I'm just going to play it safe and use Mount just in case.

13
00:00:50.600 --> 00:00:50.900
All right.

14
00:00:50.900 --> 00:00:51.770
So we have Mount.

15
00:00:51.770 --> 00:00:56.480
And the next thing I want to import, of course, is the component I'm testing, which is header container.

16
00:00:56.990 --> 00:01:04.160
We see it on the left hand side and it's going to come from the source directory components shared and

17
00:01:04.160 --> 00:01:05.450
header container.

18
00:01:07.670 --> 00:01:08.060
All right.

19
00:01:08.060 --> 00:01:09.700
I'm going to write a describe block.

20
00:01:09.710 --> 00:01:12.380
We are describing our header container component.

21
00:01:13.730 --> 00:01:19.520
And I want to start with a test that tests for our first slot here, our title slot.

22
00:01:20.000 --> 00:01:21.620
So I'm going to write a description.

23
00:01:21.740 --> 00:01:28.070
It allows parent component to provide title content.

24
00:01:30.470 --> 00:01:35.210
And as always, we're going to create a wrapper, which is going to be the return value of invoking

25
00:01:35.210 --> 00:01:37.940
mount and passing in our header container component.

26
00:01:38.270 --> 00:01:43.820
And as you might recall from the previous course section, the way we can provide slots in a test is

27
00:01:43.820 --> 00:01:45.890
by using the configuration object.

28
00:01:46.100 --> 00:01:47.810
The second argument to mount.

29
00:01:48.200 --> 00:01:53.840
So right here we're going to provide an object and it must have a slots property set to an object.

30
00:01:54.050 --> 00:01:56.750
And this is the object where we can figure our slots.

31
00:01:57.500 --> 00:02:04.400
The way this works is the property here represents the slot name and the value represents the HTML that

32
00:02:04.400 --> 00:02:08.090
we want to inject as that slot but written as a string.

33
00:02:08.420 --> 00:02:13.580
So you may recall in the previous section we wrote the property name default and that was referencing

34
00:02:13.580 --> 00:02:17.270
the default slot name, that view assigned to our slot.

35
00:02:17.540 --> 00:02:20.300
In this case, we actually gave our slots explicit names.

36
00:02:20.510 --> 00:02:25.520
So if I want to provide content for the title slot, I have to use a property of title.

37
00:02:25.610 --> 00:02:28.100
It must match this value right here.

38
00:02:28.100 --> 00:02:28.730
Exactly.

39
00:02:29.030 --> 00:02:31.400
So we're populating the title slot content.

40
00:02:31.610 --> 00:02:36.920
And here I can provide something like an H2 and maybe put some text here, like some title.

41
00:02:38.380 --> 00:02:38.800
Okay.

42
00:02:39.100 --> 00:02:41.440
Now, when it comes to testing, what do we really care about?

43
00:02:41.590 --> 00:02:47.740
We care that when we mount our header container, we should see this content in the body of our header

44
00:02:47.740 --> 00:02:48.190
container.

45
00:02:48.370 --> 00:02:51.790
And I think testing for just the text is good enough.

46
00:02:51.940 --> 00:02:55.030
We don't really care about whether this is an H two or H3.

47
00:02:55.180 --> 00:03:01.450
Simply verifying it with the text we have here appears sort of validates for us that we are properly

48
00:03:01.450 --> 00:03:03.190
injecting the slot content.

49
00:03:03.550 --> 00:03:08.930
So what I'm going to do is on my wrapper object, I'm going to call the text method that's going to

50
00:03:08.960 --> 00:03:13.720
going to return a string of all of the text content that the user is going to see when the component

51
00:03:13.720 --> 00:03:14.140
renders.

52
00:03:14.410 --> 00:03:21.010
And I'm going to use the to match matcher to verify that that text contains a substring, a smaller

53
00:03:21.010 --> 00:03:25.060
string, and what text do I want to look for or confirm within my wrappers?

54
00:03:25.060 --> 00:03:31.900
Text a simple string of some title, the exact same text that I provided right here in my H2.

55
00:03:32.560 --> 00:03:32.770
Right?

56
00:03:32.770 --> 00:03:33.790
So I'm going to save that.

57
00:03:33.790 --> 00:03:36.910
I'm going to run NPM, run, test, colon, watch.

58
00:03:38.570 --> 00:03:40.370
And let's see if it passes.

59
00:03:41.330 --> 00:03:42.230
And indeed it does.

60
00:03:42.260 --> 00:03:49.280
I just wanted to fail as well as what I'm going to do is I remove something from my original title slot

61
00:03:49.280 --> 00:03:54.020
and we can see as well that we get the expected failure, that we have the expected substring of some

62
00:03:54.020 --> 00:03:56.570
title, but we're getting something else entirely.

63
00:03:56.870 --> 00:03:57.300
All right.

64
00:03:57.680 --> 00:04:00.340
So we're going to bring this back to some title.

65
00:04:01.620 --> 00:04:04.530
And we can write a very similar test for our other slot.

66
00:04:04.890 --> 00:04:12.180
So right here I'm going to say it allows parent component to provide subtitle content.

67
00:04:13.530 --> 00:04:19.180
And I'm trying my hardest not to get super deep into the implementation in my test descriptions.

68
00:04:19.200 --> 00:04:23.880
So when I use title and subtitle, I'm talking less about the props and more about the purpose of those

69
00:04:23.880 --> 00:04:27.600
slots, which is to kind of provide the primary title and the subtitle.

70
00:04:27.750 --> 00:04:31.530
If you don't think of a better test description that communicates that, feel free to include it.

71
00:04:31.980 --> 00:04:36.000
And what I'm going to do is basically copy that test to have above, because this one's going to be

72
00:04:36.000 --> 00:04:36.630
very similar.

73
00:04:37.020 --> 00:04:38.760
There's just a couple of key tweaks we have to make.

74
00:04:38.910 --> 00:04:44.430
Number one, instead of Title eight targeting the title slot, we now care about testing the other one,

75
00:04:44.430 --> 00:04:45.480
which is called subtitle.

76
00:04:45.870 --> 00:04:50.040
And just to create a little bit of variety here, I'm going to make this an H three just to make sure

77
00:04:50.040 --> 00:04:52.440
it has a little bit of a different look than the test above.

78
00:04:52.710 --> 00:04:58.470
And I'm going to change this to some subtitle and verify that some subtitle appears somewhere in the

79
00:04:58.470 --> 00:05:01.200
text of my header container mounted component.

80
00:05:01.530 --> 00:05:05.250
And we can see that this automatically ran and everything is passing.

81
00:05:05.420 --> 00:05:05.650
All right.

82
00:05:05.670 --> 00:05:08.790
And that, I think is the core crux of what header container is doing.

83
00:05:08.850 --> 00:05:13.290
The rest is just a bunch of demos with the asset classes, which in my opinion isn't really worth testing

84
00:05:13.470 --> 00:05:14.520
because there's no logic there.

85
00:05:14.700 --> 00:05:19.200
So this covers just about everything that I want to worry about in my header container component.
