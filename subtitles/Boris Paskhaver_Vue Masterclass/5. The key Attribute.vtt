WEBVTT
1
00:00:00.560 --> 00:00:01.640
All right.

2
00:00:01.640 --> 00:00:08.510
So at the end of the previous lesson, we configured our V4 directive to iterate over every menu item

3
00:00:08.510 --> 00:00:13.520
string within our menu items array and to render a list item for each one.

4
00:00:13.730 --> 00:00:19.250
Our goal here, of course, was to remove our duplication and our redundancy of having to copy and paste

5
00:00:19.250 --> 00:00:24.710
a whole bunch of list items that were fundamentally identical, with the one exception being the text

6
00:00:24.710 --> 00:00:25.490
that they displayed.

7
00:00:25.820 --> 00:00:31.610
But luckily, having access to each unique menu item string and menu items as a temporary variable,

8
00:00:31.760 --> 00:00:39.020
we were able to inject or interpolate the value of that menu item directly into our hybrid, and we're

9
00:00:39.020 --> 00:00:42.010
all good to go here, except our app refuses to compile.

10
00:00:42.020 --> 00:00:44.330
So what Vue needs from us is one more thing.

11
00:00:44.330 --> 00:00:52.430
In order to make this a properly valid render for view, view needs something called a key prop.

12
00:00:52.550 --> 00:00:58.070
It's convention to provide it whenever we have a V4 directive, and if I hover my mouse over this,

13
00:00:58.430 --> 00:01:03.380
we'll see that it says elements in iteration expect to have a V bind key directive.

14
00:01:03.410 --> 00:01:03.740
All right.

15
00:01:04.100 --> 00:01:10.100
So the way this works is behind the scenes view is keeping track of all of the elements in our page.

16
00:01:10.280 --> 00:01:15.890
And obviously when we write the out as pure HTML, it's a lot easier for you to keep track of it because

17
00:01:15.890 --> 00:01:18.140
they're all written explicitly in line.

18
00:01:18.350 --> 00:01:21.860
Now we have some HTML that is being dynamically generated.

19
00:01:22.070 --> 00:01:26.750
If our menu items array was 15 items long, well then we'd have 50 list items.

20
00:01:26.870 --> 00:01:30.740
And if our menu items array was three items long, we'd have three list items.

21
00:01:31.040 --> 00:01:37.160
What Vue needs from us is some kind of unique identifier that it can use internally to track each one

22
00:01:37.160 --> 00:01:42.170
of those unique allies, because it becomes harder for it to distinguish all of those dynamic elements

23
00:01:42.170 --> 00:01:45.830
unless we give you a unique identifier for each one.

24
00:01:46.610 --> 00:01:49.460
So the way we fix this is going to look like this right here.

25
00:01:49.460 --> 00:01:51.350
We're going to write up a syntax to talk about it.

26
00:01:51.620 --> 00:01:57.620
We're going to use our V bind directive, which we saw earlier in the course that allows us to bind

27
00:01:57.830 --> 00:02:00.830
some kind of dynamic value to an optimal attribute.

28
00:02:01.130 --> 00:02:02.870
So right here we're going to use V bind.

29
00:02:03.590 --> 00:02:05.600
Then what do we want to bind to?

30
00:02:05.600 --> 00:02:11.060
We specify that with our colon and what we want to bind to is a specific name that we have to provide

31
00:02:11.060 --> 00:02:12.350
here called Key.

32
00:02:13.010 --> 00:02:13.370
All right.

33
00:02:13.640 --> 00:02:15.860
And Key is basically a unique identifier.

34
00:02:15.860 --> 00:02:17.480
You can think of an object key.

35
00:02:17.600 --> 00:02:18.680
It's the same principle.

36
00:02:18.680 --> 00:02:22.580
It's like an object property name or a unique key and a key value pair.

37
00:02:22.730 --> 00:02:28.160
It's some kind of unique identifier that's going to be unique for all of our iterations.

38
00:02:28.160 --> 00:02:28.430
Right?

39
00:02:28.790 --> 00:02:32.840
So I'm going to provide an equal sign and double quotes here.

40
00:02:33.050 --> 00:02:40.490
So one obvious unique thing that is going to persist as we iterate is the actual menu item that we are

41
00:02:40.490 --> 00:02:41.750
iterating over, right?

42
00:02:41.750 --> 00:02:47.030
Each one of these strings is completely unique, so that string can be a perfect, unique identifier

43
00:02:47.210 --> 00:02:52.520
for the given list item that view is going to render on any given V v4 iteration.

44
00:02:52.520 --> 00:02:52.850
Right.

45
00:02:53.150 --> 00:02:59.600
So ideally, what that unique identifier is is something simple like a string or a number or some kind

46
00:02:59.600 --> 00:03:00.380
of simple ID.

47
00:03:00.800 --> 00:03:06.680
You should generally avoid complex objects, like, like JavaScript objects or arrays or custom objects

48
00:03:06.680 --> 00:03:07.700
as unique identifiers.

49
00:03:07.910 --> 00:03:10.280
We're looking for some kind of simple primitive value.

50
00:03:10.400 --> 00:03:15.590
And in this case, the string is a perfect example, and we're going to provide that right here inside

51
00:03:15.590 --> 00:03:16.280
our double quotes.

52
00:03:16.640 --> 00:03:20.090
Well, the cool thing about V bind is it is dynamic.

53
00:03:20.120 --> 00:03:26.120
So when we write our menu item in here, which we have full permission to do because we're going to

54
00:03:26.120 --> 00:03:32.690
have access to to this menu item, temporary variable because we declared it right here, we are able

55
00:03:32.690 --> 00:03:36.800
to use it right here in line to literally interpolate its text on screen.

56
00:03:36.980 --> 00:03:43.850
And we are also able to provide it here as the dynamic key that we're going to assign to each list item.

57
00:03:44.120 --> 00:03:50.180
So just to reiterate here, we're not literally giving the text menu item as our unique key because

58
00:03:50.180 --> 00:03:53.930
in that case, each one of our six list items would each have a menu item.

59
00:03:54.140 --> 00:04:00.410
Rather, this is a dynamic reference to whatever happens to be the string that menu item represents

60
00:04:00.410 --> 00:04:01.850
on a given iteration.

61
00:04:02.030 --> 00:04:07.850
So first step teams, then locations, then life and bubble, etc. And the reason it's dynamic again

62
00:04:07.850 --> 00:04:10.220
is because of the V bind directive.

63
00:04:10.220 --> 00:04:14.960
Remember, V Bind allows us to connect a dynamic value to an HMO attribute.

64
00:04:14.960 --> 00:04:16.730
We saw the syntax right here.

65
00:04:16.850 --> 00:04:20.840
We are binding whatever happens to be the dynamic value of the URL.

66
00:04:20.990 --> 00:04:24.650
To this attribute, we're doing the exact same thing here.

67
00:04:24.650 --> 00:04:30.230
We're binding a dynamic value, but menu item is not coming from our data object directly.

68
00:04:30.350 --> 00:04:36.470
It's coming from this temporary variable that is going to exist on each loop for our menu items array,

69
00:04:36.470 --> 00:04:39.200
which is part of our actual data object.

70
00:04:39.200 --> 00:04:39.470
Right?

71
00:04:39.710 --> 00:04:44.780
So as soon as we declare this V four, we have access to whatever name or word we assign here.

72
00:04:44.900 --> 00:04:46.010
And this could be up to us.

73
00:04:46.040 --> 00:04:50.750
It can be a menu item, it can be item, it can be an element, whatever you want, but whatever name

74
00:04:50.750 --> 00:04:55.640
you give it here in the v v4, you're welcome to use it and we can use it in our template or we can

75
00:04:55.640 --> 00:04:59.990
dynamically inject whatever that value is into this v bind bound.

76
00:05:00.070 --> 00:05:01.180
To this key property.

77
00:05:01.840 --> 00:05:07.300
And what that is going to do is dynamically assign that unique identifier of menu item on each iteration

78
00:05:07.420 --> 00:05:08.800
and clear this problem up.

79
00:05:09.130 --> 00:05:13.480
So I'm going to save this and we're still going to have some excellent errors, but we've solved the

80
00:05:13.480 --> 00:05:21.550
very first problem, which is lacking that key attribute that Vue needs in order to uniquely identify

81
00:05:21.580 --> 00:05:22.510
each list item.

82
00:05:22.810 --> 00:05:28.870
So if I hover my mouse over, we're going to see a couple more issues here and I want to walk through

83
00:05:28.900 --> 00:05:29.860
through them one by one.

84
00:05:30.070 --> 00:05:36.130
The first is one that we saw earlier, which is whenever we use the V bind syntax view prefers that

85
00:05:36.130 --> 00:05:39.220
we get rid of the bind and just use the colon syntax.

86
00:05:39.400 --> 00:05:43.120
We previously did this right here with our V bind to our ref.

87
00:05:43.390 --> 00:05:46.640
So we're going to follow that advice and get rid of this v bind.

88
00:05:46.660 --> 00:05:50.110
Again, this syntax and the V bind syntax are identical.

89
00:05:50.260 --> 00:05:54.430
This is just a smaller shortcut for the exact same operation.

90
00:05:54.430 --> 00:05:56.560
So I'm going to save this and this is not enough.

91
00:05:56.890 --> 00:06:04.120
This last violation that is left gives us refers to the order that view and s Lynn prefer elements be

92
00:06:04.120 --> 00:06:04.690
placed in.

93
00:06:04.930 --> 00:06:09.790
So you can see here the violation says attribute colon key should go before class.

94
00:06:10.030 --> 00:06:16.060
So Vue prefers I'm guessing that this element, this dynamic piece of information go at the very beginning.

95
00:06:16.060 --> 00:06:20.480
So I'm going to drag it over here and put it at the very beginning.

96
00:06:20.500 --> 00:06:20.800
All right.

97
00:06:20.980 --> 00:06:27.490
And then if I hover my mouse over V4, you can see it says attribute before should also go before class.

98
00:06:27.730 --> 00:06:33.370
So I'm going to take this and I'm going to move it above class and save and prettier is going to save

99
00:06:33.370 --> 00:06:34.540
that and move that right here.

100
00:06:34.870 --> 00:06:35.140
All right.

101
00:06:35.140 --> 00:06:37.900
So right now, attribute before should even go before key.

102
00:06:38.020 --> 00:06:38.770
That's really fine.

103
00:06:38.770 --> 00:06:41.410
So we're just playing around here until we get something that works.

104
00:06:41.410 --> 00:06:44.110
So right here, save that and that works.

105
00:06:44.110 --> 00:06:49.240
And that makes sense to me because it makes logical sense for us to declare our temporary variable in

106
00:06:49.240 --> 00:06:52.720
our V for loop before we use it as our unique key.

107
00:06:52.960 --> 00:06:58.150
And as for why we want these items before class, the reason I'm guessing the View team wants that is

108
00:06:58.150 --> 00:07:03.550
because these are view specific elements that are logical or iterative or have something to deal with

109
00:07:03.700 --> 00:07:05.920
the logic of how we're constructing this ally.

110
00:07:06.070 --> 00:07:10.930
So it makes sense that it's the first thing that we want our readers eyes to see before they get to

111
00:07:10.930 --> 00:07:13.540
these HTML attributes like class.

112
00:07:13.580 --> 00:07:13.840
Right.

113
00:07:14.110 --> 00:07:18.400
But with that, we should get everything that we want if I move back to my browser.

114
00:07:19.440 --> 00:07:24.360
We now see that we have successfully rendered the same menu items onto our screen.

115
00:07:24.600 --> 00:07:30.630
Now keep in mind we do have a duplicate occurrence of teams, but that is to be expected.

116
00:07:30.660 --> 00:07:37.020
That is because we are rendering our regular ally here with the hardcoded value of teams and we are

117
00:07:37.050 --> 00:07:41.670
also iterating over our full list of menu items, which also includes teams.

118
00:07:41.910 --> 00:07:47.370
The reason I kept this duplicate value in here is because we have a little bit of a distinction between

119
00:07:47.370 --> 00:07:54.030
it and all of the other menu items, namely that all of the other menu items have a margin left nine

120
00:07:54.030 --> 00:07:56.340
class on them, but this one doesn't.

121
00:07:56.490 --> 00:08:00.570
And we're going to take a look at how we can resolve this difference using some tailwind helpers in

122
00:08:00.570 --> 00:08:01.680
the very next lesson.
