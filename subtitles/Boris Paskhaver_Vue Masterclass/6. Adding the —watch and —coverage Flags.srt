1
00:00:00,330 --> 00:00:01,470
All right.

2
00:00:01,470 --> 00:00:07,380
In this lesson, I want to introduce you to two flags that we can apply to just when it runs.

3
00:00:07,590 --> 00:00:14,760
A flag is just a configuration setting or an option that we can enable for the test run or before it

4
00:00:14,760 --> 00:00:16,050
runs our files.

5
00:00:16,380 --> 00:00:20,130
In order to do that, I want to open up my package, that JSON file.

6
00:00:20,520 --> 00:00:27,210
And as a reminder, these scripts right here are all commands that we can run from our command line

7
00:00:27,210 --> 00:00:29,400
within the project directory.

8
00:00:29,610 --> 00:00:35,850
So for example, the reason we've been able to run NPM run test colon unit is because we have that script

9
00:00:35,850 --> 00:00:36,780
defined here.

10
00:00:36,990 --> 00:00:42,660
And when we run that, what happens behind the scenes is that node runs this command on the right hand

11
00:00:42,660 --> 00:00:45,330
side, view the service test unit.

12
00:00:45,690 --> 00:00:48,240
So I'm just going to provide my flags right here.

13
00:00:48,420 --> 00:00:53,460
And the first thing I want to do is to show you the watch feature ingest.

14
00:00:53,730 --> 00:00:56,100
So what I want to do here is copy this command.

15
00:00:56,310 --> 00:01:01,860
I'm going to paste it to the line below and we cannot have two scripts with the same name, which is

16
00:01:01,860 --> 00:01:02,850
why we're getting this error.

17
00:01:03,060 --> 00:01:07,410
I'm going to change this new script to test Colon Watch.

18
00:01:07,980 --> 00:01:13,530
And at the very end of the actual command, these are the flags that are going to be applied not specifically

19
00:01:13,530 --> 00:01:17,820
to the vehicle service, but to Jess, which is what it is running behind the scenes.

20
00:01:18,090 --> 00:01:24,180
I want to add a flag that is going to enable watch mode and the syntax is just going to be dash, dash,

21
00:01:24,300 --> 00:01:24,900
watch.

22
00:01:25,320 --> 00:01:29,700
Again, a flag like watch is basically a configuration setting.

23
00:01:29,700 --> 00:01:31,050
It is an option that we're enabling.

24
00:01:31,320 --> 00:01:36,900
So what we're seeing is whenever we run NPM, run test watch, we're going to run just in a specific

25
00:01:36,900 --> 00:01:37,770
watch mode.

26
00:01:38,100 --> 00:01:41,850
What watch mode is going to do is watch our files for changes.

27
00:01:42,030 --> 00:01:47,190
And whenever we make changes to those files, either the test files or the files that they're targeting

28
00:01:47,460 --> 00:01:51,600
just is going to observe those changes and trigger a fresh test run.

29
00:01:51,840 --> 00:01:56,940
And the problem that this solves is the kind of monotony of having to go into our terminal each time

30
00:01:56,940 --> 00:01:59,760
and manually rerun the test each time.

31
00:01:59,760 --> 00:02:03,060
That's been pretty dull so far and this will automate that for us.

32
00:02:03,270 --> 00:02:04,920
So I'm going to start at this script.

33
00:02:04,920 --> 00:02:08,370
I'm going to run NPM, run, test, colon, watch.

34
00:02:08,370 --> 00:02:09,930
That's the new command we just added.

35
00:02:10,680 --> 00:02:14,280
And you'll notice instead of completing, it's just going to hang right here.

36
00:02:14,280 --> 00:02:18,960
You'll notice it's going to say no tests found related to files changed since last commit.

37
00:02:19,260 --> 00:02:25,440
So behind the scenes it's actually using your gift to track which files have changed since your last

38
00:02:25,440 --> 00:02:30,300
git commit and whatever files have changed is the ones it's going to run the associated tests for.

39
00:02:30,600 --> 00:02:35,790
You can see right below it says press eight to run all tests so we can press a to trigger our initial

40
00:02:35,790 --> 00:02:38,030
test run and it's going to run through playground.

41
00:02:38,040 --> 00:02:38,700
I test that.

42
00:02:38,700 --> 00:02:39,090
Yes.

43
00:02:39,360 --> 00:02:41,340
And run those tests off.

44
00:02:41,520 --> 00:02:46,380
Now let's take a look at what happens when we head back to playground at Jess and change some code.

45
00:02:47,160 --> 00:02:52,500
So notice I'm not going to even need to go back to my terminal because this is a constantly running

46
00:02:52,500 --> 00:02:53,040
process.

47
00:02:53,250 --> 00:02:58,290
So whenever I change my file, such as adding Z here at the end and save it, you'll notice the test

48
00:02:58,290 --> 00:02:59,970
will automatically rerun.

49
00:02:59,970 --> 00:03:04,890
I'm going to do it right now and you'll notice instantly just detects that something has changed.

50
00:03:05,040 --> 00:03:10,500
It executes the code and gives us the new output and our test is failing because we're getting the wrong

51
00:03:10,500 --> 00:03:12,570
string for that method that expects odd.

52
00:03:12,720 --> 00:03:19,440
So I'm going to erase the C save the file again and I'm going to immediately see the output rerun and

53
00:03:19,440 --> 00:03:22,410
the same rules apply if I change something in a test file.

54
00:03:22,410 --> 00:03:28,320
So if I change this to Z right here and save the file, Jess notices that we have a change in our test

55
00:03:28,320 --> 00:03:28,620
file.

56
00:03:28,740 --> 00:03:31,110
It reruns that file and immediately gives us the output.

57
00:03:31,110 --> 00:03:35,250
So the feedback loop is much quicker because we don't have to go back and forth between the terminal.

58
00:03:35,310 --> 00:03:37,050
It'll just show us the new output.

59
00:03:37,050 --> 00:03:37,320
Right?

60
00:03:37,560 --> 00:03:40,350
So I'm going to bring this back again to a perfectly passing test.

61
00:03:40,350 --> 00:03:44,550
We keep in mind this process is always running, so we need to stop it.

62
00:03:44,550 --> 00:03:47,970
We need to terminate it just like our View app if we wanted to stop running.

63
00:03:47,970 --> 00:03:53,100
So right here I'm going to press control D on my, on my Mac machine and that is going to terminate

64
00:03:53,100 --> 00:03:53,640
the process.

65
00:03:53,790 --> 00:03:56,130
And now we're back to my command line.

66
00:03:56,130 --> 00:03:58,140
All right, that's the watch mode.

67
00:03:58,140 --> 00:04:04,050
And then if I head back to my package, that JSON, I'm going to add a different flag, but I'm going

68
00:04:04,050 --> 00:04:10,020
to add it to my test unit command and that flag where that option is going to be dash dash coverage.

69
00:04:10,200 --> 00:04:13,050
And what that is going to do is enable test coverage.

70
00:04:13,350 --> 00:04:19,440
Test coverage, as a reminder, tells us what percentage of our code is properly being tested or in

71
00:04:19,440 --> 00:04:24,330
other words, what percentage of our code our tests are running through as they're executing all of

72
00:04:24,330 --> 00:04:25,050
their internals.

73
00:04:25,290 --> 00:04:27,750
So let's go ahead and run NPM run test unit.

74
00:04:27,750 --> 00:04:29,820
Right now, we've added that flag.

75
00:04:29,820 --> 00:04:32,010
So now this command will run with that flag.

76
00:04:32,010 --> 00:04:37,830
We can even see it output right here and right now we will see that below our initial output with all

77
00:04:37,830 --> 00:04:38,460
the checkmarks.

78
00:04:38,640 --> 00:04:42,060
We're going to get this table with a bunch of columns on the left hand side.

79
00:04:42,060 --> 00:04:47,040
We're going to see all of the files, the implementation files that our tests ran through.

80
00:04:47,190 --> 00:04:50,490
Right now there's only playground that, Jess, but this list will grow.

81
00:04:50,490 --> 00:04:55,410
As we add more tests for different files, then we have four columns.

82
00:04:55,620 --> 00:04:58,770
Percentage of statements, percentage of branches.

83
00:04:58,950 --> 00:04:59,760
Percentage of.

84
00:04:59,840 --> 00:05:07,340
Functions and percentage of lines, and that reflects how much of our code is covered by our tests.

85
00:05:07,340 --> 00:05:10,190
So this means 100% of the statements in our files.

86
00:05:10,370 --> 00:05:11,840
100% of the branches.

87
00:05:11,840 --> 00:05:14,930
Which means the separate splitting logic is covered.

88
00:05:14,990 --> 00:05:17,570
100% of functions and 100% of lines.

89
00:05:17,570 --> 00:05:17,780
Right.

90
00:05:17,930 --> 00:05:20,810
And this isn't really super helpful because we have perfect test coverage.

91
00:05:20,990 --> 00:05:24,800
But let me show you an example of how this will look when we do not cover something.

92
00:05:25,100 --> 00:05:31,060
So as you may recall, we have an even or odd function available and we have two tests for it right

93
00:05:31,070 --> 00:05:31,280
here.

94
00:05:31,280 --> 00:05:37,040
We have one that tests an even number input that produces an output of an even string and one for an

95
00:05:37,040 --> 00:05:38,360
odd number output.

96
00:05:38,630 --> 00:05:42,890
And of course, that's handled by these two, if else, conditions right here.

97
00:05:43,190 --> 00:05:48,980
So what I'm going to do is temporarily comment out my second test, which is testing the odd number.

98
00:05:49,190 --> 00:05:54,230
And if I never run this code, then there's never going to be a test execution that actually runs through

99
00:05:54,230 --> 00:05:56,990
my else statement because there will never be an odd number.

100
00:05:57,230 --> 00:05:59,330
So now when I run my test suite again.

101
00:06:00,920 --> 00:06:04,430
Well, notice that we're not going to have good test coverage or perfect test coverage.

102
00:06:04,640 --> 00:06:10,040
You'll notice in the branch column it's going to tell us that only 50% of the available branches and

103
00:06:10,040 --> 00:06:11,810
again, a branch is just a splitting pass.

104
00:06:11,810 --> 00:06:17,240
So basically, if statements somewhere in your code where there is a logic or a piece of logic that

105
00:06:17,240 --> 00:06:21,380
may or may not be executed depending on a path in this case.

106
00:06:21,380 --> 00:06:23,000
And if statement creates a branch of logic.

107
00:06:23,210 --> 00:06:28,100
What this is telling us is that we've covered only 50% of our branches and that should hopefully make

108
00:06:28,100 --> 00:06:31,880
sense because we have two pathways of execution and even or odd.

109
00:06:32,000 --> 00:06:34,220
We have the if statement and we have the statement.

110
00:06:34,340 --> 00:06:39,260
We've only covered one out of two of those, which is equivalently 50%.

111
00:06:39,590 --> 00:06:42,440
So I try not to worry too much about these columns right here.

112
00:06:42,590 --> 00:06:46,160
The most important column and the most helpful column is on the right hand side.

113
00:06:46,310 --> 00:06:50,060
It's going to tell you which line numbers have not been covered by your tests.

114
00:06:50,330 --> 00:06:56,510
This tells us line number five, which of course, is the return statement with the odd, which reminds

115
00:06:56,510 --> 00:07:02,000
us, oh yeah, this is something that I should definitely have a test for right now.

116
00:07:02,180 --> 00:07:08,480
This is another benefit of TD is you're much less likely to run into situations like this because in

117
00:07:08,480 --> 00:07:13,850
a TD a setup, you're never really going to enter into a situation where you allow yourself to write

118
00:07:13,850 --> 00:07:17,990
a test or a implementation unless you have a failing test.

119
00:07:18,200 --> 00:07:23,420
So if we were writing this using TDD, we would first write this test right here for our even number.

120
00:07:23,600 --> 00:07:28,520
And the only implementation that we would have permission to write would be our first if statement,

121
00:07:28,520 --> 00:07:30,620
because that's the only thing that the tests would cover.

122
00:07:30,920 --> 00:07:36,300
Then we would have to write a new test to cover the odd statement in order to be able to add this else

123
00:07:36,320 --> 00:07:37,610
statement to our implementation.

124
00:07:37,790 --> 00:07:42,200
And thus our entire test coverage throughout the process would be 100%.

125
00:07:42,650 --> 00:07:48,050
As soon as we introduce a test that has a new feature, we add the corresponding implementation and

126
00:07:48,050 --> 00:07:52,580
that ensures that all the new code we write is going to be covered by some test, because we wrote the

127
00:07:52,580 --> 00:07:55,040
test that's going to run that code first, right?

128
00:07:55,040 --> 00:07:56,660
So we're less likely to avoid this problem.

129
00:07:56,960 --> 00:08:02,690
Imagine if you were not using TDD, you might have written the even or odd function first and then you

130
00:08:02,690 --> 00:08:08,270
may have even decided to indeed write tests, but you may have completely forgotten to write this second

131
00:08:08,570 --> 00:08:10,730
test for these for the all statement.

132
00:08:10,910 --> 00:08:16,880
And thus half of your code is actually untested and brittle and not going to be caught in an error if,

133
00:08:16,880 --> 00:08:21,620
for example, you decide to refactor even or odd and mess something up in the statement because you're

134
00:08:21,620 --> 00:08:27,710
never actually testing that pathway of execution with a test and TDD helps to avoid issues like that.

135
00:08:28,010 --> 00:08:33,770
So I'm going to comment this line back in and now when I read on everything, we should once again have

136
00:08:33,770 --> 00:08:35,540
100% test coverage.

137
00:08:35,630 --> 00:08:35,870
All right.

138
00:08:36,200 --> 00:08:38,030
That's all there is to cover in this lesson.

139
00:08:38,030 --> 00:08:40,160
We introduced two flags that we can add to.

140
00:08:40,160 --> 00:08:47,360
Just one is the watch flag, which watches your files for changes and reruns, the test suite whenever

141
00:08:47,360 --> 00:08:48,500
anything changes.

142
00:08:48,770 --> 00:08:54,530
And then the other one is the coverage flag, which creates a coverage report after the test suite is

143
00:08:54,530 --> 00:08:59,810
done running, which shows you what percentage of your code has been executed by tests that helps you

144
00:08:59,810 --> 00:09:04,340
to fill in holes in case there's something you forgot to cover in your tests.

145
00:09:04,520 --> 00:09:04,820
All right.

146
00:09:05,000 --> 00:09:06,710
That's all there is to cover in this lesson.

147
00:09:06,710 --> 00:09:08,210
So I will see you in the next one.
