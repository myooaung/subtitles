WEBVTT
1
00:00:00.420 --> 00:00:06.630
All right, so let's start wiring up the dynamic aspects of our job listing components singular.

2
00:00:06.870 --> 00:00:12.840
So as a reminder, in our job listings component, we are passing down a job prop with the job object.

3
00:00:13.020 --> 00:00:19.260
So the first thing I'd like to do is set up that prop recognition on the child on the job listing component.

4
00:00:19.590 --> 00:00:22.680
So let me open up that component, job listing dot view.

5
00:00:22.710 --> 00:00:23.460
Here it is.

6
00:00:23.790 --> 00:00:25.860
Here we have all of our hardcoded text.

7
00:00:26.130 --> 00:00:31.080
And if I scroll down to the bottom to the configuration object, we can add our prop recognition.

8
00:00:31.080 --> 00:00:36.450
So right here, the property we provide for view as props, we set that equal to an object where the

9
00:00:36.450 --> 00:00:39.090
properties represent the props that are being passed in.

10
00:00:39.390 --> 00:00:45.420
So in the previous lesson, we passed down a job prop from my parent, in this case the job listings

11
00:00:45.420 --> 00:00:45.870
component.

12
00:00:46.260 --> 00:00:50.520
And as a reminder, the way we can do a little bit more validation here is we can provide an object

13
00:00:50.520 --> 00:00:52.140
right here in that object.

14
00:00:52.140 --> 00:00:57.120
We can have a type property where we tell the you what kind of object type will be or what kind of data

15
00:00:57.120 --> 00:00:57.390
type.

16
00:00:57.390 --> 00:01:00.360
Rather it can be a string can be a number, it can be a boolean.

17
00:01:00.540 --> 00:01:02.670
In our case, it's going to be an object.

18
00:01:02.670 --> 00:01:07.860
So I'm just going to write an object with a capital oh that represents a JavaScript object, and then

19
00:01:07.860 --> 00:01:11.100
I can add a required property set to true.

20
00:01:11.340 --> 00:01:17.520
And that mandates that the job listing component must receive a job prop from its parent.

21
00:01:17.700 --> 00:01:23.070
And that is going to be the case in our situation because as we iterate over the 100 jobs, we are going

22
00:01:23.070 --> 00:01:28.470
to pass each job listing its own individual job object with that jobs information.

23
00:01:28.920 --> 00:01:29.310
Okay.

24
00:01:29.850 --> 00:01:34.560
The other thing that I'd like to do in this lesson before we start revising all this code is I want

25
00:01:34.560 --> 00:01:39.810
to remind you that we have to root or link components right here, the one that wraps all of our other

26
00:01:39.810 --> 00:01:40.890
divs and things like that.

27
00:01:41.220 --> 00:01:44.490
And right here, the router link that holds our expand button.

28
00:01:44.730 --> 00:01:50.430
And when we were building this out, we made each one reference a static link of slash jobs, slash

29
00:01:50.430 --> 00:01:55.470
results, slash one, and obviously each job is actually going to have a different ID, it's not going

30
00:01:55.470 --> 00:01:56.040
to be one.

31
00:01:56.280 --> 00:02:01.880
So it would be really great if we could generate a dynamic URL here for root and link to navigate to,

32
00:02:02.130 --> 00:02:07.740
which of course is going to be slash jobs, slash results, followed by whatever happens to be the idea

33
00:02:07.740 --> 00:02:08.760
of that given job.

34
00:02:08.760 --> 00:02:15.930
So if the job has idea 53, we want that component to render slash jobs, slash results, slash 53 So

35
00:02:15.930 --> 00:02:17.910
we could potentially put some of that logic here.

36
00:02:17.910 --> 00:02:23.130
But I think a really good place to write some logic to calculate or concatenate that URL will be in

37
00:02:23.130 --> 00:02:24.240
a computed property.

38
00:02:24.540 --> 00:02:27.630
So right here I'm going to add a computed object.

39
00:02:29.000 --> 00:02:32.750
And here, of course, we define methods and we can use those methods in our template.

40
00:02:32.930 --> 00:02:39.050
And I want to call this method job page link because it is the link to a single job page.

41
00:02:39.560 --> 00:02:42.470
So here I'm going to use my ES6 interpolation syntax.

42
00:02:42.470 --> 00:02:45.650
I'm going to start with those kind of squint squibs.

43
00:02:45.650 --> 00:02:49.610
So the lines are till does I forget exactly what they're called, but the, the ones that enable us

44
00:02:49.610 --> 00:02:52.370
to embed variables or references inside the string.

45
00:02:53.720 --> 00:02:54.380
Temple strings.

46
00:02:54.380 --> 00:02:55.010
That's what they're called.

47
00:02:55.250 --> 00:02:59.990
And then in here, of course, I'm going to begin with the constant string of slash jobs, slash results.

48
00:03:00.470 --> 00:03:06.800
And then, of course, I want to dynamically inject or interpolate the value of my job ID so I know

49
00:03:06.800 --> 00:03:11.150
I can use the dollar sign in JavaScript to embed some content right here.

50
00:03:11.390 --> 00:03:13.070
And how do I reference my prop?

51
00:03:13.310 --> 00:03:18.200
Well, I reference any of my props the exact same way I reference any of my data properties using the

52
00:03:18.200 --> 00:03:18.950
this keyword.

53
00:03:18.950 --> 00:03:19.670
It's no different.

54
00:03:20.000 --> 00:03:21.380
So I'm going to save this.

55
00:03:21.380 --> 00:03:26.480
And on the this object, I'm going to have the job prop that I received for my parent.

56
00:03:26.810 --> 00:03:30.320
And on that job object, I'm going to have an ID property.

57
00:03:30.710 --> 00:03:34.580
So that's going to be some string of one through 100 in our case.

58
00:03:34.790 --> 00:03:37.850
And whatever it is for that given component, we're going to generate that string.

59
00:03:38.030 --> 00:03:43.490
So all 100 of our job listings components will run through this logic and generate their own custom

60
00:03:43.490 --> 00:03:44.750
string with their own custom ID.

61
00:03:45.770 --> 00:03:46.130
All right.

62
00:03:46.400 --> 00:03:51.770
So with that, we have everything we need in order to start revising all of our hardcoded text and replacing

63
00:03:51.770 --> 00:03:57.260
all of these static references with dynamic references from the object that we got from the backend.

64
00:03:57.440 --> 00:03:59.090
And we're going to do that in the very next lesson.
