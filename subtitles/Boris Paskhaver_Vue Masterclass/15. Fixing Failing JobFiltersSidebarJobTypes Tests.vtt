WEBVTT
1
00:00:00.580 --> 00:00:01.350
Okay.

2
00:00:01.350 --> 00:00:07.140
So the code changes that we added in the last couple of lessons are going to cause our tests to fail

3
00:00:07.380 --> 00:00:10.680
for the job filter side bar job types component.

4
00:00:10.920 --> 00:00:13.920
But the good news is these failures are to be expected.

5
00:00:13.920 --> 00:00:19.650
They are caused by the same reason that we saw a couple lessons ago when we were refactoring a different

6
00:00:19.650 --> 00:00:20.070
component.

7
00:00:20.280 --> 00:00:22.350
It's because of our different implementation.

8
00:00:22.590 --> 00:00:27.840
We are no longer relying on a dollar sign store and the dollar sign or property.

9
00:00:27.960 --> 00:00:31.020
We are relying on return values from helper functions.

10
00:00:31.260 --> 00:00:36.570
And as you can see here in our create config factory function in the test suite, we were mocking out

11
00:00:36.570 --> 00:00:42.480
those properties, so we were writing our tests to fit our previous implementation using the options

12
00:00:42.480 --> 00:00:43.020
API.

13
00:00:43.710 --> 00:00:48.690
So all we have to do of course is to remove all of this set up right here and simply handle the same

14
00:00:48.690 --> 00:00:54.540
responsibilities by marking out the helper functions, functions that we're utilizing in the component.

15
00:00:54.810 --> 00:00:59.190
So in our test week we're going to mark out, use store and have it return something to us that we can

16
00:00:59.190 --> 00:00:59.460
use.

17
00:00:59.700 --> 00:01:04.590
We're going to mark out, use router and finally we're going to mark out use unique job types.

18
00:01:04.590 --> 00:01:10.350
That is our own composable function in comparison to these helper functions which come from other libraries.

19
00:01:10.530 --> 00:01:15.540
But we're going to mark them for the same reason, which is we want to create separation between them

20
00:01:15.540 --> 00:01:18.780
in our component so we can test our component in isolation.

21
00:01:19.110 --> 00:01:24.810
So first up in our create config factory function here, I'm going to remove this mark section entirely.

22
00:01:24.810 --> 00:01:25.950
We no longer need it.

23
00:01:26.130 --> 00:01:30.840
We're not going to mark out those properties on the this keyword inside the component.

24
00:01:31.170 --> 00:01:32.100
So let's remove that.

25
00:01:33.190 --> 00:01:38.320
And if we remove that, we're no longer going to need the dollar sign store and dollar sign rooter parameters.

26
00:01:38.590 --> 00:01:39.460
So let's remove that.

27
00:01:40.000 --> 00:01:40.390
Okay.

28
00:01:40.390 --> 00:01:45.310
So now that we're not going to be able to provide a mock store any a mock router into this function,

29
00:01:45.310 --> 00:01:48.370
how are we going to mark out a store in a router in every test?

30
00:01:48.520 --> 00:01:52.960
Well, we're going to import the use store and use router functions and mock them out and have them

31
00:01:52.960 --> 00:01:54.310
return whatever we want.

32
00:01:54.580 --> 00:01:57.550
So at the very top, we're going to write a whole bunch of statements.

33
00:01:57.820 --> 00:02:02.680
So first up, let's import use store that's going to come from view X.

34
00:02:02.920 --> 00:02:07.960
And as soon as we do that, let's invoke the Mark method on just providing view X and now we're going

35
00:02:07.960 --> 00:02:13.390
to mark out all of that functionality, including use store or we're going to repeat the exact same

36
00:02:13.390 --> 00:02:15.130
logic using use router.

37
00:02:15.460 --> 00:02:16.210
That's right here.

38
00:02:16.210 --> 00:02:20.470
Import use router that is coming from a view router.

39
00:02:20.830 --> 00:02:25.750
And on the line below, I'm immediately going to mark out the view router package.

40
00:02:26.110 --> 00:02:29.440
And finally, I also want to mark out my own composable function.

41
00:02:29.680 --> 00:02:37.420
So right here I'm going to import use unique job types and that is going to come from the source directory

42
00:02:37.420 --> 00:02:43.030
store composable and underline immediately below, you guessed it, we're going to call just mock and

43
00:02:43.030 --> 00:02:47.600
pass in our own directory, which is source slash, store slash composable.

44
00:02:47.740 --> 00:02:49.540
That is the file to be more specific.

45
00:02:49.870 --> 00:02:50.530
Save that.

46
00:02:50.680 --> 00:02:53.650
So now we've imported that functionality and marked it out.

47
00:02:53.650 --> 00:02:57.970
So whenever we run through the component, it's going to use the just mock functions instead of the

48
00:02:57.970 --> 00:02:58.990
original implementations.

49
00:02:59.350 --> 00:03:05.020
All that's left to do is to go through each test and make these mocks return whatever is needed to make

50
00:03:05.020 --> 00:03:05.830
the test pass.

51
00:03:06.100 --> 00:03:06.950
So let's walk through it.

52
00:03:07.000 --> 00:03:09.070
Test by test is right here.

53
00:03:09.070 --> 00:03:12.550
For the first one, it renders unique list of job types for filtering jobs.

54
00:03:12.820 --> 00:03:15.400
All this test needed to pass was a mock store.

55
00:03:15.700 --> 00:03:22.480
And now what we kind of replace that with is the use unique job types composable, right?

56
00:03:22.660 --> 00:03:27.250
Because previously we were accessing the getters property and the unique job types getter.

57
00:03:27.340 --> 00:03:35.140
But now that logic is captured in this composable right here, which returns back a reactive object

58
00:03:35.140 --> 00:03:37.840
storing this set that it's going to get from the getter.

59
00:03:38.170 --> 00:03:39.670
So I'm going to commit this out.

60
00:03:40.960 --> 00:03:41.290
Oops.

61
00:03:41.650 --> 00:03:43.570
Let's highlight this and comment it out.

62
00:03:44.530 --> 00:03:49.600
And then above what I'm going to do is take my use unique job types, composable function.

63
00:03:49.630 --> 00:03:52.420
Now mock function, I'm going to mock its return value.

64
00:03:52.930 --> 00:03:58.600
And as I mentioned earlier, we could return a reactive object that is storing our inherent value that

65
00:03:58.600 --> 00:04:00.040
we care about, which is the set.

66
00:04:00.280 --> 00:04:04.990
But we don't need to, because even if we don't return a reactive object and return to plain set, it

67
00:04:04.990 --> 00:04:08.770
will actually work with the implementation we have in the component on the left.

68
00:04:09.010 --> 00:04:12.220
So to keep things a little bit simple, I'm just going to return this set right here.

69
00:04:12.550 --> 00:04:16.000
So let me copy and paste that right here and right here.

70
00:04:16.420 --> 00:04:18.670
And that allows us to remove our former store.

71
00:04:18.670 --> 00:04:19.570
We no longer need it.

72
00:04:20.660 --> 00:04:21.250
All right.

73
00:04:21.550 --> 00:04:22.210
So there we go.

74
00:04:22.600 --> 00:04:26.890
Previously, we were creating this basic router with a push method, but I actually think we might be

75
00:04:26.890 --> 00:04:32.260
able to get away without using a router at all, because the only moment where we're actually interacting

76
00:04:32.260 --> 00:04:35.680
with a router is whenever the user selects a job type.

77
00:04:35.680 --> 00:04:40.750
And this test doesn't care about that, that this care this test only cares about rendering the unique

78
00:04:40.750 --> 00:04:41.740
list of job types.

79
00:04:42.010 --> 00:04:48.160
So I'm curious if we simply use the default just mock function of use router and have it return the

80
00:04:48.160 --> 00:04:49.300
undefined when invoked.

81
00:04:49.390 --> 00:04:53.590
I'm curious if that would be enough for this test to work and pass by itself.

82
00:04:53.860 --> 00:04:55.900
So let's try removing router by itself.

83
00:04:57.210 --> 00:04:58.050
And here we're mounting.

84
00:04:58.200 --> 00:05:02.730
And remember, our create config function no longer takes these arguments so we can remove them.

85
00:05:03.600 --> 00:05:04.620
So let's remove store.

86
00:05:04.620 --> 00:05:05.750
Let's remove router.

87
00:05:06.180 --> 00:05:06.690
There we go.

88
00:05:06.690 --> 00:05:07.410
Save that.

89
00:05:07.560 --> 00:05:10.260
And you can see the test is becoming a little bit cleaner as well.

90
00:05:10.440 --> 00:05:11.370
So there we go.

91
00:05:11.400 --> 00:05:12.420
Let me just run this.

92
00:05:12.420 --> 00:05:16.830
Using it as a reminder fit allows us to focus on a single test in a test suite.

93
00:05:17.160 --> 00:05:20.310
And as I run that by itself, you can see it is passing.

94
00:05:20.310 --> 00:05:21.930
So that is enough to get this test to pass.

95
00:05:22.290 --> 00:05:22.680
Perfect.

96
00:05:22.680 --> 00:05:24.900
So let's move on to our next test.

97
00:05:25.320 --> 00:05:25.980
It's right here.

98
00:05:25.980 --> 00:05:30.060
When the user clicks the checkbox, it communicates that user has selected checkbox to job type.

99
00:05:30.270 --> 00:05:35.070
So this is a test that we are going to care about the router because that's when this function right

100
00:05:35.070 --> 00:05:38.310
here is finally going to run and interact with our sample router object.

101
00:05:38.640 --> 00:05:41.130
So once again, we're going to replace our store.

102
00:05:41.130 --> 00:05:42.780
We no longer need this.

103
00:05:42.780 --> 00:05:46.680
We're going to get the same functionality from our unique job types composable.

104
00:05:46.890 --> 00:05:51.180
So let me copy this marking from line 23 above and simply paste that below.

105
00:05:52.110 --> 00:05:53.100
I'm going to start off with that.

106
00:05:54.220 --> 00:05:57.260
I'm still going to keep Comet, but I'm going to remove store right here.

107
00:05:57.860 --> 00:06:00.380
And how are we going to replicate the functionality of Comet?

108
00:06:00.380 --> 00:06:07.280
While remember, Comet is going to be a method on our View X Store and we get our mock view store in

109
00:06:07.280 --> 00:06:09.080
this test by invoking use store.

110
00:06:09.410 --> 00:06:14.990
So what I'm going to do is say that whenever my component runs use store, I want it to return a value

111
00:06:15.560 --> 00:06:18.260
and my return value is going to be my mock store object.

112
00:06:18.410 --> 00:06:22.970
And as long as that mock store object has my commit method, that should work.

113
00:06:23.150 --> 00:06:23.480
All right.

114
00:06:23.600 --> 00:06:27.830
And again, the reason we're going to need an object with commit is because whenever the user clicks

115
00:06:27.830 --> 00:06:30.530
the checkbox, our test is going to run select job type.

116
00:06:30.770 --> 00:06:37.460
So when it gets to this line right here, 51, if we simply use undefined will just just return value

117
00:06:37.460 --> 00:06:43.220
by default, it's not going to work because undefined does not have a commit method while our mock object

118
00:06:43.220 --> 00:06:43.970
here will.

119
00:06:44.300 --> 00:06:47.990
So that will be enough to get it to work here for use router.

120
00:06:47.990 --> 00:06:49.880
I'm going to do the same thing, except I don't.

121
00:06:49.880 --> 00:06:51.500
I no longer need this constant.

122
00:06:51.710 --> 00:06:57.800
So I'm going to do is remove this section and simply say when you invoke use router, I want you to

123
00:06:57.800 --> 00:06:59.300
produce a return value.

124
00:06:59.300 --> 00:07:03.740
And that return value is going to be an object with a push method set to a just function.

125
00:07:03.860 --> 00:07:06.740
Once again, honoring the interface that we need right here.

126
00:07:06.860 --> 00:07:12.110
We need some kind of object on line 52 with a push method, and this will be enough to serve that purpose.

127
00:07:12.320 --> 00:07:17.150
So with that, we have completed our mocking in our mounting of the component.

128
00:07:17.150 --> 00:07:20.900
We can remove the arguments to the create config factory function like.

129
00:07:20.900 --> 00:07:23.090
So save that and there we go.

130
00:07:23.930 --> 00:07:27.080
All right, let's continue down and do the exact same thing down below.

131
00:07:27.440 --> 00:07:28.880
This is going to be very, very similar.

132
00:07:28.880 --> 00:07:31.430
So I have a good feeling we can copy most of the code from above.

133
00:07:31.730 --> 00:07:35.180
So let me copy use unique job types and it's mock.

134
00:07:35.180 --> 00:07:36.350
Let me paste that down below.

135
00:07:37.040 --> 00:07:40.520
As far as commits, we're going to do the exact same thing as we did above.

136
00:07:40.520 --> 00:07:43.790
So I'm just going to copy this logic for you store.

137
00:07:45.160 --> 00:07:46.300
Paste it down below.

138
00:07:46.300 --> 00:07:50.830
In fact, this time around, I don't think we need to actually provide commit as a separate constant.

139
00:07:50.830 --> 00:07:52.090
We can simply do it in line.

140
00:07:52.300 --> 00:07:57.220
Since this test doesn't care about it, this test cares about interacting with the router to navigate

141
00:07:57.220 --> 00:07:58.600
the user to the results page.

142
00:07:59.110 --> 00:07:59.650
So.

143
00:08:01.240 --> 00:08:02.500
Remove this former code.

144
00:08:02.800 --> 00:08:07.900
Now, we were formerly creating a push constant so we can track whether it's been invoked below right

145
00:08:07.900 --> 00:08:08.230
here.

146
00:08:08.230 --> 00:08:10.420
And we were providing that as a method to our router.

147
00:08:10.600 --> 00:08:16.120
We still want to do the exact same thing, except we're going to get our router from the use router

148
00:08:16.360 --> 00:08:16.870
function.

149
00:08:16.960 --> 00:08:18.880
We're going to mark its return value.

150
00:08:20.220 --> 00:08:23.090
All right, so here we're going to have our object with a push method.

151
00:08:23.130 --> 00:08:24.840
Now, that push method is a just function.

152
00:08:25.050 --> 00:08:26.940
We can remove this code right here.

153
00:08:27.360 --> 00:08:29.550
We can remove our arguments to create config.

154
00:08:31.180 --> 00:08:31.900
Save that.

155
00:08:32.680 --> 00:08:33.490
Let that run.

156
00:08:34.500 --> 00:08:35.280
And there we go.

157
00:08:35.310 --> 00:08:36.810
We're back to passing test week.

158
00:08:37.050 --> 00:08:39.300
So notice that none of our assertions have changed.

159
00:08:39.300 --> 00:08:44.010
All that has changed is how we interact and talk to our dependencies.

160
00:08:44.250 --> 00:08:47.550
Our dependencies are the thing, things that the component needs.

161
00:08:47.550 --> 00:08:52.920
In order to function, a component needs a view store, it needs a router, and it needs a function

162
00:08:52.920 --> 00:08:54.270
called use unique job types.

163
00:08:54.510 --> 00:08:59.760
We're still providing all those dependencies, but we're intercepting them and providing different values

164
00:08:59.760 --> 00:09:00.960
that can serve the purpose.

165
00:09:01.200 --> 00:09:04.380
So there's nothing that fundamentally broke in our test design.

166
00:09:04.470 --> 00:09:11.130
We were simply using a different view feature the options API, which got access to those values, like

167
00:09:11.130 --> 00:09:13.830
the store in the router through a different way through properties.

168
00:09:14.010 --> 00:09:16.620
Now they get access to it through functions.

169
00:09:16.740 --> 00:09:21.540
So we have to emulate that design, that feature of Vue 3.0 in our tests.

170
00:09:21.930 --> 00:09:22.290
All right.

171
00:09:22.470 --> 00:09:26.850
So with that we've completed our refactor and everything is passing and I will see in the next lesson.
