WEBVTT
1
00:00:00.720 --> 00:00:01.320
Okay.

2
00:00:01.320 --> 00:00:05.430
So in this lesson, we're going to refactor our Spotlight Test Suite.

3
00:00:05.670 --> 00:00:09.690
We're going to do something very similar to what we've done before with a factory function.

4
00:00:09.900 --> 00:00:13.110
We're going to define a function that each test is going to run.

5
00:00:13.440 --> 00:00:17.160
The difference here this time around is in my function.

6
00:00:17.160 --> 00:00:23.460
What I'm going to do is run this code right here in my helper function is where I'm going to specify

7
00:00:23.460 --> 00:00:28.410
how I would like to mark the resolved value of my Axios get method call.

8
00:00:28.620 --> 00:00:33.150
And the reason I'm going to do this once again is just to remove a little bit of the duplication in

9
00:00:33.150 --> 00:00:39.870
each test while still allowing each test to signify or denote which attributes matter to it.

10
00:00:40.200 --> 00:00:40.890
So let me show you.

11
00:00:40.890 --> 00:00:45.180
I think the idea is going to click pretty quickly because we've explored very similar ideas before.

12
00:00:45.540 --> 00:00:47.950
But right here in my spotlight to test that, yes.

13
00:00:47.970 --> 00:00:54.900
File within my top level spotlight describe, I'm going to create a new arrow function called mock spotlight

14
00:00:54.900 --> 00:00:55.530
response.

15
00:00:55.980 --> 00:01:02.100
So this is the function that a test will call whenever it wants to mock out a spotlight response.

16
00:01:02.460 --> 00:01:08.430
So I'm going to provide a single parameter called data and I'll default data to an empty JavaScript

17
00:01:08.430 --> 00:01:08.850
object.

18
00:01:09.270 --> 00:01:14.250
And from here, instead of returning an object, all I'm going to do in the body of this arrow function

19
00:01:14.250 --> 00:01:22.170
is run my code to specifically provide a resolved value for Axios dot get remember that Axios dot get

20
00:01:22.170 --> 00:01:26.340
is already marked out by just because we have line three and a B number here.

21
00:01:26.610 --> 00:01:30.750
So what we're doing here is actually customizing how we are marking out that method.

22
00:01:31.110 --> 00:01:33.360
So I'm going to copy this code, paste it here.

23
00:01:34.710 --> 00:01:40.590
And then what I'm going to do in order to actually utilize the data parameter right here is I'm going

24
00:01:40.590 --> 00:01:44.160
to restructure its properties below image title and description.

25
00:01:44.160 --> 00:01:44.910
So right here.

26
00:01:45.210 --> 00:01:46.620
Dot, dot, dot data.

27
00:01:47.510 --> 00:01:49.190
So what is the advantage of this approach?

28
00:01:49.220 --> 00:01:54.710
The advantage of this approach is if a test calls mark spotlight response, we're going to mock out

29
00:01:54.710 --> 00:02:00.500
the Gap method with a reasonable response object to resemble the real spotlight object in our DB that

30
00:02:00.500 --> 00:02:01.160
JSON file.

31
00:02:01.430 --> 00:02:07.550
However, if any test wants to provide any custom data properties, if any test wants to customize what

32
00:02:07.550 --> 00:02:12.290
image, title or description are, it can simply pass in a an argument of data.

33
00:02:12.470 --> 00:02:17.990
And those properties, because we do structure them here, will overwrite the defaults right here.

34
00:02:18.080 --> 00:02:21.470
So each test can customize the properties if it wants to.

35
00:02:21.590 --> 00:02:25.070
And each test can also specify which properties it cares about.

36
00:02:25.160 --> 00:02:25.460
Right.

37
00:02:25.730 --> 00:02:30.290
So for example, in my very first test here, I'm going to get rid of my access that get called.

38
00:02:30.860 --> 00:02:35.540
And what I'm going to do is construct the data object that I care about in this test.

39
00:02:35.910 --> 00:02:36.860
So data.

40
00:02:37.930 --> 00:02:43.180
And all I really care about in my spotlight response is that I have an image property set to whatever

41
00:02:43.180 --> 00:02:46.180
I want and I'm just going to give it the string value of some image.

42
00:02:46.690 --> 00:02:51.340
So once again, you might be thinking, but Boris, this is the exact same thing that we have in our

43
00:02:51.340 --> 00:02:52.390
mock spotlight response.

44
00:02:52.630 --> 00:02:58.030
And I think that's totally fine because the advantage of rewriting it in this test is that another reader,

45
00:02:58.030 --> 00:03:01.990
including us in the future, doesn't have to scroll back up to understand what's going on.

46
00:03:02.230 --> 00:03:06.430
Instead, what we can do is invoke a function that describes what we're doing pretty well.

47
00:03:06.580 --> 00:03:13.270
We are mocking the spotlight's response and I'm going to provide it an object with the data property

48
00:03:13.270 --> 00:03:15.790
I defined above using s syntax.

49
00:03:16.060 --> 00:03:21.400
So we're going to feed this object in with the image property to this arrow function above.

50
00:03:21.640 --> 00:03:26.830
We're going to mark out my spotlight's response, and instead of sticking with this image right here,

51
00:03:26.830 --> 00:03:32.470
I'm going to restructure my data object that I created right here and pass in this image property.

52
00:03:32.620 --> 00:03:37.620
Again, it is the same string, but from the purposes of this test, it doesn't have to know what happens.

53
00:03:37.630 --> 00:03:40.600
It just knows that we're somehow mocking out the spotlight's response.

54
00:03:40.780 --> 00:03:45.280
And a reader can make an educated guess that we are marking out the data in that response.

55
00:03:45.400 --> 00:03:46.870
And this is something we care about.

56
00:03:47.110 --> 00:03:51.640
And it kind of communicates to a fellow reader that, hey, we have this property with some image,

57
00:03:51.760 --> 00:03:54.880
and then we're going to expect to see some image show up somewhere in the component.

58
00:03:55.240 --> 00:04:00.550
So I think it reads a little bit more focused, a little bit more isolated, a little bit more focused

59
00:04:00.550 --> 00:04:05.920
on what the test cares about a single attribute and kind of leaves the rest of the response the other

60
00:04:05.920 --> 00:04:08.170
properties like title and description above.

61
00:04:08.440 --> 00:04:12.400
So if somebody wants to scroll up and understand all those additional properties, they can.

62
00:04:12.610 --> 00:04:15.160
But what we're communicating here is it doesn't really matter.

63
00:04:15.610 --> 00:04:19.480
The heart of what we need to get this test to run is just this thing right here.

64
00:04:20.230 --> 00:04:20.520
Right?

65
00:04:20.800 --> 00:04:22.450
So with that, I'm going to save this file.

66
00:04:22.900 --> 00:04:25.050
Let's see if it passes and it still does.

67
00:04:25.060 --> 00:04:26.950
And we can reuse the same logic below.

68
00:04:27.190 --> 00:04:31.150
So right here, I'm going to remove my former actions that get called.

69
00:04:31.360 --> 00:04:34.530
I'm going to create a data object for this test.

70
00:04:34.540 --> 00:04:37.890
What we care about is the title and I'm going to set it to some title.

71
00:04:37.900 --> 00:04:41.740
You're more than welcome to set it to whatever you want as long as you change the string right here

72
00:04:41.740 --> 00:04:42.070
as well.

73
00:04:42.310 --> 00:04:43.900
And by itself that is not enough.

74
00:04:43.900 --> 00:04:50.110
We also need to mark our spotlight's response by invoking the error function we just defined passing

75
00:04:50.110 --> 00:04:52.180
in a sample data object to overwrite.

76
00:04:52.540 --> 00:04:55.660
And again, if we didn't care about this, we could simply invoke it without an argument.

77
00:04:55.780 --> 00:05:00.430
And Mark Spotlight response would pass in that default fallback of an empty object and that would take

78
00:05:00.430 --> 00:05:04.000
care of that default and it would work for a test anyway.

79
00:05:04.300 --> 00:05:04.990
So I'm going to do that.

80
00:05:04.990 --> 00:05:05.560
Save that.

81
00:05:06.340 --> 00:05:08.500
And finally here, same deal.

82
00:05:08.710 --> 00:05:11.920
Going to remove this call, going to create a data object.

83
00:05:12.160 --> 00:05:14.050
This one cares about the description.

84
00:05:14.560 --> 00:05:16.840
For description, I'm going to put some description.

85
00:05:17.140 --> 00:05:18.760
You're more than welcome to customize it.

86
00:05:18.910 --> 00:05:24.100
And then we need to make sure this test mocks the Spotlight response and provides the data object that

87
00:05:24.100 --> 00:05:30.490
it cares about, which our function above will take care of incorporating in the making out of the spotlight.

88
00:05:30.670 --> 00:05:31.270
And there we go.

89
00:05:31.270 --> 00:05:32.050
So I've saved that.

90
00:05:32.290 --> 00:05:38.800
This allows me to capture what I was just doing with my Axios that get mark instead of five lines.

91
00:05:38.800 --> 00:05:43.840
We have it in a single line while still communicating about which data we care about and still focusing

92
00:05:43.840 --> 00:05:49.360
each test on an individual section focused on just one attribute of that response object that we are

93
00:05:49.360 --> 00:05:49.750
rendering.

94
00:05:50.140 --> 00:05:50.470
All right.

95
00:05:50.680 --> 00:05:54.850
So with that, we have completed our refactor and in the next lesson, we can review everything that

96
00:05:54.850 --> 00:05:56.110
we've learned in this section.
