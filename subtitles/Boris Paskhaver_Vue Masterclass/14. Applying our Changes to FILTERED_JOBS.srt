1
00:00:00,900 --> 00:00:01,770
Okay.

2
00:00:01,770 --> 00:00:08,040
So we now have two brand new getters in our Getters file and we've written the complimentary tests for

3
00:00:08,040 --> 00:00:09,030
those two new getters.

4
00:00:09,300 --> 00:00:11,760
However, we're not actually using them anywhere.

5
00:00:12,030 --> 00:00:15,510
So in this lesson, we're finally going to make all the pieces come together.

6
00:00:15,630 --> 00:00:21,390
We're going to utilize our two new getters in our filtered jobs getter, and that's going to allow us

7
00:00:21,390 --> 00:00:23,940
to significantly cut down the code here.

8
00:00:24,450 --> 00:00:26,340
So here's the first thing I want to introduce.

9
00:00:26,670 --> 00:00:34,980
We can actually receive a reference to every available getter as the second argument to a getter method.

10
00:00:35,580 --> 00:00:36,060
All right.

11
00:00:36,300 --> 00:00:42,240
So what I'm going to do here is for my filter jobs getter after my state, I'm going to provide a second

12
00:00:42,240 --> 00:00:44,610
argument and I'm going to call it getters.

13
00:00:45,000 --> 00:00:51,000
The second argument to any getter method is an object that has all of the getters on it.

14
00:00:51,390 --> 00:00:57,120
So you can think of this parameter as being equivalent to this complete object right here.

15
00:00:57,150 --> 00:01:02,280
This entire getters object is what we can pass in as the second argument to a getter.

16
00:01:02,670 --> 00:01:07,620
Now I want to make sure that we're not confused between this syntax and the syntax that we have and

17
00:01:07,620 --> 00:01:08,700
the two getters above.

18
00:01:08,970 --> 00:01:15,840
Whenever we need a getter that accepts a custom argument from us, we need to define a getter that returns

19
00:01:15,840 --> 00:01:16,590
a function.

20
00:01:16,590 --> 00:01:21,540
And in that function we define our arguments or our parameters for those arguments.

21
00:01:21,780 --> 00:01:24,120
In comparison, in the original getter method.

22
00:01:24,330 --> 00:01:31,050
If we provide a second argument after the state, that second argument view X will always provide the

23
00:01:31,050 --> 00:01:32,490
complete object of getters.

24
00:01:32,730 --> 00:01:38,430
So on this getter object, we're going to have every getter with c above filter jobs by job types,

25
00:01:38,430 --> 00:01:44,400
include job by organization, include job by job that, etc. This is a reference to the very object

26
00:01:44,400 --> 00:01:46,170
we are in with all of these getter methods.

27
00:01:46,470 --> 00:01:52,320
So knowing that, we can now simplify our code below because we have all of this filter logic captured

28
00:01:52,320 --> 00:01:52,980
right here.

29
00:01:53,280 --> 00:01:55,410
So let's delete lines 49 and 50.

30
00:01:57,350 --> 00:02:00,230
And right here, I'm just going to delete my former implementation.

31
00:02:01,240 --> 00:02:03,010
Bring it down to justice.

32
00:02:03,280 --> 00:02:05,670
So for my very first filter, what do I want to do?

33
00:02:05,680 --> 00:02:09,700
I want to use the getter I have above called include job by organization.

34
00:02:09,970 --> 00:02:12,220
I'm still iterating over status jobs.

35
00:02:12,430 --> 00:02:17,740
I'm still providing JavaScript with a function for my filter method that's going to be used to filter

36
00:02:17,740 --> 00:02:18,280
my jobs.

37
00:02:18,550 --> 00:02:23,050
So I know I have my complete object of getters represented by my getters parameter.

38
00:02:23,050 --> 00:02:27,070
My second argument to a getter method above and on this getter object.

39
00:02:27,070 --> 00:02:28,660
What are going to be my available getters?

40
00:02:28,900 --> 00:02:30,280
All of the ones I have above.

41
00:02:30,520 --> 00:02:37,270
So I'm simply going to use my include job by organization getter from above and here I'm going to invoke

42
00:02:37,270 --> 00:02:37,450
it.

43
00:02:37,750 --> 00:02:41,800
And keep in mind it's a little bit confusing because if we look up, we're going to think that we're

44
00:02:41,800 --> 00:02:46,570
invoking this thing right here which accepts State as its first argument, and that's the exact same

45
00:02:46,570 --> 00:02:48,670
way it is in a test suite.

46
00:02:48,940 --> 00:02:54,130
But behind the scenes, what Vue is going to do whenever we use this getter syntax is it's automatically

47
00:02:54,130 --> 00:02:58,150
going to invoke the getter for us and pass in the view X Store State.

48
00:02:58,390 --> 00:03:03,280
So what it's actually going to be returning to us here is the function that we define right here so

49
00:03:03,280 --> 00:03:06,250
we can directly pass in our job right here.

50
00:03:06,760 --> 00:03:11,410
And that is going to represent this function right here that we're going to get as the return value

51
00:03:11,560 --> 00:03:13,810
of the include job by organization getter.

52
00:03:14,050 --> 00:03:18,940
I know it's a little bit confusing because this syntax that Vue uses behind the scenes is a little bit

53
00:03:18,940 --> 00:03:24,370
different from how we manually test it in our test suite, where we treat it as a plain JavaScript method.

54
00:03:24,580 --> 00:03:29,740
But the short takeaway is View X will automatically invoke the getter method passing in the state,

55
00:03:29,980 --> 00:03:34,690
and the function that it returns back is that we're actually going to have access to here and what we're

56
00:03:34,690 --> 00:03:36,610
actually invoking and passing the job into.

57
00:03:36,910 --> 00:03:39,190
I'm going to repeat the exact same logic below.

58
00:03:39,190 --> 00:03:43,780
So I'm going to remove my former code here, remove my closing curly brace here.

59
00:03:44,740 --> 00:03:46,510
And right here, I'm going to do getters.

60
00:03:46,720 --> 00:03:48,310
What getter do I want to access?

61
00:03:48,340 --> 00:03:51,550
The one I just defined above called include job by job type.

62
00:03:51,880 --> 00:03:54,970
Invoke that which is the function of that getter returns.

63
00:03:55,180 --> 00:03:59,650
And I want to provide that function with the job that I'm currently iterating over.

64
00:04:00,430 --> 00:04:00,730
Right.

65
00:04:00,940 --> 00:04:01,930
I'm going to save that.

66
00:04:01,930 --> 00:04:03,490
And that is our new code.

67
00:04:04,000 --> 00:04:04,450
All right.

68
00:04:04,750 --> 00:04:06,550
So what have we done in filter jobs?

69
00:04:06,730 --> 00:04:07,600
In filter jobs?

70
00:04:07,600 --> 00:04:12,820
We have accepted a second argument with all of our getters, and we've used two of those getters to

71
00:04:12,820 --> 00:04:16,300
help us filter down the individual jobs that we are iterating over.

72
00:04:16,570 --> 00:04:21,220
When we use the filter method, we're going to get JavaScript to iterate over an individual job, which

73
00:04:21,220 --> 00:04:24,370
is exactly what each of these getters accepts or expects.

74
00:04:24,580 --> 00:04:29,710
They are a method, but a method that returns a function that accepts a single job.

75
00:04:30,010 --> 00:04:35,650
And the beautiful part about this design is notice how we've separated the logic of checking for organizations

76
00:04:35,920 --> 00:04:39,070
away from the logic, from checking from job types.

77
00:04:39,310 --> 00:04:44,620
So in this getter right here, this getter knows about one piece of the view store state selected organizations,

78
00:04:44,800 --> 00:04:48,040
and it knows about one property organization on every job object.

79
00:04:48,250 --> 00:04:54,790
And we've completely decoupled that and separated that from the logic of these selected job types array

80
00:04:54,880 --> 00:04:57,280
and the job type property on an individual job.

81
00:04:57,670 --> 00:04:59,890
So we've kind of gotten the best of both worlds.

82
00:04:59,980 --> 00:05:03,880
If we think back to our original implementation, where we had just two separate getters.

83
00:05:04,030 --> 00:05:07,630
Filter jobs by organizations, filter jobs by job types.

84
00:05:07,780 --> 00:05:12,820
We've kind of captured that filtering logic for a single job across these two getters.

85
00:05:13,060 --> 00:05:19,750
And so this filter jobs getter can simply act as this composite getter that simply combines those different

86
00:05:19,750 --> 00:05:22,510
bits of functionality together, right?

87
00:05:22,750 --> 00:05:25,870
So everything should still work in the browser blitz validate.

88
00:05:25,870 --> 00:05:27,310
I'm going to go back to my browser.

89
00:05:29,020 --> 00:05:32,260
And I'm going to expand organizations and expand job types.

90
00:05:32,410 --> 00:05:34,690
I'm going to filter for organization like YouTube.

91
00:05:34,810 --> 00:05:37,480
You can see YouTube works if I add another one like edit view root.

92
00:05:37,870 --> 00:05:39,250
I'm assuming it's going to expand.

93
00:05:39,550 --> 00:05:40,060
There we go.

94
00:05:40,090 --> 00:05:43,460
If you root a YouTube, I'm going to filter for only full time jobs.

95
00:05:43,480 --> 00:05:44,530
We see it works in the right.

96
00:05:44,740 --> 00:05:46,030
Intern jobs as well.

97
00:05:46,150 --> 00:05:47,230
Part time jobs.

98
00:05:47,380 --> 00:05:48,190
You can do it.

99
00:05:48,220 --> 00:05:49,030
Remove YouTube.

100
00:05:49,210 --> 00:05:54,730
Everything seems to be working as a navigate across these different checkboxes and check them so everything

101
00:05:54,730 --> 00:05:55,390
is still working.

102
00:05:55,400 --> 00:05:59,580
We have the exact same solution that we had when we started this refactor.

103
00:05:59,590 --> 00:06:03,170
However, to me it's a significantly smaller cleaner.

104
00:06:03,220 --> 00:06:07,870
We've separated the responsibilities and the filter logic to smaller getters, and we learn more about

105
00:06:07,870 --> 00:06:13,930
how we can use more advanced getter features in view such as defining getters that accept arguments

106
00:06:14,200 --> 00:06:18,460
and such as relying on other getters within a starter getter.

107
00:06:18,580 --> 00:06:23,920
So in this starter getter method, we are using the second argument to get our getters object and using

108
00:06:23,920 --> 00:06:29,920
those supplementary getters to handle smaller bits of responsibility, to handle smaller bits of filtering

109
00:06:29,920 --> 00:06:30,430
logic.

110
00:06:30,670 --> 00:06:30,970
All right.

111
00:06:30,970 --> 00:06:36,370
Lots of small, simple methods is the way to go and makes your code significantly easier to read.

112
00:06:36,880 --> 00:06:37,150
All right.

113
00:06:37,150 --> 00:06:38,650
That's all there is to cover in this lesson.

114
00:06:38,650 --> 00:06:40,210
So I will see you in the next one.
