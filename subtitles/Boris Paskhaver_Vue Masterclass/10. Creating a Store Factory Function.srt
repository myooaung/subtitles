1
00:00:00,330 --> 00:00:01,350
All right.

2
00:00:01,350 --> 00:00:07,530
So now we know more about the partial type in TypeScript, and I want to utilize that knowledge in our

3
00:00:07,530 --> 00:00:08,880
mutations test file.

4
00:00:09,210 --> 00:00:10,440
So here's what we're going to do.

5
00:00:10,740 --> 00:00:17,280
We're going to define a factory function, and its responsibility will be to deliver a sample store

6
00:00:17,280 --> 00:00:17,760
state.

7
00:00:18,090 --> 00:00:21,630
So it's going to be very similar to what the state function here does already.

8
00:00:21,810 --> 00:00:27,900
However, we're going to modify our factory function so that it can still accept whatever parameters

9
00:00:27,900 --> 00:00:34,140
or properties it wants from any given test, which will allow every test to specify the properties it

10
00:00:34,140 --> 00:00:34,830
cares about.

11
00:00:35,010 --> 00:00:39,120
And we're going to be able to do it using the partial syntax that I showed in the previous lesson,

12
00:00:39,510 --> 00:00:40,650
and I'll all come together.

13
00:00:40,920 --> 00:00:46,560
So in my described block for mutations, I'm going to define a new arrow function and I'm going to call

14
00:00:46,560 --> 00:00:47,850
it Create State.

15
00:00:49,820 --> 00:00:54,920
All right, so here I'm going to provide my parameter parentheses, and I know that this function will

16
00:00:54,920 --> 00:00:58,880
produce an object that honors the global state interface.

17
00:00:59,630 --> 00:01:02,930
So here I'm going to provide my arrow function to actually implement the logic.

18
00:01:03,170 --> 00:01:08,030
And all I'm going to do here is I'm going to invoke the state function that I imported in line two.

19
00:01:08,330 --> 00:01:14,060
So let's call this something like initial state, and that's going to be the invocation of the state

20
00:01:14,060 --> 00:01:15,800
function that is in the other file.

21
00:01:15,800 --> 00:01:18,980
So that gives me the four default properties set to their starting values.

22
00:01:19,310 --> 00:01:23,900
And what I'm going to do here is I'm immediately going to just structure the properties of my initial

23
00:01:23,900 --> 00:01:26,690
state object, and I'm going to show you why in just a second.

24
00:01:27,140 --> 00:01:31,550
Normally, if I was just returning initial state by itself, obviously we would not need to make a copy

25
00:01:31,550 --> 00:01:32,080
on line eight.

26
00:01:32,330 --> 00:01:34,970
But this approach is necessary for what we're about to add.

27
00:01:35,390 --> 00:01:41,120
So if we simply use create state as we are doing right now, we would get the exact same thing as if

28
00:01:41,120 --> 00:01:42,440
we invoked state right here.

29
00:01:42,440 --> 00:01:45,020
Basically just gives us an object with those four properties.

30
00:01:45,350 --> 00:01:46,340
Here's what I'm going to do.

31
00:01:46,580 --> 00:01:54,860
I'm going to allow my my parameters here to accept an optional parameter called config.

32
00:01:56,360 --> 00:01:56,710
Right.

33
00:01:56,920 --> 00:02:02,380
And that type that I will assign to config is going to be a partial global state.

34
00:02:02,710 --> 00:02:06,100
So right here, I'm going to use the exact same syntax as in the previous lesson.

35
00:02:06,280 --> 00:02:08,800
I'm going to use the word partial and close it off.

36
00:02:08,920 --> 00:02:12,820
And then within those brackets I'm going to write global state.

37
00:02:13,540 --> 00:02:19,000
And then to actually provide the default assignment, I'm going to provide an equal sign and an empty

38
00:02:19,000 --> 00:02:19,480
object.

39
00:02:19,630 --> 00:02:25,420
And remember, an empty object satisfies the type right here because partial makes all the properties

40
00:02:25,420 --> 00:02:29,560
on the global state object optional, which means an object doesn't have to provide them.

41
00:02:30,100 --> 00:02:36,010
Then what I'm going to do is whatever config object I get, I'm going to destructor its properties right

42
00:02:36,010 --> 00:02:37,810
here in line as well.

43
00:02:38,800 --> 00:02:39,160
All right.

44
00:02:39,430 --> 00:02:41,190
So what is the benefit of this approach?

45
00:02:41,200 --> 00:02:48,100
The benefit of this approach is that we now have a default ready to go object right here represented

46
00:02:48,100 --> 00:02:51,280
by initial state that honors the global state interface.

47
00:02:51,490 --> 00:02:56,200
So the object that the create state function returns is something we're easily going to be able to pass

48
00:02:56,200 --> 00:03:01,330
into any mutation we want because it's going to honor the promise that it's going to have an object

49
00:03:01,330 --> 00:03:03,640
of global state that is being returned.

50
00:03:04,060 --> 00:03:10,720
However, if any test wants to customize the values of those properties, it still has to provide those

51
00:03:10,720 --> 00:03:12,040
properties with the right types.

52
00:03:12,220 --> 00:03:16,900
However, if wants to swap it, those values are it can pass it into this config object.

53
00:03:17,170 --> 00:03:22,210
And this partial type here will validate that it is going to have the right properties.

54
00:03:22,330 --> 00:03:28,600
However, also validate that they are optional, which means a test is not obligated to pass them in.

55
00:03:28,900 --> 00:03:33,700
In other words, if a test invokes create state with no argument, that's totally fine because we're

56
00:03:33,700 --> 00:03:39,490
going to fall back to this empty object which honors this type and thus we're simply going to get the

57
00:03:39,760 --> 00:03:40,780
default starting state.

58
00:03:41,050 --> 00:03:46,570
However, if a test gives me a sample object that has, for example, only and is logged in property

59
00:03:46,780 --> 00:03:51,700
or only a selected organization's property, or maybe two of those four properties, or maybe three

60
00:03:51,700 --> 00:03:57,340
of those for as long as we provide the right types for those property names, this syntax will allow

61
00:03:57,340 --> 00:04:00,010
us to feed an object that fits any of those criterias.

62
00:04:00,160 --> 00:04:03,070
Zero out of four properties one property, two properties.

63
00:04:03,070 --> 00:04:06,850
Three properties all the way to four properties, as many or as little as we want.

64
00:04:07,090 --> 00:04:12,640
And we also have a reasonable fallback to go back to to satisfy the other properties that we may not

65
00:04:12,640 --> 00:04:13,210
care about.

66
00:04:13,510 --> 00:04:18,160
So, for example, what that is going to allow us to do right here is to get the best of both of these

67
00:04:18,160 --> 00:04:19,000
worlds right here.

68
00:04:19,330 --> 00:04:25,420
So what I'm going to do here is say const starting state and I'm going to invoke the function I have

69
00:04:25,420 --> 00:04:25,830
above.

70
00:04:25,840 --> 00:04:28,360
I'm going to provide here, create state.

71
00:04:28,370 --> 00:04:29,890
I'm going to invoke that function.

72
00:04:30,160 --> 00:04:35,470
And what I'm also going to provide right here is going to be a object, my config object right here

73
00:04:35,620 --> 00:04:39,190
to communicate which properties I want to manually specify in this test.

74
00:04:39,430 --> 00:04:43,000
Just have to communicate to a future reader what's important.

75
00:04:43,330 --> 00:04:47,230
So right here I'm going to provide is logged in and I'm going to set it to false.

76
00:04:48,590 --> 00:04:52,850
And that is going to pass TypeScript because type TYPEKIT is going to say, you're giving me an object

77
00:04:52,850 --> 00:04:54,350
with a single is lodged in property.

78
00:04:54,500 --> 00:04:58,970
But that's totally fine because he told me config right here is going to be a partial global state.

79
00:04:59,210 --> 00:05:01,910
So it's a global state with all optional properties.

80
00:05:02,000 --> 00:05:07,190
So you are not obligated to give me the three additional properties that Global State has right here.

81
00:05:07,190 --> 00:05:08,480
You can just give me one of those four.

82
00:05:08,720 --> 00:05:12,260
I'm going to take whatever you give me and I'm going to do structure right here.

83
00:05:12,410 --> 00:05:15,950
So I'm going to get all of the necessary properties for my state function right here.

84
00:05:16,130 --> 00:05:18,350
And whatever you give me, I'm going to overwrite.

85
00:05:18,710 --> 00:05:20,870
And now the benefit is my test can communicate.

86
00:05:21,050 --> 00:05:24,860
Hey, state matters and we need a real state right here to pass interpretation.

87
00:05:25,040 --> 00:05:30,020
But the real component of the state that I care about is the is logged in property that is going to

88
00:05:30,020 --> 00:05:30,920
start out as false.

89
00:05:31,070 --> 00:05:35,420
And here I'm going to validate that when the test is done, it should be equal to true.

90
00:05:35,840 --> 00:05:36,260
All right.

91
00:05:36,530 --> 00:05:40,640
So with that, we can remove these two lines whenever we're comparing primitives.

92
00:05:40,640 --> 00:05:44,480
It's also generally a good idea to use that to be match instead of the to equal matcher.

93
00:05:44,780 --> 00:05:48,410
So I'm going to change that from to equal to two B and there we go.

94
00:05:48,590 --> 00:05:51,770
So now I feel that we have a test that captures the best of all worlds.

95
00:05:51,950 --> 00:05:56,690
We are able to create a state that is fully like the real world state, that honors the global state

96
00:05:56,690 --> 00:06:00,710
interface, that has the four properties with the exact four types that they need.

97
00:06:00,920 --> 00:06:06,260
However, in our test, we can also communicate which property we specifically care about, tell the

98
00:06:06,260 --> 00:06:11,570
story of the beginning, the middle and the end, and do that using something that is completely valid.

99
00:06:11,570 --> 00:06:16,430
TypeScript syntax, which is the partial keyword or the partial type that we learned about in the previous

100
00:06:16,430 --> 00:06:16,760
lesson.

101
00:06:17,060 --> 00:06:17,360
All right.

102
00:06:17,360 --> 00:06:21,170
So things are looking pretty good and we'll continue chipping away at this test file in the next lesson.
