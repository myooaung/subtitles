1
00:00:00,460 --> 00:00:01,360
Alright.

2
00:00:01,360 --> 00:00:07,060
So in the previous lesson we worked on our text input component and we wrote this line of code right

3
00:00:07,060 --> 00:00:13,090
here that specified that whenever the user types a character into our text input, we're going to emit

4
00:00:13,090 --> 00:00:15,310
an event called Handle Input.

5
00:00:15,520 --> 00:00:21,160
And again to emit an event basically means to send a message to the parent that something has happened,

6
00:00:21,310 --> 00:00:23,080
that an occurrence has transpired.

7
00:00:23,560 --> 00:00:24,910
Now, here's the good news.

8
00:00:25,150 --> 00:00:30,820
The syntax to handle that event in our parent component is actually going to be somewhat familiar to

9
00:00:30,820 --> 00:00:36,430
us, because let's take a step back and think about what other events we've dealt with throughout the

10
00:00:36,430 --> 00:00:36,880
course.

11
00:00:37,240 --> 00:00:40,750
Well, we've dealt with things like click events on buttons, right?

12
00:00:41,050 --> 00:00:45,010
And we've dealt with regular input events right here on input fields.

13
00:00:45,310 --> 00:00:50,730
And the way that view is going to handle our custom events like this one that we arbitrarily called

14
00:00:50,740 --> 00:00:53,950
handle input is the exact same way.

15
00:00:54,370 --> 00:00:57,520
Do you remember the directive we use to handle events?

16
00:00:57,820 --> 00:01:04,180
It is the V on directive we write V on followed by a colon and then followed by the event.

17
00:01:04,600 --> 00:01:09,940
And then we put an equal sign and specify the method that we should invoke whenever that event occurs.

18
00:01:10,510 --> 00:01:13,450
It's going to be the exact same syntax here.

19
00:01:13,630 --> 00:01:18,610
Of course, the difference is we are not reacting to a native browser event like a user click.

20
00:01:18,880 --> 00:01:23,500
We are reacting to our own custom event that we have called handle input.

21
00:01:24,160 --> 00:01:28,870
So right here we have our text input, the very first one where the user's providing their role.

22
00:01:29,140 --> 00:01:33,490
And right here I can write Von Colon, handle input.

23
00:01:34,480 --> 00:01:35,020
Okay.

24
00:01:35,260 --> 00:01:38,860
So an important thing to note here is this is no longer a browser event.

25
00:01:38,860 --> 00:01:46,300
Again, this is our own custom event and the reason it is called handle input here is because that's

26
00:01:46,300 --> 00:01:48,550
exactly what we call that right here.

27
00:01:48,550 --> 00:01:52,960
It has to match because this is the name that we gave to this event.

28
00:01:53,350 --> 00:01:55,480
This parent component is going to listen.

29
00:01:55,480 --> 00:01:58,720
It's going to keep an ear out and listen to different messages.

30
00:01:58,930 --> 00:02:02,980
And the only message that we're telling it how to react to here is handle input.

31
00:02:03,400 --> 00:02:05,950
That's why we have to give this event a name.

32
00:02:06,180 --> 00:02:10,510
And the reason is because our child component can actually emit multiple events.

33
00:02:10,690 --> 00:02:16,540
It can event A, an event B, an event C, and our parent can react differently to each one.

34
00:02:16,720 --> 00:02:22,240
That's why we have to give the event a name, almost like a category, and then arbitrarily or optionally

35
00:02:22,240 --> 00:02:23,740
any additional data.

36
00:02:24,040 --> 00:02:29,260
So we are going to react to the handle input event and as we know, the shortcut for Von instead of

37
00:02:29,260 --> 00:02:36,610
using this is going to be a assign the exact same syntax we do for native browser events and then we

38
00:02:36,610 --> 00:02:41,980
provide an equal sign and the name of the method that we want to run whenever this event happens.

39
00:02:42,190 --> 00:02:44,560
So I'm going to call this method update roll.

40
00:02:44,770 --> 00:02:48,280
This method does not exist yet, but we're going to write it up in just a second.

41
00:02:48,640 --> 00:02:55,570
So again, the at sign or alternatively Von followed by the name of the event that we are omitting from

42
00:02:55,570 --> 00:02:56,920
the job, which is handle input.

43
00:02:57,310 --> 00:02:59,620
So we're going to run an update roll method.

44
00:02:59,620 --> 00:03:01,150
So let's go and define that method.

45
00:03:01,150 --> 00:03:03,580
So down below, I'll scroll down to my script section.

46
00:03:03,670 --> 00:03:06,340
We do not have any methods on our job search form.

47
00:03:06,340 --> 00:03:07,150
Let's add them.

48
00:03:07,450 --> 00:03:09,550
So right here I'll add my methods property.

49
00:03:10,270 --> 00:03:11,860
And here I have to define a method.

50
00:03:11,860 --> 00:03:16,120
It has to be called update roll because that is what I called it up above.

51
00:03:16,480 --> 00:03:22,930
And what this method is going to receive as arguments is whatever we passed as the arguments right here.

52
00:03:23,170 --> 00:03:28,720
So if we provided one argument right here, this got value, then we're going to receive one parameter

53
00:03:28,720 --> 00:03:31,360
right here and I'm going to call it payload for now.

54
00:03:31,750 --> 00:03:37,330
And of course, if we provided two arguments right here, then this update roll method would be invoked

55
00:03:37,330 --> 00:03:38,860
with two arguments, right?

56
00:03:39,160 --> 00:03:45,640
So this is the event and Vue is going to invoke this method update roll with however many arguments

57
00:03:45,640 --> 00:03:48,550
we pass here after the name of the event in the child.

58
00:03:48,940 --> 00:03:54,880
Okay, so let's go ahead and console.log our payload and then transition to our browser and see what

59
00:03:54,880 --> 00:03:55,510
is going on here.

60
00:03:55,930 --> 00:03:58,780
So I'm going to go to my browser and I'm going to bring up my console.

61
00:04:00,490 --> 00:04:02,520
So don't worry about this right now.

62
00:04:02,530 --> 00:04:03,580
We'll come back to this later.

63
00:04:04,090 --> 00:04:08,950
What I'm going to do is type in a character here in my role and what's going to happen.

64
00:04:09,130 --> 00:04:12,250
The text input is going to update to store this in the data.

65
00:04:12,400 --> 00:04:17,440
It's also going to emit an event up and we're going to console.log the payload for that event right

66
00:04:17,440 --> 00:04:17,770
here.

67
00:04:18,010 --> 00:04:20,910
So as I type the letter H, we can see H appear.

68
00:04:20,920 --> 00:04:23,080
That is the console log of my payload.

69
00:04:23,320 --> 00:04:30,250
And as I type additional characters, you can see each one of those events triggers our new handle input

70
00:04:30,250 --> 00:04:36,370
event to be sent from our child text input component to the parent job search for component, which

71
00:04:36,370 --> 00:04:43,540
triggers our update roll method, which in turn updates the OR console logs the newly entered text.

72
00:04:43,930 --> 00:04:48,970
So if we go back to our view DevTools and we go into our job search form and our first text input,

73
00:04:49,180 --> 00:04:53,080
you can see we're still storing that data locally on the text input component.

74
00:04:53,320 --> 00:04:59,020
But now we are sending up this event called handle input and it is reaching our job search form component.

75
00:04:59,410 --> 00:05:03,580
So of course the next thing we want to do and we'll do this in the very next lesson is we have to take

76
00:05:03,610 --> 00:05:09,460
that data that we receive and of course overwrite our local data within the parent job search.

77
00:05:09,580 --> 00:05:10,750
Job search form component.

78
00:05:11,020 --> 00:05:12,430
We're going to do that in the very next lesson.
