1
00:00:00,490 --> 00:00:01,450
All right.

2
00:00:01,450 --> 00:00:08,860
So at this juncture, I would like to run our alternate test command, which is AMPM run test colon

3
00:00:08,860 --> 00:00:09,340
unit.

4
00:00:09,670 --> 00:00:14,590
And the advantage of this command is number one, it's going to run all of our test suites throughout

5
00:00:14,590 --> 00:00:15,580
the entire code base.

6
00:00:15,790 --> 00:00:21,100
And number two, it's going to give us a code coverage report which will tell us perhaps what we've

7
00:00:21,100 --> 00:00:22,510
missed in our tests.

8
00:00:22,900 --> 00:00:27,490
So right here, we have an example in our headline component, which we were just writing tests for.

9
00:00:27,760 --> 00:00:31,780
We can see that we are missing line 37 in our component file.

10
00:00:32,080 --> 00:00:36,690
So what this is telling us is none of our tests are accessing the logic online.

11
00:00:36,700 --> 00:00:37,450
37.

12
00:00:37,750 --> 00:00:43,570
And if I open up my headline component and I head to that line, we can see it is that call to the clear

13
00:00:43,720 --> 00:00:46,360
interval built in JavaScript function.

14
00:00:46,630 --> 00:00:48,800
So why are we never hitting this line?

15
00:00:48,940 --> 00:00:53,410
Because this line is only executed when the component on mounts.

16
00:00:53,530 --> 00:00:59,080
In other words, when it is removed from the DOM from the view in our browser, we're not simulating

17
00:00:59,080 --> 00:01:02,800
that kind of action or behavior anywhere in our tests.

18
00:01:03,010 --> 00:01:06,400
So our tests are mounting the component and then the test ends.

19
00:01:06,580 --> 00:01:12,100
So there's no point where we are actually tearing down or bringing down the component as if it was in

20
00:01:12,100 --> 00:01:13,060
a browser environment.

21
00:01:13,450 --> 00:01:18,610
So of course, what we can do here is write a test to check for just that, and we can force a simulated

22
00:01:18,610 --> 00:01:22,760
takedown and then assert that the clear interval function has been invoked.

23
00:01:22,780 --> 00:01:23,920
And that should be good enough.

24
00:01:24,250 --> 00:01:31,120
So right here, I'll add a new test and I'll say it removes interval when component disappears.

25
00:01:32,830 --> 00:01:38,170
It's always hard to write a test description in this case because you try again not to go super deep

26
00:01:38,170 --> 00:01:39,310
into the implementation.

27
00:01:39,310 --> 00:01:44,110
So I'm trying to represent the idea of, hey, whenever this component is done serving its purpose,

28
00:01:44,110 --> 00:01:45,190
that's when this happens.

29
00:01:45,190 --> 00:01:49,990
But inherently, the description is still sounding a little technical, but I'm okay with it for now.

30
00:01:50,290 --> 00:01:53,710
So what we're going to do is we are, of course, going to mount this headline component.

31
00:01:55,410 --> 00:02:00,840
And there is a special method available on this wrapper object that the amount function returns and

32
00:02:00,840 --> 00:02:04,140
that method is called on mount.

33
00:02:04,170 --> 00:02:06,720
It's exactly what you would expect in the method name.

34
00:02:06,810 --> 00:02:08,160
It announced the component.

35
00:02:08,400 --> 00:02:13,020
And what we want to assert, of course, is after this operation is done, we want to make sure that

36
00:02:13,020 --> 00:02:16,470
the clear interval function has been invoked.

37
00:02:16,710 --> 00:02:20,790
So there's one thing we're missing, of course, and that is in order to test that it has been invoked,

38
00:02:20,790 --> 00:02:23,790
we need to make sure that it is, in fact, a mock function.

39
00:02:23,970 --> 00:02:29,040
So we do need to make sure to grab our previous code, to use our fake timers at the very beginning

40
00:02:29,160 --> 00:02:31,920
and then revert back to our real timers at the very end.

41
00:02:32,400 --> 00:02:39,360
But the core of the test is this line where we can expect that the clear interval function has been

42
00:02:39,360 --> 00:02:42,780
called and we can use the method here to have been called.

43
00:02:43,680 --> 00:02:49,200
This is the exact same method that we used earlier right here when we were testing the use of the set

44
00:02:49,200 --> 00:02:52,290
interval function when the component was mounted for the first time.

45
00:02:52,470 --> 00:02:56,010
Now we're testing the other side of that equation when the component as I'm mounted.

46
00:02:56,280 --> 00:03:02,790
So what I can do here is run, NPM, run, test, watch to run our tests in watch mode.

47
00:03:03,570 --> 00:03:06,640
And this should hopefully pass and indeed it does.

48
00:03:06,660 --> 00:03:11,250
And just to show you, if I do not on amount of the components, so if I do not simulate the tearing

49
00:03:11,250 --> 00:03:16,050
down of the component, so it still kind of hypothetically in our browser from a test perspective,

50
00:03:16,710 --> 00:03:22,020
we could see if we never on mount it, we never run our before on Mount Lifecycle Hook which never runs

51
00:03:22,020 --> 00:03:26,430
Claire Interval and thus the test output tells us I expected that function to have been called once,

52
00:03:26,640 --> 00:03:31,140
but I actually did not get that function call received at any point during execution.

53
00:03:31,440 --> 00:03:34,580
So that's exactly what we want and that should take care of our code coverage issue.

54
00:03:34,590 --> 00:03:40,710
So one more time I'll run this here and one more time I will run NPM run test unit to see our results.

55
00:03:40,950 --> 00:03:45,520
And that should bring us in a into a better state for our headline campaign.

56
00:03:45,550 --> 00:03:45,870
All right.

57
00:03:46,140 --> 00:03:47,140
So everything is looking good.

58
00:03:47,160 --> 00:03:51,480
As a quick reminder, of course, just because we have one hundreds here doesn't mean we actually are

59
00:03:51,480 --> 00:03:56,130
guaranteed to have 100% code coverage, because there are ways that we could run through bits of logic

60
00:03:56,130 --> 00:03:57,300
but not actually test them.

61
00:03:57,420 --> 00:04:02,910
And all that this is testing is just that there's somewhere in your test files that are triggering something

62
00:04:02,910 --> 00:04:04,260
that is running through the components.

63
00:04:04,260 --> 00:04:10,140
So it doesn't necessarily mean that a block of code has been tested, just that it's been run through

64
00:04:10,380 --> 00:04:11,940
the during some kind of execution.

65
00:04:11,940 --> 00:04:17,850
So don't take this as like a 100% accurate description, but this is still a good place to be for where

66
00:04:17,850 --> 00:04:18,120
we are.

67
00:04:18,330 --> 00:04:19,920
So I will see you in the next lesson.
