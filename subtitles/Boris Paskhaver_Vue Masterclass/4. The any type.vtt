WEBVTT
1
00:00:00.570 --> 00:00:01.160
Okay.

2
00:00:01.170 --> 00:00:06.150
So in this lesson, I want to introduce a special type available in TypeScript.

3
00:00:06.150 --> 00:00:11.820
And it is the any type the any type allows for any kind of value.

4
00:00:12.150 --> 00:00:13.770
So let me give you a quick example.

5
00:00:13.770 --> 00:00:16.170
Let me have a variable here called a chameleon.

6
00:00:16.560 --> 00:00:21.870
And what I'm going to do is use type annotation to give it the any type and then I'll assign it an initial

7
00:00:21.870 --> 00:00:22.830
value of five.

8
00:00:23.190 --> 00:00:28.080
So just like the word, any means anything at all, the same idea here, we can now use chameleon like

9
00:00:28.080 --> 00:00:28.710
any type.

10
00:00:28.950 --> 00:00:34.230
So for example, I can take Chameleon and I can reassign it to a string of hello and then I can take

11
00:00:34.230 --> 00:00:36.960
chameleon and I can reassign it to a boolean of true.

12
00:00:37.170 --> 00:00:42.150
And in the next line I can assign chameleon to an array of numbers, and then I can assign chameleon

13
00:00:42.150 --> 00:00:42.960
to an object.

14
00:00:42.960 --> 00:00:43.320
Right.

15
00:00:43.800 --> 00:00:48.450
And for example, if I tried to take chameleon, which is now an object and I try to call the push method,

16
00:00:48.450 --> 00:00:54.240
you'll notice it's not going to raise an error, even though push is not a legitimate method on an object,

17
00:00:54.240 --> 00:00:55.620
but only on an array.

18
00:00:55.980 --> 00:00:59.430
So the any type is generally considered an anti pattern.

19
00:00:59.430 --> 00:01:05.610
It's a bad idea in TypeScript, and the obvious reason why is because it defeats the entire purpose

20
00:01:05.610 --> 00:01:06.570
of TypeScript, right?

21
00:01:06.780 --> 00:01:10.740
When you use the any type, you're basically turning TypeScript into JavaScript.

22
00:01:10.950 --> 00:01:14.460
This is totally valid code right here, especially on the right.

23
00:01:14.460 --> 00:01:19.020
This is totally valid code in JavaScript and this is the kind of code that would lead to an error.

24
00:01:19.170 --> 00:01:23.640
And the whole point is TypeScript can help you catch these errors, but only if you tell it what type.

25
00:01:23.640 --> 00:01:28.830
If TypeScript knows that you do not have an array, then it knows that push is not a valid method.

26
00:01:28.830 --> 00:01:29.100
Right?

27
00:01:29.400 --> 00:01:33.330
So with that said, if this is a bad thing to do, why this typescript allow it?

28
00:01:33.600 --> 00:01:36.240
Well, because we need some kind of escape hatch.

29
00:01:36.240 --> 00:01:40.650
Sometimes you may be working on a feature and you just need to get a working solution up and running

30
00:01:40.800 --> 00:01:43.560
before you want to go back and add types later.

31
00:01:43.560 --> 00:01:43.800
Right.

32
00:01:43.950 --> 00:01:48.450
Sometimes TypeScript will not compile at all and you just want to get the app working in your browser,

33
00:01:48.450 --> 00:01:48.900
for example.

34
00:01:48.900 --> 00:01:49.140
Right.

35
00:01:49.350 --> 00:01:51.180
So we need some kind of escape hatch.

36
00:01:51.180 --> 00:01:55.530
We need a way that we can just tell TypeScript, Hey, just forget about this, just pretend they can

37
00:01:55.530 --> 00:01:59.520
be anything and just go with the flow and I'll deal with any errors as they come up.

38
00:01:59.820 --> 00:02:04.410
So we need obviously a little bit of flexibility in a language to allow us as developers to be productive.

39
00:02:04.530 --> 00:02:08.940
Sometimes we're working on a budget, sometimes we're working against the clock, etc. So it's a good

40
00:02:08.940 --> 00:02:14.310
thing that any exists in language, but it's generally a bad idea if you use it excessively, so only

41
00:02:14.310 --> 00:02:15.810
use it in special circumstances.

42
00:02:15.990 --> 00:02:20.550
Another example I can give you is when you simply don't know the type and you need to kind of do some

43
00:02:20.550 --> 00:02:23.070
research and figure it out and you just need to move forward, right?

44
00:02:23.460 --> 00:02:27.390
There's certain scenarios where you just need a little cheat code, if you will, to get by.

45
00:02:27.390 --> 00:02:28.710
And that's what any is.

46
00:02:28.890 --> 00:02:29.160
Right.

47
00:02:29.160 --> 00:02:34.200
This type defeats the purpose of TypeScript, so you should try to avoid using it as much as you can.

48
00:02:34.320 --> 00:02:36.690
However, it is always available there if you need it.

49
00:02:36.930 --> 00:02:38.340
That's all there is to cover in this lesson.

50
00:02:38.340 --> 00:02:39.870
So I will see you in the next one.
