WEBVTT
1
00:00:00.330 --> 00:00:01.320
All right.

2
00:00:01.320 --> 00:00:05.910
So in this lesson, we'll write our first tests for our headline component.

3
00:00:06.150 --> 00:00:12.780
And as a reminder, if I scroll down in my headline, we are using these two helper JavaScript functions,

4
00:00:12.840 --> 00:00:14.820
clear interval and set interval.

5
00:00:15.120 --> 00:00:21.600
So what we're going to do in is effectively mock out these functions and we can do so automatically.

6
00:00:21.870 --> 00:00:26.250
So let me show you this in action in our previous test, I'm going to remove all of this content.

7
00:00:26.700 --> 00:00:33.210
I just want to console.log the original JavaScript clear interval function as an example.

8
00:00:33.510 --> 00:00:38.130
This is a reference to the exact same function that we're using in the body of our headline component.

9
00:00:38.460 --> 00:00:43.470
So you'll see this function here and it's anonymous and this is actually the original JavaScript implementation

10
00:00:43.470 --> 00:00:44.340
of clear interval.

11
00:00:44.550 --> 00:00:50.970
And if we were to mount our component in our tests, the original clear interval function would be used,

12
00:00:51.090 --> 00:00:56.400
which as we mentioned, is not great because it's complex and because we don't really care about its

13
00:00:56.400 --> 00:00:58.260
implementation for the purposes of headline.

14
00:00:58.560 --> 00:01:05.400
Well, let me show you what happens when I add a special method call here and it's going to be on my

15
00:01:05.400 --> 00:01:07.110
top level just object.

16
00:01:07.290 --> 00:01:11.340
And I want to invoke a method called use fake timers.

17
00:01:11.610 --> 00:01:17.400
And you can see in the description here it says instructs Gest to use fake versions of the standard

18
00:01:17.400 --> 00:01:18.540
timer functions.

19
00:01:18.810 --> 00:01:24.420
So the timer functions in JavaScript include things like set interval, clear interval, set, timeout,

20
00:01:24.420 --> 00:01:29.910
etc. Anything that has to do with the passage of time or timing operations, what use fake timers is

21
00:01:29.910 --> 00:01:36.480
going to do is automatically find any of those calls and replace them with the Gest mock function that

22
00:01:36.480 --> 00:01:37.950
we explored in the previous lesson.

23
00:01:38.250 --> 00:01:43.530
So I'm going to invoke this and immediately notice when the test runs instead of getting the previous

24
00:01:43.530 --> 00:01:46.290
output, we're going to get this output right here.

25
00:01:46.410 --> 00:01:46.710
Right.

26
00:01:46.860 --> 00:01:49.650
And this is actually a just mock function object.

27
00:01:49.650 --> 00:01:50.280
You can take a look.

28
00:01:50.280 --> 00:01:52.350
You can see the word mock is present.

29
00:01:52.860 --> 00:01:56.850
And these are a bunch of different methods that are available on that object.

30
00:01:57.300 --> 00:02:02.640
As a reminder, that object can keep track of how many times the function has been invoked and what

31
00:02:02.640 --> 00:02:07.980
it's been called with, etc. And we can also do things like fake return values, fake implementations,

32
00:02:07.980 --> 00:02:11.280
etc. and we'll get into some of these methods a little bit later in the course.

33
00:02:11.520 --> 00:02:15.840
The point is that this is that gest function object that we saw in the previous lesson.

34
00:02:16.050 --> 00:02:23.700
I can prove this to you by console logging directly below the exact same code we had in the previous

35
00:02:23.700 --> 00:02:25.560
lesson, the creation of that just function.

36
00:02:25.800 --> 00:02:30.630
So now I have two console logs right next to each other and as I scroll up you'll notice that the outputs

37
00:02:30.630 --> 00:02:32.070
are basically identical.

38
00:02:32.100 --> 00:02:35.610
Now they are two separate objects, of course, but they are the same entity.

39
00:02:35.610 --> 00:02:36.540
They are the same thing.

40
00:02:36.540 --> 00:02:39.870
They are this function mock constructor object right here.

41
00:02:39.870 --> 00:02:40.170
Right?

42
00:02:40.410 --> 00:02:44.370
So basically what we're doing here is we're replacing clear interval anywhere.

43
00:02:44.370 --> 00:02:50.430
It's being used in our test with a mock function like the one we explored in the previous lesson.

44
00:02:50.640 --> 00:02:53.580
But with this method it just is doing that automatically.

45
00:02:53.580 --> 00:02:58.170
For us, it's performing that substitution, that replacement automatically behind the scenes.

46
00:02:58.530 --> 00:03:03.570
Now, a good idea is to make sure that we don't have any test pollution.

47
00:03:03.780 --> 00:03:09.120
And what I mean by that is that we don't want something that we do in one test to accidentally affect

48
00:03:09.120 --> 00:03:10.050
another test.

49
00:03:10.260 --> 00:03:15.720
So imagine there's another developer somewhere that actually is mounting a component and not marking

50
00:03:15.720 --> 00:03:16.620
out clear interval.

51
00:03:16.770 --> 00:03:23.700
Our code sets this kind of global gest setting that says to mock out or stub out those JavaScript timer

52
00:03:23.700 --> 00:03:29.160
functions and that could accidentally cascade or pollute another test and how it runs.

53
00:03:29.370 --> 00:03:34.170
So generally, whenever you perform something like this, a really good idea is to make sure at the

54
00:03:34.170 --> 00:03:38.640
very end of the test that you return everything back to its original implementation.

55
00:03:38.880 --> 00:03:44.850
So if we are mocking out these core JavaScript functions at the very end of the test after our assertions,

56
00:03:45.030 --> 00:03:48.240
that's when I'd like to return them back to their original implementations.

57
00:03:48.450 --> 00:03:50.550
And to do that I can do another method.

58
00:03:50.550 --> 00:03:57.150
I'm just called use real timers and you can see instructor just to use the real versions of the standard

59
00:03:57.150 --> 00:03:57.840
timer functions.

60
00:03:58.080 --> 00:04:01.470
So it's almost like a reset that gets things back to their original implementation.

61
00:04:01.650 --> 00:04:08.250
And thus if I console.log clear interval before and after, you're going to see the very first output

62
00:04:08.490 --> 00:04:13.710
is going to be this mock function and afterwards we're going to go back to the original implementation

63
00:04:13.710 --> 00:04:16.440
of clear interval as it is defined in JavaScript.

64
00:04:16.680 --> 00:04:17.010
All right.

65
00:04:17.400 --> 00:04:22.320
So with that knowledge, we can go ahead and write our first test and I'm going to remove this inner

66
00:04:22.320 --> 00:04:26.820
test in our describe block because that was only for the purposes of introducing these concepts.

67
00:04:27.180 --> 00:04:29.160
And I'll write my first test description.

68
00:04:29.340 --> 00:04:33.930
And the first thing I want to test about my headline component is that it starts off with some action

69
00:04:33.930 --> 00:04:34.590
verb, right?

70
00:04:34.590 --> 00:04:40.560
And given that we are starting things off with the action of build, I expect that when the component

71
00:04:40.560 --> 00:04:46.650
renders, the first text it should display is build for everyone, and then in a follow up text test

72
00:04:46.830 --> 00:04:53.070
will check that after the interval passes, we expect it to be the next text text in line.

73
00:04:53.070 --> 00:04:55.650
So whatever comes after build for example, should be create.

74
00:04:55.860 --> 00:04:57.150
But let's start with our first case.

75
00:04:57.390 --> 00:04:59.540
So right now I'll write a description of.

76
00:04:59.930 --> 00:05:04.100
It displays introductory action verb.

77
00:05:05.490 --> 00:05:05.820
All right.

78
00:05:06.090 --> 00:05:10.290
So we know that our component is going to use those built in JavaScript functions.

79
00:05:10.290 --> 00:05:12.090
So I'm immediately going to mock them out.

80
00:05:12.360 --> 00:05:15.870
So I'll call, just use fake timers, invoke that.

81
00:05:16.080 --> 00:05:22.080
And then at the very end of the test will remember to say, just use real timers like so.

82
00:05:22.320 --> 00:05:24.780
And then in between that we can actually write our tests.

83
00:05:24.780 --> 00:05:32.400
So I'll begin by creating my constant wrapper and mounting my headline component, and then we're going

84
00:05:32.400 --> 00:05:34.260
to follow the same protocol we've used before.

85
00:05:34.260 --> 00:05:40.020
We're going to look for some kind of attribute with the data test name and just test that it displays

86
00:05:40.020 --> 00:05:40.830
the correct text.

87
00:05:41.160 --> 00:05:44.400
So I'm going to declare a constant called the action phrase.

88
00:05:44.670 --> 00:05:47.190
And in my wrapper I will attempt to find.

89
00:05:48.550 --> 00:05:53.240
A data test attribute with a value of, let's say, action phrase.

90
00:05:53.260 --> 00:05:54.670
Again, this is totally up to us.

91
00:05:55.300 --> 00:06:02.320
And then what I can do is on that node, as we've seen before, we can call the text method and that

92
00:06:02.320 --> 00:06:08.500
will return the nested text that is within that element or node or whatever it is that the find method

93
00:06:08.500 --> 00:06:08.880
returns.

94
00:06:08.890 --> 00:06:10.450
So just the inner text.

95
00:06:10.690 --> 00:06:16.340
And of course, if we are searching for this thing, eventually, I want it to be this H1 right here.

96
00:06:16.360 --> 00:06:19.090
That's what I intend to add my data test attribute to.

97
00:06:19.360 --> 00:06:22.030
Well, then I expect my starter text to be.

98
00:06:23.940 --> 00:06:29.340
Build for everyone because our first action is build and then we're adding on for everyone at the end.

99
00:06:29.340 --> 00:06:31.170
And that's going to be the complete inner text.

100
00:06:31.440 --> 00:06:34.380
Part of that inner text is going to be dynamically generated.

101
00:06:34.560 --> 00:06:38.940
That's going to be the build keyword, and the rest is going to be constant or static, and that is

102
00:06:38.940 --> 00:06:39.540
for everyone.

103
00:06:39.750 --> 00:06:44.250
But remember, from the tests perspective, they don't really care about the implementation.

104
00:06:44.460 --> 00:06:49.620
They just want to look at the component and compare what text they see versus the actual text in the

105
00:06:49.620 --> 00:06:50.310
implementation.

106
00:06:50.640 --> 00:06:50.910
All right.

107
00:06:51.090 --> 00:06:52.650
So this should be a good place to start.

108
00:06:52.650 --> 00:06:54.960
So I'm going to go ahead and save this file.

109
00:06:55.530 --> 00:07:01.320
Will fail, of course, because we do not have any text that it can find, because this data test actually

110
00:07:01.320 --> 00:07:02.910
does not return a valid element.

111
00:07:03.060 --> 00:07:05.880
Because we have not added that data test actually yet.

112
00:07:06.210 --> 00:07:12.000
So right here on my H1, at the very end of all my classes, I'll add this data test attribute and I'll

113
00:07:12.000 --> 00:07:14.860
assign it the string of action phrase.

114
00:07:16.170 --> 00:07:21.240
And prettier will automatically break it down across several lines and our tests will rerun.

115
00:07:21.360 --> 00:07:23.930
And that gets us to a passing test suite.

116
00:07:24.270 --> 00:07:24.690
Awesome.

117
00:07:24.690 --> 00:07:26.330
So this is a good place to start.

118
00:07:26.340 --> 00:07:31.410
We have now tested the first action that appears and in the very next lesson will write the follow up

119
00:07:31.410 --> 00:07:35.850
text test, which will check for the right text when it changes.

120
00:07:35.880 --> 00:07:43.380
I know it's confusing and part in my my mis speaking of the words text and test which are very similar,

121
00:07:43.380 --> 00:07:44.880
but hopefully you get the intent here.

122
00:07:45.030 --> 00:07:47.940
We'll continue chipping away at these tests in the very next lesson.
