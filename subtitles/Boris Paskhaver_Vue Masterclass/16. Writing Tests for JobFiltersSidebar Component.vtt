WEBVTT
1
00:00:00.270 --> 00:00:01.100
Okay.

2
00:00:01.110 --> 00:00:07.710
So in the previous lesson, we discovered that we actually did not have a test suite for our job filter

3
00:00:07.710 --> 00:00:08.760
side bar component.

4
00:00:09.060 --> 00:00:11.310
So let's go ahead and add that file right now.

5
00:00:11.670 --> 00:00:18.660
So in my file Explorer, I'm going to go to my tests unit directory, then components, then job results,

6
00:00:18.660 --> 00:00:19.950
job filter, sidebar.

7
00:00:20.040 --> 00:00:22.950
And right here, I'll create my typescript test file.

8
00:00:23.220 --> 00:00:25.920
So this will be called job filter sidebar.

9
00:00:26.910 --> 00:00:27.660
That test.

10
00:00:27.660 --> 00:00:29.710
That's all right.

11
00:00:29.730 --> 00:00:33.000
And with that, I'm going to hide the sidebar and bring the file over to my right.

12
00:00:33.300 --> 00:00:35.460
And we can begin with our usual imports.

13
00:00:35.730 --> 00:00:41.730
So I'll start out by importing shallow amount, and that is going to come from view test utils.

14
00:00:42.030 --> 00:00:48.510
And then down below I will also import my job filter sidebar component and that is available on the

15
00:00:48.510 --> 00:00:54.540
file on the left and that's going to be in the source directory components, job results, job filter,

16
00:00:54.540 --> 00:00:55.200
sidebar.

17
00:00:55.200 --> 00:00:58.140
And then finally the job filter sidebar component itself.

18
00:00:58.410 --> 00:01:02.700
And if you see the error like this, make sure to add the dot view extension and that should make it

19
00:01:02.700 --> 00:01:03.150
go away.

20
00:01:03.660 --> 00:01:08.970
So the heart of this component, of course, is in the setup method and it is here that we are relying

21
00:01:08.970 --> 00:01:15.420
on these two composable functions, use unique job types and use unique organizations to provide the

22
00:01:15.420 --> 00:01:21.750
sets of strings that we're ultimately feeding down to these child components right here, the job filters,

23
00:01:21.750 --> 00:01:23.610
sidebar checkbox group components.

24
00:01:23.940 --> 00:01:29.730
So ultimately what I want to test when I shall amount this component is that this component of this

25
00:01:29.730 --> 00:01:33.630
child is receiving the right values for unique values and mutation.

26
00:01:33.870 --> 00:01:40.590
That's kind of the most dynamic content and the content that job filter sidebar is responsible for getting

27
00:01:40.890 --> 00:01:43.110
for us in order to pass down here.

28
00:01:43.500 --> 00:01:48.750
So all of that is to say, I don't think that we should use the actual composable as in our tests for

29
00:01:48.750 --> 00:01:49.780
the job for the sidebar.

30
00:01:49.800 --> 00:01:54.900
I think that we should mock out these two composable to have them return whatever values we want and

31
00:01:54.900 --> 00:01:59.820
then validate that those are the exact same values that we are passing in right here to these two components.

32
00:02:00.240 --> 00:02:05.700
So what I'm going to do is copy my import code right here because we're going to need to import these

33
00:02:05.700 --> 00:02:07.980
to composable in our test suite to mock them out.

34
00:02:08.370 --> 00:02:13.080
And right here, I'm going to paste that exact line right here and immediately below, I'm also going

35
00:02:13.080 --> 00:02:14.250
to mark out that file.

36
00:02:14.250 --> 00:02:17.000
So I replace them with the default just implementation.

37
00:02:17.010 --> 00:02:21.150
So here I'm going to mark out the source directory store composable.

38
00:02:22.560 --> 00:02:22.890
All right.

39
00:02:22.890 --> 00:02:24.180
Make sure to store that correctly.

40
00:02:24.420 --> 00:02:28.740
So now we have imported those two composable functions and replace them with just mock functions.

41
00:02:29.040 --> 00:02:34.050
But as always, we're going to need to add those additional lines to make sure TypeScript recognizes

42
00:02:34.050 --> 00:02:39.770
what just Mark did and make sure that it recognizes those two important functions as being of type.

43
00:02:39.780 --> 00:02:40.410
Just mock.

44
00:02:40.710 --> 00:02:44.580
So right here, I'm going to say convert use unique job types.

45
00:02:44.610 --> 00:02:49.500
Mark I'm going to distinguish this name from the one above and that is going to be our use unique job

46
00:02:49.500 --> 00:02:51.960
type's function from above.

47
00:02:52.470 --> 00:02:55.360
Once again, my typing skills are not at their best today.

48
00:02:55.590 --> 00:02:56.280
So there we go.

49
00:02:56.280 --> 00:03:01.380
And make sure to use that as keyword and tell TypeScript to interpret this as a just to mark type down

50
00:03:01.380 --> 00:03:01.750
below.

51
00:03:01.770 --> 00:03:03.270
I'll do the exact same thing for it.

52
00:03:03.270 --> 00:03:04.470
Use unique organizations.

53
00:03:04.710 --> 00:03:06.270
So use unique organizations.

54
00:03:06.270 --> 00:03:10.620
Mark And that's going to reference my use unique organizations just like function.

55
00:03:10.770 --> 00:03:14.280
But now we're explicitly telling TypeScript to treat it as a just mark type.

56
00:03:14.460 --> 00:03:16.210
So now it knows that it has methods.

57
00:03:16.590 --> 00:03:16.980
All right.

58
00:03:17.130 --> 00:03:21.270
So down below, I'm going to describe what I'm testing, which is the job filter, sidebar component.

59
00:03:22.440 --> 00:03:27.240
And I'd like to begin by writing just the two test descriptions about what this component is responsible

60
00:03:27.240 --> 00:03:27.630
for.

61
00:03:27.960 --> 00:03:33.240
So from a user perspective, by rendering this child component, our job filter sidebar allows the user

62
00:03:33.240 --> 00:03:39.330
to filter the jobs by job types, and then it also allows the user to filter the jobs by organizations.

63
00:03:39.600 --> 00:03:41.460
So I'm going to write those two descriptions right here.

64
00:03:42.000 --> 00:03:46.320
It allows user to filter jobs by job types.

65
00:03:46.890 --> 00:03:52.440
And down below, it allows user to filter jobs by organizations.

66
00:03:54.340 --> 00:03:54.730
All right.

67
00:03:55.060 --> 00:03:59.800
And so, again, what we're going to do in these two tests is mount our component, then find a way

68
00:03:59.800 --> 00:04:04.300
to find these smaller components and validate that we are passing them the right arguments for their

69
00:04:04.300 --> 00:04:09.220
props, which is basically testing all of the configuration, verifying that we are passing the right

70
00:04:09.220 --> 00:04:10.510
data down to the child.

71
00:04:10.780 --> 00:04:14.620
We are going to shallow mount, so we're never going to actually fully render these components.

72
00:04:14.620 --> 00:04:15.940
We're going to replace them with stubs.

73
00:04:16.180 --> 00:04:19.570
But that stub is still going to have the props and the values we provide for them.

74
00:04:19.750 --> 00:04:20.950
So that will be just fine.

75
00:04:21.340 --> 00:04:21.670
All right.

76
00:04:21.670 --> 00:04:25.690
So let's begin by using our two mocks above and providing mock return values.

77
00:04:25.840 --> 00:04:30.250
Because remember, by default, even though Gest has replaced these two composable, they're going to

78
00:04:30.250 --> 00:04:31.900
return undefined by default.

79
00:04:31.900 --> 00:04:33.670
And we want to make that more specific.

80
00:04:34.030 --> 00:04:39.370
So right here, I'm going to say use unique job types, Mark, and I'm going to call the mock return

81
00:04:39.370 --> 00:04:41.440
value because this is not asynchronous.

82
00:04:41.440 --> 00:04:42.640
So it's mock return value.

83
00:04:42.940 --> 00:04:48.550
And just to mirror the real world implementation, I'm going to provide a set here because that's what

84
00:04:48.550 --> 00:04:49.450
the real world provides.

85
00:04:49.690 --> 00:04:54.040
So we're going to do a new set here and invoke that constructor and pass in an array.

86
00:04:54.280 --> 00:04:57.340
And let's do two strings here full time and part time.

87
00:04:58.650 --> 00:04:59.070
All right.

88
00:04:59.340 --> 00:05:02.940
I'm going to do the exact same thing for my use unique organizations, Mark.

89
00:05:03.180 --> 00:05:08.160
I'm going to call them mock return value method on that mock function and pass in what I want it to

90
00:05:08.160 --> 00:05:09.150
return when invoked.

91
00:05:09.420 --> 00:05:11.730
And once again, I'm going to do a set of strings.

92
00:05:11.730 --> 00:05:16.620
So new set and we can provide the set constructor with an array of strings that will populate that set.

93
00:05:16.860 --> 00:05:20.040
And for an organization here, let's do something like Airbnb.

94
00:05:23.030 --> 00:05:23.590
All right.

95
00:05:23.600 --> 00:05:24.500
So there we have that.

96
00:05:24.500 --> 00:05:29.630
And this is basically going to stay the exact same logic for the function below or the test below.

97
00:05:29.630 --> 00:05:30.740
And we'll get there in just a second.

98
00:05:31.040 --> 00:05:33.710
The next thing I want to do is mount my component.

99
00:05:33.710 --> 00:05:39.320
So content wrapper is going to be shallow mount and we're going to mount our job, the sidebar component.

100
00:05:39.620 --> 00:05:39.980
All right.

101
00:05:40.430 --> 00:05:43.370
The next step, of course, is finding this individual component.

102
00:05:43.580 --> 00:05:49.250
And I'm still going to use the data test attribute, but I'm going to use a special method here instead

103
00:05:49.250 --> 00:05:50.660
of using the find method.

104
00:05:51.470 --> 00:05:54.410
Instead, I'm going to use the find component method.

105
00:05:54.890 --> 00:05:55.190
All right.

106
00:05:55.190 --> 00:05:59.960
And typically, I'm not a fan of this because Find Component knows a little bit about the implementation.

107
00:06:00.470 --> 00:06:06.650
But the advantage of using find component over find is it's not just going to return the HTML underlying

108
00:06:06.650 --> 00:06:12.290
the actual component, it's going to return the entire component here wrapped in its own kind of test

109
00:06:12.290 --> 00:06:13.100
utils wrapper.

110
00:06:13.880 --> 00:06:19.130
Basically what I'm getting to here is we need to do this so that we can ascertain the components props

111
00:06:19.340 --> 00:06:24.290
because the slice of HTML that find would return is not going to have the idea of props.

112
00:06:24.530 --> 00:06:27.440
Only a view component has the idea of props.

113
00:06:27.710 --> 00:06:33.410
So only if we use this syntax in our test will we be able to get the actual component right here, whatever

114
00:06:33.410 --> 00:06:35.090
it happens to be, and get its props.

115
00:06:35.390 --> 00:06:40.040
Now notice I'm not going to explicitly look for the job filter sidebar checkbox group component.

116
00:06:40.220 --> 00:06:44.300
I'm still going to leave it a little bit open ended so it can be whatever component it happens to be

117
00:06:44.420 --> 00:06:46.490
that's going to have that data test attribute.

118
00:06:46.700 --> 00:06:51.350
But simply by using this syntax, whatever component I happen to find, I'm going to be able to get

119
00:06:51.350 --> 00:06:51.860
its props.

120
00:06:51.950 --> 00:06:55.730
And that's what I wanted to verify and validate in my test.

121
00:06:56.150 --> 00:07:00.800
So right here I'm going to provide a argument and it's going to be a string that looks for my data test

122
00:07:00.800 --> 00:07:01.260
activity.

123
00:07:01.610 --> 00:07:07.340
So right here, square brackets and let's do a data test here of job types filter.

124
00:07:07.820 --> 00:07:10.160
Of course, this does not exist yet, but that's the whole point.

125
00:07:10.160 --> 00:07:11.810
We're going to add it later when this test fails.

126
00:07:12.110 --> 00:07:15.260
And I'm going to scientists to a concept called job types filter.

127
00:07:17.260 --> 00:07:17.590
All right.

128
00:07:17.590 --> 00:07:23.110
So how do we actually get the props from this job type of filter component once the view test utils

129
00:07:23.110 --> 00:07:25.240
is able to find it by its data test attribute?

130
00:07:25.600 --> 00:07:30.400
Well, on this wrapped component, we're going to be able to invoke a method in our test called props,

131
00:07:30.640 --> 00:07:35.620
and that is going to return the complete props object where the keys or the properties are going to

132
00:07:35.620 --> 00:07:36.730
be the props themselves.

133
00:07:36.850 --> 00:07:41.350
In this case, it's going to be header unique values in mutation, and then the values for those keys

134
00:07:41.350 --> 00:07:43.660
are going to be the exact values that we have right here.

135
00:07:43.960 --> 00:07:48.820
So what I'm going to do is to structure those props from this component, right?

136
00:07:48.820 --> 00:07:54.790
So right here, I'm going to say I'm going to have a header prop, a unique values prop, as well as

137
00:07:54.790 --> 00:07:55.690
a mutation prop.

138
00:07:56.540 --> 00:07:58.790
All right, so I'm using that ESCO structure and syntax.

139
00:07:58.910 --> 00:08:02.750
Once again, the props method returns an object with however many properties it needs.

140
00:08:02.750 --> 00:08:06.830
For all the props that we're passing down to this component right here, we're going to get them right

141
00:08:06.830 --> 00:08:07.130
here.

142
00:08:07.310 --> 00:08:09.560
And then I'm simply going to write all of my expectations.

143
00:08:09.800 --> 00:08:13.580
So I'm going to expect that my header should be which string?

144
00:08:13.580 --> 00:08:15.550
Well, it should be job types right here.

145
00:08:15.560 --> 00:08:17.180
So I'm going to say this should be job types.

146
00:08:18.560 --> 00:08:20.780
Then the next one is probably the most interesting one.

147
00:08:20.780 --> 00:08:21.560
Unique values.

148
00:08:21.860 --> 00:08:27.080
Remember that even though we're using kabob case right here with the dash between the E and the V,

149
00:08:27.350 --> 00:08:31.900
from a JavaScript perspective and a view perspective, it's also going to be able to interpret it as

150
00:08:31.910 --> 00:08:32.630
camel case.

151
00:08:33.140 --> 00:08:35.930
That's the exact same way as how Vue always works.

152
00:08:36.200 --> 00:08:40.340
So here, that's why we're going to be able to get unique values with camel case in the capital.

153
00:08:40.340 --> 00:08:43.730
V, even though we're writing it this way right here, that's totally fine.

154
00:08:44.060 --> 00:08:48.290
So right here, I'm going to say I expect unique values to be some kind of value.

155
00:08:48.560 --> 00:08:54.230
And remember, unique values here is coming from unique job types, which is the return value of my

156
00:08:54.260 --> 00:08:59.510
use, unique job types, composable function, which we've marked out right here to return this set

157
00:08:59.510 --> 00:09:00.230
of two values.

158
00:09:00.440 --> 00:09:05.960
So in other words, the prop that I pass down, it's value should equal the set.

159
00:09:06.200 --> 00:09:07.970
So I'm going to copy this set right here.

160
00:09:09.020 --> 00:09:10.130
And paste it in line.

161
00:09:10.340 --> 00:09:14.480
We're passing down a complete set as the argument for the unique values prop.

162
00:09:14.750 --> 00:09:15.080
All right.

163
00:09:15.320 --> 00:09:20.150
Now, as a quick reminder, the reason why we're using to be here is because that is the preferred gest

164
00:09:20.150 --> 00:09:23.720
matcher for primitives like strings, numbers or booleans.

165
00:09:24.020 --> 00:09:30.470
Whenever you have a more complex object, like an object or an array or a set you should use to equal

166
00:09:30.800 --> 00:09:33.050
in just otherwise the test will not pass.

167
00:09:33.050 --> 00:09:35.540
So to be for primitives to equal for objects.

168
00:09:35.900 --> 00:09:36.200
All right.

169
00:09:36.200 --> 00:09:37.700
So that takes care of two of our props.

170
00:09:37.700 --> 00:09:40.460
And our final prop is going to be the mutation right here.

171
00:09:40.760 --> 00:09:46.310
So I'm going to expect my mutation, and that should be, of course, the value of this constant.

172
00:09:46.310 --> 00:09:50.900
But we know the value of this constant is the exact same name or the exact same value as the name.

173
00:09:51.110 --> 00:09:53.990
So this should be the string add selected job types.

174
00:09:56.360 --> 00:09:56.570
All right.

175
00:09:56.570 --> 00:09:57.410
So let me save this.

176
00:09:57.410 --> 00:10:01.310
Let me start running our test week and we'll see how far that takes us.

177
00:10:01.760 --> 00:10:05.930
Of course, our tester now failed because we do not have this data source attribute, so it's not going

178
00:10:05.930 --> 00:10:10.820
to be able to find any component in our template with the stick with this characteristic and thus not

179
00:10:10.820 --> 00:10:12.400
be able to extract props for him.

180
00:10:12.800 --> 00:10:15.400
So right here you can see how this is missing second arguments.

181
00:10:15.420 --> 00:10:18.480
It looks like we need a valid function right here.

182
00:10:18.500 --> 00:10:20.660
Let's just provide a error function in line here.

183
00:10:20.660 --> 00:10:24.620
See if that fixes the problem temporarily, at least enough to get our first test run.

184
00:10:25.130 --> 00:10:26.300
All right, so there we go.

185
00:10:26.300 --> 00:10:29.170
Cannot call the props method on an empty Vue wrapper.

186
00:10:29.180 --> 00:10:34.520
That is the helper object that the view test utils wraps around the component that it finds and it is

187
00:10:34.520 --> 00:10:37.280
that view wrapper object that's going to support the props method.

188
00:10:37.550 --> 00:10:41.790
And obviously it's not able to call the props method on that object because it's not able to find a

189
00:10:41.790 --> 00:10:43.700
value component with this data test attribute.

190
00:10:44.000 --> 00:10:45.460
So let's add it right here.

191
00:10:45.530 --> 00:10:50.780
In my actual implementation, I'm going to add data test and give it the value job types filter.

192
00:10:51.570 --> 00:10:54.450
So whatever my test expects to find is what I'm going to add right here.

193
00:10:54.720 --> 00:10:58.070
Notice, I'm not explicitly looking for this exact component.

194
00:10:58.080 --> 00:11:02.580
I'm looking for this data test attribute, which gives me the flexibility to change this component to

195
00:11:02.580 --> 00:11:04.080
something else in the future.

196
00:11:04.290 --> 00:11:08.340
And the test should still continue to work because I'm making less dependencies.

197
00:11:08.340 --> 00:11:13.440
I'm less dependent on a specific component as I am an attribute, as well as the props that it supports.

198
00:11:13.710 --> 00:11:18.200
So I'm making this a little bit more flexible because I can easily swap checkbox group with another

199
00:11:18.210 --> 00:11:20.730
view component as long as it takes these prompts.

200
00:11:20.730 --> 00:11:21.090
All right.

201
00:11:21.150 --> 00:11:23.070
Because the data source attribute will remain the same.

202
00:11:23.580 --> 00:11:23.880
All right.

203
00:11:23.890 --> 00:11:26.010
So it looks like our tests are passing, which is great.

204
00:11:26.220 --> 00:11:30.660
Now, all I need to do is replicate this logic for my other checkbox group, and luckily our tests are

205
00:11:30.660 --> 00:11:31.590
going to be very similar.

206
00:11:31.830 --> 00:11:34.380
So I'm simply going to copy and paste this logic down below.

207
00:11:36.190 --> 00:11:39.740
All right, so our making out and our return values can remain the same.

208
00:11:39.760 --> 00:11:42.340
Our shallow amount here can remain the same as well.

209
00:11:42.580 --> 00:11:46.000
Here, of course, I have to look for a different data test attribute.

210
00:11:46.090 --> 00:11:48.970
So how about we make this one something like organizations filter?

211
00:11:51.030 --> 00:11:51.600
There we go.

212
00:11:51.780 --> 00:11:56.760
We're still going to do structure the exact same three props header, unique values and mutation, but

213
00:11:56.760 --> 00:11:58.620
of course their values will be totally different.

214
00:11:58.860 --> 00:12:04.020
So here instead of job types are header prop will have a value or organizations or at least it should.

215
00:12:04.260 --> 00:12:08.850
If the test is verifying that we've done everything correctly for this checkbox group, we are of course

216
00:12:08.850 --> 00:12:14.280
not rendering the types of jobs we're rendering the organizations here and of course, unique organizations

217
00:12:14.280 --> 00:12:18.630
here is coming as the return value of the use unique organizations composable function.

218
00:12:18.930 --> 00:12:22.110
We have mock that out right here to return a set of Airbnb.

219
00:12:22.410 --> 00:12:26.070
So we need to make sure that we are passing that prop, that exact set.

220
00:12:26.640 --> 00:12:32.340
So right here, I'm going to say that, hey, just verify that the unique values prop that is flowing

221
00:12:32.340 --> 00:12:36.390
into whatever component this is has a value of a set with a string of Airbnb.

222
00:12:36.720 --> 00:12:40.470
And finally, our mutation here is going to be add selected organizations.

223
00:12:40.680 --> 00:12:43.920
We know that that constant is equal to the actual string that it holds.

224
00:12:44.100 --> 00:12:45.870
We just add selected organizations.

225
00:12:46.350 --> 00:12:48.120
Save that, let it run.

226
00:12:50.040 --> 00:12:51.030
Let that run a little bit.

227
00:12:51.660 --> 00:12:55.140
And of course, it's going to fail because we do not have our data just attribute.

228
00:12:55.380 --> 00:12:56.850
So right here, we're going to add it.

229
00:12:56.850 --> 00:13:00.810
Data test is going to be organization's dash filter.

230
00:13:00.810 --> 00:13:04.950
Again, it has to match exactly what your test suite is looking for and now it's going to be able to

231
00:13:04.950 --> 00:13:10.680
find this component to structure its props and verify that they are all matching here.

232
00:13:11.070 --> 00:13:12.990
So it looks here like everything is working.

233
00:13:12.990 --> 00:13:18.240
It allows user to filter jobs by job types and allows the user to filter jobs by organizations.

234
00:13:18.300 --> 00:13:21.030
So all of these two tests are passing.

235
00:13:21.330 --> 00:13:23.580
There are there are multiple assertions in each one.

236
00:13:23.580 --> 00:13:27.780
But that's totally fine in this case because I still think it's testing the same functionality, the

237
00:13:27.780 --> 00:13:30.480
passage of the correct props to the component.

238
00:13:30.660 --> 00:13:34.920
If you wanted to break these assertions up so that it's one per test, I wouldn't mind that either.

239
00:13:35.070 --> 00:13:38.850
You just might want to consolidate this set of code to some kind of helper function, or maybe a bit

240
00:13:38.850 --> 00:13:39.450
for each loop.

241
00:13:39.870 --> 00:13:43.680
But with that I feel pretty good about our tests for the jobs of the cyber component.

242
00:13:43.860 --> 00:13:47.760
We're really testing the heart of this component, which is the rendering of these two things and the

243
00:13:47.760 --> 00:13:52.620
passage of the right data from the Reliance's or the dependencies in our setup method.

244
00:13:52.950 --> 00:13:57.690
The rest of this component is mostly rendering just generic HTML and CSV, which I don't really care

245
00:13:57.690 --> 00:13:57.960
about.

246
00:13:58.260 --> 00:14:02.460
So for me, this is the heart of the component that needs to be tested, and we've captured that in

247
00:14:02.460 --> 00:14:02.850
our test.

248
00:14:03.240 --> 00:14:03.540
All right.

249
00:14:03.540 --> 00:14:05.400
So that's all there is to cover it in this lesson.

250
00:14:05.400 --> 00:14:07.050
So I will see you in the next one.
