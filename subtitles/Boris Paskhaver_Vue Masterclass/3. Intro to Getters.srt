1
00:00:00,660 --> 00:00:01,530
Okay.

2
00:00:01,530 --> 00:00:05,190
So in this lesson, we're going to introduce Getters in view.

3
00:00:05,700 --> 00:00:09,780
But before we get there, I want to reiterate the problem that we're trying to solve.

4
00:00:10,080 --> 00:00:16,830
So here in our DB, that JSON file, as a reminder, we have our array of 100 jobs and every job is

5
00:00:16,830 --> 00:00:22,230
going to have an organization property that you can think of as almost like the sub company within our

6
00:00:22,230 --> 00:00:24,630
larger company that this job belongs to.

7
00:00:24,690 --> 00:00:28,200
So this one, as of you and me and this one has YouTube, etc..

8
00:00:28,440 --> 00:00:31,680
And many jobs are going to share the same organization.

9
00:00:31,920 --> 00:00:38,490
So what I want to do is create a unique list or a unique collection of all of the organizations across

10
00:00:38,490 --> 00:00:39,600
these 100 jobs.

11
00:00:39,900 --> 00:00:44,790
So whenever I want to have a unique data structure, the first thought that should come to mind is a

12
00:00:44,790 --> 00:00:49,650
set, especially because we don't care about storing these organizations in any kind of order.

13
00:00:49,800 --> 00:00:53,130
We just need a unique collection of these organizations.

14
00:00:53,490 --> 00:00:53,910
All right.

15
00:00:54,180 --> 00:01:00,710
So with that said, let's open up our configuration file where we set up everything for our view store.

16
00:01:01,020 --> 00:01:06,390
So I'm going to open up my store index that found and here's what it currently looks like.

17
00:01:06,570 --> 00:01:09,090
And I want to do a quick review of what we have here.

18
00:01:09,330 --> 00:01:12,450
And I also want to do it in a way that's interesting.

19
00:01:12,450 --> 00:01:18,660
I want to compare what we have here with the concepts that we've talked about in view components, plane

20
00:01:18,660 --> 00:01:19,140
components.

21
00:01:19,540 --> 00:01:24,690
So for example, the state that we have in our view X Store, we can look at that as very similar to

22
00:01:24,690 --> 00:01:27,120
the data that we have on a component.

23
00:01:27,330 --> 00:01:29,070
This is sort of our starting state.

24
00:01:29,280 --> 00:01:34,230
In this case, this is the state that belongs to the View X Global Store and the components data represents

25
00:01:34,230 --> 00:01:36,660
its own starting state before that component.

26
00:01:37,140 --> 00:01:43,470
Similarly, the idea of a view X mutation is just a method that modifies the existing state.

27
00:01:43,680 --> 00:01:46,590
This is very similar to a method in a view component.

28
00:01:46,770 --> 00:01:49,650
It is able to modify the existing data.

29
00:01:50,220 --> 00:01:53,490
Except in this case of course, it's global and in a component it's local.

30
00:01:53,880 --> 00:01:59,130
So one thing that we're very familiar with in components by now is the idea of computed properties,

31
00:01:59,130 --> 00:01:59,400
right?

32
00:01:59,670 --> 00:02:05,910
We use computed properties whenever we have some kind of data that is not original, but rather is dependent

33
00:02:05,910 --> 00:02:08,550
on or derived from something else.

34
00:02:08,970 --> 00:02:13,980
And in this scenario, we have something very similar because we have this jobs array right here.

35
00:02:14,070 --> 00:02:18,600
This jobs array is going to be populated with 100 jobs whenever action runs.

36
00:02:18,600 --> 00:02:24,930
This fetch jobs action right here, which runs the receive jobs mutation right here to give it the array

37
00:02:24,930 --> 00:02:25,680
of 100 jobs.

38
00:02:26,040 --> 00:02:32,730
And so what we want is a unique collection of organizations based on those 100 jobs.

39
00:02:33,000 --> 00:02:35,580
So that data is not original data.

40
00:02:35,580 --> 00:02:36,690
It's not new data.

41
00:02:36,840 --> 00:02:41,100
It is based on something that already exists in this jobs array.

42
00:02:41,370 --> 00:02:44,010
You can look at it almost like a subset of this jobs array.

43
00:02:44,190 --> 00:02:46,020
We could do this with vanilla JavaScript.

44
00:02:46,020 --> 00:02:47,790
We can iterate over our jobs array.

45
00:02:47,940 --> 00:02:49,650
We can look at every object.

46
00:02:49,770 --> 00:02:52,860
We can take the property for organization and capture all those values.

47
00:02:53,010 --> 00:02:56,700
There's no original data or new data being created here.

48
00:02:56,820 --> 00:03:00,180
It is all dependent or derived on what we already have.

49
00:03:00,540 --> 00:03:06,300
We don't want to create a separate piece of state like organizations here because that piece of state

50
00:03:06,300 --> 00:03:11,520
will be directly related to jobs, which means whenever jobs changes, so must organizations.

51
00:03:11,610 --> 00:03:13,500
And thus we have two sources of truth.

52
00:03:13,980 --> 00:03:17,340
So why do we use computed properties in our components?

53
00:03:17,550 --> 00:03:23,550
Whenever we want Vue to automatically rerun a bit of logic when some other core data changes.

54
00:03:23,790 --> 00:03:27,390
Why do we use getters in view X for the exact same reason?

55
00:03:27,510 --> 00:03:32,880
Whenever we want to create some kind of computed logic that is going to rerun whenever a piece of our

56
00:03:32,880 --> 00:03:34,890
original store state changes.

57
00:03:36,170 --> 00:03:36,530
Right.

58
00:03:36,620 --> 00:03:42,050
So whenever our jobs change, we want this other thing to rerun automatically to recalculate the new,

59
00:03:42,050 --> 00:03:43,220
unique organizations.

60
00:03:43,700 --> 00:03:46,550
And that is a data point that is not, you know, original.

61
00:03:46,550 --> 00:03:48,560
It is dependent or derived on this.

62
00:03:48,920 --> 00:03:50,960
So that's exactly what we use getters for.

63
00:03:51,050 --> 00:03:58,100
We use getters to define a derived piece of logic from our store state, alternate representations of

64
00:03:58,100 --> 00:04:00,860
our state, or subsets of our store state.

65
00:04:01,490 --> 00:04:04,670
It could be whatever we want as long as it's not original data.

66
00:04:04,940 --> 00:04:05,300
All right.

67
00:04:05,510 --> 00:04:09,170
So let me show you how this is going to work and then we'll talk more about the advantages as we proceed.

68
00:04:09,530 --> 00:04:10,730
So what I'm going to do.

69
00:04:11,990 --> 00:04:14,590
Is directly below our mutations.

70
00:04:14,600 --> 00:04:18,530
I'm going to declare another object which I will export, and I'm going to call that getters.

71
00:04:19,160 --> 00:04:22,100
So export concern getters, plural.

72
00:04:22,670 --> 00:04:24,530
I'm going to make an empty object for now.

73
00:04:24,650 --> 00:04:28,700
And before I forget, I'm going to wired up to our create store function right here.

74
00:04:29,090 --> 00:04:32,870
So this configuration object can expect a getters property.

75
00:04:33,020 --> 00:04:35,930
I'm going to provide it like so and so using E-6 syntax.

76
00:04:35,930 --> 00:04:38,300
We're simply going to provide this object right here.

77
00:04:38,660 --> 00:04:44,150
So very much like our mutations object, this getters object is simply going to consist of a bunch of

78
00:04:44,150 --> 00:04:44,570
methods.

79
00:04:44,840 --> 00:04:48,620
And each of those methods is going to receive the current store state.

80
00:04:48,800 --> 00:04:50,990
So this object as it currently is.

81
00:04:51,200 --> 00:04:54,500
And then what the getter can do is simply say, I have the store state.

82
00:04:54,590 --> 00:04:58,940
Let me generate a new bit of data based on it or dependent on it.

83
00:04:59,270 --> 00:05:04,910
So in a getter you should never modify store state, you should never add properties, delete properties,

84
00:05:04,910 --> 00:05:11,330
etc. All you can do in a getter is use the existing store state properties to give you something new,

85
00:05:11,330 --> 00:05:12,110
something else.

86
00:05:12,230 --> 00:05:13,670
And that's exactly what we want.

87
00:05:13,790 --> 00:05:18,050
We want a unique set of organizations from our existing jobs.

88
00:05:18,920 --> 00:05:19,310
All right.

89
00:05:19,610 --> 00:05:22,670
So we're going to follow a very similar protocol to what we have here.

90
00:05:22,790 --> 00:05:25,640
We're going to use constants to describe the name of our getters.

91
00:05:25,910 --> 00:05:32,150
So right here, I'm going to declare a new exported constant, and I'm going to call it unique organizations.

92
00:05:32,270 --> 00:05:33,440
That's exactly what we want.

93
00:05:33,740 --> 00:05:36,680
We want a collection of unique organizations.

94
00:05:38,770 --> 00:05:39,340
All right.

95
00:05:39,670 --> 00:05:44,230
And what I'm going to do in my getters object is I'm going to declare a method and I'm going to use

96
00:05:44,230 --> 00:05:48,370
my square bracket syntax to access that unique organization's constant above.

97
00:05:48,610 --> 00:05:53,590
Just so that I provide that string as the getter method name and just so we can reuse that constant

98
00:05:53,590 --> 00:05:55,030
in case it's needed elsewhere.

99
00:05:55,420 --> 00:05:55,840
Okay.

100
00:05:56,050 --> 00:06:02,830
So just like a mutation, each getter is going to receive the current store state in its first parameter

101
00:06:02,830 --> 00:06:03,580
called state.

102
00:06:04,000 --> 00:06:09,700
And any time the state changes view X can automatically rerun the getter for us in the exact same way

103
00:06:09,700 --> 00:06:10,420
that you can.

104
00:06:10,420 --> 00:06:15,040
Our view rather can automatically rerun a computed property whenever data changes.

105
00:06:15,700 --> 00:06:16,300
So here.

106
00:06:17,480 --> 00:06:19,070
In the body of this method.

107
00:06:19,190 --> 00:06:21,200
We can do whatever we want with the store state.

108
00:06:21,650 --> 00:06:25,010
So let's create a set consisting of the unique organizations.

109
00:06:25,220 --> 00:06:30,890
I'll begin by defining a constant called unique organizations, and I'll set that equal to be a new

110
00:06:30,890 --> 00:06:31,670
set object.

111
00:06:32,890 --> 00:06:38,950
And then what I want to do is iterate over my current state, take each jobs organization and add it

112
00:06:38,950 --> 00:06:40,810
to the set that I've defined in the line above.

113
00:06:41,200 --> 00:06:47,530
So we know that we have our current store state available via the state object that view X is automatically

114
00:06:47,530 --> 00:06:48,370
going to pass in.

115
00:06:48,520 --> 00:06:51,550
So that is this thing right here on that state object.

116
00:06:51,550 --> 00:06:54,370
We have a jobs property that's going to be an array.

117
00:06:54,490 --> 00:06:55,960
It's going to start out empty.

118
00:06:55,960 --> 00:07:00,070
And then when we get the response from our mock backend, it's now going to be an array of 100.

119
00:07:00,310 --> 00:07:01,340
What do I want to do?

120
00:07:01,360 --> 00:07:04,090
I want to iterate over each one of those job objects.

121
00:07:04,330 --> 00:07:07,090
I can do that in JavaScript using the for each loop.

122
00:07:07,450 --> 00:07:10,570
We can also do this with a basic for loop, but I think this is pretty simple.

123
00:07:10,930 --> 00:07:17,710
So for each is a method we can invoke and it accepts a function and that function represents what JavaScript

124
00:07:17,710 --> 00:07:21,100
is going to do for each individual element that it iterates over.

125
00:07:21,340 --> 00:07:24,130
So in this case, we're going to iterate over each individual job.

126
00:07:24,580 --> 00:07:26,710
So I'm going to provide that as my parameter here.

127
00:07:27,430 --> 00:07:29,530
And what do I want to do with each individual job?

128
00:07:29,800 --> 00:07:33,980
Well, I want to get its organization, which I can do via the organization property.

129
00:07:34,030 --> 00:07:37,060
This is the exact same property that we just saw in DB that Jason.

130
00:07:37,300 --> 00:07:39,670
And then what I want to do is I want to add it to my set.

131
00:07:39,970 --> 00:07:46,060
So right here, unique organizations is my set is set, has an add method and we can pass in the current

132
00:07:46,060 --> 00:07:47,620
organization that we are iterating over.

133
00:07:47,950 --> 00:07:53,350
So the beautiful part about this is if we're iterating over 100 jobs and we have, for example, six

134
00:07:53,350 --> 00:07:58,300
unique organizations, then each time we try adding a duplicate to our set, the set is simply going

135
00:07:58,300 --> 00:07:59,110
to not keep it.

136
00:07:59,320 --> 00:08:04,090
So at the very end of this iteration, our set is just going to have an unordered collection of all

137
00:08:04,090 --> 00:08:06,460
of the unique organizations across all of our jobs.

138
00:08:06,670 --> 00:08:12,460
And if our jobs are changes, then the getter will rerun and generate this new derived property, this

139
00:08:12,460 --> 00:08:16,210
new derived data of a set consisting of the new unique organizations.

140
00:08:16,570 --> 00:08:20,590
So then the most important thing here, of course, is we have the set, but we have to actually return

141
00:08:20,590 --> 00:08:23,730
it as the final return value of this getter method.

142
00:08:25,210 --> 00:08:25,570
All right.

143
00:08:25,930 --> 00:08:31,270
So obviously, it may not make perfect sense to you now because we haven't used the scanner, but the

144
00:08:31,270 --> 00:08:36,520
idea now is in a sample component, we're going to be able to use this getter, which is going to talk

145
00:08:36,520 --> 00:08:43,120
to the state and get us a set of the unique organizations which are ultimately going to form the checkboxes

146
00:08:43,120 --> 00:08:48,310
that we see on the left hand side of the job results page, because we want a checkbox for every unique

147
00:08:48,310 --> 00:08:53,170
organization within our jobs results because that's how the user is going to filter the jobs that they

148
00:08:53,170 --> 00:08:54,370
see on the right hand side.

149
00:08:54,880 --> 00:08:58,720
So another question you might have is, okay, I understand what a getter is doing.

150
00:08:58,720 --> 00:09:01,210
It's basically just filtering and giving me the this derived data.

151
00:09:01,420 --> 00:09:02,410
But why do we need it?

152
00:09:02,410 --> 00:09:03,550
The getter.

153
00:09:03,730 --> 00:09:09,100
For example, in a component, since we have access to this dollar sign store and then the state, can

154
00:09:09,100 --> 00:09:11,230
we do this logic within a component?

155
00:09:11,470 --> 00:09:15,400
And you're absolutely right, we can rewrite this entire logic within a component.

156
00:09:15,700 --> 00:09:21,760
But the problem with that approach is that we are then isolating this logic to a single component.

157
00:09:22,120 --> 00:09:24,100
Imagine that this logic is reusable.

158
00:09:24,110 --> 00:09:28,420
Imagine that multiple components need to be able to get a list of unique organizations.

159
00:09:28,660 --> 00:09:34,180
Now, by having it in a getter, each component is going to be able to call the same getter in the exact

160
00:09:34,180 --> 00:09:38,470
same way they can call a mutation, and it's going to be able to get this exact same data structure.

161
00:09:38,710 --> 00:09:41,380
And every time the state changes, it's going to get it again.

162
00:09:42,040 --> 00:09:45,190
So we're once again utilizing the general benefits of UCS.

163
00:09:45,340 --> 00:09:51,340
We are moving a lot of our business logic away from individual components to just plain JavaScript methods

164
00:09:51,340 --> 00:09:51,970
and functions.

165
00:09:51,970 --> 00:09:58,390
Up above this very similar to our mutations is very simple to test in isolation because it doesn't actually

166
00:09:58,390 --> 00:09:59,890
need a component to exist.

167
00:10:00,100 --> 00:10:04,450
It's just a plane method that accepts an object, then iterates over it and creates a set.

168
00:10:04,450 --> 00:10:04,780
Right?

169
00:10:04,840 --> 00:10:10,390
It has no construct of a view component, and thus we can isolate it, we can test it by itself, and

170
00:10:10,390 --> 00:10:13,300
then we can reuse it in as many components as needed.

171
00:10:13,540 --> 00:10:15,130
So that is the advantage of getters.

172
00:10:15,280 --> 00:10:19,840
Yes, you can use this logic in a component, but now we've isolated it, made it more testable, and

173
00:10:19,840 --> 00:10:20,830
made it more reusable.

174
00:10:20,920 --> 00:10:25,870
That's why we have getters, because instead of having computed logic in each component, we can now

175
00:10:25,870 --> 00:10:29,920
have the same idea but directly related to our view store state.

176
00:10:30,130 --> 00:10:31,480
Here is our starting data.

177
00:10:31,570 --> 00:10:36,910
Here is how we modify it and here's how we get some kind of derived information from it that is secondary

178
00:10:36,910 --> 00:10:39,010
and or based off our original data.

179
00:10:39,430 --> 00:10:39,820
All right.

180
00:10:40,120 --> 00:10:42,970
So let me delete this comment right here that should take care of this lesson.

181
00:10:42,970 --> 00:10:45,460
In the very next lesson, we're going to test this getter method.

182
00:10:45,640 --> 00:10:49,120
And then afterwards, of course, we're going to wire up this getter in a sample component.

183
00:10:49,300 --> 00:10:50,440
So lots to look forward to.

184
00:10:50,440 --> 00:10:51,910
And I will see you in the next lesson.
