WEBVTT
1
00:00:00.890 --> 00:00:01.370
Okay.

2
00:00:01.380 --> 00:00:07.100
So I am super excited to introduce the project that we're going to be building out together over this

3
00:00:07.100 --> 00:00:07.490
course.

4
00:00:07.700 --> 00:00:14.600
And it is a jobs site or a career site, and it is strongly inspired by the official Google Careers

5
00:00:14.600 --> 00:00:15.140
website.

6
00:00:15.470 --> 00:00:20.210
So first up, you can head to careers that Google.com to see this site in action.

7
00:00:20.420 --> 00:00:22.850
And I also have it loaded right here on the screen.

8
00:00:23.210 --> 00:00:26.360
So there are a couple of reasons why I chose this project.

9
00:00:26.600 --> 00:00:29.450
First up, this website is built with views.

10
00:00:29.480 --> 00:00:29.810
Yes.

11
00:00:29.990 --> 00:00:35.330
Which is fitting because we're going to be solving the exact same problems that Google developers had

12
00:00:35.330 --> 00:00:37.610
to solve with the exact same technologies.

13
00:00:37.790 --> 00:00:41.400
So it is a real world problem and a real world website.

14
00:00:41.420 --> 00:00:45.110
We're not just building a sample app from scratch that has no practicality.

15
00:00:45.200 --> 00:00:48.710
This is a real world project that delivered value to a real company.

16
00:00:49.370 --> 00:00:53.360
Secondly, this business domain is not overwhelmingly complex.

17
00:00:53.570 --> 00:00:55.970
It's a pretty simple website in its design.

18
00:00:56.150 --> 00:00:57.890
The user is able to navigate here.

19
00:00:58.070 --> 00:01:04.100
They're able to fill out some criteria, such as a role they're interested in or a location or an educational

20
00:01:04.100 --> 00:01:04.490
climate.

21
00:01:04.700 --> 00:01:08.420
And then they're going to be able to see a couple of jobs that fit that criteria.

22
00:01:08.750 --> 00:01:14.120
So the domain is simple in a sense, but there's actually also a lot of hidden complexity.

23
00:01:14.330 --> 00:01:20.060
And we're going to be able to learn just about every major feature of view simply by building out this

24
00:01:20.060 --> 00:01:20.450
site.

25
00:01:20.750 --> 00:01:23.390
This site at its core is really two pages.

26
00:01:23.570 --> 00:01:28.850
It's this page right here, the main page, as well as the job results page where the user actually

27
00:01:28.850 --> 00:01:30.260
sees the jobs.

28
00:01:30.260 --> 00:01:32.360
And we're going to show you that page in just a second.

29
00:01:32.750 --> 00:01:38.840
So as we mentioned in the previous lesson view is a library for building out reactive frontend interfaces

30
00:01:39.140 --> 00:01:42.440
and the word reactive means able to react to change.

31
00:01:42.830 --> 00:01:45.120
That change can come in many different ways.

32
00:01:45.140 --> 00:01:46.880
It can come automatically.

33
00:01:47.120 --> 00:01:52.690
It can come from a user interaction, or it can happen when the website receives new data from an API

34
00:01:52.850 --> 00:01:54.350
and many other ways as well.

35
00:01:54.710 --> 00:01:59.420
So let's pause for a second here and think about the reactivity that we can observe in this app.

36
00:01:59.630 --> 00:02:03.530
Some of it is kind of prominent and in front of us, and some of it is more hidden.

37
00:02:03.680 --> 00:02:07.730
And then we're just going to quickly talk about some of the ways that this website is reacting to change.

38
00:02:08.450 --> 00:02:08.750
All right.

39
00:02:09.020 --> 00:02:14.060
So obviously, one of the first ones that immediately jumps out at me is this content right here.

40
00:02:14.300 --> 00:02:18.080
Every couple of seconds, this action verb right here is dynamically changing.

41
00:02:18.290 --> 00:02:20.570
And as a user, we're not doing anything to trigger this.

42
00:02:20.570 --> 00:02:23.840
It's just an automatic part of this website at an interval.

43
00:02:23.840 --> 00:02:25.550
We're switching the word we see right here.

44
00:02:25.970 --> 00:02:27.740
Here's another example of reactivity.

45
00:02:27.980 --> 00:02:31.310
Even something as simple as the user typing is an event.

46
00:02:31.310 --> 00:02:34.910
It is something that the user is doing to the website that requires it to react.

47
00:02:35.240 --> 00:02:40.160
So simply by clicking into here and typing something like View Developer, we are interacting with this

48
00:02:40.160 --> 00:02:44.450
page and view is going to help us to be able to react to that kind of information.

49
00:02:44.720 --> 00:02:50.330
You'll also notice as soon as we type that we have this thing pop up right here, 300 jobs matched and

50
00:02:50.330 --> 00:02:55.190
obviously that content is being conditionally rendered based on what we've entered here.

51
00:02:55.430 --> 00:02:57.920
So notice that the website is not refreshing itself.

52
00:02:58.100 --> 00:03:04.670
Rather, it is dynamically updating itself right here or right here based on user interaction, based

53
00:03:04.670 --> 00:03:06.170
on the passage of time, etc..

54
00:03:06.890 --> 00:03:08.750
But it gets even more complex than that.

55
00:03:09.050 --> 00:03:10.970
So here's something that is a little bit hidden.

56
00:03:11.360 --> 00:03:17.290
Notice that we have a main navigation menu right here, and then below it we have a sub navigation menu.

57
00:03:17.300 --> 00:03:20.480
It's this section right here where we have save jobs and job alerts.

58
00:03:20.870 --> 00:03:25.340
Notice as well that I am logged into my Google website account.

59
00:03:25.670 --> 00:03:27.790
Now notice what happens when I log out.

60
00:03:27.800 --> 00:03:30.440
So I'm going to click this icon and I'm going to click sign out.

61
00:03:31.490 --> 00:03:34.580
Notice that the sub nav disappears entirely.

62
00:03:34.970 --> 00:03:35.210
Right.

63
00:03:35.210 --> 00:03:40.610
So parts of this website are being conditionally rendered based on a condition being true, based on

64
00:03:40.610 --> 00:03:44.570
a state, in this case, the state of whether I am logged in or logged out.

65
00:03:45.080 --> 00:03:48.770
Also notice as well what happened here on the right hand side here.

66
00:03:48.770 --> 00:03:54.320
We formerly had my profile image and now we have a sign in button and we've accomplished that dynamic

67
00:03:54.320 --> 00:03:56.660
switching without reloading the whole page.

68
00:03:56.900 --> 00:04:01.880
So obviously what the website is thinking is if the user is logged out, give them a signing button

69
00:04:01.880 --> 00:04:04.580
and if the user's logged in, show them their profile image.

70
00:04:04.760 --> 00:04:09.620
And that's the kind of reactive, conditional logic that view is going to be able to help us build out.

71
00:04:10.160 --> 00:04:10.460
All right.

72
00:04:10.460 --> 00:04:13.490
So this is the first of two primary pages we're going to be building out.

73
00:04:13.730 --> 00:04:16.100
Let's now go to the jobs page and observe that.

74
00:04:17.590 --> 00:04:18.940
So here is the jobs page.

75
00:04:18.940 --> 00:04:22.840
And as you can see on the right hand side, we're going to have a whole bunch of job listings.

76
00:04:23.080 --> 00:04:27.240
And as I scroll down, you're going to see as well that there are actually many different pages.

77
00:04:27.250 --> 00:04:32.020
Once I reached the end of the section, you'll see that we have a next button and when I click next,

78
00:04:32.020 --> 00:04:33.850
once again the page does not refresh.

79
00:04:34.000 --> 00:04:39.160
Rather, we simply get a fresh batch of jobs and the rendered right here on the screen, which means,

80
00:04:39.160 --> 00:04:44.800
of course, that view is taking the former boxes right here and replacing them with new content without

81
00:04:44.800 --> 00:04:46.030
reloading the whole page.

82
00:04:46.480 --> 00:04:52.210
Now, of course, another big part of this page is page, and its dynamism is this section right here

83
00:04:52.210 --> 00:04:55.180
where the user can filter these jobs by a variety of criteria.

84
00:04:55.570 --> 00:05:01.030
So notice right here, if I, for example, expand this degree section and I click on bachelors, there's

85
00:05:01.030 --> 00:05:02.710
a lot of things that are going to happen.

86
00:05:02.920 --> 00:05:08.020
So notice here when I click this first step, of course the checkbox changes, but then the jobs on

87
00:05:08.020 --> 00:05:13.720
the right automatically update to show only the job that fit this criteria.

88
00:05:13.900 --> 00:05:16.720
These are the jobs that require a bachelor's degree.

89
00:05:17.050 --> 00:05:18.850
There's another section that you may have missed.

90
00:05:19.060 --> 00:05:23.320
This section right here displays the total number of jobs that matched a criteria.

91
00:05:23.560 --> 00:05:29.470
And every time I either add or remove a criteria, that number will update to reflect the correct number.

92
00:05:29.710 --> 00:05:34.630
So for example, if I expand this and add another filter like I'm only interested in full time jobs,

93
00:05:34.870 --> 00:05:39.490
notice once again this number updates and the jobs on the right update as well.

94
00:05:39.760 --> 00:05:42.970
And all of these criteria, by the way, exist simultaneously.

95
00:05:43.150 --> 00:05:49.000
So the logic has to be smart enough to account for the degree, the job type and the potential organization

96
00:05:49.000 --> 00:05:53.590
right here, the skills and qualifications and perhaps even a text search term.

97
00:05:53.770 --> 00:05:58.240
And notice that almost the entire UI is reacting to a simple checkbox.

98
00:05:58.240 --> 00:05:58.540
Click.

99
00:05:58.810 --> 00:06:00.400
This section is changing right here.

100
00:06:00.580 --> 00:06:07.420
This section is changing right here, etc. So there is a lot of complexity to reveal in these two pages

101
00:06:07.420 --> 00:06:12.730
and we're going to be tackling all of it and showing you how view helps us solve these kinds of problems.

102
00:06:12.910 --> 00:06:19.480
In web development, again, View is helping us to react to changes and dynamically update the interface

103
00:06:19.990 --> 00:06:26.800
with logic that we define for determining how the components of the page the pieces should adjust themselves

104
00:06:26.800 --> 00:06:30.550
as the user interacts with the page and as various events happen.

105
00:06:30.820 --> 00:06:31.060
All right.

106
00:06:31.060 --> 00:06:34.690
So this is going to be the project, and we're going to be building out just about this entire thing.

107
00:06:34.810 --> 00:06:37.120
It's going to look the exact same way.

108
00:06:37.240 --> 00:06:38.890
It's going to function the exact same way.

109
00:06:39.040 --> 00:06:43.750
And we're going to build out this real world project inspired by an actual real world view app built

110
00:06:43.750 --> 00:06:44.710
by Google developers.

111
00:06:45.040 --> 00:06:45.280
All right.

112
00:06:45.280 --> 00:06:46.420
So super exciting stuff.

113
00:06:46.420 --> 00:06:48.070
And I will see you in the next lesson.
