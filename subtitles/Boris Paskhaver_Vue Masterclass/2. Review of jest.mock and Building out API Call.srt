1
00:00:00,650 --> 00:00:01,520
Okay.

2
00:00:01,520 --> 00:00:08,450
So here I am in my job listings component and as a reminder it is in the mounted lifecycle look that

3
00:00:08,450 --> 00:00:12,890
we are making the request to our MOC back into our JSON server.

4
00:00:13,130 --> 00:00:15,350
Here is where we're wiring up the URL.

5
00:00:15,470 --> 00:00:20,840
We're fetching it with Axios and then once we get that response of jobs, we're saving it to the local

6
00:00:20,840 --> 00:00:23,120
jobs data property on this component.

7
00:00:23,390 --> 00:00:26,840
So this is the logic right here that I want to extract.

8
00:00:27,050 --> 00:00:32,000
And one place where I want to move this logic is the view store, but another place that I want to move.

9
00:00:32,000 --> 00:00:37,850
This logic is to a separate helper function that's just going to take care of the actual API request

10
00:00:37,850 --> 00:00:38,240
itself.

11
00:00:38,480 --> 00:00:40,340
So this part right here.

12
00:00:40,700 --> 00:00:43,370
So let's wire up the files we need for that.

13
00:00:43,370 --> 00:00:48,860
And then we're going to try building out most of this using a TDD or test driven development approach

14
00:00:49,010 --> 00:00:53,870
just because it's been a little while since we use that and I do want us to flex that muscle when we

15
00:00:53,870 --> 00:00:54,830
have the opportunity.

16
00:00:55,130 --> 00:01:01,550
So what I'm going to do here is in my project directory, in my source folder, I'm going to create

17
00:01:01,550 --> 00:01:03,800
a new folder called API.

18
00:01:04,160 --> 00:01:06,950
And so this folder is going to have a bunch of helper files.

19
00:01:06,980 --> 00:01:10,460
Each one will make a request to a different endpoint.

20
00:01:10,640 --> 00:01:16,610
Right now we only have one end point in JSON server in our backend, which represents the jobs end point.

21
00:01:16,790 --> 00:01:21,290
So for now, I'm just going to create a single file in here and that file is going to be the name of

22
00:01:21,290 --> 00:01:25,730
our eventual function that will also do the job of fetching the jobs.

23
00:01:25,910 --> 00:01:29,300
So I'm going to call that file and that function get jobs.

24
00:01:29,480 --> 00:01:32,480
So right here, I'm going to call this file, get jobs, jobs.

25
00:01:33,590 --> 00:01:36,800
Eventually, it's going to use this code we have right here.

26
00:01:36,800 --> 00:01:38,030
But we'll get to that in just a moment.

27
00:01:38,450 --> 00:01:43,580
So before we move further, I do want to make sure that I create the corresponding test file for my

28
00:01:43,580 --> 00:01:44,960
eventual API function.

29
00:01:45,200 --> 00:01:50,450
So in my tests unit directory, we're not testing the component or the store or anything like that.

30
00:01:50,630 --> 00:01:53,870
So I want to create a new folder in here called API.

31
00:01:53,930 --> 00:01:57,830
I'm once again going to mirror the directory structure I have in my source directory.

32
00:01:58,160 --> 00:02:04,070
And just like I have a file right here called Get Jobs in this API folder in my test directory, I'll

33
00:02:04,070 --> 00:02:08,150
create a new file called Get Jobs that test docs.

34
00:02:09,950 --> 00:02:10,340
All right.

35
00:02:10,640 --> 00:02:15,560
And let me move it to the right hand side here, and I'm going to keep my implementation on the left

36
00:02:15,560 --> 00:02:16,040
hand side.

37
00:02:16,430 --> 00:02:22,370
Right now, we're getting a failing test suite, but that's simply because we have no tests to run.

38
00:02:23,150 --> 00:02:28,220
So I do want to give you a quick reminder of how marking works, because we're going to be marking out

39
00:02:28,220 --> 00:02:32,750
Axios in our test the exact same way that we market Axios.

40
00:02:32,750 --> 00:02:38,210
Whenever we test the job listings component, we don't actually want to make a real request to our mock

41
00:02:38,210 --> 00:02:42,980
backend in a test because number one, that takes time and number two, that makes the test complex

42
00:02:42,980 --> 00:02:46,850
because we have to spin up a separate backend to be able to receive that request.

43
00:02:47,030 --> 00:02:49,520
And number three, you know, that async request can go wrong.

44
00:02:49,610 --> 00:02:53,600
It can take 5 seconds, it can severely slow down the speed of our test suite.

45
00:02:53,870 --> 00:02:59,420
So whenever we're testing something asynchronous, we basically need to pretend as if we made an API

46
00:02:59,420 --> 00:03:04,790
request, but then intercept it and immediately just return our own mock data, the exact same principles

47
00:03:04,790 --> 00:03:06,140
that we've talked about earlier in the course.

48
00:03:06,530 --> 00:03:10,250
So I just want to show you here, this is a reminder of something we talked about earlier.

49
00:03:10,490 --> 00:03:17,630
If I import Axios from Axios, Axios is the NPM library that we added that allows us to make API requests.

50
00:03:18,110 --> 00:03:24,470
And if we console.log Axios right here, we're going to see that we're going to get the original Axios

51
00:03:24,470 --> 00:03:24,920
object.

52
00:03:24,980 --> 00:03:30,740
This is the actual complex JavaScript object that we're getting from the real world implementation of

53
00:03:30,890 --> 00:03:31,970
the Axios library.

54
00:03:31,970 --> 00:03:37,580
This is some other developers code and as a reminder, we can use this syntax right here on the global

55
00:03:37,580 --> 00:03:40,490
gest object that we have available in every test file.

56
00:03:40,760 --> 00:03:42,050
We have that just object.

57
00:03:42,050 --> 00:03:46,820
It has a method called MOC and we can pass a string argument of Axios right here.

58
00:03:47,120 --> 00:03:52,610
And what that is going to do is mark out the properties of that imported Axios object.

59
00:03:52,820 --> 00:03:58,040
And when I say mark out, what Jess is going to do is it's going to run through that real world library

60
00:03:58,250 --> 00:04:03,950
and every time it sees a method, it's going to automatically replace it with a just mock function.

61
00:04:04,250 --> 00:04:10,460
You may recall in the previous section we created a view store and then we manually overrode its commit

62
00:04:10,490 --> 00:04:11,990
method to be adjust function.

63
00:04:12,170 --> 00:04:16,130
This is the exact same idea, except Jess does it automatically for us.

64
00:04:16,400 --> 00:04:21,860
So now, right here in our console.log, we can see instead of the former implementation, we have all

65
00:04:21,860 --> 00:04:26,630
of the original methods from the original Axios library, such as get your I right here.

66
00:04:26,840 --> 00:04:32,300
But the original implementation has been replaced with just mock functions and by default those mock

67
00:04:32,300 --> 00:04:38,510
functions can track however many times they've been called with what arguments, etc. And when we invoke

68
00:04:38,510 --> 00:04:42,140
those functions by default, by the way, they return undefined.

69
00:04:42,140 --> 00:04:43,640
That's another important detail to know.

70
00:04:43,970 --> 00:04:46,100
So I think that this is a good place to leave off.

71
00:04:46,100 --> 00:04:50,930
It's just a good place to review the concepts that we learned about earlier in the course and in the

72
00:04:50,930 --> 00:04:57,170
very next lesson, we can start using TDD to write our tests for the Get Jobs API search function.
