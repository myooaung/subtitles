WEBVTT
1
00:00:00.420 --> 00:00:01.410
All right.

2
00:00:01.420 --> 00:00:07.500
So in this lesson and we're going to introduce the computed function from the View Library and hopefully

3
00:00:07.500 --> 00:00:11.160
this is going to be the missing puzzle piece that ties everything together.

4
00:00:11.580 --> 00:00:20.700
So the computed function allows us to tie the dynamic computation of a value to some kind of other reactive

5
00:00:20.700 --> 00:00:21.210
value.

6
00:00:21.570 --> 00:00:29.340
So to put it into the context of our example, we are trying to tie together the computation of C based

7
00:00:29.340 --> 00:00:37.410
on the reactivity of A and B as those values change, we want to update C, it's something that's very

8
00:00:37.410 --> 00:00:41.130
similar to the idea of a computed property in our component.

9
00:00:41.430 --> 00:00:44.940
Whenever our data changes, our computed property reevaluates.

10
00:00:45.300 --> 00:00:48.240
So we can think about those properties as computed properties.

11
00:00:48.360 --> 00:00:53.790
And this function is called the computed function because it basically does the exact same thing.

12
00:00:54.150 --> 00:00:59.910
So I'm going to import this function called computed and it's going to give us that same reactivity

13
00:00:59.910 --> 00:01:04.710
that we see with computed properties in components, but outside the scope of a specific value component.

14
00:01:05.430 --> 00:01:09.360
So here's what I'm going to do for my C variable.

15
00:01:09.570 --> 00:01:17.220
I'm going to invoke this computed function, okay, that we imported from view what this function expects

16
00:01:17.220 --> 00:01:20.850
as an argument is a function, right?

17
00:01:20.850 --> 00:01:22.920
So we're going to provide an error function in line.

18
00:01:22.920 --> 00:01:26.880
It expects an error function and the way you can think of it is like this.

19
00:01:27.330 --> 00:01:33.420
Anything that we use here in the body of this error function, the computed function is going to track

20
00:01:34.080 --> 00:01:35.100
those values.

21
00:01:35.340 --> 00:01:41.910
And if those values change, then the computed function will rerun the function that we pass in.

22
00:01:42.570 --> 00:01:46.860
So let me write out this code and then once again walk through what we're going to accomplish here.

23
00:01:47.010 --> 00:01:51.270
I'm going to write a dot value plus B dot value.

24
00:01:52.770 --> 00:01:53.130
All right.

25
00:01:53.670 --> 00:02:01.800
So we pass computed a function and that function says to add together the number on the value property

26
00:02:01.800 --> 00:02:07.290
of A and the number on the value property of B, An, A and B are both objects returned by the ref function.

27
00:02:08.010 --> 00:02:18.060
Whenever the value property of A or B changes the computed function, we'll rerun this function that

28
00:02:18.060 --> 00:02:18.660
we pass in.

29
00:02:19.510 --> 00:02:22.580
Which will in turn give us a new sum.

30
00:02:23.380 --> 00:02:26.080
So this will accomplish exactly what we want.

31
00:02:26.590 --> 00:02:30.340
So what does the computed function actually return as an argument?

32
00:02:30.340 --> 00:02:31.810
As a return or as a return value?

33
00:02:31.990 --> 00:02:34.270
Does it return the value three in this case?

34
00:02:34.630 --> 00:02:35.980
The answer is no.

35
00:02:36.250 --> 00:02:38.770
It returns a reactive object.

36
00:02:38.890 --> 00:02:44.680
It returns the exact kind of object that A and B are, which is going to be a JavaScript object with

37
00:02:44.680 --> 00:02:48.190
a value property set to that computation.

38
00:02:48.610 --> 00:02:54.580
So if I simply console.log C, we're going to see that it's not going to be equal to three.

39
00:02:55.990 --> 00:03:00.370
It's going to be equal to this complex object right here that the view developer setup.

40
00:03:00.640 --> 00:03:07.180
However, if I do see that value, remember that I can access that property on any of view's computed

41
00:03:07.180 --> 00:03:08.500
or reactive objects.

42
00:03:09.040 --> 00:03:12.310
I can execute it and see that it is equal to three.

43
00:03:12.430 --> 00:03:12.700
Right?

44
00:03:12.700 --> 00:03:16.960
So this is no different so far compared to if we had wrapped three in a ref.

45
00:03:17.170 --> 00:03:19.450
But here is the beauty of the computed function.

46
00:03:19.660 --> 00:03:26.170
Let's now see what happens when I assign, for example, a dot value to ten and then console.log.

47
00:03:26.320 --> 00:03:27.430
See that value?

48
00:03:28.620 --> 00:03:32.940
So now view is going to keep track of any changes throughout our program.

49
00:03:33.150 --> 00:03:40.440
So because we have changed the value of A and we know that the computer function is keeping track of

50
00:03:40.440 --> 00:03:48.450
those changes and re-evaluating whenever we see a change, it's going to rerun this function that we

51
00:03:48.450 --> 00:03:50.340
passed to the computed function.

52
00:03:50.490 --> 00:03:57.750
So it's going to get ten plus two and it's going to evaluate to 12 and it's going to rewrite the value

53
00:03:57.750 --> 00:04:00.720
on this C reactive object to be 12.

54
00:04:01.470 --> 00:04:05.520
So in short, we're going to accomplish exactly what we saw in the Google sheet.

55
00:04:06.210 --> 00:04:13.110
So if I run this file right now, we're going to see we're going to start out with C's value being three.

56
00:04:13.290 --> 00:04:14.490
C is an object.

57
00:04:14.490 --> 00:04:19.500
It's a reactive object from view, which you can think of just as a plain JavaScript object that has

58
00:04:19.500 --> 00:04:21.900
a value property that is dynamically changing.

59
00:04:21.900 --> 00:04:22.080
Right?

60
00:04:22.080 --> 00:04:23.670
That's the simplest definition I can give.

61
00:04:23.910 --> 00:04:28.500
It's going to start out with its initial value of three, which is the initial calculation of one plus

62
00:04:28.500 --> 00:04:28.830
two.

63
00:04:29.310 --> 00:04:35.670
Then we're going to change the a value to ten, which is going to force the computed function to rerun.

64
00:04:36.210 --> 00:04:41.250
And somewhere in those internals of how V works, it's going to say, okay, ten plus two equals 12

65
00:04:41.430 --> 00:04:47.580
and I'm going to overwrite the value on this C object to now be 12, which is the new sum.

66
00:04:47.880 --> 00:04:54.120
And similarly, if I alter the value on my B reactive object, if I do B that value equals something

67
00:04:54.120 --> 00:04:56.400
like 15 and then console.log.

68
00:04:56.760 --> 00:05:00.960
See that value once again we're going to see 25.

69
00:05:01.170 --> 00:05:06.390
And the reason is because we have connected the reactivity of the C object to not just changes in the

70
00:05:06.390 --> 00:05:09.630
A object, but also the B object.

71
00:05:10.640 --> 00:05:11.240
Okay.

72
00:05:11.300 --> 00:05:15.290
This line is critical because this line connects it to both A and B.

73
00:05:15.320 --> 00:05:22.730
Whenever either one changes, then C will update or to be more specific, view will update C on our

74
00:05:22.730 --> 00:05:23.180
behalf.

75
00:05:23.510 --> 00:05:23.840
Right.

76
00:05:24.230 --> 00:05:30.290
That's why it's imperative that we specifically provide references to reactive objects and their values

77
00:05:30.290 --> 00:05:31.100
here in line.

78
00:05:31.370 --> 00:05:37.190
Because if we simply hardcoded something here, like let's say we did three plus four and we are hard

79
00:05:37.190 --> 00:05:41.300
coding a function that is always going to evaluate to seven, right?

80
00:05:41.450 --> 00:05:46.880
So anytime we output the value of C, we're going to have a consistent value of seven by referencing

81
00:05:46.880 --> 00:05:48.950
A and B, which are reactive objects.

82
00:05:49.100 --> 00:05:55.500
Vue knows in its internals that the C object and its reactivity should keep track.

83
00:05:55.550 --> 00:06:01.370
Keep an eye on whatever's going on with either A or B throughout the program and whenever those update,

84
00:06:02.090 --> 00:06:03.710
C will update accordingly.

85
00:06:04.130 --> 00:06:05.960
Now, remember, C is not a plane number.

86
00:06:06.080 --> 00:06:13.280
C is an object, a reactive object, a JavaScript object that has a value property that will be dynamically

87
00:06:13.280 --> 00:06:20.510
changed by Vue whenever the value of A or B changes, and A and B themselves are reactive objects.

88
00:06:20.690 --> 00:06:21.020
All right.

89
00:06:21.260 --> 00:06:26.750
So in summary, the ref function specifies a value that's going to change throughout the program, and

90
00:06:26.750 --> 00:06:32.240
the computed function allows us to calculate a derived value based on that reactive value that's going

91
00:06:32.240 --> 00:06:32.750
to change.

92
00:06:33.080 --> 00:06:36.170
So it's basically identical just about.

93
00:06:37.220 --> 00:06:42.380
To how the data and computed properties work in our view component in our options API.

94
00:06:42.530 --> 00:06:42.860
Right.

95
00:06:43.040 --> 00:06:49.970
You can almost think of the RAF as the base data, the core independent data that is changing by itself.

96
00:06:49.970 --> 00:06:56.030
Our base state and you can think of computed as equivalent to a computed property on a component.

97
00:06:56.210 --> 00:07:02.780
It is a derived piece of data, it is a calculated piece of data, a dependent piece of data that knows

98
00:07:02.780 --> 00:07:07.010
the change whenever the thing that's tracking is changing.

99
00:07:07.700 --> 00:07:13.760
So we use RAF to set up the thing that is being tracked and we set up computed to set up the calculation

100
00:07:13.880 --> 00:07:16.580
that is going to monitor those reactive objects.

101
00:07:17.360 --> 00:07:20.000
So hoping that's going to give you a better sense of what we've done here.

102
00:07:20.120 --> 00:07:24.710
I think it's a pretty simple idea to grasp from Google Sheets, but the syntax can be a little bit confusing

103
00:07:24.710 --> 00:07:25.550
on the view side.

104
00:07:25.700 --> 00:07:29.810
But don't worry, we're going to practice a lot more with this concept throughout the upcoming lessons,

105
00:07:30.080 --> 00:07:31.430
so I will see you in the next one.
