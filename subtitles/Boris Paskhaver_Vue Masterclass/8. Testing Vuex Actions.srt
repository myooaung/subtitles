1
00:00:00,300 --> 00:00:01,020
Okay.

2
00:00:01,020 --> 00:00:04,800
So let's talk about testing our fetch jobs action method.

3
00:00:05,100 --> 00:00:06,690
There's two points I'd like to make here.

4
00:00:06,990 --> 00:00:12,240
The first one, and this is similar to what I talked about before with mutations, is that we do not

5
00:00:12,240 --> 00:00:17,410
have to test this method or this object while using it with view x.

6
00:00:17,670 --> 00:00:24,060
This is a plain JavaScript object with a single asynchronous method, and this asynchronous method receives

7
00:00:24,060 --> 00:00:29,310
a parameter of context which simply has to be some kind of object with a commit method on it.

8
00:00:29,610 --> 00:00:34,110
That's all that this function is in isolation, and we can test it as such.

9
00:00:34,350 --> 00:00:40,080
We do not need to spin up a view store in our tests in order to unit test this functionality, because

10
00:00:40,080 --> 00:00:43,800
all of this functionality by itself is regular JavaScript.

11
00:00:43,920 --> 00:00:46,980
We can write this code even without including view X.

12
00:00:47,790 --> 00:00:51,630
Of course, view x needs this shape of object, which is why we include here.

13
00:00:51,900 --> 00:00:57,780
But we could totally write this code right here without ever creating a store, and thus we can unit

14
00:00:57,780 --> 00:01:03,240
test and isolate just this responsibility to a test and just test that the method does what we need

15
00:01:03,240 --> 00:01:08,820
it to do, that it makes an API call and then it takes the context argument and takes that object and

16
00:01:08,820 --> 00:01:10,980
invokes the correct method on it, which is commit.

17
00:01:11,830 --> 00:01:13,560
Okay, that's the first thing I'd like to say.

18
00:01:13,860 --> 00:01:19,320
The second thing is, you'll remember we have this get jobs API call right here and here's the function

19
00:01:19,320 --> 00:01:20,130
that implements that.

20
00:01:20,370 --> 00:01:25,860
This is where we have an asynchronous request that uses the Axios library to get our job results.

21
00:01:26,220 --> 00:01:31,590
And some people might be tempted to import Axios into our test file so that we can make it out.

22
00:01:31,830 --> 00:01:36,240
And that is definitely a step in the right direction because we are making our unit tests, true unit

23
00:01:36,240 --> 00:01:36,630
tests.

24
00:01:36,630 --> 00:01:42,210
We are testing each little component or functionality in isolation and we're not coupling it with other

25
00:01:42,210 --> 00:01:42,790
services.

26
00:01:43,020 --> 00:01:46,830
So this separates us from the need of a back end in our test suite.

27
00:01:47,040 --> 00:01:50,520
But I argue that we can do better than simply mocking our Axios.

28
00:01:50,730 --> 00:01:57,420
I propose that when we test this actually method, we simply mark out our own get jobs function.

29
00:01:57,810 --> 00:01:59,280
Why is this a good idea?

30
00:01:59,430 --> 00:02:02,010
Well, we already have tests for this function.

31
00:02:02,010 --> 00:02:04,620
We have tests right here in the get jobs.

32
00:02:04,620 --> 00:02:10,980
That test file where we validate that that function does what it's supposed to do and performs its responsibilities.

33
00:02:11,640 --> 00:02:17,190
So I would argue the responsibility of this action method is not to ensure that jobs does what it's

34
00:02:17,190 --> 00:02:17,730
supposed to do.

35
00:02:17,910 --> 00:02:20,160
It's simply to invoke get jobs.

36
00:02:20,220 --> 00:02:24,540
That's all that this method cares about, that I'm going to call this asynchronous method and I'm going

37
00:02:24,540 --> 00:02:25,860
to get back something from it.

38
00:02:26,130 --> 00:02:31,980
And whatever I get back from it is what I have to pass along in my committing or in my running of the

39
00:02:31,980 --> 00:02:32,550
mutation.

40
00:02:32,760 --> 00:02:35,520
That's all that this fetch jobs action to act cares about.

41
00:02:35,880 --> 00:02:40,560
So in our test, we were actually going to mock this thing out.

42
00:02:40,710 --> 00:02:43,620
We're going to say we're going to pretend we have a get jobs function.

43
00:02:43,800 --> 00:02:47,760
And it's going to be a promise because it needs to be an asynchronous function and it's going to resolve

44
00:02:47,760 --> 00:02:49,860
to give us back some kind of array of objects.

45
00:02:50,250 --> 00:02:54,900
It's going to work the exact same way the real implementation works in the in the real world.

46
00:02:55,140 --> 00:03:00,570
But we're going to be able to isolate the actual implementation of how get jobs works, even though

47
00:03:00,570 --> 00:03:01,320
it is our own code.

48
00:03:01,500 --> 00:03:02,790
The same principle applies.

49
00:03:02,970 --> 00:03:07,980
We want to separate the testing of this method with the logic of what this function does right here.

50
00:03:08,160 --> 00:03:13,650
So we're going to mock this thing out, have our our mock just function, return something very similar,

51
00:03:13,650 --> 00:03:15,540
and then simply test this thing in isolation.

52
00:03:15,840 --> 00:03:17,460
So let's see how that's going to work right here.

53
00:03:17,910 --> 00:03:25,770
I'm going to import my get jobs function and that is available from the source directory and then API

54
00:03:25,770 --> 00:03:30,570
and then get jobs and then immediately below I'm going to use the familiar just mock syntax.

55
00:03:30,720 --> 00:03:36,150
We use this exact same syntax to mock out Axios earlier in the course, which is a foreign dependency.

56
00:03:36,150 --> 00:03:41,490
It's an NPM library, but we can use this syntax the exact same way to mock out our own imports.

57
00:03:41,640 --> 00:03:47,070
So right here I'm going to provide the exact same file path, the source directory API get jobs.

58
00:03:47,310 --> 00:03:50,550
And now what Jess is going to do is it's going to go into this file.

59
00:03:50,700 --> 00:03:52,920
It's going to find our get jobs function.

60
00:03:52,920 --> 00:03:55,470
And it's going to replace it with a just mock function.

61
00:03:55,710 --> 00:03:59,190
The exact same thing it does for Axios we're doing for our own code.

62
00:03:59,730 --> 00:04:00,060
All right.

63
00:04:00,330 --> 00:04:05,760
So down below, I'm going to create a new describe for to testing our actions.

64
00:04:06,240 --> 00:04:11,100
And that reminds me, of course, that the very top of our file right here where we import our state

65
00:04:11,100 --> 00:04:13,230
and mutations from our index, just file.

66
00:04:13,380 --> 00:04:16,590
I also want to import my actions object.

67
00:04:16,590 --> 00:04:19,440
This is this one right here and we are exporting it so we're good to go.

68
00:04:19,770 --> 00:04:22,350
And right here we can describe our tests for our actions.

69
00:04:22,530 --> 00:04:27,750
And I want to make a separate describe block for our new action, which is fetch jobs.

70
00:04:29,190 --> 00:04:29,830
So there we go.

71
00:04:29,850 --> 00:04:30,690
We're testing that one.

72
00:04:31,410 --> 00:04:35,640
And what I'm going to do immediately, because I anticipate a couple of tests here, is I'm going to

73
00:04:35,640 --> 00:04:36,510
add two before each.

74
00:04:36,930 --> 00:04:41,820
And in the before each I'm going to mock out my get jobs function.

75
00:04:42,000 --> 00:04:45,300
Now, it is already mocked out by just right here.

76
00:04:45,450 --> 00:04:50,910
But as a reminder, the default just implementation of a mock is a asynchronous function that returns

77
00:04:50,910 --> 00:04:51,960
the value undefined.

78
00:04:52,140 --> 00:04:58,230
We want to get a little bit more specific here into how just should fake or mock out our get jobs API

79
00:04:58,230 --> 00:04:58,470
call.

80
00:04:58,800 --> 00:05:00,600
So right here it's going to be get jobs.

81
00:05:00,600 --> 00:05:02,100
It is an asynchronous function.

82
00:05:02,310 --> 00:05:06,960
So you may recall from earlier in the course we can use the method mock resolve value.

83
00:05:08,130 --> 00:05:13,230
And the reason we're able to invoke this method is because this method is available on a just mock function

84
00:05:13,350 --> 00:05:19,260
and get jobs at this point is not our original get jobs function, but rather the just mock function.

85
00:05:19,380 --> 00:05:23,880
This object right here is what we get back when we create one manually.

86
00:05:23,880 --> 00:05:27,810
And this is what just substitutes for get jobs as the test runs.

87
00:05:27,990 --> 00:05:31,740
And there is this object that has the the method called macros all value.

88
00:05:32,130 --> 00:05:37,320
So we want this function to behave like a promise that resolves to a specific value.

89
00:05:37,560 --> 00:05:40,440
So it's going to be very similar to our get jobs function.

90
00:05:40,440 --> 00:05:44,880
It's going to return an array of job objects and for now it's just going to be an array of one object.

91
00:05:44,880 --> 00:05:50,130
We don't need to be complex and let's say I give it an idea of one and a title of software developer.

92
00:05:51,940 --> 00:05:55,990
Really what we are specifying here is what this should return for the purposes of our test.

93
00:05:56,290 --> 00:05:56,650
All right.

94
00:05:57,190 --> 00:05:59,200
And it's going to happen once before each test.

95
00:05:59,200 --> 00:06:03,880
So it's going to run this logic before every test runs in this described lock.

96
00:06:04,240 --> 00:06:07,930
So we're going to add two tests immediately after hour before each right here.

97
00:06:08,260 --> 00:06:13,390
The first thing I'm going to test in regards to our fetch jobs action is that it makes a request to

98
00:06:13,390 --> 00:06:14,170
fetch jobs.

99
00:06:16,540 --> 00:06:21,280
So what I'm going to do here is I, of course, want to take my actions object and I want to invoke

100
00:06:21,280 --> 00:06:23,140
the fetch jobs method on it.

101
00:06:23,290 --> 00:06:24,700
This is what I ultimately want to test.

102
00:06:25,090 --> 00:06:26,560
So a couple of things to note here.

103
00:06:26,770 --> 00:06:29,360
Number one, this is an asynchronous function.

104
00:06:29,380 --> 00:06:34,920
So when I test this, I need to await this method to complete or to resolve.

105
00:06:34,930 --> 00:06:39,820
Otherwise, we're going to continue running our test and we're going to reach the end before this method

106
00:06:39,820 --> 00:06:41,920
resolves and we might get the wrong result.

107
00:06:42,070 --> 00:06:47,440
So I need to basically pause execution until this function is done resolving or doing its asynchronous

108
00:06:47,440 --> 00:06:47,800
action.

109
00:06:48,010 --> 00:06:52,960
Keep in mind our asynchronous action is now our just function, which is going to replace the real world

110
00:06:52,960 --> 00:06:53,530
implementation.

111
00:06:53,680 --> 00:06:58,570
So it will still resolve instantaneously, but it will still pretend to be an asynchronous event.

112
00:06:58,570 --> 00:07:02,410
That takes some amount of time, but it will obviously resolve basically instantaneously.

113
00:07:02,770 --> 00:07:07,780
So I need to use the await keyword right here, and that means I have to make my test function async.

114
00:07:09,190 --> 00:07:14,760
Now, in addition to making this async, I also need to provide an argument to fetch jobs.

115
00:07:14,770 --> 00:07:16,270
I need this context object.

116
00:07:16,300 --> 00:07:16,570
Right.

117
00:07:16,900 --> 00:07:20,590
So what I'm going to do here is I'm just going to create a plain JavaScript object.

118
00:07:21,710 --> 00:07:22,040
Right.

119
00:07:22,220 --> 00:07:25,910
And this should be enough to play the role because we don't need the real world view.

120
00:07:26,120 --> 00:07:26,630
Context.

121
00:07:26,630 --> 00:07:26,950
Object.

122
00:07:26,960 --> 00:07:28,340
We just need one that is good enough.

123
00:07:28,790 --> 00:07:30,950
The only caveat is on this line.

124
00:07:30,950 --> 00:07:35,900
We are invoking the commit method on this object and if we try to reach out to commit on this object

125
00:07:35,900 --> 00:07:38,870
on the right, we're going to get undefined and then we're not going to be able to invoke it.

126
00:07:39,050 --> 00:07:43,370
So I do need some kind of property called Commit, and this can be any kind of function.

127
00:07:43,370 --> 00:07:47,780
We can, for example, make it an arrow function that does nothing, etc. But the easiest thing in this

128
00:07:47,780 --> 00:07:50,600
approach is to simply use another just a mock function.

129
00:07:51,920 --> 00:07:52,250
All right.

130
00:07:52,250 --> 00:07:55,130
So to reiterate, get jobs or it will be adjustment function.

131
00:07:55,280 --> 00:08:00,020
And now our context object will be an object with a single property called Commit, which represents

132
00:08:00,020 --> 00:08:04,910
that just mock function, which behaves like a function that can track its own calls, its own inputs,

133
00:08:04,910 --> 00:08:05,360
etc..

134
00:08:06,050 --> 00:08:06,350
All right.

135
00:08:06,350 --> 00:08:08,480
We just need some kind of object that can play this role.

136
00:08:08,660 --> 00:08:13,730
And all I really care about in this test is this first line that I am making the call to get jobs.

137
00:08:14,030 --> 00:08:16,940
So I'm going to run this logic.

138
00:08:16,940 --> 00:08:17,990
And then what do I want to test?

139
00:08:18,170 --> 00:08:23,840
I want to test that my get jobs function has been invoked, which I can do because get jobs is a mock

140
00:08:23,840 --> 00:08:24,230
function.

141
00:08:24,470 --> 00:08:28,400
So right here I'm going to pass in my get jobs reference which we imported above.

142
00:08:28,700 --> 00:08:31,940
And I'm going to invoke a method called to have been called.

143
00:08:33,170 --> 00:08:38,840
And all that's going to assert on my mock object is that we have had at least one call to this function,

144
00:08:38,840 --> 00:08:40,670
that this function has been invoked at least once.

145
00:08:41,150 --> 00:08:45,410
You may have recall earlier we did two have been called with that as another alternative, but that

146
00:08:45,410 --> 00:08:47,210
is when we want to test that.

147
00:08:47,210 --> 00:08:49,730
We are invoking our mock function with a specific argument.

148
00:08:49,850 --> 00:08:52,430
In this case, get jobs takes no arguments that we don't care.

149
00:08:52,730 --> 00:08:56,210
And of course, I forgot to pass in context right here, if that is what we want to do.

150
00:08:57,020 --> 00:08:57,410
Perfect.

151
00:08:57,740 --> 00:09:02,660
So I'm going to bring up my terminal and let's run this and see what we get.

152
00:09:03,990 --> 00:09:06,810
So right here, I'm going to run, NPM, run, test, call and watch.

153
00:09:09,010 --> 00:09:10,390
Let's see if this fails.

154
00:09:12,060 --> 00:09:14,550
And it passes, which is great.

155
00:09:14,730 --> 00:09:17,810
And if we were using a TDD approach, we would write a test like this.

156
00:09:17,820 --> 00:09:21,750
And when we were starting out, this method, of course would have no implementation.

157
00:09:22,080 --> 00:09:23,450
So it would look something like this.

158
00:09:23,460 --> 00:09:27,600
I'm going to comment out the code and you can see when we come at this out, we get a failure because

159
00:09:27,600 --> 00:09:33,390
it says, hey, I was expecting get jobs to have been called at least once and I'm getting no invocations.

160
00:09:33,540 --> 00:09:35,730
So now the the test is failing.

161
00:09:35,880 --> 00:09:40,470
In fact, simply getting this line in here without the next one is enough to get the test to pass.

162
00:09:40,470 --> 00:09:41,640
And that's exactly what we want.

163
00:09:41,820 --> 00:09:47,130
We want to verify that the function or rather the fetch jobs action makes a request to fetch jobs,

164
00:09:47,220 --> 00:09:50,550
which it does by talking to the get jobs function.

165
00:09:50,850 --> 00:09:51,120
All right.

166
00:09:51,420 --> 00:09:52,560
So that's our very first test.

167
00:09:52,560 --> 00:09:53,490
Let's write our next one.

168
00:09:54,810 --> 00:10:00,690
It's going to send message to save receive jobs in the store.

169
00:10:01,110 --> 00:10:04,830
So here what I want to test is that we are calling the right mutation.

170
00:10:05,760 --> 00:10:07,440
So we're going to follow very similar principle.

171
00:10:07,770 --> 00:10:09,600
We're going to create a context object.

172
00:10:10,520 --> 00:10:12,290
And inside I'm going to have a commit.

173
00:10:13,370 --> 00:10:15,020
I properly set to a just function.

174
00:10:15,200 --> 00:10:19,010
I'm going to save this just function to its own separate, constant, because we're going to need to

175
00:10:19,010 --> 00:10:19,790
reference it later.

176
00:10:20,150 --> 00:10:23,720
So right here I'll do a constant called commit and that will just be my just function.

177
00:10:24,260 --> 00:10:28,520
I will provide that object to the context object as a commit property.

178
00:10:28,880 --> 00:10:31,060
Then what I'm going to do is copy this code from above.

179
00:10:31,070 --> 00:10:35,420
I'm going to actually run my asynchronous action and wait until it's complete, which means I need to

180
00:10:35,420 --> 00:10:36,890
make this an asynchronous call.

181
00:10:37,160 --> 00:10:37,760
There we go.

182
00:10:38,240 --> 00:10:38,680
All right.

183
00:10:38,720 --> 00:10:40,200
And then what do I want to test?

184
00:10:40,220 --> 00:10:43,460
I want to test this line right here that I have invoked.

185
00:10:43,460 --> 00:10:46,910
Commit on my context object and pass that the right arguments.

186
00:10:47,090 --> 00:10:52,250
Well, now, when I run this logic, my commit method on this object is a just function.

187
00:10:52,550 --> 00:10:58,280
So I can simply expect that I'm going to have invoked the right argument, the right method on on my

188
00:10:58,280 --> 00:11:00,980
object, which is commit and I've passed the right arguments.

189
00:11:01,220 --> 00:11:04,760
So I expect commit my method to have been called with.

190
00:11:05,960 --> 00:11:08,270
And what two arguments do I expect?

191
00:11:08,270 --> 00:11:12,470
Again, the first is going to be the string of receive jobs, because that is my constant.

192
00:11:13,070 --> 00:11:17,570
And the second argument of course, is going to be job listings, which represents the return value

193
00:11:17,570 --> 00:11:18,410
of get jobs.

194
00:11:18,650 --> 00:11:24,650
Well, earlier on in our before we specified that get jobs is going to resolve to be this array.

195
00:11:24,890 --> 00:11:29,030
So this is the exact same thing that I want to provide right here.

196
00:11:29,030 --> 00:11:29,930
Here's my second argument.

197
00:11:30,320 --> 00:11:33,530
The key takeaway here is I don't really care what this is.

198
00:11:33,920 --> 00:11:36,830
All I really care about is whatever data structure this is.

199
00:11:37,040 --> 00:11:40,970
I want the commit method to be invoked with that as the second argument.

200
00:11:41,120 --> 00:11:44,000
That is the core crux and what this method is responsible for.

201
00:11:44,180 --> 00:11:45,710
So this could be an array of three items.

202
00:11:45,710 --> 00:11:46,850
It can be an array of one item.

203
00:11:46,970 --> 00:11:47,930
I don't care.

204
00:11:47,930 --> 00:11:50,060
It's up to you to specify how you'd like it to work.

205
00:11:50,300 --> 00:11:55,160
All I really care about is that the exact same thing that get jobs gives back to me is what I want to

206
00:11:55,160 --> 00:11:58,490
pass on to my commit method on my context object.

207
00:11:58,700 --> 00:12:02,180
And I also want to make sure I provide the first argument of receive jobs.

208
00:12:02,410 --> 00:12:04,970
I'm going to save that everything is passing.

209
00:12:04,970 --> 00:12:05,720
Let me show you that.

210
00:12:05,720 --> 00:12:10,170
If I get rid of this line, if we are following it to the approach, we would get the exact right failure.

211
00:12:10,460 --> 00:12:12,170
So right here we can see we have a problem.

212
00:12:12,320 --> 00:12:13,490
We're going to tell the test.

213
00:12:13,700 --> 00:12:19,850
Hey, we expect the commit method to have been called one or more times and we expected these arguments

214
00:12:20,060 --> 00:12:22,730
and just is going to tell us, hey, I never received any call.

215
00:12:22,730 --> 00:12:24,140
You never called commit, right?

216
00:12:24,440 --> 00:12:30,350
Similarly, if I go back to my original code but I remove my arguments, well then I am going to successfully

217
00:12:30,350 --> 00:12:32,090
call commit, but not with the right arguments.

218
00:12:32,330 --> 00:12:34,400
So now you're going to see my test output will be different.

219
00:12:34,610 --> 00:12:39,950
We're going to say I received that argument, the function was called, but you called it with zero

220
00:12:39,950 --> 00:12:42,590
arguments and I expected it to be called with these two.

221
00:12:42,920 --> 00:12:45,530
Similarly, if I provide, I receive jobs.

222
00:12:45,530 --> 00:12:46,580
Here is my first argument.

223
00:12:47,420 --> 00:12:51,260
Our new output will say, Hey, you gave me the correct first argument.

224
00:12:51,260 --> 00:12:57,590
I've received jobs, but I was expecting a second argument of this array of job listings that you that

225
00:12:57,590 --> 00:12:59,480
we expect to get back from get jobs.

226
00:12:59,480 --> 00:12:59,690
Right.

227
00:12:59,930 --> 00:13:03,860
So this is a good sign that our test is doing what it's supposed to do because it's catching all of

228
00:13:03,860 --> 00:13:06,560
those edge cases, all those ways of this code can go wrong.

229
00:13:06,980 --> 00:13:12,380
So going to save our original code and everything is passing and that is how we test the asynchronous

230
00:13:12,380 --> 00:13:14,390
action that we defined in the previous lesson.

231
00:13:14,750 --> 00:13:15,080
All right.

232
00:13:15,350 --> 00:13:19,550
So now we've wired up this asynchronous functionality, and we're going to see how we can use it in

233
00:13:19,550 --> 00:13:20,180
the next lesson.
