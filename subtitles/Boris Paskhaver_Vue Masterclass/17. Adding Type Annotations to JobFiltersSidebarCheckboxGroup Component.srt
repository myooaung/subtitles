1
00:00:00,870 --> 00:00:01,770
Okay.

2
00:00:01,770 --> 00:00:07,530
So the next component that we're going to target is going to be job filter side checkbox group.

3
00:00:07,950 --> 00:00:12,630
So this is the component that we were rendering in the previous lesson in our job filter sidebar.

4
00:00:12,870 --> 00:00:18,390
This is the one that actually iterates over that set of unique values and render is a checkbox for each

5
00:00:18,390 --> 00:00:18,630
one.

6
00:00:18,960 --> 00:00:23,970
And I promised this time around that when we convert this component to use TypeScript, we are going

7
00:00:23,970 --> 00:00:28,260
to discover some new problems that we're going to have to figure out over the course of the next couple

8
00:00:28,260 --> 00:00:28,680
of lessons.

9
00:00:29,040 --> 00:00:31,380
With that said, let's go through our usual protocol.

10
00:00:31,410 --> 00:00:34,170
So right here script is going to have a lang attribute set.

11
00:00:34,170 --> 00:00:40,440
It's and right here I'm going to import define component, make sure to import that from the view library.

12
00:00:40,740 --> 00:00:45,930
And right here I'm going to invoke defined component and pass in my actual configuration object.

13
00:00:46,410 --> 00:00:52,230
And when I finish with this parentheses and save, it looks like apparently there are no issues, but

14
00:00:52,230 --> 00:00:54,390
there is actually an issue that is hiding.

15
00:00:54,660 --> 00:00:58,440
Take a look at what happens when I hover my mouse over the store constant.

16
00:00:58,650 --> 00:01:02,790
Now, of course, my expectation is I should be getting back the View store.

17
00:01:02,940 --> 00:01:05,130
And that store has of course many properties.

18
00:01:05,130 --> 00:01:10,620
It has the state property, it has getters, and within the state property it has the specific view

19
00:01:10,770 --> 00:01:12,720
store state that is custom to my app.

20
00:01:13,170 --> 00:01:17,490
So unfortunately, when I hover my mouse over store, we're going to see it's going to have the top

21
00:01:17,490 --> 00:01:21,020
level store type, which is actually coming from view X.

22
00:01:21,240 --> 00:01:27,690
But unfortunately that internal generic which says any does not actually have my actual interface for

23
00:01:27,690 --> 00:01:28,260
my store.

24
00:01:28,500 --> 00:01:34,890
As a reminder, if I go into my store index that's filed, bringing this over to the right, remember

25
00:01:34,890 --> 00:01:39,570
that here we are actually configuring create storage, rely on that interface called Global State,

26
00:01:39,840 --> 00:01:40,110
remember?

27
00:01:40,110 --> 00:01:43,650
And that is the interface that actually has the four properties that our state actually needs.

28
00:01:43,650 --> 00:01:47,400
So if I go, for example, I think it was our types file in the store directory.

29
00:01:47,760 --> 00:01:49,890
This is the actual interface for my store.

30
00:01:49,890 --> 00:01:55,050
It has these four properties, is logged in jobs, selected organizations and selected job types.

31
00:01:55,320 --> 00:02:01,170
And even though we properly have that configuration being inferred right here when we configure the

32
00:02:01,170 --> 00:02:03,690
store in the index data.

33
00:02:03,700 --> 00:02:10,380
So unfortunately when we use the use store function from view X in our actual component, it doesn't

34
00:02:10,380 --> 00:02:12,390
seem to be interpreting this information.

35
00:02:12,390 --> 00:02:16,800
It doesn't seem to be understanding that it has a more specific store than simply any.

36
00:02:17,070 --> 00:02:21,870
In other words, what I want to happen is I want it to recognize that it has a store that wraps our

37
00:02:21,870 --> 00:02:23,190
global state interface.

38
00:02:23,400 --> 00:02:28,440
So that way it can validate that when we access properties on our store, in our component, they must

39
00:02:28,440 --> 00:02:35,190
be of these types and also, you know, go one level down, which means not just that you have a property

40
00:02:35,190 --> 00:02:40,710
called jobs, but that jobs is an array of job objects, each with their own individual valid properties.

41
00:02:40,860 --> 00:02:45,630
Because if we lose this connection whenever we use you store, then we lose all the benefits of this

42
00:02:45,630 --> 00:02:47,460
type checking within our component.

43
00:02:47,610 --> 00:02:51,960
And there are many components throughout our app that are using the use store composable function.

44
00:02:52,260 --> 00:02:56,400
So starting in the next lesson, I'm going to take you to the Official View documentation and show you

45
00:02:56,400 --> 00:03:02,220
the recommended approach that's going to be able to associate together our actual custom store interface

46
00:03:02,220 --> 00:03:02,640
right here.

47
00:03:02,640 --> 00:03:07,980
Global State with the use of the use store composable function from the U.S. We'll start tackling this

48
00:03:07,980 --> 00:03:10,020
problem in the very next lesson, and I'll see you there.
