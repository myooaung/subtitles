WEBVTT
1
00:00:00.420 --> 00:00:01.260
Okay.

2
00:00:01.260 --> 00:00:06.810
So the next thing that we need to do is to install another NPM library called Axios.

3
00:00:06.990 --> 00:00:11.520
Axios is an NPM library for making HTTP requests.

4
00:00:11.760 --> 00:00:17.550
So now that we have our fake back and set up, we need some kind of library that we're going to use

5
00:00:17.550 --> 00:00:18.210
in view.

6
00:00:18.360 --> 00:00:23.100
In order to hit this end point, we need a library on the view side of things.

7
00:00:23.220 --> 00:00:28.320
That's going to make a request out to the Internet or to some endpoint at least, which is going to

8
00:00:28.320 --> 00:00:30.690
be this one in order to fetch that data.

9
00:00:30.900 --> 00:00:32.850
So keep this server running.

10
00:00:32.850 --> 00:00:34.960
Keep this terminal tab running as is.

11
00:00:34.980 --> 00:00:38.300
Don't shut it down and open up a new terminal on a mac.

12
00:00:38.310 --> 00:00:43.830
I can do that with command t I believe on windows it might be controlled t and if you can't find it,

13
00:00:43.830 --> 00:00:48.060
you can go into the settings, like the settings up here usually or on the start menu.

14
00:00:48.060 --> 00:00:51.750
And you should find some kind of option to create a new tab or a new window.

15
00:00:51.930 --> 00:00:56.580
The reason we need to do this is because we still need this server and this process running in the background

16
00:00:56.730 --> 00:00:57.780
for what we're about to do.

17
00:00:58.140 --> 00:01:04.080
So here in the job search project directory, I'm going to run my NPM install command again and I'm

18
00:01:04.080 --> 00:01:07.800
going to add the dash dash save flag to save it to my project dependencies.

19
00:01:08.070 --> 00:01:12.750
And the library is called Axios Axios.

20
00:01:13.140 --> 00:01:16.560
So press enter here and that will go ahead and fetch Axios.

21
00:01:17.430 --> 00:01:22.440
And once we're good there, we can transition back to voice code, make sure again to keep this server

22
00:01:22.440 --> 00:01:28.680
running because we do need it to be live in order for us to have a endpoint that we can hit on the JavaScript

23
00:01:28.680 --> 00:01:30.180
side of things to get that data.

24
00:01:30.180 --> 00:01:33.600
So keep the JSON server running and head to this code.

25
00:01:34.050 --> 00:01:38.970
And the first place I'd like to go is actually to our experimental playground JS file.

26
00:01:39.240 --> 00:01:44.460
As a reminder, this is a file where we just play around with JavaScript and view concepts outside of

27
00:01:44.610 --> 00:01:45.240
our view app.

28
00:01:45.390 --> 00:01:50.190
And the reason I want to do it here is I just want to show you how Axios works in case you haven't worked

29
00:01:50.190 --> 00:01:50.910
with it before.

30
00:01:50.910 --> 00:01:56.250
So if you have any code in this file from previous lessons, feel free to delete it and let's take a

31
00:01:56.250 --> 00:01:57.930
look at how Axios operates.

32
00:01:58.230 --> 00:02:03.360
So what I'm going to do is first import the Axios library and I'm going to use the old import syntax

33
00:02:03.570 --> 00:02:08.670
because this import syntax is not guaranteed to be supported in your JavaScript file or your node version.

34
00:02:08.850 --> 00:02:11.160
It is supported in our view app.

35
00:02:11.160 --> 00:02:17.310
But that is because Webpack is transpiring in a plain JavaScript file that we're going to run with Node.

36
00:02:17.460 --> 00:02:20.040
There's no guarantee yet that this syntax is going to work.

37
00:02:20.340 --> 00:02:22.890
So the way we're going to import Axios is going to be like this.

38
00:02:22.890 --> 00:02:27.610
I'm going to declare a constant called Axios and we're going to use the built in require keyboard,

39
00:02:27.630 --> 00:02:30.420
keyword and import the Axios library.

40
00:02:31.190 --> 00:02:35.690
The next thing that I'd like to do is define the URL that we'd like Axios to hit.

41
00:02:35.690 --> 00:02:40.880
So right here I'll define a new constant called the URL, and we're going to set that to the exact same

42
00:02:40.880 --> 00:02:43.370
URL we hit in Chrome in the previous lesson.

43
00:02:43.370 --> 00:02:51.050
So http colon slash slash local host colon, 3000 slash jobs.

44
00:02:51.140 --> 00:02:52.400
That is our URL.

45
00:02:52.400 --> 00:02:55.070
That is our one endpoint that we set up with JSON server.

46
00:02:55.460 --> 00:03:01.970
So now in order to get Axios to hit that URL to make that request, just like our browser does, we

47
00:03:01.970 --> 00:03:09.170
call a method on the Axios object called Get, and that makes a get request to a given URL.

48
00:03:09.440 --> 00:03:13.250
So I'm going to invoke that method and it expects an argument of the URL.

49
00:03:13.460 --> 00:03:18.230
So right here, I'm going to provide of course, our URL constant that references that string and that

50
00:03:18.230 --> 00:03:19.640
is going to fetch the request.

51
00:03:19.910 --> 00:03:23.480
The way it's going to work is the get method is going to return a promise.

52
00:03:23.720 --> 00:03:27.980
The reason it's going to return a promise is because this is an asynchronous operation.

53
00:03:27.980 --> 00:03:31.190
There is no guarantee how quickly the server will respond.

54
00:03:31.190 --> 00:03:34.670
It can take 5 seconds, it can take 1/2, it could take a 10th of a second.

55
00:03:34.850 --> 00:03:39.500
And the reason we use promises is whenever we have some operation that may take some amount of time

56
00:03:39.680 --> 00:03:44.210
and we want to tell JavaScript what to do when it is able to get to the next step.

57
00:03:44.210 --> 00:03:48.680
When the original operation completes, then we want it to run some additional code.

58
00:03:48.980 --> 00:03:51.590
So we're receiving a promise object here.

59
00:03:51.710 --> 00:03:58.400
And on that promise object we have a then method and to that Z method we provide a argument of a function

60
00:03:58.550 --> 00:04:04.070
that represents what to do when the promise resolves, or in other words, when the request completes.

61
00:04:04.370 --> 00:04:06.770
So we can provide an arrow function here in line.

62
00:04:08.260 --> 00:04:15.400
And what Axios is going to provide to us from this new URL is is a special object that we call a response

63
00:04:15.400 --> 00:04:15.910
object.

64
00:04:15.910 --> 00:04:20.050
So I'm going to type that object in here as the parameter to my arrow function.

65
00:04:20.620 --> 00:04:24.700
And that response object does store our data that we got from this end point.

66
00:04:24.700 --> 00:04:31.480
But it also stores other information such as the response status, such as metadata headers, all this

67
00:04:31.480 --> 00:04:34.030
additional details about how the request actually went.

68
00:04:34.450 --> 00:04:39.520
But on this object, the way that we can get the actual response from the server, the actual array

69
00:04:39.520 --> 00:04:42.910
of jobs themselves is by accessing the data property.

70
00:04:43.150 --> 00:04:47.530
So on response on that object, there's going to be a data property.

71
00:04:47.650 --> 00:04:53.560
And if I console.log that that should show us the array of jobs that we set up in DB, that JSON.

72
00:04:53.650 --> 00:04:54.070
All right.

73
00:04:54.310 --> 00:04:56.530
So now that we have this file set up, we can run it.

74
00:04:56.860 --> 00:04:59.800
So I'm going to open up my terminal here in V code.

75
00:05:00.910 --> 00:05:05.560
And I'm going to run Node followed by my file name, which is in the source directory.

76
00:05:05.710 --> 00:05:07.810
So node source, playground.

77
00:05:07.810 --> 00:05:09.610
Jasper All right.

78
00:05:09.610 --> 00:05:14.170
And there is it was a little bit slow at the very beginning as it made its request, and then it received

79
00:05:14.170 --> 00:05:16.630
the data from the back end and printed it out.

80
00:05:16.630 --> 00:05:21.430
So right here, as an example, we have those jobs that we set up in DB, that JSON.

81
00:05:21.580 --> 00:05:22.360
So what happened?

82
00:05:22.450 --> 00:05:25.660
Our Axios library made a request to this URL.

83
00:05:25.840 --> 00:05:27.010
It got the data.

84
00:05:27.010 --> 00:05:31.960
It wrapped it up in this response object and then we printed it out to the screen using console.log.

85
00:05:32.140 --> 00:05:38.260
So here is data that we are getting from an end point from what is effectively a URL or a location on

86
00:05:38.260 --> 00:05:39.400
the internet in the real world.

87
00:05:39.550 --> 00:05:42.490
Except of course, our server is running on our computer.

88
00:05:42.670 --> 00:05:47.410
So we basically made a request from our computer to our computer, but it hopefully demonstrates the

89
00:05:47.410 --> 00:05:50.350
purpose or the syntax of how Axios works.

90
00:05:50.560 --> 00:05:55.480
So now that we understand how Axios works in isolation, we can incorporate it into a view component

91
00:05:55.480 --> 00:05:56.530
in the very next lesson.
