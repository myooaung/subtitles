WEBVTT
1
00:00:00.300 --> 00:00:04.950
In this lesson, I'd like to introduce you to another view directive called V.

2
00:00:04.950 --> 00:00:10.650
If the v f directive allows us to conditionally render a chunk of time out.

3
00:00:10.950 --> 00:00:17.130
So the easiest way to describe it is like an if statement in JavaScript but applied to our template.

4
00:00:17.430 --> 00:00:24.900
In other words, we can render a bit of HTML, but only if a condition is met, only if some condition

5
00:00:24.900 --> 00:00:25.500
is true.

6
00:00:25.770 --> 00:00:32.010
So this allows us to dynamically inject little sections within our channel that we can render on a certain

7
00:00:32.010 --> 00:00:35.370
condition or a certain criteria, but not all the time.

8
00:00:35.580 --> 00:00:40.920
And that allows us, of course, to have really dynamic components in addition, because we're typically

9
00:00:40.920 --> 00:00:44.580
going to assign this VRF directive to some bit of our data.

10
00:00:44.760 --> 00:00:51.330
As our data changes, we can dynamically introduce new chunks of each channel into our existing component.

11
00:00:51.330 --> 00:00:56.160
We can make new elements appear on the screen when some kind of condition is met.

12
00:00:56.550 --> 00:00:56.780
Right.

13
00:00:56.790 --> 00:00:57.960
Very, very interesting stuff.

14
00:00:58.290 --> 00:01:00.630
So here I have my main nav component.

15
00:01:00.840 --> 00:01:05.130
And what I want to do in this component is add a new property to our data object.

16
00:01:05.130 --> 00:01:09.900
So I'm going to scroll down here and we have here our company, our URL, our menu items.

17
00:01:10.050 --> 00:01:14.060
I want to add a new property and I'm going to call it is logged in.

18
00:01:14.340 --> 00:01:19.590
So this is going to be the part of data in our main nav component that's going to keep track of whether

19
00:01:19.590 --> 00:01:23.880
the user has logged in or not and how do we know if the user has logged in.

20
00:01:24.120 --> 00:01:28.950
That happens when the user clicks our eventual action button, right?

21
00:01:29.100 --> 00:01:31.400
And then when they click the button, they are logged in.

22
00:01:31.410 --> 00:01:33.690
That's when we want to show the profile image.

23
00:01:33.930 --> 00:01:39.060
So when the page loads or when the app starts up, our user is not logged in.

24
00:01:39.210 --> 00:01:42.180
So I'm going to assign this a starting value of false.

25
00:01:43.410 --> 00:01:43.890
All right.

26
00:01:44.190 --> 00:01:45.990
So now I'm going to scroll up here.

27
00:01:46.290 --> 00:01:52.050
I'm going to go back to my action button component, and I'm going to apply this very directive.

28
00:01:52.230 --> 00:01:55.620
We can apply the V of directive to any HTML element.

29
00:01:55.620 --> 00:02:02.280
For example, we could use this directive on the div above, or we can also use it on any view component

30
00:02:02.280 --> 00:02:02.880
in this case.

31
00:02:02.910 --> 00:02:06.570
Action button is our own component, but it works the exact same way.

32
00:02:06.870 --> 00:02:12.090
So the way it works is we provide an equal sign here in double quotes, and then we put some kind of

33
00:02:12.090 --> 00:02:17.370
criteria in here, some kind of boolean or evaluation that will evaluate to a boolean.

34
00:02:17.610 --> 00:02:23.250
So I can literally, for example, put the word true here and it's going to say render the action button

35
00:02:23.280 --> 00:02:24.750
if this condition is met.

36
00:02:24.900 --> 00:02:27.540
In this case, the condition is true, which is always true.

37
00:02:27.660 --> 00:02:30.180
So this action will, of course, always render.

38
00:02:30.420 --> 00:02:36.930
And similarly, if this value is false, then the action button would never render because it's saying

39
00:02:36.930 --> 00:02:37.770
only render.

40
00:02:37.890 --> 00:02:41.340
If this is true and this is now always false, it's hardcoded.

41
00:02:41.610 --> 00:02:44.820
And what's interesting is we can put any kind of Boolean expression here.

42
00:02:45.060 --> 00:02:48.450
So rather than just hard coding, true and false, we can do something like this.

43
00:02:48.750 --> 00:02:52.560
Render the action button if five is greater than three.

44
00:02:52.800 --> 00:02:57.300
In this case, this is a mathematical evaluation that evaluates to true.

45
00:02:57.330 --> 00:03:00.090
So in this case, it evaluates to a hardcoded true.

46
00:03:00.090 --> 00:03:01.950
And we're always going to render the action button.

47
00:03:02.280 --> 00:03:08.910
But if we connect this v f to some bit of our data and we can change our data, which will show how

48
00:03:08.910 --> 00:03:09.480
did you later.

49
00:03:09.660 --> 00:03:15.900
Then we're able to dynamically alter the boolean that gets populated here and thus dynamically alter

50
00:03:15.900 --> 00:03:19.290
whether or not the action button component appears in our view.

51
00:03:19.680 --> 00:03:26.910
So what I want to do here is I want to connect this V if conditional to my is logged in property so

52
00:03:26.910 --> 00:03:28.860
I'm going to start by typing in is logged in.

53
00:03:29.460 --> 00:03:34.710
But of course this is not perfectly correct because we don't want to render the action by if the user

54
00:03:34.710 --> 00:03:35.640
is logged in.

55
00:03:35.760 --> 00:03:37.440
We want to render the action button.

56
00:03:37.620 --> 00:03:42.210
If the user is not logged in, when they're not logged in, we render the button.

57
00:03:42.360 --> 00:03:45.480
And when they are logged in, we render their profile image.

58
00:03:45.690 --> 00:03:50.220
So what I'm going to do here is just put a exclamation point in front of this property that's going

59
00:03:50.220 --> 00:03:51.570
to invert the Boolean.

60
00:03:51.870 --> 00:03:56.640
So when this component starts up, the value of is logged in is going to be false.

61
00:03:56.850 --> 00:04:02.130
We're going to convert it to true, which means the VRF is going to have a value of true, which means

62
00:04:02.130 --> 00:04:05.910
it is going to render the action button in our browser upon page load.

63
00:04:06.090 --> 00:04:11.160
And of course all of this is setting up for an eventual state where we will toggle the is logged in

64
00:04:11.160 --> 00:04:14.760
property in order to toggle the appearance of the action button component.

65
00:04:15.030 --> 00:04:19.290
But for now, let's go to our browser and see how this is playing out in our actual view.

66
00:04:19.950 --> 00:04:22.110
And to show this I'm going to bring up my view.

67
00:04:22.140 --> 00:04:26.970
DevTools So I'm going to bring this up and I'm going to bring up my view DevTools And I'm going to click

68
00:04:26.970 --> 00:04:32.040
into my main nav component and we can see that our is logged in property is set to false.

69
00:04:32.250 --> 00:04:38.430
Remember we are inverting that so it's evaluating to true and thus because action is connected to a

70
00:04:38.480 --> 00:04:39.600
V, it's true.

71
00:04:39.930 --> 00:04:44.220
It appears here on our screen and it appears right here in our view.

72
00:04:44.220 --> 00:04:46.500
Dev Tools component, hierarchy, tree.

73
00:04:46.800 --> 00:04:51.990
So what's going to happen if I go to Main NAV and I flip the value of is logged in so I'm going to click

74
00:04:51.990 --> 00:04:57.480
this checkbox that's going to toggle is logged into true and immediately you're going to see the action

75
00:04:57.480 --> 00:05:01.620
button disappear from here and also disappear from our view component tree.

76
00:05:01.860 --> 00:05:06.750
So what's happening here is this value is true, which means when we invert it with the exclamation

77
00:05:06.750 --> 00:05:12.660
point, it is now false in our AVF and because the V of sees the false, it says I'm not rendering whatever

78
00:05:12.660 --> 00:05:14.100
it is that you've attached me to.

79
00:05:14.370 --> 00:05:17.460
In that case, we've attached our view to an action button.

80
00:05:17.580 --> 00:05:21.350
So it says You've given me a false so I am not rendering this action button.

81
00:05:21.510 --> 00:05:27.480
And you can see as I toggle this bit of data back and forth, we can see the button appear in and out.

82
00:05:27.720 --> 00:05:29.340
And that is the power of view.

83
00:05:29.340 --> 00:05:34.800
That is the power of connecting some bit of dynamic data, some bit of JavaScript to our template.

84
00:05:35.430 --> 00:05:35.670
Right?

85
00:05:35.670 --> 00:05:41.280
We're now bringing in this idea of conditional code, if else code, right, branch code, conditionals,

86
00:05:41.490 --> 00:05:42.960
different pathways of execution.

87
00:05:43.140 --> 00:05:49.650
But we are tying that JavaScript logic in view to actual HTML syntax that we see in the template.

88
00:05:49.800 --> 00:05:54.690
All right, so this is a good start to show or hide our actual action button.

89
00:05:54.780 --> 00:06:01.140
And now in the next lesson, we can go ahead and incorporate it with our actual profile image component.

90
00:06:01.350 --> 00:06:02.280
So I will see you there.
