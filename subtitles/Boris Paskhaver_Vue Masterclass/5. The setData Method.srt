1
00:00:01,020 --> 00:00:07,100
In this lesson, I'd like to show you one more way that we can change the data of our view component

2
00:00:07,110 --> 00:00:08,160
in a test.

3
00:00:08,430 --> 00:00:11,100
We saw the first way to do this in the previous lesson.

4
00:00:11,250 --> 00:00:17,940
We can provide a second argument to the Mount function with our own data method that can return whatever

5
00:00:17,940 --> 00:00:19,350
property values we want.

6
00:00:19,680 --> 00:00:25,650
Well, an alternative approach is to set the data of our component after it has already been mounted.

7
00:00:25,950 --> 00:00:32,970
So after I mount my component, what I can do is call a method on my wrapper object called set data.

8
00:00:33,300 --> 00:00:35,580
Pretty appropriate name for what we're trying to do here.

9
00:00:35,880 --> 00:00:39,210
So I'm going to invoke set data and I'm going to feed in a plain object.

10
00:00:39,390 --> 00:00:42,630
And this effectively represents the new data object.

11
00:00:42,840 --> 00:00:47,970
So for example, I can use any properties here that exist in my regular main nav component.

12
00:00:48,240 --> 00:00:54,660
So I may want to change, for example, the value of the company property to Super Corp.

13
00:00:55,830 --> 00:01:02,550
And my expectation of course is since I am rendering or interpolating the value of company in my HTML,

14
00:01:02,790 --> 00:01:08,940
it's reasonable to expect that the text within my component will feature the text super core.

15
00:01:09,450 --> 00:01:13,680
So I think this is a pretty reasonable way to think about running a test like this, but we're going

16
00:01:13,680 --> 00:01:16,830
to see it's not going to work out quite like we expect.

17
00:01:17,130 --> 00:01:19,590
So let's see what happens when I actually run this test.

18
00:01:19,590 --> 00:01:25,530
So I'm going to run NPM, run test, colon unit and we're going to see that we're going to raise an

19
00:01:25,530 --> 00:01:27,240
actual error or a failure.

20
00:01:27,270 --> 00:01:32,940
So if I scroll up here, you can see that we expected to receive Super Corp, but we're actually receiving

21
00:01:32,940 --> 00:01:34,350
the string bubble careers.

22
00:01:34,650 --> 00:01:41,280
Bubble careers, as a reminder, is the original value of the company property in my main nav component

23
00:01:41,280 --> 00:01:42,840
in the actual implementation.

24
00:01:43,110 --> 00:01:46,470
So it's almost like this code right here didn't work.

25
00:01:46,770 --> 00:01:48,150
So what's going on here?

26
00:01:49,020 --> 00:01:54,210
So this is our first introduction to asynchronous tests and asynchronous operations.

27
00:01:54,510 --> 00:01:58,050
The set data method is an example of an async method.

28
00:01:58,320 --> 00:02:01,710
That means it takes some amount of time to run.

29
00:02:01,710 --> 00:02:02,880
It's not instantaneous.

30
00:02:03,180 --> 00:02:08,070
The wrapper needs to go inside the view component, change a certain property, perhaps re render the

31
00:02:08,070 --> 00:02:11,010
internals of that component in order to reflect those changes.

32
00:02:11,010 --> 00:02:13,470
And that operation takes some amount of time.

33
00:02:13,830 --> 00:02:19,380
So what actually happens here is when we call set data, the test doesn't wait for that to complete

34
00:02:19,620 --> 00:02:21,390
before it continues running.

35
00:02:21,390 --> 00:02:24,660
The operation does not block the next line of code from executing.

36
00:02:24,930 --> 00:02:30,660
So as this method is still running and executing the logic, or rather you can think of it as we've

37
00:02:30,660 --> 00:02:36,780
issued the method or the or the call to our wrapper to change and it's doing something behind the scenes.

38
00:02:37,020 --> 00:02:43,380
But before it's done, finishing all of that operation, we're already running the next line and before

39
00:02:43,380 --> 00:02:47,040
the wrappers finished changing the values in the component.

40
00:02:47,250 --> 00:02:53,220
The values are still bubble careers as far as the company property and the value that we are rendering

41
00:02:53,220 --> 00:02:54,030
enraged him out.

42
00:02:54,300 --> 00:03:00,750
So in other words, this operation is not done running in time, so we still have the old value within

43
00:03:00,750 --> 00:03:01,980
my wrapper text.

44
00:03:02,340 --> 00:03:09,270
So what we need to do is tell our tests to wait until this entire operation completes before we evaluate

45
00:03:09,270 --> 00:03:10,470
the next line.

46
00:03:10,680 --> 00:03:16,800
Because only when this is done will the actual value inside our template be Super Corp and thus the

47
00:03:17,010 --> 00:03:21,630
component and the wrappers text will then change to reflect that.

48
00:03:21,930 --> 00:03:24,600
So what I need to do is make this an async function.

49
00:03:24,810 --> 00:03:27,480
So I'm going to make the test async right here.

50
00:03:27,480 --> 00:03:32,550
It's going to be async before the function that we feed in as the second argument to it.

51
00:03:32,820 --> 00:03:37,290
And then we use the await keyword in front of the asynchronous operation.

52
00:03:37,290 --> 00:03:40,320
So in this case it is awaiting wrapper.

53
00:03:40,320 --> 00:03:41,130
That said data.

54
00:03:41,160 --> 00:03:46,320
What we're basically saying is wait until this completes before you move on to the next line.

55
00:03:46,440 --> 00:03:46,770
All right.

56
00:03:47,010 --> 00:03:52,500
So when I execute this test now, we should see the result that we expect.

57
00:03:53,430 --> 00:03:53,820
Perfect.

58
00:03:54,060 --> 00:03:55,560
So that takes care of that issue.

59
00:03:55,560 --> 00:03:58,410
And that is our first introduction to async await.

60
00:03:58,650 --> 00:04:03,450
With that said, just like in the previous lesson, I'm going to attack the fundamentals of this test

61
00:04:03,450 --> 00:04:06,750
a little bit and tell you about why I'm not a fan of this approach.

62
00:04:07,080 --> 00:04:12,800
The reason why I don't like this is because we are artificially triggering a change in the component

63
00:04:12,810 --> 00:04:14,960
in this case in the data of the component.

64
00:04:14,970 --> 00:04:15,270
Right.

65
00:04:15,570 --> 00:04:16,740
So why is this a problem?

66
00:04:16,980 --> 00:04:22,530
It's because we're not using the component in the way that the user of our site would actually use it.

67
00:04:22,530 --> 00:04:22,890
Right.

68
00:04:22,920 --> 00:04:24,900
This is an artificial interaction.

69
00:04:24,900 --> 00:04:26,490
This is an internal detail.

70
00:04:27,420 --> 00:04:32,490
This is a method that we know about, a wrapper that we can change in our tests that are views that

71
00:04:32,490 --> 00:04:34,080
our user has no clue about.

72
00:04:34,230 --> 00:04:37,980
This is functionality that doesn't actually exist in our main NAV component.

73
00:04:37,980 --> 00:04:42,570
Yet we have offered the user no way to change the internal data of May now.

74
00:04:42,690 --> 00:04:47,370
We're starting out with a company property and for now it is always equal to bubble careers.

75
00:04:47,490 --> 00:04:48,780
So that is what the user sees.

76
00:04:49,020 --> 00:04:53,880
So we are interacting with the component in a way that is not reflective of the real world.

77
00:04:54,090 --> 00:04:59,640
And of course, the closer that our tests come to the real world, the closer that they come to how

78
00:04:59,640 --> 00:05:04,140
the users actually interact with our components, the better, because that ensures that we're actually

79
00:05:04,140 --> 00:05:09,480
testing something that is real, that is tangible, that is how the user actually interacts with this

80
00:05:09,480 --> 00:05:09,930
component.

81
00:05:10,260 --> 00:05:16,470
So while we do have options like the set data method and the second argument to mount, I dislike them

82
00:05:16,470 --> 00:05:18,030
both for the same reason.

83
00:05:18,030 --> 00:05:23,010
They are artificial changes to our component and we want to be able to trigger those changes just like

84
00:05:23,010 --> 00:05:24,020
the user would.

85
00:05:24,030 --> 00:05:24,330
Right.

86
00:05:24,540 --> 00:05:29,550
It's the difference between clicking a button, which is something the user might do versus calling

87
00:05:29,550 --> 00:05:34,110
some kind of arbitrary method on an object which only we as developers can do.

88
00:05:34,110 --> 00:05:34,440
Right.

89
00:05:34,740 --> 00:05:38,880
So for that example, again, I think that this test is a little overkill.

90
00:05:39,450 --> 00:05:44,790
And typically, similarly, you want to write this with TDD because you would never expect or know in

91
00:05:44,790 --> 00:05:47,640
advance what the implementation of your component would be.

92
00:05:47,640 --> 00:05:53,410
And thus you wouldn't know that you would incorporate the company as part of the data method.

93
00:05:53,430 --> 00:05:57,600
It might be again, just simply hardcoded into the into the HTML.

94
00:05:57,600 --> 00:06:02,550
So you would never invoke a method like this accidentally in a TDD test because you would have no clue

95
00:06:02,640 --> 00:06:04,140
where the actual information would live.

96
00:06:04,380 --> 00:06:09,360
So once again, this this entire lesson was purely for the sake of example and to talk more about testing

97
00:06:09,360 --> 00:06:10,020
philosophies.

98
00:06:10,230 --> 00:06:15,900
So what I'm going to do is remove this previous code that we wrote, and I'm also going to remove the

99
00:06:15,900 --> 00:06:17,820
async keyword because we no longer need it.

100
00:06:18,000 --> 00:06:21,090
And I'm going to bring this back to Bobo careers, right?

101
00:06:21,090 --> 00:06:23,940
Because that is what is the purpose of the test.

102
00:06:23,940 --> 00:06:25,290
It is to display the company name.

103
00:06:25,500 --> 00:06:29,730
And the beautiful part about a simple test like this is we don't care how the component does it, we

104
00:06:29,730 --> 00:06:31,170
just care about the value to the user.

105
00:06:31,260 --> 00:06:35,670
At the user is able to observe our company name somewhere in that component.

106
00:06:35,970 --> 00:06:36,300
All right.

107
00:06:36,480 --> 00:06:38,060
That's all there is to cover in this lesson.

108
00:06:38,070 --> 00:06:39,690
So I will see you the next one.
