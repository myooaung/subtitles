WEBVTT
1
00:00:00.670 --> 00:00:01.510
Okay.

2
00:00:01.510 --> 00:00:08.560
So in our action button component, we are now able to apply one of two styles, either primary or secondary,

3
00:00:08.710 --> 00:00:11.520
which affects how our action button component looks.

4
00:00:11.860 --> 00:00:17.530
But as our code currently stands, there's really no way for us to get to that secondary style because

5
00:00:17.530 --> 00:00:19.120
we have a single primary key.

6
00:00:19.330 --> 00:00:26.230
It's always kicking off with a value of true, and there's no way to alter this value to a false in

7
00:00:26.230 --> 00:00:29.680
order to trigger a button class reevaluation.

8
00:00:29.980 --> 00:00:34.420
Now, that's not necessarily a problem because for a typical button, we're not going to flip back and

9
00:00:34.420 --> 00:00:36.100
forth between primary and secondary.

10
00:00:36.310 --> 00:00:44.170
Our original goal was for this action button to be reusable as either a primary button or a secondary

11
00:00:44.170 --> 00:00:44.500
button.

12
00:00:44.620 --> 00:00:47.140
And right now it's not serving that use case either.

13
00:00:47.410 --> 00:00:51.100
So how can we add that level of flexibility to the action button?

14
00:00:51.430 --> 00:00:55.660
Well, we can think of it one level higher or one component higher.

15
00:00:56.050 --> 00:01:02.560
So imagine if every parent component throughout the app that needed an action button could specify which

16
00:01:02.560 --> 00:01:03.940
type of action button it needed.

17
00:01:04.300 --> 00:01:09.190
That way, one component that needs a primary action button would tell the action button that it needs

18
00:01:09.190 --> 00:01:10.450
to have the primary styles.

19
00:01:10.690 --> 00:01:16.960
And another parent component that needs the secondary styles would tell the action button that it needs

20
00:01:16.960 --> 00:01:18.040
to be secondary.

21
00:01:18.700 --> 00:01:22.750
Well, how can we pass in some kind of custom information from parent to child?

22
00:01:22.960 --> 00:01:28.720
You guessed it, it's going to be another prop we can pass in a prop from the parent to the child that

23
00:01:28.720 --> 00:01:30.190
will inform what it should render.

24
00:01:30.280 --> 00:01:35.800
And then in our setup in the action button component, we can take that prop and use that to determine

25
00:01:36.040 --> 00:01:38.920
our data and our computed property as well.

26
00:01:38.920 --> 00:01:41.260
And I'm going to show you how to do that in this lesson.

27
00:01:41.620 --> 00:01:46.510
So instead of starting with our action button, let's start with our main NAV component, which I have

28
00:01:46.510 --> 00:01:48.070
opened here on the left hand side.

29
00:01:48.250 --> 00:01:49.540
Here is our action button.

30
00:01:49.900 --> 00:01:55.750
And let's imagine that we're going to write a bunch of code that reflects what we wish we had, what

31
00:01:55.750 --> 00:01:57.430
we wish we could be able to do.

32
00:01:57.760 --> 00:02:04.180
So I can imagine or wish that I have some kind of prop here on my action button and I'm just going to

33
00:02:04.180 --> 00:02:10.240
pick an arbitrary name like is primary and I'd like to be able to feed in a boolean like true or false.

34
00:02:10.450 --> 00:02:15.640
And if it's true, of course, then my action button will have the primary styles.

35
00:02:15.820 --> 00:02:20.740
And if the is primary prop is set to false, then I'll have the secondary styles.

36
00:02:20.920 --> 00:02:23.770
This is just one idea of how I could pass in a prop.

37
00:02:23.860 --> 00:02:26.260
It seems to me like a pretty elegant way to start out.

38
00:02:26.440 --> 00:02:29.170
So let's say we want to go for something like this.

39
00:02:29.290 --> 00:02:32.830
Okay, so there's a couple caveats I have to teach you about view here.

40
00:02:32.830 --> 00:02:39.250
When we're doing something like this by default, whenever we pass in a prop view is going to interpret

41
00:02:39.250 --> 00:02:41.170
its value as a string.

42
00:02:41.530 --> 00:02:46.780
So for something like our text prop above, that's totally fine because we want to pass in a string

43
00:02:46.780 --> 00:02:50.380
of sign in because we're going to render that text prop right here.

44
00:02:50.680 --> 00:02:55.780
But for something like is primary, we don't actually want a string of true or a string of false.

45
00:02:55.900 --> 00:02:59.020
We want a boolean value of false, right?

46
00:02:59.020 --> 00:03:03.790
There's a big difference in JavaScript between a boolean value and a string that coincidentally has

47
00:03:03.790 --> 00:03:05.770
the letters TR you eat.

48
00:03:06.130 --> 00:03:14.470
So what we can do here in order to make our view interpreted as a actual boolean is use the V bind directive.

49
00:03:14.470 --> 00:03:16.540
So I'm going to write out the code and we're going to talk about it.

50
00:03:16.780 --> 00:03:20.950
So right here we're going to use the same syntax as we've used with V bind before.

51
00:03:21.130 --> 00:03:28.240
Remember it's V dash bind followed by a colon and then instead of targeting the HTML attribute that

52
00:03:28.240 --> 00:03:33.040
we want to target, which is what we used v bind for before we're going to write the name of our prop.

53
00:03:33.160 --> 00:03:33.520
All right.

54
00:03:33.790 --> 00:03:39.370
So it's, it's a different idea because we're no longer binding to an H HTML attribute, but we are

55
00:03:39.490 --> 00:03:40.690
doing a very similar idea.

56
00:03:40.690 --> 00:03:45.280
We are binding to a prop and we're saying that it's going to have some kind of dynamic value.

57
00:03:45.490 --> 00:03:49.810
Now, in this case, we don't really have a dynamic value because true is hard coded.

58
00:03:49.990 --> 00:03:54.520
However, there's nothing stopping us from putting something here that could be a reference, for example,

59
00:03:54.520 --> 00:04:00.940
to a data property on the main nav component or even in line putting some kind of complex JavaScript

60
00:04:00.940 --> 00:04:03.160
thing like an object or an array.

61
00:04:03.580 --> 00:04:10.210
So the key takeaway here is if you ever have a prop that is a string, that is static, that is constant,

62
00:04:10.210 --> 00:04:13.900
that is unchanging, what we have on line 36 is totally fine.

63
00:04:14.170 --> 00:04:21.490
If we have a prop in comparison that is depending on some kind of data property or as some kind of JavaScript

64
00:04:21.490 --> 00:04:24.160
object or primitive, that is not a basic string.

65
00:04:24.280 --> 00:04:28.120
We do have to use the V bind syntax to make Vue recognize that.

66
00:04:28.360 --> 00:04:31.060
So in this case Vue is going to say I have a boolean.

67
00:04:31.060 --> 00:04:33.890
True, not just a string of tr eui.

68
00:04:34.570 --> 00:04:40.060
Now as you may recall, whenever we have the v bind syntax, we have that alternative shortcut and that

69
00:04:40.060 --> 00:04:44.890
shortcut is just going to be the colon by itself and it is applicable here as well.

70
00:04:44.890 --> 00:04:47.890
So I'm going to remove this and we're going to get colon.

71
00:04:47.890 --> 00:04:49.450
Is primary equals true?

72
00:04:49.780 --> 00:04:52.120
Now we're going to get another warning from s lint.

73
00:04:52.120 --> 00:04:55.300
So let me hover my mouse over here and we'll see.

74
00:04:55.300 --> 00:04:58.720
The warning is actually is primary must be hyphen it.

75
00:04:59.050 --> 00:04:59.860
So let me just.

76
00:04:59.920 --> 00:05:01.240
Give you a quick heads up on this one.

77
00:05:01.390 --> 00:05:06.550
What we have right now on line 37 is totally valid and technically allowed in view.

78
00:05:06.820 --> 00:05:13.000
The preference of the view style guide is whenever we have a prop with multiple words in it.

79
00:05:13.240 --> 00:05:15.460
It prefers that we use kebab case.

80
00:05:15.460 --> 00:05:21.860
Kebab case as a reminder is where we separate the subsequent words with a dash.

81
00:05:21.970 --> 00:05:24.340
We keep everything lowercase and we in.

82
00:05:24.430 --> 00:05:26.830
We separate every two words with a dash.

83
00:05:26.980 --> 00:05:30.250
So it looks like this instead of is primary with a capital P.

84
00:05:30.430 --> 00:05:35.320
We're going to write is primary with a lowercase P and a dash in between the two.

85
00:05:35.470 --> 00:05:35.800
All right.

86
00:05:36.040 --> 00:05:41.800
It's exactly the same concept as when we have profile image right here and action button right here,

87
00:05:41.920 --> 00:05:47.530
written s kabob case while we register the components in the upper camel case right here.

88
00:05:47.710 --> 00:05:53.230
So see the differences between our JavaScript right here and our template component instantiation.

89
00:05:53.440 --> 00:05:54.730
It's the same idea.

90
00:05:54.850 --> 00:06:00.940
Behind the scenes, Vue is able to interpret both Upper Camel case and the kebab case.

91
00:06:00.940 --> 00:06:07.840
It recognises either one and in fact, because we feed in a prop called is dash primary a right here,

92
00:06:07.930 --> 00:06:14.170
we're still going to have access to the camel case version of this when we react to this prop in our

93
00:06:14.170 --> 00:06:18.130
action bun component so we're still going to have access to is primary.

94
00:06:18.520 --> 00:06:20.920
In just a moment, we'll see that within our action button.

95
00:06:21.130 --> 00:06:23.230
But this is just a preference of the view style guide.

96
00:06:23.230 --> 00:06:26.320
That's how it likes for us to write out our two components.

97
00:06:26.320 --> 00:06:29.020
It's the same principle as we have with our components.

98
00:06:29.500 --> 00:06:35.170
The View Style Guide generally prefers this hyphenation in the HTML template and it prefers the upper

99
00:06:35.170 --> 00:06:39.280
camel case in the JavaScript portion of the view component file.

100
00:06:39.280 --> 00:06:45.250
And that's just because it's keeping inline and inconsistency with the preferences of the language,

101
00:06:45.250 --> 00:06:45.470
right?

102
00:06:45.490 --> 00:06:50.590
JavaScript and HTML are two separate languages with their own preferences, and so Vue is honoring how

103
00:06:50.590 --> 00:06:52.570
both of those languages tend to like to do things.

104
00:06:52.570 --> 00:06:58.000
So in HTML, for example, if you look at things like the divs and the URLs and lines, it has a preference

105
00:06:58.000 --> 00:06:59.200
for all lowercase.

106
00:06:59.440 --> 00:07:05.110
And that's the preference that we're honoring here with names like Profile, Dash, Image and Action

107
00:07:05.110 --> 00:07:10.960
Dash Button in comparison in JavaScript, JavaScript likes the upper case letters to differentiate the

108
00:07:10.960 --> 00:07:14.620
words, and that's what we stick within in the JavaScript section.

109
00:07:14.770 --> 00:07:19.420
However, behind the scenes, Vue interprets them both basically the same, and it's able to convert

110
00:07:19.630 --> 00:07:20.980
from one to the other.

111
00:07:21.190 --> 00:07:24.640
So once again, we're going to feed in a prop called is primary with a dash.

112
00:07:24.640 --> 00:07:29.290
We're going to be able to use it in its regular camel case format in the action button component.

113
00:07:29.590 --> 00:07:30.880
So let's see how we do that.

114
00:07:30.880 --> 00:07:36.370
Let's now transition to our action one component and see what code we can add here to make this work.

115
00:07:36.580 --> 00:07:41.260
So just like with any prop, just like with text right here, we first have to tell our action button

116
00:07:41.260 --> 00:07:43.360
to expect a prop here.

117
00:07:43.360 --> 00:07:45.070
We tell it to expect a text prop.

118
00:07:45.190 --> 00:07:50.170
We now need to add a second string to this array and this is now our second prop and it's going to be

119
00:07:50.170 --> 00:07:51.280
called is primary.

120
00:07:51.640 --> 00:07:57.490
And this is just proof that we are able to to provide the regular camel case spelling of this prop capital

121
00:07:57.580 --> 00:08:01.300
P in comparison to this one, because view converts it behind the scenes.

122
00:08:01.510 --> 00:08:06.040
This was a big point of confusion for me when I was starting out with Vue because I take things very

123
00:08:06.040 --> 00:08:06.490
literally.

124
00:08:06.490 --> 00:08:10.420
So I said, If it's written this way here, it has to be written the same way.

125
00:08:10.420 --> 00:08:15.670
Here it does not view very easily converts from kabob case to camel case end in reverse.

126
00:08:16.450 --> 00:08:21.100
Okay, so now we've told our action band that it's going to receive and is primary prop.

127
00:08:21.250 --> 00:08:23.110
What do we actually want to do with it?

128
00:08:23.380 --> 00:08:30.250
Well, we actually have reference to every prop within our data object as well as within our computed

129
00:08:30.250 --> 00:08:30.790
properties.

130
00:08:30.940 --> 00:08:34.120
And we reference our props on the this keyword.

131
00:08:34.120 --> 00:08:34.450
Right.

132
00:08:34.660 --> 00:08:39.730
We earlier saw how we could reference our data properties under this keyword in the computed section.

133
00:08:39.910 --> 00:08:41.860
Well, we have the same concept with props.

134
00:08:42.100 --> 00:08:48.700
So because we have these two props right here, we can reference this text as well as this dot is primary

135
00:08:48.850 --> 00:08:54.850
and we're actually able to do that in our data returned object as well because remember, props are

136
00:08:54.850 --> 00:09:00.700
totally independent, so they can flow into the component and data can construct its own action button

137
00:09:00.700 --> 00:09:03.700
component data using those props as reference.

138
00:09:04.030 --> 00:09:10.960
So what I propose we do is we use the boolean value of the is primary prop to set the initial value

139
00:09:10.960 --> 00:09:13.120
of the primary data key.

140
00:09:13.810 --> 00:09:15.620
All right, let me write it out and then we'll talk about it.

141
00:09:15.620 --> 00:09:18.640
So right here on the right hand side, instead of always hard coding.

142
00:09:18.640 --> 00:09:20.350
True, I'm going to write this.

143
00:09:20.530 --> 00:09:21.820
That is primary.

144
00:09:22.750 --> 00:09:25.440
And it's a little bit confusing because we're using similar names.

145
00:09:25.450 --> 00:09:30.850
But just to reiterate, we have the is primary prop versus the primary data key.

146
00:09:31.150 --> 00:09:36.490
But whatever the is primary prop value is it's going to flow in and set the primary value.

147
00:09:36.790 --> 00:09:42.100
And the beautiful part about that design is now the parent component is going to decide what kind of

148
00:09:42.100 --> 00:09:43.150
action button to render.

149
00:09:43.480 --> 00:09:49.060
So, for example, when we pass in true what's going to happen well is primary is set to true so this

150
00:09:49.060 --> 00:09:55.510
is going to add value to primary equal the true which will force the computed button class to execute

151
00:09:55.510 --> 00:10:00.790
and view is going to apply a primary property of true and a secondary property of false for the CAC

152
00:10:00.790 --> 00:10:05.860
class object which will apply the primary button styles and give us the first version of the button.

153
00:10:06.580 --> 00:10:13.030
Conversely, if we pass in and is primary argument to false, well then we'll initialize our primary

154
00:10:13.030 --> 00:10:18.970
property on the action button components data to false, which will cause a totally different set of

155
00:10:18.970 --> 00:10:23.040
styles to be applied because here in our button class this will be the inverse.

156
00:10:23.050 --> 00:10:26.830
Our primary property will be set to this that primary which is going to be false.

157
00:10:27.040 --> 00:10:31.630
And our in inverse case or the opposite of this, that primary will be true.

158
00:10:32.080 --> 00:10:37.750
So if the parent component renders an action button and passes a is primary prop of false, we're going

159
00:10:37.750 --> 00:10:43.180
to apply the secondary styles to this action button and get a totally different rendered button.

160
00:10:43.600 --> 00:10:46.990
So now all that's left to do is to try out both of these styles in the browser.

161
00:10:46.990 --> 00:10:47.890
So I'm going to save this.

162
00:10:48.130 --> 00:10:49.480
I'm going to get rid of these comments.

163
00:10:50.290 --> 00:10:54.120
And let's start off with the is primary property being set to true?

164
00:10:54.130 --> 00:10:58.540
So I'm going to go to my browser and I'm going to refresh just for safety because I know sometimes it

165
00:10:58.540 --> 00:10:59.020
doesn't work.

166
00:10:59.230 --> 00:11:04.990
We do have our sign in button in its normal, our big blue button at primary styles.

167
00:11:05.170 --> 00:11:10.960
And if I go to my view dev tools and I click on my action button component, we can now see in a separate

168
00:11:10.960 --> 00:11:16.060
section the props that are flowing into the component and you can see the is primary prop is flowing

169
00:11:16.060 --> 00:11:16.690
in as true.

170
00:11:16.900 --> 00:11:22.660
That is setting the initial value of the data primary property true, which in turn is leading to this

171
00:11:22.660 --> 00:11:27.070
kind of dynamic JavaScript object which is applying the correct styles to our button.

172
00:11:27.370 --> 00:11:33.580
Now let's see what happens if I go back to the code and I change this to false, save this file, go

173
00:11:33.580 --> 00:11:34.540
back to my browser.

174
00:11:35.230 --> 00:11:40.150
If we apply that style, we should predictably see a totally different button, the secondary version

175
00:11:40.150 --> 00:11:40.900
of the action button.

176
00:11:40.900 --> 00:11:41.620
And we do.

177
00:11:41.860 --> 00:11:47.200
And that's to be expected because now we pass in a different boolean value for is primary that sets

178
00:11:47.200 --> 00:11:51.580
the initial data, that sets the computed properties and now we get the secondary styles.

179
00:11:51.820 --> 00:11:54.010
And that's all there is to take away from this lesson.

180
00:11:54.010 --> 00:11:58.840
We are now using the concept of props, which are just inputs that we pass from the parent to the child

181
00:11:59.050 --> 00:12:03.970
to determine some piece of how the props of how the child component rather renders.

182
00:12:04.180 --> 00:12:06.820
So we can customize elements of our child component.

183
00:12:06.880 --> 00:12:08.770
We can customize the text that displays.

184
00:12:08.920 --> 00:12:13.090
We can also use props to customize the mechanics of how the component works.

185
00:12:13.330 --> 00:12:18.990
We are totally welcome to use props to, for example, set the initial data of the component.

186
00:12:19.000 --> 00:12:19.210
Right.

187
00:12:19.210 --> 00:12:23.680
That's the beautiful part is we don't have to create two separate action buttons like a primary action

188
00:12:23.680 --> 00:12:25.360
button and a secondary action button.

189
00:12:25.510 --> 00:12:31.270
We certainly could do that potentially, but you really have to pick the right balance between reusability

190
00:12:31.420 --> 00:12:36.310
and in this case, if we just have a button that serves the same purpose to display text and it just

191
00:12:36.310 --> 00:12:42.280
has two different colour variants or two different ways to render aesthetically, this seems to me like

192
00:12:42.280 --> 00:12:47.140
a reasonable way to to go where the parent will just declare the kind of button that it needs and just

193
00:12:47.140 --> 00:12:48.550
give it a piece of text through props.

194
00:12:48.700 --> 00:12:53.950
And we're going to get that level of flexibility and reusability from one single action button component.

195
00:12:54.370 --> 00:12:54.670
All right.

196
00:12:54.670 --> 00:12:56.170
That's all there is to cover in this lesson.

197
00:12:56.170 --> 00:12:57.610
So I will see you in the next one.
