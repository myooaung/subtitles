1
00:00:00,470 --> 00:00:01,220
Okay.

2
00:00:01,220 --> 00:00:07,040
So on the left hand side, I have my getters file and on the right hand side I have the corresponding

3
00:00:07,040 --> 00:00:07,610
test suite.

4
00:00:07,940 --> 00:00:14,060
So let's write a new test for our filter jobs getter right here below all of these describes.

5
00:00:14,060 --> 00:00:18,260
I'll add a new describe and we're going to test filtered jobs.

6
00:00:19,710 --> 00:00:24,150
Let's provide the arrow function here and then our test is going to be an IT function call.

7
00:00:24,390 --> 00:00:26,400
What is this getter responsible for?

8
00:00:26,730 --> 00:00:32,520
It filters jobs by organization and job type.

9
00:00:34,660 --> 00:00:35,150
All right.

10
00:00:35,150 --> 00:00:39,100
So I'm going to provide the arrow function and let's have a quick discussion about how we're going to

11
00:00:39,100 --> 00:00:40,070
handle this test.

12
00:00:40,480 --> 00:00:45,460
Our filter jobs getter is reliant on two other getters right here.

13
00:00:45,760 --> 00:00:51,340
And my question to you is, do we need to use the real world implementation of these getters in order

14
00:00:51,340 --> 00:00:53,650
to test the functionality of filter jobs?

15
00:00:53,860 --> 00:00:56,290
Do we need to run through this real world logic?

16
00:00:56,710 --> 00:00:58,600
My argument is no.

17
00:00:58,900 --> 00:00:59,500
Why?

18
00:00:59,650 --> 00:01:06,190
Because the logic that these two getters is running through is already captured by the tests right here,

19
00:01:06,310 --> 00:01:09,670
include job by organization and include job by job type.

20
00:01:10,150 --> 00:01:15,490
And if we were to use the real world implementation, that actually creates more points of failure.

21
00:01:15,820 --> 00:01:21,310
Imagine, for example, that we have a bug and include job by organization and we use the real getter.

22
00:01:21,310 --> 00:01:27,520
When we're testing filter jobs, then our filter jobs test would fail because the logic in this getter

23
00:01:27,520 --> 00:01:28,060
is broken.

24
00:01:28,210 --> 00:01:31,300
But there's nothing actually broken in our filter job's getter.

25
00:01:31,420 --> 00:01:35,560
It's simply relying on a second piece of functionality that itself is broken.

26
00:01:35,950 --> 00:01:40,870
So the more that we can separate our getters, the more that we can separate and decouple and test our

27
00:01:40,870 --> 00:01:46,000
different units in isolation, the more we can identify where the actual failure is occurring.

28
00:01:46,390 --> 00:01:52,420
So from the perspective of the filter jobs getter, all it needs is a method called include job by organization

29
00:01:52,540 --> 00:01:54,100
that's going to return a boolean.

30
00:01:54,400 --> 00:01:55,300
Why a boolean?

31
00:01:55,300 --> 00:01:59,500
Because the filter method here depends on having a function that returns a true or false.

32
00:01:59,800 --> 00:02:06,220
The same rules apply for include job by job, tight job type filter jobs needs an object of getters,

33
00:02:06,220 --> 00:02:09,910
and each one of those two getters is a basic function that returns a boolean.

34
00:02:10,210 --> 00:02:14,920
And as long as we fit that interface, we don't actually have to use the real implementation here.

35
00:02:14,920 --> 00:02:18,190
We can just use a mock implementation and check that filter.

36
00:02:18,190 --> 00:02:21,940
Jobs does what it's supposed to do, that it returns a filtered array.

37
00:02:22,630 --> 00:02:26,110
So we're going to write that test and we're also going to check that filter.

38
00:02:26,110 --> 00:02:31,630
Jobs interacts with the getters in the right way that invokes each one of them and that it passes in

39
00:02:31,630 --> 00:02:34,270
the correct argument, which is an individual job.

40
00:02:34,660 --> 00:02:39,700
So what I'm going to do here is I'm going to begin by defining my two mock getters.

41
00:02:40,030 --> 00:02:45,790
So right here, my first one will be include job by organization, and we can basically set up our mock

42
00:02:45,790 --> 00:02:47,050
function any way we like.

43
00:02:47,050 --> 00:02:51,550
We can even do something like a basic JavaScript arrow function that always returns true.

44
00:02:51,790 --> 00:02:55,240
This would work because this would fit the interface of what this getter is supposed to do.

45
00:02:55,570 --> 00:03:00,460
But just because I want to eventually track what it's been invoked with, I'm going to use the gest

46
00:03:00,460 --> 00:03:01,390
function instead.

47
00:03:01,810 --> 00:03:03,460
Remember, remember the advantage of this?

48
00:03:03,460 --> 00:03:08,920
Is that a just function, a mock function here can track how many times it's been called and with what

49
00:03:08,920 --> 00:03:09,430
arguments.

50
00:03:10,180 --> 00:03:15,370
Now, the only problem right now is when it's invoked and just the mock function will return.

51
00:03:15,610 --> 00:03:21,070
A default value of undefined and undefined is not going to work because then we're going to get undefined

52
00:03:21,070 --> 00:03:23,380
right here when we substitute our mock function.

53
00:03:23,500 --> 00:03:25,000
And that's not going to work with filter.

54
00:03:25,000 --> 00:03:26,500
Filter needs a true or false.

55
00:03:26,830 --> 00:03:32,590
So the way that we can specify the return value for this just function when it's invoked is by invoking

56
00:03:32,590 --> 00:03:37,390
a method on it called mock return value and passing in the return value we want.

57
00:03:37,630 --> 00:03:39,700
So in this case I just want a boolean of true.

58
00:03:40,210 --> 00:03:46,540
So basically what we're saying here is whenever we get to any part of a program where include job by

59
00:03:46,540 --> 00:03:51,580
organization is invoked like so that's basically going to return the value of true.

60
00:03:52,510 --> 00:03:52,900
All right.

61
00:03:53,230 --> 00:03:59,560
So I'm going to do the exact same thing with my include job by job type.

62
00:03:59,680 --> 00:04:03,580
I'm going to set up this mock getter that I'm eventually going to incorporate into my test.

63
00:04:03,850 --> 00:04:08,380
It's going to be a just function, and when we invoke that function, it's going to track that it's

64
00:04:08,380 --> 00:04:11,620
been invoked and it's also going to invoke or return value of the value.

65
00:04:11,620 --> 00:04:12,010
True.

66
00:04:12,400 --> 00:04:17,320
You may remember earlier in the course that we used a similar method called mock resolved value.

67
00:04:17,500 --> 00:04:22,840
It works the exact same way, except mock resolve value is for asynchronous promise resolution.

68
00:04:23,050 --> 00:04:29,140
So the just function behaves as an asynchronous promise that resolves to give you a value in comparison.

69
00:04:29,140 --> 00:04:34,390
Our getters are synchronous plain JavaScript operations, so we don't want to mock a resolved value

70
00:04:34,390 --> 00:04:35,410
or an async value.

71
00:04:35,500 --> 00:04:38,170
We want to make a regular function return value.

72
00:04:38,290 --> 00:04:40,030
So that's why we do mock return.

73
00:04:40,270 --> 00:04:42,790
So mock return value is for synchronous return values.

74
00:04:42,970 --> 00:04:46,540
Mock resolve value is for promise, resolution values.

75
00:04:46,930 --> 00:04:49,270
All right, so we have our two mock getters.

76
00:04:49,450 --> 00:04:52,570
Let's capture them in a new object called Mock Getters.

77
00:04:53,920 --> 00:04:58,150
So right here I'm going to provide include job by organization and include job by job type.

78
00:04:58,390 --> 00:05:03,310
And this is going to be the second argument that we're eventually going to pass to our filter jobs getter.

79
00:05:03,580 --> 00:05:05,350
So we have our second argument now.

80
00:05:05,350 --> 00:05:08,350
We also need to come up with our state or our mock state.

81
00:05:08,710 --> 00:05:11,770
So right here, I'm going to begin by defining a sample job.

82
00:05:12,280 --> 00:05:16,570
Let's make an object with an idea of one and a title of best job ever.

83
00:05:18,310 --> 00:05:18,700
All right.

84
00:05:18,700 --> 00:05:21,940
And in order for our filter jobs getter to work, what do we need?

85
00:05:22,060 --> 00:05:25,090
We need a jobs property on our state object.

86
00:05:25,090 --> 00:05:29,380
And that has to be an array, because an array is what has a filter method on it.

87
00:05:29,740 --> 00:05:32,590
So right here I'm going to define my mock of U.S. state.

88
00:05:32,860 --> 00:05:33,030
So.

89
00:05:33,200 --> 00:05:38,060
One state is going to be an object with a jobs property, and that must be an array.

90
00:05:38,180 --> 00:05:42,830
So I'm going to provide an array and in here I'm going to put the job that I defined above just to have

91
00:05:42,830 --> 00:05:44,150
something that we can filter through.

92
00:05:44,630 --> 00:05:45,080
All right.

93
00:05:45,260 --> 00:05:46,940
So we have a mock state.

94
00:05:46,950 --> 00:05:50,270
We have an object that is good enough to play the role of a U.S. store.

95
00:05:50,270 --> 00:05:54,350
And it state we have an object here that is good enough to play the second argument.

96
00:05:54,470 --> 00:05:55,480
It's simply an object.

97
00:05:55,490 --> 00:05:59,990
It's going to have these properties, which means when filtered jobs is going to access those properties

98
00:05:59,990 --> 00:06:04,820
right here, instead of getting the real getters, it's just going to get our just mock functions which

99
00:06:04,820 --> 00:06:09,740
are good enough to play that role because they're just plain functions that are always going to return.

100
00:06:09,740 --> 00:06:10,260
True.

101
00:06:10,610 --> 00:06:15,560
And that's all that filter jobs needs in order to get to its conclusion, to get to its end without

102
00:06:15,560 --> 00:06:16,220
any problems.

103
00:06:16,520 --> 00:06:19,680
So now the next thing I want to do, of course, is to run that getter.

104
00:06:20,000 --> 00:06:26,090
So right here, I'm going to do content result and I have my getters imported into this test file via

105
00:06:26,090 --> 00:06:26,540
getters.

106
00:06:26,720 --> 00:06:31,130
I have my filter jobs getter and I need to provide it the two arguments that it expects.

107
00:06:31,130 --> 00:06:33,560
It needs a state and it needs a collection of getters.

108
00:06:33,800 --> 00:06:38,600
So for my state, I'm going to provide the state that I defined above and for getters, instead of giving

109
00:06:38,600 --> 00:06:42,740
it the real getters object like view or view X is going to do in the real world.

110
00:06:42,980 --> 00:06:46,760
In our test suite, I'm just going to give it the sample JavaScript object of mock getters.

111
00:06:46,940 --> 00:06:52,550
This object right here, which has the two getters that this getter of filter jobs needs to run.

112
00:06:52,970 --> 00:06:59,270
We've once again decoupled the implementation of filter jobs from literally having to rely on these

113
00:06:59,270 --> 00:07:00,650
two real getters right here.

114
00:07:01,190 --> 00:07:01,640
All right.

115
00:07:01,880 --> 00:07:06,290
So let's assume that this is going to be a function that always returns true.

116
00:07:06,500 --> 00:07:09,200
And let's assume that this is going to be a function that always returns true.

117
00:07:09,440 --> 00:07:14,690
Thus, if we filter with true and we filter with true, the final return value of filter jobs is going

118
00:07:14,690 --> 00:07:16,130
to be the same original array.

119
00:07:16,400 --> 00:07:19,490
So the first thing I can do here is check that I expect result.

120
00:07:20,620 --> 00:07:22,420
To equal an array.

121
00:07:23,590 --> 00:07:26,050
With my job object with the exact same values.

122
00:07:26,170 --> 00:07:30,790
And that's going to verify that we ran through all of our filter methods right here, and then we produced

123
00:07:30,790 --> 00:07:35,710
a return value of an array from our getter that was based off the original jobs.

124
00:07:35,720 --> 00:07:36,090
Right.

125
00:07:36,370 --> 00:07:38,770
So that takes care of one of the things that I want to test.

126
00:07:39,160 --> 00:07:43,480
The other thing that I want to test, and this is the primary reason why I used just functions right

127
00:07:43,480 --> 00:07:49,900
here, is because I want to make sure that our filter jobs getter correctly talked to the corresponding

128
00:07:49,900 --> 00:07:52,390
getters right here and pass them the right arguments.

129
00:07:52,600 --> 00:07:57,970
If I use the plain JavaScript arrow function that always returns true, this logic would work, but

130
00:07:57,970 --> 00:07:59,350
I would not be able to test that.

131
00:07:59,350 --> 00:08:05,580
I have correctly invoked those functions in comparison with a just function I can see right here.

132
00:08:05,590 --> 00:08:12,160
I'm going to say I expect my include job by organization mock function to have been called with.

133
00:08:13,570 --> 00:08:17,320
Which is going to verify not just that it's been invoked, but that it's been involved with the right

134
00:08:17,320 --> 00:08:17,770
argument.

135
00:08:18,010 --> 00:08:24,340
And so what I want is at some point during the running of my filter jobs getter, I should have invoked

136
00:08:24,340 --> 00:08:30,010
this getter or this mock getter in my test, and I should have invoked it passing in the sample job

137
00:08:30,010 --> 00:08:31,270
that I have right here.

138
00:08:31,720 --> 00:08:36,100
In theory, as we're iterating all over all of our jobs, we're going to pass in each one of our jobs.

139
00:08:36,100 --> 00:08:36,280
Right.

140
00:08:36,310 --> 00:08:42,190
If we have an array of 100, we're going to invoke the include job by organization getter 100 times

141
00:08:42,190 --> 00:08:44,170
and pass in 100 different job objects.

142
00:08:44,440 --> 00:08:49,720
But for the purposes of testing a single interaction, an array of one job is enough to validate that

143
00:08:49,720 --> 00:08:51,640
this logic is doing what it's supposed to do.

144
00:08:52,380 --> 00:08:57,700
That's one of the reasons why I extracted Job two, a separate constant, simply so I could reference

145
00:08:57,700 --> 00:09:01,780
it down here below and make sure that I'm calling the getter with that exact job.

146
00:09:02,110 --> 00:09:04,320
So right here, I'm going to add a very similar test.

147
00:09:04,330 --> 00:09:07,900
I expect the my include job by job type.

148
00:09:08,780 --> 00:09:11,200
Getter will also have been called with.

149
00:09:13,010 --> 00:09:14,060
The job object.

150
00:09:15,090 --> 00:09:17,640
All right, I'm going to save this and all of our tests are going to pass.

151
00:09:17,910 --> 00:09:19,500
Let me show you how they could fail.

152
00:09:19,770 --> 00:09:24,300
So, for example, if we were following a TDD approach and we built this test out, but we forgot to

153
00:09:24,300 --> 00:09:29,280
add this last line, we would still have a gathering of returns, a valid array.

154
00:09:29,700 --> 00:09:34,980
However, this test would fail because it would say, Hey, you told me that at some point you expected

155
00:09:34,980 --> 00:09:40,080
me to rely on the include job by job type getter, and you expected me to call it with an argument of

156
00:09:40,080 --> 00:09:40,500
job.

157
00:09:40,740 --> 00:09:42,720
I did not receive any calls.

158
00:09:42,720 --> 00:09:46,590
Number of calls, zero when I expected one call with this job object.

159
00:09:46,830 --> 00:09:51,780
So we are validating not just that it's working, but that we are relying on the right getters, that

160
00:09:51,780 --> 00:09:54,480
we are transferring responsibility to the correct getters.

161
00:09:54,630 --> 00:10:00,030
And the way we're doing that is by replacing our real world getter implementations with mock getters

162
00:10:00,030 --> 00:10:00,750
in our tests.

163
00:10:00,960 --> 00:10:02,010
What is a mock getter?

164
00:10:02,040 --> 00:10:04,740
It's a basic just function that can track its invocations.

165
00:10:04,890 --> 00:10:06,660
It's just always going to return the value.

166
00:10:06,660 --> 00:10:07,050
True.

167
00:10:07,350 --> 00:10:08,970
Why does it always have to return the value?

168
00:10:08,970 --> 00:10:09,330
True.

169
00:10:09,570 --> 00:10:12,180
So that our original logic here can work with filter.

170
00:10:12,270 --> 00:10:17,550
Filter needs the getter to return a true here so that this function that we pass in line provides a

171
00:10:17,550 --> 00:10:19,440
boolean that this can use to filter.

172
00:10:19,740 --> 00:10:24,030
So we do need to make our mock getters behave similarly to the real thing.

173
00:10:24,060 --> 00:10:25,590
It can't just be a random object.

174
00:10:25,770 --> 00:10:27,810
It does have to play the role of the real object.

175
00:10:27,990 --> 00:10:29,520
So it does have to have the same name.

176
00:10:29,640 --> 00:10:31,830
It does have to have the same type of return value.

177
00:10:31,980 --> 00:10:36,340
But it doesn't need to be the real getter in order to test filter jobs.

178
00:10:36,360 --> 00:10:37,800
This is good enough.

179
00:10:38,280 --> 00:10:39,870
All right, so I'm going to save this once again.

180
00:10:41,070 --> 00:10:44,490
And now we can see all of our tests are passing right here.

181
00:10:44,490 --> 00:10:51,660
I'm going to run our entire NPM run test unit command to run the entire test suite, double check everything

182
00:10:51,660 --> 00:10:52,590
one more time.

183
00:10:53,370 --> 00:10:54,510
Give it a second to run.

184
00:10:54,840 --> 00:10:55,530
There it goes.

185
00:10:55,530 --> 00:11:00,990
And we can see we have basically perfect test coverage for all of our components, for all of our view

186
00:11:01,150 --> 00:11:02,070
stuff, etc..

187
00:11:02,430 --> 00:11:02,760
All right.

188
00:11:02,760 --> 00:11:05,760
So lots of great progress and I will see you in the next lesson.
