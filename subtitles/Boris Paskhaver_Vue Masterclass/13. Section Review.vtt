WEBVTT
1
00:00:00.610 --> 00:00:01.410
Okay.

2
00:00:01.410 --> 00:00:04.890
So congratulations on reaching the end of another core section.

3
00:00:05.070 --> 00:00:08.580
In this section, we focused once again on the composition API.

4
00:00:08.820 --> 00:00:13.860
This section was mostly for practice, so I don't think we had that many new ideas, but it gave us

5
00:00:13.860 --> 00:00:19.320
a better sense of how we can use composable functions to greatly simplify these set up methods we have

6
00:00:19.320 --> 00:00:25.740
in a given component and thus separate the component from different pieces of logic or responsibility

7
00:00:25.770 --> 00:00:26.280
within it.

8
00:00:26.790 --> 00:00:30.540
To me, it doesn't even really matter if the composable function is reusable.

9
00:00:30.660 --> 00:00:36.900
Simply moving that logic from even one component to a function that can be independently tested itself

10
00:00:36.900 --> 00:00:37.980
gives advantages.

11
00:00:38.340 --> 00:00:44.190
In the previous options API, our component logic was a lot more intrinsically connected to a component

12
00:00:44.370 --> 00:00:45.570
with composable functions.

13
00:00:45.570 --> 00:00:51.990
We now get the reactivity benefits of view, but we don't have to do it strictly tied to a component,

14
00:00:52.170 --> 00:00:56.940
and that allows you to have a lot more flexible, separated, easily tested designs.

15
00:00:56.940 --> 00:00:57.150
All right.

16
00:00:57.150 --> 00:00:59.190
And hopefully this section helped to illuminate that.

17
00:00:59.550 --> 00:01:01.710
So with that, let's quickly review everything we learned.

18
00:01:02.100 --> 00:01:05.670
We saw that Vue includes helper functions for reacting to lifecycle hooks.

19
00:01:05.940 --> 00:01:11.070
We used our mounted, which runs the function that we pass it when the component mounts, but there's

20
00:01:11.070 --> 00:01:13.160
also additional functions we did not explore.

21
00:01:13.440 --> 00:01:18.690
They work the exact same way you import them from the View Library and then you pass them a function

22
00:01:18.690 --> 00:01:23.610
in the setup method that that basically tells you run this logic whenever something occurs.

23
00:01:23.850 --> 00:01:29.400
So for example, there is a lifecycle look for whenever the component updates or whenever the component

24
00:01:29.400 --> 00:01:30.000
announce.

25
00:01:30.210 --> 00:01:34.860
And for example, a component update can happen many different times in a component's life, while an

26
00:01:34.860 --> 00:01:36.270
unannounced will only happen once.

27
00:01:36.870 --> 00:01:42.840
So the idea is these helper functions may run one time multiple times, etc., but the idea is the same.

28
00:01:42.840 --> 00:01:49.050
We simply can react to certain moments of existence in a component and tell you what to do in those

29
00:01:49.050 --> 00:01:49.440
moments.

30
00:01:49.560 --> 00:01:49.860
All right.

31
00:01:50.220 --> 00:01:55.170
As well as that, we also created a lot more composable helper functions, and we saw that a helper

32
00:01:55.170 --> 00:01:59.040
functions don't even need to return a reactive value to be beneficial.

33
00:01:59.220 --> 00:02:03.870
They can simply isolate a single responsibility like dispatching a given view action.

34
00:02:04.080 --> 00:02:07.470
That way, that helper function can know about the action name.

35
00:02:07.470 --> 00:02:08.610
It can know about it.

36
00:02:08.610 --> 00:02:13.290
Talking to the store, using the use star function and calling the dispatch method while the component

37
00:02:13.290 --> 00:02:18.630
simply says, I'm going to rely on this helper function and you take care of all of that specific complexity

38
00:02:18.630 --> 00:02:19.590
or responsibility.

39
00:02:20.520 --> 00:02:20.790
All right.

40
00:02:20.790 --> 00:02:25.980
As far as testing, same ideas, stick with simple JavaScript objects when marking for composable functions

41
00:02:26.430 --> 00:02:27.540
and your component tests.

42
00:02:27.720 --> 00:02:31.560
If you need a real view reactive object we saw we did need that in some tests.

43
00:02:31.770 --> 00:02:36.630
We saw that we could wrap a value in a simple wrap function call to get the real view reactive object

44
00:02:36.810 --> 00:02:37.470
that is helpful.

45
00:02:37.470 --> 00:02:41.250
Sometimes when we were testing interaction with our actual H2 multiple.

46
00:02:41.580 --> 00:02:46.350
And finally, this is common sense and we've known this for many sections, but this is a very common

47
00:02:46.350 --> 00:02:48.330
point of confusion and common errors.

48
00:02:48.340 --> 00:02:54.150
Just remember in the setup method or whenever you're working with JavaScript such as running functions

49
00:02:54.150 --> 00:02:59.250
that accept arguments that are other reactive objects, just remember when returning reactive computed

50
00:02:59.250 --> 00:03:02.580
values or working with them, remember to access the value property.

51
00:03:02.580 --> 00:03:04.590
Remember to think about what you're working with.

52
00:03:04.800 --> 00:03:09.270
Are you working with a primitive value or are you working with a view reactive object that is storing

53
00:03:09.270 --> 00:03:11.130
a value and keeping track of its changes?

54
00:03:11.130 --> 00:03:11.460
All right.

55
00:03:11.610 --> 00:03:13.830
Remember what you're working with sometimes.

56
00:03:13.830 --> 00:03:18.930
Unfortunately, when it comes to the templates, Vue does a lot of that work behind the scenes where

57
00:03:18.930 --> 00:03:24.000
it doesn't care, for example, whether you give a number or a reactive object storing a number, it'll

58
00:03:24.000 --> 00:03:25.140
make it work in the template.

59
00:03:25.320 --> 00:03:29.670
It's a lot more complex when when we're in the JavaScript because there are those differences in those

60
00:03:29.670 --> 00:03:30.780
properties matter.

61
00:03:30.780 --> 00:03:33.990
You can't abstract away the core nature of JavaScript from us.

62
00:03:33.990 --> 00:03:35.880
There says, Remember what you're working with.

63
00:03:36.150 --> 00:03:40.290
That's a common point of confusion either forgetting to access value or accessing value in something

64
00:03:40.290 --> 00:03:41.820
that doesn't need it, etc..

65
00:03:42.120 --> 00:03:42.360
All right.

66
00:03:42.360 --> 00:03:45.750
So with that, we have completed our third section of the composition API.

67
00:03:45.930 --> 00:03:50.730
And in the very next section we can move on to something very, very exciting, which is TypeScript.

68
00:03:50.880 --> 00:03:51.570
So I'll see you there.
