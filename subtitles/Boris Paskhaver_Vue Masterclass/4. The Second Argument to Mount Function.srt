1
00:00:00,390 --> 00:00:06,420
In this lesson, I'd like to introduce you to an optional second argument to the mount function within

2
00:00:06,420 --> 00:00:07,060
a test.

3
00:00:07,350 --> 00:00:14,640
The optional second argument can be a view configuration object, and that configuration object accepts

4
00:00:14,640 --> 00:00:19,830
basically all the same properties as a regular view configuration object does.

5
00:00:20,130 --> 00:00:25,590
So as a reminder, I have Main now opened here on the right hand side and as I scroll down, here is

6
00:00:25,590 --> 00:00:28,950
our view configuration object for the main nav component.

7
00:00:29,190 --> 00:00:34,680
We have this data method here that returns the data that is available within our component.

8
00:00:34,920 --> 00:00:40,830
If we want to customize this within our test, we can do so using the second argument to mount.

9
00:00:41,100 --> 00:00:47,130
So for example, I can do this, I can provide a second argument to mount with my JavaScript object

10
00:00:47,130 --> 00:00:49,500
and I'm going to do a line break here and here.

11
00:00:49,500 --> 00:00:52,980
I'm going to follow the exact same syntax as I have on the right hand side.

12
00:00:53,220 --> 00:00:55,140
I'm going to define a data method.

13
00:00:56,260 --> 00:00:59,170
And that method is going to return a JavaScript object.

14
00:00:59,710 --> 00:01:05,860
And now let's say I take my company property, but for the purposes of this test and for the purposes

15
00:01:05,860 --> 00:01:12,190
of this mounted main nav component just in our test, I want the company property on our data to be

16
00:01:12,190 --> 00:01:13,660
Super Corp. instead.

17
00:01:14,380 --> 00:01:14,800
All right.

18
00:01:14,950 --> 00:01:19,930
So the way to think about this is almost like we're borrowing the HTML template from the main nav component.

19
00:01:20,140 --> 00:01:25,840
But instead of keeping these properties that are originally there in the implementation, we're customizing

20
00:01:25,840 --> 00:01:28,090
the data on the component in our test.

21
00:01:28,450 --> 00:01:34,750
So now when we run this, we're still going to go ahead and render the component onto the screen or

22
00:01:34,750 --> 00:01:40,570
into the wrapper, which in turn is going to display or interpolate the value of the company property.

23
00:01:40,810 --> 00:01:45,330
But of course, we're going to get a failure because now the components text is going to be the string

24
00:01:45,340 --> 00:01:52,000
super corp and our actual company name of bubble careers is not going to be found anywhere in that.

25
00:01:52,240 --> 00:01:57,740
Now, of course, we can always change this to Super Corp. and that will make the test pass.

26
00:01:57,760 --> 00:02:02,800
I'm going to save that and rerun the test, and then we're going to see that the tests indeed do pass.

27
00:02:03,100 --> 00:02:08,800
So one small advantage of this implementation is that to a new developer, they can sort of make the

28
00:02:08,800 --> 00:02:15,390
connection that the data methods company property is what is being rendered on the screen.

29
00:02:15,400 --> 00:02:15,700
Right.

30
00:02:15,880 --> 00:02:18,910
But that is the only advantage I see to this approach.

31
00:02:19,060 --> 00:02:24,100
And I actually have an issue overall with this version of the test.

32
00:02:24,340 --> 00:02:26,890
I liked our first version a lot more.

33
00:02:27,010 --> 00:02:32,290
I did want to show you this option because it shows you what the second argument to the Mount function

34
00:02:32,290 --> 00:02:35,920
represents and how we can use it to customize the internals of the component.

35
00:02:36,160 --> 00:02:39,910
But I also want to talk about why I'm not a fan of this strategy.

36
00:02:40,630 --> 00:02:42,880
So this is not an ideal test.

37
00:02:42,880 --> 00:02:48,850
And I think the reason why is because this test is very closely coupled to our implementation.

38
00:02:49,060 --> 00:02:54,520
This test knows too much about how the internals of the main NAV component works.

39
00:02:54,760 --> 00:02:59,430
It knows details such as the fact that there is a company property on data.

40
00:02:59,440 --> 00:02:59,740
Right.

41
00:02:59,980 --> 00:03:05,260
The purpose of this test is simply to check that we have a company name displayed somewhere in our component.

42
00:03:05,410 --> 00:03:12,490
But now our test sets up a specific criteria that it needs to know about the internals of the components

43
00:03:12,490 --> 00:03:17,800
data to test something that is view related, which is some text appearing on the screen.

44
00:03:18,130 --> 00:03:23,320
It's highly unlikely that we would have written this test with TDD if we hadn't written our component

45
00:03:23,320 --> 00:03:23,500
yet.

46
00:03:23,650 --> 00:03:28,870
We would have no clue whether our company name was coming from the data property or any other property

47
00:03:28,870 --> 00:03:34,570
that we'll introduce later, or whether we simply hardcoded the text Bobo carriers or in this case Super

48
00:03:34,570 --> 00:03:37,000
Corp into our actual HTML template.

49
00:03:37,270 --> 00:03:43,570
This test knows a lot about what the component needs in order to work, and the reason that's bad is

50
00:03:43,570 --> 00:03:49,420
because if our component changes our implementation, for example, if we were to write a hard code

51
00:03:49,420 --> 00:03:55,750
Bobo careers in line instead of making it internally at the company property, this test would fail.

52
00:03:55,900 --> 00:03:56,200
Right?

53
00:03:56,230 --> 00:03:57,280
Let me show you an example of that.

54
00:03:57,280 --> 00:04:03,310
If I were to cancel out company right here and I would have to write verbal carriers right here.

55
00:04:05,590 --> 00:04:06,670
This test would fail.

56
00:04:08,810 --> 00:04:13,790
Even though it still fulfills lot of the implementation, rather does fulfil the primary requirement

57
00:04:13,790 --> 00:04:15,560
of displaying the company name.

58
00:04:15,770 --> 00:04:21,710
All we really care about for the users sake is that our company brand bubble careers is written somewhere

59
00:04:21,710 --> 00:04:22,430
in the component.

60
00:04:22,440 --> 00:04:27,620
We don't really care whether it's hardcoded like so or whether it is coming in because it's interpolated

61
00:04:27,620 --> 00:04:30,920
from the data property or the company property more specifically.

62
00:04:31,100 --> 00:04:33,980
All we really care about is that bobble career as a summer on the screen.

63
00:04:34,130 --> 00:04:38,120
And yet as soon as we change something in our component, our tests fail.

64
00:04:38,360 --> 00:04:42,440
Our tests are brittle, they are flaky, they are not stable and reliable.

65
00:04:42,650 --> 00:04:47,300
And the reason is because our tests are closely coupled to the actual implementation.

66
00:04:47,540 --> 00:04:50,570
Your tests should show test behavior.

67
00:04:50,570 --> 00:04:53,000
Ideally, they should test inputs and outputs.

68
00:04:53,000 --> 00:04:54,710
What is this component supposed to do?

69
00:04:55,010 --> 00:04:59,990
At the same time, your test shouldn't really worry about how your component is doing it, just what

70
00:04:59,990 --> 00:05:01,580
it is doing, right?

71
00:05:01,790 --> 00:05:05,540
So my preference here is to let's bring this back.

72
00:05:05,690 --> 00:05:06,980
Let's bring company back here.

73
00:05:07,190 --> 00:05:09,770
Let's make sure company is written back here.

74
00:05:09,920 --> 00:05:14,870
My personal preference is to return back to our original test, so I'm going to delete all of this.

75
00:05:14,870 --> 00:05:18,020
This was all, for example, to show you the second argument to mount.

76
00:05:18,200 --> 00:05:20,390
But my personal preference is a test like this.

77
00:05:20,600 --> 00:05:23,930
Notice how it's also a lot cleaner and simpler.

78
00:05:24,110 --> 00:05:29,810
We just say, Hey, we want a may nav component and somehow, some way in this text, we want bubble

79
00:05:29,810 --> 00:05:30,230
careers.

80
00:05:30,380 --> 00:05:32,600
We don't care whether that value is hard coded.

81
00:05:32,720 --> 00:05:36,830
We don't care about whether that value is coming from the company data attribute.

82
00:05:37,070 --> 00:05:43,520
If we were to now add bubble careers right here instead of interpolating the company property, this

83
00:05:43,520 --> 00:05:49,190
test would still pass and it would still deliver on our expectation to the user that the component is

84
00:05:49,190 --> 00:05:50,840
displaying the company name.

85
00:05:51,110 --> 00:05:55,940
So while I wanted to introduce the second argument as a good introduction to how you can customize a

86
00:05:55,940 --> 00:06:01,190
component, and sometimes that may be helpful in a test, just if you want to quickly make sure that

87
00:06:01,190 --> 00:06:06,470
everything is working as expected, maybe you can give it a different value of data just to double check

88
00:06:06,470 --> 00:06:10,970
that your assumptions are correct, etc. There are ways that we can reach out to a component and change

89
00:06:10,970 --> 00:06:16,670
its internal state, but generally it's not recommended to do so, in my opinion, because we are we

90
00:06:16,670 --> 00:06:21,470
are making our tests know way too much about how the actual code works.

91
00:06:21,680 --> 00:06:26,390
Remember, we want to test behavior instead of implementation, and when we do that, our tests will

92
00:06:26,390 --> 00:06:32,150
be more likely to endure as we actually change the internals of how we build our components.

93
00:06:32,150 --> 00:06:32,420
Right.

94
00:06:32,870 --> 00:06:39,020
A test like this is very easy to write with TDD a test like the one that we just wrote a second ago.

95
00:06:39,050 --> 00:06:44,510
You would never write with TDD, you would never know how your component is going to implement a such

96
00:06:44,510 --> 00:06:44,900
a feature.

97
00:06:44,900 --> 00:06:49,400
So you wouldn't be able to guess that it would be reliant on data and a company property and data.

98
00:06:49,550 --> 00:06:54,680
So that's another benefit of TDD is it keeps you honest and more likely to write simpler tests that

99
00:06:54,680 --> 00:06:57,380
actually check for the things that are worth caring about.

100
00:06:57,650 --> 00:06:59,240
That's all there is to cover in this lesson.

101
00:06:59,240 --> 00:07:00,860
So I will see you in the next one.
