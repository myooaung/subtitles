1
00:00:00,620 --> 00:00:01,640
All right.

2
00:00:01,640 --> 00:00:07,100
So in the previous lesson, we wrote this test right here that searches for all the menu items in our

3
00:00:07,100 --> 00:00:12,230
main nav component and confirms that they are displaying the text to the user that we expect.

4
00:00:12,530 --> 00:00:17,720
And we talked briefly about this line right here, line 13, and why it's not ideal.

5
00:00:17,870 --> 00:00:20,930
I don't want you to think that what we have here is terrible by any means.

6
00:00:20,930 --> 00:00:22,190
I don't think it is terrible.

7
00:00:22,430 --> 00:00:24,950
I'm just saying, can we make it a little bit better?

8
00:00:25,130 --> 00:00:30,800
And by better, I mean, can we make the test a little bit more resilient to change, especially change

9
00:00:30,800 --> 00:00:31,850
in our implementation?

10
00:00:32,180 --> 00:00:38,900
So the issue here is that we are finding all occurrences of our list items are ally tags and that requires

11
00:00:38,900 --> 00:00:44,480
our tests to have some knowledge of the implementation details of our main NAV component.

12
00:00:44,480 --> 00:00:47,180
We have to know that an ally exists, right?

13
00:00:47,480 --> 00:00:53,360
So for example, if tomorrow another developer goes into our main nav component and decides to change

14
00:00:53,360 --> 00:01:00,260
this from an unordered list of allies to, let's say, a div of divs, well, all of a sudden our tests

15
00:01:00,260 --> 00:01:06,620
would fail because the tests would no longer be able to identify the list item element for which from

16
00:01:06,620 --> 00:01:08,030
which to extract text.

17
00:01:08,030 --> 00:01:08,330
Right.

18
00:01:08,990 --> 00:01:12,890
So that doesn't mean that this thing is likely to change or that that is likely to happen.

19
00:01:13,010 --> 00:01:18,050
It just means that our tests are kind of connected more closely to our main nav component.

20
00:01:18,050 --> 00:01:18,320
Right.

21
00:01:18,470 --> 00:01:24,500
And you might think, well, can we substitute our ally to search for instead a class, a access class

22
00:01:24,500 --> 00:01:25,070
or an ID?

23
00:01:25,580 --> 00:01:30,800
And that's not actually going to solve our problem because what happens tomorrow if that same developer

24
00:01:30,800 --> 00:01:33,650
goes in and changes the name of our access class?

25
00:01:33,890 --> 00:01:38,390
Well, all of a sudden our tests are once again going to look for something that no longer exists.

26
00:01:38,870 --> 00:01:45,290
If our if our tests have to know about an ally or an IED or a class, well, they have to know about

27
00:01:45,290 --> 00:01:48,050
something that exists in the actual main nav component.

28
00:01:48,050 --> 00:01:48,350
Right?

29
00:01:48,590 --> 00:01:50,360
Sometimes that's inevitable in our tests.

30
00:01:50,540 --> 00:01:53,300
But in this situation, I think we can do a little bit better.

31
00:01:53,600 --> 00:01:59,810
So here's a solution that I propose, and this is something that's coming directly from the View Testing

32
00:02:00,350 --> 00:02:02,060
Guide on their official website.

33
00:02:02,450 --> 00:02:08,270
What if we had an attribute on an ally that was dedicated entirely to our tests?

34
00:02:08,270 --> 00:02:14,600
It exists purely for the purposes of our tests to be able to locate that element within our main NAV

35
00:02:14,600 --> 00:02:15,020
component.

36
00:02:15,020 --> 00:02:20,330
It would serve no purpose to the user, and I'm sure if the user were to open up their console in Chrome

37
00:02:20,330 --> 00:02:24,710
they would see it, but it would mean nothing to them and it would not change any of the actual visual

38
00:02:24,710 --> 00:02:27,530
impact of the component when it renders in our browser.

39
00:02:27,830 --> 00:02:33,770
But if we had a custom attribute on our ally component, for example, in this case we could use that

40
00:02:33,770 --> 00:02:39,080
custom attribute to find that ally and use it in our tests.

41
00:02:39,080 --> 00:02:39,350
Right?

42
00:02:39,470 --> 00:02:45,180
And then we would be bound to a specific test related attribute rather than to an age HTML element or

43
00:02:45,200 --> 00:02:45,650
class.

44
00:02:45,890 --> 00:02:52,340
So if somebody tomorrow were to change our ally to a div, but they were to keep the same custom attribute

45
00:02:52,340 --> 00:02:56,630
that we defined just for our tests, well then our tests would not fail because we would still be able

46
00:02:56,630 --> 00:02:58,190
to locate that element.

47
00:02:58,190 --> 00:02:59,090
With that attribute.

48
00:02:59,180 --> 00:03:02,780
It would just be a different element and the same rules apply to access class.

49
00:03:02,780 --> 00:03:08,660
If somebody were to decide to change access class, then we would still retain that custom attribute

50
00:03:08,660 --> 00:03:12,200
that we defined on our element and the tests would be able to find it.

51
00:03:12,470 --> 00:03:16,730
Now, granted, somebody could always change our custom attribute and give it some kind of value and

52
00:03:16,730 --> 00:03:22,490
break our tests, but it's obviously a lot less likely for that to happen compared to a change in the

53
00:03:22,490 --> 00:03:25,670
element itself or a change in the case class.

54
00:03:25,670 --> 00:03:31,280
That is common, that is to Nancy assess for testing purposes, our own custom attribute is much less

55
00:03:31,280 --> 00:03:32,540
likely to change.

56
00:03:32,840 --> 00:03:36,410
So I know when I use the words custom attribute there, maybe a little bit confusing.

57
00:03:36,530 --> 00:03:38,750
So let me show you how this is going to work in action.

58
00:03:38,960 --> 00:03:41,840
So we're going to keep the majority of this test right here.

59
00:03:42,020 --> 00:03:45,650
All I'm going to change is what I'm actually searching for in my wrapper.

60
00:03:45,950 --> 00:03:49,190
So I'm still going to to keep my string argument here.

61
00:03:49,190 --> 00:03:54,290
But instead of providing an age to my element, I'm going to start with a pair of square brackets.

62
00:03:54,290 --> 00:03:55,880
So right here, a pair of square brackets.

63
00:03:56,540 --> 00:04:04,100
And this is the syntax that we can use in Vue test utils to search for a specific attribute on our element.

64
00:04:04,280 --> 00:04:10,580
So an attribute can be any kind of real HTML attribute such as h ref right here on our anchor tag or

65
00:04:10,580 --> 00:04:12,170
our class right here, etc..

66
00:04:12,290 --> 00:04:16,850
If we want to search for an element by an attribute, we can use this square brackets index.

67
00:04:17,150 --> 00:04:22,250
But what I want to search for is not a regular HTML element attribute, but a custom one that we're

68
00:04:22,250 --> 00:04:23,360
going to add ourselves.

69
00:04:23,540 --> 00:04:28,430
It's going to be a no op, which means it's not going to do anything to the actual element in the browser.

70
00:04:28,550 --> 00:04:33,530
It's just kind of an irrelevant key value pair that we're going to add to our time element.

71
00:04:33,860 --> 00:04:40,370
So I'd like you to imagine that we just add an H HTML attribute to our ally called data dash test.

72
00:04:41,350 --> 00:04:43,990
So that name is entirely up to us.

73
00:04:44,110 --> 00:04:50,170
But this is a recommended one from the view test utils documentation because it reflects that we are

74
00:04:50,170 --> 00:04:55,560
adding some kind of data to a specified piece of our template that is related to our tests.

75
00:04:55,570 --> 00:04:55,840
Right.

76
00:04:55,840 --> 00:04:57,130
It's not related to the user.

77
00:04:57,250 --> 00:04:59,320
It doesn't have anything to do with the user value.

78
00:04:59,440 --> 00:05:04,330
It's just for our tests and it's some kind of data right now in order for us to have an attribute,

79
00:05:04,330 --> 00:05:09,400
just like we have here with a graph or just like we have here with class, we of course need an association

80
00:05:09,400 --> 00:05:13,240
with a value right or ref equals something or class equals something.

81
00:05:13,480 --> 00:05:18,040
So if this is going to be our attribute, we also have to provide it with an equal sign and actually

82
00:05:18,040 --> 00:05:19,330
give it some kind of value.

83
00:05:19,480 --> 00:05:22,750
This is going to happen in our actual main nav component eventually.

84
00:05:22,870 --> 00:05:28,540
But here we're specifying what to look for, look for a data test attribute with a given value, and

85
00:05:28,540 --> 00:05:34,060
we can provide that value, of course, as a string, but we're already in a string for our find our

86
00:05:34,060 --> 00:05:34,420
method.

87
00:05:34,600 --> 00:05:38,440
So to provide a nested string, I can use single quotes right here.

88
00:05:38,710 --> 00:05:44,230
So data test equals single quotes and here we can put some kind of identifier or some kind of value

89
00:05:44,230 --> 00:05:45,550
for this data test attribute.

90
00:05:45,700 --> 00:05:51,070
This is entirely up to us in terms of the name, much like the data test name is entirely up to us.

91
00:05:51,340 --> 00:05:57,160
So for here I think an appropriate name would be something like main dash nav dash list.

92
00:05:57,460 --> 00:05:58,210
Dash item.

93
00:05:59,230 --> 00:05:59,440
All right.

94
00:05:59,470 --> 00:06:00,280
I'm going to save this.

95
00:06:00,280 --> 00:06:02,110
We're going to break it off into a new line.

96
00:06:02,110 --> 00:06:03,850
And you can see the full syntax right here.

97
00:06:04,030 --> 00:06:06,280
We're going to find a string with square brackets.

98
00:06:06,280 --> 00:06:11,260
Then inside data test equals another string of main now list item.

99
00:06:11,530 --> 00:06:16,450
So you'll notice that when I run this test right now it's going to fail because nothing in our template

100
00:06:16,450 --> 00:06:18,610
has an attribute of data test.

101
00:06:18,610 --> 00:06:18,940
Right?

102
00:06:19,240 --> 00:06:23,950
So predictably the view test utils does not discover that attribute.

103
00:06:23,960 --> 00:06:29,170
So it returns an empty array and it's saying, hey, this empty array does not equal the expected array

104
00:06:29,170 --> 00:06:30,340
of six strings right here.

105
00:06:30,670 --> 00:06:36,280
So all that's left for us to do to pass this test is to go to our ally right here and to provide it

106
00:06:36,280 --> 00:06:38,080
with this new custom attribute.

107
00:06:38,080 --> 00:06:40,480
We're going to add it just like any other HTML attribute.

108
00:06:40,660 --> 00:06:42,520
We're just going to say data dashed test.

109
00:06:42,820 --> 00:06:44,860
That's exactly what we called it in our test.

110
00:06:44,860 --> 00:06:45,190
Right.

111
00:06:45,370 --> 00:06:47,680
And then what value is it going to have?

112
00:06:47,800 --> 00:06:50,650
It's going to have a value of main now list item.

113
00:06:52,210 --> 00:06:57,130
So remember this ally is being generated in a V for loop, which means we're actually going to have

114
00:06:57,130 --> 00:07:03,820
six allies and they're all going to have the exact same equal main novelist item data test attribute.

115
00:07:03,820 --> 00:07:07,990
I want to distinguish between this line right here and this line right here.

116
00:07:08,170 --> 00:07:10,810
Here we're using our V bind syntax with colon.

117
00:07:10,960 --> 00:07:16,480
So menu item is dynamically injected and it's going to be something different on every single iteration

118
00:07:16,720 --> 00:07:17,140
here.

119
00:07:17,140 --> 00:07:23,020
I'm not binding or anything like that, so I'm literally hard coding an attribute of data test and I'm

120
00:07:23,020 --> 00:07:26,380
giving it the value of main nav list item on all of our iterations.

121
00:07:26,500 --> 00:07:32,230
But that's totally fine for our tests because our tests are looking for all occurrences of that attribute

122
00:07:32,530 --> 00:07:39,220
and our tests now don't care about whether it's a list item or a DIV or an H3 or what class it has.

123
00:07:39,310 --> 00:07:43,630
It just cares about this attribute that exists purely for the purposes of the test, right?

124
00:07:43,900 --> 00:07:46,210
So again, another developer can change this.

125
00:07:46,330 --> 00:07:51,640
They can change this, but they're highly unlikely to change data test because it doesn't have anything

126
00:07:51,640 --> 00:07:56,410
to do with whatever new feature it happens to be that they're adding or whatever feature they're modifying.

127
00:07:56,410 --> 00:07:56,620
Right.

128
00:07:56,770 --> 00:07:58,390
That doesn't mean our test is perfect.

129
00:07:58,390 --> 00:07:59,950
It doesn't mean there's no chance for error.

130
00:08:00,160 --> 00:08:05,230
But I argue that it's less chance for error because this is something that exists purely for our tests

131
00:08:05,230 --> 00:08:09,670
and thus it's less likely to be accidentally modified in a way that breaks our tests.

132
00:08:09,940 --> 00:08:17,140
So I'm going to go ahead and run this test suite and we should see a passing result.

133
00:08:17,140 --> 00:08:17,920
And we do.

134
00:08:18,100 --> 00:08:24,670
And I think we have solved the problem that we previously had, which is the connection to our implementation.

135
00:08:24,880 --> 00:08:30,010
Now, you might say again, coming from a2d perspective, would we ever write a test like this?

136
00:08:30,190 --> 00:08:35,350
And I'd say we'd be certainly more likely to because we would again not be concerning ourselves with

137
00:08:35,350 --> 00:08:38,830
whether our implementation is eventually going to have an ally or a div.

138
00:08:39,070 --> 00:08:43,660
All we're going to say is my test expects that somewhere in my component I'm going to have a data test

139
00:08:43,660 --> 00:08:45,730
aptitude and that's all the test cares about.

140
00:08:45,880 --> 00:08:50,830
So there is still some inherent coupling with the knowledge of this, but it's not as closely connected

141
00:08:50,830 --> 00:08:52,720
to the H two balances itself.

142
00:08:52,900 --> 00:08:58,490
So I think it offers a better, more stable, more likely to not break solution.

143
00:08:58,490 --> 00:08:58,780
All right.

144
00:08:58,930 --> 00:09:00,490
And if I had to my browser right now.

145
00:09:01,580 --> 00:09:03,710
We're going to see how this reflects on our page.

146
00:09:03,710 --> 00:09:08,540
If I just open up my console and I take a look at this logic right here.

147
00:09:08,810 --> 00:09:15,050
You're going to see that we have this data test attribute right here, and the same for all of my actual

148
00:09:15,050 --> 00:09:15,620
allies.

149
00:09:15,860 --> 00:09:22,460
But it's just an arbitrary attribute that has no impact whatsoever on how this renders it exists purely

150
00:09:22,460 --> 00:09:23,720
for the purposes of my test.

151
00:09:23,730 --> 00:09:25,250
So no harm done.

152
00:09:25,460 --> 00:09:30,140
And now we have kind of isolated the implementation logic from the tests.

153
00:09:30,140 --> 00:09:31,280
The tests have to no less.

154
00:09:31,460 --> 00:09:31,700
Right.

155
00:09:31,940 --> 00:09:34,880
So that is definitely an improvement over what we had in the previous lesson.

156
00:09:35,060 --> 00:09:38,570
So I am happy to wrap this section up in the very next lesson.
