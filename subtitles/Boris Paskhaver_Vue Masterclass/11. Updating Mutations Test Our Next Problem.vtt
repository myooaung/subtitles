WEBVTT
1
00:00:00.520 --> 00:00:01.270
Okay.

2
00:00:01.270 --> 00:00:05.800
So our log in user test looks good so we can move on to our next mutation test.

3
00:00:06.130 --> 00:00:11.170
We can see right here we have our receive jobs test and we have a very similar error.

4
00:00:11.170 --> 00:00:16.450
Our first test reporting is TypeScript says, Hey, you're giving me a state object that doesn't fulfill

5
00:00:16.660 --> 00:00:18.070
the global state interface.

6
00:00:18.070 --> 00:00:24.820
I expect the receive job's mutation to receive a state parameter that is of type global state, and

7
00:00:24.820 --> 00:00:25.810
this doesn't fulfill it.

8
00:00:26.080 --> 00:00:30.400
Once again, we're going to be easily able to solve this problem by using our helper function at the

9
00:00:30.400 --> 00:00:30.730
above.

10
00:00:31.090 --> 00:00:33.220
So right here I'm going to call this starting state.

11
00:00:34.960 --> 00:00:40.630
And I'm going to invoke my create state function right here and I'm going to pass in the jobs array

12
00:00:40.630 --> 00:00:45.910
set to an empty array or the job's property to be more specific, because I want to communicate that

13
00:00:45.910 --> 00:00:50.670
that is the array that I am overwriting with the actual array of jobs that I receive.

14
00:00:51.070 --> 00:00:54.610
So right here I'm going to say starting state instead of state.

15
00:00:56.080 --> 00:00:57.730
And we're going to solve that problem.

16
00:00:57.730 --> 00:01:00.010
But TypeScript is going to move on to our next one.

17
00:01:00.340 --> 00:01:04.870
So notice here that we are passing in an array of strings representing our job objects.

18
00:01:05.080 --> 00:01:10.390
But right here, we told TypeScript that the second argument of jobs would be an array of job objects.

19
00:01:10.600 --> 00:01:15.580
So if I hover my mouse over here, you can see type string is not assignable to type job.

20
00:01:15.910 --> 00:01:18.910
TypeScript is telling us I want an array of jobs.

21
00:01:18.910 --> 00:01:20.980
I do not want an array of strings.

22
00:01:20.980 --> 00:01:22.030
That is a mismatch.

23
00:01:22.390 --> 00:01:25.040
So of course, our job objects are actually pretty complex.

24
00:01:25.060 --> 00:01:30.190
If I take a look at this interface in my separate file right here, my types, that's file we can see

25
00:01:30.190 --> 00:01:32.410
it has a lot of different details about it.

26
00:01:32.590 --> 00:01:37.210
And I don't want to have all of these properties within a test because it's going to make the test really

27
00:01:37.210 --> 00:01:37.540
long.

28
00:01:37.870 --> 00:01:43.450
So what I can do as a compromise is once again create another factory function whose responsibility

29
00:01:43.450 --> 00:01:47.200
will be to create a job object one very similar to this one.

30
00:01:47.410 --> 00:01:53.950
In fact, what I can do is even copy a sample job from my DB that JSON file because my response is there

31
00:01:53.950 --> 00:01:56.620
have this exact same interface that I expect.

32
00:01:56.950 --> 00:01:58.360
So let's make that happen.

33
00:01:58.360 --> 00:02:03.460
So at the very top of this file, I'm going to import my job interface because I'm going I'm going to

34
00:02:03.460 --> 00:02:05.380
need to use it, the one we just saw.

35
00:02:05.650 --> 00:02:07.150
So right here, I'm going to import.

36
00:02:08.670 --> 00:02:14.520
The job interface and that is going to come from my source directory API types right here.

37
00:02:15.120 --> 00:02:15.570
All right.

38
00:02:15.690 --> 00:02:21.210
And then right here, I'm going to define a new factory function and I'm going to call it Create Job.

39
00:02:22.650 --> 00:02:24.750
And it's going to be a function right here.

40
00:02:24.750 --> 00:02:28.080
And of course, what this function is going to return is going to be a job object.

41
00:02:28.320 --> 00:02:32.400
So I'm immediately going to provide that annotation.

42
00:02:32.400 --> 00:02:34.080
I'm going to provide that return value right here.

43
00:02:34.440 --> 00:02:39.960
So then I need to return a job, and I'm actually going to do the implicit return syntax in JavaScript.

44
00:02:40.200 --> 00:02:44.370
So in order to return an object, I'm just going to wrap this right here in parentheses, and that will

45
00:02:44.370 --> 00:02:47.070
be the object that is returned from my create job function.

46
00:02:47.370 --> 00:02:51.960
Of course, right now TypeScript is complaining because our object with no properties does not fulfill

47
00:02:52.470 --> 00:02:54.600
the job object that it expects to receive.

48
00:02:54.930 --> 00:03:00.000
So what I'm going to do here is I'm going to go to my DB, that JSON file, and I'm going to scroll

49
00:03:00.000 --> 00:03:01.080
down to my job section.

50
00:03:01.200 --> 00:03:05.400
And here is a sample job object that fulfills all of the properties of what a job needs.

51
00:03:05.670 --> 00:03:09.780
So I'm just going to copy these properties starting from ID and going all the way to date.

52
00:03:09.780 --> 00:03:16.170
Added is going to copy that and then paste that right here inside here and let prettier do the work.

53
00:03:16.440 --> 00:03:22.350
And for the purposes of what we need, I think if we kept the minimum qualifications array, the preferred

54
00:03:22.350 --> 00:03:27.540
qualifications array and the description array empty, that would not change anything because those

55
00:03:27.540 --> 00:03:32.160
arrays can technically be empty as string arrays, they can simply be an array of no strings.

56
00:03:32.340 --> 00:03:36.990
And I don't think that all of this additional string stuff helps us understand what a job is.

57
00:03:37.170 --> 00:03:39.450
I kind of adds more text, more content.

58
00:03:39.450 --> 00:03:40.710
It doesn't really need to exist.

59
00:03:40.920 --> 00:03:46.080
If there is a reason for those properties to have valid arrays of many strings, then we can always

60
00:03:46.080 --> 00:03:46.950
add them back later.

61
00:03:47.160 --> 00:03:51.510
But for now, to make this a little bit simpler to read, I'm simply going to make these arrays empty.

62
00:03:51.780 --> 00:03:53.460
So I'm going to remove the strings right here.

63
00:03:54.270 --> 00:03:57.360
I'm going to remove my preferred qualifications elements as well.

64
00:03:57.870 --> 00:04:01.650
I'm going to remove my description right here or the strings save that.

65
00:04:01.740 --> 00:04:07.020
And now we have a much cleaner job object that fulfills that interface of being a job, but also has

66
00:04:07.020 --> 00:04:10.020
kind of the required properties to do to play that role.

67
00:04:10.350 --> 00:04:14.910
However, as we talked about in the previous lesson, I also want to make my factory function flexible

68
00:04:14.910 --> 00:04:19.800
enough so that every task can provide it its own custom properties that it cares about.

69
00:04:20.010 --> 00:04:23.280
So I'm going to follow the exact same approach I did in the function above.

70
00:04:23.520 --> 00:04:30.960
I'm going to provide a config parameter and the type of config is going to be a partial job.

71
00:04:31.200 --> 00:04:35.190
So right here, the partial keyword from TypeScript, then my opening and closing brackets.

72
00:04:35.430 --> 00:04:41.100
And right here the argument is a partial job, which means it can be an object with any of these properties,

73
00:04:41.100 --> 00:04:43.080
but now all of them are going to be optional.

74
00:04:43.170 --> 00:04:48.930
So my config argument can have one of them, two of them, all of them or zero of them, and either

75
00:04:48.930 --> 00:04:49.830
approach will be fine.

76
00:04:49.980 --> 00:04:53.550
However, my config object cannot add any other properties.

77
00:04:53.790 --> 00:04:57.660
I can only honor the ones that a job has these ones right here.

78
00:04:57.840 --> 00:04:58.200
All right.

79
00:04:58.410 --> 00:05:04.110
And then, of course, I'm going to fall back to a empty object as the default argument in case a test

80
00:05:04.110 --> 00:05:09.360
just wants to invoke, create, job and not care, it can simply do so and we'll fall back to an empty

81
00:05:09.360 --> 00:05:09.690
object.

82
00:05:09.930 --> 00:05:14.610
And then whatever config I get, whether it's an empty object, whether it's one property, five properties,

83
00:05:14.610 --> 00:05:17.760
all properties, I'm simply going to do structure at the very end here.

84
00:05:17.970 --> 00:05:23.070
So it's going to overwrite the reasonable standards or defaults I have defined right here.

85
00:05:23.340 --> 00:05:28.320
So if, for example, a test wants to override minimum qualifications, it totally can.

86
00:05:28.320 --> 00:05:33.240
It can just give me a config object with that property set to an array of the strings that that test

87
00:05:33.240 --> 00:05:34.650
wants and all of this will work.

88
00:05:34.950 --> 00:05:40.680
So now in my receive jobs test, I can use my create job function.

89
00:05:40.920 --> 00:05:46.560
So right here in line, I'm just going to say job one and I'm going to simply invoke create job and

90
00:05:46.560 --> 00:05:47.940
down below job to.

91
00:05:49.470 --> 00:05:51.590
Is once again going to be invoke and create job.

92
00:05:51.600 --> 00:05:56.190
One more time, I don't really care about the details of the jobs because the purpose of this mutation

93
00:05:56.340 --> 00:06:01.560
is to simply receive an array of jobs and then overwrite the jobs property on my View Store State.

94
00:06:01.860 --> 00:06:05.730
So I don't really care if these jobs are identical, if they have all of the same properties.

95
00:06:05.880 --> 00:06:07.860
There's nothing custom that I want to pass in.

96
00:06:08.010 --> 00:06:12.750
If you want to pass on something custom like a different a title to each test so you can distinguish

97
00:06:12.750 --> 00:06:13.090
them.

98
00:06:13.110 --> 00:06:14.150
Nothing wrong with that.

99
00:06:14.160 --> 00:06:15.390
I'm just going to leave it like so.

100
00:06:15.660 --> 00:06:16.500
And right here.

101
00:06:16.770 --> 00:06:20.370
The mutation expects an array of jobs instead of an array of strings.

102
00:06:20.550 --> 00:06:23.430
So right here, I'm going to pass in job one and job two.

103
00:06:23.430 --> 00:06:25.050
Those are valid job objects.

104
00:06:25.290 --> 00:06:28.080
And of course, right here, instead of verifying the entire state.

105
00:06:28.320 --> 00:06:33.270
All I really care about on the starting state now is going to be in my jobs property.

106
00:06:33.390 --> 00:06:36.660
And after the mutation runs, I expect that to equal.

107
00:06:37.530 --> 00:06:39.900
My new array of jobs that I just passed in right here.

108
00:06:40.110 --> 00:06:42.150
So job one and job two.

109
00:06:42.630 --> 00:06:43.320
And there we go.

110
00:06:43.830 --> 00:06:44.280
All right.

111
00:06:44.550 --> 00:06:50.710
So now we're utilizing utilizing our create state factory function and communicating that jobs matters.

112
00:06:50.730 --> 00:06:52.830
That's the property that this test cares about.

113
00:06:52.980 --> 00:06:55.890
It's going to start out empty at the very end of the test.

114
00:06:56.070 --> 00:07:01.410
Jobs should now be equal to an array of two jobs instead of worrying about all of the complex properties

115
00:07:01.410 --> 00:07:02.130
that a job needs.

116
00:07:02.280 --> 00:07:06.330
I'm just going to let my factory function take care of that so this test doesn't worry about it.

117
00:07:06.510 --> 00:07:11.130
If a developer wants to know what the properties are in a job, they can always scroll up.

118
00:07:11.250 --> 00:07:14.370
But it's not required to understand what this test is doing.

119
00:07:14.400 --> 00:07:15.300
And that's what I like.

120
00:07:15.300 --> 00:07:16.350
I like the separation.

121
00:07:16.500 --> 00:07:21.090
I don't want to have two jobs in line here, each with ten different properties, because then this

122
00:07:21.090 --> 00:07:25.980
test will be 25 lines long, and it becomes hard to figure out that most of these properties don't really

123
00:07:25.980 --> 00:07:26.430
matter.

124
00:07:26.520 --> 00:07:31.560
We just need them to exist so that we have a job object because we need an array of jobs in order to

125
00:07:31.560 --> 00:07:34.590
pass that into our receive jobs mutation right here.

126
00:07:35.010 --> 00:07:35.370
All right.

127
00:07:35.370 --> 00:07:40.050
So moving right along and we're going to continue addressing our remaining tests in the next lesson.
