WEBVTT
1
00:00:00.450 --> 00:00:05.100
All right, in this lesson, I'd like us to practice creating a view.

2
00:00:05.310 --> 00:00:09.030
And in this case, the view will be for a single job.

3
00:00:09.030 --> 00:00:13.500
It's going to be a page that displays the details of a specific job.

4
00:00:13.740 --> 00:00:20.160
And the real reason we're doing this is so that I can show you the idea of a dynamic URL that has a

5
00:00:20.160 --> 00:00:22.290
dynamic segment of content.

6
00:00:22.590 --> 00:00:23.970
So let me show you what I mean here.

7
00:00:23.970 --> 00:00:30.030
Here I am on the official Google Careers website, and if I go to the jobs page, you'll notice we go

8
00:00:30.030 --> 00:00:32.040
to slash jobs, slash results.

9
00:00:32.040 --> 00:00:33.720
And that's exactly what we have in our app.

10
00:00:33.930 --> 00:00:36.600
And here we have a whole bunch of jobs listed.

11
00:00:36.600 --> 00:00:38.490
In fact, more than 5000 of them.

12
00:00:38.790 --> 00:00:41.460
Now, notice what happens to the path in the URL.

13
00:00:41.460 --> 00:00:46.950
When I click into a job, I'm going to click into this one and you'll see it's going to be slash jobs,

14
00:00:46.950 --> 00:00:51.000
slash results followed by this section of the URL.

15
00:00:51.150 --> 00:00:56.940
And it's basically a unique identifier, some kind of number followed by the title of the job.

16
00:00:57.270 --> 00:01:01.740
Now, notice what happens when I navigate to the next job, for example, in this list?

17
00:01:02.130 --> 00:01:07.470
Well, we're still going to keep the core URL slash job, slash results, but then we're simply going

18
00:01:07.470 --> 00:01:12.540
to swap the ID, the job ID that appears immediately after that prefix.

19
00:01:12.720 --> 00:01:18.720
And that applies as I keep going to the next couple of jobs, you'll see that ID is switching.

20
00:01:19.470 --> 00:01:21.240
So here's the question I have for you.

21
00:01:21.570 --> 00:01:30.150
If this site has 5000 jobs, are we supposed to create 5000 different URLs in order to render 5000 of

22
00:01:30.150 --> 00:01:31.830
the same component over and over again?

23
00:01:32.010 --> 00:01:33.870
Well, obviously, that is not the right idea.

24
00:01:33.870 --> 00:01:36.000
That is not scalable, that is exhausting.

25
00:01:36.300 --> 00:01:42.630
So we need some way in Vue router to capture this idea of having a URL that has some kind of dynamic

26
00:01:42.630 --> 00:01:49.290
content, basically a URL that is slash jobs, slash results, followed by some kind of identifier that

27
00:01:49.290 --> 00:01:50.640
we cannot know in advance.

28
00:01:51.000 --> 00:01:57.180
And then for that single root, which has a dynamic section, we can tell Vue router to mount the same

29
00:01:57.180 --> 00:01:57.870
component.

30
00:01:58.380 --> 00:01:58.710
All right.

31
00:01:58.830 --> 00:02:02.910
Now, if you're curious more about how something like this works in the real world, the way it works

32
00:02:02.910 --> 00:02:08.610
is whenever we access one of these components and the URL changes, what the page does is it takes this

33
00:02:08.610 --> 00:02:14.160
unique identifier and it makes an API request to the backend to fetch data about this job.

34
00:02:14.430 --> 00:02:20.370
And that way the URL stays the same when it switches, the page simply makes a new request to get the

35
00:02:20.370 --> 00:02:25.740
new IDs job and then rebuilds the page with the new information that it gets.

36
00:02:26.010 --> 00:02:31.890
So the URL is different technically from page to page, but the structure of it is the same.

37
00:02:31.890 --> 00:02:36.120
And so we only need one URL in our view router to configure this logic.

38
00:02:36.570 --> 00:02:43.110
So let me transition to the code and the first thing I want to do is to create a view component.

39
00:02:43.350 --> 00:02:48.330
And when I say view, I mean an actual component in our views folder and it's going to represent a single

40
00:02:48.420 --> 00:02:49.500
job page.

41
00:02:49.500 --> 00:02:54.660
So a page where the user can go to see the information about one job in our system.

42
00:02:54.930 --> 00:02:56.850
So I'm going to create that component here.

43
00:02:56.850 --> 00:02:58.920
I'm going to call it job view, dot view.

44
00:03:00.780 --> 00:03:03.960
And of course, I'm going to wire it up with a template tag right here.

45
00:03:04.230 --> 00:03:05.640
Let me zoom in a little bit for you.

46
00:03:05.670 --> 00:03:06.330
There we go.

47
00:03:06.630 --> 00:03:11.760
And for now, I'll just put a div here that says job page as simple as I can do.

48
00:03:12.120 --> 00:03:19.480
We'll add a script tag and we'll export default a JavaScript object with a name property set to job

49
00:03:19.480 --> 00:03:19.770
view.

50
00:03:20.310 --> 00:03:22.020
We don't really care about this view right now.

51
00:03:22.170 --> 00:03:24.060
We may not even worry about it throughout the course.

52
00:03:24.090 --> 00:03:28.800
I just need some kind of view, some kind of component that I can tell a view or to render any given

53
00:03:28.800 --> 00:03:29.070
room.

54
00:03:29.490 --> 00:03:33.270
So let's now head into our router index tags file.

55
00:03:33.990 --> 00:03:38.700
And as we know here, we have an array of routes and we've now added a new view to our app.

56
00:03:38.910 --> 00:03:42.900
So we need to import it into the file and then create a new route for it.

57
00:03:43.200 --> 00:03:45.810
So let's begin by importing it right here.

58
00:03:46.170 --> 00:03:52.170
We're going to import our new job view component, and that is going to come from the source directory

59
00:03:52.170 --> 00:03:54.030
view's job view.

60
00:03:55.070 --> 00:03:58.220
And let me add on that view extension to be consistent with the ones above.

61
00:03:58.460 --> 00:04:01.510
And then, of course, I need to create a new route object.

62
00:04:01.550 --> 00:04:04.490
So right here at the very end, I'll do that.

63
00:04:04.730 --> 00:04:10.470
And the first property, as always, is the path we know that we always want to begin with.

64
00:04:10.520 --> 00:04:13.060
Jobs slash, results slash.

65
00:04:13.070 --> 00:04:16.130
And here's where we get to that dynamic piece of content.

66
00:04:16.130 --> 00:04:16.370
Right?

67
00:04:16.380 --> 00:04:21.530
We need to tell you, router, that I need you to match anything after this slash it can be anything

68
00:04:21.530 --> 00:04:27.200
can be a job slash result slash one or slash two or slash some kind of collection of characters.

69
00:04:27.380 --> 00:04:30.520
We don't want a hard code, a value like jobs of results.

70
00:04:30.530 --> 00:04:35.390
We want to tell the router that it's something dynamic, something variable, something that has the

71
00:04:35.390 --> 00:04:36.290
potential to change.

72
00:04:36.530 --> 00:04:38.360
But we still need it to recognize that.

73
00:04:38.720 --> 00:04:45.740
So the way we do that is with a colon followed by an identifier, and that identifier is up to you.

74
00:04:45.890 --> 00:04:50.540
It's almost you can think of it like assigning a variable to this section of the URL.

75
00:04:50.720 --> 00:04:56.420
And what Vue router is going to do is give us access to this piece of information in the root object

76
00:04:56.510 --> 00:04:59.450
that every component has access to via this dot root.

77
00:04:59.750 --> 00:05:01.610
So we can call this whatever you want.

78
00:05:01.730 --> 00:05:07.910
I think a good name or identifier to use here is ID because it is the idea of a job.

79
00:05:08.180 --> 00:05:10.670
So this section and its name is up to you.

80
00:05:10.670 --> 00:05:14.740
You can do colon ID, you can do colon job ID, it's up to you.

81
00:05:14.750 --> 00:05:19.790
Just know that whatever you choose here is important because it will be the property that will be available

82
00:05:19.790 --> 00:05:23.510
to you on the this dot root object, which we'll see in the next lesson.

83
00:05:23.900 --> 00:05:29.720
So now Vue will match anything after slash job slash results and whatever it is here, let's say it's

84
00:05:29.720 --> 00:05:30.230
the character.

85
00:05:30.230 --> 00:05:31.070
One, two, three.

86
00:05:31.250 --> 00:05:36.920
It's going to store that in a property called ID and if it's ABC, then it's going to store that ABC

87
00:05:36.920 --> 00:05:38.990
value in our ID property.

88
00:05:39.680 --> 00:05:44.480
And remember, you have to put a colon because obviously if you do not put a colon, then you is going

89
00:05:44.480 --> 00:05:50.540
to think the actual path is slash jobs, slash results, slash ID, and it's not actually the letters

90
00:05:50.540 --> 00:05:55.790
ID, it is a dynamic variable name called ID that we have decided to make dynamic.

91
00:05:55.910 --> 00:06:00.410
And the colon is the key symbol that tells you that that is the case.

92
00:06:00.800 --> 00:06:01.130
All right.

93
00:06:01.130 --> 00:06:02.870
So we also need tumor properties here.

94
00:06:03.590 --> 00:06:05.900
Of course, we need a name for this path.

95
00:06:05.900 --> 00:06:08.540
I'm just going to call it job listing, because that's what it does.

96
00:06:08.540 --> 00:06:10.730
It shows a single job listing.

97
00:06:11.030 --> 00:06:16.070
And then, of course, the starter component that's going to kick everything off that our router view

98
00:06:16.070 --> 00:06:17.600
will render below the main NAV.

99
00:06:17.810 --> 00:06:22.400
And of course it is our new job view component that we just created and import it.

100
00:06:22.760 --> 00:06:23.090
All right.

101
00:06:23.240 --> 00:06:25.070
So that is a good place to leave off.

102
00:06:25.070 --> 00:06:31.100
In the very next lesson, we're going to see how we can access this dynamic ID variable in our root

103
00:06:31.100 --> 00:06:31.610
object.
