WEBVTT
1
00:00:01.060 --> 00:00:07.420
So let's go ahead and write our first assertion for our main NAV component, and let's try to write

2
00:00:07.420 --> 00:00:09.130
the simplest tests that we can.

3
00:00:09.460 --> 00:00:12.160
What do we really care about when it comes to this test?

4
00:00:12.190 --> 00:00:13.660
Well, we want to test that.

5
00:00:13.660 --> 00:00:16.180
The component displays the company name.

6
00:00:16.420 --> 00:00:20.530
We don't really care about the internal HTML elements in the main NAV component.

7
00:00:20.680 --> 00:00:22.000
We don't care about the styles.

8
00:00:22.210 --> 00:00:27.310
All we really care about is a piece of text being rendered, and that piece of text is going to be our

9
00:00:27.310 --> 00:00:31.000
company name, which for me we know is bubble careers.

10
00:00:31.330 --> 00:00:38.380
So if we know that our text method returns a string with all of the text insider component, we can

11
00:00:38.380 --> 00:00:40.600
see the output right here from the previous lesson.

12
00:00:40.870 --> 00:00:47.140
What we can do is check that somewhere in the text of our wrapper, or in other words, somewhere in

13
00:00:47.140 --> 00:00:48.370
the text of our component.

14
00:00:48.580 --> 00:00:51.430
There should be the string bobo careers.

15
00:00:51.760 --> 00:00:54.760
So what I'm going to do is I'm going to remove this console.log.

16
00:00:56.400 --> 00:00:59.970
And instead of that, I'm going to put my expect function.

17
00:00:59.970 --> 00:01:01.980
We should be familiar with this by now.

18
00:01:01.980 --> 00:01:03.660
This is our expectation.

19
00:01:03.660 --> 00:01:06.510
This is what just is going to evaluate for us.

20
00:01:06.720 --> 00:01:11.130
It's going to invoke the text method and it's going to get this, which is bobble careers.

21
00:01:11.460 --> 00:01:17.370
Now, I do not think it's a good idea to use the to be matcher for strict equality here, because that's

22
00:01:17.370 --> 00:01:19.380
going to make our test more prone to failure.

23
00:01:19.680 --> 00:01:26.560
Right now, our text does include Bobo careers, but later on we might have additional text on our main

24
00:01:26.560 --> 00:01:28.320
nav such as our links.

25
00:01:28.530 --> 00:01:32.970
So I don't want to do an exact strain comparison with rapper text.

26
00:01:33.180 --> 00:01:37.800
All I really want to check is that rapper text includes Bobo careers.

27
00:01:37.920 --> 00:01:40.320
Somewhere in that blob of text.

28
00:01:40.530 --> 00:01:45.900
I don't really care where as long as our company name appears somewhere in the text of this component.

29
00:01:46.080 --> 00:01:51.300
That's really all I care about and that ensures the test is as flexible as possible and less likely

30
00:01:51.300 --> 00:01:52.380
to break in the future.

31
00:01:52.680 --> 00:01:58.650
So for that, instead of using the to be matcher, I'm going to use a different matcher called to match.

32
00:02:00.290 --> 00:02:00.650
All right.

33
00:02:00.920 --> 00:02:06.470
And what this really checks for is that the string or the irregular expression that we pass, that we

34
00:02:06.470 --> 00:02:09.920
pass as an argument here is found somewhere in here.

35
00:02:10.190 --> 00:02:15.350
So in this case, whatever we pass in here and I'm going to pass bubble careers, we're testing that

36
00:02:15.350 --> 00:02:19.100
bubble careers is going to be found somewhere in the components text.

37
00:02:19.340 --> 00:02:22.100
Right now, the only text is bubble careers.

38
00:02:22.280 --> 00:02:27.140
But if this expands, the to match matching will still pass because it's going to be looking for the

39
00:02:27.140 --> 00:02:29.780
inclusion of this string anywhere in here.

40
00:02:29.870 --> 00:02:30.170
All right.

41
00:02:30.440 --> 00:02:35.750
So I'm going to save this and I'm going to run my test suite, and we should see a passing suite.

42
00:02:39.080 --> 00:02:40.140
And there we go.

43
00:02:40.160 --> 00:02:45.560
We have a passing suite, so the component is able to find that text of bubble careers.

44
00:02:45.770 --> 00:02:49.100
Let me show you how this would have worked if we had done TDD instead.

45
00:02:49.340 --> 00:02:52.430
So I'm going to take my main NAV component and bring it over here to the right.

46
00:02:52.790 --> 00:02:57.920
Hypothetically, if we were building this out using TDD, well, we would have written this text first

47
00:02:57.920 --> 00:02:59.510
or this test first, rather.

48
00:02:59.750 --> 00:03:04.190
And this hyperlink here that has our company name would not have been included yet.

49
00:03:04.190 --> 00:03:06.560
So we can imagine our component would look like this.

50
00:03:06.560 --> 00:03:13.070
Right now I'm just going to temporarily comment out the code here with the bubble careers company interpolation.

51
00:03:13.250 --> 00:03:16.010
And when I run my test suite we can see that now it will fail.

52
00:03:16.250 --> 00:03:17.900
So this would have been the TDD approach.

53
00:03:17.900 --> 00:03:20.210
We would have said, what's the responsibility of Main?

54
00:03:20.210 --> 00:03:22.430
Now we want to display the company name.

55
00:03:22.520 --> 00:03:28.370
So somewhere in May now we want to have bubble careers and notice that the implementation would be up

56
00:03:28.370 --> 00:03:28.850
to us.

57
00:03:28.970 --> 00:03:35.090
We can have the text of bubble careers in a header, in an H1 and an H2 in a hyperlink.

58
00:03:35.100 --> 00:03:36.230
It doesn't really matter.

59
00:03:36.350 --> 00:03:41.030
We're not getting super deep into the implementation in the tests, which we shouldn't.

60
00:03:41.180 --> 00:03:43.400
We really want to test behavior and purpose.

61
00:03:43.670 --> 00:03:46.370
Instead, we're just saying somewhere we expect this text.

62
00:03:46.610 --> 00:03:50.120
So there's many different ways we can solve this problem in our main nav component.

63
00:03:50.300 --> 00:03:55.640
And so following TDD, I would have then written our hyperlink with our Bubble Careers text.

64
00:03:56.640 --> 00:04:02.730
And irrespective of how I implemented it, whether I hardcoded Bobo careers here or I interpolated the

65
00:04:02.730 --> 00:04:07.980
value of a company variable from data, it doesn't really matter because the test doesn't care about

66
00:04:07.980 --> 00:04:08.730
the implementation.

67
00:04:08.850 --> 00:04:10.410
It cares about the general purpose.

68
00:04:10.560 --> 00:04:10.860
All right.

69
00:04:11.130 --> 00:04:13.680
So here we have successfully passed everything.

70
00:04:13.680 --> 00:04:16.980
So this is our first successful test in view.

71
00:04:17.190 --> 00:04:17.520
All right.

72
00:04:17.760 --> 00:04:19.870
That's all there is to cover in this lesson.

73
00:04:19.890 --> 00:04:21.240
So I'll see you in the next one.
