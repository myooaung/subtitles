WEBVTT
1
00:00:00.630 --> 00:00:01.650
Okay.

2
00:00:01.650 --> 00:00:08.670
So one of the U.S. store state now has a selected organisations property which will start out as an

3
00:00:08.670 --> 00:00:09.330
empty array.

4
00:00:09.600 --> 00:00:15.360
Eventually, when view is alerted that there is a new array of selected organisations.

5
00:00:15.450 --> 00:00:17.850
We want to update this slice of state.

6
00:00:18.180 --> 00:00:23.790
While whenever we want to modify the existing view state, we have to run a mutation.

7
00:00:24.060 --> 00:00:29.280
So I want to define that mutation method, but once again we're going to follow a test driven development

8
00:00:29.280 --> 00:00:33.960
approach, which means we're going to write our test first, then we're going to write the implementation.

9
00:00:34.260 --> 00:00:39.750
So right here in my test file of index, that test that yes, we have a whole section where we are writing

10
00:00:39.750 --> 00:00:41.190
our tests for mutations.

11
00:00:41.430 --> 00:00:46.230
So right here within this described block I'm going to create another described BLOCK And I'm going

12
00:00:46.230 --> 00:00:50.790
to write a test that's going to test the solution that I want to have.

13
00:00:51.060 --> 00:00:57.990
So right here, I'll describe a sample mutation and let's say we'll call this mutation, add selected

14
00:00:57.990 --> 00:00:58.830
organizations.

15
00:00:59.130 --> 00:01:01.650
So right here, add selected organizations.

16
00:01:03.520 --> 00:01:05.800
And then we're going to write the code we wish we had.

17
00:01:05.800 --> 00:01:06.340
So.

18
00:01:07.740 --> 00:01:10.380
What is this mutation going to be responsible for?

19
00:01:10.800 --> 00:01:16.350
It updates organizations that the user.

20
00:01:17.330 --> 00:01:24.650
Has chosen to filter jobs by trying to be as explicit as I can in describing the value of this mutation

21
00:01:25.070 --> 00:01:26.990
and how it pertains to the Duke store.

22
00:01:27.380 --> 00:01:27.770
Okay.

23
00:01:27.950 --> 00:01:30.470
So as always, the same testing principles apply.

24
00:01:30.500 --> 00:01:36.350
Remember, our mutation is going to be a plain JavaScript method, and the first argument to mutation

25
00:01:36.350 --> 00:01:39.590
will always be the current view X store state.

26
00:01:39.800 --> 00:01:44.630
And if we want to provide any secondary arguments, they must come after the first parameter, which

27
00:01:44.630 --> 00:01:48.680
is always going to be the state and which view X will automatically pass in.

28
00:01:49.040 --> 00:01:53.240
So in this scenario, we're going to have an implementation that is very similar to our received jobs

29
00:01:53.240 --> 00:01:53.780
mutation.

30
00:01:53.990 --> 00:01:59.000
Our first argument is going to be the state, and the second argument is going to be the array of strings,

31
00:01:59.150 --> 00:02:00.560
the array of organizations.

32
00:02:00.860 --> 00:02:06.440
So the way that it works in our component is we're always going to get a brand new array and we're always

33
00:02:06.440 --> 00:02:08.990
going to pass that array up into the mutation.

34
00:02:09.200 --> 00:02:12.380
In other words, we're not just going to get the new string or anything like that.

35
00:02:12.530 --> 00:02:17.450
We're going to get the new array that stores all of the currently selected checkbox organizations.

36
00:02:17.690 --> 00:02:23.330
So what I'm really getting at is whatever array we get, we can feel comfortable overriding the current

37
00:02:23.330 --> 00:02:26.090
selected organization's property in our view state.

38
00:02:26.330 --> 00:02:30.500
Because the new array we get represents the most up to date version of that state.

39
00:02:30.650 --> 00:02:30.980
Right?

40
00:02:31.280 --> 00:02:33.680
So right here, let's write a test.

41
00:02:34.070 --> 00:02:40.580
I'm going to begin by starting with a basic piece of state, and it's going to be an object that's going

42
00:02:40.580 --> 00:02:44.960
to have a property of selected organizations set to an empty array.

43
00:02:45.170 --> 00:02:50.660
Once again, we do not need to emulate the entire view extra state so we don't care about the is logged

44
00:02:50.660 --> 00:02:55.970
in or jobs property because as far as the mutation is concerned, the mutation only cares about having

45
00:02:56.000 --> 00:02:59.990
a state object with this property because this is the one it's eventually going to modify.

46
00:03:00.320 --> 00:03:06.710
So I have my mutations object imported into this test file and I'm going to assume on my mutations object.

47
00:03:06.860 --> 00:03:10.810
There's now going to be a method called ADD Selected Organizations.

48
00:03:10.820 --> 00:03:16.940
That's the exact same name I chose above and just like we talked about with mutations.

49
00:03:17.060 --> 00:03:19.310
The first argument is always going to be the state.

50
00:03:19.520 --> 00:03:21.620
So we're going to pass in our sample state above.

51
00:03:21.830 --> 00:03:24.050
And the second argument can be whatever we want.

52
00:03:24.260 --> 00:03:29.570
So obviously in this case, it's going to be the new array of organizations that the user has selected

53
00:03:29.690 --> 00:03:32.300
based on the checkboxes that we have in our component.

54
00:03:32.600 --> 00:03:38.810
So for example, let's just provide an array of two values maybe or one for organization one and or

55
00:03:38.810 --> 00:03:39.140
two.

56
00:03:39.650 --> 00:03:42.560
It really doesn't matter how many strings we have in this array.

57
00:03:42.590 --> 00:03:45.500
All we really care about is whatever array we get here.

58
00:03:45.710 --> 00:03:50.900
After the mutation is done running, we expect our state to have this new array that we are receiving.

59
00:03:51.140 --> 00:03:57.680
So after my mutation is complete and my state has been modified, I expect that my original state object

60
00:03:57.680 --> 00:03:58.580
is going to be different.

61
00:03:58.820 --> 00:04:00.410
It should now equal an object.

62
00:04:01.660 --> 00:04:04.570
But still going to have a selected organization's property.

63
00:04:04.750 --> 00:04:09.190
However, instead of being an empty array, we want it to be this array that we received.

64
00:04:09.400 --> 00:04:15.250
So right here, after the mutation is done, we expect that we have overwritten our original selected

65
00:04:15.250 --> 00:04:18.730
organization's property in our View X Store, and that's what we're testing here.

66
00:04:19.120 --> 00:04:19.480
All right.

67
00:04:19.720 --> 00:04:21.730
So, of course, our test is going to fail.

68
00:04:21.730 --> 00:04:25.780
The first failure we're going to get predictably is that that mutation does not exist.

69
00:04:25.930 --> 00:04:30.790
So as always, let's use try to just to make it happen, to make it pass.

70
00:04:31.060 --> 00:04:34.060
So the first thing I need to do is to make sure a mutation like this exists.

71
00:04:34.270 --> 00:04:37.480
So right here, I'm going to define a constant that I'm going to export.

72
00:04:38.260 --> 00:04:42.250
And the only reason I'm putting it here is because it's tangentially related to organizations.

73
00:04:42.400 --> 00:04:46.390
Later on, we may split our constants based on the responsibility, but for now, I'm just going to

74
00:04:46.390 --> 00:04:48.370
put all my constants up here.

75
00:04:48.790 --> 00:04:49.120
All right.

76
00:04:49.120 --> 00:04:51.460
So I'm going to say add selected organizations.

77
00:04:51.460 --> 00:04:55.660
Once again, we're defining a constant because that avoids the chance for typos.

78
00:04:55.660 --> 00:05:00.280
Later, we're going to use this constant as our mutation name and later on in a component.

79
00:05:00.280 --> 00:05:04.990
If we want to use something like map mutations, we can easily import this constant and make sure we

80
00:05:04.990 --> 00:05:06.220
have the correct string value.

81
00:05:06.520 --> 00:05:08.620
So let me just double check that my typing is correct here.

82
00:05:08.620 --> 00:05:11.230
Add selected organizations right here.

83
00:05:11.230 --> 00:05:12.620
Add selected organizations.

84
00:05:12.620 --> 00:05:13.180
It looks good.

85
00:05:13.450 --> 00:05:18.790
Then in my mutations object right here, I'm going to use that constant to define a method of the same

86
00:05:18.790 --> 00:05:19.150
name.

87
00:05:19.360 --> 00:05:25.780
And as always, we know that the very first argument, the automatic thing that view X will pass into

88
00:05:25.780 --> 00:05:30.910
a mutation when it runs, it is going to be the current view X Store state and the other arguments are

89
00:05:30.910 --> 00:05:38.370
up to us and we defined in our test that we are going to pass in a argument of the array of organizations.

90
00:05:38.410 --> 00:05:40.780
So right here I'm going to define a parameter of organizations.

91
00:05:41.050 --> 00:05:45.640
So what this basically means, as in our component, whenever we commit this mutation, we have to make

92
00:05:45.670 --> 00:05:50.890
sure that we provide the array because this mutation expects an argument in addition to the implicit

93
00:05:50.890 --> 00:05:56.680
one, a state, it expects an explicit one that we will provide the array of strings representing the

94
00:05:56.680 --> 00:05:58.180
user's selected organizations.

95
00:05:58.420 --> 00:06:00.520
So right here, let me just provide my.

96
00:06:02.600 --> 00:06:06.590
Function syntax and save this just so we can move on to the very next error.

97
00:06:06.800 --> 00:06:11.390
Right now we should see that we move on to a different error because now the mutation exists.

98
00:06:11.660 --> 00:06:13.700
So now our test is going to tell us the failure.

99
00:06:13.880 --> 00:06:18.140
Hey, you told me that the object should have a selected organization's property.

100
00:06:18.260 --> 00:06:20.380
That's going to be an array of these two values.

101
00:06:20.390 --> 00:06:21.410
Or one and or two.

102
00:06:21.590 --> 00:06:24.860
But actually selected organizations is an array with no values.

103
00:06:25.010 --> 00:06:28.760
That's exactly what we expect, because right now we're not doing anything in our mutation.

104
00:06:29.000 --> 00:06:32.000
So let's make our mutation do exactly what it's supposed to do.

105
00:06:32.150 --> 00:06:36.350
It's going to take the current view store state represented by the first parameter state.

106
00:06:36.800 --> 00:06:40.340
And on that state, we're going to have a selected organization's property right here.

107
00:06:40.610 --> 00:06:46.310
And I want to take it and I want to overwrite it with the new array of strings that I'm receiving represented

108
00:06:46.310 --> 00:06:47.900
by my organization's property.

109
00:06:48.070 --> 00:06:48.350
Right.

110
00:06:48.500 --> 00:06:51.100
And we're always again going to be getting a new array.

111
00:06:51.140 --> 00:06:55.240
So it's totally alright to replace our property with the new array.

112
00:06:55.250 --> 00:07:01.640
It's not like we have to concatenate it or, you know, extract its individual elements.

113
00:07:01.760 --> 00:07:05.690
We're not adding on to an original array, we're not trying to preserve the original elements.

114
00:07:05.840 --> 00:07:10.850
We're getting an organization's array that represents the most up to date version of selected organizations,

115
00:07:11.000 --> 00:07:15.110
and we're simply overwriting our original property each and every time this mutation runs.

116
00:07:15.380 --> 00:07:16.760
So the user's going to click a checkbox.

117
00:07:16.880 --> 00:07:20.720
We're going to have an array with one string, we're going to overwrite the state of the View Store.

118
00:07:20.930 --> 00:07:22.970
Then the user is going to click another checkbox.

119
00:07:23.060 --> 00:07:24.780
Now the array will have two strings.

120
00:07:24.800 --> 00:07:27.410
We're going to get that array of two strings.

121
00:07:27.410 --> 00:07:32.210
The second time this mutation runs were once again going to replace it, etc. If you have three mutations,

122
00:07:32.330 --> 00:07:39.080
etc. If the user removes a mutation or removes a organization, we get an array of one less value.

123
00:07:39.080 --> 00:07:44.180
We once again continue overwriting the selected organization's property each time this mutation runs.

124
00:07:44.390 --> 00:07:49.550
And again, our intent in the component is to commit this mutation every single time the user interacts

125
00:07:49.550 --> 00:07:50.240
with the checkbox.

126
00:07:50.600 --> 00:07:55.430
So I'm going to save this code and with that we should see a passing test.

127
00:07:55.430 --> 00:07:55.670
We.

128
00:07:57.850 --> 00:07:58.720
And indeed we do.

129
00:07:58.870 --> 00:08:00.850
So now we have our view next door state.

130
00:08:00.860 --> 00:08:03.040
We have a mutation that's going to override it.

131
00:08:03.160 --> 00:08:07.930
And in the very next lesson, we can bring it all together by having our component commit this mutation

132
00:08:08.080 --> 00:08:13.270
and save the array of selected values every time the user works with a checkbox.
