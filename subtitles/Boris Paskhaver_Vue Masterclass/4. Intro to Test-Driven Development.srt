1
00:00:00,390 --> 00:00:07,080
In this lesson, I want to introduce you to test driven development, which often goes by the acronym

2
00:00:07,080 --> 00:00:08,460
TDD.

3
00:00:08,820 --> 00:00:13,740
It's going to be a little bit of a mind blowing concept if you've never heard of it before or if you're

4
00:00:13,740 --> 00:00:14,970
brand new to testing.

5
00:00:15,210 --> 00:00:17,430
But here's the basic gist of TDD.

6
00:00:17,850 --> 00:00:21,240
With TDD, we write our tests first.

7
00:00:21,600 --> 00:00:25,740
We write our actual tests before we write the implementation code.

8
00:00:26,160 --> 00:00:31,140
So if we think back to our previous lesson where we wrote our even or odd function and then wrote our

9
00:00:31,140 --> 00:00:32,160
tests before it.

10
00:00:32,400 --> 00:00:38,460
Imagine that we actually wrote our tests for that function first before we actually had any implementation

11
00:00:38,460 --> 00:00:38,760
code.

12
00:00:39,150 --> 00:00:44,490
A lot of people are blown away by this idea because their first response is, How can I write tests

13
00:00:44,490 --> 00:00:47,070
for something for which I don't actually have any code yet?

14
00:00:47,970 --> 00:00:52,980
Well, it's actually a kind of brilliant idea in that you write your test and you describe what your

15
00:00:52,980 --> 00:00:57,990
thing should be called, your entity, whether it be a class or a function or method, what its what

16
00:00:57,990 --> 00:01:03,120
its inputs are going to be, what you're going to provide it, and what you expect the result to be.

17
00:01:03,390 --> 00:01:08,610
And the smart part about that, as you describe exactly how the program should work before you actually

18
00:01:08,610 --> 00:01:10,060
write the implementation.

19
00:01:10,060 --> 00:01:13,650
And there's a lot of benefits to that that we'll talk about in just a few minutes.

20
00:01:13,860 --> 00:01:17,300
For now, I want to talk about the cycle of how TDD works.

21
00:01:17,310 --> 00:01:21,810
It's a three step process that repeats and it's called red green refactor.

22
00:01:22,110 --> 00:01:24,840
So let's start with this red circle at the very top.

23
00:01:24,870 --> 00:01:27,060
This is called the red stage or the red phase.

24
00:01:27,390 --> 00:01:29,520
So this is where we write a test.

25
00:01:29,530 --> 00:01:33,810
We write a test that describes what a specific piece of our program should do.

26
00:01:34,140 --> 00:01:37,560
The reason it's called Red is you can think of something like a stoplight.

27
00:01:37,560 --> 00:01:38,910
Red means stop.

28
00:01:38,910 --> 00:01:40,530
Red means do not proceed.

29
00:01:40,980 --> 00:01:47,550
Red means our tests are going to be failing and they're predictably going to be failing because the

30
00:01:47,550 --> 00:01:53,970
assertions that we're going to make them cannot possibly succeed or pass because we have no actual code

31
00:01:54,180 --> 00:01:55,800
to properly execute.

32
00:01:55,800 --> 00:01:56,070
Right.

33
00:01:56,250 --> 00:02:01,890
If we're testing that, a method on an object returns a specific value and that object and that method

34
00:02:01,890 --> 00:02:02,670
don't exist yet.

35
00:02:02,850 --> 00:02:08,490
Well, of course, our test is going to fail, and that is the intent, because now that our tests are

36
00:02:08,490 --> 00:02:14,220
going to describe the value of the software they're about to write, we can move on to the next circle

37
00:02:14,220 --> 00:02:15,930
in this diagram, which is green.

38
00:02:16,200 --> 00:02:22,170
In the green stage of TDD, we write the implementation code that makes the tests pass.

39
00:02:22,170 --> 00:02:22,500
Right?

40
00:02:22,740 --> 00:02:27,360
And the beautiful part about this design is we can guarantee that the code we're writing is actually

41
00:02:27,360 --> 00:02:30,600
fulfilling what the tests expect the code to do.

42
00:02:30,810 --> 00:02:35,880
It ensures that we're not going to write any additional code or any extra code or not needed code.

43
00:02:36,060 --> 00:02:39,240
We're just going to write whatever is the bare minimum amount of code.

44
00:02:39,390 --> 00:02:46,830
We need to get that single test to pass to run green and our just output green means go, green means

45
00:02:46,830 --> 00:02:48,150
pass when it comes to test.

46
00:02:48,600 --> 00:02:51,150
Now the final step is the refactor step.

47
00:02:51,150 --> 00:02:55,950
So once we've written our failing tests, once we fix them with our implementation, we now have our

48
00:02:55,950 --> 00:03:01,950
tests as our confidence booster, as our backup that we have the confidence to refactor our code.

49
00:03:02,160 --> 00:03:07,020
To refactor our code means to improve code without changing its underlying purpose.

50
00:03:07,230 --> 00:03:13,080
So now if we can come up with a slightly better implementation or a more efficient solution to the problem

51
00:03:13,080 --> 00:03:19,830
in our JavaScript, we can do that and then again run the tests over and over to confirm that we are

52
00:03:19,830 --> 00:03:25,350
still delivering on the tests expectation and the code is doing what it's supposed to do and what we

53
00:03:25,350 --> 00:03:27,690
want it to do from the very beginning.

54
00:03:27,720 --> 00:03:28,080
Right.

55
00:03:28,320 --> 00:03:31,200
So there's a purpose to the code that we write.

56
00:03:31,200 --> 00:03:36,750
We guarantee that it is doing the thing that we need it to do as described in the tests.

57
00:03:36,990 --> 00:03:41,490
It's almost like declaring the wish of What do I want this code to do?

58
00:03:41,610 --> 00:03:45,060
What do I need it to accept, and what do I need it to output for me?

59
00:03:45,240 --> 00:03:49,670
And you write that you you guarantee that you're living up to that expectation.

60
00:03:49,830 --> 00:03:54,720
And then once you've lived up to it, you have the opportunity to improve your code and have that test

61
00:03:54,720 --> 00:04:00,240
suite behind you as backup to confirm that nothing that you added accidentally broke the code.

62
00:04:00,450 --> 00:04:00,630
Right.

63
00:04:00,630 --> 00:04:01,680
That's the entire cycle.

64
00:04:01,680 --> 00:04:06,090
We write a failing test, we make it pass, we make the code better, then we repeat the cycle.

65
00:04:06,270 --> 00:04:10,230
The whole idea is we should never be writing green code.

66
00:04:10,230 --> 00:04:16,500
We should never be writing any new code unless its purpose is to fix a failing test, which means adding

67
00:04:16,500 --> 00:04:22,170
some kind of new feature or functionality into our program that we've now declared a need for in our

68
00:04:22,170 --> 00:04:22,690
tests.

69
00:04:22,740 --> 00:04:22,980
Right.

70
00:04:23,220 --> 00:04:27,870
So there are many benefits of TDD and many articles you can read that will tell you more benefits and

71
00:04:27,870 --> 00:04:30,360
even some studies that will show the benefits of it over time.

72
00:04:30,900 --> 00:04:33,420
But I want to quickly talk through a couple of them pretty quickly.

73
00:04:33,450 --> 00:04:33,720
All right.

74
00:04:33,990 --> 00:04:36,660
So, number one, we ensure we are testing the right thing.

75
00:04:36,690 --> 00:04:40,230
Many times you're going to write extra code, more code that is needed.

76
00:04:40,240 --> 00:04:43,590
You might have instance methods that are unused or properties that are unused.

77
00:04:44,940 --> 00:04:48,810
You might produce a methods that return a values that are not actually being used anywhere.

78
00:04:49,560 --> 00:04:55,650
The idea behind TDD is our tests allow us to more easily figure out what do we want our program to do

79
00:04:55,650 --> 00:04:58,680
or what do we want our class to do and write it down?

80
00:04:58,680 --> 00:04:59,960
Almost like making a plan.

81
00:05:00,030 --> 00:05:05,460
And before we actually write any real code for what we need this code to do for us, and our tests are

82
00:05:05,460 --> 00:05:09,570
the best barometer of that, rather than writing it down in some notebook somewhere where you're going

83
00:05:09,570 --> 00:05:12,150
to forget, we can write that directly into our code base.

84
00:05:12,300 --> 00:05:18,300
What our code should be doing are our tests in many ways are the best documentation we have because

85
00:05:18,300 --> 00:05:24,090
they show you how to run the pieces of our app in isolation and they show you exactly how everything

86
00:05:24,090 --> 00:05:27,840
works, how a function should be invoked, how a class should be instantiated.

87
00:05:28,080 --> 00:05:33,030
They provide descriptions and they live alongside our code and are committed to source control.

88
00:05:33,030 --> 00:05:39,030
So our tests are the best form of documentation, and ideal tests will describe the why rather than

89
00:05:39,030 --> 00:05:43,920
the how the benefit of what a piece of code is adding rather than the specific implementation.

90
00:05:44,580 --> 00:05:49,350
So the first thing is that we actually declare what we are testing and why we are building the code

91
00:05:49,350 --> 00:05:52,440
that we're about to build, which ensures that we are building the right thing.

92
00:05:52,860 --> 00:05:56,310
The second benefit is that we avoid duplication in our tests.

93
00:05:56,550 --> 00:06:03,300
If we write a test after having written some code and we discover that our test is passing, that means

94
00:06:03,300 --> 00:06:09,930
that our existing implementation already fulfills what that test claims is a new feature, right?

95
00:06:10,110 --> 00:06:15,750
So if we write test one and build feature one, then we build test two and feature one already makes

96
00:06:15,750 --> 00:06:16,230
it pass.

97
00:06:16,410 --> 00:06:21,960
Then we're not actually adding any new logic to our app and that test is redundant and it doesn't need

98
00:06:21,960 --> 00:06:22,830
to be there.

99
00:06:22,830 --> 00:06:26,280
It's actually double testing something that's already been tested before.

100
00:06:26,520 --> 00:06:32,700
So by getting a failing test, we can guarantee that we're actually adding new functionality to our

101
00:06:32,700 --> 00:06:33,240
program.

102
00:06:33,390 --> 00:06:33,750
All right.

103
00:06:34,530 --> 00:06:38,520
Number three, as we talked about, we describe the why rather than the implementation.

104
00:06:38,670 --> 00:06:43,110
If we don't know how we're going to build our actual code, if we don't know whether we're going to

105
00:06:43,110 --> 00:06:48,240
use an array or an object or a string, for example, if we just write our tests, describe the purpose

106
00:06:48,240 --> 00:06:51,210
of the code and what it expects to provide and receive.

107
00:06:51,390 --> 00:06:53,790
It tends to make our tests a little bit more readable.

108
00:06:53,970 --> 00:06:54,240
All right.

109
00:06:54,510 --> 00:06:57,330
Number four, another benefit is higher test coverage.

110
00:06:57,510 --> 00:07:01,980
Test coverage refers to the percentage of your code base that is covered by tests.

111
00:07:02,130 --> 00:07:06,540
Whenever we run just that, we can actually show you a setting and a couple of lessons where Jess will

112
00:07:06,540 --> 00:07:12,930
calculate how many lines in your inner code base it ran through as it was testing and just can identify,

113
00:07:13,050 --> 00:07:16,050
hey, 20% of your code base you don't have a test for.

114
00:07:16,050 --> 00:07:18,750
I didn't run through this code when I was running your tests.

115
00:07:19,020 --> 00:07:23,220
Well, the benefits of running our tests first is that we're always going to have that test coverage.

116
00:07:23,220 --> 00:07:28,080
We're going to have proper tests for our features because we're going to write the tests before we even

117
00:07:28,080 --> 00:07:28,920
write the features.

118
00:07:28,920 --> 00:07:29,190
Right.

119
00:07:29,190 --> 00:07:31,500
So we're going to have those tests always available.

120
00:07:31,680 --> 00:07:37,290
And you're going to be able to avoid those situations where developers say, Oh, I don't need to write

121
00:07:37,290 --> 00:07:39,540
tests now, I promise I'll come back to it later.

122
00:07:39,540 --> 00:07:40,590
And then they never do.

123
00:07:40,590 --> 00:07:45,450
And you have a bunch of untested code in your code base, which is a lot more brittle, which is a lot

124
00:07:45,450 --> 00:07:50,880
more subject to error write, which requires you to test it much more manually because there's no automated

125
00:07:50,880 --> 00:07:52,470
way to run those tests.

126
00:07:52,620 --> 00:07:56,760
Now you're guaranteeing that you're going to have a test suite behind any new feature in your app.

127
00:07:57,210 --> 00:08:02,100
In addition, your test suite, which now is going to exist as a guarantee because you write it first

128
00:08:02,520 --> 00:08:03,420
a good test.

129
00:08:03,420 --> 00:08:06,570
We and TDD also makes code easy to refactor.

130
00:08:06,780 --> 00:08:10,950
You always have that security of knowing that the tests are there to rerun.

131
00:08:11,010 --> 00:08:17,070
Whenever you want to refactor there's sort of your your they keep you honest they're confidence booster

132
00:08:17,070 --> 00:08:21,930
to say hey if you accidentally break something when you're adding a new feature or refactoring the code,

133
00:08:22,080 --> 00:08:27,270
the tests will already be there to fail and remind you that some existing functionality that used to

134
00:08:27,270 --> 00:08:29,220
work no longer does.

135
00:08:29,220 --> 00:08:32,550
It's a confidence booster and again guarantees that you're going to have those tests.

136
00:08:32,820 --> 00:08:37,920
And finally, another reason among many is that I found that test human development leads not just to

137
00:08:37,920 --> 00:08:41,790
higher quality tests, but also to higher quality code.

138
00:08:42,090 --> 00:08:48,750
There is a good correlation between easy, simple tests and good simple solutions that are not overly

139
00:08:48,750 --> 00:08:51,300
complex and convoluted.

140
00:08:51,570 --> 00:08:57,420
Typically, if your tests are really hard to set up, if they require a lot of spaghetti code, a lot

141
00:08:57,420 --> 00:09:03,510
of boilerplate code, it's usually a sign that your implementation is also too complex and coupled.

142
00:09:03,750 --> 00:09:06,120
Typically, your tests will be really small and lightweight.

143
00:09:06,240 --> 00:09:12,150
You'll build a lots of really small, whether it be objects or really small functions, really small

144
00:09:12,150 --> 00:09:15,300
pieces in your program that all interact the build up to a larger whole.

145
00:09:15,480 --> 00:09:21,060
The more that your app consists of really small objects that each do a small thing with a single responsibility,

146
00:09:21,240 --> 00:09:23,790
the easier it is to test and the easier it is to reason them out.

147
00:09:23,940 --> 00:09:28,920
And typically when you when you start with TDD, you're going to have a smaller scope or focus.

148
00:09:28,920 --> 00:09:32,520
You're going to describe just one unit and just one test for that unit.

149
00:09:32,700 --> 00:09:37,830
So you're not going to drown in the weeds of building a super big class as you might when you as you

150
00:09:37,830 --> 00:09:41,130
might do when you typically just start coding without thinking about what you're doing first.

151
00:09:41,430 --> 00:09:47,820
So tests kind of keep you more focused, keep focused on one problem at a time, one input and output

152
00:09:47,820 --> 00:09:48,330
at a time.

153
00:09:48,450 --> 00:09:52,530
And that tends to lead, in my personal experience, to the higher quality code.

154
00:09:52,560 --> 00:09:55,200
You don't even need to study complex design patterns.

155
00:09:55,200 --> 00:09:59,700
Sometimes your tests when written through TDD will lead you.

156
00:09:59,860 --> 00:10:04,690
A better design pattern simply because of how you're going to solve one problem at a time.

157
00:10:04,930 --> 00:10:10,090
Again, your goal is not just to write a test and then make it pass.

158
00:10:10,180 --> 00:10:15,220
Your goal is you can only write code if it makes a test pass.

159
00:10:15,430 --> 00:10:21,820
So if we think back to our previous lesson when we wrote our even or odd function, our first test might

160
00:10:21,820 --> 00:10:26,020
have been testing an input of an even number and an output of the string even.

161
00:10:26,170 --> 00:10:31,450
And we would have just solved that problem and started building out that function incrementally one

162
00:10:31,450 --> 00:10:32,350
piece at a time.

163
00:10:32,350 --> 00:10:39,220
We wouldn't have added the logic four odd yet until we then passed our first test for evenness and then

164
00:10:39,220 --> 00:10:45,190
added a new test for testing an input of an odd number and its corresponding return string.

165
00:10:45,370 --> 00:10:51,910
So as you can see, it would break down the implementation into smaller steps, smaller problems that

166
00:10:51,910 --> 00:10:56,890
we can tackle that are easier to scope for our brains to reason about so that we can gently build out

167
00:10:56,890 --> 00:10:58,690
the implementation one at a time.

168
00:10:58,930 --> 00:10:59,230
All right.

169
00:10:59,230 --> 00:11:00,130
One step at a time.

170
00:11:00,730 --> 00:11:02,800
That's really all there is to cover in this lesson.

171
00:11:02,950 --> 00:11:07,060
In the very next lesson, we're going to see an example of TDD in this code.

172
00:11:07,240 --> 00:11:11,710
And finally, to close everything off, I do want to say that I am a big advocate of TDD.

173
00:11:11,890 --> 00:11:14,170
I think that is it does make you a better developer.

174
00:11:14,350 --> 00:11:20,410
But I also understand how difficult it can be to simultaneously practice TDD as you're learning a new

175
00:11:20,410 --> 00:11:21,660
technology like Vue.

176
00:11:21,910 --> 00:11:25,870
So we are not going to be using code for every single lesson throughout the course.

177
00:11:26,080 --> 00:11:28,150
We're going to be using it when it's appropriate.

178
00:11:28,330 --> 00:11:32,950
So typically when we introduce an idea for the first time and then test it and typically going to write

179
00:11:32,950 --> 00:11:35,470
the component out first and then show you how to test it.

180
00:11:35,680 --> 00:11:41,320
But then when we start practicing more with the syntax that I think is a really good time to practice

181
00:11:41,320 --> 00:11:44,500
with TDD and show you the benefits of this workflow.

182
00:11:44,650 --> 00:11:47,890
So I'm going to give you both perspectives, and then you're going to be able to formulate your own

183
00:11:47,890 --> 00:11:50,830
opinion on what you prefer and how you like to work.

184
00:11:50,860 --> 00:11:52,870
I don't want to ever force anything down your throat.

185
00:11:53,020 --> 00:11:57,460
I want to give you my opinion, other opinions, and let you make the best decision for yourself.

186
00:11:57,640 --> 00:11:57,940
All right.

187
00:11:58,150 --> 00:12:01,960
So in the very next lesson, we'll explore a TDD with a simple example in this code.

188
00:12:02,110 --> 00:12:02,890
Pretty exciting.

189
00:12:02,890 --> 00:12:04,030
And I will see you there.
