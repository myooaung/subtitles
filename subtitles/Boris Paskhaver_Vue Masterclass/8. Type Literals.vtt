WEBVTT
1
00:00:00.330 --> 00:00:01.320
All right.

2
00:00:01.320 --> 00:00:04.740
So in this lesson, I want to talk about type literals.

3
00:00:04.950 --> 00:00:10.500
A type literal is a type that represents a single value and nothing else.

4
00:00:10.890 --> 00:00:13.200
So let me show you two examples side by side.

5
00:00:13.500 --> 00:00:16.920
What I'm going to do is declare a variable using the let keyword.

6
00:00:17.280 --> 00:00:17.730
I'll call.

7
00:00:17.730 --> 00:00:20.250
The variable is smart and I'll set it to true.

8
00:00:20.610 --> 00:00:27.630
And on the line below I declare a constant called is handsome and I will also set it to true.

9
00:00:28.140 --> 00:00:34.140
And what I want to do here is hover my mouse over the respective names and see the kind of types that

10
00:00:34.140 --> 00:00:36.000
TypeScript has inferred for them.

11
00:00:36.120 --> 00:00:36.390
Right.

12
00:00:36.810 --> 00:00:38.730
So if I hover, my mouse over is smart.

13
00:00:38.940 --> 00:00:43.140
You'll see that TypeScript has inferred that is smart as a boolean and that is correct.

14
00:00:43.620 --> 00:00:46.140
However, when I hover my mouse over is handsome.

15
00:00:46.140 --> 00:00:49.010
It's actually going to be a little bit surprising, a little bit different.

16
00:00:49.020 --> 00:00:50.460
It's not going to be a boolean.

17
00:00:51.090 --> 00:00:54.090
It's going to be specifically a value of true.

18
00:00:54.420 --> 00:00:57.990
So true in this case is both the value and the type.

19
00:00:58.380 --> 00:00:59.640
Now, why is this the case?

20
00:00:59.910 --> 00:01:03.120
Well, this is the way that JavaScript works as well, right?

21
00:01:03.330 --> 00:01:07.890
If we have a left keyword, that means that that variables value can change.

22
00:01:07.950 --> 00:01:11.860
So is smart can totally be reassigned to the value false.

23
00:01:11.880 --> 00:01:13.080
That's why we use that.

24
00:01:13.260 --> 00:01:16.230
So we can reassign the name to another value in our program.

25
00:01:16.500 --> 00:01:19.140
So TypeScript will still guarantee that is smart.

26
00:01:19.140 --> 00:01:20.120
Must be a boolean.

27
00:01:20.130 --> 00:01:23.190
It can go from true to false back to true to false.

28
00:01:23.190 --> 00:01:25.080
It can always be any of those two values.

29
00:01:25.320 --> 00:01:29.760
But because it is a variable that can change, it's totally okay for it to change values.

30
00:01:30.000 --> 00:01:35.340
In comparison, whenever we use the cons keyword in JavaScript, we are permanently assigning a name

31
00:01:35.490 --> 00:01:37.650
to whatever value we have on the right hand side.

32
00:01:37.860 --> 00:01:41.130
So is handsome can never change to be anything else in our program.

33
00:01:41.280 --> 00:01:43.710
We cannot say is handsome equals false.

34
00:01:44.460 --> 00:01:46.560
Because is handsome of course is a concept.

35
00:01:46.800 --> 00:01:48.720
We said that that is constant.

36
00:01:48.810 --> 00:01:50.280
Its value can never change.

37
00:01:50.460 --> 00:01:53.130
We cannot assign to is handsome because it is a constant.

38
00:01:53.520 --> 00:01:58.140
So because JavaScript knows that it knows that is handsome is not just a boolean.

39
00:01:58.560 --> 00:02:02.040
More specifically, is handsome is going to be always true.

40
00:02:02.430 --> 00:02:08.190
So its type is more specific than just a general boolean, which can be either true or false.

41
00:02:08.370 --> 00:02:12.030
It is specifically a boolean that is always going to be true.

42
00:02:12.690 --> 00:02:13.020
All right.

43
00:02:13.020 --> 00:02:17.190
So if I hover my mouse, that's why it says is handsome is not just the Boolean, it's more specifically

44
00:02:17.190 --> 00:02:17.940
a true value.

45
00:02:18.180 --> 00:02:23.640
So true in this case, it's kind of confusing, but true is both the value and the type because the

46
00:02:23.640 --> 00:02:26.310
type cannot change and neither can the value in this scenario.

47
00:02:26.320 --> 00:02:26.550
Right.

48
00:02:26.550 --> 00:02:29.490
It's not just going to be a general boolean whose value can change.

49
00:02:29.580 --> 00:02:32.670
It is a true type and always going to be a true type in its value.

50
00:02:32.820 --> 00:02:34.590
Is handsome, will always stay true.

51
00:02:34.680 --> 00:02:36.110
It's not just the general volume.

52
00:02:36.360 --> 00:02:36.660
All right.

53
00:02:36.870 --> 00:02:40.290
The same rules apply for any other types or primitives in JavaScript.

54
00:02:40.560 --> 00:02:46.560
So, for example, if I have a let's add to weight and I assign that A to 15, TypeScript now knows

55
00:02:46.560 --> 00:02:49.500
that weight is going to be a general number and that number can change.

56
00:02:49.500 --> 00:02:52.170
We can totally reassign weight to anything else, like 100.

57
00:02:52.500 --> 00:02:58.500
In comparison, if I use a contact here for something like height and I assign cons to 71, we can never

58
00:02:58.500 --> 00:03:03.240
reassign height to anything else, not another data type or another number for that matter.

59
00:03:03.450 --> 00:03:08.490
So if I hover my mouse over height, we can see TypeScript knows that the type of height is also going

60
00:03:08.490 --> 00:03:10.020
to be 71, just like the value.

61
00:03:10.140 --> 00:03:15.090
It can never go to any other value in our program and touchable warn us if that's the case.

62
00:03:15.210 --> 00:03:19.290
Of course, JavaScript will also warn us if we try to reassign height to something else.

63
00:03:19.290 --> 00:03:20.730
So that's nothing special.

64
00:03:20.910 --> 00:03:24.690
But it's just to indicate how tight through this processing the work we have in front of it.

65
00:03:24.810 --> 00:03:25.080
All right.

66
00:03:25.260 --> 00:03:26.700
Same rules apply to strings.

67
00:03:26.700 --> 00:03:32.750
If I have a variable called location set to New Jersey, that location is a string.

68
00:03:32.790 --> 00:03:33.750
TypeScript knows that.

69
00:03:34.260 --> 00:03:35.550
Let me see what errors giving us here.

70
00:03:35.790 --> 00:03:37.580
Cannot read Claire Blocks covering the location.

71
00:03:37.590 --> 00:03:37.830
Okay.

72
00:03:37.850 --> 00:03:40.740
That's something that's I think it's title types for specific specific thing.

73
00:03:40.920 --> 00:03:42.970
If I change this to my location, that should go away.

74
00:03:42.990 --> 00:03:46.260
Okay, so it looks like location is some kind of built in keyword in the language.

75
00:03:46.560 --> 00:03:50.970
But the key takeaway here is if I have a variable called my location, TypeScript knows that that is

76
00:03:50.970 --> 00:03:54.990
a string and that can change to something else, like, for example, Florida.

77
00:03:55.830 --> 00:04:02.970
However, if we have a contact like my country and I set that to USA, that is more than just the string

78
00:04:02.970 --> 00:04:03.270
type.

79
00:04:03.270 --> 00:04:06.210
That is something that always has to be the string USA.

80
00:04:06.360 --> 00:04:09.450
It's a more specific type and TypeScript will watch.

81
00:04:09.480 --> 00:04:15.330
Not just that my country stays a string, but more specifically that it has to stay the string that's

82
00:04:15.330 --> 00:04:16.440
literally U.S..

83
00:04:16.710 --> 00:04:17.100
All right.

84
00:04:17.430 --> 00:04:21.600
So that's the basics about type literals and TypeScript and I will see you in the next lesson.
