WEBVTT
1
00:00:00.600 --> 00:00:01.460
Okay.

2
00:00:01.460 --> 00:00:07.700
So in the previous lesson we got our first passing test in the job listings test suite and I propose

3
00:00:07.820 --> 00:00:13.070
that we use this exact same code to try to fix all of the follow up failing tests.

4
00:00:13.370 --> 00:00:17.120
Because remember, all of the other tests are failing for the exact same reason.

5
00:00:17.270 --> 00:00:22.940
They all need a mock view store that's going to have a state property with jobs and that's required.

6
00:00:22.940 --> 00:00:27.020
So this line right here, line 68, can run and slice that array.

7
00:00:27.320 --> 00:00:32.630
And in addition, they need a store that's going to have a dispatch method so that the mounted life

8
00:00:32.630 --> 00:00:33.860
cycle hook can run it.

9
00:00:34.070 --> 00:00:34.340
Right?

10
00:00:34.640 --> 00:00:39.230
So what we're going to do is we're going to copy this section right here and we're going to paste it

11
00:00:39.230 --> 00:00:42.710
into every other test in our in our file.

12
00:00:42.920 --> 00:00:48.860
In fact, remember that we're creating the store and then we're providing it to our create config function

13
00:00:48.860 --> 00:00:49.820
as the second argument.

14
00:00:49.820 --> 00:00:55.220
We do that on the line below and that logic is also repeated in every single test.

15
00:00:55.400 --> 00:01:00.590
So in addition to copying the store, I'm going to copy the line below that creates the actual component

16
00:01:00.590 --> 00:01:00.980
wrapper.

17
00:01:01.310 --> 00:01:03.800
So going to copy that and let's paste it everywhere.

18
00:01:03.800 --> 00:01:08.690
So I'm going to scroll down here and right here we still need our root object, but I do need to replace

19
00:01:08.930 --> 00:01:11.240
this line right here where we are creating a wrapper.

20
00:01:11.420 --> 00:01:17.390
I'm going to paste my new store as well as my copied wrapper creation code from the function above.

21
00:01:17.900 --> 00:01:18.090
All right.

22
00:01:18.110 --> 00:01:20.750
I'm going to repeat that throughout the remainder of the test suite.

23
00:01:20.750 --> 00:01:26.240
So right here below root, but replacing the old wrapper code, paste our code.

24
00:01:26.240 --> 00:01:27.170
Let me save that.

25
00:01:27.460 --> 00:01:33.860
When we proceed downwards right here below the root creation, I'm going to remove the former wrapper

26
00:01:33.860 --> 00:01:36.380
constant, replace it with my copy code from above.

27
00:01:37.040 --> 00:01:43.430
Continue down below, do the exact same thing here keep the root Replace the old wrapper constant Move

28
00:01:43.430 --> 00:01:51.950
down right here Delete the rapper Paste our old code down here delete the wrapper, paste the code with

29
00:01:51.950 --> 00:01:53.330
the state and the store.

30
00:01:53.600 --> 00:01:57.530
Save that and let's give it a second for it to run.

31
00:01:57.530 --> 00:02:03.290
And bingo, our test suite is completely passing that simple change fixed everything, which makes sense

32
00:02:03.290 --> 00:02:07.640
because when we introduced the X, we kind of broke everything, but we broke everything in the exact

33
00:02:07.640 --> 00:02:08.180
same way.

34
00:02:08.210 --> 00:02:12.440
We made our component reliant on view X and none of our component tests in our test.

35
00:02:12.440 --> 00:02:13.760
We knew of that, right?

36
00:02:13.940 --> 00:02:15.500
So now we gave them a fake store.

37
00:02:15.500 --> 00:02:19.490
We gave them a JavaScript object that can play the role of a view store.

38
00:02:19.490 --> 00:02:24.520
It has a state property, it has a dispatch method, and then we simply provided it to the store, or

39
00:02:24.560 --> 00:02:26.720
rather to the configuration of the test suite.

40
00:02:26.930 --> 00:02:32.900
So now our tests know of what this that dollar sign store represent and they're able to utilize our

41
00:02:32.900 --> 00:02:33.660
object, right?

42
00:02:33.950 --> 00:02:37.940
So in the very next lesson, we'll see how we can refactor our current design, but we do have a passing

43
00:02:37.940 --> 00:02:40.850
test suite, so that is a good bit of progress.
