WEBVTT
1
00:00:00.360 --> 00:00:01.290
All right.

2
00:00:01.290 --> 00:00:05.580
So that completes yet another section of the course, the props section.

3
00:00:05.790 --> 00:00:11.310
And before we dive into the review, I'd just like to go back to our user story, which we introduced

4
00:00:11.310 --> 00:00:12.270
at the very beginning.

5
00:00:12.270 --> 00:00:15.570
I think at this point we have completed our original user story.

6
00:00:15.810 --> 00:00:21.780
As a user, I'd like to have my primary and secondary actions suggested to me so that I know what steps

7
00:00:21.780 --> 00:00:23.250
I can take on the website.

8
00:00:23.490 --> 00:00:28.650
The way we decided to tackle this strategy is by introducing two types of buttons, and in order to

9
00:00:28.650 --> 00:00:32.940
make that happen, we customised our existing action button component.

10
00:00:33.240 --> 00:00:35.580
We did not introduce any new components.

11
00:00:35.580 --> 00:00:42.090
Rather, we introduced the idea of props, which helped us add that level of flexibility and customisation

12
00:00:42.090 --> 00:00:44.880
to our button component to our action.

13
00:00:44.880 --> 00:00:45.090
Bang.

14
00:00:45.480 --> 00:00:45.840
All right.

15
00:00:45.840 --> 00:00:48.990
With that, let's review everything we learned in this section.

16
00:00:49.770 --> 00:00:51.330
First up, what are props?

17
00:00:51.330 --> 00:00:56.040
Props are arguments that we can pass to components whenever we instantiate them.

18
00:00:56.040 --> 00:01:01.050
And when I use the word instantiate, I simply mean render a component from a parent.

19
00:01:01.050 --> 00:01:01.320
Right.

20
00:01:01.470 --> 00:01:05.490
And that brings us to another piece of terminology, which is parent and child.

21
00:01:05.670 --> 00:01:11.400
As a reminder, the parent component is the component that renders another component, and that component

22
00:01:11.400 --> 00:01:13.770
that is being rendered is called the child.

23
00:01:14.070 --> 00:01:20.130
So when we're talking about props, we're talking about a parent component such as main NAV, parsing

24
00:01:20.130 --> 00:01:23.610
some kind of data or information down to a child.

25
00:01:23.760 --> 00:01:28.920
And with a prop, we always have the prop name and then we have the prop value and we do that with a

26
00:01:28.920 --> 00:01:33.330
pair of equal signs in between the prop name and its corresponding value.

27
00:01:33.540 --> 00:01:40.230
Whenever a prop value changes, the child component will re render given the new value of that prop.

28
00:01:41.180 --> 00:01:41.560
All right.

29
00:01:41.810 --> 00:01:47.270
We talked about the idea that whenever we pass a prop value down view will always interpret it as a

30
00:01:47.270 --> 00:01:52.760
string, which of course presents a problem whenever we want to pass down a more complex data type,

31
00:01:52.760 --> 00:01:59.270
like an array or an object or a boolean, or even some kind of property that is connected to our parent

32
00:01:59.270 --> 00:02:00.770
components data object.

33
00:02:00.950 --> 00:02:03.980
In that scenario, we have to use the V bind directive.

34
00:02:04.100 --> 00:02:10.060
We can either write V, bind, call in or use the shorthand syntax, which is of course a colon.

35
00:02:10.280 --> 00:02:15.290
We also talked about the idea of using kabob case, which is the preferred way of the view style guide.

36
00:02:15.500 --> 00:02:20.420
That is, whenever you have a prop that has multiple words, Vue recommends that you write them all

37
00:02:20.420 --> 00:02:26.750
in lowercase and then separate every two words with a dash or a hyphen that is called kabob case.

38
00:02:27.680 --> 00:02:33.020
In addition to props, we also talked about a very important part of Vue, which is computed properties.

39
00:02:33.020 --> 00:02:39.200
We can set up computed properties on a configuration object for any view component in our app, and

40
00:02:39.200 --> 00:02:43.070
a computed property is a derived dependent piece of data.

41
00:02:43.250 --> 00:02:46.250
In other words, it can't stand or exist by itself.

42
00:02:46.250 --> 00:02:52.130
It needs some other source of data, some other source of truth, and it offers an alternate representation

43
00:02:52.130 --> 00:02:55.790
of that data or some kind of derived information from that data.

44
00:02:55.790 --> 00:03:02.090
And in the lessons that preceded, we of course used a computed property to generate a JavaScript object

45
00:03:02.450 --> 00:03:08.870
to provide for our access classes, and that object was dependent on an existing piece of data that

46
00:03:08.870 --> 00:03:12.020
can come literally from the components data property.

47
00:03:12.200 --> 00:03:17.660
But as we also saw, it can come from the props that we pass and it doesn't matter what the source is.

48
00:03:17.660 --> 00:03:22.070
What matters is if the piece of data is calculated or derived.

49
00:03:22.070 --> 00:03:24.590
I'm trying to find as many synonyms as I can find here.

50
00:03:24.770 --> 00:03:27.050
Derived, calculated, computed.

51
00:03:27.050 --> 00:03:28.730
As long as it's coming from something else.

52
00:03:28.850 --> 00:03:32.540
We don't want to duplicate that original data and store it elsewhere.

53
00:03:32.660 --> 00:03:38.750
So instead we use a computed property and whenever that original data changes, view will rerun the

54
00:03:38.750 --> 00:03:39.650
computed property.

55
00:03:39.770 --> 00:03:44.990
If it references that original piece of data, a view keeps an eye on what is changing and reruns the

56
00:03:44.990 --> 00:03:47.120
right computed properties when it needs to.

57
00:03:47.990 --> 00:03:48.380
Okay.

58
00:03:48.500 --> 00:03:53.330
And when it comes to templates, we can utilize it computed property the exact same way as a data property

59
00:03:53.510 --> 00:03:57.770
we can embedded within the template using interpolation, using the double curly braces.

60
00:03:57.980 --> 00:04:01.760
We can use it in places like V bind as we did with the class attribute.

61
00:04:01.910 --> 00:04:04.550
Same deal, same exact syntax, but it's computed.

62
00:04:05.750 --> 00:04:06.080
Okay.

63
00:04:06.290 --> 00:04:11.870
We saw that we can combined v v bind with the class attribute to provide dynamic styles to an h two

64
00:04:11.870 --> 00:04:12.380
now element.

65
00:04:12.590 --> 00:04:18.140
And whenever we do that, Vue expects a JavaScript object where the properties are class names and the

66
00:04:18.140 --> 00:04:19.340
values are booleans.

67
00:04:19.550 --> 00:04:26.120
If the value is true, we're telling Vue to apply the CC class that is the property name in that object.

68
00:04:26.420 --> 00:04:31.280
In comparison, if we have a false that tells Vue, do not apply this class again.

69
00:04:31.280 --> 00:04:33.770
That class is represented by the object property.

70
00:04:34.010 --> 00:04:39.050
We saw how we can write that object directly inline, but how it made more sense to transfer it to our

71
00:04:39.050 --> 00:04:45.170
actual Vue configuration object, whether it be in data or computed, because it is kind of more JavaScript

72
00:04:45.170 --> 00:04:47.150
in a sense than it is HTML.

73
00:04:47.150 --> 00:04:53.270
So it makes sense to keep our HTML template a section of our view component as clean as possible and

74
00:04:53.270 --> 00:04:59.270
move a lot of our business logic to our actual script section where we have all of our JavaScript.

75
00:05:00.170 --> 00:05:00.560
All right.

76
00:05:00.830 --> 00:05:06.020
We also saw that we can use props within our child components, data and computed properties.

77
00:05:06.530 --> 00:05:12.350
We can reference those props using the this keyword we use that to reference, for example, are a type

78
00:05:12.350 --> 00:05:16.970
of property that we passed into our action button, which allowed us to, as you saw, come up with

79
00:05:16.970 --> 00:05:22.160
a lot of interesting ways to style the child component from the parent perspective.

80
00:05:22.460 --> 00:05:28.550
We also saw that JavaScript allows us to set dynamic names such as constants or variables as object

81
00:05:28.550 --> 00:05:29.060
properties.

82
00:05:29.270 --> 00:05:34.400
We have to provide the square brackets and we utilize this technique in our computed properties where

83
00:05:34.400 --> 00:05:41.570
we used the type prop from the parent to dynamically set access class on the object that we bound to

84
00:05:41.570 --> 00:05:44.450
the class attribute on our button in action.

85
00:05:44.460 --> 00:05:50.420
But that was some pretty advanced syntax that used the combination of view features as well as E-6 JavaScript

86
00:05:50.420 --> 00:05:50.840
features.

87
00:05:51.710 --> 00:05:52.040
All right.

88
00:05:52.220 --> 00:05:54.170
We also talked about prop validation.

89
00:05:54.170 --> 00:05:56.240
We can validate things like the data type.

90
00:05:56.420 --> 00:06:00.140
Is the prop going to be a string or a number or a boolean, etc.?

91
00:06:00.380 --> 00:06:06.800
We can also use prop validation to mandate that a prop is required or alternatively declare it as optional

92
00:06:06.800 --> 00:06:07.820
non-mandatory.

93
00:06:08.060 --> 00:06:14.270
We can also provide a default value to fall back to in case the parent does not provide a given value.

94
00:06:14.510 --> 00:06:19.580
And the benefit of all of this is that Vue will inform us of these violations in the browser console

95
00:06:19.820 --> 00:06:24.260
so we can fix them up and make sure our app is more stable and less prone to error.

96
00:06:24.470 --> 00:06:27.650
And sometimes our tests will catch those violations too.

97
00:06:27.860 --> 00:06:33.170
So it helps to be more explicit with Vue and tell it all of these validations so it knows what to check

98
00:06:33.170 --> 00:06:33.440
for.

99
00:06:34.100 --> 00:06:39.230
Speaking of validations, what if we have our own custom check that we'd like to add to our component?

100
00:06:39.440 --> 00:06:44.810
For example, maybe one prop will be a number and we want to validate that that number is going to be

101
00:06:44.810 --> 00:06:46.010
greater than 20.

102
00:06:46.010 --> 00:06:47.750
That may be some kind of business logic.

103
00:06:47.900 --> 00:06:49.010
How can we check for that?

104
00:06:49.190 --> 00:06:55.310
We can add a validator method to any prop validation object and that will allow us to validate custom

105
00:06:55.310 --> 00:06:56.120
business logic.

106
00:06:56.300 --> 00:06:59.210
That method must return a boolean either true or false.

107
00:06:59.420 --> 00:06:59.900
True.

108
00:06:59.900 --> 00:07:02.510
If we want to approve the validation and false.

109
00:07:02.510 --> 00:07:03.680
If we do not.

110
00:07:04.860 --> 00:07:10.350
And finally, when it comes to testing, we saw in the view test utils that we can use the classes method

111
00:07:10.350 --> 00:07:15.780
on a view test utils wrapper object that can be either the original mounted object or anything that

112
00:07:15.780 --> 00:07:18.750
we search for within it, such as a target HTML element.

113
00:07:19.020 --> 00:07:24.120
We can use the classes method to test whether a class is present on the target, and that was helpful

114
00:07:24.120 --> 00:07:31.140
in this section to validate that the prop that we passed in was correctly setting a dynamic CSS class

115
00:07:31.410 --> 00:07:34.140
on our action button button element.

116
00:07:34.320 --> 00:07:34.620
All right.

117
00:07:34.860 --> 00:07:36.450
That's all there is to cover in this section.

118
00:07:36.450 --> 00:07:40.920
Hopefully, it's been a lot of fun learning about props and in the very next section we're going to

119
00:07:40.920 --> 00:07:43.090
get to work building R seven now.

120
00:07:43.140 --> 00:07:44.130
So I will see you there.
