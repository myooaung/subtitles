WEBVTT
1
00:00:00.330 --> 00:00:00.930
Okay.

2
00:00:00.930 --> 00:00:06.270
So in the previous lesson, we tackle the issue of only displaying the sub nav.

3
00:00:06.420 --> 00:00:08.070
If the user was logged in.

4
00:00:08.310 --> 00:00:13.440
Now I want to handle the other issue which is only displaying the number of jobs matched.

5
00:00:13.680 --> 00:00:20.310
If the user is specifically on the jobs page of our app now we run into a little bit of a problem here,

6
00:00:20.310 --> 00:00:25.800
which is we haven't talked a lot about the idea of different pages in a view app, how we can navigate

7
00:00:25.800 --> 00:00:26.640
from page to page.

8
00:00:26.880 --> 00:00:31.530
We are just starting out and learning the core view fundamentals and I want to make sure that we build

9
00:00:31.530 --> 00:00:34.920
incrementally one little bit of knowledge at a time.

10
00:00:35.160 --> 00:00:39.780
So what we're going to do here is come up with a very simple, basic implementation of this.

11
00:00:39.780 --> 00:00:43.980
We're not actually going to solve it the right way, but we're going to solve it in a way that should

12
00:00:43.980 --> 00:00:44.970
be suitable for now.

13
00:00:45.120 --> 00:00:50.280
And then we're going to come back to this idea, as with many other things later in the course, when

14
00:00:50.280 --> 00:00:53.490
we introduce the right view tools to solve this problem.

15
00:00:54.240 --> 00:00:58.110
In addition, what I want to try to do here is to follow a TDD approach.

16
00:00:58.290 --> 00:01:03.120
So we're going to write our tests first and we're going to write our tests for this sub nav component

17
00:01:03.270 --> 00:01:05.520
because this is where the logic is going to live.

18
00:01:05.550 --> 00:01:10.230
Here is where we are deciding whether or not to render the number of jobs matched.

19
00:01:10.320 --> 00:01:14.700
Right now, it is always being rendered, but we're obviously going to make this logic conditional in

20
00:01:14.700 --> 00:01:15.300
just a moment.

21
00:01:15.570 --> 00:01:17.880
So let's write our tests for this component.

22
00:01:18.180 --> 00:01:22.860
So in our tests directory, we have our unit folder and our components folder.

23
00:01:22.860 --> 00:01:25.320
In here, I'm going to create a new test file.

24
00:01:25.500 --> 00:01:27.000
Sub nav test.

25
00:01:27.480 --> 00:01:32.700
Yes, we're going to follow the exact same protocol we followed with our previous test.

26
00:01:32.940 --> 00:01:38.760
So I'll begin by importing the mount function from view test utils.

27
00:01:39.240 --> 00:01:43.590
And then we also need to import the component we're going to be testing, which is called sub nav.

28
00:01:44.580 --> 00:01:50.220
And from our top level as our C directory, we have our components folder and our some NAV component

29
00:01:50.220 --> 00:01:51.150
is going to be in there.

30
00:01:51.690 --> 00:01:56.520
And then of course we're going to use the described function from just let's describe what we're testing.

31
00:01:56.520 --> 00:02:02.910
It is going to be the sub nav component and I'm going to provide a arrow function here and in here.

32
00:02:02.910 --> 00:02:09.210
What I'm going to do is add two different described blocks because there's two states or criterias under

33
00:02:09.210 --> 00:02:10.350
which I want to test.

34
00:02:10.350 --> 00:02:17.100
This one is when the user is on the job page and that's when we want to see that green text that says

35
00:02:17.100 --> 00:02:18.360
this number of jobs matched.

36
00:02:18.630 --> 00:02:24.600
And the other pathway or the other branch of logic is when the user is not on the jobs page, they should

37
00:02:24.600 --> 00:02:28.500
not see that element that shows them the number of jobs matched.

38
00:02:28.800 --> 00:02:35.790
So I'm going to write my describes here when the user is on the job page will be my first and I'll copy

39
00:02:35.790 --> 00:02:36.900
and paste it down below.

40
00:02:37.050 --> 00:02:41.280
And my second one will be when user is not on jobs page.

41
00:02:41.910 --> 00:02:45.210
All right, let's go ahead and start wiring these tests up.

42
00:02:45.510 --> 00:02:48.000
So as we know, we provide a second argument to describe.

43
00:02:48.630 --> 00:02:53.010
And in here I'm going to write my IT function.

44
00:02:53.010 --> 00:02:54.930
Here's where I actually describe what I'm testing.

45
00:02:55.050 --> 00:03:00.480
So regarding the seventh component, when the user is on the job page, what do I want the sub nav component

46
00:03:00.480 --> 00:03:00.900
to do?

47
00:03:01.140 --> 00:03:05.130
It should displays job count, it displays job count.

48
00:03:05.190 --> 00:03:05.610
Perfect.

49
00:03:06.180 --> 00:03:07.860
So that's a nice user description.

50
00:03:07.860 --> 00:03:14.520
And let's start things off as always by using our mount function to mount our component, which is sub

51
00:03:14.520 --> 00:03:14.850
now.

52
00:03:16.160 --> 00:03:16.490
All right.

53
00:03:16.820 --> 00:03:21.740
So at this point, I'm going to violate a best practice that I talked about earlier in the course,

54
00:03:21.740 --> 00:03:26.420
which is manually setting the properties of our data here.

55
00:03:26.570 --> 00:03:30.860
I'm going to do that again for the reasons that I talked about at the beginning of this lesson, in

56
00:03:30.860 --> 00:03:35.750
that we don't know the right way to solve this problem yet because we don't know about view routing,

57
00:03:35.900 --> 00:03:37.790
in other words, routing from one page to another.

58
00:03:38.090 --> 00:03:43.610
So the simplest way I can think about this is the simplest way I could solve this problem is imagine

59
00:03:43.610 --> 00:03:50.630
our subnet has a piece of data on it called on job results page and that will be either a true or a

60
00:03:50.630 --> 00:03:51.020
false.

61
00:03:51.290 --> 00:03:56.900
And if the user is on the job results page, which will be that Boolean data property, then I should

62
00:03:56.900 --> 00:03:58.850
see that job count appear.

63
00:03:59.210 --> 00:04:01.100
Otherwise I should not see it appear.

64
00:04:01.310 --> 00:04:01.580
Right.

65
00:04:01.760 --> 00:04:06.470
Not the best implementation, but the simplest one that I can think of knowing the things we know.

66
00:04:07.130 --> 00:04:10.550
So I'm going to provide a second argument to my mount function.

67
00:04:10.700 --> 00:04:15.920
This is our configuration object for our Mountain View component, and as a reminder, we can provide

68
00:04:15.920 --> 00:04:21.530
a data method here and return our data object that this subnet nav component will have.

69
00:04:21.860 --> 00:04:25.580
So again, we haven't written this logic yet, but this is TDD, so we're writing it.

70
00:04:26.510 --> 00:04:31.850
We're writing our tests first, assuming that the component will have this and it will affect how the

71
00:04:31.850 --> 00:04:32.690
component runs.

72
00:04:32.990 --> 00:04:37.520
Again, not perfect because I don't like using data because it is reaching into the implementation and

73
00:04:37.520 --> 00:04:39.620
mandating what the implementation is going to look like.

74
00:04:39.770 --> 00:04:42.650
But we're going to come back to this later in the course and make these tests better.

75
00:04:42.980 --> 00:04:46.610
So I'm going to have a property called on job results page.

76
00:04:47.720 --> 00:04:49.670
And for this test, I'm going to set it to.

77
00:04:49.700 --> 00:04:50.060
True.

78
00:04:50.930 --> 00:04:51.320
All right.

79
00:04:51.590 --> 00:04:57.710
And what do I want to happen when my data property called I'm job results page is set to true.

80
00:04:57.710 --> 00:05:05.960
I want to be able to find some element, some kind of HTML in my subnet that should display the job

81
00:05:05.960 --> 00:05:06.230
count.

82
00:05:06.230 --> 00:05:09.260
And I'm going to use the data test ideas that we talked about earlier.

83
00:05:09.410 --> 00:05:11.390
I don't know what that element will be.

84
00:05:11.510 --> 00:05:15.050
I don't know whether it's going to be a view component or some H2 element.

85
00:05:15.050 --> 00:05:17.090
I don't know if it's a Div or a P or anything.

86
00:05:17.240 --> 00:05:20.240
I'm just going to search for it and then check that it exists.

87
00:05:20.570 --> 00:05:26.720
So I'm going to call whatever that element is, job count, and I'm going to call the find method on

88
00:05:26.720 --> 00:05:27.320
my wrapper.

89
00:05:27.560 --> 00:05:32.450
And as a reminder, the syntax for looking for an attribute is to provide a string and then a pair of

90
00:05:32.450 --> 00:05:33.170
square brackets.

91
00:05:33.170 --> 00:05:37.700
Here I specify the attribute that I want to look for, and I'm going to look for an attribute called

92
00:05:37.700 --> 00:05:38.530
data test.

93
00:05:38.540 --> 00:05:43.910
Again, that name is up to us, but it seems like a fitting name for an attribute strictly for the purposes

94
00:05:43.910 --> 00:05:44.480
of testing.

95
00:05:44.810 --> 00:05:49.610
And then I'm going to expect this data test attribute to have a value which I'll provide in my single

96
00:05:49.610 --> 00:05:51.560
quotes, and that will be job count.

97
00:05:52.220 --> 00:05:55.940
So both of those names are up to me, both the attribute and its corresponding value.

98
00:05:56.720 --> 00:06:01.490
I do also want to take a quick second to talk about the differences between the find method, which

99
00:06:01.490 --> 00:06:05.680
we've been using as well as the Get method, which you may also have.

100
00:06:05.900 --> 00:06:07.820
See sometimes when you're looking at test.

101
00:06:08.180 --> 00:06:13.730
So the way the find method works is if it's not able to find a corresponding element, the test will

102
00:06:13.730 --> 00:06:14.510
not fail.

103
00:06:14.750 --> 00:06:19.310
Rather, the find method will return an object that sort of is like undefined.

104
00:06:19.310 --> 00:06:24.950
It represents nothingness or nothingness, but the test won't immediately fail in comparison.

105
00:06:24.950 --> 00:06:28.730
If we use the get method, its logic is exactly the same.

106
00:06:28.730 --> 00:06:32.330
It's just like find in that it's going to look for whatever we provide here.

107
00:06:32.510 --> 00:06:37.070
But if it's not able to find it, the test will fail on this line.

108
00:06:37.070 --> 00:06:40.040
So it will never get to the next line at all.

109
00:06:40.310 --> 00:06:40.550
Right.

110
00:06:40.760 --> 00:06:46.370
So if it's absolutely critical in a test that you validate that something exists before you proceed

111
00:06:46.370 --> 00:06:50.480
to the next action, then you would want to use get in this example.

112
00:06:50.480 --> 00:06:57.020
I want to get either the valid found element or nothing at all, because on the very next line, I want

113
00:06:57.020 --> 00:07:00.830
to test whether that job count element exists, right?

114
00:07:00.830 --> 00:07:04.160
So if I fail on this line, I'll never get a chance to get to my assertion.

115
00:07:04.250 --> 00:07:09.530
So I want to use find, which is a little less strict and that allows me on the next line to take whatever

116
00:07:09.530 --> 00:07:10.700
job count returns.

117
00:07:10.880 --> 00:07:16.100
It could be a valid element or it could be a object that represents nothingness or the absence of an

118
00:07:16.100 --> 00:07:16.400
element.

119
00:07:16.670 --> 00:07:22.280
And remember, on these view objects that the test utils library gives to us, there is a method called

120
00:07:22.280 --> 00:07:24.470
exists and that exists.

121
00:07:24.470 --> 00:07:26.120
Method will give us a boolean.

122
00:07:26.330 --> 00:07:33.500
The boolean will be true if that element, whatever it is, exists and it will be false if it does not.

123
00:07:33.650 --> 00:07:39.470
So whatever the find method returns is perfect for the exists method because that allows us to get to

124
00:07:39.470 --> 00:07:42.710
this assertion on line 16 no matter what.

125
00:07:42.980 --> 00:07:48.140
So of course if we are on the jobs page and we have this property, such a true whatever we find, we

126
00:07:48.140 --> 00:07:50.150
do expect it to exist, right?

127
00:07:50.150 --> 00:07:55.490
We do expect that job count to exist somewhere on the page and then we can write our complimentary test

128
00:07:55.490 --> 00:07:56.000
down below.

129
00:07:56.000 --> 00:08:01.160
So when the user is not on the job page, I'm going to provide my arrow function here.

130
00:08:01.910 --> 00:08:04.970
I'm going to write a description that's probably going to be the opposite.

131
00:08:05.180 --> 00:08:08.990
So it does not display job count.

132
00:08:10.700 --> 00:08:15.440
And for this test, what I can do is copy just about everything we have here and modify.

133
00:08:15.760 --> 00:08:22.660
So right here we can assume that our data property called on job results page will be false.

134
00:08:23.860 --> 00:08:26.860
Again, this knows too much about the implementation, but that's okay.

135
00:08:27.160 --> 00:08:32.710
We're still going to look for the exact same element or component, whatever it is that has this attribute

136
00:08:32.710 --> 00:08:33.310
on the page.

137
00:08:33.520 --> 00:08:37.090
But this time around, view should not find anything.

138
00:08:37.120 --> 00:08:42.280
To be more specific, the view test utils should not find anything matching that description because

139
00:08:42.280 --> 00:08:45.490
it should not be on the page if we're not on the job results page.

140
00:08:45.760 --> 00:08:50.710
So when I call the exists method on whatever it is we find, we expect it not to exist.

141
00:08:51.070 --> 00:08:52.450
So this should be false.

142
00:08:53.260 --> 00:08:53.620
Okay.

143
00:08:53.860 --> 00:08:59.560
So let me go ahead and run these tests and make sure that they are failing, which is what TV expects.

144
00:08:59.560 --> 00:09:03.880
They should both be failing and we should then write the passing implementation.

145
00:09:04.180 --> 00:09:08.740
So I'm going to run NPM, run test, colon, watch to run just in watch mode.

146
00:09:09.550 --> 00:09:11.020
And we should see some failures here.

147
00:09:13.340 --> 00:09:14.440
And there we go.

148
00:09:14.450 --> 00:09:15.500
We're seeing some failures.

149
00:09:15.770 --> 00:09:18.620
We can see it's unable to find an awesome icon.

150
00:09:18.620 --> 00:09:20.240
We'll come back to that in just a moment.

151
00:09:20.420 --> 00:09:23.720
But more importantly, we see here we are getting these failures up above.

152
00:09:24.170 --> 00:09:28.160
Especially for this test, when the user is on job page, it displays job count.

153
00:09:28.160 --> 00:09:29.420
It's not passing.

154
00:09:29.420 --> 00:09:34.430
So it's expecting to find this job count a value for the data attached attribute.

155
00:09:34.580 --> 00:09:37.460
It's not finding it, so it can't say that it exists.

156
00:09:37.580 --> 00:09:39.200
So this test is passing.

157
00:09:39.410 --> 00:09:46.430
The reason the one below our second one is passing is because it's expecting to not find it and it is

158
00:09:46.430 --> 00:09:48.380
indeed not finding it at all.

159
00:09:48.560 --> 00:09:53.690
So that test is passing, but that is a false positive because we haven't implemented anything regarding

160
00:09:53.690 --> 00:09:54.950
this logic yet.

161
00:09:55.220 --> 00:09:56.870
We're going to do that in the very next lesson.
