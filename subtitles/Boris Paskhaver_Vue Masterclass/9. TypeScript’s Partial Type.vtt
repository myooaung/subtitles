WEBVTT
1
00:00:00.500 --> 00:00:01.270
Okay.

2
00:00:01.280 --> 00:00:07.570
So in this lesson, I want to introduce you to a special type in TypeScript, and it is called partial.

3
00:00:07.810 --> 00:00:14.560
What partial does is it accepts an interface and it makes all the properties of that interface optional

4
00:00:14.650 --> 00:00:16.210
when declaring a type.

5
00:00:16.600 --> 00:00:21.730
So here I have my playground dog's file, and as a reminder, this is our little scratch pad throughout

6
00:00:21.730 --> 00:00:27.340
the project where we can play around with various JavaScript view ideas and now typescript ideas.

7
00:00:27.580 --> 00:00:31.420
And of course, in order to be able to use TypeScript code in this file, we're going to need to change

8
00:00:31.570 --> 00:00:33.160
this file's extension as well.

9
00:00:33.430 --> 00:00:38.590
So right here in my source directory, let's go to playground dogs and let's change that file to have

10
00:00:38.590 --> 00:00:44.830
a extension at the end and I'll hide my nav bar update imports.

11
00:00:44.830 --> 00:00:45.690
I don't know what this is.

12
00:00:45.700 --> 00:00:49.540
No, that's fine, because there's nothing in the cell right now, so you should have an empty file.

13
00:00:49.540 --> 00:00:54.100
And if you have any code, by the way, in this file from a previous lesson, you can feel free to delete

14
00:00:54.100 --> 00:00:54.250
it.

15
00:00:54.250 --> 00:00:59.290
This file is just our little scratch pad or little playground for exploring things outside of our project.

16
00:00:59.810 --> 00:01:00.190
All right.

17
00:01:00.190 --> 00:01:04.480
And then on the right hand side, what I've done is opened up my types.

18
00:01:04.480 --> 00:01:07.300
That's file where I have my global state interface.

19
00:01:07.660 --> 00:01:11.070
So what I'm going to do in this file is I'm going to import that interface.

20
00:01:11.070 --> 00:01:15.910
So I'm going to import global state and that's going to come from my source directory store types.

21
00:01:17.690 --> 00:01:24.260
And what I'm going to do is declare a a constant called state, and I'm going to try to create an object

22
00:01:24.770 --> 00:01:26.450
that is of type global state.

23
00:01:26.840 --> 00:01:31.330
So let me say right here, I'm going to declare that the type of state is going to be global state,

24
00:01:31.580 --> 00:01:33.950
and I'm going to begin with an empty object.

25
00:01:34.160 --> 00:01:38.060
And obviously, we're going to get an immediate TypeScript violation because TypeScript is going to

26
00:01:38.060 --> 00:01:43.910
say, hey, your empty object, your type of an empty object is missing the following properties from

27
00:01:43.910 --> 00:01:46.160
the type you promised me, which is global state.

28
00:01:46.490 --> 00:01:50.750
In your object, that state is equal to you must give me is logged in.

29
00:01:50.780 --> 00:01:52.070
You must give me jobs.

30
00:01:52.070 --> 00:01:57.200
Selected organizations select the job types and in addition to those properties existing, they must

31
00:01:57.200 --> 00:01:59.660
also have the exact types that we declared here.

32
00:01:59.990 --> 00:02:02.180
So immediately we're going to get an error.

33
00:02:02.480 --> 00:02:06.170
What I'm going to do here is and write to introduce a special keyword called partial.

34
00:02:06.170 --> 00:02:09.020
It is built into TypeScript, so you do not need to import it.

35
00:02:09.260 --> 00:02:13.970
And the way it works is you write partial and then you treat the actual interface that you want it to

36
00:02:13.970 --> 00:02:16.310
wrap as a generic argument.

37
00:02:16.550 --> 00:02:17.780
So the syntax looks like this.

38
00:02:17.780 --> 00:02:23.930
I'm going to write the word partial capital P and then I'm going to wrap global state in an opening

39
00:02:24.740 --> 00:02:25.250
bracket.

40
00:02:25.250 --> 00:02:30.800
So the less than sine and then after global state, I'm going to close that with a right bracket or

41
00:02:30.800 --> 00:02:31.640
a greater than bracket.

42
00:02:31.640 --> 00:02:35.840
And that is a silly thing that my editor does, but this is what the final results should look like.

43
00:02:36.020 --> 00:02:40.730
So the word partial than the less than sine or the opening bracket that is package in global state.

44
00:02:40.730 --> 00:02:45.170
And then the closing bracket, this is the typescript generic syntax, so you'll notice immediately

45
00:02:45.170 --> 00:02:46.610
that the error will go away.

46
00:02:46.610 --> 00:02:47.870
So what is happening here?

47
00:02:48.230 --> 00:02:54.380
So what partial does is it takes the given interface we provide in this case global state and it makes

48
00:02:54.380 --> 00:02:58.520
all of its properties optional when it comes to this type.

49
00:02:58.880 --> 00:03:04.850
So this is equivalent to going into global state right here and simply adding a question mark to every

50
00:03:04.850 --> 00:03:05.690
single property.

51
00:03:06.500 --> 00:03:09.020
This is basically what partial does for us automatically.

52
00:03:09.290 --> 00:03:14.270
Of course, we don't want to do this in our real interface because that will affect our actual project

53
00:03:14.270 --> 00:03:18.710
code and will treat all of these properties as optional, even though in the real world they're not.

54
00:03:18.710 --> 00:03:20.660
We're always going to have a view X global state.

55
00:03:20.840 --> 00:03:24.410
There's always going to initialize with these properties so they are required.

56
00:03:24.560 --> 00:03:28.460
But this is what partial does for us when it comes to this type right here.

57
00:03:28.820 --> 00:03:34.460
So if I just remove the question marks on the right hand side, what we're telling TypeScript here is

58
00:03:34.880 --> 00:03:39.740
please honor the global state interface, but treat it as if each property is optional.

59
00:03:40.010 --> 00:03:45.290
So if all four properties are optional, then an empty object fulfills that contract.

60
00:03:45.530 --> 00:03:46.190
So does State.

61
00:03:46.190 --> 00:03:47.780
TypeScript says there's no violation here.

62
00:03:47.930 --> 00:03:48.380
Yeah.

63
00:03:48.380 --> 00:03:52.760
Global status for properties, but with partial you've made them all optional and so you don't have

64
00:03:52.760 --> 00:03:53.630
to provide any of them.

65
00:03:53.720 --> 00:03:55.820
So this satisfies that interface.

66
00:03:56.270 --> 00:03:59.480
However, I can still add on any valid properties.

67
00:03:59.660 --> 00:04:05.150
So for example, if I wanted to add is logged in right here and provide it with a boolean value like

68
00:04:05.150 --> 00:04:05.600
true.

69
00:04:05.870 --> 00:04:09.320
You can see that that's also going to be okay with TypeScript.

70
00:04:09.530 --> 00:04:14.540
TypeScript says is logged in is optional, but that means you can still provide it if you want jobs.

71
00:04:14.540 --> 00:04:17.750
Selected organizations and selected job types are also optional.

72
00:04:17.870 --> 00:04:19.010
You're not providing them.

73
00:04:19.010 --> 00:04:21.080
But that's okay with me too, because they're optional.

74
00:04:21.260 --> 00:04:25.550
So this object will also fulfill this description of the type that we've given to it.

75
00:04:25.880 --> 00:04:32.600
Similarly, if I provide something like selected organizations right here and I give it a empty array,

76
00:04:32.600 --> 00:04:34.070
that's going to fulfill the requirement.

77
00:04:34.730 --> 00:04:35.090
All right.

78
00:04:35.090 --> 00:04:37.670
So once again, optional, which means we can provide it.

79
00:04:37.910 --> 00:04:40.340
Now, TypeScript is still going to perform type checking.

80
00:04:40.550 --> 00:04:45.380
So, for example, if I provide is logged in and try to set it to a string like hello, well then we're

81
00:04:45.380 --> 00:04:50.570
still going to get an issue because TypeScript says yes, I know is logged in, is optional, but if

82
00:04:50.570 --> 00:04:52.940
you're going to provide it, it has to still be a boolean.

83
00:04:53.090 --> 00:04:54.800
So this is not something I'm happy with.

84
00:04:54.800 --> 00:04:59.540
Type string is not assignable to type boolean or undefined because the reason it could technically be

85
00:04:59.540 --> 00:05:04.910
undefined is because that's what the value is whenever it's not present in literal JavaScript terms.

86
00:05:05.090 --> 00:05:08.120
If a property does not exist, it's technical values, undefined, right?

87
00:05:08.390 --> 00:05:11.980
So TypeScript is still validating that the properties are.

88
00:05:12.470 --> 00:05:16.610
If they are, they're have the right type, but only if they are there because they're optional.

89
00:05:16.970 --> 00:05:23.210
So the advantage of this approach is that it's still going to watch out for properties that should not

90
00:05:23.210 --> 00:05:23.720
exist.

91
00:05:23.960 --> 00:05:28.970
So for example, if I tried to add a random a property set to five, even though we've made all of these

92
00:05:28.970 --> 00:05:32.150
properties optional, we're still honoring the global state interface.

93
00:05:32.240 --> 00:05:36.590
We're saying these are the only four properties that you can have on the object.

94
00:05:36.680 --> 00:05:38.090
Sure, they can be optional.

95
00:05:38.090 --> 00:05:43.130
You can include as many of them or as few of them as you want, but you can't just add on a property

96
00:05:43.280 --> 00:05:48.350
because that a property is not part of the type called the global state, or more specifically, the

97
00:05:48.350 --> 00:05:52.760
partial global state, which makes every single property of global state optional.

98
00:05:53.240 --> 00:05:53.500
Okay.

99
00:05:53.570 --> 00:05:54.560
So that's the key difference here.

100
00:05:54.800 --> 00:05:57.470
So partial makes all these existing properties optional.

101
00:05:57.740 --> 00:06:03.290
And however, it still follows the general typescript mechanics of prohibiting any extra values or any

102
00:06:03.290 --> 00:06:07.430
extra properties that are not defined in the actual interface itself.

103
00:06:07.970 --> 00:06:08.210
All right.

104
00:06:08.210 --> 00:06:13.250
So knowing that knowledge, this is actually going to prove super helpful for us in our tests for mutations.

105
00:06:13.250 --> 00:06:16.790
And I'll show you how it will be helpful in the very next lesson.
