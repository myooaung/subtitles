WEBVTT
1
00:00:00.390 --> 00:00:01.180
Okay.

2
00:00:01.180 --> 00:00:05.740
So now that we have a header container component, we can render it somewhere.

3
00:00:06.040 --> 00:00:11.290
So what I'm actually going to do is rather than create a plain view component, I'm going to create

4
00:00:11.290 --> 00:00:12.340
a view.

5
00:00:12.580 --> 00:00:19.690
And as a reminder, a view is a plain view component, but it represents the top level component, the

6
00:00:19.690 --> 00:00:23.140
top of the hierarchy at a given root.

7
00:00:23.350 --> 00:00:29.980
So the idea is every view here really corresponds to a root in our router index file.

8
00:00:30.130 --> 00:00:33.460
And this is the component that kickstarts the entire process.

9
00:00:33.610 --> 00:00:38.920
It's kind of the component that's loading all of the components from the top level, right?

10
00:00:38.920 --> 00:00:43.180
So in home view, for example, we are rendering our here a component and that is where everything kicks

11
00:00:43.180 --> 00:00:45.070
off when we go to our root home.

12
00:00:45.070 --> 00:00:45.940
Root right.

13
00:00:46.240 --> 00:00:52.180
So in my views directory, I'm going to create a new view and I'm going to call it my team's view.

14
00:00:52.450 --> 00:00:58.780
So teams view dot view and in here I'm going to create my template and I'm going to create my script.

15
00:01:00.080 --> 00:01:05.390
And it's in here that I'm going to import my header container component that we created in the previous

16
00:01:05.390 --> 00:01:05.750
lesson.

17
00:01:06.140 --> 00:01:12.680
So I'm going to import header container and that is going to come from my source directory components

18
00:01:13.010 --> 00:01:15.450
shared and then header container view.

19
00:01:15.890 --> 00:01:19.550
And then of course, I need to export default to my configuration object.

20
00:01:19.820 --> 00:01:27.140
I'm going to give this component a name of teams view and then I'm going to provide my components property.

21
00:01:27.260 --> 00:01:31.970
I'm going to register my header container component, which allows me to use it in line.

22
00:01:32.060 --> 00:01:35.270
And that's exactly what I'm going to do right in my template tag.

23
00:01:35.480 --> 00:01:37.640
I'm going to render a header container.

24
00:01:38.060 --> 00:01:40.310
Now, for now, we're not going to worry about slots.

25
00:01:40.340 --> 00:01:42.080
I just want to get this up on the screen.

26
00:01:42.200 --> 00:01:45.770
So I'm just going to make it a single self-closing component right here.

27
00:01:46.810 --> 00:01:51.580
So now that we have wired up our view, we need to register it and connect it to a route.

28
00:01:51.850 --> 00:01:53.950
So I'm going to head to my router.

29
00:01:54.520 --> 00:01:59.420
Index dots followed and we're going to follow the exact same protocol we did earlier.

30
00:01:59.440 --> 00:02:05.830
We're going to dynamically load our teams page whenever the user's at a specific route, and that's

31
00:02:05.830 --> 00:02:08.200
just going to reduce the total size of our view bundle.

32
00:02:08.530 --> 00:02:15.280
So right here, I'm going to define a new constant called teams view and it's going to be set to an

33
00:02:15.280 --> 00:02:19.600
arrow function that's going to load the import function.

34
00:02:19.840 --> 00:02:20.920
And what is it going to import?

35
00:02:20.950 --> 00:02:24.190
It's going to import this far right here, act views.

36
00:02:24.190 --> 00:02:27.460
And then we're going to import the team's view dot view file.

37
00:02:28.600 --> 00:02:29.510
The one we just created.

38
00:02:29.950 --> 00:02:33.760
The next thing I'm going to do is create a new route for this team's view.

39
00:02:33.790 --> 00:02:36.310
So right here, I'm going to add a new object.

40
00:02:36.340 --> 00:02:42.490
Each object represents a route, and the path where I want the team's view component to load is going

41
00:02:42.490 --> 00:02:43.840
to be slash teams.

42
00:02:44.750 --> 00:02:48.650
And then the name I'm going to assign to this route will simply be teams.

43
00:02:49.520 --> 00:02:56.420
And finally, the component I want to load at this URL or this route is going to be this teams you right

44
00:02:56.420 --> 00:02:56.720
here.

45
00:02:57.020 --> 00:03:01.520
So teams view is a function and that is exactly what dynamically tells you.

46
00:03:01.760 --> 00:03:06.770
Don't auto load the teams your component, rather load it when the user goes to this path.

47
00:03:06.950 --> 00:03:12.830
When the user goes to this path, run this function which will import that top level view component.

48
00:03:13.250 --> 00:03:13.640
All right.

49
00:03:13.970 --> 00:03:20.270
Now we have a registered as an available route, but how do we actually navigate to the teams page?

50
00:03:20.510 --> 00:03:25.140
Well, you may recall that's actually an available menu item on our main nav.

51
00:03:25.490 --> 00:03:31.520
So if I go to a component we have not been to in a while, which is our main NAV component, and this

52
00:03:31.520 --> 00:03:38.060
component we are iterating over a bunch of menu items using the V4 Directive and we are creating a router

53
00:03:38.060 --> 00:03:38.750
linked to each.

54
00:03:38.990 --> 00:03:44.450
As a reminder, a router link is just a view component available from your router that prevents a page

55
00:03:44.450 --> 00:03:45.080
refresh.

56
00:03:45.230 --> 00:03:50.540
So this is how we navigate within a view app and each router link here, as you can see, has a bunch

57
00:03:50.540 --> 00:03:52.670
of text, which is what we displayed to the user.

58
00:03:52.700 --> 00:03:57.890
Actually, it's rendered right here and then we actually have the URL that we are going to and all of

59
00:03:57.890 --> 00:03:59.570
this is configured down below.

60
00:04:00.850 --> 00:04:05.720
Here's where we have our menu items, data object, where we provide the text for the menu and the URL

61
00:04:05.720 --> 00:04:06.440
that it goes to.

62
00:04:06.650 --> 00:04:13.640
And now for my teams page, I want to go to my slash team's root, which we just built up in our router

63
00:04:13.640 --> 00:04:15.020
index that Jess found.

64
00:04:15.260 --> 00:04:19.760
So we're just kind of setting up all the basic plumbing we need to render our header container in a

65
00:04:19.760 --> 00:04:21.380
separate view and a separate root.

66
00:04:21.590 --> 00:04:26.300
And that that's the whole idea in the official Google Careers website, of course, is that each view

67
00:04:26.330 --> 00:04:33.080
has its own header container and each one customizes the header and the subtitle customizes the HTML,

68
00:04:33.080 --> 00:04:37.520
customize the CSS, etc., so that each page can have a different looking header.

69
00:04:37.940 --> 00:04:38.270
All right.

70
00:04:38.270 --> 00:04:40.100
So with that, we can head back to our browser.

71
00:04:41.030 --> 00:04:46.460
And if I go to my team's page right here, we're going to see our sample header container component.

72
00:04:47.180 --> 00:04:47.510
All right.

73
00:04:47.630 --> 00:04:49.430
And everything looks as it should.

74
00:04:49.430 --> 00:04:50.570
It's not really impressive.

75
00:04:50.750 --> 00:04:55.070
But we can see here we're getting the sample title from our very first slot.

76
00:04:55.370 --> 00:05:01.010
So because we did not provide any slot content to our header container when we rendered it, in our

77
00:05:01.130 --> 00:05:06.770
team's view, we're simply falling back to that first slots default content and then view is also falling

78
00:05:06.770 --> 00:05:11.120
back to the second slots default content of sample subtitle right here.

79
00:05:11.390 --> 00:05:11.780
All right.

80
00:05:11.990 --> 00:05:16.490
So now that we've wired everything up in the very next lesson, we can see how we can we can see and

81
00:05:16.490 --> 00:05:21.890
explore how we can provide dynamic slot content to both of our named slots.
