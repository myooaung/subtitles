1
00:00:00,640 --> 00:00:01,540
All right.

2
00:00:01,540 --> 00:00:06,040
So let's go ahead and write some tests for our new action button component.

3
00:00:06,340 --> 00:00:12,520
So right here in my Tests Unit Components folder, I'm going to create a new file and I'm going to call

4
00:00:12,520 --> 00:00:13,660
it action button.

5
00:00:14,170 --> 00:00:14,960
Test that.

6
00:00:15,000 --> 00:00:19,510
Yes, I'm going to follow the same protocol as we followed, which is just going to be the component

7
00:00:19,510 --> 00:00:22,090
name, followed by tasks.

8
00:00:22,720 --> 00:00:23,050
All right.

9
00:00:23,050 --> 00:00:28,840
And I'm going to open it side by side so we can keep an eye on our original file as we write our code.

10
00:00:29,230 --> 00:00:32,170
All right, so let's review everything that we learned about testing.

11
00:00:32,170 --> 00:00:36,970
The first thing we need to do is to import our mount function from the view test utils library.

12
00:00:37,120 --> 00:00:43,980
That's going to allow us to mount or instantiate or bring up our components outside of the browser environment.

13
00:00:43,990 --> 00:00:51,520
So right here I'm going to import a named export called Mount and that comes from the app view slash

14
00:00:51,520 --> 00:00:53,500
test dash utils library.

15
00:00:53,650 --> 00:00:54,040
Okay.

16
00:00:54,340 --> 00:00:55,720
That brings us to Mount Function.

17
00:00:55,720 --> 00:00:58,030
We also need to import our actual components.

18
00:00:58,030 --> 00:01:00,130
So I'm going to import action button.

19
00:01:00,970 --> 00:01:02,800
That's going to be the default export.

20
00:01:02,800 --> 00:01:05,110
So I do not need to wrap it in curly braces.

21
00:01:05,470 --> 00:01:08,380
And then we can specify its location in our project.

22
00:01:08,590 --> 00:01:13,150
We know our very top level is represented by ACT the assignment.

23
00:01:13,150 --> 00:01:18,070
And when I talk about top level, I'm talking about my source directory where my code for The View project

24
00:01:18,070 --> 00:01:18,370
lives.

25
00:01:18,700 --> 00:01:21,190
So within the source directory we can see it right here.

26
00:01:21,190 --> 00:01:25,930
We need to navigate into components and then import action button that we use.

27
00:01:25,930 --> 00:01:27,070
I'm going to import that.

28
00:01:27,430 --> 00:01:28,720
I'm going to import action button.

29
00:01:30,250 --> 00:01:31,120
And there we go.

30
00:01:31,450 --> 00:01:31,750
All right.

31
00:01:31,750 --> 00:01:37,480
So let's create a describe block or a describe function that's coming from just I'm going to describe

32
00:01:37,480 --> 00:01:42,100
my action button and provide a second argument of an arrow function.

33
00:01:42,430 --> 00:01:45,070
And in here, I'm just going to write my first test.

34
00:01:45,070 --> 00:01:47,110
What's the first responsibility of this button?

35
00:01:47,440 --> 00:01:52,810
Well, I think it's supposed to render some bit of text, so I'm going to write that literally as a

36
00:01:52,810 --> 00:01:54,910
text or as a test description.

37
00:01:55,330 --> 00:02:00,750
Text and test are very similar words, so I'm going to put my IT keyword in here, my hit function.

38
00:02:00,750 --> 00:02:02,860
And my first argument is a descriptive string.

39
00:02:03,100 --> 00:02:04,750
It renders text.

40
00:02:05,970 --> 00:02:06,330
All right.

41
00:02:06,330 --> 00:02:11,820
So I'm going to provide my arrow function and I'm going to declare a contact called Wrapper and I'm

42
00:02:11,820 --> 00:02:14,010
going to mount my action button.

43
00:02:14,340 --> 00:02:17,580
That's a prerequisite for just about every test we're ever going to write with you.

44
00:02:17,940 --> 00:02:23,940
Now, we have props in the real world that we feed into action button and they are text and type.

45
00:02:24,180 --> 00:02:29,430
So how can we simulate the passing of those props in a test given that we don't have a literal parent

46
00:02:29,430 --> 00:02:31,590
component that is rendering action button?

47
00:02:31,860 --> 00:02:37,590
Well, once again, we can turn to our second argument to the mount function, which is a configuration

48
00:02:37,590 --> 00:02:38,040
object.

49
00:02:38,310 --> 00:02:40,200
So I'm going to pass in that argument right here.

50
00:02:41,580 --> 00:02:42,030
All right.

51
00:02:42,270 --> 00:02:45,450
And right here, I'm going to provide a key of props.

52
00:02:45,450 --> 00:02:49,530
That's the key we want to use here, as well as a value of an object.

53
00:02:49,680 --> 00:02:53,100
And in the object, we can write to the actual props that we want to provide.

54
00:02:53,430 --> 00:02:58,680
So let me provide a text prop, and I'm going to give it the value of I'm so clickable.

55
00:02:59,660 --> 00:03:02,870
So again, the value here of I'm so clickable is up to us.

56
00:03:02,870 --> 00:03:06,950
The actual prop name must be text because that's what we defined right here.

57
00:03:07,400 --> 00:03:13,250
And for my type prop, I'm going to define it as primary.

58
00:03:14,500 --> 00:03:15,040
And say of this.

59
00:03:15,310 --> 00:03:19,330
So I just want to take a quick moment here to talk about why I think this is okay.

60
00:03:19,360 --> 00:03:24,940
Earlier, we talked about the idea of trying to avoid things like the data method in our configuration

61
00:03:24,940 --> 00:03:25,900
object in a test.

62
00:03:26,020 --> 00:03:30,400
And that's because we're reaching into the implementation details of a component.

63
00:03:30,700 --> 00:03:37,000
In this case, I think it's okay because this is how our action is designed to work in the real world.

64
00:03:37,030 --> 00:03:42,850
A parent component will pass in these two pieces of information and the action, but needs them in order

65
00:03:42,850 --> 00:03:43,270
to work.

66
00:03:44,140 --> 00:03:50,170
An earlier analogy I made is that props for almost two components what inputs are two functions?

67
00:03:50,170 --> 00:03:51,670
They're like arguments that we give.

68
00:03:52,000 --> 00:03:55,750
So if action button is a function, it needs these two arguments.

69
00:03:55,750 --> 00:03:58,150
It needs these two props in order to operate.

70
00:03:58,360 --> 00:04:02,470
So this is not going so deep into the action by the implementation.

71
00:04:02,650 --> 00:04:09,460
This is providing this component what it needs in order to operate even before we build the action button

72
00:04:09,460 --> 00:04:10,020
component.

73
00:04:10,030 --> 00:04:15,910
If we were to follow a TDD style, we might assume normally it would be a fair assumption to make that

74
00:04:15,910 --> 00:04:21,250
if we're going to have a generic button, that we're going to need some kind of text to give it in order

75
00:04:21,250 --> 00:04:21,820
to render.

76
00:04:22,000 --> 00:04:24,250
Now we may choose a different name for our prop.

77
00:04:24,250 --> 00:04:28,420
If we were using TDD, we might have chosen like button text or inner text or whatever.

78
00:04:28,570 --> 00:04:29,620
That's totally fine.

79
00:04:29,770 --> 00:04:35,350
In this case, we are hardcoded to our eventual implementation and our actual prop names that we chose.

80
00:04:35,590 --> 00:04:38,100
But this to me is not an offensive violation.

81
00:04:38,110 --> 00:04:39,910
This is how the component is supposed to work.

82
00:04:40,120 --> 00:04:41,740
So I'm totally okay with that here.

83
00:04:42,130 --> 00:04:42,490
Okay.

84
00:04:42,640 --> 00:04:44,560
So what do I want to fundamentally test?

85
00:04:44,600 --> 00:04:45,730
Well, I want to test that.

86
00:04:45,730 --> 00:04:51,730
My text of I'm so clickable, which I give to the button is somewhere in the output of the button.

87
00:04:52,030 --> 00:04:56,920
So what I can do here is use the familiar text method on my wrapper.

88
00:04:56,950 --> 00:05:01,990
This is going to give me all of the text that is rendered anywhere within the body of my action button

89
00:05:01,990 --> 00:05:02,410
component.

90
00:05:02,650 --> 00:05:08,290
And I want to use that to match matcher, which is just going to check whether the wrappers, text or

91
00:05:08,290 --> 00:05:14,710
the action button's text contains whatever it is that I pass in here as an argument, whether it contains

92
00:05:14,710 --> 00:05:16,360
this substring of text.

93
00:05:16,540 --> 00:05:21,700
And I want to check again that somewhere in my action button's text there should be the text and so

94
00:05:21,700 --> 00:05:22,180
clickable.

95
00:05:23,220 --> 00:05:27,280
So whatever value you provide here, make sure you write it in here as well.

96
00:05:27,300 --> 00:05:29,910
It doesn't matter if it's I'm so clickable or anything else.

97
00:05:30,090 --> 00:05:35,190
As long as the two of them match, let me go ahead and bring up my terminal and we'll see if we can

98
00:05:35,190 --> 00:05:35,880
run this test.

99
00:05:37,010 --> 00:05:41,690
I'm going to run it using the test runner that continues to watch for changes in my code.

100
00:05:41,930 --> 00:05:44,900
And that's going to be NPM, run, test, call and watch.

101
00:05:44,900 --> 00:05:47,210
We set up this script in our package that JSON.

102
00:05:47,690 --> 00:05:53,270
So let's go ahead and run that and run just and watch mode and it passes, which is great.

103
00:05:53,270 --> 00:05:57,800
And just to show you how it fails to make sure that our test is actually not returning a false positive,

104
00:05:58,070 --> 00:06:01,770
we can do something like this, we can return something different like I'm so clickable.

105
00:06:02,150 --> 00:06:04,700
See if that fails as we expect it to.

106
00:06:04,700 --> 00:06:05,420
And there we go.

107
00:06:05,420 --> 00:06:10,640
We can see that we expected the substring of I'm so clickable, but all the text that exists within

108
00:06:10,640 --> 00:06:12,320
an action button is I'm so clickable.

109
00:06:12,320 --> 00:06:13,010
So that's perfect.

110
00:06:14,360 --> 00:06:14,780
All right.

111
00:06:15,290 --> 00:06:15,560
Okay.

112
00:06:15,560 --> 00:06:16,450
So that sounds good to me.

113
00:06:16,460 --> 00:06:18,110
Let's go ahead and write our second test.

114
00:06:18,110 --> 00:06:24,420
The only other test that I want to write here is making sure that we're applying the right CSS class.

115
00:06:24,480 --> 00:06:26,060
I'm going to write my description here.

116
00:06:26,360 --> 00:06:27,770
What is the action button do?

117
00:06:27,770 --> 00:06:35,720
It applies one of several styles to button, and maybe that's being a little bit too detailed because

118
00:06:35,720 --> 00:06:37,100
I am mentioning two button.

119
00:06:37,100 --> 00:06:41,060
Maybe I can just say it applies one of several styles, but I think this is okay for now.

120
00:06:41,360 --> 00:06:47,990
So once again, I'm going to go ahead and mount my action button and here I'm going to do something

121
00:06:47,990 --> 00:06:52,970
a little bit differently this time around, but that's only to show you an educational experience moving

122
00:06:52,970 --> 00:06:53,330
forward.

123
00:06:53,900 --> 00:06:58,220
The reason I am going to do this is because I'm going to assume it might be an issue that you run into

124
00:06:58,220 --> 00:06:59,660
some day in your own views.

125
00:06:59,870 --> 00:07:07,490
And that's this let's say that I obviously care about the props existing and I care about the type existing

126
00:07:07,730 --> 00:07:13,100
because a type of primary is going to determine the styles that I'm going to apply to the button.

127
00:07:13,100 --> 00:07:17,810
So because it is the focus of my test, it's reasonable for me to expect that I'm going to remember

128
00:07:17,810 --> 00:07:23,300
to provide a type prop set to primary, and that's going to affect what I'm testing for.

129
00:07:23,570 --> 00:07:28,580
However, it's reasonable as well to expect as a developer that I'm totally going to forget about the

130
00:07:28,580 --> 00:07:31,490
text prop that this component expects.

131
00:07:31,610 --> 00:07:36,200
And that's because for the purposes of this test, what I'm testing about is styles and sizes.

132
00:07:36,380 --> 00:07:40,520
I may totally forget about the text prop and the fact that the button renders it.

133
00:07:40,670 --> 00:07:40,970
All right.

134
00:07:41,750 --> 00:07:47,450
So we're going to come back to how view is going to alert us that we're missing the text prop in just

135
00:07:47,450 --> 00:07:47,840
a second.

136
00:07:47,840 --> 00:07:53,510
So what I want to do here is I want to look for a button within my template.

137
00:07:53,510 --> 00:07:57,860
And this is a little bit of a violation from earlier because I mentioned it's a good idea to use data

138
00:07:57,860 --> 00:08:05,480
test in order to test for non explicit HTML elements just to be a little bit more resilient towards

139
00:08:05,480 --> 00:08:05,840
change.

140
00:08:06,020 --> 00:08:10,430
In this case, it's a very simple component, very small with a single h html no button.

141
00:08:10,610 --> 00:08:12,020
It's literally called action button.

142
00:08:12,260 --> 00:08:17,000
I know it's not perfect, but in this scenario I'm going to be okay just using the find the method on

143
00:08:17,000 --> 00:08:19,520
my wrapper to look for a literal h html element.

144
00:08:19,730 --> 00:08:23,180
If you want to do this with the data test attribute, feel free to do that.

145
00:08:23,180 --> 00:08:24,560
That's probably the better way to do it.

146
00:08:24,770 --> 00:08:26,180
But for now I'll forgive myself.

147
00:08:26,180 --> 00:08:29,630
So I'll create a contact called Button on my wrapper.

148
00:08:29,630 --> 00:08:30,920
I'm going to have a find method.

149
00:08:30,920 --> 00:08:34,520
I can use it to find HTML elements or CSS classes or whatever I want.

150
00:08:34,760 --> 00:08:38,570
I'm going to search for the first occurrence of an HTML button element.

151
00:08:38,830 --> 00:08:39,080
Right?

152
00:08:39,320 --> 00:08:45,140
That's going to give me a separate view test utils wrapper around the first HTML button that Vue test

153
00:08:45,140 --> 00:08:46,100
utils finds.

154
00:08:46,400 --> 00:08:48,080
And on that object.

155
00:08:49,180 --> 00:08:52,150
We're going to have a method called classes.

156
00:08:52,510 --> 00:08:52,870
All right.

157
00:08:53,230 --> 00:08:59,770
So to that class method, I'm going to provide a string of a class that I expect to find.

158
00:08:59,800 --> 00:09:05,080
So given that I'm passing in a prop with a type of primary, I'm going to expect there to be a primary

159
00:09:05,080 --> 00:09:07,360
class on this button.

160
00:09:07,750 --> 00:09:08,160
Okay.

161
00:09:08,470 --> 00:09:10,960
And then this I expect to evaluate to.

162
00:09:10,960 --> 00:09:11,410
True.

163
00:09:11,440 --> 00:09:12,640
It's going to value to true.

164
00:09:12,640 --> 00:09:18,970
If the primary class exists among the buttons classes and it's going to add value to false if the primary

165
00:09:18,970 --> 00:09:22,150
class does not exist among the buttons classes.

166
00:09:22,450 --> 00:09:29,050
So here, because I passed in a type of primary, I'm going to write to be true the to be matter checks

167
00:09:29,050 --> 00:09:30,040
for strict equality.

168
00:09:30,220 --> 00:09:32,260
It's totally okay to use it with our booleans.

169
00:09:32,440 --> 00:09:37,540
So I'm going to say that somewhere in the first button that you find in the action button component,

170
00:09:37,540 --> 00:09:40,510
it's going to be the only button, in fact, because it's the only one we have here.

171
00:09:40,780 --> 00:09:42,520
Find that button view test utils.

172
00:09:42,700 --> 00:09:47,710
Check the kind of seasons classes that it has applied to it and make sure that primaries in that list

173
00:09:47,710 --> 00:09:48,700
of classes are all right.

174
00:09:48,880 --> 00:09:50,320
And I'm just going to mandate that that's true.

175
00:09:50,470 --> 00:09:50,800
All right.

176
00:09:51,070 --> 00:09:52,930
So this is going to pass as well.

177
00:09:52,960 --> 00:09:54,670
We know that we are applying a primary.

178
00:09:54,760 --> 00:09:54,930
Yes.

179
00:09:54,940 --> 00:09:57,250
This class I can just vary this test up.

180
00:09:57,250 --> 00:09:59,830
I can even do something like change this to false.

181
00:10:00,670 --> 00:10:05,170
And we're going to see the test says you expected it to not be found, but I have found it, which is

182
00:10:05,170 --> 00:10:05,500
great.

183
00:10:05,500 --> 00:10:06,820
The test is working as expected.

184
00:10:07,060 --> 00:10:11,830
Alternatively, if I have something like something like a typo here and I pass in a type of primaries,

185
00:10:11,950 --> 00:10:14,530
then we expect to see us class of primaries.

186
00:10:14,620 --> 00:10:19,210
But that's not going to work because we're only going to have we're checking actually for a primary

187
00:10:19,210 --> 00:10:22,860
class when now the component is going to have a primary class.

188
00:10:22,870 --> 00:10:23,110
Right.

189
00:10:23,350 --> 00:10:25,060
So everything is working as expected.

190
00:10:25,060 --> 00:10:30,100
I've just ran a few failing tests to make sure my code is properly reacting to these changes.

191
00:10:30,970 --> 00:10:32,260
I'm going to switch this back.

192
00:10:33,220 --> 00:10:34,390
And there we go.

193
00:10:34,630 --> 00:10:36,400
And that's really all there is to cover in this lesson.

194
00:10:36,400 --> 00:10:39,220
We wrote some basic tests for action button.

195
00:10:39,400 --> 00:10:44,680
Notice at this point that the output is not complaining about the missing text prop.

196
00:10:44,800 --> 00:10:48,870
We're going to fix that and now test up ahead and I'll show you how to do that in the next couple lessons.

197
00:10:49,120 --> 00:10:51,130
But for now, this is a good place to start.

198
00:10:51,400 --> 00:10:56,920
The only other quick discussion that we may have is should we test the action button with a different

199
00:10:56,920 --> 00:10:58,450
value for the type prop?

200
00:10:58,450 --> 00:11:02,200
Like should we write a separate test with type set to secondary?

201
00:11:02,470 --> 00:11:07,960
And I would argue that there's really no benefit because there's no different code or different logic

202
00:11:07,960 --> 00:11:08,950
that we're running through.

203
00:11:09,130 --> 00:11:12,040
It's always going to evaluate to this line right here.

204
00:11:12,280 --> 00:11:14,380
So we're really just testing the same thing.

205
00:11:14,380 --> 00:11:20,230
Whatever type we passed in as the seasons class that we want to apply in the real world, obviously

206
00:11:20,230 --> 00:11:22,690
there will be multiple types of type.

207
00:11:22,690 --> 00:11:27,520
There will be primary, secondary and whatever other values that we can pass in.

208
00:11:27,730 --> 00:11:32,290
But as it stands right now, we're testing that view is running through this logic and doing the right

209
00:11:32,290 --> 00:11:35,200
thing as far as CSS class application.

210
00:11:35,380 --> 00:11:39,790
So I don't think there's any advantage to writing a separate test for another value of type.

211
00:11:40,000 --> 00:11:41,950
I that's really all there is to cover here.

212
00:11:41,950 --> 00:11:43,660
So I will see you in the next lesson.
