1
00:00:00,210 --> 00:00:00,870
Okay.

2
00:00:00,870 --> 00:00:06,750
So on the right side of my screen, I've opened up my main now test suite and this is the test that

3
00:00:06,750 --> 00:00:07,320
is failing.

4
00:00:07,650 --> 00:00:13,080
You may recall that this is the test where we are testing that the commit mock function that we have

5
00:00:13,080 --> 00:00:15,780
used to replace the stores commit method.

6
00:00:16,050 --> 00:00:21,270
We are testing here that it has been called with the right argument of log in user whenever the user

7
00:00:21,270 --> 00:00:22,710
clicks on the log in button.

8
00:00:23,010 --> 00:00:29,340
And if we look at our test value right here, we can actually see right here in this receive section

9
00:00:29,550 --> 00:00:35,160
that when we run this code, we are still receiving log in user correctly as our first argument.

10
00:00:35,460 --> 00:00:41,610
However, we're also seeing the second argument that the test is receiving when it runs this component

11
00:00:41,730 --> 00:00:44,970
and it's this object with a property of is trusted set to false.

12
00:00:45,180 --> 00:00:51,030
So this, I think is an internal implementation detail that is specifically related to how map mutations

13
00:00:51,030 --> 00:00:51,390
works.

14
00:00:51,720 --> 00:00:54,930
Basically, to summarize, our code is still really working.

15
00:00:55,290 --> 00:00:59,970
We really care about the right mutation being issued right here and we are still receiving.

16
00:00:59,970 --> 00:01:05,970
It just is just failing because we told it to expect one argument in our in our mock function and instead

17
00:01:05,970 --> 00:01:10,320
it's receiving to the expected string and some kind of configuration object.

18
00:01:10,620 --> 00:01:16,080
So one option to fix this is to simply copy this object right here and to add it as the second argument

19
00:01:16,080 --> 00:01:18,930
right here and basically saying that's what we expect it to be called with.

20
00:01:19,170 --> 00:01:25,440
But that starts to get a little bit into more of the nitty gritty details of how Matt mutations works.

21
00:01:25,680 --> 00:01:28,650
So there is a simpler solution, to be quite honest with you.

22
00:01:28,650 --> 00:01:30,720
I don't know why it works, but it does.

23
00:01:30,720 --> 00:01:32,460
And so I'm going to stick with that approach here.

24
00:01:32,790 --> 00:01:35,370
So we know that we have a log user method.

25
00:01:35,640 --> 00:01:38,970
We know that we are referencing it here, right here in our click handler.

26
00:01:38,970 --> 00:01:42,570
And we know that Vue automatically runs this for us behind the scenes.

27
00:01:42,900 --> 00:01:47,310
Well, we can actually force the manual invocation of this method in line.

28
00:01:47,430 --> 00:01:52,320
Vue automatically does it behind the scenes, and I'm guessing that's where Matt Mutations feeds in

29
00:01:52,320 --> 00:01:53,460
additional information.

30
00:01:53,670 --> 00:01:58,620
So what I'm simply going to do is manually invoke this method in line by providing a pair of parentheses

31
00:01:58,770 --> 00:02:00,900
the same way we do to any JavaScript method.

32
00:02:01,140 --> 00:02:06,360
And when I save this and the test rerun, you're going to see that forces the map mutations method to

33
00:02:06,360 --> 00:02:10,100
run this method without providing any of the additional arguments that we receive.

34
00:02:10,380 --> 00:02:14,340
All right, sorry, I can't offer you a better explanation, but whenever you see that is a trusted

35
00:02:14,340 --> 00:02:17,040
issue, simply manually invoke the method in line.

36
00:02:17,190 --> 00:02:22,170
The way I found the solution was simply by stack overflying that object and saying something like,

37
00:02:22,170 --> 00:02:27,600
you know, testing view x map mutations seeing is trusted false.

38
00:02:27,750 --> 00:02:32,520
And I found a Stack Overflow page that said, Hey, just manually invoke that method in line and that

39
00:02:32,520 --> 00:02:33,360
will solve the problem.

40
00:02:33,600 --> 00:02:33,900
All right.

41
00:02:34,080 --> 00:02:40,050
So now our test is back to running and we haven't modified any of its actual core logic.

42
00:02:40,050 --> 00:02:45,030
We are still testing the heart of it, which is that the commit method is being called with the right

43
00:02:45,240 --> 00:02:46,020
mutation name.

44
00:02:46,200 --> 00:02:50,290
Even though we're using the helper map, mutations function from view X.

45
00:02:50,460 --> 00:02:53,190
The implementation under the hood is still the same.

46
00:02:53,310 --> 00:02:57,390
It's still defining the exact same log in user method we would have defined.

47
00:02:57,480 --> 00:03:02,550
It's still calling the commit method on the store with the right mutation name.

48
00:03:02,550 --> 00:03:08,520
So our our implementation has changed, but our test is still passing, which is a good sign that our

49
00:03:08,520 --> 00:03:12,420
tests are decoupled from our implementation and that they're testing the right thing.

50
00:03:12,570 --> 00:03:17,700
They're testing the interaction of our main NAV component with our store without caring about the specifics

51
00:03:17,700 --> 00:03:22,710
of how the main NAV is doing it, either through our own methods or through the methods created for

52
00:03:22,710 --> 00:03:23,820
us by map mutations.

53
00:03:24,060 --> 00:03:28,380
So our implementation changes, but our tests have stayed the same, and that is a good sign that they

54
00:03:28,380 --> 00:03:29,430
are testing the right thing.

55
00:03:29,970 --> 00:03:30,300
All right.

56
00:03:30,510 --> 00:03:35,140
So with that correction, we are good to wrap up this first introductory section to view X.

57
00:03:35,370 --> 00:03:37,020
So I will see you in the next lesson.
