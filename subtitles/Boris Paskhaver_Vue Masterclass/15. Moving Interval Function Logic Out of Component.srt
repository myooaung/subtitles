1
00:00:00,540 --> 00:00:01,370
Okay.

2
00:00:01,380 --> 00:00:05,790
So the next thing that I'd like to do is to perform another refactor.

3
00:00:06,090 --> 00:00:13,200
What I'd like to do is to move this logic right here, this selection of the next array element out

4
00:00:13,200 --> 00:00:15,990
of our headline view component.

5
00:00:16,230 --> 00:00:21,120
I want to move this into a separate helper function somewhere else in our code base.

6
00:00:21,420 --> 00:00:23,790
Now, why do I think this is a good thing to do?

7
00:00:24,060 --> 00:00:30,840
Well, right now, there's really no other use cases where we need to select the next item from an array.

8
00:00:31,050 --> 00:00:35,880
But this is something that I can imagine other components on our site eventually needing, right?

9
00:00:35,880 --> 00:00:40,140
Having some kind of an array of values and needing to select the next value.

10
00:00:40,590 --> 00:00:47,130
And more importantly than even that is this idea of keeping our component as lightweight as possible.

11
00:00:47,130 --> 00:00:47,400
Right?

12
00:00:47,580 --> 00:00:52,590
If this logic doesn't need to live in the component, then we can definitely extract it out.

13
00:00:52,770 --> 00:00:59,220
And the advantages we can then unit test the logic for this function without needing this encompassing

14
00:00:59,220 --> 00:01:01,050
wrapper of the headline component.

15
00:01:01,230 --> 00:01:02,850
We make the components smaller.

16
00:01:03,030 --> 00:01:04,920
We reduce its responsibilities.

17
00:01:05,040 --> 00:01:10,560
We isolate this logic so we can test the headline component separately and independently of this logic,

18
00:01:10,650 --> 00:01:16,200
and then test this function logic separately and independently from the headline component as well.

19
00:01:16,440 --> 00:01:17,700
So we split things up.

20
00:01:18,060 --> 00:01:24,270
You have to always be unafraid to make lots of small objects or small things, small responsibilities

21
00:01:24,270 --> 00:01:29,760
in programming, because it's a lot easier to reason it out and test when you have lots of small functions,

22
00:01:29,760 --> 00:01:34,590
classes, etc. components compared to large components that do many things right.

23
00:01:35,190 --> 00:01:39,330
So we'll talk later about testing things like set interval and stuff like that.

24
00:01:39,510 --> 00:01:45,150
For now, I want to move the logic of the function that we pass to set interval out of this component.

25
00:01:45,420 --> 00:01:51,240
Now I do want to retain some aspects of this function, but I also want to abandon others.

26
00:01:51,570 --> 00:01:57,630
So, for example, this selection logic of getting the next element from the array makes sense to me

27
00:01:57,630 --> 00:02:00,800
because that is replicable and applicable somewhere else.

28
00:02:00,810 --> 00:02:07,050
I can easily imagine it being used for some kind of other flashing selection of text somewhere in the

29
00:02:07,050 --> 00:02:07,350
app.

30
00:02:07,650 --> 00:02:13,230
In comparison, our array of actions is something that does feel like it belongs in headline.

31
00:02:13,410 --> 00:02:17,820
It's the headline component that should know about these action verbs, but maybe it should not know

32
00:02:17,820 --> 00:02:20,130
about how to find the next one.

33
00:02:20,400 --> 00:02:25,410
In other words, other components in the app probably will not use this collection of actions.

34
00:02:25,650 --> 00:02:34,830
So I'd like to write a function that I can provide a array of words to and isolate just this logic to

35
00:02:34,830 --> 00:02:35,760
that function.

36
00:02:35,910 --> 00:02:36,150
Right.

37
00:02:36,270 --> 00:02:40,280
It's kind of a tough concept to explain in terms of where do we put responsibilities.

38
00:02:40,920 --> 00:02:43,380
But the ultimate goal, as always, is re-use, right?

39
00:02:43,590 --> 00:02:48,690
How can I isolate the things that are common somewhere else while keeping the things that are unique

40
00:02:48,690 --> 00:02:54,510
in their original location so this feels distinct and related and important to the headline component.

41
00:02:54,750 --> 00:02:58,770
This array based logic does not necessarily pertain to headline.

42
00:02:58,890 --> 00:03:01,050
So this is what I want to move out.

43
00:03:01,230 --> 00:03:01,530
All right.

44
00:03:01,800 --> 00:03:06,420
So what we're going to do is we're going to follow a TDD approach, test driven development to write

45
00:03:06,420 --> 00:03:08,520
a test for this function logic.

46
00:03:08,640 --> 00:03:14,550
And then we're going to slowly migrate this code from headline to our eventual utility, a JavaScript

47
00:03:14,550 --> 00:03:14,850
file.

48
00:03:15,180 --> 00:03:17,460
So let's begin by creating that file.

49
00:03:17,470 --> 00:03:24,000
So right now, I'm going to create a new directory in our source folder and I'm going to call that folder

50
00:03:24,000 --> 00:03:26,910
utils, and that is short for a utility.

51
00:03:26,910 --> 00:03:33,720
So a utility function is just a helper function that helps us do something outside and component necessarily.

52
00:03:34,050 --> 00:03:40,380
So right here I'll create a new JavaScript file and I'm going to call this file next element in list

53
00:03:40,620 --> 00:03:41,130
dot.

54
00:03:41,130 --> 00:03:41,670
JS.

55
00:03:41,700 --> 00:03:45,750
This is going to be the name of our function as well, so I'll give that file the same name.

56
00:03:46,140 --> 00:03:50,970
So in here, since I do want to follow a TDD approach, I don't want to write any explicit code.

57
00:03:51,090 --> 00:03:55,920
The only thing I'm going to do right now is define the core structure of this function and then export

58
00:03:55,920 --> 00:03:56,040
it.

59
00:03:56,400 --> 00:03:58,350
So I'll use the console keyword.

60
00:03:58,350 --> 00:04:01,320
I'll declare my next element in list function.

61
00:04:01,530 --> 00:04:02,940
I'll make it an arrow function.

62
00:04:03,060 --> 00:04:07,320
And for now, it's just going to accept no arguments and have an empty function body.

63
00:04:07,440 --> 00:04:07,770
All right.

64
00:04:08,160 --> 00:04:13,290
So just the base infrastructure for an arrow function and below I will export default.

65
00:04:14,160 --> 00:04:16,380
This next element in list function.

66
00:04:16,950 --> 00:04:17,310
All right.

67
00:04:17,490 --> 00:04:20,610
The next thing I'd like to do is to start wiring up our test suite.

68
00:04:20,610 --> 00:04:24,870
So in our tests directory, we have our unit folder.

69
00:04:24,990 --> 00:04:29,640
And this is still going to be a unit test because it's targeting one small unit of the application.

70
00:04:29,850 --> 00:04:31,950
But of course it's no longer a component.

71
00:04:32,250 --> 00:04:39,240
So within my unit directory right here, I'd like to create a folder called Utils, mirroring the structure

72
00:04:39,240 --> 00:04:40,740
that we have in our source directory.

73
00:04:40,950 --> 00:04:48,240
And in my utils directory here, I'd like to create the next element in list dot test.

74
00:04:48,340 --> 00:04:49,290
Gorgeous file.

75
00:04:50,520 --> 00:04:50,880
All right.

76
00:04:51,240 --> 00:04:56,700
Let me go ahead and move this test file to the right so we can see it side by side with my implementation.

77
00:04:57,060 --> 00:05:01,620
And of course, we do not need our mount function because we're not actually dealing with any view components.

78
00:05:01,920 --> 00:05:05,430
But we do need to import our original next element in list function.

79
00:05:05,730 --> 00:05:08,640
So right here I'm going to import next element in list.

80
00:05:09,180 --> 00:05:13,890
In fact, my code automatically did it for me, but it's going to come from our source directory, which

81
00:05:13,890 --> 00:05:19,350
is the app sign, then the utils folder and then the file is called Next Element in list.

82
00:05:19,800 --> 00:05:25,170
All right, so let's write a described function and we're going to test the next element in list function.

83
00:05:26,740 --> 00:05:31,270
And I'm going to write a description here in an IT function call.

84
00:05:31,280 --> 00:05:32,720
So what does this function do?

85
00:05:32,740 --> 00:05:39,520
It locates element in list and returns the next element in list.

86
00:05:41,610 --> 00:05:45,780
So I'm going to provide an arrow function as my second argument here, and then let's wire this up.

87
00:05:45,780 --> 00:05:49,460
In fact, let me give us a little bit more real estate here as well on the right hand side.

88
00:05:49,470 --> 00:05:49,830
Perfect.

89
00:05:50,220 --> 00:05:52,770
So let's begin with a list of arbitrary values.

90
00:05:52,770 --> 00:05:55,890
I'm going to give it a name of list and I'll just keep it simple.

91
00:05:55,890 --> 00:05:58,770
I'll just have an array of five simple character strings.

92
00:05:58,770 --> 00:06:06,030
So I'll do a, B, C, D, E, and let's say the current value that I'm on will be C.

93
00:06:06,030 --> 00:06:13,140
So I'll define a consort called value and I'll give it a value of C, and of course, I expect my next

94
00:06:13,140 --> 00:06:18,360
element in list function to be able to take this current array as well as take the current value and

95
00:06:18,360 --> 00:06:20,250
return the next one in line.

96
00:06:20,430 --> 00:06:25,290
So if my current value is C, I expect the return value to of course be D, right?

97
00:06:25,290 --> 00:06:28,710
This is mirroring the exact same idea we have in our headline component.

98
00:06:29,040 --> 00:06:33,960
So of course we can expect using a to the approach that we're going to feed the list to our function,

99
00:06:34,260 --> 00:06:38,160
we're going to feed the value to our function, and we're going to get a return value back which are

100
00:06:38,160 --> 00:06:39,840
assigned to a constant call result.

101
00:06:41,220 --> 00:06:46,560
And then below we can say that we expect result to be a certain value and what do we expect it to be?

102
00:06:46,770 --> 00:06:52,200
The next string in line of course is going to be D, so I'm going to add a D here, let prettier add

103
00:06:52,200 --> 00:06:54,390
some logic and let's go ahead and test this.

104
00:06:54,390 --> 00:06:56,670
So I'm going to bring up my terminal right here.

105
00:06:58,530 --> 00:07:01,440
And let's go ahead and run just in watch mode.

106
00:07:01,560 --> 00:07:03,690
So it's going to continue running as we make changes.

107
00:07:03,960 --> 00:07:09,660
So NPM run, test watch and just should locate the change files.

108
00:07:10,320 --> 00:07:12,030
And there it is running next element to list.

109
00:07:12,030 --> 00:07:14,130
And of course, it's going to fail as it should.

110
00:07:14,520 --> 00:07:20,400
And if we scroll up, we can see it expected a result of D, but it received undefined because a function

111
00:07:20,400 --> 00:07:25,680
with no implementation or no explicit return value will return undefined by default.

112
00:07:26,040 --> 00:07:26,310
All right.

113
00:07:26,310 --> 00:07:31,080
So we know that this function is going to take two parameters and we can call them the exact same name.

114
00:07:31,080 --> 00:07:33,210
We have four constants on the right hand side.

115
00:07:33,450 --> 00:07:36,960
We're going to receive some kind of list and we're going to receive our current value.

116
00:07:36,960 --> 00:07:38,640
So I'll say list value right here.

117
00:07:40,250 --> 00:07:46,250
And then we can go ahead and head to our headline component and copy most of this logic to that file

118
00:07:46,250 --> 00:07:49,280
and it's going to copy these lines and then we'll see if we need them.

119
00:07:49,300 --> 00:07:53,480
So going back to next element and list, I'll copy these lines.

120
00:07:54,840 --> 00:07:55,560
It's kind of getting hard.

121
00:07:55,560 --> 00:07:57,780
Let me, in fact, reduce my ed size.

122
00:07:57,780 --> 00:07:58,520
That might make it easier.

123
00:07:58,530 --> 00:07:59,490
Okay, that's perfect.

124
00:07:59,760 --> 00:08:03,150
Okay, so we first have this line of our list of actions.

125
00:08:03,150 --> 00:08:08,190
We no longer need this because we are going to get that list of strings as our list argument.

126
00:08:08,200 --> 00:08:10,230
So we do not need this line anymore.

127
00:08:10,650 --> 00:08:16,020
Then we no longer have a list of actions, we just have a general list so I can change this actions

128
00:08:16,020 --> 00:08:20,880
reference to my list argument and of course we are finding the index of the current value.

129
00:08:21,540 --> 00:08:23,880
So it's no longer going to be this that action.

130
00:08:24,060 --> 00:08:27,990
It's going to be whatever is the current value represented by my value argument.

131
00:08:28,410 --> 00:08:29,640
Let me remove this comment.

132
00:08:30,360 --> 00:08:30,930
All right.

133
00:08:31,200 --> 00:08:36,630
And then, of course, we're going to have not next action and not next action index, but really next

134
00:08:36,630 --> 00:08:42,690
value index and next value, because they're not specifically tied to actions on our headline, they're

135
00:08:42,690 --> 00:08:44,430
just a value within an array.

136
00:08:44,850 --> 00:08:45,210
All right.

137
00:08:45,210 --> 00:08:47,460
So this is also going to be next value index.

138
00:08:47,790 --> 00:08:52,350
There is one mistake that I have in my implementation currently, but we're going to leave it and we're

139
00:08:52,350 --> 00:08:54,960
going to see how TDD helps us discover it later.

140
00:08:55,290 --> 00:08:57,960
So here we are indexing into my actions list.

141
00:08:57,960 --> 00:09:00,030
Of course, that actions list no longer exists.

142
00:09:00,270 --> 00:09:01,680
We just have a regular list.

143
00:09:02,670 --> 00:09:07,650
Okay, so index into our list at the next value index that's going to give us our next value.

144
00:09:07,650 --> 00:09:10,230
And then of course, we need to return next value.

145
00:09:11,160 --> 00:09:13,020
So let's save this and see where we are.

146
00:09:13,020 --> 00:09:19,290
Our implementation is working just great, but it's always a good idea to test for edge cases.

147
00:09:19,290 --> 00:09:24,960
And edge cases, of course, refer to situations that you're less likely to encounter but are still

148
00:09:25,440 --> 00:09:26,760
potentially possible, right?

149
00:09:26,760 --> 00:09:28,770
They exist on the edge of something.

150
00:09:29,100 --> 00:09:35,760
So in this case, if we look at our array, we have most of the same kind of test, right?

151
00:09:35,760 --> 00:09:40,950
A is going to go to B and B is going to go to see and C is going to go to D and writing duplicate tests

152
00:09:40,950 --> 00:09:43,500
for that kind of logic is redundant and doesn't help us.

153
00:09:43,770 --> 00:09:49,800
The one edge case, the one different scenario from the rest is what happens if we are on the last element

154
00:09:49,800 --> 00:09:50,610
in the array.

155
00:09:50,910 --> 00:09:56,520
So if we have a list and our value is E, we expect the next value to be A That is a different bit of

156
00:09:56,520 --> 00:09:56,970
logic.

157
00:09:56,970 --> 00:09:58,920
So I want to test that in a separate test.

158
00:09:59,220 --> 00:10:04,080
So right here I'll add another describe and I'll set the context for this test.

159
00:10:04,410 --> 00:10:15,090
So when element is at the end of the list, what do I want to test that it locates next element at start

160
00:10:15,270 --> 00:10:15,930
of the list.

161
00:10:17,420 --> 00:10:17,930
Perfect.

162
00:10:18,260 --> 00:10:21,040
So I can keep a very similar test setup to what I have here.

163
00:10:21,050 --> 00:10:22,550
I'm going to copy this below.

164
00:10:23,060 --> 00:10:28,940
Of course, the difference here is instead of a value of C, I want to test for a value of E, and so

165
00:10:28,940 --> 00:10:34,250
my results should no longer be D, it should be the first element in the array because I want to loop

166
00:10:34,250 --> 00:10:35,390
back around to the beginning.

167
00:10:35,600 --> 00:10:40,520
So this should be a and this is the beautiful part of t d is we're going to test for this edge case

168
00:10:40,520 --> 00:10:42,560
and we're actually going to see a failure.

169
00:10:42,560 --> 00:10:45,860
And that means that something is imperfect about our implementation.

170
00:10:46,220 --> 00:10:52,160
So you can see here that we are expecting a value of a, but instead we're getting a value of B, so

171
00:10:52,160 --> 00:10:54,410
we can take a look at what's going on here.

172
00:10:55,280 --> 00:11:01,070
And one thing that is the actual source of the error is right now we are feeding in a list of five elements

173
00:11:01,070 --> 00:11:06,860
in comparison in a headline, we were providing an array of four actions and our original implementation

174
00:11:06,860 --> 00:11:12,230
was doing the modulo of four because it was always assuming that our list would have four elements.

175
00:11:12,440 --> 00:11:18,290
Now our lists length could be dynamic because this function could in theory accept a array of any length.

176
00:11:18,560 --> 00:11:22,610
So we to need to take the module, not a four, but of the list length.

177
00:11:22,820 --> 00:11:27,920
And again, the reason we applied the modulo in the first place is to ensure these situations that we

178
00:11:27,920 --> 00:11:32,990
do not have a index that is beyond the final index value of the array.

179
00:11:33,200 --> 00:11:36,290
So we're going to take our current index, we're going to add one to it.

180
00:11:36,380 --> 00:11:41,600
And then by taking the modulo of the array length, we ensure that we're always going to have an array

181
00:11:41,600 --> 00:11:46,370
index position that is a valid index position and is the one we want, which is next in line.

182
00:11:46,670 --> 00:11:51,350
So rather than taking the module four, I want to take the modulo of my arrays length.

183
00:11:51,680 --> 00:11:58,550
My array is represented by my list argument and I can get an arrays length by accessing the length property.

184
00:11:59,530 --> 00:12:03,820
So just very quickly, to reiterate, let's say we have a value of E here.

185
00:12:04,030 --> 00:12:08,920
So in that case, E is going to be found at index position for in my list.

186
00:12:08,920 --> 00:12:09,310
All right.

187
00:12:09,670 --> 00:12:15,670
So index position for plus one gets us to index position five, which does not exist in this array.

188
00:12:15,910 --> 00:12:22,570
However, index five Devorah modulo two by the list length is going to be five modulo five.

189
00:12:22,930 --> 00:12:28,690
That leaves a remainder of zero because five goes evenly into five and that remainder of zero is going

190
00:12:28,690 --> 00:12:33,730
to be the value of my next index, which is index zero, which is my a string.

191
00:12:33,730 --> 00:12:35,950
So that works exactly as we'd like it to work.

192
00:12:36,340 --> 00:12:41,140
So when I save this, we should see that our tests are now passing and we've captured that edge case

193
00:12:41,290 --> 00:12:47,530
and ensured that our implementation is not directly connected to the explicit logic of our headline

194
00:12:47,530 --> 00:12:49,960
component, where we have an array of four elements.

195
00:12:50,320 --> 00:12:52,240
All right, so this is a good place to leave off.

196
00:12:52,240 --> 00:12:57,700
In the very next lesson, we're going to go back to our headline component and reuse this next element.

197
00:12:57,700 --> 00:12:59,920
Enlist logic in the component body.
