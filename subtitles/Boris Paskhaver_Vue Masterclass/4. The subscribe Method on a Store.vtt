WEBVTT
1
00:00:00.510 --> 00:00:01.320
Okay.

2
00:00:01.320 --> 00:00:07.650
So at the end of the previous lesson, we saw that whenever we clicked the clear filters button in our

3
00:00:07.650 --> 00:00:12.540
job filter sidebar component, we were successfully updating the View Store State.

4
00:00:12.720 --> 00:00:16.260
However, we were not clearing the checkboxes themselves.

5
00:00:16.650 --> 00:00:21.930
So as a reminder, we are actually rendering those checkboxes in these children components.

6
00:00:21.930 --> 00:00:24.510
The Job Filter Sidebar CheckBox Group.

7
00:00:24.870 --> 00:00:28.260
So let's open up that component and remind ourselves how it works.

8
00:00:28.530 --> 00:00:33.870
So right here I'm going to open up job filters, sidebar, checkbox, group, dot view.

9
00:00:34.740 --> 00:00:35.010
All right.

10
00:00:35.010 --> 00:00:40.350
So as a reminder, we pass any prop called Unique Values, which is either a set of strings or an array

11
00:00:40.350 --> 00:00:40.800
of strings.

12
00:00:41.040 --> 00:00:44.070
And then we iterate over that right here with a V4 directive.

13
00:00:44.280 --> 00:00:46.860
And here's where we actually render the checkbox.

14
00:00:47.250 --> 00:00:53.100
So will notice here that the checkbox is use the V model directive to connect to selected values.

15
00:00:53.340 --> 00:00:59.520
And if I scroll down, you'll see right here that selected values is basically local component state.

16
00:00:59.730 --> 00:01:05.880
We are using that ref function from view to create a reactive object and it starts out with an empty

17
00:01:05.880 --> 00:01:06.210
array.

18
00:01:06.510 --> 00:01:10.920
And so the way this works is whenever the user selects a value, we run this logic right here.

19
00:01:11.130 --> 00:01:17.100
And what we do is we send the proper mutation to the View Store and we provide the current array being

20
00:01:17.100 --> 00:01:18.930
stored in our selected values.

21
00:01:19.140 --> 00:01:20.160
Reactive object.

22
00:01:20.460 --> 00:01:23.280
So in other terms, we are using local state.

23
00:01:23.280 --> 00:01:28.890
Here we are keeping track of the actual selected checkboxes locally in this component.

24
00:01:29.130 --> 00:01:34.620
And then whenever the user interacts with the checkbox, we take that local component, state represented

25
00:01:34.620 --> 00:01:38.240
by selected values and we send it off to view X, right?

26
00:01:38.460 --> 00:01:41.310
And we talked earlier about why this isn't a perfect idea.

27
00:01:41.790 --> 00:01:46.020
Basically, the problem here is that we have duplicate information being stored in two different places.

28
00:01:46.230 --> 00:01:52.830
We have local component state, and we also have that exact same copy of data shipped off to view so

29
00:01:52.830 --> 00:01:59.490
it can update its own property such as a selected job types or selected agrees with the local components

30
00:01:59.490 --> 00:02:01.920
data so that it can perform its filter logic.

31
00:02:02.280 --> 00:02:08.310
So of course what is happening is whenever we update our view store, this local component state represented

32
00:02:08.310 --> 00:02:12.720
by these selected values, reactive object that has no clue that it needs to update.

33
00:02:12.900 --> 00:02:15.990
So it's still stores its original array of strings.

34
00:02:16.140 --> 00:02:22.470
And just because the View Store replaces its property does not mean that our local component state changes,

35
00:02:22.470 --> 00:02:22.690
right?

36
00:02:22.710 --> 00:02:26.040
That is why our checkboxes are not disappearing off the screen.

37
00:02:26.490 --> 00:02:32.190
So what we can do here as a very simple solution is we can try to listen to The View Store and we could

38
00:02:32.190 --> 00:02:37.890
say, Hey, View Store, whenever you're running that mutation we told you to run, which is clear user

39
00:02:37.890 --> 00:02:39.000
job filter selections.

40
00:02:39.210 --> 00:02:42.660
What we can do is tell this component to update its local state.

41
00:02:42.900 --> 00:02:48.750
We can tell it to focus on its selected values, reactive object and change its internal value to be

42
00:02:48.750 --> 00:02:49.530
an empty array.

43
00:02:49.800 --> 00:02:54.870
And once that local state inside this component update, the component itself will re render.

44
00:02:55.020 --> 00:02:59.640
And because it no longer has any selected values, it should automatically remove the checkboxes.

45
00:03:00.510 --> 00:03:03.180
All right, so how are we going to make that a reality?

46
00:03:03.480 --> 00:03:06.450
Well, we have access to our view store right here.

47
00:03:06.450 --> 00:03:08.760
We use the use store function right here.

48
00:03:09.120 --> 00:03:14.340
And on that store, we have a new method which we have not talked about so far throughout the course.

49
00:03:14.580 --> 00:03:16.650
And that method is called subscribe.

50
00:03:18.050 --> 00:03:20.360
All right, so why is this method called subscribe?

51
00:03:20.720 --> 00:03:23.630
Well, if you think about something like a magazine subscription, right?

52
00:03:23.810 --> 00:03:30.410
Every time a magazine publishes a new issue, a subscriber receives that issue to their mailbox.

53
00:03:30.710 --> 00:03:35.630
So the word subscribe when it comes to technology is usually reserved for situations like this where

54
00:03:35.630 --> 00:03:40.970
we want something to listen to an event elsewhere, and whenever that event elsewhere occurs, we also

55
00:03:40.970 --> 00:03:42.380
want to take action here.

56
00:03:42.590 --> 00:03:44.180
And that's precisely what we want to do.

57
00:03:44.300 --> 00:03:47.030
We want to listen to what's going on in our view store.

58
00:03:47.060 --> 00:03:48.250
We want to subscribe.

59
00:03:48.260 --> 00:03:49.220
We want to listen in.

60
00:03:49.250 --> 00:03:52.490
We want to say we're interested in every single thing that's going on there.

61
00:03:52.790 --> 00:03:58.310
And what the view will do is every time it commits a mutation, it will emit a message in the same way

62
00:03:58.310 --> 00:04:02.120
that a magazine publisher emits a actual issue of their magazine.

63
00:04:02.390 --> 00:04:05.420
And then we can react to that emission right here.

64
00:04:06.140 --> 00:04:10.160
So basically what the subscribe method accepts is a function inline.

65
00:04:10.370 --> 00:04:11.990
So going to define an arrow function.

66
00:04:13.020 --> 00:04:16.980
And inside the arrow function, the first argument is going to be mutation.

67
00:04:17.340 --> 00:04:21.510
And what this represents is an object representing the mutation that is running.

68
00:04:21.780 --> 00:04:26.480
So every single time we commit a mutation, every single time, in other words, we change.

69
00:04:26.480 --> 00:04:31.380
If you look at our state, we're going to be able to run the function right here automatically because

70
00:04:31.380 --> 00:04:32.790
we provided it to subscribe.

71
00:04:33.150 --> 00:04:38.790
And the logic here that we want to do, of course, is if our mutation is specifically the one that

72
00:04:38.790 --> 00:04:44.280
we implemented to clear the arrays and that mutation is called clear use our job filter selections if

73
00:04:44.280 --> 00:04:46.050
and only if it is that mutation.

74
00:04:46.260 --> 00:04:50.160
We want to take selected values right here and set it back to be an empty array.

75
00:04:50.880 --> 00:04:54.930
We don't want to do this logic on every mutation, but only a specific mutation.

76
00:04:55.230 --> 00:04:59.850
So what I'm going to do here is I'm going to import that mutation name, which is of course available

77
00:04:59.850 --> 00:05:00.960
as a constant.

78
00:05:01.260 --> 00:05:01.980
So right here.

79
00:05:01.980 --> 00:05:02.880
How about right here?

80
00:05:03.150 --> 00:05:04.140
I'm going to import.

81
00:05:05.880 --> 00:05:11.970
The name in it is called a clear user job filter selections and it is coming from our source directory,

82
00:05:12.180 --> 00:05:14.370
the store directory and then the constants file.

83
00:05:14.490 --> 00:05:19.380
This is the exact same one, by the way, that we are registering right here.

84
00:05:20.570 --> 00:05:21.890
And committing to the store.

85
00:05:22.160 --> 00:05:25.910
So this component, when the user clicks on the action button, will commit that mutation.

86
00:05:26.120 --> 00:05:31.210
And what we want to do here in every single checkbox group component is subscribe to that mutation means

87
00:05:31.220 --> 00:05:31.670
meaning.

88
00:05:31.670 --> 00:05:35.150
Pay attention to when that mutation happens and then run our own logic.

89
00:05:35.540 --> 00:05:39.500
So right here, what I'm going to do is begin it with an if statement, because the first thing I want

90
00:05:39.500 --> 00:05:42.710
to do is make sure I only target the one mutation that I care about.

91
00:05:43.010 --> 00:05:47.570
So on this mutation object that we get passed in, we're going to have a property called type and that

92
00:05:47.570 --> 00:05:50.990
is going to give us the name of the actual mutation that is currently running.

93
00:05:51.290 --> 00:05:56.630
Remember the function we passed to subscribe here will run every single time a mutation runs.

94
00:05:56.780 --> 00:05:59.210
We don't want the logic here to be run every time.

95
00:05:59.300 --> 00:06:02.240
We only want it to be run whenever the mutation has a given type.

96
00:06:02.510 --> 00:06:04.370
And that, of course, is the name of the mutation.

97
00:06:04.640 --> 00:06:10.280
So what I'm going to do here is use my strict equality comparison to check whether this string representing

98
00:06:10.280 --> 00:06:13.850
the name of the mutation is equal to the actual mutation.

99
00:06:13.850 --> 00:06:16.760
Name that I care about what is clear user job filter selection.

100
00:06:18.000 --> 00:06:23.700
So in other terms, what I'm doing here is I'm saying whenever the bookstore is updating its state as

101
00:06:23.700 --> 00:06:28.200
a result of being told to commit this mutation, what do I want to do in this component?

102
00:06:28.440 --> 00:06:32.280
So what I want to do, of course, is I want to take my selected values reactive object.

103
00:06:32.550 --> 00:06:34.830
And of course, I want to set it to be an empty array again.

104
00:06:35.070 --> 00:06:39.120
Remember, when it comes to reactive objects in view, we can't just simply set this to a new value.

105
00:06:39.240 --> 00:06:44.250
We have to access its value property and set that to the new value we wanted to have.

106
00:06:44.520 --> 00:06:46.650
So this should be an empty array.

107
00:06:47.160 --> 00:06:47.520
All right.

108
00:06:47.730 --> 00:06:49.710
So one more time to walk through the flow.

109
00:06:50.460 --> 00:06:52.260
We're going to begin with job builder sidebar.

110
00:06:52.590 --> 00:06:57.960
The user is going to click on the action button to trigger this clear user job filter selections, a

111
00:06:57.990 --> 00:07:01.200
function to run that's going to be this function down below.

112
00:07:01.380 --> 00:07:04.530
This function is going to commit a mutation to the View Store.

113
00:07:04.710 --> 00:07:07.530
In other words, it's going to tell the View Store that something needs to change.

114
00:07:07.650 --> 00:07:08.970
Please run this logic.

115
00:07:09.300 --> 00:07:14.490
Here we are using a new method called Subscribe, which is basically a listener that is keeping track

116
00:07:14.490 --> 00:07:17.700
of every mutation that is ever running within the bookstore.

117
00:07:17.910 --> 00:07:22.320
So whenever the bookstore runs any kind of mutation, viewers are going to run this logic.

118
00:07:22.590 --> 00:07:27.150
And so we're saying here is, if specifically the mutation that you're currently running is clear user

119
00:07:27.150 --> 00:07:32.400
job filter selections, we know that the user has clicked the clear job filters button, which means

120
00:07:32.400 --> 00:07:37.890
in this local component state, we want to update the value of the selected values reactive object from

121
00:07:37.890 --> 00:07:41.970
storing the array of strings representing the user selections to then be an empty array.

122
00:07:42.240 --> 00:07:43.330
Why do we want to do this?

123
00:07:43.350 --> 00:07:47.880
Because we're going to update the local state here, which will force this thing to re render.

124
00:07:48.120 --> 00:07:53.820
And because we are connecting that selected values reactive object to v model view will remove the checks

125
00:07:53.820 --> 00:07:55.320
from the checked checkboxes.

126
00:07:56.240 --> 00:08:02.720
We are making this component update its local state based on changes to global state in the U.S., which

127
00:08:02.720 --> 00:08:08.420
we are paying attention to by subscribing to changes in the story, listening or paying attention to

128
00:08:08.420 --> 00:08:10.760
every mutation that runs right.

129
00:08:11.030 --> 00:08:13.160
So with that said, we can transition to our browser.

130
00:08:14.680 --> 00:08:15.250
There we go.

131
00:08:15.460 --> 00:08:19.810
And as always, we can begin by selecting some options here.

132
00:08:19.840 --> 00:08:23.620
So bachelors part time view tube, you and me.

133
00:08:24.560 --> 00:08:25.600
Let's add a couple more here.

134
00:08:25.610 --> 00:08:26.660
Full time masters.

135
00:08:26.660 --> 00:08:28.220
We can see now we have five jobs matched.

136
00:08:28.280 --> 00:08:28.680
There we go.

137
00:08:28.700 --> 00:08:29.750
Maybe ten is a better number.

138
00:08:30.170 --> 00:08:30.520
All right.

139
00:08:30.520 --> 00:08:32.300
So I'm going to bring up my view dev tools.

140
00:08:32.600 --> 00:08:39.830
And we can we can see once again in view that we have these three properties in the view store updated

141
00:08:39.830 --> 00:08:40.430
to be the property.

142
00:08:40.430 --> 00:08:40.760
Right.

143
00:08:41.060 --> 00:08:44.240
So when I click Clear Filters, we're going to run that mutation.

144
00:08:44.240 --> 00:08:45.950
That mutation is going to change the state.

145
00:08:46.250 --> 00:08:49.550
And now each checkbox group component, there are three of them.

146
00:08:49.550 --> 00:08:52.580
Right, this one right here, this one right here and this one right here.

147
00:08:52.820 --> 00:08:57.530
Each one of them is instantiated and each one of them in the set up method has that subscribe logic.

148
00:08:57.710 --> 00:09:02.540
It's going to match the mutation, it's going to clear the local selected values array, and that in

149
00:09:02.540 --> 00:09:04.790
turn will update these checkboxes instantaneously.

150
00:09:05.000 --> 00:09:07.160
So here I go in 3 to 1.

151
00:09:07.700 --> 00:09:08.300
There we go.

152
00:09:08.540 --> 00:09:10.190
So you saw this change right here.

153
00:09:10.190 --> 00:09:12.620
And now all of our checkboxes are clear here as well.

154
00:09:12.620 --> 00:09:13.700
That's exactly what we want.

155
00:09:14.000 --> 00:09:14.990
So one more time.

156
00:09:14.990 --> 00:09:19.130
Let me do it a couple times here of YouTube, full time pursuing degree.

157
00:09:19.530 --> 00:09:21.530
But it's not like there are any jobs that fit that criteria.

158
00:09:21.530 --> 00:09:22.040
There we go.

159
00:09:22.040 --> 00:09:26.240
There's two clear filters and now we are back to all these jobs and 100 jobs matched.

160
00:09:26.450 --> 00:09:29.870
It doesn't matter whether we have one, it doesn't matter whether we have two.

161
00:09:31.110 --> 00:09:35.940
Either approach will clear everything because we're going to simply go to every single individual component,

162
00:09:35.940 --> 00:09:39.300
change its local state in response to change in global state.

163
00:09:39.570 --> 00:09:41.900
That is what this ascribe method exists for.

164
00:09:41.910 --> 00:09:46.770
It is so they can pay attention to every change in the same way that when you subscribe to a magazine,

165
00:09:46.770 --> 00:09:50.040
you pay attention to every issue at the publisher sends out.

166
00:09:50.310 --> 00:09:50.670
All right.

167
00:09:50.910 --> 00:09:52.380
That's all there is to cover in this lesson.

168
00:09:52.380 --> 00:09:54.060
So I will see you in the next one.
