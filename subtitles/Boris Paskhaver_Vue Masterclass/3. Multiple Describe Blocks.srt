1
00:00:00,980 --> 00:00:07,790
In this lesson we'll talk about multiple described blocks ingest and also walk through a typical development

2
00:00:07,790 --> 00:00:12,920
workflow as it comes to writing our implementation code and the corresponding tests.

3
00:00:13,280 --> 00:00:17,480
So the first thing I want to do is open up my playground gorgeous file.

4
00:00:17,480 --> 00:00:22,730
We created this file earlier to experiment with JavaScript code, so I'm just going to use command P

5
00:00:22,730 --> 00:00:25,280
on my Mac to bring up my fuzzy file search.

6
00:00:25,280 --> 00:00:30,140
You can use control p on windows and I'm going to search for my playground dot jazz file and open it

7
00:00:30,140 --> 00:00:30,320
up.

8
00:00:30,650 --> 00:00:33,380
If it has any code in it, feel free to delete it.

9
00:00:34,500 --> 00:00:39,780
And then what I'm going to do is click and drag my playground, that test that just filed.

10
00:00:40,020 --> 00:00:45,120
I'm just going to drag it to the right side of this code until it occupies this kind of right half of

11
00:00:45,120 --> 00:00:45,650
the screen.

12
00:00:45,660 --> 00:00:49,080
We can see it highlighted right here on my screen, and I'm going to place it here.

13
00:00:49,350 --> 00:00:52,350
And the idea here is that my playground just filed.

14
00:00:52,380 --> 00:00:54,690
My implementation will live on the left.

15
00:00:54,690 --> 00:00:58,950
I'm going to write some code in here in just a second, and then I'm going to import the functionality

16
00:00:58,950 --> 00:01:03,450
from this file into my playground, that test file, and write the corresponding tests.

17
00:01:03,660 --> 00:01:07,650
In other words, I like to have my actual code and my tests side by side.

18
00:01:07,800 --> 00:01:12,630
I find that it generally helps to remind me what it is that I've written and what it is and how it is

19
00:01:12,630 --> 00:01:13,470
that I'm testing.

20
00:01:13,770 --> 00:01:18,270
So in here, in our playground file, let's write a very simple JavaScript function.

21
00:01:18,450 --> 00:01:24,120
It's going to be called even odd, and it's going to accept a number and return a string that specifies

22
00:01:24,120 --> 00:01:26,580
whether that number is even or odd.

23
00:01:26,940 --> 00:01:29,190
So right here, I'm going to export a constant.

24
00:01:29,970 --> 00:01:32,250
It's going to be my function called even or odd.

25
00:01:32,490 --> 00:01:34,560
This is not a default export.

26
00:01:34,560 --> 00:01:36,540
It's just a regular named export.

27
00:01:36,690 --> 00:01:41,820
Keep that in mind when we import in just a second and it's going to be a basic arrow function that'll

28
00:01:41,820 --> 00:01:43,480
take a parameter called number.

29
00:01:44,040 --> 00:01:46,620
And I'm going to declare my body right here.

30
00:01:46,890 --> 00:01:51,120
And I'm just going to do a very simple implementation using a F statement and an L statement.

31
00:01:51,120 --> 00:01:56,220
So if my number is even, which I can determine by taking the modulo of my number.

32
00:01:57,380 --> 00:02:00,920
By two and checking if the remainder that's left over is zero.

33
00:02:01,130 --> 00:02:05,480
If that's the case, I have an even number because there is no remainder when it is divided by two.

34
00:02:05,750 --> 00:02:10,550
If that's the case, I'm going to return a string of even else.

35
00:02:10,970 --> 00:02:16,760
If my number does have a remainder, I know that it is odd so I can return the string odd, save it

36
00:02:16,760 --> 00:02:18,020
and will do its thing.

37
00:02:18,140 --> 00:02:21,320
And now we have a valid JavaScript function.

38
00:02:21,620 --> 00:02:24,420
So now let's go ahead and import it within my playground.

39
00:02:24,420 --> 00:02:25,700
That test that you have file.

40
00:02:25,970 --> 00:02:31,370
So right here at the very top I'm going to import and this is a named export, so I have to provide

41
00:02:31,370 --> 00:02:32,600
my curly braces here.

42
00:02:32,840 --> 00:02:37,070
I'm going to import even more odd than I have to specify on my file.

43
00:02:37,310 --> 00:02:43,370
So from we know that we have my asterisk directory as that assigned so directly at the top level of

44
00:02:43,370 --> 00:02:50,270
that folder, I have my playground file and I can import it like so we don't even need the dot JS extension.

45
00:02:50,390 --> 00:02:50,750
All right.

46
00:02:51,110 --> 00:02:57,110
So this is a case where we have some existing tests already that test the basic math and we also have

47
00:02:57,110 --> 00:03:00,200
a new function that we write that we'd like to test called even or odd.

48
00:03:00,200 --> 00:03:02,630
And there's many different approaches that we can take here.

49
00:03:02,780 --> 00:03:07,580
We can create a different described block right here, for example, we can write even or odd right

50
00:03:07,580 --> 00:03:13,610
here because that is that is what we're testing and we can provide a function and this is totally valid

51
00:03:13,610 --> 00:03:19,010
syntax for just what I'm going to do though is show you that we can nest multiple described blocks within

52
00:03:19,010 --> 00:03:19,550
each other.

53
00:03:19,760 --> 00:03:24,680
So I'm just going to copy this code and just place it directly below my edit function calls and that

54
00:03:24,680 --> 00:03:26,540
is totally valid syntax.

55
00:03:26,690 --> 00:03:30,560
We can nest as many describes as we want inside each other.

56
00:03:30,710 --> 00:03:37,160
The idea being that each one is kind of a subcategory or a sub header for the top level described that

57
00:03:37,160 --> 00:03:38,540
you have in your file.

58
00:03:38,540 --> 00:03:43,760
So in this case we can almost assume like even our odd is some kind of extension of basic math.

59
00:03:43,970 --> 00:03:49,040
This is really up to you as a developer how you like to categorize your code that you write.

60
00:03:49,310 --> 00:03:54,560
Generally speaking, what I'd recommend is you should have one test file per JavaScript file in your

61
00:03:54,560 --> 00:03:59,690
project, so you shouldn't import things from multiple files generally and test them all in one test

62
00:03:59,690 --> 00:04:02,630
file because the test file will get pretty bloated in size.

63
00:04:02,930 --> 00:04:08,150
But even if you import just one thing, there may be different states or categories of testing that

64
00:04:08,150 --> 00:04:08,420
thing.

65
00:04:08,570 --> 00:04:14,180
And that's why you can use multiple described blocks to kind of nested the logic of categorization.

66
00:04:14,180 --> 00:04:19,700
You know, I have this main thing A and then two things within it, a one and a two that I want to segment

67
00:04:19,700 --> 00:04:22,400
and isolate for the readers benefit and for the output.

68
00:04:22,520 --> 00:04:28,310
And that's why you might nest multiple describes inside other describes all right and we can get even

69
00:04:28,310 --> 00:04:31,940
further even further down take this even one level higher.

70
00:04:32,210 --> 00:04:38,510
So let's say within my describe for even or odd I want to describe the two situations that I might encounter

71
00:04:38,510 --> 00:04:44,240
or in other words, the two branches of logic that exist in my even or odd function.

72
00:04:44,420 --> 00:04:48,170
My first situation is that my number argument is even.

73
00:04:48,170 --> 00:04:50,750
And my second one is that it's odd, right?

74
00:04:51,020 --> 00:04:53,960
Generally speaking, what I try to avoid is something like this.

75
00:04:53,960 --> 00:05:03,170
Instead of having an IT statement that reads, it indicates number is even when number is even.

76
00:05:03,350 --> 00:05:08,090
So you kind of put the condition right here in the in the actual test itself.

77
00:05:08,090 --> 00:05:11,090
And I think that makes the test description longer and harder to read.

78
00:05:11,330 --> 00:05:17,120
Whenever you have that kind of criteria or condition or specific scenario that you're testing.

79
00:05:17,300 --> 00:05:21,620
What I prefer to do is just nested under an additional describe, right?

80
00:05:21,620 --> 00:05:24,800
You should not be afraid to use describe as often as needed.

81
00:05:25,070 --> 00:05:28,250
So what I'm going to do here is just put another describe here.

82
00:05:28,550 --> 00:05:36,560
When I'm testing my even or odd function, I want to describe when the number is even so a specific

83
00:05:36,560 --> 00:05:38,930
criteria within my even or odd test.

84
00:05:39,290 --> 00:05:46,010
I'm going to provide my callback function right here and I'm going to provide my IT function or my test

85
00:05:46,010 --> 00:05:46,430
right here.

86
00:05:46,430 --> 00:05:52,070
So it indicates the number is even this test is kind of a little bit redundant because it's very similar

87
00:05:52,070 --> 00:05:57,290
to my describe, but hopefully it indicates the benefit is that when you have some kind of setup or

88
00:05:57,290 --> 00:06:02,000
criteria or conditional branch, you can use a describe to segment that and isolate it.

89
00:06:02,000 --> 00:06:04,790
So when our number is even, it indicates the number is even.

90
00:06:05,000 --> 00:06:09,740
And that test offers another developer chance to understand exactly what it is that you're testing.

91
00:06:10,010 --> 00:06:16,670
So right here I can invoke my expect function inside those parentheses I'm going to invoke even or odd

92
00:06:17,510 --> 00:06:22,190
and then inside here I also have to invoke even or odd to actually give it an argument and let's give

93
00:06:22,190 --> 00:06:24,260
it a valid even number like four.

94
00:06:24,740 --> 00:06:29,270
And of course afterwards I can write my assertion once again, I'm going to use that to be matcher.

95
00:06:29,480 --> 00:06:31,460
But this time around I need to provide a string.

96
00:06:31,460 --> 00:06:33,710
I expect this to be the string of even.

97
00:06:34,070 --> 00:06:35,600
All right, I'm going to save this file.

98
00:06:35,600 --> 00:06:37,370
Just so prettier does its formatting.

99
00:06:37,520 --> 00:06:41,990
And this is an example of a test within a describe, with an A describe, with an A describe.

100
00:06:42,440 --> 00:06:46,520
So now let's write one more test for the complementary path, which is odd.

101
00:06:46,730 --> 00:06:52,460
So right here after this describe but still within my even or odd, I'm going to write another describe

102
00:06:52,460 --> 00:06:56,150
function call and say when the number is odd.

103
00:06:58,100 --> 00:07:01,010
I'm going to say it indicates the number is odd.

104
00:07:01,700 --> 00:07:06,960
Notice here that what I'm trying to do in my test descriptions is not specifically talk about the return

105
00:07:07,250 --> 00:07:08,150
value, literally.

106
00:07:08,420 --> 00:07:14,120
So I tried to make my test descriptions as not specific to the implementation as possible.

107
00:07:14,120 --> 00:07:17,150
So to be super specific would be to write a test like this.

108
00:07:17,990 --> 00:07:21,560
It returns this string odd, right?

109
00:07:21,740 --> 00:07:28,610
This is a test that is not describing the user value or describing the general higher purpose abstraction

110
00:07:28,610 --> 00:07:29,720
of what the function is doing.

111
00:07:29,870 --> 00:07:34,640
This is a test that is reaching super deep into the actual implementation of what it is that you've

112
00:07:34,640 --> 00:07:34,940
written.

113
00:07:35,180 --> 00:07:41,090
And that logic should be written in your expect, because that's the actual point where JavaScript is

114
00:07:41,090 --> 00:07:42,170
going to be running your code.

115
00:07:42,470 --> 00:07:48,710
What I prefer is that the IT statement describes in general human readable terms what the purpose of

116
00:07:48,710 --> 00:07:49,340
the function is.

117
00:07:49,340 --> 00:07:53,870
The purpose of our even or odd function is to indicate that a number is even or odd.

118
00:07:53,990 --> 00:07:58,790
And with the described, we say at what situation should it indicate each of those scenarios?

119
00:07:58,800 --> 00:07:59,090
Right.

120
00:07:59,810 --> 00:08:05,810
So then in my actual assertion in my expected statement, when I invoke even an odd with an odd number

121
00:08:05,810 --> 00:08:11,090
such as three, then I write the specific implementation test that when I invoke the function, it should

122
00:08:11,090 --> 00:08:12,590
be the literal string.

123
00:08:12,590 --> 00:08:13,010
Odd.

124
00:08:13,100 --> 00:08:13,400
All right.

125
00:08:13,400 --> 00:08:18,050
So a developer can really expect to know exactly how the code works and they can read the describe,

126
00:08:18,050 --> 00:08:22,070
and it's to understand the purpose of it or the benefit of your code.

127
00:08:22,250 --> 00:08:22,580
All right.

128
00:08:22,910 --> 00:08:26,750
So now that my tests are written, I'm once again going to open a new terminal window.

129
00:08:28,570 --> 00:08:30,710
And I'm going to get rid of my playground file for now.

130
00:08:30,730 --> 00:08:32,530
Just so we can see everything side by side.

131
00:08:32,740 --> 00:08:37,510
And once again, my command is going to be and PM run test colon unit.

132
00:08:37,930 --> 00:08:39,130
We're going to run the file.

133
00:08:39,340 --> 00:08:42,390
We're going to see that it's going to identify the playground that tests that.

134
00:08:42,400 --> 00:08:42,610
Yes.

135
00:08:42,610 --> 00:08:42,970
File.

136
00:08:43,180 --> 00:08:48,580
And now notice for each described block, it's going to nest that content one level deeper.

137
00:08:48,610 --> 00:08:50,110
So we're going to start with basic math.

138
00:08:50,350 --> 00:08:53,560
We see these assertions that deal with basic math.

139
00:08:53,800 --> 00:08:59,530
Then we know we've gotten to some additional organizational logic called even or odd, which a developer

140
00:08:59,530 --> 00:09:00,760
can figure out as a function.

141
00:09:00,940 --> 00:09:05,530
And then that function has different pathways, such as when the numbers even are, when the number

142
00:09:05,530 --> 00:09:06,040
is odd.

143
00:09:06,220 --> 00:09:12,040
And then we again describe in human readable terms what that test tests are, what it validates.

144
00:09:12,040 --> 00:09:12,250
Right.

145
00:09:12,460 --> 00:09:16,030
So notice in the output, we're not actually seeing any specific technical details.

146
00:09:16,210 --> 00:09:20,560
We're just seeing this nice organizational structure for our tests.

147
00:09:20,560 --> 00:09:23,530
And it's going to be the exact same when we write our view components.

148
00:09:23,530 --> 00:09:27,610
We're going to describe the benefit of the view component and the benefit of what it is that we're testing

149
00:09:27,760 --> 00:09:31,360
without trying to reach too deep into the view component internals.

150
00:09:31,380 --> 00:09:34,840
We'll talk more about the principles of testing and why that is a good approach later.

151
00:09:34,960 --> 00:09:39,040
But this is the basic principle we're going to be following as we write all of our tests throughout

152
00:09:39,040 --> 00:09:39,430
the course.

153
00:09:39,790 --> 00:09:40,150
All right.

154
00:09:40,300 --> 00:09:42,070
That's all there is to cover in this lesson.

155
00:09:42,070 --> 00:09:45,760
And in the very next one, we're going to talk about test driven development.
