WEBVTT
1
00:00:00.820 --> 00:00:01.450
Okay.

2
00:00:01.450 --> 00:00:05.110
So congratulations on reaching the end of another core section.

3
00:00:05.380 --> 00:00:11.110
And as always, let's take the time to review our original user story, which is now complete, and

4
00:00:11.110 --> 00:00:14.290
also reveal the new concepts that we learned in this section.

5
00:00:14.560 --> 00:00:15.890
So here was the user story.

6
00:00:15.910 --> 00:00:22.270
As a user, I'd like to be able to clear all my job filters so I can start a fresh search from scratch

7
00:00:22.270 --> 00:00:23.200
with the minimal effort.

8
00:00:23.470 --> 00:00:28.570
So we implemented, of course, the functionality of the Clear Filters button, and that itself prompted

9
00:00:28.570 --> 00:00:31.450
this really big refactor throughout the entire app.

10
00:00:31.750 --> 00:00:32.680
So what did we learn?

11
00:00:33.250 --> 00:00:37.750
Most of the section was review and kind of similar concepts to what we've talked about before, but

12
00:00:37.750 --> 00:00:43.120
we know of course, breaking up larger components into smaller components can improve both readability

13
00:00:43.120 --> 00:00:44.140
and testability.

14
00:00:44.380 --> 00:00:49.810
So in our job filter sidebar component, in our previous implementation, we were using that large setup

15
00:00:49.810 --> 00:00:52.330
method to use all of those different composable.

16
00:00:52.480 --> 00:00:55.480
And we realized that we could break it up into much smaller components.

17
00:00:55.630 --> 00:01:00.550
Each one, for example, relying on one or two composable, which in turn required the corresponding

18
00:01:00.550 --> 00:01:02.860
tests to not have to mock out as much.

19
00:01:03.040 --> 00:01:08.650
The tests became simpler, the components became smaller, the set of methods became lighter, and Vue

20
00:01:08.650 --> 00:01:10.000
kind of functioned as it should.

21
00:01:10.000 --> 00:01:14.920
As, you know, a combination of components working together, each one with a single responsibility,

22
00:01:15.070 --> 00:01:18.250
each one handling one small slice of UI on the screen.

23
00:01:18.610 --> 00:01:18.970
All right.

24
00:01:19.150 --> 00:01:23.200
We also learned about the subscribe method, which we can call directly on the View Store.

25
00:01:23.350 --> 00:01:28.960
And that method allows a component to react to a specific mutation being committed to the View Store.

26
00:01:29.230 --> 00:01:36.580
So in this section, of course, we use that to modify the selected values, local data or local state

27
00:01:36.700 --> 00:01:38.710
within our checkbox group component.

28
00:01:38.890 --> 00:01:43.870
Because we wanted those checkboxes to clear themselves as soon as the user clicked the clear filters

29
00:01:43.870 --> 00:01:44.140
button.

30
00:01:44.410 --> 00:01:49.210
And we saw, of course, that it was pretty easy to wire up the logic, to view packs, to clear those

31
00:01:49.210 --> 00:01:50.590
arrays that view stored.

32
00:01:50.770 --> 00:01:56.500
But we also needed a way for our component to the checkbox group to listen to that mutation, to understand

33
00:01:56.500 --> 00:02:02.470
that it had occurred, and to take its own internal steps in order to clear its own local, state or

34
00:02:02.470 --> 00:02:08.320
local data that we had stored using the view wrap function so that reactive object and its value property

35
00:02:08.320 --> 00:02:09.310
needed to be updated.

36
00:02:09.460 --> 00:02:14.320
And so we put that logic inside the function that we passed the subscribe method and we also wrapped

37
00:02:14.320 --> 00:02:19.270
it in an if statement to make sure that we didn't run that logic on every mutation, but specifically

38
00:02:19.270 --> 00:02:24.730
the one that we cared about that instructed the View Store to clear all of the user's checkbox selections.

39
00:02:25.060 --> 00:02:25.330
All right.

40
00:02:25.330 --> 00:02:27.760
And that's all there is to cover in this section.

41
00:02:27.760 --> 00:02:30.580
Hope you've enjoyed this one and I will see you in the next lesson.
