1
00:00:00,480 --> 00:00:07,020
All right, so in this lesson, I'll introduce you to the just mock function, which will allow us to

2
00:00:07,020 --> 00:00:11,910
mock out or replace JavaScript functionality within our components.

3
00:00:12,300 --> 00:00:18,750
Before we get there, though, I'd like to give you an example, an analogous example for why mock functions

4
00:00:18,750 --> 00:00:20,220
exist in the first place.

5
00:00:20,580 --> 00:00:26,520
So if you think back to our sub nav component and our tests, you may recall that we used this setup

6
00:00:26,520 --> 00:00:32,820
right here where we established stubs and we talked about this idea of stubs being a replacement for

7
00:00:32,820 --> 00:00:33,900
a real component.

8
00:00:34,140 --> 00:00:40,770
So in this example, on the right hand side, we stubbed out or replaced the font awesome icon with

9
00:00:40,770 --> 00:00:46,470
some other implementation because for the purposes of this test, we didn't care about that component

10
00:00:46,470 --> 00:00:47,310
and its internals.

11
00:00:47,460 --> 00:00:49,830
We just wanted to test our sub now.

12
00:00:50,100 --> 00:00:55,290
And the beautiful part about this approach, of course, is that it makes things easier to test because

13
00:00:55,290 --> 00:01:01,080
it gets rid of dependencies such as these external components that come from totally different libraries.

14
00:01:01,320 --> 00:01:06,900
The more that we can focus on the core, a unit under test, whether it be a individual component or

15
00:01:06,900 --> 00:01:13,320
an individual method, the more it becomes easier to test because our scope is smaller and more isolated.

16
00:01:13,320 --> 00:01:13,650
Right?

17
00:01:14,010 --> 00:01:20,580
So this idea that's captured by stubs and also captured by these shallow mount function which stubs

18
00:01:20,580 --> 00:01:26,490
out every child component, this kind of spirit is embodied by the just mock function, right?

19
00:01:26,820 --> 00:01:31,620
So if we go back to our headline component, which I have here on the left hand side, you'll notice

20
00:01:31,620 --> 00:01:34,650
that we're using a bunch of built in JavaScript functions.

21
00:01:34,650 --> 00:01:38,010
We have clear interval and set interval being used right here.

22
00:01:38,490 --> 00:01:44,670
Now some JavaScript developers some time ago wrote the logic for these respective functions, right?

23
00:01:44,820 --> 00:01:51,270
The internals of set interval know how to take a function and a duration in time in milliseconds, and

24
00:01:51,270 --> 00:01:58,050
they know to run that given function, that interval or every time that that passage of time happens.

25
00:01:58,050 --> 00:01:58,320
Right.

26
00:01:58,830 --> 00:02:04,080
But for the purposes of us in caring about what the headline component does, we don't really care about

27
00:02:04,080 --> 00:02:07,710
how those developers built out the logic of the set interval function.

28
00:02:07,950 --> 00:02:12,720
All that we care about is that we use their code and we give set interval what it expects.

29
00:02:12,840 --> 00:02:19,680
The expected arguments of a function and a millisecond duration and set interval will take care of that

30
00:02:19,680 --> 00:02:20,100
logic.

31
00:02:20,430 --> 00:02:26,280
So I would argue for the purposes of testing the headline component, while we do care that we rely

32
00:02:26,280 --> 00:02:32,700
on declare interval and set interval functions, we don't really care on how those functions are implemented.

33
00:02:32,910 --> 00:02:36,870
That's some other developers problem that some other developers test.

34
00:02:37,140 --> 00:02:42,930
All we really need to care about is headlines interaction with those functions, namely that it provides

35
00:02:42,930 --> 00:02:43,950
them with the right arguments.

36
00:02:44,160 --> 00:02:49,800
But we don't necessarily have to test the specific logic of set interval and clear interval in our tests

37
00:02:49,800 --> 00:02:51,210
for headline component, right?

38
00:02:51,330 --> 00:02:57,660
Otherwise we'd be testing core JavaScript functionality instead of headline component specific functionality,

39
00:02:57,660 --> 00:02:57,900
right?

40
00:02:58,200 --> 00:03:03,300
So how can we solve the problem that our implementation has these functions but we don't actually care

41
00:03:03,300 --> 00:03:04,260
about how they're implemented?

42
00:03:04,530 --> 00:03:12,810
Well, just functions basically stub out or mock out or replace these functions the exact same way that

43
00:03:12,810 --> 00:03:15,030
we stubbed out our components right here.

44
00:03:15,390 --> 00:03:21,660
So imagine we tell just our test running framework that as it renders this component and it runs into

45
00:03:21,660 --> 00:03:27,270
a use of clear interval or set interval, imagine we tell, just don't worry about the complexity of

46
00:03:27,270 --> 00:03:32,100
that function, but whenever you see it, just replace it with a much simpler function that we have

47
00:03:32,100 --> 00:03:35,130
control of and that we can manipulate and test.

48
00:03:35,130 --> 00:03:35,400
Right?

49
00:03:35,550 --> 00:03:40,110
And that way we don't have to deal with the complexity of worrying about things like the passage of

50
00:03:40,110 --> 00:03:40,560
time.

51
00:03:40,560 --> 00:03:40,830
Right.

52
00:03:40,920 --> 00:03:44,280
Waiting 3 seconds to check whether the interval did what it's supposed to do.

53
00:03:44,520 --> 00:03:50,220
We can replace set interval and clear interval with functions that emulate that behavior or replace

54
00:03:50,220 --> 00:03:52,230
that behavior but aren't the real thing.

55
00:03:52,860 --> 00:03:58,500
And we can still test the component and how it works by playing around with these substitute functions,

56
00:03:58,500 --> 00:04:03,240
with these standard mock functions, stub functions, whatever you want to call them, I just call them

57
00:04:03,240 --> 00:04:08,190
replacements for the original implementation and that will allow our tests for headline again to be

58
00:04:08,190 --> 00:04:11,700
much simpler, to write, to be decoupled, and to test the right thing.

59
00:04:11,970 --> 00:04:18,780
Our business logic what we have in headlines that view, what we wrote, what we care about versus what

60
00:04:18,780 --> 00:04:21,990
some JavaScript developers wrote decades ago for a set interval.

61
00:04:22,110 --> 00:04:22,380
All right.

62
00:04:22,650 --> 00:04:27,120
So in order to understand this concept, we're going to introduce the just mock function in isolation.

63
00:04:27,120 --> 00:04:31,440
So I'm going to show you how it works in a test, and then we're going to show you how to actually use

64
00:04:31,440 --> 00:04:34,980
that function to replace clear interval and set interval in upcoming lessons.

65
00:04:35,070 --> 00:04:38,760
And these ideas are going to permeate throughout the entire course because we're going to be using mock

66
00:04:38,760 --> 00:04:43,620
functions a lot to replace real functionality in many different parts of our view app.

67
00:04:44,010 --> 00:04:49,770
So to begin, what I'd like to do is to create a test file for our headline component.

68
00:04:49,770 --> 00:04:51,420
We don't have a test var for this yet.

69
00:04:51,660 --> 00:04:54,240
We did not follow a TDD approach, but that is fine.

70
00:04:54,540 --> 00:04:59,910
So of course we have our test directory, we have a unit folder in there and then we have a component.

71
00:05:00,000 --> 00:05:01,050
Directory within unit.

72
00:05:01,230 --> 00:05:07,650
And here is where I want to create a new file and it will be my headline dot test that component test

73
00:05:07,650 --> 00:05:07,950
file.

74
00:05:08,810 --> 00:05:09,200
Perfect.

75
00:05:09,500 --> 00:05:11,660
So I'm going to drag this over to the right hand side here.

76
00:05:11,690 --> 00:05:16,010
In fact, we don't even need it, since we're not going to be writing exactly headline specific tests

77
00:05:16,010 --> 00:05:16,310
yet.

78
00:05:16,310 --> 00:05:18,470
We're just going to be showing the justice function in isolation.

79
00:05:18,650 --> 00:05:20,930
But let's pretend as if we are writing a real test.

80
00:05:21,140 --> 00:05:28,460
I'm going to import my mount function from view test utils and then I'm going to import the component

81
00:05:28,460 --> 00:05:33,620
I'm testing, which is headline and that is going to come from the source directory components headline.

82
00:05:35,060 --> 00:05:38,570
And what I want to do next is invoke my described function.

83
00:05:38,570 --> 00:05:41,960
And what I'm describing is what I'm testing, and that is the headline component.

84
00:05:42,290 --> 00:05:44,660
Let's provide an arrow function as my second argument.

85
00:05:45,050 --> 00:05:49,430
And for now, I'll just do a separate described lock and say that this is just a just playground.

86
00:05:49,430 --> 00:05:53,760
So this is not specific to our headline component, and we will remove these tests later.

87
00:05:53,780 --> 00:05:56,750
This is just for learning about core, just functionality.

88
00:05:57,170 --> 00:05:58,430
So I'm going to write a description here.

89
00:05:59,450 --> 00:06:01,940
It tracks whether it has been called.

90
00:06:02,510 --> 00:06:06,470
So I know this is a little bit confusing right now, but let me describe what it is that we're going

91
00:06:06,470 --> 00:06:06,920
to do here.

92
00:06:07,160 --> 00:06:10,820
We're going to utilize something called the just mock function.

93
00:06:11,120 --> 00:06:13,940
And it's basically a function that can play the role of anything.

94
00:06:13,940 --> 00:06:15,710
It can play the role of a real function.

95
00:06:15,890 --> 00:06:17,180
It can play the role of a class.

96
00:06:17,420 --> 00:06:19,820
Essentially, is this fake stub.

97
00:06:19,850 --> 00:06:20,930
You can think of it like that.

98
00:06:20,930 --> 00:06:26,720
It's a function whose implementation we can customize, a function that we can tell to return any value

99
00:06:26,720 --> 00:06:28,190
that we want, etc..

100
00:06:28,190 --> 00:06:28,360
Right.

101
00:06:28,420 --> 00:06:33,110
And almost think of it like a blank canvas for defining a function that can do whatever we want for

102
00:06:33,110 --> 00:06:36,500
the purposes of replacing a real function somewhere down the line.

103
00:06:36,800 --> 00:06:42,770
Now, one of the super cool things about this just mock function is it can track interaction with itself.

104
00:06:43,040 --> 00:06:48,200
What I mean by that is whenever we invoke this function, the just function can keep track that it has

105
00:06:48,200 --> 00:06:52,370
been invoked, it can keep track of how many times it has been invoked or called.

106
00:06:52,640 --> 00:06:57,110
It can keep track of what arguments it was past each time it was been in and has been invoked.

107
00:06:57,110 --> 00:06:57,350
Right.

108
00:06:57,560 --> 00:07:04,040
So it keeps a state inside of it that knows how many times our program has interacted with that function.

109
00:07:04,190 --> 00:07:04,580
Okay.

110
00:07:04,840 --> 00:07:06,620
Let me show you an example of this in action.

111
00:07:06,890 --> 00:07:08,480
I'll declare my mock function.

112
00:07:08,480 --> 00:07:10,940
I'll sign it to a constant called mock function.

113
00:07:11,600 --> 00:07:16,460
And the way we actually create this mock function is by referencing our top level just library, which

114
00:07:16,460 --> 00:07:18,620
is available in this file as a global constant.

115
00:07:18,890 --> 00:07:24,800
And on this library, we can access the F and function, and that is short for mock function, F and

116
00:07:24,800 --> 00:07:25,400
for function.

117
00:07:25,700 --> 00:07:29,300
So we do need to invoke this and now we have a mock function, right?

118
00:07:29,630 --> 00:07:32,120
So it's almost treated like a regular function.

119
00:07:32,120 --> 00:07:37,310
In fact, where I can show you is I can actually console.log the invocation of mock function and invoke

120
00:07:37,310 --> 00:07:39,020
it just like a plain JavaScript function.

121
00:07:39,020 --> 00:07:44,420
I believe it's going to return undefined, but we can show you that it works just like a regular JavaScript

122
00:07:44,420 --> 00:07:46,370
function that we might declare in our program.

123
00:07:46,370 --> 00:07:55,280
So if I go ahead and execute and PM run test watch our just test runners should notice this new file.

124
00:07:55,290 --> 00:07:56,570
It should run headline that test.

125
00:07:56,840 --> 00:07:58,850
And you can see here here is the console.log.

126
00:07:58,850 --> 00:08:00,440
So the function returns undefined.

127
00:08:00,440 --> 00:08:03,350
So you can almost think of it like we have this base function defined.

128
00:08:03,350 --> 00:08:06,530
It doesn't do anything yet and it returns undefined.

129
00:08:06,650 --> 00:08:06,920
Right?

130
00:08:07,100 --> 00:08:09,290
Almost the same thing as if we did something like this.

131
00:08:10,900 --> 00:08:16,340
Here's an example of almost the equivalent thing, but of course the benefit of our just mock function

132
00:08:16,340 --> 00:08:19,010
is that functionality to track its own calls.

133
00:08:19,280 --> 00:08:25,670
So what I can do here is I can invoke my mock function once, and then I can assert, for example,

134
00:08:25,820 --> 00:08:28,580
that the mock function has been invoked at least once.

135
00:08:28,910 --> 00:08:35,300
So here what I'm going to do is I'm going to expect and I'm going to pass in my mock function by itself.

136
00:08:35,540 --> 00:08:39,110
And there's this new matcher or assertion that I'd like to introduce you to.

137
00:08:39,290 --> 00:08:41,990
Previously we export things like to be or to equal.

138
00:08:42,200 --> 00:08:47,420
There is a special sequence of assertions that we can make just on a mock function.

139
00:08:47,750 --> 00:08:53,870
So for example, I have one that is to have been called and just like that name suggests it double checks

140
00:08:53,870 --> 00:08:59,270
that the mock function has been called or in other words has been invoked, has been run, has been

141
00:08:59,270 --> 00:08:59,840
executed.

142
00:09:00,110 --> 00:09:02,540
So we are running this function on line number nine.

143
00:09:02,690 --> 00:09:04,400
So our assertion will pass.

144
00:09:04,400 --> 00:09:09,380
So when I save this file, you're going to see that the assertion passes because the mock function has

145
00:09:09,380 --> 00:09:09,920
been called.

146
00:09:10,370 --> 00:09:15,800
But in comparison, if I comment out line number nine, then our function will never have been called

147
00:09:15,950 --> 00:09:17,900
and now this expectation will fail.

148
00:09:18,110 --> 00:09:23,090
You can even see here in the output it says, I expected a certain number of calls greater than or equal

149
00:09:23,090 --> 00:09:23,570
to one.

150
00:09:23,780 --> 00:09:28,070
So I expected you to call this function to invoke it at least once, if not more.

151
00:09:28,310 --> 00:09:33,650
But I actually received zero real life calls when the logic of the test runs, right?

152
00:09:34,250 --> 00:09:40,340
So that is the big advantage of the just function is that it can keep track of its own invocations and

153
00:09:40,340 --> 00:09:42,410
also how it has been called.

154
00:09:42,620 --> 00:09:44,270
Let me give you another example.

155
00:09:44,480 --> 00:09:49,870
Let's say I invoke my mock function with arguments like one, two, three, right?

156
00:09:50,120 --> 00:09:53,390
Again, this is almost like a function that can be whatever function we want.

157
00:09:53,390 --> 00:09:55,730
And in the real world, our functions can take parameters.

158
00:09:55,940 --> 00:10:00,680
And in this example, let's imagine that mock function is this magic function that could take any number

159
00:10:00,680 --> 00:10:04,160
of arguments, and I'm invoking it with three of them, 1 to 3.

160
00:10:04,250 --> 00:10:05,780
And those are just arbitrary values.

161
00:10:06,080 --> 00:10:08,180
Well, now I can assert not just that the.

162
00:10:08,260 --> 00:10:11,500
Function has been called, but the function has been called with those arguments.

163
00:10:11,710 --> 00:10:15,530
So, for example, I can assert that the function has been called with the exact arguments.

164
00:10:15,550 --> 00:10:16,780
One, two, three.

165
00:10:17,170 --> 00:10:21,730
All right, so when I save this, we're going to rerun and we're going to see that the tests pass,

166
00:10:21,730 --> 00:10:26,890
because indeed, we do have an invocation of this function with those exact same three arguments.

167
00:10:27,190 --> 00:10:30,280
But let's say I instead invoke it with 1 to 5.

168
00:10:30,520 --> 00:10:36,100
Now, our tests are going to fail because Jess is going to say, yes, you did invoke this function,

169
00:10:36,250 --> 00:10:38,440
but I expected you to invoke it with the arguments.

170
00:10:38,440 --> 00:10:39,220
One, two, three.

171
00:10:39,400 --> 00:10:45,850
And instead, what I saw when I looked at your code is that you actually only invoked it with 1 to 5.

172
00:10:45,850 --> 00:10:46,150
Right.

173
00:10:46,330 --> 00:10:47,560
And even if it's partial.

174
00:10:47,560 --> 00:10:52,570
So, for example, if I invoke the function with one, two, five, but I test that it's been invoked

175
00:10:52,570 --> 00:10:57,640
with one, two, that's also going to fail because Jess is going to look for an exact match that the

176
00:10:57,640 --> 00:11:02,470
exact arguments that you passed in add to the function are what you're testing that it has been invoked

177
00:11:02,470 --> 00:11:02,770
with.

178
00:11:03,070 --> 00:11:09,940
So that is the core benefit of using the just knock function is that I can keep track of how many times

179
00:11:09,940 --> 00:11:11,530
it's been interacted with, right?

180
00:11:11,800 --> 00:11:16,450
Now, of course, in isolation this isn't particularly helpful, but start thinking about things like

181
00:11:16,450 --> 00:11:22,540
imagine that we replaced clear interval right or set interval with a mock function like this.

182
00:11:22,870 --> 00:11:28,180
In that scenario, what we can do is mount our headline component, interact with it, and knowing that

183
00:11:28,180 --> 00:11:31,720
our clear interval function is this mock function that can be whatever we want.

184
00:11:31,960 --> 00:11:36,670
All we can do is test the interaction of the headline component with our mock function.

185
00:11:36,850 --> 00:11:40,870
We can say, Hey, headline, did you talk to clear interval at least once?

186
00:11:41,110 --> 00:11:44,620
Did you pass it the expected arguments that we expected you to pass to it?

187
00:11:45,250 --> 00:11:50,740
And in that regard, we are correctly testing the interaction of headline with those built in JavaScript

188
00:11:50,740 --> 00:11:55,630
functions without worrying about their specific real life complex implementations.

189
00:11:55,840 --> 00:12:01,450
Because we've replaced them with this kind of generic template of a function called the just function.

190
00:12:01,990 --> 00:12:04,620
So this has been a quick introduction to the just mock function.

191
00:12:04,630 --> 00:12:07,120
It's okay if you don't see the full benefit of this yet.

192
00:12:07,270 --> 00:12:11,170
We're going to continue diving a lot more into mock functions throughout the course, but this has been

193
00:12:11,170 --> 00:12:15,790
a general introduction to this functionality and in the very next lesson we're going to see how we can

194
00:12:15,790 --> 00:12:21,640
actually stub out or mock out our core JavaScript functions that we have in our headline component.

195
00:12:21,640 --> 00:12:26,020
So we're going to write our headline component tests in the very next lesson, and I will see you there.
