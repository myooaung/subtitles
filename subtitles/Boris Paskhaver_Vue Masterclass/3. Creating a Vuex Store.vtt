WEBVTT
1
00:00:00.660 --> 00:00:01.440
Okay.

2
00:00:01.440 --> 00:00:05.340
So we're going to start exploring all the details of you momentarily.

3
00:00:05.550 --> 00:00:10.410
But before we get there, I want to give you a sense of what we're trying to accomplish next in our

4
00:00:10.410 --> 00:00:10.740
app.

5
00:00:11.070 --> 00:00:13.660
So I have my main nav component open here.

6
00:00:13.680 --> 00:00:15.660
It's been a while since we've been in this file.

7
00:00:15.960 --> 00:00:21.870
And if I scroll down, you may remember here that we have a piece of data called is logged in and that

8
00:00:21.870 --> 00:00:25.800
reflects whether the user is logged in or authenticated into our app.

9
00:00:26.130 --> 00:00:28.380
And remember, this is not a real life implementation.

10
00:00:28.710 --> 00:00:30.480
It's just an arbitrary thing.

11
00:00:30.480 --> 00:00:37.350
We added where the user clicks a login button, which we have right here, and that flips the component

12
00:00:37.350 --> 00:00:42.750
state to tell it that the user is logged in, which of course makes the profile image appear right here

13
00:00:42.870 --> 00:00:45.480
and also makes the sub nav appear right here.

14
00:00:45.840 --> 00:00:51.330
Now, in a typical real world app, you can expect that the user's logged in status is going to affect

15
00:00:51.330 --> 00:00:55.200
a lot more components around the app, not just the main app.

16
00:00:55.530 --> 00:00:57.090
So let's go with that assumption.

17
00:00:57.090 --> 00:01:00.510
Even though it's not really true in our app, it's a fair one to make in the real world.

18
00:01:00.870 --> 00:01:04.860
So our ultimate goal here will be to move this piece of logic.

19
00:01:04.860 --> 00:01:08.070
The user's logged in state to the View Store.

20
00:01:08.280 --> 00:01:10.710
We don't want this logic to live in one component.

21
00:01:10.860 --> 00:01:15.480
We want it to be in the view store in that global cloud that is floating above our app.

22
00:01:15.660 --> 00:01:21.180
And then we want the main nav component to talk to View X to get that piece of data and utilize it in

23
00:01:21.180 --> 00:01:21.780
this component.

24
00:01:22.500 --> 00:01:26.880
And of course, the advantage of that approach is that other components eventually that care about the

25
00:01:26.880 --> 00:01:30.330
logged in status can also get that piece of information from view.

26
00:01:30.780 --> 00:01:31.140
All right.

27
00:01:31.500 --> 00:01:36.870
So with that said, let's open up our index dogs file in our source store folder.

28
00:01:36.870 --> 00:01:39.900
So right here as our C Store index tags.

29
00:01:40.200 --> 00:01:47.050
And for now, I propose that we delete all of the code in this file just so we can wire up, view X

30
00:01:47.070 --> 00:01:51.930
from scratch and review some of the syntax that is required here and kind of build that up incrementally.

31
00:01:52.290 --> 00:01:56.750
So in this file, we're going to begin by importing a function from view called Create Store.

32
00:01:56.760 --> 00:01:58.110
It is a named export.

33
00:01:58.410 --> 00:02:04.710
So right here on line number one, I'm going to import create store from view X.

34
00:02:04.740 --> 00:02:07.680
Let me in fact blow this up because I think it's going to be a little bit cleaner to read.

35
00:02:07.800 --> 00:02:08.160
Okay.

36
00:02:08.490 --> 00:02:15.030
So the store here that the word here references that collection of data that view X is storing for us.

37
00:02:15.030 --> 00:02:18.900
That global collection of data is what we call the store, right?

38
00:02:18.900 --> 00:02:22.830
The view X entity that we're referencing in technical terms is what we call the store.

39
00:02:23.220 --> 00:02:27.810
So on the very next line, I'm going to create a constant called store and I'm going to assign it the

40
00:02:27.810 --> 00:02:29.970
return value of the create store function.

41
00:02:30.360 --> 00:02:33.210
And what that function is going to do is create a View X store.

42
00:02:33.750 --> 00:02:34.110
Okay.

43
00:02:34.380 --> 00:02:40.380
And this function takes a single argument and it has a JavaScript object that configures the settings

44
00:02:40.380 --> 00:02:43.170
or the configurations for this view X store.

45
00:02:43.320 --> 00:02:47.640
And in a real world app, you're only really going to have one view X store, and there's no real reason

46
00:02:47.640 --> 00:02:48.450
to have more than one.

47
00:02:48.630 --> 00:02:51.540
You're just going to have one central repository of data.

48
00:02:51.570 --> 00:02:52.870
That's what a view store is.

49
00:02:52.890 --> 00:02:53.190
All right.

50
00:02:53.580 --> 00:02:57.660
Now, how do we configure the actual data that this store is storing?

51
00:02:57.900 --> 00:03:04.080
Well, in order to do that, we define a method here in this configuration object called state, and

52
00:03:04.080 --> 00:03:05.730
that's a term we also used earlier.

53
00:03:05.880 --> 00:03:08.700
State is just data that changes over time.

54
00:03:08.850 --> 00:03:13.500
Of course, the difference between this and component state is that this is global data, this is high

55
00:03:13.510 --> 00:03:14.100
level data.

56
00:03:14.400 --> 00:03:21.480
But from an analogous perspective, you can think of state almost like the data property in a component.

57
00:03:21.810 --> 00:03:22.740
It's the same idea.

58
00:03:22.740 --> 00:03:25.470
It's just some kind of information that's changing over time.

59
00:03:25.800 --> 00:03:32.340
So State is going to be a method that returns a JavaScript object, and that JavaScript object represents

60
00:03:32.340 --> 00:03:34.080
our view X Store state.

61
00:03:34.260 --> 00:03:39.930
It's basically the exact same syntax we use when we define a data method within a component, but we

62
00:03:39.930 --> 00:03:45.060
are defining it for the view store that is independent and separate right now from any component interact.

63
00:03:45.360 --> 00:03:45.660
All right.

64
00:03:45.930 --> 00:03:49.710
So what I'm going to do here is I'm going to define the exact same property I have in May.

65
00:03:49.710 --> 00:03:53.670
Now I'm going to call it is logged in and I'm going to give it an initial value of false.

66
00:03:54.090 --> 00:03:54.330
Right.

67
00:03:54.330 --> 00:03:58.560
We're going to have this duplicate design right now and eventually we're going to replace that property

68
00:03:58.560 --> 00:04:02.220
in our main NAV component with a reference to this property in our view X Store.

69
00:04:02.580 --> 00:04:06.540
So I'm going to call this is logged in and I'm going to set it to false.

70
00:04:06.870 --> 00:04:11.640
And then remember we are importing this store in our main digest file and configuring it.

71
00:04:11.790 --> 00:04:13.860
So we do have to make sure we export it here.

72
00:04:14.010 --> 00:04:19.020
So I'm going to export default the store that we create right here in this file.

73
00:04:19.130 --> 00:04:19.380
Right.

74
00:04:19.590 --> 00:04:21.210
And that's, I think, a good place to start.

75
00:04:21.210 --> 00:04:25.350
The key takeaways from this lesson is we create a store using the create store function.

76
00:04:25.560 --> 00:04:28.560
We pass it a JavaScript object to configure how it works.

77
00:04:28.710 --> 00:04:32.760
There's many different properties and methods in this object, which we'll talk about over the course

78
00:04:32.970 --> 00:04:34.020
of the next couple of sections.

79
00:04:34.200 --> 00:04:41.190
But the primary one is the state method which specifies the starting state or the core data of the view

80
00:04:41.340 --> 00:04:41.730
store.

81
00:04:41.760 --> 00:04:47.460
So right now our View Store State has one property is logged in and it's going to initialize with an

82
00:04:47.460 --> 00:04:49.050
initial value of false.

83
00:04:49.380 --> 00:04:53.610
And again, you can think of this as analogous to the data in a component.

84
00:04:53.610 --> 00:04:59.310
So what this is, for example, for me now this section right here, it's a very similar idea when it

85
00:04:59.310 --> 00:04:59.910
comes to.

86
00:05:00.030 --> 00:05:01.860
The state method in a store.

87
00:05:02.010 --> 00:05:07.480
It's just more global, higher level, more important, above any individual component.

88
00:05:07.500 --> 00:05:09.060
That's exactly what we're setting up here.

89
00:05:09.240 --> 00:05:12.870
And of course, in the very next lesson, we're going to see how we can change this state.
