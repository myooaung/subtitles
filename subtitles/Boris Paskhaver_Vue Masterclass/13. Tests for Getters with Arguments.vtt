WEBVTT
1
00:00:00.630 --> 00:00:01.560
Okay.

2
00:00:01.570 --> 00:00:05.260
So in the previous lesson, we declared two new get our methods.

3
00:00:05.530 --> 00:00:12.100
Each one of our two new getters will receive a single job and will be responsible for determining whether

4
00:00:12.100 --> 00:00:16.660
or not that job should or should not be included in the filter jobs.

5
00:00:16.870 --> 00:00:20.050
So both of these new getters will return boolean values.

6
00:00:20.260 --> 00:00:25.600
And what we have here is enough for us to properly write a couple of tests because remember, we don't

7
00:00:25.600 --> 00:00:29.110
actually have to use these getters yet in our filter jobs getter.

8
00:00:29.260 --> 00:00:33.910
These are separate, independent methods and they can be tested as such in our test suite.

9
00:00:34.210 --> 00:00:37.470
So on the right hand side here, I have my getters that test, that yes.

10
00:00:37.510 --> 00:00:39.610
File where we are testing all of our getters.

11
00:00:39.820 --> 00:00:42.160
I have collapsed all of my tests above.

12
00:00:42.400 --> 00:00:46.900
So at the very bottom here, we can add a new described block for each of our two new getters.

13
00:00:47.140 --> 00:00:53.740
Let's start with writing some tests for our new getter called include job by organization.

14
00:00:56.240 --> 00:00:56.840
All right.

15
00:00:57.560 --> 00:01:02.300
So there's going to be two conditions that are under which this method can run.

16
00:01:02.330 --> 00:01:05.510
The first is when the user has not selected any organizations.

17
00:01:05.720 --> 00:01:10.490
So that is basically testing this line right here that when selected organizations has a length of zero.

18
00:01:10.610 --> 00:01:11.750
We always want to return.

19
00:01:11.750 --> 00:01:12.080
True.

20
00:01:12.440 --> 00:01:15.950
So I'm going to provide another describe just to give this a little bit of context.

21
00:01:16.370 --> 00:01:22.040
So describe when the user has not selected any organizations.

22
00:01:23.970 --> 00:01:28.470
And for my test description, I'm going to keep it simple and just say it includes job.

23
00:01:28.950 --> 00:01:32.130
What I want this letter to tell me is that the job should be included.

24
00:01:32.670 --> 00:01:34.380
So pretty simple.

25
00:01:34.380 --> 00:01:37.470
I simply have to follow the setup that I have in this.

26
00:01:37.680 --> 00:01:40.020
Get our methods so we know they're going to need some kind of state.

27
00:01:40.050 --> 00:01:43.590
So let's begin by declaring that this is going to be our mock of U.S. state.

28
00:01:44.280 --> 00:01:47.730
And so we need our selected organizations array to be empty.

29
00:01:48.910 --> 00:01:50.950
That fits the criteria that we described above.

30
00:01:51.370 --> 00:01:55.630
The next thing I want to do is to create a sample job object just because we're eventually going to

31
00:01:55.630 --> 00:01:57.820
need to pass it in for this parameter right here.

32
00:01:58.210 --> 00:02:03.400
So I'm going to declare a sample Java object and I'm just going to give it an organization property

33
00:02:03.400 --> 00:02:04.630
so it has something to work with.

34
00:02:04.900 --> 00:02:06.850
And let's give an organization of Google.

35
00:02:08.280 --> 00:02:08.640
Okay.

36
00:02:08.970 --> 00:02:14.550
So now the next thing we want to do is to actually run the getter so we know we have our getters object.

37
00:02:14.550 --> 00:02:17.280
That is the big object that we are exporting out of this file.

38
00:02:17.280 --> 00:02:21.360
That is this big object right here, starting with Lion 11.

39
00:02:21.630 --> 00:02:23.670
So we are exporting that getter object.

40
00:02:23.670 --> 00:02:29.190
And on that getter object we have a method called include job by organization.

41
00:02:29.370 --> 00:02:32.040
And what does that getter method accept as its first argument?

42
00:02:32.160 --> 00:02:35.280
Of course, it always accepts the view store state.

43
00:02:35.280 --> 00:02:36.690
So we're going to provide our state.

44
00:02:37.080 --> 00:02:41.820
Now here's where people get confused because they think that they can simply provide job as the second

45
00:02:41.820 --> 00:02:42.870
argument to this getter.

46
00:02:42.870 --> 00:02:44.550
But that's not the way it works right here.

47
00:02:44.940 --> 00:02:51.840
Remember that from the perspective of a JavaScript method, the include job by organization method returns

48
00:02:51.840 --> 00:02:55.230
a function that accepts a job parameter.

49
00:02:55.440 --> 00:03:00.810
So what we're going to get back from this invocation is going to be a function and it is that function

50
00:03:00.810 --> 00:03:04.200
that we want to invoke and pass the job parameter to.

51
00:03:04.500 --> 00:03:10.470
So right here, immediately what I get back from this method is going to be a function and I can directly

52
00:03:10.470 --> 00:03:16.140
invoke it in line by passing a pair of parentheses the exact same way that we invoke any other function

53
00:03:16.140 --> 00:03:16.740
in JavaScript.

54
00:03:17.010 --> 00:03:21.990
So here is where I actually want to pass my job argument from above.

55
00:03:22.350 --> 00:03:25.620
So again, we are first invoking this part right here on line 40.

56
00:03:25.620 --> 00:03:26.880
I'm highlighting it right here.

57
00:03:27.120 --> 00:03:32.250
It's going to return this function in line and I'm going to invoke this function that I get back as

58
00:03:32.250 --> 00:03:36.300
the return value immediately right here and pass in job.

59
00:03:37.340 --> 00:03:37.760
All right.

60
00:03:37.940 --> 00:03:41.420
So another way I can write this, if this is a little bit confusing, is something like this, like

61
00:03:41.810 --> 00:03:45.170
job function is going to be basically this.

62
00:03:46.320 --> 00:03:51.150
I'm going to get back a function from this method and then I'm going to invoke the job function immediately

63
00:03:51.150 --> 00:03:51.990
passing and job.

64
00:03:52.290 --> 00:03:57.090
Except I'm doing this logic on a single line right here because whatever function I get back from the

65
00:03:57.090 --> 00:04:01.620
method, I'm immediately invoking with parentheses immediately after I'm doing the exact same thing.

66
00:04:01.920 --> 00:04:02.220
All right.

67
00:04:02.400 --> 00:04:06.960
It's important that you don't make the mistake in our test the providing job here, because it is not

68
00:04:06.960 --> 00:04:09.540
the second argument to the original getter method.

69
00:04:09.750 --> 00:04:14.040
It is the first argument to the function that is returned by the getter method.

70
00:04:14.520 --> 00:04:14.910
All right.

71
00:04:15.120 --> 00:04:16.260
So I'm going to.

72
00:04:17.450 --> 00:04:21.620
Invoke that return function with an argument of job and this is going to give me back a boolean.

73
00:04:21.950 --> 00:04:24.560
So I'm just going to save this to a concept called include job.

74
00:04:25.040 --> 00:04:29.810
And then on the next line I can say what I expect include job to be, which will be some kind of boolean.

75
00:04:30.170 --> 00:04:34.940
So right here, if we have no selected organizations, we should always include the job.

76
00:04:35.150 --> 00:04:36.650
So this should be true.

77
00:04:36.680 --> 00:04:40.370
It should return true to us irrespective of what organization is on the job.

78
00:04:40.640 --> 00:04:44.330
I'm going to save this and we can see that it is indeed passing.

79
00:04:44.590 --> 00:04:44.960
All right.

80
00:04:45.140 --> 00:04:51.170
For my second test, I can pass I can test the regular logic, which is the inclusion of the the job,

81
00:04:51.530 --> 00:04:55.940
or rather checking whether the jobs organization is included in the selected organizations.

82
00:04:56.270 --> 00:05:06.230
So right here I can say it identifies if job is associated with given organizations going to be a very

83
00:05:06.230 --> 00:05:08.780
similar setup to the test above.

84
00:05:09.260 --> 00:05:12.200
The first, I'll create some state with some selected organizations.

85
00:05:12.200 --> 00:05:18.890
So Con State is going to have selected organizations and let's make this an array with values like Google

86
00:05:18.890 --> 00:05:19.940
and Microsoft.

87
00:05:21.470 --> 00:05:26.660
Then I'll create a job object and let's give it an organization of Google.

88
00:05:27.020 --> 00:05:31.920
So because our job has an organization in the state, selected organizations are right.

89
00:05:31.940 --> 00:05:32.690
To be more specific.

90
00:05:32.810 --> 00:05:34.430
We want our getter to return.

91
00:05:34.430 --> 00:05:34.790
True.

92
00:05:35.120 --> 00:05:40.940
So right here I'm going to say include job and how are we going to invoke together the same way as we

93
00:05:40.940 --> 00:05:44.810
look any other getter we're going to invoke include job by organization.

94
00:05:44.810 --> 00:05:48.230
That getter will always receive the view state as its first argument.

95
00:05:48.470 --> 00:05:51.950
That getter method will return a function, right?

96
00:05:51.950 --> 00:05:56.180
It's not returning a boolean, it's returning a function that then returns a boolean.

97
00:05:56.300 --> 00:05:57.860
I'm getting the function right here.

98
00:05:58.040 --> 00:06:02.810
I'm invoking that function, passing in the argument that function expects, which is the job.

99
00:06:02.960 --> 00:06:07.580
And when that function evaluates, that function is going to actually give me a boolean and that's what

100
00:06:07.580 --> 00:06:09.560
I'm going to store in the include job constant.

101
00:06:09.830 --> 00:06:15.680
So right here, I expect include job to be true as well.

102
00:06:16.460 --> 00:06:16.790
All right.

103
00:06:17.090 --> 00:06:18.620
Do we need to test the false case?

104
00:06:18.620 --> 00:06:21.710
I don't really think so, because if we were, we would really be.

105
00:06:21.710 --> 00:06:25.340
Testing is simply that the includes method in JavaScript does what it's supposed to do.

106
00:06:25.640 --> 00:06:26.480
I don't really care.

107
00:06:26.480 --> 00:06:31.880
So I think this is enough to capture both possible scenarios under which the getter could run.

108
00:06:32.060 --> 00:06:32.370
All right.

109
00:06:32.570 --> 00:06:34.400
And that is good enough for me, for this getter.

110
00:06:34.400 --> 00:06:37.430
So let's write a very similar bunch of tests for our second getter.

111
00:06:37.430 --> 00:06:39.440
It's basically going to be very similar.

112
00:06:39.710 --> 00:06:40.760
It's right here down below.

113
00:06:42.050 --> 00:06:46.310
But in describe include job by job type.

114
00:06:48.300 --> 00:06:49.410
Provide an arrow function.

115
00:06:49.410 --> 00:06:57.600
And here I'm going to provide another to describe when the user has not selected any job types.

116
00:06:59.200 --> 00:07:00.340
Provide an arrow function.

117
00:07:00.340 --> 00:07:00.760
And here.

118
00:07:02.830 --> 00:07:04.360
And we're going to start with our state.

119
00:07:04.810 --> 00:07:06.520
Actually, we need to start, of course, with an assertion.

120
00:07:06.520 --> 00:07:07.950
And the assertion is the same as the above.

121
00:07:07.960 --> 00:07:11.470
It's going to include the job purchase description.

122
00:07:11.680 --> 00:07:12.040
Okay.

123
00:07:12.220 --> 00:07:14.050
So now we can start by setting up our state.

124
00:07:15.220 --> 00:07:18.640
We're going to have these selected job types array, BMT.

125
00:07:18.820 --> 00:07:22.330
Make sure you don't just copy and paste because it's not going to be selected organizations for this

126
00:07:22.330 --> 00:07:22.540
one.

127
00:07:22.720 --> 00:07:24.310
Here we care about selected job types.

128
00:07:24.760 --> 00:07:26.590
Here is a sample job object.

129
00:07:26.610 --> 00:07:29.080
We're going to give it a job type of full time.

130
00:07:30.970 --> 00:07:36.670
And when I invoke my getter, we're going to get a Boolean.

131
00:07:36.670 --> 00:07:39.100
So const include job.

132
00:07:40.030 --> 00:07:41.620
We're going to talk to our GETTERS Object.

133
00:07:41.620 --> 00:07:44.800
We're going to invoke the include job by job type getter.

134
00:07:45.010 --> 00:07:48.180
The getter always is going to get the state as the first argument.

135
00:07:48.190 --> 00:07:49.600
It's going to return a function.

136
00:07:49.750 --> 00:07:53.860
I'm going to immediately invoke that function, pass the argument the function expects, which is our

137
00:07:53.860 --> 00:07:57.760
job and I expect that include job should be true.

138
00:07:57.850 --> 00:08:03.310
So expect to be true because when we have no selected job types, the job should always be included.

139
00:08:04.240 --> 00:08:09.700
And then below this described at the top level of my include job by job type described, I'm going to

140
00:08:09.700 --> 00:08:10.720
write my second test.

141
00:08:11.200 --> 00:08:17.230
It identifies if job is associated with given job types.

142
00:08:19.250 --> 00:08:19.760
All right.

143
00:08:20.120 --> 00:08:22.100
So once again, we're going to need to have a state.

144
00:08:22.160 --> 00:08:23.840
This is our mock view store state.

145
00:08:24.170 --> 00:08:26.910
It's going to have a selected job types array.

146
00:08:26.960 --> 00:08:31.100
But now we need to populate it with something less populated with full time.

147
00:08:32.760 --> 00:08:35.820
And part time and below.

148
00:08:35.820 --> 00:08:36.840
I'm going to have a job.

149
00:08:37.350 --> 00:08:39.290
Our job is going to have a job type property.

150
00:08:39.300 --> 00:08:42.180
Let's say it's going to be a job type of part time.

151
00:08:42.510 --> 00:08:47.370
And then we can validate that the job should be included because it's job type is found in these selected

152
00:08:47.370 --> 00:08:48.600
job types array.

153
00:08:48.960 --> 00:08:50.250
So right here include job.

154
00:08:52.020 --> 00:08:56.550
I expect it to be a boolean and I'm going to get that boolean by first invoking my getter method called

155
00:08:56.550 --> 00:09:02.340
include job by job type passing in the view state, that getter is going to return a function to me.

156
00:09:02.340 --> 00:09:03.440
I'm going to invoke that function.

157
00:09:03.450 --> 00:09:08.790
It passed in the argument it expects which is job and then I expect include job to be a boolean and

158
00:09:08.790 --> 00:09:12.540
it should be true because part time is found in my selected job types array.

159
00:09:13.200 --> 00:09:13.650
All right.

160
00:09:13.950 --> 00:09:18.090
And I can of course test that any of these fails simply by, for example, removing this bit of logic

161
00:09:18.090 --> 00:09:18.420
right here.

162
00:09:18.420 --> 00:09:20.630
I'm going to comment it out and save it.

163
00:09:20.670 --> 00:09:22.770
We're going to see we're going to get a failure.

164
00:09:22.920 --> 00:09:23.190
All right.

165
00:09:23.190 --> 00:09:26.400
So that is proof that our implementation is working as expected.

166
00:09:26.820 --> 00:09:27.150
All right.

167
00:09:27.150 --> 00:09:34.140
So now we have created two separate getters that each receive the View X Store and also return functions

168
00:09:34.140 --> 00:09:37.140
which allow them to intrinsically accept second arguments.

169
00:09:37.290 --> 00:09:42.450
In this case, each of these getters accepts a single job argument, so now we can bring it all together

170
00:09:42.450 --> 00:09:46.260
by using these getters in our filter jobs getter in the next lesson.
