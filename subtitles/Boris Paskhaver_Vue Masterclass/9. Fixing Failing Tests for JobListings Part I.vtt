WEBVTT
1
00:00:00.390 --> 00:00:01.350
All right.

2
00:00:01.350 --> 00:00:04.350
So our job listings component is in really good shape.

3
00:00:04.530 --> 00:00:10.710
But as we saw in the previous lesson, we do have a failing test suite with eight failing tests, and

4
00:00:10.710 --> 00:00:14.320
all of those failing tests are in this job listings test suite.

5
00:00:14.640 --> 00:00:16.650
So go ahead and open up the job listings.

6
00:00:16.650 --> 00:00:18.750
Test file, job listings that test that.

7
00:00:18.750 --> 00:00:19.140
Yes.

8
00:00:19.410 --> 00:00:22.920
And in this lesson, we're going to try to fix those failing tests.

9
00:00:23.280 --> 00:00:28.800
So once again, the reason our tests are failing is because they're still relying on our former implementation,

10
00:00:28.980 --> 00:00:33.660
where we were, for example, mocking out the dollar route property, the dollar store property.

11
00:00:33.840 --> 00:00:39.520
Now we're replacing a lot of those functionalities with both helper functions, but also with our own

12
00:00:39.520 --> 00:00:40.190
a composable.

13
00:00:40.440 --> 00:00:44.940
And as we talked about earlier, the way we can make our test suite really simple for this component

14
00:00:45.030 --> 00:00:48.330
is to mark out all of the composable that we use ourself.

15
00:00:48.630 --> 00:00:53.280
So looking from top to bottom in our setup method, we can mark out a whole bunch of things.

16
00:00:53.490 --> 00:00:59.340
Use, fetch jobs, dispatch, use filter jobs, use current page, use previous index pages, right?

17
00:00:59.640 --> 00:01:04.950
So let's begin by importing those helper composable functions and then immediately mocking them out.

18
00:01:05.310 --> 00:01:11.580
So right here at the very top, after my imports from test utils, I'm going to start by importing use

19
00:01:11.580 --> 00:01:16.290
filter jobs as well as use fetch jobs dispatch.

20
00:01:17.190 --> 00:01:22.320
And that is going to come from the source directory store composable that you ask immediately afterwards

21
00:01:22.320 --> 00:01:28.230
I'm going to mark out that file so provide the exact same file path source directory store composable.

22
00:01:28.440 --> 00:01:29.190
And there we go.

23
00:01:29.670 --> 00:01:29.940
All right.

24
00:01:29.940 --> 00:01:31.050
That's two of our functions.

25
00:01:31.050 --> 00:01:37.090
Let's also import and mark out use current page that's going to come from source directory composable

26
00:01:37.170 --> 00:01:40.470
it use current page on the line below same exact path.

27
00:01:40.920 --> 00:01:43.560
The source directory composable is use current page.

28
00:01:44.130 --> 00:01:49.260
And finally, the last one I want to do is import use, previous and next pages.

29
00:01:49.260 --> 00:01:53.220
That's going to come from the source directory, slash, composable, slash, use, previous, next

30
00:01:53.220 --> 00:01:58.500
pages once again and make sure to invoke just that mock immediately underneath, provide the exact same

31
00:01:58.500 --> 00:01:58.920
path.

32
00:01:59.850 --> 00:02:06.810
And again, what this does is it tells just to go through the files and anything that those files defines

33
00:02:06.810 --> 00:02:07.440
it as functions.

34
00:02:07.440 --> 00:02:12.480
It replaces them with just mock functions that are able to track how many times they've been called

35
00:02:12.720 --> 00:02:15.180
and also return undefined when invoked.

36
00:02:15.600 --> 00:02:15.900
All right.

37
00:02:16.140 --> 00:02:19.560
So with that said, we can also start cleaning up some of our old code.

38
00:02:19.560 --> 00:02:22.650
So we're not going to be actually creating root objects anymore.

39
00:02:22.650 --> 00:02:26.700
We technically might if we have something that uses, for example, the user out function.

40
00:02:26.940 --> 00:02:30.570
But as we'll discover, we're not going to need any of these helper functions anymore.

41
00:02:30.720 --> 00:02:35.280
We're just going to do all of our mocking directly within the test themselves.

42
00:02:35.580 --> 00:02:37.650
And I'll show you how all of this is going to look in just a second.

43
00:02:37.890 --> 00:02:40.680
But for now, we can simply delete, create, root and create store.

44
00:02:40.680 --> 00:02:41.850
We're no longer going to need this.

45
00:02:43.110 --> 00:02:48.510
And in our create config function, this was our factory function that previously populated the dollar

46
00:02:48.510 --> 00:02:50.160
sign root and data and store property.

47
00:02:50.370 --> 00:02:51.720
We're not using that anymore.

48
00:02:51.720 --> 00:02:55.500
We're using the new composition API so we can remove that max property.

49
00:02:55.800 --> 00:02:59.520
We're still going to keep our stubs logic because we want to stub out the root or link.

50
00:02:59.520 --> 00:03:00.600
Stop stop component.

51
00:03:00.870 --> 00:03:01.560
Totally fine.

52
00:03:01.800 --> 00:03:06.180
You can see once we remove that, there's also no more need for our root and store parameter.

53
00:03:06.180 --> 00:03:07.980
So I'm going to remove those two parameters.

54
00:03:08.340 --> 00:03:12.960
So create config will be a basic factory function that just gives me a config object that stubs out

55
00:03:12.960 --> 00:03:13.530
router link.

56
00:03:13.710 --> 00:03:14.700
No problem with that at all.

57
00:03:15.090 --> 00:03:19.710
And with that it's simply a matter of navigating to every individual test and getting it to the pass.

58
00:03:20.460 --> 00:03:24.000
So let's read through these tests, remind ourselves of what they do and then get them to pass.

59
00:03:24.000 --> 00:03:28.980
So number one, when component mounts, it makes call to fetch jobs from API.

60
00:03:29.310 --> 00:03:34.020
So where this logic is currently contained in our new newest iteration is line 52.

61
00:03:34.020 --> 00:03:39.480
So we use the on mounted function to invoke the used fetch jobs dispatch method which runs the action.

62
00:03:39.750 --> 00:03:45.300
So all I care about in this test is making sure that this function has been run well.

63
00:03:45.300 --> 00:03:48.090
Remember, we just imported it and marked it out above.

64
00:03:48.090 --> 00:03:50.940
So just is going to track how many times it's been invoked.

65
00:03:51.180 --> 00:03:56.160
And in theory, just by mounting this component, we should automatically run through the setup method

66
00:03:56.160 --> 00:04:00.690
in our test suite, which will invoke on mounted, which should invoke, use, fetch jobs, dispatch

67
00:04:00.690 --> 00:04:01.380
behind the scenes.

68
00:04:01.590 --> 00:04:07.140
So simply by mounting the component and then verifying that this has been invoked, we should get a

69
00:04:07.140 --> 00:04:07.830
passing test.

70
00:04:08.520 --> 00:04:13.260
We do run into a couple of issues, however, which is that our mounted component right here still needs

71
00:04:13.260 --> 00:04:15.450
to go through the remainder of the setup method.

72
00:04:15.630 --> 00:04:21.570
So it will go through use filter jobs, it will go through use current page, etc. and those just mock

73
00:04:21.570 --> 00:04:24.900
functions will return undefined and that can be a little bit problematic.

74
00:04:25.200 --> 00:04:30.360
So for example, if you look at this max page computed property right here, filter jobs needs to be

75
00:04:30.360 --> 00:04:33.990
an object with a value property set to something with a length property.

76
00:04:34.260 --> 00:04:36.090
So of course we can provide an array here.

77
00:04:36.300 --> 00:04:41.100
But the important takeaway is if we simply allow use filter jobs to return undefined.

78
00:04:41.280 --> 00:04:47.250
Undefined is not going to have a value property and thus this computed property will fail in the mounting

79
00:04:47.250 --> 00:04:48.870
of our component and our test will fail.

80
00:04:49.170 --> 00:04:54.000
So the summary that I'm trying to say here is even though we care about line 52, we still need to make

81
00:04:54.000 --> 00:04:59.280
sure we mark out sufficiently in this test to ensure that the setup method here can run to completion.

82
00:04:59.430 --> 00:04:59.930
Because if it.

83
00:04:59.990 --> 00:05:00.350
Doesn't.

84
00:05:00.350 --> 00:05:03.660
The test will fail right there, and we're never going to actually reach the end of our setup.

85
00:05:03.890 --> 00:05:04.190
All right.

86
00:05:04.490 --> 00:05:09.590
So what I'd like to do is begin by simply marking out the three composers that we have here use filter

87
00:05:09.590 --> 00:05:12.320
jobs, use current page, and use previous index pages.

88
00:05:12.410 --> 00:05:12.770
All right.

89
00:05:13.550 --> 00:05:18.590
But with every test we're going to see, do we actually care about those specific values or do we just

90
00:05:18.590 --> 00:05:20.090
need anything that can play the role?

91
00:05:20.450 --> 00:05:26.480
So, for example, if I start with use filter jobs, which is my composable function now a just mock

92
00:05:26.480 --> 00:05:28.430
function, I can do mock return value.

93
00:05:29.420 --> 00:05:35.090
And as I mentioned earlier, we need this to have not just a value property, but a value property set

94
00:05:35.090 --> 00:05:37.160
to something with a length property.

95
00:05:37.340 --> 00:05:40.790
So here I'm going to provide an object with a value property set to an empty array.

96
00:05:41.180 --> 00:05:45.770
So here I'm not going to actually have any filter jobs, but I am going to give something that is going

97
00:05:45.770 --> 00:05:49.130
to ensure that Max Page is able to compute itself just fine.

98
00:05:49.610 --> 00:05:49.880
All right.

99
00:05:49.880 --> 00:05:54.430
So this will be enough for use filter jobs for just this thing right down below.

100
00:05:54.440 --> 00:05:55.880
I can say use current page.

101
00:05:56.690 --> 00:05:58.010
Let's do mock return value.

102
00:05:58.250 --> 00:06:02.480
And since I'm not certain about whether this will whether this will matter, not let's just give it

103
00:06:02.480 --> 00:06:05.750
a sample value and let the test run as if everything is great.

104
00:06:05.750 --> 00:06:09.800
So let's say our current page is going to be an object with a value property set to two.

105
00:06:10.010 --> 00:06:14.840
Once again, I'm not using a real reactive object, I'm just using our own JavaScript object that is

106
00:06:14.840 --> 00:06:16.970
good enough to play the role of a view reactive object.

107
00:06:17.210 --> 00:06:21.140
This test doesn't care about testing reactivity in the DOM in the template.

108
00:06:21.350 --> 00:06:25.160
All he cares about is verifying the fetching of the jobs from the API.

109
00:06:25.370 --> 00:06:30.110
So a simple non-reactive object is good enough for what use current page needs to be able to do, which

110
00:06:30.110 --> 00:06:32.420
is be able to ensure that set up runs till completion.

111
00:06:32.840 --> 00:06:38.660
Finally, our last composable is used pre this and next pages and here I'm going to once again mock

112
00:06:38.660 --> 00:06:44.870
return value and as a reminder, what this composable function returns in the real world is an object

113
00:06:44.870 --> 00:06:49.040
with previous page and next page properties, both of which are reactive objects.

114
00:06:49.250 --> 00:06:54.170
So in theory, if I want it to be as close to the real world as I can, I would a previous page here

115
00:06:54.290 --> 00:06:57.260
and that would be equal to an object with its own value property.

116
00:06:57.530 --> 00:07:02.990
However, the interesting caveat here is whenever we get that previous page and next page reactive object

117
00:07:02.990 --> 00:07:05.180
here, we don't do anything more with it below.

118
00:07:05.270 --> 00:07:06.890
We just use it in our template.

119
00:07:07.220 --> 00:07:12.920
So if we made previous page simply a regular number rather than a reactive object holding a number,

120
00:07:13.130 --> 00:07:17.630
I have a feeling that we're still going to be able to get through the setup method and test what we

121
00:07:17.630 --> 00:07:19.190
care about, which is line 52.

122
00:07:19.490 --> 00:07:25.820
So in other words, even though we can be super more closer or more specific to how the real world implementation

123
00:07:25.820 --> 00:07:31.220
works for the purposes of just getting set up to run setting previous page to one rather than an object

124
00:07:31.220 --> 00:07:33.500
with a value property set to one should be enough.

125
00:07:33.800 --> 00:07:38.810
So right here, as an example, I'll make previous page equal to one and next page equal to two.

126
00:07:39.530 --> 00:07:41.550
And this should be enough to successfully just structure them.

127
00:07:41.930 --> 00:07:42.290
All right.

128
00:07:42.290 --> 00:07:47.300
Actually, next page is going to be three because we are currently on page two, previous pages one.

129
00:07:47.300 --> 00:07:48.050
Next page is three.

130
00:07:48.200 --> 00:07:51.860
Again, none of these things really matter, but it helps another reader sort of get a context of what

131
00:07:51.860 --> 00:07:52.460
the test means.

132
00:07:52.820 --> 00:07:55.970
We're no longer going to use the create root function so we can get rid of that.

133
00:07:57.440 --> 00:07:58.910
We no longer care about dispatch.

134
00:07:59.090 --> 00:08:00.710
We no longer care about creating a store.

135
00:08:00.920 --> 00:08:05.330
We're still going to shallow amount, but remember our create config function above no longer takes

136
00:08:05.330 --> 00:08:05.810
these two.

137
00:08:06.080 --> 00:08:07.100
So I'm going to get rid of that.

138
00:08:07.280 --> 00:08:12.650
And now instead of verifying that dispatch was called I care about use fetch jobs dispatch being called

139
00:08:12.950 --> 00:08:15.860
so I'm going to copy this from right here and paste it right here.

140
00:08:16.160 --> 00:08:22.280
And as a reminder we did import it and mock it out suggest is tracking calls to it and we no longer

141
00:08:22.280 --> 00:08:24.200
care about it being called with the right argument.

142
00:08:24.200 --> 00:08:29.510
We actually abstracted this logic away to the actual function we described right here.

143
00:08:29.690 --> 00:08:34.340
All we care about from the vantage point of the joblessness component is that it's been invoked, period.

144
00:08:34.610 --> 00:08:38.630
So instead of to have been called with I'm just going to change this to a single function call of two

145
00:08:38.630 --> 00:08:39.530
have been called.

146
00:08:39.860 --> 00:08:44.060
So simply verify that it has been invoked at some point during the mounting of the component.

147
00:08:44.390 --> 00:08:48.860
And if I focus on this test by making it fit by 50, I'm going to save that.

148
00:08:50.150 --> 00:08:52.910
Let the test rerun and you can see that test is passing.

149
00:08:53.030 --> 00:08:53.390
All right.

150
00:08:53.720 --> 00:08:54.950
So this is a good place to start.

151
00:08:54.950 --> 00:08:56.360
We imported a bunch of things.

152
00:08:56.360 --> 00:08:57.590
We cleaned up some helper functions.

153
00:08:57.590 --> 00:09:02.690
And in the very next lesson, we can continue chipping away at the remaining tests in this job listings

154
00:09:02.690 --> 00:09:03.020
next week.

155
00:09:03.270 --> 00:09:06.710
So I'm going to remove the set, save the file, and I will see you in the next lesson.
