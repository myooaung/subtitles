WEBVTT
1
00:00:00.570 --> 00:00:01.310
Okay.

2
00:00:01.310 --> 00:00:08.240
So in the previous lesson we updated our state file from a JavaScript file to a new TypeScript file.

3
00:00:08.480 --> 00:00:14.180
And in this lesson, I want to do the same thing for the corresponding test file, and this will allow

4
00:00:14.180 --> 00:00:19.250
us to validate that everything still works whenever we have a test file written in TypeScript.

5
00:00:19.640 --> 00:00:23.060
So right here in my file explorer, we're going to go to test unit.

6
00:00:23.330 --> 00:00:25.760
Then in store, we have our state.

7
00:00:25.760 --> 00:00:26.690
That test, that.

8
00:00:26.690 --> 00:00:27.260
Yes, file.

9
00:00:27.500 --> 00:00:28.040
Here it is.

10
00:00:28.040 --> 00:00:32.690
And this is the one that is validating that our state function is returning everything as it should.

11
00:00:33.020 --> 00:00:36.740
So what I'm going to do here is change this file to be a typescript file.

12
00:00:38.290 --> 00:00:39.010
So there we go.

13
00:00:39.250 --> 00:00:42.190
And when I change it, you'll notice that nothing will change.

14
00:00:42.190 --> 00:00:43.810
Everything in this file will stay just.

15
00:00:44.110 --> 00:00:44.800
Just the same.

16
00:00:44.980 --> 00:00:45.850
It's all okay.

17
00:00:46.150 --> 00:00:51.370
And then what I want to do here is I want to run my full test suite, so I'm going to do NPM run test

18
00:00:51.370 --> 00:00:51.700
unit.

19
00:00:52.000 --> 00:00:57.010
And the only reason I want to do this is to validate that my addition of TypeScript to the project is

20
00:00:57.010 --> 00:01:00.940
still going to allow just to recognize test files that are written in TypeScript.

21
00:01:01.330 --> 00:01:08.020
So here you can see it did go through my state, that test that that's file test now with the extension

22
00:01:08.200 --> 00:01:09.580
and everything is still passing.

23
00:01:09.880 --> 00:01:15.190
And the cool part about all of this is that the creation of a typescript file is actually going to give

24
00:01:15.190 --> 00:01:21.070
us a lot of benefits even in our tests, because now our tests are going to be aware of what state represents.

25
00:01:21.370 --> 00:01:27.190
Notice here that this TypeScript file knows that the state function returns an object that fulfills

26
00:01:27.310 --> 00:01:30.790
the global state interface that we created in the previous lesson.

27
00:01:31.000 --> 00:01:33.790
So let me just drag this over to the right so we understand what's going on.

28
00:01:34.930 --> 00:01:39.580
We know that we're returning an object with a global state interface which is defined in this file.

29
00:01:39.730 --> 00:01:40.720
So this thing right here.

30
00:01:40.990 --> 00:01:44.510
So check out what happens when I mistype a property name in my test.

31
00:01:44.530 --> 00:01:47.800
Let's say I accidentally say is logged ends with the zip.

32
00:01:48.130 --> 00:01:50.290
Automatically TypeScript is going to warn me.

33
00:01:50.290 --> 00:01:53.350
It's going to say you told me about a global state interface.

34
00:01:53.350 --> 00:01:57.490
It's supposed to have four properties set to these properties or to these values or these types.

35
00:01:57.760 --> 00:02:03.460
And if I hover my mouse, you can see it tells us property is logged in, does not exist on this type

36
00:02:03.460 --> 00:02:04.450
called global state.

37
00:02:04.660 --> 00:02:08.770
What you told me would be the return value type of your state function.

38
00:02:08.950 --> 00:02:13.660
So now even in our tests, we're going to get this kind of benefit that we would normally not get in

39
00:02:13.660 --> 00:02:17.740
regular vanilla JavaScript because TypeScript is validating those things for us.

40
00:02:17.950 --> 00:02:24.610
And so again, things like typos, you know, over typing a character under type A character having

41
00:02:24.610 --> 00:02:25.320
the wrong casing.

42
00:02:25.330 --> 00:02:30.400
These are common developer issues that TypeScript very easily identifies and points out to us, as well

43
00:02:30.400 --> 00:02:32.050
as, of course, the actual types themselves.

44
00:02:32.200 --> 00:02:36.060
You know what for for example, accessing something as if it's a string when it's a boolean, which

45
00:02:36.160 --> 00:02:36.970
which we've seen before.

46
00:02:37.210 --> 00:02:42.160
But the key takeaway here is we're now reaping the benefits of TypeScript, not just in our implementation

47
00:02:42.160 --> 00:02:47.510
code, which reduces the chance of errors there, but also in our actual test files as well.

48
00:02:47.530 --> 00:02:50.320
So TypeScript is proving to be hugely helpful for us.

49
00:02:50.590 --> 00:02:50.860
All right.

50
00:02:50.860 --> 00:02:52.390
That's all there is to cover in this lesson.

51
00:02:52.390 --> 00:02:54.010
So I will see you in the next one.
