WEBVTT
1
00:00:00.660 --> 00:00:01.350
Okay.

2
00:00:01.350 --> 00:00:07.530
So we have everything we need as far as fetching degrees, saving them to the view next door, and then

3
00:00:07.530 --> 00:00:11.640
using getters to extract the unique degrees from the API response.

4
00:00:12.000 --> 00:00:16.980
And at first I thought this would allow us to jump immediately into building out the component logic.

5
00:00:17.220 --> 00:00:22.680
But remember, there's actually additional properties in our view Store State that are designed to store

6
00:00:22.680 --> 00:00:28.470
the actual values that the user has selected from a checkbox perspective, because we use those values

7
00:00:28.470 --> 00:00:31.050
in order to filter the primary array of jobs.

8
00:00:31.290 --> 00:00:36.900
So as a reminder from our previous implementations, we have selected organizations right here and selected

9
00:00:36.900 --> 00:00:40.260
job types, and these two arrays are arrays of strings.

10
00:00:40.410 --> 00:00:46.230
As soon as the user clicks a checkbox for a job type, for example, we store an array with that value

11
00:00:46.230 --> 00:00:52.350
and we save it to view X, which allows us to filter the jobs here based on the values in this array

12
00:00:52.380 --> 00:00:53.250
or this rank.

13
00:00:53.490 --> 00:00:58.620
So before we actually get to building the checkbox component, what I'd like to do is wire up this logic

14
00:00:58.620 --> 00:00:59.040
as well.

15
00:00:59.280 --> 00:01:04.110
So what I want to do in this lesson is add a new property called Selected Degrees and it will be an

16
00:01:04.110 --> 00:01:10.890
array storing strings representing the checkboxes or in other words, the degrees at the user has selected.

17
00:01:11.250 --> 00:01:15.900
So I've opened up state that's on my left and then state that test that's on my right.

18
00:01:16.110 --> 00:01:19.470
And we're going to write a very similar test to these two at the very bottom.

19
00:01:19.770 --> 00:01:21.030
So right here, I'm going to say.

20
00:01:22.320 --> 00:01:27.930
It stores degrees that the user would like to filter jobs by.

21
00:01:29.950 --> 00:01:31.690
And here we can provide our arrow function.

22
00:01:32.470 --> 00:01:34.420
It's going to be very similar to what we have above.

23
00:01:34.450 --> 00:01:38.110
We're going to invoke our state function, which you see on the left, and that is going to give us

24
00:01:38.110 --> 00:01:40.840
our starting state for the View Store.

25
00:01:41.410 --> 00:01:46.440
And then I expect that that starting state should have a property on it, and that's going to be called

26
00:01:46.440 --> 00:01:47.500
the selected degrees.

27
00:01:47.920 --> 00:01:51.640
That, of course, does not exist yet, but we're going to use TDD to make it happen.

28
00:01:52.000 --> 00:01:54.940
And of course, that should equal an empty array to start.

29
00:01:55.390 --> 00:02:00.910
And that empty array, of course, will be populated as we click on checkboxes within our eventual component.

30
00:02:01.390 --> 00:02:02.650
So I'm going to save that.

31
00:02:02.650 --> 00:02:04.000
We are, of course, going to get a failure.

32
00:02:04.840 --> 00:02:05.830
And that's totally fine.

33
00:02:06.160 --> 00:02:08.820
So, of course, this is actually going to take us two steps.

34
00:02:08.830 --> 00:02:12.970
So the first step, of course, is going to be adding selected degrees right here.

35
00:02:14.040 --> 00:02:15.690
And setting it to be an empty array.

36
00:02:15.870 --> 00:02:20.700
But that is not going to make TypeScript happy because TypeScript is going to say, you told me that

37
00:02:20.700 --> 00:02:25.890
the returned object would be outside global state and the global state interface doesn't implement a

38
00:02:25.890 --> 00:02:27.270
selected degrees property.

39
00:02:27.540 --> 00:02:31.650
So we're going to need to go into this file right here type stats and I can just command click here

40
00:02:31.650 --> 00:02:32.910
on a mac to go into that file.

41
00:02:33.210 --> 00:02:37.830
And here, of course, we need to add that new property to our TypeScript interface as well.

42
00:02:38.130 --> 00:02:40.230
So right here I'm going to say selected degrees.

43
00:02:41.130 --> 00:02:43.680
And it is going to be an array of strings.

44
00:02:44.470 --> 00:02:44.770
All right.

45
00:02:44.790 --> 00:02:45.910
A string array right here.

46
00:02:45.930 --> 00:02:47.190
So now we've declared a type.

47
00:02:47.490 --> 00:02:48.210
Save that.

48
00:02:48.360 --> 00:02:51.270
That'll make the error go away in here because TypeScript is happy.

49
00:02:51.420 --> 00:02:55.950
And that should also make our tests pass because the return object here will have a selected degree's

50
00:02:55.950 --> 00:02:57.600
property set to an empty array.

51
00:02:58.200 --> 00:02:58.520
All right.

52
00:02:58.570 --> 00:03:04.410
Now, we started to build up the logic for storing the user's eventual degree strings as the user clicks

53
00:03:04.530 --> 00:03:05.580
on the checkboxes.

54
00:03:05.820 --> 00:03:07.260
More on this in the next lesson.
