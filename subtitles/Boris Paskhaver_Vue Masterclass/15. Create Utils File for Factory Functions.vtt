WEBVTT
1
00:00:00.480 --> 00:00:01.250
Okay.

2
00:00:01.260 --> 00:00:06.990
So the next file that I want to migrate to TypeScript is going to be our getters test file and that

3
00:00:06.990 --> 00:00:13.620
is getters that test that just as a reminder, the file is located in test unit store.

4
00:00:13.860 --> 00:00:16.050
So here's my getters that test, that just file.

5
00:00:16.230 --> 00:00:23.790
And so I'm going to change its extension to be test for typescript so getters that test acts and you're

6
00:00:23.790 --> 00:00:27.990
going to notice that as soon as I enable TypeScript it's going to identify some issues for us.

7
00:00:28.200 --> 00:00:33.450
And these are actually going to be very familiar issues to the ones that we encountered when we converted

8
00:00:33.450 --> 00:00:36.330
our mutations file to be attached to file as well.

9
00:00:36.600 --> 00:00:42.330
So our getters, much like our mutations, expect to receive a view store state and that your extra

10
00:00:42.330 --> 00:00:44.400
state is of type global state.

11
00:00:44.730 --> 00:00:50.820
Unfortunately, the sample objects that we are providing here do not fulfill all of the properties of

12
00:00:50.820 --> 00:00:52.110
the global state interface.

13
00:00:52.350 --> 00:00:56.940
So for example, in this test, this very first one, we are providing a state with a jobs property

14
00:00:57.030 --> 00:01:02.400
which which means we are missing some of the additional properties like is logged in selected organizations,

15
00:01:02.400 --> 00:01:03.870
selected job types, etc..

16
00:01:04.020 --> 00:01:04.320
All right.

17
00:01:04.320 --> 00:01:06.990
So the exact same issue we had with our mutation file.

18
00:01:07.290 --> 00:01:11.670
So let me open up my mutations test file and that's going to be mutations that test.

19
00:01:11.670 --> 00:01:12.480
That test.

20
00:01:13.680 --> 00:01:18.900
And of course, the way we solve this problem is by creating a bunch of factory functions up here that

21
00:01:18.900 --> 00:01:21.990
had a reasonable fallback for a valid state.

22
00:01:22.260 --> 00:01:22.590
Right.

23
00:01:22.680 --> 00:01:31.410
But also allowed each test to provide its own configuration encased in case it cared about its own configuration

24
00:01:31.410 --> 00:01:35.340
of what it needed for the state or for the job for that particular test.

25
00:01:35.700 --> 00:01:38.700
So the good news is these functions are actually reusable.

26
00:01:38.880 --> 00:01:43.500
And that brings me to the next point, which is now that we've identified that we can use these kinds

27
00:01:43.500 --> 00:01:45.660
of helper functions in multiple test files.

28
00:01:45.840 --> 00:01:51.420
It doesn't really make sense to store them in mutations that test states because now they have revealed

29
00:01:51.420 --> 00:01:53.250
themselves to be reusable.

30
00:01:53.550 --> 00:01:59.190
So what I propose we do in this lesson before we start working on the Getters test file is we move these

31
00:01:59.190 --> 00:02:05.010
helper functions, these factory functions to a new file which I will call Utils Dots.

32
00:02:05.280 --> 00:02:11.070
And utils is just short for utilities or in other words, helper functions that assist us in our test

33
00:02:11.070 --> 00:02:11.280
suite.

34
00:02:11.580 --> 00:02:15.750
So let's do that right now, and then we'll come back and incorporate these new helper functions into

35
00:02:15.750 --> 00:02:16.980
getters in the next lesson.

36
00:02:17.310 --> 00:02:23.670
So for now, I'm going to close this file and in my test unit store directory, I'm going to create

37
00:02:23.670 --> 00:02:31.210
another file and I'm going to call it Utils that T.S. It's not a test file is just a, it's just a a

38
00:02:31.470 --> 00:02:35.110
regular typescript file that other test files will import from.

39
00:02:35.490 --> 00:02:35.740
All right.

40
00:02:35.740 --> 00:02:37.020
So I'm going to move this over to the right.

41
00:02:37.380 --> 00:02:41.640
And all I'm going to do in this file is copy and paste the logic I have right here.

42
00:02:41.640 --> 00:02:44.970
So my create state function and my create job function.

43
00:02:45.120 --> 00:02:47.940
I'm going to copy and paste that into my new utils file.

44
00:02:48.510 --> 00:02:53.370
And of course, that's going to create some issues of its own because of course we need our global state

45
00:02:53.370 --> 00:02:57.360
interface, we need our job interface and we also need our state function.

46
00:02:57.540 --> 00:03:01.950
So we need all three imports that we have right here, state, job and global state.

47
00:03:02.190 --> 00:03:04.140
I'm going to copy that pasted right here.

48
00:03:06.140 --> 00:03:06.680
There we go.

49
00:03:06.680 --> 00:03:08.720
So now that should make those initial errors go away.

50
00:03:08.900 --> 00:03:13.340
And of course, the other thing I want to do now that these functions are in a separate file is I need

51
00:03:13.340 --> 00:03:14.720
to make sure I export them.

52
00:03:14.960 --> 00:03:17.390
So I'm not going to have any kind of default export.

53
00:03:17.400 --> 00:03:19.550
I'm just going to make them all named exports.

54
00:03:19.730 --> 00:03:23.180
So right here, export const and right here, export const.

55
00:03:24.320 --> 00:03:24.840
All right.

56
00:03:25.050 --> 00:03:30.720
So all that's left to do now is to now utilize these functions in our mutations test file.

57
00:03:30.750 --> 00:03:33.630
And then later on, we'll also apply them to our getters test file.

58
00:03:33.990 --> 00:03:37.230
So right here, we can go ahead and remove our former implementation.

59
00:03:37.620 --> 00:03:38.200
Right, right.

60
00:03:38.310 --> 00:03:38.820
Right here.

61
00:03:39.240 --> 00:03:39.630
All right.

62
00:03:39.630 --> 00:03:45.000
So we can see that all of our former imports are now faded out, which means they're not being used

63
00:03:45.000 --> 00:03:47.370
anywhere in our file so we can get rid of them right here.

64
00:03:47.700 --> 00:03:50.160
These lines are now in our utils file on the right.

65
00:03:50.460 --> 00:03:55.560
And so the only thing we have to do now is to import our two helper functions, create job and create

66
00:03:55.560 --> 00:03:57.570
state from this utils far right here.

67
00:03:57.840 --> 00:04:04.080
So I'm going to import the named export create job as well as create state that is coming from the left

68
00:04:04.080 --> 00:04:05.100
and the right hand side.

69
00:04:05.340 --> 00:04:08.640
And then, of course, we come to an issue of how do we reference the file on the right.

70
00:04:09.030 --> 00:04:14.760
So unfortunately, remember that we have the act sign, but the outside represents our source directory

71
00:04:14.910 --> 00:04:17.550
and our tests are in a separate tests directory.

72
00:04:17.820 --> 00:04:22.260
So instead of doing absolute imports, as we've done for most things throughout the course, in other

73
00:04:22.260 --> 00:04:27.090
words, starting our import from the top level of the source directory here, I'm going to use relative

74
00:04:27.090 --> 00:04:27.510
imports.

75
00:04:27.660 --> 00:04:32.610
And what I'm going to tell TypeScript is to look in the exact same folder as where I am right now.

76
00:04:32.880 --> 00:04:36.780
So my utils file is in the same folder as mutations that test that.

77
00:04:36.780 --> 00:04:37.110
Yes.

78
00:04:37.380 --> 00:04:43.200
So what I can do is use my dot slash syntax to say look in the current directory and then the file within

79
00:04:43.200 --> 00:04:47.520
the current directory where TypeScript can find these exports is going to be my utils file.

80
00:04:48.060 --> 00:04:48.420
All right.

81
00:04:48.600 --> 00:04:53.490
So what I'm doing in my mutations test file is I'm importing these two helper functions from where they're

82
00:04:53.490 --> 00:04:55.230
defined in this file on the right.

83
00:04:55.470 --> 00:04:58.980
And you'll see as soon as I save this, all of my typescript errors go away.

84
00:04:59.130 --> 00:05:03.960
Because now TypeScript knows what create state is and now knows what create job as we're simply utilizing

85
00:05:03.960 --> 00:05:05.040
those helper functions.

86
00:05:05.640 --> 00:05:10.560
And now we've enabled them to be reusable because they're no longer locked away within a described block

87
00:05:10.560 --> 00:05:12.780
here where no other test can access them.

88
00:05:13.110 --> 00:05:13.530
Perfect.

89
00:05:13.710 --> 00:05:18.480
So now we have a utils file and in the very next lesson we can apply it to our getters test suite.

90
00:05:18.690 --> 00:05:19.320
I'll see you there.
