1
00:00:00,990 --> 00:00:01,730
Okay.

2
00:00:01,740 --> 00:00:08,640
So now we have a back end end point on JSON server that will return an array of spotlight objects to

3
00:00:08,640 --> 00:00:08,880
us.

4
00:00:09,180 --> 00:00:15,060
The next thing I want to do is create a component where I'm going to make the actual API request to

5
00:00:15,060 --> 00:00:20,490
get that information, and that will lead us to a new problem that we'll try to solve using the new

6
00:00:20,490 --> 00:00:23,100
slot features that we'll talk about in this section.

7
00:00:23,460 --> 00:00:31,410
So in my source components folder in job search, I'm going to create a new component called Spotlight

8
00:00:31,410 --> 00:00:32,130
Dot View.

9
00:00:33,550 --> 00:00:34,000
All right.

10
00:00:34,240 --> 00:00:39,670
And as always, we'll provide a template and then we'll provide a script section as well.

11
00:00:40,090 --> 00:00:45,280
And for now, in my template, I'm just going to begin with an unordered list, and we'll figure out

12
00:00:45,280 --> 00:00:46,780
what to populate it with later.

13
00:00:47,050 --> 00:00:52,140
The idea, of course, is that our spotlight sections are cards, represent list items.

14
00:00:52,150 --> 00:00:55,600
It is a list of advertisements for the company, basically.

15
00:00:55,780 --> 00:00:58,480
So semantically it makes sense to place them in a list.

16
00:00:58,930 --> 00:01:04,390
Okay, so let's now wire up the API request and then we'll come back to the template in just a moment.

17
00:01:04,780 --> 00:01:11,200
So here I'm going to export default a JavaScript object, and we're going to give it a name and the

18
00:01:11,200 --> 00:01:12,130
name will be Spotlight.

19
00:01:12,940 --> 00:01:18,670
And in order to store our actual data from the backend, I'm going to create a local piece of component

20
00:01:18,670 --> 00:01:19,120
data.

21
00:01:19,390 --> 00:01:21,630
So we're not going to worry about something like View X here.

22
00:01:21,640 --> 00:01:25,300
We're going to go back to the basic principles we learned about at the beginning of the course.

23
00:01:25,510 --> 00:01:28,000
We're going to store this data in this component locally.

24
00:01:28,300 --> 00:01:32,950
So I will define a data method and my data method will return an object.

25
00:01:33,940 --> 00:01:36,220
And here's where we configure the components data.

26
00:01:36,520 --> 00:01:42,640
And so I'm going to have a spotlight's property and I'm going to set it to an empty array.

27
00:01:42,940 --> 00:01:49,570
This is the exact same protocol or pattern that we did earlier when we were getting our jobs in a component.

28
00:01:49,720 --> 00:01:55,630
We start off with an empty array, then we make the API request, and when we get our actual valid array

29
00:01:55,630 --> 00:02:01,000
of objects, we're simply going to overwrite the local component data with the valid array.

30
00:02:01,030 --> 00:02:05,560
Our component will re render and do something with that new array of actual objects, but we have to

31
00:02:05,560 --> 00:02:07,240
provide some kind of starter value.

32
00:02:07,360 --> 00:02:08,960
So we're going to start with an empty array.

33
00:02:09,460 --> 00:02:14,230
The next thing I want to do is to make the actual request and a good place to do that is in the mounted

34
00:02:14,230 --> 00:02:16,390
lifecycle hook or the mounted method.

35
00:02:16,690 --> 00:02:23,200
So right here after data, I'll define that mounted method and here's where we want to make our request.

36
00:02:23,560 --> 00:02:29,530
So as a reminder of how we do this, in each development environment, we have a environment variable

37
00:02:29,530 --> 00:02:31,480
called view app API URL.

38
00:02:31,780 --> 00:02:34,510
So I'm going to assign it to a constant called based URL.

39
00:02:35,760 --> 00:02:41,970
And we can get that from process dot EMV, dot view app API URL.

40
00:02:42,240 --> 00:02:48,030
And as a reminder, we defined all of those various values for this environment variable in these three

41
00:02:48,030 --> 00:02:51,090
files right here at our top level are EMV files.

42
00:02:51,390 --> 00:02:53,370
So this will give me a base URL.

43
00:02:53,610 --> 00:03:01,560
For example, in development, I'm going to get the localhost 3000 URL which represents the port for

44
00:03:01,560 --> 00:03:03,870
my JSON server NPM package.

45
00:03:04,170 --> 00:03:04,470
Right.

46
00:03:04,800 --> 00:03:06,120
So that's just going to get this thing.

47
00:03:06,120 --> 00:03:10,980
And then of course, to the end of that, I want to concatenate the actual endpoint we defined in the

48
00:03:10,980 --> 00:03:13,220
previous lesson, which is spotlights.

49
00:03:13,560 --> 00:03:19,020
So my URL right here is going to be the combination of base URL plus spotlight.

50
00:03:19,170 --> 00:03:25,320
So I'm going to use S6 template strings and I'm going to interpolate the value of base URL, whatever

51
00:03:25,320 --> 00:03:28,050
it happens to be, and then slash spikes.

52
00:03:29,460 --> 00:03:32,640
And again, just to make this all stick and make sure it's making sense.

53
00:03:32,640 --> 00:03:37,860
As a reminder in our DB that Jason followed, here is where we defined a slash spotlight's endpoint.

54
00:03:37,980 --> 00:03:39,390
That's why we can hit that endpoint.

55
00:03:39,870 --> 00:03:42,240
All right, so slash spotlights is the URL.

56
00:03:42,240 --> 00:03:45,240
Now we need to actually make a request to that URL.

57
00:03:45,390 --> 00:03:47,610
We're going to do that with the Axios library.

58
00:03:47,880 --> 00:03:55,590
So here in my script section before my export, I'm going to import Axios from Axios and right here

59
00:03:55,590 --> 00:03:59,460
I'm going to do Axios got get providing a URL.

60
00:03:59,910 --> 00:04:04,110
Now as a reminder, this method returns a promise.

61
00:04:04,110 --> 00:04:07,260
So I need to await that promise until it resolves.

62
00:04:07,500 --> 00:04:12,060
And in order to use a weight here, I need to also make my mounted method async.

63
00:04:12,900 --> 00:04:13,590
So there we go.

64
00:04:13,800 --> 00:04:20,100
This is going to give me back the Axios response object so I can assign it to a constant call response.

65
00:04:20,670 --> 00:04:25,560
And as a reminder, in order to get the actual data from that response, what the backend actually gives

66
00:04:25,560 --> 00:04:28,950
to us, we need to access a property on this object called data.

67
00:04:29,250 --> 00:04:34,620
So a response, that data will actually get us the array of two spotlight objects that we defined in

68
00:04:34,620 --> 00:04:36,480
DB that JSON in the previous lesson.

69
00:04:36,780 --> 00:04:39,480
Once I have that array of objects, what do I want to do?

70
00:04:39,480 --> 00:04:42,120
I want to overwrite my spotlight's data array.

71
00:04:42,360 --> 00:04:47,790
So I'm going to reference this that spotlights and overwrite my empty array with my new array.

72
00:04:48,480 --> 00:04:51,360
Okay, so what do I want to do in my template?

73
00:04:51,360 --> 00:04:56,490
I want to iterate over my spotlight's array and whenever we iterate over an array we should know that

74
00:04:56,490 --> 00:05:01,920
a good option is DV for directive and that will work great because when the component starts up we're

75
00:05:01,920 --> 00:05:05,400
just going to iterate over an empty array, so we're not going to render anything to the template.

76
00:05:05,640 --> 00:05:10,860
And then when the component updates the spotlight's data property with an array of two spotlights or

77
00:05:10,860 --> 00:05:16,830
three or however many of the back and returns, then the component will re render and iterate over that

78
00:05:16,830 --> 00:05:20,460
new array and thus render new HTML elements to the template.

79
00:05:21,210 --> 00:05:26,130
So right here inside my unordered list, I'm going to create an ally a list item.

80
00:05:26,400 --> 00:05:28,710
And how how many allies do I want to create?

81
00:05:28,860 --> 00:05:33,060
As many as I have in elements in my spotlight's array.

82
00:05:33,060 --> 00:05:38,970
If I have two, then I want to allies etc. So I'm going to use the V for directive and I'm going to

83
00:05:38,970 --> 00:05:42,540
iterate over each spotlight in spotlights.

84
00:05:42,540 --> 00:05:44,880
I can reference my data property in line like so.

85
00:05:45,120 --> 00:05:50,400
And as a reminder, whenever we use the V for directive, we have to provide a key prop and we have

86
00:05:50,400 --> 00:05:56,340
to provide a unique identifier so you can distinguish what that value or distinguish what that element

87
00:05:56,340 --> 00:05:57,960
is from all the other allies.

88
00:05:58,260 --> 00:06:03,150
And as a reminder, we want to bind to that because we need some kind of unique identifier and we're

89
00:06:03,150 --> 00:06:07,890
going to use the ID property on each spotlight object that we are iterating over.

90
00:06:08,190 --> 00:06:14,400
So I'm going to do spotlights dot ID again, as a reminder in our debate that JSON file, each spotlight

91
00:06:14,400 --> 00:06:15,930
object has an ID value.

92
00:06:16,140 --> 00:06:18,330
I think the first one is one, the second one is two.

93
00:06:18,600 --> 00:06:23,100
And in order to reference a dynamic object property, we have to use the v bind syntax here.

94
00:06:23,100 --> 00:06:27,360
Otherwise view will think that we are providing an actual string of spotlight ID.

95
00:06:27,930 --> 00:06:31,410
All right, so here is where we run into a problem.

96
00:06:31,410 --> 00:06:34,890
And I want you to to pause for a moment and think about what this problem is.

97
00:06:35,400 --> 00:06:41,790
We want the parent component that's going to render spotlight to be able to customize the HTML and the

98
00:06:41,790 --> 00:06:43,950
CC for any given card.

99
00:06:44,310 --> 00:06:44,640
Right.

100
00:06:45,330 --> 00:06:51,270
So if we want the parent to provide some kind of custom dynamic h html, the first thought that comes

101
00:06:51,270 --> 00:06:54,840
to mind is a slot and that's absolutely the correct option.

102
00:06:54,840 --> 00:06:57,640
So I'm going to put a slot here, right?

103
00:06:57,660 --> 00:07:03,120
I'm going to create a slot component because I want the parent to inject dynamic HTML here to represent

104
00:07:03,120 --> 00:07:04,290
each individual card.

105
00:07:04,530 --> 00:07:06,870
We're going to keep the commonality of a list.

106
00:07:07,110 --> 00:07:11,970
We're going to keep the semantic logic of a list item, but we're going to allow the parent to define

107
00:07:11,970 --> 00:07:13,980
what each list item actually consists of.

108
00:07:13,980 --> 00:07:15,630
Is it going to be a long card?

109
00:07:15,630 --> 00:07:16,770
Is it going to be a short card?

110
00:07:16,890 --> 00:07:18,540
Is the image going to be in the background?

111
00:07:18,540 --> 00:07:19,770
Is the image going to be on the top?

112
00:07:20,010 --> 00:07:23,340
We're going to let the parent define it so that the parent can customize this.

113
00:07:23,340 --> 00:07:23,610
Right.

114
00:07:24,300 --> 00:07:26,400
There's just one bit of a problem here.

115
00:07:26,850 --> 00:07:33,840
In order to render that optimal, the parent needs some piece of information from the Spotlight object.

116
00:07:33,840 --> 00:07:34,200
Right.

117
00:07:34,470 --> 00:07:35,070
Let me open up.

118
00:07:35,120 --> 00:07:35,660
My delight.

119
00:07:35,660 --> 00:07:37,580
Jason followed to remind us one more time.

120
00:07:38,680 --> 00:07:43,660
So when a parent component, let's say I'm just going to do it right here so we can create this little

121
00:07:43,660 --> 00:07:44,950
space for ourselves.

122
00:07:45,070 --> 00:07:47,110
And my goal here is not to confuse you.

123
00:07:47,110 --> 00:07:49,810
We can imagine that line number nine is the parent component.

124
00:07:50,020 --> 00:07:52,690
It's going to render a spotlight component.

125
00:07:52,690 --> 00:07:55,000
And right here is where it's going to provide the slot content.

126
00:07:55,360 --> 00:08:01,150
Let's say in one parent component, we want to do an H2 and let's say in another parent component somewhere

127
00:08:01,150 --> 00:08:05,320
else in our app, we want to reuse the spotlight component and we want to provide an H3.

128
00:08:05,500 --> 00:08:06,880
That is the beauty of slots.

129
00:08:07,090 --> 00:08:10,600
The beauty is that we can provide whatever HTML content we want.

130
00:08:10,960 --> 00:08:15,670
The problem is, let's say we want to put the spotlight's name or title right here.

131
00:08:15,940 --> 00:08:21,100
So we want this piece of information, cloud, engineering or executive leadership for the parent to

132
00:08:21,100 --> 00:08:24,250
be able to place within the H2 or the H3.

133
00:08:24,610 --> 00:08:31,690
The problem is that piece of text lives in our spotlight object and our parent component that's going

134
00:08:31,690 --> 00:08:37,930
to be rendering the spotlight component doesn't have access to this object, this one right here, because

135
00:08:37,930 --> 00:08:41,710
it's only available in our actual spotlight component as we're iterating over it.

136
00:08:42,310 --> 00:08:42,580
Right.

137
00:08:42,670 --> 00:08:49,630
We have provided a place for the parent to inject dynamic HTML, but that dynamic HTML needs the spotlight

138
00:08:49,630 --> 00:08:50,020
title.

139
00:08:50,020 --> 00:08:55,480
It needs to literally be able to put the title right here that this spotlight object is holding, which

140
00:08:55,480 --> 00:08:59,110
it will not have access to, because this is what the parent is going to be rendering.

141
00:08:59,110 --> 00:09:02,110
It doesn't have access to this spotlight object right here.

142
00:09:02,470 --> 00:09:08,020
So we need a way to pass this piece of information up to the parent so the parent can say, okay, I

143
00:09:08,020 --> 00:09:12,100
have a spotlight object and as a title I can render it here in my age two.

144
00:09:12,340 --> 00:09:15,940
And another parent that wants to render in the H3 can do the exact same thing.

145
00:09:16,150 --> 00:09:18,040
It's going to have access to the spotlight object.

146
00:09:18,250 --> 00:09:22,300
It can put its contents within an age three, customize it with whatever H.

147
00:09:22,390 --> 00:09:26,530
Miller says it wants, but still have access to that piece of data.

148
00:09:26,950 --> 00:09:32,740
So how can we provide this piece of information to the parent component that is rendering our our spotlight

149
00:09:32,950 --> 00:09:33,400
component?

150
00:09:33,640 --> 00:09:36,280
We do that using slot props.

151
00:09:36,520 --> 00:09:40,210
And it's kind of a pretty simple idea on this slot component.

152
00:09:40,210 --> 00:09:46,060
We define whatever props we want, and those props are going to be available to the parent component

153
00:09:46,060 --> 00:09:48,550
that renders this spotlight component.

154
00:09:49,360 --> 00:09:54,610
The parent component that's going to render the component with slots is going to receive access to whatever

155
00:09:54,610 --> 00:09:56,740
props we define right here in line.

156
00:09:57,100 --> 00:10:03,880
So for example, if I define a value like nonsense equals five, the parent component that renders spotlight

157
00:10:03,880 --> 00:10:05,710
will have access to nonsense.

158
00:10:05,920 --> 00:10:10,360
I'm going to show you how to get access to that in the next lesson, but just know that any props that

159
00:10:10,360 --> 00:10:12,700
we define here the parent will have access to.

160
00:10:13,450 --> 00:10:19,450
So what I propose is we define a slot prop, a prop called Spotlight.

161
00:10:19,810 --> 00:10:24,490
And of course, what I want to pass up is going to be this spotlight object that we're iterating over

162
00:10:24,490 --> 00:10:25,600
this thing right here.

163
00:10:25,990 --> 00:10:30,490
Now, if I simply did spotlight like so, this would not work as always in view.

164
00:10:30,640 --> 00:10:35,080
This would indeed give the parent a spotlight prop or access to that information.

165
00:10:35,260 --> 00:10:39,010
But Vue is going to think that we're providing a literal string of spotlight.

166
00:10:39,220 --> 00:10:40,390
We don't want to do that.

167
00:10:40,390 --> 00:10:44,170
We want to give a dynamic reference to this object that we are iterating over.

168
00:10:44,410 --> 00:10:46,390
So we need to use the V bind syntax.

169
00:10:46,570 --> 00:10:52,120
So right here v bind colon, of course s lens is going to complain and prefer we use the shortcut,

170
00:10:52,120 --> 00:10:53,050
which is totally fine.

171
00:10:53,200 --> 00:10:55,090
So this is the syntax we're going to use.

172
00:10:56,230 --> 00:10:56,590
Okay.

173
00:10:56,710 --> 00:10:59,950
I realize that this can be totally confusing for several reasons.

174
00:10:59,980 --> 00:11:02,710
Number one, we don't see the other half of the equation.

175
00:11:02,710 --> 00:11:05,350
We don't see the parent that's going to be using this data.

176
00:11:05,440 --> 00:11:07,660
We'll see that very shortly in the next lesson.

177
00:11:07,960 --> 00:11:10,650
But the other part that makes it confusing is we're using a spot.

178
00:11:10,660 --> 00:11:12,970
We're using the word spotlight to describe a lot of things.

179
00:11:13,180 --> 00:11:17,290
Spotlight is simultaneously the name of our component right here.

180
00:11:17,410 --> 00:11:22,870
It's also the variable name that we represent for the iteration and also the name of the prop that we

181
00:11:22,870 --> 00:11:24,010
are defining on our slot.

182
00:11:24,430 --> 00:11:25,880
And it doesn't have to be this way.

183
00:11:25,900 --> 00:11:26,080
Right.

184
00:11:26,090 --> 00:11:28,840
We can define whatever names we want.

185
00:11:28,840 --> 00:11:29,590
Right here.

186
00:11:29,800 --> 00:11:30,700
Right here.

187
00:11:30,730 --> 00:11:30,990
Right.

188
00:11:31,000 --> 00:11:31,900
That's all up to us.

189
00:11:32,050 --> 00:11:36,220
I'm just using this because I think it's the most common pattern you're going to see in the real world.

190
00:11:36,430 --> 00:11:39,010
We have an array of something called spotlights.

191
00:11:39,130 --> 00:11:44,470
We are iterating over each individual spotlight object, and we want to pass that object right here

192
00:11:44,620 --> 00:11:45,820
to the parent some way.

193
00:11:45,970 --> 00:11:47,890
And why would we give this another name?

194
00:11:47,890 --> 00:11:48,090
Right.

195
00:11:48,100 --> 00:11:50,920
We can give this something like, you know, information.

196
00:11:51,190 --> 00:11:56,110
And the parent will have access to a piece of prop data called information that's going to be equal

197
00:11:56,110 --> 00:11:56,920
to the spotlight object.

198
00:11:57,100 --> 00:12:01,600
But typically, that actually makes it more confusing because we're providing two names for the same

199
00:12:01,600 --> 00:12:01,900
thing.

200
00:12:02,080 --> 00:12:04,450
This is a spotlight object, so it makes sense.

201
00:12:04,450 --> 00:12:08,810
The parent is going to access this piece of information eventually via the name Spotlight.

202
00:12:08,830 --> 00:12:10,000
That is what it represents.

203
00:12:10,270 --> 00:12:12,670
But I understand how it can be pretty confusing, right?

204
00:12:12,970 --> 00:12:19,570
So in short, in this component, we are going to allow the parent to render a dynamic piece of HTML

205
00:12:19,570 --> 00:12:20,410
right here.

206
00:12:20,620 --> 00:12:25,840
And that dynamic piece of HTML is going to be able to access a piece of information called Spotlight,

207
00:12:26,050 --> 00:12:31,150
which will be equal to the JavaScript object that we are iterating over in each individual iteration

208
00:12:31,270 --> 00:12:32,020
right here.

209
00:12:32,860 --> 00:12:33,160
All right.

210
00:12:33,160 --> 00:12:38,140
So in the very first iteration, we're going to inject the parents content and we're going to give it

211
00:12:38,140 --> 00:12:39,220
this object right here.

212
00:12:39,340 --> 00:12:44,470
And then in the second V4 iteration, we're going to inject the parents content as well, but give it

213
00:12:44,470 --> 00:12:47,470
a different spotlight object, which is this one right here.

214
00:12:47,980 --> 00:12:53,710
It's actually a very interesting design partner because because we've put our slot within a V for however

215
00:12:53,710 --> 00:12:55,870
many allies we have.

216
00:12:55,960 --> 00:13:00,940
That's however many times we're going to replicate the HTML content that our parent is going to give

217
00:13:00,940 --> 00:13:01,240
to us.

218
00:13:01,250 --> 00:13:01,510
Right.

219
00:13:01,720 --> 00:13:08,170
If we have five spotlights being rendered, then we're going to reuse the parent's custom HTML slot

220
00:13:08,170 --> 00:13:09,640
of content five times.

221
00:13:09,850 --> 00:13:15,210
But each time we reuse it, we need it to have dynamic text injected from the spotlight object.

222
00:13:15,220 --> 00:13:18,820
So we need to pass that object up right here, and that's what we're doing.

223
00:13:19,090 --> 00:13:21,430
We're going to see how this all connects to the parent component.

224
00:13:21,580 --> 00:13:22,720
In the very next lesson.
