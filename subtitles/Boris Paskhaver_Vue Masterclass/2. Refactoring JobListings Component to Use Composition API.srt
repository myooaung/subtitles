1
00:00:00,360 --> 00:00:01,200
Okay.

2
00:00:01,200 --> 00:00:05,310
So the next component that I want us to focus on is job listings.

3
00:00:05,550 --> 00:00:10,530
It's going to take us a couple of lessons to refactor this component, to use the composition API,

4
00:00:10,770 --> 00:00:12,990
because it has a lot of things going on inside it.

5
00:00:13,320 --> 00:00:18,300
So as a quick reminder, this is the component that renders all of the job listings on the right hand

6
00:00:18,300 --> 00:00:18,720
side.

7
00:00:18,930 --> 00:00:22,470
It gets that from display jobs, which we'll talk about in just a second.

8
00:00:22,740 --> 00:00:28,620
And this is also the component that renders the buttons on the bottom that navigate to either the previous

9
00:00:28,620 --> 00:00:30,300
page or the next page.

10
00:00:30,570 --> 00:00:34,470
As we can see when we scroll down, there is a lot of logic to this component.

11
00:00:34,710 --> 00:00:36,330
We're using a getter right here.

12
00:00:36,420 --> 00:00:41,210
We have a whole bunch of computed properties to calculate the current page, the previous page number,

13
00:00:41,230 --> 00:00:47,280
the next page number, and then the display jobs, which as a reminder, is the ten jobs that depend

14
00:00:47,280 --> 00:00:49,470
on the page that we're on.

15
00:00:49,650 --> 00:00:55,260
So even after our filter jobs getter gets those jobs, we then narrow them down to the right.

16
00:00:55,260 --> 00:00:55,680
Ten.

17
00:00:55,920 --> 00:00:57,870
On the first page we show the first ten.

18
00:00:58,110 --> 00:01:01,410
On the second page we show 11 to 20 and so on.

19
00:01:01,770 --> 00:01:08,760
Then we also have a async mounted lifecycle hook where we're calling a method called fetch jobs.

20
00:01:08,970 --> 00:01:12,270
And Fetch Jobs is actually a View X action.

21
00:01:12,270 --> 00:01:16,560
So we haven't talked about how to deal with actions yet in the composition API.

22
00:01:16,770 --> 00:01:21,990
As a reminder, an action is basically an asynchronous method that does some kind of logic, and then

23
00:01:21,990 --> 00:01:25,120
when that async logic is done, it commits a mutation.

24
00:01:25,350 --> 00:01:31,320
So in this case, this action in view X makes the actual async request to fetch our jobs, and then

25
00:01:31,320 --> 00:01:35,010
it commits a separate mutation to save those jobs to the View X Store.

26
00:01:35,310 --> 00:01:38,520
So we're going to replace all of this logic using the composition API.

27
00:01:38,760 --> 00:01:43,890
And in this lesson, I want to begin with this section right here, our mounted lifecycle hook and the

28
00:01:43,890 --> 00:01:45,720
action that it is dispatching.

29
00:01:46,020 --> 00:01:49,800
So right here, as always, we're going to comment out everything we have.

30
00:01:51,430 --> 00:01:53,670
And then oops not delete the comment.

31
00:01:53,680 --> 00:01:55,750
I have to be very careful with my silly fingers.

32
00:01:56,050 --> 00:01:59,050
Okay, so right here I'm going to define my setup method.

33
00:02:00,140 --> 00:02:02,990
And we know that we're going to need a couple of things.

34
00:02:02,990 --> 00:02:04,940
First up, in order to talk to the store.

35
00:02:05,150 --> 00:02:09,410
We're going to need to get the view store, which we can get using the use store function.

36
00:02:09,770 --> 00:02:15,420
And then we're also going to need to run something on component mount.

37
00:02:15,440 --> 00:02:20,030
So we're going to need to import the same function we used in the previous lesson, which is on Mount

38
00:02:20,030 --> 00:02:20,210
It.

39
00:02:20,540 --> 00:02:23,210
So at the very top, I'm going to import.

40
00:02:25,340 --> 00:02:29,780
On mounted and that's going to come from view that is a core view function.

41
00:02:30,140 --> 00:02:34,610
And then on the line below where I'm currently importing map actions and map getters, we're no longer

42
00:02:34,610 --> 00:02:35,330
using those.

43
00:02:35,330 --> 00:02:39,290
So I'm just going to remove that and instead I'm going to import use store.

44
00:02:40,520 --> 00:02:46,040
All right, so here in the body of my setup method, I'm going to get access to my store by invoking

45
00:02:46,040 --> 00:02:46,640
use store.

46
00:02:48,490 --> 00:02:54,280
And then the question is, what do we pass into our on mounted function invocation?

47
00:02:54,280 --> 00:02:59,170
So here is where we pass the function that we want the component to run.

48
00:02:59,590 --> 00:03:05,710
Whenever it mounts in this case, we want the component to do is to run an action or dispatch an action

49
00:03:05,710 --> 00:03:08,770
is the technical term and that action is called fetch jobs.

50
00:03:09,070 --> 00:03:14,410
So as a quick, quick reminder, because I realize that might be helpful, here is the async fetch jobs

51
00:03:14,410 --> 00:03:15,940
action that we want to dispatch.

52
00:03:16,090 --> 00:03:18,520
It's going to get the jobs and it's going to commit the mutation.

53
00:03:18,940 --> 00:03:25,540
So you may recall that map actions here, which gives us a method called fetch jobs on the component

54
00:03:25,870 --> 00:03:27,010
that is running the action.

55
00:03:27,250 --> 00:03:32,590
You may recall that map actions is a little bit of syntactic sugar over something we're able to do by

56
00:03:32,590 --> 00:03:37,840
ourselves in the same way that map getters makes it super easy to define a getter in the same way that

57
00:03:38,380 --> 00:03:40,810
map states does, not mutations does the same thing.

58
00:03:41,050 --> 00:03:47,020
Map actions behind the scenes is calling a method on the store called dispatch, and dispatch accepts

59
00:03:47,020 --> 00:03:52,840
an argument of the actual mutation we want to run or I'm sorry, the action that we want to run, because

60
00:03:52,840 --> 00:03:57,850
dispatching is for asynchronous actions while committing is for synchronous mutations.

61
00:03:57,850 --> 00:03:59,830
That's the difference between actions and mutations.

62
00:04:00,190 --> 00:04:05,110
So we use the dispatch method for an action and the name of our action here is fetch jobs.

63
00:04:05,320 --> 00:04:08,170
And we already have the constant imported for that action.

64
00:04:08,560 --> 00:04:11,710
So this is basically what I want to do.

65
00:04:11,710 --> 00:04:15,880
Whenever the component mounts, I want to dispatch the async action to the View Store.

66
00:04:16,060 --> 00:04:21,250
The book store will take care of running that async operation, fetching our jobs, saving it, and

67
00:04:21,250 --> 00:04:25,930
then those jobs are going to come back to this component once we get access to them through filter jobs.

68
00:04:26,140 --> 00:04:30,910
So what I'm going to do is store all of this in a function.

69
00:04:31,150 --> 00:04:35,620
So right here I'm going to declare an error function in line called fetch jobs.

70
00:04:37,080 --> 00:04:41,100
I'm just going to make it an arrow function in line and I'm going to implicitly return the value returned

71
00:04:41,100 --> 00:04:41,580
by this.

72
00:04:41,730 --> 00:04:43,890
Not that we need it, but it doesn't really hurt.

73
00:04:43,890 --> 00:04:45,840
Doesn't offer any advantage or disadvantage.

74
00:04:46,110 --> 00:04:52,020
The point is that I now have a named arrow function called fetch jobs, and that's what I want to run

75
00:04:52,020 --> 00:04:53,520
whenever job listings mounts.

76
00:04:53,760 --> 00:04:56,910
So I'm simply going to provide fetch jobs here in line.

77
00:04:56,940 --> 00:04:58,230
We do not need to invoke it.

78
00:04:58,500 --> 00:05:04,440
Just provide the function or the procedure that you want view to run whenever it mounts the component.

79
00:05:04,800 --> 00:05:07,950
So once again, if you are going to mount the component, it's going to run fetch jobs.

80
00:05:07,950 --> 00:05:09,750
Fetch jobs is going to dispatch an action.

81
00:05:09,900 --> 00:05:12,810
The action will take care of the actual asynchronous API request.

82
00:05:13,260 --> 00:05:13,610
All right.

83
00:05:13,610 --> 00:05:14,880
So this brings us a little bit forward.

84
00:05:14,890 --> 00:05:20,610
So with that, we are good to remove our former mounted lifecycle hook and our method.

85
00:05:21,150 --> 00:05:22,470
We no longer need that logic.

86
00:05:22,650 --> 00:05:27,180
And in the very next lesson, we will continue chipping away at this and removing some of this former

87
00:05:27,180 --> 00:05:31,350
options API functionality and replacing it instead with our composition API.

88
00:05:31,590 --> 00:05:32,460
So I will see you there.
