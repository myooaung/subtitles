1
00:00:00,270 --> 00:00:01,140
All right.

2
00:00:01,140 --> 00:00:07,140
So in the previous lesson, we learned how to use Axios to make a request to an endpoint, specifically

3
00:00:07,140 --> 00:00:08,340
our jobs end point.

4
00:00:08,520 --> 00:00:14,730
So in this lesson, we can wire up the same Axios logic, but within an actual view component.

5
00:00:15,030 --> 00:00:20,490
Before we jump into VS code though, I do want to double check that you have two things running and

6
00:00:20,490 --> 00:00:23,160
they're both required in order for this lesson to work.

7
00:00:23,340 --> 00:00:29,580
Number one, you need your JSON server running and you can start it up with the NPM run back end command

8
00:00:29,790 --> 00:00:35,070
and then in a separate tab, you're also going to need to run your view server and you can run that

9
00:00:35,070 --> 00:00:37,110
with the command, NPM, run, serve.

10
00:00:37,320 --> 00:00:41,400
Both of these are independent processes and they both must be running.

11
00:00:41,580 --> 00:00:47,250
We need to run the View app to see it in our browser and we need to run our fake backend so that our

12
00:00:47,250 --> 00:00:51,090
view app can make the request and successfully get data back.

13
00:00:51,360 --> 00:00:56,700
So if at any point anything breaks, it's likely because one of these processes is broken and your code

14
00:00:56,700 --> 00:00:57,840
for one of them is messed up.

15
00:00:58,080 --> 00:01:03,390
This does double check that everything is correct and make sure moving forward for the job results page

16
00:01:03,390 --> 00:01:07,170
in order to see anything for all of the upcoming lessons that deal with that page.

17
00:01:07,290 --> 00:01:13,050
We do need that backend API running, so we always need that JSON server running.

18
00:01:13,200 --> 00:01:18,660
If you're coming back to this course another day and restarting your learning, remember you have to

19
00:01:18,660 --> 00:01:20,730
restart both of these services moving forward.

20
00:01:21,030 --> 00:01:21,330
All right.

21
00:01:21,330 --> 00:01:25,440
I'm going to mention in this lesson and maybe casually remind you afterwards, but just keep that in

22
00:01:25,440 --> 00:01:25,770
mind.

23
00:01:25,920 --> 00:01:28,080
We need these two dependencies now, always running.

24
00:01:28,440 --> 00:01:28,830
Okay.

25
00:01:28,920 --> 00:01:37,080
With that said, let us go back into vs code and the component I want to open is job listings, dot

26
00:01:37,080 --> 00:01:37,860
view plural.

27
00:01:38,280 --> 00:01:44,760
So as a reminder, this is the component that is kind of the parent component that renders when we get

28
00:01:44,760 --> 00:01:46,620
to slash jobs, slash results.

29
00:01:46,740 --> 00:01:50,580
Technically, it's the view component that renders this one, but pretty much the same idea.

30
00:01:50,880 --> 00:01:53,700
And what this component does is it renders in ordered list.

31
00:01:53,850 --> 00:01:57,300
And right now we have three job listing components being rendered.

32
00:01:57,600 --> 00:02:04,050
Our ultimate intent here, of course, is to render a job listing component for every job that we get

33
00:02:04,050 --> 00:02:04,530
from the back.

34
00:02:04,920 --> 00:02:09,210
So if we get ten jobs from the server, then we render ten job listings.

35
00:02:09,210 --> 00:02:13,830
If we get 55 jobs from the server, then we render 55 job listings.

36
00:02:13,950 --> 00:02:19,770
And of course, ultimately, we want the data within the job listing the title, the location, the

37
00:02:19,770 --> 00:02:26,490
qualifications, etc. to be provided by the data from the backend rather than hardcoded as it is right

38
00:02:26,490 --> 00:02:26,790
now.

39
00:02:26,820 --> 00:02:31,050
Now we'll come back to that problem later, but that is the ultimate intent of what we're trying to

40
00:02:31,050 --> 00:02:31,440
do here.

41
00:02:31,710 --> 00:02:36,540
So we want to import our access library that is fundamentally JavaScript code.

42
00:02:36,540 --> 00:02:38,760
So it needs to live within our script section.

43
00:02:39,030 --> 00:02:44,160
So right here I'm going to import my Axios library, import Axios from Axios.

44
00:02:45,180 --> 00:02:47,100
Remember that web pack and view SQL?

45
00:02:47,100 --> 00:02:53,310
I do transpire this file view component so we can use the modern import syntax of the import keyword.

46
00:02:53,430 --> 00:02:59,390
And here we are importing the Axios object from the Axios library as a general best practice as well.

47
00:02:59,400 --> 00:03:05,520
I like to put all of my NPM package imports above my local project related files.

48
00:03:05,730 --> 00:03:11,520
So because this component belongs to me and Axios is a separate dependency that is part of the NPM ecosystem,

49
00:03:11,670 --> 00:03:16,080
I try to structure those above my own files, which is job listing.

50
00:03:16,440 --> 00:03:22,320
Okay, so now we have Axios imported and we're eventually going to make a request to fetch an array

51
00:03:22,320 --> 00:03:22,800
of jobs.

52
00:03:23,010 --> 00:03:25,620
Where do we want to store that array of jobs?

53
00:03:25,830 --> 00:03:29,790
Well, we're going to need some kind of component data in order to store those jobs.

54
00:03:29,940 --> 00:03:33,600
So I propose that we create a data property called jobs.

55
00:03:33,900 --> 00:03:36,480
So right below components, I create my data method.

56
00:03:37,470 --> 00:03:42,870
And as always, this method will return a JavaScript object and these object properties will be available

57
00:03:42,870 --> 00:03:43,830
to use in my template.

58
00:03:44,100 --> 00:03:49,110
And I want to create a property called Jobs and we need to provide it some kind of starter state.

59
00:03:49,380 --> 00:03:51,030
How are we going to kick it off?

60
00:03:51,300 --> 00:03:56,010
And because remember, when this component mounts, it's going to need to wait a second or two while

61
00:03:56,010 --> 00:03:57,960
we get the jobs from our backend.

62
00:03:58,200 --> 00:04:03,720
So jobs needs to be something in the meantime, as our template uses this property, otherwise everything

63
00:04:03,720 --> 00:04:04,170
will break.

64
00:04:04,470 --> 00:04:08,250
Well, the most logical thing to make here right now is an empty array.

65
00:04:09,090 --> 00:04:11,070
So it's going to start off as an empty array.

66
00:04:11,250 --> 00:04:17,340
And then when we get the actual array of job results from our API request, we're going to overwrite

67
00:04:17,340 --> 00:04:19,980
this jobs data property with the new array.

68
00:04:20,310 --> 00:04:24,720
So it makes sense to start with the exact same data type that you're eventually going to need, but

69
00:04:24,720 --> 00:04:27,810
sort of the most simplified barebones version of it, right?

70
00:04:27,990 --> 00:04:31,740
So if you're going to eventually get some kind of string, you start off with an empty string, right?

71
00:04:31,950 --> 00:04:35,580
If you're eventually going to get some kind of array, you start out with an empty array, basically

72
00:04:35,580 --> 00:04:40,710
an empty container or vessel for the eventual data type that you expect to receive, which for us will

73
00:04:40,710 --> 00:04:41,910
be an array of jobs.

74
00:04:42,180 --> 00:04:42,540
All right.

75
00:04:42,810 --> 00:04:49,740
Now the question becomes, where are we going to make the API request to get this backend data?

76
00:04:50,040 --> 00:04:56,130
Well, you may recall that every Vue component has lifecycle hooks and that represents a moment in time

77
00:04:56,130 --> 00:04:57,690
in the components existence.

78
00:04:57,990 --> 00:04:59,940
So the recommended lifecycle hook in.

79
00:04:59,970 --> 00:05:03,120
Which we want to make API requests is the mounted hook.

80
00:05:03,420 --> 00:05:09,510
So you may recall the way we intercept a lifecycle hook in order to execute extra code during that process

81
00:05:09,660 --> 00:05:12,990
is by simply writing that lifecycle method name in line.

82
00:05:13,200 --> 00:05:15,750
So in this case, our lifecycle hook is called mounted.

83
00:05:15,750 --> 00:05:16,590
It is a method.

84
00:05:16,590 --> 00:05:20,880
So I'm going to provide my parentheses and then the method body and anything we do here.

85
00:05:21,690 --> 00:05:27,810
Vue will run after the component has initially been mounted in the browser, so added to the page in

86
00:05:27,810 --> 00:05:28,260
the DOM.

87
00:05:28,530 --> 00:05:34,020
And that will work just fine because when we initially mount the component onto our browser, it will

88
00:05:34,500 --> 00:05:40,950
kind of instantaneously, relatively appear for the user and the jobs array will be equal to an empty

89
00:05:40,960 --> 00:05:41,250
right.

90
00:05:41,430 --> 00:05:46,440
So if we are rendering a job listing for every item in the array, we're just not going to see any job

91
00:05:46,440 --> 00:05:51,000
listings for a brief second while we wait for that API request to complete.

92
00:05:51,000 --> 00:05:52,950
But the component will still be loaded.

93
00:05:52,950 --> 00:05:54,420
So it's not going to break anything.

94
00:05:54,420 --> 00:05:56,550
It's not going to be a weird user experience.

95
00:05:56,640 --> 00:06:02,220
We're still going to mount the component, get it up and running, and then when we receive the jobs,

96
00:06:02,220 --> 00:06:03,720
we're going to overwrite this array.

97
00:06:03,900 --> 00:06:07,500
The view component will re render and then display the job listings afterwards.

98
00:06:07,620 --> 00:06:13,860
So mounted after the component has been placed in the browser is a good place to to right this logic.

99
00:06:14,070 --> 00:06:19,320
The reason it's not a good idea to put it before in a previous lifecycle hook is because the component

100
00:06:19,320 --> 00:06:21,030
may not be alive yet in the browser.

101
00:06:21,150 --> 00:06:26,610
So at that point, if we are dependent on waiting for that request to complete before the component

102
00:06:26,610 --> 00:06:31,140
is even rendered in the browser, the user will simply not see anything and that typically proves to

103
00:06:31,140 --> 00:06:32,940
be a worser user experience.

104
00:06:33,270 --> 00:06:37,770
So right here, when the component is in the browser Dom, that's when we want to make the access request.

105
00:06:37,770 --> 00:06:42,420
And whenever it gets done, that's when we'll update the UI to show the user those jobs.

106
00:06:42,750 --> 00:06:45,690
So we're going to do the exact same syntax as in the previous lesson.

107
00:06:45,930 --> 00:06:48,780
We're going to use the access object and invoke the get method.

108
00:06:49,110 --> 00:06:52,770
That method expects a URL and I'm just going to write it in line as a string.

109
00:06:53,040 --> 00:07:00,330
So HTP, colon, slash and remember we're running on localhost 3000, that is our port on our local

110
00:07:00,330 --> 00:07:06,480
computer and we need to hit the jobs and point at slash jobs that is going to return a promise object

111
00:07:06,480 --> 00:07:12,180
so I can tap on a then method call and then the then method expects an arrow function.

112
00:07:12,960 --> 00:07:16,980
And of course that arrow function will receive the response object from Axios.

113
00:07:16,980 --> 00:07:21,240
That is a complex wrapper object that has a whole bunch of information about the response.

114
00:07:21,390 --> 00:07:26,640
And on that object, what I really want is the data property that's going to get me the actual response

115
00:07:26,640 --> 00:07:29,460
from the server, which is the array of job objects.

116
00:07:29,700 --> 00:07:31,650
Now what do I want to do with this data?

117
00:07:31,650 --> 00:07:34,050
I of course want to overwrite this array.

118
00:07:34,260 --> 00:07:36,210
So how can I access a data property?

119
00:07:36,210 --> 00:07:37,740
I can use the this keyword.

120
00:07:37,950 --> 00:07:44,070
So right here I'm going to access this dot jobs and I'm going to overwrite it with the data property.

121
00:07:44,280 --> 00:07:49,380
So as soon as this request completes, it can take a second, it can take half a second, then JavaScript

122
00:07:49,380 --> 00:07:54,270
is going to run this function, then it's going to override the jobs data property that will in turn

123
00:07:54,270 --> 00:07:55,550
force a component re render.

124
00:07:55,980 --> 00:07:59,460
All right, so let's double check in our browser that everything is working as expected.

125
00:08:00,330 --> 00:08:05,850
So as I navigate back to my browser and I go to my jobs page, we're not going to see any change yet

126
00:08:05,850 --> 00:08:09,000
because we're still always rendering three job listing components.

127
00:08:09,000 --> 00:08:13,020
We're not doing anything with our received data yet.

128
00:08:13,020 --> 00:08:17,010
We eventually will, but there's still other ways that we can double check that everything is working

129
00:08:17,010 --> 00:08:17,760
as expected.

130
00:08:18,090 --> 00:08:25,260
For example, I can go to my network tab and I can transition to this fetch slash tab that will show

131
00:08:25,260 --> 00:08:32,370
me any asynchronous Ajax or in other words, requests made by Axios that we can see when the page loads.

132
00:08:32,550 --> 00:08:37,590
So as I refresh this page, we should see that request go out and there it is.

133
00:08:37,590 --> 00:08:39,720
You can see the jobs request right here.

134
00:08:39,930 --> 00:08:44,790
You can see it was a 200, which is a status code that means success or okay.

135
00:08:45,060 --> 00:08:50,310
So when I click on this, you can see in the preview tab that we can see the actual response that that

136
00:08:50,310 --> 00:08:51,900
API endpoint gave to us.

137
00:08:51,900 --> 00:08:56,010
So this is the exact same thing that we have in our DB JSON file.

138
00:08:56,190 --> 00:08:59,010
This is our array of 100 job objects.

139
00:08:59,190 --> 00:08:59,540
Cool.

140
00:08:59,850 --> 00:09:00,540
So that looks good.

141
00:09:00,540 --> 00:09:05,760
We know that our browser is successfully making a request to that endpoint and furthermore, we know

142
00:09:05,760 --> 00:09:09,540
that this array of jobs should now live in our view component data.

143
00:09:09,720 --> 00:09:16,020
So if I go to my view developer tools and I go to my job results view and I go to my job listings component,

144
00:09:16,290 --> 00:09:21,930
remember it has a jobs property and here it is, here it is storing that array of 100 objects.

145
00:09:22,080 --> 00:09:27,270
Of course, each object represents a sample job and here we have a sample job and all that information.

146
00:09:27,270 --> 00:09:33,000
So we can see that we have successfully saved all of that, all of that response data into our jobs

147
00:09:33,000 --> 00:09:33,600
property.

148
00:09:33,600 --> 00:09:38,220
And it's correct, we have the array as correctly stored rather than the response object.

149
00:09:38,400 --> 00:09:42,030
So we have correctly extracted that information and that's a good step.

150
00:09:42,270 --> 00:09:47,790
Obviously, the next thing we want to do is to render a custom job listing for every one of these objects,

151
00:09:47,790 --> 00:09:49,740
and that's what we're going to do in the upcoming lessons.

152
00:09:49,830 --> 00:09:50,790
So I will see you there.
