WEBVTT
1
00:00:00.270 --> 00:00:01.110
All right.

2
00:00:01.120 --> 00:00:07.710
So we closed the last lesson off by observing a problem in our browser, and that was that each individual

3
00:00:07.710 --> 00:00:14.370
text input component was keeping track of its own data, but there was no way for it to relay that change,

4
00:00:14.550 --> 00:00:18.960
that update to its input to the parent job search form component.

5
00:00:19.350 --> 00:00:24.960
So we talked earlier about this idea of limiting events in view, and that is how we solve this exact

6
00:00:24.960 --> 00:00:30.540
problem, which is a child component, informing its parent that something has happened.

7
00:00:30.990 --> 00:00:31.260
All right.

8
00:00:31.260 --> 00:00:32.850
So let's take it one step at a time.

9
00:00:33.210 --> 00:00:37.650
Here I am in my handle input method within my text input component.

10
00:00:37.950 --> 00:00:43.890
And as I mentioned earlier, one of the advantages of using this more manual verbose approach compared

11
00:00:43.890 --> 00:00:46.770
to the model is that we have a lot more customization.

12
00:00:46.770 --> 00:00:48.750
Remodel is kind of take it or leave it.

13
00:00:48.960 --> 00:00:52.820
Now we have our own custom method and we can do whatever we want in this method.

14
00:00:52.830 --> 00:00:55.770
We're not just limited to overwriting our value data property.

15
00:00:55.950 --> 00:01:01.320
We can do whatever we want, we can console.log, we can make an API call, etc. So we're not just limited

16
00:01:01.320 --> 00:01:03.120
to one operation, we can do as much as we want.

17
00:01:03.570 --> 00:01:09.270
So on this keyword, which represents the current view component, which is the text input component,

18
00:01:09.600 --> 00:01:17.940
on this keyword we have access to a special method called Emit, and that method begins with a dollar

19
00:01:17.940 --> 00:01:18.330
sign.

20
00:01:18.330 --> 00:01:20.100
So it looks like this dollar sign.

21
00:01:20.140 --> 00:01:21.810
Emit All right.

22
00:01:22.080 --> 00:01:28.350
Now you may be a little bit off put or confused by this method name, but dollar sign is a normal character

23
00:01:28.350 --> 00:01:29.730
to use in JavaScript.

24
00:01:29.730 --> 00:01:34.500
It's a totally valid character to use anywhere in your variable or method names.

25
00:01:34.650 --> 00:01:39.420
And earlier on we saw how we had the event object and it began with a dollar sign as well.

26
00:01:39.690 --> 00:01:42.180
There is nothing special about the dollar sign.

27
00:01:42.180 --> 00:01:47.040
It is a regular character, so you can treat it no differently than an A character or an E character.

28
00:01:47.460 --> 00:01:52.380
Now you might have the response of Yeah, but I would never name something with a dollar sign in my

29
00:01:52.380 --> 00:01:52.680
work.

30
00:01:52.920 --> 00:01:56.640
And that's kind of the exact point or intention of the view developers here.

31
00:01:56.940 --> 00:02:02.010
The View developers like to begin a lot of their view specific methods that they give to you with a

32
00:02:02.010 --> 00:02:07.080
dollar sign, because it's a visual indicator that this is something special, this is something that

33
00:02:07.080 --> 00:02:08.640
is exclusive to view.

34
00:02:08.940 --> 00:02:15.750
You are highly unlikely as a developer to store a property on data or a computed property or a method

35
00:02:15.750 --> 00:02:17.040
that begins with the dollar sign.

36
00:02:17.280 --> 00:02:22.350
And for that exact reason, this is sort of your visual indicator that this is not a method that we

37
00:02:22.350 --> 00:02:22.860
defined.

38
00:02:23.010 --> 00:02:28.020
This is something that the View Library gives us out of the box and that allows them to differentiate

39
00:02:28.020 --> 00:02:29.730
their code from ours.

40
00:02:30.000 --> 00:02:35.550
So every single view component on the this keyword which represents this component, whatever you're

41
00:02:35.550 --> 00:02:40.260
working with, whether it be in this case text input or if we use the this keyword in job search form,

42
00:02:40.260 --> 00:02:42.000
it would be the job search form.

43
00:02:42.180 --> 00:02:48.390
In addition to having things like the data properties on the this keyword view is also automatically

44
00:02:48.390 --> 00:02:54.570
going to add a whole bunch of methods and other properties that specifically relate to view on the this

45
00:02:54.570 --> 00:02:54.960
keyword.

46
00:02:55.050 --> 00:02:57.660
One of them is this dollar sign emet method.

47
00:02:57.840 --> 00:03:00.180
All right, so this is how it's available.

48
00:03:00.180 --> 00:03:03.510
It's available on every single component automatically from view.

49
00:03:03.810 --> 00:03:04.110
All right.

50
00:03:04.380 --> 00:03:05.190
So it is a method.

51
00:03:05.190 --> 00:03:11.940
So we're going to invoke it right here and we can provide up to two or more arguments to emit.

52
00:03:11.940 --> 00:03:16.530
And what I mean by that, apologies for the confusion, is you typically will provide the first argument.

53
00:03:16.530 --> 00:03:20.550
It is mandatory and that represents what we call the message name.

54
00:03:20.850 --> 00:03:26.550
So you can almost think of emit like a radio broadcast tower and we're sending out a message to our

55
00:03:26.550 --> 00:03:27.990
parent component, right?

56
00:03:27.990 --> 00:03:29.940
We're relaying some kind of information.

57
00:03:30.210 --> 00:03:33.270
And the first argument is sort of like the channel name.

58
00:03:33.270 --> 00:03:34.830
It is the category.

59
00:03:34.830 --> 00:03:40.860
It is sort of describing the perhaps the category under which the event falls, what exactly happened.

60
00:03:40.860 --> 00:03:41.160
Right.

61
00:03:41.520 --> 00:03:45.720
So it's a little bit confusing, but what we can put here is any string of our choice.

62
00:03:45.870 --> 00:03:51.390
And this based represents the event that the parent is going to be able to react to.

63
00:03:51.660 --> 00:03:52.080
All right.

64
00:03:52.080 --> 00:03:53.040
It's kind of confusing.

65
00:03:53.040 --> 00:03:53.400
I know.

66
00:03:53.400 --> 00:03:56.430
But stick with me and I'll make sense in a lesson or two from now.

67
00:03:57.060 --> 00:04:00.030
So I'm going to call this event, handle input.

68
00:04:00.570 --> 00:04:02.010
So we're emitting a message.

69
00:04:02.010 --> 00:04:07.290
We're sending out a signal to our parent, and we're going to call that signal handle input.

70
00:04:07.530 --> 00:04:10.020
We're going to call this event handle input.

71
00:04:10.020 --> 00:04:11.940
We can give it whatever name we want.

72
00:04:12.150 --> 00:04:12.530
Okay?

73
00:04:13.080 --> 00:04:18.300
And then after that, we can provide optional arguments, any amount of arguments that we want, and

74
00:04:18.300 --> 00:04:23.400
that represents the data that we want to associate with this event, or in other words, the data that

75
00:04:23.400 --> 00:04:26.250
we want to pass up to my parent component.

76
00:04:26.580 --> 00:04:31.440
So right now I'm going to tell my parent component that something happened, an event occurred, and

77
00:04:31.440 --> 00:04:33.630
I'm going to call that event handle input.

78
00:04:34.320 --> 00:04:39.630
But what I also want to give to my parent is the actual current value that the user has just typed into

79
00:04:39.630 --> 00:04:40.920
my text input component.

80
00:04:41.280 --> 00:04:43.590
And of course we have that value in two locations.

81
00:04:43.590 --> 00:04:49.500
We have it on our event object, but we also have it at this point on our actual value data property.

82
00:04:49.740 --> 00:04:52.170
So right here I'm going to say this dot value.

83
00:04:53.530 --> 00:04:56.490
You'll notice we're going to have a little bit of a s Lynn warning.

84
00:04:56.500 --> 00:04:57.040
Don't worry.

85
00:04:57.040 --> 00:04:58.090
We'll come back to this later.

86
00:04:58.300 --> 00:04:59.680
But this is good enough for now.

87
00:04:59.710 --> 00:05:04.510
So what this means is whenever we're going to interact with our text input component.

88
00:05:04.630 --> 00:05:10.330
So in other words, when we're going to type a character, we're going to have this V on directive run,

89
00:05:10.330 --> 00:05:13.120
which is going to invoke the handle input method.

90
00:05:13.420 --> 00:05:18.430
So we're going to run this map method automatically and it is going to overwrite the components local

91
00:05:18.430 --> 00:05:24.730
value data property, and then it's going to send a message up, it's going to send a message up to

92
00:05:24.730 --> 00:05:25.150
the parent.

93
00:05:25.300 --> 00:05:27.670
And the name of that message is handle input.

94
00:05:27.970 --> 00:05:34.450
And the supplementary data or payload that is going to attach with that message is going to be the second

95
00:05:34.450 --> 00:05:37.720
argument, and that is going to be the current value that is typed into the field.

96
00:05:38.470 --> 00:05:38.680
Okay.

97
00:05:38.920 --> 00:05:45.040
So we need to provide a name for the event and a name for the occurrence or the thing that just transpired,

98
00:05:45.190 --> 00:05:49.720
and then an optional payload of information that we want to attach to that event.

99
00:05:50.230 --> 00:05:50.470
All right.

100
00:05:50.470 --> 00:05:54.190
That's been a lot to cover, but we're going to see how all of this makes sense in the next lesson,

101
00:05:54.370 --> 00:05:59.830
where we're going to transition to our job search form and react to this new handle input event.
