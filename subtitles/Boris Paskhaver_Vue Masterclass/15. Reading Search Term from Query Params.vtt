WEBVTT
1
00:00:00.540 --> 00:00:01.470
All right.

2
00:00:01.470 --> 00:00:07.620
So this is going to be a fun lesson because we're actually going to complete a feature that we literally

3
00:00:07.620 --> 00:00:10.980
started hours and hours ago, way back when.

4
00:00:11.280 --> 00:00:16.560
So you may recall that when we were building the front page, the landing page of this website, we

5
00:00:16.560 --> 00:00:22.680
built this entire form in order to allow the user to provide a role as well as a location.

6
00:00:22.860 --> 00:00:27.810
And the intent there was when they click the search button, we would navigate them to the search page

7
00:00:27.810 --> 00:00:30.060
and show them the results that matter.

8
00:00:30.360 --> 00:00:35.460
And of course, the role they entered here is basically the skills and qualifications that we want to

9
00:00:35.460 --> 00:00:38.100
use to fill the two jobs on the right.

10
00:00:38.490 --> 00:00:44.280
So as a reminder of how this functionality works, the user can provide a role here like Java and then

11
00:00:44.280 --> 00:00:46.350
a location here like Seattle.

12
00:00:47.100 --> 00:00:53.460
And when they click Search, we take them to the job results page and we add on the query params right

13
00:00:53.460 --> 00:00:57.180
here at the end role equals Java and location equals Seattle.

14
00:00:57.450 --> 00:01:03.060
Now, right now we're not doing anything with those query params, so we're seeing all 100 jobs rendered

15
00:01:03.060 --> 00:01:03.510
right here.

16
00:01:03.780 --> 00:01:08.790
But the whole reason we set up that search form was to use this information on this page.

17
00:01:09.120 --> 00:01:14.100
Now we have built no kind of location filtering feature in our app, and to be quite honest, we're

18
00:01:14.100 --> 00:01:18.750
probably not going to simply because that would be more lessons that wouldn't teach us anything new

19
00:01:18.750 --> 00:01:19.310
in view.

20
00:01:19.680 --> 00:01:24.840
But the last thing that I want to show you here is kind of tying this app together by using this piece

21
00:01:24.840 --> 00:01:30.750
of information right here to automatically filter to jobs right here and also provide a pre-populated

22
00:01:30.750 --> 00:01:36.570
value for the skills and qualifications box, because we do not want the user to enter this value twice,

23
00:01:36.570 --> 00:01:39.930
otherwise it defeats the entire purpose of that original page.

24
00:01:40.080 --> 00:01:45.420
We want the user to navigate here, see the jobs and see the time they entered automatically populated

25
00:01:45.420 --> 00:01:46.560
in this box.

26
00:01:47.010 --> 00:01:52.740
So one simple way that we can do this is to use our on mounted function, which as a reminder, invokes

27
00:01:52.740 --> 00:01:54.690
a function whenever a component mounts.

28
00:01:55.020 --> 00:02:01.410
And in that function that we provide to our mounted, we can get access to a route, we can get access

29
00:02:01.410 --> 00:02:08.190
to our route using the use route function from view router and then we can extract this role query param.

30
00:02:08.430 --> 00:02:14.310
And one really simple solution is to simply commit a mutation to the View X Store, the exact same mutation

31
00:02:14.310 --> 00:02:19.470
we have been using, which is update skill search term and give the store whatever value is right here.

32
00:02:19.800 --> 00:02:20.040
Right.

33
00:02:20.040 --> 00:02:25.140
And with that the store will update that property, which means the filter jobs getter will rerun it,

34
00:02:25.140 --> 00:02:30.270
which means it should automatically show the jobs that match that search term right here.

35
00:02:30.390 --> 00:02:35.700
As soon as the user lands on this page, the only question that remains is what component do we put

36
00:02:35.700 --> 00:02:37.200
that on mounted logic in?

37
00:02:37.590 --> 00:02:43.920
So my first approach was to try to pack that logic into the job filter sidebar skills component, but

38
00:02:43.920 --> 00:02:46.380
that didn't actually work as well as I anticipated.

39
00:02:46.770 --> 00:02:51.630
And the reason is because the component is actually hidden within this accordion component.

40
00:02:52.380 --> 00:02:57.780
And from the perspective of the on mounted lifecycle hook, that skills component isn't technically

41
00:02:57.780 --> 00:02:58.410
mounted.

42
00:02:58.530 --> 00:03:04.020
When the page loads, it only becomes mounted to the DOM when we expand the accordion for the first

43
00:03:04.020 --> 00:03:04.380
time.

44
00:03:04.620 --> 00:03:09.090
So I saw this kind of weird behavior where the jobs would not filter, and then as soon as the component

45
00:03:09.090 --> 00:03:11.340
opened, that's when they would filter on the right hand side.

46
00:03:11.340 --> 00:03:14.250
And that was a pretty jarring, inconvenient user experience.

47
00:03:14.520 --> 00:03:19.290
So the key takeaway is we're not going to be able to put that on mounted logic in the in the skills

48
00:03:19.740 --> 00:03:23.490
component because it just is hidden when the entire page loads.

49
00:03:23.760 --> 00:03:28.980
However, we are going to be able to put this logic in our job filter sidebar component, because that's

50
00:03:28.980 --> 00:03:34.050
this entire container right there that is going to be present immediately when this route loads, which

51
00:03:34.050 --> 00:03:38.820
means it's going to kick off that logic of parsing the route and talking to the View store and it should

52
00:03:38.820 --> 00:03:41.070
automatically update to jobs on the right.

53
00:03:41.460 --> 00:03:43.080
So let's see how we're going to implement this.

54
00:03:43.080 --> 00:03:44.850
So I'm going to go back to this code.

55
00:03:46.330 --> 00:03:49.030
And I'll begin by opening up a job filters sidebar.

56
00:03:49.660 --> 00:03:54.550
So here is our component where we're putting together all of those smaller child components, and we

57
00:03:54.550 --> 00:03:59.860
actually put so much logic in here that we actually removed the need for a setup method for once again

58
00:03:59.860 --> 00:04:01.520
going to need our setup method back.

59
00:04:01.520 --> 00:04:02.530
So let's add it right here.

60
00:04:03.960 --> 00:04:07.140
And of course we're going to need to run a function on component mount.

61
00:04:07.380 --> 00:04:10.080
So immediately I'm going to import the on mounted.

62
00:04:11.870 --> 00:04:12.860
Function from view.

63
00:04:13.070 --> 00:04:15.920
And we know we're going to need to invoke on mounted in setup.

64
00:04:16.310 --> 00:04:21.290
And as a reminder the way this works is we pass it a function and VAR will automatically run it when

65
00:04:21.290 --> 00:04:22.220
the component mounts.

66
00:04:22.490 --> 00:04:24.320
So we pass it in an invoked function.

67
00:04:24.620 --> 00:04:27.880
So for now, I'm simply going to define that function right here in line.

68
00:04:27.890 --> 00:04:31.460
I'm going to call it pass skills search term.

69
00:04:32.980 --> 00:04:37.630
And it's going to be an arrow function and I'm going to pass in the on invoked reference to that function

70
00:04:37.630 --> 00:04:38.260
right here.

71
00:04:39.100 --> 00:04:39.500
All right.

72
00:04:39.880 --> 00:04:43.720
Now, the only thing that remains, of course, is filling out the body of this function to do what

73
00:04:43.720 --> 00:04:44.110
we want.

74
00:04:44.440 --> 00:04:45.690
So what do we want to do here?

75
00:04:45.700 --> 00:04:50.740
The first thing we want to do is to talk to our route, object to find out if there are any query params

76
00:04:50.740 --> 00:04:51.100
present.

77
00:04:51.460 --> 00:04:54.100
So in order to get access to the root, I'm going to need to import.

78
00:04:55.710 --> 00:05:01.430
My use route composable function and that is going to come from Vue router, right?

79
00:05:01.440 --> 00:05:03.930
Totally separate library that we have not used in a while.

80
00:05:04.200 --> 00:05:07.890
And we can actually probably put this logic entirely within the arrow function.

81
00:05:07.890 --> 00:05:11.790
There's no need to connect to the root right here in the main body of setup.

82
00:05:11.790 --> 00:05:13.440
It should work right here in line as well.

83
00:05:13.800 --> 00:05:19.410
So Connect Root is going to be the invocation of use root that's going to get us our root object.

84
00:05:19.590 --> 00:05:22.140
And it's been a while since we explored this root object.

85
00:05:22.140 --> 00:05:23.190
So I'll just get to it quick.

86
00:05:23.370 --> 00:05:29.430
On our root object there is a query property and that gray property returns an object with all of the

87
00:05:29.940 --> 00:05:31.470
properties in the query params.

88
00:05:31.680 --> 00:05:34.620
So our property from from the browser is called role.

89
00:05:34.860 --> 00:05:35.070
Right.

90
00:05:35.070 --> 00:05:39.930
Just as a quick reminder right here, it is called the role and we're breaking because of my editor.

91
00:05:40.110 --> 00:05:41.910
But right here you can see it's called role.

92
00:05:42.210 --> 00:05:44.850
So that's going to be the property that's available on this object.

93
00:05:44.850 --> 00:05:46.140
So I'm going to access role.

94
00:05:46.590 --> 00:05:51.690
Now keep in mind, if the user, for example, does not provide a value in the search box or if they

95
00:05:51.690 --> 00:05:56.460
navigate to the job results page without any query params, for example, if they go directly to that

96
00:05:56.460 --> 00:06:01.290
URL, this property will not exist and therefore this will evaluate to undefined.

97
00:06:01.620 --> 00:06:06.900
So what I'm going to do is if it evaluates to undefined, which is a false value, I'm going to default

98
00:06:06.900 --> 00:06:08.280
it to an empty string.

99
00:06:08.400 --> 00:06:10.830
And that way I always have something to commit to.

100
00:06:10.830 --> 00:06:14.040
My mutation, my update skills, search for mutation.

101
00:06:14.220 --> 00:06:19.140
I don't want to send the view store and undefined value because that is going to break the logic of

102
00:06:19.140 --> 00:06:22.140
how my skills search term view property stores things.

103
00:06:22.140 --> 00:06:27.000
It's meant to be a string, so I want this to be guaranteed to be an actual string, either the valid

104
00:06:27.000 --> 00:06:29.910
string or a backup fallback of an empty string.

105
00:06:30.150 --> 00:06:34.650
And I'm going to assign this, of course, to a constant called role, because this represents the role

106
00:06:34.650 --> 00:06:35.460
the user searched for.

107
00:06:35.730 --> 00:06:39.870
Technically, you can also use the word skills term or whatever is best said.

108
00:06:39.990 --> 00:06:43.920
It's kind of a little bit annoying because we're using two different bits of terminology, right, skill

109
00:06:43.920 --> 00:06:46.110
search versus role, but it's the same idea.

110
00:06:46.110 --> 00:06:49.380
It's whatever they're curious in searching for in the jobs titles.

111
00:06:49.860 --> 00:06:50.220
All right.

112
00:06:50.220 --> 00:06:54.660
So now we have the role, which represents the string that I want to send to my bookstore.

113
00:06:54.900 --> 00:06:59.100
So the next thing I need is going to be my store, as well as the mutation that I want to commit, which

114
00:06:59.100 --> 00:07:00.990
is going to be update skills search term.

115
00:07:01.320 --> 00:07:07.100
So right here, I'm going to import my use store function to get access to the store.

116
00:07:08.940 --> 00:07:13.230
And that's going to come from the U.S. In addition to that, in order to talk to the store, I'm going

117
00:07:13.230 --> 00:07:14.340
to need to get my key.

118
00:07:14.940 --> 00:07:15.900
So import key.

119
00:07:15.900 --> 00:07:19.530
And that is going to come from the source directory and the store directory.

120
00:07:19.530 --> 00:07:20.780
It's indexed to form.

121
00:07:20.970 --> 00:07:27.900
And then finally, I'm going to need my mutation and my mutation is called update skills search term

122
00:07:28.500 --> 00:07:33.300
and that is going to come from the source directory store and the constants file.

123
00:07:33.690 --> 00:07:34.110
All right.

124
00:07:34.440 --> 00:07:39.030
So now right here in line, I'm going to create my store or rather get reference to it.

125
00:07:39.210 --> 00:07:41.940
So can store equals use store passing in my key.

126
00:07:43.330 --> 00:07:43.690
All right.

127
00:07:43.900 --> 00:07:46.060
And then how do we commit the mutation to the store?

128
00:07:46.300 --> 00:07:49.330
We have to invoke the commit method and pass on the mutation we want.

129
00:07:49.570 --> 00:07:52.360
The mutation we want is update skills, search term.

130
00:07:52.570 --> 00:07:57.070
And as a reminder of the way that mutation works is it expects a second argument.

131
00:07:57.370 --> 00:08:03.220
That second argument is the actual skill search term, which now we're not getting from the input we're

132
00:08:03.220 --> 00:08:07.870
getting from the queer params which themselves are going to be based on the search term the user provided

133
00:08:07.870 --> 00:08:08.920
on the home page.

134
00:08:09.130 --> 00:08:14.440
If we've have access to that right here, it's either the actual value such as Java or an empty string.

135
00:08:14.590 --> 00:08:16.000
It doesn't matter which one I have.

136
00:08:16.150 --> 00:08:20.350
If it falls back to an empty string, everything is going to work just normally because we're going

137
00:08:20.350 --> 00:08:25.570
to overwrite skill search term with an empty string, which is its default value anyway, which will

138
00:08:25.570 --> 00:08:27.040
show all the jobs anyway.

139
00:08:27.340 --> 00:08:30.910
So right here I'm going to provide my second argument, which is the role itself.

140
00:08:31.910 --> 00:08:32.730
And that is a strength.

141
00:08:33.090 --> 00:08:33.360
All right.

142
00:08:33.360 --> 00:08:37.530
So as soon as the job filter cyber component mounts, it will run this logic.

143
00:08:37.740 --> 00:08:42.750
It will get the role and it will commit a mutation to update the skills search term.

144
00:08:42.960 --> 00:08:48.900
If that is a valid string like Java, that will in turn cause my getters to rerun and use the filter

145
00:08:48.900 --> 00:08:51.960
jobs getter to use that term to filter.

146
00:08:52.080 --> 00:08:53.910
And that should work for us perfectly.

147
00:08:54.180 --> 00:08:56.310
So now I'm going to navigate back to the browser.

148
00:08:57.090 --> 00:09:02.730
Going to go back here and I'm going to search for Java and I'm going to even leave this blank because

149
00:09:02.730 --> 00:09:03.390
we're not using it.

150
00:09:03.570 --> 00:09:09.750
And so I'm going to search and look what we have here Java coder, Java Engineer, JavaScript Ninja,

151
00:09:09.750 --> 00:09:13.950
which also works because Java there, JavaScript, Java and Java associate, etc..

152
00:09:14.250 --> 00:09:16.400
So it's working perfectly and it's going to work.

153
00:09:16.410 --> 00:09:19.140
If Java is uppercase or lowercase.

154
00:09:19.140 --> 00:09:23.430
I can just prove that to you again because we are doing the comparisons if the user searches for Java.

155
00:09:24.300 --> 00:09:24.750
There we go.

156
00:09:24.760 --> 00:09:25.800
You can see it still works.

157
00:09:26.190 --> 00:09:32.550
And of course, because our skills component is directly connected to the view extra state, if we expand

158
00:09:32.550 --> 00:09:36.420
this, you guessed it, we're automatically going to have it populated with Java.

159
00:09:36.960 --> 00:09:37.320
All right.

160
00:09:37.440 --> 00:09:41.220
And the beautiful part about this, of course, is the user can provide this URL to somebody else.

161
00:09:41.220 --> 00:09:45.690
And as soon as the user navigates to this page, even if it's not directly coming from the homepage,

162
00:09:45.900 --> 00:09:50.490
as long as they have the URL with these query params, if I do a hard refresh on this page, you're

163
00:09:50.490 --> 00:09:55.110
going to see it's going to work the exact same way because on component mount, the component is going

164
00:09:55.110 --> 00:09:59.700
to read this data and use it to update the book store, which will cause these jobs to update.

165
00:09:59.910 --> 00:10:00.270
All right.

166
00:10:00.540 --> 00:10:05.640
So it's kind of fun because this is a feature that we've basically been like that's been lying dormant

167
00:10:05.640 --> 00:10:07.140
for literally like tens of hours.

168
00:10:07.290 --> 00:10:08.580
And we finally completed it.

169
00:10:08.580 --> 00:10:15.060
We finally kind of connected all the dots across the app, starting from our main page right here to

170
00:10:15.120 --> 00:10:16.890
the final product right here.

171
00:10:17.730 --> 00:10:18.090
All right.

172
00:10:18.330 --> 00:10:19.830
So lots of cool progress.

173
00:10:19.830 --> 00:10:20.780
This has been pretty cool.

174
00:10:20.790 --> 00:10:25.440
And in the very next lesson, we're going to write a test for the new functionality we just added.
