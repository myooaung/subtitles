1
00:00:00,600 --> 00:00:01,170
Okay.

2
00:00:01,170 --> 00:00:07,200
So in the previous lesson, we used our DB dot JSON file to define a degree's endpoint.

3
00:00:07,500 --> 00:00:13,170
The next thing I want to build is going to be the function on the view side that makes the request to

4
00:00:13,170 --> 00:00:15,180
that end point to fetch that data.

5
00:00:15,540 --> 00:00:19,950
So in practice, it's going to be very similar to our get jobs function right here.

6
00:00:20,280 --> 00:00:26,700
This get jobs function in our source API directory makes a request to these slash jobs end point to

7
00:00:26,700 --> 00:00:27,450
get the jobs.

8
00:00:27,690 --> 00:00:31,230
And we're going to need a very similar function to get our degrees.

9
00:00:31,470 --> 00:00:36,960
We're going to figure out how to add it all to, for example, our view store or to our components later.

10
00:00:37,050 --> 00:00:42,450
For now, I want to isolate the logic of the actual API fetch to its own function and let's have of

11
00:00:42,450 --> 00:00:44,250
course call that function get degrees.

12
00:00:44,610 --> 00:00:50,100
So what I'm going to do is simply make a copy of this file as well as the corresponding test file and

13
00:00:50,100 --> 00:00:54,210
adjust both of them to match the differences between it, get jobs and get degrees.

14
00:00:54,630 --> 00:01:00,030
So right here, let me right click on this file and let me go ahead and copy it.

15
00:01:00,600 --> 00:01:02,760
And right here in API, I'm also going to paste it.

16
00:01:03,450 --> 00:01:06,960
And of course, I'm going to rename this file to B get degrees.

17
00:01:08,050 --> 00:01:08,850
Don't test that.

18
00:01:08,890 --> 00:01:09,280
Yes.

19
00:01:11,560 --> 00:01:12,000
All right.

20
00:01:12,010 --> 00:01:13,270
Let me make sure I spell it correctly.

21
00:01:13,300 --> 00:01:13,840
There we go.

22
00:01:14,230 --> 00:01:16,090
And let me open that file on the right hand side.

23
00:01:17,280 --> 00:01:22,300
And what I'm going to do in my source API folder is create a new file as well.

24
00:01:22,320 --> 00:01:23,790
I'm going to call it get degrees.

25
00:01:23,790 --> 00:01:24,450
That that's.

26
00:01:26,070 --> 00:01:27,390
And for now.

27
00:01:28,370 --> 00:01:29,570
Let me just leave it blank.

28
00:01:29,680 --> 00:01:31,940
Well, basically make it a reality in just a second.

29
00:01:32,300 --> 00:01:32,570
All right.

30
00:01:32,570 --> 00:01:36,260
So let's first focus on a test suite, because I do want to follow a TDD approach.

31
00:01:36,560 --> 00:01:38,300
So we're going to be able to keep most of this code.

32
00:01:38,300 --> 00:01:43,130
We're just obviously adjusted for our new soon to be written function.

33
00:01:43,460 --> 00:01:46,250
So we're going to import Axios, we're going to mock at Axios.

34
00:01:46,250 --> 00:01:47,240
That sounds good to me.

35
00:01:47,240 --> 00:01:51,250
Then we're going to, of course, import our new function, which is now going to be called get degrees,

36
00:01:51,560 --> 00:01:56,240
something to change that name as well as the new file that we have below here.

37
00:01:56,240 --> 00:02:03,080
We are going to mark out the Axios get or rather give it the specific type, which is exactly as we

38
00:02:03,080 --> 00:02:04,460
should do in TypeScript here.

39
00:02:04,460 --> 00:02:09,140
By the way, we're going to see an error because it's not able to see any export yet from this file.

40
00:02:09,170 --> 00:02:09,560
Totally.

41
00:02:09,560 --> 00:02:09,920
Fine.

42
00:02:09,920 --> 00:02:10,820
We'll come back to that later.

43
00:02:11,300 --> 00:02:15,320
So right here we are marking out the resolved value of the Axios get method.

44
00:02:15,320 --> 00:02:20,860
And this object right here, of course, for example, resembles a sample job object or a mock job object.

45
00:02:21,140 --> 00:02:27,170
So just to make it a little bit more clear and to make this resemble our real world API more closely,

46
00:02:27,170 --> 00:02:32,690
I'm going to change this from title to degree, and I'm going to give it a value like Master's, and

47
00:02:32,690 --> 00:02:36,080
that's exactly what a real world degree object looks like from the API.

48
00:02:36,740 --> 00:02:37,010
All right.

49
00:02:37,010 --> 00:02:39,790
So right here, it fetches jobs that candidates can apply to.

50
00:02:39,830 --> 00:02:44,720
Let's change this to fetches all possible degree requirements.

51
00:02:45,830 --> 00:02:47,170
It's going to be an async test.

52
00:02:47,180 --> 00:02:51,590
I'm going to await the invocation and the resolution of the get degrees function.

53
00:02:51,860 --> 00:02:56,090
And then I'm going to expect that Axios get should have been called with the correct API.

54
00:02:56,300 --> 00:02:58,030
Remember that or the correct URL.

55
00:02:58,310 --> 00:03:02,990
Remember that my fake API is coming from our environment variable file so that will always be the same.

56
00:03:02,990 --> 00:03:05,270
What should change is the actual endpoint we hit.

57
00:03:05,510 --> 00:03:07,160
So this of course should be degrees.

58
00:03:08,520 --> 00:03:08,850
All right.

59
00:03:09,240 --> 00:03:09,900
Down below.

60
00:03:09,900 --> 00:03:14,580
Instead of extracts jobs from response, I'm going to say extract degrees from response.

61
00:03:15,120 --> 00:03:17,220
Once again, we're going to invoke get degrees.

62
00:03:18,120 --> 00:03:22,230
And of course, the data here, once we unravel it should be equal to this object right here.

63
00:03:22,230 --> 00:03:25,290
So I'm simply going to copy and paste it right here.

64
00:03:26,840 --> 00:03:32,510
So again, using our get jobs tests as inspiration for this new test, we forget degrees and I'm going

65
00:03:32,510 --> 00:03:33,280
to run that.

66
00:03:33,290 --> 00:03:34,700
And of course it should fail.

67
00:03:39,410 --> 00:03:39,970
Right.

68
00:03:40,010 --> 00:03:42,620
Of course it's going to fail because there's no function here, and that's totally fine.

69
00:03:42,980 --> 00:03:43,220
All right.

70
00:03:43,220 --> 00:03:48,230
So if I go back to get jobs, that yes, we can obviously use this as inspiration.

71
00:03:48,500 --> 00:03:53,300
But before we do notice that what we're doing here is we're importing an interface called a job from

72
00:03:53,300 --> 00:03:54,050
the types file.

73
00:03:54,260 --> 00:03:59,660
And the reason we're doing that is to use that as a generic type, right here to tell TypeScript that

74
00:03:59,660 --> 00:04:04,640
the Axios get method will return a promise wrapping an array of job objects.

75
00:04:04,790 --> 00:04:09,050
And of course, that is beneficial because that is going to be how TypeScript understands what your

76
00:04:09,050 --> 00:04:12,320
API actually returns, because it has no way of knowing otherwise.

77
00:04:12,650 --> 00:04:17,090
So what I'd like to do is to go into this types file and that's going to going to be source API types.

78
00:04:17,090 --> 00:04:21,650
That's and I want to define a similar interface for my degree object.

79
00:04:21,920 --> 00:04:25,460
So right here, I'm going to export an interface called Degree.

80
00:04:26,390 --> 00:04:30,810
And of course, the way this is going to look is exactly as it looks in our DB, that JSON file.

81
00:04:30,830 --> 00:04:35,840
So each degree, as you can see on the right is going to have an ID property and that is going to be

82
00:04:35,840 --> 00:04:36,290
a number.

83
00:04:36,620 --> 00:04:39,680
It's also going to have a degree property and that is going to be a string.

84
00:04:40,370 --> 00:04:40,640
All right.

85
00:04:40,640 --> 00:04:42,500
And make sure you export that degree.

86
00:04:42,830 --> 00:04:47,510
So with that, I'm going to save this file and then I'm going to come back to get jobs at times and

87
00:04:47,510 --> 00:04:49,340
copy this code to get degrees that.

88
00:04:49,340 --> 00:04:49,670
Yes.

89
00:04:50,030 --> 00:04:52,280
And as always, we're going to modify it accordingly.

90
00:04:52,580 --> 00:04:55,700
So here I'm going to import, not job, but degree.

91
00:04:55,730 --> 00:04:56,960
That is our new interface.

92
00:04:57,200 --> 00:05:00,170
And of course, our function right here is going to be called get degrees.

93
00:05:00,650 --> 00:05:02,360
This will also be get degrees right here.

94
00:05:03,440 --> 00:05:03,830
All right.

95
00:05:04,130 --> 00:05:09,710
So our base URL is going to stay the same because that is coming from our environment variable depending

96
00:05:09,710 --> 00:05:10,970
on which environment we're in.

97
00:05:11,000 --> 00:05:14,420
It could be test, it can be prod development, etc..

98
00:05:14,690 --> 00:05:19,730
And here in our generic is where we specify what our response will look like wrapped inside, of course,

99
00:05:19,730 --> 00:05:21,680
that complex Axios response object.

100
00:05:21,980 --> 00:05:26,900
So now as a generic type, we don't expect an array of jobs, we expect an array of degrees.

101
00:05:27,110 --> 00:05:31,700
So I'm going to use my degree interface that I imported and then the square brackets to indicate that

102
00:05:31,700 --> 00:05:33,230
that is going to be an array.

103
00:05:33,260 --> 00:05:37,760
So an array of objects, each of them having, we're implementing the degree interface, having those

104
00:05:37,760 --> 00:05:39,910
two properties that we just declared in the type slot.

105
00:05:40,340 --> 00:05:43,580
Then of course, my actual endpoint is not going to be slash jobs.

106
00:05:43,580 --> 00:05:45,050
It's going to be slash degrees.

107
00:05:45,530 --> 00:05:50,090
And then when I get back to access response object, I'm going to actually get the data property from

108
00:05:50,090 --> 00:05:50,210
it.

109
00:05:50,420 --> 00:05:52,850
And that should give me, as you can see here, a degree array.

110
00:05:53,180 --> 00:05:57,920
So you can see here, if I look at the typescript inference as a result of us adding the generic, you

111
00:05:57,920 --> 00:06:02,420
can see that TypeScript understands that get degrees is going to be an asynchronous function that returns

112
00:06:02,420 --> 00:06:06,230
a promise that resolves to give us an array of degree objects.

113
00:06:06,590 --> 00:06:07,460
I'm going to save that.

114
00:06:08,970 --> 00:06:09,980
Let the test run.

115
00:06:09,990 --> 00:06:11,580
Here they are on the right hand side for reference.

116
00:06:11,940 --> 00:06:13,740
We're verifying the right hitting the right URL.

117
00:06:13,920 --> 00:06:18,900
And that we're extracting the correct property, which is data, to get to the actual heart of the response,

118
00:06:18,900 --> 00:06:22,590
which is what our back end API provides that are Axios object wraps.

119
00:06:22,860 --> 00:06:25,140
And you can see all of our tests are now passing.

120
00:06:25,500 --> 00:06:30,090
All right, so now we've implemented the API function call to actually set your degrees and we'll continue

121
00:06:30,090 --> 00:06:31,260
with this in our next lesson.
