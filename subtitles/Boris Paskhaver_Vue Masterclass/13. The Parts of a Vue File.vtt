WEBVTT
1
00:00:00.650 --> 00:00:01.580
All right.

2
00:00:01.580 --> 00:00:07.820
So in this lesson, I want to talk more about view components and the parts that they consist of.

3
00:00:08.150 --> 00:00:10.530
So let's open up our app view component.

4
00:00:10.550 --> 00:00:12.440
This is within our SASE directory.

5
00:00:12.650 --> 00:00:17.660
And as a reminder, this is the component that we are mounting in our main gas file.

6
00:00:17.960 --> 00:00:23.420
So as a reminder here we are importing app and remember we are hooking into that div with an idea of

7
00:00:23.420 --> 00:00:27.910
app and we're asking Vue to mount our app component inside that div.

8
00:00:27.920 --> 00:00:33.440
So this is sort of the place where it all begins as far as the content that we are seeing in our browser.

9
00:00:33.890 --> 00:00:34.220
All right.

10
00:00:34.340 --> 00:00:39.140
So before we talk about what's going on in this file, I want to give you another helpful analogy for

11
00:00:39.140 --> 00:00:40.670
understanding a component.

12
00:00:41.150 --> 00:00:44.820
You may recall the jigsaw puzzles that you used to do as a kid, right?

13
00:00:44.840 --> 00:00:50.300
Jigsaw puzzles had a whole bunch of pieces and you connected them together to form a complete picture.

14
00:00:50.300 --> 00:00:50.600
Right.

15
00:00:51.230 --> 00:00:54.980
So you can think of a component almost like a puzzle piece.

16
00:00:55.220 --> 00:00:57.860
And as the web page, as your final puzzle.

17
00:00:57.860 --> 00:00:58.130
Right.

18
00:00:58.400 --> 00:01:02.420
So a component is just some kind of chunk of that web page.

19
00:01:02.420 --> 00:01:07.880
And it can be as large or as small as you want it to be in the same way that you can have, you know,

20
00:01:07.880 --> 00:01:11.480
a jigsaw puzzle that has two pieces or a thousand pieces.

21
00:01:11.750 --> 00:01:13.910
It doesn't really matter how many pieces you have.

22
00:01:14.090 --> 00:01:18.110
All that matters is that you connect these pieces together to form the greater whole.

23
00:01:18.380 --> 00:01:20.030
It's the same idea here.

24
00:01:20.240 --> 00:01:27.920
A view component is just some chunk of HTML, CSS and JavaScript, and then you can use those components

25
00:01:27.920 --> 00:01:30.710
in combination with each other to form the web page.

26
00:01:30.980 --> 00:01:36.290
Or you can have a component render its own smaller components within itself.

27
00:01:36.530 --> 00:01:36.860
Right.

28
00:01:37.160 --> 00:01:41.540
So it's kind of a combination of smaller pieces to form a greater whole.

29
00:01:42.260 --> 00:01:47.090
So as I mentioned, each component is just going to have each HTML, CSS and JavaScript.

30
00:01:47.330 --> 00:01:51.770
And if we look inside this app view file, you'll notice three distinct sections here.

31
00:01:51.980 --> 00:01:55.670
We have this section that begins with this opening and closing template tag.

32
00:01:56.210 --> 00:01:59.450
We have the section that begins with an opening and closing script tag.

33
00:01:59.810 --> 00:02:04.580
And then we have this section right here that begins and ends with an opening and closing style tag.

34
00:02:04.700 --> 00:02:05.000
All right.

35
00:02:05.420 --> 00:02:09.920
So you could probably guess what each one of these sections are responsible for, but let's go through

36
00:02:09.920 --> 00:02:10.460
them anyway.

37
00:02:10.760 --> 00:02:17.180
So in this template section, we're going to write either Vanilla H10 up or we're going to render additional

38
00:02:17.180 --> 00:02:17.810
components.

39
00:02:18.170 --> 00:02:21.650
So what we're doing here, for example, line two, this is plain HTML.

40
00:02:21.650 --> 00:02:24.200
This is the image element from each HTML.

41
00:02:24.470 --> 00:02:30.560
In comparison, what we're doing on line three is rendering another component that is called Hello World.

42
00:02:30.800 --> 00:02:35.510
If you open up the CRC Components Directory, you can find that hello world component right here.

43
00:02:35.720 --> 00:02:40.160
And if I open up that view file, you'll notice that it consists of the exact same structure.

44
00:02:40.160 --> 00:02:44.690
It starts with a top level template section, and in that template section we have a whole bunch of

45
00:02:44.960 --> 00:02:45.380
HTML.

46
00:02:45.740 --> 00:02:50.900
So whenever we're rendering the helloworld component, we are rendering this puzzle piece, which in

47
00:02:50.900 --> 00:02:53.600
turn is going to render all of this HTML.

48
00:02:53.900 --> 00:02:56.210
So it's almost like a find and replace operation.

49
00:02:56.210 --> 00:03:01.310
Whenever a view sees hello world, it understands that this is its own component with its own age HTML

50
00:03:01.460 --> 00:03:03.860
and it substitutes that HTML into here.

51
00:03:04.160 --> 00:03:09.170
So why do we use components so that we can split up these responsibilities, we can split up these chunks,

52
00:03:09.170 --> 00:03:15.080
split up these puzzle pieces into more lightweight, single responsibility pieces of the user interface.

53
00:03:15.230 --> 00:03:21.620
Instead of having one huge HTML file with a thousand lines, we identify the elements that are kind

54
00:03:21.620 --> 00:03:25.410
of smaller pieces of it and then build them independently of each other.

55
00:03:25.410 --> 00:03:25.660
Right?

56
00:03:26.330 --> 00:03:30.470
So in the tablet section, we have a combination of HTML as well as other components.

57
00:03:30.890 --> 00:03:33.740
In the script section, we have valid JavaScript code.

58
00:03:33.920 --> 00:03:38.210
That's one thing that makes a view file really cool is that there's actually two different languages

59
00:03:38.210 --> 00:03:41.720
at play here in the template section is HTML plus additional stuff.

60
00:03:41.930 --> 00:03:45.200
And in a script section, this is all valid JavaScript code.

61
00:03:45.410 --> 00:03:49.010
So here you can see we have an import and we have the creation of an object with properties.

62
00:03:49.220 --> 00:03:55.940
This is valid JavaScript code and it is in this section that we define the interactivity of the specific

63
00:03:55.940 --> 00:03:56.420
component.

64
00:03:56.690 --> 00:04:01.700
So this logic right here is always going to connect to the HTML logic in the template section.

65
00:04:01.910 --> 00:04:04.010
This is where we're going to enable interactivity.

66
00:04:04.310 --> 00:04:09.260
So to give you a very basic example, if we had a component that was rendering a button, we might render

67
00:04:09.260 --> 00:04:15.230
that button in the channel side of the view file, the template section, but reacting to a button click,

68
00:04:15.230 --> 00:04:19.610
which is logic based, JavaScript based, we would we would put that logic in the script section.

69
00:04:19.940 --> 00:04:23.960
So this is kind of where we put all of the JavaScript code related to this component.

70
00:04:24.650 --> 00:04:29.930
And then finally the style section right here is styling specifically for this component.

71
00:04:30.190 --> 00:04:33.020
Now we're going to talk about some caveats, of course, a little bit later.

72
00:04:33.200 --> 00:04:39.050
But for now, the best way to think about it is here's my HTML, here's how we style it, and here is

73
00:04:39.050 --> 00:04:43.640
some JavaScript logic related to it as far as interactivity is concerned.

74
00:04:43.640 --> 00:04:43.940
Right.

75
00:04:44.180 --> 00:04:47.120
And you're going to notice this pattern in every single view component found.

76
00:04:47.300 --> 00:04:51.620
So if I go to my Hello World component, which app is rendering, you're going to notice right here

77
00:04:51.620 --> 00:04:52.790
we have our template section.

78
00:04:52.880 --> 00:04:55.340
I'm going to go all the way down past this HTML.

79
00:04:55.640 --> 00:04:58.550
You'll notice it's going to be closed off with a closing template tag.

80
00:04:58.940 --> 00:05:00.120
Then we have a script section.

81
00:05:00.240 --> 00:05:04.650
In the here we have valid JavaScript and then we closed that section off and then finally we have the

82
00:05:04.650 --> 00:05:07.620
style section and here we have totally valid access.

83
00:05:07.890 --> 00:05:12.060
So this is valid access in the same way that this is valid JavaScript, in the same way that this is

84
00:05:12.060 --> 00:05:12.960
valid HTML.

85
00:05:13.200 --> 00:05:17.190
Instead of separating them across different files, the view developers think it's best to put them

86
00:05:17.190 --> 00:05:23.760
within a single one because a component is supposed to encapsulate all of the related aspects that make

87
00:05:23.760 --> 00:05:29.820
up that chunk of the UI, what its structure is in terms of the HTML, what it looks like and how you

88
00:05:29.820 --> 00:05:31.350
interact with it, which is JavaScript.

89
00:05:31.590 --> 00:05:36.510
And again, if you're if your component becomes too large, then the idea is that you break that up

90
00:05:36.510 --> 00:05:40.890
into smaller components, each one with its own styling, its own logic, its own template.

91
00:05:41.550 --> 00:05:43.050
So that is the beauty of components.

92
00:05:43.230 --> 00:05:46.680
You could technically have a view app with just one component, right?

93
00:05:46.830 --> 00:05:51.420
You could have a component with 5000 lines in it, but that defeats the entire purpose of why we use

94
00:05:51.420 --> 00:05:52.260
Vue instead.

95
00:05:52.260 --> 00:05:57.210
The idea here, of course, that the best strategy is to have lots of small different components that

96
00:05:57.210 --> 00:06:00.150
are each responsible for one small thing in your user interface.

97
00:06:00.360 --> 00:06:05.250
All right, that's a quick introduction to what we have as the contents of a view component file.

98
00:06:05.400 --> 00:06:08.400
Again, a view component will live in a dot view file.

99
00:06:08.520 --> 00:06:12.420
It's going to have a template section, it's going to have a script section and it's going to have a

100
00:06:12.420 --> 00:06:13.080
style section.

101
00:06:13.200 --> 00:06:19.770
And those represent the HTML, the JavaScript and the access respectively for that component for that

102
00:06:19.770 --> 00:06:22.260
chunk or slice of the user interface.

103
00:06:22.500 --> 00:06:22.830
All right.

104
00:06:22.920 --> 00:06:24.420
More on this in the next lesson.
