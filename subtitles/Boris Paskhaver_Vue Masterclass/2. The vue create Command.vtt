WEBVTT
1
00:00:00.520 --> 00:00:01.510
Alright.

2
00:00:01.510 --> 00:00:08.680
So in the previous lesson we installed the view stele and so now let's use it to create our view project.

3
00:00:08.920 --> 00:00:12.730
So navigate to the directory on your computer where you want to create the project.

4
00:00:12.910 --> 00:00:17.800
And then as I mentioned in the previous lesson, we're going to begin with the view command followed

5
00:00:17.800 --> 00:00:19.030
by a sub command.

6
00:00:19.150 --> 00:00:21.340
And what we're looking for here is create.

7
00:00:21.730 --> 00:00:25.660
What view create will do for us is create a brand new view application.

8
00:00:25.900 --> 00:00:31.120
The only thing we need to provide after this is going to be our project name and I'm going to call this

9
00:00:31.120 --> 00:00:33.370
project job search.

10
00:00:34.240 --> 00:00:34.540
All right.

11
00:00:34.540 --> 00:00:36.130
So go ahead and press enter here.

12
00:00:36.130 --> 00:00:41.680
And what this will launch is a prompt where we are going to be able to configure some of the settings

13
00:00:41.680 --> 00:00:42.520
in our project.

14
00:00:42.880 --> 00:00:49.390
So for example, this first screen allows us to pick a preset and a preset is a combination of existing

15
00:00:49.420 --> 00:00:49.870
tools.

16
00:00:50.080 --> 00:00:55.990
Basically, if we want to have a simple selection of just a combination of tools, for example, in

17
00:00:55.990 --> 00:01:01.480
this first one, Vue three with BABBEL and S lint, we can press enter right here and with just one

18
00:01:01.480 --> 00:01:08.380
click view, Seelye will assume a reasonable set of defaults and create a basic default view three project.

19
00:01:08.590 --> 00:01:12.190
And the second option does the exact same thing for a view to project.

20
00:01:12.490 --> 00:01:17.470
Now, the option that I actually want to select here is going to be this last one manually select features

21
00:01:17.680 --> 00:01:22.930
because I want to walk through all of the configuration settings and talk about the actual technologies

22
00:01:22.930 --> 00:01:25.750
that we're going to be choosing and what we're going to be doing with them.

23
00:01:26.050 --> 00:01:27.430
So let's select a third option.

24
00:01:27.430 --> 00:01:31.240
You can use your arrow keys to navigate and then press enter to choose your option.

25
00:01:32.170 --> 00:01:36.850
And so here, for example, we're going to be able to select all of the features that we want in our

26
00:01:36.850 --> 00:01:37.270
project.

27
00:01:37.540 --> 00:01:42.610
The way this works is we use the arrow keys to navigate up and down, and then we use the Spacebar to

28
00:01:42.610 --> 00:01:45.730
select a feature that we would like to include in the app.

29
00:01:46.000 --> 00:01:49.780
So for now, the only feature that I want to add is going to be unit testing.

30
00:01:49.960 --> 00:01:52.360
So navigate down to this and press the spacebar.

31
00:01:52.600 --> 00:01:58.720
And unit testing is going to set up our View project with the Foundation for Unit Testing, which means

32
00:01:58.840 --> 00:02:04.030
running tests that validate that our code and our view components do what they are supposed to do.

33
00:02:04.210 --> 00:02:08.260
We're going to talk more about the proper syntax and the logic behind testing later.

34
00:02:08.470 --> 00:02:13.390
For now, just realize this is a feature that I want to have in my app, so I'm going to select it right

35
00:02:13.390 --> 00:02:14.620
here and press enter.

36
00:02:15.890 --> 00:02:16.250
All right.

37
00:02:16.460 --> 00:02:20.510
The next option is going to be selecting the version of jazz that we want to work with.

38
00:02:20.660 --> 00:02:22.670
In this case, we're going to go with three point X.

39
00:02:22.820 --> 00:02:29.270
And as a reminder, the version three has all of the features of version two plus additional ones.

40
00:02:29.270 --> 00:02:32.300
So we're not losing out anything by learning the most modern version.

41
00:02:32.390 --> 00:02:36.020
We're still going to learn a lot of old view concepts and the new ones as well.

42
00:02:36.230 --> 00:02:37.700
So choose three point X here.

43
00:02:38.540 --> 00:02:42.350
Next step, we're going to be asked to select a linear and a formatter.

44
00:02:42.470 --> 00:02:46.250
And these are two very similar technologies, but they're a little bit different.

45
00:02:46.250 --> 00:02:49.190
So let's take a brief second to describe what each of them does.

46
00:02:49.580 --> 00:02:55.880
So a linear is a program that's going to analyze your code and look for errors or violations.

47
00:02:56.180 --> 00:03:02.720
So what I mean by errors or violations is certain code smells in your code or certain bits of code that

48
00:03:02.720 --> 00:03:05.810
indicate a likelihood for error or inefficiency.

49
00:03:06.050 --> 00:03:11.990
So a very simple example is if you import some kind of function from another file, but you never invoke

50
00:03:11.990 --> 00:03:17.390
it, that's something that is unused and probably useless and is lint, which is an example of a linear,

51
00:03:17.510 --> 00:03:22.430
is going to be able to isolate and identify those errors and also make recommendations on how to fix

52
00:03:22.430 --> 00:03:22.640
them.

53
00:03:22.880 --> 00:03:27.110
So letters are concerned with technical perfection, if you will, right?

54
00:03:27.110 --> 00:03:30.260
Identifying errors, identifying optimizations and the like.

55
00:03:30.270 --> 00:03:32.240
It deals with the quality of the code.

56
00:03:32.600 --> 00:03:38.300
A formatter in comparison is only concerned with the aesthetics of the code, which means how it looks.

57
00:03:38.600 --> 00:03:45.020
So a formatter is going to look through your code and reformat the file so that it looks as standardized

58
00:03:45.020 --> 00:03:46.850
and has a conventional format.

59
00:03:47.090 --> 00:03:52.670
So a simple example of what a formatter can do in JavaScript is add a semicolon at the end of each line.

60
00:03:52.940 --> 00:03:57.230
So different formatter such as prettier, have their own preferred conventions.

61
00:03:57.440 --> 00:04:01.070
And when you choose a formatter, you're basically saying, I'm going to trust that a whole bunch of

62
00:04:01.070 --> 00:04:06.320
other developers have thought about the best way to format JavaScript code and view code in each Tamal

63
00:04:06.320 --> 00:04:06.560
Code.

64
00:04:06.710 --> 00:04:11.810
And I'm going to let this program run through my file and reformat it so it looks pleasing and and is

65
00:04:11.810 --> 00:04:17.150
standardized so that all the developers working on the code base will have a file that looks similar

66
00:04:17.150 --> 00:04:22.640
or across the entire code base that is files that look similar to each other so that each developer's

67
00:04:22.640 --> 00:04:27.500
own personal preferences doesn't lead to a wide range of different styles across the code base.

68
00:04:27.500 --> 00:04:27.740
Right?

69
00:04:28.040 --> 00:04:33.590
So once again, winter is dealing with technical violations and a formatter is simply dealing with how

70
00:04:33.590 --> 00:04:34.310
the code looks.

71
00:04:34.520 --> 00:04:39.320
Yes, lint in this case is going to be our winter and prettier is going to be our formatter.

72
00:04:39.440 --> 00:04:43.730
And we're going to talk more about how these technologies express themselves in this code a little bit

73
00:04:43.730 --> 00:04:44.570
later in the course.

74
00:04:44.810 --> 00:04:50.210
But for now, we can choose which combination we want and we want to go down here to s lint and prettier.

75
00:04:51.500 --> 00:04:51.740
All right.

76
00:04:51.740 --> 00:04:55.850
The next option is going to ask us when we want to actually lint our code.

77
00:04:55.850 --> 00:04:59.570
And again, lint means simply to run s lint to look for those violations.

78
00:04:59.750 --> 00:05:04.070
This isn't going to be particularly important because this code will tell us automatically when there

79
00:05:04.070 --> 00:05:04.730
is a violation.

80
00:05:04.910 --> 00:05:10.250
But this also gives us an additional option to lint when we save the file as well as lint and fix whenever

81
00:05:10.250 --> 00:05:13.070
we make a get commit, it doesn't really matter what we choose here.

82
00:05:13.070 --> 00:05:14.690
So let's just choose lint on save.

83
00:05:15.920 --> 00:05:16.280
Then.

84
00:05:16.400 --> 00:05:20.870
Remember earlier when we were selecting the features for the app, we added unit testing.

85
00:05:20.990 --> 00:05:27.320
There's actually a variety of JavaScript libraries in the NPM ecosystem that can do that job of unit

86
00:05:27.320 --> 00:05:27.680
testing.

87
00:05:27.860 --> 00:05:33.170
So this is simply asking us to choose between two popular options just versus Moka and Chai.

88
00:05:33.440 --> 00:05:36.860
So I'm going to choose just here just is a very popular solution.

89
00:05:36.860 --> 00:05:41.900
It is open source and actually developed by Facebook and that's kind of good because it has a reliable

90
00:05:41.900 --> 00:05:43.670
development team and funding behind it.

91
00:05:43.850 --> 00:05:48.500
It's also modern up to date and quite honestly, it's the one I know best, so I can probably teach

92
00:05:48.500 --> 00:05:48.830
it best.

93
00:05:49.040 --> 00:05:52.010
So for all those reasons, we're going to be choosing just right here.

94
00:05:53.330 --> 00:05:53.720
All right.

95
00:05:53.720 --> 00:05:57.650
Next thing, it's going to ask us where we want to place our configuration files.

96
00:05:57.650 --> 00:06:02.960
So all of the technologies that we've chosen, for example, s lint, prettier, just they may have

97
00:06:02.960 --> 00:06:07.910
their own configuration files where we can customize their settings and we can either store those settings

98
00:06:07.910 --> 00:06:13.760
centrally in our projects, package that JSON file which exists in any node project, or we can create

99
00:06:13.760 --> 00:06:17.540
separate configuration files for all of these different technologies and libraries.

100
00:06:17.780 --> 00:06:22.520
I of course prefer to break things up, so things are a lot easier to understand because they're spread

101
00:06:22.520 --> 00:06:22.760
out.

102
00:06:22.970 --> 00:06:26.330
So for this option, I'm going to select in Dedicated Config Files.

103
00:06:27.550 --> 00:06:33.460
Finally, if you want to save this combination of options as its own preset, very similar to the presets

104
00:06:33.460 --> 00:06:35.890
we saw on the very first screen, you can do that.

105
00:06:36.100 --> 00:06:40.780
And of course, that is helpful for if you're working on a team where you have a bunch of view projects

106
00:06:40.780 --> 00:06:43.360
and you want to maintain consistency between those code bases.

107
00:06:43.750 --> 00:06:48.280
For us, we're only going to be working with one project the entire course, so it doesn't really matter.

108
00:06:48.550 --> 00:06:54.940
So for this, I'm going to select End for now, then press the enter key and that will start the process

109
00:06:54.940 --> 00:06:56.710
of initializing the View Project.

110
00:06:56.710 --> 00:07:01.420
So that usually is going to create a folder with the exact same project name as we gave.

111
00:07:01.540 --> 00:07:06.190
So right here we can see job search and then it's also going to fetch all the dependencies it needs

112
00:07:06.190 --> 00:07:07.810
to launch the app.

113
00:07:07.810 --> 00:07:08.960
So it's going to get view.

114
00:07:09.100 --> 00:07:11.920
It's going to get Babel, which is going to do the translation.

115
00:07:12.070 --> 00:07:14.140
It's going to get just for unit testing.

116
00:07:14.230 --> 00:07:15.760
Yes, Lynda, for listing.

117
00:07:15.880 --> 00:07:19.060
It's going to get prettier for beautification.

118
00:07:19.180 --> 00:07:23.560
And then it's going to create the basic required set of files that it's going to need in this folder

119
00:07:23.710 --> 00:07:27.310
in order for our view code or view app to be completely rentable.

120
00:07:27.520 --> 00:07:31.300
So as we're going to see in the very next lesson, when we run this app, we literally are going to

121
00:07:31.300 --> 00:07:33.520
have to execute just one more command after this.

122
00:07:33.760 --> 00:07:39.010
And this really will give us all of the required files we need to have a basic simple view app running

123
00:07:39.010 --> 00:07:43.720
in the browser with all of these additional configurations such as unit testing baked in.

124
00:07:44.110 --> 00:07:47.290
This entire process right here can take up to a minute or a couple of minutes.

125
00:07:47.290 --> 00:07:50.980
As you can see here, it's kind of moving right along, but taking a little bit of time.

126
00:07:51.220 --> 00:07:56.590
And at the very end, it's going to kind of bring you back to the terminal and give you instructions

127
00:07:56.590 --> 00:08:00.400
for how to navigate into the directory as well as launch the project.

128
00:08:00.700 --> 00:08:05.770
So now that we have successfully created the job search project, we can go ahead and launch this view

129
00:08:05.770 --> 00:08:07.510
application in the very next lesson.

130
00:08:07.750 --> 00:08:08.380
I'll see you there.
