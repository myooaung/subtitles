1
00:00:00,490 --> 00:00:01,290
Okay.

2
00:00:01,290 --> 00:00:06,930
So the next file in our store directory that we're going to convert to TypeScript is going to be our

3
00:00:06,930 --> 00:00:07,770
getters file.

4
00:00:08,040 --> 00:00:09,480
So right here I have getters.

5
00:00:09,480 --> 00:00:15,510
J.S. I'm going to open that up and immediately I'm going to change its name to have a TypeScript extension.

6
00:00:15,810 --> 00:00:19,770
So right click, choose, rename and let's give it a TSC extension.

7
00:00:20,780 --> 00:00:21,200
All right.

8
00:00:21,590 --> 00:00:27,590
So as a reminder, a getter is just a method that receives the current view store state as its first

9
00:00:27,590 --> 00:00:31,640
argument, and then it returns some kind of computed value from that store state.

10
00:00:31,970 --> 00:00:37,550
So luckily the state parameter they each one of our getters implements is going to be the exact same

11
00:00:37,940 --> 00:00:40,760
interface as what we did in the Mutations file.

12
00:00:40,820 --> 00:00:45,110
It's going to be that global state interface that describes our view X Store State.

13
00:00:45,500 --> 00:00:51,560
Now also recall that whenever we have getters that we want to accept additional arguments unlike mutations.

14
00:00:51,560 --> 00:00:57,230
The way we do this with getters is we have our original getter method, define a returned function,

15
00:00:57,320 --> 00:01:02,150
and there is that function that implements the additional parameters that we can then provide as arguments

16
00:01:02,150 --> 00:01:04,520
whenever we actually use the getter elsewhere.

17
00:01:04,580 --> 00:01:04,940
All right.

18
00:01:05,540 --> 00:01:10,670
So notice here, TypeScript wants us to define what state is going to be and also what job is going

19
00:01:10,670 --> 00:01:12,680
to be in this returned function.

20
00:01:12,800 --> 00:01:15,740
Then we return from this getter method, for example.

21
00:01:16,040 --> 00:01:20,780
So we're going to need to import global state, and we're also going to need to import another interface,

22
00:01:20,780 --> 00:01:22,580
which is our job interface as well.

23
00:01:22,850 --> 00:01:23,690
Let's do that first.

24
00:01:23,930 --> 00:01:30,740
So right here I'm going to import global state and that is going to come from our source directory that

25
00:01:30,740 --> 00:01:31,580
is related to view.

26
00:01:31,790 --> 00:01:34,730
So it's going to come from store and then the types file in there.

27
00:01:35,030 --> 00:01:40,280
And then as far as the jobs interface, we can import that here import job that is going to come from

28
00:01:40,280 --> 00:01:41,360
our API folder.

29
00:01:41,600 --> 00:01:46,400
So right here from the source directory, the API folder that types file in there.

30
00:01:46,670 --> 00:01:47,180
There we go.

31
00:01:47,450 --> 00:01:47,780
All right.

32
00:01:47,780 --> 00:01:52,790
So now let's go through every single one of our methods and update state to be using the global state

33
00:01:52,790 --> 00:01:53,270
interface.

34
00:01:53,510 --> 00:01:56,660
So the state parameter here is going to be of type global state.

35
00:01:57,350 --> 00:01:58,910
Same thing for this state right here.

36
00:01:59,870 --> 00:02:01,550
Same thing for this state right here.

37
00:02:02,120 --> 00:02:03,650
Same thing for the state right here.

38
00:02:05,100 --> 00:02:07,140
And same thing for this state right here.

39
00:02:08,160 --> 00:02:08,550
All right.

40
00:02:08,730 --> 00:02:12,390
Now, there's something cool that I want to show you about how powerful TypeScript works.

41
00:02:12,690 --> 00:02:17,610
I remember that TypeScript is really smart, especially when it gets into really nested objects.

42
00:02:17,910 --> 00:02:22,920
So notice, for example, that here in this first getter called unique organizations, we are iterating

43
00:02:22,920 --> 00:02:25,080
over each one of our jobs.

44
00:02:25,350 --> 00:02:30,810
So because we provided global state, TypeScript knows that the state is going to have a property called

45
00:02:30,810 --> 00:02:31,250
Jobs.

46
00:02:31,260 --> 00:02:33,120
Let me just open up global state as a reminder.

47
00:02:33,480 --> 00:02:39,390
So TypeScript understands that we have an array of jobs, but it also understands that each array,

48
00:02:39,810 --> 00:02:42,450
each array object is a job with its own property.

49
00:02:42,720 --> 00:02:48,600
So notice that when I hover my mouse over job right here on line 15, you can see that TypeScript has

50
00:02:48,600 --> 00:02:54,990
correctly inferred that it is a job object and thus it's going to validate that organization is a valid

51
00:02:54,990 --> 00:02:57,900
property, a string property on that job object.

52
00:02:58,200 --> 00:03:02,190
So once again, TypeScript is super smart because it can go all those levels deep.

53
00:03:02,430 --> 00:03:05,100
It knows that our state object has an array of jobs.

54
00:03:05,250 --> 00:03:09,690
It knows what an individual job looks like because we are iterating over an array of them.

55
00:03:09,870 --> 00:03:15,510
So it assumes we're iterating over a one job at a time and it knows that a job must have an organization

56
00:03:15,510 --> 00:03:21,090
property, because that's what this job interface right here that we are referencing in our global state

57
00:03:21,090 --> 00:03:22,230
interface references.

58
00:03:22,500 --> 00:03:24,450
And that's really the beautiful part of TypeScript.

59
00:03:24,600 --> 00:03:27,300
That's when, you know, when our brain forgets all these details.

60
00:03:27,510 --> 00:03:30,660
This is super helpful for TypeScript to remind us.

61
00:03:30,900 --> 00:03:35,040
So if we want, we can manually specify that this is going to be a job right here.

62
00:03:35,250 --> 00:03:40,830
But we don't need to, because TypeScript has everything it needs in order to make that correct assumption

63
00:03:40,950 --> 00:03:42,330
or calculation anyway.

64
00:03:42,480 --> 00:03:42,840
All right.

65
00:03:43,470 --> 00:03:47,310
So moving on, we have these two getters right here that return functions.

66
00:03:47,520 --> 00:03:50,190
Each one of those functions except a job argument.

67
00:03:50,370 --> 00:03:55,260
So right here, we're going to provide our job interface as the type of this parameter right here.

68
00:03:55,440 --> 00:03:57,150
Because here TypeScript has no clue.

69
00:03:57,210 --> 00:04:00,900
TypeScript just says, Oh, you're returning some function that accepts a parameter called Job.

70
00:04:01,050 --> 00:04:02,680
I don't know what that is in that case.

71
00:04:02,700 --> 00:04:03,480
Please tell me.

72
00:04:03,600 --> 00:04:05,100
That's why it's raising the error right here.

73
00:04:05,340 --> 00:04:07,530
So as always, a colon followed by the type.

74
00:04:07,530 --> 00:04:08,640
Our type is job.

75
00:04:08,880 --> 00:04:10,560
And our type right here is job as well.

76
00:04:11,710 --> 00:04:12,010
All right.

77
00:04:12,250 --> 00:04:15,550
As far as this violation, we're going to get back to this in the next lesson.

78
00:04:15,700 --> 00:04:18,400
There is one more thing I want to do to close this lesson off.

79
00:04:18,730 --> 00:04:24,100
You'll notice that if I hover my mouse over the letters, we're going to get the entire collection of

80
00:04:24,100 --> 00:04:25,840
types for this complex object.

81
00:04:26,140 --> 00:04:31,720
And notice that, for example, for the unique organizations getter, we are properly annotating state

82
00:04:31,720 --> 00:04:32,470
as global state.

83
00:04:32,740 --> 00:04:38,860
But TypeScript is assuming that the return value is going to be a set holding unknown values.

84
00:04:39,130 --> 00:04:43,720
And that's because TypeScript doesn't understand that our set is actually going to be one that consists

85
00:04:43,720 --> 00:04:44,470
of strings.

86
00:04:44,800 --> 00:04:50,230
Even though job and it's organization property is a string at the moment that we create the set on line

87
00:04:50,230 --> 00:04:53,980
14, TypeScript has no clue what values this set will contain.

88
00:04:54,160 --> 00:04:59,800
And since we're creating it like so here and then returning it on line 16 Typekit TypeScript assumes

89
00:04:59,800 --> 00:05:02,500
its default, which is a set of unknown values.

90
00:05:02,500 --> 00:05:06,670
In other words, as a reminder, unknown is kind of that value that's a little bit better than any,

91
00:05:06,670 --> 00:05:08,170
but basically just any values.

92
00:05:08,410 --> 00:05:13,330
And we can be a little bit more specific here in communicating explicitly to TypeScript that not only

93
00:05:13,330 --> 00:05:17,140
is it a set, but more specifically it's a set that's going to hold strings.

94
00:05:17,500 --> 00:05:17,740
All right.

95
00:05:17,890 --> 00:05:20,950
And the way we can do that is by using that feature called generics.

96
00:05:21,220 --> 00:05:26,800
Remember, the way generics work is we provide the opening and closing brackets, the less than sign

97
00:05:26,800 --> 00:05:27,640
and then the greater sign.

98
00:05:27,820 --> 00:05:30,400
And then we provide a type as well for that generic.

99
00:05:30,580 --> 00:05:32,740
And that allows us to have a more specific type.

100
00:05:32,980 --> 00:05:37,780
Remember earlier when we were learning about TypeScript, we saw how we could use generics to have our

101
00:05:37,780 --> 00:05:40,150
function, accept an array of any type of value.

102
00:05:40,270 --> 00:05:45,100
And that required us not to have to implement three identical functions, for example, one for an array

103
00:05:45,100 --> 00:05:48,340
of numbers, one for an array of strings, one for an array of booleans.

104
00:05:48,490 --> 00:05:53,350
Instead of duplicating that, we can simply define a generic input, and a generic is just basically

105
00:05:53,350 --> 00:05:54,490
a type parameter.

106
00:05:54,820 --> 00:06:00,640
So the set implementation in JavaScript and in TypeScript enables you to provide a generic to specify

107
00:06:00,640 --> 00:06:03,640
what is going to be the values that that set is going to hold.

108
00:06:03,940 --> 00:06:08,860
So right here after the set keyword, I'm going to provide my less than greater than sign and I'm going

109
00:06:08,860 --> 00:06:11,830
to specify that this is going to be a set of strings.

110
00:06:12,220 --> 00:06:12,610
All right.

111
00:06:12,880 --> 00:06:16,360
And down below here for unique job types, that works very similarly.

112
00:06:16,360 --> 00:06:21,220
This is also going to be a set of strings that has a more specific types that's a little bit better

113
00:06:21,220 --> 00:06:22,390
than just a generic set.

114
00:06:22,690 --> 00:06:28,720
So right here, I'm going to provide my generic in line, make sure not have this terrible autocomplete.

115
00:06:28,900 --> 00:06:29,470
There we go.

116
00:06:29,620 --> 00:06:29,920
All right.

117
00:06:30,040 --> 00:06:34,420
And now notice when I hover my mouse over getters, it's going to tell us a unique organization's is

118
00:06:34,420 --> 00:06:38,230
a method that accepts a state parameter that is going to have the global state interface.

119
00:06:38,410 --> 00:06:40,000
And now it's going to be a lot more specific.

120
00:06:40,270 --> 00:06:45,340
We're returning a set of strings, and the reason that's helpful is wherever we're going to be utilizing

121
00:06:45,340 --> 00:06:47,740
a getter like this in the component.

122
00:06:47,920 --> 00:06:51,790
Now, TypeScript knows that not only are we dealing with the set, but we're going to be dealing with

123
00:06:51,790 --> 00:06:52,600
a set of strings.

124
00:06:52,810 --> 00:06:58,060
So, for example, if we iterate over that, that set of strings and try to do something that is not

125
00:06:58,060 --> 00:07:03,610
permitted on a string or something like that, TypeScript will still notice that we're giving it more

126
00:07:03,610 --> 00:07:06,580
specific details that it can utilize in its type checking.

127
00:07:06,760 --> 00:07:07,090
All right.

128
00:07:07,240 --> 00:07:12,340
So if TypeScript makes the incorrect inference, if it makes the incorrect assumption, and if you need

129
00:07:12,340 --> 00:07:14,730
to provide a little bit more clarity, feel free to add it.

130
00:07:14,740 --> 00:07:19,360
Otherwise, if TypeScript is making the correct inference such as it did with Job right here, there's

131
00:07:19,360 --> 00:07:22,960
really no reason to add that additional explicit type unless you really want to.

132
00:07:23,320 --> 00:07:23,620
All right.

133
00:07:23,770 --> 00:07:25,840
So that takes care of a lot of our getters file.

134
00:07:25,840 --> 00:07:28,690
And in the very next lesson, we'll tackle this parameter right here.
