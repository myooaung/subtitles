1
00:00:00,470 --> 00:00:01,310
Okay.

2
00:00:01,310 --> 00:00:06,350
So our job filter sidebar checkbox group component is in a really good shape.

3
00:00:06,560 --> 00:00:09,650
So now let's update the corresponding test suite.

4
00:00:09,950 --> 00:00:14,000
So I'm going to open up job filter, sidebar checkbox group dot.

5
00:00:14,000 --> 00:00:14,690
Test dot.

6
00:00:14,690 --> 00:00:15,080
Yes.

7
00:00:15,380 --> 00:00:20,930
I'm going to drag this file over to the right and immediately I'm going to open up my file Explorer.

8
00:00:20,930 --> 00:00:23,600
And that's going to show me the location of the file right here.

9
00:00:23,870 --> 00:00:28,550
I am, of course, going to rename it to give it a test extension for TypeScript.

10
00:00:28,850 --> 00:00:29,810
And there we go.

11
00:00:30,260 --> 00:00:32,480
And let me collapse my menu on the left.

12
00:00:32,480 --> 00:00:35,930
And as I scroll down, we're going to see the familiar issues right here.

13
00:00:36,170 --> 00:00:41,600
TypeScript does not understand that we have just mock functions for the use store and use router or

14
00:00:41,600 --> 00:00:42,590
functions that were mocking.

15
00:00:42,830 --> 00:00:46,160
So we, of course, have to provide the separate declarations up above.

16
00:00:46,670 --> 00:00:51,860
So right here where we have our use store import as well as the mock out, I'm going to add an extra

17
00:00:51,860 --> 00:00:52,280
line.

18
00:00:52,430 --> 00:00:58,790
And I'm going to say const use store mock is going to be use store, but treated as a different type

19
00:00:58,790 --> 00:00:59,540
of just mock.

20
00:00:59,870 --> 00:01:07,700
And down below here can't use root or mock is going to be use router but also as a just mock type.

21
00:01:08,090 --> 00:01:13,100
And now all we have to do is replace all of our previous uses of use store with use star mock and use

22
00:01:13,100 --> 00:01:14,600
router, whether use root or mock.

23
00:01:14,900 --> 00:01:20,280
So scrolling down here, we're going to do use store mock here, use root or mock scroll down.

24
00:01:20,300 --> 00:01:21,230
Same thing here.

25
00:01:21,530 --> 00:01:25,610
You know, the drill probably would be easy to do this with the find and replace as well.

26
00:01:25,640 --> 00:01:27,110
But no problem at all.

27
00:01:27,440 --> 00:01:27,800
All right.

28
00:01:27,800 --> 00:01:29,510
So that's going to make those issues go away.

29
00:01:29,510 --> 00:01:32,750
And then we're going to see actually a brand new issue here.

30
00:01:32,960 --> 00:01:39,020
We can see here that we are invoking a method called set checked on this piece of template that we are

31
00:01:39,020 --> 00:01:39,830
pulling out here.

32
00:01:39,830 --> 00:01:45,050
In this case, it's the full time input, which is the HTML element that corresponds to this data just

33
00:01:45,050 --> 00:01:45,500
attribute.

34
00:01:45,770 --> 00:01:50,840
And you can see if I have on my mouse, you can see property set checked is private and only accessible

35
00:01:50,840 --> 00:01:51,590
within the class.

36
00:01:51,950 --> 00:01:57,140
So what this basically means is this is part of the object's private interface, which means it's a

37
00:01:57,140 --> 00:02:02,000
method that the developers of view test utils don't actually want you to use.

38
00:02:02,210 --> 00:02:07,040
You're technically able to use it because in JavaScript there is no real concept of privacy.

39
00:02:07,250 --> 00:02:11,030
So TypeScript says, Hey, this is something that they really want to be private.

40
00:02:11,030 --> 00:02:12,500
You really shouldn't be using it.

41
00:02:12,740 --> 00:02:18,860
And if I press command on my Mac and click into this, you're going to see the entire typed declaration

42
00:02:18,860 --> 00:02:25,010
for the actual test class or the test dom wrapper to be more specific that Vue test utils is utilizing.

43
00:02:25,160 --> 00:02:30,020
And you can see right here that set checked is private, which means it's part of the internal implementation

44
00:02:30,020 --> 00:02:31,490
of this DOM wrapper class.

45
00:02:31,670 --> 00:02:36,680
It's a method that the developers, if you test utils, want to use in their own code to help make things

46
00:02:36,680 --> 00:02:37,370
simpler for them.

47
00:02:37,520 --> 00:02:40,100
But they don't really want us to be using it on our end.

48
00:02:40,310 --> 00:02:43,250
And by the way, this is another great feature of TypeScript.

49
00:02:43,370 --> 00:02:47,090
It's TypeScript telling us, hey, there's probably a better way to do this, because the way you did

50
00:02:47,090 --> 00:02:51,290
it is kind of violating what the developers, if you test utils want you to do.

51
00:02:51,440 --> 00:02:54,680
It's violating the public API that they want you to utilize.

52
00:02:55,040 --> 00:02:57,170
Luckily, the solution for this is going to be pretty simple.

53
00:02:57,920 --> 00:03:03,380
Instead of invoking the set check method, there is an alternative method we can invoke and it is going

54
00:03:03,380 --> 00:03:03,980
to be called.

55
00:03:04,670 --> 00:03:07,340
We see here in my notes it's going to be called set value.

56
00:03:07,620 --> 00:03:08,240
It's right here.

57
00:03:08,240 --> 00:03:13,910
Instead of set checked, it's going to be set value and we're going to provide that with a boolean representing

58
00:03:14,420 --> 00:03:16,970
whether we want the actual input to be checked.

59
00:03:16,970 --> 00:03:19,130
Because remember, this is a checkbox.

60
00:03:19,310 --> 00:03:23,570
So by providing a value of true, that is equivalent to you checking the checkbox.

61
00:03:23,780 --> 00:03:26,030
So right here we are clicking to expand the accordion.

62
00:03:26,150 --> 00:03:30,800
We are finding the checkbox with the data test actually a full time and then we're setting its value

63
00:03:30,800 --> 00:03:32,990
to true, which basically means we are checking it.

64
00:03:33,350 --> 00:03:34,670
Same logic here.

65
00:03:34,670 --> 00:03:36,110
This is setting it to be checked.

66
00:03:36,140 --> 00:03:38,810
So right here I'm going to say set value is true.

67
00:03:39,110 --> 00:03:43,280
And that is the exact same thing to set a checkbox for the purposes of this test.

68
00:03:43,550 --> 00:03:49,280
And of course, the actual assertions here are verifying that the proper commit mutation has been called

69
00:03:49,460 --> 00:03:52,280
and as well as the navigation using the Router's push method.

70
00:03:52,670 --> 00:03:56,630
So with that, we should not have any more errors here, and it looks good.

71
00:03:56,870 --> 00:03:58,700
So I'm going to bring up my terminal.

72
00:03:59,750 --> 00:04:02,990
And as always, I'm going to run and run, test, call and watch.

73
00:04:03,710 --> 00:04:08,600
And it should detect the changes in our test file, which now has a test extension.

74
00:04:08,870 --> 00:04:09,830
There is our file.

75
00:04:09,890 --> 00:04:12,770
Let's let it run and everything is passing perfect.

76
00:04:12,770 --> 00:04:15,770
So that completes the refactor of the checkbox to component.

77
00:04:15,770 --> 00:04:17,360
And I will see you in the next lesson.
