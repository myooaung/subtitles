WEBVTT
1
00:00:00.410 --> 00:00:05.720
All right, so in this lesson, we'll learn how to declare types for arrays.

2
00:00:06.050 --> 00:00:11.990
Now, an array may seem like a data type, and indeed it is, but realize that it's actually an entire

3
00:00:11.990 --> 00:00:13.700
category of data types.

4
00:00:13.940 --> 00:00:19.340
For example, we can have an array of numbers, we can have an array of strings, we can have an array

5
00:00:19.340 --> 00:00:21.590
of booleans, we can have an array of objects.

6
00:00:21.800 --> 00:00:24.830
And when it comes to TypeScript, it likes to be pretty specific.

7
00:00:25.040 --> 00:00:29.660
So the more that we can help it by telling it what kind of array we have, the better.

8
00:00:29.990 --> 00:00:36.140
So, for example, if I simply declare a concert here called Foods and provide it with an empty array,

9
00:00:36.680 --> 00:00:42.230
typescript using type inference can figure out that we have an array, but it has no clue what kind

10
00:00:42.230 --> 00:00:44.600
of values we want to populate inside it.

11
00:00:44.960 --> 00:00:49.310
So if I hover my mouse over foods to get the typed declaration, we're going to see.

12
00:00:49.310 --> 00:00:51.640
It's going to think it's an any array.

13
00:00:51.770 --> 00:00:55.400
It's basically an array that can store any type of value.

14
00:00:55.430 --> 00:00:55.840
Right.

15
00:00:56.120 --> 00:01:01.730
And you can see the syntax in the little highlighted box is going to be the type of any followed by

16
00:01:01.730 --> 00:01:04.760
the square brackets, which basically indicates an array.

17
00:01:04.970 --> 00:01:07.880
And that's going to be the syntax for declaring an array of a given type.

18
00:01:08.030 --> 00:01:12.420
We write that type, for example, string or number followed by square brackets.

19
00:01:12.440 --> 00:01:13.550
We're going to see that in a second.

20
00:01:13.880 --> 00:01:18.500
This is just to show you that if we declare an array just by itself with nothing inside it, TypeScript

21
00:01:18.500 --> 00:01:21.180
cannot make the best guess for what it's supposed to contain.

22
00:01:21.530 --> 00:01:24.560
But take a look at what happens as soon as I provide a sample value.

23
00:01:24.770 --> 00:01:31.700
For example, if I provide a string like Hello now TypeScript can figure out because you assigned me

24
00:01:31.700 --> 00:01:38.270
an array with a string, I can assume that foods is going to be an array of strings so that if I hover

25
00:01:38.270 --> 00:01:43.670
my mouse over this, you're going to see it's now going to update that from being an any array to a

26
00:01:43.670 --> 00:01:44.570
string array.

27
00:01:44.690 --> 00:01:48.950
Notice it has the word string followed by these square brackets, a string array.

28
00:01:49.130 --> 00:01:49.430
Right.

29
00:01:49.610 --> 00:01:52.340
And thus check out what's going to happen in the next line.

30
00:01:52.340 --> 00:01:58.520
If I invoke the push method and I try to push in something like the word world, that's totally fine

31
00:01:58.520 --> 00:02:01.430
because foods is going to be an array of strings.

32
00:02:01.430 --> 00:02:02.240
That's totally fine.

33
00:02:02.420 --> 00:02:09.170
However, if I tried to push something like a number value like five five is not a string.

34
00:02:09.320 --> 00:02:14.930
And we told TypeScript, or rather TypeScript inferred that the food array was going to be an array

35
00:02:14.930 --> 00:02:15.890
of only strings.

36
00:02:16.100 --> 00:02:20.470
So now if I hover, my mouse over five will see it says argument of type number.

37
00:02:20.480 --> 00:02:25.970
In other words, the value five that you gave as an argument to the push method is not assignable to

38
00:02:25.970 --> 00:02:27.560
a parameter of type string.

39
00:02:27.890 --> 00:02:35.060
So TypeScript inferred that because you have an array of strings and the push method appends a value

40
00:02:35.060 --> 00:02:40.460
to the end of that array of strings, that parameter that you provide to push must also be a string

41
00:02:40.670 --> 00:02:43.430
to conform to the standard that is inferred above.

42
00:02:43.550 --> 00:02:48.050
And thus, if we have an array of strings, we can't simply add on a numeric value.

43
00:02:48.590 --> 00:02:48.860
All right.

44
00:02:48.860 --> 00:02:54.560
And hopefully this is starting to again give you more ideas of how TypeScript can quickly catch errors

45
00:02:54.560 --> 00:02:55.280
in your code.

46
00:02:55.460 --> 00:03:01.310
Right now, as far as manually declaring the type, you guessed it, it's simply going to be the exact

47
00:03:01.310 --> 00:03:02.750
same syntax we've seen before.

48
00:03:02.990 --> 00:03:08.060
After our variable name or a constant, we're going to put a colon followed by the type.

49
00:03:08.060 --> 00:03:13.220
So if you want to be explicit here and we want a string array, remember we provide the data type.

50
00:03:13.220 --> 00:03:17.840
It's going to be a string, not not a string by itself, but a string array.

51
00:03:17.960 --> 00:03:20.120
So we need to provide the square brackets afterwards.

52
00:03:20.300 --> 00:03:24.320
So neither string nor the square brackets by itself will work.

53
00:03:24.320 --> 00:03:28.970
You literally need to provide string for byte followed by square brackets, and that kind of makes sense

54
00:03:28.970 --> 00:03:29.600
logically.

55
00:03:29.780 --> 00:03:34.970
Reading it from left to right, string array, right string followed by the brackets for right.

56
00:03:35.240 --> 00:03:37.640
So again, this is just the type declaration.

57
00:03:37.640 --> 00:03:40.310
This is just telling TypeScript what it is, right?

58
00:03:40.310 --> 00:03:41.630
This is the actual value.

59
00:03:41.630 --> 00:03:46.130
This is the concrete thing that we're creating the real array with the real value inside it.

60
00:03:46.310 --> 00:03:47.360
This is just the type.

61
00:03:47.540 --> 00:03:53.210
This is us describing to TypeScript what the data is, not the actual exact value that it has.

62
00:03:53.390 --> 00:03:53.720
All right.

63
00:03:53.930 --> 00:03:55.460
Otherwise the same rules apply.

64
00:03:55.640 --> 00:04:01.400
I can, for example, push in anything else here and that will work.

65
00:04:01.790 --> 00:04:04.340
And as you guessed it, the exact same rules apply for anything else.

66
00:04:04.340 --> 00:04:08.810
So for example, if I want an array of numbers, I provide a colon than my type.

67
00:04:08.810 --> 00:04:10.640
I want a number array.

68
00:04:10.640 --> 00:04:17.150
And then here I can provide some initial values like four, eight, 15, 16, 23, 42 once again, if

69
00:04:17.150 --> 00:04:22.190
we did not provide this type, typescript would still be able to infer that we have an array of numbers

70
00:04:22.310 --> 00:04:24.500
based on the original assignment.

71
00:04:24.740 --> 00:04:29.360
If we do not provide an assignment, TypeScript cannot guess what it is, and if we provide an assignment

72
00:04:29.360 --> 00:04:33.500
of an array, TypeScript can guess that it's an array, but not what it's supposed to hold.

73
00:04:33.620 --> 00:04:39.080
So it's going to fall back to an any array, an array that can hold any combination of different values

74
00:04:39.080 --> 00:04:39.770
of different types.

75
00:04:40.250 --> 00:04:40.520
All right.

76
00:04:40.520 --> 00:04:44.330
So that's how you declare a type declaration for an array in TypeScript.
