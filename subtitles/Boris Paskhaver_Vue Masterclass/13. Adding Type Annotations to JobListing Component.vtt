WEBVTT
1
00:00:00.570 --> 00:00:01.170
Okay.

2
00:00:01.170 --> 00:00:05.610
So the next component that we're going to update will be our job listing component.

3
00:00:06.030 --> 00:00:09.510
So immediately, let's open up job listing dot view.

4
00:00:09.870 --> 00:00:16.110
And as a reminder, this is the component that accepts a single job object as a prop and it renders

5
00:00:16.110 --> 00:00:21.360
its relevant details such as the jobs title, its organization, its locations, etc..

6
00:00:21.720 --> 00:00:27.510
Now, if I scroll down here, we're going to get to our script section and let's begin by implementing

7
00:00:27.510 --> 00:00:28.620
our usual code.

8
00:00:28.980 --> 00:00:34.320
So right here I'm going to add a lang, add to it set to task, and I'm going to import defined component

9
00:00:35.400 --> 00:00:37.590
and I'm going to invoke it and pass in my.

10
00:00:38.720 --> 00:00:40.100
Configuration object.

11
00:00:40.110 --> 00:00:40.790
There we go.

12
00:00:41.150 --> 00:00:44.330
And by default, you can see we're not going to get any specific errors.

13
00:00:44.540 --> 00:00:48.530
However, we are not actually going to reap all the benefits of TypeScript.

14
00:00:48.860 --> 00:00:54.680
So this defined component function is beneficial because it informs TypeScript about the more specific

15
00:00:54.680 --> 00:00:57.590
details of our configuration.

16
00:00:57.860 --> 00:01:03.650
And you may recall that we have this prop section here, which is almost like views on implementation

17
00:01:03.650 --> 00:01:04.850
of type checking.

18
00:01:05.000 --> 00:01:08.360
So this is not part of TypeScript, this is regular view syntax.

19
00:01:08.540 --> 00:01:14.030
And what we're saying here is that this component should expect to receive a job prop from its parent.

20
00:01:14.180 --> 00:01:16.010
That is going to be of type object.

21
00:01:16.340 --> 00:01:21.890
But unfortunately, object is not really as specific as we can get here because we're not going to just

22
00:01:21.890 --> 00:01:23.690
have a regular JavaScript object.

23
00:01:23.870 --> 00:01:27.530
We're going to have a job object that has the job interface.

24
00:01:27.740 --> 00:01:28.730
That's what we defined.

25
00:01:28.730 --> 00:01:35.810
Remember in our types file, if I open up types in our API folder, we have this specific job object

26
00:01:35.810 --> 00:01:40.490
flowing in, not just any regular JavaScript object, but an object with all these properties.

27
00:01:40.700 --> 00:01:43.790
Unfortunately, job here is a typescript construct.

28
00:01:43.790 --> 00:01:45.050
It is an interface, right?

29
00:01:45.290 --> 00:01:51.050
So we can't just simply say that the type here is job because this is regular view code, which is regular

30
00:01:51.050 --> 00:01:52.040
JavaScript code.

31
00:01:52.280 --> 00:01:56.390
There's no concept of interfaces in JavaScript, only in TypeScript.

32
00:01:56.540 --> 00:02:00.380
So we used this code earlier in the course because it was the best that we can do.

33
00:02:00.650 --> 00:02:05.540
However, TypeScript doesn't understand that this is going to be specifically a job, so it can't really

34
00:02:05.540 --> 00:02:08.120
validate, for example, what idea is going to be.

35
00:02:08.360 --> 00:02:12.560
It assumes that job is going to be some kind of object with properties, and thus it's going to say,

36
00:02:12.560 --> 00:02:18.050
Hey, this object may have an ID property and that may, if it exists, is going to add value to some

37
00:02:18.050 --> 00:02:18.950
kind of data type.

38
00:02:18.950 --> 00:02:22.730
In this case, any and if it doesn't exist, it's going to simply be undefined.

39
00:02:22.940 --> 00:02:26.870
So it's not complaining about this syntax right here in our setup method.

40
00:02:27.050 --> 00:02:33.140
However, it has no clue what ID is and it has no clue that job is actually a specific job object.

41
00:02:33.380 --> 00:02:39.590
That syntax you see on the right here where it says record with string any is basically TypeScript saying,

42
00:02:39.710 --> 00:02:44.000
I'm inferring that this is going to be some kind of object that's going to have string properties,

43
00:02:44.150 --> 00:02:46.460
but that applies to all JavaScript objects.

44
00:02:46.640 --> 00:02:52.610
We want to specifically have TypeScript know that this is a job object, so how can we do that while

45
00:02:52.610 --> 00:02:56.180
still using the old school view syntax we have right here?

46
00:02:56.450 --> 00:03:01.970
In order to accomplish that, we're going to need to import a special type from view called prop type.

47
00:03:03.220 --> 00:03:08.140
And the way it's going to work is we're going to use the as a keyword, which we've explored many times

48
00:03:08.140 --> 00:03:12.790
throughout the course, and that's going to tell TypeScript to interpret a type as something else.

49
00:03:13.060 --> 00:03:17.680
So right here, I'm going to say as prop type and this is going to be the syntax.

50
00:03:17.680 --> 00:03:24.250
Any single time you want to clarify that an object prop is going to be a more specific object that honors

51
00:03:24.250 --> 00:03:24.910
an interface.

52
00:03:25.210 --> 00:03:29.440
But how do we actually provide that specific object, shape or object type?

53
00:03:29.590 --> 00:03:32.770
We do that as a generic type argument to prop type.

54
00:03:32.980 --> 00:03:35.050
So right here I'm going to provide my brackets.

55
00:03:35.200 --> 00:03:38.050
And of course here we need to provide our job interface.

56
00:03:38.290 --> 00:03:40.840
So what I'm going to do is import that job interface.

57
00:03:41.200 --> 00:03:47.980
This is a interface defined in TypeScript and it lives in our source directory API folder and the types

58
00:03:47.980 --> 00:03:48.320
file.

59
00:03:48.400 --> 00:03:53.800
So this is a TypeScript interface and this is TypeScript syntax, but that's totally fine because we

60
00:03:53.800 --> 00:03:55.090
added this Lang attribute.

61
00:03:55.300 --> 00:03:58.270
So Vue knows to process this whole thing as TypeScript.

62
00:03:58.420 --> 00:04:03.430
Specifically this section, it's going to be able to interpret which regular JavaScript would not be

63
00:04:03.430 --> 00:04:04.060
able to do.

64
00:04:04.300 --> 00:04:10.600
So right here I'm going to say prop type job, and now we are going to tell TypeScript in combination

65
00:04:10.600 --> 00:04:13.720
with the defined component function, that this is more than an object.

66
00:04:13.840 --> 00:04:14.830
This is a prop.

67
00:04:15.010 --> 00:04:19.780
It's a prop type, which means it's a data type that is fundamentally a prop that implements the job

68
00:04:19.780 --> 00:04:20.200
interface.

69
00:04:20.380 --> 00:04:26.620
And immediately when we go to the setup method, TypeScript now knows that props that job is now a job

70
00:04:26.620 --> 00:04:27.100
object.

71
00:04:27.280 --> 00:04:32.410
Notice how it updated the type here from being that record thing, which is a built in typescript keyword

72
00:04:32.590 --> 00:04:34.510
to now knowing it's a job object.

73
00:04:34.720 --> 00:04:40.600
Which means when we access it now and now knows that it's not just any data type, it knows that it's

74
00:04:40.600 --> 00:04:46.750
a number because that's how we defined the ID property in our actual implementation or definition of

75
00:04:46.750 --> 00:04:47.680
the job interface.

76
00:04:47.830 --> 00:04:50.830
Here we said ideas a number, TypeScript and Vue.

77
00:04:50.830 --> 00:04:56.950
Now know that job is a job object so it knows that ID must be a number and it can perform again more

78
00:04:56.950 --> 00:05:01.990
in-depth, more precise type checking because it has a better sense of what's going on.

79
00:05:01.990 --> 00:05:04.060
Now we're being more precise and telling it.

80
00:05:04.060 --> 00:05:06.010
It's not just an object, it's a job.

81
00:05:06.900 --> 00:05:07.290
All right.

82
00:05:07.470 --> 00:05:08.740
So that's all we need to do here.

83
00:05:08.760 --> 00:05:11.940
Of course, the next step is updating the corresponding test suite.

84
00:05:12.180 --> 00:05:16.280
So immediately, let's open up job listing that test that.

85
00:05:16.290 --> 00:05:16.710
Yes.

86
00:05:17.040 --> 00:05:22.440
Make sure that you're targeting the singular job listing a file because there is a job listings component

87
00:05:22.440 --> 00:05:23.220
in our app as well.

88
00:05:23.580 --> 00:05:27.240
And immediately what I'm going to do is change is to have ATS extension.

89
00:05:28.320 --> 00:05:29.010
So there we go.

90
00:05:29.370 --> 00:05:31.890
And we run into a couple interesting scenarios here.

91
00:05:32.130 --> 00:05:38.160
The first is we have this factory function called Create Job Props, which is basically creating a job

92
00:05:38.160 --> 00:05:43.950
object for the use case of being used right here in our create config factory function as well.

93
00:05:44.280 --> 00:05:49.320
So as a sample use case right here in our first test, we're using the create job props factory function

94
00:05:49.500 --> 00:05:55.230
to create a sample job and then feeding that job object into create config where it becomes the properties

95
00:05:55.230 --> 00:05:56.460
that are structured here.

96
00:05:56.790 --> 00:06:01.410
Well, luckily as you may recall, we have a utils file in our test directory.

97
00:06:01.860 --> 00:06:08.970
If I go to utils and it's found somewhere in here, test slice units that store here we have create

98
00:06:08.970 --> 00:06:14.160
job function which we extract it to this utils file that serves the exact same purpose.

99
00:06:14.400 --> 00:06:20.220
There is now multiple tests that need to create a job object that honors all of the properties of a

100
00:06:20.220 --> 00:06:21.120
real world job.

101
00:06:21.270 --> 00:06:22.770
And this function does the trick.

102
00:06:22.980 --> 00:06:28.650
In other words, we have a little bit of duplication because this functionality now is the exact same

103
00:06:28.650 --> 00:06:31.470
thing that we created this function to help us out with.

104
00:06:31.740 --> 00:06:37.800
So let's go ahead and replace create job props with our Create Job Helper function throughout this file.

105
00:06:38.040 --> 00:06:42.900
So what I'm going to do up here is I'm going to begin by importing that function.

106
00:06:42.900 --> 00:06:45.750
So right here, import, create job.

107
00:06:46.470 --> 00:06:49.890
And again, this is within our test directory, not our source directory.

108
00:06:49.890 --> 00:06:51.900
So I'm going to use relative imports here.

109
00:06:52.170 --> 00:06:57.660
So if I go up to directories here and then go into my store directory, that's where my utils directory

110
00:06:57.660 --> 00:06:58.050
is.

111
00:06:58.050 --> 00:07:03.030
Or more specifically, my apologies, the utils that's file which I have open here on the left and I'm

112
00:07:03.030 --> 00:07:05.040
importing this function from that file.

113
00:07:05.370 --> 00:07:08.460
With that, let's go ahead and remove create job props right here.

114
00:07:10.200 --> 00:07:16.440
And if my intention is to use create job down below and know that it will always return to me a real

115
00:07:16.440 --> 00:07:18.840
job object right here that honors all the properties.

116
00:07:19.080 --> 00:07:23.830
I can say right here the job props will always live up to being a job object.

117
00:07:24.030 --> 00:07:27.630
Of course, in order to do that, I'm going to need to import the interface for job as well.

118
00:07:27.900 --> 00:07:32.730
So right here I'm going to import Job and that is an interface that we're going to get from the source

119
00:07:32.730 --> 00:07:34.530
directory API types.

120
00:07:34.890 --> 00:07:39.390
In fact, let me drag this a little bit up because it feels a little bit better to drag all of the source

121
00:07:39.390 --> 00:07:41.880
directory imports and separate them from our test imports.

122
00:07:42.180 --> 00:07:45.360
So again, create config is going to accept a job props object.

123
00:07:45.360 --> 00:07:46.440
In fact, let's add that.

124
00:07:46.560 --> 00:07:48.120
Update that to simply be job.

125
00:07:48.360 --> 00:07:52.420
And we're going to declare the type of that as being the job interface.

126
00:07:52.530 --> 00:07:52.950
All right.

127
00:07:53.250 --> 00:07:59.370
And we don't necessarily need any additional config here because we're going to be able to have a real

128
00:07:59.370 --> 00:08:02.610
job passed in by using our create job factory function.

129
00:08:02.850 --> 00:08:08.580
We also have the change this former reference from dot, dot, dot job to simply or rather remove the

130
00:08:08.580 --> 00:08:08.910
prop.

131
00:08:08.910 --> 00:08:10.390
So now it's dot, dot, dot job.

132
00:08:10.410 --> 00:08:10.920
There we go.

133
00:08:11.640 --> 00:08:16.320
And then all that's left to do is anywhere where we were using the former create job props function.

134
00:08:16.440 --> 00:08:19.140
We now replace it with our helper util function right here.

135
00:08:19.140 --> 00:08:20.130
Concrete job.

136
00:08:20.510 --> 00:08:20.970
Right here.

137
00:08:20.970 --> 00:08:23.520
Instead of create job props, this is going to be create job.

138
00:08:23.700 --> 00:08:28.860
We can also change our variable here as well to job, which means here when we are invoking create config,

139
00:08:28.860 --> 00:08:30.300
we simply want to pass in our job.

140
00:08:30.450 --> 00:08:35.760
It's going to live up to being a full job object because whatever properties we don't provide are going

141
00:08:35.760 --> 00:08:39.210
to be filled in by these default values in our helper function.

142
00:08:39.480 --> 00:08:42.270
So we're going to overwrite title right here with The View Programmer.

143
00:08:42.390 --> 00:08:45.090
So that's going to overwrite Angular Developer right here.

144
00:08:45.300 --> 00:08:49.470
But we are going to keep all of the other properties and that fulfills the interface of what a job must

145
00:08:49.470 --> 00:08:49.710
be.

146
00:08:50.070 --> 00:08:52.500
So scrolling down once again, change this to job.

147
00:08:52.950 --> 00:08:54.330
Change this to create job.

148
00:08:55.380 --> 00:08:56.520
Change this to job.

149
00:08:57.670 --> 00:09:03.820
Down below changes to job change this to create job changes to job as well.

150
00:09:04.780 --> 00:09:05.320
There we go.

151
00:09:05.590 --> 00:09:11.200
Scrolling down a couple more left, changes to create job changes to just being a job content that we

152
00:09:11.200 --> 00:09:13.900
feed in right here to the create config factory function.

153
00:09:14.290 --> 00:09:15.130
Scroll down again.

154
00:09:15.130 --> 00:09:15.840
Last test.

155
00:09:15.850 --> 00:09:19.030
This is going to be the create job factory function on the left.

156
00:09:19.480 --> 00:09:21.100
It's going to be a job contract.

157
00:09:21.580 --> 00:09:25.840
And right here we're going to pass in that job object to our create config, which will create a config

158
00:09:25.840 --> 00:09:26.560
just for the test.

159
00:09:26.920 --> 00:09:27.670
Save that.

160
00:09:27.880 --> 00:09:32.440
And if I scroll up it looks like everything is passing with no types with violations.

161
00:09:32.560 --> 00:09:37.000
We've also removed some duplicate code and just kept the regular config set up right here.

162
00:09:37.270 --> 00:09:42.010
It actually gets me thinking that maybe if we identify a lot of similarity between our test configs,

163
00:09:42.190 --> 00:09:45.940
maybe this could be another util function that we eventually extract to this file.

164
00:09:46.090 --> 00:09:47.200
Some here, right here.

165
00:09:47.410 --> 00:09:53.500
If we can figure out what or how we can write it in such a way that tests would be able to customize

166
00:09:53.650 --> 00:09:56.020
which aspects of the configuration they care about.

167
00:09:56.200 --> 00:09:57.640
But that's a problem for another day.

168
00:09:57.820 --> 00:10:04.390
For now, let's go ahead and run NPM, run, test, colon, watch so that we can see if our job listing

169
00:10:04.390 --> 00:10:06.190
tests are still working.

170
00:10:06.790 --> 00:10:07.210
All right.

171
00:10:07.210 --> 00:10:07.780
So there we go.

172
00:10:07.780 --> 00:10:12.460
We have two test suites and everything is still passing perfect.

173
00:10:12.670 --> 00:10:14.590
So we've cleaned up our job list and component.

174
00:10:14.710 --> 00:10:20.050
It now uses TypeScript and we've also cleaned up our job listing test suite and now uses our create

175
00:10:20.050 --> 00:10:21.430
job, that utility function.

176
00:10:21.670 --> 00:10:24.130
And I also simplifies a little bit of the code in there as well.

177
00:10:24.550 --> 00:10:24.820
All right.

178
00:10:24.820 --> 00:10:26.350
That's all there is to cover in this lesson.

179
00:10:26.350 --> 00:10:28.060
So I will see you in the next one.
