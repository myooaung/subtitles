WEBVTT
1
00:00:01.140 --> 00:00:01.650
Okay.

2
00:00:01.650 --> 00:00:08.790
So you may recall that in our original implementation of the accordion component using the options API,

3
00:00:09.030 --> 00:00:12.330
this header text right here was actually a prop.

4
00:00:12.450 --> 00:00:18.300
It was an input that every parent component would provide to an accordion whenever it rendered it.

5
00:00:18.570 --> 00:00:22.620
So here where we used header, this was simply for the sake of example.

6
00:00:22.890 --> 00:00:28.470
So in this lesson I want to remove this line of code and get back to using the regular header prop that

7
00:00:28.470 --> 00:00:30.930
flows into every rendered accordion component.

8
00:00:31.230 --> 00:00:33.060
Luckily, there's nothing we have to do.

9
00:00:33.060 --> 00:00:37.440
We just have to incorporate this original piece of code back into our implementation.

10
00:00:37.710 --> 00:00:42.990
This, as a reminder, is where we declare the expected props into this component.

11
00:00:43.500 --> 00:00:48.690
And the reason we're getting a complaint here is because Iceland wants us to place this before our setup

12
00:00:48.690 --> 00:00:49.110
function.

13
00:00:49.500 --> 00:00:53.730
So right here I'm going to cut and paste this in-between name and set up like so.

14
00:00:54.450 --> 00:01:00.300
And as a reminder, our props, a property here on our configuration object is just an object with a

15
00:01:00.300 --> 00:01:01.860
bunch of prop properties.

16
00:01:01.860 --> 00:01:04.620
So here what we're saying is we're expecting a header prop.

17
00:01:04.740 --> 00:01:08.280
It's going to be a type string and it's going to be required.

18
00:01:08.340 --> 00:01:12.870
Right now, the reason we're getting this is land violation, of course, is because if led to saying,

19
00:01:13.020 --> 00:01:17.730
hey, you're getting a header prop and you're also providing a piece of data called header right here.

20
00:01:18.060 --> 00:01:20.010
So let's go ahead and remove header right here.

21
00:01:20.940 --> 00:01:23.880
And let's also remove this ref creation right here.

22
00:01:24.510 --> 00:01:27.690
And it's going to work exactly as it did in the original implementation.

23
00:01:27.840 --> 00:01:32.400
The header string that flows in is going to be the one we render right here.

24
00:01:32.910 --> 00:01:33.240
All right.

25
00:01:33.240 --> 00:01:35.820
So with that, if we transition back to our browser.

26
00:01:38.000 --> 00:01:39.230
Maybe refresh the page.

27
00:01:40.330 --> 00:01:46.660
We can see that we have our original header prop values coming in, we have degree, we have job types,

28
00:01:46.660 --> 00:01:52.780
we have organizations, our carrot is working, our expandability is working, which means all of our

29
00:01:52.780 --> 00:01:54.280
logic is still intact.

30
00:01:54.280 --> 00:01:58.540
Everything looks correct to me as I check here and check here and expand here.

31
00:01:58.840 --> 00:02:05.890
So basically we have successfully replaced our old implementation in the accordion with our new composition

32
00:02:05.890 --> 00:02:06.580
API.

33
00:02:06.760 --> 00:02:07.120
All right.

34
00:02:07.120 --> 00:02:08.470
So that is fantastic news.

35
00:02:08.830 --> 00:02:14.170
And what that means in this component is that we are clear to remove our former implementation that

36
00:02:14.170 --> 00:02:15.250
we have commented out.

37
00:02:15.550 --> 00:02:19.030
So before we do that, I just want us to quickly compare the before and after.

38
00:02:19.180 --> 00:02:23.470
Here is the before and here is the after in our setup method.

39
00:02:23.470 --> 00:02:25.930
So let's delete this logic right here.

40
00:02:27.100 --> 00:02:33.250
And it may not seem readily apparent, but I think we can start to get the sense that using the composition

41
00:02:33.250 --> 00:02:37.570
API, we do have what I think is a slightly simpler setup.

42
00:02:37.570 --> 00:02:37.900
Right?

43
00:02:38.140 --> 00:02:43.990
The beautiful part about this logic is instead of scattering our data, our methods and our computer

44
00:02:43.990 --> 00:02:50.710
properties in separate configurations in the old options API, we now have the logic a little bit closer

45
00:02:50.710 --> 00:02:51.220
together.

46
00:02:51.430 --> 00:02:56.620
So here we can see that we have is open, that we're using it in this open method and that we are referencing

47
00:02:56.620 --> 00:02:58.540
it in this computed function right here.

48
00:02:58.810 --> 00:03:05.470
And similarly, if we had another piece of data and another method that worked on it and another computed

49
00:03:05.980 --> 00:03:11.680
property or computed function rather that depended on it, we can sort of lodge that logic together,

50
00:03:11.950 --> 00:03:13.420
you know, right here.

51
00:03:13.750 --> 00:03:21.310
And that way we can combine or organize related ideas close to each other, which makes it a lot easier

52
00:03:21.310 --> 00:03:22.570
to see how the related.

53
00:03:22.810 --> 00:03:28.840
Again, imagine a component that has ten pieces of data and ten computed properties in ten methods and

54
00:03:28.840 --> 00:03:32.650
maybe that are organized where, you know, three pieces of data need three methods.

55
00:03:32.650 --> 00:03:35.650
And for computed properties, the larger component grows.

56
00:03:35.650 --> 00:03:40.900
The larger it becomes difficult to understand the connections between those pieces because the original

57
00:03:40.900 --> 00:03:48.010
options API forces us to break them up across those different sections, data, computed methods, etc.

58
00:03:48.220 --> 00:03:53.200
Now in our single setup method, we can sort of organize them together, so it becomes a little bit

59
00:03:53.200 --> 00:03:55.300
easier to see how they are related to each other.

60
00:03:55.450 --> 00:04:00.910
And later on we'll see how we can even improve on this design by extracting some of this logic outside

61
00:04:00.910 --> 00:04:01.840
of the component.

62
00:04:02.230 --> 00:04:02.560
All right.

63
00:04:02.560 --> 00:04:04.210
But this is our basic refactor.

64
00:04:05.290 --> 00:04:10.540
And if it isn't apparent, there is sort of this analogous relationship between what we have here,

65
00:04:10.810 --> 00:04:12.880
as well as the old options API.

66
00:04:13.150 --> 00:04:19.060
So you can think of RAF as being effectively the equivalent of what data was in the options API.

67
00:04:19.240 --> 00:04:25.960
It's some kind of a value that is intended to be reactive that is going to change over time and we want

68
00:04:25.960 --> 00:04:29.440
to monitor those changes and how that affect the template in some way.

69
00:04:29.590 --> 00:04:34.540
Either we want to render that piece of information or we want to use it in something like a directive

70
00:04:34.540 --> 00:04:35.110
like VRF.

71
00:04:35.290 --> 00:04:39.820
The point is it is equivalent to data in the sense that it has some kind of value that is going to be

72
00:04:39.820 --> 00:04:40.840
changing over time.

73
00:04:41.230 --> 00:04:46.540
As far as a function here, this function of open is analogous to a method in the options API.

74
00:04:46.750 --> 00:04:52.540
It is a basic JavaScript function whose responsibility it is to modify a piece of data.

75
00:04:52.570 --> 00:04:57.670
Except in this case, our data is not coming from our data section, it's coming from our basic RAF

76
00:04:57.670 --> 00:04:59.290
function invocations right here.

77
00:04:59.680 --> 00:05:05.380
And finally, the computed function is, you guessed it, it's basically the analogous complimentary

78
00:05:05.500 --> 00:05:08.950
thing in the composition API for computed properties.

79
00:05:09.130 --> 00:05:13.570
But instead of having a separate section that we just now declare the computed function and we reuse

80
00:05:13.570 --> 00:05:19.480
it whenever we want to use existing data and reactive objects such as is open as the basis for some

81
00:05:19.480 --> 00:05:20.770
other derived data.

82
00:05:21.070 --> 00:05:27.700
So it's almost this like 1 to 1 mapping this 1 to 1 association refs, to data functions, to methods

83
00:05:27.850 --> 00:05:29.980
and computed function to computed properties.

84
00:05:30.190 --> 00:05:35.200
But of course written in a more traditional vanilla JavaScript sense that's less knowledgeable about

85
00:05:35.200 --> 00:05:35.590
view.

86
00:05:35.770 --> 00:05:38.800
And that's one of the reasons why a lot of people like the composition API.

87
00:05:38.800 --> 00:05:39.040
Is it?

88
00:05:39.190 --> 00:05:40.480
It can be pretty simple, right?

89
00:05:40.630 --> 00:05:45.940
Once you remember that a reactive object has a value property, then a method becomes as simple as a

90
00:05:45.940 --> 00:05:50.500
basic JavaScript function that just alters the value property on that reactive object.

91
00:05:50.500 --> 00:05:50.860
Right?

92
00:05:51.460 --> 00:05:56.710
So it is taking a more functional approach, a more vanilla barebones JavaScript approach that also

93
00:05:56.710 --> 00:06:00.460
allows us to organize related code together in the setup function.

94
00:06:00.940 --> 00:06:01.300
All right.

95
00:06:01.300 --> 00:06:03.460
So hopefully this has been a beneficial exercise.

96
00:06:03.460 --> 00:06:08.560
I think this was a really good way to introduce us to Composition API instead of wiring up anything

97
00:06:08.560 --> 00:06:09.160
from scratch.

98
00:06:09.160 --> 00:06:14.860
We got to compare the before and after of the Options API implementation and now the composition API

99
00:06:14.860 --> 00:06:20.050
implementation while getting a sense of what the pieces of it are and how they specifically work.

100
00:06:20.260 --> 00:06:20.590
All right.

101
00:06:20.860 --> 00:06:22.570
So the all there is to cover in this lesson.

102
00:06:22.570 --> 00:06:24.190
So I will see you in the next one.
