WEBVTT
1
00:00:00.450 --> 00:00:01.260
Okay.

2
00:00:01.260 --> 00:00:04.920
So congratulations on reaching the end of another core section.

3
00:00:05.070 --> 00:00:09.360
In this section, we got introduced to the basics of the Composition API.

4
00:00:09.600 --> 00:00:14.730
But don't worry if some of these ideas still feel a little fresh, we're going to have plenty of chances

5
00:00:14.730 --> 00:00:18.480
to review them as we refactor more components throughout our app.

6
00:00:18.840 --> 00:00:23.190
For now, let's take a few minutes to review everything that we learned in this section.

7
00:00:23.520 --> 00:00:28.260
So the composition API offers us a new way to build the view components in view.

8
00:00:28.500 --> 00:00:34.050
It complements the existing options API, so it is designed to live alongside it.

9
00:00:34.200 --> 00:00:35.790
You're not obligated to use it.

10
00:00:35.970 --> 00:00:41.460
There is no announcement or any current plans to deprecate or remove the options API.

11
00:00:41.700 --> 00:00:47.580
The composition API simply offered offers an alternative way to build Vue components and it can sometimes

12
00:00:47.580 --> 00:00:49.860
be beneficial because of the way it's designed.

13
00:00:50.280 --> 00:00:51.210
So how does it work?

14
00:00:51.240 --> 00:00:57.150
We define all of our logic in a setup method in the component file, and with that approach we of course

15
00:00:57.180 --> 00:01:04.080
get rid of all of the old features of the options API like the data method, computed properties, methods,

16
00:01:04.080 --> 00:01:07.620
etc. We put all of our logic inside the setup method.

17
00:01:08.220 --> 00:01:09.150
So how does that work?

18
00:01:09.390 --> 00:01:12.150
While the setup method does not have access to the this keyword.

19
00:01:12.150 --> 00:01:16.830
So we're going to have to wire up all our logic inside it using plain JavaScript concepts.

20
00:01:17.220 --> 00:01:21.300
So for example, we use the ref function to define a piece of reactive state.

21
00:01:21.480 --> 00:01:26.730
In other words, data that is going to change over time that is somehow going to affect our template.

22
00:01:26.760 --> 00:01:29.370
Maybe it's a piece of data that's going to be rendered.

23
00:01:29.580 --> 00:01:33.240
Or maybe it's a boolean that we're going to use in a VRF directive.

24
00:01:33.480 --> 00:01:34.470
It doesn't really matter.

25
00:01:34.470 --> 00:01:39.330
It's just a piece of state that has to live on the JavaScript side of things that's going to interact

26
00:01:39.330 --> 00:01:40.560
with our HTML template.

27
00:01:40.920 --> 00:01:47.550
So you can almost think of the ref function as analogous or similar or comparable to what data does

28
00:01:47.550 --> 00:01:48.900
in the options API.

29
00:01:49.050 --> 00:01:53.670
It kind of initializes the starting state of something that's going to change over time.

30
00:01:54.420 --> 00:01:59.640
So we use Ref to create an initial starting value, but how do we update that value when it's time for

31
00:01:59.640 --> 00:02:00.210
it to change?

32
00:02:00.540 --> 00:02:01.500
In order to do that.

33
00:02:01.680 --> 00:02:07.500
We simply use plain JavaScript functions to operate on and change that reactive data that we create

34
00:02:07.500 --> 00:02:08.100
with ref.

35
00:02:08.490 --> 00:02:13.950
But remember, because we're dealing with reactive objects, we have to read or write the value property

36
00:02:14.070 --> 00:02:16.290
on each one of those respective objects.

37
00:02:16.620 --> 00:02:22.380
So these plain JavaScript functions are analogous to or comparable to methods in the Options API.

38
00:02:22.620 --> 00:02:28.680
And that's one of the benefits of the composition API, is that it uses a lot more simpler basic JavaScript

39
00:02:28.680 --> 00:02:29.280
concepts.

40
00:02:29.430 --> 00:02:33.780
It's just a basic function that's going to set a value property on an object.

41
00:02:33.900 --> 00:02:39.810
That's how we update an object that is reactive, and Vue automatically knows to track that and to update

42
00:02:39.810 --> 00:02:44.790
that, for example, in our template, simply because that reactive object state has changed.

43
00:02:45.570 --> 00:02:51.720
Finally, we saw that we can use the computed function to rerun logic whenever a reactive piece of state

44
00:02:51.720 --> 00:02:52.200
changes.

45
00:02:52.530 --> 00:02:56.970
So once again, we don't want to use computed whenever we have original state, we want to use it when

46
00:02:56.970 --> 00:03:03.270
we have derive state dependent state state that needs other data to exist in order to formulate itself.

47
00:03:03.690 --> 00:03:08.400
So we passed the computed function, a function as an argument, and that's the function that we're

48
00:03:08.400 --> 00:03:12.360
telling Vue to re invoke whenever a piece of state changes.

49
00:03:12.570 --> 00:03:17.940
Now, if you are going to keep track of the actual piece of state that you reference inside that function

50
00:03:17.940 --> 00:03:23.400
that you passed the computer, and whenever any one of those reactive objects change, Vue will rerun

51
00:03:23.400 --> 00:03:28.590
the function that you passed the computer and it's going to give it back to you as a return value of

52
00:03:28.590 --> 00:03:29.880
its own reactive object.

53
00:03:30.110 --> 00:03:30.420
Right.

54
00:03:31.080 --> 00:03:38.010
Now, all of these things that we define as our ref data, our functions or our computed functions,

55
00:03:38.160 --> 00:03:43.770
remember that from the setup method we have to return a plain JavaScript object and there is where we

56
00:03:43.770 --> 00:03:48.090
want to put any of the properties that we want to be able to utilize in our template.

57
00:03:48.330 --> 00:03:53.250
So if we want to reference a computed property or a RAF property, we have to return it in that object.

58
00:03:53.460 --> 00:03:58.710
If we want to provide a function to execute, whenever we, for example, have a click event, we also

59
00:03:58.710 --> 00:04:01.410
have to return it as a property in that object.

60
00:04:01.560 --> 00:04:06.930
Whatever property name we give in that JavaScript object that we return from, the setup method is what

61
00:04:06.930 --> 00:04:08.580
we can use in our template.

62
00:04:08.840 --> 00:04:09.150
Right.

63
00:04:10.590 --> 00:04:10.920
All right.

64
00:04:10.920 --> 00:04:15.360
So finally, we saw over the course of the last couple lessons that sometimes we may need to work with

65
00:04:15.360 --> 00:04:16.890
props in our setup method.

66
00:04:17.040 --> 00:04:23.400
For example, props may form the basis of a dynamic piece of content in our component, such as XSS

67
00:04:23.400 --> 00:04:23.820
classes.

68
00:04:24.090 --> 00:04:30.120
So luckily the setup method receives a reactive object of the components props as its first argument.

69
00:04:30.360 --> 00:04:35.790
So whatever the parent passes down into the component view is going to bundle all of those props up

70
00:04:35.790 --> 00:04:37.470
and an object of props.

71
00:04:37.470 --> 00:04:40.890
It's going to give it to you as the first R2 and then you can utilize those props.

72
00:04:40.890 --> 00:04:42.660
For example, the computer access classes.

73
00:04:42.660 --> 00:04:45.750
We did that with the computed function in the last couple lessons.

74
00:04:46.050 --> 00:04:50.250
Now the props object is reactive, but its individual properties are not.

75
00:04:50.490 --> 00:04:55.170
So if we're simply doing something like props, that type, we can do that in a computed function and

76
00:04:55.170 --> 00:04:59.730
it will work by itself because Vue knows that the props object is reactive.

77
00:04:59.980 --> 00:05:04.480
And simply because we're referencing that object in the computed function, it knows that it has to

78
00:05:04.480 --> 00:05:05.200
reevaluate.

79
00:05:05.440 --> 00:05:10.540
But things get a lot more trickier when we try to do structure from that props object, because individual

80
00:05:10.540 --> 00:05:15.490
properties that we do structure from the reactive props object are not themselves reactive.

81
00:05:15.790 --> 00:05:20.320
What we can do to solve that problem is to pass the props object to the to Raf's function.

82
00:05:20.470 --> 00:05:26.440
We import that from viewers as well and that two refs function returns an object where every property

83
00:05:26.440 --> 00:05:27.250
is reactive.

84
00:05:27.430 --> 00:05:31.450
Every property corresponds to a reactive object with its own value property.

85
00:05:31.780 --> 00:05:33.760
Which brings me to another important point.

86
00:05:33.940 --> 00:05:39.730
You can de structure properties from the object return by two refs, but be sure to remember that the

87
00:05:39.730 --> 00:05:42.370
properties are now individual reactive objects.

88
00:05:42.390 --> 00:05:42.700
Right?

89
00:05:42.910 --> 00:05:47.740
Thus, if you want to access the underlying value, for example, in the last lesson we wanted to do

90
00:05:47.740 --> 00:05:51.580
that as our string key in a or a property in an object.

91
00:05:51.760 --> 00:05:56.320
We have to remember to use that value because that gets the underlying piece of state.

92
00:05:56.530 --> 00:06:00.370
That view is keeping track of that piece of state can certainly change.

93
00:06:00.370 --> 00:06:01.210
You can update it.

94
00:06:01.360 --> 00:06:06.970
But once again, whenever you have to redo or to update it, you have to access dot value on that reactive

95
00:06:06.970 --> 00:06:13.420
object because two ROS is giving you back and reactive objects in the structured properties, not the

96
00:06:13.420 --> 00:06:14.800
basic values underneath.

97
00:06:15.010 --> 00:06:15.340
All right.

98
00:06:16.180 --> 00:06:22.270
Finally, when you use reactive objects in your HTML section of the component view knows to extract

99
00:06:22.270 --> 00:06:23.290
their underlying value.

100
00:06:23.500 --> 00:06:26.230
So in JavaScript, we have to access that value.

101
00:06:26.350 --> 00:06:28.030
But our HTML, we do not.

102
00:06:28.270 --> 00:06:33.460
So if we have a reactive object that storing a boolean in its value property, you can simply use that

103
00:06:33.460 --> 00:06:35.480
reactive object in a VRF directive.

104
00:06:35.500 --> 00:06:38.590
You don't need to access that value in the template.

105
00:06:38.860 --> 00:06:43.810
Similarly, if you want to interpolate the value of a reactive object, you can simply use double curly

106
00:06:43.810 --> 00:06:45.940
braces and write the reactive object in line.

107
00:06:46.150 --> 00:06:52.720
View understands that it should actually display the underlying text there and also updated if the reactive

108
00:06:52.720 --> 00:06:54.880
object updates as well.

109
00:06:55.110 --> 00:06:56.290
On the script side of things.

110
00:06:56.470 --> 00:07:02.830
However, in the template, the connection is established between reactive objects and the actual HTML,

111
00:07:02.980 --> 00:07:06.610
so you do not need to access that value in the template.

112
00:07:06.850 --> 00:07:07.210
All right.

113
00:07:07.450 --> 00:07:09.250
That's all there is to cover in this section.

114
00:07:09.280 --> 00:07:14.080
Lots more fun stuff up ahead with the composition API in the follow up sections.

115
00:07:14.230 --> 00:07:16.240
So I look forward to it and I will see you there.
