1
00:00:00,390 --> 00:00:01,260
Okay.

2
00:00:01,260 --> 00:00:07,470
So let's take a little break from adding type annotations to our components and instead focus on updating

3
00:00:07,470 --> 00:00:10,950
our composable functions to be in TypeScript as well.

4
00:00:11,310 --> 00:00:15,510
So a nice an easy one to start with is going to be used confirm route.

5
00:00:15,810 --> 00:00:17,910
So I'm going to open up that composable right here.

6
00:00:18,690 --> 00:00:21,210
It's in its own separate use confirmed root file.

7
00:00:21,450 --> 00:00:26,430
And as a reminder, this is a composable that accepts a string of a root name and then it returns a

8
00:00:26,430 --> 00:00:32,160
reactive object that compares the string here with whatever is the current name on the root object that

9
00:00:32,160 --> 00:00:35,550
the function gets from the use root helper function from view root.

10
00:00:36,090 --> 00:00:36,450
All right.

11
00:00:36,450 --> 00:00:38,850
So the process should be pretty familiar by now.

12
00:00:38,850 --> 00:00:42,240
We're going to change this composable to have a test extension.

13
00:00:43,890 --> 00:00:45,030
Right here haircuts.

14
00:00:45,360 --> 00:00:48,630
And we can see only one violation, which should hopefully make sense.

15
00:00:48,870 --> 00:00:53,670
TypeScript does not understand what route Nim is, so it assumes that has an any type and it needs more

16
00:00:53,670 --> 00:00:54,960
specific annotations.

17
00:00:55,230 --> 00:00:58,470
So right here we're going to provide a colon and this will be a string.

18
00:00:59,310 --> 00:01:00,060
And that should do it.

19
00:01:00,270 --> 00:01:05,340
And now TypeScript is going to be able to infer, based on our return value of this computed logic right

20
00:01:05,340 --> 00:01:10,320
here, that the return value will be a computed raft, which basically means that's the interface for

21
00:01:10,320 --> 00:01:11,550
a view reactive object.

22
00:01:11,700 --> 00:01:14,550
That in itself is going to be wrapping a boolean, right?

23
00:01:14,550 --> 00:01:19,260
So it automatically infers the correct generic as well simply from the logic of what we're doing in

24
00:01:19,260 --> 00:01:19,500
here.

25
00:01:20,010 --> 00:01:20,250
All right.

26
00:01:20,250 --> 00:01:21,630
So that takes care of the composable.

27
00:01:21,630 --> 00:01:23,370
It's also update its test file.

28
00:01:23,400 --> 00:01:29,700
So I'm going to go to use confirm root that test that yes, open that up on the right hand side right

29
00:01:29,700 --> 00:01:29,940
here.

30
00:01:29,940 --> 00:01:35,280
Let me find the file in my test directory right here at use confirm route that test that.

31
00:01:35,280 --> 00:01:37,860
Yes, I'm going to change that to be that test.

32
00:01:38,490 --> 00:01:39,120
There we go.

33
00:01:39,300 --> 00:01:45,300
And the only issue we're going to run into is the usual one with TypeScript not understanding our mocking

34
00:01:45,300 --> 00:01:45,720
process.

35
00:01:46,050 --> 00:01:49,710
So what we're going to do is replace that use route with icons called use route mock.

36
00:01:50,040 --> 00:01:52,170
So right here, contact use, route mock.

37
00:01:52,470 --> 00:01:58,500
And we're going to tell TypeScript that it's treat the use route, imported function not as its regular

38
00:01:58,500 --> 00:02:01,260
inferred type, but as a special type of just mock.

39
00:02:01,800 --> 00:02:04,680
And then down below we can use use route mock again.

40
00:02:04,680 --> 00:02:05,970
It's still the same object.

41
00:02:05,970 --> 00:02:11,610
The constant use mock is referencing the exact same function that use route is, but that function is

42
00:02:11,610 --> 00:02:14,430
the just mock function that has been replaced by line two.

43
00:02:14,610 --> 00:02:19,590
Here we're just informing TypeScript of the type update and we need a separate line to do that.

44
00:02:19,770 --> 00:02:21,570
So that's why we're assigning to a brand new constant.

45
00:02:21,570 --> 00:02:27,360
We can simply reference that and understand that that is the one that is the has the correct type recognition

46
00:02:27,480 --> 00:02:30,660
from TypeScript due to our explicit type annotation right here.

47
00:02:31,230 --> 00:02:31,680
All right.

48
00:02:31,680 --> 00:02:33,370
So that takes care of the tests for that.

49
00:02:33,390 --> 00:02:35,520
Let's do one more composable in this lesson.

50
00:02:35,730 --> 00:02:38,100
So I'm going to move on to use current page.

51
00:02:39,060 --> 00:02:39,540
There it is.

52
00:02:39,750 --> 00:02:45,540
This one is the one that uses the use root helper function and accesses the query property and the page

53
00:02:45,540 --> 00:02:49,290
property on that to try to extract what page of job results were on.

54
00:02:49,500 --> 00:02:52,980
And then if that property does not exist, it falls back to a value of one.

55
00:02:53,400 --> 00:02:53,760
All right.

56
00:02:53,940 --> 00:02:57,150
So let's go ahead and convert this file to have a test extension.

57
00:02:58,880 --> 00:02:59,570
Like so.

58
00:03:00,110 --> 00:03:02,210
And we're going to run into another issue here.

59
00:03:02,230 --> 00:03:08,810
We can see here that if I hover my mouse, it's going to say an argument of type, string or location

60
00:03:09,170 --> 00:03:12,410
value array is not assignable to parameter of type string.

61
00:03:12,770 --> 00:03:20,510
So basically what this is telling us is the pass int method on this object expects to receive a string

62
00:03:20,510 --> 00:03:21,500
as its first argument.

63
00:03:21,710 --> 00:03:26,600
You can see even in the parameter definition on the right, it's parameter name is string, which I

64
00:03:26,600 --> 00:03:29,570
know is confusing, but that's how the implementation works.

65
00:03:29,750 --> 00:03:35,630
Its parameter name is String and there's also a type string and the argument of this string of one is

66
00:03:35,630 --> 00:03:36,410
totally normal.

67
00:03:36,590 --> 00:03:42,260
But keep in mind that root does create a page could be another type of value which is this location

68
00:03:42,260 --> 00:03:48,350
query value array and thus it's saying, hey, pass, it can only take a string, but your argument

69
00:03:48,350 --> 00:03:51,140
can be either a string or this array.

70
00:03:51,440 --> 00:03:57,230
Now luckily in our scenario, we have never run into a situation where root to create a page is an array.

71
00:03:57,380 --> 00:03:59,780
In our scenario, it's always going to be a string.

72
00:03:59,780 --> 00:04:05,090
We simply don't have the kind of app that could lead to an array of these location query value objects.

73
00:04:05,270 --> 00:04:07,310
I honestly don't know how that could work.

74
00:04:07,760 --> 00:04:12,290
I'm sure there is some kind of implementation where that query object does indeed have a property set

75
00:04:12,290 --> 00:04:12,800
to an array.

76
00:04:12,980 --> 00:04:17,960
The point is, within the confines of our app, we know that the page property will always be equal

77
00:04:17,960 --> 00:04:18,830
to a string.

78
00:04:19,580 --> 00:04:23,810
So what we can do is simply use our as syntax to tell TypeScript about that.

79
00:04:24,050 --> 00:04:29,330
So right here I'm going to define a separate call page and I'm going to reference Route Dot, create

80
00:04:29,330 --> 00:04:33,020
a page and I'm going to say as string.

81
00:04:33,020 --> 00:04:35,570
So we always interpret it as a string type.

82
00:04:35,720 --> 00:04:36,110
All right.

83
00:04:36,320 --> 00:04:39,380
And then I'm going to be able to pass in page right here.

84
00:04:39,740 --> 00:04:42,860
Either the page constant was typed, typescript things is a string.

85
00:04:43,190 --> 00:04:46,820
So now it's going to say either string or string, that means only string.

86
00:04:46,970 --> 00:04:50,600
And when it looks at the pass end type definition, it says, okay, parse.

87
00:04:50,600 --> 00:04:52,940
It expects a string as its first argument.

88
00:04:53,120 --> 00:04:55,310
You are giving me something that is always going to be a string.

89
00:04:55,310 --> 00:04:59,960
I don't know which one it's going to be either page or the literal string of one, but both of those

90
00:04:59,960 --> 00:05:01,550
are made from the same string type.

91
00:05:01,730 --> 00:05:06,260
So they satisfy the definition and the expectation of what parse and expects.

92
00:05:06,530 --> 00:05:06,800
All right.

93
00:05:06,800 --> 00:05:10,310
So that will be enough to get the TYPEKIT violations here to go away.

94
00:05:10,640 --> 00:05:13,320
So of course, we have to update the corresponding test as well.

95
00:05:13,340 --> 00:05:19,430
So use current page DHCP test that just open up this thing and let's of course convert it to have a

96
00:05:19,430 --> 00:05:20,540
TypeScript extension.

97
00:05:21,410 --> 00:05:21,980
There we go.

98
00:05:22,280 --> 00:05:24,260
And we're going to get the usual problems here.

99
00:05:24,260 --> 00:05:26,270
We have issues with marking out, user out.

100
00:05:26,450 --> 00:05:28,670
You can probably guess what our solution is going to be here.

101
00:05:28,850 --> 00:05:34,790
It's defining a separate to convert calls called user root mark, which is going to reference the user

102
00:05:34,790 --> 00:05:39,710
out imported function, which is now a just mock function and explicitly telling TypeScript to interpret

103
00:05:39,710 --> 00:05:45,500
its type as a just mark rather than the default that it infers when importing this regular function

104
00:05:45,500 --> 00:05:46,760
and looking at it in the file.

105
00:05:47,120 --> 00:05:47,390
All right.

106
00:05:47,390 --> 00:05:52,400
So right here, we're going to replace this with user reviews route mark slipping over my words today.

107
00:05:52,580 --> 00:05:54,560
And right here, use root mark as well.

108
00:05:54,800 --> 00:05:57,560
Again, this is still referencing the exact same mocked object.

109
00:05:57,560 --> 00:06:01,100
So at the end of the day, use root mark and use the same.

110
00:06:01,190 --> 00:06:05,090
So if at any point you want to test, for example, that it's been invoked or that it's been invoked

111
00:06:05,090 --> 00:06:09,350
with the right argument, you can technically use any reference either one of those two names.

112
00:06:09,500 --> 00:06:14,750
However, when using mock return value, TypeScript only understands this one is having that just mark

113
00:06:14,750 --> 00:06:15,050
type.

114
00:06:15,230 --> 00:06:20,240
So when we use mark return value, we have to make sure to use it on user mark instead of simply use

115
00:06:20,330 --> 00:06:20,540
out.

116
00:06:20,690 --> 00:06:24,980
Even though they're technically the same object from a referential perspective, they're different as

117
00:06:24,980 --> 00:06:27,620
far as TypeScript interpretation of their type.

118
00:06:28,070 --> 00:06:28,400
All right.

119
00:06:28,400 --> 00:06:29,240
So save that.

120
00:06:30,240 --> 00:06:33,510
And right here and PM run, test, call and watch.

121
00:06:33,900 --> 00:06:36,900
Let's see if that captures our two composer bowls.

122
00:06:37,560 --> 00:06:41,970
And it looks like we're using those compulsively in a couple tests and a couple of component tests as

123
00:06:41,970 --> 00:06:42,200
well.

124
00:06:42,210 --> 00:06:46,740
But that's fine because those components should, in theory, have isolated those composer those to

125
00:06:46,740 --> 00:06:47,400
mock them out.

126
00:06:47,640 --> 00:06:51,990
So it's not like a change in our actual implementation should affect those components, which is good

127
00:06:51,990 --> 00:06:56,760
because it ensures that we've isolated the tests for those components separately from the tests for

128
00:06:56,760 --> 00:06:57,410
the components.

129
00:06:57,630 --> 00:07:02,790
But because our proposals are still being used, for example, in the imports of the components, that's

130
00:07:02,790 --> 00:07:06,750
why I just thinks that those files have changed and thus feels that it's appropriate to rerun them.

131
00:07:07,050 --> 00:07:11,730
Regardless, we can see that we do have the two test suites for the composer to compose.

132
00:07:11,750 --> 00:07:16,050
Those right here use confirm root and use page and everything is still passing.

133
00:07:16,410 --> 00:07:18,180
All right, so that's a good place to start.

134
00:07:18,180 --> 00:07:23,850
In the next lesson, we're going to complete more composable refactoring to incorporate TypeScript.

135
00:07:24,090 --> 00:07:24,750
So I'll see you there.
