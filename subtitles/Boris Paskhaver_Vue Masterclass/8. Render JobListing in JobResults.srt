1
00:00:00,180 --> 00:00:00,750
Okay.

2
00:00:00,750 --> 00:00:07,230
So once we receive our hundred jobs from the API, we want to create a job listing component for each

3
00:00:07,230 --> 00:00:07,560
one.

4
00:00:07,860 --> 00:00:12,720
So whenever we have a situation where we have some kind of collection such as our jobs array and we

5
00:00:12,720 --> 00:00:19,050
want to iterate over it and create an HTML element or a component for each, we know that we can use

6
00:00:19,110 --> 00:00:21,540
the View V4 directive.

7
00:00:21,840 --> 00:00:26,760
So right here, I'm going to remove my second and third occurrence of the job listing component.

8
00:00:27,150 --> 00:00:31,920
And right here I'll keep a single job listing and I'm going to add the V4 directive to the end of it.

9
00:00:31,920 --> 00:00:37,050
So V4 and we of course have to provide some kind of iteration right here.

10
00:00:37,290 --> 00:00:41,340
So I want to iterate over every job in jobs.

11
00:00:41,790 --> 00:00:45,480
So jobs here is a reference to our jobs data array below.

12
00:00:45,480 --> 00:00:47,460
It's going to start out with an empty array.

13
00:00:47,640 --> 00:00:50,700
So view is going to iterate over an empty array and not render anything.

14
00:00:50,940 --> 00:00:56,100
Then when the backend returns 100 jobs, we're going to overwrite data, V0 will re render and it's

15
00:00:56,100 --> 00:00:57,270
going to have 100 jobs.

16
00:00:57,450 --> 00:01:00,390
So it's going to render 100 job listing components.

17
00:01:00,670 --> 00:01:00,980
Right?

18
00:01:01,170 --> 00:01:05,970
And then this name right here refers to the individual job object that we are iterating over.

19
00:01:06,180 --> 00:01:11,430
It can be whatever name we want, but typically we're going to give it the singular name compared to

20
00:01:11,430 --> 00:01:12,600
the plural collection.

21
00:01:12,600 --> 00:01:17,730
So if we're iterating over jobs, we're iterating over a single job object, and that's what we want

22
00:01:17,730 --> 00:01:18,780
to provide here.

23
00:01:19,140 --> 00:01:19,440
Okay.

24
00:01:19,440 --> 00:01:20,730
So right now we're getting an error.

25
00:01:20,730 --> 00:01:26,760
And the reason for this is whenever we use V4 as a reminder, we need to provide that key attribute.

26
00:01:26,910 --> 00:01:33,270
And that key should be a unique identifier that Vue can use to distinguish all these different job listings

27
00:01:33,270 --> 00:01:34,050
from each other.

28
00:01:34,050 --> 00:01:39,210
I need some kind of criteria that it can use to tell apart every job listing that it renders in order

29
00:01:39,210 --> 00:01:44,250
to be able to perform its algorithm within where I can determine changes.

30
00:01:44,490 --> 00:01:52,170
So we need to give the key attribute right here some kind of dynamic value that is unique for each iteration.

31
00:01:52,410 --> 00:01:58,800
Well, every job object is going to have an ID property from the backend, and that ID property is unique.

32
00:01:58,800 --> 00:02:00,120
It is the idea of the job.

33
00:02:00,360 --> 00:02:02,910
So here of course we can do job that ID.

34
00:02:03,540 --> 00:02:08,460
Now of course this is going to be problematic because if we use this syntax, then Vue is going to think

35
00:02:08,460 --> 00:02:11,220
we're providing a string with the literal character's job.

36
00:02:11,400 --> 00:02:18,360
DAT ID We need a dynamic reference to the job objects ID property, the job we defined right here in

37
00:02:18,360 --> 00:02:22,920
our iteration, we need a dynamic reference to whatever is the value for tidy property.

38
00:02:23,070 --> 00:02:29,400
So of course we need to use the V bind syntax by using the colon here to bind the key attribute to whatever

39
00:02:29,400 --> 00:02:33,660
is the value of the ID property on the current job that we are iterating over.

40
00:02:33,990 --> 00:02:37,380
So job one of 100 will have ID one, so the key will be one.

41
00:02:37,590 --> 00:02:41,310
The next job in our iteration will have an ID property equal to two.

42
00:02:41,460 --> 00:02:43,830
So our key will be two all the way to 100.

43
00:02:43,950 --> 00:02:49,590
So we give you 100 unique identifiers for 100 unique job listings and it's all good to go.

44
00:02:50,310 --> 00:02:54,780
The other thing that I would like to do is to pass down a prop to our job listing component.

45
00:02:54,780 --> 00:03:00,990
Now, we don't have any code in our job listing component to react to this prop, but obviously what

46
00:03:00,990 --> 00:03:05,490
we need to pass down to the job listing is the actual job data from our back end.

47
00:03:05,490 --> 00:03:11,640
And that way our job listing component can take that data and render a dynamic title, a dynamic city,

48
00:03:11,640 --> 00:03:16,620
a dynamic description, etc., because right now all of the text in job listing is hardcoded.

49
00:03:16,740 --> 00:03:21,000
So when we go to a browser, we're actually going to see 100 of the same job listed.

50
00:03:21,000 --> 00:03:24,000
We're not going to see any of the data from here back in just yet.

51
00:03:24,150 --> 00:03:28,320
We're just going to render 100 job listings because our back in gave us 100 objects.

52
00:03:28,620 --> 00:03:34,110
So for future proofing, when we come back to the job listing component, I'd like to pass down a prop

53
00:03:34,110 --> 00:03:39,030
called Job and I want to make it equal to the current job that we are iterating over.

54
00:03:39,030 --> 00:03:43,410
So I'm going to pass down the full object with all those properties that we saw in DB, that JSON,

55
00:03:43,410 --> 00:03:45,990
I'm going to pass it down and here the same rules apply.

56
00:03:45,990 --> 00:03:50,310
If I stick with the syntax, I am going to pass down a job prop, but it's going to be equal to the

57
00:03:50,310 --> 00:03:51,030
string job.

58
00:03:51,030 --> 00:03:52,080
I don't want to do that.

59
00:03:52,080 --> 00:03:54,390
I want to pass down the full job object.

60
00:03:54,600 --> 00:04:00,720
So I need to use the bind it to bind to this prop called job that I again have not defined in job listing

61
00:04:00,870 --> 00:04:02,910
that we will define in a lesson or two.

62
00:04:03,090 --> 00:04:07,110
So I will pass down the full job object and that enables us to use it in that component.

63
00:04:07,380 --> 00:04:12,780
So now let's take a look at what's going on in our browser and you can see this page has already become

64
00:04:12,780 --> 00:04:17,430
pretty long and you guessed that we have 100 job listing components being rendered.

65
00:04:17,670 --> 00:04:18,240
Why?

66
00:04:18,330 --> 00:04:20,910
Because our back end returned 100 jobs.

67
00:04:21,090 --> 00:04:26,790
So we have an array of 100 elements and Vue is going to iterate over all of them with the V4 and render

68
00:04:26,810 --> 00:04:28,920
100 identical job listing components.

69
00:04:29,340 --> 00:04:31,380
So we are moving in a really, really good direction.

70
00:04:31,530 --> 00:04:35,190
None of this data is dynamic and that's what we have to fix in an upcoming lesson.

71
00:04:35,400 --> 00:04:41,280
But we are making good progress with receiving data from the backend and changing our view to react

72
00:04:41,370 --> 00:04:42,240
to that data.

73
00:04:42,450 --> 00:04:45,900
If the back end sent over six records, we would see six job listings.

74
00:04:46,050 --> 00:04:48,870
If the backend sent over a thousand records, we would see a thousand.

75
00:04:48,870 --> 00:04:53,490
And that's the beautiful part is that we're reacting dynamically to that batch of data all there is

76
00:04:53,490 --> 00:04:54,480
to cover in this lesson.

77
00:04:54,480 --> 00:04:56,160
So I will see you in the next one.
