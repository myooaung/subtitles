WEBVTT
1
00:00:00.240 --> 00:00:01.140
All right.

2
00:00:01.140 --> 00:00:07.020
So we have been having a ton of fun with view router, but unfortunately one thing that we have neglected

3
00:00:07.020 --> 00:00:08.730
is to check our test suite.

4
00:00:09.000 --> 00:00:11.310
After all, we have been adding a lot of code.

5
00:00:11.310 --> 00:00:17.430
We added view router, we added our router link and router view components and we haven't seen whether

6
00:00:17.430 --> 00:00:19.440
that made an impact on our tests.

7
00:00:19.800 --> 00:00:23.010
So let's head to our terminal and run our full test suite.

8
00:00:23.310 --> 00:00:26.130
So I'm going to run NPM, run test colon.

9
00:00:26.130 --> 00:00:26.550
Watch.

10
00:00:26.560 --> 00:00:28.270
I'm going to run the tests in watch mode.

11
00:00:28.920 --> 00:00:33.350
And I am keeping a git commit for every lesson that I make.

12
00:00:33.360 --> 00:00:36.570
So I am getting this message that says no tests have been found.

13
00:00:37.140 --> 00:00:41.580
This is simply just saying that it doesn't see any changes since my last get commit.

14
00:00:41.790 --> 00:00:47.070
If you ever get this message and just you can follow the instructions here and press the a key on your

15
00:00:47.070 --> 00:00:50.010
keyboard and that will force just to run all tests.

16
00:00:50.370 --> 00:00:52.800
So I'm going to press a and that is going to run all of our tests.

17
00:00:52.800 --> 00:00:58.680
And you can see here we are going to get quite a few warnings, not failures, but warnings.

18
00:00:59.460 --> 00:01:02.850
And if I scroll up, there are quite a few of them here.

19
00:01:02.850 --> 00:01:07.680
We can see that they are coming from our May now dot test dot jazz file.

20
00:01:08.010 --> 00:01:11.460
And let's read the statement to see what Vue is trying to tell us.

21
00:01:11.460 --> 00:01:17.490
It says Failed to resolve component router link and if I scroll down, it's actually the exact same

22
00:01:17.490 --> 00:01:18.690
warning for every test.

23
00:01:19.050 --> 00:01:20.370
So what is going on here?

24
00:01:20.610 --> 00:01:25.170
It's actually the exact same issue we saw earlier in the course when we used our font.

25
00:01:25.200 --> 00:01:29.850
Awesome icon component router link is an example of a global component.

26
00:01:29.910 --> 00:01:32.820
It is available to be used in any component in our view app.

27
00:01:33.120 --> 00:01:38.370
But when it comes to our test suite, our test suite is running a component in isolation.

28
00:01:38.580 --> 00:01:44.970
So in the case of the main NAV test file, it is mounting a main nav component without knowing any of

29
00:01:44.970 --> 00:01:46.530
the other details of review app.

30
00:01:46.770 --> 00:01:52.680
So the test does not know that we have configured Vue router and thus the test does not know what a

31
00:01:52.680 --> 00:01:55.170
router link component right here is.

32
00:01:56.010 --> 00:01:57.900
So it says I don't know what this is supposed to be.

33
00:01:58.320 --> 00:02:02.700
So it's raising this warning because that can be problematic because it's not actually rendering the

34
00:02:02.700 --> 00:02:04.680
real router link component in the test.

35
00:02:05.070 --> 00:02:09.420
So let's go ahead and open up our main nav dot test that just filed.

36
00:02:10.700 --> 00:02:14.720
And I do want to remind you that the tests here are using shallow mount.

37
00:02:14.930 --> 00:02:21.680
And what that means is that the test utils library is stubbing out or replacing any child component

38
00:02:21.860 --> 00:02:23.660
with its own custom implementation.

39
00:02:23.660 --> 00:02:31.010
So when it is mounting our main NAV, it is still stubbing out router link with its own component or

40
00:02:31.010 --> 00:02:33.290
its own implementation, its own replacement.

41
00:02:33.530 --> 00:02:37.700
But that doesn't change the fact that the test doesn't know what router link is.

42
00:02:37.700 --> 00:02:42.260
It doesn't know what that name is, it doesn't know where it's coming from, and that's why it's raising

43
00:02:42.260 --> 00:02:43.130
this issue.

44
00:02:43.910 --> 00:02:50.240
So what we can do is try to be a little bit more explicit and tell our test suite that it should stub

45
00:02:50.240 --> 00:02:52.520
out router link whenever it sees it.

46
00:02:52.530 --> 00:02:57.890
You may recall this when we did this for the font awesome icon component, right?

47
00:02:58.100 --> 00:03:04.010
What we can do is we can provide that configuration object as the second argument to our mount or shallow

48
00:03:04.010 --> 00:03:09.260
mount function and configure which of our child components we want to stub out some or all of them.

49
00:03:09.530 --> 00:03:14.810
So as a reminder of what that syntax looks like, if I go into this function right here or this first

50
00:03:14.810 --> 00:03:17.030
test, it displays our company name here.

51
00:03:17.030 --> 00:03:18.080
We're just testing that.

52
00:03:18.080 --> 00:03:23.150
We have the string bobble careers somewhere in our text and our component text.

53
00:03:23.360 --> 00:03:29.540
And of course where bobble careers appears is right here as the link text within our router link component.

54
00:03:29.870 --> 00:03:36.470
So if I go here and I provide my configuration object as a reminder, we provide a global property here

55
00:03:36.470 --> 00:03:37.970
that is set to an object.

56
00:03:37.970 --> 00:03:44.330
In that object we provide a stubs property and in that property we also assign an object.

57
00:03:44.330 --> 00:03:50.210
And in this object our properties represent the child components and then our values previously were

58
00:03:50.210 --> 00:03:50.750
true.

59
00:03:50.750 --> 00:03:53.560
So we would do something like this when we did this for fun.

60
00:03:53.600 --> 00:03:54.080
Awesome.

61
00:03:54.260 --> 00:04:00.500
We said we have a component called Router Link as a child component in May now and we want to stub it

62
00:04:00.500 --> 00:04:00.740
out.

63
00:04:01.840 --> 00:04:02.820
So we're going to do this.

64
00:04:03.180 --> 00:04:05.640
So let's see what happens when we run this.

65
00:04:05.640 --> 00:04:08.100
We're actually going to get something even worse than a warning.

66
00:04:08.100 --> 00:04:09.850
We're going to get a test failure.

67
00:04:09.900 --> 00:04:12.750
And let me scroll down to see if we can find that failure.

68
00:04:14.610 --> 00:04:16.380
And it is coming from right here.

69
00:04:16.380 --> 00:04:19.230
We can see it is the exact same test we are currently on.

70
00:04:19.230 --> 00:04:26.100
It displays company name and it is not finding these substring bubble careers in this string right here.

71
00:04:26.220 --> 00:04:26.830
So what mean?

72
00:04:26.850 --> 00:04:33.330
What that means is it's for some reason not finding this text that is in the router link stub component

73
00:04:33.330 --> 00:04:36.300
that it is placed wherever it sees a router link.

74
00:04:36.510 --> 00:04:38.420
So why is it not finding the text?

75
00:04:38.430 --> 00:04:40.260
Well, let's let's talk a little bit about this.

76
00:04:40.260 --> 00:04:42.060
I understand it can be a little bit complicated.

77
00:04:42.390 --> 00:04:49.140
So as a reminder of what stubs do is they replace or substitute a child component with something else.

78
00:04:49.950 --> 00:04:54.090
So whenever they view test utils, sees a router link, it can replace it with something else.

79
00:04:54.330 --> 00:04:59.700
So for the sake of a comparison or just to give you a simple example, imagine that it replaces every

80
00:04:59.700 --> 00:05:01.890
router linked with a div, right?

81
00:05:02.010 --> 00:05:06.900
I'm not saying that's what it actually does, but think of it as as being something very akin to that.

82
00:05:06.900 --> 00:05:13.170
It replaces our actual component with a much lighter, lightweight element so that the test can run

83
00:05:13.170 --> 00:05:15.930
without having to worry about the internal implementation.

84
00:05:15.930 --> 00:05:18.570
Details of how Router Link does its magic.

85
00:05:18.960 --> 00:05:25.110
The problem is when we have something like this that renders text, the router link component knows

86
00:05:25.110 --> 00:05:30.870
that it needs to render that text to the screen as the text that the user's going to click on when they

87
00:05:30.870 --> 00:05:31.710
want to navigate.

88
00:05:32.070 --> 00:05:37.500
But in our tests, if we can imagine replacing this whole thing with something like I did, imagine

89
00:05:37.500 --> 00:05:40.620
that our test is doing something like this internally, right?

90
00:05:40.620 --> 00:05:46.080
It doesn't know to preserve the logic of the texts, text inside it and know that it should be displayed.

91
00:05:46.080 --> 00:05:48.750
It just literally replaces this with something else.

92
00:05:48.930 --> 00:05:53.790
And that's because we are replacing the router link with something else that something else doesn't

93
00:05:53.790 --> 00:05:59.730
have any internal text with the text bubble careers and thus it's not appearing in the components text

94
00:05:59.730 --> 00:06:01.320
method and thus it is failing.

95
00:06:01.680 --> 00:06:03.450
So how can we solve this problem?

96
00:06:03.450 --> 00:06:09.180
Well, we can try to go for a full mount and we can try to fully render the router link component.

97
00:06:09.390 --> 00:06:15.480
But because this is a common problem, the view test utils library actually gives us a really cool solution

98
00:06:15.720 --> 00:06:23.160
and that is a specific designated router link stub component that is intended to serve as a perfect

99
00:06:23.160 --> 00:06:28.020
replacement for a real life router link component from Vue router.

100
00:06:28.260 --> 00:06:33.060
Let me first write the syntax out and then I'll show you a little bit more about how it works.

101
00:06:33.270 --> 00:06:38.460
So what we're going to do right here is in addition to importing shallow mount, I want to import another

102
00:06:38.460 --> 00:06:40.800
thing called the router link stub.

103
00:06:41.880 --> 00:06:43.830
The way you can think about this is router link.

104
00:06:43.840 --> 00:06:50.700
Stub is basically a view component, but a very lightweight version of the real world router link.

105
00:06:50.880 --> 00:06:57.870
It's almost like a really small mini version of it that we can use as a replacement so that we are replacing

106
00:06:57.870 --> 00:07:02.460
router link with something, but it's not the default view test utils replacement.

107
00:07:02.610 --> 00:07:08.250
It is a specific, smaller, lightweight router linked stub component that can more effectively play

108
00:07:08.250 --> 00:07:14.490
the role of a router link and support for example, all of its props and all of its functionality like

109
00:07:14.490 --> 00:07:16.890
the rendering of the text that is inside it.

110
00:07:17.190 --> 00:07:24.000
So it's a more specific replacement that isn't the real thing, but it is less generic than the default

111
00:07:24.000 --> 00:07:28.680
stub that you test utils replace here if we simply provide a boolean value of true.

112
00:07:29.010 --> 00:07:29.340
Right.

113
00:07:29.580 --> 00:07:35.250
So what we can do as an alternate syntax here is instead of providing a boolean of true to tell you

114
00:07:35.250 --> 00:07:41.340
test utils to step out router link, we can provide the actual replacement that we would like Vue to

115
00:07:41.340 --> 00:07:43.890
use whenever it encounters a router link.

116
00:07:44.070 --> 00:07:48.600
So you can almost think of it exactly like a find and replace operation in a word program.

117
00:07:48.840 --> 00:07:53.820
Every time Vue sees router link, we're going to replace it with something else, but instead of replacing

118
00:07:53.820 --> 00:08:00.210
it with the default, whatever element that view test utils does here, we're going to specify that

119
00:08:00.210 --> 00:08:03.870
we want to replace it with this other component called router link stub.

120
00:08:04.740 --> 00:08:05.130
All right.

121
00:08:05.460 --> 00:08:09.300
So what I'd like to do at this point is to navigate to my browser.

122
00:08:10.640 --> 00:08:11.720
And here I have the app.

123
00:08:11.720 --> 00:08:17.480
And what I have opened right here in a second tab is the official view test utils repository on GitHub

124
00:08:17.600 --> 00:08:23.240
and this is the actual file where they implement implement the router link stub component and as I scroll

125
00:08:23.240 --> 00:08:23.660
down.

126
00:08:24.600 --> 00:08:25.830
You can take a look at this code.

127
00:08:25.860 --> 00:08:30.030
You can see it looks exactly like the configuration object for a view component.

128
00:08:30.180 --> 00:08:33.060
And that's because it is fundamentally a view component.

129
00:08:33.270 --> 00:08:35.610
It is not the real world router link.

130
00:08:35.880 --> 00:08:41.910
But what it's going to try to do is emulate the interface and the functionality of router link so that

131
00:08:41.910 --> 00:08:48.360
we can use it in a test, just like a router link, but without actually bundling all of that navigation

132
00:08:48.360 --> 00:08:50.940
functionality and that complexity that comes with Vue router.

133
00:08:51.300 --> 00:08:57.840
So for example, we know that our router link component has a two prop, but whenever we stub it out

134
00:08:57.840 --> 00:09:03.600
in our test, the thing that you test utils stubs it out with is not guaranteed to have a two prop in

135
00:09:03.600 --> 00:09:04.400
comparison.

136
00:09:04.410 --> 00:09:06.570
If we start out with the router link stub.

137
00:09:07.230 --> 00:09:14.370
We can see that this smaller or more lightweight vue component has an established to prop and it also

138
00:09:14.370 --> 00:09:20.070
supports all of the other possible props at the real world router link component also supports.

139
00:09:20.430 --> 00:09:25.290
So what they did is they sort of made this thing that behaves again, almost like the real world thing,

140
00:09:25.440 --> 00:09:28.820
just like a stuntman in a movie, but it's much more lightweight.

141
00:09:28.830 --> 00:09:33.600
It doesn't actually navigate the user around, but it can play the role of that real world router link

142
00:09:33.720 --> 00:09:36.390
because it supports all of the same props.

143
00:09:36.720 --> 00:09:37.110
Right.

144
00:09:37.290 --> 00:09:42.990
And that's the beauty of this rolling stub is, again, a smaller, more lightweight replacement for

145
00:09:42.990 --> 00:09:43.770
the real thing.

146
00:09:43.890 --> 00:09:44.250
Right.

147
00:09:44.970 --> 00:09:50.190
So when we do this, when we add this rattling stub to replace our router links, we are going to be

148
00:09:50.220 --> 00:09:55.530
able to still see the text right here because it does support rendering this child text and the component

149
00:09:55.920 --> 00:09:57.680
that test will no longer fail.

150
00:09:57.690 --> 00:09:58.590
It's actually going to pass.

151
00:09:58.950 --> 00:10:03.780
So as I scroll up, we still have the same warnings for failed to resolve component, but they're no

152
00:10:03.780 --> 00:10:05.310
longer failures.

153
00:10:05.310 --> 00:10:07.020
We do not have that failure from this test.

154
00:10:07.020 --> 00:10:08.100
This test is passing.

155
00:10:08.430 --> 00:10:12.990
So of course, the next thing that I'd like to do is to copy and paste the code we just added to every

156
00:10:12.990 --> 00:10:15.300
single file in our test suite.

157
00:10:15.480 --> 00:10:19.360
And this is a little bit verbose and duplicated and copy and paste.

158
00:10:19.680 --> 00:10:22.890
But we will look at ways that we can reduce this duplication in the next lesson.

159
00:10:23.070 --> 00:10:25.260
For now, let's just saw that the easiest way we can.

160
00:10:25.530 --> 00:10:30.450
So I'm going to copy this configuration object, my second argument to my shallow amount function,

161
00:10:30.660 --> 00:10:36.510
and I'm going to go to every single test in our test suite and just paste that object right here for

162
00:10:36.510 --> 00:10:37.470
this test again.

163
00:10:37.860 --> 00:10:41.510
Second argument, we provide a global property, a stubs property.

164
00:10:41.520 --> 00:10:46.650
We tell it to stub out or replace root or link with this complementary component that is a more lightweight

165
00:10:46.650 --> 00:10:47.040
version.

166
00:10:47.370 --> 00:10:51.720
Let's repeat that exact same logic everywhere where we are shallow mounting a may now.

167
00:10:52.170 --> 00:10:56.070
So I'm just copying and pasting right here and right here.

168
00:10:56.910 --> 00:10:57.960
Let's see if there's anywhere else.

169
00:10:57.960 --> 00:10:59.550
Looks like one more situation.

170
00:10:59.910 --> 00:11:00.900
I'm going to save that.

171
00:11:00.900 --> 00:11:01.560
Let's pretend to.

172
00:11:01.560 --> 00:11:03.990
It's magic and let's let everything run.

173
00:11:03.990 --> 00:11:07.800
And we can see our tests are fully passing and there are no more warnings.

174
00:11:07.800 --> 00:11:13.980
So we have told the test utils not to worry about router link, which is a global component because

175
00:11:13.980 --> 00:11:14.670
we have told it.

176
00:11:14.670 --> 00:11:17.400
What it's supposed to represent is a router link stub.

177
00:11:17.400 --> 00:11:19.140
Treat those two as if they're equal.

178
00:11:19.350 --> 00:11:21.210
Don't worry about the fact that it's global.

179
00:11:21.300 --> 00:11:26.970
Every time you see a router link, just replace it with router link stub and the new test utils knows

180
00:11:26.970 --> 00:11:27.870
what that is.

181
00:11:28.050 --> 00:11:33.030
So it's no longer has to resolve where Rodriguez coming from because what it's effectively doing is

182
00:11:33.030 --> 00:11:38.550
replacing this component with the stub version every time and it does know where the router link stub

183
00:11:38.550 --> 00:11:41.910
is coming from and that's how we are able to circumvent that issue.

184
00:11:42.210 --> 00:11:42.540
All right.

185
00:11:42.690 --> 00:11:46.980
So this will get rid of all of our warnings and luckily our tests are still passing, which is a good

186
00:11:46.980 --> 00:11:52.140
sign that we are testing the right thing because we're still testing the rendering of the right text

187
00:11:52.140 --> 00:11:53.130
and the right menu items.

188
00:11:53.310 --> 00:11:58.290
This was just an expected warning that popped up because we added this brand new functionality and started

189
00:11:58.290 --> 00:12:01.170
to add some new components in, but it's not a failure.

190
00:12:01.320 --> 00:12:06.900
So I think that's a good sign that our test suite is resilient and when it comes to new changes being

191
00:12:06.900 --> 00:12:09.580
added to our actual implementation.

192
00:12:10.260 --> 00:12:15.180
But as I mentioned, we do have a lot of duplication and over the course of the next two lessons, we're

193
00:12:15.180 --> 00:12:18.690
going to see a couple of options that we can utilize to reduce this duplication.

194
00:12:18.870 --> 00:12:20.460
So I will see you in the next lesson.
