1
00:00:00,210 --> 00:00:02,310
All right, so congratulations.

2
00:00:02,310 --> 00:00:05,070
We have completed another course section together.

3
00:00:05,220 --> 00:00:11,430
So as always, let's review our user story, our app as it stands, and all the concepts that we've

4
00:00:11,430 --> 00:00:12,750
learned in this section.

5
00:00:13,050 --> 00:00:19,590
So our user story as a user, I'd like to know what I can do at the company so that I get excited about

6
00:00:19,590 --> 00:00:20,760
working for the company.

7
00:00:21,030 --> 00:00:26,520
And the way that we implemented this request was by building this dynamic headline, which changes the

8
00:00:26,520 --> 00:00:30,660
action verb and its corresponding styles every 3 seconds.

9
00:00:30,870 --> 00:00:34,740
And I'm sure we were all thinking, thinking at the very beginning of the section, Hey, this can't

10
00:00:34,740 --> 00:00:35,790
be that difficult, right?

11
00:00:36,000 --> 00:00:41,430
And maybe it wasn't difficult, but it required a lot of different pieces of knowledge about Vue and

12
00:00:41,430 --> 00:00:48,120
about the JavaScript language itself, as well as concepts surrounding just in order to test it properly.

13
00:00:48,300 --> 00:00:53,160
So even again, with such a small, isolated feature, we were able to learn quite a lot about many

14
00:00:53,160 --> 00:00:54,870
different parts of the view ecosystem.

15
00:00:55,230 --> 00:00:58,560
So with that, let's go ahead and start reviewing everything that we learned.

16
00:00:59,700 --> 00:01:06,060
First up, we again had this idea of using computed properties to determine Dynamic Seasons classes

17
00:01:06,060 --> 00:01:08,130
to apply to our elements.

18
00:01:08,310 --> 00:01:15,210
Earlier on, we used the computed property to generate a dynamic tailwind high class to determine how

19
00:01:15,210 --> 00:01:21,510
we needed to further push down the content of our headline in order to adjust for either the presence

20
00:01:21,660 --> 00:01:23,640
or the absence of this sub nav.

21
00:01:23,640 --> 00:01:29,040
So based on the conditional render of the sub nav, we needed, we needed to generate a conditional

22
00:01:29,040 --> 00:01:31,800
height by which to push down our headline component.

23
00:01:31,800 --> 00:01:37,410
We started off the section talking about that, and that is continuing to review the concepts we introduced

24
00:01:37,410 --> 00:01:38,340
in previous lessons.

25
00:01:38,700 --> 00:01:43,980
Then we started building out the headline component itself, which allowed us to introduce season grid.

26
00:01:44,160 --> 00:01:49,800
Since GRID is a new way to build out templates in the browser and it allows us to build a template around

27
00:01:49,800 --> 00:01:53,580
a grid layout, which means a combination of rows and columns.

28
00:01:53,760 --> 00:02:00,030
And of course we used just helper tailwind utility classes and they were able to set up that grid logic

29
00:02:00,030 --> 00:02:01,380
for us automatically.

30
00:02:01,950 --> 00:02:02,280
All right.

31
00:02:02,430 --> 00:02:06,330
Then we talked about the built in timer functions available in JavaScript.

32
00:02:06,480 --> 00:02:11,850
We talked about set timeout, which allows us to run a function after a given a moment or duration of

33
00:02:11,850 --> 00:02:13,410
time, but it only runs it once.

34
00:02:13,710 --> 00:02:19,590
So we decided to go with the set interval function, which runs a procedure or a function at a consistent

35
00:02:19,590 --> 00:02:20,100
interval.

36
00:02:20,310 --> 00:02:24,900
So that means every couple of milliseconds it will re execute the function that we provide it.

37
00:02:25,110 --> 00:02:30,570
And we wanted to use this logic because we wanted our action verb not just to change once, but to change

38
00:02:30,570 --> 00:02:35,310
consistently at a rhythm, right every 3 seconds that we wanted to change to the next action.

39
00:02:35,850 --> 00:02:40,890
And because we want to clean up that code, we also introduced the clear interval function which accepts

40
00:02:40,890 --> 00:02:45,810
an interval object and stops it from running or in other words, prevents it from executing again and

41
00:02:45,810 --> 00:02:46,380
again and again.

42
00:02:46,380 --> 00:02:47,340
It kind of terminates it.

43
00:02:48,300 --> 00:02:48,630
All right.

44
00:02:48,900 --> 00:02:51,630
Then we talked about the idea of lifecycle hooks.

45
00:02:51,780 --> 00:02:56,730
Vue components have many different lifecycle hooks, and they run at different moments of the components

46
00:02:56,730 --> 00:02:57,480
existence.

47
00:02:57,630 --> 00:03:01,980
In fact, some lifecycle hooks will run to more than once, while others will run when the component

48
00:03:01,980 --> 00:03:04,800
is being mounted into the DOM or as it's being removed.

49
00:03:05,040 --> 00:03:11,280
And they allow us an opportunity to inject our logic at certain points of execution at certain moments

50
00:03:11,430 --> 00:03:12,390
where it makes sense.

51
00:03:12,600 --> 00:03:17,640
So, for example, in order to establish our interval logic of switching the action verb, we wanted

52
00:03:17,640 --> 00:03:22,230
to implement that business logic when the component is first starting up as it's being created.

53
00:03:22,530 --> 00:03:28,380
So we hooked into the created hook to set up an interval to change that text in the headline every 3

54
00:03:28,380 --> 00:03:28,650
seconds.

55
00:03:28,890 --> 00:03:34,620
We also then used the before and amount lifecycle hook to remove that interval as the component is being

56
00:03:34,620 --> 00:03:37,380
removed from the DOM, as it's being torn down.

57
00:03:37,620 --> 00:03:42,540
And we also went through the view documentation so we could see some of the other helpful lifecycle

58
00:03:42,540 --> 00:03:43,290
hooks that are available.

59
00:03:43,290 --> 00:03:48,330
For example, every time the component updates, there is a before update, a lifecycle hook and then

60
00:03:48,330 --> 00:03:49,890
an update lifecycle hook.

61
00:03:49,890 --> 00:03:55,800
So you can really tie in to a lot of different points or moments of execution in order to customize

62
00:03:55,800 --> 00:03:58,140
the business logic of how the components should run.

63
00:03:59,100 --> 00:03:59,430
All right.

64
00:03:59,760 --> 00:04:06,750
We built that logic out to select the next correct action verb from our array of four possible strings.

65
00:04:06,990 --> 00:04:12,210
We started with that implementation, but then we decided to move that logic out of the component into

66
00:04:12,210 --> 00:04:16,740
a separate helper utility function that just used vanilla JavaScript.

67
00:04:16,980 --> 00:04:21,630
And we talked about the idea that it's often wise to move logic out of the component because it makes

68
00:04:21,630 --> 00:04:27,780
the component smaller, more isolated, with less responsibilities, and it allows us to test the logic

69
00:04:27,780 --> 00:04:32,430
independently of the component and the component potentially independently of the function.

70
00:04:32,430 --> 00:04:36,900
Even if we're using that function, by the way, in the body of the component, we can mock it out in

71
00:04:36,900 --> 00:04:37,380
tests.

72
00:04:37,740 --> 00:04:42,990
Speaking of marks, we introduced the just mock function which we could create manually using this syntax

73
00:04:42,990 --> 00:04:48,480
you see, just got offended that creates that mock function object and it essentially is an object that

74
00:04:48,480 --> 00:04:51,420
plays the role of a function but a fake function.

75
00:04:51,840 --> 00:04:57,330
And the advantage of that is we can use it as a stand in or a replacement or a substitute for a real

76
00:04:57,330 --> 00:04:59,790
function, which we do not want to involve.

77
00:04:59,910 --> 00:05:00,630
In our tests.

78
00:05:00,870 --> 00:05:05,790
So if we have a feature that we're working on and it depends on some dependencies and we don't want

79
00:05:05,790 --> 00:05:10,230
to incorporate all those features because it increases the complexity and the points of failure.

80
00:05:10,380 --> 00:05:15,870
We can tell just, hey, for this real thing, replace it with something fake, replace it with something

81
00:05:15,870 --> 00:05:20,160
simple that we can interact with and track so that we can isolate what it is that we're testing.

82
00:05:20,370 --> 00:05:25,410
It's the exact same idea we did earlier when we talked about shallow amounts and using stubs.

83
00:05:25,590 --> 00:05:28,140
A stub is a replacement for a real component.

84
00:05:28,380 --> 00:05:29,400
Same principle here.

85
00:05:29,400 --> 00:05:34,830
A just mock function is a replacement for a real function so that we can segment and isolate and test

86
00:05:34,830 --> 00:05:35,870
in smaller pieces.

87
00:05:35,880 --> 00:05:36,090
Right.

88
00:05:36,330 --> 00:05:41,250
And an additional advantage of the just function is that it can keep track of how many times it's been

89
00:05:41,250 --> 00:05:44,280
invoked with what arguments it's been called, etc..

90
00:05:44,430 --> 00:05:49,290
So we can test interactions between the units of our program without necessarily worrying about how

91
00:05:49,290 --> 00:05:51,630
the other unit does its business right.

92
00:05:52,380 --> 00:05:58,770
So that moves us to the use of our just use fake timer's method which auto mocks JavaScript timer functions

93
00:05:58,920 --> 00:06:00,750
such as set timeout and set interval.

94
00:06:00,960 --> 00:06:02,940
And we talked about why this is a good idea.

95
00:06:03,120 --> 00:06:08,250
And it is because we don't care about how the JavaScript development team developed set timeout and

96
00:06:08,250 --> 00:06:08,850
set interval.

97
00:06:09,240 --> 00:06:14,250
We just care that we are interacting with that separate piece of JavaScript functionality which we do

98
00:06:14,250 --> 00:06:18,900
not need to test, and that our component is sending the right message to those functions so that they

99
00:06:18,900 --> 00:06:25,200
can perform their logic and we can test what we care about, which is specifically our view component.

100
00:06:25,200 --> 00:06:25,440
Right.

101
00:06:25,710 --> 00:06:29,400
And of course, if we're going to use fake timers at the very beginning of the test, it's important

102
00:06:29,400 --> 00:06:35,460
for us to clean up the work we do so that we don't accidentally persist that modification into another

103
00:06:35,460 --> 00:06:39,540
test that may, for example, need to use the real JavaScript functions.

104
00:06:39,540 --> 00:06:39,780
Right?

105
00:06:40,020 --> 00:06:45,900
So after we marked everything out with use fake timers, we used the complementary method which is used

106
00:06:45,900 --> 00:06:51,900
real timers, which returns any mock functions back to their original native JavaScript implementations.

107
00:06:51,990 --> 00:06:52,260
Right.

108
00:06:52,950 --> 00:06:57,180
Another advantage, of course, of taking out our timers is that in our tests we could simulate the

109
00:06:57,180 --> 00:07:02,220
usage of set interval without actually having to wait three literal seconds and getting into all these

110
00:07:02,220 --> 00:07:06,930
race conditions of having to wait before we can test a compliance logic.

111
00:07:06,930 --> 00:07:07,140
Right.

112
00:07:07,260 --> 00:07:12,180
We basically just said, let's pretend set timeout reset interval works and we'll just tell just to

113
00:07:12,180 --> 00:07:17,970
simulate a replacement in its in its position and then pretend as if that passage of time has occurred.

114
00:07:18,150 --> 00:07:21,810
That's when we use that just run only pending timers method.

115
00:07:22,710 --> 00:07:23,010
All right.

116
00:07:23,250 --> 00:07:27,600
And then at the very end, we decided to clean up our code because of how often it was using those two

117
00:07:27,810 --> 00:07:31,170
helper methods to establish mock timers.

118
00:07:31,380 --> 00:07:36,630
And that was the before each function and the after each functions, the before each function is expected

119
00:07:36,630 --> 00:07:37,200
to function.

120
00:07:37,200 --> 00:07:41,280
And it will execute that function once before each test run.

121
00:07:41,370 --> 00:07:41,670
Right.

122
00:07:41,850 --> 00:07:45,210
So we use it to run shared setup code for each of our tests.

123
00:07:45,210 --> 00:07:51,900
And the name is perfect, right, because it runs once before each function, so before each test.

124
00:07:52,260 --> 00:07:57,540
And similarly we used the after each function to execute a function after each test concludes.

125
00:07:57,750 --> 00:08:03,720
So after we are done running all of our assertions and we can use after each to perform a shared cleanup.

126
00:08:03,900 --> 00:08:09,720
So anything that we create in before each, we can tear down anything that we instantiate or set up

127
00:08:09,720 --> 00:08:16,680
or change in before each we can bring back to its original state or return back to normal in after each.

128
00:08:16,800 --> 00:08:19,710
So one thing to run before the test, one thing join after.

129
00:08:19,710 --> 00:08:25,140
You're not obligated to use both or either you can use whichever one makes sense to you in a given test.

130
00:08:25,650 --> 00:08:31,140
But that is how we consolidated our code and allowed ourselves to establish mock timers at the very

131
00:08:31,140 --> 00:08:35,760
beginning of each test and then return it back to regular timers at the very conclusion of each test.

132
00:08:36,150 --> 00:08:36,440
All right.

133
00:08:36,450 --> 00:08:38,360
And that's all there is to cover in this section.

134
00:08:38,370 --> 00:08:39,180
Hope you've enjoyed it.

135
00:08:39,180 --> 00:08:41,940
And we will continue to the next section in the next lesson.

136
00:08:42,150 --> 00:08:48,810
And we're actually going to start building out our form where the user can supply their role and their

137
00:08:48,810 --> 00:08:49,370
location.

138
00:08:49,380 --> 00:08:50,310
So I will see you there.
