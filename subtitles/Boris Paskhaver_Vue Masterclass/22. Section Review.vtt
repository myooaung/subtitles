WEBVTT
1
00:00:00.330 --> 00:00:01.380
All right.

2
00:00:01.390 --> 00:00:05.190
So congratulations on reaching the end of another course section.

3
00:00:05.400 --> 00:00:11.640
In this section, we formally integrated TypeScript into our job search project and we used it to convert

4
00:00:11.640 --> 00:00:15.150
all of our view X related code to be in TypeScript.

5
00:00:15.510 --> 00:00:17.520
So let's quickly review everything that we learned.

6
00:00:17.820 --> 00:00:21.030
As we know, TypeScript is JavaScript with types.

7
00:00:21.180 --> 00:00:26.880
You can think of it like an enhanced version of the core JavaScript language except with the benefits

8
00:00:26.880 --> 00:00:27.840
of type checking.

9
00:00:28.110 --> 00:00:33.660
So when you have type checking, you can reduce the likelihood of a whole category of errors related

10
00:00:33.660 --> 00:00:36.060
to using the wrong type right.

11
00:00:36.240 --> 00:00:40.620
And we can very easily add TypeScript to a view project by simply using the view.

12
00:00:40.620 --> 00:00:44.070
SEELYE That command was view add TypeScript.

13
00:00:44.970 --> 00:00:45.360
Okay.

14
00:00:45.630 --> 00:00:49.500
So how did we start our process of migrating our code base to TypeScript?

15
00:00:49.710 --> 00:00:55.050
Well, we simply started converting JavaScript files to TypeScript files by changing their extensions

16
00:00:55.050 --> 00:01:01.110
from J.S. to T.S. and we saw that whenever we do that, we may encounter violations and all that.

17
00:01:01.110 --> 00:01:02.480
A violation usually is.

18
00:01:02.490 --> 00:01:07.470
Is TypeScript telling you that it doesn't know what kind of type it's working with and thus it cannot

19
00:01:07.470 --> 00:01:09.870
validate that you're using that type correctly?

20
00:01:10.140 --> 00:01:14.640
If TypeScript doesn't know, for example, that something is a string, then it can't tell you whether

21
00:01:14.640 --> 00:01:19.070
the method that you're invoking on that string is a valid one or an invalid one.

22
00:01:19.080 --> 00:01:19.350
Right?

23
00:01:19.860 --> 00:01:26.850
So we have to provide types whenever TypeScript cannot infer or guess or calculate what kind of type

24
00:01:26.850 --> 00:01:27.780
that value has.

25
00:01:27.940 --> 00:01:28.200
Right.

26
00:01:28.530 --> 00:01:32.490
We also saw how we could use an interface to define complex object types.

27
00:01:32.790 --> 00:01:36.060
That means objects with lots of properties with their own different types.

28
00:01:36.210 --> 00:01:41.550
We can use interfaces to handle that situation and a perfect use case for that was our view text or

29
00:01:41.550 --> 00:01:41.940
state.

30
00:01:42.120 --> 00:01:47.340
We gave that interface the name Global State and described our entire view store state.

31
00:01:47.340 --> 00:01:52.320
There was four properties there like jobs, selected organizations, selected job types, etc..

32
00:01:53.160 --> 00:01:53.460
All right.

33
00:01:53.670 --> 00:01:56.250
We also learned about the partial type in TypeScript.

34
00:01:56.400 --> 00:01:57.510
That's a type we can use.

35
00:01:57.690 --> 00:02:01.920
It accepts a generic argument, which means it accepts its own argument of a type.

36
00:02:02.070 --> 00:02:05.610
You do that within those brackets, the less than sign and the greater than sign.

37
00:02:05.820 --> 00:02:11.520
And what it does is it creates a new type where all the properties of the original type are made optional.

38
00:02:11.730 --> 00:02:13.920
So this is the example we used in our code base.

39
00:02:14.010 --> 00:02:15.390
We use the partial type.

40
00:02:15.510 --> 00:02:18.090
We gave it a generic type argument of global state.

41
00:02:18.270 --> 00:02:23.250
And what it did is it ran through global state and it gave us back a new type that is very similar to

42
00:02:23.250 --> 00:02:23.940
global state.

43
00:02:23.940 --> 00:02:28.650
It has all the same properties and all the expected types for those properties, except that all of

44
00:02:28.650 --> 00:02:30.840
those properties are now optional.

45
00:02:31.020 --> 00:02:35.610
And the advantage of this approach is that we can utilize it in places like our test suite to get the

46
00:02:35.610 --> 00:02:36.930
benefits of both worlds.

47
00:02:37.080 --> 00:02:42.930
We can have tests that tell an effective story but also utilize valid objects that the actual implementation

48
00:02:42.930 --> 00:02:43.980
expects to receive.

49
00:02:44.250 --> 00:02:49.230
We saw how TypeScript was unhappy with some of our tests because we were passing in objects that weren't

50
00:02:49.230 --> 00:02:50.850
fulfilling the original contract.

51
00:02:50.850 --> 00:02:55.560
We said they would in the actual implementation and the partial type allowed us to get the best of both

52
00:02:55.560 --> 00:03:01.410
worlds using real objects in our tests, but not having every test describe all of those properties

53
00:03:01.410 --> 00:03:02.640
in painstaking detail.

54
00:03:03.540 --> 00:03:03.930
All right.

55
00:03:04.230 --> 00:03:09.900
We also saw that TypeScript does not understand that the just mock method, it replaces an implementation

56
00:03:09.900 --> 00:03:11.250
with a just mock function.

57
00:03:11.430 --> 00:03:16.440
That's why it was complaining about our use with things like mock resolved value, because I thought

58
00:03:16.440 --> 00:03:21.810
we were invoking that method on the original function, for example, rather than the just mock function

59
00:03:21.810 --> 00:03:22.680
that replaced it.

60
00:03:23.040 --> 00:03:25.530
However, we saw that there was a pretty simple solution for that.

61
00:03:25.680 --> 00:03:31.020
We can use the as keyword to tell TypeScript to treat a value as having a different type.

62
00:03:31.440 --> 00:03:33.960
So for example, this is something directly from our code base.

63
00:03:34.110 --> 00:03:39.360
You can see we define a constant called get jobs mark and what it does is actually point to the exact

64
00:03:39.360 --> 00:03:44.910
same function that get jobs is however by using the as keyword, we're telling TypeScript to treat get

65
00:03:44.910 --> 00:03:48.540
jobs as if its type is a just mock function.

66
00:03:48.750 --> 00:03:52.740
And TypeScript says, okay, I have this feeling about what get jobs is.

67
00:03:52.860 --> 00:03:56.490
You've told me instead to treat it as if it's type is a just mock function.

68
00:03:56.730 --> 00:04:00.900
I know that a just mock function has a mock resolve value method on it.

69
00:04:01.140 --> 00:04:06.750
So later on in the code base, if you use get jobs mock Microsoft value, I will assume that that is

70
00:04:06.750 --> 00:04:10.560
a valid method because you've told me to treat it as a just mock object.

71
00:04:10.800 --> 00:04:11.130
All right.

72
00:04:11.400 --> 00:04:16.140
So once again, it's kind of finding the right interplay between having all of the pieces of your codebase

73
00:04:16.140 --> 00:04:17.460
communicate with each other.

74
00:04:17.670 --> 00:04:25.350
TypeScript is a language for typing in JavaScript just is a NPM library for running a test we and making

75
00:04:25.350 --> 00:04:29.550
assertions and we have to make sure they understand each other because TypeScript out of the box doesn't

76
00:04:29.550 --> 00:04:32.430
understand what just Mark does behind the scenes.

77
00:04:33.270 --> 00:04:33.630
All right.

78
00:04:33.720 --> 00:04:39.120
We also saw how we can go to type definition files to see the types that other developers have typed

79
00:04:39.120 --> 00:04:39.480
for us.

80
00:04:39.720 --> 00:04:44.340
So whenever you see something like an imported function or an imported component, anything from any

81
00:04:44.340 --> 00:04:48.900
other library, you can always command and click into that in this code and you're going to go to it's

82
00:04:48.900 --> 00:04:53.850
type definition, and that's usually going to be in the actual NPM library in your node modules directory.

83
00:04:54.120 --> 00:04:56.610
And this is helpful when analyzing other people's code.

84
00:04:56.910 --> 00:05:02.130
For example, we discovered that we can provide a generic type argument to the computed function and

85
00:05:02.130 --> 00:05:07.860
that allowed us to be more specific in defining the types of the return values of our composable functions.

86
00:05:08.040 --> 00:05:13.830
We saw that we could, for example, tell the computer function the type of the value that the reactive

87
00:05:13.830 --> 00:05:15.360
object in returns will wrap.

88
00:05:15.660 --> 00:05:17.220
So we saw that view.

89
00:05:17.340 --> 00:05:22.890
Or rather, TypeScript is smart enough to understand that the computed function returns a reactive object

90
00:05:23.370 --> 00:05:26.490
because it can read the documentation or the type for that function.

91
00:05:26.670 --> 00:05:31.710
But it is not smart enough to understand that that reactive object will, for example, wrap an array

92
00:05:31.710 --> 00:05:32.250
of jobs.

93
00:05:32.430 --> 00:05:38.490
But using the generic type arguments being more explicit and manual in our code, we can communicate

94
00:05:38.490 --> 00:05:40.230
those extra details to TypeScript.

95
00:05:40.410 --> 00:05:43.920
And remember, the more details we give to the language, the better it can type.

96
00:05:43.920 --> 00:05:44.430
Check the.

97
00:05:44.510 --> 00:05:44.750
Better.

98
00:05:44.750 --> 00:05:49.130
It can validate that we are using the right types, that we are performing valid operations, that we

99
00:05:49.130 --> 00:05:53.640
are invoking valid methods, that we're passing the right types to the right methods, the right types

100
00:05:53.640 --> 00:05:55.160
to the right functions, etc..

101
00:05:55.580 --> 00:05:55.910
All right.

102
00:05:56.150 --> 00:05:58.040
And that's really all there is to cover in this lesson.

103
00:05:58.040 --> 00:06:01.610
Congratulations on reaching the end of another course section and the very next section.

104
00:06:01.610 --> 00:06:03.380
We're going to continue learning more about TypeScript.

105
00:06:03.560 --> 00:06:06.470
We're going to start applying it to the components in our code base.

106
00:06:06.680 --> 00:06:09.410
So lots of fun up ahead and I will see you in the next section.
