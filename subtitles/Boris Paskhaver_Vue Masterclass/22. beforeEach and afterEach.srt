1
00:00:00,430 --> 00:00:06,910
In this lesson, I'd like to introduce you to two just helper functions which can help us dry up some

2
00:00:06,910 --> 00:00:09,400
of the code in our headline test file.

3
00:00:09,640 --> 00:00:14,590
And as a reminder, when I use the word dry, that is short for the expression, don't repeat yourself.

4
00:00:14,890 --> 00:00:19,840
In other words, we have a lot of duplication throughout our tests and there are ways that we can remove

5
00:00:19,840 --> 00:00:23,890
that duplication to make our test suite a little bit shorter and a little bit easier to read.

6
00:00:24,250 --> 00:00:29,650
Now, before we proceed, I would just like to state that duplication is not necessarily a bad thing.

7
00:00:29,920 --> 00:00:35,800
It's a bad thing when you are duplicating logic or behavior, not necessarily when you are duplicating

8
00:00:36,070 --> 00:00:41,350
boilerplate code, especially if that duplication, for example, is isolated, if it's independent,

9
00:00:41,350 --> 00:00:43,780
and if it makes the test easier to read.

10
00:00:44,140 --> 00:00:50,170
So if we look, for example, at our tests, we do have this constant duplication of the use fake timers

11
00:00:50,170 --> 00:00:53,410
and the use real timers methods, and that's what we're going to clean up.

12
00:00:53,650 --> 00:00:59,080
But you could argue that the advantage of those is that we can look at each test as its own isolated

13
00:00:59,080 --> 00:00:59,410
unit.

14
00:00:59,440 --> 00:01:03,040
We don't have to scroll up or down in the file to understand what is going on.

15
00:01:03,190 --> 00:01:08,680
We can read each test from its very beginning to its very end and have everything be self contained

16
00:01:08,680 --> 00:01:10,630
in that test description.

17
00:01:10,630 --> 00:01:14,710
So we know everything that's going on from our setup to our tear down, right?

18
00:01:14,950 --> 00:01:17,710
So as always, there's not necessarily always the best way.

19
00:01:17,710 --> 00:01:21,490
There are tradeoffs and advantages and disadvantages to different approaches.

20
00:01:21,760 --> 00:01:23,630
So let me show you an alternate approach here.

21
00:01:23,650 --> 00:01:28,390
We're going to introduce two helper functions called before each and after each.

22
00:01:28,570 --> 00:01:30,070
These are built into Gest.

23
00:01:30,250 --> 00:01:36,970
And what they can do is run a bit of logic for us before each test and after each test.

24
00:01:36,970 --> 00:01:37,250
Right.

25
00:01:37,300 --> 00:01:39,100
And we're not obligated to use both.

26
00:01:39,100 --> 00:01:40,180
We can use either one.

27
00:01:40,360 --> 00:01:45,910
So, for example, we can run a consistent piece of code only before each test or only after each test

28
00:01:46,030 --> 00:01:47,200
or have both.

29
00:01:47,200 --> 00:01:47,410
Right?

30
00:01:47,410 --> 00:01:48,910
It's up to us how we can figure it.

31
00:01:49,240 --> 00:01:55,540
And so I'm going to write this code inside our described block for a headline, but not inside anywhere

32
00:01:55,540 --> 00:01:59,470
else, because it's going to apply to every test within that block.

33
00:01:59,680 --> 00:02:04,240
So for example, if I write my before each call here, I'm just going to invoke this right now.

34
00:02:04,240 --> 00:02:05,710
It will come back to it in a second.

35
00:02:05,950 --> 00:02:10,570
But what this means is the logic that I put in here is going to run once before every test.

36
00:02:10,840 --> 00:02:14,770
And when I use the word test, I'm talking about each IT function call right here.

37
00:02:14,950 --> 00:02:20,800
So here is one example, here is two, here is three and here is four, which means we're going to run

38
00:02:20,800 --> 00:02:25,720
what's in the before each function, once before each of these four tests.

39
00:02:25,990 --> 00:02:26,320
Right.

40
00:02:26,680 --> 00:02:30,940
So the way this works is we pass before each a error function.

41
00:02:30,940 --> 00:02:35,260
So right here I'm going to provide an error function because we need to give it a procedure.

42
00:02:35,260 --> 00:02:37,690
We need to give it a sequence of one or more steps to follow.

43
00:02:37,840 --> 00:02:41,500
And this is what we want to run before every test starts running.

44
00:02:41,800 --> 00:02:47,380
So of course, what we can do before each test starts running is take this logic of just use fake timers

45
00:02:47,380 --> 00:02:48,670
and have it run in there.

46
00:02:48,910 --> 00:02:53,560
And the advantage of this is if I put this here, of course, is that I only have to write it once and

47
00:02:53,560 --> 00:02:55,900
just will automatically run it before each test.

48
00:02:56,140 --> 00:03:02,260
So as soon as I add this code, what that allows me to do is to clear out this line right here as well

49
00:03:02,260 --> 00:03:07,540
as this use fake timers method, call here and here as well, and here as well.

50
00:03:08,500 --> 00:03:08,830
All right.

51
00:03:08,830 --> 00:03:13,660
So we've made each test a little bit shorter and we've consolidated the commonalities between them to

52
00:03:13,660 --> 00:03:16,000
this before each function.

53
00:03:16,000 --> 00:03:21,220
So we invoke that before each function, and we also pass it a function argument that specifies what

54
00:03:21,220 --> 00:03:22,960
to do once before each test.

55
00:03:22,960 --> 00:03:23,290
Right.

56
00:03:23,590 --> 00:03:30,340
And the complementary function to that again coming from just is after each and just like its name describes,

57
00:03:30,340 --> 00:03:33,100
this is logic that runs after each test.

58
00:03:33,460 --> 00:03:39,610
So we similarly invoke it and we pass it a arrow function and we specify what to do after each test.

59
00:03:39,820 --> 00:03:45,970
So kind of a way you can look at it is before each is for test setup or for configuring the elements

60
00:03:45,970 --> 00:03:51,340
that are common or shared between tests and after each is for tearing those setup things down.

61
00:03:51,550 --> 00:03:53,440
So what do we want to do after every test?

62
00:03:53,560 --> 00:03:58,870
We want to make sure we return back to using real timers so I can cut and paste this line of logic right

63
00:03:58,870 --> 00:03:59,200
here.

64
00:03:59,230 --> 00:04:04,540
After every test, we're going to return just back to using the real JavaScript timer functions, which

65
00:04:04,540 --> 00:04:09,700
of course allows us to get rid of this used real timers logic here and allows us to get rid of this

66
00:04:09,700 --> 00:04:12,760
method call here and in the very last test as well.

67
00:04:13,060 --> 00:04:17,620
So we have made the test suite significantly shorter and kind of a little bit more logical, you could

68
00:04:17,620 --> 00:04:18,010
say.

69
00:04:18,190 --> 00:04:21,040
And there are certainly advantages to this and I like this approach.

70
00:04:21,040 --> 00:04:25,930
I just do want to make sure you're being exposed to different coding opinions, what another developer

71
00:04:25,930 --> 00:04:31,060
might argue is now, unfortunately, in order to understand everything that's going on in this test,

72
00:04:31,060 --> 00:04:37,720
to understand why clear interval has been marked out in the first place, you do have to know to scroll

73
00:04:37,720 --> 00:04:42,940
up and look for other things in the file that are configuring that logic, right?

74
00:04:42,940 --> 00:04:47,440
So it takes you out of that consistent flow of just being able to read a test from top to bottom and

75
00:04:47,440 --> 00:04:48,700
know everything that is going on.

76
00:04:48,910 --> 00:04:54,760
And especially if you have something like a test suite with 100 different lines and, you know, ten

77
00:04:54,760 --> 00:04:59,900
tests and even you can set up multiple before each function calls to run with in display.

78
00:05:00,000 --> 00:05:00,690
5 seconds.

79
00:05:00,870 --> 00:05:06,240
So you can run an outer level before each that runs, for example, for all tests and then an inner

80
00:05:06,240 --> 00:05:08,640
level before each that only runs for half the tests.

81
00:05:08,790 --> 00:05:13,470
You can get really complex and nested with this set up and as you might imagine, that can actually

82
00:05:13,470 --> 00:05:15,270
make the test harder to read.

83
00:05:15,390 --> 00:05:21,210
You're going to have less lines of code because you're going to remove duplication, but you might increase

84
00:05:21,210 --> 00:05:21,870
complexity.

85
00:05:22,020 --> 00:05:26,070
And having the smallest number of lines of code is not necessarily the best metric, right?

86
00:05:26,250 --> 00:05:30,380
Because the benefit of tests is to give you comfort that the code works as it does.

87
00:05:30,390 --> 00:05:30,720
Right.

88
00:05:30,930 --> 00:05:35,160
And it's and this approach similarly is not necessarily going to make the tests any faster because we're

89
00:05:35,160 --> 00:05:38,610
basically doing the same thing or running a bit of logic before each test.

90
00:05:38,880 --> 00:05:42,330
And then we're running or running a bit of logic after each test.

91
00:05:42,450 --> 00:05:48,250
That's the exact same thing we were doing, but just manually and more explicitly beforehand.

92
00:05:48,270 --> 00:05:48,450
Right.

93
00:05:48,450 --> 00:05:53,310
So it's not like we are doing less operations, we're just writing less lines of code and sometimes

94
00:05:53,310 --> 00:05:58,800
of that less lines of code makes the test harder to interpret or understand or require you to scroll

95
00:05:59,010 --> 00:06:02,990
up and down to understand all the different pieces that might not necessarily be a victory.

96
00:06:03,000 --> 00:06:03,270
Right?

97
00:06:03,450 --> 00:06:04,550
So keep that in mind.

98
00:06:04,560 --> 00:06:06,600
Always focus on developer happiness.

99
00:06:06,600 --> 00:06:11,460
Focus on if the tests clearly describe what is being tested, if they're easy to understand and reason

100
00:06:11,460 --> 00:06:16,530
about and do not always be afraid of duplication, it's not necessarily the worst thing in the world.

101
00:06:16,710 --> 00:06:19,020
It's not necessarily a great thing to be celebrated either.

102
00:06:19,200 --> 00:06:22,350
But it is something with caveats and advantages and disadvantages.

103
00:06:22,530 --> 00:06:26,640
But in this lesson, we did learn about the adjusted before each and after each functions.

104
00:06:26,790 --> 00:06:31,560
They each take a function and it can use that function to write the logic that you'd like to execute

105
00:06:31,740 --> 00:06:33,960
before or after each test.

106
00:06:33,990 --> 00:06:35,430
In this test, we will run.

107
00:06:35,580 --> 00:06:37,590
And of course, we're not just limited to one method call.

108
00:06:37,590 --> 00:06:41,610
We can put as many lines of logic as we want here to set up whatever we need.

109
00:06:41,820 --> 00:06:47,730
You'll even see a pattern sometimes where people will, for example, mount a component in the before

110
00:06:47,730 --> 00:06:53,040
each and assign it to a variable with a let keyword so that they can have, for example, a wrapper

111
00:06:53,040 --> 00:06:57,780
keyword immediately available to use within each test without having to mount the component.

112
00:06:57,780 --> 00:07:00,930
And again, those are all examples of how you can reduce code.

113
00:07:01,050 --> 00:07:06,990
But in this scenario, I actually like having the mount in every test because again, it communicates

114
00:07:06,990 --> 00:07:09,180
to other readers what it is that you're actually testing.

115
00:07:09,180 --> 00:07:13,860
It's very easy to see, okay, I'm mounting my headline component in this test instead of having to

116
00:07:13,860 --> 00:07:18,360
scroll up somewhere in the file and say, Oh, okay, so what wrapper represents is a mounted headline

117
00:07:18,360 --> 00:07:19,050
component, right?

118
00:07:19,350 --> 00:07:20,670
So again, just keep that all in mind.

119
00:07:20,670 --> 00:07:23,220
I hope this has been helpful and I will see you in the next lesson.
