1
00:00:01,210 --> 00:00:02,043
All right,

2
00:00:02,043 --> 00:00:03,120
so we're making some good progress here.

3
00:00:03,120 --> 00:00:04,550
So, in this video we'll cover step three

4
00:00:04,550 --> 00:00:06,080
of setting up the expectations,

5
00:00:06,080 --> 00:00:08,080
step four of calling a method under test

6
00:00:08,080 --> 00:00:10,443
and then step five, verifying the method calls.

7
00:00:23,430 --> 00:00:25,113
Let's go ahead and set up a test.

8
00:00:35,860 --> 00:00:38,853
So, this will be for assertEqualsTestAddGrades.

9
00:00:43,270 --> 00:00:44,770
And also just as a quick review,

10
00:00:44,770 --> 00:00:46,460
just remember the structure of the test

11
00:00:46,460 --> 00:00:48,140
when we're making use of mocking.

12
00:00:48,140 --> 00:00:48,973
The first thing that we'll do

13
00:00:48,973 --> 00:00:50,730
is we'll set up the expectations.

14
00:00:50,730 --> 00:00:53,440
We'll execute the method, we'll perform an assert

15
00:00:53,440 --> 00:00:54,780
and then we'll verify the results.

16
00:00:54,780 --> 00:00:57,060
So that's the basic structure that we'll use here

17
00:00:57,060 --> 00:00:57,993
for this method.

18
00:01:01,750 --> 00:01:05,379
Let's go ahead and set expectations with mock responses.

19
00:01:05,379 --> 00:01:08,473
So we have when, our application code,

20
00:01:08,473 --> 00:01:12,223
applicationDao.addGradeResultsForSingleClass,

21
00:01:16,560 --> 00:01:17,833
then return 100.

22
00:01:42,193 --> 00:01:46,943
And then I'll go through and I'll set up my asserts here.

23
00:01:58,767 --> 00:02:02,350
So I have assertEquals 100 comma application service

24
00:02:02,350 --> 00:02:04,563
add grade results for a single class.

25
00:02:18,955 --> 00:02:20,160
And then let me line things up

26
00:02:20,160 --> 00:02:23,230
so we can kind of see all of this on one screen.

27
00:02:23,230 --> 00:02:25,430
Too much stuff is scrolling off to the side.

28
00:02:35,270 --> 00:02:37,380
Okay, so that looks better now just kind of recap here.

29
00:02:37,380 --> 00:02:39,400
So, when method add great results

30
00:02:39,400 --> 00:02:42,320
for single classes called then return 100.

31
00:02:42,320 --> 00:02:43,850
And so what we're doing here is we're just setting

32
00:02:43,850 --> 00:02:46,120
up the mock response, just like in theater

33
00:02:46,120 --> 00:02:48,800
I'll say my line, then you can respond with your line.

34
00:02:48,800 --> 00:02:52,830
So we're setting up information here for our discussions

35
00:02:52,830 --> 00:02:54,053
or our rehearsal.

36
00:02:56,310 --> 00:02:58,583
All right so let's go ahead and run this test.

37
00:03:06,670 --> 00:03:08,630
And we can see that the test passed

38
00:03:08,630 --> 00:03:11,260
the test was successful when in verify

39
00:03:11,260 --> 00:03:13,033
passed AOK, no problems.

40
00:03:15,120 --> 00:03:16,090
Let's go and break the test

41
00:03:16,090 --> 00:03:18,140
so that can responses here.

42
00:03:18,140 --> 00:03:22,710
So instead of returning 100, we'll change it to return 300.

43
00:03:22,710 --> 00:03:25,013
And then when that runs it's going to fail.

44
00:03:42,930 --> 00:03:46,150
Let's go ahead and swing it back to a 100

45
00:03:46,150 --> 00:03:47,323
sticking to the script,

46
00:03:51,230 --> 00:03:53,360
and then we can save that and run it.

47
00:03:53,360 --> 00:03:55,570
And then this test will run successfully

48
00:03:55,570 --> 00:03:57,093
and pass with no problem.

49
00:04:00,650 --> 00:04:02,580
Great, so this is a really good example here.

50
00:04:02,580 --> 00:04:04,660
We set up a mock for the DAO.

51
00:04:04,660 --> 00:04:07,880
We use it in our service, and then we set the expectations

52
00:04:07,880 --> 00:04:09,410
and we're getting test results.

53
00:04:09,410 --> 00:04:11,670
So we're making use of that test double here

54
00:04:11,670 --> 00:04:14,863
for our testing environment right now, which is really cool.

55
00:04:20,370 --> 00:04:22,150
And so the next thing I'll do is I'll verify.

56
00:04:22,150 --> 00:04:24,840
So I'll verify that a given method was called

57
00:04:24,840 --> 00:04:26,753
during this whole testing process.

58
00:04:40,110 --> 00:04:43,110
This coding hill will verify that the DAO method was called.

59
00:04:45,350 --> 00:04:47,200
Now, let's go ahead and run this test

60
00:04:51,695 --> 00:04:55,195
and this test passes okay with no problem.

61
00:04:59,720 --> 00:05:01,553
There's another version of this verified method

62
00:05:01,553 --> 00:05:02,386
that you can use.

63
00:05:02,386 --> 00:05:05,030
You can verify, you can ask how many times

64
00:05:05,030 --> 00:05:05,920
was this method called?

65
00:05:05,920 --> 00:05:06,753
Was it called once?

66
00:05:06,753 --> 00:05:07,940
Was it called five times?

67
00:05:07,940 --> 00:05:10,070
Was it called 20 times?

68
00:05:10,070 --> 00:05:12,580
So in this example, I'm going to say times three.

69
00:05:12,580 --> 00:05:15,660
So basically I want to know was this method called

70
00:05:15,660 --> 00:05:18,023
three times during this given test.

71
00:05:19,700 --> 00:05:22,270
And what we know is that we really only called

72
00:05:22,270 --> 00:05:24,500
this method once, okay.

73
00:05:24,500 --> 00:05:26,250
But here I'm testing it for three.

74
00:05:26,250 --> 00:05:29,213
I just want to run this to see if this will break.

75
00:05:33,000 --> 00:05:34,773
And it does break it fails.

76
00:05:35,710 --> 00:05:40,180
Looking at the results here says for this method

77
00:05:40,180 --> 00:05:42,730
we wanted three times,

78
00:05:42,730 --> 00:05:46,680
but it was only called one time.

79
00:05:46,680 --> 00:05:48,560
Great, so we really only called it one time.

80
00:05:48,560 --> 00:05:50,003
So, that's okay.

81
00:05:52,190 --> 00:05:54,730
And we can simply change the times there to one

82
00:05:56,130 --> 00:05:57,640
and then we run the test again

83
00:06:00,430 --> 00:06:02,880
and we see that this given test passes okay.

84
00:06:02,880 --> 00:06:04,080
So, this is really good.

85
00:06:05,730 --> 00:06:07,070
And I'll line the code up here

86
00:06:07,070 --> 00:06:08,993
just so it shows up all on one screen.

87
00:06:14,160 --> 00:06:16,170
Okay, so this is a good example of writing a test

88
00:06:16,170 --> 00:06:17,180
using mockito.

89
00:06:17,180 --> 00:06:18,760
You made use of expectations.

90
00:06:18,760 --> 00:06:21,100
We did some asserts and also some verifies.

91
00:06:21,100 --> 00:06:23,263
So I say, good job, my friend.

