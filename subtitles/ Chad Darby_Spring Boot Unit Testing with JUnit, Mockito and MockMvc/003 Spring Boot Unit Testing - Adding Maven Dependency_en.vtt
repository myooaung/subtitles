WEBVTT
1
00:00:01.920 --> 00:00:02.753
Let's get started

2
00:00:02.753 --> 00:00:06.363
by adding the Maven Dependency for spring-boot-starter-test.

3
00:00:14.640 --> 00:00:16.703
I'll open up my pom.xml file.

4
00:00:25.664 --> 00:00:30.164
And I'll move down here and I'll add a new dependency.

5
00:00:31.950 --> 00:00:34.970
And I'll actually just copy the previous dependency

6
00:00:35.880 --> 00:00:40.880
and paste it, and then simply update the artifactId

7
00:00:41.260 --> 00:00:44.070
to spring-boot-starter-test.

8
00:00:44.070 --> 00:00:45.540
Set the scope to test,

9
00:00:45.540 --> 00:00:48.060
because we only want to use this given dependency

10
00:00:48.060 --> 00:00:49.993
when we're testing the application.

11
00:00:52.060 --> 00:00:54.640
And remember, this starter includes a transitive dependency

12
00:00:54.640 --> 00:00:56.743
on JUnit 5, so we get it for free.

13
00:01:00.080 --> 00:01:01.693
Just do a quick update here.

14
00:01:09.620 --> 00:01:11.880
And now let's go ahead and explore the dependencies here

15
00:01:11.880 --> 00:01:14.203
and verify that JUnit 5 support.

16
00:01:15.430 --> 00:01:17.380
So I'll open up the Maven panel

17
00:01:19.700 --> 00:01:22.453
and I'll expand the Dependencies section here.

18
00:01:26.420 --> 00:01:28.983
And for this spring-boot-starter-test,

19
00:01:36.000 --> 00:01:38.550
I'll zoom in here for a bit,

20
00:01:38.550 --> 00:01:40.670
and you can see that there's a reference here

21
00:01:40.670 --> 00:01:42.860
for org.junit.jupiter.

22
00:01:42.860 --> 00:01:47.020
So remember, JUnit Jupiter is for JUnit 5.

23
00:01:47.020 --> 00:01:48.920
So again, we're confirming here

24
00:01:48.920 --> 00:01:51.580
that we do have a transitive dependency in JUnit 5,

25
00:01:51.580 --> 00:01:53.700
and we get this for free.

26
00:01:53.700 --> 00:01:56.653
It's included as part of the spring-boot-starter-test.

27
00:02:05.340 --> 00:02:06.790
And as I showed you in the slides,

28
00:02:06.790 --> 00:02:09.650
we can also verify this information from the command lines.

29
00:02:09.650 --> 00:02:12.300
You can open up a terminal window or a command prompt

30
00:02:13.980 --> 00:02:17.060
and just type in mvn dependency:tree.

31
00:02:17.060 --> 00:02:18.930
This will give you a list of all the dependencies

32
00:02:18.930 --> 00:02:19.913
for your project.

33
00:02:25.797 --> 00:02:28.120
And it'll download some supporting items,

34
00:02:28.120 --> 00:02:30.920
it'll print out a lot of information for you,

35
00:02:30.920 --> 00:02:33.420
but if you kind of scroll through the results for a bit

36
00:02:33.420 --> 00:02:37.270
and you'll see this section here for org.junit.jupiter.

37
00:02:37.270 --> 00:02:39.210
So that's the JUnit 5 support.

38
00:02:39.210 --> 00:02:43.460
So again, confirming that we have this available for free

39
00:02:43.460 --> 00:02:45.210
with this spring-boot-starter-test.

40
00:02:46.940 --> 00:02:48.523
Awesome. I like it, I like it.

41
00:02:53.780 --> 00:02:55.890
All right, so all of our config stuff is set up.

42
00:02:55.890 --> 00:02:58.243
Let's go ahead and start writing some code.

43
00:03:01.590 --> 00:03:03.170
So the first thing I like to do is go ahead

44
00:03:03.170 --> 00:03:07.750
and create the test directory for this Maven project.

45
00:03:07.750 --> 00:03:10.683
So I'll select src and create new directory.

46
00:03:13.480 --> 00:03:14.793
I'll choose test/java.

47
00:03:22.741 --> 00:03:27.741
And then underneath test/java we'll create a new package.

48
00:03:32.920 --> 00:03:35.303
I'll call it com.luv2code.test.

49
00:03:41.620 --> 00:03:44.273
And now in this package I'll create a new class.

50
00:03:49.845 --> 00:03:51.762
ApplicationExampleTest.

51
00:04:02.489 --> 00:04:06.239
I'll annotate this class with SpringBootTest.

52
00:04:11.060 --> 00:04:12.340
And just to help us out here,

53
00:04:12.340 --> 00:04:14.270
I'll add a very basic test right now

54
00:04:14.270 --> 00:04:16.100
that really doesn't do anything,

55
00:04:16.100 --> 00:04:18.370
but I'll just annotate it as a test

56
00:04:18.370 --> 00:04:20.470
just to give us some basic infrastructure.

57
00:04:21.790 --> 00:04:23.653
Now let's go ahead and run this test.

58
00:04:28.600 --> 00:04:29.760
And it's running and...

59
00:04:29.760 --> 00:04:33.163
Ooh, test failed, ignored.

60
00:04:39.260 --> 00:04:40.170
Huh, interesting.

61
00:04:40.170 --> 00:04:42.550
Okay, so looking at the results here,

62
00:04:42.550 --> 00:04:45.902
unable to find SpringBootConfiguration.

63
00:04:45.902 --> 00:04:46.735
Okay.

64
00:04:49.610 --> 00:04:52.280
You need to use ContextConfiguration

65
00:04:52.280 --> 00:04:54.423
or SpringBootTest classes.

66
00:04:56.060 --> 00:04:57.273
Huh, okay.

67
00:05:05.120 --> 00:05:07.700
Okay, I think I know what the issue is.

68
00:05:07.700 --> 00:05:09.760
Remember, in the slides,

69
00:05:09.760 --> 00:05:12.250
we mentioned the idea of the package names.

70
00:05:12.250 --> 00:05:16.240
And in this scenario here we have different package names.

71
00:05:16.240 --> 00:05:19.850
So that's the root cause right now, different package names.

72
00:05:19.850 --> 00:05:21.180
If we use the same package names

73
00:05:21.180 --> 00:05:23.220
everything will work with zero configuration,

74
00:05:23.220 --> 00:05:24.960
but here I use different package names

75
00:05:24.960 --> 00:05:27.430
so that's why we're having the problem.

76
00:05:27.430 --> 00:05:28.830
Let's go ahead to use one solution

77
00:05:28.830 --> 00:05:31.280
and we simply just rename the test package

78
00:05:31.280 --> 00:05:33.820
to match the same as the main package.

79
00:05:33.820 --> 00:05:36.170
So I'll call it com.luv2code.component.

80
00:05:36.170 --> 00:05:38.040
Again, making everything the same

81
00:05:38.040 --> 00:05:40.290
and making everything simple and easy for us.

82
00:05:45.948 --> 00:05:46.781
All right, so notice here

83
00:05:46.781 --> 00:05:48.990
we have the same package names under test,

84
00:05:48.990 --> 00:05:50.530
same package names under main.

85
00:05:50.530 --> 00:05:51.633
Okay, awesome.

86
00:05:55.850 --> 00:05:57.353
Now let's run our test again.

87
00:06:02.330 --> 00:06:04.460
And success. Excellent, great.

88
00:06:04.460 --> 00:06:06.790
So everything worked, it found the test,

89
00:06:06.790 --> 00:06:09.150
it processed the test and so forth.

90
00:06:09.150 --> 00:06:11.760
It's a basic test, but at least that part worked.

91
00:06:11.760 --> 00:06:13.000
Okay, cool.

92
00:06:13.000 --> 00:06:14.830
Now what if I really wanted to use

93
00:06:14.830 --> 00:06:17.030
a different package name just for fun?

94
00:06:17.030 --> 00:06:18.730
Like, hey, I don't want to use the exact same name,

95
00:06:18.730 --> 00:06:20.110
I want to change it to something else.

96
00:06:20.110 --> 00:06:22.490
Well, we can rename it back to what we had it before.

97
00:06:22.490 --> 00:06:24.340
So I'll choose Refactor, Rename.

98
00:06:24.340 --> 00:06:25.570
The important thing here,

99
00:06:25.570 --> 00:06:27.970
be sure to choose In Current Source Root.

100
00:06:27.970 --> 00:06:31.300
So we're only refactoring the test package name.

101
00:06:31.300 --> 00:06:33.170
We're not refactoring everything else.

102
00:06:33.170 --> 00:06:35.343
So instead of component, I'll call it test.

103
00:06:40.290 --> 00:06:41.960
All right, so now notice here

104
00:06:41.960 --> 00:06:43.100
we have different package names.

105
00:06:43.100 --> 00:06:46.140
So under test/java, we have com.luv2code.test.

106
00:06:46.140 --> 00:06:49.314
Under main, com.luv2code.component, all right?

107
00:06:49.314 --> 00:06:50.200
And this is kind of what we...

108
00:06:50.200 --> 00:06:51.560
We're kind of going full circle here.

109
00:06:51.560 --> 00:06:52.970
This is where we were at before.

110
00:06:52.970 --> 00:06:54.100
If we try to run it,

111
00:06:54.100 --> 00:06:56.860
we'd fail and ignore it and all that stuff.

112
00:06:56.860 --> 00:06:58.170
And we saw this stuff before.

113
00:06:58.170 --> 00:06:59.340
But now one thing that's nice here

114
00:06:59.340 --> 00:07:01.610
is that in this error message they'll even give you a hint.

115
00:07:01.610 --> 00:07:02.443
They'll say,

116
00:07:02.443 --> 00:07:05.500
use ContextConfiguration or SpringBootTest classes.

117
00:07:05.500 --> 00:07:08.610
Ah, that's it, classes. We saw that in the slides.

118
00:07:08.610 --> 00:07:10.040
So here I can give classes.

119
00:07:10.040 --> 00:07:11.940
And now I simply specify the name

120
00:07:11.940 --> 00:07:14.260
of my main Spring Boot application class,

121
00:07:14.260 --> 00:07:18.193
which is MvcTestingExampleApplication.class.

122
00:07:20.650 --> 00:07:22.980
So now it'll know how to find the main class

123
00:07:22.980 --> 00:07:23.880
that we have here.

124
00:07:27.950 --> 00:07:29.393
Now if I give it a run.

125
00:07:35.120 --> 00:07:36.130
Success.

126
00:07:36.130 --> 00:07:39.490
So now our SpringBootTest runs properly

127
00:07:39.490 --> 00:07:41.820
even when we have different package names,

128
00:07:41.820 --> 00:07:44.930
because here we gave the explicit configuration.

129
00:07:44.930 --> 00:07:46.860
I showed you two different ways of doing it.

130
00:07:46.860 --> 00:07:47.930
I'm going to go ahead and keep it

131
00:07:47.930 --> 00:07:50.250
with the existing code that I have here for now,

132
00:07:50.250 --> 00:07:52.080
and we'll continue on with the videos.

133
00:07:52.080 --> 00:07:53.250
But you have an option,

134
00:07:53.250 --> 00:07:54.660
you can feel free to rename it back

135
00:07:54.660 --> 00:07:57.890
such that the package names match exactly.

136
00:07:57.890 --> 00:08:00.273
Alrighty, so good work so far. Good job.

