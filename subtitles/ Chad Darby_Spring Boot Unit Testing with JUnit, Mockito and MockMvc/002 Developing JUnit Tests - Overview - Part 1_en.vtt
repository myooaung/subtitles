WEBVTT
1
00:00:01.220 --> 00:00:03.943
In this video will get started with JUnit.

2
00:00:08.039 --> 00:00:10.920
Let's start with some real simple examples for unit testing.

3
00:00:10.920 --> 00:00:11.753
So at the moment,

4
00:00:11.753 --> 00:00:14.530
we'll focus on the JUnit fundamentals for testing.

5
00:00:14.530 --> 00:00:18.720
So we'll learn how to define a test, JUnit Assertions,

6
00:00:18.720 --> 00:00:20.110
and running the test.

7
00:00:20.110 --> 00:00:20.943
And again,

8
00:00:20.943 --> 00:00:23.720
we'll start with some very simple coding examples.

9
00:00:23.720 --> 00:00:26.080
The main focus is learning the fundamentals

10
00:00:26.080 --> 00:00:28.650
and the mechanics and also later on,

11
00:00:28.650 --> 00:00:29.680
we'll discuss techniques

12
00:00:29.680 --> 00:00:31.730
such as Test Driven-Development and so on.

13
00:00:31.730 --> 00:00:33.120
So a lot of good stuff coming.

14
00:00:33.120 --> 00:00:34.430
So we'll start slow,

15
00:00:34.430 --> 00:00:36.773
and then we'll move into more advanced items.

16
00:00:39.260 --> 00:00:40.720
Now we'll start with this example here,

17
00:00:40.720 --> 00:00:44.420
DemoUtils has a method called add takes two numbers

18
00:00:44.420 --> 00:00:47.160
and we'll add those numbers and send back a result

19
00:00:47.160 --> 00:00:49.030
and then we'll test this method here.

20
00:00:49.030 --> 00:00:51.350
We'll do an add on two comma four

21
00:00:51.350 --> 00:00:54.360
and check to see if the result is equal to six.

22
00:00:54.360 --> 00:00:56.150
And we'll also call the method again

23
00:00:56.150 --> 00:00:58.210
and we'll add one comma nine

24
00:00:58.210 --> 00:01:00.610
and then we'll see if the result is equal to 10.

25
00:01:03.670 --> 00:01:05.379
And so here's the code that we're going to test.

26
00:01:05.379 --> 00:01:07.507
We have this class here, DemoUtils

27
00:01:10.030 --> 00:01:12.320
the method add takes into integers

28
00:01:12.320 --> 00:01:13.903
and it returns the result.

29
00:01:18.670 --> 00:01:20.330
Here's our Development Process.

30
00:01:20.330 --> 00:01:21.163
So in the first step,

31
00:01:21.163 --> 00:01:23.840
we're going to add the Maven dependencies for JUnit.

32
00:01:23.840 --> 00:01:26.870
Then we'll create a test package, we'll create a unit test

33
00:01:26.870 --> 00:01:28.970
and then finally, we'll run the unit test.

34
00:01:33.610 --> 00:01:36.770
Step one of adding the Maven dependencies for JUnit.

35
00:01:36.770 --> 00:01:38.320
So in our Maven pom file

36
00:01:38.320 --> 00:01:39.870
we need to add this given dependency.

37
00:01:39.870 --> 00:01:44.130
So we get the group ID, the artifact ID, and aversion.

38
00:01:44.130 --> 00:01:45.870
Also notice here we have the scope.

39
00:01:45.870 --> 00:01:47.440
We have the scope set to test.

40
00:01:47.440 --> 00:01:48.273
So what does this mean?

41
00:01:48.273 --> 00:01:50.777
Well, it means that this dependency

42
00:01:50.777 --> 00:01:51.920
is only for test purposes,

43
00:01:51.920 --> 00:01:53.830
only when we're running the unit test.

44
00:01:53.830 --> 00:01:55.680
This dependency is not required

45
00:01:55.680 --> 00:01:58.203
for normal execution of the application.

46
00:02:01.730 --> 00:02:05.390
Now, moving ahead to step two of creating a test package.

47
00:02:05.390 --> 00:02:07.970
So the code that testing is located in a package

48
00:02:07.970 --> 00:02:09.810
com.luv2code.junitdemo

49
00:02:11.015 --> 00:02:13.216
and we can see it here in our project setup.

50
00:02:15.990 --> 00:02:17.100
So there's the package

51
00:02:17.100 --> 00:02:18.810
and then there's the actual application code

52
00:02:18.810 --> 00:02:20.163
or class DemoUtils.

53
00:02:21.210 --> 00:02:23.560
Now a convention is to create the test classes

54
00:02:23.560 --> 00:02:27.183
and a similar package structure under slash test.

55
00:02:29.600 --> 00:02:32.500
So we have our actual package com.luv2code.junit

56
00:02:32.500 --> 00:02:36.860
and then we have the unit test DemoUtilsTest.

57
00:02:36.860 --> 00:02:38.510
Now this is not a hard requirement

58
00:02:38.510 --> 00:02:40.250
it's merely a convention

59
00:02:40.250 --> 00:02:42.500
helps with the organization of test classes.

60
00:02:42.500 --> 00:02:44.620
It makes it easy to find test classes

61
00:02:44.620 --> 00:02:47.190
when you join a new team or a new project

62
00:02:47.190 --> 00:02:49.330
and also it handles special edge cases

63
00:02:49.330 --> 00:02:51.710
for accessing protected class members.

64
00:02:51.710 --> 00:02:54.200
So this is the approach that you'll see used

65
00:02:54.200 --> 00:02:57.053
on real time projects in the real world.

66
00:03:00.100 --> 00:03:02.920
Next, we have step three of creating a unit test.

67
00:03:02.920 --> 00:03:06.120
In general unit tests have the following structure.

68
00:03:06.120 --> 00:03:10.530
You have a Set Up, Execute and also Assert.

69
00:03:10.530 --> 00:03:11.930
So during the setup phase

70
00:03:11.930 --> 00:03:14.800
that's when you create an instance of the class to test

71
00:03:14.800 --> 00:03:16.790
and then for execute is when you actually call

72
00:03:16.790 --> 00:03:18.380
the method you want to test

73
00:03:18.380 --> 00:03:20.790
and then finally assert is when you check the result

74
00:03:20.790 --> 00:03:23.633
and verify that it is the expected result.

75
00:03:27.560 --> 00:03:29.390
All righty, so let's look at a coding example here

76
00:03:29.390 --> 00:03:30.403
of our unit test.

77
00:03:31.460 --> 00:03:34.710
So we have some imports from the junit API.

78
00:03:34.710 --> 00:03:36.360
We have this class DemoUtilsTest.

79
00:03:40.690 --> 00:03:42.510
And notice here it's under that test structure

80
00:03:42.510 --> 00:03:43.713
that we set up earlier.

81
00:03:51.150 --> 00:03:55.100
Then I had this method here called testEqualsAndNotEquals.

82
00:03:55.100 --> 00:03:56.460
I make use of the annotation

83
00:03:56.460 --> 00:03:58.653
to say that this is a test method.

84
00:04:01.550 --> 00:04:04.250
And then the test method, you can actually have any name.

85
00:04:04.250 --> 00:04:07.253
All you need here is really just the at test annotation.

86
00:04:08.990 --> 00:04:12.243
And then here we'll do our setup, execute and assert.

87
00:04:17.660 --> 00:04:19.800
So as far as the setup, I'll create an instance

88
00:04:19.800 --> 00:04:22.373
of the class that I want to test, DemoUtils.

89
00:04:25.370 --> 00:04:27.393
I have the expected value of six,

90
00:04:28.530 --> 00:04:29.850
and then I execute.

91
00:04:29.850 --> 00:04:31.830
So I called the method that I want to test.

92
00:04:31.830 --> 00:04:36.530
So I'll call demoUtils.add2,4 that'll return a value here

93
00:04:36.530 --> 00:04:39.583
and that's the actual value of that given test.

94
00:04:42.150 --> 00:04:44.170
And then finally I perform an assert.

95
00:04:44.170 --> 00:04:48.470
So here I say, assert equals expected comma actual

96
00:04:48.470 --> 00:04:50.370
and then I give a optional error message.

97
00:04:50.370 --> 00:04:53.520
So here what I'm doing is I'm checking the actual result

98
00:04:53.520 --> 00:04:56.110
in verifying that it is the expected result.

99
00:04:56.110 --> 00:04:57.740
Basically here in this assertion,

100
00:04:57.740 --> 00:04:59.570
seeing if those two values are equal

101
00:05:00.550 --> 00:05:03.440
and if they are equal then that test will pass

102
00:05:03.440 --> 00:05:05.593
two plus four should equal six.

103
00:05:09.930 --> 00:05:11.340
Now we actually run the unit test

104
00:05:11.340 --> 00:05:13.640
and we can run the unit test in our IDE

105
00:05:13.640 --> 00:05:15.660
and we'll see the results right in the IDE

106
00:05:15.660 --> 00:05:18.800
and here we can see that the test passed because it's green

107
00:05:18.800 --> 00:05:20.540
and also it'll tell you the test passed

108
00:05:20.540 --> 00:05:22.750
and also how many tests passed.

109
00:05:22.750 --> 00:05:25.100
So in this case we have a test case set up,

110
00:05:25.100 --> 00:05:27.040
we're testing DemoUtils.

111
00:05:27.040 --> 00:05:29.770
We ran the test case of two comma four

112
00:05:29.770 --> 00:05:32.460
and we checked to see if the value was equal to six

113
00:05:32.460 --> 00:05:33.610
and that case it was true.

114
00:05:33.610 --> 00:05:37.373
It worked out just fine and everything passed as desired.

115
00:05:41.260 --> 00:05:45.270
Now IntelliJ also has additional unit testing support.

116
00:05:45.270 --> 00:05:47.840
So IntelliJ can help you with build dependency management

117
00:05:47.840 --> 00:05:50.630
by setting up the dependencies here for Maven or Gradle.

118
00:05:50.630 --> 00:05:53.640
It can also handle the auto creation of test classes

119
00:05:53.640 --> 00:05:56.350
and test method stubs and a lot of other features

120
00:05:56.350 --> 00:05:58.100
and so if you'd like to get more details

121
00:05:58.100 --> 00:06:00.660
on IntelliJ specific testing support,

122
00:06:00.660 --> 00:06:02.910
go to the link that I have here on the slide.

