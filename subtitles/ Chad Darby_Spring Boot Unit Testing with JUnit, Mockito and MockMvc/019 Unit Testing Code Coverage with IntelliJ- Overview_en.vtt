WEBVTT
1
00:00:01.188 --> 00:00:02.210
In this video, we're going to cover

2
00:00:02.210 --> 00:00:04.623
code coverage and test reports with IntelliJ.

3
00:00:07.530 --> 00:00:08.810
What is code coverage?

4
00:00:08.810 --> 00:00:11.590
Well, code coverage measures how many methods or lines

5
00:00:11.590 --> 00:00:13.790
are called by your test.

6
00:00:13.790 --> 00:00:15.610
The coverage is represented as a percentage

7
00:00:15.610 --> 00:00:18.870
such as 50% coverage, 70% coverage, and so on.

8
00:00:18.870 --> 00:00:21.480
In general the higher the coverage the better.

9
00:00:21.480 --> 00:00:26.210
However, 100% code coverage is always attainable.

10
00:00:26.210 --> 00:00:29.660
On most teams, 70 to 80% is acceptable.

11
00:00:29.660 --> 00:00:31.210
But you have to be careful here,

12
00:00:31.210 --> 00:00:33.020
code coverage is only a metric

13
00:00:33.020 --> 00:00:35.810
and can be easily tricked with bad tests.

14
00:00:35.810 --> 00:00:38.530
Use the metric as simply one data point

15
00:00:38.530 --> 00:00:40.633
in your software development process.

16
00:00:44.690 --> 00:00:47.930
IntelliJ has support for code coverage built-in.

17
00:00:47.930 --> 00:00:50.210
We can actually generate code coverage reports

18
00:00:50.210 --> 00:00:51.790
in the IDE.

19
00:00:51.790 --> 00:00:53.760
It can also generate HTML output

20
00:00:53.760 --> 00:00:55.393
for viewing in a web browser.

21
00:00:56.470 --> 00:00:58.870
If you're not using IntelliJ, don't worry.

22
00:00:58.870 --> 00:00:59.703
In later videos,

23
00:00:59.703 --> 00:01:01.260
I'll show you how to do the same thing

24
00:01:01.260 --> 00:01:02.780
using Maven commands.

25
00:01:02.780 --> 00:01:05.459
In that scenario no IDE is required,

26
00:01:05.459 --> 00:01:08.323
will simply run Maven from the command-line.

27
00:01:12.350 --> 00:01:14.160
The IntelliJ support for code coverage,

28
00:01:14.160 --> 00:01:16.870
it's simply a menu option or a button on your toolbar.

29
00:01:16.870 --> 00:01:19.030
You say, "Run the Test with Coverage",

30
00:01:19.030 --> 00:01:21.360
and then it'll give you the actual coverage results.

31
00:01:21.360 --> 00:01:23.870
And then you can see the percentage of coverage,

32
00:01:23.870 --> 00:01:27.713
as far as 100%, 80%, 50%, and so on.

33
00:01:29.310 --> 00:01:32.580
And then you can even drill down and see what given class,

34
00:01:32.580 --> 00:01:36.120
and you can even see the actual method that's not covered.

35
00:01:36.120 --> 00:01:37.630
So in this example,

36
00:01:37.630 --> 00:01:39.290
not all of our methods are covered,

37
00:01:39.290 --> 00:01:41.440
and it'll tell you, "Hey, this one method here,

38
00:01:41.440 --> 00:01:44.410
multiply, is not covered by our unit tests."

39
00:01:44.410 --> 00:01:47.060
And we can go through and actually write some tests

40
00:01:47.060 --> 00:01:48.250
to cover that given method

41
00:01:48.250 --> 00:01:50.403
and then that'll increase our coverage.

42
00:01:53.700 --> 00:01:54.900
We can also generate

43
00:01:54.900 --> 00:01:58.100
an external code coverage report in HTML.

44
00:01:58.100 --> 00:01:59.960
So to generate an HTML file,

45
00:01:59.960 --> 00:02:01.800
we can view it on our web browser

46
00:02:01.800 --> 00:02:03.670
and it'll also show the same information

47
00:02:03.670 --> 00:02:06.160
in supporting HTML pages.

48
00:02:06.160 --> 00:02:07.920
So this is useful if you wanted to

49
00:02:07.920 --> 00:02:09.530
maybe take this HTML information

50
00:02:09.530 --> 00:02:11.800
and publish it to a server, a web server,

51
00:02:11.800 --> 00:02:14.510
where your team or managers can access that given server

52
00:02:14.510 --> 00:02:16.310
to see the actual coverage results.

53
00:02:16.310 --> 00:02:19.260
Or this could be a part of your DevOps build process,

54
00:02:19.260 --> 00:02:21.780
where you have a page with the current status

55
00:02:21.780 --> 00:02:23.193
of your given builds.

56
00:02:26.380 --> 00:02:29.110
And then, in addition to code coverage reports,

57
00:02:29.110 --> 00:02:31.500
IntelliJ can also generate test reports

58
00:02:31.500 --> 00:02:33.450
as far as all the test results.

59
00:02:33.450 --> 00:02:35.370
So for each one of your test classes,

60
00:02:35.370 --> 00:02:37.000
then all the different test methods,

61
00:02:37.000 --> 00:02:38.810
it'll show which methods passed

62
00:02:38.810 --> 00:02:40.610
and which methods fail.

63
00:02:40.610 --> 00:02:43.360
And I'll show you how to do this in the upcoming video.

64
00:02:46.070 --> 00:02:47.620
In the IntelliJ documentation,

65
00:02:47.620 --> 00:02:49.760
they have additional features and support for testing

66
00:02:49.760 --> 00:02:51.880
so you can go to the link that I have here on the slide,

67
00:02:51.880 --> 00:02:53.240
and they'll give you all the details

68
00:02:53.240 --> 00:02:55.623
on IntelliJ testing support.

69
00:02:57.420 --> 00:02:59.320
Okay, let's swing to the next video

70
00:02:59.320 --> 00:03:00.153
and I'll show you

71
00:03:00.153 --> 00:03:02.403
how to generate those reports using IntelliJ.

