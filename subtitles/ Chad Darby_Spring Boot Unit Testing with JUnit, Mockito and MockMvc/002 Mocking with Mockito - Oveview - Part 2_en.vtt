WEBVTT
1
00:00:01.260 --> 00:00:02.093
All right, so

2
00:00:02.093 --> 00:00:03.110
here's our Development Process.

3
00:00:03.110 --> 00:00:03.943
So the first thing that we'll do

4
00:00:03.943 --> 00:00:06.080
is we'll create the Mock for the DAO,

5
00:00:06.080 --> 00:00:08.330
we'll inject the Mock into the service,

6
00:00:08.330 --> 00:00:10.260
we'll set up expectations,

7
00:00:10.260 --> 00:00:12.740
we'll call the method under test and assert the results.

8
00:00:12.740 --> 00:00:15.003
And finally, we'll verify the method calls.

9
00:00:18.310 --> 00:00:21.170
Starting with step one of creating the Mock for the DAO.

10
00:00:21.170 --> 00:00:22.860
So here's our test.

11
00:00:22.860 --> 00:00:26.140
We have a field here, private application applicationDao.

12
00:00:26.140 --> 00:00:27.830
So we'll create a Mock for the DAO.

13
00:00:27.830 --> 00:00:30.570
We make use of the add Mock annotation,

14
00:00:30.570 --> 00:00:34.230
and that's an annotation that we get from Mockito framework.

15
00:00:34.230 --> 00:00:38.200
So this effectively here creates a test double for this DAO,

16
00:00:38.200 --> 00:00:40.550
and later on we can set up expectations for it.

17
00:00:43.500 --> 00:00:46.003
In step two we inject the mock into the service.

18
00:00:47.380 --> 00:00:48.550
So we have this new entry here

19
00:00:48.550 --> 00:00:50.650
for private Application Service,

20
00:00:50.650 --> 00:00:52.870
and then we make use of this add InjectMocks,

21
00:00:52.870 --> 00:00:55.750
so this basically inject the mock dependencies

22
00:00:55.750 --> 00:00:57.750
and the injectMocks annotation is also

23
00:00:57.750 --> 00:00:59.563
from the Mockido framework.

24
00:01:00.530 --> 00:01:02.640
Now, one thing to note here about the InjecMocks

25
00:01:02.640 --> 00:01:04.920
is that it injects the mock dependencies,

26
00:01:04.920 --> 00:01:06.700
but it will only inject the dependencies

27
00:01:06.700 --> 00:01:09.460
that are annotated with Mock or Spy.

28
00:01:09.460 --> 00:01:13.350
So it won't handle any non-mock dependencies.

29
00:01:13.350 --> 00:01:14.250
But don't worry about it,

30
00:01:14.250 --> 00:01:16.650
I have some code that I'll show you in some upcoming videos

31
00:01:16.650 --> 00:01:18.360
that will address this specific issue

32
00:01:18.360 --> 00:01:20.983
but for now we just simply make use of InjectMocks.

33
00:01:24.210 --> 00:01:25.540
Just a quick recap here,

34
00:01:25.540 --> 00:01:27.047
setting up our expectations.

35
00:01:27.047 --> 00:01:29.140
And the set up phase we'll provide the responses

36
00:01:29.140 --> 00:01:30.683
for the given method calls.

37
00:01:34.500 --> 00:01:35.930
So let's talk about this a bit more.

38
00:01:35.930 --> 00:01:37.400
So setting up the expectations,

39
00:01:37.400 --> 00:01:41.010
so when a method doSomeWork is called,

40
00:01:41.010 --> 00:01:43.560
then I'll return "I am finished."

41
00:01:43.560 --> 00:01:44.900
Basically I'm saying

42
00:01:44.900 --> 00:01:47.970
when something happens then this is the response.

43
00:01:47.970 --> 00:01:49.680
Again, just like in theater,

44
00:01:49.680 --> 00:01:52.690
you can tell the other person, "Hey, when I say my line,

45
00:01:52.690 --> 00:01:54.710
then you respond with your line."

46
00:01:54.710 --> 00:01:57.040
In this coding example here, I have this string

47
00:01:57.040 --> 00:01:59.610
aRresponse equals I'm finished.

48
00:01:59.610 --> 00:02:01.240
So when doSomeWork,

49
00:02:01.240 --> 00:02:05.500
so that's a method that we're calling, then return

50
00:02:05.500 --> 00:02:07.250
the given response.

51
00:02:07.250 --> 00:02:12.250
Alright, so we're basically setting up some mock code here.

52
00:02:12.320 --> 00:02:14.220
So when somebody calls doSomeWork

53
00:02:15.100 --> 00:02:17.500
then respond with this given information.

54
00:02:17.500 --> 00:02:19.550
And this is stuff that we'll do for our DAO.

55
00:02:19.550 --> 00:02:22.790
We'll tell our DAO, "Hey, when they call this given method,

56
00:02:22.790 --> 00:02:25.110
then return this data."

57
00:02:25.110 --> 00:02:27.630
Alright, now the response can be a string,

58
00:02:27.630 --> 00:02:28.830
it can be a Boolean,

59
00:02:28.830 --> 00:02:30.150
it could be an ArrayList,

60
00:02:30.150 --> 00:02:31.170
it could be an Object.

61
00:02:31.170 --> 00:02:32.580
Whatever you want to return

62
00:02:32.580 --> 00:02:35.150
that that given method is supposed to return,

63
00:02:35.150 --> 00:02:38.470
that's the type of value or data that you can return.

64
00:02:38.470 --> 00:02:41.160
And again, the real world analogy in the theater

65
00:02:41.160 --> 00:02:42.170
just read the script,

66
00:02:42.170 --> 00:02:44.963
I'll say my line, then you say your line.

67
00:02:48.620 --> 00:02:51.160
So let's kind of pull this together with some coding.

68
00:02:51.160 --> 00:02:53.440
So at the bottom here, we have this test

69
00:02:53.440 --> 00:02:57.420
When and Verify for assertEqualsTestAddGrades.

70
00:02:57.420 --> 00:03:00.450
So I set up the expectations for the mock response.

71
00:03:00.450 --> 00:03:02.740
So I have when and then return.

72
00:03:02.740 --> 00:03:07.410
So when the method addGreatResultsForSingleClass is called,

73
00:03:07.410 --> 00:03:09.460
then return 100.

74
00:03:09.460 --> 00:03:11.490
So the key here is that we're basically mocking

75
00:03:11.490 --> 00:03:14.040
this method here addGreatResultsForSingleClass.

76
00:03:14.040 --> 00:03:16.230
So when they make a call to that method

77
00:03:16.230 --> 00:03:17.790
then we're going to return 100.

78
00:03:17.790 --> 00:03:19.990
We really don't execute any of the internal code there,

79
00:03:19.990 --> 00:03:23.010
we kind of just set up this mock response

80
00:03:23.010 --> 00:03:24.443
for this given method.

81
00:03:27.920 --> 00:03:28.753
Now in step four,

82
00:03:28.753 --> 00:03:32.040
we call the method under test and assert the results.

83
00:03:32.040 --> 00:03:35.520
So this is kind of like normal JUnit testing, right?

84
00:03:35.520 --> 00:03:39.130
So here we have assert equals 100.0,

85
00:03:39.130 --> 00:03:43.330
and then application service addGreatResultsForSingleClass.

86
00:03:43.330 --> 00:03:46.310
Now, the key here is that we're calling this service.

87
00:03:46.310 --> 00:03:48.330
The service makes use of the DAO.

88
00:03:48.330 --> 00:03:50.090
We've already mocked the DAO

89
00:03:51.030 --> 00:03:54.070
for that given method to return 100.

90
00:03:54.070 --> 00:03:56.750
And so this given test will pass accordingly.

91
00:03:56.750 --> 00:03:58.650
But the key here is to be aware of that

92
00:03:58.650 --> 00:04:01.460
we've already set the expectations for the DAO.

93
00:04:01.460 --> 00:04:02.580
It's one of our dependencies

94
00:04:02.580 --> 00:04:04.200
at the application service we use

95
00:04:04.200 --> 00:04:05.963
when it makes its given call.

96
00:04:09.160 --> 00:04:11.970
And then in step five, we verify the method calls.

97
00:04:11.970 --> 00:04:13.040
So in the verify,

98
00:04:13.040 --> 00:04:16.800
you can verify how many times a given method was called.

99
00:04:16.800 --> 00:04:18.089
So here in this example,

100
00:04:18.089 --> 00:04:21.983
I'll say verify ApplicationDao times one.

101
00:04:23.230 --> 00:04:24.770
You can use this in your application,

102
00:04:24.770 --> 00:04:26.850
you could say for this given logic,

103
00:04:26.850 --> 00:04:29.780
we should have called a given method X number of times

104
00:04:29.780 --> 00:04:32.663
and you can kind of use that to verify that information.

105
00:04:35.510 --> 00:04:36.610
And kind of recap.

106
00:04:36.610 --> 00:04:38.760
So again, this whole idea of mocking

107
00:04:38.760 --> 00:04:40.270
the first thing you do is you set up.

108
00:04:40.270 --> 00:04:42.580
So that's the setting expectations with the mock response

109
00:04:42.580 --> 00:04:43.760
using the whens,

110
00:04:43.760 --> 00:04:45.740
then we execute, then we assert

111
00:04:45.740 --> 00:04:47.890
and then we verify by checking how many times

112
00:04:47.890 --> 00:04:49.633
a given method was called.

113
00:04:53.820 --> 00:04:55.450
In terms of Mockito resources

114
00:04:55.450 --> 00:04:57.300
there's some additional features of Mockito,

115
00:04:57.300 --> 00:05:00.180
such as stubs and spies, argument matchers,

116
00:05:00.180 --> 00:05:01.840
answers and so on.

117
00:05:01.840 --> 00:05:02.850
You can get more information

118
00:05:02.850 --> 00:05:05.600
on these features at the Mockito website.

119
00:05:05.600 --> 00:05:07.460
Alrighty, let's go ahead and move into the next video

120
00:05:07.460 --> 00:05:09.313
and let's start mocking some code!

