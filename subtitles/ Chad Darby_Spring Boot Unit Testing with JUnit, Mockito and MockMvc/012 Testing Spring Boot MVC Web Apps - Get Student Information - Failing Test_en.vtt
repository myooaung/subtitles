WEBVTT
1
00:00:01.160 --> 00:00:01.992
In this video,

2
00:00:01.992 --> 00:00:03.843
we'll cover Student Information.

3
00:00:07.130 --> 00:00:09.010
So currently the app does not have a method

4
00:00:09.010 --> 00:00:11.880
to retrieve student information from the database.

5
00:00:11.880 --> 00:00:13.760
So student information is like the student name,

6
00:00:13.760 --> 00:00:16.149
the email address, the grades and so on.

7
00:00:16.149 --> 00:00:17.650
And what we'll do is we'll apply TDD

8
00:00:17.650 --> 00:00:19.290
to implement this new functionality.

9
00:00:19.290 --> 00:00:21.260
So we'll focus on the backend first

10
00:00:21.260 --> 00:00:23.810
and then we'll move over to the UE in later videos.

11
00:00:27.020 --> 00:00:29.050
All righty, so we're inside of our IDE

12
00:00:29.050 --> 00:00:31.200
in our student and grade service test.

13
00:00:31.200 --> 00:00:34.490
And what we're going to do is write a failing test first.

14
00:00:34.490 --> 00:00:35.450
So I'll move down here

15
00:00:35.450 --> 00:00:38.253
and find some free space to create this new test.

16
00:00:44.130 --> 00:00:46.150
I'll call this test studentInformation,

17
00:00:46.150 --> 00:00:47.653
very plain, very simple.

18
00:00:56.824 --> 00:00:57.810
And I'll do a couple of things here.

19
00:00:57.810 --> 00:00:59.840
I'll attempt to retrieve the gradebook

20
00:00:59.840 --> 00:01:00.973
for a college student.

21
00:01:02.590 --> 00:01:05.050
I'll make use of studentService.studentInformation(1).

22
00:01:05.050 --> 00:01:06.470
So, hey, give me the gradebook

23
00:01:06.470 --> 00:01:08.920
or give me the information for student ID of one.

24
00:01:10.050 --> 00:01:11.370
And, of course, we don't have that method.

25
00:01:11.370 --> 00:01:12.720
So we need to go ahead and define it,

26
00:01:12.720 --> 00:01:14.720
method in our student and grade service.

27
00:01:30.000 --> 00:01:31.160
We have this method here, student information

28
00:01:31.160 --> 00:01:32.460
passing in the idea of one

29
00:01:32.460 --> 00:01:34.210
and returning that given data.

30
00:01:34.210 --> 00:01:35.840
Right now we'll simply return null,

31
00:01:35.840 --> 00:01:37.990
and we'll add the real functionality later.

32
00:01:48.050 --> 00:01:48.950
Now, inside of our test,

33
00:01:48.950 --> 00:01:50.270
let's go ahead and add some asserts.

34
00:01:50.270 --> 00:01:51.730
So first thing we want to do

35
00:01:51.730 --> 00:01:55.860
is assertNotNull(gradebookCollegeStudent)

36
00:01:55.860 --> 00:01:57.830
and then we want to verify the student information.

37
00:01:57.830 --> 00:01:59.633
So when I verify the student ID,

38
00:02:07.990 --> 00:02:10.180
next, we want to verify the student's first name

39
00:02:10.180 --> 00:02:11.533
and also last name.

40
00:02:29.950 --> 00:02:34.367
And then we want to verify the student's email address.

41
00:02:47.050 --> 00:02:48.260
And then we also want to verify

42
00:02:48.260 --> 00:02:50.313
the number of grades for a given subject.

43
00:02:53.220 --> 00:02:54.950
We'll do the work here from Math grades,

44
00:02:54.950 --> 00:02:56.893
Science grade and History grade.

45
00:03:38.730 --> 00:03:40.580
Now, let's go ahead and run this test

46
00:03:50.050 --> 00:03:51.790
and as expected, the test fails

47
00:03:51.790 --> 00:03:53.690
because we haven't done any real work.

48
00:03:53.690 --> 00:03:55.780
At the moment in our student and grade service

49
00:03:55.780 --> 00:03:57.260
that method simply returns null.

50
00:03:57.260 --> 00:03:58.920
So there's still some work to do.

51
00:03:58.920 --> 00:04:01.053
And we'll cover that in the next video.

