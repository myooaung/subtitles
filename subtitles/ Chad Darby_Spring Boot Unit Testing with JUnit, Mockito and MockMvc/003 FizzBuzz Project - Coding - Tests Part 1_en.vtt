WEBVTT
1
00:00:01.280 --> 00:00:02.113
Okay. So moving along

2
00:00:02.113 --> 00:00:03.270
with our development process,

3
00:00:03.270 --> 00:00:04.850
so in step two, we're in our right code

4
00:00:04.850 --> 00:00:06.863
to make the test pass.

5
00:00:15.800 --> 00:00:17.990
And at the moment, we simply have the stub in here

6
00:00:17.990 --> 00:00:20.050
for just doing a fail.

7
00:00:20.050 --> 00:00:23.283
Let's go ahead and start writing some real code or whatever.

8
00:00:27.570 --> 00:00:31.290
So I know for divisible by three, we should print, Fizz,

9
00:00:31.290 --> 00:00:35.320
and so that's the expected value for DivisiblebyThree.

10
00:00:37.770 --> 00:00:39.790
And then I'll set up this assertion here,

11
00:00:39.790 --> 00:00:42.270
assert equals expected,

12
00:00:42.270 --> 00:00:46.360
and I'll call FizzBuzz.compute on three.

13
00:00:46.360 --> 00:00:47.760
And based on the specs here,

14
00:00:47.760 --> 00:00:50.823
we know that this should return Fizz.

15
00:00:59.970 --> 00:01:00.890
But you're probably wondering,

16
00:01:00.890 --> 00:01:05.400
well we don't have a FizzBuzz class yet.

17
00:01:05.400 --> 00:01:06.560
Okay, that's fine.

18
00:01:06.560 --> 00:01:09.253
Let's go ahead and create the FizzBuzz class.

19
00:01:10.350 --> 00:01:11.950
Again, test driven development.

20
00:01:11.950 --> 00:01:14.720
Our tests are driving the development here.

21
00:01:14.720 --> 00:01:15.830
And for this class,

22
00:01:15.830 --> 00:01:19.050
make sure you choose the target destination directory

23
00:01:19.050 --> 00:01:23.800
of src/main/java, because it's going to be our main code.

24
00:01:23.800 --> 00:01:26.610
That's where the FizzBuzz class should reside,

25
00:01:26.610 --> 00:01:28.583
so src/main/java.

26
00:01:37.650 --> 00:01:40.410
All right, so we have this FizzBuzz class.

27
00:01:40.410 --> 00:01:42.000
There's nothing there right now.

28
00:01:42.000 --> 00:01:42.833
That's fine.

29
00:01:47.400 --> 00:01:48.440
So there's our test.

30
00:01:48.440 --> 00:01:50.200
And if we go look at the main,

31
00:01:50.200 --> 00:01:52.920
then we send the src/main/java/tdd,

32
00:01:52.920 --> 00:01:54.863
there's the FizzBuzz class.

33
00:01:58.060 --> 00:02:00.400
So again, just as a checkpoint, make sure the FizzBuzz class

34
00:02:00.400 --> 00:02:01.730
is in the main section,

35
00:02:01.730 --> 00:02:03.850
and the FizzBuzzTest is in the test section.

36
00:02:10.870 --> 00:02:13.450
Now, swinging back over to our test,

37
00:02:13.450 --> 00:02:14.390
and one small change here.

38
00:02:14.390 --> 00:02:16.430
Let me just change the method name here,

39
00:02:16.430 --> 00:02:18.870
instead of computer I meant to say compute,

40
00:02:18.870 --> 00:02:20.913
so FizzBuzz.compute.

41
00:02:22.160 --> 00:02:24.800
Now, we don't have that method in the FizzBuzz class.

42
00:02:24.800 --> 00:02:27.340
So let's go ahead and create the method compute

43
00:02:27.340 --> 00:02:28.823
in the FizzBuzz class.

44
00:02:33.210 --> 00:02:34.043
Excellent.

45
00:02:34.043 --> 00:02:36.590
So if here's our method compute,

46
00:02:36.590 --> 00:02:38.480
and this is where we're going to have our logic.

47
00:02:38.480 --> 00:02:41.060
Right now, we'll simply just return null.

48
00:02:41.060 --> 00:02:42.680
Just kind of stub it out.

49
00:02:42.680 --> 00:02:45.763
And then, we'll kind of refine this over time.

50
00:02:49.160 --> 00:02:54.160
Now, if I run my test, so I have my expected assert equals,

51
00:02:55.920 --> 00:03:00.143
we're expecting Fizz, we do a FizzBuzz.compute on three,

52
00:03:02.700 --> 00:03:03.533
we run it.

53
00:03:05.510 --> 00:03:08.343
And of course, we know this test is going to fail,

54
00:03:10.970 --> 00:03:13.100
and we can look at some of the details here.

55
00:03:13.100 --> 00:03:16.910
So Divisible by Three, and we have our message,

56
00:03:16.910 --> 00:03:18.440
Should return Fizz.

57
00:03:18.440 --> 00:03:19.670
Expected was Fizz.

58
00:03:19.670 --> 00:03:20.990
The Actual was null, right?

59
00:03:20.990 --> 00:03:22.850
Cause we simply just said return null,

60
00:03:22.850 --> 00:03:25.080
we didn't do any real work here, but no problem.

61
00:03:25.080 --> 00:03:27.700
We have a failing test, and we can simply update the code

62
00:03:27.700 --> 00:03:29.123
to make the test pass.

63
00:03:35.070 --> 00:03:37.340
One thing I'd like to do is just copy these specs

64
00:03:37.340 --> 00:03:40.220
or rules here, and actually place those

65
00:03:40.220 --> 00:03:42.090
in our FizzBuzz.java class,

66
00:03:42.090 --> 00:03:44.370
just so I can kind of keep myself on track,

67
00:03:44.370 --> 00:03:45.820
as far as what we need to do.

68
00:04:03.770 --> 00:04:07.223
Now, let's work on a piece here for divisible by three.

69
00:04:08.500 --> 00:04:10.850
And to check If i is divisible by three,

70
00:04:10.850 --> 00:04:13.590
we can make use of the Modulus operator.

71
00:04:13.590 --> 00:04:17.820
So if we give i % 3 == 0,

72
00:04:17.820 --> 00:04:19.690
that means that there's no remainder.

73
00:04:19.690 --> 00:04:22.210
that means that this number is divisible by three.

74
00:04:22.210 --> 00:04:24.693
So again, using the Modulus operator.

75
00:04:27.560 --> 00:04:28.990
If i is divisible by three,

76
00:04:28.990 --> 00:04:30.893
then we simply return, Fizz.

77
00:04:33.980 --> 00:04:35.220
We can save that.

78
00:04:35.220 --> 00:04:36.863
And now, we can run our test.

79
00:04:42.900 --> 00:04:44.750
And we see that we have success.

80
00:04:44.750 --> 00:04:47.530
Divisible by Three, that passes a okay.

81
00:04:47.530 --> 00:04:50.040
So again, this whole test driven development.

82
00:04:50.040 --> 00:04:51.320
We wrote a failing test.

83
00:04:51.320 --> 00:04:53.800
We wrote a small bit of code to make the test pass.

84
00:04:53.800 --> 00:04:56.183
And now we simply kind of repeat the process.

85
00:05:06.780 --> 00:05:08.680
Now, let's write another failing test.

86
00:05:16.670 --> 00:05:19.953
And so, I'll cover for the case of divisible by five.

87
00:05:26.940 --> 00:05:28.983
And I'll just copy the previous test.

88
00:05:32.440 --> 00:05:34.630
I'll zoom in here and make some updates.

89
00:05:34.630 --> 00:05:37.053
So this is for Divisible by Five.

90
00:05:40.130 --> 00:05:42.823
Update the names here, update the order.

91
00:05:44.100 --> 00:05:47.903
And for five, we expect Buzz.

92
00:05:52.280 --> 00:05:54.003
Okay, this looks okay.

93
00:05:55.470 --> 00:05:57.140
But now, this is our failing test, right?

94
00:05:57.140 --> 00:05:59.220
So it's going to fail the first time out,

95
00:05:59.220 --> 00:06:01.400
because we don't have any implementation code

96
00:06:01.400 --> 00:06:03.093
in place for the case of five.

97
00:06:06.010 --> 00:06:07.610
So Divisible by Three passes,

98
00:06:07.610 --> 00:06:11.650
but Divisible by Five fails, expected Buzz,

99
00:06:11.650 --> 00:06:13.280
but we got null.

100
00:06:13.280 --> 00:06:14.323
Okay. No problem.

101
00:06:16.020 --> 00:06:17.770
So now we have a failing test.

102
00:06:17.770 --> 00:06:19.250
We swing back into our code,

103
00:06:19.250 --> 00:06:22.603
and we modify our code to make the test pass.

104
00:06:34.090 --> 00:06:37.160
And then I'll check if i is divisible by five.

105
00:06:37.160 --> 00:06:39.433
In this case, we return Buzz.

106
00:06:44.680 --> 00:06:46.180
All right.

107
00:06:46.180 --> 00:06:48.423
And let's run our tests one more time.

108
00:06:53.290 --> 00:06:54.810
And yes, success.

109
00:06:54.810 --> 00:06:55.643
All right.

110
00:06:55.643 --> 00:06:58.220
So Divisible by Three passes and also, Divisible by Five.

111
00:06:58.220 --> 00:07:01.190
So you can see how, kind of over time,

112
00:07:01.190 --> 00:07:03.180
we're going through it and we're solving the problem,

113
00:07:03.180 --> 00:07:04.750
We're solving the solution,

114
00:07:04.750 --> 00:07:07.010
and we're doing it one test at a time.

115
00:07:07.010 --> 00:07:08.470
So this is a good example here

116
00:07:08.470 --> 00:07:10.950
of doing some test driven development.

117
00:07:10.950 --> 00:07:11.840
We're not done yet, right?

118
00:07:11.840 --> 00:07:13.660
We still have some more things to do,

119
00:07:13.660 --> 00:07:15.390
but we're making it through our task list here,

120
00:07:15.390 --> 00:07:17.980
and we have some success so far.

121
00:07:17.980 --> 00:07:20.000
We still have some work cut out for us,

122
00:07:20.000 --> 00:07:22.333
but we are making some progress.

