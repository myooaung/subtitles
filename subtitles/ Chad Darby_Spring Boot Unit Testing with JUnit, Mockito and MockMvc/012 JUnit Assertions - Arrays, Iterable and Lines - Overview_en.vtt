WEBVTT
1
00:00:01.210 --> 00:00:03.600
This video will cover assertions for arrays,

2
00:00:03.600 --> 00:00:05.913
iterables, and lines.

3
00:00:09.850 --> 00:00:11.146
We'll start with the first method here,

4
00:00:11.146 --> 00:00:12.900
assertArrayEquals.

5
00:00:12.900 --> 00:00:16.233
Basically asserts that both object arrays are deeply equal.

6
00:00:20.140 --> 00:00:22.240
And here's the code that we're going to test.

7
00:00:23.550 --> 00:00:26.900
In our DemoUtils class we have a string array,

8
00:00:26.900 --> 00:00:29.690
firstThreeLettersOfAlphabet, ABC,

9
00:00:29.690 --> 00:00:31.990
and we have a supporting getter method for it.

10
00:00:37.890 --> 00:00:39.457
And then we'll have this test method,

11
00:00:39.457 --> 00:00:41.550
testArrayEquals.

12
00:00:41.550 --> 00:00:44.350
In the top-right we have the actual code that we're testing,

13
00:00:44.350 --> 00:00:45.563
just as a reference.

14
00:00:48.650 --> 00:00:51.070
So, we'll define an array locally in this test

15
00:00:51.070 --> 00:00:52.860
and we'll compare the array

16
00:00:52.860 --> 00:00:56.370
with the actual item defined in DemoUtils.

17
00:00:56.370 --> 00:00:59.040
In the coding here we'll have assert array equals,

18
00:00:59.040 --> 00:01:00.640
we give stringArray comma

19
00:01:00.640 --> 00:01:03.950
demoutils.getFirstThreeLettersOfAlphabet,

20
00:01:03.950 --> 00:01:05.600
and we'll see if those are equal.

21
00:01:07.470 --> 00:01:08.750
We run the unit tests

22
00:01:08.750 --> 00:01:09.980
and everything's all green,

23
00:01:09.980 --> 00:01:11.163
the test passes.

24
00:01:12.060 --> 00:01:15.263
So we know that these two arrays are equal deeply.

25
00:01:20.050 --> 00:01:21.630
The next assertion that we'll take a look at

26
00:01:21.630 --> 00:01:24.104
is assertIterableEquals.

27
00:01:24.104 --> 00:01:27.380
This asserts that both object iterables are deeply equal.

28
00:01:27.380 --> 00:01:29.472
Now, what exactly is iterable?

29
00:01:29.472 --> 00:01:30.720
(Narrator laughs)

30
00:01:30.720 --> 00:01:32.770
An iterable is an instance of a class

31
00:01:32.770 --> 00:01:35.870
that implements the java.lang.Iterable interface.

32
00:01:35.870 --> 00:01:38.510
So some examples include ArrayList, LinkedList,

33
00:01:38.510 --> 00:01:40.720
HashSet, TreeSet, so on.

34
00:01:40.720 --> 00:01:42.623
So anything that we can iterate over.

35
00:01:46.520 --> 00:01:47.820
As far as the code to test,

36
00:01:47.820 --> 00:01:51.380
we have this list of strings called academyInList

37
00:01:51.380 --> 00:01:54.660
and then we have List.of, luv, 2, code.

38
00:01:54.660 --> 00:01:58.053
So this will actually create a list of strings for us.

39
00:01:59.500 --> 00:02:01.190
And then the appropriate getter method.

40
00:02:01.190 --> 00:02:02.900
So we basically want to make some comparisons

41
00:02:02.900 --> 00:02:05.653
against this list in our test code.

42
00:02:10.000 --> 00:02:11.830
Moving over to our DemoUtils tests,

43
00:02:11.830 --> 00:02:13.793
we have this test method:

44
00:02:13.793 --> 00:02:15.376
testIterableEquals.

45
00:02:16.760 --> 00:02:19.320
In the top-right we have the actual code that we're testing,

46
00:02:19.320 --> 00:02:20.513
just as a reference.

47
00:02:21.730 --> 00:02:24.810
And then we have this list of strings that we set up here,

48
00:02:24.810 --> 00:02:26.970
List.of luv 2 code.

49
00:02:26.970 --> 00:02:28.880
And then we make a comparison against the field.

50
00:02:28.880 --> 00:02:32.800
So, here I have assertIterableEquals theList

51
00:02:32.800 --> 00:02:35.923
comma demoutils.getacademyInList.

52
00:02:38.200 --> 00:02:42.143
We run this unit test and then it passes as desired.

53
00:02:46.290 --> 00:02:47.810
And then the last assertion method

54
00:02:47.810 --> 00:02:50.730
that we'll take a look at is assertLinesMatch.

55
00:02:50.730 --> 00:02:51.850
And here we basically assert

56
00:02:51.850 --> 00:02:53.793
that both lists of strings match.

57
00:02:58.080 --> 00:02:59.440
Looking at our code to test,

58
00:02:59.440 --> 00:03:01.283
again we'll make use of this academyInList

59
00:03:01.283 --> 00:03:03.840
that we saw earlier, luv 2 code.

60
00:03:03.840 --> 00:03:06.190
We're going to make comparisons against this list.

61
00:03:10.030 --> 00:03:11.830
And then in our DemoUtils test,

62
00:03:11.830 --> 00:03:14.130
we have this method testLinesMatch.

63
00:03:14.130 --> 00:03:17.830
We create this list and then we have assertLinesMatch.

64
00:03:17.830 --> 00:03:22.180
We give theList comma demoutils.getacademyInList.

65
00:03:22.180 --> 00:03:24.090
Here, lines should match.

66
00:03:24.090 --> 00:03:28.553
So we run this test case and everything passes as desired.

67
00:03:29.890 --> 00:03:31.720
All righty, so this all looks really good.

68
00:03:31.720 --> 00:03:33.120
Let's go ahead and move into the next video

69
00:03:33.120 --> 00:03:35.273
and let's start writing some code.

