WEBVTT
1
00:00:01.120 --> 00:00:01.952
In this video,

2
00:00:01.952 --> 00:00:03.953
we'll cover running tests in order.

3
00:00:07.120 --> 00:00:08.817
Now, remember this from earlier, I said,

4
00:00:08.817 --> 00:00:10.200
"Hey, here are the tests,

5
00:00:10.200 --> 00:00:13.040
but don't worry about the order of the tests.

6
00:00:13.040 --> 00:00:15.010
We'll cover that later."

7
00:00:15.010 --> 00:00:17.010
Well, now is the time we'll actually cover

8
00:00:17.010 --> 00:00:17.960
how to order tests.

9
00:00:22.050 --> 00:00:25.910
Now, one question about order though that in general,

10
00:00:25.910 --> 00:00:29.540
the order should not be a factor in unit tests.

11
00:00:29.540 --> 00:00:32.549
There should be no dependency between tests.

12
00:00:32.549 --> 00:00:33.770
And all tests should pass

13
00:00:33.770 --> 00:00:36.313
regardless of the order in which they are run.

14
00:00:39.570 --> 00:00:41.370
However, there are some use cases

15
00:00:41.370 --> 00:00:43.670
when you'd actually want to control the order.

16
00:00:43.670 --> 00:00:45.440
For example, if you want test to appear

17
00:00:45.440 --> 00:00:48.260
in alphabetical order for reporting purposes,

18
00:00:48.260 --> 00:00:49.370
or if you're sharing reports

19
00:00:49.370 --> 00:00:51.950
with a project manager or the QA team,

20
00:00:51.950 --> 00:00:53.290
or if you'd like to group tests

21
00:00:53.290 --> 00:00:55.900
based on functionality or requirements.

22
00:00:55.900 --> 00:00:58.083
So those are some possible use cases.

23
00:01:02.240 --> 00:01:05.190
Now, if we run our test before making any changes,

24
00:01:05.190 --> 00:01:07.360
just kind of running 'em as is,

25
00:01:07.360 --> 00:01:08.900
here's a list of our tests,

26
00:01:08.900 --> 00:01:11.830
and note here, this is not complete code.

27
00:01:11.830 --> 00:01:14.320
I'm just showing the snippets for brevity.

28
00:01:14.320 --> 00:01:17.023
Just so I can fit everything on a single slide.

29
00:01:18.690 --> 00:01:21.610
And then when we run it, you'll see the actual test results.

30
00:01:21.610 --> 00:01:22.670
Now, when you look at the list,

31
00:01:22.670 --> 00:01:23.820
you're probably trying to figure out,

32
00:01:23.820 --> 00:01:24.970
okay, what's the order?

33
00:01:24.970 --> 00:01:26.190
Is it alphabetical?

34
00:01:26.190 --> 00:01:29.320
Is it based on where the method appears in the class?

35
00:01:29.320 --> 00:01:30.910
So on and so forth?

36
00:01:30.910 --> 00:01:34.440
Well, according to the JUnit documentation,

37
00:01:34.440 --> 00:01:37.350
by default the test classes and methods will be ordered

38
00:01:37.350 --> 00:01:40.010
using an algorithm that's deterministic,

39
00:01:40.010 --> 00:01:42.110
meaning that it's the same every time,

40
00:01:42.110 --> 00:01:44.380
but intentionally non-obvious.

41
00:01:44.380 --> 00:01:48.610
And this is from the actual JUnit documentation user guide.

42
00:01:48.610 --> 00:01:49.830
So basically what this means

43
00:01:49.830 --> 00:01:52.020
is that there is a default order,

44
00:01:52.020 --> 00:01:54.300
but that order is undocumented.

45
00:01:54.300 --> 00:01:55.790
So if you'd like to order something,

46
00:01:55.790 --> 00:01:58.060
you can't depend on the defaults here.

47
00:01:58.060 --> 00:02:00.820
You need to manually specify what the order is

48
00:02:00.820 --> 00:02:02.383
for your test methods.

49
00:02:06.360 --> 00:02:07.193
All righty,

50
00:02:07.193 --> 00:02:10.139
so we can make use of this annotation, TestMethodOrder.

51
00:02:10.139 --> 00:02:12.100
It'll configure the order/sort algorithm

52
00:02:12.100 --> 00:02:13.853
for your given test methods.

53
00:02:17.510 --> 00:02:19.860
And then we can specify the method order.

54
00:02:19.860 --> 00:02:23.020
So we can say, sort the test methods alphanumerically

55
00:02:23.020 --> 00:02:25.160
based on the display names.

56
00:02:25.160 --> 00:02:27.910
We can also sort the test methods alphanumerically

57
00:02:27.910 --> 00:02:30.030
based on the method names.

58
00:02:30.030 --> 00:02:33.940
And then we can also randomly order the methods,

59
00:02:33.940 --> 00:02:35.023
which is really fun.

60
00:02:36.880 --> 00:02:37.980
And finally here,

61
00:02:37.980 --> 00:02:41.400
we could order the test methods numerically

62
00:02:41.400 --> 00:02:43.940
based on the order annotation.

63
00:02:43.940 --> 00:02:46.440
And we'll see all of these examples in this video.

64
00:02:49.790 --> 00:02:51.170
Let's start with the first example here

65
00:02:51.170 --> 00:02:53.700
of ordering by display name.

66
00:02:53.700 --> 00:02:57.171
So up top at the class level, I have TestMethodOrder,

67
00:02:57.171 --> 00:03:00.793
and then I give MethodOrderer.DisplayName.class.

68
00:03:04.540 --> 00:03:05.960
And then when we run the test,

69
00:03:05.960 --> 00:03:09.253
it'll actually sort all of the tests by display name.

70
00:03:13.166 --> 00:03:17.260
In the next example here we can order by method name.

71
00:03:17.260 --> 00:03:19.490
So up top here, we have TestMethodOrder

72
00:03:19.490 --> 00:03:21.323
and we use MethodOrderer.MethodName.

73
00:03:23.210 --> 00:03:24.720
So now when we run our test,

74
00:03:24.720 --> 00:03:27.040
it's going to sort it out alphanumerically

75
00:03:27.040 --> 00:03:29.293
based on the actual method name.

76
00:03:31.410 --> 00:03:34.310
And it's only really useful to sort by method name

77
00:03:34.310 --> 00:03:36.840
when not using display name.

78
00:03:36.840 --> 00:03:38.930
We don't want the display name to show up.

79
00:03:38.930 --> 00:03:41.980
We only want to show the actual method name.

80
00:03:41.980 --> 00:03:42.813
Just to kind of see

81
00:03:42.813 --> 00:03:44.693
how everything is sorted alphanumerically.

82
00:03:54.670 --> 00:03:56.900
We can also have it listed randomly

83
00:03:56.900 --> 00:03:58.220
based on the method name.

84
00:03:58.220 --> 00:04:00.649
So up top, we have TestMethodOrder,

85
00:04:00.649 --> 00:04:03.423
MethodOrderer.Random.class.

86
00:04:05.780 --> 00:04:08.600
And this is a great scenario. I really like this one.

87
00:04:08.600 --> 00:04:10.510
You can make sure all of your tests pass

88
00:04:10.510 --> 00:04:11.840
regardless of order.

89
00:04:11.840 --> 00:04:15.720
So this confirms that there's no dependency between tests.

90
00:04:15.720 --> 00:04:17.620
It's a great way to kind of mix it up

91
00:04:17.620 --> 00:04:18.899
and just to show that, hey,

92
00:04:18.899 --> 00:04:21.610
my tests can still run regardless of the order.

93
00:04:21.610 --> 00:04:23.460
Even if they run in random order,

94
00:04:23.460 --> 00:04:25.283
we can mix it up, no problem.

95
00:04:28.700 --> 00:04:29.790
And we can run the test

96
00:04:29.790 --> 00:04:31.480
and we can run it a couple of times actually,

97
00:04:31.480 --> 00:04:32.730
and we can see the output here.

98
00:04:32.730 --> 00:04:34.960
We can see all the different methods come out

99
00:04:34.960 --> 00:04:38.263
in a random order based on that given scenario.

100
00:04:40.450 --> 00:04:43.230
And we can also use display name in this scenario

101
00:04:43.230 --> 00:04:44.490
since everything is random,

102
00:04:44.490 --> 00:04:46.303
so the order really doesn't matter.

103
00:04:50.850 --> 00:04:52.360
Now, another approach you can use

104
00:04:52.360 --> 00:04:54.710
is you can make use of the order annotation.

105
00:04:54.710 --> 00:04:58.320
So we'll manually specify the order of a test

106
00:04:58.320 --> 00:05:00.360
with a given int number.

107
00:05:00.360 --> 00:05:02.670
So the order with the lowest number

108
00:05:02.670 --> 00:05:04.870
has the highest priority.

109
00:05:04.870 --> 00:05:07.183
And also, negative numbers are allowed.

110
00:05:12.100 --> 00:05:14.100
So in this example here in our test class,

111
00:05:14.100 --> 00:05:15.250
we say TestMethodOrder,

112
00:05:16.410 --> 00:05:18.103
and then we have MethodOrderer.OrderAnnotation.

113
00:05:21.240 --> 00:05:22.073
And then in our code here,

114
00:05:22.073 --> 00:05:25.303
we make use of the order annotation on our methods.

115
00:05:26.310 --> 00:05:30.453
So here we have order of three and then order of one.

116
00:05:33.470 --> 00:05:36.570
And then when we run it we see the output.

117
00:05:36.570 --> 00:05:40.043
And note here, order one shows up first.

118
00:05:43.400 --> 00:05:45.860
And then order three will show up second.

119
00:05:45.860 --> 00:05:50.653
And remember, the lowest number has the highest priority.

120
00:05:57.220 --> 00:05:58.140
Now you may wonder,

121
00:05:58.140 --> 00:05:59.750
well, what about these methods here

122
00:05:59.750 --> 00:06:02.163
that don't have an order annotation?

123
00:06:03.250 --> 00:06:04.130
How are they ordered?

124
00:06:04.130 --> 00:06:06.320
Well, they'll come after the methods

125
00:06:06.320 --> 00:06:08.890
that have the order annotation on them,

126
00:06:08.890 --> 00:06:11.550
but then their remaining order...

127
00:06:11.550 --> 00:06:13.470
Again, going back to the JUnit docs,

128
00:06:13.470 --> 00:06:15.660
by default classes and methods will be ordered

129
00:06:15.660 --> 00:06:17.570
using an algorithm that's deterministic,

130
00:06:17.570 --> 00:06:19.200
it happens the same every time,

131
00:06:19.200 --> 00:06:22.350
but intentionally none obvious, all right?

132
00:06:22.350 --> 00:06:24.340
So they kind of just follow

133
00:06:24.340 --> 00:06:28.710
that undocumented or unpublished algorithm.

134
00:06:28.710 --> 00:06:31.110
So if you'd like explicit order on a given method,

135
00:06:31.110 --> 00:06:32.803
use the order annotation.

136
00:06:36.700 --> 00:06:38.667
And then also remember earlier that I said,

137
00:06:38.667 --> 00:06:41.200
"Negative numbers are allowed."

138
00:06:41.200 --> 00:06:43.530
So in this example here, I have another test,

139
00:06:43.530 --> 00:06:46.560
I have order negative seven.

140
00:06:46.560 --> 00:06:50.420
So remember, the lowest number has the highest priority.

141
00:06:50.420 --> 00:06:53.513
So negative seven is the lowest number in this example.

142
00:06:55.350 --> 00:06:58.583
So negative seven, that test will execute first.

143
00:06:59.650 --> 00:07:00.973
Then we have one.

144
00:07:03.810 --> 00:07:05.690
And then we have three.

145
00:07:05.690 --> 00:07:08.173
Again, lowest number, highest priority.

146
00:07:11.230 --> 00:07:12.561
Then the other question you may have,

147
00:07:12.561 --> 00:07:15.380
well, what about duplicate order values?

148
00:07:15.380 --> 00:07:18.960
So if they're duplicate order values, then...

149
00:07:18.960 --> 00:07:20.860
Back to the docs. (chuckles)

150
00:07:20.860 --> 00:07:22.770
The test classes and methods will be ordered

151
00:07:22.770 --> 00:07:24.590
using an algorithm that's deterministic

152
00:07:24.590 --> 00:07:26.720
but intentionally non-obvious.

153
00:07:26.720 --> 00:07:29.240
All right, so it's kind of up in the air

154
00:07:29.240 --> 00:07:31.040
as far as how piece will work out.

155
00:07:31.040 --> 00:07:32.820
Again, if you want to have order

156
00:07:32.820 --> 00:07:36.040
then make use of the order annotation on a specific method.

157
00:07:36.040 --> 00:07:38.893
And in this scenario, you give unique values.

158
00:07:42.490 --> 00:07:43.990
And there's also some additional features

159
00:07:43.990 --> 00:07:44.823
that are available.

160
00:07:44.823 --> 00:07:46.850
So if you have multiple test classes

161
00:07:46.850 --> 00:07:49.190
you can also order the classes.

162
00:07:49.190 --> 00:07:52.310
You can also define a custom order implementation.

163
00:07:52.310 --> 00:07:54.570
And you can also configure the default order

164
00:07:54.570 --> 00:07:56.130
in a properties file.

165
00:07:56.130 --> 00:07:57.310
And you can find these details

166
00:07:57.310 --> 00:07:59.100
by looking at the JUnit user guide

167
00:07:59.100 --> 00:08:01.203
at the link that I have here on the slide.

168
00:08:03.550 --> 00:08:04.550
All righty, this looks really good.

169
00:08:04.550 --> 00:08:05.710
Let's go ahead and move to the next video

170
00:08:05.710 --> 00:08:07.410
and let's start writing some code.

