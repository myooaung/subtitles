1
00:00:01,110 --> 00:00:02,160
In this video we'll cover

2
00:00:02,160 --> 00:00:04,483
assertions for same and true.

3
00:00:08,160 --> 00:00:10,500
So testing for Same and NotSame.

4
00:00:11,790 --> 00:00:14,460
The assertion method name is assertSame,

5
00:00:14,460 --> 00:00:17,360
asserts that items refer to the same object.

6
00:00:17,360 --> 00:00:19,270
And then the NotSame assert that items

7
00:00:19,270 --> 00:00:21,070
do not refer to the same object.

8
00:00:21,070 --> 00:00:22,950
And in particularly here, they're referring

9
00:00:22,950 --> 00:00:24,883
to the object reference.

10
00:00:28,790 --> 00:00:30,540
Here's the code that we want to test.

11
00:00:34,470 --> 00:00:35,950
In our demo details class

12
00:00:35,950 --> 00:00:39,210
we have two fields here, academy and academyDuplicate,

13
00:00:39,210 --> 00:00:40,910
and on a check to see if these refer

14
00:00:40,910 --> 00:00:43,725
to the same object, in terms of object references.

15
00:00:43,725 --> 00:00:46,450
And then we have the supporting getter methods

16
00:00:46,450 --> 00:00:48,883
for retrieving these given items.

17
00:00:59,380 --> 00:01:01,030
So then I can define a test here

18
00:01:01,030 --> 00:01:04,800
for test Same and NotSame and the top right

19
00:01:04,800 --> 00:01:06,740
we have the actual code that we're testing,

20
00:01:06,740 --> 00:01:08,510
just as a reference.

21
00:01:08,510 --> 00:01:10,760
And here as I assertSame

22
00:01:10,760 --> 00:01:13,490
demoUtils getAcademy that's object one,

23
00:01:13,490 --> 00:01:17,080
and then demoUtils getAcademyDuplicate that's object two.

24
00:01:17,080 --> 00:01:19,680
And then the object should refer to the same object.

25
00:01:21,230 --> 00:01:23,140
And then we have a assertNotSame.

26
00:01:23,140 --> 00:01:25,140
And then for object one, we make use string,

27
00:01:25,140 --> 00:01:26,840
that's something that we defined up above

28
00:01:26,840 --> 00:01:28,270
equals luv2code.

29
00:01:28,270 --> 00:01:31,840
And then object two is demoUtils getAcademy.

30
00:01:31,840 --> 00:01:33,810
In this case, the objects should not refer

31
00:01:33,810 --> 00:01:36,823
to the same object in terms of object references.

32
00:01:37,920 --> 00:01:40,690
Now we run the actual test and we'll see our test results.

33
00:01:40,690 --> 00:01:43,830
So Same and NotSame this test pass.

34
00:01:43,830 --> 00:01:45,763
So this works out as desired.

35
00:01:48,880 --> 00:01:51,230
We can also take a look at some other assertions here

36
00:01:51,230 --> 00:01:53,103
for testing for true and false.

37
00:01:54,610 --> 00:01:57,560
The assertion method names assertTrue asserts

38
00:01:57,560 --> 00:01:58,980
that the condition is true.

39
00:01:58,980 --> 00:02:02,693
Likewise assertFalse asserts that the condition is false.

40
00:02:06,140 --> 00:02:08,970
And here's the code that we want to test.

41
00:02:08,970 --> 00:02:12,640
In our class demoUtils we have a method is greater.

42
00:02:12,640 --> 00:02:15,180
Basically we've take two numbers and return true

43
00:02:15,180 --> 00:02:16,973
if n1 is greater than n2.

44
00:02:18,940 --> 00:02:21,470
Now this is really just for academic purposes,

45
00:02:21,470 --> 00:02:24,720
you notice the code here is pretty simple.

46
00:02:24,720 --> 00:02:26,100
We can actually refactor this

47
00:02:26,100 --> 00:02:27,713
to make the code a bit simpler.

48
00:02:30,760 --> 00:02:32,710
And here instead of using the if statements,

49
00:02:32,710 --> 00:02:35,410
we simply return n1 greater than n2,

50
00:02:35,410 --> 00:02:37,763
but again you could write the code either way.

51
00:02:42,420 --> 00:02:45,050
Let's go ahead and write a test for this,

52
00:02:45,050 --> 00:02:46,680
in the top right we have the actual code

53
00:02:46,680 --> 00:02:48,913
that we're testing just as a reference.

54
00:02:49,850 --> 00:02:53,760
So I have a testTrueFalse, have grades one and two,

55
00:02:53,760 --> 00:02:58,760
10, five, then I use assertTrue pass and demoUtils greater,

56
00:02:59,520 --> 00:03:01,010
and then I'm passing grade one or two

57
00:03:01,010 --> 00:03:03,010
it'll return a boolean

58
00:03:03,010 --> 00:03:04,450
and this should return true

59
00:03:04,450 --> 00:03:06,383
because 10 is greater than five.

60
00:03:08,190 --> 00:03:10,050
And then we have assertFalse demoUtils.isGreater

61
00:03:12,430 --> 00:03:13,760
gradeTwo comma gradeOne.

62
00:03:13,760 --> 00:03:14,970
And so here, we're checking to see

63
00:03:14,970 --> 00:03:18,793
if five is greater than 10, and that's going to return false.

64
00:03:20,250 --> 00:03:21,550
Now we'll run the actual test

65
00:03:21,550 --> 00:03:23,080
and we'll see our test results,

66
00:03:23,080 --> 00:03:24,480
this test pass.

67
00:03:24,480 --> 00:03:26,393
So this works out as desired.

68
00:03:27,750 --> 00:03:28,980
Alrighty, let's go ahead and move

69
00:03:28,980 --> 00:03:31,423
into the next video and let's write some code.

