WEBVTT
1
00:00:01.490 --> 00:00:02.390
All righty, so let's go ahead

2
00:00:02.390 --> 00:00:04.650
and take a quick tour of the existing code

3
00:00:04.650 --> 00:00:05.483
that we have out there.

4
00:00:05.483 --> 00:00:07.490
We got a high level discussion, but let's go ahead

5
00:00:07.490 --> 00:00:09.973
and look at the actual code on our file system.

6
00:00:15.160 --> 00:00:18.060
In your IDE, let's go ahead and open up our Maven project.

7
00:00:21.330 --> 00:00:24.283
I'll move to our directory spring-boot-unit-testing-main.

8
00:00:26.350 --> 00:00:30.963
I'll move to the directory here, 3.00-starting-project.

9
00:00:33.670 --> 00:00:35.430
And then I see the Maven POM files here

10
00:00:35.430 --> 00:00:37.563
and I'll just go ahead and open this directory.

11
00:00:39.470 --> 00:00:41.370
Okay, excellent, so that's open.

12
00:00:41.370 --> 00:00:42.350
Let's go ahead and take a look

13
00:00:42.350 --> 00:00:44.523
at the pom.xml file first.

14
00:00:46.040 --> 00:00:47.640
I'm going to expand my window here.

15
00:00:49.490 --> 00:00:52.500
So this is kind of a standard Spring Boot project.

16
00:00:52.500 --> 00:00:54.070
Moving down here to the dependencies,

17
00:00:54.070 --> 00:00:56.393
we're going to use Thymeleaf for the views.

18
00:00:57.530 --> 00:01:00.573
We have some web related dependencies that we pull in here.

19
00:01:03.550 --> 00:01:06.430
We also make use of the Spring Boot starter test.

20
00:01:06.430 --> 00:01:07.730
And later on, we'll actually make use

21
00:01:07.730 --> 00:01:09.190
of the MySQL database.

22
00:01:09.190 --> 00:01:12.490
So we have a reference for that here, Spring data JPA,

23
00:01:12.490 --> 00:01:14.950
and also we'll make use of the H2 database

24
00:01:14.950 --> 00:01:16.250
during our integration test.

25
00:01:16.250 --> 00:01:18.060
And so we have that listed here too.

26
00:01:18.060 --> 00:01:20.680
So that's kind of the basics there for this Maven file.

27
00:01:20.680 --> 00:01:22.250
So it's a standard spring boot file,

28
00:01:22.250 --> 00:01:25.393
just some small mods there for our dependencies.

29
00:01:31.750 --> 00:01:33.570
Now, let's go ahead and look at some of our source code

30
00:01:33.570 --> 00:01:35.770
and we'll start here with a controller code.

31
00:01:42.210 --> 00:01:44.700
And I'll open up our GradebookController.

32
00:01:49.590 --> 00:01:52.520
And at the moment it's just a very basic file.

33
00:01:52.520 --> 00:01:54.190
Not much here.

34
00:01:54.190 --> 00:01:57.800
We simply do a reference for the grade book

35
00:01:57.800 --> 00:01:59.480
that we'll make use of.

36
00:01:59.480 --> 00:02:02.880
And we have just two entries here for the request mapping.

37
00:02:02.880 --> 00:02:05.020
So one to get students

38
00:02:05.020 --> 00:02:07.420
and another one to get the details of a given student.

39
00:02:07.420 --> 00:02:09.729
And then right now it's kind of just stubbed out.

40
00:02:09.729 --> 00:02:11.320
There's no real functionality here.

41
00:02:11.320 --> 00:02:12.600
We'll add that functionality

42
00:02:12.600 --> 00:02:16.040
as we go through the series of videos.

43
00:02:16.040 --> 00:02:18.440
Now, let's go ahead and move over to our models.

44
00:02:20.340 --> 00:02:21.450
And what I'd like to do is start here

45
00:02:21.450 --> 00:02:23.630
with the Grade interface.

46
00:02:23.630 --> 00:02:27.550
So this interface has an ID, has the student ID,

47
00:02:27.550 --> 00:02:29.523
and also has the actual grade.

48
00:02:33.200 --> 00:02:35.070
And then we'll actually have implementations

49
00:02:35.070 --> 00:02:37.150
of this interface, and so we'll have history grade.

50
00:02:37.150 --> 00:02:41.200
So this is actually a Hibernate JPA entity

51
00:02:41.200 --> 00:02:43.780
that we'll use to actually save this entity

52
00:02:43.780 --> 00:02:44.820
into the database.

53
00:02:44.820 --> 00:02:46.940
And so we have the appropriate annotations there

54
00:02:46.940 --> 00:02:50.323
to map those fields to the given database columns.

55
00:02:53.270 --> 00:02:56.880
And a similar thing here for math grade implements grade,

56
00:02:56.880 --> 00:03:00.120
already has the Hibernate JPA annotations

57
00:03:00.120 --> 00:03:02.563
and also similar thing here for science grade.

58
00:03:07.330 --> 00:03:09.930
And then we also have this interface for a student.

59
00:03:09.930 --> 00:03:11.940
And so this interface has a reference

60
00:03:11.940 --> 00:03:14.973
for student information, and also full name.

61
00:03:17.860 --> 00:03:20.950
And then we have college student, which implements student.

62
00:03:20.950 --> 00:03:24.130
And so again, this is a JPA entity

63
00:03:24.130 --> 00:03:25.870
that we can save into the database.

64
00:03:25.870 --> 00:03:27.710
And we have the appropriate annotations here

65
00:03:27.710 --> 00:03:30.923
for the given fields mapping those to columns.

66
00:03:34.740 --> 00:03:37.330
And then we have this GradebookCollegeStudent

67
00:03:37.330 --> 00:03:39.763
that extends college student.

68
00:03:41.910 --> 00:03:44.440
So this guy extends college student.

69
00:03:44.440 --> 00:03:46.410
And the reference here is that we have a reference

70
00:03:46.410 --> 00:03:47.983
to a student grades.

71
00:03:52.690 --> 00:03:56.300
Now, switching gears a bit, we have a grade book.

72
00:03:56.300 --> 00:03:58.130
Now, remember the grade book has a list

73
00:03:58.130 --> 00:04:01.567
of college students or GradebookCollegeStudents.

74
00:04:04.840 --> 00:04:06.470
And then we also have student grades,

75
00:04:06.470 --> 00:04:09.240
which has collections for our math grades,

76
00:04:09.240 --> 00:04:11.953
our science grades, and also our history grades.

77
00:04:14.680 --> 00:04:17.240
All righty, so that takes care of all the model files.

78
00:04:17.240 --> 00:04:18.790
Now, let's move down to resources

79
00:04:18.790 --> 00:04:21.503
and take a look at some of our Thymeleaf templates.

80
00:04:32.830 --> 00:04:35.743
And we have our main page here, index dot HTML.

81
00:04:37.060 --> 00:04:38.430
So that's the main page you see

82
00:04:38.430 --> 00:04:40.173
when we start the application.

83
00:04:41.960 --> 00:04:43.120
And you saw that a little bit earlier,

84
00:04:43.120 --> 00:04:45.903
it basically just has a table for the students,

85
00:04:47.450 --> 00:04:49.670
the actual grade book ID, the first name,

86
00:04:49.670 --> 00:04:51.120
last name and the email.

87
00:04:51.120 --> 00:04:53.860
And then we kind of loop through those items there.

88
00:04:53.860 --> 00:04:55.410
At the moment for this example,

89
00:04:55.410 --> 00:04:58.530
we simply have those values hard coded for Darby, Eric Roby,

90
00:04:58.530 --> 00:05:01.510
and also just a random user, but we'll make this dynamic

91
00:05:01.510 --> 00:05:03.440
as we go through the set of videos.

92
00:05:03.440 --> 00:05:07.040
And then also here, we have information for a given student.

93
00:05:07.040 --> 00:05:10.280
So that's in the studentinformation dot HTML file.

94
00:05:10.280 --> 00:05:11.740
So it gives you the details.

95
00:05:11.740 --> 00:05:14.630
So for a given student, there are a list of math grades

96
00:05:14.630 --> 00:05:17.220
or math assignments, and a similar thing here

97
00:05:17.220 --> 00:05:21.680
for science assignments and also history assignments.

98
00:05:21.680 --> 00:05:22.850
And then at the moment, we just have this

99
00:05:22.850 --> 00:05:24.540
kind of hard coded for now.

100
00:05:24.540 --> 00:05:27.363
We'll make this all dynamic as we go through the videos.

101
00:05:30.320 --> 00:05:31.930
We just have a basic error page here

102
00:05:31.930 --> 00:05:35.090
in case we run into an error during the processing,

103
00:05:35.090 --> 00:05:37.890
we'll simply tell the user, "Hey, something went wrong."

104
00:05:41.770 --> 00:05:45.390
And then we have some supporting CSS and JavaScripts.

105
00:05:45.390 --> 00:05:48.500
So CSS is just basically making a page look pretty, right?

106
00:05:48.500 --> 00:05:50.790
So I'm not going to go into any details here on CSS,

107
00:05:50.790 --> 00:05:53.830
but basically styles to help you control the look

108
00:05:53.830 --> 00:05:55.313
and feel of the HTML.

109
00:05:57.860 --> 00:06:00.550
And then we have JavaScript files here.

110
00:06:00.550 --> 00:06:03.423
We have this one JavaScript file, main dot JS.

111
00:06:05.740 --> 00:06:08.280
And in this file we have some code

112
00:06:08.280 --> 00:06:11.260
for showing or hiding a grade.

113
00:06:11.260 --> 00:06:13.410
So, remember when I went through the demo,

114
00:06:13.410 --> 00:06:17.400
I could go through and select, say, Add Assignment.

115
00:06:17.400 --> 00:06:18.370
I could click the button here

116
00:06:18.370 --> 00:06:20.180
to add a new assignment or new grade.

117
00:06:20.180 --> 00:06:22.790
So we would show a little section here.

118
00:06:22.790 --> 00:06:24.100
The user could enter their information

119
00:06:24.100 --> 00:06:26.400
and then we would hide it once that piece was done.

120
00:06:26.400 --> 00:06:28.860
So basically that's the whole idea of this JavaScript here,

121
00:06:28.860 --> 00:06:33.193
just showing and hiding divs based on a selection.

122
00:06:34.220 --> 00:06:35.810
And again, this isn't a JavaScript course,

123
00:06:35.810 --> 00:06:38.010
so don't worry about if you don't understand all this.

124
00:06:38.010 --> 00:06:40.963
We kind of give you this basic work there for using it.

125
00:06:46.390 --> 00:06:48.150
And then we just have some supporting functions here

126
00:06:48.150 --> 00:06:51.420
for deleting a student, deleting grades,

127
00:06:51.420 --> 00:06:53.740
math, science, and history,

128
00:06:53.740 --> 00:06:55.990
and also viewing the actual student information.

129
00:06:55.990 --> 00:06:58.670
And we'll have this hooked up to the Thymeleaf pages

130
00:06:58.670 --> 00:07:01.163
to call the appropriate controller code.

131
00:07:02.570 --> 00:07:04.820
And now taking a look at our application properties,

132
00:07:04.820 --> 00:07:07.773
we'll run our application on server port 1500.

133
00:07:09.310 --> 00:07:10.210
We can choose any number,

134
00:07:10.210 --> 00:07:12.553
but I just chose 1500 just to be different.

135
00:07:13.760 --> 00:07:16.270
And then we have our database credentials

136
00:07:16.270 --> 00:07:18.290
as far as data source URL,

137
00:07:18.290 --> 00:07:20.360
driver class name, and so forth.

138
00:07:20.360 --> 00:07:21.850
At the moment, it's all commented out

139
00:07:21.850 --> 00:07:23.460
because like I mentioned earlier,

140
00:07:23.460 --> 00:07:25.150
we don't have any database support in place.

141
00:07:25.150 --> 00:07:28.400
The previous employee didn't create it yet.

142
00:07:28.400 --> 00:07:29.960
So they were almost there, but they didn't finish.

143
00:07:29.960 --> 00:07:32.620
So we'll go ahead and just kind of grab the ball from here

144
00:07:32.620 --> 00:07:33.453
and continue running.

145
00:07:33.453 --> 00:07:36.490
So we'll start with adding information into an H2 database

146
00:07:36.490 --> 00:07:37.420
and later on, we'll move over

147
00:07:37.420 --> 00:07:40.063
to having the data stored in a MySQL database.

148
00:07:43.430 --> 00:07:45.700
Now, let's go ahead and run the application as we have it.

149
00:07:45.700 --> 00:07:47.440
So this is a different version of the app.

150
00:07:47.440 --> 00:07:49.520
This is kind of like the incomplete version

151
00:07:49.520 --> 00:07:51.933
of the application, not everything's there yet.

152
00:07:53.360 --> 00:07:55.370
So once the application is up and running,

153
00:07:55.370 --> 00:07:59.713
open up your web browser and go and visit localhost:1500.

154
00:08:02.890 --> 00:08:05.640
And then you'll make it to our main homepage here.

155
00:08:05.640 --> 00:08:08.520
So at the moment, all this data's just hard coded,

156
00:08:08.520 --> 00:08:10.070
no real database interaction right now,

157
00:08:10.070 --> 00:08:11.420
everything is just hard coded.

158
00:08:11.420 --> 00:08:13.770
We'll actually add functionality in the future.

159
00:08:17.620 --> 00:08:19.310
And if we wanted to get a detail,

160
00:08:19.310 --> 00:08:22.650
well, we can kind of just play around with it for a bit

161
00:08:22.650 --> 00:08:25.890
and just say student information slash one.

162
00:08:25.890 --> 00:08:27.750
And again, this is all hard coded.

163
00:08:27.750 --> 00:08:30.890
It'll give us back some grades for the student Eric Roby.

164
00:08:30.890 --> 00:08:32.700
And again, this is all kind of mocked up

165
00:08:32.700 --> 00:08:34.360
hard coded right now.

166
00:08:34.360 --> 00:08:35.799
We'll actually go through it and write the code

167
00:08:35.799 --> 00:08:37.860
to make it dynamic, talking to a database,

168
00:08:37.860 --> 00:08:41.280
getting information back for a specific person, okay.

169
00:08:41.280 --> 00:08:43.380
So if we tried to add grades and assignments right now,

170
00:08:43.380 --> 00:08:44.820
it doesn't work because this functionality

171
00:08:44.820 --> 00:08:46.170
is kind of incomplete right now.

172
00:08:46.170 --> 00:08:48.600
But hey, no worry, that's for us.

173
00:08:48.600 --> 00:08:50.290
That's our job, that's our task,

174
00:08:50.290 --> 00:08:52.090
if we choose to accept it,

175
00:08:52.090 --> 00:08:54.550
we're going to add some real database functionality

176
00:08:54.550 --> 00:08:57.600
to this application, and we're going to add unit testing

177
00:08:57.600 --> 00:09:00.280
and integration testing during the whole process.

178
00:09:00.280 --> 00:09:02.370
So this is going to be great, so I'm excited.

179
00:09:02.370 --> 00:09:05.543
So I will see you in the next video.

