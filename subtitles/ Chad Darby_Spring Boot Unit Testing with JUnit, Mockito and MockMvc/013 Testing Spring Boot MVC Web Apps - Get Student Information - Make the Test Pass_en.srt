1
00:00:01,220 --> 00:00:03,430
Okay, so let's take that failing test,

2
00:00:03,430 --> 00:00:05,050
and let's make this test pass.

3
00:00:05,050 --> 00:00:06,823
Let's go from red to green.

4
00:00:09,680 --> 00:00:11,960
I'll move into the student and grade service.

5
00:00:11,960 --> 00:00:13,110
And that one method here, studentInformation,

6
00:00:13,110 --> 00:00:15,340
where we simply return null,

7
00:00:15,340 --> 00:00:16,870
I'll remove that, and let's sit down here,

8
00:00:16,870 --> 00:00:19,570
and let's write some real code for this functionality.

9
00:00:23,413 --> 00:00:25,580
(silence)

10
00:00:27,770 --> 00:00:28,610
The first thing I need to do,

11
00:00:28,610 --> 00:00:30,440
is retrieve the student from the database,

12
00:00:30,440 --> 00:00:32,843
using the studentDao.findById.

13
00:00:35,851 --> 00:00:38,018
(Silence)

14
00:00:41,369 --> 00:00:43,240
And then I'll get a reference to the math grades,

15
00:00:43,240 --> 00:00:44,683
for this given student ID.

16
00:00:45,770 --> 00:00:49,203
So here I have mathGradeDao.findGradeByStudentId,

17
00:00:51,360 --> 00:00:53,900
and then I'll do a similar thing here for science grades,

18
00:00:53,900 --> 00:00:55,453
and also for history grades.

19
00:00:58,348 --> 00:01:00,515
(silence)

20
00:01:20,962 --> 00:01:22,460
And the next thing I'll do here is,

21
00:01:22,460 --> 00:01:24,650
I'll actually take this Iterable,

22
00:01:24,650 --> 00:01:27,183
and I'll actually convert it to a list.

23
00:01:30,618 --> 00:01:32,785
(silence)

24
00:01:42,060 --> 00:01:43,100
So this is the code here,

25
00:01:43,100 --> 00:01:44,680
for converting the Iterable to a list.

26
00:01:44,680 --> 00:01:46,480
I created an empty list first,

27
00:01:46,480 --> 00:01:49,830
and then I make just a Iterable, mathGrades.forEach,

28
00:01:49,830 --> 00:01:52,030
so this will kind of loop over the math grades.

29
00:01:52,030 --> 00:01:55,490
And then I'll say mathGradesList::add.

30
00:01:55,490 --> 00:01:57,240
What this does is behind the scenes,

31
00:01:57,240 --> 00:02:00,110
it'll call the add method on the math grades list,

32
00:02:00,110 --> 00:02:01,210
for that given item.

33
00:02:01,210 --> 00:02:02,450
So I'm basically looping through,

34
00:02:02,450 --> 00:02:05,090
the Iterable and then adding each one of those items,

35
00:02:05,090 --> 00:02:06,923
to this math grade list.

36
00:02:12,940 --> 00:02:15,970
And I'll simply repeat this process here for science grades,

37
00:02:15,970 --> 00:02:17,710
and also history grades.

38
00:02:17,710 --> 00:02:20,423
Again, simply converting the Iterable to a list.

39
00:02:26,428 --> 00:02:28,595
(silence)

40
00:03:13,828 --> 00:03:15,630
Okay, so that coding is in place.

41
00:03:15,630 --> 00:03:17,763
Let's go ahead and make use of student grades.

42
00:03:19,560 --> 00:03:21,690
And at the moment I don't have student grades,

43
00:03:21,690 --> 00:03:23,950
let's go ahead and autowire in the student grades.

44
00:03:23,950 --> 00:03:25,543
So I'll kind of scroll up top.

45
00:03:29,127 --> 00:03:31,294
(silence)

46
00:03:34,240 --> 00:03:36,563
Make use of this autowired for student grades.

47
00:03:41,652 --> 00:03:43,819
(silence)

48
00:03:46,610 --> 00:03:48,940
And then I can set the values accordingly here,

49
00:03:48,940 --> 00:03:52,263
for math grades, history grades, and science grades.

50
00:03:56,870 --> 00:03:59,037
(silence)

51
00:04:09,470 --> 00:04:10,440
And then the next thing I can do,

52
00:04:10,440 --> 00:04:12,990
is create an instance of this GradebookCollegeStudent,

53
00:04:12,990 --> 00:04:15,340
and then populate it with the appropriate data.

54
00:04:19,447 --> 00:04:21,615
(silence)

55
00:04:27,240 --> 00:04:29,810
Here I'll pass in the student ID, the first name,

56
00:04:29,810 --> 00:04:30,883
the last name,

57
00:04:41,550 --> 00:04:42,950
and the email address.

58
00:04:42,950 --> 00:04:45,380
I'll also give a reference here to the student grades,

59
00:04:45,380 --> 00:04:47,210
which is a collection of the math, science,

60
00:04:47,210 --> 00:04:48,563
and history grade results.

61
00:04:52,020 --> 00:04:54,850
And then I simply return that gradebookCollegeStudent,

62
00:04:54,850 --> 00:04:55,990
and that's the basic coding here,

63
00:04:55,990 --> 00:04:58,000
for getting the student information.

64
00:04:58,000 --> 00:05:00,610
We simply access the information from the database,

65
00:05:00,610 --> 00:05:03,030
and we package it up into the appropriate format,

66
00:05:03,030 --> 00:05:04,840
or a gradebookCollegeStudent,

67
00:05:04,840 --> 00:05:07,540
and then we return that given instance or that object.

68
00:05:12,730 --> 00:05:14,520
Now let's swing back over to our test,

69
00:05:14,520 --> 00:05:17,070
and let's run it and see how this works out for us.

70
00:05:22,030 --> 00:05:23,150
And this is great.

71
00:05:23,150 --> 00:05:24,290
The test passes.

72
00:05:24,290 --> 00:05:26,450
So we're able to retrieve student information,

73
00:05:26,450 --> 00:05:29,300
from the database, and then verifying it with our tests.

74
00:05:29,300 --> 00:05:31,670
So we verified information for the student ID,

75
00:05:31,670 --> 00:05:33,200
first name, last name, email,

76
00:05:33,200 --> 00:05:35,530
and also the math, science and history grades.

77
00:05:35,530 --> 00:05:36,363
This looks really good.

78
00:05:36,363 --> 00:05:37,196
I like it.

79
00:05:37,196 --> 00:05:38,029
I'm happy!

