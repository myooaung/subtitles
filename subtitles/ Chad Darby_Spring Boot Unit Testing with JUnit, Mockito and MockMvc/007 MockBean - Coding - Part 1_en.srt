1
00:00:01,170 --> 00:00:02,003
All right, so let's go ahead

2
00:00:02,003 --> 00:00:02,836
and move into our code

3
00:00:02,836 --> 00:00:06,330
and let's make the updates here for the Mock Bean

4
00:00:06,330 --> 00:00:07,833
and the Autowired.

5
00:00:14,970 --> 00:00:18,280
So this is currently the code for creating the mock

6
00:00:18,280 --> 00:00:20,410
and also injecting the mock.

7
00:00:20,410 --> 00:00:22,420
And using the information that we learned before,

8
00:00:22,420 --> 00:00:24,520
we can make some small modifications here.

9
00:00:28,070 --> 00:00:29,610
So instead of using a Mockito Mock,

10
00:00:29,610 --> 00:00:32,493
we can make use of the Spring Boot Mock Bean.

11
00:00:34,250 --> 00:00:37,730
So this provides the Mockito functionality of mocking

12
00:00:37,730 --> 00:00:41,503
but also it adds the given Bean to the application context.

13
00:00:42,440 --> 00:00:44,640
And so since it's in the application context,

14
00:00:44,640 --> 00:00:47,080
then I can simply make use of Autowired

15
00:00:47,080 --> 00:00:50,490
and that given Bean will be autowired or injected

16
00:00:50,490 --> 00:00:53,250
into the given application context.

17
00:00:53,250 --> 00:00:55,100
And this is kind of the preferred approach

18
00:00:55,100 --> 00:00:57,343
of using Mockito with Spring Boot.

19
00:01:01,130 --> 00:01:03,700
And that's the only modification we had to make there.

20
00:01:03,700 --> 00:01:05,870
Everything else will run exactly the same.

21
00:01:05,870 --> 00:01:07,270
So we can run our test

22
00:01:07,270 --> 00:01:09,080
and we can see that the test results work out

23
00:01:09,080 --> 00:01:10,510
just like they did before.

24
00:01:10,510 --> 00:01:13,350
Alrighty, so the mocking works like before

25
00:01:13,350 --> 00:01:16,090
and also the autowired.

26
00:01:16,090 --> 00:01:18,190
So we're making use of the Mock Bean.

27
00:01:18,190 --> 00:01:19,920
So we mock the bean and add it

28
00:01:19,920 --> 00:01:21,680
to the spring application context

29
00:01:21,680 --> 00:01:24,660
and then we can pick it up there with the autowired.

30
00:01:24,660 --> 00:01:25,820
And that kind of handles

31
00:01:25,820 --> 00:01:27,190
the shortcoming that we had earlier,

32
00:01:27,190 --> 00:01:31,640
where the Inject Mocks only worked on @Mock and @Spies.

33
00:01:31,640 --> 00:01:33,720
Now this whole idea of injection,

34
00:01:33,720 --> 00:01:36,220
it can inject our normal dependencies

35
00:01:36,220 --> 00:01:38,393
and also our mocked dependencies.

36
00:01:42,220 --> 00:01:43,860
All right, so we've taken care of that work.

37
00:01:43,860 --> 00:01:46,420
Let's go ahead and just add another test here

38
00:01:46,420 --> 00:01:47,453
for this example.

39
00:02:00,340 --> 00:02:02,883
So this is a test for finding a GPA.

40
00:02:12,200 --> 00:02:13,880
So I'll set up my expectations here.

41
00:02:13,880 --> 00:02:16,853
I'll say when application DAO find grade point average.

42
00:02:26,390 --> 00:02:28,843
Then return with 88.31.

43
00:02:31,355 --> 00:02:32,905
And I can do some asserts here.

44
00:02:34,570 --> 00:02:38,000
So my expected value is 88.31,

45
00:02:38,000 --> 00:02:40,027
application service, find GPA.

46
00:02:53,560 --> 00:02:57,103
Student one, student grades, get math grade results.

47
00:03:04,870 --> 00:03:07,080
Now I can go ahead and just run this test

48
00:03:13,790 --> 00:03:15,160
and I can check the results

49
00:03:15,160 --> 00:03:18,430
and we can see that this given test, find the GPA,

50
00:03:18,430 --> 00:03:20,210
passed with no problems.

51
00:03:20,210 --> 00:03:21,043
Good job.

