WEBVTT
1
00:00:00.746 --> 00:00:01.810
In this video,

2
00:00:01.810 --> 00:00:03.973
we're going to test for creating a student.

3
00:00:07.134 --> 00:00:09.000
So our test case that we have

4
00:00:09.000 --> 00:00:11.920
is that we want to create a student in the database.

5
00:00:11.920 --> 00:00:14.300
And what we'll do is we'll send a POST request

6
00:00:14.300 --> 00:00:15.650
to the controller,

7
00:00:15.650 --> 00:00:17.390
and then we'll verify the results

8
00:00:17.390 --> 00:00:20.580
by accessing the data using our DAO.

9
00:00:20.580 --> 00:00:21.570
So at the bottom here,

10
00:00:21.570 --> 00:00:24.690
I have the architecture diagram of our application.

11
00:00:24.690 --> 00:00:25.660
So the POST request

12
00:00:25.660 --> 00:00:27.710
is going to go into the GradeBook Controller

13
00:00:27.710 --> 00:00:29.250
that will make use of the service

14
00:00:29.250 --> 00:00:30.736
that will make use of the DAO

15
00:00:30.736 --> 00:00:33.550
to actually store the information or store that student

16
00:00:33.550 --> 00:00:34.920
in the database.

17
00:00:34.920 --> 00:00:37.180
Then we'll come back separately in our test,

18
00:00:37.180 --> 00:00:39.400
and we'll make use of the DAO directly

19
00:00:39.400 --> 00:00:42.313
and verify that the student really is in the database.

20
00:00:43.650 --> 00:00:45.870
And what we'll do is we'll apply TDD here.

21
00:00:45.870 --> 00:00:48.010
We'll apply test-driven development.

22
00:00:48.010 --> 00:00:49.140
So what we'll do is we'll start

23
00:00:49.140 --> 00:00:50.970
by writing a failing test, right?

24
00:00:50.970 --> 00:00:52.250
So nothing will work.

25
00:00:52.250 --> 00:00:54.630
And then we'll refactor and modify our code

26
00:00:54.630 --> 00:00:57.520
to make our test pass to green.

27
00:00:57.520 --> 00:00:59.000
All right, pretty good stuff.

28
00:00:59.000 --> 00:01:00.550
Let's go ahead and get started.

29
00:01:02.452 --> 00:01:04.620
So moving into our IDE here,

30
00:01:04.620 --> 00:01:07.023
let's go ahead and open up our GradeBookControllerTest,

31
00:01:09.270 --> 00:01:10.280
and what I'd like to do

32
00:01:10.280 --> 00:01:14.400
is make use of a mock servlet request.

33
00:01:14.400 --> 00:01:15.690
So I'll go ahead and create this here,

34
00:01:15.690 --> 00:01:16.610
and I'll make it static,

35
00:01:16.610 --> 00:01:19.160
and I'll discuss the reason for static in a second.

36
00:01:26.604 --> 00:01:29.790
We'll set up this MockHttpServletRequest.

37
00:01:31.988 --> 00:01:34.113
We'll simply call it request.

38
00:01:45.096 --> 00:01:49.000
And then I'll set up this BeforeAll.

39
00:01:49.000 --> 00:01:52.030
So this is a setup annotation that we can use

40
00:01:52.030 --> 00:01:56.313
that will run only once for this given test suite.

41
00:01:58.097 --> 00:02:01.380
So I'll create this MockHttpServletRequest.

42
00:02:01.380 --> 00:02:03.060
So this is an object that we can use

43
00:02:03.060 --> 00:02:06.100
to make mock servlet request,

44
00:02:06.100 --> 00:02:08.850
and I can populate this request with some data.

45
00:02:08.850 --> 00:02:10.900
So I'll set up some parameters here

46
00:02:10.900 --> 00:02:13.593
for firstname, lastname, and email.

47
00:02:15.002 --> 00:02:17.330
So just think of this as a reusable object

48
00:02:17.330 --> 00:02:18.660
that we can make use of

49
00:02:18.660 --> 00:02:21.823
for sending request to a given controller or endpoint.

50
00:02:48.498 --> 00:02:50.410
And then a quick discussion here

51
00:02:50.410 --> 00:02:52.450
on why we had to make it static:

52
00:02:52.450 --> 00:02:55.070
Whenever you make use of the BeforeAll annotation,

53
00:02:55.070 --> 00:02:57.680
the methods must always be static,

54
00:02:57.680 --> 00:03:00.402
and that's simply defined in the JUnit framework.

55
00:03:00.402 --> 00:03:03.290
BeforeAll has to be static. That's a requirement.

56
00:03:03.290 --> 00:03:05.680
And since we're going to use a field inside of that method,

57
00:03:05.680 --> 00:03:07.643
then that given field has to be static.

58
00:03:08.620 --> 00:03:10.283
All right, that's taken care of.

59
00:03:15.344 --> 00:03:17.660
Now let's go ahead and move down here,

60
00:03:17.660 --> 00:03:19.233
and let's write a test.

61
00:03:24.400 --> 00:03:26.790
And this is going to be for creating a student

62
00:03:26.790 --> 00:03:29.033
using an HTTP request,

63
00:03:30.430 --> 00:03:33.533
and we'll post data to a mapping on our controller.

64
00:03:53.670 --> 00:03:56.100
And so then, we'll make use of mvcResult

65
00:03:56.100 --> 00:03:59.140
equals this.mockMvc.perform.

66
00:03:59.140 --> 00:04:01.183
We'll make use of a post request,

67
00:04:02.970 --> 00:04:06.343
and we'll post something over to the / endpoint.

68
00:04:08.945 --> 00:04:11.023
Specify the contentType.

69
00:04:19.000 --> 00:04:21.250
And then we specify the parameters

70
00:04:21.250 --> 00:04:24.260
for firstname, lastname, and email.

71
00:04:24.260 --> 00:04:26.810
So we specify the name-value pairs.

72
00:04:26.810 --> 00:04:29.120
So the name of the parameter is firstname,

73
00:04:29.120 --> 00:04:32.510
and then the value, I simply make use of that request

74
00:04:32.510 --> 00:04:34.890
and say request.getParameterValues

75
00:04:34.890 --> 00:04:37.020
and specify whatever item that I want,

76
00:04:37.020 --> 00:04:39.140
so in this case firstname.

77
00:04:39.140 --> 00:04:41.140
And then I simply repeat the process

78
00:04:41.140 --> 00:04:44.197
for lastname and emailAddress.

79
00:05:09.351 --> 00:05:11.410
And now let's go ahead and fix

80
00:05:11.410 --> 00:05:14.320
this red piece here with the post.

81
00:05:14.320 --> 00:05:16.110
Be sure to make an import

82
00:05:16.110 --> 00:05:19.890
here on MockMvcRequestBuilders.post

83
00:05:19.890 --> 00:05:22.153
that's in the request package.

84
00:05:26.420 --> 00:05:27.600
And then one last thing we'll do

85
00:05:27.600 --> 00:05:31.077
is we'll add an additional paren after emailAddress,

86
00:05:32.199 --> 00:05:33.980
and now we can do our dot,

87
00:05:33.980 --> 00:05:35.860
and then we can set up our expectations.

88
00:05:35.860 --> 00:05:39.373
We say andExpect that the status is okay.

89
00:05:44.780 --> 00:05:47.197
And then we finally do andReturn.

90
00:05:48.750 --> 00:05:49.710
So effectively here,

91
00:05:49.710 --> 00:05:52.110
that will perform a post to that given endpoint,

92
00:05:52.110 --> 00:05:54.353
and we pass in the parameters for that post.

93
00:06:04.250 --> 00:06:05.870
And then we can access the ModelAndView

94
00:06:05.870 --> 00:06:08.733
by saying mvcResult.getModelAndView.

95
00:06:10.870 --> 00:06:13.750
And now I simply want to perform an assertion.

96
00:06:13.750 --> 00:06:15.940
I'll make use of this ModelAndViewAssert,

97
00:06:15.940 --> 00:06:17.400
and I assertViewName,

98
00:06:17.400 --> 00:06:20.323
pass in the ModelAndView, comma, index.

99
00:06:21.540 --> 00:06:23.440
We've seen some of this coding before.

100
00:06:26.452 --> 00:06:28.130
All right, so we can zoom out a bit.

101
00:06:28.130 --> 00:06:29.823
Let's go ahead and run this test.

102
00:06:34.897 --> 00:06:37.560
And the test failed.

103
00:06:37.560 --> 00:06:39.470
Okay, hmm, interesting.

104
00:06:39.470 --> 00:06:42.983
Let's go and investigate, find out why this test failed.

105
00:06:46.270 --> 00:06:48.303
So just scrolling down a bit here,

106
00:06:50.610 --> 00:06:54.030
and it says Expected: 200, Actual: 405.

107
00:06:54.030 --> 00:06:57.990
Alrighty, so this test fails with the error code of 405

108
00:06:57.990 --> 00:06:59.750
which means Method not allowed,

109
00:06:59.750 --> 00:07:01.590
and you're probably wondering why.

110
00:07:01.590 --> 00:07:05.150
Well, we haven't implemented the POST mapping

111
00:07:05.150 --> 00:07:07.020
in our GradebookController yet.

112
00:07:07.020 --> 00:07:09.510
That code's missing. It's kind of incomplete.

113
00:07:09.510 --> 00:07:12.330
And so actually, this is kind of the TDD in action,

114
00:07:12.330 --> 00:07:14.220
test-driven development in action.

115
00:07:14.220 --> 00:07:15.990
We wrote a failing test,

116
00:07:15.990 --> 00:07:19.380
and then we modified the code to make the test pass.

117
00:07:19.380 --> 00:07:22.440
All right, so that's the idea. So this is kind of expected.

118
00:07:22.440 --> 00:07:23.840
We'll write some code in the next video

119
00:07:23.840 --> 00:07:25.220
to kind of clean things up

120
00:07:25.220 --> 00:07:28.260
and give it to a green passing test.

121
00:07:28.260 --> 00:07:32.113
Alrighty, so hang tight, and I'll see you in the next video.

