WEBVTT
1
00:00:01.490 --> 00:00:02.940
Now here's the diagram

2
00:00:02.940 --> 00:00:05.420
that we had in our previous set of videos

3
00:00:05.420 --> 00:00:07.110
regarding Test-Driven Development.

4
00:00:07.110 --> 00:00:09.500
The idea of test, code and refactor.

5
00:00:09.500 --> 00:00:11.970
I mentioned it's a continuous cycle.

6
00:00:11.970 --> 00:00:13.440
In our previous set of videos,

7
00:00:13.440 --> 00:00:16.329
we saw examples of writing failing tests first,

8
00:00:16.329 --> 00:00:18.290
writing codes to pass and we kind of,

9
00:00:18.290 --> 00:00:20.660
repeated that process over and over again,

10
00:00:20.660 --> 00:00:21.690
but you're probably wondering hey,

11
00:00:21.690 --> 00:00:24.870
we never really discussed the idea of refactoring

12
00:00:24.870 --> 00:00:27.710
or saw examples of refactoring in

13
00:00:27.710 --> 00:00:29.590
that FizzBuzz example.

14
00:00:29.590 --> 00:00:31.070
Remember the idea of refactoring is that,

15
00:00:31.070 --> 00:00:33.683
we can kind of refactor and improve in our design.

16
00:00:35.490 --> 00:00:38.010
One of the benefits of Test-Driven Development is that,

17
00:00:38.010 --> 00:00:39.090
when we pass tests,

18
00:00:39.090 --> 00:00:41.020
increases confidence in our code,

19
00:00:41.020 --> 00:00:44.440
but also it gives us the freedom to refactor

20
00:00:44.440 --> 00:00:46.150
the test or our safety net,

21
00:00:46.150 --> 00:00:48.570
because sometimes you're afraid to touch the code

22
00:00:48.570 --> 00:00:49.420
because you're wondering,

23
00:00:49.420 --> 00:00:51.400
oh, did I break anything?

24
00:00:51.400 --> 00:00:53.610
Well, now that we have a test in place,

25
00:00:53.610 --> 00:00:55.370
we can refactor our code

26
00:00:55.370 --> 00:00:57.350
and simply run our test again.

27
00:00:57.350 --> 00:00:59.380
If our test still passed then hey,

28
00:00:59.380 --> 00:01:01.400
we're in a pretty good space.

29
00:01:01.400 --> 00:01:02.300
What I'd like to do now,

30
00:01:02.300 --> 00:01:05.660
is actually go back and refactor our implementation.

31
00:01:05.660 --> 00:01:07.480
The implementation that we have FizzBuzz,

32
00:01:07.480 --> 00:01:08.770
it works just fine,

33
00:01:08.770 --> 00:01:10.420
but maybe we said hey,

34
00:01:10.420 --> 00:01:12.110
there's another approach I can take

35
00:01:12.110 --> 00:01:14.480
or there's another algorithm or solution,

36
00:01:14.480 --> 00:01:15.640
I'd like to play with.

37
00:01:15.640 --> 00:01:17.130
We can put in that new solution

38
00:01:17.130 --> 00:01:18.940
or we can refactor the code accordingly

39
00:01:18.940 --> 00:01:20.230
and then run our test

40
00:01:20.230 --> 00:01:22.350
and make sure that everything still works.

41
00:01:22.350 --> 00:01:24.050
So let's go ahead and do that now.

42
00:01:32.390 --> 00:01:35.440
I'll provide an alternate implementation here,

43
00:01:35.440 --> 00:01:36.360
for this method

44
00:01:36.360 --> 00:01:39.383
and make sure that it still works.

45
00:01:43.940 --> 00:01:47.063
I'll just create another method with the same signature.

46
00:01:48.360 --> 00:01:51.443
And then I'll just comment out my existing method.

47
00:02:04.320 --> 00:02:06.370
And so here's our compute method,

48
00:02:06.370 --> 00:02:08.300
and so we're going to try a different solution

49
00:02:08.300 --> 00:02:12.040
or a different approach for this.

50
00:02:12.040 --> 00:02:13.410
And then we'll run our tests at the end

51
00:02:13.410 --> 00:02:15.823
to make sure everything still works.

52
00:02:19.210 --> 00:02:20.043
And what I'll do here is,

53
00:02:20.043 --> 00:02:22.240
I'll like you to use string concatenation here.

54
00:02:22.240 --> 00:02:24.770
I'll kind of build up a result string,

55
00:02:24.770 --> 00:02:27.400
based on the logic that we apply here in this method.

56
00:02:27.400 --> 00:02:29.580
So I'll just create a new instance of string builder.

57
00:02:29.580 --> 00:02:33.060
Allows us to concatenate or append strings,

58
00:02:33.060 --> 00:02:34.360
and I'll return the result

59
00:02:36.510 --> 00:02:37.960
and actually result.toString,

60
00:02:38.941 --> 00:02:40.770
because I have to return a string string,

61
00:02:40.770 --> 00:02:42.320
as opposed to a string builder.

62
00:02:48.250 --> 00:02:50.490
And for the first scenario here I'll say,

63
00:02:50.490 --> 00:02:53.170
if i is divisible by three,

64
00:02:53.170 --> 00:02:56.183
then we'll append Fizz.

65
00:03:01.830 --> 00:03:03.350
And then we'll do a similar check.

66
00:03:03.350 --> 00:03:05.090
If i is divisible by five,

67
00:03:05.090 --> 00:03:06.243
we'll append Buzz.

68
00:03:21.760 --> 00:03:23.740
And if nothing has been appended,

69
00:03:23.740 --> 00:03:25.360
so if the result is empty,

70
00:03:25.360 --> 00:03:28.380
meaning hey, there's nothing in there right now.

71
00:03:28.380 --> 00:03:31.050
Then we'll simply append the i.

72
00:03:37.600 --> 00:03:38.433
And that's it.

73
00:03:38.433 --> 00:03:39.900
So just a different way of going about it.

74
00:03:39.900 --> 00:03:42.290
We append Fizz Buzz,

75
00:03:42.290 --> 00:03:44.120
if it's divisible by three and five.

76
00:03:44.120 --> 00:03:47.020
It's automatically FizzBuzz based on its logic.

77
00:03:47.020 --> 00:03:49.373
So just a different approach of going about it.

78
00:03:52.510 --> 00:03:54.330
And let's run our test and see if it still works.

79
00:03:54.330 --> 00:03:57.240
And yes, everything still works.

80
00:03:57.240 --> 00:03:58.750
This idea of test driven development.

81
00:03:58.750 --> 00:04:00.480
We could refactor our code

82
00:04:00.480 --> 00:04:02.330
and with a different implementation

83
00:04:02.330 --> 00:04:03.580
and all of our test still works.

84
00:04:03.580 --> 00:04:05.670
So we know that we're in good shape here,

85
00:04:05.670 --> 00:04:06.900
high level of confidence here

86
00:04:06.900 --> 00:04:09.160
that everything works as desired

87
00:04:09.160 --> 00:04:10.490
and we didn't break anything.

88
00:04:10.490 --> 00:04:11.600
So this is a good thing.

89
00:04:11.600 --> 00:04:13.300
So again, giving you the freedom here ,

90
00:04:13.300 --> 00:04:15.700
to refactor your code.

91
00:04:15.700 --> 00:04:16.690
I love it.

92
00:04:16.690 --> 00:04:17.523
Good job.

