WEBVTT
1
00:00:01.250 --> 00:00:02.083
In this video,

2
00:00:02.083 --> 00:00:04.022
we'll cover Parameterized Tests.

3
00:00:08.360 --> 00:00:10.010
At the moment, we've created tests

4
00:00:10.010 --> 00:00:12.800
for specific Fizz Buzz Input Values.

5
00:00:12.800 --> 00:00:15.770
But I'd like to pass in a collection of values

6
00:00:15.770 --> 00:00:18.900
and expected results and run the same test

7
00:00:18.900 --> 00:00:19.890
in a loop.

8
00:00:19.890 --> 00:00:20.890
Over on the left-hand side,

9
00:00:20.890 --> 00:00:22.380
I have a list of values

10
00:00:22.380 --> 00:00:24.050
and I want to pass all those values

11
00:00:24.050 --> 00:00:26.793
into the Fizz Buzz test and run it in a loop.

12
00:00:30.560 --> 00:00:33.010
Here's one possible solution.

13
00:00:33.010 --> 00:00:34.200
We can set up a test

14
00:00:34.200 --> 00:00:36.763
and we simply define the values in an array.

15
00:00:38.480 --> 00:00:40.960
Over on the right-hand side, I have the data

16
00:00:40.960 --> 00:00:42.440
and over on the left hand-side,

17
00:00:42.440 --> 00:00:44.270
I'll set up this string array.

18
00:00:44.270 --> 00:00:46.280
So I'll pass in an actual value

19
00:00:46.280 --> 00:00:47.903
and the expected result.

20
00:00:49.670 --> 00:00:51.120
And I'll just repeat the process

21
00:00:51.120 --> 00:00:52.833
for the other lines of data.

22
00:01:02.180 --> 00:01:04.410
And then I'll simply just set up a for loop

23
00:01:06.200 --> 00:01:09.033
and for the value it's data sub i, sub 0.

24
00:01:11.330 --> 00:01:13.320
And then for the actual expected value,

25
00:01:13.320 --> 00:01:16.030
it's going to be data sub i, sub 1.

26
00:01:16.030 --> 00:01:18.500
We're basically just reading the data here.

27
00:01:18.500 --> 00:01:19.633
And now that we have this data,

28
00:01:19.633 --> 00:01:21.690
then we can go ahead and perform our asserts

29
00:01:21.690 --> 00:01:24.780
on assertEquals and in FizzBuzz.compute

30
00:01:24.780 --> 00:01:27.210
Integer.parseInt value.

31
00:01:27.210 --> 00:01:28.990
I need to do the parseInt on the value

32
00:01:28.990 --> 00:01:31.250
because the value's a string

33
00:01:31.250 --> 00:01:33.950
but the actual method expects a integer.

34
00:01:33.950 --> 00:01:35.850
So I need to do that conversion there.

35
00:01:36.950 --> 00:01:38.000
And then I can run the test

36
00:01:38.000 --> 00:01:40.523
and I can see the actual test results.

37
00:01:43.350 --> 00:01:46.230
But wait. JUnit to the rescue.

38
00:01:46.230 --> 00:01:48.830
JUnit actually provides a parameterized test.

39
00:01:48.830 --> 00:01:51.600
It allows us to run a test multiple times

40
00:01:51.600 --> 00:01:55.210
and provide different parameter values.

41
00:01:55.210 --> 00:01:56.550
I can take that data that I have

42
00:01:56.550 --> 00:01:57.587
on the left hand side

43
00:01:57.587 --> 00:01:59.260
and I can pass all that data

44
00:01:59.260 --> 00:02:02.220
into the Fizz Buzz test and behind the scenes,

45
00:02:02.220 --> 00:02:04.740
JUnit will run the test multiple times

46
00:02:04.740 --> 00:02:07.250
and supply the data as parameters.

47
00:02:07.250 --> 00:02:09.699
And Junit will do all of the looping work

48
00:02:09.699 --> 00:02:11.760
for you in the background.

49
00:02:11.760 --> 00:02:13.643
Hmm, I like that. Pretty cool.

50
00:02:16.450 --> 00:02:17.283
Now you may wonder

51
00:02:17.283 --> 00:02:19.140
what about the source of values?

52
00:02:19.140 --> 00:02:20.880
Like where can we get the values?

53
00:02:20.880 --> 00:02:22.240
Well, there are a number of annotations

54
00:02:22.240 --> 00:02:24.100
that you can make use of.

55
00:02:24.100 --> 00:02:25.990
You can use the annotation ValueSource.

56
00:02:25.990 --> 00:02:27.990
You simply pass in on array of values

57
00:02:27.990 --> 00:02:31.260
like strings, ints, doubles, floats, et cetera.

58
00:02:31.260 --> 00:02:33.210
You can also pass in a CsvSource.

59
00:02:33.210 --> 00:02:35.690
So an array of CSV string values

60
00:02:35.690 --> 00:02:38.963
and CSV stands for Comma Separated Value.

61
00:02:39.900 --> 00:02:42.480
We can also make use of a CSVFileSource.

62
00:02:42.480 --> 00:02:44.980
So effectively reading those CSV values

63
00:02:44.980 --> 00:02:46.630
from a file.

64
00:02:46.630 --> 00:02:48.360
We can also make use of Enums.

65
00:02:48.360 --> 00:02:50.850
So pass in enum constant values.

66
00:02:50.850 --> 00:02:52.210
And we can also use MethodSource

67
00:02:52.210 --> 00:02:54.610
so we can provide our own custom method

68
00:02:54.610 --> 00:02:56.100
for providing the values.

69
00:02:56.100 --> 00:02:57.733
So a lot of flexibility here.

70
00:03:00.940 --> 00:03:02.210
Let's take a look at an example here

71
00:03:02.210 --> 00:03:04.360
using CSV source.

72
00:03:04.360 --> 00:03:06.163
So I have my data over on the right.

73
00:03:08.610 --> 00:03:09.750
I'll set up my test.

74
00:03:09.750 --> 00:03:10.870
The one thing that's different here is

75
00:03:10.870 --> 00:03:12.960
that we make use of parameterized test

76
00:03:12.960 --> 00:03:14.733
instead of normal test.

77
00:03:18.090 --> 00:03:19.410
I'll set up the CSV source.

78
00:03:19.410 --> 00:03:21.840
So I basically pass in an array of data.

79
00:03:21.840 --> 00:03:24.630
In my example, the first item is the value.

80
00:03:24.630 --> 00:03:27.023
And the second item is the expected value.

81
00:03:29.150 --> 00:03:30.860
And then I'd simply repeat the process

82
00:03:30.860 --> 00:03:32.523
for all of the other values.

83
00:03:36.540 --> 00:03:38.170
And then I write my Test method.

84
00:03:38.170 --> 00:03:39.003
One thing to notice here is

85
00:03:39.003 --> 00:03:41.580
that the Test method now has parameters

86
00:03:41.580 --> 00:03:44.080
because we're making use of parameterized test

87
00:03:45.440 --> 00:03:46.520
and behind the scenes,

88
00:03:46.520 --> 00:03:48.690
JUnit's going to run the test multiple times

89
00:03:48.690 --> 00:03:51.220
and supply the data for the parameters

90
00:03:51.220 --> 00:03:53.253
and JUnit will do the looping for you.

91
00:03:54.240 --> 00:03:55.970
And now when I write my actual test body,

92
00:03:55.970 --> 00:03:58.340
all I have to do is simply give an assert equals.

93
00:03:58.340 --> 00:04:01.840
So assertEquals expected, FizzBuzz.compute

94
00:04:01.840 --> 00:04:03.860
and I pass in a value. And that's it.

95
00:04:03.860 --> 00:04:05.980
All of the looping happens in the background.

96
00:04:05.980 --> 00:04:07.170
And then over on the right hand side,

97
00:04:07.170 --> 00:04:09.450
we can see the actual test results here.

98
00:04:09.450 --> 00:04:11.100
So it'll show the actual index

99
00:04:11.100 --> 00:04:12.240
and then the first value

100
00:04:12.240 --> 00:04:14.603
and then the actual expected value.

101
00:04:17.820 --> 00:04:19.180
And we can actually customize

102
00:04:19.180 --> 00:04:21.072
how these invocations are displayed.

103
00:04:23.570 --> 00:04:25.670
In my code, when I set up the parameterized test

104
00:04:25.670 --> 00:04:27.030
I can actually give the name

105
00:04:27.030 --> 00:04:29.090
of that given invocation.

106
00:04:29.090 --> 00:04:30.890
Here, I'll say value equals.

107
00:04:30.890 --> 00:04:32.480
I use the curly brace and 0.

108
00:04:32.480 --> 00:04:35.880
That's index 0 expected equals curly brace 1.

109
00:04:35.880 --> 00:04:37.406
So that's basically the placeholders

110
00:04:37.406 --> 00:04:39.750
of the actual data that I'm reading in.

111
00:04:39.750 --> 00:04:41.130
So now when I run this,

112
00:04:41.130 --> 00:04:43.220
then for each one of those invocations

113
00:04:43.220 --> 00:04:45.300
we'll have our own custom name

114
00:04:45.300 --> 00:04:47.550
for that given invocation.

115
00:04:47.550 --> 00:04:49.070
Basically, as we loop through the data

116
00:04:49.070 --> 00:04:50.323
for each one of the test.

117
00:04:52.760 --> 00:04:54.910
Now let's take this and get rid

118
00:04:54.910 --> 00:04:57.430
of that hard coded data in our code.

119
00:04:57.430 --> 00:04:59.890
And now let's put it into a CSV file.

120
00:04:59.890 --> 00:05:01.040
I'll create this file here.

121
00:05:01.040 --> 00:05:04.780
Source test resources, small-test-data.CSV.

122
00:05:04.780 --> 00:05:07.640
You can give any name for the file that you like.

123
00:05:07.640 --> 00:05:09.960
I'll have the value, the expected

124
00:05:09.960 --> 00:05:12.160
and that's what works for our given example.

125
00:05:15.710 --> 00:05:16.930
And now I'll set up my test.

126
00:05:16.930 --> 00:05:18.160
Mostly everything is the same

127
00:05:18.160 --> 00:05:21.670
except for this one entry here, CSV files source

128
00:05:21.670 --> 00:05:24.730
and I give resources equal and I reference the actual file

129
00:05:26.480 --> 00:05:27.960
and it'll basically load that file,

130
00:05:27.960 --> 00:05:29.210
process it accordingly,

131
00:05:29.210 --> 00:05:31.330
just like we did in some of the previous examples

132
00:05:31.330 --> 00:05:32.730
and use the data and make use

133
00:05:32.730 --> 00:05:37.730
of the assertEquals expected, FizzBuzz.compute the value.

134
00:05:38.170 --> 00:05:39.140
Again behind the scenes,

135
00:05:39.140 --> 00:05:40.710
JUnit's going to read that data.

136
00:05:40.710 --> 00:05:43.240
It's going to call this test X number of times

137
00:05:43.240 --> 00:05:45.213
using the data from that CSV file.

138
00:05:46.150 --> 00:05:46.983
And then over on the right,

139
00:05:46.983 --> 00:05:48.610
we see the actual test results

140
00:05:48.610 --> 00:05:49.550
and everything passed.

141
00:05:49.550 --> 00:05:51.200
So this is pretty cool.

142
00:05:51.200 --> 00:05:53.270
And now this is just a small test CSV file.

143
00:05:53.270 --> 00:05:55.080
You can imagine having a much larger file

144
00:05:55.080 --> 00:05:57.630
of maybe 50 items or a 100 items

145
00:05:57.630 --> 00:05:59.450
and you can simply just pass in all that data,

146
00:05:59.450 --> 00:06:02.230
use the annotation and everything will execute.

147
00:06:02.230 --> 00:06:03.063
I like it.

148
00:06:05.410 --> 00:06:07.020
And if you'd like to get some more information,

149
00:06:07.020 --> 00:06:08.070
there are some additional features

150
00:06:08.070 --> 00:06:09.660
for parameterized test,

151
00:06:09.660 --> 00:06:12.220
such as MethodSource, Argument Aggregation,

152
00:06:12.220 --> 00:06:15.100
and so forth. Take a look at the JUnit user guide

153
00:06:15.100 --> 00:06:16.090
and then look at the section

154
00:06:16.090 --> 00:06:17.200
for Parameterized Test.

155
00:06:17.200 --> 00:06:18.480
They have a lot of good examples

156
00:06:18.480 --> 00:06:19.780
that you can read through.

157
00:06:20.910 --> 00:06:22.270
All right, well, I'm getting really excited

158
00:06:22.270 --> 00:06:23.870
about this. Let's go ahead and move

159
00:06:23.870 --> 00:06:24.703
into the next video

160
00:06:24.703 --> 00:06:26.423
and let's start writing some code.

