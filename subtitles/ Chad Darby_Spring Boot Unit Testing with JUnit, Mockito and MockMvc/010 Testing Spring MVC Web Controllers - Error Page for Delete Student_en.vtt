WEBVTT
1
00:00:00.884 --> 00:00:03.000
Now I like to write one more test

2
00:00:03.000 --> 00:00:04.480
to check for an error page.

3
00:00:04.480 --> 00:00:07.700
So in the event that I delete a student that doesn't exist,

4
00:00:07.700 --> 00:00:09.710
I should be sent to the error page.

5
00:00:09.710 --> 00:00:12.260
So let's go ahead and write the failing test first.

6
00:00:15.254 --> 00:00:18.370
So this is for deleting a student with the HTTP request

7
00:00:18.370 --> 00:00:20.270
for the error page.

8
00:00:20.270 --> 00:00:22.970
Again, we're going to delete a student who doesn't exist.

9
00:00:36.530 --> 00:00:41.243
I'll set up my mvcResult equals MockMvc.perform.

10
00:00:42.220 --> 00:00:46.460
Small typo here. Make sure I use mockMvc with a lowercase m.

11
00:00:46.460 --> 00:00:48.310
That's the field name.

12
00:00:48.310 --> 00:00:49.403
Alrighty, excellent.

13
00:00:50.598 --> 00:00:52.970
Okay, great, I'm back on track here.

14
00:00:52.970 --> 00:00:57.600
mockMvc.perform, I use the MvcRequestBuilders.

15
00:00:57.600 --> 00:00:59.233
I perform a get request.

16
00:01:02.495 --> 00:01:07.495
And I'll send that get request over to /delete/student/,

17
00:01:08.900 --> 00:01:11.300
the id is a path variable.

18
00:01:11.300 --> 00:01:13.560
And the actual id that I'll use here,

19
00:01:13.560 --> 00:01:16.530
I'll just give an id that I know that doesn't exist

20
00:01:16.530 --> 00:01:17.530
which is zero.

21
00:01:17.530 --> 00:01:20.660
Remember in our sample data, we have the id of one,

22
00:01:20.660 --> 00:01:22.230
but we don't have the id of zero,

23
00:01:22.230 --> 00:01:24.003
so this should give us an error.

24
00:01:30.104 --> 00:01:33.053
And here I'll say Expect, status isOk,

25
00:01:35.703 --> 00:01:37.807
and then I perform an andReturn.

26
00:01:41.449 --> 00:01:44.230
So when I perform this, the view name should be error.

27
00:01:44.230 --> 00:01:46.720
So let me go ahead and grab the ModelAndView

28
00:01:46.720 --> 00:01:49.123
by making use of mvcResult.getModelAndView,

29
00:01:50.070 --> 00:01:52.073
and then I can assert the view name,

30
00:01:55.250 --> 00:01:57.500
and I'll assert the view name as being error.

31
00:02:00.010 --> 00:02:01.440
Now, again, this is going to fail, right?

32
00:02:01.440 --> 00:02:02.830
We're writing a failing test first,

33
00:02:02.830 --> 00:02:04.723
but let's just go ahead and run the test.

34
00:02:13.052 --> 00:02:16.723
Okay, excellent, so this given test failed, as expected,

35
00:02:17.830 --> 00:02:20.470
and the view name is not equal to error but was index.

36
00:02:20.470 --> 00:02:22.433
All right, so we need to kind of fix this.

37
00:02:26.492 --> 00:02:28.200
So in our application code,

38
00:02:28.200 --> 00:02:29.720
when we actually delete a student,

39
00:02:29.720 --> 00:02:31.760
we need to make one small modification.

40
00:02:31.760 --> 00:02:34.880
So before actually attempting to delete a student,

41
00:02:34.880 --> 00:02:37.490
let's check to make sure that the student even exists

42
00:02:37.490 --> 00:02:39.140
before we attempt to delete them.

43
00:02:47.095 --> 00:02:49.010
In my code here, I make use of this if.

44
00:02:49.010 --> 00:02:54.010
I'll say if !studentService.checkIfStudentIsNull, the id,

45
00:02:54.760 --> 00:02:56.330
return error.

46
00:02:56.330 --> 00:02:58.120
Basically, I'm saying, "Hey, if I couldn't find

47
00:02:58.120 --> 00:03:00.240
the student in the database with that given id,

48
00:03:00.240 --> 00:03:01.683
then I'm going to return error.

49
00:03:04.680 --> 00:03:06.933
Now let's go ahead and run our test again.

50
00:03:13.180 --> 00:03:15.330
And success, this test passes.

51
00:03:15.330 --> 00:03:17.810
So we tried to delete a student that didn't exist,

52
00:03:17.810 --> 00:03:19.610
and it gave us the actual error page,

53
00:03:19.610 --> 00:03:21.483
so this is awesome, I like it.

54
00:03:25.551 --> 00:03:27.850
And now we can kind of pull this altogether

55
00:03:27.850 --> 00:03:29.170
by actually running our application

56
00:03:29.170 --> 00:03:31.170
and taking a look at the user interface.

57
00:03:32.170 --> 00:03:34.420
So let's go ahead and run our app real quick.

58
00:03:38.452 --> 00:03:39.980
And once the app is up and running,

59
00:03:39.980 --> 00:03:41.913
we'll go to localhost:1500,

60
00:03:43.702 --> 00:03:46.323
and we'll go and just add a student.

61
00:03:49.250 --> 00:03:52.313
So we've added Eric Roby, and let's go ahead and add Darby.

62
00:03:55.252 --> 00:03:57.952
And now let's go ahead and delete one of the students.

63
00:04:00.435 --> 00:04:02.460
Okay, great, so we've deleted Eric Roby,

64
00:04:02.460 --> 00:04:03.570
so that's successful.

65
00:04:03.570 --> 00:04:05.070
So we see the delete/student/1.

66
00:04:05.070 --> 00:04:06.403
That's awesome, I love it.

67
00:04:07.900 --> 00:04:09.390
All right, so this is really, really good.

68
00:04:09.390 --> 00:04:10.730
We're making good progress here.

69
00:04:10.730 --> 00:04:13.240
So we have code in place for deleting a student,

70
00:04:13.240 --> 00:04:15.310
and we can demonstrate this in our user interface,

71
00:04:15.310 --> 00:04:17.980
and we've also added features over time, right?

72
00:04:17.980 --> 00:04:19.570
We added features to add new students

73
00:04:19.570 --> 00:04:20.709
and also get a list of students.

74
00:04:20.709 --> 00:04:22.760
So this app is starting to come together,

75
00:04:22.760 --> 00:04:24.450
and we're adding new functionality,

76
00:04:24.450 --> 00:04:26.350
and we're doing it in the test-driven process,

77
00:04:26.350 --> 00:04:28.243
so I like this, I'm really happy.

