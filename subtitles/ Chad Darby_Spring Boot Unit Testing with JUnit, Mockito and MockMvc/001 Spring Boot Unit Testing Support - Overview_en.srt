1
00:00:01,140 --> 00:00:02,197
In this video, we'll cover

2
00:00:02,197 --> 00:00:04,707
"Spring Boot Support for Unit Testing."

3
00:00:07,380 --> 00:00:10,510
Now, what do you need for Spring Boot unit testing?

4
00:00:10,510 --> 00:00:13,890
Well, you need access to the Spring Application Context,

5
00:00:13,890 --> 00:00:17,020
you also need support for Spring dependency injection,

6
00:00:17,020 --> 00:00:19,050
you also may need to retrieve data

7
00:00:19,050 --> 00:00:21,950
from the Spring application.properties file.

8
00:00:21,950 --> 00:00:24,070
And you'd also like mock object support

9
00:00:24,070 --> 00:00:27,493
for web, data, REST APIs, and so on.

10
00:00:30,650 --> 00:00:33,960
Well, Spring Boot provides rich testing support,

11
00:00:33,960 --> 00:00:37,570
Spring Boot provides a sanitation Spring Boot test,

12
00:00:37,570 --> 00:00:40,770
the sanitation loads the Spring application context,

13
00:00:40,770 --> 00:00:43,740
it also has support for Spring dependency injection,

14
00:00:43,740 --> 00:00:45,360
and you can also access data

15
00:00:45,360 --> 00:00:48,230
from your Spring application.properties file,

16
00:00:48,230 --> 00:00:49,430
and many more features.

17
00:00:49,430 --> 00:00:52,380
And I'll show you some of the key items here in this video.

18
00:00:55,950 --> 00:00:57,830
Let's take a look at the Spring Boot starter

19
00:00:57,830 --> 00:00:59,023
for testing support.

20
00:01:00,440 --> 00:01:02,530
In our Maven pom.xml file,

21
00:01:02,530 --> 00:01:05,060
we add the Spring Boot starter test.

22
00:01:05,060 --> 00:01:06,620
Now, a really nice thing about this starter

23
00:01:06,620 --> 00:01:10,140
is that it includes a transitive dependency on JUnit 5.

24
00:01:10,140 --> 00:01:12,340
So that means we get JUnit 5 for free

25
00:01:12,340 --> 00:01:14,440
without having to explicitly list it here.

26
00:01:18,240 --> 00:01:20,160
Now, a bit more here on the transitive dependency.

27
00:01:20,160 --> 00:01:21,510
So we can actually verify this.

28
00:01:21,510 --> 00:01:22,780
So in our IntelliJ,

29
00:01:22,780 --> 00:01:25,210
we can look at the Maven dependencies,

30
00:01:25,210 --> 00:01:26,440
and we can expand the item here

31
00:01:26,440 --> 00:01:28,320
for a Spring Boot starter test,

32
00:01:28,320 --> 00:01:29,690
and we can move down a bit,

33
00:01:29,690 --> 00:01:31,260
and we can see that there's a reference here

34
00:01:31,260 --> 00:01:34,610
for org.junit.jupiter, so that's JUnit 5.

35
00:01:34,610 --> 00:01:37,900
So again, we get this transitive dependency for free.

36
00:01:37,900 --> 00:01:39,320
We don't have to explicitly list it.

37
00:01:39,320 --> 00:01:41,733
It's part of the Spring Boot starter test.

38
00:01:44,180 --> 00:01:45,800
And if you're not using an IDE,

39
00:01:45,800 --> 00:01:48,140
you can also verify this at the command line.

40
00:01:48,140 --> 00:01:50,670
So simply type mvn dependency:tree,

41
00:01:50,670 --> 00:01:51,503
it'll give you a list

42
00:01:51,503 --> 00:01:53,430
of all the dependencies for your project,

43
00:01:53,430 --> 00:01:54,860
and then you can kind of scroll down

44
00:01:54,860 --> 00:01:55,980
and pick out the reference here

45
00:01:55,980 --> 00:01:57,870
for Spring Boot starter test,

46
00:01:57,870 --> 00:02:00,350
and you'll see a reference here for org.junit.jupiter,

47
00:02:00,350 --> 00:02:03,163
again, JUnit 5 support that we get for free.

48
00:02:06,040 --> 00:02:08,120
Let's take a look at an example.

49
00:02:08,120 --> 00:02:12,460
On our test class, we simply annotated as Spring Boot test,

50
00:02:12,460 --> 00:02:14,660
and then we can write our normal JUnit test.

51
00:02:15,510 --> 00:02:17,250
Now here, the Spring Boot test,

52
00:02:17,250 --> 00:02:18,740
behind the scenes it'll actually load

53
00:02:18,740 --> 00:02:20,693
the Spring application context.

54
00:02:23,550 --> 00:02:25,570
And then once the application context is loaded,

55
00:02:25,570 --> 00:02:27,850
then we can actually inject some Spring beans.

56
00:02:27,850 --> 00:02:30,520
So say for example we have this student-grades component,

57
00:02:30,520 --> 00:02:31,693
it's a Spring bean,

58
00:02:33,960 --> 00:02:36,880
and then in my test, I can simply inject that component.

59
00:02:36,880 --> 00:02:39,350
So here I have auto wired student grades,

60
00:02:39,350 --> 00:02:40,800
and I give a reference to it.

61
00:02:41,660 --> 00:02:43,600
And so now that it's injected or auto wired,

62
00:02:43,600 --> 00:02:45,750
we can use that component in our unit test.

63
00:02:48,920 --> 00:02:50,490
Let's take a little look at another example here

64
00:02:50,490 --> 00:02:53,293
of accessing the Spring application properties.

65
00:02:54,660 --> 00:02:56,970
So we have our application.properties file,

66
00:02:56,970 --> 00:02:59,170
all of our different name-value pairs there,

67
00:03:00,370 --> 00:03:02,820
and then we can simply reference those properties

68
00:03:02,820 --> 00:03:04,640
by making use of add value.

69
00:03:04,640 --> 00:03:05,730
And you simply give the name

70
00:03:05,730 --> 00:03:07,470
of the property that you want to access.

71
00:03:07,470 --> 00:03:10,110
So again, very similar to normal Spring coding,

72
00:03:10,110 --> 00:03:11,910
we're simply doing this inside of a unit test.

73
00:03:11,910 --> 00:03:13,560
And we can use these values

74
00:03:13,560 --> 00:03:14,960
later on in our actual unit test

75
00:03:14,960 --> 00:03:17,323
to perform some asserts or so on.

76
00:03:20,813 --> 00:03:22,060
And now you may have a scenario

77
00:03:22,060 --> 00:03:23,230
where you actually want to

78
00:03:23,230 --> 00:03:25,870
access the Application Context directly,

79
00:03:25,870 --> 00:03:27,830
and then do some get beans and so on.

80
00:03:27,830 --> 00:03:29,410
Well, you can simply just auto wire

81
00:03:29,410 --> 00:03:31,070
in that Application Context,

82
00:03:31,070 --> 00:03:33,620
you can reference it and use it in your JUnit test.

83
00:03:36,750 --> 00:03:39,640
Let's discuss Spring test configuration.

84
00:03:39,640 --> 00:03:42,120
If we follow the approach of placing our test class

85
00:03:42,120 --> 00:03:44,250
in a test package that has the same name

86
00:03:44,250 --> 00:03:45,540
as our main package,

87
00:03:45,540 --> 00:03:47,050
then everything's a, okay.

88
00:03:47,050 --> 00:03:48,870
So if those package names match up,

89
00:03:48,870 --> 00:03:51,170
then this will implicitly define the base search,

90
00:03:51,170 --> 00:03:53,830
and we can leverage some default configuration here.

91
00:03:53,830 --> 00:03:55,420
So there's no need to explicitly reference

92
00:03:55,420 --> 00:03:57,460
the main Spring Boot application class,

93
00:03:57,460 --> 00:03:59,053
it'll find it automatically.

94
00:04:03,600 --> 00:04:04,870
As an example, here we have

95
00:04:04,870 --> 00:04:07,380
our main Spring Boot application class.

96
00:04:07,380 --> 00:04:08,213
And as you know,

97
00:04:08,213 --> 00:04:10,893
it automatically component scans all the sub-packages.

98
00:04:12,710 --> 00:04:15,540
And notice here on our test and our main,

99
00:04:15,540 --> 00:04:17,260
both of those package names are the same.

100
00:04:17,260 --> 00:04:19,930
So no additional configurations required.

101
00:04:19,930 --> 00:04:22,830
Our Spring Boot test will find the main Spring Boot class,

102
00:04:22,830 --> 00:04:24,590
and automatically do the scanning and so on.

103
00:04:24,590 --> 00:04:26,750
So everything is ready to go out of the box.

104
00:04:26,750 --> 00:04:28,053
This is the easy case.

105
00:04:32,180 --> 00:04:33,680
The default configuration is fine

106
00:04:33,680 --> 00:04:37,190
if everything is under com.luv2code.component.

107
00:04:37,190 --> 00:04:38,900
But, what if the test class

108
00:04:38,900 --> 00:04:43,150
is in a different package like com.luv2code.test.

109
00:04:43,150 --> 00:04:44,720
So in this diagram here,

110
00:04:44,720 --> 00:04:48,800
we have our main package, com.luv2code.component,

111
00:04:48,800 --> 00:04:52,760
but our test package is called com.luv2code.test.

112
00:04:52,760 --> 00:04:53,593
Ooh.

113
00:04:54,800 --> 00:04:55,900
So in this scenario,

114
00:04:55,900 --> 00:04:57,677
we have to do some additional configuration here,

115
00:04:57,677 --> 00:04:59,620
and we have to explicitly reference

116
00:04:59,620 --> 00:05:01,630
the main Spring Boot class.

117
00:05:01,630 --> 00:05:03,660
So in that Spring Boot test annotation,

118
00:05:03,660 --> 00:05:05,490
we need to say class is equal,

119
00:05:05,490 --> 00:05:09,260
and you give a reference to the main Spring Boot class,

120
00:05:09,260 --> 00:05:11,613
and then everything else will work as desired.

121
00:05:15,120 --> 00:05:16,720
So let's discuss our sample project.

122
00:05:16,720 --> 00:05:18,370
We have a student grading system,

123
00:05:18,370 --> 00:05:20,730
this code was created by our previous employee.

124
00:05:20,730 --> 00:05:24,410
The code doesn't have any test, gasp, yikes!

125
00:05:24,410 --> 00:05:28,120
And we've been tasked with developing the unit tests.

126
00:05:28,120 --> 00:05:30,740
So I like to say, "Yay! We're excited."

127
00:05:30,740 --> 00:05:32,830
We have an existing code base already,

128
00:05:32,830 --> 00:05:35,720
for models, they have a college student, student interface,

129
00:05:35,720 --> 00:05:39,510
student grades, MVC testing example application,

130
00:05:39,510 --> 00:05:40,370
but no test code.

131
00:05:40,370 --> 00:05:43,440
So we're going to code to perform the unit testing

132
00:05:43,440 --> 00:05:45,080
for this example.

133
00:05:45,080 --> 00:05:46,010
All right, so I'm excited.

134
00:05:46,010 --> 00:05:47,480
Let's go ahead and dive into the next video

135
00:05:47,480 --> 00:05:49,623
and let's get started.

