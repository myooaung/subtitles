WEBVTT
1
00:00:01.050 --> 00:00:02.100
And this video we'll cover

2
00:00:02.100 --> 00:00:03.523
test-driven development.

3
00:00:06.670 --> 00:00:09.740
Now with traditional development we have the basic process.

4
00:00:09.740 --> 00:00:11.920
We design our application first,

5
00:00:11.920 --> 00:00:13.980
then we'd write the code for our app,

6
00:00:13.980 --> 00:00:16.200
and then finally, we would test the application

7
00:00:16.200 --> 00:00:17.160
at the end.

8
00:00:17.160 --> 00:00:18.900
And I kind of chuckle here,

9
00:00:18.900 --> 00:00:22.210
the testing part doesn't always happen, right?

10
00:00:22.210 --> 00:00:24.323
You may only test as needed.

11
00:00:27.050 --> 00:00:28.630
But with test-driven development,

12
00:00:28.630 --> 00:00:30.030
we kind of flip it on this head,

13
00:00:30.030 --> 00:00:31.390
we kind of flip the script here.

14
00:00:31.390 --> 00:00:33.423
And so we actually start with testing.

15
00:00:35.540 --> 00:00:37.000
So up top with test-driven development

16
00:00:37.000 --> 00:00:40.460
we start by writing a failing test.

17
00:00:40.460 --> 00:00:42.453
So the test is broken, it fails,

18
00:00:43.290 --> 00:00:47.300
and then we'll actually write code to make the test pass.

19
00:00:47.300 --> 00:00:49.260
All right, so start with the failing test

20
00:00:49.260 --> 00:00:52.320
and then we write code to make the test pass.

21
00:00:52.320 --> 00:00:54.360
And then we can actually refactor our code

22
00:00:54.360 --> 00:00:55.980
and kind of improve on the design,

23
00:00:55.980 --> 00:00:58.010
do some fine tweaking and so forth,

24
00:00:58.010 --> 00:00:59.160
and that's the idea.

25
00:00:59.160 --> 00:01:00.780
And then this is a continuous loop.

26
00:01:00.780 --> 00:01:02.740
So now for the next item here,

27
00:01:02.740 --> 00:01:04.540
we actually go back and with test,

28
00:01:04.540 --> 00:01:06.130
we simply repeat the process.

29
00:01:06.130 --> 00:01:08.350
So we write another failing test

30
00:01:08.350 --> 00:01:10.230
and we code, refactor and so on.

31
00:01:10.230 --> 00:01:12.250
So that's our continuous rhythm here

32
00:01:12.250 --> 00:01:14.670
as far as making use of test-driven development.

33
00:01:14.670 --> 00:01:18.243
And the key again, starting with a failing test first.

34
00:01:21.500 --> 00:01:22.520
Now you may wonder,

35
00:01:22.520 --> 00:01:25.210
well, what are the benefits of test-driven development?

36
00:01:25.210 --> 00:01:27.500
Well, it gives you a clear task list of things

37
00:01:27.500 --> 00:01:29.170
that you need to test and develop.

38
00:01:29.170 --> 00:01:31.270
So it's kind of like your to-do list.

39
00:01:31.270 --> 00:01:34.060
And also these tests will help you identify edge cases

40
00:01:34.060 --> 00:01:35.570
and tests for them.

41
00:01:35.570 --> 00:01:38.840
You can also develop your code in small increments.

42
00:01:38.840 --> 00:01:42.410
And then also passing tests increases confidence

43
00:01:42.410 --> 00:01:43.720
in your code.

44
00:01:43.720 --> 00:01:46.010
And also as you're kind of working through this task list

45
00:01:46.010 --> 00:01:48.010
or test list, you're like, okay, great,

46
00:01:48.010 --> 00:01:49.910
I've actually accomplished some work here.

47
00:01:49.910 --> 00:01:51.520
I can see code passing.

48
00:01:51.520 --> 00:01:53.250
I see these green check marks

49
00:01:53.250 --> 00:01:55.100
and just kind of makes you feel better

50
00:01:55.100 --> 00:01:57.920
about your actual development process.

51
00:01:57.920 --> 00:01:59.160
And then also the really nice thing

52
00:01:59.160 --> 00:02:00.960
about test-driven development is that,

53
00:02:00.960 --> 00:02:03.370
it gives you freedom to refactor,

54
00:02:03.370 --> 00:02:05.500
the tests are your safety net.

55
00:02:05.500 --> 00:02:08.320
Sometimes when you go and modify your code in the pass,

56
00:02:08.320 --> 00:02:12.220
you'd say, hey, I changed this, but did I break anything?

57
00:02:12.220 --> 00:02:15.320
Well, you can simply run your suite of test again,

58
00:02:15.320 --> 00:02:17.100
and if all your tests pass then,

59
00:02:17.100 --> 00:02:19.210
you have a high level of confidence that, hey,

60
00:02:19.210 --> 00:02:22.280
the code that you changed didn't break anything.

61
00:02:22.280 --> 00:02:23.530
Assuming that the section of code

62
00:02:23.530 --> 00:02:26.090
that you changed have test in place for it.

63
00:02:26.090 --> 00:02:28.870
So again, make some changes, run your test again,

64
00:02:28.870 --> 00:02:31.080
if you get all green on the test, then you have a high level

65
00:02:31.080 --> 00:02:33.603
of confidence here that everything is okay.

66
00:02:37.080 --> 00:02:38.530
All right, so let's look at our project.

67
00:02:38.530 --> 00:02:40.140
We'll actually apply what we've learned

68
00:02:40.140 --> 00:02:44.490
so far for a TDD project, and we'll use the FizzBuzz project

69
00:02:44.490 --> 00:02:45.713
as an example.

70
00:02:48.620 --> 00:02:49.490
What is FizzBuzz?

71
00:02:49.490 --> 00:02:51.360
Well, FizzBuzz is a coding problem

72
00:02:51.360 --> 00:02:53.420
that's used in some technical interviews.

73
00:02:53.420 --> 00:02:54.880
And here's the basic problem.

74
00:02:54.880 --> 00:02:56.150
They'll say, hey, write a program

75
00:02:56.150 --> 00:02:58.300
to print the first 100 FizzBuzz numbers.

76
00:02:58.300 --> 00:03:00.593
Start at one and end at 100.

77
00:03:01.490 --> 00:03:05.000
So if a number is divisible by three, then we'll print Fizz.

78
00:03:05.000 --> 00:03:08.610
If the number is divisible by five, we'll print Buzz.

79
00:03:08.610 --> 00:03:11.050
If the number is divisible by three and five,

80
00:03:11.050 --> 00:03:13.360
we'll print FizzBuzz.

81
00:03:13.360 --> 00:03:16.670
And finally, if the number is not divisible by three or five

82
00:03:16.670 --> 00:03:18.323
then you simply print the number.

83
00:03:22.270 --> 00:03:24.050
Now let's take these rules or specs here

84
00:03:24.050 --> 00:03:25.430
and look at some sample outputs.

85
00:03:25.430 --> 00:03:26.950
So the specs on the left,

86
00:03:26.950 --> 00:03:28.710
here's some sample output on the right.

87
00:03:28.710 --> 00:03:30.670
So for the number one, we'll print one

88
00:03:30.670 --> 00:03:33.600
because it's not divisible by three or five.

89
00:03:33.600 --> 00:03:35.400
For the number two, we'll simply print two,

90
00:03:35.400 --> 00:03:38.020
again, not divisible by three or five.

91
00:03:38.020 --> 00:03:39.640
For the number three we'll print Fizz

92
00:03:39.640 --> 00:03:41.913
because that number's divisible by three.

93
00:03:43.216 --> 00:03:45.510
For the number four, not divisible by three or five,

94
00:03:45.510 --> 00:03:46.810
simply print the number.

95
00:03:46.810 --> 00:03:48.970
For five, we'll print Buzz

96
00:03:48.970 --> 00:03:51.890
because that number's divisible by five.

97
00:03:51.890 --> 00:03:53.320
For six we'll print Fizz,

98
00:03:53.320 --> 00:03:56.120
because that number's divisible by three.

99
00:03:56.120 --> 00:03:58.290
Seven, not divisible by three or five

100
00:03:58.290 --> 00:04:00.320
so we simply print the number and so on.

101
00:04:00.320 --> 00:04:02.950
So you kind of get the idea as far as how to get

102
00:04:02.950 --> 00:04:03.990
the FizzBuzz numbers.

103
00:04:03.990 --> 00:04:05.760
And again, you simply apply those specs

104
00:04:05.760 --> 00:04:08.380
or apply those rules to find out how to get

105
00:04:08.380 --> 00:04:10.673
the appropriate number here for FizzBuzz.

106
00:04:13.962 --> 00:04:17.579
Now, this as FizzBuzz example, it kind of went viral,

107
00:04:17.579 --> 00:04:18.660
kind of took off.

108
00:04:18.660 --> 00:04:20.200
There's a lot of documentation

109
00:04:20.200 --> 00:04:21.519
and discussion about it on the web,

110
00:04:21.519 --> 00:04:24.330
so there's FizzBuzz Wiki at the link I have here

111
00:04:24.330 --> 00:04:25.200
on the slide.

112
00:04:25.200 --> 00:04:27.560
It has solutions in various programming languages

113
00:04:27.560 --> 00:04:32.160
like Python, Go, R, Java, C-Sharp and so on.

114
00:04:32.160 --> 00:04:33.970
You can see some basic solutions.

115
00:04:33.970 --> 00:04:35.790
You can also find some advanced solutions.

116
00:04:35.790 --> 00:04:38.250
So people took this example and said,

117
00:04:38.250 --> 00:04:41.300
hey, I can solve FizzBuzz in five lines,

118
00:04:41.300 --> 00:04:44.160
or, hey, I can write some Python code

119
00:04:44.160 --> 00:04:46.150
and solve it in three lines,

120
00:04:46.150 --> 00:04:48.270
or, I can write this bash script

121
00:04:48.270 --> 00:04:49.910
and solve it in one line of code.

122
00:04:49.910 --> 00:04:52.950
So, folks really had a lot of, (chuckles) extra time

123
00:04:52.950 --> 00:04:54.500
in their hands or free time in their hands

124
00:04:54.500 --> 00:04:56.650
and it turned into like a coding challenge.

125
00:04:56.650 --> 00:04:58.890
So definitely check that link there for some

126
00:04:58.890 --> 00:05:01.130
of those different solutions out there.

127
00:05:01.130 --> 00:05:02.650
And then if the Wiki is not enough,

128
00:05:02.650 --> 00:05:06.190
well, there's actually a FizzBuzz book.

129
00:05:06.190 --> 00:05:09.120
Yes, someone actually wrote a book on FizzBuzz.

130
00:05:09.120 --> 00:05:10.870
So there's a number of chapters that discuss

131
00:05:10.870 --> 00:05:13.120
all the different solutions that are available,

132
00:05:13.120 --> 00:05:16.180
the different approaches, algorithms, and so on.

133
00:05:16.180 --> 00:05:18.110
So if you'd like to take a look at that,

134
00:05:18.110 --> 00:05:20.950
you can look at fizzbuzzbook.com.

135
00:05:20.950 --> 00:05:22.403
Fun stuff, fun stuff.

136
00:05:25.762 --> 00:05:26.595
All right.

137
00:05:26.595 --> 00:05:28.570
So let's look at applying TDD for our project here.

138
00:05:28.570 --> 00:05:30.210
So our development process,

139
00:05:30.210 --> 00:05:32.130
we'll first write a failing test,

140
00:05:32.130 --> 00:05:35.010
and then we'll write code to make the test pass,

141
00:05:35.010 --> 00:05:37.180
we'll also refactor the code as needed,

142
00:05:37.180 --> 00:05:38.840
and then we'll repeat the process

143
00:05:38.840 --> 00:05:41.790
as we go through this given project.

144
00:05:41.790 --> 00:05:42.920
Okay, this looks really good.

145
00:05:42.920 --> 00:05:44.700
I'm excited, let's go ahead and dive

146
00:05:44.700 --> 00:05:47.453
into the next video and let's start adding some code.

