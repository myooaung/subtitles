1
00:00:01,040 --> 00:00:02,090
All righty, we'll get started

2
00:00:02,090 --> 00:00:04,203
by creating some parameterized tests.

3
00:00:07,900 --> 00:00:10,770
And the one thing that we'll do is we'll create a CSV file

4
00:00:10,770 --> 00:00:12,713
that'll actually hold our data for us.

5
00:00:17,120 --> 00:00:18,360
I'll move into our test section

6
00:00:18,360 --> 00:00:20,013
and I'll create a new directory.

7
00:00:24,510 --> 00:00:26,913
The name of the directory is resources.

8
00:00:33,700 --> 00:00:35,230
And then in this resources directory,

9
00:00:35,230 --> 00:00:36,463
I'll create a new file.

10
00:00:42,600 --> 00:00:45,813
I'll give the name, small-test-data.csv.

11
00:00:55,220 --> 00:00:57,640
Now let's go ahead and add data into this CSV file.

12
00:00:57,640 --> 00:01:00,190
So we'll basically make use of that sample data that we have

13
00:01:00,190 --> 00:01:01,180
over on the far right,

14
00:01:01,180 --> 00:01:02,460
and we'll just enter the data right here.

15
00:01:02,460 --> 00:01:06,493
So we'll have the value and the expected value.

16
00:01:18,946 --> 00:01:20,210
And I'll go a little bit further than seven,

17
00:01:20,210 --> 00:01:22,773
I'll actually make it all the way up to 15.

18
00:01:27,014 --> 00:01:28,700
And don't worry if you make a mistake in this file,

19
00:01:28,700 --> 00:01:31,280
our test will actually catch it if we do make a mistake.

20
00:01:31,280 --> 00:01:33,883
So don't worry. (chuckles)

21
00:01:42,780 --> 00:01:44,903
Okay, so this file looks good.

22
00:01:49,280 --> 00:01:50,483
Now let's go ahead and add a new test

23
00:01:50,483 --> 00:01:52,873
that'll actually make use of this CSV file.

24
00:02:08,199 --> 00:02:09,539
I'll update the display name

25
00:02:09,539 --> 00:02:12,363
to say testing with small data file.

26
00:02:20,415 --> 00:02:23,915
Update the order and also the method name.

27
00:02:30,810 --> 00:02:33,120
And remember, since this is going to be a parameterized test,

28
00:02:33,120 --> 00:02:36,920
we have to replace test with parameterized test

29
00:02:36,920 --> 00:02:38,720
because we're going to pass in some parameters

30
00:02:38,720 --> 00:02:39,953
to this given test.

31
00:02:46,523 --> 00:02:48,200
And I'll also set up the actual names,

32
00:02:48,200 --> 00:02:49,480
the actual display that we'll see

33
00:02:49,480 --> 00:02:51,920
for each one of the invocations.

34
00:02:51,920 --> 00:02:55,400
So I use value equals curly brace zero,

35
00:02:55,400 --> 00:02:57,840
expected equals curly brace one.

36
00:02:57,840 --> 00:03:01,773
So the zero index and the first index.

37
00:03:05,080 --> 00:03:07,730
And then I'll also reference the actual CSV file

38
00:03:07,730 --> 00:03:08,763
that I want to use.

39
00:03:16,470 --> 00:03:18,554
And we'll reference that small-test-data.csv file

40
00:03:18,554 --> 00:03:20,173
that we just created.

41
00:03:26,430 --> 00:03:27,980
I'll just clean this method up.

42
00:03:31,720 --> 00:03:34,400
I'll go ahead and define some method parameters.

43
00:03:34,400 --> 00:03:37,523
So value expected.

44
00:03:45,830 --> 00:03:49,623
I'll perform an assert equals, I'll say expected comma.

45
00:03:51,460 --> 00:03:53,763
And then I use that FizzBuzz.compute,

46
00:03:54,900 --> 00:03:56,563
and I pass in the value.

47
00:04:05,300 --> 00:04:06,600
And remember behind the scenes,

48
00:04:06,600 --> 00:04:08,660
JUnit will actually call this test

49
00:04:08,660 --> 00:04:10,660
multiple times using data,

50
00:04:10,660 --> 00:04:12,841
we're providing data from the CSV file source,

51
00:04:12,841 --> 00:04:15,070
and then we'll get the results

52
00:04:15,070 --> 00:04:18,260
and it'll be part of our actual unit test results.

53
00:04:18,260 --> 00:04:20,700
And also JUnit handles all the looping work

54
00:04:20,700 --> 00:04:22,373
for you in the background.

55
00:04:25,830 --> 00:04:28,130
All right, so let's go ahead and run our test.

56
00:04:32,710 --> 00:04:34,140
Looking at the results, and great.

57
00:04:34,140 --> 00:04:36,370
So testing with small data file,

58
00:04:36,370 --> 00:04:38,220
and then we see the actual entries

59
00:04:38,220 --> 00:04:40,240
for each one of those invocations

60
00:04:40,240 --> 00:04:42,730
and all this data passes just fine.

61
00:04:42,730 --> 00:04:43,943
So this is pretty good.

62
00:04:46,460 --> 00:04:48,010
And let's go ahead and just break it.

63
00:04:48,010 --> 00:04:49,430
So remember earlier I said, hey

64
00:04:49,430 --> 00:04:51,480
if you PA entered some bad data here,

65
00:04:51,480 --> 00:04:53,248
our test would catch it because we know

66
00:04:53,248 --> 00:04:57,070
that our FizzBuzz.compute method works, okay?

67
00:04:57,070 --> 00:04:59,100
But here, let's add some bad data.

68
00:04:59,100 --> 00:05:02,473
I'll say one is fizz and we know this should fail.

69
00:05:05,100 --> 00:05:06,460
When we run it, it does fail.

70
00:05:06,460 --> 00:05:08,480
And it tells us exactly why it fails.

71
00:05:08,480 --> 00:05:11,510
So expected fizz and the actual was one,

72
00:05:11,510 --> 00:05:14,263
but that's because we're passing in bad data.

73
00:05:18,580 --> 00:05:19,823
Go through and fix it,

74
00:05:25,010 --> 00:05:26,790
and then everything passes as desired.

75
00:05:26,790 --> 00:05:28,260
So anyway, good way of having

76
00:05:28,260 --> 00:05:29,570
some checks and balances in place.

77
00:05:29,570 --> 00:05:30,403
And this is really cool.

78
00:05:30,403 --> 00:05:33,220
So now we have a very basic CSV file.

79
00:05:33,220 --> 00:05:35,170
We can also pass in some much larger files

80
00:05:35,170 --> 00:05:36,090
and test those out

81
00:05:36,090 --> 00:05:37,880
and we'll let you do that in the next video.

82
00:05:37,880 --> 00:05:39,453
So, stay tuned.

