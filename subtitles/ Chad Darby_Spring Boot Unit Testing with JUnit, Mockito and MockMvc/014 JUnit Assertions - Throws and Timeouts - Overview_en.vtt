WEBVTT
1
00:00:01.130 --> 00:00:01.963
In this video,

2
00:00:01.963 --> 00:00:04.433
we'll cover assertions for throws and timeout.

3
00:00:07.910 --> 00:00:10.930
We can make use of the assertion, assertThrows.

4
00:00:10.930 --> 00:00:13.390
This assert will check to see that an executable

5
00:00:13.390 --> 00:00:16.463
throws an exception of a specified type.

6
00:00:21.070 --> 00:00:23.150
Here's the code that we want to test.

7
00:00:23.150 --> 00:00:26.210
In our DemoUtils class, we have this method,

8
00:00:26.210 --> 00:00:28.660
throwException, you pass in an integer,

9
00:00:28.660 --> 00:00:31.623
and if a is less than zero, it'll throw an exception.

10
00:00:32.570 --> 00:00:35.020
So basically, we want to verify that this method

11
00:00:35.020 --> 00:00:38.220
throws an exception for any value less than zero;

12
00:00:38.220 --> 00:00:40.043
basically, any negative number.

13
00:00:44.330 --> 00:00:47.620
We can move into our test class here, DemoUtilsTest.

14
00:00:47.620 --> 00:00:49.311
We'll add this new test method,

15
00:00:49.311 --> 00:00:51.478
testThrowsAndDoesNotThrow.

16
00:00:55.010 --> 00:00:57.810
We have this method, called here assertThrows,

17
00:00:57.810 --> 00:01:02.160
we give the Exception.class, that's what we're checking for,

18
00:01:02.160 --> 00:01:04.930
and then we give the actual executable our code.

19
00:01:04.930 --> 00:01:07.530
So instead of just a method by itself,

20
00:01:07.530 --> 00:01:10.630
we have to provide it as a Lambda expression.

21
00:01:10.630 --> 00:01:12.960
So we're basically kind of wrapping our method

22
00:01:12.960 --> 00:01:14.690
inside of curly braces,

23
00:01:14.690 --> 00:01:17.773
using the arrows here as a Lambda expression.

24
00:01:20.270 --> 00:01:21.460
And we'll make a call here,

25
00:01:21.460 --> 00:01:24.080
demoUtils.throwException -1,

26
00:01:24.080 --> 00:01:26.460
so for any negative value,

27
00:01:26.460 --> 00:01:28.653
that method should throw an exception.

28
00:01:31.100 --> 00:01:32.420
And then, we can do a similar thing here

29
00:01:32.420 --> 00:01:34.400
for assertDoesNotThrow.

30
00:01:34.400 --> 00:01:36.850
So again, we provide this Lambda expression,

31
00:01:36.850 --> 00:01:39.950
and then we have demoUtils.throwException,

32
00:01:39.950 --> 00:01:41.990
we pass in the number nine.

33
00:01:41.990 --> 00:01:43.500
So that's a positive value,

34
00:01:43.500 --> 00:01:45.470
it's greater than or equal to zero,

35
00:01:45.470 --> 00:01:48.293
and so here, this should not throw an exception.

36
00:01:51.110 --> 00:01:52.410
And when we run this test,

37
00:01:52.410 --> 00:01:55.240
then it'll pass with flying colors, all green.

38
00:01:55.240 --> 00:01:56.073
Good job!

39
00:02:03.440 --> 00:02:06.270
Let's take a look at another assertion here for timeouts.

40
00:02:06.270 --> 00:02:09.020
Here, we have assertTimeoutPreemptively.

41
00:02:09.020 --> 00:02:11.150
It'll assert that the executable completes

42
00:02:11.150 --> 00:02:13.943
before a given timeout is exceeded.

43
00:02:17.790 --> 00:02:19.610
Let's look at the code that we want to test.

44
00:02:19.610 --> 00:02:21.200
So in our DemoUtils class,

45
00:02:21.200 --> 00:02:23.790
we have this method called checkTimeout.

46
00:02:23.790 --> 00:02:25.460
Internally, in this method,

47
00:02:25.460 --> 00:02:28.330
we're going to sleep for two seconds.

48
00:02:28.330 --> 00:02:29.940
Basically, we want to check to make sure

49
00:02:29.940 --> 00:02:33.000
this method doesn't oversleep. (chuckles)

50
00:02:33.000 --> 00:02:35.180
I tend to oversleep sometimes;

51
00:02:35.180 --> 00:02:37.840
I think I need a unit test for myself.

52
00:02:37.840 --> 00:02:40.640
All right, back to the coding here, having too much fun.

53
00:02:43.945 --> 00:02:45.500
Moving back to our test class,

54
00:02:45.500 --> 00:02:47.873
we'll have this test method here called testTimeout.

55
00:02:50.074 --> 00:02:53.270
And then, I have assertTimeoutPreemtively,

56
00:02:53.270 --> 00:02:56.690
I give the timeout duration in seconds, so three seconds,

57
00:02:56.690 --> 00:03:00.700
I provide the Lambda expression demoUtils.checkTimeout,

58
00:03:00.700 --> 00:03:01.770
and then our message here,

59
00:03:01.770 --> 00:03:04.567
the "method should execute in three seconds."

60
00:03:07.280 --> 00:03:08.660
And then, once we run this unit test,

61
00:03:08.660 --> 00:03:11.270
then it passes with flying colors, all green.

62
00:03:11.270 --> 00:03:13.780
This looks really good; I like it.

63
00:03:13.780 --> 00:03:14.613
All right, let's go ahead

64
00:03:14.613 --> 00:03:15.970
and swing over into the next video,

65
00:03:15.970 --> 00:03:18.153
and let's start writing some code!

