WEBVTT
1
00:00:01.200 --> 00:00:02.820
Now what I'd like to do is actually

2
00:00:02.820 --> 00:00:06.470
move in here and actually break my test on purpose.

3
00:00:06.470 --> 00:00:09.710
Right now I have expected one for one student,

4
00:00:09.710 --> 00:00:11.700
but let's set the value to five.

5
00:00:11.700 --> 00:00:12.533
Say, we're trying to say,

6
00:00:12.533 --> 00:00:15.047
"Hey, maybe there's five students in the database."

7
00:00:17.220 --> 00:00:18.860
And now let's go ahead and run this test

8
00:00:18.860 --> 00:00:20.310
and see what the results are.

9
00:00:31.230 --> 00:00:33.220
And as expected, this test fails, right?

10
00:00:33.220 --> 00:00:35.560
Because we only have one student in database

11
00:00:35.560 --> 00:00:37.400
but here we're doing an insert for five.

12
00:00:37.400 --> 00:00:40.900
So we somehow need to add five students to the database

13
00:00:40.900 --> 00:00:42.393
for this given test.

14
00:00:45.950 --> 00:00:48.430
And you're thinking, well, maybe we can just do

15
00:00:48.430 --> 00:00:50.040
this setup sample data here,

16
00:00:50.040 --> 00:00:51.950
so I could just copy this line

17
00:00:51.950 --> 00:00:54.730
and then just go through and paste it X number of times.

18
00:00:54.730 --> 00:00:57.040
Well, we could do that, but you know,

19
00:00:57.040 --> 00:01:00.320
maybe for this given test, we want to seed different data

20
00:01:00.320 --> 00:01:03.200
and not use the same data every time.

21
00:01:03.200 --> 00:01:05.150
So, I'll let you kind of pull back on that

22
00:01:05.150 --> 00:01:07.650
and I'll just leave this setup database

23
00:01:07.650 --> 00:01:11.090
like I had it originally, you're just adding one student.

24
00:01:11.090 --> 00:01:16.090
And what I'd like to do is set up a SQL file

25
00:01:16.200 --> 00:01:17.760
that would have the data.

26
00:01:17.760 --> 00:01:21.320
So under my resources, I'm going to create this new file

27
00:01:21.320 --> 00:01:24.483
called insertData.sql.

28
00:01:36.456 --> 00:01:38.660
And so it's just a plain text file here, right?

29
00:01:38.660 --> 00:01:40.340
InsertData.sql,

30
00:01:40.340 --> 00:01:44.320
and I'll just drop in the SQL for adding these students.

31
00:01:44.320 --> 00:01:46.140
And what I'll do is I'll add some SQL

32
00:01:46.140 --> 00:01:48.813
for inserting four students.

33
00:01:49.820 --> 00:01:51.770
I'll start here with the us to entry here

34
00:01:51.770 --> 00:01:53.273
of insert into student.

35
00:02:05.660 --> 00:02:07.350
And I'll give the values for the ID,

36
00:02:07.350 --> 00:02:09.613
first name, last name and email address.

37
00:02:25.640 --> 00:02:27.460
Okay, this looks really good for the first entry.

38
00:02:27.460 --> 00:02:29.870
And so now we'll do this for a total of four students.

39
00:02:29.870 --> 00:02:32.020
So if you'd like you can kind of just copy paste,

40
00:02:32.020 --> 00:02:33.590
make some small mods.

41
00:02:33.590 --> 00:02:34.880
Here, I'll simply just type out

42
00:02:34.880 --> 00:02:36.220
the other three entries on this line.

43
00:02:36.220 --> 00:02:39.030
So, either way you can just type it out manually

44
00:02:39.030 --> 00:02:41.580
or you can do a copy paste, it's totally up to you.

45
00:03:25.020 --> 00:03:26.110
Now what we'll like to do is actually

46
00:03:26.110 --> 00:03:28.353
use this file in our test.

47
00:03:29.520 --> 00:03:32.930
I can move back over to my StudentAndGradeServiceTest

48
00:03:32.930 --> 00:03:35.590
and back down to the example

49
00:03:35.590 --> 00:03:38.360
where we had assert equals five.

50
00:03:38.360 --> 00:03:40.650
Right before the test annotation,

51
00:03:40.650 --> 00:03:43.510
I can add a new annotation for SQL

52
00:03:43.510 --> 00:03:47.923
to actually load and execute SQL for this given test.

53
00:03:51.060 --> 00:03:52.750
So I have the SQL annotation

54
00:03:52.750 --> 00:03:54.180
and give a reference to the file.

55
00:03:54.180 --> 00:03:57.410
That same file that I just created, insertData.sql.

56
00:03:57.410 --> 00:03:59.840
So this will actually execute the SQL

57
00:03:59.840 --> 00:04:01.993
before this given test method.

58
00:04:02.920 --> 00:04:05.217
Now you may wonder about, "Well, they they were four each,

59
00:04:05.217 --> 00:04:06.590
"which one will execute first."

60
00:04:06.590 --> 00:04:09.290
Well, the BeforeEach will execute first,

61
00:04:09.290 --> 00:04:13.393
then it'll execute the SQL annotation for this given method.

62
00:04:15.030 --> 00:04:16.920
Okay, so this looks pretty good.

63
00:04:16.920 --> 00:04:18.623
Now let's go ahead and execute it.

64
00:04:24.730 --> 00:04:26.620
Great, so this test passes because

65
00:04:26.620 --> 00:04:28.780
we have five students in our database.

66
00:04:28.780 --> 00:04:31.240
We get one student from the BeforeEach method

67
00:04:31.240 --> 00:04:34.260
and we get four students from the SQL annotation

68
00:04:34.260 --> 00:04:37.500
of loading that insertData.sql

69
00:04:37.500 --> 00:04:39.920
because in that file we added four students.

70
00:04:39.920 --> 00:04:42.290
And so that's why this given test passes for

71
00:04:42.290 --> 00:04:44.680
a total of five students.

72
00:04:44.680 --> 00:04:46.480
I love it, this is really cool.

73
00:04:46.480 --> 00:04:47.363
Good job.

