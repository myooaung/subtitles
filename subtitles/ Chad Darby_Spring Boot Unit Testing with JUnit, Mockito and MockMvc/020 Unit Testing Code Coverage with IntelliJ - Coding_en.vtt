WEBVTT
1
00:00:01.140 --> 00:00:02.540
Okay, so let's get started here.

2
00:00:02.540 --> 00:00:04.540
We'll look at how we can make use of code coverage

3
00:00:04.540 --> 00:00:06.393
and test reports with IntelliJ.

4
00:00:11.380 --> 00:00:14.473
So let's go ahead and run our test with code coverage.

5
00:00:17.380 --> 00:00:18.530
So up in the top right,

6
00:00:18.530 --> 00:00:20.370
we select the menu option here,

7
00:00:20.370 --> 00:00:22.823
run DemoUtilsTest with coverage.

8
00:00:28.640 --> 00:00:32.000
Once the tests are complete, it'll show the coverage report,

9
00:00:32.000 --> 00:00:33.973
expand this window here for a bit.

10
00:00:35.010 --> 00:00:36.903
So we see the actual package,

11
00:00:37.750 --> 00:00:40.720
the actual class and then the method,

12
00:00:40.720 --> 00:00:42.870
90% of the methods are covered

13
00:00:42.870 --> 00:00:45.043
and 95% of the lines are covered.

14
00:00:48.620 --> 00:00:49.880
And now let me zoom out a bit

15
00:00:49.880 --> 00:00:52.860
and we can actually look at the code

16
00:00:52.860 --> 00:00:54.940
and see what's covered.

17
00:00:54.940 --> 00:00:57.193
I move over to my DemoUtils class.

18
00:01:04.750 --> 00:01:07.730
We see that's 95% of the lines are covered

19
00:01:14.160 --> 00:01:15.310
and I can move down a bit.

20
00:01:15.310 --> 00:01:18.600
So in the gutter here, green means this section's covered

21
00:01:18.600 --> 00:01:20.340
and in red means it's not covered.

22
00:01:20.340 --> 00:01:21.823
So these items are covered.

23
00:01:25.100 --> 00:01:27.690
And if we move down here to the multiply method,

24
00:01:27.690 --> 00:01:28.610
we see that it's red.

25
00:01:28.610 --> 00:01:31.140
So that means that it's not covered.

26
00:01:31.140 --> 00:01:32.750
This means that we don't have a unit test

27
00:01:32.750 --> 00:01:34.623
that covers the multiply method.

28
00:01:38.740 --> 00:01:41.180
We can also generate the coverage report.

29
00:01:41.180 --> 00:01:43.450
So this will actually generate some HTML pages

30
00:01:43.450 --> 00:01:46.200
that we can look at outside of the browser.

31
00:01:46.200 --> 00:01:49.203
So I just choose the option here, generate coverage report.

32
00:01:50.160 --> 00:01:51.420
I give the location

33
00:01:51.420 --> 00:01:54.423
for where they should generate the HTML pages.

34
00:01:56.580 --> 00:01:57.820
So my project directory,

35
00:01:57.820 --> 00:02:00.270
I'll just have a folder called coverage report.

36
00:02:00.270 --> 00:02:02.980
You can give it any name, it'll create the folder for you.

37
00:02:02.980 --> 00:02:04.340
Also be sure to check the box

38
00:02:04.340 --> 00:02:06.993
to open the generated HTML in the browser.

39
00:02:14.540 --> 00:02:15.373
Once you hit Save,

40
00:02:15.373 --> 00:02:18.240
the browser pops open with your coverage report, right?

41
00:02:18.240 --> 00:02:20.580
So this is outside of the IntelliJ IDE

42
00:02:20.580 --> 00:02:22.393
just a separate HTML page.

43
00:02:23.630 --> 00:02:25.540
We can see the similar data here

44
00:02:27.650 --> 00:02:29.563
and then we can select the given item,

45
00:02:30.760 --> 00:02:33.970
and then we can move down into this DemoUtils class

46
00:02:35.840 --> 00:02:38.123
and then it'll show the actual coverage.

47
00:02:41.660 --> 00:02:44.490
So here, green lines means that it's covered,

48
00:02:44.490 --> 00:02:46.160
red means that it's not covered.

49
00:02:46.160 --> 00:02:48.190
So we're basically seeing the same information

50
00:02:48.190 --> 00:02:50.320
that we saw in the actual IDE,

51
00:02:50.320 --> 00:02:53.223
just showing it in a different view here with HTML.

52
00:02:55.300 --> 00:02:56.133
Now let's go ahead

53
00:02:56.133 --> 00:02:57.740
and add a test for this method multiply

54
00:02:57.740 --> 00:02:59.593
so we increase our coverage.

55
00:03:06.670 --> 00:03:08.430
I'll move back into my test class

56
00:03:08.430 --> 00:03:12.053
and I'll create this new test method for testing multiply.

57
00:03:28.793 --> 00:03:32.793
Then I do the normal work here just assertEquals

58
00:03:34.040 --> 00:03:36.820
and I'll have the expected value of 12,

59
00:03:36.820 --> 00:03:40.040
I'll call DemoUtils multiply four, comma three.

60
00:03:40.040 --> 00:03:43.100
So we're multiplying four times three,

61
00:03:43.100 --> 00:03:44.373
that should give us 12,

62
00:04:01.820 --> 00:04:03.810
and that's the coding here for this new test method.

63
00:04:03.810 --> 00:04:05.963
So let's go ahead and run our unit test.

64
00:04:08.780 --> 00:04:10.423
Make sure the test pass.

65
00:04:11.620 --> 00:04:15.300
And we have this new test here called multiply.

66
00:04:15.300 --> 00:04:16.550
Yep, so the test passes.

67
00:04:16.550 --> 00:04:17.942
Okay, that's awesome.

68
00:04:19.130 --> 00:04:20.483
Let's run it with coverage.

69
00:04:26.540 --> 00:04:28.530
The test run again

70
00:04:28.530 --> 00:04:30.860
and then we can go and look at the coverage report.

71
00:04:30.860 --> 00:04:34.820
So now we can see that for method is 100% covered

72
00:04:34.820 --> 00:04:37.430
and also lines are 100% covered.

73
00:04:37.430 --> 00:04:39.270
And also looking at the coding here,

74
00:04:39.270 --> 00:04:40.660
we see that multiply is covered.

75
00:04:40.660 --> 00:04:42.350
So it has a green item in the gutter there.

76
00:04:42.350 --> 00:04:45.173
So we're, A, okay, this looks really good, I like it.

77
00:04:47.750 --> 00:04:50.453
I can also generate this external report again,

78
00:04:53.880 --> 00:04:56.250
and zooming out and we see the same type of data

79
00:04:56.250 --> 00:04:57.600
that we saw in the IDE.

80
00:04:57.600 --> 00:05:00.280
And then we can also drill into the class DemoUtils

81
00:05:04.600 --> 00:05:07.300
and then we'll see that the multiply method is covered.

82
00:05:07.300 --> 00:05:08.450
This looks really good.

83
00:05:11.080 --> 00:05:12.940
Earlier, I mentioned that the 100% coverage

84
00:05:12.940 --> 00:05:15.020
is really hard to attain.

85
00:05:15.020 --> 00:05:17.100
We were able to attain the coverage here

86
00:05:17.100 --> 00:05:19.710
because this is a very simple class, but in the real world,

87
00:05:19.710 --> 00:05:21.940
you may not be able to attain 100% coverage

88
00:05:21.940 --> 00:05:25.310
just due to the complexity of your classes and so forth.

89
00:05:25.310 --> 00:05:27.450
So again, depending on your group,

90
00:05:27.450 --> 00:05:30.783
about 70 to 80% coverage is normally acceptable.

91
00:05:34.180 --> 00:05:35.013
All righty.

92
00:05:35.013 --> 00:05:37.370
So let's go ahead and look at generating test reports

93
00:05:37.370 --> 00:05:38.453
using IntelliJ.

94
00:05:45.130 --> 00:05:47.540
I can move down here, expand my window a bit

95
00:05:51.160 --> 00:05:54.003
and select the option to export test results.

96
00:05:56.490 --> 00:05:58.330
And then I can specify the export format,

97
00:05:58.330 --> 00:06:00.110
I'll choose HTML

98
00:06:00.110 --> 00:06:02.660
and then I'll move down here to the folder section.

99
00:06:04.100 --> 00:06:06.950
I'll give the folder name of unit test results.

100
00:06:06.950 --> 00:06:08.460
You can give any name that you want.

101
00:06:08.460 --> 00:06:10.760
It'll automatically create the folder for you.

102
00:06:13.970 --> 00:06:15.120
And also check the option here

103
00:06:15.120 --> 00:06:17.973
to open the exported file in the browser.

104
00:06:25.820 --> 00:06:27.620
And then it'll open up those test results

105
00:06:27.620 --> 00:06:29.410
right here in web browser.

106
00:06:29.410 --> 00:06:31.030
So again, we're seeing the same thing

107
00:06:31.030 --> 00:06:32.380
that we see from the IDE,

108
00:06:32.380 --> 00:06:35.130
we can simply view it in an external webpage

109
00:06:35.130 --> 00:06:36.443
outside of the IDE.

110
00:06:37.340 --> 00:06:39.360
Okay, this looks really good.

111
00:06:39.360 --> 00:06:40.193
Good job.

