WEBVTT
1
00:00:01.245 --> 00:00:02.078
In this video

2
00:00:02.078 --> 00:00:04.280
we're going to cover Throwing Exceptions with Mocks.

3
00:00:07.520 --> 00:00:10.520
We may need to configure the mock to throw an exception.

4
00:00:10.520 --> 00:00:12.220
Here's a possible use case.

5
00:00:12.220 --> 00:00:15.080
We like to test how our code handles an exception

6
00:00:15.080 --> 00:00:16.030
when it's thrown,

7
00:00:16.030 --> 00:00:17.990
so we can basically set up the mock

8
00:00:17.990 --> 00:00:20.593
to throw an exception for a given method call.

9
00:00:23.940 --> 00:00:25.300
Here's a quick refresher

10
00:00:25.300 --> 00:00:28.060
on this mock annotation test that we've been to developing.

11
00:00:28.060 --> 00:00:30.560
We have a MockBean called ApplicationDao

12
00:00:30.560 --> 00:00:32.729
and we also have the ApplicationService.

13
00:00:32.729 --> 00:00:35.620
And remember the ApplicationService has a dependency

14
00:00:35.620 --> 00:00:37.713
on the ApplicationDao.

15
00:00:39.490 --> 00:00:42.550
And what we want to do here is modify this to mock the Dao

16
00:00:42.550 --> 00:00:44.243
to throw a given exception.

17
00:00:48.690 --> 00:00:50.250
Okay, so here's the new coding here

18
00:00:50.250 --> 00:00:51.950
for throwing an exception.

19
00:00:51.950 --> 00:00:54.720
So we have a test, throw an exception,

20
00:00:54.720 --> 00:00:57.010
we go ahead and grab a Bean CollegeStudent

21
00:00:57.010 --> 00:00:58.920
and then we set up our expectation,

22
00:00:58.920 --> 00:01:02.100
so for a given method call we want to throw an exception.

23
00:01:02.100 --> 00:01:05.209
Here I have when ApplicationDao checkNull

24
00:01:05.209 --> 00:01:08.743
nullstudent then throw runtime exception.

25
00:01:09.970 --> 00:01:10.900
So effectively here,

26
00:01:10.900 --> 00:01:12.613
when this method checkNull is called

27
00:01:12.613 --> 00:01:14.483
then we're going to throw an exception.

28
00:01:16.540 --> 00:01:18.420
And then at the bottom we simply do an assertion.

29
00:01:18.420 --> 00:01:20.500
So we assert that the exception was thrown,

30
00:01:20.500 --> 00:01:22.960
just to make sure that, hey, once we make that method call

31
00:01:22.960 --> 00:01:25.510
we want to confirm that a given exception was thrown.

32
00:01:28.750 --> 00:01:29.860
Now, another thing that you can do

33
00:01:29.860 --> 00:01:32.160
is you can make use of consecutive calls.

34
00:01:32.160 --> 00:01:33.240
So you could tell the system,

35
00:01:33.240 --> 00:01:35.830
hey for the first method call, throw an exception

36
00:01:35.830 --> 00:01:39.760
but for all follow on calls, don't throw an exception.

37
00:01:39.760 --> 00:01:41.210
And here's the coding.

38
00:01:41.210 --> 00:01:43.460
When applicationDao checkNull

39
00:01:43.460 --> 00:01:46.090
then throw new runtime exception.

40
00:01:46.090 --> 00:01:48.100
What this does is that it says

41
00:01:48.100 --> 00:01:51.340
for the first call, throw an exception.

42
00:01:51.340 --> 00:01:55.070
Next we have, then return do not throw exception

43
00:01:55.070 --> 00:01:56.080
second time.

44
00:01:56.080 --> 00:01:58.540
Basically here for the consecutive calls

45
00:01:58.540 --> 00:02:01.610
do not throw an exception, simply return a string.

46
00:02:01.610 --> 00:02:03.780
That string message can be anything that you want

47
00:02:03.780 --> 00:02:07.260
or it could be any object boolean, arraylist, whatever.

48
00:02:07.260 --> 00:02:09.400
Whatever your given method call will return,

49
00:02:09.400 --> 00:02:10.660
that's what you can return here.

50
00:02:10.660 --> 00:02:12.710
So the string here could be really anything

51
00:02:12.710 --> 00:02:14.340
or any type of object.

52
00:02:14.340 --> 00:02:16.530
But the key here is that the first call to this method

53
00:02:16.530 --> 00:02:17.760
will throw an exception

54
00:02:17.760 --> 00:02:20.070
and then all follow on calls will not throw an exception,

55
00:02:20.070 --> 00:02:21.670
or will simply return an object.

56
00:02:24.010 --> 00:02:25.810
Now let's take a look at our assertions here.

57
00:02:25.810 --> 00:02:28.710
So far, assert for the first call, we make a check.

58
00:02:28.710 --> 00:02:30.910
We assert throws, runtime exception

59
00:02:30.910 --> 00:02:33.730
because we know that first call's going to throw an exception.

60
00:02:33.730 --> 00:02:35.300
And then for the follow on calls,

61
00:02:35.300 --> 00:02:37.030
like in this case the second call,

62
00:02:37.030 --> 00:02:39.370
then we simply assert that the return value here

63
00:02:39.370 --> 00:02:41.160
was a given strength.

64
00:02:41.160 --> 00:02:42.360
And that's basically it.

65
00:02:43.640 --> 00:02:45.590
All righty, so these some really good examples here.

66
00:02:45.590 --> 00:02:46.900
Let's go ahead and move to the next video

67
00:02:46.900 --> 00:02:48.623
and let's start writing some code.

