1
00:00:01,130 --> 00:00:03,190
In this video we'll cover Mocks with Mockito

2
00:00:03,190 --> 00:00:04,022
and Spring Boot.

3
00:00:08,280 --> 00:00:11,130
Now here's our typical application architecture.

4
00:00:11,130 --> 00:00:12,470
We have our main application.

5
00:00:12,470 --> 00:00:13,303
We have a service.

6
00:00:13,303 --> 00:00:16,010
We have a DAO, and we have a backend database.

7
00:00:16,010 --> 00:00:19,650
Now the question is, how do we test the service?

8
00:00:19,650 --> 00:00:21,890
And I'd like to test the service

9
00:00:21,890 --> 00:00:24,750
with only minimal configuration of dependencies.

10
00:00:24,750 --> 00:00:28,100
So, you know, minimal DAO DB stuff.

11
00:00:28,100 --> 00:00:29,920
I want to kind of keep that simple,

12
00:00:29,920 --> 00:00:31,930
but in our current scenario,

13
00:00:31,930 --> 00:00:34,370
this is tricky because the DAO communicates

14
00:00:34,370 --> 00:00:35,370
with the database

15
00:00:35,370 --> 00:00:37,670
and then getting a database configured, username,

16
00:00:37,670 --> 00:00:42,083
password, tables, rows, data, and so on, really tricky.

17
00:00:42,083 --> 00:00:44,700
And then also testing with the database

18
00:00:44,700 --> 00:00:47,010
is not really unit testing.

19
00:00:47,010 --> 00:00:49,680
This is actually called integration testing,

20
00:00:49,680 --> 00:00:52,470
and we'll cover integration testing later in the course.

21
00:00:52,470 --> 00:00:54,930
But at this point I simply want to kind of focus in on

22
00:00:54,930 --> 00:00:57,943
how can I just test the service in isolation?

23
00:01:01,270 --> 00:01:04,330
Well, one approach is that I can make use of a test double.

24
00:01:04,330 --> 00:01:05,620
So I have my main application.

25
00:01:05,620 --> 00:01:07,000
I have my service.

26
00:01:07,000 --> 00:01:09,570
And then instead of using DAO

27
00:01:09,570 --> 00:01:12,090
that communicates directly with the database,

28
00:01:12,090 --> 00:01:15,180
I can make use of a test double.

29
00:01:15,180 --> 00:01:19,050
So I can make use of a stand in for the real person.

30
00:01:19,050 --> 00:01:20,550
So kind of like in the movies,

31
00:01:20,550 --> 00:01:23,490
you have like a, you have the main movie star

32
00:01:23,490 --> 00:01:26,340
and then you have like a stunt man or a stunt woman,

33
00:01:26,340 --> 00:01:28,330
or in the theater world,

34
00:01:28,330 --> 00:01:31,640
you have your practicing or rehearsing for a play

35
00:01:31,640 --> 00:01:33,850
and you may have a stand in for a given person

36
00:01:33,850 --> 00:01:36,110
who's not there during rehearsals.

37
00:01:36,110 --> 00:01:37,740
We'll make use of this test double.

38
00:01:37,740 --> 00:01:39,370
So here with the test double,

39
00:01:39,370 --> 00:01:42,740
we set expectations with mock responses.

40
00:01:42,740 --> 00:01:44,390
Basically what we mean here is that

41
00:01:44,390 --> 00:01:49,390
when method ABC is called, then return XYZ.

42
00:01:49,760 --> 00:01:50,593
All right.

43
00:01:50,593 --> 00:01:52,740
So again, kind of going back to our real world analogy

44
00:01:52,740 --> 00:01:53,730
with the theater,

45
00:01:53,730 --> 00:01:56,650
we had this stand in actor during rehearsals.

46
00:01:56,650 --> 00:02:00,070
So you could say hey, one of our cast members,

47
00:02:00,070 --> 00:02:01,690
they couldn't make it to rehearsal

48
00:02:01,690 --> 00:02:03,980
or practice today for our play.

49
00:02:03,980 --> 00:02:06,810
Let's grab somebody who can just kind of stand in

50
00:02:06,810 --> 00:02:10,500
and let's give them the dialogue or give them the script,

51
00:02:10,500 --> 00:02:14,020
and they you'll tell the person hey, I'm going to say my line.

52
00:02:14,020 --> 00:02:16,540
And then you simply read what you see on the paper

53
00:02:16,540 --> 00:02:17,550
for your line.

54
00:02:17,550 --> 00:02:18,383
All right.

55
00:02:18,383 --> 00:02:19,820
So again, they're kind of just a test double.

56
00:02:19,820 --> 00:02:21,410
They're kind of standing in,

57
00:02:21,410 --> 00:02:23,340
they already know the responses to make

58
00:02:23,340 --> 00:02:25,549
when we say our line

59
00:02:25,549 --> 00:02:26,590
because they can simply read the script

60
00:02:26,590 --> 00:02:28,150
and respond with their given line.

61
00:02:28,150 --> 00:02:31,293
So that's kind of the idea of using a test double.

62
00:02:35,010 --> 00:02:37,130
Now this technique of using test doubles

63
00:02:37,130 --> 00:02:38,770
is known as mocking.

64
00:02:38,770 --> 00:02:41,310
So you may have heard the term a lot in the industry,

65
00:02:41,310 --> 00:02:42,530
different frameworks and so on,

66
00:02:42,530 --> 00:02:45,000
and we'll actually look at how we can use mocking

67
00:02:45,000 --> 00:02:45,963
in our example.

68
00:02:49,380 --> 00:02:50,710
What are the benefits of mocking?

69
00:02:50,710 --> 00:02:54,270
Well, mocking allows us to test a given class in isolation.

70
00:02:54,270 --> 00:02:56,090
It also allows us to test the interaction

71
00:02:56,090 --> 00:02:58,560
between the given class and its dependencies,

72
00:02:58,560 --> 00:03:01,750
and what this does is that it minimizes the configuration

73
00:03:01,750 --> 00:03:04,240
and the availability of those dependencies.

74
00:03:04,240 --> 00:03:06,470
So for example, if we're going to test a DAO

75
00:03:06,470 --> 00:03:08,910
or a database or REST API,

76
00:03:08,910 --> 00:03:10,400
well for the DAO,

77
00:03:10,400 --> 00:03:13,740
we can mock the DAO for a given response saying hey,

78
00:03:13,740 --> 00:03:15,480
don't talk to the real database.

79
00:03:15,480 --> 00:03:18,480
If they simply make a call for get customers,

80
00:03:18,480 --> 00:03:21,940
then we'll simply give them a canned list of customers.

81
00:03:21,940 --> 00:03:25,280
Or if they say hey, perform an update on a given object,

82
00:03:25,280 --> 00:03:27,090
then we'll simply return that given object.

83
00:03:27,090 --> 00:03:28,640
We'll kind of fake it out

84
00:03:28,640 --> 00:03:30,230
as far as what's actually going to happen

85
00:03:30,230 --> 00:03:31,870
on the backend database side.

86
00:03:31,870 --> 00:03:33,910
So again, we're making use of that test double

87
00:03:33,910 --> 00:03:36,340
to kind of give some mock responses,

88
00:03:36,340 --> 00:03:38,330
and a similar thing for a REST API.

89
00:03:38,330 --> 00:03:41,390
So if we're call some external REST API

90
00:03:41,390 --> 00:03:43,390
we may not be able to access the REST API

91
00:03:43,390 --> 00:03:45,730
because maybe it's in production or it's in test

92
00:03:45,730 --> 00:03:49,000
or we don't have the license or a developer API or token.

93
00:03:49,000 --> 00:03:51,250
Then we can simply set up a mock response.

94
00:03:51,250 --> 00:03:54,370
So we could say hey, if I call this external API,

95
00:03:54,370 --> 00:03:57,320
then I know it should return a given response.

96
00:03:57,320 --> 00:04:00,200
So we can kind of mock those response up front.

97
00:04:00,200 --> 00:04:02,510
And again, going back to our real world analogy

98
00:04:02,510 --> 00:04:03,410
in the theater,

99
00:04:03,410 --> 00:04:05,970
we have this stand in actor during rehearsals.

100
00:04:05,970 --> 00:04:09,360
So we can say our line, they can simply read the script,

101
00:04:09,360 --> 00:04:12,233
or read the mock response or say their given line.

102
00:04:15,020 --> 00:04:18,160
Now, as terms of mocking frameworks and the Java ecosystem,

103
00:04:18,160 --> 00:04:20,519
there's a large number of mocking frameworks.

104
00:04:20,519 --> 00:04:21,540
And these mocking frameworks

105
00:04:21,540 --> 00:04:23,210
provide the following features.

106
00:04:23,210 --> 00:04:24,930
They minimize the hand-coding of mocks

107
00:04:24,930 --> 00:04:26,630
by leveraging annotations.

108
00:04:26,630 --> 00:04:29,960
You can set the expectations for the mock responses.

109
00:04:29,960 --> 00:04:32,470
You can also verify the calls to the methods,

110
00:04:32,470 --> 00:04:35,440
including the number of times a method's been called,

111
00:04:35,440 --> 00:04:37,270
and there's also programmatic support

112
00:04:37,270 --> 00:04:39,050
for throwing exceptions.

113
00:04:39,050 --> 00:04:41,160
And we'll actually see examples of all of this

114
00:04:41,160 --> 00:04:42,623
in the upcoming videos.

115
00:04:45,920 --> 00:04:47,560
Now in terms of mocking frameworks,

116
00:04:47,560 --> 00:04:49,410
well there's a lot of them out there.

117
00:04:49,410 --> 00:04:53,380
So one is Mockito and another one here is EasyMock,

118
00:04:53,380 --> 00:04:55,340
and there's also JMockit.

119
00:04:55,340 --> 00:04:57,070
And then there's a number of others out there.

120
00:04:57,070 --> 00:04:59,630
You could keep searching for days and days,

121
00:04:59,630 --> 00:05:00,930
but to make things easy,

122
00:05:00,930 --> 00:05:03,094
we're going to make use of Mockito

123
00:05:03,094 --> 00:05:05,980
because Spring Boot has built in support for Mockito.

124
00:05:05,980 --> 00:05:09,253
Out of the box, Spring Boot has support for Mockito.

125
00:05:12,400 --> 00:05:13,570
and let's take a look at this.

126
00:05:13,570 --> 00:05:16,450
So the Spring Boot Starter has a transitive dependency

127
00:05:16,450 --> 00:05:17,283
for Mockito.

128
00:05:17,283 --> 00:05:19,430
So in our pom.xml file,

129
00:05:19,430 --> 00:05:22,350
we simply make use of Spring Boot Starter test.

130
00:05:22,350 --> 00:05:24,250
And if we look at the dependencies here,

131
00:05:24,250 --> 00:05:26,157
then we'll see that this starter

132
00:05:26,157 --> 00:05:27,930
includes a transitive dependency on Mockito.

133
00:05:27,930 --> 00:05:29,580
So we get it for free.

134
00:05:29,580 --> 00:05:30,610
Built in support,

135
00:05:30,610 --> 00:05:32,303
we get it out of the box.

136
00:05:35,450 --> 00:05:36,870
Now, unit testing with Mocks.

137
00:05:36,870 --> 00:05:39,960
So unit tests with Mocks have the following structure.

138
00:05:39,960 --> 00:05:43,690
You start with a setup, then we execute, we have assert,

139
00:05:43,690 --> 00:05:45,400
and then we verify.

140
00:05:45,400 --> 00:05:46,233
During setup,

141
00:05:46,233 --> 00:05:48,820
we set the expectations with the mock responses.

142
00:05:48,820 --> 00:05:51,630
So again, kind of like that idea of the test double

143
00:05:51,630 --> 00:05:53,500
or the stand in actor.

144
00:05:53,500 --> 00:05:55,570
Basically you say, I'm going to say this

145
00:05:55,570 --> 00:05:56,910
and you respond with that.

146
00:05:56,910 --> 00:05:59,980
That's the idea of setting expectations with mock responses.

147
00:05:59,980 --> 00:06:00,920
Then we execute.

148
00:06:00,920 --> 00:06:03,100
So we call the method we want to test.

149
00:06:03,100 --> 00:06:04,010
Then we do an assert.

150
00:06:04,010 --> 00:06:06,127
We check the result and verify

151
00:06:06,127 --> 00:06:07,510
that it is the expected result.

152
00:06:07,510 --> 00:06:08,650
And then finally verify.

153
00:06:08,650 --> 00:06:09,800
And so this is optional.

154
00:06:09,800 --> 00:06:10,950
We verify the calls.

155
00:06:10,950 --> 00:06:13,210
We can see how many times a given method was called

156
00:06:13,210 --> 00:06:14,043
and so on.

157
00:06:17,120 --> 00:06:18,740
Now here's our testing plan.

158
00:06:18,740 --> 00:06:21,360
So we have our main application, we have our service.

159
00:06:21,360 --> 00:06:22,880
And so instead of using the DAO

160
00:06:22,880 --> 00:06:24,460
that communicates directly to the database,

161
00:06:24,460 --> 00:06:26,230
we'll make use of this DAO test double.

162
00:06:26,230 --> 00:06:28,410
So we'll actually test our service

163
00:06:28,410 --> 00:06:30,460
and then we'll create a mock for the DAO.

164
00:06:33,300 --> 00:06:34,360
Now let's review the code

165
00:06:34,360 --> 00:06:35,890
for the service and our application DAO

166
00:06:35,890 --> 00:06:38,420
that we'll use in these examples here.

167
00:06:38,420 --> 00:06:40,490
So we'll start with ApplicationServices.java,

168
00:06:40,490 --> 00:06:41,910
it's simply a class.

169
00:06:41,910 --> 00:06:44,590
We have a field here, ApplicationDAO,

170
00:06:44,590 --> 00:06:47,170
that's our dependency that we're going to auto wire.

171
00:06:47,170 --> 00:06:49,420
And then we have a couple of methods here for this service.

172
00:06:49,420 --> 00:06:51,220
Add grades, find grades, check null.

173
00:06:52,840 --> 00:06:55,340
Then for the application DAO, that's our dependency.

174
00:06:55,340 --> 00:06:57,180
It's a class and it has these three methods,

175
00:06:57,180 --> 00:06:58,923
add, find, and check null.

176
00:07:00,120 --> 00:07:01,940
So application DAO is a dependency

177
00:07:01,940 --> 00:07:03,620
on the application service.

178
00:07:03,620 --> 00:07:06,560
And what we'll do is we'll actually mock the application DAO

179
00:07:06,560 --> 00:07:08,733
and we'll inject it into the service.

