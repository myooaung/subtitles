WEBVTT
1
00:00:01.120 --> 00:00:03.080
Okay, let's go ahead and run our application

2
00:00:03.080 --> 00:00:04.939
using an embedded H2 database

3
00:00:04.939 --> 00:00:06.190
and we'll test out the updates

4
00:00:06.190 --> 00:00:07.970
that we made for that thymeleaf template

5
00:00:07.970 --> 00:00:10.043
in student information .html.

6
00:00:14.360 --> 00:00:15.410
Now, remember you have the option

7
00:00:15.410 --> 00:00:18.020
of running your application from the command line

8
00:00:18.020 --> 00:00:20.850
or you can run the MVC testing example application directly

9
00:00:20.850 --> 00:00:21.683
in the IDE.

10
00:00:21.683 --> 00:00:22.750
It's totally up to you.

11
00:00:29.140 --> 00:00:30.390
Already our app is up and running.

12
00:00:30.390 --> 00:00:32.189
We'll go to localhost:1500

13
00:00:33.940 --> 00:00:36.410
and we'll simply just go through and add some data.

14
00:00:36.410 --> 00:00:39.050
So we'll add some data here for Darby

15
00:00:39.050 --> 00:00:41.450
and we'll also add some data here for Eric Roby.

16
00:00:45.910 --> 00:00:47.140
We'll move into my account here

17
00:00:47.140 --> 00:00:49.453
and I'll add some new grades for Math,

18
00:00:53.670 --> 00:00:56.400
and notice here how the average is updating accordingly

19
00:00:56.400 --> 00:00:57.990
and the grades are being added there.

20
00:00:57.990 --> 00:01:00.480
So we know that our Thymeleaf template is working

21
00:01:00.480 --> 00:01:03.673
as far as managing grades here, as far as adding grades.

22
00:01:27.410 --> 00:01:30.070
Now let's go ahead and delete some grades, right?

23
00:01:30.070 --> 00:01:32.620
So we see that our delete grade feature is working.

24
00:01:43.850 --> 00:01:45.420
Now, let me move back to our home screen

25
00:01:45.420 --> 00:01:47.610
and we'll add some grades here for Eric

26
00:01:51.580 --> 00:01:53.190
or we're just repeating a process here

27
00:01:53.190 --> 00:01:54.580
just to show that we can have grades

28
00:01:54.580 --> 00:01:56.723
for different students in our system.

29
00:02:09.945 --> 00:02:12.370
Okay, all of this looks for pretty good.

30
00:02:12.370 --> 00:02:15.269
Now, what I'd like to do is move back over to my IDE

31
00:02:15.269 --> 00:02:17.453
and I like to stop the application.

32
00:02:21.590 --> 00:02:25.120
And now let's go ahead and try and access our app right now

33
00:02:25.120 --> 00:02:27.770
at localhost:1500, nothing works

34
00:02:27.770 --> 00:02:30.150
because there's no server listening on 1500, right?

35
00:02:30.150 --> 00:02:32.603
It'll eventually time out, no problem.

36
00:02:33.550 --> 00:02:36.350
Swing back over here and actually start our application.

37
00:02:45.530 --> 00:02:48.000
And now we swing that go into the browser.

38
00:02:48.000 --> 00:02:50.210
And now we see that, hey our application's up and running,

39
00:02:50.210 --> 00:02:53.540
but where's our data?

40
00:02:53.540 --> 00:02:56.440
We just spent all this time adding data for Darby, Eric Roby

41
00:02:56.440 --> 00:02:58.060
but now everything's blank.

42
00:02:58.060 --> 00:02:59.020
What happened?

43
00:02:59.020 --> 00:03:02.350
Well, when we make use of the embedded H2 database

44
00:03:02.350 --> 00:03:05.060
it only keeps the data in memory.

45
00:03:05.060 --> 00:03:07.860
So once you stop the application

46
00:03:07.860 --> 00:03:12.860
then all the data is lost and Ugh, that's not really good.

47
00:03:12.900 --> 00:03:16.290
Now the embedded H2 database is really good for testing

48
00:03:16.290 --> 00:03:19.010
and unit testing, because it's all kind of designed for that.

49
00:03:19.010 --> 00:03:21.280
But as far as, keeping track of information

50
00:03:21.280 --> 00:03:23.480
once the database stops or the application stops

51
00:03:23.480 --> 00:03:25.160
that's not its main purpose.

52
00:03:25.160 --> 00:03:29.630
Now you can run the H2 database as a standalone database

53
00:03:29.630 --> 00:03:31.530
but it's not really designed for that.

54
00:03:33.060 --> 00:03:33.990
We can resolve this

55
00:03:33.990 --> 00:03:37.840
by using a standalone database such as MySQL.

56
00:03:37.840 --> 00:03:39.870
In the next set of videos we'll go through

57
00:03:39.870 --> 00:03:41.660
and we'll start setting up the process

58
00:03:41.660 --> 00:03:44.410
of having our application connect to MySQL

59
00:03:44.410 --> 00:03:46.010
and we'll cover that in the next set.

60
00:03:46.010 --> 00:03:48.273
So I'll see you in the next video.

