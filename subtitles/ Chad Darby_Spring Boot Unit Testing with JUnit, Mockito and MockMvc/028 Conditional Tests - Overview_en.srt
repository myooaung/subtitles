1
00:00:01,241 --> 00:00:04,093
In this video, we'll cover conditional tests.

2
00:00:06,820 --> 00:00:08,600
Now, there may be some scenarios

3
00:00:08,600 --> 00:00:12,660
where we may not need to run all of the tests.

4
00:00:12,660 --> 00:00:13,493
And you're probably wondering,

5
00:00:13,493 --> 00:00:16,647
"Hmm, what are some use cases for this?"

6
00:00:17,870 --> 00:00:19,010
Well, here we go.

7
00:00:19,010 --> 00:00:20,730
You may not want to run a test

8
00:00:20,730 --> 00:00:23,310
because the method to test is broken

9
00:00:23,310 --> 00:00:25,570
and it's a known issue, all right?

10
00:00:25,570 --> 00:00:27,900
So there's a certain feature of your application,

11
00:00:27,900 --> 00:00:29,794
there's a bug, we know it's a bug.

12
00:00:29,794 --> 00:00:32,860
We're waiting on the developers to get a fix for it.

13
00:00:32,860 --> 00:00:35,370
Maybe we need to have some senior developers

14
00:00:35,370 --> 00:00:38,030
jump in and help, but they're on other projects.

15
00:00:38,030 --> 00:00:41,280
We can't fix it immediately, but we want to go ahead

16
00:00:41,280 --> 00:00:44,836
and just, you know, disable it or not run that given test.

17
00:00:44,836 --> 00:00:47,610
You also may have a scenario,

18
00:00:47,610 --> 00:00:51,820
where a test should only run for a specific version of Java

19
00:00:51,820 --> 00:00:53,640
or a range of versions.

20
00:00:53,640 --> 00:00:56,227
So you could say, "Hey, this set of unit tests here

21
00:00:56,227 --> 00:01:00,210
"should only run on Java 17 or Java 18."

22
00:01:00,210 --> 00:01:03,767
Or you could say "This test should run on Javas 13

23
00:01:03,767 --> 00:01:06,000
"up to Java 25" or whatever.

24
00:01:06,000 --> 00:01:08,520
You can specify the range for those tests

25
00:01:08,520 --> 00:01:10,660
because maybe they're using certain coding

26
00:01:10,660 --> 00:01:12,730
and features that are only available

27
00:01:12,730 --> 00:01:14,433
in those versions of Java.

28
00:01:15,940 --> 00:01:17,210
You could also have a scenario,

29
00:01:17,210 --> 00:01:21,100
where you only want to run a test on a given operating system.

30
00:01:21,100 --> 00:01:22,668
So maybe you have some special test cases

31
00:01:22,668 --> 00:01:25,570
to test for items on Microsoft Windows

32
00:01:25,570 --> 00:01:27,570
or something Mac-specific

33
00:01:27,570 --> 00:01:30,480
or something that can only run on Linux.

34
00:01:30,480 --> 00:01:32,550
So instead of having those tests fail,

35
00:01:32,550 --> 00:01:35,067
we could say, "Hey only run this given test

36
00:01:35,067 --> 00:01:37,377
"if we're on a given operating system."

37
00:01:38,320 --> 00:01:39,660
And then there's also the scenario

38
00:01:39,660 --> 00:01:41,230
of you only want to run a test

39
00:01:41,230 --> 00:01:43,450
if a specific environment variable is set

40
00:01:43,450 --> 00:01:45,880
or certain system properties are set.

41
00:01:45,880 --> 00:01:46,980
So maybe you have some tests

42
00:01:46,980 --> 00:01:49,090
that only should be run in the dev environment,

43
00:01:49,090 --> 00:01:51,620
a separate set of test to run in a QA environment,

44
00:01:51,620 --> 00:01:53,890
and another set of tests that run in the UAT

45
00:01:53,890 --> 00:01:55,030
or a production environment.

46
00:01:55,030 --> 00:01:58,410
So different tests based on environment variables

47
00:01:58,410 --> 00:01:59,773
or system properties.

48
00:02:02,800 --> 00:02:06,257
Now you may wonder, "Well, if we'd have tests

49
00:02:06,257 --> 00:02:09,983
"that we don't want to run, why not just comment the code?"

50
00:02:09,983 --> 00:02:12,355
(chuckles) Well, we could do that,

51
00:02:12,355 --> 00:02:17,280
but then the test will not be displayed in the test reports.

52
00:02:17,280 --> 00:02:19,700
It's easy to forget about the broken test

53
00:02:19,700 --> 00:02:22,100
because if they're no longer on the list, then I don't know,

54
00:02:22,100 --> 00:02:23,290
we forgot about 'em.

55
00:02:23,290 --> 00:02:25,560
And also, there's a manual process

56
00:02:25,560 --> 00:02:27,650
if you need to enable or disable tests

57
00:02:27,650 --> 00:02:30,350
for a given operating system or given environment.

58
00:02:30,350 --> 00:02:32,740
It's just clunky, not really automated.

59
00:02:32,740 --> 00:02:35,073
So it'd be cool if we can have this process automated.

60
00:02:35,073 --> 00:02:38,216
And then the main item here

61
00:02:38,216 --> 00:02:39,760
is that we want to report the test,

62
00:02:39,760 --> 00:02:41,840
such that the management and the QA team

63
00:02:41,840 --> 00:02:42,980
are aware of the issue.

64
00:02:42,980 --> 00:02:46,530
So, hey, we have some tests and these tests are enabled

65
00:02:46,530 --> 00:02:48,610
or disabled based on various conditions,

66
00:02:48,610 --> 00:02:50,893
but we are reporting on them accordingly.

67
00:02:54,640 --> 00:02:56,440
Okay, so let's go ahead and look at some annotations

68
00:02:56,440 --> 00:02:58,000
that we can use here.

69
00:02:58,000 --> 00:03:00,330
So the first two are disabled.

70
00:03:00,330 --> 00:03:02,220
We'll basically disable a test method.

71
00:03:02,220 --> 00:03:05,635
And then enabled on OS will basically enable a test

72
00:03:05,635 --> 00:03:09,060
when running on a given operating system.

73
00:03:09,060 --> 00:03:10,540
And these annotations can be applied

74
00:03:10,540 --> 00:03:13,153
at the class level or the method level.

75
00:03:18,110 --> 00:03:19,650
All right, so here's a code example.

76
00:03:19,650 --> 00:03:22,110
So we have this example, ConditionalTest.Java.

77
00:03:22,110 --> 00:03:23,420
So here's our class.

78
00:03:23,420 --> 00:03:25,710
So the first example here at the basic test,

79
00:03:25,710 --> 00:03:27,300
we're making use of disabled.

80
00:03:27,300 --> 00:03:29,420
So here we say, disabled,

81
00:03:29,420 --> 00:03:32,520
don't run until JIRA #123 is resolved.

82
00:03:32,520 --> 00:03:35,717
So we're saying, "Hey, we know that this is a broken test,

83
00:03:35,717 --> 00:03:37,727
"so don't run it until we actually resolve

84
00:03:37,727 --> 00:03:38,907
"this given issue."

85
00:03:39,870 --> 00:03:42,970
But the key here is that the test will not execute

86
00:03:42,970 --> 00:03:44,960
but it will show up in the test results

87
00:03:44,960 --> 00:03:47,950
as being an ignored test.

88
00:03:47,950 --> 00:03:50,420
The next example here is EnabledOnOS.

89
00:03:50,420 --> 00:03:53,680
So this example is enabled on Microsoft Windows.

90
00:03:53,680 --> 00:03:55,640
So this given test will only run

91
00:03:55,640 --> 00:03:58,870
if it's being run on Microsoft Windows,

92
00:03:58,870 --> 00:04:02,520
and we could do a similar thing here for enabled on OS.Mac.

93
00:04:02,520 --> 00:04:05,330
So again, this test will only run on Mac.

94
00:04:05,330 --> 00:04:07,845
We can also have a combination here,

95
00:04:07,845 --> 00:04:08,678
so we can set up an array.

96
00:04:08,678 --> 00:04:12,490
So this give and test enabled on OS Windows, OS Mac.

97
00:04:12,490 --> 00:04:14,640
So it'll run on Windows and Mac.

98
00:04:14,640 --> 00:04:16,130
And then finally at the bottom here,

99
00:04:16,130 --> 00:04:19,130
EnabledOnOS, OS.Linux, so this given test

100
00:04:19,130 --> 00:04:20,853
will only run on Linux.

101
00:04:22,160 --> 00:04:24,830
So now we go ahead and run the test.

102
00:04:24,830 --> 00:04:27,630
We'll see, in this example, if we're running it on Mac,

103
00:04:27,630 --> 00:04:29,750
then the basic test is disabled.

104
00:04:29,750 --> 00:04:31,640
The test for Linux is disabled.

105
00:04:31,640 --> 00:04:33,710
And the test for Windows is disabled.

106
00:04:33,710 --> 00:04:36,100
So disabled tests will never execute.

107
00:04:36,100 --> 00:04:38,950
So the code inside of that method will never be executed.

108
00:04:40,130 --> 00:04:41,530
We can look at a similar scenario

109
00:04:41,530 --> 00:04:44,010
if we ran these tests on Microsoft Windows.

110
00:04:44,010 --> 00:04:46,000
So the basic test is disabled.

111
00:04:46,000 --> 00:04:47,320
The Linux test is disabled.

112
00:04:47,320 --> 00:04:49,470
And so the Mac test is disabled.

113
00:04:49,470 --> 00:04:52,830
But the ones for Windows and Windows and Mac will run.

114
00:04:52,830 --> 00:04:55,070
And then finally a similar thing here for Linux.

115
00:04:55,070 --> 00:04:58,320
So basic test disabled, and then the other ones here,

116
00:04:58,320 --> 00:05:00,330
Windows and Mac, Mac, and Windows,

117
00:05:00,330 --> 00:05:03,913
those are disabled because this given test was run on Linux.

118
00:05:06,820 --> 00:05:08,855
Now let's take a look at some other annotations here.

119
00:05:08,855 --> 00:05:12,440
So we have EnabledOnJre, so we can enable a test

120
00:05:12,440 --> 00:05:14,490
for a given Java version

121
00:05:14,490 --> 00:05:17,500
and we can also make use of EnabledForJreRange.

122
00:05:17,500 --> 00:05:21,433
So we'll enable a test for a given Java version range.

123
00:05:25,180 --> 00:05:28,125
And then in this example, here, we can see the first test

124
00:05:28,125 --> 00:05:31,310
EnabledOnJre, we give Java 17.

125
00:05:31,310 --> 00:05:34,250
So this test will only run for Java 17.

126
00:05:34,250 --> 00:05:36,880
We can give another example here, Java 13.

127
00:05:36,880 --> 00:05:39,060
So again, only run on Java 13.

128
00:05:39,060 --> 00:05:41,060
We can also make use of ranges.

129
00:05:41,060 --> 00:05:43,960
We can have a minimum range and a max range.

130
00:05:43,960 --> 00:05:46,140
So this given test will run on Java 13,

131
00:05:46,140 --> 00:05:48,980
all the way up to Java 18.

132
00:05:48,980 --> 00:05:50,930
We can also simply just give a minimum.

133
00:05:50,930 --> 00:05:54,017
So we could say, "Hey, EnabledForJreRange,

134
00:05:54,017 --> 00:05:56,450
"min equals JRE Java 11."

135
00:05:56,450 --> 00:05:59,683
So, it'll run at Java 11 and higher.

136
00:06:00,730 --> 00:06:04,560
Now in this example here, if I run it on Java 17,

137
00:06:04,560 --> 00:06:07,340
then we'll see the test only for Java range,

138
00:06:07,340 --> 00:06:08,603
that one executes.

139
00:06:09,556 --> 00:06:11,440
The test only for Java 13, that one is ignored

140
00:06:11,440 --> 00:06:14,830
or disabled because you know, we're running at Java 17.

141
00:06:14,830 --> 00:06:16,150
The one for Java 17 runs,

142
00:06:16,150 --> 00:06:18,983
and the Java range min, that one executes also.

143
00:06:22,620 --> 00:06:24,500
Let's take a look at another set of annotations.

144
00:06:24,500 --> 00:06:28,480
So we can enable a test if a given system property is set

145
00:06:28,480 --> 00:06:29,950
and we can also enable a test

146
00:06:29,950 --> 00:06:32,183
if a given environment variable is set.

147
00:06:36,060 --> 00:06:38,160
So in this example here, the first test,

148
00:06:38,160 --> 00:06:40,600
we say EnabledIfSystemProperty

149
00:06:40,600 --> 00:06:44,210
and we give the name of the property, LUV2CODE_SYS_PROP,

150
00:06:44,210 --> 00:06:46,850
matches, in this example, CI_CD_DEPLOY.

151
00:06:46,850 --> 00:06:49,960
So we can have any name for the system property,

152
00:06:49,960 --> 00:06:51,590
you can just totally make it up.

153
00:06:51,590 --> 00:06:53,200
And then for the regular expression,

154
00:06:53,200 --> 00:06:55,260
you can give an actual value to match,

155
00:06:55,260 --> 00:06:57,300
or you can make use of a regular expression

156
00:06:57,300 --> 00:07:01,220
with the fancy matching characters and so on.

157
00:07:01,220 --> 00:07:06,080
Now you may wonder, well, how do I set a system property?

158
00:07:06,080 --> 00:07:07,640
Well, if you're using IntelliJ,

159
00:07:07,640 --> 00:07:09,530
you can set a system property here

160
00:07:09,530 --> 00:07:11,600
by simply moving into this area,

161
00:07:11,600 --> 00:07:15,453
and then you could set dash D,

162
00:07:16,410 --> 00:07:18,950
and then you specify the name value pair.

163
00:07:18,950 --> 00:07:23,950
So we give LUV2CODE_SYS_PROP equals whatever CI_CD_DEPLOY.

164
00:07:24,010 --> 00:07:26,010
So that's how you can do it in IntelliJ.

165
00:07:27,950 --> 00:07:29,320
Now the next example here,

166
00:07:29,320 --> 00:07:31,670
is for setting up environment variables.

167
00:07:31,670 --> 00:07:33,490
And so I could set up an environment variable,

168
00:07:33,490 --> 00:07:36,640
name matches, again the name can be anything

169
00:07:36,640 --> 00:07:39,350
and match whatever regular expression that you want.

170
00:07:39,350 --> 00:07:41,230
Now to run this with the given environment variables,

171
00:07:41,230 --> 00:07:43,140
we simply set up that name value pair,

172
00:07:43,140 --> 00:07:45,913
Luv2Code environment equals dev.

173
00:07:47,950 --> 00:07:49,780
So we run this one in this scenario,

174
00:07:49,780 --> 00:07:51,950
we've set those environment variables accordingly,

175
00:07:51,950 --> 00:07:53,683
and then those tests will execute.

176
00:07:55,300 --> 00:07:57,030
All righty, so this all looks really good.

177
00:07:57,030 --> 00:07:58,520
I'd like to go ahead and move into the IDE

178
00:07:58,520 --> 00:08:00,120
and test this out.

179
00:08:00,120 --> 00:08:02,743
So I'll see you in the next video.

