WEBVTT
1
00:00:01.120 --> 00:00:02.009
In this video, we'll learn

2
00:00:02.009 --> 00:00:04.563
how to generate code coverage reports with Maven.

3
00:00:10.240 --> 00:00:12.960
Okay, so to get code coverage reports with Maven,

4
00:00:12.960 --> 00:00:14.820
we need to add another plugin.

5
00:00:14.820 --> 00:00:17.800
We need to use that JaCoCo Maven plugin

6
00:00:17.800 --> 00:00:20.920
that we discussed in some previous videos.

7
00:00:20.920 --> 00:00:23.210
So I'll go ahead and set up the group ID, artifact ID

8
00:00:23.210 --> 00:00:24.630
for this given plugin.

9
00:00:24.630 --> 00:00:26.693
So this is org.jacoco.

10
00:00:33.400 --> 00:00:36.793
And for the artifact ID, we choose the jacoco-maven-plugin.

11
00:00:37.870 --> 00:00:39.453
And then we choose a version.

12
00:00:48.530 --> 00:00:49.770
That's the basics for the plugin.

13
00:00:49.770 --> 00:00:53.020
I also need to add some execution items here

14
00:00:53.020 --> 00:00:54.233
for this given plugin.

15
00:00:58.980 --> 00:01:01.780
So I'll set up executions, execution,

16
00:01:01.780 --> 00:01:03.920
give a unique ID for this given execution.

17
00:01:03.920 --> 00:01:05.403
I'll call it jacoco-prepare.

18
00:01:17.500 --> 00:01:20.363
The actual goal name is called prepare-agent.

19
00:01:22.220 --> 00:01:23.500
Now for this little snippet here,

20
00:01:23.500 --> 00:01:25.350
we're preparing a JaCoCo agent.

21
00:01:25.350 --> 00:01:28.860
This will allow JaCoCo to perform some initialization work

22
00:01:28.860 --> 00:01:31.800
in the background when we're starting up our build process.

23
00:01:31.800 --> 00:01:34.210
And this goal is bound by default

24
00:01:34.210 --> 00:01:36.020
to Maven's initialize phase.

25
00:01:36.020 --> 00:01:39.000
So we actually don't have to specify the phase here,

26
00:01:39.000 --> 00:01:39.920
built into the plugin,

27
00:01:39.920 --> 00:01:42.323
it's already bound to Maven's initialize phase.

28
00:01:53.130 --> 00:01:53.963
Okay, great.

29
00:01:53.963 --> 00:01:56.733
So we need to add one more execution item here.

30
00:02:03.070 --> 00:02:05.143
So I'll set up the ID jacoco-report.

31
00:02:11.680 --> 00:02:14.183
For this one, I'll specify the phase of test,

32
00:02:18.630 --> 00:02:21.210
and then the actual goal to reference here

33
00:02:21.210 --> 00:02:23.453
will be the report goal.

34
00:02:27.470 --> 00:02:29.740
For this execution item, we're saying,

35
00:02:29.740 --> 00:02:31.370
during Maven's test phase,

36
00:02:31.370 --> 00:02:35.360
execute the plugin goal jacoco-maven-plugin:report.

37
00:02:35.360 --> 00:02:37.600
So we're binding it to Maven's test phase

38
00:02:37.600 --> 00:02:39.453
and we're executing a goal, report.

39
00:02:46.174 --> 00:02:47.007
And as a checkpoint,

40
00:02:47.007 --> 00:02:48.800
these are the two execution items you should have here

41
00:02:48.800 --> 00:02:51.033
for prepare, and also report.

42
00:02:53.170 --> 00:02:54.500
And then just kind of stepping back,

43
00:02:54.500 --> 00:02:57.360
making sure you have all of your JaCoCo Maven plugin

44
00:02:57.360 --> 00:02:59.103
configs set up accordingly.

45
00:03:06.147 --> 00:03:07.420
All right, so let's go ahead and swing over

46
00:03:07.420 --> 00:03:08.903
to our terminal window here.

47
00:03:13.510 --> 00:03:15.383
Let's do a maven clean test.

48
00:03:19.280 --> 00:03:21.080
And so once we've run this,

49
00:03:21.080 --> 00:03:24.300
then it's actually generating a code coverage reports

50
00:03:24.300 --> 00:03:26.793
using that JaCoCo Maven plugin.

51
00:03:28.420 --> 00:03:33.420
And this report is located at target/site/jacoco/index.html.

52
00:03:40.934 --> 00:03:43.210
And then we simply open up this file in our browser,

53
00:03:43.210 --> 00:03:44.043
and then there you go.

54
00:03:44.043 --> 00:03:45.970
So now we have a code coverage report

55
00:03:45.970 --> 00:03:48.383
that was generated by the JaCoCo Maven plugin.

56
00:03:51.120 --> 00:03:52.900
So here we see our coverage.

57
00:03:52.900 --> 00:03:56.380
We can kind of drill down into this given package.

58
00:03:56.380 --> 00:03:59.433
And then for this given class here, DemoUtils,

59
00:04:01.200 --> 00:04:03.150
we can select this one also,

60
00:04:03.150 --> 00:04:04.790
and this will give us a list of all of our methods

61
00:04:04.790 --> 00:04:05.623
in this class,

62
00:04:05.623 --> 00:04:08.123
along with the code coverage for those items.

63
00:04:09.340 --> 00:04:10.750
And then we can select one of those methods

64
00:04:10.750 --> 00:04:11.583
and we can go through,

65
00:04:11.583 --> 00:04:12.740
and we can see the actual code coverage.

66
00:04:12.740 --> 00:04:16.160
So green means covered, red means not covered.

67
00:04:16.160 --> 00:04:20.610
In this case, we have full coverage of this given class.

68
00:04:20.610 --> 00:04:22.420
Alrighty, so again, the really cool thing

69
00:04:22.420 --> 00:04:25.000
here's that we can generate code coverage reports

70
00:04:25.000 --> 00:04:27.010
from the command line using Maven.

71
00:04:27.010 --> 00:04:28.450
No need for our IDE,

72
00:04:28.450 --> 00:04:31.170
We can do this simply using the Maven command.

73
00:04:31.170 --> 00:04:32.823
Alrighty, good job.

