1
00:00:01,182 --> 00:00:02,300
What I'd like to do is go ahead

2
00:00:02,300 --> 00:00:04,000
and run our application real quick.

3
00:00:04,000 --> 00:00:06,610
So you can either run the application by opening up

4
00:00:06,610 --> 00:00:09,430
a command-line and doing mvn spring-boot:run

5
00:00:09,430 --> 00:00:12,870
or you can simply run the MvcTesting application directly

6
00:00:12,870 --> 00:00:14,897
in the IDE, totally up to you.

7
00:00:28,436 --> 00:00:29,540
But once the app is up and running,

8
00:00:29,540 --> 00:00:31,530
then go to localhost:1500,

9
00:00:31,530 --> 00:00:33,380
and then we'll see our output here.

10
00:00:33,380 --> 00:00:34,510
Now, the one thing to notice here

11
00:00:34,510 --> 00:00:35,350
with this web of interface

12
00:00:35,350 --> 00:00:37,240
is at the moment, the UI is hard coded.

13
00:00:37,240 --> 00:00:38,590
It doesn't really do anything.

14
00:00:38,590 --> 00:00:40,630
So even if you entered student information

15
00:00:40,630 --> 00:00:43,570
and hit submit, nothing happens, nada, nothing.

16
00:00:43,570 --> 00:00:45,100
And all those students that you see there

17
00:00:45,100 --> 00:00:46,750
they're simply hard coded students.

18
00:00:46,750 --> 00:00:48,180
There's no real dynamic data.

19
00:00:48,180 --> 00:00:50,060
So we need to go ahead and make some changes here

20
00:00:50,060 --> 00:00:52,263
and make this user interface dynamic.

21
00:00:54,560 --> 00:00:56,510
I'll go ahead and stop the application.

22
00:01:01,480 --> 00:01:03,620
And I'll move into my resources templates

23
00:01:03,620 --> 00:01:05,319
in the index at HTML.

24
00:01:05,319 --> 00:01:06,870
This is where we have our webpages,

25
00:01:06,870 --> 00:01:08,893
our Thymeleaf templates, actually.

26
00:01:11,940 --> 00:01:13,490
And all we have code here,

27
00:01:13,490 --> 00:01:15,270
I'll simply uncomment the code.

28
00:01:15,270 --> 00:01:17,030
And so this is code that we gave you

29
00:01:17,030 --> 00:01:19,773
for actually doing the dynamic portion of it.

30
00:01:25,110 --> 00:01:26,470
And this other section here,

31
00:01:26,470 --> 00:01:27,960
we'll actually delete this section

32
00:01:27,960 --> 00:01:29,810
because that's the hard coded section.

33
00:01:33,820 --> 00:01:36,170
All right, so we have this section here

34
00:01:36,170 --> 00:01:38,900
and we simply need to update some of the labels here.

35
00:01:38,900 --> 00:01:41,160
So instead of name, we say first name

36
00:01:41,160 --> 00:01:43,560
we do a similar thing for last name

37
00:01:43,560 --> 00:01:47,050
and then a similar thing here for email address.

38
00:01:47,050 --> 00:01:50,370
And so this will actually submit the data or post the data

39
00:01:50,370 --> 00:01:54,960
to our backend controller, the slash endpoint.

40
00:01:54,960 --> 00:01:56,140
We also have code in here

41
00:01:56,140 --> 00:01:58,987
for you to actually loop over the students.

42
00:01:58,987 --> 00:02:01,223
And so you can simply uncomment that.

43
00:02:05,860 --> 00:02:08,020
And then we have these three table rows there.

44
00:02:08,020 --> 00:02:11,143
We can go ahead and delete those three table rows.

45
00:02:22,560 --> 00:02:23,790
All right, so we kind of helped you out here

46
00:02:23,790 --> 00:02:26,350
by giving you some code where you just simply uncomment it

47
00:02:26,350 --> 00:02:27,550
and then make use of it.

48
00:02:31,250 --> 00:02:32,720
All right, so this is what you should have here

49
00:02:32,720 --> 00:02:33,553
for your students.

50
00:02:33,553 --> 00:02:35,960
So we have the table, the TR, the TH,

51
00:02:35,960 --> 00:02:37,230
those are the table headers,

52
00:02:37,230 --> 00:02:39,370
grade book, first name, last name and email

53
00:02:39,370 --> 00:02:40,980
and then the TRs with all the TDs.

54
00:02:40,980 --> 00:02:43,660
And so the TRs, we have th call them each,

55
00:02:43,660 --> 00:02:46,500
that's for Thymeleaf to loop over a given model attribute.

56
00:02:46,500 --> 00:02:48,890
And so here, the model attribute is students.

57
00:02:48,890 --> 00:02:50,650
And then we have the temp item called student.

58
00:02:50,650 --> 00:02:52,400
We also got a reference for the iterator,

59
00:02:52,400 --> 00:02:55,110
allows us to keep track of the number of the index

60
00:02:55,110 --> 00:02:58,713
as we're moving through that given list or collection.

61
00:03:05,510 --> 00:03:07,810
All right, so let's go ahead and run our application again.

62
00:03:07,810 --> 00:03:09,040
Now you can run it from the command line

63
00:03:09,040 --> 00:03:11,690
or you can run it directly from the IDE, your choice.

64
00:03:22,920 --> 00:03:25,320
And once the app is up and running,

65
00:03:25,320 --> 00:03:26,760
we need to go and just do a reload,

66
00:03:26,760 --> 00:03:28,240
so we get the latest version.

67
00:03:28,240 --> 00:03:30,270
All right, so this has an empty list.

68
00:03:30,270 --> 00:03:31,440
There's nothing in the database.

69
00:03:31,440 --> 00:03:33,583
We can add a new student for Eric Roby,

70
00:03:37,410 --> 00:03:39,160
and then we can submit that data

71
00:03:39,160 --> 00:03:40,900
and then success, our UI is dynamic.

72
00:03:40,900 --> 00:03:42,680
So we're adding the student to the database

73
00:03:42,680 --> 00:03:45,100
and also retrieving the students from the database.

74
00:03:45,100 --> 00:03:47,900
All right, so let's add one more student here for Darby,

75
00:03:48,810 --> 00:03:51,000
just to verify this thing is really dynamic

76
00:03:52,560 --> 00:03:53,420
and that works too.

77
00:03:53,420 --> 00:03:56,500
Great, so you can continue adding more students and so on.

78
00:03:56,500 --> 00:03:57,900
They're being saved in the database.

79
00:03:57,900 --> 00:03:59,190
We're retrieving that list of students

80
00:03:59,190 --> 00:04:01,660
from the database and displaying them there in our UI.

81
00:04:01,660 --> 00:04:04,663
So I'd like to say good job, my friend.

