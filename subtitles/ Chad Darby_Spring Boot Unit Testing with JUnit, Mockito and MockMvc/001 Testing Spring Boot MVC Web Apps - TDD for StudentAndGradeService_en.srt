1
00:00:01,179 --> 00:00:02,012
In this video,

2
00:00:02,012 --> 00:00:03,893
we're going to cover how to create grades.

3
00:00:06,840 --> 00:00:08,860
Now, we have some work to do.

4
00:00:08,860 --> 00:00:11,480
Currently, the application does not keep track of grades

5
00:00:11,480 --> 00:00:12,820
for a given student.

6
00:00:12,820 --> 00:00:15,330
At the moment, the UI is really just hard coded,

7
00:00:15,330 --> 00:00:17,730
so the data that you see for a given student,

8
00:00:17,730 --> 00:00:19,540
it's just hard coded data right now.

9
00:00:19,540 --> 00:00:22,860
What we'd like to do is add support for tracking grades.

10
00:00:22,860 --> 00:00:24,890
So for a given student, we'd like for them

11
00:00:24,890 --> 00:00:27,880
to be able to go through and add grades for a given student

12
00:00:27,880 --> 00:00:31,233
for the different subjects, for math, science, and history.

13
00:00:33,950 --> 00:00:35,680
And for this grades functionality,

14
00:00:35,680 --> 00:00:39,010
we'll apply TDD to add this new functionality.

15
00:00:39,010 --> 00:00:41,690
What we'll do is we'll update the StudentAndGradeService

16
00:00:41,690 --> 00:00:45,430
and some DAOs to track the actual student grades.

17
00:00:45,430 --> 00:00:47,950
At the moment, we have one student DAO

18
00:00:47,950 --> 00:00:50,880
and we'll create additional DAOs for history grades,

19
00:00:50,880 --> 00:00:53,200
math grades, and also science grades.

20
00:00:53,200 --> 00:00:54,670
And we'll pull this all together,

21
00:00:54,670 --> 00:00:57,790
and we'll apply TDD as we go through the whole process.

22
00:00:57,790 --> 00:00:59,150
Alrighty. So this looks pretty good.

23
00:00:59,150 --> 00:01:00,350
I'm excited.

24
00:01:00,350 --> 00:01:03,350
Let's go ahead and move into the IDE, and let's get started.

25
00:01:10,420 --> 00:01:11,253
All righty.

26
00:01:11,253 --> 00:01:12,086
So let's go ahead and move

27
00:01:12,086 --> 00:01:14,643
into our StudentGradeAndServiceTest.

28
00:01:21,240 --> 00:01:22,500
And what we'll do to get started is that

29
00:01:22,500 --> 00:01:25,187
we'll add a new test, and this will be a failing test.

30
00:01:25,187 --> 00:01:27,987
And this is creating a grade using a service.

31
00:01:33,550 --> 00:01:34,383
Let me move in here,

32
00:01:34,383 --> 00:01:36,270
and I want to write some quick comments to myself,

33
00:01:36,270 --> 00:01:38,243
just to keep myself on track.

34
00:01:54,890 --> 00:01:56,230
So taking a look here at our comments

35
00:01:56,230 --> 00:01:57,680
where in create the grade,

36
00:01:57,680 --> 00:01:59,660
get all the grades we've given studentId,

37
00:01:59,660 --> 00:02:01,533
and verify that there is grades.

38
00:02:06,120 --> 00:02:08,370
Now, let's go ahead and do an assertion here,

39
00:02:12,570 --> 00:02:14,100
and I'll make use of my student service.

40
00:02:14,100 --> 00:02:15,573
And I'll create a grade,

41
00:02:22,580 --> 00:02:24,640
I'll pass in the actual grade,

42
00:02:24,640 --> 00:02:26,730
I'll pass in the studentId,

43
00:02:26,730 --> 00:02:30,480
and I'll also type, pass in the type of grade.

44
00:02:30,480 --> 00:02:33,260
So ideally, this should create a math grade

45
00:02:33,260 --> 00:02:37,083
in the background of 80.5 for studentId of 1.

46
00:02:39,850 --> 00:02:41,590
And now, I'll go ahead and get the grades

47
00:02:41,590 --> 00:02:43,263
with the given studentId.

48
00:02:53,030 --> 00:02:54,733
I'll make use of the mathGradeDao.findGradeByStudentId.

49
00:03:04,570 --> 00:03:05,610
Now, the things here in red,

50
00:03:05,610 --> 00:03:07,210
that means that these items don't exist.

51
00:03:07,210 --> 00:03:08,043
That's fine.

52
00:03:08,043 --> 00:03:11,350
We'll actually use the test to drive our development here.

53
00:03:11,350 --> 00:03:14,663
And then finally, we want to verify that there are grades.

54
00:03:18,490 --> 00:03:20,673
And then, I'll make use the mathGrades.iterator.hasNext.

55
00:03:22,570 --> 00:03:24,960
That means that we have some grades here,

56
00:03:24,960 --> 00:03:25,793
and then I'll say that,

57
00:03:25,793 --> 00:03:28,537
"Okay, this given student has math grades."

58
00:03:37,074 --> 00:03:38,320
And we can do some more things later,

59
00:03:38,320 --> 00:03:40,670
but at this point, this is enough for our test.

60
00:03:44,530 --> 00:03:46,050
Let's go ahead and run our test.

61
00:03:46,050 --> 00:03:49,210
This test will fail because it doesn't even compile.

62
00:03:49,210 --> 00:03:51,800
We don't have a method createGrade,

63
00:03:51,800 --> 00:03:54,300
and we also don't have a mathGradeDao,

64
00:03:54,300 --> 00:03:55,500
so we need to do that.

65
00:03:55,500 --> 00:03:56,333
Well, first off,

66
00:03:56,333 --> 00:03:59,258
let's go ahead and move into our StudentAndGradeService.

67
00:03:59,258 --> 00:04:03,430
And then, we'll add that method here for creating a grade.

68
00:04:03,430 --> 00:04:05,060
And remember, we can also use the IDE

69
00:04:05,060 --> 00:04:06,970
to generate the method steps for us,

70
00:04:06,970 --> 00:04:09,550
but right now, I'll just kind of write it out long hand.

71
00:04:09,550 --> 00:04:11,050
But you can do it, either way.

72
00:04:21,050 --> 00:04:23,529
I'll create this method here, createGrade.

73
00:04:23,529 --> 00:04:26,023
I'll be passing the actual value of the grade,

74
00:04:27,300 --> 00:04:32,113
the actual studentId, and the actual type of grade.

75
00:04:34,530 --> 00:04:36,260
And this method will return a Boolean,

76
00:04:36,260 --> 00:04:38,340
meaning that it was successful.

77
00:04:38,340 --> 00:04:41,150
Now at the moment, I'll actually say return false.

78
00:04:41,150 --> 00:04:42,650
Again, this code's failing,

79
00:04:42,650 --> 00:04:44,950
we'll have to do some work to make it pass over time.

80
00:04:44,950 --> 00:04:47,420
But at least this kind of gets rid of the compilation error

81
00:04:47,420 --> 00:04:50,180
we had for StudentServiceCreateGrade.

82
00:04:54,010 --> 00:04:56,830
The next item that we have here is the mathGradeDao.

83
00:04:56,830 --> 00:04:58,020
This one doesn't exist,

84
00:04:58,020 --> 00:05:00,120
so I should need to create this given Dao.

85
00:05:01,810 --> 00:05:03,520
And let's move over to our repository,

86
00:05:03,520 --> 00:05:05,313
and let's create a new interface.

87
00:05:07,100 --> 00:05:11,113
So repository, and be sure to select Interface.

88
00:05:14,300 --> 00:05:18,040
The name of this interface is going to be MathGradesDao,

89
00:05:18,040 --> 00:05:19,790
make sure interface is selected,

90
00:05:19,790 --> 00:05:21,643
because we're using Spring Data JPA.

91
00:05:27,890 --> 00:05:29,720
And here, for MathGradesDao,

92
00:05:29,720 --> 00:05:31,753
we see extends CrudRepository.

93
00:05:37,580 --> 00:05:40,587
We give the entity type of MathGrade, the type

94
00:05:43,610 --> 00:05:45,453
for the primary key, Integer.

95
00:05:49,000 --> 00:05:51,923
And we'll also add a custom finder method here.

96
00:06:00,240 --> 00:06:01,903
And this will be findGradeByStudentId.

97
00:06:04,108 --> 00:06:07,108
And this will return the math grades for this given student.

98
00:06:09,330 --> 00:06:12,000
All right. Now, swinging back over to our test.

99
00:06:12,000 --> 00:06:15,050
Then this Dao should get resolved.

100
00:06:15,050 --> 00:06:16,360
Well, not yet.

101
00:06:16,360 --> 00:06:18,450
We actually need to autowire this Dao.

102
00:06:18,450 --> 00:06:20,100
So let's move up to the top,

103
00:06:20,100 --> 00:06:22,233
and autowire in the MathGradesDao.

104
00:06:38,580 --> 00:06:39,413
All righty.

105
00:06:39,413 --> 00:06:40,350
So this is better, looks better.

106
00:06:40,350 --> 00:06:43,910
If we scroll back down, then mathGradeDao, great.

107
00:06:47,960 --> 00:06:48,973
It's no longer red.

108
00:06:50,050 --> 00:06:52,233
Now, we can go ahead and run this test,

109
00:06:55,850 --> 00:06:57,940
and this test fails as expected, right?

110
00:06:57,940 --> 00:07:00,200
We haven't done any real work yet.

111
00:07:00,200 --> 00:07:01,850
We need to go through and actually write code

112
00:07:01,850 --> 00:07:04,160
for making this test pass, but don't worry.

113
00:07:04,160 --> 00:07:05,210
We'll move into the next video,

114
00:07:05,210 --> 00:07:07,460
and we'll continue writing the code for this.

