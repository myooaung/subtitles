1
00:00:01,286 --> 00:00:02,969
All right, so let's write some code here

2
00:00:02,969 --> 00:00:04,943
to run our test in order.

3
00:00:08,420 --> 00:00:11,730
So, first off, I'll just go ahead and run the example as is

4
00:00:11,730 --> 00:00:15,053
and look at the output of the actual test results.

5
00:00:31,180 --> 00:00:34,950
And to start, I'll make use of our Test Method Order.

6
00:00:34,950 --> 00:00:36,750
I'll define this at the class level,

7
00:00:38,780 --> 00:00:41,040
and the Method Order that I'll use here.

8
00:00:41,040 --> 00:00:46,033
I'll say order by MethodName.class.

9
00:00:54,770 --> 00:00:56,820
And then I'll go ahead and run this test.

10
00:00:59,860 --> 00:01:01,470
So it's sorting by MethodName

11
00:01:01,470 --> 00:01:04,290
but we're only seeing the DisplayName.

12
00:01:04,290 --> 00:01:08,310
So ideally we really don't want the scenario.

13
00:01:08,310 --> 00:01:10,650
Like I mentioned in the previous video,

14
00:01:10,650 --> 00:01:12,740
when we sort by MethodName,

15
00:01:12,740 --> 00:01:15,660
we don't want to use a DisplayName,

16
00:01:15,660 --> 00:01:18,263
so we kind of need to make a modification here.

17
00:01:21,420 --> 00:01:22,630
And we can simply modify this

18
00:01:22,630 --> 00:01:24,560
by saying instead of MethodName,

19
00:01:24,560 --> 00:01:29,433
let's go ahead and sort by DisplayName.class.

20
00:01:45,363 --> 00:01:46,196
All right that looks good.

21
00:01:46,196 --> 00:01:48,050
Now let's go ahead and run this test again.

22
00:01:54,088 --> 00:01:56,470
All right so now everything works out just fine

23
00:01:56,470 --> 00:01:58,920
and sorting by DisplayName.

24
00:01:58,920 --> 00:02:02,263
So we're kind of A okay, over here.

25
00:02:07,540 --> 00:02:09,039
Now I'll switch gears here

26
00:02:09,039 --> 00:02:11,510
and I'll make use of a different MethodOrderer

27
00:02:11,510 --> 00:02:14,913
and I'll use the OrderAnnotation.class.

28
00:02:22,203 --> 00:02:23,350
In this scenario,

29
00:02:23,350 --> 00:02:26,610
we need to actually use the OrderAnnotation

30
00:02:26,610 --> 00:02:30,520
on a specific method that we like to order.

31
00:02:30,520 --> 00:02:31,910
So here, I'll start at the top

32
00:02:31,910 --> 00:02:33,923
with the test equals and not equals.

33
00:02:35,870 --> 00:02:37,270
I'll use the OrderAnnotation

34
00:02:39,900 --> 00:02:41,700
and then I'll give the value of one.

35
00:02:43,570 --> 00:02:44,530
I'll do a similar thing here

36
00:02:44,530 --> 00:02:46,223
for test null and not null,

37
00:02:47,090 --> 00:02:48,593
give the value of zero.

38
00:02:50,310 --> 00:02:55,063
And remember, the lowest number has the highest priority.

39
00:02:57,100 --> 00:02:58,750
Let's go ahead and run this test.

40
00:03:00,980 --> 00:03:04,113
Based on these results here we have null and not null,

41
00:03:05,560 --> 00:03:07,563
and then equal and not equals.

42
00:03:08,900 --> 00:03:10,820
Let me resize the screen for a second

43
00:03:10,820 --> 00:03:11,890
so we can see everything.

44
00:03:11,890 --> 00:03:14,573
So null and not null has the order of zero.

45
00:03:15,570 --> 00:03:20,240
And then, test equals and not equals has the order of one.

46
00:03:20,240 --> 00:03:22,330
The lowest value has the highest priority.

47
00:03:22,330 --> 00:03:26,283
So that's why we see test null and not null first.

48
00:03:28,190 --> 00:03:29,023
Now let's go ahead

49
00:03:29,023 --> 00:03:31,057
and add some additional OrderAnnotations.

50
00:03:31,057 --> 00:03:34,233
So on the test, true and false, we give the value of 30.

51
00:03:42,610 --> 00:03:46,143
And then for test lines match, we give the value of 50.

52
00:04:08,730 --> 00:04:11,060
And then we'll run this and we'll see the results.

53
00:04:11,060 --> 00:04:14,750
So we have null and not null, equals and not equals,

54
00:04:14,750 --> 00:04:17,140
true and false, lines match.

55
00:04:17,140 --> 00:04:19,339
So true and false has the value of 30,

56
00:04:19,339 --> 00:04:21,279
lines match has the value of 50.

57
00:04:21,279 --> 00:04:24,210
Remember, lowest number has the highest priority.

58
00:04:24,210 --> 00:04:26,160
That's how we have these given results.

59
00:04:30,290 --> 00:04:31,770
All righty, this looks really good.

60
00:04:31,770 --> 00:04:35,140
So we saw different ways of ordering our unit tests.

61
00:04:35,140 --> 00:04:37,913
I like to say good job, my friend.

