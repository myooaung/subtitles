1
00:00:01,238 --> 00:00:04,163
In this video, we'll cover JUnit assertions.

2
00:00:07,910 --> 00:00:10,090
JUnit has a collection of assertions

3
00:00:10,090 --> 00:00:11,220
and they're defined in the class

4
00:00:11,220 --> 00:00:13,913
org.junit.jupiter.api.Assertions.

5
00:00:15,050 --> 00:00:17,510
And so here's a list of some of the methods.

6
00:00:17,510 --> 00:00:19,970
So we already saw this first one here assertEquals,

7
00:00:19,970 --> 00:00:22,500
it basically asserts that the values are equal.

8
00:00:22,500 --> 00:00:24,170
They also have the assertNotEquals

9
00:00:24,170 --> 00:00:27,044
so asserts that the values are not equal.

10
00:00:27,044 --> 00:00:29,207
And then there's also the assertNull

11
00:00:29,207 --> 00:00:32,573
and assertNotNull, and these are all very self explanatory.

12
00:00:36,990 --> 00:00:39,500
Now let's look at some examples here with assertEquals.

13
00:00:39,500 --> 00:00:42,340
So we saw from the previous slide assertEquals

14
00:00:42,340 --> 00:00:45,554
the first parameter coming in is the expected value,

15
00:00:45,554 --> 00:00:47,860
and then you have the actual value

16
00:00:47,860 --> 00:00:50,100
after executing the method under test.

17
00:00:50,100 --> 00:00:53,583
And then you can have an optional message if the test fails.

18
00:00:56,770 --> 00:00:59,080
There's also assertNotEquals.

19
00:00:59,080 --> 00:01:02,486
Here the first parameter's the unexpected value.

20
00:01:02,486 --> 00:01:04,379
And then we have the actual value

21
00:01:04,379 --> 00:01:06,930
after executing the method under test.

22
00:01:06,930 --> 00:01:10,003
And again, the optional message if the test fails.

23
00:01:13,600 --> 00:01:15,970
So let's kind of pull this together with an example.

24
00:01:15,970 --> 00:01:17,420
So we have our DemoUtilsTest.

25
00:01:22,460 --> 00:01:26,250
We'll set up this test, testEqualsAndNotEquals.

26
00:01:26,250 --> 00:01:29,100
In the setup, we create an instance of the class to test.

27
00:01:30,210 --> 00:01:33,323
Then we set our expected value, our unexpected value,

28
00:01:35,580 --> 00:01:39,573
and then we execute, so demoUtils.add 2,4.

29
00:01:43,290 --> 00:01:45,430
And now we perform our assertion here.

30
00:01:45,430 --> 00:01:49,120
So we have assertEquals expected, actual,

31
00:01:49,120 --> 00:01:51,070
and then we have Assertions.assertNotEquals

32
00:01:52,290 --> 00:01:53,680
unexpected, value.

33
00:01:53,680 --> 00:01:55,910
So here, I'm checking the actual result

34
00:01:55,910 --> 00:01:59,340
and verifying that it's not the unexpected value.

35
00:01:59,340 --> 00:02:03,283
So here I'm basically saying 2 + 4 must not be 8.

36
00:02:09,340 --> 00:02:11,930
Now we can also make use of this static import.

37
00:02:11,930 --> 00:02:14,180
So a static import is basically a shortcut

38
00:02:14,180 --> 00:02:17,393
for referencing static methods and fields in a class.

39
00:02:18,830 --> 00:02:21,080
So earlier we had Assertions.assertNotEquals,

40
00:02:22,280 --> 00:02:24,740
so we have the class name, dot, the method name.

41
00:02:24,740 --> 00:02:25,573
The standard approach

42
00:02:25,573 --> 00:02:27,523
for calling a static method in a class.

43
00:02:28,980 --> 00:02:31,080
However, we can make use of the static import

44
00:02:31,080 --> 00:02:33,090
to kind of clean things up a bit.

45
00:02:33,090 --> 00:02:36,080
So up top, we can say import static

46
00:02:36,080 --> 00:02:39,180
and give a reference to the actual class, dot, method name.

47
00:02:39,180 --> 00:02:41,530
And then, this will give us a shortcut

48
00:02:41,530 --> 00:02:44,500
where we simply just give the method name

49
00:02:44,500 --> 00:02:45,870
from making the call.

50
00:02:45,870 --> 00:02:48,350
So no need to do the long hand approach here,

51
00:02:48,350 --> 00:02:50,590
we can simply give the method name for making the call.

52
00:02:50,590 --> 00:02:54,167
So now we can simply say assertEquals or assertNotEquals.

53
00:02:58,420 --> 00:02:59,810
And then we can even take this a step further

54
00:02:59,810 --> 00:03:02,350
by making use of wildcards.

55
00:03:02,350 --> 00:03:03,670
So instead of having to list

56
00:03:03,670 --> 00:03:05,280
each one of the methods individually,

57
00:03:05,280 --> 00:03:07,470
because there may be a lot of methods in a given class

58
00:03:07,470 --> 00:03:08,660
that we need to use,

59
00:03:08,660 --> 00:03:11,360
we can simply just make use of the wildcard, the star.

60
00:03:12,220 --> 00:03:14,390
So here I can simply say import static

61
00:03:14,390 --> 00:03:16,340
and then assertions.*

62
00:03:16,340 --> 00:03:19,450
and then I can simply use the methods as needed.

63
00:03:19,450 --> 00:03:21,890
So you'll see this approach used commonly

64
00:03:21,890 --> 00:03:25,133
on unit testing examples that you'll see in the real world.

65
00:03:29,360 --> 00:03:30,930
And now we can kind of pull this together

66
00:03:30,930 --> 00:03:32,150
with a code example here.

67
00:03:32,150 --> 00:03:34,820
So notice up top, we're making some static imports

68
00:03:34,820 --> 00:03:36,770
and we're using a wildcard.

69
00:03:36,770 --> 00:03:39,247
And so, now we simply have to just give the method name

70
00:03:39,247 --> 00:03:41,013
for making those given calls.

71
00:03:45,350 --> 00:03:48,083
And we can also kind of restructure our code a bit.

72
00:03:52,640 --> 00:03:54,200
So in our class DemoTestUtils

73
00:03:54,200 --> 00:03:57,360
when we create our methods, we go through the setup process

74
00:03:57,360 --> 00:03:59,150
but then we actually kind of restructure things

75
00:03:59,150 --> 00:04:01,650
and we combine the execute and assert together

76
00:04:01,650 --> 00:04:03,140
in the same line.

77
00:04:03,140 --> 00:04:05,360
So here I have assertEquals,

78
00:04:05,360 --> 00:04:07,270
I give the expected value of six,

79
00:04:07,270 --> 00:04:10,460
I call the method and get the actual results here.

80
00:04:10,460 --> 00:04:12,820
And I have the optional message here.

81
00:04:12,820 --> 00:04:15,580
Now you may wonder, why are we taking this approach?

82
00:04:15,580 --> 00:04:17,980
Well, it just kind of minimizes the amount of code

83
00:04:17,980 --> 00:04:21,050
that we have to write, and also if we have multiple asserts,

84
00:04:21,050 --> 00:04:23,638
we can easily perform a lot of operations

85
00:04:23,638 --> 00:04:25,681
in a smaller number of lines.

86
00:04:25,681 --> 00:04:27,800
And so, this will be very useful for us

87
00:04:27,800 --> 00:04:29,500
as we go through testing our code,

88
00:04:29,500 --> 00:04:31,920
we can kind of minimize all the intermediate steps

89
00:04:31,920 --> 00:04:33,060
and just go directly

90
00:04:33,060 --> 00:04:36,173
with doing the execute and assert together in one line.

91
00:04:37,560 --> 00:04:39,020
And so, here, this helps us out

92
00:04:39,020 --> 00:04:40,450
by going through doing another step here

93
00:04:40,450 --> 00:04:43,723
with assertNotEquals the different values accordingly.

94
00:04:47,250 --> 00:04:49,000
Now let's take a look at another example here.

95
00:04:49,000 --> 00:04:51,663
So here's our code to test with our DemoUtils.

96
00:04:54,490 --> 00:04:57,480
We're going to test this method here checkNull.

97
00:04:57,480 --> 00:04:58,770
So if they pass on an object,

98
00:04:58,770 --> 00:05:00,580
I want to see if that object's null.

99
00:05:00,580 --> 00:05:02,500
If it's not null, I'll return the object.

100
00:05:02,500 --> 00:05:04,613
If it is null, I'll return null.

101
00:05:06,530 --> 00:05:08,760
And this is really just a academic example here,

102
00:05:08,760 --> 00:05:10,190
we're simply just showing you

103
00:05:10,190 --> 00:05:12,053
how to make use of JUnit testing.

104
00:05:16,690 --> 00:05:18,240
So we can make use of our assertions here

105
00:05:18,240 --> 00:05:20,280
for Null and NotNull.

106
00:05:20,280 --> 00:05:23,099
So the assertNull asserts that the value is null,

107
00:05:23,099 --> 00:05:24,420
and NotNull, of course,

108
00:05:24,420 --> 00:05:27,033
asserting that the value is not null.

109
00:05:31,710 --> 00:05:34,083
Let's go ahead and set up a unit test for this.

110
00:05:36,700 --> 00:05:39,340
So I have the test Null and NotNull.

111
00:05:40,720 --> 00:05:42,683
I create an instance of DemoUtils,

112
00:05:42,683 --> 00:05:45,840
I set up some variables here for String 1, it's null,

113
00:05:45,840 --> 00:05:47,623
String 2 equals luv2code.

114
00:05:48,480 --> 00:05:52,930
And then I do an assertNull on checkNull String 1,

115
00:05:52,930 --> 00:05:54,230
the object should be null.

116
00:05:55,750 --> 00:05:58,960
So that's the actual value after executing the method

117
00:05:58,960 --> 00:06:01,673
that's under test and our optional message.

118
00:06:02,650 --> 00:06:05,120
And then we do a similar thing for assertNotNull.

119
00:06:05,120 --> 00:06:07,600
So we pass in checkNull on String 2,

120
00:06:07,600 --> 00:06:10,593
and here we say this object should not be null.

121
00:06:12,510 --> 00:06:16,310
Then we run this one, our test results, the tests pass,

122
00:06:16,310 --> 00:06:17,800
we get the green check mark

123
00:06:17,800 --> 00:06:18,870
and everything works out fine

124
00:06:18,870 --> 00:06:21,773
so know that this piece of code is working just fine.

125
00:06:25,630 --> 00:06:28,040
And now we can also combine our tests.

126
00:06:28,040 --> 00:06:31,070
We can actually have multiple tests in one class.

127
00:06:31,070 --> 00:06:32,650
So in this example here,

128
00:06:32,650 --> 00:06:35,960
I can have my testEqualsAndNotEquals,

129
00:06:35,960 --> 00:06:38,230
and also my testNullAndNotNull.

130
00:06:38,230 --> 00:06:39,910
So they're part of one class

131
00:06:39,910 --> 00:06:42,370
and I can run this as a given unit test

132
00:06:42,370 --> 00:06:43,500
and it'll show me the results.

133
00:06:43,500 --> 00:06:45,620
It'll say, hey, both tests passed,

134
00:06:45,620 --> 00:06:48,270
and it'll also tell you how many tests were executed.

135
00:06:52,850 --> 00:06:54,570
And now, if you'd like to get more details

136
00:06:54,570 --> 00:06:57,150
here on writing tests, this is just kind of the basics,

137
00:06:57,150 --> 00:06:58,870
you can take a look at the JUnit User Guide

138
00:06:58,870 --> 00:07:00,510
and you can access it at the link

139
00:07:00,510 --> 00:07:02,483
that I have here on the slide.

140
00:07:03,880 --> 00:07:05,601
All righty, so this is all really good information.

141
00:07:05,601 --> 00:07:07,760
Let's go ahead and dive into the next video

142
00:07:07,760 --> 00:07:09,460
and let's start writing some code.

