1
00:00:01,310 --> 00:00:02,143
In this video,

2
00:00:02,143 --> 00:00:04,253
we'll cover testing using reflection.

3
00:00:07,240 --> 00:00:09,840
Now there are some special cases during testing.

4
00:00:09,840 --> 00:00:13,250
We may need to access some non-public fields.

5
00:00:13,250 --> 00:00:15,470
For example, if you're using Hibernate JPA,

6
00:00:15,470 --> 00:00:18,040
you may have some private fields for the ID

7
00:00:18,040 --> 00:00:20,290
and you may want to set that using testing,

8
00:00:20,290 --> 00:00:23,040
or you may have some fields that are auto wired,

9
00:00:23,040 --> 00:00:24,880
and you'd like to set those manually

10
00:00:24,880 --> 00:00:28,233
or retrieve those manually in your actual test.

11
00:00:29,310 --> 00:00:31,610
You also may have a non-public method

12
00:00:31,610 --> 00:00:32,490
that you'd like to test.

13
00:00:32,490 --> 00:00:33,380
So, our next example,

14
00:00:33,380 --> 00:00:35,700
we have a method called generate tracking number.

15
00:00:35,700 --> 00:00:36,810
It's a private method,

16
00:00:36,810 --> 00:00:39,380
but we'd still like to write a test for it.

17
00:00:39,380 --> 00:00:42,670
Now you may wonder, well, why worry about

18
00:00:42,670 --> 00:00:44,610
those private fields of methods?

19
00:00:44,610 --> 00:00:46,277
Why not just make them public?

20
00:00:47,120 --> 00:00:48,920
Well, that's one possible approach.

21
00:00:48,920 --> 00:00:51,330
Well, you may be testing legacy code

22
00:00:51,330 --> 00:00:54,810
and you can't change the code due to corporate policy.

23
00:00:54,810 --> 00:00:57,960
And me personally, when I go into an existing code base,

24
00:00:57,960 --> 00:00:59,920
I like to write the given test

25
00:00:59,920 --> 00:01:02,190
and I want to try and minimize the amount of

26
00:01:02,190 --> 00:01:04,090
existing code that I change.

27
00:01:04,090 --> 00:01:05,790
For example, I don't want to go through

28
00:01:05,790 --> 00:01:08,810
and touch any number of files that I don't have to

29
00:01:08,810 --> 00:01:11,010
because now your name is on record

30
00:01:11,010 --> 00:01:14,320
and if something with that existing code changes or breaks,

31
00:01:14,320 --> 00:01:15,860
then you're responsible,

32
00:01:15,860 --> 00:01:17,800
because you're the last person that touched it.

33
00:01:17,800 --> 00:01:19,280
So, I don't like to go through

34
00:01:19,280 --> 00:01:21,020
and change access modifiers on code.

35
00:01:21,020 --> 00:01:22,870
I kind of like to leave the code as is

36
00:01:22,870 --> 00:01:24,293
and simply write the test.

37
00:01:25,300 --> 00:01:27,900
Now, I would be remiss in not mentioning this

38
00:01:27,900 --> 00:01:28,860
but, in general, testing non-public fields

39
00:01:28,860 --> 00:01:31,760
but in general, testing non-public fields

40
00:01:31,760 --> 00:01:35,340
and methods is a bit controversial, all righty? .

41
00:01:35,340 --> 00:01:36,910
So if you go online,

42
00:01:36,910 --> 00:01:39,640
you'll see a number of discussions or arguments

43
00:01:39,640 --> 00:01:43,320
debating saying, hey, you should never test private fields,

44
00:01:43,320 --> 00:01:45,420
you should never test private methods.

45
00:01:45,420 --> 00:01:48,110
That's a code smell. That's a bad practice.

46
00:01:48,110 --> 00:01:50,770
And then on the other side, you'll see folks that say,

47
00:01:50,770 --> 00:01:52,050
well, there's certain use cases

48
00:01:52,050 --> 00:01:54,620
where it's okay to access private fields

49
00:01:54,620 --> 00:01:56,630
or invoke private methods. All right.

50
00:01:56,630 --> 00:01:59,440
So, you'll see debates and arguments

51
00:01:59,440 --> 00:02:00,340
on both sides of defense.

52
00:02:00,340 --> 00:02:01,640
So it's kind of like politics, right?

53
00:02:01,640 --> 00:02:04,650
There's no right answer or right side.

54
00:02:04,650 --> 00:02:06,420
You have to kind of make your own decision here.

55
00:02:06,420 --> 00:02:10,120
So, I like to say, use this approach sparingly.

56
00:02:10,120 --> 00:02:11,390
And if you are doing this,

57
00:02:11,390 --> 00:02:13,360
make sure you have a really good justification

58
00:02:13,360 --> 00:02:14,780
for why you're doing it

59
00:02:14,780 --> 00:02:16,830
because other developers on your team

60
00:02:16,830 --> 00:02:18,700
may question you about it, all right?

61
00:02:18,700 --> 00:02:21,873
So, it's not bad, but just use sparingly.

62
00:02:25,020 --> 00:02:27,840
And the spring framework actually provides a support class

63
00:02:27,840 --> 00:02:29,800
for testing using reflection.

64
00:02:29,800 --> 00:02:33,690
Spring has this utility class called ReflectionTestUtils

65
00:02:33,690 --> 00:02:34,770
and this class allows you

66
00:02:34,770 --> 00:02:38,150
to get and set non-public fields directly

67
00:02:38,150 --> 00:02:41,010
and also allows you to invoke non-public methods.

68
00:02:41,010 --> 00:02:43,580
So, this is part of the spring framework.

69
00:02:43,580 --> 00:02:45,910
It's documented in the spring reference manual

70
00:02:45,910 --> 00:02:48,230
and they also have JavaDocs for it.

71
00:02:48,230 --> 00:02:50,170
On the slide, I have a link that'll redirect you

72
00:02:50,170 --> 00:02:52,700
to the official JavaDoc for this given class.

73
00:02:52,700 --> 00:02:55,040
And you can read about the additional use cases

74
00:02:55,040 --> 00:02:56,800
and also read about the examples

75
00:02:56,800 --> 00:02:57,820
and all the different methods

76
00:02:57,820 --> 00:02:59,753
that are available in this class.

77
00:03:02,640 --> 00:03:04,130
Let's go ahead and look at an example

78
00:03:04,130 --> 00:03:05,833
of reading private fields.

79
00:03:06,720 --> 00:03:08,500
I have this class, CollegeStudent,

80
00:03:08,500 --> 00:03:11,570
it has a field called ID, it's a private field.

81
00:03:11,570 --> 00:03:13,593
And I like to use that in my test.

82
00:03:15,040 --> 00:03:15,880
So, at the bottom here,

83
00:03:15,880 --> 00:03:19,080
I have this student that I get from the application context

84
00:03:19,080 --> 00:03:21,550
and then I make use of reflection utils

85
00:03:21,550 --> 00:03:23,130
and so, this is from this spring framework,

86
00:03:23,130 --> 00:03:24,630
I say ReflectionUtils.getField

87
00:03:25,910 --> 00:03:28,890
and I give the actual target object that I'm calling.

88
00:03:28,890 --> 00:03:30,650
So, in this case, it's the student.

89
00:03:30,650 --> 00:03:32,800
And then I specify the field that I want to access.

90
00:03:32,800 --> 00:03:34,220
In this example, id.

91
00:03:34,220 --> 00:03:35,630
And so that'll retrieve that field

92
00:03:35,630 --> 00:03:36,950
and I can use it to print line

93
00:03:36,950 --> 00:03:40,200
or use it in my assertions or whatever else in my unit test.

94
00:03:40,200 --> 00:03:43,200
But this is the basic code here for reading a private field.

95
00:03:45,850 --> 00:03:46,990
And we can take it a step further

96
00:03:46,990 --> 00:03:48,860
of setting a private field.

97
00:03:48,860 --> 00:03:50,810
So we have our CollegeStudent up top.

98
00:03:50,810 --> 00:03:52,060
And then at the bottom here,

99
00:03:52,060 --> 00:03:54,880
we make use of ReflectionTestUtils.setField

100
00:03:54,880 --> 00:03:56,870
and then we give the actual target object,

101
00:03:56,870 --> 00:03:59,290
the student, the field, ID

102
00:03:59,290 --> 00:04:00,890
and the actual value of 1.

103
00:04:00,890 --> 00:04:03,060
And we can give whatever value that we want here

104
00:04:03,060 --> 00:04:04,983
that that given field will accept.

105
00:04:08,870 --> 00:04:11,320
And here's to code for invoking your private method.

106
00:04:11,320 --> 00:04:12,640
In our class, college student,

107
00:04:12,640 --> 00:04:14,720
we have a method, get first name and ID.

108
00:04:14,720 --> 00:04:16,163
It's a private method.

109
00:04:17,410 --> 00:04:19,000
And then in our unit test,

110
00:04:19,000 --> 00:04:21,043
we grab the student and then we make use of

111
00:04:21,043 --> 00:04:24,020
ReflectionTestUtils.invokeMethod,

112
00:04:24,020 --> 00:04:26,150
we give the target object of the student

113
00:04:26,150 --> 00:04:27,650
and then the actual method name

114
00:04:27,650 --> 00:04:30,660
and that'll call or invoke that private method.

115
00:04:30,660 --> 00:04:32,410
They also have versions of this method

116
00:04:32,410 --> 00:04:34,070
where you can actually pass an arguments

117
00:04:34,070 --> 00:04:35,500
and you simply just pass the arguments

118
00:04:35,500 --> 00:04:37,200
as a comma to limited list.

119
00:04:37,200 --> 00:04:39,760
All righty, this looks really cool. I'm excited.

120
00:04:39,760 --> 00:04:41,250
Let's go ahead and move into the next video

121
00:04:41,250 --> 00:04:43,053
and let's start writing some code.

