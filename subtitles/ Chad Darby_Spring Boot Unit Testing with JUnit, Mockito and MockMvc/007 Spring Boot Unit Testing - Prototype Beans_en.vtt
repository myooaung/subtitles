WEBVTT
1
00:00:01.110 --> 00:00:03.480
In this video will cover some additional test cases

2
00:00:03.480 --> 00:00:04.981
create students without grades init

3
00:00:04.981 --> 00:00:06.750
verify students are prototypes,

4
00:00:06.750 --> 00:00:09.143
and also finding grade point average.

5
00:00:19.949 --> 00:00:21.120
We'll add this test here,

6
00:00:21.120 --> 00:00:23.090
create student without grades init.

7
00:00:44.920 --> 00:00:47.350
We'll retrieve another college student

8
00:00:47.350 --> 00:00:50.810
directly from the context, the Spring application context.

9
00:00:50.810 --> 00:00:51.643
And hmm.

10
00:00:52.540 --> 00:00:56.470
That's red, can't resolve context. Oh.

11
00:00:56.470 --> 00:00:58.570
I need to autowire the context.

12
00:00:58.570 --> 00:00:59.403
All right.

13
00:00:59.403 --> 00:01:00.545
So again, an example of where we need to

14
00:01:00.545 --> 00:01:02.430
use the context directly.

15
00:01:02.430 --> 00:01:04.230
And so here we'll actually autowire.

16
00:01:09.500 --> 00:01:12.520
So I'll autowire the application context,

17
00:01:12.520 --> 00:01:14.203
the Spring application context.

18
00:01:22.302 --> 00:01:23.135
Okay, great.

19
00:01:23.135 --> 00:01:26.230
So we've injected the Spring application context. Good.

20
00:01:26.230 --> 00:01:27.240
So then we can go through

21
00:01:27.240 --> 00:01:29.790
and actually retrieve some beans from that context.

22
00:01:31.055 --> 00:01:32.820
And the reason we're taking this approach

23
00:01:32.820 --> 00:01:35.940
is because that given college student is a prototype.

24
00:01:35.940 --> 00:01:38.210
And so we want to get an actual new instance

25
00:01:38.210 --> 00:01:40.143
of this given bean.

26
00:01:44.360 --> 00:01:45.193
All right.

27
00:01:45.193 --> 00:01:46.580
So we have a student two

28
00:01:51.329 --> 00:01:54.579
I'll set up some info for this student.

29
00:02:13.651 --> 00:02:18.151
Form some basic asserts here on some of the properties

30
00:02:43.510 --> 00:02:46.863
and it also will perform an assert for the student grades.

31
00:03:07.825 --> 00:03:08.900
Now let's go ahead

32
00:03:08.900 --> 00:03:09.913
and run this test.

33
00:03:16.121 --> 00:03:19.473
And this test passes successfully. Awesome.

34
00:03:29.930 --> 00:03:31.430
And we'll add another test here to

35
00:03:31.430 --> 00:03:33.613
verify the students are prototypes.

36
00:03:55.760 --> 00:03:57.210
And just as a refresher here,

37
00:03:57.210 --> 00:03:59.260
so we have a college student.

38
00:03:59.260 --> 00:04:02.790
There's no annotation here for component at the top

39
00:04:02.790 --> 00:04:06.110
but we manually define this as a bean

40
00:04:06.110 --> 00:04:08.040
in our Spring Boot application

41
00:04:08.040 --> 00:04:09.920
and we set the scope to prototype.

42
00:04:09.920 --> 00:04:13.010
So we know that this college student is a prototype.

43
00:04:13.010 --> 00:04:14.420
So every time we retrieve the bean

44
00:04:14.420 --> 00:04:17.683
from the application context, then we'll get a new instance.

45
00:04:26.474 --> 00:04:29.063
I'll just copy some of the code from up top,

46
00:04:31.900 --> 00:04:32.733
student two.

47
00:04:32.733 --> 00:04:34.060
So it gives us a new instance

48
00:04:34.060 --> 00:04:36.910
of the bean because it's a prototype bean.

49
00:04:36.910 --> 00:04:39.890
Then I'll see if this is the same as student.

50
00:04:39.890 --> 00:04:42.090
So if student and students who are the same.

51
00:04:49.315 --> 00:04:52.000
And remember the student field is autowired

52
00:04:52.000 --> 00:04:53.343
into this test class.

53
00:05:00.280 --> 00:05:04.070
Now, when we run the test, then this test passes as desired.

54
00:05:04.070 --> 00:05:04.903
So this is great.

55
00:05:04.903 --> 00:05:06.570
So these are not the same.

56
00:05:06.570 --> 00:05:08.920
And this means that these really are prototypes

57
00:05:14.137 --> 00:05:15.860
and we have one final test here.

58
00:05:15.860 --> 00:05:18.260
We'll find the grade point average for a student

59
00:05:35.208 --> 00:05:39.420
and I'll make you to this new item here assert all.

60
00:05:39.420 --> 00:05:42.993
So basically allows us to perform multiple asserts as one.

61
00:05:47.780 --> 00:05:48.660
And in this scenario,

62
00:05:48.660 --> 00:05:50.913
we're going to test all the assert equals.

63
00:05:57.760 --> 00:05:58.593
And for each one

64
00:05:58.593 --> 00:06:01.860
of the assert equals you make use of a lambda expression.

65
00:06:01.860 --> 00:06:03.930
We pass in the expected value

66
00:06:03.930 --> 00:06:05.560
and then we give the actual value.

67
00:06:05.560 --> 00:06:06.410
So student grades

68
00:06:06.410 --> 00:06:08.293
add grade results for single class.

69
00:06:10.207 --> 00:06:11.960
Student that gets student grades,

70
00:06:11.960 --> 00:06:13.363
get math grade results.

71
00:06:15.140 --> 00:06:16.940
Kind of fix up the parenthesis here.

72
00:06:22.631 --> 00:06:24.753
Let's add another lambda expression.

73
00:06:29.980 --> 00:06:32.113
And this is for the grade point average.

74
00:06:47.757 --> 00:06:49.050
And that's pretty much it.

75
00:06:49.050 --> 00:06:51.070
Let me fix the parenthesis, get everything all balanced

76
00:06:51.070 --> 00:06:52.520
up and formatted accordingly.

77
00:06:56.350 --> 00:06:57.183
Excellent.

78
00:07:00.636 --> 00:07:03.193
Now let's go ahead and run this test.

79
00:07:05.630 --> 00:07:08.180
We see the results and excellent.

80
00:07:08.180 --> 00:07:10.070
This test passes as desired.

81
00:07:10.070 --> 00:07:10.903
I like it.

82
00:07:12.010 --> 00:07:13.660
Great. So just some really good examples here

83
00:07:13.660 --> 00:07:14.840
of just showing you how we can make use

84
00:07:14.840 --> 00:07:18.230
of that Spring Boot test, how we can inject spring beans

85
00:07:18.230 --> 00:07:20.010
how we can access application properties

86
00:07:20.010 --> 00:07:23.500
and also make use of some of the normal JUnit asserts.

87
00:07:23.500 --> 00:07:26.503
So I like to say good job, my friend.

