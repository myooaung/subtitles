WEBVTT
1
00:00:01.100 --> 00:00:03.040
Okay, so let's look at some code examples here

2
00:00:03.040 --> 00:00:06.573
using the assertions for Array, Iterable, and Lines.

3
00:00:11.700 --> 00:00:12.770
So in this example, here

4
00:00:12.770 --> 00:00:17.247
the code to test will basically test a string array.

5
00:00:20.250 --> 00:00:23.570
So this field here, first three letters of alphabet.

6
00:00:23.570 --> 00:00:25.970
We're going to make comparisons against this array.

7
00:00:27.510 --> 00:00:29.540
Let's swing over to our demo details test

8
00:00:29.540 --> 00:00:31.443
and let's define a new test method.

9
00:00:59.440 --> 00:01:01.420
I'll define a local string array

10
00:01:07.640 --> 00:01:10.130
and then I'll make use of that assertArrayEquals.

11
00:01:10.130 --> 00:01:12.050
So it's going to compare to array objects

12
00:01:12.050 --> 00:01:13.793
and see if they're equal deeply.

13
00:01:14.950 --> 00:01:17.280
I'll pass in the stringArray,demoUtils,

14
00:01:17.280 --> 00:01:19.490
I get first three letters of alphabet

15
00:01:26.730 --> 00:01:29.100
and then I'll run the test and we'll see everything passes

16
00:01:29.100 --> 00:01:31.463
as desired for the Array Equals.

17
00:01:34.930 --> 00:01:36.720
I'll just kind of break it on purpose here.

18
00:01:36.720 --> 00:01:41.027
So instead of "A", "B", "C", I'll say "Z" and then run it

19
00:01:45.730 --> 00:01:46.813
and it fails.

20
00:01:47.770 --> 00:01:49.640
We can scroll over a bit

21
00:01:49.640 --> 00:01:52.740
and it says the array contents differ at index 2

22
00:01:52.740 --> 00:01:57.740
expected a Z, but was a C, we'll go ahead and fix it again

23
00:01:57.940 --> 00:01:59.840
and everything will run as desired.

24
00:01:59.840 --> 00:02:03.883
So it really is checking deeply on these array elements.

25
00:02:07.960 --> 00:02:09.620
So here's the code, the test here

26
00:02:09.620 --> 00:02:14.080
we'll test for a list of Strings, academyInList

27
00:02:14.080 --> 00:02:16.330
and we'll make comparisons against this list.

28
00:02:20.550 --> 00:02:21.980
We'll move into our test class

29
00:02:21.980 --> 00:02:23.633
and we'll set up a test method.

30
00:02:30.850 --> 00:02:32.423
Test interval equals,

31
00:02:43.320 --> 00:02:46.470
I'll define our local list of Strings

32
00:03:00.470 --> 00:03:03.730
and then I'll assert interval equals

33
00:03:03.730 --> 00:03:06.180
I'll pass in theList, demoUtils.getacademyInList.

34
00:03:27.750 --> 00:03:29.013
And now when I run this test

35
00:03:29.013 --> 00:03:32.760
then we'll see that this given test passes as desired.

36
00:03:32.760 --> 00:03:36.033
So interval equals green. Good job.

37
00:03:39.980 --> 00:03:41.740
Just moving back into my test class here

38
00:03:41.740 --> 00:03:44.407
I'll create a test method, testLinesMatch.

39
00:03:56.610 --> 00:03:58.030
I'll do a little copy paste here

40
00:03:58.030 --> 00:03:59.540
because I'll use the same list

41
00:04:05.600 --> 00:04:07.865
and then I'll give the assertLinesMatch

42
00:04:07.865 --> 00:04:10.865
theList, demoUtils.getAcademyInList.

43
00:04:23.870 --> 00:04:24.920
The lines should match.

44
00:04:24.920 --> 00:04:28.460
I go ahead and run this and then the test pass is AOK.

45
00:04:28.460 --> 00:04:30.453
So we get the green check mark again.

46
00:04:33.040 --> 00:04:34.340
Awesome. So this was really good.

47
00:04:34.340 --> 00:04:35.610
So we saw are some examples here

48
00:04:35.610 --> 00:04:37.410
of using the additional assertion methods

49
00:04:37.410 --> 00:04:40.480
for Array, Iterables and Lines.

50
00:04:40.480 --> 00:04:41.383
Good job.

