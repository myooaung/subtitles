1
00:00:01,290 --> 00:00:02,123
All right.

2
00:00:02,123 --> 00:00:03,890
So we're kind of moving right along here.

3
00:00:03,890 --> 00:00:05,890
And what we'll do is we'll write a new test

4
00:00:05,890 --> 00:00:08,600
to retrieve all the students from the database.

5
00:00:08,600 --> 00:00:10,860
And then, we'll compare the size of the number

6
00:00:10,860 --> 00:00:12,143
of students retrieved.

7
00:00:14,820 --> 00:00:16,920
Let me move in here and set up a new test.

8
00:00:25,463 --> 00:00:29,296
And we'll call this test, getGradeBookService.

9
00:00:30,720 --> 00:00:32,759
And what I'd like to do is get a list

10
00:00:32,759 --> 00:00:36,203
or a collection of all the students from the database.

11
00:00:39,770 --> 00:00:42,323
So I'll set up this Iterable CollegeStudent.

12
00:00:51,120 --> 00:00:53,910
And I'll say studentServiceGetGradeBook.

13
00:00:53,910 --> 00:00:54,743
So effectively,

14
00:00:54,743 --> 00:00:57,003
I want to get all the students from the database.

15
00:00:58,570 --> 00:01:00,030
And we see this get grade book it's red,

16
00:01:00,030 --> 00:01:00,990
that means we have some work to do,

17
00:01:00,990 --> 00:01:02,640
but for now, let's just kind of write this out,

18
00:01:02,640 --> 00:01:04,040
and we'll come back to that.

19
00:01:10,390 --> 00:01:13,470
And then, I'll set up this CollegeStudent list

20
00:01:13,470 --> 00:01:14,823
as an empty ArrayList.

21
00:01:23,100 --> 00:01:24,590
And then, the next thing I'll do is I'll simply

22
00:01:24,590 --> 00:01:27,710
do a for loop over that Iterable CollegeStudents.

23
00:01:27,710 --> 00:01:30,623
And I'll grab each student and place it into my list.

24
00:01:34,050 --> 00:01:37,025
Here, I'll just say, collegeStudents.add,

25
00:01:37,025 --> 00:01:38,593
collegeStudent, singular.

26
00:01:43,550 --> 00:01:45,150
And then, I'll do an assert.

27
00:01:45,150 --> 00:01:47,056
So I'll assert expect it,

28
00:01:47,056 --> 00:01:50,180
meaning how how many students I expect to find,

29
00:01:50,180 --> 00:01:54,323
1, and then, collegeStudents.size.

30
00:01:56,500 --> 00:01:59,430
So here basically, based on the actual size

31
00:01:59,430 --> 00:02:01,280
of that collection or that ArrayList.

32
00:02:04,180 --> 00:02:05,603
So when I run this,

33
00:02:08,500 --> 00:02:09,580
then it fails, right?

34
00:02:09,580 --> 00:02:11,130
Because I still have some work to do.

35
00:02:11,130 --> 00:02:12,270
I didn't write the code here

36
00:02:12,270 --> 00:02:15,030
for that studentService.GetGradeBook method.

37
00:02:15,030 --> 00:02:16,930
So let me swing that over into my service,

38
00:02:16,930 --> 00:02:19,023
and let me write the code for that method.

39
00:02:23,280 --> 00:02:24,830
And you can also use the IDE

40
00:02:24,830 --> 00:02:26,940
to help you generate the method stub.

41
00:02:26,940 --> 00:02:29,980
That's one feature that's available in the IDE.

42
00:02:29,980 --> 00:02:32,413
But here, I'll just kind of write it out, plain vanilla.

43
00:02:45,760 --> 00:02:50,321
Here, I'll say collegeStudents = studentDao.findAll.

44
00:02:50,321 --> 00:02:55,000
That returns in Iterable of the college student.

45
00:02:55,000 --> 00:02:57,400
And I simply return that to the calling program.

46
00:03:01,916 --> 00:03:03,930
And now, when we swing back over to our test,

47
00:03:03,930 --> 00:03:05,470
we see the code is no longer red

48
00:03:05,470 --> 00:03:07,773
because we have that method available.

49
00:03:09,160 --> 00:03:10,883
And now, let's run our test.

50
00:03:15,890 --> 00:03:17,310
And we see that the test passes

51
00:03:17,310 --> 00:03:20,150
because we only have one student in our database.

52
00:03:20,150 --> 00:03:23,640
So the size of one matches up just right.

53
00:03:23,640 --> 00:03:25,860
And that's based on the work that we did earlier,

54
00:03:25,860 --> 00:03:29,270
and that before each to add student to the database.

55
00:03:29,270 --> 00:03:31,090
All righty. So this looks really good.

56
00:03:31,090 --> 00:03:31,923
I like it.

